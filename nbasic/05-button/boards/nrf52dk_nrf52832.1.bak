//==============================================================================
//  nrf52_pca10040.overlay
//  overlay file for BLUCOV8/NDK52 board
//
//  Created by Hugo Pristauz on 04.08.2019
//  Copyright Â© 2019 Bluenetics GmbH. All rights reserved.
//==============================================================================
/*

Device tree overlay of BLuco V8 Nordic part relative to nrf52_pcs10040
This overlay is suitable for both NDK52 and BlucoV8. Conflicts have to be
resolved at runtime by reading pin PIN_WHO and subsequent proper if/else
branches.

*/
//==============================================================================
// important files
//==============================================================================
/*

1) the master overlay file is the device tree specification (DTS) file for the
   nrf52_pca100040 boards (NDK52) found in the zephyr source directory:

      .../zephyr/boards/arm/nrf52_pca10040/nrf52_pca10040.dts

2) the build system generates a file to be included by the pre-processor during
   compilation of each source file:

      .../build/zephyr/nrf52_pca10040.dts_compiled
*/
//==============================================================================
// Pin Layout:
//==============================================================================
/*
    Pin     BlucoV12       NDK52       Type    Comment
    ----------------------------------------------------------------------------
    P0.00   XTAL1          XTAL1       ---     XTAL input 1
    P0.01   XTAL2          XTAL2       ---     XTAL input 2
    P0.02   CUR_SENSE      CUR_SENSE   AIN     current sensing signal
    P0.03   VOLTAGE_SENSE  ZERO_CROSS  DIN     zero cross signal
    P0.04   SENSE_IN_A     SENSE_IN_A  AIN     to sense IN1 state
    P0.05   NRF_UART_RX    N/C         DIN     UART RX on BlucoV8
    P0.06   N/C            NRF_UART_TX ---     UART TX on NDK52
    P0.07   N/C            N/C         ---     not used
    P0.08   N/C            NRF_UART_RX ---     UART RX on NDK52
    P0.09   N/C            N/C         ---     not used
    P0.10   N/C            N/C         ---     not used
    P0.11   GATE_DRIVE     GATE_DRIVE  DOUT    to control MOSFET gates
    P0.12   N/C            CUR_LIMIT   DIN     current limit signal
    P0.13   N/C            BUTTON1     DIN     auxillary button on NDK52
    P0.14   FACTORY_RESET  BUTTON2     DIN     THE "Bluco Button
    P0.15   LED_BLUE       BUTTON3     ***     ** CONFLICT: resolve @ runtime **
    P0.16   NRF_UART_TX    BUTTON4     DIN     used to toggle IN2 state on NDK52
    P0.17   LED_RED        LED1        AOUT    Auxillary LED
    P0.18   LED_GREEN      LED2        DOUT    Status LED on NDK52
    P0.19   N/C            LED3        DOUT    Indicating IN1 state on NDK52
    P0.20   N/C            LED4        DOUT    Indicating IN2 state on NDK52
    P0.21   RESET          RESET       DIN     reset PIN
    P0.22   GND            ZC_EMU      DOUT    zero cross emulation (aux signal)
    P0.23   WHO            WHO         DIN     used to decide BlucoV8/NDK52 HW
    P0.24   GND            N/C         ---     not used
    P0.25   GND            N/C         ---     not used
    P0.26   GND            N/C         ---     not used
    P0.27   GND            N/C         ---     not used
    P0.28   SENSE_IN_B     SENSE_IN_B  AIN     to sense IN2 state
    P0.29   SVM            SVM         AIN     supply voltage monitor
    P0.30   VREF           VREF        AIN     reference voltage for comparator
*/

//==============================================================================
// UART pin defs
//==============================================================================

    &uart0
    {
      	status = "ok";
      	compatible = "nordic,nrf-uart";
      	current-speed = <115200>;
      	tx-pin = <16>;
      	rx-pin = <5>;
    };

//==============================================================================
// begin SOC root
//==============================================================================

/ { // begin SOC device tree specification overlay

//==============================================================================
// LEDs
//==============================================================================

  	leds
    {
        compatible = "gpio-leds";

        led0: led_0    // Red LED @ nRF
        {
            gpios = <&gpio0 17 GPIO_INT_ACTIVE_LOW>;
            label = "Green LED 0";
        };

        led1: led_1    // Green LED @ nRF
        {
            gpios = <&gpio0 18 GPIO_INT_ACTIVE_LOW>;
            label = "Green LED 1";
        };

        led2: led_2
        {
            gpios = <&gpio0 19 GPIO_INT_ACTIVE_LOW>;
            label = "Green LED 2";
        };

        led3: led_3
        {
            gpios = <&gpio0 20 GPIO_INT_ACTIVE_LOW>;
            label = "Green LED 3";
        };

            // the green LED is the status LED @ BLUCOV8.led_green pin @ BLUCOV8
            // conflicts with BUTTON3 pin @ NDK52. For this reason BUTTON3 must
            // not be used (initialized) if the firmware runs on NDK52.

      	ledblue: led_blue   // conflicts with BUTTON3 @ NDK52
        {
        		gpios = <&gpio0 15 0>;  // This is button3 on nrf52_pca10040
        		label = "Blue LED";
      	};

  	    zero_cross_emulation
        {
  		      gpios = <&gpio0 22 0>;
  		      label = "ZERO_CROSS emulation";
  	    };

            // The ZERO_CROSS input defined by BlueNODE_V8.0_CPU_SCH.PDF
            // Fortunatelly it's not used in nrf52_pcs10040 so no reconfig is
            // needed at test on NDK52

        zero_cross
        {
            gpios = <&gpio0 3 0>;
            label = "ZERO_CROSS";
        };

            // The GATE_DRIVE output defined by BlueNODE_V8.0_CPU_SCH.PDF
            // Fortunatelly it's not used in nrf52_pcs10040 so no reconfig is
            // needed at test on NDK52

        gate_drive
        {
            gpios = <&gpio0 11 0>;
            label = "GATE_DRIVE";
        };

            // the WHO GPIO pin is used to let the firmware identify whether it
            // is running on a BLUCOV8 or NDK52 hardware. On BLUCOV8 the WHO pin
            // connects to GND while it is open at NDK52. A GPIO pin configura-
            // tion with 3V3 pullup lets the firmware detect a BlucoV8 hardware
            // if WHO = 0 and an NDK52 HW if WHO = 1

        who  // the who pin is at GND level on BLUCOV8 and open on NDK52
        {
    		gpios = <&gpio0 23 0>;
            label = "WHO";
        };
  	};

//==============================================================================
// buttons
//==============================================================================

  	buttons
    {
    		compatible = "gpio-keys";

    		button0: button_0
        {
      			gpios = <&gpio0 13 GPIO_PUD_PULL_UP>;
      			label = "Push button switch 0";
    		};

    		button1: button_1
        {
      			gpios = <&gpio0 14 GPIO_PUD_PULL_UP>;
      			label = "Push button switch 1";
    		};

    		button2: button_2
        {
      			gpios = <&gpio0 15 GPIO_PUD_PULL_UP>;
      			label = "Push button switch 2";
    		};

    		button3: button_3
        {
      			gpios = <&gpio0 16 GPIO_PUD_PULL_UP>;
      			label = "Push button switch 3";
    		};
    };

/*
    buttons  // THESE PERIPHERALS ARE NEEDED ONLY BY NDK52, BLUCOV8 DOESN'T HAVE
    {
        button0: button_0
        {
            status = "disabled";
        };
    };
*/

//==============================================================================
// Aliases
//==============================================================================

        // this generates the aliases
        //
        //		led0 = "/leds/led_0";
        //		led1 = "/leds/led_1";
        //		led2 = "/leds/led_2";
        //		led3 = "/leds/led_3";
        //
        //		sw0 = "/buttons/button_0";
        //		sw1 = "/buttons/button_1";
        //		sw2 = "/buttons/button_2";
        //		sw3 = "/buttons/button_3";
        //
        //		led_red = "/leds/led_0";
        //		led_green = "/buttons/button_2";  // conflicts !!!!

    aliases      // These aliases are provided for compatibility with samples
    {
        led0 = &led0;
        led1 = &led1;
        led2 = &led2;
        led3 = &led3;

            // as in https://github.com/blue-team/Project-Management/issues/53

        led_red = &led0;
//      led_green = &ledgreen;  // = &led1
        led_green = &led2;

        sw0 = &button0;
        sw1 = &button1;
        sw2 = &button2;
        sw3 = &button3;
    };

//==============================================================================
// end root system
//==============================================================================

};  // end SOC device tree specification overlay

//==============================================================================
// post definitions
//==============================================================================

        // pwm0 is used for red led dimming. red led (pin 17 is led1 on
        // nrf52_pca10040) is configured as its ch0-pin in the the board base
        // dts file.

    &spi2  // Disable it to get its pin for zero_cross_emulation
    {
        status = "disabled";
    };

        // Own pwm for ZERO_CROSS emulation to be free to generate ZERO_CROSS
        // emulation frequency. pwm0 is used for led dimming. led1 is configured
        // as its ch0-pin.
        //
        // WARNING:
        // - THE PWMS SEEMS TO USE TIMERS. I DON'T KNOW HOW TO USE TIMER WHEN
        //   PWMs ARE USE.

    &pwm1
    {
        status = "ok";
        ch0-pin = <22>; // the pin of zero_cross_emulation
    };
