
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
   0:	a0 5e 00 20 05 4b 00 00 0d 3b 02 00 d9 4a 00 00     .^. .K...;...J..
  10:	d9 4a 00 00 d9 4a 00 00 d9 4a 00 00 00 00 00 00     .J...J...J......
	...
  2c:	55 45 00 00 d9 4a 00 00 00 00 00 00 01 45 00 00     UE...J.......E..
  3c:	bb 87 02 00                                         ....

00000040 <_irq_vector_table>:
  40:	05 46 00 00 1d 7a 02 00 05 46 00 00 05 46 00 00     .F...z...F...F..
  50:	05 46 00 00 05 46 00 00 05 46 00 00 05 46 00 00     .F...F...F...F..
  60:	05 46 00 00 05 46 00 00 05 46 00 00 05 46 00 00     .F...F...F...F..
  70:	05 46 00 00 05 46 00 00 05 46 00 00 05 46 00 00     .F...F...F...F..
  80:	05 46 00 00 05 46 00 00 05 46 00 00 05 46 00 00     .F...F...F...F..
  90:	05 46 00 00 05 46 00 00 05 46 00 00 05 46 00 00     .F...F...F...F..
  a0:	05 46 00 00 05 46 00 00 05 46 00 00 05 46 00 00     .F...F...F...F..
  b0:	05 46 00 00 05 46 00 00 05 46 00 00 05 46 00 00     .F...F...F...F..
  c0:	05 46 00 00 05 46 00 00 05 46 00 00 05 46 00 00     .F...F...F...F..
  d0:	05 46 00 00 05 46 00 00 05 46 00 00                 .F...F...F..

Disassembly of section text:

000000e0 <__aeabi_ldivmod>:
      e0:	b97b      	cbnz	r3, 102 <CONFIG_KOBJECT_TEXT_AREA+0x2>
      e2:	b972      	cbnz	r2, 102 <CONFIG_KOBJECT_TEXT_AREA+0x2>
      e4:	2900      	cmp	r1, #0
      e6:	bfbe      	ittt	lt
      e8:	2000      	movlt	r0, #0
      ea:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
      ee:	e006      	blt.n	fe <__aeabi_ldivmod+0x1e>
      f0:	bf08      	it	eq
      f2:	2800      	cmpeq	r0, #0
      f4:	bf1c      	itt	ne
      f6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
      fa:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
      fe:	f000 b9d3 	b.w	4a8 <__aeabi_idiv0>
     102:	f1ad 0c08 	sub.w	ip, sp, #8
     106:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     10a:	2900      	cmp	r1, #0
     10c:	db09      	blt.n	122 <CONFIG_KOBJECT_TEXT_AREA+0x22>
     10e:	2b00      	cmp	r3, #0
     110:	db1a      	blt.n	148 <CONFIG_IDLE_STACK_SIZE+0x8>
     112:	f000 f861 	bl	1d8 <__udivmoddi4>
     116:	f8dd e004 	ldr.w	lr, [sp, #4]
     11a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     11e:	b004      	add	sp, #16
     120:	4770      	bx	lr
     122:	4240      	negs	r0, r0
     124:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     128:	2b00      	cmp	r3, #0
     12a:	db1b      	blt.n	164 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x1a>
     12c:	f000 f854 	bl	1d8 <__udivmoddi4>
     130:	f8dd e004 	ldr.w	lr, [sp, #4]
     134:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     138:	b004      	add	sp, #16
     13a:	4240      	negs	r0, r0
     13c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     140:	4252      	negs	r2, r2
     142:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     146:	4770      	bx	lr
     148:	4252      	negs	r2, r2
     14a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     14e:	f000 f843 	bl	1d8 <__udivmoddi4>
     152:	f8dd e004 	ldr.w	lr, [sp, #4]
     156:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     15a:	b004      	add	sp, #16
     15c:	4240      	negs	r0, r0
     15e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     162:	4770      	bx	lr
     164:	4252      	negs	r2, r2
     166:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     16a:	f000 f835 	bl	1d8 <__udivmoddi4>
     16e:	f8dd e004 	ldr.w	lr, [sp, #4]
     172:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     176:	b004      	add	sp, #16
     178:	4252      	negs	r2, r2
     17a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     17e:	4770      	bx	lr

00000180 <__aeabi_uldivmod>:
     180:	b953      	cbnz	r3, 198 <CONFIG_BT_MESH_TX_SEG_RETRANS_TIMEOUT_UNICAST+0x8>
     182:	b94a      	cbnz	r2, 198 <CONFIG_BT_MESH_TX_SEG_RETRANS_TIMEOUT_UNICAST+0x8>
     184:	2900      	cmp	r1, #0
     186:	bf08      	it	eq
     188:	2800      	cmpeq	r0, #0
     18a:	bf1c      	itt	ne
     18c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     190:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     194:	f000 b988 	b.w	4a8 <__aeabi_idiv0>
     198:	f1ad 0c08 	sub.w	ip, sp, #8
     19c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     1a0:	f000 f81a 	bl	1d8 <__udivmoddi4>
     1a4:	f8dd e004 	ldr.w	lr, [sp, #4]
     1a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     1ac:	b004      	add	sp, #16
     1ae:	4770      	bx	lr

000001b0 <__popcountsi2>:
     1b0:	0843      	lsrs	r3, r0, #1
     1b2:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     1b6:	1ac0      	subs	r0, r0, r3
     1b8:	0883      	lsrs	r3, r0, #2
     1ba:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
     1be:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     1c2:	4418      	add	r0, r3
     1c4:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     1c8:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     1cc:	eb00 2000 	add.w	r0, r0, r0, lsl #8
     1d0:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     1d4:	0e00      	lsrs	r0, r0, #24
     1d6:	4770      	bx	lr

000001d8 <__udivmoddi4>:
     1d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     1dc:	9e08      	ldr	r6, [sp, #32]
     1de:	460d      	mov	r5, r1
     1e0:	4604      	mov	r4, r0
     1e2:	4688      	mov	r8, r1
     1e4:	2b00      	cmp	r3, #0
     1e6:	d14d      	bne.n	284 <CONFIG_BT_HCI_TX_STACK_SIZE+0x4>
     1e8:	428a      	cmp	r2, r1
     1ea:	4694      	mov	ip, r2
     1ec:	d968      	bls.n	2c0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x40>
     1ee:	fab2 f282 	clz	r2, r2
     1f2:	b152      	cbz	r2, 20a <CONFIG_FLASH_SIZE+0xa>
     1f4:	fa01 f302 	lsl.w	r3, r1, r2
     1f8:	f1c2 0120 	rsb	r1, r2, #32
     1fc:	fa20 f101 	lsr.w	r1, r0, r1
     200:	fa0c fc02 	lsl.w	ip, ip, r2
     204:	ea41 0803 	orr.w	r8, r1, r3
     208:	4094      	lsls	r4, r2
     20a:	ea4f 451c 	mov.w	r5, ip, lsr #16
     20e:	0c21      	lsrs	r1, r4, #16
     210:	fbb8 fef5 	udiv	lr, r8, r5
     214:	fa1f f78c 	uxth.w	r7, ip
     218:	fb05 831e 	mls	r3, r5, lr, r8
     21c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     220:	fb0e f107 	mul.w	r1, lr, r7
     224:	4299      	cmp	r1, r3
     226:	d90b      	bls.n	240 <CONFIG_FLASH_SIZE+0x40>
     228:	eb1c 0303 	adds.w	r3, ip, r3
     22c:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
     230:	f080 811e 	bcs.w	470 <CONFIG_LOG_BUFFER_SIZE+0x70>
     234:	4299      	cmp	r1, r3
     236:	f240 811b 	bls.w	470 <CONFIG_LOG_BUFFER_SIZE+0x70>
     23a:	f1ae 0e02 	sub.w	lr, lr, #2
     23e:	4463      	add	r3, ip
     240:	1a5b      	subs	r3, r3, r1
     242:	b2a4      	uxth	r4, r4
     244:	fbb3 f0f5 	udiv	r0, r3, r5
     248:	fb05 3310 	mls	r3, r5, r0, r3
     24c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     250:	fb00 f707 	mul.w	r7, r0, r7
     254:	42a7      	cmp	r7, r4
     256:	d90a      	bls.n	26e <CONFIG_BT_MESH_RPL_STORE_TIMEOUT+0x16>
     258:	eb1c 0404 	adds.w	r4, ip, r4
     25c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     260:	f080 8108 	bcs.w	474 <CONFIG_BT_HCI_ECC_STACK_SIZE>
     264:	42a7      	cmp	r7, r4
     266:	f240 8105 	bls.w	474 <CONFIG_BT_HCI_ECC_STACK_SIZE>
     26a:	4464      	add	r4, ip
     26c:	3802      	subs	r0, #2
     26e:	1be4      	subs	r4, r4, r7
     270:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     274:	2100      	movs	r1, #0
     276:	b11e      	cbz	r6, 280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     278:	40d4      	lsrs	r4, r2
     27a:	2300      	movs	r3, #0
     27c:	e9c6 4300 	strd	r4, r3, [r6]
     280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     284:	428b      	cmp	r3, r1
     286:	d908      	bls.n	29a <CONFIG_BT_HCI_TX_STACK_SIZE+0x1a>
     288:	2e00      	cmp	r6, #0
     28a:	f000 80ee 	beq.w	46a <CONFIG_LOG_BUFFER_SIZE+0x6a>
     28e:	2100      	movs	r1, #0
     290:	e9c6 0500 	strd	r0, r5, [r6]
     294:	4608      	mov	r0, r1
     296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     29a:	fab3 f183 	clz	r1, r3
     29e:	2900      	cmp	r1, #0
     2a0:	d14a      	bne.n	338 <CONFIG_BT_MESH_ADV_STACK_SIZE+0x38>
     2a2:	42ab      	cmp	r3, r5
     2a4:	d302      	bcc.n	2ac <CONFIG_BT_HCI_TX_STACK_SIZE+0x2c>
     2a6:	4282      	cmp	r2, r0
     2a8:	f200 80f9 	bhi.w	49e <CONFIG_BT_HCI_ECC_STACK_SIZE+0x2a>
     2ac:	1a84      	subs	r4, r0, r2
     2ae:	eb65 0303 	sbc.w	r3, r5, r3
     2b2:	2001      	movs	r0, #1
     2b4:	4698      	mov	r8, r3
     2b6:	2e00      	cmp	r6, #0
     2b8:	d0e2      	beq.n	280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     2ba:	e9c6 4800 	strd	r4, r8, [r6]
     2be:	e7df      	b.n	280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     2c0:	b902      	cbnz	r2, 2c4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x44>
     2c2:	deff      	udf	#255	; 0xff
     2c4:	fab2 f282 	clz	r2, r2
     2c8:	2a00      	cmp	r2, #0
     2ca:	f040 8091 	bne.w	3f0 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x8>
     2ce:	eba1 050c 	sub.w	r5, r1, ip
     2d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
     2d6:	fa1f fe8c 	uxth.w	lr, ip
     2da:	2101      	movs	r1, #1
     2dc:	fbb5 f3f7 	udiv	r3, r5, r7
     2e0:	fb07 5013 	mls	r0, r7, r3, r5
     2e4:	0c25      	lsrs	r5, r4, #16
     2e6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     2ea:	fb0e f003 	mul.w	r0, lr, r3
     2ee:	42a8      	cmp	r0, r5
     2f0:	d908      	bls.n	304 <CONFIG_BT_MESH_ADV_STACK_SIZE+0x4>
     2f2:	eb1c 0505 	adds.w	r5, ip, r5
     2f6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
     2fa:	d202      	bcs.n	302 <CONFIG_BT_MESH_ADV_STACK_SIZE+0x2>
     2fc:	42a8      	cmp	r0, r5
     2fe:	f200 80cb 	bhi.w	498 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x24>
     302:	4643      	mov	r3, r8
     304:	1a2d      	subs	r5, r5, r0
     306:	b2a4      	uxth	r4, r4
     308:	fbb5 f0f7 	udiv	r0, r5, r7
     30c:	fb07 5510 	mls	r5, r7, r0, r5
     310:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     314:	fb0e fe00 	mul.w	lr, lr, r0
     318:	45a6      	cmp	lr, r4
     31a:	d908      	bls.n	32e <CONFIG_BT_MESH_ADV_STACK_SIZE+0x2e>
     31c:	eb1c 0404 	adds.w	r4, ip, r4
     320:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     324:	d202      	bcs.n	32c <CONFIG_BT_MESH_ADV_STACK_SIZE+0x2c>
     326:	45a6      	cmp	lr, r4
     328:	f200 80bb 	bhi.w	4a2 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x2e>
     32c:	4628      	mov	r0, r5
     32e:	eba4 040e 	sub.w	r4, r4, lr
     332:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
     336:	e79e      	b.n	276 <CONFIG_BT_MESH_RPL_STORE_TIMEOUT+0x1e>
     338:	f1c1 0720 	rsb	r7, r1, #32
     33c:	408b      	lsls	r3, r1
     33e:	fa22 fc07 	lsr.w	ip, r2, r7
     342:	ea4c 0c03 	orr.w	ip, ip, r3
     346:	fa20 f407 	lsr.w	r4, r0, r7
     34a:	fa05 f301 	lsl.w	r3, r5, r1
     34e:	431c      	orrs	r4, r3
     350:	40fd      	lsrs	r5, r7
     352:	ea4f 491c 	mov.w	r9, ip, lsr #16
     356:	fa00 f301 	lsl.w	r3, r0, r1
     35a:	fbb5 f8f9 	udiv	r8, r5, r9
     35e:	0c20      	lsrs	r0, r4, #16
     360:	fa1f fe8c 	uxth.w	lr, ip
     364:	fb09 5518 	mls	r5, r9, r8, r5
     368:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
     36c:	fb08 f00e 	mul.w	r0, r8, lr
     370:	42a8      	cmp	r0, r5
     372:	fa02 f201 	lsl.w	r2, r2, r1
     376:	d90b      	bls.n	390 <CONFIG_BT_MESH_ADV_STACK_SIZE+0x90>
     378:	eb1c 0505 	adds.w	r5, ip, r5
     37c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
     380:	f080 8088 	bcs.w	494 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x20>
     384:	42a8      	cmp	r0, r5
     386:	f240 8085 	bls.w	494 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x20>
     38a:	f1a8 0802 	sub.w	r8, r8, #2
     38e:	4465      	add	r5, ip
     390:	1a2d      	subs	r5, r5, r0
     392:	b2a4      	uxth	r4, r4
     394:	fbb5 f0f9 	udiv	r0, r5, r9
     398:	fb09 5510 	mls	r5, r9, r0, r5
     39c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     3a0:	fb00 fe0e 	mul.w	lr, r0, lr
     3a4:	45ae      	cmp	lr, r5
     3a6:	d908      	bls.n	3ba <CONFIG_BT_MESH_ADV_STACK_SIZE+0xba>
     3a8:	eb1c 0505 	adds.w	r5, ip, r5
     3ac:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
     3b0:	d26c      	bcs.n	48c <CONFIG_BT_HCI_ECC_STACK_SIZE+0x18>
     3b2:	45ae      	cmp	lr, r5
     3b4:	d96a      	bls.n	48c <CONFIG_BT_HCI_ECC_STACK_SIZE+0x18>
     3b6:	3802      	subs	r0, #2
     3b8:	4465      	add	r5, ip
     3ba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     3be:	fba0 9402 	umull	r9, r4, r0, r2
     3c2:	eba5 050e 	sub.w	r5, r5, lr
     3c6:	42a5      	cmp	r5, r4
     3c8:	46c8      	mov	r8, r9
     3ca:	46a6      	mov	lr, r4
     3cc:	d356      	bcc.n	47c <CONFIG_BT_HCI_ECC_STACK_SIZE+0x8>
     3ce:	d053      	beq.n	478 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x4>
     3d0:	b15e      	cbz	r6, 3ea <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x2>
     3d2:	ebb3 0208 	subs.w	r2, r3, r8
     3d6:	eb65 050e 	sbc.w	r5, r5, lr
     3da:	fa05 f707 	lsl.w	r7, r5, r7
     3de:	fa22 f301 	lsr.w	r3, r2, r1
     3e2:	40cd      	lsrs	r5, r1
     3e4:	431f      	orrs	r7, r3
     3e6:	e9c6 7500 	strd	r7, r5, [r6]
     3ea:	2100      	movs	r1, #0
     3ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3f0:	f1c2 0320 	rsb	r3, r2, #32
     3f4:	fa20 f103 	lsr.w	r1, r0, r3
     3f8:	fa0c fc02 	lsl.w	ip, ip, r2
     3fc:	fa25 f303 	lsr.w	r3, r5, r3
     400:	4095      	lsls	r5, r2
     402:	430d      	orrs	r5, r1
     404:	ea4f 471c 	mov.w	r7, ip, lsr #16
     408:	fa1f fe8c 	uxth.w	lr, ip
     40c:	fbb3 f1f7 	udiv	r1, r3, r7
     410:	fb07 3011 	mls	r0, r7, r1, r3
     414:	0c2b      	lsrs	r3, r5, #16
     416:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     41a:	fb01 f00e 	mul.w	r0, r1, lr
     41e:	4298      	cmp	r0, r3
     420:	fa04 f402 	lsl.w	r4, r4, r2
     424:	d908      	bls.n	438 <CONFIG_LOG_BUFFER_SIZE+0x38>
     426:	eb1c 0303 	adds.w	r3, ip, r3
     42a:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
     42e:	d22f      	bcs.n	490 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x1c>
     430:	4298      	cmp	r0, r3
     432:	d92d      	bls.n	490 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x1c>
     434:	3902      	subs	r1, #2
     436:	4463      	add	r3, ip
     438:	1a1b      	subs	r3, r3, r0
     43a:	b2ad      	uxth	r5, r5
     43c:	fbb3 f0f7 	udiv	r0, r3, r7
     440:	fb07 3310 	mls	r3, r7, r0, r3
     444:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     448:	fb00 f30e 	mul.w	r3, r0, lr
     44c:	42ab      	cmp	r3, r5
     44e:	d908      	bls.n	462 <CONFIG_LOG_BUFFER_SIZE+0x62>
     450:	eb1c 0505 	adds.w	r5, ip, r5
     454:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     458:	d216      	bcs.n	488 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x14>
     45a:	42ab      	cmp	r3, r5
     45c:	d914      	bls.n	488 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x14>
     45e:	3802      	subs	r0, #2
     460:	4465      	add	r5, ip
     462:	1aed      	subs	r5, r5, r3
     464:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     468:	e738      	b.n	2dc <CONFIG_BT_HCI_TX_STACK_SIZE+0x5c>
     46a:	4631      	mov	r1, r6
     46c:	4630      	mov	r0, r6
     46e:	e707      	b.n	280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     470:	4686      	mov	lr, r0
     472:	e6e5      	b.n	240 <CONFIG_FLASH_SIZE+0x40>
     474:	4618      	mov	r0, r3
     476:	e6fa      	b.n	26e <CONFIG_BT_MESH_RPL_STORE_TIMEOUT+0x16>
     478:	454b      	cmp	r3, r9
     47a:	d2a9      	bcs.n	3d0 <CONFIG_BT_MESH_ADV_STACK_SIZE+0xd0>
     47c:	ebb9 0802 	subs.w	r8, r9, r2
     480:	eb64 0e0c 	sbc.w	lr, r4, ip
     484:	3801      	subs	r0, #1
     486:	e7a3      	b.n	3d0 <CONFIG_BT_MESH_ADV_STACK_SIZE+0xd0>
     488:	4640      	mov	r0, r8
     48a:	e7ea      	b.n	462 <CONFIG_LOG_BUFFER_SIZE+0x62>
     48c:	4620      	mov	r0, r4
     48e:	e794      	b.n	3ba <CONFIG_BT_MESH_ADV_STACK_SIZE+0xba>
     490:	4641      	mov	r1, r8
     492:	e7d1      	b.n	438 <CONFIG_LOG_BUFFER_SIZE+0x38>
     494:	46d0      	mov	r8, sl
     496:	e77b      	b.n	390 <CONFIG_BT_MESH_ADV_STACK_SIZE+0x90>
     498:	3b02      	subs	r3, #2
     49a:	4465      	add	r5, ip
     49c:	e732      	b.n	304 <CONFIG_BT_MESH_ADV_STACK_SIZE+0x4>
     49e:	4608      	mov	r0, r1
     4a0:	e709      	b.n	2b6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x36>
     4a2:	4464      	add	r4, ip
     4a4:	3802      	subs	r0, #2
     4a6:	e742      	b.n	32e <CONFIG_BT_MESH_ADV_STACK_SIZE+0x2e>

000004a8 <__aeabi_idiv0>:
     4a8:	4770      	bx	lr
     4aa:	bf00      	nop
     4ac:	0000      	movs	r0, r0
	...

000004b0 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
     4b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     4b4:	4603      	mov	r3, r0
	uint32_t window_widening_event_us;
	uint32_t preamble_to_addr_us;

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
     4b6:	e9d0 800a 	ldrd	r8, r0, [r0, #40]	; 0x28
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
     4ba:	6b1e      	ldr	r6, [r3, #48]	; 0x30
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
     4bc:	4d18      	ldr	r5, [pc, #96]	; (520 <ull_drift_ticks_get+0x70>)
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
     4be:	1984      	adds	r4, r0, r6
	start_to_address_expected_us = EVENT_JITTER_US +
     4c0:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
     4c2:	45a0      	cmp	r8, r4
{
     4c4:	4617      	mov	r7, r2
     4c6:	4689      	mov	r9, r1
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
     4c8:	a313      	add	r3, pc, #76	; (adr r3, 518 <ull_drift_ticks_get+0x68>)
     4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
	if (start_to_address_actual_us <= start_to_address_expected_us) {
     4ce:	d815      	bhi.n	4fc <ull_drift_ticks_get+0x4c>
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
     4d0:	fba0 0105 	umull	r0, r1, r0, r5
     4d4:	f7ff fe54 	bl	180 <__aeabi_uldivmod>
     4d8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
     4dc:	f8c9 0000 	str.w	r0, [r9]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
     4e0:	eba4 0008 	sub.w	r0, r4, r8
					       start_to_address_actual_us));
	} else {
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
     4e4:	a30c      	add	r3, pc, #48	; (adr r3, 518 <ull_drift_ticks_get+0x68>)
     4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
     4ea:	fba0 0105 	umull	r0, r1, r0, r5
     4ee:	f7ff fe47 	bl	180 <__aeabi_uldivmod>
     4f2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
     4f6:	6038      	str	r0, [r7, #0]
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
     4f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
     4fc:	fba8 0105 	umull	r0, r1, r8, r5
     500:	f7ff fe3e 	bl	180 <__aeabi_uldivmod>
     504:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
     508:	f8c9 0000 	str.w	r0, [r9]
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
     50c:	f106 0030 	add.w	r0, r6, #48	; 0x30
     510:	e7e8      	b.n	4e4 <ull_drift_ticks_get+0x34>
     512:	bf00      	nop
     514:	f3af 8000 	nop.w
     518:	1afd498d 	.word	0x1afd498d
     51c:	00000007 	.word	0x00000007
     520:	3b9aca00 	.word	0x3b9aca00
     524:	00000000 	.word	0x00000000

00000528 <ll_adv_enable>:
	uint8_t aux_is_started = 0U;
	uint32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
uint8_t ll_adv_enable(uint8_t enable)
{
     528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     52c:	b08f      	sub	sp, #60	; 0x3c
	struct ll_adv_set *adv;
	struct lll_adv *lll;
	uint8_t hci_err;
	uint32_t ret;

	if (!enable) {
     52e:	b920      	cbnz	r0, 53a <ll_adv_enable+0x12>
		conn_release(adv);
	}
#endif /* CONFIG_BT_PERIPHERAL */

	return BT_HCI_ERR_CMD_DISALLOWED;
}
     530:	b00f      	add	sp, #60	; 0x3c
     532:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return disable(handle);
     536:	f019 bb1d 	b.w	19b74 <disable.constprop.0>
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
     53a:	4dbf      	ldr	r5, [pc, #764]	; (838 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x38>)
     53c:	f895 706a 	ldrb.w	r7, [r5, #106]	; 0x6a
     540:	f017 0701 	ands.w	r7, r7, #1
     544:	f040 816f 	bne.w	826 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x26>
	lll_adv_pdu_enqueue(&lll->adv_data, idx);
}

static inline struct pdu_adv *lll_adv_data_peek(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     548:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
     54c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
     550:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     554:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
     558:	eb05 0383 	add.w	r3, r5, r3, lsl #2
     55c:	f8d3 b038 	ldr.w	fp, [r3, #56]	; 0x38
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		pdu_adv_to_update = pdu;
	}

	if (pdu_adv_to_update) {
     560:	f1b9 0f00 	cmp.w	r9, #0
     564:	d013      	beq.n	58e <ll_adv_enable+0x66>
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		} else if (ll_adv_cmds_is_ext() && pdu->tx_addr) {
			own_id_addr = adv->rnd_addr;
#endif
		} else {
			own_id_addr = ll_addr_get(pdu->tx_addr);
     566:	464c      	mov	r4, r9
     568:	f814 0b02 	ldrb.w	r0, [r4], #2
     56c:	f3c0 1080 	ubfx	r0, r0, #6, #1
     570:	f017 f864 	bl	1763c <ll_addr_get>
	} else {
		tx_addr = own_id_addr;
	}

	adv_addr = adv_pdu_adva_get(pdu);
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
     574:	2206      	movs	r2, #6
			own_id_addr = ll_addr_get(pdu->tx_addr);
     576:	4601      	mov	r1, r0
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
     578:	4620      	mov	r0, r4
     57a:	f023 fc15 	bl	23da8 <memcpy>
		if (pdu_adv_to_update->tx_addr &&
     57e:	f899 3000 	ldrb.w	r3, [r9]
     582:	065a      	lsls	r2, r3, #25
     584:	d40d      	bmi.n	5a2 <ll_adv_enable+0x7a>
			ull_adv_pdu_update_addrs(adv, pdu_scan);
     586:	48ac      	ldr	r0, [pc, #688]	; (838 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x38>)
     588:	4659      	mov	r1, fp
     58a:	f026 ffd1 	bl	27530 <ull_adv_pdu_update_addrs>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
     58e:	f899 3000 	ldrb.w	r3, [r9]
     592:	f013 0f0e 	tst.w	r3, #14
     596:	f040 80a2 	bne.w	6de <CONFIG_BT_COMPANY_ID+0xed>
		if (lll->conn) {
     59a:	6a2b      	ldr	r3, [r5, #32]
     59c:	b14b      	cbz	r3, 5b2 <ll_adv_enable+0x8a>
	return BT_HCI_ERR_CMD_DISALLOWED;
     59e:	270c      	movs	r7, #12
     5a0:	e099      	b.n	6d6 <CONFIG_BT_COMPANY_ID+0xe5>
		    !mem_nz((void *)adv_addr, BDADDR_SIZE)) {
     5a2:	2106      	movs	r1, #6
     5a4:	4620      	mov	r0, r4
     5a6:	f026 fc06 	bl	26db6 <mem_nz>
		if (pdu_adv_to_update->tx_addr &&
     5aa:	2800      	cmp	r0, #0
     5ac:	d1eb      	bne.n	586 <ll_adv_enable+0x5e>
			return BT_HCI_ERR_INVALID_PARAM;
     5ae:	2712      	movs	r7, #18
     5b0:	e091      	b.n	6d6 <CONFIG_BT_COMPANY_ID+0xe5>
		link = ll_rx_link_alloc();
     5b2:	f018 fcc1 	bl	18f38 <ll_rx_link_alloc>
		if (!link) {
     5b6:	4680      	mov	r8, r0
     5b8:	b130      	cbz	r0, 5c8 <ll_adv_enable+0xa0>
		node_rx = ll_rx_alloc();
     5ba:	f018 fcc9 	bl	18f50 <ll_rx_alloc>
		if (!node_rx) {
     5be:	4682      	mov	sl, r0
     5c0:	b920      	cbnz	r0, 5cc <ll_adv_enable+0xa4>
			ll_rx_link_release(link);
     5c2:	4640      	mov	r0, r8
     5c4:	f018 fcbe 	bl	18f44 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
     5c8:	2707      	movs	r7, #7
     5ca:	e084      	b.n	6d6 <CONFIG_BT_COMPANY_ID+0xe5>
		conn = ll_conn_acquire();
     5cc:	f019 fd88 	bl	1a0e0 <ll_conn_acquire>
		if (!conn) {
     5d0:	4604      	mov	r4, r0
     5d2:	b918      	cbnz	r0, 5dc <CONFIG_BT_CTLR_XTAL_THRESHOLD>
			ll_rx_release(node_rx);
     5d4:	4650      	mov	r0, sl
     5d6:	f018 fcc1 	bl	18f5c <ll_rx_release>
     5da:	e7f2      	b.n	5c2 <ll_adv_enable+0x9a>
		conn_lll->handle = 0xFFFF;
     5dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
     5e0:	8502      	strh	r2, [r0, #40]	; 0x28
		if (!conn_lll->link_tx_free) {
     5e2:	6e82      	ldr	r2, [r0, #104]	; 0x68
		conn_lll = &conn->lll;
     5e4:	f100 031c 	add.w	r3, r0, #28
		if (!conn_lll->link_tx_free) {
     5e8:	b912      	cbnz	r2, 5f0 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x14>
			conn_lll->link_tx_free = &conn_lll->link_tx;
     5ea:	f100 0260 	add.w	r2, r0, #96	; 0x60
     5ee:	6682      	str	r2, [r0, #104]	; 0x68
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
     5f0:	f104 025c 	add.w	r2, r4, #92	; 0x5c
     5f4:	f104 0158 	add.w	r1, r4, #88	; 0x58
     5f8:	6ea0      	ldr	r0, [r4, #104]	; 0x68
     5fa:	930b      	str	r3, [sp, #44]	; 0x2c
     5fc:	f026 fbe6 	bl	26dcc <memq_init>
		conn_lll->sn = 0;
     600:	f894 206e 	ldrb.w	r2, [r4, #110]	; 0x6e
     604:	f022 0207 	bic.w	r2, r2, #7
     608:	f884 206e 	strb.w	r2, [r4, #110]	; 0x6e
		conn_lll->data_chan_sel = 0;
     60c:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
     610:	f002 023f 	and.w	r2, r2, #63	; 0x3f
     614:	f062 027f 	orn	r2, r2, #127	; 0x7f
     618:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
		conn_lll->periph.initiated = 0;
     61c:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
     620:	f022 0207 	bic.w	r2, r2, #7
     624:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
		conn->connect_expire = 6;
     628:	2206      	movs	r2, #6
     62a:	f8a4 2070 	strh.w	r2, [r4, #112]	; 0x70
		conn->common.fex_valid = 0;
     62e:	f894 207c 	ldrb.w	r2, [r4, #124]	; 0x7c
		conn_lll->link_tx_free = NULL;
     632:	2600      	movs	r6, #0
		conn->common.fex_valid = 0;
     634:	f022 0207 	bic.w	r2, r2, #7
     638:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
		conn_lll->periph.window_widening_event_us = 0;
     63c:	e9c4 6612 	strd	r6, r6, [r4, #72]	; 0x48
		conn_lll->link_tx_free = NULL;
     640:	66a6      	str	r6, [r4, #104]	; 0x68
		conn_lll->packet_tx_head_len = 0;
     642:	f8a4 606c 	strh.w	r6, [r4, #108]	; 0x6c
		conn_lll->latency_prepare = 0;
     646:	85e6      	strh	r6, [r4, #46]	; 0x2e
		conn_lll->latency_event = 0;
     648:	6326      	str	r6, [r4, #48]	; 0x30
		conn_lll->data_chan_use = 0;
     64a:	f884 603b 	strb.w	r6, [r4, #59]	; 0x3b
		conn_lll->periph.window_size_prepare_us = 0;
     64e:	6526      	str	r6, [r4, #80]	; 0x50
		conn->supervision_expire = 0;
     650:	f8a4 6074 	strh.w	r6, [r4, #116]	; 0x74
		conn->procedure_expire = 0;
     654:	f8a4 6078 	strh.w	r6, [r4, #120]	; 0x78
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
     658:	f8a4 6088 	strh.w	r6, [r4, #136]	; 0x88
     65c:	f884 608a 	strb.w	r6, [r4, #138]	; 0x8a
		conn->llcp_rx = NULL;
     660:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
     664:	f8a4 609c 	strh.w	r6, [r4, #156]	; 0x9c
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
     668:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
		conn->llcp_feature.features_conn = ll_feat_get();
     66c:	f026 fee4 	bl	27438 <ll_feat_get>
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     670:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
		lll->conn = conn_lll;
     674:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     676:	622b      	str	r3, [r5, #32]
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     678:	f022 0203 	bic.w	r2, r2, #3
     67c:	f884 20ca 	strb.w	r2, [r4, #202]	; 0xca
		conn->llcp_conn_param.disabled = 0;
     680:	f894 20f6 	ldrb.w	r2, [r4, #246]	; 0xf6
		conn->llcp_version.req = conn->llcp_version.ack = 0;
     684:	f8a4 60c8 	strh.w	r6, [r4, #200]	; 0xc8
		conn->llcp_feature.features_conn = ll_feat_get();
     688:	e9c4 012e 	strd	r0, r1, [r4, #184]	; 0xb8
		conn->llcp_conn_param.disabled = 0;
     68c:	f366 1245 	bfi	r2, r6, #5, #1
		conn->llcp_feature.features_peer = 0;
     690:	2000      	movs	r0, #0
     692:	2100      	movs	r1, #0
		adv->node_rx_cc_free = node_rx;
     694:	e9c5 8a18 	strd	r8, sl, [r5, #96]	; 0x60
		conn->llcp_feature.features_peer = 0;
     698:	e9c4 0130 	strd	r0, r1, [r4, #192]	; 0xc0
		conn->tx_data = conn->tx_data_last = 0;
     69c:	e9c4 664a 	strd	r6, r6, [r4, #296]	; 0x128
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
     6a0:	e9c4 6648 	strd	r6, r6, [r4, #288]	; 0x120
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->ref = 0U;
	hdr->disabled_cb = hdr->disabled_param = NULL;
     6a4:	e9c4 6605 	strd	r6, r6, [r4, #20]
		conn->llcp_terminate.req = conn->llcp_terminate.ack = 0;
     6a8:	f8a4 60d0 	strh.w	r6, [r4, #208]	; 0xd0
		conn->llcp_terminate.reason_final = 0;
     6ac:	f884 60d3 	strb.w	r6, [r4, #211]	; 0xd3
		conn->llcp_terminate.node_rx.hdr.link = link;
     6b0:	f8c4 80d4 	str.w	r8, [r4, #212]	; 0xd4
		conn->llcp_conn_param.req = 0;
     6b4:	f8a4 60f4 	strh.w	r6, [r4, #244]	; 0xf4
		conn->llcp_conn_param.disabled = 0;
     6b8:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
		conn->periph.ticks_to_offset = 0;
     6bc:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
     6c0:	f8c4 611c 	str.w	r6, [r4, #284]	; 0x11c
	hdr->ref = 0U;
     6c4:	7026      	strb	r6, [r4, #0]

static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
     6c6:	61e4      	str	r4, [r4, #28]
		err = lll_clock_wait();
     6c8:	f01b fb4a 	bl	1bd60 <lll_clock_wait>
		if (err) {
     6cc:	b138      	cbz	r0, 6de <CONFIG_BT_COMPANY_ID+0xed>
			conn_release(adv);
     6ce:	485a      	ldr	r0, [pc, #360]	; (838 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x38>)
     6d0:	f018 fff8 	bl	196c4 <conn_release>
			return BT_HCI_ERR_HW_FAILURE;
     6d4:	2703      	movs	r7, #3
}
     6d6:	4638      	mov	r0, r7
     6d8:	b00f      	add	sp, #60	; 0x3c
     6da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t ch_map = lll->chan_map;
     6de:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     6e2:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
     6e4:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     6e8:	f10d 0033 	add.w	r0, sp, #51	; 0x33
	uint8_t ch_map = lll->chan_map;
     6ec:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     6f0:	f026 fb98 	bl	26e24 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
     6f4:	4602      	mov	r2, r0
     6f6:	2800      	cmp	r0, #0
     6f8:	f000 808d 	beq.w	816 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x16>
	uint16_t time_us = adv_time_get(pdu_adv, pdu_scan, adv_chn_cnt, phy,
     6fc:	f89b 1001 	ldrb.w	r1, [fp, #1]
     700:	4648      	mov	r0, r9
     702:	f026 fecb 	bl	2749c <adv_time_get.constprop.0.isra.0>
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
     706:	494d      	ldr	r1, [pc, #308]	; (83c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3c>)
     708:	61ed      	str	r5, [r5, #28]
     70a:	2400      	movs	r4, #0
	adv->ull.ticks_prepare_to_start =
     70c:	2331      	movs	r3, #49	; 0x31
	adv->ull.ticks_preempt_to_start =
     70e:	e9c5 3402 	strd	r3, r4, [r5, #8]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
     712:	fba0 0101 	umull	r0, r1, r0, r1
     716:	a346      	add	r3, pc, #280	; (adr r3, 830 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x30>)
     718:	e9d3 2300 	ldrd	r2, r3, [r3]
	hdr->disabled_cb = hdr->disabled_param = NULL;
     71c:	e9c5 4405 	strd	r4, r4, [r5, #20]
	hdr->ref = 0U;
     720:	702c      	strb	r4, [r5, #0]
	adv->ull.ticks_active_to_start = 0;
     722:	606c      	str	r4, [r5, #4]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
     724:	f7ff fd2c 	bl	180 <__aeabi_uldivmod>
	uint16_t interval = adv->interval;
     728:	f8b5 8068 	ldrh.w	r8, [r5, #104]	; 0x68
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
     72c:	6128      	str	r0, [r5, #16]
	ticks_anchor = ticker_ticks_now_get();
     72e:	f026 fe23 	bl	27378 <ticker_ticks_now_get>
     732:	4606      	mov	r6, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
     734:	f1b8 0f00 	cmp.w	r8, #0
     738:	d106      	bne.n	748 <CONFIG_BT_COMPANY_ID+0x157>
     73a:	f899 4000 	ldrb.w	r4, [r9]
     73e:	f004 040f 	and.w	r4, r4, #15
     742:	1e63      	subs	r3, r4, #1
     744:	425c      	negs	r4, r3
     746:	415c      	adcs	r4, r3
     748:	f895 9024 	ldrb.w	r9, [r5, #36]	; 0x24
				   (adv->ull.ticks_slot + ticks_slot_overhead),
     74c:	692b      	ldr	r3, [r5, #16]
     74e:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 840 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x40>
     752:	4a3c      	ldr	r2, [pc, #240]	; (844 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x44>)
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
     754:	f364 0900 	bfi	r9, r4, #0, #1
     758:	f885 9024 	strb.w	r9, [r5, #36]	; 0x24
	if (lll->is_hdcd) {
     75c:	f04f 0a02 	mov.w	sl, #2
     760:	f019 0901 	ands.w	r9, r9, #1
     764:	ac0d      	add	r4, sp, #52	; 0x34
		ret_cb = TICKER_STATUS_BUSY;
     766:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
	if (lll->is_hdcd) {
     76a:	d031      	beq.n	7d0 <CONFIG_BT_COMPANY_ID+0x1df>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     76c:	2000      	movs	r0, #0
     76e:	e9cd 2505 	strd	r2, r5, [sp, #20]
     772:	e9cd 0300 	strd	r0, r3, [sp]
     776:	9304      	str	r3, [sp, #16]
     778:	2103      	movs	r1, #3
     77a:	e9cd b407 	strd	fp, r4, [sp, #28]
     77e:	e9cd 0002 	strd	r0, r0, [sp, #8]
     782:	4633      	mov	r3, r6
     784:	4652      	mov	r2, sl
     786:	f026 fdc4 	bl	27312 <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
     78a:	4621      	mov	r1, r4
     78c:	f018 fcfa 	bl	19184 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
     790:	2800      	cmp	r0, #0
     792:	d140      	bne.n	816 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x16>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     794:	4a2c      	ldr	r2, [pc, #176]	; (848 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x48>)
     796:	9506      	str	r5, [sp, #24]
     798:	f24a 33d8 	movw	r3, #41944	; 0xa3d8
     79c:	e9cd 0204 	strd	r0, r2, [sp, #16]
     7a0:	9300      	str	r3, [sp, #0]
     7a2:	e9cd b407 	strd	fp, r4, [sp, #28]
     7a6:	e9cd 0002 	strd	r0, r0, [sp, #8]
     7aa:	9001      	str	r0, [sp, #4]
     7ac:	4633      	mov	r3, r6
     7ae:	2201      	movs	r2, #1
     7b0:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
     7b2:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     7b6:	f026 fdac 	bl	27312 <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
     7ba:	4621      	mov	r1, r4
     7bc:	f018 fce2 	bl	19184 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
     7c0:	bb48      	cbnz	r0, 816 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x16>
	adv->is_enabled = 1;
     7c2:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
     7c6:	f043 0301 	orr.w	r3, r3, #1
     7ca:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
	return 0;
     7ce:	e782      	b.n	6d6 <CONFIG_BT_COMPANY_ID+0xe5>
		ll_adv_ticker_ext[handle].ticks_slot_window =
     7d0:	491e      	ldr	r1, [pc, #120]	; (84c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4c>)
			ULL_ADV_RANDOM_DELAY + ticks_slot;
     7d2:	f203 1047 	addw	r0, r3, #327	; 0x147
		ll_adv_ticker_ext[handle].ticks_slot_window =
     7d6:	6008      	str	r0, [r1, #0]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     7d8:	481d      	ldr	r0, [pc, #116]	; (850 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x50>)
		ret = ticker_start_ext(
     7da:	e9cd 3204 	strd	r3, r2, [sp, #16]
     7de:	e9cd 4108 	strd	r4, r1, [sp, #32]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     7e2:	f04f 0c91 	mov.w	ip, #145	; 0x91
     7e6:	fba8 0100 	umull	r0, r1, r8, r0
		ret = ticker_start_ext(
     7ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
     7ee:	e9cd 9302 	strd	r9, r3, [sp, #8]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     7f2:	fb0c 1108 	mla	r1, ip, r8, r1
     7f6:	a30e      	add	r3, pc, #56	; (adr r3, 830 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x30>)
     7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret = ticker_start_ext(
     7fc:	e9cd 5b06 	strd	r5, fp, [sp, #24]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     800:	f7ff fcbe 	bl	180 <__aeabi_uldivmod>
		ret = ticker_start_ext(
     804:	4633      	mov	r3, r6
     806:	e9cd 9000 	strd	r9, r0, [sp]
     80a:	4652      	mov	r2, sl
     80c:	2103      	movs	r1, #3
     80e:	4648      	mov	r0, r9
     810:	f016 fe20 	bl	17454 <ticker_start_ext>
     814:	e7d1      	b.n	7ba <CONFIG_BT_COMPANY_ID+0x1c9>
	if (adv->lll.conn) {
     816:	6a2b      	ldr	r3, [r5, #32]
     818:	2b00      	cmp	r3, #0
     81a:	f43f aec0 	beq.w	59e <ll_adv_enable+0x76>
		conn_release(adv);
     81e:	4806      	ldr	r0, [pc, #24]	; (838 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x38>)
     820:	f018 ff50 	bl	196c4 <conn_release>
     824:	e6bb      	b.n	59e <ll_adv_enable+0x76>
			return 0;
     826:	2700      	movs	r7, #0
     828:	e755      	b.n	6d6 <CONFIG_BT_COMPANY_ID+0xe5>
     82a:	bf00      	nop
     82c:	f3af 8000 	nop.w
     830:	1afd498d 	.word	0x1afd498d
     834:	00000007 	.word	0x00000007
     838:	20002f88 	.word	0x20002f88
     83c:	3b9aca00 	.word	0x3b9aca00
     840:	000189cd 	.word	0x000189cd
     844:	0001988d 	.word	0x0001988d
     848:	000195c5 	.word	0x000195c5
     84c:	20002ff4 	.word	0x20002ff4
     850:	84e72a00 	.word	0x84e72a00
     854:	00000000 	.word	0x00000000

00000858 <ull_adv_time_update>:
{
     858:	b570      	push	{r4, r5, r6, lr}
	chan_map = lll->chan_map;
     85a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
     85e:	b08a      	sub	sp, #40	; 0x28
	chan_map = lll->chan_map;
     860:	f3c3 0342 	ubfx	r3, r3, #1, #3
{
     864:	460d      	mov	r5, r1
     866:	4604      	mov	r4, r0
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
     868:	2101      	movs	r1, #1
     86a:	f10d 0023 	add.w	r0, sp, #35	; 0x23
{
     86e:	4616      	mov	r6, r2
	chan_map = lll->chan_map;
     870:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
     874:	f026 fad6 	bl	26e24 <util_ones_count_get>
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
     878:	7871      	ldrb	r1, [r6, #1]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
     87a:	4602      	mov	r2, r0
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
     87c:	4628      	mov	r0, r5
     87e:	f026 fe0d 	bl	2749c <adv_time_get.constprop.0.isra.0>
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
     882:	491d      	ldr	r1, [pc, #116]	; (8f8 <ull_adv_time_update+0xa0>)
     884:	a31a      	add	r3, pc, #104	; (adr r3, 8f0 <ull_adv_time_update+0x98>)
     886:	e9d3 2300 	ldrd	r2, r3, [r3]
     88a:	fba0 0101 	umull	r0, r1, r0, r1
     88e:	f7ff fc77 	bl	180 <__aeabi_uldivmod>
	if (adv->ull.ticks_slot > time_ticks) {
     892:	6921      	ldr	r1, [r4, #16]
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
     894:	4605      	mov	r5, r0
	if (adv->ull.ticks_slot > time_ticks) {
     896:	428d      	cmp	r5, r1
     898:	d21f      	bcs.n	8da <ull_adv_time_update+0x82>
		ticks_minus = adv->ull.ticks_slot - time_ticks;
     89a:	1b48      	subs	r0, r1, r5
		ticks_plus = 0U;
     89c:	2100      	movs	r1, #0
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
     89e:	4a17      	ldr	r2, [pc, #92]	; (8fc <ull_adv_time_update+0xa4>)
	ret_cb = TICKER_STATUS_BUSY;
     8a0:	2302      	movs	r3, #2
     8a2:	9309      	str	r3, [sp, #36]	; 0x24
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
     8a4:	1aa2      	subs	r2, r4, r2
     8a6:	236c      	movs	r3, #108	; 0x6c
     8a8:	fbb2 f2f3 	udiv	r2, r2, r3
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
     8ac:	4b14      	ldr	r3, [pc, #80]	; (900 <ull_adv_time_update+0xa8>)
     8ae:	9305      	str	r3, [sp, #20]
     8b0:	ae09      	add	r6, sp, #36	; 0x24
     8b2:	2300      	movs	r3, #0
			    (TICKER_ID_ADV_BASE +
     8b4:	3202      	adds	r2, #2
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
     8b6:	e9cd 1001 	strd	r1, r0, [sp, #4]
     8ba:	e9cd 3303 	strd	r3, r3, [sp, #12]
     8be:	2103      	movs	r1, #3
     8c0:	9606      	str	r6, [sp, #24]
     8c2:	9300      	str	r3, [sp, #0]
     8c4:	b2d2      	uxtb	r2, r2
     8c6:	4618      	mov	r0, r3
     8c8:	f026 fd3e 	bl	27348 <ticker_update>
	ret = ull_ticker_status_take(ret, &ret_cb);
     8cc:	4631      	mov	r1, r6
     8ce:	f018 fc59 	bl	19184 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
     8d2:	b940      	cbnz	r0, 8e6 <ull_adv_time_update+0x8e>
	adv->ull.ticks_slot = time_ticks;
     8d4:	6125      	str	r5, [r4, #16]
}
     8d6:	b00a      	add	sp, #40	; 0x28
     8d8:	bd70      	pop	{r4, r5, r6, pc}
	} else if (adv->ull.ticks_slot < time_ticks) {
     8da:	d902      	bls.n	8e2 <ull_adv_time_update+0x8a>
		ticks_plus = time_ticks - adv->ull.ticks_slot;
     8dc:	1a69      	subs	r1, r5, r1
		ticks_minus = 0U;
     8de:	2000      	movs	r0, #0
     8e0:	e7dd      	b.n	89e <ull_adv_time_update+0x46>
		return BT_HCI_ERR_SUCCESS;
     8e2:	2000      	movs	r0, #0
     8e4:	e7f7      	b.n	8d6 <ull_adv_time_update+0x7e>
		return BT_HCI_ERR_CMD_DISALLOWED;
     8e6:	200c      	movs	r0, #12
     8e8:	e7f5      	b.n	8d6 <ull_adv_time_update+0x7e>
     8ea:	bf00      	nop
     8ec:	f3af 8000 	nop.w
     8f0:	1afd498d 	.word	0x1afd498d
     8f4:	00000007 	.word	0x00000007
     8f8:	3b9aca00 	.word	0x3b9aca00
     8fc:	20002f88 	.word	0x20002f88
     900:	000189cd 	.word	0x000189cd
     904:	00000000 	.word	0x00000000

00000908 <ull_scan_enable>:
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
						   SCAN_INT_UNIT_US);
}

uint8_t ull_scan_enable(struct ll_scan_set *scan)
{
     908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     90c:	4604      	mov	r4, r0
	uint32_t volatile ret_cb;
	uint32_t ticks_interval;
	uint32_t ticks_anchor;
	uint32_t ret;

	lll->init_addr_type = scan->own_addr_type;
     90e:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
     912:	f894 3020 	ldrb.w	r3, [r4, #32]
	lll->is_stop = 0U;

	ull_hdr_init(&scan->ull);
	lll_hdr_init(lll, scan);

	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
     916:	4f3e      	ldr	r7, [pc, #248]	; (a10 <ull_scan_enable+0x108>)
	lll->init_addr_type = scan->own_addr_type;
     918:	f3c0 0040 	ubfx	r0, r0, #1, #1
     91c:	f360 1386 	bfi	r3, r0, #6, #1
{
     920:	b08c      	sub	sp, #48	; 0x30
	lll->init_addr_type = scan->own_addr_type;
     922:	f884 3020 	strb.w	r3, [r4, #32]
	(void)ll_addr_read(lll->init_addr_type, lll->init_addr);
     926:	f104 0121 	add.w	r1, r4, #33	; 0x21
     92a:	f026 fd2b 	bl	27384 <ll_addr_read>
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
     92e:	8d26      	ldrh	r6, [r4, #40]	; 0x28
	lll->chan = 0U;
     930:	f894 3020 	ldrb.w	r3, [r4, #32]
     934:	61e4      	str	r4, [r4, #28]
     936:	2500      	movs	r5, #0
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
     938:	fba6 0107 	umull	r0, r1, r6, r7
     93c:	f04f 0c91 	mov.w	ip, #145	; 0x91
	lll->chan = 0U;
     940:	f003 0379 	and.w	r3, r3, #121	; 0x79
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
     944:	fb0c 1106 	mla	r1, ip, r6, r1
	hdr->disabled_cb = hdr->disabled_param = NULL;
     948:	e9c4 5505 	strd	r5, r5, [r4, #20]
	lll->chan = 0U;
     94c:	f884 3020 	strb.w	r3, [r4, #32]
	hdr->ref = 0U;
     950:	7025      	strb	r5, [r4, #0]
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
     952:	a32d      	add	r3, pc, #180	; (adr r3, a08 <ull_scan_enable+0x100>)
     954:	e9d3 2300 	ldrd	r2, r3, [r3]
     958:	f7ff fc12 	bl	180 <__aeabi_uldivmod>
						SCAN_INT_UNIT_US);

	/* TODO: active_to_start feature port */
	scan->ull.ticks_active_to_start = 0U;
	scan->ull.ticks_prepare_to_start =
     95c:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US);
	scan->ull.ticks_preempt_to_start =
     95e:	e9c4 3502 	strd	r3, r5, [r4, #8]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_PREEMPT_MIN_US);
	if ((lll->ticks_window +
     962:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	scan->ull.ticks_active_to_start = 0U;
     964:	6065      	str	r5, [r4, #4]
	if ((lll->ticks_window +
     966:	3309      	adds	r3, #9
	     HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) <
	    (ticks_interval -
     968:	f1a0 0231 	sub.w	r2, r0, #49	; 0x31
	if ((lll->ticks_window +
     96c:	4293      	cmp	r3, r2
	     HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US))) {
		scan->ull.ticks_slot =
     96e:	bf32      	itee	cc
     970:	6123      	strcc	r3, [r4, #16]
			(lll->ticks_window +
			 HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US));
	} else {
		if (IS_ENABLED(CONFIG_BT_CTLR_SCAN_UNRESERVED)) {
			scan->ull.ticks_slot = 0U;
     972:	6125      	strcs	r5, [r4, #16]
		} else {
			scan->ull.ticks_slot = ticks_interval -
				HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US);
		}

		lll->ticks_window = 0U;
     974:	62e5      	strcs	r5, [r4, #44]	; 0x2c
	return &ll_scan[handle];
}

uint8_t ull_scan_handle_get(struct ll_scan_set *scan)
{
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
     976:	4d27      	ldr	r5, [pc, #156]	; (a14 <ull_scan_enable+0x10c>)
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
     978:	4606      	mov	r6, r0
	ticks_anchor = ticker_ticks_now_get();
     97a:	f026 fcfd 	bl	27378 <ticker_ticks_now_get>
	ret_cb = TICKER_STATUS_BUSY;
     97e:	2302      	movs	r3, #2
     980:	930b      	str	r3, [sp, #44]	; 0x2c
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
     982:	1b65      	subs	r5, r4, r5
     984:	2334      	movs	r3, #52	; 0x34
     986:	fbb5 f5f3 	udiv	r5, r5, r3
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     98a:	4b23      	ldr	r3, [pc, #140]	; (a18 <ull_scan_enable+0x110>)
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
     98c:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     990:	e9cd 4306 	strd	r4, r3, [sp, #24]
     994:	46b8      	mov	r8, r7
     996:	4b21      	ldr	r3, [pc, #132]	; (a1c <ull_scan_enable+0x114>)
     998:	9305      	str	r3, [sp, #20]
	ticks_anchor = ticker_ticks_now_get();
     99a:	4607      	mov	r7, r0
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     99c:	6923      	ldr	r3, [r4, #16]
     99e:	9304      	str	r3, [sp, #16]
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
     9a0:	fbac 0808 	umull	r0, r8, ip, r8
     9a4:	2191      	movs	r1, #145	; 0x91
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     9a6:	f04f 0900 	mov.w	r9, #0
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
     9aa:	fb01 810c 	mla	r1, r1, ip, r8
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     9ae:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
     9b2:	a315      	add	r3, pc, #84	; (adr r3, a08 <ull_scan_enable+0x100>)
     9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     9b8:	f8cd a020 	str.w	sl, [sp, #32]
     9bc:	f8cd 900c 	str.w	r9, [sp, #12]
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
     9c0:	f7ff fbde 	bl	180 <__aeabi_uldivmod>
     9c4:	4610      	mov	r0, r2
     9c6:	4619      	mov	r1, r3
     9c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     9cc:	2300      	movs	r3, #0
     9ce:	f7ff fbd7 	bl	180 <__aeabi_uldivmod>
			   TICKER_USER_ID_THREAD, TICKER_ID_SCAN_BASE + handle,
     9d2:	3504      	adds	r5, #4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     9d4:	b2ed      	uxtb	r5, r5
     9d6:	e9cd 6001 	strd	r6, r0, [sp, #4]
     9da:	2103      	movs	r1, #3
     9dc:	f8cd 9000 	str.w	r9, [sp]
     9e0:	463b      	mov	r3, r7
     9e2:	462a      	mov	r2, r5
     9e4:	4648      	mov	r0, r9
     9e6:	f026 fc94 	bl	27312 <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
     9ea:	4651      	mov	r1, sl
     9ec:	f018 fbca 	bl	19184 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
     9f0:	b940      	cbnz	r0, a04 <ull_scan_enable+0xfc>
	scan->is_enabled = 1U;
     9f2:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
     9f6:	f043 0301 	orr.w	r3, r3, #1
     9fa:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
     9fe:	b00c      	add	sp, #48	; 0x30
     a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
     a04:	200c      	movs	r0, #12
     a06:	e7fa      	b.n	9fe <ull_scan_enable+0xf6>
     a08:	1afd498d 	.word	0x1afd498d
     a0c:	00000007 	.word	0x00000007
     a10:	84e72a00 	.word	0x84e72a00
     a14:	20003018 	.word	0x20003018
     a18:	000189cd 	.word	0x000189cd
     a1c:	00019cd5 	.word	0x00019cd5

00000a20 <ll_scan_params_set>:
{
     a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a22:	4604      	mov	r4, r0
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
     a24:	2000      	movs	r0, #0
{
     a26:	4616      	mov	r6, r2
     a28:	461f      	mov	r7, r3
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
     a2a:	f019 f9cf 	bl	19dcc <ull_scan_is_disabled_get>
	if (!scan) {
     a2e:	4605      	mov	r5, r0
     a30:	b320      	cbz	r0, a7c <ll_scan_params_set+0x5c>
	scan->own_addr_type = own_addr_type;
     a32:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
	lll->interval = interval;
     a36:	8501      	strh	r1, [r0, #40]	; 0x28
	scan->own_addr_type = own_addr_type;
     a38:	f367 0342 	bfi	r3, r7, #1, #2
     a3c:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
	lll->filter_policy = filter_policy;
     a40:	f89d 3018 	ldrb.w	r3, [sp, #24]
     a44:	0164      	lsls	r4, r4, #5
     a46:	00db      	lsls	r3, r3, #3
     a48:	f003 0318 	and.w	r3, r3, #24
     a4c:	f004 0420 	and.w	r4, r4, #32
     a50:	431c      	orrs	r4, r3
     a52:	f890 3020 	ldrb.w	r3, [r0, #32]
     a56:	f023 0338 	bic.w	r3, r3, #56	; 0x38
     a5a:	431c      	orrs	r4, r3
     a5c:	f880 4020 	strb.w	r4, [r0, #32]
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
     a60:	4809      	ldr	r0, [pc, #36]	; (a88 <ll_scan_params_set+0x68>)
     a62:	2491      	movs	r4, #145	; 0x91
     a64:	fba6 0100 	umull	r0, r1, r6, r0
     a68:	a305      	add	r3, pc, #20	; (adr r3, a80 <ll_scan_params_set+0x60>)
     a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
     a6e:	fb04 1106 	mla	r1, r4, r6, r1
     a72:	f7ff fb85 	bl	180 <__aeabi_uldivmod>
     a76:	62e8      	str	r0, [r5, #44]	; 0x2c
	return 0;
     a78:	2000      	movs	r0, #0
}
     a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
     a7c:	200c      	movs	r0, #12
     a7e:	e7fc      	b.n	a7a <ll_scan_params_set+0x5a>
     a80:	1afd498d 	.word	0x1afd498d
     a84:	00000007 	.word	0x00000007
     a88:	84e72a00 	.word	0x84e72a00
     a8c:	00000000 	.word	0x00000000

00000a90 <ull_conn_llcp>:

	return 0;
}

int ull_conn_llcp(struct ll_conn *conn, uint32_t ticks_at_expire, uint16_t lazy)
{
     a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a94:	4691      	mov	r9, r2
	/* Check if no other procedure with instant is requested and not in
	 * Encryption setup.
	 */
	if ((conn->llcp_ack == conn->llcp_req) &&
     a96:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
     a9a:	f890 2089 	ldrb.w	r2, [r0, #137]	; 0x89
     a9e:	4293      	cmp	r3, r2
{
     aa0:	b08d      	sub	sp, #52	; 0x34
     aa2:	4604      	mov	r4, r0
     aa4:	460f      	mov	r7, r1
	if ((conn->llcp_ack == conn->llcp_req) &&
     aa6:	d10b      	bne.n	ac0 <ull_conn_llcp+0x30>
#endif /* !CONFIG_BT_CTLR_LE_ENC */

		/* TODO: Optimize the checks below, maybe have common flag */

		/* check if connection update procedure is requested */
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
     aa8:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
     aac:	f890 209c 	ldrb.w	r2, [r0, #156]	; 0x9c
     ab0:	428a      	cmp	r2, r1
     ab2:	d025      	beq.n	b00 <ull_conn_llcp+0x70>
			/* switch to LLCP_CONN_UPD state machine */
			conn->llcp_type = LLCP_CONN_UPD;
     ab4:	2201      	movs	r2, #1
			conn->llcp_ack -= 2U;
     ab6:	3b02      	subs	r3, #2
			conn->llcp_type = LLCP_CONN_UPD;
     ab8:	f880 208a 	strb.w	r2, [r0, #138]	; 0x8a
			conn->llcp_ack -= 2U;
     abc:	f880 3089 	strb.w	r3, [r0, #137]	; 0x89
	}

	/* Check if procedures with instant or encryption setup is requested or
	 * active.
	 */
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
     ac0:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
     ac4:	f894 2089 	ldrb.w	r2, [r4, #137]	; 0x89
     ac8:	1a9a      	subs	r2, r3, r2
     aca:	f002 0203 	and.w	r2, r2, #3
     ace:	2a02      	cmp	r2, #2
     ad0:	f040 826e 	bne.w	fb0 <ull_conn_llcp+0x520>
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
		}

		/* Process procedures with instants or encryption setup */
		/* FIXME: Make LE Ping cacheable */
		switch (conn->llcp_type) {
     ad4:	f894 008a 	ldrb.w	r0, [r4, #138]	; 0x8a
     ad8:	2801      	cmp	r0, #1
     ada:	f000 8214 	beq.w	f06 <ull_conn_llcp+0x476>
     ade:	2802      	cmp	r0, #2
     ae0:	f000 8430 	beq.w	1344 <__data_size+0x2fc>
		}
		break;
#endif /* CONFIG_BT_CTLR_PHY */

		default:
			LL_ASSERT(0);
     ae4:	4acc      	ldr	r2, [pc, #816]	; (e18 <ull_conn_llcp+0x388>)
     ae6:	49cd      	ldr	r1, [pc, #820]	; (e1c <ull_conn_llcp+0x38c>)
     ae8:	48cd      	ldr	r0, [pc, #820]	; (e20 <ull_conn_llcp+0x390>)
     aea:	f240 4352 	movw	r3, #1106	; 0x452
     aee:	f020 fbbd 	bl	2126c <printk>
     af2:	4040      	eors	r0, r0
     af4:	f380 8811 	msr	BASEPRI, r0
     af8:	f04f 0003 	mov.w	r0, #3
     afc:	df02      	svc	2
			break;
     afe:	e257      	b.n	fb0 <ull_conn_llcp+0x520>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
     b00:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
     b04:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
     b08:	4293      	cmp	r3, r2
     b0a:	d05b      	beq.n	bc4 <ull_conn_llcp+0x134>
static inline void event_fex_prep(struct ll_conn *conn)
{
	struct node_tx *tx;

	/* If waiting for response, do nothing */
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
     b0c:	1a9b      	subs	r3, r3, r2
     b0e:	07da      	lsls	r2, r3, #31
     b10:	d5d6      	bpl.n	ac0 <ull_conn_llcp+0x30>
		return;
	}

	if (conn->common.fex_valid) {
     b12:	f890 107c 	ldrb.w	r1, [r0, #124]	; 0x7c
     b16:	f011 0801 	ands.w	r8, r1, #1
     b1a:	d026      	beq.n	b6a <ull_conn_llcp+0xda>
		struct node_rx_pdu *rx;
		struct pdu_data *pdu;

		/* get a rx node for ULL->LL */
		rx = ll_pdu_rx_alloc();
     b1c:	f018 fad0 	bl	190c0 <ll_pdu_rx_alloc>
		if (!rx) {
     b20:	4605      	mov	r5, r0
     b22:	2800      	cmp	r0, #0
     b24:	d0cc      	beq.n	ac0 <ull_conn_llcp+0x30>
			return;
		}

		/* procedure request acked */
		conn->llcp_feature.ack = conn->llcp_feature.req;
     b26:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
     b2a:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1

		/* prepare feature rsp structure */
		rx->hdr.handle = conn->lll.handle;
     b2e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     b30:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
     b32:	2303      	movs	r3, #3
     b34:	7103      	strb	r3, [r0, #4]
		pdu = (void *)rx->pdu;
		pdu->ll_id = PDU_DATA_LLID_CTRL;
     b36:	7f03      	ldrb	r3, [r0, #28]
     b38:	f043 0303 	orr.w	r3, r3, #3
     b3c:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
			   sizeof(struct pdu_data_llctrl_feature_rsp);
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
     b3e:	f100 0620 	add.w	r6, r0, #32
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
     b42:	2309      	movs	r3, #9
     b44:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
     b46:	77c3      	strb	r3, [r0, #31]
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
     b48:	2208      	movs	r2, #8
     b4a:	2100      	movs	r1, #0
     b4c:	4630      	mov	r0, r6
     b4e:	f023 f936 	bl	23dbe <memset>
			sizeof(pdu->llctrl.feature_rsp.features));
		sys_put_le64(conn->llcp_feature.features_peer,
     b52:	e9d4 0130 	ldrd	r0, r1, [r4, #192]	; 0xc0
     b56:	4632      	mov	r2, r6
     b58:	f026 fde7 	bl	2772a <sys_put_le64>
			     pdu->llctrl.feature_req.features);

		/* enqueue feature rsp structure into rx queue */
		ll_rx_put(rx->hdr.link, rx);
     b5c:	4629      	mov	r1, r5
			sys_cpu_to_le16(conn->llcp_version.company_id);
		pdu->llctrl.version_ind.sub_version_number =
			sys_cpu_to_le16(conn->llcp_version.sub_version_number);

		/* enqueue version ind structure into rx queue */
		ll_rx_put(rx->hdr.link, rx);
     b5e:	6808      	ldr	r0, [r1, #0]
     b60:	f018 fa02 	bl	18f68 <ll_rx_put>
		ll_rx_sched();
     b64:	f018 fa0a 	bl	18f7c <ll_rx_sched>
     b68:	e7aa      	b.n	ac0 <ull_conn_llcp+0x30>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
     b6a:	48ae      	ldr	r0, [pc, #696]	; (e24 <ull_conn_llcp+0x394>)
     b6c:	f026 f8de 	bl	26d2c <mem_acquire>
	if (tx) {
     b70:	4605      	mov	r5, r0
     b72:	2800      	cmp	r0, #0
     b74:	d0a4      	beq.n	ac0 <ull_conn_llcp+0x30>
		conn->llcp_feature.ack--;
     b76:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
     b7a:	3b01      	subs	r3, #1
     b7c:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
		pdu->ll_id = PDU_DATA_LLID_CTRL;
     b80:	7903      	ldrb	r3, [r0, #4]
     b82:	f043 0303 	orr.w	r3, r3, #3
     b86:	7103      	strb	r3, [r0, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
     b88:	2309      	movs	r3, #9
     b8a:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
     b8c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
     b90:	2b00      	cmp	r3, #0
     b92:	bfac      	ite	ge
     b94:	2308      	movge	r3, #8
     b96:	230e      	movlt	r3, #14
		(void)memset(&pdu->llctrl.feature_req.features[0],
     b98:	f100 0608 	add.w	r6, r0, #8
		pdu->llctrl.opcode = !conn->lll.role ?
     b9c:	71c3      	strb	r3, [r0, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
     b9e:	2208      	movs	r2, #8
     ba0:	4641      	mov	r1, r8
     ba2:	4630      	mov	r0, r6
     ba4:	f023 f90b 	bl	23dbe <memset>
		sys_put_le64(conn->llcp_feature.features_conn,
     ba8:	e9d4 012e 	ldrd	r0, r1, [r4, #184]	; 0xb8
     bac:	4632      	mov	r2, r6
     bae:	f026 fdbc 	bl	2772a <sys_put_le64>
		ctrl_tx_enqueue(conn, tx);
     bb2:	4629      	mov	r1, r5
			ctrl_tx_enqueue(conn, tx);
     bb4:	4620      	mov	r0, r4
     bb6:	f026 fdc9 	bl	2774c <ctrl_tx_enqueue>
			conn->procedure_expire = conn->procedure_reload;
     bba:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
     bbe:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
     bc2:	e77d      	b.n	ac0 <ull_conn_llcp+0x30>
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
     bc4:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
     bc8:	f890 20c8 	ldrb.w	r2, [r0, #200]	; 0xc8
     bcc:	4293      	cmp	r3, r2
     bce:	d05f      	beq.n	c90 <ull_conn_llcp+0x200>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
     bd0:	1a9b      	subs	r3, r3, r2
     bd2:	07db      	lsls	r3, r3, #31
     bd4:	f57f af74 	bpl.w	ac0 <ull_conn_llcp+0x30>
	if (conn->llcp_version.tx == 0U) {
     bd8:	f890 30ca 	ldrb.w	r3, [r0, #202]	; 0xca
     bdc:	07de      	lsls	r6, r3, #31
     bde:	d424      	bmi.n	c2a <ull_conn_llcp+0x19a>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
     be0:	4890      	ldr	r0, [pc, #576]	; (e24 <ull_conn_llcp+0x394>)
     be2:	f026 f8a3 	bl	26d2c <mem_acquire>
		if (tx) {
     be6:	4601      	mov	r1, r0
     be8:	2800      	cmp	r0, #0
     bea:	f43f af69 	beq.w	ac0 <ull_conn_llcp+0x30>
			conn->llcp_version.ack--;
     bee:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
     bf2:	3b01      	subs	r3, #1
     bf4:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
			conn->llcp_version.tx = 1U;
     bf8:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
     bfc:	f043 0301 	orr.w	r3, r3, #1
     c00:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
			pdu->ll_id = PDU_DATA_LLID_CTRL;
     c04:	7903      	ldrb	r3, [r0, #4]
     c06:	f043 0303 	orr.w	r3, r3, #3
     c0a:	7103      	strb	r3, [r0, #4]
			pdu->len =
     c0c:	2306      	movs	r3, #6
     c0e:	7143      	strb	r3, [r0, #5]
			pdu->llctrl.opcode =
     c10:	230c      	movs	r3, #12
     c12:	71c3      	strb	r3, [r0, #7]
			pdu->llctrl.version_ind.version_number =
     c14:	7203      	strb	r3, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
     c16:	f06f 030e 	mvn.w	r3, #14
     c1a:	7243      	strb	r3, [r0, #9]
     c1c:	2305      	movs	r3, #5
     c1e:	7283      	strb	r3, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
     c20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     c24:	72c3      	strb	r3, [r0, #11]
     c26:	7303      	strb	r3, [r0, #12]
     c28:	e7c4      	b.n	bb4 <ull_conn_llcp+0x124>
	} else if (conn->llcp_version.rx) {
     c2a:	079d      	lsls	r5, r3, #30
     c2c:	d522      	bpl.n	c74 <ull_conn_llcp+0x1e4>
		rx = ll_pdu_rx_alloc();
     c2e:	f018 fa47 	bl	190c0 <ll_pdu_rx_alloc>
		if (!rx) {
     c32:	4601      	mov	r1, r0
     c34:	2800      	cmp	r0, #0
     c36:	f43f af43 	beq.w	ac0 <ull_conn_llcp+0x30>
		conn->llcp_version.ack = conn->llcp_version.req;
     c3a:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
     c3e:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
		rx->hdr.handle = conn->lll.handle;
     c42:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     c44:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
     c46:	2303      	movs	r3, #3
     c48:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
     c4a:	7f03      	ldrb	r3, [r0, #28]
     c4c:	f043 0303 	orr.w	r3, r3, #3
     c50:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
     c52:	2306      	movs	r3, #6
     c54:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
     c56:	230c      	movs	r3, #12
     c58:	77c3      	strb	r3, [r0, #31]
		pdu->llctrl.version_ind.version_number =
     c5a:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
     c5e:	f880 3020 	strb.w	r3, [r0, #32]
		pdu->llctrl.version_ind.company_id =
     c62:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
     c66:	f8a0 3021 	strh.w	r3, [r0, #33]	; 0x21
		pdu->llctrl.version_ind.sub_version_number =
     c6a:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
     c6e:	f8a0 3023 	strh.w	r3, [r0, #35]	; 0x23
     c72:	e774      	b.n	b5e <ull_conn_llcp+0xce>
	} else {
		/* tx-ed but no rx, and new request placed */
		LL_ASSERT(0);
     c74:	f640 532d 	movw	r3, #3373	; 0xd2d
	}
	break;
#endif /* CONFIG_BT_CTLR_SCHED_ADVANCED */

	default:
		LL_ASSERT(0);
     c78:	4a67      	ldr	r2, [pc, #412]	; (e18 <ull_conn_llcp+0x388>)
     c7a:	4968      	ldr	r1, [pc, #416]	; (e1c <ull_conn_llcp+0x38c>)
     c7c:	4868      	ldr	r0, [pc, #416]	; (e20 <ull_conn_llcp+0x390>)
     c7e:	f020 faf5 	bl	2126c <printk>
     c82:	4040      	eors	r0, r0
     c84:	f380 8811 	msr	BASEPRI, r0
     c88:	f04f 0003 	mov.w	r0, #3
     c8c:	df02      	svc	2
		break;
     c8e:	e717      	b.n	ac0 <ull_conn_llcp+0x30>
		} else if (conn->llcp_conn_param.ack !=
     c90:	f890 20f5 	ldrb.w	r2, [r0, #245]	; 0xf5
     c94:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
     c98:	429a      	cmp	r2, r3
     c9a:	f43f af11 	beq.w	ac0 <ull_conn_llcp+0x30>
	return conn_upd_curr && (conn_upd_curr != conn);
     c9e:	4d62      	ldr	r5, [pc, #392]	; (e28 <ull_conn_llcp+0x398>)
     ca0:	682b      	ldr	r3, [r5, #0]
     ca2:	b113      	cbz	r3, caa <ull_conn_llcp+0x21a>
	if (cpr_active_is_set(conn)) {
     ca4:	4298      	cmp	r0, r3
     ca6:	f47f af0b 	bne.w	ac0 <ull_conn_llcp+0x30>
	switch (conn->llcp_conn_param.state) {
     caa:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
     cae:	f003 030f 	and.w	r3, r3, #15
     cb2:	2b06      	cmp	r3, #6
     cb4:	f200 8124 	bhi.w	f00 <ull_conn_llcp+0x470>
     cb8:	a201      	add	r2, pc, #4	; (adr r2, cc0 <ull_conn_llcp+0x230>)
     cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     cbe:	bf00      	nop
     cc0:	00000cdd 	.word	0x00000cdd
     cc4:	00000d61 	.word	0x00000d61
     cc8:	00000eb7 	.word	0x00000eb7
     ccc:	00000ac1 	.word	0x00000ac1
     cd0:	00000ac1 	.word	0x00000ac1
     cd4:	00000ac1 	.word	0x00000ac1
     cd8:	00000ac1 	.word	0x00000ac1
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
     cdc:	4851      	ldr	r0, [pc, #324]	; (e24 <ull_conn_llcp+0x394>)
			event_counter = lll->event_counter +
     cde:	8e66      	ldrh	r6, [r4, #50]	; 0x32
					lll->latency_prepare + lazy;
     ce0:	f8b4 802e 	ldrh.w	r8, [r4, #46]	; 0x2e
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
     ce4:	f026 f822 	bl	26d2c <mem_acquire>
	if (!tx) {
     ce8:	4601      	mov	r1, r0
     cea:	2800      	cmp	r0, #0
     cec:	f43f aee8 	beq.w	ac0 <ull_conn_llcp+0x30>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     cf0:	7903      	ldrb	r3, [r0, #4]
	conn_upd_curr = conn;
     cf2:	602c      	str	r4, [r5, #0]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     cf4:	f043 0303 	orr.w	r3, r3, #3
     cf8:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
     cfa:	2318      	movs	r3, #24
     cfc:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
     cfe:	230f      	movs	r3, #15
     d00:	71c3      	strb	r3, [r0, #7]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
     d02:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
     d06:	8103      	strh	r3, [r0, #8]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
     d08:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	; 0xfa
     d0c:	8143      	strh	r3, [r0, #10]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
     d0e:	f8b4 30fc 	ldrh.w	r3, [r4, #252]	; 0xfc
     d12:	8183      	strh	r3, [r0, #12]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
     d14:	f8b4 30fe 	ldrh.w	r3, [r4, #254]	; 0xfe
     d18:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0U;
     d1a:	2300      	movs	r3, #0
     d1c:	7403      	strb	r3, [r0, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
     d1e:	74c3      	strb	r3, [r0, #19]
     d20:	7503      	strb	r3, [r0, #20]
			event_counter = lll->event_counter +
     d22:	4446      	add	r6, r8
	p->offset1 = sys_cpu_to_le16(0xffff);
     d24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     d28:	7543      	strb	r3, [r0, #21]
     d2a:	7583      	strb	r3, [r0, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
     d2c:	75c3      	strb	r3, [r0, #23]
     d2e:	7603      	strb	r3, [r0, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
     d30:	7643      	strb	r3, [r0, #25]
     d32:	7683      	strb	r3, [r0, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
     d34:	76c3      	strb	r3, [r0, #27]
     d36:	7703      	strb	r3, [r0, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
     d38:	7743      	strb	r3, [r0, #29]
     d3a:	7783      	strb	r3, [r0, #30]
					lll->latency_prepare + lazy;
     d3c:	444e      	add	r6, r9
	conn->procedure_expire = conn->procedure_reload;
     d3e:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
     d42:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
     d46:	f8a0 6011 	strh.w	r6, [r0, #17]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
     d4a:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
     d4e:	2204      	movs	r2, #4
     d50:	f362 0303 	bfi	r3, r2, #0, #4
     d54:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
	ctrl_tx_enqueue(conn, tx);
     d58:	4620      	mov	r0, r4
     d5a:	f026 fcf7 	bl	2774c <ctrl_tx_enqueue>
     d5e:	e6af      	b.n	ac0 <ull_conn_llcp+0x30>
	if (conn->llcp_conn_param.status) {
     d60:	f894 30f7 	ldrb.w	r3, [r4, #247]	; 0xf7
     d64:	b1eb      	cbz	r3, da2 <ull_conn_llcp+0x312>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
     d66:	482f      	ldr	r0, [pc, #188]	; (e24 <ull_conn_llcp+0x394>)
     d68:	f025 ffe0 	bl	26d2c <mem_acquire>
		if (!tx) {
     d6c:	4601      	mov	r1, r0
     d6e:	2800      	cmp	r0, #0
     d70:	f43f aea6 	beq.w	ac0 <ull_conn_llcp+0x30>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
     d74:	7903      	ldrb	r3, [r0, #4]
     d76:	f043 0303 	orr.w	r3, r3, #3
     d7a:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
     d7c:	2311      	movs	r3, #17
     d7e:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
     d80:	2303      	movs	r3, #3
     d82:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
     d84:	230f      	movs	r3, #15
     d86:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
     d88:	f894 30f7 	ldrb.w	r3, [r4, #247]	; 0xf7
     d8c:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, tx);
     d8e:	4620      	mov	r0, r4
     d90:	f026 fcdc 	bl	2774c <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
     d94:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
     d98:	f884 30f5 	strb.w	r3, [r4, #245]	; 0xf5
	conn_upd_curr = NULL;
     d9c:	2300      	movs	r3, #0
     d9e:	602b      	str	r3, [r5, #0]
		return;
     da0:	e68e      	b.n	ac0 <ull_conn_llcp+0x30>
	if (!conn->lll.role) {
     da2:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
     da6:	2a00      	cmp	r2, #0
     da8:	db40      	blt.n	e2c <ull_conn_llcp+0x39c>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
     daa:	f894 20f6 	ldrb.w	r2, [r4, #246]	; 0xf6
		conn->llcp_cu.win_offset_us = 0U;
     dae:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
     db2:	2006      	movs	r0, #6
     db4:	f360 0203 	bfi	r2, r0, #0, #4
		preferred_periodicity = conn->llcp_conn_param.preferred_periodicity;
     db8:	f894 0100 	ldrb.w	r0, [r4, #256]	; 0x100
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
     dbc:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
		conn->llcp_cu.win_size = 1U;
     dc0:	2201      	movs	r2, #1
     dc2:	f884 20ac 	strb.w	r2, [r4, #172]	; 0xac
		interval_max = conn->llcp_conn_param.interval_max;
     dc6:	f8b4 20fa 	ldrh.w	r2, [r4, #250]	; 0xfa
		if (preferred_periodicity) {
     dca:	b148      	cbz	r0, de0 <ull_conn_llcp+0x350>
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
     dcc:	fbb2 f3f0 	udiv	r3, r2, r0
     dd0:	fb13 f300 	smulbb	r3, r3, r0
			if (conn->llcp_cu.interval < conn->llcp_conn_param.interval_min) {
     dd4:	f8b4 00f8 	ldrh.w	r0, [r4, #248]	; 0xf8
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
     dd8:	b29b      	uxth	r3, r3
				conn->llcp_cu.interval = interval_max;
     dda:	4298      	cmp	r0, r3
     ddc:	bf98      	it	ls
     dde:	461a      	movls	r2, r3
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
     de0:	f8b4 30fc 	ldrh.w	r3, [r4, #252]	; 0xfc
     de4:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
     de8:	f8b4 30fe 	ldrh.w	r3, [r4, #254]	; 0xfe
     dec:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
     df0:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
			conn->llcp_cu.interval = interval_max;
     df4:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
     df8:	f3c3 1300 	ubfx	r3, r3, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
     dfc:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
     e00:	00db      	lsls	r3, r3, #3
     e02:	f043 0302 	orr.w	r3, r3, #2
     e06:	f022 020f 	bic.w	r2, r2, #15
     e0a:	4313      	orrs	r3, r2
		conn->llcp_cu.ack--;
     e0c:	3901      	subs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
     e0e:	f884 309e 	strb.w	r3, [r4, #158]	; 0x9e
		conn->llcp_cu.ack--;
     e12:	f884 109d 	strb.w	r1, [r4, #157]	; 0x9d
		return;
     e16:	e653      	b.n	ac0 <ull_conn_llcp+0x30>
     e18:	0002f5e1 	.word	0x0002f5e1
     e1c:	0002cf80 	.word	0x0002cf80
     e20:	0002b804 	.word	0x0002b804
     e24:	20003118 	.word	0x20003118
     e28:	20003060 	.word	0x20003060
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
     e2c:	4867      	ldr	r0, [pc, #412]	; (fcc <ull_conn_llcp+0x53c>)
     e2e:	f025 ff7d 	bl	26d2c <mem_acquire>
	if (!tx) {
     e32:	4601      	mov	r1, r0
     e34:	2800      	cmp	r0, #0
     e36:	f43f ae43 	beq.w	ac0 <ull_conn_llcp+0x30>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
     e3a:	7903      	ldrb	r3, [r0, #4]
     e3c:	f043 0303 	orr.w	r3, r3, #3
     e40:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
     e42:	2318      	movs	r3, #24
     e44:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
     e46:	2310      	movs	r3, #16
     e48:	71c3      	strb	r3, [r0, #7]
	rsp->interval_min =
     e4a:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
     e4e:	8103      	strh	r3, [r0, #8]
	rsp->interval_max =
     e50:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	; 0xfa
     e54:	8143      	strh	r3, [r0, #10]
	rsp->latency =
     e56:	f8b4 30fc 	ldrh.w	r3, [r4, #252]	; 0xfc
     e5a:	8183      	strh	r3, [r0, #12]
	rsp->timeout =
     e5c:	f8b4 30fe 	ldrh.w	r3, [r4, #254]	; 0xfe
     e60:	81c3      	strh	r3, [r0, #14]
	rsp->preferred_periodicity =
     e62:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
     e66:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
     e68:	f8b4 3102 	ldrh.w	r3, [r4, #258]	; 0x102
     e6c:	f8a0 3011 	strh.w	r3, [r0, #17]
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
     e70:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
     e74:	f8a0 3013 	strh.w	r3, [r0, #19]
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
     e78:	f8b4 3106 	ldrh.w	r3, [r4, #262]	; 0x106
     e7c:	f8a0 3015 	strh.w	r3, [r0, #21]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
     e80:	f8b4 3108 	ldrh.w	r3, [r4, #264]	; 0x108
     e84:	f8a0 3017 	strh.w	r3, [r0, #23]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
     e88:	f8b4 310a 	ldrh.w	r3, [r4, #266]	; 0x10a
     e8c:	f8a0 3019 	strh.w	r3, [r0, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
     e90:	f8b4 310c 	ldrh.w	r3, [r4, #268]	; 0x10c
     e94:	f8a0 301b 	strh.w	r3, [r0, #27]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
     e98:	f8b4 310e 	ldrh.w	r3, [r4, #270]	; 0x10e
     e9c:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, tx);
     ea0:	4620      	mov	r0, r4
     ea2:	f026 fc53 	bl	2774c <ctrl_tx_enqueue>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
     ea6:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
     eaa:	2205      	movs	r2, #5
     eac:	f362 0303 	bfi	r3, r2, #0, #4
     eb0:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
     eb4:	e604      	b.n	ac0 <ull_conn_llcp+0x30>
	rx = ll_pdu_rx_alloc();
     eb6:	f018 f903 	bl	190c0 <ll_pdu_rx_alloc>
	if (!rx) {
     eba:	4601      	mov	r1, r0
     ebc:	2800      	cmp	r0, #0
     ebe:	f43f adff 	beq.w	ac0 <ull_conn_llcp+0x30>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
     ec2:	f894 20f6 	ldrb.w	r2, [r4, #246]	; 0xf6
     ec6:	2303      	movs	r3, #3
     ec8:	f363 0203 	bfi	r2, r3, #0, #4
     ecc:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
	rx->hdr.handle = conn->lll.handle;
     ed0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
     ed2:	7103      	strb	r3, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
     ed4:	7f03      	ldrb	r3, [r0, #28]
	rx->hdr.handle = conn->lll.handle;
     ed6:	80c2      	strh	r2, [r0, #6]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
     ed8:	f043 0303 	orr.w	r3, r3, #3
     edc:	7703      	strb	r3, [r0, #28]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
     ede:	2318      	movs	r3, #24
     ee0:	7743      	strb	r3, [r0, #29]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
     ee2:	230f      	movs	r3, #15
     ee4:	77c3      	strb	r3, [r0, #31]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
     ee6:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
     eea:	8403      	strh	r3, [r0, #32]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
     eec:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	; 0xfa
     ef0:	8443      	strh	r3, [r0, #34]	; 0x22
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
     ef2:	f8b4 30fc 	ldrh.w	r3, [r4, #252]	; 0xfc
     ef6:	8483      	strh	r3, [r0, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
     ef8:	f8b4 30fe 	ldrh.w	r3, [r4, #254]	; 0xfe
     efc:	84c3      	strh	r3, [r0, #38]	; 0x26
	ll_rx_put(rx->hdr.link, rx);
     efe:	e62e      	b.n	b5e <ull_conn_llcp+0xce>
		LL_ASSERT(0);
     f00:	f640 635e 	movw	r3, #3678	; 0xe5e
     f04:	e6b8      	b.n	c78 <ull_conn_llcp+0x1e8>
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
     f06:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
     f08:	f8b4 8032 	ldrh.w	r8, [r4, #50]	; 0x32
     f0c:	4490      	add	r8, r2
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
     f0e:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
     f12:	44c8      	add	r8, r9
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
     f14:	f012 0107 	ands.w	r1, r2, #7
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
     f18:	fa1f f888 	uxth.w	r8, r8
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
     f1c:	d058      	beq.n	fd0 <ull_conn_llcp+0x540>
		rx = ll_pdu_rx_alloc_peek(1);
     f1e:	f018 f8b7 	bl	19090 <ll_pdu_rx_alloc_peek>
		if (!rx) {
     f22:	4606      	mov	r6, r0
     f24:	2800      	cmp	r0, #0
     f26:	d043      	beq.n	fb0 <ull_conn_llcp+0x520>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
     f28:	4828      	ldr	r0, [pc, #160]	; (fcc <ull_conn_llcp+0x53c>)
     f2a:	f025 feff 	bl	26d2c <mem_acquire>
		if (!tx) {
     f2e:	4605      	mov	r5, r0
     f30:	2800      	cmp	r0, #0
     f32:	d03d      	beq.n	fb0 <ull_conn_llcp+0x520>
		cpr_active_check_and_set(conn);
     f34:	4620      	mov	r0, r4
     f36:	f018 ff55 	bl	19de4 <cpr_active_check_and_set>
		(void)ll_pdu_rx_alloc();
     f3a:	f018 f8c1 	bl	190c0 <ll_pdu_rx_alloc>
		rx->hdr.link->mem = conn->llcp_rx;
     f3e:	6833      	ldr	r3, [r6, #0]
     f40:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
     f44:	605a      	str	r2, [r3, #4]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     f46:	792b      	ldrb	r3, [r5, #4]
		conn->llcp_rx = rx;
     f48:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     f4c:	f043 0303 	orr.w	r3, r3, #3
     f50:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
     f52:	2200      	movs	r2, #0
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
     f54:	230c      	movs	r3, #12
     f56:	716b      	strb	r3, [r5, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
     f58:	71ea      	strb	r2, [r5, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
     f5a:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
     f5e:	722b      	strb	r3, [r5, #8]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
     f60:	f240 41e2 	movw	r1, #1250	; 0x4e2
     f64:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
     f68:	fbb3 f3f1 	udiv	r3, r3, r1
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
     f6c:	f8a5 3009 	strh.w	r3, [r5, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
     f70:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
     f74:	f8a5 300b 	strh.w	r3, [r5, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
     f78:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
     f7c:	f8a5 300d 	strh.w	r3, [r5, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
     f80:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
     f84:	f8a5 300f 	strh.w	r3, [r5, #15]
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
     f88:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
     f8c:	f362 0302 	bfi	r3, r2, #0, #3
     f90:	f884 309e 	strb.w	r3, [r4, #158]	; 0x9e
		conn->llcp.conn_upd.instant = event_counter +
     f94:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
     f96:	4498      	add	r8, r3
					      conn->lll.latency + 6;
     f98:	f108 0806 	add.w	r8, r8, #6
     f9c:	fa1f f888 	uxth.w	r8, r8
		conn->llcp.conn_upd.instant = event_counter +
     fa0:	f8a4 808c 	strh.w	r8, [r4, #140]	; 0x8c
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
     fa4:	f8a5 8011 	strh.w	r8, [r5, #17]
			ctrl_tx_enqueue(conn, tx);
     fa8:	4629      	mov	r1, r5
     faa:	4620      	mov	r0, r4
     fac:	f026 fbce 	bl	2774c <ctrl_tx_enqueue>
	if (((conn->llcp_terminate.req - conn->llcp_terminate.ack) & 0xFF) ==
     fb0:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
     fb4:	f894 20d1 	ldrb.w	r2, [r4, #209]	; 0xd1
     fb8:	1a9b      	subs	r3, r3, r2
     fba:	b2db      	uxtb	r3, r3
     fbc:	2b01      	cmp	r3, #1
     fbe:	f000 8211 	beq.w	13e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5c>
	return 0;
     fc2:	2000      	movs	r0, #0
}
     fc4:	b00d      	add	sp, #52	; 0x34
     fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     fca:	bf00      	nop
     fcc:	20003118 	.word	0x20003118
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
     fd0:	f8b4 a08c 	ldrh.w	sl, [r4, #140]	; 0x8c
     fd4:	eba8 020a 	sub.w	r2, r8, sl
	} else if (instant_latency <= 0x7FFF) {
     fd8:	0410      	lsls	r0, r2, #16
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
     fda:	fa1f fb82 	uxth.w	fp, r2
	} else if (instant_latency <= 0x7FFF) {
     fde:	d4e7      	bmi.n	fb0 <ull_conn_llcp+0x520>
			conn->llcp_ack = conn->llcp_req;
     fe0:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
		conn->llcp_cu.ack = conn->llcp_cu.req;
     fe4:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     fe8:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
		conn->llcp_cu.ack = conn->llcp_cu.req;
     fec:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     ff0:	f894 30f5 	ldrb.w	r3, [r4, #245]	; 0xf5
     ff4:	4293      	cmp	r3, r2
     ff6:	d009      	beq.n	100c <CONFIG_BT_RX_STACK_SIZE+0xc>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
     ff8:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     ffc:	f003 030f 	and.w	r3, r3, #15
    1000:	2b06      	cmp	r3, #6
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    1002:	bf04      	itt	eq
    1004:	f884 20f5 	strbeq.w	r2, [r4, #245]	; 0xf5
			conn->procedure_expire = 0U;
    1008:	f8a4 1078 	strheq.w	r1, [r4, #120]	; 0x78
	if (conn == conn_upd_curr) {
    100c:	4bc0      	ldr	r3, [pc, #768]	; (1310 <__data_size+0x2c8>)
		rx = conn->llcp_rx;
    100e:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
	if (conn == conn_upd_curr) {
    1012:	681a      	ldr	r2, [r3, #0]
    1014:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
    1016:	bf04      	itt	eq
    1018:	2200      	moveq	r2, #0
    101a:	601a      	streq	r2, [r3, #0]
		LL_ASSERT(rx && rx->hdr.link);
    101c:	b10d      	cbz	r5, 1022 <CONFIG_BT_RX_STACK_SIZE+0x22>
    101e:	682b      	ldr	r3, [r5, #0]
    1020:	b963      	cbnz	r3, 103c <CONFIG_BT_RX_STACK_SIZE+0x3c>
    1022:	4abc      	ldr	r2, [pc, #752]	; (1314 <__data_size+0x2cc>)
    1024:	49bc      	ldr	r1, [pc, #752]	; (1318 <__data_size+0x2d0>)
    1026:	48bd      	ldr	r0, [pc, #756]	; (131c <__data_size+0x2d4>)
    1028:	f640 23b4 	movw	r3, #2740	; 0xab4
    102c:	f020 f91e 	bl	2126c <printk>
    1030:	4040      	eors	r0, r0
    1032:	f380 8811 	msr	BASEPRI, r0
    1036:	f04f 0003 	mov.w	r0, #3
    103a:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    103c:	6828      	ldr	r0, [r5, #0]
		if ((conn->llcp_cu.interval != lll->interval) ||
    103e:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
		conn->llcp_rx = rx->hdr.link->mem;
    1042:	6843      	ldr	r3, [r0, #4]
    1044:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
		if ((conn->llcp_cu.interval != lll->interval) ||
    1048:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
		    (conn->llcp_cu.latency != lll->latency) ||
    104a:	f8b4 60a2 	ldrh.w	r6, [r4, #162]	; 0xa2
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    104e:	f8b4 10a4 	ldrh.w	r1, [r4, #164]	; 0xa4
		if ((conn->llcp_cu.interval != lll->interval) ||
    1052:	429a      	cmp	r2, r3
    1054:	d113      	bne.n	107e <__data_size+0x36>
    1056:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1058:	42b3      	cmp	r3, r6
    105a:	d110      	bne.n	107e <__data_size+0x36>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    105c:	f240 43e2 	movw	r3, #1250	; 0x4e2
    1060:	fb03 fc02 	mul.w	ip, r3, r2
    1064:	f242 7310 	movw	r3, #10000	; 0x2710
    1068:	fb03 c301 	mla	r3, r3, r1, ip
    106c:	3b01      	subs	r3, #1
    106e:	fbb3 f3fc 	udiv	r3, r3, ip
		    (conn->llcp_cu.latency != lll->latency) ||
    1072:	f8b4 c072 	ldrh.w	ip, [r4, #114]	; 0x72
    1076:	b29b      	uxth	r3, r3
    1078:	459c      	cmp	ip, r3
    107a:	f000 8121 	beq.w	12c0 <__data_size+0x278>
			rx->hdr.handle = lll->handle;
    107e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1080:	80eb      	strh	r3, [r5, #6]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    1082:	2318      	movs	r3, #24
    1084:	712b      	strb	r3, [r5, #4]
			cu->status = 0x00;
    1086:	2300      	movs	r3, #0
    1088:	772b      	strb	r3, [r5, #28]
			cu->interval = conn->llcp_cu.interval;
    108a:	83ea      	strh	r2, [r5, #30]
			cu->latency = conn->llcp_cu.latency;
    108c:	842e      	strh	r6, [r5, #32]
			cu->timeout = conn->llcp_cu.timeout;
    108e:	8469      	strh	r1, [r5, #34]	; 0x22
		ll_rx_put(rx->hdr.link, rx);
    1090:	4629      	mov	r1, r5
    1092:	f017 ff69 	bl	18f68 <ll_rx_put>
		ll_rx_sched();
    1096:	f017 ff71 	bl	18f7c <ll_rx_sched>
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
    109a:	68a3      	ldr	r3, [r4, #8]
    109c:	2b00      	cmp	r3, #0
    109e:	da09      	bge.n	10b4 <__data_size+0x6c>
			uint32_t ticks_prepare_to_start =
    10a0:	68e0      	ldr	r0, [r4, #12]
    10a2:	6862      	ldr	r2, [r4, #4]
			conn->ull.ticks_prepare_to_start &= ~XON_BITMASK;
    10a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->ull.ticks_prepare_to_start -
    10a8:	4290      	cmp	r0, r2
    10aa:	bf2c      	ite	cs
    10ac:	183f      	addcs	r7, r7, r0
    10ae:	18bf      	addcc	r7, r7, r2
			conn->ull.ticks_prepare_to_start &= ~XON_BITMASK;
    10b0:	60a3      	str	r3, [r4, #8]
			ticks_at_expire -= (conn->ull.ticks_prepare_to_start -
    10b2:	1aff      	subs	r7, r7, r3
		conn_interval_old = instant_latency * lll->interval;
    10b4:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
		latency = conn_interval_old / conn->llcp_cu.interval;
    10b6:	f8b4 60a0 	ldrh.w	r6, [r4, #160]	; 0xa0
    10ba:	4d99      	ldr	r5, [pc, #612]	; (1320 <__data_size+0x2d8>)
		conn_interval_old = instant_latency * lll->interval;
    10bc:	fb10 f00b 	smulbb	r0, r0, fp
    10c0:	b280      	uxth	r0, r0
		latency = conn_interval_old / conn->llcp_cu.interval;
    10c2:	fbb0 f2f6 	udiv	r2, r0, r6
    10c6:	b293      	uxth	r3, r2
    10c8:	930b      	str	r3, [sp, #44]	; 0x2c
		conn_interval_new = latency * conn->llcp_cu.interval;
    10ca:	fb16 f302 	smulbb	r3, r6, r2
    10ce:	b29b      	uxth	r3, r3
		if (conn_interval_new > conn_interval_old) {
    10d0:	4298      	cmp	r0, r3
    10d2:	f240 41e2 	movw	r1, #1250	; 0x4e2
    10d6:	f080 80f6 	bcs.w	12c6 <__data_size+0x27e>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    10da:	1a18      	subs	r0, r3, r0
    10dc:	4348      	muls	r0, r1
    10de:	a38a      	add	r3, pc, #552	; (adr r3, 1308 <__data_size+0x2c0>)
    10e0:	e9d3 2300 	ldrd	r2, r3, [r3]
    10e4:	fba0 0105 	umull	r0, r1, r0, r5
    10e8:	f7ff f84a 	bl	180 <__aeabi_uldivmod>
    10ec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    10f0:	4407      	add	r7, r0
		lll->latency_prepare -= (instant_latency - latency);
    10f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		lll->latency_prepare += lazy;
    10f4:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
		lll->latency_prepare -= (instant_latency - latency);
    10f6:	ebaa 0a08 	sub.w	sl, sl, r8
    10fa:	449a      	add	sl, r3
		} else if (lll->role) {
    10fc:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		lll->latency_prepare += lazy;
    1100:	4491      	add	r9, r2
		lll->latency_prepare -= (instant_latency - latency);
    1102:	44ca      	add	sl, r9
		conn_interval_us = conn->llcp_cu.interval *
    1104:	f240 48e2 	movw	r8, #1250	; 0x4e2
		} else if (lll->role) {
    1108:	2b00      	cmp	r3, #0
		lll->latency_prepare -= (instant_latency - latency);
    110a:	f8a4 a02e 	strh.w	sl, [r4, #46]	; 0x2e
		conn_interval_us = conn->llcp_cu.interval *
    110e:	fb08 f906 	mul.w	r9, r8, r6
		} else if (lll->role) {
    1112:	f280 80e5 	bge.w	12e0 <__data_size+0x298>
				lll->periph.window_widening_periodic_us *
    1116:	6c22      	ldr	r2, [r4, #64]	; 0x40
			lll->periph.window_widening_prepare_us -=
    1118:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    111a:	fb02 331b 	mls	r3, r2, fp, r3
    111e:	64a3      	str	r3, [r4, #72]	; 0x48
				(((lll_clock_ppm_local_get() +
    1120:	f026 fcdd 	bl	27ade <lll_clock_ppm_local_get>
    1124:	4606      	mov	r6, r0
				   lll_clock_ppm_get(conn->periph.sca)) *
    1126:	f894 007c 	ldrb.w	r0, [r4, #124]	; 0x7c
    112a:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    112e:	f01a fe65 	bl	1bdfc <lll_clock_ppm_get>
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    1132:	f894 20ac 	ldrb.w	r2, [r4, #172]	; 0xac
				(((lll_clock_ppm_local_get() +
    1136:	4406      	add	r6, r0
				   lll_clock_ppm_get(conn->periph.sca)) *
    1138:	fb09 f606 	mul.w	r6, r9, r6
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    113c:	fb08 f202 	mul.w	r2, r8, r2
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    1140:	f506 2674 	add.w	r6, r6, #999424	; 0xf4000
    1144:	4877      	ldr	r0, [pc, #476]	; (1324 <__data_size+0x2dc>)
			lll->periph.window_size_prepare_us =
    1146:	6522      	str	r2, [r4, #80]	; 0x50
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    1148:	f206 263f 	addw	r6, r6, #575	; 0x23f
			conn->periph.ticks_to_offset = 0U;
    114c:	2200      	movs	r2, #0
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    114e:	fbb6 f6f0 	udiv	r6, r6, r0
				lll->periph.window_widening_periodic_us *
    1152:	980b      	ldr	r0, [sp, #44]	; 0x2c
			conn->periph.ticks_to_offset = 0U;
    1154:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
			lll->periph.window_widening_prepare_us +=
    1158:	6ca2      	ldr	r2, [r4, #72]	; 0x48
			lll->periph.window_widening_periodic_us =
    115a:	6426      	str	r6, [r4, #64]	; 0x40
				lll->periph.window_widening_periodic_us *
    115c:	4370      	muls	r0, r6
				(conn_interval_us >> 1) - EVENT_IFS_US;
    115e:	ea4f 0359 	mov.w	r3, r9, lsr #1
    1162:	3b96      	subs	r3, #150	; 0x96
			lll->periph.window_widening_prepare_us +=
    1164:	4402      	add	r2, r0
			lll->periph.window_widening_max_us =
    1166:	6463      	str	r3, [r4, #68]	; 0x44
			lll->periph.window_widening_prepare_us +=
    1168:	429a      	cmp	r2, r3
    116a:	bf94      	ite	ls
    116c:	64a2      	strls	r2, [r4, #72]	; 0x48
    116e:	64a3      	strhi	r3, [r4, #72]	; 0x48
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1170:	fba0 0105 	umull	r0, r1, r0, r5
    1174:	a364      	add	r3, pc, #400	; (adr r3, 1308 <__data_size+0x2c0>)
    1176:	e9d3 2300 	ldrd	r2, r3, [r3]
    117a:	f7ff f801 	bl	180 <__aeabi_uldivmod>
    117e:	1a3f      	subs	r7, r7, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1180:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
    1184:	fbb0 f0f8 	udiv	r0, r0, r8
    1188:	fb08 f000 	mul.w	r0, r8, r0
    118c:	a35e      	add	r3, pc, #376	; (adr r3, 1308 <__data_size+0x2c0>)
    118e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1192:	fba0 0105 	umull	r0, r1, r0, r5
    1196:	f7fe fff3 	bl	180 <__aeabi_uldivmod>
			periodic_us -= lll->periph.window_widening_periodic_us;
    119a:	eba9 0606 	sub.w	r6, r9, r6
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    119e:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
		lll->interval = conn->llcp_cu.interval;
    11a2:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
    11a6:	8563      	strh	r3, [r4, #42]	; 0x2a
		lll->latency = conn->llcp_cu.latency;
    11a8:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
    11ac:	85a3      	strh	r3, [r4, #44]	; 0x2c
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    11ae:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
    11b2:	f242 7210 	movw	r2, #10000	; 0x2710
    11b6:	fb02 9303 	mla	r3, r2, r3, r9
    11ba:	3b01      	subs	r3, #1
    11bc:	fbb3 f3f9 	udiv	r3, r3, r9
    11c0:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    11c4:	4b58      	ldr	r3, [pc, #352]	; (1328 <__data_size+0x2e0>)
    11c6:	444b      	add	r3, r9
    11c8:	fbb3 f3f9 	udiv	r3, r3, r9
    11cc:	f8a4 3076 	strh.w	r3, [r4, #118]	; 0x76
		if (conn->llcp_cu.cmd) {
    11d0:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
    11d4:	0719      	lsls	r1, r3, #28
			conn->supervision_expire = 0U;
    11d6:	bf44      	itt	mi
    11d8:	2300      	movmi	r3, #0
    11da:	f8a4 3074 	strhmi.w	r3, [r4, #116]	; 0x74
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    11de:	2102      	movs	r1, #2
    11e0:	2001      	movs	r0, #1
    11e2:	f01c fc2f 	bl	1da44 <mayfly_is_enabled>
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    11e6:	2200      	movs	r2, #0
    11e8:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    11ea:	4682      	mov	sl, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    11ec:	2001      	movs	r0, #1
    11ee:	f015 fbd7 	bl	169a0 <mayfly_enable>
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    11f2:	4620      	mov	r0, r4
    11f4:	f018 ff80 	bl	1a0f8 <ll_conn_handle_get>
    11f8:	f100 0905 	add.w	r9, r0, #5
    11fc:	fa5f f989 	uxtb.w	r9, r9
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
    1200:	4b4a      	ldr	r3, [pc, #296]	; (132c <__data_size+0x2e4>)
    1202:	9400      	str	r4, [sp, #0]
    1204:	464a      	mov	r2, r9
    1206:	2101      	movs	r1, #1
    1208:	2000      	movs	r0, #0
    120a:	f016 f9bd 	bl	17588 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    120e:	f030 0302 	bics.w	r3, r0, #2
    1212:	d00c      	beq.n	122e <__data_size+0x1e6>
    1214:	4a3f      	ldr	r2, [pc, #252]	; (1314 <__data_size+0x2cc>)
    1216:	4946      	ldr	r1, [pc, #280]	; (1330 <__data_size+0x2e8>)
    1218:	4840      	ldr	r0, [pc, #256]	; (131c <__data_size+0x2d4>)
    121a:	f640 335f 	movw	r3, #2911	; 0xb5f
    121e:	f020 f825 	bl	2126c <printk>
    1222:	4040      	eors	r0, r0
    1224:	f380 8811 	msr	BASEPRI, r0
    1228:	f04f 0003 	mov.w	r0, #3
    122c:	df02      	svc	2
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    122e:	fba6 6505 	umull	r6, r5, r6, r5
    1232:	a335      	add	r3, pc, #212	; (adr r3, 1308 <__data_size+0x2c0>)
    1234:	e9d3 2300 	ldrd	r2, r3, [r3]
    1238:	4630      	mov	r0, r6
    123a:	4629      	mov	r1, r5
    123c:	f7fe ffa0 	bl	180 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1240:	4b3c      	ldr	r3, [pc, #240]	; (1334 <__data_size+0x2ec>)
    1242:	9408      	str	r4, [sp, #32]
    1244:	e9cd 4306 	strd	r4, r3, [sp, #24]
    1248:	4b3b      	ldr	r3, [pc, #236]	; (1338 <__data_size+0x2f0>)
    124a:	9305      	str	r3, [sp, #20]
    124c:	6923      	ldr	r3, [r4, #16]
    124e:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(periodic_us),
    1250:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
    1254:	4839      	ldr	r0, [pc, #228]	; (133c <__data_size+0x2f4>)
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1256:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    125a:	9303      	str	r3, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
    125c:	fba4 0100 	umull	r0, r1, r4, r0
    1260:	2307      	movs	r3, #7
    1262:	1a30      	subs	r0, r6, r0
    1264:	fb03 1104 	mla	r1, r3, r4, r1
    1268:	eb65 0101 	sbc.w	r1, r5, r1
    126c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1270:	2300      	movs	r3, #0
    1272:	f7fe ff85 	bl	180 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1276:	463b      	mov	r3, r7
    1278:	e9cd 4001 	strd	r4, r0, [sp, #4]
    127c:	f8cd 8000 	str.w	r8, [sp]
    1280:	464a      	mov	r2, r9
    1282:	2101      	movs	r1, #1
    1284:	2000      	movs	r0, #0
    1286:	f026 f844 	bl	27312 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    128a:	f030 0302 	bics.w	r3, r0, #2
    128e:	d00c      	beq.n	12aa <__data_size+0x262>
    1290:	4a20      	ldr	r2, [pc, #128]	; (1314 <__data_size+0x2cc>)
    1292:	4927      	ldr	r1, [pc, #156]	; (1330 <__data_size+0x2e8>)
    1294:	4821      	ldr	r0, [pc, #132]	; (131c <__data_size+0x2d4>)
    1296:	f640 3379 	movw	r3, #2937	; 0xb79
    129a:	f01f ffe7 	bl	2126c <printk>
    129e:	4040      	eors	r0, r0
    12a0:	f380 8811 	msr	BASEPRI, r0
    12a4:	f04f 0003 	mov.w	r0, #3
    12a8:	df02      	svc	2
		if (mayfly_was_enabled) {
    12aa:	f1ba 0f00 	cmp.w	sl, #0
    12ae:	d004      	beq.n	12ba <__data_size+0x272>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    12b0:	2201      	movs	r2, #1
    12b2:	2102      	movs	r1, #2
    12b4:	4610      	mov	r0, r2
    12b6:	f015 fb73 	bl	169a0 <mayfly_enable>
				return -ECANCELED;
    12ba:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    12be:	e681      	b.n	fc4 <ull_conn_llcp+0x534>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    12c0:	2301      	movs	r3, #1
    12c2:	712b      	strb	r3, [r5, #4]
    12c4:	e6e4      	b.n	1090 <__data_size+0x48>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    12c6:	fb06 0012 	mls	r0, r6, r2, r0
    12ca:	b280      	uxth	r0, r0
    12cc:	4348      	muls	r0, r1
    12ce:	a30e      	add	r3, pc, #56	; (adr r3, 1308 <__data_size+0x2c0>)
    12d0:	e9d3 2300 	ldrd	r2, r3, [r3]
    12d4:	fba0 0105 	umull	r0, r1, r0, r5
    12d8:	f7fe ff52 	bl	180 <__aeabi_uldivmod>
    12dc:	1a3f      	subs	r7, r7, r0
    12de:	e708      	b.n	10f2 <__data_size+0xaa>
			LL_ASSERT(0);
    12e0:	4a0c      	ldr	r2, [pc, #48]	; (1314 <__data_size+0x2cc>)
    12e2:	4917      	ldr	r1, [pc, #92]	; (1340 <__data_size+0x2f8>)
    12e4:	480d      	ldr	r0, [pc, #52]	; (131c <__data_size+0x2d4>)
    12e6:	f44f 6333 	mov.w	r3, #2864	; 0xb30
    12ea:	f01f ffbf 	bl	2126c <printk>
    12ee:	4040      	eors	r0, r0
    12f0:	f380 8811 	msr	BASEPRI, r0
    12f4:	f04f 0003 	mov.w	r0, #3
    12f8:	df02      	svc	2
		uint32_t ticks_win_offset = 0;
    12fa:	f04f 0800 	mov.w	r8, #0
		periodic_us = conn_interval_us;
    12fe:	464e      	mov	r6, r9
    1300:	e74f      	b.n	11a2 <__data_size+0x15a>
    1302:	bf00      	nop
    1304:	f3af 8000 	nop.w
    1308:	1afd498d 	.word	0x1afd498d
    130c:	00000007 	.word	0x00000007
    1310:	20003060 	.word	0x20003060
    1314:	0002f5e1 	.word	0x0002f5e1
    1318:	0002f6ab 	.word	0x0002f6ab
    131c:	0002b804 	.word	0x0002b804
    1320:	3b9aca00 	.word	0x3b9aca00
    1324:	000f4240 	.word	0x000f4240
    1328:	026259ff 	.word	0x026259ff
    132c:	0001a035 	.word	0x0001a035
    1330:	0002f6be 	.word	0x0002f6be
    1334:	00019fdd 	.word	0x00019fdd
    1338:	0001b23d 	.word	0x0001b23d
    133c:	1afd498d 	.word	0x1afd498d
    1340:	0002cf80 	.word	0x0002cf80
			event_counter = lll->event_counter +
    1344:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    1346:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
    1348:	440a      	add	r2, r1
					lll->latency_prepare + lazy;
    134a:	4491      	add	r9, r2
	if (conn->llcp.chan_map.initiate) {
    134c:	f894 208c 	ldrb.w	r2, [r4, #140]	; 0x8c
    1350:	07d2      	lsls	r2, r2, #31
			event_counter = lll->event_counter +
    1352:	fa1f f989 	uxth.w	r9, r9
	if (conn->llcp.chan_map.initiate) {
    1356:	d525      	bpl.n	13a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1c>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1358:	4836      	ldr	r0, [pc, #216]	; (1434 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xac>)
    135a:	f025 fce7 	bl	26d2c <mem_acquire>
		if (tx) {
    135e:	4605      	mov	r5, r0
    1360:	2800      	cmp	r0, #0
    1362:	f43f ae25 	beq.w	fb0 <ull_conn_llcp+0x520>
			conn->llcp.chan_map.initiate = 0U;
    1366:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
    136a:	f36f 0300 	bfc	r3, #0, #1
    136e:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
			conn->llcp.chan_map.instant = event_counter +
    1372:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1374:	4499      	add	r9, r3
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1376:	7903      	ldrb	r3, [r0, #4]
						      conn->lll.latency + 6;
    1378:	f109 0906 	add.w	r9, r9, #6
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    137c:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp.chan_map.instant = event_counter +
    1380:	f8a4 9092 	strh.w	r9, [r4, #146]	; 0x92
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1384:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    1386:	2308      	movs	r3, #8
    1388:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    138a:	2301      	movs	r3, #1
    138c:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    138e:	2205      	movs	r2, #5
    1390:	f104 018d 	add.w	r1, r4, #141	; 0x8d
    1394:	3008      	adds	r0, #8
    1396:	f022 fd07 	bl	23da8 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    139a:	f8b4 3092 	ldrh.w	r3, [r4, #146]	; 0x92
    139e:	f8a5 300d 	strh.w	r3, [r5, #13]
    13a2:	e601      	b.n	fa8 <ull_conn_llcp+0x518>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    13a4:	f8b4 2092 	ldrh.w	r2, [r4, #146]	; 0x92
    13a8:	eba9 0902 	sub.w	r9, r9, r2
    13ac:	f419 4f00 	tst.w	r9, #32768	; 0x8000
    13b0:	f47f adfe 	bne.w	fb0 <ull_conn_llcp+0x520>
		memcpy(&lll->data_chan_map[0],
    13b4:	f104 0534 	add.w	r5, r4, #52	; 0x34
			conn->llcp_ack = conn->llcp_req;
    13b8:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
		memcpy(&lll->data_chan_map[0],
    13bc:	2205      	movs	r2, #5
    13be:	f104 018d 	add.w	r1, r4, #141	; 0x8d
    13c2:	4628      	mov	r0, r5
    13c4:	f022 fcf0 	bl	23da8 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
    13c8:	2105      	movs	r1, #5
    13ca:	4628      	mov	r0, r5
    13cc:	f025 fd2a 	bl	26e24 <util_ones_count_get>
		lll->data_chan_count =
    13d0:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    13d4:	f360 0305 	bfi	r3, r0, #0, #6
    13d8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
    13dc:	2301      	movs	r3, #1
    13de:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
    13e2:	e5e5      	b.n	fb0 <ull_conn_llcp+0x520>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    13e4:	4813      	ldr	r0, [pc, #76]	; (1434 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xac>)
    13e6:	f025 fca1 	bl	26d2c <mem_acquire>
		if (tx) {
    13ea:	4601      	mov	r1, r0
    13ec:	b188      	cbz	r0, 1412 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8a>
			conn->llcp_terminate.ack--;
    13ee:	f894 30d1 	ldrb.w	r3, [r4, #209]	; 0xd1
    13f2:	3b01      	subs	r3, #1
    13f4:	f884 30d1 	strb.w	r3, [r4, #209]	; 0xd1
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    13f8:	7903      	ldrb	r3, [r0, #4]
    13fa:	f043 0303 	orr.w	r3, r3, #3
    13fe:	7103      	strb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
    1400:	2302      	movs	r3, #2
    1402:	7143      	strb	r3, [r0, #5]
			pdu_tx->llctrl.opcode =
    1404:	71c3      	strb	r3, [r0, #7]
			pdu_tx->llctrl.terminate_ind.error_code =
    1406:	f894 30d2 	ldrb.w	r3, [r4, #210]	; 0xd2
    140a:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, tx);
    140c:	4620      	mov	r0, r4
    140e:	f026 f99d 	bl	2774c <ctrl_tx_enqueue>
		if (!conn->procedure_expire) {
    1412:	f8b4 0078 	ldrh.w	r0, [r4, #120]	; 0x78
    1416:	2800      	cmp	r0, #0
    1418:	f47f add3 	bne.w	fc2 <ull_conn_llcp+0x532>
			conn->procedure_expire = conn->supervision_reload;
    141c:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
			if (conn->procedure_expire <= 1U) {
    1420:	2b01      	cmp	r3, #1
    1422:	d902      	bls.n	142a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa2>
			conn->procedure_expire = conn->supervision_reload;
    1424:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
    1428:	e5cb      	b.n	fc2 <ull_conn_llcp+0x532>
				conn->procedure_expire++;
    142a:	3301      	adds	r3, #1
    142c:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
    1430:	e5c8      	b.n	fc4 <ull_conn_llcp+0x534>
    1432:	bf00      	nop
    1434:	20003118 	.word	0x20003118

00001438 <ull_periph_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param);

void ull_periph_setup(struct node_rx_hdr *rx, struct node_rx_ftr *ftr,
		     struct lll_conn *lll)
{
    1438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t win_offset;
	memq_link_t *link;
	uint16_t timeout;
	uint8_t chan_sel;

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    143c:	680b      	ldr	r3, [r1, #0]
    143e:	f8d3 a000 	ldr.w	sl, [r3]
	conn = lll->hdr.parent;

	/* Populate the peripheral context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;

	peer_addr_type = pdu_adv->tx_addr;
    1442:	7f03      	ldrb	r3, [r0, #28]
{
    1444:	b093      	sub	sp, #76	; 0x4c
	conn = lll->hdr.parent;
    1446:	4617      	mov	r7, r2
{
    1448:	4615      	mov	r5, r2
    144a:	4604      	mov	r4, r0
	peer_addr_type = pdu_adv->tx_addr;
    144c:	f3c3 1380 	ubfx	r3, r3, #6, #1
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    1450:	2206      	movs	r2, #6
{
    1452:	4689      	mov	r9, r1
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    1454:	f100 011e 	add.w	r1, r0, #30
    1458:	a810      	add	r0, sp, #64	; 0x40
	peer_addr_type = pdu_adv->tx_addr;
    145a:	930c      	str	r3, [sp, #48]	; 0x30
	conn = lll->hdr.parent;
    145c:	f857 6b08 	ldr.w	r6, [r7], #8
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    1460:	f022 fca2 	bl	23da8 <memcpy>
		peer_addr_type += 2;
	} else {
#else /* CONFIG_BT_CTLR_PRIVACY */
	if (1) {
#endif /* CONFIG_BT_CTLR_PRIVACY */
		memcpy(peer_id_addr, peer_addr, BDADDR_SIZE);
    1464:	2206      	movs	r2, #6
    1466:	a910      	add	r1, sp, #64	; 0x40
    1468:	a80e      	add	r0, sp, #56	; 0x38
    146a:	f022 fc9d 	bl	23da8 <memcpy>
	}

	/* Use the link stored in the node rx to enqueue connection
	 * complete node rx towards LL context.
	 */
	link = rx->link;
    146e:	4621      	mov	r1, r4
	conn->own_id_addr_type = own_id_addr_type;
	(void)memcpy(conn->own_id_addr, own_id_addr,
		     sizeof(conn->own_id_addr));
#endif /* CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN */

	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    1470:	2203      	movs	r2, #3
	link = rx->link;
    1472:	f851 bb2e 	ldr.w	fp, [r1], #46
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    1476:	4638      	mov	r0, r7
    1478:	f022 fc96 	bl	23da8 <memcpy>
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    147c:	1d2b      	adds	r3, r5, #4
    147e:	4618      	mov	r0, r3
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    1480:	f105 0718 	add.w	r7, r5, #24
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    1484:	2204      	movs	r2, #4
    1486:	f104 012a 	add.w	r1, r4, #42	; 0x2a
    148a:	930a      	str	r3, [sp, #40]	; 0x28
    148c:	f022 fc8c 	bl	23da8 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    1490:	2205      	movs	r2, #5
    1492:	f104 013a 	add.w	r1, r4, #58	; 0x3a
    1496:	4638      	mov	r0, r7
    1498:	f022 fc86 	bl	23da8 <memcpy>
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    149c:	2105      	movs	r1, #5
    149e:	4638      	mov	r0, r7
    14a0:	f025 fcc0 	bl	26e24 <util_ones_count_get>
    14a4:	7f6a      	ldrb	r2, [r5, #29]
    14a6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    14aa:	f360 0205 	bfi	r2, r0, #0, #6
    14ae:	776a      	strb	r2, [r5, #29]
			       sizeof(lll->data_chan_map));
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    14b0:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
    14b4:	f3c2 0104 	ubfx	r1, r2, #0, #5
    14b8:	77a9      	strb	r1, [r5, #30]
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    14ba:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    14bc:	81e9      	strh	r1, [r5, #14]
	if ((lll->data_chan_count < 2) || (lll->data_chan_hop < 5) ||
    14be:	2801      	cmp	r0, #1
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    14c0:	f002 021f 	and.w	r2, r2, #31
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    14c4:	b28f      	uxth	r7, r1
	if ((lll->data_chan_count < 2) || (lll->data_chan_hop < 5) ||
    14c6:	d906      	bls.n	14d6 <ull_periph_setup+0x9e>
    14c8:	321b      	adds	r2, #27
    14ca:	f002 021f 	and.w	r2, r2, #31
    14ce:	2a0b      	cmp	r2, #11
    14d0:	d801      	bhi.n	14d6 <ull_periph_setup+0x9e>
	    (lll->data_chan_hop > 16) || !lll->interval) {
    14d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    14d4:	b99f      	cbnz	r7, 14fe <ull_periph_setup+0xc6>
{
	/* Reset the advertising disabled callback */
	hdr->disabled_cb = NULL;

	/* Let the advertiser continue with connectable advertising */
	lll->periph.initiated = 0U;
    14d6:	f895 3020 	ldrb.w	r3, [r5, #32]
	hdr->disabled_cb = NULL;
    14da:	2200      	movs	r2, #0
	lll->periph.initiated = 0U;
    14dc:	f362 0300 	bfi	r3, r2, #0, #1
	hdr->disabled_cb = NULL;
    14e0:	f8ca 2014 	str.w	r2, [sl, #20]
	lll->periph.initiated = 0U;
    14e4:	f885 3020 	strb.w	r3, [r5, #32]

	/* Mark for buffer for release */
	rx->type = NODE_RX_TYPE_RELEASE;
    14e8:	2301      	movs	r3, #1
    14ea:	7123      	strb	r3, [r4, #4]
		/* Mark for buffer for release */
		rx->type = NODE_RX_TYPE_RELEASE;
	}

	/* Enqueue connection or CSA event to be release */
	ll_rx_put(link, rx);
    14ec:	4621      	mov	r1, r4
    14ee:	4658      	mov	r0, fp
    14f0:	f017 fd3a 	bl	18f68 <ll_rx_put>
	ll_rx_sched();
    14f4:	f017 fd42 	bl	18f7c <ll_rx_sched>
}
    14f8:	b013      	add	sp, #76	; 0x4c
    14fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	((struct lll_adv *)ftr->param)->conn = NULL;
    14fe:	f8d9 2000 	ldr.w	r2, [r9]
    1502:	930d      	str	r3, [sp, #52]	; 0x34
    1504:	f04f 0800 	mov.w	r8, #0
    1508:	f8c2 8004 	str.w	r8, [r2, #4]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    150c:	f894 1037 	ldrb.w	r1, [r4, #55]	; 0x37
    1510:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
    1514:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    1518:	822a      	strh	r2, [r5, #16]
	conn->periph.sca = pdu_adv->connect_ind.sca;
    151a:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
    151e:	f896 107c 	ldrb.w	r1, [r6, #124]	; 0x7c
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    1522:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1524:	930b      	str	r3, [sp, #44]	; 0x2c
	conn->periph.sca = pdu_adv->connect_ind.sca;
    1526:	0952      	lsrs	r2, r2, #5
    1528:	f362 01c5 	bfi	r1, r2, #3, #3
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    152c:	f240 43e2 	movw	r3, #1250	; 0x4e2
	conn->periph.sca = pdu_adv->connect_ind.sca;
    1530:	f886 107c 	strb.w	r1, [r6, #124]	; 0x7c
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    1534:	435f      	muls	r7, r3
		(((lll_clock_ppm_local_get() +
    1536:	f026 fad2 	bl	27ade <lll_clock_ppm_local_get>
    153a:	900a      	str	r0, [sp, #40]	; 0x28
		   lll_clock_ppm_get(conn->periph.sca)) *
    153c:	f896 007c 	ldrb.w	r0, [r6, #124]	; 0x7c
    1540:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    1544:	f01a fc5a 	bl	1bdfc <lll_clock_ppm_get>
		(((lll_clock_ppm_local_get() +
    1548:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    154a:	4410      	add	r0, r2
		   lll_clock_ppm_get(conn->periph.sca)) *
    154c:	4378      	muls	r0, r7
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    154e:	f500 2074 	add.w	r0, r0, #999424	; 0xf4000
    1552:	4a77      	ldr	r2, [pc, #476]	; (1730 <ull_periph_setup+0x2f8>)
    1554:	f200 203f 	addw	r0, r0, #575	; 0x23f
    1558:	fbb0 f0f2 	udiv	r0, r0, r2
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
    155c:	087a      	lsrs	r2, r7, #1
    155e:	3a96      	subs	r2, #150	; 0x96
    1560:	62aa      	str	r2, [r5, #40]	; 0x28
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
    1562:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
	lll->periph.window_widening_periodic_us =
    1566:	6268      	str	r0, [r5, #36]	; 0x24
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
    1568:	f240 43e2 	movw	r3, #1250	; 0x4e2
    156c:	435a      	muls	r2, r3
    156e:	63aa      	str	r2, [r5, #56]	; 0x38
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    1570:	8f22      	ldrh	r2, [r4, #56]	; 0x38
    1572:	920a      	str	r2, [sp, #40]	; 0x28
    1574:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
	memcpy((void *)&conn->periph.force, &lll->access_addr[0],
    1578:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    157a:	f242 7110 	movw	r1, #10000	; 0x2710
    157e:	fb01 7202 	mla	r2, r1, r2, r7
    1582:	3a01      	subs	r2, #1
    1584:	fbb2 f2f7 	udiv	r2, r2, r7
    1588:	f8a6 2072 	strh.w	r2, [r6, #114]	; 0x72
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    158c:	4a69      	ldr	r2, [pc, #420]	; (1734 <ull_periph_setup+0x2fc>)
	memcpy((void *)&conn->periph.force, &lll->access_addr[0],
    158e:	4619      	mov	r1, r3
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1590:	443a      	add	r2, r7
	memcpy((void *)&conn->periph.force, &lll->access_addr[0],
    1592:	f106 0080 	add.w	r0, r6, #128	; 0x80
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1596:	fbb2 f2f7 	udiv	r2, r2, r7
    159a:	f8a6 2076 	strh.w	r2, [r6, #118]	; 0x76
	memcpy((void *)&conn->periph.force, &lll->access_addr[0],
    159e:	2204      	movs	r2, #4
    15a0:	f022 fc02 	bl	23da8 <memcpy>
	cc->peer_addr_type = peer_addr_type;
    15a4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    15a8:	77a2      	strb	r2, [r4, #30]
	cc->status = 0U;
    15aa:	f44f 7380 	mov.w	r3, #256	; 0x100
    15ae:	83a3      	strh	r3, [r4, #28]
	memcpy(cc->peer_addr, peer_id_addr, BDADDR_SIZE);
    15b0:	a90e      	add	r1, sp, #56	; 0x38
    15b2:	2206      	movs	r2, #6
    15b4:	f104 001f 	add.w	r0, r4, #31
    15b8:	f022 fbf6 	bl	23da8 <memcpy>
	cc->interval = lll->interval;
    15bc:	89eb      	ldrh	r3, [r5, #14]
    15be:	84e3      	strh	r3, [r4, #38]	; 0x26
	cc->latency = lll->latency;
    15c0:	8a2b      	ldrh	r3, [r5, #16]
    15c2:	8523      	strh	r3, [r4, #40]	; 0x28
	cc->sca = conn->periph.sca;
    15c4:	f896 307c 	ldrb.w	r3, [r6, #124]	; 0x7c
	cc->timeout = timeout;
    15c8:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
    15cc:	8562      	strh	r2, [r4, #42]	; 0x2a
	cc->sca = conn->periph.sca;
    15ce:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    15d2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	lll->handle = ll_conn_handle_get(conn);
    15d6:	4630      	mov	r0, r6
    15d8:	f018 fd8e 	bl	1a0f8 <ll_conn_handle_get>
	ll_rx_put(link, rx);
    15dc:	4621      	mov	r1, r4
	lll->handle = ll_conn_handle_get(conn);
    15de:	81a8      	strh	r0, [r5, #12]
	rx->handle = lll->handle;
    15e0:	80e0      	strh	r0, [r4, #6]
	ll_rx_put(link, rx);
    15e2:	4658      	mov	r0, fp
    15e4:	f017 fcc0 	bl	18f68 <ll_rx_put>
	ll_rx_sched();
    15e8:	f017 fcc8 	bl	18f7c <ll_rx_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(0, 0);
    15ec:	4641      	mov	r1, r8
    15ee:	4640      	mov	r0, r8
    15f0:	f026 fa49 	bl	27a86 <lll_radio_rx_ready_delay_get>
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    15f4:	4c50      	ldr	r4, [pc, #320]	; (1738 <ull_periph_setup+0x300>)
	conn->ull.ticks_active_to_start = 0U;
    15f6:	f8c6 8004 	str.w	r8, [r6, #4]
	ready_delay_us = lll_radio_rx_ready_delay_get(0, 0);
    15fa:	4683      	mov	fp, r0
	conn->ull.ticks_prepare_to_start =
    15fc:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    15fe:	f200 4052 	addw	r0, r0, #1106	; 0x452
	conn->ull.ticks_preempt_to_start =
    1602:	e9c6 3802 	strd	r3, r8, [r6, #8]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1606:	fba0 0104 	umull	r0, r1, r0, r4
    160a:	a347      	add	r3, pc, #284	; (adr r3, 1728 <ull_periph_setup+0x2f0>)
    160c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1610:	f7fe fdb6 	bl	180 <__aeabi_uldivmod>
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    1614:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	conn_offset_us = ftr->radio_end_us;
    1616:	f8d9 300c 	ldr.w	r3, [r9, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    161a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    161e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    1622:	fb01 3302 	mla	r3, r1, r2, r3
	conn->ull.ticks_slot =
    1626:	6130      	str	r0, [r6, #16]
	conn_interval_us -= lll->periph.window_widening_periodic_us;
    1628:	6a68      	ldr	r0, [r5, #36]	; 0x24
	conn_offset_us -= EVENT_JITTER_US;
    162a:	f203 41b2 	addw	r1, r3, #1202	; 0x4b2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    162e:	4642      	mov	r2, r8
	conn_interval_us -= lll->periph.window_widening_periodic_us;
    1630:	1a3f      	subs	r7, r7, r0
	conn_offset_us -= ready_delay_us;
    1632:	eba1 0b0b 	sub.w	fp, r1, fp
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    1636:	2001      	movs	r0, #1
    1638:	2102      	movs	r1, #2
    163a:	f015 f9b1 	bl	169a0 <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    163e:	4650      	mov	r0, sl
    1640:	f018 fa76 	bl	19b30 <ull_adv_handle_get>
    1644:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    1646:	4b3d      	ldr	r3, [pc, #244]	; (173c <ull_periph_setup+0x304>)
    1648:	f8cd a000 	str.w	sl, [sp]
    164c:	b2d2      	uxtb	r2, r2
    164e:	2101      	movs	r1, #1
    1650:	4640      	mov	r0, r8
    1652:	f015 ff99 	bl	17588 <ticker_stop>
	ticker_op_stop_adv_cb(ticker_status, adv);
    1656:	4651      	mov	r1, sl
    1658:	f019 fdd4 	bl	1b204 <ticker_op_stop_adv_cb>
	if (adv->lll.is_hdcd) {
    165c:	f89a 3024 	ldrb.w	r3, [sl, #36]	; 0x24
    1660:	07db      	lsls	r3, r3, #31
    1662:	d507      	bpl.n	1674 <ull_periph_setup+0x23c>
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    1664:	2201      	movs	r2, #1
    1666:	f8cd 8000 	str.w	r8, [sp]
    166a:	4643      	mov	r3, r8
    166c:	4611      	mov	r1, r2
    166e:	4640      	mov	r0, r8
    1670:	f015 ff8a 	bl	17588 <ticker_stop>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1674:	4630      	mov	r0, r6
    1676:	f018 fd3f 	bl	1a0f8 <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    167a:	fba7 7804 	umull	r7, r8, r7, r4
    167e:	a32a      	add	r3, pc, #168	; (adr r3, 1728 <ull_periph_setup+0x2f0>)
    1680:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1684:	4605      	mov	r5, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    1686:	4641      	mov	r1, r8
    1688:	4638      	mov	r0, r7
    168a:	f7fe fd79 	bl	180 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    168e:	f8d9 3008 	ldr.w	r3, [r9, #8]
    1692:	f1a3 093a 	sub.w	r9, r3, #58	; 0x3a
    1696:	f240 13ab 	movw	r3, #427	; 0x1ab
    169a:	9308      	str	r3, [sp, #32]
    169c:	4b28      	ldr	r3, [pc, #160]	; (1740 <ull_periph_setup+0x308>)
    169e:	e9cd 6306 	strd	r6, r3, [sp, #24]
    16a2:	4b28      	ldr	r3, [pc, #160]	; (1744 <ull_periph_setup+0x30c>)
    16a4:	9305      	str	r3, [sp, #20]
    16a6:	6933      	ldr	r3, [r6, #16]
    16a8:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    16aa:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
    16ae:	4826      	ldr	r0, [pc, #152]	; (1748 <ull_periph_setup+0x310>)
    16b0:	2307      	movs	r3, #7
    16b2:	fba6 0100 	umull	r0, r1, r6, r0
    16b6:	1a38      	subs	r0, r7, r0
    16b8:	fb03 1106 	mla	r1, r3, r6, r1
    16bc:	eb68 0101 	sbc.w	r1, r8, r1
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    16c0:	f04f 0a00 	mov.w	sl, #0
				     HAL_TICKER_REMAINDER(conn_interval_us),
    16c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    16c8:	2300      	movs	r3, #0
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    16ca:	f8cd a00c 	str.w	sl, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    16ce:	f7fe fd57 	bl	180 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    16d2:	a315      	add	r3, pc, #84	; (adr r3, 1728 <ull_periph_setup+0x2f0>)
    16d4:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    16d8:	e9cd 6001 	strd	r6, r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    16dc:	fbab 0104 	umull	r0, r1, fp, r4
    16e0:	f7fe fd4e 	bl	180 <__aeabi_uldivmod>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    16e4:	3505      	adds	r5, #5
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    16e6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    16ea:	b2ed      	uxtb	r5, r5
    16ec:	9000      	str	r0, [sp, #0]
    16ee:	464b      	mov	r3, r9
    16f0:	462a      	mov	r2, r5
    16f2:	2101      	movs	r1, #1
    16f4:	4650      	mov	r0, sl
    16f6:	f025 fe0c 	bl	27312 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    16fa:	f030 0302 	bics.w	r3, r0, #2
    16fe:	d00c      	beq.n	171a <ull_periph_setup+0x2e2>
    1700:	4a12      	ldr	r2, [pc, #72]	; (174c <ull_periph_setup+0x314>)
    1702:	4913      	ldr	r1, [pc, #76]	; (1750 <ull_periph_setup+0x318>)
    1704:	4813      	ldr	r0, [pc, #76]	; (1754 <ull_periph_setup+0x31c>)
    1706:	f44f 73d6 	mov.w	r3, #428	; 0x1ac
    170a:	f01f fdaf 	bl	2126c <printk>
    170e:	4040      	eors	r0, r0
    1710:	f380 8811 	msr	BASEPRI, r0
    1714:	f04f 0003 	mov.w	r0, #3
    1718:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    171a:	2201      	movs	r2, #1
    171c:	2102      	movs	r1, #2
    171e:	4610      	mov	r0, r2
    1720:	f015 f93e 	bl	169a0 <mayfly_enable>
    1724:	e6e8      	b.n	14f8 <ull_periph_setup+0xc0>
    1726:	bf00      	nop
    1728:	1afd498d 	.word	0x1afd498d
    172c:	00000007 	.word	0x00000007
    1730:	000f4240 	.word	0x000f4240
    1734:	026259ff 	.word	0x026259ff
    1738:	3b9aca00 	.word	0x3b9aca00
    173c:	0001b205 	.word	0x0001b205
    1740:	0001b1d9 	.word	0x0001b1d9
    1744:	0001b23d 	.word	0x0001b23d
    1748:	1afd498d 	.word	0x1afd498d
    174c:	0002f76d 	.word	0x0002f76d
    1750:	0002f6be 	.word	0x0002f6be
    1754:	0002b804 	.word	0x0002b804

00001758 <nrf_flash_sync_exe>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
	_ticker_sync_context.slot = duration;
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
    1758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    175c:	b08f      	sub	sp, #60	; 0x3c
			      /* (MAYFLY_CALL_ID_PROGRAM) */
			   ticker_id, /* flash ticker id */
			   ticker_ticks_now_get(), /* current tick */
			   0, /* first int. immediately */
			   /* period */
			   HAL_TICKER_US_TO_TICKS(
    175e:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 1838 <nrf_flash_sync_exe+0xe0>
{
    1762:	900a      	str	r0, [sp, #40]	; 0x28
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
    1764:	f10d 0137 	add.w	r1, sp, #55	; 0x37
    1768:	f10d 0036 	add.w	r0, sp, #54	; 0x36
    176c:	f025 fe87 	bl	2747e <ll_timeslice_ticker_id_get>
			   HAL_TICKER_US_TO_TICKS(
    1770:	4f32      	ldr	r7, [pc, #200]	; (183c <nrf_flash_sync_exe+0xe4>)
	err = ticker_start(instance_index,
    1772:	f89d a036 	ldrb.w	sl, [sp, #54]	; 0x36
    1776:	f89d b037 	ldrb.w	fp, [sp, #55]	; 0x37
    177a:	f025 fdfd 	bl	27378 <ticker_ticks_now_get>
			   HAL_TICKER_US_TO_TICKS(
    177e:	f8d8 4000 	ldr.w	r4, [r8]
    1782:	fba4 5407 	umull	r5, r4, r4, r7
    1786:	a32a      	add	r3, pc, #168	; (adr r3, 1830 <nrf_flash_sync_exe+0xd8>)
    1788:	e9d3 2300 	ldrd	r2, r3, [r3]
	err = ticker_start(instance_index,
    178c:	4681      	mov	r9, r0
			   HAL_TICKER_US_TO_TICKS(
    178e:	4621      	mov	r1, r4
    1790:	4628      	mov	r0, r5
    1792:	f7fe fcf5 	bl	180 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
    1796:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			   HAL_TICKER_US_TO_TICKS(
    1798:	900b      	str	r0, [sp, #44]	; 0x2c
				_ticker_sync_context.interval),
			   /* period remainder */
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
			   0, /* lazy, voluntary skips */
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    179a:	f8d8 0004 	ldr.w	r0, [r8, #4]
	err = ticker_start(instance_index,
    179e:	9306      	str	r3, [sp, #24]
    17a0:	4b27      	ldr	r3, [pc, #156]	; (1840 <nrf_flash_sync_exe+0xe8>)
    17a2:	9305      	str	r3, [sp, #20]
    17a4:	2600      	movs	r6, #0
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    17a6:	a322      	add	r3, pc, #136	; (adr r3, 1830 <nrf_flash_sync_exe+0xd8>)
    17a8:	e9d3 2300 	ldrd	r2, r3, [r3]
    17ac:	fba0 0107 	umull	r0, r1, r0, r7
	err = ticker_start(instance_index,
    17b0:	e9cd 6607 	strd	r6, r6, [sp, #28]
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    17b4:	f7fe fce4 	bl	180 <__aeabi_uldivmod>
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
    17b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	err = ticker_start(instance_index,
    17ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    17be:	e9cd 6003 	strd	r6, r0, [sp, #12]
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
    17c2:	4820      	ldr	r0, [pc, #128]	; (1844 <nrf_flash_sync_exe+0xec>)
    17c4:	f023 477f 	bic.w	r7, r3, #4278190080	; 0xff000000
    17c8:	fba7 0100 	umull	r0, r1, r7, r0
    17cc:	2307      	movs	r3, #7
    17ce:	1a28      	subs	r0, r5, r0
    17d0:	fb03 1107 	mla	r1, r3, r7, r1
    17d4:	eb64 0101 	sbc.w	r1, r4, r1
    17d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    17dc:	2300      	movs	r3, #0
    17de:	f7fe fccf 	bl	180 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
    17e2:	9600      	str	r6, [sp, #0]
    17e4:	e9cd 7001 	strd	r7, r0, [sp, #4]
    17e8:	464b      	mov	r3, r9
    17ea:	465a      	mov	r2, fp
    17ec:	2103      	movs	r1, #3
    17ee:	4650      	mov	r0, sl
    17f0:	f025 fd8f 	bl	27312 <ticker_start>
			   time_slot_callback_prepare,
			   op_desc,
			   NULL, /* no op callback */
			   NULL);

	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
    17f4:	f030 0402 	bics.w	r4, r0, #2
    17f8:	d116      	bne.n	1828 <nrf_flash_sync_exe+0xd0>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    17fa:	4a13      	ldr	r2, [pc, #76]	; (1848 <nrf_flash_sync_exe+0xf0>)
    17fc:	4813      	ldr	r0, [pc, #76]	; (184c <nrf_flash_sync_exe+0xf4>)
    17fe:	2300      	movs	r3, #0
    1800:	f01e fc2e 	bl	20060 <z_impl_k_sem_take>
		result = -ECANCELED;
	} else if (k_sem_take(&sem_sync, K_MSEC(FLASH_TIMEOUT_MS)) != 0) {
    1804:	b168      	cbz	r0, 1822 <nrf_flash_sync_exe+0xca>
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
    1806:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
    180a:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
    180e:	9400      	str	r4, [sp, #0]
    1810:	4623      	mov	r3, r4
    1812:	2103      	movs	r1, #3
    1814:	f015 feb8 	bl	17588 <ticker_stop>
		/* Stop any scheduled jobs */
		_ticker_stop(instance_index, 3, ticker_id);

		/* wait for operation's complete overrun*/
		result = -ETIMEDOUT;
    1818:	f06f 0073 	mvn.w	r0, #115	; 0x73
	} else {
		result = _ticker_sync_context.result;
	}

	return result;
}
    181c:	b00f      	add	sp, #60	; 0x3c
    181e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		result = _ticker_sync_context.result;
    1822:	f8d8 000c 	ldr.w	r0, [r8, #12]
    1826:	e7f9      	b.n	181c <nrf_flash_sync_exe+0xc4>
		result = -ECANCELED;
    1828:	f06f 008b 	mvn.w	r0, #139	; 0x8b
	return result;
    182c:	e7f6      	b.n	181c <nrf_flash_sync_exe+0xc4>
    182e:	bf00      	nop
    1830:	1afd498d 	.word	0x1afd498d
    1834:	00000007 	.word	0x00000007
    1838:	200034fc 	.word	0x200034fc
    183c:	3b9aca00 	.word	0x3b9aca00
    1840:	0001e8c5 	.word	0x0001e8c5
    1844:	1afd498d 	.word	0x1afd498d
    1848:	000b7b44 	.word	0x000b7b44
    184c:	2000350c 	.word	0x2000350c

00001850 <nrf_flash_sync_check_time_limit>:
{
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
    1850:	b538      	push	{r3, r4, r5, lr}
	uint32_t ticks_diff;

	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
    1852:	4d0f      	ldr	r5, [pc, #60]	; (1890 <nrf_flash_sync_check_time_limit+0x40>)
{
    1854:	4604      	mov	r4, r0
	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
    1856:	f025 fd8f 	bl	27378 <ticker_ticks_now_get>
    185a:	68a9      	ldr	r1, [r5, #8]
    185c:	f025 fd8e 	bl	2737c <ticker_ticks_diff_get>
					   _ticker_sync_context.ticks_begin);
	if (ticks_diff + ticks_diff/iteration >
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
    1860:	6869      	ldr	r1, [r5, #4]
	if (ticks_diff + ticks_diff/iteration >
    1862:	fbb0 f4f4 	udiv	r4, r0, r4
    1866:	4404      	add	r4, r0
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
    1868:	480a      	ldr	r0, [pc, #40]	; (1894 <nrf_flash_sync_check_time_limit+0x44>)
    186a:	a307      	add	r3, pc, #28	; (adr r3, 1888 <nrf_flash_sync_check_time_limit+0x38>)
    186c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1870:	fba1 0100 	umull	r0, r1, r1, r0
    1874:	f7fe fc84 	bl	180 <__aeabi_uldivmod>
    1878:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return true;
	}

	return false;
}
    187c:	4284      	cmp	r4, r0
    187e:	bf94      	ite	ls
    1880:	2000      	movls	r0, #0
    1882:	2001      	movhi	r0, #1
    1884:	bd38      	pop	{r3, r4, r5, pc}
    1886:	bf00      	nop
    1888:	1afd498d 	.word	0x1afd498d
    188c:	00000007 	.word	0x00000007
    1890:	200034fc 	.word	0x200034fc
    1894:	3b9aca00 	.word	0x3b9aca00

00001898 <main>:
//==============================================================================
// Arduino style engine
//==============================================================================

  void main(void)
  {
    1898:	b508      	push	{r3, lr}
    msg = BL_Y"I'm alive!"BL_0;
    189a:	4c0d      	ldr	r4, [pc, #52]	; (18d0 <main+0x38>)
      bl_prt("[%03d] %s\n",n++,msg);  // print inviting message
    189c:	4d0d      	ldr	r5, [pc, #52]	; (18d4 <main+0x3c>)
    189e:	4e0e      	ldr	r6, [pc, #56]	; (18d8 <main+0x40>)
    bl_init(NULL,1);                   // init Bluccino
    18a0:	2101      	movs	r1, #1
    18a2:	2000      	movs	r0, #0
    18a4:	f000 faa4 	bl	1df0 <bl_init>
    msg = BL_Y"I'm alive!"BL_0;
    18a8:	4b0c      	ldr	r3, [pc, #48]	; (18dc <main+0x44>)
    18aa:	6023      	str	r3, [r4, #0]
    init();                            // app init

    for(;;)
    {
      bl_loop();                       // Bluccino loop
    18ac:	f01f fc26 	bl	210fc <bl_loop>
    if (bl_dbg(1))                    // this is to print the timing header
    18b0:	2001      	movs	r0, #1
    18b2:	f000 fab3 	bl	1e1c <bl_dbg>
    18b6:	b130      	cbz	r0, 18c6 <main+0x2e>
      bl_prt("[%03d] %s\n",n++,msg);  // print inviting message
    18b8:	6829      	ldr	r1, [r5, #0]
    18ba:	6822      	ldr	r2, [r4, #0]
    18bc:	1c4b      	adds	r3, r1, #1
    18be:	4630      	mov	r0, r6
    18c0:	602b      	str	r3, [r5, #0]
    18c2:	f01f fcd3 	bl	2126c <printk>
    bl_sleep(1000);                   // sleep 1000 ms
    18c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    18ca:	f01f fc04 	bl	210d6 <bl_sleep>
  }
    18ce:	e7ed      	b.n	18ac <main+0x14>
    18d0:	20001f90 	.word	0x20001f90
    18d4:	200004e8 	.word	0x200004e8
    18d8:	0002a868 	.word	0x0002a868
    18dc:	0002a854 	.word	0x0002a854

000018e0 <gen_onoff_status>:
}

static int gen_onoff_status(struct bt_mesh_model *model,
			    struct bt_mesh_msg_ctx *ctx,
			    struct net_buf_simple *buf)
{
    18e0:	b570      	push	{r4, r5, r6, lr}
    18e2:	4606      	mov	r6, r0
	uint8_t	state;

	state = net_buf_simple_pull_u8(buf);
    18e4:	4610      	mov	r0, r2
{
    18e6:	460c      	mov	r4, r1
	state = net_buf_simple_pull_u8(buf);
    18e8:	f026 fd2e 	bl	28348 <net_buf_simple_pull_u8>
    18ec:	4605      	mov	r5, r0

	printk("Node 0x%04x OnOff status from 0x%04x with state 0x%02x\n",
	       bt_mesh_model_elem(model)->addr, ctx->addr, state);
    18ee:	4630      	mov	r0, r6
    18f0:	f00e fc46 	bl	10180 <bt_mesh_model_elem>
	printk("Node 0x%04x OnOff status from 0x%04x with state 0x%02x\n",
    18f4:	88a2      	ldrh	r2, [r4, #4]
    18f6:	8801      	ldrh	r1, [r0, #0]
    18f8:	4802      	ldr	r0, [pc, #8]	; (1904 <gen_onoff_status+0x24>)
    18fa:	462b      	mov	r3, r5
    18fc:	f01f fcb6 	bl	2126c <printk>

	return 0;
}
    1900:	2000      	movs	r0, #0
    1902:	bd70      	pop	{r4, r5, r6, pc}
    1904:	0002a873 	.word	0x0002a873

00001908 <prov_complete>:
	printk("OOB String %s\n", str);
	return 0;
}

static void prov_complete(uint16_t net_idx, uint16_t addr)
{
    1908:	b510      	push	{r4, lr}
	printk("provisioning complete for net_idx 0x%04x addr 0x%04x\n",
    190a:	460a      	mov	r2, r1
{
    190c:	460c      	mov	r4, r1
	printk("provisioning complete for net_idx 0x%04x addr 0x%04x\n",
    190e:	4601      	mov	r1, r0
    1910:	4802      	ldr	r0, [pc, #8]	; (191c <prov_complete+0x14>)
    1912:	f01f fcab 	bl	2126c <printk>
	       net_idx, addr);
	primary_addr = addr;
    1916:	4b02      	ldr	r3, [pc, #8]	; (1920 <prov_complete+0x18>)
    1918:	801c      	strh	r4, [r3, #0]
	primary_net_idx = net_idx;
}
    191a:	bd10      	pop	{r4, pc}
    191c:	0002a8ab 	.word	0x0002a8ab
    1920:	200036cc 	.word	0x200036cc

00001924 <output_string>:
{
    1924:	b508      	push	{r3, lr}
    1926:	4601      	mov	r1, r0
	printk("OOB String %s\n", str);
    1928:	4802      	ldr	r0, [pc, #8]	; (1934 <output_string+0x10>)
    192a:	f01f fc9f 	bl	2126c <printk>
}
    192e:	2000      	movs	r0, #0
    1930:	bd08      	pop	{r3, pc}
    1932:	bf00      	nop
    1934:	0002a8e1 	.word	0x0002a8e1

00001938 <output_number>:
{
    1938:	b508      	push	{r3, lr}
	printk("OOB Number %06u\n", number);
    193a:	4802      	ldr	r0, [pc, #8]	; (1944 <output_number+0xc>)
    193c:	f01f fc96 	bl	2126c <printk>
}
    1940:	2000      	movs	r0, #0
    1942:	bd08      	pop	{r3, pc}
    1944:	0002a8f0 	.word	0x0002a8f0

00001948 <gen_onoff_get>:
{
    1948:	b570      	push	{r4, r5, r6, lr}
    194a:	b088      	sub	sp, #32
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
    194c:	ab03      	add	r3, sp, #12
    194e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
    1952:	e9cd 2306 	strd	r2, r3, [sp, #24]
    1956:	9305      	str	r3, [sp, #20]
	struct onoff_state *onoff_state = model->user_data;
    1958:	69c6      	ldr	r6, [r0, #28]
{
    195a:	460d      	mov	r5, r1
    195c:	4604      	mov	r4, r0
	       bt_mesh_model_elem(model)->addr, onoff_state->current);
    195e:	f00e fc0f 	bl	10180 <bt_mesh_model_elem>
	printk("addr 0x%04x onoff 0x%02x\n",
    1962:	7832      	ldrb	r2, [r6, #0]
    1964:	8801      	ldrh	r1, [r0, #0]
    1966:	480d      	ldr	r0, [pc, #52]	; (199c <gen_onoff_get+0x54>)
    1968:	f01f fc80 	bl	2126c <printk>
	bt_mesh_model_msg_init(&msg, BT_MESH_MODEL_OP_GEN_ONOFF_STATUS);
    196c:	f248 2104 	movw	r1, #33284	; 0x8204
    1970:	a805      	add	r0, sp, #20
    1972:	f024 fdc9 	bl	26508 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, onoff_state->current);
    1976:	7831      	ldrb	r1, [r6, #0]
    1978:	a805      	add	r0, sp, #20
    197a:	f026 fc74 	bl	28266 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
    197e:	2300      	movs	r3, #0
    1980:	9300      	str	r3, [sp, #0]
    1982:	aa05      	add	r2, sp, #20
    1984:	4629      	mov	r1, r5
    1986:	4620      	mov	r0, r4
    1988:	f00e feb8 	bl	106fc <bt_mesh_model_send>
    198c:	b110      	cbz	r0, 1994 <gen_onoff_get+0x4c>
		printk("Unable to send On Off Status response\n");
    198e:	4804      	ldr	r0, [pc, #16]	; (19a0 <gen_onoff_get+0x58>)
    1990:	f01f fc6c 	bl	2126c <printk>
}
    1994:	2000      	movs	r0, #0
    1996:	b008      	add	sp, #32
    1998:	bd70      	pop	{r4, r5, r6, pc}
    199a:	bf00      	nop
    199c:	0002a901 	.word	0x0002a901
    19a0:	0002a91b 	.word	0x0002a91b

000019a4 <button_cnt_timer>:
/*
 * Button Count Timer Worker
 */

static void button_cnt_timer(struct k_timer *work)
{
    19a4:	b510      	push	{r4, lr}
	struct sw *button_sw = CONTAINER_OF(work, struct sw, button_timer);

	button_sw->onoff_state = button_press_cnt == 1U ? 1 : 0;
    19a6:	4c08      	ldr	r4, [pc, #32]	; (19c8 <button_cnt_timer+0x24>)
    19a8:	7821      	ldrb	r1, [r4, #0]
    19aa:	1e4b      	subs	r3, r1, #1
    19ac:	425a      	negs	r2, r3
    19ae:	415a      	adcs	r2, r3
    19b0:	f800 2c17 	strb.w	r2, [r0, #-23]
	printk("button_press_cnt 0x%02x onoff_state 0x%02x\n",
    19b4:	4805      	ldr	r0, [pc, #20]	; (19cc <button_cnt_timer+0x28>)
    19b6:	f01f fc59 	bl	2126c <printk>
	       button_press_cnt, button_sw->onoff_state);
	button_press_cnt = 0U;
    19ba:	2300      	movs	r3, #0
    19bc:	7023      	strb	r3, [r4, #0]
	k_work_submit(&sw.button_work);
    19be:	4804      	ldr	r0, [pc, #16]	; (19d0 <button_cnt_timer+0x2c>)
}
    19c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_submit(&sw.button_work);
    19c4:	f01e bc92 	b.w	202ec <k_work_submit>
    19c8:	2000372a 	.word	0x2000372a
    19cc:	0002a942 	.word	0x0002a942
    19d0:	2000132c 	.word	0x2000132c

000019d4 <bt_ready>:
/*
 * Bluetooth Ready Callback
 */

static void bt_ready(int err)
{
    19d4:	b510      	push	{r4, lr}
	struct bt_le_oob oob;

	if (err) {
    19d6:	4601      	mov	r1, r0
{
    19d8:	b08a      	sub	sp, #40	; 0x28
	if (err) {
    19da:	b128      	cbz	r0, 19e8 <bt_ready+0x14>
		printk("Bluetooth init failed (err %d)\n", err);
    19dc:	4815      	ldr	r0, [pc, #84]	; (1a34 <bt_ready+0x60>)
	}

	bt_mesh_prov_enable(BT_MESH_PROV_GATT | BT_MESH_PROV_ADV);

	printk("Mesh initialized\n");
}
    19de:	b00a      	add	sp, #40	; 0x28
    19e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Initializing mesh failed (err %d)\n", err);
    19e4:	f01f bc42 	b.w	2126c <printk>
	printk("Bluetooth initialized\n");
    19e8:	4813      	ldr	r0, [pc, #76]	; (1a38 <bt_ready+0x64>)
    19ea:	f01f fc3f 	bl	2126c <printk>
	err = bt_mesh_init(&prov, &comp);
    19ee:	4913      	ldr	r1, [pc, #76]	; (1a3c <bt_ready+0x68>)
    19f0:	4813      	ldr	r0, [pc, #76]	; (1a40 <bt_ready+0x6c>)
    19f2:	f023 ff3e 	bl	25872 <bt_mesh_init>
	if (err) {
    19f6:	4604      	mov	r4, r0
    19f8:	b110      	cbz	r0, 1a00 <bt_ready+0x2c>
		printk("Initializing mesh failed (err %d)\n", err);
    19fa:	4601      	mov	r1, r0
    19fc:	4811      	ldr	r0, [pc, #68]	; (1a44 <bt_ready+0x70>)
    19fe:	e7ee      	b.n	19de <bt_ready+0xa>
		settings_load();
    1a00:	f020 fe70 	bl	226e4 <settings_load>
	if (bt_le_oob_get_local(BT_ID_DEFAULT, &oob)) {
    1a04:	4669      	mov	r1, sp
    1a06:	4620      	mov	r0, r4
    1a08:	f005 fb18 	bl	703c <bt_le_oob_get_local>
    1a0c:	b150      	cbz	r0, 1a24 <bt_ready+0x50>
		printk("Identity Address unavailable\n");
    1a0e:	480e      	ldr	r0, [pc, #56]	; (1a48 <bt_ready+0x74>)
    1a10:	f01f fc2c 	bl	2126c <printk>
	bt_mesh_prov_enable(BT_MESH_PROV_GATT | BT_MESH_PROV_ADV);
    1a14:	2003      	movs	r0, #3
    1a16:	f012 fc9f 	bl	14358 <bt_mesh_prov_enable>
	printk("Mesh initialized\n");
    1a1a:	480c      	ldr	r0, [pc, #48]	; (1a4c <bt_ready+0x78>)
    1a1c:	f01f fc26 	bl	2126c <printk>
}
    1a20:	b00a      	add	sp, #40	; 0x28
    1a22:	bd10      	pop	{r4, pc}
		memcpy(dev_uuid, oob.addr.a.val, 6);
    1a24:	2206      	movs	r2, #6
    1a26:	f10d 0101 	add.w	r1, sp, #1
    1a2a:	4809      	ldr	r0, [pc, #36]	; (1a50 <bt_ready+0x7c>)
    1a2c:	f022 f9bc 	bl	23da8 <memcpy>
    1a30:	e7f0      	b.n	1a14 <bt_ready+0x40>
    1a32:	bf00      	nop
    1a34:	0002a96e 	.word	0x0002a96e
    1a38:	0002a98e 	.word	0x0002a98e
    1a3c:	00029bb8 	.word	0x00029bb8
    1a40:	00029c10 	.word	0x00029c10
    1a44:	0002a9a5 	.word	0x0002a9a5
    1a48:	0002a9c8 	.word	0x0002a9c8
    1a4c:	0002a9e6 	.word	0x0002a9e6
    1a50:	20001008 	.word	0x20001008

00001a54 <gen_onoff_set_unack>:
	struct net_buf_simple *msg = model->pub->msg;
    1a54:	6883      	ldr	r3, [r0, #8]
{
    1a56:	b570      	push	{r4, r5, r6, lr}
	struct onoff_state *onoff_state = model->user_data;
    1a58:	69c4      	ldr	r4, [r0, #28]
	struct net_buf_simple *msg = model->pub->msg;
    1a5a:	691e      	ldr	r6, [r3, #16]
{
    1a5c:	4605      	mov	r5, r0
	onoff_state->current = net_buf_simple_pull_u8(buf);
    1a5e:	4610      	mov	r0, r2
    1a60:	f026 fc72 	bl	28348 <net_buf_simple_pull_u8>
    1a64:	7020      	strb	r0, [r4, #0]
	       bt_mesh_model_elem(model)->addr, onoff_state->current);
    1a66:	4628      	mov	r0, r5
    1a68:	f00e fb8a 	bl	10180 <bt_mesh_model_elem>
	printk("addr 0x%02x state 0x%02x\n",
    1a6c:	7822      	ldrb	r2, [r4, #0]
    1a6e:	8801      	ldrh	r1, [r0, #0]
    1a70:	4819      	ldr	r0, [pc, #100]	; (1ad8 <gen_onoff_set_unack+0x84>)
    1a72:	f01f fbfb 	bl	2126c <printk>

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    1a76:	78a2      	ldrb	r2, [r4, #2]
	gpio_pin_set(onoff_state->led_device, onoff_state->led_gpio_pin,
    1a78:	6860      	ldr	r0, [r4, #4]
    1a7a:	7823      	ldrb	r3, [r4, #0]
    1a7c:	2101      	movs	r1, #1
    1a7e:	4091      	lsls	r1, r2
    1a80:	6902      	ldr	r2, [r0, #16]
    1a82:	6812      	ldr	r2, [r2, #0]
    1a84:	4211      	tst	r1, r2
    1a86:	d003      	beq.n	1a90 <gen_onoff_set_unack+0x3c>
	if (value != 0)	{
    1a88:	b123      	cbz	r3, 1a94 <gen_onoff_set_unack+0x40>
	return api->port_clear_bits_raw(port, pins);
    1a8a:	6883      	ldr	r3, [r0, #8]
    1a8c:	691b      	ldr	r3, [r3, #16]
    1a8e:	e003      	b.n	1a98 <gen_onoff_set_unack+0x44>
	if (value != 0)	{
    1a90:	2b00      	cmp	r3, #0
    1a92:	d0fa      	beq.n	1a8a <gen_onoff_set_unack+0x36>
	return api->port_set_bits_raw(port, pins);
    1a94:	6883      	ldr	r3, [r0, #8]
    1a96:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    1a98:	4798      	blx	r3
	if (onoff_state->previous != onoff_state->current &&
    1a9a:	7861      	ldrb	r1, [r4, #1]
    1a9c:	7822      	ldrb	r2, [r4, #0]
    1a9e:	4291      	cmp	r1, r2
    1aa0:	d018      	beq.n	1ad4 <gen_onoff_set_unack+0x80>
	    model->pub->addr != BT_MESH_ADDR_UNASSIGNED) {
    1aa2:	68ab      	ldr	r3, [r5, #8]
	if (onoff_state->previous != onoff_state->current &&
    1aa4:	889b      	ldrh	r3, [r3, #4]
    1aa6:	b1ab      	cbz	r3, 1ad4 <gen_onoff_set_unack+0x80>
		printk("publish last 0x%02x cur 0x%02x\n",
    1aa8:	480c      	ldr	r0, [pc, #48]	; (1adc <gen_onoff_set_unack+0x88>)
    1aaa:	f01f fbdf 	bl	2126c <printk>
		onoff_state->previous = onoff_state->current;
    1aae:	7823      	ldrb	r3, [r4, #0]
    1ab0:	7063      	strb	r3, [r4, #1]
		bt_mesh_model_msg_init(msg,
    1ab2:	f248 2104 	movw	r1, #33284	; 0x8204
    1ab6:	4630      	mov	r0, r6
    1ab8:	f024 fd26 	bl	26508 <bt_mesh_model_msg_init>
		net_buf_simple_add_u8(msg, onoff_state->current);
    1abc:	7821      	ldrb	r1, [r4, #0]
    1abe:	4630      	mov	r0, r6
    1ac0:	f026 fbd1 	bl	28266 <net_buf_simple_add_u8>
		err = bt_mesh_model_publish(model);
    1ac4:	4628      	mov	r0, r5
    1ac6:	f00e fe43 	bl	10750 <bt_mesh_model_publish>
		if (err) {
    1aca:	4601      	mov	r1, r0
    1acc:	b110      	cbz	r0, 1ad4 <gen_onoff_set_unack+0x80>
			printk("bt_mesh_model_publish err %d\n", err);
    1ace:	4804      	ldr	r0, [pc, #16]	; (1ae0 <gen_onoff_set_unack+0x8c>)
    1ad0:	f01f fbcc 	bl	2126c <printk>
}
    1ad4:	2000      	movs	r0, #0
    1ad6:	bd70      	pop	{r4, r5, r6, pc}
    1ad8:	0002a9f8 	.word	0x0002a9f8
    1adc:	0002aa12 	.word	0x0002aa12
    1ae0:	0002aa32 	.word	0x0002aa32

00001ae4 <button_pressed_worker>:
{
    1ae4:	b570      	push	{r4, r5, r6, lr}
	if (primary_addr == BT_MESH_ADDR_UNASSIGNED) {
    1ae6:	4a25      	ldr	r2, [pc, #148]	; (1b7c <button_pressed_worker+0x98>)
	uint8_t sw_idx = sw->sw_num;
    1ae8:	f810 3c04 	ldrb.w	r3, [r0, #-4]
	if (primary_addr == BT_MESH_ADDR_UNASSIGNED) {
    1aec:	8812      	ldrh	r2, [r2, #0]
{
    1aee:	b088      	sub	sp, #32
    1af0:	4604      	mov	r4, r0
	if (primary_addr == BT_MESH_ADDR_UNASSIGNED) {
    1af2:	b9ca      	cbnz	r2, 1b28 <button_pressed_worker+0x44>
	mod_srv = mod_srv_sw[sw_idx];
    1af4:	4922      	ldr	r1, [pc, #136]	; (1b80 <button_pressed_worker+0x9c>)
		struct bt_mesh_msg_ctx ctx = {
    1af6:	9207      	str	r2, [sp, #28]
	mod_srv = mod_srv_sw[sw_idx];
    1af8:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
		NET_BUF_SIMPLE_DEFINE(msg, 1);
    1afc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    1b00:	a901      	add	r1, sp, #4
    1b02:	e9cd 0103 	strd	r0, r1, [sp, #12]
    1b06:	9102      	str	r1, [sp, #8]
		net_buf_simple_add_u8(&msg, sw->onoff_state);
    1b08:	a802      	add	r0, sp, #8
    1b0a:	f814 1c03 	ldrb.w	r1, [r4, #-3]
		struct bt_mesh_msg_ctx ctx = {
    1b0e:	e9cd 2205 	strd	r2, r2, [sp, #20]
			.addr = sw_idx + primary_addr,
    1b12:	f8ad 3018 	strh.w	r3, [sp, #24]
		net_buf_simple_add_u8(&msg, sw->onoff_state);
    1b16:	f026 fba6 	bl	28266 <net_buf_simple_add_u8>
		(void)gen_onoff_set_unack(mod_srv, &ctx, &msg);
    1b1a:	aa02      	add	r2, sp, #8
    1b1c:	a905      	add	r1, sp, #20
    1b1e:	4628      	mov	r0, r5
    1b20:	f7ff ff98 	bl	1a54 <gen_onoff_set_unack>
}
    1b24:	b008      	add	sp, #32
    1b26:	bd70      	pop	{r4, r5, r6, pc}
	mod_cli = mod_cli_sw[sw_idx];
    1b28:	4a16      	ldr	r2, [pc, #88]	; (1b84 <button_pressed_worker+0xa0>)
    1b2a:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
	pub_cli = mod_cli->pub;
    1b2e:	68b5      	ldr	r5, [r6, #8]
	if (pub_cli->addr == BT_MESH_ADDR_UNASSIGNED) {
    1b30:	88a9      	ldrh	r1, [r5, #4]
    1b32:	2900      	cmp	r1, #0
    1b34:	d0f6      	beq.n	1b24 <button_pressed_worker+0x40>
	printk("publish to 0x%04x onoff 0x%04x sw_idx 0x%04x\n",
    1b36:	f810 2c03 	ldrb.w	r2, [r0, #-3]
    1b3a:	4813      	ldr	r0, [pc, #76]	; (1b88 <button_pressed_worker+0xa4>)
    1b3c:	f01f fb96 	bl	2126c <printk>
	bt_mesh_model_msg_init(pub_cli->msg,
    1b40:	6928      	ldr	r0, [r5, #16]
    1b42:	f248 2102 	movw	r1, #33282	; 0x8202
    1b46:	f024 fcdf 	bl	26508 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(pub_cli->msg, sw->onoff_state);
    1b4a:	f814 1c03 	ldrb.w	r1, [r4, #-3]
    1b4e:	6928      	ldr	r0, [r5, #16]
    1b50:	f026 fb89 	bl	28266 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(pub_cli->msg, trans_id++);
    1b54:	4b0d      	ldr	r3, [pc, #52]	; (1b8c <button_pressed_worker+0xa8>)
    1b56:	6928      	ldr	r0, [r5, #16]
    1b58:	7819      	ldrb	r1, [r3, #0]
    1b5a:	1c4a      	adds	r2, r1, #1
    1b5c:	701a      	strb	r2, [r3, #0]
    1b5e:	f026 fb82 	bl	28266 <net_buf_simple_add_u8>
	err = bt_mesh_model_publish(mod_cli);
    1b62:	4630      	mov	r0, r6
    1b64:	f00e fdf4 	bl	10750 <bt_mesh_model_publish>
	if (err) {
    1b68:	4601      	mov	r1, r0
    1b6a:	2800      	cmp	r0, #0
    1b6c:	d0da      	beq.n	1b24 <button_pressed_worker+0x40>
		printk("bt_mesh_model_publish err %d\n", err);
    1b6e:	4808      	ldr	r0, [pc, #32]	; (1b90 <button_pressed_worker+0xac>)
}
    1b70:	b008      	add	sp, #32
    1b72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("bt_mesh_model_publish err %d\n", err);
    1b76:	f01f bb79 	b.w	2126c <printk>
    1b7a:	bf00      	nop
    1b7c:	200036cc 	.word	0x200036cc
    1b80:	200005a8 	.word	0x200005a8
    1b84:	20000598 	.word	0x20000598
    1b88:	0002aa50 	.word	0x0002aa50
    1b8c:	2000372b 	.word	0x2000372b
    1b90:	0002aa32 	.word	0x0002aa32

00001b94 <gen_onoff_set>:
{
    1b94:	b570      	push	{r4, r5, r6, lr}
    1b96:	4604      	mov	r4, r0
    1b98:	460d      	mov	r5, r1
    1b9a:	4616      	mov	r6, r2
	printk("gen_onoff_set\n");
    1b9c:	4807      	ldr	r0, [pc, #28]	; (1bbc <gen_onoff_set+0x28>)
    1b9e:	f01f fb65 	bl	2126c <printk>
	(void)gen_onoff_set_unack(model, ctx, buf);
    1ba2:	4632      	mov	r2, r6
    1ba4:	4629      	mov	r1, r5
    1ba6:	4620      	mov	r0, r4
    1ba8:	f7ff ff54 	bl	1a54 <gen_onoff_set_unack>
	(void)gen_onoff_get(model, ctx, buf);
    1bac:	4632      	mov	r2, r6
    1bae:	4629      	mov	r1, r5
    1bb0:	4620      	mov	r0, r4
    1bb2:	f7ff fec9 	bl	1948 <gen_onoff_get>
}
    1bb6:	2000      	movs	r0, #0
    1bb8:	bd70      	pop	{r4, r5, r6, pc}
    1bba:	bf00      	nop
    1bbc:	0002aa7e 	.word	0x0002aa7e

00001bc0 <button_pressed>:
{
    1bc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1bc2:	4614      	mov	r4, r2
	return z_impl_k_uptime_ticks();
    1bc4:	f027 fab6 	bl	29134 <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    1bc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1bcc:	fba0 0302 	umull	r0, r3, r0, r2
	if (time < last_time + BUTTON_DEBOUNCE_DELAY_MS) {
    1bd0:	4e20      	ldr	r6, [pc, #128]	; (1c54 <button_pressed+0x94>)
	time = k_uptime_get_32();
    1bd2:	4f21      	ldr	r7, [pc, #132]	; (1c58 <button_pressed+0x98>)
    1bd4:	fb02 3301 	mla	r3, r2, r1, r3
    1bd8:	0bc0      	lsrs	r0, r0, #15
    1bda:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	if (time < last_time + BUTTON_DEBOUNCE_DELAY_MS) {
    1bde:	6833      	ldr	r3, [r6, #0]
	time = k_uptime_get_32();
    1be0:	6038      	str	r0, [r7, #0]
	if (time < last_time + BUTTON_DEBOUNCE_DELAY_MS) {
    1be2:	33fa      	adds	r3, #250	; 0xfa
    1be4:	4283      	cmp	r3, r0
    1be6:	d902      	bls.n	1bee <button_pressed+0x2e>
		last_time = time;
    1be8:	6030      	str	r0, [r6, #0]
}
    1bea:	b003      	add	sp, #12
    1bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (button_press_cnt == 0U) {
    1bee:	4d1b      	ldr	r5, [pc, #108]	; (1c5c <button_pressed+0x9c>)
    1bf0:	782b      	ldrb	r3, [r5, #0]
    1bf2:	b94b      	cbnz	r3, 1c08 <button_pressed+0x48>
	z_impl_k_timer_start(timer, duration, period);
    1bf4:	2200      	movs	r2, #0
    1bf6:	2300      	movs	r3, #0
    1bf8:	e9cd 2300 	strd	r2, r3, [sp]
    1bfc:	4818      	ldr	r0, [pc, #96]	; (1c60 <button_pressed+0xa0>)
    1bfe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1c02:	2300      	movs	r3, #0
    1c04:	f01f f932 	bl	20e6c <z_impl_k_timer_start>
	printk("button_press_cnt 0x%02x\n", button_press_cnt);
    1c08:	7829      	ldrb	r1, [r5, #0]
    1c0a:	4816      	ldr	r0, [pc, #88]	; (1c64 <button_pressed+0xa4>)
    1c0c:	f01f fb2e 	bl	2126c <printk>
	button_press_cnt++;
    1c10:	782b      	ldrb	r3, [r5, #0]
	switch (pin_pos) {
    1c12:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
	button_press_cnt++;
    1c16:	f103 0301 	add.w	r3, r3, #1
    1c1a:	702b      	strb	r3, [r5, #0]
	switch (pin_pos) {
    1c1c:	d011      	beq.n	1c42 <button_pressed+0x82>
    1c1e:	d80b      	bhi.n	1c38 <button_pressed+0x78>
    1c20:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
    1c24:	d006      	beq.n	1c34 <button_pressed+0x74>
    1c26:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
    1c2a:	d010      	beq.n	1c4e <button_pressed+0x8e>
	printk("No match for GPIO pin 0x%08x\n", pin_pos);
    1c2c:	480e      	ldr	r0, [pc, #56]	; (1c68 <button_pressed+0xa8>)
    1c2e:	4621      	mov	r1, r4
    1c30:	f01f fb1c 	bl	2126c <printk>
	case BIT(DT_GPIO_PIN(DT_ALIAS(sw0), gpios)): return 0;
    1c34:	2300      	movs	r3, #0
    1c36:	e005      	b.n	1c44 <button_pressed+0x84>
	switch (pin_pos) {
    1c38:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    1c3c:	d1f6      	bne.n	1c2c <button_pressed+0x6c>
	case BIT(DT_GPIO_PIN(DT_ALIAS(sw3), gpios)): return 3;
    1c3e:	2303      	movs	r3, #3
    1c40:	e000      	b.n	1c44 <button_pressed+0x84>
	case BIT(DT_GPIO_PIN(DT_ALIAS(sw2), gpios)): return 2;
    1c42:	2302      	movs	r3, #2
	sw.sw_num = pin_to_sw(pin_pos);
    1c44:	4a09      	ldr	r2, [pc, #36]	; (1c6c <button_pressed+0xac>)
    1c46:	7013      	strb	r3, [r2, #0]
	last_time = time;
    1c48:	683b      	ldr	r3, [r7, #0]
    1c4a:	6033      	str	r3, [r6, #0]
    1c4c:	e7cd      	b.n	1bea <button_pressed+0x2a>
	switch (pin_pos) {
    1c4e:	2301      	movs	r3, #1
    1c50:	e7f8      	b.n	1c44 <button_pressed+0x84>
    1c52:	bf00      	nop
    1c54:	20001fc8 	.word	0x20001fc8
    1c58:	20001fd0 	.word	0x20001fd0
    1c5c:	2000372a 	.word	0x2000372a
    1c60:	20001340 	.word	0x20001340
    1c64:	0002aa8d 	.word	0x0002aa8d
    1c68:	0002aaa6 	.word	0x0002aaa6
    1c6c:	20001328 	.word	0x20001328

00001c70 <init_led>:

void init_led(uint8_t dev, const char *port, uint32_t pin_num, gpio_flags_t flags)
{
    1c70:	b570      	push	{r4, r5, r6, lr}
    1c72:	4606      	mov	r6, r0
    1c74:	4614      	mov	r4, r2
    1c76:	4608      	mov	r0, r1
    1c78:	461d      	mov	r5, r3
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    1c7a:	f01d fe41 	bl	1f900 <z_impl_device_get_binding>
	onoff_state[dev].led_device = device_get_binding(port);
    1c7e:	4b05      	ldr	r3, [pc, #20]	; (1c94 <init_led+0x24>)
    1c80:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
	gpio_pin_configure(onoff_state[dev].led_device, pin_num,
    1c84:	f445 52b0 	orr.w	r2, r5, #5632	; 0x1600
    1c88:	b2e1      	uxtb	r1, r4
	onoff_state[dev].led_device = device_get_binding(port);
    1c8a:	6058      	str	r0, [r3, #4]
			   flags | GPIO_OUTPUT_INACTIVE);
}
    1c8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	gpio_pin_configure(onoff_state[dev].led_device, pin_num,
    1c90:	f01f ba03 	b.w	2109a <gpio_pin_configure.isra.0>
    1c94:	200005b8 	.word	0x200005b8

00001c98 <bl_core_init>:
#if MIGRATION_STEP1
void bl_core_init(BL_notify cb)
#else
void main(void)
#endif
{
    1c98:	b510      	push	{r4, lr}
	int err;

	printk("Initializing...\n");
    1c9a:	483a      	ldr	r0, [pc, #232]	; (1d84 <bl_core_init+0xec>)
    1c9c:	f01f fae6 	bl	2126c <printk>
	return z_impl_k_uptime_ticks();
    1ca0:	f027 fa48 	bl	29134 <z_impl_k_uptime_ticks>
    1ca4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1ca8:	fba0 0302 	umull	r0, r3, r0, r2
    1cac:	fb02 3301 	mla	r3, r2, r1, r3
    1cb0:	0bc0      	lsrs	r0, r0, #15
    1cb2:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 *
 * @return The low 32 bits of the current uptime, in milliseconds.
 */
static inline uint32_t k_uptime_get_32(void)
{
	return (uint32_t)k_uptime_get();
    1cb6:	4b34      	ldr	r3, [pc, #208]	; (1d88 <bl_core_init+0xf0>)

	/* Initialize the button debouncer */
	last_time = k_uptime_get_32();

	/* Initialize button worker task*/
	k_work_init(&sw.button_work, button_pressed_worker);
    1cb8:	4934      	ldr	r1, [pc, #208]	; (1d8c <bl_core_init+0xf4>)
    1cba:	6018      	str	r0, [r3, #0]
    1cbc:	4834      	ldr	r0, [pc, #208]	; (1d90 <bl_core_init+0xf8>)
    1cbe:	f027 f84a 	bl	28d56 <k_work_init>

	/* Initialize button count timer */
	k_timer_init(&sw.button_timer, button_cnt_timer, NULL);
    1cc2:	4934      	ldr	r1, [pc, #208]	; (1d94 <bl_core_init+0xfc>)
    1cc4:	4834      	ldr	r0, [pc, #208]	; (1d98 <bl_core_init+0x100>)
    1cc6:	2200      	movs	r2, #0
    1cc8:	f027 fa65 	bl	29196 <k_timer_init>
    1ccc:	4833      	ldr	r0, [pc, #204]	; (1d9c <bl_core_init+0x104>)

	sw_device = device_get_binding(DT_GPIO_LABEL(DT_ALIAS(sw0), gpios));
    1cce:	4c34      	ldr	r4, [pc, #208]	; (1da0 <bl_core_init+0x108>)
    1cd0:	f01d fe16 	bl	1f900 <z_impl_device_get_binding>
	gpio_pin_configure(sw_device, DT_GPIO_PIN(DT_ALIAS(sw0), gpios),
    1cd4:	f240 1211 	movw	r2, #273	; 0x111
    1cd8:	210d      	movs	r1, #13
	sw_device = device_get_binding(DT_GPIO_LABEL(DT_ALIAS(sw0), gpios));
    1cda:	6020      	str	r0, [r4, #0]
	gpio_pin_configure(sw_device, DT_GPIO_PIN(DT_ALIAS(sw0), gpios),
    1cdc:	f01f f9dd 	bl	2109a <gpio_pin_configure.isra.0>
			   GPIO_INPUT |
			   DT_GPIO_FLAGS(DT_ALIAS(sw0), gpios));
	gpio_pin_configure(sw_device, DT_GPIO_PIN(DT_ALIAS(sw1), gpios),
    1ce0:	6820      	ldr	r0, [r4, #0]
    1ce2:	f240 1211 	movw	r2, #273	; 0x111
    1ce6:	210e      	movs	r1, #14
    1ce8:	f01f f9d7 	bl	2109a <gpio_pin_configure.isra.0>
			   GPIO_INPUT |
			   DT_GPIO_FLAGS(DT_ALIAS(sw1), gpios));
	gpio_pin_configure(sw_device, DT_GPIO_PIN(DT_ALIAS(sw2), gpios),
    1cec:	6820      	ldr	r0, [r4, #0]
    1cee:	f240 1211 	movw	r2, #273	; 0x111
    1cf2:	210f      	movs	r1, #15
    1cf4:	f01f f9d1 	bl	2109a <gpio_pin_configure.isra.0>
			   GPIO_INPUT |
			   DT_GPIO_FLAGS(DT_ALIAS(sw2), gpios));
	gpio_pin_configure(sw_device, DT_GPIO_PIN(DT_ALIAS(sw3), gpios),
    1cf8:	f240 1211 	movw	r2, #273	; 0x111
    1cfc:	6820      	ldr	r0, [r4, #0]
    1cfe:	2110      	movs	r1, #16
    1d00:	f01f f9cb 	bl	2109a <gpio_pin_configure.isra.0>
			   GPIO_INPUT |
			   DT_GPIO_FLAGS(DT_ALIAS(sw3), gpios));
	gpio_pin_interrupt_configure(sw_device,
    1d04:	6820      	ldr	r0, [r4, #0]
    1d06:	210d      	movs	r1, #13
    1d08:	f01f f9b4 	bl	21074 <gpio_pin_interrupt_configure.constprop.0.isra.0>
				     DT_GPIO_PIN(DT_ALIAS(sw0), gpios),
				     GPIO_INT_EDGE_TO_ACTIVE);
	gpio_pin_interrupt_configure(sw_device,
    1d0c:	6820      	ldr	r0, [r4, #0]
    1d0e:	210e      	movs	r1, #14
    1d10:	f01f f9b0 	bl	21074 <gpio_pin_interrupt_configure.constprop.0.isra.0>
				     DT_GPIO_PIN(DT_ALIAS(sw1), gpios),
				     GPIO_INT_EDGE_TO_ACTIVE);
	gpio_pin_interrupt_configure(sw_device,
    1d14:	6820      	ldr	r0, [r4, #0]
    1d16:	210f      	movs	r1, #15
    1d18:	f01f f9ac 	bl	21074 <gpio_pin_interrupt_configure.constprop.0.isra.0>
				     DT_GPIO_PIN(DT_ALIAS(sw2), gpios),
				     GPIO_INT_EDGE_TO_ACTIVE);
	gpio_pin_interrupt_configure(sw_device,
    1d1c:	6820      	ldr	r0, [r4, #0]
    1d1e:	2110      	movs	r1, #16
    1d20:	f01f f9a8 	bl	21074 <gpio_pin_interrupt_configure.constprop.0.isra.0>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    1d24:	491f      	ldr	r1, [pc, #124]	; (1da4 <bl_core_init+0x10c>)
    1d26:	4b20      	ldr	r3, [pc, #128]	; (1da8 <bl_core_init+0x110>)
	gpio_init_callback(&button_cb, button_pressed,
			   BIT(DT_GPIO_PIN(DT_ALIAS(sw0), gpios)) |
			   BIT(DT_GPIO_PIN(DT_ALIAS(sw1), gpios)) |
			   BIT(DT_GPIO_PIN(DT_ALIAS(sw2), gpios)) |
			   BIT(DT_GPIO_PIN(DT_ALIAS(sw3), gpios)));
	gpio_add_callback(sw_device, &button_cb);
    1d28:	6820      	ldr	r0, [r4, #0]
    1d2a:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    1d2c:	f44f 33f0 	mov.w	r3, #122880	; 0x1e000
    1d30:	608b      	str	r3, [r1, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    1d32:	6883      	ldr	r3, [r0, #8]
    1d34:	69db      	ldr	r3, [r3, #28]
    1d36:	b10b      	cbz	r3, 1d3c <bl_core_init+0xa4>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    1d38:	2201      	movs	r2, #1
    1d3a:	4798      	blx	r3

	/* Initialize LED's */
	init_led(0, DT_GPIO_LABEL(DT_ALIAS(led0), gpios),
    1d3c:	4917      	ldr	r1, [pc, #92]	; (1d9c <bl_core_init+0x104>)
    1d3e:	2301      	movs	r3, #1
    1d40:	2211      	movs	r2, #17
    1d42:	2000      	movs	r0, #0
    1d44:	f7ff ff94 	bl	1c70 <init_led>
		 DT_GPIO_PIN(DT_ALIAS(led0), gpios),
		 DT_GPIO_FLAGS(DT_ALIAS(led0), gpios));
	init_led(1, DT_GPIO_LABEL(DT_ALIAS(led1), gpios),
    1d48:	2301      	movs	r3, #1
    1d4a:	4618      	mov	r0, r3
    1d4c:	4913      	ldr	r1, [pc, #76]	; (1d9c <bl_core_init+0x104>)
    1d4e:	2212      	movs	r2, #18
    1d50:	f7ff ff8e 	bl	1c70 <init_led>
		 DT_GPIO_PIN(DT_ALIAS(led1), gpios),
		 DT_GPIO_FLAGS(DT_ALIAS(led1), gpios));
	init_led(2, DT_GPIO_LABEL(DT_ALIAS(led2), gpios),
    1d54:	4911      	ldr	r1, [pc, #68]	; (1d9c <bl_core_init+0x104>)
    1d56:	2301      	movs	r3, #1
    1d58:	2213      	movs	r2, #19
    1d5a:	2002      	movs	r0, #2
    1d5c:	f7ff ff88 	bl	1c70 <init_led>
		 DT_GPIO_PIN(DT_ALIAS(led2), gpios),
		 DT_GPIO_FLAGS(DT_ALIAS(led2), gpios));
	init_led(3, DT_GPIO_LABEL(DT_ALIAS(led3), gpios),
    1d60:	490e      	ldr	r1, [pc, #56]	; (1d9c <bl_core_init+0x104>)
    1d62:	2301      	movs	r3, #1
    1d64:	2214      	movs	r2, #20
    1d66:	2003      	movs	r0, #3
    1d68:	f7ff ff82 	bl	1c70 <init_led>
		 DT_GPIO_PIN(DT_ALIAS(led3), gpios),
		 DT_GPIO_FLAGS(DT_ALIAS(led3), gpios));

	/* Initialize the Bluetooth Subsystem */
	err = bt_enable(bt_ready);
    1d6c:	480f      	ldr	r0, [pc, #60]	; (1dac <bl_core_init+0x114>)
    1d6e:	f004 fe85 	bl	6a7c <bt_enable>
	if (err) {
    1d72:	4601      	mov	r1, r0
    1d74:	b120      	cbz	r0, 1d80 <bl_core_init+0xe8>
		printk("Bluetooth init failed (err %d)\n", err);
	}
}
    1d76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Bluetooth init failed (err %d)\n", err);
    1d7a:	480d      	ldr	r0, [pc, #52]	; (1db0 <bl_core_init+0x118>)
    1d7c:	f01f ba76 	b.w	2126c <printk>
}
    1d80:	bd10      	pop	{r4, pc}
    1d82:	bf00      	nop
    1d84:	0002aac4 	.word	0x0002aac4
    1d88:	20001fc8 	.word	0x20001fc8
    1d8c:	00001ae5 	.word	0x00001ae5
    1d90:	2000132c 	.word	0x2000132c
    1d94:	000019a5 	.word	0x000019a5
    1d98:	20001340 	.word	0x20001340
    1d9c:	0002aad5 	.word	0x0002aad5
    1da0:	20001fcc 	.word	0x20001fcc
    1da4:	20001f94 	.word	0x20001f94
    1da8:	00001bc1 	.word	0x00001bc1
    1dac:	000019d5 	.word	0x000019d5
    1db0:	0002a96e 	.word	0x0002a96e

00001db4 <bl_us>:
    uint64_t f = sys_clock_hw_cycles_per_sec();
    return (BL_us)((1000000*cyc)/f);
  }

  BL_us bl_us(void)                         // get current clock time in us
  {
    1db4:	b510      	push	{r4, lr}
    1db6:	f027 f9bd 	bl	29134 <z_impl_k_uptime_ticks>
    return (BL_us)((1000000*cyc)/f);
    1dba:	4a0b      	ldr	r2, [pc, #44]	; (1de8 <bl_us+0x34>)
    1dbc:	fba0 0302 	umull	r0, r3, r0, r2
    1dc0:	fb02 3101 	mla	r1, r2, r1, r3
    static BL_us offset = 0;
    BL_us us = now_us();

    if (offset == 0)                        // first call always returns 0
    1dc4:	4b09      	ldr	r3, [pc, #36]	; (1dec <bl_us+0x38>)
    1dc6:	e9d3 4200 	ldrd	r4, r2, [r3]
    return (BL_us)((1000000*cyc)/f);
    1dca:	0bc0      	lsrs	r0, r0, #15
    if (offset == 0)                        // first call always returns 0
    1dcc:	4322      	orrs	r2, r4
    return (BL_us)((1000000*cyc)/f);
    1dce:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    1dd2:	ea4f 31d1 	mov.w	r1, r1, lsr #15
      offset = us;
    1dd6:	bf08      	it	eq
    1dd8:	e9c3 0100 	strdeq	r0, r1, [r3]

    return us  - offset;
    1ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
    1de0:	1a80      	subs	r0, r0, r2
    1de2:	eb61 0103 	sbc.w	r1, r1, r3
  }
    1de6:	bd10      	pop	{r4, pc}
    1de8:	000f4240 	.word	0x000f4240
    1dec:	20001380 	.word	0x20001380

00001df0 <bl_init>:
//==============================================================================
// obligatory init and loop functions
//==============================================================================

  void bl_init(BL_notify cb, int verbose)
  {
    1df0:	b508      	push	{r3, lr}
    notify = cb;
    1df2:	4b06      	ldr	r3, [pc, #24]	; (1e0c <bl_init+0x1c>)
    1df4:	6018      	str	r0, [r3, #0]
    color = attention ? BL_G : (provisioned ? BL_Y : "");
  }

  void bl_verbose(int verbose)              // set verbose level
  {
    debug = verbose;
    1df6:	4b06      	ldr	r3, [pc, #24]	; (1e10 <bl_init+0x20>)
    bl_verbose(verbose);
    bl_gear_init(bl_output);
    1df8:	4806      	ldr	r0, [pc, #24]	; (1e14 <bl_init+0x24>)
    1dfa:	6019      	str	r1, [r3, #0]
    1dfc:	f01f f96a 	bl	210d4 <bl_gear_init>
    bl_core_init(when_core);
  }
    1e00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    bl_core_init(when_core);
    1e04:	4804      	ldr	r0, [pc, #16]	; (1e18 <bl_init+0x28>)
    1e06:	f7ff bf47 	b.w	1c98 <bl_core_init>
    1e0a:	bf00      	nop
    1e0c:	20001fdc 	.word	0x20001fdc
    1e10:	20001fd4 	.word	0x20001fd4
    1e14:	000210d1 	.word	0x000210d1
    1e18:	00001f4d 	.word	0x00001f4d

00001e1c <bl_dbg>:
//==============================================================================
// debug tracing
//==============================================================================

  bool bl_dbg(int lev)
  {
    1e1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    if (lev > debug)
    1e20:	4b30      	ldr	r3, [pc, #192]	; (1ee4 <bl_dbg+0xc8>)
    1e22:	681b      	ldr	r3, [r3, #0]
    1e24:	4283      	cmp	r3, r0
  {
    1e26:	4605      	mov	r5, r0
    if (lev > debug)
    1e28:	db59      	blt.n	1ede <bl_dbg+0xc2>
    BL_us us = bl_us();                    // clock time now in us
    1e2a:	f7ff ffc3 	bl	1db4 <bl_us>
    *pus = us % 1000;                      // map us to range 0 .. 999
    1e2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1e32:	2300      	movs	r3, #0
    BL_us us = bl_us();                    // clock time now in us
    1e34:	4682      	mov	sl, r0
    1e36:	4689      	mov	r9, r1
    *pus = us % 1000;                      // map us to range 0 .. 999
    1e38:	f7fe f952 	bl	e0 <__aeabi_ldivmod>
    *pms = us/1000 - offset;
    1e3c:	4f2a      	ldr	r7, [pc, #168]	; (1ee8 <bl_dbg+0xcc>)
    1e3e:	2300      	movs	r3, #0
    *pus = us % 1000;                      // map us to range 0 .. 999
    1e40:	4616      	mov	r6, r2
    *pms = us/1000 - offset;
    1e42:	4650      	mov	r0, sl
    1e44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1e48:	4649      	mov	r1, r9
    1e4a:	f7fe f949 	bl	e0 <__aeabi_ldivmod>
    1e4e:	e9d7 4800 	ldrd	r4, r8, [r7]
    1e52:	4a26      	ldr	r2, [pc, #152]	; (1eec <bl_dbg+0xd0>)
    1e54:	f8d2 c000 	ldr.w	ip, [r2]
    1e58:	1b03      	subs	r3, r0, r4
    for (; *pms >= 1000; offset += 1000, sec++)
    1e5a:	4641      	mov	r1, r8
    1e5c:	f04f 0e00 	mov.w	lr, #0
    1e60:	4620      	mov	r0, r4
    1e62:	f514 747a 	adds.w	r4, r4, #1000	; 0x3e8
    1e66:	4688      	mov	r8, r1
    1e68:	f141 0100 	adc.w	r1, r1, #0
    1e6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    1e70:	46e1      	mov	r9, ip
    1e72:	f10c 0c01 	add.w	ip, ip, #1
    1e76:	da25      	bge.n	1ec4 <bl_dbg+0xa8>
    1e78:	f1be 0f00 	cmp.w	lr, #0
    1e7c:	d003      	beq.n	1e86 <bl_dbg+0x6a>
    1e7e:	e9c7 0800 	strd	r0, r8, [r7]
    1e82:	f8c2 9000 	str.w	r9, [r2]
    1e86:	481a      	ldr	r0, [pc, #104]	; (1ef0 <bl_dbg+0xd4>)
    1e88:	6811      	ldr	r1, [r2, #0]
    1e8a:	6804      	ldr	r4, [r0, #0]
      sec -= 60;
    1e8c:	2700      	movs	r7, #0
    for (; sec >= 60; min++)
    1e8e:	293b      	cmp	r1, #59	; 0x3b
    1e90:	46a4      	mov	ip, r4
    1e92:	f104 0401 	add.w	r4, r4, #1
    1e96:	dc1a      	bgt.n	1ece <bl_dbg+0xb2>
    1e98:	b117      	cbz	r7, 1ea0 <bl_dbg+0x84>
    1e9a:	6011      	str	r1, [r2, #0]
    1e9c:	f8c0 c000 	str.w	ip, [r0]
    now(&min,&sec,&ms,&us);

      // print header in green if in attention mode,
      // yellow if node is provisioned, otherwise white by default

    printk("%s#%d[%03d:%02d:%03d.%03d] " BL_0, color,lev, min,sec,ms,us);
    1ea0:	e9cd 3601 	strd	r3, r6, [sp, #4]
    1ea4:	9100      	str	r1, [sp, #0]
    1ea6:	4913      	ldr	r1, [pc, #76]	; (1ef4 <bl_dbg+0xd8>)
    1ea8:	6803      	ldr	r3, [r0, #0]
    1eaa:	6809      	ldr	r1, [r1, #0]
    1eac:	4812      	ldr	r0, [pc, #72]	; (1ef8 <bl_dbg+0xdc>)

    for (int i=0; i < lev; i++)
    {
      printk("  ");                   // indentation
    1eae:	4e13      	ldr	r6, [pc, #76]	; (1efc <bl_dbg+0xe0>)
    printk("%s#%d[%03d:%02d:%03d.%03d] " BL_0, color,lev, min,sec,ms,us);
    1eb0:	462a      	mov	r2, r5
    1eb2:	f01f f9db 	bl	2126c <printk>
    for (int i=0; i < lev; i++)
    1eb6:	2400      	movs	r4, #0
    1eb8:	42a5      	cmp	r5, r4
    1eba:	dc0b      	bgt.n	1ed4 <bl_dbg+0xb8>
    1ebc:	2001      	movs	r0, #1
    }

    return true;
  }
    1ebe:	b004      	add	sp, #16
    1ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      *pms -= 1000;
    1ec4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
    1ec8:	f04f 0e01 	mov.w	lr, #1
    1ecc:	e7c8      	b.n	1e60 <bl_dbg+0x44>
      sec -= 60;
    1ece:	393c      	subs	r1, #60	; 0x3c
    1ed0:	2701      	movs	r7, #1
    1ed2:	e7dc      	b.n	1e8e <bl_dbg+0x72>
      printk("  ");                   // indentation
    1ed4:	4630      	mov	r0, r6
    1ed6:	f01f f9c9 	bl	2126c <printk>
    for (int i=0; i < lev; i++)
    1eda:	3401      	adds	r4, #1
    1edc:	e7ec      	b.n	1eb8 <bl_dbg+0x9c>
      return false;
    1ede:	2000      	movs	r0, #0
    1ee0:	e7ed      	b.n	1ebe <bl_dbg+0xa2>
    1ee2:	bf00      	nop
    1ee4:	20001fd4 	.word	0x20001fd4
    1ee8:	20001378 	.word	0x20001378
    1eec:	20001fe0 	.word	0x20001fe0
    1ef0:	20001fd8 	.word	0x20001fd8
    1ef4:	20000738 	.word	0x20000738
    1ef8:	0002aae8 	.word	0x0002aae8
    1efc:	0002abe4 	.word	0x0002abe4

00001f00 <bl_logo>:
    msg = (msg[0] == '@') ? msg+1 : msg;
    printk("%s%s: @%d,%d\n"BL_0, col, msg, id,value);
  }

  void bl_logo(int lev, BL_txt msg, BL_ob *o, int value) // log event message
  {
    1f00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    1f02:	460c      	mov	r4, r1
    1f04:	4615      	mov	r5, r2
    1f06:	461e      	mov	r6, r3
    if ( !bl_dbg(lev) )
    1f08:	f7ff ff88 	bl	1e1c <bl_dbg>
    1f0c:	b190      	cbz	r0, 1f34 <bl_logo+0x34>
     return;

    BL_txt col = (msg[0] != '@') ? "" : (value ? BL_G : BL_M);
    1f0e:	7823      	ldrb	r3, [r4, #0]
    1f10:	2b40      	cmp	r3, #64	; 0x40
    1f12:	d111      	bne.n	1f38 <bl_logo+0x38>
    1f14:	4909      	ldr	r1, [pc, #36]	; (1f3c <bl_logo+0x3c>)
    1f16:	4b0a      	ldr	r3, [pc, #40]	; (1f40 <bl_logo+0x40>)
    msg = (msg[0] == '@') ? msg+1 : msg;
    1f18:	3401      	adds	r4, #1
    BL_txt col = (msg[0] != '@') ? "" : (value ? BL_G : BL_M);
    1f1a:	2e00      	cmp	r6, #0
    1f1c:	bf08      	it	eq
    1f1e:	4619      	moveq	r1, r3

    #if CFG_PRETTY_LOGGING             // pretty text for class tag & opcode
      printk("%s%s [%s:%s @%d (%d)]\n"BL_0, col,msg,
             cltext(o->cl),optext(o->op),o->id,value);
    #else
      printk("%s%s [%d:%d @%d (%d)]\n"BL_0,col,msg,
    1f20:	68ab      	ldr	r3, [r5, #8]
    1f22:	9301      	str	r3, [sp, #4]
    1f24:	686b      	ldr	r3, [r5, #4]
    1f26:	9300      	str	r3, [sp, #0]
    1f28:	4806      	ldr	r0, [pc, #24]	; (1f44 <bl_logo+0x44>)
    1f2a:	782b      	ldrb	r3, [r5, #0]
    1f2c:	9602      	str	r6, [sp, #8]
    1f2e:	4622      	mov	r2, r4
    1f30:	f01f f99c 	bl	2126c <printk>
             o->cl,o->op, o->id,value);
    #endif
  }
    1f34:	b004      	add	sp, #16
    1f36:	bd70      	pop	{r4, r5, r6, pc}
    BL_txt col = (msg[0] != '@') ? "" : (value ? BL_G : BL_M);
    1f38:	4903      	ldr	r1, [pc, #12]	; (1f48 <bl_logo+0x48>)
    1f3a:	e7f1      	b.n	1f20 <bl_logo+0x20>
    1f3c:	0002aae2 	.word	0x0002aae2
    1f40:	0002ab08 	.word	0x0002ab08
    1f44:	0002ab1c 	.word	0x0002ab1c
    1f48:	0002d5c0 	.word	0x0002d5c0

00001f4c <when_core>:
  {
    1f4c:	b510      	push	{r4, lr}
    1f4e:	4602      	mov	r2, r0
    1f50:	460c      	mov	r4, r1
    bl_logo(2,"@api",o,val);
    1f52:	460b      	mov	r3, r1
    1f54:	2002      	movs	r0, #2
    1f56:	4902      	ldr	r1, [pc, #8]	; (1f60 <when_core+0x14>)
    1f58:	f7ff ffd2 	bl	1f00 <bl_logo>
  }
    1f5c:	4620      	mov	r0, r4
    1f5e:	bd10      	pop	{r4, pc}
    1f60:	0002ab59 	.word	0x0002ab59

00001f64 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
    1f64:	b530      	push	{r4, r5, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    1f66:	4c0a      	ldr	r4, [pc, #40]	; (1f90 <crc8_ccitt+0x2c>)
    1f68:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
    1f6a:	4291      	cmp	r1, r2
    1f6c:	d100      	bne.n	1f70 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
    1f6e:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
    1f70:	f811 3b01 	ldrb.w	r3, [r1], #1
    1f74:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    1f76:	0903      	lsrs	r3, r0, #4
    1f78:	5ce3      	ldrb	r3, [r4, r3]
    1f7a:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
    1f7e:	b2dd      	uxtb	r5, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    1f80:	f3c3 1303 	ubfx	r3, r3, #4, #4
    1f84:	5ce0      	ldrb	r0, [r4, r3]
    1f86:	ea80 1005 	eor.w	r0, r0, r5, lsl #4
    1f8a:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
    1f8c:	e7ed      	b.n	1f6a <crc8_ccitt+0x6>
    1f8e:	bf00      	nop
    1f90:	0002ab5e 	.word	0x0002ab5e

00001f94 <__printk_hook_install>:
 *
 * @return N/A
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
    1f94:	4b01      	ldr	r3, [pc, #4]	; (1f9c <__printk_hook_install+0x8>)
    1f96:	6018      	str	r0, [r3, #0]
}
    1f98:	4770      	bx	lr
    1f9a:	bf00      	nop
    1f9c:	2000073c 	.word	0x2000073c

00001fa0 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    1fa0:	b530      	push	{r4, r5, lr}
    1fa2:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    1fa4:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    1fa8:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    1faa:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    1fac:	a901      	add	r1, sp, #4
    1fae:	4805      	ldr	r0, [pc, #20]	; (1fc4 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    1fb0:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    1fb2:	f000 f8e9 	bl	2188 <cbvprintf>

	if (ctx.count < ctx.max) {
    1fb6:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    1fba:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    1fbc:	bfb8      	it	lt
    1fbe:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    1fc0:	b005      	add	sp, #20
    1fc2:	bd30      	pop	{r4, r5, pc}
    1fc4:	00021247 	.word	0x00021247

00001fc8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1fc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1fcc:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1fd0:	f019 0808 	ands.w	r8, r9, #8
{
    1fd4:	4604      	mov	r4, r0
    1fd6:	4693      	mov	fp, r2
	if (processing) {
    1fd8:	d00d      	beq.n	1ff6 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    1fda:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1fdc:	bf0c      	ite	eq
    1fde:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    1fe2:	f049 0920 	orrne.w	r9, r9, #32
    1fe6:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1fea:	f38b 8811 	msr	BASEPRI, fp
    1fee:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    1ff2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1ff6:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    1ffa:	2902      	cmp	r1, #2
    1ffc:	d107      	bne.n	200e <process_event+0x46>
			evt = process_recheck(mgr);
    1ffe:	4620      	mov	r0, r4
    2000:	f01f f94e 	bl	212a0 <process_recheck>
		if (evt == EVT_NOP) {
    2004:	2800      	cmp	r0, #0
    2006:	d0f0      	beq.n	1fea <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    2008:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    200a:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
    200c:	d14e      	bne.n	20ac <process_event+0xe4>
			res = mgr->last_res;
    200e:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2010:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    2012:	2f00      	cmp	r7, #0
    2014:	da15      	bge.n	2042 <process_event+0x7a>
		*clients = mgr->clients;
    2016:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2018:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    201c:	e9c4 8800 	strd	r8, r8, [r4]
    2020:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    2024:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    2026:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2028:	8b21      	ldrh	r1, [r4, #24]
    202a:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    202e:	45ca      	cmp	sl, r9
    2030:	d002      	beq.n	2038 <process_event+0x70>
		if (do_monitors
    2032:	68a3      	ldr	r3, [r4, #8]
    2034:	2b00      	cmp	r3, #0
    2036:	d15a      	bne.n	20ee <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    2038:	b90d      	cbnz	r5, 203e <process_event+0x76>
		    || (transit != NULL)) {
    203a:	2e00      	cmp	r6, #0
    203c:	d071      	beq.n	2122 <process_event+0x15a>
    203e:	2300      	movs	r3, #0
    2040:	e056      	b.n	20f0 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2042:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    2046:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    2048:	2a01      	cmp	r2, #1
    204a:	d81e      	bhi.n	208a <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    204c:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    2050:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    2052:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2054:	b289      	uxth	r1, r1
    2056:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    205a:	d10a      	bne.n	2072 <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    205c:	b13d      	cbz	r5, 206e <process_event+0xa6>
    205e:	8b63      	ldrh	r3, [r4, #26]
    2060:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    2062:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    2064:	3301      	adds	r3, #1
    2066:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    2068:	2a00      	cmp	r2, #0
    206a:	d1fa      	bne.n	2062 <process_event+0x9a>
    206c:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    206e:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    2072:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    2074:	4620      	mov	r0, r4
    2076:	f01f f913 	bl	212a0 <process_recheck>
    207a:	4606      	mov	r6, r0
    207c:	2800      	cmp	r0, #0
    207e:	d0d3      	beq.n	2028 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    2080:	8b23      	ldrh	r3, [r4, #24]
    2082:	f043 0320 	orr.w	r3, r3, #32
    2086:	8323      	strh	r3, [r4, #24]
    2088:	e7cd      	b.n	2026 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    208a:	2b04      	cmp	r3, #4
    208c:	d10c      	bne.n	20a8 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    208e:	f021 0107 	bic.w	r1, r1, #7
    2092:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    2094:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    2096:	4620      	mov	r0, r4
    2098:	f01f f902 	bl	212a0 <process_recheck>
    209c:	4605      	mov	r5, r0
    209e:	2800      	cmp	r0, #0
    20a0:	d0c1      	beq.n	2026 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    20a2:	f041 0120 	orr.w	r1, r1, #32
    20a6:	8321      	strh	r1, [r4, #24]
    20a8:	2500      	movs	r5, #0
    20aa:	e7bc      	b.n	2026 <process_event+0x5e>
		} else if (evt == EVT_START) {
    20ac:	2803      	cmp	r0, #3
    20ae:	d109      	bne.n	20c4 <process_event+0xfc>
			transit = mgr->transitions->start;
    20b0:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    20b2:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    20b6:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    20b8:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    20bc:	8323      	strh	r3, [r4, #24]
}
    20be:	2500      	movs	r5, #0
		res = 0;
    20c0:	462f      	mov	r7, r5
    20c2:	e7b1      	b.n	2028 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    20c4:	2804      	cmp	r0, #4
    20c6:	d106      	bne.n	20d6 <process_event+0x10e>
			transit = mgr->transitions->stop;
    20c8:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    20ca:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    20ce:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    20d0:	f043 0304 	orr.w	r3, r3, #4
    20d4:	e7f2      	b.n	20bc <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    20d6:	2805      	cmp	r0, #5
    20d8:	d106      	bne.n	20e8 <process_event+0x120>
			transit = mgr->transitions->reset;
    20da:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    20dc:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    20e0:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    20e2:	f043 0305 	orr.w	r3, r3, #5
    20e6:	e7e9      	b.n	20bc <process_event+0xf4>
    20e8:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    20ea:	462e      	mov	r6, r5
    20ec:	e7e8      	b.n	20c0 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    20ee:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    20f0:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    20f4:	8321      	strh	r1, [r4, #24]
    20f6:	f38b 8811 	msr	BASEPRI, fp
    20fa:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    20fe:	b9fb      	cbnz	r3, 2140 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
    2100:	bb85      	cbnz	r5, 2164 <process_event+0x19c>
			if (transit != NULL) {
    2102:	b116      	cbz	r6, 210a <process_event+0x142>
				transit(mgr, transition_complete);
    2104:	491f      	ldr	r1, [pc, #124]	; (2184 <process_event+0x1bc>)
    2106:	4620      	mov	r0, r4
    2108:	47b0      	blx	r6
	__asm__ volatile(
    210a:	f04f 0320 	mov.w	r3, #32
    210e:	f3ef 8b11 	mrs	fp, BASEPRI
    2112:	f383 8812 	msr	BASEPRI_MAX, r3
    2116:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    211a:	8b23      	ldrh	r3, [r4, #24]
    211c:	f023 0308 	bic.w	r3, r3, #8
    2120:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    2122:	8b23      	ldrh	r3, [r4, #24]
    2124:	06da      	lsls	r2, r3, #27
    2126:	d525      	bpl.n	2174 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    2128:	f023 0310 	bic.w	r3, r3, #16
    212c:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    212e:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    2130:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    2134:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    2138:	2900      	cmp	r1, #0
    213a:	f47f af5e 	bne.w	1ffa <process_event+0x32>
out:
    213e:	e754      	b.n	1fea <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    2140:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    2142:	2900      	cmp	r1, #0
    2144:	d0dc      	beq.n	2100 <process_event+0x138>
	return node->next;
    2146:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    214a:	f8d1 b004 	ldr.w	fp, [r1, #4]
    214e:	463b      	mov	r3, r7
    2150:	4652      	mov	r2, sl
    2152:	4620      	mov	r0, r4
    2154:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    2156:	f1b9 0f00 	cmp.w	r9, #0
    215a:	d0d1      	beq.n	2100 <process_event+0x138>
    215c:	4649      	mov	r1, r9
    215e:	f8d9 9000 	ldr.w	r9, [r9]
    2162:	e7f2      	b.n	214a <process_event+0x182>
    2164:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    2166:	463b      	mov	r3, r7
    2168:	4652      	mov	r2, sl
    216a:	4620      	mov	r0, r4
    216c:	682d      	ldr	r5, [r5, #0]
    216e:	f01f f8b3 	bl	212d8 <notify_one>
    2172:	e7c5      	b.n	2100 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    2174:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    2178:	bf1e      	ittt	ne
    217a:	f023 0320 	bicne.w	r3, r3, #32
    217e:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    2180:	2102      	movne	r1, #2
    2182:	e7d5      	b.n	2130 <process_event+0x168>
    2184:	00021305 	.word	0x00021305

00002188 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    2188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    218c:	b091      	sub	sp, #68	; 0x44
    218e:	468b      	mov	fp, r1
    2190:	9002      	str	r0, [sp, #8]
    2192:	4692      	mov	sl, r2
    2194:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    2196:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    2198:	f89a 0000 	ldrb.w	r0, [sl]
    219c:	b908      	cbnz	r0, 21a2 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    219e:	4628      	mov	r0, r5
    21a0:	e35f      	b.n	2862 <cbvprintf+0x6da>
		if (*fp != '%') {
    21a2:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    21a4:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
    21a8:	d007      	beq.n	21ba <cbvprintf+0x32>
			OUTC('%');
    21aa:	9b02      	ldr	r3, [sp, #8]
    21ac:	4659      	mov	r1, fp
    21ae:	4798      	blx	r3
    21b0:	2800      	cmp	r0, #0
    21b2:	f2c0 8356 	blt.w	2862 <cbvprintf+0x6da>
    21b6:	3501      	adds	r5, #1
			break;
    21b8:	e212      	b.n	25e0 <cbvprintf+0x458>
		} state = {
    21ba:	2218      	movs	r2, #24
    21bc:	2100      	movs	r1, #0
    21be:	a80a      	add	r0, sp, #40	; 0x28
    21c0:	f021 fdfd 	bl	23dbe <memset>
	if (*sp == '%') {
    21c4:	f89a 3001 	ldrb.w	r3, [sl, #1]
    21c8:	2b25      	cmp	r3, #37	; 0x25
    21ca:	d078      	beq.n	22be <cbvprintf+0x136>
    21cc:	2200      	movs	r2, #0
    21ce:	4610      	mov	r0, r2
    21d0:	4696      	mov	lr, r2
    21d2:	4694      	mov	ip, r2
    21d4:	4616      	mov	r6, r2
    21d6:	4639      	mov	r1, r7
		switch (*sp) {
    21d8:	f817 3b01 	ldrb.w	r3, [r7], #1
    21dc:	2b2b      	cmp	r3, #43	; 0x2b
    21de:	f000 809d 	beq.w	231c <cbvprintf+0x194>
    21e2:	f200 8094 	bhi.w	230e <cbvprintf+0x186>
    21e6:	2b20      	cmp	r3, #32
    21e8:	f000 809b 	beq.w	2322 <cbvprintf+0x19a>
    21ec:	2b23      	cmp	r3, #35	; 0x23
    21ee:	f000 809b 	beq.w	2328 <cbvprintf+0x1a0>
    21f2:	b12e      	cbz	r6, 2200 <cbvprintf+0x78>
    21f4:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    21f8:	f046 0604 	orr.w	r6, r6, #4
    21fc:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    2200:	f1bc 0f00 	cmp.w	ip, #0
    2204:	d005      	beq.n	2212 <cbvprintf+0x8a>
    2206:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    220a:	f046 0608 	orr.w	r6, r6, #8
    220e:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    2212:	f1be 0f00 	cmp.w	lr, #0
    2216:	d005      	beq.n	2224 <cbvprintf+0x9c>
    2218:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    221c:	f046 0610 	orr.w	r6, r6, #16
    2220:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    2224:	b128      	cbz	r0, 2232 <cbvprintf+0xaa>
    2226:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    222a:	f040 0020 	orr.w	r0, r0, #32
    222e:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    2232:	b12a      	cbz	r2, 2240 <cbvprintf+0xb8>
    2234:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    2238:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    223c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    2240:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    2244:	f002 0044 	and.w	r0, r2, #68	; 0x44
    2248:	2844      	cmp	r0, #68	; 0x44
    224a:	d103      	bne.n	2254 <cbvprintf+0xcc>
		conv->flag_zero = false;
    224c:	f36f 1286 	bfc	r2, #6, #1
    2250:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    2254:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    2258:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    225a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    225e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    2262:	d17b      	bne.n	235c <cbvprintf+0x1d4>
		conv->width_star = true;
    2264:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    2268:	f042 0201 	orr.w	r2, r2, #1
			++sp;
    226c:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    226e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    2272:	781a      	ldrb	r2, [r3, #0]
    2274:	2a2e      	cmp	r2, #46	; 0x2e
    2276:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    227a:	bf0c      	ite	eq
    227c:	2101      	moveq	r1, #1
    227e:	2100      	movne	r1, #0
    2280:	f361 0241 	bfi	r2, r1, #1, #1
    2284:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    2288:	d174      	bne.n	2374 <cbvprintf+0x1ec>
	if (*sp == '*') {
    228a:	785a      	ldrb	r2, [r3, #1]
    228c:	2a2a      	cmp	r2, #42	; 0x2a
    228e:	d06a      	beq.n	2366 <cbvprintf+0x1de>
	++sp;
    2290:	3301      	adds	r3, #1
	size_t val = 0;
    2292:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    2294:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    2296:	4618      	mov	r0, r3
    2298:	f810 2b01 	ldrb.w	r2, [r0], #1
    229c:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    22a0:	2f09      	cmp	r7, #9
    22a2:	f240 808e 	bls.w	23c2 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    22a6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    22aa:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    22ac:	f3c2 0040 	ubfx	r0, r2, #1, #1
    22b0:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    22b4:	f361 0241 	bfi	r2, r1, #1, #1
    22b8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    22bc:	e05a      	b.n	2374 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    22be:	f10a 0702 	add.w	r7, sl, #2
    22c2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    22c6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    22ca:	07d9      	lsls	r1, r3, #31
    22cc:	f140 8149 	bpl.w	2562 <cbvprintf+0x3da>
			width = va_arg(ap, int);
    22d0:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    22d4:	f1b9 0f00 	cmp.w	r9, #0
    22d8:	da07      	bge.n	22ea <cbvprintf+0x162>
				conv->flag_dash = true;
    22da:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    22de:	f042 0204 	orr.w	r2, r2, #4
    22e2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
    22e6:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
    22ea:	075a      	lsls	r2, r3, #29
    22ec:	f140 8142 	bpl.w	2574 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
    22f0:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    22f4:	f1b8 0f00 	cmp.w	r8, #0
    22f8:	f280 8141 	bge.w	257e <cbvprintf+0x3f6>
				conv->prec_present = false;
    22fc:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    2300:	f36f 0341 	bfc	r3, #1, #1
    2304:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    2308:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    230c:	e137      	b.n	257e <cbvprintf+0x3f6>
		switch (*sp) {
    230e:	2b2d      	cmp	r3, #45	; 0x2d
    2310:	d00c      	beq.n	232c <cbvprintf+0x1a4>
    2312:	2b30      	cmp	r3, #48	; 0x30
    2314:	f47f af6d 	bne.w	21f2 <cbvprintf+0x6a>
			conv->flag_zero = true;
    2318:	2201      	movs	r2, #1
	} while (loop);
    231a:	e75c      	b.n	21d6 <cbvprintf+0x4e>
			conv->flag_plus = true;
    231c:	f04f 0c01 	mov.w	ip, #1
    2320:	e759      	b.n	21d6 <cbvprintf+0x4e>
			conv->flag_space = true;
    2322:	f04f 0e01 	mov.w	lr, #1
    2326:	e756      	b.n	21d6 <cbvprintf+0x4e>
			conv->flag_hash = true;
    2328:	2001      	movs	r0, #1
    232a:	e754      	b.n	21d6 <cbvprintf+0x4e>
		switch (*sp) {
    232c:	2601      	movs	r6, #1
    232e:	e752      	b.n	21d6 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    2330:	fb0c 0202 	mla	r2, ip, r2, r0
    2334:	3a30      	subs	r2, #48	; 0x30
    2336:	4633      	mov	r3, r6
    2338:	461e      	mov	r6, r3
    233a:	f816 0b01 	ldrb.w	r0, [r6], #1
    233e:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    2342:	2f09      	cmp	r7, #9
    2344:	d9f4      	bls.n	2330 <cbvprintf+0x1a8>
	if (sp != wp) {
    2346:	4299      	cmp	r1, r3
    2348:	d093      	beq.n	2272 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    234a:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    234e:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    2350:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    2352:	f362 0141 	bfi	r1, r2, #1, #1
    2356:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    235a:	e78a      	b.n	2272 <cbvprintf+0xea>
    235c:	460b      	mov	r3, r1
	size_t val = 0;
    235e:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    2360:	f04f 0c0a 	mov.w	ip, #10
    2364:	e7e8      	b.n	2338 <cbvprintf+0x1b0>
		conv->prec_star = true;
    2366:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    236a:	f042 0204 	orr.w	r2, r2, #4
    236e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    2372:	3302      	adds	r3, #2
	switch (*sp) {
    2374:	461f      	mov	r7, r3
    2376:	f817 2b01 	ldrb.w	r2, [r7], #1
    237a:	2a6c      	cmp	r2, #108	; 0x6c
    237c:	d041      	beq.n	2402 <cbvprintf+0x27a>
    237e:	d825      	bhi.n	23cc <cbvprintf+0x244>
    2380:	2a68      	cmp	r2, #104	; 0x68
    2382:	d02b      	beq.n	23dc <cbvprintf+0x254>
    2384:	2a6a      	cmp	r2, #106	; 0x6a
    2386:	d046      	beq.n	2416 <cbvprintf+0x28e>
    2388:	2a4c      	cmp	r2, #76	; 0x4c
    238a:	d04c      	beq.n	2426 <cbvprintf+0x29e>
    238c:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    238e:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    2392:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
    2396:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    239a:	2a78      	cmp	r2, #120	; 0x78
    239c:	f200 80d9 	bhi.w	2552 <cbvprintf+0x3ca>
    23a0:	2a57      	cmp	r2, #87	; 0x57
    23a2:	d84d      	bhi.n	2440 <cbvprintf+0x2b8>
    23a4:	2a41      	cmp	r2, #65	; 0x41
    23a6:	d003      	beq.n	23b0 <cbvprintf+0x228>
    23a8:	3a45      	subs	r2, #69	; 0x45
    23aa:	2a02      	cmp	r2, #2
    23ac:	f200 80d1 	bhi.w	2552 <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    23b0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    23b4:	2204      	movs	r2, #4
    23b6:	f362 0302 	bfi	r3, r2, #0, #3
    23ba:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    23be:	2301      	movs	r3, #1
			break;
    23c0:	e09e      	b.n	2500 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
    23c2:	fb06 2101 	mla	r1, r6, r1, r2
    23c6:	3930      	subs	r1, #48	; 0x30
    23c8:	4603      	mov	r3, r0
    23ca:	e764      	b.n	2296 <cbvprintf+0x10e>
	switch (*sp) {
    23cc:	2a74      	cmp	r2, #116	; 0x74
    23ce:	d026      	beq.n	241e <cbvprintf+0x296>
    23d0:	2a7a      	cmp	r2, #122	; 0x7a
    23d2:	d1db      	bne.n	238c <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    23d4:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    23d8:	2206      	movs	r2, #6
    23da:	e00d      	b.n	23f8 <cbvprintf+0x270>
		if (*++sp == 'h') {
    23dc:	785a      	ldrb	r2, [r3, #1]
    23de:	2a68      	cmp	r2, #104	; 0x68
    23e0:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    23e4:	d106      	bne.n	23f4 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
    23e6:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    23e8:	f361 02c6 	bfi	r2, r1, #3, #4
    23ec:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    23f0:	1c9f      	adds	r7, r3, #2
    23f2:	e7cc      	b.n	238e <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    23f4:	4613      	mov	r3, r2
    23f6:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    23f8:	f362 03c6 	bfi	r3, r2, #3, #4
    23fc:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    2400:	e7c5      	b.n	238e <cbvprintf+0x206>
		if (*++sp == 'l') {
    2402:	785a      	ldrb	r2, [r3, #1]
    2404:	2a6c      	cmp	r2, #108	; 0x6c
    2406:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    240a:	d101      	bne.n	2410 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
    240c:	2104      	movs	r1, #4
    240e:	e7eb      	b.n	23e8 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
    2410:	4613      	mov	r3, r2
    2412:	2203      	movs	r2, #3
    2414:	e7f0      	b.n	23f8 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
    2416:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    241a:	2205      	movs	r2, #5
    241c:	e7ec      	b.n	23f8 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
    241e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    2422:	2207      	movs	r2, #7
    2424:	e7e8      	b.n	23f8 <cbvprintf+0x270>
		conv->unsupported = true;
    2426:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    242a:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    242e:	f023 0302 	bic.w	r3, r3, #2
    2432:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    2436:	f043 0302 	orr.w	r3, r3, #2
    243a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    243e:	e7a6      	b.n	238e <cbvprintf+0x206>
	switch (conv->specifier) {
    2440:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    2444:	2920      	cmp	r1, #32
    2446:	f200 8084 	bhi.w	2552 <cbvprintf+0x3ca>
    244a:	a001      	add	r0, pc, #4	; (adr r0, 2450 <cbvprintf+0x2c8>)
    244c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    2450:	00002515 	.word	0x00002515
    2454:	00002553 	.word	0x00002553
    2458:	00002553 	.word	0x00002553
    245c:	00002553 	.word	0x00002553
    2460:	00002553 	.word	0x00002553
    2464:	00002553 	.word	0x00002553
    2468:	00002553 	.word	0x00002553
    246c:	00002553 	.word	0x00002553
    2470:	00002553 	.word	0x00002553
    2474:	000023b1 	.word	0x000023b1
    2478:	00002553 	.word	0x00002553
    247c:	00002515 	.word	0x00002515
    2480:	000024d5 	.word	0x000024d5
    2484:	000023b1 	.word	0x000023b1
    2488:	000023b1 	.word	0x000023b1
    248c:	000023b1 	.word	0x000023b1
    2490:	00002553 	.word	0x00002553
    2494:	000024d5 	.word	0x000024d5
    2498:	00002553 	.word	0x00002553
    249c:	00002553 	.word	0x00002553
    24a0:	00002553 	.word	0x00002553
    24a4:	00002553 	.word	0x00002553
    24a8:	0000251d 	.word	0x0000251d
    24ac:	00002515 	.word	0x00002515
    24b0:	00002539 	.word	0x00002539
    24b4:	00002553 	.word	0x00002553
    24b8:	00002553 	.word	0x00002553
    24bc:	00002539 	.word	0x00002539
    24c0:	00002553 	.word	0x00002553
    24c4:	00002515 	.word	0x00002515
    24c8:	00002553 	.word	0x00002553
    24cc:	00002553 	.word	0x00002553
    24d0:	00002515 	.word	0x00002515
		conv->specifier_cat = SPECIFIER_SINT;
    24d4:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    24d8:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    24da:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    24de:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    24e2:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    24e4:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    24e8:	bf02      	ittt	eq
    24ea:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    24ee:	f041 0101 	orreq.w	r1, r1, #1
    24f2:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    24f6:	2a63      	cmp	r2, #99	; 0x63
    24f8:	d131      	bne.n	255e <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    24fa:	3b00      	subs	r3, #0
    24fc:	bf18      	it	ne
    24fe:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    2500:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    2504:	f3c2 0140 	ubfx	r1, r2, #1, #1
    2508:	430b      	orrs	r3, r1
    250a:	f363 0241 	bfi	r2, r3, #1, #1
    250e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    2512:	e6d8      	b.n	22c6 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    2514:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    2518:	2002      	movs	r0, #2
    251a:	e7de      	b.n	24da <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    251c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    2520:	f003 0378 	and.w	r3, r3, #120	; 0x78
    2524:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    2528:	2103      	movs	r1, #3
    252a:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    252e:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    2530:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    2534:	4143      	adcs	r3, r0
    2536:	e7e3      	b.n	2500 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    2538:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    253c:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    253e:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    2542:	f361 0202 	bfi	r2, r1, #0, #3
    2546:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    254a:	bf14      	ite	ne
    254c:	2301      	movne	r3, #1
    254e:	2300      	moveq	r3, #0
    2550:	e7d6      	b.n	2500 <cbvprintf+0x378>
		conv->invalid = true;
    2552:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    2556:	f043 0301 	orr.w	r3, r3, #1
    255a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    255e:	2300      	movs	r3, #0
    2560:	e7ce      	b.n	2500 <cbvprintf+0x378>
		} else if (conv->width_present) {
    2562:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    2566:	2a00      	cmp	r2, #0
			width = conv->width_value;
    2568:	bfb4      	ite	lt
    256a:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
    256e:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
    2572:	e6ba      	b.n	22ea <cbvprintf+0x162>
		} else if (conv->prec_present) {
    2574:	079b      	lsls	r3, r3, #30
    2576:	f57f aec7 	bpl.w	2308 <cbvprintf+0x180>
			precision = conv->prec_value;
    257a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    257e:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    2582:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    2584:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    2588:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    258c:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    2590:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    2592:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    2596:	d138      	bne.n	260a <cbvprintf+0x482>
			switch (length_mod) {
    2598:	1ecb      	subs	r3, r1, #3
    259a:	2b04      	cmp	r3, #4
    259c:	d822      	bhi.n	25e4 <cbvprintf+0x45c>
    259e:	e8df f003 	tbb	[pc, r3]
    25a2:	0903      	.short	0x0903
    25a4:	2109      	.short	0x2109
    25a6:	21          	.byte	0x21
    25a7:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    25a8:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    25ac:	17da      	asrs	r2, r3, #31
    25ae:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    25b2:	e006      	b.n	25c2 <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
    25b4:	3407      	adds	r4, #7
    25b6:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    25ba:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    25be:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    25c2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    25c6:	f013 0603 	ands.w	r6, r3, #3
    25ca:	d056      	beq.n	267a <cbvprintf+0x4f2>
			OUTS(sp, fp);
    25cc:	9802      	ldr	r0, [sp, #8]
    25ce:	463b      	mov	r3, r7
    25d0:	4652      	mov	r2, sl
    25d2:	4659      	mov	r1, fp
    25d4:	f01f fa2f 	bl	21a36 <outs>
    25d8:	2800      	cmp	r0, #0
    25da:	f2c0 8142 	blt.w	2862 <cbvprintf+0x6da>
    25de:	4405      	add	r5, r0
			continue;
    25e0:	46ba      	mov	sl, r7
    25e2:	e5d9      	b.n	2198 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    25e4:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    25e8:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    25ea:	ea4f 72e3 	mov.w	r2, r3, asr #31
    25ee:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    25f2:	d105      	bne.n	2600 <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
    25f4:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    25f8:	930a      	str	r3, [sp, #40]	; 0x28
    25fa:	2300      	movs	r3, #0
    25fc:	930b      	str	r3, [sp, #44]	; 0x2c
    25fe:	e7e0      	b.n	25c2 <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
    2600:	2902      	cmp	r1, #2
    2602:	d1de      	bne.n	25c2 <cbvprintf+0x43a>
				value->sint = (short)value->sint;
    2604:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
    2608:	e7d0      	b.n	25ac <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
    260a:	2b02      	cmp	r3, #2
    260c:	d123      	bne.n	2656 <cbvprintf+0x4ce>
			switch (length_mod) {
    260e:	1ecb      	subs	r3, r1, #3
    2610:	2b04      	cmp	r3, #4
    2612:	d813      	bhi.n	263c <cbvprintf+0x4b4>
    2614:	e8df f003 	tbb	[pc, r3]
    2618:	120a0a03 	.word	0x120a0a03
    261c:	12          	.byte	0x12
    261d:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    261e:	6822      	ldr	r2, [r4, #0]
    2620:	920a      	str	r2, [sp, #40]	; 0x28
    2622:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    2624:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    2626:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    2628:	4604      	mov	r4, r0
    262a:	e7ca      	b.n	25c2 <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
    262c:	1de0      	adds	r0, r4, #7
    262e:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    2632:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    2636:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    263a:	e7f5      	b.n	2628 <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
    263c:	f854 3b04 	ldr.w	r3, [r4], #4
    2640:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    2642:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    2644:	f04f 0300 	mov.w	r3, #0
    2648:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    264a:	d0d3      	beq.n	25f4 <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
    264c:	2902      	cmp	r1, #2
    264e:	d1b8      	bne.n	25c2 <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
    2650:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    2654:	e7d0      	b.n	25f8 <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
    2656:	2b04      	cmp	r3, #4
    2658:	d109      	bne.n	266e <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
    265a:	1de3      	adds	r3, r4, #7
    265c:	f023 0307 	bic.w	r3, r3, #7
    2660:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    2664:	e9d3 2300 	ldrd	r2, r3, [r3]
    2668:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    266c:	e7a9      	b.n	25c2 <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    266e:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    2670:	bf04      	itt	eq
    2672:	f854 3b04 	ldreq.w	r3, [r4], #4
    2676:	930a      	streq	r3, [sp, #40]	; 0x28
    2678:	e7a3      	b.n	25c2 <cbvprintf+0x43a>
		switch (conv->specifier) {
    267a:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    267e:	2878      	cmp	r0, #120	; 0x78
    2680:	d8ae      	bhi.n	25e0 <cbvprintf+0x458>
    2682:	2862      	cmp	r0, #98	; 0x62
    2684:	d822      	bhi.n	26cc <cbvprintf+0x544>
    2686:	2825      	cmp	r0, #37	; 0x25
    2688:	f43f ad8f 	beq.w	21aa <cbvprintf+0x22>
    268c:	2858      	cmp	r0, #88	; 0x58
    268e:	d1a7      	bne.n	25e0 <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
    2690:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    2694:	9300      	str	r3, [sp, #0]
    2696:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    269a:	ab04      	add	r3, sp, #16
    269c:	aa0c      	add	r2, sp, #48	; 0x30
    269e:	f01f f984 	bl	219aa <encode_uint>
    26a2:	4682      	mov	sl, r0
			if (precision >= 0) {
    26a4:	f1b8 0f00 	cmp.w	r8, #0
    26a8:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    26ac:	db0c      	blt.n	26c8 <cbvprintf+0x540>
				conv->flag_zero = false;
    26ae:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    26b2:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    26b6:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    26ba:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    26bc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    26c0:	d902      	bls.n	26c8 <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
    26c2:	eba8 0303 	sub.w	r3, r8, r3
    26c6:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    26c8:	4680      	mov	r8, r0
    26ca:	e03d      	b.n	2748 <cbvprintf+0x5c0>
		switch (conv->specifier) {
    26cc:	3863      	subs	r0, #99	; 0x63
    26ce:	2815      	cmp	r0, #21
    26d0:	d886      	bhi.n	25e0 <cbvprintf+0x458>
    26d2:	a201      	add	r2, pc, #4	; (adr r2, 26d8 <cbvprintf+0x550>)
    26d4:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    26d8:	00002759 	.word	0x00002759
    26dc:	000027bd 	.word	0x000027bd
    26e0:	000025e1 	.word	0x000025e1
    26e4:	000025e1 	.word	0x000025e1
    26e8:	000025e1 	.word	0x000025e1
    26ec:	000025e1 	.word	0x000025e1
    26f0:	000027bd 	.word	0x000027bd
    26f4:	000025e1 	.word	0x000025e1
    26f8:	000025e1 	.word	0x000025e1
    26fc:	000025e1 	.word	0x000025e1
    2700:	000025e1 	.word	0x000025e1
    2704:	00002817 	.word	0x00002817
    2708:	000027e5 	.word	0x000027e5
    270c:	000027e9 	.word	0x000027e9
    2710:	000025e1 	.word	0x000025e1
    2714:	000025e1 	.word	0x000025e1
    2718:	00002731 	.word	0x00002731
    271c:	000025e1 	.word	0x000025e1
    2720:	000027e5 	.word	0x000027e5
    2724:	000025e1 	.word	0x000025e1
    2728:	000025e1 	.word	0x000025e1
    272c:	000027e5 	.word	0x000027e5
			if (precision >= 0) {
    2730:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    2734:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    2738:	db0a      	blt.n	2750 <cbvprintf+0x5c8>
				len = strnlen(bps, precision);
    273a:	4641      	mov	r1, r8
    273c:	4650      	mov	r0, sl
    273e:	f021 fafc 	bl	23d3a <strnlen>
			bpe = bps + len;
    2742:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    2746:	2600      	movs	r6, #0
		if (bps == NULL) {
    2748:	f1ba 0f00 	cmp.w	sl, #0
    274c:	d10c      	bne.n	2768 <cbvprintf+0x5e0>
    274e:	e747      	b.n	25e0 <cbvprintf+0x458>
				len = strlen(bps);
    2750:	4650      	mov	r0, sl
    2752:	f021 faeb 	bl	23d2c <strlen>
    2756:	e7f4      	b.n	2742 <cbvprintf+0x5ba>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    2758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    275a:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    275e:	2600      	movs	r6, #0
			bps = buf;
    2760:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
    2764:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    2768:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    276c:	b106      	cbz	r6, 2770 <cbvprintf+0x5e8>
			nj_len += 1U;
    276e:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    2770:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    2774:	06d0      	lsls	r0, r2, #27
    2776:	d568      	bpl.n	284a <cbvprintf+0x6c2>
			nj_len += 2U;
    2778:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    277a:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    277c:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    277e:	bf48      	it	mi
    2780:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    2782:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    2784:	bf48      	it	mi
    2786:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    2788:	f1b9 0f00 	cmp.w	r9, #0
    278c:	dd76      	ble.n	287c <cbvprintf+0x6f4>
			if (!conv->flag_dash) {
    278e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    2792:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    2796:	f3c2 0380 	ubfx	r3, r2, #2, #1
    279a:	9303      	str	r3, [sp, #12]
    279c:	0753      	lsls	r3, r2, #29
    279e:	d46d      	bmi.n	287c <cbvprintf+0x6f4>
				if (conv->flag_zero) {
    27a0:	0650      	lsls	r0, r2, #25
    27a2:	d561      	bpl.n	2868 <cbvprintf+0x6e0>
					if (sign != 0) {
    27a4:	b146      	cbz	r6, 27b8 <cbvprintf+0x630>
						OUTC(sign);
    27a6:	9b02      	ldr	r3, [sp, #8]
    27a8:	4659      	mov	r1, fp
    27aa:	4630      	mov	r0, r6
    27ac:	4798      	blx	r3
    27ae:	2800      	cmp	r0, #0
    27b0:	db57      	blt.n	2862 <cbvprintf+0x6da>
						sign = 0;
    27b2:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    27b4:	3501      	adds	r5, #1
						sign = 0;
    27b6:	461e      	mov	r6, r3
					pad = '0';
    27b8:	2330      	movs	r3, #48	; 0x30
    27ba:	e056      	b.n	286a <cbvprintf+0x6e2>
			if (conv->flag_plus) {
    27bc:	071e      	lsls	r6, r3, #28
    27be:	d40f      	bmi.n	27e0 <cbvprintf+0x658>
				sign = ' ';
    27c0:	f013 0610 	ands.w	r6, r3, #16
    27c4:	bf18      	it	ne
    27c6:	2620      	movne	r6, #32
			sint = value->sint;
    27c8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    27cc:	2b00      	cmp	r3, #0
    27ce:	f6bf af5f 	bge.w	2690 <cbvprintf+0x508>
				value->uint = (uint_value_type)-sint;
    27d2:	4252      	negs	r2, r2
    27d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    27d8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    27dc:	262d      	movs	r6, #45	; 0x2d
    27de:	e757      	b.n	2690 <cbvprintf+0x508>
				sign = '+';
    27e0:	262b      	movs	r6, #43	; 0x2b
    27e2:	e7f1      	b.n	27c8 <cbvprintf+0x640>
		switch (conv->specifier) {
    27e4:	2600      	movs	r6, #0
    27e6:	e753      	b.n	2690 <cbvprintf+0x508>
			if (value->ptr != NULL) {
    27e8:	980a      	ldr	r0, [sp, #40]	; 0x28
    27ea:	b340      	cbz	r0, 283e <cbvprintf+0x6b6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    27ec:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    27f0:	9300      	str	r3, [sp, #0]
    27f2:	aa0c      	add	r2, sp, #48	; 0x30
    27f4:	ab04      	add	r3, sp, #16
    27f6:	2100      	movs	r1, #0
    27f8:	f01f f8d7 	bl	219aa <encode_uint>
				conv->altform_0c = true;
    27fc:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    2800:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    2804:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    2808:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    280c:	4682      	mov	sl, r0
				conv->altform_0c = true;
    280e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    2812:	2600      	movs	r6, #0
				goto prec_int_pad0;
    2814:	e746      	b.n	26a4 <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
    2816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    2818:	2907      	cmp	r1, #7
    281a:	f63f aee1 	bhi.w	25e0 <cbvprintf+0x458>
    281e:	e8df f001 	tbb	[pc, r1]
    2822:	040c      	.short	0x040c
    2824:	08080c06 	.word	0x08080c06
    2828:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    282a:	701d      	strb	r5, [r3, #0]
		break;
    282c:	e6d8      	b.n	25e0 <cbvprintf+0x458>
		*(short *)dp = (short)count;
    282e:	801d      	strh	r5, [r3, #0]
		break;
    2830:	e6d6      	b.n	25e0 <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
    2832:	17ea      	asrs	r2, r5, #31
    2834:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    2838:	e6d2      	b.n	25e0 <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    283a:	601d      	str	r5, [r3, #0]
		break;
    283c:	e6d0      	b.n	25e0 <cbvprintf+0x458>
			bps = "(nil)";
    283e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 2908 <cbvprintf+0x780>
    2842:	4606      	mov	r6, r0
			bpe = bps + 5;
    2844:	f10a 0805 	add.w	r8, sl, #5
    2848:	e78e      	b.n	2768 <cbvprintf+0x5e0>
		} else if (conv->altform_0) {
    284a:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    284c:	bf48      	it	mi
    284e:	3301      	addmi	r3, #1
    2850:	e793      	b.n	277a <cbvprintf+0x5f2>
					OUTC(pad);
    2852:	4618      	mov	r0, r3
    2854:	9303      	str	r3, [sp, #12]
    2856:	4659      	mov	r1, fp
    2858:	9b02      	ldr	r3, [sp, #8]
    285a:	4798      	blx	r3
    285c:	2800      	cmp	r0, #0
    285e:	9b03      	ldr	r3, [sp, #12]
    2860:	da04      	bge.n	286c <cbvprintf+0x6e4>
#undef OUTS
#undef OUTC
}
    2862:	b011      	add	sp, #68	; 0x44
    2864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    2868:	2320      	movs	r3, #32
    286a:	444d      	add	r5, r9
    286c:	464a      	mov	r2, r9
				while (width-- > 0) {
    286e:	2a00      	cmp	r2, #0
    2870:	eba5 0109 	sub.w	r1, r5, r9
    2874:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    2878:	dceb      	bgt.n	2852 <cbvprintf+0x6ca>
    287a:	460d      	mov	r5, r1
		if (sign != 0) {
    287c:	b136      	cbz	r6, 288c <cbvprintf+0x704>
			OUTC(sign);
    287e:	9b02      	ldr	r3, [sp, #8]
    2880:	4659      	mov	r1, fp
    2882:	4630      	mov	r0, r6
    2884:	4798      	blx	r3
    2886:	2800      	cmp	r0, #0
    2888:	dbeb      	blt.n	2862 <cbvprintf+0x6da>
    288a:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    288c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    2890:	06d9      	lsls	r1, r3, #27
    2892:	d401      	bmi.n	2898 <cbvprintf+0x710>
    2894:	071a      	lsls	r2, r3, #28
    2896:	d506      	bpl.n	28a6 <cbvprintf+0x71e>
				OUTC('0');
    2898:	9b02      	ldr	r3, [sp, #8]
    289a:	4659      	mov	r1, fp
    289c:	2030      	movs	r0, #48	; 0x30
    289e:	4798      	blx	r3
    28a0:	2800      	cmp	r0, #0
    28a2:	dbde      	blt.n	2862 <cbvprintf+0x6da>
    28a4:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    28a6:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    28aa:	06db      	lsls	r3, r3, #27
    28ac:	d507      	bpl.n	28be <cbvprintf+0x736>
				OUTC(conv->specifier);
    28ae:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    28b2:	9b02      	ldr	r3, [sp, #8]
    28b4:	4659      	mov	r1, fp
    28b6:	4798      	blx	r3
    28b8:	2800      	cmp	r0, #0
    28ba:	dbd2      	blt.n	2862 <cbvprintf+0x6da>
    28bc:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    28be:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    28c0:	442e      	add	r6, r5
    28c2:	1b73      	subs	r3, r6, r5
    28c4:	2b00      	cmp	r3, #0
    28c6:	dc16      	bgt.n	28f6 <cbvprintf+0x76e>
			OUTS(bps, bpe);
    28c8:	9802      	ldr	r0, [sp, #8]
    28ca:	4643      	mov	r3, r8
    28cc:	4652      	mov	r2, sl
    28ce:	4659      	mov	r1, fp
    28d0:	f01f f8b1 	bl	21a36 <outs>
    28d4:	2800      	cmp	r0, #0
    28d6:	dbc4      	blt.n	2862 <cbvprintf+0x6da>
    28d8:	4405      	add	r5, r0
		while (width > 0) {
    28da:	44a9      	add	r9, r5
    28dc:	eba9 0305 	sub.w	r3, r9, r5
    28e0:	2b00      	cmp	r3, #0
    28e2:	f77f ae7d 	ble.w	25e0 <cbvprintf+0x458>
			OUTC(' ');
    28e6:	9b02      	ldr	r3, [sp, #8]
    28e8:	4659      	mov	r1, fp
    28ea:	2020      	movs	r0, #32
    28ec:	4798      	blx	r3
    28ee:	2800      	cmp	r0, #0
    28f0:	dbb7      	blt.n	2862 <cbvprintf+0x6da>
    28f2:	3501      	adds	r5, #1
			--width;
    28f4:	e7f2      	b.n	28dc <cbvprintf+0x754>
				OUTC('0');
    28f6:	9b02      	ldr	r3, [sp, #8]
    28f8:	4659      	mov	r1, fp
    28fa:	2030      	movs	r0, #48	; 0x30
    28fc:	4798      	blx	r3
    28fe:	2800      	cmp	r0, #0
    2900:	dbaf      	blt.n	2862 <cbvprintf+0x6da>
    2902:	3501      	adds	r5, #1
    2904:	e7dd      	b.n	28c2 <cbvprintf+0x73a>
    2906:	bf00      	nop
    2908:	0002ab6e 	.word	0x0002ab6e

0000290c <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    290c:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    290e:	4910      	ldr	r1, [pc, #64]	; (2950 <enable_logger+0x44>)
    2910:	4810      	ldr	r0, [pc, #64]	; (2954 <enable_logger+0x48>)
{
    2912:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    2914:	2200      	movs	r2, #0
    2916:	f026 fc3e 	bl	29196 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    291a:	4d0f      	ldr	r5, [pc, #60]	; (2958 <enable_logger+0x4c>)
    291c:	490f      	ldr	r1, [pc, #60]	; (295c <enable_logger+0x50>)
    291e:	2200      	movs	r2, #0
    2920:	2300      	movs	r3, #0
    2922:	e9cd 2306 	strd	r2, r3, [sp, #24]
    2926:	2400      	movs	r4, #0
    2928:	230e      	movs	r3, #14
    292a:	e9cd 3403 	strd	r3, r4, [sp, #12]
    292e:	e9cd 4401 	strd	r4, r4, [sp, #4]
    2932:	4b0b      	ldr	r3, [pc, #44]	; (2960 <enable_logger+0x54>)
    2934:	9400      	str	r4, [sp, #0]
    2936:	f44f 7240 	mov.w	r2, #768	; 0x300
    293a:	4628      	mov	r0, r5
    293c:	f01d f9de 	bl	1fcfc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    2940:	4908      	ldr	r1, [pc, #32]	; (2964 <enable_logger+0x58>)
    2942:	4628      	mov	r0, r5
    2944:	f026 f87d 	bl	28a42 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    2948:	4620      	mov	r0, r4
    294a:	b009      	add	sp, #36	; 0x24
    294c:	bd30      	pop	{r4, r5, pc}
    294e:	bf00      	nop
    2950:	00002969 	.word	0x00002969
    2954:	20001388 	.word	0x20001388
    2958:	200013c0 	.word	0x200013c0
    295c:	20003d20 	.word	0x20003d20
    2960:	00002ca9 	.word	0x00002ca9
    2964:	0002ab74 	.word	0x0002ab74

00002968 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    2968:	4801      	ldr	r0, [pc, #4]	; (2970 <log_process_thread_timer_expiry_fn+0x8>)
    296a:	f01d bb53 	b.w	20014 <z_impl_k_sem_give>
    296e:	bf00      	nop
    2970:	20001110 	.word	0x20001110

00002974 <log_core_init>:
	panic_mode = false;
    2974:	4a0c      	ldr	r2, [pc, #48]	; (29a8 <log_core_init+0x34>)
    2976:	2300      	movs	r3, #0
{
    2978:	b510      	push	{r4, lr}
	panic_mode = false;
    297a:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    297c:	4a0b      	ldr	r2, [pc, #44]	; (29ac <log_core_init+0x38>)
    297e:	6013      	str	r3, [r2, #0]
		timestamp_func = default_get_timestamp;
    2980:	4b0b      	ldr	r3, [pc, #44]	; (29b0 <log_core_init+0x3c>)
    2982:	4a0c      	ldr	r2, [pc, #48]	; (29b4 <log_core_init+0x40>)
    2984:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    2986:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    298a:	f000 fcb9 	bl	3300 <log_output_timestamp_freq_set>
		log_msg_pool_init();
    298e:	f000 fa6b 	bl	2e68 <log_msg_pool_init>
		log_list_init(&list);
    2992:	4809      	ldr	r0, [pc, #36]	; (29b8 <log_core_init+0x44>)
    2994:	f01f f866 	bl	21a64 <log_list_init>
}
    2998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    299c:	4907      	ldr	r1, [pc, #28]	; (29bc <log_core_init+0x48>)
    299e:	4808      	ldr	r0, [pc, #32]	; (29c0 <log_core_init+0x4c>)
    29a0:	2308      	movs	r3, #8
    29a2:	2248      	movs	r2, #72	; 0x48
    29a4:	f026 b803 	b.w	289ae <k_mem_slab_init>
    29a8:	2000372d 	.word	0x2000372d
    29ac:	20001fe8 	.word	0x20001fe8
    29b0:	20000740 	.word	0x20000740
    29b4:	00021aa3 	.word	0x00021aa3
    29b8:	20001ff0 	.word	0x20001ff0
    29bc:	200071a8 	.word	0x200071a8
    29c0:	20001ff8 	.word	0x20001ff8

000029c4 <log_init>:
{
    29c4:	b570      	push	{r4, r5, r6, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    29c6:	4b12      	ldr	r3, [pc, #72]	; (2a10 <log_init+0x4c>)
    29c8:	f3bf 8f5b 	dmb	ish
    29cc:	e853 5f00 	ldrex	r5, [r3]
    29d0:	1c6a      	adds	r2, r5, #1
    29d2:	e843 2100 	strex	r1, r2, [r3]
    29d6:	2900      	cmp	r1, #0
    29d8:	d1f8      	bne.n	29cc <log_init+0x8>
    29da:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    29de:	b92d      	cbnz	r5, 29ec <log_init+0x28>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    29e0:	4c0c      	ldr	r4, [pc, #48]	; (2a14 <log_init+0x50>)
    29e2:	4e0d      	ldr	r6, [pc, #52]	; (2a18 <log_init+0x54>)
    29e4:	1b36      	subs	r6, r6, r4
    29e6:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    29e8:	42b5      	cmp	r5, r6
    29ea:	db00      	blt.n	29ee <log_init+0x2a>
}
    29ec:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    29ee:	7b23      	ldrb	r3, [r4, #12]
    29f0:	b153      	cbz	r3, 2a08 <log_init+0x44>
			if (backend->api->init != NULL) {
    29f2:	6823      	ldr	r3, [r4, #0]
    29f4:	699b      	ldr	r3, [r3, #24]
    29f6:	b10b      	cbz	r3, 29fc <log_init+0x38>
				backend->api->init(backend);
    29f8:	4620      	mov	r0, r4
    29fa:	4798      	blx	r3
			log_backend_enable(backend,
    29fc:	6863      	ldr	r3, [r4, #4]
    29fe:	2204      	movs	r2, #4
    2a00:	6819      	ldr	r1, [r3, #0]
    2a02:	4620      	mov	r0, r4
    2a04:	f000 fa22 	bl	2e4c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    2a08:	3501      	adds	r5, #1
    2a0a:	3410      	adds	r4, #16
    2a0c:	e7ec      	b.n	29e8 <log_init+0x24>
    2a0e:	bf00      	nop
    2a10:	20001fec 	.word	0x20001fec
    2a14:	00029ab0 	.word	0x00029ab0
    2a18:	00029ac0 	.word	0x00029ac0

00002a1c <get_msg>:
{
    2a1c:	b510      	push	{r4, lr}
    2a1e:	f04f 0320 	mov.w	r3, #32
    2a22:	f3ef 8411 	mrs	r4, BASEPRI
    2a26:	f383 8812 	msr	BASEPRI_MAX, r3
    2a2a:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
    2a2e:	4804      	ldr	r0, [pc, #16]	; (2a40 <get_msg+0x24>)
    2a30:	f01f f828 	bl	21a84 <log_list_head_get>
	__asm__ volatile(
    2a34:	f384 8811 	msr	BASEPRI, r4
    2a38:	f3bf 8f6f 	isb	sy
}
    2a3c:	bd10      	pop	{r4, pc}
    2a3e:	bf00      	nop
    2a40:	20001ff0 	.word	0x20001ff0

00002a44 <z_log_notify_backend_enabled>:
{
    2a44:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    2a46:	4c04      	ldr	r4, [pc, #16]	; (2a58 <z_log_notify_backend_enabled+0x14>)
    2a48:	7823      	ldrb	r3, [r4, #0]
    2a4a:	b913      	cbnz	r3, 2a52 <z_log_notify_backend_enabled+0xe>
    2a4c:	4803      	ldr	r0, [pc, #12]	; (2a5c <z_log_notify_backend_enabled+0x18>)
    2a4e:	f01d fae1 	bl	20014 <z_impl_k_sem_give>
	backend_attached = true;
    2a52:	2301      	movs	r3, #1
    2a54:	7023      	strb	r3, [r4, #0]
}
    2a56:	bd10      	pop	{r4, pc}
    2a58:	2000372c 	.word	0x2000372c
    2a5c:	20001110 	.word	0x20001110

00002a60 <z_log_dropped>:
    2a60:	4b06      	ldr	r3, [pc, #24]	; (2a7c <z_log_dropped+0x1c>)
    2a62:	f3bf 8f5b 	dmb	ish
    2a66:	e853 2f00 	ldrex	r2, [r3]
    2a6a:	3201      	adds	r2, #1
    2a6c:	e843 2100 	strex	r1, r2, [r3]
    2a70:	2900      	cmp	r1, #0
    2a72:	d1f8      	bne.n	2a66 <z_log_dropped+0x6>
    2a74:	f3bf 8f5b 	dmb	ish
}
    2a78:	4770      	bx	lr
    2a7a:	bf00      	nop
    2a7c:	20001fe8 	.word	0x20001fe8

00002a80 <z_log_dropped_read_and_clear>:
}
    2a80:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2a82:	4b06      	ldr	r3, [pc, #24]	; (2a9c <z_log_dropped_read_and_clear+0x1c>)
    2a84:	f3bf 8f5b 	dmb	ish
    2a88:	4602      	mov	r2, r0
    2a8a:	e853 0f00 	ldrex	r0, [r3]
    2a8e:	e843 2100 	strex	r1, r2, [r3]
    2a92:	2900      	cmp	r1, #0
    2a94:	d1f9      	bne.n	2a8a <z_log_dropped_read_and_clear+0xa>
    2a96:	f3bf 8f5b 	dmb	ish
    2a9a:	4770      	bx	lr
    2a9c:	20001fe8 	.word	0x20001fe8

00002aa0 <dropped_notify>:
{
    2aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    2aa2:	f7ff ffed 	bl	2a80 <z_log_dropped_read_and_clear>
    2aa6:	4c0a      	ldr	r4, [pc, #40]	; (2ad0 <dropped_notify+0x30>)
    2aa8:	4d0a      	ldr	r5, [pc, #40]	; (2ad4 <dropped_notify+0x34>)
    2aaa:	1b2d      	subs	r5, r5, r4
    2aac:	4607      	mov	r7, r0
    2aae:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    2ab0:	2600      	movs	r6, #0
    2ab2:	42ae      	cmp	r6, r5
    2ab4:	db00      	blt.n	2ab8 <dropped_notify+0x18>
}
    2ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    2ab8:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    2aba:	795b      	ldrb	r3, [r3, #5]
    2abc:	b12b      	cbz	r3, 2aca <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
    2abe:	6823      	ldr	r3, [r4, #0]
    2ac0:	691b      	ldr	r3, [r3, #16]
    2ac2:	b113      	cbz	r3, 2aca <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
    2ac4:	4639      	mov	r1, r7
    2ac6:	4620      	mov	r0, r4
    2ac8:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    2aca:	3601      	adds	r6, #1
    2acc:	3410      	adds	r4, #16
    2ace:	e7f0      	b.n	2ab2 <dropped_notify+0x12>
    2ad0:	00029ab0 	.word	0x00029ab0
    2ad4:	00029ac0 	.word	0x00029ac0

00002ad8 <z_log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    2ad8:	4b16      	ldr	r3, [pc, #88]	; (2b34 <z_log_strdup+0x5c>)
    2ada:	4298      	cmp	r0, r3
{
    2adc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2ade:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    2ae0:	d302      	bcc.n	2ae8 <z_log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    2ae2:	4b15      	ldr	r3, [pc, #84]	; (2b38 <z_log_strdup+0x60>)
    2ae4:	4298      	cmp	r0, r3
    2ae6:	d320      	bcc.n	2b2a <z_log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    2ae8:	4814      	ldr	r0, [pc, #80]	; (2b3c <z_log_strdup+0x64>)
    2aea:	2200      	movs	r2, #0
    2aec:	2300      	movs	r3, #0
    2aee:	a901      	add	r1, sp, #4
    2af0:	f01d f8a4 	bl	1fc3c <k_mem_slab_alloc>
	if (err != 0) {
    2af4:	4605      	mov	r5, r0
    2af6:	b9d8      	cbnz	r0, 2b30 <z_log_strdup+0x58>
    2af8:	2201      	movs	r2, #1
    2afa:	9b01      	ldr	r3, [sp, #4]
    2afc:	f3bf 8f5b 	dmb	ish
    2b00:	e853 1f00 	ldrex	r1, [r3]
    2b04:	e843 2000 	strex	r0, r2, [r3]
    2b08:	2800      	cmp	r0, #0
    2b0a:	d1f9      	bne.n	2b00 <z_log_strdup+0x28>
    2b0c:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    2b10:	9801      	ldr	r0, [sp, #4]
    2b12:	4621      	mov	r1, r4
    2b14:	2241      	movs	r2, #65	; 0x41
    2b16:	3004      	adds	r0, #4
    2b18:	f021 f8f6 	bl	23d08 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    2b1c:	9c01      	ldr	r4, [sp, #4]
    2b1e:	237e      	movs	r3, #126	; 0x7e
    2b20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    2b24:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
	return dup->buf;
    2b28:	3404      	adds	r4, #4
}
    2b2a:	4620      	mov	r0, r4
    2b2c:	b003      	add	sp, #12
    2b2e:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    2b30:	4c03      	ldr	r4, [pc, #12]	; (2b40 <z_log_strdup+0x68>)
    2b32:	e7fa      	b.n	2b2a <z_log_strdup+0x52>
    2b34:	000294a0 	.word	0x000294a0
    2b38:	0002ff18 	.word	0x0002ff18
    2b3c:	20001ff8 	.word	0x20001ff8
    2b40:	0002ab7c 	.word	0x0002ab7c

00002b44 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    2b44:	b150      	cbz	r0, 2b5c <log_is_strdup+0x18>
    2b46:	4b06      	ldr	r3, [pc, #24]	; (2b60 <log_is_strdup+0x1c>)
    2b48:	4298      	cmp	r0, r3
    2b4a:	d306      	bcc.n	2b5a <log_is_strdup+0x16>
    2b4c:	f503 7310 	add.w	r3, r3, #576	; 0x240
    2b50:	4298      	cmp	r0, r3
    2b52:	bf2c      	ite	cs
    2b54:	2000      	movcs	r0, #0
    2b56:	2001      	movcc	r0, #1
    2b58:	4770      	bx	lr
    2b5a:	2000      	movs	r0, #0
}
    2b5c:	4770      	bx	lr
    2b5e:	bf00      	nop
    2b60:	200071a8 	.word	0x200071a8

00002b64 <z_impl_log_process>:
	if (!backend_attached && !bypass) {
    2b64:	4b43      	ldr	r3, [pc, #268]	; (2c74 <z_impl_log_process+0x110>)
    2b66:	781b      	ldrb	r3, [r3, #0]
{
    2b68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b6c:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    2b6e:	b903      	cbnz	r3, 2b72 <z_impl_log_process+0xe>
    2b70:	b300      	cbz	r0, 2bb4 <z_impl_log_process+0x50>
	msg = get_msg();
    2b72:	f7ff ff53 	bl	2a1c <get_msg>
	if (msg.msg) {
    2b76:	4605      	mov	r5, r0
    2b78:	b178      	cbz	r0, 2b9a <z_impl_log_process+0x36>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    2b7a:	f3bf 8f5b 	dmb	ish
    2b7e:	4b3e      	ldr	r3, [pc, #248]	; (2c78 <z_impl_log_process+0x114>)
    2b80:	e853 2f00 	ldrex	r2, [r3]
    2b84:	3a01      	subs	r2, #1
    2b86:	e843 2100 	strex	r1, r2, [r3]
    2b8a:	2900      	cmp	r1, #0
    2b8c:	d1f8      	bne.n	2b80 <z_impl_log_process+0x1c>
    2b8e:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
    2b92:	b19c      	cbz	r4, 2bbc <z_impl_log_process+0x58>
			log_msg_put(msg.msg);
    2b94:	4628      	mov	r0, r5
    2b96:	f01f f8a6 	bl	21ce6 <log_msg_put>
	if (!bypass && z_log_dropped_pending()) {
    2b9a:	b92c      	cbnz	r4, 2ba8 <z_impl_log_process+0x44>
	return dropped_cnt > 0;
    2b9c:	4b37      	ldr	r3, [pc, #220]	; (2c7c <z_impl_log_process+0x118>)
	if (!bypass && z_log_dropped_pending()) {
    2b9e:	681b      	ldr	r3, [r3, #0]
    2ba0:	2b00      	cmp	r3, #0
    2ba2:	dd01      	ble.n	2ba8 <z_impl_log_process+0x44>
		dropped_notify();
    2ba4:	f7ff ff7c 	bl	2aa0 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    2ba8:	4835      	ldr	r0, [pc, #212]	; (2c80 <z_impl_log_process+0x11c>)
    2baa:	f01e ff69 	bl	21a80 <log_list_head_peek>
    2bae:	1e04      	subs	r4, r0, #0
    2bb0:	bf18      	it	ne
    2bb2:	2401      	movne	r4, #1
}
    2bb4:	4620      	mov	r0, r4
    2bb6:	b003      	add	sp, #12
    2bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    2bbc:	4b31      	ldr	r3, [pc, #196]	; (2c84 <z_impl_log_process+0x120>)
		if (!IS_ENABLED(CONFIG_LOG2) &&
    2bbe:	781b      	ldrb	r3, [r3, #0]
    2bc0:	b9bb      	cbnz	r3, 2bf2 <z_impl_log_process+0x8e>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    2bc2:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    2bc4:	07db      	lsls	r3, r3, #31
    2bc6:	d414      	bmi.n	2bf2 <z_impl_log_process+0x8e>
	msg_str = log_msg_str_get(msg);
    2bc8:	f01f f8a0 	bl	21d0c <log_msg_str_get>
    2bcc:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    2bce:	4628      	mov	r0, r5
    2bd0:	f01f f867 	bl	21ca2 <log_msg_nargs_get>
    2bd4:	4601      	mov	r1, r0
    2bd6:	4640      	mov	r0, r8
    2bd8:	f01e ff67 	bl	21aaa <z_log_get_s_mask>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    2bdc:	4b2a      	ldr	r3, [pc, #168]	; (2c88 <z_impl_log_process+0x124>)
    2bde:	4a2b      	ldr	r2, [pc, #172]	; (2c8c <z_impl_log_process+0x128>)
		if (!is_rodata(str) && !log_is_strdup(str) &&
    2be0:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 2c90 <z_impl_log_process+0x12c>
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    2be4:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 2c94 <z_impl_log_process+0x130>
    2be8:	1a9b      	subs	r3, r3, r2
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    2bea:	4606      	mov	r6, r0
    2bec:	ea4f 09d3 	mov.w	r9, r3, lsr #3
	while (mask) {
    2bf0:	b936      	cbnz	r6, 2c00 <z_impl_log_process+0x9c>
	return __log_backends_end - __log_backends_start;
    2bf2:	4e29      	ldr	r6, [pc, #164]	; (2c98 <z_impl_log_process+0x134>)
    2bf4:	4f29      	ldr	r7, [pc, #164]	; (2c9c <z_impl_log_process+0x138>)
    2bf6:	1bbf      	subs	r7, r7, r6
    2bf8:	113f      	asrs	r7, r7, #4
    2bfa:	f04f 0800 	mov.w	r8, #0
    2bfe:	e036      	b.n	2c6e <z_impl_log_process+0x10a>
		idx = 31 - __builtin_clz(mask);
    2c00:	fab6 f786 	clz	r7, r6
    2c04:	f1c7 071f 	rsb	r7, r7, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    2c08:	4639      	mov	r1, r7
    2c0a:	4628      	mov	r0, r5
    2c0c:	f01f f84c 	bl	21ca8 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    2c10:	4b23      	ldr	r3, [pc, #140]	; (2ca0 <z_impl_log_process+0x13c>)
    2c12:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
    2c14:	4602      	mov	r2, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    2c16:	d302      	bcc.n	2c1e <z_impl_log_process+0xba>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    2c18:	4b22      	ldr	r3, [pc, #136]	; (2ca4 <z_impl_log_process+0x140>)
    2c1a:	4298      	cmp	r0, r3
    2c1c:	d316      	bcc.n	2c4c <z_impl_log_process+0xe8>
    2c1e:	4610      	mov	r0, r2
    2c20:	f7ff ff90 	bl	2b44 <log_is_strdup>
    2c24:	b990      	cbnz	r0, 2c4c <z_impl_log_process+0xe8>
    2c26:	4552      	cmp	r2, sl
    2c28:	d010      	beq.n	2c4c <z_impl_log_process+0xe8>
	return msg->hdr.ids.source_id;
    2c2a:	8969      	ldrh	r1, [r5, #10]
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
    2c2c:	f3c1 1189 	ubfx	r1, r1, #6, #10
    2c30:	f000 f8fe 	bl	2e30 <log_source_name_get>
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    2c34:	ea4f 1389 	mov.w	r3, r9, lsl #6
    2c38:	f043 0301 	orr.w	r3, r3, #1
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
    2c3c:	4602      	mov	r2, r0
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    2c3e:	f8ad 3000 	strh.w	r3, [sp]
    2c42:	4639      	mov	r1, r7
    2c44:	4643      	mov	r3, r8
    2c46:	4658      	mov	r0, fp
    2c48:	f01e ff89 	bl	21b5e <log_3>
		mask &= ~BIT(idx);
    2c4c:	2301      	movs	r3, #1
    2c4e:	fa03 f707 	lsl.w	r7, r3, r7
    2c52:	ea26 0607 	bic.w	r6, r6, r7
    2c56:	e7cb      	b.n	2bf0 <z_impl_log_process+0x8c>
	return backend->cb->active;
    2c58:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    2c5a:	795b      	ldrb	r3, [r3, #5]
    2c5c:	b123      	cbz	r3, 2c68 <z_impl_log_process+0x104>
	backend->api->put(backend, msg);
    2c5e:	6833      	ldr	r3, [r6, #0]
    2c60:	4629      	mov	r1, r5
    2c62:	685b      	ldr	r3, [r3, #4]
    2c64:	4630      	mov	r0, r6
    2c66:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    2c68:	f108 0801 	add.w	r8, r8, #1
    2c6c:	3610      	adds	r6, #16
    2c6e:	45b8      	cmp	r8, r7
    2c70:	dbf2      	blt.n	2c58 <z_impl_log_process+0xf4>
    2c72:	e78f      	b.n	2b94 <z_impl_log_process+0x30>
    2c74:	2000372c 	.word	0x2000372c
    2c78:	20001fe4 	.word	0x20001fe4
    2c7c:	20001fe8 	.word	0x20001fe8
    2c80:	20001ff0 	.word	0x20001ff0
    2c84:	2000372d 	.word	0x2000372d
    2c88:	00029a70 	.word	0x00029a70
    2c8c:	00029870 	.word	0x00029870
    2c90:	0002ab7c 	.word	0x0002ab7c
    2c94:	0002ab96 	.word	0x0002ab96
    2c98:	00029ab0 	.word	0x00029ab0
    2c9c:	00029ac0 	.word	0x00029ac0
    2ca0:	000294a0 	.word	0x000294a0
    2ca4:	0002ff18 	.word	0x0002ff18

00002ca8 <log_process_thread_func>:
{
    2ca8:	b510      	push	{r4, lr}
	log_init();
    2caa:	f7ff fe8b 	bl	29c4 <log_init>
	return z_impl_z_current_get();
    2cae:	f01d feaf 	bl	20a10 <z_impl_z_current_get>
	proc_tid = process_tid;
    2cb2:	4b0c      	ldr	r3, [pc, #48]	; (2ce4 <log_process_thread_func+0x3c>)
    2cb4:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    2cb6:	b130      	cbz	r0, 2cc6 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    2cb8:	4b0b      	ldr	r3, [pc, #44]	; (2ce8 <log_process_thread_func+0x40>)
	    process_tid &&
    2cba:	681b      	ldr	r3, [r3, #0]
    2cbc:	2b09      	cmp	r3, #9
    2cbe:	dd02      	ble.n	2cc6 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    2cc0:	480a      	ldr	r0, [pc, #40]	; (2cec <log_process_thread_func+0x44>)
    2cc2:	f01d f9a7 	bl	20014 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    2cc6:	4c09      	ldr	r4, [pc, #36]	; (2cec <log_process_thread_func+0x44>)
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    2cc8:	2000      	movs	r0, #0
    2cca:	f7ff ff4b 	bl	2b64 <z_impl_log_process>
		if (log_process(false) == false) {
    2cce:	2800      	cmp	r0, #0
    2cd0:	d1fa      	bne.n	2cc8 <log_process_thread_func+0x20>
    2cd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2cd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2cda:	4620      	mov	r0, r4
    2cdc:	f01d f9c0 	bl	20060 <z_impl_k_sem_take>
    2ce0:	e7f2      	b.n	2cc8 <log_process_thread_func+0x20>
    2ce2:	bf00      	nop
    2ce4:	20002014 	.word	0x20002014
    2ce8:	20001fe4 	.word	0x20001fe4
    2cec:	20001110 	.word	0x20001110

00002cf0 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    2cf0:	4b29      	ldr	r3, [pc, #164]	; (2d98 <msg_finalize+0xa8>)
{
    2cf2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	msg->hdr.timestamp = timestamp_func();
    2cf4:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    2cf6:	8141      	strh	r1, [r0, #10]
{
    2cf8:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    2cfa:	4798      	blx	r3
    2cfc:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    2cfe:	f04f 0320 	mov.w	r3, #32
    2d02:	f3ef 8511 	mrs	r5, BASEPRI
    2d06:	f383 8812 	msr	BASEPRI_MAX, r3
    2d0a:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    2d0e:	4823      	ldr	r0, [pc, #140]	; (2d9c <msg_finalize+0xac>)
    2d10:	4621      	mov	r1, r4
    2d12:	f01e feab 	bl	21a6c <log_list_add_tail>
	__asm__ volatile(
    2d16:	f385 8811 	msr	BASEPRI, r5
    2d1a:	f3bf 8f6f 	isb	sy
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    2d1e:	f3bf 8f5b 	dmb	ish
    2d22:	4b1f      	ldr	r3, [pc, #124]	; (2da0 <msg_finalize+0xb0>)
    2d24:	e853 2f00 	ldrex	r2, [r3]
    2d28:	3201      	adds	r2, #1
    2d2a:	e843 2100 	strex	r1, r2, [r3]
    2d2e:	2900      	cmp	r1, #0
    2d30:	d1f8      	bne.n	2d24 <msg_finalize+0x34>
    2d32:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    2d36:	4a1b      	ldr	r2, [pc, #108]	; (2da4 <msg_finalize+0xb4>)
    2d38:	7812      	ldrb	r2, [r2, #0]
    2d3a:	b182      	cbz	r2, 2d5e <msg_finalize+0x6e>
	__asm__ volatile(
    2d3c:	f04f 0320 	mov.w	r3, #32
    2d40:	f3ef 8411 	mrs	r4, BASEPRI
    2d44:	f383 8812 	msr	BASEPRI_MAX, r3
    2d48:	f3bf 8f6f 	isb	sy
    2d4c:	2000      	movs	r0, #0
    2d4e:	f7ff ff09 	bl	2b64 <z_impl_log_process>
	__asm__ volatile(
    2d52:	f384 8811 	msr	BASEPRI, r4
    2d56:	f3bf 8f6f 	isb	sy
}
    2d5a:	b003      	add	sp, #12
    2d5c:	bd30      	pop	{r4, r5, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    2d5e:	4a12      	ldr	r2, [pc, #72]	; (2da8 <msg_finalize+0xb8>)
    2d60:	681b      	ldr	r3, [r3, #0]
    2d62:	6812      	ldr	r2, [r2, #0]
    2d64:	2a00      	cmp	r2, #0
    2d66:	d0f8      	beq.n	2d5a <msg_finalize+0x6a>
    2d68:	2b01      	cmp	r3, #1
    2d6a:	d10a      	bne.n	2d82 <msg_finalize+0x92>
	z_impl_k_timer_start(timer, duration, period);
    2d6c:	2200      	movs	r2, #0
    2d6e:	2300      	movs	r3, #0
    2d70:	e9cd 2300 	strd	r2, r3, [sp]
    2d74:	480d      	ldr	r0, [pc, #52]	; (2dac <msg_finalize+0xbc>)
    2d76:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2d7a:	2300      	movs	r3, #0
    2d7c:	f01e f876 	bl	20e6c <z_impl_k_timer_start>
    2d80:	e7eb      	b.n	2d5a <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    2d82:	2b0a      	cmp	r3, #10
    2d84:	d1e9      	bne.n	2d5a <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
    2d86:	4809      	ldr	r0, [pc, #36]	; (2dac <msg_finalize+0xbc>)
    2d88:	f026 fa11 	bl	291ae <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    2d8c:	4808      	ldr	r0, [pc, #32]	; (2db0 <msg_finalize+0xc0>)
}
    2d8e:	b003      	add	sp, #12
    2d90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    2d94:	f01d b93e 	b.w	20014 <z_impl_k_sem_give>
    2d98:	20000740 	.word	0x20000740
    2d9c:	20001ff0 	.word	0x20001ff0
    2da0:	20001fe4 	.word	0x20001fe4
    2da4:	2000372d 	.word	0x2000372d
    2da8:	20002014 	.word	0x20002014
    2dac:	20001388 	.word	0x20001388
    2db0:	20001110 	.word	0x20001110

00002db4 <z_impl_log_panic>:
{
    2db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    2db6:	4f0e      	ldr	r7, [pc, #56]	; (2df0 <z_impl_log_panic+0x3c>)
    2db8:	783d      	ldrb	r5, [r7, #0]
    2dba:	b975      	cbnz	r5, 2dda <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    2dbc:	4c0d      	ldr	r4, [pc, #52]	; (2df4 <z_impl_log_panic+0x40>)
    2dbe:	4e0e      	ldr	r6, [pc, #56]	; (2df8 <z_impl_log_panic+0x44>)
	log_init();
    2dc0:	f7ff fe00 	bl	29c4 <log_init>
    2dc4:	1b36      	subs	r6, r6, r4
    2dc6:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    2dc8:	42b5      	cmp	r5, r6
    2dca:	db07      	blt.n	2ddc <z_impl_log_panic+0x28>
    2dcc:	2000      	movs	r0, #0
    2dce:	f7ff fec9 	bl	2b64 <z_impl_log_process>
		while (log_process(false) == true) {
    2dd2:	2800      	cmp	r0, #0
    2dd4:	d1fa      	bne.n	2dcc <z_impl_log_panic+0x18>
	panic_mode = true;
    2dd6:	2301      	movs	r3, #1
    2dd8:	703b      	strb	r3, [r7, #0]
}
    2dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    2ddc:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    2dde:	795b      	ldrb	r3, [r3, #5]
    2de0:	b11b      	cbz	r3, 2dea <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    2de2:	6823      	ldr	r3, [r4, #0]
    2de4:	4620      	mov	r0, r4
    2de6:	695b      	ldr	r3, [r3, #20]
    2de8:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    2dea:	3501      	adds	r5, #1
    2dec:	3410      	adds	r4, #16
    2dee:	e7eb      	b.n	2dc8 <z_impl_log_panic+0x14>
    2df0:	2000372d 	.word	0x2000372d
    2df4:	00029ab0 	.word	0x00029ab0
    2df8:	00029ac0 	.word	0x00029ac0

00002dfc <log_free>:
{
    2dfc:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    2dfe:	3804      	subs	r0, #4
    2e00:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    2e02:	f3bf 8f5b 	dmb	ish
    2e06:	e850 3f00 	ldrex	r3, [r0]
    2e0a:	1e5a      	subs	r2, r3, #1
    2e0c:	e840 2100 	strex	r1, r2, [r0]
    2e10:	2900      	cmp	r1, #0
    2e12:	d1f8      	bne.n	2e06 <log_free+0xa>
    2e14:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    2e18:	2b01      	cmp	r3, #1
    2e1a:	d103      	bne.n	2e24 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    2e1c:	4803      	ldr	r0, [pc, #12]	; (2e2c <log_free+0x30>)
    2e1e:	a901      	add	r1, sp, #4
    2e20:	f025 fde0 	bl	289e4 <k_mem_slab_free>
}
    2e24:	b003      	add	sp, #12
    2e26:	f85d fb04 	ldr.w	pc, [sp], #4
    2e2a:	bf00      	nop
    2e2c:	20001ff8 	.word	0x20001ff8

00002e30 <log_source_name_get>:
    2e30:	4a04      	ldr	r2, [pc, #16]	; (2e44 <log_source_name_get+0x14>)
    2e32:	4b05      	ldr	r3, [pc, #20]	; (2e48 <log_source_name_get+0x18>)
    2e34:	1a9b      	subs	r3, r3, r2
	return log_sources_count();
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    2e36:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    2e3a:	bf34      	ite	cc
    2e3c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    2e40:	2000      	movcs	r0, #0
}
    2e42:	4770      	bx	lr
    2e44:	00029870 	.word	0x00029870
    2e48:	00029ab0 	.word	0x00029ab0

00002e4c <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    2e4c:	4a05      	ldr	r2, [pc, #20]	; (2e64 <log_backend_enable+0x18>)
	backend->cb->id = id;
    2e4e:	6843      	ldr	r3, [r0, #4]
    2e50:	1a80      	subs	r0, r0, r2
    2e52:	1100      	asrs	r0, r0, #4
    2e54:	3001      	adds	r0, #1
	backend->cb->active = true;
    2e56:	2201      	movs	r2, #1

	log_backend_id_set(backend, id);
    2e58:	7118      	strb	r0, [r3, #4]
	backend->cb->ctx = ctx;
    2e5a:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    2e5c:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    2e5e:	f7ff bdf1 	b.w	2a44 <z_log_notify_backend_enabled>
    2e62:	bf00      	nop
    2e64:	00029ab0 	.word	0x00029ab0

00002e68 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    2e68:	2320      	movs	r3, #32
    2e6a:	4902      	ldr	r1, [pc, #8]	; (2e74 <log_msg_pool_init+0xc>)
    2e6c:	4802      	ldr	r0, [pc, #8]	; (2e78 <log_msg_pool_init+0x10>)
    2e6e:	461a      	mov	r2, r3
    2e70:	f025 bd9d 	b.w	289ae <k_mem_slab_init>
    2e74:	200073e8 	.word	0x200073e8
    2e78:	20002018 	.word	0x20002018

00002e7c <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    2e7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
    2e7e:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    2e80:	4d09      	ldr	r5, [pc, #36]	; (2ea8 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    2e82:	9301      	str	r3, [sp, #4]
    2e84:	2001      	movs	r0, #1
    2e86:	f7ff fe6d 	bl	2b64 <z_impl_log_process>
    2e8a:	4604      	mov	r4, r0
			z_log_dropped();
    2e8c:	f7ff fde8 	bl	2a60 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    2e90:	2200      	movs	r2, #0
    2e92:	2300      	movs	r3, #0
    2e94:	a901      	add	r1, sp, #4
    2e96:	4628      	mov	r0, r5
    2e98:	f01c fed0 	bl	1fc3c <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    2e9c:	b108      	cbz	r0, 2ea2 <log_msg_no_space_handle+0x26>
    2e9e:	2c00      	cmp	r4, #0
    2ea0:	d1f0      	bne.n	2e84 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
    2ea2:	9801      	ldr	r0, [sp, #4]
    2ea4:	b003      	add	sp, #12
    2ea6:	bd30      	pop	{r4, r5, pc}
    2ea8:	20002018 	.word	0x20002018

00002eac <log_msg_chunk_alloc>:
{
    2eac:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    2eae:	2300      	movs	r3, #0
    2eb0:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    2eb2:	4807      	ldr	r0, [pc, #28]	; (2ed0 <log_msg_chunk_alloc+0x24>)
    2eb4:	2200      	movs	r2, #0
    2eb6:	2300      	movs	r3, #0
    2eb8:	a901      	add	r1, sp, #4
    2eba:	f01c febf 	bl	1fc3c <k_mem_slab_alloc>
	if (err != 0) {
    2ebe:	b110      	cbz	r0, 2ec6 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
    2ec0:	f7ff ffdc 	bl	2e7c <log_msg_no_space_handle>
    2ec4:	9001      	str	r0, [sp, #4]
}
    2ec6:	9801      	ldr	r0, [sp, #4]
    2ec8:	b003      	add	sp, #12
    2eca:	f85d fb04 	ldr.w	pc, [sp], #4
    2ece:	bf00      	nop
    2ed0:	20002018 	.word	0x20002018

00002ed4 <msg_free>:
{
    2ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    2ed6:	7a03      	ldrb	r3, [r0, #8]
    2ed8:	b085      	sub	sp, #20
	if (log_msg_is_std(msg) && nargs) {
    2eda:	07dc      	lsls	r4, r3, #31
{
    2edc:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    2ede:	d41e      	bmi.n	2f1e <msg_free+0x4a>
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    2ee0:	7a45      	ldrb	r5, [r0, #9]
	if (log_msg_is_std(msg) && nargs) {
    2ee2:	092d      	lsrs	r5, r5, #4
    2ee4:	d01b      	beq.n	2f1e <msg_free+0x4a>
		uint32_t smask = 0U;
    2ee6:	2400      	movs	r4, #0
		for (i = 0U; i < nargs; i++) {
    2ee8:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
    2eea:	9801      	ldr	r0, [sp, #4]
    2eec:	4631      	mov	r1, r6
    2eee:	f01e fedb 	bl	21ca8 <log_msg_arg_get>
    2ef2:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    2ef4:	f7ff fe26 	bl	2b44 <log_is_strdup>
    2ef8:	b170      	cbz	r0, 2f18 <msg_free+0x44>
				if (smask == 0U) {
    2efa:	b934      	cbnz	r4, 2f0a <msg_free+0x36>
					smask = z_log_get_s_mask(
    2efc:	9b01      	ldr	r3, [sp, #4]
    2efe:	4629      	mov	r1, r5
    2f00:	6918      	ldr	r0, [r3, #16]
    2f02:	f01e fdd2 	bl	21aaa <z_log_get_s_mask>
					if (smask == 0U) {
    2f06:	4604      	mov	r4, r0
    2f08:	b148      	cbz	r0, 2f1e <msg_free+0x4a>
				if (smask & BIT(i)) {
    2f0a:	fa24 f306 	lsr.w	r3, r4, r6
    2f0e:	07d9      	lsls	r1, r3, #31
    2f10:	d502      	bpl.n	2f18 <msg_free+0x44>
					log_free(buf);
    2f12:	4638      	mov	r0, r7
    2f14:	f7ff ff72 	bl	2dfc <log_free>
		for (i = 0U; i < nargs; i++) {
    2f18:	3601      	adds	r6, #1
    2f1a:	42ae      	cmp	r6, r5
    2f1c:	d3e5      	bcc.n	2eea <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
    2f1e:	9b01      	ldr	r3, [sp, #4]
    2f20:	7a1a      	ldrb	r2, [r3, #8]
    2f22:	0792      	lsls	r2, r2, #30
    2f24:	d504      	bpl.n	2f30 <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
    2f26:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    2f28:	4c08      	ldr	r4, [pc, #32]	; (2f4c <msg_free+0x78>)
    2f2a:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    2f2c:	9b03      	ldr	r3, [sp, #12]
    2f2e:	b92b      	cbnz	r3, 2f3c <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    2f30:	4806      	ldr	r0, [pc, #24]	; (2f4c <msg_free+0x78>)
    2f32:	a901      	add	r1, sp, #4
    2f34:	f025 fd56 	bl	289e4 <k_mem_slab_free>
}
    2f38:	b005      	add	sp, #20
    2f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
    2f3c:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    2f3e:	a903      	add	r1, sp, #12
    2f40:	4620      	mov	r0, r4
    2f42:	f025 fd4f 	bl	289e4 <k_mem_slab_free>
		cont = next;
    2f46:	9503      	str	r5, [sp, #12]
    2f48:	e7f0      	b.n	2f2c <msg_free+0x58>
    2f4a:	bf00      	nop
    2f4c:	20002018 	.word	0x20002018

00002f50 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    2f50:	b40e      	push	{r1, r2, r3}
    2f52:	b503      	push	{r0, r1, lr}
    2f54:	ab03      	add	r3, sp, #12
    2f56:	4601      	mov	r1, r0
    2f58:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    2f5c:	4804      	ldr	r0, [pc, #16]	; (2f70 <print_formatted+0x20>)
	va_start(args, fmt);
    2f5e:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    2f60:	f7ff f912 	bl	2188 <cbvprintf>
	va_end(args);

	return length;
}
    2f64:	b002      	add	sp, #8
    2f66:	f85d eb04 	ldr.w	lr, [sp], #4
    2f6a:	b003      	add	sp, #12
    2f6c:	4770      	bx	lr
    2f6e:	bf00      	nop
    2f70:	0002216d 	.word	0x0002216d

00002f74 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    2f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2f78:	461d      	mov	r5, r3
    2f7a:	9b08      	ldr	r3, [sp, #32]
    2f7c:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    2f7e:	06da      	lsls	r2, r3, #27
{
    2f80:	4604      	mov	r4, r0
    2f82:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    2f84:	d405      	bmi.n	2f92 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    2f86:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    2f88:	bf4c      	ite	mi
    2f8a:	492a      	ldrmi	r1, [pc, #168]	; (3034 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    2f8c:	492a      	ldrpl	r1, [pc, #168]	; (3038 <hexdump_line_print+0xc4>)
    2f8e:	f7ff ffdf 	bl	2f50 <print_formatted>
	newline_print(output, flags);

	for (int i = 0; i < prefix_offset; i++) {
		print_formatted(output, " ");
    2f92:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 303c <hexdump_line_print+0xc8>
{
    2f96:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    2f9a:	45a8      	cmp	r8, r5
    2f9c:	db2a      	blt.n	2ff4 <hexdump_line_print+0x80>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    2f9e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 3040 <hexdump_line_print+0xcc>
			print_formatted(output, "%02x ", data[i]);
    2fa2:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 3044 <hexdump_line_print+0xd0>
			print_formatted(output, " ");
    2fa6:	f8df a094 	ldr.w	sl, [pc, #148]	; 303c <hexdump_line_print+0xc8>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2faa:	2500      	movs	r5, #0
		if (i < length) {
    2fac:	42bd      	cmp	r5, r7
    2fae:	d22f      	bcs.n	3010 <hexdump_line_print+0x9c>
			print_formatted(output, "%02x ", data[i]);
    2fb0:	5d72      	ldrb	r2, [r6, r5]
    2fb2:	4649      	mov	r1, r9
    2fb4:	4620      	mov	r0, r4
    2fb6:	f7ff ffcb 	bl	2f50 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2fba:	3501      	adds	r5, #1
    2fbc:	2d10      	cmp	r5, #16
    2fbe:	d120      	bne.n	3002 <hexdump_line_print+0x8e>
		}
	}

	print_formatted(output, "|");
    2fc0:	4921      	ldr	r1, [pc, #132]	; (3048 <hexdump_line_print+0xd4>)
			char c = (char)data[i];

			print_formatted(output, "%c",
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    2fc2:	f8df 8078 	ldr.w	r8, [pc, #120]	; 303c <hexdump_line_print+0xc8>
			print_formatted(output, "%c",
    2fc6:	f8df 9084 	ldr.w	r9, [pc, #132]	; 304c <hexdump_line_print+0xd8>
	print_formatted(output, "|");
    2fca:	4620      	mov	r0, r4
    2fcc:	f7ff ffc0 	bl	2f50 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2fd0:	2500      	movs	r5, #0
		if (i < length) {
    2fd2:	42af      	cmp	r7, r5
    2fd4:	d928      	bls.n	3028 <hexdump_line_print+0xb4>
			char c = (char)data[i];
    2fd6:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
    2fd8:	f1a2 0320 	sub.w	r3, r2, #32
    2fdc:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(output, "%c",
    2fde:	bf28      	it	cs
    2fe0:	222e      	movcs	r2, #46	; 0x2e
    2fe2:	4649      	mov	r1, r9
    2fe4:	4620      	mov	r0, r4
    2fe6:	f7ff ffb3 	bl	2f50 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2fea:	3501      	adds	r5, #1
    2fec:	2d10      	cmp	r5, #16
    2fee:	d114      	bne.n	301a <hexdump_line_print+0xa6>
		}
	}
}
    2ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    2ff4:	4649      	mov	r1, r9
    2ff6:	4620      	mov	r0, r4
    2ff8:	f7ff ffaa 	bl	2f50 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    2ffc:	f108 0801 	add.w	r8, r8, #1
    3000:	e7cb      	b.n	2f9a <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    3002:	076a      	lsls	r2, r5, #29
    3004:	d1d2      	bne.n	2fac <hexdump_line_print+0x38>
			print_formatted(output, " ");
    3006:	4651      	mov	r1, sl
    3008:	4620      	mov	r0, r4
    300a:	f7ff ffa1 	bl	2f50 <print_formatted>
    300e:	e7cd      	b.n	2fac <hexdump_line_print+0x38>
			print_formatted(output, "   ");
    3010:	4641      	mov	r1, r8
    3012:	4620      	mov	r0, r4
    3014:	f7ff ff9c 	bl	2f50 <print_formatted>
    3018:	e7cf      	b.n	2fba <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    301a:	076b      	lsls	r3, r5, #29
    301c:	d1d9      	bne.n	2fd2 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    301e:	4641      	mov	r1, r8
    3020:	4620      	mov	r0, r4
    3022:	f7ff ff95 	bl	2f50 <print_formatted>
    3026:	e7d4      	b.n	2fd2 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    3028:	4641      	mov	r1, r8
    302a:	4620      	mov	r0, r4
    302c:	f7ff ff90 	bl	2f50 <print_formatted>
    3030:	e7db      	b.n	2fea <hexdump_line_print+0x76>
    3032:	bf00      	nop
    3034:	0002abdb 	.word	0x0002abdb
    3038:	0002abda 	.word	0x0002abda
    303c:	0002abe5 	.word	0x0002abe5
    3040:	0002abe3 	.word	0x0002abe3
    3044:	0002abdd 	.word	0x0002abdd
    3048:	0002abe7 	.word	0x0002abe7
    304c:	0002abe9 	.word	0x0002abe9

00003050 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    3050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3054:	b087      	sub	sp, #28
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    3056:	f011 0602 	ands.w	r6, r1, #2
{
    305a:	9205      	str	r2, [sp, #20]
    305c:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
    3060:	f9bd 9048 	ldrsh.w	r9, [sp, #72]	; 0x48
    3064:	4607      	mov	r7, r0
    3066:	461a      	mov	r2, r3
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    3068:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    306c:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    3070:	d006      	beq.n	3080 <prefix_print+0x30>
	if (!format) {
    3072:	f011 0f44 	tst.w	r1, #68	; 0x44
    3076:	d138      	bne.n	30ea <prefix_print+0x9a>
		length = print_formatted(output, "[%08lu] ", timestamp);
    3078:	4933      	ldr	r1, [pc, #204]	; (3148 <prefix_print+0xf8>)
    307a:	f7ff ff69 	bl	2f50 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    307e:	4606      	mov	r6, r0
	if (color) {
    3080:	f1ba 0f00 	cmp.w	sl, #0
    3084:	d00a      	beq.n	309c <prefix_print+0x4c>
		const char *log_color = start && (colors[level] != NULL) ?
    3086:	4b31      	ldr	r3, [pc, #196]	; (314c <prefix_print+0xfc>)
		print_formatted(output, "%s", log_color);
    3088:	4931      	ldr	r1, [pc, #196]	; (3150 <prefix_print+0x100>)
		const char *log_color = start && (colors[level] != NULL) ?
    308a:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
		print_formatted(output, "%s", log_color);
    308e:	4b31      	ldr	r3, [pc, #196]	; (3154 <prefix_print+0x104>)
    3090:	4638      	mov	r0, r7
    3092:	2a00      	cmp	r2, #0
    3094:	bf08      	it	eq
    3096:	461a      	moveq	r2, r3
    3098:	f7ff ff5a 	bl	2f50 <print_formatted>
	if (level_on) {
    309c:	b13d      	cbz	r5, 30ae <prefix_print+0x5e>
		total += print_formatted(output, "<%s> ", severity[level]);
    309e:	4b2e      	ldr	r3, [pc, #184]	; (3158 <prefix_print+0x108>)
    30a0:	492e      	ldr	r1, [pc, #184]	; (315c <prefix_print+0x10c>)
    30a2:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
    30a6:	4638      	mov	r0, r7
    30a8:	f7ff ff52 	bl	2f50 <print_formatted>
    30ac:	4605      	mov	r5, r0
	if (source_id >= 0) {
    30ae:	f1b9 0f00 	cmp.w	r9, #0
    30b2:	db16      	blt.n	30e2 <prefix_print+0x92>
		total += print_formatted(output,
    30b4:	9b05      	ldr	r3, [sp, #20]
    30b6:	2b00      	cmp	r3, #0
    30b8:	d043      	beq.n	3142 <prefix_print+0xf2>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    30ba:	2301      	movs	r3, #1
    30bc:	fa03 f808 	lsl.w	r8, r3, r8
		total += print_formatted(output,
    30c0:	4b27      	ldr	r3, [pc, #156]	; (3160 <prefix_print+0x110>)
    30c2:	4c28      	ldr	r4, [pc, #160]	; (3164 <prefix_print+0x114>)
    30c4:	f018 0f10 	tst.w	r8, #16
    30c8:	bf18      	it	ne
    30ca:	461c      	movne	r4, r3
    30cc:	4649      	mov	r1, r9
    30ce:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    30d2:	f7ff fead 	bl	2e30 <log_source_name_get>
    30d6:	4621      	mov	r1, r4
    30d8:	4602      	mov	r2, r0
    30da:	4638      	mov	r0, r7
    30dc:	f7ff ff38 	bl	2f50 <print_formatted>
    30e0:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    30e2:	19a8      	adds	r0, r5, r6
    30e4:	b007      	add	sp, #28
    30e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    30ea:	4b1f      	ldr	r3, [pc, #124]	; (3168 <prefix_print+0x118>)
    30ec:	6819      	ldr	r1, [r3, #0]
    30ee:	b331      	cbz	r1, 313e <prefix_print+0xee>
		timestamp /= timestamp_div;
    30f0:	4b1e      	ldr	r3, [pc, #120]	; (316c <prefix_print+0x11c>)
    30f2:	f44f 6661 	mov.w	r6, #3600	; 0xe10
    30f6:	681b      	ldr	r3, [r3, #0]
    30f8:	fbb2 f3f3 	udiv	r3, r2, r3
		ms = (remainder * 1000U) / freq;
    30fc:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
		total_seconds = timestamp / freq;
    3100:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    3104:	fbb4 f2f6 	udiv	r2, r4, r6
    3108:	fb06 4612 	mls	r6, r6, r2, r4
		remainder = timestamp % freq;
    310c:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    3110:	fb0b f404 	mul.w	r4, fp, r4
		mins = seconds / 60U;
    3114:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    3118:	fbb4 fef1 	udiv	lr, r4, r1
		mins = seconds / 60U;
    311c:	fbb6 f3fc 	udiv	r3, r6, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    3120:	fb01 441e 	mls	r4, r1, lr, r4
			length = print_formatted(output,
    3124:	fb0c 6613 	mls	r6, ip, r3, r6
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    3128:	fb0b f404 	mul.w	r4, fp, r4
			length = print_formatted(output,
    312c:	9600      	str	r6, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    312e:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(output,
    3132:	e9cd e101 	strd	lr, r1, [sp, #4]
    3136:	490e      	ldr	r1, [pc, #56]	; (3170 <prefix_print+0x120>)
    3138:	f7ff ff0a 	bl	2f50 <print_formatted>
    313c:	e79f      	b.n	307e <prefix_print+0x2e>
		length = 0;
    313e:	4608      	mov	r0, r1
    3140:	e79d      	b.n	307e <prefix_print+0x2e>
		total += print_formatted(output,
    3142:	4c08      	ldr	r4, [pc, #32]	; (3164 <prefix_print+0x114>)
    3144:	e7c2      	b.n	30cc <prefix_print+0x7c>
    3146:	bf00      	nop
    3148:	0002abf5 	.word	0x0002abf5
    314c:	00029c5c 	.word	0x00029c5c
    3150:	0002e7c5 	.word	0x0002e7c5
    3154:	0002ab32 	.word	0x0002ab32
    3158:	00029c70 	.word	0x00029c70
    315c:	0002ac1a 	.word	0x0002ac1a
    3160:	0002abf1 	.word	0x0002abf1
    3164:	0002abec 	.word	0x0002abec
    3168:	20002034 	.word	0x20002034
    316c:	20002038 	.word	0x20002038
    3170:	0002abfe 	.word	0x0002abfe

00003174 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    3174:	b538      	push	{r3, r4, r5, lr}
    3176:	460c      	mov	r4, r1
	if (color) {
    3178:	07e1      	lsls	r1, r4, #31
{
    317a:	4605      	mov	r5, r0
	if (color) {
    317c:	d503      	bpl.n	3186 <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    317e:	4a08      	ldr	r2, [pc, #32]	; (31a0 <postfix_print+0x2c>)
    3180:	4908      	ldr	r1, [pc, #32]	; (31a4 <postfix_print+0x30>)
    3182:	f7ff fee5 	bl	2f50 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    3186:	06e2      	lsls	r2, r4, #27
    3188:	d408      	bmi.n	319c <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    318a:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    318c:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    318e:	bf4c      	ite	mi
    3190:	4905      	ldrmi	r1, [pc, #20]	; (31a8 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    3192:	4906      	ldrpl	r1, [pc, #24]	; (31ac <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    3194:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    3198:	f7ff beda 	b.w	2f50 <print_formatted>
}
    319c:	bd38      	pop	{r3, r4, r5, pc}
    319e:	bf00      	nop
    31a0:	0002ab32 	.word	0x0002ab32
    31a4:	0002e7c5 	.word	0x0002e7c5
    31a8:	0002abdb 	.word	0x0002abdb
    31ac:	0002abda 	.word	0x0002abda

000031b0 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg,
			    uint32_t flags)
{
    31b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    31b4:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(output, flags, std_msg, timestamp,
    31b6:	f013 0807 	ands.w	r8, r3, #7
{
    31ba:	b08a      	sub	sp, #40	; 0x28
    31bc:	4605      	mov	r5, r0
    31be:	460e      	mov	r6, r1
    31c0:	4617      	mov	r7, r2
			0 : prefix_print(output, flags, std_msg, timestamp,
    31c2:	d022      	beq.n	320a <log_output_msg_process+0x5a>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    31c4:	7a0a      	ldrb	r2, [r1, #8]
	return msg->hdr.ids.source_id;
    31c6:	8949      	ldrh	r1, [r1, #10]
    31c8:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    31cc:	f3c1 1189 	ubfx	r1, r1, #6, #10
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    31d0:	43d2      	mvns	r2, r2
    31d2:	e9cd 8300 	strd	r8, r3, [sp]
    31d6:	9102      	str	r1, [sp, #8]
    31d8:	68f3      	ldr	r3, [r6, #12]
    31da:	f002 0201 	and.w	r2, r2, #1
    31de:	4639      	mov	r1, r7
    31e0:	f7ff ff36 	bl	3050 <prefix_print>
    31e4:	4681      	mov	r9, r0
    31e6:	7a34      	ldrb	r4, [r6, #8]
    31e8:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    31ea:	f014 0401 	ands.w	r4, r4, #1
    31ee:	d00e      	beq.n	320e <log_output_msg_process+0x5e>
		std_print(msg, output);
    31f0:	4629      	mov	r1, r5
    31f2:	4630      	mov	r0, r6
    31f4:	f01e fe50 	bl	21e98 <std_print>
		raw_string_print(msg, output);
	} else {
		hexdump_print(msg, output, prefix_offset, flags);
	}

	if (!raw_string) {
    31f8:	f1b8 0f00 	cmp.w	r8, #0
    31fc:	d02b      	beq.n	3256 <log_output_msg_process+0xa6>
		postfix_print(output, flags, level);
    31fe:	4642      	mov	r2, r8
    3200:	4639      	mov	r1, r7
    3202:	4628      	mov	r0, r5
    3204:	f7ff ffb6 	bl	3174 <postfix_print>
    3208:	e025      	b.n	3256 <log_output_msg_process+0xa6>
			0 : prefix_print(output, flags, std_msg, timestamp,
    320a:	46c1      	mov	r9, r8
    320c:	e7eb      	b.n	31e6 <log_output_msg_process+0x36>
	} else if (raw_string) {
    320e:	f1b8 0f00 	cmp.w	r8, #0
    3212:	d126      	bne.n	3262 <log_output_msg_process+0xb2>
	size_t offset = 0;
    3214:	4627      	mov	r7, r4
		length = output->size;
    3216:	68eb      	ldr	r3, [r5, #12]
    3218:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
    321a:	aa06      	add	r2, sp, #24
    321c:	463b      	mov	r3, r7
    321e:	68a9      	ldr	r1, [r5, #8]
    3220:	4630      	mov	r0, r6
    3222:	f01e fe25 	bl	21e70 <log_msg_hexdump_data_get>
		output->control_block->offset = length;
    3226:	9a06      	ldr	r2, [sp, #24]
    3228:	686b      	ldr	r3, [r5, #4]
    322a:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    322c:	b13a      	cbz	r2, 323e <log_output_msg_process+0x8e>
			eol = (output->buf[length - 1] == '\n');
    322e:	68ab      	ldr	r3, [r5, #8]
    3230:	4413      	add	r3, r2
    3232:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    3236:	f1a4 030a 	sub.w	r3, r4, #10
    323a:	425c      	negs	r4, r3
    323c:	415c      	adcs	r4, r3
		log_output_flush(output);
    323e:	4628      	mov	r0, r5
    3240:	f01e ff87 	bl	22152 <log_output_flush>
		offset += length;
    3244:	9b06      	ldr	r3, [sp, #24]
    3246:	441f      	add	r7, r3
	} while (length > 0);
    3248:	2b00      	cmp	r3, #0
    324a:	d1e4      	bne.n	3216 <log_output_msg_process+0x66>
	if (eol) {
    324c:	b11c      	cbz	r4, 3256 <log_output_msg_process+0xa6>
		print_formatted(output, "\r");
    324e:	4914      	ldr	r1, [pc, #80]	; (32a0 <log_output_msg_process+0xf0>)
    3250:	4628      	mov	r0, r5
    3252:	f7ff fe7d 	bl	2f50 <print_formatted>
	}

	log_output_flush(output);
    3256:	4628      	mov	r0, r5
}
    3258:	b00a      	add	sp, #40	; 0x28
    325a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
    325e:	f01e bf78 	b.w	22152 <log_output_flush>
	print_formatted(output, "%s", log_msg_str_get(msg));
    3262:	4630      	mov	r0, r6
    3264:	f01e fd52 	bl	21d0c <log_msg_str_get>
    3268:	490e      	ldr	r1, [pc, #56]	; (32a4 <log_output_msg_process+0xf4>)
    326a:	4602      	mov	r2, r0
    326c:	4628      	mov	r0, r5
    326e:	f7ff fe6f 	bl	2f50 <print_formatted>
		length = sizeof(buf);
    3272:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    3276:	aa05      	add	r2, sp, #20
    3278:	4623      	mov	r3, r4
    327a:	a906      	add	r1, sp, #24
    327c:	4630      	mov	r0, r6
		length = sizeof(buf);
    327e:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    3282:	f01e fdf5 	bl	21e70 <log_msg_hexdump_data_get>
		if (length) {
    3286:	9a05      	ldr	r2, [sp, #20]
    3288:	2a00      	cmp	r2, #0
    328a:	d0b8      	beq.n	31fe <log_output_msg_process+0x4e>
			hexdump_line_print(output, buf, length,
    328c:	464b      	mov	r3, r9
    328e:	9700      	str	r7, [sp, #0]
    3290:	a906      	add	r1, sp, #24
    3292:	4628      	mov	r0, r5
    3294:	f7ff fe6e 	bl	2f74 <hexdump_line_print>
			offset += length;
    3298:	9b05      	ldr	r3, [sp, #20]
    329a:	441c      	add	r4, r3
		length = sizeof(buf);
    329c:	e7eb      	b.n	3276 <log_output_msg_process+0xc6>
    329e:	bf00      	nop
    32a0:	0002ac20 	.word	0x0002ac20
    32a4:	0002e7c5 	.word	0x0002e7c5

000032a8 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    32a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    32aa:	f242 730f 	movw	r3, #9999	; 0x270f
    32ae:	428b      	cmp	r3, r1
    32b0:	bf28      	it	cs
    32b2:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    32b4:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    32b6:	4a0f      	ldr	r2, [pc, #60]	; (32f4 <log_output_dropped_process+0x4c>)
{
    32b8:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    32ba:	2105      	movs	r1, #5
    32bc:	4668      	mov	r0, sp
    32be:	f01d ffe2 	bl	21286 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    32c2:	6863      	ldr	r3, [r4, #4]
    32c4:	490c      	ldr	r1, [pc, #48]	; (32f8 <log_output_dropped_process+0x50>)
    32c6:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    32c8:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    32ca:	220b      	movs	r2, #11
    32cc:	4628      	mov	r0, r5
    32ce:	f01e fdd6 	bl	21e7e <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    32d2:	6863      	ldr	r3, [r4, #4]
    32d4:	4632      	mov	r2, r6
    32d6:	4669      	mov	r1, sp
    32d8:	4628      	mov	r0, r5
    32da:	685b      	ldr	r3, [r3, #4]
    32dc:	f01e fdcf 	bl	21e7e <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    32e0:	6863      	ldr	r3, [r4, #4]
    32e2:	4906      	ldr	r1, [pc, #24]	; (32fc <log_output_dropped_process+0x54>)
    32e4:	685b      	ldr	r3, [r3, #4]
    32e6:	221b      	movs	r2, #27
    32e8:	4628      	mov	r0, r5
    32ea:	f01e fdc8 	bl	21e7e <buffer_write>
		     output->control_block->ctx);
}
    32ee:	b002      	add	sp, #8
    32f0:	bd70      	pop	{r4, r5, r6, pc}
    32f2:	bf00      	nop
    32f4:	0002f0f3 	.word	0x0002f0f3
    32f8:	0002ac5a 	.word	0x0002ac5a
    32fc:	0002ac3e 	.word	0x0002ac3e

00003300 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    3300:	4a08      	ldr	r2, [pc, #32]	; (3324 <log_output_timestamp_freq_set+0x24>)
{
    3302:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    3304:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    3306:	4c08      	ldr	r4, [pc, #32]	; (3328 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    3308:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    330a:	2100      	movs	r1, #0
    330c:	42a0      	cmp	r0, r4
    330e:	d804      	bhi.n	331a <log_output_timestamp_freq_set+0x1a>
    3310:	b101      	cbz	r1, 3314 <log_output_timestamp_freq_set+0x14>
    3312:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    3314:	4b05      	ldr	r3, [pc, #20]	; (332c <log_output_timestamp_freq_set+0x2c>)
    3316:	6018      	str	r0, [r3, #0]
}
    3318:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    331a:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    331c:	005b      	lsls	r3, r3, #1
    331e:	2101      	movs	r1, #1
    3320:	e7f4      	b.n	330c <log_output_timestamp_freq_set+0xc>
    3322:	bf00      	nop
    3324:	20002038 	.word	0x20002038
    3328:	000f4240 	.word	0x000f4240
    332c:	20002034 	.word	0x20002034

00003330 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    3330:	4b01      	ldr	r3, [pc, #4]	; (3338 <log_backend_rtt_init+0x8>)
    3332:	2201      	movs	r2, #1
    3334:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    3336:	4770      	bx	lr
    3338:	2000373e 	.word	0x2000373e

0000333c <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
    333c:	4b02      	ldr	r3, [pc, #8]	; (3348 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    333e:	4803      	ldr	r0, [pc, #12]	; (334c <panic+0x10>)
    3340:	2201      	movs	r2, #1
    3342:	701a      	strb	r2, [r3, #0]
    3344:	f01e bf05 	b.w	22152 <log_output_flush>
    3348:	2000373f 	.word	0x2000373f
    334c:	00029ca0 	.word	0x00029ca0

00003350 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    3350:	4801      	ldr	r0, [pc, #4]	; (3358 <dropped+0x8>)
    3352:	f7ff bfa9 	b.w	32a8 <log_output_dropped_process>
    3356:	bf00      	nop
    3358:	00029ca0 	.word	0x00029ca0

0000335c <put>:
{
    335c:	b510      	push	{r4, lr}
	log_msg_get(msg);
    335e:	4608      	mov	r0, r1
    3360:	460c      	mov	r4, r1
    3362:	f01e fc91 	bl	21c88 <log_msg_get>
	log_output_msg_process(output, msg, flags);
    3366:	4805      	ldr	r0, [pc, #20]	; (337c <put+0x20>)
    3368:	4621      	mov	r1, r4
    336a:	220f      	movs	r2, #15
    336c:	f7ff ff20 	bl	31b0 <log_output_msg_process>
	log_msg_put(msg);
    3370:	4620      	mov	r0, r4
}
    3372:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3376:	f01e bcb6 	b.w	21ce6 <log_msg_put>
    337a:	bf00      	nop
    337c:	00029ca0 	.word	0x00029ca0

00003380 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    3380:	4b05      	ldr	r3, [pc, #20]	; (3398 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
    3382:	781b      	ldrb	r3, [r3, #0]
    3384:	b11b      	cbz	r3, 338e <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    3386:	f241 3088 	movw	r0, #5000	; 0x1388
    338a:	f025 bed5 	b.w	29138 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    338e:	20a4      	movs	r0, #164	; 0xa4
    3390:	2100      	movs	r1, #0
    3392:	f01d bb23 	b.w	209dc <z_impl_k_sleep>
    3396:	bf00      	nop
    3398:	2000373f 	.word	0x2000373f

0000339c <data_out_block_mode>:
{
    339c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    33a0:	f8df 908c 	ldr.w	r9, [pc, #140]	; 3430 <data_out_block_mode+0x94>
	return z_impl_k_mutex_lock(mutex, timeout);
    33a4:	f8df a08c 	ldr.w	sl, [pc, #140]	; 3434 <data_out_block_mode+0x98>
{
    33a8:	4680      	mov	r8, r0
    33aa:	460f      	mov	r7, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    33ac:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
    33ae:	f899 5000 	ldrb.w	r5, [r9]
    33b2:	b9cd      	cbnz	r5, 33e8 <data_out_block_mode+0x4c>
    33b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    33b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    33bc:	4650      	mov	r0, sl
    33be:	f01c fd3b 	bl	1fe38 <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    33c2:	463a      	mov	r2, r7
    33c4:	4641      	mov	r1, r8
    33c6:	4628      	mov	r0, r5
    33c8:	f01c f9f4 	bl	1f7b4 <SEGGER_RTT_WriteSkipNoLock>
    33cc:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
    33ce:	4650      	mov	r0, sl
    33d0:	f01c fdaa 	bl	1ff28 <z_impl_k_mutex_unlock>
		if (ret) {
    33d4:	4d18      	ldr	r5, [pc, #96]	; (3438 <data_out_block_mode+0x9c>)
    33d6:	b1fe      	cbz	r6, 3418 <data_out_block_mode+0x7c>
	host_present = true;
    33d8:	2301      	movs	r3, #1
    33da:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    33dc:	f899 3000 	ldrb.w	r3, [r9]
    33e0:	b96b      	cbnz	r3, 33fe <data_out_block_mode+0x62>
}
    33e2:	4638      	mov	r0, r7
    33e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    33e8:	463a      	mov	r2, r7
    33ea:	4641      	mov	r1, r8
    33ec:	2000      	movs	r0, #0
    33ee:	f01c f9e1 	bl	1f7b4 <SEGGER_RTT_WriteSkipNoLock>
    33f2:	4606      	mov	r6, r0
    33f4:	e7ee      	b.n	33d4 <data_out_block_mode+0x38>
	if (retry_cnt == 0) {
    33f6:	b95c      	cbnz	r4, 3410 <data_out_block_mode+0x74>
		host_present = false;
    33f8:	702c      	strb	r4, [r5, #0]
    33fa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    33fe:	2000      	movs	r0, #0
    3400:	f01c fa54 	bl	1f8ac <SEGGER_RTT_HasDataUp>
    3404:	2800      	cmp	r0, #0
    3406:	d0ec      	beq.n	33e2 <data_out_block_mode+0x46>
    3408:	782b      	ldrb	r3, [r5, #0]
    340a:	2b00      	cmp	r3, #0
    340c:	d1f3      	bne.n	33f6 <data_out_block_mode+0x5a>
    340e:	e7e8      	b.n	33e2 <data_out_block_mode+0x46>
			on_failed_write(retry_cnt--);
    3410:	3c01      	subs	r4, #1
    3412:	f7ff ffb5 	bl	3380 <on_failed_write.part.0>
    3416:	e7f2      	b.n	33fe <data_out_block_mode+0x62>
		} else if (host_present) {
    3418:	782b      	ldrb	r3, [r5, #0]
    341a:	b113      	cbz	r3, 3422 <data_out_block_mode+0x86>
	if (retry_cnt == 0) {
    341c:	3c01      	subs	r4, #1
    341e:	d104      	bne.n	342a <data_out_block_mode+0x8e>
		host_present = false;
    3420:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    3422:	782b      	ldrb	r3, [r5, #0]
    3424:	2b00      	cmp	r3, #0
    3426:	d1c2      	bne.n	33ae <data_out_block_mode+0x12>
    3428:	e7db      	b.n	33e2 <data_out_block_mode+0x46>
    342a:	f7ff ffa9 	bl	3380 <on_failed_write.part.0>
    342e:	e7f8      	b.n	3422 <data_out_block_mode+0x86>
    3430:	2000373f 	.word	0x2000373f
    3434:	200010d0 	.word	0x200010d0
    3438:	2000373e 	.word	0x2000373e

0000343c <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
    343c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    3440:	460f      	mov	r7, r1
    3442:	4606      	mov	r6, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    3444:	2108      	movs	r1, #8
    3446:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

	*addr -= ate_size;
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
    3448:	f8df 9050 	ldr.w	r9, [pc, #80]	; 349c <nvs_recover_last_ate+0x60>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    344c:	f01e ff6e 	bl	2232c <nvs_al_size.isra.0>
	*addr -= ate_size;
    3450:	683c      	ldr	r4, [r7, #0]
    3452:	1a24      	subs	r4, r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    3454:	4680      	mov	r8, r0
	*addr -= ate_size;
    3456:	603c      	str	r4, [r7, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
    3458:	ea04 0509 	and.w	r5, r4, r9
	while (ate_end_addr > data_end_addr) {
    345c:	42ac      	cmp	r4, r5
    345e:	d803      	bhi.n	3468 <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
    3460:	2000      	movs	r0, #0
}
    3462:	b003      	add	sp, #12
    3464:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    3468:	2308      	movs	r3, #8
    346a:	466a      	mov	r2, sp
    346c:	4621      	mov	r1, r4
    346e:	4630      	mov	r0, r6
    3470:	f01e feb6 	bl	221e0 <nvs_flash_rd>
		if (rc) {
    3474:	2800      	cmp	r0, #0
    3476:	d1f4      	bne.n	3462 <nvs_recover_last_ate+0x26>
		if (nvs_ate_valid(fs, &end_ate)) {
    3478:	4669      	mov	r1, sp
    347a:	4630      	mov	r0, r6
    347c:	f01e ff60 	bl	22340 <nvs_ate_valid>
    3480:	b140      	cbz	r0, 3494 <nvs_recover_last_ate+0x58>
			data_end_addr += end_ate.offset + end_ate.len;
    3482:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    3486:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			*addr = ate_end_addr;
    348a:	603c      	str	r4, [r7, #0]
			data_end_addr &= ADDR_SECT_MASK;
    348c:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
    3490:	4413      	add	r3, r2
    3492:	441d      	add	r5, r3
		ate_end_addr -= ate_size;
    3494:	eba4 0408 	sub.w	r4, r4, r8
    3498:	e7e0      	b.n	345c <nvs_recover_last_ate+0x20>
    349a:	bf00      	nop
    349c:	ffff0000 	.word	0xffff0000

000034a0 <nvs_init>:

	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
    34a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    34a4:	4604      	mov	r4, r0
    34a6:	b089      	sub	sp, #36	; 0x24
    34a8:	460d      	mov	r5, r1

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
    34aa:	f100 0714 	add.w	r7, r0, #20
	return z_impl_k_mutex_init(mutex);
    34ae:	4638      	mov	r0, r7
    34b0:	f025 fadd 	bl	28a6e <z_impl_k_mutex_init>
    34b4:	4628      	mov	r0, r5
    34b6:	f01c fa23 	bl	1f900 <z_impl_device_get_binding>

	fs->flash_device = device_get_binding(dev_name);
    34ba:	62a0      	str	r0, [r4, #40]	; 0x28
	if (!fs->flash_device) {
    34bc:	b978      	cbnz	r0, 34de <nvs_init+0x3e>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    34be:	4bab      	ldr	r3, [pc, #684]	; (376c <nvs_init+0x2cc>)
    34c0:	49ab      	ldr	r1, [pc, #684]	; (3770 <nvs_init+0x2d0>)
		LOG_ERR("No valid flash device found");
    34c2:	48ac      	ldr	r0, [pc, #688]	; (3774 <nvs_init+0x2d4>)
    34c4:	1ac9      	subs	r1, r1, r3
    34c6:	08c9      	lsrs	r1, r1, #3
    34c8:	0189      	lsls	r1, r1, #6
    34ca:	f041 0101 	orr.w	r1, r1, #1
    34ce:	f01e fb0c 	bl	21aea <log_0>
		return -ENXIO;
    34d2:	f06f 0505 	mvn.w	r5, #5
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
    34d6:	4628      	mov	r0, r5
    34d8:	b009      	add	sp, #36	; 0x24
    34da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    34de:	6883      	ldr	r3, [r0, #8]
    34e0:	691b      	ldr	r3, [r3, #16]
    34e2:	4798      	blx	r3
	fs->flash_parameters = flash_get_parameters(fs->flash_device);
    34e4:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
    34e6:	b960      	cbnz	r0, 3502 <nvs_init+0x62>
    34e8:	49a1      	ldr	r1, [pc, #644]	; (3770 <nvs_init+0x2d0>)
    34ea:	4ba0      	ldr	r3, [pc, #640]	; (376c <nvs_init+0x2cc>)
		LOG_ERR("Could not obtain flash parameters");
    34ec:	48a2      	ldr	r0, [pc, #648]	; (3778 <nvs_init+0x2d8>)
    34ee:	1ac9      	subs	r1, r1, r3
    34f0:	08c9      	lsrs	r1, r1, #3
    34f2:	0189      	lsls	r1, r1, #6
    34f4:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Configuration error - sector count");
    34f8:	f01e faf7 	bl	21aea <log_0>
		return -EINVAL;
    34fc:	f06f 0515 	mvn.w	r5, #21
    3500:	e7e9      	b.n	34d6 <nvs_init+0x36>
	write_block_size = flash_get_write_block_size(fs->flash_device);
    3502:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
    3504:	6883      	ldr	r3, [r0, #8]
    3506:	691b      	ldr	r3, [r3, #16]
    3508:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
    350a:	6803      	ldr	r3, [r0, #0]
    350c:	3b01      	subs	r3, #1
    350e:	2b1f      	cmp	r3, #31
    3510:	d908      	bls.n	3524 <nvs_init+0x84>
    3512:	4997      	ldr	r1, [pc, #604]	; (3770 <nvs_init+0x2d0>)
    3514:	4b95      	ldr	r3, [pc, #596]	; (376c <nvs_init+0x2cc>)
		LOG_ERR("Unsupported write block size");
    3516:	4899      	ldr	r0, [pc, #612]	; (377c <nvs_init+0x2dc>)
    3518:	1ac9      	subs	r1, r1, r3
    351a:	08c9      	lsrs	r1, r1, #3
    351c:	0189      	lsls	r1, r1, #6
    351e:	f041 0101 	orr.w	r1, r1, #1
    3522:	e7e9      	b.n	34f8 <nvs_init+0x58>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
    3524:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    3526:	6821      	ldr	r1, [r4, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
    3528:	aa05      	add	r2, sp, #20
    352a:	f025 f8aa 	bl	28682 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
    352e:	b140      	cbz	r0, 3542 <nvs_init+0xa2>
    3530:	498f      	ldr	r1, [pc, #572]	; (3770 <nvs_init+0x2d0>)
    3532:	4b8e      	ldr	r3, [pc, #568]	; (376c <nvs_init+0x2cc>)
		LOG_ERR("Unable to get page info");
    3534:	4892      	ldr	r0, [pc, #584]	; (3780 <nvs_init+0x2e0>)
    3536:	1ac9      	subs	r1, r1, r3
    3538:	08c9      	lsrs	r1, r1, #3
    353a:	0189      	lsls	r1, r1, #6
    353c:	f041 0101 	orr.w	r1, r1, #1
    3540:	e7da      	b.n	34f8 <nvs_init+0x58>
	if (!fs->sector_size || fs->sector_size % info.size) {
    3542:	89a5      	ldrh	r5, [r4, #12]
    3544:	b12d      	cbz	r5, 3552 <nvs_init+0xb2>
    3546:	9b06      	ldr	r3, [sp, #24]
    3548:	fbb5 f2f3 	udiv	r2, r5, r3
    354c:	fb03 5512 	mls	r5, r3, r2, r5
    3550:	b145      	cbz	r5, 3564 <nvs_init+0xc4>
    3552:	4987      	ldr	r1, [pc, #540]	; (3770 <nvs_init+0x2d0>)
    3554:	4b85      	ldr	r3, [pc, #532]	; (376c <nvs_init+0x2cc>)
		LOG_ERR("Invalid sector size");
    3556:	488b      	ldr	r0, [pc, #556]	; (3784 <nvs_init+0x2e4>)
    3558:	1ac9      	subs	r1, r1, r3
    355a:	08c9      	lsrs	r1, r1, #3
    355c:	0189      	lsls	r1, r1, #6
    355e:	f041 0101 	orr.w	r1, r1, #1
    3562:	e7c9      	b.n	34f8 <nvs_init+0x58>
	if (fs->sector_count < 2) {
    3564:	89e3      	ldrh	r3, [r4, #14]
    3566:	2b01      	cmp	r3, #1
    3568:	d808      	bhi.n	357c <nvs_init+0xdc>
    356a:	4981      	ldr	r1, [pc, #516]	; (3770 <nvs_init+0x2d0>)
    356c:	4b7f      	ldr	r3, [pc, #508]	; (376c <nvs_init+0x2cc>)
		LOG_ERR("Configuration error - sector count");
    356e:	4886      	ldr	r0, [pc, #536]	; (3788 <nvs_init+0x2e8>)
    3570:	1ac9      	subs	r1, r1, r3
    3572:	08c9      	lsrs	r1, r1, #3
    3574:	0189      	lsls	r1, r1, #6
    3576:	f041 0101 	orr.w	r1, r1, #1
    357a:	e7bd      	b.n	34f8 <nvs_init+0x58>
	uint8_t erase_value = fs->flash_parameters->erase_value;
    357c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
    357e:	9500      	str	r5, [sp, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
    3580:	f893 8004 	ldrb.w	r8, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    3584:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3588:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    358c:	4638      	mov	r0, r7
    358e:	f01c fc53 	bl	1fe38 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    3592:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    3594:	2108      	movs	r1, #8
    3596:	f01e fec9 	bl	2232c <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
    359a:	46a9      	mov	r9, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    359c:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
    359e:	89e3      	ldrh	r3, [r4, #14]
    35a0:	fa1f fa85 	uxth.w	sl, r5
    35a4:	4553      	cmp	r3, sl
    35a6:	d845      	bhi.n	3634 <nvs_init+0x194>
	if (closed_sectors == fs->sector_count) {
    35a8:	89e3      	ldrh	r3, [r4, #14]
    35aa:	454b      	cmp	r3, r9
    35ac:	f000 80f2 	beq.w	3794 <nvs_init+0x2f4>
	if (i == fs->sector_count) {
    35b0:	459a      	cmp	sl, r3
    35b2:	d10b      	bne.n	35cc <nvs_init+0x12c>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
    35b4:	9900      	ldr	r1, [sp, #0]
    35b6:	2308      	movs	r3, #8
    35b8:	4642      	mov	r2, r8
    35ba:	1b89      	subs	r1, r1, r6
    35bc:	4620      	mov	r0, r4
    35be:	f01e fe47 	bl	22250 <nvs_flash_cmp_const>
		if (!rc) {
    35c2:	b918      	cbnz	r0, 35cc <nvs_init+0x12c>
			nvs_sector_advance(fs, &addr);
    35c4:	89e0      	ldrh	r0, [r4, #14]
    35c6:	4669      	mov	r1, sp
    35c8:	f01e fea5 	bl	22316 <nvs_sector_advance.isra.0>
	rc = nvs_recover_last_ate(fs, &addr);
    35cc:	4669      	mov	r1, sp
    35ce:	4620      	mov	r0, r4
    35d0:	f7ff ff34 	bl	343c <nvs_recover_last_ate>
	if (rc) {
    35d4:	4605      	mov	r5, r0
    35d6:	2800      	cmp	r0, #0
    35d8:	f040 80de 	bne.w	3798 <nvs_init+0x2f8>
	fs->ate_wra = addr;
    35dc:	9b00      	ldr	r3, [sp, #0]
	fs->data_wra = addr & ADDR_SECT_MASK;
    35de:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 378c <nvs_init+0x2ec>
	fs->ate_wra = addr;
    35e2:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
    35e4:	ea03 0309 	and.w	r3, r3, r9
    35e8:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
    35ea:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    35ee:	4299      	cmp	r1, r3
    35f0:	d30e      	bcc.n	3610 <nvs_init+0x170>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    35f2:	2308      	movs	r3, #8
    35f4:	aa01      	add	r2, sp, #4
    35f6:	4620      	mov	r0, r4
    35f8:	f01e fdf2 	bl	221e0 <nvs_flash_rd>
		if (rc) {
    35fc:	b9c0      	cbnz	r0, 3630 <nvs_init+0x190>
    35fe:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
    3600:	f813 2b01 	ldrb.w	r2, [r3], #1
    3604:	4590      	cmp	r8, r2
    3606:	f040 8102 	bne.w	380e <nvs_init+0x36e>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    360a:	3001      	adds	r0, #1
    360c:	2808      	cmp	r0, #8
    360e:	d1f7      	bne.n	3600 <nvs_init+0x160>
	addr = fs->ate_wra & ADDR_SECT_MASK;
    3610:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &addr);
    3612:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
    3614:	0c1b      	lsrs	r3, r3, #16
    3616:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
    3618:	4669      	mov	r1, sp
	addr = fs->ate_wra & ADDR_SECT_MASK;
    361a:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
    361c:	f01e fe7b 	bl	22316 <nvs_sector_advance.isra.0>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
    3620:	89a3      	ldrh	r3, [r4, #12]
    3622:	9900      	ldr	r1, [sp, #0]
    3624:	4642      	mov	r2, r8
    3626:	4620      	mov	r0, r4
    3628:	f01e fe12 	bl	22250 <nvs_flash_cmp_const>
	if (rc < 0) {
    362c:	2800      	cmp	r0, #0
    362e:	da26      	bge.n	367e <nvs_init+0x1de>
    3630:	4605      	mov	r5, r0
    3632:	e0b1      	b.n	3798 <nvs_init+0x2f8>
		       (uint16_t)(fs->sector_size - ate_size);
    3634:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
    3636:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
    3638:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
    363a:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    363e:	4642      	mov	r2, r8
    3640:	2308      	movs	r3, #8
    3642:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
    3644:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    3646:	f01e fe03 	bl	22250 <nvs_flash_cmp_const>
		if (rc) {
    364a:	b178      	cbz	r0, 366c <nvs_init+0x1cc>
			nvs_sector_advance(fs, &addr);
    364c:	89e0      	ldrh	r0, [r4, #14]
    364e:	4669      	mov	r1, sp
    3650:	f01e fe61 	bl	22316 <nvs_sector_advance.isra.0>
			closed_sectors++;
    3654:	f109 0901 	add.w	r9, r9, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    3658:	9900      	ldr	r1, [sp, #0]
    365a:	2308      	movs	r3, #8
    365c:	4642      	mov	r2, r8
    365e:	4620      	mov	r0, r4
			closed_sectors++;
    3660:	fa1f f989 	uxth.w	r9, r9
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    3664:	f01e fdf4 	bl	22250 <nvs_flash_cmp_const>
			if (!rc) {
    3668:	2800      	cmp	r0, #0
    366a:	d09d      	beq.n	35a8 <nvs_init+0x108>
	for (i = 0; i < fs->sector_count; i++) {
    366c:	3501      	adds	r5, #1
    366e:	e796      	b.n	359e <nvs_init+0xfe>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    3670:	f1ba 0f00 	cmp.w	sl, #0
    3674:	f000 80e3 	beq.w	383e <nvs_init+0x39e>
				rc = -ESPIPE;
    3678:	f06f 051c 	mvn.w	r5, #28
    367c:	e08c      	b.n	3798 <nvs_init+0x2f8>
	if (rc) {
    367e:	d04f      	beq.n	3720 <nvs_init+0x280>
		addr = fs->ate_wra + ate_size;
    3680:	6863      	ldr	r3, [r4, #4]
    3682:	4433      	add	r3, r6
    3684:	9300      	str	r3, [sp, #0]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    3686:	f64f 78ff 	movw	r8, #65535	; 0xffff
    368a:	9900      	ldr	r1, [sp, #0]
    368c:	89a3      	ldrh	r3, [r4, #12]
    368e:	b28a      	uxth	r2, r1
    3690:	1b9b      	subs	r3, r3, r6
    3692:	429a      	cmp	r2, r3
    3694:	d31f      	bcc.n	36d6 <nvs_init+0x236>
    3696:	4b35      	ldr	r3, [pc, #212]	; (376c <nvs_init+0x2cc>)
    3698:	4935      	ldr	r1, [pc, #212]	; (3770 <nvs_init+0x2d0>)
		LOG_INF("No GC Done marker found: restarting gc");
    369a:	483d      	ldr	r0, [pc, #244]	; (3790 <nvs_init+0x2f0>)
    369c:	1ac9      	subs	r1, r1, r3
    369e:	08c9      	lsrs	r1, r1, #3
    36a0:	0189      	lsls	r1, r1, #6
    36a2:	f041 0103 	orr.w	r1, r1, #3
    36a6:	f01e fa20 	bl	21aea <log_0>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    36aa:	6861      	ldr	r1, [r4, #4]
    36ac:	4620      	mov	r0, r4
    36ae:	f01e fdf4 	bl	2229a <nvs_flash_erase_sector>
		if (rc) {
    36b2:	2800      	cmp	r0, #0
    36b4:	d1bc      	bne.n	3630 <nvs_init+0x190>
		fs->ate_wra &= ADDR_SECT_MASK;
    36b6:	6863      	ldr	r3, [r4, #4]
    36b8:	4a34      	ldr	r2, [pc, #208]	; (378c <nvs_init+0x2ec>)
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    36ba:	89a1      	ldrh	r1, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
    36bc:	4013      	ands	r3, r2
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    36be:	440b      	add	r3, r1
    36c0:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
    36c4:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    36c6:	4013      	ands	r3, r2
    36c8:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
    36ca:	4620      	mov	r0, r4
    36cc:	f01e ff2a 	bl	22524 <nvs_gc>
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    36d0:	2800      	cmp	r0, #0
    36d2:	d040      	beq.n	3756 <nvs_init+0x2b6>
    36d4:	e7ac      	b.n	3630 <nvs_init+0x190>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    36d6:	2308      	movs	r3, #8
    36d8:	aa03      	add	r2, sp, #12
    36da:	4620      	mov	r0, r4
    36dc:	f01e fd80 	bl	221e0 <nvs_flash_rd>
			if (rc) {
    36e0:	2800      	cmp	r0, #0
    36e2:	d1a5      	bne.n	3630 <nvs_init+0x190>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
    36e4:	a903      	add	r1, sp, #12
    36e6:	4620      	mov	r0, r4
    36e8:	f01e fe2a 	bl	22340 <nvs_ate_valid>
    36ec:	b138      	cbz	r0, 36fe <nvs_init+0x25e>
    36ee:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    36f2:	4543      	cmp	r3, r8
    36f4:	d103      	bne.n	36fe <nvs_init+0x25e>
			    (gc_done_ate.id == 0xffff) &&
    36f6:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    36fa:	2b00      	cmp	r3, #0
    36fc:	d070      	beq.n	37e0 <nvs_init+0x340>
			addr += ate_size;
    36fe:	9b00      	ldr	r3, [sp, #0]
    3700:	4433      	add	r3, r6
    3702:	9300      	str	r3, [sp, #0]
    3704:	e7c1      	b.n	368a <nvs_init+0x1ea>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
    3706:	1a5b      	subs	r3, r3, r1
    3708:	4642      	mov	r2, r8
    370a:	4620      	mov	r0, r4
    370c:	f01e fda0 	bl	22250 <nvs_flash_cmp_const>
		if (rc < 0) {
    3710:	2800      	cmp	r0, #0
    3712:	db8d      	blt.n	3630 <nvs_init+0x190>
		if (!rc) {
    3714:	d008      	beq.n	3728 <nvs_init+0x288>
		fs->data_wra += fs->flash_parameters->write_block_size;
    3716:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3718:	68a3      	ldr	r3, [r4, #8]
    371a:	6812      	ldr	r2, [r2, #0]
    371c:	4413      	add	r3, r2
    371e:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
    3720:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    3724:	428b      	cmp	r3, r1
    3726:	d8ee      	bhi.n	3706 <nvs_init+0x266>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    3728:	6861      	ldr	r1, [r4, #4]
    372a:	89a3      	ldrh	r3, [r4, #12]
    372c:	eb01 0246 	add.w	r2, r1, r6, lsl #1
    3730:	429a      	cmp	r2, r3
    3732:	d1cd      	bne.n	36d0 <nvs_init+0x230>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
    3734:	f8df 8054 	ldr.w	r8, [pc, #84]	; 378c <nvs_init+0x2ec>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    3738:	68a3      	ldr	r3, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
    373a:	ea01 0208 	and.w	r2, r1, r8
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    373e:	4293      	cmp	r3, r2
    3740:	d0c6      	beq.n	36d0 <nvs_init+0x230>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    3742:	4620      	mov	r0, r4
    3744:	f01e fda9 	bl	2229a <nvs_flash_erase_sector>
		if (rc) {
    3748:	2800      	cmp	r0, #0
    374a:	f47f af71 	bne.w	3630 <nvs_init+0x190>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    374e:	6863      	ldr	r3, [r4, #4]
    3750:	ea03 0308 	and.w	r3, r3, r8
    3754:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
    3756:	89a0      	ldrh	r0, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    3758:	88a3      	ldrh	r3, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
    375a:	eba0 0646 	sub.w	r6, r0, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    375e:	42b3      	cmp	r3, r6
    3760:	d11a      	bne.n	3798 <nvs_init+0x2f8>
		rc = nvs_add_gc_done_ate(fs);
    3762:	4620      	mov	r0, r4
    3764:	f01e fe7d 	bl	22462 <nvs_add_gc_done_ate>
    3768:	e762      	b.n	3630 <nvs_init+0x190>
    376a:	bf00      	nop
    376c:	00029870 	.word	0x00029870
    3770:	00029a68 	.word	0x00029a68
    3774:	0002ac8a 	.word	0x0002ac8a
    3778:	0002aca6 	.word	0x0002aca6
    377c:	0002acc8 	.word	0x0002acc8
    3780:	0002ace5 	.word	0x0002ace5
    3784:	0002acfd 	.word	0x0002acfd
    3788:	0002ad11 	.word	0x0002ad11
    378c:	ffff0000 	.word	0xffff0000
    3790:	0002ad83 	.word	0x0002ad83
		rc = -EDEADLK;
    3794:	f06f 052c 	mvn.w	r5, #44	; 0x2c
	return z_impl_k_mutex_unlock(mutex);
    3798:	4638      	mov	r0, r7
    379a:	f01c fbc5 	bl	1ff28 <z_impl_k_mutex_unlock>
	if (rc) {
    379e:	2d00      	cmp	r5, #0
    37a0:	f47f ae99 	bne.w	34d6 <nvs_init+0x36>
	fs->ready = true;
    37a4:	2301      	movs	r3, #1
    37a6:	7423      	strb	r3, [r4, #16]
    37a8:	4e27      	ldr	r6, [pc, #156]	; (3848 <nvs_init+0x3a8>)
    37aa:	4b28      	ldr	r3, [pc, #160]	; (384c <nvs_init+0x3ac>)
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    37ac:	89a2      	ldrh	r2, [r4, #12]
    37ae:	89e1      	ldrh	r1, [r4, #14]
    37b0:	4827      	ldr	r0, [pc, #156]	; (3850 <nvs_init+0x3b0>)
    37b2:	1af6      	subs	r6, r6, r3
    37b4:	08f6      	lsrs	r6, r6, #3
    37b6:	01b6      	lsls	r6, r6, #6
    37b8:	f046 0603 	orr.w	r6, r6, #3
    37bc:	4633      	mov	r3, r6
    37be:	f01e f9b5 	bl	21b2c <log_2>
	LOG_INF("alloc wra: %d, %x",
    37c2:	6861      	ldr	r1, [r4, #4]
    37c4:	4823      	ldr	r0, [pc, #140]	; (3854 <nvs_init+0x3b4>)
    37c6:	4633      	mov	r3, r6
    37c8:	b28a      	uxth	r2, r1
    37ca:	0c09      	lsrs	r1, r1, #16
    37cc:	f01e f9ae 	bl	21b2c <log_2>
	LOG_INF("data wra: %d, %x",
    37d0:	68a1      	ldr	r1, [r4, #8]
    37d2:	4821      	ldr	r0, [pc, #132]	; (3858 <nvs_init+0x3b8>)
    37d4:	b28a      	uxth	r2, r1
    37d6:	4633      	mov	r3, r6
    37d8:	0c09      	lsrs	r1, r1, #16
    37da:	f01e f9a7 	bl	21b2c <log_2>
	return 0;
    37de:	e67a      	b.n	34d6 <nvs_init+0x36>
    37e0:	4b1a      	ldr	r3, [pc, #104]	; (384c <nvs_init+0x3ac>)
    37e2:	4919      	ldr	r1, [pc, #100]	; (3848 <nvs_init+0x3a8>)
			LOG_INF("GC Done marker found");
    37e4:	481d      	ldr	r0, [pc, #116]	; (385c <nvs_init+0x3bc>)
    37e6:	1ac9      	subs	r1, r1, r3
    37e8:	08c9      	lsrs	r1, r1, #3
    37ea:	0189      	lsls	r1, r1, #6
    37ec:	f041 0103 	orr.w	r1, r1, #3
    37f0:	f01e f97b 	bl	21aea <log_0>
			addr = fs->ate_wra & ADDR_SECT_MASK;
    37f4:	6863      	ldr	r3, [r4, #4]
			nvs_sector_advance(fs, &addr);
    37f6:	89e0      	ldrh	r0, [r4, #14]
			addr = fs->ate_wra & ADDR_SECT_MASK;
    37f8:	0c1b      	lsrs	r3, r3, #16
    37fa:	041b      	lsls	r3, r3, #16
			nvs_sector_advance(fs, &addr);
    37fc:	4669      	mov	r1, sp
			addr = fs->ate_wra & ADDR_SECT_MASK;
    37fe:	9300      	str	r3, [sp, #0]
			nvs_sector_advance(fs, &addr);
    3800:	f01e fd89 	bl	22316 <nvs_sector_advance.isra.0>
			rc = nvs_flash_erase_sector(fs, addr);
    3804:	9900      	ldr	r1, [sp, #0]
    3806:	4620      	mov	r0, r4
    3808:	f01e fd47 	bl	2229a <nvs_flash_erase_sector>
			goto end;
    380c:	e760      	b.n	36d0 <nvs_init+0x230>
		if (nvs_ate_valid(fs, &last_ate)) {
    380e:	a901      	add	r1, sp, #4
    3810:	4620      	mov	r0, r4
    3812:	f01e fd95 	bl	22340 <nvs_ate_valid>
    3816:	f8d4 b004 	ldr.w	fp, [r4, #4]
    381a:	b180      	cbz	r0, 383e <nvs_init+0x39e>
			fs->data_wra = addr & ADDR_SECT_MASK;
    381c:	9a00      	ldr	r2, [sp, #0]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    381e:	f8bd a008 	ldrh.w	sl, [sp, #8]
    3822:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    3826:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
    3828:	ea02 0209 	and.w	r2, r2, r9
    382c:	60a2      	str	r2, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    382e:	4451      	add	r1, sl
    3830:	f01e fd7c 	bl	2232c <nvs_al_size.isra.0>
    3834:	4402      	add	r2, r0
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    3836:	455a      	cmp	r2, fp
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    3838:	60a2      	str	r2, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    383a:	f43f af19 	beq.w	3670 <nvs_init+0x1d0>
		fs->ate_wra -= ate_size;
    383e:	ebab 0306 	sub.w	r3, fp, r6
    3842:	6063      	str	r3, [r4, #4]
    3844:	e6d1      	b.n	35ea <nvs_init+0x14a>
    3846:	bf00      	nop
    3848:	00029a68 	.word	0x00029a68
    384c:	00029870 	.word	0x00029870
    3850:	0002ad34 	.word	0x0002ad34
    3854:	0002ad4b 	.word	0x0002ad4b
    3858:	0002ad5d 	.word	0x0002ad5d
    385c:	0002ad6e 	.word	0x0002ad6e

00003860 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
    3860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3864:	461e      	mov	r6, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
    3866:	7c03      	ldrb	r3, [r0, #16]
{
    3868:	b089      	sub	sp, #36	; 0x24
    386a:	4604      	mov	r4, r0
    386c:	4689      	mov	r9, r1
    386e:	4690      	mov	r8, r2
	if (!fs->ready) {
    3870:	b97b      	cbnz	r3, 3892 <nvs_write+0x32>
    3872:	4b61      	ldr	r3, [pc, #388]	; (39f8 <nvs_write+0x198>)
    3874:	4961      	ldr	r1, [pc, #388]	; (39fc <nvs_write+0x19c>)
		LOG_ERR("NVS not initialized");
    3876:	4862      	ldr	r0, [pc, #392]	; (3a00 <nvs_write+0x1a0>)
    3878:	1ac9      	subs	r1, r1, r3
    387a:	08c9      	lsrs	r1, r1, #3
    387c:	0189      	lsls	r1, r1, #6
    387e:	f041 0101 	orr.w	r1, r1, #1
    3882:	f01e f932 	bl	21aea <log_0>
		return -EACCES;
    3886:	f06f 050c 	mvn.w	r5, #12
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
    388a:	4628      	mov	r0, r5
    388c:	b009      	add	sp, #36	; 0x24
    388e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    3892:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    3894:	2108      	movs	r1, #8
    3896:	4610      	mov	r0, r2
    3898:	f01e fd48 	bl	2232c <nvs_al_size.isra.0>
	data_size = nvs_al_size(fs, len);
    389c:	4631      	mov	r1, r6
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    389e:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
    38a0:	4610      	mov	r0, r2
    38a2:	f01e fd43 	bl	2232c <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 4 * ate_size)) ||
    38a6:	89a3      	ldrh	r3, [r4, #12]
    38a8:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
    38ac:	429e      	cmp	r6, r3
	data_size = nvs_al_size(fs, len);
    38ae:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
    38b0:	f200 809e 	bhi.w	39f0 <nvs_write+0x190>
    38b4:	b11e      	cbz	r6, 38be <nvs_write+0x5e>
	    ((len > 0) && (data == NULL))) {
    38b6:	f1b8 0f00 	cmp.w	r8, #0
    38ba:	f000 8099 	beq.w	39f0 <nvs_write+0x190>
	wlk_addr = fs->ate_wra;
    38be:	6863      	ldr	r3, [r4, #4]
    38c0:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    38c2:	aa04      	add	r2, sp, #16
    38c4:	a903      	add	r1, sp, #12
    38c6:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
    38c8:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    38cc:	f01e fdde 	bl	2248c <nvs_prev_ate>
		if (rc) {
    38d0:	4605      	mov	r5, r0
    38d2:	2800      	cmp	r0, #0
    38d4:	d1d9      	bne.n	388a <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
    38d6:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    38da:	454b      	cmp	r3, r9
    38dc:	d005      	beq.n	38ea <nvs_write+0x8a>
		if (wlk_addr == fs->ate_wra) {
    38de:	6862      	ldr	r2, [r4, #4]
    38e0:	9b03      	ldr	r3, [sp, #12]
    38e2:	429a      	cmp	r2, r3
    38e4:	d1ed      	bne.n	38c2 <nvs_write+0x62>
		if (len == 0) {
    38e6:	b9e6      	cbnz	r6, 3922 <nvs_write+0xc2>
    38e8:	e7cf      	b.n	388a <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
    38ea:	a904      	add	r1, sp, #16
    38ec:	4620      	mov	r0, r4
    38ee:	f01e fd27 	bl	22340 <nvs_ate_valid>
    38f2:	2800      	cmp	r0, #0
    38f4:	d0f3      	beq.n	38de <nvs_write+0x7e>
			if (wlk_ate.len == 0U) {
    38f6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
		if (len == 0) {
    38fa:	b186      	cbz	r6, 391e <nvs_write+0xbe>
		} else if (len == wlk_ate.len) {
    38fc:	429e      	cmp	r6, r3
    38fe:	d110      	bne.n	3922 <nvs_write+0xc2>
		rd_addr += wlk_ate.offset;
    3900:	f8bd 0012 	ldrh.w	r0, [sp, #18]
		rd_addr &= ADDR_SECT_MASK;
    3904:	ea4f 411b 	mov.w	r1, fp, lsr #16
    3908:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
    390a:	4401      	add	r1, r0
    390c:	4633      	mov	r3, r6
    390e:	4642      	mov	r2, r8
    3910:	4620      	mov	r0, r4
    3912:	f01e fc73 	bl	221fc <nvs_flash_block_cmp>
			if (rc <= 0) {
    3916:	2800      	cmp	r0, #0
    3918:	dc03      	bgt.n	3922 <nvs_write+0xc2>
    391a:	4605      	mov	r5, r0
    391c:	e7b5      	b.n	388a <nvs_write+0x2a>
			if (wlk_ate.len == 0U) {
    391e:	2b00      	cmp	r3, #0
    3920:	d0b3      	beq.n	388a <nvs_write+0x2a>
	if (data_size) {
    3922:	bba7      	cbnz	r7, 398e <nvs_write+0x12e>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
    3924:	f104 0a14 	add.w	sl, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
    3928:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    392c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3930:	4650      	mov	r0, sl
    3932:	f01c fa81 	bl	1fe38 <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
    3936:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 3a04 <nvs_write+0x1a4>
		if (gc_count == fs->sector_count) {
    393a:	89e3      	ldrh	r3, [r4, #14]
    393c:	429d      	cmp	r5, r3
    393e:	d054      	beq.n	39ea <nvs_write+0x18a>
		if (fs->ate_wra >= (fs->data_wra + required_space)) {
    3940:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    3944:	18f9      	adds	r1, r7, r3
    3946:	428a      	cmp	r2, r1
    3948:	d324      	bcc.n	3994 <nvs_write+0x134>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    394a:	f8ad 301a 	strh.w	r3, [sp, #26]
	nvs_ate_crc8_update(&entry);
    394e:	a806      	add	r0, sp, #24
	entry.part = 0xff;
    3950:	23ff      	movs	r3, #255	; 0xff
    3952:	f88d 301e 	strb.w	r3, [sp, #30]
	entry.id = id;
    3956:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.len = (uint16_t)len;
    395a:	f8ad 601c 	strh.w	r6, [sp, #28]
	nvs_ate_crc8_update(&entry);
    395e:	f01e fcd1 	bl	22304 <nvs_ate_crc8_update>
	rc = nvs_flash_data_wrt(fs, data, len);
    3962:	4632      	mov	r2, r6
    3964:	4641      	mov	r1, r8
    3966:	4620      	mov	r0, r4
    3968:	f01e fd57 	bl	2241a <nvs_flash_data_wrt>
	if (rc) {
    396c:	4603      	mov	r3, r0
    396e:	b938      	cbnz	r0, 3980 <nvs_write+0x120>
	rc = nvs_flash_ate_wrt(fs, &entry);
    3970:	a906      	add	r1, sp, #24
    3972:	4620      	mov	r0, r4
    3974:	f01e fd64 	bl	22440 <nvs_flash_ate_wrt>
	rc = len;
    3978:	2800      	cmp	r0, #0
    397a:	bf14      	ite	ne
    397c:	4603      	movne	r3, r0
    397e:	4633      	moveq	r3, r6
    3980:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
    3982:	4650      	mov	r0, sl
    3984:	f01c fad0 	bl	1ff28 <z_impl_k_mutex_unlock>
	return rc;
    3988:	9b01      	ldr	r3, [sp, #4]
    398a:	461d      	mov	r5, r3
    398c:	e77d      	b.n	388a <nvs_write+0x2a>
		required_space = data_size + ate_size;
    398e:	4457      	add	r7, sl
    3990:	b2bf      	uxth	r7, r7
    3992:	e7c7      	b.n	3924 <nvs_write+0xc4>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    3994:	2108      	movs	r1, #8
    3996:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    3998:	f01e fcc8 	bl	2232c <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
    399c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    39a0:	f8ad 3018 	strh.w	r3, [sp, #24]
	close_ate.len = 0U;
    39a4:	2300      	movs	r3, #0
    39a6:	f8ad 301c 	strh.w	r3, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
    39aa:	1813      	adds	r3, r2, r0
    39ac:	f8ad 301a 	strh.w	r3, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
    39b0:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
    39b2:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
    39b6:	441a      	add	r2, r3
    39b8:	1a12      	subs	r2, r2, r0
    39ba:	6062      	str	r2, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
    39bc:	a806      	add	r0, sp, #24
    39be:	f01e fca1 	bl	22304 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
    39c2:	a906      	add	r1, sp, #24
    39c4:	4620      	mov	r0, r4
    39c6:	f01e fd3b 	bl	22440 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
    39ca:	89e0      	ldrh	r0, [r4, #14]
    39cc:	1d21      	adds	r1, r4, #4
    39ce:	f01e fca2 	bl	22316 <nvs_sector_advance.isra.0>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    39d2:	6863      	ldr	r3, [r4, #4]
    39d4:	ea03 030b 	and.w	r3, r3, fp
    39d8:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
    39da:	4620      	mov	r0, r4
    39dc:	f01e fda2 	bl	22524 <nvs_gc>
		if (rc) {
    39e0:	4603      	mov	r3, r0
    39e2:	2800      	cmp	r0, #0
    39e4:	d1cc      	bne.n	3980 <nvs_write+0x120>
		gc_count++;
    39e6:	3501      	adds	r5, #1
		if (gc_count == fs->sector_count) {
    39e8:	e7a7      	b.n	393a <nvs_write+0xda>
			rc = -ENOSPC;
    39ea:	f06f 031b 	mvn.w	r3, #27
    39ee:	e7c7      	b.n	3980 <nvs_write+0x120>
		return -EINVAL;
    39f0:	f06f 0515 	mvn.w	r5, #21
    39f4:	e749      	b.n	388a <nvs_write+0x2a>
    39f6:	bf00      	nop
    39f8:	00029870 	.word	0x00029870
    39fc:	00029a68 	.word	0x00029a68
    3a00:	0002ac76 	.word	0x0002ac76
    3a04:	ffff0000 	.word	0xffff0000

00003a08 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
    3a08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    3a0c:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
    3a0e:	7c03      	ldrb	r3, [r0, #16]
{
    3a10:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
    3a14:	4604      	mov	r4, r0
    3a16:	460f      	mov	r7, r1
    3a18:	4690      	mov	r8, r2
	if (!fs->ready) {
    3a1a:	b973      	cbnz	r3, 3a3a <nvs_read_hist+0x32>
    3a1c:	4b2b      	ldr	r3, [pc, #172]	; (3acc <nvs_read_hist+0xc4>)
    3a1e:	492c      	ldr	r1, [pc, #176]	; (3ad0 <nvs_read_hist+0xc8>)
		LOG_ERR("NVS not initialized");
    3a20:	482c      	ldr	r0, [pc, #176]	; (3ad4 <nvs_read_hist+0xcc>)
    3a22:	1ac9      	subs	r1, r1, r3
    3a24:	08c9      	lsrs	r1, r1, #3
    3a26:	0189      	lsls	r1, r1, #6
    3a28:	f041 0101 	orr.w	r1, r1, #1
    3a2c:	f01e f85d 	bl	21aea <log_0>
		return -EACCES;
    3a30:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
    3a34:	b004      	add	sp, #16
    3a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    3a3a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    3a3c:	2108      	movs	r1, #8
    3a3e:	f01e fc75 	bl	2232c <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
    3a42:	89a3      	ldrh	r3, [r4, #12]
    3a44:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    3a48:	429e      	cmp	r6, r3
    3a4a:	d83c      	bhi.n	3ac6 <nvs_read_hist+0xbe>
	wlk_addr = fs->ate_wra;
    3a4c:	6863      	ldr	r3, [r4, #4]
    3a4e:	9301      	str	r3, [sp, #4]
	cnt_his = 0U;
    3a50:	f04f 0a00 	mov.w	sl, #0
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    3a54:	aa02      	add	r2, sp, #8
    3a56:	a901      	add	r1, sp, #4
    3a58:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
    3a5a:	9d01      	ldr	r5, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    3a5c:	f01e fd16 	bl	2248c <nvs_prev_ate>
		if (rc) {
    3a60:	2800      	cmp	r0, #0
    3a62:	d1e7      	bne.n	3a34 <nvs_read_hist+0x2c>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
    3a64:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    3a68:	42bb      	cmp	r3, r7
    3a6a:	d108      	bne.n	3a7e <nvs_read_hist+0x76>
    3a6c:	a902      	add	r1, sp, #8
    3a6e:	4620      	mov	r0, r4
    3a70:	f01e fc66 	bl	22340 <nvs_ate_valid>
    3a74:	b118      	cbz	r0, 3a7e <nvs_read_hist+0x76>
			cnt_his++;
    3a76:	f10a 0a01 	add.w	sl, sl, #1
    3a7a:	fa1f fa8a 	uxth.w	sl, sl
		if (wlk_addr == fs->ate_wra) {
    3a7e:	6862      	ldr	r2, [r4, #4]
    3a80:	9b01      	ldr	r3, [sp, #4]
    3a82:	429a      	cmp	r2, r3
    3a84:	d018      	beq.n	3ab8 <nvs_read_hist+0xb0>
	while (cnt_his <= cnt) {
    3a86:	45d1      	cmp	r9, sl
    3a88:	d2e4      	bcs.n	3a54 <nvs_read_hist+0x4c>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    3a8a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    3a8e:	b1bb      	cbz	r3, 3ac0 <nvs_read_hist+0xb8>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    3a90:	45d1      	cmp	r9, sl
    3a92:	d815      	bhi.n	3ac0 <nvs_read_hist+0xb8>
	rd_addr += wlk_ate.offset;
    3a94:	f8bd 100a 	ldrh.w	r1, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
    3a98:	0c2d      	lsrs	r5, r5, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    3a9a:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
    3a9c:	ea4f 4505 	mov.w	r5, r5, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    3aa0:	bf28      	it	cs
    3aa2:	4633      	movcs	r3, r6
    3aa4:	4642      	mov	r2, r8
    3aa6:	4429      	add	r1, r5
    3aa8:	4620      	mov	r0, r4
    3aaa:	f01e fb99 	bl	221e0 <nvs_flash_rd>
	if (rc) {
    3aae:	2800      	cmp	r0, #0
    3ab0:	d1c0      	bne.n	3a34 <nvs_read_hist+0x2c>
	return wlk_ate.len;
    3ab2:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    3ab6:	e7bd      	b.n	3a34 <nvs_read_hist+0x2c>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    3ab8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    3abc:	42bb      	cmp	r3, r7
    3abe:	d0e4      	beq.n	3a8a <nvs_read_hist+0x82>
		return -ENOENT;
    3ac0:	f06f 0001 	mvn.w	r0, #1
    3ac4:	e7b6      	b.n	3a34 <nvs_read_hist+0x2c>
		return -EINVAL;
    3ac6:	f06f 0015 	mvn.w	r0, #21
    3aca:	e7b3      	b.n	3a34 <nvs_read_hist+0x2c>
    3acc:	00029870 	.word	0x00029870
    3ad0:	00029a68 	.word	0x00029a68
    3ad4:	0002ac76 	.word	0x0002ac76

00003ad8 <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    3ad8:	4b08      	ldr	r3, [pc, #32]	; (3afc <get_flash_area_from_id+0x24>)
{
    3ada:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
    3adc:	681c      	ldr	r4, [r3, #0]
		if (flash_map[i].fa_id == idx) {
    3ade:	4b08      	ldr	r3, [pc, #32]	; (3b00 <get_flash_area_from_id+0x28>)
{
    3ae0:	4601      	mov	r1, r0
    3ae2:	681a      	ldr	r2, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
    3ae4:	2300      	movs	r3, #0
    3ae6:	429c      	cmp	r4, r3
    3ae8:	dc01      	bgt.n	3aee <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
    3aea:	2000      	movs	r0, #0
}
    3aec:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
    3aee:	4610      	mov	r0, r2
    3af0:	3210      	adds	r2, #16
    3af2:	7805      	ldrb	r5, [r0, #0]
    3af4:	428d      	cmp	r5, r1
    3af6:	d0f9      	beq.n	3aec <get_flash_area_from_id+0x14>
	for (int i = 0; i < flash_map_entries; i++) {
    3af8:	3301      	adds	r3, #1
    3afa:	e7f4      	b.n	3ae6 <get_flash_area_from_id+0xe>
    3afc:	00029d00 	.word	0x00029d00
    3b00:	20000744 	.word	0x20000744

00003b04 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    3b04:	4b08      	ldr	r3, [pc, #32]	; (3b28 <flash_area_open+0x24>)
    3b06:	681b      	ldr	r3, [r3, #0]
{
    3b08:	b510      	push	{r4, lr}
    3b0a:	460c      	mov	r4, r1
	if (flash_map == NULL) {
    3b0c:	b12b      	cbz	r3, 3b1a <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
    3b0e:	f7ff ffe3 	bl	3ad8 <get_flash_area_from_id>
	if (area == NULL) {
    3b12:	b128      	cbz	r0, 3b20 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
    3b14:	6020      	str	r0, [r4, #0]
	return 0;
    3b16:	2000      	movs	r0, #0
}
    3b18:	bd10      	pop	{r4, pc}
		return -EACCES;
    3b1a:	f06f 000c 	mvn.w	r0, #12
    3b1e:	e7fb      	b.n	3b18 <flash_area_open+0x14>
		return -ENOENT;
    3b20:	f06f 0001 	mvn.w	r0, #1
    3b24:	e7f8      	b.n	3b18 <flash_area_open+0x14>
    3b26:	bf00      	nop
    3b28:	20000744 	.word	0x20000744

00003b2c <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    3b2c:	b530      	push	{r4, r5, lr}
    3b2e:	b089      	sub	sp, #36	; 0x24
    3b30:	460c      	mov	r4, r1
    3b32:	4615      	mov	r5, r2
	cb_data->area_idx = idx;
    3b34:	9001      	str	r0, [sp, #4]
	fa = get_flash_area_from_id(idx);
    3b36:	f7ff ffcf 	bl	3ad8 <get_flash_area_from_id>
	if (fa == NULL) {
    3b3a:	b1b8      	cbz	r0, 3b6c <flash_area_get_sectors+0x40>
	cb_data->area_off = fa->fa_off;
    3b3c:	6843      	ldr	r3, [r0, #4]
    3b3e:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    3b40:	6883      	ldr	r3, [r0, #8]
	cb_data->ret_len = *cnt;
    3b42:	6822      	ldr	r2, [r4, #0]
	flash_dev = device_get_binding(fa->fa_dev_name);
    3b44:	68c0      	ldr	r0, [r0, #12]
	cb_data->ret = ret;
    3b46:	e9cd 3503 	strd	r3, r5, [sp, #12]
	cb_data->ret_idx = 0U;
    3b4a:	2300      	movs	r3, #0
	cb_data->status = 0;
    3b4c:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
    3b50:	9305      	str	r3, [sp, #20]
	flash_dev = device_get_binding(fa->fa_dev_name);
    3b52:	f01e fda7 	bl	226a4 <device_get_binding>
	if (flash_dev == NULL) {
    3b56:	b160      	cbz	r0, 3b72 <flash_area_get_sectors+0x46>
	flash_page_foreach(flash_dev, cb, cb_data);
    3b58:	4907      	ldr	r1, [pc, #28]	; (3b78 <flash_area_get_sectors+0x4c>)
    3b5a:	aa01      	add	r2, sp, #4
    3b5c:	f024 fd95 	bl	2868a <flash_page_foreach>
	if (cb_data->status == 0) {
    3b60:	9807      	ldr	r0, [sp, #28]
    3b62:	b908      	cbnz	r0, 3b68 <flash_area_get_sectors+0x3c>
		*cnt = cb_data->ret_idx;
    3b64:	9b05      	ldr	r3, [sp, #20]
    3b66:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    3b68:	b009      	add	sp, #36	; 0x24
    3b6a:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    3b6c:	f06f 0015 	mvn.w	r0, #21
    3b70:	e7fa      	b.n	3b68 <flash_area_get_sectors+0x3c>
		return -ENODEV;
    3b72:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    3b76:	e7f7      	b.n	3b68 <flash_area_get_sectors+0x3c>
    3b78:	000226a9 	.word	0x000226a9

00003b7c <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
    3b7c:	4b10      	ldr	r3, [pc, #64]	; (3bc0 <settings_save_one+0x44>)
{
    3b7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
    3b82:	681c      	ldr	r4, [r3, #0]
{
    3b84:	4605      	mov	r5, r0
    3b86:	460e      	mov	r6, r1
    3b88:	4617      	mov	r7, r2
	if (!cs) {
    3b8a:	b1ac      	cbz	r4, 3bb8 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
    3b8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3b90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3b94:	480b      	ldr	r0, [pc, #44]	; (3bc4 <settings_save_one+0x48>)
    3b96:	f01c f94f 	bl	1fe38 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    3b9a:	6863      	ldr	r3, [r4, #4]
    3b9c:	4632      	mov	r2, r6
    3b9e:	f8d3 8008 	ldr.w	r8, [r3, #8]
    3ba2:	4629      	mov	r1, r5
    3ba4:	463b      	mov	r3, r7
    3ba6:	4620      	mov	r0, r4
    3ba8:	47c0      	blx	r8
    3baa:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    3bac:	4805      	ldr	r0, [pc, #20]	; (3bc4 <settings_save_one+0x48>)
    3bae:	f01c f9bb 	bl	1ff28 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
    3bb2:	4620      	mov	r0, r4
    3bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    3bb8:	f06f 0401 	mvn.w	r4, #1
    3bbc:	e7f9      	b.n	3bb2 <settings_save_one+0x36>
    3bbe:	bf00      	nop
    3bc0:	20002058 	.word	0x20002058
    3bc4:	200010e4 	.word	0x200010e4

00003bc8 <settings_src_register>:
	parent->next = child;
    3bc8:	2300      	movs	r3, #0
    3bca:	6003      	str	r3, [r0, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    3bcc:	4b04      	ldr	r3, [pc, #16]	; (3be0 <settings_src_register+0x18>)
    3bce:	685a      	ldr	r2, [r3, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    3bd0:	b912      	cbnz	r2, 3bd8 <settings_src_register+0x10>
	list->head = node;
    3bd2:	e9c3 0000 	strd	r0, r0, [r3]
}
    3bd6:	4770      	bx	lr
	parent->next = child;
    3bd8:	6010      	str	r0, [r2, #0]
	list->tail = node;
    3bda:	6058      	str	r0, [r3, #4]
}
    3bdc:	4770      	bx	lr
    3bde:	bf00      	nop
    3be0:	20002050 	.word	0x20002050

00003be4 <settings_dst_register>:
	settings_save_dst = cs;
    3be4:	4b01      	ldr	r3, [pc, #4]	; (3bec <settings_dst_register+0x8>)
    3be6:	6018      	str	r0, [r3, #0]
}
    3be8:	4770      	bx	lr
    3bea:	bf00      	nop
    3bec:	20002058 	.word	0x20002058

00003bf0 <settings_load_subtree>:
{
    3bf0:	b530      	push	{r4, r5, lr}
    3bf2:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
    3bf4:	2300      	movs	r3, #0
{
    3bf6:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
    3bf8:	e9cd 3302 	strd	r3, r3, [sp, #8]
    3bfc:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    3bfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3c02:	480c      	ldr	r0, [pc, #48]	; (3c34 <settings_load_subtree+0x44>)
    3c04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3c08:	f01c f916 	bl	1fe38 <z_impl_k_mutex_lock>
	return list->head;
    3c0c:	4b0a      	ldr	r3, [pc, #40]	; (3c38 <settings_load_subtree+0x48>)
    3c0e:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    3c10:	b134      	cbz	r4, 3c20 <settings_load_subtree+0x30>
		cs->cs_itf->csi_load(cs, &arg);
    3c12:	6863      	ldr	r3, [r4, #4]
    3c14:	4620      	mov	r0, r4
    3c16:	681b      	ldr	r3, [r3, #0]
    3c18:	a901      	add	r1, sp, #4
    3c1a:	4798      	blx	r3
	return node->next;
    3c1c:	6824      	ldr	r4, [r4, #0]
    3c1e:	e7f7      	b.n	3c10 <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
    3c20:	4628      	mov	r0, r5
    3c22:	f000 f8d3 	bl	3dcc <settings_commit_subtree>
    3c26:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    3c28:	4802      	ldr	r0, [pc, #8]	; (3c34 <settings_load_subtree+0x44>)
    3c2a:	f01c f97d 	bl	1ff28 <z_impl_k_mutex_unlock>
}
    3c2e:	4620      	mov	r0, r4
    3c30:	b005      	add	sp, #20
    3c32:	bd30      	pop	{r4, r5, pc}
    3c34:	200010e4 	.word	0x200010e4
    3c38:	20002050 	.word	0x20002050

00003c3c <settings_load_subtree_direct>:
{
    3c3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
    3c3e:	e9cd 0101 	strd	r0, r1, [sp, #4]
    3c42:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
    3c44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3c48:	480a      	ldr	r0, [pc, #40]	; (3c74 <settings_load_subtree_direct+0x38>)
    3c4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3c4e:	f01c f8f3 	bl	1fe38 <z_impl_k_mutex_lock>
	return list->head;
    3c52:	4b09      	ldr	r3, [pc, #36]	; (3c78 <settings_load_subtree_direct+0x3c>)
    3c54:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    3c56:	b134      	cbz	r4, 3c66 <settings_load_subtree_direct+0x2a>
		cs->cs_itf->csi_load(cs, &arg);
    3c58:	6863      	ldr	r3, [r4, #4]
    3c5a:	4620      	mov	r0, r4
    3c5c:	681b      	ldr	r3, [r3, #0]
    3c5e:	a901      	add	r1, sp, #4
    3c60:	4798      	blx	r3
	return node->next;
    3c62:	6824      	ldr	r4, [r4, #0]
    3c64:	e7f7      	b.n	3c56 <settings_load_subtree_direct+0x1a>
	return z_impl_k_mutex_unlock(mutex);
    3c66:	4803      	ldr	r0, [pc, #12]	; (3c74 <settings_load_subtree_direct+0x38>)
    3c68:	f01c f95e 	bl	1ff28 <z_impl_k_mutex_unlock>
}
    3c6c:	2000      	movs	r0, #0
    3c6e:	b004      	add	sp, #16
    3c70:	bd10      	pop	{r4, pc}
    3c72:	bf00      	nop
    3c74:	200010e4 	.word	0x200010e4
    3c78:	20002050 	.word	0x20002050

00003c7c <settings_store_init>:
	list->head = NULL;
    3c7c:	4b02      	ldr	r3, [pc, #8]	; (3c88 <settings_store_init+0xc>)
    3c7e:	2200      	movs	r2, #0
	list->tail = NULL;
    3c80:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
    3c84:	4770      	bx	lr
    3c86:	bf00      	nop
    3c88:	20002050 	.word	0x20002050

00003c8c <settings_init>:
	list->head = NULL;
    3c8c:	4b02      	ldr	r3, [pc, #8]	; (3c98 <settings_init+0xc>)
    3c8e:	2200      	movs	r2, #0
	list->tail = NULL;
    3c90:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
    3c94:	f7ff bff2 	b.w	3c7c <settings_store_init>
    3c98:	2000205c 	.word	0x2000205c

00003c9c <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
    3c9c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3ca0:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
    3ca2:	460e      	mov	r6, r1
    3ca4:	b109      	cbz	r1, 3caa <settings_parse_and_lookup+0xe>
		*next = NULL;
    3ca6:	2300      	movs	r3, #0
    3ca8:	600b      	str	r3, [r1, #0]
    3caa:	4c1e      	ldr	r4, [pc, #120]	; (3d24 <settings_parse_and_lookup+0x88>)
	}

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    3cac:	f8df 8078 	ldr.w	r8, [pc, #120]	; 3d28 <settings_parse_and_lookup+0x8c>
    3cb0:	2500      	movs	r5, #0
    3cb2:	4544      	cmp	r4, r8
    3cb4:	d308      	bcc.n	3cc8 <settings_parse_and_lookup+0x2c>
	return list->head;
    3cb6:	4b1d      	ldr	r3, [pc, #116]	; (3d2c <settings_parse_and_lookup+0x90>)
    3cb8:	681c      	ldr	r4, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    3cba:	b10c      	cbz	r4, 3cc0 <settings_parse_and_lookup+0x24>
    3cbc:	3c14      	subs	r4, #20
    3cbe:	b9c4      	cbnz	r4, 3cf2 <settings_parse_and_lookup+0x56>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
    3cc0:	4628      	mov	r0, r5
    3cc2:	b002      	add	sp, #8
    3cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    3cc8:	6821      	ldr	r1, [r4, #0]
    3cca:	aa01      	add	r2, sp, #4
    3ccc:	4638      	mov	r0, r7
    3cce:	f01e fd10 	bl	226f2 <settings_name_steq>
    3cd2:	b160      	cbz	r0, 3cee <settings_parse_and_lookup+0x52>
		if (!bestmatch) {
    3cd4:	b925      	cbnz	r5, 3ce0 <settings_parse_and_lookup+0x44>
			if (next) {
    3cd6:	b10e      	cbz	r6, 3cdc <settings_parse_and_lookup+0x40>
				*next = tmpnext;
    3cd8:	9b01      	ldr	r3, [sp, #4]
    3cda:	6033      	str	r3, [r6, #0]
    3cdc:	4625      	mov	r5, r4
    3cde:	e006      	b.n	3cee <settings_parse_and_lookup+0x52>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    3ce0:	6829      	ldr	r1, [r5, #0]
    3ce2:	6820      	ldr	r0, [r4, #0]
    3ce4:	2200      	movs	r2, #0
    3ce6:	f01e fd04 	bl	226f2 <settings_name_steq>
    3cea:	2800      	cmp	r0, #0
    3cec:	d1f3      	bne.n	3cd6 <settings_parse_and_lookup+0x3a>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    3cee:	3414      	adds	r4, #20
    3cf0:	e7df      	b.n	3cb2 <settings_parse_and_lookup+0x16>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    3cf2:	6821      	ldr	r1, [r4, #0]
    3cf4:	aa01      	add	r2, sp, #4
    3cf6:	4638      	mov	r0, r7
    3cf8:	f01e fcfb 	bl	226f2 <settings_name_steq>
    3cfc:	b160      	cbz	r0, 3d18 <settings_parse_and_lookup+0x7c>
		if (!bestmatch) {
    3cfe:	b925      	cbnz	r5, 3d0a <settings_parse_and_lookup+0x6e>
			if (next) {
    3d00:	b10e      	cbz	r6, 3d06 <settings_parse_and_lookup+0x6a>
				*next = tmpnext;
    3d02:	9b01      	ldr	r3, [sp, #4]
    3d04:	6033      	str	r3, [r6, #0]
    3d06:	4625      	mov	r5, r4
    3d08:	e006      	b.n	3d18 <settings_parse_and_lookup+0x7c>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    3d0a:	6829      	ldr	r1, [r5, #0]
    3d0c:	6820      	ldr	r0, [r4, #0]
    3d0e:	2200      	movs	r2, #0
    3d10:	f01e fcef 	bl	226f2 <settings_name_steq>
    3d14:	2800      	cmp	r0, #0
    3d16:	d1f3      	bne.n	3d00 <settings_parse_and_lookup+0x64>
Z_GENLIST_PEEK_NEXT(slist, snode)
    3d18:	f114 0f14 	cmn.w	r4, #20
    3d1c:	d0d0      	beq.n	3cc0 <settings_parse_and_lookup+0x24>
	return node->next;
    3d1e:	6964      	ldr	r4, [r4, #20]
    3d20:	e7cb      	b.n	3cba <settings_parse_and_lookup+0x1e>
    3d22:	bf00      	nop
    3d24:	0002971c 	.word	0x0002971c
    3d28:	00029870 	.word	0x00029870
    3d2c:	2000205c 	.word	0x2000205c

00003d30 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
    3d30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3d34:	b085      	sub	sp, #20
    3d36:	4605      	mov	r5, r0
    3d38:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	int rc;
	const char *name_key = name;
    3d3c:	9003      	str	r0, [sp, #12]
{
    3d3e:	460c      	mov	r4, r1
    3d40:	4616      	mov	r6, r2
    3d42:	461f      	mov	r7, r3

	if (load_arg && load_arg->subtree &&
    3d44:	f1b8 0f00 	cmp.w	r8, #0
    3d48:	d018      	beq.n	3d7c <settings_call_set_handler+0x4c>
    3d4a:	f8d8 1000 	ldr.w	r1, [r8]
    3d4e:	b181      	cbz	r1, 3d72 <settings_call_set_handler+0x42>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
    3d50:	aa03      	add	r2, sp, #12
    3d52:	f01e fcce 	bl	226f2 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
    3d56:	b960      	cbnz	r0, 3d72 <settings_call_set_handler+0x42>

		if (rc != 0) {
			LOG_ERR("set-value failure. key: %s error(%d)",
				log_strdup(name), rc);
			/* Ignoring the error */
			rc = 0;
    3d58:	2000      	movs	r0, #0
    3d5a:	e007      	b.n	3d6c <settings_call_set_handler+0x3c>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
    3d5c:	f8d8 3008 	ldr.w	r3, [r8, #8]
    3d60:	9300      	str	r3, [sp, #0]
    3d62:	9803      	ldr	r0, [sp, #12]
    3d64:	463b      	mov	r3, r7
    3d66:	4632      	mov	r2, r6
    3d68:	4621      	mov	r1, r4
    3d6a:	47c8      	blx	r9
			LOG_DBG("set-value OK. key: %s",
				log_strdup(name));
		}
	}
	return rc;
}
    3d6c:	b005      	add	sp, #20
    3d6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (load_arg && load_arg->cb) {
    3d72:	f8d8 9004 	ldr.w	r9, [r8, #4]
    3d76:	f1b9 0f00 	cmp.w	r9, #0
    3d7a:	d1ef      	bne.n	3d5c <settings_call_set_handler+0x2c>
		ch = settings_parse_and_lookup(name, &name_key);
    3d7c:	a903      	add	r1, sp, #12
    3d7e:	4628      	mov	r0, r5
    3d80:	f7ff ff8c 	bl	3c9c <settings_parse_and_lookup>
		if (!ch) {
    3d84:	2800      	cmp	r0, #0
    3d86:	d0e7      	beq.n	3d58 <settings_call_set_handler+0x28>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
    3d88:	f8d0 8008 	ldr.w	r8, [r0, #8]
    3d8c:	9803      	ldr	r0, [sp, #12]
    3d8e:	4632      	mov	r2, r6
    3d90:	463b      	mov	r3, r7
    3d92:	4621      	mov	r1, r4
    3d94:	47c0      	blx	r8
		if (rc != 0) {
    3d96:	4606      	mov	r6, r0
    3d98:	2800      	cmp	r0, #0
    3d9a:	d0dd      	beq.n	3d58 <settings_call_set_handler+0x28>
    3d9c:	4b08      	ldr	r3, [pc, #32]	; (3dc0 <settings_call_set_handler+0x90>)
    3d9e:	4c09      	ldr	r4, [pc, #36]	; (3dc4 <settings_call_set_handler+0x94>)
{
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
    3da0:	4628      	mov	r0, r5
    3da2:	1ae4      	subs	r4, r4, r3
    3da4:	08e4      	lsrs	r4, r4, #3
    3da6:	f7fe fe97 	bl	2ad8 <z_log_strdup>
			LOG_ERR("set-value failure. key: %s error(%d)",
    3daa:	01a4      	lsls	r4, r4, #6
    3dac:	f044 0401 	orr.w	r4, r4, #1
    3db0:	4601      	mov	r1, r0
    3db2:	4623      	mov	r3, r4
    3db4:	4804      	ldr	r0, [pc, #16]	; (3dc8 <settings_call_set_handler+0x98>)
    3db6:	4632      	mov	r2, r6
    3db8:	f01d feb8 	bl	21b2c <log_2>
    3dbc:	e7cc      	b.n	3d58 <settings_call_set_handler+0x28>
    3dbe:	bf00      	nop
    3dc0:	00029870 	.word	0x00029870
    3dc4:	00029a98 	.word	0x00029a98
    3dc8:	0002adc4 	.word	0x0002adc4

00003dcc <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
    3dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc;
	int rc2;

	rc = 0;

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    3dce:	4c1a      	ldr	r4, [pc, #104]	; (3e38 <settings_commit_subtree+0x6c>)
    3dd0:	4f1a      	ldr	r7, [pc, #104]	; (3e3c <settings_commit_subtree+0x70>)
{
    3dd2:	4606      	mov	r6, r0
	rc = 0;
    3dd4:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    3dd6:	42bc      	cmp	r4, r7
    3dd8:	d306      	bcc.n	3de8 <settings_commit_subtree+0x1c>
	return list->head;
    3dda:	4b19      	ldr	r3, [pc, #100]	; (3e40 <settings_commit_subtree+0x74>)
    3ddc:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    3dde:	b10c      	cbz	r4, 3de4 <settings_commit_subtree+0x18>
    3de0:	3c14      	subs	r4, #20
    3de2:	b99c      	cbnz	r4, 3e0c <settings_commit_subtree+0x40>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
    3de4:	4628      	mov	r0, r5
    3de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    3de8:	b91e      	cbnz	r6, 3df2 <settings_commit_subtree+0x26>
		if (ch->h_commit) {
    3dea:	68e3      	ldr	r3, [r4, #12]
    3dec:	b94b      	cbnz	r3, 3e02 <settings_commit_subtree+0x36>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    3dee:	3414      	adds	r4, #20
    3df0:	e7f1      	b.n	3dd6 <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    3df2:	6820      	ldr	r0, [r4, #0]
    3df4:	2200      	movs	r2, #0
    3df6:	4631      	mov	r1, r6
    3df8:	f01e fc7b 	bl	226f2 <settings_name_steq>
    3dfc:	2800      	cmp	r0, #0
    3dfe:	d1f4      	bne.n	3dea <settings_commit_subtree+0x1e>
    3e00:	e7f5      	b.n	3dee <settings_commit_subtree+0x22>
			rc2 = ch->h_commit();
    3e02:	4798      	blx	r3
				rc = rc2;
    3e04:	2d00      	cmp	r5, #0
    3e06:	bf08      	it	eq
    3e08:	4605      	moveq	r5, r0
    3e0a:	e7f0      	b.n	3dee <settings_commit_subtree+0x22>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    3e0c:	b936      	cbnz	r6, 3e1c <settings_commit_subtree+0x50>
		if (ch->h_commit) {
    3e0e:	68e3      	ldr	r3, [r4, #12]
    3e10:	b963      	cbnz	r3, 3e2c <settings_commit_subtree+0x60>
Z_GENLIST_PEEK_NEXT(slist, snode)
    3e12:	f114 0f14 	cmn.w	r4, #20
    3e16:	d0e5      	beq.n	3de4 <settings_commit_subtree+0x18>
	return node->next;
    3e18:	6964      	ldr	r4, [r4, #20]
    3e1a:	e7e0      	b.n	3dde <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    3e1c:	6820      	ldr	r0, [r4, #0]
    3e1e:	2200      	movs	r2, #0
    3e20:	4631      	mov	r1, r6
    3e22:	f01e fc66 	bl	226f2 <settings_name_steq>
    3e26:	2800      	cmp	r0, #0
    3e28:	d1f1      	bne.n	3e0e <settings_commit_subtree+0x42>
    3e2a:	e7f2      	b.n	3e12 <settings_commit_subtree+0x46>
			rc2 = ch->h_commit();
    3e2c:	4798      	blx	r3
				rc = rc2;
    3e2e:	2d00      	cmp	r5, #0
    3e30:	bf08      	it	eq
    3e32:	4605      	moveq	r5, r0
    3e34:	e7ed      	b.n	3e12 <settings_commit_subtree+0x46>
    3e36:	bf00      	nop
    3e38:	0002971c 	.word	0x0002971c
    3e3c:	00029870 	.word	0x00029870
    3e40:	2000205c 	.word	0x2000205c

00003e44 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
    3e44:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
    3e46:	4c06      	ldr	r4, [pc, #24]	; (3e60 <settings_subsys_init+0x1c>)
    3e48:	7823      	ldrb	r3, [r4, #0]
    3e4a:	b93b      	cbnz	r3, 3e5c <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
    3e4c:	f7ff ff1e 	bl	3c8c <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
    3e50:	f000 f866 	bl	3f20 <settings_backend_init>

	if (!err) {
    3e54:	b908      	cbnz	r0, 3e5a <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
    3e56:	2301      	movs	r3, #1
    3e58:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
    3e5a:	bd10      	pop	{r4, pc}
		return 0;
    3e5c:	2000      	movs	r0, #0
    3e5e:	e7fc      	b.n	3e5a <settings_subsys_init+0x16>
    3e60:	20003740 	.word	0x20003740

00003e64 <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
    3e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
    3e68:	8f04      	ldrh	r4, [r0, #56]	; 0x38
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
    3e6a:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 3f1c <settings_nvs_load+0xb8>
	name_id = cf->last_name_id + 1;
    3e6e:	3401      	adds	r4, #1
{
    3e70:	b098      	sub	sp, #96	; 0x60
    3e72:	4680      	mov	r8, r0
    3e74:	4689      	mov	r9, r1
	name_id = cf->last_name_id + 1;
    3e76:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    3e78:	f100 0608 	add.w	r6, r0, #8
		name_id--;
    3e7c:	1e65      	subs	r5, r4, #1
    3e7e:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
    3e80:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    3e84:	d047      	beq.n	3f16 <settings_nvs_load+0xb2>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    3e86:	234a      	movs	r3, #74	; 0x4a
    3e88:	aa05      	add	r2, sp, #20
    3e8a:	4629      	mov	r1, r5
    3e8c:	4630      	mov	r0, r6
    3e8e:	f01e fc02 	bl	22696 <nvs_read>
    3e92:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
    3e96:	343f      	adds	r4, #63	; 0x3f
    3e98:	b2a4      	uxth	r4, r4
    3e9a:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    3e9c:	4621      	mov	r1, r4
    3e9e:	2301      	movs	r3, #1
    3ea0:	f10d 020b 	add.w	r2, sp, #11
    3ea4:	4630      	mov	r0, r6
    3ea6:	f01e fbf6 	bl	22696 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
    3eaa:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    3eac:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
    3eae:	dc03      	bgt.n	3eb8 <settings_nvs_load+0x54>
    3eb0:	2800      	cmp	r0, #0
    3eb2:	dc03      	bgt.n	3ebc <settings_nvs_load+0x58>
{
    3eb4:	462c      	mov	r4, r5
    3eb6:	e7e1      	b.n	3e7c <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
    3eb8:	2800      	cmp	r0, #0
    3eba:	dc16      	bgt.n	3eea <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
    3ebc:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
    3ec0:	42ab      	cmp	r3, r5
    3ec2:	d109      	bne.n	3ed8 <settings_nvs_load+0x74>
				cf->last_name_id--;
    3ec4:	4642      	mov	r2, r8
    3ec6:	1e6b      	subs	r3, r5, #1
    3ec8:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
    3ecc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    3ed0:	2302      	movs	r3, #2
    3ed2:	4630      	mov	r0, r6
    3ed4:	f7ff fcc4 	bl	3860 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
    3ed8:	4629      	mov	r1, r5
    3eda:	4630      	mov	r0, r6
    3edc:	f01e fbd7 	bl	2268e <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
    3ee0:	4621      	mov	r1, r4
    3ee2:	4630      	mov	r0, r6
    3ee4:	f01e fbd3 	bl	2268e <nvs_delete>
			continue;
    3ee8:	e7e4      	b.n	3eb4 <settings_nvs_load+0x50>
		name[rc1] = '\0';
    3eea:	f107 0360 	add.w	r3, r7, #96	; 0x60
    3eee:	eb0d 0703 	add.w	r7, sp, r3
    3ef2:	2300      	movs	r3, #0
    3ef4:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
    3ef8:	4652      	mov	r2, sl
    3efa:	f8cd 9000 	str.w	r9, [sp]
    3efe:	ab03      	add	r3, sp, #12
    3f00:	a805      	add	r0, sp, #20
		read_fn_arg.fs = &cf->cf_nvs;
    3f02:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
    3f04:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
    3f08:	f7ff ff12 	bl	3d30 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
    3f0c:	2800      	cmp	r0, #0
    3f0e:	d0d1      	beq.n	3eb4 <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
    3f10:	b018      	add	sp, #96	; 0x60
    3f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3f16:	2000      	movs	r0, #0
	return ret;
    3f18:	e7fa      	b.n	3f10 <settings_nvs_load+0xac>
    3f1a:	bf00      	nop
    3f1c:	00022765 	.word	0x00022765

00003f20 <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
    3f20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
    3f22:	2301      	movs	r3, #1

	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
    3f24:	4669      	mov	r1, sp
    3f26:	2004      	movs	r0, #4
	uint32_t sector_cnt = 1;
    3f28:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
    3f2a:	f7ff fdeb 	bl	3b04 <flash_area_open>
	if (rc) {
    3f2e:	4604      	mov	r4, r0
    3f30:	2800      	cmp	r0, #0
    3f32:	d136      	bne.n	3fa2 <settings_backend_init+0x82>
		return rc;
	}

	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
    3f34:	aa02      	add	r2, sp, #8
    3f36:	a901      	add	r1, sp, #4
    3f38:	2004      	movs	r0, #4
    3f3a:	f7ff fdf7 	bl	3b2c <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
    3f3e:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
    3f42:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
    3f44:	d02d      	beq.n	3fa2 <settings_backend_init+0x82>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
    3f46:	b138      	cbz	r0, 3f58 <settings_backend_init+0x38>
    3f48:	340c      	adds	r4, #12
    3f4a:	d005      	beq.n	3f58 <settings_backend_init+0x38>
		k_panic();
    3f4c:	4040      	eors	r0, r0
    3f4e:	f380 8811 	msr	BASEPRI, r0
    3f52:	f04f 0004 	mov.w	r0, #4
    3f56:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
    3f58:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
    3f5a:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
    3f5e:	d223      	bcs.n	3fa8 <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
    3f60:	9a00      	ldr	r2, [sp, #0]
    3f62:	2300      	movs	r3, #0
    3f64:	6895      	ldr	r5, [r2, #8]
	size_t nvs_sector_size, nvs_size = 0;
    3f66:	4618      	mov	r0, r3
		nvs_size += nvs_sector_size;
    3f68:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
    3f6a:	4285      	cmp	r5, r0
    3f6c:	b29c      	uxth	r4, r3
    3f6e:	d303      	bcc.n	3f78 <settings_backend_init+0x58>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
    3f70:	3301      	adds	r3, #1
    3f72:	2b08      	cmp	r3, #8
    3f74:	d1f8      	bne.n	3f68 <settings_backend_init+0x48>
    3f76:	461c      	mov	r4, r3
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
    3f78:	4d0d      	ldr	r5, [pc, #52]	; (3fb0 <settings_backend_init+0x90>)
	default_settings_nvs.cf_nvs.sector_count = cnt;
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
    3f7a:	6853      	ldr	r3, [r2, #4]
    3f7c:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;

	rc = settings_nvs_backend_init(&default_settings_nvs);
    3f7e:	4628      	mov	r0, r5
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
    3f80:	68d3      	ldr	r3, [r2, #12]
	default_settings_nvs.cf_nvs.sector_count = cnt;
    3f82:	82ec      	strh	r4, [r5, #22]
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
    3f84:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
    3f86:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
    3f88:	f01e fc85 	bl	22896 <settings_nvs_backend_init>
	if (rc) {
    3f8c:	4604      	mov	r4, r0
    3f8e:	b940      	cbnz	r0, 3fa2 <settings_backend_init+0x82>
	cf->cf_store.cs_itf = &settings_nvs_itf;
    3f90:	4e08      	ldr	r6, [pc, #32]	; (3fb4 <settings_backend_init+0x94>)
    3f92:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
    3f94:	4628      	mov	r0, r5
    3f96:	f7ff fe17 	bl	3bc8 <settings_src_register>
	settings_dst_register(&cf->cf_store);
    3f9a:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
    3f9c:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
    3f9e:	f7ff fe21 	bl	3be4 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
    3fa2:	4620      	mov	r0, r4
    3fa4:	b004      	add	sp, #16
    3fa6:	bd70      	pop	{r4, r5, r6, pc}
		return -EDOM;
    3fa8:	f06f 0420 	mvn.w	r4, #32
    3fac:	e7f9      	b.n	3fa2 <settings_backend_init+0x82>
    3fae:	bf00      	nop
    3fb0:	20002064 	.word	0x20002064
    3fb4:	20000748 	.word	0x20000748

00003fb8 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    3fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3fba:	4605      	mov	r5, r0
	__asm__ volatile(
    3fbc:	f04f 0320 	mov.w	r3, #32
    3fc0:	f3ef 8611 	mrs	r6, BASEPRI
    3fc4:	f383 8812 	msr	BASEPRI_MAX, r3
    3fc8:	f3bf 8f6f 	isb	sy
	return list->head;
    3fcc:	4b09      	ldr	r3, [pc, #36]	; (3ff4 <pm_state_notify+0x3c>)
    3fce:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3fd0:	b15c      	cbz	r4, 3fea <pm_state_notify+0x32>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
    3fd2:	4f09      	ldr	r7, [pc, #36]	; (3ff8 <pm_state_notify+0x40>)
			callback = notifier->state_exit;
    3fd4:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    3fd8:	2d00      	cmp	r5, #0
    3fda:	bf08      	it	eq
    3fdc:	4613      	moveq	r3, r2
		if (callback) {
    3fde:	b10b      	cbz	r3, 3fe4 <pm_state_notify+0x2c>
			callback(z_power_state.state);
    3fe0:	7838      	ldrb	r0, [r7, #0]
    3fe2:	4798      	blx	r3
	return node->next;
    3fe4:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3fe6:	2c00      	cmp	r4, #0
    3fe8:	d1f4      	bne.n	3fd4 <pm_state_notify+0x1c>
	__asm__ volatile(
    3fea:	f386 8811 	msr	BASEPRI, r6
    3fee:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    3ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ff4:	200020a4 	.word	0x200020a4
    3ff8:	200020ac 	.word	0x200020ac

00003ffc <pm_system_resume>:

void pm_system_resume(void)
{
    3ffc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    3ffe:	4b0f      	ldr	r3, [pc, #60]	; (403c <pm_system_resume+0x40>)
    4000:	681a      	ldr	r2, [r3, #0]
    4002:	b9ba      	cbnz	r2, 4034 <pm_system_resume+0x38>
		post_ops_done = 1;
    4004:	2201      	movs	r2, #1
    4006:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
    4008:	4a0d      	ldr	r2, [pc, #52]	; (4040 <pm_system_resume+0x44>)
    400a:	ca07      	ldmia	r2, {r0, r1, r2}
    400c:	ab01      	add	r3, sp, #4
    400e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    4012:	4a0c      	ldr	r2, [pc, #48]	; (4044 <pm_system_resume+0x48>)
    4014:	b14a      	cbz	r2, 402a <pm_system_resume+0x2e>
		pm_power_state_exit_post_ops(info);
    4016:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    401a:	f01f feef 	bl	23dfc <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    401e:	2000      	movs	r0, #0
	}
}
    4020:	b005      	add	sp, #20
    4022:	f85d eb04 	ldr.w	lr, [sp], #4
		pm_state_notify(false);
    4026:	f7ff bfc7 	b.w	3fb8 <pm_state_notify>
    402a:	f382 8811 	msr	BASEPRI, r2
    402e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    4032:	e7f4      	b.n	401e <pm_system_resume+0x22>
}
    4034:	b005      	add	sp, #20
    4036:	f85d fb04 	ldr.w	pc, [sp], #4
    403a:	bf00      	nop
    403c:	20000758 	.word	0x20000758
    4040:	200020ac 	.word	0x200020ac
    4044:	00023dfd 	.word	0x00023dfd

00004048 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
    4048:	b5f0      	push	{r4, r5, r6, r7, lr}
    404a:	b089      	sub	sp, #36	; 0x24
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
    404c:	466e      	mov	r6, sp
    404e:	4601      	mov	r1, r0
{
    4050:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
    4052:	4630      	mov	r0, r6
    4054:	f01e fc3b 	bl	228ce <pm_policy_next_state>
    4058:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    405c:	4c17      	ldr	r4, [pc, #92]	; (40bc <pm_system_suspend+0x74>)
    405e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    4062:	7820      	ldrb	r0, [r4, #0]
    4064:	4627      	mov	r7, r4
    4066:	b338      	cbz	r0, 40b8 <pm_system_suspend+0x70>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
    4068:	4b15      	ldr	r3, [pc, #84]	; (40c0 <pm_system_suspend+0x78>)
    406a:	2100      	movs	r1, #0
    406c:	6019      	str	r1, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
    406e:	1c6b      	adds	r3, r5, #1
    4070:	d00d      	beq.n	408e <pm_system_suspend+0x46>
			return (uint32_t)((t * to_hz + off) / from_hz);
    4072:	4814      	ldr	r0, [pc, #80]	; (40c4 <pm_system_suspend+0x7c>)
    4074:	4616      	mov	r6, r2
    4076:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    407a:	4a13      	ldr	r2, [pc, #76]	; (40c8 <pm_system_suspend+0x80>)
    407c:	2300      	movs	r3, #0
    407e:	fbe6 010c 	umlal	r0, r1, r6, ip
    4082:	f7fc f87d 	bl	180 <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    4086:	2101      	movs	r1, #1
    4088:	1a28      	subs	r0, r5, r0
    408a:	f025 f835 	bl	290f8 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    408e:	f01c fa27 	bl	204e0 <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
    4092:	2001      	movs	r0, #1
    4094:	f7ff ff90 	bl	3fb8 <pm_state_notify>
	pm_state_set(z_power_state);
    4098:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
    409c:	ab05      	add	r3, sp, #20
    409e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    40a2:	4a0a      	ldr	r2, [pc, #40]	; (40cc <pm_system_suspend+0x84>)
    40a4:	b11a      	cbz	r2, 40ae <pm_system_suspend+0x66>
		pm_power_state_set(info);
    40a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    40aa:	f01f fe94 	bl	23dd6 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
    40ae:	f7ff ffa5 	bl	3ffc <pm_system_resume>
	k_sched_unlock();
    40b2:	f01c fbe3 	bl	2087c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
    40b6:	7820      	ldrb	r0, [r4, #0]
}
    40b8:	b009      	add	sp, #36	; 0x24
    40ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    40bc:	200020ac 	.word	0x200020ac
    40c0:	20000758 	.word	0x20000758
    40c4:	000f423f 	.word	0x000f423f
    40c8:	000f4240 	.word	0x000f4240
    40cc:	00023dd7 	.word	0x00023dd7

000040d0 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
    40d0:	4b01      	ldr	r3, [pc, #4]	; (40d8 <uECC_get_rng+0x8>)
    40d2:	6818      	ldr	r0, [r3, #0]
    40d4:	4770      	bx	lr
    40d6:	bf00      	nop
    40d8:	2000075c 	.word	0x2000075c

000040dc <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
    40dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    40de:	2208      	movs	r2, #8
{
    40e0:	b089      	sub	sp, #36	; 0x24
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    40e2:	f01e fdb0 	bl	22c46 <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
    40e6:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    40e8:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
    40ea:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    40ec:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
    40ee:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    40f0:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
    40f2:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    40f4:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    40f6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    40f8:	9307      	str	r3, [sp, #28]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    40fa:	4613      	mov	r3, r2
    40fc:	466a      	mov	r2, sp
{
    40fe:	460c      	mov	r4, r1
    4100:	4606      	mov	r6, r0
	tmp[0] = tmp[1] = tmp[2] = 0;
    4102:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    4104:	4611      	mov	r1, r2
    4106:	4610      	mov	r0, r2
	tmp[0] = tmp[1] = tmp[2] = 0;
    4108:	e9cd 7701 	strd	r7, r7, [sp, #4]
    410c:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    410e:	f01e fca7 	bl	22a60 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    4112:	4631      	mov	r1, r6
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    4114:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    4116:	4630      	mov	r0, r6
    4118:	f01e fca2 	bl	22a60 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
    411c:	6b21      	ldr	r1, [r4, #48]	; 0x30
    411e:	9103      	str	r1, [sp, #12]
	tmp[4] = product[13];
    4120:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4122:	9104      	str	r1, [sp, #16]
	tmp[5] = product[14];
    4124:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    4126:	9105      	str	r1, [sp, #20]
	tmp[6] = product[15];
    4128:	6be1      	ldr	r1, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    412a:	4405      	add	r5, r0
	tmp[7] = 0;
    412c:	e9cd 1706 	strd	r1, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    4130:	4610      	mov	r0, r2
    4132:	4611      	mov	r1, r2
    4134:	f01e fc94 	bl	22a60 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    4138:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    413a:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    413c:	4630      	mov	r0, r6
    413e:	f01e fc8f 	bl	22a60 <uECC_vli_add>
    4142:	4405      	add	r5, r0

	/* s3 */
	tmp[0] = product[8];
    4144:	6a20      	ldr	r0, [r4, #32]
    4146:	9000      	str	r0, [sp, #0]
	tmp[1] = product[9];
    4148:	6a60      	ldr	r0, [r4, #36]	; 0x24
    414a:	9001      	str	r0, [sp, #4]
	tmp[2] = product[10];
    414c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    414e:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
    4150:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    4152:	9006      	str	r0, [sp, #24]
	tmp[7] = product[15];
    4154:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    4156:	9007      	str	r0, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    4158:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    415a:	e9cd 7704 	strd	r7, r7, [sp, #16]
    415e:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    4160:	f01e fc7e 	bl	22a60 <uECC_vli_add>
    4164:	4405      	add	r5, r0

	/* s4 */
	tmp[0] = product[9];
    4166:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4168:	9000      	str	r0, [sp, #0]
	tmp[1] = product[10];
    416a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
    416c:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
	tmp[1] = product[10];
    4170:	9001      	str	r0, [sp, #4]
	tmp[2] = product[11];
    4172:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    4174:	9002      	str	r0, [sp, #8]
	tmp[4] = product[14];
    4176:	f8cd c010 	str.w	ip, [sp, #16]
	tmp[3] = product[13];
    417a:	6b60      	ldr	r0, [r4, #52]	; 0x34
	tmp[5] = product[15];
    417c:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
	tmp[3] = product[13];
    4180:	9003      	str	r0, [sp, #12]
	tmp[6] = product[13];
    4182:	e9cd c005 	strd	ip, r0, [sp, #20]
	tmp[7] = product[8];
    4186:	6a20      	ldr	r0, [r4, #32]
    4188:	9007      	str	r0, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    418a:	4630      	mov	r0, r6
    418c:	f01e fc68 	bl	22a60 <uECC_vli_add>
    4190:	4405      	add	r5, r0

	/* d1 */
	tmp[0] = product[11];
    4192:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    4194:	9000      	str	r0, [sp, #0]
	tmp[1] = product[12];
    4196:	6b20      	ldr	r0, [r4, #48]	; 0x30
    4198:	9001      	str	r0, [sp, #4]
	tmp[2] = product[13];
    419a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    419c:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
    419e:	6a20      	ldr	r0, [r4, #32]
    41a0:	9006      	str	r0, [sp, #24]
	tmp[7] = product[10];
    41a2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    41a4:	9007      	str	r0, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    41a6:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    41a8:	e9cd 7704 	strd	r7, r7, [sp, #16]
    41ac:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    41ae:	f01e fd80 	bl	22cb2 <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
    41b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    41b4:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
    41b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    41b8:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
    41ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    41bc:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
    41be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    41c0:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
    41c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    41c4:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
    41c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    41c8:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    41ca:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    41cc:	2308      	movs	r3, #8
    41ce:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
    41d0:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    41d4:	f01e fd6d 	bl	22cb2 <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
    41d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    41da:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
    41dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    41de:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
    41e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    41e2:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
    41e4:	6a23      	ldr	r3, [r4, #32]
    41e6:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
    41e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    41ea:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
    41ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
    41ee:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
    41f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    41f4:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    41f6:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    41f8:	2308      	movs	r3, #8
    41fa:	4630      	mov	r0, r6
    41fc:	f01e fd59 	bl	22cb2 <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
    4200:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4202:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
    4204:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
    4206:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
    420a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    420c:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
    420e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4210:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
    4212:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
    4214:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
    4218:	6b63      	ldr	r3, [r4, #52]	; 0x34
    421a:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    421c:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    421e:	2308      	movs	r3, #8
    4220:	4630      	mov	r0, r6
    4222:	f01e fd46 	bl	22cb2 <uECC_vli_sub>

	if (carry < 0) {
    4226:	1a2d      	subs	r5, r5, r0
    4228:	d410      	bmi.n	424c <vli_mmod_fast_secp256r1+0x170>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    422a:	4c0d      	ldr	r4, [pc, #52]	; (4260 <vli_mmod_fast_secp256r1+0x184>)
		while (carry || 
    422c:	b935      	cbnz	r5, 423c <vli_mmod_fast_secp256r1+0x160>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    422e:	2208      	movs	r2, #8
    4230:	4631      	mov	r1, r6
    4232:	4620      	mov	r0, r4
    4234:	f01e fd13 	bl	22c5e <uECC_vli_cmp_unsafe>
		while (carry || 
    4238:	2801      	cmp	r0, #1
    423a:	d00f      	beq.n	425c <vli_mmod_fast_secp256r1+0x180>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    423c:	2308      	movs	r3, #8
    423e:	4622      	mov	r2, r4
    4240:	4631      	mov	r1, r6
    4242:	4630      	mov	r0, r6
    4244:	f01e fd35 	bl	22cb2 <uECC_vli_sub>
    4248:	1a2d      	subs	r5, r5, r0
    424a:	e7ef      	b.n	422c <vli_mmod_fast_secp256r1+0x150>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    424c:	4a04      	ldr	r2, [pc, #16]	; (4260 <vli_mmod_fast_secp256r1+0x184>)
    424e:	2308      	movs	r3, #8
    4250:	4631      	mov	r1, r6
    4252:	4630      	mov	r0, r6
    4254:	f01e fc04 	bl	22a60 <uECC_vli_add>
		while (carry < 0);
    4258:	182d      	adds	r5, r5, r0
    425a:	d4f8      	bmi.n	424e <vli_mmod_fast_secp256r1+0x172>
		}
	}
}
    425c:	b009      	add	sp, #36	; 0x24
    425e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4260:	00029d08 	.word	0x00029d08

00004264 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    4264:	4904      	ldr	r1, [pc, #16]	; (4278 <sub_bytes+0x14>)
    4266:	1e43      	subs	r3, r0, #1
    4268:	300f      	adds	r0, #15
    426a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    426e:	5c8a      	ldrb	r2, [r1, r2]
    4270:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    4272:	4283      	cmp	r3, r0
    4274:	d1f9      	bne.n	426a <sub_bytes+0x6>
	}
}
    4276:	4770      	bx	lr
    4278:	0002adef 	.word	0x0002adef

0000427c <tc_aes128_set_encrypt_key>:
{
    427c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    427e:	4e26      	ldr	r6, [pc, #152]	; (4318 <tc_aes128_set_encrypt_key+0x9c>)
{
    4280:	4607      	mov	r7, r0
    4282:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    4284:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    4286:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    4288:	ad01      	add	r5, sp, #4
    428a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    428c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    428e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    4290:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    4294:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    4298:	4638      	mov	r0, r7
    429a:	2f00      	cmp	r7, #0
    429c:	d038      	beq.n	4310 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
    429e:	2c00      	cmp	r4, #0
    42a0:	d038      	beq.n	4314 <tc_aes128_set_encrypt_key+0x98>
    42a2:	1f38      	subs	r0, r7, #4
    42a4:	4621      	mov	r1, r4
    42a6:	4602      	mov	r2, r0
    42a8:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    42aa:	784b      	ldrb	r3, [r1, #1]
    42ac:	780d      	ldrb	r5, [r1, #0]
    42ae:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    42b0:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    42b4:	78cd      	ldrb	r5, [r1, #3]
    42b6:	432b      	orrs	r3, r5
    42b8:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
    42ba:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    42bc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    42c0:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    42c2:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    42c6:	d1f0      	bne.n	42aa <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    42c8:	4c14      	ldr	r4, [pc, #80]	; (431c <tc_aes128_set_encrypt_key+0xa0>)
    42ca:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    42cc:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    42ce:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    42d0:	d116      	bne.n	4300 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    42d2:	f3c3 4207 	ubfx	r2, r3, #16, #8
    42d6:	5ca5      	ldrb	r5, [r4, r2]
    42d8:	0e1a      	lsrs	r2, r3, #24
    42da:	5ca2      	ldrb	r2, [r4, r2]
    42dc:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    42e0:	f3c3 2507 	ubfx	r5, r3, #8, #8
    42e4:	b2db      	uxtb	r3, r3
    42e6:	5d65      	ldrb	r5, [r4, r5]
    42e8:	5ce3      	ldrb	r3, [r4, r3]
    42ea:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    42ee:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    42f2:	f021 0303 	bic.w	r3, r1, #3
    42f6:	3330      	adds	r3, #48	; 0x30
    42f8:	446b      	add	r3, sp
    42fa:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    42fe:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    4300:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    4304:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    4306:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    4308:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    430a:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    430c:	d1de      	bne.n	42cc <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
    430e:	2001      	movs	r0, #1
}
    4310:	b00d      	add	sp, #52	; 0x34
    4312:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    4314:	4620      	mov	r0, r4
    4316:	e7fb      	b.n	4310 <tc_aes128_set_encrypt_key+0x94>
    4318:	00029af0 	.word	0x00029af0
    431c:	0002adef 	.word	0x0002adef

00004320 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    4320:	4901      	ldr	r1, [pc, #4]	; (4328 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    4322:	2210      	movs	r2, #16
	str	r2, [r1]
    4324:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    4326:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    4328:	e000ed10 	.word	0xe000ed10

0000432c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    432c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    432e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    4330:	f380 8811 	msr	BASEPRI, r0
	isb
    4334:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    4338:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    433c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    433e:	b662      	cpsie	i
	isb
    4340:	f3bf 8f6f 	isb	sy

	bx	lr
    4344:	4770      	bx	lr
    4346:	bf00      	nop

00004348 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    4348:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    434a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    434c:	f381 8811 	msr	BASEPRI, r1

	wfe
    4350:	bf20      	wfe

	msr	BASEPRI, r0
    4352:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    4356:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    4358:	4770      	bx	lr
    435a:	bf00      	nop

0000435c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    435c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    435e:	4606      	mov	r6, r0

	if (esf != NULL) {
    4360:	460c      	mov	r4, r1
    4362:	b301      	cbz	r1, 43a6 <z_arm_fatal_error+0x4a>
    4364:	4b13      	ldr	r3, [pc, #76]	; (43b4 <z_arm_fatal_error+0x58>)
    4366:	4d14      	ldr	r5, [pc, #80]	; (43b8 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    4368:	4814      	ldr	r0, [pc, #80]	; (43bc <z_arm_fatal_error+0x60>)
    436a:	1aed      	subs	r5, r5, r3
    436c:	08ed      	lsrs	r5, r5, #3
    436e:	01ad      	lsls	r5, r5, #6
    4370:	f045 0501 	orr.w	r5, r5, #1
    4374:	f8ad 5000 	strh.w	r5, [sp]
    4378:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    437c:	6809      	ldr	r1, [r1, #0]
    437e:	f01d fbee 	bl	21b5e <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    4382:	f8ad 5000 	strh.w	r5, [sp]
    4386:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    438a:	68e1      	ldr	r1, [r4, #12]
    438c:	480c      	ldr	r0, [pc, #48]	; (43c0 <z_arm_fatal_error+0x64>)
    438e:	f01d fbe6 	bl	21b5e <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    4392:	69e1      	ldr	r1, [r4, #28]
    4394:	480b      	ldr	r0, [pc, #44]	; (43c4 <z_arm_fatal_error+0x68>)
    4396:	462a      	mov	r2, r5
    4398:	f01d fbb4 	bl	21b04 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    439c:	69a1      	ldr	r1, [r4, #24]
    439e:	480a      	ldr	r0, [pc, #40]	; (43c8 <z_arm_fatal_error+0x6c>)
    43a0:	462a      	mov	r2, r5
    43a2:	f01d fbaf 	bl	21b04 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    43a6:	4621      	mov	r1, r4
    43a8:	4630      	mov	r0, r6
}
    43aa:	b002      	add	sp, #8
    43ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    43b0:	f01b baee 	b.w	1f990 <z_fatal_error>
    43b4:	00029870 	.word	0x00029870
    43b8:	00029a88 	.word	0x00029a88
    43bc:	0002aeef 	.word	0x0002aeef
    43c0:	0002af1e 	.word	0x0002af1e
    43c4:	0002af4d 	.word	0x0002af4d
    43c8:	0002af5c 	.word	0x0002af5c

000043cc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    43cc:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    43ce:	2b00      	cmp	r3, #0
    43d0:	db08      	blt.n	43e4 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    43d2:	2201      	movs	r2, #1
    43d4:	f000 001f 	and.w	r0, r0, #31
    43d8:	fa02 f000 	lsl.w	r0, r2, r0
    43dc:	095b      	lsrs	r3, r3, #5
    43de:	4a02      	ldr	r2, [pc, #8]	; (43e8 <arch_irq_enable+0x1c>)
    43e0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    43e4:	4770      	bx	lr
    43e6:	bf00      	nop
    43e8:	e000e100 	.word	0xe000e100

000043ec <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    43ec:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    43ee:	2b00      	cmp	r3, #0
    43f0:	db0d      	blt.n	440e <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    43f2:	2201      	movs	r2, #1
    43f4:	095b      	lsrs	r3, r3, #5
    43f6:	f000 001f 	and.w	r0, r0, #31
    43fa:	fa02 f000 	lsl.w	r0, r2, r0
    43fe:	3320      	adds	r3, #32
    4400:	4a03      	ldr	r2, [pc, #12]	; (4410 <arch_irq_disable+0x24>)
    4402:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    4406:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    440a:	f3bf 8f6f 	isb	sy
}
    440e:	4770      	bx	lr
    4410:	e000e100 	.word	0xe000e100

00004414 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    4414:	4b05      	ldr	r3, [pc, #20]	; (442c <arch_irq_is_enabled+0x18>)
    4416:	0942      	lsrs	r2, r0, #5
    4418:	f000 001f 	and.w	r0, r0, #31
    441c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    4420:	2301      	movs	r3, #1
    4422:	fa03 f000 	lsl.w	r0, r3, r0
}
    4426:	4010      	ands	r0, r2
    4428:	4770      	bx	lr
    442a:	bf00      	nop
    442c:	e000e100 	.word	0xe000e100

00004430 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    4430:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    4432:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4434:	bfa8      	it	ge
    4436:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    443a:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    443e:	bfb8      	it	lt
    4440:	4b06      	ldrlt	r3, [pc, #24]	; (445c <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4442:	ea4f 1141 	mov.w	r1, r1, lsl #5
    4446:	bfac      	ite	ge
    4448:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    444c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4450:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4452:	bfb4      	ite	lt
    4454:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4456:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    445a:	4770      	bx	lr
    445c:	e000ed14 	.word	0xe000ed14

00004460 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    4460:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    4462:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    4464:	4b04      	ldr	r3, [pc, #16]	; (4478 <_arch_isr_direct_pm+0x18>)
    4466:	6998      	ldr	r0, [r3, #24]
    4468:	b118      	cbz	r0, 4472 <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    446a:	2200      	movs	r2, #0
    446c:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit(idle_val);
    446e:	f024 faef 	bl	28a50 <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    4472:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    4474:	bd08      	pop	{r3, pc}
    4476:	bf00      	nop
    4478:	2000368c 	.word	0x2000368c

0000447c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    447c:	bf30      	wfi
    b z_SysNmiOnReset
    447e:	f7ff bffd 	b.w	447c <z_SysNmiOnReset>
    4482:	bf00      	nop

00004484 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    4484:	4a0f      	ldr	r2, [pc, #60]	; (44c4 <z_arm_prep_c+0x40>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    4486:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    4488:	4b0f      	ldr	r3, [pc, #60]	; (44c8 <z_arm_prep_c+0x44>)
    448a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    448e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    4490:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4494:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    4498:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    449c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    44a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
    44a4:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    44a8:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    44ac:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    44b0:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    44b4:	f01b fb10 	bl	1fad8 <z_bss_zero>
	z_data_copy();
    44b8:	f01c fb24 	bl	20b04 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    44bc:	f000 fb16 	bl	4aec <z_arm_interrupt_init>
	z_cstart();
    44c0:	f01b fb14 	bl	1faec <z_cstart>
    44c4:	00000000 	.word	0x00000000
    44c8:	e000ed00 	.word	0xe000ed00

000044cc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    44cc:	4a09      	ldr	r2, [pc, #36]	; (44f4 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    44ce:	490a      	ldr	r1, [pc, #40]	; (44f8 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    44d0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    44d2:	6809      	ldr	r1, [r1, #0]
    44d4:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    44d6:	4909      	ldr	r1, [pc, #36]	; (44fc <arch_swap+0x30>)
	_current->arch.basepri = key;
    44d8:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    44da:	684b      	ldr	r3, [r1, #4]
    44dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    44e0:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    44e2:	2300      	movs	r3, #0
    44e4:	f383 8811 	msr	BASEPRI, r3
    44e8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    44ec:	6893      	ldr	r3, [r2, #8]
}
    44ee:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    44f0:	4770      	bx	lr
    44f2:	bf00      	nop
    44f4:	2000368c 	.word	0x2000368c
    44f8:	0002a82c 	.word	0x0002a82c
    44fc:	e000ed00 	.word	0xe000ed00

00004500 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    4500:	4912      	ldr	r1, [pc, #72]	; (454c <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    4502:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    4504:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    4508:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    450a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    450e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4512:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    4514:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    4518:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    451c:	4f0c      	ldr	r7, [pc, #48]	; (4550 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    451e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    4522:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    4524:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    4526:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    4528:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    452a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    452c:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    452e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    4532:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    4534:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    4536:	f000 fb1b 	bl	4b70 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    453a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    453e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    4542:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    4546:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    454a:	4770      	bx	lr
    ldr r1, =_kernel
    454c:	2000368c 	.word	0x2000368c
    ldr v4, =_SCS_ICSR
    4550:	e000ed04 	.word	0xe000ed04

00004554 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    4554:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    4558:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    455a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    455e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    4562:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    4564:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    4568:	2902      	cmp	r1, #2
    beq _oops
    456a:	d0ff      	beq.n	456c <_oops>

0000456c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    456c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    456e:	f01f fac5 	bl	23afc <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    4572:	bd01      	pop	{r0, pc}

00004574 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    4574:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    4578:	9b00      	ldr	r3, [sp, #0]
    457a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    457e:	490a      	ldr	r1, [pc, #40]	; (45a8 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    4580:	9b01      	ldr	r3, [sp, #4]
    4582:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    4586:	9b02      	ldr	r3, [sp, #8]
    4588:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    458c:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    4590:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    4594:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    4598:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    459c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    459e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    45a0:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    45a2:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    45a4:	4770      	bx	lr
    45a6:	bf00      	nop
    45a8:	00021441 	.word	0x00021441

000045ac <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    45ac:	4a09      	ldr	r2, [pc, #36]	; (45d4 <z_check_thread_stack_fail+0x28>)
{
    45ae:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    45b0:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    45b2:	b170      	cbz	r0, 45d2 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    45b4:	f113 0f16 	cmn.w	r3, #22
    45b8:	6e80      	ldr	r0, [r0, #104]	; 0x68
    45ba:	d005      	beq.n	45c8 <z_check_thread_stack_fail+0x1c>
    45bc:	f1a0 0220 	sub.w	r2, r0, #32
    45c0:	429a      	cmp	r2, r3
    45c2:	d805      	bhi.n	45d0 <z_check_thread_stack_fail+0x24>
    45c4:	4283      	cmp	r3, r0
    45c6:	d203      	bcs.n	45d0 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    45c8:	4281      	cmp	r1, r0
    45ca:	bf28      	it	cs
    45cc:	2000      	movcs	r0, #0
    45ce:	4770      	bx	lr
    45d0:	2000      	movs	r0, #0
}
    45d2:	4770      	bx	lr
    45d4:	2000368c 	.word	0x2000368c

000045d8 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    45d8:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    45da:	4b09      	ldr	r3, [pc, #36]	; (4600 <arch_switch_to_main_thread+0x28>)
    45dc:	6098      	str	r0, [r3, #8]
{
    45de:	460d      	mov	r5, r1
    45e0:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    45e2:	f000 fac5 	bl	4b70 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    45e6:	4620      	mov	r0, r4
    45e8:	f385 8809 	msr	PSP, r5
    45ec:	2100      	movs	r1, #0
    45ee:	b663      	cpsie	if
    45f0:	f381 8811 	msr	BASEPRI, r1
    45f4:	f3bf 8f6f 	isb	sy
    45f8:	2200      	movs	r2, #0
    45fa:	2300      	movs	r3, #0
    45fc:	f01c ff20 	bl	21440 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    4600:	2000368c 	.word	0x2000368c

00004604 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    4604:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    4606:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    4608:	4a0b      	ldr	r2, [pc, #44]	; (4638 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    460a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    460c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    460e:	bf1e      	ittt	ne
	movne	r1, #0
    4610:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    4612:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    4614:	f024 fa1c 	blne	28a50 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    4618:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    461a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    461e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    4622:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    4626:	4905      	ldr	r1, [pc, #20]	; (463c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    4628:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    462a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    462c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    462e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    4632:	4903      	ldr	r1, [pc, #12]	; (4640 <_isr_wrapper+0x3c>)
	bx r1
    4634:	4708      	bx	r1
    4636:	0000      	.short	0x0000
	ldr r2, =_kernel
    4638:	2000368c 	.word	0x2000368c
	ldr r1, =_sw_isr_table
    463c:	000295a0 	.word	0x000295a0
	ldr r1, =z_arm_int_exit
    4640:	00004645 	.word	0x00004645

00004644 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    4644:	4b04      	ldr	r3, [pc, #16]	; (4658 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    4646:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    4648:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    464a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    464c:	d003      	beq.n	4656 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    464e:	4903      	ldr	r1, [pc, #12]	; (465c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    4650:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    4654:	600a      	str	r2, [r1, #0]

00004656 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    4656:	4770      	bx	lr
	ldr r3, =_kernel
    4658:	2000368c 	.word	0x2000368c
	ldr r1, =_SCS_ICSR
    465c:	e000ed04 	.word	0xe000ed04

00004660 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    4660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4664:	4b35      	ldr	r3, [pc, #212]	; (473c <mem_manage_fault+0xdc>)
    4666:	4c36      	ldr	r4, [pc, #216]	; (4740 <mem_manage_fault+0xe0>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    4668:	4d36      	ldr	r5, [pc, #216]	; (4744 <mem_manage_fault+0xe4>)
    466a:	1ae4      	subs	r4, r4, r3
    466c:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    466e:	01a4      	lsls	r4, r4, #6
    4670:	f044 0901 	orr.w	r9, r4, #1
{
    4674:	4607      	mov	r7, r0
    4676:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    4678:	4833      	ldr	r0, [pc, #204]	; (4748 <mem_manage_fault+0xe8>)
    467a:	4649      	mov	r1, r9
{
    467c:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    467e:	f01d fa34 	bl	21aea <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    4682:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4684:	06db      	lsls	r3, r3, #27
    4686:	d503      	bpl.n	4690 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Stacking error (context area might be"
    4688:	4830      	ldr	r0, [pc, #192]	; (474c <mem_manage_fault+0xec>)
    468a:	4649      	mov	r1, r9
    468c:	f01d fa2d 	bl	21aea <log_0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    4690:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4692:	0718      	lsls	r0, r3, #28
    4694:	d504      	bpl.n	46a0 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Unstacking error");
    4696:	482e      	ldr	r0, [pc, #184]	; (4750 <mem_manage_fault+0xf0>)
    4698:	f044 0101 	orr.w	r1, r4, #1
    469c:	f01d fa25 	bl	21aea <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    46a0:	4d28      	ldr	r5, [pc, #160]	; (4744 <mem_manage_fault+0xe4>)
    46a2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    46a4:	0799      	lsls	r1, r3, #30
    46a6:	d423      	bmi.n	46f0 <mem_manage_fault+0x90>
	uint32_t mmfar = -EINVAL;
    46a8:	f06f 0915 	mvn.w	r9, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    46ac:	4d25      	ldr	r5, [pc, #148]	; (4744 <mem_manage_fault+0xe4>)
    46ae:	6aab      	ldr	r3, [r5, #40]	; 0x28
    46b0:	07db      	lsls	r3, r3, #31
    46b2:	d504      	bpl.n	46be <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Instruction Access Violation");
    46b4:	4827      	ldr	r0, [pc, #156]	; (4754 <mem_manage_fault+0xf4>)
    46b6:	f044 0101 	orr.w	r1, r4, #1
    46ba:	f01d fa16 	bl	21aea <log_0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    46be:	6aab      	ldr	r3, [r5, #40]	; 0x28
    46c0:	0698      	lsls	r0, r3, #26
    46c2:	d504      	bpl.n	46ce <mem_manage_fault+0x6e>
		PR_FAULT_INFO(
    46c4:	4824      	ldr	r0, [pc, #144]	; (4758 <mem_manage_fault+0xf8>)
    46c6:	f044 0101 	orr.w	r1, r4, #1
    46ca:	f01d fa0e 	bl	21aea <log_0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    46ce:	4b1d      	ldr	r3, [pc, #116]	; (4744 <mem_manage_fault+0xe4>)
    46d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    46d2:	06d1      	lsls	r1, r2, #27
    46d4:	d424      	bmi.n	4720 <mem_manage_fault+0xc0>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    46d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    46d8:	0792      	lsls	r2, r2, #30
    46da:	d421      	bmi.n	4720 <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    46dc:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    46de:	4a19      	ldr	r2, [pc, #100]	; (4744 <mem_manage_fault+0xe4>)
    46e0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    46e2:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    46e6:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    46e8:	2300      	movs	r3, #0
    46ea:	7033      	strb	r3, [r6, #0]

	return reason;
}
    46ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
    46f0:	f044 0a01 	orr.w	sl, r4, #1
    46f4:	4819      	ldr	r0, [pc, #100]	; (475c <mem_manage_fault+0xfc>)
    46f6:	4651      	mov	r1, sl
    46f8:	f01d f9f7 	bl	21aea <log_0>
		uint32_t temp = SCB->MMFAR;
    46fc:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    4700:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4702:	061a      	lsls	r2, r3, #24
    4704:	d5d0      	bpl.n	46a8 <mem_manage_fault+0x48>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    4706:	4816      	ldr	r0, [pc, #88]	; (4760 <mem_manage_fault+0x100>)
    4708:	4652      	mov	r2, sl
    470a:	4649      	mov	r1, r9
    470c:	f01d f9fa 	bl	21b04 <log_1>
			if (from_hard_fault != 0) {
    4710:	f1b8 0f00 	cmp.w	r8, #0
    4714:	d0ca      	beq.n	46ac <mem_manage_fault+0x4c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    4716:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4718:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    471c:	62ab      	str	r3, [r5, #40]	; 0x28
    471e:	e7c5      	b.n	46ac <mem_manage_fault+0x4c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    4720:	685b      	ldr	r3, [r3, #4]
    4722:	051b      	lsls	r3, r3, #20
    4724:	d5da      	bpl.n	46dc <mem_manage_fault+0x7c>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    4726:	4639      	mov	r1, r7
    4728:	4648      	mov	r0, r9
    472a:	f7ff ff3f 	bl	45ac <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    472e:	2800      	cmp	r0, #0
    4730:	d0d4      	beq.n	46dc <mem_manage_fault+0x7c>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    4732:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    4736:	2002      	movs	r0, #2
    4738:	e7d1      	b.n	46de <mem_manage_fault+0x7e>
    473a:	bf00      	nop
    473c:	00029870 	.word	0x00029870
    4740:	00029a88 	.word	0x00029a88
    4744:	e000ed00 	.word	0xe000ed00
    4748:	0002af8a 	.word	0x0002af8a
    474c:	0002afa0 	.word	0x0002afa0
    4750:	0002afd3 	.word	0x0002afd3
    4754:	0002b014 	.word	0x0002b014
    4758:	0002b033 	.word	0x0002b033
    475c:	0002afe6 	.word	0x0002afe6
    4760:	0002affe 	.word	0x0002affe

00004764 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    4764:	b570      	push	{r4, r5, r6, lr}
    4766:	4b23      	ldr	r3, [pc, #140]	; (47f4 <usage_fault.constprop.0+0x90>)
    4768:	4c23      	ldr	r4, [pc, #140]	; (47f8 <usage_fault.constprop.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    476a:	4d24      	ldr	r5, [pc, #144]	; (47fc <usage_fault.constprop.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    476c:	4824      	ldr	r0, [pc, #144]	; (4800 <usage_fault.constprop.0+0x9c>)
    476e:	1ae4      	subs	r4, r4, r3
    4770:	08e4      	lsrs	r4, r4, #3
    4772:	01a4      	lsls	r4, r4, #6
    4774:	f044 0601 	orr.w	r6, r4, #1
    4778:	4631      	mov	r1, r6
    477a:	f01d f9b6 	bl	21aea <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    477e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4780:	019b      	lsls	r3, r3, #6
    4782:	d503      	bpl.n	478c <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    4784:	481f      	ldr	r0, [pc, #124]	; (4804 <usage_fault.constprop.0+0xa0>)
    4786:	4631      	mov	r1, r6
    4788:	f01d f9af 	bl	21aea <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    478c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    478e:	01dd      	lsls	r5, r3, #7
    4790:	d504      	bpl.n	479c <usage_fault.constprop.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    4792:	481d      	ldr	r0, [pc, #116]	; (4808 <usage_fault.constprop.0+0xa4>)
    4794:	f044 0101 	orr.w	r1, r4, #1
    4798:	f01d f9a7 	bl	21aea <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    479c:	4d17      	ldr	r5, [pc, #92]	; (47fc <usage_fault.constprop.0+0x98>)
    479e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    47a0:	0318      	lsls	r0, r3, #12
    47a2:	d504      	bpl.n	47ae <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    47a4:	4819      	ldr	r0, [pc, #100]	; (480c <usage_fault.constprop.0+0xa8>)
    47a6:	f044 0101 	orr.w	r1, r4, #1
    47aa:	f01d f99e 	bl	21aea <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    47ae:	6aab      	ldr	r3, [r5, #40]	; 0x28
    47b0:	0359      	lsls	r1, r3, #13
    47b2:	d504      	bpl.n	47be <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    47b4:	4816      	ldr	r0, [pc, #88]	; (4810 <usage_fault.constprop.0+0xac>)
    47b6:	f044 0101 	orr.w	r1, r4, #1
    47ba:	f01d f996 	bl	21aea <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    47be:	4d0f      	ldr	r5, [pc, #60]	; (47fc <usage_fault.constprop.0+0x98>)
    47c0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    47c2:	039a      	lsls	r2, r3, #14
    47c4:	d504      	bpl.n	47d0 <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    47c6:	4813      	ldr	r0, [pc, #76]	; (4814 <usage_fault.constprop.0+0xb0>)
    47c8:	f044 0101 	orr.w	r1, r4, #1
    47cc:	f01d f98d 	bl	21aea <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    47d0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    47d2:	03db      	lsls	r3, r3, #15
    47d4:	d504      	bpl.n	47e0 <usage_fault.constprop.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    47d6:	4810      	ldr	r0, [pc, #64]	; (4818 <usage_fault.constprop.0+0xb4>)
    47d8:	f044 0101 	orr.w	r1, r4, #1
    47dc:	f01d f985 	bl	21aea <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    47e0:	4a06      	ldr	r2, [pc, #24]	; (47fc <usage_fault.constprop.0+0x98>)
    47e2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    47e4:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    47e8:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    47ec:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    47ee:	2000      	movs	r0, #0
    47f0:	bd70      	pop	{r4, r5, r6, pc}
    47f2:	bf00      	nop
    47f4:	00029870 	.word	0x00029870
    47f8:	00029a88 	.word	0x00029a88
    47fc:	e000ed00 	.word	0xe000ed00
    4800:	0002b062 	.word	0x0002b062
    4804:	0002b07a 	.word	0x0002b07a
    4808:	0002b08d 	.word	0x0002b08d
    480c:	0002b0a7 	.word	0x0002b0a7
    4810:	0002b0c5 	.word	0x0002b0c5
    4814:	0002b0ea 	.word	0x0002b0ea
    4818:	0002b104 	.word	0x0002b104

0000481c <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    481c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4820:	4b2a      	ldr	r3, [pc, #168]	; (48cc <bus_fault.constprop.0+0xb0>)
    4822:	4c2b      	ldr	r4, [pc, #172]	; (48d0 <bus_fault.constprop.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    4824:	4d2b      	ldr	r5, [pc, #172]	; (48d4 <bus_fault.constprop.0+0xb8>)
    4826:	1ae4      	subs	r4, r4, r3
    4828:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    482a:	01a4      	lsls	r4, r4, #6
    482c:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    4830:	4607      	mov	r7, r0
    4832:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    4834:	4828      	ldr	r0, [pc, #160]	; (48d8 <bus_fault.constprop.0+0xbc>)
    4836:	4641      	mov	r1, r8
    4838:	f01d f957 	bl	21aea <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    483c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    483e:	04d9      	lsls	r1, r3, #19
    4840:	d503      	bpl.n	484a <bus_fault.constprop.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
    4842:	4826      	ldr	r0, [pc, #152]	; (48dc <bus_fault.constprop.0+0xc0>)
    4844:	4641      	mov	r1, r8
    4846:	f01d f950 	bl	21aea <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    484a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    484c:	051a      	lsls	r2, r3, #20
    484e:	d504      	bpl.n	485a <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    4850:	4823      	ldr	r0, [pc, #140]	; (48e0 <bus_fault.constprop.0+0xc4>)
    4852:	f044 0101 	orr.w	r1, r4, #1
    4856:	f01d f948 	bl	21aea <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    485a:	4d1e      	ldr	r5, [pc, #120]	; (48d4 <bus_fault.constprop.0+0xb8>)
    485c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    485e:	059b      	lsls	r3, r3, #22
    4860:	d512      	bpl.n	4888 <bus_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
    4862:	f044 0801 	orr.w	r8, r4, #1
    4866:	481f      	ldr	r0, [pc, #124]	; (48e4 <bus_fault.constprop.0+0xc8>)
    4868:	4641      	mov	r1, r8
    486a:	f01d f93e 	bl	21aea <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    486e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    4870:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4872:	0418      	lsls	r0, r3, #16
    4874:	d508      	bpl.n	4888 <bus_fault.constprop.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    4876:	481c      	ldr	r0, [pc, #112]	; (48e8 <bus_fault.constprop.0+0xcc>)
    4878:	4642      	mov	r2, r8
    487a:	f01d f943 	bl	21b04 <log_1>
			if (from_hard_fault != 0) {
    487e:	b11f      	cbz	r7, 4888 <bus_fault.constprop.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    4880:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4882:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    4886:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    4888:	4d12      	ldr	r5, [pc, #72]	; (48d4 <bus_fault.constprop.0+0xb8>)
    488a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    488c:	0559      	lsls	r1, r3, #21
    488e:	d504      	bpl.n	489a <bus_fault.constprop.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
    4890:	4816      	ldr	r0, [pc, #88]	; (48ec <bus_fault.constprop.0+0xd0>)
    4892:	f044 0101 	orr.w	r1, r4, #1
    4896:	f01d f928 	bl	21aea <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    489a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    489c:	05da      	lsls	r2, r3, #23
    489e:	d50d      	bpl.n	48bc <bus_fault.constprop.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
    48a0:	4813      	ldr	r0, [pc, #76]	; (48f0 <bus_fault.constprop.0+0xd4>)
    48a2:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    48a6:	f01d f920 	bl	21aea <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    48aa:	4a0a      	ldr	r2, [pc, #40]	; (48d4 <bus_fault.constprop.0+0xb8>)
    48ac:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    48ae:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    48b0:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    48b4:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    48b6:	7030      	strb	r0, [r6, #0]
}
    48b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    48bc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    48be:	049b      	lsls	r3, r3, #18
    48c0:	d5f3      	bpl.n	48aa <bus_fault.constprop.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    48c2:	480c      	ldr	r0, [pc, #48]	; (48f4 <bus_fault.constprop.0+0xd8>)
    48c4:	f044 0101 	orr.w	r1, r4, #1
    48c8:	e7ed      	b.n	48a6 <bus_fault.constprop.0+0x8a>
    48ca:	bf00      	nop
    48cc:	00029870 	.word	0x00029870
    48d0:	00029a88 	.word	0x00029a88
    48d4:	e000ed00 	.word	0xe000ed00
    48d8:	0002b12f 	.word	0x0002b12f
    48dc:	0002b145 	.word	0x0002b145
    48e0:	0002afd3 	.word	0x0002afd3
    48e4:	0002b156 	.word	0x0002b156
    48e8:	0002b16f 	.word	0x0002b16f
    48ec:	0002b184 	.word	0x0002b184
    48f0:	0002b19f 	.word	0x0002b19f
    48f4:	0002b033 	.word	0x0002b033

000048f8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    48f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    48fc:	4b65      	ldr	r3, [pc, #404]	; (4a94 <z_arm_fault+0x19c>)
    48fe:	685e      	ldr	r6, [r3, #4]
{
    4900:	b08b      	sub	sp, #44	; 0x2c
    4902:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4904:	f3c6 0408 	ubfx	r4, r6, #0, #9
    4908:	2700      	movs	r7, #0
    490a:	f387 8811 	msr	BASEPRI, r7
    490e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    4912:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    4916:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    491a:	d10d      	bne.n	4938 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    491c:	f002 030c 	and.w	r3, r2, #12
    4920:	2b08      	cmp	r3, #8
    4922:	d10b      	bne.n	493c <z_arm_fault+0x44>
    4924:	495c      	ldr	r1, [pc, #368]	; (4a98 <z_arm_fault+0x1a0>)
    4926:	4b5d      	ldr	r3, [pc, #372]	; (4a9c <z_arm_fault+0x1a4>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    4928:	485d      	ldr	r0, [pc, #372]	; (4aa0 <z_arm_fault+0x1a8>)
    492a:	1ac9      	subs	r1, r1, r3
    492c:	08c9      	lsrs	r1, r1, #3
    492e:	0189      	lsls	r1, r1, #6
    4930:	f041 0101 	orr.w	r1, r1, #1
    4934:	f01d f8d9 	bl	21aea <log_0>
		return NULL;
    4938:	463d      	mov	r5, r7
    493a:	e003      	b.n	4944 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    493c:	0712      	lsls	r2, r2, #28
    493e:	d401      	bmi.n	4944 <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
    4940:	4605      	mov	r5, r0
			*nested_exc = true;
    4942:	2701      	movs	r7, #1
	*recoverable = false;
    4944:	2300      	movs	r3, #0
    4946:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    494a:	1ee3      	subs	r3, r4, #3
    494c:	2b09      	cmp	r3, #9
    494e:	f200 8088 	bhi.w	4a62 <z_arm_fault+0x16a>
    4952:	e8df f003 	tbb	[pc, r3]
    4956:	7505      	.short	0x7505
    4958:	86867279 	.word	0x86867279
    495c:	7d868686 	.word	0x7d868686
    4960:	4a4e      	ldr	r2, [pc, #312]	; (4a9c <z_arm_fault+0x1a4>)
    4962:	4e4d      	ldr	r6, [pc, #308]	; (4a98 <z_arm_fault+0x1a0>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    4964:	f8df 812c 	ldr.w	r8, [pc, #300]	; 4a94 <z_arm_fault+0x19c>
	PR_FAULT_INFO("***** HARD FAULT *****");
    4968:	484e      	ldr	r0, [pc, #312]	; (4aa4 <z_arm_fault+0x1ac>)
    496a:	1ab6      	subs	r6, r6, r2
    496c:	08f6      	lsrs	r6, r6, #3
    496e:	01b6      	lsls	r6, r6, #6
    4970:	f046 0601 	orr.w	r6, r6, #1
    4974:	4631      	mov	r1, r6
    4976:	f01d f8b8 	bl	21aea <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    497a:	f8d8 402c 	ldr.w	r4, [r8, #44]	; 0x2c
	*recoverable = false;
    497e:	f04f 0900 	mov.w	r9, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    4982:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    4986:	f88d 9007 	strb.w	r9, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    498a:	d005      	beq.n	4998 <z_arm_fault+0xa0>
		PR_EXC("  Bus fault on vector table read");
    498c:	4846      	ldr	r0, [pc, #280]	; (4aa8 <z_arm_fault+0x1b0>)
    498e:	4631      	mov	r1, r6
	PR_FAULT_INFO(
    4990:	f01d f8ab 	bl	21aea <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4994:	2400      	movs	r4, #0
}
    4996:	e007      	b.n	49a8 <z_arm_fault+0xb0>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    4998:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    499c:	2b00      	cmp	r3, #0
    499e:	da1d      	bge.n	49dc <z_arm_fault+0xe4>
		PR_EXC("  Debug event");
    49a0:	4842      	ldr	r0, [pc, #264]	; (4aac <z_arm_fault+0x1b4>)
    49a2:	4631      	mov	r1, r6
    49a4:	f01d f8a1 	bl	21aea <log_0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    49a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    49ac:	b99b      	cbnz	r3, 49d6 <z_arm_fault+0xde>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    49ae:	2220      	movs	r2, #32
    49b0:	4629      	mov	r1, r5
    49b2:	a802      	add	r0, sp, #8
    49b4:	f01f f9f8 	bl	23da8 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    49b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    49ba:	2f00      	cmp	r7, #0
    49bc:	d065      	beq.n	4a8a <z_arm_fault+0x192>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    49be:	f3c3 0208 	ubfx	r2, r3, #0, #9
    49c2:	b922      	cbnz	r2, 49ce <z_arm_fault+0xd6>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    49c4:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    49c8:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    49cc:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    49ce:	a902      	add	r1, sp, #8
    49d0:	4620      	mov	r0, r4
    49d2:	f7ff fcc3 	bl	435c <z_arm_fatal_error>
}
    49d6:	b00b      	add	sp, #44	; 0x2c
    49d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    49dc:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    49e0:	005b      	lsls	r3, r3, #1
    49e2:	d5e1      	bpl.n	49a8 <z_arm_fault+0xb0>
		PR_EXC("  Fault escalation (see below)");
    49e4:	4832      	ldr	r0, [pc, #200]	; (4ab0 <z_arm_fault+0x1b8>)
    49e6:	4631      	mov	r1, r6
    49e8:	f01d f87f 	bl	21aea <log_0>
	uint16_t fault_insn = *(ret_addr - 1);
    49ec:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    49ee:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    49f2:	f64d 7302 	movw	r3, #57090	; 0xdf02
    49f6:	429a      	cmp	r2, r3
    49f8:	d00a      	beq.n	4a10 <z_arm_fault+0x118>
		} else if (SCB_MMFSR != 0) {
    49fa:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
    49fe:	b173      	cbz	r3, 4a1e <z_arm_fault+0x126>
			reason = mem_manage_fault(esf, 1, recoverable);
    4a00:	f10d 0207 	add.w	r2, sp, #7
    4a04:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    4a06:	4628      	mov	r0, r5
    4a08:	f7ff fe2a 	bl	4660 <mem_manage_fault>
    4a0c:	4604      	mov	r4, r0
		break;
    4a0e:	e7cb      	b.n	49a8 <z_arm_fault+0xb0>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    4a10:	6829      	ldr	r1, [r5, #0]
    4a12:	4828      	ldr	r0, [pc, #160]	; (4ab4 <z_arm_fault+0x1bc>)
    4a14:	4632      	mov	r2, r6
    4a16:	f01d f875 	bl	21b04 <log_1>
			reason = esf->basic.r0;
    4a1a:	682c      	ldr	r4, [r5, #0]
    4a1c:	e7c4      	b.n	49a8 <z_arm_fault+0xb0>
		} else if (SCB_BFSR != 0) {
    4a1e:	f898 3029 	ldrb.w	r3, [r8, #41]	; 0x29
    4a22:	b12b      	cbz	r3, 4a30 <z_arm_fault+0x138>
			reason = bus_fault(esf, 1, recoverable);
    4a24:	f10d 0107 	add.w	r1, sp, #7
    4a28:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    4a2a:	f7ff fef7 	bl	481c <bus_fault.constprop.0>
    4a2e:	e7ed      	b.n	4a0c <z_arm_fault+0x114>
		} else if (SCB_UFSR != 0) {
    4a30:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
    4a34:	b29b      	uxth	r3, r3
    4a36:	2b00      	cmp	r3, #0
    4a38:	d0b6      	beq.n	49a8 <z_arm_fault+0xb0>
		reason = usage_fault(esf);
    4a3a:	f7ff fe93 	bl	4764 <usage_fault.constprop.0>
    4a3e:	e7e5      	b.n	4a0c <z_arm_fault+0x114>
		reason = mem_manage_fault(esf, 0, recoverable);
    4a40:	f10d 0207 	add.w	r2, sp, #7
    4a44:	2100      	movs	r1, #0
    4a46:	e7de      	b.n	4a06 <z_arm_fault+0x10e>
		reason = bus_fault(esf, 0, recoverable);
    4a48:	f10d 0107 	add.w	r1, sp, #7
    4a4c:	2000      	movs	r0, #0
    4a4e:	e7ec      	b.n	4a2a <z_arm_fault+0x132>
    4a50:	4911      	ldr	r1, [pc, #68]	; (4a98 <z_arm_fault+0x1a0>)
    4a52:	4b12      	ldr	r3, [pc, #72]	; (4a9c <z_arm_fault+0x1a4>)
	PR_FAULT_INFO(
    4a54:	4818      	ldr	r0, [pc, #96]	; (4ab8 <z_arm_fault+0x1c0>)
    4a56:	1ac9      	subs	r1, r1, r3
    4a58:	08c9      	lsrs	r1, r1, #3
    4a5a:	0189      	lsls	r1, r1, #6
    4a5c:	f041 0101 	orr.w	r1, r1, #1
    4a60:	e796      	b.n	4990 <z_arm_fault+0x98>
    4a62:	4a0e      	ldr	r2, [pc, #56]	; (4a9c <z_arm_fault+0x1a4>)
    4a64:	4b0c      	ldr	r3, [pc, #48]	; (4a98 <z_arm_fault+0x1a0>)
	PR_FAULT_INFO("***** %s %d) *****",
    4a66:	4815      	ldr	r0, [pc, #84]	; (4abc <z_arm_fault+0x1c4>)
    4a68:	4915      	ldr	r1, [pc, #84]	; (4ac0 <z_arm_fault+0x1c8>)
    4a6a:	1a9b      	subs	r3, r3, r2
    4a6c:	08db      	lsrs	r3, r3, #3
    4a6e:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
    4a72:	ea4f 1383 	mov.w	r3, r3, lsl #6
    4a76:	bf18      	it	ne
    4a78:	4601      	movne	r1, r0
    4a7a:	f043 0301 	orr.w	r3, r3, #1
    4a7e:	4811      	ldr	r0, [pc, #68]	; (4ac4 <z_arm_fault+0x1cc>)
    4a80:	f1a4 0210 	sub.w	r2, r4, #16
    4a84:	f01d f852 	bl	21b2c <log_2>
    4a88:	e784      	b.n	4994 <z_arm_fault+0x9c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    4a8a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    4a8e:	f023 0301 	bic.w	r3, r3, #1
    4a92:	e79b      	b.n	49cc <z_arm_fault+0xd4>
    4a94:	e000ed00 	.word	0xe000ed00
    4a98:	00029a88 	.word	0x00029a88
    4a9c:	00029870 	.word	0x00029870
    4aa0:	0002b1b7 	.word	0x0002b1b7
    4aa4:	0002b1e2 	.word	0x0002b1e2
    4aa8:	0002b1f9 	.word	0x0002b1f9
    4aac:	0002b21a 	.word	0x0002b21a
    4ab0:	0002b228 	.word	0x0002b228
    4ab4:	0002b247 	.word	0x0002b247
    4ab8:	0002b263 	.word	0x0002b263
    4abc:	0002b29c 	.word	0x0002b29c
    4ac0:	0002b287 	.word	0x0002b287
    4ac4:	0002b2b5 	.word	0x0002b2b5

00004ac8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    4ac8:	4a02      	ldr	r2, [pc, #8]	; (4ad4 <z_arm_fault_init+0xc>)
    4aca:	6953      	ldr	r3, [r2, #20]
    4acc:	f043 0310 	orr.w	r3, r3, #16
    4ad0:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    4ad2:	4770      	bx	lr
    4ad4:	e000ed00 	.word	0xe000ed00

00004ad8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    4ad8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    4adc:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    4ae0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    4ae2:	4672      	mov	r2, lr
	bl z_arm_fault
    4ae4:	f7ff ff08 	bl	48f8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    4ae8:	bd01      	pop	{r0, pc}
    4aea:	bf00      	nop

00004aec <z_arm_interrupt_init>:
    4aec:	4804      	ldr	r0, [pc, #16]	; (4b00 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    4aee:	2300      	movs	r3, #0
    4af0:	2120      	movs	r1, #32
    4af2:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    4af4:	3301      	adds	r3, #1
    4af6:	2b27      	cmp	r3, #39	; 0x27
    4af8:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    4afc:	d1f9      	bne.n	4af2 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    4afe:	4770      	bx	lr
    4b00:	e000e100 	.word	0xe000e100

00004b04 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    4b04:	f024 fcc6 	bl	29494 <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4b08:	2020      	movs	r0, #32
    msr BASEPRI, r0
    4b0a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    4b0e:	4808      	ldr	r0, [pc, #32]	; (4b30 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    4b10:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    4b14:	1840      	adds	r0, r0, r1
    msr PSP, r0
    4b16:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    4b1a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    4b1e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    4b20:	4308      	orrs	r0, r1
    msr CONTROL, r0
    4b22:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    4b26:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    4b2a:	f7ff fcab 	bl	4484 <z_arm_prep_c>
    4b2e:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    4b30:	20006020 	.word	0x20006020

00004b34 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    4b34:	4b06      	ldr	r3, [pc, #24]	; (4b50 <z_impl_k_thread_abort+0x1c>)
    4b36:	689b      	ldr	r3, [r3, #8]
    4b38:	4283      	cmp	r3, r0
    4b3a:	d107      	bne.n	4b4c <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4b3c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    4b40:	b123      	cbz	r3, 4b4c <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4b42:	4a04      	ldr	r2, [pc, #16]	; (4b54 <z_impl_k_thread_abort+0x20>)
    4b44:	6853      	ldr	r3, [r2, #4]
    4b46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    4b4a:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    4b4c:	f01b bf76 	b.w	20a3c <z_thread_abort>
    4b50:	2000368c 	.word	0x2000368c
    4b54:	e000ed00 	.word	0xe000ed00

00004b58 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    4b58:	4b02      	ldr	r3, [pc, #8]	; (4b64 <z_arm_configure_static_mpu_regions+0xc>)
    4b5a:	4a03      	ldr	r2, [pc, #12]	; (4b68 <z_arm_configure_static_mpu_regions+0x10>)
    4b5c:	4803      	ldr	r0, [pc, #12]	; (4b6c <z_arm_configure_static_mpu_regions+0x14>)
    4b5e:	2101      	movs	r1, #1
    4b60:	f000 b88c 	b.w	4c7c <arm_core_mpu_configure_static_mpu_regions>
    4b64:	20010000 	.word	0x20010000
    4b68:	20000000 	.word	0x20000000
    4b6c:	00029db4 	.word	0x00029db4

00004b70 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    4b70:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    4b72:	4b05      	ldr	r3, [pc, #20]	; (4b88 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    4b74:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    4b76:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    4b78:	4a04      	ldr	r2, [pc, #16]	; (4b8c <z_arm_configure_dynamic_mpu_regions+0x1c>)
    4b7a:	2120      	movs	r1, #32
    4b7c:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    4b80:	4618      	mov	r0, r3
    4b82:	2101      	movs	r1, #1
    4b84:	f000 b884 	b.w	4c90 <arm_core_mpu_configure_dynamic_mpu_regions>
    4b88:	200020b8 	.word	0x200020b8
    4b8c:	150b0000 	.word	0x150b0000

00004b90 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    4b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    4b92:	4f2a      	ldr	r7, [pc, #168]	; (4c3c <mpu_configure_regions+0xac>)
    4b94:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    4b96:	2100      	movs	r1, #0
    4b98:	42b1      	cmp	r1, r6
    4b9a:	da14      	bge.n	4bc6 <mpu_configure_regions+0x36>
		if (regions[i].size == 0U) {
    4b9c:	6844      	ldr	r4, [r0, #4]
    4b9e:	2c00      	cmp	r4, #0
    4ba0:	d048      	beq.n	4c34 <mpu_configure_regions+0xa4>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    4ba2:	b1c3      	cbz	r3, 4bd6 <mpu_configure_regions+0x46>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    4ba4:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    4ba8:	ea14 0f0c 	tst.w	r4, ip
    4bac:	d00d      	beq.n	4bca <mpu_configure_regions+0x3a>
    4bae:	4a24      	ldr	r2, [pc, #144]	; (4c40 <mpu_configure_regions+0xb0>)
    4bb0:	4b24      	ldr	r3, [pc, #144]	; (4c44 <mpu_configure_regions+0xb4>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    4bb2:	4825      	ldr	r0, [pc, #148]	; (4c48 <mpu_configure_regions+0xb8>)
    4bb4:	1ad2      	subs	r2, r2, r3
    4bb6:	08d2      	lsrs	r2, r2, #3
    4bb8:	0192      	lsls	r2, r2, #6
    4bba:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    4bbe:	f01c ffa1 	bl	21b04 <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    4bc2:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    4bc6:	4610      	mov	r0, r2
    4bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    4bca:	2c1f      	cmp	r4, #31
    4bcc:	d9ef      	bls.n	4bae <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    4bce:	6805      	ldr	r5, [r0, #0]
		&&
    4bd0:	ea1c 0f05 	tst.w	ip, r5
    4bd4:	d1eb      	bne.n	4bae <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    4bd6:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    4bd8:	b2d5      	uxtb	r5, r2
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    4bda:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
    4bde:	6802      	ldr	r2, [r0, #0]
	if (size <= 32U) {
    4be0:	d916      	bls.n	4c10 <mpu_configure_regions+0x80>
	if (size > (1UL << 31)) {
    4be2:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    4be6:	d815      	bhi.n	4c14 <mpu_configure_regions+0x84>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    4be8:	3c01      	subs	r4, #1
    4bea:	fab4 f484 	clz	r4, r4
    4bee:	f1c4 041f 	rsb	r4, r4, #31
    4bf2:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    4bf4:	2d07      	cmp	r5, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    4bf6:	ea4c 0404 	orr.w	r4, ip, r4
    4bfa:	d90d      	bls.n	4c18 <mpu_configure_regions+0x88>
    4bfc:	4a10      	ldr	r2, [pc, #64]	; (4c40 <mpu_configure_regions+0xb0>)
    4bfe:	4b11      	ldr	r3, [pc, #68]	; (4c44 <mpu_configure_regions+0xb4>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    4c00:	4812      	ldr	r0, [pc, #72]	; (4c4c <mpu_configure_regions+0xbc>)
    4c02:	1ad2      	subs	r2, r2, r3
    4c04:	08d2      	lsrs	r2, r2, #3
    4c06:	0192      	lsls	r2, r2, #6
    4c08:	f042 0201 	orr.w	r2, r2, #1
    4c0c:	4629      	mov	r1, r5
    4c0e:	e7d6      	b.n	4bbe <mpu_configure_regions+0x2e>
		return REGION_32B;
    4c10:	2408      	movs	r4, #8
    4c12:	e7ef      	b.n	4bf4 <mpu_configure_regions+0x64>
		return REGION_4G;
    4c14:	243e      	movs	r4, #62	; 0x3e
    4c16:	e7ed      	b.n	4bf4 <mpu_configure_regions+0x64>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4c18:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    4c1c:	432a      	orrs	r2, r5
    4c1e:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4c22:	f044 0401 	orr.w	r4, r4, #1
    4c26:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4c2a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4c2e:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
		reg_index++;
    4c32:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
    4c34:	3101      	adds	r1, #1
    4c36:	300c      	adds	r0, #12
    4c38:	e7ae      	b.n	4b98 <mpu_configure_regions+0x8>
    4c3a:	bf00      	nop
    4c3c:	e000ed00 	.word	0xe000ed00
    4c40:	00029a78 	.word	0x00029a78
    4c44:	00029870 	.word	0x00029870
    4c48:	0002b2cc 	.word	0x0002b2cc
    4c4c:	0002b2ef 	.word	0x0002b2ef

00004c50 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    4c50:	4b04      	ldr	r3, [pc, #16]	; (4c64 <arm_core_mpu_enable+0x14>)
    4c52:	2205      	movs	r2, #5
    4c54:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    4c58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4c5c:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    4c60:	4770      	bx	lr
    4c62:	bf00      	nop
    4c64:	e000ed00 	.word	0xe000ed00

00004c68 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    4c68:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    4c6c:	4b02      	ldr	r3, [pc, #8]	; (4c78 <arm_core_mpu_disable+0x10>)
    4c6e:	2200      	movs	r2, #0
    4c70:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    4c74:	4770      	bx	lr
    4c76:	bf00      	nop
    4c78:	e000ed00 	.word	0xe000ed00

00004c7c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    4c7c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    4c7e:	4c03      	ldr	r4, [pc, #12]	; (4c8c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    4c80:	2301      	movs	r3, #1
    4c82:	7822      	ldrb	r2, [r4, #0]
    4c84:	f7ff ff84 	bl	4b90 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    4c88:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    4c8a:	bd10      	pop	{r4, pc}
    4c8c:	20003741 	.word	0x20003741

00004c90 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    4c90:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    4c92:	4a09      	ldr	r2, [pc, #36]	; (4cb8 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    4c94:	2300      	movs	r3, #0
    4c96:	7812      	ldrb	r2, [r2, #0]
    4c98:	f7ff ff7a 	bl	4b90 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    4c9c:	f110 0f16 	cmn.w	r0, #22
    4ca0:	d003      	beq.n	4caa <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    4ca2:	4b06      	ldr	r3, [pc, #24]	; (4cbc <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
    4ca4:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    4ca6:	2807      	cmp	r0, #7
    4ca8:	dd00      	ble.n	4cac <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    4caa:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    4cac:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    4cb0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    4cb4:	3001      	adds	r0, #1
    4cb6:	e7f6      	b.n	4ca6 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    4cb8:	20003741 	.word	0x20003741
    4cbc:	e000ed00 	.word	0xe000ed00

00004cc0 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    4cc0:	4914      	ldr	r1, [pc, #80]	; (4d14 <z_arm_mpu_init+0x54>)
    4cc2:	6808      	ldr	r0, [r1, #0]
    4cc4:	2808      	cmp	r0, #8
{
    4cc6:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    4cc8:	d821      	bhi.n	4d0e <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    4cca:	f7ff ffcd 	bl	4c68 <arm_core_mpu_disable>
    4cce:	4c12      	ldr	r4, [pc, #72]	; (4d18 <z_arm_mpu_init+0x58>)
    4cd0:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4cd2:	2200      	movs	r2, #0
    4cd4:	4290      	cmp	r0, r2
    4cd6:	f101 010c 	add.w	r1, r1, #12
    4cda:	d105      	bne.n	4ce8 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    4cdc:	4b0f      	ldr	r3, [pc, #60]	; (4d1c <z_arm_mpu_init+0x5c>)
    4cde:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    4ce0:	f7ff ffb6 	bl	4c50 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    4ce4:	2000      	movs	r0, #0
}
    4ce6:	bd10      	pop	{r4, pc}
    4ce8:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4cec:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    4cf0:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    4cf4:	4313      	orrs	r3, r2
    4cf6:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4cfa:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4cfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
    4d02:	f043 0301 	orr.w	r3, r3, #1
    4d06:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4d0a:	3201      	adds	r2, #1
    4d0c:	e7e2      	b.n	4cd4 <z_arm_mpu_init+0x14>
		return -1;
    4d0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4d12:	e7e8      	b.n	4ce6 <z_arm_mpu_init+0x26>
    4d14:	00029dc0 	.word	0x00029dc0
    4d18:	e000ed00 	.word	0xe000ed00
    4d1c:	20003741 	.word	0x20003741

00004d20 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    4d20:	4b01      	ldr	r3, [pc, #4]	; (4d28 <__stdout_hook_install+0x8>)
    4d22:	6018      	str	r0, [r3, #0]
}
    4d24:	4770      	bx	lr
    4d26:	bf00      	nop
    4d28:	20000760 	.word	0x20000760

00004d2c <nordicsemi_nrf52_init>:
	__asm__ volatile(
    4d2c:	f04f 0320 	mov.w	r3, #32
    4d30:	f3ef 8211 	mrs	r2, BASEPRI
    4d34:	f383 8812 	msr	BASEPRI_MAX, r3
    4d38:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    4d3c:	4906      	ldr	r1, [pc, #24]	; (4d58 <nordicsemi_nrf52_init+0x2c>)
    4d3e:	2301      	movs	r3, #1
    4d40:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    4d44:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    4d48:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    4d4c:	f382 8811 	msr	BASEPRI, r2
    4d50:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    4d54:	2000      	movs	r0, #0
    4d56:	4770      	bx	lr
    4d58:	4001e000 	.word	0x4001e000

00004d5c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    4d5c:	b120      	cbz	r0, 4d68 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    4d5e:	4b03      	ldr	r3, [pc, #12]	; (4d6c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    4d60:	0180      	lsls	r0, r0, #6
    4d62:	f043 0301 	orr.w	r3, r3, #1
    4d66:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    4d68:	4770      	bx	lr
    4d6a:	bf00      	nop
    4d6c:	00029bb0 	.word	0x00029bb0

00004d70 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    4d70:	4b0e      	ldr	r3, [pc, #56]	; (4dac <bt_hex_real+0x3c>)
    4d72:	2940      	cmp	r1, #64	; 0x40
{
    4d74:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
    4d76:	bf28      	it	cs
    4d78:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    4d7a:	4c0d      	ldr	r4, [pc, #52]	; (4db0 <bt_hex_real+0x40>)
    4d7c:	1846      	adds	r6, r0, r1
    4d7e:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
    4d80:	42b0      	cmp	r0, r6
    4d82:	f103 0302 	add.w	r3, r3, #2
    4d86:	d104      	bne.n	4d92 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    4d88:	2300      	movs	r3, #0
    4d8a:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    4d8e:	4807      	ldr	r0, [pc, #28]	; (4dac <bt_hex_real+0x3c>)
    4d90:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    4d92:	7802      	ldrb	r2, [r0, #0]
    4d94:	0912      	lsrs	r2, r2, #4
    4d96:	5ca2      	ldrb	r2, [r4, r2]
    4d98:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    4d9c:	f810 2b01 	ldrb.w	r2, [r0], #1
    4da0:	f002 020f 	and.w	r2, r2, #15
    4da4:	5ca2      	ldrb	r2, [r4, r2]
    4da6:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    4daa:	e7e9      	b.n	4d80 <bt_hex_real+0x10>
    4dac:	20003785 	.word	0x20003785
    4db0:	0002b36d 	.word	0x0002b36d

00004db4 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    4db4:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    4db6:	7803      	ldrb	r3, [r0, #0]
    4db8:	b08b      	sub	sp, #44	; 0x2c
    4dba:	4604      	mov	r4, r0
    4dbc:	ad07      	add	r5, sp, #28
    4dbe:	2b03      	cmp	r3, #3
    4dc0:	d821      	bhi.n	4e06 <bt_addr_le_str_real+0x52>
    4dc2:	e8df f003 	tbb	[pc, r3]
    4dc6:	1a02      	.short	0x1a02
    4dc8:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    4dca:	4912      	ldr	r1, [pc, #72]	; (4e14 <bt_addr_le_str_real+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    4dcc:	4628      	mov	r0, r5
    4dce:	f01e ff91 	bl	23cf4 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    4dd2:	7863      	ldrb	r3, [r4, #1]
    4dd4:	9304      	str	r3, [sp, #16]
    4dd6:	78a3      	ldrb	r3, [r4, #2]
    4dd8:	9303      	str	r3, [sp, #12]
    4dda:	78e3      	ldrb	r3, [r4, #3]
    4ddc:	9302      	str	r3, [sp, #8]
    4dde:	7923      	ldrb	r3, [r4, #4]
    4de0:	9301      	str	r3, [sp, #4]
    4de2:	7963      	ldrb	r3, [r4, #5]
    4de4:	9300      	str	r3, [sp, #0]
    4de6:	4a0c      	ldr	r2, [pc, #48]	; (4e18 <bt_addr_le_str_real+0x64>)
    4de8:	79a3      	ldrb	r3, [r4, #6]
    4dea:	9505      	str	r5, [sp, #20]
    4dec:	211e      	movs	r1, #30
    4dee:	480b      	ldr	r0, [pc, #44]	; (4e1c <bt_addr_le_str_real+0x68>)
    4df0:	f01c fa49 	bl	21286 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    4df4:	4809      	ldr	r0, [pc, #36]	; (4e1c <bt_addr_le_str_real+0x68>)
    4df6:	b00b      	add	sp, #44	; 0x2c
    4df8:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    4dfa:	4909      	ldr	r1, [pc, #36]	; (4e20 <bt_addr_le_str_real+0x6c>)
    4dfc:	e7e6      	b.n	4dcc <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    4dfe:	4909      	ldr	r1, [pc, #36]	; (4e24 <bt_addr_le_str_real+0x70>)
    4e00:	e7e4      	b.n	4dcc <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    4e02:	4909      	ldr	r1, [pc, #36]	; (4e28 <bt_addr_le_str_real+0x74>)
    4e04:	e7e2      	b.n	4dcc <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    4e06:	4a09      	ldr	r2, [pc, #36]	; (4e2c <bt_addr_le_str_real+0x78>)
    4e08:	210a      	movs	r1, #10
    4e0a:	4628      	mov	r0, r5
    4e0c:	f01c fa3b 	bl	21286 <snprintk>
		break;
    4e10:	e7df      	b.n	4dd2 <bt_addr_le_str_real+0x1e>
    4e12:	bf00      	nop
    4e14:	0002b328 	.word	0x0002b328
    4e18:	0002b34a 	.word	0x0002b34a
    4e1c:	20003767 	.word	0x20003767
    4e20:	0002b32f 	.word	0x0002b32f
    4e24:	0002b336 	.word	0x0002b336
    4e28:	0002b340 	.word	0x0002b340
    4e2c:	0002e836 	.word	0x0002e836

00004e30 <bt_uuid_str_real>:

const char *bt_uuid_str_real(const struct bt_uuid *uuid)
{
    4e30:	b510      	push	{r4, lr}
	static char str[BT_UUID_STR_LEN];

	bt_uuid_to_str(uuid, str, sizeof(str));
    4e32:	4c03      	ldr	r4, [pc, #12]	; (4e40 <bt_uuid_str_real+0x10>)
    4e34:	2225      	movs	r2, #37	; 0x25
    4e36:	4621      	mov	r1, r4
    4e38:	f000 fb1a 	bl	5470 <bt_uuid_to_str>

	return str;
}
    4e3c:	4620      	mov	r0, r4
    4e3e:	bd10      	pop	{r4, pc}
    4e40:	20003742 	.word	0x20003742

00004e44 <le_gen_dhkey>:
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
}

static uint8_t le_gen_dhkey(uint8_t *key, uint8_t key_type)
{
    4e44:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4e46:	4c21      	ldr	r4, [pc, #132]	; (4ecc <le_gen_dhkey+0x88>)
    4e48:	f3bf 8f5b 	dmb	ish
    4e4c:	6823      	ldr	r3, [r4, #0]
    4e4e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    4e52:	07da      	lsls	r2, r3, #31
{
    4e54:	4606      	mov	r6, r0
    4e56:	460d      	mov	r5, r1
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    4e58:	d501      	bpl.n	4e5e <le_gen_dhkey+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
    4e5a:	200c      	movs	r0, #12
			  key_type == BT_HCI_LE_KEY_TYPE_DEBUG);

	k_sem_give(&cmd_sem);

	return BT_HCI_ERR_SUCCESS;
}
    4e5c:	bd70      	pop	{r4, r5, r6, pc}
	if (key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
    4e5e:	2901      	cmp	r1, #1
    4e60:	d831      	bhi.n	4ec6 <le_gen_dhkey+0x82>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4e62:	f3bf 8f5b 	dmb	ish
    4e66:	e854 3f00 	ldrex	r3, [r4]
    4e6a:	f043 0202 	orr.w	r2, r3, #2
    4e6e:	e844 2100 	strex	r1, r2, [r4]
    4e72:	2900      	cmp	r1, #0
    4e74:	d1f7      	bne.n	4e66 <le_gen_dhkey+0x22>
    4e76:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
    4e7a:	079b      	lsls	r3, r3, #30
    4e7c:	d4ed      	bmi.n	4e5a <le_gen_dhkey+0x16>
	sys_memcpy_swap(ecc.public_key_be, key, BT_PUB_KEY_COORD_LEN);
    4e7e:	4814      	ldr	r0, [pc, #80]	; (4ed0 <le_gen_dhkey+0x8c>)
    4e80:	4631      	mov	r1, r6
    4e82:	f01e ffea 	bl	23e5a <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.public_key_be[BT_PUB_KEY_COORD_LEN], &key[BT_PUB_KEY_COORD_LEN],
    4e86:	4813      	ldr	r0, [pc, #76]	; (4ed4 <le_gen_dhkey+0x90>)
    4e88:	f106 0120 	add.w	r1, r6, #32
    4e8c:	f01e ffe5 	bl	23e5a <sys_memcpy_swap.constprop.0>
    4e90:	f3bf 8f5b 	dmb	ish
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
    4e94:	b175      	cbz	r5, 4eb4 <le_gen_dhkey+0x70>
    4e96:	e854 3f00 	ldrex	r3, [r4]
    4e9a:	f043 0304 	orr.w	r3, r3, #4
    4e9e:	e844 3200 	strex	r2, r3, [r4]
    4ea2:	2a00      	cmp	r2, #0
    4ea4:	d1f7      	bne.n	4e96 <le_gen_dhkey+0x52>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4ea6:	f3bf 8f5b 	dmb	ish
	z_impl_k_sem_give(sem);
    4eaa:	480b      	ldr	r0, [pc, #44]	; (4ed8 <le_gen_dhkey+0x94>)
    4eac:	f01b f8b2 	bl	20014 <z_impl_k_sem_give>
    4eb0:	2000      	movs	r0, #0
    4eb2:	e7d3      	b.n	4e5c <le_gen_dhkey+0x18>
    4eb4:	e854 3f00 	ldrex	r3, [r4]
    4eb8:	f023 0304 	bic.w	r3, r3, #4
    4ebc:	e844 3200 	strex	r2, r3, [r4]
    4ec0:	2a00      	cmp	r2, #0
    4ec2:	d0f0      	beq.n	4ea6 <le_gen_dhkey+0x62>
    4ec4:	e7f6      	b.n	4eb4 <le_gen_dhkey+0x70>
		return BT_HCI_ERR_INVALID_PARAM;
    4ec6:	2012      	movs	r0, #18
    4ec8:	e7c8      	b.n	4e5c <le_gen_dhkey+0x18>
    4eca:	bf00      	nop
    4ecc:	200020c4 	.word	0x200020c4
    4ed0:	20003826 	.word	0x20003826
    4ed4:	20003846 	.word	0x20003846
    4ed8:	200010f8 	.word	0x200010f8

00004edc <ecc_thread>:
{
    4edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4ee0:	4b6a      	ldr	r3, [pc, #424]	; (508c <ecc_thread+0x1b0>)
    4ee2:	4d6b      	ldr	r5, [pc, #428]	; (5090 <ecc_thread+0x1b4>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4ee4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 5094 <ecc_thread+0x1b8>
	return z_impl_k_sem_take(sem, timeout);
    4ee8:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 5098 <ecc_thread+0x1bc>
    4eec:	1aed      	subs	r5, r5, r3
    4eee:	08ed      	lsrs	r5, r5, #3
    4ef0:	4647      	mov	r7, r8
    4ef2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4ef6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4efa:	4648      	mov	r0, r9
    4efc:	f01b f8b0 	bl	20060 <z_impl_k_sem_take>
    4f00:	f3bf 8f5b 	dmb	ish
    4f04:	f8d8 4000 	ldr.w	r4, [r8]
    4f08:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    4f0c:	f014 0401 	ands.w	r4, r4, #1
    4f10:	d05a      	beq.n	4fc8 <ecc_thread+0xec>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    4f12:	f8df a188 	ldr.w	sl, [pc, #392]	; 509c <ecc_thread+0x1c0>
    4f16:	4c62      	ldr	r4, [pc, #392]	; (50a0 <ecc_thread+0x1c4>)
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
    4f18:	4e62      	ldr	r6, [pc, #392]	; (50a4 <ecc_thread+0x1c8>)
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    4f1a:	4863      	ldr	r0, [pc, #396]	; (50a8 <ecc_thread+0x1cc>)
    4f1c:	4652      	mov	r2, sl
    4f1e:	4621      	mov	r1, r4
    4f20:	f01d fcf2 	bl	22908 <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
    4f24:	bbe8      	cbnz	r0, 4fa2 <ecc_thread+0xc6>
			BT_ERR("Failed to create ECC public/private pair");
    4f26:	01a9      	lsls	r1, r5, #6
    4f28:	4860      	ldr	r0, [pc, #384]	; (50ac <ecc_thread+0x1d0>)
    4f2a:	f041 0101 	orr.w	r1, r1, #1
    4f2e:	f01c fddc 	bl	21aea <log_0>
			return BT_HCI_ERR_UNSPECIFIED;
    4f32:	f04f 0a1f 	mov.w	sl, #31
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    4f36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4f3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4f3e:	2001      	movs	r0, #1
    4f40:	f000 faf4 	bl	552c <bt_buf_get_rx>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
    4f44:	f100 0608 	add.w	r6, r0, #8
    4f48:	2102      	movs	r1, #2
    4f4a:	4604      	mov	r4, r0
    4f4c:	4630      	mov	r0, r6
    4f4e:	f023 f97b 	bl	28248 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    4f52:	233e      	movs	r3, #62	; 0x3e
    4f54:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    4f56:	2342      	movs	r3, #66	; 0x42
    4f58:	7043      	strb	r3, [r0, #1]
    4f5a:	2101      	movs	r1, #1
    4f5c:	4630      	mov	r0, r6
    4f5e:	f023 f973 	bl	28248 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
    4f62:	2308      	movs	r3, #8
    4f64:	7003      	strb	r3, [r0, #0]
    4f66:	2141      	movs	r1, #65	; 0x41
    4f68:	4630      	mov	r0, r6
    4f6a:	f023 f96d 	bl	28248 <net_buf_simple_add>
    4f6e:	4606      	mov	r6, r0
	evt->status = status;
    4f70:	f800 ab01 	strb.w	sl, [r0], #1
	if (status) {
    4f74:	f1ba 0f00 	cmp.w	sl, #0
    4f78:	d01d      	beq.n	4fb6 <ecc_thread+0xda>
		(void)memset(evt->key, 0, sizeof(evt->key));
    4f7a:	2240      	movs	r2, #64	; 0x40
    4f7c:	2100      	movs	r1, #0
    4f7e:	f01e ff1e 	bl	23dbe <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4f82:	f3bf 8f5b 	dmb	ish
    4f86:	e857 3f00 	ldrex	r3, [r7]
    4f8a:	f023 0301 	bic.w	r3, r3, #1
    4f8e:	e847 3200 	strex	r2, r3, [r7]
    4f92:	2a00      	cmp	r2, #0
    4f94:	d1f7      	bne.n	4f86 <ecc_thread+0xaa>
    4f96:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    4f9a:	4620      	mov	r0, r4
	bt_recv(buf);
    4f9c:	f001 f9ea 	bl	6374 <bt_recv>
	while (true) {
    4fa0:	e7a7      	b.n	4ef2 <ecc_thread+0x16>
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
    4fa2:	2220      	movs	r2, #32
    4fa4:	4631      	mov	r1, r6
    4fa6:	4620      	mov	r0, r4
    4fa8:	f01e feed 	bl	23d86 <memcmp>
    4fac:	2800      	cmp	r0, #0
    4fae:	d0b4      	beq.n	4f1a <ecc_thread+0x3e>
	return 0;
    4fb0:	f04f 0a00 	mov.w	sl, #0
    4fb4:	e7bf      	b.n	4f36 <ecc_thread+0x5a>
		sys_memcpy_swap(evt->key, ecc.public_key_be, BT_PUB_KEY_COORD_LEN);
    4fb6:	493c      	ldr	r1, [pc, #240]	; (50a8 <ecc_thread+0x1cc>)
    4fb8:	f01e ff4f 	bl	23e5a <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[BT_PUB_KEY_COORD_LEN],
    4fbc:	3120      	adds	r1, #32
    4fbe:	f106 0021 	add.w	r0, r6, #33	; 0x21
    4fc2:	f01e ff4a 	bl	23e5a <sys_memcpy_swap.constprop.0>
    4fc6:	e7dc      	b.n	4f82 <ecc_thread+0xa6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4fc8:	f3bf 8f5b 	dmb	ish
    4fcc:	f8d8 3000 	ldr.w	r3, [r8]
    4fd0:	f3bf 8f5b 	dmb	ish
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
    4fd4:	079b      	lsls	r3, r3, #30
    4fd6:	d58c      	bpl.n	4ef2 <ecc_thread+0x16>
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
    4fd8:	4930      	ldr	r1, [pc, #192]	; (509c <ecc_thread+0x1c0>)
    4fda:	4833      	ldr	r0, [pc, #204]	; (50a8 <ecc_thread+0x1cc>)
    4fdc:	f01e fb59 	bl	23692 <uECC_valid_public_key>
	if (ret < 0) {
    4fe0:	1e01      	subs	r1, r0, #0
    4fe2:	da38      	bge.n	5056 <ecc_thread+0x17a>
		BT_ERR("public key is not valid (ret %d)", ret);
    4fe4:	01aa      	lsls	r2, r5, #6
    4fe6:	4832      	ldr	r0, [pc, #200]	; (50b0 <ecc_thread+0x1d4>)
    4fe8:	f042 0201 	orr.w	r2, r2, #1
    4fec:	f01c fd8a 	bl	21b04 <log_1>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    4ff0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4ff4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4ff8:	2001      	movs	r0, #1
    4ffa:	f000 fa97 	bl	552c <bt_buf_get_rx>
    4ffe:	f100 0a08 	add.w	sl, r0, #8
    5002:	2102      	movs	r1, #2
    5004:	4606      	mov	r6, r0
    5006:	4650      	mov	r0, sl
    5008:	f023 f91e 	bl	28248 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    500c:	233e      	movs	r3, #62	; 0x3e
    500e:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    5010:	2322      	movs	r3, #34	; 0x22
    5012:	7043      	strb	r3, [r0, #1]
    5014:	2101      	movs	r1, #1
    5016:	4650      	mov	r0, sl
    5018:	f023 f916 	bl	28248 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
    501c:	2309      	movs	r3, #9
    501e:	7003      	strb	r3, [r0, #0]
    5020:	2121      	movs	r1, #33	; 0x21
    5022:	4650      	mov	r0, sl
    5024:	f023 f910 	bl	28248 <net_buf_simple_add>
    5028:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
    502a:	3001      	adds	r0, #1
    502c:	bb3c      	cbnz	r4, 507e <ecc_thread+0x1a2>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
    502e:	221f      	movs	r2, #31
    5030:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
    5032:	21ff      	movs	r1, #255	; 0xff
    5034:	2220      	movs	r2, #32
    5036:	f01e fec2 	bl	23dbe <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    503a:	f3bf 8f5b 	dmb	ish
    503e:	e857 3f00 	ldrex	r3, [r7]
    5042:	f023 0302 	bic.w	r3, r3, #2
    5046:	e847 3200 	strex	r2, r3, [r7]
    504a:	2a00      	cmp	r2, #0
    504c:	d1f7      	bne.n	503e <ecc_thread+0x162>
    504e:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    5052:	4630      	mov	r0, r6
    5054:	e7a2      	b.n	4f9c <ecc_thread+0xc0>
		ret = uECC_shared_secret(ecc.public_key_be,
    5056:	4912      	ldr	r1, [pc, #72]	; (50a0 <ecc_thread+0x1c4>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5058:	f3bf 8f5b 	dmb	ish
    505c:	f8d8 3000 	ldr.w	r3, [r8]
    5060:	4810      	ldr	r0, [pc, #64]	; (50a4 <ecc_thread+0x1c8>)
    5062:	f3bf 8f5b 	dmb	ish
    5066:	f013 0f04 	tst.w	r3, #4
    506a:	f101 0220 	add.w	r2, r1, #32
    506e:	4b0b      	ldr	r3, [pc, #44]	; (509c <ecc_thread+0x1c0>)
    5070:	bf18      	it	ne
    5072:	4601      	movne	r1, r0
    5074:	4610      	mov	r0, r2
    5076:	f01d fc96 	bl	229a6 <uECC_shared_secret>
    507a:	4604      	mov	r4, r0
    507c:	e7b8      	b.n	4ff0 <ecc_thread+0x114>
		evt->status = 0U;
    507e:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
    5080:	4909      	ldr	r1, [pc, #36]	; (50a8 <ecc_thread+0x1cc>)
		evt->status = 0U;
    5082:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
    5084:	f01e fee9 	bl	23e5a <sys_memcpy_swap.constprop.0>
    5088:	e7d7      	b.n	503a <ecc_thread+0x15e>
    508a:	bf00      	nop
    508c:	00029870 	.word	0x00029870
    5090:	00029968 	.word	0x00029968
    5094:	200020c4 	.word	0x200020c4
    5098:	200010f8 	.word	0x200010f8
    509c:	00029de0 	.word	0x00029de0
    50a0:	20003806 	.word	0x20003806
    50a4:	0002b3da 	.word	0x0002b3da
    50a8:	20003826 	.word	0x20003826
    50ac:	0002b37e 	.word	0x0002b37e
    50b0:	0002b3a7 	.word	0x0002b3a7

000050b4 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
    50b4:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    50b6:	7d06      	ldrb	r6, [r0, #20]
    50b8:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
    50ba:	b976      	cbnz	r6, 50da <bt_hci_ecc_send+0x26>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
    50bc:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
    50be:	881d      	ldrh	r5, [r3, #0]
    50c0:	f242 0226 	movw	r2, #8230	; 0x2026
    50c4:	4295      	cmp	r5, r2
    50c6:	d045      	beq.n	5154 <bt_hci_ecc_send+0xa0>
    50c8:	d80f      	bhi.n	50ea <bt_hci_ecc_send+0x36>
    50ca:	f242 0201 	movw	r2, #8193	; 0x2001
    50ce:	4295      	cmp	r5, r2
    50d0:	d04f      	beq.n	5172 <bt_hci_ecc_send+0xbe>
    50d2:	f242 0325 	movw	r3, #8229	; 0x2025
    50d6:	429d      	cmp	r5, r3
    50d8:	d013      	beq.n	5102 <bt_hci_ecc_send+0x4e>
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
    50da:	4b2a      	ldr	r3, [pc, #168]	; (5184 <bt_hci_ecc_send+0xd0>)
    50dc:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
    50e0:	4620      	mov	r0, r4
    50e2:	691b      	ldr	r3, [r3, #16]
}
    50e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
    50e8:	4718      	bx	r3
		switch (sys_le16_to_cpu(chdr->opcode)) {
    50ea:	f242 035e 	movw	r3, #8286	; 0x205e
    50ee:	429d      	cmp	r5, r3
    50f0:	d1f3      	bne.n	50da <bt_hci_ecc_send+0x26>
 *
 * @return New beginning of the buffer data.
 */
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull(&buf->b, len);
    50f2:	2103      	movs	r1, #3
    50f4:	3008      	adds	r0, #8
    50f6:	f023 f917 	bl	28328 <net_buf_simple_pull>
	cmd = (void *)buf->data;
    50fa:	68a0      	ldr	r0, [r4, #8]
	status = le_gen_dhkey(cmd->key, cmd->key_type);
    50fc:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    5100:	e02e      	b.n	5160 <bt_hci_ecc_send+0xac>
    5102:	2103      	movs	r1, #3
    5104:	3008      	adds	r0, #8
    5106:	f023 f90f 	bl	28328 <net_buf_simple_pull>
	net_buf_unref(buf);
    510a:	4620      	mov	r0, r4
    510c:	f018 fe2a 	bl	1dd64 <net_buf_unref>
    5110:	f3bf 8f5b 	dmb	ish
    5114:	4b1c      	ldr	r3, [pc, #112]	; (5188 <bt_hci_ecc_send+0xd4>)
    5116:	681a      	ldr	r2, [r3, #0]
    5118:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
    511c:	0792      	lsls	r2, r2, #30
    511e:	d507      	bpl.n	5130 <bt_hci_ecc_send+0x7c>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    5120:	260c      	movs	r6, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
    5122:	4631      	mov	r1, r6
    5124:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
    5128:	f01e fe73 	bl	23e12 <send_cmd_status>
}
    512c:	2000      	movs	r0, #0
    512e:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5130:	f3bf 8f5b 	dmb	ish
    5134:	e853 2f00 	ldrex	r2, [r3]
    5138:	f042 0101 	orr.w	r1, r2, #1
    513c:	e843 1000 	strex	r0, r1, [r3]
    5140:	2800      	cmp	r0, #0
    5142:	d1f7      	bne.n	5134 <bt_hci_ecc_send+0x80>
    5144:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
    5148:	07d3      	lsls	r3, r2, #31
    514a:	d4e9      	bmi.n	5120 <bt_hci_ecc_send+0x6c>
	z_impl_k_sem_give(sem);
    514c:	480f      	ldr	r0, [pc, #60]	; (518c <bt_hci_ecc_send+0xd8>)
    514e:	f01a ff61 	bl	20014 <z_impl_k_sem_give>
}
    5152:	e7e6      	b.n	5122 <bt_hci_ecc_send+0x6e>
    5154:	2103      	movs	r1, #3
    5156:	3008      	adds	r0, #8
    5158:	f023 f8e6 	bl	28328 <net_buf_simple_pull>
	status = le_gen_dhkey(cmd->key, BT_HCI_LE_KEY_TYPE_GENERATED);
    515c:	68a0      	ldr	r0, [r4, #8]
    515e:	4631      	mov	r1, r6
	status = le_gen_dhkey(cmd->key, cmd->key_type);
    5160:	f7ff fe70 	bl	4e44 <le_gen_dhkey>
    5164:	4606      	mov	r6, r0
	net_buf_unref(buf);
    5166:	4620      	mov	r0, r4
    5168:	f018 fdfc 	bl	1dd64 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
    516c:	4631      	mov	r1, r6
    516e:	4628      	mov	r0, r5
    5170:	e7da      	b.n	5128 <bt_hci_ecc_send+0x74>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
    5172:	78da      	ldrb	r2, [r3, #3]
    5174:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    5178:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
    517a:	791a      	ldrb	r2, [r3, #4]
    517c:	f022 0201 	bic.w	r2, r2, #1
    5180:	711a      	strb	r2, [r3, #4]
}
    5182:	e7aa      	b.n	50da <bt_hci_ecc_send+0x26>
    5184:	20000288 	.word	0x20000288
    5188:	200020c4 	.word	0x200020c4
    518c:	200010f8 	.word	0x200010f8

00005190 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
    5190:	b510      	push	{r4, lr}
    5192:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    5194:	4c0c      	ldr	r4, [pc, #48]	; (51c8 <bt_hci_ecc_init+0x38>)
    5196:	490d      	ldr	r1, [pc, #52]	; (51cc <bt_hci_ecc_init+0x3c>)
    5198:	2200      	movs	r2, #0
    519a:	2300      	movs	r3, #0
    519c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    51a0:	2300      	movs	r3, #0
    51a2:	220a      	movs	r2, #10
    51a4:	e9cd 2303 	strd	r2, r3, [sp, #12]
    51a8:	e9cd 3301 	strd	r3, r3, [sp, #4]
    51ac:	9300      	str	r3, [sp, #0]
    51ae:	f44f 628f 	mov.w	r2, #1144	; 0x478
    51b2:	4b07      	ldr	r3, [pc, #28]	; (51d0 <bt_hci_ecc_init+0x40>)
    51b4:	4620      	mov	r0, r4
    51b6:	f01a fda1 	bl	1fcfc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    51ba:	4906      	ldr	r1, [pc, #24]	; (51d4 <bt_hci_ecc_init+0x44>)
    51bc:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
    51be:	b008      	add	sp, #32
    51c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    51c4:	f023 bc3d 	b.w	28a42 <z_impl_k_thread_name_set>
    51c8:	20001440 	.word	0x20001440
    51cc:	20004040 	.word	0x20004040
    51d0:	00004edd 	.word	0x00004edd
    51d4:	0002b3c8 	.word	0x0002b3c8

000051d8 <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
    51d8:	b510      	push	{r4, lr}
    51da:	4b0d      	ldr	r3, [pc, #52]	; (5210 <save_id+0x38>)
    51dc:	4c0d      	ldr	r4, [pc, #52]	; (5214 <save_id+0x3c>)
	int err;
	BT_INFO("Saving ID");
    51de:	480e      	ldr	r0, [pc, #56]	; (5218 <save_id+0x40>)
    51e0:	1ae4      	subs	r4, r4, r3
    51e2:	08e4      	lsrs	r4, r4, #3
    51e4:	01a4      	lsls	r4, r4, #6
    51e6:	f044 0103 	orr.w	r1, r4, #3
    51ea:	f01c fc7e 	bl	21aea <log_0>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
    51ee:	490b      	ldr	r1, [pc, #44]	; (521c <save_id+0x44>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
    51f0:	480b      	ldr	r0, [pc, #44]	; (5220 <save_id+0x48>)
    51f2:	79ca      	ldrb	r2, [r1, #7]
    51f4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    51f8:	f7fe fcc0 	bl	3b7c <settings_save_one>
	if (err) {
    51fc:	4601      	mov	r1, r0
    51fe:	b130      	cbz	r0, 520e <save_id+0x36>
		BT_ERR("Failed to save ID (err %d)", err);
    5200:	f044 0201 	orr.w	r2, r4, #1
    5204:	4807      	ldr	r0, [pc, #28]	; (5224 <save_id+0x4c>)
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		BT_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
    5206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Failed to save ID (err %d)", err);
    520a:	f01c bc7b 	b.w	21b04 <log_1>
}
    520e:	bd10      	pop	{r4, pc}
    5210:	00029870 	.word	0x00029870
    5214:	00029a48 	.word	0x00029a48
    5218:	0002b3fa 	.word	0x0002b3fa
    521c:	20000288 	.word	0x20000288
    5220:	0002b404 	.word	0x0002b404
    5224:	0002b40a 	.word	0x0002b40a

00005228 <set>:
{
    5228:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    522a:	4616      	mov	r6, r2
    522c:	461f      	mov	r7, r3
	if (!name) {
    522e:	4604      	mov	r4, r0
    5230:	b960      	cbnz	r0, 524c <set+0x24>
    5232:	4925      	ldr	r1, [pc, #148]	; (52c8 <set+0xa0>)
    5234:	4b25      	ldr	r3, [pc, #148]	; (52cc <set+0xa4>)
		BT_ERR("Insufficient number of arguments");
    5236:	4826      	ldr	r0, [pc, #152]	; (52d0 <set+0xa8>)
    5238:	1ac9      	subs	r1, r1, r3
    523a:	08c9      	lsrs	r1, r1, #3
    523c:	0189      	lsls	r1, r1, #6
    523e:	f041 0101 	orr.w	r1, r1, #1
    5242:	f01c fc52 	bl	21aea <log_0>
	return -ENOENT;
    5246:	f06f 0401 	mvn.w	r4, #1
    524a:	e01c      	b.n	5286 <set+0x5e>
	len = settings_name_next(name, &next);
    524c:	a901      	add	r1, sp, #4
    524e:	f01d fa73 	bl	22738 <settings_name_next>
	if (!strncmp(name, "id", len)) {
    5252:	4920      	ldr	r1, [pc, #128]	; (52d4 <set+0xac>)
	len = settings_name_next(name, &next);
    5254:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
    5256:	4620      	mov	r0, r4
    5258:	f01e fd84 	bl	23d64 <strncmp>
    525c:	4604      	mov	r4, r0
    525e:	2800      	cmp	r0, #0
    5260:	d1f1      	bne.n	5246 <set+0x1e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5262:	f3bf 8f5b 	dmb	ish
    5266:	4d1c      	ldr	r5, [pc, #112]	; (52d8 <set+0xb0>)
    5268:	682b      	ldr	r3, [r5, #0]
    526a:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
    526e:	075b      	lsls	r3, r3, #29
    5270:	d50c      	bpl.n	528c <set+0x64>
    5272:	4915      	ldr	r1, [pc, #84]	; (52c8 <set+0xa0>)
    5274:	4b15      	ldr	r3, [pc, #84]	; (52cc <set+0xa4>)
			BT_WARN("Ignoring identities stored in flash");
    5276:	4819      	ldr	r0, [pc, #100]	; (52dc <set+0xb4>)
    5278:	1ac9      	subs	r1, r1, r3
    527a:	08c9      	lsrs	r1, r1, #3
    527c:	0189      	lsls	r1, r1, #6
    527e:	f041 0102 	orr.w	r1, r1, #2
    5282:	f01c fc32 	bl	21aea <log_0>
}
    5286:	4620      	mov	r0, r4
    5288:	b003      	add	sp, #12
    528a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
    528c:	3dcc      	subs	r5, #204	; 0xcc
    528e:	2207      	movs	r2, #7
    5290:	4629      	mov	r1, r5
    5292:	4638      	mov	r0, r7
    5294:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
    5296:	2806      	cmp	r0, #6
    5298:	d810      	bhi.n	52bc <set+0x94>
    529a:	4b0c      	ldr	r3, [pc, #48]	; (52cc <set+0xa4>)
    529c:	490a      	ldr	r1, [pc, #40]	; (52c8 <set+0xa0>)
				BT_ERR("Invalid length ID address in storage");
    529e:	4810      	ldr	r0, [pc, #64]	; (52e0 <set+0xb8>)
    52a0:	1ac9      	subs	r1, r1, r3
    52a2:	08c9      	lsrs	r1, r1, #3
    52a4:	0189      	lsls	r1, r1, #6
    52a6:	f041 0101 	orr.w	r1, r1, #1
    52aa:	f01c fc1e 	bl	21aea <log_0>
			(void)memset(bt_dev.id_addr, 0,
    52ae:	2207      	movs	r2, #7
    52b0:	4621      	mov	r1, r4
    52b2:	4628      	mov	r0, r5
    52b4:	f01e fd83 	bl	23dbe <memset>
			bt_dev.id_count = 0U;
    52b8:	71ec      	strb	r4, [r5, #7]
    52ba:	e7e4      	b.n	5286 <set+0x5e>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
    52bc:	2307      	movs	r3, #7
    52be:	fbb0 f0f3 	udiv	r0, r0, r3
    52c2:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
    52c4:	e7df      	b.n	5286 <set+0x5e>
    52c6:	bf00      	nop
    52c8:	00029a48 	.word	0x00029a48
    52cc:	00029870 	.word	0x00029870
    52d0:	0002b425 	.word	0x0002b425
    52d4:	0002b33d 	.word	0x0002b33d
    52d8:	20000354 	.word	0x20000354
    52dc:	0002b446 	.word	0x0002b446
    52e0:	0002b46a 	.word	0x0002b46a

000052e4 <bt_settings_encode_key>:
{
    52e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    52e8:	b088      	sub	sp, #32
		snprintk(path, path_size,
    52ea:	799c      	ldrb	r4, [r3, #6]
{
    52ec:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
    52f0:	795d      	ldrb	r5, [r3, #5]
    52f2:	791e      	ldrb	r6, [r3, #4]
    52f4:	78df      	ldrb	r7, [r3, #3]
    52f6:	f893 c002 	ldrb.w	ip, [r3, #2]
    52fa:	f893 e001 	ldrb.w	lr, [r3, #1]
    52fe:	781b      	ldrb	r3, [r3, #0]
	if (key) {
    5300:	f1b8 0f00 	cmp.w	r8, #0
    5304:	d00e      	beq.n	5324 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
    5306:	e9cd 3806 	strd	r3, r8, [sp, #24]
    530a:	e9cd ce04 	strd	ip, lr, [sp, #16]
    530e:	4613      	mov	r3, r2
    5310:	e9cd 6702 	strd	r6, r7, [sp, #8]
    5314:	e9cd 4500 	strd	r4, r5, [sp]
    5318:	4a08      	ldr	r2, [pc, #32]	; (533c <bt_settings_encode_key+0x58>)
    531a:	f01b ffb4 	bl	21286 <snprintk>
}
    531e:	b008      	add	sp, #32
    5320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
    5324:	e9cd e305 	strd	lr, r3, [sp, #20]
    5328:	e9cd 7c03 	strd	r7, ip, [sp, #12]
    532c:	4613      	mov	r3, r2
    532e:	e9cd 5601 	strd	r5, r6, [sp, #4]
    5332:	4a03      	ldr	r2, [pc, #12]	; (5340 <bt_settings_encode_key+0x5c>)
    5334:	9400      	str	r4, [sp, #0]
    5336:	f01b ffa6 	bl	21286 <snprintk>
}
    533a:	e7f0      	b.n	531e <bt_settings_encode_key+0x3a>
    533c:	0002b48f 	.word	0x0002b48f
    5340:	0002b4b3 	.word	0x0002b4b3

00005344 <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
    5344:	4801      	ldr	r0, [pc, #4]	; (534c <bt_settings_save_id+0x8>)
    5346:	f01a bfd1 	b.w	202ec <k_work_submit>
    534a:	bf00      	nop
    534c:	20000764 	.word	0x20000764

00005350 <commit>:
}

static int commit(void)
{
    5350:	b538      	push	{r3, r4, r5, lr}
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
    5352:	4d1b      	ldr	r5, [pc, #108]	; (53c0 <commit+0x70>)
    5354:	79eb      	ldrb	r3, [r5, #7]
    5356:	b9b3      	cbnz	r3, 5386 <commit+0x36>
		err = bt_setup_public_id_addr();
    5358:	f001 fd44 	bl	6de4 <bt_setup_public_id_addr>
		if (err) {
    535c:	4604      	mov	r4, r0
    535e:	b158      	cbz	r0, 5378 <commit+0x28>
    5360:	4918      	ldr	r1, [pc, #96]	; (53c4 <commit+0x74>)
    5362:	4b19      	ldr	r3, [pc, #100]	; (53c8 <commit+0x78>)
	}

	if (!bt_dev.id_count) {
		err = bt_setup_random_id_addr();
		if (err) {
			BT_ERR("Unable to setup an identity address");
    5364:	4819      	ldr	r0, [pc, #100]	; (53cc <commit+0x7c>)
    5366:	1ac9      	subs	r1, r1, r3
    5368:	08c9      	lsrs	r1, r1, #3
    536a:	0189      	lsls	r1, r1, #6
    536c:	f041 0101 	orr.w	r1, r1, #1
    5370:	f01c fbbb 	bl	21aea <log_0>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
    5374:	4620      	mov	r0, r4
    5376:	bd38      	pop	{r3, r4, r5, pc}
	if (!bt_dev.id_count) {
    5378:	79eb      	ldrb	r3, [r5, #7]
    537a:	b923      	cbnz	r3, 5386 <commit+0x36>
		err = bt_setup_random_id_addr();
    537c:	f001 fd9c 	bl	6eb8 <bt_setup_random_id_addr>
		if (err) {
    5380:	4604      	mov	r4, r0
    5382:	2800      	cmp	r0, #0
    5384:	d1ec      	bne.n	5360 <commit+0x10>
    5386:	f3bf 8f5b 	dmb	ish
    538a:	4d11      	ldr	r5, [pc, #68]	; (53d0 <commit+0x80>)
    538c:	682b      	ldr	r3, [r5, #0]
    538e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    5392:	079b      	lsls	r3, r3, #30
    5394:	d401      	bmi.n	539a <commit+0x4a>
		bt_finalize_init();
    5396:	f001 f8c3 	bl	6520 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    539a:	f3bf 8f5b 	dmb	ish
    539e:	e855 4f00 	ldrex	r4, [r5]
    53a2:	f424 4380 	bic.w	r3, r4, #16384	; 0x4000
    53a6:	e845 3200 	strex	r2, r3, [r5]
    53aa:	2a00      	cmp	r2, #0
    53ac:	d1f7      	bne.n	539e <commit+0x4e>
    53ae:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
    53b2:	f414 4480 	ands.w	r4, r4, #16384	; 0x4000
    53b6:	d0dd      	beq.n	5374 <commit+0x24>
		bt_settings_save_id();
    53b8:	f7ff ffc4 	bl	5344 <bt_settings_save_id>
	return 0;
    53bc:	2400      	movs	r4, #0
    53be:	e7d9      	b.n	5374 <commit+0x24>
    53c0:	20000288 	.word	0x20000288
    53c4:	00029a48 	.word	0x00029a48
    53c8:	00029870 	.word	0x00029870
    53cc:	0002b4d4 	.word	0x0002b4d4
    53d0:	20000354 	.word	0x20000354

000053d4 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
    53d4:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
    53d6:	f7fe fd35 	bl	3e44 <settings_subsys_init>
	if (err) {
    53da:	4604      	mov	r4, r0
    53dc:	b150      	cbz	r0, 53f4 <bt_settings_init+0x20>
    53de:	4a06      	ldr	r2, [pc, #24]	; (53f8 <bt_settings_init+0x24>)
    53e0:	4b06      	ldr	r3, [pc, #24]	; (53fc <bt_settings_init+0x28>)
    53e2:	1ad2      	subs	r2, r2, r3
    53e4:	08d2      	lsrs	r2, r2, #3
		BT_ERR("settings_subsys_init failed (err %d)", err);
    53e6:	0192      	lsls	r2, r2, #6
    53e8:	4601      	mov	r1, r0
    53ea:	f042 0201 	orr.w	r2, r2, #1
    53ee:	4804      	ldr	r0, [pc, #16]	; (5400 <bt_settings_init+0x2c>)
    53f0:	f01c fb88 	bl	21b04 <log_1>
		return err;
	}

	return 0;
}
    53f4:	4620      	mov	r0, r4
    53f6:	bd10      	pop	{r4, pc}
    53f8:	00029a48 	.word	0x00029a48
    53fc:	00029870 	.word	0x00029870
    5400:	0002b4f8 	.word	0x0002b4f8

00005404 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    5404:	b430      	push	{r4, r5}
    5406:	4603      	mov	r3, r0
    5408:	4608      	mov	r0, r1
	switch (src->type) {
    540a:	781a      	ldrb	r2, [r3, #0]
    540c:	2a01      	cmp	r2, #1
    540e:	d013      	beq.n	5438 <uuid_to_uuid128+0x34>
    5410:	2a02      	cmp	r2, #2
    5412:	d026      	beq.n	5462 <uuid_to_uuid128+0x5e>
    5414:	b972      	cbnz	r2, 5434 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    5416:	4a15      	ldr	r2, [pc, #84]	; (546c <uuid_to_uuid128+0x68>)
    5418:	f102 0410 	add.w	r4, r2, #16
    541c:	f852 5b04 	ldr.w	r5, [r2], #4
    5420:	f841 5b04 	str.w	r5, [r1], #4
    5424:	42a2      	cmp	r2, r4
    5426:	d1f9      	bne.n	541c <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
    5428:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
    542a:	7812      	ldrb	r2, [r2, #0]
    542c:	700a      	strb	r2, [r1, #0]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    542e:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    5430:	0a1b      	lsrs	r3, r3, #8
    5432:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    5434:	bc30      	pop	{r4, r5}
    5436:	4770      	bx	lr
		*dst = uuid128_base;
    5438:	4a0c      	ldr	r2, [pc, #48]	; (546c <uuid_to_uuid128+0x68>)
    543a:	f102 0410 	add.w	r4, r2, #16
    543e:	f852 5b04 	ldr.w	r5, [r2], #4
    5442:	f841 5b04 	str.w	r5, [r1], #4
    5446:	42a2      	cmp	r2, r4
    5448:	d1f9      	bne.n	543e <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
    544a:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
    544c:	7812      	ldrb	r2, [r2, #0]
    544e:	700a      	strb	r2, [r1, #0]
    5450:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    5454:	7343      	strb	r3, [r0, #13]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    5456:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    5458:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    545a:	0a1b      	lsrs	r3, r3, #8
    545c:	7382      	strb	r2, [r0, #14]
    545e:	7403      	strb	r3, [r0, #16]
}
    5460:	e7e8      	b.n	5434 <uuid_to_uuid128+0x30>
}
    5462:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
    5464:	2211      	movs	r2, #17
    5466:	4619      	mov	r1, r3
    5468:	f01e bc9e 	b.w	23da8 <memcpy>
    546c:	0002b554 	.word	0x0002b554

00005470 <bt_uuid_to_str>:
	}
	return true;
}

void bt_uuid_to_str(const struct bt_uuid *uuid, char *str, size_t len)
{
    5470:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t tmp1, tmp5;
	uint16_t tmp0, tmp2, tmp3, tmp4;

	switch (uuid->type) {
    5472:	7805      	ldrb	r5, [r0, #0]
    5474:	2d01      	cmp	r5, #1
{
    5476:	b08b      	sub	sp, #44	; 0x2c
    5478:	4604      	mov	r4, r0
    547a:	460e      	mov	r6, r1
    547c:	4617      	mov	r7, r2
	switch (uuid->type) {
    547e:	d00c      	beq.n	549a <bt_uuid_to_str+0x2a>
    5480:	2d02      	cmp	r5, #2
    5482:	d00d      	beq.n	54a0 <bt_uuid_to_str+0x30>
    5484:	2d00      	cmp	r5, #0
    5486:	d144      	bne.n	5512 <bt_uuid_to_str+0xa2>
	case BT_UUID_TYPE_16:
		snprintk(str, len, "%04x", BT_UUID_16(uuid)->val);
    5488:	8843      	ldrh	r3, [r0, #2]
    548a:	4a25      	ldr	r2, [pc, #148]	; (5520 <bt_uuid_to_str+0xb0>)
		break;
	case BT_UUID_TYPE_32:
		snprintk(str, len, "%08x", BT_UUID_32(uuid)->val);
    548c:	4639      	mov	r1, r7
    548e:	4630      	mov	r0, r6
		break;
	default:
		(void)memset(str, 0, len);
		return;
	}
}
    5490:	b00b      	add	sp, #44	; 0x2c
    5492:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		snprintk(str, len, "%08x", BT_UUID_32(uuid)->val);
    5496:	f01b bef6 	b.w	21286 <snprintk>
    549a:	6843      	ldr	r3, [r0, #4]
    549c:	4a21      	ldr	r2, [pc, #132]	; (5524 <bt_uuid_to_str+0xb4>)
    549e:	e7f5      	b.n	548c <bt_uuid_to_str+0x1c>
		memcpy(&tmp0, &BT_UUID_128(uuid)->val[0], sizeof(tmp0));
    54a0:	462a      	mov	r2, r5
    54a2:	1c41      	adds	r1, r0, #1
    54a4:	a806      	add	r0, sp, #24
    54a6:	f01e fc7f 	bl	23da8 <memcpy>
		memcpy(&tmp1, &BT_UUID_128(uuid)->val[2], sizeof(tmp1));
    54aa:	1ce1      	adds	r1, r4, #3
    54ac:	2204      	movs	r2, #4
    54ae:	a808      	add	r0, sp, #32
    54b0:	f01e fc7a 	bl	23da8 <memcpy>
		memcpy(&tmp2, &BT_UUID_128(uuid)->val[6], sizeof(tmp2));
    54b4:	462a      	mov	r2, r5
    54b6:	1de1      	adds	r1, r4, #7
    54b8:	f10d 001a 	add.w	r0, sp, #26
    54bc:	f01e fc74 	bl	23da8 <memcpy>
		memcpy(&tmp3, &BT_UUID_128(uuid)->val[8], sizeof(tmp3));
    54c0:	462a      	mov	r2, r5
    54c2:	f104 0109 	add.w	r1, r4, #9
    54c6:	a807      	add	r0, sp, #28
    54c8:	f01e fc6e 	bl	23da8 <memcpy>
		memcpy(&tmp4, &BT_UUID_128(uuid)->val[10], sizeof(tmp4));
    54cc:	462a      	mov	r2, r5
    54ce:	f104 010b 	add.w	r1, r4, #11
    54d2:	f10d 001e 	add.w	r0, sp, #30
    54d6:	f01e fc67 	bl	23da8 <memcpy>
		memcpy(&tmp5, &BT_UUID_128(uuid)->val[12], sizeof(tmp5));
    54da:	f104 010d 	add.w	r1, r4, #13
    54de:	2204      	movs	r2, #4
    54e0:	a809      	add	r0, sp, #36	; 0x24
    54e2:	f01e fc61 	bl	23da8 <memcpy>
		snprintk(str, len, "%08x-%04x-%04x-%04x-%08x%04x",
    54e6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    54ea:	9304      	str	r3, [sp, #16]
    54ec:	9b08      	ldr	r3, [sp, #32]
    54ee:	9303      	str	r3, [sp, #12]
    54f0:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    54f4:	9302      	str	r3, [sp, #8]
    54f6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    54fa:	9301      	str	r3, [sp, #4]
    54fc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    5500:	9300      	str	r3, [sp, #0]
    5502:	4a09      	ldr	r2, [pc, #36]	; (5528 <bt_uuid_to_str+0xb8>)
    5504:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5506:	4639      	mov	r1, r7
    5508:	4630      	mov	r0, r6
    550a:	f01b febc 	bl	21286 <snprintk>
}
    550e:	b00b      	add	sp, #44	; 0x2c
    5510:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)memset(str, 0, len);
    5512:	2100      	movs	r1, #0
    5514:	4630      	mov	r0, r6
}
    5516:	b00b      	add	sp, #44	; 0x2c
    5518:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		(void)memset(str, 0, len);
    551c:	f01e bc4f 	b.w	23dbe <memset>
    5520:	0002c6ae 	.word	0x0002c6ae
    5524:	0002af19 	.word	0x0002af19
    5528:	0002b537 	.word	0x0002b537

0000552c <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    552c:	b538      	push	{r3, r4, r5, lr}
    552e:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
    5530:	4805      	ldr	r0, [pc, #20]	; (5548 <bt_buf_get_rx+0x1c>)
    5532:	f022 fdcb 	bl	280cc <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    5536:	4604      	mov	r4, r0
    5538:	b120      	cbz	r0, 5544 <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
    553a:	2100      	movs	r1, #0
    553c:	3008      	adds	r0, #8
    553e:	f022 fdea 	bl	28116 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    5542:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    5544:	4620      	mov	r0, r4
    5546:	bd38      	pop	{r3, r4, r5, pc}
    5548:	20001250 	.word	0x20001250

0000554c <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    554c:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
    554e:	490b      	ldr	r1, [pc, #44]	; (557c <bt_buf_get_cmd_complete+0x30>)
{
    5550:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
    5552:	f8d1 0130 	ldr.w	r0, [r1, #304]	; 0x130
{
    5556:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
    5558:	b920      	cbnz	r0, 5564 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    555a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    555e:	2001      	movs	r0, #1
    5560:	f7ff bfe4 	b.w	552c <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
    5564:	f022 fe3e 	bl	281e4 <net_buf_ref>
    5568:	2301      	movs	r3, #1
		buf->len = 0U;
    556a:	2100      	movs	r1, #0
    556c:	7503      	strb	r3, [r0, #20]
    556e:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
    5570:	4604      	mov	r4, r0
    5572:	3008      	adds	r0, #8
    5574:	f022 fdcf 	bl	28116 <net_buf_simple_reserve>
}
    5578:	4620      	mov	r0, r4
    557a:	bd10      	pop	{r4, pc}
    557c:	20000288 	.word	0x20000288

00005580 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    5580:	b570      	push	{r4, r5, r6, lr}
    5582:	4604      	mov	r4, r0
	switch (evt) {
    5584:	2c0f      	cmp	r4, #15
{
    5586:	460d      	mov	r5, r1
    5588:	4610      	mov	r0, r2
    558a:	4619      	mov	r1, r3
	switch (evt) {
    558c:	d805      	bhi.n	559a <bt_buf_get_evt+0x1a>
    558e:	2c0d      	cmp	r4, #13
    5590:	d912      	bls.n	55b8 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    5592:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    5596:	f7ff bfd9 	b.w	554c <bt_buf_get_cmd_complete>
	switch (evt) {
    559a:	2c13      	cmp	r4, #19
    559c:	d10c      	bne.n	55b8 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    559e:	480b      	ldr	r0, [pc, #44]	; (55cc <bt_buf_get_evt+0x4c>)
    55a0:	f022 fd94 	bl	280cc <net_buf_alloc_fixed>
			if (buf) {
    55a4:	4604      	mov	r4, r0
    55a6:	b128      	cbz	r0, 55b4 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
    55a8:	2100      	movs	r1, #0
    55aa:	3008      	adds	r0, #8
    55ac:	f022 fdb3 	bl	28116 <net_buf_simple_reserve>
    55b0:	2301      	movs	r3, #1
    55b2:	7523      	strb	r3, [r4, #20]
}
    55b4:	4620      	mov	r0, r4
    55b6:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
    55b8:	4602      	mov	r2, r0
    55ba:	460b      	mov	r3, r1
		if (discardable) {
    55bc:	b10d      	cbz	r5, 55c2 <bt_buf_get_evt+0x42>
    55be:	4804      	ldr	r0, [pc, #16]	; (55d0 <bt_buf_get_evt+0x50>)
    55c0:	e7ee      	b.n	55a0 <bt_buf_get_evt+0x20>
}
    55c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    55c6:	2001      	movs	r0, #1
    55c8:	f7ff bfb0 	b.w	552c <bt_buf_get_rx>
    55cc:	200012a0 	.word	0x200012a0
    55d0:	200011d8 	.word	0x200011d8

000055d4 <ver_str>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(uint8_t ver)
{
    55d4:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    55d6:	4d0b      	ldr	r5, [pc, #44]	; (5604 <ver_str+0x30>)
{
    55d8:	4606      	mov	r6, r0
	const char * const str[] = {
    55da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    55dc:	b08e      	sub	sp, #56	; 0x38
	const char * const str[] = {
    55de:	ac01      	add	r4, sp, #4
    55e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    55e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    55e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    55e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    55e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0", "5.1", "5.2", "5.3"
	};

	if (ver < ARRAY_SIZE(str)) {
    55ea:	2e0c      	cmp	r6, #12
	const char * const str[] = {
    55ec:	682b      	ldr	r3, [r5, #0]
    55ee:	6023      	str	r3, [r4, #0]
		return str[ver];
    55f0:	bf9b      	ittet	ls
    55f2:	ab0e      	addls	r3, sp, #56	; 0x38
    55f4:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
    55f8:	4803      	ldrhi	r0, [pc, #12]	; (5608 <ver_str+0x34>)
		return str[ver];
    55fa:	f856 0c34 	ldrls.w	r0, [r6, #-52]
}
    55fe:	b00e      	add	sp, #56	; 0x38
    5600:	bd70      	pop	{r4, r5, r6, pc}
    5602:	bf00      	nop
    5604:	00029b1c 	.word	0x00029b1c
    5608:	0002b65b 	.word	0x0002b65b

0000560c <hci_data_buf_overflow>:
    560c:	4905      	ldr	r1, [pc, #20]	; (5624 <hci_data_buf_overflow+0x18>)
    560e:	4a06      	ldr	r2, [pc, #24]	; (5628 <hci_data_buf_overflow+0x1c>)
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
    5610:	6883      	ldr	r3, [r0, #8]
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    5612:	4806      	ldr	r0, [pc, #24]	; (562c <hci_data_buf_overflow+0x20>)
    5614:	1a52      	subs	r2, r2, r1
    5616:	08d2      	lsrs	r2, r2, #3
    5618:	0192      	lsls	r2, r2, #6
    561a:	7819      	ldrb	r1, [r3, #0]
    561c:	f042 0202 	orr.w	r2, r2, #2
    5620:	f01c ba70 	b.w	21b04 <log_1>
    5624:	00029870 	.word	0x00029870
    5628:	00029960 	.word	0x00029960
    562c:	0002b663 	.word	0x0002b663

00005630 <hci_disconn_complete_prio>:
{
    5630:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    5632:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
    5634:	781a      	ldrb	r2, [r3, #0]
    5636:	b972      	cbnz	r2, 5656 <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    5638:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    563c:	4620      	mov	r0, r4
    563e:	f002 fdad 	bl	819c <bt_conn_lookup_handle>
	if (!conn) {
    5642:	4605      	mov	r5, r0
    5644:	b940      	cbnz	r0, 5658 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
    5646:	4b08      	ldr	r3, [pc, #32]	; (5668 <hci_disconn_complete_prio+0x38>)
    5648:	881a      	ldrh	r2, [r3, #0]
    564a:	b922      	cbnz	r2, 5656 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
    564c:	ea6f 5004 	mvn.w	r0, r4, lsl #20
    5650:	ea6f 5010 	mvn.w	r0, r0, lsr #20
    5654:	8018      	strh	r0, [r3, #0]
}
    5656:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    5658:	2101      	movs	r1, #1
    565a:	f002 fda7 	bl	81ac <bt_conn_set_state>
	bt_conn_unref(conn);
    565e:	4628      	mov	r0, r5
}
    5660:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    5664:	f01f b8b8 	b.w	247d8 <bt_conn_unref>
    5668:	200036ce 	.word	0x200036ce

0000566c <hci_disconn_complete>:
{
    566c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    566e:	6885      	ldr	r5, [r0, #8]
	if (evt->status) {
    5670:	782e      	ldrb	r6, [r5, #0]
    5672:	b9ee      	cbnz	r6, 56b0 <hci_disconn_complete+0x44>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    5674:	f8b5 7001 	ldrh.w	r7, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    5678:	4638      	mov	r0, r7
    567a:	f002 fd8f 	bl	819c <bt_conn_lookup_handle>
	if (!conn) {
    567e:	4604      	mov	r4, r0
    5680:	b960      	cbnz	r0, 569c <hci_disconn_complete+0x30>
    5682:	4b0c      	ldr	r3, [pc, #48]	; (56b4 <hci_disconn_complete+0x48>)
    5684:	4a0c      	ldr	r2, [pc, #48]	; (56b8 <hci_disconn_complete+0x4c>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    5686:	480d      	ldr	r0, [pc, #52]	; (56bc <hci_disconn_complete+0x50>)
    5688:	1ad2      	subs	r2, r2, r3
    568a:	08d2      	lsrs	r2, r2, #3
    568c:	0192      	lsls	r2, r2, #6
    568e:	4639      	mov	r1, r7
    5690:	f042 0201 	orr.w	r2, r2, #1
}
    5694:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    5698:	f01c ba34 	b.w	21b04 <log_1>
	conn->err = evt->reason;
    569c:	78eb      	ldrb	r3, [r5, #3]
    569e:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    56a0:	4631      	mov	r1, r6
    56a2:	f002 fd83 	bl	81ac <bt_conn_set_state>
		bt_conn_unref(conn);
    56a6:	4620      	mov	r0, r4
}
    56a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    56ac:	f01f b894 	b.w	247d8 <bt_conn_unref>
}
    56b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    56b2:	bf00      	nop
    56b4:	00029870 	.word	0x00029870
    56b8:	00029960 	.word	0x00029960
    56bc:	0002b68b 	.word	0x0002b68b

000056c0 <hci_hardware_error>:
{
    56c0:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    56c2:	2101      	movs	r1, #1
    56c4:	3008      	adds	r0, #8
    56c6:	f022 fe37 	bl	28338 <net_buf_simple_pull_mem>
    56ca:	4b06      	ldr	r3, [pc, #24]	; (56e4 <hci_hardware_error+0x24>)
    56cc:	4a06      	ldr	r2, [pc, #24]	; (56e8 <hci_hardware_error+0x28>)
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    56ce:	7801      	ldrb	r1, [r0, #0]
    56d0:	4806      	ldr	r0, [pc, #24]	; (56ec <hci_hardware_error+0x2c>)
    56d2:	1ad2      	subs	r2, r2, r3
    56d4:	08d2      	lsrs	r2, r2, #3
    56d6:	0192      	lsls	r2, r2, #6
}
    56d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    56dc:	f042 0201 	orr.w	r2, r2, #1
    56e0:	f01c ba10 	b.w	21b04 <log_1>
    56e4:	00029870 	.word	0x00029870
    56e8:	00029960 	.word	0x00029960
    56ec:	0002b6b1 	.word	0x0002b6b1

000056f0 <hci_vendor_event>:
{
    56f0:	b510      	push	{r4, lr}
    56f2:	4a0a      	ldr	r2, [pc, #40]	; (571c <hci_vendor_event+0x2c>)
    56f4:	4c0a      	ldr	r4, [pc, #40]	; (5720 <hci_vendor_event+0x30>)
		BT_WARN("Unhandled vendor-specific event: %s",
    56f6:	8981      	ldrh	r1, [r0, #12]
    56f8:	6880      	ldr	r0, [r0, #8]
    56fa:	1aa4      	subs	r4, r4, r2
    56fc:	f7ff fb38 	bl	4d70 <bt_hex_real>
    5700:	f7fd f9ea 	bl	2ad8 <z_log_strdup>
    5704:	08e4      	lsrs	r4, r4, #3
    5706:	01a4      	lsls	r4, r4, #6
    5708:	f044 0402 	orr.w	r4, r4, #2
    570c:	4601      	mov	r1, r0
    570e:	4622      	mov	r2, r4
    5710:	4804      	ldr	r0, [pc, #16]	; (5724 <hci_vendor_event+0x34>)
}
    5712:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    5716:	f01c b9f5 	b.w	21b04 <log_1>
    571a:	bf00      	nop
    571c:	00029870 	.word	0x00029870
    5720:	00029960 	.word	0x00029960
    5724:	0002b6d3 	.word	0x0002b6d3

00005728 <le_conn_update_complete>:
{
    5728:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    572a:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    572c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    5730:	4630      	mov	r0, r6
    5732:	f002 fd33 	bl	819c <bt_conn_lookup_handle>
	if (!conn) {
    5736:	4604      	mov	r4, r0
    5738:	b968      	cbnz	r0, 5756 <le_conn_update_complete+0x2e>
    573a:	4b25      	ldr	r3, [pc, #148]	; (57d0 <le_conn_update_complete+0xa8>)
    573c:	4a25      	ldr	r2, [pc, #148]	; (57d4 <le_conn_update_complete+0xac>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    573e:	4826      	ldr	r0, [pc, #152]	; (57d8 <le_conn_update_complete+0xb0>)
    5740:	1ad2      	subs	r2, r2, r3
    5742:	08d2      	lsrs	r2, r2, #3
    5744:	0192      	lsls	r2, r2, #6
    5746:	f042 0201 	orr.w	r2, r2, #1
    574a:	4631      	mov	r1, r6
}
    574c:	b002      	add	sp, #8
    574e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    5752:	f01c b9d7 	b.w	21b04 <log_1>
	if (!evt->status) {
    5756:	782b      	ldrb	r3, [r5, #0]
    5758:	b9cb      	cbnz	r3, 578e <le_conn_update_complete+0x66>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    575a:	792a      	ldrb	r2, [r5, #4]
    575c:	78eb      	ldrb	r3, [r5, #3]
    575e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    5762:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    5766:	79aa      	ldrb	r2, [r5, #6]
    5768:	796b      	ldrb	r3, [r5, #5]
    576a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    576e:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    5772:	79eb      	ldrb	r3, [r5, #7]
    5774:	7a2a      	ldrb	r2, [r5, #8]
    5776:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    577a:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    577e:	f002 fe2b 	bl	83d8 <notify_le_param_updated>
	bt_conn_unref(conn);
    5782:	4620      	mov	r0, r4
}
    5784:	b002      	add	sp, #8
    5786:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    578a:	f01f b825 	b.w	247d8 <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    578e:	2b1a      	cmp	r3, #26
    5790:	d1f7      	bne.n	5782 <le_conn_update_complete+0x5a>
    5792:	78c3      	ldrb	r3, [r0, #3]
    5794:	2b01      	cmp	r3, #1
    5796:	d1f4      	bne.n	5782 <le_conn_update_complete+0x5a>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    5798:	f44f 6180 	mov.w	r1, #1024	; 0x400
    579c:	3004      	adds	r0, #4
    579e:	f01e fdb5 	bl	2430c <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
    57a2:	0543      	lsls	r3, r0, #21
    57a4:	d4ed      	bmi.n	5782 <le_conn_update_complete+0x5a>
		param.interval_min = conn->le.interval_min;
    57a6:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
    57aa:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
    57ae:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
    57b2:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
    57b6:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
    57ba:	f8ad 3004 	strh.w	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
    57be:	4669      	mov	r1, sp
		param.timeout = conn->le.pending_timeout;
    57c0:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    57c4:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
    57c8:	4620      	mov	r0, r4
    57ca:	f003 fa13 	bl	8bf4 <bt_l2cap_update_conn_param>
    57ce:	e7d8      	b.n	5782 <le_conn_update_complete+0x5a>
    57d0:	00029870 	.word	0x00029870
    57d4:	00029960 	.word	0x00029960
    57d8:	0002b6f7 	.word	0x0002b6f7

000057dc <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    57dc:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    57de:	4c0d      	ldr	r4, [pc, #52]	; (5814 <find_pending_connect.part.0+0x38>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    57e0:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    57e2:	2205      	movs	r2, #5
    57e4:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    57e8:	f002 fee2 	bl	85b0 <bt_conn_lookup_state_le>
		if (!conn) {
    57ec:	b978      	cbnz	r0, 580e <find_pending_connect.part.0+0x32>
						       BT_ADDR_LE_NONE,
    57ee:	4b0a      	ldr	r3, [pc, #40]	; (5818 <find_pending_connect.part.0+0x3c>)
    57f0:	6b58      	ldr	r0, [r3, #52]	; 0x34
    57f2:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
    57f4:	9000      	str	r0, [sp, #0]
    57f6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    57fa:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    57fe:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
						       BT_ADDR_LE_NONE,
    5802:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    5806:	2204      	movs	r2, #4
    5808:	4669      	mov	r1, sp
    580a:	f002 fed1 	bl	85b0 <bt_conn_lookup_state_le>
}
    580e:	b002      	add	sp, #8
    5810:	bd10      	pop	{r4, pc}
    5812:	bf00      	nop
    5814:	20000288 	.word	0x20000288
    5818:	00029b1c 	.word	0x00029b1c

0000581c <handle_event>:
{
    581c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    581e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    5822:	4605      	mov	r5, r0
    5824:	4608      	mov	r0, r1
		if (handler->event != event) {
    5826:	7811      	ldrb	r1, [r2, #0]
    5828:	42a9      	cmp	r1, r5
    582a:	d01a      	beq.n	5862 <handle_event+0x46>
	for (i = 0; i < num_handlers; i++) {
    582c:	3208      	adds	r2, #8
    582e:	429a      	cmp	r2, r3
    5830:	d1f9      	bne.n	5826 <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    5832:	8986      	ldrh	r6, [r0, #12]
    5834:	4b16      	ldr	r3, [pc, #88]	; (5890 <handle_event+0x74>)
    5836:	4c17      	ldr	r4, [pc, #92]	; (5894 <handle_event+0x78>)
    5838:	6880      	ldr	r0, [r0, #8]
    583a:	4631      	mov	r1, r6
    583c:	1ae4      	subs	r4, r4, r3
    583e:	f7ff fa97 	bl	4d70 <bt_hex_real>
    5842:	f7fd f949 	bl	2ad8 <z_log_strdup>
    5846:	08e4      	lsrs	r4, r4, #3
    5848:	01a4      	lsls	r4, r4, #6
    584a:	f044 0402 	orr.w	r4, r4, #2
    584e:	4603      	mov	r3, r0
    5850:	f8ad 4000 	strh.w	r4, [sp]
    5854:	4810      	ldr	r0, [pc, #64]	; (5898 <handle_event+0x7c>)
    5856:	4632      	mov	r2, r6
    5858:	4629      	mov	r1, r5
    585a:	f01c f980 	bl	21b5e <log_3>
}
    585e:	b002      	add	sp, #8
    5860:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
    5862:	8981      	ldrh	r1, [r0, #12]
    5864:	7853      	ldrb	r3, [r2, #1]
    5866:	428b      	cmp	r3, r1
    5868:	d90d      	bls.n	5886 <handle_event+0x6a>
    586a:	4a09      	ldr	r2, [pc, #36]	; (5890 <handle_event+0x74>)
    586c:	4b09      	ldr	r3, [pc, #36]	; (5894 <handle_event+0x78>)
			BT_ERR("Too small (%u bytes) event 0x%02x",
    586e:	480b      	ldr	r0, [pc, #44]	; (589c <handle_event+0x80>)
    5870:	1a9b      	subs	r3, r3, r2
    5872:	08db      	lsrs	r3, r3, #3
    5874:	019b      	lsls	r3, r3, #6
    5876:	f043 0301 	orr.w	r3, r3, #1
    587a:	462a      	mov	r2, r5
}
    587c:	b002      	add	sp, #8
    587e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    5882:	f01c b953 	b.w	21b2c <log_2>
		handler->handler(buf);
    5886:	6853      	ldr	r3, [r2, #4]
}
    5888:	b002      	add	sp, #8
    588a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
    588e:	4718      	bx	r3
    5890:	00029870 	.word	0x00029870
    5894:	00029960 	.word	0x00029960
    5898:	0002b73d 	.word	0x0002b73d
    589c:	0002b71b 	.word	0x0002b71b

000058a0 <hci_le_meta_event>:
{
    58a0:	b510      	push	{r4, lr}
    58a2:	2101      	movs	r1, #1
    58a4:	4604      	mov	r4, r0
    58a6:	3008      	adds	r0, #8
    58a8:	f022 fd46 	bl	28338 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    58ac:	4621      	mov	r1, r4
    58ae:	4a03      	ldr	r2, [pc, #12]	; (58bc <hci_le_meta_event+0x1c>)
    58b0:	7800      	ldrb	r0, [r0, #0]
}
    58b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    58b6:	2308      	movs	r3, #8
    58b8:	f7ff bfb0 	b.w	581c <handle_event>
    58bc:	00029ec0 	.word	0x00029ec0

000058c0 <hci_cmd_done>:
{
    58c0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    58c4:	4607      	mov	r7, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    58c6:	7990      	ldrb	r0, [r2, #6]
    58c8:	f8df 8118 	ldr.w	r8, [pc, #280]	; 59e4 <hci_cmd_done+0x124>
{
    58cc:	460e      	mov	r6, r1
    58ce:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    58d0:	f018 f98a 	bl	1dbe8 <net_buf_pool_get>
    58d4:	4580      	cmp	r8, r0
    58d6:	d016      	beq.n	5906 <hci_cmd_done+0x46>
    58d8:	4b43      	ldr	r3, [pc, #268]	; (59e8 <hci_cmd_done+0x128>)
    58da:	4d44      	ldr	r5, [pc, #272]	; (59ec <hci_cmd_done+0x12c>)
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    58dc:	79a0      	ldrb	r0, [r4, #6]
    58de:	9700      	str	r7, [sp, #0]
    58e0:	1aed      	subs	r5, r5, r3
    58e2:	08ed      	lsrs	r5, r5, #3
    58e4:	9001      	str	r0, [sp, #4]
    58e6:	f018 f97f 	bl	1dbe8 <net_buf_pool_get>
    58ea:	01ad      	lsls	r5, r5, #6
    58ec:	f045 0502 	orr.w	r5, r5, #2
    58f0:	e9cd 0802 	strd	r0, r8, [sp, #8]
    58f4:	462b      	mov	r3, r5
    58f6:	483e      	ldr	r0, [pc, #248]	; (59f0 <hci_cmd_done+0x130>)
    58f8:	2204      	movs	r2, #4
    58fa:	4669      	mov	r1, sp
    58fc:	f01c f94b 	bl	21b96 <log_n>
}
    5900:	b004      	add	sp, #16
    5902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
    5906:	4620      	mov	r0, r4
    5908:	f018 f976 	bl	1dbf8 <net_buf_id>
    590c:	4d39      	ldr	r5, [pc, #228]	; (59f4 <hci_cmd_done+0x134>)
    590e:	f04f 080c 	mov.w	r8, #12
    5912:	fb08 5000 	mla	r0, r8, r0, r5
    5916:	8843      	ldrh	r3, [r0, #2]
    5918:	42bb      	cmp	r3, r7
    591a:	d014      	beq.n	5946 <hci_cmd_done+0x86>
    591c:	4b32      	ldr	r3, [pc, #200]	; (59e8 <hci_cmd_done+0x128>)
    591e:	4e33      	ldr	r6, [pc, #204]	; (59ec <hci_cmd_done+0x12c>)
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    5920:	4620      	mov	r0, r4
    5922:	1af6      	subs	r6, r6, r3
    5924:	f018 f968 	bl	1dbf8 <net_buf_id>
    5928:	08f6      	lsrs	r6, r6, #3
    592a:	fb08 5500 	mla	r5, r8, r0, r5
    592e:	01b6      	lsls	r6, r6, #6
    5930:	f046 0602 	orr.w	r6, r6, #2
    5934:	886a      	ldrh	r2, [r5, #2]
    5936:	4830      	ldr	r0, [pc, #192]	; (59f8 <hci_cmd_done+0x138>)
    5938:	4633      	mov	r3, r6
    593a:	4639      	mov	r1, r7
}
    593c:	b004      	add	sp, #16
    593e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    5942:	f01c b8f3 	b.w	21b2c <log_2>
	if (bt_dev.sent_cmd) {
    5946:	4f2d      	ldr	r7, [pc, #180]	; (59fc <hci_cmd_done+0x13c>)
    5948:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
    594c:	b120      	cbz	r0, 5958 <hci_cmd_done+0x98>
		net_buf_unref(bt_dev.sent_cmd);
    594e:	f018 fa09 	bl	1dd64 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    5952:	2300      	movs	r3, #0
    5954:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	if (cmd(buf)->state && !status) {
    5958:	4620      	mov	r0, r4
    595a:	f018 f94d 	bl	1dbf8 <net_buf_id>
    595e:	270c      	movs	r7, #12
    5960:	fb07 5000 	mla	r0, r7, r0, r5
    5964:	6843      	ldr	r3, [r0, #4]
    5966:	b1a3      	cbz	r3, 5992 <hci_cmd_done+0xd2>
    5968:	b99e      	cbnz	r6, 5992 <hci_cmd_done+0xd2>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    596a:	4620      	mov	r0, r4
    596c:	f018 f944 	bl	1dbf8 <net_buf_id>
    5970:	fb07 5000 	mla	r0, r7, r0, r5
	atomic_val_t mask = ATOMIC_MASK(bit);
    5974:	2301      	movs	r3, #1
    5976:	6847      	ldr	r7, [r0, #4]
    5978:	e9d7 2000 	ldrd	r2, r0, [r7]
    597c:	f000 011f 	and.w	r1, r0, #31
    5980:	fa03 f101 	lsl.w	r1, r3, r1
	if (val) {
    5984:	7a3b      	ldrb	r3, [r7, #8]
    5986:	0940      	lsrs	r0, r0, #5
    5988:	b1e3      	cbz	r3, 59c4 <hci_cmd_done+0x104>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    598a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    598e:	f01e fcbd 	bl	2430c <atomic_or>
	if (cmd(buf)->sync) {
    5992:	4620      	mov	r0, r4
    5994:	f018 f930 	bl	1dbf8 <net_buf_id>
    5998:	270c      	movs	r7, #12
    599a:	fb07 5000 	mla	r0, r7, r0, r5
    599e:	6883      	ldr	r3, [r0, #8]
    59a0:	2b00      	cmp	r3, #0
    59a2:	d0ad      	beq.n	5900 <hci_cmd_done+0x40>
		cmd(buf)->status = status;
    59a4:	4620      	mov	r0, r4
    59a6:	f018 f927 	bl	1dbf8 <net_buf_id>
    59aa:	4378      	muls	r0, r7
    59ac:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    59ae:	4620      	mov	r0, r4
    59b0:	f018 f922 	bl	1dbf8 <net_buf_id>
    59b4:	fb07 5500 	mla	r5, r7, r0, r5
    59b8:	68a8      	ldr	r0, [r5, #8]
}
    59ba:	b004      	add	sp, #16
    59bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_impl_k_sem_give(sem);
    59c0:	f01a bb28 	b.w	20014 <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    59c4:	43cb      	mvns	r3, r1
    59c6:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    59ca:	f3bf 8f5b 	dmb	ish
    59ce:	e852 1f00 	ldrex	r1, [r2]
    59d2:	4019      	ands	r1, r3
    59d4:	e842 1000 	strex	r0, r1, [r2]
    59d8:	2800      	cmp	r0, #0
    59da:	d1f8      	bne.n	59ce <hci_cmd_done+0x10e>
    59dc:	f3bf 8f5b 	dmb	ish
    59e0:	e7d7      	b.n	5992 <hci_cmd_done+0xd2>
    59e2:	bf00      	nop
    59e4:	20001228 	.word	0x20001228
    59e8:	00029870 	.word	0x00029870
    59ec:	00029960 	.word	0x00029960
    59f0:	0002b75f 	.word	0x0002b75f
    59f4:	200020c8 	.word	0x200020c8
    59f8:	0002b794 	.word	0x0002b794
    59fc:	20000288 	.word	0x20000288

00005a00 <hci_cmd_status>:
{
    5a00:	b538      	push	{r3, r4, r5, lr}
    5a02:	2104      	movs	r1, #4
    5a04:	4604      	mov	r4, r0
    5a06:	3008      	adds	r0, #8
    5a08:	f022 fc96 	bl	28338 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    5a0c:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    5a0e:	7801      	ldrb	r1, [r0, #0]
    5a10:	8840      	ldrh	r0, [r0, #2]
    5a12:	4622      	mov	r2, r4
    5a14:	f7ff ff54 	bl	58c0 <hci_cmd_done>
	if (ncmd) {
    5a18:	b125      	cbz	r5, 5a24 <hci_cmd_status+0x24>
    5a1a:	4803      	ldr	r0, [pc, #12]	; (5a28 <hci_cmd_status+0x28>)
}
    5a1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5a20:	f01a baf8 	b.w	20014 <z_impl_k_sem_give>
    5a24:	bd38      	pop	{r3, r4, r5, pc}
    5a26:	bf00      	nop
    5a28:	200003a0 	.word	0x200003a0

00005a2c <hci_cmd_complete>:
{
    5a2c:	b538      	push	{r3, r4, r5, lr}
    5a2e:	2103      	movs	r1, #3
    5a30:	4604      	mov	r4, r0
    5a32:	3008      	adds	r0, #8
    5a34:	f022 fc80 	bl	28338 <net_buf_simple_pull_mem>
	status = buf->data[0];
    5a38:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    5a3a:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    5a3c:	7819      	ldrb	r1, [r3, #0]
    5a3e:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    5a42:	4622      	mov	r2, r4
    5a44:	f7ff ff3c 	bl	58c0 <hci_cmd_done>
	if (ncmd) {
    5a48:	b125      	cbz	r5, 5a54 <hci_cmd_complete+0x28>
    5a4a:	4803      	ldr	r0, [pc, #12]	; (5a58 <hci_cmd_complete+0x2c>)
}
    5a4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5a50:	f01a bae0 	b.w	20014 <z_impl_k_sem_give>
    5a54:	bd38      	pop	{r3, r4, r5, pc}
    5a56:	bf00      	nop
    5a58:	200003a0 	.word	0x200003a0

00005a5c <hci_tx_thread>:
{
    5a5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5a60:	4d51      	ldr	r5, [pc, #324]	; (5ba8 <hci_tx_thread+0x14c>)
    5a62:	4b52      	ldr	r3, [pc, #328]	; (5bac <hci_tx_thread+0x150>)
		events[0].state = K_POLL_STATE_NOT_READY;
    5a64:	f8df 9148 	ldr.w	r9, [pc, #328]	; 5bb0 <hci_tx_thread+0x154>
		BT_ASSERT(err == 0);
    5a68:	f8df a148 	ldr.w	sl, [pc, #328]	; 5bb4 <hci_tx_thread+0x158>
    5a6c:	1aed      	subs	r5, r5, r3
    5a6e:	08ed      	lsrs	r5, r5, #3
		events[0].state = K_POLL_STATE_NOT_READY;
    5a70:	f8d9 300c 	ldr.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    5a74:	4850      	ldr	r0, [pc, #320]	; (5bb8 <hci_tx_thread+0x15c>)
		events[0].state = K_POLL_STATE_NOT_READY;
    5a76:	f36f 3352 	bfc	r3, #13, #6
    5a7a:	f8c9 300c 	str.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    5a7e:	f002 fb4f 	bl	8120 <bt_conn_prepare_events>
    5a82:	1c47      	adds	r7, r0, #1
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    5a84:	484a      	ldr	r0, [pc, #296]	; (5bb0 <hci_tx_thread+0x154>)
    5a86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5a8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5a8e:	4639      	mov	r1, r7
    5a90:	f01b fa3c 	bl	20f0c <z_impl_k_poll>
		BT_ASSERT(err == 0);
    5a94:	b160      	cbz	r0, 5ab0 <hci_tx_thread+0x54>
    5a96:	4949      	ldr	r1, [pc, #292]	; (5bbc <hci_tx_thread+0x160>)
    5a98:	4849      	ldr	r0, [pc, #292]	; (5bc0 <hci_tx_thread+0x164>)
    5a9a:	f640 1389 	movw	r3, #2441	; 0x989
    5a9e:	4652      	mov	r2, sl
    5aa0:	f01b fbe4 	bl	2126c <printk>
    5aa4:	4040      	eors	r0, r0
    5aa6:	f380 8811 	msr	BASEPRI, r0
    5aaa:	f04f 0003 	mov.w	r0, #3
    5aae:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    5ab0:	4e44      	ldr	r6, [pc, #272]	; (5bc4 <hci_tx_thread+0x168>)
{
    5ab2:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 5bb0 <hci_tx_thread+0x154>
    5ab6:	f506 7b8c 	add.w	fp, r6, #280	; 0x118
	for (; count; ev++, count--) {
    5aba:	b917      	cbnz	r7, 5ac2 <hci_tx_thread+0x66>
	z_impl_k_yield();
    5abc:	f01a ff06 	bl	208cc <z_impl_k_yield>
	while (1) {
    5ac0:	e7d6      	b.n	5a70 <hci_tx_thread+0x14>
		switch (ev->state) {
    5ac2:	f8d8 100c 	ldr.w	r1, [r8, #12]
    5ac6:	f3c1 3145 	ubfx	r1, r1, #13, #6
    5aca:	2901      	cmp	r1, #1
    5acc:	d959      	bls.n	5b82 <hci_tx_thread+0x126>
    5ace:	2904      	cmp	r1, #4
    5ad0:	d163      	bne.n	5b9a <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
    5ad2:	f898 300c 	ldrb.w	r3, [r8, #12]
    5ad6:	2b00      	cmp	r3, #0
    5ad8:	d157      	bne.n	5b8a <hci_tx_thread+0x12e>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    5ada:	483b      	ldr	r0, [pc, #236]	; (5bc8 <hci_tx_thread+0x16c>)
    5adc:	2200      	movs	r2, #0
    5ade:	2300      	movs	r3, #0
    5ae0:	f022 faf9 	bl	280d6 <net_buf_get>
	BT_ASSERT(buf);
    5ae4:	4604      	mov	r4, r0
    5ae6:	b960      	cbnz	r0, 5b02 <hci_tx_thread+0xa6>
    5ae8:	4938      	ldr	r1, [pc, #224]	; (5bcc <hci_tx_thread+0x170>)
    5aea:	4835      	ldr	r0, [pc, #212]	; (5bc0 <hci_tx_thread+0x164>)
    5aec:	f44f 6312 	mov.w	r3, #2336	; 0x920
    5af0:	4652      	mov	r2, sl
    5af2:	f01b fbbb 	bl	2126c <printk>
    5af6:	4040      	eors	r0, r0
    5af8:	f380 8811 	msr	BASEPRI, r0
    5afc:	f04f 0003 	mov.w	r0, #3
    5b00:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    5b02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5b06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5b0a:	4658      	mov	r0, fp
    5b0c:	f01a faa8 	bl	20060 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    5b10:	f8d6 3130 	ldr.w	r3, [r6, #304]	; 0x130
    5b14:	b163      	cbz	r3, 5b30 <hci_tx_thread+0xd4>
		BT_ERR("Uncleared pending sent_cmd");
    5b16:	01a9      	lsls	r1, r5, #6
    5b18:	482d      	ldr	r0, [pc, #180]	; (5bd0 <hci_tx_thread+0x174>)
    5b1a:	f041 0101 	orr.w	r1, r1, #1
    5b1e:	f01b ffe4 	bl	21aea <log_0>
		net_buf_unref(bt_dev.sent_cmd);
    5b22:	f8d6 0130 	ldr.w	r0, [r6, #304]	; 0x130
    5b26:	f018 f91d 	bl	1dd64 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    5b2a:	2300      	movs	r3, #0
    5b2c:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
    5b30:	4620      	mov	r0, r4
    5b32:	f022 fb57 	bl	281e4 <net_buf_ref>
    5b36:	f8c6 0130 	str.w	r0, [r6, #304]	; 0x130
	BT_DBG("buf %p len %u type %u", buf, buf->len, bt_buf_get_type(buf));

	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
    5b3a:	4620      	mov	r0, r4
    5b3c:	f7ff faba 	bl	50b4 <bt_hci_ecc_send>
	if (err) {
    5b40:	4601      	mov	r1, r0
    5b42:	b1f0      	cbz	r0, 5b82 <hci_tx_thread+0x126>
		BT_ERR("Unable to send to driver (err %d)", err);
    5b44:	01aa      	lsls	r2, r5, #6
    5b46:	4823      	ldr	r0, [pc, #140]	; (5bd4 <hci_tx_thread+0x178>)
    5b48:	f042 0201 	orr.w	r2, r2, #1
    5b4c:	f01b ffda 	bl	21b04 <log_1>
	z_impl_k_sem_give(sem);
    5b50:	4821      	ldr	r0, [pc, #132]	; (5bd8 <hci_tx_thread+0x17c>)
    5b52:	f01a fa5f 	bl	20014 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    5b56:	4620      	mov	r0, r4
    5b58:	f018 f84e 	bl	1dbf8 <net_buf_id>
    5b5c:	4b1f      	ldr	r3, [pc, #124]	; (5bdc <hci_tx_thread+0x180>)
    5b5e:	220c      	movs	r2, #12
    5b60:	fb02 3000 	mla	r0, r2, r0, r3
    5b64:	211f      	movs	r1, #31
    5b66:	8840      	ldrh	r0, [r0, #2]
    5b68:	4622      	mov	r2, r4
    5b6a:	f7ff fea9 	bl	58c0 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    5b6e:	f8d6 0130 	ldr.w	r0, [r6, #304]	; 0x130
    5b72:	f018 f8f7 	bl	1dd64 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    5b76:	2300      	movs	r3, #0
		net_buf_unref(buf);
    5b78:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    5b7a:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
		net_buf_unref(buf);
    5b7e:	f018 f8f1 	bl	1dd64 <net_buf_unref>
	for (; count; ev++, count--) {
    5b82:	f108 0814 	add.w	r8, r8, #20
    5b86:	3f01      	subs	r7, #1
    5b88:	e797      	b.n	5aba <hci_tx_thread+0x5e>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    5b8a:	2b01      	cmp	r3, #1
    5b8c:	d1f9      	bne.n	5b82 <hci_tx_thread+0x126>
					conn = CONTAINER_OF(ev->fifo,
    5b8e:	f8d8 0010 	ldr.w	r0, [r8, #16]
					bt_conn_process_tx(conn);
    5b92:	3838      	subs	r0, #56	; 0x38
    5b94:	f002 fe38 	bl	8808 <bt_conn_process_tx>
    5b98:	e7f3      	b.n	5b82 <hci_tx_thread+0x126>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    5b9a:	01aa      	lsls	r2, r5, #6
    5b9c:	4810      	ldr	r0, [pc, #64]	; (5be0 <hci_tx_thread+0x184>)
    5b9e:	f042 0202 	orr.w	r2, r2, #2
    5ba2:	f01b ffaf 	bl	21b04 <log_1>
    5ba6:	e7ec      	b.n	5b82 <hci_tx_thread+0x126>
    5ba8:	00029960 	.word	0x00029960
    5bac:	00029870 	.word	0x00029870
    5bb0:	20000774 	.word	0x20000774
    5bb4:	0002b7c7 	.word	0x0002b7c7
    5bb8:	20000788 	.word	0x20000788
    5bbc:	0002b7fb 	.word	0x0002b7fb
    5bc0:	0002b804 	.word	0x0002b804
    5bc4:	20000288 	.word	0x20000288
    5bc8:	200003bc 	.word	0x200003bc
    5bcc:	0002b568 	.word	0x0002b568
    5bd0:	0002b821 	.word	0x0002b821
    5bd4:	0002b83c 	.word	0x0002b83c
    5bd8:	200003a0 	.word	0x200003a0
    5bdc:	200020c8 	.word	0x200020c8
    5be0:	0002b85e 	.word	0x0002b85e

00005be4 <hci_num_completed_packets>:
{
    5be4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5be8:	4d39      	ldr	r5, [pc, #228]	; (5cd0 <hci_num_completed_packets+0xec>)
    5bea:	4b3a      	ldr	r3, [pc, #232]	; (5cd4 <hci_num_completed_packets+0xf0>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    5bec:	f8d0 8008 	ldr.w	r8, [r0, #8]
				BT_ERR("packets count mismatch");
    5bf0:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 5cd8 <hci_num_completed_packets+0xf4>
    5bf4:	1aed      	subs	r5, r5, r3
	for (i = 0; i < evt->num_handles; i++) {
    5bf6:	2600      	movs	r6, #0
    5bf8:	08ed      	lsrs	r5, r5, #3
			tx->pending_no_cb = 0U;
    5bfa:	46b1      	mov	r9, r6
	for (i = 0; i < evt->num_handles; i++) {
    5bfc:	f898 3000 	ldrb.w	r3, [r8]
    5c00:	429e      	cmp	r6, r3
    5c02:	db01      	blt.n	5c08 <hci_num_completed_packets+0x24>
}
    5c04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    5c08:	eb08 0386 	add.w	r3, r8, r6, lsl #2
    5c0c:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    5c10:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    5c14:	4658      	mov	r0, fp
    5c16:	f002 fac1 	bl	819c <bt_conn_lookup_handle>
		if (!conn) {
    5c1a:	4604      	mov	r4, r0
    5c1c:	b1d8      	cbz	r0, 5c56 <hci_num_completed_packets+0x72>
			k_work_submit(&conn->tx_complete_work);
    5c1e:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
    5c22:	2f00      	cmp	r7, #0
    5c24:	d033      	beq.n	5c8e <hci_num_completed_packets+0xaa>
	__asm__ volatile(
    5c26:	f04f 0320 	mov.w	r3, #32
    5c2a:	f3ef 8211 	mrs	r2, BASEPRI
    5c2e:	f383 8812 	msr	BASEPRI_MAX, r3
    5c32:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    5c36:	69e3      	ldr	r3, [r4, #28]
    5c38:	b1b3      	cbz	r3, 5c68 <hci_num_completed_packets+0x84>
				conn->pending_no_cb--;
    5c3a:	3b01      	subs	r3, #1
    5c3c:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    5c3e:	f382 8811 	msr	BASEPRI, r2
    5c42:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    5c46:	4620      	mov	r0, r4
    5c48:	f002 f948 	bl	7edc <bt_conn_get_pkts>
    5c4c:	3f01      	subs	r7, #1
    5c4e:	f01a f9e1 	bl	20014 <z_impl_k_sem_give>
    5c52:	b2bf      	uxth	r7, r7
    5c54:	e7e5      	b.n	5c22 <hci_num_completed_packets+0x3e>
			BT_ERR("No connection for handle %u", handle);
    5c56:	01aa      	lsls	r2, r5, #6
    5c58:	4820      	ldr	r0, [pc, #128]	; (5cdc <hci_num_completed_packets+0xf8>)
    5c5a:	f042 0201 	orr.w	r2, r2, #1
    5c5e:	4659      	mov	r1, fp
    5c60:	f01b ff50 	bl	21b04 <log_1>
	for (i = 0; i < evt->num_handles; i++) {
    5c64:	3601      	adds	r6, #1
    5c66:	e7c9      	b.n	5bfc <hci_num_completed_packets+0x18>
	return list->head;
    5c68:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    5c6a:	b12b      	cbz	r3, 5c78 <hci_num_completed_packets+0x94>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    5c6c:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    5c6e:	6818      	ldr	r0, [r3, #0]
	list->head = node;
    5c70:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    5c72:	428b      	cmp	r3, r1
	list->tail = node;
    5c74:	bf08      	it	eq
    5c76:	61a0      	streq	r0, [r4, #24]
    5c78:	f382 8811 	msr	BASEPRI, r2
    5c7c:	f3bf 8f6f 	isb	sy
			if (!node) {
    5c80:	b94b      	cbnz	r3, 5c96 <hci_num_completed_packets+0xb2>
				BT_ERR("packets count mismatch");
    5c82:	01a9      	lsls	r1, r5, #6
    5c84:	f041 0101 	orr.w	r1, r1, #1
    5c88:	4650      	mov	r0, sl
    5c8a:	f01b ff2e 	bl	21aea <log_0>
		bt_conn_unref(conn);
    5c8e:	4620      	mov	r0, r4
    5c90:	f01e fda2 	bl	247d8 <bt_conn_unref>
    5c94:	e7e6      	b.n	5c64 <hci_num_completed_packets+0x80>
	__asm__ volatile(
    5c96:	f04f 0220 	mov.w	r2, #32
    5c9a:	f3ef 8111 	mrs	r1, BASEPRI
    5c9e:	f382 8812 	msr	BASEPRI_MAX, r2
    5ca2:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    5ca6:	68da      	ldr	r2, [r3, #12]
    5ca8:	61e2      	str	r2, [r4, #28]
	return list->tail;
    5caa:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    5cac:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
    5cb0:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
    5cb4:	b94a      	cbnz	r2, 5cca <hci_num_completed_packets+0xe6>
	list->head = node;
    5cb6:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    5cba:	f381 8811 	msr	BASEPRI, r1
    5cbe:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
    5cc2:	4658      	mov	r0, fp
    5cc4:	f01a fb12 	bl	202ec <k_work_submit>
    5cc8:	e7bd      	b.n	5c46 <hci_num_completed_packets+0x62>
	parent->next = child;
    5cca:	6013      	str	r3, [r2, #0]
	list->tail = node;
    5ccc:	6263      	str	r3, [r4, #36]	; 0x24
}
    5cce:	e7f4      	b.n	5cba <hci_num_completed_packets+0xd6>
    5cd0:	00029960 	.word	0x00029960
    5cd4:	00029870 	.word	0x00029870
    5cd8:	0002b89b 	.word	0x0002b89b
    5cdc:	0002b87f 	.word	0x0002b87f

00005ce0 <bt_hci_cmd_state_set_init>:
{
    5ce0:	b510      	push	{r4, lr}
	state->bit = bit;
    5ce2:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
    5ce6:	f89d 3008 	ldrb.w	r3, [sp, #8]
    5cea:	720b      	strb	r3, [r1, #8]
{
    5cec:	460c      	mov	r4, r1
	cmd(buf)->state = state;
    5cee:	f017 ff83 	bl	1dbf8 <net_buf_id>
    5cf2:	4b03      	ldr	r3, [pc, #12]	; (5d00 <bt_hci_cmd_state_set_init+0x20>)
    5cf4:	220c      	movs	r2, #12
    5cf6:	fb02 3300 	mla	r3, r2, r0, r3
    5cfa:	605c      	str	r4, [r3, #4]
}
    5cfc:	bd10      	pop	{r4, pc}
    5cfe:	bf00      	nop
    5d00:	200020c8 	.word	0x200020c8

00005d04 <bt_hci_cmd_create>:
{
    5d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    5d08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5d0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5d10:	4606      	mov	r6, r0
    5d12:	4817      	ldr	r0, [pc, #92]	; (5d70 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
    5d14:	4d17      	ldr	r5, [pc, #92]	; (5d74 <bt_hci_cmd_create+0x70>)
{
    5d16:	460f      	mov	r7, r1
    5d18:	f022 f9d8 	bl	280cc <net_buf_alloc_fixed>
    5d1c:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    5d1e:	f100 0a08 	add.w	sl, r0, #8
    5d22:	2100      	movs	r1, #0
    5d24:	f04f 0800 	mov.w	r8, #0
    5d28:	4650      	mov	r0, sl
    5d2a:	f022 f9f4 	bl	28116 <net_buf_simple_reserve>
    5d2e:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
    5d32:	4620      	mov	r0, r4
    5d34:	f017 ff60 	bl	1dbf8 <net_buf_id>
    5d38:	f04f 090c 	mov.w	r9, #12
    5d3c:	fb09 5000 	mla	r0, r9, r0, r5
    5d40:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    5d42:	4620      	mov	r0, r4
    5d44:	f017 ff58 	bl	1dbf8 <net_buf_id>
    5d48:	fb09 5000 	mla	r0, r9, r0, r5
    5d4c:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    5d50:	4620      	mov	r0, r4
    5d52:	f017 ff51 	bl	1dbf8 <net_buf_id>
    5d56:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    5d5a:	2103      	movs	r1, #3
    5d5c:	f8c5 8004 	str.w	r8, [r5, #4]
    5d60:	4650      	mov	r0, sl
    5d62:	f022 fa71 	bl	28248 <net_buf_simple_add>
	hdr->param_len = param_len;
    5d66:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    5d68:	8006      	strh	r6, [r0, #0]
}
    5d6a:	4620      	mov	r0, r4
    5d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5d70:	20001228 	.word	0x20001228
    5d74:	200020c8 	.word	0x200020c8

00005d78 <bt_hci_cmd_send>:
{
    5d78:	b538      	push	{r3, r4, r5, lr}
    5d7a:	4605      	mov	r5, r0
	if (!buf) {
    5d7c:	460c      	mov	r4, r1
    5d7e:	b919      	cbnz	r1, 5d88 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    5d80:	f7ff ffc0 	bl	5d04 <bt_hci_cmd_create>
		if (!buf) {
    5d84:	4604      	mov	r4, r0
    5d86:	b1f0      	cbz	r0, 5dc6 <bt_hci_cmd_send+0x4e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    5d88:	f640 4335 	movw	r3, #3125	; 0xc35
    5d8c:	429d      	cmp	r5, r3
    5d8e:	d114      	bne.n	5dba <bt_hci_cmd_send+0x42>
		return bt_hci_ecc_send(buf);
    5d90:	4620      	mov	r0, r4
    5d92:	f7ff f98f 	bl	50b4 <bt_hci_ecc_send>
		if (err) {
    5d96:	4605      	mov	r5, r0
    5d98:	b168      	cbz	r0, 5db6 <bt_hci_cmd_send+0x3e>
    5d9a:	4b0c      	ldr	r3, [pc, #48]	; (5dcc <bt_hci_cmd_send+0x54>)
    5d9c:	4a0c      	ldr	r2, [pc, #48]	; (5dd0 <bt_hci_cmd_send+0x58>)
    5d9e:	1ad2      	subs	r2, r2, r3
    5da0:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Unable to send to driver (err %d)", err);
    5da2:	0192      	lsls	r2, r2, #6
    5da4:	4601      	mov	r1, r0
    5da6:	f042 0201 	orr.w	r2, r2, #1
    5daa:	480a      	ldr	r0, [pc, #40]	; (5dd4 <bt_hci_cmd_send+0x5c>)
    5dac:	f01b feaa 	bl	21b04 <log_1>
			net_buf_unref(buf);
    5db0:	4620      	mov	r0, r4
    5db2:	f017 ffd7 	bl	1dd64 <net_buf_unref>
}
    5db6:	4628      	mov	r0, r5
    5db8:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    5dba:	4807      	ldr	r0, [pc, #28]	; (5dd8 <bt_hci_cmd_send+0x60>)
    5dbc:	4621      	mov	r1, r4
    5dbe:	f022 fa04 	bl	281ca <net_buf_put>
	return 0;
    5dc2:	2500      	movs	r5, #0
    5dc4:	e7f7      	b.n	5db6 <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
    5dc6:	f06f 0568 	mvn.w	r5, #104	; 0x68
    5dca:	e7f4      	b.n	5db6 <bt_hci_cmd_send+0x3e>
    5dcc:	00029870 	.word	0x00029870
    5dd0:	00029960 	.word	0x00029960
    5dd4:	0002b83c 	.word	0x0002b83c
    5dd8:	200003bc 	.word	0x200003bc

00005ddc <le_conn_param_neg_reply>:
{
    5ddc:	b570      	push	{r4, r5, r6, lr}
    5dde:	4606      	mov	r6, r0
    5de0:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    5de2:	f242 0021 	movw	r0, #8225	; 0x2021
    5de6:	2103      	movs	r1, #3
    5de8:	f7ff ff8c 	bl	5d04 <bt_hci_cmd_create>
	if (!buf) {
    5dec:	4604      	mov	r4, r0
    5dee:	b958      	cbnz	r0, 5e08 <le_conn_param_neg_reply+0x2c>
    5df0:	490c      	ldr	r1, [pc, #48]	; (5e24 <le_conn_param_neg_reply+0x48>)
    5df2:	4b0d      	ldr	r3, [pc, #52]	; (5e28 <le_conn_param_neg_reply+0x4c>)
		BT_ERR("Unable to allocate buffer");
    5df4:	480d      	ldr	r0, [pc, #52]	; (5e2c <le_conn_param_neg_reply+0x50>)
    5df6:	1ac9      	subs	r1, r1, r3
    5df8:	08c9      	lsrs	r1, r1, #3
    5dfa:	0189      	lsls	r1, r1, #6
}
    5dfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    5e00:	f041 0101 	orr.w	r1, r1, #1
    5e04:	f01b be71 	b.w	21aea <log_0>
    5e08:	2103      	movs	r1, #3
    5e0a:	3008      	adds	r0, #8
    5e0c:	f022 fa1c 	bl	28248 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    5e10:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    5e12:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    5e14:	4621      	mov	r1, r4
    5e16:	f242 0021 	movw	r0, #8225	; 0x2021
}
    5e1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    5e1e:	f7ff bfab 	b.w	5d78 <bt_hci_cmd_send>
    5e22:	bf00      	nop
    5e24:	00029960 	.word	0x00029960
    5e28:	00029870 	.word	0x00029870
    5e2c:	0002b8b2 	.word	0x0002b8b2

00005e30 <le_conn_param_req>:
{
    5e30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    5e32:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    5e34:	78d9      	ldrb	r1, [r3, #3]
    5e36:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    5e38:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    5e3a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    5e3e:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    5e42:	7959      	ldrb	r1, [r3, #5]
    5e44:	791a      	ldrb	r2, [r3, #4]
    5e46:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    5e4a:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    5e4e:	799a      	ldrb	r2, [r3, #6]
    5e50:	79d9      	ldrb	r1, [r3, #7]
    5e52:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    5e56:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    5e5a:	7a1a      	ldrb	r2, [r3, #8]
    5e5c:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    5e5e:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    5e60:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    5e64:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
    5e66:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    5e6a:	f002 f997 	bl	819c <bt_conn_lookup_handle>
	if (!conn) {
    5e6e:	4606      	mov	r6, r0
    5e70:	b980      	cbnz	r0, 5e94 <le_conn_param_req+0x64>
    5e72:	4b20      	ldr	r3, [pc, #128]	; (5ef4 <le_conn_param_req+0xc4>)
    5e74:	4a20      	ldr	r2, [pc, #128]	; (5ef8 <le_conn_param_req+0xc8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    5e76:	4821      	ldr	r0, [pc, #132]	; (5efc <le_conn_param_req+0xcc>)
    5e78:	1ad2      	subs	r2, r2, r3
    5e7a:	08d2      	lsrs	r2, r2, #3
    5e7c:	0192      	lsls	r2, r2, #6
    5e7e:	4621      	mov	r1, r4
    5e80:	f042 0201 	orr.w	r2, r2, #1
    5e84:	f01b fe3e 	bl	21b04 <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    5e88:	2102      	movs	r1, #2
    5e8a:	4620      	mov	r0, r4
    5e8c:	f7ff ffa6 	bl	5ddc <le_conn_param_neg_reply>
}
    5e90:	b003      	add	sp, #12
    5e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    5e94:	4669      	mov	r1, sp
    5e96:	f002 faeb 	bl	8470 <le_param_req>
    5e9a:	b938      	cbnz	r0, 5eac <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    5e9c:	211e      	movs	r1, #30
    5e9e:	4620      	mov	r0, r4
    5ea0:	f7ff ff9c 	bl	5ddc <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    5ea4:	4630      	mov	r0, r6
    5ea6:	f01e fc97 	bl	247d8 <bt_conn_unref>
    5eaa:	e7f1      	b.n	5e90 <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    5eac:	210e      	movs	r1, #14
    5eae:	f242 0020 	movw	r0, #8224	; 0x2020
    5eb2:	f7ff ff27 	bl	5d04 <bt_hci_cmd_create>
	if (!buf) {
    5eb6:	4605      	mov	r5, r0
    5eb8:	2800      	cmp	r0, #0
    5eba:	d0f3      	beq.n	5ea4 <le_conn_param_req+0x74>
    5ebc:	210e      	movs	r1, #14
    5ebe:	3008      	adds	r0, #8
    5ec0:	f022 f9c2 	bl	28248 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
    5ec4:	220e      	movs	r2, #14
    5ec6:	4604      	mov	r4, r0
    5ec8:	2100      	movs	r1, #0
    5eca:	f01d ff78 	bl	23dbe <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    5ece:	f8bd 3000 	ldrh.w	r3, [sp]
    5ed2:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    5ed4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    5ed8:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    5eda:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    5ede:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    5ee0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
    5ee4:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    5ee6:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    5ee8:	4629      	mov	r1, r5
    5eea:	f242 0020 	movw	r0, #8224	; 0x2020
    5eee:	f7ff ff43 	bl	5d78 <bt_hci_cmd_send>
    5ef2:	e7d7      	b.n	5ea4 <le_conn_param_req+0x74>
    5ef4:	00029870 	.word	0x00029870
    5ef8:	00029960 	.word	0x00029960
    5efc:	0002b6f7 	.word	0x0002b6f7

00005f00 <conn_auto_initiate>:
{
    5f00:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    5f02:	7a83      	ldrb	r3, [r0, #10]
    5f04:	2b07      	cmp	r3, #7
{
    5f06:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    5f08:	d121      	bne.n	5f4e <conn_auto_initiate+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5f0a:	f3bf 8f5b 	dmb	ish
    5f0e:	6843      	ldr	r3, [r0, #4]
    5f10:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    5f14:	049a      	lsls	r2, r3, #18
    5f16:	d41a      	bmi.n	5f4e <conn_auto_initiate+0x4e>
    5f18:	78c3      	ldrb	r3, [r0, #3]
    5f1a:	b123      	cbz	r3, 5f26 <conn_auto_initiate+0x26>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
    5f1c:	4b0c      	ldr	r3, [pc, #48]	; (5f50 <conn_auto_initiate+0x50>)
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
    5f1e:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
    5f22:	071b      	lsls	r3, r3, #28
    5f24:	d513      	bpl.n	5f4e <conn_auto_initiate+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    5f26:	2102      	movs	r1, #2
    5f28:	f242 0016 	movw	r0, #8214	; 0x2016
    5f2c:	f7ff feea 	bl	5d04 <bt_hci_cmd_create>
	if (!buf) {
    5f30:	4605      	mov	r5, r0
    5f32:	b160      	cbz	r0, 5f4e <conn_auto_initiate+0x4e>
    5f34:	2102      	movs	r1, #2
    5f36:	3008      	adds	r0, #8
    5f38:	f022 f986 	bl	28248 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    5f3c:	8823      	ldrh	r3, [r4, #0]
    5f3e:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    5f40:	4629      	mov	r1, r5
    5f42:	f242 0016 	movw	r0, #8214	; 0x2016
}
    5f46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    5f4a:	f7ff bf15 	b.w	5d78 <bt_hci_cmd_send>
}
    5f4e:	bd38      	pop	{r3, r4, r5, pc}
    5f50:	20000288 	.word	0x20000288

00005f54 <le_remote_feat_complete>:
{
    5f54:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    5f56:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    5f58:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    5f5c:	4630      	mov	r0, r6
    5f5e:	f002 f91d 	bl	819c <bt_conn_lookup_handle>
	if (!conn) {
    5f62:	4604      	mov	r4, r0
    5f64:	b960      	cbnz	r0, 5f80 <le_remote_feat_complete+0x2c>
    5f66:	4a10      	ldr	r2, [pc, #64]	; (5fa8 <le_remote_feat_complete+0x54>)
    5f68:	4b10      	ldr	r3, [pc, #64]	; (5fac <le_remote_feat_complete+0x58>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    5f6a:	4811      	ldr	r0, [pc, #68]	; (5fb0 <le_remote_feat_complete+0x5c>)
    5f6c:	1ad2      	subs	r2, r2, r3
    5f6e:	08d2      	lsrs	r2, r2, #3
    5f70:	0192      	lsls	r2, r2, #6
    5f72:	4631      	mov	r1, r6
    5f74:	f042 0201 	orr.w	r2, r2, #1
}
    5f78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    5f7c:	f01b bdc2 	b.w	21b04 <log_1>
	if (!evt->status) {
    5f80:	782b      	ldrb	r3, [r5, #0]
    5f82:	b923      	cbnz	r3, 5f8e <le_remote_feat_complete+0x3a>
		memcpy(conn->le.features, evt->features,
    5f84:	2208      	movs	r2, #8
    5f86:	1ce9      	adds	r1, r5, #3
    5f88:	30ac      	adds	r0, #172	; 0xac
    5f8a:	f01d ff0d 	bl	23da8 <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    5f8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    5f92:	1d20      	adds	r0, r4, #4
    5f94:	f01e f9ba 	bl	2430c <atomic_or>
	conn_auto_initiate(conn);
    5f98:	4620      	mov	r0, r4
    5f9a:	f7ff ffb1 	bl	5f00 <conn_auto_initiate>
	bt_conn_unref(conn);
    5f9e:	4620      	mov	r0, r4
}
    5fa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    5fa4:	f01e bc18 	b.w	247d8 <bt_conn_unref>
    5fa8:	00029960 	.word	0x00029960
    5fac:	00029870 	.word	0x00029870
    5fb0:	0002b6f7 	.word	0x0002b6f7

00005fb4 <bt_hci_cmd_send_sync>:
{
    5fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5fb8:	4607      	mov	r7, r0
    5fba:	b086      	sub	sp, #24
    5fbc:	4615      	mov	r5, r2
	if (!buf) {
    5fbe:	460c      	mov	r4, r1
    5fc0:	b921      	cbnz	r1, 5fcc <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
    5fc2:	f7ff fe9f 	bl	5d04 <bt_hci_cmd_create>
		if (!buf) {
    5fc6:	4604      	mov	r4, r0
    5fc8:	2800      	cmp	r0, #0
    5fca:	d057      	beq.n	607c <bt_hci_cmd_send_sync+0xc8>
	return z_impl_k_sem_init(sem, initial_count, limit);
    5fcc:	2201      	movs	r2, #1
    5fce:	2100      	movs	r1, #0
    5fd0:	4668      	mov	r0, sp
    5fd2:	f022 fe40 	bl	28c56 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    5fd6:	4620      	mov	r0, r4
    5fd8:	f017 fe0e 	bl	1dbf8 <net_buf_id>
    5fdc:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 6084 <bt_hci_cmd_send_sync+0xd0>
    5fe0:	230c      	movs	r3, #12
    5fe2:	fb03 8000 	mla	r0, r3, r0, r8
    5fe6:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
    5fea:	4620      	mov	r0, r4
    5fec:	f022 f8fa 	bl	281e4 <net_buf_ref>
    5ff0:	4601      	mov	r1, r0
    5ff2:	4825      	ldr	r0, [pc, #148]	; (6088 <bt_hci_cmd_send_sync+0xd4>)
    5ff4:	f022 f8e9 	bl	281ca <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    5ff8:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    5ffc:	2300      	movs	r3, #0
    5ffe:	4668      	mov	r0, sp
    6000:	f01a f82e 	bl	20060 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    6004:	4606      	mov	r6, r0
    6006:	b180      	cbz	r0, 602a <bt_hci_cmd_send_sync+0x76>
    6008:	4a20      	ldr	r2, [pc, #128]	; (608c <bt_hci_cmd_send_sync+0xd8>)
    600a:	4921      	ldr	r1, [pc, #132]	; (6090 <bt_hci_cmd_send_sync+0xdc>)
    600c:	4821      	ldr	r0, [pc, #132]	; (6094 <bt_hci_cmd_send_sync+0xe0>)
    600e:	f44f 7399 	mov.w	r3, #306	; 0x132
    6012:	f01b f92b 	bl	2126c <printk>
    6016:	4820      	ldr	r0, [pc, #128]	; (6098 <bt_hci_cmd_send_sync+0xe4>)
    6018:	4631      	mov	r1, r6
    601a:	f01b f927 	bl	2126c <printk>
    601e:	4040      	eors	r0, r0
    6020:	f380 8811 	msr	BASEPRI, r0
    6024:	f04f 0003 	mov.w	r0, #3
    6028:	df02      	svc	2
	status = cmd(buf)->status;
    602a:	4620      	mov	r0, r4
    602c:	f017 fde4 	bl	1dbf8 <net_buf_id>
    6030:	230c      	movs	r3, #12
    6032:	4358      	muls	r0, r3
    6034:	f818 6000 	ldrb.w	r6, [r8, r0]
	if (status) {
    6038:	b1be      	cbz	r6, 606a <bt_hci_cmd_send_sync+0xb6>
    603a:	4a18      	ldr	r2, [pc, #96]	; (609c <bt_hci_cmd_send_sync+0xe8>)
    603c:	4b18      	ldr	r3, [pc, #96]	; (60a0 <bt_hci_cmd_send_sync+0xec>)
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    603e:	4819      	ldr	r0, [pc, #100]	; (60a4 <bt_hci_cmd_send_sync+0xf0>)
    6040:	1a9b      	subs	r3, r3, r2
    6042:	08db      	lsrs	r3, r3, #3
    6044:	019b      	lsls	r3, r3, #6
    6046:	f043 0302 	orr.w	r3, r3, #2
    604a:	4632      	mov	r2, r6
    604c:	4639      	mov	r1, r7
    604e:	f01b fd6d 	bl	21b2c <log_2>
		net_buf_unref(buf);
    6052:	4620      	mov	r0, r4
    6054:	f017 fe86 	bl	1dd64 <net_buf_unref>
			return -EIO;
    6058:	2e09      	cmp	r6, #9
    605a:	bf0c      	ite	eq
    605c:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
    6060:	f06f 0004 	mvnne.w	r0, #4
}
    6064:	b006      	add	sp, #24
    6066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
    606a:	b115      	cbz	r5, 6072 <bt_hci_cmd_send_sync+0xbe>
		*rsp = buf;
    606c:	602c      	str	r4, [r5, #0]
	return 0;
    606e:	4630      	mov	r0, r6
    6070:	e7f8      	b.n	6064 <bt_hci_cmd_send_sync+0xb0>
		net_buf_unref(buf);
    6072:	4620      	mov	r0, r4
    6074:	f017 fe76 	bl	1dd64 <net_buf_unref>
	return 0;
    6078:	4628      	mov	r0, r5
    607a:	e7f3      	b.n	6064 <bt_hci_cmd_send_sync+0xb0>
			return -ENOBUFS;
    607c:	f06f 0068 	mvn.w	r0, #104	; 0x68
    6080:	e7f0      	b.n	6064 <bt_hci_cmd_send_sync+0xb0>
    6082:	bf00      	nop
    6084:	200020c8 	.word	0x200020c8
    6088:	200003bc 	.word	0x200003bc
    608c:	0002b7c7 	.word	0x0002b7c7
    6090:	0002b7fb 	.word	0x0002b7fb
    6094:	0002b804 	.word	0x0002b804
    6098:	0002b8cc 	.word	0x0002b8cc
    609c:	00029870 	.word	0x00029870
    60a0:	00029960 	.word	0x00029960
    60a4:	0002b8ec 	.word	0x0002b8ec

000060a8 <bt_hci_le_enh_conn_complete>:
{
    60a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    60ac:	f8b0 9001 	ldrh.w	r9, [r0, #1]
		if (disconnected_handles[i] == handle) {
    60b0:	4a80      	ldr	r2, [pc, #512]	; (62b4 <bt_hci_le_enh_conn_complete+0x20c>)
	if (evt->status) {
    60b2:	7804      	ldrb	r4, [r0, #0]
		if (disconnected_handles[i] == handle) {
    60b4:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
    60b6:	ea6f 5309 	mvn.w	r3, r9, lsl #20
    60ba:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
    60be:	b29b      	uxth	r3, r3
    60c0:	4299      	cmp	r1, r3
    60c2:	f04f 0800 	mov.w	r8, #0
			disconnected_handles[i] = 0;
    60c6:	bf08      	it	eq
    60c8:	f8a2 8000 	strheq.w	r8, [r2]
{
    60cc:	b085      	sub	sp, #20
    60ce:	4605      	mov	r5, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    60d0:	fa1f f789 	uxth.w	r7, r9
			return true;
    60d4:	bf08      	it	eq
    60d6:	f04f 0801 	moveq.w	r8, #1
	if (evt->status) {
    60da:	2c00      	cmp	r4, #0
    60dc:	d03a      	beq.n	6154 <bt_hci_le_enh_conn_complete+0xac>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    60de:	2c3c      	cmp	r4, #60	; 0x3c
    60e0:	d12a      	bne.n	6138 <bt_hci_le_enh_conn_complete+0x90>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    60e2:	f001 f8c1 	bl	7268 <bt_le_adv_lookup_legacy>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    60e6:	f3bf 8f5b 	dmb	ish
    60ea:	3010      	adds	r0, #16
    60ec:	e850 3f00 	ldrex	r3, [r0]
    60f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    60f4:	e840 3200 	strex	r2, r3, [r0]
    60f8:	2a00      	cmp	r2, #0
    60fa:	d1f7      	bne.n	60ec <bt_hci_le_enh_conn_complete+0x44>
    60fc:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
    6100:	2000      	movs	r0, #0
    6102:	f7ff fb6b 	bl	57dc <find_pending_connect.part.0>
		if (!conn) {
    6106:	4605      	mov	r5, r0
    6108:	b960      	cbnz	r0, 6124 <bt_hci_le_enh_conn_complete+0x7c>
    610a:	4b6b      	ldr	r3, [pc, #428]	; (62b8 <bt_hci_le_enh_conn_complete+0x210>)
    610c:	496b      	ldr	r1, [pc, #428]	; (62bc <bt_hci_le_enh_conn_complete+0x214>)
			BT_ERR("No pending peripheral connection");
    610e:	486c      	ldr	r0, [pc, #432]	; (62c0 <bt_hci_le_enh_conn_complete+0x218>)
    6110:	1ac9      	subs	r1, r1, r3
    6112:	08c9      	lsrs	r1, r1, #3
    6114:	0189      	lsls	r1, r1, #6
    6116:	f041 0101 	orr.w	r1, r1, #1
}
    611a:	b005      	add	sp, #20
    611c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			BT_ERR("No pending peripheral connection");
    6120:	f01b bce3 	b.w	21aea <log_0>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    6124:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    6126:	2100      	movs	r1, #0
    6128:	f002 f840 	bl	81ac <bt_conn_set_state>
		bt_conn_unref(conn);
    612c:	4628      	mov	r0, r5
}
    612e:	b005      	add	sp, #20
    6130:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
    6134:	f01e bb50 	b.w	247d8 <bt_conn_unref>
    6138:	4b5f      	ldr	r3, [pc, #380]	; (62b8 <bt_hci_le_enh_conn_complete+0x210>)
    613a:	4a60      	ldr	r2, [pc, #384]	; (62bc <bt_hci_le_enh_conn_complete+0x214>)
		BT_WARN("Unexpected status 0x%02x", evt->status);
    613c:	4861      	ldr	r0, [pc, #388]	; (62c4 <bt_hci_le_enh_conn_complete+0x21c>)
    613e:	1ad2      	subs	r2, r2, r3
    6140:	08d2      	lsrs	r2, r2, #3
    6142:	0192      	lsls	r2, r2, #6
    6144:	f042 0202 	orr.w	r2, r2, #2
    6148:	4621      	mov	r1, r4
}
    614a:	b005      	add	sp, #20
    614c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		BT_WARN("Unexpected status 0x%02x", evt->status);
    6150:	f01b bcd8 	b.w	21b04 <log_1>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    6154:	7903      	ldrb	r3, [r0, #4]
    6156:	3b02      	subs	r3, #2
    6158:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    615a:	f100 0604 	add.w	r6, r0, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    615e:	d848      	bhi.n	61f2 <bt_hci_le_enh_conn_complete+0x14a>
	memcpy(dst, src, sizeof(*dst));
    6160:	2207      	movs	r2, #7
    6162:	4631      	mov	r1, r6
    6164:	a802      	add	r0, sp, #8
    6166:	f01d fe1f 	bl	23da8 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    616a:	f89d 3008 	ldrb.w	r3, [sp, #8]
	memcpy(dst, src, sizeof(*dst));
    616e:	2206      	movs	r2, #6
    6170:	3b02      	subs	r3, #2
    6172:	f105 0111 	add.w	r1, r5, #17
    6176:	f10d 0001 	add.w	r0, sp, #1
    617a:	f88d 3008 	strb.w	r3, [sp, #8]
    617e:	f01d fe13 	bl	23da8 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    6182:	2301      	movs	r3, #1
    6184:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
    6188:	78eb      	ldrb	r3, [r5, #3]
    618a:	2b01      	cmp	r3, #1
    618c:	d119      	bne.n	61c2 <bt_hci_le_enh_conn_complete+0x11a>
    618e:	a802      	add	r0, sp, #8
    6190:	f7ff fb24 	bl	57dc <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    6194:	78eb      	ldrb	r3, [r5, #3]
    6196:	2b01      	cmp	r3, #1
    6198:	4604      	mov	r4, r0
    619a:	d111      	bne.n	61c0 <bt_hci_le_enh_conn_complete+0x118>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    619c:	f001 f864 	bl	7268 <bt_le_adv_lookup_legacy>
    61a0:	f3bf 8f5b 	dmb	ish
    61a4:	f100 0310 	add.w	r3, r0, #16
    61a8:	e853 2f00 	ldrex	r2, [r3]
    61ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    61b0:	e843 2100 	strex	r1, r2, [r3]
    61b4:	2900      	cmp	r1, #0
    61b6:	d1f7      	bne.n	61a8 <bt_hci_le_enh_conn_complete+0x100>
    61b8:	f3bf 8f5b 	dmb	ish
		(void)bt_le_lim_adv_cancel_timeout(adv);
    61bc:	f01e fa90 	bl	246e0 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
    61c0:	bb64      	cbnz	r4, 621c <bt_hci_le_enh_conn_complete+0x174>
    61c2:	4a3d      	ldr	r2, [pc, #244]	; (62b8 <bt_hci_le_enh_conn_complete+0x210>)
    61c4:	4c3d      	ldr	r4, [pc, #244]	; (62bc <bt_hci_le_enh_conn_complete+0x214>)
		BT_ERR("No pending conn for peer %s",
    61c6:	4630      	mov	r0, r6
    61c8:	1aa4      	subs	r4, r4, r2
    61ca:	f7fe fdf3 	bl	4db4 <bt_addr_le_str_real>
    61ce:	f7fc fc83 	bl	2ad8 <z_log_strdup>
    61d2:	08e4      	lsrs	r4, r4, #3
    61d4:	01a4      	lsls	r4, r4, #6
    61d6:	f044 0401 	orr.w	r4, r4, #1
    61da:	4601      	mov	r1, r0
    61dc:	4622      	mov	r2, r4
    61de:	483a      	ldr	r0, [pc, #232]	; (62c8 <bt_hci_le_enh_conn_complete+0x220>)
    61e0:	f01b fc90 	bl	21b04 <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    61e4:	211f      	movs	r1, #31
    61e6:	4638      	mov	r0, r7
    61e8:	f01e f89f 	bl	2432a <bt_hci_disconnect>
}
    61ec:	b005      	add	sp, #20
    61ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
    61f2:	78c3      	ldrb	r3, [r0, #3]
    61f4:	2b01      	cmp	r3, #1
    61f6:	bf04      	itt	eq
    61f8:	4b34      	ldreq	r3, [pc, #208]	; (62cc <bt_hci_le_enh_conn_complete+0x224>)
    61fa:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
    61fe:	4631      	mov	r1, r6
    6200:	4620      	mov	r0, r4
    6202:	f01e f955 	bl	244b0 <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
    6206:	2207      	movs	r2, #7
    6208:	4601      	mov	r1, r0
    620a:	a802      	add	r0, sp, #8
    620c:	f01d fdcc 	bl	23da8 <memcpy>
    6210:	2207      	movs	r2, #7
    6212:	4631      	mov	r1, r6
    6214:	4668      	mov	r0, sp
    6216:	f01d fdc7 	bl	23da8 <memcpy>
}
    621a:	e7b5      	b.n	6188 <bt_hci_le_enh_conn_complete+0xe0>
	conn->handle = handle;
    621c:	4620      	mov	r0, r4
	memcpy(dst, src, sizeof(*dst));
    621e:	2207      	movs	r2, #7
    6220:	f820 9b88 	strh.w	r9, [r0], #136
    6224:	a902      	add	r1, sp, #8
    6226:	f01d fdbf 	bl	23da8 <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    622a:	7e2a      	ldrb	r2, [r5, #24]
    622c:	7deb      	ldrb	r3, [r5, #23]
    622e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    6232:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    6236:	7eaa      	ldrb	r2, [r5, #26]
    6238:	7e6b      	ldrb	r3, [r5, #25]
    623a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    623e:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    6242:	7f2a      	ldrb	r2, [r5, #28]
    6244:	7eeb      	ldrb	r3, [r5, #27]
    6246:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    624a:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
    624e:	78eb      	ldrb	r3, [r5, #3]
    6250:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
    6252:	2200      	movs	r2, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    6254:	2b01      	cmp	r3, #1
	conn->err = 0U;
    6256:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    6258:	d117      	bne.n	628a <bt_hci_le_enh_conn_complete+0x1e2>
    625a:	2207      	movs	r2, #7
    625c:	4669      	mov	r1, sp
    625e:	f104 008f 	add.w	r0, r4, #143	; 0x8f
    6262:	f01d fda1 	bl	23da8 <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    6266:	f000 ffff 	bl	7268 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
    626a:	7a21      	ldrb	r1, [r4, #8]
    626c:	4d17      	ldr	r5, [pc, #92]	; (62cc <bt_hci_le_enh_conn_complete+0x224>)
    626e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    6272:	2207      	movs	r2, #7
    6274:	4429      	add	r1, r5
    6276:	f104 0096 	add.w	r0, r4, #150	; 0x96
    627a:	f01d fd95 	bl	23da8 <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
    627e:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
    6282:	065b      	lsls	r3, r3, #25
    6284:	d501      	bpl.n	628a <bt_hci_le_enh_conn_complete+0x1e2>
			bt_le_adv_resume();
    6286:	f001 f9d3 	bl	7630 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    628a:	2107      	movs	r1, #7
    628c:	4620      	mov	r0, r4
    628e:	f001 ff8d 	bl	81ac <bt_conn_set_state>
	if (is_disconnected) {
    6292:	f1b8 0f00 	cmp.w	r8, #0
    6296:	d003      	beq.n	62a0 <bt_hci_le_enh_conn_complete+0x1f8>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    6298:	2101      	movs	r1, #1
    629a:	4620      	mov	r0, r4
    629c:	f001 ff86 	bl	81ac <bt_conn_set_state>
	bt_conn_connected(conn);
    62a0:	4620      	mov	r0, r4
    62a2:	f01e fad5 	bl	24850 <bt_conn_connected>
	conn_auto_initiate(conn);
    62a6:	4620      	mov	r0, r4
    62a8:	f7ff fe2a 	bl	5f00 <conn_auto_initiate>
	bt_conn_unref(conn);
    62ac:	4620      	mov	r0, r4
    62ae:	f01e fa93 	bl	247d8 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    62b2:	e79b      	b.n	61ec <bt_hci_le_enh_conn_complete+0x144>
    62b4:	200036ce 	.word	0x200036ce
    62b8:	00029870 	.word	0x00029870
    62bc:	00029960 	.word	0x00029960
    62c0:	0002b908 	.word	0x0002b908
    62c4:	0002b929 	.word	0x0002b929
    62c8:	0002b942 	.word	0x0002b942
    62cc:	20000288 	.word	0x20000288

000062d0 <hci_event_prio>:
		      sizeof(struct bt_hci_evt_num_completed_packets)),
#endif /* CONFIG_BT_CONN || CONFIG_BT_ISO */
};

void hci_event_prio(struct net_buf *buf)
{
    62d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    62d4:	4604      	mov	r4, r0
	struct net_buf_simple_state state;
	struct bt_hci_evt_hdr *hdr;
	uint8_t evt_flags;

	net_buf_simple_save(&buf->b, &state);
    62d6:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    62da:	4630      	mov	r0, r6
    62dc:	f022 f865 	bl	283aa <net_buf_simple_headroom>
	state->len = buf->len;
    62e0:	f8b4 800c 	ldrh.w	r8, [r4, #12]

	BT_ASSERT(buf->len >= sizeof(*hdr));
    62e4:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
    62e8:	4605      	mov	r5, r0
    62ea:	d80c      	bhi.n	6306 <hci_event_prio+0x36>
    62ec:	4a1c      	ldr	r2, [pc, #112]	; (6360 <hci_event_prio+0x90>)
    62ee:	491d      	ldr	r1, [pc, #116]	; (6364 <hci_event_prio+0x94>)
    62f0:	481d      	ldr	r0, [pc, #116]	; (6368 <hci_event_prio+0x98>)
    62f2:	f640 5315 	movw	r3, #3349	; 0xd15
    62f6:	f01a ffb9 	bl	2126c <printk>
    62fa:	4040      	eors	r0, r0
    62fc:	f380 8811 	msr	BASEPRI, r0
    6300:	f04f 0003 	mov.w	r0, #3
    6304:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    6306:	4630      	mov	r0, r6
    6308:	2102      	movs	r1, #2
    630a:	f022 f815 	bl	28338 <net_buf_simple_pull_mem>
    630e:	4607      	mov	r7, r0

	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    6310:	7800      	ldrb	r0, [r0, #0]
    6312:	f01d ffe9 	bl	242e8 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    6316:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    6318:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    631a:	d40c      	bmi.n	6336 <hci_event_prio+0x66>
    631c:	4a10      	ldr	r2, [pc, #64]	; (6360 <hci_event_prio+0x90>)
    631e:	4913      	ldr	r1, [pc, #76]	; (636c <hci_event_prio+0x9c>)
    6320:	4811      	ldr	r0, [pc, #68]	; (6368 <hci_event_prio+0x98>)
    6322:	f640 5319 	movw	r3, #3353	; 0xd19
    6326:	f01a ffa1 	bl	2126c <printk>
    632a:	4040      	eors	r0, r0
    632c:	f380 8811 	msr	BASEPRI, r0
    6330:	f04f 0003 	mov.w	r0, #3
    6334:	df02      	svc	2

	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    6336:	2305      	movs	r3, #5
    6338:	4a0d      	ldr	r2, [pc, #52]	; (6370 <hci_event_prio+0xa0>)
    633a:	7838      	ldrb	r0, [r7, #0]
    633c:	4621      	mov	r1, r4
    633e:	f7ff fa6d 	bl	581c <handle_event>

	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    6342:	07b3      	lsls	r3, r6, #30
    6344:	d507      	bpl.n	6356 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    6346:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    6348:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    634c:	fa10 f585 	uxtah	r5, r0, r5
    6350:	60a5      	str	r5, [r4, #8]
		net_buf_simple_restore(&buf->b, &state);
	} else {
		net_buf_unref(buf);
	}
}
    6352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    6356:	4620      	mov	r0, r4
}
    6358:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    635c:	f017 bd02 	b.w	1dd64 <net_buf_unref>
    6360:	0002b7c7 	.word	0x0002b7c7
    6364:	0002b95e 	.word	0x0002b95e
    6368:	0002b804 	.word	0x0002b804
    636c:	0002b977 	.word	0x0002b977
    6370:	00029f50 	.word	0x00029f50

00006374 <bt_recv>:

int bt_recv(struct net_buf *buf)
{
    6374:	b570      	push	{r4, r5, r6, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    6376:	7d01      	ldrb	r1, [r0, #20]
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_DBG("buf %p len %u", buf, buf->len);

	switch (bt_buf_get_type(buf)) {
    6378:	2901      	cmp	r1, #1
{
    637a:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    637c:	d04b      	beq.n	6416 <bt_recv+0xa2>
    637e:	2903      	cmp	r1, #3
    6380:	d178      	bne.n	6474 <bt_recv+0x100>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    6382:	8983      	ldrh	r3, [r0, #12]
    6384:	2b03      	cmp	r3, #3
    6386:	d80c      	bhi.n	63a2 <bt_recv+0x2e>
    6388:	4a42      	ldr	r2, [pc, #264]	; (6494 <bt_recv+0x120>)
    638a:	4943      	ldr	r1, [pc, #268]	; (6498 <bt_recv+0x124>)
    638c:	4843      	ldr	r0, [pc, #268]	; (649c <bt_recv+0x128>)
    638e:	f44f 73db 	mov.w	r3, #438	; 0x1b6
    6392:	f01a ff6b 	bl	2126c <printk>
    6396:	4040      	eors	r0, r0
    6398:	f380 8811 	msr	BASEPRI, r0
    639c:	f04f 0003 	mov.w	r0, #3
    63a0:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    63a2:	2104      	movs	r1, #4
    63a4:	f104 0008 	add.w	r0, r4, #8
    63a8:	f021 ffc6 	bl	28338 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    63ac:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    63ae:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    63b0:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    63b2:	23ff      	movs	r3, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
    63b4:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    63b8:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
    63ba:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    63bc:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
    63be:	d00d      	beq.n	63dc <bt_recv+0x68>
    63c0:	4837      	ldr	r0, [pc, #220]	; (64a0 <bt_recv+0x12c>)
    63c2:	4b38      	ldr	r3, [pc, #224]	; (64a4 <bt_recv+0x130>)
    63c4:	1a1b      	subs	r3, r3, r0
    63c6:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    63c8:	019b      	lsls	r3, r3, #6
    63ca:	4837      	ldr	r0, [pc, #220]	; (64a8 <bt_recv+0x134>)
    63cc:	f043 0301 	orr.w	r3, r3, #1
    63d0:	f01b fbac 	bl	21b2c <log_2>
	net_buf_unref(buf);
    63d4:	4620      	mov	r0, r4
    63d6:	f017 fcc5 	bl	1dd64 <net_buf_unref>
    63da:	e01a      	b.n	6412 <bt_recv+0x9e>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    63dc:	f001 fede 	bl	819c <bt_conn_lookup_handle>
	if (!conn) {
    63e0:	4605      	mov	r5, r0
    63e2:	b958      	cbnz	r0, 63fc <bt_recv+0x88>
    63e4:	4b2e      	ldr	r3, [pc, #184]	; (64a0 <bt_recv+0x12c>)
    63e6:	4a2f      	ldr	r2, [pc, #188]	; (64a4 <bt_recv+0x130>)
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    63e8:	8ae1      	ldrh	r1, [r4, #22]
    63ea:	4830      	ldr	r0, [pc, #192]	; (64ac <bt_recv+0x138>)
    63ec:	1ad2      	subs	r2, r2, r3
    63ee:	08d2      	lsrs	r2, r2, #3
    63f0:	0192      	lsls	r2, r2, #6
    63f2:	f042 0201 	orr.w	r2, r2, #1
    63f6:	f01b fb85 	bl	21b04 <log_1>
		net_buf_unref(buf);
    63fa:	e7eb      	b.n	63d4 <bt_recv+0x60>
	acl(buf)->index = bt_conn_index(conn);
    63fc:	f001 ffbc 	bl	8378 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    6400:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    6402:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    6404:	4621      	mov	r1, r4
    6406:	4628      	mov	r0, r5
    6408:	f001 fda0 	bl	7f4c <bt_conn_recv>
	bt_conn_unref(conn);
    640c:	4628      	mov	r0, r5
    640e:	f01e f9e3 	bl	247d8 <bt_conn_unref>

		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
			net_buf_put(&bt_dev.rx_queue, buf);
		}
#endif
		return 0;
    6412:	2000      	movs	r0, #0
	default:
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
		return -EINVAL;
	}
}
    6414:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    6416:	8983      	ldrh	r3, [r0, #12]
    6418:	2b01      	cmp	r3, #1
    641a:	d80c      	bhi.n	6436 <bt_recv+0xc2>
    641c:	4a1d      	ldr	r2, [pc, #116]	; (6494 <bt_recv+0x120>)
    641e:	491e      	ldr	r1, [pc, #120]	; (6498 <bt_recv+0x124>)
    6420:	481e      	ldr	r0, [pc, #120]	; (649c <bt_recv+0x128>)
    6422:	f640 130d 	movw	r3, #2317	; 0x90d
    6426:	f01a ff21 	bl	2126c <printk>
    642a:	4040      	eors	r0, r0
    642c:	f380 8811 	msr	BASEPRI, r0
    6430:	f04f 0003 	mov.w	r0, #3
    6434:	df02      	svc	2
    6436:	2102      	movs	r1, #2
    6438:	f104 0008 	add.w	r0, r4, #8
    643c:	f021 ff7c 	bl	28338 <net_buf_simple_pull_mem>
    6440:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    6442:	7800      	ldrb	r0, [r0, #0]
    6444:	f01d ff50 	bl	242e8 <bt_hci_evt_get_flags>
    6448:	0783      	lsls	r3, r0, #30
    644a:	d40c      	bmi.n	6466 <bt_recv+0xf2>
    644c:	4a11      	ldr	r2, [pc, #68]	; (6494 <bt_recv+0x120>)
    644e:	4918      	ldr	r1, [pc, #96]	; (64b0 <bt_recv+0x13c>)
    6450:	4812      	ldr	r0, [pc, #72]	; (649c <bt_recv+0x128>)
    6452:	f640 1311 	movw	r3, #2321	; 0x911
    6456:	f01a ff09 	bl	2126c <printk>
    645a:	4040      	eors	r0, r0
    645c:	f380 8811 	msr	BASEPRI, r0
    6460:	f04f 0003 	mov.w	r0, #3
    6464:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    6466:	4a13      	ldr	r2, [pc, #76]	; (64b4 <bt_recv+0x140>)
    6468:	7828      	ldrb	r0, [r5, #0]
    646a:	2304      	movs	r3, #4
    646c:	4621      	mov	r1, r4
    646e:	f7ff f9d5 	bl	581c <handle_event>
    6472:	e7af      	b.n	63d4 <bt_recv+0x60>
    6474:	4b0a      	ldr	r3, [pc, #40]	; (64a0 <bt_recv+0x12c>)
    6476:	4a0b      	ldr	r2, [pc, #44]	; (64a4 <bt_recv+0x130>)
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    6478:	480f      	ldr	r0, [pc, #60]	; (64b8 <bt_recv+0x144>)
    647a:	1ad2      	subs	r2, r2, r3
    647c:	08d2      	lsrs	r2, r2, #3
    647e:	0192      	lsls	r2, r2, #6
    6480:	f042 0201 	orr.w	r2, r2, #1
    6484:	f01b fb3e 	bl	21b04 <log_1>
		net_buf_unref(buf);
    6488:	4620      	mov	r0, r4
    648a:	f017 fc6b 	bl	1dd64 <net_buf_unref>
		return -EINVAL;
    648e:	f06f 0015 	mvn.w	r0, #21
    6492:	e7bf      	b.n	6414 <bt_recv+0xa0>
    6494:	0002b7c7 	.word	0x0002b7c7
    6498:	0002b95e 	.word	0x0002b95e
    649c:	0002b804 	.word	0x0002b804
    64a0:	00029870 	.word	0x00029870
    64a4:	00029960 	.word	0x00029960
    64a8:	0002b990 	.word	0x0002b990
    64ac:	0002b9b4 	.word	0x0002b9b4
    64b0:	0002b9d6 	.word	0x0002b9d6
    64b4:	00029f20 	.word	0x00029f20
    64b8:	0002ba04 	.word	0x0002ba04

000064bc <bt_recv_prio>:

#if defined(CONFIG_BT_RECV_IS_RX_THREAD)
int bt_recv_prio(struct net_buf *buf)
{
    64bc:	b510      	push	{r4, lr}
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    64be:	7d03      	ldrb	r3, [r0, #20]
    64c0:	2b01      	cmp	r3, #1
{
    64c2:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    64c4:	d00c      	beq.n	64e0 <bt_recv_prio+0x24>
    64c6:	4a09      	ldr	r2, [pc, #36]	; (64ec <bt_recv_prio+0x30>)
    64c8:	4909      	ldr	r1, [pc, #36]	; (64f0 <bt_recv_prio+0x34>)
    64ca:	480a      	ldr	r0, [pc, #40]	; (64f4 <bt_recv_prio+0x38>)
    64cc:	f640 535c 	movw	r3, #3420	; 0xd5c
    64d0:	f01a fecc 	bl	2126c <printk>
    64d4:	4040      	eors	r0, r0
    64d6:	f380 8811 	msr	BASEPRI, r0
    64da:	f04f 0003 	mov.w	r0, #3
    64de:	df02      	svc	2

	hci_event_prio(buf);
    64e0:	4620      	mov	r0, r4
    64e2:	f7ff fef5 	bl	62d0 <hci_event_prio>

	return 0;
}
    64e6:	2000      	movs	r0, #0
    64e8:	bd10      	pop	{r4, pc}
    64ea:	bf00      	nop
    64ec:	0002b7c7 	.word	0x0002b7c7
    64f0:	0002ba18 	.word	0x0002ba18
    64f4:	0002b804 	.word	0x0002b804

000064f8 <bt_hci_driver_register>:
#endif /* defined(CONFIG_BT_RECV_IS_RX_THREAD) */

int bt_hci_driver_register(const struct bt_hci_driver *drv)
{
	if (bt_dev.drv) {
    64f8:	4a08      	ldr	r2, [pc, #32]	; (651c <bt_hci_driver_register+0x24>)
{
    64fa:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    64fc:	f8d2 014c 	ldr.w	r0, [r2, #332]	; 0x14c
    6500:	b930      	cbnz	r0, 6510 <bt_hci_driver_register+0x18>
		return -EALREADY;
	}

	if (!drv->open || !drv->send) {
    6502:	68d9      	ldr	r1, [r3, #12]
    6504:	b139      	cbz	r1, 6516 <bt_hci_driver_register+0x1e>
    6506:	6919      	ldr	r1, [r3, #16]
    6508:	b129      	cbz	r1, 6516 <bt_hci_driver_register+0x1e>
		return -EINVAL;
	}

	bt_dev.drv = drv;
    650a:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
	BT_DBG("Registered %s", drv->name ? drv->name : "");

	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");

	return 0;
    650e:	4770      	bx	lr
		return -EALREADY;
    6510:	f06f 0077 	mvn.w	r0, #119	; 0x77
    6514:	4770      	bx	lr
		return -EINVAL;
    6516:	f06f 0015 	mvn.w	r0, #21
}
    651a:	4770      	bx	lr
    651c:	20000288 	.word	0x20000288

00006520 <bt_finalize_init>:

void bt_finalize_init(void)
{
    6520:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6524:	4d2e      	ldr	r5, [pc, #184]	; (65e0 <bt_finalize_init+0xc0>)
    6526:	4c2f      	ldr	r4, [pc, #188]	; (65e4 <bt_finalize_init+0xc4>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    6528:	4e2f      	ldr	r6, [pc, #188]	; (65e8 <bt_finalize_init+0xc8>)
		BT_INFO("Identity[%d]: %s",
    652a:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 65ec <bt_finalize_init+0xcc>
{
    652e:	b087      	sub	sp, #28
    6530:	2102      	movs	r1, #2
    6532:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
    6536:	f01d fee9 	bl	2430c <atomic_or>
	atomic_set_bit(bt_dev.flags, BT_DEV_READY);

	if (IS_ENABLED(CONFIG_BT_OBSERVER)) {
		bt_le_scan_update(false);
    653a:	2000      	movs	r0, #0
    653c:	f001 f8f2 	bl	7724 <bt_le_scan_update>
    6540:	4b2b      	ldr	r3, [pc, #172]	; (65f0 <bt_finalize_init+0xd0>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    6542:	492c      	ldr	r1, [pc, #176]	; (65f4 <bt_finalize_init+0xd4>)
    6544:	1ae4      	subs	r4, r4, r3
    6546:	79eb      	ldrb	r3, [r5, #7]
    6548:	4628      	mov	r0, r5
    654a:	2b01      	cmp	r3, #1
    654c:	bf88      	it	hi
    654e:	460e      	movhi	r6, r1
    6550:	f7fe fc30 	bl	4db4 <bt_addr_le_str_real>
    6554:	f7fc fac0 	bl	2ad8 <z_log_strdup>
    6558:	08e4      	lsrs	r4, r4, #3
    655a:	01a4      	lsls	r4, r4, #6
    655c:	f044 0803 	orr.w	r8, r4, #3
    6560:	4602      	mov	r2, r0
    6562:	4631      	mov	r1, r6
    6564:	4824      	ldr	r0, [pc, #144]	; (65f8 <bt_finalize_init+0xd8>)
    6566:	4643      	mov	r3, r8
    6568:	f01b fae0 	bl	21b2c <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    656c:	462f      	mov	r7, r5
    656e:	2601      	movs	r6, #1
    6570:	79eb      	ldrb	r3, [r5, #7]
    6572:	429e      	cmp	r6, r3
    6574:	f107 0707 	add.w	r7, r7, #7
    6578:	db25      	blt.n	65c6 <bt_finalize_init+0xa6>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    657a:	f895 6068 	ldrb.w	r6, [r5, #104]	; 0x68
    657e:	4630      	mov	r0, r6
    6580:	f7ff f828 	bl	55d4 <ver_str>
    6584:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
    6588:	9304      	str	r3, [sp, #16]
    658a:	f044 0403 	orr.w	r4, r4, #3
    658e:	f8b5 306e 	ldrh.w	r3, [r5, #110]	; 0x6e
    6592:	9305      	str	r3, [sp, #20]
    6594:	e9cd 0602 	strd	r0, r6, [sp, #8]
    6598:	4623      	mov	r3, r4
    659a:	a902      	add	r1, sp, #8
    659c:	2204      	movs	r2, #4
    659e:	4817      	ldr	r0, [pc, #92]	; (65fc <bt_finalize_init+0xdc>)
    65a0:	f01b faf9 	bl	21b96 <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    65a4:	f895 6069 	ldrb.w	r6, [r5, #105]	; 0x69
    65a8:	4630      	mov	r0, r6
    65aa:	f7ff f813 	bl	55d4 <ver_str>
    65ae:	f8b5 306c 	ldrh.w	r3, [r5, #108]	; 0x6c
    65b2:	f8ad 4000 	strh.w	r4, [sp]
    65b6:	4601      	mov	r1, r0
    65b8:	4632      	mov	r2, r6
    65ba:	4811      	ldr	r0, [pc, #68]	; (6600 <bt_finalize_init+0xe0>)
    65bc:	f01b facf 	bl	21b5e <log_3>
	}

	bt_dev_show_info();
}
    65c0:	b007      	add	sp, #28
    65c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_INFO("Identity[%d]: %s",
    65c6:	4638      	mov	r0, r7
    65c8:	f7fe fbf4 	bl	4db4 <bt_addr_le_str_real>
    65cc:	f7fc fa84 	bl	2ad8 <z_log_strdup>
    65d0:	4631      	mov	r1, r6
    65d2:	4602      	mov	r2, r0
    65d4:	4643      	mov	r3, r8
    65d6:	4648      	mov	r0, r9
    65d8:	f01b faa8 	bl	21b2c <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    65dc:	3601      	adds	r6, #1
    65de:	e7c7      	b.n	6570 <bt_finalize_init+0x50>
    65e0:	20000288 	.word	0x20000288
    65e4:	00029960 	.word	0x00029960
    65e8:	0002d5c0 	.word	0x0002d5c0
    65ec:	0002ba4e 	.word	0x0002ba4e
    65f0:	00029870 	.word	0x00029870
    65f4:	0002ba3b 	.word	0x0002ba3b
    65f8:	0002ba3f 	.word	0x0002ba3f
    65fc:	0002ba5f 	.word	0x0002ba5f
    6600:	0002ba9d 	.word	0x0002ba9d

00006604 <bt_init>:

static int bt_init(void)
{
    6604:	b570      	push	{r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    6606:	4dbc      	ldr	r5, [pc, #752]	; (68f8 <bt_init+0x2f4>)
    6608:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
    660c:	6899      	ldr	r1, [r3, #8]
    660e:	f011 0101 	ands.w	r1, r1, #1
{
    6612:	b086      	sub	sp, #24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    6614:	d123      	bne.n	665e <bt_init+0x5a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    6616:	aa01      	add	r2, sp, #4
    6618:	f640 4003 	movw	r0, #3075	; 0xc03
    661c:	f7ff fcca 	bl	5fb4 <bt_hci_cmd_send_sync>
		if (err) {
    6620:	4604      	mov	r4, r0
    6622:	2800      	cmp	r0, #0
    6624:	d178      	bne.n	6718 <bt_init+0x114>
	uint8_t status = buf->data[0];
    6626:	9b01      	ldr	r3, [sp, #4]
    6628:	689b      	ldr	r3, [r3, #8]
	if (status) {
    662a:	781b      	ldrb	r3, [r3, #0]
    662c:	b9a3      	cbnz	r3, 6658 <bt_init+0x54>
		bt_scan_reset();
    662e:	f001 f873 	bl	7718 <bt_scan_reset>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6632:	f3bf 8f5b 	dmb	ish
    6636:	462b      	mov	r3, r5
    6638:	f853 2fcc 	ldr.w	r2, [r3, #204]!
    663c:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    6640:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    6644:	f3bf 8f5b 	dmb	ish
    6648:	e853 1f00 	ldrex	r1, [r3]
    664c:	e843 2000 	strex	r0, r2, [r3]
    6650:	2800      	cmp	r0, #0
    6652:	d1f9      	bne.n	6648 <bt_init+0x44>
    6654:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    6658:	9801      	ldr	r0, [sp, #4]
    665a:	f017 fb83 	bl	1dd64 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    665e:	aa01      	add	r2, sp, #4
    6660:	2100      	movs	r1, #0
    6662:	f241 0003 	movw	r0, #4099	; 0x1003
    6666:	f7ff fca5 	bl	5fb4 <bt_hci_cmd_send_sync>
	if (err) {
    666a:	4604      	mov	r4, r0
    666c:	2800      	cmp	r0, #0
    666e:	d153      	bne.n	6718 <bt_init+0x114>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    6670:	9b01      	ldr	r3, [sp, #4]
    6672:	48a2      	ldr	r0, [pc, #648]	; (68fc <bt_init+0x2f8>)
    6674:	6899      	ldr	r1, [r3, #8]
    6676:	2208      	movs	r2, #8
    6678:	3101      	adds	r1, #1
    667a:	f01d fb95 	bl	23da8 <memcpy>
	net_buf_unref(rsp);
    667e:	9801      	ldr	r0, [sp, #4]
    6680:	f017 fb70 	bl	1dd64 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    6684:	4621      	mov	r1, r4
    6686:	aa01      	add	r2, sp, #4
    6688:	f241 0001 	movw	r0, #4097	; 0x1001
    668c:	f7ff fc92 	bl	5fb4 <bt_hci_cmd_send_sync>
	if (err) {
    6690:	4604      	mov	r4, r0
    6692:	2800      	cmp	r0, #0
    6694:	d140      	bne.n	6718 <bt_init+0x114>
	read_local_ver_complete(rsp);
    6696:	9801      	ldr	r0, [sp, #4]
    6698:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    669a:	785a      	ldrb	r2, [r3, #1]
    669c:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    66a0:	78d9      	ldrb	r1, [r3, #3]
    66a2:	789a      	ldrb	r2, [r3, #2]
    66a4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    66a8:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
    66ac:	791a      	ldrb	r2, [r3, #4]
    66ae:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    66b2:	7a19      	ldrb	r1, [r3, #8]
    66b4:	79da      	ldrb	r2, [r3, #7]
    66b6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    66ba:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    66be:	795a      	ldrb	r2, [r3, #5]
    66c0:	799b      	ldrb	r3, [r3, #6]
    66c2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    66c6:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
    66ca:	f017 fb4b 	bl	1dd64 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    66ce:	4621      	mov	r1, r4
    66d0:	aa01      	add	r2, sp, #4
    66d2:	f241 0002 	movw	r0, #4098	; 0x1002
    66d6:	f7ff fc6d 	bl	5fb4 <bt_hci_cmd_send_sync>
	if (err) {
    66da:	4604      	mov	r4, r0
    66dc:	b9e0      	cbnz	r0, 6718 <bt_init+0x114>
	memcpy(bt_dev.supported_commands, rp->commands,
    66de:	9b01      	ldr	r3, [sp, #4]
    66e0:	4887      	ldr	r0, [pc, #540]	; (6900 <bt_init+0x2fc>)
    66e2:	6899      	ldr	r1, [r3, #8]
    66e4:	2240      	movs	r2, #64	; 0x40
    66e6:	3101      	adds	r1, #1
    66e8:	f01d fb5e 	bl	23da8 <memcpy>
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
    66ec:	4884      	ldr	r0, [pc, #528]	; (6900 <bt_init+0x2fc>)
    66ee:	f01d fbbe 	bl	23e6e <bt_hci_ecc_supported_commands>
	net_buf_unref(rsp);
    66f2:	9801      	ldr	r0, [sp, #4]
    66f4:	f017 fb36 	bl	1dd64 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    66f8:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    66fc:	0658      	lsls	r0, r3, #25
    66fe:	d40e      	bmi.n	671e <bt_init+0x11a>
    6700:	4b80      	ldr	r3, [pc, #512]	; (6904 <bt_init+0x300>)
    6702:	4981      	ldr	r1, [pc, #516]	; (6908 <bt_init+0x304>)
		BT_ERR("Non-LE capable controller detected!");
    6704:	4881      	ldr	r0, [pc, #516]	; (690c <bt_init+0x308>)
    6706:	1ac9      	subs	r1, r1, r3
    6708:	08c9      	lsrs	r1, r1, #3
    670a:	0189      	lsls	r1, r1, #6
    670c:	f041 0101 	orr.w	r1, r1, #1
    6710:	f01b f9eb 	bl	21aea <log_0>
		return -ENODEV;
    6714:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    6718:	4620      	mov	r0, r4
    671a:	b006      	add	sp, #24
    671c:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    671e:	4621      	mov	r1, r4
    6720:	aa01      	add	r2, sp, #4
    6722:	f242 0003 	movw	r0, #8195	; 0x2003
    6726:	f7ff fc45 	bl	5fb4 <bt_hci_cmd_send_sync>
	if (err) {
    672a:	4604      	mov	r4, r0
    672c:	2800      	cmp	r0, #0
    672e:	d1f3      	bne.n	6718 <bt_init+0x114>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    6730:	9b01      	ldr	r3, [sp, #4]
    6732:	4877      	ldr	r0, [pc, #476]	; (6910 <bt_init+0x30c>)
    6734:	6899      	ldr	r1, [r3, #8]
    6736:	2208      	movs	r2, #8
    6738:	3101      	adds	r1, #1
    673a:	f01d fb35 	bl	23da8 <memcpy>
	net_buf_unref(rsp);
    673e:	9801      	ldr	r0, [sp, #4]
    6740:	f017 fb10 	bl	1dd64 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    6744:	4621      	mov	r1, r4
    6746:	aa01      	add	r2, sp, #4
    6748:	f242 0002 	movw	r0, #8194	; 0x2002
    674c:	f7ff fc32 	bl	5fb4 <bt_hci_cmd_send_sync>
		if (err) {
    6750:	4604      	mov	r4, r0
    6752:	2800      	cmp	r0, #0
    6754:	d1e0      	bne.n	6718 <bt_init+0x114>
		le_read_buffer_size_complete(rsp);
    6756:	9b01      	ldr	r3, [sp, #4]
    6758:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    675a:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    675e:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
    6762:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
    6764:	b121      	cbz	r1, 6770 <bt_init+0x16c>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    6766:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
    6768:	486a      	ldr	r0, [pc, #424]	; (6914 <bt_init+0x310>)
    676a:	4611      	mov	r1, r2
    676c:	f022 fa73 	bl	28c56 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    6770:	9801      	ldr	r0, [sp, #4]
    6772:	f017 faf7 	bl	1dd64 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    6776:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
    677a:	f016 0620 	ands.w	r6, r6, #32
    677e:	f000 809f 	beq.w	68c0 <bt_init+0x2bc>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    6782:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
    6786:	0719      	lsls	r1, r3, #28
    6788:	f100 80ca 	bmi.w	6920 <bt_init+0x31c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    678c:	2108      	movs	r1, #8
    678e:	f242 0001 	movw	r0, #8193	; 0x2001
    6792:	f7ff fab7 	bl	5d04 <bt_hci_cmd_create>
	if (!buf) {
    6796:	4604      	mov	r4, r0
    6798:	2800      	cmp	r0, #0
    679a:	f000 8098 	beq.w	68ce <bt_init+0x2ca>
	return net_buf_simple_add(&buf->b, len);
    679e:	2108      	movs	r1, #8
    67a0:	4408      	add	r0, r1
    67a2:	f021 fd51 	bl	28248 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    67a6:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    67aa:	f895 209a 	ldrb.w	r2, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    67ae:	f013 0f02 	tst.w	r3, #2
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    67b2:	f002 0206 	and.w	r2, r2, #6
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    67b6:	bf0c      	ite	eq
    67b8:	230f      	moveq	r3, #15
    67ba:	232f      	movne	r3, #47	; 0x2f
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    67bc:	2a06      	cmp	r2, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    67be:	bf08      	it	eq
    67c0:	f443 73c0 	orreq.w	r3, r3, #384	; 0x180
	dst[0] = val;
    67c4:	2200      	movs	r2, #0
    67c6:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    67c8:	0a1b      	lsrs	r3, r3, #8
    67ca:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    67cc:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    67ce:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    67d0:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    67d2:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    67d4:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    67d6:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    67d8:	4621      	mov	r1, r4
    67da:	f242 0001 	movw	r0, #8193	; 0x2001
    67de:	f7ff fbe9 	bl	5fb4 <bt_hci_cmd_send_sync>
	if (err) {
    67e2:	4604      	mov	r4, r0
    67e4:	2800      	cmp	r0, #0
    67e6:	d197      	bne.n	6718 <bt_init+0x114>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    67e8:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    67ec:	069a      	lsls	r2, r3, #26
    67ee:	d41d      	bmi.n	682c <bt_init+0x228>
	if (bt_dev.le.acl_mtu) {
    67f0:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
    67f4:	b9d1      	cbnz	r1, 682c <bt_init+0x228>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    67f6:	aa01      	add	r2, sp, #4
    67f8:	f241 0005 	movw	r0, #4101	; 0x1005
    67fc:	f7ff fbda 	bl	5fb4 <bt_hci_cmd_send_sync>
	if (err) {
    6800:	4604      	mov	r4, r0
    6802:	2800      	cmp	r0, #0
    6804:	d188      	bne.n	6718 <bt_init+0x114>
	if (bt_dev.le.acl_mtu) {
    6806:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
    680a:	b963      	cbnz	r3, 6826 <bt_init+0x222>
    680c:	9b01      	ldr	r3, [sp, #4]
    680e:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    6810:	785a      	ldrb	r2, [r3, #1]
    6812:	7899      	ldrb	r1, [r3, #2]
    6814:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    6818:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    681c:	889a      	ldrh	r2, [r3, #4]
    681e:	483d      	ldr	r0, [pc, #244]	; (6914 <bt_init+0x310>)
    6820:	4611      	mov	r1, r2
    6822:	f022 fa18 	bl	28c56 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    6826:	9801      	ldr	r0, [sp, #4]
    6828:	f017 fa9c 	bl	1dd64 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    682c:	2108      	movs	r1, #8
    682e:	f640 4001 	movw	r0, #3073	; 0xc01
    6832:	f7ff fa67 	bl	5d04 <bt_hci_cmd_create>
	if (!buf) {
    6836:	4604      	mov	r4, r0
    6838:	2800      	cmp	r0, #0
    683a:	d048      	beq.n	68ce <bt_init+0x2ca>
    683c:	2108      	movs	r1, #8
    683e:	4408      	add	r0, r1
    6840:	f021 fd02 	bl	28248 <net_buf_simple_add>
	dst[0] = val;
    6844:	2310      	movs	r3, #16
    6846:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    6848:	2388      	movs	r3, #136	; 0x88
    684a:	7043      	strb	r3, [r0, #1]
    684c:	2302      	movs	r3, #2
	dst[0] = val;
    684e:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    6850:	70c3      	strb	r3, [r0, #3]
    6852:	2320      	movs	r3, #32
	dst[0] = val;
    6854:	7082      	strb	r2, [r0, #2]
    6856:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    6858:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    685a:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    685c:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    685e:	4621      	mov	r1, r4
    6860:	f640 4001 	movw	r0, #3073	; 0xc01
    6864:	f7ff fba6 	bl	5fb4 <bt_hci_cmd_send_sync>
	if (err) {
    6868:	4604      	mov	r4, r0
    686a:	2800      	cmp	r0, #0
    686c:	f47f af54 	bne.w	6718 <bt_init+0x114>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    6870:	4601      	mov	r1, r0
    6872:	466a      	mov	r2, sp
    6874:	f64f 4001 	movw	r0, #64513	; 0xfc01
    6878:	f7ff fb9c 	bl	5fb4 <bt_hci_cmd_send_sync>
    687c:	4e22      	ldr	r6, [pc, #136]	; (6908 <bt_init+0x304>)
    687e:	4b21      	ldr	r3, [pc, #132]	; (6904 <bt_init+0x300>)
    6880:	1af6      	subs	r6, r6, r3
    6882:	08f6      	lsrs	r6, r6, #3
    6884:	01b6      	lsls	r6, r6, #6
	if (err) {
    6886:	2800      	cmp	r0, #0
    6888:	d05f      	beq.n	694a <bt_init+0x346>
		BT_WARN("Vendor HCI extensions not available");
    688a:	4823      	ldr	r0, [pc, #140]	; (6918 <bt_init+0x314>)
    688c:	f046 0102 	orr.w	r1, r6, #2
			BT_WARN("Failed to read supported vendor features");
    6890:	f01b f92b 	bl	21aea <log_0>
	err = bt_id_init();
    6894:	f01d fe3b 	bl	2450e <bt_id_init>
	if (err) {
    6898:	4604      	mov	r4, r0
    689a:	2800      	cmp	r0, #0
    689c:	f47f af3c 	bne.w	6718 <bt_init+0x114>
		err = bt_conn_init();
    68a0:	f002 f818 	bl	88d4 <bt_conn_init>
		if (err) {
    68a4:	4604      	mov	r4, r0
    68a6:	2800      	cmp	r0, #0
    68a8:	f47f af36 	bne.w	6718 <bt_init+0x114>
		if (!bt_dev.id_count) {
    68ac:	79eb      	ldrb	r3, [r5, #7]
    68ae:	2b00      	cmp	r3, #0
    68b0:	f040 80b8 	bne.w	6a24 <bt_init+0x420>
			BT_INFO("No ID address. App must call settings_load()");
    68b4:	4819      	ldr	r0, [pc, #100]	; (691c <bt_init+0x318>)
    68b6:	f046 0103 	orr.w	r1, r6, #3
    68ba:	f01b f916 	bl	21aea <log_0>
			return 0;
    68be:	e72b      	b.n	6718 <bt_init+0x114>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    68c0:	2102      	movs	r1, #2
    68c2:	f640 406d 	movw	r0, #3181	; 0xc6d
    68c6:	f7ff fa1d 	bl	5d04 <bt_hci_cmd_create>
		if (!buf) {
    68ca:	4604      	mov	r4, r0
    68cc:	b910      	cbnz	r0, 68d4 <bt_init+0x2d0>
		return -ENOBUFS;
    68ce:	f06f 0468 	mvn.w	r4, #104	; 0x68
    68d2:	e721      	b.n	6718 <bt_init+0x114>
    68d4:	2102      	movs	r1, #2
    68d6:	3008      	adds	r0, #8
    68d8:	f021 fcb6 	bl	28248 <net_buf_simple_add>
		cp_le->le = 0x01;
    68dc:	2301      	movs	r3, #1
    68de:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    68e0:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    68e2:	4621      	mov	r1, r4
    68e4:	4632      	mov	r2, r6
    68e6:	f640 406d 	movw	r0, #3181	; 0xc6d
    68ea:	f7ff fb63 	bl	5fb4 <bt_hci_cmd_send_sync>
		if (err) {
    68ee:	4604      	mov	r4, r0
    68f0:	2800      	cmp	r0, #0
    68f2:	f43f af46 	beq.w	6782 <bt_init+0x17e>
    68f6:	e70f      	b.n	6718 <bt_init+0x114>
    68f8:	20000288 	.word	0x20000288
    68fc:	200002f8 	.word	0x200002f8
    6900:	20000300 	.word	0x20000300
    6904:	00029870 	.word	0x00029870
    6908:	00029960 	.word	0x00029960
    690c:	0002bac4 	.word	0x0002bac4
    6910:	20000358 	.word	0x20000358
    6914:	20000388 	.word	0x20000388
    6918:	0002bae8 	.word	0x0002bae8
    691c:	0002bbbc 	.word	0x0002bbbc
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    6920:	aa01      	add	r2, sp, #4
    6922:	2100      	movs	r1, #0
    6924:	f242 001c 	movw	r0, #8220	; 0x201c
    6928:	f7ff fb44 	bl	5fb4 <bt_hci_cmd_send_sync>
		if (err) {
    692c:	4604      	mov	r4, r0
    692e:	2800      	cmp	r0, #0
    6930:	f47f aef2 	bne.w	6718 <bt_init+0x114>
		le_read_supp_states_complete(rsp);
    6934:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    6936:	6883      	ldr	r3, [r0, #8]
    6938:	f8d3 2001 	ldr.w	r2, [r3, #1]
    693c:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    6940:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
    6944:	f017 fa0e 	bl	1dd64 <net_buf_unref>
    6948:	e720      	b.n	678c <bt_init+0x188>
	rp.info = (void *)rsp->data;
    694a:	9b00      	ldr	r3, [sp, #0]
	BT_INFO("HW Platform: %s (0x%04x)",
    694c:	4839      	ldr	r0, [pc, #228]	; (6a34 <bt_init+0x430>)
	rp.info = (void *)rsp->data;
    694e:	689c      	ldr	r4, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    6950:	f8b4 2001 	ldrh.w	r2, [r4, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
    6954:	2a03      	cmp	r2, #3
		return plat_str[platform];
    6956:	bf96      	itet	ls
    6958:	4937      	ldrls	r1, [pc, #220]	; (6a38 <bt_init+0x434>)
	return "unknown";
    695a:	4938      	ldrhi	r1, [pc, #224]	; (6a3c <bt_init+0x438>)
		return plat_str[platform];
    695c:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    6960:	f046 0303 	orr.w	r3, r6, #3
    6964:	f01b f8e2 	bl	21b2c <log_2>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    6968:	f8b4 1001 	ldrh.w	r1, [r4, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    696c:	f8b4 2003 	ldrh.w	r2, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    6970:	2902      	cmp	r1, #2
	BT_INFO("HW Variant: %s (0x%04x)",
    6972:	f046 0303 	orr.w	r3, r6, #3
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    6976:	d12e      	bne.n	69d6 <bt_init+0x3d2>
	if (variant < ARRAY_SIZE(nordic_str)) {
    6978:	2a03      	cmp	r2, #3
    697a:	d82c      	bhi.n	69d6 <bt_init+0x3d2>
		return nordic_str[variant];
    697c:	4930      	ldr	r1, [pc, #192]	; (6a40 <bt_init+0x43c>)
    697e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    6982:	4830      	ldr	r0, [pc, #192]	; (6a44 <bt_init+0x440>)
    6984:	f01b f8d2 	bl	21b2c <log_2>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    6988:	7962      	ldrb	r2, [r4, #5]
    698a:	482f      	ldr	r0, [pc, #188]	; (6a48 <bt_init+0x444>)
	if (variant < ARRAY_SIZE(var_str)) {
    698c:	2a03      	cmp	r2, #3
		return var_str[variant];
    698e:	bf96      	itet	ls
    6990:	492e      	ldrls	r1, [pc, #184]	; (6a4c <bt_init+0x448>)
	return "unknown";
    6992:	492a      	ldrhi	r1, [pc, #168]	; (6a3c <bt_init+0x438>)
		return var_str[variant];
    6994:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    6998:	e9cd 1201 	strd	r1, r2, [sp, #4]
    699c:	79a2      	ldrb	r2, [r4, #6]
    699e:	9203      	str	r2, [sp, #12]
    69a0:	f8b4 2007 	ldrh.w	r2, [r4, #7]
    69a4:	9204      	str	r2, [sp, #16]
    69a6:	f8d4 2009 	ldr.w	r2, [r4, #9]
    69aa:	9205      	str	r2, [sp, #20]
    69ac:	f046 0303 	orr.w	r3, r6, #3
    69b0:	2205      	movs	r2, #5
    69b2:	a901      	add	r1, sp, #4
    69b4:	f01b f8ef 	bl	21b96 <log_n>
	net_buf_unref(rsp);
    69b8:	9800      	ldr	r0, [sp, #0]
    69ba:	f017 f9d3 	bl	1dd64 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    69be:	466a      	mov	r2, sp
    69c0:	2100      	movs	r1, #0
    69c2:	f64f 4002 	movw	r0, #64514	; 0xfc02
    69c6:	f7ff faf5 	bl	5fb4 <bt_hci_cmd_send_sync>
	if (err) {
    69ca:	4604      	mov	r4, r0
    69cc:	b128      	cbz	r0, 69da <bt_init+0x3d6>
		BT_WARN("Failed to read supported vendor commands");
    69ce:	4820      	ldr	r0, [pc, #128]	; (6a50 <bt_init+0x44c>)
    69d0:	f046 0102 	orr.w	r1, r6, #2
    69d4:	e75c      	b.n	6890 <bt_init+0x28c>
		return "unknown";
    69d6:	4919      	ldr	r1, [pc, #100]	; (6a3c <bt_init+0x438>)
    69d8:	e7d3      	b.n	6982 <bt_init+0x37e>
	rp.cmds = (void *)rsp->data;
    69da:	9b00      	ldr	r3, [sp, #0]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    69dc:	481d      	ldr	r0, [pc, #116]	; (6a54 <bt_init+0x450>)
    69de:	6899      	ldr	r1, [r3, #8]
    69e0:	2202      	movs	r2, #2
    69e2:	3101      	adds	r1, #1
    69e4:	f01d f9e0 	bl	23da8 <memcpy>
	net_buf_unref(rsp);
    69e8:	9800      	ldr	r0, [sp, #0]
    69ea:	f017 f9bb 	bl	1dd64 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    69ee:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
    69f2:	075b      	lsls	r3, r3, #29
    69f4:	f57f af4e 	bpl.w	6894 <bt_init+0x290>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    69f8:	466a      	mov	r2, sp
    69fa:	4621      	mov	r1, r4
    69fc:	f64f 4003 	movw	r0, #64515	; 0xfc03
    6a00:	f7ff fad8 	bl	5fb4 <bt_hci_cmd_send_sync>
		if (err) {
    6a04:	b118      	cbz	r0, 6a0e <bt_init+0x40a>
			BT_WARN("Failed to read supported vendor features");
    6a06:	4814      	ldr	r0, [pc, #80]	; (6a58 <bt_init+0x454>)
    6a08:	f046 0102 	orr.w	r1, r6, #2
    6a0c:	e740      	b.n	6890 <bt_init+0x28c>
		rp.feat = (void *)rsp->data;
    6a0e:	9b00      	ldr	r3, [sp, #0]
		memcpy(bt_dev.vs_features, rp.feat->features,
    6a10:	4812      	ldr	r0, [pc, #72]	; (6a5c <bt_init+0x458>)
    6a12:	6899      	ldr	r1, [r3, #8]
    6a14:	2201      	movs	r2, #1
    6a16:	4411      	add	r1, r2
    6a18:	f01d f9c6 	bl	23da8 <memcpy>
		net_buf_unref(rsp);
    6a1c:	9800      	ldr	r0, [sp, #0]
    6a1e:	f017 f9a1 	bl	1dd64 <net_buf_unref>
    6a22:	e737      	b.n	6894 <bt_init+0x290>
    6a24:	2104      	movs	r1, #4
    6a26:	480e      	ldr	r0, [pc, #56]	; (6a60 <bt_init+0x45c>)
    6a28:	f01d fc70 	bl	2430c <atomic_or>
	bt_finalize_init();
    6a2c:	f7ff fd78 	bl	6520 <bt_finalize_init>
	return 0;
    6a30:	e672      	b.n	6718 <bt_init+0x114>
    6a32:	bf00      	nop
    6a34:	0002bb0c 	.word	0x0002bb0c
    6a38:	00029f40 	.word	0x00029f40
    6a3c:	0002b65b 	.word	0x0002b65b
    6a40:	00029f10 	.word	0x00029f10
    6a44:	0002bb25 	.word	0x0002bb25
    6a48:	0002bb3d 	.word	0x0002bb3d
    6a4c:	00029f78 	.word	0x00029f78
    6a50:	0002bb6a 	.word	0x0002bb6a
    6a54:	20000341 	.word	0x20000341
    6a58:	0002bb93 	.word	0x0002bb93
    6a5c:	20000340 	.word	0x20000340
    6a60:	20000354 	.word	0x20000354

00006a64 <init_work>:

static void init_work(struct k_work *work)
{
    6a64:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    6a66:	f7ff fdcd 	bl	6604 <bt_init>
	if (ready_cb) {
    6a6a:	4b03      	ldr	r3, [pc, #12]	; (6a78 <init_work+0x14>)
    6a6c:	681b      	ldr	r3, [r3, #0]
    6a6e:	b113      	cbz	r3, 6a76 <init_work+0x12>
		ready_cb(err);
	}
}
    6a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    6a74:	4718      	bx	r3
}
    6a76:	bd10      	pop	{r4, pc}
    6a78:	200020f8 	.word	0x200020f8

00006a7c <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    6a7c:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
    6a7e:	4d2d      	ldr	r5, [pc, #180]	; (6b34 <bt_enable+0xb8>)
    6a80:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
{
    6a84:	b088      	sub	sp, #32
    6a86:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    6a88:	b973      	cbnz	r3, 6aa8 <bt_enable+0x2c>
    6a8a:	4b2b      	ldr	r3, [pc, #172]	; (6b38 <bt_enable+0xbc>)
    6a8c:	492b      	ldr	r1, [pc, #172]	; (6b3c <bt_enable+0xc0>)
		BT_ERR("No HCI driver registered");
    6a8e:	482c      	ldr	r0, [pc, #176]	; (6b40 <bt_enable+0xc4>)
    6a90:	1ac9      	subs	r1, r1, r3
    6a92:	08c9      	lsrs	r1, r1, #3
    6a94:	0189      	lsls	r1, r1, #6
    6a96:	f041 0101 	orr.w	r1, r1, #1
    6a9a:	f01b f826 	bl	21aea <log_0>
		return -ENODEV;
    6a9e:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    6aa2:	4620      	mov	r0, r4
    6aa4:	b008      	add	sp, #32
    6aa6:	bd70      	pop	{r4, r5, r6, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    6aa8:	2101      	movs	r1, #1
    6aaa:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
    6aae:	f01d fc2d 	bl	2430c <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    6ab2:	07c3      	lsls	r3, r0, #31
    6ab4:	d43b      	bmi.n	6b2e <bt_enable+0xb2>
		err = bt_settings_init();
    6ab6:	f7fe fc8d 	bl	53d4 <bt_settings_init>
		if (err) {
    6aba:	4604      	mov	r4, r0
    6abc:	2800      	cmp	r0, #0
    6abe:	d1f0      	bne.n	6aa2 <bt_enable+0x26>
	ready_cb = cb;
    6ac0:	4b20      	ldr	r3, [pc, #128]	; (6b44 <bt_enable+0xc8>)
    6ac2:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    6ac4:	2200      	movs	r2, #0
    6ac6:	2300      	movs	r3, #0
    6ac8:	e9cd 2306 	strd	r2, r3, [sp, #24]
    6acc:	f06f 0308 	mvn.w	r3, #8
    6ad0:	e9cd 0302 	strd	r0, r3, [sp, #8]
    6ad4:	e9cd 0000 	strd	r0, r0, [sp]
    6ad8:	9004      	str	r0, [sp, #16]
    6ada:	4b1b      	ldr	r3, [pc, #108]	; (6b48 <bt_enable+0xcc>)
    6adc:	491b      	ldr	r1, [pc, #108]	; (6b4c <bt_enable+0xd0>)
    6ade:	481c      	ldr	r0, [pc, #112]	; (6b50 <bt_enable+0xd4>)
    6ae0:	f44f 7220 	mov.w	r2, #640	; 0x280
    6ae4:	f019 f90a 	bl	1fcfc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    6ae8:	491a      	ldr	r1, [pc, #104]	; (6b54 <bt_enable+0xd8>)
    6aea:	4819      	ldr	r0, [pc, #100]	; (6b50 <bt_enable+0xd4>)
    6aec:	f021 ffa9 	bl	28a42 <z_impl_k_thread_name_set>
		bt_hci_ecc_init();
    6af0:	f7fe fb4e 	bl	5190 <bt_hci_ecc_init>
	err = bt_dev.drv->open();
    6af4:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
    6af8:	68db      	ldr	r3, [r3, #12]
    6afa:	4798      	blx	r3
	if (err) {
    6afc:	4604      	mov	r4, r0
    6afe:	b158      	cbz	r0, 6b18 <bt_enable+0x9c>
    6b00:	4b0d      	ldr	r3, [pc, #52]	; (6b38 <bt_enable+0xbc>)
    6b02:	4a0e      	ldr	r2, [pc, #56]	; (6b3c <bt_enable+0xc0>)
    6b04:	1ad2      	subs	r2, r2, r3
    6b06:	08d2      	lsrs	r2, r2, #3
		BT_ERR("HCI driver open failed (%d)", err);
    6b08:	0192      	lsls	r2, r2, #6
    6b0a:	4601      	mov	r1, r0
    6b0c:	f042 0201 	orr.w	r2, r2, #1
    6b10:	4811      	ldr	r0, [pc, #68]	; (6b58 <bt_enable+0xdc>)
    6b12:	f01a fff7 	bl	21b04 <log_1>
		return err;
    6b16:	e7c4      	b.n	6aa2 <bt_enable+0x26>
	if (!cb) {
    6b18:	b926      	cbnz	r6, 6b24 <bt_enable+0xa8>
}
    6b1a:	b008      	add	sp, #32
    6b1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    6b20:	f7ff bd70 	b.w	6604 <bt_init>
	k_work_submit(&bt_dev.init);
    6b24:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    6b28:	f019 fbe0 	bl	202ec <k_work_submit>
	return 0;
    6b2c:	e7b9      	b.n	6aa2 <bt_enable+0x26>
		return -EALREADY;
    6b2e:	f06f 0477 	mvn.w	r4, #119	; 0x77
    6b32:	e7b6      	b.n	6aa2 <bt_enable+0x26>
    6b34:	20000288 	.word	0x20000288
    6b38:	00029870 	.word	0x00029870
    6b3c:	00029960 	.word	0x00029960
    6b40:	0002bbe9 	.word	0x0002bbe9
    6b44:	200020f8 	.word	0x200020f8
    6b48:	00005a5d 	.word	0x00005a5d
    6b4c:	200044e0 	.word	0x200044e0
    6b50:	200014c0 	.word	0x200014c0
    6b54:	0002bc02 	.word	0x0002bc02
    6b58:	0002bc08 	.word	0x0002bc08

00006b5c <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
    6b5c:	4800      	ldr	r0, [pc, #0]	; (6b60 <bt_get_name+0x4>)
    6b5e:	4770      	bx	lr
    6b60:	0002bc24 	.word	0x0002bc24

00006b64 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    6b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    6b66:	4f0b      	ldr	r7, [pc, #44]	; (6b94 <id_find+0x30>)
{
    6b68:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    6b6a:	2500      	movs	r5, #0
    6b6c:	79fb      	ldrb	r3, [r7, #7]
    6b6e:	b2ec      	uxtb	r4, r5
    6b70:	42a3      	cmp	r3, r4
    6b72:	d802      	bhi.n	6b7a <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    6b74:	f06f 0401 	mvn.w	r4, #1
    6b78:	e009      	b.n	6b8e <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    6b7a:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
    6b7e:	2207      	movs	r2, #7
    6b80:	4439      	add	r1, r7
    6b82:	4630      	mov	r0, r6
    6b84:	f01d f8ff 	bl	23d86 <memcmp>
    6b88:	3501      	adds	r5, #1
    6b8a:	2800      	cmp	r0, #0
    6b8c:	d1ee      	bne.n	6b6c <id_find+0x8>
}
    6b8e:	4620      	mov	r0, r4
    6b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6b92:	bf00      	nop
    6b94:	20000288 	.word	0x20000288

00006b98 <set_random_address>:
{
    6b98:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
    6b9a:	4914      	ldr	r1, [pc, #80]	; (6bec <set_random_address+0x54>)
    6b9c:	2206      	movs	r2, #6
    6b9e:	4605      	mov	r5, r0
    6ba0:	f01d f8f1 	bl	23d86 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    6ba4:	4604      	mov	r4, r0
    6ba6:	b1e0      	cbz	r0, 6be2 <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    6ba8:	2106      	movs	r1, #6
    6baa:	f242 0005 	movw	r0, #8197	; 0x2005
    6bae:	f7ff f8a9 	bl	5d04 <bt_hci_cmd_create>
	if (!buf) {
    6bb2:	4604      	mov	r4, r0
    6bb4:	b1b8      	cbz	r0, 6be6 <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    6bb6:	2206      	movs	r2, #6
    6bb8:	4629      	mov	r1, r5
    6bba:	3008      	adds	r0, #8
    6bbc:	f021 fb4a 	bl	28254 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    6bc0:	4621      	mov	r1, r4
    6bc2:	2200      	movs	r2, #0
    6bc4:	f242 0005 	movw	r0, #8197	; 0x2005
    6bc8:	f7ff f9f4 	bl	5fb4 <bt_hci_cmd_send_sync>
	if (err) {
    6bcc:	4604      	mov	r4, r0
    6bce:	b940      	cbnz	r0, 6be2 <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
    6bd0:	2206      	movs	r2, #6
    6bd2:	4806      	ldr	r0, [pc, #24]	; (6bec <set_random_address+0x54>)
    6bd4:	4629      	mov	r1, r5
    6bd6:	f01d f8e7 	bl	23da8 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    6bda:	4b05      	ldr	r3, [pc, #20]	; (6bf0 <set_random_address+0x58>)
    6bdc:	2201      	movs	r2, #1
    6bde:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
    6be2:	4620      	mov	r0, r4
    6be4:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    6be6:	f06f 0468 	mvn.w	r4, #104	; 0x68
    6bea:	e7fa      	b.n	6be2 <set_random_address+0x4a>
    6bec:	200002e9 	.word	0x200002e9
    6bf0:	20000288 	.word	0x20000288

00006bf4 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    6bf4:	b530      	push	{r4, r5, lr}
    6bf6:	4604      	mov	r4, r0
    6bf8:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    6bfa:	460d      	mov	r5, r1
    6bfc:	b1e9      	cbz	r1, 6c3a <id_create.constprop.0+0x46>
    6bfe:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    6c00:	2207      	movs	r2, #7
    6c02:	a902      	add	r1, sp, #8
    6c04:	4628      	mov	r0, r5
    6c06:	9302      	str	r3, [sp, #8]
    6c08:	f8cd 300b 	str.w	r3, [sp, #11]
    6c0c:	f01d f8bb 	bl	23d86 <memcmp>
    6c10:	b198      	cbz	r0, 6c3a <id_create.constprop.0+0x46>
	memcpy(dst, src, sizeof(*dst));
    6c12:	4817      	ldr	r0, [pc, #92]	; (6c70 <id_create.constprop.0+0x7c>)
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    6c14:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    6c18:	2207      	movs	r2, #7
    6c1a:	4629      	mov	r1, r5
    6c1c:	4420      	add	r0, r4
    6c1e:	f01d f8c3 	bl	23da8 <memcpy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    6c22:	4814      	ldr	r0, [pc, #80]	; (6c74 <id_create.constprop.0+0x80>)
    6c24:	f01d fc34 	bl	24490 <atomic_get>
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    6c28:	0782      	lsls	r2, r0, #30
    6c2a:	f3c0 0340 	ubfx	r3, r0, #1, #1
    6c2e:	d51d      	bpl.n	6c6c <id_create.constprop.0+0x78>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
    6c30:	f7fe fb88 	bl	5344 <bt_settings_save_id>
	}

	return 0;
    6c34:	2000      	movs	r0, #0
}
    6c36:	b005      	add	sp, #20
    6c38:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
    6c3a:	4668      	mov	r0, sp
    6c3c:	f01d fb46 	bl	242cc <bt_addr_le_create_static>
			if (err) {
    6c40:	2800      	cmp	r0, #0
    6c42:	d1f8      	bne.n	6c36 <id_create.constprop.0+0x42>
		} while (id_find(&new_addr) >= 0);
    6c44:	4668      	mov	r0, sp
    6c46:	f7ff ff8d 	bl	6b64 <id_find>
    6c4a:	2800      	cmp	r0, #0
    6c4c:	daf5      	bge.n	6c3a <id_create.constprop.0+0x46>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    6c4e:	4808      	ldr	r0, [pc, #32]	; (6c70 <id_create.constprop.0+0x7c>)
    6c50:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    6c54:	4404      	add	r4, r0
    6c56:	2207      	movs	r2, #7
    6c58:	4669      	mov	r1, sp
    6c5a:	4620      	mov	r0, r4
    6c5c:	f01d f8a4 	bl	23da8 <memcpy>
		if (addr) {
    6c60:	2d00      	cmp	r5, #0
    6c62:	d0de      	beq.n	6c22 <id_create.constprop.0+0x2e>
    6c64:	2207      	movs	r2, #7
    6c66:	4621      	mov	r1, r4
    6c68:	4628      	mov	r0, r5
    6c6a:	e7d8      	b.n	6c1e <id_create.constprop.0+0x2a>
	return 0;
    6c6c:	4618      	mov	r0, r3
    6c6e:	e7e2      	b.n	6c36 <id_create.constprop.0+0x42>
    6c70:	20000288 	.word	0x20000288
    6c74:	20000354 	.word	0x20000354

00006c78 <bt_id_adv_random_addr_check>:
{
    6c78:	b508      	push	{r3, lr}
    6c7a:	4805      	ldr	r0, [pc, #20]	; (6c90 <bt_id_adv_random_addr_check+0x18>)
    6c7c:	f01d fc08 	bl	24490 <atomic_get>
	if (!(atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING) ||
    6c80:	0503      	lsls	r3, r0, #20
    6c82:	d402      	bmi.n	6c8a <bt_id_adv_random_addr_check+0x12>
    6c84:	4802      	ldr	r0, [pc, #8]	; (6c90 <bt_id_adv_random_addr_check+0x18>)
    6c86:	f01d fc03 	bl	24490 <atomic_get>
}
    6c8a:	2001      	movs	r0, #1
    6c8c:	bd08      	pop	{r3, pc}
    6c8e:	bf00      	nop
    6c90:	20000354 	.word	0x20000354

00006c94 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    6c94:	b573      	push	{r0, r1, r4, r5, r6, lr}
    6c96:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    6c98:	4605      	mov	r5, r0
    6c9a:	b918      	cbnz	r0, 6ca4 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    6c9c:	b344      	cbz	r4, 6cf0 <bt_id_create+0x5c>
		return -EINVAL;
    6c9e:	f06f 0015 	mvn.w	r0, #21
    6ca2:	e023      	b.n	6cec <bt_id_create+0x58>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    6ca4:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    6ca6:	2207      	movs	r2, #7
    6ca8:	4669      	mov	r1, sp
    6caa:	9300      	str	r3, [sp, #0]
    6cac:	f8cd 3003 	str.w	r3, [sp, #3]
    6cb0:	f01d f869 	bl	23d86 <memcmp>
    6cb4:	2800      	cmp	r0, #0
    6cb6:	d0f1      	beq.n	6c9c <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    6cb8:	782b      	ldrb	r3, [r5, #0]
    6cba:	2b01      	cmp	r3, #1
    6cbc:	d104      	bne.n	6cc8 <bt_id_create+0x34>
    6cbe:	79ab      	ldrb	r3, [r5, #6]
    6cc0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    6cc4:	2bc0      	cmp	r3, #192	; 0xc0
    6cc6:	d00a      	beq.n	6cde <bt_id_create+0x4a>
    6cc8:	4b1b      	ldr	r3, [pc, #108]	; (6d38 <bt_id_create+0xa4>)
    6cca:	491c      	ldr	r1, [pc, #112]	; (6d3c <bt_id_create+0xa8>)
			BT_ERR("Only static random identity address supported");
    6ccc:	481c      	ldr	r0, [pc, #112]	; (6d40 <bt_id_create+0xac>)
    6cce:	1ac9      	subs	r1, r1, r3
    6cd0:	08c9      	lsrs	r1, r1, #3
    6cd2:	0189      	lsls	r1, r1, #6
    6cd4:	f041 0101 	orr.w	r1, r1, #1
    6cd8:	f01a ff07 	bl	21aea <log_0>
			return -EINVAL;
    6cdc:	e7df      	b.n	6c9e <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    6cde:	4628      	mov	r0, r5
    6ce0:	f7ff ff40 	bl	6b64 <id_find>
    6ce4:	2800      	cmp	r0, #0
    6ce6:	dbd9      	blt.n	6c9c <bt_id_create+0x8>
			return -EALREADY;
    6ce8:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
    6cec:	b002      	add	sp, #8
    6cee:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    6cf0:	4e14      	ldr	r6, [pc, #80]	; (6d44 <bt_id_create+0xb0>)
    6cf2:	79f3      	ldrb	r3, [r6, #7]
    6cf4:	2b01      	cmp	r3, #1
    6cf6:	d01c      	beq.n	6d32 <bt_id_create+0x9e>
    6cf8:	f106 00cc 	add.w	r0, r6, #204	; 0xcc
    6cfc:	f01d fbc8 	bl	24490 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    6d00:	07c3      	lsls	r3, r0, #31
    6d02:	d40b      	bmi.n	6d1c <bt_id_create+0x88>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
    6d04:	2d00      	cmp	r5, #0
    6d06:	d0ca      	beq.n	6c9e <bt_id_create+0xa>
    6d08:	2207      	movs	r2, #7
    6d0a:	4669      	mov	r1, sp
    6d0c:	4628      	mov	r0, r5
    6d0e:	9400      	str	r4, [sp, #0]
    6d10:	f8cd 4003 	str.w	r4, [sp, #3]
    6d14:	f01d f837 	bl	23d86 <memcmp>
    6d18:	2800      	cmp	r0, #0
    6d1a:	d0c0      	beq.n	6c9e <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
    6d1c:	79f4      	ldrb	r4, [r6, #7]
	err = id_create(new_id, addr, irk);
    6d1e:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
    6d20:	1c63      	adds	r3, r4, #1
	err = id_create(new_id, addr, irk);
    6d22:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    6d24:	71f3      	strb	r3, [r6, #7]
	err = id_create(new_id, addr, irk);
    6d26:	f7ff ff65 	bl	6bf4 <id_create.constprop.0>
	new_id = bt_dev.id_count++;
    6d2a:	2800      	cmp	r0, #0
    6d2c:	bf08      	it	eq
    6d2e:	4620      	moveq	r0, r4
    6d30:	e7dc      	b.n	6cec <bt_id_create+0x58>
		return -ENOMEM;
    6d32:	f06f 000b 	mvn.w	r0, #11
    6d36:	e7d9      	b.n	6cec <bt_id_create+0x58>
    6d38:	00029870 	.word	0x00029870
    6d3c:	00029970 	.word	0x00029970
    6d40:	0002bc2b 	.word	0x0002bc2b
    6d44:	20000288 	.word	0x20000288

00006d48 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
    6d48:	b570      	push	{r4, r5, r6, lr}
    6d4a:	b086      	sub	sp, #24
    6d4c:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    6d4e:	aa01      	add	r2, sp, #4
    6d50:	2100      	movs	r1, #0
    6d52:	f241 0009 	movw	r0, #4105	; 0x1009
    6d56:	f7ff f92d 	bl	5fb4 <bt_hci_cmd_send_sync>
	if (err) {
    6d5a:	4604      	mov	r4, r0
    6d5c:	b160      	cbz	r0, 6d78 <bt_id_read_public_addr+0x30>
    6d5e:	491e      	ldr	r1, [pc, #120]	; (6dd8 <bt_id_read_public_addr+0x90>)
    6d60:	4b1e      	ldr	r3, [pc, #120]	; (6ddc <bt_id_read_public_addr+0x94>)
		BT_WARN("Failed to read public address");
    6d62:	481f      	ldr	r0, [pc, #124]	; (6de0 <bt_id_read_public_addr+0x98>)
    6d64:	1ac9      	subs	r1, r1, r3
    6d66:	08c9      	lsrs	r1, r1, #3
    6d68:	0189      	lsls	r1, r1, #6
    6d6a:	f041 0102 	orr.w	r1, r1, #2
    6d6e:	f01a febc 	bl	21aea <log_0>

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
		return 0U;
    6d72:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
    6d74:	b006      	add	sp, #24
    6d76:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    6d78:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    6d7a:	9002      	str	r0, [sp, #8]
    6d7c:	689d      	ldr	r5, [r3, #8]
    6d7e:	f8ad 000c 	strh.w	r0, [sp, #12]
    6d82:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
    6d84:	2206      	movs	r2, #6
    6d86:	a902      	add	r1, sp, #8
    6d88:	4628      	mov	r0, r5
    6d8a:	f01c fffc 	bl	23d86 <memcmp>
    6d8e:	b918      	cbnz	r0, 6d98 <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
    6d90:	9801      	ldr	r0, [sp, #4]
    6d92:	f016 ffe7 	bl	1dd64 <net_buf_unref>
    6d96:	e7ec      	b.n	6d72 <bt_id_read_public_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    6d98:	23ff      	movs	r3, #255	; 0xff
    6d9a:	2206      	movs	r2, #6
    6d9c:	a904      	add	r1, sp, #16
    6d9e:	4628      	mov	r0, r5
    6da0:	f88d 3010 	strb.w	r3, [sp, #16]
    6da4:	f88d 3011 	strb.w	r3, [sp, #17]
    6da8:	f88d 3012 	strb.w	r3, [sp, #18]
    6dac:	f88d 3013 	strb.w	r3, [sp, #19]
    6db0:	f88d 3014 	strb.w	r3, [sp, #20]
    6db4:	f88d 3015 	strb.w	r3, [sp, #21]
    6db8:	f01c ffe5 	bl	23d86 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    6dbc:	2800      	cmp	r0, #0
    6dbe:	d0e7      	beq.n	6d90 <bt_id_read_public_addr+0x48>
	memcpy(dst, src, sizeof(*dst));
    6dc0:	2206      	movs	r2, #6
    6dc2:	4629      	mov	r1, r5
    6dc4:	1c70      	adds	r0, r6, #1
    6dc6:	f01c ffef 	bl	23da8 <memcpy>
	net_buf_unref(rsp);
    6dca:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    6dcc:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
    6dce:	f016 ffc9 	bl	1dd64 <net_buf_unref>
	return 1U;
    6dd2:	2001      	movs	r0, #1
    6dd4:	e7ce      	b.n	6d74 <bt_id_read_public_addr+0x2c>
    6dd6:	bf00      	nop
    6dd8:	00029970 	.word	0x00029970
    6ddc:	00029870 	.word	0x00029870
    6de0:	0002bc59 	.word	0x0002bc59

00006de4 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
    6de4:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
    6de6:	4668      	mov	r0, sp
    6de8:	f7ff ffae 	bl	6d48 <bt_id_read_public_addr>
    6dec:	4b04      	ldr	r3, [pc, #16]	; (6e00 <bt_setup_public_id_addr+0x1c>)
    6dee:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
    6df0:	b118      	cbz	r0, 6dfa <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
    6df2:	4669      	mov	r1, sp
    6df4:	2000      	movs	r0, #0
    6df6:	f7ff fefd 	bl	6bf4 <id_create.constprop.0>
}
    6dfa:	b003      	add	sp, #12
    6dfc:	f85d fb04 	ldr.w	pc, [sp], #4
    6e00:	20000288 	.word	0x20000288

00006e04 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    6e04:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    6e08:	4b25      	ldr	r3, [pc, #148]	; (6ea0 <bt_read_static_addr+0x9c>)
    6e0a:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
    6e0e:	f014 0401 	ands.w	r4, r4, #1
{
    6e12:	4607      	mov	r7, r0
    6e14:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    6e16:	d10a      	bne.n	6e2e <bt_read_static_addr+0x2a>
    6e18:	4922      	ldr	r1, [pc, #136]	; (6ea4 <bt_read_static_addr+0xa0>)
    6e1a:	4b23      	ldr	r3, [pc, #140]	; (6ea8 <bt_read_static_addr+0xa4>)
		BT_WARN("Read Static Addresses command not available");
    6e1c:	4823      	ldr	r0, [pc, #140]	; (6eac <bt_read_static_addr+0xa8>)
    6e1e:	1ac9      	subs	r1, r1, r3
    6e20:	08c9      	lsrs	r1, r1, #3
    6e22:	0189      	lsls	r1, r1, #6
    6e24:	f041 0102 	orr.w	r1, r1, #2
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
    6e28:	f01a fe5f 	bl	21aea <log_0>
    6e2c:	e012      	b.n	6e54 <bt_read_static_addr+0x50>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    6e2e:	aa01      	add	r2, sp, #4
    6e30:	2100      	movs	r1, #0
    6e32:	f64f 4009 	movw	r0, #64521	; 0xfc09
    6e36:	f7ff f8bd 	bl	5fb4 <bt_hci_cmd_send_sync>
	if (err) {
    6e3a:	4605      	mov	r5, r0
    6e3c:	b170      	cbz	r0, 6e5c <bt_read_static_addr+0x58>
    6e3e:	4b1a      	ldr	r3, [pc, #104]	; (6ea8 <bt_read_static_addr+0xa4>)
    6e40:	4918      	ldr	r1, [pc, #96]	; (6ea4 <bt_read_static_addr+0xa0>)
		BT_WARN("Failed to read static addresses");
    6e42:	481b      	ldr	r0, [pc, #108]	; (6eb0 <bt_read_static_addr+0xac>)
    6e44:	1ac9      	subs	r1, r1, r3
    6e46:	08c9      	lsrs	r1, r1, #3
    6e48:	0189      	lsls	r1, r1, #6
    6e4a:	f041 0102 	orr.w	r1, r1, #2
    6e4e:	f01a fe4c 	bl	21aea <log_0>
		return 0;
    6e52:	2400      	movs	r4, #0
	}

	return cnt;
}
    6e54:	4620      	mov	r0, r4
    6e56:	b002      	add	sp, #8
    6e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rp = (void *)rsp->data;
    6e5c:	9b01      	ldr	r3, [sp, #4]
    6e5e:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    6e60:	785c      	ldrb	r4, [r3, #1]
    6e62:	42b4      	cmp	r4, r6
    6e64:	bf28      	it	cs
    6e66:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    6e68:	f04f 0816 	mov.w	r8, #22
    6e6c:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
    6e6e:	42a5      	cmp	r5, r4
    6e70:	db0d      	blt.n	6e8e <bt_read_static_addr+0x8a>
	net_buf_unref(rsp);
    6e72:	9801      	ldr	r0, [sp, #4]
    6e74:	f016 ff76 	bl	1dd64 <net_buf_unref>
	if (!cnt) {
    6e78:	2c00      	cmp	r4, #0
    6e7a:	d1eb      	bne.n	6e54 <bt_read_static_addr+0x50>
    6e7c:	4909      	ldr	r1, [pc, #36]	; (6ea4 <bt_read_static_addr+0xa0>)
    6e7e:	4b0a      	ldr	r3, [pc, #40]	; (6ea8 <bt_read_static_addr+0xa4>)
		BT_WARN("No static addresses stored in controller");
    6e80:	480c      	ldr	r0, [pc, #48]	; (6eb4 <bt_read_static_addr+0xb0>)
    6e82:	1ac9      	subs	r1, r1, r3
    6e84:	08c9      	lsrs	r1, r1, #3
    6e86:	0189      	lsls	r1, r1, #6
    6e88:	f041 0102 	orr.w	r1, r1, #2
    6e8c:	e7cc      	b.n	6e28 <bt_read_static_addr+0x24>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    6e8e:	fb08 7005 	mla	r0, r8, r5, r7
    6e92:	2216      	movs	r2, #22
    6e94:	4631      	mov	r1, r6
    6e96:	f01c ff87 	bl	23da8 <memcpy>
	for (i = 0; i < cnt; i++) {
    6e9a:	3501      	adds	r5, #1
    6e9c:	e7e7      	b.n	6e6e <bt_read_static_addr+0x6a>
    6e9e:	bf00      	nop
    6ea0:	20000288 	.word	0x20000288
    6ea4:	00029970 	.word	0x00029970
    6ea8:	00029870 	.word	0x00029870
    6eac:	0002bc77 	.word	0x0002bc77
    6eb0:	0002bca3 	.word	0x0002bca3
    6eb4:	0002bcc3 	.word	0x0002bcc3

00006eb8 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    6eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    6eba:	4e15      	ldr	r6, [pc, #84]	; (6f10 <bt_setup_random_id_addr+0x58>)
    6ebc:	79f4      	ldrb	r4, [r6, #7]
{
    6ebe:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    6ec0:	b9f4      	cbnz	r4, 6f00 <bt_setup_random_id_addr+0x48>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    6ec2:	2101      	movs	r1, #1
    6ec4:	a802      	add	r0, sp, #8
    6ec6:	f7ff ff9d 	bl	6e04 <bt_read_static_addr>
    6eca:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
    6ecc:	b1c0      	cbz	r0, 6f00 <bt_setup_random_id_addr+0x48>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    6ece:	2716      	movs	r7, #22
    6ed0:	ab02      	add	r3, sp, #8
    6ed2:	b2e5      	uxtb	r5, r4
    6ed4:	fb07 3105 	mla	r1, r7, r5, r3
    6ed8:	2206      	movs	r2, #6
    6eda:	f10d 0001 	add.w	r0, sp, #1
    6ede:	f01c ff63 	bl	23da8 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    6ee2:	2301      	movs	r3, #1

				err = id_create(i, &addr, irk);
    6ee4:	4669      	mov	r1, sp
    6ee6:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
    6ee8:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
    6eec:	f7ff fe82 	bl	6bf4 <id_create.constprop.0>
				if (err) {
    6ef0:	b920      	cbnz	r0, 6efc <bt_setup_random_id_addr+0x44>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    6ef2:	79f2      	ldrb	r2, [r6, #7]
    6ef4:	3401      	adds	r4, #1
    6ef6:	b2e3      	uxtb	r3, r4
    6ef8:	429a      	cmp	r2, r3
    6efa:	d8e9      	bhi.n	6ed0 <bt_setup_random_id_addr+0x18>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
    6efc:	b009      	add	sp, #36	; 0x24
    6efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
    6f00:	2100      	movs	r1, #0
    6f02:	4608      	mov	r0, r1
}
    6f04:	b009      	add	sp, #36	; 0x24
    6f06:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
    6f0a:	f7ff bec3 	b.w	6c94 <bt_id_create>
    6f0e:	bf00      	nop
    6f10:	20000288 	.word	0x20000288

00006f14 <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
    6f14:	b570      	push	{r4, r5, r6, lr}
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
    6f16:	4b10      	ldr	r3, [pc, #64]	; (6f58 <bt_id_set_scan_own_addr+0x44>)
    6f18:	781b      	ldrb	r3, [r3, #0]
    6f1a:	700b      	strb	r3, [r1, #0]
{
    6f1c:	4606      	mov	r6, r0
    6f1e:	460d      	mov	r5, r1
		/* Use NRPA unless identity has been explicitly requested
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
    6f20:	f01d fabc 	bl	2449c <is_adv_using_rand_addr>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    6f24:	b9a0      	cbnz	r0, 6f50 <bt_id_set_scan_own_addr+0x3c>
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
    6f26:	f01d fac5 	bl	244b4 <bt_id_set_private_addr>
			if (err) {
    6f2a:	4604      	mov	r4, r0
    6f2c:	b170      	cbz	r0, 6f4c <bt_id_set_scan_own_addr+0x38>
				if (active_scan || !is_adv_using_rand_addr()) {
    6f2e:	b986      	cbnz	r6, 6f52 <bt_id_set_scan_own_addr+0x3e>
    6f30:	f01d fab4 	bl	2449c <is_adv_using_rand_addr>
    6f34:	b168      	cbz	r0, 6f52 <bt_id_set_scan_own_addr+0x3e>
    6f36:	4a09      	ldr	r2, [pc, #36]	; (6f5c <bt_id_set_scan_own_addr+0x48>)
    6f38:	4b09      	ldr	r3, [pc, #36]	; (6f60 <bt_id_set_scan_own_addr+0x4c>)
					return err;
				}

				BT_WARN("Ignoring failure to set address for passive scan (%d)",
    6f3a:	480a      	ldr	r0, [pc, #40]	; (6f64 <bt_id_set_scan_own_addr+0x50>)
    6f3c:	1ad2      	subs	r2, r2, r3
    6f3e:	08d2      	lsrs	r2, r2, #3
    6f40:	0192      	lsls	r2, r2, #6
    6f42:	f042 0202 	orr.w	r2, r2, #2
    6f46:	4621      	mov	r1, r4
    6f48:	f01a fddc 	bl	21b04 <log_1>
					err);
			}

			*own_addr_type = BT_ADDR_LE_RANDOM;
    6f4c:	2301      	movs	r3, #1
    6f4e:	702b      	strb	r3, [r5, #0]
				return err;
			}
		}
	}

	return 0;
    6f50:	2400      	movs	r4, #0
}
    6f52:	4620      	mov	r0, r4
    6f54:	bd70      	pop	{r4, r5, r6, pc}
    6f56:	bf00      	nop
    6f58:	20000288 	.word	0x20000288
    6f5c:	00029970 	.word	0x00029970
    6f60:	00029870 	.word	0x00029870
    6f64:	0002bcec 	.word	0x0002bcec

00006f68 <bt_id_set_adv_own_addr>:
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
    6f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    6f6c:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
    6f70:	7806      	ldrb	r6, [r0, #0]
{
    6f72:	4680      	mov	r8, r0
    6f74:	460d      	mov	r5, r1
    6f76:	4691      	mov	r9, r2
    6f78:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    6f7a:	d02b      	beq.n	6fd4 <bt_id_set_adv_own_addr+0x6c>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    6f7c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 7034 <bt_id_set_adv_own_addr+0xcc>
    6f80:	b12a      	cbz	r2, 6f8e <bt_id_set_adv_own_addr+0x26>
    6f82:	0688      	lsls	r0, r1, #26
    6f84:	d503      	bpl.n	6f8e <bt_id_set_adv_own_addr+0x26>
    6f86:	f898 30d0 	ldrb.w	r3, [r8, #208]	; 0xd0
    6f8a:	0659      	lsls	r1, r3, #25
    6f8c:	d54f      	bpl.n	702e <bt_id_set_adv_own_addr+0xc6>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    6f8e:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
    6f92:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
    6f96:	f818 3003 	ldrb.w	r3, [r8, r3]
    6f9a:	2b01      	cmp	r3, #1
    6f9c:	d009      	beq.n	6fb2 <bt_id_set_adv_own_addr+0x4a>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
    6f9e:	ebaa 0606 	sub.w	r6, sl, r6
    6fa2:	f818 3006 	ldrb.w	r3, [r8, r6]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    6fa6:	f1b9 0f00 	cmp.w	r9, #0
    6faa:	d10e      	bne.n	6fca <bt_id_set_adv_own_addr+0x62>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    6fac:	703b      	strb	r3, [r7, #0]
		if (err) {
			return err;
		}
	}

	return 0;
    6fae:	2400      	movs	r4, #0
    6fb0:	e008      	b.n	6fc4 <bt_id_set_adv_own_addr+0x5c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    6fb2:	2007      	movs	r0, #7
    6fb4:	fb10 3006 	smlabb	r0, r0, r6, r3
		return set_random_address(addr);
    6fb8:	4440      	add	r0, r8
    6fba:	f7ff fded 	bl	6b98 <set_random_address>
				if (err) {
    6fbe:	4604      	mov	r4, r0
    6fc0:	2800      	cmp	r0, #0
    6fc2:	d0ec      	beq.n	6f9e <bt_id_set_adv_own_addr+0x36>
}
    6fc4:	4620      	mov	r0, r4
    6fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    6fca:	06aa      	lsls	r2, r5, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    6fcc:	bf48      	it	mi
    6fce:	f043 0302 	orrmi.w	r3, r3, #2
    6fd2:	e7eb      	b.n	6fac <bt_id_set_adv_own_addr+0x44>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    6fd4:	f011 0504 	ands.w	r5, r1, #4
    6fd8:	d014      	beq.n	7004 <bt_id_set_adv_own_addr+0x9c>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    6fda:	f8df 8058 	ldr.w	r8, [pc, #88]	; 7034 <bt_id_set_adv_own_addr+0xcc>
    6fde:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
    6fe2:	00f5      	lsls	r5, r6, #3
    6fe4:	f818 3003 	ldrb.w	r3, [r8, r3]
    6fe8:	2b01      	cmp	r3, #1
    6fea:	d106      	bne.n	6ffa <bt_id_set_adv_own_addr+0x92>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    6fec:	2007      	movs	r0, #7
    6fee:	fb10 3006 	smlabb	r0, r0, r6, r3
		return set_random_address(addr);
    6ff2:	4440      	add	r0, r8
    6ff4:	f7ff fdd0 	bl	6b98 <set_random_address>
    6ff8:	4604      	mov	r4, r0
			*own_addr_type = id_addr->type;
    6ffa:	1bad      	subs	r5, r5, r6
    6ffc:	f818 3005 	ldrb.w	r3, [r8, r5]
    7000:	703b      	strb	r3, [r7, #0]
    7002:	e7df      	b.n	6fc4 <bt_id_set_adv_own_addr+0x5c>
    7004:	480c      	ldr	r0, [pc, #48]	; (7038 <bt_id_set_adv_own_addr+0xd0>)
    7006:	f01d fa43 	bl	24490 <atomic_get>
			if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    700a:	0683      	lsls	r3, r0, #26
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    700c:	f3c0 1640 	ubfx	r6, r0, #5, #1
    7010:	d502      	bpl.n	7018 <bt_id_set_adv_own_addr+0xb0>
				bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
    7012:	4628      	mov	r0, r5
    7014:	f01d fb76 	bl	24704 <bt_le_scan_set_enable>
			err = bt_id_set_adv_private_addr(adv);
    7018:	4640      	mov	r0, r8
    701a:	f01d fa5d 	bl	244d8 <bt_id_set_adv_private_addr>
    701e:	4604      	mov	r4, r0
			*own_addr_type = BT_ADDR_LE_RANDOM;
    7020:	2001      	movs	r0, #1
    7022:	7038      	strb	r0, [r7, #0]
			if (scan_enabled) {
    7024:	2e00      	cmp	r6, #0
    7026:	d0cd      	beq.n	6fc4 <bt_id_set_adv_own_addr+0x5c>
				bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
    7028:	f01d fb6c 	bl	24704 <bt_le_scan_set_enable>
		if (err) {
    702c:	e7ca      	b.n	6fc4 <bt_id_set_adv_own_addr+0x5c>
			return -ENOTSUP;
    702e:	f06f 0485 	mvn.w	r4, #133	; 0x85
    7032:	e7c7      	b.n	6fc4 <bt_id_set_adv_own_addr+0x5c>
    7034:	20000288 	.word	0x20000288
    7038:	20000354 	.word	0x20000354

0000703c <bt_le_oob_get_local>:
	return 0;
}
#endif /* CONFIG_BT_BREDR */

int bt_le_oob_get_local(uint8_t id, struct bt_le_oob *oob)
{
    703c:	b538      	push	{r3, r4, r5, lr}
    703e:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    7040:	480a      	ldr	r0, [pc, #40]	; (706c <bt_le_oob_get_local+0x30>)
    7042:	f01d fa25 	bl	24490 <atomic_get>
	struct bt_le_ext_adv *adv = NULL;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    7046:	0783      	lsls	r3, r0, #30
{
    7048:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    704a:	d509      	bpl.n	7060 <bt_le_oob_get_local+0x24>
		return -EAGAIN;
	}

	if (id >= CONFIG_BT_ID_MAX) {
    704c:	b95c      	cbnz	r4, 7066 <bt_le_oob_get_local+0x2a>
		return -EINVAL;
	}

	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
		adv = bt_le_adv_lookup_legacy();
    704e:	f000 f90b 	bl	7268 <bt_le_adv_lookup_legacy>
	memcpy(dst, src, sizeof(*dst));
    7052:	4907      	ldr	r1, [pc, #28]	; (7070 <bt_le_oob_get_local+0x34>)
    7054:	2207      	movs	r2, #7
    7056:	4628      	mov	r0, r5
    7058:	f01c fea6 	bl	23da8 <memcpy>
		if (err && err != -ENOTSUP) {
			return err;
		}
	}

	return 0;
    705c:	4620      	mov	r0, r4
}
    705e:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
    7060:	f06f 000a 	mvn.w	r0, #10
    7064:	e7fb      	b.n	705e <bt_le_oob_get_local+0x22>
		return -EINVAL;
    7066:	f06f 0015 	mvn.w	r0, #21
    706a:	e7f8      	b.n	705e <bt_le_oob_get_local+0x22>
    706c:	20000354 	.word	0x20000354
    7070:	20000288 	.word	0x20000288

00007074 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    7074:	6843      	ldr	r3, [r0, #4]
{
    7076:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7078:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    707a:	0558      	lsls	r0, r3, #21
    707c:	d502      	bpl.n	7084 <valid_adv_param+0x10>
		return false;
    707e:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    7080:	b003      	add	sp, #12
    7082:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    7084:	6922      	ldr	r2, [r4, #16]
    7086:	b10a      	cbz	r2, 708c <valid_adv_param+0x18>
    7088:	07d9      	lsls	r1, r3, #31
    708a:	d5f8      	bpl.n	707e <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    708c:	4d1a      	ldr	r5, [pc, #104]	; (70f8 <valid_adv_param+0x84>)
    708e:	7820      	ldrb	r0, [r4, #0]
    7090:	79eb      	ldrb	r3, [r5, #7]
    7092:	4283      	cmp	r3, r0
    7094:	d9f3      	bls.n	707e <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    7096:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    709a:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    709c:	2207      	movs	r2, #7
    709e:	4669      	mov	r1, sp
    70a0:	4428      	add	r0, r5
    70a2:	9300      	str	r3, [sp, #0]
    70a4:	f8cd 3003 	str.w	r3, [sp, #3]
    70a8:	f01c fe6d 	bl	23d86 <memcmp>
	if (param->id >= bt_dev.id_count ||
    70ac:	2800      	cmp	r0, #0
    70ae:	d0e6      	beq.n	707e <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    70b0:	6860      	ldr	r0, [r4, #4]
    70b2:	07c2      	lsls	r2, r0, #31
    70b4:	d406      	bmi.n	70c4 <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    70b6:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
    70ba:	2b08      	cmp	r3, #8
    70bc:	d802      	bhi.n	70c4 <valid_adv_param+0x50>
    70be:	68a3      	ldr	r3, [r4, #8]
    70c0:	2b9f      	cmp	r3, #159	; 0x9f
    70c2:	d9dc      	bls.n	707e <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    70c4:	f010 0f30 	tst.w	r0, #48	; 0x30
    70c8:	d002      	beq.n	70d0 <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    70ca:	6923      	ldr	r3, [r4, #16]
    70cc:	2b00      	cmp	r3, #0
    70ce:	d0d6      	beq.n	707e <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    70d0:	06c3      	lsls	r3, r0, #27
    70d2:	d401      	bmi.n	70d8 <valid_adv_param+0x64>
    70d4:	6923      	ldr	r3, [r4, #16]
    70d6:	b943      	cbnz	r3, 70ea <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
    70d8:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    70dc:	429a      	cmp	r2, r3
    70de:	d8ce      	bhi.n	707e <valid_adv_param+0xa>
    70e0:	2a1f      	cmp	r2, #31
    70e2:	d9cc      	bls.n	707e <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    70e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    70e8:	d8c9      	bhi.n	707e <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    70ea:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    70ee:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    70f2:	bf18      	it	ne
    70f4:	2001      	movne	r0, #1
    70f6:	e7c3      	b.n	7080 <valid_adv_param+0xc>
    70f8:	20000288 	.word	0x20000288

000070fc <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
    70fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7100:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    7102:	2120      	movs	r1, #32
{
    7104:	4682      	mov	sl, r0
    7106:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    7108:	f7fe fdfc 	bl	5d04 <bt_hci_cmd_create>
	if (!buf) {
    710c:	4606      	mov	r6, r0
    710e:	2800      	cmp	r0, #0
    7110:	d05c      	beq.n	71cc <hci_set_ad+0xd0>
	return net_buf_simple_add(&buf->b, len);
    7112:	2120      	movs	r1, #32
    7114:	3008      	adds	r0, #8
    7116:	f021 f897 	bl	28248 <net_buf_simple_add>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));
    711a:	2220      	movs	r2, #32
    711c:	2100      	movs	r1, #0
    711e:	4681      	mov	r9, r0
    7120:	f01c fe4d 	bl	23dbe <memset>

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    7124:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
    7128:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
    712c:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
    712e:	2500      	movs	r5, #0
		for (size_t j = 0; j < ad[i].len; j++) {
    7130:	f8d4 8000 	ldr.w	r8, [r4]
    7134:	2300      	movs	r3, #0
    7136:	6862      	ldr	r2, [r4, #4]
    7138:	4293      	cmp	r3, r2
    713a:	d30d      	bcc.n	7158 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
    713c:	9b00      	ldr	r3, [sp, #0]
    713e:	3408      	adds	r4, #8
    7140:	429c      	cmp	r4, r3
    7142:	d1f5      	bne.n	7130 <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    7144:	2200      	movs	r2, #0
    7146:	4631      	mov	r1, r6
    7148:	4650      	mov	r0, sl
	*data_len = set_data_len;
    714a:	f889 5000 	strb.w	r5, [r9]
}
    714e:	b003      	add	sp, #12
    7150:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    7154:	f7fe bf2e 	b.w	5fb4 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    7158:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
    715c:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
    7160:	1ca8      	adds	r0, r5, #2
    7162:	1881      	adds	r1, r0, r2
    7164:	291f      	cmp	r1, #31
    7166:	d91a      	bls.n	719e <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    7168:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
    716c:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
    7170:	d101      	bne.n	7176 <hci_set_ad+0x7a>
    7172:	2a00      	cmp	r2, #0
    7174:	dc11      	bgt.n	719a <hci_set_ad+0x9e>
    7176:	4b17      	ldr	r3, [pc, #92]	; (71d4 <hci_set_ad+0xd8>)
    7178:	4917      	ldr	r1, [pc, #92]	; (71d8 <hci_set_ad+0xdc>)
					BT_ERR("Too big advertising data");
    717a:	4818      	ldr	r0, [pc, #96]	; (71dc <hci_set_ad+0xe0>)
    717c:	1ac9      	subs	r1, r1, r3
    717e:	08c9      	lsrs	r1, r1, #3
    7180:	0189      	lsls	r1, r1, #6
    7182:	f041 0101 	orr.w	r1, r1, #1
    7186:	f01a fcb0 	bl	21aea <log_0>
		net_buf_unref(buf);
    718a:	4630      	mov	r0, r6
    718c:	f016 fdea 	bl	1dd64 <net_buf_unref>
					return -EINVAL;
    7190:	f06f 0015 	mvn.w	r0, #21
}
    7194:	b003      	add	sp, #12
    7196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    719a:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    719e:	b2d7      	uxtb	r7, r2
    71a0:	1c79      	adds	r1, r7, #1
    71a2:	f80b 1005 	strb.w	r1, [fp, r5]
    71a6:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
    71a8:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
    71aa:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
    71ae:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
    71b2:	f8d8 1004 	ldr.w	r1, [r8, #4]
    71b6:	9301      	str	r3, [sp, #4]
			set_data_len += len;
    71b8:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
    71ba:	f01c fdf5 	bl	23da8 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    71be:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    71c0:	443d      	add	r5, r7
    71c2:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
    71c4:	3301      	adds	r3, #1
    71c6:	f108 0808 	add.w	r8, r8, #8
    71ca:	e7b4      	b.n	7136 <hci_set_ad+0x3a>
		return -ENOBUFS;
    71cc:	f06f 0068 	mvn.w	r0, #104	; 0x68
    71d0:	e7e0      	b.n	7194 <hci_set_ad+0x98>
    71d2:	bf00      	nop
    71d4:	00029870 	.word	0x00029870
    71d8:	00029870 	.word	0x00029870
    71dc:	0002bd28 	.word	0x0002bd28

000071e0 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    71e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
    71e2:	4606      	mov	r6, r0
    71e4:	4b1e      	ldr	r3, [pc, #120]	; (7260 <le_adv_start_add_conn+0x80>)
    71e6:	f816 2b09 	ldrb.w	r2, [r6], #9
    71ea:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
    71ee:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    71f0:	2300      	movs	r3, #0
{
    71f2:	4605      	mov	r5, r0
    71f4:	2207      	movs	r2, #7
    71f6:	460f      	mov	r7, r1
    71f8:	4630      	mov	r0, r6
    71fa:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    71fc:	9300      	str	r3, [sp, #0]
    71fe:	f8cd 3003 	str.w	r3, [sp, #3]
    7202:	f01c fdc0 	bl	23d86 <memcmp>
    7206:	782a      	ldrb	r2, [r5, #0]
    7208:	4604      	mov	r4, r0
    720a:	b9a8      	cbnz	r0, 7238 <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    720c:	4b15      	ldr	r3, [pc, #84]	; (7264 <le_adv_start_add_conn+0x84>)
    720e:	6818      	ldr	r0, [r3, #0]
    7210:	8899      	ldrh	r1, [r3, #4]
    7212:	9002      	str	r0, [sp, #8]
    7214:	799b      	ldrb	r3, [r3, #6]
    7216:	f8ad 100c 	strh.w	r1, [sp, #12]
    721a:	4610      	mov	r0, r2
    721c:	a902      	add	r1, sp, #8
    721e:	f88d 300e 	strb.w	r3, [sp, #14]
    7222:	f001 f967 	bl	84f4 <bt_conn_add_le>
		if (!conn) {
    7226:	4605      	mov	r5, r0
    7228:	b1b8      	cbz	r0, 725a <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    722a:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    722c:	f000 ffbe 	bl	81ac <bt_conn_set_state>
	*out_conn = conn;
    7230:	603d      	str	r5, [r7, #0]
	return 0;
}
    7232:	4620      	mov	r0, r4
    7234:	b005      	add	sp, #20
    7236:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    7238:	4631      	mov	r1, r6
    723a:	4610      	mov	r0, r2
    723c:	f001 f992 	bl	8564 <bt_conn_exists_le>
    7240:	4604      	mov	r4, r0
    7242:	b938      	cbnz	r0, 7254 <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    7244:	7828      	ldrb	r0, [r5, #0]
    7246:	4631      	mov	r1, r6
    7248:	f001 f954 	bl	84f4 <bt_conn_add_le>
	if (!conn) {
    724c:	4605      	mov	r5, r0
    724e:	b120      	cbz	r0, 725a <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    7250:	2105      	movs	r1, #5
    7252:	e7eb      	b.n	722c <le_adv_start_add_conn+0x4c>
		return -EINVAL;
    7254:	f06f 0415 	mvn.w	r4, #21
    7258:	e7eb      	b.n	7232 <le_adv_start_add_conn+0x52>
		return -ENOMEM;
    725a:	f06f 040b 	mvn.w	r4, #11
    725e:	e7e8      	b.n	7232 <le_adv_start_add_conn+0x52>
    7260:	20000288 	.word	0x20000288
    7264:	00029b80 	.word	0x00029b80

00007268 <bt_le_adv_lookup_legacy>:
}
    7268:	4800      	ldr	r0, [pc, #0]	; (726c <bt_le_adv_lookup_legacy+0x4>)
    726a:	4770      	bx	lr
    726c:	200002a0 	.word	0x200002a0

00007270 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    7270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
    7274:	690e      	ldr	r6, [r1, #16]
{
    7276:	b08f      	sub	sp, #60	; 0x3c
    7278:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
    727a:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
    727c:	ebb6 0903 	subs.w	r9, r6, r3
{
    7280:	4605      	mov	r5, r0
    7282:	4892      	ldr	r0, [pc, #584]	; (74cc <bt_le_adv_start_legacy+0x25c>)
    7284:	9205      	str	r2, [sp, #20]
	bool dir_adv = (param->peer != NULL), scannable = false;
    7286:	bf18      	it	ne
    7288:	f04f 0901 	movne.w	r9, #1
	struct bt_conn *conn = NULL;
    728c:	9307      	str	r3, [sp, #28]
    728e:	f01d f94f 	bl	24530 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    7292:	0787      	lsls	r7, r0, #30
{
    7294:	460c      	mov	r4, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    7296:	f140 810d 	bpl.w	74b4 <bt_le_adv_start_legacy+0x244>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    729a:	4608      	mov	r0, r1
    729c:	f7ff feea 	bl	7074 <valid_adv_param>
    72a0:	b928      	cbnz	r0, 72ae <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
    72a2:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    72a6:	4658      	mov	r0, fp
    72a8:	b00f      	add	sp, #60	; 0x3c
    72aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
    72ae:	4620      	mov	r0, r4
    72b0:	f7ff fce2 	bl	6c78 <bt_id_adv_random_addr_check>
    72b4:	4680      	mov	r8, r0
    72b6:	2800      	cmp	r0, #0
    72b8:	d0f3      	beq.n	72a2 <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    72ba:	f105 0710 	add.w	r7, r5, #16
    72be:	4638      	mov	r0, r7
    72c0:	f01d f936 	bl	24530 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    72c4:	f3c0 1b80 	ubfx	fp, r0, #6, #1
    72c8:	0640      	lsls	r0, r0, #25
    72ca:	f100 80f6 	bmi.w	74ba <bt_le_adv_start_legacy+0x24a>
	(void)memset(&set_param, 0, sizeof(set_param));
    72ce:	220f      	movs	r2, #15
    72d0:	4659      	mov	r1, fp
    72d2:	a80a      	add	r0, sp, #40	; 0x28
    72d4:	f01c fd73 	bl	23dbe <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    72d8:	68a3      	ldr	r3, [r4, #8]
    72da:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.channel_map  = get_adv_channel_map(param->options);
    72de:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    72e0:	68e3      	ldr	r3, [r4, #12]
    72e2:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
    72e6:	f01d f914 	bl	24512 <get_adv_channel_map>
	if (adv->id != param->id) {
    72ea:	782a      	ldrb	r2, [r5, #0]
    72ec:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
    72ee:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
    72f2:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
    72f4:	f88d b036 	strb.w	fp, [sp, #54]	; 0x36
	if (adv->id != param->id) {
    72f8:	d004      	beq.n	7304 <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    72fa:	4874      	ldr	r0, [pc, #464]	; (74cc <bt_le_adv_start_legacy+0x25c>)
    72fc:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    7300:	f01d f91c 	bl	2453c <atomic_and>
	bt_dev.adv_conn_id = adv->id;
    7304:	4a72      	ldr	r2, [pc, #456]	; (74d0 <bt_le_adv_start_legacy+0x260>)
	adv->id = param->id;
    7306:	7823      	ldrb	r3, [r4, #0]
    7308:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
    730a:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
    730e:	6861      	ldr	r1, [r4, #4]
    7310:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
    7314:	464a      	mov	r2, r9
    7316:	4628      	mov	r0, r5
    7318:	f7ff fe26 	bl	6f68 <bt_id_set_adv_own_addr>
	if (err) {
    731c:	4683      	mov	fp, r0
    731e:	2800      	cmp	r0, #0
    7320:	d1c1      	bne.n	72a6 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    7322:	f105 0009 	add.w	r0, r5, #9
	if (dir_adv) {
    7326:	2e00      	cmp	r6, #0
    7328:	d053      	beq.n	73d2 <bt_le_adv_start_legacy+0x162>
	memcpy(dst, src, sizeof(*dst));
    732a:	6921      	ldr	r1, [r4, #16]
    732c:	2207      	movs	r2, #7
    732e:	f01c fd3b 	bl	23da8 <memcpy>
	name_type = get_adv_name_type_param(param);
    7332:	4620      	mov	r0, r4
    7334:	f01d f99f 	bl	24676 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    7338:	6863      	ldr	r3, [r4, #4]
    733a:	07d9      	lsls	r1, r3, #31
	name_type = get_adv_name_type_param(param);
    733c:	4681      	mov	r9, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    733e:	d551      	bpl.n	73e4 <bt_le_adv_start_legacy+0x174>
		if (dir_adv) {
    7340:	2e00      	cmp	r6, #0
    7342:	d04c      	beq.n	73de <bt_le_adv_start_legacy+0x16e>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
    7344:	f013 0f10 	tst.w	r3, #16
    7348:	bf14      	ite	ne
    734a:	2304      	movne	r3, #4
    734c:	2301      	moveq	r3, #1
    734e:	6921      	ldr	r1, [r4, #16]
    7350:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    7354:	2207      	movs	r2, #7
    7356:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
    735a:	f01c fd25 	bl	23da8 <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
    735e:	f04f 0800 	mov.w	r8, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    7362:	210f      	movs	r1, #15
    7364:	f242 0006 	movw	r0, #8198	; 0x2006
    7368:	f7fe fccc 	bl	5d04 <bt_hci_cmd_create>
	if (!buf) {
    736c:	4683      	mov	fp, r0
    736e:	2800      	cmp	r0, #0
    7370:	f000 80a6 	beq.w	74c0 <bt_le_adv_start_legacy+0x250>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    7374:	220f      	movs	r2, #15
    7376:	a90a      	add	r1, sp, #40	; 0x28
    7378:	3008      	adds	r0, #8
    737a:	f020 ff6b 	bl	28254 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    737e:	2200      	movs	r2, #0
    7380:	4659      	mov	r1, fp
    7382:	f242 0006 	movw	r0, #8198	; 0x2006
    7386:	f7fe fe15 	bl	5fb4 <bt_hci_cmd_send_sync>
	if (err) {
    738a:	2800      	cmp	r0, #0
    738c:	f040 809b 	bne.w	74c6 <bt_le_adv_start_legacy+0x256>
	if (!dir_adv) {
    7390:	2e00      	cmp	r6, #0
    7392:	d037      	beq.n	7404 <bt_le_adv_start_legacy+0x194>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    7394:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    7396:	07db      	lsls	r3, r3, #31
    7398:	d442      	bmi.n	7420 <bt_le_adv_start_legacy+0x1b0>
	return bt_le_adv_set_enable_legacy(adv, enable);
    739a:	2101      	movs	r1, #1
    739c:	4628      	mov	r0, r5
    739e:	f01d f97a 	bl	24696 <bt_le_adv_set_enable_legacy>
	if (err) {
    73a2:	4683      	mov	fp, r0
    73a4:	2800      	cmp	r0, #0
    73a6:	d07e      	beq.n	74a6 <bt_le_adv_start_legacy+0x236>
    73a8:	4b4a      	ldr	r3, [pc, #296]	; (74d4 <bt_le_adv_start_legacy+0x264>)
    73aa:	494b      	ldr	r1, [pc, #300]	; (74d8 <bt_le_adv_start_legacy+0x268>)
		BT_ERR("Failed to start advertiser");
    73ac:	484b      	ldr	r0, [pc, #300]	; (74dc <bt_le_adv_start_legacy+0x26c>)
    73ae:	1ac9      	subs	r1, r1, r3
    73b0:	08c9      	lsrs	r1, r1, #3
    73b2:	0189      	lsls	r1, r1, #6
    73b4:	f041 0101 	orr.w	r1, r1, #1
    73b8:	f01a fb97 	bl	21aea <log_0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    73bc:	9807      	ldr	r0, [sp, #28]
    73be:	2800      	cmp	r0, #0
    73c0:	f43f af71 	beq.w	72a6 <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    73c4:	2100      	movs	r1, #0
    73c6:	f000 fef1 	bl	81ac <bt_conn_set_state>
			bt_conn_unref(conn);
    73ca:	9807      	ldr	r0, [sp, #28]
    73cc:	f01d fa04 	bl	247d8 <bt_conn_unref>
    73d0:	e769      	b.n	72a6 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    73d2:	9608      	str	r6, [sp, #32]
    73d4:	2207      	movs	r2, #7
    73d6:	f8cd 6023 	str.w	r6, [sp, #35]	; 0x23
    73da:	a908      	add	r1, sp, #32
    73dc:	e7a7      	b.n	732e <bt_le_adv_start_legacy+0xbe>
			set_param.type = BT_HCI_ADV_IND;
    73de:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
    73e2:	e7be      	b.n	7362 <bt_le_adv_start_legacy+0xf2>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
    73e4:	059a      	lsls	r2, r3, #22
    73e6:	d403      	bmi.n	73f0 <bt_le_adv_start_legacy+0x180>
    73e8:	9b18      	ldr	r3, [sp, #96]	; 0x60
    73ea:	b90b      	cbnz	r3, 73f0 <bt_le_adv_start_legacy+0x180>
    73ec:	2802      	cmp	r0, #2
    73ee:	d103      	bne.n	73f8 <bt_le_adv_start_legacy+0x188>
		set_param.type = BT_HCI_ADV_SCAN_IND;
    73f0:	2302      	movs	r3, #2
    73f2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    73f6:	e7b4      	b.n	7362 <bt_le_adv_start_legacy+0xf2>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    73f8:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
    73fa:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    73fe:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    7402:	e7ae      	b.n	7362 <bt_le_adv_start_legacy+0xf2>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    7404:	9b19      	ldr	r3, [sp, #100]	; 0x64
    7406:	9300      	str	r3, [sp, #0]
    7408:	e9cd 8901 	strd	r8, r9, [sp, #4]
    740c:	9b18      	ldr	r3, [sp, #96]	; 0x60
    740e:	9905      	ldr	r1, [sp, #20]
    7410:	4652      	mov	r2, sl
    7412:	4628      	mov	r0, r5
    7414:	f01d f8b8 	bl	24588 <le_adv_update.constprop.0>
		if (err) {
    7418:	4683      	mov	fp, r0
    741a:	2800      	cmp	r0, #0
    741c:	d0ba      	beq.n	7394 <bt_le_adv_start_legacy+0x124>
    741e:	e742      	b.n	72a6 <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
    7420:	a907      	add	r1, sp, #28
    7422:	4628      	mov	r0, r5
    7424:	f7ff fedc 	bl	71e0 <le_adv_start_add_conn>
		if (err) {
    7428:	4683      	mov	fp, r0
    742a:	2800      	cmp	r0, #0
    742c:	d0b5      	beq.n	739a <bt_le_adv_start_legacy+0x12a>
			if (err == -ENOMEM && !dir_adv &&
    742e:	f110 0f0c 	cmn.w	r0, #12
    7432:	f47f af38 	bne.w	72a6 <bt_le_adv_start_legacy+0x36>
    7436:	2e00      	cmp	r6, #0
    7438:	f47f af35 	bne.w	72a6 <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    743c:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
    743e:	0798      	lsls	r0, r3, #30
    7440:	f53f af31 	bmi.w	72a6 <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    7444:	6862      	ldr	r2, [r4, #4]
    7446:	f082 0202 	eor.w	r2, r2, #2
    744a:	f3c2 0b40 	ubfx	fp, r2, #1, #1
    744e:	f00b 0201 	and.w	r2, fp, #1
    7452:	210d      	movs	r1, #13
    7454:	4638      	mov	r0, r7
    7456:	f01d f880 	bl	2455a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
    745a:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
    745e:	425a      	negs	r2, r3
    7460:	415a      	adcs	r2, r3
    7462:	2107      	movs	r1, #7
    7464:	4638      	mov	r0, r7
    7466:	f01d f878 	bl	2455a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
    746a:	f1a9 0102 	sub.w	r1, r9, #2
    746e:	424a      	negs	r2, r1
    7470:	414a      	adcs	r2, r1
    7472:	4638      	mov	r0, r7
    7474:	2108      	movs	r1, #8
    7476:	f01d f870 	bl	2455a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    747a:	6862      	ldr	r2, [r4, #4]
    747c:	2109      	movs	r1, #9
    747e:	f002 0201 	and.w	r2, r2, #1
    7482:	4638      	mov	r0, r7
    7484:	f01d f869 	bl	2455a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    7488:	4642      	mov	r2, r8
    748a:	210a      	movs	r1, #10
    748c:	4638      	mov	r0, r7
    748e:	f01d f864 	bl	2455a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    7492:	6862      	ldr	r2, [r4, #4]
    7494:	210c      	movs	r1, #12
    7496:	f3c2 0280 	ubfx	r2, r2, #2, #1
    749a:	4638      	mov	r0, r7
    749c:	f01d f85d 	bl	2455a <atomic_set_bit_to>
	return 0;
    74a0:	f04f 0b00 	mov.w	fp, #0
    74a4:	e6ff      	b.n	72a6 <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    74a6:	9807      	ldr	r0, [sp, #28]
    74a8:	b108      	cbz	r0, 74ae <bt_le_adv_start_legacy+0x23e>
		bt_conn_unref(conn);
    74aa:	f01d f995 	bl	247d8 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    74ae:	2e00      	cmp	r6, #0
    74b0:	d1cd      	bne.n	744e <bt_le_adv_start_legacy+0x1de>
    74b2:	e7c7      	b.n	7444 <bt_le_adv_start_legacy+0x1d4>
		return -EAGAIN;
    74b4:	f06f 0b0a 	mvn.w	fp, #10
    74b8:	e6f5      	b.n	72a6 <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
    74ba:	f06f 0b77 	mvn.w	fp, #119	; 0x77
    74be:	e6f2      	b.n	72a6 <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
    74c0:	f06f 0b68 	mvn.w	fp, #104	; 0x68
    74c4:	e6ef      	b.n	72a6 <bt_le_adv_start_legacy+0x36>
    74c6:	4683      	mov	fp, r0
    74c8:	e6ed      	b.n	72a6 <bt_le_adv_start_legacy+0x36>
    74ca:	bf00      	nop
    74cc:	20000354 	.word	0x20000354
    74d0:	20000288 	.word	0x20000288
    74d4:	00029870 	.word	0x00029870
    74d8:	00029870 	.word	0x00029870
    74dc:	0002bd41 	.word	0x0002bd41

000074e0 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    74e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    74e2:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    74e4:	9a06      	ldr	r2, [sp, #24]
{
    74e6:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    74e8:	e9cd 3200 	strd	r3, r2, [sp]
    74ec:	462b      	mov	r3, r5
    74ee:	460a      	mov	r2, r1
    74f0:	4601      	mov	r1, r0
    74f2:	4811      	ldr	r0, [pc, #68]	; (7538 <bt_le_adv_start+0x58>)
    74f4:	f7ff febc 	bl	7270 <bt_le_adv_start_legacy>
    74f8:	4621      	mov	r1, r4
    74fa:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
    74fc:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
    74fe:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
    7502:	429d      	cmp	r5, r3
    7504:	d102      	bne.n	750c <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
    7506:	4630      	mov	r0, r6
    7508:	b002      	add	sp, #8
    750a:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
    750c:	880a      	ldrh	r2, [r1, #0]
    750e:	4282      	cmp	r2, r0
    7510:	d104      	bne.n	751c <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
    7512:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
    7514:	b112      	cbz	r2, 751c <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
    7516:	7812      	ldrb	r2, [r2, #0]
    7518:	07d2      	lsls	r2, r2, #31
    751a:	d402      	bmi.n	7522 <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
    751c:	3301      	adds	r3, #1
    751e:	3108      	adds	r1, #8
    7520:	e7ef      	b.n	7502 <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
    7522:	4906      	ldr	r1, [pc, #24]	; (753c <bt_le_adv_start+0x5c>)
    7524:	4806      	ldr	r0, [pc, #24]	; (7540 <bt_le_adv_start+0x60>)
    7526:	f021 fc3c 	bl	28da2 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
    752a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    752e:	2300      	movs	r3, #0
    7530:	4803      	ldr	r0, [pc, #12]	; (7540 <bt_le_adv_start+0x60>)
    7532:	f018 ff77 	bl	20424 <k_work_reschedule>
    7536:	e7e6      	b.n	7506 <bt_le_adv_start+0x26>
    7538:	200002a0 	.word	0x200002a0
    753c:	00007605 	.word	0x00007605
    7540:	200002b8 	.word	0x200002b8

00007544 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    7544:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
	int err;

	(void)bt_le_lim_adv_cancel_timeout(adv);
    7546:	4829      	ldr	r0, [pc, #164]	; (75ec <bt_le_adv_stop+0xa8>)
    7548:	f01d f8ca 	bl	246e0 <bt_le_lim_adv_cancel_timeout>
    754c:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    7550:	4827      	ldr	r0, [pc, #156]	; (75f0 <bt_le_adv_stop+0xac>)
    7552:	f01c fff3 	bl	2453c <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    7556:	4826      	ldr	r0, [pc, #152]	; (75f0 <bt_le_adv_stop+0xac>)
    7558:	f01c ffea 	bl	24530 <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    755c:	0641      	lsls	r1, r0, #25
    755e:	d403      	bmi.n	7568 <bt_le_adv_stop+0x24>
		/* Legacy advertiser exists, but is not currently advertising.
		 * This happens when keep advertising behavior is active but
		 * no conn object is available to do connectable advertising.
		 */
		bt_le_adv_delete_legacy();
		return 0;
    7560:	2400      	movs	r4, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
    7562:	4620      	mov	r0, r4
    7564:	b004      	add	sp, #16
    7566:	bd10      	pop	{r4, pc}
    7568:	4821      	ldr	r0, [pc, #132]	; (75f0 <bt_le_adv_stop+0xac>)
    756a:	f01c ffe1 	bl	24530 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    756e:	0582      	lsls	r2, r0, #22
    7570:	d521      	bpl.n	75b6 <bt_le_adv_stop+0x72>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    7572:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    7574:	481f      	ldr	r0, [pc, #124]	; (75f4 <bt_le_adv_stop+0xb0>)
    7576:	9300      	str	r3, [sp, #0]
    7578:	2207      	movs	r2, #7
    757a:	4669      	mov	r1, sp
    757c:	f8cd 3003 	str.w	r3, [sp, #3]
    7580:	f01c fc01 	bl	23d86 <memcmp>
    7584:	4b1c      	ldr	r3, [pc, #112]	; (75f8 <bt_le_adv_stop+0xb4>)
    7586:	bb60      	cbnz	r0, 75e2 <bt_le_adv_stop+0x9e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
    7588:	4a1c      	ldr	r2, [pc, #112]	; (75fc <bt_le_adv_stop+0xb8>)
    758a:	8891      	ldrh	r1, [r2, #4]
    758c:	6810      	ldr	r0, [r2, #0]
    758e:	7992      	ldrb	r2, [r2, #6]
    7590:	f8ad 100c 	strh.w	r1, [sp, #12]
    7594:	f88d 200e 	strb.w	r2, [sp, #14]
    7598:	9002      	str	r0, [sp, #8]
    759a:	2204      	movs	r2, #4
    759c:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    759e:	7e18      	ldrb	r0, [r3, #24]
    75a0:	f001 f806 	bl	85b0 <bt_conn_lookup_state_le>
    75a4:	4604      	mov	r4, r0
	if (conn) {
    75a6:	b130      	cbz	r0, 75b6 <bt_le_adv_stop+0x72>
		conn->err = status;
    75a8:	2100      	movs	r1, #0
    75aa:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    75ac:	f000 fdfe 	bl	81ac <bt_conn_set_state>
		bt_conn_unref(conn);
    75b0:	4620      	mov	r0, r4
    75b2:	f01d f911 	bl	247d8 <bt_conn_unref>
		err = bt_le_adv_set_enable_legacy(adv, false);
    75b6:	480d      	ldr	r0, [pc, #52]	; (75ec <bt_le_adv_stop+0xa8>)
    75b8:	2100      	movs	r1, #0
    75ba:	f01d f86c 	bl	24696 <bt_le_adv_set_enable_legacy>
		if (err) {
    75be:	4604      	mov	r4, r0
    75c0:	2800      	cmp	r0, #0
    75c2:	d1ce      	bne.n	7562 <bt_le_adv_stop+0x1e>
    75c4:	480e      	ldr	r0, [pc, #56]	; (7600 <bt_le_adv_stop+0xbc>)
    75c6:	f01c ffb3 	bl	24530 <atomic_get>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    75ca:	0683      	lsls	r3, r0, #26
    75cc:	d5c8      	bpl.n	7560 <bt_le_adv_stop+0x1c>
			bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
    75ce:	4620      	mov	r0, r4
    75d0:	f01d f898 	bl	24704 <bt_le_scan_set_enable>
			bt_id_set_private_addr(BT_ID_DEFAULT);
    75d4:	4620      	mov	r0, r4
    75d6:	f01c ff6d 	bl	244b4 <bt_id_set_private_addr>
			bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
    75da:	2001      	movs	r0, #1
    75dc:	f01d f892 	bl	24704 <bt_le_scan_set_enable>
    75e0:	e7bf      	b.n	7562 <bt_le_adv_stop+0x1e>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    75e2:	2205      	movs	r2, #5
    75e4:	f103 0121 	add.w	r1, r3, #33	; 0x21
    75e8:	e7d9      	b.n	759e <bt_le_adv_stop+0x5a>
    75ea:	bf00      	nop
    75ec:	200002a0 	.word	0x200002a0
    75f0:	200002b0 	.word	0x200002b0
    75f4:	200002a9 	.word	0x200002a9
    75f8:	20000288 	.word	0x20000288
    75fc:	00029b80 	.word	0x00029b80
    7600:	20000354 	.word	0x20000354

00007604 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
    7604:	b508      	push	{r3, lr}
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
    7606:	f7ff ff9d 	bl	7544 <bt_le_adv_stop>
    760a:	4b06      	ldr	r3, [pc, #24]	; (7624 <adv_timeout+0x20>)
    760c:	4a06      	ldr	r2, [pc, #24]	; (7628 <adv_timeout+0x24>)
    760e:	1ad2      	subs	r2, r2, r3
    7610:	08d2      	lsrs	r2, r2, #3
#endif
	BT_WARN("Failed to stop advertising: %d", err);
    7612:	0192      	lsls	r2, r2, #6
	err = bt_le_adv_stop();
    7614:	4601      	mov	r1, r0
}
    7616:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_WARN("Failed to stop advertising: %d", err);
    761a:	4804      	ldr	r0, [pc, #16]	; (762c <adv_timeout+0x28>)
    761c:	f042 0202 	orr.w	r2, r2, #2
    7620:	f01a ba70 	b.w	21b04 <log_1>
    7624:	00029870 	.word	0x00029870
    7628:	00029870 	.word	0x00029870
    762c:	0002bd5c 	.word	0x0002bd5c

00007630 <bt_le_adv_resume>:
{
    7630:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7632:	481e      	ldr	r0, [pc, #120]	; (76ac <bt_le_adv_resume+0x7c>)
    7634:	4c1d      	ldr	r4, [pc, #116]	; (76ac <bt_le_adv_resume+0x7c>)
    7636:	f01c ff7b 	bl	24530 <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    763a:	f410 5f00 	tst.w	r0, #8192	; 0x2000
    763e:	d032      	beq.n	76a6 <bt_le_adv_resume+0x76>
    7640:	4620      	mov	r0, r4
    7642:	f01c ff75 	bl	24530 <atomic_get>
    7646:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    7648:	f3c0 1580 	ubfx	r5, r0, #6, #1
    764c:	d42b      	bmi.n	76a6 <bt_le_adv_resume+0x76>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    764e:	4620      	mov	r0, r4
    7650:	f01c ff6e 	bl	24530 <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    7654:	0583      	lsls	r3, r0, #22
    7656:	d526      	bpl.n	76a6 <bt_le_adv_resume+0x76>
	err = le_adv_start_add_conn(adv, &conn);
    7658:	a901      	add	r1, sp, #4
    765a:	f1a4 0010 	sub.w	r0, r4, #16
    765e:	f7ff fdbf 	bl	71e0 <le_adv_start_add_conn>
	if (err) {
    7662:	bb00      	cbnz	r0, 76a6 <bt_le_adv_resume+0x76>
	return bt_le_adv_set_enable_legacy(adv, enable);
    7664:	2101      	movs	r1, #1
    7666:	f1a4 0010 	sub.w	r0, r4, #16
    766a:	f01d f814 	bl	24696 <bt_le_adv_set_enable_legacy>
	if (err) {
    766e:	b150      	cbz	r0, 7686 <bt_le_adv_resume+0x56>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    7670:	4629      	mov	r1, r5
    7672:	9801      	ldr	r0, [sp, #4]
    7674:	f000 fd9a 	bl	81ac <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7678:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    767c:	4620      	mov	r0, r4
    767e:	f01c ff5d 	bl	2453c <atomic_and>
	return (old & mask) != 0;
    7682:	f3c0 3540 	ubfx	r5, r0, #13, #1
	bt_conn_unref(conn);
    7686:	9801      	ldr	r0, [sp, #4]
    7688:	f01d f8a6 	bl	247d8 <bt_conn_unref>
	if (persist_paused) {
    768c:	b15d      	cbz	r5, 76a6 <bt_le_adv_resume+0x76>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    768e:	f3bf 8f5b 	dmb	ish
    7692:	e854 3f00 	ldrex	r3, [r4]
    7696:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    769a:	e844 3200 	strex	r2, r3, [r4]
    769e:	2a00      	cmp	r2, #0
    76a0:	d1f7      	bne.n	7692 <bt_le_adv_resume+0x62>
    76a2:	f3bf 8f5b 	dmb	ish
}
    76a6:	b003      	add	sp, #12
    76a8:	bd30      	pop	{r4, r5, pc}
    76aa:	bf00      	nop
    76ac:	200002b0 	.word	0x200002b0

000076b0 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
    76b0:	b530      	push	{r4, r5, lr}
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    76b2:	2102      	movs	r1, #2
{
    76b4:	b087      	sub	sp, #28
    76b6:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    76b8:	f242 000c 	movw	r0, #8204	; 0x200c
    76bc:	f7fe fb22 	bl	5d04 <bt_hci_cmd_create>
	if (!buf) {
    76c0:	4605      	mov	r5, r0
    76c2:	b318      	cbz	r0, 770c <bt_le_scan_set_enable_legacy+0x5c>
	return net_buf_simple_add(&buf->b, len);
    76c4:	2102      	movs	r1, #2
    76c6:	3008      	adds	r0, #8
    76c8:	f020 fdbe 	bl	28248 <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    76cc:	2c01      	cmp	r4, #1
    76ce:	d11b      	bne.n	7708 <bt_le_scan_set_enable_legacy+0x58>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    76d0:	f3bf 8f5b 	dmb	ish
    76d4:	4b0f      	ldr	r3, [pc, #60]	; (7714 <bt_le_scan_set_enable_legacy+0x64>)
    76d6:	681b      	ldr	r3, [r3, #0]
    76d8:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    76dc:	f3c3 2300 	ubfx	r3, r3, #8, #1
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
						 BT_DEV_SCAN_FILTER_DUP);
	} else {
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    76e0:	7043      	strb	r3, [r0, #1]
	}

	cp->enable = enable;

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
    76e2:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
    76e4:	7004      	strb	r4, [r0, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
    76e6:	425c      	negs	r4, r3
    76e8:	415c      	adcs	r4, r3
    76ea:	4a0a      	ldr	r2, [pc, #40]	; (7714 <bt_le_scan_set_enable_legacy+0x64>)
    76ec:	9400      	str	r4, [sp, #0]
    76ee:	a903      	add	r1, sp, #12
    76f0:	4628      	mov	r0, r5
    76f2:	2305      	movs	r3, #5
    76f4:	f7fe faf4 	bl	5ce0 <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    76f8:	2200      	movs	r2, #0
    76fa:	4629      	mov	r1, r5
    76fc:	f242 000c 	movw	r0, #8204	; 0x200c
    7700:	f7fe fc58 	bl	5fb4 <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
    7704:	b007      	add	sp, #28
    7706:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    7708:	2300      	movs	r3, #0
    770a:	e7e9      	b.n	76e0 <bt_le_scan_set_enable_legacy+0x30>
		return -ENOBUFS;
    770c:	f06f 0068 	mvn.w	r0, #104	; 0x68
    7710:	e7f8      	b.n	7704 <bt_le_scan_set_enable_legacy+0x54>
    7712:	bf00      	nop
    7714:	20000354 	.word	0x20000354

00007718 <bt_scan_reset>:
	scan_dev_found_cb = NULL;
    7718:	4b01      	ldr	r3, [pc, #4]	; (7720 <bt_scan_reset+0x8>)
    771a:	2200      	movs	r2, #0
    771c:	601a      	str	r2, [r3, #0]
}
    771e:	4770      	bx	lr
    7720:	20002104 	.word	0x20002104

00007724 <bt_le_scan_update>:
    7724:	4b0a      	ldr	r3, [pc, #40]	; (7750 <bt_le_scan_update+0x2c>)
    7726:	f3bf 8f5b 	dmb	ish
    772a:	681a      	ldr	r2, [r3, #0]
    772c:	f3bf 8f5b 	dmb	ish
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    7730:	f3c2 1080 	ubfx	r0, r2, #6, #1
    7734:	0652      	lsls	r2, r2, #25
    7736:	d408      	bmi.n	774a <bt_le_scan_update+0x26>
    7738:	f3bf 8f5b 	dmb	ish
    773c:	681b      	ldr	r3, [r3, #0]
    773e:	f3bf 8f5b 	dmb	ish
		return 0;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    7742:	069b      	lsls	r3, r3, #26
    7744:	d501      	bpl.n	774a <bt_le_scan_update+0x26>
	return bt_le_scan_set_enable_legacy(enable);
    7746:	f7ff bfb3 	b.w	76b0 <bt_le_scan_set_enable_legacy>
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
    774a:	2000      	movs	r0, #0
    774c:	4770      	bx	lr
    774e:	bf00      	nop
    7750:	20000354 	.word	0x20000354

00007754 <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
    7754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
    7758:	f100 0808 	add.w	r8, r0, #8
    775c:	b08b      	sub	sp, #44	; 0x2c
    775e:	4604      	mov	r4, r0
    7760:	4640      	mov	r0, r8
    7762:	f020 fdf1 	bl	28348 <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
    7766:	f8df b164 	ldr.w	fp, [pc, #356]	; 78cc <bt_hci_le_adv_report+0x178>
    776a:	4606      	mov	r6, r0
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	BT_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
    776c:	b916      	cbnz	r6, 7774 <bt_hci_le_adv_report+0x20>

		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
    776e:	b00b      	add	sp, #44	; 0x2c
    7770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < sizeof(*evt)) {
    7774:	89a3      	ldrh	r3, [r4, #12]
    7776:	2b08      	cmp	r3, #8
    7778:	d80c      	bhi.n	7794 <bt_hci_le_adv_report+0x40>
    777a:	4b55      	ldr	r3, [pc, #340]	; (78d0 <bt_hci_le_adv_report+0x17c>)
    777c:	4955      	ldr	r1, [pc, #340]	; (78d4 <bt_hci_le_adv_report+0x180>)
			BT_ERR("Unexpected end of buffer");
    777e:	4856      	ldr	r0, [pc, #344]	; (78d8 <bt_hci_le_adv_report+0x184>)
    7780:	1ac9      	subs	r1, r1, r3
    7782:	08c9      	lsrs	r1, r1, #3
    7784:	0189      	lsls	r1, r1, #6
    7786:	f041 0101 	orr.w	r1, r1, #1
}
    778a:	b00b      	add	sp, #44	; 0x2c
    778c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			BT_ERR("Unexpected end of buffer");
    7790:	f01a b9ab 	b.w	21aea <log_0>
	return net_buf_simple_pull_mem(&buf->b, len);
    7794:	2109      	movs	r1, #9
    7796:	4640      	mov	r0, r8
    7798:	f020 fdce 	bl	28338 <net_buf_simple_pull_mem>
		adv_info.rssi = evt->data[evt->length];
    779c:	f890 a008 	ldrb.w	sl, [r0, #8]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    77a0:	237f      	movs	r3, #127	; 0x7f
    77a2:	f88d 301e 	strb.w	r3, [sp, #30]
		adv_info.rssi = evt->data[evt->length];
    77a6:	eb00 030a 	add.w	r3, r0, sl
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    77aa:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
    77ac:	7a5b      	ldrb	r3, [r3, #9]
    77ae:	f88d 301d 	strb.w	r3, [sp, #29]
		adv_info.sid = BT_GAP_SID_INVALID;
    77b2:	23ff      	movs	r3, #255	; 0xff
    77b4:	f88d 301c 	strb.w	r3, [sp, #28]
		adv_info.interval = 0U;
    77b8:	2300      	movs	r3, #0
    77ba:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    77be:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
		adv_info.adv_type = evt->evt_type;
    77c2:	7802      	ldrb	r2, [r0, #0]
    77c4:	f88d 201f 	strb.w	r2, [sp, #31]
    77c8:	2a04      	cmp	r2, #4
    77ca:	bf9c      	itt	ls
    77cc:	4b43      	ldrls	r3, [pc, #268]	; (78dc <bt_hci_le_adv_report+0x188>)
    77ce:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props(evt->evt_type);
    77d0:	f8ad 3020 	strh.w	r3, [sp, #32]
    77d4:	4b42      	ldr	r3, [pc, #264]	; (78e0 <bt_hci_le_adv_report+0x18c>)
    77d6:	f3bf 8f5b 	dmb	ish
    77da:	681b      	ldr	r3, [r3, #0]
    77dc:	f3bf 8f5b 	dmb	ish
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    77e0:	065a      	lsls	r2, r3, #25
    77e2:	4605      	mov	r5, r0
		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);
    77e4:	f100 0101 	add.w	r1, r0, #1
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    77e8:	d50b      	bpl.n	7802 <bt_hci_le_adv_report+0xae>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    77ea:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    77ee:	075b      	lsls	r3, r3, #29
    77f0:	d507      	bpl.n	7802 <bt_hci_le_adv_report+0xae>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
    77f2:	7a29      	ldrb	r1, [r5, #8]
	return net_buf_simple_pull(&buf->b, len);
    77f4:	4640      	mov	r0, r8
    77f6:	3101      	adds	r1, #1
    77f8:	3e01      	subs	r6, #1
    77fa:	f020 fd95 	bl	28328 <net_buf_simple_pull>
    77fe:	b2f6      	uxtb	r6, r6
    7800:	e7b4      	b.n	776c <bt_hci_le_adv_report+0x18>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    7802:	786b      	ldrb	r3, [r5, #1]
    7804:	1e9a      	subs	r2, r3, #2
    7806:	2a01      	cmp	r2, #1
    7808:	d84d      	bhi.n	78a6 <bt_hci_le_adv_report+0x152>
	memcpy(dst, src, sizeof(*dst));
    780a:	2207      	movs	r2, #7
    780c:	a802      	add	r0, sp, #8
    780e:	f01c facb 	bl	23da8 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    7812:	f89d 3008 	ldrb.w	r3, [sp, #8]
    7816:	3b02      	subs	r3, #2
    7818:	f88d 3008 	strb.w	r3, [sp, #8]
	info->addr = &id_addr;
    781c:	ab02      	add	r3, sp, #8
    781e:	9306      	str	r3, [sp, #24]
	if (scan_dev_found_cb) {
    7820:	f8db 3000 	ldr.w	r3, [fp]
    7824:	b1a3      	cbz	r3, 7850 <bt_hci_le_adv_report+0xfc>
	state->offset = net_buf_simple_headroom(buf);
    7826:	4640      	mov	r0, r8
    7828:	f020 fdbf 	bl	283aa <net_buf_simple_headroom>
	state->len = buf->len;
    782c:	89a7      	ldrh	r7, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    782e:	f89d 201f 	ldrb.w	r2, [sp, #31]
    7832:	f99d 101d 	ldrsb.w	r1, [sp, #29]
    7836:	f8db c000 	ldr.w	ip, [fp]
		buf->len = len;
    783a:	f8a4 a00c 	strh.w	sl, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    783e:	4681      	mov	r9, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    7840:	4643      	mov	r3, r8
    7842:	a802      	add	r0, sp, #8
    7844:	47e0      	blx	ip
	buf->data = buf->__buf + state->offset;
    7846:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    7848:	81a7      	strh	r7, [r4, #12]
	buf->data = buf->__buf + state->offset;
    784a:	fa10 f089 	uxtah	r0, r0, r9
    784e:	60a0      	str	r0, [r4, #8]
	return list->head;
    7850:	4b24      	ldr	r3, [pc, #144]	; (78e4 <bt_hci_le_adv_report+0x190>)
    7852:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    7854:	2b00      	cmp	r3, #0
    7856:	d0cc      	beq.n	77f2 <bt_hci_le_adv_report+0x9e>
    7858:	f1b3 0208 	subs.w	r2, r3, #8
    785c:	d0c9      	beq.n	77f2 <bt_hci_le_adv_report+0x9e>
	return node->next;
    785e:	681f      	ldr	r7, [r3, #0]
    7860:	b107      	cbz	r7, 7864 <bt_hci_le_adv_report+0x110>
    7862:	3f08      	subs	r7, #8
		if (listener->recv) {
    7864:	6813      	ldr	r3, [r2, #0]
    7866:	9201      	str	r2, [sp, #4]
    7868:	b193      	cbz	r3, 7890 <bt_hci_le_adv_report+0x13c>
	state->offset = net_buf_simple_headroom(buf);
    786a:	4640      	mov	r0, r8
    786c:	f020 fd9d 	bl	283aa <net_buf_simple_headroom>
			listener->recv(info, &buf->b);
    7870:	9a01      	ldr	r2, [sp, #4]
	state->len = buf->len;
    7872:	89a3      	ldrh	r3, [r4, #12]
    7874:	6812      	ldr	r2, [r2, #0]
			buf->len = len;
    7876:	f8a4 a00c 	strh.w	sl, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    787a:	4681      	mov	r9, r0
			listener->recv(info, &buf->b);
    787c:	4641      	mov	r1, r8
    787e:	a806      	add	r0, sp, #24
	state->len = buf->len;
    7880:	9300      	str	r3, [sp, #0]
    7882:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
    7884:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    7886:	9b00      	ldr	r3, [sp, #0]
    7888:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
    788a:	fa10 f089 	uxtah	r0, r0, r9
    788e:	60a0      	str	r0, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    7890:	2f00      	cmp	r7, #0
    7892:	d0ae      	beq.n	77f2 <bt_hci_le_adv_report+0x9e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    7894:	f117 0308 	adds.w	r3, r7, #8
    7898:	d002      	beq.n	78a0 <bt_hci_le_adv_report+0x14c>
	return node->next;
    789a:	68bb      	ldr	r3, [r7, #8]
    789c:	b103      	cbz	r3, 78a0 <bt_hci_le_adv_report+0x14c>
    789e:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
    78a0:	463a      	mov	r2, r7
    78a2:	461f      	mov	r7, r3
    78a4:	e7de      	b.n	7864 <bt_hci_le_adv_report+0x110>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    78a6:	2bff      	cmp	r3, #255	; 0xff
    78a8:	d109      	bne.n	78be <bt_hci_le_adv_report+0x16a>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    78aa:	2300      	movs	r3, #0
    78ac:	9304      	str	r3, [sp, #16]
    78ae:	2207      	movs	r2, #7
    78b0:	f8cd 3013 	str.w	r3, [sp, #19]
    78b4:	a904      	add	r1, sp, #16
    78b6:	a802      	add	r0, sp, #8
    78b8:	f01c fa76 	bl	23da8 <memcpy>
}
    78bc:	e7ae      	b.n	781c <bt_hci_le_adv_report+0xc8>
		bt_addr_le_copy(&id_addr,
    78be:	2000      	movs	r0, #0
    78c0:	f01c fdf6 	bl	244b0 <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
    78c4:	2207      	movs	r2, #7
    78c6:	4601      	mov	r1, r0
    78c8:	e7f5      	b.n	78b6 <bt_hci_le_adv_report+0x162>
    78ca:	bf00      	nop
    78cc:	20002104 	.word	0x20002104
    78d0:	00029870 	.word	0x00029870
    78d4:	00029a40 	.word	0x00029a40
    78d8:	0002bd82 	.word	0x0002bd82
    78dc:	0002bda3 	.word	0x0002bda3
    78e0:	20000354 	.word	0x20000354
    78e4:	200020fc 	.word	0x200020fc

000078e8 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    78e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    78ec:	4c62      	ldr	r4, [pc, #392]	; (7a78 <bt_le_scan_start+0x190>)
    78ee:	f3bf 8f5b 	dmb	ish
    78f2:	6823      	ldr	r3, [r4, #0]
    78f4:	f3bf 8f5b 	dmb	ish
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    78f8:	f013 0f02 	tst.w	r3, #2
{
    78fc:	4605      	mov	r5, r0
    78fe:	460f      	mov	r7, r1
    7900:	4626      	mov	r6, r4
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    7902:	f000 80b6 	beq.w	7a72 <bt_le_scan_start+0x18a>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    7906:	7802      	ldrb	r2, [r0, #0]
    7908:	2a01      	cmp	r2, #1
    790a:	d905      	bls.n	7918 <bt_le_scan_start+0x30>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    790c:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
    7910:	4620      	mov	r0, r4
    7912:	b003      	add	sp, #12
    7914:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
    7918:	6843      	ldr	r3, [r0, #4]
    791a:	f033 030f 	bics.w	r3, r3, #15
    791e:	d1f5      	bne.n	790c <bt_le_scan_start+0x24>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    7920:	8900      	ldrh	r0, [r0, #8]
    7922:	1f03      	subs	r3, r0, #4
    7924:	b29b      	uxth	r3, r3
    7926:	f643 7cfc 	movw	ip, #16380	; 0x3ffc
    792a:	4563      	cmp	r3, ip
    792c:	d8ee      	bhi.n	790c <bt_le_scan_start+0x24>
	if (param->window < 0x0004 || param->window > 0x4000) {
    792e:	8969      	ldrh	r1, [r5, #10]
    7930:	1f0b      	subs	r3, r1, #4
    7932:	b29b      	uxth	r3, r3
    7934:	4563      	cmp	r3, ip
    7936:	d8e9      	bhi.n	790c <bt_le_scan_start+0x24>
	if (param->window > param->interval) {
    7938:	4288      	cmp	r0, r1
    793a:	d3e7      	bcc.n	790c <bt_le_scan_start+0x24>
	if (param->type && !bt_id_scan_random_addr_check()) {
    793c:	b98a      	cbnz	r2, 7962 <bt_le_scan_start+0x7a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    793e:	f3bf 8f5b 	dmb	ish
    7942:	e856 0f00 	ldrex	r0, [r6]
    7946:	f040 0340 	orr.w	r3, r0, #64	; 0x40
    794a:	e846 3200 	strex	r2, r3, [r6]
    794e:	2a00      	cmp	r2, #0
    7950:	d1f7      	bne.n	7942 <bt_le_scan_start+0x5a>
    7952:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    7956:	f010 0040 	ands.w	r0, r0, #64	; 0x40
    795a:	d007      	beq.n	796c <bt_le_scan_start+0x84>
		return -EALREADY;
    795c:	f06f 0477 	mvn.w	r4, #119	; 0x77
    7960:	e7d6      	b.n	7910 <bt_le_scan_start+0x28>
	if (param->type && !bt_id_scan_random_addr_check()) {
    7962:	f01c fdcb 	bl	244fc <bt_id_scan_random_addr_check>
    7966:	2800      	cmp	r0, #0
    7968:	d1e9      	bne.n	793e <bt_le_scan_start+0x56>
    796a:	e7cf      	b.n	790c <bt_le_scan_start+0x24>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    796c:	f3bf 8f5b 	dmb	ish
    7970:	6823      	ldr	r3, [r4, #0]
    7972:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    7976:	0699      	lsls	r1, r3, #26
    7978:	d509      	bpl.n	798e <bt_le_scan_start+0xa6>
	return bt_le_scan_set_enable_legacy(enable);
    797a:	f7ff fe99 	bl	76b0 <bt_le_scan_set_enable_legacy>
		if (err) {
    797e:	4604      	mov	r4, r0
    7980:	b128      	cbz	r0, 798e <bt_le_scan_start+0xa6>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7982:	f06f 0140 	mvn.w	r1, #64	; 0x40
    7986:	483c      	ldr	r0, [pc, #240]	; (7a78 <bt_le_scan_start+0x190>)
    7988:	f01c fead 	bl	246e6 <atomic_and>
		return err;
    798c:	e7c0      	b.n	7910 <bt_le_scan_start+0x28>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
    798e:	686b      	ldr	r3, [r5, #4]
	if (val) {
    7990:	07da      	lsls	r2, r3, #31
    7992:	d515      	bpl.n	79c0 <bt_le_scan_start+0xd8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7994:	f3bf 8f5b 	dmb	ish
    7998:	e856 3f00 	ldrex	r3, [r6]
    799c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    79a0:	e846 3200 	strex	r2, r3, [r6]
    79a4:	2a00      	cmp	r2, #0
    79a6:	d1f7      	bne.n	7998 <bt_le_scan_start+0xb0>
    79a8:	f3bf 8f5b 	dmb	ish
		if (param->timeout) {
    79ac:	89ac      	ldrh	r4, [r5, #12]
    79ae:	b16c      	cbz	r4, 79cc <bt_le_scan_start+0xe4>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    79b0:	4831      	ldr	r0, [pc, #196]	; (7a78 <bt_le_scan_start+0x190>)
    79b2:	f06f 0140 	mvn.w	r1, #64	; 0x40
    79b6:	f01c fe96 	bl	246e6 <atomic_and>
			return -ENOTSUP;
    79ba:	f06f 0485 	mvn.w	r4, #133	; 0x85
    79be:	e7a7      	b.n	7910 <bt_le_scan_start+0x28>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    79c0:	f46f 7180 	mvn.w	r1, #256	; 0x100
    79c4:	482c      	ldr	r0, [pc, #176]	; (7a78 <bt_le_scan_start+0x190>)
    79c6:	f01c fe8e 	bl	246e6 <atomic_and>
    79ca:	e7ef      	b.n	79ac <bt_le_scan_start+0xc4>
		err = start_le_scan_legacy(param->type, param->interval,
    79cc:	f895 8000 	ldrb.w	r8, [r5]
    79d0:	f8b5 9008 	ldrh.w	r9, [r5, #8]
    79d4:	896d      	ldrh	r5, [r5, #10]
	(void)memset(&set_param, 0, sizeof(set_param));
    79d6:	4621      	mov	r1, r4
    79d8:	2207      	movs	r2, #7
    79da:	4668      	mov	r0, sp
    79dc:	f01c f9ef 	bl	23dbe <memset>
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
    79e0:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    79e4:	4258      	negs	r0, r3
    79e6:	f10d 0105 	add.w	r1, sp, #5
    79ea:	4158      	adcs	r0, r3
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
    79ec:	f88d 4006 	strb.w	r4, [sp, #6]
	set_param.scan_type = scan_type;
    79f0:	f88d 8000 	strb.w	r8, [sp]
	set_param.interval = sys_cpu_to_le16(interval);
    79f4:	f8ad 9001 	strh.w	r9, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
    79f8:	f8ad 5003 	strh.w	r5, [sp, #3]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
    79fc:	f7ff fa8a 	bl	6f14 <bt_id_set_scan_own_addr>
	if (err) {
    7a00:	4604      	mov	r4, r0
    7a02:	2800      	cmp	r0, #0
    7a04:	d1bd      	bne.n	7982 <bt_le_scan_start+0x9a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    7a06:	2107      	movs	r1, #7
    7a08:	f242 000b 	movw	r0, #8203	; 0x200b
    7a0c:	f7fe f97a 	bl	5d04 <bt_hci_cmd_create>
	if (!buf) {
    7a10:	4605      	mov	r5, r0
    7a12:	b358      	cbz	r0, 7a6c <bt_le_scan_start+0x184>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    7a14:	2207      	movs	r2, #7
    7a16:	4669      	mov	r1, sp
    7a18:	3008      	adds	r0, #8
    7a1a:	f020 fc1b 	bl	28254 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
    7a1e:	4622      	mov	r2, r4
    7a20:	4629      	mov	r1, r5
    7a22:	f242 000b 	movw	r0, #8203	; 0x200b
    7a26:	f7fe fac5 	bl	5fb4 <bt_hci_cmd_send_sync>
	if (err) {
    7a2a:	4604      	mov	r4, r0
    7a2c:	2800      	cmp	r0, #0
    7a2e:	d1a8      	bne.n	7982 <bt_le_scan_start+0x9a>
	return bt_le_scan_set_enable_legacy(enable);
    7a30:	2001      	movs	r0, #1
    7a32:	f7ff fe3d 	bl	76b0 <bt_le_scan_set_enable_legacy>
	if (err) {
    7a36:	4604      	mov	r4, r0
    7a38:	2800      	cmp	r0, #0
    7a3a:	d1a2      	bne.n	7982 <bt_le_scan_start+0x9a>
	if (val) {
    7a3c:	f1b8 0f01 	cmp.w	r8, #1
    7a40:	d10e      	bne.n	7a60 <bt_le_scan_start+0x178>
    7a42:	f3bf 8f5b 	dmb	ish
    7a46:	e856 3f00 	ldrex	r3, [r6]
    7a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    7a4e:	e846 3200 	strex	r2, r3, [r6]
    7a52:	2a00      	cmp	r2, #0
    7a54:	d1f7      	bne.n	7a46 <bt_le_scan_start+0x15e>
    7a56:	f3bf 8f5b 	dmb	ish
	scan_dev_found_cb = cb;
    7a5a:	4b08      	ldr	r3, [pc, #32]	; (7a7c <bt_le_scan_start+0x194>)
    7a5c:	601f      	str	r7, [r3, #0]
	return 0;
    7a5e:	e757      	b.n	7910 <bt_le_scan_start+0x28>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7a60:	f06f 0180 	mvn.w	r1, #128	; 0x80
    7a64:	4804      	ldr	r0, [pc, #16]	; (7a78 <bt_le_scan_start+0x190>)
    7a66:	f01c fe3e 	bl	246e6 <atomic_and>
	if (err) {
    7a6a:	e7f6      	b.n	7a5a <bt_le_scan_start+0x172>
		return -ENOBUFS;
    7a6c:	f06f 0468 	mvn.w	r4, #104	; 0x68
    7a70:	e787      	b.n	7982 <bt_le_scan_start+0x9a>
		return -EAGAIN;
    7a72:	f06f 040a 	mvn.w	r4, #10
    7a76:	e74b      	b.n	7910 <bt_le_scan_start+0x28>
    7a78:	20000354 	.word	0x20000354
    7a7c:	20002104 	.word	0x20002104

00007a80 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    7a80:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7a82:	4808      	ldr	r0, [pc, #32]	; (7aa4 <bt_le_scan_stop+0x24>)
    7a84:	f06f 0140 	mvn.w	r1, #64	; 0x40
    7a88:	f01c fe2d 	bl	246e6 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    7a8c:	0643      	lsls	r3, r0, #25
    7a8e:	d506      	bpl.n	7a9e <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
    7a90:	4b05      	ldr	r3, [pc, #20]	; (7aa8 <bt_le_scan_stop+0x28>)
    7a92:	2000      	movs	r0, #0
    7a94:	6018      	str	r0, [r3, #0]
		bt_id_pending_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
    7a96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    7a9a:	f7ff be43 	b.w	7724 <bt_le_scan_update>
}
    7a9e:	f06f 0077 	mvn.w	r0, #119	; 0x77
    7aa2:	bd08      	pop	{r3, pc}
    7aa4:	20000354 	.word	0x20000354
    7aa8:	20002104 	.word	0x20002104

00007aac <bt_pub_key_gen>:
{
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
}

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    7aac:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    7aae:	4b44      	ldr	r3, [pc, #272]	; (7bc0 <bt_pub_key_gen+0x114>)
    7ab0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    7ab4:	f003 0306 	and.w	r3, r3, #6
    7ab8:	2b06      	cmp	r3, #6
    7aba:	d00d      	beq.n	7ad8 <bt_pub_key_gen+0x2c>
    7abc:	4b41      	ldr	r3, [pc, #260]	; (7bc4 <bt_pub_key_gen+0x118>)
    7abe:	4942      	ldr	r1, [pc, #264]	; (7bc8 <bt_pub_key_gen+0x11c>)
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
    7ac0:	4842      	ldr	r0, [pc, #264]	; (7bcc <bt_pub_key_gen+0x120>)
    7ac2:	1ac9      	subs	r1, r1, r3
    7ac4:	08c9      	lsrs	r1, r1, #3
    7ac6:	0189      	lsls	r1, r1, #6
    7ac8:	f041 0102 	orr.w	r1, r1, #2
    7acc:	f01a f80d 	bl	21aea <log_0>
		return -ENOTSUP;
    7ad0:	f06f 0585 	mvn.w	r5, #133	; 0x85
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
    7ad4:	4628      	mov	r0, r5
    7ad6:	bd70      	pop	{r4, r5, r6, pc}
	if (!new_cb) {
    7ad8:	2800      	cmp	r0, #0
    7ada:	d06d      	beq.n	7bb8 <bt_pub_key_gen+0x10c>
	return list->head;
    7adc:	4e3c      	ldr	r6, [pc, #240]	; (7bd0 <bt_pub_key_gen+0x124>)
    7ade:	6832      	ldr	r2, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    7ae0:	b10a      	cbz	r2, 7ae6 <bt_pub_key_gen+0x3a>
    7ae2:	1f13      	subs	r3, r2, #4
    7ae4:	b9bb      	cbnz	r3, 7b16 <bt_pub_key_gen+0x6a>
	parent->next = child;
    7ae6:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
    7ae8:	6872      	ldr	r2, [r6, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
    7aea:	1d03      	adds	r3, r0, #4
	list->head = node;
    7aec:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
    7aee:	b902      	cbnz	r2, 7af2 <bt_pub_key_gen+0x46>
	list->tail = node;
    7af0:	6073      	str	r3, [r6, #4]
    7af2:	4c38      	ldr	r4, [pc, #224]	; (7bd4 <bt_pub_key_gen+0x128>)
    7af4:	f3bf 8f5b 	dmb	ish
    7af8:	e854 2f00 	ldrex	r2, [r4]
    7afc:	f042 0310 	orr.w	r3, r2, #16
    7b00:	e844 3100 	strex	r1, r3, [r4]
    7b04:	2900      	cmp	r1, #0
    7b06:	d1f7      	bne.n	7af8 <bt_pub_key_gen+0x4c>
    7b08:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    7b0c:	f012 0210 	ands.w	r2, r2, #16
    7b10:	d017      	beq.n	7b42 <bt_pub_key_gen+0x96>
		return 0;
    7b12:	2500      	movs	r5, #0
    7b14:	e7de      	b.n	7ad4 <bt_pub_key_gen+0x28>
		if (cb == new_cb) {
    7b16:	4298      	cmp	r0, r3
    7b18:	d10c      	bne.n	7b34 <bt_pub_key_gen+0x88>
    7b1a:	4b2a      	ldr	r3, [pc, #168]	; (7bc4 <bt_pub_key_gen+0x118>)
    7b1c:	492a      	ldr	r1, [pc, #168]	; (7bc8 <bt_pub_key_gen+0x11c>)
			BT_WARN("Callback already registered");
    7b1e:	482e      	ldr	r0, [pc, #184]	; (7bd8 <bt_pub_key_gen+0x12c>)
    7b20:	1ac9      	subs	r1, r1, r3
    7b22:	08c9      	lsrs	r1, r1, #3
    7b24:	0189      	lsls	r1, r1, #6
    7b26:	f041 0102 	orr.w	r1, r1, #2
    7b2a:	f019 ffde 	bl	21aea <log_0>
			return -EALREADY;
    7b2e:	f06f 0577 	mvn.w	r5, #119	; 0x77
    7b32:	e7cf      	b.n	7ad4 <bt_pub_key_gen+0x28>
Z_GENLIST_PEEK_NEXT(slist, snode)
    7b34:	1d19      	adds	r1, r3, #4
    7b36:	d0d6      	beq.n	7ae6 <bt_pub_key_gen+0x3a>
	return node->next;
    7b38:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    7b3a:	2b00      	cmp	r3, #0
    7b3c:	d0d3      	beq.n	7ae6 <bt_pub_key_gen+0x3a>
    7b3e:	3b04      	subs	r3, #4
    7b40:	e7d0      	b.n	7ae4 <bt_pub_key_gen+0x38>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7b42:	f3bf 8f5b 	dmb	ish
    7b46:	e854 3f00 	ldrex	r3, [r4]
    7b4a:	f023 0308 	bic.w	r3, r3, #8
    7b4e:	e844 3100 	strex	r1, r3, [r4]
    7b52:	2900      	cmp	r1, #0
    7b54:	d1f7      	bne.n	7b46 <bt_pub_key_gen+0x9a>
    7b56:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    7b5a:	4611      	mov	r1, r2
    7b5c:	f242 0025 	movw	r0, #8229	; 0x2025
    7b60:	f7fe fa28 	bl	5fb4 <bt_hci_cmd_send_sync>
	if (err) {
    7b64:	4605      	mov	r5, r0
    7b66:	2800      	cmp	r0, #0
    7b68:	d0d3      	beq.n	7b12 <bt_pub_key_gen+0x66>
    7b6a:	4b16      	ldr	r3, [pc, #88]	; (7bc4 <bt_pub_key_gen+0x118>)
    7b6c:	4916      	ldr	r1, [pc, #88]	; (7bc8 <bt_pub_key_gen+0x11c>)
		BT_ERR("Sending LE P256 Public Key command failed");
    7b6e:	481b      	ldr	r0, [pc, #108]	; (7bdc <bt_pub_key_gen+0x130>)
    7b70:	1ac9      	subs	r1, r1, r3
    7b72:	08c9      	lsrs	r1, r1, #3
    7b74:	0189      	lsls	r1, r1, #6
    7b76:	f041 0101 	orr.w	r1, r1, #1
    7b7a:	f019 ffb6 	bl	21aea <log_0>
    7b7e:	f3bf 8f5b 	dmb	ish
    7b82:	e854 3f00 	ldrex	r3, [r4]
    7b86:	f023 0310 	bic.w	r3, r3, #16
    7b8a:	e844 3200 	strex	r2, r3, [r4]
    7b8e:	2a00      	cmp	r2, #0
    7b90:	d1f7      	bne.n	7b82 <bt_pub_key_gen+0xd6>
    7b92:	f3bf 8f5b 	dmb	ish
	return list->head;
    7b96:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    7b98:	b91c      	cbnz	r4, 7ba2 <bt_pub_key_gen+0xf6>
	list->head = NULL;
    7b9a:	2300      	movs	r3, #0
	list->tail = NULL;
    7b9c:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
    7ba0:	e798      	b.n	7ad4 <bt_pub_key_gen+0x28>
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    7ba2:	3c04      	subs	r4, #4
    7ba4:	2c00      	cmp	r4, #0
    7ba6:	d0f8      	beq.n	7b9a <bt_pub_key_gen+0xee>
			if (cb->func) {
    7ba8:	6823      	ldr	r3, [r4, #0]
    7baa:	b10b      	cbz	r3, 7bb0 <bt_pub_key_gen+0x104>
				cb->func(NULL);
    7bac:	2000      	movs	r0, #0
    7bae:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    7bb0:	1d23      	adds	r3, r4, #4
    7bb2:	d0f2      	beq.n	7b9a <bt_pub_key_gen+0xee>
	return node->next;
    7bb4:	6864      	ldr	r4, [r4, #4]
    7bb6:	e7ef      	b.n	7b98 <bt_pub_key_gen+0xec>
		return -EINVAL;
    7bb8:	f06f 0515 	mvn.w	r5, #21
    7bbc:	e78a      	b.n	7ad4 <bt_pub_key_gen+0x28>
    7bbe:	bf00      	nop
    7bc0:	20000288 	.word	0x20000288
    7bc4:	00029870 	.word	0x00029870
    7bc8:	00029950 	.word	0x00029950
    7bcc:	0002bda8 	.word	0x0002bda8
    7bd0:	2000210c 	.word	0x2000210c
    7bd4:	20000354 	.word	0x20000354
    7bd8:	0002bdc7 	.word	0x0002bdc7
    7bdc:	0002bde3 	.word	0x0002bde3

00007be0 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7be0:	4b05      	ldr	r3, [pc, #20]	; (7bf8 <bt_pub_key_get+0x18>)
    7be2:	f3bf 8f5b 	dmb	ish
    7be6:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
    7be8:	4804      	ldr	r0, [pc, #16]	; (7bfc <bt_pub_key_get+0x1c>)
    7bea:	f3bf 8f5b 	dmb	ish
		return pub_key;
    7bee:	f013 0f08 	tst.w	r3, #8
}
    7bf2:	bf08      	it	eq
    7bf4:	2000      	moveq	r0, #0
    7bf6:	4770      	bx	lr
    7bf8:	20000354 	.word	0x20000354
    7bfc:	20003866 	.word	0x20003866

00007c00 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
    7c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
    7c02:	4d25      	ldr	r5, [pc, #148]	; (7c98 <bt_dh_key_gen+0x98>)
    7c04:	682b      	ldr	r3, [r5, #0]
    7c06:	428b      	cmp	r3, r1
{
    7c08:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
    7c0a:	d03f      	beq.n	7c8c <bt_dh_key_gen+0x8c>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    7c0c:	b11b      	cbz	r3, 7c16 <bt_dh_key_gen+0x16>
		return -EBUSY;
    7c0e:	f06f 040f 	mvn.w	r4, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
    7c12:	4620      	mov	r0, r4
    7c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7c16:	4b21      	ldr	r3, [pc, #132]	; (7c9c <bt_dh_key_gen+0x9c>)
    7c18:	f3bf 8f5b 	dmb	ish
    7c1c:	681a      	ldr	r2, [r3, #0]
    7c1e:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    7c22:	f3c2 1700 	ubfx	r7, r2, #4, #1
    7c26:	06d2      	lsls	r2, r2, #27
    7c28:	d4f1      	bmi.n	7c0e <bt_dh_key_gen+0xe>
    7c2a:	f3bf 8f5b 	dmb	ish
    7c2e:	681b      	ldr	r3, [r3, #0]
    7c30:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    7c34:	071b      	lsls	r3, r3, #28
    7c36:	d52c      	bpl.n	7c92 <bt_dh_key_gen+0x92>
	dh_key_cb = cb;
    7c38:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    7c3a:	f242 0026 	movw	r0, #8230	; 0x2026
    7c3e:	2140      	movs	r1, #64	; 0x40
    7c40:	f7fe f860 	bl	5d04 <bt_hci_cmd_create>
	if (!buf) {
    7c44:	4604      	mov	r4, r0
    7c46:	b1f0      	cbz	r0, 7c86 <bt_dh_key_gen+0x86>
	return net_buf_simple_add(&buf->b, len);
    7c48:	2140      	movs	r1, #64	; 0x40
    7c4a:	3008      	adds	r0, #8
    7c4c:	f020 fafc 	bl	28248 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    7c50:	2240      	movs	r2, #64	; 0x40
    7c52:	4631      	mov	r1, r6
    7c54:	f01c f8a8 	bl	23da8 <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    7c58:	4621      	mov	r1, r4
    7c5a:	463a      	mov	r2, r7
    7c5c:	f242 0026 	movw	r0, #8230	; 0x2026
    7c60:	f7fe f9a8 	bl	5fb4 <bt_hci_cmd_send_sync>
	if (err) {
    7c64:	4604      	mov	r4, r0
    7c66:	2800      	cmp	r0, #0
    7c68:	d0d3      	beq.n	7c12 <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
    7c6a:	2300      	movs	r3, #0
    7c6c:	602b      	str	r3, [r5, #0]
    7c6e:	4a0c      	ldr	r2, [pc, #48]	; (7ca0 <bt_dh_key_gen+0xa0>)
    7c70:	4b0c      	ldr	r3, [pc, #48]	; (7ca4 <bt_dh_key_gen+0xa4>)
		BT_WARN("Failed to generate DHKey (err %d)", err);
    7c72:	480d      	ldr	r0, [pc, #52]	; (7ca8 <bt_dh_key_gen+0xa8>)
    7c74:	1ad2      	subs	r2, r2, r3
    7c76:	08d2      	lsrs	r2, r2, #3
    7c78:	0192      	lsls	r2, r2, #6
    7c7a:	f042 0202 	orr.w	r2, r2, #2
    7c7e:	4621      	mov	r1, r4
    7c80:	f019 ff40 	bl	21b04 <log_1>
		return err;
    7c84:	e7c5      	b.n	7c12 <bt_dh_key_gen+0x12>
		return -ENOBUFS;
    7c86:	f06f 0468 	mvn.w	r4, #104	; 0x68
    7c8a:	e7ee      	b.n	7c6a <bt_dh_key_gen+0x6a>
		return -EALREADY;
    7c8c:	f06f 0477 	mvn.w	r4, #119	; 0x77
    7c90:	e7bf      	b.n	7c12 <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
    7c92:	f06f 047c 	mvn.w	r4, #124	; 0x7c
    7c96:	e7bc      	b.n	7c12 <bt_dh_key_gen+0x12>
    7c98:	20002108 	.word	0x20002108
    7c9c:	20000354 	.word	0x20000354
    7ca0:	00029950 	.word	0x00029950
    7ca4:	00029870 	.word	0x00029870
    7ca8:	0002be0d 	.word	0x0002be0d

00007cac <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
    7cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7cae:	4c1d      	ldr	r4, [pc, #116]	; (7d24 <bt_hci_evt_le_pkey_complete+0x78>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    7cb0:	6886      	ldr	r6, [r0, #8]
    7cb2:	f3bf 8f5b 	dmb	ish
    7cb6:	e854 3f00 	ldrex	r3, [r4]
    7cba:	f023 0310 	bic.w	r3, r3, #16
    7cbe:	e844 3200 	strex	r2, r3, [r4]
    7cc2:	2a00      	cmp	r2, #0
    7cc4:	d1f7      	bne.n	7cb6 <bt_hci_evt_le_pkey_complete+0xa>
    7cc6:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
    7cca:	7833      	ldrb	r3, [r6, #0]
    7ccc:	b983      	cbnz	r3, 7cf0 <bt_hci_evt_le_pkey_complete+0x44>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
    7cce:	4816      	ldr	r0, [pc, #88]	; (7d28 <bt_hci_evt_le_pkey_complete+0x7c>)
    7cd0:	2240      	movs	r2, #64	; 0x40
    7cd2:	1c71      	adds	r1, r6, #1
    7cd4:	f01c f868 	bl	23da8 <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7cd8:	f3bf 8f5b 	dmb	ish
    7cdc:	e854 3f00 	ldrex	r3, [r4]
    7ce0:	f043 0308 	orr.w	r3, r3, #8
    7ce4:	e844 3200 	strex	r2, r3, [r4]
    7ce8:	2a00      	cmp	r2, #0
    7cea:	d1f7      	bne.n	7cdc <bt_hci_evt_le_pkey_complete+0x30>
    7cec:	f3bf 8f5b 	dmb	ish
	return list->head;
    7cf0:	4d0e      	ldr	r5, [pc, #56]	; (7d2c <bt_hci_evt_le_pkey_complete+0x80>)
    7cf2:	682c      	ldr	r4, [r5, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    7cf4:	b91c      	cbnz	r4, 7cfe <bt_hci_evt_le_pkey_complete+0x52>
	list->head = NULL;
    7cf6:	2300      	movs	r3, #0
	list->tail = NULL;
    7cf8:	e9c5 3300 	strd	r3, r3, [r5]
			cb->func(evt->status ? NULL : pub_key);
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
    7cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			cb->func(evt->status ? NULL : pub_key);
    7cfe:	4f0a      	ldr	r7, [pc, #40]	; (7d28 <bt_hci_evt_le_pkey_complete+0x7c>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    7d00:	3c04      	subs	r4, #4
    7d02:	2c00      	cmp	r4, #0
    7d04:	d0f7      	beq.n	7cf6 <bt_hci_evt_le_pkey_complete+0x4a>
		if (cb->func) {
    7d06:	6823      	ldr	r3, [r4, #0]
    7d08:	b12b      	cbz	r3, 7d16 <bt_hci_evt_le_pkey_complete+0x6a>
			cb->func(evt->status ? NULL : pub_key);
    7d0a:	7832      	ldrb	r2, [r6, #0]
    7d0c:	2a00      	cmp	r2, #0
    7d0e:	bf0c      	ite	eq
    7d10:	4638      	moveq	r0, r7
    7d12:	2000      	movne	r0, #0
    7d14:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    7d16:	1d23      	adds	r3, r4, #4
    7d18:	d0ed      	beq.n	7cf6 <bt_hci_evt_le_pkey_complete+0x4a>
	return node->next;
    7d1a:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    7d1c:	2c00      	cmp	r4, #0
    7d1e:	d0ea      	beq.n	7cf6 <bt_hci_evt_le_pkey_complete+0x4a>
    7d20:	3c04      	subs	r4, #4
    7d22:	e7ee      	b.n	7d02 <bt_hci_evt_le_pkey_complete+0x56>
    7d24:	20000354 	.word	0x20000354
    7d28:	20003866 	.word	0x20003866
    7d2c:	2000210c 	.word	0x2000210c

00007d30 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
    7d30:	4905      	ldr	r1, [pc, #20]	; (7d48 <bt_hci_evt_le_dhkey_complete+0x18>)
    7d32:	680b      	ldr	r3, [r1, #0]
    7d34:	b133      	cbz	r3, 7d44 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    7d36:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
    7d38:	2000      	movs	r0, #0
    7d3a:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
    7d3c:	7811      	ldrb	r1, [r2, #0]
    7d3e:	b901      	cbnz	r1, 7d42 <bt_hci_evt_le_dhkey_complete+0x12>
    7d40:	1c50      	adds	r0, r2, #1
    7d42:	4718      	bx	r3
	}
}
    7d44:	4770      	bx	lr
    7d46:	bf00      	nop
    7d48:	20002108 	.word	0x20002108

00007d4c <tx_free>:
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    7d4c:	2300      	movs	r3, #0
	tx->user_data = NULL;
    7d4e:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
    7d52:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
    7d54:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    7d56:	4801      	ldr	r0, [pc, #4]	; (7d5c <tx_free+0x10>)
    7d58:	f020 bf2c 	b.w	28bb4 <k_queue_append>
    7d5c:	20001158 	.word	0x20001158

00007d60 <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    7d60:	4b0e      	ldr	r3, [pc, #56]	; (7d9c <notify_connected+0x3c>)
{
    7d62:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    7d64:	681d      	ldr	r5, [r3, #0]
{
    7d66:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    7d68:	b955      	cbnz	r5, 7d80 <notify_connected+0x20>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    7d6a:	4d0d      	ldr	r5, [pc, #52]	; (7da0 <notify_connected+0x40>)
    7d6c:	4e0d      	ldr	r6, [pc, #52]	; (7da4 <notify_connected+0x44>)
		if (cb->connected) {
			cb->connected(conn, conn->err);
    7d6e:	7a61      	ldrb	r1, [r4, #9]
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    7d70:	42b5      	cmp	r5, r6
    7d72:	d30c      	bcc.n	7d8e <notify_connected+0x2e>
		}
	}

	if (!conn->err) {
    7d74:	b989      	cbnz	r1, 7d9a <notify_connected+0x3a>
		bt_gatt_connected(conn);
    7d76:	4620      	mov	r0, r4
	}
}
    7d78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_gatt_connected(conn);
    7d7c:	f003 b9f6 	b.w	b16c <bt_gatt_connected>
		if (cb->connected) {
    7d80:	682b      	ldr	r3, [r5, #0]
    7d82:	b113      	cbz	r3, 7d8a <notify_connected+0x2a>
			cb->connected(conn, conn->err);
    7d84:	7a61      	ldrb	r1, [r4, #9]
    7d86:	4620      	mov	r0, r4
    7d88:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    7d8a:	692d      	ldr	r5, [r5, #16]
    7d8c:	e7ec      	b.n	7d68 <notify_connected+0x8>
		if (cb->connected) {
    7d8e:	682b      	ldr	r3, [r5, #0]
    7d90:	b10b      	cbz	r3, 7d96 <notify_connected+0x36>
			cb->connected(conn, conn->err);
    7d92:	4620      	mov	r0, r4
    7d94:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    7d96:	3514      	adds	r5, #20
    7d98:	e7e9      	b.n	7d6e <notify_connected+0xe>
}
    7d9a:	bd70      	pop	{r4, r5, r6, pc}
    7d9c:	20002114 	.word	0x20002114
    7da0:	000296fc 	.word	0x000296fc
    7da4:	000296fc 	.word	0x000296fc

00007da8 <send_frag>:
{
    7da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    7dac:	694d      	ldr	r5, [r1, #20]
{
    7dae:	4604      	mov	r4, r0
    7db0:	460e      	mov	r6, r1
    7db2:	4691      	mov	r9, r2
    7db4:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
    7db6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7dba:	4844      	ldr	r0, [pc, #272]	; (7ecc <send_frag+0x124>)
    7dbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7dc0:	f018 f94e 	bl	20060 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
    7dc4:	7aa3      	ldrb	r3, [r4, #10]
    7dc6:	2b07      	cmp	r3, #7
    7dc8:	d151      	bne.n	7e6e <send_frag+0xc6>
	__asm__ volatile(
    7dca:	f04f 0320 	mov.w	r3, #32
    7dce:	f3ef 8211 	mrs	r2, BASEPRI
    7dd2:	f383 8812 	msr	BASEPRI_MAX, r3
    7dd6:	f3bf 8f6f 	isb	sy
	if (tx) {
    7dda:	69a3      	ldr	r3, [r4, #24]
    7ddc:	2d00      	cmp	r5, #0
    7dde:	d058      	beq.n	7e92 <send_frag+0xea>
	parent->next = child;
    7de0:	2100      	movs	r1, #0
    7de2:	6029      	str	r1, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    7de4:	2b00      	cmp	r3, #0
    7de6:	d151      	bne.n	7e8c <send_frag+0xe4>
	list->head = node;
    7de8:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    7dec:	f382 8811 	msr	BASEPRI, r2
    7df0:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
    7df4:	2104      	movs	r1, #4
    7df6:	f106 0008 	add.w	r0, r6, #8
    7dfa:	f020 fa68 	bl	282ce <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    7dfe:	8823      	ldrh	r3, [r4, #0]
    7e00:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
    7e04:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    7e08:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    7e0a:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    7e0e:	3b04      	subs	r3, #4
    7e10:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    7e12:	2302      	movs	r3, #2
    7e14:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
    7e16:	4630      	mov	r0, r6
    7e18:	f01c faff 	bl	2441a <bt_send>
	if (err) {
    7e1c:	4601      	mov	r1, r0
    7e1e:	2800      	cmp	r0, #0
    7e20:	d051      	beq.n	7ec6 <send_frag+0x11e>
    7e22:	4b2b      	ldr	r3, [pc, #172]	; (7ed0 <send_frag+0x128>)
    7e24:	4a2b      	ldr	r2, [pc, #172]	; (7ed4 <send_frag+0x12c>)
		BT_ERR("Unable to send to driver (err %d)", err);
    7e26:	482c      	ldr	r0, [pc, #176]	; (7ed8 <send_frag+0x130>)
    7e28:	1ad2      	subs	r2, r2, r3
    7e2a:	08d2      	lsrs	r2, r2, #3
    7e2c:	0192      	lsls	r2, r2, #6
    7e2e:	f042 0201 	orr.w	r2, r2, #1
    7e32:	f019 fe67 	bl	21b04 <log_1>
	__asm__ volatile(
    7e36:	f04f 0320 	mov.w	r3, #32
    7e3a:	f3ef 8011 	mrs	r0, BASEPRI
    7e3e:	f383 8812 	msr	BASEPRI_MAX, r3
    7e42:	f3bf 8f6f 	isb	sy
		if (tx) {
    7e46:	2d00      	cmp	r5, #0
    7e48:	d037      	beq.n	7eba <send_frag+0x112>
	return list->head;
    7e4a:	6963      	ldr	r3, [r4, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7e4c:	2200      	movs	r2, #0
    7e4e:	b153      	cbz	r3, 7e66 <send_frag+0xbe>
    7e50:	429d      	cmp	r5, r3
    7e52:	d12f      	bne.n	7eb4 <send_frag+0x10c>
	return node->next;
    7e54:	682b      	ldr	r3, [r5, #0]
	return list->tail;
    7e56:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
    7e58:	bb3a      	cbnz	r2, 7eaa <send_frag+0x102>
    7e5a:	42a9      	cmp	r1, r5
	list->head = node;
    7e5c:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    7e5e:	d100      	bne.n	7e62 <send_frag+0xba>
	list->tail = node;
    7e60:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    7e62:	2300      	movs	r3, #0
    7e64:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    7e66:	f380 8811 	msr	BASEPRI, r0
    7e6a:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    7e6e:	4817      	ldr	r0, [pc, #92]	; (7ecc <send_frag+0x124>)
    7e70:	f018 f8d0 	bl	20014 <z_impl_k_sem_give>
	if (tx) {
    7e74:	b115      	cbz	r5, 7e7c <send_frag+0xd4>
		tx_free(tx);
    7e76:	4628      	mov	r0, r5
    7e78:	f7ff ff68 	bl	7d4c <tx_free>
	if (always_consume) {
    7e7c:	b11f      	cbz	r7, 7e86 <send_frag+0xde>
		net_buf_unref(buf);
    7e7e:	4630      	mov	r0, r6
    7e80:	f015 ff70 	bl	1dd64 <net_buf_unref>
	return false;
    7e84:	2700      	movs	r7, #0
}
    7e86:	4638      	mov	r0, r7
    7e88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7e8c:	601d      	str	r5, [r3, #0]
	list->tail = node;
    7e8e:	61a5      	str	r5, [r4, #24]
}
    7e90:	e7ac      	b.n	7dec <send_frag+0x44>
		if (tail_tx) {
    7e92:	b133      	cbz	r3, 7ea2 <send_frag+0xfa>
			pending_no_cb = &tail_tx->pending_no_cb;
    7e94:	f103 080c 	add.w	r8, r3, #12
    7e98:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    7e9a:	3301      	adds	r3, #1
    7e9c:	f8c8 3000 	str.w	r3, [r8]
    7ea0:	e7a4      	b.n	7dec <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
    7ea2:	69e3      	ldr	r3, [r4, #28]
    7ea4:	f104 081c 	add.w	r8, r4, #28
    7ea8:	e7f7      	b.n	7e9a <send_frag+0xf2>
Z_GENLIST_REMOVE(slist, snode)
    7eaa:	42a9      	cmp	r1, r5
	parent->next = child;
    7eac:	6013      	str	r3, [r2, #0]
	list->tail = node;
    7eae:	bf08      	it	eq
    7eb0:	61a2      	streq	r2, [r4, #24]
}
    7eb2:	e7d6      	b.n	7e62 <send_frag+0xba>
	return node->next;
    7eb4:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7eb6:	681b      	ldr	r3, [r3, #0]
    7eb8:	e7c9      	b.n	7e4e <send_frag+0xa6>
			(*pending_no_cb)--;
    7eba:	f8d8 3000 	ldr.w	r3, [r8]
    7ebe:	3b01      	subs	r3, #1
    7ec0:	f8c8 3000 	str.w	r3, [r8]
    7ec4:	e7cf      	b.n	7e66 <send_frag+0xbe>
	return true;
    7ec6:	2701      	movs	r7, #1
    7ec8:	e7dd      	b.n	7e86 <send_frag+0xde>
    7eca:	bf00      	nop
    7ecc:	20000388 	.word	0x20000388
    7ed0:	00029870 	.word	0x00029870
    7ed4:	00029890 	.word	0x00029890
    7ed8:	0002b83c 	.word	0x0002b83c

00007edc <bt_conn_get_pkts>:
}
    7edc:	4800      	ldr	r0, [pc, #0]	; (7ee0 <bt_conn_get_pkts+0x4>)
    7ede:	4770      	bx	lr
    7ee0:	20000388 	.word	0x20000388

00007ee4 <bt_conn_new>:
{
    7ee4:	b538      	push	{r3, r4, r5, lr}
    7ee6:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
    7ee8:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    7eea:	2501      	movs	r5, #1
    7eec:	428b      	cmp	r3, r1
    7eee:	d102      	bne.n	7ef6 <bt_conn_new+0x12>
		return NULL;
    7ef0:	2400      	movs	r4, #0
}
    7ef2:	4620      	mov	r0, r4
    7ef4:	bd38      	pop	{r3, r4, r5, pc}
    7ef6:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
    7efa:	f3bf 8f5b 	dmb	ish
    7efe:	e852 0f00 	ldrex	r0, [r2]
    7f02:	2800      	cmp	r0, #0
    7f04:	d104      	bne.n	7f10 <bt_conn_new+0x2c>
    7f06:	e842 5c00 	strex	ip, r5, [r2]
    7f0a:	f1bc 0f00 	cmp.w	ip, #0
    7f0e:	d1f6      	bne.n	7efe <bt_conn_new+0x1a>
    7f10:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
    7f14:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    7f18:	d002      	beq.n	7f20 <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
    7f1a:	3301      	adds	r3, #1
    7f1c:	4604      	mov	r4, r0
    7f1e:	e7e5      	b.n	7eec <bt_conn_new+0x8>
	if (!conn) {
    7f20:	2c00      	cmp	r4, #0
    7f22:	d0e6      	beq.n	7ef2 <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
    7f24:	22b8      	movs	r2, #184	; 0xb8
    7f26:	2100      	movs	r1, #0
    7f28:	4620      	mov	r0, r4
    7f2a:	f01b ff48 	bl	23dbe <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
    7f2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
    7f32:	4904      	ldr	r1, [pc, #16]	; (7f44 <bt_conn_new+0x60>)
    7f34:	f020 ff35 	bl	28da2 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
    7f38:	4903      	ldr	r1, [pc, #12]	; (7f48 <bt_conn_new+0x64>)
    7f3a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    7f3e:	f020 ff0a 	bl	28d56 <k_work_init>
	return conn;
    7f42:	e7d6      	b.n	7ef2 <bt_conn_new+0xe>
    7f44:	000086b9 	.word	0x000086b9
    7f48:	0002474f 	.word	0x0002474f

00007f4c <bt_conn_recv>:
{
    7f4c:	b570      	push	{r4, r5, r6, lr}
    7f4e:	4616      	mov	r6, r2
    7f50:	4604      	mov	r4, r0
    7f52:	460d      	mov	r5, r1
	tx_notify(conn);
    7f54:	f01c fbd8 	bl	24708 <tx_notify>
	switch (flags) {
    7f58:	2e01      	cmp	r6, #1
    7f5a:	d02b      	beq.n	7fb4 <bt_conn_recv+0x68>
    7f5c:	2e02      	cmp	r6, #2
    7f5e:	d158      	bne.n	8012 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12>
		if (conn->rx) {
    7f60:	6923      	ldr	r3, [r4, #16]
    7f62:	b163      	cbz	r3, 7f7e <bt_conn_recv+0x32>
    7f64:	4b35      	ldr	r3, [pc, #212]	; (803c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3c>)
    7f66:	4936      	ldr	r1, [pc, #216]	; (8040 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x40>)
			BT_ERR("Unexpected first L2CAP frame");
    7f68:	4836      	ldr	r0, [pc, #216]	; (8044 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x44>)
    7f6a:	1ac9      	subs	r1, r1, r3
    7f6c:	08c9      	lsrs	r1, r1, #3
    7f6e:	0189      	lsls	r1, r1, #6
    7f70:	f041 0101 	orr.w	r1, r1, #1
    7f74:	f019 fdb9 	bl	21aea <log_0>
			bt_conn_reset_rx_state(conn);
    7f78:	4620      	mov	r0, r4
    7f7a:	f01c fbeb 	bl	24754 <bt_conn_reset_rx_state>
		conn->rx = buf;
    7f7e:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
    7f80:	6923      	ldr	r3, [r4, #16]
    7f82:	8999      	ldrh	r1, [r3, #12]
    7f84:	2901      	cmp	r1, #1
    7f86:	d958      	bls.n	803a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3a>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
    7f88:	689a      	ldr	r2, [r3, #8]
    7f8a:	8812      	ldrh	r2, [r2, #0]
    7f8c:	3204      	adds	r2, #4
    7f8e:	b292      	uxth	r2, r2
	if (conn->rx->len < acl_total_len) {
    7f90:	4291      	cmp	r1, r2
    7f92:	d352      	bcc.n	803a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3a>
	if (conn->rx->len > acl_total_len) {
    7f94:	d949      	bls.n	802a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2a>
    7f96:	4829      	ldr	r0, [pc, #164]	; (803c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3c>)
    7f98:	4b29      	ldr	r3, [pc, #164]	; (8040 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x40>)
    7f9a:	1a1b      	subs	r3, r3, r0
    7f9c:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL len mismatch (%u > %u)",
    7f9e:	019b      	lsls	r3, r3, #6
    7fa0:	4829      	ldr	r0, [pc, #164]	; (8048 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x48>)
    7fa2:	f043 0301 	orr.w	r3, r3, #1
    7fa6:	f019 fdc1 	bl	21b2c <log_2>
		bt_conn_reset_rx_state(conn);
    7faa:	4620      	mov	r0, r4
}
    7fac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
    7fb0:	f01c bbd0 	b.w	24754 <bt_conn_reset_rx_state>
		if (!conn->rx) {
    7fb4:	6920      	ldr	r0, [r4, #16]
    7fb6:	b968      	cbnz	r0, 7fd4 <bt_conn_recv+0x88>
    7fb8:	4921      	ldr	r1, [pc, #132]	; (8040 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x40>)
    7fba:	4b20      	ldr	r3, [pc, #128]	; (803c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3c>)
			BT_ERR("Unexpected L2CAP continuation");
    7fbc:	4823      	ldr	r0, [pc, #140]	; (804c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4c>)
    7fbe:	1ac9      	subs	r1, r1, r3
    7fc0:	08c9      	lsrs	r1, r1, #3
    7fc2:	0189      	lsls	r1, r1, #6
    7fc4:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Not enough buffer space for L2CAP data");
    7fc8:	f019 fd8f 	bl	21aea <log_0>
			bt_conn_reset_rx_state(conn);
    7fcc:	4620      	mov	r0, r4
    7fce:	f01c fbc1 	bl	24754 <bt_conn_reset_rx_state>
    7fd2:	e001      	b.n	7fd8 <bt_conn_recv+0x8c>
		if (!buf->len) {
    7fd4:	89ae      	ldrh	r6, [r5, #12]
    7fd6:	b926      	cbnz	r6, 7fe2 <bt_conn_recv+0x96>
			net_buf_unref(buf);
    7fd8:	4628      	mov	r0, r5
}
    7fda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
    7fde:	f015 bec1 	b.w	1dd64 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
    7fe2:	3008      	adds	r0, #8
    7fe4:	f020 f9e5 	bl	283b2 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    7fe8:	4286      	cmp	r6, r0
    7fea:	d908      	bls.n	7ffe <bt_conn_recv+0xb2>
    7fec:	4914      	ldr	r1, [pc, #80]	; (8040 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x40>)
    7fee:	4b13      	ldr	r3, [pc, #76]	; (803c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3c>)
			BT_ERR("Not enough buffer space for L2CAP data");
    7ff0:	4817      	ldr	r0, [pc, #92]	; (8050 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x50>)
    7ff2:	1ac9      	subs	r1, r1, r3
    7ff4:	08c9      	lsrs	r1, r1, #3
    7ff6:	0189      	lsls	r1, r1, #6
    7ff8:	f041 0101 	orr.w	r1, r1, #1
    7ffc:	e7e4      	b.n	7fc8 <bt_conn_recv+0x7c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    7ffe:	6920      	ldr	r0, [r4, #16]
    8000:	89aa      	ldrh	r2, [r5, #12]
    8002:	68a9      	ldr	r1, [r5, #8]
    8004:	3008      	adds	r0, #8
    8006:	f020 f925 	bl	28254 <net_buf_simple_add_mem>
		net_buf_unref(buf);
    800a:	4628      	mov	r0, r5
    800c:	f015 feaa 	bl	1dd64 <net_buf_unref>
		break;
    8010:	e7b6      	b.n	7f80 <bt_conn_recv+0x34>
    8012:	4a0a      	ldr	r2, [pc, #40]	; (803c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3c>)
    8014:	4b0a      	ldr	r3, [pc, #40]	; (8040 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x40>)
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    8016:	480f      	ldr	r0, [pc, #60]	; (8054 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x54>)
    8018:	1a9b      	subs	r3, r3, r2
    801a:	08db      	lsrs	r3, r3, #3
    801c:	019b      	lsls	r3, r3, #6
    801e:	f043 0201 	orr.w	r2, r3, #1
    8022:	4631      	mov	r1, r6
    8024:	f019 fd6e 	bl	21b04 <log_1>
		bt_conn_reset_rx_state(conn);
    8028:	e7d0      	b.n	7fcc <bt_conn_recv+0x80>
	conn->rx = NULL;
    802a:	2200      	movs	r2, #0
    802c:	6122      	str	r2, [r4, #16]
	bt_l2cap_recv(conn, buf);
    802e:	4620      	mov	r0, r4
    8030:	4619      	mov	r1, r3
}
    8032:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    8036:	f000 bda5 	b.w	8b84 <bt_l2cap_recv>
}
    803a:	bd70      	pop	{r4, r5, r6, pc}
    803c:	00029870 	.word	0x00029870
    8040:	00029890 	.word	0x00029890
    8044:	0002be36 	.word	0x0002be36
    8048:	0002beb6 	.word	0x0002beb6
    804c:	0002be53 	.word	0x0002be53
    8050:	0002be71 	.word	0x0002be71
    8054:	0002be98 	.word	0x0002be98

00008058 <bt_conn_send_cb>:
{
    8058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    805c:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
    805e:	7a83      	ldrb	r3, [r0, #10]
    8060:	2b07      	cmp	r3, #7
{
    8062:	4605      	mov	r5, r0
    8064:	460e      	mov	r6, r1
    8066:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
    8068:	d00c      	beq.n	8084 <bt_conn_send_cb+0x2c>
    806a:	4926      	ldr	r1, [pc, #152]	; (8104 <bt_conn_send_cb+0xac>)
    806c:	4b26      	ldr	r3, [pc, #152]	; (8108 <bt_conn_send_cb+0xb0>)
		BT_ERR("not connected!");
    806e:	4827      	ldr	r0, [pc, #156]	; (810c <bt_conn_send_cb+0xb4>)
    8070:	1ac9      	subs	r1, r1, r3
    8072:	08c9      	lsrs	r1, r1, #3
    8074:	0189      	lsls	r1, r1, #6
    8076:	f041 0101 	orr.w	r1, r1, #1
    807a:	f019 fd36 	bl	21aea <log_0>
			return -ENOTCONN;
    807e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    8082:	e01d      	b.n	80c0 <bt_conn_send_cb+0x68>
	if (cb) {
    8084:	2a00      	cmp	r2, #0
    8086:	d03a      	beq.n	80fe <bt_conn_send_cb+0xa6>
	return z_impl_z_current_get();
    8088:	f018 fcc2 	bl	20a10 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    808c:	4b20      	ldr	r3, [pc, #128]	; (8110 <bt_conn_send_cb+0xb8>)
    808e:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    8090:	4820      	ldr	r0, [pc, #128]	; (8114 <bt_conn_send_cb+0xbc>)
    8092:	bf07      	ittee	eq
    8094:	2200      	moveq	r2, #0
    8096:	2300      	moveq	r3, #0
    8098:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    809c:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    80a0:	f017 ff84 	bl	1ffac <z_impl_k_queue_get>
    80a4:	4604      	mov	r4, r0
		if (!tx) {
    80a6:	b968      	cbnz	r0, 80c4 <bt_conn_send_cb+0x6c>
    80a8:	4b17      	ldr	r3, [pc, #92]	; (8108 <bt_conn_send_cb+0xb0>)
    80aa:	4916      	ldr	r1, [pc, #88]	; (8104 <bt_conn_send_cb+0xac>)
			BT_ERR("Unable to allocate TX context");
    80ac:	481a      	ldr	r0, [pc, #104]	; (8118 <bt_conn_send_cb+0xc0>)
    80ae:	1ac9      	subs	r1, r1, r3
    80b0:	08c9      	lsrs	r1, r1, #3
    80b2:	0189      	lsls	r1, r1, #6
    80b4:	f041 0101 	orr.w	r1, r1, #1
    80b8:	f019 fd17 	bl	21aea <log_0>
			return -ENOBUFS;
    80bc:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    80c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    80c4:	7aab      	ldrb	r3, [r5, #10]
    80c6:	2b07      	cmp	r3, #7
    80c8:	d00d      	beq.n	80e6 <bt_conn_send_cb+0x8e>
    80ca:	4b0f      	ldr	r3, [pc, #60]	; (8108 <bt_conn_send_cb+0xb0>)
    80cc:	490d      	ldr	r1, [pc, #52]	; (8104 <bt_conn_send_cb+0xac>)
			BT_WARN("Disconnected while allocating context");
    80ce:	4813      	ldr	r0, [pc, #76]	; (811c <bt_conn_send_cb+0xc4>)
    80d0:	1ac9      	subs	r1, r1, r3
    80d2:	08c9      	lsrs	r1, r1, #3
    80d4:	0189      	lsls	r1, r1, #6
    80d6:	f041 0102 	orr.w	r1, r1, #2
    80da:	f019 fd06 	bl	21aea <log_0>
			tx_free(tx);
    80de:	4620      	mov	r0, r4
    80e0:	f7ff fe34 	bl	7d4c <tx_free>
    80e4:	e7cb      	b.n	807e <bt_conn_send_cb+0x26>
		tx->pending_no_cb = 0U;
    80e6:	2300      	movs	r3, #0
		tx->user_data = user_data;
    80e8:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    80ec:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    80ee:	6170      	str	r0, [r6, #20]
	net_buf_put(&conn->tx_queue, buf);
    80f0:	f105 0038 	add.w	r0, r5, #56	; 0x38
    80f4:	4631      	mov	r1, r6
    80f6:	f020 f868 	bl	281ca <net_buf_put>
	return 0;
    80fa:	2000      	movs	r0, #0
    80fc:	e7e0      	b.n	80c0 <bt_conn_send_cb+0x68>
		tx_data(buf)->tx = NULL;
    80fe:	614a      	str	r2, [r1, #20]
    8100:	e7f6      	b.n	80f0 <bt_conn_send_cb+0x98>
    8102:	bf00      	nop
    8104:	00029890 	.word	0x00029890
    8108:	00029870 	.word	0x00029870
    810c:	0002bed1 	.word	0x0002bed1
    8110:	20001ee8 	.word	0x20001ee8
    8114:	20001158 	.word	0x20001158
    8118:	0002bee0 	.word	0x0002bee0
    811c:	0002befe 	.word	0x0002befe

00008120 <bt_conn_prepare_events>:
	conn_change.signaled = 0U;
    8120:	4b1b      	ldr	r3, [pc, #108]	; (8190 <bt_conn_prepare_events+0x70>)
{
    8122:	b510      	push	{r4, lr}
	conn_change.signaled = 0U;
    8124:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    8126:	2101      	movs	r1, #1
	conn_change.signaled = 0U;
    8128:	609a      	str	r2, [r3, #8]
{
    812a:	4604      	mov	r4, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    812c:	f021 f98e 	bl	2944c <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8130:	f3bf 8f5b 	dmb	ish
    8134:	4b17      	ldr	r3, [pc, #92]	; (8194 <bt_conn_prepare_events+0x74>)
    8136:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
    813a:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
    813e:	f104 0014 	add.w	r0, r4, #20
	if (!atomic_get(&conn->ref)) {
    8142:	b90a      	cbnz	r2, 8148 <bt_conn_prepare_events+0x28>
		conn_cleanup(conn);
    8144:	2001      	movs	r0, #1
}
    8146:	bd10      	pop	{r4, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
    8148:	7a9a      	ldrb	r2, [r3, #10]
    814a:	b99a      	cbnz	r2, 8174 <bt_conn_prepare_events+0x54>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    814c:	f3bf 8f5b 	dmb	ish
    8150:	1d1a      	adds	r2, r3, #4
    8152:	e852 1f00 	ldrex	r1, [r2]
    8156:	f021 0c40 	bic.w	ip, r1, #64	; 0x40
    815a:	e842 ce00 	strex	lr, ip, [r2]
    815e:	f1be 0f00 	cmp.w	lr, #0
    8162:	d1f6      	bne.n	8152 <bt_conn_prepare_events+0x32>
    8164:	f3bf 8f5b 	dmb	ish
    8168:	064a      	lsls	r2, r1, #25
    816a:	d503      	bpl.n	8174 <bt_conn_prepare_events+0x54>
		conn_cleanup(conn);
    816c:	4618      	mov	r0, r3
    816e:	f01c fafa 	bl	24766 <conn_cleanup>
    8172:	e7e7      	b.n	8144 <bt_conn_prepare_events+0x24>
	if (conn->state != BT_CONN_CONNECTED) {
    8174:	7a9b      	ldrb	r3, [r3, #10]
    8176:	2b07      	cmp	r3, #7
    8178:	d1e4      	bne.n	8144 <bt_conn_prepare_events+0x24>
	k_poll_event_init(&events[0],
    817a:	4b07      	ldr	r3, [pc, #28]	; (8198 <bt_conn_prepare_events+0x78>)
    817c:	2200      	movs	r2, #0
    817e:	2104      	movs	r1, #4
    8180:	f021 f964 	bl	2944c <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    8184:	2301      	movs	r3, #1
    8186:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
    818a:	2002      	movs	r0, #2
	return ev_count;
    818c:	e7db      	b.n	8146 <bt_conn_prepare_events+0x26>
    818e:	bf00      	nop
    8190:	200007b0 	.word	0x200007b0
    8194:	20001540 	.word	0x20001540
    8198:	20001578 	.word	0x20001578

0000819c <bt_conn_lookup_handle>:
{
    819c:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    819e:	2101      	movs	r1, #1
    81a0:	4801      	ldr	r0, [pc, #4]	; (81a8 <bt_conn_lookup_handle+0xc>)
    81a2:	f01c bb33 	b.w	2480c <conn_lookup_handle>
    81a6:	bf00      	nop
    81a8:	20001540 	.word	0x20001540

000081ac <bt_conn_set_state>:
{
    81ac:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
    81ae:	7a86      	ldrb	r6, [r0, #10]
    81b0:	428e      	cmp	r6, r1
{
    81b2:	4604      	mov	r4, r0
    81b4:	460d      	mov	r5, r1
	if (conn->state == state) {
    81b6:	d112      	bne.n	81de <bt_conn_set_state+0x32>
    81b8:	4b66      	ldr	r3, [pc, #408]	; (8354 <bt_conn_set_state+0x1a8>)
    81ba:	4a67      	ldr	r2, [pc, #412]	; (8358 <bt_conn_set_state+0x1ac>)
		BT_WARN("no transition %s", state2str(state));
    81bc:	4867      	ldr	r0, [pc, #412]	; (835c <bt_conn_set_state+0x1b0>)
    81be:	2e08      	cmp	r6, #8
    81c0:	eba2 0203 	sub.w	r2, r2, r3
    81c4:	bf96      	itet	ls
    81c6:	4b66      	ldrls	r3, [pc, #408]	; (8360 <bt_conn_set_state+0x1b4>)
    81c8:	4966      	ldrhi	r1, [pc, #408]	; (8364 <bt_conn_set_state+0x1b8>)
    81ca:	f853 1026 	ldrls.w	r1, [r3, r6, lsl #2]
    81ce:	08d2      	lsrs	r2, r2, #3
    81d0:	0192      	lsls	r2, r2, #6
    81d2:	f042 0202 	orr.w	r2, r2, #2
}
    81d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
    81da:	f019 bc93 	b.w	21b04 <log_1>
	conn->state = state;
    81de:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
    81e0:	b926      	cbnz	r6, 81ec <bt_conn_set_state+0x40>
		if (conn->type != BT_CONN_TYPE_ISO) {
    81e2:	7883      	ldrb	r3, [r0, #2]
    81e4:	2b08      	cmp	r3, #8
    81e6:	d001      	beq.n	81ec <bt_conn_set_state+0x40>
			bt_conn_ref(conn);
    81e8:	f01c fadb 	bl	247a2 <bt_conn_ref>
	switch (conn->state) {
    81ec:	7aa3      	ldrb	r3, [r4, #10]
    81ee:	2b08      	cmp	r3, #8
    81f0:	f200 80a5 	bhi.w	833e <bt_conn_set_state+0x192>
    81f4:	e8df f003 	tbb	[pc, r3]
    81f8:	adad0537 	.word	0xadad0537
    81fc:	1cadadad 	.word	0x1cadadad
    8200:	ad          	.byte	0xad
    8201:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
    8202:	4d59      	ldr	r5, [pc, #356]	; (8368 <bt_conn_set_state+0x1bc>)
		tx->pending_no_cb = 0U;
    8204:	2600      	movs	r6, #0
	__asm__ volatile(
    8206:	f04f 0320 	mov.w	r3, #32
    820a:	f3ef 8211 	mrs	r2, BASEPRI
    820e:	f383 8812 	msr	BASEPRI_MAX, r3
    8212:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    8216:	69e3      	ldr	r3, [r4, #28]
    8218:	2b00      	cmp	r3, #0
    821a:	d071      	beq.n	8300 <bt_conn_set_state+0x154>
			conn->pending_no_cb--;
    821c:	3b01      	subs	r3, #1
    821e:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    8220:	f382 8811 	msr	BASEPRI, r2
    8224:	f3bf 8f6f 	isb	sy
    8228:	4628      	mov	r0, r5
    822a:	f017 fef3 	bl	20014 <z_impl_k_sem_give>
}
    822e:	e7ea      	b.n	8206 <bt_conn_set_state+0x5a>
		if (conn->type == BT_CONN_TYPE_SCO) {
    8230:	78a3      	ldrb	r3, [r4, #2]
    8232:	2b04      	cmp	r3, #4
    8234:	f000 808d 	beq.w	8352 <bt_conn_set_state+0x1a6>
	z_impl_k_queue_init(queue);
    8238:	f104 0038 	add.w	r0, r4, #56	; 0x38
    823c:	f020 fc8e 	bl	28b5c <z_impl_k_queue_init>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    8240:	484a      	ldr	r0, [pc, #296]	; (836c <bt_conn_set_state+0x1c0>)
    8242:	2100      	movs	r1, #0
    8244:	f018 febe 	bl	20fc4 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    8248:	2300      	movs	r3, #0
	list->tail = NULL;
    824a:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    824e:	78e3      	ldrb	r3, [r4, #3]
    8250:	2b01      	cmp	r3, #1
    8252:	d17e      	bne.n	8352 <bt_conn_set_state+0x1a6>
			k_work_schedule(&conn->deferred_work,
    8254:	f104 0058 	add.w	r0, r4, #88	; 0x58
    8258:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
    825c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
    8260:	2300      	movs	r3, #0
    8262:	f018 b8ab 	b.w	203bc <k_work_schedule>
		if (conn->type == BT_CONN_TYPE_SCO) {
    8266:	78a3      	ldrb	r3, [r4, #2]
    8268:	2b04      	cmp	r3, #4
    826a:	d104      	bne.n	8276 <bt_conn_set_state+0xca>
			bt_conn_unref(conn);
    826c:	4620      	mov	r0, r4
}
    826e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
    8272:	f01c bab1 	b.w	247d8 <bt_conn_unref>
		switch (old_state) {
    8276:	2e08      	cmp	r6, #8
    8278:	d86b      	bhi.n	8352 <bt_conn_set_state+0x1a6>
    827a:	a301      	add	r3, pc, #4	; (adr r3, 8280 <bt_conn_set_state+0xd4>)
    827c:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
    8280:	000082ed 	.word	0x000082ed
    8284:	000082a5 	.word	0x000082a5
    8288:	000082df 	.word	0x000082df
    828c:	0000826d 	.word	0x0000826d
    8290:	0000826d 	.word	0x0000826d
    8294:	000082df 	.word	0x000082df
    8298:	000082df 	.word	0x000082df
    829c:	000082ed 	.word	0x000082ed
    82a0:	000082ed 	.word	0x000082ed
			tx_notify(conn);
    82a4:	4620      	mov	r0, r4
    82a6:	f01c fa2f 	bl	24708 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    82aa:	78a3      	ldrb	r3, [r4, #2]
    82ac:	2b01      	cmp	r3, #1
    82ae:	d103      	bne.n	82b8 <bt_conn_set_state+0x10c>
				k_work_cancel_delayable(&conn->deferred_work);
    82b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
    82b4:	f020 fd95 	bl	28de2 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    82b8:	f3bf 8f5b 	dmb	ish
    82bc:	3404      	adds	r4, #4
    82be:	e854 3f00 	ldrex	r3, [r4]
    82c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    82c6:	e844 3200 	strex	r2, r3, [r4]
    82ca:	2a00      	cmp	r2, #0
    82cc:	d1f7      	bne.n	82be <bt_conn_set_state+0x112>
    82ce:	f3bf 8f5b 	dmb	ish
    82d2:	4826      	ldr	r0, [pc, #152]	; (836c <bt_conn_set_state+0x1c0>)
}
    82d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    82d8:	2100      	movs	r1, #0
    82da:	f018 be73 	b.w	20fc4 <z_impl_k_poll_signal_raise>
			if (conn->err) {
    82de:	7a63      	ldrb	r3, [r4, #9]
    82e0:	2b00      	cmp	r3, #0
    82e2:	d0c3      	beq.n	826c <bt_conn_set_state+0xc0>
				notify_connected(conn);
    82e4:	4620      	mov	r0, r4
    82e6:	f7ff fd3b 	bl	7d60 <notify_connected>
    82ea:	e7bf      	b.n	826c <bt_conn_set_state+0xc0>
    82ec:	4a1a      	ldr	r2, [pc, #104]	; (8358 <bt_conn_set_state+0x1ac>)
    82ee:	4b19      	ldr	r3, [pc, #100]	; (8354 <bt_conn_set_state+0x1a8>)
			BT_WARN("Invalid (%u) old state", state);
    82f0:	481f      	ldr	r0, [pc, #124]	; (8370 <bt_conn_set_state+0x1c4>)
    82f2:	1ad2      	subs	r2, r2, r3
    82f4:	08d2      	lsrs	r2, r2, #3
    82f6:	0192      	lsls	r2, r2, #6
    82f8:	f042 0202 	orr.w	r2, r2, #2
    82fc:	4629      	mov	r1, r5
    82fe:	e76a      	b.n	81d6 <bt_conn_set_state+0x2a>
	return list->head;
    8300:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    8302:	b128      	cbz	r0, 8310 <bt_conn_set_state+0x164>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8304:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    8306:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    8308:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    830a:	4288      	cmp	r0, r1
	list->tail = node;
    830c:	bf08      	it	eq
    830e:	61a3      	streq	r3, [r4, #24]
    8310:	f382 8811 	msr	BASEPRI, r2
    8314:	f3bf 8f6f 	isb	sy
		if (!node) {
    8318:	b1d8      	cbz	r0, 8352 <bt_conn_set_state+0x1a6>
	__asm__ volatile(
    831a:	f04f 0220 	mov.w	r2, #32
    831e:	f3ef 8311 	mrs	r3, BASEPRI
    8322:	f382 8812 	msr	BASEPRI_MAX, r2
    8326:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    832a:	68c2      	ldr	r2, [r0, #12]
    832c:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    832e:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    8330:	f383 8811 	msr	BASEPRI, r3
    8334:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    8338:	f7ff fd08 	bl	7d4c <tx_free>
    833c:	e774      	b.n	8228 <bt_conn_set_state+0x7c>
    833e:	4a06      	ldr	r2, [pc, #24]	; (8358 <bt_conn_set_state+0x1ac>)
    8340:	4b04      	ldr	r3, [pc, #16]	; (8354 <bt_conn_set_state+0x1a8>)
		BT_WARN("no valid (%u) state was set", state);
    8342:	480c      	ldr	r0, [pc, #48]	; (8374 <bt_conn_set_state+0x1c8>)
    8344:	1ad2      	subs	r2, r2, r3
    8346:	08d2      	lsrs	r2, r2, #3
    8348:	0192      	lsls	r2, r2, #6
    834a:	f042 0202 	orr.w	r2, r2, #2
    834e:	4629      	mov	r1, r5
    8350:	e741      	b.n	81d6 <bt_conn_set_state+0x2a>
}
    8352:	bd70      	pop	{r4, r5, r6, pc}
    8354:	00029870 	.word	0x00029870
    8358:	00029890 	.word	0x00029890
    835c:	0002bf2e 	.word	0x0002bf2e
    8360:	00029f88 	.word	0x00029f88
    8364:	0002bf24 	.word	0x0002bf24
    8368:	20000388 	.word	0x20000388
    836c:	200007b0 	.word	0x200007b0
    8370:	0002bf3f 	.word	0x0002bf3f
    8374:	0002bf56 	.word	0x0002bf56

00008378 <bt_conn_index>:
		index = conn - acl_conns;
    8378:	4b03      	ldr	r3, [pc, #12]	; (8388 <bt_conn_index+0x10>)
    837a:	1ac0      	subs	r0, r0, r3
    837c:	4b03      	ldr	r3, [pc, #12]	; (838c <bt_conn_index+0x14>)
    837e:	1180      	asrs	r0, r0, #6
    8380:	4358      	muls	r0, r3
}
    8382:	b2c0      	uxtb	r0, r0
    8384:	4770      	bx	lr
    8386:	bf00      	nop
    8388:	20001540 	.word	0x20001540
    838c:	aaaaaaab 	.word	0xaaaaaaab

00008390 <bt_conn_create_pdu_timeout>:
{
    8390:	b538      	push	{r3, r4, r5, lr}
    8392:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
    8394:	490c      	ldr	r1, [pc, #48]	; (83c8 <bt_conn_create_pdu_timeout+0x38>)
    8396:	2800      	cmp	r0, #0
    8398:	bf08      	it	eq
    839a:	4608      	moveq	r0, r1
    839c:	f01f fe96 	bl	280cc <net_buf_alloc_fixed>
	if (!buf) {
    83a0:	4604      	mov	r4, r0
    83a2:	b958      	cbnz	r0, 83bc <bt_conn_create_pdu_timeout+0x2c>
    83a4:	4909      	ldr	r1, [pc, #36]	; (83cc <bt_conn_create_pdu_timeout+0x3c>)
    83a6:	4b0a      	ldr	r3, [pc, #40]	; (83d0 <bt_conn_create_pdu_timeout+0x40>)
		BT_WARN("Unable to allocate buffer within timeout");
    83a8:	480a      	ldr	r0, [pc, #40]	; (83d4 <bt_conn_create_pdu_timeout+0x44>)
    83aa:	1ac9      	subs	r1, r1, r3
    83ac:	08c9      	lsrs	r1, r1, #3
    83ae:	0189      	lsls	r1, r1, #6
    83b0:	f041 0102 	orr.w	r1, r1, #2
    83b4:	f019 fb99 	bl	21aea <log_0>
}
    83b8:	4620      	mov	r0, r4
    83ba:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_reserve(&buf->b, reserve);
    83bc:	1d29      	adds	r1, r5, #4
    83be:	3008      	adds	r0, #8
    83c0:	f01f fea9 	bl	28116 <net_buf_simple_reserve>
	return buf;
    83c4:	e7f8      	b.n	83b8 <bt_conn_create_pdu_timeout+0x28>
    83c6:	bf00      	nop
    83c8:	20001188 	.word	0x20001188
    83cc:	00029890 	.word	0x00029890
    83d0:	00029870 	.word	0x00029870
    83d4:	0002bf72 	.word	0x0002bf72

000083d8 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
    83d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    83da:	f3bf 8f5b 	dmb	ish
    83de:	6842      	ldr	r2, [r0, #4]
    83e0:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    83e4:	0592      	lsls	r2, r2, #22
{
    83e6:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    83e8:	f100 0304 	add.w	r3, r0, #4
    83ec:	d519      	bpl.n	8422 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
    83ee:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    83f2:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
    83f6:	4291      	cmp	r1, r2
    83f8:	d813      	bhi.n	8422 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
    83fa:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
    83fe:	4291      	cmp	r1, r2
    8400:	d30f      	bcc.n	8422 <notify_le_param_updated+0x4a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
    8402:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
    8406:	4291      	cmp	r1, r2
    8408:	d10b      	bne.n	8422 <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    840a:	f3bf 8f5b 	dmb	ish
    840e:	e853 2f00 	ldrex	r2, [r3]
    8412:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    8416:	e843 2100 	strex	r1, r2, [r3]
    841a:	2900      	cmp	r1, #0
    841c:	d1f7      	bne.n	840e <notify_le_param_updated+0x36>
    841e:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    8422:	4b10      	ldr	r3, [pc, #64]	; (8464 <notify_le_param_updated+0x8c>)
    8424:	681d      	ldr	r5, [r3, #0]
    8426:	b925      	cbnz	r5, 8432 <notify_le_param_updated+0x5a>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    8428:	4d0f      	ldr	r5, [pc, #60]	; (8468 <notify_le_param_updated+0x90>)
    842a:	4f10      	ldr	r7, [pc, #64]	; (846c <notify_le_param_updated+0x94>)
    842c:	42bd      	cmp	r5, r7
    842e:	d30c      	bcc.n	844a <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
    8430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
    8432:	68ee      	ldr	r6, [r5, #12]
    8434:	b13e      	cbz	r6, 8446 <notify_le_param_updated+0x6e>
			cb->le_param_updated(conn, conn->le.interval,
    8436:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    843a:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    843e:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    8442:	4620      	mov	r0, r4
    8444:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    8446:	692d      	ldr	r5, [r5, #16]
    8448:	e7ed      	b.n	8426 <notify_le_param_updated+0x4e>
		if (cb->le_param_updated) {
    844a:	68ee      	ldr	r6, [r5, #12]
    844c:	b13e      	cbz	r6, 845e <notify_le_param_updated+0x86>
			cb->le_param_updated(conn, conn->le.interval,
    844e:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    8452:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    8456:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    845a:	4620      	mov	r0, r4
    845c:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    845e:	3514      	adds	r5, #20
    8460:	e7e4      	b.n	842c <notify_le_param_updated+0x54>
    8462:	bf00      	nop
    8464:	20002114 	.word	0x20002114
    8468:	000296fc 	.word	0x000296fc
    846c:	000296fc 	.word	0x000296fc

00008470 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
    8470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8474:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
    8476:	4608      	mov	r0, r1
{
    8478:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
    847a:	f01b ffad 	bl	243d8 <bt_le_conn_params_valid>
    847e:	4605      	mov	r5, r0
    8480:	b918      	cbnz	r0, 848a <le_param_req+0x1a>
		return false;
    8482:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
    8484:	4628      	mov	r0, r5
    8486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    848a:	4b13      	ldr	r3, [pc, #76]	; (84d8 <le_param_req+0x68>)
    848c:	681e      	ldr	r6, [r3, #0]
    848e:	b946      	cbnz	r6, 84a2 <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    8490:	4e12      	ldr	r6, [pc, #72]	; (84dc <le_param_req+0x6c>)
    8492:	f8df 804c 	ldr.w	r8, [pc, #76]	; 84e0 <le_param_req+0x70>
    8496:	4546      	cmp	r6, r8
    8498:	d2f4      	bcs.n	8484 <le_param_req+0x14>
		if (!cb->le_param_req) {
    849a:	68b3      	ldr	r3, [r6, #8]
    849c:	b983      	cbnz	r3, 84c0 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    849e:	3614      	adds	r6, #20
    84a0:	e7f9      	b.n	8496 <le_param_req+0x26>
		if (!cb->le_param_req) {
    84a2:	68b3      	ldr	r3, [r6, #8]
    84a4:	b90b      	cbnz	r3, 84aa <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
    84a6:	6936      	ldr	r6, [r6, #16]
    84a8:	e7f1      	b.n	848e <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
    84aa:	4621      	mov	r1, r4
    84ac:	4638      	mov	r0, r7
    84ae:	4798      	blx	r3
    84b0:	2800      	cmp	r0, #0
    84b2:	d0e6      	beq.n	8482 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
    84b4:	4620      	mov	r0, r4
    84b6:	f01b ff8f 	bl	243d8 <bt_le_conn_params_valid>
    84ba:	2800      	cmp	r0, #0
    84bc:	d1f3      	bne.n	84a6 <le_param_req+0x36>
    84be:	e7e0      	b.n	8482 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
    84c0:	4621      	mov	r1, r4
    84c2:	4638      	mov	r0, r7
    84c4:	4798      	blx	r3
    84c6:	2800      	cmp	r0, #0
    84c8:	d0db      	beq.n	8482 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
    84ca:	4620      	mov	r0, r4
    84cc:	f01b ff84 	bl	243d8 <bt_le_conn_params_valid>
    84d0:	2800      	cmp	r0, #0
    84d2:	d1e4      	bne.n	849e <le_param_req+0x2e>
    84d4:	e7d5      	b.n	8482 <le_param_req+0x12>
    84d6:	bf00      	nop
    84d8:	20002114 	.word	0x20002114
    84dc:	000296fc 	.word	0x000296fc
    84e0:	000296fc 	.word	0x000296fc

000084e4 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
    84e4:	4b02      	ldr	r3, [pc, #8]	; (84f0 <bt_conn_cb_register+0xc>)
    84e6:	681a      	ldr	r2, [r3, #0]
    84e8:	6102      	str	r2, [r0, #16]
	callback_list = cb;
    84ea:	6018      	str	r0, [r3, #0]
}
    84ec:	4770      	bx	lr
    84ee:	bf00      	nop
    84f0:	20002114 	.word	0x20002114

000084f4 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    84f4:	b570      	push	{r4, r5, r6, lr}
    84f6:	4606      	mov	r6, r0
    84f8:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
    84fa:	4809      	ldr	r0, [pc, #36]	; (8520 <bt_conn_add_le+0x2c>)
    84fc:	2101      	movs	r1, #1
    84fe:	f7ff fcf1 	bl	7ee4 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
    8502:	4604      	mov	r4, r0
    8504:	b150      	cbz	r0, 851c <bt_conn_add_le+0x28>
		return NULL;
	}

	conn->id = id;
    8506:	7206      	strb	r6, [r0, #8]
    8508:	2207      	movs	r2, #7
    850a:	4629      	mov	r1, r5
    850c:	3088      	adds	r0, #136	; 0x88
    850e:	f01b fc4b 	bl	23da8 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    8512:	2301      	movs	r3, #1
    8514:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    8516:	4b03      	ldr	r3, [pc, #12]	; (8524 <bt_conn_add_le+0x30>)
    8518:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    851c:	4620      	mov	r0, r4
    851e:	bd70      	pop	{r4, r5, r6, pc}
    8520:	20001540 	.word	0x20001540
    8524:	00280018 	.word	0x00280018

00008528 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
    8528:	b570      	push	{r4, r5, r6, lr}
    852a:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    852c:	480c      	ldr	r0, [pc, #48]	; (8560 <bt_conn_lookup_addr_le+0x38>)
{
    852e:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    8530:	f01c f937 	bl	247a2 <bt_conn_ref>

		if (!conn) {
    8534:	4604      	mov	r4, r0
    8536:	b128      	cbz	r0, 8544 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    8538:	7883      	ldrb	r3, [r0, #2]
    853a:	2b01      	cmp	r3, #1
    853c:	d004      	beq.n	8548 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
    853e:	f01c f94b 	bl	247d8 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    8542:	2400      	movs	r4, #0
}
    8544:	4620      	mov	r0, r4
    8546:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
    8548:	4629      	mov	r1, r5
    854a:	4632      	mov	r2, r6
    854c:	f01c f9af 	bl	248ae <bt_conn_is_peer_addr_le>
    8550:	4605      	mov	r5, r0
    8552:	2800      	cmp	r0, #0
    8554:	d1f6      	bne.n	8544 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
    8556:	4620      	mov	r0, r4
    8558:	f01c f93e 	bl	247d8 <bt_conn_unref>
	return NULL;
    855c:	462c      	mov	r4, r5
			continue;
    855e:	e7f1      	b.n	8544 <bt_conn_lookup_addr_le+0x1c>
    8560:	20001540 	.word	0x20001540

00008564 <bt_conn_exists_le>:
{
    8564:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
    8566:	f7ff ffdf 	bl	8528 <bt_conn_lookup_addr_le>
	if (conn) {
    856a:	4604      	mov	r4, r0
    856c:	b1a0      	cbz	r0, 8598 <bt_conn_exists_le+0x34>
    856e:	4b0b      	ldr	r3, [pc, #44]	; (859c <bt_conn_exists_le+0x38>)
    8570:	4a0b      	ldr	r2, [pc, #44]	; (85a0 <bt_conn_exists_le+0x3c>)
    8572:	1ad2      	subs	r2, r2, r3
		BT_WARN("Found valid connection in %s state",
    8574:	7a83      	ldrb	r3, [r0, #10]
    8576:	480b      	ldr	r0, [pc, #44]	; (85a4 <bt_conn_exists_le+0x40>)
    8578:	2b08      	cmp	r3, #8
    857a:	bf96      	itet	ls
    857c:	490a      	ldrls	r1, [pc, #40]	; (85a8 <bt_conn_exists_le+0x44>)
    857e:	490b      	ldrhi	r1, [pc, #44]	; (85ac <bt_conn_exists_le+0x48>)
    8580:	f851 1023 	ldrls.w	r1, [r1, r3, lsl #2]
    8584:	08d2      	lsrs	r2, r2, #3
    8586:	0192      	lsls	r2, r2, #6
    8588:	f042 0202 	orr.w	r2, r2, #2
    858c:	f019 faba 	bl	21b04 <log_1>
		bt_conn_unref(conn);
    8590:	4620      	mov	r0, r4
    8592:	f01c f921 	bl	247d8 <bt_conn_unref>
		return true;
    8596:	2001      	movs	r0, #1
}
    8598:	bd10      	pop	{r4, pc}
    859a:	bf00      	nop
    859c:	00029870 	.word	0x00029870
    85a0:	00029890 	.word	0x00029890
    85a4:	0002bf9b 	.word	0x0002bf9b
    85a8:	00029f88 	.word	0x00029f88
    85ac:	0002bf24 	.word	0x0002bf24

000085b0 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    85b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    85b2:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    85b4:	480e      	ldr	r0, [pc, #56]	; (85f0 <bt_conn_lookup_state_le+0x40>)
{
    85b6:	460e      	mov	r6, r1
    85b8:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    85ba:	f01c f8f2 	bl	247a2 <bt_conn_ref>

		if (!conn) {
    85be:	4604      	mov	r4, r0
    85c0:	b1a0      	cbz	r0, 85ec <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    85c2:	7883      	ldrb	r3, [r0, #2]
    85c4:	2b01      	cmp	r3, #1
    85c6:	d003      	beq.n	85d0 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
    85c8:	f01c f906 	bl	247d8 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    85cc:	2400      	movs	r4, #0
			continue;
    85ce:	e00d      	b.n	85ec <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
    85d0:	b136      	cbz	r6, 85e0 <bt_conn_lookup_state_le+0x30>
    85d2:	4632      	mov	r2, r6
    85d4:	4629      	mov	r1, r5
    85d6:	f01c f96a 	bl	248ae <bt_conn_is_peer_addr_le>
    85da:	b908      	cbnz	r0, 85e0 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
    85dc:	4620      	mov	r0, r4
    85de:	e7f3      	b.n	85c8 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
    85e0:	7aa3      	ldrb	r3, [r4, #10]
    85e2:	42bb      	cmp	r3, r7
    85e4:	d1fa      	bne.n	85dc <bt_conn_lookup_state_le+0x2c>
    85e6:	7a23      	ldrb	r3, [r4, #8]
    85e8:	42ab      	cmp	r3, r5
    85ea:	d1f7      	bne.n	85dc <bt_conn_lookup_state_le+0x2c>
}
    85ec:	4620      	mov	r0, r4
    85ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    85f0:	20001540 	.word	0x20001540

000085f4 <bt_conn_get_info>:
{
	return &conn->le.dst;
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
    85f4:	b510      	push	{r4, lr}
	info->type = conn->type;
    85f6:	7882      	ldrb	r2, [r0, #2]
    85f8:	700a      	strb	r2, [r1, #0]
	info->role = conn->role;
    85fa:	78c4      	ldrb	r4, [r0, #3]
    85fc:	704c      	strb	r4, [r1, #1]
	info->id = conn->id;
    85fe:	7a03      	ldrb	r3, [r0, #8]
    8600:	708b      	strb	r3, [r1, #2]

	switch (conn->type) {
    8602:	2a01      	cmp	r2, #1
    8604:	d11c      	bne.n	8640 <bt_conn_get_info+0x4c>
	case BT_CONN_TYPE_LE:
		info->le.dst = &conn->le.dst;
    8606:	f100 0288 	add.w	r2, r0, #136	; 0x88
    860a:	608a      	str	r2, [r1, #8]
		info->le.src = &bt_dev.id_addr[conn->id];
    860c:	4a0e      	ldr	r2, [pc, #56]	; (8648 <bt_conn_get_info+0x54>)
    860e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    8612:	4413      	add	r3, r2
    8614:	604b      	str	r3, [r1, #4]
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
			info->le.local = &conn->le.init_addr;
			info->le.remote = &conn->le.resp_addr;
    8616:	f100 0296 	add.w	r2, r0, #150	; 0x96
			info->le.local = &conn->le.init_addr;
    861a:	f100 038f 	add.w	r3, r0, #143	; 0x8f
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
    861e:	b964      	cbnz	r4, 863a <bt_conn_get_info+0x46>
			info->le.remote = &conn->le.resp_addr;
    8620:	e9c1 3203 	strd	r3, r2, [r1, #12]
		} else {
			info->le.local = &conn->le.resp_addr;
			info->le.remote = &conn->le.init_addr;
		}
		info->le.interval = conn->le.interval;
    8624:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
    8628:	828b      	strh	r3, [r1, #20]
		info->le.latency = conn->le.latency;
    862a:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
    862e:	82cb      	strh	r3, [r1, #22]
		info->le.timeout = conn->le.timeout;
    8630:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
    8634:	830b      	strh	r3, [r1, #24]
		info->le.phy = &conn->le.phy;
#endif
#if defined(CONFIG_BT_USER_DATA_LEN_UPDATE)
		info->le.data_len = &conn->le.data_len;
#endif
		return 0;
    8636:	2000      	movs	r0, #0
		return 0;
#endif
	}

	return -EINVAL;
}
    8638:	bd10      	pop	{r4, pc}
			info->le.remote = &conn->le.init_addr;
    863a:	e9c1 2303 	strd	r2, r3, [r1, #12]
    863e:	e7f1      	b.n	8624 <bt_conn_get_info+0x30>
	return -EINVAL;
    8640:	f06f 0015 	mvn.w	r0, #21
    8644:	e7f8      	b.n	8638 <bt_conn_get_info+0x44>
    8646:	bf00      	nop
    8648:	20000288 	.word	0x20000288

0000864c <send_conn_le_param_update>:
{
    864c:	b538      	push	{r3, r4, r5, lr}
    864e:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    8650:	4608      	mov	r0, r1
{
    8652:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    8654:	f01b fec0 	bl	243d8 <bt_le_conn_params_valid>
    8658:	b348      	cbz	r0, 86ae <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    865a:	4b16      	ldr	r3, [pc, #88]	; (86b4 <send_conn_le_param_update+0x68>)
    865c:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
    8660:	0799      	lsls	r1, r3, #30
    8662:	d407      	bmi.n	8674 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
    8664:	78e3      	ldrb	r3, [r4, #3]
    8666:	b183      	cbz	r3, 868a <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
    8668:	4629      	mov	r1, r5
    866a:	4620      	mov	r0, r4
}
    866c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    8670:	f000 bac0 	b.w	8bf4 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    8674:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    8678:	079a      	lsls	r2, r3, #30
    867a:	d5f3      	bpl.n	8664 <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    867c:	f3bf 8f5b 	dmb	ish
    8680:	6863      	ldr	r3, [r4, #4]
    8682:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    8686:	055b      	lsls	r3, r3, #21
    8688:	d4ec      	bmi.n	8664 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    868a:	4629      	mov	r1, r5
    868c:	4620      	mov	r0, r4
    868e:	f01c f92e 	bl	248ee <bt_conn_le_conn_update>
		if (rc == 0) {
    8692:	b958      	cbnz	r0, 86ac <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
    8694:	882b      	ldrh	r3, [r5, #0]
    8696:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
    869a:	886b      	ldrh	r3, [r5, #2]
    869c:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
    86a0:	88ab      	ldrh	r3, [r5, #4]
    86a2:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    86a6:	88eb      	ldrh	r3, [r5, #6]
    86a8:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    86ac:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    86ae:	f06f 0015 	mvn.w	r0, #21
    86b2:	e7fb      	b.n	86ac <send_conn_le_param_update+0x60>
    86b4:	20000288 	.word	0x20000288

000086b8 <deferred_work>:
{
    86b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    86ba:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
    86be:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
    86c0:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    86c4:	b9fb      	cbnz	r3, 8706 <deferred_work+0x4e>
		bt_l2cap_disconnected(conn);
    86c6:	4628      	mov	r0, r5
    86c8:	f01c f973 	bl	249b2 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    86cc:	4b2c      	ldr	r3, [pc, #176]	; (8780 <deferred_work+0xc8>)
    86ce:	681e      	ldr	r6, [r3, #0]
    86d0:	b94e      	cbnz	r6, 86e6 <deferred_work+0x2e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    86d2:	4e2c      	ldr	r6, [pc, #176]	; (8784 <deferred_work+0xcc>)
    86d4:	4f2c      	ldr	r7, [pc, #176]	; (8788 <deferred_work+0xd0>)
    86d6:	42be      	cmp	r6, r7
    86d8:	d30d      	bcc.n	86f6 <deferred_work+0x3e>
		bt_conn_unref(conn);
    86da:	4628      	mov	r0, r5
}
    86dc:	b003      	add	sp, #12
    86de:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    86e2:	f01c b879 	b.w	247d8 <bt_conn_unref>
		if (cb->disconnected) {
    86e6:	6873      	ldr	r3, [r6, #4]
    86e8:	b11b      	cbz	r3, 86f2 <deferred_work+0x3a>
			cb->disconnected(conn, conn->err);
    86ea:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
    86ee:	4628      	mov	r0, r5
    86f0:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    86f2:	6936      	ldr	r6, [r6, #16]
    86f4:	e7ec      	b.n	86d0 <deferred_work+0x18>
		if (cb->disconnected) {
    86f6:	6873      	ldr	r3, [r6, #4]
    86f8:	b11b      	cbz	r3, 8702 <deferred_work+0x4a>
			cb->disconnected(conn, conn->err);
    86fa:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
    86fe:	4628      	mov	r0, r5
    8700:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    8702:	3614      	adds	r6, #20
    8704:	e7e7      	b.n	86d6 <deferred_work+0x1e>
	if (conn->type != BT_CONN_TYPE_LE) {
    8706:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    870a:	2b01      	cmp	r3, #1
    870c:	d12f      	bne.n	876e <deferred_work+0xb6>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    870e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
    8712:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
    8716:	e856 3f00 	ldrex	r3, [r6]
    871a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    871e:	e846 2100 	strex	r1, r2, [r6]
    8722:	2900      	cmp	r1, #0
    8724:	d1f7      	bne.n	8716 <deferred_work+0x5e>
    8726:	f3bf 8f5b 	dmb	ish
    872a:	059b      	lsls	r3, r3, #22
    872c:	d521      	bpl.n	8772 <deferred_work+0xba>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    872e:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    8732:	f8ad 3000 	strh.w	r3, [sp]
    8736:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
    873a:	f8ad 3002 	strh.w	r3, [sp, #2]
    873e:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    8742:	f8ad 3004 	strh.w	r3, [sp, #4]
    8746:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    874a:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
    874e:	4669      	mov	r1, sp
    8750:	4628      	mov	r0, r5
    8752:	f7ff ff7b 	bl	864c <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8756:	f3bf 8f5b 	dmb	ish
    875a:	e856 3f00 	ldrex	r3, [r6]
    875e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    8762:	e846 3200 	strex	r2, r3, [r6]
    8766:	2a00      	cmp	r2, #0
    8768:	d1f7      	bne.n	875a <deferred_work+0xa2>
    876a:	f3bf 8f5b 	dmb	ish
}
    876e:	b003      	add	sp, #12
    8770:	bdf0      	pop	{r4, r5, r6, r7, pc}
		param = BT_LE_CONN_PARAM(
    8772:	4a06      	ldr	r2, [pc, #24]	; (878c <deferred_work+0xd4>)
    8774:	6810      	ldr	r0, [r2, #0]
    8776:	6851      	ldr	r1, [r2, #4]
    8778:	466b      	mov	r3, sp
    877a:	c303      	stmia	r3!, {r0, r1}
    877c:	e7e7      	b.n	874e <deferred_work+0x96>
    877e:	bf00      	nop
    8780:	20002114 	.word	0x20002114
    8784:	000296fc 	.word	0x000296fc
    8788:	000296fc 	.word	0x000296fc
    878c:	00029b78 	.word	0x00029b78

00008790 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
    8790:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    8792:	4801      	ldr	r0, [pc, #4]	; (8798 <bt_conn_create_frag_timeout+0x8>)
    8794:	f7ff bdfc 	b.w	8390 <bt_conn_create_pdu_timeout>
    8798:	20001200 	.word	0x20001200

0000879c <create_frag>:
{
    879c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    87a0:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
    87a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    87a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    87aa:	2000      	movs	r0, #0
{
    87ac:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
    87ae:	f7ff ffef 	bl	8790 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    87b2:	7ab3      	ldrb	r3, [r6, #10]
    87b4:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
    87b6:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    87b8:	f04f 0600 	mov.w	r6, #0
    87bc:	d005      	beq.n	87ca <create_frag+0x2e>
		net_buf_unref(frag);
    87be:	f015 fad1 	bl	1dd64 <net_buf_unref>
		return NULL;
    87c2:	4635      	mov	r5, r6
}
    87c4:	4628      	mov	r0, r5
    87c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    87ca:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
    87cc:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
    87d0:	4e0c      	ldr	r6, [pc, #48]	; (8804 <create_frag+0x68>)
    87d2:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    87d4:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
    87d8:	f01f fdeb 	bl	283b2 <net_buf_simple_tailroom>
    87dc:	4580      	cmp	r8, r0
    87de:	d20c      	bcs.n	87fa <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
    87e0:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
    87e4:	f854 1f08 	ldr.w	r1, [r4, #8]!
    87e8:	4632      	mov	r2, r6
    87ea:	4638      	mov	r0, r7
    87ec:	f01f fd32 	bl	28254 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
    87f0:	4631      	mov	r1, r6
    87f2:	4620      	mov	r0, r4
    87f4:	f01f fd98 	bl	28328 <net_buf_simple_pull>
    87f8:	e7e4      	b.n	87c4 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
    87fa:	4638      	mov	r0, r7
    87fc:	f01f fdd9 	bl	283b2 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    8800:	b286      	uxth	r6, r0
    8802:	e7ef      	b.n	87e4 <create_frag+0x48>
    8804:	20000288 	.word	0x20000288

00008808 <bt_conn_process_tx>:
{
    8808:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    880a:	7a83      	ldrb	r3, [r0, #10]
{
    880c:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    880e:	b993      	cbnz	r3, 8836 <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8810:	f3bf 8f5b 	dmb	ish
    8814:	1d03      	adds	r3, r0, #4
    8816:	e853 2f00 	ldrex	r2, [r3]
    881a:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    881e:	e843 1500 	strex	r5, r1, [r3]
    8822:	2d00      	cmp	r5, #0
    8824:	d1f7      	bne.n	8816 <bt_conn_process_tx+0xe>
    8826:	f3bf 8f5b 	dmb	ish
    882a:	0653      	lsls	r3, r2, #25
    882c:	d503      	bpl.n	8836 <bt_conn_process_tx+0x2e>
}
    882e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
    8832:	f01b bf98 	b.w	24766 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    8836:	2200      	movs	r2, #0
    8838:	2300      	movs	r3, #0
    883a:	f104 0038 	add.w	r0, r4, #56	; 0x38
    883e:	f01f fc4a 	bl	280d6 <net_buf_get>
	BT_ASSERT(buf);
    8842:	4605      	mov	r5, r0
    8844:	b960      	cbnz	r0, 8860 <bt_conn_process_tx+0x58>
    8846:	4a1f      	ldr	r2, [pc, #124]	; (88c4 <bt_conn_process_tx+0xbc>)
    8848:	491f      	ldr	r1, [pc, #124]	; (88c8 <bt_conn_process_tx+0xc0>)
    884a:	4820      	ldr	r0, [pc, #128]	; (88cc <bt_conn_process_tx+0xc4>)
    884c:	f240 23d9 	movw	r3, #729	; 0x2d9
    8850:	f018 fd0c 	bl	2126c <printk>
    8854:	4040      	eors	r0, r0
    8856:	f380 8811 	msr	BASEPRI, r0
    885a:	f04f 0003 	mov.w	r0, #3
    885e:	df02      	svc	2
	return bt_dev.le.acl_mtu;
    8860:	4e1b      	ldr	r6, [pc, #108]	; (88d0 <bt_conn_process_tx+0xc8>)
	if (buf->len <= conn_mtu(conn)) {
    8862:	89aa      	ldrh	r2, [r5, #12]
    8864:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
    8868:	429a      	cmp	r2, r3
    886a:	d807      	bhi.n	887c <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
    886c:	2300      	movs	r3, #0
    886e:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
    8870:	4629      	mov	r1, r5
    8872:	4620      	mov	r0, r4
    8874:	f7ff fa98 	bl	7da8 <send_frag>
	if (!send_buf(conn, buf)) {
    8878:	b130      	cbz	r0, 8888 <bt_conn_process_tx+0x80>
}
    887a:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
    887c:	4629      	mov	r1, r5
    887e:	4620      	mov	r0, r4
    8880:	f7ff ff8c 	bl	879c <create_frag>
	if (!frag) {
    8884:	4601      	mov	r1, r0
    8886:	b920      	cbnz	r0, 8892 <bt_conn_process_tx+0x8a>
		net_buf_unref(buf);
    8888:	4628      	mov	r0, r5
}
    888a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
    888e:	f015 ba69 	b.w	1dd64 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
    8892:	2301      	movs	r3, #1
    8894:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    8896:	4620      	mov	r0, r4
    8898:	f7ff fa86 	bl	7da8 <send_frag>
    889c:	2800      	cmp	r0, #0
    889e:	d0f3      	beq.n	8888 <bt_conn_process_tx+0x80>
	while (buf->len > conn_mtu(conn)) {
    88a0:	89aa      	ldrh	r2, [r5, #12]
    88a2:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
    88a6:	429a      	cmp	r2, r3
    88a8:	d802      	bhi.n	88b0 <bt_conn_process_tx+0xa8>
	return send_frag(conn, buf, FRAG_END, false);
    88aa:	2300      	movs	r3, #0
    88ac:	2203      	movs	r2, #3
    88ae:	e7df      	b.n	8870 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
    88b0:	4629      	mov	r1, r5
    88b2:	4620      	mov	r0, r4
    88b4:	f7ff ff72 	bl	879c <create_frag>
		if (!frag) {
    88b8:	4601      	mov	r1, r0
    88ba:	2800      	cmp	r0, #0
    88bc:	d0e4      	beq.n	8888 <bt_conn_process_tx+0x80>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    88be:	2301      	movs	r3, #1
    88c0:	461a      	mov	r2, r3
    88c2:	e7e8      	b.n	8896 <bt_conn_process_tx+0x8e>
    88c4:	0002bfbe 	.word	0x0002bfbe
    88c8:	0002b568 	.word	0x0002b568
    88cc:	0002b804 	.word	0x0002b804
    88d0:	20000288 	.word	0x20000288

000088d4 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
    88d4:	b570      	push	{r4, r5, r6, lr}
    88d6:	4d0b      	ldr	r5, [pc, #44]	; (8904 <bt_conn_init+0x30>)
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    88d8:	4e0b      	ldr	r6, [pc, #44]	; (8908 <bt_conn_init+0x34>)
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    88da:	2400      	movs	r4, #0
		k_fifo_put(&free_tx, &conn_tx[i]);
    88dc:	4629      	mov	r1, r5
    88de:	4630      	mov	r0, r6
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    88e0:	3401      	adds	r4, #1
		k_fifo_put(&free_tx, &conn_tx[i]);
    88e2:	f020 f967 	bl	28bb4 <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    88e6:	2c08      	cmp	r4, #8
    88e8:	f105 0510 	add.w	r5, r5, #16
    88ec:	d1f6      	bne.n	88dc <bt_conn_init+0x8>
	}

	bt_att_init();
    88ee:	f01c fc60 	bl	251b2 <bt_att_init>

	err = bt_smp_init();
    88f2:	f01c ffb6 	bl	25862 <bt_smp_init>
	if (err) {
    88f6:	4604      	mov	r4, r0
    88f8:	b908      	cbnz	r0, 88fe <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
    88fa:	f01c f8ac 	bl	24a56 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
    88fe:	4620      	mov	r0, r4
    8900:	bd70      	pop	{r4, r5, r6, pc}
    8902:	bf00      	nop
    8904:	20002118 	.word	0x20002118
    8908:	20001158 	.word	0x20001158

0000890c <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    890c:	4a0b      	ldr	r2, [pc, #44]	; (893c <l2cap_accept+0x30>)
{
    890e:	b508      	push	{r3, lr}
    8910:	4603      	mov	r3, r0
		if (l2cap->chan.chan.conn) {
    8912:	6810      	ldr	r0, [r2, #0]
    8914:	b918      	cbnz	r0, 891e <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    8916:	4b0a      	ldr	r3, [pc, #40]	; (8940 <l2cap_accept+0x34>)
    8918:	6053      	str	r3, [r2, #4]
		*chan = &l2cap->chan.chan;
    891a:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    891c:	bd08      	pop	{r3, pc}
    891e:	4909      	ldr	r1, [pc, #36]	; (8944 <l2cap_accept+0x38>)
    8920:	4a09      	ldr	r2, [pc, #36]	; (8948 <l2cap_accept+0x3c>)
	BT_ERR("No available L2CAP context for conn %p", conn);
    8922:	480a      	ldr	r0, [pc, #40]	; (894c <l2cap_accept+0x40>)
    8924:	1a52      	subs	r2, r2, r1
    8926:	08d2      	lsrs	r2, r2, #3
    8928:	0192      	lsls	r2, r2, #6
    892a:	f042 0201 	orr.w	r2, r2, #1
    892e:	4619      	mov	r1, r3
    8930:	f019 f8e8 	bl	21b04 <log_1>
	return -ENOMEM;
    8934:	f06f 000b 	mvn.w	r0, #11
    8938:	e7f0      	b.n	891c <l2cap_accept+0x10>
    893a:	bf00      	nop
    893c:	20001600 	.word	0x20001600
    8940:	00029fcc 	.word	0x00029fcc
    8944:	00029870 	.word	0x00029870
    8948:	00029978 	.word	0x00029978
    894c:	0002c04b 	.word	0x0002c04b

00008950 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    8950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8952:	4605      	mov	r5, r0
    8954:	460f      	mov	r7, r1
    8956:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
    8958:	2300      	movs	r3, #0
    895a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    895e:	2104      	movs	r1, #4
    8960:	2000      	movs	r0, #0
    8962:	f7ff fd15 	bl	8390 <bt_conn_create_pdu_timeout>
	if (!buf) {
    8966:	4604      	mov	r4, r0
    8968:	b960      	cbnz	r0, 8984 <l2cap_create_le_sig_pdu.constprop.0+0x34>
    896a:	4a0a      	ldr	r2, [pc, #40]	; (8994 <l2cap_create_le_sig_pdu.constprop.0+0x44>)
    896c:	4b0a      	ldr	r3, [pc, #40]	; (8998 <l2cap_create_le_sig_pdu.constprop.0+0x48>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
    896e:	480b      	ldr	r0, [pc, #44]	; (899c <l2cap_create_le_sig_pdu.constprop.0+0x4c>)
    8970:	1ad2      	subs	r2, r2, r3
    8972:	08d2      	lsrs	r2, r2, #3
    8974:	0192      	lsls	r2, r2, #6
    8976:	f042 0201 	orr.w	r2, r2, #1
    897a:	4629      	mov	r1, r5
    897c:	f019 f8c2 	bl	21b04 <log_1>
}
    8980:	4620      	mov	r0, r4
    8982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
    8984:	2104      	movs	r1, #4
    8986:	3008      	adds	r0, #8
    8988:	f01f fc5e 	bl	28248 <net_buf_simple_add>
	hdr->code = code;
    898c:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
    898e:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    8990:	8046      	strh	r6, [r0, #2]
	return buf;
    8992:	e7f5      	b.n	8980 <l2cap_create_le_sig_pdu.constprop.0+0x30>
    8994:	00029978 	.word	0x00029978
    8998:	00029870 	.word	0x00029870
    899c:	0002c072 	.word	0x0002c072

000089a0 <l2cap_rtx_timeout>:
{
    89a0:	b538      	push	{r3, r4, r5, lr}
    89a2:	4a0b      	ldr	r2, [pc, #44]	; (89d0 <l2cap_rtx_timeout+0x30>)
    89a4:	4b0b      	ldr	r3, [pc, #44]	; (89d4 <l2cap_rtx_timeout+0x34>)
	struct bt_conn *conn = chan->chan.conn;
    89a6:	4604      	mov	r4, r0
    89a8:	1ad2      	subs	r2, r2, r3
    89aa:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
    89ae:	480a      	ldr	r0, [pc, #40]	; (89d8 <l2cap_rtx_timeout+0x38>)
    89b0:	08d2      	lsrs	r2, r2, #3
    89b2:	0192      	lsls	r2, r2, #6
    89b4:	4621      	mov	r1, r4
    89b6:	f042 0201 	orr.w	r2, r2, #1
    89ba:	f019 f8a3 	bl	21b04 <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
    89be:	4628      	mov	r0, r5
    89c0:	4621      	mov	r1, r4
    89c2:	f01b ffc0 	bl	24946 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    89c6:	4620      	mov	r0, r4
}
    89c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    89cc:	f01b bfdc 	b.w	24988 <bt_l2cap_chan_del>
    89d0:	00029978 	.word	0x00029978
    89d4:	00029870 	.word	0x00029870
    89d8:	0002c09a 	.word	0x0002c09a

000089dc <bt_l2cap_connected>:
{
    89dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    89e0:	4e29      	ldr	r6, [pc, #164]	; (8a88 <bt_l2cap_connected+0xac>)
    89e2:	4f2a      	ldr	r7, [pc, #168]	; (8a8c <bt_l2cap_connected+0xb0>)
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
    89e4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8a90 <bt_l2cap_connected+0xb4>
{
    89e8:	4604      	mov	r4, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    89ea:	42be      	cmp	r6, r7
    89ec:	d302      	bcc.n	89f4 <bt_l2cap_connected+0x18>
}
    89ee:	b003      	add	sp, #12
    89f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    89f4:	6873      	ldr	r3, [r6, #4]
    89f6:	a901      	add	r1, sp, #4
    89f8:	4620      	mov	r0, r4
    89fa:	4798      	blx	r3
    89fc:	2800      	cmp	r0, #0
    89fe:	db3d      	blt.n	8a7c <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
    8a00:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    8a02:	8833      	ldrh	r3, [r6, #0]
    8a04:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
    8a08:	f8a5 3080 	strh.w	r3, [r5, #128]	; 0x80
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
    8a0c:	4641      	mov	r1, r8
    8a0e:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    8a12:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
    8a16:	f020 f9c4 	bl	28da2 <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    8a1a:	f3bf 8f5b 	dmb	ish
    8a1e:	f105 0368 	add.w	r3, r5, #104	; 0x68
    8a22:	2200      	movs	r2, #0
    8a24:	e853 1f00 	ldrex	r1, [r3]
    8a28:	e843 2000 	strex	r0, r2, [r3]
    8a2c:	2800      	cmp	r0, #0
    8a2e:	d1f9      	bne.n	8a24 <bt_l2cap_connected+0x48>
    8a30:	f3bf 8f5b 	dmb	ish
	parent->next = child;
    8a34:	60aa      	str	r2, [r5, #8]
	return list->tail;
    8a36:	6d62      	ldr	r2, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
    8a38:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode)
    8a3c:	bb02      	cbnz	r2, 8a80 <bt_l2cap_connected+0xa4>
	list->head = node;
    8a3e:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (chan->ops->connected) {
    8a42:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    8a44:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
    8a46:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    8a48:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    8a4c:	681b      	ldr	r3, [r3, #0]
    8a4e:	b103      	cbz	r3, 8a52 <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
    8a50:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8a52:	9b01      	ldr	r3, [sp, #4]
    8a54:	f3bf 8f5b 	dmb	ish
    8a58:	3368      	adds	r3, #104	; 0x68
    8a5a:	e853 2f00 	ldrex	r2, [r3]
    8a5e:	f042 0201 	orr.w	r2, r2, #1
    8a62:	e843 2100 	strex	r1, r2, [r3]
    8a66:	2900      	cmp	r1, #0
    8a68:	d1f7      	bne.n	8a5a <bt_l2cap_connected+0x7e>
    8a6a:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    8a6e:	9801      	ldr	r0, [sp, #4]
    8a70:	6843      	ldr	r3, [r0, #4]
    8a72:	699b      	ldr	r3, [r3, #24]
    8a74:	b113      	cbz	r3, 8a7c <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
    8a76:	f100 0168 	add.w	r1, r0, #104	; 0x68
    8a7a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    8a7c:	360c      	adds	r6, #12
    8a7e:	e7b4      	b.n	89ea <bt_l2cap_connected+0xe>
	parent->next = child;
    8a80:	6013      	str	r3, [r2, #0]
	list->tail = node;
    8a82:	6563      	str	r3, [r4, #84]	; 0x54
}
    8a84:	e7dd      	b.n	8a42 <bt_l2cap_connected+0x66>
    8a86:	bf00      	nop
    8a88:	000296d8 	.word	0x000296d8
    8a8c:	000296fc 	.word	0x000296fc
    8a90:	000089a1 	.word	0x000089a1

00008a94 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
    8a94:	898b      	ldrh	r3, [r1, #12]
    8a96:	2b03      	cmp	r3, #3
{
    8a98:	b573      	push	{r0, r1, r4, r5, r6, lr}
    8a9a:	4606      	mov	r6, r0
    8a9c:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    8a9e:	d80a      	bhi.n	8ab6 <l2cap_recv+0x22>
    8aa0:	4931      	ldr	r1, [pc, #196]	; (8b68 <l2cap_recv+0xd4>)
    8aa2:	4b32      	ldr	r3, [pc, #200]	; (8b6c <l2cap_recv+0xd8>)
		BT_ERR("Too small L2CAP signaling PDU");
    8aa4:	4832      	ldr	r0, [pc, #200]	; (8b70 <l2cap_recv+0xdc>)
    8aa6:	1ac9      	subs	r1, r1, r3
    8aa8:	08c9      	lsrs	r1, r1, #3
    8aaa:	0189      	lsls	r1, r1, #6
    8aac:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid ident value in L2CAP PDU");
    8ab0:	f019 f81b 	bl	21aea <log_0>
		return 0;
    8ab4:	e013      	b.n	8ade <l2cap_recv+0x4a>
	return net_buf_simple_pull_mem(&buf->b, len);
    8ab6:	2104      	movs	r1, #4
    8ab8:	f105 0008 	add.w	r0, r5, #8
    8abc:	f01f fc3c 	bl	28338 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    8ac0:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    8ac2:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
    8ac4:	428a      	cmp	r2, r1
    8ac6:	4604      	mov	r4, r0
    8ac8:	d00c      	beq.n	8ae4 <l2cap_recv+0x50>
    8aca:	4828      	ldr	r0, [pc, #160]	; (8b6c <l2cap_recv+0xd8>)
    8acc:	4b26      	ldr	r3, [pc, #152]	; (8b68 <l2cap_recv+0xd4>)
    8ace:	1a1b      	subs	r3, r3, r0
    8ad0:	08db      	lsrs	r3, r3, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    8ad2:	019b      	lsls	r3, r3, #6
    8ad4:	4827      	ldr	r0, [pc, #156]	; (8b74 <l2cap_recv+0xe0>)
    8ad6:	f043 0301 	orr.w	r3, r3, #1
    8ada:	f019 f827 	bl	21b2c <log_2>
}
    8ade:	2000      	movs	r0, #0
    8ae0:	b002      	add	sp, #8
    8ae2:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
    8ae4:	7843      	ldrb	r3, [r0, #1]
    8ae6:	b943      	cbnz	r3, 8afa <l2cap_recv+0x66>
    8ae8:	491f      	ldr	r1, [pc, #124]	; (8b68 <l2cap_recv+0xd4>)
    8aea:	4b20      	ldr	r3, [pc, #128]	; (8b6c <l2cap_recv+0xd8>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    8aec:	4822      	ldr	r0, [pc, #136]	; (8b78 <l2cap_recv+0xe4>)
    8aee:	1ac9      	subs	r1, r1, r3
    8af0:	08c9      	lsrs	r1, r1, #3
    8af2:	0189      	lsls	r1, r1, #6
    8af4:	f041 0101 	orr.w	r1, r1, #1
    8af8:	e7da      	b.n	8ab0 <l2cap_recv+0x1c>
	switch (hdr->code) {
    8afa:	7801      	ldrb	r1, [r0, #0]
    8afc:	2901      	cmp	r1, #1
    8afe:	d0ee      	beq.n	8ade <l2cap_recv+0x4a>
    8b00:	2913      	cmp	r1, #19
    8b02:	d10a      	bne.n	8b1a <l2cap_recv+0x86>
	if (buf->len < sizeof(*rsp)) {
    8b04:	2a01      	cmp	r2, #1
    8b06:	d8ea      	bhi.n	8ade <l2cap_recv+0x4a>
    8b08:	4917      	ldr	r1, [pc, #92]	; (8b68 <l2cap_recv+0xd4>)
    8b0a:	4b18      	ldr	r3, [pc, #96]	; (8b6c <l2cap_recv+0xd8>)
		BT_ERR("Too small LE conn param rsp");
    8b0c:	481b      	ldr	r0, [pc, #108]	; (8b7c <l2cap_recv+0xe8>)
    8b0e:	1ac9      	subs	r1, r1, r3
    8b10:	08c9      	lsrs	r1, r1, #3
    8b12:	0189      	lsls	r1, r1, #6
    8b14:	f041 0101 	orr.w	r1, r1, #1
    8b18:	e7ca      	b.n	8ab0 <l2cap_recv+0x1c>
    8b1a:	4b14      	ldr	r3, [pc, #80]	; (8b6c <l2cap_recv+0xd8>)
    8b1c:	4a12      	ldr	r2, [pc, #72]	; (8b68 <l2cap_recv+0xd4>)
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    8b1e:	4818      	ldr	r0, [pc, #96]	; (8b80 <l2cap_recv+0xec>)
    8b20:	1ad2      	subs	r2, r2, r3
    8b22:	08d2      	lsrs	r2, r2, #3
    8b24:	0192      	lsls	r2, r2, #6
    8b26:	f042 0202 	orr.w	r2, r2, #2
    8b2a:	f018 ffeb 	bl	21b04 <log_1>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    8b2e:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
    8b30:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    8b32:	2202      	movs	r2, #2
    8b34:	2001      	movs	r0, #1
    8b36:	f7ff ff0b 	bl	8950 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    8b3a:	4604      	mov	r4, r0
    8b3c:	2800      	cmp	r0, #0
    8b3e:	d0ce      	beq.n	8ade <l2cap_recv+0x4a>
	return net_buf_simple_add(&buf->b, len);
    8b40:	2102      	movs	r1, #2
    8b42:	3008      	adds	r0, #8
    8b44:	f01f fb80 	bl	28248 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    8b48:	2300      	movs	r3, #0
    8b4a:	7003      	strb	r3, [r0, #0]
    8b4c:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    8b4e:	4622      	mov	r2, r4
    8b50:	9300      	str	r3, [sp, #0]
    8b52:	2105      	movs	r1, #5
    8b54:	4628      	mov	r0, r5
    8b56:	f01b ff45 	bl	249e4 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
    8b5a:	2800      	cmp	r0, #0
    8b5c:	d0bf      	beq.n	8ade <l2cap_recv+0x4a>
		net_buf_unref(buf);
    8b5e:	4620      	mov	r0, r4
    8b60:	f015 f900 	bl	1dd64 <net_buf_unref>
    8b64:	e7bb      	b.n	8ade <l2cap_recv+0x4a>
    8b66:	bf00      	nop
    8b68:	00029978 	.word	0x00029978
    8b6c:	00029870 	.word	0x00029870
    8b70:	0002c0aa 	.word	0x0002c0aa
    8b74:	0002c0c8 	.word	0x0002c0c8
    8b78:	0002c0e9 	.word	0x0002c0e9
    8b7c:	0002c10a 	.word	0x0002c10a
    8b80:	0002c126 	.word	0x0002c126

00008b84 <bt_l2cap_recv>:
{
    8b84:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
    8b86:	898b      	ldrh	r3, [r1, #12]
    8b88:	2b03      	cmp	r3, #3
{
    8b8a:	4605      	mov	r5, r0
    8b8c:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    8b8e:	d80e      	bhi.n	8bae <bt_l2cap_recv+0x2a>
    8b90:	4914      	ldr	r1, [pc, #80]	; (8be4 <bt_l2cap_recv+0x60>)
    8b92:	4b15      	ldr	r3, [pc, #84]	; (8be8 <bt_l2cap_recv+0x64>)
		BT_ERR("Too small L2CAP PDU received");
    8b94:	4815      	ldr	r0, [pc, #84]	; (8bec <bt_l2cap_recv+0x68>)
    8b96:	1ac9      	subs	r1, r1, r3
    8b98:	08c9      	lsrs	r1, r1, #3
    8b9a:	0189      	lsls	r1, r1, #6
    8b9c:	f041 0101 	orr.w	r1, r1, #1
    8ba0:	f018 ffa3 	bl	21aea <log_0>
	net_buf_unref(buf);
    8ba4:	4620      	mov	r0, r4
}
    8ba6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
    8baa:	f015 b8db 	b.w	1dd64 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
    8bae:	2104      	movs	r1, #4
    8bb0:	f104 0008 	add.w	r0, r4, #8
    8bb4:	f01f fbc0 	bl	28338 <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    8bb8:	8841      	ldrh	r1, [r0, #2]
    8bba:	4628      	mov	r0, r5
    8bbc:	f01b ff3b 	bl	24a36 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    8bc0:	b950      	cbnz	r0, 8bd8 <bt_l2cap_recv+0x54>
    8bc2:	4b09      	ldr	r3, [pc, #36]	; (8be8 <bt_l2cap_recv+0x64>)
    8bc4:	4a07      	ldr	r2, [pc, #28]	; (8be4 <bt_l2cap_recv+0x60>)
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
    8bc6:	480a      	ldr	r0, [pc, #40]	; (8bf0 <bt_l2cap_recv+0x6c>)
    8bc8:	1ad2      	subs	r2, r2, r3
    8bca:	08d2      	lsrs	r2, r2, #3
    8bcc:	0192      	lsls	r2, r2, #6
    8bce:	f042 0202 	orr.w	r2, r2, #2
    8bd2:	f018 ff97 	bl	21b04 <log_1>
		net_buf_unref(buf);
    8bd6:	e7e5      	b.n	8ba4 <bt_l2cap_recv+0x20>
	chan->ops->recv(chan, buf);
    8bd8:	6843      	ldr	r3, [r0, #4]
    8bda:	4621      	mov	r1, r4
    8bdc:	691b      	ldr	r3, [r3, #16]
    8bde:	4798      	blx	r3
    8be0:	e7e0      	b.n	8ba4 <bt_l2cap_recv+0x20>
    8be2:	bf00      	nop
    8be4:	00029978 	.word	0x00029978
    8be8:	00029870 	.word	0x00029870
    8bec:	0002c144 	.word	0x0002c144
    8bf0:	0002c161 	.word	0x0002c161

00008bf4 <bt_l2cap_update_conn_param>:
{
    8bf4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    8bf6:	460d      	mov	r5, r1
	ident++;
    8bf8:	4916      	ldr	r1, [pc, #88]	; (8c54 <bt_l2cap_update_conn_param+0x60>)
    8bfa:	780b      	ldrb	r3, [r1, #0]
    8bfc:	3301      	adds	r3, #1
	if (!ident) {
    8bfe:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
    8c02:	bf08      	it	eq
    8c04:	2301      	moveq	r3, #1
    8c06:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    8c08:	7809      	ldrb	r1, [r1, #0]
{
    8c0a:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    8c0c:	2208      	movs	r2, #8
    8c0e:	2012      	movs	r0, #18
    8c10:	f7ff fe9e 	bl	8950 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    8c14:	4604      	mov	r4, r0
    8c16:	b1d0      	cbz	r0, 8c4e <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
    8c18:	2108      	movs	r1, #8
    8c1a:	4408      	add	r0, r1
    8c1c:	f01f fb14 	bl	28248 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    8c20:	882b      	ldrh	r3, [r5, #0]
    8c22:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    8c24:	886b      	ldrh	r3, [r5, #2]
    8c26:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    8c28:	88ab      	ldrh	r3, [r5, #4]
    8c2a:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    8c2c:	88eb      	ldrh	r3, [r5, #6]
    8c2e:	80c3      	strh	r3, [r0, #6]
    8c30:	2300      	movs	r3, #0
    8c32:	9300      	str	r3, [sp, #0]
    8c34:	4622      	mov	r2, r4
    8c36:	2105      	movs	r1, #5
    8c38:	4630      	mov	r0, r6
    8c3a:	f01b fed3 	bl	249e4 <bt_l2cap_send_cb>
	if (err) {
    8c3e:	4605      	mov	r5, r0
    8c40:	b110      	cbz	r0, 8c48 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
    8c42:	4620      	mov	r0, r4
    8c44:	f015 f88e 	bl	1dd64 <net_buf_unref>
}
    8c48:	4628      	mov	r0, r5
    8c4a:	b002      	add	sp, #8
    8c4c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    8c4e:	f06f 050b 	mvn.w	r5, #11
    8c52:	e7f9      	b.n	8c48 <bt_l2cap_update_conn_param+0x54>
    8c54:	200038a6 	.word	0x200038a6

00008c58 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
    8c58:	4b02      	ldr	r3, [pc, #8]	; (8c64 <att_cfm_sent+0xc>)
    8c5a:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
    8c5e:	f01b bf0d 	b.w	24a7c <att_sent>
    8c62:	bf00      	nop
    8c64:	00024e65 	.word	0x00024e65

00008c68 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
    8c68:	4b02      	ldr	r3, [pc, #8]	; (8c74 <att_rsp_sent+0xc>)
    8c6a:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
    8c6e:	f01b bf05 	b.w	24a7c <att_sent>
    8c72:	bf00      	nop
    8c74:	00024e81 	.word	0x00024e81

00008c78 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
    8c78:	4b02      	ldr	r3, [pc, #8]	; (8c84 <att_req_sent+0xc>)
    8c7a:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
    8c7e:	f01b befd 	b.w	24a7c <att_sent>
    8c82:	bf00      	nop
    8c84:	00024c47 	.word	0x00024c47

00008c88 <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
    8c88:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
    8c8a:	7a83      	ldrb	r3, [r0, #10]
    8c8c:	2b07      	cmp	r3, #7
    8c8e:	d00b      	beq.n	8ca8 <att_get+0x20>
    8c90:	4918      	ldr	r1, [pc, #96]	; (8cf4 <att_get+0x6c>)
    8c92:	4b19      	ldr	r3, [pc, #100]	; (8cf8 <att_get+0x70>)
		BT_WARN("Not connected");
    8c94:	4819      	ldr	r0, [pc, #100]	; (8cfc <att_get+0x74>)
    8c96:	1ac9      	subs	r1, r1, r3
    8c98:	08c9      	lsrs	r1, r1, #3
    8c9a:	0189      	lsls	r1, r1, #6
    8c9c:	f041 0102 	orr.w	r1, r1, #2
		return NULL;
	}

	att_chan = ATT_CHAN(chan);
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
		BT_WARN("ATT channel flagged as disconnected");
    8ca0:	f018 ff23 	bl	21aea <log_0>
		return NULL;
    8ca4:	2400      	movs	r4, #0
    8ca6:	e00e      	b.n	8cc6 <att_get+0x3e>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    8ca8:	2104      	movs	r1, #4
    8caa:	f01b fec4 	bl	24a36 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    8cae:	4604      	mov	r4, r0
    8cb0:	b958      	cbnz	r0, 8cca <att_get+0x42>
    8cb2:	4910      	ldr	r1, [pc, #64]	; (8cf4 <att_get+0x6c>)
    8cb4:	4b10      	ldr	r3, [pc, #64]	; (8cf8 <att_get+0x70>)
		BT_ERR("Unable to find ATT channel");
    8cb6:	4812      	ldr	r0, [pc, #72]	; (8d00 <att_get+0x78>)
    8cb8:	1ac9      	subs	r1, r1, r3
    8cba:	08c9      	lsrs	r1, r1, #3
    8cbc:	0189      	lsls	r1, r1, #6
    8cbe:	f041 0101 	orr.w	r1, r1, #1
    8cc2:	f018 ff12 	bl	21aea <log_0>
	}

	return att_chan->att;
}
    8cc6:	4620      	mov	r0, r4
    8cc8:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8cca:	f3bf 8f5b 	dmb	ish
    8cce:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
    8cd2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
    8cd6:	075b      	lsls	r3, r3, #29
    8cd8:	d508      	bpl.n	8cec <att_get+0x64>
    8cda:	4906      	ldr	r1, [pc, #24]	; (8cf4 <att_get+0x6c>)
    8cdc:	4b06      	ldr	r3, [pc, #24]	; (8cf8 <att_get+0x70>)
		BT_WARN("ATT channel flagged as disconnected");
    8cde:	4809      	ldr	r0, [pc, #36]	; (8d04 <att_get+0x7c>)
    8ce0:	1ac9      	subs	r1, r1, r3
    8ce2:	08c9      	lsrs	r1, r1, #3
    8ce4:	0189      	lsls	r1, r1, #6
    8ce6:	f041 0102 	orr.w	r1, r1, #2
    8cea:	e7d9      	b.n	8ca0 <att_get+0x18>
	return att_chan->att;
    8cec:	f850 4c08 	ldr.w	r4, [r0, #-8]
    8cf0:	e7e9      	b.n	8cc6 <att_get+0x3e>
    8cf2:	bf00      	nop
    8cf4:	00029880 	.word	0x00029880
    8cf8:	00029870 	.word	0x00029870
    8cfc:	0002c19d 	.word	0x0002c19d
    8d00:	0002c1ab 	.word	0x0002c1ab
    8d04:	0002c1c6 	.word	0x0002c1c6

00008d08 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    8d08:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    8d0a:	3808      	subs	r0, #8
    8d0c:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    8d0e:	a901      	add	r1, sp, #4
    8d10:	4802      	ldr	r0, [pc, #8]	; (8d1c <bt_att_released+0x14>)
    8d12:	f01f fe67 	bl	289e4 <k_mem_slab_free>
}
    8d16:	b003      	add	sp, #12
    8d18:	f85d fb04 	ldr.w	pc, [sp], #4
    8d1c:	2000107c 	.word	0x2000107c

00008d20 <find_type_cb>:
{
    8d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
    8d24:	f8d2 9000 	ldr.w	r9, [r2]
{
    8d28:	b091      	sub	sp, #68	; 0x44
    8d2a:	4607      	mov	r7, r0
    8d2c:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    8d2e:	2500      	movs	r5, #0
    8d30:	f642 0301 	movw	r3, #10241	; 0x2801
    8d34:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
    8d36:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    8d3a:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    8d3e:	a90b      	add	r1, sp, #44	; 0x2c
{
    8d40:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    8d42:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    8d46:	f01b fa78 	bl	2423a <bt_uuid_cmp>
    8d4a:	2800      	cmp	r0, #0
    8d4c:	d066      	beq.n	8e1c <find_type_cb+0xfc>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    8d4e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    8d52:	6838      	ldr	r0, [r7, #0]
    8d54:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    8d58:	a90b      	add	r1, sp, #44	; 0x2c
    8d5a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    8d5e:	f01b fa6c 	bl	2423a <bt_uuid_cmp>
    8d62:	b138      	cbz	r0, 8d74 <find_type_cb+0x54>
		if (data->group &&
    8d64:	68a3      	ldr	r3, [r4, #8]
    8d66:	b11b      	cbz	r3, 8d70 <find_type_cb+0x50>
    8d68:	885a      	ldrh	r2, [r3, #2]
    8d6a:	42b2      	cmp	r2, r6
    8d6c:	d200      	bcs.n	8d70 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
    8d6e:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
    8d70:	2001      	movs	r0, #1
    8d72:	e009      	b.n	8d88 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
    8d74:	6861      	ldr	r1, [r4, #4]
    8d76:	4608      	mov	r0, r1
    8d78:	f01b fe78 	bl	24a6c <net_buf_frags_len>
    8d7c:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
    8d80:	1a1b      	subs	r3, r3, r0
    8d82:	2b03      	cmp	r3, #3
    8d84:	d803      	bhi.n	8d8e <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
    8d86:	2000      	movs	r0, #0
}
    8d88:	b011      	add	sp, #68	; 0x44
    8d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
    8d8e:	4608      	mov	r0, r1
    8d90:	f01f fa2c 	bl	281ec <net_buf_frag_last>
    8d94:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
    8d96:	6860      	ldr	r0, [r4, #4]
    8d98:	f01b fe68 	bl	24a6c <net_buf_frags_len>
    8d9c:	f8b9 a08a 	ldrh.w	sl, [r9, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
    8da0:	f105 0b08 	add.w	fp, r5, #8
    8da4:	ebaa 0a00 	sub.w	sl, sl, r0
    8da8:	4658      	mov	r0, fp
    8daa:	f01f fb02 	bl	283b2 <net_buf_simple_tailroom>
    8dae:	4582      	cmp	sl, r0
    8db0:	d237      	bcs.n	8e22 <find_type_cb+0x102>
    8db2:	6860      	ldr	r0, [r4, #4]
    8db4:	f01b fe5a 	bl	24a6c <net_buf_frags_len>
    8db8:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
    8dbc:	1a18      	subs	r0, r3, r0
	if (!len) {
    8dbe:	b970      	cbnz	r0, 8dde <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
    8dc0:	6863      	ldr	r3, [r4, #4]
    8dc2:	7998      	ldrb	r0, [r3, #6]
    8dc4:	f014 ff10 	bl	1dbe8 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
    8dc8:	2200      	movs	r2, #0
    8dca:	2300      	movs	r3, #0
    8dcc:	f01f f97e 	bl	280cc <net_buf_alloc_fixed>
		if (!frag) {
    8dd0:	4605      	mov	r5, r0
    8dd2:	2800      	cmp	r0, #0
    8dd4:	d0d7      	beq.n	8d86 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
    8dd6:	4601      	mov	r1, r0
    8dd8:	6860      	ldr	r0, [r4, #4]
    8dda:	f01f fa18 	bl	2820e <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    8dde:	2300      	movs	r3, #0
    8de0:	9300      	str	r3, [sp, #0]
    8de2:	f8d7 9004 	ldr.w	r9, [r7, #4]
    8de6:	4639      	mov	r1, r7
    8de8:	2310      	movs	r3, #16
    8dea:	aa02      	add	r2, sp, #8
    8dec:	4640      	mov	r0, r8
    8dee:	47c8      	blx	r9
	if (read < 0) {
    8df0:	1e07      	subs	r7, r0, #0
    8df2:	db13      	blt.n	8e1c <find_type_cb+0xfc>
	if (read != data->value_len) {
    8df4:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    8df6:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
    8df8:	42ba      	cmp	r2, r7
    8dfa:	d037      	beq.n	8e6c <find_type_cb+0x14c>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    8dfc:	4601      	mov	r1, r0
    8dfe:	a80b      	add	r0, sp, #44	; 0x2c
    8e00:	f01b fa49 	bl	24296 <bt_uuid_create>
    8e04:	b988      	cbnz	r0, 8e2a <find_type_cb+0x10a>
    8e06:	4a1b      	ldr	r2, [pc, #108]	; (8e74 <find_type_cb+0x154>)
    8e08:	4b1b      	ldr	r3, [pc, #108]	; (8e78 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %u", data->value_len);
    8e0a:	7c21      	ldrb	r1, [r4, #16]
    8e0c:	481b      	ldr	r0, [pc, #108]	; (8e7c <find_type_cb+0x15c>)
    8e0e:	1ad2      	subs	r2, r2, r3
    8e10:	08d2      	lsrs	r2, r2, #3
    8e12:	0192      	lsls	r2, r2, #6
    8e14:	f042 0202 	orr.w	r2, r2, #2
			BT_WARN("Unable to create UUID: size %d", read);
    8e18:	f018 fe74 	bl	21b04 <log_1>
	data->group = NULL;
    8e1c:	2300      	movs	r3, #0
    8e1e:	60a3      	str	r3, [r4, #8]
    8e20:	e7a6      	b.n	8d70 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
    8e22:	4658      	mov	r0, fp
    8e24:	f01f fac5 	bl	283b2 <net_buf_simple_tailroom>
    8e28:	e7c9      	b.n	8dbe <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
    8e2a:	b2fa      	uxtb	r2, r7
    8e2c:	a902      	add	r1, sp, #8
    8e2e:	a806      	add	r0, sp, #24
    8e30:	f01b fa31 	bl	24296 <bt_uuid_create>
    8e34:	b948      	cbnz	r0, 8e4a <find_type_cb+0x12a>
    8e36:	4a0f      	ldr	r2, [pc, #60]	; (8e74 <find_type_cb+0x154>)
    8e38:	4b0f      	ldr	r3, [pc, #60]	; (8e78 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %d", read);
    8e3a:	4811      	ldr	r0, [pc, #68]	; (8e80 <find_type_cb+0x160>)
    8e3c:	1ad2      	subs	r2, r2, r3
    8e3e:	08d2      	lsrs	r2, r2, #3
    8e40:	0192      	lsls	r2, r2, #6
    8e42:	f042 0202 	orr.w	r2, r2, #2
    8e46:	4639      	mov	r1, r7
    8e48:	e7e6      	b.n	8e18 <find_type_cb+0xf8>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
    8e4a:	a906      	add	r1, sp, #24
    8e4c:	a80b      	add	r0, sp, #44	; 0x2c
    8e4e:	f01b f9f4 	bl	2423a <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
    8e52:	2800      	cmp	r0, #0
    8e54:	d1e2      	bne.n	8e1c <find_type_cb+0xfc>
	data->err = 0x00;
    8e56:	2300      	movs	r3, #0
    8e58:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
    8e5a:	2104      	movs	r1, #4
    8e5c:	f105 0008 	add.w	r0, r5, #8
    8e60:	f01f f9f2 	bl	28248 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
    8e64:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    8e66:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    8e68:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
    8e6a:	e781      	b.n	8d70 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
    8e6c:	a902      	add	r1, sp, #8
    8e6e:	f01a ff8a 	bl	23d86 <memcmp>
    8e72:	e7ee      	b.n	8e52 <find_type_cb+0x132>
    8e74:	00029880 	.word	0x00029880
    8e78:	00029870 	.word	0x00029870
    8e7c:	0002c1ea 	.word	0x0002c1ea
    8e80:	0002c209 	.word	0x0002c209

00008e84 <chan_send>:
{
    8e84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    8e88:	688b      	ldr	r3, [r1, #8]
    8e8a:	781b      	ldrb	r3, [r3, #0]
    8e8c:	2bd2      	cmp	r3, #210	; 0xd2
{
    8e8e:	4606      	mov	r6, r0
    8e90:	460c      	mov	r4, r1
    8e92:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    8e94:	d116      	bne.n	8ec4 <chan_send+0x40>
		err = bt_smp_sign(chan->att->conn, buf);
    8e96:	6803      	ldr	r3, [r0, #0]
    8e98:	6818      	ldr	r0, [r3, #0]
    8e9a:	f01c fcdf 	bl	2585c <bt_smp_sign>
		if (err) {
    8e9e:	4605      	mov	r5, r0
    8ea0:	b180      	cbz	r0, 8ec4 <chan_send+0x40>
    8ea2:	4b24      	ldr	r3, [pc, #144]	; (8f34 <chan_send+0xb0>)
    8ea4:	4924      	ldr	r1, [pc, #144]	; (8f38 <chan_send+0xb4>)
			BT_ERR("Error signing data");
    8ea6:	4825      	ldr	r0, [pc, #148]	; (8f3c <chan_send+0xb8>)
    8ea8:	1ac9      	subs	r1, r1, r3
    8eaa:	08c9      	lsrs	r1, r1, #3
    8eac:	0189      	lsls	r1, r1, #6
    8eae:	f041 0101 	orr.w	r1, r1, #1
    8eb2:	f018 fe1a 	bl	21aea <log_0>
			net_buf_unref(buf);
    8eb6:	4620      	mov	r0, r4
    8eb8:	f014 ff54 	bl	1dd64 <net_buf_unref>
}
    8ebc:	4628      	mov	r0, r5
    8ebe:	b003      	add	sp, #12
    8ec0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
    8ec4:	f104 0008 	add.w	r0, r4, #8
    8ec8:	f01f fa6f 	bl	283aa <net_buf_simple_headroom>
	state->len = buf->len;
    8ecc:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    8ed0:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
    8ed2:	b957      	cbnz	r7, 8eea <chan_send+0x66>
	switch (att_op_get_type(buf->data[0])) {
    8ed4:	68a3      	ldr	r3, [r4, #8]
    8ed6:	7818      	ldrb	r0, [r3, #0]
    8ed8:	f01b fde6 	bl	24aa8 <att_op_get_type>
    8edc:	1e43      	subs	r3, r0, #1
    8ede:	b2db      	uxtb	r3, r3
    8ee0:	2b04      	cmp	r3, #4
    8ee2:	bf9c      	itt	ls
    8ee4:	4a16      	ldrls	r2, [pc, #88]	; (8f40 <chan_send+0xbc>)
    8ee6:	f852 7023 	ldrls.w	r7, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    8eea:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
    8eec:	f8c6 7140 	str.w	r7, [r6, #320]	; 0x140
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    8ef0:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
    8ef2:	4b14      	ldr	r3, [pc, #80]	; (8f44 <chan_send+0xc0>)
    8ef4:	429f      	cmp	r7, r3
    8ef6:	d018      	beq.n	8f2a <chan_send+0xa6>
	} else if (cb == chan_cfm_sent) {
    8ef8:	4b13      	ldr	r3, [pc, #76]	; (8f48 <chan_send+0xc4>)
    8efa:	429f      	cmp	r7, r3
    8efc:	d017      	beq.n	8f2e <chan_send+0xaa>
		return att_sent;
    8efe:	4913      	ldr	r1, [pc, #76]	; (8f4c <chan_send+0xc8>)
    8f00:	4b13      	ldr	r3, [pc, #76]	; (8f50 <chan_send+0xcc>)
    8f02:	4a14      	ldr	r2, [pc, #80]	; (8f54 <chan_send+0xd0>)
    8f04:	428f      	cmp	r7, r1
    8f06:	bf18      	it	ne
    8f08:	4613      	movne	r3, r2
			       &chan->chan.chan);
    8f0a:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    8f0c:	9600      	str	r6, [sp, #0]
    8f0e:	4622      	mov	r2, r4
    8f10:	2104      	movs	r1, #4
    8f12:	f01b fd67 	bl	249e4 <bt_l2cap_send_cb>
	if (err) {
    8f16:	4605      	mov	r5, r0
    8f18:	2800      	cmp	r0, #0
    8f1a:	d0cf      	beq.n	8ebc <chan_send+0x38>
	buf->data = buf->__buf + state->offset;
    8f1c:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    8f1e:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
    8f22:	fa10 f088 	uxtah	r0, r0, r8
    8f26:	60a0      	str	r0, [r4, #8]
}
    8f28:	e7c8      	b.n	8ebc <chan_send+0x38>
		return att_rsp_sent;
    8f2a:	4b0b      	ldr	r3, [pc, #44]	; (8f58 <chan_send+0xd4>)
    8f2c:	e7ed      	b.n	8f0a <chan_send+0x86>
		return att_cfm_sent;
    8f2e:	4b0b      	ldr	r3, [pc, #44]	; (8f5c <chan_send+0xd8>)
    8f30:	e7eb      	b.n	8f0a <chan_send+0x86>
    8f32:	bf00      	nop
    8f34:	00029870 	.word	0x00029870
    8f38:	00029880 	.word	0x00029880
    8f3c:	0002c228 	.word	0x0002c228
    8f40:	00029ff0 	.word	0x00029ff0
    8f44:	00024e81 	.word	0x00024e81
    8f48:	00024e65 	.word	0x00024e65
    8f4c:	00024c47 	.word	0x00024c47
    8f50:	00008c79 	.word	0x00008c79
    8f54:	00024a7d 	.word	0x00024a7d
    8f58:	00008c69 	.word	0x00008c69
    8f5c:	00008c59 	.word	0x00008c59

00008f60 <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
    8f60:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
    8f62:	4a07      	ldr	r2, [pc, #28]	; (8f80 <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
    8f64:	4604      	mov	r4, r0
    8f66:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
    8f68:	f7ff ff8c 	bl	8e84 <chan_send>
	if (err) {
    8f6c:	b130      	cbz	r0, 8f7c <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
    8f6e:	4629      	mov	r1, r5
    8f70:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
}
    8f74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
    8f78:	f01f b927 	b.w	281ca <net_buf_put>
}
    8f7c:	bd38      	pop	{r3, r4, r5, pc}
    8f7e:	bf00      	nop
    8f80:	00024e81 	.word	0x00024e81

00008f84 <read_group_cb>:
{
    8f84:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    8f88:	4605      	mov	r5, r0
    8f8a:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    8f8c:	f04f 0800 	mov.w	r8, #0
    8f90:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    8f94:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
    8f96:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    8f98:	f88d 8008 	strb.w	r8, [sp, #8]
    8f9c:	a902      	add	r1, sp, #8
{
    8f9e:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    8fa0:	f8ad 300a 	strh.w	r3, [sp, #10]
    8fa4:	f01b f949 	bl	2423a <bt_uuid_cmp>
    8fa8:	b1a0      	cbz	r0, 8fd4 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    8faa:	f642 0301 	movw	r3, #10241	; 0x2801
    8fae:	6828      	ldr	r0, [r5, #0]
    8fb0:	f88d 800c 	strb.w	r8, [sp, #12]
    8fb4:	a903      	add	r1, sp, #12
    8fb6:	f8ad 300e 	strh.w	r3, [sp, #14]
    8fba:	f01b f93e 	bl	2423a <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    8fbe:	b148      	cbz	r0, 8fd4 <read_group_cb+0x50>
		if (data->group &&
    8fc0:	6923      	ldr	r3, [r4, #16]
    8fc2:	b11b      	cbz	r3, 8fcc <read_group_cb+0x48>
    8fc4:	885a      	ldrh	r2, [r3, #2]
    8fc6:	42b2      	cmp	r2, r6
    8fc8:	d200      	bcs.n	8fcc <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
    8fca:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    8fcc:	2001      	movs	r0, #1
}
    8fce:	b004      	add	sp, #16
    8fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    8fd4:	6861      	ldr	r1, [r4, #4]
    8fd6:	6828      	ldr	r0, [r5, #0]
    8fd8:	f01b f92f 	bl	2423a <bt_uuid_cmp>
    8fdc:	b110      	cbz	r0, 8fe4 <read_group_cb+0x60>
		data->group = NULL;
    8fde:	2300      	movs	r3, #0
    8fe0:	6123      	str	r3, [r4, #16]
    8fe2:	e7f3      	b.n	8fcc <read_group_cb+0x48>
	if (data->rsp->len &&
    8fe4:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    8fe6:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
    8fe8:	781a      	ldrb	r2, [r3, #0]
    8fea:	b13a      	cbz	r2, 8ffc <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    8fec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
    8ff0:	8981      	ldrh	r1, [r0, #12]
    8ff2:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    8ff4:	4293      	cmp	r3, r2
    8ff6:	da01      	bge.n	8ffc <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
    8ff8:	2000      	movs	r0, #0
    8ffa:	e7e8      	b.n	8fce <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
    8ffc:	2104      	movs	r1, #4
    8ffe:	3008      	adds	r0, #8
    9000:	f01f f922 	bl	28248 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    9004:	4b09      	ldr	r3, [pc, #36]	; (902c <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    9006:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    9008:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    900a:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    900c:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    900e:	4629      	mov	r1, r5
    9010:	9300      	str	r3, [sp, #0]
    9012:	9401      	str	r4, [sp, #4]
    9014:	2300      	movs	r3, #0
    9016:	4638      	mov	r0, r7
    9018:	f01b fe99 	bl	24d4e <att_chan_read>
	if (read < 0) {
    901c:	2800      	cmp	r0, #0
    901e:	dbeb      	blt.n	8ff8 <read_group_cb+0x74>
	if (!data->group) {
    9020:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    9022:	3800      	subs	r0, #0
    9024:	bf18      	it	ne
    9026:	2001      	movne	r0, #1
    9028:	e7d1      	b.n	8fce <read_group_cb+0x4a>
    902a:	bf00      	nop
    902c:	00024c27 	.word	0x00024c27

00009030 <read_type_cb>:
{
    9030:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
    9034:	f8d2 8000 	ldr.w	r8, [r2]
{
    9038:	4606      	mov	r6, r0
    903a:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    903c:	6800      	ldr	r0, [r0, #0]
    903e:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
    9040:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
    9044:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    9046:	f01b f8f8 	bl	2423a <bt_uuid_cmp>
    904a:	4607      	mov	r7, r0
    904c:	2800      	cmp	r0, #0
    904e:	d13e      	bne.n	90ce <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    9050:	4628      	mov	r0, r5
    9052:	2215      	movs	r2, #21
    9054:	4631      	mov	r1, r6
    9056:	f01c fb91 	bl	2577c <bt_gatt_check_perm>
    905a:	4605      	mov	r5, r0
    905c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    905e:	b148      	cbz	r0, 9074 <read_type_cb+0x44>
		if (data->rsp->len) {
    9060:	68e3      	ldr	r3, [r4, #12]
    9062:	781b      	ldrb	r3, [r3, #0]
    9064:	b923      	cbnz	r3, 9070 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
    9066:	2500      	movs	r5, #0
}
    9068:	4628      	mov	r0, r5
    906a:	b003      	add	sp, #12
    906c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
    9070:	7527      	strb	r7, [r4, #20]
    9072:	e7f8      	b.n	9066 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    9074:	68a0      	ldr	r0, [r4, #8]
    9076:	f01f f8b9 	bl	281ec <net_buf_frag_last>
    907a:	2102      	movs	r1, #2
    907c:	3008      	adds	r0, #8
    907e:	f01f f8e3 	bl	28248 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    9082:	4b14      	ldr	r3, [pc, #80]	; (90d4 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    9084:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    9086:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
    9088:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    908c:	4631      	mov	r1, r6
    908e:	9300      	str	r3, [sp, #0]
    9090:	9401      	str	r4, [sp, #4]
    9092:	462b      	mov	r3, r5
    9094:	4640      	mov	r0, r8
    9096:	f01b fe5a 	bl	24d4e <att_chan_read>
	if (read < 0) {
    909a:	2800      	cmp	r0, #0
    909c:	da07      	bge.n	90ae <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
    909e:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    90a2:	bf26      	itte	cs
    90a4:	4240      	negcs	r0, r0
    90a6:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    90a8:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
    90aa:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    90ac:	e7dc      	b.n	9068 <read_type_cb+0x38>
	if (!data->item) {
    90ae:	6923      	ldr	r3, [r4, #16]
    90b0:	2b00      	cmp	r3, #0
    90b2:	d0d8      	beq.n	9066 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    90b4:	68a0      	ldr	r0, [r4, #8]
    90b6:	f01b fcd9 	bl	24a6c <net_buf_frags_len>
    90ba:	f8b8 508a 	ldrh.w	r5, [r8, #138]	; 0x8a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    90be:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    90c0:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    90c2:	7818      	ldrb	r0, [r3, #0]
    90c4:	4285      	cmp	r5, r0
    90c6:	bf94      	ite	ls
    90c8:	2500      	movls	r5, #0
    90ca:	2501      	movhi	r5, #1
    90cc:	e7cc      	b.n	9068 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    90ce:	2501      	movs	r5, #1
    90d0:	e7ca      	b.n	9068 <read_type_cb+0x38>
    90d2:	bf00      	nop
    90d4:	00024a89 	.word	0x00024a89

000090d8 <prep_write_cb>:
{
    90d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    90dc:	4614      	mov	r4, r2
    90de:	4606      	mov	r6, r0
    90e0:	460f      	mov	r7, r1
	data->err = bt_gatt_check_perm(data->conn, attr,
    90e2:	222a      	movs	r2, #42	; 0x2a
    90e4:	4601      	mov	r1, r0
    90e6:	6820      	ldr	r0, [r4, #0]
    90e8:	f01c fb48 	bl	2577c <bt_gatt_check_perm>
    90ec:	4605      	mov	r5, r0
    90ee:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    90f0:	2800      	cmp	r0, #0
    90f2:	d12e      	bne.n	9152 <prep_write_cb+0x7a>
	if (!(attr->perm & BT_GATT_PERM_PREPARE_WRITE)) {
    90f4:	7cb3      	ldrb	r3, [r6, #18]
    90f6:	065b      	lsls	r3, r3, #25
    90f8:	d516      	bpl.n	9128 <prep_write_cb+0x50>
	write = attr->write(data->conn, attr, data->value, data->len,
    90fa:	2301      	movs	r3, #1
    90fc:	9301      	str	r3, [sp, #4]
    90fe:	89e3      	ldrh	r3, [r4, #14]
    9100:	9300      	str	r3, [sp, #0]
    9102:	f8d6 8008 	ldr.w	r8, [r6, #8]
    9106:	89a3      	ldrh	r3, [r4, #12]
    9108:	68a2      	ldr	r2, [r4, #8]
    910a:	6820      	ldr	r0, [r4, #0]
    910c:	4631      	mov	r1, r6
    910e:	47c0      	blx	r8
	if (write != 0) {
    9110:	b150      	cbz	r0, 9128 <prep_write_cb+0x50>
	if (err < 0 && err >= -0xff) {
    9112:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    9116:	bf26      	itte	cs
    9118:	4243      	negcs	r3, r0
    911a:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
    911c:	230e      	movcc	r3, #14
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
    911e:	7423      	strb	r3, [r4, #16]
}
    9120:	4628      	mov	r0, r5
    9122:	b002      	add	sp, #8
    9124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_alloc_fixed(pool, timeout);
    9128:	480b      	ldr	r0, [pc, #44]	; (9158 <prep_write_cb+0x80>)
    912a:	2200      	movs	r2, #0
    912c:	2300      	movs	r3, #0
    912e:	f01e ffcd 	bl	280cc <net_buf_alloc_fixed>
	data->buf = net_buf_alloc(&prep_pool, K_NO_WAIT);
    9132:	6060      	str	r0, [r4, #4]
	if (!data->buf) {
    9134:	b908      	cbnz	r0, 913a <prep_write_cb+0x62>
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
    9136:	2309      	movs	r3, #9
    9138:	e7f1      	b.n	911e <prep_write_cb+0x46>
	attr_data->offset = data->offset;
    913a:	89e3      	ldrh	r3, [r4, #14]
    913c:	82c3      	strh	r3, [r0, #22]
	attr_data->handle = handle;
    913e:	8287      	strh	r7, [r0, #20]
	return net_buf_simple_add_mem(&buf->b, mem, len);
    9140:	89a2      	ldrh	r2, [r4, #12]
    9142:	68a1      	ldr	r1, [r4, #8]
    9144:	3008      	adds	r0, #8
    9146:	f01f f885 	bl	28254 <net_buf_simple_add_mem>
	data->err = 0U;
    914a:	2300      	movs	r3, #0
    914c:	7423      	strb	r3, [r4, #16]
	return BT_GATT_ITER_CONTINUE;
    914e:	2501      	movs	r5, #1
    9150:	e7e6      	b.n	9120 <prep_write_cb+0x48>
		return BT_GATT_ITER_STOP;
    9152:	2500      	movs	r5, #0
    9154:	e7e4      	b.n	9120 <prep_write_cb+0x48>
    9156:	bf00      	nop
    9158:	200012c8 	.word	0x200012c8

0000915c <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    915c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    915e:	2300      	movs	r3, #0
{
    9160:	4606      	mov	r6, r0
    9162:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    9164:	4828      	ldr	r0, [pc, #160]	; (9208 <bt_att_accept+0xac>)
    9166:	2200      	movs	r2, #0
    9168:	4669      	mov	r1, sp
    916a:	f016 fd67 	bl	1fc3c <k_mem_slab_alloc>
    916e:	4604      	mov	r4, r0
    9170:	b178      	cbz	r0, 9192 <bt_att_accept+0x36>
    9172:	4a26      	ldr	r2, [pc, #152]	; (920c <bt_att_accept+0xb0>)
    9174:	4b26      	ldr	r3, [pc, #152]	; (9210 <bt_att_accept+0xb4>)
		BT_ERR("No available ATT context for conn %p", conn);
    9176:	4827      	ldr	r0, [pc, #156]	; (9214 <bt_att_accept+0xb8>)
    9178:	1ad2      	subs	r2, r2, r3
    917a:	08d2      	lsrs	r2, r2, #3
    917c:	0192      	lsls	r2, r2, #6
    917e:	f042 0201 	orr.w	r2, r2, #1
    9182:	4631      	mov	r1, r6
		BT_ERR("No available ATT channel for conn %p", att->conn);
    9184:	f018 fcbe 	bl	21b04 <log_1>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
    9188:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
    918c:	4620      	mov	r0, r4
    918e:	b003      	add	sp, #12
    9190:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
    9192:	4601      	mov	r1, r0
    9194:	2244      	movs	r2, #68	; 0x44
    9196:	9800      	ldr	r0, [sp, #0]
    9198:	f01a fe11 	bl	23dbe <memset>
	att->conn = conn;
    919c:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    919e:	481e      	ldr	r0, [pc, #120]	; (9218 <bt_att_accept+0xbc>)
	list->tail = NULL;
    91a0:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
    91a2:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
    91a6:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
    91aa:	2200      	movs	r2, #0
    91ac:	2300      	movs	r3, #0
    91ae:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    91b0:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    91b2:	f016 fd43 	bl	1fc3c <k_mem_slab_alloc>
    91b6:	4604      	mov	r4, r0
    91b8:	b148      	cbz	r0, 91ce <bt_att_accept+0x72>
    91ba:	4a14      	ldr	r2, [pc, #80]	; (920c <bt_att_accept+0xb0>)
    91bc:	4b14      	ldr	r3, [pc, #80]	; (9210 <bt_att_accept+0xb4>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
    91be:	6829      	ldr	r1, [r5, #0]
    91c0:	4816      	ldr	r0, [pc, #88]	; (921c <bt_att_accept+0xc0>)
    91c2:	1ad2      	subs	r2, r2, r3
    91c4:	08d2      	lsrs	r2, r2, #3
    91c6:	0192      	lsls	r2, r2, #6
    91c8:	f042 0201 	orr.w	r2, r2, #1
    91cc:	e7da      	b.n	9184 <bt_att_accept+0x28>
	(void)memset(chan, 0, sizeof(*chan));
    91ce:	4601      	mov	r1, r0
    91d0:	f44f 72a4 	mov.w	r2, #328	; 0x148
    91d4:	9801      	ldr	r0, [sp, #4]
    91d6:	f01a fdf2 	bl	23dbe <memset>
	chan->chan.chan.ops = &ops;
    91da:	9801      	ldr	r0, [sp, #4]
    91dc:	4b10      	ldr	r3, [pc, #64]	; (9220 <bt_att_accept+0xc4>)
    91de:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
    91e0:	30f8      	adds	r0, #248	; 0xf8
    91e2:	f01f fcbb 	bl	28b5c <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    91e6:	9b01      	ldr	r3, [sp, #4]
    91e8:	f3bf 8f5b 	dmb	ish
    91ec:	33f0      	adds	r3, #240	; 0xf0
    91ee:	e853 2f00 	ldrex	r2, [r3]
    91f2:	e843 4100 	strex	r1, r4, [r3]
    91f6:	2900      	cmp	r1, #0
    91f8:	d1f9      	bne.n	91ee <bt_att_accept+0x92>
    91fa:	f3bf 8f5b 	dmb	ish
	chan->att = att;
    91fe:	9b01      	ldr	r3, [sp, #4]
    9200:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
    9204:	603b      	str	r3, [r7, #0]
	return 0;
    9206:	e7c1      	b.n	918c <bt_att_accept+0x30>
    9208:	20001060 	.word	0x20001060
    920c:	00029880 	.word	0x00029880
    9210:	00029870 	.word	0x00029870
    9214:	0002c23b 	.word	0x0002c23b
    9218:	2000107c 	.word	0x2000107c
    921c:	0002c260 	.word	0x0002c260
    9220:	200007c0 	.word	0x200007c0

00009224 <bt_att_connected>:
{
    9224:	b570      	push	{r4, r5, r6, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    9226:	4606      	mov	r6, r0
{
    9228:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    922a:	2104      	movs	r1, #4
    922c:	f856 0908 	ldr.w	r0, [r6], #-8
    9230:	f01b fbf1 	bl	24a16 <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
    9234:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
    9238:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    923a:	b93b      	cbnz	r3, 924c <bt_att_connected+0x28>
    923c:	f105 000c 	add.w	r0, r5, #12
    9240:	f01f fc8c 	bl	28b5c <z_impl_k_queue_init>
    9244:	f105 0024 	add.w	r0, r5, #36	; 0x24
    9248:	f01f fc88 	bl	28b5c <z_impl_k_queue_init>
	parent->next = child;
    924c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
    924e:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
Z_GENLIST_PREPEND(slist, snode)
    9252:	6c2a      	ldr	r2, [r5, #64]	; 0x40
	sys_slist_prepend(&att->chans, &chan->node);
    9254:	f504 739e 	add.w	r3, r4, #316	; 0x13c
	list->head = node;
    9258:	63eb      	str	r3, [r5, #60]	; 0x3c
Z_GENLIST_PREPEND(slist, snode)
    925a:	b902      	cbnz	r2, 925e <bt_att_connected+0x3a>
	list->tail = node;
    925c:	642b      	str	r3, [r5, #64]	; 0x40
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    925e:	f3bf 8f5b 	dmb	ish
    9262:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    9266:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
    926a:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    926c:	bf58      	it	pl
    926e:	2317      	movpl	r3, #23
	att_chan_mtu_updated(att_chan);
    9270:	4630      	mov	r0, r6
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    9272:	bf5c      	itt	pl
    9274:	f8a4 3082 	strhpl.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    9278:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
    927c:	f01b fc98 	bl	24bb0 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
    9280:	f504 7084 	add.w	r0, r4, #264	; 0x108
    9284:	4902      	ldr	r1, [pc, #8]	; (9290 <bt_att_connected+0x6c>)
}
    9286:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
    928a:	f01f bd8a 	b.w	28da2 <k_work_init_delayable>
    928e:	bf00      	nop
    9290:	00009c61 	.word	0x00009c61

00009294 <bt_att_chan_create_pdu>:
{
    9294:	b538      	push	{r3, r4, r5, lr}
    9296:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    9298:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
    929c:	3201      	adds	r2, #1
    929e:	428a      	cmp	r2, r1
    92a0:	d90c      	bls.n	92bc <bt_att_chan_create_pdu+0x28>
    92a2:	481a      	ldr	r0, [pc, #104]	; (930c <bt_att_chan_create_pdu+0x78>)
    92a4:	4b1a      	ldr	r3, [pc, #104]	; (9310 <bt_att_chan_create_pdu+0x7c>)
    92a6:	1a1b      	subs	r3, r3, r0
    92a8:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    92aa:	019b      	lsls	r3, r3, #6
    92ac:	4819      	ldr	r0, [pc, #100]	; (9314 <bt_att_chan_create_pdu+0x80>)
    92ae:	f043 0302 	orr.w	r3, r3, #2
    92b2:	f018 fc3b 	bl	21b2c <log_2>
		return NULL;
    92b6:	2400      	movs	r4, #0
}
    92b8:	4620      	mov	r0, r4
    92ba:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
    92bc:	4628      	mov	r0, r5
    92be:	f01b fbf3 	bl	24aa8 <att_op_get_type>
    92c2:	2802      	cmp	r0, #2
    92c4:	d001      	beq.n	92ca <bt_att_chan_create_pdu+0x36>
    92c6:	2804      	cmp	r0, #4
    92c8:	d114      	bne.n	92f4 <bt_att_chan_create_pdu+0x60>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
    92ca:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    92ce:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
    92d0:	2100      	movs	r1, #0
    92d2:	4608      	mov	r0, r1
    92d4:	f01b fb83 	bl	249de <bt_l2cap_create_pdu_timeout>
    92d8:	4604      	mov	r4, r0
	if (!buf) {
    92da:	b980      	cbnz	r0, 92fe <bt_att_chan_create_pdu+0x6a>
    92dc:	4b0b      	ldr	r3, [pc, #44]	; (930c <bt_att_chan_create_pdu+0x78>)
    92de:	4a0c      	ldr	r2, [pc, #48]	; (9310 <bt_att_chan_create_pdu+0x7c>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
    92e0:	480d      	ldr	r0, [pc, #52]	; (9318 <bt_att_chan_create_pdu+0x84>)
    92e2:	1ad2      	subs	r2, r2, r3
    92e4:	08d2      	lsrs	r2, r2, #3
    92e6:	0192      	lsls	r2, r2, #6
    92e8:	f042 0201 	orr.w	r2, r2, #1
    92ec:	4629      	mov	r1, r5
    92ee:	f018 fc09 	bl	21b04 <log_1>
		return NULL;
    92f2:	e7e1      	b.n	92b8 <bt_att_chan_create_pdu+0x24>
		buf = bt_l2cap_create_pdu(NULL, 0);
    92f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    92f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    92fc:	e7e8      	b.n	92d0 <bt_att_chan_create_pdu+0x3c>
	return net_buf_simple_add(&buf->b, len);
    92fe:	2101      	movs	r1, #1
    9300:	3008      	adds	r0, #8
    9302:	f01e ffa1 	bl	28248 <net_buf_simple_add>
	hdr->code = op;
    9306:	7005      	strb	r5, [r0, #0]
	return buf;
    9308:	e7d6      	b.n	92b8 <bt_att_chan_create_pdu+0x24>
    930a:	bf00      	nop
    930c:	00029870 	.word	0x00029870
    9310:	00029880 	.word	0x00029880
    9314:	0002c285 	.word	0x0002c285
    9318:	0002c072 	.word	0x0002c072

0000931c <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
    931c:	898b      	ldrh	r3, [r1, #12]
{
    931e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9322:	4604      	mov	r4, r0
    9324:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
    9326:	b963      	cbnz	r3, 9342 <bt_att_recv+0x26>
    9328:	494c      	ldr	r1, [pc, #304]	; (945c <bt_att_recv+0x140>)
    932a:	4b4d      	ldr	r3, [pc, #308]	; (9460 <bt_att_recv+0x144>)
		BT_ERR("Too small ATT PDU received");
    932c:	484d      	ldr	r0, [pc, #308]	; (9464 <bt_att_recv+0x148>)
    932e:	1ac9      	subs	r1, r1, r3
    9330:	08c9      	lsrs	r1, r1, #3
    9332:	0189      	lsls	r1, r1, #6
    9334:	f041 0101 	orr.w	r1, r1, #1
			BT_WARN("Ignoring unexpected indication");
    9338:	f018 fbd7 	bl	21aea <log_0>
}
    933c:	2000      	movs	r0, #0
    933e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    9342:	2101      	movs	r1, #1
    9344:	f108 0008 	add.w	r0, r8, #8
    9348:	f01e fff6 	bl	28338 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
    934c:	f854 3c08 	ldr.w	r3, [r4, #-8]
    9350:	4605      	mov	r5, r0
    9352:	2b00      	cmp	r3, #0
    9354:	d0f2      	beq.n	933c <bt_att_recv+0x20>
		if (hdr->code == handlers[i].op) {
    9356:	7801      	ldrb	r1, [r0, #0]
    9358:	4a43      	ldr	r2, [pc, #268]	; (9468 <bt_att_recv+0x14c>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    935a:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    935e:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
    9360:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
    9364:	4288      	cmp	r0, r1
    9366:	d11e      	bne.n	93a6 <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
    9368:	00d8      	lsls	r0, r3, #3
    936a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    936e:	789f      	ldrb	r7, [r3, #2]
    9370:	2f01      	cmp	r7, #1
    9372:	d133      	bne.n	93dc <bt_att_recv+0xc0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9374:	f3bf 8f5b 	dmb	ish
    9378:	34e8      	adds	r4, #232	; 0xe8
    937a:	e854 3f00 	ldrex	r3, [r4]
    937e:	f043 0101 	orr.w	r1, r3, #1
    9382:	e844 1c00 	strex	ip, r1, [r4]
    9386:	f1bc 0f00 	cmp.w	ip, #0
    938a:	d1f6      	bne.n	937a <bt_att_recv+0x5e>
    938c:	f3bf 8f5b 	dmb	ish
    9390:	07d9      	lsls	r1, r3, #31
    9392:	d53e      	bpl.n	9412 <bt_att_recv+0xf6>
    9394:	4931      	ldr	r1, [pc, #196]	; (945c <bt_att_recv+0x140>)
    9396:	4b32      	ldr	r3, [pc, #200]	; (9460 <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected request");
    9398:	4834      	ldr	r0, [pc, #208]	; (946c <bt_att_recv+0x150>)
    939a:	1ac9      	subs	r1, r1, r3
    939c:	08c9      	lsrs	r1, r1, #3
    939e:	0189      	lsls	r1, r1, #6
    93a0:	f041 0102 	orr.w	r1, r1, #2
    93a4:	e7c8      	b.n	9338 <bt_att_recv+0x1c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    93a6:	3301      	adds	r3, #1
    93a8:	2b0d      	cmp	r3, #13
    93aa:	d1d9      	bne.n	9360 <bt_att_recv+0x44>
    93ac:	4b2c      	ldr	r3, [pc, #176]	; (9460 <bt_att_recv+0x144>)
    93ae:	4a2b      	ldr	r2, [pc, #172]	; (945c <bt_att_recv+0x140>)
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
    93b0:	482f      	ldr	r0, [pc, #188]	; (9470 <bt_att_recv+0x154>)
    93b2:	1ad2      	subs	r2, r2, r3
    93b4:	08d2      	lsrs	r2, r2, #3
    93b6:	0192      	lsls	r2, r2, #6
    93b8:	f042 0202 	orr.w	r2, r2, #2
    93bc:	f018 fba2 	bl	21b04 <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    93c0:	7829      	ldrb	r1, [r5, #0]
    93c2:	4608      	mov	r0, r1
    93c4:	f01b fb70 	bl	24aa8 <att_op_get_type>
    93c8:	2800      	cmp	r0, #0
    93ca:	d0b7      	beq.n	933c <bt_att_recv+0x20>
	if (!req) {
    93cc:	2900      	cmp	r1, #0
    93ce:	d0b5      	beq.n	933c <bt_att_recv+0x20>
    93d0:	2306      	movs	r3, #6
    93d2:	2200      	movs	r2, #0
    93d4:	4630      	mov	r0, r6
    93d6:	f01b fe18 	bl	2500a <send_err_rsp.part.0>
    93da:	e7af      	b.n	933c <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
    93dc:	2f05      	cmp	r7, #5
    93de:	d118      	bne.n	9412 <bt_att_recv+0xf6>
    93e0:	f3bf 8f5b 	dmb	ish
    93e4:	34e8      	adds	r4, #232	; 0xe8
    93e6:	e854 3f00 	ldrex	r3, [r4]
    93ea:	f043 0102 	orr.w	r1, r3, #2
    93ee:	e844 1c00 	strex	ip, r1, [r4]
    93f2:	f1bc 0f00 	cmp.w	ip, #0
    93f6:	d1f6      	bne.n	93e6 <bt_att_recv+0xca>
    93f8:	f3bf 8f5b 	dmb	ish
    93fc:	079b      	lsls	r3, r3, #30
    93fe:	d508      	bpl.n	9412 <bt_att_recv+0xf6>
    9400:	4916      	ldr	r1, [pc, #88]	; (945c <bt_att_recv+0x140>)
    9402:	4b17      	ldr	r3, [pc, #92]	; (9460 <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected indication");
    9404:	481b      	ldr	r0, [pc, #108]	; (9474 <bt_att_recv+0x158>)
    9406:	1ac9      	subs	r1, r1, r3
    9408:	08c9      	lsrs	r1, r1, #3
    940a:	0189      	lsls	r1, r1, #6
    940c:	f041 0102 	orr.w	r1, r1, #2
    9410:	e792      	b.n	9338 <bt_att_recv+0x1c>
	if (buf->len < handler->expect_len) {
    9412:	1813      	adds	r3, r2, r0
    9414:	f8b8 100c 	ldrh.w	r1, [r8, #12]
    9418:	785a      	ldrb	r2, [r3, #1]
    941a:	428a      	cmp	r2, r1
    941c:	d90e      	bls.n	943c <bt_att_recv+0x120>
    941e:	4a10      	ldr	r2, [pc, #64]	; (9460 <bt_att_recv+0x144>)
    9420:	4b0e      	ldr	r3, [pc, #56]	; (945c <bt_att_recv+0x140>)
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    9422:	4815      	ldr	r0, [pc, #84]	; (9478 <bt_att_recv+0x15c>)
    9424:	1a9b      	subs	r3, r3, r2
    9426:	08db      	lsrs	r3, r3, #3
    9428:	019b      	lsls	r3, r3, #6
    942a:	782a      	ldrb	r2, [r5, #0]
    942c:	f043 0301 	orr.w	r3, r3, #1
    9430:	f018 fb7c 	bl	21b2c <log_2>
	if (handler->type == ATT_REQUEST && err) {
    9434:	2f01      	cmp	r7, #1
    9436:	d181      	bne.n	933c <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
    9438:	2304      	movs	r3, #4
    943a:	e00a      	b.n	9452 <bt_att_recv+0x136>
		err = handler->func(att_chan, buf);
    943c:	685b      	ldr	r3, [r3, #4]
    943e:	4641      	mov	r1, r8
    9440:	4630      	mov	r0, r6
    9442:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    9444:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
    9446:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    9448:	f47f af78 	bne.w	933c <bt_att_recv+0x20>
    944c:	2800      	cmp	r0, #0
    944e:	f43f af75 	beq.w	933c <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
    9452:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    9454:	2900      	cmp	r1, #0
    9456:	f43f af71 	beq.w	933c <bt_att_recv+0x20>
    945a:	e7ba      	b.n	93d2 <bt_att_recv+0xb6>
    945c:	00029880 	.word	0x00029880
    9460:	00029870 	.word	0x00029870
    9464:	0002c2aa 	.word	0x0002c2aa
    9468:	0002a004 	.word	0x0002a004
    946c:	0002c2c5 	.word	0x0002c2c5
    9470:	0002c31f 	.word	0x0002c31f
    9474:	0002c2e1 	.word	0x0002c2e1
    9478:	0002c300 	.word	0x0002c300

0000947c <att_write_rsp>:
{
    947c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9480:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    9482:	6803      	ldr	r3, [r0, #0]
    9484:	460e      	mov	r6, r1
    9486:	3900      	subs	r1, #0
{
    9488:	b086      	sub	sp, #24
    948a:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    948c:	bf18      	it	ne
    948e:	2101      	movne	r1, #1
    9490:	6818      	ldr	r0, [r3, #0]
{
    9492:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    9494:	f01c f995 	bl	257c2 <bt_gatt_change_aware>
    9498:	2800      	cmp	r0, #0
    949a:	d04d      	beq.n	9538 <att_write_rsp+0xbc>
	if (!handle) {
    949c:	2f00      	cmp	r7, #0
    949e:	d04d      	beq.n	953c <att_write_rsp+0xc0>
	(void)memset(&data, 0, sizeof(data));
    94a0:	2218      	movs	r2, #24
    94a2:	2100      	movs	r1, #0
    94a4:	4668      	mov	r0, sp
    94a6:	f01a fc8a 	bl	23dbe <memset>
	if (rsp) {
    94aa:	f1b8 0f00 	cmp.w	r8, #0
    94ae:	d126      	bne.n	94fe <att_write_rsp+0x82>
	data.conn = chan->att->conn;
    94b0:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    94b2:	4a23      	ldr	r2, [pc, #140]	; (9540 <att_write_rsp+0xc4>)
	data.conn = chan->att->conn;
    94b4:	681b      	ldr	r3, [r3, #0]
    94b6:	9300      	str	r3, [sp, #0]
	data.offset = offset;
    94b8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    94bc:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    94c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    94c2:	9303      	str	r3, [sp, #12]
	data.len = len;
    94c4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    94c8:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    94cc:	2301      	movs	r3, #1
    94ce:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    94d2:	4639      	mov	r1, r7
    94d4:	466b      	mov	r3, sp
    94d6:	4638      	mov	r0, r7
	data.req = req;
    94d8:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    94dc:	f01b fb11 	bl	24b02 <bt_gatt_foreach_attr>
	if (data.err) {
    94e0:	f89d 4014 	ldrb.w	r4, [sp, #20]
    94e4:	b30c      	cbz	r4, 952a <att_write_rsp+0xae>
		if (rsp) {
    94e6:	f1b8 0f00 	cmp.w	r8, #0
    94ea:	d019      	beq.n	9520 <att_write_rsp+0xa4>
			net_buf_unref(data.buf);
    94ec:	9801      	ldr	r0, [sp, #4]
    94ee:	f014 fc39 	bl	1dd64 <net_buf_unref>
	if (!req) {
    94f2:	b976      	cbnz	r6, 9512 <att_write_rsp+0x96>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    94f4:	2400      	movs	r4, #0
}
    94f6:	4620      	mov	r0, r4
    94f8:	b006      	add	sp, #24
    94fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    94fe:	2200      	movs	r2, #0
    9500:	4641      	mov	r1, r8
    9502:	4628      	mov	r0, r5
    9504:	f7ff fec6 	bl	9294 <bt_att_chan_create_pdu>
    9508:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    950a:	2800      	cmp	r0, #0
    950c:	d1d0      	bne.n	94b0 <att_write_rsp+0x34>
			return BT_ATT_ERR_UNLIKELY;
    950e:	240e      	movs	r4, #14
    9510:	e7f1      	b.n	94f6 <att_write_rsp+0x7a>
    9512:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9516:	463a      	mov	r2, r7
    9518:	4631      	mov	r1, r6
    951a:	4628      	mov	r0, r5
    951c:	f01b fd75 	bl	2500a <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    9520:	2e18      	cmp	r6, #24
    9522:	d1e7      	bne.n	94f4 <att_write_rsp+0x78>
    9524:	f89d 4014 	ldrb.w	r4, [sp, #20]
    9528:	e7e5      	b.n	94f6 <att_write_rsp+0x7a>
	if (data.buf) {
    952a:	9901      	ldr	r1, [sp, #4]
    952c:	2900      	cmp	r1, #0
    952e:	d0e1      	beq.n	94f4 <att_write_rsp+0x78>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    9530:	4628      	mov	r0, r5
    9532:	f7ff fd15 	bl	8f60 <bt_att_chan_send_rsp.constprop.0>
    9536:	e7de      	b.n	94f6 <att_write_rsp+0x7a>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    9538:	2412      	movs	r4, #18
    953a:	e7dc      	b.n	94f6 <att_write_rsp+0x7a>
		return BT_ATT_ERR_INVALID_HANDLE;
    953c:	2401      	movs	r4, #1
    953e:	e7da      	b.n	94f6 <att_write_rsp+0x7a>
    9540:	00024c5d 	.word	0x00024c5d

00009544 <bt_att_create_pdu>:
{
    9544:	b570      	push	{r4, r5, r6, lr}
    9546:	460e      	mov	r6, r1
    9548:	4615      	mov	r5, r2
	att = att_get(conn);
    954a:	f7ff fb9d 	bl	8c88 <att_get>
	if (!att) {
    954e:	b1c0      	cbz	r0, 9582 <bt_att_create_pdu+0x3e>
	return list->head;
    9550:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    9552:	1c69      	adds	r1, r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    9554:	b15b      	cbz	r3, 956e <bt_att_create_pdu+0x2a>
    9556:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
    955a:	d008      	beq.n	956e <bt_att_create_pdu+0x2a>
	return node->next;
    955c:	681b      	ldr	r3, [r3, #0]
    955e:	b10b      	cbz	r3, 9564 <bt_att_create_pdu+0x20>
    9560:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (len + sizeof(op) > chan->chan.tx.mtu) {
    9564:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
    9568:	4291      	cmp	r1, r2
    956a:	d90c      	bls.n	9586 <bt_att_create_pdu+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    956c:	b98b      	cbnz	r3, 9592 <bt_att_create_pdu+0x4e>
    956e:	4a0e      	ldr	r2, [pc, #56]	; (95a8 <bt_att_create_pdu+0x64>)
    9570:	4b0e      	ldr	r3, [pc, #56]	; (95ac <bt_att_create_pdu+0x68>)
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
    9572:	480f      	ldr	r0, [pc, #60]	; (95b0 <bt_att_create_pdu+0x6c>)
    9574:	1ad2      	subs	r2, r2, r3
    9576:	08d2      	lsrs	r2, r2, #3
    9578:	0192      	lsls	r2, r2, #6
    957a:	f042 0202 	orr.w	r2, r2, #2
    957e:	f018 fac1 	bl	21b04 <log_1>
}
    9582:	2000      	movs	r0, #0
    9584:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
    9586:	462a      	mov	r2, r5
    9588:	4631      	mov	r1, r6
}
    958a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
    958e:	f7ff be81 	b.w	9294 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
    9592:	f513 74a2 	adds.w	r4, r3, #324	; 0x144
    9596:	d004      	beq.n	95a2 <bt_att_create_pdu+0x5e>
	return node->next;
    9598:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    959c:	b10c      	cbz	r4, 95a2 <bt_att_create_pdu+0x5e>
    959e:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
    95a2:	4618      	mov	r0, r3
    95a4:	4623      	mov	r3, r4
    95a6:	e7dd      	b.n	9564 <bt_att_create_pdu+0x20>
    95a8:	00029880 	.word	0x00029880
    95ac:	00029870 	.word	0x00029870
    95b0:	0002c339 	.word	0x0002c339

000095b4 <att_prepare_write_req>:
{
    95b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    95b8:	460c      	mov	r4, r1
    95ba:	b087      	sub	sp, #28
    95bc:	4605      	mov	r5, r0
    95be:	2104      	movs	r1, #4
    95c0:	f104 0008 	add.w	r0, r4, #8
    95c4:	f01e feb8 	bl	28338 <net_buf_simple_pull_mem>
	struct bt_conn *conn = chan->chan.chan.conn;
    95c8:	f8d5 b008 	ldr.w	fp, [r5, #8]
	handle = sys_le16_to_cpu(req->handle);
    95cc:	f8b0 a000 	ldrh.w	sl, [r0]
	offset = sys_le16_to_cpu(req->offset);
    95d0:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	return att_prep_write_rsp(chan, handle, offset, buf->data, buf->len);
    95d4:	f8d4 8008 	ldr.w	r8, [r4, #8]
    95d8:	89a7      	ldrh	r7, [r4, #12]
	if (!bt_gatt_change_aware(conn, true)) {
    95da:	2101      	movs	r1, #1
    95dc:	4658      	mov	r0, fp
	handle = sys_le16_to_cpu(req->handle);
    95de:	fa1f f68a 	uxth.w	r6, sl
	if (!bt_gatt_change_aware(conn, true)) {
    95e2:	f01c f8ee 	bl	257c2 <bt_gatt_change_aware>
    95e6:	2800      	cmp	r0, #0
    95e8:	d04a      	beq.n	9680 <att_prepare_write_req+0xcc>
	if (!handle) {
    95ea:	2e00      	cmp	r6, #0
    95ec:	d04a      	beq.n	9684 <att_prepare_write_req+0xd0>
	(void)memset(&data, 0, sizeof(data));
    95ee:	2214      	movs	r2, #20
    95f0:	2100      	movs	r1, #0
    95f2:	a801      	add	r0, sp, #4
    95f4:	f01a fbe3 	bl	23dbe <memset>
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    95f8:	2301      	movs	r3, #1
    95fa:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    95fe:	4a23      	ldr	r2, [pc, #140]	; (968c <att_prepare_write_req+0xd8>)
	data.conn = conn;
    9600:	f8cd b004 	str.w	fp, [sp, #4]
	data.len = len;
    9604:	b2ff      	uxtb	r7, r7
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    9606:	ab01      	add	r3, sp, #4
    9608:	4631      	mov	r1, r6
    960a:	4630      	mov	r0, r6
	data.offset = offset;
    960c:	f8ad 9012 	strh.w	r9, [sp, #18]
	data.value = value;
    9610:	f8cd 800c 	str.w	r8, [sp, #12]
	data.len = len;
    9614:	f8ad 7010 	strh.w	r7, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    9618:	f01b fa73 	bl	24b02 <bt_gatt_foreach_attr>
	if (data.err) {
    961c:	f89d 4014 	ldrb.w	r4, [sp, #20]
    9620:	b154      	cbz	r4, 9638 <att_prepare_write_req+0x84>
	if (!req) {
    9622:	4623      	mov	r3, r4
    9624:	4632      	mov	r2, r6
    9626:	2116      	movs	r1, #22
    9628:	4628      	mov	r0, r5
    962a:	f01b fcee 	bl	2500a <send_err_rsp.part.0>
		return 0;
    962e:	2400      	movs	r4, #0
}
    9630:	4620      	mov	r0, r4
    9632:	b007      	add	sp, #28
    9634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_buf_put(&chan->att->prep_queue, data.buf);
    9638:	6828      	ldr	r0, [r5, #0]
    963a:	9902      	ldr	r1, [sp, #8]
    963c:	3024      	adds	r0, #36	; 0x24
    963e:	f01e fdc4 	bl	281ca <net_buf_put>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_PREPARE_WRITE_RSP, 0);
    9642:	4622      	mov	r2, r4
    9644:	2117      	movs	r1, #23
    9646:	4658      	mov	r0, fp
    9648:	f7ff ff7c 	bl	9544 <bt_att_create_pdu>
    964c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    964e:	b1d8      	cbz	r0, 9688 <att_prepare_write_req+0xd4>
	return net_buf_simple_add(&buf->b, len);
    9650:	2104      	movs	r1, #4
    9652:	3008      	adds	r0, #8
    9654:	f01e fdf8 	bl	28248 <net_buf_simple_add>
    9658:	4606      	mov	r6, r0
	rsp->handle = sys_cpu_to_le16(handle);
    965a:	f8a0 a000 	strh.w	sl, [r0]
	rsp->offset = sys_cpu_to_le16(offset);
    965e:	f8a0 9002 	strh.w	r9, [r0, #2]
    9662:	9802      	ldr	r0, [sp, #8]
    9664:	4639      	mov	r1, r7
    9666:	3008      	adds	r0, #8
    9668:	f01e fdee 	bl	28248 <net_buf_simple_add>
	memcpy(rsp->value, value, len);
    966c:	4641      	mov	r1, r8
    966e:	463a      	mov	r2, r7
    9670:	1d30      	adds	r0, r6, #4
    9672:	f01a fb99 	bl	23da8 <memcpy>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    9676:	9902      	ldr	r1, [sp, #8]
    9678:	4628      	mov	r0, r5
    967a:	f7ff fc71 	bl	8f60 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    967e:	e7d7      	b.n	9630 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    9680:	2412      	movs	r4, #18
    9682:	e7d5      	b.n	9630 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_INVALID_HANDLE;
    9684:	2401      	movs	r4, #1
    9686:	e7d3      	b.n	9630 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_UNLIKELY;
    9688:	240e      	movs	r4, #14
    968a:	e7d1      	b.n	9630 <att_prepare_write_req+0x7c>
    968c:	000090d9 	.word	0x000090d9

00009690 <att_read_group_req>:
{
    9690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    9694:	898c      	ldrh	r4, [r1, #12]
    9696:	3c04      	subs	r4, #4
    9698:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    969a:	2c02      	cmp	r4, #2
{
    969c:	4605      	mov	r5, r0
    969e:	b08c      	sub	sp, #48	; 0x30
    96a0:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    96a2:	d001      	beq.n	96a8 <att_read_group_req+0x18>
    96a4:	2c10      	cmp	r4, #16
    96a6:	d16e      	bne.n	9786 <att_read_group_req+0xf6>
	return net_buf_simple_pull_mem(&buf->b, len);
    96a8:	2104      	movs	r1, #4
    96aa:	3008      	adds	r0, #8
    96ac:	f01e fe44 	bl	28338 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    96b0:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    96b4:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    96b6:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    96b8:	1d01      	adds	r1, r0, #4
    96ba:	4622      	mov	r2, r4
    96bc:	4640      	mov	r0, r8
    96be:	f01a fdea 	bl	24296 <bt_uuid_create>
    96c2:	2800      	cmp	r0, #0
    96c4:	d061      	beq.n	978a <att_read_group_req+0xfa>
	if (!start || !end) {
    96c6:	2e00      	cmp	r6, #0
    96c8:	d03a      	beq.n	9740 <att_read_group_req+0xb0>
    96ca:	2400      	movs	r4, #0
    96cc:	2f00      	cmp	r7, #0
    96ce:	d036      	beq.n	973e <att_read_group_req+0xae>
	if (start > end) {
    96d0:	42b7      	cmp	r7, r6
    96d2:	d335      	bcc.n	9740 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    96d4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    96d8:	a901      	add	r1, sp, #4
    96da:	4640      	mov	r0, r8
    96dc:	f88d 4004 	strb.w	r4, [sp, #4]
    96e0:	f8ad 3006 	strh.w	r3, [sp, #6]
    96e4:	f01a fda9 	bl	2423a <bt_uuid_cmp>
    96e8:	2800      	cmp	r0, #0
    96ea:	d134      	bne.n	9756 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
    96ec:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    96ee:	2214      	movs	r2, #20
    96f0:	2100      	movs	r1, #0
    96f2:	a807      	add	r0, sp, #28
    96f4:	f01a fb63 	bl	23dbe <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    96f8:	2201      	movs	r2, #1
    96fa:	2111      	movs	r1, #17
    96fc:	4620      	mov	r0, r4
    96fe:	f7ff ff21 	bl	9544 <bt_att_create_pdu>
    9702:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    9704:	2800      	cmp	r0, #0
    9706:	d040      	beq.n	978a <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
    9708:	2101      	movs	r1, #1
    970a:	3008      	adds	r0, #8
	data.uuid = uuid;
    970c:	e9cd 5807 	strd	r5, r8, [sp, #28]
    9710:	f01e fd9a 	bl	28248 <net_buf_simple_add>
	data.rsp->len = 0U;
    9714:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    9718:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    971a:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    971c:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    9720:	4a1b      	ldr	r2, [pc, #108]	; (9790 <att_read_group_req+0x100>)
	data.group = NULL;
    9722:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    9726:	4639      	mov	r1, r7
    9728:	4630      	mov	r0, r6
    972a:	f01b f9ea 	bl	24b02 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    972e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9730:	781c      	ldrb	r4, [r3, #0]
    9732:	bb1c      	cbnz	r4, 977c <att_read_group_req+0xec>
		net_buf_unref(data.buf);
    9734:	9809      	ldr	r0, [sp, #36]	; 0x24
    9736:	f014 fb15 	bl	1dd64 <net_buf_unref>
	if (!req) {
    973a:	230a      	movs	r3, #10
    973c:	e018      	b.n	9770 <att_read_group_req+0xe0>
			*err = 0U;
    973e:	463e      	mov	r6, r7
	if (!req) {
    9740:	2301      	movs	r3, #1
    9742:	4632      	mov	r2, r6
    9744:	2110      	movs	r1, #16
    9746:	4628      	mov	r0, r5
    9748:	f01b fc5f 	bl	2500a <send_err_rsp.part.0>
		return 0;
    974c:	2400      	movs	r4, #0
}
    974e:	4620      	mov	r0, r4
    9750:	b00c      	add	sp, #48	; 0x30
    9752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    9756:	f642 0301 	movw	r3, #10241	; 0x2801
    975a:	a907      	add	r1, sp, #28
    975c:	4640      	mov	r0, r8
    975e:	f88d 401c 	strb.w	r4, [sp, #28]
    9762:	f8ad 301e 	strh.w	r3, [sp, #30]
    9766:	f01a fd68 	bl	2423a <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    976a:	2800      	cmp	r0, #0
    976c:	d0be      	beq.n	96ec <att_read_group_req+0x5c>
	if (!req) {
    976e:	2310      	movs	r3, #16
    9770:	4632      	mov	r2, r6
    9772:	2110      	movs	r1, #16
    9774:	4628      	mov	r0, r5
    9776:	f01b fc48 	bl	2500a <send_err_rsp.part.0>
		return 0;
    977a:	e7e8      	b.n	974e <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    977c:	9909      	ldr	r1, [sp, #36]	; 0x24
    977e:	4628      	mov	r0, r5
    9780:	f7ff fbee 	bl	8f60 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    9784:	e7e2      	b.n	974c <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
    9786:	2404      	movs	r4, #4
    9788:	e7e1      	b.n	974e <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
    978a:	240e      	movs	r4, #14
    978c:	e7df      	b.n	974e <att_read_group_req+0xbe>
    978e:	bf00      	nop
    9790:	00008f85 	.word	0x00008f85

00009794 <att_read_mult_req>:
{
    9794:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    9798:	6886      	ldr	r6, [r0, #8]
{
    979a:	b085      	sub	sp, #20
    979c:	4604      	mov	r4, r0
    979e:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
    97a0:	4630      	mov	r0, r6
    97a2:	2101      	movs	r1, #1
    97a4:	f01c f80d 	bl	257c2 <bt_gatt_change_aware>
    97a8:	b3b8      	cbz	r0, 981a <att_read_mult_req+0x86>
	(void)memset(&data, 0, sizeof(data));
    97aa:	2210      	movs	r2, #16
    97ac:	2100      	movs	r1, #0
    97ae:	4668      	mov	r0, sp
    97b0:	f01a fb05 	bl	23dbe <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    97b4:	2200      	movs	r2, #0
    97b6:	210f      	movs	r1, #15
    97b8:	4630      	mov	r0, r6
    97ba:	f7ff fec3 	bl	9544 <bt_att_create_pdu>
    97be:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    97c0:	b368      	cbz	r0, 981e <att_read_mult_req+0x8a>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    97c2:	f8df 9060 	ldr.w	r9, [pc, #96]	; 9824 <att_read_mult_req+0x90>
	data.chan = chan;
    97c6:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
    97c8:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    97cc:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    97d0:	89ab      	ldrh	r3, [r5, #12]
    97d2:	2b01      	cmp	r3, #1
    97d4:	d804      	bhi.n	97e0 <att_read_mult_req+0x4c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    97d6:	9902      	ldr	r1, [sp, #8]
    97d8:	4620      	mov	r0, r4
    97da:	f7ff fbc1 	bl	8f60 <bt_att_chan_send_rsp.constprop.0>
    97de:	e018      	b.n	9812 <att_read_mult_req+0x7e>
    97e0:	4638      	mov	r0, r7
    97e2:	f01e fdb9 	bl	28358 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    97e6:	466b      	mov	r3, sp
    97e8:	464a      	mov	r2, r9
    97ea:	4601      	mov	r1, r0
    97ec:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    97ee:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    97f2:	f01b f986 	bl	24b02 <bt_gatt_foreach_attr>
		if (data.err) {
    97f6:	f89d 300c 	ldrb.w	r3, [sp, #12]
    97fa:	2b00      	cmp	r3, #0
    97fc:	d0e8      	beq.n	97d0 <att_read_mult_req+0x3c>
			net_buf_unref(data.buf);
    97fe:	9802      	ldr	r0, [sp, #8]
    9800:	f014 fab0 	bl	1dd64 <net_buf_unref>
	if (!req) {
    9804:	f89d 300c 	ldrb.w	r3, [sp, #12]
    9808:	4632      	mov	r2, r6
    980a:	210e      	movs	r1, #14
    980c:	4620      	mov	r0, r4
    980e:	f01b fbfc 	bl	2500a <send_err_rsp.part.0>
	return 0;
    9812:	2000      	movs	r0, #0
}
    9814:	b005      	add	sp, #20
    9816:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    981a:	2012      	movs	r0, #18
    981c:	e7fa      	b.n	9814 <att_read_mult_req+0x80>
		return BT_ATT_ERR_UNLIKELY;
    981e:	200e      	movs	r0, #14
    9820:	e7f8      	b.n	9814 <att_read_mult_req+0x80>
    9822:	bf00      	nop
    9824:	00024e9d 	.word	0x00024e9d

00009828 <att_read_rsp>:
{
    9828:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    982c:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
    9830:	4605      	mov	r5, r0
    9832:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    9834:	4640      	mov	r0, r8
    9836:	2101      	movs	r1, #1
{
    9838:	4614      	mov	r4, r2
    983a:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    983c:	f01b ffc1 	bl	257c2 <bt_gatt_change_aware>
    9840:	b388      	cbz	r0, 98a6 <att_read_rsp+0x7e>
	if (!handle) {
    9842:	b396      	cbz	r6, 98aa <att_read_rsp+0x82>
	(void)memset(&data, 0, sizeof(data));
    9844:	2210      	movs	r2, #16
    9846:	2100      	movs	r1, #0
    9848:	4668      	mov	r0, sp
    984a:	f01a fab8 	bl	23dbe <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    984e:	2200      	movs	r2, #0
    9850:	4621      	mov	r1, r4
    9852:	4640      	mov	r0, r8
    9854:	f7ff fe76 	bl	9544 <bt_att_create_pdu>
    9858:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    985a:	b340      	cbz	r0, 98ae <att_read_rsp+0x86>
	data.offset = offset;
    985c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    9860:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    9864:	2301      	movs	r3, #1
    9866:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    986a:	4a12      	ldr	r2, [pc, #72]	; (98b4 <att_read_rsp+0x8c>)
	data.chan = chan;
    986c:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    986e:	466b      	mov	r3, sp
    9870:	4631      	mov	r1, r6
    9872:	4630      	mov	r0, r6
    9874:	f01b f945 	bl	24b02 <bt_gatt_foreach_attr>
	if (data.err) {
    9878:	f89d 400c 	ldrb.w	r4, [sp, #12]
    987c:	b174      	cbz	r4, 989c <att_read_rsp+0x74>
		net_buf_unref(data.buf);
    987e:	9802      	ldr	r0, [sp, #8]
    9880:	f014 fa70 	bl	1dd64 <net_buf_unref>
	if (!req) {
    9884:	f89d 300c 	ldrb.w	r3, [sp, #12]
    9888:	4632      	mov	r2, r6
    988a:	4639      	mov	r1, r7
    988c:	4628      	mov	r0, r5
    988e:	f01b fbbc 	bl	2500a <send_err_rsp.part.0>
		return 0;
    9892:	2400      	movs	r4, #0
}
    9894:	4620      	mov	r0, r4
    9896:	b004      	add	sp, #16
    9898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    989c:	9902      	ldr	r1, [sp, #8]
    989e:	4628      	mov	r0, r5
    98a0:	f7ff fb5e 	bl	8f60 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    98a4:	e7f6      	b.n	9894 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    98a6:	2412      	movs	r4, #18
    98a8:	e7f4      	b.n	9894 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
    98aa:	2401      	movs	r4, #1
    98ac:	e7f2      	b.n	9894 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    98ae:	240e      	movs	r4, #14
    98b0:	e7f0      	b.n	9894 <att_read_rsp+0x6c>
    98b2:	bf00      	nop
    98b4:	00024e9d 	.word	0x00024e9d

000098b8 <att_read_type_req>:
{
    98b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    98bc:	898c      	ldrh	r4, [r1, #12]
    98be:	3c04      	subs	r4, #4
    98c0:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    98c2:	2c02      	cmp	r4, #2
{
    98c4:	4605      	mov	r5, r0
    98c6:	b08c      	sub	sp, #48	; 0x30
    98c8:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    98ca:	d001      	beq.n	98d0 <att_read_type_req+0x18>
    98cc:	2c10      	cmp	r4, #16
    98ce:	d14f      	bne.n	9970 <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
    98d0:	2104      	movs	r1, #4
    98d2:	3008      	adds	r0, #8
    98d4:	f01e fd30 	bl	28338 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    98d8:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    98dc:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    98de:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    98e0:	1d01      	adds	r1, r0, #4
    98e2:	4622      	mov	r2, r4
    98e4:	4640      	mov	r0, r8
    98e6:	f01a fcd6 	bl	24296 <bt_uuid_create>
    98ea:	b188      	cbz	r0, 9910 <att_read_type_req+0x58>
	if (!start || !end) {
    98ec:	b19e      	cbz	r6, 9916 <att_read_type_req+0x5e>
    98ee:	b18f      	cbz	r7, 9914 <att_read_type_req+0x5c>
	if (start > end) {
    98f0:	42be      	cmp	r6, r7
    98f2:	d810      	bhi.n	9916 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    98f4:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    98f6:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    98f8:	2100      	movs	r1, #0
    98fa:	eb0d 0002 	add.w	r0, sp, r2
    98fe:	f01a fa5e 	bl	23dbe <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    9902:	2201      	movs	r2, #1
    9904:	2109      	movs	r1, #9
    9906:	4620      	mov	r0, r4
    9908:	f7ff fe1c 	bl	9544 <bt_att_create_pdu>
    990c:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    990e:	b968      	cbnz	r0, 992c <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
    9910:	240e      	movs	r4, #14
    9912:	e007      	b.n	9924 <att_read_type_req+0x6c>
			*err = 0U;
    9914:	463e      	mov	r6, r7
	if (!req) {
    9916:	2301      	movs	r3, #1
    9918:	4632      	mov	r2, r6
    991a:	2108      	movs	r1, #8
    991c:	4628      	mov	r0, r5
    991e:	f01b fb74 	bl	2500a <send_err_rsp.part.0>
		return 0;
    9922:	2400      	movs	r4, #0
}
    9924:	4620      	mov	r0, r4
    9926:	b00c      	add	sp, #48	; 0x30
    9928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    992c:	2101      	movs	r1, #1
    992e:	3008      	adds	r0, #8
	data.uuid = uuid;
    9930:	e9cd 5806 	strd	r5, r8, [sp, #24]
    9934:	f01e fc88 	bl	28248 <net_buf_simple_add>
	data.rsp->len = 0U;
    9938:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    993c:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    993e:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    9940:	4a0c      	ldr	r2, [pc, #48]	; (9974 <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
    9942:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    9946:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    9948:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    994c:	4630      	mov	r0, r6
    994e:	ab06      	add	r3, sp, #24
    9950:	f01b f8d7 	bl	24b02 <bt_gatt_foreach_attr>
	if (data.err) {
    9954:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    9958:	b12c      	cbz	r4, 9966 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    995a:	9808      	ldr	r0, [sp, #32]
    995c:	f014 fa02 	bl	1dd64 <net_buf_unref>
	if (!req) {
    9960:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    9964:	e7d8      	b.n	9918 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    9966:	9908      	ldr	r1, [sp, #32]
    9968:	4628      	mov	r0, r5
    996a:	f7ff faf9 	bl	8f60 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    996e:	e7d9      	b.n	9924 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
    9970:	2404      	movs	r4, #4
    9972:	e7d7      	b.n	9924 <att_read_type_req+0x6c>
    9974:	00009031 	.word	0x00009031

00009978 <att_find_type_req>:
{
    9978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    997c:	4688      	mov	r8, r1
    997e:	b086      	sub	sp, #24
    9980:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
    9982:	2106      	movs	r1, #6
    9984:	f108 0008 	add.w	r0, r8, #8
    9988:	f01e fcd6 	bl	28338 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    998c:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
    998e:	b317      	cbz	r7, 99d6 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
    9990:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
    9994:	f1b9 0f00 	cmp.w	r9, #0
    9998:	d01c      	beq.n	99d4 <att_find_type_req+0x5c>
	if (start > end) {
    999a:	45b9      	cmp	r9, r7
    999c:	d31b      	bcc.n	99d6 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
    999e:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    99a0:	f8ad 3002 	strh.w	r3, [sp, #2]
    99a4:	2400      	movs	r4, #0
    99a6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    99aa:	a901      	add	r1, sp, #4
    99ac:	4668      	mov	r0, sp
	value = buf->data;
    99ae:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    99b2:	f88d 4000 	strb.w	r4, [sp]
    99b6:	f88d 4004 	strb.w	r4, [sp, #4]
    99ba:	f8ad 3006 	strh.w	r3, [sp, #6]
    99be:	f01a fc3c 	bl	2423a <bt_uuid_cmp>
    99c2:	4606      	mov	r6, r0
    99c4:	b190      	cbz	r0, 99ec <att_find_type_req+0x74>
	if (!req) {
    99c6:	230a      	movs	r3, #10
    99c8:	463a      	mov	r2, r7
    99ca:	2106      	movs	r1, #6
    99cc:	4628      	mov	r0, r5
    99ce:	f01b fb1c 	bl	2500a <send_err_rsp.part.0>
		return 0;
    99d2:	e007      	b.n	99e4 <att_find_type_req+0x6c>
			*err = 0U;
    99d4:	464f      	mov	r7, r9
	if (!req) {
    99d6:	2301      	movs	r3, #1
    99d8:	463a      	mov	r2, r7
    99da:	2106      	movs	r1, #6
    99dc:	4628      	mov	r0, r5
    99de:	f01b fb14 	bl	2500a <send_err_rsp.part.0>
		return 0;
    99e2:	2400      	movs	r4, #0
}
    99e4:	4620      	mov	r0, r4
    99e6:	b006      	add	sp, #24
    99e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    99ec:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
    99f0:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    99f4:	4601      	mov	r1, r0
    99f6:	2214      	movs	r2, #20
    99f8:	a801      	add	r0, sp, #4
    99fa:	f01a f9e0 	bl	23dbe <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    99fe:	4632      	mov	r2, r6
    9a00:	2107      	movs	r1, #7
    9a02:	4640      	mov	r0, r8
    9a04:	f7ff fd9e 	bl	9544 <bt_att_create_pdu>
    9a08:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    9a0a:	b1d8      	cbz	r0, 9a44 <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    9a0c:	230a      	movs	r3, #10
    9a0e:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    9a12:	4a0d      	ldr	r2, [pc, #52]	; (9a48 <att_find_type_req+0xd0>)
	data.value_len = value_len;
    9a14:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    9a18:	ab01      	add	r3, sp, #4
    9a1a:	4649      	mov	r1, r9
    9a1c:	4638      	mov	r0, r7
	data.value = value;
    9a1e:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
    9a22:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    9a24:	f01b f86d 	bl	24b02 <bt_gatt_foreach_attr>
	if (data.err) {
    9a28:	f89d 4015 	ldrb.w	r4, [sp, #21]
    9a2c:	b12c      	cbz	r4, 9a3a <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    9a2e:	9802      	ldr	r0, [sp, #8]
    9a30:	f014 f998 	bl	1dd64 <net_buf_unref>
	if (!req) {
    9a34:	f89d 3015 	ldrb.w	r3, [sp, #21]
    9a38:	e7ce      	b.n	99d8 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    9a3a:	9902      	ldr	r1, [sp, #8]
    9a3c:	4628      	mov	r0, r5
    9a3e:	f7ff fa8f 	bl	8f60 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    9a42:	e7cf      	b.n	99e4 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    9a44:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    9a46:	e7cd      	b.n	99e4 <att_find_type_req+0x6c>
    9a48:	00008d21 	.word	0x00008d21

00009a4c <att_find_info_req>:
{
    9a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    9a4e:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    9a50:	881e      	ldrh	r6, [r3, #0]
{
    9a52:	b085      	sub	sp, #20
    9a54:	4605      	mov	r5, r0
	if (!start || !end) {
    9a56:	b19e      	cbz	r6, 9a80 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    9a58:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    9a5a:	b184      	cbz	r4, 9a7e <att_find_info_req+0x32>
	if (start > end) {
    9a5c:	42a6      	cmp	r6, r4
    9a5e:	d80f      	bhi.n	9a80 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    9a60:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
    9a62:	2210      	movs	r2, #16
    9a64:	2100      	movs	r1, #0
    9a66:	4668      	mov	r0, sp
    9a68:	f01a f9a9 	bl	23dbe <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    9a6c:	2200      	movs	r2, #0
    9a6e:	2105      	movs	r1, #5
    9a70:	4638      	mov	r0, r7
    9a72:	f7ff fd67 	bl	9544 <bt_att_create_pdu>
    9a76:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    9a78:	b958      	cbnz	r0, 9a92 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    9a7a:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    9a7c:	e007      	b.n	9a8e <att_find_info_req+0x42>
			*err = 0U;
    9a7e:	4626      	mov	r6, r4
	if (!req) {
    9a80:	2301      	movs	r3, #1
    9a82:	4632      	mov	r2, r6
    9a84:	2104      	movs	r1, #4
    9a86:	4628      	mov	r0, r5
    9a88:	f01b fabf 	bl	2500a <send_err_rsp.part.0>
	return 0;
    9a8c:	2000      	movs	r0, #0
}
    9a8e:	b005      	add	sp, #20
    9a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    9a92:	4621      	mov	r1, r4
    9a94:	4a08      	ldr	r2, [pc, #32]	; (9ab8 <att_find_info_req+0x6c>)
	data.chan = chan;
    9a96:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    9a98:	466b      	mov	r3, sp
    9a9a:	4630      	mov	r0, r6
    9a9c:	f01b f831 	bl	24b02 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    9aa0:	9c02      	ldr	r4, [sp, #8]
    9aa2:	b924      	cbnz	r4, 9aae <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    9aa4:	9801      	ldr	r0, [sp, #4]
    9aa6:	f014 f95d 	bl	1dd64 <net_buf_unref>
	if (!req) {
    9aaa:	230a      	movs	r3, #10
    9aac:	e7e9      	b.n	9a82 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    9aae:	9901      	ldr	r1, [sp, #4]
    9ab0:	4628      	mov	r0, r5
    9ab2:	f7ff fa55 	bl	8f60 <bt_att_chan_send_rsp.constprop.0>
    9ab6:	e7e9      	b.n	9a8c <att_find_info_req+0x40>
    9ab8:	00024b19 	.word	0x00024b19

00009abc <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    9abc:	b513      	push	{r0, r1, r4, lr}
    9abe:	4602      	mov	r2, r0
    9ac0:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    9ac2:	4808      	ldr	r0, [pc, #32]	; (9ae4 <bt_att_req_alloc+0x28>)
    9ac4:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
    9ac6:	2400      	movs	r4, #0
    9ac8:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    9aca:	f016 f8b7 	bl	1fc3c <k_mem_slab_alloc>
    9ace:	4601      	mov	r1, r0
    9ad0:	b930      	cbnz	r0, 9ae0 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
    9ad2:	9801      	ldr	r0, [sp, #4]
    9ad4:	2210      	movs	r2, #16
    9ad6:	f01a f972 	bl	23dbe <memset>

	return req;
    9ada:	9801      	ldr	r0, [sp, #4]
}
    9adc:	b002      	add	sp, #8
    9ade:	bd10      	pop	{r4, pc}
		return NULL;
    9ae0:	4620      	mov	r0, r4
    9ae2:	e7fb      	b.n	9adc <bt_att_req_alloc+0x20>
    9ae4:	20001098 	.word	0x20001098

00009ae8 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    9ae8:	b507      	push	{r0, r1, r2, lr}
    9aea:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
    9aec:	6880      	ldr	r0, [r0, #8]
    9aee:	b120      	cbz	r0, 9afa <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
    9af0:	f014 f938 	bl	1dd64 <net_buf_unref>
		req->buf = NULL;
    9af4:	9b01      	ldr	r3, [sp, #4]
    9af6:	2200      	movs	r2, #0
    9af8:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
    9afa:	4803      	ldr	r0, [pc, #12]	; (9b08 <bt_att_req_free+0x20>)
    9afc:	a901      	add	r1, sp, #4
    9afe:	f01e ff71 	bl	289e4 <k_mem_slab_free>
}
    9b02:	b003      	add	sp, #12
    9b04:	f85d fb04 	ldr.w	pc, [sp], #4
    9b08:	20001098 	.word	0x20001098

00009b0c <att_handle_rsp>:
{
    9b0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9b10:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
    9b12:	f500 7088 	add.w	r0, r0, #272	; 0x110
{
    9b16:	460f      	mov	r7, r1
    9b18:	4690      	mov	r8, r2
    9b1a:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
    9b1c:	f01f f961 	bl	28de2 <k_work_cancel_delayable>
	if (!chan->req) {
    9b20:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
    9b24:	b9e5      	cbnz	r5, 9b60 <att_handle_rsp+0x54>
    9b26:	4919      	ldr	r1, [pc, #100]	; (9b8c <att_handle_rsp+0x80>)
    9b28:	4819      	ldr	r0, [pc, #100]	; (9b90 <att_handle_rsp+0x84>)
    9b2a:	1a40      	subs	r0, r0, r1
    9b2c:	08c0      	lsrs	r0, r0, #3
		BT_WARN("No pending ATT request");
    9b2e:	0180      	lsls	r0, r0, #6
    9b30:	f040 0102 	orr.w	r1, r0, #2
    9b34:	4817      	ldr	r0, [pc, #92]	; (9b94 <att_handle_rsp+0x88>)
    9b36:	f017 ffd8 	bl	21aea <log_0>
	bt_att_func_t func = NULL;
    9b3a:	46aa      	mov	sl, r5
	att_req_send_process(chan->att);
    9b3c:	6820      	ldr	r0, [r4, #0]
    9b3e:	f01b fa14 	bl	24f6a <att_req_send_process>
	if (func) {
    9b42:	f1ba 0f00 	cmp.w	sl, #0
    9b46:	d007      	beq.n	9b58 <att_handle_rsp+0x4c>
		func(chan->att->conn, err, pdu, len, params);
    9b48:	6820      	ldr	r0, [r4, #0]
    9b4a:	f8cd 9000 	str.w	r9, [sp]
    9b4e:	6800      	ldr	r0, [r0, #0]
    9b50:	4643      	mov	r3, r8
    9b52:	463a      	mov	r2, r7
    9b54:	4631      	mov	r1, r6
    9b56:	47d0      	blx	sl
}
    9b58:	2000      	movs	r0, #0
    9b5a:	b003      	add	sp, #12
    9b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
    9b60:	4b0d      	ldr	r3, [pc, #52]	; (9b98 <att_handle_rsp+0x8c>)
    9b62:	429d      	cmp	r5, r3
    9b64:	f04f 0b00 	mov.w	fp, #0
    9b68:	d103      	bne.n	9b72 <att_handle_rsp+0x66>
		chan->req = NULL;
    9b6a:	f8c4 b0f4 	str.w	fp, [r4, #244]	; 0xf4
	bt_att_func_t func = NULL;
    9b6e:	46da      	mov	sl, fp
		goto process;
    9b70:	e7e4      	b.n	9b3c <att_handle_rsp+0x30>
	func = chan->req->func;
    9b72:	f8d5 a004 	ldr.w	sl, [r5, #4]
	chan->req->func = NULL;
    9b76:	f8c5 b004 	str.w	fp, [r5, #4]
	bt_att_req_free(chan->req);
    9b7a:	4628      	mov	r0, r5
	params = chan->req->user_data;
    9b7c:	f8d5 900c 	ldr.w	r9, [r5, #12]
	bt_att_req_free(chan->req);
    9b80:	f7ff ffb2 	bl	9ae8 <bt_att_req_free>
	chan->req = NULL;
    9b84:	f8c4 b0f4 	str.w	fp, [r4, #244]	; 0xf4
    9b88:	e7d8      	b.n	9b3c <att_handle_rsp+0x30>
    9b8a:	bf00      	nop
    9b8c:	00029870 	.word	0x00029870
    9b90:	00029880 	.word	0x00029880
    9b94:	0002c354 	.word	0x0002c354
    9b98:	20002198 	.word	0x20002198

00009b9c <bt_att_disconnected>:
{
    9b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
    9b9e:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
    9ba2:	b085      	sub	sp, #20
    9ba4:	4604      	mov	r4, r0
	if (!att_chan->att) {
    9ba6:	2d00      	cmp	r5, #0
    9ba8:	d056      	beq.n	9c58 <bt_att_disconnected+0xbc>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
    9baa:	f500 719e 	add.w	r1, r0, #316	; 0x13c
    9bae:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    9bb2:	f01b f8b4 	bl	24d1e <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
    9bb6:	f1a4 0608 	sub.w	r6, r4, #8
    9bba:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
    9bbe:	2200      	movs	r2, #0
    9bc0:	2300      	movs	r3, #0
    9bc2:	4638      	mov	r0, r7
    9bc4:	f01e fa87 	bl	280d6 <net_buf_get>
    9bc8:	4602      	mov	r2, r0
    9bca:	bb50      	cbnz	r0, 9c22 <bt_att_disconnected+0x86>
	if (chan->req) {
    9bcc:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
    9bd0:	b123      	cbz	r3, 9bdc <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
    9bd2:	4601      	mov	r1, r0
    9bd4:	230e      	movs	r3, #14
    9bd6:	4630      	mov	r0, r6
    9bd8:	f7ff ff98 	bl	9b0c <att_handle_rsp>
	chan->att = NULL;
    9bdc:	2300      	movs	r3, #0
    9bde:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
    9be2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    9be4:	2b00      	cmp	r3, #0
    9be6:	d137      	bne.n	9c58 <bt_att_disconnected+0xbc>
	att_reset(att);
    9be8:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->prep_queue, K_NO_WAIT))) {
    9bea:	9803      	ldr	r0, [sp, #12]
    9bec:	2200      	movs	r2, #0
    9bee:	2300      	movs	r3, #0
    9bf0:	3024      	adds	r0, #36	; 0x24
    9bf2:	f01e fa70 	bl	280d6 <net_buf_get>
    9bf6:	b9b8      	cbnz	r0, 9c28 <bt_att_disconnected+0x8c>
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    9bf8:	9803      	ldr	r0, [sp, #12]
    9bfa:	2200      	movs	r2, #0
    9bfc:	2300      	movs	r3, #0
    9bfe:	300c      	adds	r0, #12
    9c00:	f01e fa69 	bl	280d6 <net_buf_get>
    9c04:	b998      	cbnz	r0, 9c2e <bt_att_disconnected+0x92>
	att->conn = NULL;
    9c06:	9a03      	ldr	r2, [sp, #12]
	return list->head;
    9c08:	6855      	ldr	r5, [r2, #4]
    9c0a:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    9c0c:	b995      	cbnz	r5, 9c34 <bt_att_disconnected+0x98>
	k_mem_slab_free(&att_slab, (void **)&att);
    9c0e:	4813      	ldr	r0, [pc, #76]	; (9c5c <bt_att_disconnected+0xc0>)
    9c10:	a903      	add	r1, sp, #12
    9c12:	f01e fee7 	bl	289e4 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
    9c16:	6820      	ldr	r0, [r4, #0]
}
    9c18:	b005      	add	sp, #20
    9c1a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_gatt_disconnected(ch->chan.conn);
    9c1e:	f001 bbdd 	b.w	b3dc <bt_gatt_disconnected>
		net_buf_unref(buf);
    9c22:	f014 f89f 	bl	1dd64 <net_buf_unref>
    9c26:	e7ca      	b.n	9bbe <bt_att_disconnected+0x22>
		net_buf_unref(buf);
    9c28:	f014 f89c 	bl	1dd64 <net_buf_unref>
    9c2c:	e7dd      	b.n	9bea <bt_att_disconnected+0x4e>
		net_buf_unref(buf);
    9c2e:	f014 f899 	bl	1dd64 <net_buf_unref>
    9c32:	e7e1      	b.n	9bf8 <bt_att_disconnected+0x5c>
	return node->next;
    9c34:	682e      	ldr	r6, [r5, #0]
		if (req->func) {
    9c36:	686f      	ldr	r7, [r5, #4]
    9c38:	b137      	cbz	r7, 9c48 <bt_att_disconnected+0xac>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
    9c3a:	68eb      	ldr	r3, [r5, #12]
    9c3c:	9300      	str	r3, [sp, #0]
    9c3e:	2300      	movs	r3, #0
    9c40:	461a      	mov	r2, r3
    9c42:	210e      	movs	r1, #14
    9c44:	4618      	mov	r0, r3
    9c46:	47b8      	blx	r7
		bt_att_req_free(req);
    9c48:	4628      	mov	r0, r5
    9c4a:	f7ff ff4d 	bl	9ae8 <bt_att_req_free>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    9c4e:	2e00      	cmp	r6, #0
    9c50:	d0dd      	beq.n	9c0e <bt_att_disconnected+0x72>
    9c52:	4635      	mov	r5, r6
    9c54:	6836      	ldr	r6, [r6, #0]
    9c56:	e7ee      	b.n	9c36 <bt_att_disconnected+0x9a>
}
    9c58:	b005      	add	sp, #20
    9c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9c5c:	20001060 	.word	0x20001060

00009c60 <att_timeout>:
    9c60:	4b08      	ldr	r3, [pc, #32]	; (9c84 <att_timeout+0x24>)
    9c62:	4909      	ldr	r1, [pc, #36]	; (9c88 <att_timeout+0x28>)
{
    9c64:	b510      	push	{r4, lr}
    9c66:	1ac9      	subs	r1, r1, r3
    9c68:	08c9      	lsrs	r1, r1, #3
	BT_ERR("ATT Timeout");
    9c6a:	0189      	lsls	r1, r1, #6
{
    9c6c:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    9c6e:	f041 0101 	orr.w	r1, r1, #1
    9c72:	4806      	ldr	r0, [pc, #24]	; (9c8c <att_timeout+0x2c>)
    9c74:	f017 ff39 	bl	21aea <log_0>
	bt_att_disconnected(&chan->chan.chan);
    9c78:	f5a4 7084 	sub.w	r0, r4, #264	; 0x108
}
    9c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
    9c80:	f7ff bf8c 	b.w	9b9c <bt_att_disconnected>
    9c84:	00029870 	.word	0x00029870
    9c88:	00029880 	.word	0x00029880
    9c8c:	0002c36b 	.word	0x0002c36b

00009c90 <db_hash_store>:

static void db_hash_store(void)
{
	int err;

	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
    9c90:	490a      	ldr	r1, [pc, #40]	; (9cbc <db_hash_store+0x2c>)
    9c92:	480b      	ldr	r0, [pc, #44]	; (9cc0 <db_hash_store+0x30>)
{
    9c94:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
    9c96:	2210      	movs	r2, #16
    9c98:	f7f9 ff70 	bl	3b7c <settings_save_one>
	if (err) {
    9c9c:	4601      	mov	r1, r0
    9c9e:	b158      	cbz	r0, 9cb8 <db_hash_store+0x28>
    9ca0:	4b08      	ldr	r3, [pc, #32]	; (9cc4 <db_hash_store+0x34>)
    9ca2:	4a09      	ldr	r2, [pc, #36]	; (9cc8 <db_hash_store+0x38>)
		BT_ERR("Failed to save Database Hash (err %d)", err);
    9ca4:	4809      	ldr	r0, [pc, #36]	; (9ccc <db_hash_store+0x3c>)
    9ca6:	1ad2      	subs	r2, r2, r3
    9ca8:	08d2      	lsrs	r2, r2, #3
    9caa:	0192      	lsls	r2, r2, #6
	}

	BT_DBG("Database Hash stored");
}
    9cac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
    9cb0:	f042 0201 	orr.w	r2, r2, #1
    9cb4:	f017 bf26 	b.w	21b04 <log_1>
}
    9cb8:	bd08      	pop	{r3, pc}
    9cba:	bf00      	nop
    9cbc:	200016e8 	.word	0x200016e8
    9cc0:	0002c37e 	.word	0x0002c37e
    9cc4:	00029870 	.word	0x00029870
    9cc8:	00029958 	.word	0x00029958
    9ccc:	0002c386 	.word	0x0002c386

00009cd0 <db_hash_set>:

SETTINGS_STATIC_HANDLER_DEFINE(bt_cf, "bt/cf", NULL, cf_set, NULL, NULL);

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
    9cd0:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
    9cd2:	490b      	ldr	r1, [pc, #44]	; (9d00 <db_hash_set+0x30>)
{
    9cd4:	4614      	mov	r4, r2
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
    9cd6:	4618      	mov	r0, r3
    9cd8:	2210      	movs	r2, #16
    9cda:	47a0      	blx	r4
	if (len < 0) {
    9cdc:	1e04      	subs	r4, r0, #0
    9cde:	da0c      	bge.n	9cfa <db_hash_set+0x2a>
    9ce0:	4a08      	ldr	r2, [pc, #32]	; (9d04 <db_hash_set+0x34>)
    9ce2:	4b09      	ldr	r3, [pc, #36]	; (9d08 <db_hash_set+0x38>)
		BT_ERR("Failed to decode value (err %zd)", len);
    9ce4:	4809      	ldr	r0, [pc, #36]	; (9d0c <db_hash_set+0x3c>)
    9ce6:	1ad2      	subs	r2, r2, r3
    9ce8:	08d2      	lsrs	r2, r2, #3
    9cea:	0192      	lsls	r2, r2, #6
    9cec:	f042 0201 	orr.w	r2, r2, #1
    9cf0:	4621      	mov	r1, r4
    9cf2:	f017 ff07 	bl	21b04 <log_1>

	BT_HEXDUMP_DBG(db_hash.stored_hash, sizeof(db_hash.stored_hash),
		       "Stored Hash: ");

	return 0;
}
    9cf6:	4620      	mov	r0, r4
    9cf8:	bd10      	pop	{r4, pc}
	return 0;
    9cfa:	2400      	movs	r4, #0
    9cfc:	e7fb      	b.n	9cf6 <db_hash_set+0x26>
    9cfe:	bf00      	nop
    9d00:	200016f8 	.word	0x200016f8
    9d04:	00029958 	.word	0x00029958
    9d08:	00029870 	.word	0x00029870
    9d0c:	0002c3ac 	.word	0x0002c3ac

00009d10 <find_cf_cfg>:
{
    9d10:	b537      	push	{r0, r1, r2, r4, r5, lr}
    9d12:	4d0d      	ldr	r5, [pc, #52]	; (9d48 <find_cf_cfg+0x38>)
		if (!conn) {
    9d14:	4604      	mov	r4, r0
    9d16:	b960      	cbnz	r0, 9d32 <find_cf_cfg+0x22>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    9d18:	9000      	str	r0, [sp, #0]
    9d1a:	4669      	mov	r1, sp
    9d1c:	f8cd 0003 	str.w	r0, [sp, #3]
    9d20:	1c68      	adds	r0, r5, #1
    9d22:	f01b fb5f 	bl	253e4 <bt_addr_le_cmp>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    9d26:	2800      	cmp	r0, #0
    9d28:	bf08      	it	eq
    9d2a:	462c      	moveq	r4, r5
}
    9d2c:	4620      	mov	r0, r4
    9d2e:	b003      	add	sp, #12
    9d30:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    9d32:	462a      	mov	r2, r5
    9d34:	f812 1b01 	ldrb.w	r1, [r2], #1
    9d38:	f01a fdb9 	bl	248ae <bt_conn_is_peer_addr_le>
	return NULL;
    9d3c:	2800      	cmp	r0, #0
    9d3e:	bf14      	ite	ne
    9d40:	462c      	movne	r4, r5
    9d42:	2400      	moveq	r4, #0
    9d44:	e7f2      	b.n	9d2c <find_cf_cfg+0x1c>
    9d46:	bf00      	nop
    9d48:	200021b0 	.word	0x200021b0

00009d4c <find_sc_cfg>:
{
    9d4c:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
    9d4e:	4c06      	ldr	r4, [pc, #24]	; (9d68 <find_sc_cfg+0x1c>)
    9d50:	7823      	ldrb	r3, [r4, #0]
    9d52:	4283      	cmp	r3, r0
    9d54:	d103      	bne.n	9d5e <find_sc_cfg+0x12>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
    9d56:	1c60      	adds	r0, r4, #1
    9d58:	f01b fb44 	bl	253e4 <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
    9d5c:	b108      	cbz	r0, 9d62 <find_sc_cfg+0x16>
	return NULL;
    9d5e:	2000      	movs	r0, #0
}
    9d60:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
    9d62:	4620      	mov	r0, r4
    9d64:	e7fc      	b.n	9d60 <find_sc_cfg+0x14>
    9d66:	bf00      	nop
    9d68:	200036d2 	.word	0x200036d2

00009d6c <bt_gatt_attr_write_ccc>:
{
    9d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9d70:	461f      	mov	r7, r3
    9d72:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
    9d76:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
    9d7a:	4604      	mov	r4, r0
    9d7c:	4688      	mov	r8, r1
	if (offset) {
    9d7e:	2b00      	cmp	r3, #0
    9d80:	d147      	bne.n	9e12 <bt_gatt_attr_write_ccc+0xa6>
	if (!len || len > sizeof(uint16_t)) {
    9d82:	1e7b      	subs	r3, r7, #1
    9d84:	2b01      	cmp	r3, #1
    9d86:	d847      	bhi.n	9e18 <bt_gatt_attr_write_ccc+0xac>
		value = *(uint8_t *)buf;
    9d88:	7816      	ldrb	r6, [r2, #0]
	if (len < sizeof(uint16_t)) {
    9d8a:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
    9d8c:	4649      	mov	r1, r9
    9d8e:	bf14      	ite	ne
    9d90:	8816      	ldrhne	r6, [r2, #0]
		value = *(uint8_t *)buf;
    9d92:	b2b6      	uxtheq	r6, r6
	cfg = find_ccc_cfg(conn, ccc);
    9d94:	f01b fb37 	bl	25406 <find_ccc_cfg>
	if (!cfg) {
    9d98:	4605      	mov	r5, r0
    9d9a:	b9e0      	cbnz	r0, 9dd6 <bt_gatt_attr_write_ccc+0x6a>
		if (!value) {
    9d9c:	b916      	cbnz	r6, 9da4 <bt_gatt_attr_write_ccc+0x38>
			return len;
    9d9e:	4638      	mov	r0, r7
}
    9da0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
    9da4:	4649      	mov	r1, r9
    9da6:	f01b fb2e 	bl	25406 <find_ccc_cfg>
		if (!cfg) {
    9daa:	4605      	mov	r5, r0
    9dac:	b960      	cbnz	r0, 9dc8 <bt_gatt_attr_write_ccc+0x5c>
    9dae:	4b1c      	ldr	r3, [pc, #112]	; (9e20 <bt_gatt_attr_write_ccc+0xb4>)
    9db0:	491c      	ldr	r1, [pc, #112]	; (9e24 <bt_gatt_attr_write_ccc+0xb8>)
			BT_WARN("No space to store CCC cfg");
    9db2:	481d      	ldr	r0, [pc, #116]	; (9e28 <bt_gatt_attr_write_ccc+0xbc>)
    9db4:	1ac9      	subs	r1, r1, r3
    9db6:	08c9      	lsrs	r1, r1, #3
    9db8:	0189      	lsls	r1, r1, #6
    9dba:	f041 0102 	orr.w	r1, r1, #2
    9dbe:	f017 fe94 	bl	21aea <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    9dc2:	f06f 0010 	mvn.w	r0, #16
    9dc6:	e7eb      	b.n	9da0 <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    9dc8:	f104 0188 	add.w	r1, r4, #136	; 0x88
    9dcc:	3001      	adds	r0, #1
    9dce:	f01b fb40 	bl	25452 <bt_addr_le_copy>
		cfg->id = conn->id;
    9dd2:	7a23      	ldrb	r3, [r4, #8]
    9dd4:	702b      	strb	r3, [r5, #0]
	if (ccc->cfg_write) {
    9dd6:	f8d9 3010 	ldr.w	r3, [r9, #16]
    9dda:	b973      	cbnz	r3, 9dfa <bt_gatt_attr_write_ccc+0x8e>
	if (cfg->value != ccc->value) {
    9ddc:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
    9de0:	812e      	strh	r6, [r5, #8]
	if (cfg->value != ccc->value) {
    9de2:	42b3      	cmp	r3, r6
    9de4:	d003      	beq.n	9dee <bt_gatt_attr_write_ccc+0x82>
		gatt_ccc_changed(attr, ccc);
    9de6:	4649      	mov	r1, r9
    9de8:	4640      	mov	r0, r8
    9dea:	f01b fa6d 	bl	252c8 <gatt_ccc_changed>
	if (!value) {
    9dee:	2e00      	cmp	r6, #0
    9df0:	d1d5      	bne.n	9d9e <bt_gatt_attr_write_ccc+0x32>
		clear_ccc_cfg(cfg);
    9df2:	4628      	mov	r0, r5
    9df4:	f01b fb30 	bl	25458 <clear_ccc_cfg>
    9df8:	e7d1      	b.n	9d9e <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
    9dfa:	4632      	mov	r2, r6
    9dfc:	4641      	mov	r1, r8
    9dfe:	4620      	mov	r0, r4
    9e00:	4798      	blx	r3
		if (write < 0) {
    9e02:	2800      	cmp	r0, #0
    9e04:	dbcc      	blt.n	9da0 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
    9e06:	1e44      	subs	r4, r0, #1
    9e08:	2c01      	cmp	r4, #1
    9e0a:	d9e7      	bls.n	9ddc <bt_gatt_attr_write_ccc+0x70>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
    9e0c:	f06f 000d 	mvn.w	r0, #13
    9e10:	e7c6      	b.n	9da0 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    9e12:	f06f 0006 	mvn.w	r0, #6
    9e16:	e7c3      	b.n	9da0 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    9e18:	f06f 000c 	mvn.w	r0, #12
    9e1c:	e7c0      	b.n	9da0 <bt_gatt_attr_write_ccc+0x34>
    9e1e:	bf00      	nop
    9e20:	00029870 	.word	0x00029870
    9e24:	00029958 	.word	0x00029958
    9e28:	0002c3cd 	.word	0x0002c3cd

00009e2c <sc_store>:
{
    9e2c:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
    9e2e:	4605      	mov	r5, r0
{
    9e30:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
    9e32:	f815 2b01 	ldrb.w	r2, [r5], #1
{
    9e36:	4604      	mov	r4, r0
	if (cfg->id) {
    9e38:	b1fa      	cbz	r2, 9e7a <sc_store+0x4e>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
    9e3a:	ae02      	add	r6, sp, #8
    9e3c:	2104      	movs	r1, #4
    9e3e:	4630      	mov	r0, r6
    9e40:	f017 f95e 	bl	21100 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
    9e44:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
    9e46:	4a0e      	ldr	r2, [pc, #56]	; (9e80 <sc_store+0x54>)
    9e48:	462b      	mov	r3, r5
    9e4a:	2124      	movs	r1, #36	; 0x24
    9e4c:	a803      	add	r0, sp, #12
    9e4e:	f7fb fa49 	bl	52e4 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
    9e52:	f104 0108 	add.w	r1, r4, #8
    9e56:	2204      	movs	r2, #4
    9e58:	a803      	add	r0, sp, #12
    9e5a:	f7f9 fe8f 	bl	3b7c <settings_save_one>
	if (err) {
    9e5e:	4601      	mov	r1, r0
    9e60:	b148      	cbz	r0, 9e76 <sc_store+0x4a>
    9e62:	4a08      	ldr	r2, [pc, #32]	; (9e84 <sc_store+0x58>)
    9e64:	4b08      	ldr	r3, [pc, #32]	; (9e88 <sc_store+0x5c>)
		BT_ERR("failed to store SC (err %d)", err);
    9e66:	4809      	ldr	r0, [pc, #36]	; (9e8c <sc_store+0x60>)
    9e68:	1ad2      	subs	r2, r2, r3
    9e6a:	08d2      	lsrs	r2, r2, #3
    9e6c:	0192      	lsls	r2, r2, #6
    9e6e:	f042 0201 	orr.w	r2, r2, #1
    9e72:	f017 fe47 	bl	21b04 <log_1>
}
    9e76:	b00c      	add	sp, #48	; 0x30
    9e78:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
    9e7a:	9200      	str	r2, [sp, #0]
    9e7c:	e7e3      	b.n	9e46 <sc_store+0x1a>
    9e7e:	bf00      	nop
    9e80:	0002c649 	.word	0x0002c649
    9e84:	00029958 	.word	0x00029958
    9e88:	00029870 	.word	0x00029870
    9e8c:	0002c3e7 	.word	0x0002c3e7

00009e90 <sc_save>:
{
    9e90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    9e94:	4680      	mov	r8, r0
    9e96:	460f      	mov	r7, r1
    9e98:	4616      	mov	r6, r2
    9e9a:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
    9e9c:	f7ff ff56 	bl	9d4c <find_sc_cfg>
	if (!cfg) {
    9ea0:	4604      	mov	r4, r0
    9ea2:	b9c8      	cbnz	r0, 9ed8 <sc_save+0x48>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    9ea4:	4669      	mov	r1, sp
    9ea6:	9000      	str	r0, [sp, #0]
    9ea8:	f8cd 0003 	str.w	r0, [sp, #3]
    9eac:	f7ff ff4e 	bl	9d4c <find_sc_cfg>
		if (!cfg) {
    9eb0:	4604      	mov	r4, r0
    9eb2:	b960      	cbnz	r0, 9ece <sc_save+0x3e>
    9eb4:	4916      	ldr	r1, [pc, #88]	; (9f10 <sc_save+0x80>)
    9eb6:	4b17      	ldr	r3, [pc, #92]	; (9f14 <sc_save+0x84>)
			BT_ERR("unable to save SC: no cfg left");
    9eb8:	4817      	ldr	r0, [pc, #92]	; (9f18 <sc_save+0x88>)
    9eba:	1ac9      	subs	r1, r1, r3
    9ebc:	08c9      	lsrs	r1, r1, #3
    9ebe:	0189      	lsls	r1, r1, #6
    9ec0:	f041 0101 	orr.w	r1, r1, #1
    9ec4:	f017 fe11 	bl	21aea <log_0>
}
    9ec8:	b002      	add	sp, #8
    9eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
    9ece:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
    9ed2:	4639      	mov	r1, r7
    9ed4:	f01b fabd 	bl	25452 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
    9ed8:	8922      	ldrh	r2, [r4, #8]
    9eda:	8963      	ldrh	r3, [r4, #10]
    9edc:	b97a      	cbnz	r2, 9efe <sc_save+0x6e>
    9ede:	b983      	cbnz	r3, 9f02 <sc_save+0x72>
		cfg->data.start = start;
    9ee0:	8126      	strh	r6, [r4, #8]
		*end = new_end;
    9ee2:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
    9ee4:	4621      	mov	r1, r4
    9ee6:	f811 0b01 	ldrb.w	r0, [r1], #1
    9eea:	f01a fa98 	bl	2441e <bt_addr_le_is_bonded>
    9eee:	2800      	cmp	r0, #0
    9ef0:	d0ea      	beq.n	9ec8 <sc_save+0x38>
		sc_store(cfg);
    9ef2:	4620      	mov	r0, r4
}
    9ef4:	b002      	add	sp, #8
    9ef6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
    9efa:	f7ff bf97 	b.w	9e2c <sc_store>
	if (new_start >= *start && new_end <= *end) {
    9efe:	4296      	cmp	r6, r2
    9f00:	d302      	bcc.n	9f08 <sc_save+0x78>
    9f02:	429d      	cmp	r5, r3
    9f04:	d8ed      	bhi.n	9ee2 <sc_save+0x52>
    9f06:	e7df      	b.n	9ec8 <sc_save+0x38>
	if (*end < new_end) {
    9f08:	429d      	cmp	r5, r3
		*start = new_start;
    9f0a:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
    9f0c:	d9ea      	bls.n	9ee4 <sc_save+0x54>
    9f0e:	e7e8      	b.n	9ee2 <sc_save+0x52>
    9f10:	00029958 	.word	0x00029958
    9f14:	00029870 	.word	0x00029870
    9f18:	0002c403 	.word	0x0002c403

00009f1c <db_hash_commit>:

static int db_hash_commit(void)
{
    9f1c:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    9f1e:	2108      	movs	r1, #8
    9f20:	4804      	ldr	r0, [pc, #16]	; (9f34 <db_hash_commit+0x18>)
    9f22:	f01b fa50 	bl	253c6 <atomic_or>
	atomic_set_bit(gatt_sc.flags, DB_HASH_LOAD);
	/* Reschedule work to calculate and compare against the Hash value
	 * loaded from flash.
	 */
	k_work_reschedule(&db_hash.work, K_NO_WAIT);
    9f26:	2200      	movs	r2, #0
    9f28:	2300      	movs	r3, #0
    9f2a:	4803      	ldr	r0, [pc, #12]	; (9f38 <db_hash_commit+0x1c>)
    9f2c:	f016 fa7a 	bl	20424 <k_work_reschedule>

	return 0;
}
    9f30:	2000      	movs	r0, #0
    9f32:	bd08      	pop	{r3, pc}
    9f34:	200017b0 	.word	0x200017b0
    9f38:	20001708 	.word	0x20001708

00009f3c <sc_set>:
{
    9f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9f40:	460e      	mov	r6, r1
    9f42:	b086      	sub	sp, #24
    9f44:	4617      	mov	r7, r2
    9f46:	4698      	mov	r8, r3
	if (!name) {
    9f48:	4605      	mov	r5, r0
    9f4a:	b978      	cbnz	r0, 9f6c <sc_set+0x30>
    9f4c:	493b      	ldr	r1, [pc, #236]	; (a03c <sc_set+0x100>)
    9f4e:	4b3c      	ldr	r3, [pc, #240]	; (a040 <sc_set+0x104>)
		BT_ERR("Insufficient number of arguments");
    9f50:	483c      	ldr	r0, [pc, #240]	; (a044 <sc_set+0x108>)
    9f52:	1ac9      	subs	r1, r1, r3
    9f54:	08c9      	lsrs	r1, r1, #3
    9f56:	0189      	lsls	r1, r1, #6
    9f58:	f041 0101 	orr.w	r1, r1, #1
    9f5c:	f017 fdc5 	bl	21aea <log_0>
		return -EINVAL;
    9f60:	f06f 0415 	mvn.w	r4, #21
}
    9f64:	4620      	mov	r0, r4
    9f66:	b006      	add	sp, #24
    9f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
    9f6c:	a902      	add	r1, sp, #8
    9f6e:	f019 ff92 	bl	23e96 <bt_settings_decode_key>
	if (err) {
    9f72:	4604      	mov	r4, r0
    9f74:	b178      	cbz	r0, 9f96 <sc_set+0x5a>
    9f76:	4a32      	ldr	r2, [pc, #200]	; (a040 <sc_set+0x104>)
    9f78:	4c30      	ldr	r4, [pc, #192]	; (a03c <sc_set+0x100>)
    9f7a:	4628      	mov	r0, r5
    9f7c:	1aa4      	subs	r4, r4, r2
    9f7e:	f7f8 fdab 	bl	2ad8 <z_log_strdup>
    9f82:	08e4      	lsrs	r4, r4, #3
		BT_ERR("Unable to decode address %s", log_strdup(name));
    9f84:	01a4      	lsls	r4, r4, #6
    9f86:	f044 0401 	orr.w	r4, r4, #1
    9f8a:	4601      	mov	r1, r0
    9f8c:	482e      	ldr	r0, [pc, #184]	; (a048 <sc_set+0x10c>)
    9f8e:	4622      	mov	r2, r4
    9f90:	f017 fdb8 	bl	21b04 <log_1>
    9f94:	e7e4      	b.n	9f60 <sc_set+0x24>
	settings_name_next(name, &next);
    9f96:	a901      	add	r1, sp, #4
    9f98:	4628      	mov	r0, r5
    9f9a:	f018 fbcd 	bl	22738 <settings_name_next>
	if (!next) {
    9f9e:	9801      	ldr	r0, [sp, #4]
    9fa0:	b170      	cbz	r0, 9fc0 <sc_set+0x84>
		unsigned long next_id = strtoul(next, NULL, 10);
    9fa2:	4621      	mov	r1, r4
    9fa4:	220a      	movs	r2, #10
    9fa6:	f019 fe2c 	bl	23c02 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
    9faa:	4601      	mov	r1, r0
    9fac:	b140      	cbz	r0, 9fc0 <sc_set+0x84>
    9fae:	4a23      	ldr	r2, [pc, #140]	; (a03c <sc_set+0x100>)
    9fb0:	4b23      	ldr	r3, [pc, #140]	; (a040 <sc_set+0x104>)
			BT_ERR("Invalid local identity %lu", next_id);
    9fb2:	4826      	ldr	r0, [pc, #152]	; (a04c <sc_set+0x110>)
    9fb4:	1ad2      	subs	r2, r2, r3
    9fb6:	08d2      	lsrs	r2, r2, #3
    9fb8:	0192      	lsls	r2, r2, #6
    9fba:	f042 0201 	orr.w	r2, r2, #1
    9fbe:	e7e7      	b.n	9f90 <sc_set+0x54>
	cfg = find_sc_cfg(id, &addr);
    9fc0:	a902      	add	r1, sp, #8
    9fc2:	2000      	movs	r0, #0
    9fc4:	f7ff fec2 	bl	9d4c <find_sc_cfg>
	if (!cfg && len_rd) {
    9fc8:	4605      	mov	r5, r0
    9fca:	bb80      	cbnz	r0, a02e <sc_set+0xf2>
    9fcc:	2e00      	cmp	r6, #0
    9fce:	d0c9      	beq.n	9f64 <sc_set+0x28>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    9fd0:	a904      	add	r1, sp, #16
    9fd2:	9004      	str	r0, [sp, #16]
    9fd4:	4606      	mov	r6, r0
    9fd6:	f8cd 0013 	str.w	r0, [sp, #19]
    9fda:	f7ff feb7 	bl	9d4c <find_sc_cfg>
		if (!cfg) {
    9fde:	4605      	mov	r5, r0
    9fe0:	b960      	cbnz	r0, 9ffc <sc_set+0xc0>
    9fe2:	4b17      	ldr	r3, [pc, #92]	; (a040 <sc_set+0x104>)
    9fe4:	4915      	ldr	r1, [pc, #84]	; (a03c <sc_set+0x100>)
			BT_ERR("Unable to restore SC: no cfg left");
    9fe6:	481a      	ldr	r0, [pc, #104]	; (a050 <sc_set+0x114>)
    9fe8:	1ac9      	subs	r1, r1, r3
    9fea:	08c9      	lsrs	r1, r1, #3
    9fec:	0189      	lsls	r1, r1, #6
    9fee:	f041 0101 	orr.w	r1, r1, #1
    9ff2:	f017 fd7a 	bl	21aea <log_0>
			return -ENOMEM;
    9ff6:	f06f 040b 	mvn.w	r4, #11
    9ffa:	e7b3      	b.n	9f64 <sc_set+0x28>
		cfg->id = id;
    9ffc:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
    a000:	a902      	add	r1, sp, #8
    a002:	f01b fa26 	bl	25452 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
    a006:	f105 0108 	add.w	r1, r5, #8
    a00a:	2204      	movs	r2, #4
    a00c:	4640      	mov	r0, r8
    a00e:	47b8      	blx	r7
		if (len < 0) {
    a010:	1e05      	subs	r5, r0, #0
    a012:	daa7      	bge.n	9f64 <sc_set+0x28>
    a014:	4b0a      	ldr	r3, [pc, #40]	; (a040 <sc_set+0x104>)
    a016:	4a09      	ldr	r2, [pc, #36]	; (a03c <sc_set+0x100>)
			BT_ERR("Failed to decode value (err %zd)", len);
    a018:	480e      	ldr	r0, [pc, #56]	; (a054 <sc_set+0x118>)
    a01a:	1ad2      	subs	r2, r2, r3
    a01c:	08d2      	lsrs	r2, r2, #3
    a01e:	0192      	lsls	r2, r2, #6
    a020:	f042 0201 	orr.w	r2, r2, #1
    a024:	4629      	mov	r1, r5
    a026:	f017 fd6d 	bl	21b04 <log_1>
			return len;
    a02a:	462c      	mov	r4, r5
    a02c:	e79a      	b.n	9f64 <sc_set+0x28>
	if (len_rd) {
    a02e:	2e00      	cmp	r6, #0
    a030:	d1e9      	bne.n	a006 <sc_set+0xca>
		memset(cfg, 0, sizeof(*cfg));
    a032:	220c      	movs	r2, #12
    a034:	4631      	mov	r1, r6
    a036:	f019 fec2 	bl	23dbe <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
    a03a:	e793      	b.n	9f64 <sc_set+0x28>
    a03c:	00029958 	.word	0x00029958
    a040:	00029870 	.word	0x00029870
    a044:	0002b425 	.word	0x0002b425
    a048:	0002c422 	.word	0x0002c422
    a04c:	0002c43e 	.word	0x0002c43e
    a050:	0002c459 	.word	0x0002c459
    a054:	0002c3ac 	.word	0x0002c3ac

0000a058 <bt_gatt_service_init.part.0>:
static void bt_gatt_service_init(void)
    a058:	4908      	ldr	r1, [pc, #32]	; (a07c <bt_gatt_service_init.part.0+0x24>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    a05a:	4a09      	ldr	r2, [pc, #36]	; (a080 <bt_gatt_service_init.part.0+0x28>)
    a05c:	880b      	ldrh	r3, [r1, #0]
static void bt_gatt_service_init(void)
    a05e:	b510      	push	{r4, lr}
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    a060:	4c08      	ldr	r4, [pc, #32]	; (a084 <bt_gatt_service_init.part.0+0x2c>)
    a062:	2000      	movs	r0, #0
    a064:	42a2      	cmp	r2, r4
    a066:	d302      	bcc.n	a06e <bt_gatt_service_init.part.0+0x16>
    a068:	b100      	cbz	r0, a06c <bt_gatt_service_init.part.0+0x14>
    a06a:	800b      	strh	r3, [r1, #0]
}
    a06c:	bd10      	pop	{r4, pc}
		last_static_handle += svc->attr_count;
    a06e:	6850      	ldr	r0, [r2, #4]
    a070:	4403      	add	r3, r0
    a072:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    a074:	3208      	adds	r2, #8
    a076:	2001      	movs	r0, #1
    a078:	e7f4      	b.n	a064 <bt_gatt_service_init.part.0+0xc>
    a07a:	bf00      	nop
    a07c:	200036d0 	.word	0x200036d0
    a080:	000296fc 	.word	0x000296fc
    a084:	0002970c 	.word	0x0002970c

0000a088 <cf_set>:
{
    a088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a08c:	460f      	mov	r7, r1
    a08e:	b085      	sub	sp, #20
    a090:	4690      	mov	r8, r2
    a092:	4699      	mov	r9, r3
	if (!name) {
    a094:	4606      	mov	r6, r0
    a096:	b978      	cbnz	r0, a0b8 <cf_set+0x30>
    a098:	493a      	ldr	r1, [pc, #232]	; (a184 <cf_set+0xfc>)
    a09a:	4b3b      	ldr	r3, [pc, #236]	; (a188 <cf_set+0x100>)
		BT_ERR("Insufficient number of arguments");
    a09c:	483b      	ldr	r0, [pc, #236]	; (a18c <cf_set+0x104>)
    a09e:	1ac9      	subs	r1, r1, r3
    a0a0:	08c9      	lsrs	r1, r1, #3
    a0a2:	0189      	lsls	r1, r1, #6
    a0a4:	f041 0101 	orr.w	r1, r1, #1
    a0a8:	f017 fd1f 	bl	21aea <log_0>
		return -EINVAL;
    a0ac:	f06f 0515 	mvn.w	r5, #21
}
    a0b0:	4628      	mov	r0, r5
    a0b2:	b005      	add	sp, #20
    a0b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
    a0b8:	a902      	add	r1, sp, #8
    a0ba:	f019 feec 	bl	23e96 <bt_settings_decode_key>
	if (err) {
    a0be:	4605      	mov	r5, r0
    a0c0:	b178      	cbz	r0, a0e2 <cf_set+0x5a>
    a0c2:	4a31      	ldr	r2, [pc, #196]	; (a188 <cf_set+0x100>)
    a0c4:	4c2f      	ldr	r4, [pc, #188]	; (a184 <cf_set+0xfc>)
    a0c6:	4630      	mov	r0, r6
    a0c8:	1aa4      	subs	r4, r4, r2
    a0ca:	f7f8 fd05 	bl	2ad8 <z_log_strdup>
    a0ce:	08e4      	lsrs	r4, r4, #3
		BT_ERR("Unable to decode address %s", log_strdup(name));
    a0d0:	01a4      	lsls	r4, r4, #6
    a0d2:	f044 0401 	orr.w	r4, r4, #1
    a0d6:	4601      	mov	r1, r0
    a0d8:	482d      	ldr	r0, [pc, #180]	; (a190 <cf_set+0x108>)
    a0da:	4622      	mov	r2, r4
    a0dc:	f017 fd12 	bl	21b04 <log_1>
    a0e0:	e7e4      	b.n	a0ac <cf_set+0x24>
	settings_name_next(name, &next);
    a0e2:	a901      	add	r1, sp, #4
    a0e4:	4630      	mov	r0, r6
    a0e6:	f018 fb27 	bl	22738 <settings_name_next>
	if (!next) {
    a0ea:	9801      	ldr	r0, [sp, #4]
    a0ec:	b340      	cbz	r0, a140 <cf_set+0xb8>
		unsigned long next_id = strtoul(next, NULL, 10);
    a0ee:	4629      	mov	r1, r5
    a0f0:	220a      	movs	r2, #10
    a0f2:	f019 fd86 	bl	23c02 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
    a0f6:	4601      	mov	r1, r0
    a0f8:	b310      	cbz	r0, a140 <cf_set+0xb8>
    a0fa:	4a22      	ldr	r2, [pc, #136]	; (a184 <cf_set+0xfc>)
    a0fc:	4b22      	ldr	r3, [pc, #136]	; (a188 <cf_set+0x100>)
			BT_ERR("Invalid local identity %lu", next_id);
    a0fe:	4825      	ldr	r0, [pc, #148]	; (a194 <cf_set+0x10c>)
    a100:	1ad2      	subs	r2, r2, r3
    a102:	08d2      	lsrs	r2, r2, #3
    a104:	0192      	lsls	r2, r2, #6
    a106:	f042 0201 	orr.w	r2, r2, #1
    a10a:	e7e7      	b.n	a0dc <cf_set+0x54>
			    !bt_addr_le_cmp(addr, &cf_cfg[i].peer)) {
    a10c:	1c61      	adds	r1, r4, #1
    a10e:	a802      	add	r0, sp, #8
    a110:	f01b f968 	bl	253e4 <bt_addr_le_cmp>
			if (id == cf_cfg[i].id &&
    a114:	b9c0      	cbnz	r0, a148 <cf_set+0xc0>
	if (len_rd) {
    a116:	b38f      	cbz	r7, a17c <cf_set+0xf4>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
    a118:	f104 0108 	add.w	r1, r4, #8
    a11c:	2201      	movs	r2, #1
    a11e:	4648      	mov	r0, r9
    a120:	47c0      	blx	r8
		if (len < 0) {
    a122:	1e04      	subs	r4, r0, #0
    a124:	dac4      	bge.n	a0b0 <cf_set+0x28>
    a126:	4b18      	ldr	r3, [pc, #96]	; (a188 <cf_set+0x100>)
    a128:	4a16      	ldr	r2, [pc, #88]	; (a184 <cf_set+0xfc>)
			BT_ERR("Failed to decode value (err %zd)", len);
    a12a:	481b      	ldr	r0, [pc, #108]	; (a198 <cf_set+0x110>)
    a12c:	1ad2      	subs	r2, r2, r3
    a12e:	08d2      	lsrs	r2, r2, #3
    a130:	0192      	lsls	r2, r2, #6
    a132:	f042 0201 	orr.w	r2, r2, #1
    a136:	4621      	mov	r1, r4
    a138:	f017 fce4 	bl	21b04 <log_1>
			return len;
    a13c:	4625      	mov	r5, r4
    a13e:	e7b7      	b.n	a0b0 <cf_set+0x28>
			if (id == cf_cfg[i].id &&
    a140:	4c16      	ldr	r4, [pc, #88]	; (a19c <cf_set+0x114>)
    a142:	7823      	ldrb	r3, [r4, #0]
    a144:	2b00      	cmp	r3, #0
    a146:	d0e1      	beq.n	a10c <cf_set+0x84>
		cfg = find_cf_cfg(NULL);
    a148:	2000      	movs	r0, #0
    a14a:	f7ff fde1 	bl	9d10 <find_cf_cfg>
		if (!cfg) {
    a14e:	4604      	mov	r4, r0
    a150:	b960      	cbnz	r0, a16c <cf_set+0xe4>
    a152:	4b0d      	ldr	r3, [pc, #52]	; (a188 <cf_set+0x100>)
    a154:	490b      	ldr	r1, [pc, #44]	; (a184 <cf_set+0xfc>)
			BT_ERR("Unable to restore CF: no cfg left");
    a156:	4812      	ldr	r0, [pc, #72]	; (a1a0 <cf_set+0x118>)
    a158:	1ac9      	subs	r1, r1, r3
    a15a:	08c9      	lsrs	r1, r1, #3
    a15c:	0189      	lsls	r1, r1, #6
    a15e:	f041 0101 	orr.w	r1, r1, #1
    a162:	f017 fcc2 	bl	21aea <log_0>
			return -ENOMEM;
    a166:	f06f 050b 	mvn.w	r5, #11
    a16a:	e7a1      	b.n	a0b0 <cf_set+0x28>
		cfg->id = id;
    a16c:	4620      	mov	r0, r4
    a16e:	2300      	movs	r3, #0
    a170:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
    a174:	a902      	add	r1, sp, #8
    a176:	f01b f96c 	bl	25452 <bt_addr_le_copy>
    a17a:	e7cc      	b.n	a116 <cf_set+0x8e>
		clear_cf_cfg(cfg);
    a17c:	4620      	mov	r0, r4
    a17e:	f01b f9ad 	bl	254dc <clear_cf_cfg>
    a182:	e795      	b.n	a0b0 <cf_set+0x28>
    a184:	00029958 	.word	0x00029958
    a188:	00029870 	.word	0x00029870
    a18c:	0002b425 	.word	0x0002b425
    a190:	0002c422 	.word	0x0002c422
    a194:	0002c43e 	.word	0x0002c43e
    a198:	0002c3ac 	.word	0x0002c3ac
    a19c:	200021b0 	.word	0x200021b0
    a1a0:	0002c47b 	.word	0x0002c47b

0000a1a4 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
    a1a4:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
    a1a6:	6881      	ldr	r1, [r0, #8]
{
    a1a8:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    a1aa:	4a07      	ldr	r2, [pc, #28]	; (a1c8 <remove_peer_from_attr+0x24>)
    a1ac:	4291      	cmp	r1, r2
    a1ae:	d109      	bne.n	a1c4 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
    a1b0:	791a      	ldrb	r2, [r3, #4]
    a1b2:	6819      	ldr	r1, [r3, #0]
    a1b4:	68c0      	ldr	r0, [r0, #12]
    a1b6:	f01b f93e 	bl	25436 <ccc_find_cfg>
	if (cfg) {
    a1ba:	b118      	cbz	r0, a1c4 <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
    a1bc:	220a      	movs	r2, #10
    a1be:	2100      	movs	r1, #0
    a1c0:	f019 fdfd 	bl	23dbe <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
    a1c4:	2001      	movs	r0, #1
    a1c6:	bd08      	pop	{r3, pc}
    a1c8:	00009d6d 	.word	0x00009d6d

0000a1cc <ccc_load>:
{
    a1cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    a1ce:	4b21      	ldr	r3, [pc, #132]	; (a254 <ccc_load+0x88>)
{
    a1d0:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    a1d2:	6882      	ldr	r2, [r0, #8]
    a1d4:	429a      	cmp	r2, r3
    a1d6:	d002      	beq.n	a1de <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
    a1d8:	2001      	movs	r0, #1
}
    a1da:	b002      	add	sp, #8
    a1dc:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
    a1de:	68a3      	ldr	r3, [r4, #8]
    a1e0:	68c6      	ldr	r6, [r0, #12]
    a1e2:	b94b      	cbnz	r3, a1f8 <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
    a1e4:	7922      	ldrb	r2, [r4, #4]
    a1e6:	6821      	ldr	r1, [r4, #0]
    a1e8:	4630      	mov	r0, r6
    a1ea:	f01b f924 	bl	25436 <ccc_find_cfg>
	if (!cfg) {
    a1ee:	2800      	cmp	r0, #0
    a1f0:	d0f2      	beq.n	a1d8 <ccc_load+0xc>
	clear_ccc_cfg(cfg);
    a1f2:	f01b f931 	bl	25458 <clear_ccc_cfg>
    a1f6:	e7ef      	b.n	a1d8 <ccc_load+0xc>
	} else if (!load->count) {
    a1f8:	68e0      	ldr	r0, [r4, #12]
    a1fa:	2800      	cmp	r0, #0
    a1fc:	d0ed      	beq.n	a1da <ccc_load+0xe>
	if (load->entry->handle != handle) {
    a1fe:	881b      	ldrh	r3, [r3, #0]
    a200:	4299      	cmp	r1, r3
    a202:	d00a      	beq.n	a21a <ccc_load+0x4e>
		if (load->entry->handle < handle) {
    a204:	d9e8      	bls.n	a1d8 <ccc_load+0xc>
	load->count--;
    a206:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
    a208:	68a3      	ldr	r3, [r4, #8]
	load->count--;
    a20a:	3801      	subs	r0, #1
	load->entry++;
    a20c:	3304      	adds	r3, #4
	load->count--;
    a20e:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    a210:	3800      	subs	r0, #0
	load->entry++;
    a212:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    a214:	bf18      	it	ne
    a216:	2001      	movne	r0, #1
    a218:	e7df      	b.n	a1da <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
    a21a:	7922      	ldrb	r2, [r4, #4]
    a21c:	6821      	ldr	r1, [r4, #0]
    a21e:	4630      	mov	r0, r6
    a220:	f01b f909 	bl	25436 <ccc_find_cfg>
	if (!cfg) {
    a224:	4605      	mov	r5, r0
    a226:	b980      	cbnz	r0, a24a <ccc_load+0x7e>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
    a228:	9000      	str	r0, [sp, #0]
    a22a:	4602      	mov	r2, r0
    a22c:	f8cd 0003 	str.w	r0, [sp, #3]
    a230:	4669      	mov	r1, sp
    a232:	4630      	mov	r0, r6
    a234:	f01b f8ff 	bl	25436 <ccc_find_cfg>
		if (!cfg) {
    a238:	4605      	mov	r5, r0
    a23a:	2800      	cmp	r0, #0
    a23c:	d0e3      	beq.n	a206 <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
    a23e:	6821      	ldr	r1, [r4, #0]
    a240:	3001      	adds	r0, #1
    a242:	f01b f906 	bl	25452 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
    a246:	7923      	ldrb	r3, [r4, #4]
    a248:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
    a24a:	68a3      	ldr	r3, [r4, #8]
    a24c:	885b      	ldrh	r3, [r3, #2]
    a24e:	812b      	strh	r3, [r5, #8]
    a250:	e7d9      	b.n	a206 <ccc_load+0x3a>
    a252:	bf00      	nop
    a254:	00009d6d 	.word	0x00009d6d

0000a258 <ccc_save>:
{
    a258:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    a25a:	4b0c      	ldr	r3, [pc, #48]	; (a28c <ccc_save+0x34>)
{
    a25c:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    a25e:	6882      	ldr	r2, [r0, #8]
    a260:	429a      	cmp	r2, r3
{
    a262:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    a264:	d10f      	bne.n	a286 <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
    a266:	7922      	ldrb	r2, [r4, #4]
    a268:	6821      	ldr	r1, [r4, #0]
    a26a:	68c0      	ldr	r0, [r0, #12]
    a26c:	f01b f8e3 	bl	25436 <ccc_find_cfg>
	if (!cfg) {
    a270:	b148      	cbz	r0, a286 <ccc_save+0x2e>
	save->store[save->count].handle = handle;
    a272:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
    a276:	8901      	ldrh	r1, [r0, #8]
    a278:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
    a27c:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
    a27e:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
    a280:	8151      	strh	r1, [r2, #10]
	save->count++;
    a282:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
    a286:	2001      	movs	r0, #1
    a288:	bd38      	pop	{r3, r4, r5, pc}
    a28a:	bf00      	nop
    a28c:	00009d6d 	.word	0x00009d6d

0000a290 <db_changed>:
{
    a290:	b513      	push	{r0, r1, r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a292:	f06f 0104 	mvn.w	r1, #4
    a296:	4813      	ldr	r0, [pc, #76]	; (a2e4 <db_changed+0x54>)
		if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    a298:	4c13      	ldr	r4, [pc, #76]	; (a2e8 <db_changed+0x58>)
    a29a:	f01b f8eb 	bl	25474 <atomic_and>
	k_work_reschedule(&db_hash.work, DB_HASH_TIMEOUT);
    a29e:	2300      	movs	r3, #0
    a2a0:	4812      	ldr	r0, [pc, #72]	; (a2ec <db_changed+0x5c>)
    a2a2:	f44f 72a4 	mov.w	r2, #328	; 0x148
    a2a6:	f016 f8bd 	bl	20424 <k_work_reschedule>
		if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    a2aa:	2300      	movs	r3, #0
    a2ac:	4669      	mov	r1, sp
    a2ae:	1c60      	adds	r0, r4, #1
    a2b0:	9300      	str	r3, [sp, #0]
    a2b2:	f8cd 3003 	str.w	r3, [sp, #3]
    a2b6:	f01b f895 	bl	253e4 <bt_addr_le_cmp>
    a2ba:	b188      	cbz	r0, a2e0 <db_changed+0x50>
		if (CF_ROBUST_CACHING(cfg)) {
    a2bc:	7a23      	ldrb	r3, [r4, #8]
    a2be:	07db      	lsls	r3, r3, #31
    a2c0:	d50e      	bpl.n	a2e0 <db_changed+0x50>
    a2c2:	f06f 0102 	mvn.w	r1, #2
    a2c6:	f104 000c 	add.w	r0, r4, #12
    a2ca:	f01b f8d3 	bl	25474 <atomic_and>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a2ce:	f06f 0101 	mvn.w	r1, #1
    a2d2:	f104 000c 	add.w	r0, r4, #12
}
    a2d6:	b002      	add	sp, #8
    a2d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a2dc:	f01b b8ca 	b.w	25474 <atomic_and>
    a2e0:	b002      	add	sp, #8
    a2e2:	bd10      	pop	{r4, pc}
    a2e4:	200017b0 	.word	0x200017b0
    a2e8:	200021b0 	.word	0x200021b0
    a2ec:	20001708 	.word	0x20001708

0000a2f0 <bt_gatt_clear_sc>:
{
    a2f0:	b570      	push	{r4, r5, r6, lr}
    a2f2:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
    a2f4:	f7ff fd2a 	bl	9d4c <find_sc_cfg>
	if (!cfg) {
    a2f8:	4604      	mov	r4, r0
    a2fa:	b318      	cbz	r0, a344 <bt_gatt_clear_sc+0x54>
		if (cfg->id) {
    a2fc:	4605      	mov	r5, r0
    a2fe:	f815 2b01 	ldrb.w	r2, [r5], #1
    a302:	b312      	cbz	r2, a34a <bt_gatt_clear_sc+0x5a>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
    a304:	ae02      	add	r6, sp, #8
    a306:	2104      	movs	r1, #4
    a308:	4630      	mov	r0, r6
    a30a:	f016 fef9 	bl	21100 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
    a30e:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
    a310:	2124      	movs	r1, #36	; 0x24
    a312:	4a0f      	ldr	r2, [pc, #60]	; (a350 <bt_gatt_clear_sc+0x60>)
    a314:	462b      	mov	r3, r5
    a316:	a803      	add	r0, sp, #12
    a318:	f7fa ffe4 	bl	52e4 <bt_settings_encode_key>
		err = settings_delete(key);
    a31c:	a803      	add	r0, sp, #12
    a31e:	f018 f9e4 	bl	226ea <settings_delete>
		if (err) {
    a322:	4601      	mov	r1, r0
    a324:	b148      	cbz	r0, a33a <bt_gatt_clear_sc+0x4a>
    a326:	4a0b      	ldr	r2, [pc, #44]	; (a354 <bt_gatt_clear_sc+0x64>)
    a328:	4b0b      	ldr	r3, [pc, #44]	; (a358 <bt_gatt_clear_sc+0x68>)
			BT_ERR("failed to delete SC (err %d)", err);
    a32a:	480c      	ldr	r0, [pc, #48]	; (a35c <bt_gatt_clear_sc+0x6c>)
    a32c:	1ad2      	subs	r2, r2, r3
    a32e:	08d2      	lsrs	r2, r2, #3
    a330:	0192      	lsls	r2, r2, #6
    a332:	f042 0201 	orr.w	r2, r2, #1
    a336:	f017 fbe5 	bl	21b04 <log_1>
	memset(cfg, 0, sizeof(*cfg));
    a33a:	220c      	movs	r2, #12
    a33c:	2100      	movs	r1, #0
    a33e:	4620      	mov	r0, r4
    a340:	f019 fd3d 	bl	23dbe <memset>
}
    a344:	2000      	movs	r0, #0
    a346:	b00c      	add	sp, #48	; 0x30
    a348:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
    a34a:	9200      	str	r2, [sp, #0]
    a34c:	e7e0      	b.n	a310 <bt_gatt_clear_sc+0x20>
    a34e:	bf00      	nop
    a350:	0002c649 	.word	0x0002c649
    a354:	00029958 	.word	0x00029958
    a358:	00029870 	.word	0x00029870
    a35c:	0002c49d 	.word	0x0002c49d

0000a360 <sc_clear>:
{
    a360:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    a362:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
    a366:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    a368:	4631      	mov	r1, r6
    a36a:	7a00      	ldrb	r0, [r0, #8]
    a36c:	f01a f857 	bl	2441e <bt_addr_le_is_bonded>
    a370:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
    a372:	4631      	mov	r1, r6
    a374:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    a376:	b17d      	cbz	r5, a398 <sc_clear+0x38>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
    a378:	f7ff ffba 	bl	a2f0 <bt_gatt_clear_sc>
		if (err) {
    a37c:	4601      	mov	r1, r0
    a37e:	b1a0      	cbz	r0, a3aa <sc_clear+0x4a>
    a380:	4a0a      	ldr	r2, [pc, #40]	; (a3ac <sc_clear+0x4c>)
    a382:	4b0b      	ldr	r3, [pc, #44]	; (a3b0 <sc_clear+0x50>)
			BT_ERR("Failed to clear SC %d", err);
    a384:	480b      	ldr	r0, [pc, #44]	; (a3b4 <sc_clear+0x54>)
    a386:	1ad2      	subs	r2, r2, r3
    a388:	08d2      	lsrs	r2, r2, #3
    a38a:	0192      	lsls	r2, r2, #6
}
    a38c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Failed to clear SC %d", err);
    a390:	f042 0201 	orr.w	r2, r2, #1
    a394:	f017 bbb6 	b.w	21b04 <log_1>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
    a398:	f7ff fcd8 	bl	9d4c <find_sc_cfg>
		if (cfg) {
    a39c:	b128      	cbz	r0, a3aa <sc_clear+0x4a>
	memset(cfg, 0, sizeof(*cfg));
    a39e:	4629      	mov	r1, r5
    a3a0:	220c      	movs	r2, #12
}
    a3a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
    a3a6:	f019 bd0a 	b.w	23dbe <memset>
}
    a3aa:	bd70      	pop	{r4, r5, r6, pc}
    a3ac:	00029958 	.word	0x00029958
    a3b0:	00029870 	.word	0x00029870
    a3b4:	0002c4ba 	.word	0x0002c4ba

0000a3b8 <disconnected_cb>:
{
    a3b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    a3bc:	4b1f      	ldr	r3, [pc, #124]	; (a43c <disconnected_cb+0x84>)
{
    a3be:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    a3c0:	6882      	ldr	r2, [r0, #8]
    a3c2:	429a      	cmp	r2, r3
{
    a3c4:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    a3c6:	d102      	bne.n	a3ce <disconnected_cb+0x16>
	ccc = attr->user_data;
    a3c8:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
    a3ca:	8963      	ldrh	r3, [r4, #10]
    a3cc:	b9c3      	cbnz	r3, a400 <disconnected_cb+0x48>
}
    a3ce:	2001      	movs	r0, #1
    a3d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    a3d4:	f105 0888 	add.w	r8, r5, #136	; 0x88
    a3d8:	7a28      	ldrb	r0, [r5, #8]
    a3da:	4641      	mov	r1, r8
    a3dc:	f01a f81f 	bl	2441e <bt_addr_le_is_bonded>
    a3e0:	b948      	cbnz	r0, a3f6 <disconnected_cb+0x3e>
				if (ccc == &sc_ccc) {
    a3e2:	4b17      	ldr	r3, [pc, #92]	; (a440 <disconnected_cb+0x88>)
    a3e4:	429c      	cmp	r4, r3
    a3e6:	d102      	bne.n	a3ee <disconnected_cb+0x36>
					sc_clear(conn);
    a3e8:	4628      	mov	r0, r5
    a3ea:	f7ff ffb9 	bl	a360 <sc_clear>
				clear_ccc_cfg(cfg);
    a3ee:	4620      	mov	r0, r4
    a3f0:	f01b f832 	bl	25458 <clear_ccc_cfg>
	if (!value_used) {
    a3f4:	e019      	b.n	a42a <disconnected_cb+0x72>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    a3f6:	4641      	mov	r1, r8
    a3f8:	4638      	mov	r0, r7
    a3fa:	f01b f82a 	bl	25452 <bt_addr_le_copy>
	if (!value_used) {
    a3fe:	e014      	b.n	a42a <disconnected_cb+0x72>
		if (!cfg->value) {
    a400:	8923      	ldrh	r3, [r4, #8]
    a402:	b193      	cbz	r3, a42a <disconnected_cb+0x72>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    a404:	4627      	mov	r7, r4
    a406:	4628      	mov	r0, r5
    a408:	f817 1b01 	ldrb.w	r1, [r7], #1
    a40c:	463a      	mov	r2, r7
    a40e:	f01a fa4e 	bl	248ae <bt_conn_is_peer_addr_le>
    a412:	2800      	cmp	r0, #0
    a414:	d1de      	bne.n	a3d4 <disconnected_cb+0x1c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    a416:	7820      	ldrb	r0, [r4, #0]
    a418:	4639      	mov	r1, r7
    a41a:	f7fe f885 	bl	8528 <bt_conn_lookup_addr_le>
			if (tmp) {
    a41e:	b120      	cbz	r0, a42a <disconnected_cb+0x72>
				if (tmp->state == BT_CONN_CONNECTED) {
    a420:	7a85      	ldrb	r5, [r0, #10]
				bt_conn_unref(tmp);
    a422:	f01a f9d9 	bl	247d8 <bt_conn_unref>
	if (!value_used) {
    a426:	2d07      	cmp	r5, #7
    a428:	d0d1      	beq.n	a3ce <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
    a42a:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
    a42c:	2100      	movs	r1, #0
    a42e:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
    a430:	2b00      	cmp	r3, #0
    a432:	d0cc      	beq.n	a3ce <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
    a434:	4630      	mov	r0, r6
    a436:	4798      	blx	r3
    a438:	e7c9      	b.n	a3ce <disconnected_cb+0x16>
    a43a:	bf00      	nop
    a43c:	00009d6d 	.word	0x00009d6d
    a440:	20000814 	.word	0x20000814

0000a444 <sc_indicate>:
{
    a444:	b570      	push	{r4, r5, r6, lr}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    a446:	4c12      	ldr	r4, [pc, #72]	; (a490 <sc_indicate+0x4c>)
    a448:	4606      	mov	r6, r0
    a44a:	460d      	mov	r5, r1
    a44c:	f104 0050 	add.w	r0, r4, #80	; 0x50
    a450:	2101      	movs	r1, #1
    a452:	f01a ffb8 	bl	253c6 <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    a456:	07c2      	lsls	r2, r0, #31
    a458:	d40e      	bmi.n	a478 <sc_indicate+0x34>
		gatt_sc.start = start;
    a45a:	8326      	strh	r6, [r4, #24]
		*end = new_end;
    a45c:	8365      	strh	r5, [r4, #26]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    a45e:	480d      	ldr	r0, [pc, #52]	; (a494 <sc_indicate+0x50>)
    a460:	f01a ff55 	bl	2530e <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
    a464:	0783      	lsls	r3, r0, #30
    a466:	d40d      	bmi.n	a484 <sc_indicate+0x40>
}
    a468:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&gatt_sc.work, timeout);
    a46c:	480a      	ldr	r0, [pc, #40]	; (a498 <sc_indicate+0x54>)
    a46e:	f44f 72a4 	mov.w	r2, #328	; 0x148
    a472:	2300      	movs	r3, #0
    a474:	f015 bfd6 	b.w	20424 <k_work_reschedule>
	if (new_start >= *start && new_end <= *end) {
    a478:	8b22      	ldrh	r2, [r4, #24]
    a47a:	8b63      	ldrh	r3, [r4, #26]
    a47c:	42b2      	cmp	r2, r6
    a47e:	d802      	bhi.n	a486 <sc_indicate+0x42>
    a480:	42ab      	cmp	r3, r5
    a482:	d3eb      	bcc.n	a45c <sc_indicate+0x18>
}
    a484:	bd70      	pop	{r4, r5, r6, pc}
	if (*end < new_end) {
    a486:	42ab      	cmp	r3, r5
		*start = new_start;
    a488:	8326      	strh	r6, [r4, #24]
	if (*end < new_end) {
    a48a:	d2e8      	bcs.n	a45e <sc_indicate+0x1a>
    a48c:	e7e6      	b.n	a45c <sc_indicate+0x18>
    a48e:	bf00      	nop
    a490:	20001760 	.word	0x20001760
    a494:	200017b0 	.word	0x200017b0
    a498:	20001780 	.word	0x20001780

0000a49c <sc_commit>:
{
    a49c:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a49e:	4809      	ldr	r0, [pc, #36]	; (a4c4 <sc_commit+0x28>)
    a4a0:	f06f 0102 	mvn.w	r1, #2
    a4a4:	f01a ffe6 	bl	25474 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    a4a8:	4806      	ldr	r0, [pc, #24]	; (a4c4 <sc_commit+0x28>)
    a4aa:	f01a ff30 	bl	2530e <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    a4ae:	07c3      	lsls	r3, r0, #31
    a4b0:	d505      	bpl.n	a4be <sc_commit+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
    a4b2:	4805      	ldr	r0, [pc, #20]	; (a4c8 <sc_commit+0x2c>)
    a4b4:	f44f 72a4 	mov.w	r2, #328	; 0x148
    a4b8:	2300      	movs	r3, #0
    a4ba:	f015 ffb3 	bl	20424 <k_work_reschedule>
}
    a4be:	2000      	movs	r0, #0
    a4c0:	bd08      	pop	{r3, pc}
    a4c2:	bf00      	nop
    a4c4:	200017b0 	.word	0x200017b0
    a4c8:	20001780 	.word	0x20001780

0000a4cc <sc_indicate_rsp>:
{
    a4cc:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a4ce:	f06f 0102 	mvn.w	r1, #2
    a4d2:	4604      	mov	r4, r0
    a4d4:	480d      	ldr	r0, [pc, #52]	; (a50c <sc_indicate_rsp+0x40>)
    a4d6:	f01a ffcd 	bl	25474 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    a4da:	480c      	ldr	r0, [pc, #48]	; (a50c <sc_indicate_rsp+0x40>)
    a4dc:	f01a ff17 	bl	2530e <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    a4e0:	07c2      	lsls	r2, r0, #31
    a4e2:	d504      	bpl.n	a4ee <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
    a4e4:	480a      	ldr	r0, [pc, #40]	; (a510 <sc_indicate_rsp+0x44>)
    a4e6:	2200      	movs	r2, #0
    a4e8:	2300      	movs	r3, #0
    a4ea:	f015 ff9b 	bl	20424 <k_work_reschedule>
	cfg = find_cf_cfg(conn);
    a4ee:	4620      	mov	r0, r4
    a4f0:	f7ff fc0e 	bl	9d10 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    a4f4:	b140      	cbz	r0, a508 <sc_indicate_rsp+0x3c>
    a4f6:	7a03      	ldrb	r3, [r0, #8]
    a4f8:	07db      	lsls	r3, r3, #31
    a4fa:	d505      	bpl.n	a508 <sc_indicate_rsp+0x3c>
}
    a4fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    a500:	2101      	movs	r1, #1
    a502:	300c      	adds	r0, #12
    a504:	f01a bf5f 	b.w	253c6 <atomic_or>
    a508:	bd10      	pop	{r4, pc}
    a50a:	bf00      	nop
    a50c:	200017b0 	.word	0x200017b0
    a510:	20001780 	.word	0x20001780

0000a514 <cf_write>:
{
    a514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a518:	4698      	mov	r8, r3
    a51a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
    a51e:	2b01      	cmp	r3, #1
{
    a520:	4606      	mov	r6, r0
    a522:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
    a524:	d83d      	bhi.n	a5a2 <cf_write+0x8e>
	if (offset + len > sizeof(cfg->data)) {
    a526:	4443      	add	r3, r8
    a528:	2b01      	cmp	r3, #1
    a52a:	4645      	mov	r5, r8
    a52c:	dc3c      	bgt.n	a5a8 <cf_write+0x94>
	cfg = find_cf_cfg(conn);
    a52e:	f7ff fbef 	bl	9d10 <find_cf_cfg>
	if (!cfg) {
    a532:	4604      	mov	r4, r0
    a534:	b918      	cbnz	r0, a53e <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
    a536:	f7ff fbeb 	bl	9d10 <find_cf_cfg>
	if (!cfg) {
    a53a:	4604      	mov	r4, r0
    a53c:	b180      	cbz	r0, a560 <cf_write+0x4c>
{
    a53e:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
    a540:	f1b8 0f00 	cmp.w	r8, #0
    a544:	d11b      	bne.n	a57e <cf_write+0x6a>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    a546:	f106 0188 	add.w	r1, r6, #136	; 0x88
    a54a:	1c60      	adds	r0, r4, #1
    a54c:	f01a ff81 	bl	25452 <bt_addr_le_copy>
	cfg->id = conn->id;
    a550:	4620      	mov	r0, r4
    a552:	7a33      	ldrb	r3, [r6, #8]
    a554:	f800 3b0c 	strb.w	r3, [r0], #12
    a558:	2101      	movs	r1, #1
    a55a:	f01a ff34 	bl	253c6 <atomic_or>
}
    a55e:	e00b      	b.n	a578 <cf_write+0x64>
    a560:	4b14      	ldr	r3, [pc, #80]	; (a5b4 <cf_write+0xa0>)
    a562:	4915      	ldr	r1, [pc, #84]	; (a5b8 <cf_write+0xa4>)
		BT_WARN("No space to store Client Supported Features");
    a564:	4815      	ldr	r0, [pc, #84]	; (a5bc <cf_write+0xa8>)
    a566:	1ac9      	subs	r1, r1, r3
    a568:	08c9      	lsrs	r1, r1, #3
    a56a:	0189      	lsls	r1, r1, #6
    a56c:	f041 0102 	orr.w	r1, r1, #2
    a570:	f017 fabb 	bl	21aea <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    a574:	f06f 0510 	mvn.w	r5, #16
}
    a578:	4628      	mov	r0, r5
    a57a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
    a57e:	7a20      	ldrb	r0, [r4, #8]
    a580:	fa20 f301 	lsr.w	r3, r0, r1
    a584:	07da      	lsls	r2, r3, #31
    a586:	d503      	bpl.n	a590 <cf_write+0x7c>
		    !(value[i / 8] & BIT(i % 8))) {
    a588:	783b      	ldrb	r3, [r7, #0]
    a58a:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
    a58c:	07db      	lsls	r3, r3, #31
    a58e:	d50e      	bpl.n	a5ae <cf_write+0x9a>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
    a590:	3101      	adds	r1, #1
    a592:	2903      	cmp	r1, #3
    a594:	d1d4      	bne.n	a540 <cf_write+0x2c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
    a596:	783b      	ldrb	r3, [r7, #0]
    a598:	f003 0307 	and.w	r3, r3, #7
    a59c:	4318      	orrs	r0, r3
    a59e:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
    a5a0:	e7d1      	b.n	a546 <cf_write+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    a5a2:	f06f 0506 	mvn.w	r5, #6
    a5a6:	e7e7      	b.n	a578 <cf_write+0x64>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    a5a8:	f06f 050c 	mvn.w	r5, #12
    a5ac:	e7e4      	b.n	a578 <cf_write+0x64>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    a5ae:	f06f 0512 	mvn.w	r5, #18
    a5b2:	e7e1      	b.n	a578 <cf_write+0x64>
    a5b4:	00029870 	.word	0x00029870
    a5b8:	00029958 	.word	0x00029958
    a5bc:	0002c4d0 	.word	0x0002c4d0

0000a5c0 <bt_gatt_init>:
{
    a5c0:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    a5c2:	4b1c      	ldr	r3, [pc, #112]	; (a634 <bt_gatt_init+0x74>)
    a5c4:	f3bf 8f5b 	dmb	ish
    a5c8:	2201      	movs	r2, #1
    a5ca:	e853 1f00 	ldrex	r1, [r3]
    a5ce:	2900      	cmp	r1, #0
    a5d0:	d103      	bne.n	a5da <bt_gatt_init+0x1a>
    a5d2:	e843 2000 	strex	r0, r2, [r3]
    a5d6:	2800      	cmp	r0, #0
    a5d8:	d1f7      	bne.n	a5ca <bt_gatt_init+0xa>
    a5da:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    a5de:	d127      	bne.n	a630 <bt_gatt_init+0x70>
    a5e0:	f3bf 8f5b 	dmb	ish
    a5e4:	4b14      	ldr	r3, [pc, #80]	; (a638 <bt_gatt_init+0x78>)
    a5e6:	e853 1f00 	ldrex	r1, [r3]
    a5ea:	2900      	cmp	r1, #0
    a5ec:	d103      	bne.n	a5f6 <bt_gatt_init+0x36>
    a5ee:	e843 2000 	strex	r0, r2, [r3]
    a5f2:	2800      	cmp	r0, #0
    a5f4:	d1f7      	bne.n	a5e6 <bt_gatt_init+0x26>
    a5f6:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
    a5fa:	d101      	bne.n	a600 <bt_gatt_init+0x40>
    a5fc:	f7ff fd2c 	bl	a058 <bt_gatt_service_init.part.0>
	list->head = NULL;
    a600:	4b0e      	ldr	r3, [pc, #56]	; (a63c <bt_gatt_init+0x7c>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
    a602:	490f      	ldr	r1, [pc, #60]	; (a640 <bt_gatt_init+0x80>)
    a604:	480f      	ldr	r0, [pc, #60]	; (a644 <bt_gatt_init+0x84>)
    a606:	2200      	movs	r2, #0
	list->tail = NULL;
    a608:	e9c3 2200 	strd	r2, r2, [r3]
    a60c:	f01e fbc9 	bl	28da2 <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
    a610:	2300      	movs	r3, #0
    a612:	f44f 72a4 	mov.w	r2, #328	; 0x148
    a616:	480b      	ldr	r0, [pc, #44]	; (a644 <bt_gatt_init+0x84>)
    a618:	f015 fed0 	bl	203bc <k_work_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
    a61c:	490a      	ldr	r1, [pc, #40]	; (a648 <bt_gatt_init+0x88>)
    a61e:	480b      	ldr	r0, [pc, #44]	; (a64c <bt_gatt_init+0x8c>)
    a620:	f01e fbbf 	bl	28da2 <k_work_init_delayable>
}
    a624:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    a628:	4809      	ldr	r0, [pc, #36]	; (a650 <bt_gatt_init+0x90>)
    a62a:	2102      	movs	r1, #2
    a62c:	f01a becb 	b.w	253c6 <atomic_or>
    a630:	bd08      	pop	{r3, pc}
    a632:	bf00      	nop
    a634:	200021c8 	.word	0x200021c8
    a638:	200021e4 	.word	0x200021e4
    a63c:	200021a8 	.word	0x200021a8
    a640:	0000a86d 	.word	0x0000a86d
    a644:	20001708 	.word	0x20001708
    a648:	0000ad91 	.word	0x0000ad91
    a64c:	20001780 	.word	0x20001780
    a650:	200017b0 	.word	0x200017b0

0000a654 <bt_gatt_attr_get_handle>:
{
    a654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
    a658:	4603      	mov	r3, r0
    a65a:	b148      	cbz	r0, a670 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
    a65c:	8a00      	ldrh	r0, [r0, #16]
    a65e:	b938      	cbnz	r0, a670 <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    a660:	4912      	ldr	r1, [pc, #72]	; (a6ac <bt_gatt_attr_get_handle+0x58>)
    a662:	f8df e04c 	ldr.w	lr, [pc, #76]	; a6b0 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
    a666:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    a668:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    a66c:	4571      	cmp	r1, lr
    a66e:	d301      	bcc.n	a674 <bt_gatt_attr_get_handle+0x20>
}
    a670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    a674:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
    a678:	42bb      	cmp	r3, r7
    a67a:	d304      	bcc.n	a686 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    a67c:	fb0c 7206 	mla	r2, ip, r6, r7
    a680:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
    a682:	4293      	cmp	r3, r2
    a684:	d90e      	bls.n	a6a4 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
    a686:	19a2      	adds	r2, r4, r6
    a688:	b292      	uxth	r2, r2
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    a68a:	3108      	adds	r1, #8
    a68c:	4614      	mov	r4, r2
    a68e:	e7ed      	b.n	a66c <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
    a690:	fb0c 7805 	mla	r8, ip, r5, r7
    a694:	4543      	cmp	r3, r8
    a696:	d007      	beq.n	a6a8 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    a698:	3501      	adds	r5, #1
    a69a:	1962      	adds	r2, r4, r5
    a69c:	42b5      	cmp	r5, r6
    a69e:	b292      	uxth	r2, r2
    a6a0:	d1f6      	bne.n	a690 <bt_gatt_attr_get_handle+0x3c>
    a6a2:	e7f2      	b.n	a68a <bt_gatt_attr_get_handle+0x36>
    a6a4:	2500      	movs	r5, #0
    a6a6:	e7f8      	b.n	a69a <bt_gatt_attr_get_handle+0x46>
    a6a8:	4610      	mov	r0, r2
    a6aa:	e7e1      	b.n	a670 <bt_gatt_attr_get_handle+0x1c>
    a6ac:	000296fc 	.word	0x000296fc
    a6b0:	0002970c 	.word	0x0002970c

0000a6b4 <bt_gatt_foreach_attr_type>:
{
    a6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a6b8:	b08b      	sub	sp, #44	; 0x2c
    a6ba:	4698      	mov	r8, r3
	if (!num_matches) {
    a6bc:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
{
    a6c0:	9207      	str	r2, [sp, #28]
    a6c2:	4606      	mov	r6, r0
    a6c4:	460f      	mov	r7, r1
	if (!num_matches) {
    a6c6:	b91b      	cbnz	r3, a6d0 <bt_gatt_foreach_attr_type+0x1c>
		num_matches = UINT16_MAX;
    a6c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a6cc:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
	if (start_handle <= last_static_handle) {
    a6d0:	4b39      	ldr	r3, [pc, #228]	; (a7b8 <bt_gatt_foreach_attr_type+0x104>)
    a6d2:	881b      	ldrh	r3, [r3, #0]
    a6d4:	42b3      	cmp	r3, r6
    a6d6:	d230      	bcs.n	a73a <bt_gatt_foreach_attr_type+0x86>
	foreach_attr_type_dyndb(start_handle, end_handle, uuid, attr_data,
    a6d8:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
    a6dc:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
	return list->head;
    a6e0:	4b36      	ldr	r3, [pc, #216]	; (a7bc <bt_gatt_foreach_attr_type+0x108>)
    a6e2:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    a6e4:	2c00      	cmp	r4, #0
    a6e6:	d130      	bne.n	a74a <bt_gatt_foreach_attr_type+0x96>
}
    a6e8:	b00b      	add	sp, #44	; 0x2c
    a6ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
    a6ee:	6861      	ldr	r1, [r4, #4]
    a6f0:	4449      	add	r1, r9
    a6f2:	42b1      	cmp	r1, r6
    a6f4:	d21f      	bcs.n	a736 <bt_gatt_foreach_attr_type+0x82>
				handle += static_svc->attr_count;
    a6f6:	b289      	uxth	r1, r1
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    a6f8:	3408      	adds	r4, #8
    a6fa:	4689      	mov	r9, r1
    a6fc:	4554      	cmp	r4, sl
    a6fe:	d3f6      	bcc.n	a6ee <bt_gatt_foreach_attr_type+0x3a>
    a700:	e7ea      	b.n	a6d8 <bt_gatt_foreach_attr_type+0x24>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    a702:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a704:	6820      	ldr	r0, [r4, #0]
    a706:	9304      	str	r3, [sp, #16]
    a708:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a70a:	9303      	str	r3, [sp, #12]
    a70c:	ab14      	add	r3, sp, #80	; 0x50
    a70e:	e9cd 8301 	strd	r8, r3, [sp, #4]
    a712:	9b07      	ldr	r3, [sp, #28]
    a714:	9300      	str	r3, [sp, #0]
    a716:	4632      	mov	r2, r6
    a718:	463b      	mov	r3, r7
    a71a:	fb0b 0005 	mla	r0, fp, r5, r0
    a71e:	f01a feb8 	bl	25492 <gatt_foreach_iter>
    a722:	2800      	cmp	r0, #0
    a724:	d0e0      	beq.n	a6e8 <bt_gatt_foreach_attr_type+0x34>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    a726:	3501      	adds	r5, #1
    a728:	6863      	ldr	r3, [r4, #4]
    a72a:	eb09 0105 	add.w	r1, r9, r5
    a72e:	42ab      	cmp	r3, r5
    a730:	b289      	uxth	r1, r1
    a732:	d8e6      	bhi.n	a702 <bt_gatt_foreach_attr_type+0x4e>
    a734:	e7e0      	b.n	a6f8 <bt_gatt_foreach_attr_type+0x44>
    a736:	2500      	movs	r5, #0
    a738:	e7f6      	b.n	a728 <bt_gatt_foreach_attr_type+0x74>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    a73a:	4c21      	ldr	r4, [pc, #132]	; (a7c0 <bt_gatt_foreach_attr_type+0x10c>)
    a73c:	f8df a084 	ldr.w	sl, [pc, #132]	; a7c4 <bt_gatt_foreach_attr_type+0x110>
		uint16_t handle = 1;
    a740:	f04f 0901 	mov.w	r9, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
    a744:	f04f 0b14 	mov.w	fp, #20
    a748:	e7d8      	b.n	a6fc <bt_gatt_foreach_attr_type+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    a74a:	3c08      	subs	r4, #8
			struct bt_gatt_attr *attr = &svc->attrs[i];
    a74c:	f04f 0a14 	mov.w	sl, #20
			if (gatt_foreach_iter(attr, attr->handle,
    a750:	f10d 0b26 	add.w	fp, sp, #38	; 0x26
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    a754:	2c00      	cmp	r4, #0
    a756:	d0c7      	beq.n	a6e8 <bt_gatt_foreach_attr_type+0x34>
Z_GENLIST_PEEK_NEXT(slist, snode)
    a758:	f114 0908 	adds.w	r9, r4, #8
    a75c:	d029      	beq.n	a7b2 <bt_gatt_foreach_attr_type+0xfe>
	return node->next;
    a75e:	68a3      	ldr	r3, [r4, #8]
		next = SYS_SLIST_PEEK_NEXT_CONTAINER(svc, node);
    a760:	b33b      	cbz	r3, a7b2 <bt_gatt_foreach_attr_type+0xfe>
		if (next) {
    a762:	f1b3 0508 	subs.w	r5, r3, #8
    a766:	d01d      	beq.n	a7a4 <bt_gatt_foreach_attr_type+0xf0>
			if (next->attrs[0].handle <= start_handle) {
    a768:	f853 3c08 	ldr.w	r3, [r3, #-8]
    a76c:	8a1b      	ldrh	r3, [r3, #16]
    a76e:	42b3      	cmp	r3, r6
    a770:	d81f      	bhi.n	a7b2 <bt_gatt_foreach_attr_type+0xfe>
    a772:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    a774:	2c00      	cmp	r4, #0
    a776:	d0b7      	beq.n	a6e8 <bt_gatt_foreach_attr_type+0x34>
    a778:	3c08      	subs	r4, #8
    a77a:	e7eb      	b.n	a754 <bt_gatt_foreach_attr_type+0xa0>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    a77c:	6820      	ldr	r0, [r4, #0]
			if (gatt_foreach_iter(attr, attr->handle,
    a77e:	9b16      	ldr	r3, [sp, #88]	; 0x58
			struct bt_gatt_attr *attr = &svc->attrs[i];
    a780:	fb0a 0005 	mla	r0, sl, r5, r0
			if (gatt_foreach_iter(attr, attr->handle,
    a784:	4632      	mov	r2, r6
    a786:	8a01      	ldrh	r1, [r0, #16]
    a788:	9304      	str	r3, [sp, #16]
    a78a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a78c:	f8cd 8004 	str.w	r8, [sp, #4]
    a790:	e9cd b302 	strd	fp, r3, [sp, #8]
    a794:	9b07      	ldr	r3, [sp, #28]
    a796:	9300      	str	r3, [sp, #0]
    a798:	463b      	mov	r3, r7
    a79a:	f01a fe7a 	bl	25492 <gatt_foreach_iter>
    a79e:	2800      	cmp	r0, #0
    a7a0:	d0a2      	beq.n	a6e8 <bt_gatt_foreach_attr_type+0x34>
		for (i = 0; i < svc->attr_count; i++) {
    a7a2:	3501      	adds	r5, #1
    a7a4:	6863      	ldr	r3, [r4, #4]
    a7a6:	429d      	cmp	r5, r3
    a7a8:	d3e8      	bcc.n	a77c <bt_gatt_foreach_attr_type+0xc8>
Z_GENLIST_PEEK_NEXT(slist, snode)
    a7aa:	f1b9 0f00 	cmp.w	r9, #0
    a7ae:	d1e0      	bne.n	a772 <bt_gatt_foreach_attr_type+0xbe>
    a7b0:	e79a      	b.n	a6e8 <bt_gatt_foreach_attr_type+0x34>
    a7b2:	2500      	movs	r5, #0
    a7b4:	e7f6      	b.n	a7a4 <bt_gatt_foreach_attr_type+0xf0>
    a7b6:	bf00      	nop
    a7b8:	200036d0 	.word	0x200036d0
    a7bc:	200021c0 	.word	0x200021c0
    a7c0:	000296fc 	.word	0x000296fc
    a7c4:	0002970c 	.word	0x0002970c

0000a7c8 <db_hash_gen>:
{
    a7c8:	b530      	push	{r4, r5, lr}
    a7ca:	b0c9      	sub	sp, #292	; 0x124
	uint8_t key[16] = {};
    a7cc:	2300      	movs	r3, #0
{
    a7ce:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    a7d0:	aa1c      	add	r2, sp, #112	; 0x70
    a7d2:	4669      	mov	r1, sp
    a7d4:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
    a7d6:	e9cd 3300 	strd	r3, r3, [sp]
    a7da:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    a7de:	f019 f8c2 	bl	23966 <tc_cmac_setup>
    a7e2:	b958      	cbnz	r0, a7fc <db_hash_gen+0x34>
    a7e4:	491a      	ldr	r1, [pc, #104]	; (a850 <db_hash_gen+0x88>)
    a7e6:	4b1b      	ldr	r3, [pc, #108]	; (a854 <db_hash_gen+0x8c>)
		BT_ERR("Unable to setup AES CMAC");
    a7e8:	481b      	ldr	r0, [pc, #108]	; (a858 <db_hash_gen+0x90>)
    a7ea:	1ac9      	subs	r1, r1, r3
    a7ec:	08c9      	lsrs	r1, r1, #3
    a7ee:	0189      	lsls	r1, r1, #6
    a7f0:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to calculate hash");
    a7f4:	f017 f979 	bl	21aea <log_0>
}
    a7f8:	b049      	add	sp, #292	; 0x124
    a7fa:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    a7fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a800:	2001      	movs	r0, #1
    a802:	4a16      	ldr	r2, [pc, #88]	; (a85c <db_hash_gen+0x94>)
    a804:	ab04      	add	r3, sp, #16
    a806:	f01a ffac 	bl	25762 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
    a80a:	4815      	ldr	r0, [pc, #84]	; (a860 <db_hash_gen+0x98>)
    a80c:	a904      	add	r1, sp, #16
    a80e:	f019 f940 	bl	23a92 <tc_cmac_final>
    a812:	b940      	cbnz	r0, a826 <db_hash_gen+0x5e>
    a814:	490e      	ldr	r1, [pc, #56]	; (a850 <db_hash_gen+0x88>)
    a816:	4b0f      	ldr	r3, [pc, #60]	; (a854 <db_hash_gen+0x8c>)
		BT_ERR("Unable to calculate hash");
    a818:	4812      	ldr	r0, [pc, #72]	; (a864 <db_hash_gen+0x9c>)
    a81a:	1ac9      	subs	r1, r1, r3
    a81c:	08c9      	lsrs	r1, r1, #3
    a81e:	0189      	lsls	r1, r1, #6
    a820:	f041 0101 	orr.w	r1, r1, #1
    a824:	e7e6      	b.n	a7f4 <db_hash_gen+0x2c>
    a826:	4b0e      	ldr	r3, [pc, #56]	; (a860 <db_hash_gen+0x98>)
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
    a828:	2208      	movs	r2, #8
    a82a:	f103 010f 	add.w	r1, r3, #15
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
    a82e:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    a830:	780d      	ldrb	r5, [r1, #0]
    a832:	f803 5b01 	strb.w	r5, [r3], #1
	for (i = 0; i < (length/2); i++) {
    a836:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
    a838:	f801 0901 	strb.w	r0, [r1], #-1
	for (i = 0; i < (length/2); i++) {
    a83c:	d1f7      	bne.n	a82e <db_hash_gen+0x66>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
    a83e:	b10c      	cbz	r4, a844 <db_hash_gen+0x7c>
		db_hash_store();
    a840:	f7ff fa26 	bl	9c90 <db_hash_store>
    a844:	2104      	movs	r1, #4
    a846:	4808      	ldr	r0, [pc, #32]	; (a868 <db_hash_gen+0xa0>)
    a848:	f01a fdbd 	bl	253c6 <atomic_or>
    a84c:	e7d4      	b.n	a7f8 <db_hash_gen+0x30>
    a84e:	bf00      	nop
    a850:	00029958 	.word	0x00029958
    a854:	00029870 	.word	0x00029870
    a858:	0002c4fc 	.word	0x0002c4fc
    a85c:	0002531b 	.word	0x0002531b
    a860:	200016e8 	.word	0x200016e8
    a864:	0002c515 	.word	0x0002c515
    a868:	200017b0 	.word	0x200017b0

0000a86c <db_hash_process>:
{
    a86c:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a86e:	4817      	ldr	r0, [pc, #92]	; (a8cc <db_hash_process+0x60>)
    a870:	f06f 0108 	mvn.w	r1, #8
    a874:	f01a fdfe 	bl	25474 <atomic_and>
	if (atomic_test_and_clear_bit(gatt_sc.flags, DB_HASH_LOAD)) {
    a878:	0702      	lsls	r2, r0, #28
    a87a:	d522      	bpl.n	a8c2 <db_hash_process+0x56>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    a87c:	4813      	ldr	r0, [pc, #76]	; (a8cc <db_hash_process+0x60>)
    a87e:	f01a fd46 	bl	2530e <atomic_get>
    a882:	4603      	mov	r3, r0
		if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
    a884:	075b      	lsls	r3, r3, #29
    a886:	f3c0 0080 	ubfx	r0, r0, #2, #1
    a88a:	d401      	bmi.n	a890 <db_hash_process+0x24>
			db_hash_gen(false);
    a88c:	f7ff ff9c 	bl	a7c8 <db_hash_gen>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
    a890:	490f      	ldr	r1, [pc, #60]	; (a8d0 <db_hash_process+0x64>)
    a892:	2210      	movs	r2, #16
    a894:	1888      	adds	r0, r1, r2
    a896:	f019 fa76 	bl	23d86 <memcmp>
    a89a:	b948      	cbnz	r0, a8b0 <db_hash_process+0x44>
			k_work_cancel_delayable(&gatt_sc.work);
    a89c:	480d      	ldr	r0, [pc, #52]	; (a8d4 <db_hash_process+0x68>)
    a89e:	f01e faa0 	bl	28de2 <k_work_cancel_delayable>
}
    a8a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a8a6:	4809      	ldr	r0, [pc, #36]	; (a8cc <db_hash_process+0x60>)
    a8a8:	f06f 0101 	mvn.w	r1, #1
    a8ac:	f01a bde2 	b.w	25474 <atomic_and>
		sc_indicate(0x0001, 0xffff);
    a8b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a8b4:	2001      	movs	r0, #1
    a8b6:	f7ff fdc5 	bl	a444 <sc_indicate>
}
    a8ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		db_hash_store();
    a8be:	f7ff b9e7 	b.w	9c90 <db_hash_store>
}
    a8c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	db_hash_gen(true);
    a8c6:	2001      	movs	r0, #1
    a8c8:	f7ff bf7e 	b.w	a7c8 <db_hash_gen>
    a8cc:	200017b0 	.word	0x200017b0
    a8d0:	200016e8 	.word	0x200016e8
    a8d4:	20001780 	.word	0x20001780

0000a8d8 <bt_gatt_service_register>:
{
    a8d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a8dc:	4b6a      	ldr	r3, [pc, #424]	; (aa88 <bt_gatt_service_register+0x1b0>)
    a8de:	f3bf 8f5b 	dmb	ish
    a8e2:	4605      	mov	r5, r0
    a8e4:	2201      	movs	r2, #1
    a8e6:	e853 1f00 	ldrex	r1, [r3]
    a8ea:	2900      	cmp	r1, #0
    a8ec:	d103      	bne.n	a8f6 <bt_gatt_service_register+0x1e>
    a8ee:	e843 2000 	strex	r0, r2, [r3]
    a8f2:	2800      	cmp	r0, #0
    a8f4:	d1f7      	bne.n	a8e6 <bt_gatt_service_register+0xe>
    a8f6:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
    a8fa:	d101      	bne.n	a900 <bt_gatt_service_register+0x28>
    a8fc:	f7ff fbac 	bl	a058 <bt_gatt_service_init.part.0>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    a900:	682b      	ldr	r3, [r5, #0]
    a902:	2400      	movs	r4, #0
    a904:	6818      	ldr	r0, [r3, #0]
    a906:	f88d 4000 	strb.w	r4, [sp]
    a90a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    a90e:	4669      	mov	r1, sp
    a910:	f8ad 3002 	strh.w	r3, [sp, #2]
    a914:	f019 fc91 	bl	2423a <bt_uuid_cmp>
    a918:	b928      	cbnz	r0, a926 <bt_gatt_service_register+0x4e>
		return -EALREADY;
    a91a:	f06f 0477 	mvn.w	r4, #119	; 0x77
}
    a91e:	4620      	mov	r0, r4
    a920:	b003      	add	sp, #12
    a922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
    a926:	682b      	ldr	r3, [r5, #0]
    a928:	a901      	add	r1, sp, #4
    a92a:	6818      	ldr	r0, [r3, #0]
    a92c:	f88d 4004 	strb.w	r4, [sp, #4]
    a930:	f641 0301 	movw	r3, #6145	; 0x1801
    a934:	f8ad 3006 	strh.w	r3, [sp, #6]
    a938:	f019 fc7f 	bl	2423a <bt_uuid_cmp>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    a93c:	2800      	cmp	r0, #0
    a93e:	d0ec      	beq.n	a91a <bt_gatt_service_register+0x42>
	return list->head;
    a940:	4c52      	ldr	r4, [pc, #328]	; (aa8c <bt_gatt_service_register+0x1b4>)
	k_sched_lock();
    a942:	f015 fdcd 	bl	204e0 <k_sched_lock>
	if (sys_slist_is_empty(&db)) {
    a946:	6826      	ldr	r6, [r4, #0]
	struct bt_gatt_attr *attrs = svc->attrs;
    a948:	f8d5 8000 	ldr.w	r8, [r5]
	uint16_t count = svc->attr_count;
    a94c:	f8b5 9004 	ldrh.w	r9, [r5, #4]
	if (sys_slist_is_empty(&db)) {
    a950:	b936      	cbnz	r6, a960 <bt_gatt_service_register+0x88>
		handle = last_static_handle;
    a952:	4b4f      	ldr	r3, [pc, #316]	; (aa90 <bt_gatt_service_register+0x1b8>)
    a954:	881f      	ldrh	r7, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, found_attr, &attr);
    a956:	f8df b13c 	ldr.w	fp, [pc, #316]	; aa94 <bt_gatt_service_register+0x1bc>
	const struct bt_gatt_attr *attr = NULL;
    a95a:	f04f 0a00 	mov.w	sl, #0
    a95e:	e01a      	b.n	a996 <bt_gatt_service_register+0xbe>
	return list->tail;
    a960:	6863      	ldr	r3, [r4, #4]
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    a962:	2b00      	cmp	r3, #0
    a964:	f000 808d 	beq.w	aa82 <bt_gatt_service_register+0x1aa>
	handle = last->attrs[last->attr_count - 1].handle;
    a968:	e953 3202 	ldrd	r3, r2, [r3, #-8]
    a96c:	2114      	movs	r1, #20
    a96e:	fb01 3302 	mla	r3, r1, r2, r3
    a972:	f833 7c04 	ldrh.w	r7, [r3, #-4]
    a976:	463e      	mov	r6, r7
    a978:	e7ed      	b.n	a956 <bt_gatt_service_register+0x7e>
		if (!attrs->handle) {
    a97a:	f8b8 1010 	ldrh.w	r1, [r8, #16]
    a97e:	bb39      	cbnz	r1, a9d0 <bt_gatt_service_register+0xf8>
			attrs->handle = ++handle;
    a980:	1c79      	adds	r1, r7, #1
    a982:	b289      	uxth	r1, r1
    a984:	f8a8 1010 	strh.w	r1, [r8, #16]
	for (; attrs && count; attrs++, count--) {
    a988:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    a98c:	f108 0814 	add.w	r8, r8, #20
    a990:	fa1f f989 	uxth.w	r9, r9
    a994:	460f      	mov	r7, r1
    a996:	f1b8 0f00 	cmp.w	r8, #0
    a99a:	d002      	beq.n	a9a2 <bt_gatt_service_register+0xca>
    a99c:	f1b9 0f00 	cmp.w	r9, #0
    a9a0:	d1eb      	bne.n	a97a <bt_gatt_service_register+0xa2>
	if (last_handle == 0 || svc->attrs[0].handle > last_handle) {
    a9a2:	b11e      	cbz	r6, a9ac <bt_gatt_service_register+0xd4>
    a9a4:	682b      	ldr	r3, [r5, #0]
    a9a6:	8a18      	ldrh	r0, [r3, #16]
    a9a8:	4286      	cmp	r6, r0
    a9aa:	d22f      	bcs.n	aa0c <bt_gatt_service_register+0x134>
	parent->next = child;
    a9ac:	2200      	movs	r2, #0
		sys_slist_append(&db, &svc->node);
    a9ae:	f105 0308 	add.w	r3, r5, #8
    a9b2:	60aa      	str	r2, [r5, #8]
	return list->tail;
    a9b4:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    a9b6:	2a00      	cmp	r2, #0
    a9b8:	d146      	bne.n	aa48 <bt_gatt_service_register+0x170>
	list->head = node;
    a9ba:	e9c4 3300 	strd	r3, r3, [r4]
	if (!atomic_get(&init)) {
    a9be:	4836      	ldr	r0, [pc, #216]	; (aa98 <bt_gatt_service_register+0x1c0>)
    a9c0:	f01a fca5 	bl	2530e <atomic_get>
    a9c4:	4604      	mov	r4, r0
    a9c6:	2800      	cmp	r0, #0
    a9c8:	d14b      	bne.n	aa62 <bt_gatt_service_register+0x18a>
		k_sched_unlock();
    a9ca:	f015 ff57 	bl	2087c <k_sched_unlock>
		return 0;
    a9ce:	e7a6      	b.n	a91e <bt_gatt_service_register+0x46>
		} else if (attrs->handle > handle) {
    a9d0:	42b9      	cmp	r1, r7
    a9d2:	d8d9      	bhi.n	a988 <bt_gatt_service_register+0xb0>
	bt_gatt_foreach_attr(handle, handle, found_attr, &attr);
    a9d4:	ab01      	add	r3, sp, #4
    a9d6:	465a      	mov	r2, fp
    a9d8:	4608      	mov	r0, r1
	const struct bt_gatt_attr *attr = NULL;
    a9da:	f8cd a004 	str.w	sl, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, found_attr, &attr);
    a9de:	f01a fec0 	bl	25762 <bt_gatt_foreach_attr>
	return attr;
    a9e2:	9b01      	ldr	r3, [sp, #4]
		} else if (find_attr(attrs->handle)) {
    a9e4:	b183      	cbz	r3, aa08 <bt_gatt_service_register+0x130>
    a9e6:	4b2d      	ldr	r3, [pc, #180]	; (aa9c <bt_gatt_service_register+0x1c4>)
    a9e8:	4a2d      	ldr	r2, [pc, #180]	; (aaa0 <bt_gatt_service_register+0x1c8>)
			BT_ERR("Unable to register handle 0x%04x",
    a9ea:	f8b8 1010 	ldrh.w	r1, [r8, #16]
    a9ee:	482d      	ldr	r0, [pc, #180]	; (aaa4 <bt_gatt_service_register+0x1cc>)
    a9f0:	1ad2      	subs	r2, r2, r3
    a9f2:	08d2      	lsrs	r2, r2, #3
    a9f4:	0192      	lsls	r2, r2, #6
    a9f6:	f042 0201 	orr.w	r2, r2, #1
    a9fa:	f017 f883 	bl	21b04 <log_1>
		return err;
    a9fe:	f06f 0415 	mvn.w	r4, #21
		k_sched_unlock();
    aa02:	f015 ff3b 	bl	2087c <k_sched_unlock>
		return err;
    aa06:	e78a      	b.n	a91e <bt_gatt_service_register+0x46>
    aa08:	4639      	mov	r1, r7
    aa0a:	e7bd      	b.n	a988 <bt_gatt_service_register+0xb0>
	return list->head;
    aa0c:	6821      	ldr	r1, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, tmp, node) {
    aa0e:	2900      	cmp	r1, #0
    aa10:	d0d5      	beq.n	a9be <bt_gatt_service_register+0xe6>
    aa12:	f1a1 0308 	sub.w	r3, r1, #8
    aa16:	2200      	movs	r2, #0
    aa18:	2b00      	cmp	r3, #0
    aa1a:	d0d0      	beq.n	a9be <bt_gatt_service_register+0xe6>
		if (tmp->attrs[0].handle > svc->attrs[0].handle) {
    aa1c:	681e      	ldr	r6, [r3, #0]
    aa1e:	8a36      	ldrh	r6, [r6, #16]
    aa20:	4286      	cmp	r6, r0
    aa22:	d914      	bls.n	aa4e <bt_gatt_service_register+0x176>
				sys_slist_insert(&db, &prev->node, &svc->node);
    aa24:	f105 0308 	add.w	r3, r5, #8
			if (prev) {
    aa28:	b112      	cbz	r2, aa30 <bt_gatt_service_register+0x158>
Z_GENLIST_INSERT(slist, snode)
    aa2a:	f112 0f08 	cmn.w	r2, #8
    aa2e:	d105      	bne.n	aa3c <bt_gatt_service_register+0x164>
Z_GENLIST_PREPEND(slist, snode)
    aa30:	6862      	ldr	r2, [r4, #4]
	parent->next = child;
    aa32:	60a9      	str	r1, [r5, #8]
	list->head = node;
    aa34:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    aa36:	2a00      	cmp	r2, #0
    aa38:	d1c1      	bne.n	a9be <bt_gatt_service_register+0xe6>
    aa3a:	e006      	b.n	aa4a <bt_gatt_service_register+0x172>
	return node->next;
    aa3c:	6891      	ldr	r1, [r2, #8]
	parent->next = child;
    aa3e:	60a9      	str	r1, [r5, #8]
Z_GENLIST_INSERT(slist, snode)
    aa40:	2900      	cmp	r1, #0
    aa42:	d0b7      	beq.n	a9b4 <bt_gatt_service_register+0xdc>
	parent->next = child;
    aa44:	6093      	str	r3, [r2, #8]
	if (err < 0) {
    aa46:	e7ba      	b.n	a9be <bt_gatt_service_register+0xe6>
    aa48:	6013      	str	r3, [r2, #0]
	list->tail = node;
    aa4a:	6063      	str	r3, [r4, #4]
    aa4c:	e7b7      	b.n	a9be <bt_gatt_service_register+0xe6>
Z_GENLIST_PEEK_NEXT(slist, snode)
    aa4e:	f113 0f08 	cmn.w	r3, #8
    aa52:	d0b4      	beq.n	a9be <bt_gatt_service_register+0xe6>
	return node->next;
    aa54:	689e      	ldr	r6, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, tmp, node) {
    aa56:	2e00      	cmp	r6, #0
    aa58:	d0b1      	beq.n	a9be <bt_gatt_service_register+0xe6>
    aa5a:	461a      	mov	r2, r3
    aa5c:	f1a6 0308 	sub.w	r3, r6, #8
    aa60:	e7da      	b.n	aa18 <bt_gatt_service_register+0x140>
		    svc->attrs[svc->attr_count - 1].handle);
    aa62:	e9d5 2300 	ldrd	r2, r3, [r5]
	sc_indicate(svc->attrs[0].handle,
    aa66:	2114      	movs	r1, #20
    aa68:	fb01 2303 	mla	r3, r1, r3, r2
    aa6c:	8a10      	ldrh	r0, [r2, #16]
    aa6e:	f833 1c04 	ldrh.w	r1, [r3, #-4]
    aa72:	f7ff fce7 	bl	a444 <sc_indicate>
	return 0;
    aa76:	2400      	movs	r4, #0
	db_changed();
    aa78:	f7ff fc0a 	bl	a290 <db_changed>
	k_sched_unlock();
    aa7c:	f015 fefe 	bl	2087c <k_sched_unlock>
	return 0;
    aa80:	e74d      	b.n	a91e <bt_gatt_service_register+0x46>
	handle = last->attrs[last->attr_count - 1].handle;
    aa82:	681b      	ldr	r3, [r3, #0]
    aa84:	deff      	udf	#255	; 0xff
    aa86:	bf00      	nop
    aa88:	200021e4 	.word	0x200021e4
    aa8c:	200021c0 	.word	0x200021c0
    aa90:	200036d0 	.word	0x200036d0
    aa94:	000252c3 	.word	0x000252c3
    aa98:	200021c8 	.word	0x200021c8
    aa9c:	00029870 	.word	0x00029870
    aaa0:	00029958 	.word	0x00029958
    aaa4:	0002c52e 	.word	0x0002c52e

0000aaa8 <ccc_set_direct>:
{
    aaa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    aaac:	b0b9      	sub	sp, #228	; 0xe4
    aaae:	4688      	mov	r8, r1
    aab0:	4614      	mov	r4, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
    aab2:	493f      	ldr	r1, [pc, #252]	; (abb0 <ccc_set_direct+0x108>)
    aab4:	9840      	ldr	r0, [sp, #256]	; 0x100
    aab6:	466a      	mov	r2, sp
{
    aab8:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
    aaba:	f017 fe1a 	bl	226f2 <settings_name_steq>
    aabe:	b978      	cbnz	r0, aae0 <ccc_set_direct+0x38>
    aac0:	4b3c      	ldr	r3, [pc, #240]	; (abb4 <ccc_set_direct+0x10c>)
    aac2:	493d      	ldr	r1, [pc, #244]	; (abb8 <ccc_set_direct+0x110>)
			BT_ERR("Invalid key");
    aac4:	483d      	ldr	r0, [pc, #244]	; (abbc <ccc_set_direct+0x114>)
    aac6:	1ac9      	subs	r1, r1, r3
    aac8:	08c9      	lsrs	r1, r1, #3
    aaca:	0189      	lsls	r1, r1, #6
    aacc:	f041 0101 	orr.w	r1, r1, #1
    aad0:	f017 f80b 	bl	21aea <log_0>
			return -EINVAL;
    aad4:	f06f 0515 	mvn.w	r5, #21
}
    aad8:	4628      	mov	r0, r5
    aada:	b039      	add	sp, #228	; 0xe4
    aadc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
    aae0:	9e00      	ldr	r6, [sp, #0]
		settings_name_next(name, &next);
    aae2:	a901      	add	r1, sp, #4
    aae4:	4630      	mov	r0, r6
    aae6:	f017 fe27 	bl	22738 <settings_name_next>
		if (!name) {
    aaea:	b96e      	cbnz	r6, ab08 <ccc_set_direct+0x60>
    aaec:	4932      	ldr	r1, [pc, #200]	; (abb8 <ccc_set_direct+0x110>)
    aaee:	4b31      	ldr	r3, [pc, #196]	; (abb4 <ccc_set_direct+0x10c>)
			BT_ERR("Insufficient number of arguments");
    aaf0:	4833      	ldr	r0, [pc, #204]	; (abc0 <ccc_set_direct+0x118>)
    aaf2:	1ac9      	subs	r1, r1, r3
    aaf4:	08c9      	lsrs	r1, r1, #3
    aaf6:	0189      	lsls	r1, r1, #6
    aaf8:	f041 0101 	orr.w	r1, r1, #1
    aafc:	f016 fff5 	bl	21aea <log_0>
			return -EINVAL;
    ab00:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
    ab04:	4625      	mov	r5, r4
    ab06:	e7e7      	b.n	aad8 <ccc_set_direct+0x30>
		} else if (!next) {
    ab08:	9801      	ldr	r0, [sp, #4]
    ab0a:	b9c0      	cbnz	r0, ab3e <ccc_set_direct+0x96>
		err = bt_settings_decode_key(name, &addr);
    ab0c:	f10d 0908 	add.w	r9, sp, #8
			load.addr_with_id.id = BT_ID_DEFAULT;
    ab10:	2300      	movs	r3, #0
		err = bt_settings_decode_key(name, &addr);
    ab12:	4649      	mov	r1, r9
    ab14:	4630      	mov	r0, r6
			load.addr_with_id.id = BT_ID_DEFAULT;
    ab16:	f88d 3014 	strb.w	r3, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
    ab1a:	f019 f9bc 	bl	23e96 <bt_settings_decode_key>
		if (err) {
    ab1e:	4605      	mov	r5, r0
    ab20:	b1f8      	cbz	r0, ab62 <ccc_set_direct+0xba>
    ab22:	4a24      	ldr	r2, [pc, #144]	; (abb4 <ccc_set_direct+0x10c>)
    ab24:	4c24      	ldr	r4, [pc, #144]	; (abb8 <ccc_set_direct+0x110>)
    ab26:	4630      	mov	r0, r6
    ab28:	1aa4      	subs	r4, r4, r2
    ab2a:	08e4      	lsrs	r4, r4, #3
    ab2c:	f7f7 ffd4 	bl	2ad8 <z_log_strdup>
			BT_ERR("Unable to decode address %s", log_strdup(name));
    ab30:	01a4      	lsls	r4, r4, #6
    ab32:	f044 0401 	orr.w	r4, r4, #1
    ab36:	4601      	mov	r1, r0
    ab38:	4622      	mov	r2, r4
    ab3a:	4822      	ldr	r0, [pc, #136]	; (abc4 <ccc_set_direct+0x11c>)
    ab3c:	e00e      	b.n	ab5c <ccc_set_direct+0xb4>
			unsigned long next_id = strtoul(next, NULL, 10);
    ab3e:	2100      	movs	r1, #0
    ab40:	220a      	movs	r2, #10
    ab42:	f019 f85e 	bl	23c02 <strtoul>
			if (next_id >= CONFIG_BT_ID_MAX) {
    ab46:	4601      	mov	r1, r0
    ab48:	2800      	cmp	r0, #0
    ab4a:	d0df      	beq.n	ab0c <ccc_set_direct+0x64>
    ab4c:	4a1a      	ldr	r2, [pc, #104]	; (abb8 <ccc_set_direct+0x110>)
    ab4e:	4b19      	ldr	r3, [pc, #100]	; (abb4 <ccc_set_direct+0x10c>)
				BT_ERR("Invalid local identity %lu", next_id);
    ab50:	481d      	ldr	r0, [pc, #116]	; (abc8 <ccc_set_direct+0x120>)
    ab52:	1ad2      	subs	r2, r2, r3
    ab54:	08d2      	lsrs	r2, r2, #3
    ab56:	0192      	lsls	r2, r2, #6
    ab58:	f042 0201 	orr.w	r2, r2, #1
			BT_ERR("Unable to decode address %s", log_strdup(name));
    ab5c:	f016 ffd2 	bl	21b04 <log_1>
    ab60:	e7ce      	b.n	ab00 <ccc_set_direct+0x58>
		load.addr_with_id.addr = &addr;
    ab62:	f8cd 9010 	str.w	r9, [sp, #16]
		if (len_rd) {
    ab66:	f1b8 0f00 	cmp.w	r8, #0
    ab6a:	d01d      	beq.n	aba8 <ccc_set_direct+0x100>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
    ab6c:	ae08      	add	r6, sp, #32
    ab6e:	22c0      	movs	r2, #192	; 0xc0
    ab70:	4631      	mov	r1, r6
    ab72:	4638      	mov	r0, r7
    ab74:	47a0      	blx	r4
			if (len < 0) {
    ab76:	1e04      	subs	r4, r0, #0
    ab78:	da0b      	bge.n	ab92 <ccc_set_direct+0xea>
    ab7a:	4b0e      	ldr	r3, [pc, #56]	; (abb4 <ccc_set_direct+0x10c>)
    ab7c:	4a0e      	ldr	r2, [pc, #56]	; (abb8 <ccc_set_direct+0x110>)
				BT_ERR("Failed to decode value (err %zd)", len);
    ab7e:	4813      	ldr	r0, [pc, #76]	; (abcc <ccc_set_direct+0x124>)
    ab80:	1ad2      	subs	r2, r2, r3
    ab82:	08d2      	lsrs	r2, r2, #3
    ab84:	0192      	lsls	r2, r2, #6
    ab86:	f042 0201 	orr.w	r2, r2, #1
    ab8a:	4621      	mov	r1, r4
    ab8c:	f016 ffba 	bl	21b04 <log_1>
				return len;
    ab90:	e7b8      	b.n	ab04 <ccc_set_direct+0x5c>
			load.count = len / sizeof(*ccc_store);
    ab92:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
    ab94:	9606      	str	r6, [sp, #24]
			load.count = len / sizeof(*ccc_store);
    ab96:	9407      	str	r4, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
    ab98:	4a0d      	ldr	r2, [pc, #52]	; (abd0 <ccc_set_direct+0x128>)
    ab9a:	ab04      	add	r3, sp, #16
    ab9c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    aba0:	2001      	movs	r0, #1
    aba2:	f01a fdde 	bl	25762 <bt_gatt_foreach_attr>
	return 0;
    aba6:	e797      	b.n	aad8 <ccc_set_direct+0x30>
			load.count = 0;
    aba8:	e9cd 0006 	strd	r0, r0, [sp, #24]
    abac:	e7f4      	b.n	ab98 <ccc_set_direct+0xf0>
    abae:	bf00      	nop
    abb0:	0002c54f 	.word	0x0002c54f
    abb4:	00029870 	.word	0x00029870
    abb8:	00029958 	.word	0x00029958
    abbc:	0002c556 	.word	0x0002c556
    abc0:	0002b425 	.word	0x0002b425
    abc4:	0002c422 	.word	0x0002c422
    abc8:	0002c43e 	.word	0x0002c43e
    abcc:	0002c3ac 	.word	0x0002c3ac
    abd0:	0000a1cd 	.word	0x0000a1cd

0000abd4 <gatt_indicate>:
{
    abd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    abd8:	4615      	mov	r5, r2
    abda:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
    abdc:	2214      	movs	r2, #20
    abde:	6869      	ldr	r1, [r5, #4]
{
    abe0:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
    abe2:	f01a fdcb 	bl	2577c <bt_gatt_check_perm>
    abe6:	b170      	cbz	r0, ac06 <gatt_indicate+0x32>
    abe8:	4b28      	ldr	r3, [pc, #160]	; (ac8c <gatt_indicate+0xb8>)
    abea:	4929      	ldr	r1, [pc, #164]	; (ac90 <gatt_indicate+0xbc>)
		BT_WARN("Link is not encrypted");
    abec:	4829      	ldr	r0, [pc, #164]	; (ac94 <gatt_indicate+0xc0>)
    abee:	1ac9      	subs	r1, r1, r3
    abf0:	08c9      	lsrs	r1, r1, #3
    abf2:	0189      	lsls	r1, r1, #6
    abf4:	f041 0102 	orr.w	r1, r1, #2
    abf8:	f016 ff77 	bl	21aea <log_0>
		return -EPERM;
    abfc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
}
    ac00:	4628      	mov	r0, r5
    ac02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    ac06:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    ac0a:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
    ac0c:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    ac0e:	f7fe ff55 	bl	9abc <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
    ac12:	3602      	adds	r6, #2
	if (!req) {
    ac14:	4604      	mov	r4, r0
    ac16:	b910      	cbnz	r0, ac1e <gatt_indicate+0x4a>
		return -ENOMEM;
    ac18:	f06f 050b 	mvn.w	r5, #11
    ac1c:	e7f0      	b.n	ac00 <gatt_indicate+0x2c>
	req->func = func;
    ac1e:	4b1e      	ldr	r3, [pc, #120]	; (ac98 <gatt_indicate+0xc4>)
    ac20:	6043      	str	r3, [r0, #4]
	req->user_data = params;
    ac22:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
    ac24:	4632      	mov	r2, r6
    ac26:	211d      	movs	r1, #29
    ac28:	4640      	mov	r0, r8
    ac2a:	f7fe fc8b 	bl	9544 <bt_att_create_pdu>
	if (!buf) {
    ac2e:	4606      	mov	r6, r0
    ac30:	b968      	cbnz	r0, ac4e <gatt_indicate+0x7a>
    ac32:	4b16      	ldr	r3, [pc, #88]	; (ac8c <gatt_indicate+0xb8>)
    ac34:	4916      	ldr	r1, [pc, #88]	; (ac90 <gatt_indicate+0xbc>)
		BT_WARN("No buffer available to send indication");
    ac36:	4819      	ldr	r0, [pc, #100]	; (ac9c <gatt_indicate+0xc8>)
    ac38:	1ac9      	subs	r1, r1, r3
    ac3a:	08c9      	lsrs	r1, r1, #3
    ac3c:	0189      	lsls	r1, r1, #6
    ac3e:	f041 0102 	orr.w	r1, r1, #2
    ac42:	f016 ff52 	bl	21aea <log_0>
		bt_att_req_free(req);
    ac46:	4620      	mov	r0, r4
    ac48:	f7fe ff4e 	bl	9ae8 <bt_att_req_free>
    ac4c:	e7e4      	b.n	ac18 <gatt_indicate+0x44>
	return net_buf_simple_add(&buf->b, len);
    ac4e:	f100 0a08 	add.w	sl, r0, #8
    ac52:	2102      	movs	r1, #2
    ac54:	4650      	mov	r0, sl
    ac56:	f01d faf7 	bl	28248 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    ac5a:	4607      	mov	r7, r0
    ac5c:	8aa9      	ldrh	r1, [r5, #20]
    ac5e:	f827 9b02 	strh.w	r9, [r7], #2
    ac62:	4650      	mov	r0, sl
    ac64:	f01d faf0 	bl	28248 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    ac68:	8aaa      	ldrh	r2, [r5, #20]
    ac6a:	6929      	ldr	r1, [r5, #16]
    ac6c:	4638      	mov	r0, r7
    ac6e:	f019 f89b 	bl	23da8 <memcpy>
	req->buf = buf;
    ac72:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
    ac74:	4621      	mov	r1, r4
    ac76:	4640      	mov	r0, r8
    ac78:	f01a fb0e 	bl	25298 <bt_att_req_send>
	if (err) {
    ac7c:	4605      	mov	r5, r0
    ac7e:	2800      	cmp	r0, #0
    ac80:	d0be      	beq.n	ac00 <gatt_indicate+0x2c>
		bt_att_req_free(req);
    ac82:	4620      	mov	r0, r4
    ac84:	f7fe ff30 	bl	9ae8 <bt_att_req_free>
    ac88:	e7ba      	b.n	ac00 <gatt_indicate+0x2c>
    ac8a:	bf00      	nop
    ac8c:	00029870 	.word	0x00029870
    ac90:	00029958 	.word	0x00029958
    ac94:	0002c562 	.word	0x0002c562
    ac98:	000252dd 	.word	0x000252dd
    ac9c:	0002c578 	.word	0x0002c578

0000aca0 <bt_gatt_indicate>:
{
    aca0:	b530      	push	{r4, r5, lr}
    aca2:	4604      	mov	r4, r0
    aca4:	b08b      	sub	sp, #44	; 0x2c
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    aca6:	4837      	ldr	r0, [pc, #220]	; (ad84 <bt_gatt_indicate+0xe4>)
    aca8:	f01a fb31 	bl	2530e <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    acac:	0782      	lsls	r2, r0, #30
{
    acae:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    acb0:	d561      	bpl.n	ad76 <bt_gatt_indicate+0xd6>
	if (conn && conn->state != BT_CONN_CONNECTED) {
    acb2:	b114      	cbz	r4, acba <bt_gatt_indicate+0x1a>
    acb4:	7aa3      	ldrb	r3, [r4, #10]
    acb6:	2b07      	cmp	r3, #7
    acb8:	d160      	bne.n	ad7c <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
    acba:	6868      	ldr	r0, [r5, #4]
    acbc:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    acbe:	f7ff fcc9 	bl	a654 <bt_gatt_attr_get_handle>
	if (params->uuid) {
    acc2:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    acc4:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
    acc8:	b33a      	cbz	r2, ad1a <bt_gatt_indicate+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    acca:	a905      	add	r1, sp, #20
    accc:	9102      	str	r1, [sp, #8]
    acce:	492e      	ldr	r1, [pc, #184]	; (ad88 <bt_gatt_indicate+0xe8>)
    acd0:	9101      	str	r1, [sp, #4]
    acd2:	2101      	movs	r1, #1
	found->attr = NULL;
    acd4:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    acd6:	9100      	str	r1, [sp, #0]
    acd8:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    acdc:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    acde:	f7ff fce9 	bl	a6b4 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
    ace2:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    ace4:	b91b      	cbnz	r3, acee <bt_gatt_indicate+0x4e>
			return -ENOENT;
    ace6:	f06f 0001 	mvn.w	r0, #1
}
    acea:	b00b      	add	sp, #44	; 0x2c
    acec:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
    acee:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    acf0:	9b05      	ldr	r3, [sp, #20]
    acf2:	6818      	ldr	r0, [r3, #0]
    acf4:	2300      	movs	r3, #0
    acf6:	f88d 3010 	strb.w	r3, [sp, #16]
    acfa:	a904      	add	r1, sp, #16
    acfc:	f642 0303 	movw	r3, #10243	; 0x2803
    ad00:	f8ad 3012 	strh.w	r3, [sp, #18]
    ad04:	f019 fa99 	bl	2423a <bt_uuid_cmp>
    ad08:	b970      	cbnz	r0, ad28 <bt_gatt_indicate+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    ad0a:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    ad0c:	68c3      	ldr	r3, [r0, #12]
    ad0e:	799b      	ldrb	r3, [r3, #6]
    ad10:	069b      	lsls	r3, r3, #26
    ad12:	d405      	bmi.n	ad20 <bt_gatt_indicate+0x80>
			return -EINVAL;
    ad14:	f06f 0015 	mvn.w	r0, #21
    ad18:	e7e7      	b.n	acea <bt_gatt_indicate+0x4a>
		if (!data.handle) {
    ad1a:	2800      	cmp	r0, #0
    ad1c:	d1e8      	bne.n	acf0 <bt_gatt_indicate+0x50>
    ad1e:	e7e2      	b.n	ace6 <bt_gatt_indicate+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    ad20:	f01a fcd1 	bl	256c6 <bt_gatt_attr_value_handle>
    ad24:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
    ad28:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
    ad2c:	b13c      	cbz	r4, ad3e <bt_gatt_indicate+0x9e>
		params->_ref = 1;
    ad2e:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
    ad30:	4601      	mov	r1, r0
		params->_ref = 1;
    ad32:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
    ad34:	462a      	mov	r2, r5
    ad36:	4620      	mov	r0, r4
    ad38:	f7ff ff4c 	bl	abd4 <gatt_indicate>
    ad3c:	e7d5      	b.n	acea <bt_gatt_indicate+0x4a>
	data.err = -ENOTCONN;
    ad3e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    ad42:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    ad44:	2302      	movs	r3, #2
    ad46:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    ad4a:	f642 1302 	movw	r3, #10498	; 0x2902
    ad4e:	f8ad 3012 	strh.w	r3, [sp, #18]
    ad52:	ab05      	add	r3, sp, #20
    ad54:	9302      	str	r3, [sp, #8]
    ad56:	4b0d      	ldr	r3, [pc, #52]	; (ad8c <bt_gatt_indicate+0xec>)
    ad58:	9301      	str	r3, [sp, #4]
    ad5a:	2301      	movs	r3, #1
    ad5c:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
    ad5e:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    ad60:	4623      	mov	r3, r4
    ad62:	aa04      	add	r2, sp, #16
    ad64:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    ad68:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    ad6a:	f88d 4010 	strb.w	r4, [sp, #16]
    ad6e:	f7ff fca1 	bl	a6b4 <bt_gatt_foreach_attr_type>
	return data.err;
    ad72:	9807      	ldr	r0, [sp, #28]
    ad74:	e7b9      	b.n	acea <bt_gatt_indicate+0x4a>
		return -EAGAIN;
    ad76:	f06f 000a 	mvn.w	r0, #10
    ad7a:	e7b6      	b.n	acea <bt_gatt_indicate+0x4a>
		return -ENOTCONN;
    ad7c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    ad80:	e7b3      	b.n	acea <bt_gatt_indicate+0x4a>
    ad82:	bf00      	nop
    ad84:	20000354 	.word	0x20000354
    ad88:	00025303 	.word	0x00025303
    ad8c:	0000af7d 	.word	0x0000af7d

0000ad90 <sc_process>:
{
    ad90:	b573      	push	{r0, r1, r4, r5, r6, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    ad92:	f830 3c08 	ldrh.w	r3, [r0, #-8]
    ad96:	f8ad 3004 	strh.w	r3, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    ad9a:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
    ad9e:	4604      	mov	r4, r0
	sc_range[1] = sys_cpu_to_le16(sc->end);
    ada0:	f830 3c06 	ldrh.w	r3, [r0, #-6]
    ada4:	f8ad 3006 	strh.w	r3, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    ada8:	f1a0 0620 	sub.w	r6, r0, #32
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    adac:	f06f 0101 	mvn.w	r1, #1
    adb0:	4628      	mov	r0, r5
    adb2:	f01a fb5f 	bl	25474 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
    adb6:	4b0d      	ldr	r3, [pc, #52]	; (adec <sc_process+0x5c>)
    adb8:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
    adbc:	4b0c      	ldr	r3, [pc, #48]	; (adf0 <sc_process+0x60>)
    adbe:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
    adc2:	ab01      	add	r3, sp, #4
	sc->start = 0U;
    adc4:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
    adc6:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
    adca:	2304      	movs	r3, #4
	sc->start = 0U;
    adcc:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
    add0:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
    add4:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    add8:	4631      	mov	r1, r6
    adda:	f7ff ff61 	bl	aca0 <bt_gatt_indicate>
    adde:	b918      	cbnz	r0, ade8 <sc_process+0x58>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    ade0:	2102      	movs	r1, #2
    ade2:	4628      	mov	r0, r5
    ade4:	f01a faef 	bl	253c6 <atomic_or>
}
    ade8:	b002      	add	sp, #8
    adea:	bd70      	pop	{r4, r5, r6, pc}
    adec:	0002a0a4 	.word	0x0002a0a4
    adf0:	0000a4cd 	.word	0x0000a4cd

0000adf4 <gatt_notify>:
{
    adf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    adf8:	4614      	mov	r4, r2
    adfa:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
    adfc:	2214      	movs	r2, #20
    adfe:	6861      	ldr	r1, [r4, #4]
{
    ae00:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
    ae02:	f01a fcbb 	bl	2577c <bt_gatt_check_perm>
    ae06:	b168      	cbz	r0, ae24 <gatt_notify+0x30>
    ae08:	4b1e      	ldr	r3, [pc, #120]	; (ae84 <gatt_notify+0x90>)
    ae0a:	491f      	ldr	r1, [pc, #124]	; (ae88 <gatt_notify+0x94>)
		BT_WARN("Link is not encrypted");
    ae0c:	481f      	ldr	r0, [pc, #124]	; (ae8c <gatt_notify+0x98>)
    ae0e:	1ac9      	subs	r1, r1, r3
    ae10:	08c9      	lsrs	r1, r1, #3
    ae12:	0189      	lsls	r1, r1, #6
    ae14:	f041 0102 	orr.w	r1, r1, #2
    ae18:	f016 fe67 	bl	21aea <log_0>
		return -EPERM;
    ae1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    ae20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				sizeof(*nfy) + params->len);
    ae24:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    ae26:	211b      	movs	r1, #27
    ae28:	3202      	adds	r2, #2
    ae2a:	4638      	mov	r0, r7
    ae2c:	f7fe fb8a 	bl	9544 <bt_att_create_pdu>
	if (!buf) {
    ae30:	4605      	mov	r5, r0
    ae32:	b960      	cbnz	r0, ae4e <gatt_notify+0x5a>
    ae34:	4b13      	ldr	r3, [pc, #76]	; (ae84 <gatt_notify+0x90>)
    ae36:	4914      	ldr	r1, [pc, #80]	; (ae88 <gatt_notify+0x94>)
		BT_WARN("No buffer available to send notification");
    ae38:	4815      	ldr	r0, [pc, #84]	; (ae90 <gatt_notify+0x9c>)
    ae3a:	1ac9      	subs	r1, r1, r3
    ae3c:	08c9      	lsrs	r1, r1, #3
    ae3e:	0189      	lsls	r1, r1, #6
    ae40:	f041 0102 	orr.w	r1, r1, #2
    ae44:	f016 fe51 	bl	21aea <log_0>
		return -ENOMEM;
    ae48:	f06f 000b 	mvn.w	r0, #11
    ae4c:	e7e8      	b.n	ae20 <gatt_notify+0x2c>
    ae4e:	f100 0908 	add.w	r9, r0, #8
    ae52:	2102      	movs	r1, #2
    ae54:	4648      	mov	r0, r9
    ae56:	f01d f9f7 	bl	28248 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    ae5a:	4606      	mov	r6, r0
    ae5c:	89a1      	ldrh	r1, [r4, #12]
    ae5e:	f826 8b02 	strh.w	r8, [r6], #2
    ae62:	4648      	mov	r0, r9
    ae64:	f01d f9f0 	bl	28248 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
    ae68:	89a2      	ldrh	r2, [r4, #12]
    ae6a:	68a1      	ldr	r1, [r4, #8]
    ae6c:	4630      	mov	r0, r6
    ae6e:	f018 ff9b 	bl	23da8 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
    ae72:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    ae76:	4629      	mov	r1, r5
    ae78:	4638      	mov	r0, r7
}
    ae7a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
    ae7e:	f01a b9c0 	b.w	25202 <bt_att_send>
    ae82:	bf00      	nop
    ae84:	00029870 	.word	0x00029870
    ae88:	00029958 	.word	0x00029958
    ae8c:	0002c562 	.word	0x0002c562
    ae90:	0002c59f 	.word	0x0002c59f

0000ae94 <bt_gatt_notify_cb>:
{
    ae94:	b530      	push	{r4, r5, lr}
    ae96:	4604      	mov	r4, r0
    ae98:	b08b      	sub	sp, #44	; 0x2c
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    ae9a:	4835      	ldr	r0, [pc, #212]	; (af70 <bt_gatt_notify_cb+0xdc>)
    ae9c:	f01a fa37 	bl	2530e <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    aea0:	0782      	lsls	r2, r0, #30
{
    aea2:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    aea4:	d55d      	bpl.n	af62 <bt_gatt_notify_cb+0xce>
	if (conn && conn->state != BT_CONN_CONNECTED) {
    aea6:	b114      	cbz	r4, aeae <bt_gatt_notify_cb+0x1a>
    aea8:	7aa3      	ldrb	r3, [r4, #10]
    aeaa:	2b07      	cmp	r3, #7
    aeac:	d15c      	bne.n	af68 <bt_gatt_notify_cb+0xd4>
	data.attr = params->attr;
    aeae:	6868      	ldr	r0, [r5, #4]
    aeb0:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    aeb2:	f7ff fbcf 	bl	a654 <bt_gatt_attr_get_handle>
	if (params->uuid) {
    aeb6:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    aeb8:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
    aebc:	b33a      	cbz	r2, af0e <bt_gatt_notify_cb+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    aebe:	a905      	add	r1, sp, #20
    aec0:	9102      	str	r1, [sp, #8]
    aec2:	492c      	ldr	r1, [pc, #176]	; (af74 <bt_gatt_notify_cb+0xe0>)
    aec4:	9101      	str	r1, [sp, #4]
    aec6:	2101      	movs	r1, #1
	found->attr = NULL;
    aec8:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    aeca:	9100      	str	r1, [sp, #0]
    aecc:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    aed0:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    aed2:	f7ff fbef 	bl	a6b4 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
    aed6:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    aed8:	b91b      	cbnz	r3, aee2 <bt_gatt_notify_cb+0x4e>
			return -ENOENT;
    aeda:	f06f 0001 	mvn.w	r0, #1
}
    aede:	b00b      	add	sp, #44	; 0x2c
    aee0:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
    aee2:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    aee4:	9b05      	ldr	r3, [sp, #20]
    aee6:	6818      	ldr	r0, [r3, #0]
    aee8:	2300      	movs	r3, #0
    aeea:	f88d 3010 	strb.w	r3, [sp, #16]
    aeee:	a904      	add	r1, sp, #16
    aef0:	f642 0303 	movw	r3, #10243	; 0x2803
    aef4:	f8ad 3012 	strh.w	r3, [sp, #18]
    aef8:	f019 f99f 	bl	2423a <bt_uuid_cmp>
    aefc:	b970      	cbnz	r0, af1c <bt_gatt_notify_cb+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    aefe:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
    af00:	68c3      	ldr	r3, [r0, #12]
    af02:	799b      	ldrb	r3, [r3, #6]
    af04:	06db      	lsls	r3, r3, #27
    af06:	d405      	bmi.n	af14 <bt_gatt_notify_cb+0x80>
			return -EINVAL;
    af08:	f06f 0015 	mvn.w	r0, #21
    af0c:	e7e7      	b.n	aede <bt_gatt_notify_cb+0x4a>
		if (!data.handle) {
    af0e:	2800      	cmp	r0, #0
    af10:	d1e8      	bne.n	aee4 <bt_gatt_notify_cb+0x50>
    af12:	e7e2      	b.n	aeda <bt_gatt_notify_cb+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    af14:	f01a fbd7 	bl	256c6 <bt_gatt_attr_value_handle>
    af18:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
    af1c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
    af20:	b12c      	cbz	r4, af2e <bt_gatt_notify_cb+0x9a>
		return gatt_notify(conn, data.handle, params);
    af22:	4601      	mov	r1, r0
    af24:	462a      	mov	r2, r5
    af26:	4620      	mov	r0, r4
    af28:	f7ff ff64 	bl	adf4 <gatt_notify>
    af2c:	e7d7      	b.n	aede <bt_gatt_notify_cb+0x4a>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    af2e:	f642 1202 	movw	r2, #10498	; 0x2902
    af32:	f8ad 2012 	strh.w	r2, [sp, #18]
    af36:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
    af38:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    af3c:	9202      	str	r2, [sp, #8]
    af3e:	4a0e      	ldr	r2, [pc, #56]	; (af78 <bt_gatt_notify_cb+0xe4>)
	data.err = -ENOTCONN;
    af40:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
    af42:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    af44:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
    af48:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    af4c:	aa04      	add	r2, sp, #16
    af4e:	4623      	mov	r3, r4
    af50:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
    af54:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    af56:	f88d 4010 	strb.w	r4, [sp, #16]
    af5a:	f7ff fbab 	bl	a6b4 <bt_gatt_foreach_attr_type>
	return data.err;
    af5e:	9807      	ldr	r0, [sp, #28]
    af60:	e7bd      	b.n	aede <bt_gatt_notify_cb+0x4a>
		return -EAGAIN;
    af62:	f06f 000a 	mvn.w	r0, #10
    af66:	e7ba      	b.n	aede <bt_gatt_notify_cb+0x4a>
		return -ENOTCONN;
    af68:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    af6c:	e7b7      	b.n	aede <bt_gatt_notify_cb+0x4a>
    af6e:	bf00      	nop
    af70:	20000354 	.word	0x20000354
    af74:	00025303 	.word	0x00025303
    af78:	0000af7d 	.word	0x0000af7d

0000af7c <notify_cb>:
{
    af7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    af7e:	4b37      	ldr	r3, [pc, #220]	; (b05c <notify_cb+0xe0>)
{
    af80:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    af82:	6882      	ldr	r2, [r0, #8]
    af84:	429a      	cmp	r2, r3
{
    af86:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    af88:	d12d      	bne.n	afe6 <notify_cb+0x6a>
	ccc = attr->user_data;
    af8a:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    af8c:	4b34      	ldr	r3, [pc, #208]	; (b060 <notify_cb+0xe4>)
    af8e:	429f      	cmp	r7, r3
    af90:	d119      	bne.n	afc6 <notify_cb+0x4a>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    af92:	4d34      	ldr	r5, [pc, #208]	; (b064 <notify_cb+0xe8>)
    af94:	2300      	movs	r3, #0
    af96:	4669      	mov	r1, sp
    af98:	1c68      	adds	r0, r5, #1
    af9a:	9300      	str	r3, [sp, #0]
    af9c:	f8cd 3003 	str.w	r3, [sp, #3]
    afa0:	f01a fa20 	bl	253e4 <bt_addr_le_cmp>
    afa4:	b178      	cbz	r0, afc6 <notify_cb+0x4a>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    afa6:	4629      	mov	r1, r5
    afa8:	2207      	movs	r2, #7
    afaa:	f811 0b01 	ldrb.w	r0, [r1], #1
    afae:	f7fd faff 	bl	85b0 <bt_conn_lookup_state_le>
			if (!conn) {
    afb2:	b9e0      	cbnz	r0, afee <notify_cb+0x72>
				sc = (struct sc_data *)data->ind_params->data;
    afb4:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
    afb6:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
    afb8:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
    afba:	f811 0b01 	ldrb.w	r0, [r1], #1
    afbe:	8853      	ldrh	r3, [r2, #2]
    afc0:	8812      	ldrh	r2, [r2, #0]
    afc2:	f7fe ff65 	bl	9e90 <sc_save>
		if (cfg->value != data->type) {
    afc6:	893a      	ldrh	r2, [r7, #8]
    afc8:	89a3      	ldrh	r3, [r4, #12]
    afca:	429a      	cmp	r2, r3
    afcc:	d10b      	bne.n	afe6 <notify_cb+0x6a>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    afce:	4639      	mov	r1, r7
    afd0:	f811 0b01 	ldrb.w	r0, [r1], #1
    afd4:	f7fd faa8 	bl	8528 <bt_conn_lookup_addr_le>
		if (!conn) {
    afd8:	4605      	mov	r5, r0
    afda:	b120      	cbz	r0, afe6 <notify_cb+0x6a>
		if (conn->state != BT_CONN_CONNECTED) {
    afdc:	7a83      	ldrb	r3, [r0, #10]
    afde:	2b07      	cmp	r3, #7
    afe0:	d008      	beq.n	aff4 <notify_cb+0x78>
			bt_conn_unref(conn);
    afe2:	f019 fbf9 	bl	247d8 <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
    afe6:	2701      	movs	r7, #1
}
    afe8:	4638      	mov	r0, r7
    afea:	b003      	add	sp, #12
    afec:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
    afee:	f019 fbf3 	bl	247d8 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    aff2:	e7e8      	b.n	afc6 <notify_cb+0x4a>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    aff4:	697b      	ldr	r3, [r7, #20]
    aff6:	b123      	cbz	r3, b002 <notify_cb+0x86>
    aff8:	4631      	mov	r1, r6
    affa:	4798      	blx	r3
    affc:	b908      	cbnz	r0, b002 <notify_cb+0x86>
			bt_conn_unref(conn);
    affe:	4628      	mov	r0, r5
    b000:	e7ef      	b.n	afe2 <notify_cb+0x66>
		if (bt_gatt_check_perm(conn, attr,
    b002:	2214      	movs	r2, #20
    b004:	4631      	mov	r1, r6
    b006:	4628      	mov	r0, r5
    b008:	f01a fbb8 	bl	2577c <bt_gatt_check_perm>
    b00c:	4607      	mov	r7, r0
    b00e:	b150      	cbz	r0, b026 <notify_cb+0xaa>
    b010:	4b15      	ldr	r3, [pc, #84]	; (b068 <notify_cb+0xec>)
    b012:	4916      	ldr	r1, [pc, #88]	; (b06c <notify_cb+0xf0>)
			BT_WARN("Link is not encrypted");
    b014:	4816      	ldr	r0, [pc, #88]	; (b070 <notify_cb+0xf4>)
    b016:	1ac9      	subs	r1, r1, r3
    b018:	08c9      	lsrs	r1, r1, #3
    b01a:	0189      	lsls	r1, r1, #6
    b01c:	f041 0102 	orr.w	r1, r1, #2
    b020:	f016 fd63 	bl	21aea <log_0>
			continue;
    b024:	e7df      	b.n	afe6 <notify_cb+0x6a>
		if (data->type == BT_GATT_CCC_INDICATE) {
    b026:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
    b028:	88a1      	ldrh	r1, [r4, #4]
    b02a:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
    b02c:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
    b02e:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
    b030:	d10f      	bne.n	b052 <notify_cb+0xd6>
			err = gatt_indicate(conn, data->handle,
    b032:	f7ff fdcf 	bl	abd4 <gatt_indicate>
			if (err == 0) {
    b036:	4606      	mov	r6, r0
    b038:	b918      	cbnz	r0, b042 <notify_cb+0xc6>
				data->ind_params->_ref++;
    b03a:	6922      	ldr	r2, [r4, #16]
    b03c:	7d93      	ldrb	r3, [r2, #22]
    b03e:	3301      	adds	r3, #1
    b040:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
    b042:	4628      	mov	r0, r5
    b044:	f019 fbc8 	bl	247d8 <bt_conn_unref>
		if (err < 0) {
    b048:	2e00      	cmp	r6, #0
    b04a:	dbcd      	blt.n	afe8 <notify_cb+0x6c>
		data->err = 0;
    b04c:	2300      	movs	r3, #0
    b04e:	60a3      	str	r3, [r4, #8]
    b050:	e7c9      	b.n	afe6 <notify_cb+0x6a>
			err = gatt_notify(conn, data->handle, data->nfy_params);
    b052:	f7ff fecf 	bl	adf4 <gatt_notify>
    b056:	4606      	mov	r6, r0
    b058:	e7f3      	b.n	b042 <notify_cb+0xc6>
    b05a:	bf00      	nop
    b05c:	00009d6d 	.word	0x00009d6d
    b060:	20000814 	.word	0x20000814
    b064:	200036d2 	.word	0x200036d2
    b068:	00029870 	.word	0x00029870
    b06c:	00029958 	.word	0x00029958
    b070:	0002c562 	.word	0x0002c562

0000b074 <update_ccc>:
{
    b074:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    b076:	4b34      	ldr	r3, [pc, #208]	; (b148 <update_ccc+0xd4>)
	struct bt_conn *conn = data->conn;
    b078:	6815      	ldr	r5, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
    b07a:	6882      	ldr	r2, [r0, #8]
    b07c:	429a      	cmp	r2, r3
{
    b07e:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    b080:	d11b      	bne.n	b0ba <update_ccc+0x46>
	ccc = attr->user_data;
    b082:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
    b084:	8933      	ldrh	r3, [r6, #8]
    b086:	b1c3      	cbz	r3, b0ba <update_ccc+0x46>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    b088:	4632      	mov	r2, r6
    b08a:	4628      	mov	r0, r5
    b08c:	f812 1b01 	ldrb.w	r1, [r2], #1
    b090:	f019 fc0d 	bl	248ae <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    b094:	b188      	cbz	r0, b0ba <update_ccc+0x46>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    b096:	222a      	movs	r2, #42	; 0x2a
    b098:	4621      	mov	r1, r4
    b09a:	4628      	mov	r0, r5
    b09c:	f01a fb6e 	bl	2577c <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    b0a0:	2803      	cmp	r0, #3
    b0a2:	d10d      	bne.n	b0c0 <update_ccc+0x4c>
    b0a4:	4a29      	ldr	r2, [pc, #164]	; (b14c <update_ccc+0xd8>)
    b0a6:	4b2a      	ldr	r3, [pc, #168]	; (b150 <update_ccc+0xdc>)
				BT_WARN("CCC %p not writable", attr);
    b0a8:	482a      	ldr	r0, [pc, #168]	; (b154 <update_ccc+0xe0>)
    b0aa:	1ad2      	subs	r2, r2, r3
    b0ac:	08d2      	lsrs	r2, r2, #3
    b0ae:	0192      	lsls	r2, r2, #6
    b0b0:	f042 0202 	orr.w	r2, r2, #2
    b0b4:	4621      	mov	r1, r4
    b0b6:	f016 fd25 	bl	21b04 <log_1>
}
    b0ba:	2001      	movs	r0, #1
    b0bc:	b002      	add	sp, #8
    b0be:	bd70      	pop	{r4, r5, r6, pc}
		gatt_ccc_changed(attr, ccc);
    b0c0:	4631      	mov	r1, r6
    b0c2:	4620      	mov	r0, r4
    b0c4:	f01a f900 	bl	252c8 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    b0c8:	4b23      	ldr	r3, [pc, #140]	; (b158 <update_ccc+0xe4>)
    b0ca:	429e      	cmp	r6, r3
    b0cc:	d1f5      	bne.n	b0ba <update_ccc+0x46>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    b0ce:	7a28      	ldrb	r0, [r5, #8]
    b0d0:	f105 0188 	add.w	r1, r5, #136	; 0x88
    b0d4:	f7fe fe3a 	bl	9d4c <find_sc_cfg>
	if (!cfg) {
    b0d8:	4604      	mov	r4, r0
    b0da:	2800      	cmp	r0, #0
    b0dc:	d0ed      	beq.n	b0ba <update_ccc+0x46>
	if (!(cfg->data.start || cfg->data.end)) {
    b0de:	8902      	ldrh	r2, [r0, #8]
    b0e0:	8943      	ldrh	r3, [r0, #10]
    b0e2:	ea53 0102 	orrs.w	r1, r3, r2
    b0e6:	d0e8      	beq.n	b0ba <update_ccc+0x46>
	index = bt_conn_index(conn);
    b0e8:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    b0ea:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    b0ee:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
    b0f2:	f7fd f941 	bl	8378 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    b0f6:	4919      	ldr	r1, [pc, #100]	; (b15c <update_ccc+0xe8>)
    b0f8:	4a19      	ldr	r2, [pc, #100]	; (b160 <update_ccc+0xec>)
    b0fa:	2318      	movs	r3, #24
    b0fc:	fb03 1300 	mla	r3, r3, r0, r1
    b100:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    b102:	4a18      	ldr	r2, [pc, #96]	; (b164 <update_ccc+0xf0>)
    b104:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    b106:	aa01      	add	r2, sp, #4
    b108:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
    b10a:	2204      	movs	r2, #4
    b10c:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    b10e:	b203      	sxth	r3, r0
    b110:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    b114:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    b118:	4628      	mov	r0, r5
    b11a:	f7ff fdc1 	bl	aca0 <bt_gatt_indicate>
    b11e:	b148      	cbz	r0, b134 <update_ccc+0xc0>
    b120:	490a      	ldr	r1, [pc, #40]	; (b14c <update_ccc+0xd8>)
    b122:	4b0b      	ldr	r3, [pc, #44]	; (b150 <update_ccc+0xdc>)
		BT_ERR("SC restore indication failed");
    b124:	4810      	ldr	r0, [pc, #64]	; (b168 <update_ccc+0xf4>)
    b126:	1ac9      	subs	r1, r1, r3
    b128:	08c9      	lsrs	r1, r1, #3
    b12a:	0189      	lsls	r1, r1, #6
    b12c:	f041 0101 	orr.w	r1, r1, #1
    b130:	f016 fcdb 	bl	21aea <log_0>
	memset(&cfg->data, 0, sizeof(cfg->data));
    b134:	2204      	movs	r2, #4
    b136:	2100      	movs	r1, #0
    b138:	f104 0008 	add.w	r0, r4, #8
    b13c:	f018 fe3f 	bl	23dbe <memset>
		sc_store(cfg);
    b140:	4620      	mov	r0, r4
    b142:	f7fe fe73 	bl	9e2c <sc_store>
    b146:	e7b8      	b.n	b0ba <update_ccc+0x46>
    b148:	00009d6d 	.word	0x00009d6d
    b14c:	00029958 	.word	0x00029958
    b150:	00029870 	.word	0x00029870
    b154:	0002c5c8 	.word	0x0002c5c8
    b158:	20000814 	.word	0x20000814
    b15c:	200021cc 	.word	0x200021cc
    b160:	0002a0a4 	.word	0x0002a0a4
    b164:	000253eb 	.word	0x000253eb
    b168:	0002c5dc 	.word	0x0002c5dc

0000b16c <bt_gatt_connected>:
{
    b16c:	b530      	push	{r4, r5, lr}
    b16e:	b08f      	sub	sp, #60	; 0x3c
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b170:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
    b174:	4604      	mov	r4, r0
	data.conn = conn;
    b176:	9003      	str	r0, [sp, #12]
	data.sec = BT_SECURITY_L1;
    b178:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b17a:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
    b17c:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b180:	4629      	mov	r1, r5
    b182:	f019 f94c 	bl	2441e <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
    b186:	b190      	cbz	r0, b1ae <bt_gatt_connected+0x42>
		if (conn->id) {
    b188:	7a22      	ldrb	r2, [r4, #8]
    b18a:	b1ca      	cbz	r2, b1c0 <bt_gatt_connected+0x54>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
    b18c:	ac02      	add	r4, sp, #8
    b18e:	2104      	movs	r1, #4
    b190:	4620      	mov	r0, r4
    b192:	f015 ffb5 	bl	21100 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
    b196:	9400      	str	r4, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
    b198:	4a0a      	ldr	r2, [pc, #40]	; (b1c4 <bt_gatt_connected+0x58>)
    b19a:	2124      	movs	r1, #36	; 0x24
    b19c:	a805      	add	r0, sp, #20
    b19e:	462b      	mov	r3, r5
    b1a0:	f7fa f8a0 	bl	52e4 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
    b1a4:	aa05      	add	r2, sp, #20
    b1a6:	4908      	ldr	r1, [pc, #32]	; (b1c8 <bt_gatt_connected+0x5c>)
    b1a8:	4610      	mov	r0, r2
    b1aa:	f7f8 fd47 	bl	3c3c <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    b1ae:	4a07      	ldr	r2, [pc, #28]	; (b1cc <bt_gatt_connected+0x60>)
    b1b0:	ab03      	add	r3, sp, #12
    b1b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b1b6:	2001      	movs	r0, #1
    b1b8:	f01a fad3 	bl	25762 <bt_gatt_foreach_attr>
}
    b1bc:	b00f      	add	sp, #60	; 0x3c
    b1be:	bd30      	pop	{r4, r5, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
    b1c0:	9200      	str	r2, [sp, #0]
    b1c2:	e7e9      	b.n	b198 <bt_gatt_connected+0x2c>
    b1c4:	0002c552 	.word	0x0002c552
    b1c8:	0000aaa9 	.word	0x0000aaa9
    b1cc:	0000b075 	.word	0x0000b075

0000b1d0 <bt_gatt_att_max_mtu_changed>:
{
    b1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
    b1d2:	4b09      	ldr	r3, [pc, #36]	; (b1f8 <bt_gatt_att_max_mtu_changed+0x28>)
    b1d4:	681c      	ldr	r4, [r3, #0]
    b1d6:	4605      	mov	r5, r0
    b1d8:	460e      	mov	r6, r1
    b1da:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    b1dc:	b10c      	cbz	r4, b1e2 <bt_gatt_att_max_mtu_changed+0x12>
    b1de:	3c04      	subs	r4, #4
    b1e0:	b904      	cbnz	r4, b1e4 <bt_gatt_att_max_mtu_changed+0x14>
}
    b1e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->att_mtu_updated) {
    b1e4:	6823      	ldr	r3, [r4, #0]
    b1e6:	b11b      	cbz	r3, b1f0 <bt_gatt_att_max_mtu_changed+0x20>
			cb->att_mtu_updated(conn, tx, rx);
    b1e8:	463a      	mov	r2, r7
    b1ea:	4631      	mov	r1, r6
    b1ec:	4628      	mov	r0, r5
    b1ee:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    b1f0:	1d23      	adds	r3, r4, #4
    b1f2:	d0f6      	beq.n	b1e2 <bt_gatt_att_max_mtu_changed+0x12>
	return node->next;
    b1f4:	6864      	ldr	r4, [r4, #4]
    b1f6:	e7f1      	b.n	b1dc <bt_gatt_att_max_mtu_changed+0xc>
    b1f8:	200021a8 	.word	0x200021a8

0000b1fc <db_hash_read>:
{
    b1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    b1fe:	4914      	ldr	r1, [pc, #80]	; (b250 <db_hash_read+0x54>)
{
    b200:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    b204:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    b206:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
    b20a:	461f      	mov	r7, r3
    b20c:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    b20e:	f01d fdfc 	bl	28e0a <k_work_cancel_delayable_sync>
    b212:	4810      	ldr	r0, [pc, #64]	; (b254 <db_hash_read+0x58>)
    b214:	f01a f87b 	bl	2530e <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
    b218:	0743      	lsls	r3, r0, #29
    b21a:	d402      	bmi.n	b222 <db_hash_read+0x26>
		db_hash_gen(true);
    b21c:	2001      	movs	r0, #1
    b21e:	f7ff fad3 	bl	a7c8 <db_hash_gen>
	(void)bt_gatt_change_aware(conn, true);
    b222:	2101      	movs	r1, #1
    b224:	4620      	mov	r0, r4
    b226:	f01a facc 	bl	257c2 <bt_gatt_change_aware>
	if (offset > value_len) {
    b22a:	2e10      	cmp	r6, #16
    b22c:	d80c      	bhi.n	b248 <db_hash_read+0x4c>
	len = MIN(buf_len, value_len - offset);
    b22e:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
    b232:	4909      	ldr	r1, [pc, #36]	; (b258 <db_hash_read+0x5c>)
	len = MIN(buf_len, value_len - offset);
    b234:	42bc      	cmp	r4, r7
    b236:	bfa8      	it	ge
    b238:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
    b23a:	4622      	mov	r2, r4
    b23c:	4431      	add	r1, r6
    b23e:	4628      	mov	r0, r5
    b240:	f018 fdb2 	bl	23da8 <memcpy>
}
    b244:	4620      	mov	r0, r4
    b246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    b248:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
    b24c:	e7fa      	b.n	b244 <db_hash_read+0x48>
    b24e:	bf00      	nop
    b250:	20001738 	.word	0x20001738
    b254:	200017b0 	.word	0x200017b0
    b258:	200016e8 	.word	0x200016e8

0000b25c <bt_gatt_store_ccc>:
{
    b25c:	b570      	push	{r4, r5, r6, lr}
    b25e:	b0c0      	sub	sp, #256	; 0x100
	save.count = 0;
    b260:	2300      	movs	r3, #0
{
    b262:	4604      	mov	r4, r0
    b264:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
    b266:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
    b268:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
    b26c:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
    b26e:	4a18      	ldr	r2, [pc, #96]	; (b2d0 <bt_gatt_store_ccc+0x74>)
    b270:	ab0d      	add	r3, sp, #52	; 0x34
    b272:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b276:	2001      	movs	r0, #1
    b278:	f01a fa73 	bl	25762 <bt_gatt_foreach_attr>
	if (id) {
    b27c:	b31c      	cbz	r4, b2c6 <bt_gatt_store_ccc+0x6a>
		u8_to_dec(id_str, sizeof(id_str), id);
    b27e:	ae03      	add	r6, sp, #12
    b280:	4622      	mov	r2, r4
    b282:	2104      	movs	r1, #4
    b284:	4630      	mov	r0, r6
    b286:	f015 ff3b 	bl	21100 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
    b28a:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
    b28c:	4a11      	ldr	r2, [pc, #68]	; (b2d4 <bt_gatt_store_ccc+0x78>)
    b28e:	462b      	mov	r3, r5
    b290:	2124      	movs	r1, #36	; 0x24
    b292:	a804      	add	r0, sp, #16
    b294:	f7fa f826 	bl	52e4 <bt_settings_encode_key>
	if (save.count) {
    b298:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
    b29a:	b1b2      	cbz	r2, b2ca <bt_gatt_store_ccc+0x6e>
		len = save.count * sizeof(*save.store);
    b29c:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
    b29e:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
    b2a0:	a804      	add	r0, sp, #16
    b2a2:	f7f8 fc6b 	bl	3b7c <settings_save_one>
	if (err) {
    b2a6:	4604      	mov	r4, r0
    b2a8:	b150      	cbz	r0, b2c0 <bt_gatt_store_ccc+0x64>
    b2aa:	4a0b      	ldr	r2, [pc, #44]	; (b2d8 <bt_gatt_store_ccc+0x7c>)
    b2ac:	4b0b      	ldr	r3, [pc, #44]	; (b2dc <bt_gatt_store_ccc+0x80>)
    b2ae:	1ad2      	subs	r2, r2, r3
    b2b0:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Failed to store CCCs (err %d)", err);
    b2b2:	0192      	lsls	r2, r2, #6
    b2b4:	4601      	mov	r1, r0
    b2b6:	f042 0201 	orr.w	r2, r2, #1
    b2ba:	4809      	ldr	r0, [pc, #36]	; (b2e0 <bt_gatt_store_ccc+0x84>)
    b2bc:	f016 fc22 	bl	21b04 <log_1>
}
    b2c0:	4620      	mov	r0, r4
    b2c2:	b040      	add	sp, #256	; 0x100
    b2c4:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
    b2c6:	9400      	str	r4, [sp, #0]
    b2c8:	e7e0      	b.n	b28c <bt_gatt_store_ccc+0x30>
		str = NULL;
    b2ca:	4611      	mov	r1, r2
    b2cc:	e7e8      	b.n	b2a0 <bt_gatt_store_ccc+0x44>
    b2ce:	bf00      	nop
    b2d0:	0000a259 	.word	0x0000a259
    b2d4:	0002c552 	.word	0x0002c552
    b2d8:	00029958 	.word	0x00029958
    b2dc:	00029870 	.word	0x00029870
    b2e0:	0002c5f9 	.word	0x0002c5f9

0000b2e4 <bt_gatt_service_unregister>:
{
    b2e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b2e8:	4604      	mov	r4, r0
	k_sched_lock();
    b2ea:	f015 f8f9 	bl	204e0 <k_sched_lock>
	return list->head;
    b2ee:	4a38      	ldr	r2, [pc, #224]	; (b3d0 <bt_gatt_service_unregister+0xec>)
    b2f0:	6813      	ldr	r3, [r2, #0]
	if (!sys_slist_find_and_remove(&db, &svc->node)) {
    b2f2:	f104 0008 	add.w	r0, r4, #8
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    b2f6:	2100      	movs	r1, #0
    b2f8:	b93b      	cbnz	r3, b30a <bt_gatt_service_unregister+0x26>
		k_sched_unlock();
    b2fa:	f015 fabf 	bl	2087c <k_sched_unlock>
		return err;
    b2fe:	f06f 0501 	mvn.w	r5, #1
}
    b302:	4628      	mov	r0, r5
    b304:	b003      	add	sp, #12
    b306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b30a:	4298      	cmp	r0, r3
    b30c:	d11f      	bne.n	b34e <bt_gatt_service_unregister+0x6a>
	return node->next;
    b30e:	68a3      	ldr	r3, [r4, #8]
	return list->tail;
    b310:	6855      	ldr	r5, [r2, #4]
Z_GENLIST_REMOVE(slist, snode)
    b312:	b9b9      	cbnz	r1, b344 <bt_gatt_service_unregister+0x60>
    b314:	42a8      	cmp	r0, r5
	list->head = node;
    b316:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    b318:	d100      	bne.n	b31c <bt_gatt_service_unregister+0x38>
	list->tail = node;
    b31a:	6053      	str	r3, [r2, #4]
	parent->next = child;
    b31c:	2500      	movs	r5, #0
		if (attr->write == bt_gatt_attr_write_ccc) {
    b31e:	f8df a0b4 	ldr.w	sl, [pc, #180]	; b3d4 <bt_gatt_service_unregister+0xf0>
    b322:	60a5      	str	r5, [r4, #8]
		struct bt_gatt_attr *attr = &svc->attrs[i];
    b324:	f04f 0914 	mov.w	r9, #20
	ccc->value = 0;
    b328:	46a8      	mov	r8, r5
	for (uint16_t i = 0; i < svc->attr_count; i++) {
    b32a:	6863      	ldr	r3, [r4, #4]
    b32c:	b2aa      	uxth	r2, r5
    b32e:	4293      	cmp	r3, r2
    b330:	d810      	bhi.n	b354 <bt_gatt_service_unregister+0x70>
	if (!atomic_get(&init)) {
    b332:	4829      	ldr	r0, [pc, #164]	; (b3d8 <bt_gatt_service_unregister+0xf4>)
    b334:	f019 ffeb 	bl	2530e <atomic_get>
    b338:	4605      	mov	r5, r0
    b33a:	2800      	cmp	r0, #0
    b33c:	d138      	bne.n	b3b0 <bt_gatt_service_unregister+0xcc>
		k_sched_unlock();
    b33e:	f015 fa9d 	bl	2087c <k_sched_unlock>
		return 0;
    b342:	e7de      	b.n	b302 <bt_gatt_service_unregister+0x1e>
Z_GENLIST_REMOVE(slist, snode)
    b344:	42a8      	cmp	r0, r5
	parent->next = child;
    b346:	600b      	str	r3, [r1, #0]
	list->tail = node;
    b348:	bf08      	it	eq
    b34a:	6051      	streq	r1, [r2, #4]
}
    b34c:	e7e6      	b.n	b31c <bt_gatt_service_unregister+0x38>
	return node->next;
    b34e:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    b350:	681b      	ldr	r3, [r3, #0]
    b352:	e7d1      	b.n	b2f8 <bt_gatt_service_unregister+0x14>
		struct bt_gatt_attr *attr = &svc->attrs[i];
    b354:	6823      	ldr	r3, [r4, #0]
    b356:	fb09 3302 	mla	r3, r9, r2, r3
		if (attr->write == bt_gatt_attr_write_ccc) {
    b35a:	689a      	ldr	r2, [r3, #8]
    b35c:	4552      	cmp	r2, sl
    b35e:	d125      	bne.n	b3ac <bt_gatt_service_unregister+0xc8>
			gatt_unregister_ccc(attr->user_data);
    b360:	68de      	ldr	r6, [r3, #12]
		if (bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    b362:	f8cd 8000 	str.w	r8, [sp]
    b366:	1c77      	adds	r7, r6, #1
	ccc->value = 0;
    b368:	f8a6 800a 	strh.w	r8, [r6, #10]
		if (bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    b36c:	4669      	mov	r1, sp
    b36e:	4638      	mov	r0, r7
    b370:	f8cd 8003 	str.w	r8, [sp, #3]
    b374:	f01a f836 	bl	253e4 <bt_addr_le_cmp>
    b378:	b1c0      	cbz	r0, b3ac <bt_gatt_service_unregister+0xc8>
			conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    b37a:	7830      	ldrb	r0, [r6, #0]
    b37c:	4639      	mov	r1, r7
    b37e:	f7fd f8d3 	bl	8528 <bt_conn_lookup_addr_le>
			if (conn) {
    b382:	b948      	cbnz	r0, b398 <bt_gatt_service_unregister+0xb4>
			    bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
    b384:	7830      	ldrb	r0, [r6, #0]
    b386:	4639      	mov	r1, r7
    b388:	f019 f849 	bl	2441e <bt_addr_le_is_bonded>
			if (IS_ENABLED(CONFIG_BT_SETTINGS) && store &&
    b38c:	b158      	cbz	r0, b3a6 <bt_gatt_service_unregister+0xc2>
				bt_gatt_store_ccc(cfg->id, &cfg->peer);
    b38e:	7830      	ldrb	r0, [r6, #0]
    b390:	4639      	mov	r1, r7
    b392:	f7ff ff63 	bl	b25c <bt_gatt_store_ccc>
    b396:	e006      	b.n	b3a6 <bt_gatt_service_unregister+0xc2>
				if (conn->state == BT_CONN_CONNECTED) {
    b398:	f890 b00a 	ldrb.w	fp, [r0, #10]
				bt_conn_unref(conn);
    b39c:	f019 fa1c 	bl	247d8 <bt_conn_unref>
			if (IS_ENABLED(CONFIG_BT_SETTINGS) && store &&
    b3a0:	f1bb 0f07 	cmp.w	fp, #7
    b3a4:	d1ee      	bne.n	b384 <bt_gatt_service_unregister+0xa0>
			clear_ccc_cfg(cfg);
    b3a6:	4630      	mov	r0, r6
    b3a8:	f01a f856 	bl	25458 <clear_ccc_cfg>
	for (uint16_t i = 0; i < svc->attr_count; i++) {
    b3ac:	3501      	adds	r5, #1
    b3ae:	e7bc      	b.n	b32a <bt_gatt_service_unregister+0x46>
		    svc->attrs[svc->attr_count - 1].handle);
    b3b0:	e9d4 2300 	ldrd	r2, r3, [r4]
	sc_indicate(svc->attrs[0].handle,
    b3b4:	2114      	movs	r1, #20
    b3b6:	fb01 2303 	mla	r3, r1, r3, r2
    b3ba:	8a10      	ldrh	r0, [r2, #16]
    b3bc:	f833 1c04 	ldrh.w	r1, [r3, #-4]
    b3c0:	f7ff f840 	bl	a444 <sc_indicate>
	return 0;
    b3c4:	2500      	movs	r5, #0
	db_changed();
    b3c6:	f7fe ff63 	bl	a290 <db_changed>
	k_sched_unlock();
    b3ca:	f015 fa57 	bl	2087c <k_sched_unlock>
	return 0;
    b3ce:	e798      	b.n	b302 <bt_gatt_service_unregister+0x1e>
    b3d0:	200021c0 	.word	0x200021c0
    b3d4:	00009d6d 	.word	0x00009d6d
    b3d8:	200021c8 	.word	0x200021c8

0000b3dc <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    b3dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    b3de:	4604      	mov	r4, r0
    b3e0:	b08d      	sub	sp, #52	; 0x34
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    b3e2:	4603      	mov	r3, r0
    b3e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b3e8:	2001      	movs	r0, #1
    b3ea:	4a3a      	ldr	r2, [pc, #232]	; (b4d4 <bt_gatt_disconnected+0xf8>)
		k_work_cancel_delayable(&gatt_ccc_store.work);
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b3ec:	f104 0588 	add.w	r5, r4, #136	; 0x88
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    b3f0:	f01a f9b7 	bl	25762 <bt_gatt_foreach_attr>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b3f4:	7a20      	ldrb	r0, [r4, #8]
    b3f6:	4629      	mov	r1, r5
    b3f8:	f019 f811 	bl	2441e <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    b3fc:	2800      	cmp	r0, #0
    b3fe:	d035      	beq.n	b46c <bt_gatt_disconnected+0x90>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
    b400:	4629      	mov	r1, r5
    b402:	7a20      	ldrb	r0, [r4, #8]
    b404:	f7ff ff2a 	bl	b25c <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
    b408:	4620      	mov	r0, r4
    b40a:	f7fe fc81 	bl	9d10 <find_cf_cfg>
	if (!cfg) {
    b40e:	4606      	mov	r6, r0
    b410:	2800      	cmp	r0, #0
    b412:	d04b      	beq.n	b4ac <bt_gatt_disconnected+0xd0>
		if (conn->id) {
    b414:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
    b416:	3608      	adds	r6, #8
		if (conn->id) {
    b418:	2a00      	cmp	r2, #0
    b41a:	d049      	beq.n	b4b0 <bt_gatt_disconnected+0xd4>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
    b41c:	af02      	add	r7, sp, #8
    b41e:	2104      	movs	r1, #4
    b420:	4638      	mov	r0, r7
    b422:	f015 fe6d 	bl	21100 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
    b426:	9700      	str	r7, [sp, #0]
    b428:	462b      	mov	r3, r5
    b42a:	4a2b      	ldr	r2, [pc, #172]	; (b4d8 <bt_gatt_disconnected+0xfc>)
    b42c:	2124      	movs	r1, #36	; 0x24
    b42e:	a803      	add	r0, sp, #12
    b430:	f7f9 ff58 	bl	52e4 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
    b434:	7a23      	ldrb	r3, [r4, #8]
    b436:	2701      	movs	r7, #1
    b438:	b93b      	cbnz	r3, b44a <bt_gatt_disconnected+0x6e>
		bt_settings_encode_key(key, sizeof(key), "cf",
    b43a:	2300      	movs	r3, #0
    b43c:	9300      	str	r3, [sp, #0]
    b43e:	4a26      	ldr	r2, [pc, #152]	; (b4d8 <bt_gatt_disconnected+0xfc>)
    b440:	462b      	mov	r3, r5
    b442:	2124      	movs	r1, #36	; 0x24
    b444:	a803      	add	r0, sp, #12
    b446:	f7f9 ff4d 	bl	52e4 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
    b44a:	4631      	mov	r1, r6
    b44c:	463a      	mov	r2, r7
    b44e:	a803      	add	r0, sp, #12
    b450:	f7f8 fb94 	bl	3b7c <settings_save_one>
	if (err) {
    b454:	4601      	mov	r1, r0
    b456:	b148      	cbz	r0, b46c <bt_gatt_disconnected+0x90>
    b458:	4a20      	ldr	r2, [pc, #128]	; (b4dc <bt_gatt_disconnected+0x100>)
    b45a:	4b21      	ldr	r3, [pc, #132]	; (b4e0 <bt_gatt_disconnected+0x104>)
		BT_ERR("Failed to store Client Features (err %d)", err);
    b45c:	4821      	ldr	r0, [pc, #132]	; (b4e4 <bt_gatt_disconnected+0x108>)
    b45e:	1ad2      	subs	r2, r2, r3
    b460:	08d2      	lsrs	r2, r2, #3
    b462:	0192      	lsls	r2, r2, #6
    b464:	f042 0201 	orr.w	r2, r2, #1
    b468:	f016 fb4c 	bl	21b04 <log_1>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b46c:	7a20      	ldrb	r0, [r4, #8]
    b46e:	4629      	mov	r1, r5
    b470:	f018 ffd5 	bl	2441e <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
    b474:	b150      	cbz	r0, b48c <bt_gatt_disconnected+0xb0>
		struct addr_with_id addr_with_id = {
    b476:	7a23      	ldrb	r3, [r4, #8]
    b478:	f88d 3010 	strb.w	r3, [sp, #16]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
    b47c:	4a1a      	ldr	r2, [pc, #104]	; (b4e8 <bt_gatt_disconnected+0x10c>)
		struct addr_with_id addr_with_id = {
    b47e:	9503      	str	r5, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
    b480:	ab03      	add	r3, sp, #12
    b482:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b486:	2001      	movs	r0, #1
    b488:	f01a f96b 	bl	25762 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
    b48c:	4620      	mov	r0, r4
    b48e:	f7fe fc3f 	bl	9d10 <find_cf_cfg>
	if (!cfg) {
    b492:	4606      	mov	r6, r0
    b494:	b1d8      	cbz	r0, b4ce <bt_gatt_disconnected+0xf2>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b496:	7a20      	ldrb	r0, [r4, #8]
    b498:	4629      	mov	r1, r5
    b49a:	f018 ffc0 	bl	2441e <bt_addr_le_is_bonded>
    b49e:	b948      	cbnz	r0, b4b4 <bt_gatt_disconnected+0xd8>
		clear_cf_cfg(cfg);
    b4a0:	4630      	mov	r0, r6
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    b4a2:	b00d      	add	sp, #52	; 0x34
    b4a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		clear_cf_cfg(cfg);
    b4a8:	f01a b818 	b.w	254dc <clear_cf_cfg>
		len = 0;
    b4ac:	4607      	mov	r7, r0
    b4ae:	e7c4      	b.n	b43a <bt_gatt_disconnected+0x5e>
    b4b0:	2701      	movs	r7, #1
    b4b2:	e7c2      	b.n	b43a <bt_gatt_disconnected+0x5e>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    b4b4:	4629      	mov	r1, r5
    b4b6:	1c70      	adds	r0, r6, #1
    b4b8:	f019 ffcb 	bl	25452 <bt_addr_le_copy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    b4bc:	f06f 0102 	mvn.w	r1, #2
    b4c0:	f106 000c 	add.w	r0, r6, #12
}
    b4c4:	b00d      	add	sp, #52	; 0x34
    b4c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    b4ca:	f019 bfd3 	b.w	25474 <atomic_and>
    b4ce:	b00d      	add	sp, #52	; 0x34
    b4d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b4d2:	bf00      	nop
    b4d4:	0000a3b9 	.word	0x0000a3b9
    b4d8:	0002c643 	.word	0x0002c643
    b4dc:	00029958 	.word	0x00029958
    b4e0:	00029870 	.word	0x00029870
    b4e4:	0002c617 	.word	0x0002c617
    b4e8:	0000a1a5 	.word	0x0000a1a5

0000b4ec <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    b4ec:	4a0b      	ldr	r2, [pc, #44]	; (b51c <bt_smp_accept+0x30>)
{
    b4ee:	b508      	push	{r3, lr}
    b4f0:	4603      	mov	r3, r0
		if (smp->chan.conn) {
    b4f2:	6810      	ldr	r0, [r2, #0]
    b4f4:	b918      	cbnz	r0, b4fe <bt_smp_accept+0x12>
			continue;
		}

		smp->chan.ops = &ops;
    b4f6:	4b0a      	ldr	r3, [pc, #40]	; (b520 <bt_smp_accept+0x34>)
    b4f8:	6053      	str	r3, [r2, #4]

		*chan = &smp->chan;
    b4fa:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    b4fc:	bd08      	pop	{r3, pc}
    b4fe:	4909      	ldr	r1, [pc, #36]	; (b524 <bt_smp_accept+0x38>)
    b500:	4a09      	ldr	r2, [pc, #36]	; (b528 <bt_smp_accept+0x3c>)
	BT_ERR("No available SMP context for conn %p", conn);
    b502:	480a      	ldr	r0, [pc, #40]	; (b52c <bt_smp_accept+0x40>)
    b504:	1a52      	subs	r2, r2, r1
    b506:	08d2      	lsrs	r2, r2, #3
    b508:	0192      	lsls	r2, r2, #6
    b50a:	f042 0201 	orr.w	r2, r2, #1
    b50e:	4619      	mov	r1, r3
    b510:	f016 faf8 	bl	21b04 <log_1>
	return -ENOMEM;
    b514:	f06f 000b 	mvn.w	r0, #11
    b518:	e7f0      	b.n	b4fc <bt_smp_accept+0x10>
    b51a:	bf00      	nop
    b51c:	200017b8 	.word	0x200017b8
    b520:	0002a1a8 	.word	0x0002a1a8
    b524:	00029870 	.word	0x00029870
    b528:	00029a50 	.word	0x00029a50
    b52c:	0002c654 	.word	0x0002c654

0000b530 <bt_mesh_reset>:

	return -ENOTSUP;
}

void bt_mesh_reset(void)
{
    b530:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b532:	481d      	ldr	r0, [pc, #116]	; (b5a8 <bt_mesh_reset+0x78>)
    b534:	f3bf 8f5b 	dmb	ish
    b538:	6803      	ldr	r3, [r0, #0]
    b53a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    b53e:	07db      	lsls	r3, r3, #31
    b540:	d531      	bpl.n	b5a6 <bt_mesh_reset+0x76>
		return;
	}

	bt_mesh.iv_index = 0U;
    b542:	2400      	movs	r4, #0
	bt_mesh.ivu_duration = 0;
	bt_mesh.seq = 0U;

	memset(bt_mesh.flags, 0, sizeof(bt_mesh.flags));
    b544:	4621      	mov	r1, r4
    b546:	2204      	movs	r2, #4
	bt_mesh.iv_index = 0U;
    b548:	f1a0 0508 	sub.w	r5, r0, #8
    b54c:	f840 4c08 	str.w	r4, [r0, #-8]
	bt_mesh.ivu_duration = 0;
    b550:	7704      	strb	r4, [r0, #28]
	bt_mesh.seq = 0U;
    b552:	f840 4c04 	str.w	r4, [r0, #-4]
	memset(bt_mesh.flags, 0, sizeof(bt_mesh.flags));
    b556:	f018 fc32 	bl	23dbe <memset>

	/* If this fails, the work handler will return early on the next
	 * execution, as the device is not provisioned. If the device is
	 * reprovisioned, the timer is always restarted.
	 */
	(void)k_work_cancel_delayable(&bt_mesh.ivu_timer);
    b55a:	f105 0028 	add.w	r0, r5, #40	; 0x28
    b55e:	f01d fc40 	bl	28de2 <k_work_cancel_delayable>

	bt_mesh_model_reset();
    b562:	f007 fb77 	bl	12c54 <bt_mesh_model_reset>
	bt_mesh_cfg_default_set();
    b566:	f000 fa07 	bl	b978 <bt_mesh_cfg_default_set>
	bt_mesh_trans_reset();
    b56a:	f003 f84b 	bl	e604 <bt_mesh_trans_reset>
	bt_mesh_app_keys_reset();
    b56e:	f002 fb1b 	bl	dba8 <bt_mesh_app_keys_reset>
	bt_mesh_net_keys_reset();
    b572:	f002 f82d 	bl	d5d0 <bt_mesh_net_keys_reset>

	bt_mesh_net_loopback_clear(BT_MESH_KEY_ANY);
    b576:	f64f 70ff 	movw	r0, #65535	; 0xffff
    b57a:	f001 fab3 	bl	cae4 <bt_mesh_net_loopback_clear>
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND)) {
		bt_mesh_friends_clear();
	}

	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY)) {
		bt_mesh_proxy_gatt_disable();
    b57e:	f00a f86d 	bl	1565c <bt_mesh_proxy_gatt_disable>
	}

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		bt_mesh_net_clear();
    b582:	f01a fa18 	bl	259b6 <bt_mesh_net_clear>
	}

	(void)memset(bt_mesh.dev_key, 0, sizeof(bt_mesh.dev_key));
    b586:	4621      	mov	r1, r4
    b588:	2210      	movs	r2, #16
    b58a:	f105 0058 	add.w	r0, r5, #88	; 0x58
    b58e:	f018 fc16 	bl	23dbe <memset>

	bt_mesh_scan_disable();
    b592:	f000 fb59 	bl	bc48 <bt_mesh_scan_disable>
	bt_mesh_beacon_disable();
    b596:	f000 fe59 	bl	c24c <bt_mesh_beacon_disable>

	bt_mesh_comp_unprovision();
    b59a:	f005 f815 	bl	105c8 <bt_mesh_comp_unprovision>

	if (IS_ENABLED(CONFIG_BT_MESH_PROV)) {
		bt_mesh_prov_reset();
	}
}
    b59e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_mesh_prov_reset();
    b5a2:	f008 b9db 	b.w	1395c <bt_mesh_prov_reset>
}
    b5a6:	bd38      	pop	{r3, r4, r5, pc}
    b5a8:	200018d8 	.word	0x200018d8

0000b5ac <bt_mesh_is_provisioned>:
    b5ac:	4b04      	ldr	r3, [pc, #16]	; (b5c0 <bt_mesh_is_provisioned+0x14>)
    b5ae:	f3bf 8f5b 	dmb	ish
    b5b2:	6818      	ldr	r0, [r3, #0]
    b5b4:	f3bf 8f5b 	dmb	ish

bool bt_mesh_is_provisioned(void)
{
	return atomic_test_bit(bt_mesh.flags, BT_MESH_VALID);
}
    b5b8:	f000 0001 	and.w	r0, r0, #1
    b5bc:	4770      	bx	lr
    b5be:	bf00      	nop
    b5c0:	200018d8 	.word	0x200018d8

0000b5c4 <bt_mesh_start>:
		mod->cb->start(mod);
	}
}

int bt_mesh_start(void)
{
    b5c4:	b538      	push	{r3, r4, r5, lr}
	int err;

	err = bt_mesh_adv_enable();
    b5c6:	f007 fedd 	bl	13384 <bt_mesh_adv_enable>
	if (err) {
    b5ca:	4604      	mov	r4, r0
    b5cc:	b158      	cbz	r0, b5e6 <bt_mesh_start+0x22>
    b5ce:	4917      	ldr	r1, [pc, #92]	; (b62c <bt_mesh_start+0x68>)
    b5d0:	4b17      	ldr	r3, [pc, #92]	; (b630 <bt_mesh_start+0x6c>)
		BT_ERR("Failed enabling advertiser");
    b5d2:	4818      	ldr	r0, [pc, #96]	; (b634 <bt_mesh_start+0x70>)
    b5d4:	1ac9      	subs	r1, r1, r3
    b5d6:	08c9      	lsrs	r1, r1, #3
    b5d8:	0189      	lsls	r1, r1, #6
    b5da:	f041 0101 	orr.w	r1, r1, #1
    b5de:	f016 fa84 	bl	21aea <log_0>
	bt_mesh_hb_start();

	bt_mesh_model_foreach(model_start, NULL);

	return 0;
}
    b5e2:	4620      	mov	r0, r4
    b5e4:	bd38      	pop	{r3, r4, r5, pc}
	if (bt_mesh_beacon_enabled()) {
    b5e6:	f000 f8d5 	bl	b794 <bt_mesh_beacon_enabled>
    b5ea:	b1e0      	cbz	r0, b626 <bt_mesh_start+0x62>
		bt_mesh_beacon_enable();
    b5ec:	f000 fe1c 	bl	c228 <bt_mesh_beacon_enable>
	    bt_mesh_gatt_proxy_get() != BT_MESH_GATT_PROXY_NOT_SUPPORTED) {
    b5f0:	f000 f900 	bl	b7f4 <bt_mesh_gatt_proxy_get>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    b5f4:	2802      	cmp	r0, #2
    b5f6:	d003      	beq.n	b600 <bt_mesh_start+0x3c>
		bt_mesh_proxy_gatt_enable();
    b5f8:	f009 fffe 	bl	155f8 <bt_mesh_proxy_gatt_enable>
		bt_mesh_adv_update();
    b5fc:	f007 fe94 	bl	13328 <bt_mesh_adv_update>
		bt_mesh_scan_enable();
    b600:	f000 faf6 	bl	bbf0 <bt_mesh_scan_enable>
		struct bt_mesh_subnet *sub = bt_mesh_subnet_next(NULL);
    b604:	2000      	movs	r0, #0
    b606:	f001 ffc3 	bl	d590 <bt_mesh_subnet_next>
    b60a:	4605      	mov	r5, r0
		uint16_t addr = bt_mesh_primary_addr();
    b60c:	f004 ffe2 	bl	105d4 <bt_mesh_primary_addr>
    b610:	4601      	mov	r1, r0
		bt_mesh_prov_complete(sub->net_idx, addr);
    b612:	8ba8      	ldrh	r0, [r5, #28]
    b614:	f008 f99a 	bl	1394c <bt_mesh_prov_complete>
	bt_mesh_hb_start();
    b618:	f004 f9fc 	bl	fa14 <bt_mesh_hb_start>
	bt_mesh_model_foreach(model_start, NULL);
    b61c:	4806      	ldr	r0, [pc, #24]	; (b638 <bt_mesh_start+0x74>)
    b61e:	2100      	movs	r1, #0
    b620:	f004 fce6 	bl	fff0 <bt_mesh_model_foreach>
	return 0;
    b624:	e7dd      	b.n	b5e2 <bt_mesh_start+0x1e>
		bt_mesh_beacon_disable();
    b626:	f000 fe11 	bl	c24c <bt_mesh_beacon_disable>
    b62a:	e7e1      	b.n	b5f0 <bt_mesh_start+0x2c>
    b62c:	000299e0 	.word	0x000299e0
    b630:	00029870 	.word	0x00029870
    b634:	0002c680 	.word	0x0002c680
    b638:	00025867 	.word	0x00025867

0000b63c <bt_mesh_provision>:
{
    b63c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    b640:	461f      	mov	r7, r3
    b642:	4c2f      	ldr	r4, [pc, #188]	; (b700 <bt_mesh_provision+0xc4>)
    b644:	4b2f      	ldr	r3, [pc, #188]	; (b704 <bt_mesh_provision+0xc8>)
    b646:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
    b64a:	1ae4      	subs	r4, r4, r3
    b64c:	08e4      	lsrs	r4, r4, #3
	BT_INFO("Primary Element: 0x%04x", addr);
    b64e:	01a4      	lsls	r4, r4, #6
{
    b650:	460d      	mov	r5, r1
    b652:	4616      	mov	r6, r2
	BT_INFO("Primary Element: 0x%04x", addr);
    b654:	4641      	mov	r1, r8
    b656:	f044 0203 	orr.w	r2, r4, #3
{
    b65a:	4681      	mov	r9, r0
	BT_INFO("Primary Element: 0x%04x", addr);
    b65c:	482a      	ldr	r0, [pc, #168]	; (b708 <bt_mesh_provision+0xcc>)
    b65e:	f016 fa51 	bl	21b04 <log_1>
	BT_DBG("net_idx 0x%04x flags 0x%02x iv_index 0x%04x",
    b662:	4b2a      	ldr	r3, [pc, #168]	; (b70c <bt_mesh_provision+0xd0>)
    b664:	482a      	ldr	r0, [pc, #168]	; (b710 <bt_mesh_provision+0xd4>)
    b666:	e9cd 3500 	strd	r3, r5, [sp]
    b66a:	f044 0304 	orr.w	r3, r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b66e:	4c29      	ldr	r4, [pc, #164]	; (b714 <bt_mesh_provision+0xd8>)
    b670:	2204      	movs	r2, #4
    b672:	4669      	mov	r1, sp
    b674:	e9cd 6702 	strd	r6, r7, [sp, #8]
    b678:	f016 fa8d 	bl	21b96 <log_n>
    b67c:	f3bf 8f5b 	dmb	ish
    b680:	e854 0f00 	ldrex	r0, [r4]
    b684:	f040 0301 	orr.w	r3, r0, #1
    b688:	e844 3200 	strex	r2, r3, [r4]
    b68c:	2a00      	cmp	r2, #0
    b68e:	d1f7      	bne.n	b680 <bt_mesh_provision+0x44>
    b690:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_mesh.flags, BT_MESH_VALID)) {
    b694:	f010 0001 	ands.w	r0, r0, #1
    b698:	d12f      	bne.n	b6fa <bt_mesh_provision+0xbe>
		if (bt_mesh_proxy_prov_disable(false) == 0) {
    b69a:	f00a f8a9 	bl	157f0 <bt_mesh_proxy_prov_disable>
	err = bt_mesh_net_create(net_idx, flags, net_key, iv_index);
    b69e:	463b      	mov	r3, r7
		if (bt_mesh_proxy_prov_disable(false) == 0) {
    b6a0:	4682      	mov	sl, r0
	err = bt_mesh_net_create(net_idx, flags, net_key, iv_index);
    b6a2:	464a      	mov	r2, r9
    b6a4:	4628      	mov	r0, r5
    b6a6:	4631      	mov	r1, r6
    b6a8:	f000 ff82 	bl	c5b0 <bt_mesh_net_create>
	if (err) {
    b6ac:	4605      	mov	r5, r0
    b6ae:	b1a0      	cbz	r0, b6da <bt_mesh_provision+0x9e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b6b0:	f3bf 8f5b 	dmb	ish
    b6b4:	e854 3f00 	ldrex	r3, [r4]
    b6b8:	f023 0301 	bic.w	r3, r3, #1
    b6bc:	e844 3200 	strex	r2, r3, [r4]
    b6c0:	2a00      	cmp	r2, #0
    b6c2:	d1f7      	bne.n	b6b4 <bt_mesh_provision+0x78>
    b6c4:	f3bf 8f5b 	dmb	ish
		if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT) && pb_gatt_enabled) {
    b6c8:	f1ba 0f00 	cmp.w	sl, #0
    b6cc:	d101      	bne.n	b6d2 <bt_mesh_provision+0x96>
			(void)bt_mesh_proxy_prov_enable();
    b6ce:	f00a f86b 	bl	157a8 <bt_mesh_proxy_prov_enable>
}
    b6d2:	4628      	mov	r0, r5
    b6d4:	b004      	add	sp, #16
    b6d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	bt_mesh.seq = 0U;
    b6da:	f844 0c04 	str.w	r0, [r4, #-4]
	bt_mesh_comp_provision(addr);
    b6de:	4640      	mov	r0, r8
    b6e0:	f004 ff5c 	bl	1059c <bt_mesh_comp_provision>
	memcpy(bt_mesh.dev_key, dev_key, 16);
    b6e4:	990d      	ldr	r1, [sp, #52]	; 0x34
    b6e6:	2210      	movs	r2, #16
    b6e8:	f104 0050 	add.w	r0, r4, #80	; 0x50
    b6ec:	f018 fb5c 	bl	23da8 <memcpy>
		bt_mesh_net_pending_net_store();
    b6f0:	f001 fc6a 	bl	cfc8 <bt_mesh_net_pending_net_store>
	bt_mesh_start();
    b6f4:	f7ff ff66 	bl	b5c4 <bt_mesh_start>
	return 0;
    b6f8:	e7eb      	b.n	b6d2 <bt_mesh_provision+0x96>
		return -EALREADY;
    b6fa:	f06f 0577 	mvn.w	r5, #119	; 0x77
    b6fe:	e7e8      	b.n	b6d2 <bt_mesh_provision+0x96>
    b700:	000299e0 	.word	0x000299e0
    b704:	00029870 	.word	0x00029870
    b708:	0002c69b 	.word	0x0002c69b
    b70c:	0002c6f0 	.word	0x0002c6f0
    b710:	0002c6b3 	.word	0x0002c6b3
    b714:	200018d8 	.word	0x200018d8

0000b718 <atomic_set_bit_to.constprop.0>:
	atomic_val_t mask = ATOMIC_MASK(bit);
    b718:	2301      	movs	r3, #1
    b71a:	fa03 f000 	lsl.w	r0, r3, r0
	if (val) {
    b71e:	4b0c      	ldr	r3, [pc, #48]	; (b750 <atomic_set_bit_to.constprop.0+0x38>)
    b720:	b159      	cbz	r1, b73a <atomic_set_bit_to.constprop.0+0x22>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b722:	f3bf 8f5b 	dmb	ish
    b726:	e853 2f00 	ldrex	r2, [r3]
    b72a:	4302      	orrs	r2, r0
    b72c:	e843 2100 	strex	r1, r2, [r3]
    b730:	2900      	cmp	r1, #0
    b732:	d1f8      	bne.n	b726 <atomic_set_bit_to.constprop.0+0xe>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b734:	f3bf 8f5b 	dmb	ish
	}
}
    b738:	4770      	bx	lr
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    b73a:	43c0      	mvns	r0, r0
    b73c:	f3bf 8f5b 	dmb	ish
    b740:	e853 2f00 	ldrex	r2, [r3]
    b744:	4002      	ands	r2, r0
    b746:	e843 2100 	strex	r1, r2, [r3]
    b74a:	2900      	cmp	r1, #0
    b74c:	d0f2      	beq.n	b734 <atomic_set_bit_to.constprop.0+0x1c>
    b74e:	e7f7      	b.n	b740 <atomic_set_bit_to.constprop.0+0x28>
    b750:	200018d8 	.word	0x200018d8

0000b754 <bt_mesh_beacon_set>:
	uint8_t frnd;
	uint8_t default_ttl;
};

void bt_mesh_beacon_set(bool beacon)
{
    b754:	b510      	push	{r4, lr}
    b756:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    b758:	480d      	ldr	r0, [pc, #52]	; (b790 <bt_mesh_beacon_set+0x3c>)
    b75a:	f01a f8a8 	bl	258ae <atomic_get>
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_BEACON) == beacon) {
    b75e:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    b762:	4284      	cmp	r4, r0
    b764:	d013      	beq.n	b78e <bt_mesh_beacon_set+0x3a>
		return;
	}

	atomic_set_bit_to(bt_mesh.flags, BT_MESH_BEACON, beacon);
    b766:	4621      	mov	r1, r4
    b768:	2007      	movs	r0, #7
    b76a:	f7ff ffd5 	bl	b718 <atomic_set_bit_to.constprop.0>

	if (beacon) {
    b76e:	b15c      	cbz	r4, b788 <bt_mesh_beacon_set+0x34>
		bt_mesh_beacon_enable();
    b770:	f000 fd5a 	bl	c228 <bt_mesh_beacon_enable>
    b774:	4806      	ldr	r0, [pc, #24]	; (b790 <bt_mesh_beacon_set+0x3c>)
    b776:	f01a f89a 	bl	258ae <atomic_get>
	} else {
		bt_mesh_beacon_disable();
	}

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    b77a:	07c3      	lsls	r3, r0, #31
    b77c:	d507      	bpl.n	b78e <bt_mesh_beacon_set+0x3a>
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
	}
}
    b77e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
    b782:	2007      	movs	r0, #7
    b784:	f007 be82 	b.w	1348c <bt_mesh_settings_store_schedule>
		bt_mesh_beacon_disable();
    b788:	f000 fd60 	bl	c24c <bt_mesh_beacon_disable>
    b78c:	e7f2      	b.n	b774 <bt_mesh_beacon_set+0x20>
}
    b78e:	bd10      	pop	{r4, pc}
    b790:	200018d8 	.word	0x200018d8

0000b794 <bt_mesh_beacon_enabled>:

bool bt_mesh_beacon_enabled(void)
{
    b794:	b508      	push	{r3, lr}
    b796:	4803      	ldr	r0, [pc, #12]	; (b7a4 <bt_mesh_beacon_enabled+0x10>)
    b798:	f01a f889 	bl	258ae <atomic_get>
	return atomic_test_bit(bt_mesh.flags, BT_MESH_BEACON);
}
    b79c:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    b7a0:	bd08      	pop	{r3, pc}
    b7a2:	bf00      	nop
    b7a4:	200018d8 	.word	0x200018d8

0000b7a8 <bt_mesh_gatt_proxy_set>:

static int feature_set(int feature_flag, enum bt_mesh_feat_state state)
{
	if (state != BT_MESH_FEATURE_DISABLED &&
    b7a8:	2801      	cmp	r0, #1
		       BT_MESH_FEATURE_ENABLED :
		       BT_MESH_FEATURE_DISABLED;
}

int bt_mesh_gatt_proxy_set(enum bt_mesh_feat_state gatt_proxy)
{
    b7aa:	b508      	push	{r3, lr}
    b7ac:	4601      	mov	r1, r0
	if (state != BT_MESH_FEATURE_DISABLED &&
    b7ae:	d819      	bhi.n	b7e4 <bt_mesh_gatt_proxy_set+0x3c>
    b7b0:	480f      	ldr	r0, [pc, #60]	; (b7f0 <bt_mesh_gatt_proxy_set+0x48>)
    b7b2:	f01a f87c 	bl	258ae <atomic_get>
	    (state == BT_MESH_FEATURE_ENABLED)) {
    b7b6:	f001 0101 	and.w	r1, r1, #1
	if (atomic_test_bit(bt_mesh.flags, feature_flag) ==
    b7ba:	f3c0 2000 	ubfx	r0, r0, #8, #1
    b7be:	4281      	cmp	r1, r0
    b7c0:	d013      	beq.n	b7ea <bt_mesh_gatt_proxy_set+0x42>
	atomic_set_bit_to(bt_mesh.flags, feature_flag,
    b7c2:	2008      	movs	r0, #8
    b7c4:	f7ff ffa8 	bl	b718 <atomic_set_bit_to.constprop.0>
	err = feature_set(BT_MESH_GATT_PROXY, gatt_proxy);
	if (err) {
		return err;
	}

	bt_mesh_hb_feature_changed(BT_MESH_FEAT_PROXY);
    b7c8:	2002      	movs	r0, #2
    b7ca:	f004 f8fd 	bl	f9c8 <bt_mesh_hb_feature_changed>
    b7ce:	4808      	ldr	r0, [pc, #32]	; (b7f0 <bt_mesh_gatt_proxy_set+0x48>)
    b7d0:	f01a f86d 	bl	258ae <atomic_get>

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    b7d4:	f010 0001 	ands.w	r0, r0, #1
    b7d8:	d003      	beq.n	b7e2 <bt_mesh_gatt_proxy_set+0x3a>
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
    b7da:	2007      	movs	r0, #7
    b7dc:	f007 fe56 	bl	1348c <bt_mesh_settings_store_schedule>
    b7e0:	2000      	movs	r0, #0
	}

	return 0;
}
    b7e2:	bd08      	pop	{r3, pc}
		return -EINVAL;
    b7e4:	f06f 0015 	mvn.w	r0, #21
    b7e8:	e7fb      	b.n	b7e2 <bt_mesh_gatt_proxy_set+0x3a>
		return -EALREADY;
    b7ea:	f06f 0077 	mvn.w	r0, #119	; 0x77
    b7ee:	e7f8      	b.n	b7e2 <bt_mesh_gatt_proxy_set+0x3a>
    b7f0:	200018d8 	.word	0x200018d8

0000b7f4 <bt_mesh_gatt_proxy_get>:

enum bt_mesh_feat_state bt_mesh_gatt_proxy_get(void)
{
    b7f4:	b508      	push	{r3, lr}
    b7f6:	4803      	ldr	r0, [pc, #12]	; (b804 <bt_mesh_gatt_proxy_get+0x10>)
    b7f8:	f01a f859 	bl	258ae <atomic_get>
	if (!IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY)) {
		return BT_MESH_FEATURE_NOT_SUPPORTED;
	}

	return feature_get(BT_MESH_GATT_PROXY);
}
    b7fc:	f3c0 2000 	ubfx	r0, r0, #8, #1
    b800:	bd08      	pop	{r3, pc}
    b802:	bf00      	nop
    b804:	200018d8 	.word	0x200018d8

0000b808 <bt_mesh_default_ttl_set>:

int bt_mesh_default_ttl_set(uint8_t default_ttl)
{
	if (default_ttl == 1 || default_ttl > BT_MESH_TTL_MAX) {
    b808:	2801      	cmp	r0, #1
{
    b80a:	b508      	push	{r3, lr}
	if (default_ttl == 1 || default_ttl > BT_MESH_TTL_MAX) {
    b80c:	d014      	beq.n	b838 <bt_mesh_default_ttl_set+0x30>
    b80e:	0602      	lsls	r2, r0, #24
    b810:	d412      	bmi.n	b838 <bt_mesh_default_ttl_set+0x30>
		return -EINVAL;
	}

	if (default_ttl == bt_mesh.default_ttl) {
    b812:	4b0b      	ldr	r3, [pc, #44]	; (b840 <bt_mesh_default_ttl_set+0x38>)
    b814:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
    b818:	4282      	cmp	r2, r0
    b81a:	d101      	bne.n	b820 <bt_mesh_default_ttl_set+0x18>

	bt_mesh.default_ttl = default_ttl;

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
    b81c:	2000      	movs	r0, #0
	}

	return 0;
}
    b81e:	bd08      	pop	{r3, pc}
	bt_mesh.default_ttl = default_ttl;
    b820:	f883 0027 	strb.w	r0, [r3, #39]	; 0x27
    b824:	f103 0008 	add.w	r0, r3, #8
    b828:	f01a f841 	bl	258ae <atomic_get>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    b82c:	07c3      	lsls	r3, r0, #31
    b82e:	d5f5      	bpl.n	b81c <bt_mesh_default_ttl_set+0x14>
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
    b830:	2007      	movs	r0, #7
    b832:	f007 fe2b 	bl	1348c <bt_mesh_settings_store_schedule>
    b836:	e7f1      	b.n	b81c <bt_mesh_default_ttl_set+0x14>
		return -EINVAL;
    b838:	f06f 0015 	mvn.w	r0, #21
    b83c:	e7ef      	b.n	b81e <bt_mesh_default_ttl_set+0x16>
    b83e:	bf00      	nop
    b840:	200018d0 	.word	0x200018d0

0000b844 <bt_mesh_default_ttl_get>:

uint8_t bt_mesh_default_ttl_get(void)
{
	return bt_mesh.default_ttl;
}
    b844:	4b01      	ldr	r3, [pc, #4]	; (b84c <bt_mesh_default_ttl_get+0x8>)
    b846:	f893 0027 	ldrb.w	r0, [r3, #39]	; 0x27
    b84a:	4770      	bx	lr
    b84c:	200018d0 	.word	0x200018d0

0000b850 <bt_mesh_net_transmit_set>:

	return feature_get(BT_MESH_FRIEND);
}

void bt_mesh_net_transmit_set(uint8_t xmit)
{
    b850:	b508      	push	{r3, lr}
	if (bt_mesh.net_xmit == xmit) {
    b852:	4b09      	ldr	r3, [pc, #36]	; (b878 <bt_mesh_net_transmit_set+0x28>)
    b854:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
    b858:	4282      	cmp	r2, r0
    b85a:	d00c      	beq.n	b876 <bt_mesh_net_transmit_set+0x26>
		return;
	}

	bt_mesh.net_xmit = xmit;
    b85c:	f883 0025 	strb.w	r0, [r3, #37]	; 0x25
    b860:	f103 0008 	add.w	r0, r3, #8
    b864:	f01a f823 	bl	258ae <atomic_get>

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    b868:	07c3      	lsls	r3, r0, #31
    b86a:	d504      	bpl.n	b876 <bt_mesh_net_transmit_set+0x26>
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
	}
}
    b86c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
    b870:	2007      	movs	r0, #7
    b872:	f007 be0b 	b.w	1348c <bt_mesh_settings_store_schedule>
}
    b876:	bd08      	pop	{r3, pc}
    b878:	200018d0 	.word	0x200018d0

0000b87c <bt_mesh_net_transmit_get>:

uint8_t bt_mesh_net_transmit_get(void)
{
	return bt_mesh.net_xmit;
}
    b87c:	4b01      	ldr	r3, [pc, #4]	; (b884 <bt_mesh_net_transmit_get+0x8>)
    b87e:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
    b882:	4770      	bx	lr
    b884:	200018d0 	.word	0x200018d0

0000b888 <bt_mesh_relay_set>:
	if (state != BT_MESH_FEATURE_DISABLED &&
    b888:	2801      	cmp	r0, #1

int bt_mesh_relay_set(enum bt_mesh_feat_state relay, uint8_t xmit)
{
    b88a:	b538      	push	{r3, r4, r5, lr}
    b88c:	4603      	mov	r3, r0
    b88e:	460c      	mov	r4, r1
	if (state != BT_MESH_FEATURE_DISABLED &&
    b890:	d823      	bhi.n	b8da <bt_mesh_relay_set+0x52>
    b892:	4813      	ldr	r0, [pc, #76]	; (b8e0 <bt_mesh_relay_set+0x58>)
    b894:	4d13      	ldr	r5, [pc, #76]	; (b8e4 <bt_mesh_relay_set+0x5c>)
    b896:	f01a f80a 	bl	258ae <atomic_get>
	    (state == BT_MESH_FEATURE_ENABLED)) {
    b89a:	f003 0101 	and.w	r1, r3, #1
	if (atomic_test_bit(bt_mesh.flags, feature_flag) ==
    b89e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    b8a2:	4281      	cmp	r1, r0
    b8a4:	d012      	beq.n	b8cc <bt_mesh_relay_set+0x44>
	atomic_set_bit_to(bt_mesh.flags, feature_flag,
    b8a6:	2006      	movs	r0, #6
    b8a8:	f7ff ff36 	bl	b718 <atomic_set_bit_to.constprop.0>
	if (err == -EALREADY && bt_mesh.relay_xmit == xmit) {
		return -EALREADY;
	}

	bt_mesh.relay_xmit = xmit;
	bt_mesh_hb_feature_changed(BT_MESH_FEAT_RELAY);
    b8ac:	2001      	movs	r0, #1
	bt_mesh.relay_xmit = xmit;
    b8ae:	f885 4026 	strb.w	r4, [r5, #38]	; 0x26
	bt_mesh_hb_feature_changed(BT_MESH_FEAT_RELAY);
    b8b2:	f004 f889 	bl	f9c8 <bt_mesh_hb_feature_changed>
    b8b6:	480a      	ldr	r0, [pc, #40]	; (b8e0 <bt_mesh_relay_set+0x58>)
    b8b8:	f019 fff9 	bl	258ae <atomic_get>

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    b8bc:	f010 0001 	ands.w	r0, r0, #1
    b8c0:	d003      	beq.n	b8ca <bt_mesh_relay_set+0x42>
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
    b8c2:	2007      	movs	r0, #7
    b8c4:	f007 fde2 	bl	1348c <bt_mesh_settings_store_schedule>
	}

	return 0;
    b8c8:	2000      	movs	r0, #0
}
    b8ca:	bd38      	pop	{r3, r4, r5, pc}
	if (err == -EALREADY && bt_mesh.relay_xmit == xmit) {
    b8cc:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
    b8d0:	42a3      	cmp	r3, r4
    b8d2:	d1eb      	bne.n	b8ac <bt_mesh_relay_set+0x24>
		return -EALREADY;
    b8d4:	f06f 0077 	mvn.w	r0, #119	; 0x77
    b8d8:	e7f7      	b.n	b8ca <bt_mesh_relay_set+0x42>
		return err;
    b8da:	f06f 0015 	mvn.w	r0, #21
    b8de:	e7f4      	b.n	b8ca <bt_mesh_relay_set+0x42>
    b8e0:	200018d8 	.word	0x200018d8
    b8e4:	200018d0 	.word	0x200018d0

0000b8e8 <cfg_set>:
	}
}

static int cfg_set(const char *name, size_t len_rd,
		   settings_read_cb read_cb, void *cb_arg)
{
    b8e8:	b513      	push	{r0, r1, r4, lr}
    b8ea:	460c      	mov	r4, r1
    b8ec:	4610      	mov	r0, r2
    b8ee:	4619      	mov	r1, r3
	struct cfg_val cfg;
	int err;

	if (len_rd == 0) {
    b8f0:	b17c      	cbz	r4, b912 <cfg_set+0x2a>
		BT_DBG("Cleared configuration state");
		return 0;
	}

	err = bt_mesh_settings_set(read_cb, cb_arg, &cfg, sizeof(cfg));
    b8f2:	2307      	movs	r3, #7
    b8f4:	466a      	mov	r2, sp
    b8f6:	f007 fd97 	bl	13428 <bt_mesh_settings_set>
	if (err) {
    b8fa:	4604      	mov	r4, r0
    b8fc:	b160      	cbz	r0, b918 <cfg_set+0x30>
    b8fe:	4913      	ldr	r1, [pc, #76]	; (b94c <cfg_set+0x64>)
    b900:	4b13      	ldr	r3, [pc, #76]	; (b950 <cfg_set+0x68>)
		BT_ERR("Failed to set \'cfg\'");
    b902:	4814      	ldr	r0, [pc, #80]	; (b954 <cfg_set+0x6c>)
    b904:	1ac9      	subs	r1, r1, r3
    b906:	08c9      	lsrs	r1, r1, #3
    b908:	0189      	lsls	r1, r1, #6
    b90a:	f041 0101 	orr.w	r1, r1, #1
    b90e:	f016 f8ec 	bl	21aea <log_0>
	bt_mesh_default_ttl_set(cfg.default_ttl);

	BT_DBG("Restored configuration state");

	return 0;
}
    b912:	4620      	mov	r0, r4
    b914:	b002      	add	sp, #8
    b916:	bd10      	pop	{r4, pc}
	bt_mesh_net_transmit_set(cfg.net_transmit);
    b918:	f89d 0000 	ldrb.w	r0, [sp]
    b91c:	f7ff ff98 	bl	b850 <bt_mesh_net_transmit_set>
	bt_mesh_relay_set(cfg.relay, cfg.relay_retransmit);
    b920:	f89d 1002 	ldrb.w	r1, [sp, #2]
    b924:	f89d 0001 	ldrb.w	r0, [sp, #1]
    b928:	f7ff ffae 	bl	b888 <bt_mesh_relay_set>
	bt_mesh_beacon_set(cfg.beacon);
    b92c:	f89d 0003 	ldrb.w	r0, [sp, #3]
    b930:	3800      	subs	r0, #0
    b932:	bf18      	it	ne
    b934:	2001      	movne	r0, #1
    b936:	f7ff ff0d 	bl	b754 <bt_mesh_beacon_set>
	bt_mesh_gatt_proxy_set(cfg.gatt_proxy);
    b93a:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b93e:	f7ff ff33 	bl	b7a8 <bt_mesh_gatt_proxy_set>
	bt_mesh_default_ttl_set(cfg.default_ttl);
    b942:	f89d 0006 	ldrb.w	r0, [sp, #6]
    b946:	f7ff ff5f 	bl	b808 <bt_mesh_default_ttl_set>
	return 0;
    b94a:	e7e2      	b.n	b912 <cfg_set+0x2a>
    b94c:	000299a8 	.word	0x000299a8
    b950:	00029870 	.word	0x00029870
    b954:	0002c702 	.word	0x0002c702

0000b958 <bt_mesh_relay_get>:
{
    b958:	b508      	push	{r3, lr}
    b95a:	4803      	ldr	r0, [pc, #12]	; (b968 <bt_mesh_relay_get+0x10>)
    b95c:	f019 ffa7 	bl	258ae <atomic_get>
}
    b960:	f3c0 1080 	ubfx	r0, r0, #6, #1
    b964:	bd08      	pop	{r3, pc}
    b966:	bf00      	nop
    b968:	200018d8 	.word	0x200018d8

0000b96c <bt_mesh_relay_retransmit_get>:
}
    b96c:	4b01      	ldr	r3, [pc, #4]	; (b974 <bt_mesh_relay_retransmit_get+0x8>)
    b96e:	f893 0026 	ldrb.w	r0, [r3, #38]	; 0x26
    b972:	4770      	bx	lr
    b974:	200018d0 	.word	0x200018d0

0000b978 <bt_mesh_cfg_default_set>:
	bt_mesh.net_xmit =
    b978:	4b0a      	ldr	r3, [pc, #40]	; (b9a4 <bt_mesh_cfg_default_set+0x2c>)
    b97a:	220a      	movs	r2, #10
    b97c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	bt_mesh.relay_xmit =
    b980:	f240 720a 	movw	r2, #1802	; 0x70a
    b984:	84da      	strh	r2, [r3, #38]	; 0x26
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b986:	3308      	adds	r3, #8
    b988:	f3bf 8f5b 	dmb	ish
    b98c:	e853 2f00 	ldrex	r2, [r3]
    b990:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    b994:	e843 2100 	strex	r1, r2, [r3]
    b998:	2900      	cmp	r1, #0
    b99a:	d1f7      	bne.n	b98c <bt_mesh_cfg_default_set+0x14>
    b99c:	f3bf 8f5b 	dmb	ish
}
    b9a0:	4770      	bx	lr
    b9a2:	bf00      	nop
    b9a4:	200018d0 	.word	0x200018d0

0000b9a8 <bt_mesh_cfg_pending_store>:
		BT_HEXDUMP_DBG(&val, sizeof(val), "raw value");
	}
}

void bt_mesh_cfg_pending_store(void)
{
    b9a8:	b507      	push	{r0, r1, r2, lr}
    b9aa:	4823      	ldr	r0, [pc, #140]	; (ba38 <bt_mesh_cfg_pending_store+0x90>)
    b9ac:	f019 ff7f 	bl	258ae <atomic_get>
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    b9b0:	07c3      	lsls	r3, r0, #31
    b9b2:	d52e      	bpl.n	ba12 <bt_mesh_cfg_pending_store+0x6a>
	return bt_mesh.net_xmit;
    b9b4:	4a21      	ldr	r2, [pc, #132]	; (ba3c <bt_mesh_cfg_pending_store+0x94>)
	val.net_transmit = bt_mesh_net_transmit_get();
    b9b6:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
    b9ba:	f88d 3000 	strb.w	r3, [sp]
	val.relay = bt_mesh_relay_get();
    b9be:	f7ff ffcb 	bl	b958 <bt_mesh_relay_get>
	val.relay_retransmit = bt_mesh_relay_retransmit_get();
    b9c2:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
    b9c6:	f88d 3002 	strb.w	r3, [sp, #2]
	val.relay = bt_mesh_relay_get();
    b9ca:	f88d 0001 	strb.w	r0, [sp, #1]
	val.beacon = bt_mesh_beacon_enabled();
    b9ce:	f7ff fee1 	bl	b794 <bt_mesh_beacon_enabled>
    b9d2:	f88d 0003 	strb.w	r0, [sp, #3]
	val.gatt_proxy = bt_mesh_gatt_proxy_get();
    b9d6:	f7ff ff0d 	bl	b7f4 <bt_mesh_gatt_proxy_get>
	val.frnd = bt_mesh_friend_get();
    b9da:	2302      	movs	r3, #2
	val.gatt_proxy = bt_mesh_gatt_proxy_get();
    b9dc:	f88d 0004 	strb.w	r0, [sp, #4]
	val.frnd = bt_mesh_friend_get();
    b9e0:	f88d 3005 	strb.w	r3, [sp, #5]
	err = settings_save_one("bt/mesh/Cfg", &val, sizeof(val));
    b9e4:	4816      	ldr	r0, [pc, #88]	; (ba40 <bt_mesh_cfg_pending_store+0x98>)
	val.default_ttl = bt_mesh_default_ttl_get();
    b9e6:	f892 3027 	ldrb.w	r3, [r2, #39]	; 0x27
    b9ea:	f88d 3006 	strb.w	r3, [sp, #6]
	err = settings_save_one("bt/mesh/Cfg", &val, sizeof(val));
    b9ee:	2207      	movs	r2, #7
    b9f0:	4669      	mov	r1, sp
    b9f2:	f7f8 f8c3 	bl	3b7c <settings_save_one>
	if (err) {
    b9f6:	b148      	cbz	r0, ba0c <bt_mesh_cfg_pending_store+0x64>
    b9f8:	4912      	ldr	r1, [pc, #72]	; (ba44 <bt_mesh_cfg_pending_store+0x9c>)
    b9fa:	4b13      	ldr	r3, [pc, #76]	; (ba48 <bt_mesh_cfg_pending_store+0xa0>)
		BT_ERR("Failed to store configuration value");
    b9fc:	4813      	ldr	r0, [pc, #76]	; (ba4c <bt_mesh_cfg_pending_store+0xa4>)
    b9fe:	1ac9      	subs	r1, r1, r3
    ba00:	08c9      	lsrs	r1, r1, #3
    ba02:	0189      	lsls	r1, r1, #6
    ba04:	f041 0101 	orr.w	r1, r1, #1
    ba08:	f016 f86f 	bl	21aea <log_0>
		store_pending_cfg();
	} else {
		clear_cfg();
	}
}
    ba0c:	b003      	add	sp, #12
    ba0e:	f85d fb04 	ldr.w	pc, [sp], #4
	err = settings_delete("bt/mesh/Cfg");
    ba12:	480b      	ldr	r0, [pc, #44]	; (ba40 <bt_mesh_cfg_pending_store+0x98>)
    ba14:	f016 fe69 	bl	226ea <settings_delete>
	if (err) {
    ba18:	2800      	cmp	r0, #0
    ba1a:	d0f7      	beq.n	ba0c <bt_mesh_cfg_pending_store+0x64>
    ba1c:	4b0a      	ldr	r3, [pc, #40]	; (ba48 <bt_mesh_cfg_pending_store+0xa0>)
    ba1e:	4909      	ldr	r1, [pc, #36]	; (ba44 <bt_mesh_cfg_pending_store+0x9c>)
		BT_ERR("Failed to clear configuration");
    ba20:	480b      	ldr	r0, [pc, #44]	; (ba50 <bt_mesh_cfg_pending_store+0xa8>)
    ba22:	1ac9      	subs	r1, r1, r3
    ba24:	08c9      	lsrs	r1, r1, #3
    ba26:	0189      	lsls	r1, r1, #6
    ba28:	f041 0101 	orr.w	r1, r1, #1
}
    ba2c:	b003      	add	sp, #12
    ba2e:	f85d eb04 	ldr.w	lr, [sp], #4
		BT_ERR("Failed to clear configuration");
    ba32:	f016 b85a 	b.w	21aea <log_0>
    ba36:	bf00      	nop
    ba38:	200018d8 	.word	0x200018d8
    ba3c:	200018d0 	.word	0x200018d0
    ba40:	0002c716 	.word	0x0002c716
    ba44:	000299a8 	.word	0x000299a8
    ba48:	00029870 	.word	0x00029870
    ba4c:	0002c722 	.word	0x0002c722
    ba50:	0002c746 	.word	0x0002c746

0000ba54 <adv_alloc>:
static struct bt_mesh_adv adv_pool[CONFIG_BT_MESH_ADV_BUF_COUNT];

static struct bt_mesh_adv *adv_alloc(int id)
{
	return &adv_pool[id];
}
    ba54:	4b02      	ldr	r3, [pc, #8]	; (ba60 <adv_alloc+0xc>)
    ba56:	220c      	movs	r2, #12
    ba58:	fb02 3000 	mla	r0, r2, r0, r3
    ba5c:	4770      	bx	lr
    ba5e:	bf00      	nop
    ba60:	200021e8 	.word	0x200021e8

0000ba64 <bt_mesh_scan_cb>:
//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

static void bt_mesh_scan_cb(const bt_addr_le_t *addr, int8_t rssi,
			    uint8_t adv_type, struct net_buf_simple *buf)
{
	if (adv_type != BT_GAP_ADV_TYPE_ADV_NONCONN_IND) {
    ba64:	2a03      	cmp	r2, #3
{
    ba66:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ba6a:	4680      	mov	r8, r0
    ba6c:	460f      	mov	r7, r1
    ba6e:	461c      	mov	r4, r3
	if (adv_type != BT_GAP_ADV_TYPE_ADV_NONCONN_IND) {
    ba70:	d104      	bne.n	ba7c <bt_mesh_scan_cb+0x18>
		case BT_DATA_MESH_BEACON:
			bt_mesh_beacon_recv(buf);
			break;
		default:
		  //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
			if (scan_cb)                             // scan_cb has been set //@@@1.3
    ba72:	f8df a0a8 	ldr.w	sl, [pc, #168]	; bb1c <bt_mesh_scan_cb+0xb8>
	while (buf->len > 1) {
    ba76:	88a3      	ldrh	r3, [r4, #4]
    ba78:	2b01      	cmp	r3, #1
    ba7a:	d801      	bhi.n	ba80 <bt_mesh_scan_cb+0x1c>
		}

		net_buf_simple_restore(buf, &state);
		net_buf_simple_pull(buf, len);
	}
}
    ba7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		len = net_buf_simple_pull_u8(buf);
    ba80:	4620      	mov	r0, r4
    ba82:	f01c fc61 	bl	28348 <net_buf_simple_pull_u8>
		if (len == 0U) {
    ba86:	4605      	mov	r5, r0
    ba88:	2800      	cmp	r0, #0
    ba8a:	d0f7      	beq.n	ba7c <bt_mesh_scan_cb+0x18>
		if (len > buf->len) {
    ba8c:	88a2      	ldrh	r2, [r4, #4]
    ba8e:	b283      	uxth	r3, r0
    ba90:	429a      	cmp	r2, r3
    ba92:	d20b      	bcs.n	baac <bt_mesh_scan_cb+0x48>
    ba94:	4b22      	ldr	r3, [pc, #136]	; (bb20 <bt_mesh_scan_cb+0xbc>)
    ba96:	4923      	ldr	r1, [pc, #140]	; (bb24 <bt_mesh_scan_cb+0xc0>)
			BT_WARN("AD malformed");
    ba98:	4823      	ldr	r0, [pc, #140]	; (bb28 <bt_mesh_scan_cb+0xc4>)
    ba9a:	1ac9      	subs	r1, r1, r3
    ba9c:	08c9      	lsrs	r1, r1, #3
    ba9e:	0189      	lsls	r1, r1, #6
}
    baa0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			BT_WARN("AD malformed");
    baa4:	f041 0102 	orr.w	r1, r1, #2
    baa8:	f016 b81f 	b.w	21aea <log_0>
	state->offset = net_buf_simple_headroom(buf);
    baac:	4620      	mov	r0, r4
    baae:	f01c fc7c 	bl	283aa <net_buf_simple_headroom>
    bab2:	4606      	mov	r6, r0
		type = net_buf_simple_pull_u8(buf);
    bab4:	4620      	mov	r0, r4
	state->len = buf->len;
    bab6:	f8b4 9004 	ldrh.w	r9, [r4, #4]
    baba:	f01c fc45 	bl	28348 <net_buf_simple_pull_u8>
		buf->len = len - 1;
    babe:	1e6a      	subs	r2, r5, #1
		switch (type) {
    bac0:	282a      	cmp	r0, #42	; 0x2a
		buf->len = len - 1;
    bac2:	80a2      	strh	r2, [r4, #4]
		switch (type) {
    bac4:	b2b6      	uxth	r6, r6
    bac6:	d007      	beq.n	bad8 <bt_mesh_scan_cb+0x74>
    bac8:	282b      	cmp	r0, #43	; 0x2b
    baca:	d014      	beq.n	baf6 <bt_mesh_scan_cb+0x92>
    bacc:	2829      	cmp	r0, #41	; 0x29
    bace:	d116      	bne.n	bafe <bt_mesh_scan_cb+0x9a>
			bt_mesh_pb_adv_recv(buf);
    bad0:	4620      	mov	r0, r4
    bad2:	f009 f9f9 	bl	14ec8 <bt_mesh_pb_adv_recv>
			break;
    bad6:	e004      	b.n	bae2 <bt_mesh_scan_cb+0x7e>
			bt_mesh_net_recv(buf, rssi, BT_MESH_NET_IF_ADV);
    bad8:	2200      	movs	r2, #0
    bada:	4639      	mov	r1, r7
    badc:	4620      	mov	r0, r4
    bade:	f001 f8ef 	bl	ccc0 <bt_mesh_net_recv>
	buf->data = buf->__buf + state->offset;
    bae2:	68a3      	ldr	r3, [r4, #8]
	buf->len = state->len;
    bae4:	f8a4 9004 	strh.w	r9, [r4, #4]
	buf->data = buf->__buf + state->offset;
    bae8:	4433      	add	r3, r6
    baea:	6023      	str	r3, [r4, #0]
		net_buf_simple_pull(buf, len);
    baec:	4629      	mov	r1, r5
    baee:	4620      	mov	r0, r4
    baf0:	f01c fc1a 	bl	28328 <net_buf_simple_pull>
    baf4:	e7bf      	b.n	ba76 <bt_mesh_scan_cb+0x12>
			bt_mesh_beacon_recv(buf);
    baf6:	4620      	mov	r0, r4
    baf8:	f000 faac 	bl	c054 <bt_mesh_beacon_recv>
			break;
    bafc:	e7f1      	b.n	bae2 <bt_mesh_scan_cb+0x7e>
			if (scan_cb)                             // scan_cb has been set //@@@1.3
    bafe:	f8da b000 	ldr.w	fp, [sl]
    bb02:	f1bb 0f00 	cmp.w	fp, #0
    bb06:	d0ec      	beq.n	bae2 <bt_mesh_scan_cb+0x7e>
    bb08:	68a3      	ldr	r3, [r4, #8]
	buf->len = state->len;
    bb0a:	f8a4 9004 	strh.w	r9, [r4, #4]
	buf->data = buf->__buf + state->offset;
    bb0e:	4433      	add	r3, r6
    bb10:	6023      	str	r3, [r4, #0]
			    scan_cb(type, addr, rssi, buf);      // call scan_cb if set
    bb12:	463a      	mov	r2, r7
    bb14:	4623      	mov	r3, r4
    bb16:	4641      	mov	r1, r8
    bb18:	47d8      	blx	fp
    bb1a:	e7e2      	b.n	bae2 <bt_mesh_scan_cb+0x7e>
    bb1c:	200022d8 	.word	0x200022d8
    bb20:	00029870 	.word	0x00029870
    bb24:	00029988 	.word	0x00029988
    bb28:	0002c770 	.word	0x0002c770

0000bb2c <bt_mesh_adv_create_from_pool>:
{
    bb2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bb30:	461e      	mov	r6, r3
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bb32:	4b18      	ldr	r3, [pc, #96]	; (bb94 <bt_mesh_adv_create_from_pool+0x68>)
    bb34:	f3bf 8f5b 	dmb	ish
    bb38:	681b      	ldr	r3, [r3, #0]
    bb3a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_SUSPENDED)) {
    bb3e:	f3c3 0840 	ubfx	r8, r3, #1, #1
    bb42:	079b      	lsls	r3, r3, #30
{
    bb44:	460d      	mov	r5, r1
    bb46:	4617      	mov	r7, r2
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_SUSPENDED)) {
    bb48:	d50d      	bpl.n	bb66 <bt_mesh_adv_create_from_pool+0x3a>
    bb4a:	4b13      	ldr	r3, [pc, #76]	; (bb98 <bt_mesh_adv_create_from_pool+0x6c>)
    bb4c:	4913      	ldr	r1, [pc, #76]	; (bb9c <bt_mesh_adv_create_from_pool+0x70>)
		BT_WARN("Refusing to allocate buffer while suspended");
    bb4e:	4814      	ldr	r0, [pc, #80]	; (bba0 <bt_mesh_adv_create_from_pool+0x74>)
    bb50:	1ac9      	subs	r1, r1, r3
    bb52:	08c9      	lsrs	r1, r1, #3
    bb54:	0189      	lsls	r1, r1, #6
    bb56:	f041 0102 	orr.w	r1, r1, #2
    bb5a:	f015 ffc6 	bl	21aea <log_0>
		return NULL;
    bb5e:	2400      	movs	r4, #0
}
    bb60:	4620      	mov	r0, r4
    bb62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_alloc_fixed(pool, timeout);
    bb66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    bb6a:	f01c faaf 	bl	280cc <net_buf_alloc_fixed>
	if (!buf) {
    bb6e:	4604      	mov	r4, r0
    bb70:	2800      	cmp	r0, #0
    bb72:	d0f5      	beq.n	bb60 <bt_mesh_adv_create_from_pool+0x34>
	adv = get_id(net_buf_id(buf));
    bb74:	f012 f840 	bl	1dbf8 <net_buf_id>
    bb78:	47a8      	blx	r5
    bb7a:	4605      	mov	r5, r0
	BT_MESH_ADV(buf) = adv;
    bb7c:	6160      	str	r0, [r4, #20]
	(void)memset(adv, 0, sizeof(*adv));
    bb7e:	220c      	movs	r2, #12
    bb80:	4641      	mov	r1, r8
    bb82:	f018 f91c 	bl	23dbe <memset>
	adv->type         = type;
    bb86:	7a2b      	ldrb	r3, [r5, #8]
	adv->xmit         = xmit;
    bb88:	726e      	strb	r6, [r5, #9]
	adv->type         = type;
    bb8a:	f367 0301 	bfi	r3, r7, #0, #2
    bb8e:	722b      	strb	r3, [r5, #8]
	return buf;
    bb90:	e7e6      	b.n	bb60 <bt_mesh_adv_create_from_pool+0x34>
    bb92:	bf00      	nop
    bb94:	200018d8 	.word	0x200018d8
    bb98:	00029870 	.word	0x00029870
    bb9c:	00029988 	.word	0x00029988
    bba0:	0002c77d 	.word	0x0002c77d

0000bba4 <bt_mesh_adv_create>:
{
    bba4:	b507      	push	{r0, r1, r2, lr}
	return bt_mesh_adv_create_from_pool(&adv_buf_pool, adv_alloc, type,
    bba6:	e9cd 2300 	strd	r2, r3, [sp]
    bbaa:	460b      	mov	r3, r1
    bbac:	4602      	mov	r2, r0
    bbae:	4903      	ldr	r1, [pc, #12]	; (bbbc <bt_mesh_adv_create+0x18>)
    bbb0:	4803      	ldr	r0, [pc, #12]	; (bbc0 <bt_mesh_adv_create+0x1c>)
    bbb2:	f7ff ffbb 	bl	bb2c <bt_mesh_adv_create_from_pool>
}
    bbb6:	b003      	add	sp, #12
    bbb8:	f85d fb04 	ldr.w	pc, [sp], #4
    bbbc:	0000ba55 	.word	0x0000ba55
    bbc0:	200011b0 	.word	0x200011b0

0000bbc4 <bt_mesh_adv_send>:
{
    bbc4:	b510      	push	{r4, lr}
	BT_MESH_ADV(buf)->cb = cb;
    bbc6:	6944      	ldr	r4, [r0, #20]
	BT_MESH_ADV(buf)->cb_data = cb_data;
    bbc8:	e9c4 1200 	strd	r1, r2, [r4]
	BT_MESH_ADV(buf)->busy = 1U;
    bbcc:	6942      	ldr	r2, [r0, #20]
    bbce:	7a13      	ldrb	r3, [r2, #8]
    bbd0:	f043 0308 	orr.w	r3, r3, #8
    bbd4:	7213      	strb	r3, [r2, #8]
	net_buf_put(&bt_mesh_adv_queue, net_buf_ref(buf));
    bbd6:	f01c fb05 	bl	281e4 <net_buf_ref>
    bbda:	4601      	mov	r1, r0
    bbdc:	4803      	ldr	r0, [pc, #12]	; (bbec <bt_mesh_adv_send+0x28>)
    bbde:	f01c faf4 	bl	281ca <net_buf_put>
}
    bbe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_mesh_adv_buf_ready();
    bbe6:	f01a bed4 	b.w	26992 <bt_mesh_adv_buf_ready>
    bbea:	bf00      	nop
    bbec:	20001140 	.word	0x20001140

0000bbf0 <bt_mesh_scan_enable>:

int bt_mesh_scan_enable(void)
{
    bbf0:	b510      	push	{r4, lr}
    bbf2:	b086      	sub	sp, #24
	struct bt_le_scan_param scan_param = {
    bbf4:	2214      	movs	r2, #20
    bbf6:	2100      	movs	r1, #0
    bbf8:	a801      	add	r0, sp, #4
    bbfa:	f018 f8e0 	bl	23dbe <memset>
    bbfe:	f04f 1330 	mov.w	r3, #3145776	; 0x300030
			.window     = MESH_SCAN_WINDOW };
	int err;

	BT_DBG("");

	err = bt_le_scan_start(&scan_param, bt_mesh_scan_cb);
    bc02:	490d      	ldr	r1, [pc, #52]	; (bc38 <bt_mesh_scan_enable+0x48>)
	struct bt_le_scan_param scan_param = {
    bc04:	9303      	str	r3, [sp, #12]
	err = bt_le_scan_start(&scan_param, bt_mesh_scan_cb);
    bc06:	a801      	add	r0, sp, #4
    bc08:	f7fb fe6e 	bl	78e8 <bt_le_scan_start>
	if (err && err != -EALREADY) {
    bc0c:	4604      	mov	r4, r0
    bc0e:	b168      	cbz	r0, bc2c <bt_mesh_scan_enable+0x3c>
    bc10:	f110 0f78 	cmn.w	r0, #120	; 0x78
    bc14:	d00d      	beq.n	bc32 <bt_mesh_scan_enable+0x42>
    bc16:	4a09      	ldr	r2, [pc, #36]	; (bc3c <bt_mesh_scan_enable+0x4c>)
    bc18:	4b09      	ldr	r3, [pc, #36]	; (bc40 <bt_mesh_scan_enable+0x50>)
    bc1a:	1ad2      	subs	r2, r2, r3
    bc1c:	08d2      	lsrs	r2, r2, #3
		BT_ERR("starting scan failed (err %d)", err);
    bc1e:	0192      	lsls	r2, r2, #6
    bc20:	4601      	mov	r1, r0
    bc22:	f042 0201 	orr.w	r2, r2, #1
    bc26:	4807      	ldr	r0, [pc, #28]	; (bc44 <bt_mesh_scan_enable+0x54>)
    bc28:	f015 ff6c 	bl	21b04 <log_1>
		return err;
	}

	return 0;
}
    bc2c:	4620      	mov	r0, r4
    bc2e:	b006      	add	sp, #24
    bc30:	bd10      	pop	{r4, pc}
	return 0;
    bc32:	2400      	movs	r4, #0
    bc34:	e7fa      	b.n	bc2c <bt_mesh_scan_enable+0x3c>
    bc36:	bf00      	nop
    bc38:	0000ba65 	.word	0x0000ba65
    bc3c:	00029988 	.word	0x00029988
    bc40:	00029870 	.word	0x00029870
    bc44:	0002c7a9 	.word	0x0002c7a9

0000bc48 <bt_mesh_scan_disable>:

int bt_mesh_scan_disable(void)
{
    bc48:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = bt_le_scan_stop();
    bc4a:	f7fb ff19 	bl	7a80 <bt_le_scan_stop>
	if (err && err != -EALREADY) {
    bc4e:	4604      	mov	r4, r0
    bc50:	b168      	cbz	r0, bc6e <bt_mesh_scan_disable+0x26>
    bc52:	f110 0f78 	cmn.w	r0, #120	; 0x78
    bc56:	d00c      	beq.n	bc72 <bt_mesh_scan_disable+0x2a>
    bc58:	4a07      	ldr	r2, [pc, #28]	; (bc78 <bt_mesh_scan_disable+0x30>)
    bc5a:	4b08      	ldr	r3, [pc, #32]	; (bc7c <bt_mesh_scan_disable+0x34>)
    bc5c:	1ad2      	subs	r2, r2, r3
    bc5e:	08d2      	lsrs	r2, r2, #3
		BT_ERR("stopping scan failed (err %d)", err);
    bc60:	0192      	lsls	r2, r2, #6
    bc62:	4601      	mov	r1, r0
    bc64:	f042 0201 	orr.w	r2, r2, #1
    bc68:	4805      	ldr	r0, [pc, #20]	; (bc80 <bt_mesh_scan_disable+0x38>)
    bc6a:	f015 ff4b 	bl	21b04 <log_1>
		return err;
	}

	return 0;
}
    bc6e:	4620      	mov	r0, r4
    bc70:	bd10      	pop	{r4, pc}
	return 0;
    bc72:	2400      	movs	r4, #0
    bc74:	e7fb      	b.n	bc6e <bt_mesh_scan_disable+0x26>
    bc76:	bf00      	nop
    bc78:	00029988 	.word	0x00029988
    bc7c:	00029870 	.word	0x00029870
    bc80:	0002c7c7 	.word	0x0002c7c7

0000bc84 <subnet_by_id>:

	return true;
}

static int subnet_by_id(struct bt_mesh_subnet *sub, void *cb_data)
{
    bc84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    bc88:	4c22      	ldr	r4, [pc, #136]	; (bd14 <subnet_by_id+0x90>)
    bc8a:	4b23      	ldr	r3, [pc, #140]	; (bd18 <subnet_by_id+0x94>)
		BT_WARN("Authentication Value %s != %s",
    bc8c:	f8df a08c 	ldr.w	sl, [pc, #140]	; bd1c <subnet_by_id+0x98>
    bc90:	1ae4      	subs	r4, r4, r3
    bc92:	08e4      	lsrs	r4, r4, #3
    bc94:	01a4      	lsls	r4, r4, #6
{
    bc96:	460d      	mov	r5, r1
	struct beacon_params *params = cb_data;

	for (int i = 0; i < ARRAY_SIZE(sub->keys); i++) {
    bc98:	f100 0676 	add.w	r6, r0, #118	; 0x76
    bc9c:	2700      	movs	r7, #0
		BT_WARN("Authentication Value %s != %s",
    bc9e:	f044 0402 	orr.w	r4, r4, #2
		if (sub->keys[i].valid && auth_match(&sub->keys[i], params)) {
    bca2:	f816 3c4a 	ldrb.w	r3, [r6, #-74]
    bca6:	b353      	cbz	r3, bcfe <subnet_by_id+0x7a>
	if (memcmp(params->net_id, keys->net_id, 8)) {
    bca8:	f1a6 0818 	sub.w	r8, r6, #24
    bcac:	6828      	ldr	r0, [r5, #0]
    bcae:	2208      	movs	r2, #8
    bcb0:	4641      	mov	r1, r8
    bcb2:	f018 f868 	bl	23d86 <memcmp>
    bcb6:	bb10      	cbnz	r0, bcfe <subnet_by_id+0x7a>
	bt_mesh_beacon_auth(keys->beacon, params->flags, keys->net_id,
    bcb8:	f10d 0908 	add.w	r9, sp, #8
    bcbc:	7b29      	ldrb	r1, [r5, #12]
    bcbe:	68ab      	ldr	r3, [r5, #8]
    bcc0:	f8cd 9000 	str.w	r9, [sp]
    bcc4:	4642      	mov	r2, r8
    bcc6:	4630      	mov	r0, r6
    bcc8:	f01a fb3f 	bl	2634a <bt_mesh_beacon_auth>
	if (memcmp(params->auth, net_auth, 8)) {
    bccc:	6868      	ldr	r0, [r5, #4]
    bcce:	2208      	movs	r2, #8
    bcd0:	4649      	mov	r1, r9
    bcd2:	f018 f858 	bl	23d86 <memcmp>
    bcd6:	b1c0      	cbz	r0, bd0a <subnet_by_id+0x86>
		BT_WARN("Authentication Value %s != %s",
    bcd8:	2108      	movs	r1, #8
    bcda:	6868      	ldr	r0, [r5, #4]
    bcdc:	f7f9 f848 	bl	4d70 <bt_hex_real>
    bce0:	f7f6 fefa 	bl	2ad8 <z_log_strdup>
    bce4:	2108      	movs	r1, #8
    bce6:	4680      	mov	r8, r0
    bce8:	4648      	mov	r0, r9
    bcea:	f7f9 f841 	bl	4d70 <bt_hex_real>
    bcee:	f7f6 fef3 	bl	2ad8 <z_log_strdup>
    bcf2:	4623      	mov	r3, r4
    bcf4:	4602      	mov	r2, r0
    bcf6:	4641      	mov	r1, r8
    bcf8:	4650      	mov	r0, sl
    bcfa:	f015 ff17 	bl	21b2c <log_2>
	for (int i = 0; i < ARRAY_SIZE(sub->keys); i++) {
    bcfe:	365a      	adds	r6, #90	; 0x5a
    bd00:	b10f      	cbz	r7, bd06 <subnet_by_id+0x82>
			params->new_key = (i > 0);
			return true;
		}
	}

	return false;
    bd02:	2000      	movs	r0, #0
    bd04:	e003      	b.n	bd0e <subnet_by_id+0x8a>
    bd06:	2701      	movs	r7, #1
    bd08:	e7cb      	b.n	bca2 <subnet_by_id+0x1e>
			params->new_key = (i > 0);
    bd0a:	736f      	strb	r7, [r5, #13]
			return true;
    bd0c:	2001      	movs	r0, #1
}
    bd0e:	b004      	add	sp, #16
    bd10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bd14:	000299a0 	.word	0x000299a0
    bd18:	00029870 	.word	0x00029870
    bd1c:	0002c7f5 	.word	0x0002c7f5

0000bd20 <beacon_send>:
{
    bd20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bd24:	b08a      	sub	sp, #40	; 0x28
	if (bt_mesh_is_provisioned()) {
    bd26:	f7ff fc41 	bl	b5ac <bt_mesh_is_provisioned>
    bd2a:	b318      	cbz	r0, bd74 <beacon_send+0x54>
		if (!bt_mesh_beacon_enabled() &&
    bd2c:	f7ff fd32 	bl	b794 <bt_mesh_beacon_enabled>
    bd30:	b1a8      	cbz	r0, bd5e <beacon_send+0x3e>
	first_half = !first_half;
    bd32:	4a57      	ldr	r2, [pc, #348]	; (be90 <beacon_send+0x170>)
    bd34:	7813      	ldrb	r3, [r2, #0]
    bd36:	f083 0301 	eor.w	r3, r3, #1
    bd3a:	7013      	strb	r3, [r2, #0]
	if (first_half) {
    bd3c:	b913      	cbnz	r3, bd44 <beacon_send+0x24>
	bt_mesh_subnet_foreach(sub_update_beacon_observation);
    bd3e:	4855      	ldr	r0, [pc, #340]	; (be94 <beacon_send+0x174>)
    bd40:	f001 fc0a 	bl	d558 <bt_mesh_subnet_foreach>
		(void)bt_mesh_subnet_find(secure_beacon_send, NULL);
    bd44:	4854      	ldr	r0, [pc, #336]	; (be98 <beacon_send+0x178>)
    bd46:	2100      	movs	r1, #0
    bd48:	f001 fbe2 	bl	d510 <bt_mesh_subnet_find>
		k_work_schedule(&beacon_timer, PROVISIONED_INTERVAL);
    bd4c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
		k_work_schedule(&beacon_timer, K_SECONDS(CONFIG_BT_MESH_UNPROV_BEACON_INT));
    bd50:	4852      	ldr	r0, [pc, #328]	; (be9c <beacon_send+0x17c>)
    bd52:	2300      	movs	r3, #0
}
    bd54:	b00a      	add	sp, #40	; 0x28
    bd56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_schedule(&beacon_timer, K_SECONDS(CONFIG_BT_MESH_UNPROV_BEACON_INT));
    bd5a:	f014 bb2f 	b.w	203bc <k_work_schedule>
    bd5e:	4b50      	ldr	r3, [pc, #320]	; (bea0 <beacon_send+0x180>)
    bd60:	f3bf 8f5b 	dmb	ish
    bd64:	681b      	ldr	r3, [r3, #0]
    bd66:	f3bf 8f5b 	dmb	ish
		if (!bt_mesh_beacon_enabled() &&
    bd6a:	071b      	lsls	r3, r3, #28
    bd6c:	d4e1      	bmi.n	bd32 <beacon_send+0x12>
}
    bd6e:	b00a      	add	sp, #40	; 0x28
    bd70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!bt_mesh_prov_active()) {
    bd74:	f007 fdda 	bl	1392c <bt_mesh_prov_active>
    bd78:	4604      	mov	r4, r0
    bd7a:	b9a8      	cbnz	r0, bda8 <beacon_send+0x88>
	uint8_t uri_hash[16] = { 0 };
    bd7c:	e9cd 0002 	strd	r0, r0, [sp, #8]
    bd80:	e9cd 0004 	strd	r0, r0, [sp, #16]
	buf = bt_mesh_adv_create(BT_MESH_ADV_BEACON, UNPROV_XMIT, K_NO_WAIT);
    bd84:	2200      	movs	r2, #0
    bd86:	2300      	movs	r3, #0
    bd88:	210a      	movs	r1, #10
    bd8a:	2002      	movs	r0, #2
    bd8c:	f7ff ff0a 	bl	bba4 <bt_mesh_adv_create>
	if (!buf) {
    bd90:	4606      	mov	r6, r0
    bd92:	b960      	cbnz	r0, bdae <beacon_send+0x8e>
    bd94:	4943      	ldr	r1, [pc, #268]	; (bea4 <beacon_send+0x184>)
    bd96:	4b44      	ldr	r3, [pc, #272]	; (bea8 <beacon_send+0x188>)
		BT_ERR("Unable to allocate beacon buffer");
    bd98:	4844      	ldr	r0, [pc, #272]	; (beac <beacon_send+0x18c>)
    bd9a:	1ac9      	subs	r1, r1, r3
    bd9c:	08c9      	lsrs	r1, r1, #3
    bd9e:	0189      	lsls	r1, r1, #6
    bda0:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to allocate URI buffer");
    bda4:	f015 fea1 	bl	21aea <log_0>
		k_work_schedule(&beacon_timer, K_SECONDS(CONFIG_BT_MESH_UNPROV_BEACON_INT));
    bda8:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    bdac:	e7d0      	b.n	bd50 <beacon_send+0x30>
	prov = bt_mesh_prov_get();
    bdae:	f007 fdb7 	bl	13920 <bt_mesh_prov_get>
	return net_buf_simple_add_u8(&buf->b, val);
    bdb2:	f106 0708 	add.w	r7, r6, #8
    bdb6:	4605      	mov	r5, r0
    bdb8:	4621      	mov	r1, r4
    bdba:	4638      	mov	r0, r7
    bdbc:	f01c fa53 	bl	28266 <net_buf_simple_add_u8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    bdc0:	6829      	ldr	r1, [r5, #0]
    bdc2:	2210      	movs	r2, #16
    bdc4:	4638      	mov	r0, r7
    bdc6:	f01c fa45 	bl	28254 <net_buf_simple_add_mem>
	if (prov->uri && bt_mesh_s1(prov->uri, uri_hash) == 0) {
    bdca:	f8d5 8004 	ldr.w	r8, [r5, #4]
    bdce:	f1b8 0f00 	cmp.w	r8, #0
    bdd2:	d036      	beq.n	be42 <beacon_send+0x122>

static inline bool bt_mesh_s1(const char *m, uint8_t salt[16])
{
	const uint8_t zero[16] = { 0 };

	return bt_mesh_aes_cmac_one(zero, m, strlen(m), salt);
    bdd4:	4640      	mov	r0, r8
	const uint8_t zero[16] = { 0 };
    bdd6:	e9cd 4406 	strd	r4, r4, [sp, #24]
    bdda:	e9cd 4408 	strd	r4, r4, [sp, #32]
	return bt_mesh_aes_cmac_one(zero, m, strlen(m), salt);
    bdde:	f017 ffa5 	bl	23d2c <strlen>
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
    bde2:	ab02      	add	r3, sp, #8
	struct bt_mesh_sg sg = { m, len };
    bde4:	e9cd 8000 	strd	r8, r0, [sp]
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
    bde8:	2201      	movs	r2, #1
    bdea:	4669      	mov	r1, sp
    bdec:	a806      	add	r0, sp, #24
    bdee:	f01a f946 	bl	2607e <bt_mesh_aes_cmac>
    bdf2:	bb30      	cbnz	r0, be42 <beacon_send+0x122>
		oob_info = prov->oob_info | BT_MESH_PROV_OOB_URI;
    bdf4:	8929      	ldrh	r1, [r5, #8]
    bdf6:	f041 0102 	orr.w	r1, r1, #2
	net_buf_simple_add_be16(&buf->b, val);
    bdfa:	4638      	mov	r0, r7
    bdfc:	f01c fa45 	bl	2828a <net_buf_simple_add_be16>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    be00:	2204      	movs	r2, #4
    be02:	a902      	add	r1, sp, #8
    be04:	4638      	mov	r0, r7
    be06:	f01c fa25 	bl	28254 <net_buf_simple_add_mem>
	bt_mesh_adv_send(buf, NULL, NULL);
    be0a:	2200      	movs	r2, #0
    be0c:	4611      	mov	r1, r2
    be0e:	4630      	mov	r0, r6
    be10:	f7ff fed8 	bl	bbc4 <bt_mesh_adv_send>
	net_buf_unref(buf);
    be14:	4630      	mov	r0, r6
    be16:	f011 ffa5 	bl	1dd64 <net_buf_unref>
	if (prov->uri) {
    be1a:	686b      	ldr	r3, [r5, #4]
    be1c:	2b00      	cmp	r3, #0
    be1e:	d0c3      	beq.n	bda8 <beacon_send+0x88>
		buf = bt_mesh_adv_create(BT_MESH_ADV_URI, UNPROV_XMIT,
    be20:	2200      	movs	r2, #0
    be22:	2300      	movs	r3, #0
    be24:	210a      	movs	r1, #10
    be26:	2003      	movs	r0, #3
    be28:	f7ff febc 	bl	bba4 <bt_mesh_adv_create>
		if (!buf) {
    be2c:	4604      	mov	r4, r0
    be2e:	b950      	cbnz	r0, be46 <beacon_send+0x126>
    be30:	491c      	ldr	r1, [pc, #112]	; (bea4 <beacon_send+0x184>)
    be32:	4b1d      	ldr	r3, [pc, #116]	; (bea8 <beacon_send+0x188>)
			BT_ERR("Unable to allocate URI buffer");
    be34:	481e      	ldr	r0, [pc, #120]	; (beb0 <beacon_send+0x190>)
    be36:	1ac9      	subs	r1, r1, r3
    be38:	08c9      	lsrs	r1, r1, #3
    be3a:	0189      	lsls	r1, r1, #6
    be3c:	f041 0101 	orr.w	r1, r1, #1
    be40:	e7b0      	b.n	bda4 <beacon_send+0x84>
		oob_info = prov->oob_info;
    be42:	8929      	ldrh	r1, [r5, #8]
    be44:	e7d9      	b.n	bdfa <beacon_send+0xda>
		len = strlen(prov->uri);
    be46:	6868      	ldr	r0, [r5, #4]
    be48:	f017 ff70 	bl	23d2c <strlen>
	return net_buf_simple_tailroom(&buf->b);
    be4c:	f104 0708 	add.w	r7, r4, #8
    be50:	4606      	mov	r6, r0
    be52:	4638      	mov	r0, r7
    be54:	f01c faad 	bl	283b2 <net_buf_simple_tailroom>
		if (net_buf_tailroom(buf) < len) {
    be58:	4286      	cmp	r6, r0
    be5a:	d90d      	bls.n	be78 <beacon_send+0x158>
    be5c:	4911      	ldr	r1, [pc, #68]	; (bea4 <beacon_send+0x184>)
    be5e:	4b12      	ldr	r3, [pc, #72]	; (bea8 <beacon_send+0x188>)
			BT_WARN("Too long URI to fit advertising data");
    be60:	4814      	ldr	r0, [pc, #80]	; (beb4 <beacon_send+0x194>)
    be62:	1ac9      	subs	r1, r1, r3
    be64:	08c9      	lsrs	r1, r1, #3
    be66:	0189      	lsls	r1, r1, #6
    be68:	f041 0102 	orr.w	r1, r1, #2
    be6c:	f015 fe3d 	bl	21aea <log_0>
		net_buf_unref(buf);
    be70:	4620      	mov	r0, r4
    be72:	f011 ff77 	bl	1dd64 <net_buf_unref>
    be76:	e797      	b.n	bda8 <beacon_send+0x88>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    be78:	6869      	ldr	r1, [r5, #4]
    be7a:	4632      	mov	r2, r6
    be7c:	4638      	mov	r0, r7
    be7e:	f01c f9e9 	bl	28254 <net_buf_simple_add_mem>
			bt_mesh_adv_send(buf, NULL, NULL);
    be82:	2200      	movs	r2, #0
    be84:	4611      	mov	r1, r2
    be86:	4620      	mov	r0, r4
    be88:	f7ff fe9c 	bl	bbc4 <bt_mesh_adv_send>
    be8c:	e7f0      	b.n	be70 <beacon_send+0x150>
    be8e:	bf00      	nop
    be90:	200038a7 	.word	0x200038a7
    be94:	00025937 	.word	0x00025937
    be98:	0000bf0d 	.word	0x0000bf0d
    be9c:	200018a0 	.word	0x200018a0
    bea0:	200018d8 	.word	0x200018d8
    bea4:	000299a0 	.word	0x000299a0
    bea8:	00029870 	.word	0x00029870
    beac:	0002c813 	.word	0x0002c813
    beb0:	0002c834 	.word	0x0002c834
    beb4:	0002c852 	.word	0x0002c852

0000beb8 <bt_mesh_beacon_create>:
{
    beb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    beba:	460c      	mov	r4, r1
    bebc:	4605      	mov	r5, r0
	uint8_t flags = bt_mesh_net_flags(sub);
    bebe:	f001 f9d7 	bl	d270 <bt_mesh_net_flags>
	net_buf_simple_add_u8(buf, BEACON_TYPE_SECURE);
    bec2:	2101      	movs	r1, #1
	uint8_t flags = bt_mesh_net_flags(sub);
    bec4:	4607      	mov	r7, r0
	net_buf_simple_add_u8(buf, BEACON_TYPE_SECURE);
    bec6:	4620      	mov	r0, r4
    bec8:	f01c f9cd 	bl	28266 <net_buf_simple_add_u8>
	keys = &sub->keys[SUBNET_KEY_TX_IDX(sub)];
    becc:	7fae      	ldrb	r6, [r5, #30]
    bece:	1eb3      	subs	r3, r6, #2
    bed0:	425e      	negs	r6, r3
	net_buf_simple_add_u8(buf, flags);
    bed2:	4639      	mov	r1, r7
    bed4:	4620      	mov	r0, r4
	keys = &sub->keys[SUBNET_KEY_TX_IDX(sub)];
    bed6:	415e      	adcs	r6, r3
	net_buf_simple_add_u8(buf, flags);
    bed8:	f01c f9c5 	bl	28266 <net_buf_simple_add_u8>
	net_buf_simple_add_mem(buf, keys->net_id, 8);
    bedc:	215a      	movs	r1, #90	; 0x5a
    bede:	fb01 5106 	mla	r1, r1, r6, r5
    bee2:	2208      	movs	r2, #8
    bee4:	315e      	adds	r1, #94	; 0x5e
    bee6:	4620      	mov	r0, r4
    bee8:	f01c f9b4 	bl	28254 <net_buf_simple_add_mem>
	net_buf_simple_add_be32(buf, bt_mesh.iv_index);
    beec:	4b06      	ldr	r3, [pc, #24]	; (bf08 <bt_mesh_beacon_create+0x50>)
    beee:	4620      	mov	r0, r4
    bef0:	6819      	ldr	r1, [r3, #0]
    bef2:	f01c f9e1 	bl	282b8 <net_buf_simple_add_be32>
	net_buf_simple_add_mem(buf, sub->auth, 8);
    bef6:	f105 0124 	add.w	r1, r5, #36	; 0x24
    befa:	4620      	mov	r0, r4
    befc:	2208      	movs	r2, #8
}
    befe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	net_buf_simple_add_mem(buf, sub->auth, 8);
    bf02:	f01c b9a7 	b.w	28254 <net_buf_simple_add_mem>
    bf06:	bf00      	nop
    bf08:	200018d0 	.word	0x200018d0

0000bf0c <secure_beacon_send>:
{
    bf0c:	b538      	push	{r3, r4, r5, lr}
    bf0e:	4604      	mov	r4, r0
	return z_impl_k_uptime_ticks();
    bf10:	f01d f910 	bl	29134 <z_impl_k_uptime_ticks>
			return (t * to_hz + off) / from_hz;
    bf14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    bf18:	fba0 3002 	umull	r3, r0, r0, r2
    bf1c:	fb02 0001 	mla	r0, r2, r1, r0
    bf20:	0bdb      	lsrs	r3, r3, #15
	time_diff = now - sub->beacon_sent;
    bf22:	6822      	ldr	r2, [r4, #0]
    bf24:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
    bf28:	1a9b      	subs	r3, r3, r2
	if (time_diff < (600 * MSEC_PER_SEC) &&
    bf2a:	4a18      	ldr	r2, [pc, #96]	; (bf8c <secure_beacon_send+0x80>)
    bf2c:	4293      	cmp	r3, r2
    bf2e:	d809      	bhi.n	bf44 <secure_beacon_send+0x38>
		time_diff < BEACON_THRESHOLD(sub)) {
    bf30:	7922      	ldrb	r2, [r4, #4]
    bf32:	f242 7110 	movw	r1, #10000	; 0x2710
    bf36:	fb02 1101 	mla	r1, r2, r1, r1
    bf3a:	f5a1 519c 	sub.w	r1, r1, #4992	; 0x1380
    bf3e:	3908      	subs	r1, #8
	if (time_diff < (600 * MSEC_PER_SEC) &&
    bf40:	4299      	cmp	r1, r3
    bf42:	d821      	bhi.n	bf88 <secure_beacon_send+0x7c>
	buf = bt_mesh_adv_create(BT_MESH_ADV_BEACON, PROV_XMIT, K_NO_WAIT);
    bf44:	2200      	movs	r2, #0
    bf46:	2300      	movs	r3, #0
    bf48:	2108      	movs	r1, #8
    bf4a:	2002      	movs	r0, #2
    bf4c:	f7ff fe2a 	bl	bba4 <bt_mesh_adv_create>
	if (!buf) {
    bf50:	4605      	mov	r5, r0
    bf52:	b960      	cbnz	r0, bf6e <secure_beacon_send+0x62>
    bf54:	4b0e      	ldr	r3, [pc, #56]	; (bf90 <secure_beacon_send+0x84>)
    bf56:	490f      	ldr	r1, [pc, #60]	; (bf94 <secure_beacon_send+0x88>)
		BT_ERR("Unable to allocate beacon buffer");
    bf58:	480f      	ldr	r0, [pc, #60]	; (bf98 <secure_beacon_send+0x8c>)
    bf5a:	1ac9      	subs	r1, r1, r3
    bf5c:	08c9      	lsrs	r1, r1, #3
    bf5e:	0189      	lsls	r1, r1, #6
    bf60:	f041 0101 	orr.w	r1, r1, #1
    bf64:	f015 fdc1 	bl	21aea <log_0>
		return -ENOMEM;
    bf68:	f06f 000b 	mvn.w	r0, #11
}
    bf6c:	bd38      	pop	{r3, r4, r5, pc}
	bt_mesh_beacon_create(sub, &buf->b);
    bf6e:	f100 0108 	add.w	r1, r0, #8
    bf72:	4620      	mov	r0, r4
    bf74:	f7ff ffa0 	bl	beb8 <bt_mesh_beacon_create>
	bt_mesh_adv_send(buf, &send_cb, sub);
    bf78:	4628      	mov	r0, r5
    bf7a:	4908      	ldr	r1, [pc, #32]	; (bf9c <secure_beacon_send+0x90>)
    bf7c:	4622      	mov	r2, r4
    bf7e:	f7ff fe21 	bl	bbc4 <bt_mesh_adv_send>
	net_buf_unref(buf);
    bf82:	4628      	mov	r0, r5
    bf84:	f011 feee 	bl	1dd64 <net_buf_unref>
		return 0;
    bf88:	2000      	movs	r0, #0
    bf8a:	e7ef      	b.n	bf6c <secure_beacon_send+0x60>
    bf8c:	000927bf 	.word	0x000927bf
    bf90:	00029870 	.word	0x00029870
    bf94:	000299a0 	.word	0x000299a0
    bf98:	0002c813 	.word	0x0002c813
    bf9c:	0002a1dc 	.word	0x0002a1dc

0000bfa0 <bt_mesh_beacon_update>:
		break;
	}
}

void bt_mesh_beacon_update(struct bt_mesh_subnet *sub)
{
    bfa0:	b523      	push	{r0, r1, r5, lr}
    bfa2:	4605      	mov	r5, r0
	uint8_t flags = bt_mesh_net_flags(sub);
    bfa4:	f001 f964 	bl	d270 <bt_mesh_net_flags>
	struct bt_mesh_subnet_keys *keys;
	int err;

	keys = &sub->keys[SUBNET_KEY_TX_IDX(sub)];
    bfa8:	7fab      	ldrb	r3, [r5, #30]
    bfaa:	1e9a      	subs	r2, r3, #2
    bfac:	4253      	negs	r3, r2
    bfae:	4153      	adcs	r3, r2
	uint8_t flags = bt_mesh_net_flags(sub);
    bfb0:	4601      	mov	r1, r0

	BT_DBG("NetIndex 0x%03x Using %s key", sub->net_idx,
	       SUBNET_KEY_TX_IDX(sub) ? "new" : "current");
	BT_DBG("flags 0x%02x, IVI 0x%08x", flags, bt_mesh.iv_index);

	err = bt_mesh_beacon_auth(keys->beacon, flags, keys->net_id,
    bfb2:	205a      	movs	r0, #90	; 0x5a
    bfb4:	4343      	muls	r3, r0
    bfb6:	f103 025e 	add.w	r2, r3, #94	; 0x5e
    bfba:	f103 0076 	add.w	r0, r3, #118	; 0x76
				   bt_mesh.iv_index, sub->auth);
    bfbe:	f105 0324 	add.w	r3, r5, #36	; 0x24
	err = bt_mesh_beacon_auth(keys->beacon, flags, keys->net_id,
    bfc2:	9300      	str	r3, [sp, #0]
    bfc4:	4b0b      	ldr	r3, [pc, #44]	; (bff4 <bt_mesh_beacon_update+0x54>)
    bfc6:	442a      	add	r2, r5
    bfc8:	681b      	ldr	r3, [r3, #0]
    bfca:	4428      	add	r0, r5
    bfcc:	f01a f9bd 	bl	2634a <bt_mesh_beacon_auth>
	if (err) {
    bfd0:	b168      	cbz	r0, bfee <bt_mesh_beacon_update+0x4e>
    bfd2:	4b09      	ldr	r3, [pc, #36]	; (bff8 <bt_mesh_beacon_update+0x58>)
    bfd4:	4a09      	ldr	r2, [pc, #36]	; (bffc <bt_mesh_beacon_update+0x5c>)
		BT_ERR("Failed updating net beacon for 0x%03x", sub->net_idx);
    bfd6:	8ba9      	ldrh	r1, [r5, #28]
    bfd8:	4809      	ldr	r0, [pc, #36]	; (c000 <bt_mesh_beacon_update+0x60>)
    bfda:	1ad2      	subs	r2, r2, r3
    bfdc:	08d2      	lsrs	r2, r2, #3
    bfde:	0192      	lsls	r2, r2, #6
    bfe0:	f042 0201 	orr.w	r2, r2, #1
	}
}
    bfe4:	b002      	add	sp, #8
    bfe6:	e8bd 4020 	ldmia.w	sp!, {r5, lr}
		BT_ERR("Failed updating net beacon for 0x%03x", sub->net_idx);
    bfea:	f015 bd8b 	b.w	21b04 <log_1>
}
    bfee:	b002      	add	sp, #8
    bff0:	bd20      	pop	{r5, pc}
    bff2:	bf00      	nop
    bff4:	200018d0 	.word	0x200018d0
    bff8:	00029870 	.word	0x00029870
    bffc:	000299a0 	.word	0x000299a0
    c000:	0002c877 	.word	0x0002c877

0000c004 <bt_mesh_beacon_init>:
	.evt_handler = subnet_evt,
};

void bt_mesh_beacon_init(void)
{
	k_work_init_delayable(&beacon_timer, beacon_send);
    c004:	4901      	ldr	r1, [pc, #4]	; (c00c <bt_mesh_beacon_init+0x8>)
    c006:	4802      	ldr	r0, [pc, #8]	; (c010 <bt_mesh_beacon_init+0xc>)
    c008:	f01c becb 	b.w	28da2 <k_work_init_delayable>
    c00c:	0000bd21 	.word	0x0000bd21
    c010:	200018a0 	.word	0x200018a0

0000c014 <bt_mesh_beacon_ivu_initiator>:
	if (val) {
    c014:	4b0d      	ldr	r3, [pc, #52]	; (c04c <bt_mesh_beacon_ivu_initiator+0x38>)
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c016:	f3bf 8f5b 	dmb	ish
    c01a:	b170      	cbz	r0, c03a <bt_mesh_beacon_ivu_initiator+0x26>
    c01c:	e853 2f00 	ldrex	r2, [r3]
    c020:	f042 0208 	orr.w	r2, r2, #8
    c024:	e843 2100 	strex	r1, r2, [r3]
    c028:	2900      	cmp	r1, #0
    c02a:	d1f7      	bne.n	c01c <bt_mesh_beacon_ivu_initiator+0x8>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c02c:	f3bf 8f5b 	dmb	ish
	 * An alternative solution would be to check whether beacons are enabled
	 * here, and cancel if not. As the cancel operation may fail, we would
	 * still have to implement an early exit mechanism, so we might as well
	 * just use this every time.
	 */
	k_work_schedule(&beacon_timer, K_NO_WAIT);
    c030:	4807      	ldr	r0, [pc, #28]	; (c050 <bt_mesh_beacon_ivu_initiator+0x3c>)
    c032:	2200      	movs	r2, #0
    c034:	2300      	movs	r3, #0
    c036:	f014 b9c1 	b.w	203bc <k_work_schedule>
    c03a:	e853 2f00 	ldrex	r2, [r3]
    c03e:	f022 0208 	bic.w	r2, r2, #8
    c042:	e843 2100 	strex	r1, r2, [r3]
    c046:	2900      	cmp	r1, #0
    c048:	d0f0      	beq.n	c02c <bt_mesh_beacon_ivu_initiator+0x18>
    c04a:	e7f6      	b.n	c03a <bt_mesh_beacon_ivu_initiator+0x26>
    c04c:	200018d8 	.word	0x200018d8
    c050:	200018a0 	.word	0x200018a0

0000c054 <bt_mesh_beacon_recv>:
{
    c054:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < 1) {
    c056:	8883      	ldrh	r3, [r0, #4]
{
    c058:	b085      	sub	sp, #20
    c05a:	4604      	mov	r4, r0
	if (buf->len < 1) {
    c05c:	b963      	cbnz	r3, c078 <bt_mesh_beacon_recv+0x24>
    c05e:	4b67      	ldr	r3, [pc, #412]	; (c1fc <bt_mesh_beacon_recv+0x1a8>)
    c060:	4967      	ldr	r1, [pc, #412]	; (c200 <bt_mesh_beacon_recv+0x1ac>)
		BT_ERR("Too short beacon");
    c062:	4868      	ldr	r0, [pc, #416]	; (c204 <bt_mesh_beacon_recv+0x1b0>)
    c064:	1ac9      	subs	r1, r1, r3
    c066:	08c9      	lsrs	r1, r1, #3
    c068:	0189      	lsls	r1, r1, #6
    c06a:	f041 0101 	orr.w	r1, r1, #1
}
    c06e:	b005      	add	sp, #20
    c070:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		BT_ERR("Too short beacon");
    c074:	f015 bd39 	b.w	21aea <log_0>
	type = net_buf_simple_pull_u8(buf);
    c078:	f01c f966 	bl	28348 <net_buf_simple_pull_u8>
	switch (type) {
    c07c:	4605      	mov	r5, r0
    c07e:	b158      	cbz	r0, c098 <bt_mesh_beacon_recv+0x44>
    c080:	2801      	cmp	r0, #1
    c082:	d036      	beq.n	c0f2 <bt_mesh_beacon_recv+0x9e>
    c084:	4a5e      	ldr	r2, [pc, #376]	; (c200 <bt_mesh_beacon_recv+0x1ac>)
    c086:	4b5d      	ldr	r3, [pc, #372]	; (c1fc <bt_mesh_beacon_recv+0x1a8>)
    c088:	1ad2      	subs	r2, r2, r3
    c08a:	08d2      	lsrs	r2, r2, #3
		BT_WARN("Unknown beacon type 0x%02x", type);
    c08c:	0192      	lsls	r2, r2, #6
    c08e:	4601      	mov	r1, r0
    c090:	f042 0202 	orr.w	r2, r2, #2
    c094:	485c      	ldr	r0, [pc, #368]	; (c208 <bt_mesh_beacon_recv+0x1b4>)
    c096:	e00c      	b.n	c0b2 <bt_mesh_beacon_recv+0x5e>
	if (buf->len != 18 && buf->len != 22) {
    c098:	88a1      	ldrh	r1, [r4, #4]
    c09a:	f021 0304 	bic.w	r3, r1, #4
    c09e:	2b12      	cmp	r3, #18
    c0a0:	d00c      	beq.n	c0bc <bt_mesh_beacon_recv+0x68>
    c0a2:	4a57      	ldr	r2, [pc, #348]	; (c200 <bt_mesh_beacon_recv+0x1ac>)
    c0a4:	4b55      	ldr	r3, [pc, #340]	; (c1fc <bt_mesh_beacon_recv+0x1a8>)
		BT_ERR("Invalid unprovisioned beacon length (%u)", buf->len);
    c0a6:	4859      	ldr	r0, [pc, #356]	; (c20c <bt_mesh_beacon_recv+0x1b8>)
    c0a8:	1ad2      	subs	r2, r2, r3
    c0aa:	08d2      	lsrs	r2, r2, #3
    c0ac:	0192      	lsls	r2, r2, #6
    c0ae:	f042 0201 	orr.w	r2, r2, #1
}
    c0b2:	b005      	add	sp, #20
    c0b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		BT_WARN("Unknown beacon type 0x%02x", type);
    c0b8:	f015 bd24 	b.w	21b04 <log_1>
	uuid = net_buf_simple_pull_mem(buf, 16);
    c0bc:	2110      	movs	r1, #16
    c0be:	4620      	mov	r0, r4
    c0c0:	f01c f93a 	bl	28338 <net_buf_simple_pull_mem>
    c0c4:	4606      	mov	r6, r0
	oob_info = net_buf_simple_pull_be16(buf);
    c0c6:	4620      	mov	r0, r4
    c0c8:	f01c f94e 	bl	28368 <net_buf_simple_pull_be16>
	if (buf->len == 4) {
    c0cc:	88a3      	ldrh	r3, [r4, #4]
    c0ce:	2b04      	cmp	r3, #4
	oob_info = net_buf_simple_pull_be16(buf);
    c0d0:	4607      	mov	r7, r0
	if (buf->len == 4) {
    c0d2:	d104      	bne.n	c0de <bt_mesh_beacon_recv+0x8a>
		uri_hash_val = net_buf_simple_pull_be32(buf);
    c0d4:	4620      	mov	r0, r4
    c0d6:	f01c f95f 	bl	28398 <net_buf_simple_pull_be32>
		uri_hash = &uri_hash_val;
    c0da:	466d      	mov	r5, sp
		uri_hash_val = net_buf_simple_pull_be32(buf);
    c0dc:	9000      	str	r0, [sp, #0]
	prov = bt_mesh_prov_get();
    c0de:	f007 fc1f 	bl	13920 <bt_mesh_prov_get>
	if (prov->unprovisioned_beacon) {
    c0e2:	6b43      	ldr	r3, [r0, #52]	; 0x34
    c0e4:	b11b      	cbz	r3, c0ee <bt_mesh_beacon_recv+0x9a>
		prov->unprovisioned_beacon(uuid,
    c0e6:	462a      	mov	r2, r5
    c0e8:	4639      	mov	r1, r7
    c0ea:	4630      	mov	r0, r6
    c0ec:	4798      	blx	r3
}
    c0ee:	b005      	add	sp, #20
    c0f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (buf->len < 21) {
    c0f2:	88a1      	ldrh	r1, [r4, #4]
    c0f4:	2914      	cmp	r1, #20
    c0f6:	d808      	bhi.n	c10a <bt_mesh_beacon_recv+0xb6>
    c0f8:	4a41      	ldr	r2, [pc, #260]	; (c200 <bt_mesh_beacon_recv+0x1ac>)
    c0fa:	4b40      	ldr	r3, [pc, #256]	; (c1fc <bt_mesh_beacon_recv+0x1a8>)
		BT_ERR("Too short secure beacon (len %u)", buf->len);
    c0fc:	4844      	ldr	r0, [pc, #272]	; (c210 <bt_mesh_beacon_recv+0x1bc>)
    c0fe:	1ad2      	subs	r2, r2, r3
    c100:	08d2      	lsrs	r2, r2, #3
    c102:	0192      	lsls	r2, r2, #6
    c104:	f042 0201 	orr.w	r2, r2, #1
    c108:	e7d3      	b.n	c0b2 <bt_mesh_beacon_recv+0x5e>
	sub = bt_mesh_subnet_find(cache_check, buf->data);
    c10a:	6821      	ldr	r1, [r4, #0]
    c10c:	4841      	ldr	r0, [pc, #260]	; (c214 <bt_mesh_beacon_recv+0x1c0>)
    c10e:	f001 f9ff 	bl	d510 <bt_mesh_subnet_find>
	if (sub) {
    c112:	4605      	mov	r5, r0
    c114:	2800      	cmp	r0, #0
    c116:	d146      	bne.n	c1a6 <bt_mesh_beacon_recv+0x152>
	params.flags = net_buf_simple_pull_u8(buf);
    c118:	4620      	mov	r0, r4
	data = buf->data;
    c11a:	6826      	ldr	r6, [r4, #0]
	params.flags = net_buf_simple_pull_u8(buf);
    c11c:	f01c f914 	bl	28348 <net_buf_simple_pull_u8>
	params.net_id = net_buf_simple_pull_mem(buf, 8);
    c120:	2108      	movs	r1, #8
	params.flags = net_buf_simple_pull_u8(buf);
    c122:	f88d 000c 	strb.w	r0, [sp, #12]
	params.net_id = net_buf_simple_pull_mem(buf, 8);
    c126:	4620      	mov	r0, r4
    c128:	f01c f906 	bl	28338 <net_buf_simple_pull_mem>
    c12c:	9000      	str	r0, [sp, #0]
	params.iv_index = net_buf_simple_pull_be32(buf);
    c12e:	4620      	mov	r0, r4
    c130:	f01c f932 	bl	28398 <net_buf_simple_pull_be32>
	params.auth = buf->data;
    c134:	6823      	ldr	r3, [r4, #0]
	params.iv_index = net_buf_simple_pull_be32(buf);
    c136:	9002      	str	r0, [sp, #8]
	sub = bt_mesh_subnet_find(subnet_by_id, &params);
    c138:	4669      	mov	r1, sp
    c13a:	4837      	ldr	r0, [pc, #220]	; (c218 <bt_mesh_beacon_recv+0x1c4>)
	params.auth = buf->data;
    c13c:	9301      	str	r3, [sp, #4]
	sub = bt_mesh_subnet_find(subnet_by_id, &params);
    c13e:	f001 f9e7 	bl	d510 <bt_mesh_subnet_find>
	if (!sub) {
    c142:	4605      	mov	r5, r0
    c144:	2800      	cmp	r0, #0
    c146:	d0d2      	beq.n	c0ee <bt_mesh_beacon_recv+0x9a>
	if (sub->kr_phase == BT_MESH_KR_PHASE_2 && !params.new_key) {
    c148:	7f83      	ldrb	r3, [r0, #30]
    c14a:	2b02      	cmp	r3, #2
    c14c:	d10d      	bne.n	c16a <bt_mesh_beacon_recv+0x116>
    c14e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    c152:	b953      	cbnz	r3, c16a <bt_mesh_beacon_recv+0x116>
    c154:	4b29      	ldr	r3, [pc, #164]	; (c1fc <bt_mesh_beacon_recv+0x1a8>)
    c156:	492a      	ldr	r1, [pc, #168]	; (c200 <bt_mesh_beacon_recv+0x1ac>)
		BT_WARN("Ignoring Phase 2 KR Update secured using old key");
    c158:	4830      	ldr	r0, [pc, #192]	; (c21c <bt_mesh_beacon_recv+0x1c8>)
    c15a:	1ac9      	subs	r1, r1, r3
    c15c:	08c9      	lsrs	r1, r1, #3
    c15e:	0189      	lsls	r1, r1, #6
    c160:	f041 0102 	orr.w	r1, r1, #2
    c164:	f015 fcc1 	bl	21aea <log_0>
		return;
    c168:	e7c1      	b.n	c0ee <bt_mesh_beacon_recv+0x9a>
	memcpy(sub->beacon_cache, data, 21);
    c16a:	2215      	movs	r2, #21
    c16c:	4631      	mov	r1, r6
    c16e:	1da8      	adds	r0, r5, #6
    c170:	f017 fe1a 	bl	23da8 <memcpy>
	bt_mesh_kr_update(sub, BT_MESH_KEY_REFRESH(params.flags),
    c174:	f89d 100c 	ldrb.w	r1, [sp, #12]
    c178:	f89d 200d 	ldrb.w	r2, [sp, #13]
    c17c:	4628      	mov	r0, r5
    c17e:	f001 0101 	and.w	r1, r1, #1
    c182:	f019 fc51 	bl	25a28 <bt_mesh_kr_update>
	if (bt_mesh_subnet_get(BT_MESH_KEY_PRIMARY) &&
    c186:	2000      	movs	r0, #0
    c188:	f001 f8a6 	bl	d2d8 <bt_mesh_subnet_get>
    c18c:	b1a8      	cbz	r0, c1ba <bt_mesh_beacon_recv+0x166>
    c18e:	8bab      	ldrh	r3, [r5, #28]
    c190:	b19b      	cbz	r3, c1ba <bt_mesh_beacon_recv+0x166>
    c192:	491b      	ldr	r1, [pc, #108]	; (c200 <bt_mesh_beacon_recv+0x1ac>)
    c194:	4b19      	ldr	r3, [pc, #100]	; (c1fc <bt_mesh_beacon_recv+0x1a8>)
		BT_WARN("Ignoring secure beacon on non-primary subnet");
    c196:	4822      	ldr	r0, [pc, #136]	; (c220 <bt_mesh_beacon_recv+0x1cc>)
    c198:	1ac9      	subs	r1, r1, r3
    c19a:	08c9      	lsrs	r1, r1, #3
    c19c:	0189      	lsls	r1, r1, #6
    c19e:	f041 0102 	orr.w	r1, r1, #2
    c1a2:	f015 fca2 	bl	21aea <log_0>
	if (bt_mesh_beacon_enabled() &&
    c1a6:	f7ff faf5 	bl	b794 <bt_mesh_beacon_enabled>
    c1aa:	2800      	cmp	r0, #0
    c1ac:	d09f      	beq.n	c0ee <bt_mesh_beacon_recv+0x9a>
	    sub->beacons_cur < 0xff) {
    c1ae:	796b      	ldrb	r3, [r5, #5]
	if (bt_mesh_beacon_enabled() &&
    c1b0:	2bff      	cmp	r3, #255	; 0xff
    c1b2:	d09c      	beq.n	c0ee <bt_mesh_beacon_recv+0x9a>
		sub->beacons_cur++;
    c1b4:	3301      	adds	r3, #1
    c1b6:	716b      	strb	r3, [r5, #5]
    c1b8:	e799      	b.n	c0ee <bt_mesh_beacon_recv+0x9a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c1ba:	4b1a      	ldr	r3, [pc, #104]	; (c224 <bt_mesh_beacon_recv+0x1d0>)
    c1bc:	f3bf 8f5b 	dmb	ish
    c1c0:	681a      	ldr	r2, [r3, #0]
    c1c2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR) &&
    c1c6:	0712      	lsls	r2, r2, #28
    c1c8:	d50f      	bpl.n	c1ea <bt_mesh_beacon_recv+0x196>
    c1ca:	f3bf 8f5b 	dmb	ish
    c1ce:	681a      	ldr	r2, [r3, #0]
    c1d0:	f3bf 8f5b 	dmb	ish
	     BT_MESH_IV_UPDATE(params.flags))) {
    c1d4:	f89d 300c 	ldrb.w	r3, [sp, #12]
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR) &&
    c1d8:	f3c2 0280 	ubfx	r2, r2, #2, #1
	     BT_MESH_IV_UPDATE(params.flags))) {
    c1dc:	f3c3 0340 	ubfx	r3, r3, #1, #1
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR) &&
    c1e0:	429a      	cmp	r2, r3
    c1e2:	d102      	bne.n	c1ea <bt_mesh_beacon_recv+0x196>
		bt_mesh_beacon_ivu_initiator(false);
    c1e4:	2000      	movs	r0, #0
    c1e6:	f7ff ff15 	bl	c014 <bt_mesh_beacon_ivu_initiator>
	bt_mesh_net_iv_update(params.iv_index, BT_MESH_IV_UPDATE(params.flags));
    c1ea:	f89d 100c 	ldrb.w	r1, [sp, #12]
    c1ee:	9802      	ldr	r0, [sp, #8]
    c1f0:	f3c1 0140 	ubfx	r1, r1, #1, #1
    c1f4:	f000 fa24 	bl	c640 <bt_mesh_net_iv_update>
    c1f8:	e7d5      	b.n	c1a6 <bt_mesh_beacon_recv+0x152>
    c1fa:	bf00      	nop
    c1fc:	00029870 	.word	0x00029870
    c200:	000299a0 	.word	0x000299a0
    c204:	0002c89d 	.word	0x0002c89d
    c208:	0002c956 	.word	0x0002c956
    c20c:	0002c8ae 	.word	0x0002c8ae
    c210:	0002c8d7 	.word	0x0002c8d7
    c214:	00025941 	.word	0x00025941
    c218:	0000bc85 	.word	0x0000bc85
    c21c:	0002c8f8 	.word	0x0002c8f8
    c220:	0002c929 	.word	0x0002c929
    c224:	200018d8 	.word	0x200018d8

0000c228 <bt_mesh_beacon_enable>:

	bt_mesh_beacon_update(sub);
}

void bt_mesh_beacon_enable(void)
{
    c228:	b510      	push	{r4, lr}
	if (bt_mesh_is_provisioned()) {
    c22a:	f7ff f9bf 	bl	b5ac <bt_mesh_is_provisioned>
    c22e:	b110      	cbz	r0, c236 <bt_mesh_beacon_enable+0xe>
		bt_mesh_subnet_foreach(subnet_beacon_enable);
    c230:	4804      	ldr	r0, [pc, #16]	; (c244 <bt_mesh_beacon_enable+0x1c>)
    c232:	f001 f991 	bl	d558 <bt_mesh_subnet_foreach>
	}

	k_work_reschedule(&beacon_timer, K_NO_WAIT);
}
    c236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_reschedule(&beacon_timer, K_NO_WAIT);
    c23a:	4803      	ldr	r0, [pc, #12]	; (c248 <bt_mesh_beacon_enable+0x20>)
    c23c:	2200      	movs	r2, #0
    c23e:	2300      	movs	r3, #0
    c240:	f014 b8f0 	b.w	20424 <k_work_reschedule>
    c244:	0002597b 	.word	0x0002597b
    c248:	200018a0 	.word	0x200018a0

0000c24c <bt_mesh_beacon_disable>:
    c24c:	4b05      	ldr	r3, [pc, #20]	; (c264 <bt_mesh_beacon_disable+0x18>)
    c24e:	f3bf 8f5b 	dmb	ish
    c252:	681b      	ldr	r3, [r3, #0]
    c254:	f3bf 8f5b 	dmb	ish

void bt_mesh_beacon_disable(void)
{
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR)) {
    c258:	071b      	lsls	r3, r3, #28
    c25a:	d402      	bmi.n	c262 <bt_mesh_beacon_disable+0x16>
		/* If this fails, we'll do an early exit in the work handler. */
		(void)k_work_cancel_delayable(&beacon_timer);
    c25c:	4802      	ldr	r0, [pc, #8]	; (c268 <bt_mesh_beacon_disable+0x1c>)
    c25e:	f01c bdc0 	b.w	28de2 <k_work_cancel_delayable>
	}
}
    c262:	4770      	bx	lr
    c264:	200018d8 	.word	0x200018d8
    c268:	200018a0 	.word	0x200018a0

0000c26c <net_decrypt>:
}

static bool net_decrypt(struct bt_mesh_net_rx *rx, struct net_buf_simple *in,
			struct net_buf_simple *out,
			const struct bt_mesh_net_cred *cred)
{
    c26c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c270:	461e      	mov	r6, r3
	bool proxy = (rx->net_if == BT_MESH_NET_IF_PROXY_CFG);

	if (NID(in->data) != cred->nid) {
    c272:	680b      	ldr	r3, [r1, #0]
{
    c274:	4614      	mov	r4, r2
	if (NID(in->data) != cred->nid) {
    c276:	781a      	ldrb	r2, [r3, #0]
{
    c278:	4605      	mov	r5, r0
	if (NID(in->data) != cred->nid) {
    c27a:	7830      	ldrb	r0, [r6, #0]
    c27c:	f002 037f 	and.w	r3, r2, #127	; 0x7f
    c280:	4298      	cmp	r0, r3
    c282:	d002      	beq.n	c28a <net_decrypt+0x1e>
		return false;
    c284:	2000      	movs	r0, #0

	BT_DBG("src 0x%04x", rx->ctx.addr);

	return bt_mesh_net_decrypt(cred->enc, out, BT_MESH_NET_IVI_RX(rx),
				   proxy) == 0;
}
    c286:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	rx->old_iv = (IVI(in->data) != (bt_mesh.iv_index & 0x01));
    c28a:	f8df 80c8 	ldr.w	r8, [pc, #200]	; c354 <net_decrypt+0xe8>
	bool proxy = (rx->net_if == BT_MESH_NET_IF_PROXY_CFG);
    c28e:	7d2f      	ldrb	r7, [r5, #20]
	rx->old_iv = (IVI(in->data) != (bt_mesh.iv_index & 0x01));
    c290:	f8d8 3000 	ldr.w	r3, [r8]
    c294:	f003 0301 	and.w	r3, r3, #1
    c298:	ea83 13d2 	eor.w	r3, r3, r2, lsr #7
    c29c:	463a      	mov	r2, r7
    c29e:	f363 0200 	bfi	r2, r3, #0, #1
	buf->len  = 0U;
    c2a2:	2300      	movs	r3, #0
    c2a4:	752a      	strb	r2, [r5, #20]
    c2a6:	80a3      	strh	r3, [r4, #4]
	buf->data = buf->__buf;
    c2a8:	68a3      	ldr	r3, [r4, #8]
    c2aa:	6023      	str	r3, [r4, #0]
	net_buf_simple_add_mem(out, in->data, in->len);
    c2ac:	888a      	ldrh	r2, [r1, #4]
    c2ae:	6809      	ldr	r1, [r1, #0]
    c2b0:	4620      	mov	r0, r4
    c2b2:	f01b ffcf 	bl	28254 <net_buf_simple_add_mem>
	if (bt_mesh_net_obfuscate(out->data, BT_MESH_NET_IVI_RX(rx),
    c2b6:	7d2b      	ldrb	r3, [r5, #20]
    c2b8:	f8d8 1000 	ldr.w	r1, [r8]
    c2bc:	6820      	ldr	r0, [r4, #0]
    c2be:	f003 0301 	and.w	r3, r3, #1
    c2c2:	f106 0211 	add.w	r2, r6, #17
    c2c6:	1ac9      	subs	r1, r1, r3
    c2c8:	f003 fcca 	bl	fc60 <bt_mesh_net_obfuscate>
    c2cc:	2800      	cmp	r0, #0
    c2ce:	d1d9      	bne.n	c284 <net_decrypt+0x18>
	return ((uint16_t)src[0] << 8) | src[1];
    c2d0:	6823      	ldr	r3, [r4, #0]
    c2d2:	f8b3 2005 	ldrh.w	r2, [r3, #5]
    c2d6:	ba52      	rev16	r2, r2
    c2d8:	b290      	uxth	r0, r2
	rx->ctx.addr = SRC(out->data);
    c2da:	812a      	strh	r2, [r5, #8]
	if (!BT_MESH_ADDR_IS_UNICAST(rx->ctx.addr)) {
    c2dc:	b212      	sxth	r2, r2
    c2de:	2a00      	cmp	r2, #0
    c2e0:	ddd0      	ble.n	c284 <net_decrypt+0x18>
	if (bt_mesh_has_addr(rx->ctx.addr)) {
    c2e2:	f004 f991 	bl	10608 <bt_mesh_has_addr>
    c2e6:	2800      	cmp	r0, #0
    c2e8:	d1cc      	bne.n	c284 <net_decrypt+0x18>
	if (rx->net_if == BT_MESH_NET_IF_ADV && msg_cache_match(out)) {
    c2ea:	7d2d      	ldrb	r5, [r5, #20]
    c2ec:	f015 0130 	ands.w	r1, r5, #48	; 0x30
    c2f0:	d11d      	bne.n	c32e <net_decrypt+0xc2>
		if (msg_cache[i].src == SRC(pdu->data) &&
    c2f2:	6823      	ldr	r3, [r4, #0]
    c2f4:	f8df b060 	ldr.w	fp, [pc, #96]	; c358 <net_decrypt+0xec>
    c2f8:	f8b3 9005 	ldrh.w	r9, [r3, #5]
    c2fc:	fa99 f999 	rev16.w	r9, r9
    c300:	fa1f f989 	uxth.w	r9, r9
		    msg_cache[i].seq == (SEQ(pdu->data) & BIT_MASK(17))) {
    c304:	f103 0a02 	add.w	sl, r3, #2
		if (msg_cache[i].src == SRC(pdu->data) &&
    c308:	f83b 3021 	ldrh.w	r3, [fp, r1, lsl #2]
    c30c:	f3c3 030e 	ubfx	r3, r3, #0, #15
    c310:	454b      	cmp	r3, r9
    c312:	d109      	bne.n	c328 <net_decrypt+0xbc>
		    msg_cache[i].seq == (SEQ(pdu->data) & BIT_MASK(17))) {
    c314:	4650      	mov	r0, sl
    c316:	f019 fb34 	bl	25982 <sys_get_be24>
    c31a:	f85b 3021 	ldr.w	r3, [fp, r1, lsl #2]
    c31e:	f3c0 0010 	ubfx	r0, r0, #0, #17
		if (msg_cache[i].src == SRC(pdu->data) &&
    c322:	ebb0 3fd3 	cmp.w	r0, r3, lsr #15
    c326:	d0ad      	beq.n	c284 <net_decrypt+0x18>
	for (i = 0U; i < ARRAY_SIZE(msg_cache); i++) {
    c328:	3101      	adds	r1, #1
    c32a:	290a      	cmp	r1, #10
    c32c:	d1ec      	bne.n	c308 <net_decrypt+0x9c>
	bool proxy = (rx->net_if == BT_MESH_NET_IF_PROXY_CFG);
    c32e:	f007 0330 	and.w	r3, r7, #48	; 0x30
	return bt_mesh_net_decrypt(cred->enc, out, BT_MESH_NET_IVI_RX(rx),
    c332:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    c336:	f8d8 2000 	ldr.w	r2, [r8]
    c33a:	424b      	negs	r3, r1
    c33c:	f005 0501 	and.w	r5, r5, #1
    c340:	414b      	adcs	r3, r1
    c342:	1b52      	subs	r2, r2, r5
    c344:	4621      	mov	r1, r4
    c346:	1c70      	adds	r0, r6, #1
    c348:	f019 ff3f 	bl	261ca <bt_mesh_net_decrypt>
				   proxy) == 0;
    c34c:	fab0 f080 	clz	r0, r0
    c350:	0940      	lsrs	r0, r0, #5
    c352:	e798      	b.n	c286 <net_decrypt+0x1a>
    c354:	200018d0 	.word	0x200018d0
    c358:	20002308 	.word	0x20002308

0000c35c <bt_mesh_net_local>:
{
    c35c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	while ((buf = net_buf_slist_get(&bt_mesh.local_queue))) {
    c360:	4c2e      	ldr	r4, [pc, #184]	; (c41c <bt_mesh_net_local+0xc0>)
{
    c362:	b086      	sub	sp, #24
	while ((buf = net_buf_slist_get(&bt_mesh.local_queue))) {
    c364:	f104 051c 	add.w	r5, r4, #28
    c368:	4628      	mov	r0, r5
    c36a:	f01b fef5 	bl	28158 <net_buf_slist_get>
    c36e:	4606      	mov	r6, r0
    c370:	b910      	cbnz	r0, c378 <bt_mesh_net_local+0x1c>
}
    c372:	b006      	add	sp, #24
    c374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct bt_mesh_subnet *sub = LOOPBACK_BUF_SUB(buf);
    c378:	f8d6 8014 	ldr.w	r8, [r6, #20]
		struct bt_mesh_net_rx rx = {
    c37c:	2210      	movs	r2, #16
				.addr = SRC(buf->data),
    c37e:	4637      	mov	r7, r6
		struct bt_mesh_net_rx rx = {
    c380:	2100      	movs	r1, #0
    c382:	a802      	add	r0, sp, #8
    c384:	f017 fd1b 	bl	23dbe <memset>
    c388:	f8b8 301c 	ldrh.w	r3, [r8, #28]
				.addr = SRC(buf->data),
    c38c:	f857 1f08 	ldr.w	r1, [r7, #8]!
		struct bt_mesh_net_rx rx = {
    c390:	f8ad 3004 	strh.w	r3, [sp, #4]
    c394:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c398:	f8ad 3006 	strh.w	r3, [sp, #6]
    c39c:	f8b1 3005 	ldrh.w	r3, [r1, #5]
    c3a0:	f8cd 8000 	str.w	r8, [sp]
    c3a4:	ba5b      	rev16	r3, r3
    c3a6:	f8ad 3008 	strh.w	r3, [sp, #8]
    c3aa:	f8b1 3007 	ldrh.w	r3, [r1, #7]
    c3ae:	ba5b      	rev16	r3, r3
    c3b0:	f8ad 300a 	strh.w	r3, [sp, #10]
				.recv_ttl = TTL(buf->data),
    c3b4:	784b      	ldrb	r3, [r1, #1]
    c3b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		struct bt_mesh_net_rx rx = {
    c3ba:	f88d 300d 	strb.w	r3, [sp, #13]
			.seq = SEQ(buf->data),
    c3be:	1c88      	adds	r0, r1, #2
		struct bt_mesh_net_rx rx = {
    c3c0:	2301      	movs	r3, #1
    c3c2:	f88d 300f 	strb.w	r3, [sp, #15]
			.seq = SEQ(buf->data),
    c3c6:	f019 fadc 	bl	25982 <sys_get_be24>
			.old_iv = (IVI(buf->data) != (bt_mesh.iv_index & 0x01)),
    c3ca:	6823      	ldr	r3, [r4, #0]
		struct bt_mesh_net_rx rx = {
    c3cc:	9004      	str	r0, [sp, #16]
			.old_iv = (IVI(buf->data) != (bt_mesh.iv_index & 0x01)),
    c3ce:	780a      	ldrb	r2, [r1, #0]
    c3d0:	f003 0301 	and.w	r3, r3, #1
		struct bt_mesh_net_rx rx = {
    c3d4:	ea83 13d2 	eor.w	r3, r3, r2, lsr #7
			.new_key = SUBNET_KEY_TX_IDX(sub),
    c3d8:	f898 201e 	ldrb.w	r2, [r8, #30]
    c3dc:	1e90      	subs	r0, r2, #2
    c3de:	4242      	negs	r2, r0
    c3e0:	4142      	adcs	r2, r0
		struct bt_mesh_net_rx rx = {
    c3e2:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
    c3e6:	f89d 2014 	ldrb.w	r2, [sp, #20]
    c3ea:	f022 0203 	bic.w	r2, r2, #3
    c3ee:	4313      	orrs	r3, r2
    c3f0:	f88d 3014 	strb.w	r3, [sp, #20]
			.ctl = CTL(buf->data),
    c3f4:	784b      	ldrb	r3, [r1, #1]
		struct bt_mesh_net_rx rx = {
    c3f6:	f89d 2014 	ldrb.w	r2, [sp, #20]
			.ctl = CTL(buf->data),
    c3fa:	09db      	lsrs	r3, r3, #7
		struct bt_mesh_net_rx rx = {
    c3fc:	00db      	lsls	r3, r3, #3
    c3fe:	f022 0278 	bic.w	r2, r2, #120	; 0x78
    c402:	f043 0350 	orr.w	r3, r3, #80	; 0x50
    c406:	4313      	orrs	r3, r2
		(void) bt_mesh_trans_recv(&buf->b, &rx);
    c408:	4669      	mov	r1, sp
    c40a:	4638      	mov	r0, r7
		struct bt_mesh_net_rx rx = {
    c40c:	f88d 3014 	strb.w	r3, [sp, #20]
		(void) bt_mesh_trans_recv(&buf->b, &rx);
    c410:	f002 fb1c 	bl	ea4c <bt_mesh_trans_recv>
		net_buf_unref(buf);
    c414:	4630      	mov	r0, r6
    c416:	f011 fca5 	bl	1dd64 <net_buf_unref>
    c41a:	e7a5      	b.n	c368 <bt_mesh_net_local+0xc>
    c41c:	200018d0 	.word	0x200018d0

0000c420 <seq_set>:

BT_MESH_SETTINGS_DEFINE(iv, "IV", iv_set);

static int seq_set(const char *name, size_t len_rd, settings_read_cb read_cb,
		   void *cb_arg)
{
    c420:	b513      	push	{r0, r1, r4, lr}
    c422:	460c      	mov	r4, r1
    c424:	4610      	mov	r0, r2
    c426:	4619      	mov	r1, r3
	struct seq_val seq;
	int err;

	if (len_rd == 0) {
    c428:	b924      	cbnz	r4, c434 <seq_set+0x14>
		BT_DBG("val (null)");

		bt_mesh.seq = 0U;
    c42a:	4b11      	ldr	r3, [pc, #68]	; (c470 <seq_set+0x50>)
    c42c:	605c      	str	r4, [r3, #4]
	}

	BT_DBG("Sequence Number 0x%06x", bt_mesh.seq);

	return 0;
}
    c42e:	4620      	mov	r0, r4
    c430:	b002      	add	sp, #8
    c432:	bd10      	pop	{r4, pc}
	err = bt_mesh_settings_set(read_cb, cb_arg, &seq, sizeof(seq));
    c434:	2303      	movs	r3, #3
    c436:	aa01      	add	r2, sp, #4
    c438:	f006 fff6 	bl	13428 <bt_mesh_settings_set>
	if (err) {
    c43c:	4604      	mov	r4, r0
    c43e:	b150      	cbz	r0, c456 <seq_set+0x36>
    c440:	4b0c      	ldr	r3, [pc, #48]	; (c474 <seq_set+0x54>)
    c442:	490d      	ldr	r1, [pc, #52]	; (c478 <seq_set+0x58>)
		BT_ERR("Failed to set \'seq\'");
    c444:	480d      	ldr	r0, [pc, #52]	; (c47c <seq_set+0x5c>)
    c446:	1ac9      	subs	r1, r1, r3
    c448:	08c9      	lsrs	r1, r1, #3
    c44a:	0189      	lsls	r1, r1, #6
    c44c:	f041 0101 	orr.w	r1, r1, #1
    c450:	f015 fb4b 	bl	21aea <log_0>
		return err;
    c454:	e7eb      	b.n	c42e <seq_set+0xe>
	return ((uint32_t)src[2] << 16) | sys_get_le16(&src[0]);
    c456:	f89d 2006 	ldrb.w	r2, [sp, #6]
    c45a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    c45e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
		bt_mesh.seq += (CONFIG_BT_MESH_SEQ_STORE_RATE -
    c462:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
		bt_mesh.seq--;
    c466:	4a02      	ldr	r2, [pc, #8]	; (c470 <seq_set+0x50>)
    c468:	337f      	adds	r3, #127	; 0x7f
    c46a:	6053      	str	r3, [r2, #4]
	return 0;
    c46c:	e7df      	b.n	c42e <seq_set+0xe>
    c46e:	bf00      	nop
    c470:	200018d0 	.word	0x200018d0
    c474:	00029870 	.word	0x00029870
    c478:	000299f0 	.word	0x000299f0
    c47c:	0002c980 	.word	0x0002c980

0000c480 <net_set>:
{
    c480:	b510      	push	{r4, lr}
    c482:	460c      	mov	r4, r1
    c484:	b086      	sub	sp, #24
    c486:	4610      	mov	r0, r2
    c488:	4619      	mov	r1, r3
	if (len_rd == 0) {
    c48a:	b94c      	cbnz	r4, c4a0 <net_set+0x20>
		bt_mesh_comp_unprovision();
    c48c:	f004 f89c 	bl	105c8 <bt_mesh_comp_unprovision>
		(void)memset(bt_mesh.dev_key, 0, sizeof(bt_mesh.dev_key));
    c490:	4811      	ldr	r0, [pc, #68]	; (c4d8 <net_set+0x58>)
    c492:	2210      	movs	r2, #16
    c494:	4621      	mov	r1, r4
    c496:	f017 fc92 	bl	23dbe <memset>
}
    c49a:	4620      	mov	r0, r4
    c49c:	b006      	add	sp, #24
    c49e:	bd10      	pop	{r4, pc}
	err = bt_mesh_settings_set(read_cb, cb_arg, &net, sizeof(net));
    c4a0:	2312      	movs	r3, #18
    c4a2:	aa01      	add	r2, sp, #4
    c4a4:	f006 ffc0 	bl	13428 <bt_mesh_settings_set>
	if (err) {
    c4a8:	4604      	mov	r4, r0
    c4aa:	b150      	cbz	r0, c4c2 <net_set+0x42>
    c4ac:	4b0b      	ldr	r3, [pc, #44]	; (c4dc <net_set+0x5c>)
    c4ae:	490c      	ldr	r1, [pc, #48]	; (c4e0 <net_set+0x60>)
		BT_ERR("Failed to set \'net\'");
    c4b0:	480c      	ldr	r0, [pc, #48]	; (c4e4 <net_set+0x64>)
    c4b2:	1ac9      	subs	r1, r1, r3
    c4b4:	08c9      	lsrs	r1, r1, #3
    c4b6:	0189      	lsls	r1, r1, #6
    c4b8:	f041 0101 	orr.w	r1, r1, #1
    c4bc:	f015 fb15 	bl	21aea <log_0>
		return err;
    c4c0:	e7eb      	b.n	c49a <net_set+0x1a>
	memcpy(bt_mesh.dev_key, net.dev_key, sizeof(bt_mesh.dev_key));
    c4c2:	2210      	movs	r2, #16
    c4c4:	f10d 0106 	add.w	r1, sp, #6
    c4c8:	4803      	ldr	r0, [pc, #12]	; (c4d8 <net_set+0x58>)
    c4ca:	f017 fc6d 	bl	23da8 <memcpy>
	bt_mesh_comp_provision(net.primary_addr);
    c4ce:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    c4d2:	f004 f863 	bl	1059c <bt_mesh_comp_provision>
	return 0;
    c4d6:	e7e0      	b.n	c49a <net_set+0x1a>
    c4d8:	20001928 	.word	0x20001928
    c4dc:	00029870 	.word	0x00029870
    c4e0:	000299f0 	.word	0x000299f0
    c4e4:	0002c994 	.word	0x0002c994

0000c4e8 <atomic_get.constprop.0>:
    c4e8:	4b03      	ldr	r3, [pc, #12]	; (c4f8 <atomic_get.constprop.0+0x10>)
    c4ea:	f3bf 8f5b 	dmb	ish
    c4ee:	6898      	ldr	r0, [r3, #8]
    c4f0:	f3bf 8f5b 	dmb	ish
}
    c4f4:	4770      	bx	lr
    c4f6:	bf00      	nop
    c4f8:	200018d0 	.word	0x200018d0

0000c4fc <atomic_set_bit_to.constprop.0>:
    c4fc:	4b0b      	ldr	r3, [pc, #44]	; (c52c <atomic_set_bit_to.constprop.0+0x30>)
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c4fe:	f3bf 8f5b 	dmb	ish
    c502:	b150      	cbz	r0, c51a <atomic_set_bit_to.constprop.0+0x1e>
    c504:	e853 2f00 	ldrex	r2, [r3]
    c508:	f042 0204 	orr.w	r2, r2, #4
    c50c:	e843 2100 	strex	r1, r2, [r3]
    c510:	2900      	cmp	r1, #0
    c512:	d1f7      	bne.n	c504 <atomic_set_bit_to.constprop.0+0x8>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c514:	f3bf 8f5b 	dmb	ish
}
    c518:	4770      	bx	lr
    c51a:	e853 2f00 	ldrex	r2, [r3]
    c51e:	f022 0204 	bic.w	r2, r2, #4
    c522:	e843 2100 	strex	r1, r2, [r3]
    c526:	2900      	cmp	r1, #0
    c528:	d0f4      	beq.n	c514 <atomic_set_bit_to.constprop.0+0x18>
    c52a:	e7f6      	b.n	c51a <atomic_set_bit_to.constprop.0+0x1e>
    c52c:	200018d8 	.word	0x200018d8

0000c530 <iv_set>:
{
    c530:	b537      	push	{r0, r1, r2, r4, r5, lr}
    c532:	460c      	mov	r4, r1
    c534:	4610      	mov	r0, r2
    c536:	4619      	mov	r1, r3
	if (len_rd == 0) {
    c538:	b98c      	cbnz	r4, c55e <iv_set+0x2e>
		bt_mesh.iv_index = 0U;
    c53a:	4b19      	ldr	r3, [pc, #100]	; (c5a0 <iv_set+0x70>)
    c53c:	f843 4b08 	str.w	r4, [r3], #8
    c540:	f3bf 8f5b 	dmb	ish
    c544:	e853 2f00 	ldrex	r2, [r3]
    c548:	f022 0204 	bic.w	r2, r2, #4
    c54c:	e843 2100 	strex	r1, r2, [r3]
    c550:	2900      	cmp	r1, #0
    c552:	d1f7      	bne.n	c544 <iv_set+0x14>
    c554:	f3bf 8f5b 	dmb	ish
}
    c558:	4620      	mov	r0, r4
    c55a:	b003      	add	sp, #12
    c55c:	bd30      	pop	{r4, r5, pc}
	err = bt_mesh_settings_set(read_cb, cb_arg, &iv, sizeof(iv));
    c55e:	2305      	movs	r3, #5
    c560:	466a      	mov	r2, sp
    c562:	f006 ff61 	bl	13428 <bt_mesh_settings_set>
	if (err) {
    c566:	4604      	mov	r4, r0
    c568:	b150      	cbz	r0, c580 <iv_set+0x50>
    c56a:	4b0e      	ldr	r3, [pc, #56]	; (c5a4 <iv_set+0x74>)
    c56c:	490e      	ldr	r1, [pc, #56]	; (c5a8 <iv_set+0x78>)
		BT_ERR("Failed to set \'iv\'");
    c56e:	480f      	ldr	r0, [pc, #60]	; (c5ac <iv_set+0x7c>)
    c570:	1ac9      	subs	r1, r1, r3
    c572:	08c9      	lsrs	r1, r1, #3
    c574:	0189      	lsls	r1, r1, #6
    c576:	f041 0101 	orr.w	r1, r1, #1
    c57a:	f015 fab6 	bl	21aea <log_0>
		return err;
    c57e:	e7eb      	b.n	c558 <iv_set+0x28>
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS, iv.iv_update);
    c580:	f89d 0004 	ldrb.w	r0, [sp, #4]
	bt_mesh.iv_index = iv.iv_index;
    c584:	4d06      	ldr	r5, [pc, #24]	; (c5a0 <iv_set+0x70>)
    c586:	9b00      	ldr	r3, [sp, #0]
    c588:	602b      	str	r3, [r5, #0]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS, iv.iv_update);
    c58a:	f000 0001 	and.w	r0, r0, #1
    c58e:	f7ff ffb5 	bl	c4fc <atomic_set_bit_to.constprop.0>
	bt_mesh.ivu_duration = iv.iv_duration;
    c592:	f89d 3004 	ldrb.w	r3, [sp, #4]
    c596:	f3c3 0346 	ubfx	r3, r3, #1, #7
    c59a:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
	return 0;
    c59e:	e7db      	b.n	c558 <iv_set+0x28>
    c5a0:	200018d0 	.word	0x200018d0
    c5a4:	00029870 	.word	0x00029870
    c5a8:	000299f0 	.word	0x000299f0
    c5ac:	0002c9a8 	.word	0x0002c9a8

0000c5b0 <bt_mesh_net_create>:
{
    c5b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c5b4:	460d      	mov	r5, r1
    c5b6:	461f      	mov	r7, r3
	if (BT_MESH_KEY_REFRESH(flags)) {
    c5b8:	f015 0301 	ands.w	r3, r5, #1
{
    c5bc:	4611      	mov	r1, r2
		err = bt_mesh_subnet_set(idx, BT_MESH_KR_PHASE_2, NULL, key);
    c5be:	bf1d      	ittte	ne
    c5c0:	4613      	movne	r3, r2
    c5c2:	2102      	movne	r1, #2
    c5c4:	2200      	movne	r2, #0
		err = bt_mesh_subnet_set(idx, BT_MESH_KR_NORMAL, key, NULL);
    c5c6:	4619      	moveq	r1, r3
{
    c5c8:	4606      	mov	r6, r0
		err = bt_mesh_subnet_set(idx, BT_MESH_KR_NORMAL, key, NULL);
    c5ca:	f019 fae9 	bl	25ba0 <bt_mesh_subnet_set>
    c5ce:	4604      	mov	r4, r0
	if (err) {
    c5d0:	b160      	cbz	r0, c5ec <bt_mesh_net_create+0x3c>
    c5d2:	4915      	ldr	r1, [pc, #84]	; (c628 <bt_mesh_net_create+0x78>)
    c5d4:	4b15      	ldr	r3, [pc, #84]	; (c62c <bt_mesh_net_create+0x7c>)
		BT_ERR("Failed creating subnet");
    c5d6:	4816      	ldr	r0, [pc, #88]	; (c630 <bt_mesh_net_create+0x80>)
    c5d8:	1ac9      	subs	r1, r1, r3
    c5da:	08c9      	lsrs	r1, r1, #3
    c5dc:	0189      	lsls	r1, r1, #6
    c5de:	f041 0101 	orr.w	r1, r1, #1
    c5e2:	f015 fa82 	bl	21aea <log_0>
}
    c5e6:	4620      	mov	r0, r4
    c5e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(msg_cache, 0, sizeof(msg_cache));
    c5ec:	4601      	mov	r1, r0
    c5ee:	2228      	movs	r2, #40	; 0x28
    c5f0:	4810      	ldr	r0, [pc, #64]	; (c634 <bt_mesh_net_create+0x84>)
	bt_mesh.iv_index = iv_index;
    c5f2:	f8df 8044 	ldr.w	r8, [pc, #68]	; c638 <bt_mesh_net_create+0x88>
	(void)memset(msg_cache, 0, sizeof(msg_cache));
    c5f6:	f017 fbe2 	bl	23dbe <memset>
	msg_cache_next = 0U;
    c5fa:	4b10      	ldr	r3, [pc, #64]	; (c63c <bt_mesh_net_create+0x8c>)
	bt_mesh.iv_index = iv_index;
    c5fc:	f8c8 7000 	str.w	r7, [r8]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS,
    c600:	f3c5 0040 	ubfx	r0, r5, #1, #1
	msg_cache_next = 0U;
    c604:	801c      	strh	r4, [r3, #0]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS,
    c606:	f7ff ff79 	bl	c4fc <atomic_set_bit_to.constprop.0>
	if (BT_MESH_IV_UPDATE(flags)) {
    c60a:	b110      	cbz	r0, c612 <bt_mesh_net_create+0x62>
		bt_mesh.ivu_duration = BT_MESH_IVU_MIN_HOURS;
    c60c:	2360      	movs	r3, #96	; 0x60
    c60e:	f888 3024 	strb.w	r3, [r8, #36]	; 0x24
		bt_mesh_subnet_store(idx);
    c612:	4630      	mov	r0, r6
    c614:	f019 f9de 	bl	259d4 <bt_mesh_subnet_store>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_IV_PENDING);
    c618:	2004      	movs	r0, #4
    c61a:	f006 ff37 	bl	1348c <bt_mesh_settings_store_schedule>
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_SEQ_PENDING);
    c61e:	2005      	movs	r0, #5
    c620:	f006 ff34 	bl	1348c <bt_mesh_settings_store_schedule>
    c624:	e7df      	b.n	c5e6 <bt_mesh_net_create+0x36>
    c626:	bf00      	nop
    c628:	000299f0 	.word	0x000299f0
    c62c:	00029870 	.word	0x00029870
    c630:	0002c9bb 	.word	0x0002c9bb
    c634:	20002308 	.word	0x20002308
    c638:	200018d0 	.word	0x200018d0
    c63c:	200036de 	.word	0x200036de

0000c640 <bt_mesh_net_iv_update>:
{
    c640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c642:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    c644:	f7ff ff50 	bl	c4e8 <atomic_get.constprop.0>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    c648:	4e4f      	ldr	r6, [pc, #316]	; (c788 <bt_mesh_net_iv_update+0x148>)
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    c64a:	f010 0f04 	tst.w	r0, #4
		if (iv_index != bt_mesh.iv_index) {
    c64e:	6832      	ldr	r2, [r6, #0]
{
    c650:	460c      	mov	r4, r1
    c652:	f3c0 0780 	ubfx	r7, r0, #2, #1
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    c656:	d012      	beq.n	c67e <bt_mesh_net_iv_update+0x3e>
		if (iv_index != bt_mesh.iv_index) {
    c658:	42aa      	cmp	r2, r5
    c65a:	d00b      	beq.n	c674 <bt_mesh_net_iv_update+0x34>
    c65c:	494b      	ldr	r1, [pc, #300]	; (c78c <bt_mesh_net_iv_update+0x14c>)
    c65e:	4b4c      	ldr	r3, [pc, #304]	; (c790 <bt_mesh_net_iv_update+0x150>)
			BT_WARN("IV Index mismatch: 0x%08x != 0x%08x",
    c660:	484c      	ldr	r0, [pc, #304]	; (c794 <bt_mesh_net_iv_update+0x154>)
    c662:	1a5b      	subs	r3, r3, r1
    c664:	08db      	lsrs	r3, r3, #3
    c666:	019b      	lsls	r3, r3, #6
    c668:	f043 0302 	orr.w	r3, r3, #2
    c66c:	4629      	mov	r1, r5
			BT_ERR("IV Index out of sync: 0x%08x != 0x%08x",
    c66e:	f015 fa5d 	bl	21b2c <log_2>
    c672:	e001      	b.n	c678 <bt_mesh_net_iv_update+0x38>
		if (iv_update) {
    c674:	2900      	cmp	r1, #0
    c676:	d055      	beq.n	c724 <bt_mesh_net_iv_update+0xe4>
			return false;
    c678:	2400      	movs	r4, #0
}
    c67a:	4620      	mov	r0, r4
    c67c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (iv_index == bt_mesh.iv_index) {
    c67e:	42aa      	cmp	r2, r5
    c680:	d07f      	beq.n	c782 <bt_mesh_net_iv_update+0x142>
		if (iv_index < bt_mesh.iv_index ||
    c682:	d803      	bhi.n	c68c <bt_mesh_net_iv_update+0x4c>
		    iv_index > bt_mesh.iv_index + 42) {
    c684:	f102 032a 	add.w	r3, r2, #42	; 0x2a
		if (iv_index < bt_mesh.iv_index ||
    c688:	42ab      	cmp	r3, r5
    c68a:	d209      	bcs.n	c6a0 <bt_mesh_net_iv_update+0x60>
    c68c:	493f      	ldr	r1, [pc, #252]	; (c78c <bt_mesh_net_iv_update+0x14c>)
    c68e:	4b40      	ldr	r3, [pc, #256]	; (c790 <bt_mesh_net_iv_update+0x150>)
			BT_ERR("IV Index out of sync: 0x%08x != 0x%08x",
    c690:	4841      	ldr	r0, [pc, #260]	; (c798 <bt_mesh_net_iv_update+0x158>)
    c692:	1a5b      	subs	r3, r3, r1
    c694:	08db      	lsrs	r3, r3, #3
    c696:	019b      	lsls	r3, r3, #6
    c698:	f043 0301 	orr.w	r3, r3, #1
    c69c:	4629      	mov	r1, r5
    c69e:	e7e6      	b.n	c66e <bt_mesh_net_iv_update+0x2e>
		if (iv_index > bt_mesh.iv_index + 1) {
    c6a0:	3201      	adds	r2, #1
    c6a2:	42aa      	cmp	r2, r5
    c6a4:	d22f      	bcs.n	c706 <bt_mesh_net_iv_update+0xc6>
    c6a6:	4b39      	ldr	r3, [pc, #228]	; (c78c <bt_mesh_net_iv_update+0x14c>)
    c6a8:	4939      	ldr	r1, [pc, #228]	; (c790 <bt_mesh_net_iv_update+0x150>)
			BT_WARN("Performing IV Index Recovery");
    c6aa:	483c      	ldr	r0, [pc, #240]	; (c79c <bt_mesh_net_iv_update+0x15c>)
    c6ac:	1ac9      	subs	r1, r1, r3
    c6ae:	08c9      	lsrs	r1, r1, #3
    c6b0:	0189      	lsls	r1, r1, #6
    c6b2:	f041 0102 	orr.w	r1, r1, #2
    c6b6:	f015 fa18 	bl	21aea <log_0>
			bt_mesh_rpl_clear();
    c6ba:	f019 fcae 	bl	2601a <bt_mesh_rpl_clear>
			bt_mesh.seq = 0U;
    c6be:	e9c6 5700 	strd	r5, r7, [r6]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS, iv_update);
    c6c2:	4620      	mov	r0, r4
    c6c4:	f7ff ff1a 	bl	c4fc <atomic_set_bit_to.constprop.0>
	bt_mesh.ivu_duration = 0U;
    c6c8:	2300      	movs	r3, #0
    c6ca:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
	if (iv_update) {
    c6ce:	2c00      	cmp	r4, #0
    c6d0:	d055      	beq.n	c77e <bt_mesh_net_iv_update+0x13e>
		bt_mesh.iv_index = iv_index;
    c6d2:	6035      	str	r5, [r6, #0]
		bt_mesh_rpl_reset();
    c6d4:	f002 fe68 	bl	f3a8 <bt_mesh_rpl_reset>
	k_work_reschedule(&bt_mesh.ivu_timer, BT_MESH_IVU_TIMEOUT);
    c6d8:	4a31      	ldr	r2, [pc, #196]	; (c7a0 <bt_mesh_net_iv_update+0x160>)
    c6da:	4832      	ldr	r0, [pc, #200]	; (c7a4 <bt_mesh_net_iv_update+0x164>)
    c6dc:	2300      	movs	r3, #0
    c6de:	f013 fea1 	bl	20424 <k_work_reschedule>
	bt_mesh_subnet_foreach(bt_mesh_beacon_update);
    c6e2:	4831      	ldr	r0, [pc, #196]	; (c7a8 <bt_mesh_net_iv_update+0x168>)
    c6e4:	f000 ff38 	bl	d558 <bt_mesh_subnet_foreach>
	    bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED) {
    c6e8:	f7ff f884 	bl	b7f4 <bt_mesh_gatt_proxy_get>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    c6ec:	2801      	cmp	r0, #1
    c6ee:	d102      	bne.n	c6f6 <bt_mesh_net_iv_update+0xb6>
		bt_mesh_proxy_beacon_send(NULL);
    c6f0:	2000      	movs	r0, #0
    c6f2:	f008 fe71 	bl	153d8 <bt_mesh_proxy_beacon_send>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_IV_PENDING);
    c6f6:	2004      	movs	r0, #4
    c6f8:	f006 fec8 	bl	1348c <bt_mesh_settings_store_schedule>
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_SEQ_PENDING);
    c6fc:	2005      	movs	r0, #5
    c6fe:	f006 fec5 	bl	1348c <bt_mesh_settings_store_schedule>
	return true;
    c702:	2401      	movs	r4, #1
    c704:	e7b9      	b.n	c67a <bt_mesh_net_iv_update+0x3a>
		if (iv_index == bt_mesh.iv_index + 1 && !iv_update) {
    c706:	d10b      	bne.n	c720 <bt_mesh_net_iv_update+0xe0>
    c708:	b961      	cbnz	r1, c724 <bt_mesh_net_iv_update+0xe4>
    c70a:	4b20      	ldr	r3, [pc, #128]	; (c78c <bt_mesh_net_iv_update+0x14c>)
    c70c:	4920      	ldr	r1, [pc, #128]	; (c790 <bt_mesh_net_iv_update+0x150>)
			BT_WARN("Ignoring new index in normal mode");
    c70e:	4827      	ldr	r0, [pc, #156]	; (c7ac <bt_mesh_net_iv_update+0x16c>)
    c710:	1ac9      	subs	r1, r1, r3
    c712:	08c9      	lsrs	r1, r1, #3
    c714:	0189      	lsls	r1, r1, #6
    c716:	f041 0102 	orr.w	r1, r1, #2
    c71a:	f015 f9e6 	bl	21aea <log_0>
			return false;
    c71e:	e7ac      	b.n	c67a <bt_mesh_net_iv_update+0x3a>
		if (!iv_update) {
    c720:	2900      	cmp	r1, #0
    c722:	d0aa      	beq.n	c67a <bt_mesh_net_iv_update+0x3a>
		if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
    c724:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
    c728:	2b5f      	cmp	r3, #95	; 0x5f
    c72a:	d80a      	bhi.n	c742 <bt_mesh_net_iv_update+0x102>
    c72c:	4b17      	ldr	r3, [pc, #92]	; (c78c <bt_mesh_net_iv_update+0x14c>)
    c72e:	4918      	ldr	r1, [pc, #96]	; (c790 <bt_mesh_net_iv_update+0x150>)
			BT_WARN("IV Update before minimum duration");
    c730:	481f      	ldr	r0, [pc, #124]	; (c7b0 <bt_mesh_net_iv_update+0x170>)
    c732:	1ac9      	subs	r1, r1, r3
    c734:	08c9      	lsrs	r1, r1, #3
    c736:	0189      	lsls	r1, r1, #6
    c738:	f041 0102 	orr.w	r1, r1, #2
    c73c:	f015 f9d5 	bl	21aea <log_0>
			return false;
    c740:	e79a      	b.n	c678 <bt_mesh_net_iv_update+0x38>
	if (!iv_update && bt_mesh_tx_in_progress()) {
    c742:	2c00      	cmp	r4, #0
    c744:	d1bd      	bne.n	c6c2 <bt_mesh_net_iv_update+0x82>
    c746:	f001 fe83 	bl	e450 <bt_mesh_tx_in_progress>
    c74a:	2800      	cmp	r0, #0
    c74c:	d0b9      	beq.n	c6c2 <bt_mesh_net_iv_update+0x82>
    c74e:	4b0f      	ldr	r3, [pc, #60]	; (c78c <bt_mesh_net_iv_update+0x14c>)
    c750:	490f      	ldr	r1, [pc, #60]	; (c790 <bt_mesh_net_iv_update+0x150>)
		BT_WARN("IV Update deferred because of pending transfer");
    c752:	4818      	ldr	r0, [pc, #96]	; (c7b4 <bt_mesh_net_iv_update+0x174>)
    c754:	1ac9      	subs	r1, r1, r3
    c756:	08c9      	lsrs	r1, r1, #3
    c758:	0189      	lsls	r1, r1, #6
    c75a:	f041 0102 	orr.w	r1, r1, #2
    c75e:	f015 f9c4 	bl	21aea <log_0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c762:	f3bf 8f5b 	dmb	ish
    c766:	4b14      	ldr	r3, [pc, #80]	; (c7b8 <bt_mesh_net_iv_update+0x178>)
    c768:	e853 2f00 	ldrex	r2, [r3]
    c76c:	f042 0220 	orr.w	r2, r2, #32
    c770:	e843 2100 	strex	r1, r2, [r3]
    c774:	2900      	cmp	r1, #0
    c776:	d1f7      	bne.n	c768 <bt_mesh_net_iv_update+0x128>
    c778:	f3bf 8f5b 	dmb	ish
    c77c:	e77d      	b.n	c67a <bt_mesh_net_iv_update+0x3a>
		bt_mesh.seq = 0U;
    c77e:	6074      	str	r4, [r6, #4]
    c780:	e7aa      	b.n	c6d8 <bt_mesh_net_iv_update+0x98>
			return false;
    c782:	463c      	mov	r4, r7
    c784:	e779      	b.n	c67a <bt_mesh_net_iv_update+0x3a>
    c786:	bf00      	nop
    c788:	200018d0 	.word	0x200018d0
    c78c:	00029870 	.word	0x00029870
    c790:	000299f0 	.word	0x000299f0
    c794:	0002c9d2 	.word	0x0002c9d2
    c798:	0002c9f6 	.word	0x0002c9f6
    c79c:	0002ca1d 	.word	0x0002ca1d
    c7a0:	a8c00000 	.word	0xa8c00000
    c7a4:	200018f8 	.word	0x200018f8
    c7a8:	0000bfa1 	.word	0x0000bfa1
    c7ac:	0002ca3a 	.word	0x0002ca3a
    c7b0:	0002ca5c 	.word	0x0002ca5c
    c7b4:	0002ca7e 	.word	0x0002ca7e
    c7b8:	200018d8 	.word	0x200018d8

0000c7bc <ivu_refresh>:
{
    c7bc:	b510      	push	{r4, lr}
	if (!bt_mesh_is_provisioned()) {
    c7be:	f7fe fef5 	bl	b5ac <bt_mesh_is_provisioned>
    c7c2:	b340      	cbz	r0, c816 <ivu_refresh+0x5a>
	bt_mesh.ivu_duration = MIN(UINT8_MAX,
    c7c4:	4c14      	ldr	r4, [pc, #80]	; (c818 <ivu_refresh+0x5c>)
    c7c6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    c7ca:	3318      	adds	r3, #24
    c7cc:	2bff      	cmp	r3, #255	; 0xff
    c7ce:	461a      	mov	r2, r3
    c7d0:	bfa8      	it	ge
    c7d2:	22ff      	movge	r2, #255	; 0xff
	if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
    c7d4:	2b5f      	cmp	r3, #95	; 0x5f
	bt_mesh.ivu_duration = MIN(UINT8_MAX,
    c7d6:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
    c7da:	dc0a      	bgt.n	c7f2 <ivu_refresh+0x36>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_IV_PENDING);
    c7dc:	2004      	movs	r0, #4
    c7de:	f006 fe55 	bl	1348c <bt_mesh_settings_store_schedule>
		k_work_reschedule(&bt_mesh.ivu_timer, BT_MESH_IVU_TIMEOUT);
    c7e2:	f104 0028 	add.w	r0, r4, #40	; 0x28
    c7e6:	4a0d      	ldr	r2, [pc, #52]	; (c81c <ivu_refresh+0x60>)
}
    c7e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_work_reschedule(&bt_mesh.ivu_timer, BT_MESH_IVU_TIMEOUT);
    c7ec:	2300      	movs	r3, #0
    c7ee:	f013 be19 	b.w	20424 <k_work_reschedule>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    c7f2:	f7ff fe79 	bl	c4e8 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    c7f6:	0743      	lsls	r3, r0, #29
    c7f8:	d508      	bpl.n	c80c <ivu_refresh+0x50>
		bt_mesh_beacon_ivu_initiator(true);
    c7fa:	2001      	movs	r0, #1
    c7fc:	f7ff fc0a 	bl	c014 <bt_mesh_beacon_ivu_initiator>
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
    c800:	6820      	ldr	r0, [r4, #0]
    c802:	2100      	movs	r1, #0
}
    c804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
    c808:	f7ff bf1a 	b.w	c640 <bt_mesh_net_iv_update>
}
    c80c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_IV_PENDING);
    c810:	2004      	movs	r0, #4
    c812:	f006 be3b 	b.w	1348c <bt_mesh_settings_store_schedule>
}
    c816:	bd10      	pop	{r4, pc}
    c818:	200018d0 	.word	0x200018d0
    c81c:	a8c00000 	.word	0xa8c00000

0000c820 <bt_mesh_next_seq>:
{
    c820:	b538      	push	{r3, r4, r5, lr}
	uint32_t seq = bt_mesh.seq++;
    c822:	4c10      	ldr	r4, [pc, #64]	; (c864 <bt_mesh_next_seq+0x44>)
    c824:	6865      	ldr	r5, [r4, #4]
    c826:	1c6b      	adds	r3, r5, #1
	if (CONFIG_BT_MESH_SEQ_STORE_RATE > 1 &&
    c828:	065a      	lsls	r2, r3, #25
	uint32_t seq = bt_mesh.seq++;
    c82a:	6063      	str	r3, [r4, #4]
	if (CONFIG_BT_MESH_SEQ_STORE_RATE > 1 &&
    c82c:	d102      	bne.n	c834 <bt_mesh_next_seq+0x14>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_SEQ_PENDING);
    c82e:	2005      	movs	r0, #5
    c830:	f006 fe2c 	bl	1348c <bt_mesh_settings_store_schedule>
    c834:	f7ff fe58 	bl	c4e8 <atomic_get.constprop.0>
    c838:	4603      	mov	r3, r0
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS) &&
    c83a:	075b      	lsls	r3, r3, #29
    c83c:	f3c0 0080 	ubfx	r0, r0, #2, #1
    c840:	d40e      	bmi.n	c860 <bt_mesh_next_seq+0x40>
    c842:	6863      	ldr	r3, [r4, #4]
    c844:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    c848:	d90a      	bls.n	c860 <bt_mesh_next_seq+0x40>
	    bt_mesh_subnet_get(BT_MESH_KEY_PRIMARY)) {
    c84a:	f000 fd45 	bl	d2d8 <bt_mesh_subnet_get>
	    bt_mesh.seq > IV_UPDATE_SEQ_LIMIT &&
    c84e:	b138      	cbz	r0, c860 <bt_mesh_next_seq+0x40>
		bt_mesh_beacon_ivu_initiator(true);
    c850:	2001      	movs	r0, #1
    c852:	f7ff fbdf 	bl	c014 <bt_mesh_beacon_ivu_initiator>
		bt_mesh_net_iv_update(bt_mesh.iv_index + 1, true);
    c856:	6820      	ldr	r0, [r4, #0]
    c858:	2101      	movs	r1, #1
    c85a:	4408      	add	r0, r1
    c85c:	f7ff fef0 	bl	c640 <bt_mesh_net_iv_update>
}
    c860:	4628      	mov	r0, r5
    c862:	bd38      	pop	{r3, r4, r5, pc}
    c864:	200018d0 	.word	0x200018d0

0000c868 <net_header_encode>:
{
    c868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const bool ctl = (tx->ctx->app_idx == BT_MESH_KEY_UNUSED);
    c86a:	6843      	ldr	r3, [r0, #4]
    c86c:	885f      	ldrh	r7, [r3, #2]
	if (ctl && net_buf_simple_tailroom(buf) < 8) {
    c86e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c872:	429f      	cmp	r7, r3
{
    c874:	4605      	mov	r5, r0
    c876:	460e      	mov	r6, r1
    c878:	4614      	mov	r4, r2
	if (ctl && net_buf_simple_tailroom(buf) < 8) {
    c87a:	d111      	bne.n	c8a0 <net_header_encode+0x38>
    c87c:	4610      	mov	r0, r2
    c87e:	f01b fd98 	bl	283b2 <net_buf_simple_tailroom>
    c882:	2807      	cmp	r0, #7
    c884:	d80c      	bhi.n	c8a0 <net_header_encode+0x38>
    c886:	4922      	ldr	r1, [pc, #136]	; (c910 <net_header_encode+0xa8>)
    c888:	4b22      	ldr	r3, [pc, #136]	; (c914 <net_header_encode+0xac>)
		BT_ERR("Insufficient MIC space for CTL PDU");
    c88a:	4823      	ldr	r0, [pc, #140]	; (c918 <net_header_encode+0xb0>)
    c88c:	1ac9      	subs	r1, r1, r3
    c88e:	08c9      	lsrs	r1, r1, #3
    c890:	0189      	lsls	r1, r1, #6
    c892:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Insufficient MIC space for PDU");
    c896:	f015 f928 	bl	21aea <log_0>
		return -EINVAL;
    c89a:	f06f 0015 	mvn.w	r0, #21
}
    c89e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (net_buf_simple_tailroom(buf) < 4) {
    c8a0:	4620      	mov	r0, r4
    c8a2:	f01b fd86 	bl	283b2 <net_buf_simple_tailroom>
    c8a6:	2803      	cmp	r0, #3
    c8a8:	d808      	bhi.n	c8bc <net_header_encode+0x54>
    c8aa:	4919      	ldr	r1, [pc, #100]	; (c910 <net_header_encode+0xa8>)
    c8ac:	4b19      	ldr	r3, [pc, #100]	; (c914 <net_header_encode+0xac>)
		BT_ERR("Insufficient MIC space for PDU");
    c8ae:	481b      	ldr	r0, [pc, #108]	; (c91c <net_header_encode+0xb4>)
    c8b0:	1ac9      	subs	r1, r1, r3
    c8b2:	08c9      	lsrs	r1, r1, #3
    c8b4:	0189      	lsls	r1, r1, #6
    c8b6:	f041 0101 	orr.w	r1, r1, #1
    c8ba:	e7ec      	b.n	c896 <net_header_encode+0x2e>
	net_buf_simple_push_be16(buf, tx->ctx->addr);
    c8bc:	686b      	ldr	r3, [r5, #4]
    c8be:	4620      	mov	r0, r4
    c8c0:	8899      	ldrh	r1, [r3, #4]
    c8c2:	f01b fd0c 	bl	282de <net_buf_simple_push_be16>
	net_buf_simple_push_be16(buf, tx->src);
    c8c6:	8929      	ldrh	r1, [r5, #8]
    c8c8:	4620      	mov	r0, r4
    c8ca:	f01b fd08 	bl	282de <net_buf_simple_push_be16>
	net_buf_simple_push_be24(buf, bt_mesh_next_seq());
    c8ce:	f7ff ffa7 	bl	c820 <bt_mesh_next_seq>
    c8d2:	4601      	mov	r1, r0
    c8d4:	4620      	mov	r0, r4
    c8d6:	f01b fd17 	bl	28308 <net_buf_simple_push_be24>
	if (ctl) {
    c8da:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c8de:	429f      	cmp	r7, r3
    c8e0:	686b      	ldr	r3, [r5, #4]
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl | 0x80);
    c8e2:	7ad9      	ldrb	r1, [r3, #11]
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl);
    c8e4:	4620      	mov	r0, r4
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl | 0x80);
    c8e6:	bf08      	it	eq
    c8e8:	f041 0180 	orreq.w	r1, r1, #128	; 0x80
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl);
    c8ec:	f01b fd03 	bl	282f6 <net_buf_simple_push_u8>
	net_buf_simple_push_u8(buf, (nid | (BT_MESH_NET_IVI_TX & 1) << 7));
    c8f0:	4b0b      	ldr	r3, [pc, #44]	; (c920 <net_header_encode+0xb8>)
    c8f2:	7819      	ldrb	r1, [r3, #0]
    c8f4:	f7ff fdf8 	bl	c4e8 <atomic_get.constprop.0>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    c8f8:	f3c0 0080 	ubfx	r0, r0, #2, #1
    c8fc:	1a09      	subs	r1, r1, r0
    c8fe:	ea46 11c1 	orr.w	r1, r6, r1, lsl #7
    c902:	4620      	mov	r0, r4
    c904:	b2c9      	uxtb	r1, r1
    c906:	f01b fcf6 	bl	282f6 <net_buf_simple_push_u8>
	return 0;
    c90a:	2000      	movs	r0, #0
    c90c:	e7c7      	b.n	c89e <net_header_encode+0x36>
    c90e:	bf00      	nop
    c910:	000299f0 	.word	0x000299f0
    c914:	00029870 	.word	0x00029870
    c918:	0002caad 	.word	0x0002caad
    c91c:	0002cad0 	.word	0x0002cad0
    c920:	200018d0 	.word	0x200018d0

0000c924 <bt_mesh_net_encode>:
{
    c924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	tx->friend_cred = 0U;
    c928:	7ac3      	ldrb	r3, [r0, #11]
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    c92a:	6807      	ldr	r7, [r0, #0]
	tx->friend_cred = 0U;
    c92c:	f36f 0300 	bfc	r3, #0, #1
    c930:	72c3      	strb	r3, [r0, #11]
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    c932:	7fbc      	ldrb	r4, [r7, #30]
    c934:	1ea3      	subs	r3, r4, #2
    c936:	425c      	negs	r4, r3
    c938:	415c      	adcs	r4, r3
{
    c93a:	460d      	mov	r5, r1
	err = net_header_encode(tx, cred->nid, buf);
    c93c:	215a      	movs	r1, #90	; 0x5a
    c93e:	434c      	muls	r4, r1
    c940:	193b      	adds	r3, r7, r4
{
    c942:	4616      	mov	r6, r2
	err = net_header_encode(tx, cred->nid, buf);
    c944:	f893 103d 	ldrb.w	r1, [r3, #61]	; 0x3d
    c948:	462a      	mov	r2, r5
    c94a:	f7ff ff8d 	bl	c868 <net_header_encode>
	if (err) {
    c94e:	b970      	cbnz	r0, c96e <bt_mesh_net_encode+0x4a>
	return net_encrypt(buf, cred, BT_MESH_NET_IVI_TX, proxy);
    c950:	4b08      	ldr	r3, [pc, #32]	; (c974 <bt_mesh_net_encode+0x50>)
    c952:	681a      	ldr	r2, [r3, #0]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    c954:	f7ff fdc8 	bl	c4e8 <atomic_get.constprop.0>
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    c958:	343d      	adds	r4, #61	; 0x3d
	return net_encrypt(buf, cred, BT_MESH_NET_IVI_TX, proxy);
    c95a:	f3c0 0080 	ubfx	r0, r0, #2, #1
    c95e:	4633      	mov	r3, r6
    c960:	1a12      	subs	r2, r2, r0
    c962:	1939      	adds	r1, r7, r4
    c964:	4628      	mov	r0, r5
}
    c966:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return net_encrypt(buf, cred, BT_MESH_NET_IVI_TX, proxy);
    c96a:	f019 b812 	b.w	25992 <net_encrypt>
}
    c96e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c972:	bf00      	nop
    c974:	200018d0 	.word	0x200018d0

0000c978 <bt_mesh_net_send>:
{
    c978:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c97c:	461f      	mov	r7, r3
	tx->friend_cred = 0U;
    c97e:	7ac3      	ldrb	r3, [r0, #11]
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    c980:	f8d0 a000 	ldr.w	sl, [r0]
	tx->friend_cred = 0U;
    c984:	f36f 0300 	bfc	r3, #0, #1
    c988:	72c3      	strb	r3, [r0, #11]
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    c98a:	f89a 901e 	ldrb.w	r9, [sl, #30]
    c98e:	f1a9 0302 	sub.w	r3, r9, #2
    c992:	f1d3 0900 	rsbs	r9, r3, #0
    c996:	eb49 0903 	adc.w	r9, r9, r3
	err = net_header_encode(tx, cred->nid, &buf->b);
    c99a:	235a      	movs	r3, #90	; 0x5a
    c99c:	fb03 a309 	mla	r3, r3, r9, sl
    c9a0:	f101 0b08 	add.w	fp, r1, #8
{
    c9a4:	460d      	mov	r5, r1
    c9a6:	4616      	mov	r6, r2
	err = net_header_encode(tx, cred->nid, &buf->b);
    c9a8:	f893 103d 	ldrb.w	r1, [r3, #61]	; 0x3d
    c9ac:	465a      	mov	r2, fp
{
    c9ae:	4604      	mov	r4, r0
	err = net_header_encode(tx, cred->nid, &buf->b);
    c9b0:	f7ff ff5a 	bl	c868 <net_header_encode>
	if (err) {
    c9b4:	2800      	cmp	r0, #0
    c9b6:	f040 8084 	bne.w	cac2 <bt_mesh_net_send+0x14a>
	if (bt_mesh_fixed_group_match(tx->ctx->addr) ||
    c9ba:	6863      	ldr	r3, [r4, #4]
    c9bc:	8898      	ldrh	r0, [r3, #4]
    c9be:	f018 ff81 	bl	258c4 <bt_mesh_fixed_group_match>
    c9c2:	2800      	cmp	r0, #0
    c9c4:	d046      	beq.n	ca54 <bt_mesh_net_send+0xdc>
		err = loopback(tx, buf->data, buf->len);
    c9c6:	89ab      	ldrh	r3, [r5, #12]
    c9c8:	68a9      	ldr	r1, [r5, #8]
    c9ca:	9300      	str	r3, [sp, #0]
	return net_buf_alloc_fixed(pool, timeout);
    c9cc:	483e      	ldr	r0, [pc, #248]	; (cac8 <bt_mesh_net_send+0x150>)
    c9ce:	9101      	str	r1, [sp, #4]
    c9d0:	2200      	movs	r2, #0
    c9d2:	2300      	movs	r3, #0
    c9d4:	f01b fb7a 	bl	280cc <net_buf_alloc_fixed>
	if (!buf) {
    c9d8:	9901      	ldr	r1, [sp, #4]
    c9da:	4680      	mov	r8, r0
    c9dc:	2800      	cmp	r0, #0
    c9de:	d146      	bne.n	ca6e <bt_mesh_net_send+0xf6>
    c9e0:	4b3a      	ldr	r3, [pc, #232]	; (cacc <bt_mesh_net_send+0x154>)
    c9e2:	493b      	ldr	r1, [pc, #236]	; (cad0 <bt_mesh_net_send+0x158>)
		BT_WARN("Unable to allocate loopback");
    c9e4:	483b      	ldr	r0, [pc, #236]	; (cad4 <bt_mesh_net_send+0x15c>)
    c9e6:	1ac9      	subs	r1, r1, r3
    c9e8:	08c9      	lsrs	r1, r1, #3
    c9ea:	0189      	lsls	r1, r1, #6
    c9ec:	f041 0102 	orr.w	r1, r1, #2
    c9f0:	f015 f87b 	bl	21aea <log_0>
		return -ENOMEM;
    c9f4:	f06f 080b 	mvn.w	r8, #11
		if (BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr) ||
    c9f8:	6863      	ldr	r3, [r4, #4]
    c9fa:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
    c9fe:	2a00      	cmp	r2, #0
    ca00:	dc45      	bgt.n	ca8e <bt_mesh_net_send+0x116>
    ca02:	7adb      	ldrb	r3, [r3, #11]
    ca04:	2b01      	cmp	r3, #1
    ca06:	d042      	beq.n	ca8e <bt_mesh_net_send+0x116>
	err = net_encrypt(&buf->b, cred, BT_MESH_NET_IVI_TX, false);
    ca08:	4b33      	ldr	r3, [pc, #204]	; (cad8 <bt_mesh_net_send+0x160>)
    ca0a:	681a      	ldr	r2, [r3, #0]
    ca0c:	f7ff fd6c 	bl	c4e8 <atomic_get.constprop.0>
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    ca10:	215a      	movs	r1, #90	; 0x5a
	err = net_encrypt(&buf->b, cred, BT_MESH_NET_IVI_TX, false);
    ca12:	f3c0 0080 	ubfx	r0, r0, #2, #1
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    ca16:	fb01 a109 	mla	r1, r1, r9, sl
	err = net_encrypt(&buf->b, cred, BT_MESH_NET_IVI_TX, false);
    ca1a:	1a12      	subs	r2, r2, r0
    ca1c:	2300      	movs	r3, #0
    ca1e:	313d      	adds	r1, #61	; 0x3d
    ca20:	4658      	mov	r0, fp
    ca22:	f018 ffb6 	bl	25992 <net_encrypt>
	if (err) {
    ca26:	4680      	mov	r8, r0
    ca28:	2800      	cmp	r0, #0
    ca2a:	d136      	bne.n	ca9a <bt_mesh_net_send+0x122>
	BT_MESH_ADV(buf)->cb = cb;
    ca2c:	696b      	ldr	r3, [r5, #20]
	BT_MESH_ADV(buf)->cb_data = cb_data;
    ca2e:	e9c3 6700 	strd	r6, r7, [r3]
	    bt_mesh_proxy_relay(buf, tx->ctx->addr) &&
    ca32:	6863      	ldr	r3, [r4, #4]
    ca34:	4628      	mov	r0, r5
    ca36:	8899      	ldrh	r1, [r3, #4]
    ca38:	f008 fe28 	bl	1568c <bt_mesh_proxy_relay>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    ca3c:	b120      	cbz	r0, ca48 <bt_mesh_net_send+0xd0>
	    BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr)) {
    ca3e:	6863      	ldr	r3, [r4, #4]
	    bt_mesh_proxy_relay(buf, tx->ctx->addr) &&
    ca40:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    ca44:	2b00      	cmp	r3, #0
    ca46:	dc26      	bgt.n	ca96 <bt_mesh_net_send+0x11e>
	bt_mesh_adv_send(buf, cb, cb_data);
    ca48:	463a      	mov	r2, r7
    ca4a:	4631      	mov	r1, r6
    ca4c:	4628      	mov	r0, r5
    ca4e:	f7ff f8b9 	bl	bbc4 <bt_mesh_adv_send>
    ca52:	e022      	b.n	ca9a <bt_mesh_net_send+0x122>
	    bt_mesh_has_addr(tx->ctx->addr)) {
    ca54:	6863      	ldr	r3, [r4, #4]
    ca56:	8898      	ldrh	r0, [r3, #4]
    ca58:	f003 fdd6 	bl	10608 <bt_mesh_has_addr>
	if (bt_mesh_fixed_group_match(tx->ctx->addr) ||
    ca5c:	2800      	cmp	r0, #0
    ca5e:	d1b2      	bne.n	c9c6 <bt_mesh_net_send+0x4e>
	if (tx->ctx->send_ttl == 1U) {
    ca60:	6863      	ldr	r3, [r4, #4]
    ca62:	7adb      	ldrb	r3, [r3, #11]
    ca64:	2b01      	cmp	r3, #1
    ca66:	d1cf      	bne.n	ca08 <bt_mesh_net_send+0x90>
		err = -EINVAL;
    ca68:	f06f 0815 	mvn.w	r8, #21
    ca6c:	e015      	b.n	ca9a <bt_mesh_net_send+0x122>
	LOOPBACK_BUF_SUB(buf) = tx->sub;
    ca6e:	6823      	ldr	r3, [r4, #0]
    ca70:	6143      	str	r3, [r0, #20]
	return net_buf_simple_add_mem(&buf->b, mem, len);
    ca72:	9a00      	ldr	r2, [sp, #0]
    ca74:	3008      	adds	r0, #8
    ca76:	f01b fbed 	bl	28254 <net_buf_simple_add_mem>
	net_buf_slist_put(&bt_mesh.local_queue, buf);
    ca7a:	4641      	mov	r1, r8
    ca7c:	4817      	ldr	r0, [pc, #92]	; (cadc <bt_mesh_net_send+0x164>)
    ca7e:	f01b fb4e 	bl	2811e <net_buf_slist_put>
	k_work_submit(&bt_mesh.local_work);
    ca82:	4817      	ldr	r0, [pc, #92]	; (cae0 <bt_mesh_net_send+0x168>)
    ca84:	f013 fc32 	bl	202ec <k_work_submit>
	return 0;
    ca88:	f04f 0800 	mov.w	r8, #0
    ca8c:	e7b4      	b.n	c9f8 <bt_mesh_net_send+0x80>
			if (!err) {
    ca8e:	f1b8 0f00 	cmp.w	r8, #0
    ca92:	d102      	bne.n	ca9a <bt_mesh_net_send+0x122>
void bt_mesh_net_settings_commit(void);

static inline void send_cb_finalize(const struct bt_mesh_send_cb *cb,
				    void *cb_data)
{
	if (!cb) {
    ca94:	b946      	cbnz	r6, caa8 <bt_mesh_net_send+0x130>
	return 0;
    ca96:	f04f 0800 	mov.w	r8, #0
	net_buf_unref(buf);
    ca9a:	4628      	mov	r0, r5
    ca9c:	f011 f962 	bl	1dd64 <net_buf_unref>
}
    caa0:	4640      	mov	r0, r8
    caa2:	b003      	add	sp, #12
    caa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return;
	}

	if (cb->start) {
    caa8:	6833      	ldr	r3, [r6, #0]
    caaa:	b11b      	cbz	r3, cab4 <bt_mesh_net_send+0x13c>
		cb->start(0, 0, cb_data);
    caac:	463a      	mov	r2, r7
    caae:	4641      	mov	r1, r8
    cab0:	4640      	mov	r0, r8
    cab2:	4798      	blx	r3
	}

	if (cb->end) {
    cab4:	6873      	ldr	r3, [r6, #4]
    cab6:	2b00      	cmp	r3, #0
    cab8:	d0ed      	beq.n	ca96 <bt_mesh_net_send+0x11e>
		cb->end(0, cb_data);
    caba:	4639      	mov	r1, r7
    cabc:	2000      	movs	r0, #0
    cabe:	4798      	blx	r3
    cac0:	e7eb      	b.n	ca9a <bt_mesh_net_send+0x122>
    cac2:	4680      	mov	r8, r0
    cac4:	e7e9      	b.n	ca9a <bt_mesh_net_send+0x122>
    cac6:	bf00      	nop
    cac8:	20001278 	.word	0x20001278
    cacc:	00029870 	.word	0x00029870
    cad0:	000299f0 	.word	0x000299f0
    cad4:	0002caef 	.word	0x0002caef
    cad8:	200018d0 	.word	0x200018d0
    cadc:	200018ec 	.word	0x200018ec
    cae0:	200018dc 	.word	0x200018dc

0000cae4 <bt_mesh_net_loopback_clear>:
{
    cae4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	list->head = NULL;
    cae6:	2300      	movs	r3, #0
	list->tail = NULL;
    cae8:	e9cd 3300 	strd	r3, r3, [sp]
	while ((buf = net_buf_slist_get(&bt_mesh.local_queue))) {
    caec:	4d0e      	ldr	r5, [pc, #56]	; (cb28 <bt_mesh_net_loopback_clear+0x44>)
{
    caee:	4604      	mov	r4, r0
		if (net_idx == BT_MESH_KEY_ANY || net_idx == sub->net_idx) {
    caf0:	f64f 76ff 	movw	r6, #65535	; 0xffff
	while ((buf = net_buf_slist_get(&bt_mesh.local_queue))) {
    caf4:	480c      	ldr	r0, [pc, #48]	; (cb28 <bt_mesh_net_loopback_clear+0x44>)
    caf6:	f01b fb2f 	bl	28158 <net_buf_slist_get>
    cafa:	b930      	cbnz	r0, cb0a <bt_mesh_net_loopback_clear+0x26>
	bt_mesh.local_queue = new_list;
    cafc:	ab02      	add	r3, sp, #8
    cafe:	e913 0003 	ldmdb	r3, {r0, r1}
    cb02:	e885 0003 	stmia.w	r5, {r0, r1}
}
    cb06:	b002      	add	sp, #8
    cb08:	bd70      	pop	{r4, r5, r6, pc}
		if (net_idx == BT_MESH_KEY_ANY || net_idx == sub->net_idx) {
    cb0a:	42b4      	cmp	r4, r6
    cb0c:	d003      	beq.n	cb16 <bt_mesh_net_loopback_clear+0x32>
    cb0e:	6943      	ldr	r3, [r0, #20]
    cb10:	8b9b      	ldrh	r3, [r3, #28]
    cb12:	42a3      	cmp	r3, r4
    cb14:	d102      	bne.n	cb1c <bt_mesh_net_loopback_clear+0x38>
			net_buf_unref(buf);
    cb16:	f011 f925 	bl	1dd64 <net_buf_unref>
    cb1a:	e7eb      	b.n	caf4 <bt_mesh_net_loopback_clear+0x10>
			net_buf_slist_put(&new_list, buf);
    cb1c:	4601      	mov	r1, r0
    cb1e:	4668      	mov	r0, sp
    cb20:	f01b fafd 	bl	2811e <net_buf_slist_put>
    cb24:	e7e6      	b.n	caf4 <bt_mesh_net_loopback_clear+0x10>
    cb26:	bf00      	nop
    cb28:	200018ec 	.word	0x200018ec

0000cb2c <bt_mesh_net_decode>:
{
    cb2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cb30:	460f      	mov	r7, r1
	if (in->len < BT_MESH_NET_MIN_PDU_LEN) {
    cb32:	8881      	ldrh	r1, [r0, #4]
    cb34:	2911      	cmp	r1, #17
{
    cb36:	4606      	mov	r6, r0
    cb38:	4614      	mov	r4, r2
    cb3a:	4698      	mov	r8, r3
	if (in->len < BT_MESH_NET_MIN_PDU_LEN) {
    cb3c:	d819      	bhi.n	cb72 <bt_mesh_net_decode+0x46>
    cb3e:	4b55      	ldr	r3, [pc, #340]	; (cc94 <bt_mesh_net_decode+0x168>)
    cb40:	4c55      	ldr	r4, [pc, #340]	; (cc98 <bt_mesh_net_decode+0x16c>)
		BT_WARN("Dropping too short mesh packet (len %u)", in->len);
    cb42:	4856      	ldr	r0, [pc, #344]	; (cc9c <bt_mesh_net_decode+0x170>)
    cb44:	1ae4      	subs	r4, r4, r3
    cb46:	08e4      	lsrs	r4, r4, #3
    cb48:	01a4      	lsls	r4, r4, #6
    cb4a:	f044 0402 	orr.w	r4, r4, #2
    cb4e:	4622      	mov	r2, r4
    cb50:	f014 ffd8 	bl	21b04 <log_1>
		BT_WARN("%s", bt_hex(in->data, in->len));
    cb54:	88b1      	ldrh	r1, [r6, #4]
    cb56:	6830      	ldr	r0, [r6, #0]
    cb58:	f7f8 f90a 	bl	4d70 <bt_hex_real>
    cb5c:	f7f5 ffbc 	bl	2ad8 <z_log_strdup>
    cb60:	4601      	mov	r1, r0
    cb62:	484f      	ldr	r0, [pc, #316]	; (cca0 <bt_mesh_net_decode+0x174>)
    cb64:	4622      	mov	r2, r4
		BT_WARN("Dropping too long mesh packet (len %u)", in->len);
    cb66:	f014 ffcd 	bl	21b04 <log_1>
		return -EINVAL;
    cb6a:	f06f 0015 	mvn.w	r0, #21
}
    cb6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (in->len > BT_MESH_NET_MAX_PDU_LEN) {
    cb72:	291d      	cmp	r1, #29
    cb74:	d908      	bls.n	cb88 <bt_mesh_net_decode+0x5c>
    cb76:	4a48      	ldr	r2, [pc, #288]	; (cc98 <bt_mesh_net_decode+0x16c>)
    cb78:	4b46      	ldr	r3, [pc, #280]	; (cc94 <bt_mesh_net_decode+0x168>)
		BT_WARN("Dropping too long mesh packet (len %u)", in->len);
    cb7a:	484a      	ldr	r0, [pc, #296]	; (cca4 <bt_mesh_net_decode+0x178>)
    cb7c:	1ad2      	subs	r2, r2, r3
    cb7e:	08d2      	lsrs	r2, r2, #3
    cb80:	0192      	lsls	r2, r2, #6
    cb82:	f042 0202 	orr.w	r2, r2, #2
    cb86:	e7ee      	b.n	cb66 <bt_mesh_net_decode+0x3a>
	if (net_if == BT_MESH_NET_IF_ADV && check_dup(in)) {
    cb88:	bb97      	cbnz	r7, cbf0 <bt_mesh_net_decode+0xc4>
	return buf->data + buf->len;
    cb8a:	6805      	ldr	r5, [r0, #0]
    cb8c:	440d      	add	r5, r1
	return ((uint16_t)src[0] << 8) | src[1];
    cb8e:	f815 1c07 	ldrb.w	r1, [r5, #-7]
    cb92:	f815 3c08 	ldrb.w	r3, [r5, #-8]
    cb96:	f815 2c06 	ldrb.w	r2, [r5, #-6]
    cb9a:	f815 0c02 	ldrb.w	r0, [r5, #-2]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    cb9e:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
	return ((uint16_t)src[0] << 8) | src[1];
    cba2:	f815 1c05 	ldrb.w	r1, [r5, #-5]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    cba6:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    cbaa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
	return ((uint16_t)src[0] << 8) | src[1];
    cbae:	f815 2c04 	ldrb.w	r2, [r5, #-4]
    cbb2:	f815 3c03 	ldrb.w	r3, [r5, #-3]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    cbb6:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	return ((uint16_t)src[0] << 8) | src[1];
    cbba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    cbbe:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    cbc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	val = sys_get_be32(tail - 4) ^ sys_get_be32(tail - 8);
    cbc6:	4059      	eors	r1, r3
	for (i = 0; i < ARRAY_SIZE(dup_cache); i++) {
    cbc8:	4b37      	ldr	r3, [pc, #220]	; (cca8 <bt_mesh_net_decode+0x17c>)
    cbca:	463a      	mov	r2, r7
    cbcc:	461d      	mov	r5, r3
		if (dup_cache[i] == val) {
    cbce:	f853 0b04 	ldr.w	r0, [r3], #4
    cbd2:	4281      	cmp	r1, r0
    cbd4:	d0c9      	beq.n	cb6a <bt_mesh_net_decode+0x3e>
	for (i = 0; i < ARRAY_SIZE(dup_cache); i++) {
    cbd6:	3201      	adds	r2, #1
    cbd8:	2a0a      	cmp	r2, #10
    cbda:	d1f8      	bne.n	cbce <bt_mesh_net_decode+0xa2>
	dup_cache[dup_cache_next++] = val;
    cbdc:	4833      	ldr	r0, [pc, #204]	; (ccac <bt_mesh_net_decode+0x180>)
    cbde:	6803      	ldr	r3, [r0, #0]
    cbe0:	f845 1023 	str.w	r1, [r5, r3, lsl #2]
    cbe4:	3301      	adds	r3, #1
	dup_cache_next %= ARRAY_SIZE(dup_cache);
    cbe6:	fb93 f1f2 	sdiv	r1, r3, r2
    cbea:	fb02 3311 	mls	r3, r2, r1, r3
    cbee:	6003      	str	r3, [r0, #0]
	rx->net_if = net_if;
    cbf0:	7d23      	ldrb	r3, [r4, #20]
    cbf2:	f367 1305 	bfi	r3, r7, #4, #2
    cbf6:	7523      	strb	r3, [r4, #20]
	if (!bt_mesh_net_cred_find(rx, in, out, net_decrypt)) {
    cbf8:	4642      	mov	r2, r8
    cbfa:	4b2d      	ldr	r3, [pc, #180]	; (ccb0 <bt_mesh_net_decode+0x184>)
    cbfc:	4631      	mov	r1, r6
    cbfe:	4620      	mov	r0, r4
    cc00:	f000 fd00 	bl	d604 <bt_mesh_net_cred_find>
    cc04:	2800      	cmp	r0, #0
    cc06:	d041      	beq.n	cc8c <bt_mesh_net_decode+0x160>
	rx->ctx.recv_ttl = TTL(out->data);
    cc08:	f8d8 1000 	ldr.w	r1, [r8]
	rx->ctl = CTL(out->data);
    cc0c:	7d22      	ldrb	r2, [r4, #20]
	rx->ctx.app_idx = BT_MESH_KEY_UNUSED;
    cc0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    cc12:	80e3      	strh	r3, [r4, #6]
	rx->ctx.recv_ttl = TTL(out->data);
    cc14:	784b      	ldrb	r3, [r1, #1]
    cc16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    cc1a:	7363      	strb	r3, [r4, #13]
	if (rx->ctx.recv_ttl == 0U) {
    cc1c:	3b00      	subs	r3, #0
    cc1e:	bf18      	it	ne
    cc20:	2301      	movne	r3, #1
    cc22:	425b      	negs	r3, r3
    cc24:	73e3      	strb	r3, [r4, #15]
	rx->ctl = CTL(out->data);
    cc26:	784b      	ldrb	r3, [r1, #1]
    cc28:	09db      	lsrs	r3, r3, #7
    cc2a:	f363 02c3 	bfi	r2, r3, #3, #1
    cc2e:	7522      	strb	r2, [r4, #20]
	rx->seq = SEQ(out->data);
    cc30:	1c88      	adds	r0, r1, #2
    cc32:	f018 fea6 	bl	25982 <sys_get_be24>
    cc36:	6120      	str	r0, [r4, #16]
	return ((uint16_t)src[0] << 8) | src[1];
    cc38:	f8b1 3007 	ldrh.w	r3, [r1, #7]
	if (net_if != BT_MESH_NET_IF_PROXY_CFG &&
    cc3c:	2f03      	cmp	r7, #3
    cc3e:	ba5b      	rev16	r3, r3
    cc40:	b29a      	uxth	r2, r3
	rx->ctx.recv_dst = DST(out->data);
    cc42:	8163      	strh	r3, [r4, #10]
	if (net_if != BT_MESH_NET_IF_PROXY_CFG &&
    cc44:	d00d      	beq.n	cc62 <bt_mesh_net_decode+0x136>
    cc46:	b962      	cbnz	r2, cc62 <bt_mesh_net_decode+0x136>
    cc48:	4b12      	ldr	r3, [pc, #72]	; (cc94 <bt_mesh_net_decode+0x168>)
    cc4a:	4913      	ldr	r1, [pc, #76]	; (cc98 <bt_mesh_net_decode+0x16c>)
		BT_ERR("Destination address is unassigned; dropping packet");
    cc4c:	4819      	ldr	r0, [pc, #100]	; (ccb4 <bt_mesh_net_decode+0x188>)
    cc4e:	1ac9      	subs	r1, r1, r3
    cc50:	08c9      	lsrs	r1, r1, #3
    cc52:	0189      	lsls	r1, r1, #6
    cc54:	f041 0101 	orr.w	r1, r1, #1
    cc58:	f014 ff47 	bl	21aea <log_0>
		return -EBADMSG;
    cc5c:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    cc60:	e785      	b.n	cb6e <bt_mesh_net_decode+0x42>
	msg_cache[rx->msg_cache_idx].src = rx->ctx.addr;
    cc62:	8922      	ldrh	r2, [r4, #8]
	rx->msg_cache_idx = msg_cache_next++;
    cc64:	4914      	ldr	r1, [pc, #80]	; (ccb8 <bt_mesh_net_decode+0x18c>)
	msg_cache[rx->msg_cache_idx].src = rx->ctx.addr;
    cc66:	f3c2 020e 	ubfx	r2, r2, #0, #15
	rx->msg_cache_idx = msg_cache_next++;
    cc6a:	880b      	ldrh	r3, [r1, #0]
    cc6c:	82e3      	strh	r3, [r4, #22]
	msg_cache[rx->msg_cache_idx].src = rx->ctx.addr;
    cc6e:	ea42 30c0 	orr.w	r0, r2, r0, lsl #15
    cc72:	4a12      	ldr	r2, [pc, #72]	; (ccbc <bt_mesh_net_decode+0x190>)
    cc74:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	rx->msg_cache_idx = msg_cache_next++;
    cc78:	3301      	adds	r3, #1
	msg_cache_next %= ARRAY_SIZE(msg_cache);
    cc7a:	b29b      	uxth	r3, r3
    cc7c:	220a      	movs	r2, #10
    cc7e:	fbb3 f0f2 	udiv	r0, r3, r2
    cc82:	fb02 3310 	mls	r3, r2, r0, r3
    cc86:	800b      	strh	r3, [r1, #0]
	return 0;
    cc88:	2000      	movs	r0, #0
}
    cc8a:	e770      	b.n	cb6e <bt_mesh_net_decode+0x42>
		return -ENOENT;
    cc8c:	f06f 0001 	mvn.w	r0, #1
    cc90:	e76d      	b.n	cb6e <bt_mesh_net_decode+0x42>
    cc92:	bf00      	nop
    cc94:	00029870 	.word	0x00029870
    cc98:	000299f0 	.word	0x000299f0
    cc9c:	0002cb0b 	.word	0x0002cb0b
    cca0:	0002e7c5 	.word	0x0002e7c5
    cca4:	0002cb33 	.word	0x0002cb33
    cca8:	200022dc 	.word	0x200022dc
    ccac:	20002304 	.word	0x20002304
    ccb0:	0000c26d 	.word	0x0000c26d
    ccb4:	0002cb5a 	.word	0x0002cb5a
    ccb8:	200036de 	.word	0x200036de
    ccbc:	20002308 	.word	0x20002308

0000ccc0 <bt_mesh_net_recv>:
{
    ccc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    ccc2:	b093      	sub	sp, #76	; 0x4c
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_NET_MAX_PDU_LEN);
    ccc4:	ab0a      	add	r3, sp, #40	; 0x28
{
    ccc6:	4617      	mov	r7, r2
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_NET_MAX_PDU_LEN);
    ccc8:	f44f 12e8 	mov.w	r2, #1900544	; 0x1d0000
    cccc:	e9cd 2302 	strd	r2, r3, [sp, #8]
{
    ccd0:	460c      	mov	r4, r1
    ccd2:	4606      	mov	r6, r0
	struct bt_mesh_net_rx rx = { .ctx.recv_rssi = rssi };
    ccd4:	2218      	movs	r2, #24
    ccd6:	2100      	movs	r1, #0
    ccd8:	a804      	add	r0, sp, #16
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_NET_MAX_PDU_LEN);
    ccda:	9301      	str	r3, [sp, #4]
	struct bt_mesh_net_rx rx = { .ctx.recv_rssi = rssi };
    ccdc:	f017 f86f 	bl	23dbe <memset>
    cce0:	f88d 401c 	strb.w	r4, [sp, #28]
	if (!bt_mesh_is_provisioned()) {
    cce4:	f7fe fc62 	bl	b5ac <bt_mesh_is_provisioned>
    cce8:	2800      	cmp	r0, #0
    ccea:	d07c      	beq.n	cde6 <bt_mesh_net_recv+0x126>
	if (bt_mesh_net_decode(data, net_if, &rx, &buf)) {
    ccec:	ab01      	add	r3, sp, #4
    ccee:	aa04      	add	r2, sp, #16
    ccf0:	4639      	mov	r1, r7
    ccf2:	4630      	mov	r0, r6
    ccf4:	f7ff ff1a 	bl	cb2c <bt_mesh_net_decode>
    ccf8:	2800      	cmp	r0, #0
    ccfa:	d174      	bne.n	cde6 <bt_mesh_net_recv+0x126>
	state->offset = net_buf_simple_headroom(buf);
    ccfc:	a801      	add	r0, sp, #4
    ccfe:	f01b fb54 	bl	283aa <net_buf_simple_headroom>
    cd02:	4604      	mov	r4, r0
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    cd04:	f8bd 001a 	ldrh.w	r0, [sp, #26]
	state->len = buf->len;
    cd08:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    cd0c:	f018 fdda 	bl	258c4 <bt_mesh_fixed_group_match>
    cd10:	bb20      	cbnz	r0, cd5c <bt_mesh_net_recv+0x9c>
			  bt_mesh_has_addr(rx.ctx.recv_dst));
    cd12:	f8bd 001a 	ldrh.w	r0, [sp, #26]
    cd16:	f003 fc77 	bl	10608 <bt_mesh_has_addr>
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    cd1a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    cd1e:	2f02      	cmp	r7, #2
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    cd20:	f360 1386 	bfi	r3, r0, #6, #1
    cd24:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    cd28:	d11a      	bne.n	cd60 <bt_mesh_net_recv+0xa0>
		bt_mesh_proxy_addr_add(data, rx.ctx.addr);
    cd2a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
    cd2e:	4630      	mov	r0, r6
    cd30:	f019 ff3a 	bl	26ba8 <bt_mesh_proxy_addr_add>
		if (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_DISABLED &&
    cd34:	f7fe fd5e 	bl	b7f4 <bt_mesh_gatt_proxy_get>
		    !rx.local_match) {
    cd38:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    cd3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_DISABLED &&
    cd40:	4318      	orrs	r0, r3
    cd42:	b2c0      	uxtb	r0, r0
    cd44:	b960      	cbnz	r0, cd60 <bt_mesh_net_recv+0xa0>
    cd46:	496b      	ldr	r1, [pc, #428]	; (cef4 <bt_mesh_net_recv+0x234>)
    cd48:	4b6b      	ldr	r3, [pc, #428]	; (cef8 <bt_mesh_net_recv+0x238>)
			BT_INFO("Proxy is disabled; ignoring message");
    cd4a:	486c      	ldr	r0, [pc, #432]	; (cefc <bt_mesh_net_recv+0x23c>)
    cd4c:	1ac9      	subs	r1, r1, r3
    cd4e:	08c9      	lsrs	r1, r1, #3
    cd50:	0189      	lsls	r1, r1, #6
    cd52:	f041 0103 	orr.w	r1, r1, #3
		BT_ERR("Out of relay buffers");
    cd56:	f014 fec8 	bl	21aea <log_0>
		return;
    cd5a:	e044      	b.n	cde6 <bt_mesh_net_recv+0x126>
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    cd5c:	2001      	movs	r0, #1
    cd5e:	e7dc      	b.n	cd1a <bt_mesh_net_recv+0x5a>
	if (bt_mesh_trans_recv(&buf, &rx) == -EAGAIN) {
    cd60:	a904      	add	r1, sp, #16
    cd62:	a801      	add	r0, sp, #4
    cd64:	f001 fe72 	bl	ea4c <bt_mesh_trans_recv>
    cd68:	300b      	adds	r0, #11
    cd6a:	d114      	bne.n	cd96 <bt_mesh_net_recv+0xd6>
    cd6c:	4b62      	ldr	r3, [pc, #392]	; (cef8 <bt_mesh_net_recv+0x238>)
    cd6e:	4961      	ldr	r1, [pc, #388]	; (cef4 <bt_mesh_net_recv+0x234>)
		BT_WARN("Removing rejected message from Network Message Cache");
    cd70:	4863      	ldr	r0, [pc, #396]	; (cf00 <bt_mesh_net_recv+0x240>)
    cd72:	1ac9      	subs	r1, r1, r3
    cd74:	08c9      	lsrs	r1, r1, #3
    cd76:	0189      	lsls	r1, r1, #6
    cd78:	f041 0102 	orr.w	r1, r1, #2
    cd7c:	f014 feb5 	bl	21aea <log_0>
		msg_cache[rx.msg_cache_idx].src = BT_MESH_ADDR_UNASSIGNED;
    cd80:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
    cd84:	4a5f      	ldr	r2, [pc, #380]	; (cf04 <bt_mesh_net_recv+0x244>)
    cd86:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
    cd8a:	f36f 010e 	bfc	r1, #0, #15
    cd8e:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		msg_cache_next = rx.msg_cache_idx;
    cd92:	4a5d      	ldr	r2, [pc, #372]	; (cf08 <bt_mesh_net_recv+0x248>)
    cd94:	8013      	strh	r3, [r2, #0]
	if (!BT_MESH_ADDR_IS_UNICAST(rx.ctx.recv_dst) ||
    cd96:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
    cd9a:	2b00      	cmp	r3, #0
    cd9c:	dd04      	ble.n	cda8 <bt_mesh_net_recv+0xe8>
	    (!rx.local_match && !rx.friend_match)) {
    cd9e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	if (!BT_MESH_ADDR_IS_UNICAST(rx.ctx.recv_dst) ||
    cda2:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    cda6:	d11e      	bne.n	cde6 <bt_mesh_net_recv+0x126>
	buf->data = buf->__buf + state->offset;
    cda8:	9803      	ldr	r0, [sp, #12]
	if (rx->ctx.recv_ttl <= 1U) {
    cdaa:	f89d 301d 	ldrb.w	r3, [sp, #29]
	buf->len = state->len;
    cdae:	f8ad 5008 	strh.w	r5, [sp, #8]
	buf->data = buf->__buf + state->offset;
    cdb2:	fa10 f484 	uxtah	r4, r0, r4
    cdb6:	2b01      	cmp	r3, #1
    cdb8:	9401      	str	r4, [sp, #4]
    cdba:	d914      	bls.n	cde6 <bt_mesh_net_recv+0x126>
	if (rx->net_if == BT_MESH_NET_IF_ADV &&
    cdbc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    cdc0:	f013 0f34 	tst.w	r3, #52	; 0x34
    cdc4:	d108      	bne.n	cdd8 <bt_mesh_net_recv+0x118>
	    bt_mesh_relay_get() != BT_MESH_RELAY_ENABLED &&
    cdc6:	f7fe fdc7 	bl	b958 <bt_mesh_relay_get>
	    !rx->friend_cred &&
    cdca:	2801      	cmp	r0, #1
    cdcc:	d107      	bne.n	cdde <bt_mesh_net_recv+0x11e>
	if (rx->net_if == BT_MESH_NET_IF_ADV && !rx->friend_cred) {
    cdce:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    cdd2:	f013 0f34 	tst.w	r3, #52	; 0x34
    cdd6:	d008      	beq.n	cdea <bt_mesh_net_recv+0x12a>
		transmit = bt_mesh_net_transmit_get();
    cdd8:	f7fe fd50 	bl	b87c <bt_mesh_net_transmit_get>
    cddc:	e007      	b.n	cdee <bt_mesh_net_recv+0x12e>
	    bt_mesh_gatt_proxy_get() != BT_MESH_GATT_PROXY_ENABLED) {
    cdde:	f7fe fd09 	bl	b7f4 <bt_mesh_gatt_proxy_get>
	    bt_mesh_relay_get() != BT_MESH_RELAY_ENABLED &&
    cde2:	2801      	cmp	r0, #1
    cde4:	d0f3      	beq.n	cdce <bt_mesh_net_recv+0x10e>
}
    cde6:	b013      	add	sp, #76	; 0x4c
    cde8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		transmit = bt_mesh_relay_retransmit_get();
    cdea:	f7fe fdbf 	bl	b96c <bt_mesh_relay_retransmit_get>
		transmit = bt_mesh_net_transmit_get();
    cdee:	4601      	mov	r1, r0
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, transmit, K_NO_WAIT);
    cdf0:	2200      	movs	r2, #0
    cdf2:	2300      	movs	r3, #0
    cdf4:	2001      	movs	r0, #1
    cdf6:	f7fe fed5 	bl	bba4 <bt_mesh_adv_create>
	if (!buf) {
    cdfa:	4604      	mov	r4, r0
    cdfc:	b940      	cbnz	r0, ce10 <bt_mesh_net_recv+0x150>
    cdfe:	493d      	ldr	r1, [pc, #244]	; (cef4 <bt_mesh_net_recv+0x234>)
    ce00:	4b3d      	ldr	r3, [pc, #244]	; (cef8 <bt_mesh_net_recv+0x238>)
		BT_ERR("Out of relay buffers");
    ce02:	4842      	ldr	r0, [pc, #264]	; (cf0c <bt_mesh_net_recv+0x24c>)
    ce04:	1ac9      	subs	r1, r1, r3
    ce06:	08c9      	lsrs	r1, r1, #3
    ce08:	0189      	lsls	r1, r1, #6
    ce0a:	f041 0101 	orr.w	r1, r1, #1
    ce0e:	e7a2      	b.n	cd56 <bt_mesh_net_recv+0x96>
	sbuf->data[1] &= 0x80;
    ce10:	9a01      	ldr	r2, [sp, #4]
    ce12:	7853      	ldrb	r3, [r2, #1]
    ce14:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    ce18:	7053      	strb	r3, [r2, #1]
	sbuf->data[1] |= rx->ctx.recv_ttl - 1U;
    ce1a:	9a01      	ldr	r2, [sp, #4]
    ce1c:	f89d 301d 	ldrb.w	r3, [sp, #29]
    ce20:	7851      	ldrb	r1, [r2, #1]
    ce22:	3b01      	subs	r3, #1
    ce24:	430b      	orrs	r3, r1
    ce26:	7053      	strb	r3, [r2, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
    ce28:	f100 0508 	add.w	r5, r0, #8
    ce2c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    ce30:	9901      	ldr	r1, [sp, #4]
    ce32:	4628      	mov	r0, r5
    ce34:	f01b fa0e 	bl	28254 <net_buf_simple_add_mem>
	cred = &rx->sub->keys[SUBNET_KEY_TX_IDX(rx->sub)].msg;
    ce38:	9a04      	ldr	r2, [sp, #16]
	if (rx->friend_cred) {
    ce3a:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
	cred = &rx->sub->keys[SUBNET_KEY_TX_IDX(rx->sub)].msg;
    ce3e:	7f93      	ldrb	r3, [r2, #30]
    ce40:	1e99      	subs	r1, r3, #2
    ce42:	424b      	negs	r3, r1
    ce44:	414b      	adcs	r3, r1
    ce46:	215a      	movs	r1, #90	; 0x5a
    ce48:	434b      	muls	r3, r1
    ce4a:	f103 013d 	add.w	r1, r3, #61	; 0x3d
	if (rx->friend_cred) {
    ce4e:	0740      	lsls	r0, r0, #29
	cred = &rx->sub->keys[SUBNET_KEY_TX_IDX(rx->sub)].msg;
    ce50:	4411      	add	r1, r2
	if (rx->friend_cred) {
    ce52:	d50b      	bpl.n	ce6c <bt_mesh_net_recv+0x1ac>
		buf->data[0] &= 0x80; /* Clear everything except IVI */
    ce54:	68a6      	ldr	r6, [r4, #8]
    ce56:	7830      	ldrb	r0, [r6, #0]
    ce58:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
    ce5c:	7030      	strb	r0, [r6, #0]
		buf->data[0] |= cred->nid;
    ce5e:	68a0      	ldr	r0, [r4, #8]
    ce60:	4413      	add	r3, r2
    ce62:	7802      	ldrb	r2, [r0, #0]
    ce64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    ce68:	4313      	orrs	r3, r2
    ce6a:	7003      	strb	r3, [r0, #0]
	if (net_encrypt(&buf->b, cred, BT_MESH_NET_IVI_RX(rx), false)) {
    ce6c:	4b28      	ldr	r3, [pc, #160]	; (cf10 <bt_mesh_net_recv+0x250>)
    ce6e:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
    ce72:	6818      	ldr	r0, [r3, #0]
    ce74:	f002 0201 	and.w	r2, r2, #1
    ce78:	1a82      	subs	r2, r0, r2
    ce7a:	2300      	movs	r3, #0
    ce7c:	4628      	mov	r0, r5
    ce7e:	f018 fd88 	bl	25992 <net_encrypt>
    ce82:	b168      	cbz	r0, cea0 <bt_mesh_net_recv+0x1e0>
    ce84:	491b      	ldr	r1, [pc, #108]	; (cef4 <bt_mesh_net_recv+0x234>)
    ce86:	4b1c      	ldr	r3, [pc, #112]	; (cef8 <bt_mesh_net_recv+0x238>)
		BT_ERR("Re-encrypting failed");
    ce88:	4822      	ldr	r0, [pc, #136]	; (cf14 <bt_mesh_net_recv+0x254>)
    ce8a:	1ac9      	subs	r1, r1, r3
    ce8c:	08c9      	lsrs	r1, r1, #3
    ce8e:	0189      	lsls	r1, r1, #6
    ce90:	f041 0101 	orr.w	r1, r1, #1
    ce94:	f014 fe29 	bl	21aea <log_0>
	net_buf_unref(buf);
    ce98:	4620      	mov	r0, r4
    ce9a:	f010 ff63 	bl	1dd64 <net_buf_unref>
    ce9e:	e7a2      	b.n	cde6 <bt_mesh_net_recv+0x126>
	    (rx->friend_cred ||
    cea0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    cea4:	075a      	lsls	r2, r3, #29
    cea6:	d512      	bpl.n	cece <bt_mesh_net_recv+0x20e>
		bt_mesh_proxy_relay(buf, rx->ctx.recv_dst);
    cea8:	f8bd 101a 	ldrh.w	r1, [sp, #26]
    ceac:	4620      	mov	r0, r4
    ceae:	f008 fbed 	bl	1568c <bt_mesh_proxy_relay>
	if (relay_to_adv(rx->net_if) || rx->friend_cred) {
    ceb2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	switch (net_if) {
    ceb6:	f013 0f30 	tst.w	r3, #48	; 0x30
	if (relay_to_adv(rx->net_if) || rx->friend_cred) {
    ceba:	f3c3 1201 	ubfx	r2, r3, #4, #2
	switch (net_if) {
    cebe:	d00b      	beq.n	ced8 <bt_mesh_net_recv+0x218>
    cec0:	2a02      	cmp	r2, #2
    cec2:	d013      	beq.n	ceec <bt_mesh_net_recv+0x22c>
	if (relay_to_adv(rx->net_if) || rx->friend_cred) {
    cec4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    cec8:	075b      	lsls	r3, r3, #29
    ceca:	d409      	bmi.n	cee0 <bt_mesh_net_recv+0x220>
done:
    cecc:	e7e4      	b.n	ce98 <bt_mesh_net_recv+0x1d8>
	     bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED)) {
    cece:	f7fe fc91 	bl	b7f4 <bt_mesh_gatt_proxy_get>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    ced2:	2801      	cmp	r0, #1
    ced4:	d1ed      	bne.n	ceb2 <bt_mesh_net_recv+0x1f2>
    ced6:	e7e7      	b.n	cea8 <bt_mesh_net_recv+0x1e8>
		return (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED);
    ced8:	f7fe fd3e 	bl	b958 <bt_mesh_relay_get>
	if (relay_to_adv(rx->net_if) || rx->friend_cred) {
    cedc:	2801      	cmp	r0, #1
    cede:	d1f1      	bne.n	cec4 <bt_mesh_net_recv+0x204>
		bt_mesh_adv_send(buf, NULL, NULL);
    cee0:	2200      	movs	r2, #0
    cee2:	4611      	mov	r1, r2
    cee4:	4620      	mov	r0, r4
    cee6:	f7fe fe6d 	bl	bbc4 <bt_mesh_adv_send>
    ceea:	e7d5      	b.n	ce98 <bt_mesh_net_recv+0x1d8>
		return (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
    ceec:	f7fe fc82 	bl	b7f4 <bt_mesh_gatt_proxy_get>
    cef0:	e7f4      	b.n	cedc <bt_mesh_net_recv+0x21c>
    cef2:	bf00      	nop
    cef4:	000299f0 	.word	0x000299f0
    cef8:	00029870 	.word	0x00029870
    cefc:	0002cb8d 	.word	0x0002cb8d
    cf00:	0002cbb1 	.word	0x0002cbb1
    cf04:	20002308 	.word	0x20002308
    cf08:	200036de 	.word	0x200036de
    cf0c:	0002cbe6 	.word	0x0002cbe6
    cf10:	200018d0 	.word	0x200018d0
    cf14:	0002cbfb 	.word	0x0002cbfb

0000cf18 <bt_mesh_net_init>:
{
    cf18:	b510      	push	{r4, lr}
	k_work_init_delayable(&bt_mesh.ivu_timer, ivu_refresh);
    cf1a:	4c06      	ldr	r4, [pc, #24]	; (cf34 <bt_mesh_net_init+0x1c>)
    cf1c:	4906      	ldr	r1, [pc, #24]	; (cf38 <bt_mesh_net_init+0x20>)
    cf1e:	f104 0028 	add.w	r0, r4, #40	; 0x28
    cf22:	f01b ff3e 	bl	28da2 <k_work_init_delayable>
	k_work_init(&bt_mesh.local_work, bt_mesh_net_local);
    cf26:	f104 000c 	add.w	r0, r4, #12
    cf2a:	4904      	ldr	r1, [pc, #16]	; (cf3c <bt_mesh_net_init+0x24>)
}
    cf2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init(&bt_mesh.local_work, bt_mesh_net_local);
    cf30:	f01b bf11 	b.w	28d56 <k_work_init>
    cf34:	200018d0 	.word	0x200018d0
    cf38:	0000c7bd 	.word	0x0000c7bd
    cf3c:	0000c35d 	.word	0x0000c35d

0000cf40 <bt_mesh_net_pending_iv_store>:
		BT_DBG("Stored IV value");
	}
}

void bt_mesh_net_pending_iv_store(void)
{
    cf40:	b507      	push	{r0, r1, r2, lr}
    cf42:	f7ff fad1 	bl	c4e8 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    cf46:	07c3      	lsls	r3, r0, #31
    cf48:	d51f      	bpl.n	cf8a <bt_mesh_net_pending_iv_store+0x4a>
	iv.iv_index = bt_mesh.iv_index;
    cf4a:	4a19      	ldr	r2, [pc, #100]	; (cfb0 <bt_mesh_net_pending_iv_store+0x70>)
    cf4c:	6813      	ldr	r3, [r2, #0]
    cf4e:	9300      	str	r3, [sp, #0]
    cf50:	f7ff faca 	bl	c4e8 <atomic_get.constprop.0>
	iv.iv_update = atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS);
    cf54:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    cf58:	f3c0 0080 	ubfx	r0, r0, #2, #1
    cf5c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    cf60:	f88d 0004 	strb.w	r0, [sp, #4]
	err = settings_save_one("bt/mesh/IV", &iv, sizeof(iv));
    cf64:	2205      	movs	r2, #5
    cf66:	4813      	ldr	r0, [pc, #76]	; (cfb4 <bt_mesh_net_pending_iv_store+0x74>)
    cf68:	4669      	mov	r1, sp
    cf6a:	f7f6 fe07 	bl	3b7c <settings_save_one>
	if (err) {
    cf6e:	b148      	cbz	r0, cf84 <bt_mesh_net_pending_iv_store+0x44>
    cf70:	4911      	ldr	r1, [pc, #68]	; (cfb8 <bt_mesh_net_pending_iv_store+0x78>)
    cf72:	4b12      	ldr	r3, [pc, #72]	; (cfbc <bt_mesh_net_pending_iv_store+0x7c>)
		BT_ERR("Failed to store IV value");
    cf74:	4812      	ldr	r0, [pc, #72]	; (cfc0 <bt_mesh_net_pending_iv_store+0x80>)
    cf76:	1ac9      	subs	r1, r1, r3
    cf78:	08c9      	lsrs	r1, r1, #3
    cf7a:	0189      	lsls	r1, r1, #6
    cf7c:	f041 0101 	orr.w	r1, r1, #1
    cf80:	f014 fdb3 	bl	21aea <log_0>
		store_pending_iv();
	} else {
		clear_iv();
	}
}
    cf84:	b003      	add	sp, #12
    cf86:	f85d fb04 	ldr.w	pc, [sp], #4
	err = settings_delete("bt/mesh/IV");
    cf8a:	480a      	ldr	r0, [pc, #40]	; (cfb4 <bt_mesh_net_pending_iv_store+0x74>)
    cf8c:	f015 fbad 	bl	226ea <settings_delete>
	if (err) {
    cf90:	2800      	cmp	r0, #0
    cf92:	d0f7      	beq.n	cf84 <bt_mesh_net_pending_iv_store+0x44>
    cf94:	4b09      	ldr	r3, [pc, #36]	; (cfbc <bt_mesh_net_pending_iv_store+0x7c>)
    cf96:	4908      	ldr	r1, [pc, #32]	; (cfb8 <bt_mesh_net_pending_iv_store+0x78>)
		BT_ERR("Failed to clear IV");
    cf98:	480a      	ldr	r0, [pc, #40]	; (cfc4 <bt_mesh_net_pending_iv_store+0x84>)
    cf9a:	1ac9      	subs	r1, r1, r3
    cf9c:	08c9      	lsrs	r1, r1, #3
    cf9e:	0189      	lsls	r1, r1, #6
    cfa0:	f041 0101 	orr.w	r1, r1, #1
}
    cfa4:	b003      	add	sp, #12
    cfa6:	f85d eb04 	ldr.w	lr, [sp], #4
		BT_ERR("Failed to clear IV");
    cfaa:	f014 bd9e 	b.w	21aea <log_0>
    cfae:	bf00      	nop
    cfb0:	200018d0 	.word	0x200018d0
    cfb4:	0002cc10 	.word	0x0002cc10
    cfb8:	000299f0 	.word	0x000299f0
    cfbc:	00029870 	.word	0x00029870
    cfc0:	0002cc1b 	.word	0x0002cc1b
    cfc4:	0002cc34 	.word	0x0002cc34

0000cfc8 <bt_mesh_net_pending_net_store>:
		BT_DBG("Stored Network value");
	}
}

void bt_mesh_net_pending_net_store(void)
{
    cfc8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    cfca:	f7ff fa8d 	bl	c4e8 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    cfce:	07c3      	lsls	r3, r0, #31
    cfd0:	d51c      	bpl.n	d00c <bt_mesh_net_pending_net_store+0x44>
	net.primary_addr = bt_mesh_primary_addr();
    cfd2:	f003 faff 	bl	105d4 <bt_mesh_primary_addr>
	memcpy(net.dev_key, bt_mesh.dev_key, 16);
    cfd6:	4916      	ldr	r1, [pc, #88]	; (d030 <bt_mesh_net_pending_net_store+0x68>)
	net.primary_addr = bt_mesh_primary_addr();
    cfd8:	f8ad 0004 	strh.w	r0, [sp, #4]
	memcpy(net.dev_key, bt_mesh.dev_key, 16);
    cfdc:	2210      	movs	r2, #16
    cfde:	f10d 0006 	add.w	r0, sp, #6
    cfe2:	f016 fee1 	bl	23da8 <memcpy>
	err = settings_save_one("bt/mesh/Net", &net, sizeof(net));
    cfe6:	4813      	ldr	r0, [pc, #76]	; (d034 <bt_mesh_net_pending_net_store+0x6c>)
    cfe8:	2212      	movs	r2, #18
    cfea:	a901      	add	r1, sp, #4
    cfec:	f7f6 fdc6 	bl	3b7c <settings_save_one>
	if (err) {
    cff0:	b148      	cbz	r0, d006 <bt_mesh_net_pending_net_store+0x3e>
    cff2:	4911      	ldr	r1, [pc, #68]	; (d038 <bt_mesh_net_pending_net_store+0x70>)
    cff4:	4b11      	ldr	r3, [pc, #68]	; (d03c <bt_mesh_net_pending_net_store+0x74>)
		BT_ERR("Failed to store Network value");
    cff6:	4812      	ldr	r0, [pc, #72]	; (d040 <bt_mesh_net_pending_net_store+0x78>)
    cff8:	1ac9      	subs	r1, r1, r3
    cffa:	08c9      	lsrs	r1, r1, #3
    cffc:	0189      	lsls	r1, r1, #6
    cffe:	f041 0101 	orr.w	r1, r1, #1
    d002:	f014 fd72 	bl	21aea <log_0>
		store_pending_net();
	} else {
		clear_net();
	}
}
    d006:	b007      	add	sp, #28
    d008:	f85d fb04 	ldr.w	pc, [sp], #4
	err = settings_delete("bt/mesh/Net");
    d00c:	4809      	ldr	r0, [pc, #36]	; (d034 <bt_mesh_net_pending_net_store+0x6c>)
    d00e:	f015 fb6c 	bl	226ea <settings_delete>
	if (err) {
    d012:	2800      	cmp	r0, #0
    d014:	d0f7      	beq.n	d006 <bt_mesh_net_pending_net_store+0x3e>
    d016:	4b09      	ldr	r3, [pc, #36]	; (d03c <bt_mesh_net_pending_net_store+0x74>)
    d018:	4907      	ldr	r1, [pc, #28]	; (d038 <bt_mesh_net_pending_net_store+0x70>)
		BT_ERR("Failed to clear Network");
    d01a:	480a      	ldr	r0, [pc, #40]	; (d044 <bt_mesh_net_pending_net_store+0x7c>)
    d01c:	1ac9      	subs	r1, r1, r3
    d01e:	08c9      	lsrs	r1, r1, #3
    d020:	0189      	lsls	r1, r1, #6
    d022:	f041 0101 	orr.w	r1, r1, #1
}
    d026:	b007      	add	sp, #28
    d028:	f85d eb04 	ldr.w	lr, [sp], #4
		BT_ERR("Failed to clear Network");
    d02c:	f014 bd5d 	b.w	21aea <log_0>
    d030:	20001928 	.word	0x20001928
    d034:	0002cc47 	.word	0x0002cc47
    d038:	000299f0 	.word	0x000299f0
    d03c:	00029870 	.word	0x00029870
    d040:	0002cc53 	.word	0x0002cc53
    d044:	0002cc71 	.word	0x0002cc71

0000d048 <bt_mesh_net_pending_seq_store>:

void bt_mesh_net_pending_seq_store(void)
{
    d048:	b507      	push	{r0, r1, r2, lr}
    d04a:	f7ff fa4d 	bl	c4e8 <atomic_get.constprop.0>
	struct seq_val seq;
	int err;

	if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    d04e:	07c3      	lsls	r3, r0, #31
    d050:	d51d      	bpl.n	d08e <bt_mesh_net_pending_seq_store+0x46>
		sys_put_le24(bt_mesh.seq, seq.val);
    d052:	4b18      	ldr	r3, [pc, #96]	; (d0b4 <bt_mesh_net_pending_seq_store+0x6c>)

		err = settings_save_one("bt/mesh/Seq", &seq, sizeof(seq));
    d054:	4818      	ldr	r0, [pc, #96]	; (d0b8 <bt_mesh_net_pending_seq_store+0x70>)
		sys_put_le24(bt_mesh.seq, seq.val);
    d056:	685b      	ldr	r3, [r3, #4]
	dst[0] = val;
    d058:	f88d 3004 	strb.w	r3, [sp, #4]
	dst[1] = val >> 8;
    d05c:	f3c3 2207 	ubfx	r2, r3, #8, #8
    d060:	f88d 2005 	strb.w	r2, [sp, #5]
	dst[2] = val >> 16;
    d064:	0c1b      	lsrs	r3, r3, #16
		err = settings_save_one("bt/mesh/Seq", &seq, sizeof(seq));
    d066:	2203      	movs	r2, #3
    d068:	a901      	add	r1, sp, #4
    d06a:	f88d 3006 	strb.w	r3, [sp, #6]
    d06e:	f7f6 fd85 	bl	3b7c <settings_save_one>
		if (err) {
    d072:	b148      	cbz	r0, d088 <bt_mesh_net_pending_seq_store+0x40>
    d074:	4911      	ldr	r1, [pc, #68]	; (d0bc <bt_mesh_net_pending_seq_store+0x74>)
    d076:	4b12      	ldr	r3, [pc, #72]	; (d0c0 <bt_mesh_net_pending_seq_store+0x78>)
			BT_ERR("Failed to stor Seq value");
    d078:	4812      	ldr	r0, [pc, #72]	; (d0c4 <bt_mesh_net_pending_seq_store+0x7c>)
    d07a:	1ac9      	subs	r1, r1, r3
    d07c:	08c9      	lsrs	r1, r1, #3
    d07e:	0189      	lsls	r1, r1, #6
    d080:	f041 0101 	orr.w	r1, r1, #1
    d084:	f014 fd31 	bl	21aea <log_0>
			BT_ERR("Failed to clear Seq value");
		} else {
			BT_DBG("Cleared Seq value");
		}
	}
}
    d088:	b003      	add	sp, #12
    d08a:	f85d fb04 	ldr.w	pc, [sp], #4
		err = settings_delete("bt/mesh/Seq");
    d08e:	480a      	ldr	r0, [pc, #40]	; (d0b8 <bt_mesh_net_pending_seq_store+0x70>)
    d090:	f015 fb2b 	bl	226ea <settings_delete>
		if (err) {
    d094:	2800      	cmp	r0, #0
    d096:	d0f7      	beq.n	d088 <bt_mesh_net_pending_seq_store+0x40>
    d098:	4b09      	ldr	r3, [pc, #36]	; (d0c0 <bt_mesh_net_pending_seq_store+0x78>)
    d09a:	4908      	ldr	r1, [pc, #32]	; (d0bc <bt_mesh_net_pending_seq_store+0x74>)
			BT_ERR("Failed to clear Seq value");
    d09c:	480a      	ldr	r0, [pc, #40]	; (d0c8 <bt_mesh_net_pending_seq_store+0x80>)
    d09e:	1ac9      	subs	r1, r1, r3
    d0a0:	08c9      	lsrs	r1, r1, #3
    d0a2:	0189      	lsls	r1, r1, #6
    d0a4:	f041 0101 	orr.w	r1, r1, #1
}
    d0a8:	b003      	add	sp, #12
    d0aa:	f85d eb04 	ldr.w	lr, [sp], #4
			BT_ERR("Failed to clear Seq value");
    d0ae:	f014 bd1c 	b.w	21aea <log_0>
    d0b2:	bf00      	nop
    d0b4:	200018d0 	.word	0x200018d0
    d0b8:	0002cc89 	.word	0x0002cc89
    d0bc:	000299f0 	.word	0x000299f0
    d0c0:	00029870 	.word	0x00029870
    d0c4:	0002cc95 	.word	0x0002cc95
    d0c8:	0002ccae 	.word	0x0002ccae

0000d0cc <bt_mesh_net_settings_commit>:
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_SEQ_PENDING);
}

void bt_mesh_net_settings_commit(void)
{
	if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
    d0cc:	4805      	ldr	r0, [pc, #20]	; (d0e4 <bt_mesh_net_settings_commit+0x18>)
    d0ce:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    d0d2:	2b5f      	cmp	r3, #95	; 0x5f
    d0d4:	d804      	bhi.n	d0e0 <bt_mesh_net_settings_commit+0x14>
		k_work_reschedule(&bt_mesh.ivu_timer, BT_MESH_IVU_TIMEOUT);
    d0d6:	4a04      	ldr	r2, [pc, #16]	; (d0e8 <bt_mesh_net_settings_commit+0x1c>)
    d0d8:	2300      	movs	r3, #0
    d0da:	3028      	adds	r0, #40	; 0x28
    d0dc:	f013 b9a2 	b.w	20424 <k_work_reschedule>
	}
}
    d0e0:	4770      	bx	lr
    d0e2:	bf00      	nop
    d0e4:	200018d0 	.word	0x200018d0
    d0e8:	a8c00000 	.word	0xa8c00000

0000d0ec <subnet_evt>:
		.net_idx = BT_MESH_KEY_UNUSED,
	},
};

static void subnet_evt(struct bt_mesh_subnet *sub, enum bt_mesh_key_evt evt)
{
    d0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_mesh_subnet_cb, cb) {
    d0ee:	4c06      	ldr	r4, [pc, #24]	; (d108 <subnet_evt+0x1c>)
    d0f0:	4f06      	ldr	r7, [pc, #24]	; (d10c <subnet_evt+0x20>)
{
    d0f2:	4605      	mov	r5, r0
    d0f4:	460e      	mov	r6, r1
	STRUCT_SECTION_FOREACH(bt_mesh_subnet_cb, cb) {
    d0f6:	42bc      	cmp	r4, r7
    d0f8:	d300      	bcc.n	d0fc <subnet_evt+0x10>
		cb->evt_handler(sub, evt);
	}
}
    d0fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb->evt_handler(sub, evt);
    d0fc:	f854 3b04 	ldr.w	r3, [r4], #4
    d100:	4631      	mov	r1, r6
    d102:	4628      	mov	r0, r5
    d104:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_mesh_subnet_cb, cb) {
    d106:	e7f6      	b.n	d0f6 <subnet_evt+0xa>
    d108:	0002970c 	.word	0x0002970c
    d10c:	00029718 	.word	0x00029718

0000d110 <subnet_alloc>:
{
	struct bt_mesh_subnet *sub = NULL;

	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
		/* Check for already existing subnet */
		if (subnets[i].net_idx == net_idx) {
    d110:	4b0e      	ldr	r3, [pc, #56]	; (d14c <subnet_alloc+0x3c>)
{
    d112:	b510      	push	{r4, lr}
		if (subnets[i].net_idx == net_idx) {
    d114:	8b9c      	ldrh	r4, [r3, #28]
    d116:	42a0      	cmp	r0, r4
{
    d118:	4602      	mov	r2, r0
		if (subnets[i].net_idx == net_idx) {
    d11a:	d00f      	beq.n	d13c <subnet_alloc+0x2c>
			return &subnets[i];
		}

		if (!sub && subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    d11c:	f64f 71ff 	movw	r1, #65535	; 0xffff
			sub = &subnets[i];
    d120:	428c      	cmp	r4, r1
    d122:	bf0c      	ite	eq
    d124:	4618      	moveq	r0, r3
    d126:	2000      	movne	r0, #0
		if (subnets[i].net_idx == net_idx) {
    d128:	f8b3 40fc 	ldrh.w	r4, [r3, #252]	; 0xfc
    d12c:	42a2      	cmp	r2, r4
    d12e:	d00a      	beq.n	d146 <subnet_alloc+0x36>
		if (!sub && subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    d130:	b918      	cbnz	r0, d13a <subnet_alloc+0x2a>
			sub = &subnets[i];
    d132:	33e0      	adds	r3, #224	; 0xe0
    d134:	428c      	cmp	r4, r1
    d136:	bf08      	it	eq
    d138:	4618      	moveq	r0, r3
		}
	}

	return sub;
}
    d13a:	bd10      	pop	{r4, pc}
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
    d13c:	2000      	movs	r0, #0
			return &subnets[i];
    d13e:	22e0      	movs	r2, #224	; 0xe0
    d140:	fb02 3000 	mla	r0, r2, r0, r3
    d144:	e7f9      	b.n	d13a <subnet_alloc+0x2a>
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
    d146:	2001      	movs	r0, #1
    d148:	e7f9      	b.n	d13e <subnet_alloc+0x2e>
    d14a:	bf00      	nop
    d14c:	2000082c 	.word	0x2000082c

0000d150 <clear_net_key>:
{
    d150:	b510      	push	{r4, lr}
    d152:	b086      	sub	sp, #24
	snprintk(path, sizeof(path), "bt/mesh/NetKey/%x", net_idx);
    d154:	4603      	mov	r3, r0
    d156:	4a0b      	ldr	r2, [pc, #44]	; (d184 <clear_net_key+0x34>)
{
    d158:	4604      	mov	r4, r0
	snprintk(path, sizeof(path), "bt/mesh/NetKey/%x", net_idx);
    d15a:	2114      	movs	r1, #20
    d15c:	a801      	add	r0, sp, #4
    d15e:	f014 f892 	bl	21286 <snprintk>
	err = settings_delete(path);
    d162:	a801      	add	r0, sp, #4
    d164:	f015 fac1 	bl	226ea <settings_delete>
	if (err) {
    d168:	b150      	cbz	r0, d180 <clear_net_key+0x30>
    d16a:	4a07      	ldr	r2, [pc, #28]	; (d188 <clear_net_key+0x38>)
    d16c:	4b07      	ldr	r3, [pc, #28]	; (d18c <clear_net_key+0x3c>)
		BT_ERR("Failed to clear NetKeyIndex 0x%03x", net_idx);
    d16e:	4808      	ldr	r0, [pc, #32]	; (d190 <clear_net_key+0x40>)
    d170:	1ad2      	subs	r2, r2, r3
    d172:	08d2      	lsrs	r2, r2, #3
    d174:	0192      	lsls	r2, r2, #6
    d176:	f042 0201 	orr.w	r2, r2, #1
    d17a:	4621      	mov	r1, r4
    d17c:	f014 fcc2 	bl	21b04 <log_1>
}
    d180:	b006      	add	sp, #24
    d182:	bd10      	pop	{r4, pc}
    d184:	0002ccd4 	.word	0x0002ccd4
    d188:	000299f8 	.word	0x000299f8
    d18c:	00029870 	.word	0x00029870
    d190:	0002cce6 	.word	0x0002cce6

0000d194 <net_keys_create>:
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
}

static int net_keys_create(struct bt_mesh_subnet_keys *keys,
			   const uint8_t key[16])
{
    d194:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t p = 0;
    d196:	2300      	movs	r3, #0
    d198:	f88d 300f 	strb.w	r3, [sp, #15]
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
    d19c:	f100 0322 	add.w	r3, r0, #34	; 0x22
{
    d1a0:	460e      	mov	r6, r1
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
    d1a2:	9301      	str	r3, [sp, #4]
    d1a4:	f100 0312 	add.w	r3, r0, #18
    d1a8:	9300      	str	r3, [sp, #0]
{
    d1aa:	4605      	mov	r5, r0
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
    d1ac:	f100 0311 	add.w	r3, r0, #17
    d1b0:	2201      	movs	r2, #1
    d1b2:	f10d 010f 	add.w	r1, sp, #15
    d1b6:	4630      	mov	r0, r6
    d1b8:	f002 fc8e 	bl	fad8 <bt_mesh_k2>
	int err;

	err = msg_cred_create(&keys->msg, &p, 1, key);
	if (err) {
    d1bc:	4604      	mov	r4, r0
    d1be:	b160      	cbz	r0, d1da <net_keys_create+0x46>
    d1c0:	4923      	ldr	r1, [pc, #140]	; (d250 <net_keys_create+0xbc>)
    d1c2:	4b24      	ldr	r3, [pc, #144]	; (d254 <net_keys_create+0xc0>)
		BT_ERR("Unable to generate NID, EncKey & PrivacyKey");
    d1c4:	4824      	ldr	r0, [pc, #144]	; (d258 <net_keys_create+0xc4>)
    d1c6:	1ac9      	subs	r1, r1, r3
    d1c8:	08c9      	lsrs	r1, r1, #3
    d1ca:	0189      	lsls	r1, r1, #6
    d1cc:	f041 0101 	orr.w	r1, r1, #1
	BT_DBG("IdentityKey %s", bt_hex(keys->identity, 16));
#endif /* GATT_PROXY */

	err = bt_mesh_beacon_key(key, keys->beacon);
	if (err) {
		BT_ERR("Unable to generate beacon key");
    d1d0:	f014 fc8b 	bl	21aea <log_0>
	BT_DBG("BeaconKey %s", bt_hex(keys->beacon, 16));

	keys->valid = 1U;

	return 0;
}
    d1d4:	4620      	mov	r0, r4
    d1d6:	b004      	add	sp, #16
    d1d8:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(keys->net, key, 16);
    d1da:	2210      	movs	r2, #16
    d1dc:	4631      	mov	r1, r6
    d1de:	1c68      	adds	r0, r5, #1
    d1e0:	f016 fde2 	bl	23da8 <memcpy>
	err = bt_mesh_k3(key, keys->net_id);
    d1e4:	f105 0132 	add.w	r1, r5, #50	; 0x32
    d1e8:	4630      	mov	r0, r6
    d1ea:	f002 fccd 	bl	fb88 <bt_mesh_k3>
	if (err) {
    d1ee:	4604      	mov	r4, r0
    d1f0:	b140      	cbz	r0, d204 <net_keys_create+0x70>
    d1f2:	4917      	ldr	r1, [pc, #92]	; (d250 <net_keys_create+0xbc>)
    d1f4:	4b17      	ldr	r3, [pc, #92]	; (d254 <net_keys_create+0xc0>)
		BT_ERR("Unable to generate Net ID");
    d1f6:	4819      	ldr	r0, [pc, #100]	; (d25c <net_keys_create+0xc8>)
    d1f8:	1ac9      	subs	r1, r1, r3
    d1fa:	08c9      	lsrs	r1, r1, #3
    d1fc:	0189      	lsls	r1, r1, #6
    d1fe:	f041 0101 	orr.w	r1, r1, #1
    d202:	e7e5      	b.n	d1d0 <net_keys_create+0x3c>
}

static inline int bt_mesh_identity_key(const uint8_t net_key[16],
				       uint8_t identity_key[16])
{
	return bt_mesh_id128(net_key, "nkik", identity_key);
    d204:	4916      	ldr	r1, [pc, #88]	; (d260 <net_keys_create+0xcc>)
    d206:	f105 023a 	add.w	r2, r5, #58	; 0x3a
    d20a:	4630      	mov	r0, r6
    d20c:	f002 fd12 	bl	fc34 <bt_mesh_id128>
	if (err) {
    d210:	4604      	mov	r4, r0
    d212:	b140      	cbz	r0, d226 <net_keys_create+0x92>
    d214:	490e      	ldr	r1, [pc, #56]	; (d250 <net_keys_create+0xbc>)
    d216:	4b0f      	ldr	r3, [pc, #60]	; (d254 <net_keys_create+0xc0>)
		BT_ERR("Unable to generate IdentityKey");
    d218:	4812      	ldr	r0, [pc, #72]	; (d264 <net_keys_create+0xd0>)
    d21a:	1ac9      	subs	r1, r1, r3
    d21c:	08c9      	lsrs	r1, r1, #3
    d21e:	0189      	lsls	r1, r1, #6
    d220:	f041 0101 	orr.w	r1, r1, #1
    d224:	e7d4      	b.n	d1d0 <net_keys_create+0x3c>
}

static inline int bt_mesh_beacon_key(const uint8_t net_key[16],
				     uint8_t beacon_key[16])
{
	return bt_mesh_id128(net_key, "nkbk", beacon_key);
    d226:	4910      	ldr	r1, [pc, #64]	; (d268 <net_keys_create+0xd4>)
    d228:	f105 024a 	add.w	r2, r5, #74	; 0x4a
    d22c:	4630      	mov	r0, r6
    d22e:	f002 fd01 	bl	fc34 <bt_mesh_id128>
	if (err) {
    d232:	4604      	mov	r4, r0
    d234:	b140      	cbz	r0, d248 <net_keys_create+0xb4>
    d236:	4906      	ldr	r1, [pc, #24]	; (d250 <net_keys_create+0xbc>)
    d238:	4b06      	ldr	r3, [pc, #24]	; (d254 <net_keys_create+0xc0>)
		BT_ERR("Unable to generate beacon key");
    d23a:	480c      	ldr	r0, [pc, #48]	; (d26c <net_keys_create+0xd8>)
    d23c:	1ac9      	subs	r1, r1, r3
    d23e:	08c9      	lsrs	r1, r1, #3
    d240:	0189      	lsls	r1, r1, #6
    d242:	f041 0101 	orr.w	r1, r1, #1
    d246:	e7c3      	b.n	d1d0 <net_keys_create+0x3c>
	keys->valid = 1U;
    d248:	2301      	movs	r3, #1
    d24a:	702b      	strb	r3, [r5, #0]
	return 0;
    d24c:	e7c2      	b.n	d1d4 <net_keys_create+0x40>
    d24e:	bf00      	nop
    d250:	000299f8 	.word	0x000299f8
    d254:	00029870 	.word	0x00029870
    d258:	0002cd09 	.word	0x0002cd09
    d25c:	0002cd35 	.word	0x0002cd35
    d260:	0002cd4f 	.word	0x0002cd4f
    d264:	0002cd54 	.word	0x0002cd54
    d268:	0002cd73 	.word	0x0002cd73
    d26c:	0002cd78 	.word	0x0002cd78

0000d270 <bt_mesh_net_flags>:
	if (sub && (sub->kr_phase == BT_MESH_KR_PHASE_2)) {
    d270:	b118      	cbz	r0, d27a <bt_mesh_net_flags+0xa>
    d272:	7f80      	ldrb	r0, [r0, #30]
	uint8_t flags = 0x00;
    d274:	1e82      	subs	r2, r0, #2
    d276:	4250      	negs	r0, r2
    d278:	4150      	adcs	r0, r2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d27a:	4b05      	ldr	r3, [pc, #20]	; (d290 <bt_mesh_net_flags+0x20>)
    d27c:	f3bf 8f5b 	dmb	ish
    d280:	681b      	ldr	r3, [r3, #0]
    d282:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    d286:	075b      	lsls	r3, r3, #29
		flags |= BT_MESH_NET_FLAG_IVU;
    d288:	bf48      	it	mi
    d28a:	f040 0002 	orrmi.w	r0, r0, #2
}
    d28e:	4770      	bx	lr
    d290:	200018d8 	.word	0x200018d8

0000d294 <bt_mesh_subnets_get>:

	return STATUS_SUCCESS;
}

ssize_t bt_mesh_subnets_get(uint16_t net_idxs[], size_t max, off_t skip)
{
    d294:	b530      	push	{r4, r5, lr}
	size_t count = 0;

	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
		struct bt_mesh_subnet *sub = &subnets[i];

		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    d296:	4c0f      	ldr	r4, [pc, #60]	; (d2d4 <bt_mesh_subnets_get+0x40>)
{
    d298:	4603      	mov	r3, r0
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    d29a:	8ba0      	ldrh	r0, [r4, #28]
    d29c:	f64f 75ff 	movw	r5, #65535	; 0xffff
    d2a0:	42a8      	cmp	r0, r5
    d2a2:	d010      	beq.n	d2c6 <bt_mesh_subnets_get+0x32>
			continue;
		}

		if (skip) {
    d2a4:	b972      	cbnz	r2, d2c4 <bt_mesh_subnets_get+0x30>
			skip--;
			continue;
		}

		if (count >= max) {
    d2a6:	b151      	cbz	r1, d2be <bt_mesh_subnets_get+0x2a>
			return -ENOMEM;
		}

		net_idxs[count++] = sub->net_idx;
    d2a8:	8018      	strh	r0, [r3, #0]
    d2aa:	2001      	movs	r0, #1
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    d2ac:	f8b4 40fc 	ldrh.w	r4, [r4, #252]	; 0xfc
    d2b0:	f64f 75ff 	movw	r5, #65535	; 0xffff
    d2b4:	42ac      	cmp	r4, r5
    d2b6:	d004      	beq.n	d2c2 <bt_mesh_subnets_get+0x2e>
		if (skip) {
    d2b8:	b91a      	cbnz	r2, d2c2 <bt_mesh_subnets_get+0x2e>
		if (count >= max) {
    d2ba:	4281      	cmp	r1, r0
    d2bc:	d805      	bhi.n	d2ca <bt_mesh_subnets_get+0x36>
			return -ENOMEM;
    d2be:	f06f 000b 	mvn.w	r0, #11
	}

	return count;
}
    d2c2:	bd30      	pop	{r4, r5, pc}
			skip--;
    d2c4:	3a01      	subs	r2, #1
	size_t count = 0;
    d2c6:	2000      	movs	r0, #0
    d2c8:	e7f0      	b.n	d2ac <bt_mesh_subnets_get+0x18>
		net_idxs[count++] = sub->net_idx;
    d2ca:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    d2ce:	3001      	adds	r0, #1
	return count;
    d2d0:	e7f7      	b.n	d2c2 <bt_mesh_subnets_get+0x2e>
    d2d2:	bf00      	nop
    d2d4:	2000082c 	.word	0x2000082c

0000d2d8 <bt_mesh_subnet_get>:

struct bt_mesh_subnet *bt_mesh_subnet_get(uint16_t net_idx)
{
    d2d8:	4603      	mov	r3, r0
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
		struct bt_mesh_subnet *sub = &subnets[i];

		if (sub->net_idx == net_idx) {
    d2da:	4805      	ldr	r0, [pc, #20]	; (d2f0 <bt_mesh_subnet_get+0x18>)
    d2dc:	8b82      	ldrh	r2, [r0, #28]
    d2de:	429a      	cmp	r2, r3
    d2e0:	d005      	beq.n	d2ee <bt_mesh_subnet_get+0x16>
    d2e2:	f8b0 20fc 	ldrh.w	r2, [r0, #252]	; 0xfc
			return sub;
		}
	}

	return NULL;
    d2e6:	30e0      	adds	r0, #224	; 0xe0
    d2e8:	429a      	cmp	r2, r3
    d2ea:	bf18      	it	ne
    d2ec:	2000      	movne	r0, #0
}
    d2ee:	4770      	bx	lr
    d2f0:	2000082c 	.word	0x2000082c

0000d2f4 <store_subnet>:
{
    d2f4:	b510      	push	{r4, lr}
    d2f6:	b08e      	sub	sp, #56	; 0x38
    d2f8:	4601      	mov	r1, r0
	sub = bt_mesh_subnet_get(net_idx);
    d2fa:	f7ff ffed 	bl	d2d8 <bt_mesh_subnet_get>
	if (!sub) {
    d2fe:	4604      	mov	r4, r0
    d300:	b960      	cbnz	r0, d31c <store_subnet+0x28>
    d302:	4b1b      	ldr	r3, [pc, #108]	; (d370 <store_subnet+0x7c>)
    d304:	4a1b      	ldr	r2, [pc, #108]	; (d374 <store_subnet+0x80>)
		BT_WARN("NetKeyIndex 0x%03x not found", net_idx);
    d306:	481c      	ldr	r0, [pc, #112]	; (d378 <store_subnet+0x84>)
    d308:	1ad2      	subs	r2, r2, r3
    d30a:	08d2      	lsrs	r2, r2, #3
    d30c:	0192      	lsls	r2, r2, #6
    d30e:	f042 0202 	orr.w	r2, r2, #2
}
    d312:	b00e      	add	sp, #56	; 0x38
    d314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("NetKeyIndex 0x%03x not found", net_idx);
    d318:	f014 bbf4 	b.w	21b04 <log_1>
	snprintk(path, sizeof(path), "bt/mesh/NetKey/%x", net_idx);
    d31c:	460b      	mov	r3, r1
    d31e:	4a17      	ldr	r2, [pc, #92]	; (d37c <store_subnet+0x88>)
    d320:	2114      	movs	r1, #20
    d322:	4668      	mov	r0, sp
    d324:	f013 ffaf 	bl	21286 <snprintk>
	memcpy(&key.val[0], sub->keys[0].net, 16);
    d328:	2210      	movs	r2, #16
    d32a:	f104 012d 	add.w	r1, r4, #45	; 0x2d
    d32e:	f10d 0015 	add.w	r0, sp, #21
    d332:	f016 fd39 	bl	23da8 <memcpy>
	memcpy(&key.val[1], sub->keys[1].net, 16);
    d336:	2210      	movs	r2, #16
    d338:	f104 0187 	add.w	r1, r4, #135	; 0x87
    d33c:	f10d 0025 	add.w	r0, sp, #37	; 0x25
    d340:	f016 fd32 	bl	23da8 <memcpy>
	key.kr_flag = 0U; /* Deprecated */
    d344:	7fa3      	ldrb	r3, [r4, #30]
	err = settings_save_one(path, &key, sizeof(key));
    d346:	2221      	movs	r2, #33	; 0x21
	key.kr_flag = 0U; /* Deprecated */
    d348:	005b      	lsls	r3, r3, #1
	err = settings_save_one(path, &key, sizeof(key));
    d34a:	a905      	add	r1, sp, #20
    d34c:	4668      	mov	r0, sp
	key.kr_flag = 0U; /* Deprecated */
    d34e:	f88d 3014 	strb.w	r3, [sp, #20]
	err = settings_save_one(path, &key, sizeof(key));
    d352:	f7f6 fc13 	bl	3b7c <settings_save_one>
	if (err) {
    d356:	b148      	cbz	r0, d36c <store_subnet+0x78>
    d358:	4906      	ldr	r1, [pc, #24]	; (d374 <store_subnet+0x80>)
    d35a:	4b05      	ldr	r3, [pc, #20]	; (d370 <store_subnet+0x7c>)
		BT_ERR("Failed to store NetKey value");
    d35c:	4808      	ldr	r0, [pc, #32]	; (d380 <store_subnet+0x8c>)
    d35e:	1ac9      	subs	r1, r1, r3
    d360:	08c9      	lsrs	r1, r1, #3
    d362:	0189      	lsls	r1, r1, #6
    d364:	f041 0101 	orr.w	r1, r1, #1
    d368:	f014 fbbf 	bl	21aea <log_0>
}
    d36c:	b00e      	add	sp, #56	; 0x38
    d36e:	bd10      	pop	{r4, pc}
    d370:	00029870 	.word	0x00029870
    d374:	000299f8 	.word	0x000299f8
    d378:	0002cd96 	.word	0x0002cd96
    d37c:	0002ccd4 	.word	0x0002ccd4
    d380:	0002cdb3 	.word	0x0002cdb3

0000d384 <update_subnet_settings>:
{
    d384:	b470      	push	{r4, r5, r6}
		if (!update->valid) {
    d386:	4c20      	ldr	r4, [pc, #128]	; (d408 <update_subnet_settings+0x84>)
    d388:	7863      	ldrb	r3, [r4, #1]
    d38a:	f013 0310 	ands.w	r3, r3, #16
	uint8_t clear = store ? 0U : 1U;
    d38e:	f081 0501 	eor.w	r5, r1, #1
		if (!update->valid) {
    d392:	d018      	beq.n	d3c6 <update_subnet_settings+0x42>
		if (update->key_idx == key_idx) {
    d394:	8822      	ldrh	r2, [r4, #0]
    d396:	f3c2 020b 	ubfx	r2, r2, #0, #12
    d39a:	4282      	cmp	r2, r0
	*free_slot = NULL;
    d39c:	f04f 0200 	mov.w	r2, #0
		if (update->key_idx == key_idx) {
    d3a0:	d113      	bne.n	d3ca <update_subnet_settings+0x46>
		struct net_key_update *update = &net_key_updates[i];
    d3a2:	4623      	mov	r3, r4
		if (!update->valid) {
    d3a4:	78e6      	ldrb	r6, [r4, #3]
    d3a6:	06f6      	lsls	r6, r6, #27
    d3a8:	d51b      	bpl.n	d3e2 <update_subnet_settings+0x5e>
		if (update->key_idx == key_idx) {
    d3aa:	8864      	ldrh	r4, [r4, #2]
    d3ac:	f3c4 040b 	ubfx	r4, r4, #0, #12
    d3b0:	4284      	cmp	r4, r0
    d3b2:	d00c      	beq.n	d3ce <update_subnet_settings+0x4a>
	if (update) {
    d3b4:	b16b      	cbz	r3, d3d2 <update_subnet_settings+0x4e>
		update->clear = clear;
    d3b6:	785a      	ldrb	r2, [r3, #1]
    d3b8:	f365 1245 	bfi	r2, r5, #5, #1
    d3bc:	705a      	strb	r2, [r3, #1]
}
    d3be:	bc70      	pop	{r4, r5, r6}
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_NET_KEYS_PENDING);
    d3c0:	2001      	movs	r0, #1
    d3c2:	f006 b863 	b.w	1348c <bt_mesh_settings_store_schedule>
			*free_slot = update;
    d3c6:	4622      	mov	r2, r4
    d3c8:	e7ec      	b.n	d3a4 <update_subnet_settings+0x20>
	match = NULL;
    d3ca:	4613      	mov	r3, r2
    d3cc:	e7ea      	b.n	d3a4 <update_subnet_settings+0x20>
		struct net_key_update *update = &net_key_updates[i];
    d3ce:	4b0f      	ldr	r3, [pc, #60]	; (d40c <update_subnet_settings+0x88>)
    d3d0:	e7f1      	b.n	d3b6 <update_subnet_settings+0x32>
	if (!free_slot) {
    d3d2:	b94a      	cbnz	r2, d3e8 <update_subnet_settings+0x64>
		if (store) {
    d3d4:	b111      	cbz	r1, d3dc <update_subnet_settings+0x58>
}
    d3d6:	bc70      	pop	{r4, r5, r6}
			store_subnet(net_idx);
    d3d8:	f7ff bf8c 	b.w	d2f4 <store_subnet>
}
    d3dc:	bc70      	pop	{r4, r5, r6}
			clear_net_key(net_idx);
    d3de:	f7ff beb7 	b.w	d150 <clear_net_key>
	if (update) {
    d3e2:	2b00      	cmp	r3, #0
    d3e4:	d1e7      	bne.n	d3b6 <update_subnet_settings+0x32>
			*free_slot = update;
    d3e6:	4a09      	ldr	r2, [pc, #36]	; (d40c <update_subnet_settings+0x88>)
	free_slot->key_idx = net_idx;
    d3e8:	8811      	ldrh	r1, [r2, #0]
    d3ea:	f3c0 030b 	ubfx	r3, r0, #0, #12
    d3ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    d3f2:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    d3f6:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
    d3fa:	f3c3 030d 	ubfx	r3, r3, #0, #14
    d3fe:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
    d402:	430b      	orrs	r3, r1
    d404:	8013      	strh	r3, [r2, #0]
    d406:	e7da      	b.n	d3be <update_subnet_settings+0x3a>
    d408:	200036e0 	.word	0x200036e0
    d40c:	200036e2 	.word	0x200036e2

0000d410 <bt_mesh_subnet_kr_phase_set>:
{
    d410:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const uint8_t valid_transitions[] = {
    d412:	4b19      	ldr	r3, [pc, #100]	; (d478 <bt_mesh_subnet_kr_phase_set+0x68>)
    d414:	881a      	ldrh	r2, [r3, #0]
    d416:	789b      	ldrb	r3, [r3, #2]
    d418:	f8ad 2004 	strh.w	r2, [sp, #4]
    d41c:	f88d 3006 	strb.w	r3, [sp, #6]
	sub = bt_mesh_subnet_get(net_idx);
    d420:	f7ff ff5a 	bl	d2d8 <bt_mesh_subnet_get>
{
    d424:	460d      	mov	r5, r1
	if (!sub) {
    d426:	4604      	mov	r4, r0
    d428:	b918      	cbnz	r0, d432 <bt_mesh_subnet_kr_phase_set+0x22>
		*phase = 0x00;
    d42a:	7008      	strb	r0, [r1, #0]
		return STATUS_INVALID_NETKEY;
    d42c:	2004      	movs	r0, #4
}
    d42e:	b003      	add	sp, #12
    d430:	bd30      	pop	{r4, r5, pc}
	if (*phase == sub->kr_phase) {
    d432:	780a      	ldrb	r2, [r1, #0]
    d434:	7f81      	ldrb	r1, [r0, #30]
    d436:	428a      	cmp	r2, r1
    d438:	d00e      	beq.n	d458 <bt_mesh_subnet_kr_phase_set+0x48>
	if (sub->kr_phase < ARRAY_SIZE(valid_transitions) &&
    d43a:	2902      	cmp	r1, #2
    d43c:	d80e      	bhi.n	d45c <bt_mesh_subnet_kr_phase_set+0x4c>
	    valid_transitions[sub->kr_phase] & BIT(*phase)) {
    d43e:	f101 0308 	add.w	r3, r1, #8
    d442:	446b      	add	r3, sp
    d444:	f813 3c04 	ldrb.w	r3, [r3, #-4]
	if (sub->kr_phase < ARRAY_SIZE(valid_transitions) &&
    d448:	40d3      	lsrs	r3, r2
    d44a:	07db      	lsls	r3, r3, #31
    d44c:	d506      	bpl.n	d45c <bt_mesh_subnet_kr_phase_set+0x4c>
		key_refresh(sub, *phase);
    d44e:	4611      	mov	r1, r2
    d450:	f018 fac3 	bl	259da <key_refresh>
		*phase = sub->kr_phase;
    d454:	7fa3      	ldrb	r3, [r4, #30]
    d456:	702b      	strb	r3, [r5, #0]
		return STATUS_SUCCESS;
    d458:	2000      	movs	r0, #0
    d45a:	e7e8      	b.n	d42e <bt_mesh_subnet_kr_phase_set+0x1e>
    d45c:	4807      	ldr	r0, [pc, #28]	; (d47c <bt_mesh_subnet_kr_phase_set+0x6c>)
    d45e:	4b08      	ldr	r3, [pc, #32]	; (d480 <bt_mesh_subnet_kr_phase_set+0x70>)
    d460:	1a1b      	subs	r3, r3, r0
    d462:	08db      	lsrs	r3, r3, #3
	BT_WARN("Invalid KR transition: 0x%02x -> 0x%02x", sub->kr_phase,
    d464:	019b      	lsls	r3, r3, #6
    d466:	4807      	ldr	r0, [pc, #28]	; (d484 <bt_mesh_subnet_kr_phase_set+0x74>)
    d468:	f043 0302 	orr.w	r3, r3, #2
    d46c:	f014 fb5e 	bl	21b2c <log_2>
	*phase = sub->kr_phase;
    d470:	7fa3      	ldrb	r3, [r4, #30]
    d472:	702b      	strb	r3, [r5, #0]
	return STATUS_CANNOT_UPDATE;
    d474:	200b      	movs	r0, #11
    d476:	e7da      	b.n	d42e <bt_mesh_subnet_kr_phase_set+0x1e>
    d478:	0002cdf8 	.word	0x0002cdf8
    d47c:	00029870 	.word	0x00029870
    d480:	000299f8 	.word	0x000299f8
    d484:	0002cdd0 	.word	0x0002cdd0

0000d488 <net_key_set>:
	return false;
}

static int net_key_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
    d488:	b570      	push	{r4, r5, r6, lr}
    d48a:	4614      	mov	r4, r2
    d48c:	b08a      	sub	sp, #40	; 0x28
    d48e:	461e      	mov	r6, r3
	struct net_key_val key;
	int err;
	uint16_t net_idx;

	if (!name) {
    d490:	b970      	cbnz	r0, d4b0 <net_key_set+0x28>
    d492:	4b1b      	ldr	r3, [pc, #108]	; (d500 <net_key_set+0x78>)
    d494:	491b      	ldr	r1, [pc, #108]	; (d504 <net_key_set+0x7c>)
		BT_ERR("Insufficient number of arguments");
    d496:	481c      	ldr	r0, [pc, #112]	; (d508 <net_key_set+0x80>)
    d498:	1ac9      	subs	r1, r1, r3
    d49a:	08c9      	lsrs	r1, r1, #3
    d49c:	0189      	lsls	r1, r1, #6
    d49e:	f041 0101 	orr.w	r1, r1, #1
    d4a2:	f014 fb22 	bl	21aea <log_0>
		return -ENOENT;
    d4a6:	f06f 0401 	mvn.w	r4, #1
	BT_DBG("NetKeyIndex 0x%03x recovered from storage", net_idx);

	return bt_mesh_subnet_set(
		net_idx, key.kr_phase, key.val[0],
		(key.kr_phase != BT_MESH_KR_NORMAL) ? key.val[1] : NULL);
}
    d4aa:	4620      	mov	r0, r4
    d4ac:	b00a      	add	sp, #40	; 0x28
    d4ae:	bd70      	pop	{r4, r5, r6, pc}
	net_idx = strtol(name, NULL, 16);
    d4b0:	2210      	movs	r2, #16
    d4b2:	2100      	movs	r1, #0
    d4b4:	f016 fb31 	bl	23b1a <strtol>
	err = bt_mesh_settings_set(read_cb, cb_arg, &key, sizeof(key));
    d4b8:	2321      	movs	r3, #33	; 0x21
	net_idx = strtol(name, NULL, 16);
    d4ba:	b285      	uxth	r5, r0
	err = bt_mesh_settings_set(read_cb, cb_arg, &key, sizeof(key));
    d4bc:	aa01      	add	r2, sp, #4
    d4be:	4620      	mov	r0, r4
    d4c0:	4631      	mov	r1, r6
    d4c2:	f005 ffb1 	bl	13428 <bt_mesh_settings_set>
	if (err) {
    d4c6:	4604      	mov	r4, r0
    d4c8:	b150      	cbz	r0, d4e0 <net_key_set+0x58>
    d4ca:	4b0d      	ldr	r3, [pc, #52]	; (d500 <net_key_set+0x78>)
    d4cc:	490d      	ldr	r1, [pc, #52]	; (d504 <net_key_set+0x7c>)
		BT_ERR("Failed to set \'net-key\'");
    d4ce:	480f      	ldr	r0, [pc, #60]	; (d50c <net_key_set+0x84>)
    d4d0:	1ac9      	subs	r1, r1, r3
    d4d2:	08c9      	lsrs	r1, r1, #3
    d4d4:	0189      	lsls	r1, r1, #6
    d4d6:	f041 0101 	orr.w	r1, r1, #1
    d4da:	f014 fb06 	bl	21aea <log_0>
		return err;
    d4de:	e7e4      	b.n	d4aa <net_key_set+0x22>
		net_idx, key.kr_phase, key.val[0],
    d4e0:	f89d 3004 	ldrb.w	r3, [sp, #4]
	return bt_mesh_subnet_set(
    d4e4:	0859      	lsrs	r1, r3, #1
    d4e6:	f013 03fe 	ands.w	r3, r3, #254	; 0xfe
    d4ea:	bf18      	it	ne
    d4ec:	f10d 0315 	addne.w	r3, sp, #21
    d4f0:	f10d 0205 	add.w	r2, sp, #5
    d4f4:	4628      	mov	r0, r5
    d4f6:	f018 fb53 	bl	25ba0 <bt_mesh_subnet_set>
    d4fa:	4604      	mov	r4, r0
    d4fc:	e7d5      	b.n	d4aa <net_key_set+0x22>
    d4fe:	bf00      	nop
    d500:	00029870 	.word	0x00029870
    d504:	000299f8 	.word	0x000299f8
    d508:	0002b425 	.word	0x0002b425
    d50c:	0002cdfc 	.word	0x0002cdfc

0000d510 <bt_mesh_subnet_find>:
{
    d510:	b570      	push	{r4, r5, r6, lr}
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    d512:	4c0f      	ldr	r4, [pc, #60]	; (d550 <bt_mesh_subnet_find+0x40>)
    d514:	8ba2      	ldrh	r2, [r4, #28]
    d516:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d51a:	429a      	cmp	r2, r3
{
    d51c:	4605      	mov	r5, r0
    d51e:	460e      	mov	r6, r1
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    d520:	d003      	beq.n	d52a <bt_mesh_subnet_find+0x1a>
		if (!cb || cb(&subnets[i], cb_data)) {
    d522:	4620      	mov	r0, r4
    d524:	b14d      	cbz	r5, d53a <bt_mesh_subnet_find+0x2a>
    d526:	47a8      	blx	r5
    d528:	b978      	cbnz	r0, d54a <bt_mesh_subnet_find+0x3a>
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    d52a:	f8b4 20fc 	ldrh.w	r2, [r4, #252]	; 0xfc
    d52e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d532:	429a      	cmp	r2, r3
    d534:	d007      	beq.n	d546 <bt_mesh_subnet_find+0x36>
		if (!cb || cb(&subnets[i], cb_data)) {
    d536:	b90d      	cbnz	r5, d53c <bt_mesh_subnet_find+0x2c>
    d538:	4806      	ldr	r0, [pc, #24]	; (d554 <bt_mesh_subnet_find+0x44>)
}
    d53a:	bd70      	pop	{r4, r5, r6, pc}
		if (!cb || cb(&subnets[i], cb_data)) {
    d53c:	4805      	ldr	r0, [pc, #20]	; (d554 <bt_mesh_subnet_find+0x44>)
    d53e:	4631      	mov	r1, r6
    d540:	47a8      	blx	r5
    d542:	2800      	cmp	r0, #0
    d544:	d1f8      	bne.n	d538 <bt_mesh_subnet_find+0x28>
	return NULL;
    d546:	2000      	movs	r0, #0
    d548:	e7f7      	b.n	d53a <bt_mesh_subnet_find+0x2a>
		if (!cb || cb(&subnets[i], cb_data)) {
    d54a:	4620      	mov	r0, r4
    d54c:	e7f5      	b.n	d53a <bt_mesh_subnet_find+0x2a>
    d54e:	bf00      	nop
    d550:	2000082c 	.word	0x2000082c
    d554:	2000090c 	.word	0x2000090c

0000d558 <bt_mesh_subnet_foreach>:
{
    d558:	b570      	push	{r4, r5, r6, lr}
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    d55a:	4e0b      	ldr	r6, [pc, #44]	; (d588 <bt_mesh_subnet_foreach+0x30>)
    d55c:	8bb2      	ldrh	r2, [r6, #28]
    d55e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d562:	429a      	cmp	r2, r3
{
    d564:	4605      	mov	r5, r0
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    d566:	d00d      	beq.n	d584 <bt_mesh_subnet_foreach+0x2c>
		cb(&subnets[i]);
    d568:	4630      	mov	r0, r6
    d56a:	47a8      	blx	r5
		count++;
    d56c:	2401      	movs	r4, #1
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    d56e:	f8b6 20fc 	ldrh.w	r2, [r6, #252]	; 0xfc
    d572:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d576:	429a      	cmp	r2, r3
    d578:	d002      	beq.n	d580 <bt_mesh_subnet_foreach+0x28>
		cb(&subnets[i]);
    d57a:	4804      	ldr	r0, [pc, #16]	; (d58c <bt_mesh_subnet_foreach+0x34>)
    d57c:	47a8      	blx	r5
		count++;
    d57e:	3401      	adds	r4, #1
}
    d580:	4620      	mov	r0, r4
    d582:	bd70      	pop	{r4, r5, r6, pc}
	size_t count = 0;
    d584:	2400      	movs	r4, #0
    d586:	e7f2      	b.n	d56e <bt_mesh_subnet_foreach+0x16>
    d588:	2000082c 	.word	0x2000082c
    d58c:	2000090c 	.word	0x2000090c

0000d590 <bt_mesh_subnet_next>:
	if (sub) {
    d590:	b1b8      	cbz	r0, d5c2 <bt_mesh_subnet_next+0x32>
		if (sub == &subnets[ARRAY_SIZE(subnets)]) {
    d592:	4b0d      	ldr	r3, [pc, #52]	; (d5c8 <bt_mesh_subnet_next+0x38>)
		sub++;
    d594:	30e0      	adds	r0, #224	; 0xe0
		sub = &subnets[0];
    d596:	f5a3 72e0 	sub.w	r2, r3, #448	; 0x1c0
    d59a:	4298      	cmp	r0, r3
    d59c:	bf08      	it	eq
    d59e:	4610      	moveq	r0, r2
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
    d5a0:	8b83      	ldrh	r3, [r0, #28]
    d5a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d5a6:	4293      	cmp	r3, r2
    d5a8:	d10a      	bne.n	d5c0 <bt_mesh_subnet_next+0x30>
		if (sub == &subnets[ARRAY_SIZE(subnets)]) {
    d5aa:	4a07      	ldr	r2, [pc, #28]	; (d5c8 <bt_mesh_subnet_next+0x38>)
	for (int i = 0; i < ARRAY_SIZE(subnets); i++, sub++) {
    d5ac:	30e0      	adds	r0, #224	; 0xe0
			sub = &subnets[0];
    d5ae:	f5a2 71e0 	sub.w	r1, r2, #448	; 0x1c0
    d5b2:	4290      	cmp	r0, r2
    d5b4:	bf08      	it	eq
    d5b6:	4608      	moveq	r0, r1
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
    d5b8:	8b82      	ldrh	r2, [r0, #28]
	return NULL;
    d5ba:	429a      	cmp	r2, r3
    d5bc:	bf08      	it	eq
    d5be:	2000      	moveq	r0, #0
}
    d5c0:	4770      	bx	lr
		sub = &subnets[0];
    d5c2:	4802      	ldr	r0, [pc, #8]	; (d5cc <bt_mesh_subnet_next+0x3c>)
    d5c4:	e7ec      	b.n	d5a0 <bt_mesh_subnet_next+0x10>
    d5c6:	bf00      	nop
    d5c8:	200009ec 	.word	0x200009ec
    d5cc:	2000082c 	.word	0x2000082c

0000d5d0 <bt_mesh_net_keys_reset>:
{
    d5d0:	b510      	push	{r4, lr}
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
    d5d2:	4c0a      	ldr	r4, [pc, #40]	; (d5fc <bt_mesh_net_keys_reset+0x2c>)
    d5d4:	8ba2      	ldrh	r2, [r4, #28]
    d5d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d5da:	429a      	cmp	r2, r3
    d5dc:	d002      	beq.n	d5e4 <bt_mesh_net_keys_reset+0x14>
			subnet_del(sub);
    d5de:	4620      	mov	r0, r4
    d5e0:	f018 fa5c 	bl	25a9c <subnet_del>
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
    d5e4:	f8b4 20fc 	ldrh.w	r2, [r4, #252]	; 0xfc
    d5e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d5ec:	429a      	cmp	r2, r3
    d5ee:	d004      	beq.n	d5fa <bt_mesh_net_keys_reset+0x2a>
}
    d5f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			subnet_del(sub);
    d5f4:	4802      	ldr	r0, [pc, #8]	; (d600 <bt_mesh_net_keys_reset+0x30>)
    d5f6:	f018 ba51 	b.w	25a9c <subnet_del>
}
    d5fa:	bd10      	pop	{r4, pc}
    d5fc:	2000082c 	.word	0x2000082c
    d600:	2000090c 	.word	0x2000090c

0000d604 <bt_mesh_net_cred_find>:
{
    d604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d608:	4d1c      	ldr	r5, [pc, #112]	; (d67c <bt_mesh_net_cred_find+0x78>)
    d60a:	4604      	mov	r4, r0
    d60c:	460e      	mov	r6, r1
    d60e:	4617      	mov	r7, r2
    d610:	4698      	mov	r8, r3
	for (i = 0; i < ARRAY_SIZE(subnets); i++) {
    d612:	f04f 0900 	mov.w	r9, #0
		if (rx->sub->net_idx == BT_MESH_KEY_UNUSED) {
    d616:	f64f 7aff 	movw	sl, #65535	; 0xffff
    d61a:	8bab      	ldrh	r3, [r5, #28]
		rx->sub = &subnets[i];
    d61c:	6025      	str	r5, [r4, #0]
		if (rx->sub->net_idx == BT_MESH_KEY_UNUSED) {
    d61e:	4553      	cmp	r3, sl
    d620:	d025      	beq.n	d66e <bt_mesh_net_cred_find+0x6a>
			if (!rx->sub->keys[j].valid) {
    d622:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
    d626:	b133      	cbz	r3, d636 <bt_mesh_net_cred_find+0x32>
			if (cb(rx, in, out, &rx->sub->keys[j].msg)) {
    d628:	f105 033d 	add.w	r3, r5, #61	; 0x3d
    d62c:	463a      	mov	r2, r7
    d62e:	4631      	mov	r1, r6
    d630:	4620      	mov	r0, r4
    d632:	47c0      	blx	r8
    d634:	b9c8      	cbnz	r0, d66a <bt_mesh_net_cred_find+0x66>
			if (!rx->sub->keys[j].valid) {
    d636:	6823      	ldr	r3, [r4, #0]
    d638:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
    d63c:	b1ba      	cbz	r2, d66e <bt_mesh_net_cred_find+0x6a>
			if (cb(rx, in, out, &rx->sub->keys[j].msg)) {
    d63e:	3397      	adds	r3, #151	; 0x97
    d640:	463a      	mov	r2, r7
    d642:	4631      	mov	r1, r6
    d644:	4620      	mov	r0, r4
    d646:	47c0      	blx	r8
    d648:	b188      	cbz	r0, d66e <bt_mesh_net_cred_find+0x6a>
		for (j = 0; j < ARRAY_SIZE(rx->sub->keys); j++) {
    d64a:	2201      	movs	r2, #1
				rx->new_key = (j > 0);
    d64c:	7d23      	ldrb	r3, [r4, #20]
    d64e:	f023 0306 	bic.w	r3, r3, #6
    d652:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
    d656:	7523      	strb	r3, [r4, #20]
				rx->ctx.net_idx = rx->sub->net_idx;
    d658:	6823      	ldr	r3, [r4, #0]
    d65a:	8b9b      	ldrh	r3, [r3, #28]
    d65c:	80a3      	strh	r3, [r4, #4]
				return true;
    d65e:	2001      	movs	r0, #1
}
    d660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d664:	f04f 0901 	mov.w	r9, #1
    d668:	e7d7      	b.n	d61a <bt_mesh_net_cred_find+0x16>
		for (j = 0; j < ARRAY_SIZE(rx->sub->keys); j++) {
    d66a:	2200      	movs	r2, #0
    d66c:	e7ee      	b.n	d64c <bt_mesh_net_cred_find+0x48>
	for (i = 0; i < ARRAY_SIZE(subnets); i++) {
    d66e:	35e0      	adds	r5, #224	; 0xe0
    d670:	f1b9 0f00 	cmp.w	r9, #0
    d674:	d0f6      	beq.n	d664 <bt_mesh_net_cred_find+0x60>
	return false;
    d676:	2000      	movs	r0, #0
    d678:	e7f2      	b.n	d660 <bt_mesh_net_cred_find+0x5c>
    d67a:	bf00      	nop
    d67c:	2000082c 	.word	0x2000082c

0000d680 <bt_mesh_subnet_pending_store>:

BT_MESH_SETTINGS_DEFINE(subnet, "NetKey", net_key_set);

void bt_mesh_subnet_pending_store(void)
{
    d680:	b510      	push	{r4, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(net_key_updates); i++) {
		struct net_key_update *update = &net_key_updates[i];

		if (!update->valid) {
    d682:	4c12      	ldr	r4, [pc, #72]	; (d6cc <bt_mesh_subnet_pending_store+0x4c>)
    d684:	7863      	ldrb	r3, [r4, #1]
    d686:	06d8      	lsls	r0, r3, #27
    d688:	d50a      	bpl.n	d6a0 <bt_mesh_subnet_pending_store+0x20>
			continue;
		}

		if (update->clear) {
			clear_net_key(update->key_idx);
    d68a:	8820      	ldrh	r0, [r4, #0]
		if (update->clear) {
    d68c:	0699      	lsls	r1, r3, #26
			clear_net_key(update->key_idx);
    d68e:	f3c0 000b 	ubfx	r0, r0, #0, #12
		if (update->clear) {
    d692:	d414      	bmi.n	d6be <bt_mesh_subnet_pending_store+0x3e>
		} else {
			store_subnet(update->key_idx);
    d694:	f7ff fe2e 	bl	d2f4 <store_subnet>
		}

		update->valid = 0U;
    d698:	7863      	ldrb	r3, [r4, #1]
    d69a:	f36f 1304 	bfc	r3, #4, #1
    d69e:	7063      	strb	r3, [r4, #1]
		if (!update->valid) {
    d6a0:	78e3      	ldrb	r3, [r4, #3]
    d6a2:	06da      	lsls	r2, r3, #27
    d6a4:	d50a      	bpl.n	d6bc <bt_mesh_subnet_pending_store+0x3c>
			clear_net_key(update->key_idx);
    d6a6:	8860      	ldrh	r0, [r4, #2]
		if (update->clear) {
    d6a8:	069b      	lsls	r3, r3, #26
			clear_net_key(update->key_idx);
    d6aa:	f3c0 000b 	ubfx	r0, r0, #0, #12
		if (update->clear) {
    d6ae:	d509      	bpl.n	d6c4 <bt_mesh_subnet_pending_store+0x44>
			clear_net_key(update->key_idx);
    d6b0:	f7ff fd4e 	bl	d150 <clear_net_key>
		update->valid = 0U;
    d6b4:	78e3      	ldrb	r3, [r4, #3]
    d6b6:	f36f 1304 	bfc	r3, #4, #1
    d6ba:	70e3      	strb	r3, [r4, #3]
	}
}
    d6bc:	bd10      	pop	{r4, pc}
			clear_net_key(update->key_idx);
    d6be:	f7ff fd47 	bl	d150 <clear_net_key>
    d6c2:	e7e9      	b.n	d698 <bt_mesh_subnet_pending_store+0x18>
			store_subnet(update->key_idx);
    d6c4:	f7ff fe16 	bl	d2f4 <store_subnet>
    d6c8:	e7f4      	b.n	d6b4 <bt_mesh_subnet_pending_store+0x34>
    d6ca:	bf00      	nop
    d6cc:	200036e0 	.word	0x200036e0

0000d6d0 <app_get>:
};

static struct app_key *app_get(uint16_t app_idx)
{
	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
		if (apps[i].app_idx == app_idx) {
    d6d0:	4b07      	ldr	r3, [pc, #28]	; (d6f0 <app_get+0x20>)
    d6d2:	885a      	ldrh	r2, [r3, #2]
    d6d4:	4282      	cmp	r2, r0
    d6d6:	d007      	beq.n	d6e8 <app_get+0x18>
    d6d8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    d6da:	4282      	cmp	r2, r0
    d6dc:	d106      	bne.n	d6ec <app_get+0x1c>
	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
    d6de:	2001      	movs	r0, #1
			return &apps[i];
    d6e0:	2228      	movs	r2, #40	; 0x28
    d6e2:	fb02 3000 	mla	r0, r2, r0, r3
    d6e6:	4770      	bx	lr
	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
    d6e8:	2000      	movs	r0, #0
    d6ea:	e7f9      	b.n	d6e0 <app_get+0x10>
		}
	}

	return NULL;
    d6ec:	2000      	movs	r0, #0
}
    d6ee:	4770      	bx	lr
    d6f0:	20000f70 	.word	0x20000f70

0000d6f4 <app_key_evt>:

	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_APP_KEYS_PENDING);
}

static void app_key_evt(struct app_key *app, enum bt_mesh_key_evt evt)
{
    d6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_mesh_app_key_cb, cb) {
    d6f6:	4d07      	ldr	r5, [pc, #28]	; (d714 <app_key_evt+0x20>)
    d6f8:	4f07      	ldr	r7, [pc, #28]	; (d718 <app_key_evt+0x24>)
{
    d6fa:	4604      	mov	r4, r0
    d6fc:	460e      	mov	r6, r1
	STRUCT_SECTION_FOREACH(bt_mesh_app_key_cb, cb) {
    d6fe:	42bd      	cmp	r5, r7
    d700:	d300      	bcc.n	d704 <app_key_evt+0x10>
		cb->evt_handler(app->app_idx, app->net_idx, evt);
	}
}
    d702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb->evt_handler(app->app_idx, app->net_idx, evt);
    d704:	f855 3b04 	ldr.w	r3, [r5], #4
    d708:	8821      	ldrh	r1, [r4, #0]
    d70a:	8860      	ldrh	r0, [r4, #2]
    d70c:	4632      	mov	r2, r6
    d70e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_mesh_app_key_cb, cb) {
    d710:	e7f5      	b.n	d6fe <app_key_evt+0xa>
    d712:	bf00      	nop
    d714:	00029718 	.word	0x00029718
    d718:	0002971c 	.word	0x0002971c

0000d71c <app_key_alloc>:
{
	struct app_key *app = NULL;

	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
		/* Check for already existing app_key */
		if (apps[i].app_idx == app_idx) {
    d71c:	4b0d      	ldr	r3, [pc, #52]	; (d754 <app_key_alloc+0x38>)
{
    d71e:	b510      	push	{r4, lr}
		if (apps[i].app_idx == app_idx) {
    d720:	885c      	ldrh	r4, [r3, #2]
    d722:	42a0      	cmp	r0, r4
{
    d724:	4602      	mov	r2, r0
		if (apps[i].app_idx == app_idx) {
    d726:	d00e      	beq.n	d746 <app_key_alloc+0x2a>
			return &apps[i];
		}

		if (!app && apps[i].app_idx == BT_MESH_KEY_UNUSED) {
    d728:	f64f 71ff 	movw	r1, #65535	; 0xffff
			app = &apps[i];
    d72c:	428c      	cmp	r4, r1
    d72e:	bf0c      	ite	eq
    d730:	4618      	moveq	r0, r3
    d732:	2000      	movne	r0, #0
		if (apps[i].app_idx == app_idx) {
    d734:	8d5c      	ldrh	r4, [r3, #42]	; 0x2a
    d736:	42a2      	cmp	r2, r4
    d738:	d00a      	beq.n	d750 <app_key_alloc+0x34>
		if (!app && apps[i].app_idx == BT_MESH_KEY_UNUSED) {
    d73a:	b918      	cbnz	r0, d744 <app_key_alloc+0x28>
			app = &apps[i];
    d73c:	3328      	adds	r3, #40	; 0x28
    d73e:	428c      	cmp	r4, r1
    d740:	bf08      	it	eq
    d742:	4618      	moveq	r0, r3
		}
	}

	return app;
}
    d744:	bd10      	pop	{r4, pc}
	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
    d746:	2000      	movs	r0, #0
			return &apps[i];
    d748:	2228      	movs	r2, #40	; 0x28
    d74a:	fb02 3000 	mla	r0, r2, r0, r3
    d74e:	e7f9      	b.n	d744 <app_key_alloc+0x28>
	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
    d750:	2001      	movs	r0, #1
    d752:	e7f9      	b.n	d748 <app_key_alloc+0x2c>
    d754:	20000f70 	.word	0x20000f70

0000d758 <store_app_key>:
{
    d758:	b530      	push	{r4, r5, lr}
    d75a:	b08f      	sub	sp, #60	; 0x3c
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
    d75c:	4603      	mov	r3, r0
    d75e:	4a20      	ldr	r2, [pc, #128]	; (d7e0 <store_app_key+0x88>)
{
    d760:	4605      	mov	r5, r0
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
    d762:	2114      	movs	r1, #20
    d764:	4668      	mov	r0, sp
    d766:	f013 fd8e 	bl	21286 <snprintk>
	app = app_get(app_idx);
    d76a:	4628      	mov	r0, r5
    d76c:	f7ff ffb0 	bl	d6d0 <app_get>
	if (!app) {
    d770:	4604      	mov	r4, r0
    d772:	b960      	cbnz	r0, d78e <store_app_key+0x36>
    d774:	4a1b      	ldr	r2, [pc, #108]	; (d7e4 <store_app_key+0x8c>)
    d776:	4b1c      	ldr	r3, [pc, #112]	; (d7e8 <store_app_key+0x90>)
		BT_WARN("ApKeyIndex 0x%03x not found", app_idx);
    d778:	481c      	ldr	r0, [pc, #112]	; (d7ec <store_app_key+0x94>)
    d77a:	1ad2      	subs	r2, r2, r3
    d77c:	08d2      	lsrs	r2, r2, #3
    d77e:	0192      	lsls	r2, r2, #6
    d780:	f042 0202 	orr.w	r2, r2, #2
    d784:	4629      	mov	r1, r5
		BT_ERR("Failed to store AppKey %s value", log_strdup(path));
    d786:	f014 f9bd 	bl	21b04 <log_1>
}
    d78a:	b00f      	add	sp, #60	; 0x3c
    d78c:	bd30      	pop	{r4, r5, pc}
	key.net_idx = app->net_idx,
    d78e:	8803      	ldrh	r3, [r0, #0]
    d790:	f8ad 3014 	strh.w	r3, [sp, #20]
	memcpy(key.val[0], app->keys[0].val, 16);
    d794:	1d81      	adds	r1, r0, #6
	key.updated = app->updated,
    d796:	7903      	ldrb	r3, [r0, #4]
    d798:	f88d 3016 	strb.w	r3, [sp, #22]
	memcpy(key.val[0], app->keys[0].val, 16);
    d79c:	2210      	movs	r2, #16
    d79e:	f10d 0017 	add.w	r0, sp, #23
    d7a2:	f016 fb01 	bl	23da8 <memcpy>
	memcpy(key.val[1], app->keys[1].val, 16);
    d7a6:	2210      	movs	r2, #16
    d7a8:	f104 0117 	add.w	r1, r4, #23
    d7ac:	f10d 0027 	add.w	r0, sp, #39	; 0x27
    d7b0:	f016 fafa 	bl	23da8 <memcpy>
	err = settings_save_one(path, &key, sizeof(key));
    d7b4:	2223      	movs	r2, #35	; 0x23
    d7b6:	a905      	add	r1, sp, #20
    d7b8:	4668      	mov	r0, sp
    d7ba:	f7f6 f9df 	bl	3b7c <settings_save_one>
	if (err) {
    d7be:	2800      	cmp	r0, #0
    d7c0:	d0e3      	beq.n	d78a <store_app_key+0x32>
    d7c2:	4a09      	ldr	r2, [pc, #36]	; (d7e8 <store_app_key+0x90>)
    d7c4:	4c07      	ldr	r4, [pc, #28]	; (d7e4 <store_app_key+0x8c>)
    d7c6:	4668      	mov	r0, sp
    d7c8:	1aa4      	subs	r4, r4, r2
    d7ca:	08e4      	lsrs	r4, r4, #3
    d7cc:	f7f5 f984 	bl	2ad8 <z_log_strdup>
		BT_ERR("Failed to store AppKey %s value", log_strdup(path));
    d7d0:	01a4      	lsls	r4, r4, #6
    d7d2:	f044 0401 	orr.w	r4, r4, #1
    d7d6:	4601      	mov	r1, r0
    d7d8:	4622      	mov	r2, r4
    d7da:	4805      	ldr	r0, [pc, #20]	; (d7f0 <store_app_key+0x98>)
    d7dc:	e7d3      	b.n	d786 <store_app_key+0x2e>
    d7de:	bf00      	nop
    d7e0:	0002ce34 	.word	0x0002ce34
    d7e4:	00029998 	.word	0x00029998
    d7e8:	00029870 	.word	0x00029870
    d7ec:	0002ce46 	.word	0x0002ce46
    d7f0:	0002ce62 	.word	0x0002ce62

0000d7f4 <clear_app_key>:
{
    d7f4:	b510      	push	{r4, lr}
    d7f6:	b086      	sub	sp, #24
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
    d7f8:	4603      	mov	r3, r0
    d7fa:	4a0b      	ldr	r2, [pc, #44]	; (d828 <clear_app_key+0x34>)
{
    d7fc:	4604      	mov	r4, r0
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
    d7fe:	2114      	movs	r1, #20
    d800:	a801      	add	r0, sp, #4
    d802:	f013 fd40 	bl	21286 <snprintk>
	err = settings_delete(path);
    d806:	a801      	add	r0, sp, #4
    d808:	f014 ff6f 	bl	226ea <settings_delete>
	if (err) {
    d80c:	b150      	cbz	r0, d824 <clear_app_key+0x30>
    d80e:	4a07      	ldr	r2, [pc, #28]	; (d82c <clear_app_key+0x38>)
    d810:	4b07      	ldr	r3, [pc, #28]	; (d830 <clear_app_key+0x3c>)
		BT_ERR("Failed to clear AppKeyIndex 0x%03x", app_idx);
    d812:	4808      	ldr	r0, [pc, #32]	; (d834 <clear_app_key+0x40>)
    d814:	1ad2      	subs	r2, r2, r3
    d816:	08d2      	lsrs	r2, r2, #3
    d818:	0192      	lsls	r2, r2, #6
    d81a:	f042 0201 	orr.w	r2, r2, #1
    d81e:	4621      	mov	r1, r4
    d820:	f014 f970 	bl	21b04 <log_1>
}
    d824:	b006      	add	sp, #24
    d826:	bd10      	pop	{r4, pc}
    d828:	0002ce34 	.word	0x0002ce34
    d82c:	00029998 	.word	0x00029998
    d830:	00029870 	.word	0x00029870
    d834:	0002ce82 	.word	0x0002ce82

0000d838 <update_app_key_settings>:
{
    d838:	b470      	push	{r4, r5, r6}
		if (!update->valid) {
    d83a:	4c20      	ldr	r4, [pc, #128]	; (d8bc <update_app_key_settings+0x84>)
    d83c:	7863      	ldrb	r3, [r4, #1]
    d83e:	f013 0310 	ands.w	r3, r3, #16
	uint8_t clear = store ? 0U : 1U;
    d842:	f081 0501 	eor.w	r5, r1, #1
		if (!update->valid) {
    d846:	d018      	beq.n	d87a <update_app_key_settings+0x42>
		if (update->key_idx == key_idx) {
    d848:	8822      	ldrh	r2, [r4, #0]
    d84a:	f3c2 020b 	ubfx	r2, r2, #0, #12
    d84e:	4282      	cmp	r2, r0
	*free_slot = NULL;
    d850:	f04f 0200 	mov.w	r2, #0
		if (update->key_idx == key_idx) {
    d854:	d113      	bne.n	d87e <update_app_key_settings+0x46>
		struct app_key_update *update = &app_key_updates[i];
    d856:	4623      	mov	r3, r4
		if (!update->valid) {
    d858:	78e6      	ldrb	r6, [r4, #3]
    d85a:	06f6      	lsls	r6, r6, #27
    d85c:	d51b      	bpl.n	d896 <update_app_key_settings+0x5e>
		if (update->key_idx == key_idx) {
    d85e:	8864      	ldrh	r4, [r4, #2]
    d860:	f3c4 040b 	ubfx	r4, r4, #0, #12
    d864:	4284      	cmp	r4, r0
    d866:	d00c      	beq.n	d882 <update_app_key_settings+0x4a>
	if (update) {
    d868:	b16b      	cbz	r3, d886 <update_app_key_settings+0x4e>
		update->clear = clear;
    d86a:	785a      	ldrb	r2, [r3, #1]
    d86c:	f365 1245 	bfi	r2, r5, #5, #1
    d870:	705a      	strb	r2, [r3, #1]
}
    d872:	bc70      	pop	{r4, r5, r6}
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_APP_KEYS_PENDING);
    d874:	2002      	movs	r0, #2
    d876:	f005 be09 	b.w	1348c <bt_mesh_settings_store_schedule>
			*free_slot = update;
    d87a:	4622      	mov	r2, r4
    d87c:	e7ec      	b.n	d858 <update_app_key_settings+0x20>
	match = NULL;
    d87e:	4613      	mov	r3, r2
    d880:	e7ea      	b.n	d858 <update_app_key_settings+0x20>
		struct app_key_update *update = &app_key_updates[i];
    d882:	4b0f      	ldr	r3, [pc, #60]	; (d8c0 <update_app_key_settings+0x88>)
    d884:	e7f1      	b.n	d86a <update_app_key_settings+0x32>
	if (!free_slot) {
    d886:	b94a      	cbnz	r2, d89c <update_app_key_settings+0x64>
		if (store) {
    d888:	b111      	cbz	r1, d890 <update_app_key_settings+0x58>
}
    d88a:	bc70      	pop	{r4, r5, r6}
			store_app_key(app_idx);
    d88c:	f7ff bf64 	b.w	d758 <store_app_key>
}
    d890:	bc70      	pop	{r4, r5, r6}
			clear_app_key(app_idx);
    d892:	f7ff bfaf 	b.w	d7f4 <clear_app_key>
	if (update) {
    d896:	2b00      	cmp	r3, #0
    d898:	d1e7      	bne.n	d86a <update_app_key_settings+0x32>
			*free_slot = update;
    d89a:	4a09      	ldr	r2, [pc, #36]	; (d8c0 <update_app_key_settings+0x88>)
	free_slot->key_idx = app_idx;
    d89c:	8811      	ldrh	r1, [r2, #0]
    d89e:	f3c0 030b 	ubfx	r3, r0, #0, #12
    d8a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    d8a6:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    d8aa:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
    d8ae:	f3c3 030d 	ubfx	r3, r3, #0, #14
    d8b2:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
    d8b6:	430b      	orrs	r3, r1
    d8b8:	8013      	strh	r3, [r2, #0]
    d8ba:	e7da      	b.n	d872 <update_app_key_settings+0x3a>
    d8bc:	200036e4 	.word	0x200036e4
    d8c0:	200036e6 	.word	0x200036e6

0000d8c4 <subnet_evt>:
	return BT_MESH_KEY_UNUSED;
}

static void subnet_evt(struct bt_mesh_subnet *sub, enum bt_mesh_key_evt evt)
{
	if (evt == BT_MESH_KEY_UPDATED || evt == BT_MESH_KEY_ADDED) {
    d8c4:	f011 0ffd 	tst.w	r1, #253	; 0xfd
{
    d8c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d8cc:	4607      	mov	r7, r0
    d8ce:	460d      	mov	r5, r1
	if (evt == BT_MESH_KEY_UPDATED || evt == BT_MESH_KEY_ADDED) {
    d8d0:	d015      	beq.n	d8fe <subnet_evt+0x3a>
    d8d2:	4c1e      	ldr	r4, [pc, #120]	; (d94c <subnet_evt+0x88>)
    d8d4:	f04f 0802 	mov.w	r8, #2
	}

	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
		struct app_key *app = &apps[i];

		if (app->app_idx == BT_MESH_KEY_UNUSED) {
    d8d8:	f64f 79ff 	movw	r9, #65535	; 0xffff
    d8dc:	8863      	ldrh	r3, [r4, #2]
    d8de:	454b      	cmp	r3, r9
    d8e0:	d008      	beq.n	d8f4 <subnet_evt+0x30>
			continue;
		}

		if (app->net_idx != sub->net_idx) {
    d8e2:	8822      	ldrh	r2, [r4, #0]
    d8e4:	8bbb      	ldrh	r3, [r7, #28]
    d8e6:	429a      	cmp	r2, r3
    d8e8:	d104      	bne.n	d8f4 <subnet_evt+0x30>
			continue;
		}

		if (evt == BT_MESH_KEY_DELETED) {
    d8ea:	2d01      	cmp	r5, #1
    d8ec:	d10c      	bne.n	d908 <subnet_evt+0x44>
			app_key_del(app);
    d8ee:	4620      	mov	r0, r4
    d8f0:	f018 f987 	bl	25c02 <app_key_del>
	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
    d8f4:	f1b8 0f01 	cmp.w	r8, #1
    d8f8:	f104 0428 	add.w	r4, r4, #40	; 0x28
    d8fc:	d101      	bne.n	d902 <subnet_evt+0x3e>
			app_key_revoke(app);
		} else if (evt == BT_MESH_KEY_SWAPPED && app->updated) {
			app_key_evt(app, BT_MESH_KEY_SWAPPED);
		}
	}
}
    d8fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d902:	f04f 0801 	mov.w	r8, #1
    d906:	e7e9      	b.n	d8dc <subnet_evt+0x18>
		} else if (evt == BT_MESH_KEY_REVOKED) {
    d908:	2d04      	cmp	r5, #4
    d90a:	d119      	bne.n	d940 <subnet_evt+0x7c>
	if (!app->updated) {
    d90c:	7923      	ldrb	r3, [r4, #4]
    d90e:	2b00      	cmp	r3, #0
    d910:	d0f0      	beq.n	d8f4 <subnet_evt+0x30>
	memcpy(&app->keys[0], &app->keys[1], sizeof(app->keys[0]));
    d912:	f104 0616 	add.w	r6, r4, #22
    d916:	2211      	movs	r2, #17
    d918:	4631      	mov	r1, r6
    d91a:	1d60      	adds	r0, r4, #5
    d91c:	f016 fa44 	bl	23da8 <memcpy>
	memset(&app->keys[1], 0, sizeof(app->keys[1]));
    d920:	2100      	movs	r1, #0
    d922:	2211      	movs	r2, #17
    d924:	4630      	mov	r0, r6
    d926:	f016 fa4a 	bl	23dbe <memset>
	app->updated = false;
    d92a:	2300      	movs	r3, #0
		update_app_key_settings(app->app_idx, true);
    d92c:	8860      	ldrh	r0, [r4, #2]
	app->updated = false;
    d92e:	7123      	strb	r3, [r4, #4]
		update_app_key_settings(app->app_idx, true);
    d930:	2101      	movs	r1, #1
    d932:	f7ff ff81 	bl	d838 <update_app_key_settings>
			app_key_evt(app, BT_MESH_KEY_SWAPPED);
    d936:	4629      	mov	r1, r5
    d938:	4620      	mov	r0, r4
    d93a:	f7ff fedb 	bl	d6f4 <app_key_evt>
    d93e:	e7d9      	b.n	d8f4 <subnet_evt+0x30>
		} else if (evt == BT_MESH_KEY_SWAPPED && app->updated) {
    d940:	2d03      	cmp	r5, #3
    d942:	d1d7      	bne.n	d8f4 <subnet_evt+0x30>
    d944:	7923      	ldrb	r3, [r4, #4]
    d946:	2b00      	cmp	r3, #0
    d948:	d0d4      	beq.n	d8f4 <subnet_evt+0x30>
    d94a:	e7f4      	b.n	d936 <subnet_evt+0x72>
    d94c:	20000f70 	.word	0x20000f70

0000d950 <app_key_set>:
	}
}

static int app_key_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
    d950:	b5f0      	push	{r4, r5, r6, r7, lr}
    d952:	460c      	mov	r4, r1
    d954:	b08b      	sub	sp, #44	; 0x2c
    d956:	4616      	mov	r6, r2
    d958:	461f      	mov	r7, r3
	struct app_key_val key;
	uint16_t app_idx;
	int err;

	if (!name) {
    d95a:	b970      	cbnz	r0, d97a <app_key_set+0x2a>
    d95c:	4b1d      	ldr	r3, [pc, #116]	; (d9d4 <app_key_set+0x84>)
    d95e:	491e      	ldr	r1, [pc, #120]	; (d9d8 <app_key_set+0x88>)
		BT_ERR("Insufficient number of arguments");
    d960:	481e      	ldr	r0, [pc, #120]	; (d9dc <app_key_set+0x8c>)
    d962:	1ac9      	subs	r1, r1, r3
    d964:	08c9      	lsrs	r1, r1, #3
    d966:	0189      	lsls	r1, r1, #6
    d968:	f041 0101 	orr.w	r1, r1, #1
    d96c:	f014 f8bd 	bl	21aea <log_0>
		return -ENOENT;
    d970:	f06f 0401 	mvn.w	r4, #1
	}

	BT_DBG("AppKeyIndex 0x%03x recovered from storage", app_idx);

	return 0;
}
    d974:	4620      	mov	r0, r4
    d976:	b00b      	add	sp, #44	; 0x2c
    d978:	bdf0      	pop	{r4, r5, r6, r7, pc}
	app_idx = strtol(name, NULL, 16);
    d97a:	2210      	movs	r2, #16
    d97c:	2100      	movs	r1, #0
    d97e:	f016 f8cc 	bl	23b1a <strtol>
    d982:	4605      	mov	r5, r0
	if (!len_rd) {
    d984:	2c00      	cmp	r4, #0
    d986:	d0f5      	beq.n	d974 <app_key_set+0x24>
	err = bt_mesh_settings_set(read_cb, cb_arg, &key, sizeof(key));
    d988:	2323      	movs	r3, #35	; 0x23
    d98a:	aa01      	add	r2, sp, #4
    d98c:	4639      	mov	r1, r7
    d98e:	4630      	mov	r0, r6
    d990:	f005 fd4a 	bl	13428 <bt_mesh_settings_set>
	if (err < 0) {
    d994:	2800      	cmp	r0, #0
    d996:	db19      	blt.n	d9cc <app_key_set+0x7c>
	err = bt_mesh_app_key_set(app_idx, key.net_idx, key.val[0],
    d998:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d99c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    d9a0:	b10b      	cbz	r3, d9a6 <app_key_set+0x56>
    d9a2:	f10d 0317 	add.w	r3, sp, #23
    d9a6:	f10d 0207 	add.w	r2, sp, #7
    d9aa:	b2a8      	uxth	r0, r5
    d9ac:	f018 f9dd 	bl	25d6a <bt_mesh_app_key_set>
	if (err) {
    d9b0:	4604      	mov	r4, r0
    d9b2:	2800      	cmp	r0, #0
    d9b4:	d0de      	beq.n	d974 <app_key_set+0x24>
    d9b6:	4b07      	ldr	r3, [pc, #28]	; (d9d4 <app_key_set+0x84>)
    d9b8:	4907      	ldr	r1, [pc, #28]	; (d9d8 <app_key_set+0x88>)
		BT_ERR("Failed to set \'app-key\'");
    d9ba:	4809      	ldr	r0, [pc, #36]	; (d9e0 <app_key_set+0x90>)
    d9bc:	1ac9      	subs	r1, r1, r3
    d9be:	08c9      	lsrs	r1, r1, #3
    d9c0:	0189      	lsls	r1, r1, #6
    d9c2:	f041 0101 	orr.w	r1, r1, #1
    d9c6:	f014 f890 	bl	21aea <log_0>
		return err;
    d9ca:	e7d3      	b.n	d974 <app_key_set+0x24>
		return -EINVAL;
    d9cc:	f06f 0415 	mvn.w	r4, #21
    d9d0:	e7d0      	b.n	d974 <app_key_set+0x24>
    d9d2:	bf00      	nop
    d9d4:	00029870 	.word	0x00029870
    d9d8:	00029998 	.word	0x00029998
    d9dc:	0002b425 	.word	0x0002b425
    d9e0:	0002cea5 	.word	0x0002cea5

0000d9e4 <bt_mesh_app_key_exists>:
		if (apps[i].app_idx == app_idx) {
    d9e4:	4b05      	ldr	r3, [pc, #20]	; (d9fc <bt_mesh_app_key_exists+0x18>)
    d9e6:	885a      	ldrh	r2, [r3, #2]
    d9e8:	4282      	cmp	r2, r0
    d9ea:	d004      	beq.n	d9f6 <bt_mesh_app_key_exists+0x12>
    d9ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    d9ee:	1a1b      	subs	r3, r3, r0
    d9f0:	4258      	negs	r0, r3
    d9f2:	4158      	adcs	r0, r3
    d9f4:	4770      	bx	lr
			return true;
    d9f6:	2001      	movs	r0, #1
}
    d9f8:	4770      	bx	lr
    d9fa:	bf00      	nop
    d9fc:	20000f70 	.word	0x20000f70

0000da00 <bt_mesh_app_keys_get>:
{
    da00:	b5f0      	push	{r4, r5, r6, r7, lr}
    da02:	4c11      	ldr	r4, [pc, #68]	; (da48 <bt_mesh_app_keys_get+0x48>)
    da04:	4605      	mov	r5, r0
    da06:	2602      	movs	r6, #2
	size_t count = 0;
    da08:	2000      	movs	r0, #0
		if (app->app_idx == BT_MESH_KEY_UNUSED) {
    da0a:	f64f 77ff 	movw	r7, #65535	; 0xffff
    da0e:	f8b4 c002 	ldrh.w	ip, [r4, #2]
    da12:	45bc      	cmp	ip, r7
    da14:	d007      	beq.n	da26 <bt_mesh_app_keys_get+0x26>
		if (net_idx != BT_MESH_KEY_ANY && app->net_idx != net_idx) {
    da16:	42bd      	cmp	r5, r7
    da18:	d003      	beq.n	da22 <bt_mesh_app_keys_get+0x22>
    da1a:	f8b4 e000 	ldrh.w	lr, [r4]
    da1e:	45ae      	cmp	lr, r5
    da20:	d101      	bne.n	da26 <bt_mesh_app_keys_get+0x26>
		if (skip) {
    da22:	b13b      	cbz	r3, da34 <bt_mesh_app_keys_get+0x34>
			skip--;
    da24:	3b01      	subs	r3, #1
	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
    da26:	2e01      	cmp	r6, #1
    da28:	f104 0428 	add.w	r4, r4, #40	; 0x28
    da2c:	d100      	bne.n	da30 <bt_mesh_app_keys_get+0x30>
}
    da2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    da30:	2601      	movs	r6, #1
    da32:	e7ec      	b.n	da0e <bt_mesh_app_keys_get+0xe>
		if (count >= max) {
    da34:	4282      	cmp	r2, r0
    da36:	d903      	bls.n	da40 <bt_mesh_app_keys_get+0x40>
		app_idxs[count++] = app->app_idx;
    da38:	f821 c010 	strh.w	ip, [r1, r0, lsl #1]
    da3c:	3001      	adds	r0, #1
    da3e:	e7f2      	b.n	da26 <bt_mesh_app_keys_get+0x26>
			return -ENOMEM;
    da40:	f06f 000b 	mvn.w	r0, #11
    da44:	e7f3      	b.n	da2e <bt_mesh_app_keys_get+0x2e>
    da46:	bf00      	nop
    da48:	20000f70 	.word	0x20000f70

0000da4c <bt_mesh_keys_resolve>:
{
    da4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    da4e:	460f      	mov	r7, r1
	if (BT_MESH_IS_DEV_KEY(ctx->app_idx)) {
    da50:	8841      	ldrh	r1, [r0, #2]
{
    da52:	461e      	mov	r6, r3
	if (BT_MESH_IS_DEV_KEY(ctx->app_idx)) {
    da54:	1ccb      	adds	r3, r1, #3
    da56:	b29b      	uxth	r3, r3
    da58:	2b01      	cmp	r3, #1
{
    da5a:	4604      	mov	r4, r0
    da5c:	4615      	mov	r5, r2
	if (BT_MESH_IS_DEV_KEY(ctx->app_idx)) {
    da5e:	d82a      	bhi.n	dab6 <bt_mesh_keys_resolve+0x6a>
		*sub = bt_mesh_subnet_get(ctx->net_idx);
    da60:	8800      	ldrh	r0, [r0, #0]
    da62:	f7ff fc39 	bl	d2d8 <bt_mesh_subnet_get>
    da66:	6038      	str	r0, [r7, #0]
		if (!*sub) {
    da68:	b948      	cbnz	r0, da7e <bt_mesh_keys_resolve+0x32>
    da6a:	4a24      	ldr	r2, [pc, #144]	; (dafc <bt_mesh_keys_resolve+0xb0>)
    da6c:	4b24      	ldr	r3, [pc, #144]	; (db00 <bt_mesh_keys_resolve+0xb4>)
		BT_WARN("Unknown NetKey 0x%03x", app->net_idx);
    da6e:	8821      	ldrh	r1, [r4, #0]
    da70:	4824      	ldr	r0, [pc, #144]	; (db04 <bt_mesh_keys_resolve+0xb8>)
    da72:	1ad2      	subs	r2, r2, r3
    da74:	08d2      	lsrs	r2, r2, #3
    da76:	0192      	lsls	r2, r2, #6
    da78:	f042 0202 	orr.w	r2, r2, #2
    da7c:	e011      	b.n	daa2 <bt_mesh_keys_resolve+0x56>
		if (ctx->app_idx == BT_MESH_KEY_DEV_REMOTE &&
    da7e:	8862      	ldrh	r2, [r4, #2]
    da80:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    da84:	429a      	cmp	r2, r3
    da86:	d111      	bne.n	daac <bt_mesh_keys_resolve+0x60>
		    !bt_mesh_has_addr(ctx->addr)) {
    da88:	88a0      	ldrh	r0, [r4, #4]
    da8a:	f002 fdbd 	bl	10608 <bt_mesh_has_addr>
		if (ctx->app_idx == BT_MESH_KEY_DEV_REMOTE &&
    da8e:	b968      	cbnz	r0, daac <bt_mesh_keys_resolve+0x60>
    da90:	4a1a      	ldr	r2, [pc, #104]	; (dafc <bt_mesh_keys_resolve+0xb0>)
    da92:	4b1b      	ldr	r3, [pc, #108]	; (db00 <bt_mesh_keys_resolve+0xb4>)
				BT_WARN("No DevKey for 0x%04x", ctx->addr);
    da94:	88a1      	ldrh	r1, [r4, #4]
    da96:	481c      	ldr	r0, [pc, #112]	; (db08 <bt_mesh_keys_resolve+0xbc>)
    da98:	1ad2      	subs	r2, r2, r3
    da9a:	08d2      	lsrs	r2, r2, #3
    da9c:	0192      	lsls	r2, r2, #6
    da9e:	f042 0202 	orr.w	r2, r2, #2
		BT_WARN("Unknown NetKey 0x%03x", app->net_idx);
    daa2:	f014 f82f 	bl	21b04 <log_1>
		return -EINVAL;
    daa6:	f06f 0015 	mvn.w	r0, #21
    daaa:	e003      	b.n	dab4 <bt_mesh_keys_resolve+0x68>
			*app_key = bt_mesh.dev_key;
    daac:	4b17      	ldr	r3, [pc, #92]	; (db0c <bt_mesh_keys_resolve+0xc0>)
    daae:	602b      	str	r3, [r5, #0]
		*aid = 0;
    dab0:	2000      	movs	r0, #0
    dab2:	7030      	strb	r0, [r6, #0]
}
    dab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	app = app_get(ctx->app_idx);
    dab6:	4608      	mov	r0, r1
    dab8:	f7ff fe0a 	bl	d6d0 <app_get>
	if (!app) {
    dabc:	4604      	mov	r4, r0
    dabe:	b940      	cbnz	r0, dad2 <bt_mesh_keys_resolve+0x86>
    dac0:	4a0e      	ldr	r2, [pc, #56]	; (dafc <bt_mesh_keys_resolve+0xb0>)
    dac2:	4b0f      	ldr	r3, [pc, #60]	; (db00 <bt_mesh_keys_resolve+0xb4>)
		BT_WARN("Unknown AppKey 0x%03x", ctx->app_idx);
    dac4:	4812      	ldr	r0, [pc, #72]	; (db10 <bt_mesh_keys_resolve+0xc4>)
    dac6:	1ad2      	subs	r2, r2, r3
    dac8:	08d2      	lsrs	r2, r2, #3
    daca:	0192      	lsls	r2, r2, #6
    dacc:	f042 0202 	orr.w	r2, r2, #2
    dad0:	e7e7      	b.n	daa2 <bt_mesh_keys_resolve+0x56>
	*sub = bt_mesh_subnet_get(app->net_idx);
    dad2:	8800      	ldrh	r0, [r0, #0]
    dad4:	f7ff fc00 	bl	d2d8 <bt_mesh_subnet_get>
    dad8:	6038      	str	r0, [r7, #0]
	if (!*sub) {
    dada:	2800      	cmp	r0, #0
    dadc:	d0c5      	beq.n	da6a <bt_mesh_keys_resolve+0x1e>
	if ((*sub)->kr_phase == BT_MESH_KR_PHASE_2 && app->updated) {
    dade:	7f83      	ldrb	r3, [r0, #30]
    dae0:	2b02      	cmp	r3, #2
    dae2:	d107      	bne.n	daf4 <bt_mesh_keys_resolve+0xa8>
    dae4:	7923      	ldrb	r3, [r4, #4]
    dae6:	b12b      	cbz	r3, daf4 <bt_mesh_keys_resolve+0xa8>
		*aid = app->keys[1].id;
    dae8:	7da3      	ldrb	r3, [r4, #22]
    daea:	7033      	strb	r3, [r6, #0]
		*app_key = app->keys[1].val;
    daec:	3417      	adds	r4, #23
		*app_key = app->keys[0].val;
    daee:	602c      	str	r4, [r5, #0]
	return 0;
    daf0:	2000      	movs	r0, #0
    daf2:	e7df      	b.n	dab4 <bt_mesh_keys_resolve+0x68>
		*aid = app->keys[0].id;
    daf4:	7963      	ldrb	r3, [r4, #5]
    daf6:	7033      	strb	r3, [r6, #0]
		*app_key = app->keys[0].val;
    daf8:	3406      	adds	r4, #6
    dafa:	e7f8      	b.n	daee <bt_mesh_keys_resolve+0xa2>
    dafc:	00029998 	.word	0x00029998
    db00:	00029870 	.word	0x00029870
    db04:	0002cebd 	.word	0x0002cebd
    db08:	0002ced3 	.word	0x0002ced3
    db0c:	20001928 	.word	0x20001928
    db10:	0002cee8 	.word	0x0002cee8

0000db14 <bt_mesh_app_key_find>:
{
    db14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    db18:	f8dd 9020 	ldr.w	r9, [sp, #32]
    db1c:	4688      	mov	r8, r1
    db1e:	4616      	mov	r6, r2
    db20:	461f      	mov	r7, r3
	if (dev_key) {
    db22:	4604      	mov	r4, r0
    db24:	b180      	cbz	r0, db48 <bt_mesh_app_key_find+0x34>
		if (BT_MESH_ADDR_IS_UNICAST(rx->ctx.recv_dst)) {
    db26:	f9b2 300a 	ldrsh.w	r3, [r2, #10]
    db2a:	2b00      	cmp	r3, #0
    db2c:	dc03      	bgt.n	db36 <bt_mesh_app_key_find+0x22>
		return BT_MESH_KEY_UNUSED;
    db2e:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
    db32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			err = cb(rx, bt_mesh.dev_key, cb_data);
    db36:	4919      	ldr	r1, [pc, #100]	; (db9c <bt_mesh_app_key_find+0x88>)
    db38:	464a      	mov	r2, r9
    db3a:	4630      	mov	r0, r6
    db3c:	47b8      	blx	r7
			if (!err) {
    db3e:	2800      	cmp	r0, #0
    db40:	d1f5      	bne.n	db2e <bt_mesh_app_key_find+0x1a>
				return BT_MESH_KEY_DEV_LOCAL;
    db42:	f64f 70fe 	movw	r0, #65534	; 0xfffe
    db46:	e7f4      	b.n	db32 <bt_mesh_app_key_find+0x1e>
    db48:	4d15      	ldr	r5, [pc, #84]	; (dba0 <bt_mesh_app_key_find+0x8c>)
		if (app->app_idx == BT_MESH_KEY_UNUSED) {
    db4a:	f64f 7aff 	movw	sl, #65535	; 0xffff
    db4e:	f835 3c14 	ldrh.w	r3, [r5, #-20]
    db52:	4553      	cmp	r3, sl
    db54:	4629      	mov	r1, r5
    db56:	d01b      	beq.n	db90 <bt_mesh_app_key_find+0x7c>
		if (app->net_idx != rx->sub->net_idx) {
    db58:	6833      	ldr	r3, [r6, #0]
    db5a:	f835 2c16 	ldrh.w	r2, [r5, #-22]
    db5e:	8b9b      	ldrh	r3, [r3, #28]
    db60:	429a      	cmp	r2, r3
    db62:	d115      	bne.n	db90 <bt_mesh_app_key_find+0x7c>
		if (rx->new_key && app->updated) {
    db64:	7d33      	ldrb	r3, [r6, #20]
    db66:	079b      	lsls	r3, r3, #30
    db68:	d502      	bpl.n	db70 <bt_mesh_app_key_find+0x5c>
    db6a:	f815 3c12 	ldrb.w	r3, [r5, #-18]
    db6e:	b90b      	cbnz	r3, db74 <bt_mesh_app_key_find+0x60>
			cred = &app->keys[0];
    db70:	f1a5 0111 	sub.w	r1, r5, #17
		if (cred->id != aid) {
    db74:	780b      	ldrb	r3, [r1, #0]
    db76:	4543      	cmp	r3, r8
    db78:	d10a      	bne.n	db90 <bt_mesh_app_key_find+0x7c>
		err = cb(rx, cred->val, cb_data);
    db7a:	464a      	mov	r2, r9
    db7c:	3101      	adds	r1, #1
    db7e:	4630      	mov	r0, r6
    db80:	47b8      	blx	r7
		if (err) {
    db82:	b928      	cbnz	r0, db90 <bt_mesh_app_key_find+0x7c>
		return app->app_idx;
    db84:	4807      	ldr	r0, [pc, #28]	; (dba4 <bt_mesh_app_key_find+0x90>)
    db86:	2328      	movs	r3, #40	; 0x28
    db88:	fb03 0404 	mla	r4, r3, r4, r0
    db8c:	8860      	ldrh	r0, [r4, #2]
    db8e:	e7d0      	b.n	db32 <bt_mesh_app_key_find+0x1e>
	for (i = 0; i < ARRAY_SIZE(apps); i++) {
    db90:	3528      	adds	r5, #40	; 0x28
    db92:	2c00      	cmp	r4, #0
    db94:	d1cb      	bne.n	db2e <bt_mesh_app_key_find+0x1a>
    db96:	2401      	movs	r4, #1
    db98:	e7d9      	b.n	db4e <bt_mesh_app_key_find+0x3a>
    db9a:	bf00      	nop
    db9c:	20001928 	.word	0x20001928
    dba0:	20000f86 	.word	0x20000f86
    dba4:	20000f70 	.word	0x20000f70

0000dba8 <bt_mesh_app_keys_reset>:
{
    dba8:	b510      	push	{r4, lr}
		if (app->app_idx != BT_MESH_KEY_UNUSED) {
    dbaa:	4c0a      	ldr	r4, [pc, #40]	; (dbd4 <bt_mesh_app_keys_reset+0x2c>)
    dbac:	8862      	ldrh	r2, [r4, #2]
    dbae:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dbb2:	429a      	cmp	r2, r3
    dbb4:	d002      	beq.n	dbbc <bt_mesh_app_keys_reset+0x14>
			app_key_del(app);
    dbb6:	4620      	mov	r0, r4
    dbb8:	f018 f823 	bl	25c02 <app_key_del>
		if (app->app_idx != BT_MESH_KEY_UNUSED) {
    dbbc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    dbbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dbc2:	429a      	cmp	r2, r3
    dbc4:	d004      	beq.n	dbd0 <bt_mesh_app_keys_reset+0x28>
}
    dbc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			app_key_del(app);
    dbca:	4803      	ldr	r0, [pc, #12]	; (dbd8 <bt_mesh_app_keys_reset+0x30>)
    dbcc:	f018 b819 	b.w	25c02 <app_key_del>
}
    dbd0:	bd10      	pop	{r4, pc}
    dbd2:	bf00      	nop
    dbd4:	20000f70 	.word	0x20000f70
    dbd8:	20000f98 	.word	0x20000f98

0000dbdc <bt_mesh_app_key_pending_store>:

BT_MESH_SETTINGS_DEFINE(app, "AppKey", app_key_set);

void bt_mesh_app_key_pending_store(void)
{
    dbdc:	b510      	push	{r4, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(app_key_updates); i++) {
		struct app_key_update *update = &app_key_updates[i];

		if (!update->valid) {
    dbde:	4c12      	ldr	r4, [pc, #72]	; (dc28 <bt_mesh_app_key_pending_store+0x4c>)
    dbe0:	7863      	ldrb	r3, [r4, #1]
    dbe2:	06d8      	lsls	r0, r3, #27
    dbe4:	d50a      	bpl.n	dbfc <bt_mesh_app_key_pending_store+0x20>
			continue;
		}

		if (update->clear) {
			clear_app_key(update->key_idx);
    dbe6:	8820      	ldrh	r0, [r4, #0]
		if (update->clear) {
    dbe8:	0699      	lsls	r1, r3, #26
			clear_app_key(update->key_idx);
    dbea:	f3c0 000b 	ubfx	r0, r0, #0, #12
		if (update->clear) {
    dbee:	d414      	bmi.n	dc1a <bt_mesh_app_key_pending_store+0x3e>
		} else {
			store_app_key(update->key_idx);
    dbf0:	f7ff fdb2 	bl	d758 <store_app_key>
		}

		update->valid = 0U;
    dbf4:	7863      	ldrb	r3, [r4, #1]
    dbf6:	f36f 1304 	bfc	r3, #4, #1
    dbfa:	7063      	strb	r3, [r4, #1]
		if (!update->valid) {
    dbfc:	78e3      	ldrb	r3, [r4, #3]
    dbfe:	06da      	lsls	r2, r3, #27
    dc00:	d50a      	bpl.n	dc18 <bt_mesh_app_key_pending_store+0x3c>
			clear_app_key(update->key_idx);
    dc02:	8860      	ldrh	r0, [r4, #2]
		if (update->clear) {
    dc04:	069b      	lsls	r3, r3, #26
			clear_app_key(update->key_idx);
    dc06:	f3c0 000b 	ubfx	r0, r0, #0, #12
		if (update->clear) {
    dc0a:	d509      	bpl.n	dc20 <bt_mesh_app_key_pending_store+0x44>
			clear_app_key(update->key_idx);
    dc0c:	f7ff fdf2 	bl	d7f4 <clear_app_key>
		update->valid = 0U;
    dc10:	78e3      	ldrb	r3, [r4, #3]
    dc12:	f36f 1304 	bfc	r3, #4, #1
    dc16:	70e3      	strb	r3, [r4, #3]
	}
}
    dc18:	bd10      	pop	{r4, pc}
			clear_app_key(update->key_idx);
    dc1a:	f7ff fdeb 	bl	d7f4 <clear_app_key>
    dc1e:	e7e9      	b.n	dbf4 <bt_mesh_app_key_pending_store+0x18>
			store_app_key(update->key_idx);
    dc20:	f7ff fd9a 	bl	d758 <store_app_key>
    dc24:	e7f4      	b.n	dc10 <bt_mesh_app_key_pending_store+0x34>
    dc26:	bf00      	nop
    dc28:	200036e4 	.word	0x200036e4

0000dc2c <va_set>:
	return &virtual_addrs[index];
}

static int va_set(const char *name, size_t len_rd,
		  settings_read_cb read_cb, void *cb_arg)
{
    dc2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    dc2e:	460c      	mov	r4, r1
    dc30:	b087      	sub	sp, #28
    dc32:	4616      	mov	r6, r2
    dc34:	461f      	mov	r7, r3
	struct va_val va;
	struct virtual_addr *lab;
	uint16_t index;
	int err;

	if (!name) {
    dc36:	b970      	cbnz	r0, dc56 <va_set+0x2a>
    dc38:	4b30      	ldr	r3, [pc, #192]	; (dcfc <va_set+0xd0>)
    dc3a:	4931      	ldr	r1, [pc, #196]	; (dd00 <va_set+0xd4>)
		BT_ERR("Insufficient number of arguments");
    dc3c:	4831      	ldr	r0, [pc, #196]	; (dd04 <va_set+0xd8>)
    dc3e:	1ac9      	subs	r1, r1, r3
    dc40:	08c9      	lsrs	r1, r1, #3
    dc42:	0189      	lsls	r1, r1, #6
    dc44:	f041 0101 	orr.w	r1, r1, #1
    dc48:	f013 ff4f 	bl	21aea <log_0>
		return -ENOENT;
    dc4c:	f06f 0401 	mvn.w	r4, #1

	BT_DBG("Restored Virtual Address, addr 0x%04x ref 0x%04x",
	       lab->addr, lab->ref);

	return 0;
}
    dc50:	4620      	mov	r0, r4
    dc52:	b007      	add	sp, #28
    dc54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	index = strtol(name, NULL, 16);
    dc56:	2210      	movs	r2, #16
    dc58:	2100      	movs	r1, #0
    dc5a:	f015 ff5e 	bl	23b1a <strtol>
    dc5e:	4605      	mov	r5, r0
	if (len_rd == 0) {
    dc60:	b954      	cbnz	r4, dc78 <va_set+0x4c>
    dc62:	4926      	ldr	r1, [pc, #152]	; (dcfc <va_set+0xd0>)
    dc64:	4b26      	ldr	r3, [pc, #152]	; (dd00 <va_set+0xd4>)
		BT_WARN("Mesh Virtual Address length = 0");
    dc66:	4828      	ldr	r0, [pc, #160]	; (dd08 <va_set+0xdc>)
    dc68:	1a5b      	subs	r3, r3, r1
    dc6a:	08db      	lsrs	r3, r3, #3
    dc6c:	019b      	lsls	r3, r3, #6
    dc6e:	f043 0102 	orr.w	r1, r3, #2
		BT_WARN("Ignore Mesh Virtual Address ref = 0");
    dc72:	f013 ff3a 	bl	21aea <log_0>
		return 0;
    dc76:	e7eb      	b.n	dc50 <va_set+0x24>
	err = bt_mesh_settings_set(read_cb, cb_arg, &va, sizeof(va));
    dc78:	2314      	movs	r3, #20
    dc7a:	aa01      	add	r2, sp, #4
    dc7c:	4639      	mov	r1, r7
    dc7e:	4630      	mov	r0, r6
    dc80:	f005 fbd2 	bl	13428 <bt_mesh_settings_set>
	if (err) {
    dc84:	4604      	mov	r4, r0
    dc86:	b140      	cbz	r0, dc9a <va_set+0x6e>
    dc88:	491d      	ldr	r1, [pc, #116]	; (dd00 <va_set+0xd4>)
    dc8a:	4b1c      	ldr	r3, [pc, #112]	; (dcfc <va_set+0xd0>)
		BT_ERR("Failed to set \'virtual address\'");
    dc8c:	481f      	ldr	r0, [pc, #124]	; (dd0c <va_set+0xe0>)
    dc8e:	1ac9      	subs	r1, r1, r3
    dc90:	08c9      	lsrs	r1, r1, #3
    dc92:	0189      	lsls	r1, r1, #6
    dc94:	f041 0101 	orr.w	r1, r1, #1
    dc98:	e7eb      	b.n	dc72 <va_set+0x46>
	if (va.ref == 0) {
    dc9a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    dc9e:	b943      	cbnz	r3, dcb2 <va_set+0x86>
    dca0:	4917      	ldr	r1, [pc, #92]	; (dd00 <va_set+0xd4>)
    dca2:	4b16      	ldr	r3, [pc, #88]	; (dcfc <va_set+0xd0>)
		BT_WARN("Ignore Mesh Virtual Address ref = 0");
    dca4:	481a      	ldr	r0, [pc, #104]	; (dd10 <va_set+0xe4>)
    dca6:	1ac9      	subs	r1, r1, r3
    dca8:	08c9      	lsrs	r1, r1, #3
    dcaa:	0189      	lsls	r1, r1, #6
    dcac:	f041 0102 	orr.w	r1, r1, #2
    dcb0:	e7df      	b.n	dc72 <va_set+0x46>
	if (index >= ARRAY_SIZE(virtual_addrs)) {
    dcb2:	b2ab      	uxth	r3, r5
    dcb4:	2b02      	cmp	r3, #2
    dcb6:	d814      	bhi.n	dce2 <va_set+0xb6>
	return &virtual_addrs[index];
    dcb8:	461d      	mov	r5, r3
	memcpy(lab->uuid, va.uuid, 16);
    dcba:	2014      	movs	r0, #20
    dcbc:	4e15      	ldr	r6, [pc, #84]	; (dd14 <va_set+0xe8>)
    dcbe:	4345      	muls	r5, r0
    dcc0:	1d28      	adds	r0, r5, #4
    dcc2:	2210      	movs	r2, #16
    dcc4:	a902      	add	r1, sp, #8
    dcc6:	4430      	add	r0, r6
    dcc8:	f016 f86e 	bl	23da8 <memcpy>
	lab->addr = va.addr;
    dccc:	1973      	adds	r3, r6, r5
    dcce:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    dcd2:	805a      	strh	r2, [r3, #2]
	lab->ref = va.ref;
    dcd4:	5b73      	ldrh	r3, [r6, r5]
    dcd6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    dcda:	f362 030e 	bfi	r3, r2, #0, #15
    dcde:	5373      	strh	r3, [r6, r5]
	return 0;
    dce0:	e7b6      	b.n	dc50 <va_set+0x24>
    dce2:	4b06      	ldr	r3, [pc, #24]	; (dcfc <va_set+0xd0>)
    dce4:	4906      	ldr	r1, [pc, #24]	; (dd00 <va_set+0xd4>)
		BT_WARN("Out of labels buffers");
    dce6:	480c      	ldr	r0, [pc, #48]	; (dd18 <va_set+0xec>)
    dce8:	1ac9      	subs	r1, r1, r3
    dcea:	08c9      	lsrs	r1, r1, #3
    dcec:	0189      	lsls	r1, r1, #6
    dcee:	f041 0102 	orr.w	r1, r1, #2
    dcf2:	f013 fefa 	bl	21aea <log_0>
		return -ENOBUFS;
    dcf6:	f06f 0468 	mvn.w	r4, #104	; 0x68
    dcfa:	e7a9      	b.n	dc50 <va_set+0x24>
    dcfc:	00029870 	.word	0x00029870
    dd00:	00029a38 	.word	0x00029a38
    dd04:	0002b425 	.word	0x0002b425
    dd08:	0002cf1e 	.word	0x0002cf1e
    dd0c:	0002cf3e 	.word	0x0002cf3e
    dd10:	0002cf5e 	.word	0x0002cf5e
    dd14:	200036e8 	.word	0x200036e8
    dd18:	0002cf82 	.word	0x0002cf82

0000dd1c <seg_rx_reset>:
{
    dd1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dd20:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable(&rx->ack);
    dd22:	3030      	adds	r0, #48	; 0x30
{
    dd24:	460f      	mov	r7, r1
	(void)k_work_cancel_delayable(&rx->ack);
    dd26:	f01b f85c 	bl	28de2 <k_work_cancel_delayable>
	for (i = 0; i <= rx->seg_n; i++) {
    dd2a:	2500      	movs	r5, #0
		k_mem_slab_free(&segs, &rx->seg[i]);
    dd2c:	f8df 803c 	ldr.w	r8, [pc, #60]	; dd6c <seg_rx_reset+0x50>
    dd30:	1d26      	adds	r6, r4, #4
		rx->seg[i] = NULL;
    dd32:	46a9      	mov	r9, r5
		if (!rx->seg[i]) {
    dd34:	4631      	mov	r1, r6
    dd36:	3604      	adds	r6, #4
    dd38:	680b      	ldr	r3, [r1, #0]
    dd3a:	b123      	cbz	r3, dd46 <seg_rx_reset+0x2a>
		k_mem_slab_free(&segs, &rx->seg[i]);
    dd3c:	4640      	mov	r0, r8
    dd3e:	f01a fe51 	bl	289e4 <k_mem_slab_free>
		rx->seg[i] = NULL;
    dd42:	f846 9c04 	str.w	r9, [r6, #-4]
	for (i = 0; i <= rx->seg_n; i++) {
    dd46:	7fe3      	ldrb	r3, [r4, #31]
    dd48:	3501      	adds	r5, #1
    dd4a:	f003 021f 	and.w	r2, r3, #31
    dd4e:	4295      	cmp	r5, r2
    dd50:	ddf0      	ble.n	dd34 <seg_rx_reset+0x18>
	rx->in_use = 0U;
    dd52:	f36f 1386 	bfc	r3, #6, #1
    dd56:	77e3      	strb	r3, [r4, #31]
	if (full_reset) {
    dd58:	b137      	cbz	r7, dd68 <seg_rx_reset+0x4c>
		rx->seq_auth = 0U;
    dd5a:	2000      	movs	r0, #0
    dd5c:	2100      	movs	r1, #0
    dd5e:	e9c4 0104 	strd	r0, r1, [r4, #16]
		rx->sub = NULL;
    dd62:	2300      	movs	r3, #0
    dd64:	6023      	str	r3, [r4, #0]
		rx->src = BT_MESH_ADDR_UNASSIGNED;
    dd66:	61a3      	str	r3, [r4, #24]
}
    dd68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dd6c:	200010b4 	.word	0x200010b4

0000dd70 <seg_tx_reset>:
{
    dd70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd74:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable(&tx->retransmit);
    dd76:	3040      	adds	r0, #64	; 0x40
    dd78:	f01b f833 	bl	28de2 <k_work_cancel_delayable>
	tx->cb = NULL;
    dd7c:	2500      	movs	r5, #0
	tx->blocked = false;
    dd7e:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
    dd82:	4f20      	ldr	r7, [pc, #128]	; (de04 <seg_tx_reset+0x94>)
	tx->sub = NULL;
    dd84:	6025      	str	r5, [r4, #0]
	tx->seq_auth = 0U;
    dd86:	2000      	movs	r0, #0
    dd88:	2100      	movs	r1, #0
	tx->cb_data = NULL;
    dd8a:	e9c4 550e 	strd	r5, r5, [r4, #56]	; 0x38
	tx->seq_auth = 0U;
    dd8e:	e9c4 0108 	strd	r0, r1, [r4, #32]
	tx->blocked = false;
    dd92:	f365 0200 	bfi	r2, r5, #0, #1
	tx->src = BT_MESH_ADDR_UNASSIGNED;
    dd96:	62a5      	str	r5, [r4, #40]	; 0x28
	tx->blocked = false;
    dd98:	f884 2036 	strb.w	r2, [r4, #54]	; 0x36
	for (i = 0; i <= tx->seg_n && tx->nack_count; i++) {
    dd9c:	1d26      	adds	r6, r4, #4
	tx->seg[seg_idx] = NULL;
    dd9e:	46a8      	mov	r8, r5
	for (i = 0; i <= tx->seg_n && tx->nack_count; i++) {
    dda0:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    dda4:	b19b      	cbz	r3, ddce <seg_tx_reset+0x5e>
		if (!tx->seg[i]) {
    dda6:	6833      	ldr	r3, [r6, #0]
    dda8:	b153      	cbz	r3, ddc0 <seg_tx_reset+0x50>
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
    ddaa:	4631      	mov	r1, r6
    ddac:	4638      	mov	r0, r7
    ddae:	f01a fe19 	bl	289e4 <k_mem_slab_free>
	tx->seg[seg_idx] = NULL;
    ddb2:	f8c6 8000 	str.w	r8, [r6]
	tx->nack_count--;
    ddb6:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    ddba:	3b01      	subs	r3, #1
    ddbc:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	for (i = 0; i <= tx->seg_n && tx->nack_count; i++) {
    ddc0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    ddc4:	3501      	adds	r5, #1
    ddc6:	42ab      	cmp	r3, r5
    ddc8:	f106 0604 	add.w	r6, r6, #4
    ddcc:	dae8      	bge.n	dda0 <seg_tx_reset+0x30>
	tx->nack_count = 0;
    ddce:	2100      	movs	r1, #0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ddd0:	4b0d      	ldr	r3, [pc, #52]	; (de08 <seg_tx_reset+0x98>)
    ddd2:	f884 1032 	strb.w	r1, [r4, #50]	; 0x32
    ddd6:	f3bf 8f5b 	dmb	ish
    ddda:	e853 2f00 	ldrex	r2, [r3]
    ddde:	f022 0020 	bic.w	r0, r2, #32
    dde2:	e843 0400 	strex	r4, r0, [r3]
    dde6:	2c00      	cmp	r4, #0
    dde8:	d1f7      	bne.n	ddda <seg_tx_reset+0x6a>
    ddea:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_IVU_PENDING)) {
    ddee:	0692      	lsls	r2, r2, #26
    ddf0:	d505      	bpl.n	ddfe <seg_tx_reset+0x8e>
}
    ddf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
    ddf6:	f853 0c08 	ldr.w	r0, [r3, #-8]
    ddfa:	f7fe bc21 	b.w	c640 <bt_mesh_net_iv_update>
}
    ddfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    de02:	bf00      	nop
    de04:	200010b4 	.word	0x200010b4
    de08:	200018d8 	.word	0x200018d8

0000de0c <seg_tx_complete>:
{
    de0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    de10:	4604      	mov	r4, r0
	void *cb_data = tx->cb_data;
    de12:	e9d0 670e 	ldrd	r6, r7, [r0, #56]	; 0x38
		if (&seg_tx[i] != tx &&
    de16:	4813      	ldr	r0, [pc, #76]	; (de64 <seg_tx_complete+0x58>)
    de18:	4284      	cmp	r4, r0
{
    de1a:	460d      	mov	r5, r1
		if (&seg_tx[i] != tx &&
    de1c:	d014      	beq.n	de48 <seg_tx_complete+0x3c>
		    seg_tx[i].blocked &&
    de1e:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
		if (&seg_tx[i] != tx &&
    de22:	07da      	lsls	r2, r3, #31
    de24:	d510      	bpl.n	de48 <seg_tx_complete+0x3c>
	return (tx->src == src) && (tx->dst == dst);
    de26:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    de28:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    de2a:	4291      	cmp	r1, r2
    de2c:	d10c      	bne.n	de48 <seg_tx_complete+0x3c>
    de2e:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
    de30:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    de32:	4291      	cmp	r1, r2
    de34:	d108      	bne.n	de48 <seg_tx_complete+0x3c>
		blocked->blocked = false;
    de36:	f36f 0300 	bfc	r3, #0, #1
    de3a:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
		k_work_reschedule(&blocked->retransmit, K_NO_WAIT);
    de3e:	2200      	movs	r2, #0
    de40:	2300      	movs	r3, #0
    de42:	3040      	adds	r0, #64	; 0x40
    de44:	f012 faee 	bl	20424 <k_work_reschedule>
	seg_tx_reset(tx);
    de48:	4620      	mov	r0, r4
    de4a:	f7ff ff91 	bl	dd70 <seg_tx_reset>
	if (cb && cb->end) {
    de4e:	b136      	cbz	r6, de5e <seg_tx_complete+0x52>
    de50:	6873      	ldr	r3, [r6, #4]
    de52:	b123      	cbz	r3, de5e <seg_tx_complete+0x52>
		cb->end(err, cb_data);
    de54:	4639      	mov	r1, r7
    de56:	4628      	mov	r0, r5
}
    de58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb->end(err, cb_data);
    de5c:	4718      	bx	r3
}
    de5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    de62:	bf00      	nop
    de64:	20001998 	.word	0x20001998

0000de68 <seg_tx_send_unacked>:
{
    de68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!tx->nack_count) {
    de6c:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
{
    de70:	b086      	sub	sp, #24
    de72:	4604      	mov	r4, r0
	if (!tx->nack_count) {
    de74:	2b00      	cmp	r3, #0
    de76:	d03d      	beq.n	def4 <seg_tx_send_unacked+0x8c>
		.net_idx = tx->sub->net_idx,
    de78:	6801      	ldr	r1, [r0, #0]
	struct bt_mesh_net_tx net_tx = {
    de7a:	9103      	str	r1, [sp, #12]
	struct bt_mesh_msg_ctx ctx = {
    de7c:	2300      	movs	r3, #0
    de7e:	2501      	movs	r5, #1
    de80:	f8cd 3006 	str.w	r3, [sp, #6]
    de84:	8b8b      	ldrh	r3, [r1, #28]
    de86:	f8ad 3000 	strh.w	r3, [sp]
	struct bt_mesh_net_tx net_tx = {
    de8a:	8d01      	ldrh	r1, [r0, #40]	; 0x28
	struct bt_mesh_msg_ctx ctx = {
    de8c:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
    de90:	f88d 500a 	strb.w	r5, [sp, #10]
    de94:	f890 5034 	ldrb.w	r5, [r0, #52]	; 0x34
    de98:	f88d 500b 	strb.w	r5, [sp, #11]
	struct bt_mesh_net_tx net_tx = {
    de9c:	f8ad 1014 	strh.w	r1, [sp, #20]
    dea0:	f890 502e 	ldrb.w	r5, [r0, #46]	; 0x2e
    dea4:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    dea8:	f88d 1016 	strb.w	r1, [sp, #22]
		.friend_cred = tx->friend_cred,
    deac:	f3c3 1140 	ubfx	r1, r3, #5, #1
	struct bt_mesh_net_tx net_tx = {
    deb0:	ea41 0185 	orr.w	r1, r1, r5, lsl #2
	struct bt_mesh_msg_ctx ctx = {
    deb4:	f343 0240 	sbfx	r2, r3, #1, #1
	struct bt_mesh_net_tx net_tx = {
    deb8:	f88d 1017 	strb.w	r1, [sp, #23]
	if (!tx->attempts) {
    debc:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
	struct bt_mesh_msg_ctx ctx = {
    dec0:	f8ad 2002 	strh.w	r2, [sp, #2]
		.addr = tx->dst,
    dec4:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
	struct bt_mesh_msg_ctx ctx = {
    dec6:	f8ad 2004 	strh.w	r2, [sp, #4]
	struct bt_mesh_net_tx net_tx = {
    deca:	f8cd d010 	str.w	sp, [sp, #16]
	if (!tx->attempts) {
    dece:	b9a1      	cbnz	r1, defa <seg_tx_send_unacked+0x92>
		if (BT_MESH_ADDR_IS_UNICAST(tx->dst)) {
    ded0:	b212      	sxth	r2, r2
    ded2:	2a00      	cmp	r2, #0
    ded4:	dd0c      	ble.n	def0 <seg_tx_send_unacked+0x88>
    ded6:	4b5b      	ldr	r3, [pc, #364]	; (e044 <seg_tx_send_unacked+0x1dc>)
    ded8:	495b      	ldr	r1, [pc, #364]	; (e048 <seg_tx_send_unacked+0x1e0>)
			BT_ERR("Ran out of retransmit attempts");
    deda:	485c      	ldr	r0, [pc, #368]	; (e04c <seg_tx_send_unacked+0x1e4>)
    dedc:	1ac9      	subs	r1, r1, r3
    dede:	08c9      	lsrs	r1, r1, #3
    dee0:	0189      	lsls	r1, r1, #6
    dee2:	f041 0101 	orr.w	r1, r1, #1
    dee6:	f013 fe00 	bl	21aea <log_0>
			seg_tx_complete(tx, -ETIMEDOUT);
    deea:	f06f 0173 	mvn.w	r1, #115	; 0x73
    deee:	4620      	mov	r0, r4
			seg_tx_complete(tx, 0);
    def0:	f7ff ff8c 	bl	de0c <seg_tx_complete>
}
    def4:	b006      	add	sp, #24
    def6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	tx->sending = 1U;
    defa:	f043 0310 	orr.w	r3, r3, #16
		err = bt_mesh_net_send(&net_tx, seg, &seg_sent_cb, tx);
    defe:	f8df 8150 	ldr.w	r8, [pc, #336]	; e050 <seg_tx_send_unacked+0x1e8>
	tx->sending = 1U;
    df02:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
	for (; tx->seg_o <= tx->seg_n; tx->seg_o++) {
    df06:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    df0a:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
    df0e:	429a      	cmp	r2, r3
    df10:	d208      	bcs.n	df24 <seg_tx_send_unacked+0xbc>
	tx->seg_o = 0U;
    df12:	2300      	movs	r3, #0
    df14:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	tx->attempts--;
    df18:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    df1c:	3b01      	subs	r3, #1
    df1e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    df22:	e067      	b.n	dff4 <seg_tx_send_unacked+0x18c>
		if (!tx->seg[tx->seg_o]) {
    df24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    df28:	685b      	ldr	r3, [r3, #4]
    df2a:	b92b      	cbnz	r3, df38 <seg_tx_send_unacked+0xd0>
	for (; tx->seg_o <= tx->seg_n; tx->seg_o++) {
    df2c:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    df30:	3301      	adds	r3, #1
    df32:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    df36:	e7e6      	b.n	df06 <seg_tx_send_unacked+0x9e>
		seg = bt_mesh_adv_create(BT_MESH_ADV_DATA, tx->xmit,
    df38:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    df3c:	2200      	movs	r2, #0
    df3e:	2300      	movs	r3, #0
    df40:	2001      	movs	r0, #1
    df42:	f7fd fe2f 	bl	bba4 <bt_mesh_adv_create>
		if (!seg) {
    df46:	4607      	mov	r7, r0
    df48:	2800      	cmp	r0, #0
    df4a:	d053      	beq.n	dff4 <seg_tx_send_unacked+0x18c>
	net_buf_simple_reserve(&buf->b, reserve);
    df4c:	f100 0508 	add.w	r5, r0, #8
    df50:	2109      	movs	r1, #9
    df52:	4628      	mov	r0, r5
    df54:	f01a f8df 	bl	28116 <net_buf_simple_reserve>
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
    df58:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
		seg_tx_buf_build(tx, tx->seg_o, &seg->b);
    df5c:	f894 6031 	ldrb.w	r6, [r4, #49]	; 0x31
	uint16_t seq_zero = tx->seq_auth & TRANS_SEQ_ZERO_MASK;
    df60:	f8b4 a020 	ldrh.w	sl, [r4, #32]
	net_buf_simple_add_u8(buf, tx->hdr);
    df64:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
		return BT_MESH_APP_SEG_SDU_MAX;
    df68:	f013 0f02 	tst.w	r3, #2
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
    df6c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
		return BT_MESH_APP_SEG_SDU_MAX;
    df6e:	bf14      	ite	ne
    df70:	f04f 0908 	movne.w	r9, #8
    df74:	f04f 090c 	moveq.w	r9, #12
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
    df78:	fb09 3316 	mls	r3, r9, r6, r3
    df7c:	4599      	cmp	r9, r3
	net_buf_simple_add_u8(buf, tx->hdr);
    df7e:	4628      	mov	r0, r5
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
    df80:	bfa8      	it	ge
    df82:	fa5f f983 	uxtbge.w	r9, r3
	net_buf_simple_add_u8(buf, tx->hdr);
    df86:	f01a f96e 	bl	28266 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, (tx->aszmic << 7) | seq_zero >> 6);
    df8a:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
	uint16_t seq_zero = tx->seq_auth & TRANS_SEQ_ZERO_MASK;
    df8e:	f3ca 0a0c 	ubfx	sl, sl, #0, #13
	net_buf_simple_add_u8(buf, (tx->aszmic << 7) | seq_zero >> 6);
    df92:	f3c3 0380 	ubfx	r3, r3, #2, #1
    df96:	ea4f 119a 	mov.w	r1, sl, lsr #6
    df9a:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
    df9e:	4628      	mov	r0, r5
    dfa0:	f01a f961 	bl	28266 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, (((seq_zero & 0x3f) << 2) | (seg_o >> 3)));
    dfa4:	08f1      	lsrs	r1, r6, #3
    dfa6:	ea41 018a 	orr.w	r1, r1, sl, lsl #2
    dfaa:	b2c9      	uxtb	r1, r1
    dfac:	4628      	mov	r0, r5
    dfae:	f01a f95a 	bl	28266 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, ((seg_o & 0x07) << 5) | tx->seg_n);
    dfb2:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    dfb6:	ea41 1146 	orr.w	r1, r1, r6, lsl #5
	net_buf_simple_add_mem(buf, tx->seg[seg_o], len);
    dfba:	eb04 0686 	add.w	r6, r4, r6, lsl #2
	net_buf_simple_add_u8(buf, ((seg_o & 0x07) << 5) | tx->seg_n);
    dfbe:	b2c9      	uxtb	r1, r1
    dfc0:	4628      	mov	r0, r5
    dfc2:	f01a f950 	bl	28266 <net_buf_simple_add_u8>
	net_buf_simple_add_mem(buf, tx->seg[seg_o], len);
    dfc6:	6871      	ldr	r1, [r6, #4]
    dfc8:	464a      	mov	r2, r9
    dfca:	4628      	mov	r0, r5
    dfcc:	f01a f942 	bl	28254 <net_buf_simple_add_mem>
		tx->seg_pending++;
    dfd0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    dfd4:	3301      	adds	r3, #1
    dfd6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
		err = bt_mesh_net_send(&net_tx, seg, &seg_sent_cb, tx);
    dfda:	4642      	mov	r2, r8
    dfdc:	4623      	mov	r3, r4
    dfde:	4639      	mov	r1, r7
    dfe0:	a803      	add	r0, sp, #12
    dfe2:	f7fe fcc9 	bl	c978 <bt_mesh_net_send>
		if (err) {
    dfe6:	2800      	cmp	r0, #0
    dfe8:	d0a0      	beq.n	df2c <seg_tx_send_unacked+0xc4>
			tx->seg_pending--;
    dfea:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    dfee:	3b01      	subs	r3, #1
    dff0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	if (!tx->seg_pending) {
    dff4:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
    dff8:	b9e1      	cbnz	r1, e034 <seg_tx_send_unacked+0x1cc>
				  K_MSEC(SEG_RETRANSMIT_TIMEOUT(tx)));
    dffa:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
    dffe:	2b00      	cmp	r3, #0
    e000:	bfc4      	itt	gt
    e002:	f894 2034 	ldrbgt.w	r2, [r4, #52]	; 0x34
    e006:	f44f 73c8 	movgt.w	r3, #400	; 0x190
    e00a:	f04f 0032 	mov.w	r0, #50	; 0x32
    e00e:	bfc8      	it	gt
    e010:	fb00 3002 	mlagt	r0, r0, r2, r3
    e014:	03c0      	lsls	r0, r0, #15
    e016:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e01a:	2300      	movs	r3, #0
    e01c:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    e020:	03c9      	lsls	r1, r1, #15
    e022:	f7f2 f8ad 	bl	180 <__aeabi_uldivmod>
		k_work_reschedule(&tx->retransmit,
    e026:	f104 0540 	add.w	r5, r4, #64	; 0x40
    e02a:	4602      	mov	r2, r0
    e02c:	460b      	mov	r3, r1
    e02e:	4628      	mov	r0, r5
    e030:	f012 f9f8 	bl	20424 <k_work_reschedule>
	tx->sending = 0U;
    e034:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
    e038:	f36f 1304 	bfc	r3, #4, #1
    e03c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    e040:	e758      	b.n	def4 <seg_tx_send_unacked+0x8c>
    e042:	bf00      	nop
    e044:	00029870 	.word	0x00029870
    e048:	00029a38 	.word	0x00029a38
    e04c:	0002cf98 	.word	0x0002cf98
    e050:	0002a1f4 	.word	0x0002a1f4

0000e054 <ctl_recv>:
{
    e054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	switch (ctl_op) {
    e058:	f011 077f 	ands.w	r7, r1, #127	; 0x7f
{
    e05c:	4605      	mov	r5, r0
    e05e:	4614      	mov	r4, r2
    e060:	4699      	mov	r9, r3
	switch (ctl_op) {
    e062:	d014      	beq.n	e08e <ctl_recv+0x3a>
    e064:	2f0a      	cmp	r7, #10
    e066:	f000 80b1 	beq.w	e1cc <ctl_recv+0x178>
	if (!rx->local_match) {
    e06a:	7d04      	ldrb	r4, [r0, #20]
    e06c:	f014 0440 	ands.w	r4, r4, #64	; 0x40
    e070:	d01c      	beq.n	e0ac <ctl_recv+0x58>
    e072:	4b5d      	ldr	r3, [pc, #372]	; (e1e8 <ctl_recv+0x194>)
    e074:	4a5d      	ldr	r2, [pc, #372]	; (e1ec <ctl_recv+0x198>)
	BT_WARN("Unhandled TransOpCode 0x%02x", ctl_op);
    e076:	485e      	ldr	r0, [pc, #376]	; (e1f0 <ctl_recv+0x19c>)
    e078:	1ad2      	subs	r2, r2, r3
    e07a:	08d2      	lsrs	r2, r2, #3
    e07c:	0192      	lsls	r2, r2, #6
    e07e:	f042 0202 	orr.w	r2, r2, #2
    e082:	4639      	mov	r1, r7
    e084:	f013 fd3e 	bl	21b04 <log_1>
	return -ENOENT;
    e088:	f06f 0401 	mvn.w	r4, #1
    e08c:	e00e      	b.n	e0ac <ctl_recv+0x58>
	if (buf->len < 6) {
    e08e:	8893      	ldrh	r3, [r2, #4]
    e090:	2b05      	cmp	r3, #5
    e092:	d80e      	bhi.n	e0b2 <ctl_recv+0x5e>
    e094:	4955      	ldr	r1, [pc, #340]	; (e1ec <ctl_recv+0x198>)
    e096:	4b54      	ldr	r3, [pc, #336]	; (e1e8 <ctl_recv+0x194>)
		BT_ERR("Too short ack message");
    e098:	4856      	ldr	r0, [pc, #344]	; (e1f4 <ctl_recv+0x1a0>)
    e09a:	1ac9      	subs	r1, r1, r3
    e09c:	08c9      	lsrs	r1, r1, #3
    e09e:	0189      	lsls	r1, r1, #6
    e0a0:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Received ack for group seg");
    e0a4:	f013 fd21 	bl	21aea <log_0>
		return -EINVAL;
    e0a8:	f06f 0415 	mvn.w	r4, #21
}
    e0ac:	4620      	mov	r0, r4
    e0ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	seq_zero = net_buf_simple_pull_be16(buf);
    e0b2:	4610      	mov	r0, r2
    e0b4:	f01a f958 	bl	28368 <net_buf_simple_pull_be16>
	seq_zero = (seq_zero >> 2) & TRANS_SEQ_ZERO_MASK;
    e0b8:	f3c0 088f 	ubfx	r8, r0, #2, #16
	obo = seq_zero >> 15;
    e0bc:	f3c0 3acf 	ubfx	sl, r0, #15, #16
	ack = net_buf_simple_pull_be32(buf);
    e0c0:	4620      	mov	r0, r4
    e0c2:	f01a f969 	bl	28398 <net_buf_simple_pull_be32>
	tx = seg_tx_lookup(seq_zero, obo, rx->ctx.addr);
    e0c6:	8929      	ldrh	r1, [r5, #8]
		if ((tx->seq_auth & TRANS_SEQ_ZERO_MASK) != seq_zero) {
    e0c8:	4d4b      	ldr	r5, [pc, #300]	; (e1f8 <ctl_recv+0x1a4>)
    e0ca:	e9d5 3408 	ldrd	r3, r4, [r5, #32]
	ack = net_buf_simple_pull_be32(buf);
    e0ce:	4606      	mov	r6, r0
		if ((tx->seq_auth & TRANS_SEQ_ZERO_MASK) != seq_zero) {
    e0d0:	f3c3 020c 	ubfx	r2, r3, #0, #13
    e0d4:	f3c8 000c 	ubfx	r0, r8, #0, #13
    e0d8:	42bf      	cmp	r7, r7
    e0da:	bf08      	it	eq
    e0dc:	4282      	cmpeq	r2, r0
    e0de:	d17a      	bne.n	e1d6 <ctl_recv+0x182>
		if (tx->dst == addr) {
    e0e0:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
    e0e2:	428a      	cmp	r2, r1
    e0e4:	d00a      	beq.n	e0fc <ctl_recv+0xa8>
		if (obo && tx->nack_count == tx->seg_n + 1) {
    e0e6:	f1ba 0f00 	cmp.w	sl, #0
    e0ea:	d074      	beq.n	e1d6 <ctl_recv+0x182>
    e0ec:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
    e0f0:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    e0f4:	3201      	adds	r2, #1
    e0f6:	4290      	cmp	r0, r2
    e0f8:	d16d      	bne.n	e1d6 <ctl_recv+0x182>
			tx->dst = addr;
    e0fa:	8569      	strh	r1, [r5, #42]	; 0x2a
	if (!BT_MESH_ADDR_IS_UNICAST(tx->dst)) {
    e0fc:	f9b5 202a 	ldrsh.w	r2, [r5, #42]	; 0x2a
    e100:	2a00      	cmp	r2, #0
    e102:	dc08      	bgt.n	e116 <ctl_recv+0xc2>
    e104:	4939      	ldr	r1, [pc, #228]	; (e1ec <ctl_recv+0x198>)
    e106:	4b38      	ldr	r3, [pc, #224]	; (e1e8 <ctl_recv+0x194>)
		BT_ERR("Received ack for group seg");
    e108:	483c      	ldr	r0, [pc, #240]	; (e1fc <ctl_recv+0x1a8>)
    e10a:	1ac9      	subs	r1, r1, r3
    e10c:	08c9      	lsrs	r1, r1, #3
    e10e:	0189      	lsls	r1, r1, #6
    e110:	f041 0101 	orr.w	r1, r1, #1
    e114:	e7c6      	b.n	e0a4 <ctl_recv+0x50>
	*seq_auth = tx->seq_auth;
    e116:	e9c9 3400 	strd	r3, r4, [r9]
	if (!ack) {
    e11a:	b986      	cbnz	r6, e13e <ctl_recv+0xea>
    e11c:	4b32      	ldr	r3, [pc, #200]	; (e1e8 <ctl_recv+0x194>)
    e11e:	4933      	ldr	r1, [pc, #204]	; (e1ec <ctl_recv+0x198>)
		BT_WARN("SDU canceled");
    e120:	4837      	ldr	r0, [pc, #220]	; (e200 <ctl_recv+0x1ac>)
    e122:	1ac9      	subs	r1, r1, r3
    e124:	08c9      	lsrs	r1, r1, #3
    e126:	0189      	lsls	r1, r1, #6
    e128:	f041 0102 	orr.w	r1, r1, #2
    e12c:	f013 fcdd 	bl	21aea <log_0>
		seg_tx_complete(tx, -ECANCELED);
    e130:	4831      	ldr	r0, [pc, #196]	; (e1f8 <ctl_recv+0x1a4>)
    e132:	f06f 018b 	mvn.w	r1, #139	; 0x8b
    e136:	f7ff fe69 	bl	de0c <seg_tx_complete>
		return 0;
    e13a:	4634      	mov	r4, r6
    e13c:	e7b6      	b.n	e0ac <ctl_recv+0x58>
	if (find_msb_set(ack) - 1 > tx->seg_n) {
    e13e:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
{
	if (op == 0) {
		return 0;
	}

	return 32 - __builtin_clz(op);
    e142:	fab6 f386 	clz	r3, r6
    e146:	f1c3 031f 	rsb	r3, r3, #31
    e14a:	4293      	cmp	r3, r2
    e14c:	d818      	bhi.n	e180 <ctl_recv+0x12c>
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
    e14e:	f8df a0b4 	ldr.w	sl, [pc, #180]	; e204 <ctl_recv+0x1b0>
	tx->seg[seg_idx] = NULL;
    e152:	f04f 0800 	mov.w	r8, #0
		ack &= ~BIT(bit - 1);
    e156:	f04f 0901 	mov.w	r9, #1
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
    e15a:	2e00      	cmp	r6, #0
    e15c:	fa96 f7a6 	rbit	r7, r6
    e160:	fab7 f787 	clz	r7, r7
    e164:	bf08      	it	eq
    e166:	f04f 37ff 	moveq.w	r7, #4294967295	; 0xffffffff
	while ((bit = find_lsb_set(ack))) {
    e16a:	1c7c      	adds	r4, r7, #1
    e16c:	d111      	bne.n	e192 <ctl_recv+0x13e>
	if (tx->nack_count) {
    e16e:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
    e172:	b333      	cbz	r3, e1c2 <ctl_recv+0x16e>
		k_work_reschedule(&tx->retransmit, K_NO_WAIT);
    e174:	2200      	movs	r2, #0
    e176:	2300      	movs	r3, #0
    e178:	4823      	ldr	r0, [pc, #140]	; (e208 <ctl_recv+0x1b4>)
    e17a:	f012 f953 	bl	20424 <k_work_reschedule>
    e17e:	e795      	b.n	e0ac <ctl_recv+0x58>
    e180:	491a      	ldr	r1, [pc, #104]	; (e1ec <ctl_recv+0x198>)
    e182:	4b19      	ldr	r3, [pc, #100]	; (e1e8 <ctl_recv+0x194>)
		BT_ERR("Too large segment number in ack");
    e184:	4821      	ldr	r0, [pc, #132]	; (e20c <ctl_recv+0x1b8>)
    e186:	1ac9      	subs	r1, r1, r3
    e188:	08c9      	lsrs	r1, r1, #3
    e18a:	0189      	lsls	r1, r1, #6
    e18c:	f041 0101 	orr.w	r1, r1, #1
    e190:	e788      	b.n	e0a4 <ctl_recv+0x50>
		if (tx->seg[bit - 1]) {
    e192:	eb05 0387 	add.w	r3, r5, r7, lsl #2
    e196:	685b      	ldr	r3, [r3, #4]
    e198:	b173      	cbz	r3, e1b8 <ctl_recv+0x164>
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
    e19a:	eb05 0184 	add.w	r1, r5, r4, lsl #2
    e19e:	4650      	mov	r0, sl
    e1a0:	f01a fc20 	bl	289e4 <k_mem_slab_free>
    e1a4:	b2fb      	uxtb	r3, r7
	tx->seg[seg_idx] = NULL;
    e1a6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    e1aa:	f8c3 8004 	str.w	r8, [r3, #4]
	tx->nack_count--;
    e1ae:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
    e1b2:	3b01      	subs	r3, #1
    e1b4:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
		ack &= ~BIT(bit - 1);
    e1b8:	fa09 f707 	lsl.w	r7, r9, r7
    e1bc:	ea26 0607 	bic.w	r6, r6, r7
    e1c0:	e7cb      	b.n	e15a <ctl_recv+0x106>
		seg_tx_complete(tx, 0);
    e1c2:	480d      	ldr	r0, [pc, #52]	; (e1f8 <ctl_recv+0x1a4>)
    e1c4:	4621      	mov	r1, r4
    e1c6:	f7ff fe21 	bl	de0c <seg_tx_complete>
    e1ca:	e76f      	b.n	e0ac <ctl_recv+0x58>
}
    e1cc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return bt_mesh_hb_recv(rx, buf);
    e1d0:	4611      	mov	r1, r2
    e1d2:	f001 ba5f 	b.w	f694 <bt_mesh_hb_recv>
    e1d6:	4905      	ldr	r1, [pc, #20]	; (e1ec <ctl_recv+0x198>)
    e1d8:	4b03      	ldr	r3, [pc, #12]	; (e1e8 <ctl_recv+0x194>)
		BT_WARN("No matching TX context for ack");
    e1da:	480d      	ldr	r0, [pc, #52]	; (e210 <ctl_recv+0x1bc>)
    e1dc:	1ac9      	subs	r1, r1, r3
    e1de:	08c9      	lsrs	r1, r1, #3
    e1e0:	0189      	lsls	r1, r1, #6
    e1e2:	f041 0102 	orr.w	r1, r1, #2
    e1e6:	e75d      	b.n	e0a4 <ctl_recv+0x50>
    e1e8:	00029870 	.word	0x00029870
    e1ec:	00029a38 	.word	0x00029a38
    e1f0:	0002d015 	.word	0x0002d015
    e1f4:	0002cfb7 	.word	0x0002cfb7
    e1f8:	20001998 	.word	0x20001998
    e1fc:	0002cfcd 	.word	0x0002cfcd
    e200:	0002cfe8 	.word	0x0002cfe8
    e204:	200010b4 	.word	0x200010b4
    e208:	200019d8 	.word	0x200019d8
    e20c:	0002cff5 	.word	0x0002cff5
    e210:	0002d032 	.word	0x0002d032

0000e214 <send_seg>:
{
    e214:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (seg_tx[i].nack_count) {
    e218:	4c5f      	ldr	r4, [pc, #380]	; (e398 <send_seg+0x184>)
{
    e21a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
		if (seg_tx[i].nack_count) {
    e21c:	f894 e032 	ldrb.w	lr, [r4, #50]	; 0x32
			blocked |= seg_tx_blocks(&seg_tx[i], net_tx->src,
    e220:	f8b0 c008 	ldrh.w	ip, [r0, #8]
{
    e224:	460d      	mov	r5, r1
						 net_tx->ctx->addr);
    e226:	6841      	ldr	r1, [r0, #4]
			blocked |= seg_tx_blocks(&seg_tx[i], net_tx->src,
    e228:	888f      	ldrh	r7, [r1, #4]
		if (seg_tx[i].nack_count) {
    e22a:	f1be 0f00 	cmp.w	lr, #0
    e22e:	d00e      	beq.n	e24e <send_seg+0x3a>
    e230:	4b5a      	ldr	r3, [pc, #360]	; (e39c <send_seg+0x188>)
    e232:	495b      	ldr	r1, [pc, #364]	; (e3a0 <send_seg+0x18c>)
		BT_ERR("No multi-segment message contexts available");
    e234:	485b      	ldr	r0, [pc, #364]	; (e3a4 <send_seg+0x190>)
    e236:	1ac9      	subs	r1, r1, r3
    e238:	08c9      	lsrs	r1, r1, #3
    e23a:	0189      	lsls	r1, r1, #6
    e23c:	f041 0101 	orr.w	r1, r1, #1
    e240:	f013 fc53 	bl	21aea <log_0>
		return -EBUSY;
    e244:	f06f 000f 	mvn.w	r0, #15
}
    e248:	b003      	add	sp, #12
    e24a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ctl_op) {
    e24e:	2e00      	cmp	r6, #0
    e250:	d065      	beq.n	e31e <send_seg+0x10a>
		tx->hdr = TRANS_CTL_HDR(*ctl_op, 1);
    e252:	7831      	ldrb	r1, [r6, #0]
    e254:	f061 017f 	orn	r1, r1, #127	; 0x7f
		tx->hdr = SEG_HDR(1, net_tx->aid);
    e258:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
	tx->src = net_tx->src;
    e25c:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
	tx->seg_n = (sdu->len - 1) / seg_len(!!ctl_op);
    e260:	f8b5 c004 	ldrh.w	ip, [r5, #4]
	tx->dst = net_tx->ctx->addr;
    e264:	8567      	strh	r7, [r4, #42]	; 0x2a
		return BT_MESH_APP_SEG_SDU_MAX;
    e266:	2e00      	cmp	r6, #0
	tx->len = sdu->len;
    e268:	f8a4 c02c 	strh.w	ip, [r4, #44]	; 0x2c
	tx->seg_o = 0;
    e26c:	f04f 0700 	mov.w	r7, #0
	tx->seg_n = (sdu->len - 1) / seg_len(!!ctl_op);
    e270:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
		return BT_MESH_APP_SEG_SDU_MAX;
    e274:	bf18      	it	ne
    e276:	2608      	movne	r6, #8
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
    e278:	f8df c12c 	ldr.w	ip, [pc, #300]	; e3a8 <send_seg+0x194>
	tx->seg_o = 0;
    e27c:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
		return BT_MESH_APP_SEG_SDU_MAX;
    e280:	bf08      	it	eq
    e282:	260c      	moveq	r6, #12
	tx->seg_n = (sdu->len - 1) / seg_len(!!ctl_op);
    e284:	fb91 f1f6 	sdiv	r1, r1, r6
    e288:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
	tx->nack_count = tx->seg_n + 1;
    e28c:	f101 0101 	add.w	r1, r1, #1
    e290:	f884 1032 	strb.w	r1, [r4, #50]	; 0x32
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
    e294:	f8dc 1000 	ldr.w	r1, [ip]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e298:	f3bf 8f5b 	dmb	ish
    e29c:	f8dc e008 	ldr.w	lr, [ip, #8]
    e2a0:	f3bf 8f5b 	dmb	ish
    e2a4:	f3ce 0e80 	ubfx	lr, lr, #2, #1
    e2a8:	f8dc c004 	ldr.w	ip, [ip, #4]
		err = k_mem_slab_alloc(&segs, &buf, BUF_TIMEOUT);
    e2ac:	f8df 90fc 	ldr.w	r9, [pc, #252]	; e3ac <send_seg+0x198>
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
    e2b0:	eba1 010e 	sub.w	r1, r1, lr
    e2b4:	ea4f 2e11 	mov.w	lr, r1, lsr #8
    e2b8:	ea4c 6101 	orr.w	r1, ip, r1, lsl #24
    e2bc:	e9c4 1e08 	strd	r1, lr, [r4, #32]
	tx->sub = net_tx->sub;
    e2c0:	6801      	ldr	r1, [r0, #0]
    e2c2:	6021      	str	r1, [r4, #0]
	tx->cb_data = cb_data;
    e2c4:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	tx->attempts = SEG_RETRANSMIT_ATTEMPTS;
    e2c8:	f04f 0304 	mov.w	r3, #4
    e2cc:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	tx->xmit = net_tx->xmit;
    e2d0:	7a83      	ldrb	r3, [r0, #10]
    e2d2:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	tx->aszmic = net_tx->aszmic;
    e2d6:	7ac2      	ldrb	r2, [r0, #11]
	tx->seg_pending = 0;
    e2d8:	f884 7035 	strb.w	r7, [r4, #53]	; 0x35
	tx->aszmic = net_tx->aszmic;
    e2dc:	f3c2 0340 	ubfx	r3, r2, #1, #1
	tx->ctl = !!ctl_op;
    e2e0:	bf14      	ite	ne
    e2e2:	2101      	movne	r1, #1
    e2e4:	4639      	moveq	r1, r7
	tx->blocked = blocked;
    e2e6:	009b      	lsls	r3, r3, #2
	tx->friend_cred = net_tx->friend_cred;
    e2e8:	f002 0201 	and.w	r2, r2, #1
	tx->blocked = blocked;
    e2ec:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    e2f0:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
    e2f4:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
    e2f8:	f022 022f 	bic.w	r2, r2, #47	; 0x2f
    e2fc:	4313      	orrs	r3, r2
    e2fe:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	tx->ttl = net_tx->ctx->send_ttl;
    e302:	6843      	ldr	r3, [r0, #4]
    e304:	7adb      	ldrb	r3, [r3, #11]
    e306:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	for (seg_o = 0U; sdu->len; seg_o++) {
    e30a:	f8b5 8004 	ldrh.w	r8, [r5, #4]
    e30e:	f1b8 0f00 	cmp.w	r8, #0
    e312:	d110      	bne.n	e336 <send_seg+0x122>
	seg_tx_send_unacked(tx);
    e314:	4820      	ldr	r0, [pc, #128]	; (e398 <send_seg+0x184>)
    e316:	f7ff fda7 	bl	de68 <seg_tx_send_unacked>
	return 0;
    e31a:	4640      	mov	r0, r8
    e31c:	e794      	b.n	e248 <send_seg+0x34>
	} else if (BT_MESH_IS_DEV_KEY(net_tx->ctx->app_idx)) {
    e31e:	8849      	ldrh	r1, [r1, #2]
    e320:	3103      	adds	r1, #3
    e322:	b289      	uxth	r1, r1
    e324:	2901      	cmp	r1, #1
		tx->hdr = SEG_HDR(1, net_tx->aid);
    e326:	bf85      	ittet	hi
    e328:	7ac1      	ldrbhi	r1, [r0, #11]
    e32a:	f3c1 0185 	ubfxhi	r1, r1, #2, #6
		tx->hdr = SEG_HDR(0, 0);
    e32e:	2180      	movls	r1, #128	; 0x80
		tx->hdr = SEG_HDR(1, net_tx->aid);
    e330:	f061 013f 	ornhi	r1, r1, #63	; 0x3f
    e334:	e790      	b.n	e258 <send_seg+0x44>
		err = k_mem_slab_alloc(&segs, &buf, BUF_TIMEOUT);
    e336:	2200      	movs	r2, #0
    e338:	2300      	movs	r3, #0
    e33a:	a901      	add	r1, sp, #4
    e33c:	4648      	mov	r0, r9
    e33e:	f011 fc7d 	bl	1fc3c <k_mem_slab_alloc>
		if (err) {
    e342:	f107 0a01 	add.w	sl, r7, #1
    e346:	b178      	cbz	r0, e368 <send_seg+0x154>
    e348:	4b14      	ldr	r3, [pc, #80]	; (e39c <send_seg+0x188>)
    e34a:	4915      	ldr	r1, [pc, #84]	; (e3a0 <send_seg+0x18c>)
			BT_ERR("Out of segment buffers");
    e34c:	4818      	ldr	r0, [pc, #96]	; (e3b0 <send_seg+0x19c>)
    e34e:	1ac9      	subs	r1, r1, r3
    e350:	08c9      	lsrs	r1, r1, #3
    e352:	0189      	lsls	r1, r1, #6
    e354:	f041 0101 	orr.w	r1, r1, #1
    e358:	f013 fbc7 	bl	21aea <log_0>
			seg_tx_reset(tx);
    e35c:	480e      	ldr	r0, [pc, #56]	; (e398 <send_seg+0x184>)
    e35e:	f7ff fd07 	bl	dd70 <seg_tx_reset>
			return -ENOBUFS;
    e362:	f06f 0068 	mvn.w	r0, #104	; 0x68
    e366:	e76f      	b.n	e248 <send_seg+0x34>
		memcpy(buf, net_buf_simple_pull_mem(sdu, len), len);
    e368:	f8b5 8004 	ldrh.w	r8, [r5, #4]
    e36c:	f8dd b004 	ldr.w	fp, [sp, #4]
    e370:	45b0      	cmp	r8, r6
    e372:	bf28      	it	cs
    e374:	46b0      	movcs	r8, r6
    e376:	4641      	mov	r1, r8
    e378:	4628      	mov	r0, r5
    e37a:	f019 ffdd 	bl	28338 <net_buf_simple_pull_mem>
		tx->seg[seg_o] = buf;
    e37e:	b2ff      	uxtb	r7, r7
		memcpy(buf, net_buf_simple_pull_mem(sdu, len), len);
    e380:	4601      	mov	r1, r0
		tx->seg[seg_o] = buf;
    e382:	eb04 0787 	add.w	r7, r4, r7, lsl #2
		memcpy(buf, net_buf_simple_pull_mem(sdu, len), len);
    e386:	4642      	mov	r2, r8
    e388:	4658      	mov	r0, fp
    e38a:	f015 fd0d 	bl	23da8 <memcpy>
		tx->seg[seg_o] = buf;
    e38e:	9b01      	ldr	r3, [sp, #4]
    e390:	607b      	str	r3, [r7, #4]
	for (seg_o = 0U; sdu->len; seg_o++) {
    e392:	4657      	mov	r7, sl
    e394:	e7b9      	b.n	e30a <send_seg+0xf6>
    e396:	bf00      	nop
    e398:	20001998 	.word	0x20001998
    e39c:	00029870 	.word	0x00029870
    e3a0:	00029a38 	.word	0x00029a38
    e3a4:	0002d051 	.word	0x0002d051
    e3a8:	200018d0 	.word	0x200018d0
    e3ac:	200010b4 	.word	0x200010b4
    e3b0:	0002d07d 	.word	0x0002d07d

0000e3b4 <send_unseg>:
{
    e3b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e3b8:	4604      	mov	r4, r0
    e3ba:	460f      	mov	r7, r1
    e3bc:	4690      	mov	r8, r2
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, tx->xmit, BUF_TIMEOUT);
    e3be:	7a81      	ldrb	r1, [r0, #10]
{
    e3c0:	f8dd a020 	ldr.w	sl, [sp, #32]
    e3c4:	4699      	mov	r9, r3
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, tx->xmit, BUF_TIMEOUT);
    e3c6:	2200      	movs	r2, #0
    e3c8:	2300      	movs	r3, #0
    e3ca:	2001      	movs	r0, #1
    e3cc:	f7fd fbea 	bl	bba4 <bt_mesh_adv_create>
	if (!buf) {
    e3d0:	4605      	mov	r5, r0
    e3d2:	b340      	cbz	r0, e426 <send_unseg+0x72>
    e3d4:	f100 0608 	add.w	r6, r0, #8
    e3d8:	2109      	movs	r1, #9
    e3da:	4630      	mov	r0, r6
    e3dc:	f019 fe9b 	bl	28116 <net_buf_simple_reserve>
	if (ctl_op) {
    e3e0:	f1ba 0f00 	cmp.w	sl, #0
    e3e4:	d013      	beq.n	e40e <send_unseg+0x5a>
		net_buf_add_u8(buf, TRANS_CTL_HDR(*ctl_op, 0));
    e3e6:	f89a 1000 	ldrb.w	r1, [sl]
	return net_buf_simple_add_u8(&buf->b, val);
    e3ea:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    e3ee:	4630      	mov	r0, r6
    e3f0:	f019 ff39 	bl	28266 <net_buf_simple_add_u8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    e3f4:	88ba      	ldrh	r2, [r7, #4]
    e3f6:	6839      	ldr	r1, [r7, #0]
    e3f8:	4630      	mov	r0, r6
    e3fa:	f019 ff2b 	bl	28254 <net_buf_simple_add_mem>
	return bt_mesh_net_send(tx, buf, cb, cb_data);
    e3fe:	464b      	mov	r3, r9
    e400:	4642      	mov	r2, r8
    e402:	4629      	mov	r1, r5
    e404:	4620      	mov	r0, r4
}
    e406:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_mesh_net_send(tx, buf, cb, cb_data);
    e40a:	f7fe bab5 	b.w	c978 <bt_mesh_net_send>
	} else if (BT_MESH_IS_DEV_KEY(tx->ctx->app_idx)) {
    e40e:	6863      	ldr	r3, [r4, #4]
    e410:	8858      	ldrh	r0, [r3, #2]
    e412:	3003      	adds	r0, #3
    e414:	b280      	uxth	r0, r0
    e416:	2801      	cmp	r0, #1
		net_buf_add_u8(buf, UNSEG_HDR(1, tx->aid));
    e418:	bf85      	ittet	hi
    e41a:	7ae1      	ldrbhi	r1, [r4, #11]
    e41c:	0889      	lsrhi	r1, r1, #2
	return net_buf_simple_add_u8(&buf->b, val);
    e41e:	4651      	movls	r1, sl
    e420:	f041 0140 	orrhi.w	r1, r1, #64	; 0x40
    e424:	e7e3      	b.n	e3ee <send_unseg+0x3a>
    e426:	4b07      	ldr	r3, [pc, #28]	; (e444 <send_unseg+0x90>)
    e428:	4907      	ldr	r1, [pc, #28]	; (e448 <send_unseg+0x94>)
		BT_ERR("Out of network buffers");
    e42a:	4808      	ldr	r0, [pc, #32]	; (e44c <send_unseg+0x98>)
    e42c:	1ac9      	subs	r1, r1, r3
    e42e:	08c9      	lsrs	r1, r1, #3
    e430:	0189      	lsls	r1, r1, #6
    e432:	f041 0101 	orr.w	r1, r1, #1
    e436:	f013 fb58 	bl	21aea <log_0>
}
    e43a:	f06f 0068 	mvn.w	r0, #104	; 0x68
    e43e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e442:	bf00      	nop
    e444:	00029870 	.word	0x00029870
    e448:	00029a38 	.word	0x00029a38
    e44c:	0002d094 	.word	0x0002d094

0000e450 <bt_mesh_tx_in_progress>:
		if (seg_tx[i].nack_count) {
    e450:	4b03      	ldr	r3, [pc, #12]	; (e460 <bt_mesh_tx_in_progress+0x10>)
    e452:	f893 0032 	ldrb.w	r0, [r3, #50]	; 0x32
}
    e456:	3800      	subs	r0, #0
    e458:	bf18      	it	ne
    e45a:	2001      	movne	r0, #1
    e45c:	4770      	bx	lr
    e45e:	bf00      	nop
    e460:	20001998 	.word	0x20001998

0000e464 <bt_mesh_ctl_send>:
{
    e464:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    e468:	f8d0 9004 	ldr.w	r9, [r0, #4]
{
    e46c:	461d      	mov	r5, r3
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    e46e:	f899 300b 	ldrb.w	r3, [r9, #11]
{
    e472:	b089      	sub	sp, #36	; 0x24
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    e474:	2bff      	cmp	r3, #255	; 0xff
{
    e476:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
    e47a:	4604      	mov	r4, r0
    e47c:	4616      	mov	r6, r2
    e47e:	f88d 100f 	strb.w	r1, [sp, #15]
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    e482:	d120      	bne.n	e4c6 <bt_mesh_ctl_send+0x62>
		tx->ctx->send_ttl = bt_mesh_default_ttl_get();
    e484:	f7fd f9de 	bl	b844 <bt_mesh_default_ttl_get>
    e488:	f889 000b 	strb.w	r0, [r9, #11]
	net_buf_simple_init_with_data(&buf, data, data_len);
    e48c:	462a      	mov	r2, r5
    e48e:	4631      	mov	r1, r6
    e490:	a805      	add	r0, sp, #20
    e492:	f019 fe3a 	bl	2810a <net_buf_simple_init_with_data>
	if (data_len > BT_MESH_SDU_UNSEG_MAX) {
    e496:	6863      	ldr	r3, [r4, #4]
    e498:	2d0b      	cmp	r5, #11
		tx->ctx->send_rel = true;
    e49a:	bf84      	itt	hi
    e49c:	2201      	movhi	r2, #1
    e49e:	729a      	strbhi	r2, [r3, #10]
	tx->ctx->app_idx = BT_MESH_KEY_UNUSED;
    e4a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e4a4:	805a      	strh	r2, [r3, #2]
	if (tx->ctx->addr == BT_MESH_ADDR_UNASSIGNED ||
    e4a6:	889a      	ldrh	r2, [r3, #4]
    e4a8:	b122      	cbz	r2, e4b4 <bt_mesh_ctl_send+0x50>
    e4aa:	f482 4200 	eor.w	r2, r2, #32768	; 0x8000
    e4ae:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
    e4b2:	d219      	bcs.n	e4e8 <bt_mesh_ctl_send+0x84>
    e4b4:	4915      	ldr	r1, [pc, #84]	; (e50c <bt_mesh_ctl_send+0xa8>)
    e4b6:	4b16      	ldr	r3, [pc, #88]	; (e510 <bt_mesh_ctl_send+0xac>)
		BT_ERR("Invalid destination address");
    e4b8:	4816      	ldr	r0, [pc, #88]	; (e514 <bt_mesh_ctl_send+0xb0>)
    e4ba:	1ac9      	subs	r1, r1, r3
    e4bc:	08c9      	lsrs	r1, r1, #3
    e4be:	0189      	lsls	r1, r1, #6
    e4c0:	f041 0101 	orr.w	r1, r1, #1
    e4c4:	e009      	b.n	e4da <bt_mesh_ctl_send+0x76>
	} else if (tx->ctx->send_ttl > BT_MESH_TTL_MAX) {
    e4c6:	061b      	lsls	r3, r3, #24
    e4c8:	d5e0      	bpl.n	e48c <bt_mesh_ctl_send+0x28>
    e4ca:	4910      	ldr	r1, [pc, #64]	; (e50c <bt_mesh_ctl_send+0xa8>)
    e4cc:	4b10      	ldr	r3, [pc, #64]	; (e510 <bt_mesh_ctl_send+0xac>)
		BT_ERR("TTL too large (max 127)");
    e4ce:	4812      	ldr	r0, [pc, #72]	; (e518 <bt_mesh_ctl_send+0xb4>)
    e4d0:	1ac9      	subs	r1, r1, r3
    e4d2:	08c9      	lsrs	r1, r1, #3
    e4d4:	0189      	lsls	r1, r1, #6
    e4d6:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid destination address");
    e4da:	f013 fb06 	bl	21aea <log_0>
		return -EINVAL;
    e4de:	f06f 0015 	mvn.w	r0, #21
}
    e4e2:	b009      	add	sp, #36	; 0x24
    e4e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (tx->ctx->send_rel) {
    e4e8:	7a9a      	ldrb	r2, [r3, #10]
    e4ea:	f10d 030f 	add.w	r3, sp, #15
		return send_seg(tx, &buf, cb, cb_data, &ctl_op);
    e4ee:	9300      	str	r3, [sp, #0]
    e4f0:	4643      	mov	r3, r8
	if (tx->ctx->send_rel) {
    e4f2:	b12a      	cbz	r2, e500 <bt_mesh_ctl_send+0x9c>
		return send_seg(tx, &buf, cb, cb_data, &ctl_op);
    e4f4:	463a      	mov	r2, r7
    e4f6:	a905      	add	r1, sp, #20
    e4f8:	4620      	mov	r0, r4
    e4fa:	f7ff fe8b 	bl	e214 <send_seg>
    e4fe:	e7f0      	b.n	e4e2 <bt_mesh_ctl_send+0x7e>
		return send_unseg(tx, &buf, cb, cb_data, &ctl_op);
    e500:	463a      	mov	r2, r7
    e502:	a905      	add	r1, sp, #20
    e504:	4620      	mov	r0, r4
    e506:	f7ff ff55 	bl	e3b4 <send_unseg>
    e50a:	e7ea      	b.n	e4e2 <bt_mesh_ctl_send+0x7e>
    e50c:	00029a38 	.word	0x00029a38
    e510:	00029870 	.word	0x00029870
    e514:	0002d0c3 	.word	0x0002d0c3
    e518:	0002d0ab 	.word	0x0002d0ab

0000e51c <seg_ack>:
{
    e51c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!rx->in_use || rx->block == BLOCK_COMPLETE(rx->seg_n)) {
    e51e:	f810 3c11 	ldrb.w	r3, [r0, #-17]
    e522:	065a      	lsls	r2, r3, #25
{
    e524:	b085      	sub	sp, #20
    e526:	4604      	mov	r4, r0
	if (!rx->in_use || rx->block == BLOCK_COMPLETE(rx->seg_n)) {
    e528:	d55e      	bpl.n	e5e8 <seg_ack+0xcc>
    e52a:	f003 031f 	and.w	r3, r3, #31
    e52e:	2201      	movs	r2, #1
    e530:	3301      	adds	r3, #1
    e532:	fa02 f303 	lsl.w	r3, r2, r3
    e536:	f850 2c0c 	ldr.w	r2, [r0, #-12]
    e53a:	3b01      	subs	r3, #1
    e53c:	429a      	cmp	r2, r3
    e53e:	d053      	beq.n	e5e8 <seg_ack+0xcc>
	struct seg_rx *rx = CONTAINER_OF(work, struct seg_rx, ack);
    e540:	f1a0 0530 	sub.w	r5, r0, #48	; 0x30
    e544:	f01a fdf6 	bl	29134 <z_impl_k_uptime_ticks>
    e548:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e54c:	fba0 0302 	umull	r0, r3, r0, r2
    e550:	fb02 3301 	mla	r3, r2, r1, r3
    e554:	0bc0      	lsrs	r0, r0, #15
    e556:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	if (k_uptime_get_32() - rx->last > (60 * MSEC_PER_SEC)) {
    e55a:	f854 3c08 	ldr.w	r3, [r4, #-8]
    e55e:	1ac0      	subs	r0, r0, r3
    e560:	f64e 2360 	movw	r3, #60000	; 0xea60
    e564:	4298      	cmp	r0, r3
    e566:	f04f 0600 	mov.w	r6, #0
    e56a:	d910      	bls.n	e58e <seg_ack+0x72>
    e56c:	491f      	ldr	r1, [pc, #124]	; (e5ec <seg_ack+0xd0>)
    e56e:	4b20      	ldr	r3, [pc, #128]	; (e5f0 <seg_ack+0xd4>)
		BT_WARN("Incomplete timer expired");
    e570:	4820      	ldr	r0, [pc, #128]	; (e5f4 <seg_ack+0xd8>)
    e572:	1a5b      	subs	r3, r3, r1
    e574:	08db      	lsrs	r3, r3, #3
    e576:	019b      	lsls	r3, r3, #6
    e578:	f043 0102 	orr.w	r1, r3, #2
    e57c:	f013 fab5 	bl	21aea <log_0>
		seg_rx_reset(rx, false);
    e580:	4631      	mov	r1, r6
    e582:	4628      	mov	r0, r5
}
    e584:	b005      	add	sp, #20
    e586:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		seg_rx_reset(rx, false);
    e58a:	f7ff bbc7 	b.w	dd1c <seg_rx_reset>
		 rx->block, rx->obo);
    e58e:	f814 3c11 	ldrb.w	r3, [r4, #-17]
	send_ack(rx->sub, rx->dst, rx->src, rx->ttl, &rx->seq_auth,
    e592:	f834 2c18 	ldrh.w	r2, [r4, #-24]
    e596:	f834 1c16 	ldrh.w	r1, [r4, #-22]
    e59a:	f854 0c30 	ldr.w	r0, [r4, #-48]
    e59e:	09db      	lsrs	r3, r3, #7
    e5a0:	9302      	str	r3, [sp, #8]
    e5a2:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    e5a6:	9301      	str	r3, [sp, #4]
    e5a8:	f1a4 0320 	sub.w	r3, r4, #32
    e5ac:	9300      	str	r3, [sp, #0]
    e5ae:	f814 3c10 	ldrb.w	r3, [r4, #-16]
    e5b2:	f017 fccc 	bl	25f4e <send_ack.isra.0>
	timeout = ack_timeout(rx);
    e5b6:	4628      	mov	r0, r5
    e5b8:	f017 fc3f 	bl	25e3a <ack_timeout>
    e5bc:	f44f 4700 	mov.w	r7, #32768	; 0x8000
	k_work_schedule(&rx->ack, K_MSEC(timeout));
    e5c0:	ea20 75e0 	bic.w	r5, r0, r0, asr #31
    e5c4:	4631      	mov	r1, r6
    e5c6:	f240 30e7 	movw	r0, #999	; 0x3e7
    e5ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e5ce:	2300      	movs	r3, #0
    e5d0:	fbc5 0107 	smlal	r0, r1, r5, r7
    e5d4:	f7f1 fdd4 	bl	180 <__aeabi_uldivmod>
    e5d8:	4602      	mov	r2, r0
    e5da:	460b      	mov	r3, r1
    e5dc:	4620      	mov	r0, r4
}
    e5de:	b005      	add	sp, #20
    e5e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_work_schedule(&rx->ack, K_MSEC(timeout));
    e5e4:	f011 beea 	b.w	203bc <k_work_schedule>
}
    e5e8:	b005      	add	sp, #20
    e5ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e5ec:	00029870 	.word	0x00029870
    e5f0:	00029a38 	.word	0x00029a38
    e5f4:	0002d0df 	.word	0x0002d0df

0000e5f8 <bt_mesh_rx_reset>:
		seg_rx_reset(&seg_rx[i], true);
    e5f8:	4801      	ldr	r0, [pc, #4]	; (e600 <bt_mesh_rx_reset+0x8>)
    e5fa:	2101      	movs	r1, #1
    e5fc:	f7ff bb8e 	b.w	dd1c <seg_rx_reset>
    e600:	20001938 	.word	0x20001938

0000e604 <bt_mesh_trans_reset>:
{
    e604:	b538      	push	{r3, r4, r5, lr}
	bt_mesh_rx_reset();
    e606:	f7ff fff7 	bl	e5f8 <bt_mesh_rx_reset>
		seg_tx_reset(&seg_tx[i]);
    e60a:	480c      	ldr	r0, [pc, #48]	; (e63c <bt_mesh_trans_reset+0x38>)
    e60c:	f7ff fbb0 	bl	dd70 <seg_tx_reset>
		if (virtual_addrs[i].ref) {
    e610:	490b      	ldr	r1, [pc, #44]	; (e640 <bt_mesh_trans_reset+0x3c>)
	for (i = 0; i < ARRAY_SIZE(virtual_addrs); i++) {
    e612:	2300      	movs	r3, #0
		if (virtual_addrs[i].ref) {
    e614:	2414      	movs	r4, #20
			virtual_addrs[i].ref = 0U;
    e616:	f44f 4500 	mov.w	r5, #32768	; 0x8000
		if (virtual_addrs[i].ref) {
    e61a:	fb04 f003 	mul.w	r0, r4, r3
    e61e:	5a0a      	ldrh	r2, [r1, r0]
    e620:	f3c2 020e 	ubfx	r2, r2, #0, #15
    e624:	b102      	cbz	r2, e628 <bt_mesh_trans_reset+0x24>
			virtual_addrs[i].ref = 0U;
    e626:	520d      	strh	r5, [r1, r0]
	for (i = 0; i < ARRAY_SIZE(virtual_addrs); i++) {
    e628:	3301      	adds	r3, #1
    e62a:	2b03      	cmp	r3, #3
    e62c:	d1f5      	bne.n	e61a <bt_mesh_trans_reset+0x16>
	bt_mesh_rpl_clear();
    e62e:	f017 fcf4 	bl	2601a <bt_mesh_rpl_clear>
}
    e632:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
    e636:	2009      	movs	r0, #9
    e638:	f004 bf28 	b.w	1348c <bt_mesh_settings_store_schedule>
    e63c:	20001998 	.word	0x20001998
    e640:	200036e8 	.word	0x200036e8

0000e644 <bt_mesh_trans_init>:
{
    e644:	b508      	push	{r3, lr}
		k_work_init_delayable(&seg_tx[i].retransmit, seg_retransmit);
    e646:	4905      	ldr	r1, [pc, #20]	; (e65c <bt_mesh_trans_init+0x18>)
    e648:	4805      	ldr	r0, [pc, #20]	; (e660 <bt_mesh_trans_init+0x1c>)
    e64a:	f01a fbaa 	bl	28da2 <k_work_init_delayable>
}
    e64e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_work_init_delayable(&seg_rx[i].ack, seg_ack);
    e652:	4904      	ldr	r1, [pc, #16]	; (e664 <bt_mesh_trans_init+0x20>)
    e654:	4804      	ldr	r0, [pc, #16]	; (e668 <bt_mesh_trans_init+0x24>)
    e656:	f01a bba4 	b.w	28da2 <k_work_init_delayable>
    e65a:	bf00      	nop
    e65c:	00025f49 	.word	0x00025f49
    e660:	200019d8 	.word	0x200019d8
    e664:	0000e51d 	.word	0x0000e51d
    e668:	20001968 	.word	0x20001968

0000e66c <bt_mesh_va_add>:
{
    e66c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e670:	f8df a0a0 	ldr.w	sl, [pc, #160]	; e714 <bt_mesh_va_add+0xa8>
	for (int i = 0; i < ARRAY_SIZE(virtual_addrs); i++) {
    e674:	2700      	movs	r7, #0
{
    e676:	4606      	mov	r6, r0
    e678:	4688      	mov	r8, r1
	struct virtual_addr *va = NULL;
    e67a:	463d      	mov	r5, r7
    e67c:	46d3      	mov	fp, sl
		if (!virtual_addrs[i].ref) {
    e67e:	2314      	movs	r3, #20
    e680:	fb03 f207 	mul.w	r2, r3, r7
    e684:	eb0b 0902 	add.w	r9, fp, r2
    e688:	f83b 2002 	ldrh.w	r2, [fp, r2]
    e68c:	f3c2 020e 	ubfx	r2, r2, #0, #15
    e690:	b9c2      	cbnz	r2, e6c4 <bt_mesh_va_add+0x58>
				va = &virtual_addrs[i];
    e692:	2d00      	cmp	r5, #0
    e694:	bf08      	it	eq
    e696:	4655      	moveq	r5, sl
	for (int i = 0; i < ARRAY_SIZE(virtual_addrs); i++) {
    e698:	3701      	adds	r7, #1
    e69a:	2f03      	cmp	r7, #3
    e69c:	f10a 0a14 	add.w	sl, sl, #20
    e6a0:	d1ee      	bne.n	e680 <bt_mesh_va_add+0x14>
	if (!va) {
    e6a2:	b3ad      	cbz	r5, e710 <bt_mesh_va_add+0xa4>
	memcpy(va->uuid, uuid, ARRAY_SIZE(va->uuid));
    e6a4:	2210      	movs	r2, #16
    e6a6:	4631      	mov	r1, r6
    e6a8:	1d28      	adds	r0, r5, #4
    e6aa:	f015 fb7d 	bl	23da8 <memcpy>
	err = bt_mesh_virtual_addr(uuid, &va->addr);
    e6ae:	1ca9      	adds	r1, r5, #2
    e6b0:	4630      	mov	r0, r6
    e6b2:	f001 fb2f 	bl	fd14 <bt_mesh_virtual_addr>
	if (err) {
    e6b6:	4604      	mov	r4, r0
    e6b8:	b300      	cbz	r0, e6fc <bt_mesh_va_add+0x90>
		va->addr = BT_MESH_ADDR_UNASSIGNED;
    e6ba:	2300      	movs	r3, #0
    e6bc:	806b      	strh	r3, [r5, #2]
		return STATUS_UNSPECIFIED;
    e6be:	2010      	movs	r0, #16
}
    e6c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!memcmp(uuid, virtual_addrs[i].uuid,
    e6c4:	2210      	movs	r2, #16
    e6c6:	f10a 0104 	add.w	r1, sl, #4
    e6ca:	4630      	mov	r0, r6
    e6cc:	f015 fb5b 	bl	23d86 <memcmp>
    e6d0:	2314      	movs	r3, #20
    e6d2:	4604      	mov	r4, r0
    e6d4:	2800      	cmp	r0, #0
    e6d6:	d1df      	bne.n	e698 <bt_mesh_va_add+0x2c>
			*addr = virtual_addrs[i].addr;
    e6d8:	f8b9 3002 	ldrh.w	r3, [r9, #2]
    e6dc:	f8a8 3000 	strh.w	r3, [r8]
			virtual_addrs[i].ref++;
    e6e0:	f8b9 3000 	ldrh.w	r3, [r9]
    e6e4:	3301      	adds	r3, #1
    e6e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    e6ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    e6ee:	f8a9 3000 	strh.w	r3, [r9]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
    e6f2:	2009      	movs	r0, #9
    e6f4:	f004 feca 	bl	1348c <bt_mesh_settings_store_schedule>
	return STATUS_SUCCESS;
    e6f8:	4620      	mov	r0, r4
    e6fa:	e7e1      	b.n	e6c0 <bt_mesh_va_add+0x54>
	va->ref = 1;
    e6fc:	f248 0301 	movw	r3, #32769	; 0x8001
    e700:	802b      	strh	r3, [r5, #0]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
    e702:	2009      	movs	r0, #9
    e704:	f004 fec2 	bl	1348c <bt_mesh_settings_store_schedule>
	*addr = va->addr;
    e708:	886b      	ldrh	r3, [r5, #2]
    e70a:	f8a8 3000 	strh.w	r3, [r8]
    e70e:	e7f3      	b.n	e6f8 <bt_mesh_va_add+0x8c>
		return STATUS_INSUFF_RESOURCES;
    e710:	2005      	movs	r0, #5
    e712:	e7d5      	b.n	e6c0 <bt_mesh_va_add+0x54>
    e714:	200036e8 	.word	0x200036e8

0000e718 <bt_mesh_va_del>:
{
    e718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e71c:	4f1b      	ldr	r7, [pc, #108]	; (e78c <bt_mesh_va_del+0x74>)
    e71e:	4681      	mov	r9, r0
    e720:	460e      	mov	r6, r1
	for (int i = 0; i < ARRAY_SIZE(virtual_addrs); i++) {
    e722:	2500      	movs	r5, #0
		if (virtual_addrs[i].ref &&
    e724:	1f3c      	subs	r4, r7, #4
    e726:	f04f 0a14 	mov.w	sl, #20
    e72a:	fb0a f305 	mul.w	r3, sl, r5
    e72e:	eb04 0803 	add.w	r8, r4, r3
    e732:	5ae3      	ldrh	r3, [r4, r3]
    e734:	f3c3 030e 	ubfx	r3, r3, #0, #15
    e738:	b1db      	cbz	r3, e772 <bt_mesh_va_del+0x5a>
		    !memcmp(uuid, virtual_addrs[i].uuid,
    e73a:	2210      	movs	r2, #16
    e73c:	4639      	mov	r1, r7
    e73e:	4648      	mov	r0, r9
    e740:	f015 fb21 	bl	23d86 <memcmp>
		if (virtual_addrs[i].ref &&
    e744:	b9a8      	cbnz	r0, e772 <bt_mesh_va_del+0x5a>
	va->ref--;
    e746:	f8b8 3000 	ldrh.w	r3, [r8]
    e74a:	f503 42ff 	add.w	r2, r3, #32640	; 0x7f80
    e74e:	327f      	adds	r2, #127	; 0x7f
    e750:	f362 030e 	bfi	r3, r2, #0, #15
    e754:	f8a8 3000 	strh.w	r3, [r8]
	if (addr) {
    e758:	b99e      	cbnz	r6, e782 <bt_mesh_va_del+0x6a>
	store->changed = 1U;
    e75a:	2314      	movs	r3, #20
    e75c:	fb03 4405 	mla	r4, r3, r5, r4
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
    e760:	2009      	movs	r0, #9
	store->changed = 1U;
    e762:	7863      	ldrb	r3, [r4, #1]
    e764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e768:	7063      	strb	r3, [r4, #1]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
    e76a:	f004 fe8f 	bl	1348c <bt_mesh_settings_store_schedule>
	return STATUS_SUCCESS;
    e76e:	2000      	movs	r0, #0
}
    e770:	e005      	b.n	e77e <bt_mesh_va_del+0x66>
	for (int i = 0; i < ARRAY_SIZE(virtual_addrs); i++) {
    e772:	3501      	adds	r5, #1
    e774:	2d03      	cmp	r5, #3
    e776:	f107 0714 	add.w	r7, r7, #20
    e77a:	d1d6      	bne.n	e72a <bt_mesh_va_del+0x12>
		return STATUS_CANNOT_REMOVE;
    e77c:	200c      	movs	r0, #12
}
    e77e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		*addr = va->addr;
    e782:	f8b8 3002 	ldrh.w	r3, [r8, #2]
    e786:	8033      	strh	r3, [r6, #0]
    e788:	e7e7      	b.n	e75a <bt_mesh_va_del+0x42>
    e78a:	bf00      	nop
    e78c:	200036ec 	.word	0x200036ec

0000e790 <bt_mesh_va_label_get>:
{
    e790:	b570      	push	{r4, r5, r6, lr}
    e792:	4c11      	ldr	r4, [pc, #68]	; (e7d8 <bt_mesh_va_label_get+0x48>)
    e794:	4601      	mov	r1, r0
	for (i = 0; i < ARRAY_SIZE(virtual_addrs); i++) {
    e796:	2200      	movs	r2, #0
    e798:	4623      	mov	r3, r4
		if (virtual_addrs[i].ref && virtual_addrs[i].addr == addr) {
    e79a:	2614      	movs	r6, #20
    e79c:	fb06 f002 	mul.w	r0, r6, r2
    e7a0:	5a1d      	ldrh	r5, [r3, r0]
    e7a2:	f3c5 050e 	ubfx	r5, r5, #0, #15
    e7a6:	b12d      	cbz	r5, e7b4 <bt_mesh_va_label_get+0x24>
    e7a8:	8865      	ldrh	r5, [r4, #2]
    e7aa:	428d      	cmp	r5, r1
    e7ac:	d102      	bne.n	e7b4 <bt_mesh_va_label_get+0x24>
			return virtual_addrs[i].uuid;
    e7ae:	3004      	adds	r0, #4
    e7b0:	4418      	add	r0, r3
}
    e7b2:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < ARRAY_SIZE(virtual_addrs); i++) {
    e7b4:	3201      	adds	r2, #1
    e7b6:	2a03      	cmp	r2, #3
    e7b8:	f104 0414 	add.w	r4, r4, #20
    e7bc:	d1ee      	bne.n	e79c <bt_mesh_va_label_get+0xc>
    e7be:	4b07      	ldr	r3, [pc, #28]	; (e7dc <bt_mesh_va_label_get+0x4c>)
    e7c0:	4a07      	ldr	r2, [pc, #28]	; (e7e0 <bt_mesh_va_label_get+0x50>)
	BT_WARN("No matching Label UUID for 0x%04x", addr);
    e7c2:	4808      	ldr	r0, [pc, #32]	; (e7e4 <bt_mesh_va_label_get+0x54>)
    e7c4:	1ad2      	subs	r2, r2, r3
    e7c6:	08d2      	lsrs	r2, r2, #3
    e7c8:	0192      	lsls	r2, r2, #6
    e7ca:	f042 0202 	orr.w	r2, r2, #2
    e7ce:	f013 f999 	bl	21b04 <log_1>
	return NULL;
    e7d2:	2000      	movs	r0, #0
    e7d4:	e7ed      	b.n	e7b2 <bt_mesh_va_label_get+0x22>
    e7d6:	bf00      	nop
    e7d8:	200036e8 	.word	0x200036e8
    e7dc:	00029870 	.word	0x00029870
    e7e0:	00029a38 	.word	0x00029a38
    e7e4:	0002d0f8 	.word	0x0002d0f8

0000e7e8 <bt_mesh_trans_send>:
{
    e7e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e7ec:	460d      	mov	r5, r1
	if (msg->len < 1) {
    e7ee:	8889      	ldrh	r1, [r1, #4]
{
    e7f0:	b08b      	sub	sp, #44	; 0x2c
    e7f2:	4604      	mov	r4, r0
    e7f4:	4616      	mov	r6, r2
    e7f6:	461f      	mov	r7, r3
	if (msg->len < 1) {
    e7f8:	b961      	cbnz	r1, e814 <bt_mesh_trans_send+0x2c>
    e7fa:	4964      	ldr	r1, [pc, #400]	; (e98c <bt_mesh_trans_send+0x1a4>)
    e7fc:	4b64      	ldr	r3, [pc, #400]	; (e990 <bt_mesh_trans_send+0x1a8>)
		BT_ERR("Zero-length SDU not allowed");
    e7fe:	4865      	ldr	r0, [pc, #404]	; (e994 <bt_mesh_trans_send+0x1ac>)
    e800:	1ac9      	subs	r1, r1, r3
    e802:	08c9      	lsrs	r1, r1, #3
    e804:	0189      	lsls	r1, r1, #6
    e806:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid destination address");
    e80a:	f013 f96e 	bl	21aea <log_0>
		return -EINVAL;
    e80e:	f06f 0015 	mvn.w	r0, #21
    e812:	e00d      	b.n	e830 <bt_mesh_trans_send+0x48>
	if (msg->len > BT_MESH_TX_SDU_MAX - BT_MESH_MIC_SHORT) {
    e814:	2944      	cmp	r1, #68	; 0x44
    e816:	d90e      	bls.n	e836 <bt_mesh_trans_send+0x4e>
    e818:	4b5d      	ldr	r3, [pc, #372]	; (e990 <bt_mesh_trans_send+0x1a8>)
    e81a:	4a5c      	ldr	r2, [pc, #368]	; (e98c <bt_mesh_trans_send+0x1a4>)
		BT_ERR("Message too big: %u", msg->len);
    e81c:	485e      	ldr	r0, [pc, #376]	; (e998 <bt_mesh_trans_send+0x1b0>)
    e81e:	1ad2      	subs	r2, r2, r3
    e820:	08d2      	lsrs	r2, r2, #3
    e822:	0192      	lsls	r2, r2, #6
    e824:	f042 0201 	orr.w	r2, r2, #1
    e828:	f013 f96c 	bl	21b04 <log_1>
		return -EMSGSIZE;
    e82c:	f06f 0079 	mvn.w	r0, #121	; 0x79
}
    e830:	b00b      	add	sp, #44	; 0x2c
    e832:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (net_buf_simple_tailroom(msg) < BT_MESH_MIC_SHORT) {
    e836:	4628      	mov	r0, r5
    e838:	f019 fdbb 	bl	283b2 <net_buf_simple_tailroom>
    e83c:	2803      	cmp	r0, #3
    e83e:	d808      	bhi.n	e852 <bt_mesh_trans_send+0x6a>
    e840:	4952      	ldr	r1, [pc, #328]	; (e98c <bt_mesh_trans_send+0x1a4>)
    e842:	4b53      	ldr	r3, [pc, #332]	; (e990 <bt_mesh_trans_send+0x1a8>)
		BT_ERR("Insufficient tailroom for Transport MIC");
    e844:	4855      	ldr	r0, [pc, #340]	; (e99c <bt_mesh_trans_send+0x1b4>)
    e846:	1ac9      	subs	r1, r1, r3
    e848:	08c9      	lsrs	r1, r1, #3
    e84a:	0189      	lsls	r1, r1, #6
    e84c:	f041 0101 	orr.w	r1, r1, #1
    e850:	e7db      	b.n	e80a <bt_mesh_trans_send+0x22>
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    e852:	f8d4 8004 	ldr.w	r8, [r4, #4]
    e856:	f898 300b 	ldrb.w	r3, [r8, #11]
    e85a:	2bff      	cmp	r3, #255	; 0xff
    e85c:	d11c      	bne.n	e898 <bt_mesh_trans_send+0xb0>
		tx->ctx->send_ttl = bt_mesh_default_ttl_get();
    e85e:	f7fc fff1 	bl	b844 <bt_mesh_default_ttl_get>
    e862:	f888 000b 	strb.w	r0, [r8, #11]
	if (msg->len > BT_MESH_SDU_UNSEG_MAX) {
    e866:	88ab      	ldrh	r3, [r5, #4]
		tx->ctx->send_rel = true;
    e868:	6860      	ldr	r0, [r4, #4]
	if (msg->len > BT_MESH_SDU_UNSEG_MAX) {
    e86a:	2b0b      	cmp	r3, #11
		tx->ctx->send_rel = true;
    e86c:	bf84      	itt	hi
    e86e:	2301      	movhi	r3, #1
    e870:	7283      	strbhi	r3, [r0, #10]
	if (tx->ctx->addr == BT_MESH_ADDR_UNASSIGNED ||
    e872:	8883      	ldrh	r3, [r0, #4]
    e874:	b13b      	cbz	r3, e886 <bt_mesh_trans_send+0x9e>
    e876:	b21b      	sxth	r3, r3
    e878:	2b00      	cmp	r3, #0
    e87a:	dc18      	bgt.n	e8ae <bt_mesh_trans_send+0xc6>
	     BT_MESH_IS_DEV_KEY(tx->ctx->app_idx))) {
    e87c:	8843      	ldrh	r3, [r0, #2]
    e87e:	3303      	adds	r3, #3
	    (!BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr) &&
    e880:	b29b      	uxth	r3, r3
    e882:	2b01      	cmp	r3, #1
    e884:	d813      	bhi.n	e8ae <bt_mesh_trans_send+0xc6>
    e886:	4941      	ldr	r1, [pc, #260]	; (e98c <bt_mesh_trans_send+0x1a4>)
    e888:	4b41      	ldr	r3, [pc, #260]	; (e990 <bt_mesh_trans_send+0x1a8>)
		BT_ERR("Invalid destination address");
    e88a:	4845      	ldr	r0, [pc, #276]	; (e9a0 <bt_mesh_trans_send+0x1b8>)
    e88c:	1ac9      	subs	r1, r1, r3
    e88e:	08c9      	lsrs	r1, r1, #3
    e890:	0189      	lsls	r1, r1, #6
    e892:	f041 0101 	orr.w	r1, r1, #1
    e896:	e7b8      	b.n	e80a <bt_mesh_trans_send+0x22>
	} else if (tx->ctx->send_ttl > BT_MESH_TTL_MAX) {
    e898:	061b      	lsls	r3, r3, #24
    e89a:	d5e4      	bpl.n	e866 <bt_mesh_trans_send+0x7e>
    e89c:	493b      	ldr	r1, [pc, #236]	; (e98c <bt_mesh_trans_send+0x1a4>)
    e89e:	4b3c      	ldr	r3, [pc, #240]	; (e990 <bt_mesh_trans_send+0x1a8>)
		BT_ERR("TTL too large (max 127)");
    e8a0:	4840      	ldr	r0, [pc, #256]	; (e9a4 <bt_mesh_trans_send+0x1bc>)
    e8a2:	1ac9      	subs	r1, r1, r3
    e8a4:	08c9      	lsrs	r1, r1, #3
    e8a6:	0189      	lsls	r1, r1, #6
    e8a8:	f041 0101 	orr.w	r1, r1, #1
    e8ac:	e7ad      	b.n	e80a <bt_mesh_trans_send+0x22>
	err = bt_mesh_keys_resolve(tx->ctx, &tx->sub, &key, &aid);
    e8ae:	f10d 030f 	add.w	r3, sp, #15
    e8b2:	aa04      	add	r2, sp, #16
    e8b4:	4621      	mov	r1, r4
    e8b6:	f7ff f8c9 	bl	da4c <bt_mesh_keys_resolve>
	if (err) {
    e8ba:	2800      	cmp	r0, #0
    e8bc:	d1b8      	bne.n	e830 <bt_mesh_trans_send+0x48>
	tx->xmit = bt_mesh_net_transmit_get();
    e8be:	f7fc ffdd 	bl	b87c <bt_mesh_net_transmit_get>
	tx->aid = aid;
    e8c2:	7ae3      	ldrb	r3, [r4, #11]
    e8c4:	f89d 200f 	ldrb.w	r2, [sp, #15]
	tx->xmit = bt_mesh_net_transmit_get();
    e8c8:	72a0      	strb	r0, [r4, #10]
	tx->aid = aid;
    e8ca:	f362 0387 	bfi	r3, r2, #2, #6
    e8ce:	72e3      	strb	r3, [r4, #11]
	if (!tx->ctx->send_rel || net_buf_simple_tailroom(msg) < 8) {
    e8d0:	6863      	ldr	r3, [r4, #4]
    e8d2:	f893 900a 	ldrb.w	r9, [r3, #10]
    e8d6:	f1b9 0f00 	cmp.w	r9, #0
    e8da:	d008      	beq.n	e8ee <bt_mesh_trans_send+0x106>
    e8dc:	4628      	mov	r0, r5
    e8de:	f019 fd68 	bl	283b2 <net_buf_simple_tailroom>
    e8e2:	2807      	cmp	r0, #7
    e8e4:	bf94      	ite	ls
    e8e6:	f04f 0900 	movls.w	r9, #0
    e8ea:	f04f 0901 	movhi.w	r9, #1
    e8ee:	7ae3      	ldrb	r3, [r4, #11]
	err = trans_encrypt(tx, key, msg);
    e8f0:	f8dd 8010 	ldr.w	r8, [sp, #16]
    e8f4:	f369 0341 	bfi	r3, r9, #1, #1
    e8f8:	72e3      	strb	r3, [r4, #11]
	struct bt_mesh_app_crypto_ctx crypto = {
    e8fa:	2210      	movs	r2, #16
    e8fc:	2100      	movs	r1, #0
    e8fe:	a806      	add	r0, sp, #24
    e900:	f015 fa5d 	bl	23dbe <memset>
		.dev_key = BT_MESH_IS_DEV_KEY(tx->ctx->app_idx),
    e904:	6863      	ldr	r3, [r4, #4]
	struct bt_mesh_app_crypto_ctx crypto = {
    e906:	8922      	ldrh	r2, [r4, #8]
		.dev_key = BT_MESH_IS_DEV_KEY(tx->ctx->app_idx),
    e908:	8859      	ldrh	r1, [r3, #2]
	struct bt_mesh_app_crypto_ctx crypto = {
    e90a:	f8ad 2016 	strh.w	r2, [sp, #22]
		.dev_key = BT_MESH_IS_DEV_KEY(tx->ctx->app_idx),
    e90e:	3103      	adds	r1, #3
    e910:	b289      	uxth	r1, r1
		.seq_num = bt_mesh.seq,
    e912:	4a25      	ldr	r2, [pc, #148]	; (e9a8 <bt_mesh_trans_send+0x1c0>)
	struct bt_mesh_app_crypto_ctx crypto = {
    e914:	889b      	ldrh	r3, [r3, #4]
    e916:	f8ad 3018 	strh.w	r3, [sp, #24]
		.dev_key = BT_MESH_IS_DEV_KEY(tx->ctx->app_idx),
    e91a:	2901      	cmp	r1, #1
	struct bt_mesh_app_crypto_ctx crypto = {
    e91c:	6853      	ldr	r3, [r2, #4]
    e91e:	9307      	str	r3, [sp, #28]
		.dev_key = BT_MESH_IS_DEV_KEY(tx->ctx->app_idx),
    e920:	bf8c      	ite	hi
    e922:	2100      	movhi	r1, #0
    e924:	2101      	movls	r1, #1
    e926:	f88d 1014 	strb.w	r1, [sp, #20]
	struct bt_mesh_app_crypto_ctx crypto = {
    e92a:	f88d 9015 	strb.w	r9, [sp, #21]
		.iv_index = BT_MESH_NET_IVI_TX,
    e92e:	6813      	ldr	r3, [r2, #0]
    e930:	f3bf 8f5b 	dmb	ish
    e934:	6892      	ldr	r2, [r2, #8]
    e936:	f3bf 8f5b 	dmb	ish
    e93a:	f3c2 0280 	ubfx	r2, r2, #2, #1
    e93e:	1a9b      	subs	r3, r3, r2
	struct bt_mesh_app_crypto_ctx crypto = {
    e940:	9308      	str	r3, [sp, #32]
	if (BT_MESH_ADDR_IS_VIRTUAL(tx->ctx->addr)) {
    e942:	6863      	ldr	r3, [r4, #4]
    e944:	8898      	ldrh	r0, [r3, #4]
    e946:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
    e94a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    e94e:	d202      	bcs.n	e956 <bt_mesh_trans_send+0x16e>
		crypto.ad = bt_mesh_va_label_get(tx->ctx->addr);
    e950:	f7ff ff1e 	bl	e790 <bt_mesh_va_label_get>
    e954:	9009      	str	r0, [sp, #36]	; 0x24
	return bt_mesh_app_encrypt(key, &crypto, msg);
    e956:	462a      	mov	r2, r5
    e958:	a905      	add	r1, sp, #20
    e95a:	4640      	mov	r0, r8
    e95c:	f017 fc7d 	bl	2625a <bt_mesh_app_encrypt>
	if (err) {
    e960:	2800      	cmp	r0, #0
    e962:	f47f af65 	bne.w	e830 <bt_mesh_trans_send+0x48>
	if (tx->ctx->send_rel) {
    e966:	6863      	ldr	r3, [r4, #4]
    e968:	7a9b      	ldrb	r3, [r3, #10]
		err = send_seg(tx, msg, cb, cb_data, NULL);
    e96a:	9000      	str	r0, [sp, #0]
	if (tx->ctx->send_rel) {
    e96c:	b133      	cbz	r3, e97c <bt_mesh_trans_send+0x194>
		err = send_seg(tx, msg, cb, cb_data, NULL);
    e96e:	463b      	mov	r3, r7
    e970:	4632      	mov	r2, r6
    e972:	4629      	mov	r1, r5
    e974:	4620      	mov	r0, r4
    e976:	f7ff fc4d 	bl	e214 <send_seg>
    e97a:	e759      	b.n	e830 <bt_mesh_trans_send+0x48>
		err = send_unseg(tx, msg, cb, cb_data, NULL);
    e97c:	463b      	mov	r3, r7
    e97e:	4632      	mov	r2, r6
    e980:	4629      	mov	r1, r5
    e982:	4620      	mov	r0, r4
    e984:	f7ff fd16 	bl	e3b4 <send_unseg>
    e988:	e752      	b.n	e830 <bt_mesh_trans_send+0x48>
    e98a:	bf00      	nop
    e98c:	00029a38 	.word	0x00029a38
    e990:	00029870 	.word	0x00029870
    e994:	0002d11a 	.word	0x0002d11a
    e998:	0002d136 	.word	0x0002d136
    e99c:	0002d14a 	.word	0x0002d14a
    e9a0:	0002d0c3 	.word	0x0002d0c3
    e9a4:	0002d0ab 	.word	0x0002d0ab
    e9a8:	200018d0 	.word	0x200018d0

0000e9ac <sdu_recv>:
{
    e9ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e9b0:	b08b      	sub	sp, #44	; 0x2c
    e9b2:	4604      	mov	r4, r0
    e9b4:	460d      	mov	r5, r1
    e9b6:	4691      	mov	r9, r2
	struct decrypt_ctx ctx = {
    e9b8:	2100      	movs	r1, #0
    e9ba:	2210      	movs	r2, #16
    e9bc:	a803      	add	r0, sp, #12
{
    e9be:	4698      	mov	r8, r3
    e9c0:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	struct decrypt_ctx ctx = {
    e9c4:	f015 f9fb 	bl	23dbe <memset>
			.dev_key = !AKF(&hdr),
    e9c8:	ea6f 1395 	mvn.w	r3, r5, lsr #6
    e9cc:	f003 0301 	and.w	r3, r3, #1
			.dst = rx->ctx.recv_dst,
    e9d0:	8960      	ldrh	r0, [r4, #10]
			.dev_key = !AKF(&hdr),
    e9d2:	f88d 3008 	strb.w	r3, [sp, #8]
	struct decrypt_ctx ctx = {
    e9d6:	8923      	ldrh	r3, [r4, #8]
    e9d8:	f88d 9009 	strb.w	r9, [sp, #9]
    e9dc:	f8ad 300a 	strh.w	r3, [sp, #10]
    e9e0:	f8ad 000c 	strh.w	r0, [sp, #12]
    e9e4:	b367      	cbz	r7, ea40 <sdu_recv+0x94>
    e9e6:	693a      	ldr	r2, [r7, #16]
    e9e8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
			.iv_index = BT_MESH_NET_IVI_RX(rx),
    e9ec:	7d23      	ldrb	r3, [r4, #20]
	struct decrypt_ctx ctx = {
    e9ee:	9204      	str	r2, [sp, #16]
			.iv_index = BT_MESH_NET_IVI_RX(rx),
    e9f0:	f003 0201 	and.w	r2, r3, #1
    e9f4:	4b13      	ldr	r3, [pc, #76]	; (ea44 <sdu_recv+0x98>)
	struct decrypt_ctx ctx = {
    e9f6:	9709      	str	r7, [sp, #36]	; 0x24
			.iv_index = BT_MESH_NET_IVI_RX(rx),
    e9f8:	681b      	ldr	r3, [r3, #0]
    e9fa:	1a9b      	subs	r3, r3, r2
	struct decrypt_ctx ctx = {
    e9fc:	9305      	str	r3, [sp, #20]
	if (BT_MESH_ADDR_IS_VIRTUAL(rx->ctx.recv_dst)) {
    e9fe:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
    ea02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
	struct decrypt_ctx ctx = {
    ea06:	e9cd 8607 	strd	r8, r6, [sp, #28]
	if (BT_MESH_ADDR_IS_VIRTUAL(rx->ctx.recv_dst)) {
    ea0a:	d202      	bcs.n	ea12 <sdu_recv+0x66>
		ctx.crypto.ad = bt_mesh_va_label_get(rx->ctx.recv_dst);
    ea0c:	f7ff fec0 	bl	e790 <bt_mesh_va_label_get>
    ea10:	9006      	str	r0, [sp, #24]
	rx->ctx.app_idx = bt_mesh_app_key_find(ctx.crypto.dev_key, AID(&hdr),
    ea12:	ab02      	add	r3, sp, #8
    ea14:	9300      	str	r3, [sp, #0]
    ea16:	f89d 0008 	ldrb.w	r0, [sp, #8]
    ea1a:	4b0b      	ldr	r3, [pc, #44]	; (ea48 <sdu_recv+0x9c>)
    ea1c:	4622      	mov	r2, r4
    ea1e:	f005 013f 	and.w	r1, r5, #63	; 0x3f
    ea22:	f7ff f877 	bl	db14 <bt_mesh_app_key_find>
	if (rx->ctx.app_idx == BT_MESH_KEY_UNUSED) {
    ea26:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ea2a:	4298      	cmp	r0, r3
	rx->ctx.app_idx = bt_mesh_app_key_find(ctx.crypto.dev_key, AID(&hdr),
    ea2c:	80e0      	strh	r0, [r4, #6]
	if (rx->ctx.app_idx == BT_MESH_KEY_UNUSED) {
    ea2e:	d003      	beq.n	ea38 <sdu_recv+0x8c>
	bt_mesh_model_recv(rx, sdu);
    ea30:	4631      	mov	r1, r6
    ea32:	4620      	mov	r0, r4
    ea34:	f001 fefc 	bl	10830 <bt_mesh_model_recv>
}
    ea38:	2000      	movs	r0, #0
    ea3a:	b00b      	add	sp, #44	; 0x2c
    ea3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	struct decrypt_ctx ctx = {
    ea40:	6922      	ldr	r2, [r4, #16]
    ea42:	e7d3      	b.n	e9ec <sdu_recv+0x40>
    ea44:	200018d0 	.word	0x200018d0
    ea48:	00025e77 	.word	0x00025e77

0000ea4c <bt_mesh_trans_recv>:
{
    ea4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint64_t seq_auth = TRANS_SEQ_AUTH_NVAL;
    ea50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
    ea54:	b095      	sub	sp, #84	; 0x54
	uint64_t seq_auth = TRANS_SEQ_AUTH_NVAL;
    ea56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ea5a:	e9cd 2308 	strd	r2, r3, [sp, #32]
		rx->friend_match = false;
    ea5e:	7d0b      	ldrb	r3, [r1, #20]
    ea60:	f36f 13c7 	bfc	r3, #7, #1
{
    ea64:	4607      	mov	r7, r0
		rx->friend_match = false;
    ea66:	750b      	strb	r3, [r1, #20]
{
    ea68:	460c      	mov	r4, r1
	net_buf_simple_pull(buf, BT_MESH_NET_HDR_LEN);
    ea6a:	2109      	movs	r1, #9
    ea6c:	f019 fc5c 	bl	28328 <net_buf_simple_pull>
	state->offset = net_buf_simple_headroom(buf);
    ea70:	4638      	mov	r0, r7
    ea72:	f019 fc9a 	bl	283aa <net_buf_simple_headroom>
	if (SEG(buf->data)) {
    ea76:	f8d7 9000 	ldr.w	r9, [r7]
	state->len = buf->len;
    ea7a:	f8b7 b004 	ldrh.w	fp, [r7, #4]
    ea7e:	f999 3000 	ldrsb.w	r3, [r9]
	state->offset = net_buf_simple_headroom(buf);
    ea82:	9005      	str	r0, [sp, #20]
    ea84:	2b00      	cmp	r3, #0
    ea86:	f280 8282 	bge.w	ef8e <__kernel_ram_size+0x27e>
		if (!rx->local_match && !rx->friend_match) {
    ea8a:	f894 a014 	ldrb.w	sl, [r4, #20]
    ea8e:	f01a 00c0 	ands.w	r0, sl, #192	; 0xc0
    ea92:	f000 82b4 	beq.w	effe <__kernel_ram_size+0x2ee>
	struct bt_mesh_rpl *rpl = NULL;
    ea96:	2300      	movs	r3, #0
	if (buf->len < 5) {
    ea98:	f1bb 0f04 	cmp.w	fp, #4
	struct bt_mesh_rpl *rpl = NULL;
    ea9c:	9307      	str	r3, [sp, #28]
	if (buf->len < 5) {
    ea9e:	d80d      	bhi.n	eabc <bt_mesh_trans_recv+0x70>
    eaa0:	4a92      	ldr	r2, [pc, #584]	; (ecec <bt_mesh_trans_recv+0x2a0>)
    eaa2:	4b93      	ldr	r3, [pc, #588]	; (ecf0 <bt_mesh_trans_recv+0x2a4>)
		BT_ERR("Too short segmented message (len %u)", buf->len);
    eaa4:	4893      	ldr	r0, [pc, #588]	; (ecf4 <bt_mesh_trans_recv+0x2a8>)
    eaa6:	1ad2      	subs	r2, r2, r3
    eaa8:	08d2      	lsrs	r2, r2, #3
    eaaa:	0192      	lsls	r2, r2, #6
    eaac:	f042 0201 	orr.w	r2, r2, #1
    eab0:	4659      	mov	r1, fp
    eab2:	f013 f827 	bl	21b04 <log_1>
		return -EINVAL;
    eab6:	f06f 0a15 	mvn.w	sl, #21
    eaba:	e0c4      	b.n	ec46 <bt_mesh_trans_recv+0x1fa>
	if (bt_mesh_rpl_check(net_rx, &rpl)) {
    eabc:	a907      	add	r1, sp, #28
    eabe:	4620      	mov	r0, r4
    eac0:	f000 fc24 	bl	f30c <bt_mesh_rpl_check>
    eac4:	b178      	cbz	r0, eae6 <bt_mesh_trans_recv+0x9a>
    eac6:	4a8a      	ldr	r2, [pc, #552]	; (ecf0 <bt_mesh_trans_recv+0x2a4>)
    eac8:	4b88      	ldr	r3, [pc, #544]	; (ecec <bt_mesh_trans_recv+0x2a0>)
		BT_WARN("Replay: src 0x%04x dst 0x%04x seq 0x%06x",
    eaca:	8921      	ldrh	r1, [r4, #8]
    eacc:	488a      	ldr	r0, [pc, #552]	; (ecf8 <bt_mesh_trans_recv+0x2ac>)
    eace:	1a9b      	subs	r3, r3, r2
    ead0:	08db      	lsrs	r3, r3, #3
    ead2:	019b      	lsls	r3, r3, #6
    ead4:	f043 0302 	orr.w	r3, r3, #2
    ead8:	f8ad 3000 	strh.w	r3, [sp]
    eadc:	8962      	ldrh	r2, [r4, #10]
    eade:	6923      	ldr	r3, [r4, #16]
    eae0:	f013 f83d 	bl	21b5e <log_3>
    eae4:	e7e7      	b.n	eab6 <bt_mesh_trans_recv+0x6a>
	net_buf_simple_pull(buf, 1);
    eae6:	2101      	movs	r1, #1
    eae8:	4638      	mov	r0, r7
    eaea:	f019 fc1d 	bl	28328 <net_buf_simple_pull>
	seq_zero = net_buf_simple_pull_be16(buf);
    eaee:	4638      	mov	r0, r7
    eaf0:	f019 fc3a 	bl	28368 <net_buf_simple_pull_be16>
	seg_o = (seq_zero & 0x03) << 3;
    eaf4:	00c6      	lsls	r6, r0, #3
	seq_zero = (seq_zero >> 2) & TRANS_SEQ_ZERO_MASK;
    eaf6:	f3c0 058c 	ubfx	r5, r0, #2, #13
	seg_n = net_buf_simple_pull_u8(buf);
    eafa:	4638      	mov	r0, r7
    eafc:	f019 fc24 	bl	28348 <net_buf_simple_pull_u8>
	seg_o = (seq_zero & 0x03) << 3;
    eb00:	f006 0618 	and.w	r6, r6, #24
	seg_o |= seg_n >> 5;
    eb04:	ea46 1650 	orr.w	r6, r6, r0, lsr #5
	seg_n &= 0x1f;
    eb08:	f000 0a1f 	and.w	sl, r0, #31
	seg_o |= seg_n >> 5;
    eb0c:	b2f6      	uxtb	r6, r6
	if (seg_o > seg_n) {
    eb0e:	4556      	cmp	r6, sl
	seg_n &= 0x1f;
    eb10:	46d0      	mov	r8, sl
	if (seg_o > seg_n) {
    eb12:	d90c      	bls.n	eb2e <bt_mesh_trans_recv+0xe2>
    eb14:	4a76      	ldr	r2, [pc, #472]	; (ecf0 <bt_mesh_trans_recv+0x2a4>)
    eb16:	4b75      	ldr	r3, [pc, #468]	; (ecec <bt_mesh_trans_recv+0x2a0>)
		BT_ERR("SegO greater than SegN (%u > %u)", seg_o, seg_n);
    eb18:	4878      	ldr	r0, [pc, #480]	; (ecfc <bt_mesh_trans_recv+0x2b0>)
    eb1a:	1a9b      	subs	r3, r3, r2
    eb1c:	08db      	lsrs	r3, r3, #3
    eb1e:	019b      	lsls	r3, r3, #6
    eb20:	f043 0301 	orr.w	r3, r3, #1
    eb24:	4652      	mov	r2, sl
    eb26:	4631      	mov	r1, r6
    eb28:	f013 f800 	bl	21b2c <log_2>
		return -EINVAL;
    eb2c:	e7c3      	b.n	eab6 <bt_mesh_trans_recv+0x6a>
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
    eb2e:	6922      	ldr	r2, [r4, #16]
    eb30:	4873      	ldr	r0, [pc, #460]	; (ed00 <bt_mesh_trans_recv+0x2b4>)
    eb32:	7d23      	ldrb	r3, [r4, #20]
    eb34:	6800      	ldr	r0, [r0, #0]
    eb36:	1b55      	subs	r5, r2, r5
    eb38:	f3c5 050c 	ubfx	r5, r5, #0, #13
    eb3c:	f003 0101 	and.w	r1, r3, #1
    eb40:	1a41      	subs	r1, r0, r1
    eb42:	eba2 0c05 	sub.w	ip, r2, r5
    eb46:	ea4c 6c01 	orr.w	ip, ip, r1, lsl #24
		if (rx->src != net_rx->ctx.addr ||
    eb4a:	4d6e      	ldr	r5, [pc, #440]	; (ed04 <bt_mesh_trans_recv+0x2b8>)
	auth_seqnum = *seq_auth & BIT_MASK(24);
    eb4c:	f02c 427f 	bic.w	r2, ip, #4278190080	; 0xff000000
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
    eb50:	0a08      	lsrs	r0, r1, #8
	auth_seqnum = *seq_auth & BIT_MASK(24);
    eb52:	9204      	str	r2, [sp, #16]
		if (rx->src != net_rx->ctx.addr ||
    eb54:	69a9      	ldr	r1, [r5, #24]
    eb56:	68a2      	ldr	r2, [r4, #8]
    eb58:	4291      	cmp	r1, r2
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
    eb5a:	e9cd c008 	strd	ip, r0, [sp, #32]
		if (rx->src != net_rx->ctx.addr ||
    eb5e:	d118      	bne.n	eb92 <bt_mesh_trans_recv+0x146>
		if (rx->seq_auth >= *seq_auth) {
    eb60:	e9d5 1204 	ldrd	r1, r2, [r5, #16]
    eb64:	4561      	cmp	r1, ip
    eb66:	eb72 0e00 	sbcs.w	lr, r2, r0
    eb6a:	f080 824a 	bcs.w	f002 <__kernel_ram_size+0x2f2>
		if (rx->in_use) {
    eb6e:	7feb      	ldrb	r3, [r5, #31]
    eb70:	065a      	lsls	r2, r3, #25
    eb72:	d50e      	bpl.n	eb92 <bt_mesh_trans_recv+0x146>
    eb74:	4b5e      	ldr	r3, [pc, #376]	; (ecf0 <bt_mesh_trans_recv+0x2a4>)
    eb76:	4a5d      	ldr	r2, [pc, #372]	; (ecec <bt_mesh_trans_recv+0x2a0>)
			BT_WARN("Duplicate SDU from src 0x%04x",
    eb78:	8921      	ldrh	r1, [r4, #8]
    eb7a:	4863      	ldr	r0, [pc, #396]	; (ed08 <bt_mesh_trans_recv+0x2bc>)
    eb7c:	1ad2      	subs	r2, r2, r3
    eb7e:	08d2      	lsrs	r2, r2, #3
    eb80:	0192      	lsls	r2, r2, #6
    eb82:	f042 0202 	orr.w	r2, r2, #2
    eb86:	f012 ffbd 	bl	21b04 <log_1>
			seg_rx_reset(rx, true);
    eb8a:	2101      	movs	r1, #1
    eb8c:	4628      	mov	r0, r5
    eb8e:	f7ff f8c5 	bl	dd1c <seg_rx_reset>
	if (!sdu_len_is_ok(net_rx->ctl, seg_n)) {
    eb92:	f1b8 0f02 	cmp.w	r8, #2
    eb96:	d96e      	bls.n	ec76 <bt_mesh_trans_recv+0x22a>
    eb98:	4b55      	ldr	r3, [pc, #340]	; (ecf0 <bt_mesh_trans_recv+0x2a4>)
    eb9a:	4954      	ldr	r1, [pc, #336]	; (ecec <bt_mesh_trans_recv+0x2a0>)
		BT_ERR("Too big incoming SDU length");
    eb9c:	485b      	ldr	r0, [pc, #364]	; (ed0c <bt_mesh_trans_recv+0x2c0>)
    eb9e:	1ac9      	subs	r1, r1, r3
    eba0:	08c9      	lsrs	r1, r1, #3
    eba2:	0189      	lsls	r1, r1, #6
    eba4:	f041 0101 	orr.w	r1, r1, #1
    eba8:	f012 ff9f 	bl	21aea <log_0>
			 net_rx->friend_match);
    ebac:	7d23      	ldrb	r3, [r4, #20]
		send_ack(net_rx->sub, net_rx->ctx.recv_dst, net_rx->ctx.addr,
    ebae:	8922      	ldrh	r2, [r4, #8]
    ebb0:	8961      	ldrh	r1, [r4, #10]
    ebb2:	6820      	ldr	r0, [r4, #0]
    ebb4:	09db      	lsrs	r3, r3, #7
    ebb6:	9302      	str	r3, [sp, #8]
    ebb8:	2300      	movs	r3, #0
    ebba:	9301      	str	r3, [sp, #4]
    ebbc:	ab08      	add	r3, sp, #32
    ebbe:	9300      	str	r3, [sp, #0]
    ebc0:	7be3      	ldrb	r3, [r4, #15]
    ebc2:	f017 f9c4 	bl	25f4e <send_ack.isra.0>
			return -EMSGSIZE;
    ebc6:	f06f 0a79 	mvn.w	sl, #121	; 0x79
    ebca:	e03c      	b.n	ec46 <bt_mesh_trans_recv+0x1fa>
	if (rx->hdr != *hdr || rx->seg_n != seg_n) {
    ebcc:	f899 1000 	ldrb.w	r1, [r9]
    ebd0:	7faa      	ldrb	r2, [r5, #30]
    ebd2:	4291      	cmp	r1, r2
    ebd4:	d104      	bne.n	ebe0 <bt_mesh_trans_recv+0x194>
    ebd6:	7fea      	ldrb	r2, [r5, #31]
    ebd8:	f002 021f 	and.w	r2, r2, #31
    ebdc:	4542      	cmp	r2, r8
    ebde:	d008      	beq.n	ebf2 <bt_mesh_trans_recv+0x1a6>
    ebe0:	4942      	ldr	r1, [pc, #264]	; (ecec <bt_mesh_trans_recv+0x2a0>)
    ebe2:	4b43      	ldr	r3, [pc, #268]	; (ecf0 <bt_mesh_trans_recv+0x2a4>)
		BT_ERR("Invalid segment for ongoing session");
    ebe4:	484a      	ldr	r0, [pc, #296]	; (ed10 <__kernel_ram_size>)
    ebe6:	1ac9      	subs	r1, r1, r3
    ebe8:	08c9      	lsrs	r1, r1, #3
    ebea:	0189      	lsls	r1, r1, #6
    ebec:	f041 0101 	orr.w	r1, r1, #1
    ebf0:	e214      	b.n	f01c <__kernel_ram_size+0x30c>
	if (rx->ctl != net_rx->ctl) {
    ebf2:	4844      	ldr	r0, [pc, #272]	; (ed04 <bt_mesh_trans_recv+0x2b8>)
    ebf4:	7fc1      	ldrb	r1, [r0, #31]
    ebf6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    ebfa:	f3c1 1c40 	ubfx	ip, r1, #5, #1
    ebfe:	459c      	cmp	ip, r3
    ec00:	d008      	beq.n	ec14 <bt_mesh_trans_recv+0x1c8>
    ec02:	493a      	ldr	r1, [pc, #232]	; (ecec <bt_mesh_trans_recv+0x2a0>)
    ec04:	4b3a      	ldr	r3, [pc, #232]	; (ecf0 <bt_mesh_trans_recv+0x2a4>)
		BT_ERR("Inconsistent CTL in segment");
    ec06:	4843      	ldr	r0, [pc, #268]	; (ed14 <__kernel_ram_size+0x4>)
    ec08:	1ac9      	subs	r1, r1, r3
    ec0a:	08c9      	lsrs	r1, r1, #3
    ec0c:	0189      	lsls	r1, r1, #6
    ec0e:	f041 0101 	orr.w	r1, r1, #1
    ec12:	e203      	b.n	f01c <__kernel_ram_size+0x30c>
		if (rx->in_use) {
    ec14:	064b      	lsls	r3, r1, #25
    ec16:	f100 80b1 	bmi.w	ed7c <__kernel_ram_size+0x6c>
		if (rx->block == BLOCK_COMPLETE(rx->seg_n)) {
    ec1a:	3201      	adds	r2, #1
    ec1c:	2301      	movs	r3, #1
    ec1e:	6a40      	ldr	r0, [r0, #36]	; 0x24
    ec20:	4093      	lsls	r3, r2
    ec22:	3b01      	subs	r3, #1
    ec24:	4283      	cmp	r3, r0
    ec26:	d11d      	bne.n	ec64 <bt_mesh_trans_recv+0x218>
			send_ack(net_rx->sub, net_rx->ctx.recv_dst,
    ec28:	09c9      	lsrs	r1, r1, #7
    ec2a:	e9cd 3101 	strd	r3, r1, [sp, #4]
    ec2e:	ab08      	add	r3, sp, #32
    ec30:	6820      	ldr	r0, [r4, #0]
    ec32:	9300      	str	r3, [sp, #0]
    ec34:	8922      	ldrh	r2, [r4, #8]
    ec36:	7be3      	ldrb	r3, [r4, #15]
    ec38:	8961      	ldrh	r1, [r4, #10]
    ec3a:	f017 f988 	bl	25f4e <send_ack.isra.0>
			if (rpl) {
    ec3e:	9807      	ldr	r0, [sp, #28]
    ec40:	b960      	cbnz	r0, ec5c <bt_mesh_trans_recv+0x210>
		return -EALREADY;
    ec42:	f06f 0a77 	mvn.w	sl, #119	; 0x77
	buf->data = buf->__buf + state->offset;
    ec46:	68b8      	ldr	r0, [r7, #8]
    ec48:	9b05      	ldr	r3, [sp, #20]
	buf->len = state->len;
    ec4a:	f8a7 b004 	strh.w	fp, [r7, #4]
	buf->data = buf->__buf + state->offset;
    ec4e:	fa10 f083 	uxtah	r0, r0, r3
    ec52:	6038      	str	r0, [r7, #0]
}
    ec54:	4650      	mov	r0, sl
    ec56:	b015      	add	sp, #84	; 0x54
    ec58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				bt_mesh_rpl_update(rpl, net_rx);
    ec5c:	4621      	mov	r1, r4
    ec5e:	f017 f9c1 	bl	25fe4 <bt_mesh_rpl_update>
    ec62:	e7ee      	b.n	ec42 <bt_mesh_trans_recv+0x1f6>
    ec64:	4921      	ldr	r1, [pc, #132]	; (ecec <bt_mesh_trans_recv+0x2a0>)
    ec66:	4b22      	ldr	r3, [pc, #136]	; (ecf0 <bt_mesh_trans_recv+0x2a4>)
		BT_WARN("Got segment for canceled SDU");
    ec68:	482b      	ldr	r0, [pc, #172]	; (ed18 <__kernel_ram_size+0x8>)
    ec6a:	1ac9      	subs	r1, r1, r3
    ec6c:	08c9      	lsrs	r1, r1, #3
    ec6e:	0189      	lsls	r1, r1, #6
    ec70:	f041 0102 	orr.w	r1, r1, #2
    ec74:	e1d2      	b.n	f01c <__kernel_ram_size+0x30c>
	if (rpl && rpl->src && auth_seqnum <= rpl->seg &&
    ec76:	9b07      	ldr	r3, [sp, #28]
    ec78:	b1db      	cbz	r3, ecb2 <bt_mesh_trans_recv+0x266>
    ec7a:	881a      	ldrh	r2, [r3, #0]
    ec7c:	f3c2 020e 	ubfx	r2, r2, #0, #15
    ec80:	b1ba      	cbz	r2, ecb2 <bt_mesh_trans_recv+0x266>
    ec82:	685a      	ldr	r2, [r3, #4]
    ec84:	9904      	ldr	r1, [sp, #16]
    ec86:	ebb1 2f12 	cmp.w	r1, r2, lsr #8
    ec8a:	d812      	bhi.n	ecb2 <bt_mesh_trans_recv+0x266>
    ec8c:	f993 3001 	ldrsb.w	r3, [r3, #1]
    ec90:	2b00      	cmp	r3, #0
    ec92:	da02      	bge.n	ec9a <bt_mesh_trans_recv+0x24e>
	    (!rpl->old_iv || net_rx->old_iv)) {
    ec94:	7d23      	ldrb	r3, [r4, #20]
    ec96:	07da      	lsls	r2, r3, #31
    ec98:	d50b      	bpl.n	ecb2 <bt_mesh_trans_recv+0x266>
    ec9a:	4b15      	ldr	r3, [pc, #84]	; (ecf0 <bt_mesh_trans_recv+0x2a4>)
    ec9c:	4a13      	ldr	r2, [pc, #76]	; (ecec <bt_mesh_trans_recv+0x2a0>)
		BT_WARN("Ignoring old SeqAuth 0x%06x", auth_seqnum);
    ec9e:	9904      	ldr	r1, [sp, #16]
    eca0:	481e      	ldr	r0, [pc, #120]	; (ed1c <__kernel_ram_size+0xc>)
    eca2:	1ad2      	subs	r2, r2, r3
    eca4:	08d2      	lsrs	r2, r2, #3
    eca6:	0192      	lsls	r2, r2, #6
    eca8:	f042 0202 	orr.w	r2, r2, #2
    ecac:	f012 ff2a 	bl	21b04 <log_1>
    ecb0:	e7c7      	b.n	ec42 <bt_mesh_trans_recv+0x1f6>
 *
 * @return Number of unallocated memory blocks.
 */
static inline uint32_t k_mem_slab_num_free_get(struct k_mem_slab *slab)
{
	return slab->num_blocks - slab->num_used;
    ecb2:	4b1b      	ldr	r3, [pc, #108]	; (ed20 <__kernel_ram_size+0x10>)
	if (k_mem_slab_num_free_get(&segs) < 1) {
    ecb4:	689a      	ldr	r2, [r3, #8]
    ecb6:	699b      	ldr	r3, [r3, #24]
    ecb8:	429a      	cmp	r2, r3
    ecba:	d137      	bne.n	ed2c <__kernel_ram_size+0x1c>
    ecbc:	490b      	ldr	r1, [pc, #44]	; (ecec <bt_mesh_trans_recv+0x2a0>)
    ecbe:	4b0c      	ldr	r3, [pc, #48]	; (ecf0 <bt_mesh_trans_recv+0x2a4>)
		BT_WARN("Not enough segments for incoming message");
    ecc0:	4818      	ldr	r0, [pc, #96]	; (ed24 <__kernel_ram_size+0x14>)
    ecc2:	1ac9      	subs	r1, r1, r3
    ecc4:	08c9      	lsrs	r1, r1, #3
    ecc6:	0189      	lsls	r1, r1, #6
    ecc8:	f041 0102 	orr.w	r1, r1, #2
    eccc:	f012 ff0d 	bl	21aea <log_0>
    ecd0:	4b07      	ldr	r3, [pc, #28]	; (ecf0 <bt_mesh_trans_recv+0x2a4>)
    ecd2:	4906      	ldr	r1, [pc, #24]	; (ecec <bt_mesh_trans_recv+0x2a0>)
		BT_WARN("No free slots for new incoming segmented messages");
    ecd4:	4814      	ldr	r0, [pc, #80]	; (ed28 <__kernel_ram_size+0x18>)
    ecd6:	1ac9      	subs	r1, r1, r3
    ecd8:	08c9      	lsrs	r1, r1, #3
    ecda:	0189      	lsls	r1, r1, #6
    ecdc:	f041 0102 	orr.w	r1, r1, #2
    ece0:	f012 ff03 	bl	21aea <log_0>
		return -ENOMEM;
    ece4:	f06f 0a0b 	mvn.w	sl, #11
    ece8:	e7ad      	b.n	ec46 <bt_mesh_trans_recv+0x1fa>
    ecea:	bf00      	nop
    ecec:	00029a38 	.word	0x00029a38
    ecf0:	00029870 	.word	0x00029870
    ecf4:	0002d172 	.word	0x0002d172
    ecf8:	0002d197 	.word	0x0002d197
    ecfc:	0002d1c0 	.word	0x0002d1c0
    ed00:	200018d0 	.word	0x200018d0
    ed04:	20001938 	.word	0x20001938
    ed08:	0002d1e1 	.word	0x0002d1e1
    ed0c:	0002d271 	.word	0x0002d271
    ed10:	0002d214 	.word	0x0002d214
    ed14:	0002d238 	.word	0x0002d238
    ed18:	0002d254 	.word	0x0002d254
    ed1c:	0002d28d 	.word	0x0002d28d
    ed20:	200010b4 	.word	0x200010b4
    ed24:	0002d2a9 	.word	0x0002d2a9
    ed28:	0002d2d2 	.word	0x0002d2d2
		if (rx->in_use) {
    ed2c:	7fe9      	ldrb	r1, [r5, #31]
    ed2e:	f011 0040 	ands.w	r0, r1, #64	; 0x40
    ed32:	d1cd      	bne.n	ecd0 <bt_mesh_trans_recv+0x284>
		rx->sub = net_rx->sub;
    ed34:	6823      	ldr	r3, [r4, #0]
		rx->ctl = net_rx->ctl;
    ed36:	f894 c014 	ldrb.w	ip, [r4, #20]
		rx->sub = net_rx->sub;
    ed3a:	602b      	str	r3, [r5, #0]
		rx->seq_auth = *seq_auth;
    ed3c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
		rx->ctl = net_rx->ctl;
    ed40:	f3cc 0cc0 	ubfx	ip, ip, #3, #1
		rx->seg_n = seg_n;
    ed44:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
		rx->seq_auth = *seq_auth;
    ed48:	e9c5 2304 	strd	r2, r3, [r5, #16]
		rx->seg_n = seg_n;
    ed4c:	ea4a 1a4c 	orr.w	sl, sl, ip, lsl #5
    ed50:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
    ed54:	ea4a 0101 	orr.w	r1, sl, r1
    ed58:	77e9      	strb	r1, [r5, #31]
		rx->hdr = *hdr;
    ed5a:	f899 3000 	ldrb.w	r3, [r9]
    ed5e:	77ab      	strb	r3, [r5, #30]
		rx->ttl = net_rx->ctx.send_ttl;
    ed60:	7be3      	ldrb	r3, [r4, #15]
    ed62:	f885 3020 	strb.w	r3, [r5, #32]
		rx->src = net_rx->ctx.addr;
    ed66:	8923      	ldrh	r3, [r4, #8]
    ed68:	832b      	strh	r3, [r5, #24]
		rx->dst = net_rx->ctx.recv_dst;
    ed6a:	8963      	ldrh	r3, [r4, #10]
    ed6c:	836b      	strh	r3, [r5, #26]
	rx->obo = net_rx->friend_match;
    ed6e:	7d23      	ldrb	r3, [r4, #20]
		rx->block = 0U;
    ed70:	6268      	str	r0, [r5, #36]	; 0x24
	rx->obo = net_rx->friend_match;
    ed72:	b2ca      	uxtb	r2, r1
    ed74:	09db      	lsrs	r3, r3, #7
    ed76:	f363 12c7 	bfi	r2, r3, #7, #1
    ed7a:	77ea      	strb	r2, [r5, #31]
	if (BIT(seg_o) & rx->block) {
    ed7c:	f8df a2a4 	ldr.w	sl, [pc, #676]	; f024 <__kernel_ram_size+0x314>
    ed80:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
    ed84:	40f3      	lsrs	r3, r6
    ed86:	f013 0301 	ands.w	r3, r3, #1
    ed8a:	f47f af5a 	bne.w	ec42 <bt_mesh_trans_recv+0x1f6>
		rx->len = seg_n * seg_len(rx->ctl) + buf->len;
    ed8e:	f89a 101f 	ldrb.w	r1, [sl, #31]
    ed92:	88ba      	ldrh	r2, [r7, #4]
	if (seg_o == seg_n) {
    ed94:	4546      	cmp	r6, r8
		rx->len = seg_n * seg_len(rx->ctl) + buf->len;
    ed96:	f3c1 1140 	ubfx	r1, r1, #5, #1
	if (seg_o == seg_n) {
    ed9a:	d128      	bne.n	edee <__kernel_ram_size+0xde>
		return BT_MESH_APP_SEG_SDU_MAX;
    ed9c:	2900      	cmp	r1, #0
    ed9e:	bf14      	ite	ne
    eda0:	2108      	movne	r1, #8
    eda2:	210c      	moveq	r1, #12
		rx->len = seg_n * seg_len(rx->ctl) + buf->len;
    eda4:	fb01 2206 	mla	r2, r1, r6, r2
    eda8:	b292      	uxth	r2, r2
		if (rx->len > BT_MESH_RX_SDU_MAX) {
    edaa:	2a24      	cmp	r2, #36	; 0x24
		rx->len = seg_n * seg_len(rx->ctl) + buf->len;
    edac:	f8aa 201c 	strh.w	r2, [sl, #28]
		if (rx->len > BT_MESH_RX_SDU_MAX) {
    edb0:	d92c      	bls.n	ee0c <__kernel_ram_size+0xfc>
    edb2:	4a9d      	ldr	r2, [pc, #628]	; (f028 <__kernel_ram_size+0x318>)
    edb4:	499d      	ldr	r1, [pc, #628]	; (f02c <__kernel_ram_size+0x31c>)
			BT_ERR("Too large SDU len");
    edb6:	489e      	ldr	r0, [pc, #632]	; (f030 <__kernel_ram_size+0x320>)
    edb8:	9304      	str	r3, [sp, #16]
    edba:	1a89      	subs	r1, r1, r2
    edbc:	08c9      	lsrs	r1, r1, #3
    edbe:	0189      	lsls	r1, r1, #6
    edc0:	f041 0101 	orr.w	r1, r1, #1
    edc4:	f012 fe91 	bl	21aea <log_0>
				 seq_auth, 0, rx->obo);
    edc8:	f89a 201f 	ldrb.w	r2, [sl, #31]
			send_ack(net_rx->sub, net_rx->ctx.recv_dst,
    edcc:	9b04      	ldr	r3, [sp, #16]
    edce:	9301      	str	r3, [sp, #4]
    edd0:	09d2      	lsrs	r2, r2, #7
    edd2:	ab08      	add	r3, sp, #32
    edd4:	8961      	ldrh	r1, [r4, #10]
    edd6:	6820      	ldr	r0, [r4, #0]
    edd8:	9202      	str	r2, [sp, #8]
    edda:	9300      	str	r3, [sp, #0]
    eddc:	8922      	ldrh	r2, [r4, #8]
    edde:	7be3      	ldrb	r3, [r4, #15]
    ede0:	f017 f8b5 	bl	25f4e <send_ack.isra.0>
			seg_rx_reset(rx, true);
    ede4:	2101      	movs	r1, #1
    ede6:	4650      	mov	r0, sl
    ede8:	f7fe ff98 	bl	dd1c <seg_rx_reset>
    edec:	e6eb      	b.n	ebc6 <bt_mesh_trans_recv+0x17a>
		return BT_MESH_APP_SEG_SDU_MAX;
    edee:	2900      	cmp	r1, #0
		if (buf->len != seg_len(rx->ctl)) {
    edf0:	bf14      	ite	ne
    edf2:	2308      	movne	r3, #8
    edf4:	230c      	moveq	r3, #12
    edf6:	4293      	cmp	r3, r2
    edf8:	d008      	beq.n	ee0c <__kernel_ram_size+0xfc>
    edfa:	498c      	ldr	r1, [pc, #560]	; (f02c <__kernel_ram_size+0x31c>)
    edfc:	4b8a      	ldr	r3, [pc, #552]	; (f028 <__kernel_ram_size+0x318>)
			BT_ERR("Incorrect segment size for message type");
    edfe:	488d      	ldr	r0, [pc, #564]	; (f034 <__kernel_ram_size+0x324>)
    ee00:	1ac9      	subs	r1, r1, r3
    ee02:	08c9      	lsrs	r1, r1, #3
    ee04:	0189      	lsls	r1, r1, #6
    ee06:	f041 0101 	orr.w	r1, r1, #1
    ee0a:	e107      	b.n	f01c <__kernel_ram_size+0x30c>
    ee0c:	f01a f992 	bl	29134 <z_impl_k_uptime_ticks>
    ee10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ee14:	fba0 0302 	umull	r0, r3, r0, r2
    ee18:	fb02 3301 	mla	r3, r2, r1, r3
    ee1c:	0bc0      	lsrs	r0, r0, #15
    ee1e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return (uint32_t)k_uptime_get();
    ee22:	62a8      	str	r0, [r5, #40]	; 0x28
		int32_t timeout = ack_timeout(rx);
    ee24:	487f      	ldr	r0, [pc, #508]	; (f024 <__kernel_ram_size+0x314>)
    ee26:	f017 f808 	bl	25e3a <ack_timeout>
		k_work_schedule(&rx->ack, K_MSEC(timeout));
    ee2a:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
    ee2e:	f240 30e7 	movw	r0, #999	; 0x3e7
    ee32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ee36:	2300      	movs	r3, #0
    ee38:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
    ee3c:	1449      	asrs	r1, r1, #17
    ee3e:	f7f1 f99f 	bl	180 <__aeabi_uldivmod>
    ee42:	4602      	mov	r2, r0
    ee44:	460b      	mov	r3, r1
    ee46:	487c      	ldr	r0, [pc, #496]	; (f038 <__kernel_ram_size+0x328>)
    ee48:	f011 fab8 	bl	203bc <k_work_schedule>
	err = k_mem_slab_alloc(&segs, &rx->seg[seg_o], K_NO_WAIT);
    ee4c:	1c71      	adds	r1, r6, #1
    ee4e:	b2c9      	uxtb	r1, r1
    ee50:	487a      	ldr	r0, [pc, #488]	; (f03c <__kernel_ram_size+0x32c>)
    ee52:	2200      	movs	r2, #0
    ee54:	2300      	movs	r3, #0
    ee56:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    ee5a:	f010 feef 	bl	1fc3c <k_mem_slab_alloc>
	if (err) {
    ee5e:	4682      	mov	sl, r0
    ee60:	b168      	cbz	r0, ee7e <__kernel_ram_size+0x16e>
    ee62:	4b71      	ldr	r3, [pc, #452]	; (f028 <__kernel_ram_size+0x318>)
    ee64:	4a71      	ldr	r2, [pc, #452]	; (f02c <__kernel_ram_size+0x31c>)
		BT_WARN("Unable allocate buffer for Seg %u", seg_o);
    ee66:	4876      	ldr	r0, [pc, #472]	; (f040 <__kernel_ram_size+0x330>)
    ee68:	1ad2      	subs	r2, r2, r3
    ee6a:	08d2      	lsrs	r2, r2, #3
    ee6c:	0192      	lsls	r2, r2, #6
    ee6e:	f042 0202 	orr.w	r2, r2, #2
    ee72:	4631      	mov	r1, r6
    ee74:	f012 fe46 	bl	21b04 <log_1>
		return -ENOBUFS;
    ee78:	f06f 0a68 	mvn.w	sl, #104	; 0x68
    ee7c:	e6e3      	b.n	ec46 <bt_mesh_trans_recv+0x1fa>
	memcpy(rx->seg[seg_o], buf->data, buf->len);
    ee7e:	eb05 0386 	add.w	r3, r5, r6, lsl #2
    ee82:	88ba      	ldrh	r2, [r7, #4]
    ee84:	6858      	ldr	r0, [r3, #4]
    ee86:	6839      	ldr	r1, [r7, #0]
    ee88:	f014 ff8e 	bl	23da8 <memcpy>
	rx->block |= BIT(seg_o);
    ee8c:	2301      	movs	r3, #1
    ee8e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
    ee90:	4498      	add	r8, r3
	rx->block |= BIT(seg_o);
    ee92:	fa03 f606 	lsl.w	r6, r3, r6
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
    ee96:	fa03 f308 	lsl.w	r3, r3, r8
	rx->block |= BIT(seg_o);
    ee9a:	4316      	orrs	r6, r2
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
    ee9c:	3b01      	subs	r3, #1
    ee9e:	429e      	cmp	r6, r3
	rx->block |= BIT(seg_o);
    eea0:	626e      	str	r6, [r5, #36]	; 0x24
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
    eea2:	f47f aed0 	bne.w	ec46 <bt_mesh_trans_recv+0x1fa>
	if (rpl) {
    eea6:	9807      	ldr	r0, [sp, #28]
    eea8:	b168      	cbz	r0, eec6 <__kernel_ram_size+0x1b6>
		bt_mesh_rpl_update(rpl, net_rx);
    eeaa:	4621      	mov	r1, r4
    eeac:	f017 f89a 	bl	25fe4 <bt_mesh_rpl_update>
		rpl->seg = MAX(rpl->seg, auth_seqnum);
    eeb0:	9907      	ldr	r1, [sp, #28]
    eeb2:	9804      	ldr	r0, [sp, #16]
    eeb4:	684b      	ldr	r3, [r1, #4]
    eeb6:	f3c3 2217 	ubfx	r2, r3, #8, #24
    eeba:	4282      	cmp	r2, r0
    eebc:	bf38      	it	cc
    eebe:	4602      	movcc	r2, r0
    eec0:	f362 231f 	bfi	r3, r2, #8, #24
    eec4:	604b      	str	r3, [r1, #4]
	(void)k_work_cancel_delayable(&rx->ack);
    eec6:	4d57      	ldr	r5, [pc, #348]	; (f024 <__kernel_ram_size+0x314>)
    eec8:	f105 0030 	add.w	r0, r5, #48	; 0x30
    eecc:	f019 ff89 	bl	28de2 <k_work_cancel_delayable>
		 net_rx->ctx.send_ttl, seq_auth, rx->block, rx->obo);
    eed0:	7feb      	ldrb	r3, [r5, #31]
	send_ack(net_rx->sub, net_rx->ctx.recv_dst, net_rx->ctx.addr,
    eed2:	8922      	ldrh	r2, [r4, #8]
    eed4:	8961      	ldrh	r1, [r4, #10]
    eed6:	6820      	ldr	r0, [r4, #0]
    eed8:	09db      	lsrs	r3, r3, #7
    eeda:	9302      	str	r3, [sp, #8]
    eedc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    eede:	9301      	str	r3, [sp, #4]
    eee0:	ae08      	add	r6, sp, #32
    eee2:	7be3      	ldrb	r3, [r4, #15]
    eee4:	9600      	str	r6, [sp, #0]
    eee6:	f017 f832 	bl	25f4e <send_ack.isra.0>
	if (net_rx->ctl) {
    eeea:	7d23      	ldrb	r3, [r4, #20]
    eeec:	071b      	lsls	r3, r3, #28
    eeee:	d513      	bpl.n	ef18 <__kernel_ram_size+0x208>
		NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_RX_CTL_MAX);
    eef0:	ab0e      	add	r3, sp, #56	; 0x38
    eef2:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
    eef6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		seg_rx_assemble(rx, &sdu, 0U);
    eefa:	a90b      	add	r1, sp, #44	; 0x2c
    eefc:	2200      	movs	r2, #0
    eefe:	4628      	mov	r0, r5
		NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_RX_CTL_MAX);
    ef00:	930b      	str	r3, [sp, #44]	; 0x2c
		seg_rx_assemble(rx, &sdu, 0U);
    ef02:	f016 ff6b 	bl	25ddc <seg_rx_assemble>
		err = ctl_recv(net_rx, *hdr, &sdu, seq_auth);
    ef06:	f899 1000 	ldrb.w	r1, [r9]
    ef0a:	4633      	mov	r3, r6
    ef0c:	aa0b      	add	r2, sp, #44	; 0x2c
    ef0e:	4620      	mov	r0, r4
    ef10:	f7ff f8a0 	bl	e054 <ctl_recv>
		err = sdu_recv(net_rx, *hdr, ASZMIC(hdr), &seg_buf, &sdu, rx);
    ef14:	4682      	mov	sl, r0
    ef16:	e014      	b.n	ef42 <__kernel_ram_size+0x232>
	} else if (rx->len < 1 + APP_MIC_LEN(ASZMIC(hdr))) {
    ef18:	f899 3001 	ldrb.w	r3, [r9, #1]
    ef1c:	8baa      	ldrh	r2, [r5, #28]
    ef1e:	09db      	lsrs	r3, r3, #7
    ef20:	bf14      	ite	ne
    ef22:	2309      	movne	r3, #9
    ef24:	2305      	moveq	r3, #5
    ef26:	429a      	cmp	r2, r3
    ef28:	da10      	bge.n	ef4c <__kernel_ram_size+0x23c>
    ef2a:	4b3f      	ldr	r3, [pc, #252]	; (f028 <__kernel_ram_size+0x318>)
    ef2c:	493f      	ldr	r1, [pc, #252]	; (f02c <__kernel_ram_size+0x31c>)
		BT_ERR("Too short SDU + MIC");
    ef2e:	4845      	ldr	r0, [pc, #276]	; (f044 <__kernel_ram_size+0x334>)
    ef30:	1ac9      	subs	r1, r1, r3
    ef32:	08c9      	lsrs	r1, r1, #3
    ef34:	0189      	lsls	r1, r1, #6
    ef36:	f041 0101 	orr.w	r1, r1, #1
    ef3a:	f012 fdd6 	bl	21aea <log_0>
		err = -EINVAL;
    ef3e:	f06f 0a15 	mvn.w	sl, #21
	seg_rx_reset(rx, false);
    ef42:	4838      	ldr	r0, [pc, #224]	; (f024 <__kernel_ram_size+0x314>)
    ef44:	2100      	movs	r1, #0
    ef46:	f7fe fee9 	bl	dd1c <seg_rx_reset>
	return err;
    ef4a:	e67c      	b.n	ec46 <bt_mesh_trans_recv+0x1fa>
	if (!buf->__buf) {
    ef4c:	4b3e      	ldr	r3, [pc, #248]	; (f048 <__kernel_ram_size+0x338>)
    ef4e:	6899      	ldr	r1, [r3, #8]
    ef50:	b911      	cbnz	r1, ef58 <__kernel_ram_size+0x248>
		buf->__buf = (uint8_t *)buf + sizeof(*buf);
    ef52:	f103 010c 	add.w	r1, r3, #12
    ef56:	6099      	str	r1, [r3, #8]
	buf->data = buf->__buf + reserve_head;
    ef58:	6899      	ldr	r1, [r3, #8]
    ef5a:	6019      	str	r1, [r3, #0]
	buf->len = 0U;
    ef5c:	2000      	movs	r0, #0
    ef5e:	8098      	strh	r0, [r3, #4]
			&sdu, seg_buf.data, rx->len - APP_MIC_LEN(ASZMIC(hdr)));
    ef60:	f899 3001 	ldrb.w	r3, [r9, #1]
    ef64:	09db      	lsrs	r3, r3, #7
    ef66:	bf14      	ite	ne
    ef68:	2308      	movne	r3, #8
    ef6a:	2304      	moveq	r3, #4
		net_buf_simple_init_with_data(
    ef6c:	ae0e      	add	r6, sp, #56	; 0x38
    ef6e:	1ad2      	subs	r2, r2, r3
    ef70:	4630      	mov	r0, r6
    ef72:	f019 f8ca 	bl	2810a <net_buf_simple_init_with_data>
		err = sdu_recv(net_rx, *hdr, ASZMIC(hdr), &seg_buf, &sdu, rx);
    ef76:	f899 2001 	ldrb.w	r2, [r9, #1]
    ef7a:	f899 1000 	ldrb.w	r1, [r9]
    ef7e:	4b32      	ldr	r3, [pc, #200]	; (f048 <__kernel_ram_size+0x338>)
    ef80:	e9cd 6500 	strd	r6, r5, [sp]
    ef84:	09d2      	lsrs	r2, r2, #7
    ef86:	4620      	mov	r0, r4
    ef88:	f7ff fd10 	bl	e9ac <sdu_recv>
    ef8c:	e7c2      	b.n	ef14 <__kernel_ram_size+0x204>
	if (buf->len < 1) {
    ef8e:	f1bb 0f00 	cmp.w	fp, #0
    ef92:	d108      	bne.n	efa6 <__kernel_ram_size+0x296>
    ef94:	4925      	ldr	r1, [pc, #148]	; (f02c <__kernel_ram_size+0x31c>)
    ef96:	4b24      	ldr	r3, [pc, #144]	; (f028 <__kernel_ram_size+0x318>)
		BT_ERR("Too small unsegmented PDU");
    ef98:	482c      	ldr	r0, [pc, #176]	; (f04c <__kernel_ram_size+0x33c>)
    ef9a:	1ac9      	subs	r1, r1, r3
    ef9c:	08c9      	lsrs	r1, r1, #3
    ef9e:	0189      	lsls	r1, r1, #6
    efa0:	f041 0101 	orr.w	r1, r1, #1
    efa4:	e03a      	b.n	f01c <__kernel_ram_size+0x30c>
	if (bt_mesh_rpl_check(rx, NULL)) {
    efa6:	2100      	movs	r1, #0
    efa8:	4620      	mov	r0, r4
    efaa:	f000 f9af 	bl	f30c <bt_mesh_rpl_check>
    efae:	2800      	cmp	r0, #0
    efb0:	f47f ad89 	bne.w	eac6 <bt_mesh_trans_recv+0x7a>
	hdr = net_buf_simple_pull_u8(buf);
    efb4:	4638      	mov	r0, r7
    efb6:	f019 f9c7 	bl	28348 <net_buf_simple_pull_u8>
	if (rx->ctl) {
    efba:	7d22      	ldrb	r2, [r4, #20]
    efbc:	f012 0208 	ands.w	r2, r2, #8
	hdr = net_buf_simple_pull_u8(buf);
    efc0:	4601      	mov	r1, r0
	if (rx->ctl) {
    efc2:	d006      	beq.n	efd2 <__kernel_ram_size+0x2c2>
		return ctl_recv(rx, hdr, buf, seq_auth);
    efc4:	ab08      	add	r3, sp, #32
    efc6:	463a      	mov	r2, r7
    efc8:	4620      	mov	r0, r4
    efca:	f7ff f843 	bl	e054 <ctl_recv>
	return sdu_recv(rx, hdr, 0, buf, &sdu, NULL);
    efce:	4682      	mov	sl, r0
    efd0:	e639      	b.n	ec46 <bt_mesh_trans_recv+0x1fa>
	if (buf->len < 1 + APP_MIC_LEN(0)) {
    efd2:	88bb      	ldrh	r3, [r7, #4]
    efd4:	2b04      	cmp	r3, #4
    efd6:	d808      	bhi.n	efea <__kernel_ram_size+0x2da>
    efd8:	4914      	ldr	r1, [pc, #80]	; (f02c <__kernel_ram_size+0x31c>)
    efda:	4b13      	ldr	r3, [pc, #76]	; (f028 <__kernel_ram_size+0x318>)
		BT_ERR("Too short SDU + MIC");
    efdc:	4819      	ldr	r0, [pc, #100]	; (f044 <__kernel_ram_size+0x334>)
    efde:	1ac9      	subs	r1, r1, r3
    efe0:	08c9      	lsrs	r1, r1, #3
    efe2:	0189      	lsls	r1, r1, #6
    efe4:	f041 0101 	orr.w	r1, r1, #1
    efe8:	e018      	b.n	f01c <__kernel_ram_size+0x30c>
	buf->len -= APP_MIC_LEN(0);
    efea:	3b04      	subs	r3, #4
    efec:	80bb      	strh	r3, [r7, #4]
	return sdu_recv(rx, hdr, 0, buf, &sdu, NULL);
    efee:	4b18      	ldr	r3, [pc, #96]	; (f050 <__kernel_ram_size+0x340>)
    eff0:	9300      	str	r3, [sp, #0]
    eff2:	9201      	str	r2, [sp, #4]
    eff4:	463b      	mov	r3, r7
    eff6:	4620      	mov	r0, r4
    eff8:	f7ff fcd8 	bl	e9ac <sdu_recv>
    effc:	e7e7      	b.n	efce <__kernel_ram_size+0x2be>
			return 0;
    effe:	4682      	mov	sl, r0
    f000:	e628      	b.n	ec54 <bt_mesh_trans_recv+0x208>
		if (rx->seq_auth > *seq_auth) {
    f002:	458c      	cmp	ip, r1
    f004:	eb70 0202 	sbcs.w	r2, r0, r2
    f008:	f4bf ade0 	bcs.w	ebcc <bt_mesh_trans_recv+0x180>
    f00c:	4907      	ldr	r1, [pc, #28]	; (f02c <__kernel_ram_size+0x31c>)
    f00e:	4b06      	ldr	r3, [pc, #24]	; (f028 <__kernel_ram_size+0x318>)
			BT_WARN("Ignoring old SeqAuth");
    f010:	4810      	ldr	r0, [pc, #64]	; (f054 <__kernel_ram_size+0x344>)
    f012:	1ac9      	subs	r1, r1, r3
    f014:	08c9      	lsrs	r1, r1, #3
    f016:	0189      	lsls	r1, r1, #6
    f018:	f041 0102 	orr.w	r1, r1, #2
		BT_ERR("Too short SDU + MIC");
    f01c:	f012 fd65 	bl	21aea <log_0>
		return -EINVAL;
    f020:	e549      	b.n	eab6 <bt_mesh_trans_recv+0x6a>
    f022:	bf00      	nop
    f024:	20001938 	.word	0x20001938
    f028:	00029870 	.word	0x00029870
    f02c:	00029a38 	.word	0x00029a38
    f030:	0002d304 	.word	0x0002d304
    f034:	0002d316 	.word	0x0002d316
    f038:	20001968 	.word	0x20001968
    f03c:	200010b4 	.word	0x200010b4
    f040:	0002d33e 	.word	0x0002d33e
    f044:	0002d360 	.word	0x0002d360
    f048:	200009f8 	.word	0x200009f8
    f04c:	0002d374 	.word	0x0002d374
    f050:	200009ec 	.word	0x200009ec
    f054:	0002d1ff 	.word	0x0002d1ff

0000f058 <bt_mesh_va_pending_store>:

BT_MESH_SETTINGS_DEFINE(va, "Va", va_set);

#define IS_VA_DEL(_label)	((_label)->ref == 0)
void bt_mesh_va_pending_store(void)
{
    f058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f05c:	4b2d      	ldr	r3, [pc, #180]	; (f114 <bt_mesh_va_pending_store+0xbc>)
    f05e:	4c2e      	ldr	r4, [pc, #184]	; (f118 <bt_mesh_va_pending_store+0xc0>)
    f060:	4f2e      	ldr	r7, [pc, #184]	; (f11c <bt_mesh_va_pending_store+0xc4>)
			continue;
		}

		lab->changed = 0U;

		snprintk(path, sizeof(path), "bt/mesh/Va/%x", i);
    f062:	f8df 90bc 	ldr.w	r9, [pc, #188]	; f120 <bt_mesh_va_pending_store+0xc8>
    f066:	1ae4      	subs	r4, r4, r3
    f068:	08e4      	lsrs	r4, r4, #3

			err = settings_save_one(path, &va, sizeof(va));
		}

		if (err) {
			BT_ERR("Failed to %s %s value (err %d)",
    f06a:	01a4      	lsls	r4, r4, #6
{
    f06c:	b08c      	sub	sp, #48	; 0x30
    f06e:	2600      	movs	r6, #0
    f070:	46b8      	mov	r8, r7
			BT_ERR("Failed to %s %s value (err %d)",
    f072:	f044 0401 	orr.w	r4, r4, #1
		if (!lab->changed) {
    f076:	2514      	movs	r5, #20
    f078:	fb05 fa06 	mul.w	sl, r5, r6
    f07c:	eb08 030a 	add.w	r3, r8, sl
    f080:	f993 2001 	ldrsb.w	r2, [r3, #1]
    f084:	2a00      	cmp	r2, #0
    f086:	da2a      	bge.n	f0de <bt_mesh_va_pending_store+0x86>
		lab->changed = 0U;
    f088:	785a      	ldrb	r2, [r3, #1]
    f08a:	f36f 12c7 	bfc	r2, #7, #1
    f08e:	705a      	strb	r2, [r3, #1]
		snprintk(path, sizeof(path), "bt/mesh/Va/%x", i);
    f090:	2112      	movs	r1, #18
    f092:	4633      	mov	r3, r6
    f094:	464a      	mov	r2, r9
    f096:	a802      	add	r0, sp, #8
    f098:	f012 f8f5 	bl	21286 <snprintk>
		if (IS_VA_DEL(lab)) {
    f09c:	f838 300a 	ldrh.w	r3, [r8, sl]
    f0a0:	f3c3 020e 	ubfx	r2, r3, #0, #15
    f0a4:	bb1a      	cbnz	r2, f0ee <bt_mesh_va_pending_store+0x96>
			err = settings_delete(path);
    f0a6:	a802      	add	r0, sp, #8
    f0a8:	f013 fb1f 	bl	226ea <settings_delete>
			err = settings_save_one(path, &va, sizeof(va));
    f0ac:	4605      	mov	r5, r0
		if (err) {
    f0ae:	b1b0      	cbz	r0, f0de <bt_mesh_va_pending_store+0x86>
			BT_ERR("Failed to %s %s value (err %d)",
    f0b0:	2314      	movs	r3, #20
    f0b2:	4373      	muls	r3, r6
    f0b4:	491b      	ldr	r1, [pc, #108]	; (f124 <bt_mesh_va_pending_store+0xcc>)
    f0b6:	f838 3003 	ldrh.w	r3, [r8, r3]
    f0ba:	4a1b      	ldr	r2, [pc, #108]	; (f128 <bt_mesh_va_pending_store+0xd0>)
    f0bc:	f3c3 030e 	ubfx	r3, r3, #0, #15
    f0c0:	a802      	add	r0, sp, #8
    f0c2:	2b00      	cmp	r3, #0
    f0c4:	bf14      	ite	ne
    f0c6:	468a      	movne	sl, r1
    f0c8:	4692      	moveq	sl, r2
    f0ca:	f7f3 fd05 	bl	2ad8 <z_log_strdup>
    f0ce:	f8ad 4000 	strh.w	r4, [sp]
    f0d2:	4602      	mov	r2, r0
    f0d4:	462b      	mov	r3, r5
    f0d6:	4815      	ldr	r0, [pc, #84]	; (f12c <bt_mesh_va_pending_store+0xd4>)
    f0d8:	4651      	mov	r1, sl
    f0da:	f012 fd40 	bl	21b5e <log_3>
	if (index >= ARRAY_SIZE(virtual_addrs)) {
    f0de:	3601      	adds	r6, #1
    f0e0:	2e03      	cmp	r6, #3
    f0e2:	f107 0714 	add.w	r7, r7, #20
    f0e6:	d1c6      	bne.n	f076 <bt_mesh_va_pending_store+0x1e>
			BT_DBG("%s %s value",
			       IS_VA_DEL(lab) ? "Deleted" : "Stored",
			       log_strdup(path));
		}
	}
}
    f0e8:	b00c      	add	sp, #48	; 0x30
    f0ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			va.ref = lab->ref;
    f0ee:	f3c3 030e 	ubfx	r3, r3, #0, #15
    f0f2:	f8ad 301c 	strh.w	r3, [sp, #28]
			memcpy(va.uuid, lab->uuid, 16);
    f0f6:	1d39      	adds	r1, r7, #4
			va.addr = lab->addr;
    f0f8:	887b      	ldrh	r3, [r7, #2]
    f0fa:	f8ad 301e 	strh.w	r3, [sp, #30]
			memcpy(va.uuid, lab->uuid, 16);
    f0fe:	2210      	movs	r2, #16
    f100:	a808      	add	r0, sp, #32
    f102:	f014 fe51 	bl	23da8 <memcpy>
			err = settings_save_one(path, &va, sizeof(va));
    f106:	462a      	mov	r2, r5
    f108:	a907      	add	r1, sp, #28
    f10a:	a802      	add	r0, sp, #8
    f10c:	f7f4 fd36 	bl	3b7c <settings_save_one>
    f110:	e7cc      	b.n	f0ac <bt_mesh_va_pending_store+0x54>
    f112:	bf00      	nop
    f114:	00029870 	.word	0x00029870
    f118:	00029a38 	.word	0x00029a38
    f11c:	200036e8 	.word	0x200036e8
    f120:	0002d38e 	.word	0x0002d38e
    f124:	0002d3a3 	.word	0x0002d3a3
    f128:	0002d39c 	.word	0x0002d39c
    f12c:	0002d3a9 	.word	0x0002d3a9

0000f130 <rpl_set>:
	}
}

static int rpl_set(const char *name, size_t len_rd,
		   settings_read_cb read_cb, void *cb_arg)
{
    f130:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    f134:	460d      	mov	r5, r1
    f136:	4617      	mov	r7, r2
    f138:	4698      	mov	r8, r3
	struct bt_mesh_rpl *entry;
	struct rpl_val rpl;
	int err;
	uint16_t src;

	if (!name) {
    f13a:	b978      	cbnz	r0, f15c <rpl_set+0x2c>
    f13c:	4b3a      	ldr	r3, [pc, #232]	; (f228 <rpl_set+0xf8>)
    f13e:	493b      	ldr	r1, [pc, #236]	; (f22c <rpl_set+0xfc>)
		BT_ERR("Insufficient number of arguments");
    f140:	483b      	ldr	r0, [pc, #236]	; (f230 <rpl_set+0x100>)
    f142:	1ac9      	subs	r1, r1, r3
    f144:	08c9      	lsrs	r1, r1, #3
    f146:	0189      	lsls	r1, r1, #6
    f148:	f041 0101 	orr.w	r1, r1, #1
    f14c:	f012 fccd 	bl	21aea <log_0>
		return -ENOENT;
    f150:	f06f 0501 	mvn.w	r5, #1

	BT_DBG("RPL entry for 0x%04x: Seq 0x%06x old_iv %u", entry->src,
	       entry->seq, entry->old_iv);

	return 0;
}
    f154:	4628      	mov	r0, r5
    f156:	b002      	add	sp, #8
    f158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	src = strtol(name, NULL, 16);
    f15c:	2100      	movs	r1, #0
    f15e:	2210      	movs	r2, #16
    f160:	f014 fcdb 	bl	23b1a <strtol>
		if (replay_list[i].src == src) {
    f164:	4c33      	ldr	r4, [pc, #204]	; (f234 <rpl_set+0x104>)
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    f166:	2300      	movs	r3, #0
    f168:	b281      	uxth	r1, r0
		if (replay_list[i].src == src) {
    f16a:	f834 2033 	ldrh.w	r2, [r4, r3, lsl #3]
    f16e:	f3c2 020e 	ubfx	r2, r2, #0, #15
    f172:	4291      	cmp	r1, r2
    f174:	d117      	bne.n	f1a6 <rpl_set+0x76>
			return &replay_list[i];
    f176:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
	if (len_rd == 0) {
    f17a:	b32d      	cbz	r5, f1c8 <rpl_set+0x98>
	err = bt_mesh_settings_set(read_cb, cb_arg, &rpl, sizeof(rpl));
    f17c:	2304      	movs	r3, #4
    f17e:	eb0d 0203 	add.w	r2, sp, r3
    f182:	4641      	mov	r1, r8
    f184:	4638      	mov	r0, r7
    f186:	f004 f94f 	bl	13428 <bt_mesh_settings_set>
	if (err) {
    f18a:	4605      	mov	r5, r0
    f18c:	2800      	cmp	r0, #0
    f18e:	d03c      	beq.n	f20a <rpl_set+0xda>
    f190:	4b25      	ldr	r3, [pc, #148]	; (f228 <rpl_set+0xf8>)
    f192:	4926      	ldr	r1, [pc, #152]	; (f22c <rpl_set+0xfc>)
		BT_ERR("Failed to set `net`");
    f194:	4828      	ldr	r0, [pc, #160]	; (f238 <rpl_set+0x108>)
    f196:	1ac9      	subs	r1, r1, r3
    f198:	08c9      	lsrs	r1, r1, #3
    f19a:	0189      	lsls	r1, r1, #6
    f19c:	f041 0101 	orr.w	r1, r1, #1
    f1a0:	f012 fca3 	bl	21aea <log_0>
		return err;
    f1a4:	e7d6      	b.n	f154 <rpl_set+0x24>
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    f1a6:	3301      	adds	r3, #1
    f1a8:	2b0a      	cmp	r3, #10
    f1aa:	d1de      	bne.n	f16a <rpl_set+0x3a>
	if (len_rd == 0) {
    f1ac:	b195      	cbz	r5, f1d4 <rpl_set+0xa4>
    f1ae:	2500      	movs	r5, #0
		if (!replay_list[i].src) {
    f1b0:	f834 6035 	ldrh.w	r6, [r4, r5, lsl #3]
    f1b4:	f3c6 030e 	ubfx	r3, r6, #0, #15
    f1b8:	b9bb      	cbnz	r3, f1ea <rpl_set+0xba>
			replay_list[i].src = src;
    f1ba:	f360 060e 	bfi	r6, r0, #0, #15
    f1be:	f824 6035 	strh.w	r6, [r4, r5, lsl #3]
			return &replay_list[i];
    f1c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
		if (!entry) {
    f1c6:	e7d9      	b.n	f17c <rpl_set+0x4c>
			(void)memset(entry, 0, sizeof(*entry));
    f1c8:	2208      	movs	r2, #8
    f1ca:	4629      	mov	r1, r5
    f1cc:	4620      	mov	r0, r4
    f1ce:	f014 fdf6 	bl	23dbe <memset>
    f1d2:	e7bf      	b.n	f154 <rpl_set+0x24>
    f1d4:	4b14      	ldr	r3, [pc, #80]	; (f228 <rpl_set+0xf8>)
    f1d6:	4a15      	ldr	r2, [pc, #84]	; (f22c <rpl_set+0xfc>)
			BT_WARN("Unable to find RPL entry for 0x%04x", src);
    f1d8:	4818      	ldr	r0, [pc, #96]	; (f23c <rpl_set+0x10c>)
    f1da:	1ad2      	subs	r2, r2, r3
    f1dc:	08d2      	lsrs	r2, r2, #3
    f1de:	0192      	lsls	r2, r2, #6
    f1e0:	f042 0202 	orr.w	r2, r2, #2
    f1e4:	f012 fc8e 	bl	21b04 <log_1>
    f1e8:	e7b4      	b.n	f154 <rpl_set+0x24>
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    f1ea:	3501      	adds	r5, #1
    f1ec:	2d0a      	cmp	r5, #10
    f1ee:	d1df      	bne.n	f1b0 <rpl_set+0x80>
    f1f0:	4b0d      	ldr	r3, [pc, #52]	; (f228 <rpl_set+0xf8>)
    f1f2:	4a0e      	ldr	r2, [pc, #56]	; (f22c <rpl_set+0xfc>)
			BT_ERR("Unable to allocate RPL entry for 0x%04x", src);
    f1f4:	4812      	ldr	r0, [pc, #72]	; (f240 <rpl_set+0x110>)
    f1f6:	1ad2      	subs	r2, r2, r3
    f1f8:	08d2      	lsrs	r2, r2, #3
    f1fa:	0192      	lsls	r2, r2, #6
    f1fc:	f042 0201 	orr.w	r2, r2, #1
    f200:	f012 fc80 	bl	21b04 <log_1>
			return -ENOMEM;
    f204:	f06f 050b 	mvn.w	r5, #11
    f208:	e7a4      	b.n	f154 <rpl_set+0x24>
	entry->seq = rpl.seq;
    f20a:	9b01      	ldr	r3, [sp, #4]
    f20c:	8063      	strh	r3, [r4, #2]
    f20e:	f3c3 4307 	ubfx	r3, r3, #16, #8
    f212:	7123      	strb	r3, [r4, #4]
	entry->old_iv = rpl.old_iv;
    f214:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f218:	7862      	ldrb	r2, [r4, #1]
    f21a:	f3c3 0300 	ubfx	r3, r3, #0, #1
    f21e:	f363 12c7 	bfi	r2, r3, #7, #1
    f222:	7062      	strb	r2, [r4, #1]
	return 0;
    f224:	e796      	b.n	f154 <rpl_set+0x24>
    f226:	bf00      	nop
    f228:	00029870 	.word	0x00029870
    f22c:	00029a28 	.word	0x00029a28
    f230:	0002b425 	.word	0x0002b425
    f234:	20001a08 	.word	0x20001a08
    f238:	0002d409 	.word	0x0002d409
    f23c:	0002d3e5 	.word	0x0002d3e5
    f240:	0002d41d 	.word	0x0002d41d

0000f244 <clear_rpl>:
{
    f244:	b510      	push	{r4, lr}
	if (!rpl->src) {
    f246:	8803      	ldrh	r3, [r0, #0]
    f248:	f3c3 020e 	ubfx	r2, r3, #0, #15
{
    f24c:	b086      	sub	sp, #24
    f24e:	4604      	mov	r4, r0
	if (!rpl->src) {
    f250:	b382      	cbz	r2, f2b4 <clear_rpl+0x70>
	snprintk(path, sizeof(path), "bt/mesh/RPL/%x", rpl->src);
    f252:	4613      	mov	r3, r2
    f254:	2112      	movs	r1, #18
    f256:	4a18      	ldr	r2, [pc, #96]	; (f2b8 <clear_rpl+0x74>)
    f258:	a801      	add	r0, sp, #4
    f25a:	f012 f814 	bl	21286 <snprintk>
	err = settings_delete(path);
    f25e:	a801      	add	r0, sp, #4
    f260:	f013 fa43 	bl	226ea <settings_delete>
	if (err) {
    f264:	b148      	cbz	r0, f27a <clear_rpl+0x36>
    f266:	4915      	ldr	r1, [pc, #84]	; (f2bc <clear_rpl+0x78>)
    f268:	4b15      	ldr	r3, [pc, #84]	; (f2c0 <clear_rpl+0x7c>)
		BT_ERR("Failed to clear RPL");
    f26a:	4816      	ldr	r0, [pc, #88]	; (f2c4 <clear_rpl+0x80>)
    f26c:	1ac9      	subs	r1, r1, r3
    f26e:	08c9      	lsrs	r1, r1, #3
    f270:	0189      	lsls	r1, r1, #6
    f272:	f041 0101 	orr.w	r1, r1, #1
    f276:	f012 fc38 	bl	21aea <log_0>
	(void)memset(rpl, 0, sizeof(*rpl));
    f27a:	2208      	movs	r2, #8
    f27c:	4620      	mov	r0, r4
    f27e:	2100      	movs	r1, #0
    f280:	f014 fd9d 	bl	23dbe <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    f284:	f3bf 8f5b 	dmb	ish
	return rpl - &replay_list[0];
    f288:	480f      	ldr	r0, [pc, #60]	; (f2c8 <clear_rpl+0x84>)
    f28a:	1a24      	subs	r4, r4, r0
    f28c:	10e4      	asrs	r4, r4, #3
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    f28e:	0962      	lsrs	r2, r4, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    f290:	2301      	movs	r3, #1
    f292:	f004 041f 	and.w	r4, r4, #31
    f296:	fa03 f404 	lsl.w	r4, r3, r4
    f29a:	4b0c      	ldr	r3, [pc, #48]	; (f2cc <clear_rpl+0x88>)
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    f29c:	43e4      	mvns	r4, r4
    f29e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    f2a2:	e853 2f00 	ldrex	r2, [r3]
    f2a6:	4022      	ands	r2, r4
    f2a8:	e843 2100 	strex	r1, r2, [r3]
    f2ac:	2900      	cmp	r1, #0
    f2ae:	d1f8      	bne.n	f2a2 <clear_rpl+0x5e>
    f2b0:	f3bf 8f5b 	dmb	ish
}
    f2b4:	b006      	add	sp, #24
    f2b6:	bd10      	pop	{r4, pc}
    f2b8:	0002d445 	.word	0x0002d445
    f2bc:	00029a28 	.word	0x00029a28
    f2c0:	00029870 	.word	0x00029870
    f2c4:	0002d454 	.word	0x0002d454
    f2c8:	20001a08 	.word	0x20001a08
    f2cc:	20002330 	.word	0x20002330

0000f2d0 <schedule_rpl_store.constprop.0>:
	return rpl - &replay_list[0];
    f2d0:	4b0c      	ldr	r3, [pc, #48]	; (f304 <schedule_rpl_store.constprop.0+0x34>)
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    f2d2:	f3bf 8f5b 	dmb	ish
    f2d6:	1ac0      	subs	r0, r0, r3
    f2d8:	10c0      	asrs	r0, r0, #3
    f2da:	4b0b      	ldr	r3, [pc, #44]	; (f308 <schedule_rpl_store.constprop.0+0x38>)
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    f2dc:	0941      	lsrs	r1, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    f2de:	2201      	movs	r2, #1
    f2e0:	f000 001f 	and.w	r0, r0, #31
    f2e4:	fa02 f000 	lsl.w	r0, r2, r0
    f2e8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    f2ec:	e853 2f00 	ldrex	r2, [r3]
    f2f0:	4302      	orrs	r2, r0
    f2f2:	e843 2100 	strex	r1, r2, [r3]
    f2f6:	2900      	cmp	r1, #0
    f2f8:	d1f8      	bne.n	f2ec <schedule_rpl_store.constprop.0+0x1c>
    f2fa:	f3bf 8f5b 	dmb	ish
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_RPL_PENDING);
    f2fe:	2000      	movs	r0, #0
    f300:	f004 b8c4 	b.w	1348c <bt_mesh_settings_store_schedule>
    f304:	20001a08 	.word	0x20001a08
    f308:	20002330 	.word	0x20002330

0000f30c <bt_mesh_rpl_check>:
{
    f30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
    f30e:	7d06      	ldrb	r6, [r0, #20]
    f310:	f006 0330 	and.w	r3, r6, #48	; 0x30
    f314:	2b10      	cmp	r3, #16
{
    f316:	4605      	mov	r5, r0
    f318:	460c      	mov	r4, r1
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
    f31a:	d00c      	beq.n	f336 <bt_mesh_rpl_check+0x2a>
	if (!rx->local_match) {
    f31c:	f016 0040 	ands.w	r0, r6, #64	; 0x40
    f320:	d00a      	beq.n	f338 <bt_mesh_rpl_check+0x2c>
    f322:	481d      	ldr	r0, [pc, #116]	; (f398 <bt_mesh_rpl_check+0x8c>)
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    f324:	2200      	movs	r2, #0
    f326:	4601      	mov	r1, r0
		if (!rpl->src) {
    f328:	f831 7032 	ldrh.w	r7, [r1, r2, lsl #3]
    f32c:	f3c7 030e 	ubfx	r3, r7, #0, #15
    f330:	b91b      	cbnz	r3, f33a <bt_mesh_rpl_check+0x2e>
				if (match) {
    f332:	b1ec      	cbz	r4, f370 <bt_mesh_rpl_check+0x64>
					*match = rpl;
    f334:	6020      	str	r0, [r4, #0]
		return false;
    f336:	2000      	movs	r0, #0
}
    f338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (rpl->src == rx->ctx.addr) {
    f33a:	892b      	ldrh	r3, [r5, #8]
    f33c:	f3c7 070e 	ubfx	r7, r7, #0, #15
    f340:	429f      	cmp	r7, r3
    f342:	d119      	bne.n	f378 <bt_mesh_rpl_check+0x6c>
			if (rx->old_iv && !rpl->old_iv) {
    f344:	00d7      	lsls	r7, r2, #3
    f346:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    f34a:	f992 3001 	ldrsb.w	r3, [r2, #1]
    f34e:	07f2      	lsls	r2, r6, #31
    f350:	d503      	bpl.n	f35a <bt_mesh_rpl_check+0x4e>
    f352:	2b00      	cmp	r3, #0
    f354:	db03      	blt.n	f35e <bt_mesh_rpl_check+0x52>
				return true;
    f356:	2001      	movs	r0, #1
    f358:	e7ee      	b.n	f338 <bt_mesh_rpl_check+0x2c>
			if ((!rx->old_iv && rpl->old_iv) ||
    f35a:	2b00      	cmp	r3, #0
    f35c:	dbe9      	blt.n	f332 <bt_mesh_rpl_check+0x26>
			    rpl->seq < rx->seq) {
    f35e:	4439      	add	r1, r7
    f360:	790a      	ldrb	r2, [r1, #4]
    f362:	884b      	ldrh	r3, [r1, #2]
    f364:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
			if ((!rx->old_iv && rpl->old_iv) ||
    f368:	692a      	ldr	r2, [r5, #16]
    f36a:	4293      	cmp	r3, r2
    f36c:	d2f3      	bcs.n	f356 <bt_mesh_rpl_check+0x4a>
    f36e:	e7e0      	b.n	f332 <bt_mesh_rpl_check+0x26>
					bt_mesh_rpl_update(rpl, rx);
    f370:	4629      	mov	r1, r5
    f372:	f016 fe37 	bl	25fe4 <bt_mesh_rpl_update>
    f376:	e7de      	b.n	f336 <bt_mesh_rpl_check+0x2a>
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    f378:	3201      	adds	r2, #1
    f37a:	2a0a      	cmp	r2, #10
    f37c:	f100 0008 	add.w	r0, r0, #8
    f380:	d1d2      	bne.n	f328 <bt_mesh_rpl_check+0x1c>
    f382:	4b06      	ldr	r3, [pc, #24]	; (f39c <bt_mesh_rpl_check+0x90>)
    f384:	4906      	ldr	r1, [pc, #24]	; (f3a0 <bt_mesh_rpl_check+0x94>)
	BT_ERR("RPL is full!");
    f386:	4807      	ldr	r0, [pc, #28]	; (f3a4 <bt_mesh_rpl_check+0x98>)
    f388:	1ac9      	subs	r1, r1, r3
    f38a:	08c9      	lsrs	r1, r1, #3
    f38c:	0189      	lsls	r1, r1, #6
    f38e:	f041 0101 	orr.w	r1, r1, #1
    f392:	f012 fbaa 	bl	21aea <log_0>
	return true;
    f396:	e7de      	b.n	f356 <bt_mesh_rpl_check+0x4a>
    f398:	20001a08 	.word	0x20001a08
    f39c:	00029870 	.word	0x00029870
    f3a0:	00029a28 	.word	0x00029a28
    f3a4:	0002d468 	.word	0x0002d468

0000f3a8 <bt_mesh_rpl_reset>:
{
    f3a8:	b570      	push	{r4, r5, r6, lr}
    f3aa:	4d0f      	ldr	r5, [pc, #60]	; (f3e8 <bt_mesh_rpl_reset+0x40>)
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    f3ac:	2400      	movs	r4, #0
    f3ae:	462e      	mov	r6, r5
		if (rpl->src) {
    f3b0:	f836 3034 	ldrh.w	r3, [r6, r4, lsl #3]
    f3b4:	f3c3 030e 	ubfx	r3, r3, #0, #15
    f3b8:	b143      	cbz	r3, f3cc <bt_mesh_rpl_reset+0x24>
			if (rpl->old_iv) {
    f3ba:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
    f3be:	f993 2001 	ldrsb.w	r2, [r3, #1]
    f3c2:	2a00      	cmp	r2, #0
    f3c4:	da08      	bge.n	f3d8 <bt_mesh_rpl_reset+0x30>
					clear_rpl(rpl);
    f3c6:	4628      	mov	r0, r5
    f3c8:	f7ff ff3c 	bl	f244 <clear_rpl>
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    f3cc:	3401      	adds	r4, #1
    f3ce:	2c0a      	cmp	r4, #10
    f3d0:	f105 0508 	add.w	r5, r5, #8
    f3d4:	d1ec      	bne.n	f3b0 <bt_mesh_rpl_reset+0x8>
}
    f3d6:	bd70      	pop	{r4, r5, r6, pc}
				rpl->old_iv = true;
    f3d8:	785a      	ldrb	r2, [r3, #1]
    f3da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    f3de:	705a      	strb	r2, [r3, #1]
					schedule_rpl_store(rpl, true);
    f3e0:	4628      	mov	r0, r5
    f3e2:	f7ff ff75 	bl	f2d0 <schedule_rpl_store.constprop.0>
    f3e6:	e7f1      	b.n	f3cc <bt_mesh_rpl_reset+0x24>
    f3e8:	20001a08 	.word	0x20001a08

0000f3ec <bt_mesh_rpl_pending_store>:
		store_rpl(rpl);
	}
}

void bt_mesh_rpl_pending_store(uint16_t addr)
{
    f3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int i;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) ||
    f3f0:	b203      	sxth	r3, r0
    f3f2:	2b00      	cmp	r3, #0
{
    f3f4:	b089      	sub	sp, #36	; 0x24
    f3f6:	4604      	mov	r4, r0
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) ||
    f3f8:	dc06      	bgt.n	f408 <bt_mesh_rpl_pending_store+0x1c>
    f3fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f3fe:	4298      	cmp	r0, r3
    f400:	d11e      	bne.n	f440 <bt_mesh_rpl_pending_store+0x54>
	     addr != BT_MESH_ADDR_ALL_NODES)) {
		return;
	}

	if (addr == BT_MESH_ADDR_ALL_NODES) {
		bt_mesh_settings_store_cancel(BT_MESH_SETTINGS_RPL_PENDING);
    f402:	2000      	movs	r0, #0
    f404:	f004 f8a2 	bl	1354c <bt_mesh_settings_store_cancel>
    f408:	4f3e      	ldr	r7, [pc, #248]	; (f504 <bt_mesh_rpl_pending_store+0x118>)
    f40a:	4b3f      	ldr	r3, [pc, #252]	; (f508 <bt_mesh_rpl_pending_store+0x11c>)
    f40c:	4e3f      	ldr	r6, [pc, #252]	; (f50c <bt_mesh_rpl_pending_store+0x120>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    f40e:	f8df 9100 	ldr.w	r9, [pc, #256]	; f510 <bt_mesh_rpl_pending_store+0x124>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    f412:	f8df a100 	ldr.w	sl, [pc, #256]	; f514 <bt_mesh_rpl_pending_store+0x128>
	snprintk(path, sizeof(path), "bt/mesh/RPL/%x", entry->src);
    f416:	f8df b100 	ldr.w	fp, [pc, #256]	; f518 <bt_mesh_rpl_pending_store+0x12c>
    f41a:	1aff      	subs	r7, r7, r3
    f41c:	08ff      	lsrs	r7, r7, #3
    f41e:	2500      	movs	r5, #0
    f420:	46b0      	mov	r8, r6
	}

	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
		if (addr != BT_MESH_ADDR_ALL_NODES &&
    f422:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f426:	429c      	cmp	r4, r3
    f428:	d00d      	beq.n	f446 <bt_mesh_rpl_pending_store+0x5a>
		    addr != replay_list[i].src) {
    f42a:	f838 3035 	ldrh.w	r3, [r8, r5, lsl #3]
		if (addr != BT_MESH_ADDR_ALL_NODES &&
    f42e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    f432:	42a3      	cmp	r3, r4
    f434:	d007      	beq.n	f446 <bt_mesh_rpl_pending_store+0x5a>
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    f436:	3501      	adds	r5, #1
    f438:	2d0a      	cmp	r5, #10
    f43a:	f106 0608 	add.w	r6, r6, #8
    f43e:	d1f0      	bne.n	f422 <bt_mesh_rpl_pending_store+0x36>

		if (addr != BT_MESH_ADDR_ALL_NODES) {
			break;
		}
	}
}
    f440:	b009      	add	sp, #36	; 0x24
    f442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f446:	f3bf 8f5b 	dmb	ish
    f44a:	f8d9 3000 	ldr.w	r3, [r9]
    f44e:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    f452:	07db      	lsls	r3, r3, #31
    f454:	d551      	bpl.n	f4fa <bt_mesh_rpl_pending_store+0x10e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    f456:	f3bf 8f5b 	dmb	ish
	return rpl - &replay_list[0];
    f45a:	eba6 0308 	sub.w	r3, r6, r8
	atomic_val_t mask = ATOMIC_MASK(bit);
    f45e:	f3c3 02c4 	ubfx	r2, r3, #3, #5
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    f462:	119b      	asrs	r3, r3, #6
	atomic_val_t mask = ATOMIC_MASK(bit);
    f464:	2101      	movs	r1, #1
    f466:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    f46a:	fa01 f202 	lsl.w	r2, r1, r2
    f46e:	f023 0303 	bic.w	r3, r3, #3
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    f472:	43d0      	mvns	r0, r2
    f474:	4453      	add	r3, sl
    f476:	e853 1f00 	ldrex	r1, [r3]
    f47a:	ea01 0c00 	and.w	ip, r1, r0
    f47e:	e843 ce00 	strex	lr, ip, [r3]
    f482:	f1be 0f00 	cmp.w	lr, #0
    f486:	d1f6      	bne.n	f476 <bt_mesh_rpl_pending_store+0x8a>
    f488:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(store, rpl_idx(rpl))) {
    f48c:	4211      	tst	r1, r2
    f48e:	d02f      	beq.n	f4f0 <bt_mesh_rpl_pending_store+0x104>
	if (!entry->src) {
    f490:	f838 3035 	ldrh.w	r3, [r8, r5, lsl #3]
    f494:	f3c3 020e 	ubfx	r2, r3, #0, #15
    f498:	b352      	cbz	r2, f4f0 <bt_mesh_rpl_pending_store+0x104>
	rpl.seq = entry->seq;
    f49a:	eb08 01c5 	add.w	r1, r8, r5, lsl #3
	snprintk(path, sizeof(path), "bt/mesh/RPL/%x", entry->src);
    f49e:	f3c3 030e 	ubfx	r3, r3, #0, #15
	rpl.seq = entry->seq;
    f4a2:	790a      	ldrb	r2, [r1, #4]
    f4a4:	8848      	ldrh	r0, [r1, #2]
    f4a6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
    f4aa:	9a02      	ldr	r2, [sp, #8]
    f4ac:	f360 0217 	bfi	r2, r0, #0, #24
    f4b0:	9202      	str	r2, [sp, #8]
	rpl.old_iv = entry->old_iv;
    f4b2:	7849      	ldrb	r1, [r1, #1]
    f4b4:	f3c2 6207 	ubfx	r2, r2, #24, #8
    f4b8:	09c9      	lsrs	r1, r1, #7
    f4ba:	f361 0200 	bfi	r2, r1, #0, #1
    f4be:	f88d 200b 	strb.w	r2, [sp, #11]
	snprintk(path, sizeof(path), "bt/mesh/RPL/%x", entry->src);
    f4c2:	2112      	movs	r1, #18
    f4c4:	465a      	mov	r2, fp
    f4c6:	a803      	add	r0, sp, #12
    f4c8:	f011 fedd 	bl	21286 <snprintk>
	err = settings_save_one(path, &rpl, sizeof(rpl));
    f4cc:	2204      	movs	r2, #4
    f4ce:	a902      	add	r1, sp, #8
    f4d0:	a803      	add	r0, sp, #12
    f4d2:	f7f4 fb53 	bl	3b7c <settings_save_one>
	if (err) {
    f4d6:	b158      	cbz	r0, f4f0 <bt_mesh_rpl_pending_store+0x104>
		BT_ERR("Failed to store RPL %s value", log_strdup(path));
    f4d8:	01ba      	lsls	r2, r7, #6
    f4da:	f042 0201 	orr.w	r2, r2, #1
    f4de:	a803      	add	r0, sp, #12
    f4e0:	9201      	str	r2, [sp, #4]
    f4e2:	f7f3 faf9 	bl	2ad8 <z_log_strdup>
    f4e6:	9a01      	ldr	r2, [sp, #4]
    f4e8:	4601      	mov	r1, r0
    f4ea:	480c      	ldr	r0, [pc, #48]	; (f51c <bt_mesh_rpl_pending_store+0x130>)
    f4ec:	f012 fb0a 	bl	21b04 <log_1>
		if (addr != BT_MESH_ADDR_ALL_NODES) {
    f4f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f4f4:	429c      	cmp	r4, r3
    f4f6:	d09e      	beq.n	f436 <bt_mesh_rpl_pending_store+0x4a>
    f4f8:	e7a2      	b.n	f440 <bt_mesh_rpl_pending_store+0x54>
			clear_rpl(&replay_list[i]);
    f4fa:	4630      	mov	r0, r6
    f4fc:	f7ff fea2 	bl	f244 <clear_rpl>
    f500:	e7f6      	b.n	f4f0 <bt_mesh_rpl_pending_store+0x104>
    f502:	bf00      	nop
    f504:	00029a28 	.word	0x00029a28
    f508:	00029870 	.word	0x00029870
    f50c:	20001a08 	.word	0x20001a08
    f510:	200018d8 	.word	0x200018d8
    f514:	20002330 	.word	0x20002330
    f518:	0002d445 	.word	0x0002d445
    f51c:	0002d475 	.word	0x0002d475

0000f520 <sub_end>:
		}
	}
}

static void sub_end(struct k_work *work)
{
    f520:	b570      	push	{r4, r5, r6, lr}
	sub.remaining = 0;
    f522:	4d07      	ldr	r5, [pc, #28]	; (f540 <sub_end+0x20>)
	STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
    f524:	4c07      	ldr	r4, [pc, #28]	; (f544 <sub_end+0x24>)
    f526:	4e08      	ldr	r6, [pc, #32]	; (f548 <sub_end+0x28>)
	sub.remaining = 0;
    f528:	2300      	movs	r3, #0
    f52a:	606b      	str	r3, [r5, #4]
	STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
    f52c:	42b4      	cmp	r4, r6
    f52e:	d300      	bcc.n	f532 <sub_end+0x12>
	notify_sub_end();
}
    f530:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->sub_end) {
    f532:	6863      	ldr	r3, [r4, #4]
    f534:	b10b      	cbz	r3, f53a <sub_end+0x1a>
			cb->sub_end(&sub);
    f536:	4628      	mov	r0, r5
    f538:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
    f53a:	3408      	adds	r4, #8
    f53c:	e7f6      	b.n	f52c <sub_end+0xc>
    f53e:	bf00      	nop
    f540:	20002344 	.word	0x20002344
    f544:	0002971c 	.word	0x0002971c
    f548:	0002971c 	.word	0x0002971c

0000f54c <hb_publish_end_cb>:
{
    f54c:	b570      	push	{r4, r5, r6, lr}
	if (pub.period && pub.count > 1) {
    f54e:	4d11      	ldr	r5, [pc, #68]	; (f594 <hb_publish_end_cb+0x48>)
    f550:	68ec      	ldr	r4, [r5, #12]
    f552:	b1b4      	cbz	r4, f582 <hb_publish_end_cb+0x36>
    f554:	886b      	ldrh	r3, [r5, #2]
    f556:	2b01      	cmp	r3, #1
    f558:	d913      	bls.n	f582 <hb_publish_end_cb+0x36>
		k_work_reschedule(&pub_timer, K_SECONDS(pub.period));
    f55a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    f55e:	435c      	muls	r4, r3
    f560:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    f564:	f240 30e7 	movw	r0, #999	; 0x3e7
    f568:	2100      	movs	r1, #0
    f56a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f56e:	2300      	movs	r3, #0
    f570:	fbe4 0106 	umlal	r0, r1, r4, r6
    f574:	f7f0 fe04 	bl	180 <__aeabi_uldivmod>
    f578:	4602      	mov	r2, r0
    f57a:	460b      	mov	r3, r1
    f57c:	4806      	ldr	r0, [pc, #24]	; (f598 <hb_publish_end_cb+0x4c>)
    f57e:	f010 ff51 	bl	20424 <k_work_reschedule>
	if (pub.count != 0xffff) {
    f582:	886b      	ldrh	r3, [r5, #2]
    f584:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f588:	4293      	cmp	r3, r2
		pub.count--;
    f58a:	bf1c      	itt	ne
    f58c:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
    f590:	806b      	strhne	r3, [r5, #2]
}
    f592:	bd70      	pop	{r4, r5, r6, pc}
    f594:	20002334 	.word	0x20002334
    f598:	20001a58 	.word	0x20001a58

0000f59c <heartbeat_send.constprop.0>:

static int heartbeat_send(const struct bt_mesh_send_cb *cb, void *cb_data)
    f59c:	b530      	push	{r4, r5, lr}
	struct __packed {
		uint8_t init_ttl;
		uint16_t feat;
	} hb;
	struct bt_mesh_msg_ctx ctx = {
		.net_idx = pub.net_idx,
    f59e:	4c26      	ldr	r4, [pc, #152]	; (f638 <heartbeat_send.constprop.0+0x9c>)
static int heartbeat_send(const struct bt_mesh_send_cb *cb, void *cb_data)
    f5a0:	b08b      	sub	sp, #44	; 0x2c
	struct bt_mesh_msg_ctx ctx = {
    f5a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f5a6:	f8ad 2012 	strh.w	r2, [sp, #18]
    f5aa:	8822      	ldrh	r2, [r4, #0]
    f5ac:	f8ad 2014 	strh.w	r2, [sp, #20]
    f5b0:	2300      	movs	r3, #0
    f5b2:	7922      	ldrb	r2, [r4, #4]
    f5b4:	f88d 201b 	strb.w	r2, [sp, #27]
static int heartbeat_send(const struct bt_mesh_send_cb *cb, void *cb_data)
    f5b8:	4605      	mov	r5, r0
		.net_idx = pub.net_idx,
    f5ba:	8920      	ldrh	r0, [r4, #8]
	struct bt_mesh_msg_ctx ctx = {
    f5bc:	f8cd 3016 	str.w	r3, [sp, #22]
		.app_idx = BT_MESH_KEY_UNUSED,
		.addr = pub.dst,
		.send_ttl = pub.ttl,
	};
	struct bt_mesh_net_tx tx = {
    f5c0:	e9cd 3307 	strd	r3, r3, [sp, #28]
	struct bt_mesh_msg_ctx ctx = {
    f5c4:	f88d 301a 	strb.w	r3, [sp, #26]
	struct bt_mesh_net_tx tx = {
    f5c8:	9309      	str	r3, [sp, #36]	; 0x24
	struct bt_mesh_msg_ctx ctx = {
    f5ca:	f8ad 0010 	strh.w	r0, [sp, #16]
		.sub = bt_mesh_subnet_get(pub.net_idx),
    f5ce:	f7fd fe83 	bl	d2d8 <bt_mesh_subnet_get>
	struct bt_mesh_net_tx tx = {
    f5d2:	ab04      	add	r3, sp, #16
    f5d4:	9308      	str	r3, [sp, #32]
    f5d6:	9007      	str	r0, [sp, #28]
		.ctx = &ctx,
		.src = bt_mesh_primary_addr(),
    f5d8:	f000 fffc 	bl	105d4 <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
    f5dc:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
		.xmit = bt_mesh_net_transmit_get(),
    f5e0:	f7fc f94c 	bl	b87c <bt_mesh_net_transmit_get>
	struct bt_mesh_net_tx tx = {
    f5e4:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
	};

	/* Do nothing if heartbeat publication is not enabled or the subnet is
	 * removed.
	 */
	if (!tx.sub || pub.dst == BT_MESH_ADDR_UNASSIGNED) {
    f5e8:	9807      	ldr	r0, [sp, #28]
    f5ea:	b310      	cbz	r0, f632 <heartbeat_send.constprop.0+0x96>
    f5ec:	8820      	ldrh	r0, [r4, #0]
    f5ee:	b300      	cbz	r0, f632 <heartbeat_send.constprop.0+0x96>
		return 0;
	}

	hb.init_ttl = pub.ttl;
    f5f0:	7923      	ldrb	r3, [r4, #4]
    f5f2:	f88d 300c 	strb.w	r3, [sp, #12]

	if (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED) {
    f5f6:	f7fc f9af 	bl	b958 <bt_mesh_relay_get>
	uint16_t feat = 0U;
    f5fa:	1e43      	subs	r3, r0, #1
    f5fc:	425c      	negs	r4, r3
    f5fe:	415c      	adcs	r4, r3
		feat |= BT_MESH_FEAT_RELAY;
	}

	if (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED) {
    f600:	f7fc f8f8 	bl	b7f4 <bt_mesh_gatt_proxy_get>
    f604:	2801      	cmp	r0, #1
		feat |= BT_MESH_FEAT_PROXY;
    f606:	bf08      	it	eq
    f608:	f044 0402 	orreq.w	r4, r4, #2
	}

	if (bt_mesh_friend_get() == BT_MESH_FRIEND_ENABLED) {
    f60c:	f016 f958 	bl	258c0 <bt_mesh_friend_get>
    f610:	2801      	cmp	r0, #1

	hb.feat = sys_cpu_to_be16(feat);

	BT_DBG("InitTTL %u feat 0x%04x", pub.ttl, feat);

	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
    f612:	f04f 0300 	mov.w	r3, #0
		feat |= BT_MESH_FEAT_FRIEND;
    f616:	bf08      	it	eq
    f618:	f044 0404 	orreq.w	r4, r4, #4
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
    f61c:	e9cd 5300 	strd	r5, r3, [sp]
	hb.feat = sys_cpu_to_be16(feat);
    f620:	0224      	lsls	r4, r4, #8
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
    f622:	2303      	movs	r3, #3
    f624:	aa03      	add	r2, sp, #12
    f626:	210a      	movs	r1, #10
    f628:	a807      	add	r0, sp, #28
	hb.feat = sys_cpu_to_be16(feat);
    f62a:	f8ad 400d 	strh.w	r4, [sp, #13]
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
    f62e:	f7fe ff19 	bl	e464 <bt_mesh_ctl_send>
				cb, cb_data);
}
    f632:	b00b      	add	sp, #44	; 0x2c
    f634:	bd30      	pop	{r4, r5, pc}
    f636:	bf00      	nop
    f638:	20002334 	.word	0x20002334

0000f63c <hb_publish>:
		hb_publish_end_cb(err, cb_data);
	}
}

static void hb_publish(struct k_work *work)
{
    f63c:	b538      	push	{r3, r4, r5, lr}
	int err;

	BT_DBG("hb_pub.count: %u", pub.count);

	/* Fast exit if disabled or expired */
	if (pub.period == 0U || pub.count == 0U) {
    f63e:	4c10      	ldr	r4, [pc, #64]	; (f680 <hb_publish+0x44>)
    f640:	68e3      	ldr	r3, [r4, #12]
    f642:	b193      	cbz	r3, f66a <hb_publish+0x2e>
    f644:	8863      	ldrh	r3, [r4, #2]
    f646:	b183      	cbz	r3, f66a <hb_publish+0x2e>
		return;
	}

	sub = bt_mesh_subnet_get(pub.net_idx);
    f648:	8920      	ldrh	r0, [r4, #8]
    f64a:	f7fd fe45 	bl	d2d8 <bt_mesh_subnet_get>
	if (!sub) {
    f64e:	4605      	mov	r5, r0
    f650:	b960      	cbnz	r0, f66c <hb_publish+0x30>
    f652:	4b0c      	ldr	r3, [pc, #48]	; (f684 <hb_publish+0x48>)
    f654:	4a0c      	ldr	r2, [pc, #48]	; (f688 <hb_publish+0x4c>)
		BT_ERR("No matching subnet for idx 0x%02x", pub.net_idx);
    f656:	8921      	ldrh	r1, [r4, #8]
    f658:	480c      	ldr	r0, [pc, #48]	; (f68c <hb_publish+0x50>)
    f65a:	1ad2      	subs	r2, r2, r3
    f65c:	08d2      	lsrs	r2, r2, #3
    f65e:	0192      	lsls	r2, r2, #6
    f660:	f042 0201 	orr.w	r2, r2, #1
    f664:	f012 fa4e 	bl	21b04 <log_1>
		pub.dst = BT_MESH_ADDR_UNASSIGNED;
    f668:	8025      	strh	r5, [r4, #0]

	err = heartbeat_send(&publish_cb, NULL);
	if (err) {
		hb_publish_end_cb(err, NULL);
	}
}
    f66a:	bd38      	pop	{r3, r4, r5, pc}
	err = heartbeat_send(&publish_cb, NULL);
    f66c:	4808      	ldr	r0, [pc, #32]	; (f690 <hb_publish+0x54>)
    f66e:	f7ff ff95 	bl	f59c <heartbeat_send.constprop.0>
	if (err) {
    f672:	2800      	cmp	r0, #0
    f674:	d0f9      	beq.n	f66a <hb_publish+0x2e>
}
    f676:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		hb_publish_end_cb(err, NULL);
    f67a:	2100      	movs	r1, #0
    f67c:	f7ff bf66 	b.w	f54c <hb_publish_end_cb>
    f680:	20002334 	.word	0x20002334
    f684:	00029870 	.word	0x00029870
    f688:	000299d0 	.word	0x000299d0
    f68c:	0002d4aa 	.word	0x0002d4aa
    f690:	0002a1fc 	.word	0x0002a1fc

0000f694 <bt_mesh_hb_recv>:
int bt_mesh_hb_recv(struct bt_mesh_net_rx *rx, struct net_buf_simple *buf)
{
	uint8_t init_ttl, hops;
	uint16_t feat;

	if (buf->len < 3) {
    f694:	888b      	ldrh	r3, [r1, #4]
    f696:	2b02      	cmp	r3, #2
{
    f698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f69c:	4607      	mov	r7, r0
    f69e:	460d      	mov	r5, r1
	if (buf->len < 3) {
    f6a0:	d80d      	bhi.n	f6be <bt_mesh_hb_recv+0x2a>
    f6a2:	4b2b      	ldr	r3, [pc, #172]	; (f750 <bt_mesh_hb_recv+0xbc>)
    f6a4:	492b      	ldr	r1, [pc, #172]	; (f754 <bt_mesh_hb_recv+0xc0>)
		BT_ERR("Too short heartbeat message");
    f6a6:	482c      	ldr	r0, [pc, #176]	; (f758 <bt_mesh_hb_recv+0xc4>)
    f6a8:	1ac9      	subs	r1, r1, r3
    f6aa:	08c9      	lsrs	r1, r1, #3
    f6ac:	0189      	lsls	r1, r1, #6
    f6ae:	f041 0101 	orr.w	r1, r1, #1
    f6b2:	f012 fa1a 	bl	21aea <log_0>
		return -EINVAL;
    f6b6:	f06f 0015 	mvn.w	r0, #21
	       (hops == 1U) ? "" : "s", feat);

	notify_recv(hops, feat);

	return 0;
}
    f6ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	init_ttl = (net_buf_simple_pull_u8(buf) & 0x7f);
    f6be:	4608      	mov	r0, r1
    f6c0:	f018 fe42 	bl	28348 <net_buf_simple_pull_u8>
	if (rx->ctx.addr != sub.src || rx->ctx.recv_dst != sub.dst) {
    f6c4:	4e25      	ldr	r6, [pc, #148]	; (f75c <bt_mesh_hb_recv+0xc8>)
	init_ttl = (net_buf_simple_pull_u8(buf) & 0x7f);
    f6c6:	4604      	mov	r4, r0
	feat = net_buf_simple_pull_be16(buf);
    f6c8:	4628      	mov	r0, r5
    f6ca:	f018 fe4d 	bl	28368 <net_buf_simple_pull_be16>
	if (rx->ctx.addr != sub.src || rx->ctx.recv_dst != sub.dst) {
    f6ce:	68ba      	ldr	r2, [r7, #8]
    f6d0:	68b3      	ldr	r3, [r6, #8]
    f6d2:	429a      	cmp	r2, r3
	feat = net_buf_simple_pull_be16(buf);
    f6d4:	4605      	mov	r5, r0
	if (rx->ctx.addr != sub.src || rx->ctx.recv_dst != sub.dst) {
    f6d6:	d001      	beq.n	f6dc <bt_mesh_hb_recv+0x48>
		return 0;
    f6d8:	2000      	movs	r0, #0
    f6da:	e7ee      	b.n	f6ba <bt_mesh_hb_recv+0x26>
	return k_work_delayable_busy_get(dwork) != 0;
    f6dc:	4820      	ldr	r0, [pc, #128]	; (f760 <bt_mesh_hb_recv+0xcc>)
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
    f6de:	7b7f      	ldrb	r7, [r7, #13]
    f6e0:	f019 fb6b 	bl	28dba <k_work_delayable_busy_get>
	if (!k_work_delayable_is_pending(&sub_timer)) {
    f6e4:	2800      	cmp	r0, #0
    f6e6:	d0f7      	beq.n	f6d8 <bt_mesh_hb_recv+0x44>
	init_ttl = (net_buf_simple_pull_u8(buf) & 0x7f);
    f6e8:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
    f6ec:	1be4      	subs	r4, r4, r7
	sub.min_hops = MIN(sub.min_hops, hops);
    f6ee:	7bb3      	ldrb	r3, [r6, #14]
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
    f6f0:	3401      	adds	r4, #1
    f6f2:	b2e4      	uxtb	r4, r4
	sub.min_hops = MIN(sub.min_hops, hops);
    f6f4:	42a3      	cmp	r3, r4
    f6f6:	bf28      	it	cs
    f6f8:	4623      	movcs	r3, r4
    f6fa:	73b3      	strb	r3, [r6, #14]
	sub.max_hops = MAX(sub.max_hops, hops);
    f6fc:	7bf3      	ldrb	r3, [r6, #15]
    f6fe:	42a3      	cmp	r3, r4
    f700:	bf38      	it	cc
    f702:	4623      	movcc	r3, r4
    f704:	73f3      	strb	r3, [r6, #15]
	if (sub.count < 0xffff) {
    f706:	89b3      	ldrh	r3, [r6, #12]
    f708:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f70c:	4293      	cmp	r3, r2
		sub.count++;
    f70e:	bf1c      	itt	ne
    f710:	3301      	addne	r3, #1
    f712:	81b3      	strhne	r3, [r6, #12]
	if (sub.dst == BT_MESH_ADDR_UNASSIGNED) {
    f714:	8973      	ldrh	r3, [r6, #10]
    f716:	b15b      	cbz	r3, f730 <bt_mesh_hb_recv+0x9c>
	return z_timeout_remaining(&dwork->timeout);
    f718:	4812      	ldr	r0, [pc, #72]	; (f764 <bt_mesh_hb_recv+0xd0>)
    f71a:	f019 fccd 	bl	290b8 <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
    f71e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f722:	fba0 3002 	umull	r3, r0, r0, r2
    f726:	0bdb      	lsrs	r3, r3, #15
    f728:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
	return rem_ms / MSEC_PER_SEC;
    f72c:	fbb3 f3f2 	udiv	r3, r3, r2
	sub.remaining = sub_remaining();
    f730:	6073      	str	r3, [r6, #4]
	STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
    f732:	4f0d      	ldr	r7, [pc, #52]	; (f768 <bt_mesh_hb_recv+0xd4>)
    f734:	4e0d      	ldr	r6, [pc, #52]	; (f76c <bt_mesh_hb_recv+0xd8>)
			cb->recv(&sub, hops, feat);
    f736:	f8df 8024 	ldr.w	r8, [pc, #36]	; f75c <bt_mesh_hb_recv+0xc8>
	STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
    f73a:	42be      	cmp	r6, r7
    f73c:	d2cc      	bcs.n	f6d8 <bt_mesh_hb_recv+0x44>
		if (cb->recv) {
    f73e:	6833      	ldr	r3, [r6, #0]
    f740:	b11b      	cbz	r3, f74a <bt_mesh_hb_recv+0xb6>
			cb->recv(&sub, hops, feat);
    f742:	462a      	mov	r2, r5
    f744:	4621      	mov	r1, r4
    f746:	4640      	mov	r0, r8
    f748:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
    f74a:	3608      	adds	r6, #8
    f74c:	e7f5      	b.n	f73a <bt_mesh_hb_recv+0xa6>
    f74e:	bf00      	nop
    f750:	00029870 	.word	0x00029870
    f754:	000299d0 	.word	0x000299d0
    f758:	0002d4cc 	.word	0x0002d4cc
    f75c:	20002344 	.word	0x20002344
    f760:	20001a88 	.word	0x20001a88
    f764:	20001a98 	.word	0x20001a98
    f768:	0002971c 	.word	0x0002971c
    f76c:	0002971c 	.word	0x0002971c

0000f770 <bt_mesh_hb_pub_set>:
	 */
	(void)k_work_cancel_delayable(&pub_timer);
}

uint8_t bt_mesh_hb_pub_set(struct bt_mesh_hb_pub *new_pub)
{
    f770:	b538      	push	{r3, r4, r5, lr}
	if (!new_pub || new_pub->dst == BT_MESH_ADDR_UNASSIGNED) {
    f772:	4604      	mov	r4, r0
    f774:	b108      	cbz	r0, f77a <bt_mesh_hb_pub_set+0xa>
    f776:	8803      	ldrh	r3, [r0, #0]
    f778:	b97b      	cbnz	r3, f79a <bt_mesh_hb_pub_set+0x2a>
	pub.dst = BT_MESH_ADDR_UNASSIGNED;
    f77a:	4b1a      	ldr	r3, [pc, #104]	; (f7e4 <bt_mesh_hb_pub_set+0x74>)
	(void)k_work_cancel_delayable(&pub_timer);
    f77c:	481a      	ldr	r0, [pc, #104]	; (f7e8 <bt_mesh_hb_pub_set+0x78>)
	pub.dst = BT_MESH_ADDR_UNASSIGNED;
    f77e:	2400      	movs	r4, #0
    f780:	601c      	str	r4, [r3, #0]
	pub.ttl = 0U;
    f782:	711c      	strb	r4, [r3, #4]
	pub.period = 0U;
    f784:	60dc      	str	r4, [r3, #12]
	(void)k_work_cancel_delayable(&pub_timer);
    f786:	f019 fb2c 	bl	28de2 <k_work_cancel_delayable>
		pub_disable();

		if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
		    bt_mesh_is_provisioned()) {
    f78a:	f7fb ff0f 	bl	b5ac <bt_mesh_is_provisioned>
		if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    f78e:	b1a0      	cbz	r0, f7ba <bt_mesh_hb_pub_set+0x4a>
	 * the work item.
	 */
	k_work_reschedule(&pub_timer, K_NO_WAIT);

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		bt_mesh_settings_store_schedule(
    f790:	2006      	movs	r0, #6
    f792:	f003 fe7b 	bl	1348c <bt_mesh_settings_store_schedule>
					BT_MESH_SETTINGS_HB_PUB_PENDING);
	}

	return STATUS_SUCCESS;
    f796:	2000      	movs	r0, #0
    f798:	e00f      	b.n	f7ba <bt_mesh_hb_pub_set+0x4a>
	if (!bt_mesh_subnet_get(new_pub->net_idx)) {
    f79a:	8900      	ldrh	r0, [r0, #8]
    f79c:	f7fd fd9c 	bl	d2d8 <bt_mesh_subnet_get>
    f7a0:	b960      	cbnz	r0, f7bc <bt_mesh_hb_pub_set+0x4c>
    f7a2:	4b12      	ldr	r3, [pc, #72]	; (f7ec <bt_mesh_hb_pub_set+0x7c>)
    f7a4:	4a12      	ldr	r2, [pc, #72]	; (f7f0 <bt_mesh_hb_pub_set+0x80>)
		BT_ERR("Unknown NetKey 0x%04x", new_pub->net_idx);
    f7a6:	4813      	ldr	r0, [pc, #76]	; (f7f4 <bt_mesh_hb_pub_set+0x84>)
    f7a8:	8921      	ldrh	r1, [r4, #8]
    f7aa:	1ad2      	subs	r2, r2, r3
    f7ac:	08d2      	lsrs	r2, r2, #3
    f7ae:	0192      	lsls	r2, r2, #6
    f7b0:	f042 0201 	orr.w	r2, r2, #1
    f7b4:	f012 f9a6 	bl	21b04 <log_1>
		return STATUS_INVALID_NETKEY;
    f7b8:	2004      	movs	r0, #4
}
    f7ba:	bd38      	pop	{r3, r4, r5, pc}
	new_pub->feat &= BT_MESH_FEAT_SUPPORTED;
    f7bc:	88e3      	ldrh	r3, [r4, #6]
	pub = *new_pub;
    f7be:	4d09      	ldr	r5, [pc, #36]	; (f7e4 <bt_mesh_hb_pub_set+0x74>)
	new_pub->feat &= BT_MESH_FEAT_SUPPORTED;
    f7c0:	f003 030f 	and.w	r3, r3, #15
    f7c4:	80e3      	strh	r3, [r4, #6]
	pub = *new_pub;
    f7c6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    f7ca:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	if (!bt_mesh_is_provisioned()) {
    f7ce:	f7fb feed 	bl	b5ac <bt_mesh_is_provisioned>
    f7d2:	2800      	cmp	r0, #0
    f7d4:	d0f1      	beq.n	f7ba <bt_mesh_hb_pub_set+0x4a>
	k_work_reschedule(&pub_timer, K_NO_WAIT);
    f7d6:	2200      	movs	r2, #0
    f7d8:	2300      	movs	r3, #0
    f7da:	4803      	ldr	r0, [pc, #12]	; (f7e8 <bt_mesh_hb_pub_set+0x78>)
    f7dc:	f010 fe22 	bl	20424 <k_work_reschedule>
    f7e0:	e7d6      	b.n	f790 <bt_mesh_hb_pub_set+0x20>
    f7e2:	bf00      	nop
    f7e4:	20002334 	.word	0x20002334
    f7e8:	20001a58 	.word	0x20001a58
    f7ec:	00029870 	.word	0x00029870
    f7f0:	000299d0 	.word	0x000299d0
    f7f4:	0002d4e8 	.word	0x0002d4e8

0000f7f8 <hb_pub_set>:
	}
}

static int hb_pub_set(const char *name, size_t len_rd,
		      settings_read_cb read_cb, void *cb_arg)
{
    f7f8:	b510      	push	{r4, lr}
    f7fa:	b086      	sub	sp, #24
    f7fc:	4610      	mov	r0, r2
    f7fe:	4619      	mov	r1, r3
	struct bt_mesh_hb_pub pub;
	struct hb_pub_val hb_val;
	int err;

	err = bt_mesh_settings_set(read_cb, cb_arg, &hb_val, sizeof(hb_val));
    f800:	466a      	mov	r2, sp
    f802:	2308      	movs	r3, #8
    f804:	f003 fe10 	bl	13428 <bt_mesh_settings_set>
	if (err) {
    f808:	4604      	mov	r4, r0
    f80a:	b160      	cbz	r0, f826 <hb_pub_set+0x2e>
    f80c:	491c      	ldr	r1, [pc, #112]	; (f880 <hb_pub_set+0x88>)
    f80e:	4b1d      	ldr	r3, [pc, #116]	; (f884 <hb_pub_set+0x8c>)
		BT_ERR("Failed to set \'hb_val\'");
    f810:	481d      	ldr	r0, [pc, #116]	; (f888 <hb_pub_set+0x90>)
    f812:	1ac9      	subs	r1, r1, r3
    f814:	08c9      	lsrs	r1, r1, #3
    f816:	0189      	lsls	r1, r1, #6
    f818:	f041 0101 	orr.w	r1, r1, #1
    f81c:	f012 f965 	bl	21aea <log_0>
	(void)bt_mesh_hb_pub_set(&pub);

	BT_DBG("Restored heartbeat publication");

	return 0;
}
    f820:	4620      	mov	r0, r4
    f822:	b006      	add	sp, #24
    f824:	bd10      	pop	{r4, pc}
	pub.period = bt_mesh_hb_pwr2(hb_val.period);
    f826:	f89d 2002 	ldrb.w	r2, [sp, #2]
	pub.dst = hb_val.dst;
    f82a:	f8bd 3000 	ldrh.w	r3, [sp]
    f82e:	f8ad 3008 	strh.w	r3, [sp, #8]
 * SPDX-License-Identifier: Apache-2.0
 */

static inline uint16_t bt_mesh_hb_pwr2(uint8_t val)
{
	if (!val) {
    f832:	b302      	cbz	r2, f876 <hb_pub_set+0x7e>
		return 0x0000;
	} else if (val == 0xff || val == 0x11) {
    f834:	2aff      	cmp	r2, #255	; 0xff
    f836:	d020      	beq.n	f87a <hb_pub_set+0x82>
    f838:	2a11      	cmp	r2, #17
    f83a:	d01e      	beq.n	f87a <hb_pub_set+0x82>
		return 0xffff;
	} else {
		return (1 << (val - 1));
    f83c:	3a01      	subs	r2, #1
    f83e:	2301      	movs	r3, #1
    f840:	4093      	lsls	r3, r2
    f842:	b29b      	uxth	r3, r3
	pub.period = bt_mesh_hb_pwr2(hb_val.period);
    f844:	9305      	str	r3, [sp, #20]
	pub.ttl = hb_val.ttl;
    f846:	f89d 3003 	ldrb.w	r3, [sp, #3]
    f84a:	f88d 300c 	strb.w	r3, [sp, #12]
	pub.feat = hb_val.feat;
    f84e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    f852:	f8ad 300e 	strh.w	r3, [sp, #14]
	pub.net_idx = hb_val.net_idx;
    f856:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    f85a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    f85e:	f8ad 3010 	strh.w	r3, [sp, #16]
	if (hb_val.indefinite) {
    f862:	f89d 3007 	ldrb.w	r3, [sp, #7]
	(void)bt_mesh_hb_pub_set(&pub);
    f866:	a802      	add	r0, sp, #8
	if (hb_val.indefinite) {
    f868:	f343 1300 	sbfx	r3, r3, #4, #1
    f86c:	f8ad 300a 	strh.w	r3, [sp, #10]
	(void)bt_mesh_hb_pub_set(&pub);
    f870:	f7ff ff7e 	bl	f770 <bt_mesh_hb_pub_set>
	return 0;
    f874:	e7d4      	b.n	f820 <hb_pub_set+0x28>
		return 0x0000;
    f876:	4603      	mov	r3, r0
    f878:	e7e4      	b.n	f844 <hb_pub_set+0x4c>
		return 0xffff;
    f87a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f87e:	e7e1      	b.n	f844 <hb_pub_set+0x4c>
    f880:	000299d0 	.word	0x000299d0
    f884:	00029870 	.word	0x00029870
    f888:	0002d4fe 	.word	0x0002d4fe

0000f88c <bt_mesh_hb_pub_get>:
	*get = pub;
    f88c:	4b03      	ldr	r3, [pc, #12]	; (f89c <bt_mesh_hb_pub_get+0x10>)
{
    f88e:	b510      	push	{r4, lr}
    f890:	4604      	mov	r4, r0
	*get = pub;
    f892:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    f894:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    f898:	bd10      	pop	{r4, pc}
    f89a:	bf00      	nop
    f89c:	20002334 	.word	0x20002334

0000f8a0 <bt_mesh_hb_sub_set>:
	if (src != BT_MESH_ADDR_UNASSIGNED && !BT_MESH_ADDR_IS_UNICAST(src)) {
    f8a0:	0403      	lsls	r3, r0, #16
{
    f8a2:	b570      	push	{r4, r5, r6, lr}
    f8a4:	4606      	mov	r6, r0
    f8a6:	460c      	mov	r4, r1
    f8a8:	4615      	mov	r5, r2
	if (src != BT_MESH_ADDR_UNASSIGNED && !BT_MESH_ADDR_IS_UNICAST(src)) {
    f8aa:	d50b      	bpl.n	f8c4 <bt_mesh_hb_sub_set+0x24>
    f8ac:	492e      	ldr	r1, [pc, #184]	; (f968 <bt_mesh_hb_sub_set+0xc8>)
    f8ae:	4b2f      	ldr	r3, [pc, #188]	; (f96c <bt_mesh_hb_sub_set+0xcc>)
		BT_WARN("Prohibited source address");
    f8b0:	482f      	ldr	r0, [pc, #188]	; (f970 <bt_mesh_hb_sub_set+0xd0>)
    f8b2:	1ac9      	subs	r1, r1, r3
    f8b4:	08c9      	lsrs	r1, r1, #3
    f8b6:	0189      	lsls	r1, r1, #6
    f8b8:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("Prohibited destination address");
    f8bc:	f012 f915 	bl	21aea <log_0>
		return STATUS_INVALID_ADDRESS;
    f8c0:	2001      	movs	r0, #1
}
    f8c2:	bd70      	pop	{r4, r5, r6, pc}
	if (BT_MESH_ADDR_IS_VIRTUAL(dst) || BT_MESH_ADDR_IS_RFU(dst) ||
    f8c4:	f481 4300 	eor.w	r3, r1, #32768	; 0x8000
    f8c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    f8cc:	d208      	bcs.n	f8e0 <bt_mesh_hb_sub_set+0x40>
    f8ce:	4926      	ldr	r1, [pc, #152]	; (f968 <bt_mesh_hb_sub_set+0xc8>)
    f8d0:	4b26      	ldr	r3, [pc, #152]	; (f96c <bt_mesh_hb_sub_set+0xcc>)
		BT_WARN("Prohibited destination address");
    f8d2:	4828      	ldr	r0, [pc, #160]	; (f974 <bt_mesh_hb_sub_set+0xd4>)
    f8d4:	1ac9      	subs	r1, r1, r3
    f8d6:	08c9      	lsrs	r1, r1, #3
    f8d8:	0189      	lsls	r1, r1, #6
    f8da:	f041 0102 	orr.w	r1, r1, #2
    f8de:	e7ed      	b.n	f8bc <bt_mesh_hb_sub_set+0x1c>
	if (BT_MESH_ADDR_IS_VIRTUAL(dst) || BT_MESH_ADDR_IS_RFU(dst) ||
    f8e0:	f501 7380 	add.w	r3, r1, #256	; 0x100
    f8e4:	b29b      	uxth	r3, r3
    f8e6:	2bfb      	cmp	r3, #251	; 0xfb
    f8e8:	d9f1      	bls.n	f8ce <bt_mesh_hb_sub_set+0x2e>
    f8ea:	b20b      	sxth	r3, r1
    f8ec:	2b00      	cmp	r3, #0
    f8ee:	dd03      	ble.n	f8f8 <bt_mesh_hb_sub_set+0x58>
	    (BT_MESH_ADDR_IS_UNICAST(dst) && dst != bt_mesh_primary_addr())) {
    f8f0:	f000 fe70 	bl	105d4 <bt_mesh_primary_addr>
    f8f4:	42a0      	cmp	r0, r4
    f8f6:	d1ea      	bne.n	f8ce <bt_mesh_hb_sub_set+0x2e>
	if (period > (1U << 16)) {
    f8f8:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
    f8fc:	d90c      	bls.n	f918 <bt_mesh_hb_sub_set+0x78>
    f8fe:	4b1b      	ldr	r3, [pc, #108]	; (f96c <bt_mesh_hb_sub_set+0xcc>)
    f900:	4a19      	ldr	r2, [pc, #100]	; (f968 <bt_mesh_hb_sub_set+0xc8>)
		BT_WARN("Prohibited subscription period %u s", period);
    f902:	481d      	ldr	r0, [pc, #116]	; (f978 <bt_mesh_hb_sub_set+0xd8>)
    f904:	1ad2      	subs	r2, r2, r3
    f906:	08d2      	lsrs	r2, r2, #3
    f908:	0192      	lsls	r2, r2, #6
    f90a:	f042 0202 	orr.w	r2, r2, #2
    f90e:	4629      	mov	r1, r5
    f910:	f012 f8f8 	bl	21b04 <log_1>
		return STATUS_CANNOT_SET;
    f914:	200f      	movs	r0, #15
    f916:	e7d4      	b.n	f8c2 <bt_mesh_hb_sub_set+0x22>
	if (src == BT_MESH_ADDR_UNASSIGNED || dst == BT_MESH_ADDR_UNASSIGNED) {
    f918:	4b18      	ldr	r3, [pc, #96]	; (f97c <bt_mesh_hb_sub_set+0xdc>)
    f91a:	b106      	cbz	r6, f91e <bt_mesh_hb_sub_set+0x7e>
    f91c:	b9dc      	cbnz	r4, f956 <bt_mesh_hb_sub_set+0xb6>
		sub.src = BT_MESH_ADDR_UNASSIGNED;
    f91e:	2200      	movs	r2, #0
		sub.count = 0U;
    f920:	e9c3 2202 	strd	r2, r2, [r3, #8]
		sub.period = 0U;
    f924:	601a      	str	r2, [r3, #0]
	k_work_reschedule(&sub_timer, K_SECONDS(sub.period));
    f926:	681d      	ldr	r5, [r3, #0]
			return (t * to_hz + off) / from_hz;
    f928:	2400      	movs	r4, #0
    f92a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    f92e:	435d      	muls	r5, r3
    f930:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    f934:	f240 30e7 	movw	r0, #999	; 0x3e7
    f938:	4621      	mov	r1, r4
    f93a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f93e:	2300      	movs	r3, #0
    f940:	fbe5 0106 	umlal	r0, r1, r5, r6
    f944:	f7f0 fc1c 	bl	180 <__aeabi_uldivmod>
    f948:	4602      	mov	r2, r0
    f94a:	460b      	mov	r3, r1
    f94c:	480c      	ldr	r0, [pc, #48]	; (f980 <bt_mesh_hb_sub_set+0xe0>)
    f94e:	f010 fd69 	bl	20424 <k_work_reschedule>
	return STATUS_SUCCESS;
    f952:	4620      	mov	r0, r4
    f954:	e7b5      	b.n	f8c2 <bt_mesh_hb_sub_set+0x22>
	} else if (period) {
    f956:	b125      	cbz	r5, f962 <bt_mesh_hb_sub_set+0xc2>
		sub.count = 0U;
    f958:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
		sub.src = src;
    f95c:	811e      	strh	r6, [r3, #8]
		sub.dst = dst;
    f95e:	815c      	strh	r4, [r3, #10]
		sub.count = 0U;
    f960:	60da      	str	r2, [r3, #12]
		sub.period = 0U;
    f962:	601d      	str	r5, [r3, #0]
    f964:	e7df      	b.n	f926 <bt_mesh_hb_sub_set+0x86>
    f966:	bf00      	nop
    f968:	000299d0 	.word	0x000299d0
    f96c:	00029870 	.word	0x00029870
    f970:	0002d515 	.word	0x0002d515
    f974:	0002d52f 	.word	0x0002d52f
    f978:	0002d54e 	.word	0x0002d54e
    f97c:	20002344 	.word	0x20002344
    f980:	20001a88 	.word	0x20001a88

0000f984 <bt_mesh_hb_sub_reset_count>:
	sub.count = 0;
    f984:	4b01      	ldr	r3, [pc, #4]	; (f98c <bt_mesh_hb_sub_reset_count+0x8>)
    f986:	2200      	movs	r2, #0
    f988:	819a      	strh	r2, [r3, #12]
}
    f98a:	4770      	bx	lr
    f98c:	20002344 	.word	0x20002344

0000f990 <bt_mesh_hb_sub_get>:
{
    f990:	b538      	push	{r3, r4, r5, lr}
	*get = sub;
    f992:	4d0b      	ldr	r5, [pc, #44]	; (f9c0 <bt_mesh_hb_sub_get+0x30>)
{
    f994:	4604      	mov	r4, r0
	*get = sub;
    f996:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    f99a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (sub.dst == BT_MESH_ADDR_UNASSIGNED) {
    f99e:	896b      	ldrh	r3, [r5, #10]
    f9a0:	b15b      	cbz	r3, f9ba <bt_mesh_hb_sub_get+0x2a>
    f9a2:	4808      	ldr	r0, [pc, #32]	; (f9c4 <bt_mesh_hb_sub_get+0x34>)
    f9a4:	f019 fb88 	bl	290b8 <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
    f9a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f9ac:	fba0 3002 	umull	r3, r0, r0, r2
    f9b0:	0bdb      	lsrs	r3, r3, #15
    f9b2:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
	return rem_ms / MSEC_PER_SEC;
    f9b6:	fbb3 f3f2 	udiv	r3, r3, r2
	get->remaining = sub_remaining();
    f9ba:	6063      	str	r3, [r4, #4]
}
    f9bc:	bd38      	pop	{r3, r4, r5, pc}
    f9be:	bf00      	nop
    f9c0:	20002344 	.word	0x20002344
    f9c4:	20001a98 	.word	0x20001a98

0000f9c8 <bt_mesh_hb_feature_changed>:
	if (pub.dst == BT_MESH_ADDR_UNASSIGNED) {
    f9c8:	4b04      	ldr	r3, [pc, #16]	; (f9dc <bt_mesh_hb_feature_changed+0x14>)
    f9ca:	881a      	ldrh	r2, [r3, #0]
    f9cc:	b12a      	cbz	r2, f9da <bt_mesh_hb_feature_changed+0x12>
	if (!(pub.feat & features)) {
    f9ce:	88db      	ldrh	r3, [r3, #6]
    f9d0:	4218      	tst	r0, r3
    f9d2:	d002      	beq.n	f9da <bt_mesh_hb_feature_changed+0x12>
	heartbeat_send(NULL, NULL);
    f9d4:	2000      	movs	r0, #0
    f9d6:	f7ff bde1 	b.w	f59c <heartbeat_send.constprop.0>
}
    f9da:	4770      	bx	lr
    f9dc:	20002334 	.word	0x20002334

0000f9e0 <bt_mesh_hb_init>:
{
    f9e0:	b508      	push	{r3, lr}
	pub.net_idx = BT_MESH_KEY_UNUSED;
    f9e2:	4b07      	ldr	r3, [pc, #28]	; (fa00 <bt_mesh_hb_init+0x20>)
	k_work_init_delayable(&pub_timer, hb_publish);
    f9e4:	4907      	ldr	r1, [pc, #28]	; (fa04 <bt_mesh_hb_init+0x24>)
    f9e6:	4808      	ldr	r0, [pc, #32]	; (fa08 <bt_mesh_hb_init+0x28>)
	pub.net_idx = BT_MESH_KEY_UNUSED;
    f9e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f9ec:	811a      	strh	r2, [r3, #8]
	k_work_init_delayable(&pub_timer, hb_publish);
    f9ee:	f019 f9d8 	bl	28da2 <k_work_init_delayable>
}
    f9f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_work_init_delayable(&sub_timer, sub_end);
    f9f6:	4905      	ldr	r1, [pc, #20]	; (fa0c <bt_mesh_hb_init+0x2c>)
    f9f8:	4805      	ldr	r0, [pc, #20]	; (fa10 <bt_mesh_hb_init+0x30>)
    f9fa:	f019 b9d2 	b.w	28da2 <k_work_init_delayable>
    f9fe:	bf00      	nop
    fa00:	20002334 	.word	0x20002334
    fa04:	0000f63d 	.word	0x0000f63d
    fa08:	20001a58 	.word	0x20001a58
    fa0c:	0000f521 	.word	0x0000f521
    fa10:	20001a88 	.word	0x20001a88

0000fa14 <bt_mesh_hb_start>:
	if (pub.count && pub.period) {
    fa14:	4b05      	ldr	r3, [pc, #20]	; (fa2c <bt_mesh_hb_start+0x18>)
    fa16:	885a      	ldrh	r2, [r3, #2]
    fa18:	b132      	cbz	r2, fa28 <bt_mesh_hb_start+0x14>
    fa1a:	68db      	ldr	r3, [r3, #12]
    fa1c:	b123      	cbz	r3, fa28 <bt_mesh_hb_start+0x14>
		k_work_reschedule(&pub_timer, K_NO_WAIT);
    fa1e:	4804      	ldr	r0, [pc, #16]	; (fa30 <bt_mesh_hb_start+0x1c>)
    fa20:	2200      	movs	r2, #0
    fa22:	2300      	movs	r3, #0
    fa24:	f010 bcfe 	b.w	20424 <k_work_reschedule>
}
    fa28:	4770      	bx	lr
    fa2a:	bf00      	nop
    fa2c:	20002334 	.word	0x20002334
    fa30:	20001a58 	.word	0x20001a58

0000fa34 <bt_mesh_hb_pub_pending_store>:

BT_MESH_SETTINGS_DEFINE(pub, "HBPub", hb_pub_set);

void bt_mesh_hb_pub_pending_store(void)
{
    fa34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_mesh_hb_pub pub;
	struct hb_pub_val val;
	int err;

	bt_mesh_hb_pub_get(&pub);
    fa36:	a802      	add	r0, sp, #8
    fa38:	f7ff ff28 	bl	f88c <bt_mesh_hb_pub_get>
	if (pub.dst == BT_MESH_ADDR_UNASSIGNED) {
    fa3c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    fa40:	b981      	cbnz	r1, fa64 <bt_mesh_hb_pub_pending_store+0x30>
		err = settings_delete("bt/mesh/HBPub");
    fa42:	4821      	ldr	r0, [pc, #132]	; (fac8 <bt_mesh_hb_pub_pending_store+0x94>)
    fa44:	f012 fe51 	bl	226ea <settings_delete>
		val.net_idx = pub.net_idx;

		err = settings_save_one("bt/mesh/HBPub", &val, sizeof(val));
	}

	if (err) {
    fa48:	b148      	cbz	r0, fa5e <bt_mesh_hb_pub_pending_store+0x2a>
    fa4a:	4920      	ldr	r1, [pc, #128]	; (facc <bt_mesh_hb_pub_pending_store+0x98>)
    fa4c:	4b20      	ldr	r3, [pc, #128]	; (fad0 <bt_mesh_hb_pub_pending_store+0x9c>)
		BT_ERR("Failed to store Heartbeat Publication");
    fa4e:	4821      	ldr	r0, [pc, #132]	; (fad4 <bt_mesh_hb_pub_pending_store+0xa0>)
    fa50:	1ac9      	subs	r1, r1, r3
    fa52:	08c9      	lsrs	r1, r1, #3
    fa54:	0189      	lsls	r1, r1, #6
    fa56:	f041 0101 	orr.w	r1, r1, #1
    fa5a:	f012 f846 	bl	21aea <log_0>
	} else {
		BT_DBG("Stored Heartbeat Publication");
	}
}
    fa5e:	b007      	add	sp, #28
    fa60:	f85d fb04 	ldr.w	pc, [sp], #4
		val.indefinite = (pub.count == 0xffff);
    fa64:	f8bd 300a 	ldrh.w	r3, [sp, #10]
		val.dst = pub.dst;
    fa68:	f8ad 1000 	strh.w	r1, [sp]
		val.indefinite = (pub.count == 0xffff);
    fa6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    fa70:	1a98      	subs	r0, r3, r2
    fa72:	4243      	negs	r3, r0
    fa74:	4143      	adcs	r3, r0
    fa76:	f89d 0007 	ldrb.w	r0, [sp, #7]
    fa7a:	f363 1004 	bfi	r0, r3, #4, #1
		val.period = bt_mesh_hb_log(pub.period);
    fa7e:	9b05      	ldr	r3, [sp, #20]
		val.indefinite = (pub.count == 0xffff);
    fa80:	f88d 0007 	strb.w	r0, [sp, #7]
	}
}

static inline uint8_t bt_mesh_hb_log(uint32_t val)
{
	if (!val) {
    fa84:	b13b      	cbz	r3, fa96 <bt_mesh_hb_pub_pending_store+0x62>
		return 0x00;
	} else if (val == 0xffff) {
    fa86:	4293      	cmp	r3, r2
		return 0xff;
	} else {
		return 32 - __builtin_clz(val);
    fa88:	bf1d      	ittte	ne
    fa8a:	fab3 f383 	clzne	r3, r3
    fa8e:	f1c3 0320 	rsbne	r3, r3, #32
    fa92:	b2db      	uxtbne	r3, r3
		return 0xff;
    fa94:	23ff      	moveq	r3, #255	; 0xff
		val.period = bt_mesh_hb_log(pub.period);
    fa96:	f88d 3002 	strb.w	r3, [sp, #2]
		val.ttl = pub.ttl;
    fa9a:	f89d 300c 	ldrb.w	r3, [sp, #12]
    fa9e:	f88d 3003 	strb.w	r3, [sp, #3]
		val.feat = pub.feat;
    faa2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		val.net_idx = pub.net_idx;
    faa6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
		val.feat = pub.feat;
    faaa:	f8ad 3004 	strh.w	r3, [sp, #4]
		val.net_idx = pub.net_idx;
    faae:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		err = settings_save_one("bt/mesh/HBPub", &val, sizeof(val));
    fab2:	4805      	ldr	r0, [pc, #20]	; (fac8 <bt_mesh_hb_pub_pending_store+0x94>)
		val.net_idx = pub.net_idx;
    fab4:	f362 030b 	bfi	r3, r2, #0, #12
		err = settings_save_one("bt/mesh/HBPub", &val, sizeof(val));
    fab8:	4669      	mov	r1, sp
    faba:	2208      	movs	r2, #8
		val.net_idx = pub.net_idx;
    fabc:	f8ad 3006 	strh.w	r3, [sp, #6]
		err = settings_save_one("bt/mesh/HBPub", &val, sizeof(val));
    fac0:	f7f4 f85c 	bl	3b7c <settings_save_one>
    fac4:	e7c0      	b.n	fa48 <bt_mesh_hb_pub_pending_store+0x14>
    fac6:	bf00      	nop
    fac8:	0002d572 	.word	0x0002d572
    facc:	000299d0 	.word	0x000299d0
    fad0:	00029870 	.word	0x00029870
    fad4:	0002d580 	.word	0x0002d580

0000fad8 <bt_mesh_k2>:
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
}

int bt_mesh_k2(const uint8_t n[16], const uint8_t *p, size_t p_len,
	       uint8_t net_id[1], uint8_t enc_key[16], uint8_t priv_key[16])
{
    fad8:	b5f0      	push	{r4, r5, r6, r7, lr}
    fada:	b095      	sub	sp, #84	; 0x54
    fadc:	4604      	mov	r4, r0
    fade:	460f      	mov	r7, r1
	int err;

	BT_DBG("n %s", bt_hex(n, 16));
	BT_DBG("p %s", bt_hex(p, p_len));

	err = bt_mesh_s1("smk2", salt);
    fae0:	4828      	ldr	r0, [pc, #160]	; (fb84 <bt_mesh_k2+0xac>)
    fae2:	a902      	add	r1, sp, #8
{
    fae4:	4615      	mov	r5, r2
    fae6:	461e      	mov	r6, r3
	err = bt_mesh_s1("smk2", salt);
    fae8:	f016 faf5 	bl	260d6 <bt_mesh_s1>
	if (err) {
    faec:	2800      	cmp	r0, #0
    faee:	d146      	bne.n	fb7e <bt_mesh_k2+0xa6>
		return err;
	}

	err = bt_mesh_aes_cmac_one(salt, n, 16, t);
    faf0:	4621      	mov	r1, r4
    faf2:	ab0a      	add	r3, sp, #40	; 0x28
    faf4:	2210      	movs	r2, #16
    faf6:	a802      	add	r0, sp, #8
    faf8:	f016 fae3 	bl	260c2 <bt_mesh_aes_cmac_one>
	if (err) {
    fafc:	4604      	mov	r4, r0
    fafe:	2800      	cmp	r0, #0
    fb00:	d13a      	bne.n	fb78 <bt_mesh_k2+0xa0>
		return err;
	}

	pad = 0x01;
    fb02:	2301      	movs	r3, #1

	sg[0].data = NULL;
	sg[0].len  = 0;
	sg[1].data = p;
	sg[1].len  = p_len;
    fb04:	e9cd 7510 	strd	r7, r5, [sp, #64]	; 0x40
	sg[2].data = &pad;
    fb08:	f10d 0207 	add.w	r2, sp, #7
	sg[2].len  = sizeof(pad);

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    fb0c:	ad06      	add	r5, sp, #24
	sg[2].len  = sizeof(pad);
    fb0e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	sg[0].len  = 0;
    fb12:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
	pad = 0x01;
    fb16:	f88d 3007 	strb.w	r3, [sp, #7]
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    fb1a:	2203      	movs	r2, #3
    fb1c:	462b      	mov	r3, r5
    fb1e:	a90e      	add	r1, sp, #56	; 0x38
    fb20:	a80a      	add	r0, sp, #40	; 0x28
    fb22:	f016 faac 	bl	2607e <bt_mesh_aes_cmac>
	if (err) {
    fb26:	4604      	mov	r4, r0
    fb28:	bb30      	cbnz	r0, fb78 <bt_mesh_k2+0xa0>
		return err;
	}

	net_id[0] = out[15] & 0x7f;
    fb2a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27

	sg[0].data = out;
    fb2e:	950e      	str	r5, [sp, #56]	; 0x38
	net_id[0] = out[15] & 0x7f;
    fb30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    fb34:	7033      	strb	r3, [r6, #0]
	sg[0].len  = sizeof(out);
	pad = 0x02;
    fb36:	2302      	movs	r3, #2
    fb38:	f88d 3007 	strb.w	r3, [sp, #7]
	sg[0].len  = sizeof(out);
    fb3c:	2610      	movs	r6, #16

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    fb3e:	462b      	mov	r3, r5
    fb40:	2203      	movs	r2, #3
    fb42:	a90e      	add	r1, sp, #56	; 0x38
    fb44:	a80a      	add	r0, sp, #40	; 0x28
	sg[0].len  = sizeof(out);
    fb46:	960f      	str	r6, [sp, #60]	; 0x3c
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    fb48:	f016 fa99 	bl	2607e <bt_mesh_aes_cmac>
	if (err) {
    fb4c:	4604      	mov	r4, r0
    fb4e:	b998      	cbnz	r0, fb78 <bt_mesh_k2+0xa0>
		return err;
	}

	memcpy(enc_key, out, 16);
    fb50:	4632      	mov	r2, r6
    fb52:	4629      	mov	r1, r5
    fb54:	981a      	ldr	r0, [sp, #104]	; 0x68
    fb56:	f014 f927 	bl	23da8 <memcpy>

	pad = 0x03;
    fb5a:	2203      	movs	r2, #3

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    fb5c:	462b      	mov	r3, r5
    fb5e:	a90e      	add	r1, sp, #56	; 0x38
    fb60:	a80a      	add	r0, sp, #40	; 0x28
	pad = 0x03;
    fb62:	f88d 2007 	strb.w	r2, [sp, #7]
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    fb66:	f016 fa8a 	bl	2607e <bt_mesh_aes_cmac>
	if (err) {
    fb6a:	4604      	mov	r4, r0
    fb6c:	b920      	cbnz	r0, fb78 <bt_mesh_k2+0xa0>
		return err;
	}

	memcpy(priv_key, out, 16);
    fb6e:	981b      	ldr	r0, [sp, #108]	; 0x6c
    fb70:	4632      	mov	r2, r6
    fb72:	4629      	mov	r1, r5
    fb74:	f014 f918 	bl	23da8 <memcpy>

	BT_DBG("NID 0x%02x enc_key %s", net_id[0], bt_hex(enc_key, 16));
	BT_DBG("priv_key %s", bt_hex(priv_key, 16));

	return 0;
}
    fb78:	4620      	mov	r0, r4
    fb7a:	b015      	add	sp, #84	; 0x54
    fb7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return err;
    fb7e:	2401      	movs	r4, #1
    fb80:	e7fa      	b.n	fb78 <bt_mesh_k2+0xa0>
    fb82:	bf00      	nop
    fb84:	0002d5b1 	.word	0x0002d5b1

0000fb88 <bt_mesh_k3>:

int bt_mesh_k3(const uint8_t n[16], uint8_t out[8])
{
    fb88:	b530      	push	{r4, r5, lr}
	uint8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
    fb8a:	4b14      	ldr	r3, [pc, #80]	; (fbdc <bt_mesh_k3+0x54>)
{
    fb8c:	b08b      	sub	sp, #44	; 0x2c
    fb8e:	4604      	mov	r4, r0
	uint8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
    fb90:	6818      	ldr	r0, [r3, #0]
    fb92:	9000      	str	r0, [sp, #0]
    fb94:	791b      	ldrb	r3, [r3, #4]
	uint8_t tmp[16];
	uint8_t t[16];
	int err;

	err = bt_mesh_s1("smk3", tmp);
    fb96:	4812      	ldr	r0, [pc, #72]	; (fbe0 <bt_mesh_k3+0x58>)
	uint8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
    fb98:	f88d 3004 	strb.w	r3, [sp, #4]
{
    fb9c:	460d      	mov	r5, r1
	err = bt_mesh_s1("smk3", tmp);
    fb9e:	a902      	add	r1, sp, #8
    fba0:	f016 fa99 	bl	260d6 <bt_mesh_s1>
	if (err) {
    fba4:	b9b8      	cbnz	r0, fbd6 <bt_mesh_k3+0x4e>
		return err;
	}

	err = bt_mesh_aes_cmac_one(tmp, n, 16, t);
    fba6:	4621      	mov	r1, r4
    fba8:	ab06      	add	r3, sp, #24
    fbaa:	2210      	movs	r2, #16
    fbac:	a802      	add	r0, sp, #8
    fbae:	f016 fa88 	bl	260c2 <bt_mesh_aes_cmac_one>
	if (err) {
    fbb2:	4604      	mov	r4, r0
    fbb4:	b960      	cbnz	r0, fbd0 <bt_mesh_k3+0x48>
		return err;
	}

	err = bt_mesh_aes_cmac_one(t, id64, sizeof(id64), tmp);
    fbb6:	ab02      	add	r3, sp, #8
    fbb8:	2205      	movs	r2, #5
    fbba:	4669      	mov	r1, sp
    fbbc:	a806      	add	r0, sp, #24
    fbbe:	f016 fa80 	bl	260c2 <bt_mesh_aes_cmac_one>
	if (err) {
    fbc2:	4604      	mov	r4, r0
    fbc4:	b920      	cbnz	r0, fbd0 <bt_mesh_k3+0x48>
		return err;
	}

	memcpy(out, tmp + 8, 8);
    fbc6:	2208      	movs	r2, #8
    fbc8:	a904      	add	r1, sp, #16
    fbca:	4628      	mov	r0, r5
    fbcc:	f014 f8ec 	bl	23da8 <memcpy>

	return 0;
}
    fbd0:	4620      	mov	r0, r4
    fbd2:	b00b      	add	sp, #44	; 0x2c
    fbd4:	bd30      	pop	{r4, r5, pc}
		return err;
    fbd6:	2401      	movs	r4, #1
    fbd8:	e7fa      	b.n	fbd0 <bt_mesh_k3+0x48>
    fbda:	bf00      	nop
    fbdc:	0002d5bb 	.word	0x0002d5bb
    fbe0:	0002d5b6 	.word	0x0002d5b6

0000fbe4 <bt_mesh_k4>:

int bt_mesh_k4(const uint8_t n[16], uint8_t out[1])
{
    fbe4:	b530      	push	{r4, r5, lr}
    fbe6:	b08b      	sub	sp, #44	; 0x2c
	uint8_t id6[] = { 'i', 'd', '6', 0x01 };
    fbe8:	4b10      	ldr	r3, [pc, #64]	; (fc2c <bt_mesh_k4+0x48>)
    fbea:	9301      	str	r3, [sp, #4]
{
    fbec:	4605      	mov	r5, r0
    fbee:	460c      	mov	r4, r1
	uint8_t tmp[16];
	uint8_t t[16];
	int err;

	err = bt_mesh_s1("smk4", tmp);
    fbf0:	480f      	ldr	r0, [pc, #60]	; (fc30 <bt_mesh_k4+0x4c>)
    fbf2:	a902      	add	r1, sp, #8
    fbf4:	f016 fa6f 	bl	260d6 <bt_mesh_s1>
	if (err) {
    fbf8:	b9a8      	cbnz	r0, fc26 <bt_mesh_k4+0x42>
		return err;
	}

	err = bt_mesh_aes_cmac_one(tmp, n, 16, t);
    fbfa:	ab06      	add	r3, sp, #24
    fbfc:	2210      	movs	r2, #16
    fbfe:	4629      	mov	r1, r5
    fc00:	a802      	add	r0, sp, #8
    fc02:	f016 fa5e 	bl	260c2 <bt_mesh_aes_cmac_one>
	if (err) {
    fc06:	b960      	cbnz	r0, fc22 <bt_mesh_k4+0x3e>
		return err;
	}

	err = bt_mesh_aes_cmac_one(t, id6, sizeof(id6), tmp);
    fc08:	2204      	movs	r2, #4
    fc0a:	ab02      	add	r3, sp, #8
    fc0c:	eb0d 0102 	add.w	r1, sp, r2
    fc10:	a806      	add	r0, sp, #24
    fc12:	f016 fa56 	bl	260c2 <bt_mesh_aes_cmac_one>
	if (err) {
    fc16:	b920      	cbnz	r0, fc22 <bt_mesh_k4+0x3e>
		return err;
	}

	out[0] = tmp[15] & BIT_MASK(6);
    fc18:	f89d 3017 	ldrb.w	r3, [sp, #23]
    fc1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    fc20:	7023      	strb	r3, [r4, #0]

	return 0;
}
    fc22:	b00b      	add	sp, #44	; 0x2c
    fc24:	bd30      	pop	{r4, r5, pc}
		return err;
    fc26:	2001      	movs	r0, #1
    fc28:	e7fb      	b.n	fc22 <bt_mesh_k4+0x3e>
    fc2a:	bf00      	nop
    fc2c:	01366469 	.word	0x01366469
    fc30:	0002d5c1 	.word	0x0002d5c1

0000fc34 <bt_mesh_id128>:

int bt_mesh_id128(const uint8_t n[16], const char *s, uint8_t out[16])
{
    fc34:	b530      	push	{r4, r5, lr}
    fc36:	b087      	sub	sp, #28
    fc38:	4604      	mov	r4, r0
    fc3a:	4608      	mov	r0, r1
	const char *id128 = "id128\x01";
	uint8_t salt[16];
	int err;

	err = bt_mesh_s1(s, salt);
    fc3c:	a902      	add	r1, sp, #8
{
    fc3e:	4615      	mov	r5, r2
	err = bt_mesh_s1(s, salt);
    fc40:	f016 fa49 	bl	260d6 <bt_mesh_s1>
	if (err) {
    fc44:	b940      	cbnz	r0, fc58 <bt_mesh_id128+0x24>
		return err;
	}

	return bt_mesh_k1(n, 16, salt, id128, out);
    fc46:	4b05      	ldr	r3, [pc, #20]	; (fc5c <bt_mesh_id128+0x28>)
    fc48:	9500      	str	r5, [sp, #0]
    fc4a:	aa02      	add	r2, sp, #8
    fc4c:	2110      	movs	r1, #16
    fc4e:	4620      	mov	r0, r4
    fc50:	f016 fa57 	bl	26102 <bt_mesh_k1>
}
    fc54:	b007      	add	sp, #28
    fc56:	bd30      	pop	{r4, r5, pc}
		return err;
    fc58:	2001      	movs	r0, #1
    fc5a:	e7fb      	b.n	fc54 <bt_mesh_id128+0x20>
    fc5c:	0002d5c6 	.word	0x0002d5c6

0000fc60 <bt_mesh_net_obfuscate>:
	sys_put_be32(iv_index, &nonce[9]);
}

int bt_mesh_net_obfuscate(uint8_t *pdu, uint32_t iv_index,
			  const uint8_t privacy_key[16])
{
    fc60:	b570      	push	{r4, r5, r6, lr}
	uint8_t priv_rand[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, };
    fc62:	4b18      	ldr	r3, [pc, #96]	; (fcc4 <bt_mesh_net_obfuscate+0x64>)
{
    fc64:	b088      	sub	sp, #32
    fc66:	4604      	mov	r4, r0
    fc68:	460e      	mov	r6, r1
	uint8_t priv_rand[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, };
    fc6a:	6818      	ldr	r0, [r3, #0]
    fc6c:	889b      	ldrh	r3, [r3, #4]
    fc6e:	9000      	str	r0, [sp, #0]
    fc70:	f8ad 3004 	strh.w	r3, [sp, #4]
	uint8_t tmp[16];
	int err, i;

	BT_DBG("IVIndex %u, PrivacyKey %s", iv_index, bt_hex(privacy_key, 16));

	sys_put_be32(iv_index, &priv_rand[5]);
    fc74:	f10d 0105 	add.w	r1, sp, #5
	uint8_t priv_rand[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, };
    fc78:	2300      	movs	r3, #0
	sys_put_be32(iv_index, &priv_rand[5]);
    fc7a:	4630      	mov	r0, r6
{
    fc7c:	4615      	mov	r5, r2
	uint8_t priv_rand[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, };
    fc7e:	f8cd 3006 	str.w	r3, [sp, #6]
    fc82:	f8cd 300a 	str.w	r3, [sp, #10]
    fc86:	f8ad 300e 	strh.w	r3, [sp, #14]
	sys_put_be32(iv_index, &priv_rand[5]);
    fc8a:	f016 f9cf 	bl	2602c <sys_put_be32>
	memcpy(&priv_rand[9], &pdu[7], 7);
    fc8e:	2207      	movs	r2, #7
    fc90:	18a1      	adds	r1, r4, r2
    fc92:	f10d 0009 	add.w	r0, sp, #9
    fc96:	f014 f887 	bl	23da8 <memcpy>

	BT_DBG("PrivacyRandom %s", bt_hex(priv_rand, 16));

	err = bt_encrypt_be(privacy_key, priv_rand, tmp);
    fc9a:	aa04      	add	r2, sp, #16
    fc9c:	4669      	mov	r1, sp
    fc9e:	4628      	mov	r0, r5
    fca0:	f017 fbc5 	bl	2742e <bt_encrypt_be>
	if (err) {
    fca4:	b958      	cbnz	r0, fcbe <bt_mesh_net_obfuscate+0x5e>
    fca6:	4623      	mov	r3, r4
    fca8:	aa04      	add	r2, sp, #16
    fcaa:	3406      	adds	r4, #6
		return err;
	}

	for (i = 0; i < 6; i++) {
		pdu[1 + i] ^= tmp[i];
    fcac:	f813 5f01 	ldrb.w	r5, [r3, #1]!
    fcb0:	f812 1b01 	ldrb.w	r1, [r2], #1
	for (i = 0; i < 6; i++) {
    fcb4:	42a3      	cmp	r3, r4
		pdu[1 + i] ^= tmp[i];
    fcb6:	ea81 0105 	eor.w	r1, r1, r5
    fcba:	7019      	strb	r1, [r3, #0]
	for (i = 0; i < 6; i++) {
    fcbc:	d1f6      	bne.n	fcac <bt_mesh_net_obfuscate+0x4c>
	}

	return 0;
}
    fcbe:	b008      	add	sp, #32
    fcc0:	bd70      	pop	{r4, r5, r6, pc}
    fcc2:	bf00      	nop
    fcc4:	00029b87 	.word	0x00029b87

0000fcc8 <bt_mesh_fcs_calc>:
	0xb4, 0x25, 0x57, 0xc6, 0xb3, 0x22, 0x50, 0xc1,
	0xba, 0x2b, 0x59, 0xc8, 0xbd, 0x2c, 0x5e, 0xcf
};

uint8_t bt_mesh_fcs_calc(const uint8_t *data, uint8_t data_len)
{
    fcc8:	b510      	push	{r4, lr}
	uint8_t fcs = 0xff;

	while (data_len--) {
		fcs = crc_table[fcs ^ *data++];
    fcca:	4a06      	ldr	r2, [pc, #24]	; (fce4 <bt_mesh_fcs_calc+0x1c>)
    fccc:	4401      	add	r1, r0
	uint8_t fcs = 0xff;
    fcce:	23ff      	movs	r3, #255	; 0xff
	while (data_len--) {
    fcd0:	4288      	cmp	r0, r1
    fcd2:	d102      	bne.n	fcda <bt_mesh_fcs_calc+0x12>
	}

	BT_DBG("fcs 0x%02x", 0xff - fcs);

	return 0xff - fcs;
    fcd4:	43d8      	mvns	r0, r3
}
    fcd6:	b2c0      	uxtb	r0, r0
    fcd8:	bd10      	pop	{r4, pc}
		fcs = crc_table[fcs ^ *data++];
    fcda:	f810 4b01 	ldrb.w	r4, [r0], #1
    fcde:	4063      	eors	r3, r4
    fce0:	5cd3      	ldrb	r3, [r2, r3]
    fce2:	e7f5      	b.n	fcd0 <bt_mesh_fcs_calc+0x8>
    fce4:	0002d5e6 	.word	0x0002d5e6

0000fce8 <bt_mesh_fcs_check>:

bool bt_mesh_fcs_check(struct net_buf_simple *buf, uint8_t received_fcs)
{
    fce8:	b530      	push	{r4, r5, lr}
	const uint8_t *data = buf->data;
    fcea:	6804      	ldr	r4, [r0, #0]
	uint16_t data_len = buf->len;
	uint8_t fcs = 0xff;

	while (data_len--) {
    fcec:	8880      	ldrh	r0, [r0, #4]
    fcee:	4d08      	ldr	r5, [pc, #32]	; (fd10 <bt_mesh_fcs_check+0x28>)
    fcf0:	4420      	add	r0, r4
	uint8_t fcs = 0xff;
    fcf2:	23ff      	movs	r3, #255	; 0xff
	while (data_len--) {
    fcf4:	4284      	cmp	r4, r0
    fcf6:	d106      	bne.n	fd06 <bt_mesh_fcs_check+0x1e>
		fcs = crc_table[fcs ^ *data++];
	}

	return crc_table[fcs ^ received_fcs] == 0xcf;
    fcf8:	404b      	eors	r3, r1
    fcfa:	5ce8      	ldrb	r0, [r5, r3]
}
    fcfc:	f1a0 03cf 	sub.w	r3, r0, #207	; 0xcf
    fd00:	4258      	negs	r0, r3
    fd02:	4158      	adcs	r0, r3
    fd04:	bd30      	pop	{r4, r5, pc}
		fcs = crc_table[fcs ^ *data++];
    fd06:	f814 2b01 	ldrb.w	r2, [r4], #1
    fd0a:	405a      	eors	r2, r3
    fd0c:	5cab      	ldrb	r3, [r5, r2]
    fd0e:	e7f1      	b.n	fcf4 <bt_mesh_fcs_check+0xc>
    fd10:	0002d5e6 	.word	0x0002d5e6

0000fd14 <bt_mesh_virtual_addr>:

int bt_mesh_virtual_addr(const uint8_t virtual_label[16], uint16_t *addr)
{
    fd14:	b530      	push	{r4, r5, lr}
    fd16:	b089      	sub	sp, #36	; 0x24
    fd18:	4605      	mov	r5, r0
    fd1a:	460c      	mov	r4, r1
	uint8_t salt[16];
	uint8_t tmp[16];
	int err;

	err = bt_mesh_s1("vtad", salt);
    fd1c:	480c      	ldr	r0, [pc, #48]	; (fd50 <bt_mesh_virtual_addr+0x3c>)
    fd1e:	4669      	mov	r1, sp
    fd20:	f016 f9d9 	bl	260d6 <bt_mesh_s1>
	if (err) {
    fd24:	b990      	cbnz	r0, fd4c <bt_mesh_virtual_addr+0x38>
		return err;
	}

	err = bt_mesh_aes_cmac_one(salt, virtual_label, 16, tmp);
    fd26:	ab04      	add	r3, sp, #16
    fd28:	2210      	movs	r2, #16
    fd2a:	4629      	mov	r1, r5
    fd2c:	4668      	mov	r0, sp
    fd2e:	f016 f9c8 	bl	260c2 <bt_mesh_aes_cmac_one>
	if (err) {
    fd32:	b948      	cbnz	r0, fd48 <bt_mesh_virtual_addr+0x34>
		return err;
	}

	*addr = (sys_get_be16(&tmp[14]) & 0x3fff) | 0x8000;
    fd34:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    fd38:	ba5b      	rev16	r3, r3
    fd3a:	f3c3 030d 	ubfx	r3, r3, #0, #14
    fd3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    fd42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    fd46:	8023      	strh	r3, [r4, #0]

	return 0;
}
    fd48:	b009      	add	sp, #36	; 0x24
    fd4a:	bd30      	pop	{r4, r5, pc}
		return err;
    fd4c:	2001      	movs	r0, #1
    fd4e:	e7fb      	b.n	fd48 <bt_mesh_virtual_addr+0x34>
    fd50:	0002d5cd 	.word	0x0002d5cd

0000fd54 <bt_mesh_prov_conf_key>:
	return bt_mesh_aes_cmac_one(conf_salt_key, conf_inputs, 145, salt);
}

int bt_mesh_prov_conf_key(const uint8_t dhkey[32], const uint8_t conf_salt[16],
			  uint8_t conf_key[16])
{
    fd54:	b507      	push	{r0, r1, r2, lr}
	return bt_mesh_k1(dhkey, 32, conf_salt, "prck", conf_key);
    fd56:	4b04      	ldr	r3, [pc, #16]	; (fd68 <bt_mesh_prov_conf_key+0x14>)
    fd58:	9200      	str	r2, [sp, #0]
    fd5a:	460a      	mov	r2, r1
    fd5c:	2120      	movs	r1, #32
    fd5e:	f016 f9d0 	bl	26102 <bt_mesh_k1>
}
    fd62:	b003      	add	sp, #12
    fd64:	f85d fb04 	ldr.w	pc, [sp], #4
    fd68:	0002d5d2 	.word	0x0002d5d2

0000fd6c <mod_init>:
}
#endif

static void mod_init(struct bt_mesh_model *mod, struct bt_mesh_elem *elem,
		     bool vnd, bool primary, void *user_data)
{
    fd6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    fd6e:	9d08      	ldr	r5, [sp, #32]
	int i;
	int *err = user_data;

	if (*err) {
    fd70:	682b      	ldr	r3, [r5, #0]
{
    fd72:	4604      	mov	r4, r0
    fd74:	460e      	mov	r6, r1
    fd76:	4617      	mov	r7, r2
	if (*err) {
    fd78:	2b00      	cmp	r3, #0
    fd7a:	d13a      	bne.n	fdf2 <mod_init+0x86>
		return;
	}

	if (mod->pub) {
    fd7c:	6880      	ldr	r0, [r0, #8]
    fd7e:	b120      	cbz	r0, fd8a <mod_init+0x1e>
		mod->pub->mod = mod;
    fd80:	f840 4b18 	str.w	r4, [r0], #24
		k_work_init_delayable(&mod->pub->timer, mod_publish);
    fd84:	491e      	ldr	r1, [pc, #120]	; (fe00 <mod_init+0x94>)
    fd86:	f019 f80c 	bl	28da2 <k_work_init_delayable>
	}

	for (i = 0; i < ARRAY_SIZE(mod->keys); i++) {
		mod->keys[i] = BT_MESH_KEY_UNUSED;
    fd8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fd8e:	60e3      	str	r3, [r4, #12]
	}

	mod->elem_idx = elem - dev_comp->elem;
    fd90:	4b1c      	ldr	r3, [pc, #112]	; (fe04 <mod_init+0x98>)
    fd92:	681b      	ldr	r3, [r3, #0]
    fd94:	68db      	ldr	r3, [r3, #12]
    fd96:	1af3      	subs	r3, r6, r3
    fd98:	111b      	asrs	r3, r3, #4
    fd9a:	7123      	strb	r3, [r4, #4]
	if (vnd) {
    fd9c:	b35f      	cbz	r7, fdf6 <mod_init+0x8a>
		mod->mod_idx = mod - elem->vnd_models;
    fd9e:	68f3      	ldr	r3, [r6, #12]
    fda0:	6962      	ldr	r2, [r4, #20]
    fda2:	1ae3      	subs	r3, r4, r3
    fda4:	115b      	asrs	r3, r3, #5
    fda6:	7163      	strb	r3, [r4, #5]
	for (op = mod->op; op->func; op++) {
    fda8:	320c      	adds	r2, #12
    fdaa:	f852 3c04 	ldr.w	r3, [r2, #-4]
    fdae:	b943      	cbnz	r3, fdc2 <mod_init+0x56>

		if (IS_ENABLED(CONFIG_BT_MESH_MODEL_VND_MSG_CID_FORCE)) {
			*err = bt_mesh_vnd_mod_msg_cid_check(mod);
    fdb0:	602b      	str	r3, [r5, #0]

	} else {
		mod->mod_idx = mod - elem->models;
	}

	if (mod->cb && mod->cb->init) {
    fdb2:	69a3      	ldr	r3, [r4, #24]
    fdb4:	b1eb      	cbz	r3, fdf2 <mod_init+0x86>
    fdb6:	689b      	ldr	r3, [r3, #8]
    fdb8:	b1db      	cbz	r3, fdf2 <mod_init+0x86>
		*err = mod->cb->init(mod);
    fdba:	4620      	mov	r0, r4
    fdbc:	4798      	blx	r3
    fdbe:	6028      	str	r0, [r5, #0]
    fdc0:	e017      	b.n	fdf2 <mod_init+0x86>
		cid = (uint16_t)(op->opcode & 0xffff);
    fdc2:	f852 3c0c 	ldr.w	r3, [r2, #-12]
		if (cid == mod->vnd.company) {
    fdc6:	8821      	ldrh	r1, [r4, #0]
    fdc8:	b298      	uxth	r0, r3
    fdca:	4288      	cmp	r0, r1
    fdcc:	f102 020c 	add.w	r2, r2, #12
    fdd0:	d0eb      	beq.n	fdaa <mod_init+0x3e>
    fdd2:	480d      	ldr	r0, [pc, #52]	; (fe08 <mod_init+0x9c>)
    fdd4:	4a0d      	ldr	r2, [pc, #52]	; (fe0c <mod_init+0xa0>)
    fdd6:	1a12      	subs	r2, r2, r0
    fdd8:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Invalid vendor model(company:0x%04x"
    fdda:	0192      	lsls	r2, r2, #6
    fddc:	f042 0201 	orr.w	r2, r2, #1
    fde0:	f8ad 2000 	strh.w	r2, [sp]
    fde4:	480a      	ldr	r0, [pc, #40]	; (fe10 <mod_init+0xa4>)
    fde6:	8862      	ldrh	r2, [r4, #2]
    fde8:	f011 feb9 	bl	21b5e <log_3>
			*err = bt_mesh_vnd_mod_msg_cid_check(mod);
    fdec:	f06f 0315 	mvn.w	r3, #21
    fdf0:	602b      	str	r3, [r5, #0]
	}
}
    fdf2:	b003      	add	sp, #12
    fdf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		mod->mod_idx = mod - elem->models;
    fdf6:	68b3      	ldr	r3, [r6, #8]
    fdf8:	1ae3      	subs	r3, r4, r3
    fdfa:	115b      	asrs	r3, r3, #5
    fdfc:	7163      	strb	r3, [r4, #5]
    fdfe:	e7d8      	b.n	fdb2 <mod_init+0x46>
    fe00:	00010195 	.word	0x00010195
    fe04:	20002354 	.word	0x20002354
    fe08:	00029870 	.word	0x00029870
    fe0c:	00029980 	.word	0x00029980
    fe10:	0002d6e6 	.word	0x0002d6e6

0000fe14 <encode_mod_path.isra.0>:
	return mod_set(true, name, len_rd, read_cb, cb_arg);
}

BT_MESH_SETTINGS_DEFINE(vnd_mod, "v", vnd_mod_set);

static void encode_mod_path(struct bt_mesh_model *mod, bool vnd,
    fe14:	b470      	push	{r4, r5, r6}
    fe16:	4606      	mov	r6, r0
    fe18:	460c      	mov	r4, r1
    fe1a:	461d      	mov	r5, r3
    fe1c:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
			    const char *key, char *path, size_t path_len)
{
	uint16_t mod_key = (((uint16_t)mod->elem_idx << 8) | mod->mod_idx);

	if (vnd) {
		snprintk(path, path_len, "bt/mesh/v/%x/%s", mod_key, key);
    fe20:	ea44 2306 	orr.w	r3, r4, r6, lsl #8
    fe24:	9503      	str	r5, [sp, #12]
	if (vnd) {
    fe26:	b11a      	cbz	r2, fe30 <encode_mod_path.isra.0+0x1c>
		snprintk(path, path_len, "bt/mesh/v/%x/%s", mod_key, key);
    fe28:	4a02      	ldr	r2, [pc, #8]	; (fe34 <encode_mod_path.isra.0+0x20>)
	} else {
		snprintk(path, path_len, "bt/mesh/s/%x/%s", mod_key, key);
	}
}
    fe2a:	bc70      	pop	{r4, r5, r6}
		snprintk(path, path_len, "bt/mesh/s/%x/%s", mod_key, key);
    fe2c:	f011 ba2b 	b.w	21286 <snprintk>
    fe30:	4a01      	ldr	r2, [pc, #4]	; (fe38 <encode_mod_path.isra.0+0x24>)
    fe32:	e7fa      	b.n	fe2a <encode_mod_path.isra.0+0x16>
    fe34:	0002d72b 	.word	0x0002d72b
    fe38:	0002d73b 	.word	0x0002d73b

0000fe3c <store_pending_mod>:
}

static void store_pending_mod(struct bt_mesh_model *mod,
			      struct bt_mesh_elem *elem, bool vnd,
			      bool primary, void *user_data)
{
    fe3c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!mod->flags) {
    fe3e:	88c3      	ldrh	r3, [r0, #6]
{
    fe40:	b08b      	sub	sp, #44	; 0x2c
    fe42:	4604      	mov	r4, r0
    fe44:	4616      	mov	r6, r2
	if (!mod->flags) {
    fe46:	2b00      	cmp	r3, #0
    fe48:	f000 8097 	beq.w	ff7a <store_pending_mod+0x13e>
		return;
	}

	if (mod->flags & BT_MESH_MOD_BIND_PENDING) {
    fe4c:	07d8      	lsls	r0, r3, #31
    fe4e:	d537      	bpl.n	fec0 <store_pending_mod+0x84>
		mod->flags &= ~BT_MESH_MOD_BIND_PENDING;
    fe50:	f023 0301 	bic.w	r3, r3, #1
    fe54:	80e3      	strh	r3, [r4, #6]
		if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
    fe56:	89a3      	ldrh	r3, [r4, #12]
    fe58:	f64f 72ff 	movw	r2, #65535	; 0xffff
    fe5c:	4293      	cmp	r3, r2
			keys[count++] = mod->keys[i];
    fe5e:	bf18      	it	ne
    fe60:	f8ad 300c 	strhne.w	r3, [sp, #12]
		if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
    fe64:	89e3      	ldrh	r3, [r4, #14]
			keys[count++] = mod->keys[i];
    fe66:	bf14      	ite	ne
    fe68:	2501      	movne	r5, #1
	for (i = 0, count = 0; i < ARRAY_SIZE(mod->keys); i++) {
    fe6a:	2500      	moveq	r5, #0
		if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
    fe6c:	4293      	cmp	r3, r2
			keys[count++] = mod->keys[i];
    fe6e:	bf1f      	itttt	ne
    fe70:	aa0a      	addne	r2, sp, #40	; 0x28
    fe72:	eb02 0245 	addne.w	r2, r2, r5, lsl #1
    fe76:	3501      	addne	r5, #1
    fe78:	f822 3c1c 	strhne.w	r3, [r2, #-28]
	encode_mod_path(mod, vnd, "bind", path, sizeof(path));
    fe7c:	2314      	movs	r3, #20
    fe7e:	eb0d 0703 	add.w	r7, sp, r3
    fe82:	9301      	str	r3, [sp, #4]
    fe84:	9700      	str	r7, [sp, #0]
    fe86:	4b54      	ldr	r3, [pc, #336]	; (ffd8 <store_pending_mod+0x19c>)
    fe88:	7961      	ldrb	r1, [r4, #5]
    fe8a:	7920      	ldrb	r0, [r4, #4]
    fe8c:	4632      	mov	r2, r6
    fe8e:	f7ff ffc1 	bl	fe14 <encode_mod_path.isra.0>
	if (count) {
    fe92:	2d00      	cmp	r5, #0
    fe94:	d073      	beq.n	ff7e <store_pending_mod+0x142>
		err = settings_save_one(path, keys, count * sizeof(keys[0]));
    fe96:	006a      	lsls	r2, r5, #1
    fe98:	a903      	add	r1, sp, #12
    fe9a:	4638      	mov	r0, r7
    fe9c:	f7f3 fe6e 	bl	3b7c <settings_save_one>
	if (err) {
    fea0:	b170      	cbz	r0, fec0 <store_pending_mod+0x84>
    fea2:	4a4e      	ldr	r2, [pc, #312]	; (ffdc <store_pending_mod+0x1a0>)
    fea4:	4d4e      	ldr	r5, [pc, #312]	; (ffe0 <store_pending_mod+0x1a4>)
    fea6:	4638      	mov	r0, r7
    fea8:	1aad      	subs	r5, r5, r2
    feaa:	08ed      	lsrs	r5, r5, #3
    feac:	f7f2 fe14 	bl	2ad8 <z_log_strdup>
		BT_ERR("Failed to store %s value", log_strdup(path));
    feb0:	01ad      	lsls	r5, r5, #6
    feb2:	f045 0501 	orr.w	r5, r5, #1
    feb6:	4601      	mov	r1, r0
    feb8:	462a      	mov	r2, r5
    feba:	484a      	ldr	r0, [pc, #296]	; (ffe4 <store_pending_mod+0x1a8>)
    febc:	f011 fe22 	bl	21b04 <log_1>
		store_pending_mod_bind(mod, vnd);
	}

	if (mod->flags & BT_MESH_MOD_SUB_PENDING) {
    fec0:	88e3      	ldrh	r3, [r4, #6]
    fec2:	0799      	lsls	r1, r3, #30
    fec4:	d531      	bpl.n	ff2a <store_pending_mod+0xee>
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
    fec6:	8a25      	ldrh	r5, [r4, #16]
		mod->flags &= ~BT_MESH_MOD_SUB_PENDING;
    fec8:	f023 0302 	bic.w	r3, r3, #2
    fecc:	80e3      	strh	r3, [r4, #6]
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
    fece:	b115      	cbz	r5, fed6 <store_pending_mod+0x9a>
			groups[count++] = mod->groups[i];
    fed0:	f8ad 500c 	strh.w	r5, [sp, #12]
    fed4:	2501      	movs	r5, #1
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
    fed6:	8a63      	ldrh	r3, [r4, #18]
    fed8:	b12b      	cbz	r3, fee6 <store_pending_mod+0xaa>
			groups[count++] = mod->groups[i];
    feda:	aa0a      	add	r2, sp, #40	; 0x28
    fedc:	eb02 0245 	add.w	r2, r2, r5, lsl #1
    fee0:	3501      	adds	r5, #1
    fee2:	f822 3c1c 	strh.w	r3, [r2, #-28]
	encode_mod_path(mod, vnd, "sub", path, sizeof(path));
    fee6:	2314      	movs	r3, #20
    fee8:	eb0d 0703 	add.w	r7, sp, r3
    feec:	9301      	str	r3, [sp, #4]
    feee:	9700      	str	r7, [sp, #0]
    fef0:	4b3d      	ldr	r3, [pc, #244]	; (ffe8 <store_pending_mod+0x1ac>)
    fef2:	7961      	ldrb	r1, [r4, #5]
    fef4:	7920      	ldrb	r0, [r4, #4]
    fef6:	4632      	mov	r2, r6
    fef8:	f7ff ff8c 	bl	fe14 <encode_mod_path.isra.0>
	if (count) {
    fefc:	2d00      	cmp	r5, #0
    fefe:	d042      	beq.n	ff86 <store_pending_mod+0x14a>
		err = settings_save_one(path, groups,
    ff00:	006a      	lsls	r2, r5, #1
    ff02:	a903      	add	r1, sp, #12
    ff04:	4638      	mov	r0, r7
    ff06:	f7f3 fe39 	bl	3b7c <settings_save_one>
	if (err) {
    ff0a:	b170      	cbz	r0, ff2a <store_pending_mod+0xee>
    ff0c:	4a33      	ldr	r2, [pc, #204]	; (ffdc <store_pending_mod+0x1a0>)
    ff0e:	4d34      	ldr	r5, [pc, #208]	; (ffe0 <store_pending_mod+0x1a4>)
    ff10:	4638      	mov	r0, r7
    ff12:	1aad      	subs	r5, r5, r2
    ff14:	08ed      	lsrs	r5, r5, #3
    ff16:	f7f2 fddf 	bl	2ad8 <z_log_strdup>
		BT_ERR("Failed to store %s value", log_strdup(path));
    ff1a:	01ad      	lsls	r5, r5, #6
    ff1c:	f045 0501 	orr.w	r5, r5, #1
    ff20:	4601      	mov	r1, r0
    ff22:	462a      	mov	r2, r5
    ff24:	482f      	ldr	r0, [pc, #188]	; (ffe4 <store_pending_mod+0x1a8>)
    ff26:	f011 fded 	bl	21b04 <log_1>
		store_pending_mod_sub(mod, vnd);
	}

	if (mod->flags & BT_MESH_MOD_PUB_PENDING) {
    ff2a:	88e3      	ldrh	r3, [r4, #6]
    ff2c:	075a      	lsls	r2, r3, #29
    ff2e:	d524      	bpl.n	ff7a <store_pending_mod+0x13e>
		mod->flags &= ~BT_MESH_MOD_PUB_PENDING;
    ff30:	f023 0304 	bic.w	r3, r3, #4
    ff34:	80e3      	strh	r3, [r4, #6]
	encode_mod_path(mod, vnd, "pub", path, sizeof(path));
    ff36:	2314      	movs	r3, #20
    ff38:	eb0d 0503 	add.w	r5, sp, r3
    ff3c:	9301      	str	r3, [sp, #4]
    ff3e:	9500      	str	r5, [sp, #0]
    ff40:	4632      	mov	r2, r6
    ff42:	4b2a      	ldr	r3, [pc, #168]	; (ffec <store_pending_mod+0x1b0>)
    ff44:	7961      	ldrb	r1, [r4, #5]
    ff46:	7920      	ldrb	r0, [r4, #4]
    ff48:	f7ff ff64 	bl	fe14 <encode_mod_path.isra.0>
	if (!mod->pub || mod->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
    ff4c:	68a2      	ldr	r2, [r4, #8]
    ff4e:	b10a      	cbz	r2, ff54 <store_pending_mod+0x118>
    ff50:	8893      	ldrh	r3, [r2, #4]
    ff52:	b9e3      	cbnz	r3, ff8e <store_pending_mod+0x152>
		err = settings_delete(path);
    ff54:	4628      	mov	r0, r5
    ff56:	f012 fbc8 	bl	226ea <settings_delete>
	if (err) {
    ff5a:	b170      	cbz	r0, ff7a <store_pending_mod+0x13e>
    ff5c:	4a1f      	ldr	r2, [pc, #124]	; (ffdc <store_pending_mod+0x1a0>)
    ff5e:	4c20      	ldr	r4, [pc, #128]	; (ffe0 <store_pending_mod+0x1a4>)
    ff60:	4628      	mov	r0, r5
    ff62:	1aa4      	subs	r4, r4, r2
    ff64:	08e4      	lsrs	r4, r4, #3
    ff66:	f7f2 fdb7 	bl	2ad8 <z_log_strdup>
		BT_ERR("Failed to store %s value", log_strdup(path));
    ff6a:	01a4      	lsls	r4, r4, #6
    ff6c:	f044 0401 	orr.w	r4, r4, #1
    ff70:	4601      	mov	r1, r0
    ff72:	4622      	mov	r2, r4
    ff74:	481b      	ldr	r0, [pc, #108]	; (ffe4 <store_pending_mod+0x1a8>)
    ff76:	f011 fdc5 	bl	21b04 <log_1>
		store_pending_mod_pub(mod, vnd);
	}
}
    ff7a:	b00b      	add	sp, #44	; 0x2c
    ff7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = settings_delete(path);
    ff7e:	4638      	mov	r0, r7
    ff80:	f012 fbb3 	bl	226ea <settings_delete>
    ff84:	e78c      	b.n	fea0 <store_pending_mod+0x64>
		err = settings_delete(path);
    ff86:	4638      	mov	r0, r7
    ff88:	f012 fbaf 	bl	226ea <settings_delete>
    ff8c:	e7bd      	b.n	ff0a <store_pending_mod+0xce>
		pub.addr = mod->pub->addr;
    ff8e:	f8ad 300c 	strh.w	r3, [sp, #12]
		pub.key = mod->pub->key;
    ff92:	88d3      	ldrh	r3, [r2, #6]
    ff94:	f3c3 030b 	ubfx	r3, r3, #0, #12
    ff98:	f8ad 300e 	strh.w	r3, [sp, #14]
		pub.ttl = mod->pub->ttl;
    ff9c:	8913      	ldrh	r3, [r2, #8]
    ff9e:	f8ad 3010 	strh.w	r3, [sp, #16]
		pub.period = mod->pub->period;
    ffa2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    ffa6:	8951      	ldrh	r1, [r2, #10]
    ffa8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    ffac:	f3c1 010b 	ubfx	r1, r1, #0, #12
    ffb0:	f023 030f 	bic.w	r3, r3, #15
    ffb4:	430b      	orrs	r3, r1
    ffb6:	f8ad 3012 	strh.w	r3, [sp, #18]
		pub.cred = mod->pub->cred;
    ffba:	79d3      	ldrb	r3, [r2, #7]
    ffbc:	f89d 2013 	ldrb.w	r2, [sp, #19]
    ffc0:	f3c3 1300 	ubfx	r3, r3, #4, #1
    ffc4:	f363 1204 	bfi	r2, r3, #4, #1
    ffc8:	f88d 2013 	strb.w	r2, [sp, #19]
		err = settings_save_one(path, &pub, sizeof(pub));
    ffcc:	a903      	add	r1, sp, #12
    ffce:	2208      	movs	r2, #8
    ffd0:	4628      	mov	r0, r5
    ffd2:	f7f3 fdd3 	bl	3b7c <settings_save_one>
    ffd6:	e7c0      	b.n	ff5a <store_pending_mod+0x11e>
    ffd8:	0002d74b 	.word	0x0002d74b
    ffdc:	00029870 	.word	0x00029870
    ffe0:	00029980 	.word	0x00029980
    ffe4:	0002d750 	.word	0x0002d750
    ffe8:	0002d769 	.word	0x0002d769
    ffec:	0002d76d 	.word	0x0002d76d

0000fff0 <bt_mesh_model_foreach>:
{
    fff0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	for (i = 0; i < dev_comp->elem_count; i++) {
    fff4:	f8df 9068 	ldr.w	r9, [pc, #104]	; 10060 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x61>
{
    fff8:	4606      	mov	r6, r0
    fffa:	460f      	mov	r7, r1
	for (i = 0; i < dev_comp->elem_count; i++) {
    fffc:	2500      	movs	r5, #0
    fffe:	f8d9 3000 	ldr.w	r3, [r9]
   10002:	689a      	ldr	r2, [r3, #8]
   10004:	42aa      	cmp	r2, r5
   10006:	d802      	bhi.n	1000e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xf>
}
   10008:	b003      	add	sp, #12
   1000a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
   1000e:	68dc      	ldr	r4, [r3, #12]
		for (j = 0; j < elem->model_count; j++) {
   10010:	f04f 0800 	mov.w	r8, #0
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
   10014:	eb04 1405 	add.w	r4, r4, r5, lsl #4
		for (j = 0; j < elem->model_count; j++) {
   10018:	7923      	ldrb	r3, [r4, #4]
   1001a:	4543      	cmp	r3, r8
   1001c:	dc06      	bgt.n	1002c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2d>
		for (j = 0; j < elem->vnd_model_count; j++) {
   1001e:	f04f 0800 	mov.w	r8, #0
   10022:	7963      	ldrb	r3, [r4, #5]
   10024:	4543      	cmp	r3, r8
   10026:	dc0e      	bgt.n	10046 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x47>
	for (i = 0; i < dev_comp->elem_count; i++) {
   10028:	3501      	adds	r5, #1
   1002a:	e7e8      	b.n	fffe <bt_mesh_model_foreach+0xe>
			struct bt_mesh_model *model = &elem->models[j];
   1002c:	68a0      	ldr	r0, [r4, #8]
			func(model, elem, false, i == 0, user_data);
   1002e:	9700      	str	r7, [sp, #0]
   10030:	fab5 f385 	clz	r3, r5
   10034:	eb00 1048 	add.w	r0, r0, r8, lsl #5
   10038:	095b      	lsrs	r3, r3, #5
   1003a:	2200      	movs	r2, #0
   1003c:	4621      	mov	r1, r4
   1003e:	47b0      	blx	r6
		for (j = 0; j < elem->model_count; j++) {
   10040:	f108 0801 	add.w	r8, r8, #1
   10044:	e7e8      	b.n	10018 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x19>
			struct bt_mesh_model *model = &elem->vnd_models[j];
   10046:	68e0      	ldr	r0, [r4, #12]
			func(model, elem, true, i == 0, user_data);
   10048:	9700      	str	r7, [sp, #0]
   1004a:	fab5 f385 	clz	r3, r5
   1004e:	eb00 1048 	add.w	r0, r0, r8, lsl #5
   10052:	095b      	lsrs	r3, r3, #5
   10054:	2201      	movs	r2, #1
   10056:	4621      	mov	r1, r4
   10058:	47b0      	blx	r6
		for (j = 0; j < elem->vnd_model_count; j++) {
   1005a:	f108 0801 	add.w	r8, r8, #1
   1005e:	e7e0      	b.n	10022 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x23>
   10060:	20002354 	.word	0x20002354

00010064 <bt_mesh_model_pub_period_get>:
	if (!mod->pub) {
   10064:	6883      	ldr	r3, [r0, #8]
   10066:	b1eb      	cbz	r3, 100a4 <bt_mesh_model_pub_period_get+0x40>
	switch (mod->pub->period >> 6) {
   10068:	7a98      	ldrb	r0, [r3, #10]
   1006a:	0982      	lsrs	r2, r0, #6
   1006c:	2a02      	cmp	r2, #2
   1006e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   10072:	d012      	beq.n	1009a <bt_mesh_model_pub_period_get+0x36>
   10074:	2a03      	cmp	r2, #3
   10076:	d013      	beq.n	100a0 <bt_mesh_model_pub_period_get+0x3c>
   10078:	2a01      	cmp	r2, #1
   1007a:	d00a      	beq.n	10092 <bt_mesh_model_pub_period_get+0x2e>
		period = (mod->pub->period & BIT_MASK(6)) * 100U;
   1007c:	2264      	movs	r2, #100	; 0x64
   1007e:	fb10 f002 	smulbb	r0, r0, r2
	if (mod->pub->fast_period) {
   10082:	79da      	ldrb	r2, [r3, #7]
   10084:	0652      	lsls	r2, r2, #25
   10086:	d50e      	bpl.n	100a6 <bt_mesh_model_pub_period_get+0x42>
		return period >> mod->pub->period_div;
   10088:	7adb      	ldrb	r3, [r3, #11]
   1008a:	f003 030f 	and.w	r3, r3, #15
   1008e:	4118      	asrs	r0, r3
   10090:	4770      	bx	lr
		period = (mod->pub->period & BIT_MASK(6)) * MSEC_PER_SEC;
   10092:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		period = (mod->pub->period & BIT_MASK(6)) * 600U * MSEC_PER_SEC;
   10096:	4350      	muls	r0, r2
		break;
   10098:	e7f3      	b.n	10082 <bt_mesh_model_pub_period_get+0x1e>
		period = (mod->pub->period & BIT_MASK(6)) * 10U * MSEC_PER_SEC;
   1009a:	f242 7210 	movw	r2, #10000	; 0x2710
   1009e:	e7fa      	b.n	10096 <bt_mesh_model_pub_period_get+0x32>
		period = (mod->pub->period & BIT_MASK(6)) * 600U * MSEC_PER_SEC;
   100a0:	4a01      	ldr	r2, [pc, #4]	; (100a8 <bt_mesh_model_pub_period_get+0x44>)
   100a2:	e7f8      	b.n	10096 <bt_mesh_model_pub_period_get+0x32>
		return 0;
   100a4:	4618      	mov	r0, r3
}
   100a6:	4770      	bx	lr
   100a8:	000927c0 	.word	0x000927c0

000100ac <publish_sent>:
{
   100ac:	b570      	push	{r4, r5, r6, lr}
	if (mod->pub->count) {
   100ae:	688e      	ldr	r6, [r1, #8]
   100b0:	7af3      	ldrb	r3, [r6, #11]
   100b2:	f013 0ff0 	tst.w	r3, #240	; 0xf0
{
   100b6:	460d      	mov	r5, r1
	if (mod->pub->count) {
   100b8:	d01b      	beq.n	100f2 <publish_sent+0x46>
		delay = BT_MESH_PUB_TRANSMIT_INT(mod->pub->retransmit);
   100ba:	7a74      	ldrb	r4, [r6, #9]
   100bc:	08e0      	lsrs	r0, r4, #3
   100be:	2432      	movs	r4, #50	; 0x32
   100c0:	fb00 4404 	mla	r4, r0, r4, r4
		k_work_schedule(&mod->pub->timer, K_MSEC(delay));
   100c4:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
			return (t * to_hz + off) / from_hz;
   100c8:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   100cc:	f240 30e7 	movw	r0, #999	; 0x3e7
   100d0:	2100      	movs	r1, #0
   100d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   100d6:	2300      	movs	r3, #0
   100d8:	fbc4 0106 	smlal	r0, r1, r4, r6
   100dc:	f7f0 f850 	bl	180 <__aeabi_uldivmod>
   100e0:	68ad      	ldr	r5, [r5, #8]
   100e2:	3518      	adds	r5, #24
   100e4:	4602      	mov	r2, r0
   100e6:	460b      	mov	r3, r1
   100e8:	4628      	mov	r0, r5
}
   100ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_schedule(&mod->pub->timer, K_MSEC(delay));
   100ee:	f010 b965 	b.w	203bc <k_work_schedule>
	period = bt_mesh_model_pub_period_get(mod);
   100f2:	4608      	mov	r0, r1
   100f4:	f7ff ffb6 	bl	10064 <bt_mesh_model_pub_period_get>
	if (!period) {
   100f8:	4604      	mov	r4, r0
   100fa:	b1a0      	cbz	r0, 10126 <publish_sent+0x7a>
	elapsed = k_uptime_get_32() - pub->period_start;
   100fc:	f016 f947 	bl	2638e <k_uptime_get_32>
   10100:	68f3      	ldr	r3, [r6, #12]
   10102:	1ac2      	subs	r2, r0, r3
	if (elapsed >= period) {
   10104:	4294      	cmp	r4, r2
   10106:	d80b      	bhi.n	10120 <publish_sent+0x74>
   10108:	4907      	ldr	r1, [pc, #28]	; (10128 <publish_sent+0x7c>)
   1010a:	4b08      	ldr	r3, [pc, #32]	; (1012c <publish_sent+0x80>)
		BT_WARN("Publication sending took longer than the period");
   1010c:	4808      	ldr	r0, [pc, #32]	; (10130 <publish_sent+0x84>)
   1010e:	1a5b      	subs	r3, r3, r1
   10110:	08db      	lsrs	r3, r3, #3
   10112:	019b      	lsls	r3, r3, #6
   10114:	f043 0102 	orr.w	r1, r3, #2
   10118:	f011 fce7 	bl	21aea <log_0>
		return 1;
   1011c:	2401      	movs	r4, #1
   1011e:	e7d1      	b.n	100c4 <publish_sent+0x18>
	return period - elapsed;
   10120:	441c      	add	r4, r3
	if (delay) {
   10122:	1a24      	subs	r4, r4, r0
   10124:	d1ce      	bne.n	100c4 <publish_sent+0x18>
}
   10126:	bd70      	pop	{r4, r5, r6, pc}
   10128:	00029870 	.word	0x00029870
   1012c:	00029980 	.word	0x00029980
   10130:	0002d771 	.word	0x0002d771

00010134 <publish_start>:
{
   10134:	b538      	push	{r3, r4, r5, lr}
   10136:	4614      	mov	r4, r2
	if (err) {
   10138:	460d      	mov	r5, r1
   1013a:	b179      	cbz	r1, 1015c <publish_start+0x28>
   1013c:	4a0d      	ldr	r2, [pc, #52]	; (10174 <publish_start+0x40>)
   1013e:	4b0e      	ldr	r3, [pc, #56]	; (10178 <publish_start+0x44>)
		BT_ERR("Failed to publish: err %d", err);
   10140:	480e      	ldr	r0, [pc, #56]	; (1017c <publish_start+0x48>)
   10142:	1a9b      	subs	r3, r3, r2
   10144:	08db      	lsrs	r3, r3, #3
   10146:	019b      	lsls	r3, r3, #6
   10148:	f043 0201 	orr.w	r2, r3, #1
   1014c:	f011 fcda 	bl	21b04 <log_1>
		publish_sent(err, user_data);
   10150:	4621      	mov	r1, r4
   10152:	4628      	mov	r0, r5
}
   10154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		publish_sent(err, user_data);
   10158:	f7ff bfa8 	b.w	100ac <publish_sent>
	struct bt_mesh_model_pub *pub = mod->pub;
   1015c:	6894      	ldr	r4, [r2, #8]
	if (pub->count == BT_MESH_PUB_TRANSMIT_COUNT(pub->retransmit)) {
   1015e:	7a63      	ldrb	r3, [r4, #9]
   10160:	7ae2      	ldrb	r2, [r4, #11]
   10162:	f003 0307 	and.w	r3, r3, #7
   10166:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   1016a:	d102      	bne.n	10172 <publish_start+0x3e>
		pub->period_start = k_uptime_get_32();
   1016c:	f016 f90f 	bl	2638e <k_uptime_get_32>
   10170:	60e0      	str	r0, [r4, #12]
}
   10172:	bd38      	pop	{r3, r4, r5, pc}
   10174:	00029870 	.word	0x00029870
   10178:	00029980 	.word	0x00029980
   1017c:	0002d7a1 	.word	0x0002d7a1

00010180 <bt_mesh_model_elem>:
	return &dev_comp->elem[mod->elem_idx];
   10180:	4b03      	ldr	r3, [pc, #12]	; (10190 <bt_mesh_model_elem+0x10>)
   10182:	7900      	ldrb	r0, [r0, #4]
   10184:	681b      	ldr	r3, [r3, #0]
   10186:	68db      	ldr	r3, [r3, #12]
}
   10188:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   1018c:	4770      	bx	lr
   1018e:	bf00      	nop
   10190:	20002354 	.word	0x20002354

00010194 <mod_publish>:
{
   10194:	b570      	push	{r4, r5, r6, lr}
	if (pub->addr == BT_MESH_ADDR_UNASSIGNED ||
   10196:	f830 3c14 	ldrh.w	r3, [r0, #-20]
{
   1019a:	b09c      	sub	sp, #112	; 0x70
   1019c:	4604      	mov	r4, r0
	if (pub->addr == BT_MESH_ADDR_UNASSIGNED ||
   1019e:	2b00      	cmp	r3, #0
   101a0:	f000 8084 	beq.w	102ac <mod_publish+0x118>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   101a4:	f3bf 8f5b 	dmb	ish
   101a8:	4b41      	ldr	r3, [pc, #260]	; (102b0 <mod_publish+0x11c>)
   101aa:	681b      	ldr	r3, [r3, #0]
   101ac:	f3bf 8f5b 	dmb	ish
   101b0:	079b      	lsls	r3, r3, #30
   101b2:	d47b      	bmi.n	102ac <mod_publish+0x118>
	if (pub->count) {
   101b4:	f810 3c0d 	ldrb.w	r3, [r0, #-13]
   101b8:	f013 06f0 	ands.w	r6, r3, #240	; 0xf0
   101bc:	d059      	beq.n	10272 <mod_publish+0xde>
		pub->count--;
   101be:	33f0      	adds	r3, #240	; 0xf0
   101c0:	f800 3c0d 	strb.w	r3, [r0, #-13]
	err = publish_transmit(pub->mod);
   101c4:	f854 5c18 	ldr.w	r5, [r4, #-24]
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   101c8:	ab0a      	add	r3, sp, #40	; 0x28
   101ca:	f44f 0290 	mov.w	r2, #4718592	; 0x480000
   101ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
	struct bt_mesh_model_pub *pub = mod->pub;
   101d2:	68aa      	ldr	r2, [r5, #8]
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   101d4:	9301      	str	r3, [sp, #4]
		.app_idx = pub->key,
   101d6:	88d0      	ldrh	r0, [r2, #6]
	struct bt_mesh_msg_ctx ctx = {
   101d8:	2100      	movs	r1, #0
   101da:	e9cd 1104 	strd	r1, r1, [sp, #16]
		.app_idx = pub->key,
   101de:	f3c0 000b 	ubfx	r0, r0, #0, #12
	struct bt_mesh_msg_ctx ctx = {
   101e2:	f8cd 1017 	str.w	r1, [sp, #23]
   101e6:	f8ad 0012 	strh.w	r0, [sp, #18]
   101ea:	8890      	ldrh	r0, [r2, #4]
   101ec:	f8ad 0014 	strh.w	r0, [sp, #20]
   101f0:	7a10      	ldrb	r0, [r2, #8]
   101f2:	f88d 001b 	strb.w	r0, [sp, #27]
   101f6:	ab04      	add	r3, sp, #16
		.src = bt_mesh_model_elem(mod)->addr,
   101f8:	4628      	mov	r0, r5
	struct bt_mesh_net_tx tx = {
   101fa:	e9cd 3108 	strd	r3, r1, [sp, #32]
   101fe:	9107      	str	r1, [sp, #28]
		.src = bt_mesh_model_elem(mod)->addr,
   10200:	f7ff ffbe 	bl	10180 <bt_mesh_model_elem>
	struct bt_mesh_net_tx tx = {
   10204:	8803      	ldrh	r3, [r0, #0]
   10206:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
		.friend_cred = pub->cred,
   1020a:	79d3      	ldrb	r3, [r2, #7]
	struct bt_mesh_net_tx tx = {
   1020c:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
		.friend_cred = pub->cred,
   10210:	f3c3 1300 	ubfx	r3, r3, #4, #1
	struct bt_mesh_net_tx tx = {
   10214:	f363 0100 	bfi	r1, r3, #0, #1
	net_buf_simple_add_mem(&sdu, pub->msg->data, pub->msg->len);
   10218:	6913      	ldr	r3, [r2, #16]
	struct bt_mesh_net_tx tx = {
   1021a:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
	net_buf_simple_add_mem(&sdu, pub->msg->data, pub->msg->len);
   1021e:	889a      	ldrh	r2, [r3, #4]
   10220:	6819      	ldr	r1, [r3, #0]
   10222:	a801      	add	r0, sp, #4
   10224:	f018 f816 	bl	28254 <net_buf_simple_add_mem>
	return bt_mesh_trans_send(&tx, &sdu, &pub_sent_cb, mod);
   10228:	462b      	mov	r3, r5
   1022a:	4a22      	ldr	r2, [pc, #136]	; (102b4 <mod_publish+0x120>)
   1022c:	a901      	add	r1, sp, #4
   1022e:	a807      	add	r0, sp, #28
   10230:	f7fe fada 	bl	e7e8 <bt_mesh_trans_send>
	if (err) {
   10234:	4605      	mov	r5, r0
   10236:	2800      	cmp	r0, #0
   10238:	d038      	beq.n	102ac <mod_publish+0x118>
   1023a:	4b1f      	ldr	r3, [pc, #124]	; (102b8 <mod_publish+0x124>)
   1023c:	4a1f      	ldr	r2, [pc, #124]	; (102bc <mod_publish+0x128>)
   1023e:	1ad2      	subs	r2, r2, r3
   10240:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Failed to publish (err %d)", err);
   10242:	0192      	lsls	r2, r2, #6
   10244:	f042 0201 	orr.w	r2, r2, #1
   10248:	4601      	mov	r1, r0
   1024a:	481d      	ldr	r0, [pc, #116]	; (102c0 <mod_publish+0x12c>)
   1024c:	f011 fc5a 	bl	21b04 <log_1>
		if (pub->count == BT_MESH_PUB_TRANSMIT_COUNT(pub->retransmit)) {
   10250:	f814 3c0f 	ldrb.w	r3, [r4, #-15]
   10254:	f814 2c0d 	ldrb.w	r2, [r4, #-13]
   10258:	f003 0307 	and.w	r3, r3, #7
   1025c:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   10260:	d01f      	beq.n	102a2 <mod_publish+0x10e>
		publish_sent(err, pub->mod);
   10262:	f854 1c18 	ldr.w	r1, [r4, #-24]
   10266:	4628      	mov	r0, r5
}
   10268:	b01c      	add	sp, #112	; 0x70
   1026a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		publish_sent(err, pub->mod);
   1026e:	f7ff bf1d 	b.w	100ac <publish_sent>
	pub->count = BT_MESH_PUB_TRANSMIT_COUNT(pub->retransmit);
   10272:	f814 2c0f 	ldrb.w	r2, [r4, #-15]
	err = pub->update(pub->mod);
   10276:	f850 0c18 	ldr.w	r0, [r0, #-24]
	pub->count = BT_MESH_PUB_TRANSMIT_COUNT(pub->retransmit);
   1027a:	f002 0207 	and.w	r2, r2, #7
   1027e:	f362 1307 	bfi	r3, r2, #4, #4
   10282:	f804 3c0d 	strb.w	r3, [r4, #-13]
	if (!pub->update) {
   10286:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1028a:	2b00      	cmp	r3, #0
   1028c:	d09a      	beq.n	101c4 <mod_publish+0x30>
	err = pub->update(pub->mod);
   1028e:	4798      	blx	r3
	if (err) {
   10290:	4605      	mov	r5, r0
   10292:	2800      	cmp	r0, #0
   10294:	d096      	beq.n	101c4 <mod_publish+0x30>
		pub->count = 0;
   10296:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
   1029a:	f366 1307 	bfi	r3, r6, #4, #4
   1029e:	f804 3c0d 	strb.w	r3, [r4, #-13]
			pub->period_start = k_uptime_get_32();
   102a2:	f016 f874 	bl	2638e <k_uptime_get_32>
   102a6:	f844 0c0c 	str.w	r0, [r4, #-12]
   102aa:	e7da      	b.n	10262 <mod_publish+0xce>
}
   102ac:	b01c      	add	sp, #112	; 0x70
   102ae:	bd70      	pop	{r4, r5, r6, pc}
   102b0:	200018d8 	.word	0x200018d8
   102b4:	0002a204 	.word	0x0002a204
   102b8:	00029870 	.word	0x00029870
   102bc:	00029980 	.word	0x00029980
   102c0:	0002d7bb 	.word	0x0002d7bb

000102c4 <bt_mesh_model_get>:
{
   102c4:	b538      	push	{r3, r4, r5, lr}
   102c6:	4613      	mov	r3, r2
	if (elem_idx >= dev_comp->elem_count) {
   102c8:	4a1b      	ldr	r2, [pc, #108]	; (10338 <bt_mesh_model_get+0x74>)
   102ca:	6812      	ldr	r2, [r2, #0]
{
   102cc:	4604      	mov	r4, r0
	if (elem_idx >= dev_comp->elem_count) {
   102ce:	6890      	ldr	r0, [r2, #8]
   102d0:	4281      	cmp	r1, r0
{
   102d2:	460d      	mov	r5, r1
	if (elem_idx >= dev_comp->elem_count) {
   102d4:	d30b      	bcc.n	102ee <bt_mesh_model_get+0x2a>
   102d6:	4a19      	ldr	r2, [pc, #100]	; (1033c <bt_mesh_model_get+0x78>)
   102d8:	4b19      	ldr	r3, [pc, #100]	; (10340 <bt_mesh_model_get+0x7c>)
		BT_ERR("Invalid element index %u", elem_idx);
   102da:	481a      	ldr	r0, [pc, #104]	; (10344 <bt_mesh_model_get+0x80>)
   102dc:	1ad2      	subs	r2, r2, r3
   102de:	08d2      	lsrs	r2, r2, #3
   102e0:	0192      	lsls	r2, r2, #6
   102e2:	f042 0201 	orr.w	r2, r2, #1
   102e6:	f011 fc0d 	bl	21b04 <log_1>
		return NULL;
   102ea:	2000      	movs	r0, #0
}
   102ec:	bd38      	pop	{r3, r4, r5, pc}
	elem = &dev_comp->elem[elem_idx];
   102ee:	68d1      	ldr	r1, [r2, #12]
   102f0:	eb01 1105 	add.w	r1, r1, r5, lsl #4
	if (vnd) {
   102f4:	b184      	cbz	r4, 10318 <bt_mesh_model_get+0x54>
		if (mod_idx >= elem->vnd_model_count) {
   102f6:	794a      	ldrb	r2, [r1, #5]
   102f8:	429a      	cmp	r2, r3
   102fa:	d809      	bhi.n	10310 <bt_mesh_model_get+0x4c>
   102fc:	4910      	ldr	r1, [pc, #64]	; (10340 <bt_mesh_model_get+0x7c>)
   102fe:	4a0f      	ldr	r2, [pc, #60]	; (1033c <bt_mesh_model_get+0x78>)
			BT_ERR("Invalid vendor model index %u", mod_idx);
   10300:	4811      	ldr	r0, [pc, #68]	; (10348 <bt_mesh_model_get+0x84>)
   10302:	1a52      	subs	r2, r2, r1
   10304:	08d2      	lsrs	r2, r2, #3
   10306:	0192      	lsls	r2, r2, #6
   10308:	f042 0201 	orr.w	r2, r2, #1
   1030c:	4619      	mov	r1, r3
   1030e:	e7ea      	b.n	102e6 <bt_mesh_model_get+0x22>
		return &elem->vnd_models[mod_idx];
   10310:	68c8      	ldr	r0, [r1, #12]
		return &elem->models[mod_idx];
   10312:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   10316:	e7e9      	b.n	102ec <bt_mesh_model_get+0x28>
		if (mod_idx >= elem->model_count) {
   10318:	790a      	ldrb	r2, [r1, #4]
   1031a:	429a      	cmp	r2, r3
   1031c:	d809      	bhi.n	10332 <bt_mesh_model_get+0x6e>
   1031e:	4908      	ldr	r1, [pc, #32]	; (10340 <bt_mesh_model_get+0x7c>)
   10320:	4a06      	ldr	r2, [pc, #24]	; (1033c <bt_mesh_model_get+0x78>)
			BT_ERR("Invalid SIG model index %u", mod_idx);
   10322:	480a      	ldr	r0, [pc, #40]	; (1034c <bt_mesh_model_get+0x88>)
   10324:	1a52      	subs	r2, r2, r1
   10326:	08d2      	lsrs	r2, r2, #3
   10328:	0192      	lsls	r2, r2, #6
   1032a:	f042 0201 	orr.w	r2, r2, #1
   1032e:	4619      	mov	r1, r3
   10330:	e7d9      	b.n	102e6 <bt_mesh_model_get+0x22>
		return &elem->models[mod_idx];
   10332:	6888      	ldr	r0, [r1, #8]
   10334:	e7ed      	b.n	10312 <bt_mesh_model_get+0x4e>
   10336:	bf00      	nop
   10338:	20002354 	.word	0x20002354
   1033c:	00029980 	.word	0x00029980
   10340:	00029870 	.word	0x00029870
   10344:	0002d7d6 	.word	0x0002d7d6
   10348:	0002d7ef 	.word	0x0002d7ef
   1034c:	0002d80d 	.word	0x0002d80d

00010350 <mod_set>:
{
   10350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10354:	b086      	sub	sp, #24
   10356:	4605      	mov	r5, r0
   10358:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
   1035c:	4616      	mov	r6, r2
   1035e:	461f      	mov	r7, r3
	if (!name) {
   10360:	468a      	mov	sl, r1
   10362:	b951      	cbnz	r1, 1037a <mod_set+0x2a>
   10364:	4b75      	ldr	r3, [pc, #468]	; (1053c <mod_set+0x1ec>)
   10366:	4976      	ldr	r1, [pc, #472]	; (10540 <mod_set+0x1f0>)
		BT_ERR("Insufficient number of arguments");
   10368:	4876      	ldr	r0, [pc, #472]	; (10544 <mod_set+0x1f4>)
   1036a:	1ac9      	subs	r1, r1, r3
   1036c:	08c9      	lsrs	r1, r1, #3
   1036e:	0189      	lsls	r1, r1, #6
   10370:	f041 0101 	orr.w	r1, r1, #1
   10374:	f011 fbb9 	bl	21aea <log_0>
		return -ENOENT;
   10378:	e01b      	b.n	103b2 <mod_set+0x62>
	mod_key = strtol(name, NULL, 16);
   1037a:	2210      	movs	r2, #16
   1037c:	2100      	movs	r1, #0
   1037e:	4650      	mov	r0, sl
   10380:	f013 fbcb 	bl	23b1a <strtol>
	elem_idx = mod_key >> 8;
   10384:	f3c0 2407 	ubfx	r4, r0, #8, #8
	mod = bt_mesh_model_get(vnd, elem_idx, mod_idx);
   10388:	fa5f f880 	uxtb.w	r8, r0
   1038c:	4642      	mov	r2, r8
   1038e:	4628      	mov	r0, r5
   10390:	4621      	mov	r1, r4
   10392:	f7ff ff97 	bl	102c4 <bt_mesh_model_get>
	if (!mod) {
   10396:	4605      	mov	r5, r0
   10398:	b970      	cbnz	r0, 103b8 <mod_set+0x68>
   1039a:	4a68      	ldr	r2, [pc, #416]	; (1053c <mod_set+0x1ec>)
   1039c:	4b68      	ldr	r3, [pc, #416]	; (10540 <mod_set+0x1f0>)
		BT_ERR("Failed to get model for elem_idx %u mod_idx %u",
   1039e:	486a      	ldr	r0, [pc, #424]	; (10548 <mod_set+0x1f8>)
   103a0:	1a9b      	subs	r3, r3, r2
   103a2:	08db      	lsrs	r3, r3, #3
   103a4:	019b      	lsls	r3, r3, #6
   103a6:	f043 0301 	orr.w	r3, r3, #1
   103aa:	4642      	mov	r2, r8
   103ac:	4621      	mov	r1, r4
   103ae:	f011 fbbd 	bl	21b2c <log_2>
	return -ENOENT;
   103b2:	f06f 0401 	mvn.w	r4, #1
   103b6:	e011      	b.n	103dc <mod_set+0x8c>
	len = settings_name_next(name, &next);
   103b8:	a903      	add	r1, sp, #12
   103ba:	4650      	mov	r0, sl
   103bc:	f012 f9bc 	bl	22738 <settings_name_next>
   103c0:	4680      	mov	r8, r0
	if (!next) {
   103c2:	9803      	ldr	r0, [sp, #12]
   103c4:	2800      	cmp	r0, #0
   103c6:	d0cd      	beq.n	10364 <mod_set+0x14>
	if (!strncmp(next, "bind", len)) {
   103c8:	4960      	ldr	r1, [pc, #384]	; (1054c <mod_set+0x1fc>)
   103ca:	4642      	mov	r2, r8
   103cc:	f013 fcca 	bl	23d64 <strncmp>
   103d0:	b9d8      	cbnz	r0, 1040a <mod_set+0xba>
		mod->keys[i] = BT_MESH_KEY_UNUSED;
   103d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   103d6:	60eb      	str	r3, [r5, #12]
	if (len_rd == 0) {
   103d8:	b926      	cbnz	r6, 103e4 <mod_set+0x94>
		return 0;
   103da:	2400      	movs	r4, #0
}
   103dc:	4620      	mov	r0, r4
   103de:	b006      	add	sp, #24
   103e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	len = read_cb(cb_arg, mod->keys, sizeof(mod->keys));
   103e4:	2204      	movs	r2, #4
   103e6:	f105 010c 	add.w	r1, r5, #12
	len = read_cb(cb_arg, mod->groups, sizeof(mod->groups));
   103ea:	4648      	mov	r0, r9
   103ec:	47b8      	blx	r7
	if (len < 0) {
   103ee:	1e04      	subs	r4, r0, #0
   103f0:	daf3      	bge.n	103da <mod_set+0x8a>
   103f2:	4b52      	ldr	r3, [pc, #328]	; (1053c <mod_set+0x1ec>)
   103f4:	4a52      	ldr	r2, [pc, #328]	; (10540 <mod_set+0x1f0>)
		BT_ERR("Failed to read value (err %zd)", len);
   103f6:	4856      	ldr	r0, [pc, #344]	; (10550 <mod_set+0x200>)
   103f8:	1ad2      	subs	r2, r2, r3
   103fa:	08d2      	lsrs	r2, r2, #3
   103fc:	0192      	lsls	r2, r2, #6
   103fe:	f042 0201 	orr.w	r2, r2, #1
   10402:	4621      	mov	r1, r4
   10404:	f011 fb7e 	bl	21b04 <log_1>
		return len;
   10408:	e7e8      	b.n	103dc <mod_set+0x8c>
	if (!strncmp(next, "sub", len)) {
   1040a:	4952      	ldr	r1, [pc, #328]	; (10554 <mod_set+0x204>)
   1040c:	9803      	ldr	r0, [sp, #12]
   1040e:	4642      	mov	r2, r8
   10410:	f013 fca8 	bl	23d64 <strncmp>
   10414:	4601      	mov	r1, r0
   10416:	b948      	cbnz	r0, 1042c <mod_set+0xdc>
	(void)memset(mod->groups, 0, sizeof(mod->groups));
   10418:	3510      	adds	r5, #16
   1041a:	2204      	movs	r2, #4
   1041c:	4628      	mov	r0, r5
   1041e:	f013 fcce 	bl	23dbe <memset>
	if (len_rd == 0) {
   10422:	2e00      	cmp	r6, #0
   10424:	d0d9      	beq.n	103da <mod_set+0x8a>
	len = read_cb(cb_arg, mod->groups, sizeof(mod->groups));
   10426:	2204      	movs	r2, #4
   10428:	4629      	mov	r1, r5
   1042a:	e7de      	b.n	103ea <mod_set+0x9a>
	if (!strncmp(next, "pub", len)) {
   1042c:	494a      	ldr	r1, [pc, #296]	; (10558 <mod_set+0x208>)
   1042e:	9803      	ldr	r0, [sp, #12]
   10430:	4642      	mov	r2, r8
   10432:	f013 fc97 	bl	23d64 <strncmp>
   10436:	4604      	mov	r4, r0
   10438:	2800      	cmp	r0, #0
   1043a:	d154      	bne.n	104e6 <mod_set+0x196>
	if (!mod->pub) {
   1043c:	68ab      	ldr	r3, [r5, #8]
   1043e:	b963      	cbnz	r3, 1045a <mod_set+0x10a>
   10440:	4b3e      	ldr	r3, [pc, #248]	; (1053c <mod_set+0x1ec>)
   10442:	493f      	ldr	r1, [pc, #252]	; (10540 <mod_set+0x1f0>)
		BT_WARN("Model has no publication context!");
   10444:	4845      	ldr	r0, [pc, #276]	; (1055c <mod_set+0x20c>)
   10446:	1ac9      	subs	r1, r1, r3
   10448:	08c9      	lsrs	r1, r1, #3
   1044a:	0189      	lsls	r1, r1, #6
   1044c:	f041 0102 	orr.w	r1, r1, #2
   10450:	f011 fb4b 	bl	21aea <log_0>
		return -EINVAL;
   10454:	f06f 0415 	mvn.w	r4, #21
   10458:	e7c0      	b.n	103dc <mod_set+0x8c>
	if (len_rd == 0) {
   1045a:	b946      	cbnz	r6, 1046e <mod_set+0x11e>
		mod->pub->addr = BT_MESH_ADDR_UNASSIGNED;
   1045c:	685a      	ldr	r2, [r3, #4]
   1045e:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
   10462:	605a      	str	r2, [r3, #4]
		mod->pub->ttl = 0U;
   10464:	689a      	ldr	r2, [r3, #8]
   10466:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
   1046a:	609a      	str	r2, [r3, #8]
		return 0;
   1046c:	e7b6      	b.n	103dc <mod_set+0x8c>
	err = bt_mesh_settings_set(read_cb, cb_arg, &pub, sizeof(pub));
   1046e:	2308      	movs	r3, #8
   10470:	aa04      	add	r2, sp, #16
   10472:	4649      	mov	r1, r9
   10474:	4638      	mov	r0, r7
   10476:	f002 ffd7 	bl	13428 <bt_mesh_settings_set>
	if (err) {
   1047a:	4604      	mov	r4, r0
   1047c:	b150      	cbz	r0, 10494 <mod_set+0x144>
   1047e:	4b2f      	ldr	r3, [pc, #188]	; (1053c <mod_set+0x1ec>)
   10480:	492f      	ldr	r1, [pc, #188]	; (10540 <mod_set+0x1f0>)
		BT_ERR("Failed to set \'model-pub\'");
   10482:	4837      	ldr	r0, [pc, #220]	; (10560 <mod_set+0x210>)
   10484:	1ac9      	subs	r1, r1, r3
   10486:	08c9      	lsrs	r1, r1, #3
   10488:	0189      	lsls	r1, r1, #6
   1048a:	f041 0101 	orr.w	r1, r1, #1
   1048e:	f011 fb2c 	bl	21aea <log_0>
		return err;
   10492:	e7a3      	b.n	103dc <mod_set+0x8c>
	mod->pub->addr = pub.addr;
   10494:	68aa      	ldr	r2, [r5, #8]
   10496:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   1049a:	8093      	strh	r3, [r2, #4]
	mod->pub->cred = pub.cred;
   1049c:	f89d 3017 	ldrb.w	r3, [sp, #23]
	mod->pub->key = pub.key;
   104a0:	f3c3 1100 	ubfx	r1, r3, #4, #1
   104a4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   104a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
   104ac:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
   104b0:	88d1      	ldrh	r1, [r2, #6]
   104b2:	f421 51ff 	bic.w	r1, r1, #8160	; 0x1fe0
   104b6:	f021 011f 	bic.w	r1, r1, #31
   104ba:	430b      	orrs	r3, r1
   104bc:	80d3      	strh	r3, [r2, #6]
	mod->pub->ttl = pub.ttl;
   104be:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   104c2:	8113      	strh	r3, [r2, #8]
	mod->pub->period = pub.period;
   104c4:	8953      	ldrh	r3, [r2, #10]
   104c6:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   104ca:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   104ce:	f023 030f 	bic.w	r3, r3, #15
   104d2:	f3c1 010b 	ubfx	r1, r1, #0, #12
   104d6:	430b      	orrs	r3, r1
   104d8:	8153      	strh	r3, [r2, #10]
	mod->pub->count = 0U;
   104da:	f3c3 2307 	ubfx	r3, r3, #8, #8
   104de:	f360 1307 	bfi	r3, r0, #4, #4
   104e2:	72d3      	strb	r3, [r2, #11]
		return mod_set_pub(mod, len_rd, read_cb, cb_arg);
   104e4:	e77a      	b.n	103dc <mod_set+0x8c>
	if (!strncmp(next, "data", len)) {
   104e6:	491f      	ldr	r1, [pc, #124]	; (10564 <mod_set+0x214>)
   104e8:	9803      	ldr	r0, [sp, #12]
   104ea:	4642      	mov	r2, r8
   104ec:	f013 fc3a 	bl	23d64 <strncmp>
   104f0:	4604      	mov	r4, r0
   104f2:	b9b0      	cbnz	r0, 10522 <mod_set+0x1d2>
	settings_name_next(name, &next);
   104f4:	9803      	ldr	r0, [sp, #12]
   104f6:	a904      	add	r1, sp, #16
   104f8:	f012 f91e 	bl	22738 <settings_name_next>
	if (mod->cb && mod->cb->settings_set) {
   104fc:	69ab      	ldr	r3, [r5, #24]
   104fe:	2b00      	cmp	r3, #0
   10500:	f43f af6c 	beq.w	103dc <mod_set+0x8c>
   10504:	f8d3 8000 	ldr.w	r8, [r3]
   10508:	f1b8 0f00 	cmp.w	r8, #0
   1050c:	f43f af66 	beq.w	103dc <mod_set+0x8c>
		return mod->cb->settings_set(mod, next, len_rd,
   10510:	9904      	ldr	r1, [sp, #16]
   10512:	f8cd 9000 	str.w	r9, [sp]
   10516:	463b      	mov	r3, r7
   10518:	4632      	mov	r2, r6
   1051a:	4628      	mov	r0, r5
   1051c:	47c0      	blx	r8
   1051e:	4604      	mov	r4, r0
		return mod_data_set(mod, next, len_rd, read_cb, cb_arg);
   10520:	e75c      	b.n	103dc <mod_set+0x8c>
   10522:	4b06      	ldr	r3, [pc, #24]	; (1053c <mod_set+0x1ec>)
   10524:	4a06      	ldr	r2, [pc, #24]	; (10540 <mod_set+0x1f0>)
	BT_WARN("Unknown module key %s", next);
   10526:	9903      	ldr	r1, [sp, #12]
   10528:	480f      	ldr	r0, [pc, #60]	; (10568 <mod_set+0x218>)
   1052a:	1ad2      	subs	r2, r2, r3
   1052c:	08d2      	lsrs	r2, r2, #3
   1052e:	0192      	lsls	r2, r2, #6
   10530:	f042 0202 	orr.w	r2, r2, #2
   10534:	f011 fae6 	bl	21b04 <log_1>
   10538:	e73b      	b.n	103b2 <mod_set+0x62>
   1053a:	bf00      	nop
   1053c:	00029870 	.word	0x00029870
   10540:	00029980 	.word	0x00029980
   10544:	0002b425 	.word	0x0002b425
   10548:	0002d828 	.word	0x0002d828
   1054c:	0002d74b 	.word	0x0002d74b
   10550:	0002d857 	.word	0x0002d857
   10554:	0002d769 	.word	0x0002d769
   10558:	0002d76d 	.word	0x0002d76d
   1055c:	0002d876 	.word	0x0002d876
   10560:	0002d898 	.word	0x0002d898
   10564:	0002be93 	.word	0x0002be93
   10568:	0002d8b2 	.word	0x0002d8b2

0001056c <bt_mesh_comp_register>:
{
   1056c:	b507      	push	{r0, r1, r2, lr}
	if (!comp || !comp->elem_count) {
   1056e:	b168      	cbz	r0, 1058c <bt_mesh_comp_register+0x20>
   10570:	6883      	ldr	r3, [r0, #8]
   10572:	b15b      	cbz	r3, 1058c <bt_mesh_comp_register+0x20>
	dev_comp = comp;
   10574:	4b07      	ldr	r3, [pc, #28]	; (10594 <bt_mesh_comp_register+0x28>)
	bt_mesh_model_foreach(mod_init, &err);
   10576:	a901      	add	r1, sp, #4
	dev_comp = comp;
   10578:	6018      	str	r0, [r3, #0]
	bt_mesh_model_foreach(mod_init, &err);
   1057a:	4807      	ldr	r0, [pc, #28]	; (10598 <bt_mesh_comp_register+0x2c>)
	err = 0;
   1057c:	2300      	movs	r3, #0
   1057e:	9301      	str	r3, [sp, #4]
	bt_mesh_model_foreach(mod_init, &err);
   10580:	f7ff fd36 	bl	fff0 <bt_mesh_model_foreach>
	return err;
   10584:	9801      	ldr	r0, [sp, #4]
}
   10586:	b003      	add	sp, #12
   10588:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   1058c:	f06f 0015 	mvn.w	r0, #21
   10590:	e7f9      	b.n	10586 <bt_mesh_comp_register+0x1a>
   10592:	bf00      	nop
   10594:	20002354 	.word	0x20002354
   10598:	0000fd6d 	.word	0x0000fd6d

0001059c <bt_mesh_comp_provision>:
	dev_primary_addr = addr;
   1059c:	4b08      	ldr	r3, [pc, #32]	; (105c0 <bt_mesh_comp_provision+0x24>)
{
   1059e:	b570      	push	{r4, r5, r6, lr}
	dev_primary_addr = addr;
   105a0:	8018      	strh	r0, [r3, #0]
	for (i = 0; i < dev_comp->elem_count; i++) {
   105a2:	4b08      	ldr	r3, [pc, #32]	; (105c4 <bt_mesh_comp_provision+0x28>)
   105a4:	6819      	ldr	r1, [r3, #0]
   105a6:	688c      	ldr	r4, [r1, #8]
   105a8:	2300      	movs	r3, #0
   105aa:	18c2      	adds	r2, r0, r3
   105ac:	42a3      	cmp	r3, r4
   105ae:	b292      	uxth	r2, r2
   105b0:	d100      	bne.n	105b4 <bt_mesh_comp_provision+0x18>
}
   105b2:	bd70      	pop	{r4, r5, r6, pc}
		elem->addr = addr++;
   105b4:	011d      	lsls	r5, r3, #4
   105b6:	68ce      	ldr	r6, [r1, #12]
	for (i = 0; i < dev_comp->elem_count; i++) {
   105b8:	3301      	adds	r3, #1
		elem->addr = addr++;
   105ba:	5372      	strh	r2, [r6, r5]
	for (i = 0; i < dev_comp->elem_count; i++) {
   105bc:	e7f5      	b.n	105aa <bt_mesh_comp_provision+0xe>
   105be:	bf00      	nop
   105c0:	20003724 	.word	0x20003724
   105c4:	20002354 	.word	0x20002354

000105c8 <bt_mesh_comp_unprovision>:
	dev_primary_addr = BT_MESH_ADDR_UNASSIGNED;
   105c8:	4b01      	ldr	r3, [pc, #4]	; (105d0 <bt_mesh_comp_unprovision+0x8>)
   105ca:	2200      	movs	r2, #0
   105cc:	801a      	strh	r2, [r3, #0]
}
   105ce:	4770      	bx	lr
   105d0:	20003724 	.word	0x20003724

000105d4 <bt_mesh_primary_addr>:
}
   105d4:	4b01      	ldr	r3, [pc, #4]	; (105dc <bt_mesh_primary_addr+0x8>)
   105d6:	8818      	ldrh	r0, [r3, #0]
   105d8:	4770      	bx	lr
   105da:	bf00      	nop
   105dc:	20003724 	.word	0x20003724

000105e0 <bt_mesh_elem_find>:
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
   105e0:	b203      	sxth	r3, r0
   105e2:	2b00      	cmp	r3, #0
   105e4:	dd0b      	ble.n	105fe <bt_mesh_elem_find+0x1e>
	index = addr - dev_comp->elem[0].addr;
   105e6:	4b07      	ldr	r3, [pc, #28]	; (10604 <bt_mesh_elem_find+0x24>)
   105e8:	681a      	ldr	r2, [r3, #0]
   105ea:	68d3      	ldr	r3, [r2, #12]
	if (index >= dev_comp->elem_count) {
   105ec:	6892      	ldr	r2, [r2, #8]
	index = addr - dev_comp->elem[0].addr;
   105ee:	8819      	ldrh	r1, [r3, #0]
   105f0:	1a40      	subs	r0, r0, r1
	if (index >= dev_comp->elem_count) {
   105f2:	b280      	uxth	r0, r0
   105f4:	4290      	cmp	r0, r2
   105f6:	d202      	bcs.n	105fe <bt_mesh_elem_find+0x1e>
	return &dev_comp->elem[index];
   105f8:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   105fc:	4770      	bx	lr
		return NULL;
   105fe:	2000      	movs	r0, #0
}
   10600:	4770      	bx	lr
   10602:	bf00      	nop
   10604:	20002354 	.word	0x20002354

00010608 <bt_mesh_has_addr>:
	if (BT_MESH_ADDR_IS_UNICAST(addr)) {
   10608:	b202      	sxth	r2, r0
   1060a:	2a00      	cmp	r2, #0
{
   1060c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1060e:	4603      	mov	r3, r0
	if (BT_MESH_ADDR_IS_UNICAST(addr)) {
   10610:	dc08      	bgt.n	10624 <bt_mesh_has_addr+0x1c>
	for (index = 0; index < dev_comp->elem_count; index++) {
   10612:	4a22      	ldr	r2, [pc, #136]	; (1069c <bt_mesh_has_addr+0x94>)
   10614:	6816      	ldr	r6, [r2, #0]
   10616:	68b7      	ldr	r7, [r6, #8]
   10618:	2500      	movs	r5, #0
   1061a:	b2aa      	uxth	r2, r5
   1061c:	4297      	cmp	r7, r2
   1061e:	d807      	bhi.n	10630 <bt_mesh_has_addr+0x28>
	return false;
   10620:	2000      	movs	r0, #0
   10622:	e004      	b.n	1062e <bt_mesh_has_addr+0x26>
		return bt_mesh_elem_find(addr) != NULL;
   10624:	f7ff ffdc 	bl	105e0 <bt_mesh_elem_find>
   10628:	3800      	subs	r0, #0
   1062a:	bf18      	it	ne
   1062c:	2001      	movne	r0, #1
}
   1062e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		struct bt_mesh_elem *elem = &dev_comp->elem[index];
   10630:	68f1      	ldr	r1, [r6, #12]
   10632:	eb01 1202 	add.w	r2, r1, r2, lsl #4
	for (i = 0; i < elem->model_count; i++) {
   10636:	2000      	movs	r0, #0
   10638:	f892 c004 	ldrb.w	ip, [r2, #4]
   1063c:	4560      	cmp	r0, ip
   1063e:	db06      	blt.n	1064e <bt_mesh_has_addr+0x46>
	for (i = 0; i < elem->vnd_model_count; i++) {
   10640:	f892 c005 	ldrb.w	ip, [r2, #5]
   10644:	2000      	movs	r0, #0
   10646:	4560      	cmp	r0, ip
   10648:	db13      	blt.n	10672 <bt_mesh_has_addr+0x6a>
	for (index = 0; index < dev_comp->elem_count; index++) {
   1064a:	3501      	adds	r5, #1
   1064c:	e7e5      	b.n	1061a <bt_mesh_has_addr+0x12>
		model = &elem->models[i];
   1064e:	6891      	ldr	r1, [r2, #8]
   10650:	eb01 1140 	add.w	r1, r1, r0, lsl #5
		if (mod->groups[i] == addr) {
   10654:	8a0c      	ldrh	r4, [r1, #16]
   10656:	429c      	cmp	r4, r3
   10658:	d009      	beq.n	1066e <bt_mesh_has_addr+0x66>
   1065a:	8a4c      	ldrh	r4, [r1, #18]
   1065c:	429c      	cmp	r4, r3
   1065e:	d104      	bne.n	1066a <bt_mesh_has_addr+0x62>
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
   10660:	2401      	movs	r4, #1
			return &mod->groups[i];
   10662:	3408      	adds	r4, #8
   10664:	eb01 0144 	add.w	r1, r1, r4, lsl #1
		if (match) {
   10668:	b9a9      	cbnz	r1, 10696 <bt_mesh_has_addr+0x8e>
	for (i = 0; i < elem->model_count; i++) {
   1066a:	3001      	adds	r0, #1
   1066c:	e7e6      	b.n	1063c <bt_mesh_has_addr+0x34>
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
   1066e:	2400      	movs	r4, #0
   10670:	e7f7      	b.n	10662 <bt_mesh_has_addr+0x5a>
		model = &elem->vnd_models[i];
   10672:	68d1      	ldr	r1, [r2, #12]
   10674:	eb01 1140 	add.w	r1, r1, r0, lsl #5
		if (mod->groups[i] == addr) {
   10678:	8a0c      	ldrh	r4, [r1, #16]
   1067a:	429c      	cmp	r4, r3
   1067c:	d009      	beq.n	10692 <bt_mesh_has_addr+0x8a>
   1067e:	8a4c      	ldrh	r4, [r1, #18]
   10680:	429c      	cmp	r4, r3
   10682:	d104      	bne.n	1068e <bt_mesh_has_addr+0x86>
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
   10684:	2401      	movs	r4, #1
			return &mod->groups[i];
   10686:	3408      	adds	r4, #8
   10688:	eb01 0144 	add.w	r1, r1, r4, lsl #1
		if (match) {
   1068c:	b919      	cbnz	r1, 10696 <bt_mesh_has_addr+0x8e>
	for (i = 0; i < elem->vnd_model_count; i++) {
   1068e:	3001      	adds	r0, #1
   10690:	e7d9      	b.n	10646 <bt_mesh_has_addr+0x3e>
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
   10692:	2400      	movs	r4, #0
   10694:	e7f7      	b.n	10686 <bt_mesh_has_addr+0x7e>
			return true;
   10696:	2001      	movs	r0, #1
   10698:	e7c9      	b.n	1062e <bt_mesh_has_addr+0x26>
   1069a:	bf00      	nop
   1069c:	20002354 	.word	0x20002354

000106a0 <bt_mesh_msg_send>:
{
   106a0:	b530      	push	{r4, r5, lr}
   106a2:	b085      	sub	sp, #20
   106a4:	461d      	mov	r5, r3
	struct bt_mesh_net_tx tx = {
   106a6:	2300      	movs	r3, #0
   106a8:	e9cd 0302 	strd	r0, r3, [sp, #8]
{
   106ac:	460c      	mov	r4, r1
	struct bt_mesh_net_tx tx = {
   106ae:	9301      	str	r3, [sp, #4]
   106b0:	f8ad 200c 	strh.w	r2, [sp, #12]
	if (!bt_mesh_is_provisioned()) {
   106b4:	f7fa ff7a 	bl	b5ac <bt_mesh_is_provisioned>
   106b8:	b968      	cbnz	r0, 106d6 <bt_mesh_msg_send+0x36>
   106ba:	4b0a      	ldr	r3, [pc, #40]	; (106e4 <bt_mesh_msg_send+0x44>)
   106bc:	490a      	ldr	r1, [pc, #40]	; (106e8 <bt_mesh_msg_send+0x48>)
		BT_ERR("Local node is not yet provisioned");
   106be:	480b      	ldr	r0, [pc, #44]	; (106ec <bt_mesh_msg_send+0x4c>)
   106c0:	1ac9      	subs	r1, r1, r3
   106c2:	08c9      	lsrs	r1, r1, #3
   106c4:	0189      	lsls	r1, r1, #6
   106c6:	f041 0101 	orr.w	r1, r1, #1
   106ca:	f011 fa0e 	bl	21aea <log_0>
		return -EAGAIN;
   106ce:	f06f 000a 	mvn.w	r0, #10
}
   106d2:	b005      	add	sp, #20
   106d4:	bd30      	pop	{r4, r5, pc}
	return bt_mesh_trans_send(&tx, buf, cb, cb_data);
   106d6:	9b08      	ldr	r3, [sp, #32]
   106d8:	462a      	mov	r2, r5
   106da:	4621      	mov	r1, r4
   106dc:	a801      	add	r0, sp, #4
   106de:	f7fe f883 	bl	e7e8 <bt_mesh_trans_send>
   106e2:	e7f6      	b.n	106d2 <bt_mesh_msg_send+0x32>
   106e4:	00029870 	.word	0x00029870
   106e8:	00029980 	.word	0x00029980
   106ec:	0002d8c8 	.word	0x0002d8c8

000106f0 <bt_mesh_elem_count>:
	return dev_comp->elem_count;
   106f0:	4b01      	ldr	r3, [pc, #4]	; (106f8 <bt_mesh_elem_count+0x8>)
   106f2:	681b      	ldr	r3, [r3, #0]
}
   106f4:	7a18      	ldrb	r0, [r3, #8]
   106f6:	4770      	bx	lr
   106f8:	20002354 	.word	0x20002354

000106fc <bt_mesh_model_send>:
{
   106fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10700:	460c      	mov	r4, r1
	if (!bt_mesh_model_has_key(model, ctx->app_idx)) {
   10702:	8849      	ldrh	r1, [r1, #2]
{
   10704:	4607      	mov	r7, r0
   10706:	4615      	mov	r5, r2
   10708:	461e      	mov	r6, r3
	if (!bt_mesh_model_has_key(model, ctx->app_idx)) {
   1070a:	f015 fea0 	bl	2644e <bt_mesh_model_has_key>
   1070e:	b150      	cbz	r0, 10726 <bt_mesh_model_send+0x2a>
	return bt_mesh_msg_send(ctx, msg, bt_mesh_model_elem(model)->addr, cb, cb_data);
   10710:	4638      	mov	r0, r7
   10712:	f7ff fd35 	bl	10180 <bt_mesh_model_elem>
   10716:	4629      	mov	r1, r5
   10718:	8802      	ldrh	r2, [r0, #0]
   1071a:	4633      	mov	r3, r6
   1071c:	4620      	mov	r0, r4
}
   1071e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_mesh_msg_send(ctx, msg, bt_mesh_model_elem(model)->addr, cb, cb_data);
   10722:	f7ff bfbd 	b.w	106a0 <bt_mesh_msg_send>
   10726:	4b07      	ldr	r3, [pc, #28]	; (10744 <bt_mesh_model_send+0x48>)
   10728:	4a07      	ldr	r2, [pc, #28]	; (10748 <bt_mesh_model_send+0x4c>)
		BT_ERR("Model not bound to AppKey 0x%04x", ctx->app_idx);
   1072a:	4808      	ldr	r0, [pc, #32]	; (1074c <bt_mesh_model_send+0x50>)
   1072c:	1ad2      	subs	r2, r2, r3
   1072e:	08d2      	lsrs	r2, r2, #3
   10730:	0192      	lsls	r2, r2, #6
   10732:	f042 0201 	orr.w	r2, r2, #1
   10736:	f011 f9e5 	bl	21b04 <log_1>
}
   1073a:	f06f 0015 	mvn.w	r0, #21
   1073e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10742:	bf00      	nop
   10744:	00029870 	.word	0x00029870
   10748:	00029980 	.word	0x00029980
   1074c:	0002d8ea 	.word	0x0002d8ea

00010750 <bt_mesh_model_publish>:
{
   10750:	b510      	push	{r4, lr}
	struct bt_mesh_model_pub *pub = model->pub;
   10752:	6884      	ldr	r4, [r0, #8]
	if (!pub) {
   10754:	2c00      	cmp	r4, #0
   10756:	d041      	beq.n	107dc <bt_mesh_model_publish+0x8c>
	if (pub->addr == BT_MESH_ADDR_UNASSIGNED) {
   10758:	88a3      	ldrh	r3, [r4, #4]
   1075a:	2b00      	cmp	r3, #0
   1075c:	d041      	beq.n	107e2 <bt_mesh_model_publish+0x92>
	if (!pub->msg || !pub->msg->len) {
   1075e:	6923      	ldr	r3, [r4, #16]
   10760:	b10b      	cbz	r3, 10766 <bt_mesh_model_publish+0x16>
   10762:	889b      	ldrh	r3, [r3, #4]
   10764:	b963      	cbnz	r3, 10780 <bt_mesh_model_publish+0x30>
   10766:	4b20      	ldr	r3, [pc, #128]	; (107e8 <bt_mesh_model_publish+0x98>)
   10768:	4920      	ldr	r1, [pc, #128]	; (107ec <bt_mesh_model_publish+0x9c>)
		BT_ERR("No publication message");
   1076a:	4821      	ldr	r0, [pc, #132]	; (107f0 <bt_mesh_model_publish+0xa0>)
   1076c:	1ac9      	subs	r1, r1, r3
   1076e:	08c9      	lsrs	r1, r1, #3
   10770:	0189      	lsls	r1, r1, #6
   10772:	f041 0101 	orr.w	r1, r1, #1
   10776:	f011 f9b8 	bl	21aea <log_0>
		return -EINVAL;
   1077a:	f06f 0015 	mvn.w	r0, #21
}
   1077e:	bd10      	pop	{r4, pc}
	if (pub->msg->len + BT_MESH_MIC_SHORT > BT_MESH_TX_SDU_MAX) {
   10780:	3304      	adds	r3, #4
   10782:	2b48      	cmp	r3, #72	; 0x48
   10784:	dd0c      	ble.n	107a0 <bt_mesh_model_publish+0x50>
   10786:	4b18      	ldr	r3, [pc, #96]	; (107e8 <bt_mesh_model_publish+0x98>)
   10788:	4918      	ldr	r1, [pc, #96]	; (107ec <bt_mesh_model_publish+0x9c>)
		BT_ERR("Message does not fit maximum SDU size");
   1078a:	481a      	ldr	r0, [pc, #104]	; (107f4 <bt_mesh_model_publish+0xa4>)
   1078c:	1ac9      	subs	r1, r1, r3
   1078e:	08c9      	lsrs	r1, r1, #3
   10790:	0189      	lsls	r1, r1, #6
   10792:	f041 0101 	orr.w	r1, r1, #1
   10796:	f011 f9a8 	bl	21aea <log_0>
		return -EMSGSIZE;
   1079a:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1079e:	e7ee      	b.n	1077e <bt_mesh_model_publish+0x2e>
	if (pub->count) {
   107a0:	7ae3      	ldrb	r3, [r4, #11]
   107a2:	f013 0ff0 	tst.w	r3, #240	; 0xf0
   107a6:	d009      	beq.n	107bc <bt_mesh_model_publish+0x6c>
   107a8:	4910      	ldr	r1, [pc, #64]	; (107ec <bt_mesh_model_publish+0x9c>)
   107aa:	4b0f      	ldr	r3, [pc, #60]	; (107e8 <bt_mesh_model_publish+0x98>)
		BT_WARN("Clearing publish retransmit timer");
   107ac:	4812      	ldr	r0, [pc, #72]	; (107f8 <bt_mesh_model_publish+0xa8>)
   107ae:	1ac9      	subs	r1, r1, r3
   107b0:	08c9      	lsrs	r1, r1, #3
   107b2:	0189      	lsls	r1, r1, #6
   107b4:	f041 0102 	orr.w	r1, r1, #2
   107b8:	f011 f997 	bl	21aea <log_0>
	pub->count = BT_MESH_PUB_TRANSMIT_COUNT(pub->retransmit) + 1;
   107bc:	7a63      	ldrb	r3, [r4, #9]
   107be:	7ae2      	ldrb	r2, [r4, #11]
   107c0:	f003 0307 	and.w	r3, r3, #7
   107c4:	3301      	adds	r3, #1
   107c6:	f363 1207 	bfi	r2, r3, #4, #4
   107ca:	72e2      	strb	r2, [r4, #11]
	k_work_reschedule(&pub->timer, K_NO_WAIT);
   107cc:	2300      	movs	r3, #0
   107ce:	2200      	movs	r2, #0
   107d0:	f104 0018 	add.w	r0, r4, #24
   107d4:	f00f fe26 	bl	20424 <k_work_reschedule>
	return 0;
   107d8:	2000      	movs	r0, #0
   107da:	e7d0      	b.n	1077e <bt_mesh_model_publish+0x2e>
		return -ENOTSUP;
   107dc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   107e0:	e7cd      	b.n	1077e <bt_mesh_model_publish+0x2e>
		return -EADDRNOTAVAIL;
   107e2:	f06f 007c 	mvn.w	r0, #124	; 0x7c
   107e6:	e7ca      	b.n	1077e <bt_mesh_model_publish+0x2e>
   107e8:	00029870 	.word	0x00029870
   107ec:	00029980 	.word	0x00029980
   107f0:	0002d90b 	.word	0x0002d90b
   107f4:	0002d922 	.word	0x0002d922
   107f8:	0002d948 	.word	0x0002d948

000107fc <bt_mesh_comp_get>:
}
   107fc:	4b01      	ldr	r3, [pc, #4]	; (10804 <bt_mesh_comp_get+0x8>)
   107fe:	6818      	ldr	r0, [r3, #0]
   10800:	4770      	bx	lr
   10802:	bf00      	nop
   10804:	20002354 	.word	0x20002354

00010808 <bt_mesh_model_find_group>:
{
   10808:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1080a:	4604      	mov	r4, r0
	struct find_group_visitor_ctx ctx = {
   1080c:	2300      	movs	r3, #0
		.mod = *mod,
   1080e:	6800      	ldr	r0, [r0, #0]
	struct find_group_visitor_ctx ctx = {
   10810:	f8ad 100c 	strh.w	r1, [sp, #12]
	bt_mesh_model_extensions_walk(*mod, find_group_mod_visitor, &ctx);
   10814:	aa01      	add	r2, sp, #4
   10816:	4905      	ldr	r1, [pc, #20]	; (1082c <bt_mesh_model_find_group+0x24>)
	struct find_group_visitor_ctx ctx = {
   10818:	9301      	str	r3, [sp, #4]
   1081a:	9002      	str	r0, [sp, #8]
	bt_mesh_model_extensions_walk(*mod, find_group_mod_visitor, &ctx);
   1081c:	f015 fe5c 	bl	264d8 <bt_mesh_model_extensions_walk>
	*mod = ctx.mod;
   10820:	9b02      	ldr	r3, [sp, #8]
}
   10822:	9801      	ldr	r0, [sp, #4]
	*mod = ctx.mod;
   10824:	6023      	str	r3, [r4, #0]
}
   10826:	b004      	add	sp, #16
   10828:	bd10      	pop	{r4, pc}
   1082a:	bf00      	nop
   1082c:	000263a9 	.word	0x000263a9

00010830 <bt_mesh_model_recv>:
{
   10830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (buf->data[0] >> 6) {
   10834:	680b      	ldr	r3, [r1, #0]
   10836:	4d63      	ldr	r5, [pc, #396]	; (109c4 <bt_mesh_model_recv+0x194>)
   10838:	781b      	ldrb	r3, [r3, #0]
{
   1083a:	460c      	mov	r4, r1
   1083c:	4962      	ldr	r1, [pc, #392]	; (109c8 <bt_mesh_model_recv+0x198>)
	switch (buf->data[0] >> 6) {
   1083e:	099a      	lsrs	r2, r3, #6
   10840:	1a6d      	subs	r5, r5, r1
   10842:	2a02      	cmp	r2, #2
{
   10844:	b085      	sub	sp, #20
   10846:	4680      	mov	r8, r0
   10848:	ea4f 05d5 	mov.w	r5, r5, lsr #3
	switch (buf->data[0] >> 6) {
   1084c:	d023      	beq.n	10896 <bt_mesh_model_recv+0x66>
   1084e:	2a03      	cmp	r2, #3
   10850:	d02d      	beq.n	108ae <bt_mesh_model_recv+0x7e>
		if (buf->data[0] == 0x7f) {
   10852:	2b7f      	cmp	r3, #127	; 0x7f
   10854:	d10e      	bne.n	10874 <bt_mesh_model_recv+0x44>
			BT_ERR("Ignoring RFU OpCode");
   10856:	01a9      	lsls	r1, r5, #6
   10858:	485c      	ldr	r0, [pc, #368]	; (109cc <bt_mesh_model_recv+0x19c>)
   1085a:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Too short payload for 2-octet OpCode");
   1085e:	f011 f944 	bl	21aea <log_0>
		BT_WARN("Unable to decode OpCode");
   10862:	01ad      	lsls	r5, r5, #6
   10864:	485a      	ldr	r0, [pc, #360]	; (109d0 <bt_mesh_model_recv+0x1a0>)
   10866:	f045 0102 	orr.w	r1, r5, #2
}
   1086a:	b005      	add	sp, #20
   1086c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		BT_WARN("Unable to decode OpCode");
   10870:	f011 b93b 	b.w	21aea <log_0>
		*opcode = net_buf_simple_pull_u8(buf);
   10874:	4620      	mov	r0, r4
   10876:	f017 fd67 	bl	28348 <net_buf_simple_pull_u8>
		*opcode = net_buf_simple_pull_be16(buf);
   1087a:	4607      	mov	r7, r0
			BT_ERR("Invalid message size for OpCode 0x%08x",
   1087c:	01ad      	lsls	r5, r5, #6
	for (i = 0; i < dev_comp->elem_count; i++) {
   1087e:	f04f 0a00 	mov.w	sl, #0
			BT_ERR("Invalid message size for OpCode 0x%08x",
   10882:	f045 0501 	orr.w	r5, r5, #1
	for (i = 0; i < dev_comp->elem_count; i++) {
   10886:	4b53      	ldr	r3, [pc, #332]	; (109d4 <bt_mesh_model_recv+0x1a4>)
   10888:	681b      	ldr	r3, [r3, #0]
   1088a:	689a      	ldr	r2, [r3, #8]
   1088c:	4552      	cmp	r2, sl
   1088e:	d820      	bhi.n	108d2 <bt_mesh_model_recv+0xa2>
}
   10890:	b005      	add	sp, #20
   10892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < 2) {
   10896:	88a3      	ldrh	r3, [r4, #4]
   10898:	2b01      	cmp	r3, #1
   1089a:	d804      	bhi.n	108a6 <bt_mesh_model_recv+0x76>
			BT_ERR("Too short payload for 2-octet OpCode");
   1089c:	01a9      	lsls	r1, r5, #6
   1089e:	484e      	ldr	r0, [pc, #312]	; (109d8 <bt_mesh_model_recv+0x1a8>)
   108a0:	f041 0101 	orr.w	r1, r1, #1
   108a4:	e7db      	b.n	1085e <bt_mesh_model_recv+0x2e>
		*opcode = net_buf_simple_pull_be16(buf);
   108a6:	4620      	mov	r0, r4
   108a8:	f017 fd5e 	bl	28368 <net_buf_simple_pull_be16>
   108ac:	e7e5      	b.n	1087a <bt_mesh_model_recv+0x4a>
		if (buf->len < 3) {
   108ae:	88a3      	ldrh	r3, [r4, #4]
   108b0:	2b02      	cmp	r3, #2
   108b2:	d804      	bhi.n	108be <bt_mesh_model_recv+0x8e>
			BT_ERR("Too short payload for 3-octet OpCode");
   108b4:	01a9      	lsls	r1, r5, #6
   108b6:	4849      	ldr	r0, [pc, #292]	; (109dc <bt_mesh_model_recv+0x1ac>)
   108b8:	f041 0101 	orr.w	r1, r1, #1
   108bc:	e7cf      	b.n	1085e <bt_mesh_model_recv+0x2e>
		*opcode = net_buf_simple_pull_u8(buf) << 16;
   108be:	4620      	mov	r0, r4
   108c0:	f017 fd42 	bl	28348 <net_buf_simple_pull_u8>
   108c4:	4607      	mov	r7, r0
		*opcode |= net_buf_simple_pull_le16(buf);
   108c6:	4620      	mov	r0, r4
   108c8:	f017 fd46 	bl	28358 <net_buf_simple_pull_le16>
   108cc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
		return 0;
   108d0:	e7d4      	b.n	1087c <bt_mesh_model_recv+0x4c>
		op = find_op(&dev_comp->elem[i], opcode, &model);
   108d2:	f8d3 900c 	ldr.w	r9, [r3, #12]
   108d6:	eb09 130a 	add.w	r3, r9, sl, lsl #4
		models = elem->vnd_models;
   108da:	e9d3 2602 	ldrd	r2, r6, [r3, #8]
	if (BT_MESH_MODEL_OP_LEN(opcode) < 3) {
   108de:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
		count = elem->model_count;
   108e2:	bf37      	itett	cc
   108e4:	791b      	ldrbcc	r3, [r3, #4]
		count = elem->vnd_model_count;
   108e6:	795b      	ldrbcs	r3, [r3, #5]
		models = elem->models;
   108e8:	4616      	movcc	r6, r2
	uint32_t cid = UINT32_MAX;
   108ea:	f04f 30ff 	movcc.w	r0, #4294967295	; 0xffffffff
		cid = (uint16_t)(opcode & 0xffff);
   108ee:	bf28      	it	cs
   108f0:	b2b8      	uxthcs	r0, r7
	for (i = 0U; i < count; i++) {
   108f2:	eb06 1243 	add.w	r2, r6, r3, lsl #5
   108f6:	42b2      	cmp	r2, r6
   108f8:	d102      	bne.n	10900 <bt_mesh_model_recv+0xd0>
	for (i = 0; i < dev_comp->elem_count; i++) {
   108fa:	f10a 0a01 	add.w	sl, sl, #1
   108fe:	e7c2      	b.n	10886 <bt_mesh_model_recv+0x56>
		if (IS_ENABLED(CONFIG_BT_MESH_MODEL_VND_MSG_CID_FORCE) &&
   10900:	1c41      	adds	r1, r0, #1
   10902:	d002      	beq.n	1090a <bt_mesh_model_recv+0xda>
		     cid != models[i].vnd.company) {
   10904:	8833      	ldrh	r3, [r6, #0]
		     cid != UINT32_MAX &&
   10906:	4298      	cmp	r0, r3
   10908:	d104      	bne.n	10914 <bt_mesh_model_recv+0xe4>
		for (op = (*model)->op; op->func; op++) {
   1090a:	f8d6 b014 	ldr.w	fp, [r6, #20]
   1090e:	f8db 1008 	ldr.w	r1, [fp, #8]
   10912:	b909      	cbnz	r1, 10918 <bt_mesh_model_recv+0xe8>
	for (i = 0U; i < count; i++) {
   10914:	3620      	adds	r6, #32
   10916:	e7ee      	b.n	108f6 <bt_mesh_model_recv+0xc6>
			if (op->opcode == opcode) {
   10918:	f8db 1000 	ldr.w	r1, [fp]
   1091c:	428f      	cmp	r7, r1
   1091e:	d02d      	beq.n	1097c <bt_mesh_model_recv+0x14c>
		for (op = (*model)->op; op->func; op++) {
   10920:	f10b 0b0c 	add.w	fp, fp, #12
   10924:	e7f3      	b.n	1090e <bt_mesh_model_recv+0xde>
	} else if (BT_MESH_ADDR_IS_GROUP(dst) || BT_MESH_ADDR_IS_VIRTUAL(dst)) {
   10926:	f481 4200 	eor.w	r2, r1, #32768	; 0x8000
   1092a:	f5b2 4ffe 	cmp.w	r2, #32512	; 0x7f00
   1092e:	d806      	bhi.n	1093e <bt_mesh_model_recv+0x10e>
		return !!bt_mesh_model_find_group(&mod, dst);
   10930:	a803      	add	r0, sp, #12
   10932:	f7ff ff69 	bl	10808 <bt_mesh_model_find_group>
   10936:	3800      	subs	r0, #0
   10938:	bf18      	it	ne
   1093a:	2001      	movne	r0, #1
   1093c:	e033      	b.n	109a6 <bt_mesh_model_recv+0x176>
	return mod->elem_idx == 0;
   1093e:	7930      	ldrb	r0, [r6, #4]
   10940:	fab0 f080 	clz	r0, r0
   10944:	0940      	lsrs	r0, r0, #5
   10946:	e02e      	b.n	109a6 <bt_mesh_model_recv+0x176>
		} else if ((op->len < 0) && (buf->len != (size_t)(-op->len))) {
   10948:	42d1      	cmn	r1, r2
   1094a:	d003      	beq.n	10954 <bt_mesh_model_recv+0x124>
			BT_ERR("Invalid message size for OpCode 0x%08x",
   1094c:	4824      	ldr	r0, [pc, #144]	; (109e0 <bt_mesh_model_recv+0x1b0>)
   1094e:	462a      	mov	r2, r5
   10950:	4639      	mov	r1, r7
   10952:	e034      	b.n	109be <bt_mesh_model_recv+0x18e>
	state->offset = net_buf_simple_headroom(buf);
   10954:	4620      	mov	r0, r4
   10956:	f017 fd28 	bl	283aa <net_buf_simple_headroom>
	state->len = buf->len;
   1095a:	88a3      	ldrh	r3, [r4, #4]
   1095c:	9301      	str	r3, [sp, #4]
	state->offset = net_buf_simple_headroom(buf);
   1095e:	4681      	mov	r9, r0
		(void)op->func(model, &rx->ctx, buf);
   10960:	f8db 3008 	ldr.w	r3, [fp, #8]
   10964:	4622      	mov	r2, r4
   10966:	f108 0104 	add.w	r1, r8, #4
   1096a:	4630      	mov	r0, r6
   1096c:	4798      	blx	r3
	buf->data = buf->__buf + state->offset;
   1096e:	68a0      	ldr	r0, [r4, #8]
	buf->len = state->len;
   10970:	9b01      	ldr	r3, [sp, #4]
   10972:	80a3      	strh	r3, [r4, #4]
	buf->data = buf->__buf + state->offset;
   10974:	fa10 f089 	uxtah	r0, r0, r9
   10978:	6020      	str	r0, [r4, #0]
	buf->len = state->len;
   1097a:	e7be      	b.n	108fa <bt_mesh_model_recv+0xca>
		if (!bt_mesh_model_has_key(model, rx->ctx.app_idx)) {
   1097c:	f8b8 1006 	ldrh.w	r1, [r8, #6]
   10980:	4630      	mov	r0, r6
   10982:	f015 fd64 	bl	2644e <bt_mesh_model_has_key>
   10986:	2800      	cmp	r0, #0
   10988:	d0b7      	beq.n	108fa <bt_mesh_model_recv+0xca>
	if (BT_MESH_ADDR_IS_UNICAST(dst)) {
   1098a:	f9b8 200a 	ldrsh.w	r2, [r8, #10]
		if (!model_has_dst(model, rx->ctx.recv_dst)) {
   1098e:	f8b8 100a 	ldrh.w	r1, [r8, #10]
   10992:	9603      	str	r6, [sp, #12]
	if (BT_MESH_ADDR_IS_UNICAST(dst)) {
   10994:	2a00      	cmp	r2, #0
   10996:	ddc6      	ble.n	10926 <bt_mesh_model_recv+0xf6>
		return (dev_comp->elem[mod->elem_idx].addr == dst);
   10998:	7932      	ldrb	r2, [r6, #4]
   1099a:	0112      	lsls	r2, r2, #4
   1099c:	f839 0002 	ldrh.w	r0, [r9, r2]
   109a0:	1a43      	subs	r3, r0, r1
   109a2:	4258      	negs	r0, r3
   109a4:	4158      	adcs	r0, r3
		if (!model_has_dst(model, rx->ctx.recv_dst)) {
   109a6:	2800      	cmp	r0, #0
   109a8:	d0a7      	beq.n	108fa <bt_mesh_model_recv+0xca>
		if ((op->len >= 0) && (buf->len < (size_t)op->len)) {
   109aa:	f8db 2004 	ldr.w	r2, [fp, #4]
   109ae:	88a1      	ldrh	r1, [r4, #4]
   109b0:	2a00      	cmp	r2, #0
   109b2:	dbc9      	blt.n	10948 <bt_mesh_model_recv+0x118>
   109b4:	428a      	cmp	r2, r1
   109b6:	d9cd      	bls.n	10954 <bt_mesh_model_recv+0x124>
			BT_ERR("Too short message for OpCode 0x%08x", opcode);
   109b8:	480a      	ldr	r0, [pc, #40]	; (109e4 <bt_mesh_model_recv+0x1b4>)
   109ba:	462a      	mov	r2, r5
   109bc:	4639      	mov	r1, r7
			BT_ERR("Invalid message size for OpCode 0x%08x",
   109be:	f011 f8a1 	bl	21b04 <log_1>
			continue;
   109c2:	e79a      	b.n	108fa <bt_mesh_model_recv+0xca>
   109c4:	00029980 	.word	0x00029980
   109c8:	00029870 	.word	0x00029870
   109cc:	0002d96a 	.word	0x0002d96a
   109d0:	0002d9c8 	.word	0x0002d9c8
   109d4:	20002354 	.word	0x20002354
   109d8:	0002d97e 	.word	0x0002d97e
   109dc:	0002d9a3 	.word	0x0002d9a3
   109e0:	0002da04 	.word	0x0002da04
   109e4:	0002d9e0 	.word	0x0002d9e0

000109e8 <bt_mesh_model_pending_store>:

void bt_mesh_model_pending_store(void)
{
	bt_mesh_model_foreach(store_pending_mod, NULL);
   109e8:	4801      	ldr	r0, [pc, #4]	; (109f0 <bt_mesh_model_pending_store+0x8>)
   109ea:	2100      	movs	r1, #0
   109ec:	f7ff bb00 	b.w	fff0 <bt_mesh_model_foreach>
   109f0:	0000fe3d 	.word	0x0000fe3d

000109f4 <bt_mesh_model_settings_commit>:
	}
}

void bt_mesh_model_settings_commit(void)
{
	bt_mesh_model_foreach(commit_mod, NULL);
   109f4:	4801      	ldr	r0, [pc, #4]	; (109fc <bt_mesh_model_settings_commit+0x8>)
   109f6:	2100      	movs	r1, #0
   109f8:	f7ff bafa 	b.w	fff0 <bt_mesh_model_foreach>
   109fc:	000263e3 	.word	0x000263e3

00010a00 <app_key_evt>:
	mod_unbind(mod, *app_idx, true);
}

static void app_key_evt(uint16_t app_idx, uint16_t net_idx,
			enum bt_mesh_key_evt evt)
{
   10a00:	b507      	push	{r0, r1, r2, lr}
	if (evt == BT_MESH_KEY_DELETED) {
   10a02:	2a01      	cmp	r2, #1
{
   10a04:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (evt == BT_MESH_KEY_DELETED) {
   10a08:	d104      	bne.n	10a14 <app_key_evt+0x14>
		bt_mesh_model_foreach(&mod_app_key_del, &app_idx);
   10a0a:	4804      	ldr	r0, [pc, #16]	; (10a1c <app_key_evt+0x1c>)
   10a0c:	f10d 0106 	add.w	r1, sp, #6
   10a10:	f7ff faee 	bl	fff0 <bt_mesh_model_foreach>
	}
}
   10a14:	b003      	add	sp, #12
   10a16:	f85d fb04 	ldr.w	pc, [sp], #4
   10a1a:	bf00      	nop
   10a1c:	00026899 	.word	0x00026899

00010a20 <send_krp_status>:
}

static int send_krp_status(struct bt_mesh_model *model,
			   struct bt_mesh_msg_ctx *ctx, uint16_t idx,
			   uint8_t phase, uint8_t status)
{
   10a20:	b5f0      	push	{r4, r5, r6, r7, lr}
   10a22:	b089      	sub	sp, #36	; 0x24
   10a24:	4604      	mov	r4, r0
   10a26:	460d      	mov	r5, r1
   10a28:	4617      	mov	r7, r2
   10a2a:	461e      	mov	r6, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_KRP_STATUS, 4);
   10a2c:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   10a30:	ab02      	add	r3, sp, #8

	bt_mesh_model_msg_init(&msg, OP_KRP_STATUS);
   10a32:	f248 0117 	movw	r1, #32791	; 0x8017
   10a36:	a805      	add	r0, sp, #20
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_KRP_STATUS, 4);
   10a38:	e9cd 2306 	strd	r2, r3, [sp, #24]
   10a3c:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_KRP_STATUS);
   10a3e:	f015 fd63 	bl	26508 <bt_mesh_model_msg_init>

	net_buf_simple_add_u8(&msg, status);
   10a42:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
   10a46:	a805      	add	r0, sp, #20
   10a48:	f017 fc0d 	bl	28266 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, idx);
   10a4c:	4639      	mov	r1, r7
   10a4e:	a805      	add	r0, sp, #20
   10a50:	f017 fc11 	bl	28276 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, phase);
   10a54:	4631      	mov	r1, r6
   10a56:	a805      	add	r0, sp, #20
   10a58:	f017 fc05 	bl	28266 <net_buf_simple_add_u8>

	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   10a5c:	2300      	movs	r3, #0
   10a5e:	9300      	str	r3, [sp, #0]
   10a60:	aa05      	add	r2, sp, #20
   10a62:	4629      	mov	r1, r5
   10a64:	4620      	mov	r0, r4
   10a66:	f7ff fe49 	bl	106fc <bt_mesh_model_send>
   10a6a:	b148      	cbz	r0, 10a80 <send_krp_status+0x60>
   10a6c:	4906      	ldr	r1, [pc, #24]	; (10a88 <send_krp_status+0x68>)
   10a6e:	4b07      	ldr	r3, [pc, #28]	; (10a8c <send_krp_status+0x6c>)
		BT_ERR("Unable to send Key Refresh State Status");
   10a70:	4807      	ldr	r0, [pc, #28]	; (10a90 <send_krp_status+0x70>)
   10a72:	1ac9      	subs	r1, r1, r3
   10a74:	08c9      	lsrs	r1, r1, #3
   10a76:	0189      	lsls	r1, r1, #6
   10a78:	f041 0101 	orr.w	r1, r1, #1
   10a7c:	f011 f835 	bl	21aea <log_0>
	}

	return 0;
}
   10a80:	2000      	movs	r0, #0
   10a82:	b009      	add	sp, #36	; 0x24
   10a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10a86:	bf00      	nop
   10a88:	000299b8 	.word	0x000299b8
   10a8c:	00029870 	.word	0x00029870
   10a90:	0002da5a 	.word	0x0002da5a

00010a94 <send_node_id_status>:
{
   10a94:	b5f0      	push	{r4, r5, r6, r7, lr}
   10a96:	b089      	sub	sp, #36	; 0x24
   10a98:	4604      	mov	r4, r0
   10a9a:	460d      	mov	r5, r1
   10a9c:	4617      	mov	r7, r2
   10a9e:	461e      	mov	r6, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_IDENTITY_STATUS, 4);
   10aa0:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   10aa4:	ab02      	add	r3, sp, #8
	bt_mesh_model_msg_init(&msg, OP_NODE_IDENTITY_STATUS);
   10aa6:	f248 0148 	movw	r1, #32840	; 0x8048
   10aaa:	a805      	add	r0, sp, #20
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_IDENTITY_STATUS, 4);
   10aac:	e9cd 2306 	strd	r2, r3, [sp, #24]
   10ab0:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NODE_IDENTITY_STATUS);
   10ab2:	f015 fd29 	bl	26508 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   10ab6:	4639      	mov	r1, r7
   10ab8:	a805      	add	r0, sp, #20
   10aba:	f017 fbd4 	bl	28266 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, net_idx);
   10abe:	4631      	mov	r1, r6
   10ac0:	a805      	add	r0, sp, #20
   10ac2:	f017 fbd8 	bl	28276 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, node_id);
   10ac6:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
   10aca:	a805      	add	r0, sp, #20
   10acc:	f017 fbcb 	bl	28266 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   10ad0:	2300      	movs	r3, #0
   10ad2:	9300      	str	r3, [sp, #0]
   10ad4:	aa05      	add	r2, sp, #20
   10ad6:	4629      	mov	r1, r5
   10ad8:	4620      	mov	r0, r4
   10ada:	f7ff fe0f 	bl	106fc <bt_mesh_model_send>
   10ade:	b148      	cbz	r0, 10af4 <send_node_id_status+0x60>
   10ae0:	4906      	ldr	r1, [pc, #24]	; (10afc <send_node_id_status+0x68>)
   10ae2:	4b07      	ldr	r3, [pc, #28]	; (10b00 <send_node_id_status+0x6c>)
		BT_ERR("Unable to send Node Identity Status");
   10ae4:	4807      	ldr	r0, [pc, #28]	; (10b04 <send_node_id_status+0x70>)
   10ae6:	1ac9      	subs	r1, r1, r3
   10ae8:	08c9      	lsrs	r1, r1, #3
   10aea:	0189      	lsls	r1, r1, #6
   10aec:	f041 0101 	orr.w	r1, r1, #1
   10af0:	f010 fffb 	bl	21aea <log_0>
}
   10af4:	2000      	movs	r0, #0
   10af6:	b009      	add	sp, #36	; 0x24
   10af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10afa:	bf00      	nop
   10afc:	000299b8 	.word	0x000299b8
   10b00:	00029870 	.word	0x00029870
   10b04:	0002da82 	.word	0x0002da82

00010b08 <send_net_key_status>:
{
   10b08:	b5f0      	push	{r4, r5, r6, r7, lr}
   10b0a:	b089      	sub	sp, #36	; 0x24
   10b0c:	4604      	mov	r4, r0
   10b0e:	460d      	mov	r5, r1
   10b10:	4616      	mov	r6, r2
   10b12:	461f      	mov	r7, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_KEY_STATUS, 3);
   10b14:	f44f 2210 	mov.w	r2, #589824	; 0x90000
   10b18:	ab02      	add	r3, sp, #8
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_STATUS);
   10b1a:	f248 0144 	movw	r1, #32836	; 0x8044
   10b1e:	a805      	add	r0, sp, #20
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_KEY_STATUS, 3);
   10b20:	e9cd 2306 	strd	r2, r3, [sp, #24]
   10b24:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_STATUS);
   10b26:	f015 fcef 	bl	26508 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   10b2a:	4639      	mov	r1, r7
   10b2c:	a805      	add	r0, sp, #20
   10b2e:	f017 fb9a 	bl	28266 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, idx);
   10b32:	4631      	mov	r1, r6
   10b34:	a805      	add	r0, sp, #20
   10b36:	f017 fb9e 	bl	28276 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   10b3a:	2300      	movs	r3, #0
   10b3c:	9300      	str	r3, [sp, #0]
   10b3e:	aa05      	add	r2, sp, #20
   10b40:	4629      	mov	r1, r5
   10b42:	4620      	mov	r0, r4
   10b44:	f7ff fdda 	bl	106fc <bt_mesh_model_send>
   10b48:	b148      	cbz	r0, 10b5e <send_net_key_status+0x56>
   10b4a:	4906      	ldr	r1, [pc, #24]	; (10b64 <send_net_key_status+0x5c>)
   10b4c:	4b06      	ldr	r3, [pc, #24]	; (10b68 <send_net_key_status+0x60>)
		BT_ERR("Unable to send NetKey Status");
   10b4e:	4807      	ldr	r0, [pc, #28]	; (10b6c <send_net_key_status+0x64>)
   10b50:	1ac9      	subs	r1, r1, r3
   10b52:	08c9      	lsrs	r1, r1, #3
   10b54:	0189      	lsls	r1, r1, #6
   10b56:	f041 0101 	orr.w	r1, r1, #1
   10b5a:	f010 ffc6 	bl	21aea <log_0>
}
   10b5e:	2000      	movs	r0, #0
   10b60:	b009      	add	sp, #36	; 0x24
   10b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10b64:	000299b8 	.word	0x000299b8
   10b68:	00029870 	.word	0x00029870
   10b6c:	0002daa6 	.word	0x0002daa6

00010b70 <mod_sub_list_clear>:
{
   10b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10b74:	4b16      	ldr	r3, [pc, #88]	; (10bd0 <mod_sub_list_clear+0x60>)
   10b76:	4c17      	ldr	r4, [pc, #92]	; (10bd4 <mod_sub_list_clear+0x64>)
			BT_ERR("Label UUID not found");
   10b78:	f8df 805c 	ldr.w	r8, [pc, #92]	; 10bd8 <mod_sub_list_clear+0x68>
   10b7c:	1ae4      	subs	r4, r4, r3
   10b7e:	08e4      	lsrs	r4, r4, #3
   10b80:	01a4      	lsls	r4, r4, #6
   10b82:	f100 0610 	add.w	r6, r0, #16
   10b86:	f100 0714 	add.w	r7, r0, #20
	for (i = 0, clear_count = 0; i < ARRAY_SIZE(mod->groups); i++) {
   10b8a:	2500      	movs	r5, #0
			BT_ERR("Label UUID not found");
   10b8c:	f044 0401 	orr.w	r4, r4, #1
		if (!BT_MESH_ADDR_IS_VIRTUAL(mod->groups[i])) {
   10b90:	f836 0b02 	ldrh.w	r0, [r6], #2
   10b94:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
   10b98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   10b9c:	d309      	bcc.n	10bb2 <mod_sub_list_clear+0x42>
			if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
   10b9e:	b118      	cbz	r0, 10ba8 <mod_sub_list_clear+0x38>
				mod->groups[i] = BT_MESH_ADDR_UNASSIGNED;
   10ba0:	2300      	movs	r3, #0
   10ba2:	f826 3c02 	strh.w	r3, [r6, #-2]
				clear_count++;
   10ba6:	3501      	adds	r5, #1
	for (i = 0, clear_count = 0; i < ARRAY_SIZE(mod->groups); i++) {
   10ba8:	42b7      	cmp	r7, r6
   10baa:	d1f1      	bne.n	10b90 <mod_sub_list_clear+0x20>
}
   10bac:	4628      	mov	r0, r5
   10bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		label_uuid = bt_mesh_va_label_get(mod->groups[i]);
   10bb2:	f7fd fded 	bl	e790 <bt_mesh_va_label_get>
		mod->groups[i] = BT_MESH_ADDR_UNASSIGNED;
   10bb6:	2100      	movs	r1, #0
   10bb8:	f826 1c02 	strh.w	r1, [r6, #-2]
		clear_count++;
   10bbc:	3501      	adds	r5, #1
		if (label_uuid) {
   10bbe:	b110      	cbz	r0, 10bc6 <mod_sub_list_clear+0x56>
			bt_mesh_va_del(label_uuid, NULL);
   10bc0:	f7fd fdaa 	bl	e718 <bt_mesh_va_del>
   10bc4:	e7f0      	b.n	10ba8 <mod_sub_list_clear+0x38>
			BT_ERR("Label UUID not found");
   10bc6:	4621      	mov	r1, r4
   10bc8:	4640      	mov	r0, r8
   10bca:	f010 ff8e 	bl	21aea <log_0>
   10bce:	e7eb      	b.n	10ba8 <mod_sub_list_clear+0x38>
   10bd0:	00029870 	.word	0x00029870
   10bd4:	000299b8 	.word	0x000299b8
   10bd8:	0002dac3 	.word	0x0002dac3

00010bdc <send_app_key_status>:
{
   10bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
   10bde:	b089      	sub	sp, #36	; 0x24
   10be0:	4604      	mov	r4, r0
   10be2:	460d      	mov	r5, r1
   10be4:	4617      	mov	r7, r2
   10be6:	461e      	mov	r6, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_STATUS, 4);
   10be8:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   10bec:	ab02      	add	r3, sp, #8
	bt_mesh_model_msg_init(&msg, OP_APP_KEY_STATUS);
   10bee:	f248 0103 	movw	r1, #32771	; 0x8003
   10bf2:	a805      	add	r0, sp, #20
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_STATUS, 4);
   10bf4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   10bf8:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_APP_KEY_STATUS);
   10bfa:	f015 fc85 	bl	26508 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   10bfe:	4639      	mov	r1, r7
   10c00:	a805      	add	r0, sp, #20
   10c02:	f017 fb30 	bl	28266 <net_buf_simple_add_u8>
	key_idx_pack(&msg, net_idx, app_idx);
   10c06:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
   10c0a:	4632      	mov	r2, r6
   10c0c:	a805      	add	r0, sp, #20
   10c0e:	f015 fcb6 	bl	2657e <key_idx_pack>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   10c12:	2300      	movs	r3, #0
   10c14:	9300      	str	r3, [sp, #0]
   10c16:	aa05      	add	r2, sp, #20
   10c18:	4629      	mov	r1, r5
   10c1a:	4620      	mov	r0, r4
   10c1c:	f7ff fd6e 	bl	106fc <bt_mesh_model_send>
   10c20:	b148      	cbz	r0, 10c36 <send_app_key_status+0x5a>
   10c22:	4906      	ldr	r1, [pc, #24]	; (10c3c <send_app_key_status+0x60>)
   10c24:	4b06      	ldr	r3, [pc, #24]	; (10c40 <send_app_key_status+0x64>)
		BT_ERR("Unable to send App Key Status response");
   10c26:	4807      	ldr	r0, [pc, #28]	; (10c44 <send_app_key_status+0x68>)
   10c28:	1ac9      	subs	r1, r1, r3
   10c2a:	08c9      	lsrs	r1, r1, #3
   10c2c:	0189      	lsls	r1, r1, #6
   10c2e:	f041 0101 	orr.w	r1, r1, #1
   10c32:	f010 ff5a 	bl	21aea <log_0>
}
   10c36:	2000      	movs	r0, #0
   10c38:	b009      	add	sp, #36	; 0x24
   10c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10c3c:	000299b8 	.word	0x000299b8
   10c40:	00029870 	.word	0x00029870
   10c44:	0002dad8 	.word	0x0002dad8

00010c48 <krp_set>:
	return send_krp_status(model, ctx, idx, kr_phase, status);
}

static int krp_set(struct bt_mesh_model *model, struct bt_mesh_msg_ctx *ctx,
		   struct net_buf_simple *buf)
{
   10c48:	b5f0      	push	{r4, r5, r6, r7, lr}
   10c4a:	4606      	mov	r6, r0
   10c4c:	b085      	sub	sp, #20
	uint8_t phase, status;
	uint16_t idx;

	idx = net_buf_simple_pull_le16(buf);
   10c4e:	4610      	mov	r0, r2
{
   10c50:	4615      	mov	r5, r2
   10c52:	460f      	mov	r7, r1
	idx = net_buf_simple_pull_le16(buf);
   10c54:	f017 fb80 	bl	28358 <net_buf_simple_pull_le16>
   10c58:	4604      	mov	r4, r0
	phase = net_buf_simple_pull_u8(buf);
   10c5a:	4628      	mov	r0, r5
   10c5c:	f017 fb74 	bl	28348 <net_buf_simple_pull_u8>

	if (idx > 0xfff) {
   10c60:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
	phase = net_buf_simple_pull_u8(buf);
   10c64:	f88d 000f 	strb.w	r0, [sp, #15]
	if (idx > 0xfff) {
   10c68:	d30e      	bcc.n	10c88 <krp_set+0x40>
   10c6a:	4a14      	ldr	r2, [pc, #80]	; (10cbc <krp_set+0x74>)
   10c6c:	4b14      	ldr	r3, [pc, #80]	; (10cc0 <krp_set+0x78>)
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   10c6e:	4815      	ldr	r0, [pc, #84]	; (10cc4 <krp_set+0x7c>)
   10c70:	1ad2      	subs	r2, r2, r3
   10c72:	08d2      	lsrs	r2, r2, #3
   10c74:	0192      	lsls	r2, r2, #6
   10c76:	f042 0201 	orr.w	r2, r2, #1
   10c7a:	4621      	mov	r1, r4
		return -EINVAL;
	}

	status = bt_mesh_subnet_kr_phase_set(idx, &phase);
	if (status == STATUS_CANNOT_UPDATE) {
		BT_ERR("Invalid kr phase transition 0x%02x", phase);
   10c7c:	f010 ff42 	bl	21b04 <log_1>
		return -EINVAL;
   10c80:	f06f 0015 	mvn.w	r0, #21
	}

	return send_krp_status(model, ctx, idx, phase, status);
}
   10c84:	b005      	add	sp, #20
   10c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = bt_mesh_subnet_kr_phase_set(idx, &phase);
   10c88:	f10d 010f 	add.w	r1, sp, #15
   10c8c:	4620      	mov	r0, r4
   10c8e:	f7fc fbbf 	bl	d410 <bt_mesh_subnet_kr_phase_set>
	if (status == STATUS_CANNOT_UPDATE) {
   10c92:	280b      	cmp	r0, #11
   10c94:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10c98:	d109      	bne.n	10cae <krp_set+0x66>
   10c9a:	4909      	ldr	r1, [pc, #36]	; (10cc0 <krp_set+0x78>)
   10c9c:	4a07      	ldr	r2, [pc, #28]	; (10cbc <krp_set+0x74>)
		BT_ERR("Invalid kr phase transition 0x%02x", phase);
   10c9e:	480a      	ldr	r0, [pc, #40]	; (10cc8 <krp_set+0x80>)
   10ca0:	1a52      	subs	r2, r2, r1
   10ca2:	08d2      	lsrs	r2, r2, #3
   10ca4:	0192      	lsls	r2, r2, #6
   10ca6:	f042 0201 	orr.w	r2, r2, #1
   10caa:	4619      	mov	r1, r3
   10cac:	e7e6      	b.n	10c7c <krp_set+0x34>
	return send_krp_status(model, ctx, idx, phase, status);
   10cae:	9000      	str	r0, [sp, #0]
   10cb0:	4622      	mov	r2, r4
   10cb2:	4639      	mov	r1, r7
   10cb4:	4630      	mov	r0, r6
   10cb6:	f7ff feb3 	bl	10a20 <send_krp_status>
   10cba:	e7e3      	b.n	10c84 <krp_set+0x3c>
   10cbc:	000299b8 	.word	0x000299b8
   10cc0:	00029870 	.word	0x00029870
   10cc4:	0002daff 	.word	0x0002daff
   10cc8:	0002db1a 	.word	0x0002db1a

00010ccc <krp_get>:
{
   10ccc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   10cce:	4605      	mov	r5, r0
	idx = net_buf_simple_pull_le16(buf);
   10cd0:	4610      	mov	r0, r2
{
   10cd2:	460e      	mov	r6, r1
	idx = net_buf_simple_pull_le16(buf);
   10cd4:	f017 fb40 	bl	28358 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   10cd8:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   10cdc:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   10cde:	d30e      	bcc.n	10cfe <krp_get+0x32>
   10ce0:	4b0d      	ldr	r3, [pc, #52]	; (10d18 <krp_get+0x4c>)
   10ce2:	4a0e      	ldr	r2, [pc, #56]	; (10d1c <krp_get+0x50>)
   10ce4:	1ad2      	subs	r2, r2, r3
   10ce6:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   10ce8:	0192      	lsls	r2, r2, #6
   10cea:	4601      	mov	r1, r0
   10cec:	f042 0201 	orr.w	r2, r2, #1
   10cf0:	480b      	ldr	r0, [pc, #44]	; (10d20 <krp_get+0x54>)
   10cf2:	f010 ff07 	bl	21b04 <log_1>
		return -EINVAL;
   10cf6:	f06f 0015 	mvn.w	r0, #21
}
   10cfa:	b004      	add	sp, #16
   10cfc:	bd70      	pop	{r4, r5, r6, pc}
	status = bt_mesh_subnet_kr_phase_get(idx, &kr_phase);
   10cfe:	f10d 010f 	add.w	r1, sp, #15
   10d02:	f014 ff23 	bl	25b4c <bt_mesh_subnet_kr_phase_get>
	return send_krp_status(model, ctx, idx, kr_phase, status);
   10d06:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10d0a:	9000      	str	r0, [sp, #0]
   10d0c:	4622      	mov	r2, r4
   10d0e:	4631      	mov	r1, r6
   10d10:	4628      	mov	r0, r5
   10d12:	f7ff fe85 	bl	10a20 <send_krp_status>
   10d16:	e7f0      	b.n	10cfa <krp_get+0x2e>
   10d18:	00029870 	.word	0x00029870
   10d1c:	000299b8 	.word	0x000299b8
   10d20:	0002daff 	.word	0x0002daff

00010d24 <lpn_timeout_get>:
{
   10d24:	b570      	push	{r4, r5, r6, lr}
   10d26:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_LPN_TIMEOUT_STATUS, 5);
   10d28:	ab02      	add	r3, sp, #8
{
   10d2a:	4605      	mov	r5, r0
   10d2c:	460e      	mov	r6, r1
	lpn_addr = net_buf_simple_pull_le16(buf);
   10d2e:	4610      	mov	r0, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_LPN_TIMEOUT_STATUS, 5);
   10d30:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
   10d34:	e9cd 1306 	strd	r1, r3, [sp, #24]
   10d38:	9305      	str	r3, [sp, #20]
	lpn_addr = net_buf_simple_pull_le16(buf);
   10d3a:	f017 fb0d 	bl	28358 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(lpn_addr)) {
   10d3e:	b203      	sxth	r3, r0
   10d40:	2b00      	cmp	r3, #0
	lpn_addr = net_buf_simple_pull_le16(buf);
   10d42:	4604      	mov	r4, r0
	if (!BT_MESH_ADDR_IS_UNICAST(lpn_addr)) {
   10d44:	dc0d      	bgt.n	10d62 <lpn_timeout_get+0x3e>
   10d46:	4b18      	ldr	r3, [pc, #96]	; (10da8 <lpn_timeout_get+0x84>)
   10d48:	4918      	ldr	r1, [pc, #96]	; (10dac <lpn_timeout_get+0x88>)
		BT_WARN("Invalid LPNAddress; ignoring msg");
   10d4a:	4819      	ldr	r0, [pc, #100]	; (10db0 <lpn_timeout_get+0x8c>)
   10d4c:	1ac9      	subs	r1, r1, r3
   10d4e:	08c9      	lsrs	r1, r1, #3
   10d50:	0189      	lsls	r1, r1, #6
   10d52:	f041 0102 	orr.w	r1, r1, #2
   10d56:	f010 fec8 	bl	21aea <log_0>
		return -EINVAL;
   10d5a:	f06f 0015 	mvn.w	r0, #21
}
   10d5e:	b008      	add	sp, #32
   10d60:	bd70      	pop	{r4, r5, r6, pc}
	bt_mesh_model_msg_init(&msg, OP_LPN_TIMEOUT_STATUS);
   10d62:	f248 012e 	movw	r1, #32814	; 0x802e
   10d66:	a805      	add	r0, sp, #20
   10d68:	f015 fbce 	bl	26508 <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(&msg, lpn_addr);
   10d6c:	4621      	mov	r1, r4
   10d6e:	a805      	add	r0, sp, #20
   10d70:	f017 fa81 	bl	28276 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   10d74:	2400      	movs	r4, #0
	net_buf_simple_add_le24(&msg, timeout_steps);
   10d76:	2100      	movs	r1, #0
   10d78:	a805      	add	r0, sp, #20
   10d7a:	f017 fa90 	bl	2829e <net_buf_simple_add_le24>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   10d7e:	9400      	str	r4, [sp, #0]
   10d80:	4623      	mov	r3, r4
   10d82:	aa05      	add	r2, sp, #20
   10d84:	4631      	mov	r1, r6
   10d86:	4628      	mov	r0, r5
   10d88:	f7ff fcb8 	bl	106fc <bt_mesh_model_send>
   10d8c:	2800      	cmp	r0, #0
   10d8e:	d0e6      	beq.n	10d5e <lpn_timeout_get+0x3a>
   10d90:	4b05      	ldr	r3, [pc, #20]	; (10da8 <lpn_timeout_get+0x84>)
   10d92:	4906      	ldr	r1, [pc, #24]	; (10dac <lpn_timeout_get+0x88>)
		BT_ERR("Unable to send LPN PollTimeout Status");
   10d94:	4807      	ldr	r0, [pc, #28]	; (10db4 <lpn_timeout_get+0x90>)
   10d96:	1ac9      	subs	r1, r1, r3
   10d98:	08c9      	lsrs	r1, r1, #3
   10d9a:	0189      	lsls	r1, r1, #6
   10d9c:	f041 0101 	orr.w	r1, r1, #1
   10da0:	f010 fea3 	bl	21aea <log_0>
	return 0;
   10da4:	4620      	mov	r0, r4
   10da6:	e7da      	b.n	10d5e <lpn_timeout_get+0x3a>
   10da8:	00029870 	.word	0x00029870
   10dac:	000299b8 	.word	0x000299b8
   10db0:	0002db3d 	.word	0x0002db3d
   10db4:	0002db5e 	.word	0x0002db5e

00010db8 <send_mod_sub_status>:
{
   10db8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10dbc:	b08b      	sub	sp, #44	; 0x2c
   10dbe:	4617      	mov	r7, r2
   10dc0:	461e      	mov	r6, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_SUB_STATUS, 9);
   10dc2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   10dc6:	ab06      	add	r3, sp, #24
{
   10dc8:	4604      	mov	r4, r0
   10dca:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_STATUS);
   10dcc:	a803      	add	r0, sp, #12
   10dce:	f248 011f 	movw	r1, #32799	; 0x801f
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_SUB_STATUS, 9);
   10dd2:	e9cd 2304 	strd	r2, r3, [sp, #16]
   10dd6:	9303      	str	r3, [sp, #12]
{
   10dd8:	f89d 9050 	ldrb.w	r9, [sp, #80]	; 0x50
   10ddc:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_STATUS);
   10de0:	f015 fb92 	bl	26508 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   10de4:	4639      	mov	r1, r7
   10de6:	a803      	add	r0, sp, #12
   10de8:	f017 fa3d 	bl	28266 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, elem_addr);
   10dec:	4631      	mov	r1, r6
   10dee:	a803      	add	r0, sp, #12
   10df0:	f017 fa41 	bl	28276 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, sub_addr);
   10df4:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   10df8:	a803      	add	r0, sp, #12
   10dfa:	f017 fa3c 	bl	28276 <net_buf_simple_add_le16>
	if (vnd) {
   10dfe:	f1b9 0f00 	cmp.w	r9, #0
   10e02:	d01d      	beq.n	10e40 <send_mod_sub_status+0x88>
		memcpy(net_buf_simple_add(&msg, 4), mod_id, 4);
   10e04:	2104      	movs	r1, #4
   10e06:	a803      	add	r0, sp, #12
   10e08:	f017 fa1e 	bl	28248 <net_buf_simple_add>
   10e0c:	2204      	movs	r2, #4
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
   10e0e:	4641      	mov	r1, r8
   10e10:	f012 ffca 	bl	23da8 <memcpy>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   10e14:	2300      	movs	r3, #0
   10e16:	9300      	str	r3, [sp, #0]
   10e18:	aa03      	add	r2, sp, #12
   10e1a:	4629      	mov	r1, r5
   10e1c:	4620      	mov	r0, r4
   10e1e:	f7ff fc6d 	bl	106fc <bt_mesh_model_send>
   10e22:	b148      	cbz	r0, 10e38 <send_mod_sub_status+0x80>
   10e24:	4909      	ldr	r1, [pc, #36]	; (10e4c <send_mod_sub_status+0x94>)
   10e26:	4b0a      	ldr	r3, [pc, #40]	; (10e50 <send_mod_sub_status+0x98>)
		BT_ERR("Unable to send Model Subscription Status");
   10e28:	480a      	ldr	r0, [pc, #40]	; (10e54 <send_mod_sub_status+0x9c>)
   10e2a:	1ac9      	subs	r1, r1, r3
   10e2c:	08c9      	lsrs	r1, r1, #3
   10e2e:	0189      	lsls	r1, r1, #6
   10e30:	f041 0101 	orr.w	r1, r1, #1
   10e34:	f010 fe59 	bl	21aea <log_0>
}
   10e38:	2000      	movs	r0, #0
   10e3a:	b00b      	add	sp, #44	; 0x2c
   10e3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
   10e40:	2102      	movs	r1, #2
   10e42:	a803      	add	r0, sp, #12
   10e44:	f017 fa00 	bl	28248 <net_buf_simple_add>
   10e48:	2202      	movs	r2, #2
   10e4a:	e7e0      	b.n	10e0e <send_mod_sub_status+0x56>
   10e4c:	000299b8 	.word	0x000299b8
   10e50:	00029870 	.word	0x00029870
   10e54:	0002db84 	.word	0x0002db84

00010e58 <node_identity_set>:
{
   10e58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10e5a:	4606      	mov	r6, r0
	idx = net_buf_simple_pull_le16(buf);
   10e5c:	4610      	mov	r0, r2
{
   10e5e:	460f      	mov	r7, r1
   10e60:	4615      	mov	r5, r2
	idx = net_buf_simple_pull_le16(buf);
   10e62:	f017 fa79 	bl	28358 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   10e66:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   10e6a:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   10e6c:	d30e      	bcc.n	10e8c <node_identity_set+0x34>
   10e6e:	4a1b      	ldr	r2, [pc, #108]	; (10edc <node_identity_set+0x84>)
   10e70:	4b1b      	ldr	r3, [pc, #108]	; (10ee0 <node_identity_set+0x88>)
   10e72:	1ad2      	subs	r2, r2, r3
   10e74:	08d2      	lsrs	r2, r2, #3
		BT_WARN("Invalid NetKeyIndex 0x%04x", idx);
   10e76:	0192      	lsls	r2, r2, #6
   10e78:	4601      	mov	r1, r0
   10e7a:	481a      	ldr	r0, [pc, #104]	; (10ee4 <node_identity_set+0x8c>)
   10e7c:	f042 0202 	orr.w	r2, r2, #2
		BT_WARN("Invalid Node ID value 0x%02x", node_id);
   10e80:	f010 fe40 	bl	21b04 <log_1>
		return -EINVAL;
   10e84:	f06f 0015 	mvn.w	r0, #21
}
   10e88:	b003      	add	sp, #12
   10e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	node_id = net_buf_simple_pull_u8(buf);
   10e8c:	4628      	mov	r0, r5
   10e8e:	f017 fa5b 	bl	28348 <net_buf_simple_pull_u8>
	if (node_id != 0x00 && node_id != 0x01) {
   10e92:	2801      	cmp	r0, #1
	node_id = net_buf_simple_pull_u8(buf);
   10e94:	4605      	mov	r5, r0
	if (node_id != 0x00 && node_id != 0x01) {
   10e96:	d909      	bls.n	10eac <node_identity_set+0x54>
   10e98:	4a10      	ldr	r2, [pc, #64]	; (10edc <node_identity_set+0x84>)
   10e9a:	4b11      	ldr	r3, [pc, #68]	; (10ee0 <node_identity_set+0x88>)
   10e9c:	1ad2      	subs	r2, r2, r3
   10e9e:	08d2      	lsrs	r2, r2, #3
		BT_WARN("Invalid Node ID value 0x%02x", node_id);
   10ea0:	0192      	lsls	r2, r2, #6
   10ea2:	4601      	mov	r1, r0
   10ea4:	f042 0202 	orr.w	r2, r2, #2
   10ea8:	480f      	ldr	r0, [pc, #60]	; (10ee8 <node_identity_set+0x90>)
   10eaa:	e7e9      	b.n	10e80 <node_identity_set+0x28>
	status = bt_mesh_subnet_node_id_set(idx, node_id);
   10eac:	4601      	mov	r1, r0
   10eae:	4620      	mov	r0, r4
   10eb0:	f014 fe57 	bl	25b62 <bt_mesh_subnet_node_id_set>
	if (status == STATUS_INVALID_NETKEY) {
   10eb4:	2804      	cmp	r0, #4
	status = bt_mesh_subnet_node_id_set(idx, node_id);
   10eb6:	4602      	mov	r2, r0
	if (status == STATUS_INVALID_NETKEY) {
   10eb8:	d103      	bne.n	10ec2 <node_identity_set+0x6a>
		return send_node_id_status(model, ctx, status, idx,
   10eba:	2300      	movs	r3, #0
   10ebc:	9300      	str	r3, [sp, #0]
	return send_node_id_status(model, ctx, status, idx, node_id);
   10ebe:	4623      	mov	r3, r4
   10ec0:	e005      	b.n	10ece <node_identity_set+0x76>
	if (status == STATUS_FEAT_NOT_SUPP) {
   10ec2:	280a      	cmp	r0, #10
   10ec4:	d108      	bne.n	10ed8 <node_identity_set+0x80>
		return send_node_id_status(model, ctx, STATUS_SUCCESS, idx,
   10ec6:	2302      	movs	r3, #2
   10ec8:	9300      	str	r3, [sp, #0]
   10eca:	2200      	movs	r2, #0
   10ecc:	4623      	mov	r3, r4
	return send_node_id_status(model, ctx, status, idx, node_id);
   10ece:	4639      	mov	r1, r7
   10ed0:	4630      	mov	r0, r6
   10ed2:	f7ff fddf 	bl	10a94 <send_node_id_status>
   10ed6:	e7d7      	b.n	10e88 <node_identity_set+0x30>
   10ed8:	9500      	str	r5, [sp, #0]
   10eda:	e7f0      	b.n	10ebe <node_identity_set+0x66>
   10edc:	000299b8 	.word	0x000299b8
   10ee0:	00029870 	.word	0x00029870
   10ee4:	0002daff 	.word	0x0002daff
   10ee8:	0002dbad 	.word	0x0002dbad

00010eec <node_identity_get>:
{
   10eec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   10eee:	4605      	mov	r5, r0
	idx = net_buf_simple_pull_le16(buf);
   10ef0:	4610      	mov	r0, r2
{
   10ef2:	460e      	mov	r6, r1
	idx = net_buf_simple_pull_le16(buf);
   10ef4:	f017 fa30 	bl	28358 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   10ef8:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   10efc:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   10efe:	d30e      	bcc.n	10f1e <node_identity_get+0x32>
   10f00:	4b0e      	ldr	r3, [pc, #56]	; (10f3c <node_identity_get+0x50>)
   10f02:	4a0f      	ldr	r2, [pc, #60]	; (10f40 <node_identity_get+0x54>)
   10f04:	1ad2      	subs	r2, r2, r3
   10f06:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   10f08:	0192      	lsls	r2, r2, #6
   10f0a:	4601      	mov	r1, r0
   10f0c:	f042 0201 	orr.w	r2, r2, #1
   10f10:	480c      	ldr	r0, [pc, #48]	; (10f44 <node_identity_get+0x58>)
   10f12:	f010 fdf7 	bl	21b04 <log_1>
		return -EINVAL;
   10f16:	f06f 0015 	mvn.w	r0, #21
}
   10f1a:	b004      	add	sp, #16
   10f1c:	bd70      	pop	{r4, r5, r6, pc}
	status = bt_mesh_subnet_node_id_get(idx, &node_id);
   10f1e:	f10d 010f 	add.w	r1, sp, #15
   10f22:	f014 fe32 	bl	25b8a <bt_mesh_subnet_node_id_get>
	return send_node_id_status(model, ctx, status, idx, node_id);
   10f26:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10f2a:	9300      	str	r3, [sp, #0]
	status = bt_mesh_subnet_node_id_get(idx, &node_id);
   10f2c:	4602      	mov	r2, r0
	return send_node_id_status(model, ctx, status, idx, node_id);
   10f2e:	4623      	mov	r3, r4
   10f30:	4631      	mov	r1, r6
   10f32:	4628      	mov	r0, r5
   10f34:	f7ff fdae 	bl	10a94 <send_node_id_status>
   10f38:	e7ef      	b.n	10f1a <node_identity_get+0x2e>
   10f3a:	bf00      	nop
   10f3c:	00029870 	.word	0x00029870
   10f40:	000299b8 	.word	0x000299b8
   10f44:	0002daff 	.word	0x0002daff

00010f48 <net_key_get>:
{
   10f48:	b5f0      	push	{r4, r5, r6, r7, lr}
   10f4a:	b08b      	sub	sp, #44	; 0x2c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_KEY_LIST,
   10f4c:	ab04      	add	r3, sp, #16
   10f4e:	f44f 2210 	mov.w	r2, #589824	; 0x90000
{
   10f52:	4605      	mov	r5, r0
   10f54:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_LIST);
   10f56:	a807      	add	r0, sp, #28
   10f58:	f248 0143 	movw	r1, #32835	; 0x8043
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_KEY_LIST,
   10f5c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   10f60:	9307      	str	r3, [sp, #28]
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_LIST);
   10f62:	f015 fad1 	bl	26508 <bt_mesh_model_msg_init>
	count = bt_mesh_subnets_get(net_idx, ARRAY_SIZE(net_idx), 0);
   10f66:	2200      	movs	r2, #0
   10f68:	2102      	movs	r1, #2
   10f6a:	a803      	add	r0, sp, #12
   10f6c:	f7fc f992 	bl	d294 <bt_mesh_subnets_get>
		count = ARRAY_SIZE(net_idx);
   10f70:	2803      	cmp	r0, #3
	count = bt_mesh_subnets_get(net_idx, ARRAY_SIZE(net_idx), 0);
   10f72:	4604      	mov	r4, r0
		count = ARRAY_SIZE(net_idx);
   10f74:	bf28      	it	cs
   10f76:	2402      	movcs	r4, #2
	for (i = 0; i < count - 1; i += 2) {
   10f78:	2300      	movs	r3, #0
   10f7a:	1e67      	subs	r7, r4, #1
   10f7c:	429f      	cmp	r7, r3
   10f7e:	dc1e      	bgt.n	10fbe <net_key_get+0x76>
	if (i < count) {
   10f80:	429c      	cmp	r4, r3
   10f82:	dd07      	ble.n	10f94 <net_key_get+0x4c>
		net_buf_simple_add_le16(&msg, net_idx[i]);
   10f84:	aa0a      	add	r2, sp, #40	; 0x28
   10f86:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   10f8a:	a807      	add	r0, sp, #28
   10f8c:	f833 1c1c 	ldrh.w	r1, [r3, #-28]
   10f90:	f017 f971 	bl	28276 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   10f94:	2300      	movs	r3, #0
   10f96:	9300      	str	r3, [sp, #0]
   10f98:	aa07      	add	r2, sp, #28
   10f9a:	4631      	mov	r1, r6
   10f9c:	4628      	mov	r0, r5
   10f9e:	f7ff fbad 	bl	106fc <bt_mesh_model_send>
   10fa2:	b148      	cbz	r0, 10fb8 <net_key_get+0x70>
   10fa4:	490a      	ldr	r1, [pc, #40]	; (10fd0 <net_key_get+0x88>)
   10fa6:	4b0b      	ldr	r3, [pc, #44]	; (10fd4 <net_key_get+0x8c>)
		BT_ERR("Unable to send NetKey List");
   10fa8:	480b      	ldr	r0, [pc, #44]	; (10fd8 <net_key_get+0x90>)
   10faa:	1ac9      	subs	r1, r1, r3
   10fac:	08c9      	lsrs	r1, r1, #3
   10fae:	0189      	lsls	r1, r1, #6
   10fb0:	f041 0101 	orr.w	r1, r1, #1
   10fb4:	f010 fd99 	bl	21aea <log_0>
}
   10fb8:	2000      	movs	r0, #0
   10fba:	b00b      	add	sp, #44	; 0x2c
   10fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		key_idx_pack(&msg, net_idx[i], net_idx[i + 1]);
   10fbe:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   10fc2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   10fc6:	a807      	add	r0, sp, #28
   10fc8:	f015 fad9 	bl	2657e <key_idx_pack>
	for (i = 0; i < count - 1; i += 2) {
   10fcc:	2302      	movs	r3, #2
   10fce:	e7d5      	b.n	10f7c <net_key_get+0x34>
   10fd0:	000299b8 	.word	0x000299b8
   10fd4:	00029870 	.word	0x00029870
   10fd8:	0002dbca 	.word	0x0002dbca

00010fdc <net_key_del>:
{
   10fdc:	b570      	push	{r4, r5, r6, lr}
   10fde:	4606      	mov	r6, r0
	del_idx = net_buf_simple_pull_le16(buf);
   10fe0:	4610      	mov	r0, r2
{
   10fe2:	460d      	mov	r5, r1
	del_idx = net_buf_simple_pull_le16(buf);
   10fe4:	f017 f9b8 	bl	28358 <net_buf_simple_pull_le16>
	if (del_idx > 0xfff) {
   10fe8:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	del_idx = net_buf_simple_pull_le16(buf);
   10fec:	4604      	mov	r4, r0
	if (del_idx > 0xfff) {
   10fee:	d20e      	bcs.n	1100e <net_key_del+0x32>
	if (ctx->net_idx == del_idx) {
   10ff0:	882a      	ldrh	r2, [r5, #0]
   10ff2:	4282      	cmp	r2, r0
   10ff4:	d106      	bne.n	11004 <net_key_del+0x28>
		return send_net_key_status(model, ctx, del_idx,
   10ff6:	230c      	movs	r3, #12
	return send_net_key_status(model, ctx, del_idx, STATUS_SUCCESS);
   10ff8:	4629      	mov	r1, r5
   10ffa:	4630      	mov	r0, r6
}
   10ffc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return send_net_key_status(model, ctx, del_idx, STATUS_SUCCESS);
   11000:	f7ff bd82 	b.w	10b08 <send_net_key_status>
	(void)bt_mesh_subnet_del(del_idx);
   11004:	f014 fd98 	bl	25b38 <bt_mesh_subnet_del>
	return send_net_key_status(model, ctx, del_idx, STATUS_SUCCESS);
   11008:	2300      	movs	r3, #0
   1100a:	4622      	mov	r2, r4
   1100c:	e7f4      	b.n	10ff8 <net_key_del+0x1c>
   1100e:	4b07      	ldr	r3, [pc, #28]	; (1102c <net_key_del+0x50>)
   11010:	4a07      	ldr	r2, [pc, #28]	; (11030 <net_key_del+0x54>)
   11012:	1ad2      	subs	r2, r2, r3
   11014:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Invalid NetKeyIndex 0x%04x", del_idx);
   11016:	0192      	lsls	r2, r2, #6
   11018:	4601      	mov	r1, r0
   1101a:	f042 0201 	orr.w	r2, r2, #1
   1101e:	4805      	ldr	r0, [pc, #20]	; (11034 <net_key_del+0x58>)
   11020:	f010 fd70 	bl	21b04 <log_1>
}
   11024:	f06f 0015 	mvn.w	r0, #21
   11028:	bd70      	pop	{r4, r5, r6, pc}
   1102a:	bf00      	nop
   1102c:	00029870 	.word	0x00029870
   11030:	000299b8 	.word	0x000299b8
   11034:	0002daff 	.word	0x0002daff

00011038 <net_key_update>:
{
   11038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1103c:	4606      	mov	r6, r0
	idx = net_buf_simple_pull_le16(buf);
   1103e:	4610      	mov	r0, r2
{
   11040:	460f      	mov	r7, r1
   11042:	4615      	mov	r5, r2
	idx = net_buf_simple_pull_le16(buf);
   11044:	f017 f988 	bl	28358 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   11048:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   1104c:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   1104e:	d20a      	bcs.n	11066 <net_key_update+0x2e>
	status = bt_mesh_subnet_update(idx, buf->data);
   11050:	6829      	ldr	r1, [r5, #0]
   11052:	f014 fd40 	bl	25ad6 <bt_mesh_subnet_update>
	return send_net_key_status(model, ctx, idx, status);
   11056:	4622      	mov	r2, r4
	status = bt_mesh_subnet_update(idx, buf->data);
   11058:	4603      	mov	r3, r0
	return send_net_key_status(model, ctx, idx, status);
   1105a:	4639      	mov	r1, r7
   1105c:	4630      	mov	r0, r6
}
   1105e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return send_net_key_status(model, ctx, idx, status);
   11062:	f7ff bd51 	b.w	10b08 <send_net_key_status>
   11066:	4b07      	ldr	r3, [pc, #28]	; (11084 <net_key_update+0x4c>)
   11068:	4a07      	ldr	r2, [pc, #28]	; (11088 <net_key_update+0x50>)
   1106a:	1ad2      	subs	r2, r2, r3
   1106c:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   1106e:	0192      	lsls	r2, r2, #6
   11070:	4601      	mov	r1, r0
   11072:	f042 0201 	orr.w	r2, r2, #1
   11076:	4805      	ldr	r0, [pc, #20]	; (1108c <net_key_update+0x54>)
   11078:	f010 fd44 	bl	21b04 <log_1>
}
   1107c:	f06f 0015 	mvn.w	r0, #21
   11080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11084:	00029870 	.word	0x00029870
   11088:	000299b8 	.word	0x000299b8
   1108c:	0002daff 	.word	0x0002daff

00011090 <net_key_add>:
{
   11090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11094:	4606      	mov	r6, r0
	idx = net_buf_simple_pull_le16(buf);
   11096:	4610      	mov	r0, r2
{
   11098:	460f      	mov	r7, r1
   1109a:	4615      	mov	r5, r2
	idx = net_buf_simple_pull_le16(buf);
   1109c:	f017 f95c 	bl	28358 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   110a0:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   110a4:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   110a6:	d20a      	bcs.n	110be <net_key_add+0x2e>
	status = bt_mesh_subnet_add(idx, buf->data);
   110a8:	6829      	ldr	r1, [r5, #0]
   110aa:	f014 fccd 	bl	25a48 <bt_mesh_subnet_add>
	return send_net_key_status(model, ctx, idx, status);
   110ae:	4622      	mov	r2, r4
	status = bt_mesh_subnet_add(idx, buf->data);
   110b0:	4603      	mov	r3, r0
	return send_net_key_status(model, ctx, idx, status);
   110b2:	4639      	mov	r1, r7
   110b4:	4630      	mov	r0, r6
}
   110b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return send_net_key_status(model, ctx, idx, status);
   110ba:	f7ff bd25 	b.w	10b08 <send_net_key_status>
   110be:	4b07      	ldr	r3, [pc, #28]	; (110dc <net_key_add+0x4c>)
   110c0:	4a07      	ldr	r2, [pc, #28]	; (110e0 <net_key_add+0x50>)
   110c2:	1ad2      	subs	r2, r2, r3
   110c4:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   110c6:	0192      	lsls	r2, r2, #6
   110c8:	4601      	mov	r1, r0
   110ca:	f042 0201 	orr.w	r2, r2, #1
   110ce:	4805      	ldr	r0, [pc, #20]	; (110e4 <net_key_add+0x54>)
   110d0:	f010 fd18 	bl	21b04 <log_1>
}
   110d4:	f06f 0015 	mvn.w	r0, #21
   110d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   110dc:	00029870 	.word	0x00029870
   110e0:	000299b8 	.word	0x000299b8
   110e4:	0002daff 	.word	0x0002daff

000110e8 <mod_sub_get_vnd>:
{
   110e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   110ec:	4614      	mov	r4, r2
   110ee:	b09a      	sub	sp, #104	; 0x68
	NET_BUF_SIMPLE_DEFINE(msg, BT_MESH_TX_SDU_MAX);
   110f0:	ab08      	add	r3, sp, #32
   110f2:	f44f 0290 	mov.w	r2, #4718592	; 0x480000
{
   110f6:	4681      	mov	r9, r0
	addr = net_buf_simple_pull_le16(buf);
   110f8:	4620      	mov	r0, r4
	NET_BUF_SIMPLE_DEFINE(msg, BT_MESH_TX_SDU_MAX);
   110fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
   110fe:	9305      	str	r3, [sp, #20]
{
   11100:	468a      	mov	sl, r1
	addr = net_buf_simple_pull_le16(buf);
   11102:	f017 f929 	bl	28358 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
   11106:	b203      	sxth	r3, r0
   11108:	2b00      	cmp	r3, #0
	addr = net_buf_simple_pull_le16(buf);
   1110a:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
   1110c:	dc0e      	bgt.n	1112c <mod_sub_get_vnd+0x44>
   1110e:	4b35      	ldr	r3, [pc, #212]	; (111e4 <mod_sub_get_vnd+0xfc>)
   11110:	4935      	ldr	r1, [pc, #212]	; (111e8 <mod_sub_get_vnd+0x100>)
		BT_WARN("Prohibited element address");
   11112:	4836      	ldr	r0, [pc, #216]	; (111ec <mod_sub_get_vnd+0x104>)
   11114:	1ac9      	subs	r1, r1, r3
   11116:	08c9      	lsrs	r1, r1, #3
   11118:	0189      	lsls	r1, r1, #6
   1111a:	f041 0102 	orr.w	r1, r1, #2
   1111e:	f010 fce4 	bl	21aea <log_0>
		return -EINVAL;
   11122:	f06f 0015 	mvn.w	r0, #21
}
   11126:	b01a      	add	sp, #104	; 0x68
   11128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	company = net_buf_simple_pull_le16(buf);
   1112c:	4620      	mov	r0, r4
   1112e:	f017 f913 	bl	28358 <net_buf_simple_pull_le16>
   11132:	4607      	mov	r7, r0
	id = net_buf_simple_pull_le16(buf);
   11134:	4620      	mov	r0, r4
   11136:	f017 f90f 	bl	28358 <net_buf_simple_pull_le16>
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST_VND);
   1113a:	ac05      	add	r4, sp, #20
	id = net_buf_simple_pull_le16(buf);
   1113c:	4606      	mov	r6, r0
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST_VND);
   1113e:	f248 012c 	movw	r1, #32812	; 0x802c
   11142:	4620      	mov	r0, r4
   11144:	f015 f9e0 	bl	26508 <bt_mesh_model_msg_init>
	elem = bt_mesh_elem_find(addr);
   11148:	4628      	mov	r0, r5
   1114a:	f7ff fa49 	bl	105e0 <bt_mesh_elem_find>
	if (!elem) {
   1114e:	bb28      	cbnz	r0, 1119c <mod_sub_get_vnd+0xb4>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_ADDRESS);
   11150:	2101      	movs	r1, #1
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
   11152:	4620      	mov	r0, r4
   11154:	f017 f887 	bl	28266 <net_buf_simple_add_u8>
		net_buf_simple_add_le16(&msg, addr);
   11158:	4629      	mov	r1, r5
   1115a:	4620      	mov	r0, r4
   1115c:	f017 f88b 	bl	28276 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(&msg, company);
   11160:	4639      	mov	r1, r7
   11162:	4620      	mov	r0, r4
   11164:	f017 f887 	bl	28276 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(&msg, id);
   11168:	4631      	mov	r1, r6
   1116a:	4620      	mov	r0, r4
   1116c:	f017 f883 	bl	28276 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   11170:	2500      	movs	r5, #0
   11172:	9500      	str	r5, [sp, #0]
   11174:	462b      	mov	r3, r5
   11176:	4622      	mov	r2, r4
   11178:	4651      	mov	r1, sl
   1117a:	4648      	mov	r0, r9
   1117c:	f7ff fabe 	bl	106fc <bt_mesh_model_send>
   11180:	2800      	cmp	r0, #0
   11182:	d0d0      	beq.n	11126 <mod_sub_get_vnd+0x3e>
   11184:	4b17      	ldr	r3, [pc, #92]	; (111e4 <mod_sub_get_vnd+0xfc>)
   11186:	4918      	ldr	r1, [pc, #96]	; (111e8 <mod_sub_get_vnd+0x100>)
		BT_ERR("Unable to send Vendor Model Subscription List");
   11188:	4819      	ldr	r0, [pc, #100]	; (111f0 <mod_sub_get_vnd+0x108>)
   1118a:	1ac9      	subs	r1, r1, r3
   1118c:	08c9      	lsrs	r1, r1, #3
   1118e:	0189      	lsls	r1, r1, #6
   11190:	f041 0101 	orr.w	r1, r1, #1
   11194:	f010 fca9 	bl	21aea <log_0>
	return 0;
   11198:	4628      	mov	r0, r5
   1119a:	e7c4      	b.n	11126 <mod_sub_get_vnd+0x3e>
	mod = bt_mesh_model_find_vnd(elem, company, id);
   1119c:	4632      	mov	r2, r6
   1119e:	4639      	mov	r1, r7
   111a0:	f015 f972 	bl	26488 <bt_mesh_model_find_vnd>
	if (!mod) {
   111a4:	4680      	mov	r8, r0
   111a6:	b908      	cbnz	r0, 111ac <mod_sub_get_vnd+0xc4>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
   111a8:	2102      	movs	r1, #2
   111aa:	e7d2      	b.n	11152 <mod_sub_get_vnd+0x6a>
	net_buf_simple_add_u8(&msg, STATUS_SUCCESS);
   111ac:	2100      	movs	r1, #0
   111ae:	4620      	mov	r0, r4
   111b0:	f017 f859 	bl	28266 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, addr);
   111b4:	4629      	mov	r1, r5
   111b6:	4620      	mov	r0, r4
   111b8:	f017 f85d 	bl	28276 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, company);
   111bc:	4639      	mov	r1, r7
   111be:	4620      	mov	r0, r4
   111c0:	f017 f859 	bl	28276 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, id);
   111c4:	4631      	mov	r1, r6
   111c6:	4620      	mov	r0, r4
   111c8:	f017 f855 	bl	28276 <net_buf_simple_add_le16>
	visit_ctx.msg = &msg;
   111cc:	9404      	str	r4, [sp, #16]
	visit_ctx.elem_idx = mod->elem_idx;
   111ce:	f898 3004 	ldrb.w	r3, [r8, #4]
	bt_mesh_model_extensions_walk(mod, mod_sub_list_visitor, &visit_ctx);
   111d2:	4908      	ldr	r1, [pc, #32]	; (111f4 <mod_sub_get_vnd+0x10c>)
	visit_ctx.elem_idx = mod->elem_idx;
   111d4:	f8ad 300c 	strh.w	r3, [sp, #12]
	bt_mesh_model_extensions_walk(mod, mod_sub_list_visitor, &visit_ctx);
   111d8:	aa03      	add	r2, sp, #12
   111da:	4640      	mov	r0, r8
   111dc:	f015 f97c 	bl	264d8 <bt_mesh_model_extensions_walk>
   111e0:	e7c6      	b.n	11170 <mod_sub_get_vnd+0x88>
   111e2:	bf00      	nop
   111e4:	00029870 	.word	0x00029870
   111e8:	000299b8 	.word	0x000299b8
   111ec:	0002dbe5 	.word	0x0002dbe5
   111f0:	0002dc00 	.word	0x0002dc00
   111f4:	0001213d 	.word	0x0001213d

000111f8 <mod_sub_get>:
{
   111f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   111fc:	4614      	mov	r4, r2
   111fe:	b09b      	sub	sp, #108	; 0x6c
	NET_BUF_SIMPLE_DEFINE(msg, BT_MESH_TX_SDU_MAX);
   11200:	ab08      	add	r3, sp, #32
   11202:	f44f 0290 	mov.w	r2, #4718592	; 0x480000
{
   11206:	4680      	mov	r8, r0
	addr = net_buf_simple_pull_le16(buf);
   11208:	4620      	mov	r0, r4
	NET_BUF_SIMPLE_DEFINE(msg, BT_MESH_TX_SDU_MAX);
   1120a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1120e:	9305      	str	r3, [sp, #20]
{
   11210:	4689      	mov	r9, r1
	addr = net_buf_simple_pull_le16(buf);
   11212:	f017 f8a1 	bl	28358 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
   11216:	b203      	sxth	r3, r0
   11218:	2b00      	cmp	r3, #0
	addr = net_buf_simple_pull_le16(buf);
   1121a:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
   1121c:	dc0e      	bgt.n	1123c <mod_sub_get+0x44>
   1121e:	4b2e      	ldr	r3, [pc, #184]	; (112d8 <mod_sub_get+0xe0>)
   11220:	492e      	ldr	r1, [pc, #184]	; (112dc <mod_sub_get+0xe4>)
		BT_WARN("Prohibited element address");
   11222:	482f      	ldr	r0, [pc, #188]	; (112e0 <mod_sub_get+0xe8>)
   11224:	1ac9      	subs	r1, r1, r3
   11226:	08c9      	lsrs	r1, r1, #3
   11228:	0189      	lsls	r1, r1, #6
   1122a:	f041 0102 	orr.w	r1, r1, #2
   1122e:	f010 fc5c 	bl	21aea <log_0>
		return -EINVAL;
   11232:	f06f 0015 	mvn.w	r0, #21
}
   11236:	b01b      	add	sp, #108	; 0x6c
   11238:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	id = net_buf_simple_pull_le16(buf);
   1123c:	4620      	mov	r0, r4
   1123e:	f017 f88b 	bl	28358 <net_buf_simple_pull_le16>
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST);
   11242:	ac05      	add	r4, sp, #20
	id = net_buf_simple_pull_le16(buf);
   11244:	4606      	mov	r6, r0
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST);
   11246:	f248 012a 	movw	r1, #32810	; 0x802a
   1124a:	4620      	mov	r0, r4
   1124c:	f015 f95c 	bl	26508 <bt_mesh_model_msg_init>
	elem = bt_mesh_elem_find(addr);
   11250:	4628      	mov	r0, r5
   11252:	f7ff f9c5 	bl	105e0 <bt_mesh_elem_find>
	if (!elem) {
   11256:	bb08      	cbnz	r0, 1129c <mod_sub_get+0xa4>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_ADDRESS);
   11258:	2101      	movs	r1, #1
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
   1125a:	4620      	mov	r0, r4
   1125c:	f017 f803 	bl	28266 <net_buf_simple_add_u8>
		net_buf_simple_add_le16(&msg, addr);
   11260:	4629      	mov	r1, r5
   11262:	4620      	mov	r0, r4
   11264:	f017 f807 	bl	28276 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(&msg, id);
   11268:	4631      	mov	r1, r6
   1126a:	4620      	mov	r0, r4
   1126c:	f017 f803 	bl	28276 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   11270:	2500      	movs	r5, #0
   11272:	9500      	str	r5, [sp, #0]
   11274:	462b      	mov	r3, r5
   11276:	4622      	mov	r2, r4
   11278:	4649      	mov	r1, r9
   1127a:	4640      	mov	r0, r8
   1127c:	f7ff fa3e 	bl	106fc <bt_mesh_model_send>
   11280:	2800      	cmp	r0, #0
   11282:	d0d8      	beq.n	11236 <mod_sub_get+0x3e>
   11284:	4b14      	ldr	r3, [pc, #80]	; (112d8 <mod_sub_get+0xe0>)
   11286:	4915      	ldr	r1, [pc, #84]	; (112dc <mod_sub_get+0xe4>)
		BT_ERR("Unable to send Model Subscription List");
   11288:	4816      	ldr	r0, [pc, #88]	; (112e4 <mod_sub_get+0xec>)
   1128a:	1ac9      	subs	r1, r1, r3
   1128c:	08c9      	lsrs	r1, r1, #3
   1128e:	0189      	lsls	r1, r1, #6
   11290:	f041 0101 	orr.w	r1, r1, #1
   11294:	f010 fc29 	bl	21aea <log_0>
	return 0;
   11298:	4628      	mov	r0, r5
   1129a:	e7cc      	b.n	11236 <mod_sub_get+0x3e>
	mod = bt_mesh_model_find(elem, id);
   1129c:	4631      	mov	r1, r6
   1129e:	f015 f908 	bl	264b2 <bt_mesh_model_find>
	if (!mod) {
   112a2:	4607      	mov	r7, r0
   112a4:	b908      	cbnz	r0, 112aa <mod_sub_get+0xb2>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
   112a6:	2102      	movs	r1, #2
   112a8:	e7d7      	b.n	1125a <mod_sub_get+0x62>
	net_buf_simple_add_u8(&msg, STATUS_SUCCESS);
   112aa:	2100      	movs	r1, #0
   112ac:	4620      	mov	r0, r4
   112ae:	f016 ffda 	bl	28266 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, addr);
   112b2:	4629      	mov	r1, r5
   112b4:	4620      	mov	r0, r4
   112b6:	f016 ffde 	bl	28276 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, id);
   112ba:	4631      	mov	r1, r6
   112bc:	4620      	mov	r0, r4
   112be:	f016 ffda 	bl	28276 <net_buf_simple_add_le16>
	visit_ctx.msg = &msg;
   112c2:	9404      	str	r4, [sp, #16]
	visit_ctx.elem_idx = mod->elem_idx;
   112c4:	793b      	ldrb	r3, [r7, #4]
	bt_mesh_model_extensions_walk(mod, mod_sub_list_visitor, &visit_ctx);
   112c6:	4908      	ldr	r1, [pc, #32]	; (112e8 <mod_sub_get+0xf0>)
	visit_ctx.elem_idx = mod->elem_idx;
   112c8:	f8ad 300c 	strh.w	r3, [sp, #12]
	bt_mesh_model_extensions_walk(mod, mod_sub_list_visitor, &visit_ctx);
   112cc:	aa03      	add	r2, sp, #12
   112ce:	4638      	mov	r0, r7
   112d0:	f015 f902 	bl	264d8 <bt_mesh_model_extensions_walk>
   112d4:	e7cc      	b.n	11270 <mod_sub_get+0x78>
   112d6:	bf00      	nop
   112d8:	00029870 	.word	0x00029870
   112dc:	000299b8 	.word	0x000299b8
   112e0:	0002dbe5 	.word	0x0002dbe5
   112e4:	0002dc2e 	.word	0x0002dc2e
   112e8:	0001213d 	.word	0x0001213d

000112ec <send_mod_pub_status>:
{
   112ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112f0:	b08b      	sub	sp, #44	; 0x2c
   112f2:	4692      	mov	sl, r2
   112f4:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
   112f8:	f89d 8050 	ldrb.w	r8, [sp, #80]	; 0x50
   112fc:	9c15      	ldr	r4, [sp, #84]	; 0x54
   112fe:	9f17      	ldr	r7, [sp, #92]	; 0x5c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_PUB_STATUS, 14);
   11300:	f44f 12a0 	mov.w	r2, #1310720	; 0x140000
{
   11304:	4605      	mov	r5, r0
   11306:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_MOD_PUB_STATUS);
   11308:	a802      	add	r0, sp, #8
   1130a:	f248 0119 	movw	r1, #32793	; 0x8019
{
   1130e:	4699      	mov	r9, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_PUB_STATUS, 14);
   11310:	ab05      	add	r3, sp, #20
   11312:	e9cd 2303 	strd	r2, r3, [sp, #12]
   11316:	9302      	str	r3, [sp, #8]
	bt_mesh_model_msg_init(&msg, OP_MOD_PUB_STATUS);
   11318:	f015 f8f6 	bl	26508 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   1131c:	4659      	mov	r1, fp
   1131e:	a802      	add	r0, sp, #8
   11320:	f016 ffa1 	bl	28266 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, elem_addr);
   11324:	4651      	mov	r1, sl
   11326:	a802      	add	r0, sp, #8
   11328:	f016 ffa5 	bl	28276 <net_buf_simple_add_le16>
	if (status != STATUS_SUCCESS) {
   1132c:	f1bb 0f00 	cmp.w	fp, #0
   11330:	d028      	beq.n	11384 <send_mod_pub_status+0x98>
		(void)memset(net_buf_simple_add(&msg, 7), 0, 7);
   11332:	2107      	movs	r1, #7
   11334:	a802      	add	r0, sp, #8
   11336:	f016 ff87 	bl	28248 <net_buf_simple_add>
   1133a:	2207      	movs	r2, #7
   1133c:	2100      	movs	r1, #0
   1133e:	f012 fd3e 	bl	23dbe <memset>
	if (vnd) {
   11342:	f1b8 0f00 	cmp.w	r8, #0
   11346:	d03f      	beq.n	113c8 <send_mod_pub_status+0xdc>
		memcpy(net_buf_simple_add(&msg, 4), mod_id, 4);
   11348:	2104      	movs	r1, #4
   1134a:	a802      	add	r0, sp, #8
   1134c:	f016 ff7c 	bl	28248 <net_buf_simple_add>
   11350:	2204      	movs	r2, #4
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
   11352:	4639      	mov	r1, r7
   11354:	f012 fd28 	bl	23da8 <memcpy>
	if (bt_mesh_model_send(cfg_mod, ctx, &msg, NULL, NULL)) {
   11358:	2300      	movs	r3, #0
   1135a:	9300      	str	r3, [sp, #0]
   1135c:	aa02      	add	r2, sp, #8
   1135e:	4631      	mov	r1, r6
   11360:	4628      	mov	r0, r5
   11362:	f7ff f9cb 	bl	106fc <bt_mesh_model_send>
   11366:	b148      	cbz	r0, 1137c <send_mod_pub_status+0x90>
   11368:	491a      	ldr	r1, [pc, #104]	; (113d4 <send_mod_pub_status+0xe8>)
   1136a:	4b1b      	ldr	r3, [pc, #108]	; (113d8 <send_mod_pub_status+0xec>)
		BT_ERR("Unable to send Model Publication Status");
   1136c:	481b      	ldr	r0, [pc, #108]	; (113dc <send_mod_pub_status+0xf0>)
   1136e:	1ac9      	subs	r1, r1, r3
   11370:	08c9      	lsrs	r1, r1, #3
   11372:	0189      	lsls	r1, r1, #6
   11374:	f041 0101 	orr.w	r1, r1, #1
   11378:	f010 fbb7 	bl	21aea <log_0>
}
   1137c:	2000      	movs	r0, #0
   1137e:	b00b      	add	sp, #44	; 0x2c
   11380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		net_buf_simple_add_le16(&msg, pub_addr);
   11384:	4649      	mov	r1, r9
   11386:	a802      	add	r0, sp, #8
   11388:	f016 ff75 	bl	28276 <net_buf_simple_add_le16>
		idx_cred = mod->pub->key | (uint16_t)mod->pub->cred << 12;
   1138c:	68a3      	ldr	r3, [r4, #8]
   1138e:	79d9      	ldrb	r1, [r3, #7]
   11390:	88db      	ldrh	r3, [r3, #6]
   11392:	f3c1 1100 	ubfx	r1, r1, #4, #1
   11396:	f3c3 030b 	ubfx	r3, r3, #0, #12
   1139a:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
		net_buf_simple_add_le16(&msg, idx_cred);
   1139e:	a802      	add	r0, sp, #8
   113a0:	f3c1 010c 	ubfx	r1, r1, #0, #13
   113a4:	f016 ff67 	bl	28276 <net_buf_simple_add_le16>
		net_buf_simple_add_u8(&msg, mod->pub->ttl);
   113a8:	68a3      	ldr	r3, [r4, #8]
   113aa:	a802      	add	r0, sp, #8
   113ac:	7a19      	ldrb	r1, [r3, #8]
   113ae:	f016 ff5a 	bl	28266 <net_buf_simple_add_u8>
		net_buf_simple_add_u8(&msg, mod->pub->period);
   113b2:	68a3      	ldr	r3, [r4, #8]
   113b4:	a802      	add	r0, sp, #8
   113b6:	7a99      	ldrb	r1, [r3, #10]
   113b8:	f016 ff55 	bl	28266 <net_buf_simple_add_u8>
		net_buf_simple_add_u8(&msg, mod->pub->retransmit);
   113bc:	68a3      	ldr	r3, [r4, #8]
   113be:	a802      	add	r0, sp, #8
   113c0:	7a59      	ldrb	r1, [r3, #9]
   113c2:	f016 ff50 	bl	28266 <net_buf_simple_add_u8>
   113c6:	e7bc      	b.n	11342 <send_mod_pub_status+0x56>
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
   113c8:	2102      	movs	r1, #2
   113ca:	a802      	add	r0, sp, #8
   113cc:	f016 ff3c 	bl	28248 <net_buf_simple_add>
   113d0:	2202      	movs	r2, #2
   113d2:	e7be      	b.n	11352 <send_mod_pub_status+0x66>
   113d4:	000299b8 	.word	0x000299b8
   113d8:	00029870 	.word	0x00029870
   113dc:	0002dc55 	.word	0x0002dc55

000113e0 <relay_set>:
{
   113e0:	b570      	push	{r4, r5, r6, lr}
   113e2:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_RELAY_STATUS, 2);
   113e4:	ab03      	add	r3, sp, #12
{
   113e6:	460e      	mov	r6, r1
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_RELAY_STATUS, 2);
   113e8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   113ec:	e9cd 1306 	strd	r1, r3, [sp, #24]
   113f0:	9305      	str	r3, [sp, #20]
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   113f2:	6813      	ldr	r3, [r2, #0]
{
   113f4:	4605      	mov	r5, r0
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   113f6:	7818      	ldrb	r0, [r3, #0]
   113f8:	2801      	cmp	r0, #1
   113fa:	d90e      	bls.n	1141a <relay_set+0x3a>
   113fc:	4b1c      	ldr	r3, [pc, #112]	; (11470 <relay_set+0x90>)
   113fe:	4a1d      	ldr	r2, [pc, #116]	; (11474 <relay_set+0x94>)
   11400:	1ad2      	subs	r2, r2, r3
   11402:	08d2      	lsrs	r2, r2, #3
		BT_WARN("Invalid Relay value 0x%02x", buf->data[0]);
   11404:	0192      	lsls	r2, r2, #6
   11406:	4601      	mov	r1, r0
   11408:	f042 0202 	orr.w	r2, r2, #2
   1140c:	481a      	ldr	r0, [pc, #104]	; (11478 <relay_set+0x98>)
   1140e:	f010 fb79 	bl	21b04 <log_1>
		return -EINVAL;
   11412:	f06f 0015 	mvn.w	r0, #21
}
   11416:	b008      	add	sp, #32
   11418:	bd70      	pop	{r4, r5, r6, pc}
	(void)bt_mesh_relay_set(buf->data[0], buf->data[1]);
   1141a:	7859      	ldrb	r1, [r3, #1]
   1141c:	f7fa fa34 	bl	b888 <bt_mesh_relay_set>
	bt_mesh_model_msg_init(&msg, OP_RELAY_STATUS);
   11420:	f248 0128 	movw	r1, #32808	; 0x8028
   11424:	a805      	add	r0, sp, #20
   11426:	f015 f86f 	bl	26508 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_get());
   1142a:	f7fa fa95 	bl	b958 <bt_mesh_relay_get>
   1142e:	4601      	mov	r1, r0
   11430:	a805      	add	r0, sp, #20
   11432:	f016 ff18 	bl	28266 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_retransmit_get());
   11436:	f7fa fa99 	bl	b96c <bt_mesh_relay_retransmit_get>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1143a:	2400      	movs	r4, #0
	net_buf_simple_add_u8(&msg, bt_mesh_relay_retransmit_get());
   1143c:	4601      	mov	r1, r0
   1143e:	a805      	add	r0, sp, #20
   11440:	f016 ff11 	bl	28266 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   11444:	9400      	str	r4, [sp, #0]
   11446:	4623      	mov	r3, r4
   11448:	aa05      	add	r2, sp, #20
   1144a:	4631      	mov	r1, r6
   1144c:	4628      	mov	r0, r5
   1144e:	f7ff f955 	bl	106fc <bt_mesh_model_send>
   11452:	2800      	cmp	r0, #0
   11454:	d0df      	beq.n	11416 <relay_set+0x36>
   11456:	4b06      	ldr	r3, [pc, #24]	; (11470 <relay_set+0x90>)
   11458:	4906      	ldr	r1, [pc, #24]	; (11474 <relay_set+0x94>)
		BT_ERR("Unable to send Relay Status response");
   1145a:	4808      	ldr	r0, [pc, #32]	; (1147c <relay_set+0x9c>)
   1145c:	1ac9      	subs	r1, r1, r3
   1145e:	08c9      	lsrs	r1, r1, #3
   11460:	0189      	lsls	r1, r1, #6
   11462:	f041 0101 	orr.w	r1, r1, #1
   11466:	f010 fb40 	bl	21aea <log_0>
	return 0;
   1146a:	4620      	mov	r0, r4
   1146c:	e7d3      	b.n	11416 <relay_set+0x36>
   1146e:	bf00      	nop
   11470:	00029870 	.word	0x00029870
   11474:	000299b8 	.word	0x000299b8
   11478:	0002dc7d 	.word	0x0002dc7d
   1147c:	0002dc98 	.word	0x0002dc98

00011480 <relay_get>:
{
   11480:	b530      	push	{r4, r5, lr}
   11482:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_RELAY_STATUS, 2);
   11484:	ab03      	add	r3, sp, #12
   11486:	f44f 2200 	mov.w	r2, #524288	; 0x80000
{
   1148a:	4604      	mov	r4, r0
   1148c:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_RELAY_STATUS);
   1148e:	a805      	add	r0, sp, #20
   11490:	f248 0128 	movw	r1, #32808	; 0x8028
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_RELAY_STATUS, 2);
   11494:	e9cd 2306 	strd	r2, r3, [sp, #24]
   11498:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_RELAY_STATUS);
   1149a:	f015 f835 	bl	26508 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_get());
   1149e:	f7fa fa5b 	bl	b958 <bt_mesh_relay_get>
   114a2:	4601      	mov	r1, r0
   114a4:	a805      	add	r0, sp, #20
   114a6:	f016 fede 	bl	28266 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_retransmit_get());
   114aa:	f7fa fa5f 	bl	b96c <bt_mesh_relay_retransmit_get>
   114ae:	4601      	mov	r1, r0
   114b0:	a805      	add	r0, sp, #20
   114b2:	f016 fed8 	bl	28266 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   114b6:	2300      	movs	r3, #0
   114b8:	9300      	str	r3, [sp, #0]
   114ba:	aa05      	add	r2, sp, #20
   114bc:	4629      	mov	r1, r5
   114be:	4620      	mov	r0, r4
   114c0:	f7ff f91c 	bl	106fc <bt_mesh_model_send>
   114c4:	b148      	cbz	r0, 114da <relay_get+0x5a>
   114c6:	4906      	ldr	r1, [pc, #24]	; (114e0 <relay_get+0x60>)
   114c8:	4b06      	ldr	r3, [pc, #24]	; (114e4 <relay_get+0x64>)
		BT_ERR("Unable to send Config Relay Status response");
   114ca:	4807      	ldr	r0, [pc, #28]	; (114e8 <relay_get+0x68>)
   114cc:	1ac9      	subs	r1, r1, r3
   114ce:	08c9      	lsrs	r1, r1, #3
   114d0:	0189      	lsls	r1, r1, #6
   114d2:	f041 0101 	orr.w	r1, r1, #1
   114d6:	f010 fb08 	bl	21aea <log_0>
}
   114da:	2000      	movs	r0, #0
   114dc:	b009      	add	sp, #36	; 0x24
   114de:	bd30      	pop	{r4, r5, pc}
   114e0:	000299b8 	.word	0x000299b8
   114e4:	00029870 	.word	0x00029870
   114e8:	0002dcbd 	.word	0x0002dcbd

000114ec <net_transmit_set>:
{
   114ec:	b570      	push	{r4, r5, r6, lr}
   114ee:	b088      	sub	sp, #32
   114f0:	4614      	mov	r4, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_TRANSMIT_STATUS, 1);
   114f2:	ab03      	add	r3, sp, #12
   114f4:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
   114f8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   114fc:	9305      	str	r3, [sp, #20]
	bt_mesh_net_transmit_set(buf->data[0]);
   114fe:	6823      	ldr	r3, [r4, #0]
{
   11500:	4605      	mov	r5, r0
	bt_mesh_net_transmit_set(buf->data[0]);
   11502:	7818      	ldrb	r0, [r3, #0]
{
   11504:	460e      	mov	r6, r1
	bt_mesh_net_transmit_set(buf->data[0]);
   11506:	f7fa f9a3 	bl	b850 <bt_mesh_net_transmit_set>
	bt_mesh_model_msg_init(&msg, OP_NET_TRANSMIT_STATUS);
   1150a:	f248 0125 	movw	r1, #32805	; 0x8025
   1150e:	a805      	add	r0, sp, #20
   11510:	f014 fffa 	bl	26508 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, buf->data[0]);
   11514:	6823      	ldr	r3, [r4, #0]
   11516:	a805      	add	r0, sp, #20
   11518:	7819      	ldrb	r1, [r3, #0]
   1151a:	f016 fea4 	bl	28266 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1151e:	2300      	movs	r3, #0
   11520:	9300      	str	r3, [sp, #0]
   11522:	aa05      	add	r2, sp, #20
   11524:	4631      	mov	r1, r6
   11526:	4628      	mov	r0, r5
   11528:	f7ff f8e8 	bl	106fc <bt_mesh_model_send>
   1152c:	b148      	cbz	r0, 11542 <net_transmit_set+0x56>
   1152e:	4906      	ldr	r1, [pc, #24]	; (11548 <net_transmit_set+0x5c>)
   11530:	4b06      	ldr	r3, [pc, #24]	; (1154c <net_transmit_set+0x60>)
		BT_ERR("Unable to send Network Transmit Status");
   11532:	4807      	ldr	r0, [pc, #28]	; (11550 <net_transmit_set+0x64>)
   11534:	1ac9      	subs	r1, r1, r3
   11536:	08c9      	lsrs	r1, r1, #3
   11538:	0189      	lsls	r1, r1, #6
   1153a:	f041 0101 	orr.w	r1, r1, #1
   1153e:	f010 fad4 	bl	21aea <log_0>
}
   11542:	2000      	movs	r0, #0
   11544:	b008      	add	sp, #32
   11546:	bd70      	pop	{r4, r5, r6, pc}
   11548:	000299b8 	.word	0x000299b8
   1154c:	00029870 	.word	0x00029870
   11550:	0002dce9 	.word	0x0002dce9

00011554 <default_ttl_set>:
{
   11554:	b5f0      	push	{r4, r5, r6, r7, lr}
   11556:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_DEFAULT_TTL_STATUS, 1);
   11558:	ab03      	add	r3, sp, #12
{
   1155a:	4615      	mov	r5, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_DEFAULT_TTL_STATUS, 1);
   1155c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
   11560:	e9cd 2306 	strd	r2, r3, [sp, #24]
   11564:	9305      	str	r3, [sp, #20]
	err = bt_mesh_default_ttl_set(buf->data[0]);
   11566:	682b      	ldr	r3, [r5, #0]
{
   11568:	4606      	mov	r6, r0
	err = bt_mesh_default_ttl_set(buf->data[0]);
   1156a:	7818      	ldrb	r0, [r3, #0]
{
   1156c:	460f      	mov	r7, r1
	err = bt_mesh_default_ttl_set(buf->data[0]);
   1156e:	f7fa f94b 	bl	b808 <bt_mesh_default_ttl_set>
	if (err) {
   11572:	4604      	mov	r4, r0
   11574:	b170      	cbz	r0, 11594 <default_ttl_set+0x40>
   11576:	4a16      	ldr	r2, [pc, #88]	; (115d0 <default_ttl_set+0x7c>)
   11578:	4916      	ldr	r1, [pc, #88]	; (115d4 <default_ttl_set+0x80>)
		BT_WARN("Prohibited Default TTL value 0x%02x", buf->data[0]);
   1157a:	682b      	ldr	r3, [r5, #0]
   1157c:	4816      	ldr	r0, [pc, #88]	; (115d8 <default_ttl_set+0x84>)
   1157e:	1a89      	subs	r1, r1, r2
   11580:	08c9      	lsrs	r1, r1, #3
   11582:	0189      	lsls	r1, r1, #6
   11584:	f041 0202 	orr.w	r2, r1, #2
   11588:	7819      	ldrb	r1, [r3, #0]
   1158a:	f010 fabb 	bl	21b04 <log_1>
}
   1158e:	4620      	mov	r0, r4
   11590:	b009      	add	sp, #36	; 0x24
   11592:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_mesh_model_msg_init(&msg, OP_DEFAULT_TTL_STATUS);
   11594:	f248 010e 	movw	r1, #32782	; 0x800e
   11598:	a805      	add	r0, sp, #20
   1159a:	f014 ffb5 	bl	26508 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, buf->data[0]);
   1159e:	682b      	ldr	r3, [r5, #0]
   115a0:	a805      	add	r0, sp, #20
   115a2:	7819      	ldrb	r1, [r3, #0]
   115a4:	f016 fe5f 	bl	28266 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   115a8:	9400      	str	r4, [sp, #0]
   115aa:	4623      	mov	r3, r4
   115ac:	aa05      	add	r2, sp, #20
   115ae:	4639      	mov	r1, r7
   115b0:	4630      	mov	r0, r6
   115b2:	f7ff f8a3 	bl	106fc <bt_mesh_model_send>
   115b6:	2800      	cmp	r0, #0
   115b8:	d0e9      	beq.n	1158e <default_ttl_set+0x3a>
   115ba:	4b05      	ldr	r3, [pc, #20]	; (115d0 <default_ttl_set+0x7c>)
   115bc:	4905      	ldr	r1, [pc, #20]	; (115d4 <default_ttl_set+0x80>)
		BT_ERR("Unable to send Default TTL Status response");
   115be:	4807      	ldr	r0, [pc, #28]	; (115dc <default_ttl_set+0x88>)
   115c0:	1ac9      	subs	r1, r1, r3
   115c2:	08c9      	lsrs	r1, r1, #3
   115c4:	0189      	lsls	r1, r1, #6
   115c6:	f041 0101 	orr.w	r1, r1, #1
   115ca:	f010 fa8e 	bl	21aea <log_0>
   115ce:	e7de      	b.n	1158e <default_ttl_set+0x3a>
   115d0:	00029870 	.word	0x00029870
   115d4:	000299b8 	.word	0x000299b8
   115d8:	0002dd10 	.word	0x0002dd10
   115dc:	0002dd34 	.word	0x0002dd34

000115e0 <beacon_set>:
{
   115e0:	b570      	push	{r4, r5, r6, lr}
   115e2:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_BEACON_STATUS, 1);
   115e4:	ab03      	add	r3, sp, #12
{
   115e6:	4614      	mov	r4, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_BEACON_STATUS, 1);
   115e8:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
   115ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
   115f0:	9305      	str	r3, [sp, #20]
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   115f2:	6823      	ldr	r3, [r4, #0]
{
   115f4:	460e      	mov	r6, r1
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   115f6:	7819      	ldrb	r1, [r3, #0]
   115f8:	2901      	cmp	r1, #1
{
   115fa:	4605      	mov	r5, r0
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   115fc:	d90d      	bls.n	1161a <beacon_set+0x3a>
   115fe:	4b19      	ldr	r3, [pc, #100]	; (11664 <beacon_set+0x84>)
   11600:	4a19      	ldr	r2, [pc, #100]	; (11668 <beacon_set+0x88>)
		BT_WARN("Invalid Config Beacon value 0x%02x", buf->data[0]);
   11602:	481a      	ldr	r0, [pc, #104]	; (1166c <beacon_set+0x8c>)
   11604:	1ad2      	subs	r2, r2, r3
   11606:	08d2      	lsrs	r2, r2, #3
   11608:	0192      	lsls	r2, r2, #6
   1160a:	f042 0202 	orr.w	r2, r2, #2
   1160e:	f010 fa79 	bl	21b04 <log_1>
		return -EINVAL;
   11612:	f06f 0015 	mvn.w	r0, #21
}
   11616:	b008      	add	sp, #32
   11618:	bd70      	pop	{r4, r5, r6, pc}
	bt_mesh_beacon_set(buf->data[0]);
   1161a:	f001 0001 	and.w	r0, r1, #1
   1161e:	f7fa f899 	bl	b754 <bt_mesh_beacon_set>
	bt_mesh_model_msg_init(&msg, OP_BEACON_STATUS);
   11622:	f248 010b 	movw	r1, #32779	; 0x800b
   11626:	a805      	add	r0, sp, #20
   11628:	f014 ff6e 	bl	26508 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, buf->data[0]);
   1162c:	6823      	ldr	r3, [r4, #0]
   1162e:	a805      	add	r0, sp, #20
   11630:	7819      	ldrb	r1, [r3, #0]
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   11632:	2400      	movs	r4, #0
	net_buf_simple_add_u8(&msg, buf->data[0]);
   11634:	f016 fe17 	bl	28266 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   11638:	9400      	str	r4, [sp, #0]
   1163a:	4623      	mov	r3, r4
   1163c:	aa05      	add	r2, sp, #20
   1163e:	4631      	mov	r1, r6
   11640:	4628      	mov	r0, r5
   11642:	f7ff f85b 	bl	106fc <bt_mesh_model_send>
   11646:	2800      	cmp	r0, #0
   11648:	d0e5      	beq.n	11616 <beacon_set+0x36>
   1164a:	4b06      	ldr	r3, [pc, #24]	; (11664 <beacon_set+0x84>)
   1164c:	4906      	ldr	r1, [pc, #24]	; (11668 <beacon_set+0x88>)
		BT_ERR("Unable to send Config Beacon Status response");
   1164e:	4808      	ldr	r0, [pc, #32]	; (11670 <beacon_set+0x90>)
   11650:	1ac9      	subs	r1, r1, r3
   11652:	08c9      	lsrs	r1, r1, #3
   11654:	0189      	lsls	r1, r1, #6
   11656:	f041 0101 	orr.w	r1, r1, #1
   1165a:	f010 fa46 	bl	21aea <log_0>
	return 0;
   1165e:	4620      	mov	r0, r4
   11660:	e7d9      	b.n	11616 <beacon_set+0x36>
   11662:	bf00      	nop
   11664:	00029870 	.word	0x00029870
   11668:	000299b8 	.word	0x000299b8
   1166c:	0002dd5f 	.word	0x0002dd5f
   11670:	0002dd82 	.word	0x0002dd82

00011674 <app_key_get>:
{
   11674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11678:	b08a      	sub	sp, #40	; 0x28
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_LIST,
   1167a:	ab04      	add	r3, sp, #16
{
   1167c:	4606      	mov	r6, r0
   1167e:	460f      	mov	r7, r1
	get_idx = net_buf_simple_pull_le16(buf);
   11680:	4610      	mov	r0, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_LIST,
   11682:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
   11686:	e9cd 1308 	strd	r1, r3, [sp, #32]
   1168a:	9307      	str	r3, [sp, #28]
	get_idx = net_buf_simple_pull_le16(buf);
   1168c:	f016 fe64 	bl	28358 <net_buf_simple_pull_le16>
	if (get_idx > 0xfff) {
   11690:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	get_idx = net_buf_simple_pull_le16(buf);
   11694:	4605      	mov	r5, r0
	if (get_idx > 0xfff) {
   11696:	d30f      	bcc.n	116b8 <app_key_get+0x44>
   11698:	4b2d      	ldr	r3, [pc, #180]	; (11750 <app_key_get+0xdc>)
   1169a:	4a2e      	ldr	r2, [pc, #184]	; (11754 <app_key_get+0xe0>)
   1169c:	1ad2      	subs	r2, r2, r3
   1169e:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Invalid NetKeyIndex 0x%04x", get_idx);
   116a0:	0192      	lsls	r2, r2, #6
   116a2:	4601      	mov	r1, r0
   116a4:	f042 0201 	orr.w	r2, r2, #1
   116a8:	482b      	ldr	r0, [pc, #172]	; (11758 <app_key_get+0xe4>)
   116aa:	f010 fa2b 	bl	21b04 <log_1>
		return -EINVAL;
   116ae:	f06f 0015 	mvn.w	r0, #21
}
   116b2:	b00a      	add	sp, #40	; 0x28
   116b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_mesh_model_msg_init(&msg, OP_APP_KEY_LIST);
   116b8:	f248 0102 	movw	r1, #32770	; 0x8002
   116bc:	a807      	add	r0, sp, #28
   116be:	f014 ff23 	bl	26508 <bt_mesh_model_msg_init>
	if (!bt_mesh_subnet_exists(get_idx)) {
   116c2:	4628      	mov	r0, r5
   116c4:	f014 fa00 	bl	25ac8 <bt_mesh_subnet_exists>
		status = STATUS_SUCCESS;
   116c8:	2800      	cmp	r0, #0
   116ca:	bf0c      	ite	eq
   116cc:	2404      	moveq	r4, #4
   116ce:	2400      	movne	r4, #0
	net_buf_simple_add_u8(&msg, status);
   116d0:	4621      	mov	r1, r4
   116d2:	a807      	add	r0, sp, #28
   116d4:	f016 fdc7 	bl	28266 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, get_idx);
   116d8:	4629      	mov	r1, r5
   116da:	a807      	add	r0, sp, #28
   116dc:	f016 fdcb 	bl	28276 <net_buf_simple_add_le16>
	if (status != STATUS_SUCCESS) {
   116e0:	b9bc      	cbnz	r4, 11712 <app_key_get+0x9e>
	count = bt_mesh_app_keys_get(get_idx, app_idx, ARRAY_SIZE(app_idx), 0);
   116e2:	4628      	mov	r0, r5
   116e4:	4623      	mov	r3, r4
   116e6:	2202      	movs	r2, #2
   116e8:	a903      	add	r1, sp, #12
   116ea:	f7fc f989 	bl	da00 <bt_mesh_app_keys_get>
		count = ARRAY_SIZE(app_idx);
   116ee:	2803      	cmp	r0, #3
	count = bt_mesh_app_keys_get(get_idx, app_idx, ARRAY_SIZE(app_idx), 0);
   116f0:	4605      	mov	r5, r0
		count = ARRAY_SIZE(app_idx);
   116f2:	bf28      	it	cs
   116f4:	2502      	movcs	r5, #2
	for (i = 0; i < count - 1; i += 2) {
   116f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   116fa:	45a0      	cmp	r8, r4
   116fc:	dc1f      	bgt.n	1173e <app_key_get+0xca>
	if (i < count) {
   116fe:	42ac      	cmp	r4, r5
   11700:	da07      	bge.n	11712 <app_key_get+0x9e>
		net_buf_simple_add_le16(&msg, app_idx[i]);
   11702:	ab0a      	add	r3, sp, #40	; 0x28
   11704:	eb03 0444 	add.w	r4, r3, r4, lsl #1
   11708:	a807      	add	r0, sp, #28
   1170a:	f834 1c1c 	ldrh.w	r1, [r4, #-28]
   1170e:	f016 fdb2 	bl	28276 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   11712:	2400      	movs	r4, #0
   11714:	9400      	str	r4, [sp, #0]
   11716:	4623      	mov	r3, r4
   11718:	aa07      	add	r2, sp, #28
   1171a:	4639      	mov	r1, r7
   1171c:	4630      	mov	r0, r6
   1171e:	f7fe ffed 	bl	106fc <bt_mesh_model_send>
   11722:	2800      	cmp	r0, #0
   11724:	d0c5      	beq.n	116b2 <app_key_get+0x3e>
   11726:	4b0a      	ldr	r3, [pc, #40]	; (11750 <app_key_get+0xdc>)
   11728:	490a      	ldr	r1, [pc, #40]	; (11754 <app_key_get+0xe0>)
		BT_ERR("Unable to send AppKey List");
   1172a:	480c      	ldr	r0, [pc, #48]	; (1175c <app_key_get+0xe8>)
   1172c:	1ac9      	subs	r1, r1, r3
   1172e:	08c9      	lsrs	r1, r1, #3
   11730:	0189      	lsls	r1, r1, #6
   11732:	f041 0101 	orr.w	r1, r1, #1
   11736:	f010 f9d8 	bl	21aea <log_0>
	return 0;
   1173a:	4620      	mov	r0, r4
   1173c:	e7b9      	b.n	116b2 <app_key_get+0x3e>
		key_idx_pack(&msg, app_idx[i], app_idx[i + 1]);
   1173e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   11742:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   11746:	a807      	add	r0, sp, #28
   11748:	f014 ff19 	bl	2657e <key_idx_pack>
	for (i = 0; i < count - 1; i += 2) {
   1174c:	2402      	movs	r4, #2
   1174e:	e7d4      	b.n	116fa <app_key_get+0x86>
   11750:	00029870 	.word	0x00029870
   11754:	000299b8 	.word	0x000299b8
   11758:	0002daff 	.word	0x0002daff
   1175c:	0002ddaf 	.word	0x0002ddaf

00011760 <node_reset>:
{
   11760:	b530      	push	{r4, r5, lr}
   11762:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_RESET_STATUS, 0);
   11764:	ab03      	add	r3, sp, #12
   11766:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
{
   1176a:	4604      	mov	r4, r0
   1176c:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_NODE_RESET_STATUS);
   1176e:	a805      	add	r0, sp, #20
   11770:	f248 014a 	movw	r1, #32842	; 0x804a
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_RESET_STATUS, 0);
   11774:	e9cd 2306 	strd	r2, r3, [sp, #24]
   11778:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NODE_RESET_STATUS);
   1177a:	f014 fec5 	bl	26508 <bt_mesh_model_msg_init>
	if (bt_mesh_model_send(model, ctx, &msg, &reset_cb, NULL)) {
   1177e:	2300      	movs	r3, #0
   11780:	9300      	str	r3, [sp, #0]
   11782:	aa05      	add	r2, sp, #20
   11784:	4b09      	ldr	r3, [pc, #36]	; (117ac <node_reset+0x4c>)
   11786:	4629      	mov	r1, r5
   11788:	4620      	mov	r0, r4
   1178a:	f7fe ffb7 	bl	106fc <bt_mesh_model_send>
   1178e:	b148      	cbz	r0, 117a4 <node_reset+0x44>
   11790:	4907      	ldr	r1, [pc, #28]	; (117b0 <node_reset+0x50>)
   11792:	4b08      	ldr	r3, [pc, #32]	; (117b4 <node_reset+0x54>)
		BT_ERR("Unable to send Node Reset Status");
   11794:	4808      	ldr	r0, [pc, #32]	; (117b8 <node_reset+0x58>)
   11796:	1ac9      	subs	r1, r1, r3
   11798:	08c9      	lsrs	r1, r1, #3
   1179a:	0189      	lsls	r1, r1, #6
   1179c:	f041 0101 	orr.w	r1, r1, #1
   117a0:	f010 f9a3 	bl	21aea <log_0>
}
   117a4:	2000      	movs	r0, #0
   117a6:	b009      	add	sp, #36	; 0x24
   117a8:	bd30      	pop	{r4, r5, pc}
   117aa:	bf00      	nop
   117ac:	0002a45c 	.word	0x0002a45c
   117b0:	000299b8 	.word	0x000299b8
   117b4:	00029870 	.word	0x00029870
   117b8:	0002ddca 	.word	0x0002ddca

000117bc <cfg_srv_init>:
	{ OP_HEARTBEAT_SUB_SET,        BT_MESH_LEN_EXACT(5),   heartbeat_sub_set },
	BT_MESH_MODEL_OP_END,
};

static int cfg_srv_init(struct bt_mesh_model *model)
{
   117bc:	b508      	push	{r3, lr}
   117be:	4603      	mov	r3, r0
	if (!bt_mesh_model_in_primary(model)) {
   117c0:	7900      	ldrb	r0, [r0, #4]
   117c2:	b160      	cbz	r0, 117de <cfg_srv_init+0x22>
   117c4:	4b08      	ldr	r3, [pc, #32]	; (117e8 <cfg_srv_init+0x2c>)
   117c6:	4909      	ldr	r1, [pc, #36]	; (117ec <cfg_srv_init+0x30>)
		BT_ERR("Configuration Server only allowed in primary element");
   117c8:	4809      	ldr	r0, [pc, #36]	; (117f0 <cfg_srv_init+0x34>)
   117ca:	1ac9      	subs	r1, r1, r3
   117cc:	08c9      	lsrs	r1, r1, #3
   117ce:	0189      	lsls	r1, r1, #6
   117d0:	f041 0101 	orr.w	r1, r1, #1
   117d4:	f010 f989 	bl	21aea <log_0>
		return -EINVAL;
   117d8:	f06f 0015 	mvn.w	r0, #21
	 * device-key is allowed to access this model.
	 */
	model->keys[0] = BT_MESH_KEY_DEV_LOCAL;

	return 0;
}
   117dc:	bd08      	pop	{r3, pc}
	model->keys[0] = BT_MESH_KEY_DEV_LOCAL;
   117de:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   117e2:	819a      	strh	r2, [r3, #12]
	return 0;
   117e4:	e7fa      	b.n	117dc <cfg_srv_init+0x20>
   117e6:	bf00      	nop
   117e8:	00029870 	.word	0x00029870
   117ec:	000299b8 	.word	0x000299b8
   117f0:	0002ddeb 	.word	0x0002ddeb

000117f4 <send_friend_status>:
{
   117f4:	b530      	push	{r4, r5, lr}
   117f6:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_FRIEND_STATUS, 1);
   117f8:	ab03      	add	r3, sp, #12
   117fa:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   117fe:	4604      	mov	r4, r0
   11800:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_FRIEND_STATUS);
   11802:	a805      	add	r0, sp, #20
   11804:	f248 0111 	movw	r1, #32785	; 0x8011
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_FRIEND_STATUS, 1);
   11808:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1180c:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_FRIEND_STATUS);
   1180e:	f014 fe7b 	bl	26508 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_friend_get());
   11812:	f014 f855 	bl	258c0 <bt_mesh_friend_get>
   11816:	4601      	mov	r1, r0
   11818:	a805      	add	r0, sp, #20
   1181a:	f016 fd24 	bl	28266 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1181e:	2300      	movs	r3, #0
   11820:	9300      	str	r3, [sp, #0]
   11822:	aa05      	add	r2, sp, #20
   11824:	4629      	mov	r1, r5
   11826:	4620      	mov	r0, r4
   11828:	f7fe ff68 	bl	106fc <bt_mesh_model_send>
   1182c:	b148      	cbz	r0, 11842 <send_friend_status+0x4e>
   1182e:	4906      	ldr	r1, [pc, #24]	; (11848 <send_friend_status+0x54>)
   11830:	4b06      	ldr	r3, [pc, #24]	; (1184c <send_friend_status+0x58>)
		BT_ERR("Unable to send Friend Status");
   11832:	4807      	ldr	r0, [pc, #28]	; (11850 <send_friend_status+0x5c>)
   11834:	1ac9      	subs	r1, r1, r3
   11836:	08c9      	lsrs	r1, r1, #3
   11838:	0189      	lsls	r1, r1, #6
   1183a:	f041 0101 	orr.w	r1, r1, #1
   1183e:	f010 f954 	bl	21aea <log_0>
}
   11842:	2000      	movs	r0, #0
   11844:	b009      	add	sp, #36	; 0x24
   11846:	bd30      	pop	{r4, r5, pc}
   11848:	000299b8 	.word	0x000299b8
   1184c:	00029870 	.word	0x00029870
   11850:	0002de20 	.word	0x0002de20

00011854 <friend_set>:
{
   11854:	b538      	push	{r3, r4, r5, lr}
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   11856:	6813      	ldr	r3, [r2, #0]
{
   11858:	460d      	mov	r5, r1
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   1185a:	7819      	ldrb	r1, [r3, #0]
   1185c:	2901      	cmp	r1, #1
{
   1185e:	4604      	mov	r4, r0
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   11860:	d808      	bhi.n	11874 <friend_set+0x20>
	(void)bt_mesh_friend_set(buf->data[0]);
   11862:	4608      	mov	r0, r1
   11864:	f014 f829 	bl	258ba <bt_mesh_friend_set>
	return send_friend_status(model, ctx);
   11868:	4629      	mov	r1, r5
   1186a:	4620      	mov	r0, r4
}
   1186c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return send_friend_status(model, ctx);
   11870:	f7ff bfc0 	b.w	117f4 <send_friend_status>
   11874:	4b06      	ldr	r3, [pc, #24]	; (11890 <friend_set+0x3c>)
   11876:	4a07      	ldr	r2, [pc, #28]	; (11894 <friend_set+0x40>)
		BT_WARN("Invalid Friend value 0x%02x", buf->data[0]);
   11878:	4807      	ldr	r0, [pc, #28]	; (11898 <friend_set+0x44>)
   1187a:	1ad2      	subs	r2, r2, r3
   1187c:	08d2      	lsrs	r2, r2, #3
   1187e:	0192      	lsls	r2, r2, #6
   11880:	f042 0202 	orr.w	r2, r2, #2
   11884:	f010 f93e 	bl	21b04 <log_1>
}
   11888:	f06f 0015 	mvn.w	r0, #21
   1188c:	bd38      	pop	{r3, r4, r5, pc}
   1188e:	bf00      	nop
   11890:	00029870 	.word	0x00029870
   11894:	000299b8 	.word	0x000299b8
   11898:	0002de3d 	.word	0x0002de3d

0001189c <reset_send_start>:
{
   1189c:	b508      	push	{r3, lr}
	if (err) {
   1189e:	b169      	cbz	r1, 118bc <reset_send_start+0x20>
   118a0:	4b07      	ldr	r3, [pc, #28]	; (118c0 <reset_send_start+0x24>)
   118a2:	4a08      	ldr	r2, [pc, #32]	; (118c4 <reset_send_start+0x28>)
		BT_ERR("Sending Node Reset Status failed (err %d)", err);
   118a4:	4808      	ldr	r0, [pc, #32]	; (118c8 <reset_send_start+0x2c>)
   118a6:	1ad2      	subs	r2, r2, r3
   118a8:	08d2      	lsrs	r2, r2, #3
   118aa:	0192      	lsls	r2, r2, #6
   118ac:	f042 0201 	orr.w	r2, r2, #1
   118b0:	f010 f928 	bl	21b04 <log_1>
}
   118b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_mesh_reset();
   118b8:	f7f9 be3a 	b.w	b530 <bt_mesh_reset>
}
   118bc:	bd08      	pop	{r3, pc}
   118be:	bf00      	nop
   118c0:	00029870 	.word	0x00029870
   118c4:	000299b8 	.word	0x000299b8
   118c8:	0002de59 	.word	0x0002de59

000118cc <mod_app_get>:
{
   118cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   118d0:	4615      	mov	r5, r2
   118d2:	b08d      	sub	sp, #52	; 0x34
	NET_BUF_SIMPLE_DEFINE(msg,
   118d4:	ab07      	add	r3, sp, #28
   118d6:	f44f 1298 	mov.w	r2, #1245184	; 0x130000
   118da:	e9cd 2305 	strd	r2, r3, [sp, #20]
   118de:	9304      	str	r3, [sp, #16]
	if ((buf->len != 4U) && (buf->len != 6U)) {
   118e0:	88ab      	ldrh	r3, [r5, #4]
   118e2:	f023 0302 	bic.w	r3, r3, #2
   118e6:	b29b      	uxth	r3, r3
   118e8:	2b04      	cmp	r3, #4
{
   118ea:	4607      	mov	r7, r0
   118ec:	4688      	mov	r8, r1
	if ((buf->len != 4U) && (buf->len != 6U)) {
   118ee:	d00e      	beq.n	1190e <mod_app_get+0x42>
   118f0:	4b40      	ldr	r3, [pc, #256]	; (119f4 <mod_app_get+0x128>)
   118f2:	4941      	ldr	r1, [pc, #260]	; (119f8 <mod_app_get+0x12c>)
		BT_ERR("The message size for the application opcode is incorrect.");
   118f4:	4841      	ldr	r0, [pc, #260]	; (119fc <mod_app_get+0x130>)
   118f6:	1ac9      	subs	r1, r1, r3
   118f8:	08c9      	lsrs	r1, r1, #3
   118fa:	0189      	lsls	r1, r1, #6
   118fc:	f041 0101 	orr.w	r1, r1, #1
   11900:	f010 f8f3 	bl	21aea <log_0>
		return -EMSGSIZE;
   11904:	f06f 0079 	mvn.w	r0, #121	; 0x79
}
   11908:	b00d      	add	sp, #52	; 0x34
   1190a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	elem_addr = net_buf_simple_pull_le16(buf);
   1190e:	4628      	mov	r0, r5
   11910:	f016 fd22 	bl	28358 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   11914:	b203      	sxth	r3, r0
   11916:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   11918:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1191a:	dc0c      	bgt.n	11936 <mod_app_get+0x6a>
   1191c:	4b35      	ldr	r3, [pc, #212]	; (119f4 <mod_app_get+0x128>)
   1191e:	4936      	ldr	r1, [pc, #216]	; (119f8 <mod_app_get+0x12c>)
		BT_WARN("Prohibited element address");
   11920:	4837      	ldr	r0, [pc, #220]	; (11a00 <mod_app_get+0x134>)
   11922:	1ac9      	subs	r1, r1, r3
   11924:	08c9      	lsrs	r1, r1, #3
   11926:	0189      	lsls	r1, r1, #6
   11928:	f041 0102 	orr.w	r1, r1, #2
   1192c:	f010 f8dd 	bl	21aea <log_0>
		return -EINVAL;
   11930:	f06f 0015 	mvn.w	r0, #21
   11934:	e7e8      	b.n	11908 <mod_app_get+0x3c>
	mod_id = buf->data;
   11936:	f8d5 9000 	ldr.w	r9, [r5]
	elem = bt_mesh_elem_find(elem_addr);
   1193a:	f7fe fe51 	bl	105e0 <bt_mesh_elem_find>
	if (!elem) {
   1193e:	4604      	mov	r4, r0
   11940:	2800      	cmp	r0, #0
   11942:	d147      	bne.n	119d4 <mod_app_get+0x108>
		vnd = (buf->len == 4U);
   11944:	88ab      	ldrh	r3, [r5, #4]
   11946:	1f1a      	subs	r2, r3, #4
   11948:	4253      	negs	r3, r2
   1194a:	4153      	adcs	r3, r2
   1194c:	f88d 300f 	strb.w	r3, [sp, #15]
		status = STATUS_INVALID_ADDRESS;
   11950:	2501      	movs	r5, #1
	if (vnd) {
   11952:	f89d 300f 	ldrb.w	r3, [sp, #15]
   11956:	2b00      	cmp	r3, #0
   11958:	d046      	beq.n	119e8 <mod_app_get+0x11c>
		bt_mesh_model_msg_init(&msg, OP_VND_MOD_APP_LIST);
   1195a:	f248 014e 	movw	r1, #32846	; 0x804e
		bt_mesh_model_msg_init(&msg, OP_SIG_MOD_APP_LIST);
   1195e:	a804      	add	r0, sp, #16
   11960:	f014 fdd2 	bl	26508 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   11964:	4629      	mov	r1, r5
   11966:	a804      	add	r0, sp, #16
   11968:	f016 fc7d 	bl	28266 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, elem_addr);
   1196c:	4631      	mov	r1, r6
   1196e:	a804      	add	r0, sp, #16
   11970:	f016 fc81 	bl	28276 <net_buf_simple_add_le16>
	if (vnd) {
   11974:	f89d 300f 	ldrb.w	r3, [sp, #15]
   11978:	2b00      	cmp	r3, #0
   1197a:	d038      	beq.n	119ee <mod_app_get+0x122>
		net_buf_simple_add_mem(&msg, mod_id, 4);
   1197c:	2204      	movs	r2, #4
		net_buf_simple_add_mem(&msg, mod_id, 2);
   1197e:	4649      	mov	r1, r9
   11980:	a804      	add	r0, sp, #16
   11982:	f016 fc67 	bl	28254 <net_buf_simple_add_mem>
	if (mod) {
   11986:	b17c      	cbz	r4, 119a8 <mod_app_get+0xdc>
			if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
   11988:	89a1      	ldrh	r1, [r4, #12]
   1198a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1198e:	4299      	cmp	r1, r3
   11990:	d002      	beq.n	11998 <mod_app_get+0xcc>
				net_buf_simple_add_le16(&msg, mod->keys[i]);
   11992:	a804      	add	r0, sp, #16
   11994:	f016 fc6f 	bl	28276 <net_buf_simple_add_le16>
			if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
   11998:	89e1      	ldrh	r1, [r4, #14]
   1199a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1199e:	4299      	cmp	r1, r3
   119a0:	d002      	beq.n	119a8 <mod_app_get+0xdc>
				net_buf_simple_add_le16(&msg, mod->keys[i]);
   119a2:	a804      	add	r0, sp, #16
   119a4:	f016 fc67 	bl	28276 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   119a8:	2400      	movs	r4, #0
   119aa:	9400      	str	r4, [sp, #0]
   119ac:	4623      	mov	r3, r4
   119ae:	aa04      	add	r2, sp, #16
   119b0:	4641      	mov	r1, r8
   119b2:	4638      	mov	r0, r7
   119b4:	f7fe fea2 	bl	106fc <bt_mesh_model_send>
   119b8:	2800      	cmp	r0, #0
   119ba:	d0a5      	beq.n	11908 <mod_app_get+0x3c>
   119bc:	4b0d      	ldr	r3, [pc, #52]	; (119f4 <mod_app_get+0x128>)
   119be:	490e      	ldr	r1, [pc, #56]	; (119f8 <mod_app_get+0x12c>)
		BT_ERR("Unable to send Model Application List message");
   119c0:	4810      	ldr	r0, [pc, #64]	; (11a04 <mod_app_get+0x138>)
   119c2:	1ac9      	subs	r1, r1, r3
   119c4:	08c9      	lsrs	r1, r1, #3
   119c6:	0189      	lsls	r1, r1, #6
   119c8:	f041 0101 	orr.w	r1, r1, #1
   119cc:	f010 f88d 	bl	21aea <log_0>
	return 0;
   119d0:	4620      	mov	r0, r4
   119d2:	e799      	b.n	11908 <mod_app_get+0x3c>
	mod = get_model(elem, buf, &vnd);
   119d4:	4629      	mov	r1, r5
   119d6:	f10d 020f 	add.w	r2, sp, #15
   119da:	f014 fe6b 	bl	266b4 <get_model>
		status = STATUS_INVALID_MODEL;
   119de:	1e04      	subs	r4, r0, #0
   119e0:	bf14      	ite	ne
   119e2:	2500      	movne	r5, #0
   119e4:	2502      	moveq	r5, #2
   119e6:	e7b4      	b.n	11952 <mod_app_get+0x86>
		bt_mesh_model_msg_init(&msg, OP_SIG_MOD_APP_LIST);
   119e8:	f248 014c 	movw	r1, #32844	; 0x804c
   119ec:	e7b7      	b.n	1195e <mod_app_get+0x92>
		net_buf_simple_add_mem(&msg, mod_id, 2);
   119ee:	2202      	movs	r2, #2
   119f0:	e7c5      	b.n	1197e <mod_app_get+0xb2>
   119f2:	bf00      	nop
   119f4:	00029870 	.word	0x00029870
   119f8:	000299b8 	.word	0x000299b8
   119fc:	0002de83 	.word	0x0002de83
   11a00:	0002dbe5 	.word	0x0002dbe5
   11a04:	0002debd 	.word	0x0002debd

00011a08 <mod_sub_del_all>:
{
   11a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((buf->len != 4U) && (buf->len != 6U)) {
   11a0c:	8893      	ldrh	r3, [r2, #4]
   11a0e:	f023 0302 	bic.w	r3, r3, #2
   11a12:	b29b      	uxth	r3, r3
   11a14:	2b04      	cmp	r3, #4
{
   11a16:	b086      	sub	sp, #24
   11a18:	4606      	mov	r6, r0
   11a1a:	460f      	mov	r7, r1
   11a1c:	4614      	mov	r4, r2
	if ((buf->len != 4U) && (buf->len != 6U)) {
   11a1e:	d00e      	beq.n	11a3e <mod_sub_del_all+0x36>
   11a20:	4b26      	ldr	r3, [pc, #152]	; (11abc <mod_sub_del_all+0xb4>)
   11a22:	4927      	ldr	r1, [pc, #156]	; (11ac0 <mod_sub_del_all+0xb8>)
		BT_ERR("The message size for the application opcode is incorrect.");
   11a24:	4827      	ldr	r0, [pc, #156]	; (11ac4 <mod_sub_del_all+0xbc>)
   11a26:	1ac9      	subs	r1, r1, r3
   11a28:	08c9      	lsrs	r1, r1, #3
   11a2a:	0189      	lsls	r1, r1, #6
   11a2c:	f041 0101 	orr.w	r1, r1, #1
   11a30:	f010 f85b 	bl	21aea <log_0>
		return -EMSGSIZE;
   11a34:	f06f 0079 	mvn.w	r0, #121	; 0x79
}
   11a38:	b006      	add	sp, #24
   11a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	elem_addr = net_buf_simple_pull_le16(buf);
   11a3e:	4610      	mov	r0, r2
   11a40:	f016 fc8a 	bl	28358 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   11a44:	b203      	sxth	r3, r0
   11a46:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   11a48:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   11a4a:	dc0c      	bgt.n	11a66 <mod_sub_del_all+0x5e>
   11a4c:	4b1b      	ldr	r3, [pc, #108]	; (11abc <mod_sub_del_all+0xb4>)
   11a4e:	491c      	ldr	r1, [pc, #112]	; (11ac0 <mod_sub_del_all+0xb8>)
		BT_WARN("Prohibited element address");
   11a50:	481d      	ldr	r0, [pc, #116]	; (11ac8 <mod_sub_del_all+0xc0>)
   11a52:	1ac9      	subs	r1, r1, r3
   11a54:	08c9      	lsrs	r1, r1, #3
   11a56:	0189      	lsls	r1, r1, #6
   11a58:	f041 0102 	orr.w	r1, r1, #2
   11a5c:	f010 f845 	bl	21aea <log_0>
		return -EINVAL;
   11a60:	f06f 0015 	mvn.w	r0, #21
   11a64:	e7e8      	b.n	11a38 <mod_sub_del_all+0x30>
	mod_id = buf->data;
   11a66:	f8d4 8000 	ldr.w	r8, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   11a6a:	f7fe fdb9 	bl	105e0 <bt_mesh_elem_find>
	if (!elem) {
   11a6e:	b990      	cbnz	r0, 11a96 <mod_sub_del_all+0x8e>
		vnd = (buf->len == 4U);
   11a70:	88a3      	ldrh	r3, [r4, #4]
   11a72:	1f1a      	subs	r2, r3, #4
   11a74:	4253      	negs	r3, r2
   11a76:	4153      	adcs	r3, r2
   11a78:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
   11a7c:	2201      	movs	r2, #1
	return send_mod_sub_status(model, ctx, status, elem_addr,
   11a7e:	f89d 3017 	ldrb.w	r3, [sp, #23]
   11a82:	e9cd 8301 	strd	r8, r3, [sp, #4]
   11a86:	2300      	movs	r3, #0
   11a88:	9300      	str	r3, [sp, #0]
   11a8a:	4639      	mov	r1, r7
   11a8c:	462b      	mov	r3, r5
   11a8e:	4630      	mov	r0, r6
   11a90:	f7ff f992 	bl	10db8 <send_mod_sub_status>
   11a94:	e7d0      	b.n	11a38 <mod_sub_del_all+0x30>
	mod = get_model(elem, buf, &vnd);
   11a96:	4621      	mov	r1, r4
   11a98:	f10d 0217 	add.w	r2, sp, #23
   11a9c:	f014 fe0a 	bl	266b4 <get_model>
	if (!mod) {
   11aa0:	4604      	mov	r4, r0
   11aa2:	b140      	cbz	r0, 11ab6 <mod_sub_del_all+0xae>
	bt_mesh_model_extensions_walk(mod, mod_sub_clear_visitor, NULL);
   11aa4:	2200      	movs	r2, #0
   11aa6:	4909      	ldr	r1, [pc, #36]	; (11acc <mod_sub_del_all+0xc4>)
   11aa8:	f014 fd16 	bl	264d8 <bt_mesh_model_extensions_walk>
		bt_mesh_model_sub_store(mod);
   11aac:	4620      	mov	r0, r4
   11aae:	f014 fd1d 	bl	264ec <bt_mesh_model_sub_store>
	status = STATUS_SUCCESS;
   11ab2:	2200      	movs	r2, #0
   11ab4:	e7e3      	b.n	11a7e <mod_sub_del_all+0x76>
		status = STATUS_INVALID_MODEL;
   11ab6:	2202      	movs	r2, #2
   11ab8:	e7e1      	b.n	11a7e <mod_sub_del_all+0x76>
   11aba:	bf00      	nop
   11abc:	00029870 	.word	0x00029870
   11ac0:	000299b8 	.word	0x000299b8
   11ac4:	0002de83 	.word	0x0002de83
   11ac8:	0002dbe5 	.word	0x0002dbe5
   11acc:	0002659d 	.word	0x0002659d

00011ad0 <mod_sub_overwrite>:
{
   11ad0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((buf->len != 6U) && (buf->len != 8U)) {
   11ad4:	8893      	ldrh	r3, [r2, #4]
   11ad6:	2b06      	cmp	r3, #6
{
   11ad8:	b087      	sub	sp, #28
   11ada:	4607      	mov	r7, r0
   11adc:	4688      	mov	r8, r1
   11ade:	4614      	mov	r4, r2
	if ((buf->len != 6U) && (buf->len != 8U)) {
   11ae0:	d010      	beq.n	11b04 <mod_sub_overwrite+0x34>
   11ae2:	2b08      	cmp	r3, #8
   11ae4:	d00e      	beq.n	11b04 <mod_sub_overwrite+0x34>
   11ae6:	4b2c      	ldr	r3, [pc, #176]	; (11b98 <mod_sub_overwrite+0xc8>)
   11ae8:	492c      	ldr	r1, [pc, #176]	; (11b9c <mod_sub_overwrite+0xcc>)
		BT_ERR("The message size for the application opcode is incorrect.");
   11aea:	482d      	ldr	r0, [pc, #180]	; (11ba0 <mod_sub_overwrite+0xd0>)
   11aec:	1ac9      	subs	r1, r1, r3
   11aee:	08c9      	lsrs	r1, r1, #3
   11af0:	0189      	lsls	r1, r1, #6
   11af2:	f041 0101 	orr.w	r1, r1, #1
   11af6:	f00f fff8 	bl	21aea <log_0>
		return -EMSGSIZE;
   11afa:	f06f 0079 	mvn.w	r0, #121	; 0x79
}
   11afe:	b007      	add	sp, #28
   11b00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	elem_addr = net_buf_simple_pull_le16(buf);
   11b04:	4620      	mov	r0, r4
   11b06:	f016 fc27 	bl	28358 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   11b0a:	b203      	sxth	r3, r0
   11b0c:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   11b0e:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   11b10:	dc0c      	bgt.n	11b2c <mod_sub_overwrite+0x5c>
   11b12:	4b21      	ldr	r3, [pc, #132]	; (11b98 <mod_sub_overwrite+0xc8>)
   11b14:	4921      	ldr	r1, [pc, #132]	; (11b9c <mod_sub_overwrite+0xcc>)
		BT_WARN("Prohibited element address");
   11b16:	4823      	ldr	r0, [pc, #140]	; (11ba4 <mod_sub_overwrite+0xd4>)
   11b18:	1ac9      	subs	r1, r1, r3
   11b1a:	08c9      	lsrs	r1, r1, #3
   11b1c:	0189      	lsls	r1, r1, #6
   11b1e:	f041 0102 	orr.w	r1, r1, #2
   11b22:	f00f ffe2 	bl	21aea <log_0>
		return -EINVAL;
   11b26:	f06f 0015 	mvn.w	r0, #21
   11b2a:	e7e8      	b.n	11afe <mod_sub_overwrite+0x2e>
	sub_addr = net_buf_simple_pull_le16(buf);
   11b2c:	4620      	mov	r0, r4
   11b2e:	f016 fc13 	bl	28358 <net_buf_simple_pull_le16>
   11b32:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
   11b34:	4628      	mov	r0, r5
	mod_id = buf->data;
   11b36:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   11b3a:	f7fe fd51 	bl	105e0 <bt_mesh_elem_find>
	if (!elem) {
   11b3e:	b938      	cbnz	r0, 11b50 <mod_sub_overwrite+0x80>
		vnd = (buf->len == 4U);
   11b40:	88a3      	ldrh	r3, [r4, #4]
   11b42:	1f1a      	subs	r2, r3, #4
   11b44:	4253      	negs	r3, r2
   11b46:	4153      	adcs	r3, r2
   11b48:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
   11b4c:	2201      	movs	r2, #1
   11b4e:	e015      	b.n	11b7c <mod_sub_overwrite+0xac>
	mod = get_model(elem, buf, &vnd);
   11b50:	4621      	mov	r1, r4
   11b52:	f10d 0217 	add.w	r2, sp, #23
   11b56:	f014 fdad 	bl	266b4 <get_model>
   11b5a:	4604      	mov	r4, r0
	if (!mod) {
   11b5c:	b1c8      	cbz	r0, 11b92 <mod_sub_overwrite+0xc2>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr)) {
   11b5e:	f506 4380 	add.w	r3, r6, #16384	; 0x4000
   11b62:	b29b      	uxth	r3, r3
   11b64:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
   11b68:	d8f0      	bhi.n	11b4c <mod_sub_overwrite+0x7c>
		bt_mesh_model_extensions_walk(mod, mod_sub_clear_visitor, NULL);
   11b6a:	2200      	movs	r2, #0
   11b6c:	490e      	ldr	r1, [pc, #56]	; (11ba8 <mod_sub_overwrite+0xd8>)
   11b6e:	f014 fcb3 	bl	264d8 <bt_mesh_model_extensions_walk>
		mod->groups[0] = sub_addr;
   11b72:	8226      	strh	r6, [r4, #16]
			bt_mesh_model_sub_store(mod);
   11b74:	4620      	mov	r0, r4
   11b76:	f014 fcb9 	bl	264ec <bt_mesh_model_sub_store>
		status = STATUS_SUCCESS;
   11b7a:	2200      	movs	r2, #0
	return send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   11b7c:	f89d 3017 	ldrb.w	r3, [sp, #23]
   11b80:	9600      	str	r6, [sp, #0]
   11b82:	e9cd 9301 	strd	r9, r3, [sp, #4]
   11b86:	4641      	mov	r1, r8
   11b88:	462b      	mov	r3, r5
   11b8a:	4638      	mov	r0, r7
   11b8c:	f7ff f914 	bl	10db8 <send_mod_sub_status>
   11b90:	e7b5      	b.n	11afe <mod_sub_overwrite+0x2e>
		status = STATUS_INVALID_MODEL;
   11b92:	2202      	movs	r2, #2
   11b94:	e7f2      	b.n	11b7c <mod_sub_overwrite+0xac>
   11b96:	bf00      	nop
   11b98:	00029870 	.word	0x00029870
   11b9c:	000299b8 	.word	0x000299b8
   11ba0:	0002de83 	.word	0x0002de83
   11ba4:	0002dbe5 	.word	0x0002dbe5
   11ba8:	0002659d 	.word	0x0002659d

00011bac <mod_sub_va_overwrite>:
{
   11bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11bb0:	b086      	sub	sp, #24
	uint16_t elem_addr, sub_addr = BT_MESH_ADDR_UNASSIGNED;
   11bb2:	2300      	movs	r3, #0
   11bb4:	f8ad 3016 	strh.w	r3, [sp, #22]
	if ((buf->len != 20U) && (buf->len != 22U)) {
   11bb8:	8893      	ldrh	r3, [r2, #4]
   11bba:	f023 0302 	bic.w	r3, r3, #2
   11bbe:	b29b      	uxth	r3, r3
   11bc0:	2b14      	cmp	r3, #20
{
   11bc2:	4607      	mov	r7, r0
   11bc4:	4688      	mov	r8, r1
   11bc6:	4614      	mov	r4, r2
	if ((buf->len != 20U) && (buf->len != 22U)) {
   11bc8:	d00e      	beq.n	11be8 <mod_sub_va_overwrite+0x3c>
   11bca:	4b30      	ldr	r3, [pc, #192]	; (11c8c <mod_sub_va_overwrite+0xe0>)
   11bcc:	4930      	ldr	r1, [pc, #192]	; (11c90 <mod_sub_va_overwrite+0xe4>)
		BT_ERR("The message size for the application opcode is incorrect.");
   11bce:	4831      	ldr	r0, [pc, #196]	; (11c94 <mod_sub_va_overwrite+0xe8>)
   11bd0:	1ac9      	subs	r1, r1, r3
   11bd2:	08c9      	lsrs	r1, r1, #3
   11bd4:	0189      	lsls	r1, r1, #6
   11bd6:	f041 0101 	orr.w	r1, r1, #1
   11bda:	f00f ff86 	bl	21aea <log_0>
		return -EMSGSIZE;
   11bde:	f06f 0079 	mvn.w	r0, #121	; 0x79
}
   11be2:	b006      	add	sp, #24
   11be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	elem_addr = net_buf_simple_pull_le16(buf);
   11be8:	4610      	mov	r0, r2
   11bea:	f016 fbb5 	bl	28358 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   11bee:	b203      	sxth	r3, r0
   11bf0:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   11bf2:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   11bf4:	dc0c      	bgt.n	11c10 <mod_sub_va_overwrite+0x64>
   11bf6:	4b25      	ldr	r3, [pc, #148]	; (11c8c <mod_sub_va_overwrite+0xe0>)
   11bf8:	4925      	ldr	r1, [pc, #148]	; (11c90 <mod_sub_va_overwrite+0xe4>)
		BT_WARN("Prohibited element address");
   11bfa:	4827      	ldr	r0, [pc, #156]	; (11c98 <mod_sub_va_overwrite+0xec>)
   11bfc:	1ac9      	subs	r1, r1, r3
   11bfe:	08c9      	lsrs	r1, r1, #3
   11c00:	0189      	lsls	r1, r1, #6
   11c02:	f041 0102 	orr.w	r1, r1, #2
   11c06:	f00f ff70 	bl	21aea <log_0>
		return -EINVAL;
   11c0a:	f06f 0015 	mvn.w	r0, #21
   11c0e:	e7e8      	b.n	11be2 <mod_sub_va_overwrite+0x36>
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   11c10:	2110      	movs	r1, #16
   11c12:	4620      	mov	r0, r4
   11c14:	f016 fb90 	bl	28338 <net_buf_simple_pull_mem>
   11c18:	4682      	mov	sl, r0
	elem = bt_mesh_elem_find(elem_addr);
   11c1a:	4630      	mov	r0, r6
	mod_id = buf->data;
   11c1c:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   11c20:	f7fe fcde 	bl	105e0 <bt_mesh_elem_find>
	if (!elem) {
   11c24:	b9a0      	cbnz	r0, 11c50 <mod_sub_va_overwrite+0xa4>
		vnd = (buf->len == 4U);
   11c26:	88a3      	ldrh	r3, [r4, #4]
   11c28:	1f1a      	subs	r2, r3, #4
   11c2a:	4253      	negs	r3, r2
   11c2c:	4153      	adcs	r3, r2
   11c2e:	f88d 3015 	strb.w	r3, [sp, #21]
		status = STATUS_INVALID_ADDRESS;
   11c32:	2401      	movs	r4, #1
	return send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   11c34:	f89d 3015 	ldrb.w	r3, [sp, #21]
   11c38:	e9cd 9301 	strd	r9, r3, [sp, #4]
   11c3c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   11c40:	9300      	str	r3, [sp, #0]
   11c42:	4622      	mov	r2, r4
   11c44:	4633      	mov	r3, r6
   11c46:	4641      	mov	r1, r8
   11c48:	4638      	mov	r0, r7
   11c4a:	f7ff f8b5 	bl	10db8 <send_mod_sub_status>
   11c4e:	e7c8      	b.n	11be2 <mod_sub_va_overwrite+0x36>
	mod = get_model(elem, buf, &vnd);
   11c50:	f10d 0215 	add.w	r2, sp, #21
   11c54:	4621      	mov	r1, r4
   11c56:	f014 fd2d 	bl	266b4 <get_model>
	if (!mod) {
   11c5a:	4605      	mov	r5, r0
   11c5c:	b198      	cbz	r0, 11c86 <mod_sub_va_overwrite+0xda>
		status = bt_mesh_va_add(label_uuid, &sub_addr);
   11c5e:	f10d 0116 	add.w	r1, sp, #22
   11c62:	4650      	mov	r0, sl
   11c64:	f7fc fd02 	bl	e66c <bt_mesh_va_add>
		if (status == STATUS_SUCCESS) {
   11c68:	4604      	mov	r4, r0
   11c6a:	2800      	cmp	r0, #0
   11c6c:	d1e2      	bne.n	11c34 <mod_sub_va_overwrite+0x88>
			bt_mesh_model_extensions_walk(mod, mod_sub_clear_visitor, NULL);
   11c6e:	4602      	mov	r2, r0
   11c70:	490a      	ldr	r1, [pc, #40]	; (11c9c <mod_sub_va_overwrite+0xf0>)
   11c72:	4628      	mov	r0, r5
   11c74:	f014 fc30 	bl	264d8 <bt_mesh_model_extensions_walk>
			mod->groups[0] = sub_addr;
   11c78:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   11c7c:	822b      	strh	r3, [r5, #16]
				bt_mesh_model_sub_store(mod);
   11c7e:	4628      	mov	r0, r5
   11c80:	f014 fc34 	bl	264ec <bt_mesh_model_sub_store>
   11c84:	e7d6      	b.n	11c34 <mod_sub_va_overwrite+0x88>
		status = STATUS_INVALID_MODEL;
   11c86:	2402      	movs	r4, #2
   11c88:	e7d4      	b.n	11c34 <mod_sub_va_overwrite+0x88>
   11c8a:	bf00      	nop
   11c8c:	00029870 	.word	0x00029870
   11c90:	000299b8 	.word	0x000299b8
   11c94:	0002de83 	.word	0x0002de83
   11c98:	0002dbe5 	.word	0x0002dbe5
   11c9c:	0002659d 	.word	0x0002659d

00011ca0 <mod_sub_va_del>:
{
   11ca0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((buf->len != 20U) && (buf->len != 22U)) {
   11ca4:	8893      	ldrh	r3, [r2, #4]
   11ca6:	f023 0302 	bic.w	r3, r3, #2
   11caa:	b29b      	uxth	r3, r3
   11cac:	2b14      	cmp	r3, #20
{
   11cae:	b087      	sub	sp, #28
   11cb0:	4606      	mov	r6, r0
   11cb2:	460f      	mov	r7, r1
   11cb4:	4614      	mov	r4, r2
	if ((buf->len != 20U) && (buf->len != 22U)) {
   11cb6:	d00e      	beq.n	11cd6 <mod_sub_va_del+0x36>
   11cb8:	4b33      	ldr	r3, [pc, #204]	; (11d88 <mod_sub_va_del+0xe8>)
   11cba:	4934      	ldr	r1, [pc, #208]	; (11d8c <mod_sub_va_del+0xec>)
		BT_ERR("The message size for the application opcode is incorrect.");
   11cbc:	4834      	ldr	r0, [pc, #208]	; (11d90 <mod_sub_va_del+0xf0>)
   11cbe:	1ac9      	subs	r1, r1, r3
   11cc0:	08c9      	lsrs	r1, r1, #3
   11cc2:	0189      	lsls	r1, r1, #6
   11cc4:	f041 0101 	orr.w	r1, r1, #1
   11cc8:	f00f ff0f 	bl	21aea <log_0>
		return -EMSGSIZE;
   11ccc:	f06f 0079 	mvn.w	r0, #121	; 0x79
}
   11cd0:	b007      	add	sp, #28
   11cd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	elem_addr = net_buf_simple_pull_le16(buf);
   11cd6:	4610      	mov	r0, r2
   11cd8:	f016 fb3e 	bl	28358 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   11cdc:	b203      	sxth	r3, r0
   11cde:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   11ce0:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   11ce2:	dc0c      	bgt.n	11cfe <mod_sub_va_del+0x5e>
   11ce4:	4b28      	ldr	r3, [pc, #160]	; (11d88 <mod_sub_va_del+0xe8>)
   11ce6:	4929      	ldr	r1, [pc, #164]	; (11d8c <mod_sub_va_del+0xec>)
		BT_WARN("Prohibited element address");
   11ce8:	482a      	ldr	r0, [pc, #168]	; (11d94 <mod_sub_va_del+0xf4>)
   11cea:	1ac9      	subs	r1, r1, r3
   11cec:	08c9      	lsrs	r1, r1, #3
   11cee:	0189      	lsls	r1, r1, #6
   11cf0:	f041 0102 	orr.w	r1, r1, #2
   11cf4:	f00f fef9 	bl	21aea <log_0>
		return -EINVAL;
   11cf8:	f06f 0015 	mvn.w	r0, #21
   11cfc:	e7e8      	b.n	11cd0 <mod_sub_va_del+0x30>
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   11cfe:	2110      	movs	r1, #16
   11d00:	4620      	mov	r0, r4
   11d02:	f016 fb19 	bl	28338 <net_buf_simple_pull_mem>
   11d06:	4681      	mov	r9, r0
	elem = bt_mesh_elem_find(elem_addr);
   11d08:	4628      	mov	r0, r5
	mod_id = buf->data;
   11d0a:	f8d4 8000 	ldr.w	r8, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   11d0e:	f7fe fc67 	bl	105e0 <bt_mesh_elem_find>
	if (!elem) {
   11d12:	b9b0      	cbnz	r0, 11d42 <mod_sub_va_del+0xa2>
		vnd = (buf->len == 4U);
   11d14:	88a2      	ldrh	r2, [r4, #4]
		mod = NULL;
   11d16:	9005      	str	r0, [sp, #20]
		vnd = (buf->len == 4U);
   11d18:	1f11      	subs	r1, r2, #4
   11d1a:	424a      	negs	r2, r1
   11d1c:	414a      	adcs	r2, r1
   11d1e:	f88d 2011 	strb.w	r2, [sp, #17]
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   11d22:	f8ad 0012 	strh.w	r0, [sp, #18]
		status = STATUS_INVALID_ADDRESS;
   11d26:	2201      	movs	r2, #1
	return send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   11d28:	f89d 3011 	ldrb.w	r3, [sp, #17]
   11d2c:	e9cd 8301 	strd	r8, r3, [sp, #4]
   11d30:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   11d34:	9300      	str	r3, [sp, #0]
   11d36:	4639      	mov	r1, r7
   11d38:	462b      	mov	r3, r5
   11d3a:	4630      	mov	r0, r6
   11d3c:	f7ff f83c 	bl	10db8 <send_mod_sub_status>
   11d40:	e7c6      	b.n	11cd0 <mod_sub_va_del+0x30>
	mod = get_model(elem, buf, &vnd);
   11d42:	f10d 0211 	add.w	r2, sp, #17
   11d46:	4621      	mov	r1, r4
   11d48:	f014 fcb4 	bl	266b4 <get_model>
   11d4c:	9005      	str	r0, [sp, #20]
	if (!mod) {
   11d4e:	b918      	cbnz	r0, 11d58 <mod_sub_va_del+0xb8>
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   11d50:	f8ad 0012 	strh.w	r0, [sp, #18]
		status = STATUS_INVALID_MODEL;
   11d54:	2202      	movs	r2, #2
		goto send_status;
   11d56:	e7e7      	b.n	11d28 <mod_sub_va_del+0x88>
	status = bt_mesh_va_del(label_uuid, &sub_addr);
   11d58:	f10d 0112 	add.w	r1, sp, #18
   11d5c:	4648      	mov	r0, r9
   11d5e:	f7fc fcdb 	bl	e718 <bt_mesh_va_del>
	if (sub_addr == BT_MESH_ADDR_UNASSIGNED) {
   11d62:	f8bd 1012 	ldrh.w	r1, [sp, #18]
	status = bt_mesh_va_del(label_uuid, &sub_addr);
   11d66:	4602      	mov	r2, r0
	if (sub_addr == BT_MESH_ADDR_UNASSIGNED) {
   11d68:	2900      	cmp	r1, #0
   11d6a:	d0dd      	beq.n	11d28 <mod_sub_va_del+0x88>
	match = bt_mesh_model_find_group(&mod, sub_addr);
   11d6c:	a805      	add	r0, sp, #20
   11d6e:	f7fe fd4b 	bl	10808 <bt_mesh_model_find_group>
	if (match) {
   11d72:	b130      	cbz	r0, 11d82 <mod_sub_va_del+0xe2>
		*match = BT_MESH_ADDR_UNASSIGNED;
   11d74:	2400      	movs	r4, #0
   11d76:	8004      	strh	r4, [r0, #0]
			bt_mesh_model_sub_store(mod);
   11d78:	9805      	ldr	r0, [sp, #20]
   11d7a:	f014 fbb7 	bl	264ec <bt_mesh_model_sub_store>
		status = STATUS_SUCCESS;
   11d7e:	4622      	mov	r2, r4
   11d80:	e7d2      	b.n	11d28 <mod_sub_va_del+0x88>
		status = STATUS_CANNOT_REMOVE;
   11d82:	220c      	movs	r2, #12
   11d84:	e7d0      	b.n	11d28 <mod_sub_va_del+0x88>
   11d86:	bf00      	nop
   11d88:	00029870 	.word	0x00029870
   11d8c:	000299b8 	.word	0x000299b8
   11d90:	0002de83 	.word	0x0002de83
   11d94:	0002dbe5 	.word	0x0002dbe5

00011d98 <mod_sub_del>:
{
   11d98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((buf->len != 6U) && (buf->len != 8U)) {
   11d9c:	8893      	ldrh	r3, [r2, #4]
   11d9e:	2b06      	cmp	r3, #6
{
   11da0:	b087      	sub	sp, #28
   11da2:	4606      	mov	r6, r0
   11da4:	460f      	mov	r7, r1
   11da6:	4691      	mov	r9, r2
	if ((buf->len != 6U) && (buf->len != 8U)) {
   11da8:	d010      	beq.n	11dcc <mod_sub_del+0x34>
   11daa:	2b08      	cmp	r3, #8
   11dac:	d00e      	beq.n	11dcc <mod_sub_del+0x34>
   11dae:	4b2f      	ldr	r3, [pc, #188]	; (11e6c <mod_sub_del+0xd4>)
   11db0:	492f      	ldr	r1, [pc, #188]	; (11e70 <mod_sub_del+0xd8>)
		BT_ERR("The message size for the application opcode is incorrect.");
   11db2:	4830      	ldr	r0, [pc, #192]	; (11e74 <mod_sub_del+0xdc>)
   11db4:	1ac9      	subs	r1, r1, r3
   11db6:	08c9      	lsrs	r1, r1, #3
   11db8:	0189      	lsls	r1, r1, #6
   11dba:	f041 0101 	orr.w	r1, r1, #1
   11dbe:	f00f fe94 	bl	21aea <log_0>
		return -EMSGSIZE;
   11dc2:	f06f 0079 	mvn.w	r0, #121	; 0x79
}
   11dc6:	b007      	add	sp, #28
   11dc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	elem_addr = net_buf_simple_pull_le16(buf);
   11dcc:	4648      	mov	r0, r9
   11dce:	f016 fac3 	bl	28358 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   11dd2:	b203      	sxth	r3, r0
   11dd4:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   11dd6:	4604      	mov	r4, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   11dd8:	dc0c      	bgt.n	11df4 <mod_sub_del+0x5c>
   11dda:	4b24      	ldr	r3, [pc, #144]	; (11e6c <mod_sub_del+0xd4>)
   11ddc:	4924      	ldr	r1, [pc, #144]	; (11e70 <mod_sub_del+0xd8>)
		BT_WARN("Prohibited element address");
   11dde:	4826      	ldr	r0, [pc, #152]	; (11e78 <mod_sub_del+0xe0>)
   11de0:	1ac9      	subs	r1, r1, r3
   11de2:	08c9      	lsrs	r1, r1, #3
   11de4:	0189      	lsls	r1, r1, #6
   11de6:	f041 0102 	orr.w	r1, r1, #2
   11dea:	f00f fe7e 	bl	21aea <log_0>
		return -EINVAL;
   11dee:	f06f 0015 	mvn.w	r0, #21
   11df2:	e7e8      	b.n	11dc6 <mod_sub_del+0x2e>
	sub_addr = net_buf_simple_pull_le16(buf);
   11df4:	4648      	mov	r0, r9
   11df6:	f016 faaf 	bl	28358 <net_buf_simple_pull_le16>
   11dfa:	4605      	mov	r5, r0
	elem = bt_mesh_elem_find(elem_addr);
   11dfc:	4620      	mov	r0, r4
	mod_id = buf->data;
   11dfe:	f8d9 8000 	ldr.w	r8, [r9]
	elem = bt_mesh_elem_find(elem_addr);
   11e02:	f7fe fbed 	bl	105e0 <bt_mesh_elem_find>
	if (!elem) {
   11e06:	b948      	cbnz	r0, 11e1c <mod_sub_del+0x84>
		vnd = (buf->len == 4U);
   11e08:	f8b9 3004 	ldrh.w	r3, [r9, #4]
		mod = NULL;
   11e0c:	9005      	str	r0, [sp, #20]
		vnd = (buf->len == 4U);
   11e0e:	1f1a      	subs	r2, r3, #4
   11e10:	4253      	negs	r3, r2
   11e12:	4153      	adcs	r3, r2
   11e14:	f88d 3013 	strb.w	r3, [sp, #19]
		status = STATUS_INVALID_ADDRESS;
   11e18:	2201      	movs	r2, #1
   11e1a:	e01a      	b.n	11e52 <mod_sub_del+0xba>
	mod = get_model(elem, buf, &vnd);
   11e1c:	f10d 0213 	add.w	r2, sp, #19
   11e20:	4649      	mov	r1, r9
   11e22:	f014 fc47 	bl	266b4 <get_model>
   11e26:	9005      	str	r0, [sp, #20]
	if (!mod) {
   11e28:	b1f0      	cbz	r0, 11e68 <mod_sub_del+0xd0>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr)) {
   11e2a:	f505 4380 	add.w	r3, r5, #16384	; 0x4000
   11e2e:	b29b      	uxth	r3, r3
   11e30:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
   11e34:	d8f0      	bhi.n	11e18 <mod_sub_del+0x80>
	match = bt_mesh_model_find_group(&mod, sub_addr);
   11e36:	4629      	mov	r1, r5
   11e38:	a805      	add	r0, sp, #20
   11e3a:	f7fe fce5 	bl	10808 <bt_mesh_model_find_group>
	if (match) {
   11e3e:	f04f 0900 	mov.w	r9, #0
   11e42:	4602      	mov	r2, r0
   11e44:	b128      	cbz	r0, 11e52 <mod_sub_del+0xba>
		*match = BT_MESH_ADDR_UNASSIGNED;
   11e46:	f8a0 9000 	strh.w	r9, [r0]
			bt_mesh_model_sub_store(mod);
   11e4a:	9805      	ldr	r0, [sp, #20]
   11e4c:	f014 fb4e 	bl	264ec <bt_mesh_model_sub_store>
	status = STATUS_SUCCESS;
   11e50:	464a      	mov	r2, r9
	return send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   11e52:	f89d 3013 	ldrb.w	r3, [sp, #19]
   11e56:	9500      	str	r5, [sp, #0]
   11e58:	e9cd 8301 	strd	r8, r3, [sp, #4]
   11e5c:	4639      	mov	r1, r7
   11e5e:	4623      	mov	r3, r4
   11e60:	4630      	mov	r0, r6
   11e62:	f7fe ffa9 	bl	10db8 <send_mod_sub_status>
   11e66:	e7ae      	b.n	11dc6 <mod_sub_del+0x2e>
		status = STATUS_INVALID_MODEL;
   11e68:	2202      	movs	r2, #2
   11e6a:	e7f2      	b.n	11e52 <mod_sub_del+0xba>
   11e6c:	00029870 	.word	0x00029870
   11e70:	000299b8 	.word	0x000299b8
   11e74:	0002de83 	.word	0x0002de83
   11e78:	0002dbe5 	.word	0x0002dbe5

00011e7c <mod_sub_va_add>:
{
   11e7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((buf->len != 20U) && (buf->len != 22U)) {
   11e80:	8893      	ldrh	r3, [r2, #4]
   11e82:	f023 0302 	bic.w	r3, r3, #2
   11e86:	b29b      	uxth	r3, r3
   11e88:	2b14      	cmp	r3, #20
{
   11e8a:	b087      	sub	sp, #28
   11e8c:	4607      	mov	r7, r0
   11e8e:	4688      	mov	r8, r1
   11e90:	4614      	mov	r4, r2
	if ((buf->len != 20U) && (buf->len != 22U)) {
   11e92:	d00e      	beq.n	11eb2 <mod_sub_va_add+0x36>
   11e94:	4b3a      	ldr	r3, [pc, #232]	; (11f80 <mod_sub_va_add+0x104>)
   11e96:	493b      	ldr	r1, [pc, #236]	; (11f84 <mod_sub_va_add+0x108>)
		BT_ERR("The message size for the application opcode is incorrect.");
   11e98:	483b      	ldr	r0, [pc, #236]	; (11f88 <mod_sub_va_add+0x10c>)
   11e9a:	1ac9      	subs	r1, r1, r3
   11e9c:	08c9      	lsrs	r1, r1, #3
   11e9e:	0189      	lsls	r1, r1, #6
   11ea0:	f041 0101 	orr.w	r1, r1, #1
   11ea4:	f00f fe21 	bl	21aea <log_0>
		return -EMSGSIZE;
   11ea8:	f06f 0079 	mvn.w	r0, #121	; 0x79
}
   11eac:	b007      	add	sp, #28
   11eae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	elem_addr = net_buf_simple_pull_le16(buf);
   11eb2:	4610      	mov	r0, r2
   11eb4:	f016 fa50 	bl	28358 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   11eb8:	b203      	sxth	r3, r0
   11eba:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   11ebc:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   11ebe:	dc0c      	bgt.n	11eda <mod_sub_va_add+0x5e>
   11ec0:	4b2f      	ldr	r3, [pc, #188]	; (11f80 <mod_sub_va_add+0x104>)
   11ec2:	4930      	ldr	r1, [pc, #192]	; (11f84 <mod_sub_va_add+0x108>)
		BT_WARN("Prohibited element address");
   11ec4:	4831      	ldr	r0, [pc, #196]	; (11f8c <mod_sub_va_add+0x110>)
   11ec6:	1ac9      	subs	r1, r1, r3
   11ec8:	08c9      	lsrs	r1, r1, #3
   11eca:	0189      	lsls	r1, r1, #6
   11ecc:	f041 0102 	orr.w	r1, r1, #2
   11ed0:	f00f fe0b 	bl	21aea <log_0>
		return -EINVAL;
   11ed4:	f06f 0015 	mvn.w	r0, #21
   11ed8:	e7e8      	b.n	11eac <mod_sub_va_add+0x30>
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   11eda:	2110      	movs	r1, #16
   11edc:	4620      	mov	r0, r4
   11ede:	f016 fa2b 	bl	28338 <net_buf_simple_pull_mem>
   11ee2:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
   11ee4:	4628      	mov	r0, r5
	mod_id = buf->data;
   11ee6:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   11eea:	f7fe fb79 	bl	105e0 <bt_mesh_elem_find>
	if (!elem) {
   11eee:	b9b8      	cbnz	r0, 11f20 <mod_sub_va_add+0xa4>
		vnd = (buf->len == 4U);
   11ef0:	88a2      	ldrh	r2, [r4, #4]
		mod = NULL;
   11ef2:	9005      	str	r0, [sp, #20]
		vnd = (buf->len == 4U);
   11ef4:	1f11      	subs	r1, r2, #4
   11ef6:	424a      	negs	r2, r1
   11ef8:	414a      	adcs	r2, r1
   11efa:	f88d 2011 	strb.w	r2, [sp, #17]
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   11efe:	f8ad 0012 	strh.w	r0, [sp, #18]
		status = STATUS_INVALID_ADDRESS;
   11f02:	2401      	movs	r4, #1
	return send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   11f04:	f89d 3011 	ldrb.w	r3, [sp, #17]
   11f08:	e9cd 9301 	strd	r9, r3, [sp, #4]
   11f0c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   11f10:	9300      	str	r3, [sp, #0]
   11f12:	4622      	mov	r2, r4
   11f14:	462b      	mov	r3, r5
   11f16:	4641      	mov	r1, r8
   11f18:	4638      	mov	r0, r7
   11f1a:	f7fe ff4d 	bl	10db8 <send_mod_sub_status>
   11f1e:	e7c5      	b.n	11eac <mod_sub_va_add+0x30>
	mod = get_model(elem, buf, &vnd);
   11f20:	f10d 0211 	add.w	r2, sp, #17
   11f24:	4621      	mov	r1, r4
   11f26:	f014 fbc5 	bl	266b4 <get_model>
   11f2a:	9005      	str	r0, [sp, #20]
	if (!mod) {
   11f2c:	b918      	cbnz	r0, 11f36 <mod_sub_va_add+0xba>
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   11f2e:	f8ad 0012 	strh.w	r0, [sp, #18]
		status = STATUS_INVALID_MODEL;
   11f32:	2402      	movs	r4, #2
		goto send_status;
   11f34:	e7e6      	b.n	11f04 <mod_sub_va_add+0x88>
	status = bt_mesh_va_add(label_uuid, &sub_addr);
   11f36:	f10d 0112 	add.w	r1, sp, #18
   11f3a:	4630      	mov	r0, r6
   11f3c:	f7fc fb96 	bl	e66c <bt_mesh_va_add>
	if (status != STATUS_SUCCESS) {
   11f40:	4604      	mov	r4, r0
   11f42:	2800      	cmp	r0, #0
   11f44:	d1de      	bne.n	11f04 <mod_sub_va_add+0x88>
	if (bt_mesh_model_find_group(&mod, sub_addr)) {
   11f46:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   11f4a:	a805      	add	r0, sp, #20
   11f4c:	f7fe fc5c 	bl	10808 <bt_mesh_model_find_group>
		bt_mesh_va_del(label_uuid, NULL);
   11f50:	4621      	mov	r1, r4
	if (bt_mesh_model_find_group(&mod, sub_addr)) {
   11f52:	b118      	cbz	r0, 11f5c <mod_sub_va_add+0xe0>
		bt_mesh_va_del(label_uuid, NULL);
   11f54:	4630      	mov	r0, r6
   11f56:	f7fc fbdf 	bl	e718 <bt_mesh_va_del>
		goto send_status;
   11f5a:	e7d3      	b.n	11f04 <mod_sub_va_add+0x88>
	entry = bt_mesh_model_find_group(&mod, BT_MESH_ADDR_UNASSIGNED);
   11f5c:	a805      	add	r0, sp, #20
   11f5e:	f7fe fc53 	bl	10808 <bt_mesh_model_find_group>
	if (!entry) {
   11f62:	b928      	cbnz	r0, 11f70 <mod_sub_va_add+0xf4>
		bt_mesh_va_del(label_uuid, NULL);
   11f64:	4621      	mov	r1, r4
   11f66:	4630      	mov	r0, r6
   11f68:	f7fc fbd6 	bl	e718 <bt_mesh_va_del>
		status = STATUS_INSUFF_RESOURCES;
   11f6c:	2405      	movs	r4, #5
		goto send_status;
   11f6e:	e7c9      	b.n	11f04 <mod_sub_va_add+0x88>
	*entry = sub_addr;
   11f70:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   11f74:	8003      	strh	r3, [r0, #0]
		bt_mesh_model_sub_store(mod);
   11f76:	9805      	ldr	r0, [sp, #20]
   11f78:	f014 fab8 	bl	264ec <bt_mesh_model_sub_store>
	status = STATUS_SUCCESS;
   11f7c:	e7c2      	b.n	11f04 <mod_sub_va_add+0x88>
   11f7e:	bf00      	nop
   11f80:	00029870 	.word	0x00029870
   11f84:	000299b8 	.word	0x000299b8
   11f88:	0002de83 	.word	0x0002de83
   11f8c:	0002dbe5 	.word	0x0002dbe5

00011f90 <mod_sub_add>:
{
   11f90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((buf->len != 6U) && (buf->len != 8U)) {
   11f94:	8893      	ldrh	r3, [r2, #4]
   11f96:	2b06      	cmp	r3, #6
{
   11f98:	b087      	sub	sp, #28
   11f9a:	4607      	mov	r7, r0
   11f9c:	4688      	mov	r8, r1
   11f9e:	4614      	mov	r4, r2
	if ((buf->len != 6U) && (buf->len != 8U)) {
   11fa0:	d010      	beq.n	11fc4 <mod_sub_add+0x34>
   11fa2:	2b08      	cmp	r3, #8
   11fa4:	d00e      	beq.n	11fc4 <mod_sub_add+0x34>
   11fa6:	4b30      	ldr	r3, [pc, #192]	; (12068 <mod_sub_add+0xd8>)
   11fa8:	4930      	ldr	r1, [pc, #192]	; (1206c <mod_sub_add+0xdc>)
		BT_ERR("The message size for the application opcode is incorrect.");
   11faa:	4831      	ldr	r0, [pc, #196]	; (12070 <mod_sub_add+0xe0>)
   11fac:	1ac9      	subs	r1, r1, r3
   11fae:	08c9      	lsrs	r1, r1, #3
   11fb0:	0189      	lsls	r1, r1, #6
   11fb2:	f041 0101 	orr.w	r1, r1, #1
   11fb6:	f00f fd98 	bl	21aea <log_0>
		return -EMSGSIZE;
   11fba:	f06f 0079 	mvn.w	r0, #121	; 0x79
}
   11fbe:	b007      	add	sp, #28
   11fc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	elem_addr = net_buf_simple_pull_le16(buf);
   11fc4:	4620      	mov	r0, r4
   11fc6:	f016 f9c7 	bl	28358 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   11fca:	b203      	sxth	r3, r0
   11fcc:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   11fce:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   11fd0:	dc0c      	bgt.n	11fec <mod_sub_add+0x5c>
   11fd2:	4b25      	ldr	r3, [pc, #148]	; (12068 <mod_sub_add+0xd8>)
   11fd4:	4925      	ldr	r1, [pc, #148]	; (1206c <mod_sub_add+0xdc>)
		BT_WARN("Prohibited element address");
   11fd6:	4827      	ldr	r0, [pc, #156]	; (12074 <mod_sub_add+0xe4>)
   11fd8:	1ac9      	subs	r1, r1, r3
   11fda:	08c9      	lsrs	r1, r1, #3
   11fdc:	0189      	lsls	r1, r1, #6
   11fde:	f041 0102 	orr.w	r1, r1, #2
   11fe2:	f00f fd82 	bl	21aea <log_0>
		return -EINVAL;
   11fe6:	f06f 0015 	mvn.w	r0, #21
   11fea:	e7e8      	b.n	11fbe <mod_sub_add+0x2e>
	sub_addr = net_buf_simple_pull_le16(buf);
   11fec:	4620      	mov	r0, r4
   11fee:	f016 f9b3 	bl	28358 <net_buf_simple_pull_le16>
   11ff2:	4605      	mov	r5, r0
	elem = bt_mesh_elem_find(elem_addr);
   11ff4:	4630      	mov	r0, r6
	mod_id = buf->data;
   11ff6:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   11ffa:	f7fe faf1 	bl	105e0 <bt_mesh_elem_find>
	if (!elem) {
   11ffe:	b940      	cbnz	r0, 12012 <mod_sub_add+0x82>
		vnd = (buf->len == 4U);
   12000:	88a3      	ldrh	r3, [r4, #4]
		mod = NULL;
   12002:	9005      	str	r0, [sp, #20]
		vnd = (buf->len == 4U);
   12004:	1f1a      	subs	r2, r3, #4
   12006:	4253      	negs	r3, r2
   12008:	4153      	adcs	r3, r2
   1200a:	f88d 3013 	strb.w	r3, [sp, #19]
		status = STATUS_INVALID_ADDRESS;
   1200e:	2201      	movs	r2, #1
   12010:	e01d      	b.n	1204e <mod_sub_add+0xbe>
	mod = get_model(elem, buf, &vnd);
   12012:	f10d 0213 	add.w	r2, sp, #19
   12016:	4621      	mov	r1, r4
   12018:	f014 fb4c 	bl	266b4 <get_model>
   1201c:	9005      	str	r0, [sp, #20]
	if (!mod) {
   1201e:	b1a8      	cbz	r0, 1204c <mod_sub_add+0xbc>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr)) {
   12020:	f505 4380 	add.w	r3, r5, #16384	; 0x4000
   12024:	b29b      	uxth	r3, r3
   12026:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
   1202a:	d8f0      	bhi.n	1200e <mod_sub_add+0x7e>
	if (bt_mesh_model_find_group(&mod, sub_addr)) {
   1202c:	4629      	mov	r1, r5
   1202e:	a805      	add	r0, sp, #20
   12030:	f7fe fbea 	bl	10808 <bt_mesh_model_find_group>
   12034:	b940      	cbnz	r0, 12048 <mod_sub_add+0xb8>
	entry = bt_mesh_model_find_group(&mod, BT_MESH_ADDR_UNASSIGNED);
   12036:	4601      	mov	r1, r0
   12038:	a805      	add	r0, sp, #20
   1203a:	f7fe fbe5 	bl	10808 <bt_mesh_model_find_group>
	if (!entry) {
   1203e:	b188      	cbz	r0, 12064 <mod_sub_add+0xd4>
	*entry = sub_addr;
   12040:	8005      	strh	r5, [r0, #0]
		bt_mesh_model_sub_store(mod);
   12042:	9805      	ldr	r0, [sp, #20]
   12044:	f014 fa52 	bl	264ec <bt_mesh_model_sub_store>
		status = STATUS_SUCCESS;
   12048:	2200      	movs	r2, #0
   1204a:	e000      	b.n	1204e <mod_sub_add+0xbe>
		status = STATUS_INVALID_MODEL;
   1204c:	2202      	movs	r2, #2
	return send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   1204e:	f89d 3013 	ldrb.w	r3, [sp, #19]
   12052:	9500      	str	r5, [sp, #0]
   12054:	e9cd 9301 	strd	r9, r3, [sp, #4]
   12058:	4641      	mov	r1, r8
   1205a:	4633      	mov	r3, r6
   1205c:	4638      	mov	r0, r7
   1205e:	f7fe feab 	bl	10db8 <send_mod_sub_status>
   12062:	e7ac      	b.n	11fbe <mod_sub_add+0x2e>
		status = STATUS_INSUFF_RESOURCES;
   12064:	2205      	movs	r2, #5
   12066:	e7f2      	b.n	1204e <mod_sub_add+0xbe>
   12068:	00029870 	.word	0x00029870
   1206c:	000299b8 	.word	0x000299b8
   12070:	0002de83 	.word	0x0002de83
   12074:	0002dbe5 	.word	0x0002dbe5

00012078 <mod_pub_get>:
{
   12078:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((buf->len != 4U) && (buf->len != 6U)) {
   1207c:	8893      	ldrh	r3, [r2, #4]
   1207e:	f023 0302 	bic.w	r3, r3, #2
   12082:	b29b      	uxth	r3, r3
   12084:	2b04      	cmp	r3, #4
{
   12086:	b087      	sub	sp, #28
   12088:	4606      	mov	r6, r0
   1208a:	460f      	mov	r7, r1
   1208c:	4691      	mov	r9, r2
	if ((buf->len != 4U) && (buf->len != 6U)) {
   1208e:	d00e      	beq.n	120ae <mod_pub_get+0x36>
   12090:	4b26      	ldr	r3, [pc, #152]	; (1212c <mod_pub_get+0xb4>)
   12092:	4927      	ldr	r1, [pc, #156]	; (12130 <mod_pub_get+0xb8>)
		BT_ERR("The message size for the application opcode is incorrect.");
   12094:	4827      	ldr	r0, [pc, #156]	; (12134 <mod_pub_get+0xbc>)
   12096:	1ac9      	subs	r1, r1, r3
   12098:	08c9      	lsrs	r1, r1, #3
   1209a:	0189      	lsls	r1, r1, #6
   1209c:	f041 0101 	orr.w	r1, r1, #1
   120a0:	f00f fd23 	bl	21aea <log_0>
		return -EMSGSIZE;
   120a4:	f06f 0079 	mvn.w	r0, #121	; 0x79
}
   120a8:	b007      	add	sp, #28
   120aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	elem_addr = net_buf_simple_pull_le16(buf);
   120ae:	4610      	mov	r0, r2
   120b0:	f016 f952 	bl	28358 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   120b4:	b203      	sxth	r3, r0
   120b6:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   120b8:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   120ba:	dc0c      	bgt.n	120d6 <mod_pub_get+0x5e>
   120bc:	4b1b      	ldr	r3, [pc, #108]	; (1212c <mod_pub_get+0xb4>)
   120be:	491c      	ldr	r1, [pc, #112]	; (12130 <mod_pub_get+0xb8>)
		BT_WARN("Prohibited element address");
   120c0:	481d      	ldr	r0, [pc, #116]	; (12138 <mod_pub_get+0xc0>)
   120c2:	1ac9      	subs	r1, r1, r3
   120c4:	08c9      	lsrs	r1, r1, #3
   120c6:	0189      	lsls	r1, r1, #6
   120c8:	f041 0102 	orr.w	r1, r1, #2
   120cc:	f00f fd0d 	bl	21aea <log_0>
		return -EINVAL;
   120d0:	f06f 0015 	mvn.w	r0, #21
   120d4:	e7e8      	b.n	120a8 <mod_pub_get+0x30>
	mod_id = buf->data;
   120d6:	f8d9 8000 	ldr.w	r8, [r9]
	elem = bt_mesh_elem_find(elem_addr);
   120da:	f7fe fa81 	bl	105e0 <bt_mesh_elem_find>
	if (!elem) {
   120de:	4604      	mov	r4, r0
   120e0:	b948      	cbnz	r0, 120f6 <mod_pub_get+0x7e>
		vnd = (buf->len == 4U);
   120e2:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   120e6:	1f1a      	subs	r2, r3, #4
   120e8:	4253      	negs	r3, r2
   120ea:	4153      	adcs	r3, r2
   120ec:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
   120f0:	2201      	movs	r2, #1
	uint16_t elem_addr, pub_addr = 0U;
   120f2:	4623      	mov	r3, r4
   120f4:	e00a      	b.n	1210c <mod_pub_get+0x94>
	mod = get_model(elem, buf, &vnd);
   120f6:	f10d 0217 	add.w	r2, sp, #23
   120fa:	4649      	mov	r1, r9
   120fc:	f014 fada 	bl	266b4 <get_model>
	if (!mod) {
   12100:	4604      	mov	r4, r0
   12102:	b178      	cbz	r0, 12124 <mod_pub_get+0xac>
	if (!mod->pub) {
   12104:	6883      	ldr	r3, [r0, #8]
   12106:	b17b      	cbz	r3, 12128 <mod_pub_get+0xb0>
	pub_addr = mod->pub->addr;
   12108:	889b      	ldrh	r3, [r3, #4]
	status = STATUS_SUCCESS;
   1210a:	2200      	movs	r2, #0
	return send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
   1210c:	e9cd 2802 	strd	r2, r8, [sp, #8]
   12110:	f89d 2017 	ldrb.w	r2, [sp, #23]
   12114:	9200      	str	r2, [sp, #0]
   12116:	9401      	str	r4, [sp, #4]
   12118:	462a      	mov	r2, r5
   1211a:	4639      	mov	r1, r7
   1211c:	4630      	mov	r0, r6
   1211e:	f7ff f8e5 	bl	112ec <send_mod_pub_status>
   12122:	e7c1      	b.n	120a8 <mod_pub_get+0x30>
		status = STATUS_INVALID_MODEL;
   12124:	2202      	movs	r2, #2
   12126:	e7e4      	b.n	120f2 <mod_pub_get+0x7a>
		status = STATUS_NVAL_PUB_PARAM;
   12128:	2207      	movs	r2, #7
   1212a:	e7ef      	b.n	1210c <mod_pub_get+0x94>
   1212c:	00029870 	.word	0x00029870
   12130:	000299b8 	.word	0x000299b8
   12134:	0002de83 	.word	0x0002de83
   12138:	0002dbe5 	.word	0x0002dbe5

0001213c <mod_sub_list_visitor>:
{
   1213c:	b538      	push	{r3, r4, r5, lr}
	if (mod->elem_idx != visit->elem_idx) {
   1213e:	880b      	ldrh	r3, [r1, #0]
   12140:	7902      	ldrb	r2, [r0, #4]
   12142:	429a      	cmp	r2, r3
{
   12144:	4605      	mov	r5, r0
   12146:	460c      	mov	r4, r1
	if (mod->elem_idx != visit->elem_idx) {
   12148:	d121      	bne.n	1218e <mod_sub_list_visitor+0x52>
		if (mod->groups[i] == BT_MESH_ADDR_UNASSIGNED) {
   1214a:	8a03      	ldrh	r3, [r0, #16]
   1214c:	b143      	cbz	r3, 12160 <mod_sub_list_visitor+0x24>
		if (net_buf_simple_tailroom(visit->msg) <
   1214e:	6848      	ldr	r0, [r1, #4]
   12150:	f016 f92f 	bl	283b2 <net_buf_simple_tailroom>
   12154:	2805      	cmp	r0, #5
   12156:	d90a      	bls.n	1216e <mod_sub_list_visitor+0x32>
		net_buf_simple_add_le16(visit->msg, mod->groups[i]);
   12158:	8a29      	ldrh	r1, [r5, #16]
   1215a:	6860      	ldr	r0, [r4, #4]
   1215c:	f016 f88b 	bl	28276 <net_buf_simple_add_le16>
		if (mod->groups[i] == BT_MESH_ADDR_UNASSIGNED) {
   12160:	8a6b      	ldrh	r3, [r5, #18]
   12162:	b1a3      	cbz	r3, 1218e <mod_sub_list_visitor+0x52>
		if (net_buf_simple_tailroom(visit->msg) <
   12164:	6860      	ldr	r0, [r4, #4]
   12166:	f016 f924 	bl	283b2 <net_buf_simple_tailroom>
   1216a:	2805      	cmp	r0, #5
   1216c:	d80b      	bhi.n	12186 <mod_sub_list_visitor+0x4a>
   1216e:	4b09      	ldr	r3, [pc, #36]	; (12194 <mod_sub_list_visitor+0x58>)
   12170:	4909      	ldr	r1, [pc, #36]	; (12198 <mod_sub_list_visitor+0x5c>)
			BT_WARN("No room for all groups");
   12172:	480a      	ldr	r0, [pc, #40]	; (1219c <mod_sub_list_visitor+0x60>)
   12174:	1ac9      	subs	r1, r1, r3
   12176:	08c9      	lsrs	r1, r1, #3
   12178:	0189      	lsls	r1, r1, #6
   1217a:	f041 0102 	orr.w	r1, r1, #2
   1217e:	f00f fcb4 	bl	21aea <log_0>
			return BT_MESH_WALK_STOP;
   12182:	2000      	movs	r0, #0
}
   12184:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_simple_add_le16(visit->msg, mod->groups[i]);
   12186:	8a69      	ldrh	r1, [r5, #18]
   12188:	6860      	ldr	r0, [r4, #4]
   1218a:	f016 f874 	bl	28276 <net_buf_simple_add_le16>
		return BT_MESH_WALK_CONTINUE;
   1218e:	2001      	movs	r0, #1
   12190:	e7f8      	b.n	12184 <mod_sub_list_visitor+0x48>
   12192:	bf00      	nop
   12194:	00029870 	.word	0x00029870
   12198:	000299b8 	.word	0x000299b8
   1219c:	0002deeb 	.word	0x0002deeb

000121a0 <net_transmit_get>:
{
   121a0:	b530      	push	{r4, r5, lr}
   121a2:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_TRANSMIT_STATUS, 1);
   121a4:	ab03      	add	r3, sp, #12
   121a6:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   121aa:	4604      	mov	r4, r0
   121ac:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_NET_TRANSMIT_STATUS);
   121ae:	a805      	add	r0, sp, #20
   121b0:	f248 0125 	movw	r1, #32805	; 0x8025
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_TRANSMIT_STATUS, 1);
   121b4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   121b8:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NET_TRANSMIT_STATUS);
   121ba:	f014 f9a5 	bl	26508 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_net_transmit_get());
   121be:	f7f9 fb5d 	bl	b87c <bt_mesh_net_transmit_get>
   121c2:	4601      	mov	r1, r0
   121c4:	a805      	add	r0, sp, #20
   121c6:	f016 f84e 	bl	28266 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   121ca:	2300      	movs	r3, #0
   121cc:	9300      	str	r3, [sp, #0]
   121ce:	aa05      	add	r2, sp, #20
   121d0:	4629      	mov	r1, r5
   121d2:	4620      	mov	r0, r4
   121d4:	f7fe fa92 	bl	106fc <bt_mesh_model_send>
   121d8:	b148      	cbz	r0, 121ee <net_transmit_get+0x4e>
   121da:	4906      	ldr	r1, [pc, #24]	; (121f4 <net_transmit_get+0x54>)
   121dc:	4b06      	ldr	r3, [pc, #24]	; (121f8 <net_transmit_get+0x58>)
		BT_ERR("Unable to send Config Network Transmit Status");
   121de:	4807      	ldr	r0, [pc, #28]	; (121fc <net_transmit_get+0x5c>)
   121e0:	1ac9      	subs	r1, r1, r3
   121e2:	08c9      	lsrs	r1, r1, #3
   121e4:	0189      	lsls	r1, r1, #6
   121e6:	f041 0101 	orr.w	r1, r1, #1
   121ea:	f00f fc7e 	bl	21aea <log_0>
}
   121ee:	2000      	movs	r0, #0
   121f0:	b009      	add	sp, #36	; 0x24
   121f2:	bd30      	pop	{r4, r5, pc}
   121f4:	000299b8 	.word	0x000299b8
   121f8:	00029870 	.word	0x00029870
   121fc:	0002df02 	.word	0x0002df02

00012200 <send_gatt_proxy_status>:
{
   12200:	b530      	push	{r4, r5, lr}
   12202:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_GATT_PROXY_STATUS, 1);
   12204:	ab03      	add	r3, sp, #12
   12206:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   1220a:	4604      	mov	r4, r0
   1220c:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_GATT_PROXY_STATUS);
   1220e:	a805      	add	r0, sp, #20
   12210:	f248 0114 	movw	r1, #32788	; 0x8014
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_GATT_PROXY_STATUS, 1);
   12214:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12218:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_GATT_PROXY_STATUS);
   1221a:	f014 f975 	bl	26508 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_gatt_proxy_get());
   1221e:	f7f9 fae9 	bl	b7f4 <bt_mesh_gatt_proxy_get>
   12222:	4601      	mov	r1, r0
   12224:	a805      	add	r0, sp, #20
   12226:	f016 f81e 	bl	28266 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1222a:	2300      	movs	r3, #0
   1222c:	9300      	str	r3, [sp, #0]
   1222e:	aa05      	add	r2, sp, #20
   12230:	4629      	mov	r1, r5
   12232:	4620      	mov	r0, r4
   12234:	f7fe fa62 	bl	106fc <bt_mesh_model_send>
   12238:	b148      	cbz	r0, 1224e <send_gatt_proxy_status+0x4e>
   1223a:	4906      	ldr	r1, [pc, #24]	; (12254 <send_gatt_proxy_status+0x54>)
   1223c:	4b06      	ldr	r3, [pc, #24]	; (12258 <send_gatt_proxy_status+0x58>)
		BT_ERR("Unable to send GATT Proxy Status");
   1223e:	4807      	ldr	r0, [pc, #28]	; (1225c <send_gatt_proxy_status+0x5c>)
   12240:	1ac9      	subs	r1, r1, r3
   12242:	08c9      	lsrs	r1, r1, #3
   12244:	0189      	lsls	r1, r1, #6
   12246:	f041 0101 	orr.w	r1, r1, #1
   1224a:	f00f fc4e 	bl	21aea <log_0>
}
   1224e:	2000      	movs	r0, #0
   12250:	b009      	add	sp, #36	; 0x24
   12252:	bd30      	pop	{r4, r5, pc}
   12254:	000299b8 	.word	0x000299b8
   12258:	00029870 	.word	0x00029870
   1225c:	0002df30 	.word	0x0002df30

00012260 <gatt_proxy_set>:
{
   12260:	b538      	push	{r3, r4, r5, lr}
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   12262:	6813      	ldr	r3, [r2, #0]
{
   12264:	460d      	mov	r5, r1
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   12266:	7819      	ldrb	r1, [r3, #0]
   12268:	2901      	cmp	r1, #1
{
   1226a:	4604      	mov	r4, r0
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   1226c:	d808      	bhi.n	12280 <gatt_proxy_set+0x20>
	(void)bt_mesh_gatt_proxy_set(buf->data[0]);
   1226e:	4608      	mov	r0, r1
   12270:	f7f9 fa9a 	bl	b7a8 <bt_mesh_gatt_proxy_set>
	return send_gatt_proxy_status(model, ctx);
   12274:	4629      	mov	r1, r5
   12276:	4620      	mov	r0, r4
}
   12278:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return send_gatt_proxy_status(model, ctx);
   1227c:	f7ff bfc0 	b.w	12200 <send_gatt_proxy_status>
   12280:	4b06      	ldr	r3, [pc, #24]	; (1229c <gatt_proxy_set+0x3c>)
   12282:	4a07      	ldr	r2, [pc, #28]	; (122a0 <gatt_proxy_set+0x40>)
		BT_WARN("Invalid GATT Proxy value 0x%02x", buf->data[0]);
   12284:	4807      	ldr	r0, [pc, #28]	; (122a4 <gatt_proxy_set+0x44>)
   12286:	1ad2      	subs	r2, r2, r3
   12288:	08d2      	lsrs	r2, r2, #3
   1228a:	0192      	lsls	r2, r2, #6
   1228c:	f042 0202 	orr.w	r2, r2, #2
   12290:	f00f fc38 	bl	21b04 <log_1>
}
   12294:	f06f 0015 	mvn.w	r0, #21
   12298:	bd38      	pop	{r3, r4, r5, pc}
   1229a:	bf00      	nop
   1229c:	00029870 	.word	0x00029870
   122a0:	000299b8 	.word	0x000299b8
   122a4:	0002df51 	.word	0x0002df51

000122a8 <default_ttl_get>:
{
   122a8:	b530      	push	{r4, r5, lr}
   122aa:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_DEFAULT_TTL_STATUS, 1);
   122ac:	ab03      	add	r3, sp, #12
   122ae:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   122b2:	4604      	mov	r4, r0
   122b4:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_DEFAULT_TTL_STATUS);
   122b6:	a805      	add	r0, sp, #20
   122b8:	f248 010e 	movw	r1, #32782	; 0x800e
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_DEFAULT_TTL_STATUS, 1);
   122bc:	e9cd 2306 	strd	r2, r3, [sp, #24]
   122c0:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_DEFAULT_TTL_STATUS);
   122c2:	f014 f921 	bl	26508 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_default_ttl_get());
   122c6:	f7f9 fabd 	bl	b844 <bt_mesh_default_ttl_get>
   122ca:	4601      	mov	r1, r0
   122cc:	a805      	add	r0, sp, #20
   122ce:	f015 ffca 	bl	28266 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   122d2:	2300      	movs	r3, #0
   122d4:	9300      	str	r3, [sp, #0]
   122d6:	aa05      	add	r2, sp, #20
   122d8:	4629      	mov	r1, r5
   122da:	4620      	mov	r0, r4
   122dc:	f7fe fa0e 	bl	106fc <bt_mesh_model_send>
   122e0:	b148      	cbz	r0, 122f6 <default_ttl_get+0x4e>
   122e2:	4906      	ldr	r1, [pc, #24]	; (122fc <default_ttl_get+0x54>)
   122e4:	4b06      	ldr	r3, [pc, #24]	; (12300 <default_ttl_get+0x58>)
		BT_ERR("Unable to send Default TTL Status response");
   122e6:	4807      	ldr	r0, [pc, #28]	; (12304 <default_ttl_get+0x5c>)
   122e8:	1ac9      	subs	r1, r1, r3
   122ea:	08c9      	lsrs	r1, r1, #3
   122ec:	0189      	lsls	r1, r1, #6
   122ee:	f041 0101 	orr.w	r1, r1, #1
   122f2:	f00f fbfa 	bl	21aea <log_0>
}
   122f6:	2000      	movs	r0, #0
   122f8:	b009      	add	sp, #36	; 0x24
   122fa:	bd30      	pop	{r4, r5, pc}
   122fc:	000299b8 	.word	0x000299b8
   12300:	00029870 	.word	0x00029870
   12304:	0002dd34 	.word	0x0002dd34

00012308 <beacon_get>:
{
   12308:	b530      	push	{r4, r5, lr}
   1230a:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_BEACON_STATUS, 1);
   1230c:	ab03      	add	r3, sp, #12
   1230e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   12312:	4604      	mov	r4, r0
   12314:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_BEACON_STATUS);
   12316:	a805      	add	r0, sp, #20
   12318:	f248 010b 	movw	r1, #32779	; 0x800b
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_BEACON_STATUS, 1);
   1231c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12320:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_BEACON_STATUS);
   12322:	f014 f8f1 	bl	26508 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_beacon_enabled());
   12326:	f7f9 fa35 	bl	b794 <bt_mesh_beacon_enabled>
   1232a:	4601      	mov	r1, r0
   1232c:	a805      	add	r0, sp, #20
   1232e:	f015 ff9a 	bl	28266 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   12332:	2300      	movs	r3, #0
   12334:	9300      	str	r3, [sp, #0]
   12336:	aa05      	add	r2, sp, #20
   12338:	4629      	mov	r1, r5
   1233a:	4620      	mov	r0, r4
   1233c:	f7fe f9de 	bl	106fc <bt_mesh_model_send>
   12340:	b148      	cbz	r0, 12356 <beacon_get+0x4e>
   12342:	4906      	ldr	r1, [pc, #24]	; (1235c <beacon_get+0x54>)
   12344:	4b06      	ldr	r3, [pc, #24]	; (12360 <beacon_get+0x58>)
		BT_ERR("Unable to send Config Beacon Status response");
   12346:	4807      	ldr	r0, [pc, #28]	; (12364 <beacon_get+0x5c>)
   12348:	1ac9      	subs	r1, r1, r3
   1234a:	08c9      	lsrs	r1, r1, #3
   1234c:	0189      	lsls	r1, r1, #6
   1234e:	f041 0101 	orr.w	r1, r1, #1
   12352:	f00f fbca 	bl	21aea <log_0>
}
   12356:	2000      	movs	r0, #0
   12358:	b009      	add	sp, #36	; 0x24
   1235a:	bd30      	pop	{r4, r5, pc}
   1235c:	000299b8 	.word	0x000299b8
   12360:	00029870 	.word	0x00029870
   12364:	0002dd82 	.word	0x0002dd82

00012368 <mod_app_bind>:
{
   12368:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1236c:	4614      	mov	r4, r2
   1236e:	b08b      	sub	sp, #44	; 0x2c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_APP_STATUS, 9);
   12370:	ab06      	add	r3, sp, #24
   12372:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   12376:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1237a:	9303      	str	r3, [sp, #12]
	if ((buf->len != 6U) && (buf->len != 8U)) {
   1237c:	88a3      	ldrh	r3, [r4, #4]
   1237e:	2b06      	cmp	r3, #6
{
   12380:	4607      	mov	r7, r0
   12382:	4688      	mov	r8, r1
	if ((buf->len != 6U) && (buf->len != 8U)) {
   12384:	d010      	beq.n	123a8 <mod_app_bind+0x40>
   12386:	2b08      	cmp	r3, #8
   12388:	d00e      	beq.n	123a8 <mod_app_bind+0x40>
   1238a:	4b44      	ldr	r3, [pc, #272]	; (1249c <mod_app_bind+0x134>)
   1238c:	4944      	ldr	r1, [pc, #272]	; (124a0 <mod_app_bind+0x138>)
		BT_ERR("The message size for the application opcode is incorrect.");
   1238e:	4845      	ldr	r0, [pc, #276]	; (124a4 <mod_app_bind+0x13c>)
   12390:	1ac9      	subs	r1, r1, r3
   12392:	08c9      	lsrs	r1, r1, #3
   12394:	0189      	lsls	r1, r1, #6
   12396:	f041 0101 	orr.w	r1, r1, #1
   1239a:	f00f fba6 	bl	21aea <log_0>
		return -EMSGSIZE;
   1239e:	f06f 0079 	mvn.w	r0, #121	; 0x79
}
   123a2:	b00b      	add	sp, #44	; 0x2c
   123a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	elem_addr = net_buf_simple_pull_le16(buf);
   123a8:	4620      	mov	r0, r4
   123aa:	f015 ffd5 	bl	28358 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   123ae:	b203      	sxth	r3, r0
   123b0:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   123b2:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   123b4:	dc0c      	bgt.n	123d0 <mod_app_bind+0x68>
   123b6:	4b39      	ldr	r3, [pc, #228]	; (1249c <mod_app_bind+0x134>)
   123b8:	4939      	ldr	r1, [pc, #228]	; (124a0 <mod_app_bind+0x138>)
		BT_WARN("Prohibited element address");
   123ba:	483b      	ldr	r0, [pc, #236]	; (124a8 <mod_app_bind+0x140>)
   123bc:	1ac9      	subs	r1, r1, r3
   123be:	08c9      	lsrs	r1, r1, #3
   123c0:	0189      	lsls	r1, r1, #6
   123c2:	f041 0102 	orr.w	r1, r1, #2
   123c6:	f00f fb90 	bl	21aea <log_0>
		return -EINVAL;
   123ca:	f06f 0015 	mvn.w	r0, #21
   123ce:	e7e8      	b.n	123a2 <mod_app_bind+0x3a>
	key_app_idx = net_buf_simple_pull_le16(buf);
   123d0:	4620      	mov	r0, r4
   123d2:	f015 ffc1 	bl	28358 <net_buf_simple_pull_le16>
   123d6:	4605      	mov	r5, r0
	elem = bt_mesh_elem_find(elem_addr);
   123d8:	4630      	mov	r0, r6
	mod_id = buf->data;
   123da:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   123de:	f7fe f8ff 	bl	105e0 <bt_mesh_elem_find>
	if (!elem) {
   123e2:	bb28      	cbnz	r0, 12430 <mod_app_bind+0xc8>
		vnd = (buf->len == 4U);
   123e4:	88a3      	ldrh	r3, [r4, #4]
   123e6:	1f1a      	subs	r2, r3, #4
   123e8:	4253      	negs	r3, r2
   123ea:	4153      	adcs	r3, r2
   123ec:	f88d 300b 	strb.w	r3, [sp, #11]
		status = STATUS_INVALID_ADDRESS;
   123f0:	2401      	movs	r4, #1
	create_mod_app_status(&msg, mod, vnd, elem_addr, key_app_idx, status,
   123f2:	e9cd 4900 	strd	r4, r9, [sp]
   123f6:	f89d 100b 	ldrb.w	r1, [sp, #11]
   123fa:	462b      	mov	r3, r5
   123fc:	4632      	mov	r2, r6
   123fe:	a803      	add	r0, sp, #12
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   12400:	2400      	movs	r4, #0
	create_mod_app_status(&msg, mod, vnd, elem_addr, key_app_idx, status,
   12402:	f014 f97a 	bl	266fa <create_mod_app_status.constprop.0>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   12406:	9400      	str	r4, [sp, #0]
   12408:	4623      	mov	r3, r4
   1240a:	aa03      	add	r2, sp, #12
   1240c:	4641      	mov	r1, r8
   1240e:	4638      	mov	r0, r7
   12410:	f7fe f974 	bl	106fc <bt_mesh_model_send>
   12414:	2800      	cmp	r0, #0
   12416:	d0c4      	beq.n	123a2 <mod_app_bind+0x3a>
   12418:	4b20      	ldr	r3, [pc, #128]	; (1249c <mod_app_bind+0x134>)
   1241a:	4921      	ldr	r1, [pc, #132]	; (124a0 <mod_app_bind+0x138>)
		BT_ERR("Unable to send Model App Bind Status response");
   1241c:	4823      	ldr	r0, [pc, #140]	; (124ac <mod_app_bind+0x144>)
   1241e:	1ac9      	subs	r1, r1, r3
   12420:	08c9      	lsrs	r1, r1, #3
   12422:	0189      	lsls	r1, r1, #6
   12424:	f041 0101 	orr.w	r1, r1, #1
   12428:	f00f fb5f 	bl	21aea <log_0>
	return 0;
   1242c:	4620      	mov	r0, r4
   1242e:	e7b8      	b.n	123a2 <mod_app_bind+0x3a>
	mod = get_model(elem, buf, &vnd);
   12430:	4621      	mov	r1, r4
   12432:	f10d 020b 	add.w	r2, sp, #11
   12436:	f014 f93d 	bl	266b4 <get_model>
	if (!mod) {
   1243a:	4604      	mov	r4, r0
   1243c:	b340      	cbz	r0, 12490 <mod_app_bind+0x128>
	if (model == mod) {
   1243e:	4287      	cmp	r7, r0
   12440:	d10b      	bne.n	1245a <mod_app_bind+0xf2>
   12442:	4b16      	ldr	r3, [pc, #88]	; (1249c <mod_app_bind+0x134>)
   12444:	4916      	ldr	r1, [pc, #88]	; (124a0 <mod_app_bind+0x138>)
		BT_ERR("Client tried to bind AppKey to Configuration Model");
   12446:	481a      	ldr	r0, [pc, #104]	; (124b0 <mod_app_bind+0x148>)
   12448:	1ac9      	subs	r1, r1, r3
   1244a:	08c9      	lsrs	r1, r1, #3
   1244c:	0189      	lsls	r1, r1, #6
   1244e:	f041 0101 	orr.w	r1, r1, #1
   12452:	f00f fb4a 	bl	21aea <log_0>
		status = STATUS_CANNOT_BIND;
   12456:	240d      	movs	r4, #13
		goto send_status;
   12458:	e7cb      	b.n	123f2 <mod_app_bind+0x8a>
	if (!bt_mesh_app_key_exists(key_idx)) {
   1245a:	4628      	mov	r0, r5
   1245c:	f7fb fac2 	bl	d9e4 <bt_mesh_app_key_exists>
   12460:	b1c0      	cbz	r0, 12494 <mod_app_bind+0x12c>
		if (model->keys[i] == key_idx) {
   12462:	89a1      	ldrh	r1, [r4, #12]
   12464:	428d      	cmp	r5, r1
   12466:	d00f      	beq.n	12488 <mod_app_bind+0x120>
   12468:	89e2      	ldrh	r2, [r4, #14]
   1246a:	4295      	cmp	r5, r2
   1246c:	d00c      	beq.n	12488 <mod_app_bind+0x120>
		if (model->keys[i] == BT_MESH_KEY_UNUSED) {
   1246e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   12472:	4299      	cmp	r1, r3
   12474:	d00a      	beq.n	1248c <mod_app_bind+0x124>
   12476:	429a      	cmp	r2, r3
   12478:	d10e      	bne.n	12498 <mod_app_bind+0x130>
	for (i = 0; i < ARRAY_SIZE(model->keys); i++) {
   1247a:	2301      	movs	r3, #1
			model->keys[i] = key_idx;
   1247c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
				bt_mesh_model_bind_store(model);
   12480:	4620      	mov	r0, r4
			model->keys[i] = key_idx;
   12482:	819d      	strh	r5, [r3, #12]
				bt_mesh_model_bind_store(model);
   12484:	f014 f82b 	bl	264de <bt_mesh_model_bind_store>
			return STATUS_SUCCESS;
   12488:	2400      	movs	r4, #0
   1248a:	e7b2      	b.n	123f2 <mod_app_bind+0x8a>
	for (i = 0; i < ARRAY_SIZE(model->keys); i++) {
   1248c:	2300      	movs	r3, #0
   1248e:	e7f5      	b.n	1247c <mod_app_bind+0x114>
		status = STATUS_INVALID_MODEL;
   12490:	2402      	movs	r4, #2
   12492:	e7ae      	b.n	123f2 <mod_app_bind+0x8a>
		return STATUS_INVALID_APPKEY;
   12494:	2403      	movs	r4, #3
   12496:	e7ac      	b.n	123f2 <mod_app_bind+0x8a>
	return STATUS_INSUFF_RESOURCES;
   12498:	2405      	movs	r4, #5
   1249a:	e7aa      	b.n	123f2 <mod_app_bind+0x8a>
   1249c:	00029870 	.word	0x00029870
   124a0:	000299b8 	.word	0x000299b8
   124a4:	0002de83 	.word	0x0002de83
   124a8:	0002dbe5 	.word	0x0002dbe5
   124ac:	0002dfa4 	.word	0x0002dfa4
   124b0:	0002df71 	.word	0x0002df71

000124b4 <mod_app_unbind>:
{
   124b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   124b8:	4614      	mov	r4, r2
   124ba:	b08b      	sub	sp, #44	; 0x2c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_APP_STATUS, 9);
   124bc:	ab06      	add	r3, sp, #24
   124be:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   124c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
   124c6:	9303      	str	r3, [sp, #12]
	if ((buf->len != 6U) && (buf->len != 8U)) {
   124c8:	88a3      	ldrh	r3, [r4, #4]
   124ca:	2b06      	cmp	r3, #6
{
   124cc:	4607      	mov	r7, r0
   124ce:	4688      	mov	r8, r1
	if ((buf->len != 6U) && (buf->len != 8U)) {
   124d0:	d010      	beq.n	124f4 <mod_app_unbind+0x40>
   124d2:	2b08      	cmp	r3, #8
   124d4:	d00e      	beq.n	124f4 <mod_app_unbind+0x40>
   124d6:	4b2f      	ldr	r3, [pc, #188]	; (12594 <mod_app_unbind+0xe0>)
   124d8:	492f      	ldr	r1, [pc, #188]	; (12598 <mod_app_unbind+0xe4>)
		BT_ERR("The message size for the application opcode is incorrect.");
   124da:	4830      	ldr	r0, [pc, #192]	; (1259c <mod_app_unbind+0xe8>)
   124dc:	1ac9      	subs	r1, r1, r3
   124de:	08c9      	lsrs	r1, r1, #3
   124e0:	0189      	lsls	r1, r1, #6
   124e2:	f041 0101 	orr.w	r1, r1, #1
   124e6:	f00f fb00 	bl	21aea <log_0>
		return -EMSGSIZE;
   124ea:	f06f 0079 	mvn.w	r0, #121	; 0x79
}
   124ee:	b00b      	add	sp, #44	; 0x2c
   124f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	elem_addr = net_buf_simple_pull_le16(buf);
   124f4:	4620      	mov	r0, r4
   124f6:	f015 ff2f 	bl	28358 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   124fa:	b203      	sxth	r3, r0
   124fc:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   124fe:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   12500:	dc0c      	bgt.n	1251c <mod_app_unbind+0x68>
   12502:	4b24      	ldr	r3, [pc, #144]	; (12594 <mod_app_unbind+0xe0>)
   12504:	4924      	ldr	r1, [pc, #144]	; (12598 <mod_app_unbind+0xe4>)
		BT_WARN("Prohibited element address");
   12506:	4826      	ldr	r0, [pc, #152]	; (125a0 <mod_app_unbind+0xec>)
   12508:	1ac9      	subs	r1, r1, r3
   1250a:	08c9      	lsrs	r1, r1, #3
   1250c:	0189      	lsls	r1, r1, #6
   1250e:	f041 0102 	orr.w	r1, r1, #2
   12512:	f00f faea 	bl	21aea <log_0>
		return -EINVAL;
   12516:	f06f 0015 	mvn.w	r0, #21
   1251a:	e7e8      	b.n	124ee <mod_app_unbind+0x3a>
	key_app_idx = net_buf_simple_pull_le16(buf);
   1251c:	4620      	mov	r0, r4
   1251e:	f015 ff1b 	bl	28358 <net_buf_simple_pull_le16>
   12522:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
   12524:	4628      	mov	r0, r5
	mod_id = buf->data;
   12526:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   1252a:	f7fe f859 	bl	105e0 <bt_mesh_elem_find>
	if (!elem) {
   1252e:	bb28      	cbnz	r0, 1257c <mod_app_unbind+0xc8>
		vnd = (buf->len == 4U);
   12530:	88a3      	ldrh	r3, [r4, #4]
   12532:	1f1a      	subs	r2, r3, #4
   12534:	4253      	negs	r3, r2
   12536:	4153      	adcs	r3, r2
   12538:	f88d 300b 	strb.w	r3, [sp, #11]
		status = STATUS_INVALID_ADDRESS;
   1253c:	2001      	movs	r0, #1
	create_mod_app_status(&msg, mod, vnd, elem_addr, key_app_idx, status,
   1253e:	e9cd 0900 	strd	r0, r9, [sp]
   12542:	f89d 100b 	ldrb.w	r1, [sp, #11]
   12546:	4633      	mov	r3, r6
   12548:	462a      	mov	r2, r5
   1254a:	a803      	add	r0, sp, #12
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1254c:	2400      	movs	r4, #0
	create_mod_app_status(&msg, mod, vnd, elem_addr, key_app_idx, status,
   1254e:	f014 f8d4 	bl	266fa <create_mod_app_status.constprop.0>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   12552:	9400      	str	r4, [sp, #0]
   12554:	4623      	mov	r3, r4
   12556:	aa03      	add	r2, sp, #12
   12558:	4641      	mov	r1, r8
   1255a:	4638      	mov	r0, r7
   1255c:	f7fe f8ce 	bl	106fc <bt_mesh_model_send>
   12560:	2800      	cmp	r0, #0
   12562:	d0c4      	beq.n	124ee <mod_app_unbind+0x3a>
   12564:	4b0b      	ldr	r3, [pc, #44]	; (12594 <mod_app_unbind+0xe0>)
   12566:	490c      	ldr	r1, [pc, #48]	; (12598 <mod_app_unbind+0xe4>)
		BT_ERR("Unable to send Model App Unbind Status response");
   12568:	480e      	ldr	r0, [pc, #56]	; (125a4 <mod_app_unbind+0xf0>)
   1256a:	1ac9      	subs	r1, r1, r3
   1256c:	08c9      	lsrs	r1, r1, #3
   1256e:	0189      	lsls	r1, r1, #6
   12570:	f041 0101 	orr.w	r1, r1, #1
   12574:	f00f fab9 	bl	21aea <log_0>
	return 0;
   12578:	4620      	mov	r0, r4
   1257a:	e7b8      	b.n	124ee <mod_app_unbind+0x3a>
	mod = get_model(elem, buf, &vnd);
   1257c:	f10d 020b 	add.w	r2, sp, #11
   12580:	4621      	mov	r1, r4
   12582:	f014 f897 	bl	266b4 <get_model>
	if (!mod) {
   12586:	b118      	cbz	r0, 12590 <mod_app_unbind+0xdc>
	status = mod_unbind(mod, key_app_idx, true);
   12588:	4631      	mov	r1, r6
   1258a:	f014 f954 	bl	26836 <mod_unbind.constprop.0>
send_status:
   1258e:	e7d6      	b.n	1253e <mod_app_unbind+0x8a>
		status = STATUS_INVALID_MODEL;
   12590:	2002      	movs	r0, #2
   12592:	e7d4      	b.n	1253e <mod_app_unbind+0x8a>
   12594:	00029870 	.word	0x00029870
   12598:	000299b8 	.word	0x000299b8
   1259c:	0002de83 	.word	0x0002de83
   125a0:	0002dbe5 	.word	0x0002dbe5
   125a4:	0002dfd2 	.word	0x0002dfd2

000125a8 <mod_pub_set>:
{
   125a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ((buf->len != 11U) && (buf->len != 13U)) {
   125ac:	8893      	ldrh	r3, [r2, #4]
   125ae:	2b0b      	cmp	r3, #11
{
   125b0:	b08b      	sub	sp, #44	; 0x2c
   125b2:	4680      	mov	r8, r0
   125b4:	4689      	mov	r9, r1
   125b6:	4693      	mov	fp, r2
	if ((buf->len != 11U) && (buf->len != 13U)) {
   125b8:	d010      	beq.n	125dc <mod_pub_set+0x34>
   125ba:	2b0d      	cmp	r3, #13
   125bc:	d00e      	beq.n	125dc <mod_pub_set+0x34>
   125be:	4b3e      	ldr	r3, [pc, #248]	; (126b8 <mod_pub_set+0x110>)
   125c0:	493e      	ldr	r1, [pc, #248]	; (126bc <mod_pub_set+0x114>)
		BT_ERR("The message size for the application opcode is incorrect.");
   125c2:	483f      	ldr	r0, [pc, #252]	; (126c0 <mod_pub_set+0x118>)
   125c4:	1ac9      	subs	r1, r1, r3
   125c6:	08c9      	lsrs	r1, r1, #3
   125c8:	0189      	lsls	r1, r1, #6
   125ca:	f041 0101 	orr.w	r1, r1, #1
   125ce:	f00f fa8c 	bl	21aea <log_0>
		return -EMSGSIZE;
   125d2:	f06f 0079 	mvn.w	r0, #121	; 0x79
}
   125d6:	b00b      	add	sp, #44	; 0x2c
   125d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	elem_addr = net_buf_simple_pull_le16(buf);
   125dc:	4658      	mov	r0, fp
   125de:	f015 febb 	bl	28358 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   125e2:	b203      	sxth	r3, r0
   125e4:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   125e6:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   125e8:	dc0c      	bgt.n	12604 <mod_pub_set+0x5c>
   125ea:	4934      	ldr	r1, [pc, #208]	; (126bc <mod_pub_set+0x114>)
   125ec:	4b32      	ldr	r3, [pc, #200]	; (126b8 <mod_pub_set+0x110>)
		BT_WARN("Prohibited element address");
   125ee:	4835      	ldr	r0, [pc, #212]	; (126c4 <mod_pub_set+0x11c>)
   125f0:	1ac9      	subs	r1, r1, r3
   125f2:	08c9      	lsrs	r1, r1, #3
   125f4:	0189      	lsls	r1, r1, #6
   125f6:	f041 0102 	orr.w	r1, r1, #2
   125fa:	f00f fa76 	bl	21aea <log_0>
		return -EINVAL;
   125fe:	f06f 0015 	mvn.w	r0, #21
   12602:	e7e8      	b.n	125d6 <mod_pub_set+0x2e>
	pub_addr = net_buf_simple_pull_le16(buf);
   12604:	4658      	mov	r0, fp
   12606:	f015 fea7 	bl	28358 <net_buf_simple_pull_le16>
   1260a:	4606      	mov	r6, r0
	pub_app_idx = net_buf_simple_pull_le16(buf);
   1260c:	4658      	mov	r0, fp
   1260e:	f015 fea3 	bl	28358 <net_buf_simple_pull_le16>
   12612:	4607      	mov	r7, r0
	pub_ttl = net_buf_simple_pull_u8(buf);
   12614:	4658      	mov	r0, fp
   12616:	f015 fe97 	bl	28348 <net_buf_simple_pull_u8>
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   1261a:	f1a0 0280 	sub.w	r2, r0, #128	; 0x80
   1261e:	b2d2      	uxtb	r2, r2
   12620:	2a7e      	cmp	r2, #126	; 0x7e
	pub_ttl = net_buf_simple_pull_u8(buf);
   12622:	4682      	mov	sl, r0
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   12624:	d80b      	bhi.n	1263e <mod_pub_set+0x96>
   12626:	4924      	ldr	r1, [pc, #144]	; (126b8 <mod_pub_set+0x110>)
   12628:	4a24      	ldr	r2, [pc, #144]	; (126bc <mod_pub_set+0x114>)
   1262a:	1a52      	subs	r2, r2, r1
   1262c:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Invalid TTL value 0x%02x", pub_ttl);
   1262e:	0192      	lsls	r2, r2, #6
   12630:	4601      	mov	r1, r0
   12632:	f042 0201 	orr.w	r2, r2, #1
   12636:	4824      	ldr	r0, [pc, #144]	; (126c8 <mod_pub_set+0x120>)
   12638:	f00f fa64 	bl	21b04 <log_1>
   1263c:	e7df      	b.n	125fe <mod_pub_set+0x56>
	pub_period = net_buf_simple_pull_u8(buf);
   1263e:	4658      	mov	r0, fp
   12640:	f015 fe82 	bl	28348 <net_buf_simple_pull_u8>
   12644:	9006      	str	r0, [sp, #24]
	retransmit = net_buf_simple_pull_u8(buf);
   12646:	4658      	mov	r0, fp
   12648:	f015 fe7e 	bl	28348 <net_buf_simple_pull_u8>
	mod_id = buf->data;
   1264c:	f8db 3000 	ldr.w	r3, [fp]
	retransmit = net_buf_simple_pull_u8(buf);
   12650:	9007      	str	r0, [sp, #28]
	elem = bt_mesh_elem_find(elem_addr);
   12652:	4628      	mov	r0, r5
	mod_id = buf->data;
   12654:	9305      	str	r3, [sp, #20]
	elem = bt_mesh_elem_find(elem_addr);
   12656:	f7fd ffc3 	bl	105e0 <bt_mesh_elem_find>
	if (!elem) {
   1265a:	4604      	mov	r4, r0
   1265c:	b9a8      	cbnz	r0, 1268a <mod_pub_set+0xe2>
		vnd = (buf->len == 4U);
   1265e:	f8bb 3004 	ldrh.w	r3, [fp, #4]
   12662:	1f1a      	subs	r2, r3, #4
   12664:	4253      	negs	r3, r2
   12666:	4153      	adcs	r3, r2
   12668:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
		status = STATUS_INVALID_ADDRESS;
   1266c:	2001      	movs	r0, #1
	return send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
   1266e:	9b05      	ldr	r3, [sp, #20]
   12670:	9401      	str	r4, [sp, #4]
   12672:	e9cd 0302 	strd	r0, r3, [sp, #8]
   12676:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   1267a:	9300      	str	r3, [sp, #0]
   1267c:	462a      	mov	r2, r5
   1267e:	4633      	mov	r3, r6
   12680:	4649      	mov	r1, r9
   12682:	4640      	mov	r0, r8
   12684:	f7fe fe32 	bl	112ec <send_mod_pub_status>
   12688:	e7a5      	b.n	125d6 <mod_pub_set+0x2e>
	mod = get_model(elem, buf, &vnd);
   1268a:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   1268e:	4659      	mov	r1, fp
   12690:	f014 f810 	bl	266b4 <get_model>
	if (!mod) {
   12694:	4604      	mov	r4, r0
   12696:	b160      	cbz	r0, 126b2 <mod_pub_set+0x10a>
	status = _mod_pub_set(mod, pub_addr, pub_app_idx, cred_flag, pub_ttl,
   12698:	9b07      	ldr	r3, [sp, #28]
   1269a:	9302      	str	r3, [sp, #8]
   1269c:	9b06      	ldr	r3, [sp, #24]
   1269e:	f3c7 020b 	ubfx	r2, r7, #0, #12
   126a2:	e9cd a300 	strd	sl, r3, [sp]
   126a6:	4631      	mov	r1, r6
   126a8:	f3c7 3300 	ubfx	r3, r7, #12, #1
   126ac:	f014 f850 	bl	26750 <_mod_pub_set.constprop.0>
   126b0:	e7dd      	b.n	1266e <mod_pub_set+0xc6>
		status = STATUS_INVALID_MODEL;
   126b2:	2002      	movs	r0, #2
   126b4:	e7db      	b.n	1266e <mod_pub_set+0xc6>
   126b6:	bf00      	nop
   126b8:	00029870 	.word	0x00029870
   126bc:	000299b8 	.word	0x000299b8
   126c0:	0002de83 	.word	0x0002de83
   126c4:	0002dbe5 	.word	0x0002dbe5
   126c8:	0002e002 	.word	0x0002e002

000126cc <mod_pub_va_set>:
{
   126cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ((buf->len != 25U) && (buf->len != 27U)) {
   126d0:	8893      	ldrh	r3, [r2, #4]
   126d2:	f023 0302 	bic.w	r3, r3, #2
   126d6:	b29b      	uxth	r3, r3
   126d8:	2b19      	cmp	r3, #25
{
   126da:	b08b      	sub	sp, #44	; 0x2c
   126dc:	4681      	mov	r9, r0
   126de:	468a      	mov	sl, r1
   126e0:	4693      	mov	fp, r2
	if ((buf->len != 25U) && (buf->len != 27U)) {
   126e2:	d00e      	beq.n	12702 <mod_pub_va_set+0x36>
   126e4:	4b4a      	ldr	r3, [pc, #296]	; (12810 <mod_pub_va_set+0x144>)
   126e6:	494b      	ldr	r1, [pc, #300]	; (12814 <mod_pub_va_set+0x148>)
		BT_ERR("The message size for the application opcode is incorrect.");
   126e8:	484b      	ldr	r0, [pc, #300]	; (12818 <mod_pub_va_set+0x14c>)
   126ea:	1ac9      	subs	r1, r1, r3
   126ec:	08c9      	lsrs	r1, r1, #3
   126ee:	0189      	lsls	r1, r1, #6
   126f0:	f041 0101 	orr.w	r1, r1, #1
   126f4:	f00f f9f9 	bl	21aea <log_0>
		return -EMSGSIZE;
   126f8:	f06f 0079 	mvn.w	r0, #121	; 0x79
}
   126fc:	b00b      	add	sp, #44	; 0x2c
   126fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	elem_addr = net_buf_simple_pull_le16(buf);
   12702:	4610      	mov	r0, r2
   12704:	f015 fe28 	bl	28358 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   12708:	b203      	sxth	r3, r0
   1270a:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1270c:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1270e:	dc0c      	bgt.n	1272a <mod_pub_va_set+0x5e>
   12710:	4940      	ldr	r1, [pc, #256]	; (12814 <mod_pub_va_set+0x148>)
   12712:	4b3f      	ldr	r3, [pc, #252]	; (12810 <mod_pub_va_set+0x144>)
		BT_WARN("Prohibited element address");
   12714:	4841      	ldr	r0, [pc, #260]	; (1281c <mod_pub_va_set+0x150>)
   12716:	1ac9      	subs	r1, r1, r3
   12718:	08c9      	lsrs	r1, r1, #3
   1271a:	0189      	lsls	r1, r1, #6
   1271c:	f041 0102 	orr.w	r1, r1, #2
   12720:	f00f f9e3 	bl	21aea <log_0>
		return -EINVAL;
   12724:	f06f 0015 	mvn.w	r0, #21
   12728:	e7e8      	b.n	126fc <mod_pub_va_set+0x30>
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   1272a:	2110      	movs	r1, #16
   1272c:	4658      	mov	r0, fp
   1272e:	f015 fe03 	bl	28338 <net_buf_simple_pull_mem>
   12732:	4607      	mov	r7, r0
	pub_app_idx = net_buf_simple_pull_le16(buf);
   12734:	4658      	mov	r0, fp
   12736:	f015 fe0f 	bl	28358 <net_buf_simple_pull_le16>
   1273a:	4680      	mov	r8, r0
	pub_ttl = net_buf_simple_pull_u8(buf);
   1273c:	4658      	mov	r0, fp
   1273e:	f015 fe03 	bl	28348 <net_buf_simple_pull_u8>
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   12742:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
   12746:	b2db      	uxtb	r3, r3
   12748:	2b7e      	cmp	r3, #126	; 0x7e
	pub_ttl = net_buf_simple_pull_u8(buf);
   1274a:	4606      	mov	r6, r0
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   1274c:	d80b      	bhi.n	12766 <mod_pub_va_set+0x9a>
   1274e:	4b30      	ldr	r3, [pc, #192]	; (12810 <mod_pub_va_set+0x144>)
   12750:	4a30      	ldr	r2, [pc, #192]	; (12814 <mod_pub_va_set+0x148>)
   12752:	1ad2      	subs	r2, r2, r3
   12754:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Invalid TTL value 0x%02x", pub_ttl);
   12756:	0192      	lsls	r2, r2, #6
   12758:	4601      	mov	r1, r0
   1275a:	f042 0201 	orr.w	r2, r2, #1
   1275e:	4830      	ldr	r0, [pc, #192]	; (12820 <mod_pub_va_set+0x154>)
   12760:	f00f f9d0 	bl	21b04 <log_1>
   12764:	e7de      	b.n	12724 <mod_pub_va_set+0x58>
	pub_period = net_buf_simple_pull_u8(buf);
   12766:	4658      	mov	r0, fp
   12768:	f015 fdee 	bl	28348 <net_buf_simple_pull_u8>
   1276c:	9006      	str	r0, [sp, #24]
	retransmit = net_buf_simple_pull_u8(buf);
   1276e:	4658      	mov	r0, fp
   12770:	f015 fdea 	bl	28348 <net_buf_simple_pull_u8>
	mod_id = buf->data;
   12774:	f8db 3000 	ldr.w	r3, [fp]
	retransmit = net_buf_simple_pull_u8(buf);
   12778:	9007      	str	r0, [sp, #28]
	elem = bt_mesh_elem_find(elem_addr);
   1277a:	4628      	mov	r0, r5
	mod_id = buf->data;
   1277c:	9305      	str	r3, [sp, #20]
	elem = bt_mesh_elem_find(elem_addr);
   1277e:	f7fd ff2f 	bl	105e0 <bt_mesh_elem_find>
	if (!elem) {
   12782:	4604      	mov	r4, r0
   12784:	b9c0      	cbnz	r0, 127b8 <mod_pub_va_set+0xec>
		vnd = (buf->len == 4U);
   12786:	f8bb 3004 	ldrh.w	r3, [fp, #4]
		pub_addr = 0U;
   1278a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
		vnd = (buf->len == 4U);
   1278e:	1f1a      	subs	r2, r3, #4
   12790:	4253      	negs	r3, r2
   12792:	4153      	adcs	r3, r2
   12794:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		status = STATUS_INVALID_ADDRESS;
   12798:	2301      	movs	r3, #1
	return send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
   1279a:	9a05      	ldr	r2, [sp, #20]
   1279c:	9401      	str	r4, [sp, #4]
   1279e:	e9cd 3202 	strd	r3, r2, [sp, #8]
   127a2:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   127a6:	9300      	str	r3, [sp, #0]
   127a8:	462a      	mov	r2, r5
   127aa:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   127ae:	4651      	mov	r1, sl
   127b0:	4648      	mov	r0, r9
   127b2:	f7fe fd9b 	bl	112ec <send_mod_pub_status>
   127b6:	e7a1      	b.n	126fc <mod_pub_va_set+0x30>
	mod = get_model(elem, buf, &vnd);
   127b8:	f10d 0225 	add.w	r2, sp, #37	; 0x25
   127bc:	4659      	mov	r1, fp
   127be:	f013 ff79 	bl	266b4 <get_model>
	if (!mod) {
   127c2:	4604      	mov	r4, r0
   127c4:	b918      	cbnz	r0, 127ce <mod_pub_va_set+0x102>
		pub_addr = 0U;
   127c6:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
		status = STATUS_INVALID_MODEL;
   127ca:	2302      	movs	r3, #2
		goto send_status;
   127cc:	e7e5      	b.n	1279a <mod_pub_va_set+0xce>
	status = bt_mesh_va_add(label_uuid, &pub_addr);
   127ce:	f10d 0126 	add.w	r1, sp, #38	; 0x26
   127d2:	4638      	mov	r0, r7
   127d4:	f7fb ff4a 	bl	e66c <bt_mesh_va_add>
   127d8:	4603      	mov	r3, r0
   127da:	4683      	mov	fp, r0
	if (status != STATUS_SUCCESS) {
   127dc:	2800      	cmp	r0, #0
   127de:	d1dc      	bne.n	1279a <mod_pub_va_set+0xce>
	status = _mod_pub_set(mod, pub_addr, pub_app_idx, cred_flag, pub_ttl,
   127e0:	9b07      	ldr	r3, [sp, #28]
   127e2:	9302      	str	r3, [sp, #8]
   127e4:	9b06      	ldr	r3, [sp, #24]
   127e6:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
   127ea:	e9cd 6300 	strd	r6, r3, [sp]
   127ee:	f3c8 020b 	ubfx	r2, r8, #0, #12
   127f2:	f3c8 3300 	ubfx	r3, r8, #12, #1
   127f6:	4620      	mov	r0, r4
   127f8:	f013 ffaa 	bl	26750 <_mod_pub_set.constprop.0>
	if (status != STATUS_SUCCESS) {
   127fc:	4603      	mov	r3, r0
   127fe:	2800      	cmp	r0, #0
   12800:	d0cb      	beq.n	1279a <mod_pub_va_set+0xce>
   12802:	9006      	str	r0, [sp, #24]
		bt_mesh_va_del(label_uuid, NULL);
   12804:	4659      	mov	r1, fp
   12806:	4638      	mov	r0, r7
   12808:	f7fb ff86 	bl	e718 <bt_mesh_va_del>
   1280c:	9b06      	ldr	r3, [sp, #24]
   1280e:	e7c4      	b.n	1279a <mod_pub_va_set+0xce>
   12810:	00029870 	.word	0x00029870
   12814:	000299b8 	.word	0x000299b8
   12818:	0002de83 	.word	0x0002de83
   1281c:	0002dbe5 	.word	0x0002dbe5
   12820:	0002e002 	.word	0x0002e002

00012824 <dev_comp_data_get>:
{
   12824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12828:	b099      	sub	sp, #100	; 0x64
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   1282a:	ab06      	add	r3, sp, #24
{
   1282c:	4680      	mov	r8, r0
   1282e:	4689      	mov	r9, r1
	page = net_buf_simple_pull_u8(buf);
   12830:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   12832:	f44f 0190 	mov.w	r1, #4718592	; 0x480000
   12836:	e9cd 1304 	strd	r1, r3, [sp, #16]
   1283a:	9303      	str	r3, [sp, #12]
	page = net_buf_simple_pull_u8(buf);
   1283c:	f015 fd84 	bl	28348 <net_buf_simple_pull_u8>
	bt_mesh_model_msg_init(&sdu, OP_DEV_COMP_DATA_STATUS);
   12840:	2102      	movs	r1, #2
   12842:	a803      	add	r0, sp, #12
   12844:	f013 fe60 	bl	26508 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&sdu, page);
   12848:	2100      	movs	r1, #0
   1284a:	a803      	add	r0, sp, #12
   1284c:	f015 fd0b 	bl	28266 <net_buf_simple_add_u8>
	comp = bt_mesh_comp_get();
   12850:	f7fd ffd4 	bl	107fc <bt_mesh_comp_get>
   12854:	4605      	mov	r5, r0
	net_buf_simple_add_le16(buf, comp->cid);
   12856:	8801      	ldrh	r1, [r0, #0]
   12858:	a803      	add	r0, sp, #12
   1285a:	f015 fd0c 	bl	28276 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, comp->pid);
   1285e:	8869      	ldrh	r1, [r5, #2]
   12860:	a803      	add	r0, sp, #12
   12862:	f015 fd08 	bl	28276 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, comp->vid);
   12866:	88a9      	ldrh	r1, [r5, #4]
   12868:	a803      	add	r0, sp, #12
   1286a:	f015 fd04 	bl	28276 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, CONFIG_BT_MESH_CRPL);
   1286e:	210a      	movs	r1, #10
   12870:	a803      	add	r0, sp, #12
   12872:	f015 fd00 	bl	28276 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, feat);
   12876:	2103      	movs	r1, #3
   12878:	a803      	add	r0, sp, #12
   1287a:	f015 fcfc 	bl	28276 <net_buf_simple_add_le16>
	for (i = 0; i < comp->elem_count; i++) {
   1287e:	2700      	movs	r7, #0
	    4 + (elem->model_count * 2U) + (elem->vnd_model_count * 4U)) {
   12880:	f04f 0a02 	mov.w	sl, #2
	for (i = 0; i < comp->elem_count; i++) {
   12884:	68ab      	ldr	r3, [r5, #8]
   12886:	429f      	cmp	r7, r3
   12888:	d314      	bcc.n	128b4 <dev_comp_data_get+0x90>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   1288a:	2400      	movs	r4, #0
   1288c:	9400      	str	r4, [sp, #0]
   1288e:	4623      	mov	r3, r4
   12890:	aa03      	add	r2, sp, #12
   12892:	4649      	mov	r1, r9
   12894:	4640      	mov	r0, r8
   12896:	f7fd ff31 	bl	106fc <bt_mesh_model_send>
   1289a:	b350      	cbz	r0, 128f2 <dev_comp_data_get+0xce>
   1289c:	4b2d      	ldr	r3, [pc, #180]	; (12954 <dev_comp_data_get+0x130>)
   1289e:	492e      	ldr	r1, [pc, #184]	; (12958 <dev_comp_data_get+0x134>)
		BT_ERR("Unable to send Device Composition Status response");
   128a0:	482e      	ldr	r0, [pc, #184]	; (1295c <dev_comp_data_get+0x138>)
   128a2:	1ac9      	subs	r1, r1, r3
   128a4:	08c9      	lsrs	r1, r1, #3
   128a6:	0189      	lsls	r1, r1, #6
   128a8:	f041 0101 	orr.w	r1, r1, #1
   128ac:	f00f f91d 	bl	21aea <log_0>
	return 0;
   128b0:	4620      	mov	r0, r4
   128b2:	e01e      	b.n	128f2 <dev_comp_data_get+0xce>
		err = comp_add_elem(buf, &comp->elem[i], i == 0);
   128b4:	68ec      	ldr	r4, [r5, #12]
   128b6:	eb04 1407 	add.w	r4, r4, r7, lsl #4
	if (net_buf_simple_tailroom(buf) <
   128ba:	a803      	add	r0, sp, #12
   128bc:	f015 fd79 	bl	283b2 <net_buf_simple_tailroom>
	    4 + (elem->model_count * 2U) + (elem->vnd_model_count * 4U)) {
   128c0:	7922      	ldrb	r2, [r4, #4]
   128c2:	7963      	ldrb	r3, [r4, #5]
   128c4:	3202      	adds	r2, #2
   128c6:	fb1a 2303 	smlabb	r3, sl, r3, r2
	if (net_buf_simple_tailroom(buf) <
   128ca:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
   128ce:	d213      	bcs.n	128f8 <dev_comp_data_get+0xd4>
   128d0:	4b20      	ldr	r3, [pc, #128]	; (12954 <dev_comp_data_get+0x130>)
   128d2:	4c21      	ldr	r4, [pc, #132]	; (12958 <dev_comp_data_get+0x134>)
		BT_ERR("Too large device composition");
   128d4:	4822      	ldr	r0, [pc, #136]	; (12960 <dev_comp_data_get+0x13c>)
   128d6:	1ae4      	subs	r4, r4, r3
   128d8:	08e4      	lsrs	r4, r4, #3
   128da:	01a4      	lsls	r4, r4, #6
   128dc:	f044 0401 	orr.w	r4, r4, #1
   128e0:	4621      	mov	r1, r4
   128e2:	f00f f902 	bl	21aea <log_0>
		BT_ERR("Unable to get composition page 0");
   128e6:	481f      	ldr	r0, [pc, #124]	; (12964 <dev_comp_data_get+0x140>)
   128e8:	4621      	mov	r1, r4
   128ea:	f00f f8fe 	bl	21aea <log_0>
		return err;
   128ee:	f06f 0006 	mvn.w	r0, #6
}
   128f2:	b019      	add	sp, #100	; 0x64
   128f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_buf_simple_add_le16(buf, elem->loc);
   128f8:	8861      	ldrh	r1, [r4, #2]
   128fa:	a803      	add	r0, sp, #12
   128fc:	f015 fcbb 	bl	28276 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(buf, elem->model_count);
   12900:	7921      	ldrb	r1, [r4, #4]
   12902:	a803      	add	r0, sp, #12
   12904:	f015 fcaf 	bl	28266 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, elem->vnd_model_count);
   12908:	7961      	ldrb	r1, [r4, #5]
   1290a:	a803      	add	r0, sp, #12
   1290c:	f015 fcab 	bl	28266 <net_buf_simple_add_u8>
	for (i = 0; i < elem->model_count; i++) {
   12910:	2600      	movs	r6, #0
   12912:	7923      	ldrb	r3, [r4, #4]
   12914:	429e      	cmp	r6, r3
   12916:	db05      	blt.n	12924 <dev_comp_data_get+0x100>
	for (i = 0; i < elem->vnd_model_count; i++) {
   12918:	2600      	movs	r6, #0
   1291a:	7963      	ldrb	r3, [r4, #5]
   1291c:	429e      	cmp	r6, r3
   1291e:	db09      	blt.n	12934 <dev_comp_data_get+0x110>
	for (i = 0; i < comp->elem_count; i++) {
   12920:	3701      	adds	r7, #1
   12922:	e7af      	b.n	12884 <dev_comp_data_get+0x60>
		net_buf_simple_add_le16(buf, mod->id);
   12924:	0173      	lsls	r3, r6, #5
   12926:	68a2      	ldr	r2, [r4, #8]
   12928:	a803      	add	r0, sp, #12
   1292a:	5ad1      	ldrh	r1, [r2, r3]
   1292c:	f015 fca3 	bl	28276 <net_buf_simple_add_le16>
	for (i = 0; i < elem->model_count; i++) {
   12930:	3601      	adds	r6, #1
   12932:	e7ee      	b.n	12912 <dev_comp_data_get+0xee>
		mod = &elem->vnd_models[i];
   12934:	68e3      	ldr	r3, [r4, #12]
   12936:	0172      	lsls	r2, r6, #5
   12938:	eb03 1b46 	add.w	fp, r3, r6, lsl #5
		net_buf_simple_add_le16(buf, mod->vnd.company);
   1293c:	5a99      	ldrh	r1, [r3, r2]
   1293e:	a803      	add	r0, sp, #12
   12940:	f015 fc99 	bl	28276 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(buf, mod->vnd.id);
   12944:	f8bb 1002 	ldrh.w	r1, [fp, #2]
   12948:	a803      	add	r0, sp, #12
   1294a:	f015 fc94 	bl	28276 <net_buf_simple_add_le16>
	for (i = 0; i < elem->vnd_model_count; i++) {
   1294e:	3601      	adds	r6, #1
   12950:	e7e3      	b.n	1291a <dev_comp_data_get+0xf6>
   12952:	bf00      	nop
   12954:	00029870 	.word	0x00029870
   12958:	000299b8 	.word	0x000299b8
   1295c:	0002e059 	.word	0x0002e059
   12960:	0002e01b 	.word	0x0002e01b
   12964:	0002e038 	.word	0x0002e038

00012968 <hb_pub_send_status>:
{
   12968:	b5f0      	push	{r4, r5, r6, r7, lr}
   1296a:	b08b      	sub	sp, #44	; 0x2c
   1296c:	461c      	mov	r4, r3
   1296e:	4617      	mov	r7, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_PUB_STATUS, 10);
   12970:	ab06      	add	r3, sp, #24
   12972:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
{
   12976:	4605      	mov	r5, r0
   12978:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_PUB_STATUS);
   1297a:	a803      	add	r0, sp, #12
   1297c:	2106      	movs	r1, #6
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_PUB_STATUS, 10);
   1297e:	e9cd 2304 	strd	r2, r3, [sp, #16]
   12982:	9303      	str	r3, [sp, #12]
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_PUB_STATUS);
   12984:	f013 fdc0 	bl	26508 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   12988:	4639      	mov	r1, r7
   1298a:	a803      	add	r0, sp, #12
   1298c:	f015 fc6b 	bl	28266 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, pub->dst);
   12990:	8821      	ldrh	r1, [r4, #0]
   12992:	a803      	add	r0, sp, #12
   12994:	f015 fc6f 	bl	28276 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, hb_pub_count_log(pub->count));
   12998:	8861      	ldrh	r1, [r4, #2]
	if (!val) {
   1299a:	b171      	cbz	r1, 129ba <hb_pub_send_status+0x52>
	} else if (val == 0x01) {
   1299c:	2901      	cmp	r1, #1
   1299e:	d00c      	beq.n	129ba <hb_pub_send_status+0x52>
	} else if (val == 0xffff) {
   129a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   129a4:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val - 1) + 1;
   129a6:	bf1f      	itttt	ne
   129a8:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
   129ac:	fab1 f181 	clzne	r1, r1
   129b0:	f1c1 0121 	rsbne	r1, r1, #33	; 0x21
   129b4:	b2c9      	uxtbne	r1, r1
		return 0xff;
   129b6:	bf08      	it	eq
   129b8:	21ff      	moveq	r1, #255	; 0xff
	net_buf_simple_add_u8(&msg, hb_pub_count_log(pub->count));
   129ba:	a803      	add	r0, sp, #12
   129bc:	f015 fc53 	bl	28266 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, bt_mesh_hb_log(pub->period));
   129c0:	68e1      	ldr	r1, [r4, #12]
	if (!val) {
   129c2:	b149      	cbz	r1, 129d8 <hb_pub_send_status+0x70>
	} else if (val == 0xffff) {
   129c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   129c8:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val);
   129ca:	bf1d      	ittte	ne
   129cc:	fab1 f181 	clzne	r1, r1
   129d0:	f1c1 0120 	rsbne	r1, r1, #32
   129d4:	b2c9      	uxtbne	r1, r1
		return 0xff;
   129d6:	21ff      	moveq	r1, #255	; 0xff
   129d8:	a803      	add	r0, sp, #12
   129da:	f015 fc44 	bl	28266 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, pub->ttl);
   129de:	7921      	ldrb	r1, [r4, #4]
   129e0:	a803      	add	r0, sp, #12
   129e2:	f015 fc40 	bl	28266 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, pub->feat);
   129e6:	88e1      	ldrh	r1, [r4, #6]
   129e8:	a803      	add	r0, sp, #12
   129ea:	f015 fc44 	bl	28276 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, pub->net_idx);
   129ee:	8921      	ldrh	r1, [r4, #8]
   129f0:	a803      	add	r0, sp, #12
   129f2:	f015 fc40 	bl	28276 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   129f6:	2300      	movs	r3, #0
   129f8:	9300      	str	r3, [sp, #0]
   129fa:	aa03      	add	r2, sp, #12
   129fc:	4631      	mov	r1, r6
   129fe:	4628      	mov	r0, r5
   12a00:	f7fd fe7c 	bl	106fc <bt_mesh_model_send>
   12a04:	b148      	cbz	r0, 12a1a <hb_pub_send_status+0xb2>
   12a06:	4906      	ldr	r1, [pc, #24]	; (12a20 <hb_pub_send_status+0xb8>)
   12a08:	4b06      	ldr	r3, [pc, #24]	; (12a24 <hb_pub_send_status+0xbc>)
		BT_ERR("Unable to send Heartbeat Publication Status");
   12a0a:	4807      	ldr	r0, [pc, #28]	; (12a28 <hb_pub_send_status+0xc0>)
   12a0c:	1ac9      	subs	r1, r1, r3
   12a0e:	08c9      	lsrs	r1, r1, #3
   12a10:	0189      	lsls	r1, r1, #6
   12a12:	f041 0101 	orr.w	r1, r1, #1
   12a16:	f00f f868 	bl	21aea <log_0>
}
   12a1a:	2000      	movs	r0, #0
   12a1c:	b00b      	add	sp, #44	; 0x2c
   12a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12a20:	000299b8 	.word	0x000299b8
   12a24:	00029870 	.word	0x00029870
   12a28:	0002e08b 	.word	0x0002e08b

00012a2c <heartbeat_pub_set>:
{
   12a2c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct hb_pub_param *param = (void *)buf->data;
   12a30:	6812      	ldr	r2, [r2, #0]
	pub.count = bt_mesh_hb_pwr2(param->count_log);
   12a32:	7894      	ldrb	r4, [r2, #2]
	pub.dst = sys_le16_to_cpu(param->dst);
   12a34:	8813      	ldrh	r3, [r2, #0]
   12a36:	f8ad 3000 	strh.w	r3, [sp]
{
   12a3a:	4605      	mov	r5, r0
	pub.count = bt_mesh_hb_pwr2(param->count_log);
   12a3c:	4620      	mov	r0, r4
	pub.dst = sys_le16_to_cpu(param->dst);
   12a3e:	b29f      	uxth	r7, r3
	pub.count = bt_mesh_hb_pwr2(param->count_log);
   12a40:	f013 fe28 	bl	26694 <bt_mesh_hb_pwr2>
   12a44:	f8ad 0002 	strh.w	r0, [sp, #2]
	pub.period = bt_mesh_hb_pwr2(param->period_log);
   12a48:	f892 8003 	ldrb.w	r8, [r2, #3]
   12a4c:	4640      	mov	r0, r8
   12a4e:	f013 fe21 	bl	26694 <bt_mesh_hb_pwr2>
   12a52:	9003      	str	r0, [sp, #12]
	pub.ttl = param->ttl;
   12a54:	7913      	ldrb	r3, [r2, #4]
   12a56:	f88d 3004 	strb.w	r3, [sp, #4]
	pub.feat = sys_le16_to_cpu(param->feat);
   12a5a:	7990      	ldrb	r0, [r2, #6]
{
   12a5c:	460e      	mov	r6, r1
	pub.feat = sys_le16_to_cpu(param->feat);
   12a5e:	7951      	ldrb	r1, [r2, #5]
   12a60:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
   12a64:	f8ad 1006 	strh.w	r1, [sp, #6]
	pub.net_idx = sys_le16_to_cpu(param->net_idx);
   12a68:	f8b2 2007 	ldrh.w	r2, [r2, #7]
   12a6c:	f8ad 2008 	strh.w	r2, [sp, #8]
	if (BT_MESH_ADDR_IS_VIRTUAL(pub.dst)) {
   12a70:	f487 4700 	eor.w	r7, r7, #32768	; 0x8000
   12a74:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
	pub.net_idx = sys_le16_to_cpu(param->net_idx);
   12a78:	b291      	uxth	r1, r2
	if (BT_MESH_ADDR_IS_VIRTUAL(pub.dst)) {
   12a7a:	d330      	bcc.n	12ade <heartbeat_pub_set+0xb2>
	if (param->count_log > 0x11 && param->count_log != 0xff) {
   12a7c:	3c12      	subs	r4, #18
   12a7e:	b2e4      	uxtb	r4, r4
   12a80:	2cec      	cmp	r4, #236	; 0xec
   12a82:	d92e      	bls.n	12ae2 <heartbeat_pub_set+0xb6>
	if (param->period_log > 0x10) {
   12a84:	f1b8 0f10 	cmp.w	r8, #16
   12a88:	d82b      	bhi.n	12ae2 <heartbeat_pub_set+0xb6>
	if (param->ttl > BT_MESH_TTL_MAX && param->ttl != BT_MESH_TTL_DEFAULT) {
   12a8a:	f083 0280 	eor.w	r2, r3, #128	; 0x80
   12a8e:	2a7e      	cmp	r2, #126	; 0x7e
   12a90:	d80f      	bhi.n	12ab2 <heartbeat_pub_set+0x86>
   12a92:	4915      	ldr	r1, [pc, #84]	; (12ae8 <heartbeat_pub_set+0xbc>)
   12a94:	4a15      	ldr	r2, [pc, #84]	; (12aec <heartbeat_pub_set+0xc0>)
		BT_ERR("Invalid TTL value 0x%02x", param->ttl);
   12a96:	4816      	ldr	r0, [pc, #88]	; (12af0 <heartbeat_pub_set+0xc4>)
   12a98:	1a52      	subs	r2, r2, r1
   12a9a:	08d2      	lsrs	r2, r2, #3
   12a9c:	0192      	lsls	r2, r2, #6
   12a9e:	f042 0201 	orr.w	r2, r2, #1
   12aa2:	4619      	mov	r1, r3
		BT_ERR("Invalid NetKeyIndex 0x%04x", pub.net_idx);
   12aa4:	f00f f82e 	bl	21b04 <log_1>
		return -EINVAL;
   12aa8:	f06f 0015 	mvn.w	r0, #21
}
   12aac:	b004      	add	sp, #16
   12aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (pub.net_idx > 0xfff) {
   12ab2:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
   12ab6:	d308      	bcc.n	12aca <heartbeat_pub_set+0x9e>
   12ab8:	4a0c      	ldr	r2, [pc, #48]	; (12aec <heartbeat_pub_set+0xc0>)
   12aba:	4b0b      	ldr	r3, [pc, #44]	; (12ae8 <heartbeat_pub_set+0xbc>)
		BT_ERR("Invalid NetKeyIndex 0x%04x", pub.net_idx);
   12abc:	480d      	ldr	r0, [pc, #52]	; (12af4 <heartbeat_pub_set+0xc8>)
   12abe:	1ad2      	subs	r2, r2, r3
   12ac0:	08d2      	lsrs	r2, r2, #3
   12ac2:	0192      	lsls	r2, r2, #6
   12ac4:	f042 0201 	orr.w	r2, r2, #1
   12ac8:	e7ec      	b.n	12aa4 <heartbeat_pub_set+0x78>
	status = bt_mesh_hb_pub_set(&pub);
   12aca:	4668      	mov	r0, sp
   12acc:	f7fc fe50 	bl	f770 <bt_mesh_hb_pub_set>
   12ad0:	4602      	mov	r2, r0
	return hb_pub_send_status(model, ctx, status, &pub);
   12ad2:	466b      	mov	r3, sp
   12ad4:	4631      	mov	r1, r6
   12ad6:	4628      	mov	r0, r5
   12ad8:	f7ff ff46 	bl	12968 <hb_pub_send_status>
   12adc:	e7e6      	b.n	12aac <heartbeat_pub_set+0x80>
		status = STATUS_INVALID_ADDRESS;
   12ade:	2201      	movs	r2, #1
   12ae0:	e7f7      	b.n	12ad2 <heartbeat_pub_set+0xa6>
		status = STATUS_CANNOT_SET;
   12ae2:	220f      	movs	r2, #15
   12ae4:	e7f5      	b.n	12ad2 <heartbeat_pub_set+0xa6>
   12ae6:	bf00      	nop
   12ae8:	00029870 	.word	0x00029870
   12aec:	000299b8 	.word	0x000299b8
   12af0:	0002e002 	.word	0x0002e002
   12af4:	0002daff 	.word	0x0002daff

00012af8 <hb_sub_send_status>:
{
   12af8:	b570      	push	{r4, r5, r6, lr}
   12afa:	b08a      	sub	sp, #40	; 0x28
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_SUB_STATUS, 9);
   12afc:	ab06      	add	r3, sp, #24
{
   12afe:	4614      	mov	r4, r2
   12b00:	4605      	mov	r5, r0
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_SUB_STATUS, 9);
   12b02:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_SUB_STATUS);
   12b06:	a803      	add	r0, sp, #12
{
   12b08:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_SUB_STATUS);
   12b0a:	f248 013c 	movw	r1, #32828	; 0x803c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_SUB_STATUS, 9);
   12b0e:	e9cd 2304 	strd	r2, r3, [sp, #16]
   12b12:	9303      	str	r3, [sp, #12]
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_SUB_STATUS);
   12b14:	f013 fcf8 	bl	26508 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, STATUS_SUCCESS);
   12b18:	2100      	movs	r1, #0
   12b1a:	a803      	add	r0, sp, #12
   12b1c:	f015 fba3 	bl	28266 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, sub->src);
   12b20:	8921      	ldrh	r1, [r4, #8]
   12b22:	a803      	add	r0, sp, #12
   12b24:	f015 fba7 	bl	28276 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, sub->dst);
   12b28:	8961      	ldrh	r1, [r4, #10]
   12b2a:	a803      	add	r0, sp, #12
   12b2c:	f015 fba3 	bl	28276 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, bt_mesh_hb_log(sub->remaining));
   12b30:	6861      	ldr	r1, [r4, #4]
	if (!val) {
   12b32:	b149      	cbz	r1, 12b48 <hb_sub_send_status+0x50>
	} else if (val == 0xffff) {
   12b34:	f64f 73ff 	movw	r3, #65535	; 0xffff
   12b38:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val);
   12b3a:	bf1d      	ittte	ne
   12b3c:	fab1 f181 	clzne	r1, r1
   12b40:	f1c1 0120 	rsbne	r1, r1, #32
   12b44:	b2c9      	uxtbne	r1, r1
		return 0xff;
   12b46:	21ff      	moveq	r1, #255	; 0xff
   12b48:	a803      	add	r0, sp, #12
   12b4a:	f015 fb8c 	bl	28266 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, bt_mesh_hb_log(sub->count));
   12b4e:	89a1      	ldrh	r1, [r4, #12]
	if (!val) {
   12b50:	b149      	cbz	r1, 12b66 <hb_sub_send_status+0x6e>
	} else if (val == 0xffff) {
   12b52:	f64f 73ff 	movw	r3, #65535	; 0xffff
   12b56:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val);
   12b58:	bf1d      	ittte	ne
   12b5a:	fab1 f181 	clzne	r1, r1
   12b5e:	f1c1 0120 	rsbne	r1, r1, #32
   12b62:	b2c9      	uxtbne	r1, r1
		return 0xff;
   12b64:	21ff      	moveq	r1, #255	; 0xff
   12b66:	a803      	add	r0, sp, #12
   12b68:	f015 fb7d 	bl	28266 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, sub->min_hops);
   12b6c:	7ba1      	ldrb	r1, [r4, #14]
   12b6e:	a803      	add	r0, sp, #12
   12b70:	f015 fb79 	bl	28266 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, sub->max_hops);
   12b74:	7be1      	ldrb	r1, [r4, #15]
   12b76:	a803      	add	r0, sp, #12
   12b78:	f015 fb75 	bl	28266 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   12b7c:	2300      	movs	r3, #0
   12b7e:	9300      	str	r3, [sp, #0]
   12b80:	aa03      	add	r2, sp, #12
   12b82:	4631      	mov	r1, r6
   12b84:	4628      	mov	r0, r5
   12b86:	f7fd fdb9 	bl	106fc <bt_mesh_model_send>
   12b8a:	b148      	cbz	r0, 12ba0 <hb_sub_send_status+0xa8>
   12b8c:	4906      	ldr	r1, [pc, #24]	; (12ba8 <hb_sub_send_status+0xb0>)
   12b8e:	4b07      	ldr	r3, [pc, #28]	; (12bac <hb_sub_send_status+0xb4>)
		BT_ERR("Unable to send Heartbeat Subscription Status");
   12b90:	4807      	ldr	r0, [pc, #28]	; (12bb0 <hb_sub_send_status+0xb8>)
   12b92:	1ac9      	subs	r1, r1, r3
   12b94:	08c9      	lsrs	r1, r1, #3
   12b96:	0189      	lsls	r1, r1, #6
   12b98:	f041 0101 	orr.w	r1, r1, #1
   12b9c:	f00e ffa5 	bl	21aea <log_0>
}
   12ba0:	2000      	movs	r0, #0
   12ba2:	b00a      	add	sp, #40	; 0x28
   12ba4:	bd70      	pop	{r4, r5, r6, pc}
   12ba6:	bf00      	nop
   12ba8:	000299b8 	.word	0x000299b8
   12bac:	00029870 	.word	0x00029870
   12bb0:	0002e0b7 	.word	0x0002e0b7

00012bb4 <heartbeat_sub_set>:
{
   12bb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12bb8:	4606      	mov	r6, r0
   12bba:	b085      	sub	sp, #20
	sub_src = net_buf_simple_pull_le16(buf);
   12bbc:	4610      	mov	r0, r2
{
   12bbe:	4614      	mov	r4, r2
   12bc0:	460f      	mov	r7, r1
	sub_src = net_buf_simple_pull_le16(buf);
   12bc2:	f015 fbc9 	bl	28358 <net_buf_simple_pull_le16>
   12bc6:	4680      	mov	r8, r0
	sub_dst = net_buf_simple_pull_le16(buf);
   12bc8:	4620      	mov	r0, r4
   12bca:	f015 fbc5 	bl	28358 <net_buf_simple_pull_le16>
   12bce:	4681      	mov	r9, r0
	period_log = net_buf_simple_pull_u8(buf);
   12bd0:	4620      	mov	r0, r4
   12bd2:	f015 fbb9 	bl	28348 <net_buf_simple_pull_u8>
	if (period_log > 0x11) {
   12bd6:	2811      	cmp	r0, #17
	period_log = net_buf_simple_pull_u8(buf);
   12bd8:	4604      	mov	r4, r0
	if (period_log > 0x11) {
   12bda:	d90d      	bls.n	12bf8 <heartbeat_sub_set+0x44>
   12bdc:	4a1a      	ldr	r2, [pc, #104]	; (12c48 <heartbeat_sub_set+0x94>)
   12bde:	4b1b      	ldr	r3, [pc, #108]	; (12c4c <heartbeat_sub_set+0x98>)
   12be0:	1ad2      	subs	r2, r2, r3
   12be2:	08d2      	lsrs	r2, r2, #3
		BT_WARN("Prohibited subscription period 0x%02x", period_log);
   12be4:	0192      	lsls	r2, r2, #6
   12be6:	4601      	mov	r1, r0
   12be8:	f042 0202 	orr.w	r2, r2, #2
   12bec:	4818      	ldr	r0, [pc, #96]	; (12c50 <heartbeat_sub_set+0x9c>)
   12bee:	f00e ff89 	bl	21b04 <log_1>
		return -EINVAL;
   12bf2:	f06f 0415 	mvn.w	r4, #21
   12bf6:	e023      	b.n	12c40 <heartbeat_sub_set+0x8c>
	period = bt_mesh_hb_pwr2(period_log);
   12bf8:	f013 fd4c 	bl	26694 <bt_mesh_hb_pwr2>
	status = bt_mesh_hb_sub_set(sub_src, sub_dst, period);
   12bfc:	4649      	mov	r1, r9
	period = bt_mesh_hb_pwr2(period_log);
   12bfe:	4605      	mov	r5, r0
	status = bt_mesh_hb_sub_set(sub_src, sub_dst, period);
   12c00:	4602      	mov	r2, r0
   12c02:	4640      	mov	r0, r8
   12c04:	f7fc fe4c 	bl	f8a0 <bt_mesh_hb_sub_set>
	if (status != STATUS_SUCCESS) {
   12c08:	2800      	cmp	r0, #0
   12c0a:	d1f2      	bne.n	12bf2 <heartbeat_sub_set+0x3e>
	bt_mesh_hb_sub_get(&sub);
   12c0c:	4668      	mov	r0, sp
   12c0e:	f7fc febf 	bl	f990 <bt_mesh_hb_sub_get>
	if (sub.src == BT_MESH_ADDR_UNASSIGNED || !period_log) {
   12c12:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   12c16:	b103      	cbz	r3, 12c1a <heartbeat_sub_set+0x66>
   12c18:	b914      	cbnz	r4, 12c20 <heartbeat_sub_set+0x6c>
		sub.min_hops = BT_MESH_TTL_MAX;
   12c1a:	237f      	movs	r3, #127	; 0x7f
   12c1c:	f88d 300e 	strb.w	r3, [sp, #14]
	err = hb_sub_send_status(model, ctx, &sub);
   12c20:	466a      	mov	r2, sp
   12c22:	4639      	mov	r1, r7
   12c24:	4630      	mov	r0, r6
   12c26:	f7ff ff67 	bl	12af8 <hb_sub_send_status>
	if (err) {
   12c2a:	4604      	mov	r4, r0
   12c2c:	b940      	cbnz	r0, 12c40 <heartbeat_sub_set+0x8c>
	if (sub.src != BT_MESH_ADDR_UNASSIGNED &&
   12c2e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   12c32:	b12b      	cbz	r3, 12c40 <heartbeat_sub_set+0x8c>
   12c34:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   12c38:	b113      	cbz	r3, 12c40 <heartbeat_sub_set+0x8c>
	    sub.dst != BT_MESH_ADDR_UNASSIGNED && !period) {
   12c3a:	b90d      	cbnz	r5, 12c40 <heartbeat_sub_set+0x8c>
		bt_mesh_hb_sub_reset_count();
   12c3c:	f7fc fea2 	bl	f984 <bt_mesh_hb_sub_reset_count>
}
   12c40:	4620      	mov	r0, r4
   12c42:	b005      	add	sp, #20
   12c44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12c48:	000299b8 	.word	0x000299b8
   12c4c:	00029870 	.word	0x00029870
   12c50:	0002e0e4 	.word	0x0002e0e4

00012c54 <bt_mesh_model_reset>:
	}
}

void bt_mesh_model_reset(void)
{
	bt_mesh_model_foreach(mod_reset, NULL);
   12c54:	4801      	ldr	r0, [pc, #4]	; (12c5c <bt_mesh_model_reset+0x8>)
   12c56:	2100      	movs	r1, #0
   12c58:	f7fd b9ca 	b.w	fff0 <bt_mesh_model_foreach>
   12c5c:	000265ab 	.word	0x000265ab

00012c60 <send_attention_status>:
	return 0;
}

static int send_attention_status(struct bt_mesh_model *model,
				 struct bt_mesh_msg_ctx *ctx)
{
   12c60:	b5f0      	push	{r4, r5, r6, r7, lr}
   12c62:	4605      	mov	r5, r0
   12c64:	69c0      	ldr	r0, [r0, #28]
   12c66:	b089      	sub	sp, #36	; 0x24
	/* Needed size: opcode (2 bytes) + msg + MIC */
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_ATTENTION_STATUS, 1);
   12c68:	ab03      	add	r3, sp, #12
   12c6a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
   12c6e:	3018      	adds	r0, #24
   12c70:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12c74:	9305      	str	r3, [sp, #20]
{
   12c76:	460e      	mov	r6, r1
   12c78:	f016 fa1e 	bl	290b8 <z_timeout_remaining>

	time = k_ticks_to_ms_floor32(
		k_work_delayable_remaining_get(&srv->attn_timer)) / 1000U;
	BT_DBG("%u second%s", time, (time == 1U) ? "" : "s");

	bt_mesh_model_msg_init(&msg, OP_ATTENTION_STATUS);
   12c7c:	f248 0107 	movw	r1, #32775	; 0x8007
   12c80:	4604      	mov	r4, r0
   12c82:	a805      	add	r0, sp, #20
   12c84:	f013 fc40 	bl	26508 <bt_mesh_model_msg_init>
			return (uint32_t)((t * to_hz + off) / from_hz);
   12c88:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   12c8c:	fba4 4001 	umull	r4, r0, r4, r1
   12c90:	0be2      	lsrs	r2, r4, #15
   12c92:	ea42 4240 	orr.w	r2, r2, r0, lsl #17
 * @return The converted time value
 */
static TIME_CONSTEXPR inline uint32_t k_ticks_to_ms_floor32(uint32_t t)
{
	/* Generated.  Do not edit.  See above. */
	return z_tmcvt(t, Z_HZ_ticks, Z_HZ_ms, true, true, false, false);
   12c96:	2700      	movs	r7, #0
		k_work_delayable_remaining_get(&srv->attn_timer)) / 1000U;
   12c98:	fbb2 f1f1 	udiv	r1, r2, r1

	net_buf_simple_add_u8(&msg, time);
   12c9c:	a805      	add	r0, sp, #20
   12c9e:	b2c9      	uxtb	r1, r1
   12ca0:	f015 fae1 	bl	28266 <net_buf_simple_add_u8>

	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   12ca4:	9700      	str	r7, [sp, #0]
   12ca6:	463b      	mov	r3, r7
   12ca8:	aa05      	add	r2, sp, #20
   12caa:	4631      	mov	r1, r6
   12cac:	4628      	mov	r0, r5
   12cae:	f7fd fd25 	bl	106fc <bt_mesh_model_send>
   12cb2:	b148      	cbz	r0, 12cc8 <send_attention_status+0x68>
   12cb4:	4906      	ldr	r1, [pc, #24]	; (12cd0 <send_attention_status+0x70>)
   12cb6:	4b07      	ldr	r3, [pc, #28]	; (12cd4 <send_attention_status+0x74>)
		BT_ERR("Unable to send Attention Status");
   12cb8:	4807      	ldr	r0, [pc, #28]	; (12cd8 <send_attention_status+0x78>)
   12cba:	1ac9      	subs	r1, r1, r3
   12cbc:	08c9      	lsrs	r1, r1, #3
   12cbe:	0189      	lsls	r1, r1, #6
   12cc0:	f041 0101 	orr.w	r1, r1, #1
   12cc4:	f00e ff11 	bl	21aea <log_0>
	}

	return 0;
}
   12cc8:	2000      	movs	r0, #0
   12cca:	b009      	add	sp, #36	; 0x24
   12ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12cce:	bf00      	nop
   12cd0:	000299d8 	.word	0x000299d8
   12cd4:	00029870 	.word	0x00029870
   12cd8:	0002e11a 	.word	0x0002e11a

00012cdc <health_period_set_unrel>:
}

static int health_period_set_unrel(struct bt_mesh_model *model,
				    struct bt_mesh_msg_ctx *ctx,
				    struct net_buf_simple *buf)
{
   12cdc:	b510      	push	{r4, lr}
   12cde:	4604      	mov	r4, r0
	uint8_t period;

	period = net_buf_simple_pull_u8(buf);
   12ce0:	4610      	mov	r0, r2
   12ce2:	f015 fb31 	bl	28348 <net_buf_simple_pull_u8>
	if (period > 15) {
   12ce6:	280f      	cmp	r0, #15
	period = net_buf_simple_pull_u8(buf);
   12ce8:	4601      	mov	r1, r0
	if (period > 15) {
   12cea:	d90c      	bls.n	12d06 <health_period_set_unrel+0x2a>
   12cec:	4b09      	ldr	r3, [pc, #36]	; (12d14 <health_period_set_unrel+0x38>)
   12cee:	4a0a      	ldr	r2, [pc, #40]	; (12d18 <health_period_set_unrel+0x3c>)
		BT_WARN("Prohibited period value %u", period);
   12cf0:	480a      	ldr	r0, [pc, #40]	; (12d1c <health_period_set_unrel+0x40>)
   12cf2:	1ad2      	subs	r2, r2, r3
   12cf4:	08d2      	lsrs	r2, r2, #3
   12cf6:	0192      	lsls	r2, r2, #6
   12cf8:	f042 0202 	orr.w	r2, r2, #2
   12cfc:	f00e ff02 	bl	21b04 <log_1>
		return -EINVAL;
   12d00:	f06f 0015 	mvn.w	r0, #21
	BT_DBG("period %u", period);

	model->pub->period_div = period;

	return 0;
}
   12d04:	bd10      	pop	{r4, pc}
	model->pub->period_div = period;
   12d06:	68a3      	ldr	r3, [r4, #8]
   12d08:	7ada      	ldrb	r2, [r3, #11]
   12d0a:	f360 0203 	bfi	r2, r0, #0, #4
   12d0e:	72da      	strb	r2, [r3, #11]
	return 0;
   12d10:	2000      	movs	r0, #0
   12d12:	e7f7      	b.n	12d04 <health_period_set_unrel+0x28>
   12d14:	00029870 	.word	0x00029870
   12d18:	000299d8 	.word	0x000299d8
   12d1c:	0002e13a 	.word	0x0002e13a

00012d20 <health_get_registered>:
{
   12d20:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   12d24:	4614      	mov	r4, r2
	struct bt_mesh_health_srv *srv = mod->user_data;
   12d26:	f8d0 801c 	ldr.w	r8, [r0, #28]
{
   12d2a:	460f      	mov	r7, r1
   12d2c:	4606      	mov	r6, r0
	bt_mesh_model_msg_init(msg, OP_HEALTH_FAULT_STATUS);
   12d2e:	2105      	movs	r1, #5
   12d30:	4610      	mov	r0, r2
   12d32:	f013 fbe9 	bl	26508 <bt_mesh_model_msg_init>
	test_id = net_buf_simple_add(msg, 1);
   12d36:	2101      	movs	r1, #1
   12d38:	4620      	mov	r0, r4
   12d3a:	f015 fa85 	bl	28248 <net_buf_simple_add>
	net_buf_simple_add_le16(msg, company_id);
   12d3e:	4639      	mov	r1, r7
	test_id = net_buf_simple_add(msg, 1);
   12d40:	4605      	mov	r5, r0
	net_buf_simple_add_le16(msg, company_id);
   12d42:	4620      	mov	r0, r4
   12d44:	f015 fa97 	bl	28276 <net_buf_simple_add_le16>
	if (srv->cb && srv->cb->fault_get_reg) {
   12d48:	f8d8 3004 	ldr.w	r3, [r8, #4]
   12d4c:	b363      	cbz	r3, 12da8 <health_get_registered+0x88>
   12d4e:	685b      	ldr	r3, [r3, #4]
   12d50:	b353      	cbz	r3, 12da8 <health_get_registered+0x88>
		uint8_t fault_count = net_buf_simple_tailroom(msg) - 4;
   12d52:	4620      	mov	r0, r4
   12d54:	f015 fb2d 	bl	283b2 <net_buf_simple_tailroom>
   12d58:	3804      	subs	r0, #4
		err = srv->cb->fault_get_reg(mod, company_id, test_id,
   12d5a:	f8d8 1004 	ldr.w	r1, [r8, #4]
	return buf->data + buf->len;
   12d5e:	6822      	ldr	r2, [r4, #0]
   12d60:	88a3      	ldrh	r3, [r4, #4]
		uint8_t fault_count = net_buf_simple_tailroom(msg) - 4;
   12d62:	f88d 000f 	strb.w	r0, [sp, #15]
		err = srv->cb->fault_get_reg(mod, company_id, test_id,
   12d66:	f10d 000f 	add.w	r0, sp, #15
   12d6a:	9000      	str	r0, [sp, #0]
   12d6c:	f8d1 8004 	ldr.w	r8, [r1, #4]
   12d70:	4413      	add	r3, r2
   12d72:	4639      	mov	r1, r7
   12d74:	462a      	mov	r2, r5
   12d76:	4630      	mov	r0, r6
   12d78:	47c0      	blx	r8
		if (err) {
   12d7a:	4601      	mov	r1, r0
   12d7c:	b160      	cbz	r0, 12d98 <health_get_registered+0x78>
   12d7e:	4a10      	ldr	r2, [pc, #64]	; (12dc0 <health_get_registered+0xa0>)
   12d80:	4b10      	ldr	r3, [pc, #64]	; (12dc4 <health_get_registered+0xa4>)
			BT_ERR("Failed to get faults (err %d)", err);
   12d82:	4811      	ldr	r0, [pc, #68]	; (12dc8 <health_get_registered+0xa8>)
   12d84:	1ad2      	subs	r2, r2, r3
   12d86:	08d2      	lsrs	r2, r2, #3
   12d88:	0192      	lsls	r2, r2, #6
   12d8a:	f042 0201 	orr.w	r2, r2, #1
   12d8e:	f00e feb9 	bl	21b04 <log_1>
		*test_id = HEALTH_TEST_STANDARD;
   12d92:	2300      	movs	r3, #0
   12d94:	702b      	strb	r3, [r5, #0]
}
   12d96:	e004      	b.n	12da2 <health_get_registered+0x82>
			net_buf_simple_add(msg, fault_count);
   12d98:	f89d 100f 	ldrb.w	r1, [sp, #15]
   12d9c:	4620      	mov	r0, r4
   12d9e:	f015 fa53 	bl	28248 <net_buf_simple_add>
}
   12da2:	b004      	add	sp, #16
   12da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12da8:	4b06      	ldr	r3, [pc, #24]	; (12dc4 <health_get_registered+0xa4>)
   12daa:	4905      	ldr	r1, [pc, #20]	; (12dc0 <health_get_registered+0xa0>)
		BT_WARN("No callback for getting faults");
   12dac:	4807      	ldr	r0, [pc, #28]	; (12dcc <health_get_registered+0xac>)
   12dae:	1ac9      	subs	r1, r1, r3
   12db0:	08c9      	lsrs	r1, r1, #3
   12db2:	0189      	lsls	r1, r1, #6
   12db4:	f041 0102 	orr.w	r1, r1, #2
   12db8:	f00e fe97 	bl	21aea <log_0>
   12dbc:	e7e9      	b.n	12d92 <health_get_registered+0x72>
   12dbe:	bf00      	nop
   12dc0:	000299d8 	.word	0x000299d8
   12dc4:	00029870 	.word	0x00029870
   12dc8:	0002e155 	.word	0x0002e155
   12dcc:	0002e173 	.word	0x0002e173

00012dd0 <health_fault_test>:
{
   12dd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12dd4:	4614      	mov	r4, r2
   12dd6:	b099      	sub	sp, #100	; 0x64
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   12dd8:	ab06      	add	r3, sp, #24
	struct bt_mesh_health_srv *srv = model->user_data;
   12dda:	f8d0 901c 	ldr.w	r9, [r0, #28]
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   12dde:	9303      	str	r3, [sp, #12]
   12de0:	f44f 0290 	mov.w	r2, #4718592	; 0x480000
{
   12de4:	4605      	mov	r5, r0
	test_id = net_buf_simple_pull_u8(buf);
   12de6:	4620      	mov	r0, r4
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   12de8:	e9cd 2304 	strd	r2, r3, [sp, #16]
{
   12dec:	460f      	mov	r7, r1
	test_id = net_buf_simple_pull_u8(buf);
   12dee:	f015 faab 	bl	28348 <net_buf_simple_pull_u8>
   12df2:	4680      	mov	r8, r0
	company_id = net_buf_simple_pull_le16(buf);
   12df4:	4620      	mov	r0, r4
   12df6:	f015 faaf 	bl	28358 <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_test) {
   12dfa:	f8d9 3004 	ldr.w	r3, [r9, #4]
	company_id = net_buf_simple_pull_le16(buf);
   12dfe:	4606      	mov	r6, r0
	if (srv->cb && srv->cb->fault_test) {
   12e00:	b1b3      	cbz	r3, 12e30 <health_fault_test+0x60>
   12e02:	68db      	ldr	r3, [r3, #12]
   12e04:	b1a3      	cbz	r3, 12e30 <health_fault_test+0x60>
		err = srv->cb->fault_test(model, test_id, company_id);
   12e06:	4602      	mov	r2, r0
   12e08:	4641      	mov	r1, r8
   12e0a:	4628      	mov	r0, r5
   12e0c:	4798      	blx	r3
		if (err) {
   12e0e:	4604      	mov	r4, r0
   12e10:	b170      	cbz	r0, 12e30 <health_fault_test+0x60>
   12e12:	4a15      	ldr	r2, [pc, #84]	; (12e68 <health_fault_test+0x98>)
   12e14:	4b15      	ldr	r3, [pc, #84]	; (12e6c <health_fault_test+0x9c>)
   12e16:	1ad2      	subs	r2, r2, r3
   12e18:	08d2      	lsrs	r2, r2, #3
			BT_WARN("Running fault test failed with err %d", err);
   12e1a:	0192      	lsls	r2, r2, #6
   12e1c:	4601      	mov	r1, r0
   12e1e:	f042 0202 	orr.w	r2, r2, #2
   12e22:	4813      	ldr	r0, [pc, #76]	; (12e70 <health_fault_test+0xa0>)
   12e24:	f00e fe6e 	bl	21b04 <log_1>
}
   12e28:	4620      	mov	r0, r4
   12e2a:	b019      	add	sp, #100	; 0x64
   12e2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	health_get_registered(model, company_id, &sdu);
   12e30:	4631      	mov	r1, r6
   12e32:	aa03      	add	r2, sp, #12
   12e34:	4628      	mov	r0, r5
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   12e36:	2600      	movs	r6, #0
	health_get_registered(model, company_id, &sdu);
   12e38:	f7ff ff72 	bl	12d20 <health_get_registered>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   12e3c:	9600      	str	r6, [sp, #0]
   12e3e:	4633      	mov	r3, r6
   12e40:	aa03      	add	r2, sp, #12
   12e42:	4639      	mov	r1, r7
   12e44:	4628      	mov	r0, r5
   12e46:	f7fd fc59 	bl	106fc <bt_mesh_model_send>
   12e4a:	4604      	mov	r4, r0
   12e4c:	2800      	cmp	r0, #0
   12e4e:	d0eb      	beq.n	12e28 <health_fault_test+0x58>
   12e50:	4b06      	ldr	r3, [pc, #24]	; (12e6c <health_fault_test+0x9c>)
   12e52:	4905      	ldr	r1, [pc, #20]	; (12e68 <health_fault_test+0x98>)
		BT_ERR("Unable to send Health Current Status response");
   12e54:	4807      	ldr	r0, [pc, #28]	; (12e74 <health_fault_test+0xa4>)
   12e56:	1ac9      	subs	r1, r1, r3
   12e58:	08c9      	lsrs	r1, r1, #3
   12e5a:	0189      	lsls	r1, r1, #6
   12e5c:	f041 0101 	orr.w	r1, r1, #1
   12e60:	f00e fe43 	bl	21aea <log_0>
	return 0;
   12e64:	4634      	mov	r4, r6
   12e66:	e7df      	b.n	12e28 <health_fault_test+0x58>
   12e68:	000299d8 	.word	0x000299d8
   12e6c:	00029870 	.word	0x00029870
   12e70:	0002e192 	.word	0x0002e192
   12e74:	0002e1b8 	.word	0x0002e1b8

00012e78 <health_fault_clear>:
{
   12e78:	b5f0      	push	{r4, r5, r6, r7, lr}
   12e7a:	b099      	sub	sp, #100	; 0x64
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   12e7c:	ab06      	add	r3, sp, #24
	struct bt_mesh_health_srv *srv = model->user_data;
   12e7e:	69c7      	ldr	r7, [r0, #28]
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   12e80:	9303      	str	r3, [sp, #12]
{
   12e82:	4604      	mov	r4, r0
   12e84:	460e      	mov	r6, r1
	company_id = net_buf_simple_pull_le16(buf);
   12e86:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   12e88:	f44f 0190 	mov.w	r1, #4718592	; 0x480000
   12e8c:	e9cd 1304 	strd	r1, r3, [sp, #16]
	company_id = net_buf_simple_pull_le16(buf);
   12e90:	f015 fa62 	bl	28358 <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_clear) {
   12e94:	687b      	ldr	r3, [r7, #4]
	company_id = net_buf_simple_pull_le16(buf);
   12e96:	4605      	mov	r5, r0
	if (srv->cb && srv->cb->fault_clear) {
   12e98:	b9cb      	cbnz	r3, 12ece <health_fault_clear+0x56>
	health_get_registered(model, company_id, &sdu);
   12e9a:	4629      	mov	r1, r5
   12e9c:	aa03      	add	r2, sp, #12
   12e9e:	4620      	mov	r0, r4
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   12ea0:	2500      	movs	r5, #0
	health_get_registered(model, company_id, &sdu);
   12ea2:	f7ff ff3d 	bl	12d20 <health_get_registered>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   12ea6:	9500      	str	r5, [sp, #0]
   12ea8:	462b      	mov	r3, r5
   12eaa:	aa03      	add	r2, sp, #12
   12eac:	4631      	mov	r1, r6
   12eae:	4620      	mov	r0, r4
   12eb0:	f7fd fc24 	bl	106fc <bt_mesh_model_send>
   12eb4:	b198      	cbz	r0, 12ede <health_fault_clear+0x66>
   12eb6:	4b0b      	ldr	r3, [pc, #44]	; (12ee4 <health_fault_clear+0x6c>)
   12eb8:	490b      	ldr	r1, [pc, #44]	; (12ee8 <health_fault_clear+0x70>)
		BT_ERR("Unable to send Health Current Status response");
   12eba:	480c      	ldr	r0, [pc, #48]	; (12eec <health_fault_clear+0x74>)
   12ebc:	1ac9      	subs	r1, r1, r3
   12ebe:	08c9      	lsrs	r1, r1, #3
   12ec0:	0189      	lsls	r1, r1, #6
   12ec2:	f041 0101 	orr.w	r1, r1, #1
   12ec6:	f00e fe10 	bl	21aea <log_0>
	return 0;
   12eca:	4628      	mov	r0, r5
   12ecc:	e007      	b.n	12ede <health_fault_clear+0x66>
	if (srv->cb && srv->cb->fault_clear) {
   12ece:	689b      	ldr	r3, [r3, #8]
   12ed0:	2b00      	cmp	r3, #0
   12ed2:	d0e2      	beq.n	12e9a <health_fault_clear+0x22>
		err = srv->cb->fault_clear(model, company_id);
   12ed4:	4601      	mov	r1, r0
   12ed6:	4620      	mov	r0, r4
   12ed8:	4798      	blx	r3
		if (err) {
   12eda:	2800      	cmp	r0, #0
   12edc:	d0dd      	beq.n	12e9a <health_fault_clear+0x22>
}
   12ede:	b019      	add	sp, #100	; 0x64
   12ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12ee2:	bf00      	nop
   12ee4:	00029870 	.word	0x00029870
   12ee8:	000299d8 	.word	0x000299d8
   12eec:	0002e1b8 	.word	0x0002e1b8

00012ef0 <health_pub_update>:
	{ OP_ATTENTION_SET_UNREL,      BT_MESH_LEN_EXACT(1),   attention_set_unrel },
	BT_MESH_MODEL_OP_END,
};

static int health_pub_update(struct bt_mesh_model *mod)
{
   12ef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_mesh_model_pub *pub = mod->pub;
   12ef4:	6887      	ldr	r7, [r0, #8]
	struct bt_mesh_health_srv *srv = mod->user_data;
   12ef6:	f8d0 a01c 	ldr.w	sl, [r0, #28]
	size_t count;

	BT_DBG("");

	count = health_get_current(mod, pub->msg);
   12efa:	f8d7 8010 	ldr.w	r8, [r7, #16]
	bt_mesh_model_msg_init(msg, OP_HEALTH_CURRENT_STATUS);
   12efe:	2104      	movs	r1, #4
{
   12f00:	4681      	mov	r9, r0
	bt_mesh_model_msg_init(msg, OP_HEALTH_CURRENT_STATUS);
   12f02:	4640      	mov	r0, r8
   12f04:	f013 fb00 	bl	26508 <bt_mesh_model_msg_init>
	test_id = net_buf_simple_add(msg, 1);
   12f08:	2101      	movs	r1, #1
   12f0a:	4640      	mov	r0, r8
   12f0c:	f015 f99c 	bl	28248 <net_buf_simple_add>
	company_ptr = net_buf_simple_add(msg, sizeof(company_id));
   12f10:	2102      	movs	r1, #2
	test_id = net_buf_simple_add(msg, 1);
   12f12:	4605      	mov	r5, r0
	company_ptr = net_buf_simple_add(msg, sizeof(company_id));
   12f14:	4640      	mov	r0, r8
   12f16:	f015 f997 	bl	28248 <net_buf_simple_add>
   12f1a:	4604      	mov	r4, r0
	comp = bt_mesh_comp_get();
   12f1c:	f7fd fc6e 	bl	107fc <bt_mesh_comp_get>
	if (srv->cb && srv->cb->fault_get_cur) {
   12f20:	f8da 3004 	ldr.w	r3, [sl, #4]
	comp = bt_mesh_comp_get();
   12f24:	4606      	mov	r6, r0
	if (srv->cb && srv->cb->fault_get_cur) {
   12f26:	2b00      	cmp	r3, #0
   12f28:	d044      	beq.n	12fb4 <health_pub_update+0xc4>
   12f2a:	681b      	ldr	r3, [r3, #0]
   12f2c:	2b00      	cmp	r3, #0
   12f2e:	d041      	beq.n	12fb4 <health_pub_update+0xc4>
		fault_count = net_buf_simple_tailroom(msg);
   12f30:	4640      	mov	r0, r8
   12f32:	f015 fa3e 	bl	283b2 <net_buf_simple_tailroom>
   12f36:	f88d 000d 	strb.w	r0, [sp, #13]
   12f3a:	f8d8 2000 	ldr.w	r2, [r8]
		err = srv->cb->fault_get_cur(mod, test_id, &company_id,
   12f3e:	f8da 1004 	ldr.w	r1, [sl, #4]
   12f42:	f8b8 3004 	ldrh.w	r3, [r8, #4]
   12f46:	f10d 000d 	add.w	r0, sp, #13
   12f4a:	9000      	str	r0, [sp, #0]
   12f4c:	f8d1 a000 	ldr.w	sl, [r1]
   12f50:	4413      	add	r3, r2
   12f52:	4629      	mov	r1, r5
   12f54:	f10d 020e 	add.w	r2, sp, #14
   12f58:	4648      	mov	r0, r9
   12f5a:	47d0      	blx	sl
		if (err) {
   12f5c:	4601      	mov	r1, r0
   12f5e:	b190      	cbz	r0, 12f86 <health_pub_update+0x96>
   12f60:	4a1a      	ldr	r2, [pc, #104]	; (12fcc <health_pub_update+0xdc>)
   12f62:	4b1b      	ldr	r3, [pc, #108]	; (12fd0 <health_pub_update+0xe0>)
			BT_ERR("Failed to get faults (err %d)", err);
   12f64:	481b      	ldr	r0, [pc, #108]	; (12fd4 <health_pub_update+0xe4>)
   12f66:	1ad2      	subs	r2, r2, r3
   12f68:	08d2      	lsrs	r2, r2, #3
   12f6a:	0192      	lsls	r2, r2, #6
   12f6c:	f042 0201 	orr.w	r2, r2, #1
   12f70:	f00e fdc8 	bl	21b04 <log_1>
		sys_put_le16(comp->cid, company_ptr);
   12f74:	8833      	ldrh	r3, [r6, #0]
	dst[0] = val;
   12f76:	7023      	strb	r3, [r4, #0]
	dst[1] = val >> 8;
   12f78:	0a1b      	lsrs	r3, r3, #8
   12f7a:	7063      	strb	r3, [r4, #1]
		*test_id = HEALTH_TEST_STANDARD;
   12f7c:	2300      	movs	r3, #0
   12f7e:	702b      	strb	r3, [r5, #0]
		fault_count = 0U;
   12f80:	f88d 300d 	strb.w	r3, [sp, #13]
   12f84:	e009      	b.n	12f9a <health_pub_update+0xaa>
			sys_put_le16(company_id, company_ptr);
   12f86:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	dst[0] = val;
   12f8a:	7023      	strb	r3, [r4, #0]
	dst[1] = val >> 8;
   12f8c:	0a1b      	lsrs	r3, r3, #8
			net_buf_simple_add(msg, fault_count);
   12f8e:	f89d 100d 	ldrb.w	r1, [sp, #13]
   12f92:	7063      	strb	r3, [r4, #1]
   12f94:	4640      	mov	r0, r8
   12f96:	f015 f957 	bl	28248 <net_buf_simple_add>
	return fault_count;
   12f9a:	f89d 300d 	ldrb.w	r3, [sp, #13]
	if (count) {
   12f9e:	79fa      	ldrb	r2, [r7, #7]
   12fa0:	3b00      	subs	r3, #0
   12fa2:	bf18      	it	ne
   12fa4:	2301      	movne	r3, #1
   12fa6:	f363 1286 	bfi	r2, r3, #6, #1
	} else {
		pub->fast_period = 0U;
	}

	return 0;
}
   12faa:	2000      	movs	r0, #0
   12fac:	71fa      	strb	r2, [r7, #7]
   12fae:	b004      	add	sp, #16
   12fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12fb4:	4b06      	ldr	r3, [pc, #24]	; (12fd0 <health_pub_update+0xe0>)
   12fb6:	4905      	ldr	r1, [pc, #20]	; (12fcc <health_pub_update+0xdc>)
		BT_WARN("No callback for getting faults");
   12fb8:	4807      	ldr	r0, [pc, #28]	; (12fd8 <health_pub_update+0xe8>)
   12fba:	1ac9      	subs	r1, r1, r3
   12fbc:	08c9      	lsrs	r1, r1, #3
   12fbe:	0189      	lsls	r1, r1, #6
   12fc0:	f041 0102 	orr.w	r1, r1, #2
   12fc4:	f00e fd91 	bl	21aea <log_0>
   12fc8:	e7d4      	b.n	12f74 <health_pub_update+0x84>
   12fca:	bf00      	nop
   12fcc:	000299d8 	.word	0x000299d8
   12fd0:	00029870 	.word	0x00029870
   12fd4:	0002e155 	.word	0x0002e155
   12fd8:	0002e173 	.word	0x0002e173

00012fdc <health_srv_init>:
		srv->cb->attn_off(srv->model);
	}
}

static int health_srv_init(struct bt_mesh_model *model)
{
   12fdc:	b538      	push	{r3, r4, r5, lr}
	struct bt_mesh_health_srv *srv = model->user_data;
   12fde:	69c5      	ldr	r5, [r0, #28]
{
   12fe0:	4604      	mov	r4, r0

	if (!srv) {
   12fe2:	b965      	cbnz	r5, 12ffe <health_srv_init+0x22>
   12fe4:	4913      	ldr	r1, [pc, #76]	; (13034 <health_srv_init+0x58>)
   12fe6:	4b14      	ldr	r3, [pc, #80]	; (13038 <health_srv_init+0x5c>)
		BT_ERR("No Health Server context provided");
   12fe8:	4814      	ldr	r0, [pc, #80]	; (1303c <health_srv_init+0x60>)
   12fea:	1ac9      	subs	r1, r1, r3
   12fec:	08c9      	lsrs	r1, r1, #3
   12fee:	0189      	lsls	r1, r1, #6
   12ff0:	f041 0101 	orr.w	r1, r1, #1
		return -EINVAL;
	}

	if (!model->pub) {
		BT_ERR("Health Server has no publication support");
   12ff4:	f00e fd79 	bl	21aea <log_0>
		return -EINVAL;
   12ff8:	f06f 0015 	mvn.w	r0, #21
	if (bt_mesh_model_in_primary(model)) {
		health_srv = srv;
	}

	return 0;
}
   12ffc:	bd38      	pop	{r3, r4, r5, pc}
	if (!model->pub) {
   12ffe:	6883      	ldr	r3, [r0, #8]
   13000:	b943      	cbnz	r3, 13014 <health_srv_init+0x38>
   13002:	490c      	ldr	r1, [pc, #48]	; (13034 <health_srv_init+0x58>)
   13004:	4b0c      	ldr	r3, [pc, #48]	; (13038 <health_srv_init+0x5c>)
		BT_ERR("Health Server has no publication support");
   13006:	480e      	ldr	r0, [pc, #56]	; (13040 <health_srv_init+0x64>)
   13008:	1ac9      	subs	r1, r1, r3
   1300a:	08c9      	lsrs	r1, r1, #3
   1300c:	0189      	lsls	r1, r1, #6
   1300e:	f041 0101 	orr.w	r1, r1, #1
   13012:	e7ef      	b.n	12ff4 <health_srv_init+0x18>
	model->pub->update = health_pub_update;
   13014:	4a0b      	ldr	r2, [pc, #44]	; (13044 <health_srv_init+0x68>)
	k_work_init_delayable(&srv->attn_timer, attention_off);
   13016:	490c      	ldr	r1, [pc, #48]	; (13048 <health_srv_init+0x6c>)
	model->pub->update = health_pub_update;
   13018:	615a      	str	r2, [r3, #20]
	k_work_init_delayable(&srv->attn_timer, attention_off);
   1301a:	f105 0008 	add.w	r0, r5, #8
   1301e:	f015 fec0 	bl	28da2 <k_work_init_delayable>
	srv->model = model;
   13022:	602c      	str	r4, [r5, #0]
	if (bt_mesh_model_in_primary(model)) {
   13024:	7920      	ldrb	r0, [r4, #4]
   13026:	b910      	cbnz	r0, 1302e <health_srv_init+0x52>
		health_srv = srv;
   13028:	4b08      	ldr	r3, [pc, #32]	; (1304c <health_srv_init+0x70>)
   1302a:	601d      	str	r5, [r3, #0]
   1302c:	e7e6      	b.n	12ffc <health_srv_init+0x20>
	return 0;
   1302e:	2000      	movs	r0, #0
   13030:	e7e4      	b.n	12ffc <health_srv_init+0x20>
   13032:	bf00      	nop
   13034:	000299d8 	.word	0x000299d8
   13038:	00029870 	.word	0x00029870
   1303c:	0002e1e6 	.word	0x0002e1e6
   13040:	0002e208 	.word	0x0002e208
   13044:	00012ef1 	.word	0x00012ef1
   13048:	000268db 	.word	0x000268db
   1304c:	20002358 	.word	0x20002358

00013050 <send_health_period_status>:
{
   13050:	b530      	push	{r4, r5, lr}
   13052:	4604      	mov	r4, r0
   13054:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEALTH_PERIOD_STATUS, 1);
   13056:	ab03      	add	r3, sp, #12
   13058:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   1305c:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_HEALTH_PERIOD_STATUS);
   1305e:	a805      	add	r0, sp, #20
   13060:	f248 0137 	movw	r1, #32823	; 0x8037
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEALTH_PERIOD_STATUS, 1);
   13064:	e9cd 2306 	strd	r2, r3, [sp, #24]
   13068:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_HEALTH_PERIOD_STATUS);
   1306a:	f013 fa4d 	bl	26508 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, model->pub->period_div);
   1306e:	68a3      	ldr	r3, [r4, #8]
   13070:	7ad9      	ldrb	r1, [r3, #11]
   13072:	a805      	add	r0, sp, #20
   13074:	f001 010f 	and.w	r1, r1, #15
   13078:	f015 f8f5 	bl	28266 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1307c:	2300      	movs	r3, #0
   1307e:	9300      	str	r3, [sp, #0]
   13080:	aa05      	add	r2, sp, #20
   13082:	4629      	mov	r1, r5
   13084:	4620      	mov	r0, r4
   13086:	f7fd fb39 	bl	106fc <bt_mesh_model_send>
   1308a:	b148      	cbz	r0, 130a0 <send_health_period_status+0x50>
   1308c:	4906      	ldr	r1, [pc, #24]	; (130a8 <send_health_period_status+0x58>)
   1308e:	4b07      	ldr	r3, [pc, #28]	; (130ac <send_health_period_status+0x5c>)
		BT_ERR("Unable to send Health Period Status");
   13090:	4807      	ldr	r0, [pc, #28]	; (130b0 <send_health_period_status+0x60>)
   13092:	1ac9      	subs	r1, r1, r3
   13094:	08c9      	lsrs	r1, r1, #3
   13096:	0189      	lsls	r1, r1, #6
   13098:	f041 0101 	orr.w	r1, r1, #1
   1309c:	f00e fd25 	bl	21aea <log_0>
}
   130a0:	2000      	movs	r0, #0
   130a2:	b009      	add	sp, #36	; 0x24
   130a4:	bd30      	pop	{r4, r5, pc}
   130a6:	bf00      	nop
   130a8:	000299d8 	.word	0x000299d8
   130ac:	00029870 	.word	0x00029870
   130b0:	0002e231 	.word	0x0002e231

000130b4 <health_fault_get>:
{
   130b4:	b530      	push	{r4, r5, lr}
   130b6:	b099      	sub	sp, #100	; 0x64
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   130b8:	ab06      	add	r3, sp, #24
{
   130ba:	4604      	mov	r4, r0
   130bc:	460d      	mov	r5, r1
	company_id = net_buf_simple_pull_le16(buf);
   130be:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   130c0:	f44f 0190 	mov.w	r1, #4718592	; 0x480000
   130c4:	e9cd 1304 	strd	r1, r3, [sp, #16]
   130c8:	9303      	str	r3, [sp, #12]
	company_id = net_buf_simple_pull_le16(buf);
   130ca:	f015 f945 	bl	28358 <net_buf_simple_pull_le16>
	health_get_registered(model, company_id, &sdu);
   130ce:	aa03      	add	r2, sp, #12
	company_id = net_buf_simple_pull_le16(buf);
   130d0:	4601      	mov	r1, r0
	health_get_registered(model, company_id, &sdu);
   130d2:	4620      	mov	r0, r4
   130d4:	f7ff fe24 	bl	12d20 <health_get_registered>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   130d8:	2300      	movs	r3, #0
   130da:	9300      	str	r3, [sp, #0]
   130dc:	aa03      	add	r2, sp, #12
   130de:	4629      	mov	r1, r5
   130e0:	4620      	mov	r0, r4
   130e2:	f7fd fb0b 	bl	106fc <bt_mesh_model_send>
   130e6:	b148      	cbz	r0, 130fc <health_fault_get+0x48>
   130e8:	4906      	ldr	r1, [pc, #24]	; (13104 <health_fault_get+0x50>)
   130ea:	4b07      	ldr	r3, [pc, #28]	; (13108 <health_fault_get+0x54>)
		BT_ERR("Unable to send Health Current Status response");
   130ec:	4807      	ldr	r0, [pc, #28]	; (1310c <health_fault_get+0x58>)
   130ee:	1ac9      	subs	r1, r1, r3
   130f0:	08c9      	lsrs	r1, r1, #3
   130f2:	0189      	lsls	r1, r1, #6
   130f4:	f041 0101 	orr.w	r1, r1, #1
   130f8:	f00e fcf7 	bl	21aea <log_0>
}
   130fc:	2000      	movs	r0, #0
   130fe:	b019      	add	sp, #100	; 0x64
   13100:	bd30      	pop	{r4, r5, pc}
   13102:	bf00      	nop
   13104:	000299d8 	.word	0x000299d8
   13108:	00029870 	.word	0x00029870
   1310c:	0002e1b8 	.word	0x0002e1b8

00013110 <bt_mesh_attention>:
const struct bt_mesh_model_cb bt_mesh_health_srv_cb = {
	.init = health_srv_init,
};

void bt_mesh_attention(struct bt_mesh_model *model, uint8_t time)
{
   13110:	b570      	push	{r4, r5, r6, lr}
   13112:	460c      	mov	r4, r1
	struct bt_mesh_health_srv *srv;

	if (!model) {
   13114:	bb60      	cbnz	r0, 13170 <bt_mesh_attention+0x60>
		srv = health_srv;
   13116:	4b17      	ldr	r3, [pc, #92]	; (13174 <bt_mesh_attention+0x64>)
   13118:	681d      	ldr	r5, [r3, #0]
		if (!srv) {
   1311a:	b95d      	cbnz	r5, 13134 <bt_mesh_attention+0x24>
   1311c:	4916      	ldr	r1, [pc, #88]	; (13178 <bt_mesh_attention+0x68>)
   1311e:	4b17      	ldr	r3, [pc, #92]	; (1317c <bt_mesh_attention+0x6c>)
			BT_WARN("No Health Server available");
   13120:	4817      	ldr	r0, [pc, #92]	; (13180 <bt_mesh_attention+0x70>)
   13122:	1ac9      	subs	r1, r1, r3
   13124:	08c9      	lsrs	r1, r1, #3
   13126:	0189      	lsls	r1, r1, #6
	if ((time > 0) && srv->cb && srv->cb->attn_on) {
		srv->cb->attn_on(model);
	}

	k_work_reschedule(&srv->attn_timer, K_SECONDS(time));
}
   13128:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_WARN("No Health Server available");
   1312c:	f041 0102 	orr.w	r1, r1, #2
   13130:	f00e bcdb 	b.w	21aea <log_0>
		model = srv->model;
   13134:	6828      	ldr	r0, [r5, #0]
	if ((time > 0) && srv->cb && srv->cb->attn_on) {
   13136:	b124      	cbz	r4, 13142 <bt_mesh_attention+0x32>
   13138:	686b      	ldr	r3, [r5, #4]
   1313a:	b113      	cbz	r3, 13142 <bt_mesh_attention+0x32>
   1313c:	691b      	ldr	r3, [r3, #16]
   1313e:	b103      	cbz	r3, 13142 <bt_mesh_attention+0x32>
		srv->cb->attn_on(model);
   13140:	4798      	blx	r3
	k_work_reschedule(&srv->attn_timer, K_SECONDS(time));
   13142:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   13146:	434c      	muls	r4, r1
			return (t * to_hz + off) / from_hz;
   13148:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1314c:	f240 30e7 	movw	r0, #999	; 0x3e7
   13150:	2100      	movs	r1, #0
   13152:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13156:	2300      	movs	r3, #0
   13158:	fbe4 0106 	umlal	r0, r1, r4, r6
   1315c:	f7ed f810 	bl	180 <__aeabi_uldivmod>
   13160:	4602      	mov	r2, r0
   13162:	460b      	mov	r3, r1
   13164:	f105 0008 	add.w	r0, r5, #8
}
   13168:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&srv->attn_timer, K_SECONDS(time));
   1316c:	f00d b95a 	b.w	20424 <k_work_reschedule>
		srv = model->user_data;
   13170:	69c5      	ldr	r5, [r0, #28]
   13172:	e7e0      	b.n	13136 <bt_mesh_attention+0x26>
   13174:	20002358 	.word	0x20002358
   13178:	000299d8 	.word	0x000299d8
   1317c:	00029870 	.word	0x00029870
   13180:	0002e255 	.word	0x0002e255

00013184 <adv_thread>:

	BT_DBG("Advertising stopped (%u ms)", (uint32_t) k_uptime_delta(&time));
}

static void adv_thread(void *p1, void *p2, void *p3)
{
   13184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13188:	4b5f      	ldr	r3, [pc, #380]	; (13308 <adv_thread+0x184>)
   1318a:	4e60      	ldr	r6, [pc, #384]	; (1330c <adv_thread+0x188>)

	while (1) {
		struct net_buf *buf;

		if (IS_ENABLED(CONFIG_BT_MESH_GATT_SERVER)) {
			buf = net_buf_get(&bt_mesh_adv_queue, K_NO_WAIT);
   1318c:	f8df 8180 	ldr.w	r8, [pc, #384]	; 13310 <adv_thread+0x18c>
			while (!buf) {

				/* Adv timeout may be set by a call from proxy
				 * to bt_mesh_adv_start:
				 */
				adv_timeout = SYS_FOREVER_MS;
   13190:	4f60      	ldr	r7, [pc, #384]	; (13314 <adv_thread+0x190>)
   13192:	1af6      	subs	r6, r6, r3
{
   13194:	b08a      	sub	sp, #40	; 0x28
   13196:	08f6      	lsrs	r6, r6, #3
			buf = net_buf_get(&bt_mesh_adv_queue, K_NO_WAIT);
   13198:	2200      	movs	r2, #0
   1319a:	2300      	movs	r3, #0
   1319c:	4640      	mov	r0, r8
   1319e:	f014 ff9a 	bl	280d6 <net_buf_get>
   131a2:	4605      	mov	r5, r0
			while (!buf) {
   131a4:	2d00      	cmp	r5, #0
   131a6:	d06e      	beq.n	13286 <adv_thread+0x102>
		if (!buf) {
			continue;
		}

		/* busy == 0 means this was canceled */
		if (BT_MESH_ADV(buf)->busy) {
   131a8:	696a      	ldr	r2, [r5, #20]
   131aa:	7a13      	ldrb	r3, [r2, #8]
   131ac:	0719      	lsls	r1, r3, #28
   131ae:	d564      	bpl.n	1327a <adv_thread+0xf6>
			BT_MESH_ADV(buf)->busy = 0U;
   131b0:	f36f 03c3 	bfc	r3, #3, #1
   131b4:	7213      	strb	r3, [r2, #8]
		((bt_dev.hci_version >= BT_HCI_VERSION_5_0) ?
   131b6:	4b58      	ldr	r3, [pc, #352]	; (13318 <adv_thread+0x194>)
			       ADV_INT_FAST_MS :
   131b8:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
	struct bt_le_adv_param param = {};
   131bc:	2214      	movs	r2, #20
			       ADV_INT_FAST_MS :
   131be:	2b08      	cmp	r3, #8
	struct bt_le_adv_param param = {};
   131c0:	eb0d 0002 	add.w	r0, sp, r2
   131c4:	f04f 0100 	mov.w	r1, #0
			       ADV_INT_FAST_MS :
   131c8:	bf8c      	ite	hi
   131ca:	f04f 0914 	movhi.w	r9, #20
   131ce:	f04f 0964 	movls.w	r9, #100	; 0x64
	struct bt_le_adv_param param = {};
   131d2:	f010 fdf4 	bl	23dbe <memset>
	adv_int = MAX(adv_int_min,
   131d6:	6969      	ldr	r1, [r5, #20]
   131d8:	7a4c      	ldrb	r4, [r1, #9]
   131da:	08e2      	lsrs	r2, r4, #3
   131dc:	1c53      	adds	r3, r2, #1
   131de:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   131e2:	ebb9 0f42 	cmp.w	r9, r2, lsl #1
   131e6:	bfda      	itte	le
   131e8:	4613      	movle	r3, r2
   131ea:	005b      	lslle	r3, r3, #1
   131ec:	fa1f f389 	uxthgt.w	r3, r9
	duration = adv_int +
   131f0:	f004 0207 	and.w	r2, r4, #7
   131f4:	f103 040a 	add.w	r4, r3, #10
   131f8:	fb02 4404 	mla	r4, r2, r4, r4
	ad.type = bt_mesh_adv_type[BT_MESH_ADV(buf)->type];
   131fc:	7a0a      	ldrb	r2, [r1, #8]
   131fe:	4947      	ldr	r1, [pc, #284]	; (1331c <adv_thread+0x198>)
   13200:	f002 0203 	and.w	r2, r2, #3
	duration = adv_int +
   13204:	441c      	add	r4, r3
	ad.type = bt_mesh_adv_type[BT_MESH_ADV(buf)->type];
   13206:	5c8a      	ldrb	r2, [r1, r2]
   13208:	f88d 200c 	strb.w	r2, [sp, #12]
	ad.data_len = buf->len;
   1320c:	89aa      	ldrh	r2, [r5, #12]
   1320e:	f88d 200d 	strb.w	r2, [sp, #13]
	ad.data = buf->data;
   13212:	68aa      	ldr	r2, [r5, #8]
   13214:	9204      	str	r2, [sp, #16]
	duration = adv_int +
   13216:	b224      	sxth	r4, r4
	param.interval_min = BT_MESH_ADV_SCAN_UNIT(adv_int);
   13218:	2205      	movs	r2, #5
   1321a:	00db      	lsls	r3, r3, #3
   1321c:	fbb3 f3f2 	udiv	r3, r3, r2
	param.interval_max = param.interval_min;
   13220:	e9cd 3307 	strd	r3, r3, [sp, #28]
   13224:	f015 ff86 	bl	29134 <z_impl_k_uptime_ticks>
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
   13228:	2300      	movs	r3, #0
   1322a:	9300      	str	r3, [sp, #0]
   1322c:	2201      	movs	r2, #1
   1322e:	a903      	add	r1, sp, #12
   13230:	a805      	add	r0, sp, #20
   13232:	f7f4 f955 	bl	74e0 <bt_le_adv_start>
	bt_mesh_adv_send_start(duration, err, BT_MESH_ADV(buf));
   13236:	f8d5 a014 	ldr.w	sl, [r5, #20]
		      const struct bt_data *sd, size_t sd_len);

static inline void bt_mesh_adv_send_start(uint16_t duration, int err,
					  struct bt_mesh_adv *adv)
{
	if (!adv->started) {
   1323a:	f89a 3008 	ldrb.w	r3, [sl, #8]
   1323e:	075a      	lsls	r2, r3, #29
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
   13240:	4681      	mov	r9, r0
   13242:	d443      	bmi.n	132cc <adv_thread+0x148>
		adv->started = 1;
   13244:	f043 0304 	orr.w	r3, r3, #4
   13248:	f88a 3008 	strb.w	r3, [sl, #8]

		if (adv->cb && adv->cb->start) {
   1324c:	f8da 3000 	ldr.w	r3, [sl]
   13250:	b133      	cbz	r3, 13260 <adv_thread+0xdc>
   13252:	681b      	ldr	r3, [r3, #0]
   13254:	b123      	cbz	r3, 13260 <adv_thread+0xdc>
			adv->cb->start(duration, err, adv->cb_data);
   13256:	f8da 2004 	ldr.w	r2, [sl, #4]
   1325a:	b2a0      	uxth	r0, r4
   1325c:	4649      	mov	r1, r9
   1325e:	4798      	blx	r3
		}

		if (err) {
   13260:	f1b9 0f00 	cmp.w	r9, #0
   13264:	d034      	beq.n	132d0 <adv_thread+0x14c>
			adv->cb = NULL;
   13266:	2300      	movs	r3, #0
   13268:	f8ca 3000 	str.w	r3, [sl]
		BT_ERR("Advertising failed: err %d", err);
   1326c:	01b2      	lsls	r2, r6, #6
   1326e:	482c      	ldr	r0, [pc, #176]	; (13320 <adv_thread+0x19c>)
   13270:	f042 0201 	orr.w	r2, r2, #1
   13274:	4649      	mov	r1, r9
		BT_ERR("Stopping advertising failed: err %d", err);
   13276:	f00e fc45 	bl	21b04 <log_1>
			adv_send(buf);
		}

		net_buf_unref(buf);
   1327a:	4628      	mov	r0, r5
   1327c:	f00a fd72 	bl	1dd64 <net_buf_unref>
	z_impl_k_yield();
   13280:	f00d fb24 	bl	208cc <z_impl_k_yield>
}
   13284:	e788      	b.n	13198 <adv_thread+0x14>
				adv_timeout = SYS_FOREVER_MS;
   13286:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1328a:	603b      	str	r3, [r7, #0]
				bt_mesh_proxy_adv_start();
   1328c:	f002 fb12 	bl	158b4 <bt_mesh_proxy_adv_start>
						  SYS_TIMEOUT_MS(adv_timeout));
   13290:	683c      	ldr	r4, [r7, #0]
				buf = net_buf_get(&bt_mesh_adv_queue,
   13292:	1c60      	adds	r0, r4, #1
   13294:	d016      	beq.n	132c4 <adv_thread+0x140>
   13296:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
						  SYS_TIMEOUT_MS(adv_timeout));
   1329a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   1329e:	f240 30e7 	movw	r0, #999	; 0x3e7
   132a2:	4629      	mov	r1, r5
   132a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   132a8:	2300      	movs	r3, #0
   132aa:	fbc4 010c 	smlal	r0, r1, r4, ip
   132ae:	f7ec ff67 	bl	180 <__aeabi_uldivmod>
   132b2:	4602      	mov	r2, r0
   132b4:	460b      	mov	r3, r1
				buf = net_buf_get(&bt_mesh_adv_queue,
   132b6:	4640      	mov	r0, r8
   132b8:	f014 ff0d 	bl	280d6 <net_buf_get>
   132bc:	4605      	mov	r5, r0
				bt_le_adv_stop();
   132be:	f7f4 f941 	bl	7544 <bt_le_adv_stop>
   132c2:	e76f      	b.n	131a4 <adv_thread+0x20>
				buf = net_buf_get(&bt_mesh_adv_queue,
   132c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   132c8:	4613      	mov	r3, r2
   132ca:	e7f4      	b.n	132b6 <adv_thread+0x132>
	if (err) {
   132cc:	2800      	cmp	r0, #0
   132ce:	d1cd      	bne.n	1326c <adv_thread+0xe8>
	k_sleep(K_MSEC(duration));
   132d0:	17e1      	asrs	r1, r4, #31
   132d2:	03c9      	lsls	r1, r1, #15
   132d4:	ea41 4154 	orr.w	r1, r1, r4, lsr #17
   132d8:	f240 30e7 	movw	r0, #999	; 0x3e7
   132dc:	03e4      	lsls	r4, r4, #15
   132de:	1820      	adds	r0, r4, r0
   132e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   132e4:	f04f 0300 	mov.w	r3, #0
   132e8:	f141 0100 	adc.w	r1, r1, #0
   132ec:	f7ec ff48 	bl	180 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   132f0:	f00d fb74 	bl	209dc <z_impl_k_sleep>
	err = bt_le_adv_stop();
   132f4:	f7f4 f926 	bl	7544 <bt_le_adv_stop>
	if (err) {
   132f8:	4601      	mov	r1, r0
   132fa:	2800      	cmp	r0, #0
   132fc:	d0bd      	beq.n	1327a <adv_thread+0xf6>
		BT_ERR("Stopping advertising failed: err %d", err);
   132fe:	01b2      	lsls	r2, r6, #6
   13300:	4808      	ldr	r0, [pc, #32]	; (13324 <adv_thread+0x1a0>)
   13302:	f042 0201 	orr.w	r2, r2, #1
   13306:	e7b6      	b.n	13276 <adv_thread+0xf2>
   13308:	00029870 	.word	0x00029870
   1330c:	00029990 	.word	0x00029990
   13310:	20001140 	.word	0x20001140
   13314:	2000235c 	.word	0x2000235c
   13318:	20000288 	.word	0x20000288
   1331c:	0002c7f1 	.word	0x0002c7f1
   13320:	0002e283 	.word	0x0002e283
   13324:	0002e29e 	.word	0x0002e29e

00013328 <bt_mesh_adv_update>:
	z_impl_k_queue_cancel_wait(queue);
   13328:	4801      	ldr	r0, [pc, #4]	; (13330 <bt_mesh_adv_update+0x8>)
   1332a:	f015 bc23 	b.w	28b74 <z_impl_k_queue_cancel_wait>
   1332e:	bf00      	nop
   13330:	20001140 	.word	0x20001140

00013334 <bt_mesh_adv_init>:
{
	/* Will be handled automatically */
}

void bt_mesh_adv_init(void)
{
   13334:	b510      	push	{r4, lr}
   13336:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   13338:	4c0e      	ldr	r4, [pc, #56]	; (13374 <bt_mesh_adv_init+0x40>)
   1333a:	490f      	ldr	r1, [pc, #60]	; (13378 <bt_mesh_adv_init+0x44>)
   1333c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13340:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13344:	e9cd 2306 	strd	r2, r3, [sp, #24]
   13348:	2300      	movs	r3, #0
   1334a:	f06f 0208 	mvn.w	r2, #8
   1334e:	e9cd 2303 	strd	r2, r3, [sp, #12]
   13352:	e9cd 3301 	strd	r3, r3, [sp, #4]
   13356:	9300      	str	r3, [sp, #0]
   13358:	f44f 7240 	mov.w	r2, #768	; 0x300
   1335c:	4b07      	ldr	r3, [pc, #28]	; (1337c <bt_mesh_adv_init+0x48>)
   1335e:	4620      	mov	r0, r4
   13360:	f00c fccc 	bl	1fcfc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   13364:	4906      	ldr	r1, [pc, #24]	; (13380 <bt_mesh_adv_init+0x4c>)
   13366:	4620      	mov	r0, r4
	k_thread_create(&adv_thread_data, adv_thread_stack,
			K_KERNEL_STACK_SIZEOF(adv_thread_stack), adv_thread,
			NULL, NULL, NULL, K_PRIO_COOP(CONFIG_BT_MESH_ADV_PRIO),
			0, K_FOREVER);
	k_thread_name_set(&adv_thread_data, "BT Mesh adv");
}
   13368:	b008      	add	sp, #32
   1336a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1336e:	f015 bb68 	b.w	28a42 <z_impl_k_thread_name_set>
   13372:	bf00      	nop
   13374:	20001ab8 	.word	0x20001ab8
   13378:	20004780 	.word	0x20004780
   1337c:	00013185 	.word	0x00013185
   13380:	0002e2c2 	.word	0x0002e2c2

00013384 <bt_mesh_adv_enable>:

int bt_mesh_adv_enable(void)
{
   13384:	b508      	push	{r3, lr}
	z_impl_k_thread_start(thread);
   13386:	4802      	ldr	r0, [pc, #8]	; (13390 <bt_mesh_adv_enable+0xc>)
   13388:	f015 fb60 	bl	28a4c <z_impl_k_thread_start>
	k_thread_start(&adv_thread_data);
	return 0;
}
   1338c:	2000      	movs	r0, #0
   1338e:	bd08      	pop	{r3, pc}
   13390:	20001ab8 	.word	0x20001ab8

00013394 <bt_mesh_adv_start>:

int bt_mesh_adv_start(const struct bt_le_adv_param *param, int32_t duration,
		      const struct bt_data *ad, size_t ad_len,
		      const struct bt_data *sd, size_t sd_len)
{
   13394:	b430      	push	{r4, r5}
	adv_timeout = duration;
   13396:	4c05      	ldr	r4, [pc, #20]	; (133ac <bt_mesh_adv_start+0x18>)
{
   13398:	460d      	mov	r5, r1
	adv_timeout = duration;
   1339a:	6025      	str	r5, [r4, #0]
	return bt_le_adv_start(param, ad, ad_len, sd, sd_len);
   1339c:	9c03      	ldr	r4, [sp, #12]
{
   1339e:	4611      	mov	r1, r2
   133a0:	461a      	mov	r2, r3
   133a2:	9b02      	ldr	r3, [sp, #8]
	return bt_le_adv_start(param, ad, ad_len, sd, sd_len);
   133a4:	9402      	str	r4, [sp, #8]
}
   133a6:	bc30      	pop	{r4, r5}
	return bt_le_adv_start(param, ad, ad_len, sd, sd_len);
   133a8:	f7f4 b89a 	b.w	74e0 <bt_le_adv_start>
   133ac:	2000235c 	.word	0x2000235c

000133b0 <atomic_test_and_clear_bit.constprop.0>:
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
   133b0:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   133b2:	2301      	movs	r3, #1
   133b4:	fa03 f000 	lsl.w	r0, r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   133b8:	4b0a      	ldr	r3, [pc, #40]	; (133e4 <atomic_test_and_clear_bit.constprop.0+0x34>)
   133ba:	f3bf 8f5b 	dmb	ish
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   133be:	43c1      	mvns	r1, r0
   133c0:	e853 2f00 	ldrex	r2, [r3]
   133c4:	ea02 0c01 	and.w	ip, r2, r1
   133c8:	e843 ce00 	strex	lr, ip, [r3]
   133cc:	f1be 0f00 	cmp.w	lr, #0
   133d0:	d1f6      	bne.n	133c0 <atomic_test_and_clear_bit.constprop.0+0x10>
   133d2:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   133d6:	4202      	tst	r2, r0
}
   133d8:	bf14      	ite	ne
   133da:	2001      	movne	r0, #1
   133dc:	2000      	moveq	r0, #0
   133de:	f85d fb04 	ldr.w	pc, [sp], #4
   133e2:	bf00      	nop
   133e4:	20002360 	.word	0x20002360

000133e8 <mesh_commit>:

	return 0;
}

static int mesh_commit(void)
{
   133e8:	b508      	push	{r3, lr}
	if (!bt_mesh_subnet_next(NULL)) {
   133ea:	2000      	movs	r0, #0
   133ec:	f7fa f8d0 	bl	d590 <bt_mesh_subnet_next>
   133f0:	b1a8      	cbz	r0, 1341e <mesh_commit+0x36>
		/* Nothing to do since we're not yet provisioned */
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT)) {
		bt_mesh_proxy_prov_disable(true);
   133f2:	2001      	movs	r0, #1
   133f4:	f002 f9fc 	bl	157f0 <bt_mesh_proxy_prov_disable>
	}

	bt_mesh_net_settings_commit();
   133f8:	f7f9 fe68 	bl	d0cc <bt_mesh_net_settings_commit>
	bt_mesh_model_settings_commit();
   133fc:	f7fd fafa 	bl	109f4 <bt_mesh_model_settings_commit>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13400:	f3bf 8f5b 	dmb	ish
   13404:	4b07      	ldr	r3, [pc, #28]	; (13424 <mesh_commit+0x3c>)
   13406:	e853 2f00 	ldrex	r2, [r3]
   1340a:	f042 0201 	orr.w	r2, r2, #1
   1340e:	e843 2100 	strex	r1, r2, [r3]
   13412:	2900      	cmp	r1, #0
   13414:	d1f7      	bne.n	13406 <mesh_commit+0x1e>
   13416:	f3bf 8f5b 	dmb	ish

	atomic_set_bit(bt_mesh.flags, BT_MESH_VALID);

	bt_mesh_start();
   1341a:	f7f8 f8d3 	bl	b5c4 <bt_mesh_start>

	return 0;
}
   1341e:	2000      	movs	r0, #0
   13420:	bd08      	pop	{r3, pc}
   13422:	bf00      	nop
   13424:	200018d8 	.word	0x200018d8

00013428 <bt_mesh_settings_set>:
{
   13428:	b538      	push	{r3, r4, r5, lr}
   1342a:	4604      	mov	r4, r0
   1342c:	4608      	mov	r0, r1
   1342e:	4611      	mov	r1, r2
	len = read_cb(cb_arg, out, read_len);
   13430:	461a      	mov	r2, r3
{
   13432:	461d      	mov	r5, r3
	len = read_cb(cb_arg, out, read_len);
   13434:	47a0      	blx	r4
	if (len < 0) {
   13436:	1e04      	subs	r4, r0, #0
   13438:	da0c      	bge.n	13454 <bt_mesh_settings_set+0x2c>
   1343a:	4a10      	ldr	r2, [pc, #64]	; (1347c <bt_mesh_settings_set+0x54>)
   1343c:	4b10      	ldr	r3, [pc, #64]	; (13480 <bt_mesh_settings_set+0x58>)
		BT_ERR("Failed to read value (err %zd)", len);
   1343e:	4811      	ldr	r0, [pc, #68]	; (13484 <bt_mesh_settings_set+0x5c>)
   13440:	1ad2      	subs	r2, r2, r3
   13442:	08d2      	lsrs	r2, r2, #3
   13444:	0192      	lsls	r2, r2, #6
   13446:	f042 0201 	orr.w	r2, r2, #1
   1344a:	4621      	mov	r1, r4
   1344c:	f00e fb5a 	bl	21b04 <log_1>
}
   13450:	4620      	mov	r0, r4
   13452:	bd38      	pop	{r3, r4, r5, pc}
	if (len != read_len) {
   13454:	42ac      	cmp	r4, r5
   13456:	d00e      	beq.n	13476 <bt_mesh_settings_set+0x4e>
   13458:	4b09      	ldr	r3, [pc, #36]	; (13480 <bt_mesh_settings_set+0x58>)
   1345a:	4908      	ldr	r1, [pc, #32]	; (1347c <bt_mesh_settings_set+0x54>)
		BT_ERR("Unexpected value length (%zd != %zu)", len, read_len);
   1345c:	480a      	ldr	r0, [pc, #40]	; (13488 <bt_mesh_settings_set+0x60>)
   1345e:	1ac9      	subs	r1, r1, r3
   13460:	08c9      	lsrs	r1, r1, #3
   13462:	0189      	lsls	r1, r1, #6
   13464:	f041 0301 	orr.w	r3, r1, #1
   13468:	462a      	mov	r2, r5
   1346a:	4621      	mov	r1, r4
   1346c:	f00e fb5e 	bl	21b2c <log_2>
		return -EINVAL;
   13470:	f06f 0415 	mvn.w	r4, #21
   13474:	e7ec      	b.n	13450 <bt_mesh_settings_set+0x28>
	return 0;
   13476:	2400      	movs	r4, #0
   13478:	e7ea      	b.n	13450 <bt_mesh_settings_set+0x28>
   1347a:	bf00      	nop
   1347c:	00029a30 	.word	0x00029a30
   13480:	00029870 	.word	0x00029870
   13484:	0002d857 	.word	0x0002d857
   13488:	0002e2e1 	.word	0x0002e2e1

0001348c <bt_mesh_settings_store_schedule>:
			      BIT(BT_MESH_SETTINGS_CFG_PENDING)      |      \
			      BIT(BT_MESH_SETTINGS_MOD_PENDING)      |      \
			      BIT(BT_MESH_SETTINGS_VA_PENDING))

void bt_mesh_settings_store_schedule(enum bt_mesh_settings_flag flag)
{
   1348c:	b570      	push	{r4, r5, r6, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1348e:	4b2b      	ldr	r3, [pc, #172]	; (1353c <bt_mesh_settings_store_schedule+0xb0>)
   13490:	f3bf 8f5b 	dmb	ish
   13494:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   13496:	2101      	movs	r1, #1
   13498:	f000 001f 	and.w	r0, r0, #31
   1349c:	fa01 f000 	lsl.w	r0, r1, r0
   134a0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   134a4:	e852 1f00 	ldrex	r1, [r2]
   134a8:	4301      	orrs	r1, r0
   134aa:	e842 1400 	strex	r4, r1, [r2]
   134ae:	2c00      	cmp	r4, #0
   134b0:	d1f8      	bne.n	134a4 <bt_mesh_settings_store_schedule+0x18>
   134b2:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   134b6:	f3bf 8f5b 	dmb	ish
   134ba:	681a      	ldr	r2, [r3, #0]
   134bc:	f3bf 8f5b 	dmb	ish
	uint32_t timeout_ms, remaining_ms;

	atomic_set_bit(pending_flags, flag);

	if (atomic_get(pending_flags) & NO_WAIT_PENDING_BITS) {
   134c0:	f412 6f87 	tst.w	r2, #1080	; 0x438
   134c4:	d133      	bne.n	1352e <bt_mesh_settings_store_schedule+0xa2>
   134c6:	f3bf 8f5b 	dmb	ish
   134ca:	681a      	ldr	r2, [r3, #0]
   134cc:	f3bf 8f5b 	dmb	ish
		timeout_ms = 0;
	} else if (CONFIG_BT_MESH_RPL_STORE_TIMEOUT >= 0 &&
   134d0:	07d2      	lsls	r2, r2, #31
   134d2:	d421      	bmi.n	13518 <bt_mesh_settings_store_schedule+0x8c>
		   atomic_test_bit(pending_flags, BT_MESH_SETTINGS_RPL_PENDING) &&
		   !(atomic_get(pending_flags) & GENERIC_PENDING_BITS)) {
		timeout_ms = CONFIG_BT_MESH_RPL_STORE_TIMEOUT * MSEC_PER_SEC;
	} else {
		timeout_ms = CONFIG_BT_MESH_STORE_TIMEOUT * MSEC_PER_SEC;
   134d4:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
   134d8:	4819      	ldr	r0, [pc, #100]	; (13540 <bt_mesh_settings_store_schedule+0xb4>)
   134da:	f015 fded 	bl	290b8 <z_timeout_remaining>
   134de:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   134e2:	4604      	mov	r4, r0
   134e4:	2100      	movs	r1, #0
   134e6:	f240 30e7 	movw	r0, #999	; 0x3e7
   134ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   134ee:	2300      	movs	r3, #0
   134f0:	fbe5 0106 	umlal	r0, r1, r5, r6
   134f4:	f7ec fe44 	bl	180 <__aeabi_uldivmod>
   134f8:	4602      	mov	r2, r0
			return (uint32_t)((t * to_hz + off) / from_hz);
   134fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   134fe:	fba4 4000 	umull	r4, r0, r4, r0
   13502:	0be4      	lsrs	r4, r4, #15
   13504:	ea44 4440 	orr.w	r4, r4, r0, lsl #17

	/* If the new deadline is sooner, override any existing
	 * deadline; otherwise schedule without changing any existing
	 * deadline.
	 */
	if (timeout_ms < remaining_ms) {
   13508:	42a5      	cmp	r5, r4
		k_work_reschedule(&pending_store, K_MSEC(timeout_ms));
   1350a:	480e      	ldr	r0, [pc, #56]	; (13544 <bt_mesh_settings_store_schedule+0xb8>)
			return (t * to_hz + off) / from_hz;
   1350c:	460b      	mov	r3, r1
	if (timeout_ms < remaining_ms) {
   1350e:	d210      	bcs.n	13532 <bt_mesh_settings_store_schedule+0xa6>
	} else {
		k_work_schedule(&pending_store, K_MSEC(timeout_ms));
	}
}
   13510:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_reschedule(&pending_store, K_MSEC(timeout_ms));
   13514:	f00c bf86 	b.w	20424 <k_work_reschedule>
   13518:	f3bf 8f5b 	dmb	ish
   1351c:	681a      	ldr	r2, [r3, #0]
   1351e:	f3bf 8f5b 	dmb	ish
		   atomic_test_bit(pending_flags, BT_MESH_SETTINGS_RPL_PENDING) &&
   13522:	f240 33c6 	movw	r3, #966	; 0x3c6
   13526:	421a      	tst	r2, r3
   13528:	d1d4      	bne.n	134d4 <bt_mesh_settings_store_schedule+0x48>
		timeout_ms = CONFIG_BT_MESH_RPL_STORE_TIMEOUT * MSEC_PER_SEC;
   1352a:	4d07      	ldr	r5, [pc, #28]	; (13548 <bt_mesh_settings_store_schedule+0xbc>)
   1352c:	e7d4      	b.n	134d8 <bt_mesh_settings_store_schedule+0x4c>
		timeout_ms = 0;
   1352e:	2500      	movs	r5, #0
   13530:	e7d2      	b.n	134d8 <bt_mesh_settings_store_schedule+0x4c>
}
   13532:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_schedule(&pending_store, K_MSEC(timeout_ms));
   13536:	f00c bf41 	b.w	203bc <k_work_schedule>
   1353a:	bf00      	nop
   1353c:	20002360 	.word	0x20002360
   13540:	20001b48 	.word	0x20001b48
   13544:	20001b38 	.word	0x20001b38
   13548:	000927c0 	.word	0x000927c0

0001354c <bt_mesh_settings_store_cancel>:
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1354c:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   1354e:	2301      	movs	r3, #1
   13550:	f000 001f 	and.w	r0, r0, #31
   13554:	fa03 f000 	lsl.w	r0, r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13558:	4b07      	ldr	r3, [pc, #28]	; (13578 <bt_mesh_settings_store_cancel+0x2c>)
   1355a:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1355e:	43c0      	mvns	r0, r0
   13560:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   13564:	e853 2f00 	ldrex	r2, [r3]
   13568:	4002      	ands	r2, r0
   1356a:	e843 2100 	strex	r1, r2, [r3]
   1356e:	2900      	cmp	r1, #0
   13570:	d1f8      	bne.n	13564 <bt_mesh_settings_store_cancel+0x18>
   13572:	f3bf 8f5b 	dmb	ish

void bt_mesh_settings_store_cancel(enum bt_mesh_settings_flag flag)
{
	atomic_clear_bit(pending_flags, flag);
}
   13576:	4770      	bx	lr
   13578:	20002360 	.word	0x20002360

0001357c <bt_mesh_settings_init>:
	}
}

void bt_mesh_settings_init(void)
{
	k_work_init_delayable(&pending_store, store_pending);
   1357c:	4901      	ldr	r1, [pc, #4]	; (13584 <bt_mesh_settings_init+0x8>)
   1357e:	4802      	ldr	r0, [pc, #8]	; (13588 <bt_mesh_settings_init+0xc>)
   13580:	f015 bc0f 	b.w	28da2 <k_work_init_delayable>
   13584:	00026995 	.word	0x00026995
   13588:	20001b38 	.word	0x20001b38

0001358c <prov_link_closed>:
static void prov_link_closed(const struct prov_bearer *bearer, void *cb_data,
			     enum prov_bearer_link_status reason)
{
	BT_DBG("%u", reason);

	if (bt_mesh_prov_link.role->link_closed) {
   1358c:	4b07      	ldr	r3, [pc, #28]	; (135ac <prov_link_closed+0x20>)
   1358e:	689b      	ldr	r3, [r3, #8]
   13590:	685b      	ldr	r3, [r3, #4]
{
   13592:	b510      	push	{r4, lr}
   13594:	4604      	mov	r4, r0
	if (bt_mesh_prov_link.role->link_closed) {
   13596:	b103      	cbz	r3, 1359a <prov_link_closed+0xe>
		bt_mesh_prov_link.role->link_closed();
   13598:	4798      	blx	r3
	}

	if (bt_mesh_prov->link_close) {
   1359a:	4b05      	ldr	r3, [pc, #20]	; (135b0 <prov_link_closed+0x24>)
   1359c:	681b      	ldr	r3, [r3, #0]
   1359e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   135a0:	b11b      	cbz	r3, 135aa <prov_link_closed+0x1e>
		bt_mesh_prov->link_close(bearer->type);
   135a2:	7820      	ldrb	r0, [r4, #0]
	}
}
   135a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_prov->link_close(bearer->type);
   135a8:	4718      	bx	r3
}
   135aa:	bd10      	pop	{r4, pc}
   135ac:	20002368 	.word	0x20002368
   135b0:	20002364 	.word	0x20002364

000135b4 <prov_bearer_error>:

static void prov_bearer_error(const struct prov_bearer *bearer, void *cb_data,
			      uint8_t err)
{
	if (bt_mesh_prov_link.role->error) {
   135b4:	4b03      	ldr	r3, [pc, #12]	; (135c4 <prov_bearer_error+0x10>)
   135b6:	689b      	ldr	r3, [r3, #8]
   135b8:	689b      	ldr	r3, [r3, #8]
{
   135ba:	4610      	mov	r0, r2
	if (bt_mesh_prov_link.role->error) {
   135bc:	b103      	cbz	r3, 135c0 <prov_bearer_error+0xc>
		bt_mesh_prov_link.role->error(err);
   135be:	4718      	bx	r3
	}
}
   135c0:	4770      	bx	lr
   135c2:	bf00      	nop
   135c4:	20002368 	.word	0x20002368

000135c8 <prov_recv>:
{
   135c8:	b570      	push	{r4, r5, r6, lr}
	uint8_t type = buf->data[0];
   135ca:	6810      	ldr	r0, [r2, #0]
   135cc:	4c24      	ldr	r4, [pc, #144]	; (13660 <prov_recv+0x98>)
   135ce:	7801      	ldrb	r1, [r0, #0]
	if (type >= ARRAY_SIZE(bt_mesh_prov_link.role->op)) {
   135d0:	2909      	cmp	r1, #9
   135d2:	d90f      	bls.n	135f4 <prov_recv+0x2c>
   135d4:	4b23      	ldr	r3, [pc, #140]	; (13664 <prov_recv+0x9c>)
   135d6:	4a24      	ldr	r2, [pc, #144]	; (13668 <prov_recv+0xa0>)
		BT_ERR("Unknown provisioning PDU type 0x%02x", type);
   135d8:	4824      	ldr	r0, [pc, #144]	; (1366c <prov_recv+0xa4>)
   135da:	1ad2      	subs	r2, r2, r3
   135dc:	08d2      	lsrs	r2, r2, #3
   135de:	0192      	lsls	r2, r2, #6
   135e0:	f042 0201 	orr.w	r2, r2, #1
   135e4:	f00e fa8e 	bl	21b04 <log_1>
		bt_mesh_prov_link.role->error(PROV_ERR_NVAL_PDU);
   135e8:	68a3      	ldr	r3, [r4, #8]
   135ea:	689b      	ldr	r3, [r3, #8]
   135ec:	2001      	movs	r0, #1
}
   135ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_mesh_prov_link.role->error(PROV_ERR_UNEXP_PDU);
   135f2:	4718      	bx	r3
	if ((type != PROV_FAILED && type != bt_mesh_prov_link.expect) ||
   135f4:	d003      	beq.n	135fe <prov_recv+0x36>
   135f6:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
   135fa:	428b      	cmp	r3, r1
   135fc:	d104      	bne.n	13608 <prov_recv+0x40>
	    !bt_mesh_prov_link.role->op[type]) {
   135fe:	68a3      	ldr	r3, [r4, #8]
   13600:	1d0d      	adds	r5, r1, #4
   13602:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
	if ((type != PROV_FAILED && type != bt_mesh_prov_link.expect) ||
   13606:	b97d      	cbnz	r5, 13628 <prov_recv+0x60>
   13608:	4a16      	ldr	r2, [pc, #88]	; (13664 <prov_recv+0x9c>)
   1360a:	4b17      	ldr	r3, [pc, #92]	; (13668 <prov_recv+0xa0>)
		BT_WARN("Unexpected msg 0x%02x != 0x%02x", type, bt_mesh_prov_link.expect);
   1360c:	4818      	ldr	r0, [pc, #96]	; (13670 <prov_recv+0xa8>)
   1360e:	1a9b      	subs	r3, r3, r2
   13610:	08db      	lsrs	r3, r3, #3
   13612:	019b      	lsls	r3, r3, #6
   13614:	f043 0302 	orr.w	r3, r3, #2
   13618:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
   1361c:	f00e fa86 	bl	21b2c <log_2>
		bt_mesh_prov_link.role->error(PROV_ERR_UNEXP_PDU);
   13620:	68a3      	ldr	r3, [r4, #8]
   13622:	2003      	movs	r0, #3
   13624:	689b      	ldr	r3, [r3, #8]
   13626:	e7e2      	b.n	135ee <prov_recv+0x26>
	if (1 + op_len[type] != buf->len) {
   13628:	4b12      	ldr	r3, [pc, #72]	; (13674 <prov_recv+0xac>)
   1362a:	8896      	ldrh	r6, [r2, #4]
   1362c:	5c5b      	ldrb	r3, [r3, r1]
   1362e:	3301      	adds	r3, #1
   13630:	42b3      	cmp	r3, r6
   13632:	d00f      	beq.n	13654 <prov_recv+0x8c>
   13634:	4a0b      	ldr	r2, [pc, #44]	; (13664 <prov_recv+0x9c>)
   13636:	4b0c      	ldr	r3, [pc, #48]	; (13668 <prov_recv+0xa0>)
		BT_ERR("Invalid length %u for type 0x%02x", buf->len, type);
   13638:	480f      	ldr	r0, [pc, #60]	; (13678 <prov_recv+0xb0>)
   1363a:	1a9b      	subs	r3, r3, r2
   1363c:	08db      	lsrs	r3, r3, #3
   1363e:	019b      	lsls	r3, r3, #6
   13640:	f043 0301 	orr.w	r3, r3, #1
   13644:	460a      	mov	r2, r1
   13646:	4631      	mov	r1, r6
   13648:	f00e fa70 	bl	21b2c <log_2>
		bt_mesh_prov_link.role->error(PROV_ERR_NVAL_FMT);
   1364c:	68a3      	ldr	r3, [r4, #8]
   1364e:	2002      	movs	r0, #2
   13650:	689b      	ldr	r3, [r3, #8]
   13652:	e7cc      	b.n	135ee <prov_recv+0x26>
	bt_mesh_prov_link.role->op[type](&buf->data[1]);
   13654:	462b      	mov	r3, r5
   13656:	3001      	adds	r0, #1
}
   13658:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_mesh_prov_link.role->op[type](&buf->data[1]);
   1365c:	4718      	bx	r3
   1365e:	bf00      	nop
   13660:	20002368 	.word	0x20002368
   13664:	00029870 	.word	0x00029870
   13668:	00029a10 	.word	0x00029a10
   1366c:	0002e31f 	.word	0x0002e31f
   13670:	0002e344 	.word	0x0002e344
   13674:	0002e3f9 	.word	0x0002e3f9
   13678:	0002e364 	.word	0x0002e364

0001367c <pub_key_ready>:
	if (!pkey) {
   1367c:	b948      	cbnz	r0, 13692 <pub_key_ready+0x16>
   1367e:	4905      	ldr	r1, [pc, #20]	; (13694 <pub_key_ready+0x18>)
   13680:	4b05      	ldr	r3, [pc, #20]	; (13698 <pub_key_ready+0x1c>)
		BT_WARN("Public key not available");
   13682:	4806      	ldr	r0, [pc, #24]	; (1369c <pub_key_ready+0x20>)
   13684:	1ac9      	subs	r1, r1, r3
   13686:	08c9      	lsrs	r1, r1, #3
   13688:	0189      	lsls	r1, r1, #6
   1368a:	f041 0102 	orr.w	r1, r1, #2
   1368e:	f00e ba2c 	b.w	21aea <log_0>
}
   13692:	4770      	bx	lr
   13694:	00029a10 	.word	0x00029a10
   13698:	00029870 	.word	0x00029870
   1369c:	0002e386 	.word	0x0002e386

000136a0 <atomic_or.constprop.0.isra.0>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   136a0:	4b06      	ldr	r3, [pc, #24]	; (136bc <atomic_or.constprop.0.isra.0+0x1c>)
   136a2:	f3bf 8f5b 	dmb	ish
   136a6:	e853 2f00 	ldrex	r2, [r3]
   136aa:	4302      	orrs	r2, r0
   136ac:	e843 2100 	strex	r1, r2, [r3]
   136b0:	2900      	cmp	r1, #0
   136b2:	d1f8      	bne.n	136a6 <atomic_or.constprop.0.isra.0+0x6>
   136b4:	f3bf 8f5b 	dmb	ish
}
   136b8:	4770      	bx	lr
   136ba:	bf00      	nop
   136bc:	20002368 	.word	0x20002368

000136c0 <prov_link_opened>:
{
   136c0:	b510      	push	{r4, lr}
   136c2:	4604      	mov	r4, r0
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   136c4:	2002      	movs	r0, #2
   136c6:	f7ff ffeb 	bl	136a0 <atomic_or.constprop.0.isra.0>
	if (bt_mesh_prov->link_open) {
   136ca:	4b07      	ldr	r3, [pc, #28]	; (136e8 <prov_link_opened+0x28>)
   136cc:	681b      	ldr	r3, [r3, #0]
   136ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   136d0:	b10b      	cbz	r3, 136d6 <prov_link_opened+0x16>
		bt_mesh_prov->link_open(bearer->type);
   136d2:	7820      	ldrb	r0, [r4, #0]
   136d4:	4798      	blx	r3
	bt_mesh_prov_link.bearer = bearer;
   136d6:	4b05      	ldr	r3, [pc, #20]	; (136ec <prov_link_opened+0x2c>)
   136d8:	605c      	str	r4, [r3, #4]
	if (bt_mesh_prov_link.role->link_opened) {
   136da:	689b      	ldr	r3, [r3, #8]
   136dc:	681b      	ldr	r3, [r3, #0]
   136de:	b113      	cbz	r3, 136e6 <prov_link_opened+0x26>
}
   136e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_prov_link.role->link_opened();
   136e4:	4718      	bx	r3
}
   136e6:	bd10      	pop	{r4, pc}
   136e8:	20002364 	.word	0x20002364
   136ec:	20002368 	.word	0x20002368

000136f0 <bt_mesh_prov_reset_state>:
{
   136f0:	b510      	push	{r4, lr}
	pub_key_cb.func = func ? func : pub_key_ready;
   136f2:	4b18      	ldr	r3, [pc, #96]	; (13754 <bt_mesh_prov_reset_state+0x64>)
   136f4:	4a18      	ldr	r2, [pc, #96]	; (13758 <bt_mesh_prov_reset_state+0x68>)
	if (bt_mesh_prov_link.conf_inputs.invite[0]) {
   136f6:	4c19      	ldr	r4, [pc, #100]	; (1375c <bt_mesh_prov_reset_state+0x6c>)
	pub_key_cb.func = func ? func : pub_key_ready;
   136f8:	2800      	cmp	r0, #0
   136fa:	bf18      	it	ne
   136fc:	4603      	movne	r3, r0
   136fe:	6013      	str	r3, [r2, #0]
	if (bt_mesh_prov_link.conf_inputs.invite[0]) {
   13700:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
   13704:	b11b      	cbz	r3, 1370e <bt_mesh_prov_reset_state+0x1e>
		bt_mesh_attention(NULL, 0);
   13706:	2100      	movs	r1, #0
   13708:	4608      	mov	r0, r1
   1370a:	f7ff fd01 	bl	13110 <bt_mesh_attention>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1370e:	f3bf 8f5b 	dmb	ish
   13712:	2100      	movs	r1, #0
   13714:	e854 3f00 	ldrex	r3, [r4]
   13718:	e844 1200 	strex	r2, r1, [r4]
   1371c:	2a00      	cmp	r2, #0
   1371e:	d1f9      	bne.n	13714 <bt_mesh_prov_reset_state+0x24>
   13720:	f3bf 8f5b 	dmb	ish
	(void)memset((uint8_t *)&bt_mesh_prov_link + offset, 0,
   13724:	f240 1215 	movw	r2, #277	; 0x115
   13728:	480d      	ldr	r0, [pc, #52]	; (13760 <bt_mesh_prov_reset_state+0x70>)
   1372a:	f010 fb48 	bl	23dbe <memset>
	err = bt_pub_key_gen(&pub_key_cb);
   1372e:	480a      	ldr	r0, [pc, #40]	; (13758 <bt_mesh_prov_reset_state+0x68>)
   13730:	f7f4 f9bc 	bl	7aac <bt_pub_key_gen>
	if (err) {
   13734:	4604      	mov	r4, r0
   13736:	b150      	cbz	r0, 1374e <bt_mesh_prov_reset_state+0x5e>
   13738:	4a0a      	ldr	r2, [pc, #40]	; (13764 <bt_mesh_prov_reset_state+0x74>)
   1373a:	4b0b      	ldr	r3, [pc, #44]	; (13768 <bt_mesh_prov_reset_state+0x78>)
   1373c:	1ad2      	subs	r2, r2, r3
   1373e:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Failed to generate public key (%d)", err);
   13740:	0192      	lsls	r2, r2, #6
   13742:	4601      	mov	r1, r0
   13744:	f042 0201 	orr.w	r2, r2, #1
   13748:	4808      	ldr	r0, [pc, #32]	; (1376c <bt_mesh_prov_reset_state+0x7c>)
   1374a:	f00e f9db 	bl	21b04 <log_1>
}
   1374e:	4620      	mov	r0, r4
   13750:	bd10      	pop	{r4, pc}
   13752:	bf00      	nop
   13754:	0001367d 	.word	0x0001367d
   13758:	2000248c 	.word	0x2000248c
   1375c:	20002368 	.word	0x20002368
   13760:	20002377 	.word	0x20002377
   13764:	00029a10 	.word	0x00029a10
   13768:	00029870 	.word	0x00029870
   1376c:	0002e39f 	.word	0x0002e39f

00013770 <bt_mesh_prov_auth>:
{
   13770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13774:	4614      	mov	r4, r2
   13776:	b08a      	sub	sp, #40	; 0x28
	switch (method) {
   13778:	2803      	cmp	r0, #3
   1377a:	f200 80c1 	bhi.w	13900 <bt_mesh_prov_auth+0x190>
   1377e:	e8df f000 	tbb	[pc, r0]
   13782:	0e02      	.short	0x0e02
   13784:	a416      	.short	0xa416
		if (action || size) {
   13786:	430c      	orrs	r4, r1
   13788:	f040 80ba 	bne.w	13900 <bt_mesh_prov_auth+0x190>
		(void)memset(bt_mesh_prov_link.auth, 0, sizeof(bt_mesh_prov_link.auth));
   1378c:	485e      	ldr	r0, [pc, #376]	; (13908 <bt_mesh_prov_auth+0x198>)
   1378e:	2210      	movs	r2, #16
   13790:	4621      	mov	r1, r4
   13792:	f010 fb14 	bl	23dbe <memset>
		return 0;
   13796:	4620      	mov	r0, r4
}
   13798:	b00a      	add	sp, #40	; 0x28
   1379a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (action || size) {
   1379e:	430c      	orrs	r4, r1
   137a0:	f040 80ae 	bne.w	13900 <bt_mesh_prov_auth+0x190>
   137a4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   137a8:	f7ff ff7a 	bl	136a0 <atomic_or.constprop.0.isra.0>
   137ac:	e7f3      	b.n	13796 <bt_mesh_prov_auth+0x26>
	switch (action) {
   137ae:	2904      	cmp	r1, #4
   137b0:	f200 80a6 	bhi.w	13900 <bt_mesh_prov_auth+0x190>
   137b4:	4b55      	ldr	r3, [pc, #340]	; (1390c <bt_mesh_prov_auth+0x19c>)
   137b6:	f813 8001 	ldrb.w	r8, [r3, r1]
		if (!output) {
   137ba:	f1b8 0f00 	cmp.w	r8, #0
   137be:	f000 809f 	beq.w	13900 <bt_mesh_prov_auth+0x190>
		if (!(bt_mesh_prov->output_actions & output)) {
   137c2:	4e53      	ldr	r6, [pc, #332]	; (13910 <bt_mesh_prov_auth+0x1a0>)
   137c4:	6833      	ldr	r3, [r6, #0]
   137c6:	8b5a      	ldrh	r2, [r3, #26]
   137c8:	ea12 0f08 	tst.w	r2, r8
   137cc:	f000 8098 	beq.w	13900 <bt_mesh_prov_auth+0x190>
		if (size > bt_mesh_prov->output_size) {
   137d0:	7e5b      	ldrb	r3, [r3, #25]
   137d2:	42a3      	cmp	r3, r4
   137d4:	f0c0 8094 	bcc.w	13900 <bt_mesh_prov_auth+0x190>
   137d8:	2010      	movs	r0, #16
   137da:	f7ff ff61 	bl	136a0 <atomic_or.constprop.0.isra.0>
		if (output == BT_MESH_DISPLAY_STRING) {
   137de:	4580      	cmp	r8, r0
   137e0:	d130      	bne.n	13844 <bt_mesh_prov_auth+0xd4>
			bt_rand(str, size);
   137e2:	4621      	mov	r1, r4
   137e4:	a802      	add	r0, sp, #8
   137e6:	f013 fe20 	bl	2742a <bt_rand>
			for (i = 0U; i < size; i++) {
   137ea:	a902      	add	r1, sp, #8
   137ec:	2200      	movs	r2, #0
				str[i] %= 36;
   137ee:	2024      	movs	r0, #36	; 0x24
			for (i = 0U; i < size; i++) {
   137f0:	b2d3      	uxtb	r3, r2
   137f2:	429c      	cmp	r4, r3
   137f4:	d816      	bhi.n	13824 <bt_mesh_prov_auth+0xb4>
			str[size] = '\0';
   137f6:	f104 0328 	add.w	r3, r4, #40	; 0x28
   137fa:	446b      	add	r3, sp
			memcpy(bt_mesh_prov_link.auth, str, size);
   137fc:	4d42      	ldr	r5, [pc, #264]	; (13908 <bt_mesh_prov_auth+0x198>)
			str[size] = '\0';
   137fe:	2700      	movs	r7, #0
   13800:	f803 7c20 	strb.w	r7, [r3, #-32]
			memcpy(bt_mesh_prov_link.auth, str, size);
   13804:	4622      	mov	r2, r4
   13806:	a902      	add	r1, sp, #8
   13808:	4628      	mov	r0, r5
   1380a:	f010 facd 	bl	23da8 <memcpy>
			(void)memset(bt_mesh_prov_link.auth + size, 0,
   1380e:	f1c4 0210 	rsb	r2, r4, #16
   13812:	4639      	mov	r1, r7
   13814:	1928      	adds	r0, r5, r4
   13816:	f010 fad2 	bl	23dbe <memset>
			return bt_mesh_prov->output_string((char *)str);
   1381a:	6833      	ldr	r3, [r6, #0]
   1381c:	a802      	add	r0, sp, #8
   1381e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13820:	4798      	blx	r3
   13822:	e7b9      	b.n	13798 <bt_mesh_prov_auth+0x28>
				str[i] %= 36;
   13824:	780b      	ldrb	r3, [r1, #0]
   13826:	fbb3 f5f0 	udiv	r5, r3, r0
   1382a:	fb00 3315 	mls	r3, r0, r5, r3
   1382e:	b2dd      	uxtb	r5, r3
				if (str[i] < 10) {
   13830:	2d09      	cmp	r5, #9
					str[i] += '0';
   13832:	b25b      	sxtb	r3, r3
   13834:	bf94      	ite	ls
   13836:	3330      	addls	r3, #48	; 0x30
					str[i] += 'A' - 10;
   13838:	3337      	addhi	r3, #55	; 0x37
   1383a:	b2db      	uxtb	r3, r3
   1383c:	f801 3b01 	strb.w	r3, [r1], #1
			for (i = 0U; i < size; i++) {
   13840:	3201      	adds	r2, #1
   13842:	e7d5      	b.n	137f0 <bt_mesh_prov_auth+0x80>
			uint32_t div[8] = { 10, 100, 1000, 10000, 100000,
   13844:	4f33      	ldr	r7, [pc, #204]	; (13914 <bt_mesh_prov_auth+0x1a4>)
   13846:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   13848:	ad02      	add	r5, sp, #8
   1384a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1384c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   13850:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			bt_rand(&num, sizeof(num));
   13854:	2104      	movs	r1, #4
   13856:	eb0d 0001 	add.w	r0, sp, r1
   1385a:	f013 fde6 	bl	2742a <bt_rand>
			if (output == BT_MESH_BLINK ||
   1385e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
				num %= div[size - 1];
   13862:	3c01      	subs	r4, #1
			if (output == BT_MESH_BLINK ||
   13864:	2b01      	cmp	r3, #1
   13866:	ea4f 0484 	mov.w	r4, r4, lsl #2
   1386a:	9b01      	ldr	r3, [sp, #4]
   1386c:	d907      	bls.n	1387e <bt_mesh_prov_auth+0x10e>
				num %= div[size - 1];
   1386e:	f104 0228 	add.w	r2, r4, #40	; 0x28
   13872:	446a      	add	r2, sp
			    output == BT_MESH_BEEP ||
   13874:	f1b8 0f04 	cmp.w	r8, #4
				num %= div[size - 1];
   13878:	f852 2c20 	ldr.w	r2, [r2, #-32]
			    output == BT_MESH_BEEP ||
   1387c:	d120      	bne.n	138c0 <bt_mesh_prov_auth+0x150>
				num = (num % (div[size - 1] - 1)) + 1;
   1387e:	f104 0228 	add.w	r2, r4, #40	; 0x28
   13882:	eb0d 0402 	add.w	r4, sp, r2
   13886:	f854 2c20 	ldr.w	r2, [r4, #-32]
   1388a:	3a01      	subs	r2, #1
   1388c:	fbb3 f1f2 	udiv	r1, r3, r2
   13890:	fb02 3311 	mls	r3, r2, r1, r3
   13894:	3301      	adds	r3, #1
	dst[0] = val >> 8;
   13896:	4820      	ldr	r0, [pc, #128]	; (13918 <bt_mesh_prov_auth+0x1a8>)
   13898:	9301      	str	r3, [sp, #4]
	sys_put_be16(val >> 16, dst);
   1389a:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val >> 8;
   1389c:	0e19      	lsrs	r1, r3, #24
	dst[1] = val;
   1389e:	7702      	strb	r2, [r0, #28]
	dst[0] = val >> 8;
   138a0:	f3c3 2207 	ubfx	r2, r3, #8, #8
   138a4:	76c1      	strb	r1, [r0, #27]
   138a6:	7742      	strb	r2, [r0, #29]
	dst[1] = val;
   138a8:	7783      	strb	r3, [r0, #30]
			(void)memset(bt_mesh_prov_link.auth, 0, 12);
   138aa:	220c      	movs	r2, #12
   138ac:	2100      	movs	r1, #0
   138ae:	300f      	adds	r0, #15
   138b0:	f010 fa85 	bl	23dbe <memset>
			return bt_mesh_prov->output_number(output, num);
   138b4:	6833      	ldr	r3, [r6, #0]
   138b6:	9901      	ldr	r1, [sp, #4]
   138b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   138ba:	4640      	mov	r0, r8
   138bc:	4798      	blx	r3
   138be:	e76b      	b.n	13798 <bt_mesh_prov_auth+0x28>
				num %= div[size - 1];
   138c0:	fbb3 f1f2 	udiv	r1, r3, r2
   138c4:	fb02 3311 	mls	r3, r2, r1, r3
   138c8:	e7e5      	b.n	13896 <bt_mesh_prov_auth+0x126>
	switch (action) {
   138ca:	2903      	cmp	r1, #3
   138cc:	d818      	bhi.n	13900 <bt_mesh_prov_auth+0x190>
   138ce:	4b13      	ldr	r3, [pc, #76]	; (1391c <bt_mesh_prov_auth+0x1ac>)
   138d0:	5c5d      	ldrb	r5, [r3, r1]
		if (!input) {
   138d2:	b1ad      	cbz	r5, 13900 <bt_mesh_prov_auth+0x190>
		if (!(bt_mesh_prov->input_actions & input)) {
   138d4:	4e0e      	ldr	r6, [pc, #56]	; (13910 <bt_mesh_prov_auth+0x1a0>)
   138d6:	6833      	ldr	r3, [r6, #0]
   138d8:	8bda      	ldrh	r2, [r3, #30]
   138da:	422a      	tst	r2, r5
   138dc:	d010      	beq.n	13900 <bt_mesh_prov_auth+0x190>
		if (size > bt_mesh_prov->input_size) {
   138de:	7f1b      	ldrb	r3, [r3, #28]
   138e0:	42a3      	cmp	r3, r4
   138e2:	d30d      	bcc.n	13900 <bt_mesh_prov_auth+0x190>
		if (input == BT_MESH_ENTER_STRING) {
   138e4:	2d08      	cmp	r5, #8
   138e6:	bf0c      	ite	eq
   138e8:	4628      	moveq	r0, r5
   138ea:	2004      	movne	r0, #4
   138ec:	f7ff fed8 	bl	136a0 <atomic_or.constprop.0.isra.0>
		return bt_mesh_prov->input(input, size);
   138f0:	6833      	ldr	r3, [r6, #0]
   138f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   138f4:	4621      	mov	r1, r4
   138f6:	4628      	mov	r0, r5
}
   138f8:	b00a      	add	sp, #40	; 0x28
   138fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return bt_mesh_prov->input(input, size);
   138fe:	4718      	bx	r3
			return -EINVAL;
   13900:	f06f 0015 	mvn.w	r0, #21
   13904:	e748      	b.n	13798 <bt_mesh_prov_auth+0x28>
   13906:	bf00      	nop
   13908:	20002377 	.word	0x20002377
   1390c:	0002e3f0 	.word	0x0002e3f0
   13910:	20002364 	.word	0x20002364
   13914:	00029b58 	.word	0x00029b58
   13918:	20002368 	.word	0x20002368
   1391c:	0002e3f5 	.word	0x0002e3f5

00013920 <bt_mesh_prov_get>:
}
   13920:	4b01      	ldr	r3, [pc, #4]	; (13928 <bt_mesh_prov_get+0x8>)
   13922:	6818      	ldr	r0, [r3, #0]
   13924:	4770      	bx	lr
   13926:	bf00      	nop
   13928:	20002364 	.word	0x20002364

0001392c <bt_mesh_prov_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1392c:	4b04      	ldr	r3, [pc, #16]	; (13940 <bt_mesh_prov_active+0x14>)
   1392e:	f3bf 8f5b 	dmb	ish
   13932:	6818      	ldr	r0, [r3, #0]
   13934:	f3bf 8f5b 	dmb	ish
}
   13938:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1393c:	4770      	bx	lr
   1393e:	bf00      	nop
   13940:	20002368 	.word	0x20002368

00013944 <bt_mesh_prov_bearer_cb_get>:
};

const struct prov_bearer_cb *bt_mesh_prov_bearer_cb_get(void)
{
	return &prov_bearer_cb;
}
   13944:	4800      	ldr	r0, [pc, #0]	; (13948 <bt_mesh_prov_bearer_cb_get+0x4>)
   13946:	4770      	bx	lr
   13948:	0002a504 	.word	0x0002a504

0001394c <bt_mesh_prov_complete>:

void bt_mesh_prov_complete(uint16_t net_idx, uint16_t addr)
{
	if (bt_mesh_prov->complete) {
   1394c:	4b02      	ldr	r3, [pc, #8]	; (13958 <bt_mesh_prov_complete+0xc>)
   1394e:	681b      	ldr	r3, [r3, #0]
   13950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   13952:	b103      	cbz	r3, 13956 <bt_mesh_prov_complete+0xa>
		bt_mesh_prov->complete(net_idx, addr);
   13954:	4718      	bx	r3
	}
}
   13956:	4770      	bx	lr
   13958:	20002364 	.word	0x20002364

0001395c <bt_mesh_prov_reset>:

void bt_mesh_prov_reset(void)
{
   1395c:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_BT_MESH_PB_ADV)) {
		pb_adv_reset();
   1395e:	f013 f88b 	bl	26a78 <pb_adv_reset>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT)) {
		pb_gatt_reset();
   13962:	f013 f88c 	bl	26a7e <pb_gatt_reset>
	}

	bt_mesh_prov_reset_state(NULL);
   13966:	2000      	movs	r0, #0
   13968:	f7ff fec2 	bl	136f0 <bt_mesh_prov_reset_state>

	if (bt_mesh_prov->reset) {
   1396c:	4b03      	ldr	r3, [pc, #12]	; (1397c <bt_mesh_prov_reset+0x20>)
   1396e:	681b      	ldr	r3, [r3, #0]
   13970:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   13972:	b113      	cbz	r3, 1397a <bt_mesh_prov_reset+0x1e>
		bt_mesh_prov->reset();
	}
}
   13974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_prov->reset();
   13978:	4718      	bx	r3
}
   1397a:	bd10      	pop	{r4, pc}
   1397c:	20002364 	.word	0x20002364

00013980 <bt_mesh_prov_init>:

int bt_mesh_prov_init(const struct bt_mesh_prov *prov_info)
{
   13980:	b508      	push	{r3, lr}
	if (!prov_info) {
   13982:	b150      	cbz	r0, 1399a <bt_mesh_prov_init+0x1a>
		BT_ERR("No provisioning context provided");
		return -EINVAL;
	}

	bt_mesh_prov = prov_info;
   13984:	4b0b      	ldr	r3, [pc, #44]	; (139b4 <bt_mesh_prov_init+0x34>)
   13986:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_BT_MESH_PB_ADV)) {
		pb_adv_init();
   13988:	f001 fb02 	bl	14f90 <pb_adv_init>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT)) {
		pb_gatt_init();
   1398c:	f001 fbe8 	bl	15160 <pb_gatt_init>
	}

	return bt_mesh_prov_reset_state(NULL);
}
   13990:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_mesh_prov_reset_state(NULL);
   13994:	2000      	movs	r0, #0
   13996:	f7ff beab 	b.w	136f0 <bt_mesh_prov_reset_state>
   1399a:	4b07      	ldr	r3, [pc, #28]	; (139b8 <bt_mesh_prov_init+0x38>)
   1399c:	4907      	ldr	r1, [pc, #28]	; (139bc <bt_mesh_prov_init+0x3c>)
		BT_ERR("No provisioning context provided");
   1399e:	4808      	ldr	r0, [pc, #32]	; (139c0 <bt_mesh_prov_init+0x40>)
   139a0:	1ac9      	subs	r1, r1, r3
   139a2:	08c9      	lsrs	r1, r1, #3
   139a4:	0189      	lsls	r1, r1, #6
   139a6:	f041 0101 	orr.w	r1, r1, #1
   139aa:	f00e f89e 	bl	21aea <log_0>
}
   139ae:	f06f 0015 	mvn.w	r0, #21
   139b2:	bd08      	pop	{r3, pc}
   139b4:	20002364 	.word	0x20002364
   139b8:	00029870 	.word	0x00029870
   139bc:	00029a10 	.word	0x00029a10
   139c0:	0002e3c2 	.word	0x0002e3c2

000139c4 <bt_mesh_prov_send>:
extern const struct bt_mesh_prov *bt_mesh_prov;

static inline int bt_mesh_prov_send(struct net_buf_simple *buf,
				    prov_bearer_send_complete_t cb)
{
	return bt_mesh_prov_link.bearer->send(buf, cb, NULL);
   139c4:	4b02      	ldr	r3, [pc, #8]	; (139d0 <bt_mesh_prov_send+0xc>)
   139c6:	685b      	ldr	r3, [r3, #4]
   139c8:	2200      	movs	r2, #0
   139ca:	689b      	ldr	r3, [r3, #8]
   139cc:	4718      	bx	r3
   139ce:	bf00      	nop
   139d0:	20002368 	.word	0x20002368

000139d4 <prov_link_opened>:
	reset_state();
}

static void prov_link_opened(void)
{
	bt_mesh_prov_link.expect = PROV_INVITE;
   139d4:	4b02      	ldr	r3, [pc, #8]	; (139e0 <prov_link_opened+0xc>)
   139d6:	2200      	movs	r2, #0
   139d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
}
   139dc:	4770      	bx	lr
   139de:	bf00      	nop
   139e0:	20002368 	.word	0x20002368

000139e4 <send_input_complete>:
{
   139e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	PROV_BUF(buf, PDU_LEN_INPUT_COMPLETE);
   139e6:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   139ea:	ab01      	add	r3, sp, #4
	bt_mesh_prov_buf_init(&buf, PROV_INPUT_COMPLETE);
   139ec:	2104      	movs	r1, #4
   139ee:	a803      	add	r0, sp, #12
	PROV_BUF(buf, PDU_LEN_INPUT_COMPLETE);
   139f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
   139f4:	9303      	str	r3, [sp, #12]
	bt_mesh_prov_buf_init(&buf, PROV_INPUT_COMPLETE);
   139f6:	f013 f80f 	bl	26a18 <bt_mesh_prov_buf_init>
	if (bt_mesh_prov_send(&buf, NULL)) {
   139fa:	2100      	movs	r1, #0
   139fc:	a803      	add	r0, sp, #12
   139fe:	f7ff ffe1 	bl	139c4 <bt_mesh_prov_send>
   13a02:	b148      	cbz	r0, 13a18 <send_input_complete+0x34>
   13a04:	4908      	ldr	r1, [pc, #32]	; (13a28 <send_input_complete+0x44>)
   13a06:	4b09      	ldr	r3, [pc, #36]	; (13a2c <send_input_complete+0x48>)
		BT_ERR("Failed to send Provisioning Input Complete");
   13a08:	4809      	ldr	r0, [pc, #36]	; (13a30 <send_input_complete+0x4c>)
   13a0a:	1ac9      	subs	r1, r1, r3
   13a0c:	08c9      	lsrs	r1, r1, #3
   13a0e:	0189      	lsls	r1, r1, #6
   13a10:	f041 0101 	orr.w	r1, r1, #1
   13a14:	f00e f869 	bl	21aea <log_0>
	bt_mesh_prov_link.expect = PROV_CONFIRM;
   13a18:	4b06      	ldr	r3, [pc, #24]	; (13a34 <send_input_complete+0x50>)
   13a1a:	2205      	movs	r2, #5
   13a1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
}
   13a20:	b007      	add	sp, #28
   13a22:	f85d fb04 	ldr.w	pc, [sp], #4
   13a26:	bf00      	nop
   13a28:	00029a18 	.word	0x00029a18
   13a2c:	00029870 	.word	0x00029870
   13a30:	0002e403 	.word	0x0002e403
   13a34:	20002368 	.word	0x20002368

00013a38 <prov_send_fail_msg>:
{
   13a38:	b510      	push	{r4, lr}
   13a3a:	b086      	sub	sp, #24
	PROV_BUF(buf, PDU_LEN_FAILED);
   13a3c:	ab01      	add	r3, sp, #4
   13a3e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
   13a42:	e9cd 2304 	strd	r2, r3, [sp, #16]
   13a46:	9303      	str	r3, [sp, #12]
	bt_mesh_prov_link.expect = PROV_NO_PDU;
   13a48:	4b0e      	ldr	r3, [pc, #56]	; (13a84 <prov_send_fail_msg+0x4c>)
   13a4a:	22ff      	movs	r2, #255	; 0xff
{
   13a4c:	4604      	mov	r4, r0
	bt_mesh_prov_buf_init(&buf, PROV_FAILED);
   13a4e:	2109      	movs	r1, #9
   13a50:	a803      	add	r0, sp, #12
	bt_mesh_prov_link.expect = PROV_NO_PDU;
   13a52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	bt_mesh_prov_buf_init(&buf, PROV_FAILED);
   13a56:	f012 ffdf 	bl	26a18 <bt_mesh_prov_buf_init>
	net_buf_simple_add_u8(&buf, err);
   13a5a:	4621      	mov	r1, r4
   13a5c:	a803      	add	r0, sp, #12
   13a5e:	f014 fc02 	bl	28266 <net_buf_simple_add_u8>
	if (bt_mesh_prov_send(&buf, NULL)) {
   13a62:	2100      	movs	r1, #0
   13a64:	a803      	add	r0, sp, #12
   13a66:	f7ff ffad 	bl	139c4 <bt_mesh_prov_send>
   13a6a:	b148      	cbz	r0, 13a80 <prov_send_fail_msg+0x48>
   13a6c:	4906      	ldr	r1, [pc, #24]	; (13a88 <prov_send_fail_msg+0x50>)
   13a6e:	4b07      	ldr	r3, [pc, #28]	; (13a8c <prov_send_fail_msg+0x54>)
		BT_ERR("Failed to send Provisioning Failed message");
   13a70:	4807      	ldr	r0, [pc, #28]	; (13a90 <prov_send_fail_msg+0x58>)
   13a72:	1ac9      	subs	r1, r1, r3
   13a74:	08c9      	lsrs	r1, r1, #3
   13a76:	0189      	lsls	r1, r1, #6
   13a78:	f041 0101 	orr.w	r1, r1, #1
   13a7c:	f00e f835 	bl	21aea <log_0>
}
   13a80:	b006      	add	sp, #24
   13a82:	bd10      	pop	{r4, pc}
   13a84:	20002368 	.word	0x20002368
   13a88:	00029a18 	.word	0x00029a18
   13a8c:	00029870 	.word	0x00029870
   13a90:	0002e42e 	.word	0x0002e42e

00013a94 <send_confirm>:
{
   13a94:	b500      	push	{lr}
	if (bt_mesh_prov_conf_salt(inputs, bt_mesh_prov_link.conf_salt)) {
   13a96:	4935      	ldr	r1, [pc, #212]	; (13b6c <send_confirm+0xd8>)
{
   13a98:	b08b      	sub	sp, #44	; 0x2c
	PROV_BUF(cfm, PDU_LEN_CONFIRM);
   13a9a:	ab04      	add	r3, sp, #16
   13a9c:	f44f 12b0 	mov.w	r2, #1441792	; 0x160000
	if (bt_mesh_prov_conf_salt(inputs, bt_mesh_prov_link.conf_salt)) {
   13aa0:	f101 0020 	add.w	r0, r1, #32
	PROV_BUF(cfm, PDU_LEN_CONFIRM);
   13aa4:	e9cd 2302 	strd	r2, r3, [sp, #8]
   13aa8:	9301      	str	r3, [sp, #4]
	if (bt_mesh_prov_conf_salt(inputs, bt_mesh_prov_link.conf_salt)) {
   13aaa:	f012 fc26 	bl	262fa <bt_mesh_prov_conf_salt>
   13aae:	b178      	cbz	r0, 13ad0 <send_confirm+0x3c>
   13ab0:	492f      	ldr	r1, [pc, #188]	; (13b70 <send_confirm+0xdc>)
   13ab2:	4b30      	ldr	r3, [pc, #192]	; (13b74 <send_confirm+0xe0>)
		BT_ERR("Unable to generate confirmation salt");
   13ab4:	4830      	ldr	r0, [pc, #192]	; (13b78 <send_confirm+0xe4>)
   13ab6:	1ac9      	subs	r1, r1, r3
   13ab8:	08c9      	lsrs	r1, r1, #3
   13aba:	0189      	lsls	r1, r1, #6
   13abc:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to generate confirmation value");
   13ac0:	f00e f813 	bl	21aea <log_0>
	prov_send_fail_msg(reason);
   13ac4:	2007      	movs	r0, #7
   13ac6:	f7ff ffb7 	bl	13a38 <prov_send_fail_msg>
}
   13aca:	b00b      	add	sp, #44	; 0x2c
   13acc:	f85d fb04 	ldr.w	pc, [sp], #4
	if (bt_mesh_prov_conf_key(bt_mesh_prov_link.dhkey, bt_mesh_prov_link.conf_salt,
   13ad0:	4a2a      	ldr	r2, [pc, #168]	; (13b7c <send_confirm+0xe8>)
   13ad2:	f1a2 0110 	sub.w	r1, r2, #16
   13ad6:	f1a2 0051 	sub.w	r0, r2, #81	; 0x51
   13ada:	f7fc f93b 	bl	fd54 <bt_mesh_prov_conf_key>
   13ade:	b140      	cbz	r0, 13af2 <send_confirm+0x5e>
   13ae0:	4923      	ldr	r1, [pc, #140]	; (13b70 <send_confirm+0xdc>)
   13ae2:	4b24      	ldr	r3, [pc, #144]	; (13b74 <send_confirm+0xe0>)
		BT_ERR("Unable to generate confirmation key");
   13ae4:	4826      	ldr	r0, [pc, #152]	; (13b80 <send_confirm+0xec>)
   13ae6:	1ac9      	subs	r1, r1, r3
   13ae8:	08c9      	lsrs	r1, r1, #3
   13aea:	0189      	lsls	r1, r1, #6
   13aec:	f041 0101 	orr.w	r1, r1, #1
   13af0:	e7e6      	b.n	13ac0 <send_confirm+0x2c>
	if (bt_rand(bt_mesh_prov_link.rand, 16)) {
   13af2:	4824      	ldr	r0, [pc, #144]	; (13b84 <send_confirm+0xf0>)
   13af4:	2110      	movs	r1, #16
   13af6:	f013 fc98 	bl	2742a <bt_rand>
   13afa:	b140      	cbz	r0, 13b0e <send_confirm+0x7a>
   13afc:	491c      	ldr	r1, [pc, #112]	; (13b70 <send_confirm+0xdc>)
   13afe:	4b1d      	ldr	r3, [pc, #116]	; (13b74 <send_confirm+0xe0>)
		BT_ERR("Unable to generate random number");
   13b00:	4821      	ldr	r0, [pc, #132]	; (13b88 <send_confirm+0xf4>)
   13b02:	1ac9      	subs	r1, r1, r3
   13b04:	08c9      	lsrs	r1, r1, #3
   13b06:	0189      	lsls	r1, r1, #6
   13b08:	f041 0101 	orr.w	r1, r1, #1
   13b0c:	e7d8      	b.n	13ac0 <send_confirm+0x2c>
	bt_mesh_prov_buf_init(&cfm, PROV_CONFIRM);
   13b0e:	2105      	movs	r1, #5
   13b10:	a801      	add	r0, sp, #4
   13b12:	f012 ff81 	bl	26a18 <bt_mesh_prov_buf_init>
			      bt_mesh_prov_link.auth, net_buf_simple_add(&cfm, 16))) {
   13b16:	2110      	movs	r1, #16
   13b18:	a801      	add	r0, sp, #4
   13b1a:	f014 fb95 	bl	28248 <net_buf_simple_add>
	if (bt_mesh_prov_conf(bt_mesh_prov_link.conf_key, bt_mesh_prov_link.rand,
   13b1e:	4a1b      	ldr	r2, [pc, #108]	; (13b8c <send_confirm+0xf8>)
			      bt_mesh_prov_link.auth, net_buf_simple_add(&cfm, 16))) {
   13b20:	4603      	mov	r3, r0
	if (bt_mesh_prov_conf(bt_mesh_prov_link.conf_key, bt_mesh_prov_link.rand,
   13b22:	f102 0141 	add.w	r1, r2, #65	; 0x41
   13b26:	f102 0061 	add.w	r0, r2, #97	; 0x61
   13b2a:	f012 fbf5 	bl	26318 <bt_mesh_prov_conf>
   13b2e:	4601      	mov	r1, r0
   13b30:	b140      	cbz	r0, 13b44 <send_confirm+0xb0>
   13b32:	490f      	ldr	r1, [pc, #60]	; (13b70 <send_confirm+0xdc>)
   13b34:	4b0f      	ldr	r3, [pc, #60]	; (13b74 <send_confirm+0xe0>)
		BT_ERR("Unable to generate confirmation value");
   13b36:	4816      	ldr	r0, [pc, #88]	; (13b90 <send_confirm+0xfc>)
   13b38:	1ac9      	subs	r1, r1, r3
   13b3a:	08c9      	lsrs	r1, r1, #3
   13b3c:	0189      	lsls	r1, r1, #6
   13b3e:	f041 0101 	orr.w	r1, r1, #1
   13b42:	e7bd      	b.n	13ac0 <send_confirm+0x2c>
	if (bt_mesh_prov_send(&cfm, NULL)) {
   13b44:	a801      	add	r0, sp, #4
   13b46:	f7ff ff3d 	bl	139c4 <bt_mesh_prov_send>
   13b4a:	b150      	cbz	r0, 13b62 <send_confirm+0xce>
   13b4c:	4b09      	ldr	r3, [pc, #36]	; (13b74 <send_confirm+0xe0>)
   13b4e:	4908      	ldr	r1, [pc, #32]	; (13b70 <send_confirm+0xdc>)
		BT_ERR("Failed to send Provisioning Confirm");
   13b50:	4810      	ldr	r0, [pc, #64]	; (13b94 <send_confirm+0x100>)
   13b52:	1ac9      	subs	r1, r1, r3
   13b54:	08c9      	lsrs	r1, r1, #3
   13b56:	0189      	lsls	r1, r1, #6
   13b58:	f041 0101 	orr.w	r1, r1, #1
   13b5c:	f00d ffc5 	bl	21aea <log_0>
		return;
   13b60:	e7b3      	b.n	13aca <send_confirm+0x36>
	bt_mesh_prov_link.expect = PROV_RANDOM;
   13b62:	4b0d      	ldr	r3, [pc, #52]	; (13b98 <send_confirm+0x104>)
   13b64:	2206      	movs	r2, #6
   13b66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
   13b6a:	e7ae      	b.n	13aca <send_confirm+0x36>
   13b6c:	200023c8 	.word	0x200023c8
   13b70:	00029a18 	.word	0x00029a18
   13b74:	00029870 	.word	0x00029870
   13b78:	0002e459 	.word	0x0002e459
   13b7c:	200023d8 	.word	0x200023d8
   13b80:	0002e47e 	.word	0x0002e47e
   13b84:	200023b8 	.word	0x200023b8
   13b88:	0002e4a2 	.word	0x0002e4a2
   13b8c:	20002377 	.word	0x20002377
   13b90:	0002e4c3 	.word	0x0002e4c3
   13b94:	0002e4e9 	.word	0x0002e4e9
   13b98:	20002368 	.word	0x20002368

00013b9c <prov_invite>:
{
   13b9c:	b510      	push	{r4, lr}
   13b9e:	b088      	sub	sp, #32
	if (data[0]) {
   13ba0:	7801      	ldrb	r1, [r0, #0]
	PROV_BUF(buf, PDU_LEN_CAPABILITIES);
   13ba2:	ab03      	add	r3, sp, #12
   13ba4:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
   13ba8:	e9cd 2301 	strd	r2, r3, [sp, #4]
{
   13bac:	4604      	mov	r4, r0
	PROV_BUF(buf, PDU_LEN_CAPABILITIES);
   13bae:	9300      	str	r3, [sp, #0]
	if (data[0]) {
   13bb0:	b111      	cbz	r1, 13bb8 <prov_invite+0x1c>
		bt_mesh_attention(NULL, data[0]);
   13bb2:	2000      	movs	r0, #0
   13bb4:	f7ff faac 	bl	13110 <bt_mesh_attention>
	memcpy(bt_mesh_prov_link.conf_inputs.invite, data, PDU_LEN_INVITE);
   13bb8:	2201      	movs	r2, #1
   13bba:	4621      	mov	r1, r4
   13bbc:	4828      	ldr	r0, [pc, #160]	; (13c60 <prov_invite+0xc4>)
			      bt_mesh_prov->public_key_be == NULL ? PUB_KEY_NO_OOB : PUB_KEY_OOB);
   13bbe:	4c29      	ldr	r4, [pc, #164]	; (13c64 <prov_invite+0xc8>)
	memcpy(bt_mesh_prov_link.conf_inputs.invite, data, PDU_LEN_INVITE);
   13bc0:	f010 f8f2 	bl	23da8 <memcpy>
	bt_mesh_prov_buf_init(&buf, PROV_CAPABILITIES);
   13bc4:	2101      	movs	r1, #1
   13bc6:	4668      	mov	r0, sp
   13bc8:	f012 ff26 	bl	26a18 <bt_mesh_prov_buf_init>
	net_buf_simple_add_u8(&buf, bt_mesh_elem_count());
   13bcc:	f7fc fd90 	bl	106f0 <bt_mesh_elem_count>
   13bd0:	4601      	mov	r1, r0
   13bd2:	4668      	mov	r0, sp
   13bd4:	f014 fb47 	bl	28266 <net_buf_simple_add_u8>
	net_buf_simple_add_be16(&buf, BIT(PROV_ALG_P256));
   13bd8:	2101      	movs	r1, #1
   13bda:	4668      	mov	r0, sp
   13bdc:	f014 fb55 	bl	2828a <net_buf_simple_add_be16>
			      bt_mesh_prov->public_key_be == NULL ? PUB_KEY_NO_OOB : PUB_KEY_OOB);
   13be0:	6823      	ldr	r3, [r4, #0]
	net_buf_simple_add_u8(&buf,
   13be2:	68d9      	ldr	r1, [r3, #12]
   13be4:	3900      	subs	r1, #0
   13be6:	bf18      	it	ne
   13be8:	2101      	movne	r1, #1
   13bea:	4668      	mov	r0, sp
   13bec:	f014 fb3b 	bl	28266 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&buf, bt_mesh_prov->static_val ? BIT(0) : 0x00);
   13bf0:	6823      	ldr	r3, [r4, #0]
   13bf2:	6959      	ldr	r1, [r3, #20]
   13bf4:	3900      	subs	r1, #0
   13bf6:	bf18      	it	ne
   13bf8:	2101      	movne	r1, #1
   13bfa:	4668      	mov	r0, sp
   13bfc:	f014 fb33 	bl	28266 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&buf, bt_mesh_prov->output_size);
   13c00:	6823      	ldr	r3, [r4, #0]
   13c02:	4668      	mov	r0, sp
   13c04:	7e59      	ldrb	r1, [r3, #25]
   13c06:	f014 fb2e 	bl	28266 <net_buf_simple_add_u8>
	net_buf_simple_add_be16(&buf, bt_mesh_prov->output_actions);
   13c0a:	6823      	ldr	r3, [r4, #0]
   13c0c:	4668      	mov	r0, sp
   13c0e:	8b59      	ldrh	r1, [r3, #26]
   13c10:	f014 fb3b 	bl	2828a <net_buf_simple_add_be16>
	net_buf_simple_add_u8(&buf, bt_mesh_prov->input_size);
   13c14:	6823      	ldr	r3, [r4, #0]
   13c16:	4668      	mov	r0, sp
   13c18:	7f19      	ldrb	r1, [r3, #28]
   13c1a:	f014 fb24 	bl	28266 <net_buf_simple_add_u8>
	net_buf_simple_add_be16(&buf, bt_mesh_prov->input_actions);
   13c1e:	6823      	ldr	r3, [r4, #0]
   13c20:	4668      	mov	r0, sp
   13c22:	8bd9      	ldrh	r1, [r3, #30]
   13c24:	f014 fb31 	bl	2828a <net_buf_simple_add_be16>
	memcpy(bt_mesh_prov_link.conf_inputs.capabilities, &buf.data[1], PDU_LEN_CAPABILITIES);
   13c28:	9900      	ldr	r1, [sp, #0]
   13c2a:	480f      	ldr	r0, [pc, #60]	; (13c68 <prov_invite+0xcc>)
   13c2c:	3101      	adds	r1, #1
   13c2e:	220b      	movs	r2, #11
   13c30:	f010 f8ba 	bl	23da8 <memcpy>
	if (bt_mesh_prov_send(&buf, NULL)) {
   13c34:	2100      	movs	r1, #0
   13c36:	4668      	mov	r0, sp
   13c38:	f7ff fec4 	bl	139c4 <bt_mesh_prov_send>
   13c3c:	b158      	cbz	r0, 13c56 <prov_invite+0xba>
   13c3e:	490b      	ldr	r1, [pc, #44]	; (13c6c <prov_invite+0xd0>)
   13c40:	4b0b      	ldr	r3, [pc, #44]	; (13c70 <prov_invite+0xd4>)
		BT_ERR("Failed to send capabilities");
   13c42:	480c      	ldr	r0, [pc, #48]	; (13c74 <prov_invite+0xd8>)
   13c44:	1ac9      	subs	r1, r1, r3
   13c46:	08c9      	lsrs	r1, r1, #3
   13c48:	0189      	lsls	r1, r1, #6
   13c4a:	f041 0101 	orr.w	r1, r1, #1
   13c4e:	f00d ff4c 	bl	21aea <log_0>
}
   13c52:	b008      	add	sp, #32
   13c54:	bd10      	pop	{r4, pc}
	bt_mesh_prov_link.expect = PROV_START;
   13c56:	4b08      	ldr	r3, [pc, #32]	; (13c78 <prov_invite+0xdc>)
   13c58:	2202      	movs	r2, #2
   13c5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
   13c5e:	e7f8      	b.n	13c52 <prov_invite+0xb6>
   13c60:	200023e8 	.word	0x200023e8
   13c64:	20002364 	.word	0x20002364
   13c68:	200023e9 	.word	0x200023e9
   13c6c:	00029a18 	.word	0x00029a18
   13c70:	00029870 	.word	0x00029870
   13c74:	0002e50d 	.word	0x0002e50d
   13c78:	20002368 	.word	0x20002368

00013c7c <prov_random>:
{
   13c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!memcmp(data, bt_mesh_prov_link.rand, 16)) {
   13c7e:	4c43      	ldr	r4, [pc, #268]	; (13d8c <prov_random+0x110>)
{
   13c80:	b08f      	sub	sp, #60	; 0x3c
	if (!memcmp(data, bt_mesh_prov_link.rand, 16)) {
   13c82:	2210      	movs	r2, #16
   13c84:	4621      	mov	r1, r4
{
   13c86:	4605      	mov	r5, r0
	if (!memcmp(data, bt_mesh_prov_link.rand, 16)) {
   13c88:	f010 f87d 	bl	23d86 <memcmp>
   13c8c:	b978      	cbnz	r0, 13cae <prov_random+0x32>
   13c8e:	4b40      	ldr	r3, [pc, #256]	; (13d90 <prov_random+0x114>)
   13c90:	4940      	ldr	r1, [pc, #256]	; (13d94 <prov_random+0x118>)
		BT_ERR("Random value is identical to ours, rejecting.");
   13c92:	4841      	ldr	r0, [pc, #260]	; (13d98 <prov_random+0x11c>)
   13c94:	1ac9      	subs	r1, r1, r3
   13c96:	08c9      	lsrs	r1, r1, #3
   13c98:	0189      	lsls	r1, r1, #6
   13c9a:	f041 0101 	orr.w	r1, r1, #1
   13c9e:	f00d ff24 	bl	21aea <log_0>
	prov_send_fail_msg(reason);
   13ca2:	2004      	movs	r0, #4
}
   13ca4:	b00f      	add	sp, #60	; 0x3c
   13ca6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	prov_send_fail_msg(reason);
   13caa:	f7ff bec5 	b.w	13a38 <prov_send_fail_msg>
	if (bt_mesh_prov_conf(bt_mesh_prov_link.conf_key, data,
   13cae:	466b      	mov	r3, sp
   13cb0:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
   13cb4:	4629      	mov	r1, r5
   13cb6:	f104 0020 	add.w	r0, r4, #32
   13cba:	f012 fb2d 	bl	26318 <bt_mesh_prov_conf>
   13cbe:	b158      	cbz	r0, 13cd8 <prov_random+0x5c>
   13cc0:	4934      	ldr	r1, [pc, #208]	; (13d94 <prov_random+0x118>)
   13cc2:	4b33      	ldr	r3, [pc, #204]	; (13d90 <prov_random+0x114>)
		BT_ERR("Unable to calculate confirmation verification");
   13cc4:	4835      	ldr	r0, [pc, #212]	; (13d9c <prov_random+0x120>)
   13cc6:	1ac9      	subs	r1, r1, r3
   13cc8:	08c9      	lsrs	r1, r1, #3
   13cca:	0189      	lsls	r1, r1, #6
   13ccc:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Failed to generate provisioning salt");
   13cd0:	f00d ff0b 	bl	21aea <log_0>
	prov_send_fail_msg(reason);
   13cd4:	2007      	movs	r0, #7
   13cd6:	e011      	b.n	13cfc <prov_random+0x80>
	if (memcmp(conf_verify, bt_mesh_prov_link.conf, 16)) {
   13cd8:	2210      	movs	r2, #16
   13cda:	f1a4 0110 	sub.w	r1, r4, #16
   13cde:	4668      	mov	r0, sp
   13ce0:	f010 f851 	bl	23d86 <memcmp>
   13ce4:	b170      	cbz	r0, 13d04 <prov_random+0x88>
   13ce6:	4b2a      	ldr	r3, [pc, #168]	; (13d90 <prov_random+0x114>)
   13ce8:	492a      	ldr	r1, [pc, #168]	; (13d94 <prov_random+0x118>)
		BT_ERR("Invalid confirmation value");
   13cea:	482d      	ldr	r0, [pc, #180]	; (13da0 <prov_random+0x124>)
   13cec:	1ac9      	subs	r1, r1, r3
   13cee:	08c9      	lsrs	r1, r1, #3
   13cf0:	0189      	lsls	r1, r1, #6
   13cf2:	f041 0101 	orr.w	r1, r1, #1
   13cf6:	f00d fef8 	bl	21aea <log_0>
	prov_send_fail_msg(reason);
   13cfa:	2004      	movs	r0, #4
   13cfc:	f7ff fe9c 	bl	13a38 <prov_send_fail_msg>
}
   13d00:	b00f      	add	sp, #60	; 0x3c
   13d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
				    const uint8_t prov_rand[16],
				    const uint8_t dev_rand[16],
				    uint8_t prov_salt[16])
{
	const uint8_t prov_salt_key[16] = { 0 };
	struct bt_mesh_sg sg[] = {
   13d04:	2610      	movs	r6, #16
   13d06:	f104 0310 	add.w	r3, r4, #16
		{ conf_salt, 16 },
		{ prov_rand, 16 },
		{ dev_rand, 16 },
	};

	return bt_mesh_aes_cmac(prov_salt_key, sg, ARRAY_SIZE(sg), prov_salt);
   13d0a:	af08      	add	r7, sp, #32
	const uint8_t prov_salt_key[16] = { 0 };
   13d0c:	e9cd 0004 	strd	r0, r0, [sp, #16]
   13d10:	e9cd 0006 	strd	r0, r0, [sp, #24]
	struct bt_mesh_sg sg[] = {
   13d14:	9308      	str	r3, [sp, #32]
	return bt_mesh_aes_cmac(prov_salt_key, sg, ARRAY_SIZE(sg), prov_salt);
   13d16:	2203      	movs	r2, #3
   13d18:	f104 03c1 	add.w	r3, r4, #193	; 0xc1
   13d1c:	4639      	mov	r1, r7
   13d1e:	eb0d 0006 	add.w	r0, sp, r6
	struct bt_mesh_sg sg[] = {
   13d22:	e9cd 6509 	strd	r6, r5, [sp, #36]	; 0x24
   13d26:	e9cd 640b 	strd	r6, r4, [sp, #44]	; 0x2c
   13d2a:	960d      	str	r6, [sp, #52]	; 0x34
	return bt_mesh_aes_cmac(prov_salt_key, sg, ARRAY_SIZE(sg), prov_salt);
   13d2c:	f012 f9a7 	bl	2607e <bt_mesh_aes_cmac>
	if (bt_mesh_prov_salt(bt_mesh_prov_link.conf_salt, data,
   13d30:	4605      	mov	r5, r0
   13d32:	b140      	cbz	r0, 13d46 <prov_random+0xca>
   13d34:	4917      	ldr	r1, [pc, #92]	; (13d94 <prov_random+0x118>)
   13d36:	4b16      	ldr	r3, [pc, #88]	; (13d90 <prov_random+0x114>)
		BT_ERR("Failed to generate provisioning salt");
   13d38:	481a      	ldr	r0, [pc, #104]	; (13da4 <prov_random+0x128>)
   13d3a:	1ac9      	subs	r1, r1, r3
   13d3c:	08c9      	lsrs	r1, r1, #3
   13d3e:	0189      	lsls	r1, r1, #6
   13d40:	f041 0101 	orr.w	r1, r1, #1
   13d44:	e7c4      	b.n	13cd0 <prov_random+0x54>
	PROV_BUF(rnd, PDU_LEN_RANDOM);
   13d46:	f44f 13b0 	mov.w	r3, #1441792	; 0x160000
	bt_mesh_prov_buf_init(&rnd, PROV_RANDOM);
   13d4a:	2106      	movs	r1, #6
   13d4c:	a804      	add	r0, sp, #16
	PROV_BUF(rnd, PDU_LEN_RANDOM);
   13d4e:	e9cd 3705 	strd	r3, r7, [sp, #20]
   13d52:	9704      	str	r7, [sp, #16]
	bt_mesh_prov_buf_init(&rnd, PROV_RANDOM);
   13d54:	f012 fe60 	bl	26a18 <bt_mesh_prov_buf_init>
	net_buf_simple_add_mem(&rnd, bt_mesh_prov_link.rand, 16);
   13d58:	4621      	mov	r1, r4
   13d5a:	4632      	mov	r2, r6
   13d5c:	a804      	add	r0, sp, #16
   13d5e:	f014 fa79 	bl	28254 <net_buf_simple_add_mem>
	if (bt_mesh_prov_send(&rnd, NULL)) {
   13d62:	4629      	mov	r1, r5
   13d64:	a804      	add	r0, sp, #16
   13d66:	f7ff fe2d 	bl	139c4 <bt_mesh_prov_send>
   13d6a:	b150      	cbz	r0, 13d82 <prov_random+0x106>
   13d6c:	4b08      	ldr	r3, [pc, #32]	; (13d90 <prov_random+0x114>)
   13d6e:	4909      	ldr	r1, [pc, #36]	; (13d94 <prov_random+0x118>)
		BT_ERR("Failed to send Provisioning Random");
   13d70:	480d      	ldr	r0, [pc, #52]	; (13da8 <prov_random+0x12c>)
   13d72:	1ac9      	subs	r1, r1, r3
   13d74:	08c9      	lsrs	r1, r1, #3
   13d76:	0189      	lsls	r1, r1, #6
   13d78:	f041 0101 	orr.w	r1, r1, #1
   13d7c:	f00d feb5 	bl	21aea <log_0>
		return;
   13d80:	e7be      	b.n	13d00 <prov_random+0x84>
	bt_mesh_prov_link.expect = PROV_DATA;
   13d82:	2307      	movs	r3, #7
   13d84:	f804 3c11 	strb.w	r3, [r4, #-17]
   13d88:	e7ba      	b.n	13d00 <prov_random+0x84>
   13d8a:	bf00      	nop
   13d8c:	200023b8 	.word	0x200023b8
   13d90:	00029870 	.word	0x00029870
   13d94:	00029a18 	.word	0x00029a18
   13d98:	0002e529 	.word	0x0002e529
   13d9c:	0002e557 	.word	0x0002e557
   13da0:	0002e585 	.word	0x0002e585
   13da4:	0002e5a0 	.word	0x0002e5a0
   13da8:	0002e5c5 	.word	0x0002e5c5

00013dac <prov_data>:
{
   13dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13db0:	b09a      	sub	sp, #104	; 0x68
	PROV_BUF(msg, PDU_LEN_COMPLETE);
   13db2:	ab02      	add	r3, sp, #8
   13db4:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   13db8:	e9cd 2305 	strd	r2, r3, [sp, #20]
	return bt_mesh_k1(dhkey, 32, prov_salt, "prsk", session_key);
   13dbc:	4a51      	ldr	r2, [pc, #324]	; (13f04 <prov_data+0x158>)
   13dbe:	9304      	str	r3, [sp, #16]
   13dc0:	ad0b      	add	r5, sp, #44	; 0x2c
{
   13dc2:	4604      	mov	r4, r0
   13dc4:	4b50      	ldr	r3, [pc, #320]	; (13f08 <prov_data+0x15c>)
   13dc6:	9500      	str	r5, [sp, #0]
   13dc8:	2120      	movs	r1, #32
   13dca:	f1a2 00f2 	sub.w	r0, r2, #242	; 0xf2
   13dce:	f012 f998 	bl	26102 <bt_mesh_k1>
	if (err) {
   13dd2:	b158      	cbz	r0, 13dec <prov_data+0x40>
   13dd4:	494d      	ldr	r1, [pc, #308]	; (13f0c <prov_data+0x160>)
   13dd6:	4b4e      	ldr	r3, [pc, #312]	; (13f10 <prov_data+0x164>)
		BT_ERR("Unable to generate session key");
   13dd8:	484e      	ldr	r0, [pc, #312]	; (13f14 <prov_data+0x168>)
   13dda:	1ac9      	subs	r1, r1, r3
   13ddc:	08c9      	lsrs	r1, r1, #3
   13dde:	0189      	lsls	r1, r1, #6
   13de0:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to generate session nonce");
   13de4:	f00d fe81 	bl	21aea <log_0>
	prov_send_fail_msg(reason);
   13de8:	2007      	movs	r0, #7
   13dea:	e022      	b.n	13e32 <prov_data+0x86>
	err = bt_mesh_k1(dhkey, 32, prov_salt, "prsn", tmp);
   13dec:	4a45      	ldr	r2, [pc, #276]	; (13f04 <prov_data+0x158>)
   13dee:	4b4a      	ldr	r3, [pc, #296]	; (13f18 <prov_data+0x16c>)
   13df0:	af13      	add	r7, sp, #76	; 0x4c
   13df2:	9700      	str	r7, [sp, #0]
   13df4:	2120      	movs	r1, #32
   13df6:	f1a2 00f2 	sub.w	r0, r2, #242	; 0xf2
   13dfa:	f012 f982 	bl	26102 <bt_mesh_k1>
	if (!err) {
   13dfe:	2800      	cmp	r0, #0
   13e00:	d176      	bne.n	13ef0 <prov_data+0x144>
		memcpy(nonce, tmp + 3, 13);
   13e02:	220d      	movs	r2, #13
   13e04:	f10d 014f 	add.w	r1, sp, #79	; 0x4f
   13e08:	a807      	add	r0, sp, #28
   13e0a:	f00f ffcd 	bl	23da8 <memcpy>
	err = bt_mesh_prov_decrypt(session_key, nonce, data, pdu);
   13e0e:	463b      	mov	r3, r7
   13e10:	4622      	mov	r2, r4
   13e12:	a907      	add	r1, sp, #28
   13e14:	4628      	mov	r0, r5
   13e16:	f012 fa8c 	bl	26332 <bt_mesh_prov_decrypt>
	if (err) {
   13e1a:	b168      	cbz	r0, 13e38 <prov_data+0x8c>
   13e1c:	4b3c      	ldr	r3, [pc, #240]	; (13f10 <prov_data+0x164>)
   13e1e:	493b      	ldr	r1, [pc, #236]	; (13f0c <prov_data+0x160>)
		BT_ERR("Unable to decrypt provisioning data");
   13e20:	483e      	ldr	r0, [pc, #248]	; (13f1c <prov_data+0x170>)
   13e22:	1ac9      	subs	r1, r1, r3
   13e24:	08c9      	lsrs	r1, r1, #3
   13e26:	0189      	lsls	r1, r1, #6
   13e28:	f041 0101 	orr.w	r1, r1, #1
   13e2c:	f00d fe5d 	bl	21aea <log_0>
	prov_send_fail_msg(reason);
   13e30:	2006      	movs	r0, #6
   13e32:	f7ff fe01 	bl	13a38 <prov_send_fail_msg>
		return;
   13e36:	e02f      	b.n	13e98 <prov_data+0xec>
	return bt_mesh_k1(dhkey, 32, prov_salt, "prdk", dev_key);
   13e38:	4a32      	ldr	r2, [pc, #200]	; (13f04 <prov_data+0x158>)
   13e3a:	4b39      	ldr	r3, [pc, #228]	; (13f20 <prov_data+0x174>)
   13e3c:	ae0f      	add	r6, sp, #60	; 0x3c
   13e3e:	9600      	str	r6, [sp, #0]
   13e40:	2120      	movs	r1, #32
   13e42:	f1a2 00f2 	sub.w	r0, r2, #242	; 0xf2
   13e46:	f012 f95c 	bl	26102 <bt_mesh_k1>
	if (err) {
   13e4a:	4604      	mov	r4, r0
   13e4c:	b140      	cbz	r0, 13e60 <prov_data+0xb4>
   13e4e:	492f      	ldr	r1, [pc, #188]	; (13f0c <prov_data+0x160>)
   13e50:	4b2f      	ldr	r3, [pc, #188]	; (13f10 <prov_data+0x164>)
		BT_ERR("Unable to generate device key");
   13e52:	4834      	ldr	r0, [pc, #208]	; (13f24 <prov_data+0x178>)
   13e54:	1ac9      	subs	r1, r1, r3
   13e56:	08c9      	lsrs	r1, r1, #3
   13e58:	0189      	lsls	r1, r1, #6
   13e5a:	f041 0101 	orr.w	r1, r1, #1
   13e5e:	e7c1      	b.n	13de4 <prov_data+0x38>
	bt_mesh_prov_buf_init(&msg, PROV_COMPLETE);
   13e60:	2108      	movs	r1, #8
   13e62:	a804      	add	r0, sp, #16
   13e64:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
	flags = pdu[18];
   13e68:	f89d 905e 	ldrb.w	r9, [sp, #94]	; 0x5e
	return ((uint16_t)src[0] << 8) | src[1];
   13e6c:	f8dd a05f 	ldr.w	sl, [sp, #95]	; 0x5f
   13e70:	f8bd 5063 	ldrh.w	r5, [sp, #99]	; 0x63
	bt_mesh_prov_buf_init(&msg, PROV_COMPLETE);
   13e74:	f012 fdd0 	bl	26a18 <bt_mesh_prov_buf_init>
	if (bt_mesh_prov_send(&msg, NULL)) {
   13e78:	4621      	mov	r1, r4
   13e7a:	a804      	add	r0, sp, #16
   13e7c:	f7ff fda2 	bl	139c4 <bt_mesh_prov_send>
   13e80:	4604      	mov	r4, r0
   13e82:	b160      	cbz	r0, 13e9e <prov_data+0xf2>
   13e84:	4921      	ldr	r1, [pc, #132]	; (13f0c <prov_data+0x160>)
   13e86:	4b22      	ldr	r3, [pc, #136]	; (13f10 <prov_data+0x164>)
		BT_ERR("Failed to send Provisioning Complete");
   13e88:	4827      	ldr	r0, [pc, #156]	; (13f28 <prov_data+0x17c>)
   13e8a:	1ac9      	subs	r1, r1, r3
   13e8c:	08c9      	lsrs	r1, r1, #3
   13e8e:	0189      	lsls	r1, r1, #6
   13e90:	f041 0101 	orr.w	r1, r1, #1
   13e94:	f00d fe29 	bl	21aea <log_0>
}
   13e98:	b01a      	add	sp, #104	; 0x68
   13e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	bt_mesh_prov_link.expect = PROV_NO_PDU;
   13e9e:	4b23      	ldr	r3, [pc, #140]	; (13f2c <prov_data+0x180>)
   13ea0:	22ff      	movs	r2, #255	; 0xff
   13ea2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	return bt_mesh_prov_link.bearer &&
   13ea6:	685b      	ldr	r3, [r3, #4]
   13ea8:	b11b      	cbz	r3, 13eb2 <prov_data+0x106>
   13eaa:	781c      	ldrb	r4, [r3, #0]
   13eac:	1ea3      	subs	r3, r4, #2
   13eae:	425c      	negs	r4, r3
   13eb0:	415c      	adcs	r4, r3
	err = bt_mesh_provision(pdu, net_idx, flags, iv_index, addr, dev_key);
   13eb2:	ba6d      	rev16	r5, r5
   13eb4:	fa98 f198 	rev16.w	r1, r8
   13eb8:	b2ad      	uxth	r5, r5
   13eba:	b289      	uxth	r1, r1
   13ebc:	9601      	str	r6, [sp, #4]
   13ebe:	9500      	str	r5, [sp, #0]
   13ec0:	fa9a f38a 	rev.w	r3, sl
   13ec4:	464a      	mov	r2, r9
   13ec6:	4638      	mov	r0, r7
   13ec8:	f7f7 fbb8 	bl	b63c <bt_mesh_provision>
	if (err) {
   13ecc:	4601      	mov	r1, r0
   13ece:	b150      	cbz	r0, 13ee6 <prov_data+0x13a>
   13ed0:	4b0f      	ldr	r3, [pc, #60]	; (13f10 <prov_data+0x164>)
   13ed2:	4a0e      	ldr	r2, [pc, #56]	; (13f0c <prov_data+0x160>)
		BT_ERR("Failed to provision (err %d)", err);
   13ed4:	4816      	ldr	r0, [pc, #88]	; (13f30 <prov_data+0x184>)
   13ed6:	1ad2      	subs	r2, r2, r3
   13ed8:	08d2      	lsrs	r2, r2, #3
   13eda:	0192      	lsls	r2, r2, #6
   13edc:	f042 0201 	orr.w	r2, r2, #1
   13ee0:	f00d fe10 	bl	21b04 <log_1>
		return;
   13ee4:	e7d8      	b.n	13e98 <prov_data+0xec>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) && identity_enable) {
   13ee6:	2c00      	cmp	r4, #0
   13ee8:	d0d6      	beq.n	13e98 <prov_data+0xec>
		bt_mesh_proxy_identity_enable();
   13eea:	f001 fb73 	bl	155d4 <bt_mesh_proxy_identity_enable>
   13eee:	e7d3      	b.n	13e98 <prov_data+0xec>
   13ef0:	4906      	ldr	r1, [pc, #24]	; (13f0c <prov_data+0x160>)
   13ef2:	4b07      	ldr	r3, [pc, #28]	; (13f10 <prov_data+0x164>)
		BT_ERR("Unable to generate session nonce");
   13ef4:	480f      	ldr	r0, [pc, #60]	; (13f34 <prov_data+0x188>)
   13ef6:	1ac9      	subs	r1, r1, r3
   13ef8:	08c9      	lsrs	r1, r1, #3
   13efa:	0189      	lsls	r1, r1, #6
   13efc:	f041 0101 	orr.w	r1, r1, #1
   13f00:	e770      	b.n	13de4 <prov_data+0x38>
   13f02:	bf00      	nop
   13f04:	20002479 	.word	0x20002479
   13f08:	0002e5e8 	.word	0x0002e5e8
   13f0c:	00029a18 	.word	0x00029a18
   13f10:	00029870 	.word	0x00029870
   13f14:	0002e5ed 	.word	0x0002e5ed
   13f18:	0002e60c 	.word	0x0002e60c
   13f1c:	0002e611 	.word	0x0002e611
   13f20:	0002e635 	.word	0x0002e635
   13f24:	0002e63a 	.word	0x0002e63a
   13f28:	0002e658 	.word	0x0002e658
   13f2c:	20002368 	.word	0x20002368
   13f30:	0002e67d 	.word	0x0002e67d
   13f34:	0002e69a 	.word	0x0002e69a

00013f38 <prov_dh_key_gen>:
{
   13f38:	b500      	push	{lr}
	sys_memcpy_swap(remote_pk_le, remote_pk, BT_PUB_KEY_COORD_LEN);
   13f3a:	490f      	ldr	r1, [pc, #60]	; (13f78 <prov_dh_key_gen+0x40>)
{
   13f3c:	b091      	sub	sp, #68	; 0x44
	sys_memcpy_swap(remote_pk_le, remote_pk, BT_PUB_KEY_COORD_LEN);
   13f3e:	4668      	mov	r0, sp
   13f40:	f012 fd78 	bl	26a34 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&remote_pk_le[BT_PUB_KEY_COORD_LEN], &remote_pk[BT_PUB_KEY_COORD_LEN],
   13f44:	3120      	adds	r1, #32
   13f46:	a808      	add	r0, sp, #32
   13f48:	f012 fd74 	bl	26a34 <sys_memcpy_swap.constprop.0>
	if (bt_dh_key_gen(remote_pk_le, prov_dh_key_cb)) {
   13f4c:	490b      	ldr	r1, [pc, #44]	; (13f7c <prov_dh_key_gen+0x44>)
   13f4e:	4668      	mov	r0, sp
   13f50:	f7f3 fe56 	bl	7c00 <bt_dh_key_gen>
   13f54:	b160      	cbz	r0, 13f70 <prov_dh_key_gen+0x38>
   13f56:	4b0a      	ldr	r3, [pc, #40]	; (13f80 <prov_dh_key_gen+0x48>)
   13f58:	490a      	ldr	r1, [pc, #40]	; (13f84 <prov_dh_key_gen+0x4c>)
		BT_ERR("Failed to generate DHKey");
   13f5a:	480b      	ldr	r0, [pc, #44]	; (13f88 <prov_dh_key_gen+0x50>)
   13f5c:	1ac9      	subs	r1, r1, r3
   13f5e:	08c9      	lsrs	r1, r1, #3
   13f60:	0189      	lsls	r1, r1, #6
   13f62:	f041 0101 	orr.w	r1, r1, #1
   13f66:	f00d fdc0 	bl	21aea <log_0>
	prov_send_fail_msg(reason);
   13f6a:	2007      	movs	r0, #7
   13f6c:	f7ff fd64 	bl	13a38 <prov_send_fail_msg>
}
   13f70:	b011      	add	sp, #68	; 0x44
   13f72:	f85d fb04 	ldr.w	pc, [sp], #4
   13f76:	bf00      	nop
   13f78:	200023f9 	.word	0x200023f9
   13f7c:	000140dd 	.word	0x000140dd
   13f80:	00029870 	.word	0x00029870
   13f84:	00029a18 	.word	0x00029a18
   13f88:	0002e6bb 	.word	0x0002e6bb

00013f8c <atomic_get.constprop.0>:
   13f8c:	4b03      	ldr	r3, [pc, #12]	; (13f9c <atomic_get.constprop.0+0x10>)
   13f8e:	f3bf 8f5b 	dmb	ish
   13f92:	6818      	ldr	r0, [r3, #0]
   13f94:	f3bf 8f5b 	dmb	ish
}
   13f98:	4770      	bx	lr
   13f9a:	bf00      	nop
   13f9c:	20002368 	.word	0x20002368

00013fa0 <prov_start>:
{
   13fa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (data[0] != PROV_ALG_P256) {
   13fa2:	7801      	ldrb	r1, [r0, #0]
{
   13fa4:	4604      	mov	r4, r0
	if (data[0] != PROV_ALG_P256) {
   13fa6:	b179      	cbz	r1, 13fc8 <prov_start+0x28>
   13fa8:	4a32      	ldr	r2, [pc, #200]	; (14074 <prov_start+0xd4>)
   13faa:	4b33      	ldr	r3, [pc, #204]	; (14078 <prov_start+0xd8>)
		BT_ERR("Unknown algorithm 0x%02x", data[0]);
   13fac:	4833      	ldr	r0, [pc, #204]	; (1407c <prov_start+0xdc>)
   13fae:	1ad2      	subs	r2, r2, r3
   13fb0:	08d2      	lsrs	r2, r2, #3
   13fb2:	0192      	lsls	r2, r2, #6
   13fb4:	f042 0201 	orr.w	r2, r2, #1
		BT_ERR("Invalid public key type: 0x%02x", data[1]);
   13fb8:	f00d fda4 	bl	21b04 <log_1>
	prov_send_fail_msg(reason);
   13fbc:	2002      	movs	r0, #2
}
   13fbe:	b003      	add	sp, #12
   13fc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	prov_send_fail_msg(reason);
   13fc4:	f7ff bd38 	b.w	13a38 <prov_send_fail_msg>
	if (data[1] > PUB_KEY_OOB ||
   13fc8:	7841      	ldrb	r1, [r0, #1]
   13fca:	b141      	cbz	r1, 13fde <prov_start+0x3e>
   13fcc:	4a29      	ldr	r2, [pc, #164]	; (14074 <prov_start+0xd4>)
   13fce:	4b2a      	ldr	r3, [pc, #168]	; (14078 <prov_start+0xd8>)
		BT_ERR("Invalid public key type: 0x%02x", data[1]);
   13fd0:	482b      	ldr	r0, [pc, #172]	; (14080 <prov_start+0xe0>)
   13fd2:	1ad2      	subs	r2, r2, r3
   13fd4:	08d2      	lsrs	r2, r2, #3
   13fd6:	0192      	lsls	r2, r2, #6
   13fd8:	f042 0201 	orr.w	r2, r2, #1
   13fdc:	e7ec      	b.n	13fb8 <prov_start+0x18>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13fde:	4d29      	ldr	r5, [pc, #164]	; (14084 <prov_start+0xe4>)
   13fe0:	f3bf 8f5b 	dmb	ish
   13fe4:	e855 3f00 	ldrex	r3, [r5]
   13fe8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   13fec:	e845 3200 	strex	r2, r3, [r5]
   13ff0:	2a00      	cmp	r2, #0
   13ff2:	d1f7      	bne.n	13fe4 <prov_start+0x44>
   13ff4:	f3bf 8f5b 	dmb	ish
	memcpy(bt_mesh_prov_link.conf_inputs.start, data, PDU_LEN_START);
   13ff8:	2205      	movs	r2, #5
   13ffa:	4621      	mov	r1, r4
   13ffc:	f105 008c 	add.w	r0, r5, #140	; 0x8c
   14000:	f00f fed2 	bl	23da8 <memcpy>
	bt_mesh_prov_link.expect = PROV_PUB_KEY;
   14004:	2303      	movs	r3, #3
   14006:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
	if (bt_mesh_prov_auth(data[2], data[3], data[4]) < 0) {
   1400a:	7922      	ldrb	r2, [r4, #4]
   1400c:	78e1      	ldrb	r1, [r4, #3]
   1400e:	78a0      	ldrb	r0, [r4, #2]
   14010:	f7ff fbae 	bl	13770 <bt_mesh_prov_auth>
   14014:	2800      	cmp	r0, #0
   14016:	da11      	bge.n	1403c <prov_start+0x9c>
   14018:	4a17      	ldr	r2, [pc, #92]	; (14078 <prov_start+0xd8>)
   1401a:	4b16      	ldr	r3, [pc, #88]	; (14074 <prov_start+0xd4>)
		BT_ERR("Invalid authentication method: 0x%02x; "
   1401c:	481a      	ldr	r0, [pc, #104]	; (14088 <prov_start+0xe8>)
   1401e:	1a9b      	subs	r3, r3, r2
   14020:	08db      	lsrs	r3, r3, #3
   14022:	019b      	lsls	r3, r3, #6
   14024:	f043 0301 	orr.w	r3, r3, #1
   14028:	f8ad 3000 	strh.w	r3, [sp]
   1402c:	7923      	ldrb	r3, [r4, #4]
   1402e:	78e2      	ldrb	r2, [r4, #3]
   14030:	78a1      	ldrb	r1, [r4, #2]
   14032:	f00d fd94 	bl	21b5e <log_3>
	prov_send_fail_msg(reason);
   14036:	2002      	movs	r0, #2
   14038:	f7ff fcfe 	bl	13a38 <prov_send_fail_msg>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1403c:	f7ff ffa6 	bl	13f8c <atomic_get.constprop.0>
	if (atomic_test_bit(bt_mesh_prov_link.flags, OOB_STATIC_KEY)) {
   14040:	04c3      	lsls	r3, r0, #19
   14042:	d514      	bpl.n	1406e <prov_start+0xce>
		memcpy(bt_mesh_prov_link.auth + 16 - bt_mesh_prov->static_val_len,
   14044:	4d11      	ldr	r5, [pc, #68]	; (1408c <prov_start+0xec>)
   14046:	4c12      	ldr	r4, [pc, #72]	; (14090 <prov_start+0xf0>)
   14048:	682b      	ldr	r3, [r5, #0]
   1404a:	7e1a      	ldrb	r2, [r3, #24]
   1404c:	6959      	ldr	r1, [r3, #20]
   1404e:	f1c2 0010 	rsb	r0, r2, #16
   14052:	4420      	add	r0, r4
   14054:	f00f fea8 	bl	23da8 <memcpy>
			     sizeof(bt_mesh_prov_link.auth) - bt_mesh_prov->static_val_len);
   14058:	682b      	ldr	r3, [r5, #0]
   1405a:	7e1a      	ldrb	r2, [r3, #24]
		(void)memset(bt_mesh_prov_link.auth, 0,
   1405c:	2100      	movs	r1, #0
   1405e:	f1c2 0210 	rsb	r2, r2, #16
   14062:	4620      	mov	r0, r4
}
   14064:	b003      	add	sp, #12
   14066:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		(void)memset(bt_mesh_prov_link.auth, 0,
   1406a:	f00f bea8 	b.w	23dbe <memset>
}
   1406e:	b003      	add	sp, #12
   14070:	bd30      	pop	{r4, r5, pc}
   14072:	bf00      	nop
   14074:	00029a18 	.word	0x00029a18
   14078:	00029870 	.word	0x00029870
   1407c:	0002e6d4 	.word	0x0002e6d4
   14080:	0002e6ed 	.word	0x0002e6ed
   14084:	20002368 	.word	0x20002368
   14088:	0002e70d 	.word	0x0002e70d
   1408c:	20002364 	.word	0x20002364
   14090:	20002377 	.word	0x20002377

00014094 <prov_link_closed>:
	return bt_mesh_prov_reset_state(pub_key_ready);
   14094:	4801      	ldr	r0, [pc, #4]	; (1409c <prov_link_closed+0x8>)
   14096:	f7ff bb2b 	b.w	136f0 <bt_mesh_prov_reset_state>
   1409a:	bf00      	nop
   1409c:	0001430d 	.word	0x0001430d

000140a0 <local_input_complete>:
{
   140a0:	b508      	push	{r3, lr}
   140a2:	f7ff ff73 	bl	13f8c <atomic_get.constprop.0>
	if (atomic_test_bit(bt_mesh_prov_link.flags, PUB_KEY_SENT) ||
   140a6:	0602      	lsls	r2, r0, #24
   140a8:	d503      	bpl.n	140b2 <local_input_complete+0x12>
}
   140aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		send_input_complete();
   140ae:	f7ff bc99 	b.w	139e4 <send_input_complete>
   140b2:	f7ff ff6b 	bl	13f8c <atomic_get.constprop.0>
	if (atomic_test_bit(bt_mesh_prov_link.flags, PUB_KEY_SENT) ||
   140b6:	0643      	lsls	r3, r0, #25
   140b8:	d4f7      	bmi.n	140aa <local_input_complete+0xa>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   140ba:	f3bf 8f5b 	dmb	ish
   140be:	4b06      	ldr	r3, [pc, #24]	; (140d8 <local_input_complete+0x38>)
   140c0:	e853 2f00 	ldrex	r2, [r3]
   140c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   140c8:	e843 2100 	strex	r1, r2, [r3]
   140cc:	2900      	cmp	r1, #0
   140ce:	d1f7      	bne.n	140c0 <local_input_complete+0x20>
   140d0:	f3bf 8f5b 	dmb	ish
}
   140d4:	bd08      	pop	{r3, pc}
   140d6:	bf00      	nop
   140d8:	20002368 	.word	0x20002368

000140dc <prov_dh_key_cb>:
{
   140dc:	b530      	push	{r4, r5, lr}
	if (!dhkey) {
   140de:	4601      	mov	r1, r0
{
   140e0:	b097      	sub	sp, #92	; 0x5c
	if (!dhkey) {
   140e2:	b978      	cbnz	r0, 14104 <prov_dh_key_cb+0x28>
   140e4:	4b3f      	ldr	r3, [pc, #252]	; (141e4 <prov_dh_key_cb+0x108>)
   140e6:	4940      	ldr	r1, [pc, #256]	; (141e8 <prov_dh_key_cb+0x10c>)
		BT_ERR("DHKey generation failed");
   140e8:	4840      	ldr	r0, [pc, #256]	; (141ec <prov_dh_key_cb+0x110>)
   140ea:	1ac9      	subs	r1, r1, r3
   140ec:	08c9      	lsrs	r1, r1, #3
   140ee:	0189      	lsls	r1, r1, #6
   140f0:	f041 0101 	orr.w	r1, r1, #1
   140f4:	f00d fcf9 	bl	21aea <log_0>
	prov_send_fail_msg(reason);
   140f8:	2007      	movs	r0, #7
}
   140fa:	b017      	add	sp, #92	; 0x5c
   140fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	prov_send_fail_msg(reason);
   14100:	f7ff bc9a 	b.w	13a38 <prov_send_fail_msg>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14104:	4d3a      	ldr	r5, [pc, #232]	; (141f0 <prov_dh_key_cb+0x114>)
	sys_memcpy_swap(bt_mesh_prov_link.dhkey, dhkey, BT_DH_KEY_LEN);
   14106:	483b      	ldr	r0, [pc, #236]	; (141f4 <prov_dh_key_cb+0x118>)
   14108:	f012 fc94 	bl	26a34 <sys_memcpy_swap.constprop.0>
   1410c:	f3bf 8f5b 	dmb	ish
   14110:	e855 3f00 	ldrex	r3, [r5]
   14114:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
   14118:	e845 2100 	strex	r1, r2, [r5]
   1411c:	2900      	cmp	r1, #0
   1411e:	d1f7      	bne.n	14110 <prov_dh_key_cb+0x34>
   14120:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_clear_bit(bt_mesh_prov_link.flags, WAIT_DH_KEY) &&
   14124:	049c      	lsls	r4, r3, #18
   14126:	d408      	bmi.n	1413a <prov_dh_key_cb+0x5e>
   14128:	f7ff ff30 	bl	13f8c <atomic_get.constprop.0>
   1412c:	0640      	lsls	r0, r0, #25
   1412e:	d504      	bpl.n	1413a <prov_dh_key_cb+0x5e>
}
   14130:	b017      	add	sp, #92	; 0x5c
   14132:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		send_confirm();
   14136:	f7ff bcad 	b.w	13a94 <send_confirm>
   1413a:	f7ff ff27 	bl	13f8c <atomic_get.constprop.0>
	} else if (!atomic_test_bit(bt_mesh_prov_link.flags, OOB_PUB_KEY)) {
   1413e:	0641      	lsls	r1, r0, #25
   14140:	d416      	bmi.n	14170 <prov_dh_key_cb+0x94>
	PROV_BUF(buf, PDU_LEN_PUB_KEY);
   14142:	ab04      	add	r3, sp, #16
   14144:	f44f 028c 	mov.w	r2, #4587520	; 0x460000
   14148:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1414c:	9301      	str	r3, [sp, #4]
	key = bt_pub_key_get();
   1414e:	f7f3 fd47 	bl	7be0 <bt_pub_key_get>
	if (!key) {
   14152:	4604      	mov	r4, r0
   14154:	b970      	cbnz	r0, 14174 <prov_dh_key_cb+0x98>
   14156:	4b23      	ldr	r3, [pc, #140]	; (141e4 <prov_dh_key_cb+0x108>)
   14158:	4923      	ldr	r1, [pc, #140]	; (141e8 <prov_dh_key_cb+0x10c>)
		BT_ERR("No public key available");
   1415a:	4827      	ldr	r0, [pc, #156]	; (141f8 <prov_dh_key_cb+0x11c>)
   1415c:	1ac9      	subs	r1, r1, r3
   1415e:	08c9      	lsrs	r1, r1, #3
   14160:	0189      	lsls	r1, r1, #6
   14162:	f041 0101 	orr.w	r1, r1, #1
   14166:	f00d fcc0 	bl	21aea <log_0>
	prov_send_fail_msg(reason);
   1416a:	2007      	movs	r0, #7
   1416c:	f7ff fc64 	bl	13a38 <prov_send_fail_msg>
}
   14170:	b017      	add	sp, #92	; 0x5c
   14172:	bd30      	pop	{r4, r5, pc}
	bt_mesh_prov_buf_init(&buf, PROV_PUB_KEY);
   14174:	2103      	movs	r1, #3
   14176:	a801      	add	r0, sp, #4
   14178:	f012 fc4e 	bl	26a18 <bt_mesh_prov_buf_init>
	sys_memcpy_swap(net_buf_simple_add(&buf, BT_PUB_KEY_COORD_LEN), key, BT_PUB_KEY_COORD_LEN);
   1417c:	2120      	movs	r1, #32
   1417e:	a801      	add	r0, sp, #4
   14180:	f014 f862 	bl	28248 <net_buf_simple_add>
   14184:	4621      	mov	r1, r4
   14186:	f012 fc55 	bl	26a34 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(net_buf_simple_add(&buf, BT_PUB_KEY_COORD_LEN), &key[BT_PUB_KEY_COORD_LEN],
   1418a:	2120      	movs	r1, #32
   1418c:	a801      	add	r0, sp, #4
   1418e:	f014 f85b 	bl	28248 <net_buf_simple_add>
   14192:	f104 0120 	add.w	r1, r4, #32
   14196:	f012 fc4d 	bl	26a34 <sys_memcpy_swap.constprop.0>
	memcpy(bt_mesh_prov_link.conf_inputs.pub_key_device, &buf.data[1], PDU_LEN_PUB_KEY);
   1419a:	9901      	ldr	r1, [sp, #4]
   1419c:	4817      	ldr	r0, [pc, #92]	; (141fc <prov_dh_key_cb+0x120>)
   1419e:	3101      	adds	r1, #1
   141a0:	2240      	movs	r2, #64	; 0x40
   141a2:	f00f fe01 	bl	23da8 <memcpy>
	if (bt_mesh_prov_send(&buf, public_key_sent)) {
   141a6:	4916      	ldr	r1, [pc, #88]	; (14200 <prov_dh_key_cb+0x124>)
   141a8:	a801      	add	r0, sp, #4
   141aa:	f7ff fc0b 	bl	139c4 <bt_mesh_prov_send>
   141ae:	b150      	cbz	r0, 141c6 <prov_dh_key_cb+0xea>
   141b0:	4b0c      	ldr	r3, [pc, #48]	; (141e4 <prov_dh_key_cb+0x108>)
   141b2:	490d      	ldr	r1, [pc, #52]	; (141e8 <prov_dh_key_cb+0x10c>)
		BT_ERR("Failed to send Public Key");
   141b4:	4813      	ldr	r0, [pc, #76]	; (14204 <prov_dh_key_cb+0x128>)
   141b6:	1ac9      	subs	r1, r1, r3
   141b8:	08c9      	lsrs	r1, r1, #3
   141ba:	0189      	lsls	r1, r1, #6
   141bc:	f041 0101 	orr.w	r1, r1, #1
   141c0:	f00d fc93 	bl	21aea <log_0>
		return;
   141c4:	e7d4      	b.n	14170 <prov_dh_key_cb+0x94>
   141c6:	f7ff fee1 	bl	13f8c <atomic_get.constprop.0>
	if (atomic_test_bit(bt_mesh_prov_link.flags, WAIT_NUMBER) ||
   141ca:	0742      	lsls	r2, r0, #29
   141cc:	d403      	bmi.n	141d6 <prov_dh_key_cb+0xfa>
   141ce:	f7ff fedd 	bl	13f8c <atomic_get.constprop.0>
   141d2:	0703      	lsls	r3, r0, #28
   141d4:	d503      	bpl.n	141de <prov_dh_key_cb+0x102>
		bt_mesh_prov_link.expect = PROV_NO_PDU; /* Wait for input */
   141d6:	23ff      	movs	r3, #255	; 0xff
   141d8:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
   141dc:	e7c8      	b.n	14170 <prov_dh_key_cb+0x94>
		bt_mesh_prov_link.expect = PROV_CONFIRM;
   141de:	2305      	movs	r3, #5
   141e0:	e7fa      	b.n	141d8 <prov_dh_key_cb+0xfc>
   141e2:	bf00      	nop
   141e4:	00029870 	.word	0x00029870
   141e8:	00029a18 	.word	0x00029a18
   141ec:	0002e751 	.word	0x0002e751
   141f0:	20002368 	.word	0x20002368
   141f4:	20002387 	.word	0x20002387
   141f8:	0002e769 	.word	0x0002e769
   141fc:	20002439 	.word	0x20002439
   14200:	00014271 	.word	0x00014271
   14204:	0002e781 	.word	0x0002e781

00014208 <prov_pub_key>:
{
   14208:	b510      	push	{r4, lr}
   1420a:	4601      	mov	r1, r0
	memcpy(bt_mesh_prov_link.conf_inputs.pub_key_provisioner, data, PDU_LEN_PUB_KEY);
   1420c:	2240      	movs	r2, #64	; 0x40
   1420e:	4813      	ldr	r0, [pc, #76]	; (1425c <prov_pub_key+0x54>)
   14210:	f00f fdca 	bl	23da8 <memcpy>
	} else if (!bt_pub_key_get()) {
   14214:	f7f3 fce4 	bl	7be0 <bt_pub_key_get>
   14218:	b9d8      	cbnz	r0, 14252 <prov_pub_key+0x4a>
		bt_mesh_prov_link.bearer->clear_tx();
   1421a:	4c11      	ldr	r4, [pc, #68]	; (14260 <prov_pub_key+0x58>)
   1421c:	6863      	ldr	r3, [r4, #4]
   1421e:	68db      	ldr	r3, [r3, #12]
   14220:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14222:	f3bf 8f5b 	dmb	ish
   14226:	e854 3f00 	ldrex	r3, [r4]
   1422a:	f043 0301 	orr.w	r3, r3, #1
   1422e:	e844 3200 	strex	r2, r3, [r4]
   14232:	2a00      	cmp	r2, #0
   14234:	d1f7      	bne.n	14226 <prov_pub_key+0x1e>
   14236:	f3bf 8f5b 	dmb	ish
   1423a:	490a      	ldr	r1, [pc, #40]	; (14264 <prov_pub_key+0x5c>)
   1423c:	4b0a      	ldr	r3, [pc, #40]	; (14268 <prov_pub_key+0x60>)
		BT_WARN("Waiting for local public key");
   1423e:	480b      	ldr	r0, [pc, #44]	; (1426c <prov_pub_key+0x64>)
   14240:	1ac9      	subs	r1, r1, r3
   14242:	08c9      	lsrs	r1, r1, #3
   14244:	0189      	lsls	r1, r1, #6
}
   14246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Waiting for local public key");
   1424a:	f041 0102 	orr.w	r1, r1, #2
   1424e:	f00d bc4c 	b.w	21aea <log_0>
}
   14252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prov_dh_key_gen();
   14256:	f7ff be6f 	b.w	13f38 <prov_dh_key_gen>
   1425a:	bf00      	nop
   1425c:	200023f9 	.word	0x200023f9
   14260:	20002368 	.word	0x20002368
   14264:	00029a18 	.word	0x00029a18
   14268:	00029870 	.word	0x00029870
   1426c:	0002e79b 	.word	0x0002e79b

00014270 <public_key_sent>:
{
   14270:	b508      	push	{r3, lr}
   14272:	4b0b      	ldr	r3, [pc, #44]	; (142a0 <public_key_sent+0x30>)
   14274:	f3bf 8f5b 	dmb	ish
   14278:	e853 2f00 	ldrex	r2, [r3]
   1427c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   14280:	e843 2100 	strex	r1, r2, [r3]
   14284:	2900      	cmp	r1, #0
   14286:	d1f7      	bne.n	14278 <public_key_sent+0x8>
   14288:	f3bf 8f5b 	dmb	ish
   1428c:	f7ff fe7e 	bl	13f8c <atomic_get.constprop.0>
	if (atomic_test_bit(bt_mesh_prov_link.flags, INPUT_COMPLETE)) {
   14290:	0583      	lsls	r3, r0, #22
   14292:	d503      	bpl.n	1429c <public_key_sent+0x2c>
}
   14294:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		send_input_complete();
   14298:	f7ff bba4 	b.w	139e4 <send_input_complete>
}
   1429c:	bd08      	pop	{r3, pc}
   1429e:	bf00      	nop
   142a0:	20002368 	.word	0x20002368

000142a4 <prov_confirm>:
{
   142a4:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   142a6:	4c16      	ldr	r4, [pc, #88]	; (14300 <prov_confirm+0x5c>)
   142a8:	4601      	mov	r1, r0
	memcpy(bt_mesh_prov_link.conf, data, 16);
   142aa:	2210      	movs	r2, #16
   142ac:	4815      	ldr	r0, [pc, #84]	; (14304 <prov_confirm+0x60>)
   142ae:	f00f fd7b 	bl	23da8 <memcpy>
   142b2:	f3bf 8f5b 	dmb	ish
   142b6:	e854 2f00 	ldrex	r2, [r4]
   142ba:	f022 0310 	bic.w	r3, r2, #16
   142be:	e844 3100 	strex	r1, r3, [r4]
   142c2:	2900      	cmp	r1, #0
   142c4:	d1f7      	bne.n	142b6 <prov_confirm+0x12>
   142c6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_mesh_prov_link.flags,
   142ca:	06d2      	lsls	r2, r2, #27
   142cc:	d504      	bpl.n	142d8 <prov_confirm+0x34>
	    bt_mesh_prov->input_complete) {
   142ce:	4b0e      	ldr	r3, [pc, #56]	; (14308 <prov_confirm+0x64>)
   142d0:	681b      	ldr	r3, [r3, #0]
   142d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				      NOTIFY_INPUT_COMPLETE) &&
   142d4:	b103      	cbz	r3, 142d8 <prov_confirm+0x34>
		bt_mesh_prov->input_complete();
   142d6:	4798      	blx	r3
   142d8:	f3bf 8f5b 	dmb	ish
   142dc:	e854 3f00 	ldrex	r3, [r4]
   142e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
   142e4:	e844 2100 	strex	r1, r2, [r4]
   142e8:	2900      	cmp	r1, #0
   142ea:	d1f7      	bne.n	142dc <prov_confirm+0x38>
   142ec:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_clear_bit(bt_mesh_prov_link.flags, WAIT_DH_KEY)) {
   142f0:	049b      	lsls	r3, r3, #18
   142f2:	d403      	bmi.n	142fc <prov_confirm+0x58>
}
   142f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		send_confirm();
   142f8:	f7ff bbcc 	b.w	13a94 <send_confirm>
}
   142fc:	bd10      	pop	{r4, pc}
   142fe:	bf00      	nop
   14300:	20002368 	.word	0x20002368
   14304:	200023a8 	.word	0x200023a8
   14308:	20002364 	.word	0x20002364

0001430c <pub_key_ready>:
	if (!pkey) {
   1430c:	b948      	cbnz	r0, 14322 <pub_key_ready+0x16>
   1430e:	490e      	ldr	r1, [pc, #56]	; (14348 <pub_key_ready+0x3c>)
   14310:	4b0e      	ldr	r3, [pc, #56]	; (1434c <pub_key_ready+0x40>)
		BT_WARN("Public key not available");
   14312:	480f      	ldr	r0, [pc, #60]	; (14350 <pub_key_ready+0x44>)
   14314:	1ac9      	subs	r1, r1, r3
   14316:	08c9      	lsrs	r1, r1, #3
   14318:	0189      	lsls	r1, r1, #6
   1431a:	f041 0102 	orr.w	r1, r1, #2
   1431e:	f00d bbe4 	b.w	21aea <log_0>
   14322:	4b0c      	ldr	r3, [pc, #48]	; (14354 <pub_key_ready+0x48>)
   14324:	f3bf 8f5b 	dmb	ish
   14328:	e853 2f00 	ldrex	r2, [r3]
   1432c:	f022 0101 	bic.w	r1, r2, #1
   14330:	e843 1000 	strex	r0, r1, [r3]
   14334:	2800      	cmp	r0, #0
   14336:	d1f7      	bne.n	14328 <pub_key_ready+0x1c>
   14338:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_mesh_prov_link.flags, WAIT_PUB_KEY)) {
   1433c:	07d3      	lsls	r3, r2, #31
   1433e:	d501      	bpl.n	14344 <pub_key_ready+0x38>
		prov_dh_key_gen();
   14340:	f7ff bdfa 	b.w	13f38 <prov_dh_key_gen>
}
   14344:	4770      	bx	lr
   14346:	bf00      	nop
   14348:	00029a18 	.word	0x00029a18
   1434c:	00029870 	.word	0x00029870
   14350:	0002e386 	.word	0x0002e386
   14354:	20002368 	.word	0x20002368

00014358 <bt_mesh_prov_enable>:
		[PROV_DATA] = prov_data,
	},
};

int bt_mesh_prov_enable(bt_mesh_prov_bearer_t bearers)
{
   14358:	b570      	push	{r4, r5, r6, lr}
   1435a:	b086      	sub	sp, #24
   1435c:	4606      	mov	r6, r0
	if (bt_mesh_is_provisioned()) {
   1435e:	f7f7 f925 	bl	b5ac <bt_mesh_is_provisioned>
   14362:	4605      	mov	r5, r0
   14364:	2800      	cmp	r0, #0
   14366:	d136      	bne.n	143d6 <bt_mesh_prov_enable+0x7e>
		return -EALREADY;
	}

	if (IS_ENABLED(CONFIG_BT_DEBUG)) {
		struct bt_uuid_128 uuid = { .uuid = { BT_UUID_TYPE_128 } };
   14368:	4601      	mov	r1, r0
   1436a:	2211      	movs	r2, #17
   1436c:	a801      	add	r0, sp, #4
   1436e:	f00f fd26 	bl	23dbe <memset>
   14372:	2302      	movs	r3, #2
   14374:	f88d 3004 	strb.w	r3, [sp, #4]

		memcpy(uuid.val, bt_mesh_prov->uuid, 16);
   14378:	4b18      	ldr	r3, [pc, #96]	; (143dc <bt_mesh_prov_enable+0x84>)
   1437a:	4c19      	ldr	r4, [pc, #100]	; (143e0 <bt_mesh_prov_enable+0x88>)
   1437c:	681b      	ldr	r3, [r3, #0]
   1437e:	2210      	movs	r2, #16
   14380:	6819      	ldr	r1, [r3, #0]
   14382:	f10d 0005 	add.w	r0, sp, #5
   14386:	f00f fd0f 	bl	23da8 <memcpy>
   1438a:	4a16      	ldr	r2, [pc, #88]	; (143e4 <bt_mesh_prov_enable+0x8c>)
		BT_INFO("Device UUID: %s", bt_uuid_str(&uuid.uuid));
   1438c:	a801      	add	r0, sp, #4
   1438e:	1aa4      	subs	r4, r4, r2
   14390:	f7f0 fd4e 	bl	4e30 <bt_uuid_str_real>
   14394:	f7ee fba0 	bl	2ad8 <z_log_strdup>
   14398:	08e4      	lsrs	r4, r4, #3
   1439a:	01a4      	lsls	r4, r4, #6
   1439c:	f044 0403 	orr.w	r4, r4, #3
   143a0:	4601      	mov	r1, r0
   143a2:	4622      	mov	r2, r4
   143a4:	4810      	ldr	r0, [pc, #64]	; (143e8 <bt_mesh_prov_enable+0x90>)
   143a6:	f00d fbad 	bl	21b04 <log_1>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_ADV) &&
   143aa:	07f2      	lsls	r2, r6, #31
   143ac:	d505      	bpl.n	143ba <bt_mesh_prov_enable+0x62>
	    (bearers & BT_MESH_PROV_ADV)) {
		pb_adv.link_accept(bt_mesh_prov_bearer_cb_get(), NULL);
   143ae:	f7ff fac9 	bl	13944 <bt_mesh_prov_bearer_cb_get>
   143b2:	4b0e      	ldr	r3, [pc, #56]	; (143ec <bt_mesh_prov_enable+0x94>)
   143b4:	4629      	mov	r1, r5
   143b6:	685b      	ldr	r3, [r3, #4]
   143b8:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT) &&
   143ba:	07b3      	lsls	r3, r6, #30
   143bc:	d505      	bpl.n	143ca <bt_mesh_prov_enable+0x72>
	    (bearers & BT_MESH_PROV_GATT)) {
		pb_gatt.link_accept(bt_mesh_prov_bearer_cb_get(), NULL);
   143be:	f7ff fac1 	bl	13944 <bt_mesh_prov_bearer_cb_get>
   143c2:	4b0b      	ldr	r3, [pc, #44]	; (143f0 <bt_mesh_prov_enable+0x98>)
   143c4:	2100      	movs	r1, #0
   143c6:	685b      	ldr	r3, [r3, #4]
   143c8:	4798      	blx	r3
	}

	bt_mesh_prov_link.role = &role_device;
   143ca:	4b0a      	ldr	r3, [pc, #40]	; (143f4 <bt_mesh_prov_enable+0x9c>)
   143cc:	4a0a      	ldr	r2, [pc, #40]	; (143f8 <bt_mesh_prov_enable+0xa0>)
   143ce:	609a      	str	r2, [r3, #8]

	return 0;
   143d0:	2000      	movs	r0, #0
}
   143d2:	b006      	add	sp, #24
   143d4:	bd70      	pop	{r4, r5, r6, pc}
		return -EALREADY;
   143d6:	f06f 0077 	mvn.w	r0, #119	; 0x77
   143da:	e7fa      	b.n	143d2 <bt_mesh_prov_enable+0x7a>
   143dc:	20002364 	.word	0x20002364
   143e0:	00029a18 	.word	0x00029a18
   143e4:	00029870 	.word	0x00029870
   143e8:	0002e7b8 	.word	0x0002e7b8
   143ec:	0002a574 	.word	0x0002a574
   143f0:	0002a58c 	.word	0x0002a58c
   143f4:	20002368 	.word	0x20002368
   143f8:	0002a514 	.word	0x0002a514

000143fc <prov_failed>:
{
	return atomic_test_bit(link.flags, ADV_ACK_PENDING);
}

static void prov_failed(uint8_t err)
{
   143fc:	b510      	push	{r4, lr}
	BT_DBG("%u", err);
	link.cb->error(&pb_adv, link.cb_data, err);
   143fe:	4c06      	ldr	r4, [pc, #24]	; (14418 <prov_failed+0x1c>)
   14400:	68a3      	ldr	r3, [r4, #8]
   14402:	68e1      	ldr	r1, [r4, #12]
   14404:	689b      	ldr	r3, [r3, #8]
{
   14406:	4602      	mov	r2, r0
	link.cb->error(&pb_adv, link.cb_data, err);
   14408:	4804      	ldr	r0, [pc, #16]	; (1441c <prov_failed+0x20>)
   1440a:	4798      	blx	r3
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1440c:	1d20      	adds	r0, r4, #4
   1440e:	2108      	movs	r1, #8
	atomic_set_bit(link.flags, ADV_LINK_INVALID);
}
   14410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   14414:	f012 bb18 	b.w	26a48 <atomic_or>
   14418:	200003d8 	.word	0x200003d8
   1441c:	0002a574 	.word	0x0002a574

00014420 <send_reliable>:
/*******************************************************************************
 * TX
 ******************************************************************************/

static void send_reliable(void)
{
   14420:	b570      	push	{r4, r5, r6, lr}
   14422:	4d0c      	ldr	r5, [pc, #48]	; (14454 <send_reliable+0x34>)
	int i;

	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   14424:	2400      	movs	r4, #0
		struct net_buf *buf = link.tx.buf[i];
   14426:	f855 0b04 	ldr.w	r0, [r5], #4

		if (!buf) {
   1442a:	b150      	cbz	r0, 14442 <send_reliable+0x22>
			break;
		}

		if (BT_MESH_ADV(buf)->busy) {
   1442c:	6943      	ldr	r3, [r0, #20]
   1442e:	7a1a      	ldrb	r2, [r3, #8]
   14430:	f012 0208 	ands.w	r2, r2, #8
   14434:	d102      	bne.n	1443c <send_reliable+0x1c>
			continue;
		}

		BT_DBG("%u bytes: %s", buf->len, bt_hex(buf->data, buf->len));

		bt_mesh_adv_send(buf, NULL, NULL);
   14436:	4611      	mov	r1, r2
   14438:	f7f7 fbc4 	bl	bbc4 <bt_mesh_adv_send>
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   1443c:	3401      	adds	r4, #1
   1443e:	2c03      	cmp	r4, #3
   14440:	d1f1      	bne.n	14426 <send_reliable+0x6>
	}

	k_work_reschedule(&link.tx.retransmit, RETRANSMIT_TIMEOUT);
}
   14442:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&link.tx.retransmit, RETRANSMIT_TIMEOUT);
   14446:	4804      	ldr	r0, [pc, #16]	; (14458 <send_reliable+0x38>)
   14448:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1444c:	2300      	movs	r3, #0
   1444e:	f00b bfe9 	b.w	20424 <k_work_reschedule>
   14452:	bf00      	nop
   14454:	200003fc 	.word	0x200003fc
   14458:	20000410 	.word	0x20000410

0001445c <free_segments>:
{
   1445c:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   1445e:	2400      	movs	r4, #0
   14460:	4d08      	ldr	r5, [pc, #32]	; (14484 <free_segments+0x28>)
		link.tx.buf[i] = NULL;
   14462:	4626      	mov	r6, r4
		struct net_buf *buf = link.tx.buf[i];
   14464:	f855 0b04 	ldr.w	r0, [r5], #4
		if (!buf) {
   14468:	b158      	cbz	r0, 14482 <free_segments+0x26>
		BT_MESH_ADV(buf)->busy = 0U;
   1446a:	6943      	ldr	r3, [r0, #20]
		link.tx.buf[i] = NULL;
   1446c:	f845 6c04 	str.w	r6, [r5, #-4]
		BT_MESH_ADV(buf)->busy = 0U;
   14470:	7a1a      	ldrb	r2, [r3, #8]
   14472:	f366 02c3 	bfi	r2, r6, #3, #1
   14476:	721a      	strb	r2, [r3, #8]
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   14478:	3401      	adds	r4, #1
		net_buf_unref(buf);
   1447a:	f009 fc73 	bl	1dd64 <net_buf_unref>
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   1447e:	2c03      	cmp	r4, #3
   14480:	d1f0      	bne.n	14464 <free_segments+0x8>
}
   14482:	bd70      	pop	{r4, r5, r6, pc}
   14484:	200003fc 	.word	0x200003fc

00014488 <prov_clear_tx>:
{
   14488:	b508      	push	{r3, lr}
	(void)k_work_cancel_delayable(&link.tx.retransmit);
   1448a:	4803      	ldr	r0, [pc, #12]	; (14498 <prov_clear_tx+0x10>)
   1448c:	f014 fca9 	bl	28de2 <k_work_cancel_delayable>
}
   14490:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	free_segments();
   14494:	f7ff bfe2 	b.w	1445c <free_segments>
   14498:	20000410 	.word	0x20000410

0001449c <bearer_ctl_send_unacked>:

	return 0;
}

static int bearer_ctl_send_unacked(struct net_buf *buf)
{
   1449c:	b510      	push	{r4, lr}
	if (!buf) {
   1449e:	4604      	mov	r4, r0
   144a0:	b188      	cbz	r0, 144c6 <bearer_ctl_send_unacked+0x2a>
		return -ENOMEM;
	}

	prov_clear_tx();
   144a2:	f7ff fff1 	bl	14488 <prov_clear_tx>
	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
   144a6:	2300      	movs	r3, #0
   144a8:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   144ac:	4807      	ldr	r0, [pc, #28]	; (144cc <bearer_ctl_send_unacked+0x30>)
   144ae:	f00b ffb9 	bl	20424 <k_work_reschedule>

	bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
   144b2:	4907      	ldr	r1, [pc, #28]	; (144d0 <bearer_ctl_send_unacked+0x34>)
   144b4:	2200      	movs	r2, #0
   144b6:	4620      	mov	r0, r4
   144b8:	f7f7 fb84 	bl	bbc4 <bt_mesh_adv_send>
	net_buf_unref(buf);
   144bc:	4620      	mov	r0, r4
   144be:	f009 fc51 	bl	1dd64 <net_buf_unref>

	return 0;
   144c2:	2000      	movs	r0, #0
}
   144c4:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   144c6:	f06f 000b 	mvn.w	r0, #11
   144ca:	e7fb      	b.n	144c4 <bearer_ctl_send_unacked+0x28>
   144cc:	20000440 	.word	0x20000440
   144d0:	20000a04 	.word	0x20000a04

000144d4 <adv_buf_create>:
{
   144d4:	b510      	push	{r4, lr}
	buf = bt_mesh_adv_create(BT_MESH_ADV_PROV,
   144d6:	f040 0108 	orr.w	r1, r0, #8
   144da:	f243 3234 	movw	r2, #13108	; 0x3334
   144de:	2300      	movs	r3, #0
   144e0:	2000      	movs	r0, #0
   144e2:	f7f7 fb5f 	bl	bba4 <bt_mesh_adv_create>
	if (!buf) {
   144e6:	4604      	mov	r4, r0
   144e8:	b948      	cbnz	r0, 144fe <adv_buf_create+0x2a>
   144ea:	4906      	ldr	r1, [pc, #24]	; (14504 <adv_buf_create+0x30>)
   144ec:	4b06      	ldr	r3, [pc, #24]	; (14508 <adv_buf_create+0x34>)
		BT_ERR("Out of provisioning buffers");
   144ee:	4807      	ldr	r0, [pc, #28]	; (1450c <adv_buf_create+0x38>)
   144f0:	1ac9      	subs	r1, r1, r3
   144f2:	08c9      	lsrs	r1, r1, #3
   144f4:	0189      	lsls	r1, r1, #6
   144f6:	f041 0101 	orr.w	r1, r1, #1
   144fa:	f00d faf6 	bl	21aea <log_0>
}
   144fe:	4620      	mov	r0, r4
   14500:	bd10      	pop	{r4, pc}
   14502:	bf00      	nop
   14504:	00029a00 	.word	0x00029a00
   14508:	00029870 	.word	0x00029870
   1450c:	0002e7dc 	.word	0x0002e7dc

00014510 <atomic_get.constprop.0>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14510:	4b03      	ldr	r3, [pc, #12]	; (14520 <atomic_get.constprop.0+0x10>)
   14512:	f3bf 8f5b 	dmb	ish
   14516:	6858      	ldr	r0, [r3, #4]
   14518:	f3bf 8f5b 	dmb	ish
}
   1451c:	4770      	bx	lr
   1451e:	bf00      	nop
   14520:	200003d8 	.word	0x200003d8

00014524 <prov_link_accept>:

	return bearer_ctl_send(ctl_buf_create(LINK_OPEN, uuid, 16, RETRANSMITS_RELIABLE));
}

static int prov_link_accept(const struct prov_bearer_cb *cb, void *cb_data)
{
   14524:	b570      	push	{r4, r5, r6, lr}
   14526:	4606      	mov	r6, r0
   14528:	460d      	mov	r5, r1
	int err;

	err = bt_mesh_adv_enable();
   1452a:	f7fe ff2b 	bl	13384 <bt_mesh_adv_enable>
	if (err) {
   1452e:	4604      	mov	r4, r0
   14530:	b158      	cbz	r0, 1454a <prov_link_accept+0x26>
   14532:	4910      	ldr	r1, [pc, #64]	; (14574 <prov_link_accept+0x50>)
   14534:	4b10      	ldr	r3, [pc, #64]	; (14578 <prov_link_accept+0x54>)
		BT_ERR("Failed enabling advertiser");
   14536:	4811      	ldr	r0, [pc, #68]	; (1457c <prov_link_accept+0x58>)
   14538:	1ac9      	subs	r1, r1, r3
   1453a:	08c9      	lsrs	r1, r1, #3
   1453c:	0189      	lsls	r1, r1, #6
   1453e:	f041 0101 	orr.w	r1, r1, #1
   14542:	f00d fad2 	bl	21aea <log_0>
	bt_mesh_scan_enable();
	/* Enable unprovisioned beacon sending */
	bt_mesh_beacon_enable();

	return 0;
}
   14546:	4620      	mov	r0, r4
   14548:	bd70      	pop	{r4, r5, r6, pc}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1454a:	f7ff ffe1 	bl	14510 <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
   1454e:	07c3      	lsls	r3, r0, #31
   14550:	d40c      	bmi.n	1456c <prov_link_accept+0x48>
	link.rx.id = XACT_ID_MAX;
   14552:	4b0b      	ldr	r3, [pc, #44]	; (14580 <prov_link_accept+0x5c>)
   14554:	227f      	movs	r2, #127	; 0x7f
   14556:	741a      	strb	r2, [r3, #16]
	link.tx.id = XACT_ID_NVAL;
   14558:	22ff      	movs	r2, #255	; 0xff
	link.cb_data = cb_data;
   1455a:	e9c3 6502 	strd	r6, r5, [r3, #8]
	link.tx.id = XACT_ID_NVAL;
   1455e:	f883 2020 	strb.w	r2, [r3, #32]
	bt_mesh_scan_enable();
   14562:	f7f7 fb45 	bl	bbf0 <bt_mesh_scan_enable>
	bt_mesh_beacon_enable();
   14566:	f7f7 fe5f 	bl	c228 <bt_mesh_beacon_enable>
	return 0;
   1456a:	e7ec      	b.n	14546 <prov_link_accept+0x22>
		return -EBUSY;
   1456c:	f06f 040f 	mvn.w	r4, #15
   14570:	e7e9      	b.n	14546 <prov_link_accept+0x22>
   14572:	bf00      	nop
   14574:	00029a00 	.word	0x00029a00
   14578:	00029870 	.word	0x00029870
   1457c:	0002c680 	.word	0x0002c680
   14580:	200003d8 	.word	0x200003d8

00014584 <gen_prov_ack>:
{
   14584:	b510      	push	{r4, lr}
	if (!link.tx.buf[0]) {
   14586:	4c0b      	ldr	r4, [pc, #44]	; (145b4 <gen_prov_ack+0x30>)
   14588:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1458a:	b18b      	cbz	r3, 145b0 <gen_prov_ack+0x2c>
	if (rx->xact_id == link.tx.id) {
   1458c:	7902      	ldrb	r2, [r0, #4]
   1458e:	f894 3020 	ldrb.w	r3, [r4, #32]
   14592:	429a      	cmp	r2, r3
   14594:	d10c      	bne.n	145b0 <gen_prov_ack+0x2c>
   14596:	f7ff ffbb 	bl	14510 <atomic_get.constprop.0>
		if (!atomic_test_bit(link.flags, ADV_LINK_CLOSING)) {
   1459a:	0743      	lsls	r3, r0, #29
   1459c:	d401      	bmi.n	145a2 <gen_prov_ack+0x1e>
			prov_clear_tx();
   1459e:	f7ff ff73 	bl	14488 <prov_clear_tx>
		if (link.tx.cb) {
   145a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   145a4:	b123      	cbz	r3, 145b0 <gen_prov_ack+0x2c>
			link.tx.cb(0, link.tx.cb_data);
   145a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
   145a8:	2000      	movs	r0, #0
}
   145aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			link.tx.cb(0, link.tx.cb_data);
   145ae:	4718      	bx	r3
}
   145b0:	bd10      	pop	{r4, pc}
   145b2:	bf00      	nop
   145b4:	200003d8 	.word	0x200003d8

000145b8 <reset_adv_link>:
{
   145b8:	b510      	push	{r4, lr}
	(void)k_work_cancel_delayable(&link.prot_timer);
   145ba:	4c18      	ldr	r4, [pc, #96]	; (1461c <reset_adv_link+0x64>)
	prov_clear_tx();
   145bc:	f7ff ff64 	bl	14488 <prov_clear_tx>
	(void)k_work_cancel_delayable(&link.prot_timer);
   145c0:	f104 0068 	add.w	r0, r4, #104	; 0x68
   145c4:	f014 fc0d 	bl	28de2 <k_work_cancel_delayable>
   145c8:	f7ff ffa2 	bl	14510 <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, ADV_PROVISIONER)) {
   145cc:	0683      	lsls	r3, r0, #26
   145ce:	f3c0 1240 	ubfx	r2, r0, #5, #1
   145d2:	d510      	bpl.n	145f6 <reset_adv_link+0x3e>
		(void)memset(&link, 0, offsetof(struct pb_adv, tx.retransmit));
   145d4:	2238      	movs	r2, #56	; 0x38
   145d6:	2100      	movs	r1, #0
   145d8:	4620      	mov	r0, r4
   145da:	f00f fbf0 	bl	23dbe <memset>
		link.rx.id = XACT_ID_NVAL;
   145de:	23ff      	movs	r3, #255	; 0xff
   145e0:	7423      	strb	r3, [r4, #16]
	link.tx.pending_ack = XACT_ID_NVAL;
   145e2:	23ff      	movs	r3, #255	; 0xff
   145e4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	link.rx.buf = &rx_buf;
   145e8:	4b0d      	ldr	r3, [pc, #52]	; (14620 <reset_adv_link+0x68>)
   145ea:	6163      	str	r3, [r4, #20]
	buf->len  = 0U;
   145ec:	2200      	movs	r2, #0
   145ee:	809a      	strh	r2, [r3, #4]
	buf->data = buf->__buf;
   145f0:	689a      	ldr	r2, [r3, #8]
   145f2:	601a      	str	r2, [r3, #0]
}
   145f4:	bd10      	pop	{r4, pc}
		link.id = 0;
   145f6:	4623      	mov	r3, r4
   145f8:	f843 2b04 	str.w	r2, [r3], #4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   145fc:	f3bf 8f5b 	dmb	ish
   14600:	e853 1f00 	ldrex	r1, [r3]
   14604:	e843 2000 	strex	r0, r2, [r3]
   14608:	2800      	cmp	r0, #0
   1460a:	d1f9      	bne.n	14600 <reset_adv_link+0x48>
   1460c:	f3bf 8f5b 	dmb	ish
		link.rx.id = XACT_ID_MAX;
   14610:	237f      	movs	r3, #127	; 0x7f
   14612:	7423      	strb	r3, [r4, #16]
		link.tx.id = XACT_ID_NVAL;
   14614:	23ff      	movs	r3, #255	; 0xff
   14616:	f884 3020 	strb.w	r3, [r4, #32]
   1461a:	e7e2      	b.n	145e2 <reset_adv_link+0x2a>
   1461c:	200003d8 	.word	0x200003d8
   14620:	20000a0c 	.word	0x20000a0c

00014624 <close_link>:
{
   14624:	b570      	push	{r4, r5, r6, lr}
	const struct prov_bearer_cb *cb = link.cb;
   14626:	4b06      	ldr	r3, [pc, #24]	; (14640 <close_link+0x1c>)
	void *cb_data = link.cb_data;
   14628:	e9d3 6502 	ldrd	r6, r5, [r3, #8]
{
   1462c:	4604      	mov	r4, r0
	reset_adv_link();
   1462e:	f7ff ffc3 	bl	145b8 <reset_adv_link>
	cb->link_closed(&pb_adv, cb_data, reason);
   14632:	6873      	ldr	r3, [r6, #4]
   14634:	4803      	ldr	r0, [pc, #12]	; (14644 <close_link+0x20>)
   14636:	4622      	mov	r2, r4
   14638:	4629      	mov	r1, r5
}
   1463a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb->link_closed(&pb_adv, cb_data, reason);
   1463e:	4718      	bx	r3
   14640:	200003d8 	.word	0x200003d8
   14644:	0002a574 	.word	0x0002a574

00014648 <ctl_buf_create>:
{
   14648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1464c:	4605      	mov	r5, r0
	buf = adv_buf_create(retransmits);
   1464e:	4618      	mov	r0, r3
{
   14650:	460f      	mov	r7, r1
   14652:	4690      	mov	r8, r2
	buf = adv_buf_create(retransmits);
   14654:	f7ff ff3e 	bl	144d4 <adv_buf_create>
	if (!buf) {
   14658:	4604      	mov	r4, r0
   1465a:	b1b0      	cbz	r0, 1468a <ctl_buf_create+0x42>
	net_buf_add_be32(buf, link.id);
   1465c:	4b0c      	ldr	r3, [pc, #48]	; (14690 <ctl_buf_create+0x48>)
	net_buf_simple_add_be32(&buf->b, val);
   1465e:	f100 0608 	add.w	r6, r0, #8
   14662:	6819      	ldr	r1, [r3, #0]
   14664:	4630      	mov	r0, r6
	net_buf_add_u8(buf, GPC_CTL(op));
   14666:	00ad      	lsls	r5, r5, #2
   14668:	f013 fe26 	bl	282b8 <net_buf_simple_add_be32>
   1466c:	f045 0503 	orr.w	r5, r5, #3
	net_buf_add_u8(buf, 0x00);
   14670:	2100      	movs	r1, #0
   14672:	4620      	mov	r0, r4
   14674:	f012 f9f7 	bl	26a66 <net_buf_add_u8.isra.0>
	net_buf_add_u8(buf, GPC_CTL(op));
   14678:	b2e9      	uxtb	r1, r5
   1467a:	4620      	mov	r0, r4
   1467c:	f012 f9f3 	bl	26a66 <net_buf_add_u8.isra.0>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14680:	4642      	mov	r2, r8
   14682:	4639      	mov	r1, r7
   14684:	4630      	mov	r0, r6
   14686:	f013 fde5 	bl	28254 <net_buf_simple_add_mem>
}
   1468a:	4620      	mov	r0, r4
   1468c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14690:	200003d8 	.word	0x200003d8

00014694 <gen_prov_ctl>:
{
   14694:	b570      	push	{r4, r5, r6, lr}
	switch (BEARER_CTL(rx->gpc)) {
   14696:	7944      	ldrb	r4, [r0, #5]
   14698:	08a4      	lsrs	r4, r4, #2
   1469a:	2c01      	cmp	r4, #1
{
   1469c:	4605      	mov	r5, r0
   1469e:	460a      	mov	r2, r1
	switch (BEARER_CTL(rx->gpc)) {
   146a0:	d050      	beq.n	14744 <gen_prov_ctl+0xb0>
   146a2:	2c02      	cmp	r4, #2
   146a4:	d063      	beq.n	1476e <gen_prov_ctl+0xda>
   146a6:	2c00      	cmp	r4, #0
   146a8:	d16f      	bne.n	1478a <gen_prov_ctl+0xf6>
	if (buf->len < 16) {
   146aa:	8889      	ldrh	r1, [r1, #4]
   146ac:	290f      	cmp	r1, #15
   146ae:	d80b      	bhi.n	146c8 <gen_prov_ctl+0x34>
   146b0:	4a3b      	ldr	r2, [pc, #236]	; (147a0 <gen_prov_ctl+0x10c>)
   146b2:	4b3c      	ldr	r3, [pc, #240]	; (147a4 <gen_prov_ctl+0x110>)
		BT_ERR("Too short bearer open message (len %u)", buf->len);
   146b4:	483c      	ldr	r0, [pc, #240]	; (147a8 <gen_prov_ctl+0x114>)
   146b6:	1ad2      	subs	r2, r2, r3
   146b8:	08d2      	lsrs	r2, r2, #3
   146ba:	0192      	lsls	r2, r2, #6
   146bc:	f042 0201 	orr.w	r2, r2, #1
}
   146c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unknown bearer opcode: 0x%02x", BEARER_CTL(rx->gpc));
   146c4:	f00d ba1e 	b.w	21b04 <log_1>
   146c8:	f7ff ff22 	bl	14510 <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
   146cc:	07c6      	lsls	r6, r0, #31
   146ce:	d50e      	bpl.n	146ee <gen_prov_ctl+0x5a>
		if (link.id != rx->link_id) {
   146d0:	4b36      	ldr	r3, [pc, #216]	; (147ac <gen_prov_ctl+0x118>)
   146d2:	681a      	ldr	r2, [r3, #0]
   146d4:	682b      	ldr	r3, [r5, #0]
   146d6:	429a      	cmp	r2, r3
   146d8:	d161      	bne.n	1479e <gen_prov_ctl+0x10a>
		(void)bearer_ctl_send_unacked(ctl_buf_create(LINK_ACK, NULL, 0, RETRANSMITS_ACK));
   146da:	4622      	mov	r2, r4
   146dc:	4621      	mov	r1, r4
   146de:	2302      	movs	r3, #2
   146e0:	2001      	movs	r0, #1
   146e2:	f7ff ffb1 	bl	14648 <ctl_buf_create>
}
   146e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		(void)bearer_ctl_send_unacked(ctl_buf_create(LINK_ACK, NULL, 0, RETRANSMITS_ACK));
   146ea:	f7ff bed7 	b.w	1449c <bearer_ctl_send_unacked>
	if (memcmp(buf->data, bt_mesh_prov_get()->uuid, 16)) {
   146ee:	6814      	ldr	r4, [r2, #0]
   146f0:	f7ff f916 	bl	13920 <bt_mesh_prov_get>
   146f4:	2210      	movs	r2, #16
   146f6:	6801      	ldr	r1, [r0, #0]
   146f8:	4620      	mov	r0, r4
   146fa:	f00f fb44 	bl	23d86 <memcmp>
   146fe:	4604      	mov	r4, r0
   14700:	2800      	cmp	r0, #0
   14702:	d14c      	bne.n	1479e <gen_prov_ctl+0x10a>
	link.id = rx->link_id;
   14704:	4e29      	ldr	r6, [pc, #164]	; (147ac <gen_prov_ctl+0x118>)
   14706:	682b      	ldr	r3, [r5, #0]
   14708:	4630      	mov	r0, r6
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1470a:	2101      	movs	r1, #1
   1470c:	f840 3b04 	str.w	r3, [r0], #4
   14710:	f012 f99a 	bl	26a48 <atomic_or>
	net_buf_simple_reset(link.rx.buf);
   14714:	6973      	ldr	r3, [r6, #20]
	buf->data = buf->__buf;
   14716:	689a      	ldr	r2, [r3, #8]
   14718:	601a      	str	r2, [r3, #0]
	buf->len  = 0U;
   1471a:	809c      	strh	r4, [r3, #4]
	err = bearer_ctl_send_unacked(ctl_buf_create(LINK_ACK, NULL, 0, RETRANSMITS_ACK));
   1471c:	4622      	mov	r2, r4
   1471e:	2302      	movs	r3, #2
   14720:	4621      	mov	r1, r4
   14722:	2001      	movs	r0, #1
   14724:	f7ff ff90 	bl	14648 <ctl_buf_create>
   14728:	f7ff feb8 	bl	1449c <bearer_ctl_send_unacked>
	if (err) {
   1472c:	b118      	cbz	r0, 14736 <gen_prov_ctl+0xa2>
}
   1472e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		reset_adv_link();
   14732:	f7ff bf41 	b.w	145b8 <reset_adv_link>
	link.cb->link_opened(&pb_adv, link.cb_data);
   14736:	68b3      	ldr	r3, [r6, #8]
   14738:	68f1      	ldr	r1, [r6, #12]
   1473a:	681b      	ldr	r3, [r3, #0]
		link.cb->link_opened(&pb_adv, link.cb_data);
   1473c:	481c      	ldr	r0, [pc, #112]	; (147b0 <gen_prov_ctl+0x11c>)
}
   1473e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		link.cb->link_opened(&pb_adv, link.cb_data);
   14742:	4718      	bx	r3
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14744:	f7ff fee4 	bl	14510 <atomic_get.constprop.0>
		if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
   14748:	07c0      	lsls	r0, r0, #31
   1474a:	d528      	bpl.n	1479e <gen_prov_ctl+0x10a>
   1474c:	f7ff fee0 	bl	14510 <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, ADV_PROVISIONER)) {
   14750:	0681      	lsls	r1, r0, #26
   14752:	d524      	bpl.n	1479e <gen_prov_ctl+0x10a>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   14754:	4c15      	ldr	r4, [pc, #84]	; (147ac <gen_prov_ctl+0x118>)
   14756:	2102      	movs	r1, #2
   14758:	1d20      	adds	r0, r4, #4
   1475a:	f012 f975 	bl	26a48 <atomic_or>
		if (atomic_test_and_set_bit(link.flags, ADV_LINK_ACK_RECVD)) {
   1475e:	0782      	lsls	r2, r0, #30
   14760:	d41d      	bmi.n	1479e <gen_prov_ctl+0x10a>
		prov_clear_tx();
   14762:	f7ff fe91 	bl	14488 <prov_clear_tx>
		link.cb->link_opened(&pb_adv, link.cb_data);
   14766:	68a3      	ldr	r3, [r4, #8]
   14768:	68e1      	ldr	r1, [r4, #12]
   1476a:	681b      	ldr	r3, [r3, #0]
   1476c:	e7e6      	b.n	1473c <gen_prov_ctl+0xa8>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1476e:	f7ff fecf 	bl	14510 <atomic_get.constprop.0>
		if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
   14772:	07c3      	lsls	r3, r0, #31
   14774:	d513      	bpl.n	1479e <gen_prov_ctl+0x10a>
	if (buf->len != 1) {
   14776:	888b      	ldrh	r3, [r1, #4]
   14778:	2b01      	cmp	r3, #1
   1477a:	d110      	bne.n	1479e <gen_prov_ctl+0x10a>
	close_link(net_buf_simple_pull_u8(buf));
   1477c:	4608      	mov	r0, r1
   1477e:	f013 fde3 	bl	28348 <net_buf_simple_pull_u8>
}
   14782:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	close_link(net_buf_simple_pull_u8(buf));
   14786:	f7ff bf4d 	b.w	14624 <close_link>
   1478a:	4a05      	ldr	r2, [pc, #20]	; (147a0 <gen_prov_ctl+0x10c>)
   1478c:	4b05      	ldr	r3, [pc, #20]	; (147a4 <gen_prov_ctl+0x110>)
		BT_ERR("Unknown bearer opcode: 0x%02x", BEARER_CTL(rx->gpc));
   1478e:	4809      	ldr	r0, [pc, #36]	; (147b4 <gen_prov_ctl+0x120>)
   14790:	1ad2      	subs	r2, r2, r3
   14792:	08d2      	lsrs	r2, r2, #3
   14794:	0192      	lsls	r2, r2, #6
   14796:	f042 0201 	orr.w	r2, r2, #1
   1479a:	4621      	mov	r1, r4
   1479c:	e790      	b.n	146c0 <gen_prov_ctl+0x2c>
}
   1479e:	bd70      	pop	{r4, r5, r6, pc}
   147a0:	00029a00 	.word	0x00029a00
   147a4:	00029870 	.word	0x00029870
   147a8:	0002e7f8 	.word	0x0002e7f8
   147ac:	200003d8 	.word	0x200003d8
   147b0:	0002a574 	.word	0x0002a574
   147b4:	0002e81f 	.word	0x0002e81f

000147b8 <prov_link_close>:

static void prov_link_close(enum prov_bearer_link_status status)
{
   147b8:	b507      	push	{r0, r1, r2, lr}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   147ba:	2104      	movs	r1, #4
   147bc:	f88d 0007 	strb.w	r0, [sp, #7]
   147c0:	4808      	ldr	r0, [pc, #32]	; (147e4 <prov_link_close+0x2c>)
   147c2:	f012 f941 	bl	26a48 <atomic_or>
	if (atomic_test_and_set_bit(link.flags, ADV_LINK_CLOSING)) {
   147c6:	0743      	lsls	r3, r0, #29
   147c8:	d408      	bmi.n	147dc <prov_link_close+0x24>
		return;
	}

	/* Ignore errors, the link will time out eventually if this doesn't get sent */
	bearer_ctl_send_unacked(ctl_buf_create(LINK_CLOSE, &status, 1, RETRANSMITS_LINK_CLOSE));
   147ca:	2302      	movs	r3, #2
   147cc:	2201      	movs	r2, #1
   147ce:	f10d 0107 	add.w	r1, sp, #7
   147d2:	4618      	mov	r0, r3
   147d4:	f7ff ff38 	bl	14648 <ctl_buf_create>
   147d8:	f7ff fe60 	bl	1449c <bearer_ctl_send_unacked>
}
   147dc:	b003      	add	sp, #12
   147de:	f85d fb04 	ldr.w	pc, [sp], #4
   147e2:	bf00      	nop
   147e4:	200003dc 	.word	0x200003dc

000147e8 <protocol_timeout>:
{
   147e8:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   147ea:	f7ff fe91 	bl	14510 <atomic_get.constprop.0>
	if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
   147ee:	07c3      	lsls	r3, r0, #31
   147f0:	d507      	bpl.n	14802 <protocol_timeout+0x1a>
	link.rx.seg = 0U;
   147f2:	4b04      	ldr	r3, [pc, #16]	; (14804 <protocol_timeout+0x1c>)
   147f4:	2200      	movs	r2, #0
   147f6:	745a      	strb	r2, [r3, #17]
}
   147f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	prov_link_close(PROV_BEARER_LINK_STATUS_TIMEOUT);
   147fc:	2001      	movs	r0, #1
   147fe:	f7ff bfdb 	b.w	147b8 <prov_link_close>
}
   14802:	bd08      	pop	{r3, pc}
   14804:	200003d8 	.word	0x200003d8

00014808 <prov_retransmit>:
{
   14808:	b508      	push	{r3, lr}
   1480a:	f7ff fe81 	bl	14510 <atomic_get.constprop.0>
	if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
   1480e:	07c3      	lsls	r3, r0, #31
   14810:	d40b      	bmi.n	1482a <prov_retransmit+0x22>
   14812:	4b1c      	ldr	r3, [pc, #112]	; (14884 <prov_retransmit+0x7c>)
   14814:	491c      	ldr	r1, [pc, #112]	; (14888 <prov_retransmit+0x80>)
		BT_WARN("Link not active");
   14816:	481d      	ldr	r0, [pc, #116]	; (1488c <prov_retransmit+0x84>)
   14818:	1ac9      	subs	r1, r1, r3
   1481a:	08c9      	lsrs	r1, r1, #3
   1481c:	0189      	lsls	r1, r1, #6
}
   1481e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_WARN("Link not active");
   14822:	f041 0102 	orr.w	r1, r1, #2
   14826:	f00d b960 	b.w	21aea <log_0>
	return z_impl_k_uptime_ticks();
   1482a:	f014 fc83 	bl	29134 <z_impl_k_uptime_ticks>
   1482e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14832:	fba0 0302 	umull	r0, r3, r0, r2
   14836:	fb02 3101 	mla	r1, r2, r1, r3
	if (k_uptime_get() - link.tx.start > TRANSACTION_TIMEOUT) {
   1483a:	4a15      	ldr	r2, [pc, #84]	; (14890 <prov_retransmit+0x88>)
   1483c:	e9d2 3206 	ldrd	r3, r2, [r2, #24]
   14840:	0bc0      	lsrs	r0, r0, #15
   14842:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   14846:	1ac0      	subs	r0, r0, r3
   14848:	ea4f 31d1 	mov.w	r1, r1, lsr #15
   1484c:	f247 5331 	movw	r3, #30001	; 0x7531
   14850:	eb61 0102 	sbc.w	r1, r1, r2
   14854:	4298      	cmp	r0, r3
   14856:	f171 0300 	sbcs.w	r3, r1, #0
   1485a:	db0e      	blt.n	1487a <prov_retransmit+0x72>
   1485c:	4b09      	ldr	r3, [pc, #36]	; (14884 <prov_retransmit+0x7c>)
   1485e:	490a      	ldr	r1, [pc, #40]	; (14888 <prov_retransmit+0x80>)
		BT_WARN("Giving up transaction");
   14860:	480c      	ldr	r0, [pc, #48]	; (14894 <prov_retransmit+0x8c>)
   14862:	1ac9      	subs	r1, r1, r3
   14864:	08c9      	lsrs	r1, r1, #3
   14866:	0189      	lsls	r1, r1, #6
   14868:	f041 0102 	orr.w	r1, r1, #2
   1486c:	f00d f93d 	bl	21aea <log_0>
}
   14870:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		prov_link_close(PROV_BEARER_LINK_STATUS_FAIL);
   14874:	2002      	movs	r0, #2
   14876:	f7ff bf9f 	b.w	147b8 <prov_link_close>
}
   1487a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	send_reliable();
   1487e:	f7ff bdcf 	b.w	14420 <send_reliable>
   14882:	bf00      	nop
   14884:	00029870 	.word	0x00029870
   14888:	00029a00 	.word	0x00029a00
   1488c:	0002e83d 	.word	0x0002e83d
   14890:	200003d8 	.word	0x200003d8
   14894:	0002e84d 	.word	0x0002e84d

00014898 <gen_prov_ack_send>:
{
   14898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1489a:	4e1e      	ldr	r6, [pc, #120]	; (14914 <gen_prov_ack_send+0x7c>)
   1489c:	2110      	movs	r1, #16
   1489e:	4605      	mov	r5, r0
   148a0:	1d30      	adds	r0, r6, #4
   148a2:	f012 f8d1 	bl	26a48 <atomic_or>
	if (pending && link.tx.pending_ack == xact_id) {
   148a6:	ea10 0701 	ands.w	r7, r0, r1
   148aa:	d003      	beq.n	148b4 <gen_prov_ack_send+0x1c>
   148ac:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   148b0:	42ab      	cmp	r3, r5
   148b2:	d011      	beq.n	148d8 <gen_prov_ack_send+0x40>
	buf = adv_buf_create(RETRANSMITS_ACK);
   148b4:	2002      	movs	r0, #2
   148b6:	f7ff fe0d 	bl	144d4 <adv_buf_create>
	if (!buf) {
   148ba:	4604      	mov	r4, r0
   148bc:	b968      	cbnz	r0, 148da <gen_prov_ack_send+0x42>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   148be:	4b16      	ldr	r3, [pc, #88]	; (14918 <gen_prov_ack_send+0x80>)
   148c0:	f3bf 8f5b 	dmb	ish
   148c4:	e853 2f00 	ldrex	r2, [r3]
   148c8:	f022 0210 	bic.w	r2, r2, #16
   148cc:	e843 2100 	strex	r1, r2, [r3]
   148d0:	2900      	cmp	r1, #0
   148d2:	d1f7      	bne.n	148c4 <gen_prov_ack_send+0x2c>
   148d4:	f3bf 8f5b 	dmb	ish
}
   148d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (pending) {
   148da:	b9cf      	cbnz	r7, 14910 <gen_prov_ack_send+0x78>
		complete = &cb;
   148dc:	4f0f      	ldr	r7, [pc, #60]	; (1491c <gen_prov_ack_send+0x84>)
		link.tx.pending_ack = xact_id;
   148de:	f886 5021 	strb.w	r5, [r6, #33]	; 0x21
	net_buf_simple_add_be32(&buf->b, val);
   148e2:	6831      	ldr	r1, [r6, #0]
   148e4:	f104 0008 	add.w	r0, r4, #8
   148e8:	f013 fce6 	bl	282b8 <net_buf_simple_add_be32>
	net_buf_add_u8(buf, xact_id);
   148ec:	4629      	mov	r1, r5
   148ee:	4620      	mov	r0, r4
   148f0:	f012 f8b9 	bl	26a66 <net_buf_add_u8.isra.0>
	net_buf_add_u8(buf, GPC_ACK);
   148f4:	4620      	mov	r0, r4
   148f6:	2101      	movs	r1, #1
   148f8:	f012 f8b5 	bl	26a66 <net_buf_add_u8.isra.0>
	bt_mesh_adv_send(buf, complete, NULL);
   148fc:	4620      	mov	r0, r4
   148fe:	4639      	mov	r1, r7
   14900:	2200      	movs	r2, #0
   14902:	f7f7 f95f 	bl	bbc4 <bt_mesh_adv_send>
	net_buf_unref(buf);
   14906:	4620      	mov	r0, r4
}
   14908:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	net_buf_unref(buf);
   1490c:	f009 ba2a 	b.w	1dd64 <net_buf_unref>
		complete = NULL;
   14910:	2700      	movs	r7, #0
   14912:	e7e6      	b.n	148e2 <gen_prov_ack_send+0x4a>
   14914:	200003d8 	.word	0x200003d8
   14918:	200003dc 	.word	0x200003dc
   1491c:	0002a54c 	.word	0x0002a54c

00014920 <prov_msg_recv>:
{
   14920:	b510      	push	{r4, lr}
	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
   14922:	4c1d      	ldr	r4, [pc, #116]	; (14998 <prov_msg_recv+0x78>)
   14924:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   14928:	2300      	movs	r3, #0
   1492a:	f104 0068 	add.w	r0, r4, #104	; 0x68
   1492e:	f00b fd79 	bl	20424 <k_work_reschedule>
	if (!bt_mesh_fcs_check(link.rx.buf, link.rx.fcs)) {
   14932:	7ce1      	ldrb	r1, [r4, #19]
   14934:	6960      	ldr	r0, [r4, #20]
   14936:	f7fb f9d7 	bl	fce8 <bt_mesh_fcs_check>
   1493a:	b958      	cbnz	r0, 14954 <prov_msg_recv+0x34>
   1493c:	4917      	ldr	r1, [pc, #92]	; (1499c <prov_msg_recv+0x7c>)
   1493e:	4b18      	ldr	r3, [pc, #96]	; (149a0 <prov_msg_recv+0x80>)
		BT_ERR("Incorrect FCS");
   14940:	4818      	ldr	r0, [pc, #96]	; (149a4 <prov_msg_recv+0x84>)
   14942:	1ac9      	subs	r1, r1, r3
   14944:	08c9      	lsrs	r1, r1, #3
   14946:	0189      	lsls	r1, r1, #6
}
   14948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Incorrect FCS");
   1494c:	f041 0101 	orr.w	r1, r1, #1
   14950:	f00d b8cb 	b.w	21aea <log_0>
	gen_prov_ack_send(link.rx.id);
   14954:	7c20      	ldrb	r0, [r4, #16]
   14956:	f7ff ff9f 	bl	14898 <gen_prov_ack_send>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1495a:	f7ff fdd9 	bl	14510 <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, ADV_LINK_INVALID)) {
   1495e:	0703      	lsls	r3, r0, #28
   14960:	d511      	bpl.n	14986 <prov_msg_recv+0x66>
   14962:	4b0f      	ldr	r3, [pc, #60]	; (149a0 <prov_msg_recv+0x80>)
   14964:	4a0d      	ldr	r2, [pc, #52]	; (1499c <prov_msg_recv+0x7c>)
		BT_WARN("Unexpected msg 0x%02x on invalidated link",
   14966:	4810      	ldr	r0, [pc, #64]	; (149a8 <prov_msg_recv+0x88>)
   14968:	1ad2      	subs	r2, r2, r3
   1496a:	6963      	ldr	r3, [r4, #20]
   1496c:	08d2      	lsrs	r2, r2, #3
   1496e:	681b      	ldr	r3, [r3, #0]
   14970:	0192      	lsls	r2, r2, #6
   14972:	7819      	ldrb	r1, [r3, #0]
   14974:	f042 0202 	orr.w	r2, r2, #2
   14978:	f00d f8c4 	bl	21b04 <log_1>
}
   1497c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		prov_failed(PROV_ERR_UNEXP_PDU);
   14980:	2003      	movs	r0, #3
   14982:	f7ff bd3b 	b.w	143fc <prov_failed>
	link.cb->recv(&pb_adv, link.cb_data, link.rx.buf);
   14986:	68a3      	ldr	r3, [r4, #8]
   14988:	6962      	ldr	r2, [r4, #20]
   1498a:	68e1      	ldr	r1, [r4, #12]
   1498c:	68db      	ldr	r3, [r3, #12]
   1498e:	4807      	ldr	r0, [pc, #28]	; (149ac <prov_msg_recv+0x8c>)
}
   14990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	link.cb->recv(&pb_adv, link.cb_data, link.rx.buf);
   14994:	4718      	bx	r3
   14996:	bf00      	nop
   14998:	200003d8 	.word	0x200003d8
   1499c:	00029a00 	.word	0x00029a00
   149a0:	00029870 	.word	0x00029870
   149a4:	0002e863 	.word	0x0002e863
   149a8:	0002e871 	.word	0x0002e871
   149ac:	0002a574 	.word	0x0002a574

000149b0 <gen_prov_cont>:
{
   149b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!link.rx.seg && link.rx.id == rx->xact_id) {
   149b4:	4c44      	ldr	r4, [pc, #272]	; (14ac8 <gen_prov_cont+0x118>)
	uint8_t seg = CONT_SEG_INDEX(rx->gpc);
   149b6:	7947      	ldrb	r7, [r0, #5]
	if (!link.rx.seg && link.rx.id == rx->xact_id) {
   149b8:	f894 c011 	ldrb.w	ip, [r4, #17]
   149bc:	7c22      	ldrb	r2, [r4, #16]
{
   149be:	460d      	mov	r5, r1
   149c0:	4606      	mov	r6, r0
	if (!link.rx.seg && link.rx.id == rx->xact_id) {
   149c2:	7901      	ldrb	r1, [r0, #4]
   149c4:	f1bc 0f00 	cmp.w	ip, #0
   149c8:	d134      	bne.n	14a34 <gen_prov_cont+0x84>
   149ca:	4291      	cmp	r1, r2
   149cc:	d108      	bne.n	149e0 <gen_prov_cont+0x30>
   149ce:	f7ff fd9f 	bl	14510 <atomic_get.constprop.0>
		if (!ack_pending()) {
   149d2:	06c0      	lsls	r0, r0, #27
   149d4:	d475      	bmi.n	14ac2 <gen_prov_cont+0x112>
			gen_prov_ack_send(rx->xact_id);
   149d6:	7930      	ldrb	r0, [r6, #4]
}
   149d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			gen_prov_ack_send(rx->xact_id);
   149dc:	f7ff bf5c 	b.w	14898 <gen_prov_ack_send>
	return (((id + 1) & XACT_ID_MAX) | (id & (XACT_ID_MAX+1)));
   149e0:	b253      	sxtb	r3, r2
   149e2:	1c58      	adds	r0, r3, #1
   149e4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   149e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
	if (!link.rx.seg &&
   149ec:	4303      	orrs	r3, r0
   149ee:	4299      	cmp	r1, r3
   149f0:	d122      	bne.n	14a38 <gen_prov_cont+0x88>
		net_buf_simple_reset(link.rx.buf);
   149f2:	6963      	ldr	r3, [r4, #20]
		link.rx.id = rx->xact_id;
   149f4:	7421      	strb	r1, [r4, #16]
	buf->data = buf->__buf;
   149f6:	689a      	ldr	r2, [r3, #8]
	buf->len  = 0U;
   149f8:	f8a3 c004 	strh.w	ip, [r3, #4]
	buf->data = buf->__buf;
   149fc:	601a      	str	r2, [r3, #0]
		link.rx.seg = SEG_NVAL;
   149fe:	23ff      	movs	r3, #255	; 0xff
   14a00:	7463      	strb	r3, [r4, #17]
		link.rx.last_seg = SEG_NVAL;
   14a02:	74a3      	strb	r3, [r4, #18]
		prov_clear_tx();
   14a04:	f7ff fd40 	bl	14488 <prov_clear_tx>
	if (seg > link.rx.last_seg) {
   14a08:	7ca3      	ldrb	r3, [r4, #18]
   14a0a:	ebb3 0f97 	cmp.w	r3, r7, lsr #2
	uint8_t seg = CONT_SEG_INDEX(rx->gpc);
   14a0e:	ea4f 0697 	mov.w	r6, r7, lsr #2
	if (seg > link.rx.last_seg) {
   14a12:	d21d      	bcs.n	14a50 <gen_prov_cont+0xa0>
   14a14:	4a2d      	ldr	r2, [pc, #180]	; (14acc <gen_prov_cont+0x11c>)
   14a16:	4b2e      	ldr	r3, [pc, #184]	; (14ad0 <gen_prov_cont+0x120>)
		BT_ERR("Invalid segment index %u", seg);
   14a18:	482e      	ldr	r0, [pc, #184]	; (14ad4 <gen_prov_cont+0x124>)
   14a1a:	1ad2      	subs	r2, r2, r3
   14a1c:	08d2      	lsrs	r2, r2, #3
   14a1e:	0192      	lsls	r2, r2, #6
   14a20:	f042 0201 	orr.w	r2, r2, #1
   14a24:	4631      	mov	r1, r6
   14a26:	f00d f86d 	bl	21b04 <log_1>
}
   14a2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			prov_failed(PROV_ERR_NVAL_FMT);
   14a2e:	2002      	movs	r0, #2
   14a30:	f7ff bce4 	b.w	143fc <prov_failed>
	} else if (rx->xact_id != link.rx.id) {
   14a34:	4291      	cmp	r1, r2
   14a36:	d0e7      	beq.n	14a08 <gen_prov_cont+0x58>
   14a38:	4825      	ldr	r0, [pc, #148]	; (14ad0 <gen_prov_cont+0x120>)
   14a3a:	4b24      	ldr	r3, [pc, #144]	; (14acc <gen_prov_cont+0x11c>)
   14a3c:	1a1b      	subs	r3, r3, r0
   14a3e:	08db      	lsrs	r3, r3, #3
		BT_WARN("Data for unknown transaction (0x%x != 0x%x)",
   14a40:	019b      	lsls	r3, r3, #6
}
   14a42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("Data for unknown transaction (0x%x != 0x%x)",
   14a46:	4824      	ldr	r0, [pc, #144]	; (14ad8 <gen_prov_cont+0x128>)
   14a48:	f043 0302 	orr.w	r3, r3, #2
   14a4c:	f00d b86e 	b.w	21b2c <log_2>
	if (!(link.rx.seg & BIT(seg))) {
   14a50:	7c63      	ldrb	r3, [r4, #17]
   14a52:	40f3      	lsrs	r3, r6
   14a54:	07d9      	lsls	r1, r3, #31
   14a56:	d534      	bpl.n	14ac2 <gen_prov_cont+0x112>
	memcpy(XACT_SEG_DATA(seg), buf->data, buf->len);
   14a58:	6962      	ldr	r2, [r4, #20]
   14a5a:	6829      	ldr	r1, [r5, #0]
   14a5c:	2017      	movs	r0, #23
   14a5e:	1e73      	subs	r3, r6, #1
   14a60:	4343      	muls	r3, r0
   14a62:	6810      	ldr	r0, [r2, #0]
   14a64:	88aa      	ldrh	r2, [r5, #4]
   14a66:	3314      	adds	r3, #20
   14a68:	4418      	add	r0, r3
   14a6a:	f00f f99d 	bl	23da8 <memcpy>
	XACT_SEG_RECV(seg);
   14a6e:	2001      	movs	r0, #1
   14a70:	fa00 f306 	lsl.w	r3, r0, r6
   14a74:	7c60      	ldrb	r0, [r4, #17]
   14a76:	ea20 0003 	bic.w	r0, r0, r3
	if (seg == link.rx.last_seg && !(link.rx.seg & BIT(0))) {
   14a7a:	7ca3      	ldrb	r3, [r4, #18]
	XACT_SEG_RECV(seg);
   14a7c:	7460      	strb	r0, [r4, #17]
	if (seg == link.rx.last_seg && !(link.rx.seg & BIT(0))) {
   14a7e:	42b3      	cmp	r3, r6
   14a80:	d11a      	bne.n	14ab8 <gen_prov_cont+0x108>
   14a82:	07c2      	lsls	r2, r0, #31
   14a84:	d41d      	bmi.n	14ac2 <gen_prov_cont+0x112>
		expect_len = (link.rx.buf->len - 20U -
   14a86:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
   14a8a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   14a8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   14a92:	6962      	ldr	r2, [r4, #20]
   14a94:	8892      	ldrh	r2, [r2, #4]
   14a96:	3303      	adds	r3, #3
   14a98:	4413      	add	r3, r2
		if (expect_len != buf->len) {
   14a9a:	88aa      	ldrh	r2, [r5, #4]
		expect_len = (link.rx.buf->len - 20U -
   14a9c:	b2d9      	uxtb	r1, r3
		if (expect_len != buf->len) {
   14a9e:	4291      	cmp	r1, r2
   14aa0:	d00a      	beq.n	14ab8 <gen_prov_cont+0x108>
   14aa2:	480b      	ldr	r0, [pc, #44]	; (14ad0 <gen_prov_cont+0x120>)
   14aa4:	4b09      	ldr	r3, [pc, #36]	; (14acc <gen_prov_cont+0x11c>)
   14aa6:	1a1b      	subs	r3, r3, r0
   14aa8:	08db      	lsrs	r3, r3, #3
			BT_ERR("Incorrect last seg len: %u != %u", expect_len,
   14aaa:	019b      	lsls	r3, r3, #6
   14aac:	480b      	ldr	r0, [pc, #44]	; (14adc <gen_prov_cont+0x12c>)
   14aae:	f043 0301 	orr.w	r3, r3, #1
   14ab2:	f00d f83b 	bl	21b2c <log_2>
   14ab6:	e7b8      	b.n	14a2a <gen_prov_cont+0x7a>
	if (!link.rx.seg) {
   14ab8:	b918      	cbnz	r0, 14ac2 <gen_prov_cont+0x112>
}
   14aba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		prov_msg_recv();
   14abe:	f7ff bf2f 	b.w	14920 <prov_msg_recv>
}
   14ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14ac6:	bf00      	nop
   14ac8:	200003d8 	.word	0x200003d8
   14acc:	00029a00 	.word	0x00029a00
   14ad0:	00029870 	.word	0x00029870
   14ad4:	0002e8c7 	.word	0x0002e8c7
   14ad8:	0002e89b 	.word	0x0002e89b
   14adc:	0002e8e0 	.word	0x0002e8e0

00014ae0 <gen_prov_start>:
{
   14ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (rx->xact_id == link.rx.id) {
   14ae4:	4c4e      	ldr	r4, [pc, #312]	; (14c20 <gen_prov_start+0x140>)
{
   14ae6:	460d      	mov	r5, r1
	if (rx->xact_id == link.rx.id) {
   14ae8:	7c23      	ldrb	r3, [r4, #16]
   14aea:	7901      	ldrb	r1, [r0, #4]
   14aec:	4299      	cmp	r1, r3
{
   14aee:	4606      	mov	r6, r0
	if (rx->xact_id == link.rx.id) {
   14af0:	d10e      	bne.n	14b10 <gen_prov_start+0x30>
		if (!link.rx.seg) {
   14af2:	7c63      	ldrb	r3, [r4, #17]
   14af4:	b943      	cbnz	r3, 14b08 <gen_prov_start+0x28>
   14af6:	f7ff fd0b 	bl	14510 <atomic_get.constprop.0>
			if (!ack_pending()) {
   14afa:	06c1      	lsls	r1, r0, #27
   14afc:	d406      	bmi.n	14b0c <gen_prov_start+0x2c>
				gen_prov_ack_send(rx->xact_id);
   14afe:	7930      	ldrb	r0, [r6, #4]
}
   14b00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				gen_prov_ack_send(rx->xact_id);
   14b04:	f7ff bec8 	b.w	14898 <gen_prov_ack_send>
		if (!(link.rx.seg & BIT(0))) {
   14b08:	07da      	lsls	r2, r3, #31
   14b0a:	d416      	bmi.n	14b3a <gen_prov_start+0x5a>
}
   14b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (((id + 1) & XACT_ID_MAX) | (id & (XACT_ID_MAX+1)));
   14b10:	b25b      	sxtb	r3, r3
   14b12:	1c5a      	adds	r2, r3, #1
   14b14:	f002 007f 	and.w	r0, r2, #127	; 0x7f
   14b18:	f003 0280 	and.w	r2, r3, #128	; 0x80
   14b1c:	4302      	orrs	r2, r0
	} else if (rx->xact_id != next_transaction_id(link.rx.id)) {
   14b1e:	4291      	cmp	r1, r2
   14b20:	d00b      	beq.n	14b3a <gen_prov_start+0x5a>
   14b22:	4840      	ldr	r0, [pc, #256]	; (14c24 <gen_prov_start+0x144>)
   14b24:	4b40      	ldr	r3, [pc, #256]	; (14c28 <gen_prov_start+0x148>)
   14b26:	1a1b      	subs	r3, r3, r0
   14b28:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unexpected xact 0x%x, expected 0x%x", rx->xact_id,
   14b2a:	019b      	lsls	r3, r3, #6
}
   14b2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("Unexpected xact 0x%x, expected 0x%x", rx->xact_id,
   14b30:	483e      	ldr	r0, [pc, #248]	; (14c2c <gen_prov_start+0x14c>)
   14b32:	f043 0302 	orr.w	r3, r3, #2
   14b36:	f00c bff9 	b.w	21b2c <log_2>
	net_buf_simple_reset(link.rx.buf);
   14b3a:	6967      	ldr	r7, [r4, #20]
	buf->len  = 0U;
   14b3c:	2300      	movs	r3, #0
   14b3e:	80bb      	strh	r3, [r7, #4]
	buf->data = buf->__buf;
   14b40:	68bb      	ldr	r3, [r7, #8]
   14b42:	603b      	str	r3, [r7, #0]
	link.rx.buf->len = net_buf_simple_pull_be16(buf);
   14b44:	4628      	mov	r0, r5
   14b46:	f013 fc0f 	bl	28368 <net_buf_simple_pull_be16>
   14b4a:	80b8      	strh	r0, [r7, #4]
	link.rx.id = rx->xact_id;
   14b4c:	7933      	ldrb	r3, [r6, #4]
   14b4e:	7423      	strb	r3, [r4, #16]
	link.rx.fcs = net_buf_simple_pull_u8(buf);
   14b50:	4628      	mov	r0, r5
   14b52:	f013 fbf9 	bl	28348 <net_buf_simple_pull_u8>
	if (link.rx.buf->len < 1) {
   14b56:	6963      	ldr	r3, [r4, #20]
	link.rx.fcs = net_buf_simple_pull_u8(buf);
   14b58:	74e0      	strb	r0, [r4, #19]
	if (link.rx.buf->len < 1) {
   14b5a:	8899      	ldrh	r1, [r3, #4]
   14b5c:	b951      	cbnz	r1, 14b74 <gen_prov_start+0x94>
   14b5e:	4932      	ldr	r1, [pc, #200]	; (14c28 <gen_prov_start+0x148>)
   14b60:	4b30      	ldr	r3, [pc, #192]	; (14c24 <gen_prov_start+0x144>)
		BT_ERR("Ignoring zero-length provisioning PDU");
   14b62:	4833      	ldr	r0, [pc, #204]	; (14c30 <gen_prov_start+0x150>)
   14b64:	1ac9      	subs	r1, r1, r3
   14b66:	08c9      	lsrs	r1, r1, #3
   14b68:	0189      	lsls	r1, r1, #6
   14b6a:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Too small total length for multi-segment PDU");
   14b6e:	f00c ffbc 	bl	21aea <log_0>
		prov_failed(PROV_ERR_NVAL_FMT);
   14b72:	e00c      	b.n	14b8e <gen_prov_start+0xae>
	if (link.rx.buf->len > link.rx.buf->size) {
   14b74:	88db      	ldrh	r3, [r3, #6]
   14b76:	428b      	cmp	r3, r1
   14b78:	d20e      	bcs.n	14b98 <gen_prov_start+0xb8>
   14b7a:	4a2b      	ldr	r2, [pc, #172]	; (14c28 <gen_prov_start+0x148>)
   14b7c:	4b29      	ldr	r3, [pc, #164]	; (14c24 <gen_prov_start+0x144>)
		BT_ERR("Too large provisioning PDU (%u bytes)",
   14b7e:	482d      	ldr	r0, [pc, #180]	; (14c34 <gen_prov_start+0x154>)
   14b80:	1ad2      	subs	r2, r2, r3
   14b82:	08d2      	lsrs	r2, r2, #3
   14b84:	0192      	lsls	r2, r2, #6
   14b86:	f042 0201 	orr.w	r2, r2, #1
   14b8a:	f00c ffbb 	bl	21b04 <log_1>
}
   14b8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		prov_failed(PROV_ERR_NVAL_FMT);
   14b92:	2002      	movs	r0, #2
   14b94:	f7ff bc32 	b.w	143fc <prov_failed>
	if (START_LAST_SEG(rx->gpc) > 0 && link.rx.buf->len <= 20U) {
   14b98:	7973      	ldrb	r3, [r6, #5]
   14b9a:	089b      	lsrs	r3, r3, #2
   14b9c:	d00a      	beq.n	14bb4 <gen_prov_start+0xd4>
   14b9e:	2914      	cmp	r1, #20
   14ba0:	d808      	bhi.n	14bb4 <gen_prov_start+0xd4>
   14ba2:	4921      	ldr	r1, [pc, #132]	; (14c28 <gen_prov_start+0x148>)
   14ba4:	4b1f      	ldr	r3, [pc, #124]	; (14c24 <gen_prov_start+0x144>)
		BT_ERR("Too small total length for multi-segment PDU");
   14ba6:	4824      	ldr	r0, [pc, #144]	; (14c38 <gen_prov_start+0x158>)
   14ba8:	1ac9      	subs	r1, r1, r3
   14baa:	08c9      	lsrs	r1, r1, #3
   14bac:	0189      	lsls	r1, r1, #6
   14bae:	f041 0101 	orr.w	r1, r1, #1
   14bb2:	e7dc      	b.n	14b6e <gen_prov_start+0x8e>
	prov_clear_tx();
   14bb4:	f7ff fc68 	bl	14488 <prov_clear_tx>
	link.rx.last_seg = START_LAST_SEG(rx->gpc);
   14bb8:	7972      	ldrb	r2, [r6, #5]
	if ((link.rx.seg & BIT(0)) &&
   14bba:	7c61      	ldrb	r1, [r4, #17]
	link.rx.last_seg = START_LAST_SEG(rx->gpc);
   14bbc:	0892      	lsrs	r2, r2, #2
	if ((link.rx.seg & BIT(0)) &&
   14bbe:	07cb      	lsls	r3, r1, #31
	link.rx.last_seg = START_LAST_SEG(rx->gpc);
   14bc0:	74a2      	strb	r2, [r4, #18]
	if ((link.rx.seg & BIT(0)) &&
   14bc2:	d513      	bpl.n	14bec <gen_prov_start+0x10c>
	    (find_msb_set((~link.rx.seg) & SEG_NVAL) - 1 > link.rx.last_seg)) {
   14bc4:	43cb      	mvns	r3, r1
	if (op == 0) {
   14bc6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   14bca:	d005      	beq.n	14bd8 <gen_prov_start+0xf8>
	return 32 - __builtin_clz(op);
   14bcc:	fab3 f383 	clz	r3, r3
   14bd0:	f1c3 031f 	rsb	r3, r3, #31
	if ((link.rx.seg & BIT(0)) &&
   14bd4:	4293      	cmp	r3, r2
   14bd6:	d90c      	bls.n	14bf2 <gen_prov_start+0x112>
   14bd8:	4a13      	ldr	r2, [pc, #76]	; (14c28 <gen_prov_start+0x148>)
   14bda:	4b12      	ldr	r3, [pc, #72]	; (14c24 <gen_prov_start+0x144>)
		BT_ERR("Invalid segment index %u", seg);
   14bdc:	4817      	ldr	r0, [pc, #92]	; (14c3c <gen_prov_start+0x15c>)
   14bde:	1ad2      	subs	r2, r2, r3
   14be0:	08d2      	lsrs	r2, r2, #3
   14be2:	0192      	lsls	r2, r2, #6
   14be4:	f042 0201 	orr.w	r2, r2, #1
   14be8:	21ff      	movs	r1, #255	; 0xff
   14bea:	e7ce      	b.n	14b8a <gen_prov_start+0xaa>
	uint8_t seg = SEG_NVAL;
   14bec:	2900      	cmp	r1, #0
   14bee:	bf08      	it	eq
   14bf0:	21ff      	moveq	r1, #255	; 0xff
	link.rx.seg = seg & ((1 << (START_LAST_SEG(rx->gpc) + 1)) - 1);
   14bf2:	3201      	adds	r2, #1
   14bf4:	2301      	movs	r3, #1
   14bf6:	4093      	lsls	r3, r2
   14bf8:	3b01      	subs	r3, #1
   14bfa:	400b      	ands	r3, r1
   14bfc:	7463      	strb	r3, [r4, #17]
	memcpy(link.rx.buf->data, buf->data, buf->len);
   14bfe:	6963      	ldr	r3, [r4, #20]
   14c00:	88aa      	ldrh	r2, [r5, #4]
   14c02:	6818      	ldr	r0, [r3, #0]
   14c04:	6829      	ldr	r1, [r5, #0]
   14c06:	f00f f8cf 	bl	23da8 <memcpy>
	XACT_SEG_RECV(0);
   14c0a:	7c63      	ldrb	r3, [r4, #17]
   14c0c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   14c10:	7463      	strb	r3, [r4, #17]
	if (!link.rx.seg) {
   14c12:	2b00      	cmp	r3, #0
   14c14:	f47f af7a 	bne.w	14b0c <gen_prov_start+0x2c>
}
   14c18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		prov_msg_recv();
   14c1c:	f7ff be80 	b.w	14920 <prov_msg_recv>
   14c20:	200003d8 	.word	0x200003d8
   14c24:	00029870 	.word	0x00029870
   14c28:	00029a00 	.word	0x00029a00
   14c2c:	0002e901 	.word	0x0002e901
   14c30:	0002e925 	.word	0x0002e925
   14c34:	0002e94b 	.word	0x0002e94b
   14c38:	0002e971 	.word	0x0002e971
   14c3c:	0002e8c7 	.word	0x0002e8c7

00014c40 <prov_send_adv>:
{
   14c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
   14c44:	4d58      	ldr	r5, [pc, #352]	; (14da8 <prov_send_adv+0x168>)
{
   14c46:	460f      	mov	r7, r1
   14c48:	4604      	mov	r4, r0
   14c4a:	4616      	mov	r6, r2
	prov_clear_tx();
   14c4c:	f7ff fc1c 	bl	14488 <prov_clear_tx>
	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
   14c50:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   14c54:	2300      	movs	r3, #0
   14c56:	f105 0068 	add.w	r0, r5, #104	; 0x68
   14c5a:	f00b fbe3 	bl	20424 <k_work_reschedule>
	start = adv_buf_create(RETRANSMITS_RELIABLE);
   14c5e:	2000      	movs	r0, #0
   14c60:	f7ff fc38 	bl	144d4 <adv_buf_create>
	if (!start) {
   14c64:	4681      	mov	r9, r0
   14c66:	2800      	cmp	r0, #0
   14c68:	d076      	beq.n	14d58 <prov_send_adv+0x118>
	return (((id + 1) & XACT_ID_MAX) | (id & (XACT_ID_MAX+1)));
   14c6a:	f995 2020 	ldrsb.w	r2, [r5, #32]
	net_buf_simple_add_be32(&buf->b, val);
   14c6e:	6829      	ldr	r1, [r5, #0]
   14c70:	1c53      	adds	r3, r2, #1
   14c72:	f100 0808 	add.w	r8, r0, #8
   14c76:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   14c7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   14c7e:	4313      	orrs	r3, r2
   14c80:	4640      	mov	r0, r8
	link.tx.id = next_transaction_id(link.tx.id);
   14c82:	f885 3020 	strb.w	r3, [r5, #32]
   14c86:	f013 fb17 	bl	282b8 <net_buf_simple_add_be32>
	net_buf_add_u8(start, link.tx.id);
   14c8a:	f895 1020 	ldrb.w	r1, [r5, #32]
   14c8e:	4648      	mov	r0, r9
   14c90:	f011 fee9 	bl	26a66 <net_buf_add_u8.isra.0>
	if (len <= START_PAYLOAD_MAX) {
   14c94:	7922      	ldrb	r2, [r4, #4]
	net_buf_add_u8(start, GPC_START(last_seg(msg->len)));
   14c96:	88a3      	ldrh	r3, [r4, #4]
	if (len <= START_PAYLOAD_MAX) {
   14c98:	2a14      	cmp	r2, #20
	len -= START_PAYLOAD_MAX;
   14c9a:	bf81      	itttt	hi
   14c9c:	3b14      	subhi	r3, #20
	return 1 + (len / CONT_PAYLOAD_MAX);
   14c9e:	b2db      	uxtbhi	r3, r3
   14ca0:	2117      	movhi	r1, #23
   14ca2:	fbb3 f3f1 	udivhi	r3, r3, r1
   14ca6:	bf86      	itte	hi
   14ca8:	3301      	addhi	r3, #1
   14caa:	b2db      	uxtbhi	r3, r3
		return 0;
   14cac:	2300      	movls	r3, #0
	net_buf_add_u8(start, GPC_START(last_seg(msg->len)));
   14cae:	009b      	lsls	r3, r3, #2
   14cb0:	f003 01fc 	and.w	r1, r3, #252	; 0xfc
   14cb4:	4648      	mov	r0, r9
   14cb6:	f011 fed6 	bl	26a66 <net_buf_add_u8.isra.0>
	net_buf_simple_add_be16(&buf->b, val);
   14cba:	88a1      	ldrh	r1, [r4, #4]
   14cbc:	4640      	mov	r0, r8
   14cbe:	f013 fae4 	bl	2828a <net_buf_simple_add_be16>
	net_buf_add_u8(start, bt_mesh_fcs_calc(msg->data, msg->len));
   14cc2:	7921      	ldrb	r1, [r4, #4]
   14cc4:	6820      	ldr	r0, [r4, #0]
   14cc6:	f7fa ffff 	bl	fcc8 <bt_mesh_fcs_calc>
   14cca:	4601      	mov	r1, r0
   14ccc:	4648      	mov	r0, r9
   14cce:	f011 feca 	bl	26a66 <net_buf_add_u8.isra.0>
	link.tx.buf[0] = start;
   14cd2:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
	link.tx.cb_data = cb_data;
   14cd6:	e9c5 760c 	strd	r7, r6, [r5, #48]	; 0x30
   14cda:	f014 fa2b 	bl	29134 <z_impl_k_uptime_ticks>
	seg_len = MIN(msg->len, START_PAYLOAD_MAX);
   14cde:	88a6      	ldrh	r6, [r4, #4]
   14ce0:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 14dac <prov_send_adv+0x16c>
   14ce4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14ce8:	fba0 0302 	umull	r0, r3, r0, r2
   14cec:	fb02 3101 	mla	r1, r2, r1, r3
	net_buf_add_mem(start, msg->data, seg_len);
   14cf0:	2e14      	cmp	r6, #20
   14cf2:	ea4f 30d0 	mov.w	r0, r0, lsr #15
   14cf6:	bf28      	it	cs
   14cf8:	2614      	movcs	r6, #20
   14cfa:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   14cfe:	0bc9      	lsrs	r1, r1, #15
	link.tx.start = k_uptime_get();
   14d00:	e9c5 0106 	strd	r0, r1, [r5, #24]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14d04:	4632      	mov	r2, r6
   14d06:	6821      	ldr	r1, [r4, #0]
   14d08:	4640      	mov	r0, r8
   14d0a:	f013 faa3 	bl	28254 <net_buf_simple_add_mem>
	net_buf_simple_pull(msg, seg_len);
   14d0e:	4631      	mov	r1, r6
   14d10:	4620      	mov	r0, r4
   14d12:	f013 fb09 	bl	28328 <net_buf_simple_pull>
	for (seg_id = 1U; msg->len > 0; seg_id++) {
   14d16:	2700      	movs	r7, #0
   14d18:	88a6      	ldrh	r6, [r4, #4]
   14d1a:	b91e      	cbnz	r6, 14d24 <prov_send_adv+0xe4>
	send_reliable();
   14d1c:	f7ff fb80 	bl	14420 <send_reliable>
	return 0;
   14d20:	4630      	mov	r0, r6
   14d22:	e00f      	b.n	14d44 <prov_send_adv+0x104>
		if (seg_id >= ARRAY_SIZE(link.tx.buf)) {
   14d24:	2f08      	cmp	r7, #8
   14d26:	d10f      	bne.n	14d48 <prov_send_adv+0x108>
   14d28:	4b21      	ldr	r3, [pc, #132]	; (14db0 <prov_send_adv+0x170>)
   14d2a:	4922      	ldr	r1, [pc, #136]	; (14db4 <prov_send_adv+0x174>)
			BT_ERR("Too big message");
   14d2c:	4822      	ldr	r0, [pc, #136]	; (14db8 <prov_send_adv+0x178>)
   14d2e:	1ac9      	subs	r1, r1, r3
   14d30:	08c9      	lsrs	r1, r1, #3
   14d32:	0189      	lsls	r1, r1, #6
   14d34:	f041 0101 	orr.w	r1, r1, #1
   14d38:	f00c fed7 	bl	21aea <log_0>
			free_segments();
   14d3c:	f7ff fb8e 	bl	1445c <free_segments>
			return -E2BIG;
   14d40:	f06f 0006 	mvn.w	r0, #6
}
   14d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf = adv_buf_create(RETRANSMITS_RELIABLE);
   14d48:	2000      	movs	r0, #0
   14d4a:	f7ff fbc3 	bl	144d4 <adv_buf_create>
		if (!buf) {
   14d4e:	3704      	adds	r7, #4
   14d50:	4606      	mov	r6, r0
   14d52:	b920      	cbnz	r0, 14d5e <prov_send_adv+0x11e>
			free_segments();
   14d54:	f7ff fb82 	bl	1445c <free_segments>
		return -ENOBUFS;
   14d58:	f06f 0068 	mvn.w	r0, #104	; 0x68
   14d5c:	e7f2      	b.n	14d44 <prov_send_adv+0x104>
		seg_len = MIN(msg->len, CONT_PAYLOAD_MAX);
   14d5e:	f8b4 8004 	ldrh.w	r8, [r4, #4]
		link.tx.buf[seg_id] = buf;
   14d62:	f849 0b04 	str.w	r0, [r9], #4
	net_buf_simple_add_be32(&buf->b, val);
   14d66:	f100 0a08 	add.w	sl, r0, #8
		seg_len = MIN(msg->len, CONT_PAYLOAD_MAX);
   14d6a:	f1b8 0f17 	cmp.w	r8, #23
   14d6e:	6829      	ldr	r1, [r5, #0]
   14d70:	4650      	mov	r0, sl
   14d72:	bf28      	it	cs
   14d74:	f04f 0817 	movcs.w	r8, #23
   14d78:	f013 fa9e 	bl	282b8 <net_buf_simple_add_be32>
		net_buf_add_u8(buf, link.tx.id);
   14d7c:	f895 1020 	ldrb.w	r1, [r5, #32]
   14d80:	4630      	mov	r0, r6
   14d82:	f011 fe70 	bl	26a66 <net_buf_add_u8.isra.0>
		net_buf_add_u8(buf, GPC_CONT(seg_id));
   14d86:	f047 0102 	orr.w	r1, r7, #2
   14d8a:	4630      	mov	r0, r6
   14d8c:	b2c9      	uxtb	r1, r1
   14d8e:	f011 fe6a 	bl	26a66 <net_buf_add_u8.isra.0>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14d92:	6821      	ldr	r1, [r4, #0]
   14d94:	4642      	mov	r2, r8
   14d96:	4650      	mov	r0, sl
   14d98:	f013 fa5c 	bl	28254 <net_buf_simple_add_mem>
		net_buf_simple_pull(msg, seg_len);
   14d9c:	4641      	mov	r1, r8
   14d9e:	4620      	mov	r0, r4
   14da0:	f013 fac2 	bl	28328 <net_buf_simple_pull>
	for (seg_id = 1U; msg->len > 0; seg_id++) {
   14da4:	e7b8      	b.n	14d18 <prov_send_adv+0xd8>
   14da6:	bf00      	nop
   14da8:	200003d8 	.word	0x200003d8
   14dac:	20000400 	.word	0x20000400
   14db0:	00029870 	.word	0x00029870
   14db4:	00029a00 	.word	0x00029a00
   14db8:	0002e99e 	.word	0x0002e99e

00014dbc <prov_link_open>:
{
   14dbc:	b570      	push	{r4, r5, r6, lr}
   14dbe:	4606      	mov	r6, r0
	err = bt_mesh_adv_enable();
   14dc0:	f7fe fae0 	bl	13384 <bt_mesh_adv_enable>
	if (err) {
   14dc4:	4604      	mov	r4, r0
   14dc6:	b158      	cbz	r0, 14de0 <prov_link_open+0x24>
   14dc8:	4928      	ldr	r1, [pc, #160]	; (14e6c <prov_link_open+0xb0>)
   14dca:	4b29      	ldr	r3, [pc, #164]	; (14e70 <prov_link_open+0xb4>)
		BT_ERR("Failed enabling advertiser");
   14dcc:	4829      	ldr	r0, [pc, #164]	; (14e74 <prov_link_open+0xb8>)
   14dce:	1ac9      	subs	r1, r1, r3
   14dd0:	08c9      	lsrs	r1, r1, #3
   14dd2:	0189      	lsls	r1, r1, #6
   14dd4:	f041 0101 	orr.w	r1, r1, #1
   14dd8:	f00c fe87 	bl	21aea <log_0>
}
   14ddc:	4620      	mov	r0, r4
   14dde:	bd70      	pop	{r4, r5, r6, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   14de0:	4d25      	ldr	r5, [pc, #148]	; (14e78 <prov_link_open+0xbc>)
   14de2:	2101      	movs	r1, #1
   14de4:	1d28      	adds	r0, r5, #4
   14de6:	f011 fe2f 	bl	26a48 <atomic_or>
	if (atomic_test_and_set_bit(link.flags, ADV_LINK_ACTIVE)) {
   14dea:	ea10 0401 	ands.w	r4, r0, r1
   14dee:	d13a      	bne.n	14e66 <prov_link_open+0xaa>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   14df0:	2120      	movs	r1, #32
   14df2:	1d28      	adds	r0, r5, #4
   14df4:	f011 fe28 	bl	26a48 <atomic_or>
	bt_rand(&link.id, sizeof(link.id));
   14df8:	2104      	movs	r1, #4
   14dfa:	4628      	mov	r0, r5
   14dfc:	f012 fb15 	bl	2742a <bt_rand>
	link.tx.id = XACT_ID_MAX;
   14e00:	237f      	movs	r3, #127	; 0x7f
   14e02:	f885 3020 	strb.w	r3, [r5, #32]
	link.rx.id = XACT_ID_NVAL;
   14e06:	23ff      	movs	r3, #255	; 0xff
   14e08:	742b      	strb	r3, [r5, #16]
	link.cb = cb;
   14e0a:	9b04      	ldr	r3, [sp, #16]
   14e0c:	60ab      	str	r3, [r5, #8]
	link.cb_data = cb_data;
   14e0e:	9b05      	ldr	r3, [sp, #20]
   14e10:	60eb      	str	r3, [r5, #12]
	net_buf_simple_reset(link.rx.buf);
   14e12:	696b      	ldr	r3, [r5, #20]
	buf->data = buf->__buf;
   14e14:	689a      	ldr	r2, [r3, #8]
   14e16:	601a      	str	r2, [r3, #0]
	buf->len  = 0U;
   14e18:	809c      	strh	r4, [r3, #4]
	return bearer_ctl_send(ctl_buf_create(LINK_OPEN, uuid, 16, RETRANSMITS_RELIABLE));
   14e1a:	4631      	mov	r1, r6
   14e1c:	4623      	mov	r3, r4
   14e1e:	2210      	movs	r2, #16
   14e20:	4620      	mov	r0, r4
   14e22:	f7ff fc11 	bl	14648 <ctl_buf_create>
	if (!buf) {
   14e26:	4606      	mov	r6, r0
   14e28:	b1d0      	cbz	r0, 14e60 <prov_link_open+0xa4>
	prov_clear_tx();
   14e2a:	f7ff fb2d 	bl	14488 <prov_clear_tx>
	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
   14e2e:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   14e32:	2300      	movs	r3, #0
   14e34:	f105 0068 	add.w	r0, r5, #104	; 0x68
   14e38:	f00b faf4 	bl	20424 <k_work_reschedule>
   14e3c:	f014 f97a 	bl	29134 <z_impl_k_uptime_ticks>
   14e40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14e44:	fba0 3002 	umull	r3, r0, r0, r2
   14e48:	fb02 0101 	mla	r1, r2, r1, r0
   14e4c:	0bdb      	lsrs	r3, r3, #15
   14e4e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   14e52:	0bc9      	lsrs	r1, r1, #15
	link.tx.start = k_uptime_get();
   14e54:	e9c5 3106 	strd	r3, r1, [r5, #24]
	link.tx.buf[0] = buf;
   14e58:	626e      	str	r6, [r5, #36]	; 0x24
	send_reliable();
   14e5a:	f7ff fae1 	bl	14420 <send_reliable>
	return 0;
   14e5e:	e7bd      	b.n	14ddc <prov_link_open+0x20>
		return -ENOMEM;
   14e60:	f06f 040b 	mvn.w	r4, #11
	return bearer_ctl_send(ctl_buf_create(LINK_OPEN, uuid, 16, RETRANSMITS_RELIABLE));
   14e64:	e7ba      	b.n	14ddc <prov_link_open+0x20>
		return -EBUSY;
   14e66:	f06f 040f 	mvn.w	r4, #15
   14e6a:	e7b7      	b.n	14ddc <prov_link_open+0x20>
   14e6c:	00029a00 	.word	0x00029a00
   14e70:	00029870 	.word	0x00029870
   14e74:	0002c680 	.word	0x0002c680
   14e78:	200003d8 	.word	0x200003d8

00014e7c <buf_sent>:
   14e7c:	4b09      	ldr	r3, [pc, #36]	; (14ea4 <buf_sent+0x28>)
   14e7e:	f3bf 8f5b 	dmb	ish
   14e82:	e853 2f00 	ldrex	r2, [r3]
   14e86:	f022 0104 	bic.w	r1, r2, #4
   14e8a:	e843 1000 	strex	r0, r1, [r3]
   14e8e:	2800      	cmp	r0, #0
   14e90:	d1f7      	bne.n	14e82 <buf_sent+0x6>
   14e92:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(link.flags, ADV_LINK_CLOSING)) {
   14e96:	0753      	lsls	r3, r2, #29
   14e98:	d502      	bpl.n	14ea0 <buf_sent+0x24>
		close_link(PROV_BEARER_LINK_STATUS_SUCCESS);
   14e9a:	2000      	movs	r0, #0
   14e9c:	f7ff bbc2 	b.w	14624 <close_link>
}
   14ea0:	4770      	bx	lr
   14ea2:	bf00      	nop
   14ea4:	200003dc 	.word	0x200003dc

00014ea8 <ack_complete>:
   14ea8:	4b06      	ldr	r3, [pc, #24]	; (14ec4 <ack_complete+0x1c>)
   14eaa:	f3bf 8f5b 	dmb	ish
   14eae:	e853 2f00 	ldrex	r2, [r3]
   14eb2:	f022 0210 	bic.w	r2, r2, #16
   14eb6:	e843 2100 	strex	r1, r2, [r3]
   14eba:	2900      	cmp	r1, #0
   14ebc:	d1f7      	bne.n	14eae <ack_complete+0x6>
   14ebe:	f3bf 8f5b 	dmb	ish
}
   14ec2:	4770      	bx	lr
   14ec4:	200003dc 	.word	0x200003dc

00014ec8 <bt_mesh_pb_adv_recv>:
{
   14ec8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!link.cb) {
   14eca:	4d2b      	ldr	r5, [pc, #172]	; (14f78 <bt_mesh_pb_adv_recv+0xb0>)
   14ecc:	68ab      	ldr	r3, [r5, #8]
{
   14ece:	4604      	mov	r4, r0
	if (!link.cb) {
   14ed0:	2b00      	cmp	r3, #0
   14ed2:	d039      	beq.n	14f48 <bt_mesh_pb_adv_recv+0x80>
	if (buf->len < 6) {
   14ed4:	8881      	ldrh	r1, [r0, #4]
   14ed6:	2905      	cmp	r1, #5
   14ed8:	d80c      	bhi.n	14ef4 <bt_mesh_pb_adv_recv+0x2c>
   14eda:	4b28      	ldr	r3, [pc, #160]	; (14f7c <bt_mesh_pb_adv_recv+0xb4>)
   14edc:	4a28      	ldr	r2, [pc, #160]	; (14f80 <bt_mesh_pb_adv_recv+0xb8>)
		BT_WARN("Too short provisioning packet (len %u)", buf->len);
   14ede:	4829      	ldr	r0, [pc, #164]	; (14f84 <bt_mesh_pb_adv_recv+0xbc>)
   14ee0:	1ad2      	subs	r2, r2, r3
   14ee2:	08d2      	lsrs	r2, r2, #3
   14ee4:	0192      	lsls	r2, r2, #6
   14ee6:	f042 0202 	orr.w	r2, r2, #2
}
   14eea:	b003      	add	sp, #12
   14eec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		BT_WARN("Too short provisioning packet (len %u)", buf->len);
   14ef0:	f00c be08 	b.w	21b04 <log_1>
	rx.link_id = net_buf_simple_pull_be32(buf);
   14ef4:	f013 fa50 	bl	28398 <net_buf_simple_pull_be32>
   14ef8:	9000      	str	r0, [sp, #0]
	rx.xact_id = net_buf_simple_pull_u8(buf);
   14efa:	4620      	mov	r0, r4
   14efc:	f013 fa24 	bl	28348 <net_buf_simple_pull_u8>
   14f00:	f88d 0004 	strb.w	r0, [sp, #4]
	rx.gpc = net_buf_simple_pull_u8(buf);
   14f04:	4620      	mov	r0, r4
   14f06:	f013 fa1f 	bl	28348 <net_buf_simple_pull_u8>
   14f0a:	f88d 0005 	strb.w	r0, [sp, #5]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14f0e:	f7ff faff 	bl	14510 <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, ADV_LINK_ACTIVE) && link.id != rx.link_id) {
   14f12:	07c3      	lsls	r3, r0, #31
   14f14:	d503      	bpl.n	14f1e <bt_mesh_pb_adv_recv+0x56>
   14f16:	682a      	ldr	r2, [r5, #0]
   14f18:	9b00      	ldr	r3, [sp, #0]
   14f1a:	429a      	cmp	r2, r3
   14f1c:	d114      	bne.n	14f48 <bt_mesh_pb_adv_recv+0x80>
	if (buf->len < gen_prov[GPCF(rx->gpc)].min_len) {
   14f1e:	f89d 1005 	ldrb.w	r1, [sp, #5]
   14f22:	4a19      	ldr	r2, [pc, #100]	; (14f88 <bt_mesh_pb_adv_recv+0xc0>)
   14f24:	88a0      	ldrh	r0, [r4, #4]
   14f26:	f001 0103 	and.w	r1, r1, #3
   14f2a:	eb02 03c1 	add.w	r3, r2, r1, lsl #3
   14f2e:	795b      	ldrb	r3, [r3, #5]
   14f30:	4298      	cmp	r0, r3
   14f32:	d20b      	bcs.n	14f4c <bt_mesh_pb_adv_recv+0x84>
   14f34:	4a12      	ldr	r2, [pc, #72]	; (14f80 <bt_mesh_pb_adv_recv+0xb8>)
   14f36:	4b11      	ldr	r3, [pc, #68]	; (14f7c <bt_mesh_pb_adv_recv+0xb4>)
		BT_ERR("Too short GPC message type %u", GPCF(rx->gpc));
   14f38:	4814      	ldr	r0, [pc, #80]	; (14f8c <bt_mesh_pb_adv_recv+0xc4>)
   14f3a:	1ad2      	subs	r2, r2, r3
   14f3c:	08d2      	lsrs	r2, r2, #3
   14f3e:	0192      	lsls	r2, r2, #6
   14f40:	f042 0201 	orr.w	r2, r2, #1
   14f44:	f00c fdde 	bl	21b04 <log_1>
}
   14f48:	b003      	add	sp, #12
   14f4a:	bd30      	pop	{r4, r5, pc}
   14f4c:	f7ff fae0 	bl	14510 <atomic_get.constprop.0>
	if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE) &&
   14f50:	f010 0f01 	tst.w	r0, #1
   14f54:	f89d 3005 	ldrb.w	r3, [sp, #5]
   14f58:	d106      	bne.n	14f68 <bt_mesh_pb_adv_recv+0xa0>
	    gen_prov[GPCF(rx->gpc)].require_link) {
   14f5a:	f003 0103 	and.w	r1, r3, #3
   14f5e:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
	if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE) &&
   14f62:	7909      	ldrb	r1, [r1, #4]
   14f64:	2900      	cmp	r1, #0
   14f66:	d1ef      	bne.n	14f48 <bt_mesh_pb_adv_recv+0x80>
	gen_prov[GPCF(rx->gpc)].func(rx, buf);
   14f68:	f003 0303 	and.w	r3, r3, #3
   14f6c:	4621      	mov	r1, r4
   14f6e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   14f72:	4668      	mov	r0, sp
   14f74:	4798      	blx	r3
   14f76:	e7e7      	b.n	14f48 <bt_mesh_pb_adv_recv+0x80>
   14f78:	200003d8 	.word	0x200003d8
   14f7c:	00029870 	.word	0x00029870
   14f80:	00029a00 	.word	0x00029a00
   14f84:	0002e9ae 	.word	0x0002e9ae
   14f88:	0002a554 	.word	0x0002a554
   14f8c:	0002e9d5 	.word	0x0002e9d5

00014f90 <pb_adv_init>:

void pb_adv_init(void)
{
   14f90:	b510      	push	{r4, lr}
	k_work_init_delayable(&link.prot_timer, protocol_timeout);
   14f92:	4c06      	ldr	r4, [pc, #24]	; (14fac <pb_adv_init+0x1c>)
   14f94:	4906      	ldr	r1, [pc, #24]	; (14fb0 <pb_adv_init+0x20>)
   14f96:	f104 0068 	add.w	r0, r4, #104	; 0x68
   14f9a:	f013 ff02 	bl	28da2 <k_work_init_delayable>
	k_work_init_delayable(&link.tx.retransmit, prov_retransmit);
   14f9e:	f104 0038 	add.w	r0, r4, #56	; 0x38
   14fa2:	4904      	ldr	r1, [pc, #16]	; (14fb4 <pb_adv_init+0x24>)
}
   14fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&link.tx.retransmit, prov_retransmit);
   14fa8:	f013 befb 	b.w	28da2 <k_work_init_delayable>
   14fac:	200003d8 	.word	0x200003d8
   14fb0:	000147e9 	.word	0x000147e9
   14fb4:	00014809 	.word	0x00014809

00014fb8 <buf_send_end>:
	return 0;
}

static void buf_send_end(struct bt_conn *conn, void *user_data)
{
	if (link.comp.cb) {
   14fb8:	4a03      	ldr	r2, [pc, #12]	; (14fc8 <buf_send_end+0x10>)
   14fba:	68d3      	ldr	r3, [r2, #12]
   14fbc:	b113      	cbz	r3, 14fc4 <buf_send_end+0xc>
		link.comp.cb(0, link.comp.cb_data);
   14fbe:	6911      	ldr	r1, [r2, #16]
   14fc0:	2000      	movs	r0, #0
   14fc2:	4718      	bx	r3
	}
}
   14fc4:	4770      	bx	lr
   14fc6:	bf00      	nop
   14fc8:	20001b68 	.word	0x20001b68

00014fcc <reset_state>:
{
   14fcc:	b510      	push	{r4, lr}
	if (link.conn) {
   14fce:	4c07      	ldr	r4, [pc, #28]	; (14fec <reset_state+0x20>)
   14fd0:	6820      	ldr	r0, [r4, #0]
   14fd2:	b118      	cbz	r0, 14fdc <reset_state+0x10>
		bt_conn_unref(link.conn);
   14fd4:	f00f fc00 	bl	247d8 <bt_conn_unref>
		link.conn = NULL;
   14fd8:	2300      	movs	r3, #0
   14fda:	6023      	str	r3, [r4, #0]
	(void)k_work_cancel_delayable(&link.prot_timer);
   14fdc:	4804      	ldr	r0, [pc, #16]	; (14ff0 <reset_state+0x24>)
   14fde:	f013 ff00 	bl	28de2 <k_work_cancel_delayable>
	link.rx_buf = bt_mesh_proxy_get_buf();
   14fe2:	f000 fbd7 	bl	15794 <bt_mesh_proxy_get_buf>
   14fe6:	6160      	str	r0, [r4, #20]
}
   14fe8:	bd10      	pop	{r4, pc}
   14fea:	bf00      	nop
   14fec:	20001b68 	.word	0x20001b68
   14ff0:	20001b80 	.word	0x20001b80

00014ff4 <link_closed>:
{
   14ff4:	b570      	push	{r4, r5, r6, lr}
	const struct prov_bearer_cb *cb = link.cb;
   14ff6:	4b06      	ldr	r3, [pc, #24]	; (15010 <link_closed+0x1c>)
	void *cb_data = link.cb_data;
   14ff8:	e9d3 6501 	ldrd	r6, r5, [r3, #4]
{
   14ffc:	4604      	mov	r4, r0
	reset_state();
   14ffe:	f7ff ffe5 	bl	14fcc <reset_state>
	cb->link_closed(&pb_gatt, cb_data, status);
   15002:	6873      	ldr	r3, [r6, #4]
   15004:	4803      	ldr	r0, [pc, #12]	; (15014 <link_closed+0x20>)
   15006:	4622      	mov	r2, r4
   15008:	4629      	mov	r1, r5
}
   1500a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb->link_closed(&pb_gatt, cb_data, status);
   1500e:	4718      	bx	r3
   15010:	20001b68 	.word	0x20001b68
   15014:	0002a58c 	.word	0x0002a58c

00015018 <protocol_timeout>:
	if (!link.conn) {
   15018:	4b03      	ldr	r3, [pc, #12]	; (15028 <protocol_timeout+0x10>)
   1501a:	681b      	ldr	r3, [r3, #0]
   1501c:	b113      	cbz	r3, 15024 <protocol_timeout+0xc>
	link_closed(PROV_BEARER_LINK_STATUS_TIMEOUT);
   1501e:	2001      	movs	r0, #1
   15020:	f7ff bfe8 	b.w	14ff4 <link_closed>
}
   15024:	4770      	bx	lr
   15026:	bf00      	nop
   15028:	20001b68 	.word	0x20001b68

0001502c <buf_send>:

static int buf_send(struct net_buf_simple *buf, prov_bearer_send_complete_t cb,
		    void *cb_data)
{
   1502c:	b570      	push	{r4, r5, r6, lr}
	if (!link.conn) {
   1502e:	4c0c      	ldr	r4, [pc, #48]	; (15060 <buf_send+0x34>)
   15030:	6823      	ldr	r3, [r4, #0]
{
   15032:	4605      	mov	r5, r0
	if (!link.conn) {
   15034:	b183      	cbz	r3, 15058 <buf_send+0x2c>
		return -ENOTCONN;
	}

	link.comp.cb = cb;
	link.comp.cb_data = cb_data;
   15036:	e9c4 1203 	strd	r1, r2, [r4, #12]

	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
   1503a:	2300      	movs	r3, #0
   1503c:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   15040:	f104 0018 	add.w	r0, r4, #24
   15044:	f00b f9ee 	bl	20424 <k_work_reschedule>

	return bt_mesh_pb_gatt_send(link.conn, buf, buf_send_end, NULL);
   15048:	6820      	ldr	r0, [r4, #0]
   1504a:	4a06      	ldr	r2, [pc, #24]	; (15064 <buf_send+0x38>)
   1504c:	4629      	mov	r1, r5
   1504e:	2300      	movs	r3, #0
}
   15050:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_mesh_pb_gatt_send(link.conn, buf, buf_send_end, NULL);
   15054:	f000 bbfa 	b.w	1584c <bt_mesh_pb_gatt_send>
}
   15058:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1505c:	bd70      	pop	{r4, r5, r6, pc}
   1505e:	bf00      	nop
   15060:	20001b68 	.word	0x20001b68
   15064:	00014fb9 	.word	0x00014fb9

00015068 <link_accept>:
{
   15068:	b538      	push	{r3, r4, r5, lr}
   1506a:	460c      	mov	r4, r1
   1506c:	4605      	mov	r5, r0
	(void)bt_mesh_proxy_prov_enable();
   1506e:	f000 fb9b 	bl	157a8 <bt_mesh_proxy_prov_enable>
	bt_mesh_adv_update();
   15072:	f7fe f959 	bl	13328 <bt_mesh_adv_update>
	link.cb = cb;
   15076:	4b02      	ldr	r3, [pc, #8]	; (15080 <link_accept+0x18>)
}
   15078:	2000      	movs	r0, #0
	link.cb_data = cb_data;
   1507a:	e9c3 5401 	strd	r5, r4, [r3, #4]
}
   1507e:	bd38      	pop	{r3, r4, r5, pc}
   15080:	20001b68 	.word	0x20001b68

00015084 <bt_mesh_pb_gatt_recv>:
{
   15084:	b538      	push	{r3, r4, r5, lr}
	if (link.conn != conn || !link.cb) {
   15086:	4c19      	ldr	r4, [pc, #100]	; (150ec <bt_mesh_pb_gatt_recv+0x68>)
   15088:	6823      	ldr	r3, [r4, #0]
   1508a:	4283      	cmp	r3, r0
{
   1508c:	460d      	mov	r5, r1
	if (link.conn != conn || !link.cb) {
   1508e:	d101      	bne.n	15094 <bt_mesh_pb_gatt_recv+0x10>
   15090:	6863      	ldr	r3, [r4, #4]
   15092:	b963      	cbnz	r3, 150ae <bt_mesh_pb_gatt_recv+0x2a>
   15094:	4b16      	ldr	r3, [pc, #88]	; (150f0 <bt_mesh_pb_gatt_recv+0x6c>)
   15096:	4917      	ldr	r1, [pc, #92]	; (150f4 <bt_mesh_pb_gatt_recv+0x70>)
		BT_WARN("Data for unexpected connection");
   15098:	4817      	ldr	r0, [pc, #92]	; (150f8 <bt_mesh_pb_gatt_recv+0x74>)
   1509a:	1ac9      	subs	r1, r1, r3
   1509c:	08c9      	lsrs	r1, r1, #3
   1509e:	0189      	lsls	r1, r1, #6
   150a0:	f041 0102 	orr.w	r1, r1, #2
   150a4:	f00c fd21 	bl	21aea <log_0>
		return -ENOTCONN;
   150a8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   150ac:	bd38      	pop	{r3, r4, r5, pc}
	if (buf->len < 1) {
   150ae:	8889      	ldrh	r1, [r1, #4]
   150b0:	b961      	cbnz	r1, 150cc <bt_mesh_pb_gatt_recv+0x48>
   150b2:	4b0f      	ldr	r3, [pc, #60]	; (150f0 <bt_mesh_pb_gatt_recv+0x6c>)
   150b4:	4a0f      	ldr	r2, [pc, #60]	; (150f4 <bt_mesh_pb_gatt_recv+0x70>)
		BT_WARN("Too short provisioning packet (len %u)", buf->len);
   150b6:	4811      	ldr	r0, [pc, #68]	; (150fc <bt_mesh_pb_gatt_recv+0x78>)
   150b8:	1ad2      	subs	r2, r2, r3
   150ba:	08d2      	lsrs	r2, r2, #3
   150bc:	0192      	lsls	r2, r2, #6
   150be:	f042 0202 	orr.w	r2, r2, #2
   150c2:	f00c fd1f 	bl	21b04 <log_1>
		return -EINVAL;
   150c6:	f06f 0015 	mvn.w	r0, #21
   150ca:	e7ef      	b.n	150ac <bt_mesh_pb_gatt_recv+0x28>
	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
   150cc:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   150d0:	2300      	movs	r3, #0
   150d2:	f104 0018 	add.w	r0, r4, #24
   150d6:	f00b f9a5 	bl	20424 <k_work_reschedule>
	link.cb->recv(&pb_gatt, link.cb_data, buf);
   150da:	6863      	ldr	r3, [r4, #4]
   150dc:	4808      	ldr	r0, [pc, #32]	; (15100 <bt_mesh_pb_gatt_recv+0x7c>)
   150de:	68db      	ldr	r3, [r3, #12]
   150e0:	68a1      	ldr	r1, [r4, #8]
   150e2:	462a      	mov	r2, r5
   150e4:	4798      	blx	r3
	return 0;
   150e6:	2000      	movs	r0, #0
   150e8:	e7e0      	b.n	150ac <bt_mesh_pb_gatt_recv+0x28>
   150ea:	bf00      	nop
   150ec:	20001b68 	.word	0x20001b68
   150f0:	00029870 	.word	0x00029870
   150f4:	00029a08 	.word	0x00029a08
   150f8:	0002ea02 	.word	0x0002ea02
   150fc:	0002e9ae 	.word	0x0002e9ae
   15100:	0002a58c 	.word	0x0002a58c

00015104 <bt_mesh_pb_gatt_open>:
{
   15104:	b538      	push	{r3, r4, r5, lr}
	if (link.conn) {
   15106:	4d0c      	ldr	r5, [pc, #48]	; (15138 <bt_mesh_pb_gatt_open+0x34>)
   15108:	682c      	ldr	r4, [r5, #0]
   1510a:	b98c      	cbnz	r4, 15130 <bt_mesh_pb_gatt_open+0x2c>
	link.conn = bt_conn_ref(conn);
   1510c:	f00f fb49 	bl	247a2 <bt_conn_ref>
   15110:	4603      	mov	r3, r0
   15112:	4628      	mov	r0, r5
	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
   15114:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
	link.conn = bt_conn_ref(conn);
   15118:	f840 3b18 	str.w	r3, [r0], #24
	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
   1511c:	2300      	movs	r3, #0
   1511e:	f00b f981 	bl	20424 <k_work_reschedule>
	link.cb->link_opened(&pb_gatt, link.cb_data);
   15122:	686b      	ldr	r3, [r5, #4]
   15124:	4805      	ldr	r0, [pc, #20]	; (1513c <bt_mesh_pb_gatt_open+0x38>)
   15126:	681b      	ldr	r3, [r3, #0]
   15128:	68a9      	ldr	r1, [r5, #8]
   1512a:	4798      	blx	r3
	return 0;
   1512c:	4620      	mov	r0, r4
}
   1512e:	bd38      	pop	{r3, r4, r5, pc}
		return -EBUSY;
   15130:	f06f 000f 	mvn.w	r0, #15
   15134:	e7fb      	b.n	1512e <bt_mesh_pb_gatt_open+0x2a>
   15136:	bf00      	nop
   15138:	20001b68 	.word	0x20001b68
   1513c:	0002a58c 	.word	0x0002a58c

00015140 <bt_mesh_pb_gatt_close>:
{
   15140:	b508      	push	{r3, lr}
	if (link.conn != conn) {
   15142:	4b06      	ldr	r3, [pc, #24]	; (1515c <bt_mesh_pb_gatt_close+0x1c>)
   15144:	681b      	ldr	r3, [r3, #0]
   15146:	4283      	cmp	r3, r0
   15148:	d104      	bne.n	15154 <bt_mesh_pb_gatt_close+0x14>
	link_closed(PROV_BEARER_LINK_STATUS_SUCCESS);
   1514a:	2000      	movs	r0, #0
   1514c:	f7ff ff52 	bl	14ff4 <link_closed>
	return 0;
   15150:	2000      	movs	r0, #0
}
   15152:	bd08      	pop	{r3, pc}
		return -ENOTCONN;
   15154:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   15158:	e7fb      	b.n	15152 <bt_mesh_pb_gatt_close+0x12>
   1515a:	bf00      	nop
   1515c:	20001b68 	.word	0x20001b68

00015160 <pb_gatt_init>:
	/* No action */
}

void pb_gatt_init(void)
{
	k_work_init_delayable(&link.prot_timer, protocol_timeout);
   15160:	4901      	ldr	r1, [pc, #4]	; (15168 <pb_gatt_init+0x8>)
   15162:	4802      	ldr	r0, [pc, #8]	; (1516c <pb_gatt_init+0xc>)
   15164:	f013 be1d 	b.w	28da2 <k_work_init_delayable>
   15168:	00015019 	.word	0x00015019
   1516c:	20001b80 	.word	0x20001b80

00015170 <find_client>:
static struct bt_mesh_proxy_client *find_client(struct bt_conn *conn)
{
	int i;

	for (i = 0; i < ARRAY_SIZE(clients); i++) {
		if (clients[i].cli.conn == conn) {
   15170:	4b03      	ldr	r3, [pc, #12]	; (15180 <find_client+0x10>)
   15172:	681a      	ldr	r2, [r3, #0]
			return &clients[i];
		}
	}

	return NULL;
}
   15174:	4282      	cmp	r2, r0
   15176:	bf0c      	ite	eq
   15178:	4618      	moveq	r0, r3
   1517a:	2000      	movne	r0, #0
   1517c:	4770      	bx	lr
   1517e:	bf00      	nop
   15180:	20000470 	.word	0x20000470

00015184 <proxy_send_beacons>:
{
	struct bt_mesh_proxy_client *client;

	client = CONTAINER_OF(work, struct bt_mesh_proxy_client, send_beacons);

	(void)bt_mesh_subnet_find(send_beacon_cb, client);
   15184:	f1a0 0158 	sub.w	r1, r0, #88	; 0x58
   15188:	4801      	ldr	r0, [pc, #4]	; (15190 <proxy_send_beacons+0xc>)
   1518a:	f7f8 b9c1 	b.w	d510 <bt_mesh_subnet_find>
   1518e:	bf00      	nop
   15190:	00026abb 	.word	0x00026abb

00015194 <send_filter_status>:
{
   15194:	b570      	push	{r4, r5, r6, lr}
	struct bt_mesh_net_tx tx = {
   15196:	f851 3b04 	ldr.w	r3, [r1], #4
{
   1519a:	b086      	sub	sp, #24
	struct bt_mesh_net_tx tx = {
   1519c:	2600      	movs	r6, #0
{
   1519e:	4614      	mov	r4, r2
   151a0:	4605      	mov	r5, r0
	struct bt_mesh_net_tx tx = {
   151a2:	e9cd 3103 	strd	r3, r1, [sp, #12]
   151a6:	9605      	str	r6, [sp, #20]
		.src = bt_mesh_primary_addr(),
   151a8:	f7fb fa14 	bl	105d4 <bt_mesh_primary_addr>
	tx.ctx->addr = BT_MESH_ADDR_UNASSIGNED;
   151ac:	9b04      	ldr	r3, [sp, #16]
	struct bt_mesh_net_tx tx = {
   151ae:	f8ad 0014 	strh.w	r0, [sp, #20]
	tx.ctx->addr = BT_MESH_ADDR_UNASSIGNED;
   151b2:	809e      	strh	r6, [r3, #4]
	buf->data = buf->__buf;
   151b4:	68a3      	ldr	r3, [r4, #8]
   151b6:	6023      	str	r3, [r4, #0]
	net_buf_simple_reserve(buf, 10);
   151b8:	210a      	movs	r1, #10
   151ba:	4620      	mov	r0, r4
	buf->len  = 0U;
   151bc:	80a6      	strh	r6, [r4, #4]
   151be:	f012 ffaa 	bl	28116 <net_buf_simple_reserve>
	net_buf_simple_add_u8(buf, CFG_FILTER_STATUS);
   151c2:	2103      	movs	r1, #3
   151c4:	4620      	mov	r0, r4
   151c6:	f013 f84e 	bl	28266 <net_buf_simple_add_u8>
	if (client->filter_type == ACCEPT) {
   151ca:	f895 3056 	ldrb.w	r3, [r5, #86]	; 0x56
   151ce:	2b01      	cmp	r3, #1
		net_buf_simple_add_u8(buf, 0x00);
   151d0:	bf0c      	ite	eq
   151d2:	4631      	moveq	r1, r6
		net_buf_simple_add_u8(buf, 0x01);
   151d4:	2101      	movne	r1, #1
   151d6:	4620      	mov	r0, r4
   151d8:	f013 f845 	bl	28266 <net_buf_simple_add_u8>
		if (client->filter[i] != BT_MESH_ADDR_UNASSIGNED) {
   151dc:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
   151e0:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
	for (filter_size = 0U, i = 0; i < ARRAY_SIZE(client->filter); i++) {
   151e4:	3900      	subs	r1, #0
   151e6:	bf18      	it	ne
   151e8:	2101      	movne	r1, #1
		if (client->filter[i] != BT_MESH_ADDR_UNASSIGNED) {
   151ea:	b103      	cbz	r3, 151ee <send_filter_status+0x5a>
			filter_size++;
   151ec:	3101      	adds	r1, #1
		if (client->filter[i] != BT_MESH_ADDR_UNASSIGNED) {
   151ee:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   151f2:	b10b      	cbz	r3, 151f8 <send_filter_status+0x64>
			filter_size++;
   151f4:	3101      	adds	r1, #1
   151f6:	b289      	uxth	r1, r1
	net_buf_simple_add_be16(buf, filter_size);
   151f8:	4620      	mov	r0, r4
   151fa:	f013 f846 	bl	2828a <net_buf_simple_add_be16>
	err = bt_mesh_net_encode(&tx, buf, true);
   151fe:	2201      	movs	r2, #1
   15200:	4621      	mov	r1, r4
   15202:	a803      	add	r0, sp, #12
   15204:	f7f7 fb8e 	bl	c924 <bt_mesh_net_encode>
	if (err) {
   15208:	4603      	mov	r3, r0
   1520a:	b160      	cbz	r0, 15226 <send_filter_status+0x92>
   1520c:	490f      	ldr	r1, [pc, #60]	; (1524c <send_filter_status+0xb8>)
   1520e:	4a10      	ldr	r2, [pc, #64]	; (15250 <send_filter_status+0xbc>)
   15210:	1a52      	subs	r2, r2, r1
   15212:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Encoding Proxy cfg message failed (err %d)", err);
   15214:	0192      	lsls	r2, r2, #6
   15216:	4601      	mov	r1, r0
   15218:	480e      	ldr	r0, [pc, #56]	; (15254 <send_filter_status+0xc0>)
   1521a:	f042 0201 	orr.w	r2, r2, #1
		BT_ERR("Failed to send proxy cfg message (err %d)", err);
   1521e:	f00c fc71 	bl	21b04 <log_1>
}
   15222:	b006      	add	sp, #24
   15224:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_mesh_proxy_msg_send(&client->cli, BT_MESH_PROXY_CONFIG,
   15226:	9000      	str	r0, [sp, #0]
   15228:	2102      	movs	r1, #2
   1522a:	4622      	mov	r2, r4
   1522c:	4628      	mov	r0, r5
   1522e:	f011 fcc7 	bl	26bc0 <bt_mesh_proxy_msg_send>
	if (err) {
   15232:	4601      	mov	r1, r0
   15234:	2800      	cmp	r0, #0
   15236:	d0f4      	beq.n	15222 <send_filter_status+0x8e>
   15238:	4a05      	ldr	r2, [pc, #20]	; (15250 <send_filter_status+0xbc>)
   1523a:	4b04      	ldr	r3, [pc, #16]	; (1524c <send_filter_status+0xb8>)
		BT_ERR("Failed to send proxy cfg message (err %d)", err);
   1523c:	4806      	ldr	r0, [pc, #24]	; (15258 <send_filter_status+0xc4>)
   1523e:	1ad2      	subs	r2, r2, r3
   15240:	08d2      	lsrs	r2, r2, #3
   15242:	0192      	lsls	r2, r2, #6
   15244:	f042 0201 	orr.w	r2, r2, #1
   15248:	e7e9      	b.n	1521e <send_filter_status+0x8a>
   1524a:	bf00      	nop
   1524c:	00029870 	.word	0x00029870
   15250:	000299c8 	.word	0x000299c8
   15254:	0002ea31 	.word	0x0002ea31
   15258:	0002ea5c 	.word	0x0002ea5c

0001525c <proxy_send>:
#endif /* CONFIG_BT_MESH_PB_GATT */

static int proxy_send(struct bt_conn *conn,
		      const void *data, uint16_t len,
		      bt_gatt_complete_func_t end, void *user_data)
{
   1525c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15260:	461d      	mov	r5, r3
	const struct bt_gatt_attr *attr = NULL;

	BT_DBG("%u bytes: %s", len, bt_hex(data, len));

#if defined(CONFIG_BT_MESH_GATT_PROXY)
	if (gatt_svc == MESH_GATT_PROXY) {
   15262:	4b12      	ldr	r3, [pc, #72]	; (152ac <proxy_send+0x50>)
   15264:	781b      	ldrb	r3, [r3, #0]
   15266:	2b02      	cmp	r3, #2
{
   15268:	b086      	sub	sp, #24
   1526a:	4604      	mov	r4, r0
   1526c:	460f      	mov	r7, r1
   1526e:	4616      	mov	r6, r2
	if (gatt_svc == MESH_GATT_PROXY) {
   15270:	d016      	beq.n	152a0 <proxy_send+0x44>
		attr = &proxy_attrs[3];
	}
#endif /* CONFIG_BT_MESH_GATT_PROXY */
#if defined(CONFIG_BT_MESH_PB_GATT)
	if (gatt_svc == MESH_GATT_PROV) {
   15272:	2b01      	cmp	r3, #1
   15274:	d117      	bne.n	152a6 <proxy_send+0x4a>
		attr = &prov_attrs[3];
   15276:	f8df 8038 	ldr.w	r8, [pc, #56]	; 152b0 <proxy_send+0x54>

	if (!attr) {
		return -ENOENT;
	}

	struct bt_gatt_notify_params params = {
   1527a:	2100      	movs	r1, #0
   1527c:	2210      	movs	r2, #16
   1527e:	4668      	mov	r0, sp
   15280:	f00e fd9d 	bl	23dbe <memset>
   15284:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15286:	f8ad 600c 	strh.w	r6, [sp, #12]
		.attr = attr,
		.user_data = user_data,
		.func = end,
	};

	return bt_gatt_notify_cb(conn, &params);
   1528a:	4669      	mov	r1, sp
   1528c:	4620      	mov	r0, r4
	struct bt_gatt_notify_params params = {
   1528e:	e9cd 8701 	strd	r8, r7, [sp, #4]
   15292:	9504      	str	r5, [sp, #16]
   15294:	9305      	str	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
   15296:	f7f5 fdfd 	bl	ae94 <bt_gatt_notify_cb>
}
   1529a:	b006      	add	sp, #24
   1529c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = &proxy_attrs[3];
   152a0:	f8df 8010 	ldr.w	r8, [pc, #16]	; 152b4 <proxy_send+0x58>
   152a4:	e7e9      	b.n	1527a <proxy_send+0x1e>
		return -ENOENT;
   152a6:	f06f 0001 	mvn.w	r0, #1
   152aa:	e7f6      	b.n	1529a <proxy_send+0x3e>
   152ac:	200038a8 	.word	0x200038a8
   152b0:	20000a88 	.word	0x20000a88
   152b4:	20000b24 	.word	0x20000b24

000152b8 <gatt_recv>:
{
   152b8:	b538      	push	{r3, r4, r5, lr}
   152ba:	460c      	mov	r4, r1
   152bc:	461d      	mov	r5, r3
   152be:	4611      	mov	r1, r2
	struct bt_mesh_proxy_client *client = find_client(conn);
   152c0:	f7ff ff56 	bl	15170 <find_client>
	if (!client) {
   152c4:	b340      	cbz	r0, 15318 <gatt_recv+0x60>
	if (len < 1) {
   152c6:	b965      	cbnz	r5, 152e2 <gatt_recv+0x2a>
   152c8:	4915      	ldr	r1, [pc, #84]	; (15320 <gatt_recv+0x68>)
   152ca:	4b16      	ldr	r3, [pc, #88]	; (15324 <gatt_recv+0x6c>)
		BT_WARN("Too small Proxy PDU");
   152cc:	4816      	ldr	r0, [pc, #88]	; (15328 <gatt_recv+0x70>)
   152ce:	1ac9      	subs	r1, r1, r3
   152d0:	08c9      	lsrs	r1, r1, #3
   152d2:	0189      	lsls	r1, r1, #6
   152d4:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("Proxy PDU type doesn't match GATT service");
   152d8:	f00c fc07 	bl	21aea <log_0>
		return -EINVAL;
   152dc:	f06f 0015 	mvn.w	r0, #21
}
   152e0:	bd38      	pop	{r3, r4, r5, pc}
	if (ATTR_IS_PROV(attr) != (PDU_TYPE(data) == BT_MESH_PROXY_PROV)) {
   152e2:	68e3      	ldr	r3, [r4, #12]
   152e4:	780c      	ldrb	r4, [r1, #0]
   152e6:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   152ea:	3b00      	subs	r3, #0
   152ec:	f1a4 0203 	sub.w	r2, r4, #3
   152f0:	bf18      	it	ne
   152f2:	2301      	movne	r3, #1
   152f4:	4254      	negs	r4, r2
   152f6:	4154      	adcs	r4, r2
   152f8:	42a3      	cmp	r3, r4
   152fa:	d008      	beq.n	1530e <gatt_recv+0x56>
   152fc:	4908      	ldr	r1, [pc, #32]	; (15320 <gatt_recv+0x68>)
   152fe:	4b09      	ldr	r3, [pc, #36]	; (15324 <gatt_recv+0x6c>)
		BT_WARN("Proxy PDU type doesn't match GATT service");
   15300:	480a      	ldr	r0, [pc, #40]	; (1532c <gatt_recv+0x74>)
   15302:	1ac9      	subs	r1, r1, r3
   15304:	08c9      	lsrs	r1, r1, #3
   15306:	0189      	lsls	r1, r1, #6
   15308:	f041 0102 	orr.w	r1, r1, #2
   1530c:	e7e4      	b.n	152d8 <gatt_recv+0x20>
	return bt_mesh_proxy_msg_recv(&client->cli, buf, len);
   1530e:	462a      	mov	r2, r5
}
   15310:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_mesh_proxy_msg_recv(&client->cli, buf, len);
   15314:	f000 bd20 	b.w	15d58 <bt_mesh_proxy_msg_recv>
		return -ENOTCONN;
   15318:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1531c:	e7e0      	b.n	152e0 <gatt_recv+0x28>
   1531e:	bf00      	nop
   15320:	000299c8 	.word	0x000299c8
   15324:	00029870 	.word	0x00029870
   15328:	0002ea86 	.word	0x0002ea86
   1532c:	0002ea9a 	.word	0x0002ea9a

00015330 <gatt_connected>:
{
   15330:	b530      	push	{r4, r5, lr}
   15332:	b089      	sub	sp, #36	; 0x24
	bt_conn_get_info(conn, &info);
   15334:	a901      	add	r1, sp, #4
{
   15336:	4605      	mov	r5, r0
	bt_conn_get_info(conn, &info);
   15338:	f7f3 f95c 	bl	85f4 <bt_conn_get_info>
	if (info.role != BT_CONN_ROLE_PERIPHERAL) {
   1533c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   15340:	2b01      	cmp	r3, #1
   15342:	d116      	bne.n	15372 <gatt_connected+0x42>
	conn_count++;
   15344:	4a15      	ldr	r2, [pc, #84]	; (1539c <gatt_connected+0x6c>)
   15346:	6813      	ldr	r3, [r2, #0]
   15348:	3301      	adds	r3, #1
	if (conn_count < CONFIG_BT_MAX_CONN) {
   1534a:	2b00      	cmp	r3, #0
	conn_count++;
   1534c:	6013      	str	r3, [r2, #0]
	if (conn_count < CONFIG_BT_MAX_CONN) {
   1534e:	dc01      	bgt.n	15354 <gatt_connected+0x24>
		bt_mesh_adv_update();
   15350:	f7fd ffea 	bl	13328 <bt_mesh_adv_update>
	client = find_client(NULL);
   15354:	2000      	movs	r0, #0
   15356:	f7ff ff0b 	bl	15170 <find_client>
	if (!client) {
   1535a:	4604      	mov	r4, r0
   1535c:	b958      	cbnz	r0, 15376 <gatt_connected+0x46>
   1535e:	4910      	ldr	r1, [pc, #64]	; (153a0 <gatt_connected+0x70>)
   15360:	4b10      	ldr	r3, [pc, #64]	; (153a4 <gatt_connected+0x74>)
		BT_ERR("No free Proxy Client objects");
   15362:	4811      	ldr	r0, [pc, #68]	; (153a8 <gatt_connected+0x78>)
   15364:	1ac9      	subs	r1, r1, r3
   15366:	08c9      	lsrs	r1, r1, #3
   15368:	0189      	lsls	r1, r1, #6
   1536a:	f041 0101 	orr.w	r1, r1, #1
   1536e:	f00c fbbc 	bl	21aea <log_0>
}
   15372:	b009      	add	sp, #36	; 0x24
   15374:	bd30      	pop	{r4, r5, pc}
	client->cli.conn = bt_conn_ref(conn);
   15376:	4628      	mov	r0, r5
   15378:	f00f fa13 	bl	247a2 <bt_conn_ref>
	client->filter_type = NONE;
   1537c:	2500      	movs	r5, #0
	client->cli.conn = bt_conn_ref(conn);
   1537e:	6020      	str	r0, [r4, #0]
	client->filter_type = NONE;
   15380:	f884 5056 	strb.w	r5, [r4, #86]	; 0x56
	(void)memset(client->filter, 0, sizeof(client->filter));
   15384:	2206      	movs	r2, #6
   15386:	4629      	mov	r1, r5
   15388:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1538c:	f00e fd17 	bl	23dbe <memset>
	buf->data = buf->__buf;
   15390:	6ca3      	ldr	r3, [r4, #72]	; 0x48
	buf->len  = 0U;
   15392:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
	buf->data = buf->__buf;
   15396:	6423      	str	r3, [r4, #64]	; 0x40
   15398:	e7eb      	b.n	15372 <gatt_connected+0x42>
   1539a:	bf00      	nop
   1539c:	20002498 	.word	0x20002498
   153a0:	000299c8 	.word	0x000299c8
   153a4:	00029870 	.word	0x00029870
   153a8:	0002eac4 	.word	0x0002eac4

000153ac <prov_ccc_write.part.0>:
static ssize_t prov_ccc_write(struct bt_conn *conn,
   153ac:	b508      	push	{r3, lr}
   153ae:	4a07      	ldr	r2, [pc, #28]	; (153cc <prov_ccc_write.part.0+0x20>)
   153b0:	4b07      	ldr	r3, [pc, #28]	; (153d0 <prov_ccc_write.part.0+0x24>)
   153b2:	1ad2      	subs	r2, r2, r3
   153b4:	08d2      	lsrs	r2, r2, #3
		BT_WARN("Client wrote 0x%04x instead enabling notify", value);
   153b6:	0192      	lsls	r2, r2, #6
static ssize_t prov_ccc_write(struct bt_conn *conn,
   153b8:	4601      	mov	r1, r0
		BT_WARN("Client wrote 0x%04x instead enabling notify", value);
   153ba:	f042 0202 	orr.w	r2, r2, #2
   153be:	4805      	ldr	r0, [pc, #20]	; (153d4 <prov_ccc_write.part.0+0x28>)
   153c0:	f00c fba0 	bl	21b04 <log_1>
}
   153c4:	f06f 0012 	mvn.w	r0, #18
   153c8:	bd08      	pop	{r3, pc}
   153ca:	bf00      	nop
   153cc:	000299c8 	.word	0x000299c8
   153d0:	00029870 	.word	0x00029870
   153d4:	0002eae1 	.word	0x0002eae1

000153d8 <bt_mesh_proxy_beacon_send>:
	if (!sub) {
   153d8:	4601      	mov	r1, r0
   153da:	b920      	cbnz	r0, 153e6 <bt_mesh_proxy_beacon_send+0xe>
		bt_mesh_subnet_foreach(bt_mesh_proxy_beacon_send);
   153dc:	4804      	ldr	r0, [pc, #16]	; (153f0 <bt_mesh_proxy_beacon_send+0x18>)
   153de:	f7f8 b8bb 	b.w	d558 <bt_mesh_subnet_foreach>
			beacon_send(&clients[i], sub);
   153e2:	f011 bb4f 	b.w	26a84 <beacon_send>
		if (clients[i].cli.conn) {
   153e6:	4803      	ldr	r0, [pc, #12]	; (153f4 <bt_mesh_proxy_beacon_send+0x1c>)
   153e8:	6803      	ldr	r3, [r0, #0]
   153ea:	2b00      	cmp	r3, #0
   153ec:	d1f9      	bne.n	153e2 <bt_mesh_proxy_beacon_send+0xa>
}
   153ee:	4770      	bx	lr
   153f0:	000153d9 	.word	0x000153d9
   153f4:	20000470 	.word	0x20000470

000153f8 <subnet_evt>:
	if (evt == BT_MESH_KEY_DELETED) {
   153f8:	2901      	cmp	r1, #1
   153fa:	d106      	bne.n	1540a <subnet_evt+0x12>
		if (sub == beacon_sub) {
   153fc:	4a04      	ldr	r2, [pc, #16]	; (15410 <subnet_evt+0x18>)
   153fe:	6811      	ldr	r1, [r2, #0]
   15400:	4288      	cmp	r0, r1
   15402:	d104      	bne.n	1540e <subnet_evt+0x16>
			beacon_sub = NULL;
   15404:	2300      	movs	r3, #0
   15406:	6013      	str	r3, [r2, #0]
   15408:	4770      	bx	lr
		bt_mesh_proxy_beacon_send(sub);
   1540a:	f7ff bfe5 	b.w	153d8 <bt_mesh_proxy_beacon_send>
}
   1540e:	4770      	bx	lr
   15410:	20002494 	.word	0x20002494

00015414 <gatt_disconnected>:
{
   15414:	b530      	push	{r4, r5, lr}
   15416:	b089      	sub	sp, #36	; 0x24
	bt_conn_get_info(conn, &info);
   15418:	a901      	add	r1, sp, #4
{
   1541a:	4605      	mov	r5, r0
	bt_conn_get_info(conn, &info);
   1541c:	f7f3 f8ea 	bl	85f4 <bt_conn_get_info>
	if (info.role != BT_CONN_ROLE_PERIPHERAL) {
   15420:	f89d 3005 	ldrb.w	r3, [sp, #5]
   15424:	2b01      	cmp	r3, #1
   15426:	d118      	bne.n	1545a <gatt_disconnected+0x46>
	conn_count--;
   15428:	4a0d      	ldr	r2, [pc, #52]	; (15460 <gatt_disconnected+0x4c>)
		if (client->cli.conn != conn) {
   1542a:	4c0e      	ldr	r4, [pc, #56]	; (15464 <gatt_disconnected+0x50>)
	conn_count--;
   1542c:	6813      	ldr	r3, [r2, #0]
   1542e:	3b01      	subs	r3, #1
   15430:	6013      	str	r3, [r2, #0]
		if (client->cli.conn != conn) {
   15432:	6823      	ldr	r3, [r4, #0]
   15434:	429d      	cmp	r5, r3
   15436:	d10e      	bne.n	15456 <gatt_disconnected+0x42>
		if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT) &&
   15438:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
   1543c:	2b03      	cmp	r3, #3
   1543e:	d102      	bne.n	15446 <gatt_disconnected+0x32>
			bt_mesh_pb_gatt_close(conn);
   15440:	4628      	mov	r0, r5
   15442:	f7ff fe7d 	bl	15140 <bt_mesh_pb_gatt_close>
		(void)k_work_cancel_delayable(&client->cli.sar_timer);
   15446:	4808      	ldr	r0, [pc, #32]	; (15468 <gatt_disconnected+0x54>)
   15448:	f013 fccb 	bl	28de2 <k_work_cancel_delayable>
		bt_conn_unref(client->cli.conn);
   1544c:	6820      	ldr	r0, [r4, #0]
   1544e:	f00f f9c3 	bl	247d8 <bt_conn_unref>
		client->cli.conn = NULL;
   15452:	2300      	movs	r3, #0
   15454:	6023      	str	r3, [r4, #0]
	bt_mesh_adv_update();
   15456:	f7fd ff67 	bl	13328 <bt_mesh_adv_update>
}
   1545a:	b009      	add	sp, #36	; 0x24
   1545c:	bd30      	pop	{r4, r5, pc}
   1545e:	bf00      	nop
   15460:	20002498 	.word	0x20002498
   15464:	20000470 	.word	0x20000470
   15468:	20000480 	.word	0x20000480

0001546c <proxy_filter_recv>:
{
   1546c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1546e:	4615      	mov	r5, r2
	client = find_client(conn);
   15470:	f7ff fe7e 	bl	15170 <find_client>
{
   15474:	460f      	mov	r7, r1
	if (!client) {
   15476:	4604      	mov	r4, r0
   15478:	2800      	cmp	r0, #0
   1547a:	d062      	beq.n	15542 <proxy_filter_recv+0xd6>
	opcode = net_buf_simple_pull_u8(buf);
   1547c:	4628      	mov	r0, r5
   1547e:	f012 ff63 	bl	28348 <net_buf_simple_pull_u8>
	switch (opcode) {
   15482:	2801      	cmp	r0, #1
	opcode = net_buf_simple_pull_u8(buf);
   15484:	4606      	mov	r6, r0
	switch (opcode) {
   15486:	d040      	beq.n	1550a <proxy_filter_recv+0x9e>
   15488:	2802      	cmp	r0, #2
   1548a:	d049      	beq.n	15520 <proxy_filter_recv+0xb4>
   1548c:	2800      	cmp	r0, #0
   1548e:	d14b      	bne.n	15528 <proxy_filter_recv+0xbc>
	if (buf->len < 1) {
   15490:	88ab      	ldrh	r3, [r5, #4]
   15492:	b983      	cbnz	r3, 154b6 <proxy_filter_recv+0x4a>
   15494:	492b      	ldr	r1, [pc, #172]	; (15544 <proxy_filter_recv+0xd8>)
   15496:	4b2c      	ldr	r3, [pc, #176]	; (15548 <proxy_filter_recv+0xdc>)
		BT_WARN("Too short Filter Set message");
   15498:	482c      	ldr	r0, [pc, #176]	; (1554c <proxy_filter_recv+0xe0>)
   1549a:	1ac9      	subs	r1, r1, r3
   1549c:	08c9      	lsrs	r1, r1, #3
   1549e:	0189      	lsls	r1, r1, #6
   154a0:	f041 0102 	orr.w	r1, r1, #2
   154a4:	f00c fb21 	bl	21aea <log_0>
		send_filter_status(client, rx, buf);
   154a8:	462a      	mov	r2, r5
   154aa:	4639      	mov	r1, r7
   154ac:	4620      	mov	r0, r4
}
   154ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		send_filter_status(client, rx, buf);
   154b2:	f7ff be6f 	b.w	15194 <send_filter_status>
	type = net_buf_simple_pull_u8(buf);
   154b6:	4628      	mov	r0, r5
   154b8:	f012 ff46 	bl	28348 <net_buf_simple_pull_u8>
	switch (type) {
   154bc:	4601      	mov	r1, r0
   154be:	b160      	cbz	r0, 154da <proxy_filter_recv+0x6e>
   154c0:	2801      	cmp	r0, #1
   154c2:	d013      	beq.n	154ec <proxy_filter_recv+0x80>
   154c4:	4b20      	ldr	r3, [pc, #128]	; (15548 <proxy_filter_recv+0xdc>)
   154c6:	4a1f      	ldr	r2, [pc, #124]	; (15544 <proxy_filter_recv+0xd8>)
		BT_WARN("Prohibited Filter Type 0x%02x", type);
   154c8:	4821      	ldr	r0, [pc, #132]	; (15550 <proxy_filter_recv+0xe4>)
   154ca:	1ad2      	subs	r2, r2, r3
   154cc:	08d2      	lsrs	r2, r2, #3
   154ce:	0192      	lsls	r2, r2, #6
   154d0:	f042 0202 	orr.w	r2, r2, #2
   154d4:	f00c fb16 	bl	21b04 <log_1>
		return -EINVAL;
   154d8:	e7e6      	b.n	154a8 <proxy_filter_recv+0x3c>
		(void)memset(client->filter, 0, sizeof(client->filter));
   154da:	2206      	movs	r2, #6
   154dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
   154e0:	f00e fc6d 	bl	23dbe <memset>
		client->filter_type = ACCEPT;
   154e4:	2301      	movs	r3, #1
		client->filter_type = REJECT;
   154e6:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
		break;
   154ea:	e7dd      	b.n	154a8 <proxy_filter_recv+0x3c>
		(void)memset(client->filter, 0, sizeof(client->filter));
   154ec:	2206      	movs	r2, #6
   154ee:	4631      	mov	r1, r6
   154f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
   154f4:	f00e fc63 	bl	23dbe <memset>
		client->filter_type = REJECT;
   154f8:	2302      	movs	r3, #2
   154fa:	e7f4      	b.n	154e6 <proxy_filter_recv+0x7a>
			addr = net_buf_simple_pull_be16(buf);
   154fc:	4628      	mov	r0, r5
   154fe:	f012 ff33 	bl	28368 <net_buf_simple_pull_be16>
   15502:	4601      	mov	r1, r0
			filter_add(client, addr);
   15504:	4620      	mov	r0, r4
   15506:	f011 fae0 	bl	26aca <filter_add>
		while (buf->len >= 2) {
   1550a:	88ab      	ldrh	r3, [r5, #4]
   1550c:	2b01      	cmp	r3, #1
   1550e:	d8f5      	bhi.n	154fc <proxy_filter_recv+0x90>
   15510:	e7ca      	b.n	154a8 <proxy_filter_recv+0x3c>
			addr = net_buf_simple_pull_be16(buf);
   15512:	4628      	mov	r0, r5
   15514:	f012 ff28 	bl	28368 <net_buf_simple_pull_be16>
   15518:	4601      	mov	r1, r0
			filter_remove(client, addr);
   1551a:	4620      	mov	r0, r4
   1551c:	f011 faed 	bl	26afa <filter_remove>
		while (buf->len >= 2) {
   15520:	88ab      	ldrh	r3, [r5, #4]
   15522:	2b01      	cmp	r3, #1
   15524:	d8f5      	bhi.n	15512 <proxy_filter_recv+0xa6>
   15526:	e7bf      	b.n	154a8 <proxy_filter_recv+0x3c>
   15528:	4b07      	ldr	r3, [pc, #28]	; (15548 <proxy_filter_recv+0xdc>)
   1552a:	4a06      	ldr	r2, [pc, #24]	; (15544 <proxy_filter_recv+0xd8>)
   1552c:	1ad2      	subs	r2, r2, r3
   1552e:	08d2      	lsrs	r2, r2, #3
		BT_WARN("Unhandled configuration OpCode 0x%02x", opcode);
   15530:	0192      	lsls	r2, r2, #6
   15532:	4601      	mov	r1, r0
}
   15534:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_WARN("Unhandled configuration OpCode 0x%02x", opcode);
   15538:	4806      	ldr	r0, [pc, #24]	; (15554 <proxy_filter_recv+0xe8>)
   1553a:	f042 0202 	orr.w	r2, r2, #2
   1553e:	f00c bae1 	b.w	21b04 <log_1>
}
   15542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15544:	000299c8 	.word	0x000299c8
   15548:	00029870 	.word	0x00029870
   1554c:	0002eb0d 	.word	0x0002eb0d
   15550:	0002eb2a 	.word	0x0002eb2a
   15554:	0002eb48 	.word	0x0002eb48

00015558 <node_id_start>:
	sub->node_id = BT_MESH_NODE_IDENTITY_RUNNING;
   15558:	2301      	movs	r3, #1
{
   1555a:	b570      	push	{r4, r5, r6, lr}
   1555c:	4604      	mov	r4, r0
	sub->node_id = BT_MESH_NODE_IDENTITY_RUNNING;
   1555e:	77c3      	strb	r3, [r0, #31]
   15560:	f013 fde8 	bl	29134 <z_impl_k_uptime_ticks>
   15564:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15568:	fba0 3002 	umull	r3, r0, r0, r2
   1556c:	fb02 0001 	mla	r0, r2, r1, r0
   15570:	0bdb      	lsrs	r3, r3, #15
   15572:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
	STRUCT_SECTION_FOREACH(bt_mesh_proxy_cb, cb) {
   15576:	4d06      	ldr	r5, [pc, #24]	; (15590 <node_id_start+0x38>)
   15578:	4e06      	ldr	r6, [pc, #24]	; (15594 <node_id_start+0x3c>)
	return (uint32_t)k_uptime_get();
   1557a:	6223      	str	r3, [r4, #32]
   1557c:	42b5      	cmp	r5, r6
   1557e:	d300      	bcc.n	15582 <node_id_start+0x2a>
}
   15580:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->identity_enabled) {
   15582:	682b      	ldr	r3, [r5, #0]
   15584:	b10b      	cbz	r3, 1558a <node_id_start+0x32>
			cb->identity_enabled(sub->net_idx);
   15586:	8ba0      	ldrh	r0, [r4, #28]
   15588:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_mesh_proxy_cb, cb) {
   1558a:	3508      	adds	r5, #8
   1558c:	e7f6      	b.n	1557c <node_id_start+0x24>
   1558e:	bf00      	nop
   15590:	0002971c 	.word	0x0002971c
   15594:	0002971c 	.word	0x0002971c

00015598 <bt_mesh_proxy_identity_start>:
{
   15598:	b510      	push	{r4, lr}
   1559a:	4604      	mov	r4, r0
	node_id_start(sub);
   1559c:	f7ff ffdc 	bl	15558 <node_id_start>
	beacon_sub = sub;
   155a0:	4b01      	ldr	r3, [pc, #4]	; (155a8 <bt_mesh_proxy_identity_start+0x10>)
   155a2:	601c      	str	r4, [r3, #0]
}
   155a4:	bd10      	pop	{r4, pc}
   155a6:	bf00      	nop
   155a8:	20002494 	.word	0x20002494

000155ac <bt_mesh_proxy_identity_stop>:
{
   155ac:	b570      	push	{r4, r5, r6, lr}
	sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
   155ae:	2300      	movs	r3, #0
	STRUCT_SECTION_FOREACH(bt_mesh_proxy_cb, cb) {
   155b0:	4d06      	ldr	r5, [pc, #24]	; (155cc <bt_mesh_proxy_identity_stop+0x20>)
   155b2:	4e07      	ldr	r6, [pc, #28]	; (155d0 <bt_mesh_proxy_identity_stop+0x24>)
	sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
   155b4:	77c3      	strb	r3, [r0, #31]
{
   155b6:	4604      	mov	r4, r0
	sub->node_id_start = 0U;
   155b8:	6203      	str	r3, [r0, #32]
	STRUCT_SECTION_FOREACH(bt_mesh_proxy_cb, cb) {
   155ba:	42b5      	cmp	r5, r6
   155bc:	d300      	bcc.n	155c0 <bt_mesh_proxy_identity_stop+0x14>
}
   155be:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->identity_disabled) {
   155c0:	686b      	ldr	r3, [r5, #4]
   155c2:	b10b      	cbz	r3, 155c8 <bt_mesh_proxy_identity_stop+0x1c>
			cb->identity_disabled(sub->net_idx);
   155c4:	8ba0      	ldrh	r0, [r4, #28]
   155c6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_mesh_proxy_cb, cb) {
   155c8:	3508      	adds	r5, #8
   155ca:	e7f6      	b.n	155ba <bt_mesh_proxy_identity_stop+0xe>
   155cc:	0002971c 	.word	0x0002971c
   155d0:	0002971c 	.word	0x0002971c

000155d4 <bt_mesh_proxy_identity_enable>:
{
   155d4:	b508      	push	{r3, lr}
	if (!bt_mesh_is_provisioned()) {
   155d6:	f7f5 ffe9 	bl	b5ac <bt_mesh_is_provisioned>
   155da:	b138      	cbz	r0, 155ec <bt_mesh_proxy_identity_enable+0x18>
	if (bt_mesh_subnet_foreach(node_id_start)) {
   155dc:	4805      	ldr	r0, [pc, #20]	; (155f4 <bt_mesh_proxy_identity_enable+0x20>)
   155de:	f7f7 ffbb 	bl	d558 <bt_mesh_subnet_foreach>
   155e2:	b110      	cbz	r0, 155ea <bt_mesh_proxy_identity_enable+0x16>
		bt_mesh_adv_update();
   155e4:	f7fd fea0 	bl	13328 <bt_mesh_adv_update>
	return 0;
   155e8:	2000      	movs	r0, #0
}
   155ea:	bd08      	pop	{r3, pc}
		return -EAGAIN;
   155ec:	f06f 000a 	mvn.w	r0, #10
   155f0:	e7fb      	b.n	155ea <bt_mesh_proxy_identity_enable+0x16>
   155f2:	bf00      	nop
   155f4:	00015559 	.word	0x00015559

000155f8 <bt_mesh_proxy_gatt_enable>:
{
   155f8:	b538      	push	{r3, r4, r5, lr}
	if (gatt_svc == MESH_GATT_PROXY) {
   155fa:	4d0c      	ldr	r5, [pc, #48]	; (1562c <bt_mesh_proxy_gatt_enable+0x34>)
   155fc:	782c      	ldrb	r4, [r5, #0]
   155fe:	2c02      	cmp	r4, #2
   15600:	d00d      	beq.n	1561e <bt_mesh_proxy_gatt_enable+0x26>
	if (gatt_svc != MESH_GATT_NONE) {
   15602:	b97c      	cbnz	r4, 15624 <bt_mesh_proxy_gatt_enable+0x2c>
	(void)bt_gatt_service_register(&proxy_svc);
   15604:	480a      	ldr	r0, [pc, #40]	; (15630 <bt_mesh_proxy_gatt_enable+0x38>)
   15606:	f7f5 f967 	bl	a8d8 <bt_gatt_service_register>
	gatt_svc = MESH_GATT_PROXY;
   1560a:	2302      	movs	r3, #2
   1560c:	702b      	strb	r3, [r5, #0]
		if (clients[i].cli.conn) {
   1560e:	4b09      	ldr	r3, [pc, #36]	; (15634 <bt_mesh_proxy_gatt_enable+0x3c>)
   15610:	6818      	ldr	r0, [r3, #0]
   15612:	b118      	cbz	r0, 1561c <bt_mesh_proxy_gatt_enable+0x24>
			clients[i].filter_type = ACCEPT;
   15614:	2201      	movs	r2, #1
   15616:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	return 0;
   1561a:	4620      	mov	r0, r4
}
   1561c:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
   1561e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   15622:	e7fb      	b.n	1561c <bt_mesh_proxy_gatt_enable+0x24>
		return -EBUSY;
   15624:	f06f 000f 	mvn.w	r0, #15
   15628:	e7f8      	b.n	1561c <bt_mesh_proxy_gatt_enable+0x24>
   1562a:	bf00      	nop
   1562c:	200038a8 	.word	0x200038a8
   15630:	20000b78 	.word	0x20000b78
   15634:	20000470 	.word	0x20000470

00015638 <bt_mesh_proxy_gatt_disconnect>:
		if (client->cli.conn && (client->filter_type == ACCEPT ||
   15638:	4b07      	ldr	r3, [pc, #28]	; (15658 <bt_mesh_proxy_gatt_disconnect+0x20>)
   1563a:	6818      	ldr	r0, [r3, #0]
   1563c:	b150      	cbz	r0, 15654 <bt_mesh_proxy_gatt_disconnect+0x1c>
   1563e:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
   15642:	3a01      	subs	r2, #1
   15644:	2a01      	cmp	r2, #1
   15646:	d805      	bhi.n	15654 <bt_mesh_proxy_gatt_disconnect+0x1c>
			client->filter_type = NONE;
   15648:	2200      	movs	r2, #0
   1564a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
			bt_conn_disconnect(client->cli.conn,
   1564e:	2113      	movs	r1, #19
   15650:	f00f b907 	b.w	24862 <bt_conn_disconnect>
}
   15654:	4770      	bx	lr
   15656:	bf00      	nop
   15658:	20000470 	.word	0x20000470

0001565c <bt_mesh_proxy_gatt_disable>:
{
   1565c:	b510      	push	{r4, lr}
	if (gatt_svc == MESH_GATT_NONE) {
   1565e:	4c09      	ldr	r4, [pc, #36]	; (15684 <bt_mesh_proxy_gatt_disable+0x28>)
   15660:	7823      	ldrb	r3, [r4, #0]
   15662:	b14b      	cbz	r3, 15678 <bt_mesh_proxy_gatt_disable+0x1c>
	if (gatt_svc != MESH_GATT_PROXY) {
   15664:	2b02      	cmp	r3, #2
   15666:	d10a      	bne.n	1567e <bt_mesh_proxy_gatt_disable+0x22>
	bt_mesh_proxy_gatt_disconnect();
   15668:	f7ff ffe6 	bl	15638 <bt_mesh_proxy_gatt_disconnect>
	bt_gatt_service_unregister(&proxy_svc);
   1566c:	4806      	ldr	r0, [pc, #24]	; (15688 <bt_mesh_proxy_gatt_disable+0x2c>)
   1566e:	f7f5 fe39 	bl	b2e4 <bt_gatt_service_unregister>
	gatt_svc = MESH_GATT_NONE;
   15672:	2000      	movs	r0, #0
   15674:	7020      	strb	r0, [r4, #0]
}
   15676:	bd10      	pop	{r4, pc}
		return -EALREADY;
   15678:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1567c:	e7fb      	b.n	15676 <bt_mesh_proxy_gatt_disable+0x1a>
		return -EBUSY;
   1567e:	f06f 000f 	mvn.w	r0, #15
   15682:	e7f8      	b.n	15676 <bt_mesh_proxy_gatt_disable+0x1a>
   15684:	200038a8 	.word	0x200038a8
   15688:	20000b78 	.word	0x20000b78

0001568c <bt_mesh_proxy_relay>:
{
   1568c:	b570      	push	{r4, r5, r6, lr}
   1568e:	b08e      	sub	sp, #56	; 0x38
		NET_BUF_SIMPLE_DEFINE(msg, 32);
   15690:	ab06      	add	r3, sp, #24
   15692:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   15696:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1569a:	9303      	str	r3, [sp, #12]
		if (!client->cli.conn) {
   1569c:	4b37      	ldr	r3, [pc, #220]	; (1577c <bt_mesh_proxy_relay+0xf0>)
   1569e:	681a      	ldr	r2, [r3, #0]
{
   156a0:	4604      	mov	r4, r0
		if (!client->cli.conn) {
   156a2:	b17a      	cbz	r2, 156c4 <bt_mesh_proxy_relay+0x38>
	if (client->filter_type == REJECT) {
   156a4:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
   156a8:	2a02      	cmp	r2, #2
   156aa:	d10d      	bne.n	156c8 <bt_mesh_proxy_relay+0x3c>
			if (client->filter[i] == addr) {
   156ac:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
   156b0:	428a      	cmp	r2, r1
   156b2:	d007      	beq.n	156c4 <bt_mesh_proxy_relay+0x38>
   156b4:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
   156b8:	428a      	cmp	r2, r1
   156ba:	d003      	beq.n	156c4 <bt_mesh_proxy_relay+0x38>
   156bc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
   156c0:	428b      	cmp	r3, r1
   156c2:	d113      	bne.n	156ec <bt_mesh_proxy_relay+0x60>
	bool relayed = false;
   156c4:	2000      	movs	r0, #0
   156c6:	e053      	b.n	15770 <bt_mesh_proxy_relay+0xe4>
	if (addr == BT_MESH_ADDR_ALL_NODES) {
   156c8:	f64f 70ff 	movw	r0, #65535	; 0xffff
   156cc:	4281      	cmp	r1, r0
   156ce:	d042      	beq.n	15756 <bt_mesh_proxy_relay+0xca>
	if (client->filter_type == ACCEPT) {
   156d0:	2a01      	cmp	r2, #1
   156d2:	d1f7      	bne.n	156c4 <bt_mesh_proxy_relay+0x38>
			if (client->filter[i] == addr) {
   156d4:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
   156d8:	428a      	cmp	r2, r1
   156da:	d007      	beq.n	156ec <bt_mesh_proxy_relay+0x60>
   156dc:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
   156e0:	428a      	cmp	r2, r1
   156e2:	d003      	beq.n	156ec <bt_mesh_proxy_relay+0x60>
   156e4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
   156e8:	428b      	cmp	r3, r1
   156ea:	d1eb      	bne.n	156c4 <bt_mesh_proxy_relay+0x38>
		net_buf_simple_reserve(&msg, 1);
   156ec:	2101      	movs	r1, #1
   156ee:	a803      	add	r0, sp, #12
   156f0:	f012 fd11 	bl	28116 <net_buf_simple_reserve>
		net_buf_simple_add_mem(&msg, buf->data, buf->len);
   156f4:	89a2      	ldrh	r2, [r4, #12]
   156f6:	68a1      	ldr	r1, [r4, #8]
   156f8:	a803      	add	r0, sp, #12
   156fa:	f012 fdab 	bl	28254 <net_buf_simple_add_mem>
					     &msg, buf_send_end, net_buf_ref(buf));
   156fe:	4620      	mov	r0, r4
   15700:	f012 fd70 	bl	281e4 <net_buf_ref>
		err = bt_mesh_proxy_msg_send(&client->cli, BT_MESH_PROXY_NET_PDU,
   15704:	4b1e      	ldr	r3, [pc, #120]	; (15780 <bt_mesh_proxy_relay+0xf4>)
   15706:	9000      	str	r0, [sp, #0]
   15708:	aa03      	add	r2, sp, #12
   1570a:	481c      	ldr	r0, [pc, #112]	; (1577c <bt_mesh_proxy_relay+0xf0>)
   1570c:	2100      	movs	r1, #0
   1570e:	f011 fa57 	bl	26bc0 <bt_mesh_proxy_msg_send>
		bt_mesh_adv_send_start(0, err, BT_MESH_ADV(buf));
   15712:	6966      	ldr	r6, [r4, #20]
	if (!adv->started) {
   15714:	7a33      	ldrb	r3, [r6, #8]
		err = bt_mesh_proxy_msg_send(&client->cli, BT_MESH_PROXY_NET_PDU,
   15716:	4605      	mov	r5, r0
   15718:	f013 0004 	ands.w	r0, r3, #4
   1571c:	d12a      	bne.n	15774 <bt_mesh_proxy_relay+0xe8>
		adv->started = 1;
   1571e:	f043 0304 	orr.w	r3, r3, #4
   15722:	7233      	strb	r3, [r6, #8]
		if (adv->cb && adv->cb->start) {
   15724:	6833      	ldr	r3, [r6, #0]
   15726:	b123      	cbz	r3, 15732 <bt_mesh_proxy_relay+0xa6>
   15728:	681b      	ldr	r3, [r3, #0]
   1572a:	b113      	cbz	r3, 15732 <bt_mesh_proxy_relay+0xa6>
			adv->cb->start(duration, err, adv->cb_data);
   1572c:	6872      	ldr	r2, [r6, #4]
   1572e:	4629      	mov	r1, r5
   15730:	4798      	blx	r3
		if (err) {
   15732:	b1e5      	cbz	r5, 1576e <bt_mesh_proxy_relay+0xe2>
			adv->cb = NULL;
   15734:	2300      	movs	r3, #0
   15736:	6033      	str	r3, [r6, #0]
   15738:	4b12      	ldr	r3, [pc, #72]	; (15784 <bt_mesh_proxy_relay+0xf8>)
   1573a:	4a13      	ldr	r2, [pc, #76]	; (15788 <bt_mesh_proxy_relay+0xfc>)
			BT_ERR("Failed to send proxy message (err %d)", err);
   1573c:	4813      	ldr	r0, [pc, #76]	; (1578c <bt_mesh_proxy_relay+0x100>)
   1573e:	1ad2      	subs	r2, r2, r3
   15740:	08d2      	lsrs	r2, r2, #3
   15742:	0192      	lsls	r2, r2, #6
   15744:	f042 0201 	orr.w	r2, r2, #1
   15748:	4629      	mov	r1, r5
   1574a:	f00c f9db 	bl	21b04 <log_1>
			net_buf_unref(buf);
   1574e:	4620      	mov	r0, r4
   15750:	f008 fb08 	bl	1dd64 <net_buf_unref>
			continue;
   15754:	e7b6      	b.n	156c4 <bt_mesh_proxy_relay+0x38>
		if (client->filter_type == PROV) {
   15756:	2a03      	cmp	r2, #3
   15758:	d1c8      	bne.n	156ec <bt_mesh_proxy_relay+0x60>
   1575a:	490b      	ldr	r1, [pc, #44]	; (15788 <bt_mesh_proxy_relay+0xfc>)
   1575c:	4b09      	ldr	r3, [pc, #36]	; (15784 <bt_mesh_proxy_relay+0xf8>)
			BT_ERR("Invalid PDU type for Proxy Client");
   1575e:	480c      	ldr	r0, [pc, #48]	; (15790 <bt_mesh_proxy_relay+0x104>)
   15760:	1ac9      	subs	r1, r1, r3
   15762:	08c9      	lsrs	r1, r1, #3
   15764:	0189      	lsls	r1, r1, #6
   15766:	f041 0101 	orr.w	r1, r1, #1
   1576a:	f00c f9be 	bl	21aea <log_0>
		relayed = true;
   1576e:	2001      	movs	r0, #1
}
   15770:	b00e      	add	sp, #56	; 0x38
   15772:	bd70      	pop	{r4, r5, r6, pc}
		if (err) {
   15774:	2d00      	cmp	r5, #0
   15776:	d0fa      	beq.n	1576e <bt_mesh_proxy_relay+0xe2>
   15778:	e7de      	b.n	15738 <bt_mesh_proxy_relay+0xac>
   1577a:	bf00      	nop
   1577c:	20000470 	.word	0x20000470
   15780:	00026ac5 	.word	0x00026ac5
   15784:	00029870 	.word	0x00029870
   15788:	000299c8 	.word	0x000299c8
   1578c:	0002eb90 	.word	0x0002eb90
   15790:	0002eb6e 	.word	0x0002eb6e

00015794 <bt_mesh_proxy_get_buf>:
	buf->len  = 0U;
   15794:	4803      	ldr	r0, [pc, #12]	; (157a4 <bt_mesh_proxy_get_buf+0x10>)
   15796:	2300      	movs	r3, #0
   15798:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	buf->data = buf->__buf;
   1579c:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1579e:	f840 3f40 	str.w	r3, [r0, #64]!
}
   157a2:	4770      	bx	lr
   157a4:	20000470 	.word	0x20000470

000157a8 <bt_mesh_proxy_prov_enable>:
{
   157a8:	b538      	push	{r3, r4, r5, lr}
	if (gatt_svc == MESH_GATT_PROV) {
   157aa:	4d0d      	ldr	r5, [pc, #52]	; (157e0 <bt_mesh_proxy_prov_enable+0x38>)
   157ac:	782c      	ldrb	r4, [r5, #0]
   157ae:	2c01      	cmp	r4, #1
   157b0:	d00f      	beq.n	157d2 <bt_mesh_proxy_prov_enable+0x2a>
	if (gatt_svc != MESH_GATT_NONE) {
   157b2:	b98c      	cbnz	r4, 157d8 <bt_mesh_proxy_prov_enable+0x30>
	(void)bt_gatt_service_register(&prov_svc);
   157b4:	480b      	ldr	r0, [pc, #44]	; (157e4 <bt_mesh_proxy_prov_enable+0x3c>)
   157b6:	f7f5 f88f 	bl	a8d8 <bt_gatt_service_register>
	prov_fast_adv = true;
   157ba:	4a0b      	ldr	r2, [pc, #44]	; (157e8 <bt_mesh_proxy_prov_enable+0x40>)
	gatt_svc = MESH_GATT_PROV;
   157bc:	2301      	movs	r3, #1
   157be:	702b      	strb	r3, [r5, #0]
	prov_fast_adv = true;
   157c0:	7013      	strb	r3, [r2, #0]
		if (clients[i].cli.conn) {
   157c2:	4b0a      	ldr	r3, [pc, #40]	; (157ec <bt_mesh_proxy_prov_enable+0x44>)
   157c4:	6818      	ldr	r0, [r3, #0]
   157c6:	b118      	cbz	r0, 157d0 <bt_mesh_proxy_prov_enable+0x28>
			clients[i].filter_type = PROV;
   157c8:	2203      	movs	r2, #3
   157ca:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	return 0;
   157ce:	4620      	mov	r0, r4
}
   157d0:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
   157d2:	f06f 0077 	mvn.w	r0, #119	; 0x77
   157d6:	e7fb      	b.n	157d0 <bt_mesh_proxy_prov_enable+0x28>
		return -EBUSY;
   157d8:	f06f 000f 	mvn.w	r0, #15
   157dc:	e7f8      	b.n	157d0 <bt_mesh_proxy_prov_enable+0x28>
   157de:	bf00      	nop
   157e0:	200038a8 	.word	0x200038a8
   157e4:	20000adc 	.word	0x20000adc
   157e8:	200038a9 	.word	0x200038a9
   157ec:	20000470 	.word	0x20000470

000157f0 <bt_mesh_proxy_prov_disable>:
{
   157f0:	b538      	push	{r3, r4, r5, lr}
	if (gatt_svc == MESH_GATT_NONE) {
   157f2:	4d13      	ldr	r5, [pc, #76]	; (15840 <bt_mesh_proxy_prov_disable+0x50>)
   157f4:	782b      	ldrb	r3, [r5, #0]
{
   157f6:	4604      	mov	r4, r0
	if (gatt_svc == MESH_GATT_NONE) {
   157f8:	b1db      	cbz	r3, 15832 <bt_mesh_proxy_prov_disable+0x42>
	if (gatt_svc != MESH_GATT_PROV) {
   157fa:	2b01      	cmp	r3, #1
   157fc:	d11c      	bne.n	15838 <bt_mesh_proxy_prov_disable+0x48>
	bt_gatt_service_unregister(&prov_svc);
   157fe:	4811      	ldr	r0, [pc, #68]	; (15844 <bt_mesh_proxy_prov_disable+0x54>)
   15800:	f7f5 fd70 	bl	b2e4 <bt_gatt_service_unregister>
	gatt_svc = MESH_GATT_NONE;
   15804:	2300      	movs	r3, #0
   15806:	702b      	strb	r3, [r5, #0]
		if (!client->cli.conn || client->filter_type != PROV) {
   15808:	4d0f      	ldr	r5, [pc, #60]	; (15848 <bt_mesh_proxy_prov_disable+0x58>)
   1580a:	6828      	ldr	r0, [r5, #0]
   1580c:	b118      	cbz	r0, 15816 <bt_mesh_proxy_prov_disable+0x26>
   1580e:	f895 3056 	ldrb.w	r3, [r5, #86]	; 0x56
   15812:	2b03      	cmp	r3, #3
   15814:	d003      	beq.n	1581e <bt_mesh_proxy_prov_disable+0x2e>
	bt_mesh_adv_update();
   15816:	f7fd fd87 	bl	13328 <bt_mesh_adv_update>
	return 0;
   1581a:	2000      	movs	r0, #0
}
   1581c:	bd38      	pop	{r3, r4, r5, pc}
		if (disconnect) {
   1581e:	b11c      	cbz	r4, 15828 <bt_mesh_proxy_prov_disable+0x38>
			bt_conn_disconnect(client->cli.conn,
   15820:	2113      	movs	r1, #19
   15822:	f00f f81e 	bl	24862 <bt_conn_disconnect>
   15826:	e7f6      	b.n	15816 <bt_mesh_proxy_prov_disable+0x26>
			bt_mesh_pb_gatt_close(client->cli.conn);
   15828:	f7ff fc8a 	bl	15140 <bt_mesh_pb_gatt_close>
			client->filter_type = NONE;
   1582c:	f885 4056 	strb.w	r4, [r5, #86]	; 0x56
   15830:	e7f1      	b.n	15816 <bt_mesh_proxy_prov_disable+0x26>
		return -EALREADY;
   15832:	f06f 0077 	mvn.w	r0, #119	; 0x77
   15836:	e7f1      	b.n	1581c <bt_mesh_proxy_prov_disable+0x2c>
		return -EBUSY;
   15838:	f06f 000f 	mvn.w	r0, #15
   1583c:	e7ee      	b.n	1581c <bt_mesh_proxy_prov_disable+0x2c>
   1583e:	bf00      	nop
   15840:	200038a8 	.word	0x200038a8
   15844:	20000adc 	.word	0x20000adc
   15848:	20000470 	.word	0x20000470

0001584c <bt_mesh_pb_gatt_send>:
{
   1584c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1584e:	460d      	mov	r5, r1
   15850:	4616      	mov	r6, r2
   15852:	461f      	mov	r7, r3
	struct bt_mesh_proxy_client *client = find_client(conn);
   15854:	f7ff fc8c 	bl	15170 <find_client>
	if (!client) {
   15858:	b968      	cbnz	r0, 15876 <bt_mesh_pb_gatt_send+0x2a>
   1585a:	4b12      	ldr	r3, [pc, #72]	; (158a4 <bt_mesh_pb_gatt_send+0x58>)
   1585c:	4912      	ldr	r1, [pc, #72]	; (158a8 <bt_mesh_pb_gatt_send+0x5c>)
		BT_ERR("No Proxy Client found");
   1585e:	4813      	ldr	r0, [pc, #76]	; (158ac <bt_mesh_pb_gatt_send+0x60>)
   15860:	1ac9      	subs	r1, r1, r3
   15862:	08c9      	lsrs	r1, r1, #3
   15864:	0189      	lsls	r1, r1, #6
   15866:	f041 0101 	orr.w	r1, r1, #1
   1586a:	f00c f93e 	bl	21aea <log_0>
		return -ENOTCONN;
   1586e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   15872:	b003      	add	sp, #12
   15874:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (client->filter_type != PROV) {
   15876:	f890 1056 	ldrb.w	r1, [r0, #86]	; 0x56
   1587a:	2903      	cmp	r1, #3
   1587c:	d00c      	beq.n	15898 <bt_mesh_pb_gatt_send+0x4c>
   1587e:	4b09      	ldr	r3, [pc, #36]	; (158a4 <bt_mesh_pb_gatt_send+0x58>)
   15880:	4909      	ldr	r1, [pc, #36]	; (158a8 <bt_mesh_pb_gatt_send+0x5c>)
		BT_ERR("Invalid PDU type for Proxy Client");
   15882:	480b      	ldr	r0, [pc, #44]	; (158b0 <bt_mesh_pb_gatt_send+0x64>)
   15884:	1ac9      	subs	r1, r1, r3
   15886:	08c9      	lsrs	r1, r1, #3
   15888:	0189      	lsls	r1, r1, #6
   1588a:	f041 0101 	orr.w	r1, r1, #1
   1588e:	f00c f92c 	bl	21aea <log_0>
		return -EINVAL;
   15892:	f06f 0015 	mvn.w	r0, #21
   15896:	e7ec      	b.n	15872 <bt_mesh_pb_gatt_send+0x26>
	return bt_mesh_proxy_msg_send(&client->cli, BT_MESH_PROXY_PROV, buf, end, user_data);
   15898:	9700      	str	r7, [sp, #0]
   1589a:	4633      	mov	r3, r6
   1589c:	462a      	mov	r2, r5
   1589e:	f011 f98f 	bl	26bc0 <bt_mesh_proxy_msg_send>
   158a2:	e7e6      	b.n	15872 <bt_mesh_pb_gatt_send+0x26>
   158a4:	00029870 	.word	0x00029870
   158a8:	000299c8 	.word	0x000299c8
   158ac:	0002ebb6 	.word	0x0002ebb6
   158b0:	0002eb6e 	.word	0x0002eb6e

000158b4 <bt_mesh_proxy_adv_start>:

int bt_mesh_proxy_adv_start(void)
{
   158b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	BT_DBG("");

	if (gatt_svc == MESH_GATT_NONE) {
   158b8:	4bbd      	ldr	r3, [pc, #756]	; (15bb0 <bt_mesh_proxy_adv_start+0x2fc>)
   158ba:	781b      	ldrb	r3, [r3, #0]
{
   158bc:	b08e      	sub	sp, #56	; 0x38
	if (gatt_svc == MESH_GATT_NONE) {
   158be:	2b00      	cmp	r3, #0
   158c0:	f000 8095 	beq.w	159ee <bt_mesh_proxy_adv_start+0x13a>
		return -ENOENT;
	}

#if defined(CONFIG_BT_MESH_PB_GATT)
	if (!bt_mesh_is_provisioned()) {
   158c4:	f7f5 fe72 	bl	b5ac <bt_mesh_is_provisioned>
   158c8:	4604      	mov	r4, r0
   158ca:	2800      	cmp	r0, #0
   158cc:	d161      	bne.n	15992 <bt_mesh_proxy_adv_start+0xde>
		struct bt_le_adv_param fast_adv_param = {
   158ce:	4601      	mov	r1, r0
   158d0:	2214      	movs	r2, #20
   158d2:	a804      	add	r0, sp, #16
   158d4:	f00e fa73 	bl	23dbe <memset>
   158d8:	f240 220b 	movw	r2, #523	; 0x20b
   158dc:	23a0      	movs	r3, #160	; 0xa0
   158de:	e9cd 2305 	strd	r2, r3, [sp, #20]
   158e2:	23f0      	movs	r3, #240	; 0xf0
   158e4:	9307      	str	r3, [sp, #28]
	const struct bt_mesh_prov *prov = bt_mesh_prov_get();
   158e6:	f7fe f81b 	bl	13920 <bt_mesh_prov_get>
	memcpy(prov_svc_data + 2, prov->uuid, 16);
   158ea:	4eb2      	ldr	r6, [pc, #712]	; (15bb4 <bt_mesh_proxy_adv_start+0x300>)
   158ec:	6801      	ldr	r1, [r0, #0]
	const struct bt_mesh_prov *prov = bt_mesh_prov_get();
   158ee:	4605      	mov	r5, r0
	memcpy(prov_svc_data + 2, prov->uuid, 16);
   158f0:	2210      	movs	r2, #16
   158f2:	1cb0      	adds	r0, r6, #2
   158f4:	f00e fa58 	bl	23da8 <memcpy>
	sys_put_be16(prov->oob_info, prov_svc_data + 18);
   158f8:	892b      	ldrh	r3, [r5, #8]
	dst[1] = val;
   158fa:	74f3      	strb	r3, [r6, #19]
	dst[0] = val >> 8;
   158fc:	0a1a      	lsrs	r2, r3, #8
   158fe:	74b2      	strb	r2, [r6, #18]
	if (!prov->uri) {
   15900:	6868      	ldr	r0, [r5, #4]
   15902:	2800      	cmp	r0, #0
   15904:	d035      	beq.n	15972 <bt_mesh_proxy_adv_start+0xbe>
	uri_len = strlen(prov->uri);
   15906:	f00e fa11 	bl	23d2c <strlen>
	if (uri_len > 29) {
   1590a:	281d      	cmp	r0, #29
   1590c:	d928      	bls.n	15960 <bt_mesh_proxy_adv_start+0xac>
   1590e:	49aa      	ldr	r1, [pc, #680]	; (15bb8 <bt_mesh_proxy_adv_start+0x304>)
   15910:	4baa      	ldr	r3, [pc, #680]	; (15bbc <bt_mesh_proxy_adv_start+0x308>)
		BT_WARN("Too long URI to fit advertising packet");
   15912:	48ab      	ldr	r0, [pc, #684]	; (15bc0 <bt_mesh_proxy_adv_start+0x30c>)
   15914:	1ac9      	subs	r1, r1, r3
   15916:	08c9      	lsrs	r1, r1, #3
   15918:	0189      	lsls	r1, r1, #6
   1591a:	f041 0102 	orr.w	r1, r1, #2
   1591e:	f00c f8e4 	bl	21aea <log_0>
		size_t prov_sd_len;
		int err;

		prov_sd_len = gatt_prov_adv_create(prov_sd);

		if (!prov_fast_adv) {
   15922:	4da8      	ldr	r5, [pc, #672]	; (15bc4 <bt_mesh_proxy_adv_start+0x310>)
   15924:	7829      	ldrb	r1, [r5, #0]
   15926:	ae02      	add	r6, sp, #8
   15928:	bb29      	cbnz	r1, 15976 <bt_mesh_proxy_adv_start+0xc2>
			struct bt_le_adv_param slow_adv_param = {
   1592a:	2214      	movs	r2, #20
   1592c:	a809      	add	r0, sp, #36	; 0x24
   1592e:	f00e fa46 	bl	23dbe <memset>
   15932:	f240 280b 	movw	r8, #523	; 0x20b
   15936:	f44f 63c8 	mov.w	r3, #1600	; 0x640
   1593a:	e9cd 830a 	strd	r8, r3, [sp, #40]	; 0x28
   1593e:	f44f 63f0 	mov.w	r3, #1920	; 0x780
				.options = ADV_OPT_PROV,
				ADV_SLOW_INT,
			};

			return bt_mesh_adv_start(&slow_adv_param,
   15942:	e9cd 6400 	strd	r6, r4, [sp]
			struct bt_le_adv_param slow_adv_param = {
   15946:	930c      	str	r3, [sp, #48]	; 0x30
			return bt_mesh_adv_start(&slow_adv_param,
   15948:	4a9f      	ldr	r2, [pc, #636]	; (15bc8 <bt_mesh_proxy_adv_start+0x314>)
   1594a:	2303      	movs	r3, #3
   1594c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   15950:	a809      	add	r0, sp, #36	; 0x24
   15952:	f7fd fd1f 	bl	13394 <bt_mesh_adv_start>
   15956:	4604      	mov	r4, r0
		return gatt_proxy_advertise(next_sub());
	}
#endif /* CONFIG_BT_MESH_GATT_PROXY */

	return -ENOTSUP;
}
   15958:	4620      	mov	r0, r4
   1595a:	b00e      	add	sp, #56	; 0x38
   1595c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	prov_sd[0].type = BT_DATA_URI;
   15960:	2324      	movs	r3, #36	; 0x24
   15962:	f88d 3008 	strb.w	r3, [sp, #8]
	prov_sd[0].data = (const uint8_t *)prov->uri;
   15966:	686b      	ldr	r3, [r5, #4]
	prov_sd[0].data_len = uri_len;
   15968:	f88d 0009 	strb.w	r0, [sp, #9]
	prov_sd[0].data = (const uint8_t *)prov->uri;
   1596c:	9303      	str	r3, [sp, #12]
	return 1;
   1596e:	2401      	movs	r4, #1
   15970:	e7d7      	b.n	15922 <bt_mesh_proxy_adv_start+0x6e>
		return 0;
   15972:	4604      	mov	r4, r0
   15974:	e7d5      	b.n	15922 <bt_mesh_proxy_adv_start+0x6e>
		err = bt_mesh_adv_start(&fast_adv_param, (60 * MSEC_PER_SEC),
   15976:	e9cd 6400 	strd	r6, r4, [sp]
   1597a:	4a93      	ldr	r2, [pc, #588]	; (15bc8 <bt_mesh_proxy_adv_start+0x314>)
   1597c:	2303      	movs	r3, #3
   1597e:	f64e 2160 	movw	r1, #60000	; 0xea60
   15982:	a804      	add	r0, sp, #16
   15984:	f7fd fd06 	bl	13394 <bt_mesh_adv_start>
		if (!err) {
   15988:	4604      	mov	r4, r0
   1598a:	2800      	cmp	r0, #0
   1598c:	d1e4      	bne.n	15958 <bt_mesh_proxy_adv_start+0xa4>
			prov_fast_adv = false;
   1598e:	7028      	strb	r0, [r5, #0]
   15990:	e7e2      	b.n	15958 <bt_mesh_proxy_adv_start+0xa4>
	if (bt_mesh_is_provisioned()) {
   15992:	f7f5 fe0b 	bl	b5ac <bt_mesh_is_provisioned>
   15996:	2800      	cmp	r0, #0
   15998:	f000 8104 	beq.w	15ba4 <bt_mesh_proxy_adv_start+0x2f0>
	if (!beacon_sub) {
   1599c:	4e8b      	ldr	r6, [pc, #556]	; (15bcc <bt_mesh_proxy_adv_start+0x318>)
   1599e:	6830      	ldr	r0, [r6, #0]
   159a0:	b150      	cbz	r0, 159b8 <bt_mesh_proxy_adv_start+0x104>
	sub = beacon_sub;
   159a2:	6834      	ldr	r4, [r6, #0]
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   159a4:	f64f 75ff 	movw	r5, #65535	; 0xffff
   159a8:	8ba3      	ldrh	r3, [r4, #28]
   159aa:	42ab      	cmp	r3, r5
   159ac:	d026      	beq.n	159fc <bt_mesh_proxy_adv_start+0x148>
	return (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING ||
   159ae:	7fe3      	ldrb	r3, [r4, #31]
   159b0:	2b01      	cmp	r3, #1
   159b2:	d11f      	bne.n	159f4 <bt_mesh_proxy_adv_start+0x140>
			beacon_sub = sub;
   159b4:	6034      	str	r4, [r6, #0]
			return sub;
   159b6:	e004      	b.n	159c2 <bt_mesh_proxy_adv_start+0x10e>
		beacon_sub = bt_mesh_subnet_next(NULL);
   159b8:	f7f7 fdea 	bl	d590 <bt_mesh_subnet_next>
   159bc:	6030      	str	r0, [r6, #0]
		if (!beacon_sub) {
   159be:	2800      	cmp	r0, #0
   159c0:	d1ef      	bne.n	159a2 <bt_mesh_proxy_adv_start+0xee>
	if (conn_count == CONFIG_BT_MAX_CONN) {
   159c2:	4b83      	ldr	r3, [pc, #524]	; (15bd0 <bt_mesh_proxy_adv_start+0x31c>)
   159c4:	681b      	ldr	r3, [r3, #0]
   159c6:	2b01      	cmp	r3, #1
   159c8:	f000 80ef 	beq.w	15baa <bt_mesh_proxy_adv_start+0x2f6>
	sub = beacon_sub ? beacon_sub : bt_mesh_subnet_next(beacon_sub);
   159cc:	6835      	ldr	r5, [r6, #0]
   159ce:	b9ed      	cbnz	r5, 15a0c <bt_mesh_proxy_adv_start+0x158>
   159d0:	4628      	mov	r0, r5
   159d2:	f7f7 fddd 	bl	d590 <bt_mesh_subnet_next>
	if (!sub) {
   159d6:	4605      	mov	r5, r0
   159d8:	b9c0      	cbnz	r0, 15a0c <bt_mesh_proxy_adv_start+0x158>
   159da:	4977      	ldr	r1, [pc, #476]	; (15bb8 <bt_mesh_proxy_adv_start+0x304>)
   159dc:	4b77      	ldr	r3, [pc, #476]	; (15bbc <bt_mesh_proxy_adv_start+0x308>)
		BT_WARN("No subnets to advertise on");
   159de:	487d      	ldr	r0, [pc, #500]	; (15bd4 <bt_mesh_proxy_adv_start+0x320>)
   159e0:	1ac9      	subs	r1, r1, r3
   159e2:	08c9      	lsrs	r1, r1, #3
   159e4:	0189      	lsls	r1, r1, #6
   159e6:	f041 0102 	orr.w	r1, r1, #2
   159ea:	f00c f87e 	bl	21aea <log_0>
		return -ENOENT;
   159ee:	f06f 0401 	mvn.w	r4, #1
   159f2:	e7b1      	b.n	15958 <bt_mesh_proxy_adv_start+0xa4>
		bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
   159f4:	f7f5 fefe 	bl	b7f4 <bt_mesh_gatt_proxy_get>
		if (advertise_subnet(sub)) {
   159f8:	2801      	cmp	r0, #1
   159fa:	d0db      	beq.n	159b4 <bt_mesh_proxy_adv_start+0x100>
		sub = bt_mesh_subnet_next(sub);
   159fc:	4620      	mov	r0, r4
   159fe:	f7f7 fdc7 	bl	d590 <bt_mesh_subnet_next>
	} while (sub != beacon_sub);
   15a02:	6833      	ldr	r3, [r6, #0]
   15a04:	4298      	cmp	r0, r3
		sub = bt_mesh_subnet_next(sub);
   15a06:	4604      	mov	r4, r0
	} while (sub != beacon_sub);
   15a08:	d1ce      	bne.n	159a8 <bt_mesh_proxy_adv_start+0xf4>
   15a0a:	e7da      	b.n	159c2 <bt_mesh_proxy_adv_start+0x10e>
	int count = 0;
   15a0c:	2300      	movs	r3, #0
	(void)bt_mesh_subnet_find(sub_count_cb, &count);
   15a0e:	4872      	ldr	r0, [pc, #456]	; (15bd8 <bt_mesh_proxy_adv_start+0x324>)
	int count = 0;
   15a10:	9309      	str	r3, [sp, #36]	; 0x24
	(void)bt_mesh_subnet_find(sub_count_cb, &count);
   15a12:	a909      	add	r1, sp, #36	; 0x24
   15a14:	f7f7 fd7c 	bl	d510 <bt_mesh_subnet_find>
	return count;
   15a18:	9f09      	ldr	r7, [sp, #36]	; 0x24
	if (subnet_count > 1) {
   15a1a:	2f01      	cmp	r7, #1
   15a1c:	f340 80b9 	ble.w	15b92 <bt_mesh_proxy_adv_start+0x2de>
		max_timeout = NODE_ID_TIMEOUT / MAX(subnet_count, 6);
   15a20:	2f06      	cmp	r7, #6
   15a22:	bfb8      	it	lt
   15a24:	2706      	movlt	r7, #6
   15a26:	f64e 2360 	movw	r3, #60000	; 0xea60
   15a2a:	fbb3 f7f7 	udiv	r7, r3, r7
		max_timeout = MAX(max_timeout, 1 * MSEC_PER_SEC);
   15a2e:	f5b7 7f7a 	cmp.w	r7, #1000	; 0x3e8
   15a32:	bf38      	it	cc
   15a34:	f44f 777a 	movcc.w	r7, #1000	; 0x3e8
	if (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING) {
   15a38:	7fec      	ldrb	r4, [r5, #31]
   15a3a:	2c01      	cmp	r4, #1
   15a3c:	f040 80af 	bne.w	15b9e <bt_mesh_proxy_adv_start+0x2ea>
   15a40:	f013 fb78 	bl	29134 <z_impl_k_uptime_ticks>
   15a44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15a48:	fba0 0302 	umull	r0, r3, r0, r2
   15a4c:	fb02 3301 	mla	r3, r2, r1, r3
   15a50:	0bc0      	lsrs	r0, r0, #15
   15a52:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
		uint32_t active = k_uptime_get_32() - sub->node_id_start;
   15a56:	6a2b      	ldr	r3, [r5, #32]
		if (active < NODE_ID_TIMEOUT) {
   15a58:	f64e 225f 	movw	r2, #59999	; 0xea5f
		uint32_t active = k_uptime_get_32() - sub->node_id_start;
   15a5c:	1ac1      	subs	r1, r0, r3
		if (active < NODE_ID_TIMEOUT) {
   15a5e:	4291      	cmp	r1, r2
   15a60:	f200 809a 	bhi.w	15b98 <bt_mesh_proxy_adv_start+0x2e4>
			remaining = NODE_ID_TIMEOUT - active;
   15a64:	f503 476a 	add.w	r7, r3, #59904	; 0xea00
   15a68:	3760      	adds	r7, #96	; 0x60
	proxy_svc_data[2] = ID_TYPE_NODE;
   15a6a:	f8df 8170 	ldr.w	r8, [pc, #368]	; 15bdc <bt_mesh_proxy_adv_start+0x328>
	struct bt_le_adv_param fast_adv_param = {
   15a6e:	2214      	movs	r2, #20
   15a70:	2100      	movs	r1, #0
			remaining = NODE_ID_TIMEOUT - active;
   15a72:	1a3f      	subs	r7, r7, r0
	struct bt_le_adv_param fast_adv_param = {
   15a74:	a809      	add	r0, sp, #36	; 0x24
   15a76:	f00e f9a2 	bl	23dbe <memset>
   15a7a:	f240 2e03 	movw	lr, #515	; 0x203
   15a7e:	23a0      	movs	r3, #160	; 0xa0
   15a80:	e9cd e30a 	strd	lr, r3, [sp, #40]	; 0x28
	proxy_svc_data[2] = ID_TYPE_NODE;
   15a84:	f888 4002 	strb.w	r4, [r8, #2]
	struct bt_le_adv_param fast_adv_param = {
   15a88:	23f0      	movs	r3, #240	; 0xf0
	err = bt_rand(proxy_svc_data + 11, 8);
   15a8a:	2108      	movs	r1, #8
   15a8c:	f108 000b 	add.w	r0, r8, #11
	struct bt_le_adv_param fast_adv_param = {
   15a90:	930c      	str	r3, [sp, #48]	; 0x30
	err = bt_rand(proxy_svc_data + 11, 8);
   15a92:	f011 fcca 	bl	2742a <bt_rand>
	if (err) {
   15a96:	4604      	mov	r4, r0
   15a98:	2800      	cmp	r0, #0
   15a9a:	d13e      	bne.n	15b1a <bt_mesh_proxy_adv_start+0x266>
	(void)memset(tmp, 0, 6);
   15a9c:	4601      	mov	r1, r0
   15a9e:	2206      	movs	r2, #6
   15aa0:	a804      	add	r0, sp, #16
   15aa2:	f00e f98c 	bl	23dbe <memset>
	memcpy(tmp + 6, proxy_svc_data + 11, 8);
   15aa6:	2208      	movs	r2, #8
   15aa8:	f108 010b 	add.w	r1, r8, #11
   15aac:	f10d 0016 	add.w	r0, sp, #22
   15ab0:	f00e f97a 	bl	23da8 <memcpy>
	sys_put_be16(bt_mesh_primary_addr(), tmp + 14);
   15ab4:	f7fa fd8e 	bl	105d4 <bt_mesh_primary_addr>
   15ab8:	0a03      	lsrs	r3, r0, #8
   15aba:	f88d 301e 	strb.w	r3, [sp, #30]
	dst[1] = val;
   15abe:	f88d 001f 	strb.w	r0, [sp, #31]
	err = bt_encrypt_be(sub->keys[SUBNET_KEY_TX_IDX(sub)].identity, tmp,
   15ac2:	7fa8      	ldrb	r0, [r5, #30]
   15ac4:	f1a0 0c02 	sub.w	ip, r0, #2
   15ac8:	f1dc 0000 	rsbs	r0, ip, #0
   15acc:	eb40 000c 	adc.w	r0, r0, ip
   15ad0:	235a      	movs	r3, #90	; 0x5a
   15ad2:	fb03 5000 	mla	r0, r3, r0, r5
   15ad6:	aa04      	add	r2, sp, #16
   15ad8:	4611      	mov	r1, r2
   15ada:	3066      	adds	r0, #102	; 0x66
   15adc:	f011 fca7 	bl	2742e <bt_encrypt_be>
	if (err) {
   15ae0:	4604      	mov	r4, r0
   15ae2:	b9d0      	cbnz	r0, 15b1a <bt_mesh_proxy_adv_start+0x266>
	memcpy(proxy_svc_data + 3, tmp + 8, 8);
   15ae4:	2208      	movs	r2, #8
   15ae6:	a906      	add	r1, sp, #24
   15ae8:	f108 0003 	add.w	r0, r8, #3
   15aec:	f00e f95c 	bl	23da8 <memcpy>
	err = bt_mesh_adv_start(&fast_adv_param, duration, node_id_ad,
   15af0:	e9cd 4400 	strd	r4, r4, [sp]
   15af4:	4a3a      	ldr	r2, [pc, #232]	; (15be0 <bt_mesh_proxy_adv_start+0x32c>)
   15af6:	2303      	movs	r3, #3
   15af8:	4639      	mov	r1, r7
   15afa:	a809      	add	r0, sp, #36	; 0x24
   15afc:	f7fd fc4a 	bl	13394 <bt_mesh_adv_start>
	if (err) {
   15b00:	4604      	mov	r4, r0
   15b02:	b150      	cbz	r0, 15b1a <bt_mesh_proxy_adv_start+0x266>
   15b04:	4a2c      	ldr	r2, [pc, #176]	; (15bb8 <bt_mesh_proxy_adv_start+0x304>)
   15b06:	4b2d      	ldr	r3, [pc, #180]	; (15bbc <bt_mesh_proxy_adv_start+0x308>)
   15b08:	1ad2      	subs	r2, r2, r3
   15b0a:	08d2      	lsrs	r2, r2, #3
		BT_WARN("Failed to advertise using Node ID (err %d)", err);
   15b0c:	0192      	lsls	r2, r2, #6
   15b0e:	4601      	mov	r1, r0
   15b10:	f042 0202 	orr.w	r2, r2, #2
   15b14:	4833      	ldr	r0, [pc, #204]	; (15be4 <bt_mesh_proxy_adv_start+0x330>)
   15b16:	f00b fff5 	bl	21b04 <log_1>
	if (sub->node_id == BT_MESH_NODE_IDENTITY_STOPPED) {
   15b1a:	f895 801f 	ldrb.w	r8, [r5, #31]
   15b1e:	f1b8 0f00 	cmp.w	r8, #0
   15b22:	d131      	bne.n	15b88 <bt_mesh_proxy_adv_start+0x2d4>
	struct bt_le_adv_param slow_adv_param = {
   15b24:	2214      	movs	r2, #20
   15b26:	4641      	mov	r1, r8
   15b28:	a809      	add	r0, sp, #36	; 0x24
   15b2a:	f00e f948 	bl	23dbe <memset>
   15b2e:	f240 2203 	movw	r2, #515	; 0x203
   15b32:	f44f 63c8 	mov.w	r3, #1600	; 0x640
   15b36:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   15b3a:	f44f 63f0 	mov.w	r3, #1920	; 0x780
   15b3e:	930c      	str	r3, [sp, #48]	; 0x30
	memcpy(proxy_svc_data + 3, sub->keys[SUBNET_KEY_TX_IDX(sub)].net_id, 8);
   15b40:	7fa9      	ldrb	r1, [r5, #30]
	proxy_svc_data[2] = ID_TYPE_NET;
   15b42:	4826      	ldr	r0, [pc, #152]	; (15bdc <bt_mesh_proxy_adv_start+0x328>)
	memcpy(proxy_svc_data + 3, sub->keys[SUBNET_KEY_TX_IDX(sub)].net_id, 8);
   15b44:	1e8c      	subs	r4, r1, #2
   15b46:	4261      	negs	r1, r4
   15b48:	4161      	adcs	r1, r4
   15b4a:	235a      	movs	r3, #90	; 0x5a
   15b4c:	fb03 5101 	mla	r1, r3, r1, r5
	proxy_svc_data[2] = ID_TYPE_NET;
   15b50:	f880 8002 	strb.w	r8, [r0, #2]
	memcpy(proxy_svc_data + 3, sub->keys[SUBNET_KEY_TX_IDX(sub)].net_id, 8);
   15b54:	2208      	movs	r2, #8
   15b56:	315e      	adds	r1, #94	; 0x5e
   15b58:	3003      	adds	r0, #3
   15b5a:	f00e f925 	bl	23da8 <memcpy>
	err = bt_mesh_adv_start(&slow_adv_param, duration, net_id_ad,
   15b5e:	e9cd 8800 	strd	r8, r8, [sp]
   15b62:	4a21      	ldr	r2, [pc, #132]	; (15be8 <bt_mesh_proxy_adv_start+0x334>)
   15b64:	2303      	movs	r3, #3
   15b66:	4639      	mov	r1, r7
   15b68:	a809      	add	r0, sp, #36	; 0x24
   15b6a:	f7fd fc13 	bl	13394 <bt_mesh_adv_start>
	if (err) {
   15b6e:	4604      	mov	r4, r0
   15b70:	b150      	cbz	r0, 15b88 <bt_mesh_proxy_adv_start+0x2d4>
   15b72:	4a11      	ldr	r2, [pc, #68]	; (15bb8 <bt_mesh_proxy_adv_start+0x304>)
   15b74:	4b11      	ldr	r3, [pc, #68]	; (15bbc <bt_mesh_proxy_adv_start+0x308>)
   15b76:	1ad2      	subs	r2, r2, r3
   15b78:	08d2      	lsrs	r2, r2, #3
		BT_WARN("Failed to advertise using Network ID (err %d)", err);
   15b7a:	0192      	lsls	r2, r2, #6
   15b7c:	4601      	mov	r1, r0
   15b7e:	f042 0202 	orr.w	r2, r2, #2
   15b82:	481a      	ldr	r0, [pc, #104]	; (15bec <bt_mesh_proxy_adv_start+0x338>)
   15b84:	f00b ffbe 	bl	21b04 <log_1>
	beacon_sub = bt_mesh_subnet_next(beacon_sub);
   15b88:	6830      	ldr	r0, [r6, #0]
   15b8a:	f7f7 fd01 	bl	d590 <bt_mesh_subnet_next>
   15b8e:	6030      	str	r0, [r6, #0]
	return err;
   15b90:	e6e2      	b.n	15958 <bt_mesh_proxy_adv_start+0xa4>
	int32_t remaining = SYS_FOREVER_MS;
   15b92:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   15b96:	e74f      	b.n	15a38 <bt_mesh_proxy_adv_start+0x184>
			bt_mesh_proxy_identity_stop(sub);
   15b98:	4628      	mov	r0, r5
   15b9a:	f7ff fd07 	bl	155ac <bt_mesh_proxy_identity_stop>
	int err = -EBUSY;
   15b9e:	f06f 040f 	mvn.w	r4, #15
   15ba2:	e7ba      	b.n	15b1a <bt_mesh_proxy_adv_start+0x266>
	return -ENOTSUP;
   15ba4:	f06f 0485 	mvn.w	r4, #133	; 0x85
   15ba8:	e6d6      	b.n	15958 <bt_mesh_proxy_adv_start+0xa4>
		return -ENOMEM;
   15baa:	f06f 040b 	mvn.w	r4, #11
   15bae:	e6d3      	b.n	15958 <bt_mesh_proxy_adv_start+0xa4>
   15bb0:	200038a8 	.word	0x200038a8
   15bb4:	20001021 	.word	0x20001021
   15bb8:	000299c8 	.word	0x000299c8
   15bbc:	00029870 	.word	0x00029870
   15bc0:	0002ebcc 	.word	0x0002ebcc
   15bc4:	200038a9 	.word	0x200038a9
   15bc8:	0002a5d4 	.word	0x0002a5d4
   15bcc:	20002494 	.word	0x20002494
   15bd0:	20002498 	.word	0x20002498
   15bd4:	0002ebf3 	.word	0x0002ebf3
   15bd8:	00026b81 	.word	0x00026b81
   15bdc:	20001035 	.word	0x20001035
   15be0:	0002a5bc 	.word	0x0002a5bc
   15be4:	0002ec0e 	.word	0x0002ec0e
   15be8:	0002a5a4 	.word	0x0002a5a4
   15bec:	0002ec39 	.word	0x0002ec39

00015bf0 <bt_mesh_proxy_init>:
	.connected = gatt_connected,
	.disconnected = gatt_disconnected,
};

int bt_mesh_proxy_init(void)
{
   15bf0:	b510      	push	{r4, lr}

	/* Initialize the client receive buffers */
	for (i = 0; i < ARRAY_SIZE(clients); i++) {
		struct bt_mesh_proxy_client *client = &clients[i];

		net_buf_simple_init_with_data(&client->cli.buf,
   15bf2:	4c07      	ldr	r4, [pc, #28]	; (15c10 <bt_mesh_proxy_init+0x20>)
   15bf4:	4907      	ldr	r1, [pc, #28]	; (15c14 <bt_mesh_proxy_init+0x24>)
   15bf6:	2241      	movs	r2, #65	; 0x41
   15bf8:	f104 0040 	add.w	r0, r4, #64	; 0x40
   15bfc:	f012 fa85 	bl	2810a <net_buf_simple_init_with_data>
			client_buf_data + (i * CLIENT_BUF_SIZE), CLIENT_BUF_SIZE);

		bt_mesh_proxy_msg_init(&client->cli);
   15c00:	4620      	mov	r0, r4
   15c02:	f000 f93b 	bl	15e7c <bt_mesh_proxy_msg_init>
	}

	bt_conn_cb_register(&conn_callbacks);
   15c06:	4804      	ldr	r0, [pc, #16]	; (15c18 <bt_mesh_proxy_init+0x28>)
   15c08:	f7f2 fc6c 	bl	84e4 <bt_conn_cb_register>

	return 0;
}
   15c0c:	2000      	movs	r0, #0
   15c0e:	bd10      	pop	{r4, pc}
   15c10:	20000470 	.word	0x20000470
   15c14:	20008d71 	.word	0x20008d71
   15c18:	20000a38 	.word	0x20000a38

00015c1c <proxy_complete_pdu>:
	role->cb.recv(role->conn, &rx, &buf);
}
#endif

static void proxy_complete_pdu(struct bt_mesh_proxy_role *role)
{
   15c1c:	b510      	push	{r4, lr}
	switch (role->msg_type) {
   15c1e:	7901      	ldrb	r1, [r0, #4]
{
   15c20:	b094      	sub	sp, #80	; 0x50
   15c22:	4604      	mov	r4, r0
	switch (role->msg_type) {
   15c24:	2903      	cmp	r1, #3
   15c26:	d866      	bhi.n	15cf6 <proxy_complete_pdu+0xda>
   15c28:	e8df f001 	tbb	[pc, r1]
   15c2c:	5f120e02 	.word	0x5f120e02
#if defined(CONFIG_BT_MESH_PROXY)
	case BT_MESH_PROXY_NET_PDU:
		BT_DBG("Mesh Network PDU");
		bt_mesh_net_recv(&role->buf, 0, BT_MESH_NET_IF_PROXY);
   15c30:	2202      	movs	r2, #2
   15c32:	2100      	movs	r1, #0
   15c34:	3040      	adds	r0, #64	; 0x40
   15c36:	f7f7 f843 	bl	ccc0 <bt_mesh_net_recv>
	buf->len  = 0U;
   15c3a:	2300      	movs	r3, #0
   15c3c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	buf->data = buf->__buf;
   15c40:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   15c42:	6423      	str	r3, [r4, #64]	; 0x40
		BT_WARN("Unhandled Message Type 0x%02x", role->msg_type);
		break;
	}

	net_buf_simple_reset(&role->buf);
}
   15c44:	b014      	add	sp, #80	; 0x50
   15c46:	bd10      	pop	{r4, pc}
		bt_mesh_beacon_recv(&role->buf);
   15c48:	3040      	adds	r0, #64	; 0x40
   15c4a:	f7f6 fa03 	bl	c054 <bt_mesh_beacon_recv>
		break;
   15c4e:	e7f4      	b.n	15c3a <proxy_complete_pdu+0x1e>
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_NET_MAX_PDU_LEN);
   15c50:	ab0c      	add	r3, sp, #48	; 0x30
   15c52:	f44f 12e8 	mov.w	r2, #1900544	; 0x1d0000
   15c56:	e9cd 2304 	strd	r2, r3, [sp, #16]
   15c5a:	9303      	str	r3, [sp, #12]
	err = bt_mesh_net_decode(&role->buf, BT_MESH_NET_IF_PROXY_CFG,
   15c5c:	2103      	movs	r1, #3
   15c5e:	ab03      	add	r3, sp, #12
   15c60:	aa06      	add	r2, sp, #24
   15c62:	3040      	adds	r0, #64	; 0x40
   15c64:	f7f6 ff62 	bl	cb2c <bt_mesh_net_decode>
	if (err) {
   15c68:	4601      	mov	r1, r0
   15c6a:	b150      	cbz	r0, 15c82 <proxy_complete_pdu+0x66>
   15c6c:	4a26      	ldr	r2, [pc, #152]	; (15d08 <proxy_complete_pdu+0xec>)
   15c6e:	4b27      	ldr	r3, [pc, #156]	; (15d0c <proxy_complete_pdu+0xf0>)
		BT_ERR("Failed to decode Proxy Configuration (err %d)", err);
   15c70:	4827      	ldr	r0, [pc, #156]	; (15d10 <proxy_complete_pdu+0xf4>)
   15c72:	1ad2      	subs	r2, r2, r3
   15c74:	08d2      	lsrs	r2, r2, #3
   15c76:	0192      	lsls	r2, r2, #6
   15c78:	f042 0201 	orr.w	r2, r2, #1
		BT_WARN("Unhandled Message Type 0x%02x", role->msg_type);
   15c7c:	f00b ff42 	bl	21b04 <log_1>
   15c80:	e7db      	b.n	15c3a <proxy_complete_pdu+0x1e>
	rx.local_match = 1U;
   15c82:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
	if (bt_mesh_rpl_check(&rx, NULL)) {
   15c86:	a806      	add	r0, sp, #24
	rx.local_match = 1U;
   15c88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   15c8c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	if (bt_mesh_rpl_check(&rx, NULL)) {
   15c90:	f7f9 fb3c 	bl	f30c <bt_mesh_rpl_check>
   15c94:	b188      	cbz	r0, 15cba <proxy_complete_pdu+0x9e>
   15c96:	4a1d      	ldr	r2, [pc, #116]	; (15d0c <proxy_complete_pdu+0xf0>)
   15c98:	4b1b      	ldr	r3, [pc, #108]	; (15d08 <proxy_complete_pdu+0xec>)
		BT_WARN("Replay: src 0x%04x dst 0x%04x seq 0x%06x",
   15c9a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   15c9e:	481d      	ldr	r0, [pc, #116]	; (15d14 <proxy_complete_pdu+0xf8>)
   15ca0:	1a9b      	subs	r3, r3, r2
   15ca2:	08db      	lsrs	r3, r3, #3
   15ca4:	019b      	lsls	r3, r3, #6
   15ca6:	f043 0302 	orr.w	r3, r3, #2
   15caa:	f8ad 3000 	strh.w	r3, [sp]
   15cae:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   15cb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15cb4:	f00b ff53 	bl	21b5e <log_3>
		return;
   15cb8:	e7bf      	b.n	15c3a <proxy_complete_pdu+0x1e>
	net_buf_simple_pull(&buf, BT_MESH_NET_HDR_LEN);
   15cba:	2109      	movs	r1, #9
   15cbc:	a803      	add	r0, sp, #12
   15cbe:	f012 fb33 	bl	28328 <net_buf_simple_pull>
	if (buf.len < 1) {
   15cc2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   15cc6:	b953      	cbnz	r3, 15cde <proxy_complete_pdu+0xc2>
   15cc8:	4b10      	ldr	r3, [pc, #64]	; (15d0c <proxy_complete_pdu+0xf0>)
   15cca:	490f      	ldr	r1, [pc, #60]	; (15d08 <proxy_complete_pdu+0xec>)
		BT_WARN("Too short proxy configuration PDU");
   15ccc:	4812      	ldr	r0, [pc, #72]	; (15d18 <proxy_complete_pdu+0xfc>)
   15cce:	1ac9      	subs	r1, r1, r3
   15cd0:	08c9      	lsrs	r1, r1, #3
   15cd2:	0189      	lsls	r1, r1, #6
   15cd4:	f041 0102 	orr.w	r1, r1, #2
   15cd8:	f00b ff07 	bl	21aea <log_0>
		return;
   15cdc:	e7ad      	b.n	15c3a <proxy_complete_pdu+0x1e>
	role->cb.recv(role->conn, &rx, &buf);
   15cde:	68e3      	ldr	r3, [r4, #12]
   15ce0:	6820      	ldr	r0, [r4, #0]
   15ce2:	aa03      	add	r2, sp, #12
   15ce4:	a906      	add	r1, sp, #24
   15ce6:	4798      	blx	r3
   15ce8:	e7a7      	b.n	15c3a <proxy_complete_pdu+0x1e>
		bt_mesh_pb_gatt_recv(role->conn, &role->buf);
   15cea:	f100 0140 	add.w	r1, r0, #64	; 0x40
   15cee:	6800      	ldr	r0, [r0, #0]
   15cf0:	f7ff f9c8 	bl	15084 <bt_mesh_pb_gatt_recv>
		break;
   15cf4:	e7a1      	b.n	15c3a <proxy_complete_pdu+0x1e>
   15cf6:	4a04      	ldr	r2, [pc, #16]	; (15d08 <proxy_complete_pdu+0xec>)
   15cf8:	4b04      	ldr	r3, [pc, #16]	; (15d0c <proxy_complete_pdu+0xf0>)
		BT_WARN("Unhandled Message Type 0x%02x", role->msg_type);
   15cfa:	4808      	ldr	r0, [pc, #32]	; (15d1c <proxy_complete_pdu+0x100>)
   15cfc:	1ad2      	subs	r2, r2, r3
   15cfe:	08d2      	lsrs	r2, r2, #3
   15d00:	0192      	lsls	r2, r2, #6
   15d02:	f042 0202 	orr.w	r2, r2, #2
   15d06:	e7b9      	b.n	15c7c <proxy_complete_pdu+0x60>
   15d08:	00029a20 	.word	0x00029a20
   15d0c:	00029870 	.word	0x00029870
   15d10:	0002ec74 	.word	0x0002ec74
   15d14:	0002d197 	.word	0x0002d197
   15d18:	0002eca2 	.word	0x0002eca2
   15d1c:	0002ecc4 	.word	0x0002ecc4

00015d20 <proxy_sar_timeout>:
   15d20:	4b0a      	ldr	r3, [pc, #40]	; (15d4c <proxy_sar_timeout+0x2c>)
   15d22:	490b      	ldr	r1, [pc, #44]	; (15d50 <proxy_sar_timeout+0x30>)
   15d24:	1ac9      	subs	r1, r1, r3
   15d26:	08c9      	lsrs	r1, r1, #3
{
   15d28:	b510      	push	{r4, lr}
	BT_WARN("Proxy SAR timeout");
   15d2a:	0189      	lsls	r1, r1, #6
{
   15d2c:	4604      	mov	r4, r0
	BT_WARN("Proxy SAR timeout");
   15d2e:	f041 0102 	orr.w	r1, r1, #2
   15d32:	4808      	ldr	r0, [pc, #32]	; (15d54 <proxy_sar_timeout+0x34>)
   15d34:	f00b fed9 	bl	21aea <log_0>
	if (role->conn) {
   15d38:	f854 0c10 	ldr.w	r0, [r4, #-16]
   15d3c:	b120      	cbz	r0, 15d48 <proxy_sar_timeout+0x28>
}
   15d3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_conn_disconnect(role->conn,
   15d42:	2113      	movs	r1, #19
   15d44:	f00e bd8d 	b.w	24862 <bt_conn_disconnect>
}
   15d48:	bd10      	pop	{r4, pc}
   15d4a:	bf00      	nop
   15d4c:	00029870 	.word	0x00029870
   15d50:	00029a20 	.word	0x00029a20
   15d54:	0002ece2 	.word	0x0002ece2

00015d58 <bt_mesh_proxy_msg_recv>:

ssize_t bt_mesh_proxy_msg_recv(struct bt_mesh_proxy_role *role,
			       const void *buf, uint16_t len)
{
   15d58:	b570      	push	{r4, r5, r6, lr}
	const uint8_t *data = buf;

	switch (PDU_SAR(data)) {
   15d5a:	780b      	ldrb	r3, [r1, #0]
{
   15d5c:	4616      	mov	r6, r2
	switch (PDU_SAR(data)) {
   15d5e:	099a      	lsrs	r2, r3, #6
   15d60:	2a02      	cmp	r2, #2
{
   15d62:	460d      	mov	r5, r1
   15d64:	4604      	mov	r4, r0
	case SAR_COMPLETE:
		if (role->buf.len) {
   15d66:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
	switch (PDU_SAR(data)) {
   15d6a:	d039      	beq.n	15de0 <bt_mesh_proxy_msg_recv+0x88>
   15d6c:	2a03      	cmp	r2, #3
   15d6e:	d058      	beq.n	15e22 <bt_mesh_proxy_msg_recv+0xca>
   15d70:	2a01      	cmp	r2, #1
   15d72:	d018      	beq.n	15da6 <bt_mesh_proxy_msg_recv+0x4e>
		if (role->buf.len) {
   15d74:	b161      	cbz	r1, 15d90 <bt_mesh_proxy_msg_recv+0x38>
   15d76:	4939      	ldr	r1, [pc, #228]	; (15e5c <bt_mesh_proxy_msg_recv+0x104>)
   15d78:	4b39      	ldr	r3, [pc, #228]	; (15e60 <bt_mesh_proxy_msg_recv+0x108>)
			BT_WARN("Complete PDU while a pending incomplete one");
   15d7a:	483a      	ldr	r0, [pc, #232]	; (15e64 <bt_mesh_proxy_msg_recv+0x10c>)
   15d7c:	1ac9      	subs	r1, r1, r3
   15d7e:	08c9      	lsrs	r1, r1, #3
   15d80:	0189      	lsls	r1, r1, #6
   15d82:	f041 0102 	orr.w	r1, r1, #2
			BT_WARN("Last SAR PDU with no prior data");
			return -EINVAL;
		}

		if (role->msg_type != PDU_TYPE(data)) {
			BT_WARN("Unexpected message type in last SAR PDU");
   15d86:	f00b feb0 	bl	21aea <log_0>
			return -EINVAL;
   15d8a:	f06f 0015 	mvn.w	r0, #21
		proxy_complete_pdu(role);
		break;
	}

	return len;
}
   15d8e:	bd70      	pop	{r4, r5, r6, pc}
		role->msg_type = PDU_TYPE(data);
   15d90:	7103      	strb	r3, [r0, #4]
		net_buf_simple_add_mem(&role->buf, data + 1, len - 1);
   15d92:	1e72      	subs	r2, r6, #1
   15d94:	1c69      	adds	r1, r5, #1
   15d96:	f104 0040 	add.w	r0, r4, #64	; 0x40
   15d9a:	f012 fa5b 	bl	28254 <net_buf_simple_add_mem>
		proxy_complete_pdu(role);
   15d9e:	4620      	mov	r0, r4
   15da0:	f7ff ff3c 	bl	15c1c <proxy_complete_pdu>
		break;
   15da4:	e01a      	b.n	15ddc <bt_mesh_proxy_msg_recv+0x84>
		if (role->buf.len) {
   15da6:	b141      	cbz	r1, 15dba <bt_mesh_proxy_msg_recv+0x62>
   15da8:	492c      	ldr	r1, [pc, #176]	; (15e5c <bt_mesh_proxy_msg_recv+0x104>)
   15daa:	4b2d      	ldr	r3, [pc, #180]	; (15e60 <bt_mesh_proxy_msg_recv+0x108>)
			BT_WARN("First PDU while a pending incomplete one");
   15dac:	482e      	ldr	r0, [pc, #184]	; (15e68 <bt_mesh_proxy_msg_recv+0x110>)
   15dae:	1ac9      	subs	r1, r1, r3
   15db0:	08c9      	lsrs	r1, r1, #3
   15db2:	0189      	lsls	r1, r1, #6
   15db4:	f041 0102 	orr.w	r1, r1, #2
   15db8:	e7e5      	b.n	15d86 <bt_mesh_proxy_msg_recv+0x2e>
		k_work_reschedule(&role->sar_timer, PROXY_SAR_TIMEOUT);
   15dba:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   15dbe:	2300      	movs	r3, #0
   15dc0:	3010      	adds	r0, #16
   15dc2:	f00a fb2f 	bl	20424 <k_work_reschedule>
		role->msg_type = PDU_TYPE(data);
   15dc6:	4629      	mov	r1, r5
		net_buf_simple_add_mem(&role->buf, data + 1, len - 1);
   15dc8:	1e72      	subs	r2, r6, #1
		role->msg_type = PDU_TYPE(data);
   15dca:	f811 3b01 	ldrb.w	r3, [r1], #1
   15dce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15dd2:	7123      	strb	r3, [r4, #4]
		net_buf_simple_add_mem(&role->buf, data + 1, len - 1);
   15dd4:	f104 0040 	add.w	r0, r4, #64	; 0x40
   15dd8:	f012 fa3c 	bl	28254 <net_buf_simple_add_mem>
	return len;
   15ddc:	4630      	mov	r0, r6
   15dde:	e7d6      	b.n	15d8e <bt_mesh_proxy_msg_recv+0x36>
		if (!role->buf.len) {
   15de0:	b941      	cbnz	r1, 15df4 <bt_mesh_proxy_msg_recv+0x9c>
   15de2:	491e      	ldr	r1, [pc, #120]	; (15e5c <bt_mesh_proxy_msg_recv+0x104>)
   15de4:	4b1e      	ldr	r3, [pc, #120]	; (15e60 <bt_mesh_proxy_msg_recv+0x108>)
			BT_WARN("Continuation with no prior data");
   15de6:	4821      	ldr	r0, [pc, #132]	; (15e6c <bt_mesh_proxy_msg_recv+0x114>)
   15de8:	1ac9      	subs	r1, r1, r3
   15dea:	08c9      	lsrs	r1, r1, #3
   15dec:	0189      	lsls	r1, r1, #6
   15dee:	f041 0102 	orr.w	r1, r1, #2
   15df2:	e7c8      	b.n	15d86 <bt_mesh_proxy_msg_recv+0x2e>
		if (role->msg_type != PDU_TYPE(data)) {
   15df4:	7902      	ldrb	r2, [r0, #4]
   15df6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15dfa:	429a      	cmp	r2, r3
   15dfc:	d008      	beq.n	15e10 <bt_mesh_proxy_msg_recv+0xb8>
   15dfe:	4917      	ldr	r1, [pc, #92]	; (15e5c <bt_mesh_proxy_msg_recv+0x104>)
   15e00:	4b17      	ldr	r3, [pc, #92]	; (15e60 <bt_mesh_proxy_msg_recv+0x108>)
			BT_WARN("Unexpected message type in continuation");
   15e02:	481b      	ldr	r0, [pc, #108]	; (15e70 <bt_mesh_proxy_msg_recv+0x118>)
   15e04:	1ac9      	subs	r1, r1, r3
   15e06:	08c9      	lsrs	r1, r1, #3
   15e08:	0189      	lsls	r1, r1, #6
   15e0a:	f041 0102 	orr.w	r1, r1, #2
   15e0e:	e7ba      	b.n	15d86 <bt_mesh_proxy_msg_recv+0x2e>
		k_work_reschedule(&role->sar_timer, PROXY_SAR_TIMEOUT);
   15e10:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   15e14:	2300      	movs	r3, #0
   15e16:	3010      	adds	r0, #16
   15e18:	f00a fb04 	bl	20424 <k_work_reschedule>
		net_buf_simple_add_mem(&role->buf, data + 1, len - 1);
   15e1c:	1e72      	subs	r2, r6, #1
   15e1e:	1c69      	adds	r1, r5, #1
   15e20:	e7d8      	b.n	15dd4 <bt_mesh_proxy_msg_recv+0x7c>
		if (!role->buf.len) {
   15e22:	b941      	cbnz	r1, 15e36 <bt_mesh_proxy_msg_recv+0xde>
   15e24:	490d      	ldr	r1, [pc, #52]	; (15e5c <bt_mesh_proxy_msg_recv+0x104>)
   15e26:	4b0e      	ldr	r3, [pc, #56]	; (15e60 <bt_mesh_proxy_msg_recv+0x108>)
			BT_WARN("Last SAR PDU with no prior data");
   15e28:	4812      	ldr	r0, [pc, #72]	; (15e74 <bt_mesh_proxy_msg_recv+0x11c>)
   15e2a:	1ac9      	subs	r1, r1, r3
   15e2c:	08c9      	lsrs	r1, r1, #3
   15e2e:	0189      	lsls	r1, r1, #6
   15e30:	f041 0102 	orr.w	r1, r1, #2
   15e34:	e7a7      	b.n	15d86 <bt_mesh_proxy_msg_recv+0x2e>
		if (role->msg_type != PDU_TYPE(data)) {
   15e36:	7902      	ldrb	r2, [r0, #4]
   15e38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15e3c:	429a      	cmp	r2, r3
   15e3e:	d008      	beq.n	15e52 <bt_mesh_proxy_msg_recv+0xfa>
   15e40:	4906      	ldr	r1, [pc, #24]	; (15e5c <bt_mesh_proxy_msg_recv+0x104>)
   15e42:	4b07      	ldr	r3, [pc, #28]	; (15e60 <bt_mesh_proxy_msg_recv+0x108>)
			BT_WARN("Unexpected message type in last SAR PDU");
   15e44:	480c      	ldr	r0, [pc, #48]	; (15e78 <bt_mesh_proxy_msg_recv+0x120>)
   15e46:	1ac9      	subs	r1, r1, r3
   15e48:	08c9      	lsrs	r1, r1, #3
   15e4a:	0189      	lsls	r1, r1, #6
   15e4c:	f041 0102 	orr.w	r1, r1, #2
   15e50:	e799      	b.n	15d86 <bt_mesh_proxy_msg_recv+0x2e>
		(void)k_work_cancel_delayable(&role->sar_timer);
   15e52:	3010      	adds	r0, #16
   15e54:	f012 ffc5 	bl	28de2 <k_work_cancel_delayable>
   15e58:	e79b      	b.n	15d92 <bt_mesh_proxy_msg_recv+0x3a>
   15e5a:	bf00      	nop
   15e5c:	00029a20 	.word	0x00029a20
   15e60:	00029870 	.word	0x00029870
   15e64:	0002ecf4 	.word	0x0002ecf4
   15e68:	0002ed20 	.word	0x0002ed20
   15e6c:	0002ed49 	.word	0x0002ed49
   15e70:	0002ed69 	.word	0x0002ed69
   15e74:	0002ed91 	.word	0x0002ed91
   15e78:	0002edb1 	.word	0x0002edb1

00015e7c <bt_mesh_proxy_msg_init>:
	return 0;
}

void bt_mesh_proxy_msg_init(struct bt_mesh_proxy_role *role)
{
	k_work_init_delayable(&role->sar_timer, proxy_sar_timeout);
   15e7c:	4901      	ldr	r1, [pc, #4]	; (15e84 <bt_mesh_proxy_msg_init+0x8>)
   15e7e:	3010      	adds	r0, #16
   15e80:	f012 bf8f 	b.w	28da2 <k_work_init_delayable>
   15e84:	00015d21 	.word	0x00015d21

00015e88 <krp_status>:
	uint8_t *phase;
};

static int krp_status(struct bt_mesh_model *model, struct bt_mesh_msg_ctx *ctx,
		       struct net_buf_simple *buf)
{
   15e88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

	BT_DBG("net_idx 0x%04x app_idx 0x%04x src 0x%04x len %u: %s",
	       ctx->net_idx, ctx->app_idx, ctx->addr, buf->len,
	       bt_hex(buf->data, buf->len));

	if (!bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_KRP_STATUS, ctx->addr, (void **)&param)) {
   15e8a:	4f16      	ldr	r7, [pc, #88]	; (15ee4 <krp_status+0x5c>)
   15e8c:	6838      	ldr	r0, [r7, #0]
{
   15e8e:	4615      	mov	r5, r2
	if (!bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_KRP_STATUS, ctx->addr, (void **)&param)) {
   15e90:	ab01      	add	r3, sp, #4
   15e92:	888a      	ldrh	r2, [r1, #4]
   15e94:	3004      	adds	r0, #4
   15e96:	f248 0117 	movw	r1, #32791	; 0x8017
   15e9a:	f010 fb5e 	bl	2655a <bt_mesh_msg_ack_ctx_match>
   15e9e:	b918      	cbnz	r0, 15ea8 <krp_status+0x20>
		return -ENOENT;
   15ea0:	f06f 0001 	mvn.w	r0, #1
	}

	bt_mesh_msg_ack_ctx_rx(&cli->ack_ctx);

	return 0;
}
   15ea4:	b003      	add	sp, #12
   15ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = net_buf_simple_pull_u8(buf);
   15ea8:	4628      	mov	r0, r5
   15eaa:	f012 fa4d 	bl	28348 <net_buf_simple_pull_u8>
   15eae:	4606      	mov	r6, r0
	net_idx = net_buf_simple_pull_le16(buf) & 0xfff;
   15eb0:	4628      	mov	r0, r5
   15eb2:	f012 fa51 	bl	28358 <net_buf_simple_pull_le16>
   15eb6:	4604      	mov	r4, r0
	phase = net_buf_simple_pull_u8(buf);
   15eb8:	4628      	mov	r0, r5
   15eba:	f012 fa45 	bl	28348 <net_buf_simple_pull_u8>
	if (param->net_idx != net_idx) {
   15ebe:	9b01      	ldr	r3, [sp, #4]
   15ec0:	889a      	ldrh	r2, [r3, #4]
   15ec2:	f3c4 040b 	ubfx	r4, r4, #0, #12
   15ec6:	42a2      	cmp	r2, r4
   15ec8:	d1ea      	bne.n	15ea0 <krp_status+0x18>
	if (param->status) {
   15eca:	681b      	ldr	r3, [r3, #0]
   15ecc:	b103      	cbz	r3, 15ed0 <krp_status+0x48>
		*param->status = status;
   15ece:	701e      	strb	r6, [r3, #0]
	if (param->phase) {
   15ed0:	9b01      	ldr	r3, [sp, #4]
   15ed2:	689b      	ldr	r3, [r3, #8]
   15ed4:	b103      	cbz	r3, 15ed8 <krp_status+0x50>
		*param->phase = phase;
   15ed6:	7018      	strb	r0, [r3, #0]
 *
 *  @param ack Context of a message to be acknowledged.
 */
static inline void bt_mesh_msg_ack_ctx_rx(struct bt_mesh_msg_ack_ctx *ack)
{
	k_sem_give(&ack->sem);
   15ed8:	6838      	ldr	r0, [r7, #0]
   15eda:	3004      	adds	r0, #4
   15edc:	f010 fec9 	bl	26c72 <k_sem_give>
	return 0;
   15ee0:	2000      	movs	r0, #0
   15ee2:	e7df      	b.n	15ea4 <krp_status+0x1c>
   15ee4:	2000249c 	.word	0x2000249c

00015ee8 <node_identity_status>:
};

static int node_identity_status(struct bt_mesh_model *model,
				 struct bt_mesh_msg_ctx *ctx,
				 struct net_buf_simple *buf)
{
   15ee8:	b573      	push	{r0, r1, r4, r5, r6, lr}

	BT_DBG("net_idx 0x%04x app_idx 0x%04x src 0x%04x len %u: %s",
	       ctx->net_idx, ctx->app_idx, ctx->addr, buf->len,
	       bt_hex(buf->data, buf->len));

	if (!bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_NODE_IDENTITY_STATUS,
   15eea:	4e14      	ldr	r6, [pc, #80]	; (15f3c <node_identity_status+0x54>)
   15eec:	6830      	ldr	r0, [r6, #0]
{
   15eee:	4614      	mov	r4, r2
	if (!bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_NODE_IDENTITY_STATUS,
   15ef0:	ab01      	add	r3, sp, #4
   15ef2:	888a      	ldrh	r2, [r1, #4]
   15ef4:	3004      	adds	r0, #4
   15ef6:	f248 0148 	movw	r1, #32840	; 0x8048
   15efa:	f010 fb2e 	bl	2655a <bt_mesh_msg_ack_ctx_match>
   15efe:	b1d0      	cbz	r0, 15f36 <node_identity_status+0x4e>
				       ctx->addr, (void **)&param)) {
		return -ENOENT;
	}

	status = net_buf_simple_pull_u8(buf);
   15f00:	4620      	mov	r0, r4
   15f02:	f012 fa21 	bl	28348 <net_buf_simple_pull_u8>
   15f06:	4605      	mov	r5, r0
	net_idx = net_buf_simple_pull_le16(buf) & 0xfff;
   15f08:	4620      	mov	r0, r4
   15f0a:	f012 fa25 	bl	28358 <net_buf_simple_pull_le16>
	identity = net_buf_simple_pull_u8(buf);
   15f0e:	4620      	mov	r0, r4
   15f10:	f012 fa1a 	bl	28348 <net_buf_simple_pull_u8>

	if (param && param->status) {
   15f14:	9b01      	ldr	r3, [sp, #4]
   15f16:	b113      	cbz	r3, 15f1e <node_identity_status+0x36>
   15f18:	681b      	ldr	r3, [r3, #0]
   15f1a:	b103      	cbz	r3, 15f1e <node_identity_status+0x36>
		*param->status = status;
   15f1c:	701d      	strb	r5, [r3, #0]
	}

	if (param && param->identity) {
   15f1e:	9b01      	ldr	r3, [sp, #4]
   15f20:	b113      	cbz	r3, 15f28 <node_identity_status+0x40>
   15f22:	689b      	ldr	r3, [r3, #8]
   15f24:	b103      	cbz	r3, 15f28 <node_identity_status+0x40>
		*param->identity = identity;
   15f26:	7018      	strb	r0, [r3, #0]
   15f28:	6830      	ldr	r0, [r6, #0]
   15f2a:	3004      	adds	r0, #4
   15f2c:	f010 fea1 	bl	26c72 <k_sem_give>
	}

	bt_mesh_msg_ack_ctx_rx(&cli->ack_ctx);

	return 0;
   15f30:	2000      	movs	r0, #0
}
   15f32:	b002      	add	sp, #8
   15f34:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOENT;
   15f36:	f06f 0001 	mvn.w	r0, #1
   15f3a:	e7fa      	b.n	15f32 <node_identity_status+0x4a>
   15f3c:	2000249c 	.word	0x2000249c

00015f40 <node_reset_status>:
{
   15f40:	b513      	push	{r0, r1, r4, lr}
	if (!bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_NODE_RESET_STATUS,
   15f42:	4c0d      	ldr	r4, [pc, #52]	; (15f78 <node_reset_status+0x38>)
   15f44:	888a      	ldrh	r2, [r1, #4]
   15f46:	6820      	ldr	r0, [r4, #0]
	bool *param = NULL;
   15f48:	2300      	movs	r3, #0
   15f4a:	9301      	str	r3, [sp, #4]
	if (!bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_NODE_RESET_STATUS,
   15f4c:	f248 014a 	movw	r1, #32842	; 0x804a
   15f50:	ab01      	add	r3, sp, #4
   15f52:	3004      	adds	r0, #4
   15f54:	f010 fb01 	bl	2655a <bt_mesh_msg_ack_ctx_match>
   15f58:	b150      	cbz	r0, 15f70 <node_reset_status+0x30>
	if (param) {
   15f5a:	9b01      	ldr	r3, [sp, #4]
   15f5c:	b10b      	cbz	r3, 15f62 <node_reset_status+0x22>
		*param = true;
   15f5e:	2201      	movs	r2, #1
   15f60:	701a      	strb	r2, [r3, #0]
   15f62:	6820      	ldr	r0, [r4, #0]
   15f64:	3004      	adds	r0, #4
   15f66:	f010 fe84 	bl	26c72 <k_sem_give>
	return 0;
   15f6a:	2000      	movs	r0, #0
}
   15f6c:	b002      	add	sp, #8
   15f6e:	bd10      	pop	{r4, pc}
		return -ENOENT;
   15f70:	f06f 0001 	mvn.w	r0, #1
   15f74:	e7fa      	b.n	15f6c <node_reset_status+0x2c>
   15f76:	bf00      	nop
   15f78:	2000249c 	.word	0x2000249c

00015f7c <hb_pub_status>:
{
   15f7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_HEARTBEAT_PUB_STATUS, ctx->addr,
   15f7e:	4d20      	ldr	r5, [pc, #128]	; (16000 <hb_pub_status+0x84>)
   15f80:	6828      	ldr	r0, [r5, #0]
{
   15f82:	4614      	mov	r4, r2
	if (!bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_HEARTBEAT_PUB_STATUS, ctx->addr,
   15f84:	ab01      	add	r3, sp, #4
   15f86:	888a      	ldrh	r2, [r1, #4]
   15f88:	3004      	adds	r0, #4
   15f8a:	2106      	movs	r1, #6
   15f8c:	f010 fae5 	bl	2655a <bt_mesh_msg_ack_ctx_match>
   15f90:	2800      	cmp	r0, #0
   15f92:	d031      	beq.n	15ff8 <hb_pub_status+0x7c>
	*param->status = net_buf_simple_pull_u8(buf);
   15f94:	9b01      	ldr	r3, [sp, #4]
   15f96:	4620      	mov	r0, r4
   15f98:	681e      	ldr	r6, [r3, #0]
   15f9a:	f012 f9d5 	bl	28348 <net_buf_simple_pull_u8>
   15f9e:	7030      	strb	r0, [r6, #0]
	if (param->pub) {
   15fa0:	9b01      	ldr	r3, [sp, #4]
   15fa2:	685e      	ldr	r6, [r3, #4]
   15fa4:	b30e      	cbz	r6, 15fea <hb_pub_status+0x6e>
		param->pub->dst = net_buf_simple_pull_le16(buf);
   15fa6:	4620      	mov	r0, r4
   15fa8:	f012 f9d6 	bl	28358 <net_buf_simple_pull_le16>
		param->pub->count = net_buf_simple_pull_u8(buf);
   15fac:	9b01      	ldr	r3, [sp, #4]
		param->pub->dst = net_buf_simple_pull_le16(buf);
   15fae:	8030      	strh	r0, [r6, #0]
		param->pub->count = net_buf_simple_pull_u8(buf);
   15fb0:	4620      	mov	r0, r4
   15fb2:	685e      	ldr	r6, [r3, #4]
   15fb4:	f012 f9c8 	bl	28348 <net_buf_simple_pull_u8>
   15fb8:	70b0      	strb	r0, [r6, #2]
		param->pub->period = net_buf_simple_pull_u8(buf);
   15fba:	9b01      	ldr	r3, [sp, #4]
   15fbc:	4620      	mov	r0, r4
   15fbe:	685e      	ldr	r6, [r3, #4]
   15fc0:	f012 f9c2 	bl	28348 <net_buf_simple_pull_u8>
   15fc4:	70f0      	strb	r0, [r6, #3]
		param->pub->ttl = net_buf_simple_pull_u8(buf);
   15fc6:	9b01      	ldr	r3, [sp, #4]
   15fc8:	4620      	mov	r0, r4
   15fca:	685e      	ldr	r6, [r3, #4]
   15fcc:	f012 f9bc 	bl	28348 <net_buf_simple_pull_u8>
   15fd0:	7130      	strb	r0, [r6, #4]
		param->pub->feat = net_buf_simple_pull_u8(buf);
   15fd2:	4620      	mov	r0, r4
   15fd4:	f012 f9b8 	bl	28348 <net_buf_simple_pull_u8>
   15fd8:	9b01      	ldr	r3, [sp, #4]
   15fda:	685b      	ldr	r3, [r3, #4]
   15fdc:	80d8      	strh	r0, [r3, #6]
		param->pub->net_idx = net_buf_simple_pull_u8(buf);
   15fde:	4620      	mov	r0, r4
   15fe0:	f012 f9b2 	bl	28348 <net_buf_simple_pull_u8>
   15fe4:	9b01      	ldr	r3, [sp, #4]
   15fe6:	685b      	ldr	r3, [r3, #4]
   15fe8:	8118      	strh	r0, [r3, #8]
   15fea:	6828      	ldr	r0, [r5, #0]
   15fec:	3004      	adds	r0, #4
   15fee:	f010 fe40 	bl	26c72 <k_sem_give>
	return 0;
   15ff2:	2000      	movs	r0, #0
}
   15ff4:	b002      	add	sp, #8
   15ff6:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOENT;
   15ff8:	f06f 0001 	mvn.w	r0, #1
   15ffc:	e7fa      	b.n	15ff4 <hb_pub_status+0x78>
   15ffe:	bf00      	nop
   16000:	2000249c 	.word	0x2000249c

00016004 <hb_sub_status>:
{
   16004:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_HEARTBEAT_SUB_STATUS, ctx->addr,
   16006:	4d20      	ldr	r5, [pc, #128]	; (16088 <hb_sub_status+0x84>)
   16008:	6828      	ldr	r0, [r5, #0]
{
   1600a:	4614      	mov	r4, r2
	if (!bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_HEARTBEAT_SUB_STATUS, ctx->addr,
   1600c:	ab01      	add	r3, sp, #4
   1600e:	888a      	ldrh	r2, [r1, #4]
   16010:	3004      	adds	r0, #4
   16012:	f248 013c 	movw	r1, #32828	; 0x803c
   16016:	f010 faa0 	bl	2655a <bt_mesh_msg_ack_ctx_match>
   1601a:	2800      	cmp	r0, #0
   1601c:	d030      	beq.n	16080 <hb_sub_status+0x7c>
	*param->status = net_buf_simple_pull_u8(buf);
   1601e:	9b01      	ldr	r3, [sp, #4]
   16020:	4620      	mov	r0, r4
   16022:	681e      	ldr	r6, [r3, #0]
   16024:	f012 f990 	bl	28348 <net_buf_simple_pull_u8>
   16028:	7030      	strb	r0, [r6, #0]
	param->sub->src = net_buf_simple_pull_le16(buf);
   1602a:	9b01      	ldr	r3, [sp, #4]
   1602c:	4620      	mov	r0, r4
   1602e:	685e      	ldr	r6, [r3, #4]
   16030:	f012 f992 	bl	28358 <net_buf_simple_pull_le16>
	param->sub->dst = net_buf_simple_pull_le16(buf);
   16034:	9b01      	ldr	r3, [sp, #4]
	param->sub->src = net_buf_simple_pull_le16(buf);
   16036:	8030      	strh	r0, [r6, #0]
	param->sub->dst = net_buf_simple_pull_le16(buf);
   16038:	4620      	mov	r0, r4
   1603a:	685e      	ldr	r6, [r3, #4]
   1603c:	f012 f98c 	bl	28358 <net_buf_simple_pull_le16>
	param->sub->period = net_buf_simple_pull_u8(buf);
   16040:	9b01      	ldr	r3, [sp, #4]
	param->sub->dst = net_buf_simple_pull_le16(buf);
   16042:	8070      	strh	r0, [r6, #2]
	param->sub->period = net_buf_simple_pull_u8(buf);
   16044:	4620      	mov	r0, r4
   16046:	685e      	ldr	r6, [r3, #4]
   16048:	f012 f97e 	bl	28348 <net_buf_simple_pull_u8>
	param->sub->count = net_buf_simple_pull_u8(buf);
   1604c:	9b01      	ldr	r3, [sp, #4]
	param->sub->period = net_buf_simple_pull_u8(buf);
   1604e:	7130      	strb	r0, [r6, #4]
	param->sub->count = net_buf_simple_pull_u8(buf);
   16050:	4620      	mov	r0, r4
   16052:	685e      	ldr	r6, [r3, #4]
   16054:	f012 f978 	bl	28348 <net_buf_simple_pull_u8>
	param->sub->min = net_buf_simple_pull_u8(buf);
   16058:	9b01      	ldr	r3, [sp, #4]
	param->sub->count = net_buf_simple_pull_u8(buf);
   1605a:	7170      	strb	r0, [r6, #5]
	param->sub->min = net_buf_simple_pull_u8(buf);
   1605c:	4620      	mov	r0, r4
   1605e:	685e      	ldr	r6, [r3, #4]
   16060:	f012 f972 	bl	28348 <net_buf_simple_pull_u8>
	param->sub->max = net_buf_simple_pull_u8(buf);
   16064:	9b01      	ldr	r3, [sp, #4]
	param->sub->min = net_buf_simple_pull_u8(buf);
   16066:	71b0      	strb	r0, [r6, #6]
	param->sub->max = net_buf_simple_pull_u8(buf);
   16068:	4620      	mov	r0, r4
   1606a:	685e      	ldr	r6, [r3, #4]
   1606c:	f012 f96c 	bl	28348 <net_buf_simple_pull_u8>
   16070:	71f0      	strb	r0, [r6, #7]
   16072:	6828      	ldr	r0, [r5, #0]
   16074:	3004      	adds	r0, #4
   16076:	f010 fdfc 	bl	26c72 <k_sem_give>
	return 0;
   1607a:	2000      	movs	r0, #0
}
   1607c:	b002      	add	sp, #8
   1607e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOENT;
   16080:	f06f 0001 	mvn.w	r0, #1
   16084:	e7fa      	b.n	1607c <hb_sub_status+0x78>
   16086:	bf00      	nop
   16088:	2000249c 	.word	0x2000249c

0001608c <relay_status>:
{
   1608c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_RELAY_STATUS, ctx->addr,
   1608e:	4d10      	ldr	r5, [pc, #64]	; (160d0 <relay_status+0x44>)
   16090:	6828      	ldr	r0, [r5, #0]
{
   16092:	4614      	mov	r4, r2
	if (!bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_RELAY_STATUS, ctx->addr,
   16094:	ab01      	add	r3, sp, #4
   16096:	888a      	ldrh	r2, [r1, #4]
   16098:	3004      	adds	r0, #4
   1609a:	f248 0128 	movw	r1, #32808	; 0x8028
   1609e:	f010 fa5c 	bl	2655a <bt_mesh_msg_ack_ctx_match>
   160a2:	b190      	cbz	r0, 160ca <relay_status+0x3e>
	*param->status = net_buf_simple_pull_u8(buf);
   160a4:	9b01      	ldr	r3, [sp, #4]
   160a6:	4620      	mov	r0, r4
   160a8:	681e      	ldr	r6, [r3, #0]
   160aa:	f012 f94d 	bl	28348 <net_buf_simple_pull_u8>
   160ae:	7030      	strb	r0, [r6, #0]
	*param->transmit = net_buf_simple_pull_u8(buf);
   160b0:	9b01      	ldr	r3, [sp, #4]
   160b2:	4620      	mov	r0, r4
   160b4:	685e      	ldr	r6, [r3, #4]
   160b6:	f012 f947 	bl	28348 <net_buf_simple_pull_u8>
   160ba:	7030      	strb	r0, [r6, #0]
   160bc:	6828      	ldr	r0, [r5, #0]
   160be:	3004      	adds	r0, #4
   160c0:	f010 fdd7 	bl	26c72 <k_sem_give>
	return 0;
   160c4:	2000      	movs	r0, #0
}
   160c6:	b002      	add	sp, #8
   160c8:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOENT;
   160ca:	f06f 0001 	mvn.w	r0, #1
   160ce:	e7fa      	b.n	160c6 <relay_status+0x3a>
   160d0:	2000249c 	.word	0x2000249c

000160d4 <lpn_timeout_status>:
	int32_t *polltimeout;
};

static int lpn_timeout_status(struct bt_mesh_model *model, struct bt_mesh_msg_ctx *ctx,
			      struct net_buf_simple *buf)
{
   160d4:	b573      	push	{r0, r1, r4, r5, r6, lr}

	BT_DBG("net_idx 0x%04x app_idx 0x%04x src 0x%04x len %u: %s",
	       ctx->net_idx, ctx->app_idx, ctx->addr, buf->len,
	       bt_hex(buf->data, buf->len));

	if (!bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_LPN_TIMEOUT_STATUS, ctx->addr,
   160d6:	4e11      	ldr	r6, [pc, #68]	; (1611c <lpn_timeout_status+0x48>)
   160d8:	6830      	ldr	r0, [r6, #0]
{
   160da:	4614      	mov	r4, r2
	if (!bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_LPN_TIMEOUT_STATUS, ctx->addr,
   160dc:	ab01      	add	r3, sp, #4
   160de:	888a      	ldrh	r2, [r1, #4]
   160e0:	3004      	adds	r0, #4
   160e2:	f248 012e 	movw	r1, #32814	; 0x802e
   160e6:	f010 fa38 	bl	2655a <bt_mesh_msg_ack_ctx_match>
   160ea:	b918      	cbnz	r0, 160f4 <lpn_timeout_status+0x20>
				       (void **)&param)) {
		return -ENOENT;
   160ec:	f06f 0001 	mvn.w	r0, #1
	}

	bt_mesh_msg_ack_ctx_rx(&cli->ack_ctx);

	return 0;
}
   160f0:	b002      	add	sp, #8
   160f2:	bd70      	pop	{r4, r5, r6, pc}
	unicast_addr = net_buf_simple_pull_le16(buf);
   160f4:	4620      	mov	r0, r4
   160f6:	f012 f92f 	bl	28358 <net_buf_simple_pull_le16>
   160fa:	4605      	mov	r5, r0
	polltimeout = net_buf_simple_pull_le24(buf);
   160fc:	4620      	mov	r0, r4
   160fe:	f012 f93d 	bl	2837c <net_buf_simple_pull_le24>
	if (param->unicast_addr != unicast_addr) {
   16102:	9b01      	ldr	r3, [sp, #4]
   16104:	881a      	ldrh	r2, [r3, #0]
   16106:	42aa      	cmp	r2, r5
   16108:	d1f0      	bne.n	160ec <lpn_timeout_status+0x18>
	if (param->polltimeout) {
   1610a:	685b      	ldr	r3, [r3, #4]
   1610c:	b103      	cbz	r3, 16110 <lpn_timeout_status+0x3c>
		*param->polltimeout = polltimeout;
   1610e:	6018      	str	r0, [r3, #0]
   16110:	6830      	ldr	r0, [r6, #0]
   16112:	3004      	adds	r0, #4
   16114:	f010 fdad 	bl	26c72 <k_sem_give>
	return 0;
   16118:	2000      	movs	r0, #0
   1611a:	e7e9      	b.n	160f0 <lpn_timeout_status+0x1c>
   1611c:	2000249c 	.word	0x2000249c

00016120 <mod_sub_status>:
	if ((buf->len != 7U) && (buf->len != 9U)) {
   16120:	8893      	ldrh	r3, [r2, #4]
   16122:	2b07      	cmp	r3, #7
{
   16124:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   16128:	4614      	mov	r4, r2
	if ((buf->len != 7U) && (buf->len != 9U)) {
   1612a:	d010      	beq.n	1614e <mod_sub_status+0x2e>
   1612c:	2b09      	cmp	r3, #9
   1612e:	d00e      	beq.n	1614e <mod_sub_status+0x2e>
   16130:	4b2e      	ldr	r3, [pc, #184]	; (161ec <mod_sub_status+0xcc>)
   16132:	492f      	ldr	r1, [pc, #188]	; (161f0 <mod_sub_status+0xd0>)
		BT_ERR("The message size for the application opcode is incorrect.");
   16134:	482f      	ldr	r0, [pc, #188]	; (161f4 <mod_sub_status+0xd4>)
   16136:	1ac9      	subs	r1, r1, r3
   16138:	08c9      	lsrs	r1, r1, #3
   1613a:	0189      	lsls	r1, r1, #6
   1613c:	f041 0101 	orr.w	r1, r1, #1
   16140:	f00b fcd3 	bl	21aea <log_0>
		return -EINVAL;
   16144:	f06f 0015 	mvn.w	r0, #21
}
   16148:	b003      	add	sp, #12
   1614a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_MOD_SUB_STATUS, ctx->addr,
   1614e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 161f8 <mod_sub_status+0xd8>
   16152:	888a      	ldrh	r2, [r1, #4]
   16154:	f8d9 0000 	ldr.w	r0, [r9]
   16158:	ab01      	add	r3, sp, #4
   1615a:	f248 011f 	movw	r1, #32799	; 0x801f
   1615e:	3004      	adds	r0, #4
   16160:	f010 f9fb 	bl	2655a <bt_mesh_msg_ack_ctx_match>
   16164:	b370      	cbz	r0, 161c4 <mod_sub_status+0xa4>
	status = net_buf_simple_pull_u8(buf);
   16166:	4620      	mov	r0, r4
   16168:	f012 f8ee 	bl	28348 <net_buf_simple_pull_u8>
   1616c:	4607      	mov	r7, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   1616e:	4620      	mov	r0, r4
   16170:	f012 f8f2 	bl	28358 <net_buf_simple_pull_le16>
   16174:	4680      	mov	r8, r0
	sub_addr = net_buf_simple_pull_le16(buf);
   16176:	4620      	mov	r0, r4
   16178:	f012 f8ee 	bl	28358 <net_buf_simple_pull_le16>
	if (buf->len >= 4U) {
   1617c:	88a3      	ldrh	r3, [r4, #4]
   1617e:	2b03      	cmp	r3, #3
	sub_addr = net_buf_simple_pull_le16(buf);
   16180:	4605      	mov	r5, r0
	if (buf->len >= 4U) {
   16182:	d922      	bls.n	161ca <mod_sub_status+0xaa>
		cid = net_buf_simple_pull_le16(buf);
   16184:	4620      	mov	r0, r4
   16186:	f012 f8e7 	bl	28358 <net_buf_simple_pull_le16>
   1618a:	4606      	mov	r6, r0
	mod_id = net_buf_simple_pull_le16(buf);
   1618c:	4620      	mov	r0, r4
   1618e:	f012 f8e3 	bl	28358 <net_buf_simple_pull_le16>
	if (param->elem_addr != elem_addr || param->mod_id != mod_id ||
   16192:	9b01      	ldr	r3, [sp, #4]
   16194:	889a      	ldrh	r2, [r3, #4]
   16196:	4542      	cmp	r2, r8
   16198:	d10a      	bne.n	161b0 <mod_sub_status+0x90>
   1619a:	8a1a      	ldrh	r2, [r3, #16]
   1619c:	4282      	cmp	r2, r0
   1619e:	d107      	bne.n	161b0 <mod_sub_status+0x90>
	    (param->expect_sub && *param->expect_sub != sub_addr) ||
   161a0:	68da      	ldr	r2, [r3, #12]
	if (param->elem_addr != elem_addr || param->mod_id != mod_id ||
   161a2:	b112      	cbz	r2, 161aa <mod_sub_status+0x8a>
	    (param->expect_sub && *param->expect_sub != sub_addr) ||
   161a4:	8812      	ldrh	r2, [r2, #0]
   161a6:	42aa      	cmp	r2, r5
   161a8:	d102      	bne.n	161b0 <mod_sub_status+0x90>
   161aa:	8a5a      	ldrh	r2, [r3, #18]
   161ac:	42b2      	cmp	r2, r6
   161ae:	d00f      	beq.n	161d0 <mod_sub_status+0xb0>
   161b0:	490f      	ldr	r1, [pc, #60]	; (161f0 <mod_sub_status+0xd0>)
   161b2:	4b0e      	ldr	r3, [pc, #56]	; (161ec <mod_sub_status+0xcc>)
		BT_WARN("Model Subscription Status parameters did not match");
   161b4:	4811      	ldr	r0, [pc, #68]	; (161fc <mod_sub_status+0xdc>)
   161b6:	1ac9      	subs	r1, r1, r3
   161b8:	08c9      	lsrs	r1, r1, #3
   161ba:	0189      	lsls	r1, r1, #6
   161bc:	f041 0102 	orr.w	r1, r1, #2
   161c0:	f00b fc93 	bl	21aea <log_0>
		return -ENOENT;
   161c4:	f06f 0001 	mvn.w	r0, #1
   161c8:	e7be      	b.n	16148 <mod_sub_status+0x28>
		cid = CID_NVAL;
   161ca:	f64f 76ff 	movw	r6, #65535	; 0xffff
   161ce:	e7dd      	b.n	1618c <mod_sub_status+0x6c>
	if (param->sub_addr) {
   161d0:	689a      	ldr	r2, [r3, #8]
   161d2:	b102      	cbz	r2, 161d6 <mod_sub_status+0xb6>
		*param->sub_addr = sub_addr;
   161d4:	8015      	strh	r5, [r2, #0]
	if (param->status) {
   161d6:	681b      	ldr	r3, [r3, #0]
   161d8:	b103      	cbz	r3, 161dc <mod_sub_status+0xbc>
		*param->status = status;
   161da:	701f      	strb	r7, [r3, #0]
   161dc:	f8d9 0000 	ldr.w	r0, [r9]
   161e0:	3004      	adds	r0, #4
   161e2:	f010 fd46 	bl	26c72 <k_sem_give>
	return 0;
   161e6:	2000      	movs	r0, #0
   161e8:	e7ae      	b.n	16148 <mod_sub_status+0x28>
   161ea:	bf00      	nop
   161ec:	00029870 	.word	0x00029870
   161f0:	000299b0 	.word	0x000299b0
   161f4:	0002de83 	.word	0x0002de83
   161f8:	2000249c 	.word	0x2000249c
   161fc:	0002ede7 	.word	0x0002ede7

00016200 <mod_app_status>:
	if ((buf->len != 7U) && (buf->len != 9U)) {
   16200:	8893      	ldrh	r3, [r2, #4]
   16202:	2b07      	cmp	r3, #7
{
   16204:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   16208:	4614      	mov	r4, r2
	if ((buf->len != 7U) && (buf->len != 9U)) {
   1620a:	d010      	beq.n	1622e <mod_app_status+0x2e>
   1620c:	2b09      	cmp	r3, #9
   1620e:	d00e      	beq.n	1622e <mod_app_status+0x2e>
   16210:	4b2b      	ldr	r3, [pc, #172]	; (162c0 <mod_app_status+0xc0>)
   16212:	492c      	ldr	r1, [pc, #176]	; (162c4 <mod_app_status+0xc4>)
		BT_ERR("The message size for the application opcode is incorrect.");
   16214:	482c      	ldr	r0, [pc, #176]	; (162c8 <mod_app_status+0xc8>)
   16216:	1ac9      	subs	r1, r1, r3
   16218:	08c9      	lsrs	r1, r1, #3
   1621a:	0189      	lsls	r1, r1, #6
   1621c:	f041 0101 	orr.w	r1, r1, #1
   16220:	f00b fc63 	bl	21aea <log_0>
		return -EMSGSIZE;
   16224:	f06f 0079 	mvn.w	r0, #121	; 0x79
}
   16228:	b003      	add	sp, #12
   1622a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_MOD_APP_STATUS, ctx->addr,
   1622e:	f8df 909c 	ldr.w	r9, [pc, #156]	; 162cc <mod_app_status+0xcc>
   16232:	888a      	ldrh	r2, [r1, #4]
   16234:	f8d9 0000 	ldr.w	r0, [r9]
   16238:	ab01      	add	r3, sp, #4
   1623a:	f248 013e 	movw	r1, #32830	; 0x803e
   1623e:	3004      	adds	r0, #4
   16240:	f010 f98b 	bl	2655a <bt_mesh_msg_ack_ctx_match>
   16244:	b360      	cbz	r0, 162a0 <mod_app_status+0xa0>
	status = net_buf_simple_pull_u8(buf);
   16246:	4620      	mov	r0, r4
   16248:	f012 f87e 	bl	28348 <net_buf_simple_pull_u8>
   1624c:	4606      	mov	r6, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   1624e:	4620      	mov	r0, r4
   16250:	f012 f882 	bl	28358 <net_buf_simple_pull_le16>
   16254:	4680      	mov	r8, r0
	mod_app_idx = net_buf_simple_pull_le16(buf);
   16256:	4620      	mov	r0, r4
   16258:	f012 f87e 	bl	28358 <net_buf_simple_pull_le16>
	if (buf->len >= 4U) {
   1625c:	88a3      	ldrh	r3, [r4, #4]
   1625e:	2b03      	cmp	r3, #3
	mod_app_idx = net_buf_simple_pull_le16(buf);
   16260:	4607      	mov	r7, r0
	if (buf->len >= 4U) {
   16262:	d920      	bls.n	162a6 <mod_app_status+0xa6>
		cid = net_buf_simple_pull_le16(buf);
   16264:	4620      	mov	r0, r4
   16266:	f012 f877 	bl	28358 <net_buf_simple_pull_le16>
   1626a:	4605      	mov	r5, r0
	mod_id = net_buf_simple_pull_le16(buf);
   1626c:	4620      	mov	r0, r4
   1626e:	f012 f873 	bl	28358 <net_buf_simple_pull_le16>
	if (param->elem_addr != elem_addr ||
   16272:	9b01      	ldr	r3, [sp, #4]
   16274:	8899      	ldrh	r1, [r3, #4]
   16276:	4541      	cmp	r1, r8
   16278:	d108      	bne.n	1628c <mod_app_status+0x8c>
   1627a:	88d9      	ldrh	r1, [r3, #6]
   1627c:	42b9      	cmp	r1, r7
   1627e:	d105      	bne.n	1628c <mod_app_status+0x8c>
	    param->mod_app_idx != mod_app_idx || param->mod_id != mod_id ||
   16280:	8919      	ldrh	r1, [r3, #8]
   16282:	4281      	cmp	r1, r0
   16284:	d102      	bne.n	1628c <mod_app_status+0x8c>
   16286:	895a      	ldrh	r2, [r3, #10]
   16288:	42aa      	cmp	r2, r5
   1628a:	d00f      	beq.n	162ac <mod_app_status+0xac>
   1628c:	490d      	ldr	r1, [pc, #52]	; (162c4 <mod_app_status+0xc4>)
   1628e:	4b0c      	ldr	r3, [pc, #48]	; (162c0 <mod_app_status+0xc0>)
		BT_WARN("Model App Status parameters did not match");
   16290:	480f      	ldr	r0, [pc, #60]	; (162d0 <mod_app_status+0xd0>)
   16292:	1ac9      	subs	r1, r1, r3
   16294:	08c9      	lsrs	r1, r1, #3
   16296:	0189      	lsls	r1, r1, #6
   16298:	f041 0102 	orr.w	r1, r1, #2
   1629c:	f00b fc25 	bl	21aea <log_0>
		return -ENOENT;
   162a0:	f06f 0001 	mvn.w	r0, #1
   162a4:	e7c0      	b.n	16228 <mod_app_status+0x28>
		cid = CID_NVAL;
   162a6:	f64f 75ff 	movw	r5, #65535	; 0xffff
   162aa:	e7df      	b.n	1626c <mod_app_status+0x6c>
	if (param->status) {
   162ac:	681b      	ldr	r3, [r3, #0]
   162ae:	b103      	cbz	r3, 162b2 <mod_app_status+0xb2>
		*param->status = status;
   162b0:	701e      	strb	r6, [r3, #0]
   162b2:	f8d9 0000 	ldr.w	r0, [r9]
   162b6:	3004      	adds	r0, #4
   162b8:	f010 fcdb 	bl	26c72 <k_sem_give>
	return 0;
   162bc:	2000      	movs	r0, #0
   162be:	e7b3      	b.n	16228 <mod_app_status+0x28>
   162c0:	00029870 	.word	0x00029870
   162c4:	000299b0 	.word	0x000299b0
   162c8:	0002de83 	.word	0x0002de83
   162cc:	2000249c 	.word	0x2000249c
   162d0:	0002ee1a 	.word	0x0002ee1a

000162d4 <net_key_status>:
{
   162d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_NET_KEY_STATUS, ctx->addr,
   162d6:	4e17      	ldr	r6, [pc, #92]	; (16334 <net_key_status+0x60>)
   162d8:	6830      	ldr	r0, [r6, #0]
{
   162da:	4614      	mov	r4, r2
	if (!bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_NET_KEY_STATUS, ctx->addr,
   162dc:	ab01      	add	r3, sp, #4
   162de:	888a      	ldrh	r2, [r1, #4]
   162e0:	3004      	adds	r0, #4
   162e2:	f248 0144 	movw	r1, #32836	; 0x8044
   162e6:	f010 f938 	bl	2655a <bt_mesh_msg_ack_ctx_match>
   162ea:	b1b0      	cbz	r0, 1631a <net_key_status+0x46>
	status = net_buf_simple_pull_u8(buf);
   162ec:	4620      	mov	r0, r4
   162ee:	f012 f82b 	bl	28348 <net_buf_simple_pull_u8>
   162f2:	4605      	mov	r5, r0
	net_idx = net_buf_simple_pull_le16(buf) & 0xfff;
   162f4:	4620      	mov	r0, r4
   162f6:	f012 f82f 	bl	28358 <net_buf_simple_pull_le16>
	if (param->net_idx != net_idx) {
   162fa:	9b01      	ldr	r3, [sp, #4]
   162fc:	889a      	ldrh	r2, [r3, #4]
   162fe:	f3c0 000b 	ubfx	r0, r0, #0, #12
   16302:	4282      	cmp	r2, r0
   16304:	d00c      	beq.n	16320 <net_key_status+0x4c>
   16306:	490c      	ldr	r1, [pc, #48]	; (16338 <net_key_status+0x64>)
   16308:	4b0c      	ldr	r3, [pc, #48]	; (1633c <net_key_status+0x68>)
		BT_WARN("Net Key Status key index does not match");
   1630a:	480d      	ldr	r0, [pc, #52]	; (16340 <net_key_status+0x6c>)
   1630c:	1ac9      	subs	r1, r1, r3
   1630e:	08c9      	lsrs	r1, r1, #3
   16310:	0189      	lsls	r1, r1, #6
   16312:	f041 0102 	orr.w	r1, r1, #2
   16316:	f00b fbe8 	bl	21aea <log_0>
		return -ENOENT;
   1631a:	f06f 0001 	mvn.w	r0, #1
   1631e:	e007      	b.n	16330 <net_key_status+0x5c>
	if (param->status) {
   16320:	681b      	ldr	r3, [r3, #0]
   16322:	b103      	cbz	r3, 16326 <net_key_status+0x52>
		*param->status = status;
   16324:	701d      	strb	r5, [r3, #0]
   16326:	6830      	ldr	r0, [r6, #0]
   16328:	3004      	adds	r0, #4
   1632a:	f010 fca2 	bl	26c72 <k_sem_give>
	return 0;
   1632e:	2000      	movs	r0, #0
}
   16330:	b002      	add	sp, #8
   16332:	bd70      	pop	{r4, r5, r6, pc}
   16334:	2000249c 	.word	0x2000249c
   16338:	000299b0 	.word	0x000299b0
   1633c:	00029870 	.word	0x00029870
   16340:	0002ee44 	.word	0x0002ee44

00016344 <mod_pub_status>:
	if ((buf->len != 12U) && (buf->len != 14U)) {
   16344:	8893      	ldrh	r3, [r2, #4]
   16346:	f023 0302 	bic.w	r3, r3, #2
   1634a:	b29b      	uxth	r3, r3
   1634c:	2b0c      	cmp	r3, #12
{
   1634e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   16350:	4614      	mov	r4, r2
	if ((buf->len != 12U) && (buf->len != 14U)) {
   16352:	d00d      	beq.n	16370 <mod_pub_status+0x2c>
   16354:	4b49      	ldr	r3, [pc, #292]	; (1647c <mod_pub_status+0x138>)
   16356:	494a      	ldr	r1, [pc, #296]	; (16480 <mod_pub_status+0x13c>)
		BT_ERR("The message size for the application opcode is incorrect.");
   16358:	484a      	ldr	r0, [pc, #296]	; (16484 <mod_pub_status+0x140>)
   1635a:	1ac9      	subs	r1, r1, r3
   1635c:	08c9      	lsrs	r1, r1, #3
   1635e:	0189      	lsls	r1, r1, #6
   16360:	f041 0101 	orr.w	r1, r1, #1
   16364:	f00b fbc1 	bl	21aea <log_0>
		return -EINVAL;
   16368:	f06f 0015 	mvn.w	r0, #21
}
   1636c:	b002      	add	sp, #8
   1636e:	bd70      	pop	{r4, r5, r6, pc}
	if (!bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_MOD_PUB_STATUS, ctx->addr,
   16370:	4e45      	ldr	r6, [pc, #276]	; (16488 <mod_pub_status+0x144>)
   16372:	888a      	ldrh	r2, [r1, #4]
   16374:	6830      	ldr	r0, [r6, #0]
   16376:	ab01      	add	r3, sp, #4
   16378:	f248 0119 	movw	r1, #32793	; 0x8019
   1637c:	3004      	adds	r0, #4
   1637e:	f010 f8ec 	bl	2655a <bt_mesh_msg_ack_ctx_match>
   16382:	b190      	cbz	r0, 163aa <mod_pub_status+0x66>
	if (param->cid != CID_NVAL) {
   16384:	9801      	ldr	r0, [sp, #4]
		if (buf->len < 14) {
   16386:	88a2      	ldrh	r2, [r4, #4]
	if (param->cid != CID_NVAL) {
   16388:	8843      	ldrh	r3, [r0, #2]
   1638a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1638e:	428b      	cmp	r3, r1
   16390:	d01f      	beq.n	163d2 <mod_pub_status+0x8e>
		if (buf->len < 14) {
   16392:	2a0d      	cmp	r2, #13
   16394:	d80c      	bhi.n	163b0 <mod_pub_status+0x6c>
   16396:	493a      	ldr	r1, [pc, #232]	; (16480 <mod_pub_status+0x13c>)
   16398:	4b38      	ldr	r3, [pc, #224]	; (1647c <mod_pub_status+0x138>)
			BT_WARN("Unexpected Mod Pub Status with SIG Model");
   1639a:	483c      	ldr	r0, [pc, #240]	; (1648c <mod_pub_status+0x148>)
   1639c:	1ac9      	subs	r1, r1, r3
   1639e:	08c9      	lsrs	r1, r1, #3
   163a0:	0189      	lsls	r1, r1, #6
   163a2:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("Mod Pub Model ID or Company ID mismatch");
   163a6:	f00b fba0 	bl	21aea <log_0>
		return -ENOENT;
   163aa:	f06f 0001 	mvn.w	r0, #1
   163ae:	e7dd      	b.n	1636c <mod_pub_status+0x28>
		cid = sys_get_le16(&buf->data[10]);
   163b0:	6821      	ldr	r1, [r4, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   163b2:	894a      	ldrh	r2, [r1, #10]
   163b4:	8989      	ldrh	r1, [r1, #12]
	if (mod_id != param->mod_id || cid != param->cid) {
   163b6:	8800      	ldrh	r0, [r0, #0]
   163b8:	4288      	cmp	r0, r1
   163ba:	d101      	bne.n	163c0 <mod_pub_status+0x7c>
   163bc:	4293      	cmp	r3, r2
   163be:	d017      	beq.n	163f0 <mod_pub_status+0xac>
   163c0:	492f      	ldr	r1, [pc, #188]	; (16480 <mod_pub_status+0x13c>)
   163c2:	4b2e      	ldr	r3, [pc, #184]	; (1647c <mod_pub_status+0x138>)
		BT_WARN("Mod Pub Model ID or Company ID mismatch");
   163c4:	4832      	ldr	r0, [pc, #200]	; (16490 <mod_pub_status+0x14c>)
   163c6:	1ac9      	subs	r1, r1, r3
   163c8:	08c9      	lsrs	r1, r1, #3
   163ca:	0189      	lsls	r1, r1, #6
   163cc:	f041 0102 	orr.w	r1, r1, #2
   163d0:	e7e9      	b.n	163a6 <mod_pub_status+0x62>
		if (buf->len > 12) {
   163d2:	2a0c      	cmp	r2, #12
   163d4:	d908      	bls.n	163e8 <mod_pub_status+0xa4>
   163d6:	492a      	ldr	r1, [pc, #168]	; (16480 <mod_pub_status+0x13c>)
   163d8:	4b28      	ldr	r3, [pc, #160]	; (1647c <mod_pub_status+0x138>)
			BT_WARN("Unexpected Mod Pub Status with Vendor Model");
   163da:	482e      	ldr	r0, [pc, #184]	; (16494 <mod_pub_status+0x150>)
   163dc:	1ac9      	subs	r1, r1, r3
   163de:	08c9      	lsrs	r1, r1, #3
   163e0:	0189      	lsls	r1, r1, #6
   163e2:	f041 0102 	orr.w	r1, r1, #2
   163e6:	e7de      	b.n	163a6 <mod_pub_status+0x62>
   163e8:	6822      	ldr	r2, [r4, #0]
   163ea:	8951      	ldrh	r1, [r2, #10]
		cid = CID_NVAL;
   163ec:	461a      	mov	r2, r3
   163ee:	e7e2      	b.n	163b6 <mod_pub_status+0x72>
	status = net_buf_simple_pull_u8(buf);
   163f0:	4620      	mov	r0, r4
   163f2:	f011 ffa9 	bl	28348 <net_buf_simple_pull_u8>
   163f6:	4605      	mov	r5, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   163f8:	4620      	mov	r0, r4
   163fa:	f011 ffad 	bl	28358 <net_buf_simple_pull_le16>
	if (elem_addr != param->elem_addr) {
   163fe:	9b01      	ldr	r3, [sp, #4]
   16400:	889a      	ldrh	r2, [r3, #4]
   16402:	4282      	cmp	r2, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   16404:	4601      	mov	r1, r0
	if (elem_addr != param->elem_addr) {
   16406:	d00a      	beq.n	1641e <mod_pub_status+0xda>
   16408:	4b1c      	ldr	r3, [pc, #112]	; (1647c <mod_pub_status+0x138>)
   1640a:	4a1d      	ldr	r2, [pc, #116]	; (16480 <mod_pub_status+0x13c>)
		BT_WARN("Model Pub Status for unexpected element (0x%04x)",
   1640c:	4822      	ldr	r0, [pc, #136]	; (16498 <mod_pub_status+0x154>)
   1640e:	1ad2      	subs	r2, r2, r3
   16410:	08d2      	lsrs	r2, r2, #3
   16412:	0192      	lsls	r2, r2, #6
   16414:	f042 0202 	orr.w	r2, r2, #2
   16418:	f00b fb74 	bl	21b04 <log_1>
		return -ENOENT;
   1641c:	e7c5      	b.n	163aa <mod_pub_status+0x66>
	if (param->status) {
   1641e:	689b      	ldr	r3, [r3, #8]
   16420:	b103      	cbz	r3, 16424 <mod_pub_status+0xe0>
		*param->status = status;
   16422:	701d      	strb	r5, [r3, #0]
	if (param->pub) {
   16424:	9b01      	ldr	r3, [sp, #4]
   16426:	68dd      	ldr	r5, [r3, #12]
   16428:	b315      	cbz	r5, 16470 <mod_pub_status+0x12c>
		param->pub->addr = net_buf_simple_pull_le16(buf);
   1642a:	4620      	mov	r0, r4
   1642c:	f011 ff94 	bl	28358 <net_buf_simple_pull_le16>
		param->pub->app_idx = net_buf_simple_pull_le16(buf);
   16430:	9b01      	ldr	r3, [sp, #4]
		param->pub->addr = net_buf_simple_pull_le16(buf);
   16432:	8028      	strh	r0, [r5, #0]
		param->pub->app_idx = net_buf_simple_pull_le16(buf);
   16434:	4620      	mov	r0, r4
   16436:	68dd      	ldr	r5, [r3, #12]
   16438:	f011 ff8e 	bl	28358 <net_buf_simple_pull_le16>
		param->pub->cred_flag = (param->pub->app_idx & BIT(12));
   1643c:	9b01      	ldr	r3, [sp, #4]
		param->pub->app_idx = net_buf_simple_pull_le16(buf);
   1643e:	8128      	strh	r0, [r5, #8]
		param->pub->cred_flag = (param->pub->app_idx & BIT(12));
   16440:	68dd      	ldr	r5, [r3, #12]
   16442:	892b      	ldrh	r3, [r5, #8]
   16444:	f3c3 3200 	ubfx	r2, r3, #12, #1
		param->pub->app_idx &= BIT_MASK(12);
   16448:	f3c3 030b 	ubfx	r3, r3, #0, #12
		param->pub->cred_flag = (param->pub->app_idx & BIT(12));
   1644c:	72aa      	strb	r2, [r5, #10]
		param->pub->app_idx &= BIT_MASK(12);
   1644e:	812b      	strh	r3, [r5, #8]
		param->pub->ttl = net_buf_simple_pull_u8(buf);
   16450:	4620      	mov	r0, r4
   16452:	f011 ff79 	bl	28348 <net_buf_simple_pull_u8>
		param->pub->period = net_buf_simple_pull_u8(buf);
   16456:	9b01      	ldr	r3, [sp, #4]
		param->pub->ttl = net_buf_simple_pull_u8(buf);
   16458:	72e8      	strb	r0, [r5, #11]
		param->pub->period = net_buf_simple_pull_u8(buf);
   1645a:	4620      	mov	r0, r4
   1645c:	68dd      	ldr	r5, [r3, #12]
   1645e:	f011 ff73 	bl	28348 <net_buf_simple_pull_u8>
		param->pub->transmit = net_buf_simple_pull_u8(buf);
   16462:	9b01      	ldr	r3, [sp, #4]
		param->pub->period = net_buf_simple_pull_u8(buf);
   16464:	7328      	strb	r0, [r5, #12]
		param->pub->transmit = net_buf_simple_pull_u8(buf);
   16466:	4620      	mov	r0, r4
   16468:	68dd      	ldr	r5, [r3, #12]
   1646a:	f011 ff6d 	bl	28348 <net_buf_simple_pull_u8>
   1646e:	7368      	strb	r0, [r5, #13]
   16470:	6830      	ldr	r0, [r6, #0]
   16472:	3004      	adds	r0, #4
   16474:	f010 fbfd 	bl	26c72 <k_sem_give>
	return 0;
   16478:	2000      	movs	r0, #0
   1647a:	e777      	b.n	1636c <mod_pub_status+0x28>
   1647c:	00029870 	.word	0x00029870
   16480:	000299b0 	.word	0x000299b0
   16484:	0002de83 	.word	0x0002de83
   16488:	2000249c 	.word	0x2000249c
   1648c:	0002ee6c 	.word	0x0002ee6c
   16490:	0002eec1 	.word	0x0002eec1
   16494:	0002ee95 	.word	0x0002ee95
   16498:	0002eee9 	.word	0x0002eee9

0001649c <app_key_list>:
{
   1649c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_APP_KEY_LIST, ctx->addr,
   164a0:	4f30      	ldr	r7, [pc, #192]	; (16564 <app_key_list+0xc8>)
   164a2:	6838      	ldr	r0, [r7, #0]
{
   164a4:	4615      	mov	r5, r2
	if (!bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_APP_KEY_LIST, ctx->addr,
   164a6:	ab01      	add	r3, sp, #4
   164a8:	888a      	ldrh	r2, [r1, #4]
   164aa:	3004      	adds	r0, #4
   164ac:	f248 0102 	movw	r1, #32770	; 0x8002
   164b0:	f010 f853 	bl	2655a <bt_mesh_msg_ack_ctx_match>
   164b4:	b1b0      	cbz	r0, 164e4 <app_key_list+0x48>
	status = net_buf_simple_pull_u8(buf);
   164b6:	4628      	mov	r0, r5
   164b8:	f011 ff46 	bl	28348 <net_buf_simple_pull_u8>
   164bc:	4606      	mov	r6, r0
	net_idx = net_buf_simple_pull_le16(buf) & 0xfff;
   164be:	4628      	mov	r0, r5
   164c0:	f011 ff4a 	bl	28358 <net_buf_simple_pull_le16>
	if (param->net_idx != net_idx) {
   164c4:	9b01      	ldr	r3, [sp, #4]
   164c6:	881b      	ldrh	r3, [r3, #0]
   164c8:	f3c0 000b 	ubfx	r0, r0, #0, #12
   164cc:	4283      	cmp	r3, r0
   164ce:	d03a      	beq.n	16546 <app_key_list+0xaa>
   164d0:	4925      	ldr	r1, [pc, #148]	; (16568 <app_key_list+0xcc>)
   164d2:	4b26      	ldr	r3, [pc, #152]	; (1656c <app_key_list+0xd0>)
		BT_WARN("App Key List Net Key index did not match");
   164d4:	4826      	ldr	r0, [pc, #152]	; (16570 <app_key_list+0xd4>)
   164d6:	1ac9      	subs	r1, r1, r3
   164d8:	08c9      	lsrs	r1, r1, #3
   164da:	0189      	lsls	r1, r1, #6
   164dc:	f041 0102 	orr.w	r1, r1, #2
   164e0:	f00b fb03 	bl	21aea <log_0>
		return -ENOENT;
   164e4:	f06f 0001 	mvn.w	r0, #1
   164e8:	e02a      	b.n	16540 <app_key_list+0xa4>
		key_idx_unpack(buf, &param->keys[i], &param->keys[i + 1]);
   164ea:	6899      	ldr	r1, [r3, #8]
   164ec:	0063      	lsls	r3, r4, #1
   164ee:	1c9a      	adds	r2, r3, #2
   164f0:	440a      	add	r2, r1
   164f2:	4628      	mov	r0, r5
   164f4:	4419      	add	r1, r3
   164f6:	f010 fbbe 	bl	26c76 <key_idx_unpack>
	for (i = 0; i < *param->key_cnt && buf->len >= 3; i += 2) {
   164fa:	3402      	adds	r4, #2
   164fc:	9b01      	ldr	r3, [sp, #4]
   164fe:	88aa      	ldrh	r2, [r5, #4]
   16500:	68d9      	ldr	r1, [r3, #12]
   16502:	6809      	ldr	r1, [r1, #0]
   16504:	428c      	cmp	r4, r1
   16506:	46a0      	mov	r8, r4
   16508:	d20c      	bcs.n	16524 <app_key_list+0x88>
   1650a:	2a02      	cmp	r2, #2
   1650c:	d8ed      	bhi.n	164ea <app_key_list+0x4e>
	if (i < *param->key_cnt && buf->len >= 2) {
   1650e:	d109      	bne.n	16524 <app_key_list+0x88>
		param->keys[i++] = net_buf_simple_pull_le16(buf) & 0xfff;
   16510:	4628      	mov	r0, r5
   16512:	f011 ff21 	bl	28358 <net_buf_simple_pull_le16>
   16516:	9b01      	ldr	r3, [sp, #4]
   16518:	689b      	ldr	r3, [r3, #8]
   1651a:	f3c0 000b 	ubfx	r0, r0, #0, #12
   1651e:	f823 0018 	strh.w	r0, [r3, r8, lsl #1]
   16522:	3401      	adds	r4, #1
	if (buf->len > 0U) {
   16524:	88ab      	ldrh	r3, [r5, #4]
   16526:	b183      	cbz	r3, 1654a <app_key_list+0xae>
   16528:	4b10      	ldr	r3, [pc, #64]	; (1656c <app_key_list+0xd0>)
   1652a:	490f      	ldr	r1, [pc, #60]	; (16568 <app_key_list+0xcc>)
		BT_ERR("The message size for the application opcode is incorrect.");
   1652c:	4811      	ldr	r0, [pc, #68]	; (16574 <app_key_list+0xd8>)
   1652e:	1ac9      	subs	r1, r1, r3
   16530:	08c9      	lsrs	r1, r1, #3
   16532:	0189      	lsls	r1, r1, #6
   16534:	f041 0101 	orr.w	r1, r1, #1
   16538:	f00b fad7 	bl	21aea <log_0>
		return -EINVAL;
   1653c:	f06f 0015 	mvn.w	r0, #21
}
   16540:	b002      	add	sp, #8
   16542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < *param->key_cnt && buf->len >= 3; i += 2) {
   16546:	2400      	movs	r4, #0
   16548:	e7d8      	b.n	164fc <app_key_list+0x60>
	*param->key_cnt = i;
   1654a:	9b01      	ldr	r3, [sp, #4]
   1654c:	68da      	ldr	r2, [r3, #12]
	if (param->status) {
   1654e:	685b      	ldr	r3, [r3, #4]
	*param->key_cnt = i;
   16550:	6014      	str	r4, [r2, #0]
	if (param->status) {
   16552:	b103      	cbz	r3, 16556 <app_key_list+0xba>
		*param->status = status;
   16554:	701e      	strb	r6, [r3, #0]
   16556:	6838      	ldr	r0, [r7, #0]
   16558:	3004      	adds	r0, #4
   1655a:	f010 fb8a 	bl	26c72 <k_sem_give>
	return 0;
   1655e:	2000      	movs	r0, #0
   16560:	e7ee      	b.n	16540 <app_key_list+0xa4>
   16562:	bf00      	nop
   16564:	2000249c 	.word	0x2000249c
   16568:	000299b0 	.word	0x000299b0
   1656c:	00029870 	.word	0x00029870
   16570:	0002ef1a 	.word	0x0002ef1a
   16574:	0002de83 	.word	0x0002de83

00016578 <app_key_status>:
{
   16578:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_APP_KEY_STATUS, ctx->addr,
   1657a:	4e1b      	ldr	r6, [pc, #108]	; (165e8 <app_key_status+0x70>)
   1657c:	6830      	ldr	r0, [r6, #0]
{
   1657e:	4614      	mov	r4, r2
	if (!bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_APP_KEY_STATUS, ctx->addr,
   16580:	ab01      	add	r3, sp, #4
   16582:	888a      	ldrh	r2, [r1, #4]
   16584:	3004      	adds	r0, #4
   16586:	f248 0103 	movw	r1, #32771	; 0x8003
   1658a:	f00f ffe6 	bl	2655a <bt_mesh_msg_ack_ctx_match>
   1658e:	b1f0      	cbz	r0, 165ce <app_key_status+0x56>
	status = net_buf_simple_pull_u8(buf);
   16590:	4620      	mov	r0, r4
   16592:	f011 fed9 	bl	28348 <net_buf_simple_pull_u8>
	key_idx_unpack(buf, &net_idx, &app_idx);
   16596:	f10d 0202 	add.w	r2, sp, #2
   1659a:	4669      	mov	r1, sp
	status = net_buf_simple_pull_u8(buf);
   1659c:	4605      	mov	r5, r0
	key_idx_unpack(buf, &net_idx, &app_idx);
   1659e:	4620      	mov	r0, r4
   165a0:	f010 fb69 	bl	26c76 <key_idx_unpack>
	if (param->net_idx != net_idx || param->app_idx != app_idx) {
   165a4:	9b01      	ldr	r3, [sp, #4]
   165a6:	f8bd 2000 	ldrh.w	r2, [sp]
   165aa:	8899      	ldrh	r1, [r3, #4]
   165ac:	4291      	cmp	r1, r2
   165ae:	d104      	bne.n	165ba <app_key_status+0x42>
   165b0:	88d9      	ldrh	r1, [r3, #6]
   165b2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   165b6:	4291      	cmp	r1, r2
   165b8:	d00c      	beq.n	165d4 <app_key_status+0x5c>
   165ba:	490c      	ldr	r1, [pc, #48]	; (165ec <app_key_status+0x74>)
   165bc:	4b0c      	ldr	r3, [pc, #48]	; (165f0 <app_key_status+0x78>)
		BT_WARN("App Key Status key indices did not match");
   165be:	480d      	ldr	r0, [pc, #52]	; (165f4 <app_key_status+0x7c>)
   165c0:	1ac9      	subs	r1, r1, r3
   165c2:	08c9      	lsrs	r1, r1, #3
   165c4:	0189      	lsls	r1, r1, #6
   165c6:	f041 0102 	orr.w	r1, r1, #2
   165ca:	f00b fa8e 	bl	21aea <log_0>
		return -ENOENT;
   165ce:	f06f 0001 	mvn.w	r0, #1
   165d2:	e007      	b.n	165e4 <app_key_status+0x6c>
	if (param->status) {
   165d4:	681b      	ldr	r3, [r3, #0]
   165d6:	b103      	cbz	r3, 165da <app_key_status+0x62>
		*param->status = status;
   165d8:	701d      	strb	r5, [r3, #0]
   165da:	6830      	ldr	r0, [r6, #0]
   165dc:	3004      	adds	r0, #4
   165de:	f010 fb48 	bl	26c72 <k_sem_give>
	return 0;
   165e2:	2000      	movs	r0, #0
}
   165e4:	b002      	add	sp, #8
   165e6:	bd70      	pop	{r4, r5, r6, pc}
   165e8:	2000249c 	.word	0x2000249c
   165ec:	000299b0 	.word	0x000299b0
   165f0:	00029870 	.word	0x00029870
   165f4:	0002ef43 	.word	0x0002ef43

000165f8 <net_key_list>:
{
   165f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_NET_KEY_LIST, ctx->addr,
   165fa:	4e23      	ldr	r6, [pc, #140]	; (16688 <net_key_list+0x90>)
   165fc:	6830      	ldr	r0, [r6, #0]
{
   165fe:	4615      	mov	r5, r2
	if (!bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_NET_KEY_LIST, ctx->addr,
   16600:	ab01      	add	r3, sp, #4
   16602:	888a      	ldrh	r2, [r1, #4]
   16604:	3004      	adds	r0, #4
   16606:	f248 0143 	movw	r1, #32835	; 0x8043
   1660a:	f00f ffa6 	bl	2655a <bt_mesh_msg_ack_ctx_match>
   1660e:	bb78      	cbnz	r0, 16670 <net_key_list+0x78>
		return -ENOENT;
   16610:	f06f 0001 	mvn.w	r0, #1
}
   16614:	b003      	add	sp, #12
   16616:	bdf0      	pop	{r4, r5, r6, r7, pc}
		key_idx_unpack(buf, &param->keys[i], &param->keys[i + 1]);
   16618:	6819      	ldr	r1, [r3, #0]
   1661a:	0063      	lsls	r3, r4, #1
   1661c:	1c9a      	adds	r2, r3, #2
   1661e:	440a      	add	r2, r1
   16620:	4628      	mov	r0, r5
   16622:	4419      	add	r1, r3
   16624:	f010 fb27 	bl	26c76 <key_idx_unpack>
	for (i = 0; i < *param->key_cnt && buf->len >= 3; i += 2) {
   16628:	3402      	adds	r4, #2
   1662a:	9b01      	ldr	r3, [sp, #4]
   1662c:	88aa      	ldrh	r2, [r5, #4]
   1662e:	6859      	ldr	r1, [r3, #4]
   16630:	6809      	ldr	r1, [r1, #0]
   16632:	428c      	cmp	r4, r1
   16634:	4627      	mov	r7, r4
   16636:	d20c      	bcs.n	16652 <net_key_list+0x5a>
   16638:	2a02      	cmp	r2, #2
   1663a:	d8ed      	bhi.n	16618 <net_key_list+0x20>
	if (i < *param->key_cnt && buf->len >= 2) {
   1663c:	d109      	bne.n	16652 <net_key_list+0x5a>
		param->keys[i++] = net_buf_simple_pull_le16(buf) & 0xfff;
   1663e:	4628      	mov	r0, r5
   16640:	f011 fe8a 	bl	28358 <net_buf_simple_pull_le16>
   16644:	9b01      	ldr	r3, [sp, #4]
   16646:	681b      	ldr	r3, [r3, #0]
   16648:	f3c0 000b 	ubfx	r0, r0, #0, #12
   1664c:	f823 0017 	strh.w	r0, [r3, r7, lsl #1]
   16650:	3401      	adds	r4, #1
	if (buf->len > 0) {
   16652:	88ad      	ldrh	r5, [r5, #4]
   16654:	b175      	cbz	r5, 16674 <net_key_list+0x7c>
   16656:	4b0d      	ldr	r3, [pc, #52]	; (1668c <net_key_list+0x94>)
   16658:	490d      	ldr	r1, [pc, #52]	; (16690 <net_key_list+0x98>)
		BT_ERR("The message size for the application opcode is incorrect.");
   1665a:	480e      	ldr	r0, [pc, #56]	; (16694 <net_key_list+0x9c>)
   1665c:	1ac9      	subs	r1, r1, r3
   1665e:	08c9      	lsrs	r1, r1, #3
   16660:	0189      	lsls	r1, r1, #6
   16662:	f041 0101 	orr.w	r1, r1, #1
   16666:	f00b fa40 	bl	21aea <log_0>
		return -EMSGSIZE;
   1666a:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1666e:	e7d1      	b.n	16614 <net_key_list+0x1c>
	for (i = 0; i < *param->key_cnt && buf->len >= 3; i += 2) {
   16670:	2400      	movs	r4, #0
   16672:	e7da      	b.n	1662a <net_key_list+0x32>
	*param->key_cnt = i;
   16674:	9b01      	ldr	r3, [sp, #4]
   16676:	6830      	ldr	r0, [r6, #0]
   16678:	685b      	ldr	r3, [r3, #4]
   1667a:	3004      	adds	r0, #4
   1667c:	601c      	str	r4, [r3, #0]
   1667e:	f010 faf8 	bl	26c72 <k_sem_give>
	return 0;
   16682:	4628      	mov	r0, r5
   16684:	e7c6      	b.n	16614 <net_key_list+0x1c>
   16686:	bf00      	nop
   16688:	2000249c 	.word	0x2000249c
   1668c:	00029870 	.word	0x00029870
   16690:	000299b0 	.word	0x000299b0
   16694:	0002de83 	.word	0x0002de83

00016698 <comp_data_status>:
{
   16698:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_DEV_COMP_DATA_STATUS, ctx->addr,
   1669a:	4d16      	ldr	r5, [pc, #88]	; (166f4 <comp_data_status+0x5c>)
   1669c:	6828      	ldr	r0, [r5, #0]
{
   1669e:	4614      	mov	r4, r2
	if (!bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_DEV_COMP_DATA_STATUS, ctx->addr,
   166a0:	ab01      	add	r3, sp, #4
   166a2:	888a      	ldrh	r2, [r1, #4]
   166a4:	3004      	adds	r0, #4
   166a6:	2102      	movs	r1, #2
   166a8:	f00f ff57 	bl	2655a <bt_mesh_msg_ack_ctx_match>
   166ac:	b1f0      	cbz	r0, 166ec <comp_data_status+0x54>
	if (param->page) {
   166ae:	9b01      	ldr	r3, [sp, #4]
   166b0:	681e      	ldr	r6, [r3, #0]
   166b2:	b11e      	cbz	r6, 166bc <comp_data_status+0x24>
		*(param->page) = net_buf_simple_pull_u8(buf);
   166b4:	4620      	mov	r0, r4
   166b6:	f011 fe47 	bl	28348 <net_buf_simple_pull_u8>
   166ba:	7030      	strb	r0, [r6, #0]
	to_copy  = MIN(net_buf_simple_tailroom(param->comp), buf->len);
   166bc:	9b01      	ldr	r3, [sp, #4]
   166be:	6858      	ldr	r0, [r3, #4]
   166c0:	f011 fe77 	bl	283b2 <net_buf_simple_tailroom>
   166c4:	88a2      	ldrh	r2, [r4, #4]
   166c6:	4290      	cmp	r0, r2
   166c8:	d204      	bcs.n	166d4 <comp_data_status+0x3c>
   166ca:	9b01      	ldr	r3, [sp, #4]
   166cc:	6858      	ldr	r0, [r3, #4]
   166ce:	f011 fe70 	bl	283b2 <net_buf_simple_tailroom>
   166d2:	4602      	mov	r2, r0
	net_buf_simple_add_mem(param->comp, buf->data, to_copy);
   166d4:	9b01      	ldr	r3, [sp, #4]
   166d6:	6821      	ldr	r1, [r4, #0]
   166d8:	6858      	ldr	r0, [r3, #4]
   166da:	f011 fdbb 	bl	28254 <net_buf_simple_add_mem>
   166de:	6828      	ldr	r0, [r5, #0]
   166e0:	3004      	adds	r0, #4
   166e2:	f010 fac6 	bl	26c72 <k_sem_give>
	return 0;
   166e6:	2000      	movs	r0, #0
}
   166e8:	b002      	add	sp, #8
   166ea:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOENT;
   166ec:	f06f 0001 	mvn.w	r0, #1
   166f0:	e7fa      	b.n	166e8 <comp_data_status+0x50>
   166f2:	bf00      	nop
   166f4:	2000249c 	.word	0x2000249c

000166f8 <mod_member_list_handle.constprop.0>:
static int mod_member_list_handle(struct bt_mesh_msg_ctx *ctx,
   166f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if ((vnd && buf->len < 7U) || (buf->len < 5U)) {
   166fc:	8883      	ldrh	r3, [r0, #4]
static int mod_member_list_handle(struct bt_mesh_msg_ctx *ctx,
   166fe:	4605      	mov	r5, r0
   16700:	4616      	mov	r6, r2
   16702:	2700      	movs	r7, #0
	if ((vnd && buf->len < 7U) || (buf->len < 5U)) {
   16704:	460c      	mov	r4, r1
   16706:	b171      	cbz	r1, 16726 <mod_member_list_handle.constprop.0+0x2e>
   16708:	2b06      	cmp	r3, #6
   1670a:	d80e      	bhi.n	1672a <mod_member_list_handle.constprop.0+0x32>
   1670c:	492e      	ldr	r1, [pc, #184]	; (167c8 <mod_member_list_handle.constprop.0+0xd0>)
   1670e:	4b2f      	ldr	r3, [pc, #188]	; (167cc <mod_member_list_handle.constprop.0+0xd4>)
		BT_ERR("The message size for the application opcode is incorrect.");
   16710:	482f      	ldr	r0, [pc, #188]	; (167d0 <mod_member_list_handle.constprop.0+0xd8>)
   16712:	1ac9      	subs	r1, r1, r3
   16714:	08c9      	lsrs	r1, r1, #3
   16716:	0189      	lsls	r1, r1, #6
   16718:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Model Member List invalid length");
   1671c:	f00b f9e5 	bl	21aea <log_0>
		return -EMSGSIZE;
   16720:	f06f 0079 	mvn.w	r0, #121	; 0x79
   16724:	e027      	b.n	16776 <mod_member_list_handle.constprop.0+0x7e>
	if ((vnd && buf->len < 7U) || (buf->len < 5U)) {
   16726:	2b04      	cmp	r3, #4
   16728:	e7ef      	b.n	1670a <mod_member_list_handle.constprop.0+0x12>
	status = net_buf_simple_pull_u8(buf);
   1672a:	4628      	mov	r0, r5
   1672c:	f011 fe0c 	bl	28348 <net_buf_simple_pull_u8>
   16730:	4680      	mov	r8, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   16732:	4628      	mov	r0, r5
   16734:	f011 fe10 	bl	28358 <net_buf_simple_pull_le16>
   16738:	4681      	mov	r9, r0
	if (vnd) {
   1673a:	b11c      	cbz	r4, 16744 <mod_member_list_handle.constprop.0+0x4c>
		cid = net_buf_simple_pull_le16(buf);
   1673c:	4628      	mov	r0, r5
   1673e:	f011 fe0b 	bl	28358 <net_buf_simple_pull_le16>
   16742:	4607      	mov	r7, r0
	mod_id = net_buf_simple_pull_le16(buf);
   16744:	4628      	mov	r0, r5
   16746:	f011 fe07 	bl	28358 <net_buf_simple_pull_le16>
	if (param->elem_addr != elem_addr || param->mod_id != mod_id ||
   1674a:	88b3      	ldrh	r3, [r6, #4]
   1674c:	454b      	cmp	r3, r9
   1674e:	d106      	bne.n	1675e <mod_member_list_handle.constprop.0+0x66>
   16750:	88f3      	ldrh	r3, [r6, #6]
   16752:	4283      	cmp	r3, r0
   16754:	d103      	bne.n	1675e <mod_member_list_handle.constprop.0+0x66>
   16756:	b184      	cbz	r4, 1677a <mod_member_list_handle.constprop.0+0x82>
	    (vnd && param->cid != cid)) {
   16758:	8933      	ldrh	r3, [r6, #8]
   1675a:	42bb      	cmp	r3, r7
   1675c:	d00d      	beq.n	1677a <mod_member_list_handle.constprop.0+0x82>
   1675e:	4b1b      	ldr	r3, [pc, #108]	; (167cc <mod_member_list_handle.constprop.0+0xd4>)
   16760:	4919      	ldr	r1, [pc, #100]	; (167c8 <mod_member_list_handle.constprop.0+0xd0>)
		BT_WARN("Model Member List parameters did not match");
   16762:	481c      	ldr	r0, [pc, #112]	; (167d4 <mod_member_list_handle.constprop.0+0xdc>)
   16764:	1ac9      	subs	r1, r1, r3
   16766:	08c9      	lsrs	r1, r1, #3
   16768:	0189      	lsls	r1, r1, #6
   1676a:	f041 0102 	orr.w	r1, r1, #2
   1676e:	f00b f9bc 	bl	21aea <log_0>
		return -ENOENT;
   16772:	f06f 0001 	mvn.w	r0, #1
}
   16776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (buf->len % 2U) {
   1677a:	88ac      	ldrh	r4, [r5, #4]
   1677c:	f014 0401 	ands.w	r4, r4, #1
   16780:	d00f      	beq.n	167a2 <mod_member_list_handle.constprop.0+0xaa>
   16782:	4911      	ldr	r1, [pc, #68]	; (167c8 <mod_member_list_handle.constprop.0+0xd0>)
   16784:	4b11      	ldr	r3, [pc, #68]	; (167cc <mod_member_list_handle.constprop.0+0xd4>)
		BT_ERR("Model Member List invalid length");
   16786:	4814      	ldr	r0, [pc, #80]	; (167d8 <mod_member_list_handle.constprop.0+0xe0>)
   16788:	1ac9      	subs	r1, r1, r3
   1678a:	08c9      	lsrs	r1, r1, #3
   1678c:	0189      	lsls	r1, r1, #6
   1678e:	f041 0101 	orr.w	r1, r1, #1
   16792:	e7c3      	b.n	1671c <mod_member_list_handle.constprop.0+0x24>
		param->members[i] = net_buf_simple_pull_le16(buf);
   16794:	4628      	mov	r0, r5
   16796:	68f7      	ldr	r7, [r6, #12]
   16798:	f011 fdde 	bl	28358 <net_buf_simple_pull_le16>
   1679c:	f827 0014 	strh.w	r0, [r7, r4, lsl #1]
	for (i = 0; i < *param->member_cnt && buf->len; i++) {
   167a0:	3401      	adds	r4, #1
   167a2:	6933      	ldr	r3, [r6, #16]
   167a4:	681a      	ldr	r2, [r3, #0]
   167a6:	42a2      	cmp	r2, r4
   167a8:	d902      	bls.n	167b0 <mod_member_list_handle.constprop.0+0xb8>
   167aa:	88aa      	ldrh	r2, [r5, #4]
   167ac:	2a00      	cmp	r2, #0
   167ae:	d1f1      	bne.n	16794 <mod_member_list_handle.constprop.0+0x9c>
	*param->member_cnt = i;
   167b0:	601c      	str	r4, [r3, #0]
	if (param->status) {
   167b2:	6833      	ldr	r3, [r6, #0]
   167b4:	b10b      	cbz	r3, 167ba <mod_member_list_handle.constprop.0+0xc2>
		*param->status = status;
   167b6:	f883 8000 	strb.w	r8, [r3]
	bt_mesh_msg_ack_ctx_rx(&cli->ack_ctx);
   167ba:	4b08      	ldr	r3, [pc, #32]	; (167dc <mod_member_list_handle.constprop.0+0xe4>)
   167bc:	6818      	ldr	r0, [r3, #0]
   167be:	3004      	adds	r0, #4
   167c0:	f010 fa57 	bl	26c72 <k_sem_give>
	return 0;
   167c4:	2000      	movs	r0, #0
   167c6:	e7d6      	b.n	16776 <mod_member_list_handle.constprop.0+0x7e>
   167c8:	000299b0 	.word	0x000299b0
   167cc:	00029870 	.word	0x00029870
   167d0:	0002de83 	.word	0x0002de83
   167d4:	0002ef6c 	.word	0x0002ef6c
   167d8:	0002ef97 	.word	0x0002ef97
   167dc:	2000249c 	.word	0x2000249c

000167e0 <mod_app_list>:
{
   167e0:	b513      	push	{r0, r1, r4, lr}
	if (!bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_SIG_MOD_APP_LIST, ctx->addr,
   167e2:	4b0a      	ldr	r3, [pc, #40]	; (1680c <mod_app_list+0x2c>)
   167e4:	6818      	ldr	r0, [r3, #0]
{
   167e6:	4614      	mov	r4, r2
	if (!bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_SIG_MOD_APP_LIST, ctx->addr,
   167e8:	ab01      	add	r3, sp, #4
   167ea:	888a      	ldrh	r2, [r1, #4]
   167ec:	3004      	adds	r0, #4
   167ee:	f248 014c 	movw	r1, #32844	; 0x804c
   167f2:	f00f feb2 	bl	2655a <bt_mesh_msg_ack_ctx_match>
   167f6:	b130      	cbz	r0, 16806 <mod_app_list+0x26>
	return mod_member_list_handle(ctx, buf, false, param);
   167f8:	9a01      	ldr	r2, [sp, #4]
   167fa:	2100      	movs	r1, #0
   167fc:	4620      	mov	r0, r4
   167fe:	f7ff ff7b 	bl	166f8 <mod_member_list_handle.constprop.0>
}
   16802:	b002      	add	sp, #8
   16804:	bd10      	pop	{r4, pc}
		return -ENOENT;
   16806:	f06f 0001 	mvn.w	r0, #1
   1680a:	e7fa      	b.n	16802 <mod_app_list+0x22>
   1680c:	2000249c 	.word	0x2000249c

00016810 <mod_app_list_vnd>:
{
   16810:	b513      	push	{r0, r1, r4, lr}
	if (!bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_VND_MOD_APP_LIST, ctx->addr,
   16812:	4b0a      	ldr	r3, [pc, #40]	; (1683c <mod_app_list_vnd+0x2c>)
   16814:	6818      	ldr	r0, [r3, #0]
{
   16816:	4614      	mov	r4, r2
	if (!bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_VND_MOD_APP_LIST, ctx->addr,
   16818:	ab01      	add	r3, sp, #4
   1681a:	888a      	ldrh	r2, [r1, #4]
   1681c:	3004      	adds	r0, #4
   1681e:	f248 014e 	movw	r1, #32846	; 0x804e
   16822:	f00f fe9a 	bl	2655a <bt_mesh_msg_ack_ctx_match>
   16826:	b130      	cbz	r0, 16836 <mod_app_list_vnd+0x26>
	return mod_member_list_handle(ctx, buf, true, param);
   16828:	9a01      	ldr	r2, [sp, #4]
   1682a:	2101      	movs	r1, #1
   1682c:	4620      	mov	r0, r4
   1682e:	f7ff ff63 	bl	166f8 <mod_member_list_handle.constprop.0>
}
   16832:	b002      	add	sp, #8
   16834:	bd10      	pop	{r4, pc}
		return -ENOENT;
   16836:	f06f 0001 	mvn.w	r0, #1
   1683a:	e7fa      	b.n	16832 <mod_app_list_vnd+0x22>
   1683c:	2000249c 	.word	0x2000249c

00016840 <mod_sub_list>:
{
   16840:	b513      	push	{r0, r1, r4, lr}
	if (!bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_MOD_SUB_LIST, ctx->addr,
   16842:	4b0a      	ldr	r3, [pc, #40]	; (1686c <mod_sub_list+0x2c>)
   16844:	6818      	ldr	r0, [r3, #0]
{
   16846:	4614      	mov	r4, r2
	if (!bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_MOD_SUB_LIST, ctx->addr,
   16848:	ab01      	add	r3, sp, #4
   1684a:	888a      	ldrh	r2, [r1, #4]
   1684c:	3004      	adds	r0, #4
   1684e:	f248 012a 	movw	r1, #32810	; 0x802a
   16852:	f00f fe82 	bl	2655a <bt_mesh_msg_ack_ctx_match>
   16856:	b130      	cbz	r0, 16866 <mod_sub_list+0x26>
	return mod_member_list_handle(ctx, buf, false, param);
   16858:	9a01      	ldr	r2, [sp, #4]
   1685a:	2100      	movs	r1, #0
   1685c:	4620      	mov	r0, r4
   1685e:	f7ff ff4b 	bl	166f8 <mod_member_list_handle.constprop.0>
}
   16862:	b002      	add	sp, #8
   16864:	bd10      	pop	{r4, pc}
		return -ENOENT;
   16866:	f06f 0001 	mvn.w	r0, #1
   1686a:	e7fa      	b.n	16862 <mod_sub_list+0x22>
   1686c:	2000249c 	.word	0x2000249c

00016870 <mod_sub_list_vnd>:
{
   16870:	b513      	push	{r0, r1, r4, lr}
	if (!bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_MOD_SUB_LIST_VND, ctx->addr,
   16872:	4b0a      	ldr	r3, [pc, #40]	; (1689c <mod_sub_list_vnd+0x2c>)
   16874:	6818      	ldr	r0, [r3, #0]
{
   16876:	4614      	mov	r4, r2
	if (!bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, OP_MOD_SUB_LIST_VND, ctx->addr,
   16878:	ab01      	add	r3, sp, #4
   1687a:	888a      	ldrh	r2, [r1, #4]
   1687c:	3004      	adds	r0, #4
   1687e:	f248 012c 	movw	r1, #32812	; 0x802c
   16882:	f00f fe6a 	bl	2655a <bt_mesh_msg_ack_ctx_match>
   16886:	b130      	cbz	r0, 16896 <mod_sub_list_vnd+0x26>
	return mod_member_list_handle(ctx, buf, true, param);
   16888:	9a01      	ldr	r2, [sp, #4]
   1688a:	2101      	movs	r1, #1
   1688c:	4620      	mov	r0, r4
   1688e:	f7ff ff33 	bl	166f8 <mod_member_list_handle.constprop.0>
}
   16892:	b002      	add	sp, #8
   16894:	bd10      	pop	{r4, pc}
		return -ENOENT;
   16896:	f06f 0001 	mvn.w	r0, #1
   1689a:	e7fa      	b.n	16892 <mod_sub_list_vnd+0x22>
   1689c:	2000249c 	.word	0x2000249c

000168a0 <cfg_cli_init>:
	{ OP_KRP_STATUS,             BT_MESH_LEN_EXACT(4),    krp_status},
	BT_MESH_MODEL_OP_END,
};

static int cfg_cli_init(struct bt_mesh_model *model)
{
   168a0:	b510      	push	{r4, lr}
	if (!bt_mesh_model_in_primary(model)) {
   168a2:	7904      	ldrb	r4, [r0, #4]
{
   168a4:	4603      	mov	r3, r0
	if (!bt_mesh_model_in_primary(model)) {
   168a6:	b164      	cbz	r4, 168c2 <cfg_cli_init+0x22>
   168a8:	4914      	ldr	r1, [pc, #80]	; (168fc <cfg_cli_init+0x5c>)
   168aa:	4b15      	ldr	r3, [pc, #84]	; (16900 <cfg_cli_init+0x60>)
		BT_ERR("Configuration Client only allowed in primary element");
   168ac:	4815      	ldr	r0, [pc, #84]	; (16904 <cfg_cli_init+0x64>)
   168ae:	1ac9      	subs	r1, r1, r3
   168b0:	08c9      	lsrs	r1, r1, #3
   168b2:	0189      	lsls	r1, r1, #6
   168b4:	f041 0101 	orr.w	r1, r1, #1
		return -EINVAL;
	}

	if (!model->user_data) {
		BT_ERR("No Configuration Client context provided");
   168b8:	f00b f917 	bl	21aea <log_0>
		return -EINVAL;
   168bc:	f06f 0015 	mvn.w	r0, #21
	model->keys[0] = BT_MESH_KEY_DEV_ANY;

	bt_mesh_msg_ack_ctx_init(&cli->ack_ctx);

	return 0;
}
   168c0:	bd10      	pop	{r4, pc}
	if (!model->user_data) {
   168c2:	69c0      	ldr	r0, [r0, #28]
   168c4:	b940      	cbnz	r0, 168d8 <cfg_cli_init+0x38>
   168c6:	490d      	ldr	r1, [pc, #52]	; (168fc <cfg_cli_init+0x5c>)
   168c8:	4b0d      	ldr	r3, [pc, #52]	; (16900 <cfg_cli_init+0x60>)
		BT_ERR("No Configuration Client context provided");
   168ca:	480f      	ldr	r0, [pc, #60]	; (16908 <cfg_cli_init+0x68>)
   168cc:	1ac9      	subs	r1, r1, r3
   168ce:	08c9      	lsrs	r1, r1, #3
   168d0:	0189      	lsls	r1, r1, #6
   168d2:	f041 0101 	orr.w	r1, r1, #1
   168d6:	e7ef      	b.n	168b8 <cfg_cli_init+0x18>
	cli = model->user_data;
   168d8:	4a0c      	ldr	r2, [pc, #48]	; (1690c <cfg_cli_init+0x6c>)
   168da:	6010      	str	r0, [r2, #0]
	msg_timeout = 2 * MSEC_PER_SEC;
   168dc:	4a0c      	ldr	r2, [pc, #48]	; (16910 <cfg_cli_init+0x70>)
	cli->model = model;
   168de:	f840 3b04 	str.w	r3, [r0], #4
	msg_timeout = 2 * MSEC_PER_SEC;
   168e2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   168e6:	6011      	str	r1, [r2, #0]
	model->keys[0] = BT_MESH_KEY_DEV_ANY;
   168e8:	f64f 72fc 	movw	r2, #65532	; 0xfffc
   168ec:	819a      	strh	r2, [r3, #12]
	return z_impl_k_sem_init(sem, initial_count, limit);
   168ee:	2201      	movs	r2, #1
   168f0:	4621      	mov	r1, r4
   168f2:	f012 f9b0 	bl	28c56 <z_impl_k_sem_init>
	return 0;
   168f6:	4620      	mov	r0, r4
   168f8:	e7e2      	b.n	168c0 <cfg_cli_init+0x20>
   168fa:	bf00      	nop
   168fc:	000299b0 	.word	0x000299b0
   16900:	00029870 	.word	0x00029870
   16904:	0002efb8 	.word	0x0002efb8
   16908:	0002efed 	.word	0x0002efed
   1690c:	2000249c 	.word	0x2000249c
   16910:	200024a0 	.word	0x200024a0

00016914 <state_status_u8.constprop.0.isra.0>:
static int state_status_u8(struct bt_mesh_model *model,
   16914:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, expect_status, ctx->addr,
   16916:	4d0c      	ldr	r5, [pc, #48]	; (16948 <state_status_u8.constprop.0.isra.0+0x34>)
   16918:	682e      	ldr	r6, [r5, #0]
static int state_status_u8(struct bt_mesh_model *model,
   1691a:	460c      	mov	r4, r1
	if (!bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, expect_status, ctx->addr,
   1691c:	ab01      	add	r3, sp, #4
static int state_status_u8(struct bt_mesh_model *model,
   1691e:	4611      	mov	r1, r2
	if (!bt_mesh_msg_ack_ctx_match(&cli->ack_ctx, expect_status, ctx->addr,
   16920:	4602      	mov	r2, r0
   16922:	1d30      	adds	r0, r6, #4
   16924:	f00f fe19 	bl	2655a <bt_mesh_msg_ack_ctx_match>
   16928:	b158      	cbz	r0, 16942 <state_status_u8.constprop.0.isra.0+0x2e>
	*status = net_buf_simple_pull_u8(buf);
   1692a:	4620      	mov	r0, r4
   1692c:	9e01      	ldr	r6, [sp, #4]
   1692e:	f011 fd0b 	bl	28348 <net_buf_simple_pull_u8>
   16932:	7030      	strb	r0, [r6, #0]
   16934:	6828      	ldr	r0, [r5, #0]
   16936:	3004      	adds	r0, #4
   16938:	f010 f99b 	bl	26c72 <k_sem_give>
	return 0;
   1693c:	2000      	movs	r0, #0
}
   1693e:	b002      	add	sp, #8
   16940:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOENT;
   16942:	f06f 0001 	mvn.w	r0, #1
   16946:	e7fa      	b.n	1693e <state_status_u8.constprop.0.isra.0+0x2a>
   16948:	2000249c 	.word	0x2000249c

0001694c <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
   1694c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
   16950:	4f11      	ldr	r7, [pc, #68]	; (16998 <mayfly_init+0x4c>)
   16952:	f8df a048 	ldr.w	sl, [pc, #72]	; 1699c <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
   16956:	2404      	movs	r4, #4
	while (callee_id--) {
   16958:	3c01      	subs	r4, #1
   1695a:	b2e4      	uxtb	r4, r4
   1695c:	2cff      	cmp	r4, #255	; 0xff
   1695e:	d018      	beq.n	16992 <mayfly_init+0x46>
   16960:	eb04 0644 	add.w	r6, r4, r4, lsl #1
   16964:	ea4f 0984 	mov.w	r9, r4, lsl #2
   16968:	0136      	lsls	r6, r6, #4
		caller_id = MAYFLY_CALLER_COUNT;
   1696a:	2504      	movs	r5, #4
   1696c:	f04f 080c 	mov.w	r8, #12
   16970:	e00a      	b.n	16988 <mayfly_init+0x3c>
			memq_init(&mfl[callee_id][caller_id],
   16972:	fb18 6105 	smlabb	r1, r8, r5, r6
   16976:	1d0a      	adds	r2, r1, #4
   16978:	eb05 0009 	add.w	r0, r5, r9
   1697c:	443a      	add	r2, r7
   1697e:	4439      	add	r1, r7
   16980:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
   16984:	f010 fa22 	bl	26dcc <memq_init>
		while (caller_id--) {
   16988:	3d01      	subs	r5, #1
   1698a:	b2ed      	uxtb	r5, r5
   1698c:	2dff      	cmp	r5, #255	; 0xff
   1698e:	d1f0      	bne.n	16972 <mayfly_init+0x26>
   16990:	e7e2      	b.n	16958 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
   16992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16996:	bf00      	nop
   16998:	20002524 	.word	0x20002524
   1699c:	200024a4 	.word	0x200024a4

000169a0 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
   169a0:	b4f0      	push	{r4, r5, r6, r7}
   169a2:	4b14      	ldr	r3, [pc, #80]	; (169f4 <mayfly_enable+0x54>)
   169a4:	4607      	mov	r7, r0
   169a6:	460e      	mov	r6, r1
   169a8:	f04f 0c0c 	mov.w	ip, #12
   169ac:	2430      	movs	r4, #48	; 0x30
	if (enable) {
   169ae:	b17a      	cbz	r2, 169d0 <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
   169b0:	fb04 f501 	mul.w	r5, r4, r1
   169b4:	fb0c 5500 	mla	r5, ip, r0, r5
   169b8:	442b      	add	r3, r5
   169ba:	7a59      	ldrb	r1, [r3, #9]
   169bc:	7a18      	ldrb	r0, [r3, #8]
   169be:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
   169c0:	bf04      	itt	eq
   169c2:	3101      	addeq	r1, #1
   169c4:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
   169c6:	4638      	mov	r0, r7
   169c8:	4631      	mov	r1, r6

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
   169ca:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
   169cc:	f007 b81a 	b.w	1da04 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
   169d0:	434c      	muls	r4, r1
   169d2:	fb0c 4400 	mla	r4, ip, r0, r4
   169d6:	4423      	add	r3, r4
   169d8:	7a9c      	ldrb	r4, [r3, #10]
   169da:	7ada      	ldrb	r2, [r3, #11]
   169dc:	42a2      	cmp	r2, r4
   169de:	d107      	bne.n	169f0 <mayfly_enable+0x50>
			mft[callee_id][caller_id].disable_req++;
   169e0:	3201      	adds	r2, #1
   169e2:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
   169e4:	4b04      	ldr	r3, [pc, #16]	; (169f8 <mayfly_enable+0x58>)
   169e6:	2201      	movs	r2, #1
   169e8:	545a      	strb	r2, [r3, r1]
}
   169ea:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
   169ec:	f007 b84a 	b.w	1da84 <mayfly_pend>
}
   169f0:	bcf0      	pop	{r4, r5, r6, r7}
   169f2:	4770      	bx	lr
   169f4:	20002524 	.word	0x20002524
   169f8:	200038aa 	.word	0x200038aa

000169fc <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
   169fc:	b570      	push	{r4, r5, r6, lr}
   169fe:	4606      	mov	r6, r0
   16a00:	460d      	mov	r5, r1
   16a02:	461c      	mov	r4, r3
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
   16a04:	b1a2      	cbz	r2, 16a30 <mayfly_enqueue+0x34>
   16a06:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
   16a08:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
   16a0a:	7820      	ldrb	r0, [r4, #0]
   16a0c:	1a80      	subs	r0, r0, r2
	if (state != 0U) {
   16a0e:	f010 0003 	ands.w	r0, r0, #3
   16a12:	d02c      	beq.n	16a6e <mayfly_enqueue+0x72>
		if (chain) {
   16a14:	b31b      	cbz	r3, 16a5e <mayfly_enqueue+0x62>
			if (state != 1U) {
   16a16:	2801      	cmp	r0, #1
   16a18:	d028      	beq.n	16a6c <mayfly_enqueue+0x70>
				/* mark as ready in queue */
				m->_req = ack + 1;
   16a1a:	3201      	adds	r2, #1
   16a1c:	b2d2      	uxtb	r2, r2
   16a1e:	7022      	strb	r2, [r4, #0]
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
   16a20:	4b1c      	ldr	r3, [pc, #112]	; (16a94 <mayfly_enqueue+0x98>)
   16a22:	2201      	movs	r2, #1
   16a24:	555a      	strb	r2, [r3, r5]

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
   16a26:	4629      	mov	r1, r5
   16a28:	4630      	mov	r0, r6
   16a2a:	f007 f82b 	bl	1da84 <mayfly_pend>
   16a2e:	e01c      	b.n	16a6a <mayfly_enqueue+0x6e>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   16a30:	f011 fa97 	bl	27f62 <mayfly_prio_is_equal>
   16a34:	2800      	cmp	r0, #0
   16a36:	d0e6      	beq.n	16a06 <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
   16a38:	4629      	mov	r1, r5
   16a3a:	4630      	mov	r0, r6
   16a3c:	f007 f802 	bl	1da44 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   16a40:	2800      	cmp	r0, #0
   16a42:	d0e0      	beq.n	16a06 <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
   16a44:	2330      	movs	r3, #48	; 0x30
   16a46:	220c      	movs	r2, #12
   16a48:	436b      	muls	r3, r5
   16a4a:	fb02 3306 	mla	r3, r2, r6, r3
   16a4e:	4a12      	ldr	r2, [pc, #72]	; (16a98 <mayfly_enqueue+0x9c>)
   16a50:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
   16a52:	7a93      	ldrb	r3, [r2, #10]
   16a54:	7ad2      	ldrb	r2, [r2, #11]
   16a56:	1a9b      	subs	r3, r3, r2
   16a58:	bf18      	it	ne
   16a5a:	2301      	movne	r3, #1
   16a5c:	e7d4      	b.n	16a08 <mayfly_enqueue+0xc>
		m->_req = ack + 2;
   16a5e:	3202      	adds	r2, #2
   16a60:	b2d2      	uxtb	r2, r2
   16a62:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
   16a64:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
   16a68:	4798      	blx	r3

	return 0;
   16a6a:	2000      	movs	r0, #0
}
   16a6c:	bd70      	pop	{r4, r5, r6, pc}
	if (!chain) {
   16a6e:	2b00      	cmp	r3, #0
   16a70:	d0f8      	beq.n	16a64 <mayfly_enqueue+0x68>
	m->_req = ack + 1;
   16a72:	3201      	adds	r2, #1
   16a74:	b2d2      	uxtb	r2, r2
   16a76:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   16a78:	2304      	movs	r3, #4
   16a7a:	2230      	movs	r2, #48	; 0x30
   16a7c:	fb12 3205 	smlabb	r2, r2, r5, r3
   16a80:	230c      	movs	r3, #12
   16a82:	fb13 2306 	smlabb	r3, r3, r6, r2
   16a86:	4a04      	ldr	r2, [pc, #16]	; (16a98 <mayfly_enqueue+0x9c>)
   16a88:	6860      	ldr	r0, [r4, #4]
   16a8a:	441a      	add	r2, r3
   16a8c:	4621      	mov	r1, r4
   16a8e:	f010 f9ab 	bl	26de8 <memq_enqueue>
   16a92:	e7c5      	b.n	16a20 <mayfly_enqueue+0x24>
   16a94:	200038aa 	.word	0x200038aa
   16a98:	20002524 	.word	0x20002524

00016a9c <mayfly_run>:
		}
	}
}

void mayfly_run(uint8_t callee_id)
{
   16a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
   16aa0:	4b55      	ldr	r3, [pc, #340]	; (16bf8 <mayfly_run+0x15c>)
   16aa2:	5c1a      	ldrb	r2, [r3, r0]
{
   16aa4:	b089      	sub	sp, #36	; 0x24
   16aa6:	4604      	mov	r4, r0
	if (!mfp[callee_id]) {
   16aa8:	2a00      	cmp	r2, #0
   16aaa:	f000 809e 	beq.w	16bea <mayfly_run+0x14e>
		return;
	}
	mfp[callee_id] = 0U;
   16aae:	f04f 0800 	mov.w	r8, #0
   16ab2:	f803 8000 	strb.w	r8, [r3, r0]

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
   16ab6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   16aba:	011b      	lsls	r3, r3, #4
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   16abc:	4e4f      	ldr	r6, [pc, #316]	; (16bfc <mayfly_run+0x160>)
   16abe:	9304      	str	r3, [sp, #16]
   16ac0:	2504      	movs	r5, #4
   16ac2:	233c      	movs	r3, #60	; 0x3c
   16ac4:	fb13 5300 	smlabb	r3, r3, r0, r5
   16ac8:	18f3      	adds	r3, r6, r3
   16aca:	9303      	str	r3, [sp, #12]
	uint8_t disable = 0U;
   16acc:	46c3      	mov	fp, r8
	while (caller_id--) {
   16ace:	3d01      	subs	r5, #1
   16ad0:	b2ed      	uxtb	r5, r5
   16ad2:	2dff      	cmp	r5, #255	; 0xff
   16ad4:	d10f      	bne.n	16af6 <mayfly_run+0x5a>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
   16ad6:	f1bb 0f00 	cmp.w	fp, #0
   16ada:	f000 8086 	beq.w	16bea <mayfly_run+0x14e>
   16ade:	f1b8 0f00 	cmp.w	r8, #0
   16ae2:	f040 8082 	bne.w	16bea <mayfly_run+0x14e>
		mayfly_enable_cb(callee_id, callee_id, 0);
   16ae6:	4642      	mov	r2, r8
   16ae8:	4621      	mov	r1, r4
   16aea:	4620      	mov	r0, r4
	}
}
   16aec:	b009      	add	sp, #36	; 0x24
   16aee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		mayfly_enable_cb(callee_id, callee_id, 0);
   16af2:	f006 bf87 	b.w	1da04 <mayfly_enable_cb>
		struct mayfly *m = 0;
   16af6:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
   16af8:	f04f 090c 	mov.w	r9, #12
		struct mayfly *m = 0;
   16afc:	9307      	str	r3, [sp, #28]
		link = memq_peek(mft[callee_id][caller_id].head,
   16afe:	fb09 fa05 	mul.w	sl, r9, r5
   16b02:	2330      	movs	r3, #48	; 0x30
   16b04:	fb03 a304 	mla	r3, r3, r4, sl
   16b08:	18f1      	adds	r1, r6, r3
   16b0a:	58f0      	ldr	r0, [r6, r3]
   16b0c:	6849      	ldr	r1, [r1, #4]
   16b0e:	aa07      	add	r2, sp, #28
   16b10:	f010 f971 	bl	26df6 <memq_peek>
		memq_dequeue(mft[callee_id][caller_id].tail,
   16b14:	9b04      	ldr	r3, [sp, #16]
   16b16:	fb19 3905 	smlabb	r9, r9, r5, r3
   16b1a:	eb06 0309 	add.w	r3, r6, r9
		link = memq_peek(mft[callee_id][caller_id].head,
   16b1e:	4607      	mov	r7, r0
		memq_dequeue(mft[callee_id][caller_id].tail,
   16b20:	9302      	str	r3, [sp, #8]
		while (link) {
   16b22:	2f00      	cmp	r7, #0
   16b24:	d043      	beq.n	16bae <mayfly_run+0x112>
			state = (m->_req - m->_ack) & 0x03;
   16b26:	9b07      	ldr	r3, [sp, #28]
   16b28:	f893 9000 	ldrb.w	r9, [r3]
   16b2c:	785a      	ldrb	r2, [r3, #1]
   16b2e:	eba9 0902 	sub.w	r9, r9, r2
   16b32:	f009 0903 	and.w	r9, r9, #3
			if (state == 1U) {
   16b36:	f1b9 0f01 	cmp.w	r9, #1
   16b3a:	d104      	bne.n	16b46 <mayfly_run+0xaa>
				m->_ack--;
   16b3c:	3a01      	subs	r2, #1
   16b3e:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
   16b40:	e9d3 0202 	ldrd	r0, r2, [r3, #8]
   16b44:	4790      	blx	r2
			dequeue(callee_id, caller_id, link, m);
   16b46:	9b07      	ldr	r3, [sp, #28]
	if (((req - m->_ack) & 0x03) != 1U) {
   16b48:	9305      	str	r3, [sp, #20]
	req = m->_req;
   16b4a:	781a      	ldrb	r2, [r3, #0]
   16b4c:	b2d1      	uxtb	r1, r2
   16b4e:	9101      	str	r1, [sp, #4]
	if (((req - m->_ack) & 0x03) != 1U) {
   16b50:	7859      	ldrb	r1, [r3, #1]
   16b52:	1a52      	subs	r2, r2, r1
   16b54:	f002 0203 	and.w	r2, r2, #3
   16b58:	2a01      	cmp	r2, #1
   16b5a:	d019      	beq.n	16b90 <mayfly_run+0xf4>
		memq_dequeue(mft[callee_id][caller_id].tail,
   16b5c:	2030      	movs	r0, #48	; 0x30
   16b5e:	fb00 a004 	mla	r0, r0, r4, sl
   16b62:	4430      	add	r0, r6
   16b64:	9902      	ldr	r1, [sp, #8]
   16b66:	6840      	ldr	r0, [r0, #4]
   16b68:	2200      	movs	r2, #0
   16b6a:	f010 f94c 	bl	26e06 <memq_dequeue>
		m->_link = link;
   16b6e:	9b05      	ldr	r3, [sp, #20]
		m->_ack = req;
   16b70:	9a01      	ldr	r2, [sp, #4]
		ack = m->_ack;
   16b72:	7859      	ldrb	r1, [r3, #1]
		m->_ack = req;
   16b74:	705a      	strb	r2, [r3, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   16b76:	781a      	ldrb	r2, [r3, #0]
		m->_link = link;
   16b78:	605f      	str	r7, [r3, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
   16b7a:	1a52      	subs	r2, r2, r1
   16b7c:	f002 0203 	and.w	r2, r2, #3
   16b80:	2a01      	cmp	r2, #1
   16b82:	d105      	bne.n	16b90 <mayfly_run+0xf4>
			m->_ack = ack;
   16b84:	7059      	strb	r1, [r3, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   16b86:	9a03      	ldr	r2, [sp, #12]
   16b88:	4619      	mov	r1, r3
   16b8a:	4638      	mov	r0, r7
   16b8c:	f010 f92c 	bl	26de8 <memq_enqueue>
			link = memq_peek(mft[callee_id][caller_id].head,
   16b90:	2330      	movs	r3, #48	; 0x30
   16b92:	fb03 a304 	mla	r3, r3, r4, sl
   16b96:	18f1      	adds	r1, r6, r3
   16b98:	58f0      	ldr	r0, [r6, r3]
   16b9a:	6849      	ldr	r1, [r1, #4]
   16b9c:	aa07      	add	r2, sp, #28
   16b9e:	f010 f92a 	bl	26df6 <memq_peek>
			if (state == 1U) {
   16ba2:	f1b9 0f01 	cmp.w	r9, #1
			link = memq_peek(mft[callee_id][caller_id].head,
   16ba6:	4607      	mov	r7, r0
			if (state == 1U) {
   16ba8:	d1bb      	bne.n	16b22 <mayfly_run+0x86>
				if (caller_id || link) {
   16baa:	b9bd      	cbnz	r5, 16bdc <mayfly_run+0x140>
   16bac:	b9b0      	cbnz	r0, 16bdc <mayfly_run+0x140>
		if (mft[callee_id][caller_id].disable_req !=
   16bae:	2230      	movs	r2, #48	; 0x30
   16bb0:	210c      	movs	r1, #12
   16bb2:	4362      	muls	r2, r4
   16bb4:	fb01 2205 	mla	r2, r1, r5, r2
   16bb8:	4432      	add	r2, r6
   16bba:	7a93      	ldrb	r3, [r2, #10]
   16bbc:	7ad0      	ldrb	r0, [r2, #11]
   16bbe:	4298      	cmp	r0, r3
   16bc0:	d116      	bne.n	16bf0 <mayfly_run+0x154>
		if (mft[callee_id][caller_id].enable_req !=
   16bc2:	2330      	movs	r3, #48	; 0x30
   16bc4:	4363      	muls	r3, r4
   16bc6:	fb01 3305 	mla	r3, r1, r5, r3
   16bca:	4433      	add	r3, r6
   16bcc:	7a1a      	ldrb	r2, [r3, #8]
   16bce:	7a59      	ldrb	r1, [r3, #9]
   16bd0:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
   16bd2:	bf1c      	itt	ne
   16bd4:	725a      	strbne	r2, [r3, #9]
			enable = 1U;
   16bd6:	f04f 0801 	movne.w	r8, #1
   16bda:	e778      	b.n	16ace <mayfly_run+0x32>
					mfp[callee_id] = 1U;
   16bdc:	4b06      	ldr	r3, [pc, #24]	; (16bf8 <mayfly_run+0x15c>)
   16bde:	2201      	movs	r2, #1
   16be0:	551a      	strb	r2, [r3, r4]
					mayfly_pend(callee_id, callee_id);
   16be2:	4621      	mov	r1, r4
   16be4:	4620      	mov	r0, r4
   16be6:	f006 ff4d 	bl	1da84 <mayfly_pend>
}
   16bea:	b009      	add	sp, #36	; 0x24
   16bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mft[callee_id][caller_id].disable_ack =
   16bf0:	72d3      	strb	r3, [r2, #11]
			disable = 1U;
   16bf2:	f04f 0b01 	mov.w	fp, #1
   16bf6:	e7e4      	b.n	16bc2 <mayfly_run+0x126>
   16bf8:	200038aa 	.word	0x200038aa
   16bfc:	20002524 	.word	0x20002524

00016c00 <ticker_job>:
 * @param param Pointer to ticker instance
 *
 * @internal
 */
void ticker_job(void *param)
{
   16c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t flag_compare_update;

	DEBUG_TICKER_JOB(1);

	/* Defer job, as worker is running */
	if (instance->worker_trigger) {
   16c04:	7fc3      	ldrb	r3, [r0, #31]
{
   16c06:	b08b      	sub	sp, #44	; 0x2c
   16c08:	4604      	mov	r4, r0
	if (instance->worker_trigger) {
   16c0a:	2b00      	cmp	r3, #0
   16c0c:	f040 83bf 	bne.w	1738e <ticker_job+0x78e>
		DEBUG_TICKER_JOB(0);
		return;
	}

	/* Defer job, as job is already running */
	if (instance->job_guard) {
   16c10:	7f82      	ldrb	r2, [r0, #30]
   16c12:	b14a      	cbz	r2, 16c28 <ticker_job+0x28>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_JOB, 1,
   16c14:	6a45      	ldr	r5, [r0, #36]	; 0x24
   16c16:	4603      	mov	r3, r0
   16c18:	2201      	movs	r2, #1
   16c1a:	2104      	movs	r1, #4
	/* Permit worker to run */
	instance->job_guard = 0U;

	/* trigger worker if deferred */
	if (instance->worker_trigger) {
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   16c1c:	2004      	movs	r0, #4
   16c1e:	46ac      	mov	ip, r5
				   instance);
	}

	DEBUG_TICKER_JOB(0);
}
   16c20:	b00b      	add	sp, #44	; 0x2c
   16c22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   16c26:	4760      	bx	ip
	ticks_previous = instance->ticks_current;
   16c28:	6943      	ldr	r3, [r0, #20]
   16c2a:	9304      	str	r3, [sp, #16]
	instance->job_guard = 1U;
   16c2c:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   16c2e:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1U;
   16c30:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   16c32:	7ac0      	ldrb	r0, [r0, #11]
   16c34:	4298      	cmp	r0, r3
   16c36:	d057      	beq.n	16ce8 <ticker_job+0xe8>
	uint8_t idx = *ticks_elapsed_index + 1;
   16c38:	440b      	add	r3, r1
   16c3a:	b2db      	uxtb	r3, r3
		idx = 0U;
   16c3c:	2b02      	cmp	r3, #2
   16c3e:	bf08      	it	eq
   16c40:	2300      	moveq	r3, #0
	*ticks_elapsed_index = idx;
   16c42:	72a3      	strb	r3, [r4, #10]
		ticks_elapsed =
   16c44:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		flag_elapsed = 1U;
   16c48:	9101      	str	r1, [sp, #4]
		ticks_elapsed =
   16c4a:	68db      	ldr	r3, [r3, #12]
   16c4c:	9300      	str	r3, [sp, #0]
		instance->ticks_current += ticks_elapsed;
   16c4e:	9a00      	ldr	r2, [sp, #0]
   16c50:	9b04      	ldr	r3, [sp, #16]
   16c52:	4413      	add	r3, r2
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   16c54:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   16c58:	6163      	str	r3, [r4, #20]
	ticker_id_old_head = instance->ticker_id_head;
   16c5a:	7f63      	ldrb	r3, [r4, #29]
   16c5c:	9303      	str	r3, [sp, #12]
	node = &instance->nodes[0];
   16c5e:	6823      	ldr	r3, [r4, #0]
   16c60:	9302      	str	r3, [sp, #8]
	users = &instance->users[0];
   16c62:	6863      	ldr	r3, [r4, #4]
   16c64:	9308      	str	r3, [sp, #32]
	while (count_user--) {
   16c66:	7a63      	ldrb	r3, [r4, #9]
   16c68:	3b01      	subs	r3, #1
   16c6a:	fa5f fb83 	uxtb.w	fp, r3
	pending = 0U;
   16c6e:	2300      	movs	r3, #0
   16c70:	9305      	str	r3, [sp, #20]
	insert_head = TICKER_NULL;
   16c72:	f04f 09ff 	mov.w	r9, #255	; 0xff
	while (count_user--) {
   16c76:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   16c7a:	d138      	bne.n	16cee <ticker_job+0xee>
	if (instance->ticker_id_head != ticker_id_old_head) {
   16c7c:	7f63      	ldrb	r3, [r4, #29]
		flag_compare_update = 1U;
   16c7e:	9a03      	ldr	r2, [sp, #12]
   16c80:	1a9b      	subs	r3, r3, r2
   16c82:	bf18      	it	ne
   16c84:	2301      	movne	r3, #1
   16c86:	9302      	str	r3, [sp, #8]
	if (flag_elapsed) {
   16c88:	9b01      	ldr	r3, [sp, #4]
   16c8a:	2b00      	cmp	r3, #0
   16c8c:	f000 8225 	beq.w	170da <ticker_job+0x4da>
	ticks_now = cntr_cnt_get();
   16c90:	f006 fb10 	bl	1d2b4 <cntr_cnt_get>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   16c94:	9b04      	ldr	r3, [sp, #16]
	while (instance->ticker_id_head != TICKER_NULL) {
   16c96:	9f00      	ldr	r7, [sp, #0]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   16c98:	eba0 0b03 	sub.w	fp, r0, r3
	node = &instance->nodes[0];
   16c9c:	6823      	ldr	r3, [r4, #0]
   16c9e:	9306      	str	r3, [sp, #24]
	ticks_expired = 0U;
   16ca0:	2300      	movs	r3, #0
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   16ca2:	f02b 4b7f 	bic.w	fp, fp, #4278190080	; 0xff000000
	ticks_expired = 0U;
   16ca6:	9307      	str	r3, [sp, #28]
	while (instance->ticker_id_head != TICKER_NULL) {
   16ca8:	7f66      	ldrb	r6, [r4, #29]
   16caa:	2eff      	cmp	r6, #255	; 0xff
   16cac:	d00d      	beq.n	16cca <ticker_job+0xca>
		ticker = &node[id_expired];
   16cae:	b235      	sxth	r5, r6
   16cb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   16cb4:	012b      	lsls	r3, r5, #4
   16cb6:	9308      	str	r3, [sp, #32]
   16cb8:	9b06      	ldr	r3, [sp, #24]
   16cba:	eb03 1505 	add.w	r5, r3, r5, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
   16cbe:	68ab      	ldr	r3, [r5, #8]
		if (ticks_elapsed < ticks_to_expire) {
   16cc0:	42bb      	cmp	r3, r7
   16cc2:	f240 80c8 	bls.w	16e56 <ticker_job+0x256>
			ticker->ticks_to_expire -= ticks_elapsed;
   16cc6:	1bdb      	subs	r3, r3, r7
   16cc8:	60ab      	str	r3, [r5, #8]
			flag_compare_update = 1U;
   16cca:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   16cce:	9903      	ldr	r1, [sp, #12]
		ticker_job_list_insert(instance, insert_head);
   16cd0:	4620      	mov	r0, r4
			flag_compare_update = 1U;
   16cd2:	42b1      	cmp	r1, r6
   16cd4:	bf18      	it	ne
   16cd6:	4613      	movne	r3, r2
		ticker_job_list_insert(instance, insert_head);
   16cd8:	4649      	mov	r1, r9
			flag_compare_update = 1U;
   16cda:	9302      	str	r3, [sp, #8]
		ticker_job_list_insert(instance, insert_head);
   16cdc:	f010 f908 	bl	26ef0 <ticker_job_list_insert>
	nodes = &instance->nodes[0];
   16ce0:	6825      	ldr	r5, [r4, #0]
	uint8_t  rescheduled = 0U;
   16ce2:	2300      	movs	r3, #0
		ticker_id_head = instance->ticker_id_head;
   16ce4:	7f67      	ldrb	r7, [r4, #29]
		while (ticker_id_head != TICKER_NULL) {
   16ce6:	e16c      	b.n	16fc2 <ticker_job+0x3c2>
		flag_elapsed = 0U;
   16ce8:	9201      	str	r2, [sp, #4]
		ticks_elapsed = 0U;
   16cea:	9200      	str	r2, [sp, #0]
   16cec:	e7b5      	b.n	16c5a <ticker_job+0x5a>
		user = &users[count_user];
   16cee:	9b08      	ldr	r3, [sp, #32]
   16cf0:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
		user_ops = &user->user_op[0];
   16cf4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   16cf8:	9306      	str	r3, [sp, #24]
		while (user->middle != user->last) {
   16cfa:	f898 1003 	ldrb.w	r1, [r8, #3]
			user_op = &user_ops[user->middle];
   16cfe:	2034      	movs	r0, #52	; 0x34
		while (user->middle != user->last) {
   16d00:	f898 7002 	ldrb.w	r7, [r8, #2]
   16d04:	428f      	cmp	r7, r1
   16d06:	f000 82dc 	beq.w	172c2 <ticker_job+0x6c2>
			user_op = &user_ops[user->middle];
   16d0a:	9b06      	ldr	r3, [sp, #24]
			if (middle == user->count_user_op) {
   16d0c:	f898 5000 	ldrb.w	r5, [r8]
			user_op = &user_ops[user->middle];
   16d10:	fb17 f200 	smulbb	r2, r7, r0
   16d14:	189e      	adds	r6, r3, r2
			middle = user->middle + 1;
   16d16:	1c7b      	adds	r3, r7, #1
   16d18:	b2db      	uxtb	r3, r3
				middle = 0U;
   16d1a:	429d      	cmp	r5, r3
   16d1c:	bf08      	it	eq
   16d1e:	2300      	moveq	r3, #0
			user->middle = middle;
   16d20:	f888 3002 	strb.w	r3, [r8, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   16d24:	9b06      	ldr	r3, [sp, #24]
   16d26:	5c9a      	ldrb	r2, [r3, r2]
   16d28:	2a04      	cmp	r2, #4
   16d2a:	d9e9      	bls.n	16d00 <ticker_job+0x100>
			ticker = &node[user_op->id];
   16d2c:	7871      	ldrb	r1, [r6, #1]
   16d2e:	eb01 0541 	add.w	r5, r1, r1, lsl #1
   16d32:	012b      	lsls	r3, r5, #4
   16d34:	9309      	str	r3, [sp, #36]	; 0x24
   16d36:	9b02      	ldr	r3, [sp, #8]
   16d38:	eb03 1505 	add.w	r5, r3, r5, lsl #4
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   16d3c:	2a08      	cmp	r2, #8
			state = (ticker->req - ticker->ack) & 0xff;
   16d3e:	786b      	ldrb	r3, [r5, #1]
   16d40:	78a8      	ldrb	r0, [r5, #2]
   16d42:	eba3 0300 	sub.w	r3, r3, r0
   16d46:	b2db      	uxtb	r3, r3
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   16d48:	d818      	bhi.n	16d7c <ticker_job+0x17c>
   16d4a:	b1bb      	cbz	r3, 16d7c <ticker_job+0x17c>
			    (state == 0U) ||
   16d4c:	2a05      	cmp	r2, #5
   16d4e:	f040 82ab 	bne.w	172a8 <ticker_job+0x6a8>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
   16d52:	6872      	ldr	r2, [r6, #4]
   16d54:	2a00      	cmp	r2, #0
   16d56:	f040 82b9 	bne.w	172cc <ticker_job+0x6cc>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
   16d5a:	68b2      	ldr	r2, [r6, #8]
   16d5c:	2a00      	cmp	r2, #0
   16d5e:	f040 82b5 	bne.w	172cc <ticker_job+0x6cc>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
   16d62:	68f2      	ldr	r2, [r6, #12]
   16d64:	2a00      	cmp	r2, #0
   16d66:	f040 82b1 	bne.w	172cc <ticker_job+0x6cc>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
   16d6a:	6932      	ldr	r2, [r6, #16]
   16d6c:	2a00      	cmp	r2, #0
   16d6e:	f040 82ad 	bne.w	172cc <ticker_job+0x6cc>
			     (user_op->params.update.lazy == 0U) &&
   16d72:	6972      	ldr	r2, [r6, #20]
   16d74:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   16d78:	f040 82a8 	bne.w	172cc <ticker_job+0x6cc>
				ticker_job_op_cb(user_op,
   16d7c:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
   16d7e:	4630      	mov	r0, r6
   16d80:	f010 f8ac 	bl	26edc <ticker_job_op_cb>
}
   16d84:	e7b9      	b.n	16cfa <ticker_job+0xfa>
	if ((ticker->remainder_current >= BIT(31)) ||
   16d86:	6a69      	ldr	r1, [r5, #36]	; 0x24
   16d88:	4f92      	ldr	r7, [pc, #584]	; (16fd4 <ticker_job+0x3d4>)
   16d8a:	f8df a24c 	ldr.w	sl, [pc, #588]	; 16fd8 <ticker_job+0x3d8>
   16d8e:	19cf      	adds	r7, r1, r7
   16d90:	4557      	cmp	r7, sl
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   16d92:	bf81      	itttt	hi
   16d94:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
   16d98:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
   16d9c:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
   16da0:	6269      	strhi	r1, [r5, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
   16da2:	e9d5 1708 	ldrd	r1, r7, [r5, #32]
		decrement++;
   16da6:	bf8c      	ite	hi
   16da8:	f04f 0a01 	movhi.w	sl, #1
	uint8_t decrement = 0U;
   16dac:	f04f 0a00 	movls.w	sl, #0
	ticker->remainder_current -= ticker->remainder_periodic;
   16db0:	1a79      	subs	r1, r7, r1
			ticks_to_expire -= ticker->ticks_periodic +
   16db2:	4482      	add	sl, r0
			ticker->lazy_current--;
   16db4:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
   16db8:	6269      	str	r1, [r5, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
   16dba:	eba3 030a 	sub.w	r3, r3, sl
			ticker->lazy_current--;
   16dbe:	f8a5 e01e 	strh.w	lr, [r5, #30]
   16dc2:	e2a9      	b.n	17318 <ticker_job+0x718>
	ticker->remainder_current += ticker->remainder_periodic;
   16dc4:	e9d5 1708 	ldrd	r1, r7, [r5, #32]
   16dc8:	4439      	add	r1, r7
	if ((ticker->remainder_current < BIT(31)) &&
   16dca:	4f82      	ldr	r7, [pc, #520]	; (16fd4 <ticker_job+0x3d4>)
   16dcc:	f8df a208 	ldr.w	sl, [pc, #520]	; 16fd8 <ticker_job+0x3d8>
   16dd0:	19cf      	adds	r7, r1, r7
   16dd2:	4557      	cmp	r7, sl
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   16dd4:	bf9d      	ittte	ls
   16dd6:	f1a1 71e8 	subls.w	r1, r1, #30408704	; 0x1d00000
   16dda:	f5a1 31d4 	subls.w	r1, r1, #108544	; 0x1a800
   16dde:	f5a1 71a5 	subls.w	r1, r1, #330	; 0x14a
	ticker->remainder_current += ticker->remainder_periodic;
   16de2:	6269      	strhi	r1, [r5, #36]	; 0x24
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   16de4:	bf96      	itet	ls
   16de6:	6269      	strls	r1, [r5, #36]	; 0x24
	return 0;
   16de8:	2100      	movhi	r1, #0
		return 1;
   16dea:	2101      	movls	r1, #1
			ticks_to_expire += ticker->ticks_periodic +
   16dec:	4401      	add	r1, r0
			ticker->lazy_current++;
   16dee:	f10e 0e01 	add.w	lr, lr, #1
			ticks_to_expire += ticker->ticks_periodic +
   16df2:	440b      	add	r3, r1
			ticker->lazy_current++;
   16df4:	f8a5 e01e 	strh.w	lr, [r5, #30]
   16df8:	e295      	b.n	17326 <ticker_job+0x726>
		if (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS) {
   16dfa:	2a06      	cmp	r2, #6
   16dfc:	d005      	beq.n	16e0a <ticker_job+0x20a>
			ticker->ticks_to_expire = ticker_dequeue(instance,
   16dfe:	4620      	mov	r0, r4
   16e00:	f010 f823 	bl	26e4a <ticker_dequeue>
			ticker->req = ticker->ack;
   16e04:	78ab      	ldrb	r3, [r5, #2]
			ticker->ticks_to_expire = ticker_dequeue(instance,
   16e06:	60a8      	str	r0, [r5, #8]
			ticker->req = ticker->ack;
   16e08:	706b      	strb	r3, [r5, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   16e0a:	7f22      	ldrb	r2, [r4, #28]
   16e0c:	7873      	ldrb	r3, [r6, #1]
   16e0e:	429a      	cmp	r2, r3
   16e10:	f040 82bb 	bne.w	1738a <ticker_job+0x78a>
			instance->ticker_id_slot_previous = TICKER_NULL;
   16e14:	23ff      	movs	r3, #255	; 0xff
   16e16:	7723      	strb	r3, [r4, #28]
			if ((user_op->op == TICKER_USER_OP_TYPE_YIELD_ABS) ||
   16e18:	7833      	ldrb	r3, [r6, #0]
   16e1a:	2b06      	cmp	r3, #6
   16e1c:	d001      	beq.n	16e22 <ticker_job+0x222>
   16e1e:	2b08      	cmp	r3, #8
   16e20:	d10d      	bne.n	16e3e <ticker_job+0x23e>
				ticks_at_yield =
   16e22:	6870      	ldr	r0, [r6, #4]
			ticks_current = instance->ticks_current;
   16e24:	6963      	ldr	r3, [r4, #20]
			if (!((ticks_at_yield - ticks_current) &
   16e26:	1ac2      	subs	r2, r0, r3
   16e28:	0211      	lsls	r1, r2, #8
   16e2a:	d40b      	bmi.n	16e44 <ticker_job+0x244>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   16e2c:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
   16e30:	9a00      	ldr	r2, [sp, #0]
   16e32:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
   16e34:	69a2      	ldr	r2, [r4, #24]
   16e36:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
   16e38:	bf88      	it	hi
   16e3a:	61a3      	strhi	r3, [r4, #24]
   16e3c:	e2a5      	b.n	1738a <ticker_job+0x78a>
				ticks_at_yield = cntr_cnt_get();
   16e3e:	f006 fa39 	bl	1d2b4 <cntr_cnt_get>
   16e42:	e7ef      	b.n	16e24 <ticker_job+0x224>
				if (ticks_elapsed > ticks_used) {
   16e44:	9a00      	ldr	r2, [sp, #0]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   16e46:	1a1b      	subs	r3, r3, r0
   16e48:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
   16e4c:	429a      	cmp	r2, r3
					ticks_used = ticks_elapsed -
   16e4e:	bf8c      	ite	hi
   16e50:	1ad3      	subhi	r3, r2, r3
					ticks_used = 0;
   16e52:	2300      	movls	r3, #0
   16e54:	e7ee      	b.n	16e34 <ticker_job+0x234>
		ticks_expired += ticks_to_expire;
   16e56:	9a07      	ldr	r2, [sp, #28]
		skip_collision = (ticker->lazy_current != 0U);
   16e58:	f8b5 c01e 	ldrh.w	ip, [r5, #30]
		ticks_expired += ticks_to_expire;
   16e5c:	441a      	add	r2, r3
   16e5e:	9207      	str	r2, [sp, #28]
		if (instance->ticks_slot_previous > ticks_to_expire) {
   16e60:	69a2      	ldr	r2, [r4, #24]
   16e62:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
   16e64:	eba7 0703 	sub.w	r7, r7, r3
		ticks_latency -= ticks_to_expire;
   16e68:	ebab 0b03 	sub.w	fp, fp, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
   16e6c:	bf25      	ittet	cs
   16e6e:	23ff      	movcs	r3, #255	; 0xff
   16e70:	7723      	strbcs	r3, [r4, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
   16e72:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
   16e74:	2300      	movcs	r3, #0
   16e76:	61a3      	str	r3, [r4, #24]
		state = (ticker->req - ticker->ack) & 0xff;
   16e78:	78a9      	ldrb	r1, [r5, #2]
   16e7a:	786b      	ldrb	r3, [r5, #1]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   16e7c:	69a8      	ldr	r0, [r5, #24]
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   16e7e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
		state = (ticker->req - ticker->ack) & 0xff;
   16e80:	1a5b      	subs	r3, r3, r1
   16e82:	b2db      	uxtb	r3, r3
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   16e84:	b160      	cbz	r0, 16ea0 <ticker_job+0x2a0>
   16e86:	2b02      	cmp	r3, #2
   16e88:	d10a      	bne.n	16ea0 <ticker_job+0x2a0>
   16e8a:	f1bc 0f00 	cmp.w	ip, #0
   16e8e:	d107      	bne.n	16ea0 <ticker_job+0x2a0>
   16e90:	b122      	cbz	r2, 16e9c <ticker_job+0x29c>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   16e92:	f892 e008 	ldrb.w	lr, [r2, #8]
   16e96:	f1be 0f01 	cmp.w	lr, #1
   16e9a:	d001      	beq.n	16ea0 <ticker_job+0x2a0>
			instance->ticker_id_slot_previous = id_expired;
   16e9c:	7726      	strb	r6, [r4, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
   16e9e:	61a0      	str	r0, [r4, #24]
		ticker->ticks_to_expire = 0U;
   16ea0:	2000      	movs	r0, #0
   16ea2:	60a8      	str	r0, [r5, #8]
		instance->ticker_id_head = ticker->next;
   16ea4:	f8dd e020 	ldr.w	lr, [sp, #32]
   16ea8:	9806      	ldr	r0, [sp, #24]
   16eaa:	f810 000e 	ldrb.w	r0, [r0, lr]
   16eae:	7760      	strb	r0, [r4, #29]
		if ((ticker->ticks_periodic != 0U) ||
   16eb0:	f8d5 e004 	ldr.w	lr, [r5, #4]
   16eb4:	f1be 0f00 	cmp.w	lr, #0
   16eb8:	d119      	bne.n	16eee <ticker_job+0x2ee>
   16eba:	2a00      	cmp	r2, #0
   16ebc:	d064      	beq.n	16f88 <ticker_job+0x388>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
   16ebe:	7a10      	ldrb	r0, [r2, #8]
   16ec0:	2801      	cmp	r0, #1
   16ec2:	d161      	bne.n	16f88 <ticker_job+0x388>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   16ec4:	7a13      	ldrb	r3, [r2, #8]
   16ec6:	2b01      	cmp	r3, #1
   16ec8:	d113      	bne.n	16ef2 <ticker_job+0x2f2>
				ticker->ticks_to_expire = ticks_elapsed;
   16eca:	60af      	str	r7, [r5, #8]
				ticker->req = ticker->ack;
   16ecc:	7069      	strb	r1, [r5, #1]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   16ece:	9b04      	ldr	r3, [sp, #16]
   16ed0:	9a07      	ldr	r2, [sp, #28]
   16ed2:	6961      	ldr	r1, [r4, #20]
   16ed4:	189a      	adds	r2, r3, r2
   16ed6:	4628      	mov	r0, r5
   16ed8:	f00f ffe2 	bl	26ea0 <ticks_to_expire_prep>
			ticker->next = *insert_head;
   16edc:	9b06      	ldr	r3, [sp, #24]
   16ede:	9a08      	ldr	r2, [sp, #32]
   16ee0:	f803 9002 	strb.w	r9, [r3, r2]
			ticker->req++;
   16ee4:	786b      	ldrb	r3, [r5, #1]
   16ee6:	3301      	adds	r3, #1
   16ee8:	706b      	strb	r3, [r5, #1]
			ticker->req = ticker->ack;
   16eea:	46b1      	mov	r9, r6
   16eec:	e6dc      	b.n	16ca8 <ticker_job+0xa8>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   16eee:	2a00      	cmp	r2, #0
   16ef0:	d1e8      	bne.n	16ec4 <ticker_job+0x2c4>
				if (!ticker->lazy_current) {
   16ef2:	f1bc 0f00 	cmp.w	ip, #0
   16ef6:	d125      	bne.n	16f44 <ticker_job+0x344>
					lazy_periodic = ticker->lazy_periodic;
   16ef8:	8bab      	ldrh	r3, [r5, #28]
				while (count--) {
   16efa:	4698      	mov	r8, r3
				ticks_to_expire = 0U;
   16efc:	2000      	movs	r0, #0
	ticker->remainder_current += ticker->remainder_periodic;
   16efe:	e9d5 1208 	ldrd	r1, r2, [r5, #32]
   16f02:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
   16f04:	4933      	ldr	r1, [pc, #204]	; (16fd4 <ticker_job+0x3d4>)
   16f06:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 16fd8 <ticker_job+0x3d8>
   16f0a:	1851      	adds	r1, r2, r1
   16f0c:	4551      	cmp	r1, sl
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   16f0e:	bf9f      	itttt	ls
   16f10:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
   16f14:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
   16f18:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
   16f1c:	626a      	strls	r2, [r5, #36]	; 0x24
		return 1;
   16f1e:	bf92      	itee	ls
   16f20:	9a01      	ldrls	r2, [sp, #4]
	ticker->remainder_current += ticker->remainder_periodic;
   16f22:	626a      	strhi	r2, [r5, #36]	; 0x24
	return 0;
   16f24:	2200      	movhi	r2, #0
					ticks_to_expire +=
   16f26:	4472      	add	r2, lr
				while (count--) {
   16f28:	f1b8 0801 	subs.w	r8, r8, #1
					ticks_to_expire +=
   16f2c:	4410      	add	r0, r2
				while (count--) {
   16f2e:	d2e6      	bcs.n	16efe <ticker_job+0x2fe>
				} else if (!ticker->must_expire) {
   16f30:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
   16f34:	b332      	cbz	r2, 16f84 <ticker_job+0x384>
				lazy = 0U;
   16f36:	2200      	movs	r2, #0
				ticker->lazy_current += (lazy_periodic + lazy);
   16f38:	4413      	add	r3, r2
   16f3a:	449c      	add	ip, r3
				ticker->ticks_to_expire = ticks_to_expire;
   16f3c:	60a8      	str	r0, [r5, #8]
				ticker->lazy_current += (lazy_periodic + lazy);
   16f3e:	f8a5 c01e 	strh.w	ip, [r5, #30]
   16f42:	e7c4      	b.n	16ece <ticker_job+0x2ce>
					ticker->req = ticker->ack;
   16f44:	7069      	strb	r1, [r5, #1]
					lazy_periodic = 0U;
   16f46:	2300      	movs	r3, #0
   16f48:	e7d7      	b.n	16efa <ticker_job+0x2fa>
	ticker->remainder_current += ticker->remainder_periodic;
   16f4a:	e9d5 1208 	ldrd	r1, r2, [r5, #32]
   16f4e:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
   16f50:	4920      	ldr	r1, [pc, #128]	; (16fd4 <ticker_job+0x3d4>)
   16f52:	f8df a084 	ldr.w	sl, [pc, #132]	; 16fd8 <ticker_job+0x3d8>
   16f56:	1851      	adds	r1, r2, r1
   16f58:	4551      	cmp	r1, sl
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   16f5a:	bf9f      	itttt	ls
   16f5c:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
   16f60:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
   16f64:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
   16f68:	626a      	strls	r2, [r5, #36]	; 0x24
		return 1;
   16f6a:	bf92      	itee	ls
   16f6c:	9a01      	ldrls	r2, [sp, #4]
	ticker->remainder_current += ticker->remainder_periodic;
   16f6e:	626a      	strhi	r2, [r5, #36]	; 0x24
	return 0;
   16f70:	2200      	movhi	r2, #0
						ticks_to_expire +=
   16f72:	4472      	add	r2, lr
   16f74:	4410      	add	r0, r2
						lazy++;
   16f76:	f108 0801 	add.w	r8, r8, #1
					while (ticks_to_expire <
   16f7a:	4583      	cmp	fp, r0
   16f7c:	fa1f f288 	uxth.w	r2, r8
   16f80:	d8e3      	bhi.n	16f4a <ticker_job+0x34a>
   16f82:	e7d9      	b.n	16f38 <ticker_job+0x338>
   16f84:	4690      	mov	r8, r2
   16f86:	e7f8      	b.n	16f7a <ticker_job+0x37a>
			if (state && ((state == 1U) || skip_collision) &&
   16f88:	b14b      	cbz	r3, 16f9e <ticker_job+0x39e>
   16f8a:	2b01      	cmp	r3, #1
   16f8c:	d002      	beq.n	16f94 <ticker_job+0x394>
   16f8e:	f1bc 0f00 	cmp.w	ip, #0
   16f92:	d004      	beq.n	16f9e <ticker_job+0x39e>
			    ticker->fp_op_func) {
   16f94:	6a2b      	ldr	r3, [r5, #32]
			if (state && ((state == 1U) || skip_collision) &&
   16f96:	b113      	cbz	r3, 16f9e <ticker_job+0x39e>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
   16f98:	6a69      	ldr	r1, [r5, #36]	; 0x24
   16f9a:	2001      	movs	r0, #1
   16f9c:	4798      	blx	r3
			ticker->req = ticker->ack;
   16f9e:	78ab      	ldrb	r3, [r5, #2]
   16fa0:	706b      	strb	r3, [r5, #1]
   16fa2:	464e      	mov	r6, r9
   16fa4:	e7a1      	b.n	16eea <ticker_job+0x2ea>
			ticker = &nodes[ticker_id_head];
   16fa6:	eb07 0247 	add.w	r2, r7, r7, lsl #1
   16faa:	0111      	lsls	r1, r2, #4
   16fac:	eb05 1202 	add.w	r2, r5, r2, lsl #4
			ext_data = ticker->ext_data;
   16fb0:	f815 e001 	ldrb.w	lr, [r5, r1]
   16fb4:	6a96      	ldr	r6, [r2, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
   16fb6:	b11e      	cbz	r6, 16fc0 <ticker_job+0x3c0>
   16fb8:	7a31      	ldrb	r1, [r6, #8]
   16fba:	2901      	cmp	r1, #1
   16fbc:	f000 816e 	beq.w	1729c <ticker_job+0x69c>
			ticker_id_head = ticker->next;
   16fc0:	4677      	mov	r7, lr
		while (ticker_id_head != TICKER_NULL) {
   16fc2:	2fff      	cmp	r7, #255	; 0xff
   16fc4:	d1ef      	bne.n	16fa6 <ticker_job+0x3a6>
			flag_compare_update = 1U;
   16fc6:	2b00      	cmp	r3, #0
   16fc8:	9a02      	ldr	r2, [sp, #8]
   16fca:	bf18      	it	ne
   16fcc:	461a      	movne	r2, r3
   16fce:	9202      	str	r2, [sp, #8]
   16fd0:	e087      	b.n	170e2 <ticker_job+0x4e2>
   16fd2:	bf00      	nop
   16fd4:	ff172b5a 	.word	0xff172b5a
   16fd8:	7f172b59 	.word	0x7f172b59
			instance->ticks_slot_previous > ticks_elapsed) {
   16fdc:	69a0      	ldr	r0, [r4, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   16fde:	9b00      	ldr	r3, [sp, #0]
   16fe0:	4283      	cmp	r3, r0
   16fe2:	f080 815f 	bcs.w	172a4 <ticker_job+0x6a4>
			window_start_ticks = instance->ticks_slot_previous -
   16fe6:	1ac3      	subs	r3, r0, r3
		window_start_ticks = 0U;
   16fe8:	9301      	str	r3, [sp, #4]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   16fea:	e9d6 3a00 	ldrd	r3, sl, [r6]
   16fee:	459a      	cmp	sl, r3
   16ff0:	d25b      	bcs.n	170aa <ticker_job+0x4aa>
			ticks_slot_window = ext_data->ticks_slot_window -
   16ff2:	f04f 0c00 	mov.w	ip, #0
   16ff6:	eba3 0b0a 	sub.w	fp, r3, sl
		ticker_id_iter = nodes[ticker_id_head].next;
   16ffa:	4671      	mov	r1, lr
			ticks_slot_window = ext_data->ticks_slot_window -
   16ffc:	4663      	mov	r3, ip
		while (ticker_id_iter != TICKER_NULL &&
   16ffe:	29ff      	cmp	r1, #255	; 0xff
   17000:	d006      	beq.n	17010 <ticker_job+0x410>
		       ticks_start_offset + ticker->ticks_slot <=
   17002:	f8d2 8018 	ldr.w	r8, [r2, #24]
   17006:	eb0c 0008 	add.w	r0, ip, r8
		while (ticker_id_iter != TICKER_NULL &&
   1700a:	4583      	cmp	fp, r0
		       ticks_start_offset + ticker->ticks_slot <=
   1700c:	9006      	str	r0, [sp, #24]
		while (ticker_id_iter != TICKER_NULL &&
   1700e:	d21c      	bcs.n	1704a <ticker_job+0x44a>
		ticker->ext_data->ticks_drift += ticks_to_expire -
   17010:	6891      	ldr	r1, [r2, #8]
   17012:	ebaa 0101 	sub.w	r1, sl, r1
   17016:	4419      	add	r1, r3
   17018:	6071      	str	r1, [r6, #4]
		ticker->ticks_to_expire = ticks_to_expire;
   1701a:	6093      	str	r3, [r2, #8]
		ticker_id_iter = nodes[ticker_id_head].next;
   1701c:	4671      	mov	r1, lr
		ticker_id_prev = TICKER_NULL;
   1701e:	23ff      	movs	r3, #255	; 0xff
		while (ticker_id_iter != TICKER_NULL) {
   17020:	29ff      	cmp	r1, #255	; 0xff
   17022:	d047      	beq.n	170b4 <ticker_job+0x4b4>
			node = &nodes[ticker_id_iter];
   17024:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   17028:	ea4f 1900 	mov.w	r9, r0, lsl #4
   1702c:	eb05 1000 	add.w	r0, r5, r0, lsl #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
   17030:	f8d2 8008 	ldr.w	r8, [r2, #8]
   17034:	f8d0 c008 	ldr.w	ip, [r0, #8]
   17038:	45e0      	cmp	r8, ip
   1703a:	d938      	bls.n	170ae <ticker_job+0x4ae>
				ticker->ticks_to_expire -=
   1703c:	eba8 030c 	sub.w	r3, r8, ip
   17040:	6093      	str	r3, [r2, #8]
			ticker_id_iter = node->next;
   17042:	460b      	mov	r3, r1
   17044:	f815 1009 	ldrb.w	r1, [r5, r9]
   17048:	e7ea      	b.n	17020 <ticker_job+0x420>
			node = &nodes[ticker_id_iter];
   1704a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1704e:	0108      	lsls	r0, r1, #4
   17050:	eb05 1101 	add.w	r1, r5, r1, lsl #4
   17054:	9004      	str	r0, [sp, #16]
			if (node->ext_data &&
   17056:	f8d1 9028 	ldr.w	r9, [r1, #40]	; 0x28
   1705a:	f1b9 0f00 	cmp.w	r9, #0
   1705e:	d007      	beq.n	17070 <ticker_job+0x470>
   17060:	f899 9008 	ldrb.w	r9, [r9, #8]
   17064:	f1b9 0f01 	cmp.w	r9, #1
   17068:	d102      	bne.n	17070 <ticker_job+0x470>
				ticker_id_iter = node->next;
   1706a:	4601      	mov	r1, r0
			ticker_id_iter = node->next;
   1706c:	5c69      	ldrb	r1, [r5, r1]
   1706e:	e7c6      	b.n	16ffe <ticker_job+0x3fe>
			if (node->ticks_to_expire >
   17070:	f8d1 9008 	ldr.w	r9, [r1, #8]
   17074:	f1b9 0f04 	cmp.w	r9, #4
   17078:	d90e      	bls.n	17098 <ticker_job+0x498>
					MIN(ticks_slot_window,
   1707a:	f1ac 0304 	sub.w	r3, ip, #4
   1707e:	444b      	add	r3, r9
				window_end_ticks =
   17080:	455b      	cmp	r3, fp
			if (window_end_ticks > ticks_start_offset +
   17082:	9806      	ldr	r0, [sp, #24]
				window_end_ticks =
   17084:	bf28      	it	cs
   17086:	465b      	movcs	r3, fp
			if (window_end_ticks > ticks_start_offset +
   17088:	4283      	cmp	r3, r0
   1708a:	d905      	bls.n	17098 <ticker_job+0x498>
			if (ticks_to_expire != 0U &&
   1708c:	ebb3 0308 	subs.w	r3, r3, r8
   17090:	d002      	beq.n	17098 <ticker_job+0x498>
   17092:	9801      	ldr	r0, [sp, #4]
   17094:	4283      	cmp	r3, r0
   17096:	d2bb      	bcs.n	17010 <ticker_job+0x410>
			window_start_ticks  = node->ticks_to_expire +
   17098:	6988      	ldr	r0, [r1, #24]
			ticker_id_iter = node->next;
   1709a:	9904      	ldr	r1, [sp, #16]
			window_start_ticks  = node->ticks_to_expire +
   1709c:	eb00 0309 	add.w	r3, r0, r9
   170a0:	9301      	str	r3, [sp, #4]
			ticks_start_offset += node->ticks_to_expire;
   170a2:	44cc      	add	ip, r9
			ticks_to_expire     = ticks_slot_window -
   170a4:	ebab 0308 	sub.w	r3, fp, r8
			ticker_id_iter = node->next;
   170a8:	e7e0      	b.n	1706c <ticker_job+0x46c>
   170aa:	2300      	movs	r3, #0
   170ac:	e7b0      	b.n	17010 <ticker_job+0x410>
				node->ticks_to_expire -=
   170ae:	ebac 0108 	sub.w	r1, ip, r8
   170b2:	6081      	str	r1, [r0, #8]
		if (ticker_id_prev != TICKER_NULL) {
   170b4:	2bff      	cmp	r3, #255	; 0xff
   170b6:	d008      	beq.n	170ca <ticker_job+0x4ca>
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   170b8:	b21b      	sxth	r3, r3
   170ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   170be:	011b      	lsls	r3, r3, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
   170c0:	f884 e01d 	strb.w	lr, [r4, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   170c4:	5ce9      	ldrb	r1, [r5, r3]
   170c6:	7011      	strb	r1, [r2, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
   170c8:	54ef      	strb	r7, [r5, r3]
		ticker->lazy_current--;
   170ca:	8bd3      	ldrh	r3, [r2, #30]
   170cc:	3b01      	subs	r3, #1
   170ce:	83d3      	strh	r3, [r2, #30]
		ext_data->reschedule_state =
   170d0:	f04f 0302 	mov.w	r3, #2
   170d4:	7233      	strb	r3, [r6, #8]
		rescheduled  = 1U;
   170d6:	2301      	movs	r3, #1
   170d8:	e604      	b.n	16ce4 <ticker_job+0xe4>
		ticker_job_list_insert(instance, insert_head);
   170da:	4649      	mov	r1, r9
   170dc:	4620      	mov	r0, r4
   170de:	f00f ff07 	bl	26ef0 <ticker_job_list_insert>
	if (instance->ticker_id_head != ticker_id_old_head) {
   170e2:	7f63      	ldrb	r3, [r4, #29]
   170e4:	9a03      	ldr	r2, [sp, #12]
   170e6:	4293      	cmp	r3, r2
	if (!pending) {
   170e8:	9b05      	ldr	r3, [sp, #20]
	if (instance->ticker_id_head != ticker_id_old_head) {
   170ea:	f040 80d1 	bne.w	17290 <ticker_job+0x690>
	if (!pending) {
   170ee:	b93b      	cbnz	r3, 17100 <ticker_job+0x500>
	users = &instance->users[0];
   170f0:	7a65      	ldrb	r5, [r4, #9]
   170f2:	6863      	ldr	r3, [r4, #4]
   170f4:	9300      	str	r3, [sp, #0]
	while (count_user--) {
   170f6:	3d01      	subs	r5, #1
   170f8:	b2ed      	uxtb	r5, r5
		uop->status = TICKER_STATUS_SUCCESS;
   170fa:	2700      	movs	r7, #0
	while (count_user--) {
   170fc:	2dff      	cmp	r5, #255	; 0xff
   170fe:	d116      	bne.n	1712e <ticker_job+0x52e>
	if (flag_compare_update) {
   17100:	9b02      	ldr	r3, [sp, #8]
   17102:	b14b      	cbz	r3, 17118 <ticker_job+0x518>
	if (instance->ticker_id_head == TICKER_NULL) {
   17104:	7f63      	ldrb	r3, [r4, #29]
   17106:	2bff      	cmp	r3, #255	; 0xff
   17108:	d179      	bne.n	171fe <ticker_job+0x5fe>
		if (cntr_stop() == 0) {
   1710a:	f006 f8ad 	bl	1d268 <cntr_stop>
   1710e:	b918      	cbnz	r0, 17118 <ticker_job+0x518>
			instance->ticks_slot_previous = 0U;
   17110:	61a0      	str	r0, [r4, #24]
			instance->ticks_current = cntr_cnt_get();
   17112:	f006 f8cf 	bl	1d2b4 <cntr_cnt_get>
   17116:	6160      	str	r0, [r4, #20]
	instance->job_guard = 0U;
   17118:	2300      	movs	r3, #0
   1711a:	77a3      	strb	r3, [r4, #30]
	if (instance->worker_trigger) {
   1711c:	7fe3      	ldrb	r3, [r4, #31]
   1711e:	2b00      	cmp	r3, #0
   17120:	f000 8135 	beq.w	1738e <ticker_job+0x78e>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   17124:	6a65      	ldr	r5, [r4, #36]	; 0x24
   17126:	4623      	mov	r3, r4
   17128:	2201      	movs	r2, #1
   1712a:	2103      	movs	r1, #3
   1712c:	e576      	b.n	16c1c <ticker_job+0x1c>
		user = &users[count_user];
   1712e:	9b00      	ldr	r3, [sp, #0]
   17130:	eb03 06c5 	add.w	r6, r3, r5, lsl #3
		user_op = &user->user_op[0];
   17134:	f8d6 8004 	ldr.w	r8, [r6, #4]
		while (user->first != user->last) {
   17138:	7873      	ldrb	r3, [r6, #1]
   1713a:	78f2      	ldrb	r2, [r6, #3]
   1713c:	429a      	cmp	r2, r3
   1713e:	d102      	bne.n	17146 <ticker_job+0x546>
   17140:	3d01      	subs	r5, #1
   17142:	b2ed      	uxtb	r5, r5
   17144:	e7da      	b.n	170fc <ticker_job+0x4fc>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   17146:	2234      	movs	r2, #52	; 0x34
   17148:	fb13 f202 	smulbb	r2, r3, r2
   1714c:	eb08 0302 	add.w	r3, r8, r2
	switch (uop->op) {
   17150:	f818 2002 	ldrb.w	r2, [r8, r2]
   17154:	2a02      	cmp	r2, #2
   17156:	d012      	beq.n	1717e <ticker_job+0x57e>
   17158:	2a03      	cmp	r2, #3
   1715a:	d040      	beq.n	171de <ticker_job+0x5de>
   1715c:	2a01      	cmp	r2, #1
   1715e:	d105      	bne.n	1716c <ticker_job+0x56c>
			uop->status = TICKER_STATUS_SUCCESS;
   17160:	629f      	str	r7, [r3, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
   17162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	if (fp_op_func) {
   17164:	b112      	cbz	r2, 1716c <ticker_job+0x56c>
		fp_op_func(uop->status, uop->op_context);
   17166:	6b19      	ldr	r1, [r3, #48]	; 0x30
   17168:	6a98      	ldr	r0, [r3, #40]	; 0x28
   1716a:	4790      	blx	r2
			first = user->first + 1;
   1716c:	7873      	ldrb	r3, [r6, #1]
			if (first == user->count_user_op) {
   1716e:	7832      	ldrb	r2, [r6, #0]
			first = user->first + 1;
   17170:	3301      	adds	r3, #1
   17172:	b2db      	uxtb	r3, r3
				first = 0U;
   17174:	429a      	cmp	r2, r3
   17176:	bf08      	it	eq
   17178:	2300      	moveq	r3, #0
			user->first = first;
   1717a:	7073      	strb	r3, [r6, #1]
   1717c:	e7dc      	b.n	17138 <ticker_job+0x538>
		ticker_by_next_slot_get(instance,
   1717e:	e9d3 9001 	ldrd	r9, r0, [r3, #4]
	_ticker_id_head = *ticker_id_head;
   17182:	f899 2000 	ldrb.w	r2, [r9]
		ticker_by_next_slot_get(instance,
   17186:	f8d3 e00c 	ldr.w	lr, [r3, #12]
	node = instance->nodes;
   1718a:	f8d4 c000 	ldr.w	ip, [r4]
	    (*ticks_current != instance->ticks_current)) {
   1718e:	6961      	ldr	r1, [r4, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
   17190:	2aff      	cmp	r2, #255	; 0xff
   17192:	d003      	beq.n	1719c <ticker_job+0x59c>
   17194:	f8d0 a000 	ldr.w	sl, [r0]
   17198:	458a      	cmp	sl, r1
   1719a:	d009      	beq.n	171b0 <ticker_job+0x5b0>
		_ticker_id_head = instance->ticker_id_head;
   1719c:	7f62      	ldrb	r2, [r4, #29]
		*ticks_current = instance->ticks_current;
   1719e:	6001      	str	r1, [r0, #0]
		_ticks_to_expire = 0U;
   171a0:	2000      	movs	r0, #0
	while (_ticker_id_head != TICKER_NULL) {
   171a2:	2aff      	cmp	r2, #255	; 0xff
   171a4:	d10c      	bne.n	171c0 <ticker_job+0x5c0>
	*ticker_id_head = _ticker_id_head;
   171a6:	f889 2000 	strb.w	r2, [r9]
	*ticks_to_expire = _ticks_to_expire;
   171aa:	f8ce 0000 	str.w	r0, [lr]
}
   171ae:	e7d7      	b.n	17160 <ticker_job+0x560>
		ticker = &node[_ticker_id_head];
   171b0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   171b4:	0112      	lsls	r2, r2, #4
	_ticks_to_expire = *ticks_to_expire;
   171b6:	f8de 0000 	ldr.w	r0, [lr]
		_ticker_id_head = ticker->next;
   171ba:	f81c 2002 	ldrb.w	r2, [ip, r2]
   171be:	e7f0      	b.n	171a2 <ticker_job+0x5a2>
		ticker = &node[_ticker_id_head];
   171c0:	eb02 0142 	add.w	r1, r2, r2, lsl #1
   171c4:	ea4f 1b01 	mov.w	fp, r1, lsl #4
   171c8:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
		_ticks_to_expire += ticker->ticks_to_expire;
   171cc:	f8d1 a008 	ldr.w	sl, [r1, #8]
			if (ticker->ticks_slot) {
   171d0:	6989      	ldr	r1, [r1, #24]
		_ticks_to_expire += ticker->ticks_to_expire;
   171d2:	4450      	add	r0, sl
			if (ticker->ticks_slot) {
   171d4:	2900      	cmp	r1, #0
   171d6:	d1e6      	bne.n	171a6 <ticker_job+0x5a6>
		_ticker_id_head = ticker->next;
   171d8:	f81c 200b 	ldrb.w	r2, [ip, fp]
   171dc:	e7e1      	b.n	171a2 <ticker_job+0x5a2>
		if (uop->id < instance->count_node) {
   171de:	785a      	ldrb	r2, [r3, #1]
   171e0:	7a21      	ldrb	r1, [r4, #8]
   171e2:	4291      	cmp	r1, r2
   171e4:	d908      	bls.n	171f8 <ticker_job+0x5f8>
			node[uop->id].priority =
   171e6:	6821      	ldr	r1, [r4, #0]
   171e8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   171ec:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   171f0:	7919      	ldrb	r1, [r3, #4]
   171f2:	f882 102d 	strb.w	r1, [r2, #45]	; 0x2d
   171f6:	e7b3      	b.n	17160 <ticker_job+0x560>
			uop->status = TICKER_STATUS_FAILURE;
   171f8:	2201      	movs	r2, #1
   171fa:	629a      	str	r2, [r3, #40]	; 0x28
   171fc:	e7b1      	b.n	17162 <ticker_job+0x562>
	if (ticker_id_old_head == TICKER_NULL) {
   171fe:	9b03      	ldr	r3, [sp, #12]
   17200:	2bff      	cmp	r3, #255	; 0xff
   17202:	d106      	bne.n	17212 <ticker_job+0x612>
		ticks_current = cntr_cnt_get();
   17204:	f006 f856 	bl	1d2b4 <cntr_cnt_get>
   17208:	4605      	mov	r5, r0
		if (cntr_start() == 0) {
   1720a:	f006 f81f 	bl	1d24c <cntr_start>
   1720e:	b900      	cbnz	r0, 17212 <ticker_job+0x612>
			instance->ticks_current = ticks_current;
   17210:	6165      	str	r5, [r4, #20]
	ticker = &instance->nodes[instance->ticker_id_head];
   17212:	7f63      	ldrb	r3, [r4, #29]
	ticks_to_expire = ticker->ticks_to_expire;
   17214:	6822      	ldr	r2, [r4, #0]
		LL_ASSERT(i);
   17216:	f8df 817c 	ldr.w	r8, [pc, #380]	; 17394 <ticker_job+0x794>
   1721a:	f8df 917c 	ldr.w	r9, [pc, #380]	; 17398 <ticker_job+0x798>
   1721e:	f8df a17c 	ldr.w	sl, [pc, #380]	; 1739c <ticker_job+0x79c>
	ticker = &instance->nodes[instance->ticker_id_head];
   17222:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
   17226:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	i = 10U;
   1722a:	260a      	movs	r6, #10
	ticks_to_expire = ticker->ticks_to_expire;
   1722c:	689f      	ldr	r7, [r3, #8]
		ctr = cntr_cnt_get();
   1722e:	f006 f841 	bl	1d2b4 <cntr_cnt_get>
		cc = instance->ticks_current;
   17232:	6965      	ldr	r5, [r4, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   17234:	1b43      	subs	r3, r0, r5
   17236:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   1723a:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
   1723c:	42bb      	cmp	r3, r7
   1723e:	bf2c      	ite	cs
   17240:	18ed      	addcs	r5, r5, r3
   17242:	19ed      	addcc	r5, r5, r7
		cc &= HAL_TICKER_CNTR_MASK;
   17244:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
		instance->trigger_set_cb(cc);
   17248:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		ctr = cntr_cnt_get();
   1724a:	4683      	mov	fp, r0
		instance->trigger_set_cb(cc);
   1724c:	4628      	mov	r0, r5
   1724e:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   17250:	f006 f830 	bl	1d2b4 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   17254:	eba0 030b 	sub.w	r3, r0, fp
   17258:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1725c:	eba5 050b 	sub.w	r5, r5, fp
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   17260:	3303      	adds	r3, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   17262:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
		  ticker_ticks_diff_get(cc, ctr));
   17266:	42ab      	cmp	r3, r5
		i--;
   17268:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
		  ticker_ticks_diff_get(cc, ctr));
   1726c:	f67f af54 	bls.w	17118 <ticker_job+0x518>
		LL_ASSERT(i);
   17270:	2e00      	cmp	r6, #0
   17272:	d1dc      	bne.n	1722e <ticker_job+0x62e>
   17274:	f640 133e 	movw	r3, #2366	; 0x93e
   17278:	4642      	mov	r2, r8
   1727a:	4649      	mov	r1, r9
   1727c:	4650      	mov	r0, sl
   1727e:	f009 fff5 	bl	2126c <printk>
   17282:	4040      	eors	r0, r0
   17284:	f380 8811 	msr	BASEPRI, r0
   17288:	f04f 0003 	mov.w	r0, #3
   1728c:	df02      	svc	2
   1728e:	e7ce      	b.n	1722e <ticker_job+0x62e>
	if (!pending) {
   17290:	2b00      	cmp	r3, #0
   17292:	f47f af37 	bne.w	17104 <ticker_job+0x504>
		flag_compare_update = 1U;
   17296:	2301      	movs	r3, #1
   17298:	9302      	str	r3, [sp, #8]
   1729a:	e729      	b.n	170f0 <ticker_job+0x4f0>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   1729c:	7f23      	ldrb	r3, [r4, #28]
   1729e:	2bff      	cmp	r3, #255	; 0xff
   172a0:	f47f ae9c 	bne.w	16fdc <ticker_job+0x3dc>
		window_start_ticks = 0U;
   172a4:	2300      	movs	r3, #0
   172a6:	e69f      	b.n	16fe8 <ticker_job+0x3e8>
			if (state == 1U) {
   172a8:	2b01      	cmp	r3, #1
   172aa:	f43f ada6 	beq.w	16dfa <ticker_job+0x1fa>
				instance->sched_cb(TICKER_CALL_ID_JOB,
   172ae:	2104      	movs	r1, #4
   172b0:	4623      	mov	r3, r4
   172b2:	6a65      	ldr	r5, [r4, #36]	; 0x24
   172b4:	2201      	movs	r2, #1
   172b6:	4608      	mov	r0, r1
   172b8:	47a8      	blx	r5
				pending = 1U;
   172ba:	2301      	movs	r3, #1
				user->middle = prev;
   172bc:	f888 7002 	strb.w	r7, [r8, #2]
				pending = 1U;
   172c0:	9305      	str	r3, [sp, #20]
   172c2:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
   172c6:	fa5f fb83 	uxtb.w	fp, r3
   172ca:	e4d4      	b.n	16c76 <ticker_job+0x76>
			if (state == 1U) {
   172cc:	2b01      	cmp	r3, #1
   172ce:	d1ee      	bne.n	172ae <ticker_job+0x6ae>
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   172d0:	4620      	mov	r0, r4
   172d2:	f00f fdba 	bl	26e4a <ticker_dequeue>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   172d6:	6963      	ldr	r3, [r4, #20]
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   172d8:	60a8      	str	r0, [r5, #8]
   172da:	4607      	mov	r7, r0
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   172dc:	9307      	str	r3, [sp, #28]
	ticks_now = cntr_cnt_get();
   172de:	f005 ffe9 	bl	1d2b4 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   172e2:	9b07      	ldr	r3, [sp, #28]
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   172e4:	9900      	ldr	r1, [sp, #0]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   172e6:	1ac3      	subs	r3, r0, r3
   172e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   172ec:	440b      	add	r3, r1
	if (ticks_to_expire > ticks_elapsed) {
   172ee:	429f      	cmp	r7, r3
		ticker->ticks_to_expire_minus += ticks_elapsed -
   172f0:	bf98      	it	ls
   172f2:	6969      	ldrls	r1, [r5, #20]
	ticks_now = cntr_cnt_get();
   172f4:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
   172f6:	bf98      	it	ls
   172f8:	1bc9      	subls	r1, r1, r7
	if ((ticker->ticks_periodic != 0U) &&
   172fa:	6868      	ldr	r0, [r5, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
   172fc:	bf9b      	ittet	ls
   172fe:	185b      	addls	r3, r3, r1
   17300:	616b      	strls	r3, [r5, #20]
		ticks_to_expire -= ticks_elapsed;
   17302:	1afb      	subhi	r3, r7, r3
		ticks_to_expire = 0U;
   17304:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0U) &&
   17306:	b1a8      	cbz	r0, 17334 <ticker_job+0x734>
	    (user_op->params.update.lazy != 0U)) {
   17308:	8ab1      	ldrh	r1, [r6, #20]
	if ((ticker->ticks_periodic != 0U) &&
   1730a:	b199      	cbz	r1, 17334 <ticker_job+0x734>
		user_op->params.update.lazy--;
   1730c:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
   17310:	fa1f fc8c 	uxth.w	ip, ip
   17314:	f8a6 c014 	strh.w	ip, [r6, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   17318:	4298      	cmp	r0, r3
		       (ticker->lazy_current > user_op->params.update.lazy)) {
   1731a:	f8b5 e01e 	ldrh.w	lr, [r5, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   1731e:	d202      	bcs.n	17326 <ticker_job+0x726>
   17320:	45f4      	cmp	ip, lr
   17322:	f4ff ad30 	bcc.w	16d86 <ticker_job+0x186>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   17326:	f8b5 e01e 	ldrh.w	lr, [r5, #30]
   1732a:	45f4      	cmp	ip, lr
   1732c:	f63f ad4a 	bhi.w	16dc4 <ticker_job+0x1c4>
		ticker->lazy_periodic = user_op->params.update.lazy;
   17330:	f8a5 c01c 	strh.w	ip, [r5, #28]
				  user_op->params.update.ticks_drift_plus;
   17334:	6871      	ldr	r1, [r6, #4]
				user_op->params.update.ticks_drift_minus;
   17336:	68b0      	ldr	r0, [r6, #8]
	struct ticker_ext *ext_data = ticker->ext_data;
   17338:	6aaf      	ldr	r7, [r5, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
   1733a:	440b      	add	r3, r1
   1733c:	60ab      	str	r3, [r5, #8]
	ticker->ticks_to_expire_minus +=
   1733e:	696b      	ldr	r3, [r5, #20]
   17340:	4403      	add	r3, r0
   17342:	616b      	str	r3, [r5, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
   17344:	b11f      	cbz	r7, 1734e <ticker_job+0x74e>
   17346:	683b      	ldr	r3, [r7, #0]
   17348:	b10b      	cbz	r3, 1734e <ticker_job+0x74e>
			user_op->params.update.ticks_drift_plus -
   1734a:	1a09      	subs	r1, r1, r0
		ext_data->ticks_drift =
   1734c:	6079      	str	r1, [r7, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   1734e:	9907      	ldr	r1, [sp, #28]
   17350:	4628      	mov	r0, r5
   17352:	f00f fda5 	bl	26ea0 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   17356:	68f2      	ldr	r2, [r6, #12]
   17358:	69ab      	ldr	r3, [r5, #24]
   1735a:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   1735c:	6932      	ldr	r2, [r6, #16]
   1735e:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   17360:	bf8c      	ite	hi
   17362:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
   17364:	2300      	movls	r3, #0
   17366:	61ab      	str	r3, [r5, #24]
	if (user_op->params.update.force != 0U) {
   17368:	7db3      	ldrb	r3, [r6, #22]
   1736a:	b103      	cbz	r3, 1736e <ticker_job+0x76e>
		ticker->force = user_op->params.update.force;
   1736c:	70eb      	strb	r3, [r5, #3]
	if (user_op->params.update.must_expire) {
   1736e:	7df3      	ldrb	r3, [r6, #23]
   17370:	b113      	cbz	r3, 17378 <ticker_job+0x778>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
   17372:	3b01      	subs	r3, #1
   17374:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
	ticker->next = *insert_head;
   17378:	9b02      	ldr	r3, [sp, #8]
   1737a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1737c:	f803 9002 	strb.w	r9, [r3, r2]
		ticker->req++;
   17380:	786b      	ldrb	r3, [r5, #1]
	*insert_head = user_op->id;
   17382:	f896 9001 	ldrb.w	r9, [r6, #1]
		ticker->req++;
   17386:	3301      	adds	r3, #1
   17388:	706b      	strb	r3, [r5, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
   1738a:	2100      	movs	r1, #0
   1738c:	e4f7      	b.n	16d7e <ticker_job+0x17e>
}
   1738e:	b00b      	add	sp, #44	; 0x2c
   17390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17394:	0002f026 	.word	0x0002f026
   17398:	0002f243 	.word	0x0002f243
   1739c:	0002b804 	.word	0x0002b804

000173a0 <ticker_init>:
{
   173a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   173a2:	9f05      	ldr	r7, [sp, #20]
   173a4:	f89d 5018 	ldrb.w	r5, [sp, #24]
   173a8:	f8dd c01c 	ldr.w	ip, [sp, #28]
	if (instance_index >= TICKER_INSTANCE_MAX) {
   173ac:	b108      	cbz	r0, 173b2 <ticker_init+0x12>
		return TICKER_STATUS_FAILURE;
   173ae:	2001      	movs	r0, #1
}
   173b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	instance->count_node = count_node;
   173b2:	4c18      	ldr	r4, [pc, #96]	; (17414 <ticker_init+0x74>)
   173b4:	7221      	strb	r1, [r4, #8]
	instance->nodes = node;
   173b6:	6022      	str	r2, [r4, #0]
	while (count_node--) {
   173b8:	3901      	subs	r1, #1
   173ba:	b2c9      	uxtb	r1, r1
   173bc:	29ff      	cmp	r1, #255	; 0xff
   173be:	d116      	bne.n	173ee <ticker_init+0x4e>
	instance->count_user = count_user;
   173c0:	7263      	strb	r3, [r4, #9]
	instance->users = user;
   173c2:	6067      	str	r7, [r4, #4]
		user_op_ += users[count_user].count_user_op;
   173c4:	2234      	movs	r2, #52	; 0x34
	while (count_user--) {
   173c6:	3b01      	subs	r3, #1
   173c8:	b2db      	uxtb	r3, r3
   173ca:	2bff      	cmp	r3, #255	; 0xff
   173cc:	d116      	bne.n	173fc <ticker_init+0x5c>
	if (count_op) {
   173ce:	2d00      	cmp	r5, #0
   173d0:	d1ed      	bne.n	173ae <ticker_init+0xe>
	instance->caller_id_get_cb = caller_id_get_cb;
   173d2:	9b08      	ldr	r3, [sp, #32]
   173d4:	6223      	str	r3, [r4, #32]
	instance->sched_cb = sched_cb;
   173d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   173d8:	6263      	str	r3, [r4, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
   173da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   173dc:	62a3      	str	r3, [r4, #40]	; 0x28
	instance->ticker_id_slot_previous = TICKER_NULL;
   173de:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->ticks_slot_previous = 0U;
   173e2:	e9c4 5505 	strd	r5, r5, [r4, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
   173e6:	83a3      	strh	r3, [r4, #28]
	instance->ticks_elapsed_first = 0U;
   173e8:	8165      	strh	r5, [r4, #10]
	return TICKER_STATUS_SUCCESS;
   173ea:	4628      	mov	r0, r5
   173ec:	e7e0      	b.n	173b0 <ticker_init+0x10>
		instance->nodes[count_node].priority = 0;
   173ee:	eb01 0641 	add.w	r6, r1, r1, lsl #1
   173f2:	eb02 1606 	add.w	r6, r2, r6, lsl #4
   173f6:	f886 002d 	strb.w	r0, [r6, #45]	; 0x2d
   173fa:	e7dd      	b.n	173b8 <ticker_init+0x18>
		users[count_user].user_op = user_op_;
   173fc:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
   17400:	f8c1 c004 	str.w	ip, [r1, #4]
		user_op_ += users[count_user].count_user_op;
   17404:	f817 0033 	ldrb.w	r0, [r7, r3, lsl #3]
		count_op -= users[count_user].count_user_op;
   17408:	1a2d      	subs	r5, r5, r0
		user_op_ += users[count_user].count_user_op;
   1740a:	fb00 cc02 	mla	ip, r0, r2, ip
		count_op -= users[count_user].count_user_op;
   1740e:	b2ed      	uxtb	r5, r5
   17410:	e7d9      	b.n	173c6 <ticker_init+0x26>
   17412:	bf00      	nop
   17414:	200025e4 	.word	0x200025e4

00017418 <ticker_is_initialized>:
	return !!(_instance[instance_index].count_node);
   17418:	4b04      	ldr	r3, [pc, #16]	; (1742c <ticker_is_initialized+0x14>)
   1741a:	222c      	movs	r2, #44	; 0x2c
   1741c:	fb02 3300 	mla	r3, r2, r0, r3
   17420:	7a18      	ldrb	r0, [r3, #8]
}
   17422:	3800      	subs	r0, #0
   17424:	bf18      	it	ne
   17426:	2001      	movne	r0, #1
   17428:	4770      	bx	lr
   1742a:	bf00      	nop
   1742c:	200025e4 	.word	0x200025e4

00017430 <ticker_trigger>:
	if (instance->sched_cb) {
   17430:	4b07      	ldr	r3, [pc, #28]	; (17450 <ticker_trigger+0x20>)
   17432:	222c      	movs	r2, #44	; 0x2c
   17434:	fb02 3100 	mla	r1, r2, r0, r3
{
   17438:	b410      	push	{r4}
	if (instance->sched_cb) {
   1743a:	6a4c      	ldr	r4, [r1, #36]	; 0x24
   1743c:	b134      	cbz	r4, 1744c <ticker_trigger+0x1c>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   1743e:	460b      	mov	r3, r1
   17440:	46a4      	mov	ip, r4
   17442:	2201      	movs	r2, #1
}
   17444:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   17446:	2103      	movs	r1, #3
   17448:	2002      	movs	r0, #2
   1744a:	4760      	bx	ip
}
   1744c:	bc10      	pop	{r4}
   1744e:	4770      	bx	lr
   17450:	200025e4 	.word	0x200025e4

00017454 <ticker_start_ext>:
{
   17454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17458:	4606      	mov	r6, r0
   1745a:	4608      	mov	r0, r1
   1745c:	4611      	mov	r1, r2
   1745e:	461a      	mov	r2, r3
	struct ticker_instance *instance = &_instance[instance_index];
   17460:	4b22      	ldr	r3, [pc, #136]	; (174ec <ticker_start_ext+0x98>)
   17462:	242c      	movs	r4, #44	; 0x2c
   17464:	fb06 3904 	mla	r9, r6, r4, r3
	user = &instance->users[user_id];
   17468:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1746c:	eb03 0cc0 	add.w	ip, r3, r0, lsl #3
	if (last >= user->count_user_op) {
   17470:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
	last = user->last + 1;
   17474:	f89c 7003 	ldrb.w	r7, [ip, #3]
   17478:	1c7d      	adds	r5, r7, #1
   1747a:	b2ed      	uxtb	r5, r5
		last = 0U;
   1747c:	42ab      	cmp	r3, r5
   1747e:	bf98      	it	ls
   17480:	2500      	movls	r5, #0
	if (last == user->first) {
   17482:	f89c 3001 	ldrb.w	r3, [ip, #1]
   17486:	42ab      	cmp	r3, r5
   17488:	d02e      	beq.n	174e8 <ticker_start_ext+0x94>
	user_op = &user->user_op[user->last];
   1748a:	2334      	movs	r3, #52	; 0x34
   1748c:	fb17 f703 	smulbb	r7, r7, r3
   17490:	f8dc 3004 	ldr.w	r3, [ip, #4]
	user_op->op = TICKER_USER_OP_TYPE_START;
   17494:	f04f 0804 	mov.w	r8, #4
	user_op = &user->user_op[user->last];
   17498:	19dc      	adds	r4, r3, r7
	user_op->op = TICKER_USER_OP_TYPE_START;
   1749a:	f803 8007 	strb.w	r8, [r3, r7]
	user_op->params.start.ticks_first = ticks_first;
   1749e:	9b08      	ldr	r3, [sp, #32]
   174a0:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   174a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   174a4:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   174a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   174a8:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   174aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   174ac:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
   174ae:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   174b2:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.ext_data = ext_data;
   174b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   174b6:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
   174b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   174ba:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
   174bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   174be:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
   174c0:	2302      	movs	r3, #2
   174c2:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->fp_op_func = fp_op_func;
   174c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   174c6:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   174c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
   174ca:	7061      	strb	r1, [r4, #1]
	user_op->params.start.ticks_at_start = ticks_anchor;
   174cc:	6062      	str	r2, [r4, #4]
	user_op->op_context = op_context;
   174ce:	6323      	str	r3, [r4, #48]	; 0x30
	user->last = last;
   174d0:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   174d4:	e9d9 3508 	ldrd	r3, r5, [r9, #32]
   174d8:	4798      	blx	r3
   174da:	464b      	mov	r3, r9
   174dc:	2200      	movs	r2, #0
   174de:	4641      	mov	r1, r8
   174e0:	47a8      	blx	r5
	return user_op->status;
   174e2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   174e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   174e8:	2001      	movs	r0, #1
   174ea:	e7fb      	b.n	174e4 <ticker_start_ext+0x90>
   174ec:	200025e4 	.word	0x200025e4

000174f0 <ticker_update_ext>:
{
   174f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   174f4:	4c23      	ldr	r4, [pc, #140]	; (17584 <ticker_update_ext+0x94>)
{
   174f6:	4606      	mov	r6, r0
   174f8:	4608      	mov	r0, r1
   174fa:	4611      	mov	r1, r2
	struct ticker_instance *instance = &_instance[instance_index];
   174fc:	222c      	movs	r2, #44	; 0x2c
   174fe:	fb06 4802 	mla	r8, r6, r2, r4
	user = &instance->users[user_id];
   17502:	f8d8 4004 	ldr.w	r4, [r8, #4]
   17506:	eb04 0cc0 	add.w	ip, r4, r0, lsl #3
	if (last >= user->count_user_op) {
   1750a:	f814 2030 	ldrb.w	r2, [r4, r0, lsl #3]
	last = user->last + 1;
   1750e:	f89c 7003 	ldrb.w	r7, [ip, #3]
   17512:	1c7d      	adds	r5, r7, #1
   17514:	b2ed      	uxtb	r5, r5
		last = 0U;
   17516:	42aa      	cmp	r2, r5
   17518:	bf98      	it	ls
   1751a:	2500      	movls	r5, #0
	if (last == user->first) {
   1751c:	f89c 2001 	ldrb.w	r2, [ip, #1]
   17520:	42aa      	cmp	r2, r5
   17522:	d02c      	beq.n	1757e <ticker_update_ext+0x8e>
	user_op = &user->user_op[user->last];
   17524:	2234      	movs	r2, #52	; 0x34
   17526:	fb17 f702 	smulbb	r7, r7, r2
   1752a:	f8dc 2004 	ldr.w	r2, [ip, #4]
   1752e:	19d4      	adds	r4, r2, r7
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   17530:	f04f 0e05 	mov.w	lr, #5
   17534:	f802 e007 	strb.w	lr, [r2, r7]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   17538:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   1753a:	9b06      	ldr	r3, [sp, #24]
   1753c:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   1753e:	9b07      	ldr	r3, [sp, #28]
   17540:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   17542:	9b08      	ldr	r3, [sp, #32]
   17544:	6123      	str	r3, [r4, #16]
	user_op->params.update.lazy = lazy;
   17546:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   1754a:	82a3      	strh	r3, [r4, #20]
	user_op->params.update.force = force;
   1754c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   17550:	75a3      	strb	r3, [r4, #22]
	user_op->params.update.must_expire = must_expire;
   17552:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   17556:	75e3      	strb	r3, [r4, #23]
	user_op->status = TICKER_STATUS_BUSY;
   17558:	2302      	movs	r3, #2
   1755a:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->fp_op_func = fp_op_func;
   1755c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1755e:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   17560:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	user_op->id = ticker_id;
   17562:	7061      	strb	r1, [r4, #1]
	user_op->op_context = op_context;
   17564:	6323      	str	r3, [r4, #48]	; 0x30
	user->last = last;
   17566:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   1756a:	e9d8 3508 	ldrd	r3, r5, [r8, #32]
   1756e:	4798      	blx	r3
   17570:	4643      	mov	r3, r8
   17572:	2200      	movs	r2, #0
   17574:	2104      	movs	r1, #4
   17576:	47a8      	blx	r5
	return user_op->status;
   17578:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   1757a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   1757e:	2001      	movs	r0, #1
   17580:	e7fb      	b.n	1757a <ticker_update_ext+0x8a>
   17582:	bf00      	nop
   17584:	200025e4 	.word	0x200025e4

00017588 <ticker_stop>:
{
   17588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   1758c:	4c1a      	ldr	r4, [pc, #104]	; (175f8 <ticker_stop+0x70>)
{
   1758e:	4605      	mov	r5, r0
   17590:	4608      	mov	r0, r1
   17592:	4611      	mov	r1, r2
	struct ticker_instance *instance = &_instance[instance_index];
   17594:	222c      	movs	r2, #44	; 0x2c
   17596:	fb05 4902 	mla	r9, r5, r2, r4
	user = &instance->users[user_id];
   1759a:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1759e:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
	if (last >= user->count_user_op) {
   175a2:	f812 2030 	ldrb.w	r2, [r2, r0, lsl #3]
	last = user->last + 1;
   175a6:	78fe      	ldrb	r6, [r7, #3]
   175a8:	1c74      	adds	r4, r6, #1
   175aa:	b2e4      	uxtb	r4, r4
		last = 0U;
   175ac:	42a2      	cmp	r2, r4
   175ae:	bf98      	it	ls
   175b0:	2400      	movls	r4, #0
	if (last == user->first) {
   175b2:	787a      	ldrb	r2, [r7, #1]
   175b4:	42a2      	cmp	r2, r4
   175b6:	d01d      	beq.n	175f4 <ticker_stop+0x6c>
	user_op = &user->user_op[user->last];
   175b8:	2234      	movs	r2, #52	; 0x34
   175ba:	fb16 f602 	smulbb	r6, r6, r2
   175be:	687a      	ldr	r2, [r7, #4]
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   175c0:	f04f 0c07 	mov.w	ip, #7
   175c4:	f802 c006 	strb.w	ip, [r2, r6]
	user_op = &user->user_op[user->last];
   175c8:	eb02 0806 	add.w	r8, r2, r6
	user_op->status = TICKER_STATUS_BUSY;
   175cc:	2202      	movs	r2, #2
	user_op->fp_op_func = fp_op_func;
   175ce:	e9c8 230a 	strd	r2, r3, [r8, #40]	; 0x28
	user_op->op_context = op_context;
   175d2:	9b08      	ldr	r3, [sp, #32]
	user_op->id = ticker_id;
   175d4:	f888 1001 	strb.w	r1, [r8, #1]
	user_op->op_context = op_context;
   175d8:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
	user->last = last;
   175dc:	70fc      	strb	r4, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   175de:	e9d9 3408 	ldrd	r3, r4, [r9, #32]
   175e2:	4798      	blx	r3
   175e4:	464b      	mov	r3, r9
   175e6:	2200      	movs	r2, #0
   175e8:	2104      	movs	r1, #4
   175ea:	47a0      	blx	r4
	return user_op->status;
   175ec:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
}
   175f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   175f4:	2001      	movs	r0, #1
   175f6:	e7fb      	b.n	175f0 <ticker_stop+0x68>
   175f8:	200025e4 	.word	0x200025e4

000175fc <ll_addr_set>:

static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
   175fc:	b570      	push	{r4, r5, r6, lr}
   175fe:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
   17600:	2000      	movs	r0, #0
{
   17602:	460d      	mov	r5, r1
		if (ull_adv_is_enabled(0)) {
   17604:	f00f ff84 	bl	27510 <ull_adv_is_enabled>
   17608:	b110      	cbz	r0, 17610 <ll_addr_set+0x14>
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
			return BT_HCI_ERR_CMD_DISALLOWED;
   1760a:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
   1760c:	4620      	mov	r0, r4
   1760e:	bd70      	pop	{r4, r5, r6, pc}
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
   17610:	f010 f873 	bl	276fa <ull_scan_is_enabled>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
   17614:	f010 0606 	ands.w	r6, r0, #6
   17618:	d1f7      	bne.n	1760a <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   1761a:	2206      	movs	r2, #6
   1761c:	4629      	mov	r1, r5
	if (addr_type) {
   1761e:	b124      	cbz	r4, 1762a <ll_addr_set+0x2e>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   17620:	4804      	ldr	r0, [pc, #16]	; (17634 <ll_addr_set+0x38>)
   17622:	f00c fbc1 	bl	23da8 <memcpy>
	return 0;
   17626:	4634      	mov	r4, r6
   17628:	e7f0      	b.n	1760c <ll_addr_set+0x10>
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
   1762a:	4803      	ldr	r0, [pc, #12]	; (17638 <ll_addr_set+0x3c>)
   1762c:	f00c fbbc 	bl	23da8 <memcpy>
   17630:	e7ec      	b.n	1760c <ll_addr_set+0x10>
   17632:	bf00      	nop
   17634:	200038b4 	.word	0x200038b4
   17638:	200038ae 	.word	0x200038ae

0001763c <ll_addr_get>:

uint8_t *ll_addr_get(uint8_t addr_type)
{
	if (addr_type > BT_ADDR_LE_RANDOM) {
   1763c:	2801      	cmp	r0, #1
{
   1763e:	4602      	mov	r2, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
   17640:	d805      	bhi.n	1764e <ll_addr_get+0x12>
		return NULL;
	}

	if (addr_type) {
		return rnd_addr;
   17642:	4b04      	ldr	r3, [pc, #16]	; (17654 <ll_addr_get+0x18>)
   17644:	4804      	ldr	r0, [pc, #16]	; (17658 <ll_addr_get+0x1c>)
   17646:	2a00      	cmp	r2, #0
   17648:	bf08      	it	eq
   1764a:	4618      	moveq	r0, r3
   1764c:	4770      	bx	lr
		return NULL;
   1764e:	2000      	movs	r0, #0
	}

	return pub_addr;
}
   17650:	4770      	bx	lr
   17652:	bf00      	nop
   17654:	200038ae 	.word	0x200038ae
   17658:	200038b4 	.word	0x200038b4

0001765c <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
   1765c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
   1765e:	4802      	ldr	r0, [pc, #8]	; (17668 <hci_driver_init+0xc>)
   17660:	f7ee ff4a 	bl	64f8 <bt_hci_driver_register>

	return 0;
}
   17664:	2000      	movs	r0, #0
   17666:	bd08      	pop	{r3, pc}
   17668:	0002a734 	.word	0x0002a734

0001766c <hci_driver_send>:
	if (!buf->len) {
   1766c:	8983      	ldrh	r3, [r0, #12]
{
   1766e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   17670:	4605      	mov	r5, r0
	if (!buf->len) {
   17672:	b973      	cbnz	r3, 17692 <hci_driver_send+0x26>
   17674:	4920      	ldr	r1, [pc, #128]	; (176f8 <hci_driver_send+0x8c>)
   17676:	4b21      	ldr	r3, [pc, #132]	; (176fc <hci_driver_send+0x90>)
		BT_ERR("Empty HCI packet");
   17678:	4821      	ldr	r0, [pc, #132]	; (17700 <hci_driver_send+0x94>)
   1767a:	1ac9      	subs	r1, r1, r3
   1767c:	08c9      	lsrs	r1, r1, #3
   1767e:	0189      	lsls	r1, r1, #6
   17680:	f041 0101 	orr.w	r1, r1, #1
   17684:	f00a fa31 	bl	21aea <log_0>
		return -EINVAL;
   17688:	f06f 0415 	mvn.w	r4, #21
}
   1768c:	4620      	mov	r0, r4
   1768e:	b003      	add	sp, #12
   17690:	bd30      	pop	{r4, r5, pc}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   17692:	7d01      	ldrb	r1, [r0, #20]
	switch (type) {
   17694:	b181      	cbz	r1, 176b8 <hci_driver_send+0x4c>
   17696:	2902      	cmp	r1, #2
   17698:	d122      	bne.n	176e0 <hci_driver_send+0x74>
	err = hci_acl_handle(buf, &evt);
   1769a:	a901      	add	r1, sp, #4
   1769c:	f000 fcae 	bl	17ffc <hci_acl_handle>
   176a0:	4604      	mov	r4, r0
	if (evt) {
   176a2:	9801      	ldr	r0, [sp, #4]
   176a4:	b108      	cbz	r0, 176aa <hci_driver_send+0x3e>
		bt_recv_prio(evt);
   176a6:	f7ee ff09 	bl	64bc <bt_recv_prio>
	if (!err) {
   176aa:	2c00      	cmp	r4, #0
   176ac:	d1ee      	bne.n	1768c <hci_driver_send+0x20>
		net_buf_unref(buf);
   176ae:	4628      	mov	r0, r5
   176b0:	f006 fb58 	bl	1dd64 <net_buf_unref>
   176b4:	2400      	movs	r4, #0
   176b6:	e7e9      	b.n	1768c <hci_driver_send+0x20>
	struct node_rx_pdu *node_rx = NULL;
   176b8:	9101      	str	r1, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   176ba:	a901      	add	r1, sp, #4
   176bc:	f000 fa1c 	bl	17af8 <hci_cmd_handle>
	if (evt) {
   176c0:	2800      	cmp	r0, #0
   176c2:	d0f4      	beq.n	176ae <hci_driver_send+0x42>
		bt_recv_prio(evt);
   176c4:	f7ee fefa 	bl	64bc <bt_recv_prio>
		if (node_rx) {
   176c8:	9c01      	ldr	r4, [sp, #4]
   176ca:	2c00      	cmp	r4, #0
   176cc:	d0ef      	beq.n	176ae <hci_driver_send+0x42>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   176ce:	4620      	mov	r0, r4
   176d0:	f000 fef6 	bl	184c0 <hci_get_class>
   176d4:	7160      	strb	r0, [r4, #5]
			k_fifo_put(&recv_fifo, node_rx);
   176d6:	9901      	ldr	r1, [sp, #4]
   176d8:	480a      	ldr	r0, [pc, #40]	; (17704 <hci_driver_send+0x98>)
   176da:	f011 fa6b 	bl	28bb4 <k_queue_append>
	if (!err) {
   176de:	e7e6      	b.n	176ae <hci_driver_send+0x42>
   176e0:	4b06      	ldr	r3, [pc, #24]	; (176fc <hci_driver_send+0x90>)
   176e2:	4a05      	ldr	r2, [pc, #20]	; (176f8 <hci_driver_send+0x8c>)
		BT_ERR("Unknown HCI type %u", type);
   176e4:	4808      	ldr	r0, [pc, #32]	; (17708 <hci_driver_send+0x9c>)
   176e6:	1ad2      	subs	r2, r2, r3
   176e8:	08d2      	lsrs	r2, r2, #3
   176ea:	0192      	lsls	r2, r2, #6
   176ec:	f042 0201 	orr.w	r2, r2, #1
   176f0:	f00a fa08 	bl	21b04 <log_1>
   176f4:	e7c8      	b.n	17688 <hci_driver_send+0x1c>
   176f6:	bf00      	nop
   176f8:	000298c8 	.word	0x000298c8
   176fc:	00029870 	.word	0x00029870
   17700:	0002f074 	.word	0x0002f074
   17704:	20001170 	.word	0x20001170
   17708:	0002f085 	.word	0x0002f085

0001770c <recv_thread>:
{
   1770c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
   1770e:	4e2f      	ldr	r6, [pc, #188]	; (177cc <recv_thread+0xc0>)
	struct net_buf *buf = NULL;
   17710:	2700      	movs	r7, #0
   17712:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17716:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1771a:	4630      	mov	r0, r6
   1771c:	f008 fc46 	bl	1ffac <z_impl_k_queue_get>
		if (node_rx && !buf) {
   17720:	2800      	cmp	r0, #0
   17722:	d0f6      	beq.n	17712 <recv_thread+0x6>
	uint8_t class = node_rx->hdr.user_meta;
   17724:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   17726:	9001      	str	r0, [sp, #4]
	switch (class) {
   17728:	2b04      	cmp	r3, #4
   1772a:	d826      	bhi.n	1777a <recv_thread+0x6e>
   1772c:	b33b      	cbz	r3, 1777e <recv_thread+0x72>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
   1772e:	2b02      	cmp	r3, #2
   17730:	d134      	bne.n	1779c <recv_thread+0x90>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
   17732:	2200      	movs	r2, #0
   17734:	2300      	movs	r3, #0
   17736:	2101      	movs	r1, #1
   17738:	2000      	movs	r0, #0
   1773a:	f7ed ff21 	bl	5580 <bt_buf_get_evt>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1773e:	4604      	mov	r4, r0
		if (buf) {
   17740:	b118      	cbz	r0, 1774a <recv_thread+0x3e>
			hci_evt_encode(node_rx, buf);
   17742:	4601      	mov	r1, r0
   17744:	9801      	ldr	r0, [sp, #4]
   17746:	f000 fd59 	bl	181fc <hci_evt_encode>
	node_rx->hdr.next = NULL;
   1774a:	9b01      	ldr	r3, [sp, #4]
	ll_rx_mem_release((void **)&node_rx);
   1774c:	a801      	add	r0, sp, #4
	node_rx->hdr.next = NULL;
   1774e:	601f      	str	r7, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   17750:	f001 fb4c 	bl	18dec <ll_rx_mem_release>
		while (buf) {
   17754:	2c00      	cmp	r4, #0
   17756:	d0dc      	beq.n	17712 <recv_thread+0x6>
			frag = net_buf_ref(buf);
   17758:	4620      	mov	r0, r4
   1775a:	f010 fd43 	bl	281e4 <net_buf_ref>
			buf = net_buf_frag_del(NULL, buf);
   1775e:	4621      	mov	r1, r4
			frag = net_buf_ref(buf);
   17760:	4605      	mov	r5, r0
			buf = net_buf_frag_del(NULL, buf);
   17762:	2000      	movs	r0, #0
   17764:	f010 fd64 	bl	28230 <net_buf_frag_del>
			if (frag->len) {
   17768:	89ab      	ldrh	r3, [r5, #12]
			buf = net_buf_frag_del(NULL, buf);
   1776a:	4604      	mov	r4, r0
				bt_recv(frag);
   1776c:	4628      	mov	r0, r5
			if (frag->len) {
   1776e:	b353      	cbz	r3, 177c6 <recv_thread+0xba>
				bt_recv(frag);
   17770:	f7ee fe00 	bl	6374 <bt_recv>
	z_impl_k_yield();
   17774:	f009 f8aa 	bl	208cc <z_impl_k_yield>
}
   17778:	e7ec      	b.n	17754 <recv_thread+0x48>
	switch (class) {
   1777a:	2b05      	cmp	r3, #5
   1777c:	d016      	beq.n	177ac <recv_thread+0xa0>
		LL_ASSERT(0);
   1777e:	4a14      	ldr	r2, [pc, #80]	; (177d0 <recv_thread+0xc4>)
   17780:	4914      	ldr	r1, [pc, #80]	; (177d4 <recv_thread+0xc8>)
   17782:	4815      	ldr	r0, [pc, #84]	; (177d8 <recv_thread+0xcc>)
   17784:	f240 1347 	movw	r3, #327	; 0x147
   17788:	f009 fd70 	bl	2126c <printk>
   1778c:	4040      	eors	r0, r0
   1778e:	f380 8811 	msr	BASEPRI, r0
   17792:	f04f 0003 	mov.w	r0, #3
   17796:	df02      	svc	2
	struct net_buf *buf = NULL;
   17798:	2400      	movs	r4, #0
		break;
   1779a:	e7d6      	b.n	1774a <recv_thread+0x3e>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1779c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   177a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   177a4:	2001      	movs	r0, #1
   177a6:	f7ed fec1 	bl	552c <bt_buf_get_rx>
   177aa:	e7c8      	b.n	1773e <recv_thread+0x32>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   177ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   177b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   177b4:	2003      	movs	r0, #3
   177b6:	f7ed feb9 	bl	552c <bt_buf_get_rx>
   177ba:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
   177bc:	4601      	mov	r1, r0
   177be:	9801      	ldr	r0, [sp, #4]
   177c0:	f000 fce2 	bl	18188 <hci_acl_encode>
		break;
   177c4:	e7c1      	b.n	1774a <recv_thread+0x3e>
				net_buf_unref(frag);
   177c6:	f006 facd 	bl	1dd64 <net_buf_unref>
   177ca:	e7d3      	b.n	17774 <recv_thread+0x68>
   177cc:	20001170 	.word	0x20001170
   177d0:	0002f099 	.word	0x0002f099
   177d4:	0002cf80 	.word	0x0002cf80
   177d8:	0002b804 	.word	0x0002b804

000177dc <prio_recv_thread>:
{
   177dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   177e0:	4e2a      	ldr	r6, [pc, #168]	; (1788c <prio_recv_thread+0xb0>)
				k_fifo_put(&recv_fifo, node_rx);
   177e2:	4f2b      	ldr	r7, [pc, #172]	; (17890 <prio_recv_thread+0xb4>)
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   177e4:	f10d 0102 	add.w	r1, sp, #2
   177e8:	a801      	add	r0, sp, #4
   177ea:	f001 f9fd 	bl	18be8 <ll_rx_get>
   177ee:	4604      	mov	r4, r0
   177f0:	bb80      	cbnz	r0, 17854 <prio_recv_thread+0x78>
		if (node_rx) {
   177f2:	9b01      	ldr	r3, [sp, #4]
   177f4:	2b00      	cmp	r3, #0
   177f6:	d041      	beq.n	1787c <prio_recv_thread+0xa0>
			ll_rx_dequeue();
   177f8:	f001 fa50 	bl	18c9c <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   177fc:	9d01      	ldr	r5, [sp, #4]
   177fe:	4628      	mov	r0, r5
   17800:	f000 fe5e 	bl	184c0 <hci_get_class>
   17804:	7168      	strb	r0, [r5, #5]
			buf = process_prio_evt(node_rx, &evt_flags);
   17806:	9d01      	ldr	r5, [sp, #4]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
   17808:	796b      	ldrb	r3, [r5, #5]
   1780a:	2b03      	cmp	r3, #3
   1780c:	d11d      	bne.n	1784a <prio_recv_thread+0x6e>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
   1780e:	792b      	ldrb	r3, [r5, #4]
   17810:	2b17      	cmp	r3, #23
   17812:	d11a      	bne.n	1784a <prio_recv_thread+0x6e>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   17814:	4621      	mov	r1, r4
   17816:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1781a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1781e:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
   17820:	f8b5 8006 	ldrh.w	r8, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   17824:	f7ed feac 	bl	5580 <bt_buf_get_evt>
			hci_disconn_complete_encode(pdu_data, handle, buf);
   17828:	4641      	mov	r1, r8
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   1782a:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
   1782c:	4602      	mov	r2, r0
   1782e:	f105 001c 	add.w	r0, r5, #28
   17832:	f000 fc83 	bl	1813c <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
   17836:	4640      	mov	r0, r8
   17838:	f000 fc9e 	bl	18178 <hci_disconn_complete_process>
			if (buf) {
   1783c:	b12c      	cbz	r4, 1784a <prio_recv_thread+0x6e>
				bt_recv_prio(buf);
   1783e:	4620      	mov	r0, r4
   17840:	f7ee fe3c 	bl	64bc <bt_recv_prio>
					net_buf_unref(buf);
   17844:	4620      	mov	r0, r4
   17846:	f006 fa8d 	bl	1dd64 <net_buf_unref>
				k_fifo_put(&recv_fifo, node_rx);
   1784a:	9901      	ldr	r1, [sp, #4]
   1784c:	4638      	mov	r0, r7
   1784e:	f011 f9b1 	bl	28bb4 <k_queue_append>
			continue;
   17852:	e7c7      	b.n	177e4 <prio_recv_thread+0x8>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   17854:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17858:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1785c:	2100      	movs	r1, #0
   1785e:	2013      	movs	r0, #19
   17860:	f7ed fe8e 	bl	5580 <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   17864:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   17868:	4605      	mov	r5, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   1786a:	4622      	mov	r2, r4
   1786c:	f00f fdc6 	bl	273fc <hci_num_cmplt_encode>
			bt_recv_prio(buf);
   17870:	4628      	mov	r0, r5
   17872:	f7ee fe23 	bl	64bc <bt_recv_prio>
	z_impl_k_yield();
   17876:	f009 f829 	bl	208cc <z_impl_k_yield>
   1787a:	e7b3      	b.n	177e4 <prio_recv_thread+0x8>
	return z_impl_k_sem_take(sem, timeout);
   1787c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17880:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17884:	4630      	mov	r0, r6
   17886:	f008 fbeb 	bl	20060 <z_impl_k_sem_take>
		BT_DBG("sem taken");
   1788a:	e7ab      	b.n	177e4 <prio_recv_thread+0x8>
   1788c:	20001128 	.word	0x20001128
   17890:	20001170 	.word	0x20001170

00017894 <hci_driver_open>:
{
   17894:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
   17896:	4820      	ldr	r0, [pc, #128]	; (17918 <hci_driver_open+0x84>)
{
   17898:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
   1789a:	f001 f89d 	bl	189d8 <ll_init>
	if (err) {
   1789e:	4604      	mov	r4, r0
   178a0:	b168      	cbz	r0, 178be <hci_driver_open+0x2a>
   178a2:	4a1e      	ldr	r2, [pc, #120]	; (1791c <hci_driver_open+0x88>)
   178a4:	4b1e      	ldr	r3, [pc, #120]	; (17920 <hci_driver_open+0x8c>)
   178a6:	1ad2      	subs	r2, r2, r3
   178a8:	08d2      	lsrs	r2, r2, #3
		BT_ERR("LL initialization failed: %d", err);
   178aa:	0192      	lsls	r2, r2, #6
   178ac:	4601      	mov	r1, r0
   178ae:	f042 0201 	orr.w	r2, r2, #1
   178b2:	481c      	ldr	r0, [pc, #112]	; (17924 <hci_driver_open+0x90>)
   178b4:	f00a f926 	bl	21b04 <log_1>
}
   178b8:	4620      	mov	r0, r4
   178ba:	b008      	add	sp, #32
   178bc:	bdd0      	pop	{r4, r6, r7, pc}
	hci_init(NULL);
   178be:	f000 fe15 	bl	184ec <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
   178c2:	2600      	movs	r6, #0
   178c4:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   178c6:	f06f 0309 	mvn.w	r3, #9
   178ca:	e9cd 4302 	strd	r4, r3, [sp, #8]
   178ce:	e9cd 6706 	strd	r6, r7, [sp, #24]
   178d2:	e9cd 4400 	strd	r4, r4, [sp]
   178d6:	4b14      	ldr	r3, [pc, #80]	; (17928 <hci_driver_open+0x94>)
   178d8:	4914      	ldr	r1, [pc, #80]	; (1792c <hci_driver_open+0x98>)
   178da:	9404      	str	r4, [sp, #16]
   178dc:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   178e0:	4813      	ldr	r0, [pc, #76]	; (17930 <hci_driver_open+0x9c>)
   178e2:	f008 fa0b 	bl	1fcfc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   178e6:	4913      	ldr	r1, [pc, #76]	; (17934 <hci_driver_open+0xa0>)
   178e8:	4811      	ldr	r0, [pc, #68]	; (17930 <hci_driver_open+0x9c>)
   178ea:	f011 f8aa 	bl	28a42 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   178ee:	f06f 0307 	mvn.w	r3, #7
   178f2:	e9cd 4302 	strd	r4, r3, [sp, #8]
   178f6:	e9cd 6706 	strd	r6, r7, [sp, #24]
   178fa:	e9cd 4400 	strd	r4, r4, [sp]
   178fe:	4b0e      	ldr	r3, [pc, #56]	; (17938 <hci_driver_open+0xa4>)
   17900:	490e      	ldr	r1, [pc, #56]	; (1793c <hci_driver_open+0xa8>)
   17902:	9404      	str	r4, [sp, #16]
   17904:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   17908:	480d      	ldr	r0, [pc, #52]	; (17940 <hci_driver_open+0xac>)
   1790a:	f008 f9f7 	bl	1fcfc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1790e:	490d      	ldr	r1, [pc, #52]	; (17944 <hci_driver_open+0xb0>)
   17910:	480b      	ldr	r0, [pc, #44]	; (17940 <hci_driver_open+0xac>)
   17912:	f011 f896 	bl	28a42 <z_impl_k_thread_name_set>
	return 0;
   17916:	e7cf      	b.n	178b8 <hci_driver_open+0x24>
   17918:	20001128 	.word	0x20001128
   1791c:	000298c8 	.word	0x000298c8
   17920:	00029870 	.word	0x00029870
   17924:	0002f0d9 	.word	0x0002f0d9
   17928:	000177dd 	.word	0x000177dd
   1792c:	20004aa0 	.word	0x20004aa0
   17930:	20001bb0 	.word	0x20001bb0
   17934:	0002f0f6 	.word	0x0002f0f6
   17938:	0001770d 	.word	0x0001770d
   1793c:	20004c80 	.word	0x20004c80
   17940:	20001c30 	.word	0x20001c30
   17944:	0002f100 	.word	0x0002f100

00017948 <cmd_complete_status>:
{
	return bt_hci_cmd_status_create(_opcode, status);
}

static struct net_buf *cmd_complete_status(uint8_t status)
{
   17948:	b538      	push	{r3, r4, r5, lr}
	struct net_buf *buf;
	struct bt_hci_evt_cc_status *ccst;

	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   1794a:	4b07      	ldr	r3, [pc, #28]	; (17968 <cmd_complete_status+0x20>)
{
   1794c:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   1794e:	2101      	movs	r1, #1
   17950:	8818      	ldrh	r0, [r3, #0]
   17952:	f00c fd79 	bl	24448 <bt_hci_cmd_complete_create>
	return net_buf_simple_add(&buf->b, len);
   17956:	2101      	movs	r1, #1
   17958:	4604      	mov	r4, r0
   1795a:	3008      	adds	r0, #8
   1795c:	f010 fc74 	bl	28248 <net_buf_simple_add>
	ccst = net_buf_add(buf, sizeof(*ccst));
	ccst->status = status;
   17960:	7005      	strb	r5, [r0, #0]

	return buf;
}
   17962:	4620      	mov	r0, r4
   17964:	bd38      	pop	{r3, r4, r5, pc}
   17966:	bf00      	nop
   17968:	20003726 	.word	0x20003726

0001796c <cmd_status>:
	return bt_hci_cmd_status_create(_opcode, status);
   1796c:	4b02      	ldr	r3, [pc, #8]	; (17978 <cmd_status+0xc>)
{
   1796e:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   17970:	8818      	ldrh	r0, [r3, #0]
   17972:	f00c bd7b 	b.w	2446c <bt_hci_cmd_status_create>
   17976:	bf00      	nop
   17978:	20003726 	.word	0x20003726

0001797c <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
   1797c:	b570      	push	{r4, r5, r6, lr}
   1797e:	4604      	mov	r4, r0
   17980:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   17982:	4b0f      	ldr	r3, [pc, #60]	; (179c0 <le_remote_feat_complete+0x44>)
   17984:	685b      	ldr	r3, [r3, #4]
{
   17986:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   17988:	009a      	lsls	r2, r3, #2
{
   1798a:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1798c:	d517      	bpl.n	179be <le_remote_feat_complete+0x42>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
   1798e:	4b0d      	ldr	r3, [pc, #52]	; (179c4 <le_remote_feat_complete+0x48>)
   17990:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   17992:	071b      	lsls	r3, r3, #28
   17994:	d513      	bpl.n	179be <le_remote_feat_complete+0x42>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
   17996:	220b      	movs	r2, #11
   17998:	2104      	movs	r1, #4
   1799a:	f00f fd13 	bl	273c4 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
   1799e:	2208      	movs	r2, #8
	sep->status = status;
   179a0:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   179a2:	f8a0 6001 	strh.w	r6, [r0, #1]
	if (!status) {
   179a6:	3003      	adds	r0, #3
   179a8:	b924      	cbnz	r4, 179b4 <le_remote_feat_complete+0x38>
		memcpy(&sep->features[0],
   179aa:	1d29      	adds	r1, r5, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
   179ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(&sep->features[0],
   179b0:	f00c b9fa 	b.w	23da8 <memcpy>
}
   179b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   179b8:	2100      	movs	r1, #0
   179ba:	f00c ba00 	b.w	23dbe <memset>
}
   179be:	bd70      	pop	{r4, r5, r6, pc}
   179c0:	200004d8 	.word	0x200004d8
   179c4:	200004e0 	.word	0x200004e0

000179c8 <hci_cmd_complete>:
{
   179c8:	b538      	push	{r3, r4, r5, lr}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   179ca:	4b06      	ldr	r3, [pc, #24]	; (179e4 <hci_cmd_complete+0x1c>)
{
   179cc:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   179ce:	8818      	ldrh	r0, [r3, #0]
{
   179d0:	460c      	mov	r4, r1
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   179d2:	f00c fd39 	bl	24448 <bt_hci_cmd_complete_create>
   179d6:	4621      	mov	r1, r4
   179d8:	6028      	str	r0, [r5, #0]
}
   179da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   179de:	3008      	adds	r0, #8
   179e0:	f010 bc32 	b.w	28248 <net_buf_simple_add>
   179e4:	20003726 	.word	0x20003726

000179e8 <hci_vendor_cmd_handle_common>:
{
   179e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (ocf) {
   179ea:	3801      	subs	r0, #1
{
   179ec:	b087      	sub	sp, #28
   179ee:	4614      	mov	r4, r2
	switch (ocf) {
   179f0:	2809      	cmp	r0, #9
   179f2:	d87c      	bhi.n	17aee <hci_vendor_cmd_handle_common+0x106>
   179f4:	e8df f000 	tbb	[pc, r0]
   179f8:	7b321b05 	.word	0x7b321b05
   179fc:	3e7b597b 	.word	0x3e7b597b
   17a00:	6f62      	.short	0x6f62
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17a02:	210d      	movs	r1, #13
   17a04:	4610      	mov	r0, r2
   17a06:	f7ff ffdf 	bl	179c8 <hci_cmd_complete>
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   17a0a:	2302      	movs	r3, #2
	rp->status = 0x00;
   17a0c:	2100      	movs	r1, #0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   17a0e:	7043      	strb	r3, [r0, #1]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   17a10:	70c3      	strb	r3, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   17a12:	7183      	strb	r3, [r0, #6]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   17a14:	2307      	movs	r3, #7
	rp->status = 0x00;
   17a16:	7001      	strb	r1, [r0, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   17a18:	7081      	strb	r1, [r0, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   17a1a:	7101      	strb	r1, [r0, #4]
	rp->fw_variant = 0U;
   17a1c:	7141      	strb	r1, [r0, #5]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   17a1e:	71c3      	strb	r3, [r0, #7]
   17a20:	7201      	strb	r1, [r0, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   17a22:	7241      	strb	r1, [r0, #9]
   17a24:	7281      	strb	r1, [r0, #10]
   17a26:	72c1      	strb	r1, [r0, #11]
   17a28:	7301      	strb	r1, [r0, #12]
	return 0;
   17a2a:	2400      	movs	r4, #0
}
   17a2c:	e013      	b.n	17a56 <hci_vendor_cmd_handle_common+0x6e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17a2e:	2141      	movs	r1, #65	; 0x41
   17a30:	4610      	mov	r0, r2
   17a32:	f7ff ffc9 	bl	179c8 <hci_cmd_complete>
	rp->status = 0x00;
   17a36:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17a38:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   17a3a:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   17a3c:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   17a40:	4621      	mov	r1, r4
   17a42:	f00c f9bc 	bl	23dbe <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
   17a46:	786b      	ldrb	r3, [r5, #1]
   17a48:	f063 0358 	orn	r3, r3, #88	; 0x58
   17a4c:	706b      	strb	r3, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   17a4e:	78ab      	ldrb	r3, [r5, #2]
   17a50:	f043 0303 	orr.w	r3, r3, #3
   17a54:	70ab      	strb	r3, [r5, #2]
}
   17a56:	4620      	mov	r0, r4
   17a58:	b007      	add	sp, #28
   17a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17a5c:	2109      	movs	r1, #9
   17a5e:	4610      	mov	r0, r2
   17a60:	f7ff ffb2 	bl	179c8 <hci_cmd_complete>
	rp->status = 0x00;
   17a64:	2400      	movs	r4, #0
   17a66:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   17a6a:	2208      	movs	r2, #8
   17a6c:	4621      	mov	r1, r4
   17a6e:	f00c f9a6 	bl	23dbe <memset>
}
   17a72:	e7f0      	b.n	17a56 <hci_vendor_cmd_handle_common+0x6e>
	const char build_info[] = HCI_VS_BUILD_INFO;
   17a74:	4b1f      	ldr	r3, [pc, #124]	; (17af4 <hci_vendor_cmd_handle_common+0x10c>)
   17a76:	aa01      	add	r2, sp, #4
   17a78:	f103 0710 	add.w	r7, r3, #16
   17a7c:	4616      	mov	r6, r2
   17a7e:	6818      	ldr	r0, [r3, #0]
   17a80:	6859      	ldr	r1, [r3, #4]
   17a82:	4615      	mov	r5, r2
   17a84:	c503      	stmia	r5!, {r0, r1}
   17a86:	3308      	adds	r3, #8
   17a88:	42bb      	cmp	r3, r7
   17a8a:	462a      	mov	r2, r5
   17a8c:	d1f7      	bne.n	17a7e <hci_vendor_cmd_handle_common+0x96>
   17a8e:	781b      	ldrb	r3, [r3, #0]
   17a90:	702b      	strb	r3, [r5, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
   17a92:	2112      	movs	r1, #18
   17a94:	4620      	mov	r0, r4
   17a96:	f7ff ff97 	bl	179c8 <hci_cmd_complete>
	rp->status = 0x00;
   17a9a:	2400      	movs	r4, #0
   17a9c:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
   17aa0:	2211      	movs	r2, #17
   17aa2:	4631      	mov	r1, r6
   17aa4:	f00c f980 	bl	23da8 <memcpy>
}
   17aa8:	e7d5      	b.n	17a56 <hci_vendor_cmd_handle_common+0x6e>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
   17aaa:	6889      	ldr	r1, [r1, #8]
   17aac:	2000      	movs	r0, #0
   17aae:	f7ff fda5 	bl	175fc <ll_addr_set>
	*evt = cmd_complete_status(0x00);
   17ab2:	2000      	movs	r0, #0
   17ab4:	f7ff ff48 	bl	17948 <cmd_complete_status>
   17ab8:	6020      	str	r0, [r4, #0]
   17aba:	e7b6      	b.n	17a2a <hci_vendor_cmd_handle_common+0x42>
	rp = hci_cmd_complete(evt, sizeof(*rp) +
   17abc:	2118      	movs	r1, #24
   17abe:	4610      	mov	r0, r2
   17ac0:	f7ff ff82 	bl	179c8 <hci_cmd_complete>
	rp->status = 0x00;
   17ac4:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp) +
   17ac6:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   17ac8:	2101      	movs	r1, #1
	rp->status = 0x00;
   17aca:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   17ace:	f010 fa66 	bl	27f9e <hci_vendor_read_static_addr>
   17ad2:	7068      	strb	r0, [r5, #1]
}
   17ad4:	e7bf      	b.n	17a56 <hci_vendor_cmd_handle_common+0x6e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17ad6:	2121      	movs	r1, #33	; 0x21
   17ad8:	4610      	mov	r0, r2
   17ada:	f7ff ff75 	bl	179c8 <hci_cmd_complete>
	rp->status = 0x00;
   17ade:	4601      	mov	r1, r0
   17ae0:	2400      	movs	r4, #0
   17ae2:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
   17ae6:	3001      	adds	r0, #1
   17ae8:	f010 faaf 	bl	2804a <hci_vendor_read_key_hierarchy_roots>
}
   17aec:	e7b3      	b.n	17a56 <hci_vendor_cmd_handle_common+0x6e>
	switch (ocf) {
   17aee:	f06f 0415 	mvn.w	r4, #21
   17af2:	e7b0      	b.n	17a56 <hci_vendor_cmd_handle_common+0x6e>
   17af4:	0002f124 	.word	0x0002f124

00017af8 <hci_cmd_handle>:
{
   17af8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
   17afa:	8983      	ldrh	r3, [r0, #12]
{
   17afc:	b08b      	sub	sp, #44	; 0x2c
	struct net_buf *evt = NULL;
   17afe:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
   17b00:	2b02      	cmp	r3, #2
{
   17b02:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
   17b04:	9505      	str	r5, [sp, #20]
	if (cmd->len < sizeof(*chdr)) {
   17b06:	d80c      	bhi.n	17b22 <hci_cmd_handle+0x2a>
   17b08:	49be      	ldr	r1, [pc, #760]	; (17e04 <hci_cmd_handle+0x30c>)
   17b0a:	4bbf      	ldr	r3, [pc, #764]	; (17e08 <hci_cmd_handle+0x310>)
		BT_ERR("No HCI Command header");
   17b0c:	48bf      	ldr	r0, [pc, #764]	; (17e0c <hci_cmd_handle+0x314>)
   17b0e:	1ac9      	subs	r1, r1, r3
   17b10:	08c9      	lsrs	r1, r1, #3
   17b12:	0189      	lsls	r1, r1, #6
   17b14:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid HCI CMD packet length");
   17b18:	f009 ffe7 	bl	21aea <log_0>
		return NULL;
   17b1c:	4628      	mov	r0, r5
}
   17b1e:	b00b      	add	sp, #44	; 0x2c
   17b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   17b22:	2103      	movs	r1, #3
   17b24:	3008      	adds	r0, #8
   17b26:	f010 fc07 	bl	28338 <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
   17b2a:	89a2      	ldrh	r2, [r4, #12]
   17b2c:	7883      	ldrb	r3, [r0, #2]
   17b2e:	429a      	cmp	r2, r3
   17b30:	d208      	bcs.n	17b44 <hci_cmd_handle+0x4c>
   17b32:	49b4      	ldr	r1, [pc, #720]	; (17e04 <hci_cmd_handle+0x30c>)
   17b34:	4bb4      	ldr	r3, [pc, #720]	; (17e08 <hci_cmd_handle+0x310>)
		BT_ERR("Invalid HCI CMD packet length");
   17b36:	48b6      	ldr	r0, [pc, #728]	; (17e10 <hci_cmd_handle+0x318>)
   17b38:	1ac9      	subs	r1, r1, r3
   17b3a:	08c9      	lsrs	r1, r1, #3
   17b3c:	0189      	lsls	r1, r1, #6
   17b3e:	f041 0101 	orr.w	r1, r1, #1
   17b42:	e7e9      	b.n	17b18 <hci_cmd_handle+0x20>
	_opcode = sys_le16_to_cpu(chdr->opcode);
   17b44:	8803      	ldrh	r3, [r0, #0]
   17b46:	4ab3      	ldr	r2, [pc, #716]	; (17e14 <hci_cmd_handle+0x31c>)
	ocf = BT_OCF(_opcode);
   17b48:	f3c3 0009 	ubfx	r0, r3, #0, #10
	_opcode = sys_le16_to_cpu(chdr->opcode);
   17b4c:	8013      	strh	r3, [r2, #0]
	switch (BT_OGF(_opcode)) {
   17b4e:	f3c3 2385 	ubfx	r3, r3, #10, #6
   17b52:	2b08      	cmp	r3, #8
   17b54:	d80d      	bhi.n	17b72 <hci_cmd_handle+0x7a>
   17b56:	b17b      	cbz	r3, 17b78 <hci_cmd_handle+0x80>
   17b58:	3b01      	subs	r3, #1
   17b5a:	2b07      	cmp	r3, #7
   17b5c:	d80c      	bhi.n	17b78 <hci_cmd_handle+0x80>
   17b5e:	e8df f013 	tbh	[pc, r3, lsl #1]
   17b62:	000d      	.short	0x000d
   17b64:	001e000b 	.word	0x001e000b
   17b68:	000b005d 	.word	0x000b005d
   17b6c:	000b000b 	.word	0x000b000b
   17b70:	00e3      	.short	0x00e3
   17b72:	2b3f      	cmp	r3, #63	; 0x3f
   17b74:	f000 823a 	beq.w	17fec <hci_cmd_handle+0x4f4>
		evt = cmd_status(BT_HCI_ERR_UNKNOWN_CMD);
   17b78:	2001      	movs	r0, #1
   17b7a:	e00d      	b.n	17b98 <hci_cmd_handle+0xa0>
	switch (ocf) {
   17b7c:	2806      	cmp	r0, #6
   17b7e:	d006      	beq.n	17b8e <hci_cmd_handle+0x96>
   17b80:	281d      	cmp	r0, #29
   17b82:	d1f9      	bne.n	17b78 <hci_cmd_handle+0x80>
	handle = sys_le16_to_cpu(cmd->handle);
   17b84:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
   17b86:	8818      	ldrh	r0, [r3, #0]
   17b88:	f00f fee2 	bl	27950 <ll_version_ind_send>
	*evt = cmd_status(status);
   17b8c:	e004      	b.n	17b98 <hci_cmd_handle+0xa0>
		disconnect(cmd, evt);
   17b8e:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
   17b90:	7899      	ldrb	r1, [r3, #2]
   17b92:	8818      	ldrh	r0, [r3, #0]
   17b94:	f002 fb74 	bl	1a280 <ll_terminate_ind_send>
		evt = cmd_status(BT_HCI_ERR_UNKNOWN_CMD);
   17b98:	f7ff fee8 	bl	1796c <cmd_status>
   17b9c:	e022      	b.n	17be4 <hci_cmd_handle+0xec>
	switch (ocf) {
   17b9e:	282d      	cmp	r0, #45	; 0x2d
   17ba0:	d029      	beq.n	17bf6 <hci_cmd_handle+0xfe>
   17ba2:	d81a      	bhi.n	17bda <hci_cmd_handle+0xe2>
   17ba4:	2801      	cmp	r0, #1
   17ba6:	d01f      	beq.n	17be8 <hci_cmd_handle+0xf0>
   17ba8:	2803      	cmp	r0, #3
   17baa:	d1e5      	bne.n	17b78 <hci_cmd_handle+0x80>
	event_mask = DEFAULT_EVENT_MASK;
   17bac:	4b9a      	ldr	r3, [pc, #616]	; (17e18 <hci_cmd_handle+0x320>)
   17bae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17bb2:	f641 71ff 	movw	r1, #8191	; 0x1fff
   17bb6:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   17bba:	4b98      	ldr	r3, [pc, #608]	; (17e1c <hci_cmd_handle+0x324>)
   17bbc:	201f      	movs	r0, #31
   17bbe:	2100      	movs	r1, #0
   17bc0:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
   17bc4:	f000 ff78 	bl	18ab8 <ll_reset>
		*evt = cmd_complete_status(0x00);
   17bc8:	2000      	movs	r0, #0
   17bca:	f7ff febd 	bl	17948 <cmd_complete_status>
	conn_count = 0U;
   17bce:	4b94      	ldr	r3, [pc, #592]	; (17e20 <hci_cmd_handle+0x328>)
		*evt = cmd_complete_status(0x00);
   17bd0:	9005      	str	r0, [sp, #20]
	conn_count = 0U;
   17bd2:	2200      	movs	r2, #0
   17bd4:	601a      	str	r2, [r3, #0]
	return evt;
   17bd6:	9805      	ldr	r0, [sp, #20]
   17bd8:	e7a1      	b.n	17b1e <hci_cmd_handle+0x26>
	switch (ocf) {
   17bda:	2863      	cmp	r0, #99	; 0x63
   17bdc:	d1cc      	bne.n	17b78 <hci_cmd_handle+0x80>
	*evt = cmd_complete_status(0x00);
   17bde:	2000      	movs	r0, #0
	*evt = cmd_complete_status(status);
   17be0:	f7ff feb2 	bl	17948 <cmd_complete_status>
		evt = cmd_status(BT_HCI_ERR_UNKNOWN_CMD);
   17be4:	9005      	str	r0, [sp, #20]
   17be6:	e7f6      	b.n	17bd6 <hci_cmd_handle+0xde>
	event_mask = sys_get_le64(cmd->events);
   17be8:	68a0      	ldr	r0, [r4, #8]
   17bea:	f00f fc03 	bl	273f4 <sys_get_le64>
   17bee:	4b8a      	ldr	r3, [pc, #552]	; (17e18 <hci_cmd_handle+0x320>)
	le_event_mask = sys_get_le64(cmd->events);
   17bf0:	e9c3 0100 	strd	r0, r1, [r3]
   17bf4:	e7f3      	b.n	17bde <hci_cmd_handle+0xe6>
		read_tx_power_level(cmd, evt);
   17bf6:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17bf8:	2104      	movs	r1, #4
   17bfa:	a805      	add	r0, sp, #20
	handle = sys_le16_to_cpu(cmd->handle);
   17bfc:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
   17bfe:	789f      	ldrb	r7, [r3, #2]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17c00:	f7ff fee2 	bl	179c8 <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
   17c04:	b2ae      	uxth	r6, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17c06:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
   17c08:	1cc3      	adds	r3, r0, #3
   17c0a:	463a      	mov	r2, r7
   17c0c:	4631      	mov	r1, r6
   17c0e:	2002      	movs	r0, #2
   17c10:	f00f fbc5 	bl	2739e <ll_tx_pwr_lvl_get>
	rp->status = status;
   17c14:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
   17c16:	f8a4 5001 	strh.w	r5, [r4, #1]
	if (err == -EINVAL) {
   17c1a:	e7dc      	b.n	17bd6 <hci_cmd_handle+0xde>
	switch (ocf) {
   17c1c:	3801      	subs	r0, #1
   17c1e:	2808      	cmp	r0, #8
   17c20:	d8aa      	bhi.n	17b78 <hci_cmd_handle+0x80>
   17c22:	a301      	add	r3, pc, #4	; (adr r3, 17c28 <hci_cmd_handle+0x130>)
   17c24:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   17c28:	00017c4d 	.word	0x00017c4d
   17c2c:	00017c77 	.word	0x00017c77
   17c30:	00017cf7 	.word	0x00017cf7
   17c34:	00017b79 	.word	0x00017b79
   17c38:	00017b79 	.word	0x00017b79
   17c3c:	00017b79 	.word	0x00017b79
   17c40:	00017b79 	.word	0x00017b79
   17c44:	00017b79 	.word	0x00017b79
   17c48:	00017d13 	.word	0x00017d13
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17c4c:	2109      	movs	r1, #9
   17c4e:	a805      	add	r0, sp, #20
   17c50:	f7ff feba 	bl	179c8 <hci_cmd_complete>
	rp->status = 0x00;
   17c54:	2300      	movs	r3, #0
   17c56:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
   17c58:	7083      	strb	r3, [r0, #2]
   17c5a:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   17c5c:	f06f 030e 	mvn.w	r3, #14
	rp->hci_version = LL_VERSION_NUMBER;
   17c60:	220c      	movs	r2, #12
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   17c62:	7143      	strb	r3, [r0, #5]
   17c64:	2305      	movs	r3, #5
   17c66:	7183      	strb	r3, [r0, #6]
	rp->hci_version = LL_VERSION_NUMBER;
   17c68:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = LL_VERSION_NUMBER;
   17c6a:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   17c6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	dst[0] = val;
   17c70:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
   17c72:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
   17c74:	e7af      	b.n	17bd6 <hci_cmd_handle+0xde>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17c76:	2141      	movs	r1, #65	; 0x41
   17c78:	a805      	add	r0, sp, #20
   17c7a:	f7ff fea5 	bl	179c8 <hci_cmd_complete>
	rp->status = 0x00;
   17c7e:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17c80:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   17c82:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   17c84:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   17c88:	f00c f899 	bl	23dbe <memset>
	rp->commands[5] |= BIT(6) | BIT(7);
   17c8c:	79a3      	ldrb	r3, [r4, #6]
	rp->commands[26] |= BIT(6) | BIT(7);
   17c8e:	7ee2      	ldrb	r2, [r4, #27]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
   17c90:	7ea1      	ldrb	r1, [r4, #26]
	rp->commands[28] |= BIT(3);
   17c92:	7f60      	ldrb	r0, [r4, #29]
	rp->commands[5] |= BIT(6) | BIT(7);
   17c94:	f063 033f 	orn	r3, r3, #63	; 0x3f
   17c98:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
   17c9a:	7ae3      	ldrb	r3, [r4, #11]
   17c9c:	f043 0304 	orr.w	r3, r3, #4
   17ca0:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
   17ca2:	7be3      	ldrb	r3, [r4, #15]
   17ca4:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   17ca8:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
   17caa:	7c23      	ldrb	r3, [r4, #16]
   17cac:	f043 0302 	orr.w	r3, r3, #2
   17cb0:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
   17cb2:	7de3      	ldrb	r3, [r4, #23]
   17cb4:	f043 0304 	orr.w	r3, r3, #4
   17cb8:	75e3      	strb	r3, [r4, #23]
	rp->commands[27] |= BIT(0) | BIT(1);
   17cba:	7f23      	ldrb	r3, [r4, #28]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   17cbc:	f063 0308 	orn	r3, r3, #8
   17cc0:	7723      	strb	r3, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
   17cc2:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[26] |= BIT(2) | BIT(3);
   17cc6:	f062 0230 	orn	r2, r2, #48	; 0x30
	rp->commands[33] |= BIT(4) | BIT(5);
   17cca:	f043 0330 	orr.w	r3, r3, #48	; 0x30
	rp->commands[26] |= BIT(2) | BIT(3);
   17cce:	76e2      	strb	r2, [r4, #27]
	rp->commands[33] |= BIT(4) | BIT(5);
   17cd0:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[0] |= BIT(5);
   17cd4:	7862      	ldrb	r2, [r4, #1]
	rp->commands[38] |= BIT(7);
   17cd6:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[28] |= BIT(3);
   17cda:	f040 0008 	orr.w	r0, r0, #8
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   17cde:	f061 0108 	orn	r1, r1, #8
	rp->commands[0] |= BIT(5);
   17ce2:	f042 0220 	orr.w	r2, r2, #32
	rp->commands[38] |= BIT(7);
   17ce6:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[28] |= BIT(3);
   17cea:	7760      	strb	r0, [r4, #29]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   17cec:	76a1      	strb	r1, [r4, #26]
	rp->commands[0] |= BIT(5);
   17cee:	7062      	strb	r2, [r4, #1]
	rp->commands[38] |= BIT(7);
   17cf0:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	if (err == -EINVAL) {
   17cf4:	e76f      	b.n	17bd6 <hci_cmd_handle+0xde>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17cf6:	2109      	movs	r1, #9
   17cf8:	a805      	add	r0, sp, #20
   17cfa:	f7ff fe65 	bl	179c8 <hci_cmd_complete>
	rp->status = 0x00;
   17cfe:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17d00:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   17d02:	2208      	movs	r2, #8
	rp->status = 0x00;
   17d04:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   17d08:	f00c f859 	bl	23dbe <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
   17d0c:	2360      	movs	r3, #96	; 0x60
   17d0e:	7163      	strb	r3, [r4, #5]
	if (err == -EINVAL) {
   17d10:	e761      	b.n	17bd6 <hci_cmd_handle+0xde>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17d12:	2107      	movs	r1, #7
   17d14:	a805      	add	r0, sp, #20
   17d16:	f7ff fe57 	bl	179c8 <hci_cmd_complete>
   17d1a:	4601      	mov	r1, r0
	rp->status = 0x00;
   17d1c:	2000      	movs	r0, #0
   17d1e:	f801 0b01 	strb.w	r0, [r1], #1
	(void)ll_addr_read(0, &rp->bdaddr.val[0]);
   17d22:	f00f fb2f 	bl	27384 <ll_addr_read>
	if (err == -EINVAL) {
   17d26:	e756      	b.n	17bd6 <hci_cmd_handle+0xde>
	switch (ocf) {
   17d28:	2821      	cmp	r0, #33	; 0x21
   17d2a:	d84b      	bhi.n	17dc4 <hci_cmd_handle+0x2cc>
   17d2c:	2800      	cmp	r0, #0
   17d2e:	f43f af23 	beq.w	17b78 <hci_cmd_handle+0x80>
   17d32:	3801      	subs	r0, #1
   17d34:	2820      	cmp	r0, #32
   17d36:	f63f af1f 	bhi.w	17b78 <hci_cmd_handle+0x80>
   17d3a:	a301      	add	r3, pc, #4	; (adr r3, 17d40 <hci_cmd_handle+0x248>)
   17d3c:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   17d40:	00017de3 	.word	0x00017de3
   17d44:	00017ded 	.word	0x00017ded
   17d48:	00017e25 	.word	0x00017e25
   17d4c:	00017b79 	.word	0x00017b79
   17d50:	00017e61 	.word	0x00017e61
   17d54:	00017ef9 	.word	0x00017ef9
   17d58:	00017f15 	.word	0x00017f15
   17d5c:	00017f25 	.word	0x00017f25
   17d60:	00017f31 	.word	0x00017f31
   17d64:	00017f3d 	.word	0x00017f3d
   17d68:	00017f47 	.word	0x00017f47
   17d6c:	00017f5f 	.word	0x00017f5f
   17d70:	00017b79 	.word	0x00017b79
   17d74:	00017b79 	.word	0x00017b79
   17d78:	00017e6b 	.word	0x00017e6b
   17d7c:	00017e81 	.word	0x00017e81
   17d80:	00017e87 	.word	0x00017e87
   17d84:	00017e8f 	.word	0x00017e8f
   17d88:	00017f93 	.word	0x00017f93
   17d8c:	00017b79 	.word	0x00017b79
   17d90:	00017f6f 	.word	0x00017f6f
   17d94:	00017f89 	.word	0x00017f89
   17d98:	00017e97 	.word	0x00017e97
   17d9c:	00017ebd 	.word	0x00017ebd
   17da0:	00017b79 	.word	0x00017b79
   17da4:	00017b79 	.word	0x00017b79
   17da8:	00017b79 	.word	0x00017b79
   17dac:	00017ed3 	.word	0x00017ed3
   17db0:	00017b79 	.word	0x00017b79
   17db4:	00017b79 	.word	0x00017b79
   17db8:	00017b79 	.word	0x00017b79
   17dbc:	00017faf 	.word	0x00017faf
   17dc0:	00017fdd 	.word	0x00017fdd
   17dc4:	284b      	cmp	r0, #75	; 0x4b
   17dc6:	f47f aed7 	bne.w	17b78 <hci_cmd_handle+0x80>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17dca:	2103      	movs	r1, #3
   17dcc:	a805      	add	r0, sp, #20
   17dce:	f7ff fdfb 	bl	179c8 <hci_cmd_complete>
	rp->status = 0x00;
   17dd2:	4601      	mov	r1, r0
   17dd4:	2300      	movs	r3, #0
   17dd6:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   17dda:	3001      	adds	r0, #1
   17ddc:	f00f faee 	bl	273bc <ll_tx_pwr_get>
	if (err == -EINVAL) {
   17de0:	e6f9      	b.n	17bd6 <hci_cmd_handle+0xde>
	le_event_mask = sys_get_le64(cmd->events);
   17de2:	68a0      	ldr	r0, [r4, #8]
   17de4:	f00f fb06 	bl	273f4 <sys_get_le64>
   17de8:	4b0c      	ldr	r3, [pc, #48]	; (17e1c <hci_cmd_handle+0x324>)
   17dea:	e701      	b.n	17bf0 <hci_cmd_handle+0xf8>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17dec:	2104      	movs	r1, #4
   17dee:	a805      	add	r0, sp, #20
   17df0:	f7ff fdea 	bl	179c8 <hci_cmd_complete>
	rp->status = 0x00;
   17df4:	2300      	movs	r3, #0
   17df6:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_TX_SIZE);
   17df8:	221b      	movs	r2, #27
   17dfa:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
   17dfc:	2304      	movs	r3, #4
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_TX_SIZE);
   17dfe:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
   17e00:	70c3      	strb	r3, [r0, #3]
	if (err == -EINVAL) {
   17e02:	e6e8      	b.n	17bd6 <hci_cmd_handle+0xde>
   17e04:	000298c0 	.word	0x000298c0
   17e08:	00029870 	.word	0x00029870
   17e0c:	0002f135 	.word	0x0002f135
   17e10:	0002f14b 	.word	0x0002f14b
   17e14:	20003726 	.word	0x20003726
   17e18:	200004d8 	.word	0x200004d8
   17e1c:	200004e0 	.word	0x200004e0
   17e20:	20002610 	.word	0x20002610
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17e24:	2109      	movs	r1, #9
   17e26:	a805      	add	r0, sp, #20
   17e28:	f7ff fdce 	bl	179c8 <hci_cmd_complete>
	rp->status = 0x00;
   17e2c:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17e2e:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   17e30:	2208      	movs	r2, #8
	rp->status = 0x00;
   17e32:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   17e36:	f00b ffc2 	bl	23dbe <memset>
	sys_put_le64(ll_feat_get(), rp->features);
   17e3a:	f00f fafd 	bl	27438 <ll_feat_get>
   17e3e:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   17e42:	7060      	strb	r0, [r4, #1]
	dst[1] = val >> 8;
   17e44:	70a3      	strb	r3, [r4, #2]
	sys_put_le16(val >> 16, &dst[2]);
   17e46:	0c00      	lsrs	r0, r0, #16
	dst[1] = val >> 8;
   17e48:	f3c1 2307 	ubfx	r3, r1, #8, #8
	dst[0] = val;
   17e4c:	7161      	strb	r1, [r4, #5]
	sys_put_le16(val >> 16, &dst[2]);
   17e4e:	0c09      	lsrs	r1, r1, #16
	dst[0] = val;
   17e50:	70e0      	strb	r0, [r4, #3]
   17e52:	71e1      	strb	r1, [r4, #7]
	dst[1] = val >> 8;
   17e54:	0a00      	lsrs	r0, r0, #8
   17e56:	0a09      	lsrs	r1, r1, #8
   17e58:	7120      	strb	r0, [r4, #4]
   17e5a:	71a3      	strb	r3, [r4, #6]
   17e5c:	7221      	strb	r1, [r4, #8]
	if (err == -EINVAL) {
   17e5e:	e6ba      	b.n	17bd6 <hci_cmd_handle+0xde>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   17e60:	68a1      	ldr	r1, [r4, #8]
   17e62:	2001      	movs	r0, #1
   17e64:	f7ff fbca 	bl	175fc <ll_addr_set>
	*evt = cmd_complete_status(status);
   17e68:	e6ba      	b.n	17be0 <hci_cmd_handle+0xe8>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17e6a:	2102      	movs	r1, #2
   17e6c:	a805      	add	r0, sp, #20
   17e6e:	f7ff fdab 	bl	179c8 <hci_cmd_complete>
	rp->status = 0x00;
   17e72:	2300      	movs	r3, #0
   17e74:	7003      	strb	r3, [r0, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17e76:	4604      	mov	r4, r0
	rp->fal_size = ll_fal_size_get();
   17e78:	f00f fdc9 	bl	27a0e <ll_fal_size_get>
   17e7c:	7060      	strb	r0, [r4, #1]
	if (err == -EINVAL) {
   17e7e:	e6aa      	b.n	17bd6 <hci_cmd_handle+0xde>
	status = ll_fal_clear();
   17e80:	f003 fa70 	bl	1b364 <ll_fal_clear>
	*evt = cmd_complete_status(status);
   17e84:	e6ac      	b.n	17be0 <hci_cmd_handle+0xe8>
	status = ll_fal_add(&cmd->addr);
   17e86:	68a0      	ldr	r0, [r4, #8]
   17e88:	f003 fa82 	bl	1b390 <ll_fal_add>
	*evt = cmd_complete_status(status);
   17e8c:	e6a8      	b.n	17be0 <hci_cmd_handle+0xe8>
	status = ll_fal_remove(&cmd->addr);
   17e8e:	68a0      	ldr	r0, [r4, #8]
   17e90:	f003 fab8 	bl	1b404 <ll_fal_remove>
	*evt = cmd_complete_status(status);
   17e94:	e6a4      	b.n	17be0 <hci_cmd_handle+0xe8>
		le_encrypt(cmd, evt);
   17e96:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   17e98:	aa06      	add	r2, sp, #24
   17e9a:	2300      	movs	r3, #0
   17e9c:	f100 0110 	add.w	r1, r0, #16
   17ea0:	f010 f811 	bl	27ec6 <ecb_encrypt>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17ea4:	2111      	movs	r1, #17
   17ea6:	a805      	add	r0, sp, #20
   17ea8:	f7ff fd8e 	bl	179c8 <hci_cmd_complete>
	rp->status = 0x00;
   17eac:	2300      	movs	r3, #0
   17eae:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
   17eb2:	2210      	movs	r2, #16
   17eb4:	a906      	add	r1, sp, #24
   17eb6:	f00b ff77 	bl	23da8 <memcpy>
	if (err == -EINVAL) {
   17eba:	e68c      	b.n	17bd6 <hci_cmd_handle+0xde>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17ebc:	2109      	movs	r1, #9
   17ebe:	a805      	add	r0, sp, #20
   17ec0:	f7ff fd82 	bl	179c8 <hci_cmd_complete>
	rp->status = 0x00;
   17ec4:	2300      	movs	r3, #0
   17ec6:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
   17eca:	2108      	movs	r1, #8
   17ecc:	f003 fd32 	bl	1b934 <lll_csrand_get>
	if (err == -EINVAL) {
   17ed0:	e681      	b.n	17bd6 <hci_cmd_handle+0xde>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17ed2:	2109      	movs	r1, #9
   17ed4:	a805      	add	r0, sp, #20
   17ed6:	f7ff fd77 	bl	179c8 <hci_cmd_complete>
	dst[0] = val;
   17eda:	22bf      	movs	r2, #191	; 0xbf
   17edc:	7042      	strb	r2, [r0, #1]
	dst[1] = val >> 8;
   17ede:	22ff      	movs	r2, #255	; 0xff
   17ee0:	7082      	strb	r2, [r0, #2]
	dst[0] = val;
   17ee2:	2230      	movs	r2, #48	; 0x30
   17ee4:	70c2      	strb	r2, [r0, #3]
	dst[1] = val >> 8;
   17ee6:	22ec      	movs	r2, #236	; 0xec
   17ee8:	7102      	strb	r2, [r0, #4]
	dst[0] = val;
   17eea:	22c0      	movs	r2, #192	; 0xc0
	rp->status = 0x00;
   17eec:	2300      	movs	r3, #0
   17eee:	7142      	strb	r2, [r0, #5]
	dst[1] = val >> 8;
   17ef0:	2201      	movs	r2, #1
   17ef2:	7003      	strb	r3, [r0, #0]
   17ef4:	7182      	strb	r2, [r0, #6]
   17ef6:	e6bb      	b.n	17c70 <hci_cmd_handle+0x178>
		le_set_adv_param(cmd, evt);
   17ef8:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
   17efa:	7ba5      	ldrb	r5, [r4, #14]
   17efc:	79a3      	ldrb	r3, [r4, #6]
   17efe:	7962      	ldrb	r2, [r4, #5]
   17f00:	7921      	ldrb	r1, [r4, #4]
   17f02:	8820      	ldrh	r0, [r4, #0]
   17f04:	9502      	str	r5, [sp, #8]
   17f06:	7b65      	ldrb	r5, [r4, #13]
   17f08:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
   17f0a:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
   17f0c:	9400      	str	r4, [sp, #0]
   17f0e:	f001 fd41 	bl	19994 <ll_adv_params_set>
	*evt = cmd_complete_status(status);
   17f12:	e665      	b.n	17be0 <hci_cmd_handle+0xe8>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17f14:	2102      	movs	r1, #2
   17f16:	a805      	add	r0, sp, #20
   17f18:	f7ff fd56 	bl	179c8 <hci_cmd_complete>
	rp->status = 0x00;
   17f1c:	2300      	movs	r3, #0
   17f1e:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
   17f20:	7043      	strb	r3, [r0, #1]
	if (err == -EINVAL) {
   17f22:	e658      	b.n	17bd6 <hci_cmd_handle+0xde>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
   17f24:	68a1      	ldr	r1, [r4, #8]
   17f26:	f811 0b01 	ldrb.w	r0, [r1], #1
   17f2a:	f001 fec3 	bl	19cb4 <ll_adv_data_set>
	*evt = cmd_complete_status(status);
   17f2e:	e657      	b.n	17be0 <hci_cmd_handle+0xe8>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
   17f30:	68a1      	ldr	r1, [r4, #8]
   17f32:	f811 0b01 	ldrb.w	r0, [r1], #1
   17f36:	f001 fec5 	bl	19cc4 <ll_adv_scan_rsp_set>
	*evt = cmd_complete_status(status);
   17f3a:	e651      	b.n	17be0 <hci_cmd_handle+0xe8>
	status = ll_adv_enable(cmd->enable);
   17f3c:	68a3      	ldr	r3, [r4, #8]
   17f3e:	7818      	ldrb	r0, [r3, #0]
   17f40:	f7e8 faf2 	bl	528 <ll_adv_enable>
	*evt = cmd_complete_status(status);
   17f44:	e64c      	b.n	17be0 <hci_cmd_handle+0xe8>
		le_set_scan_param(cmd, evt);
   17f46:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
   17f48:	7963      	ldrb	r3, [r4, #5]
   17f4a:	f8b4 2003 	ldrh.w	r2, [r4, #3]
   17f4e:	f8b4 1001 	ldrh.w	r1, [r4, #1]
   17f52:	7820      	ldrb	r0, [r4, #0]
   17f54:	79a4      	ldrb	r4, [r4, #6]
   17f56:	9400      	str	r4, [sp, #0]
   17f58:	f7e8 fd62 	bl	a20 <ll_scan_params_set>
	*evt = cmd_complete_status(status);
   17f5c:	e640      	b.n	17be0 <hci_cmd_handle+0xe8>
	status = ll_scan_enable(cmd->enable);
   17f5e:	68a3      	ldr	r3, [r4, #8]
   17f60:	7818      	ldrb	r0, [r3, #0]
   17f62:	f00f fbaa 	bl	276ba <ll_scan_enable>
		status = BT_HCI_ERR_SUCCESS;
   17f66:	280c      	cmp	r0, #12
	*evt = cmd_complete_status(status);
   17f68:	bf08      	it	eq
   17f6a:	2000      	moveq	r0, #0
   17f6c:	e638      	b.n	17be0 <hci_cmd_handle+0xe8>
	handle = sys_le16_to_cpu(cmd->handle);
   17f6e:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17f70:	2108      	movs	r1, #8
   17f72:	a805      	add	r0, sp, #20
	handle = sys_le16_to_cpu(cmd->handle);
   17f74:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17f76:	f7ff fd27 	bl	179c8 <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
   17f7a:	b2ae      	uxth	r6, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17f7c:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
   17f7e:	1cc1      	adds	r1, r0, #3
   17f80:	4630      	mov	r0, r6
   17f82:	f00f fcb3 	bl	278ec <ll_chm_get>
   17f86:	e645      	b.n	17c14 <hci_cmd_handle+0x11c>
	handle = sys_le16_to_cpu(cmd->handle);
   17f88:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
   17f8a:	8818      	ldrh	r0, [r3, #0]
   17f8c:	f00f fcc5 	bl	2791a <ll_feature_req_send>
	*evt = cmd_status(status);
   17f90:	e602      	b.n	17b98 <hci_cmd_handle+0xa0>
		le_conn_update(cmd, evt);
   17f92:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
   17f94:	8911      	ldrh	r1, [r2, #8]
   17f96:	8853      	ldrh	r3, [r2, #2]
   17f98:	8810      	ldrh	r0, [r2, #0]
   17f9a:	9102      	str	r1, [sp, #8]
   17f9c:	88d1      	ldrh	r1, [r2, #6]
   17f9e:	9101      	str	r1, [sp, #4]
   17fa0:	8892      	ldrh	r2, [r2, #4]
   17fa2:	9200      	str	r2, [sp, #0]
   17fa4:	2200      	movs	r2, #0
   17fa6:	4611      	mov	r1, r2
   17fa8:	f00f fc1b 	bl	277e2 <ll_conn_update>
	*evt = cmd_status(status);
   17fac:	e5f4      	b.n	17b98 <hci_cmd_handle+0xa0>
		le_conn_param_req_reply(cmd, evt);
   17fae:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   17fb0:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   17fb2:	8815      	ldrh	r5, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   17fb4:	8853      	ldrh	r3, [r2, #2]
   17fb6:	9102      	str	r1, [sp, #8]
   17fb8:	88d1      	ldrh	r1, [r2, #6]
   17fba:	9101      	str	r1, [sp, #4]
   17fbc:	8892      	ldrh	r2, [r2, #4]
   17fbe:	9200      	str	r2, [sp, #0]
   17fc0:	2200      	movs	r2, #0
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   17fc2:	2102      	movs	r1, #2
   17fc4:	b2a8      	uxth	r0, r5
   17fc6:	f00f fc0c 	bl	277e2 <ll_conn_update>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17fca:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   17fcc:	4604      	mov	r4, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17fce:	a805      	add	r0, sp, #20
   17fd0:	f7ff fcfa 	bl	179c8 <hci_cmd_complete>
	rp->status = status;
   17fd4:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   17fd6:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (err == -EINVAL) {
   17fda:	e5fc      	b.n	17bd6 <hci_cmd_handle+0xde>
		le_conn_param_req_neg_reply(cmd, evt);
   17fdc:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   17fde:	881d      	ldrh	r5, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   17fe0:	789a      	ldrb	r2, [r3, #2]
   17fe2:	2300      	movs	r3, #0
   17fe4:	e9cd 3301 	strd	r3, r3, [sp, #4]
   17fe8:	9300      	str	r3, [sp, #0]
   17fea:	e7ea      	b.n	17fc2 <hci_cmd_handle+0x4ca>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
   17fec:	aa05      	add	r2, sp, #20
   17fee:	4621      	mov	r1, r4
   17ff0:	f7ff fcfa 	bl	179e8 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
   17ff4:	3016      	adds	r0, #22
   17ff6:	f43f adbf 	beq.w	17b78 <hci_cmd_handle+0x80>
   17ffa:	e5ec      	b.n	17bd6 <hci_cmd_handle+0xde>

00017ffc <hci_acl_handle>:
{
   17ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
   18000:	2300      	movs	r3, #0
   18002:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   18004:	8983      	ldrh	r3, [r0, #12]
   18006:	2b03      	cmp	r3, #3
{
   18008:	4605      	mov	r5, r0
   1800a:	460e      	mov	r6, r1
	if (buf->len < sizeof(*acl)) {
   1800c:	d80c      	bhi.n	18028 <hci_acl_handle+0x2c>
   1800e:	4943      	ldr	r1, [pc, #268]	; (1811c <hci_acl_handle+0x120>)
   18010:	4b43      	ldr	r3, [pc, #268]	; (18120 <hci_acl_handle+0x124>)
		BT_ERR("No HCI ACL header");
   18012:	4844      	ldr	r0, [pc, #272]	; (18124 <hci_acl_handle+0x128>)
   18014:	1ac9      	subs	r1, r1, r3
   18016:	08c9      	lsrs	r1, r1, #3
   18018:	0189      	lsls	r1, r1, #6
   1801a:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid HCI ACL packet length");
   1801e:	f009 fd64 	bl	21aea <log_0>
		return -EINVAL;
   18022:	f06f 0015 	mvn.w	r0, #21
   18026:	e033      	b.n	18090 <hci_acl_handle+0x94>
   18028:	2104      	movs	r1, #4
   1802a:	3008      	adds	r0, #8
   1802c:	f010 f984 	bl	28338 <net_buf_simple_pull_mem>
	if (buf->len < len) {
   18030:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
   18032:	8847      	ldrh	r7, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
   18034:	f8b0 9000 	ldrh.w	r9, [r0]
	if (buf->len < len) {
   18038:	42bb      	cmp	r3, r7
   1803a:	d208      	bcs.n	1804e <hci_acl_handle+0x52>
   1803c:	4937      	ldr	r1, [pc, #220]	; (1811c <hci_acl_handle+0x120>)
   1803e:	4b38      	ldr	r3, [pc, #224]	; (18120 <hci_acl_handle+0x124>)
		BT_ERR("Invalid HCI ACL packet length");
   18040:	4839      	ldr	r0, [pc, #228]	; (18128 <hci_acl_handle+0x12c>)
   18042:	1ac9      	subs	r1, r1, r3
   18044:	08c9      	lsrs	r1, r1, #3
   18046:	0189      	lsls	r1, r1, #6
   18048:	f041 0101 	orr.w	r1, r1, #1
   1804c:	e7e7      	b.n	1801e <hci_acl_handle+0x22>
	if (len > CONFIG_BT_BUF_ACL_TX_SIZE) {
   1804e:	2f1b      	cmp	r7, #27
   18050:	d908      	bls.n	18064 <hci_acl_handle+0x68>
   18052:	4932      	ldr	r1, [pc, #200]	; (1811c <hci_acl_handle+0x120>)
   18054:	4b32      	ldr	r3, [pc, #200]	; (18120 <hci_acl_handle+0x124>)
		BT_ERR("Invalid HCI ACL Data length");
   18056:	4835      	ldr	r0, [pc, #212]	; (1812c <hci_acl_handle+0x130>)
   18058:	1ac9      	subs	r1, r1, r3
   1805a:	08c9      	lsrs	r1, r1, #3
   1805c:	0189      	lsls	r1, r1, #6
   1805e:	f041 0101 	orr.w	r1, r1, #1
   18062:	e7dc      	b.n	1801e <hci_acl_handle+0x22>
	node_tx = ll_tx_mem_acquire();
   18064:	f002 f8c6 	bl	1a1f4 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
   18068:	ea4f 3819 	mov.w	r8, r9, lsr #12
	if (!node_tx) {
   1806c:	4604      	mov	r4, r0
   1806e:	bb40      	cbnz	r0, 180c2 <hci_acl_handle+0xc6>
   18070:	492b      	ldr	r1, [pc, #172]	; (18120 <hci_acl_handle+0x124>)
   18072:	4b2a      	ldr	r3, [pc, #168]	; (1811c <hci_acl_handle+0x120>)
		BT_ERR("Tx Buffer Overflow");
   18074:	482e      	ldr	r0, [pc, #184]	; (18130 <hci_acl_handle+0x134>)
   18076:	1a5b      	subs	r3, r3, r1
   18078:	08db      	lsrs	r3, r3, #3
   1807a:	019b      	lsls	r3, r3, #6
   1807c:	f043 0101 	orr.w	r1, r3, #1
   18080:	f009 fd33 	bl	21aea <log_0>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   18084:	4b2b      	ldr	r3, [pc, #172]	; (18134 <hci_acl_handle+0x138>)
   18086:	681b      	ldr	r3, [r3, #0]
   18088:	019b      	lsls	r3, r3, #6
   1808a:	d403      	bmi.n	18094 <hci_acl_handle+0x98>
		return -ENOBUFS;
   1808c:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   18090:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   18094:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18098:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1809c:	2001      	movs	r0, #1
   1809e:	f7ed fa45 	bl	552c <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   180a2:	2102      	movs	r1, #2
   180a4:	6030      	str	r0, [r6, #0]
   180a6:	3008      	adds	r0, #8
   180a8:	f010 f8ce 	bl	28248 <net_buf_simple_add>
	hdr->len = len;
   180ac:	2401      	movs	r4, #1
	hdr->evt = evt;
   180ae:	231a      	movs	r3, #26
   180b0:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   180b2:	7044      	strb	r4, [r0, #1]
   180b4:	6830      	ldr	r0, [r6, #0]
   180b6:	4621      	mov	r1, r4
   180b8:	3008      	adds	r0, #8
   180ba:	f010 f8c5 	bl	28248 <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
   180be:	7004      	strb	r4, [r0, #0]
   180c0:	e7e4      	b.n	1808c <hci_acl_handle+0x90>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
   180c2:	ea5f 0398 	movs.w	r3, r8, lsr #2
   180c6:	d1ac      	bne.n	18022 <hci_acl_handle+0x26>
	switch (bt_acl_flags_pb(flags)) {
   180c8:	f1b8 0f00 	cmp.w	r8, #0
   180cc:	d006      	beq.n	180dc <hci_acl_handle+0xe0>
   180ce:	f1b8 0f01 	cmp.w	r8, #1
   180d2:	d1a6      	bne.n	18022 <hci_acl_handle+0x26>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   180d4:	7903      	ldrb	r3, [r0, #4]
   180d6:	f368 0301 	bfi	r3, r8, #0, #2
   180da:	e003      	b.n	180e4 <hci_acl_handle+0xe8>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   180dc:	7903      	ldrb	r3, [r0, #4]
   180de:	2202      	movs	r2, #2
   180e0:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data->len = len;
   180e4:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
   180e6:	68a9      	ldr	r1, [r5, #8]
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   180e8:	7123      	strb	r3, [r4, #4]
	memcpy(&pdu_data->lldata[0], buf->data, len);
   180ea:	463a      	mov	r2, r7
   180ec:	1de0      	adds	r0, r4, #7
   180ee:	f00b fe5b 	bl	23da8 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   180f2:	4621      	mov	r1, r4
   180f4:	f3c9 000b 	ubfx	r0, r9, #0, #12
   180f8:	f002 f888 	bl	1a20c <ll_tx_mem_enqueue>
   180fc:	2800      	cmp	r0, #0
   180fe:	d0c7      	beq.n	18090 <hci_acl_handle+0x94>
   18100:	4b07      	ldr	r3, [pc, #28]	; (18120 <hci_acl_handle+0x124>)
   18102:	4906      	ldr	r1, [pc, #24]	; (1811c <hci_acl_handle+0x120>)
		BT_ERR("Invalid Tx Enqueue");
   18104:	480c      	ldr	r0, [pc, #48]	; (18138 <hci_acl_handle+0x13c>)
   18106:	1ac9      	subs	r1, r1, r3
   18108:	08c9      	lsrs	r1, r1, #3
   1810a:	0189      	lsls	r1, r1, #6
   1810c:	f041 0101 	orr.w	r1, r1, #1
   18110:	f009 fceb 	bl	21aea <log_0>
		ll_tx_mem_release(node_tx);
   18114:	4620      	mov	r0, r4
   18116:	f002 f873 	bl	1a200 <ll_tx_mem_release>
		return -EINVAL;
   1811a:	e782      	b.n	18022 <hci_acl_handle+0x26>
   1811c:	000298c0 	.word	0x000298c0
   18120:	00029870 	.word	0x00029870
   18124:	0002f169 	.word	0x0002f169
   18128:	0002f17b 	.word	0x0002f17b
   1812c:	0002f199 	.word	0x0002f199
   18130:	0002f1b5 	.word	0x0002f1b5
   18134:	200004d8 	.word	0x200004d8
   18138:	0002f1c8 	.word	0x0002f1c8

0001813c <hci_disconn_complete_encode>:
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   1813c:	4b0d      	ldr	r3, [pc, #52]	; (18174 <hci_disconn_complete_encode+0x38>)
   1813e:	681b      	ldr	r3, [r3, #0]
   18140:	06db      	lsls	r3, r3, #27
{
   18142:	b570      	push	{r4, r5, r6, lr}
   18144:	4605      	mov	r5, r0
   18146:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   18148:	d512      	bpl.n	18170 <hci_disconn_complete_encode+0x34>
   1814a:	f102 0408 	add.w	r4, r2, #8
   1814e:	2102      	movs	r1, #2
   18150:	4620      	mov	r0, r4
   18152:	f010 f879 	bl	28248 <net_buf_simple_add>
	hdr->evt = evt;
   18156:	2305      	movs	r3, #5
	hdr->len = len;
   18158:	2104      	movs	r1, #4
	hdr->evt = evt;
   1815a:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1815c:	7041      	strb	r1, [r0, #1]
   1815e:	4620      	mov	r0, r4
   18160:	f010 f872 	bl	28248 <net_buf_simple_add>
	ep->status = 0x00;
   18164:	2300      	movs	r3, #0
   18166:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   18168:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
   1816c:	782b      	ldrb	r3, [r5, #0]
   1816e:	70c3      	strb	r3, [r0, #3]
}
   18170:	bd70      	pop	{r4, r5, r6, pc}
   18172:	bf00      	nop
   18174:	200004d8 	.word	0x200004d8

00018178 <hci_disconn_complete_process>:
	conn_count--;
   18178:	4a02      	ldr	r2, [pc, #8]	; (18184 <hci_disconn_complete_process+0xc>)
   1817a:	6813      	ldr	r3, [r2, #0]
   1817c:	3b01      	subs	r3, #1
   1817e:	6013      	str	r3, [r2, #0]
}
   18180:	4770      	bx	lr
   18182:	bf00      	nop
   18184:	20002610 	.word	0x20002610

00018188 <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
   18188:	7f03      	ldrb	r3, [r0, #28]
   1818a:	f003 0303 	and.w	r3, r3, #3
   1818e:	3b01      	subs	r3, #1
   18190:	2b01      	cmp	r3, #1
{
   18192:	b570      	push	{r4, r5, r6, lr}
   18194:	4604      	mov	r4, r0
	switch (pdu_data->ll_id) {
   18196:	d81c      	bhi.n	181d2 <hci_acl_encode+0x4a>
   18198:	f101 0508 	add.w	r5, r1, #8
	handle = node_rx->hdr.handle;
   1819c:	88c6      	ldrh	r6, [r0, #6]
   1819e:	2104      	movs	r1, #4
   181a0:	4628      	mov	r0, r5
   181a2:	f010 f851 	bl	28248 <net_buf_simple_add>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   181a6:	7f23      	ldrb	r3, [r4, #28]
   181a8:	f003 0303 	and.w	r3, r3, #3
   181ac:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   181ae:	bf0c      	ite	eq
   181b0:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   181b4:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
   181b8:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   181ba:	7f61      	ldrb	r1, [r4, #29]
   181bc:	8041      	strh	r1, [r0, #2]
   181be:	4628      	mov	r0, r5
   181c0:	f010 f842 	bl	28248 <net_buf_simple_add>
		data = (void *)net_buf_add(buf, pdu_data->len);
		memcpy(data, pdu_data->lldata, pdu_data->len);
   181c4:	7f62      	ldrb	r2, [r4, #29]
   181c6:	f104 011f 	add.w	r1, r4, #31

	default:
		LL_ASSERT(0);
		break;
	}
}
   181ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
   181ce:	f00b bdeb 	b.w	23da8 <memcpy>
		LL_ASSERT(0);
   181d2:	4a07      	ldr	r2, [pc, #28]	; (181f0 <hci_acl_encode+0x68>)
   181d4:	4907      	ldr	r1, [pc, #28]	; (181f4 <hci_acl_encode+0x6c>)
   181d6:	4808      	ldr	r0, [pc, #32]	; (181f8 <hci_acl_encode+0x70>)
   181d8:	f641 1389 	movw	r3, #6537	; 0x1989
   181dc:	f009 f846 	bl	2126c <printk>
   181e0:	4040      	eors	r0, r0
   181e2:	f380 8811 	msr	BASEPRI, r0
   181e6:	f04f 0003 	mov.w	r0, #3
   181ea:	df02      	svc	2
}
   181ec:	bd70      	pop	{r4, r5, r6, pc}
   181ee:	bf00      	nop
   181f0:	0002f1db 	.word	0x0002f1db
   181f4:	0002cf80 	.word	0x0002cf80
   181f8:	0002b804 	.word	0x0002b804

000181fc <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   181fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18200:	4604      	mov	r4, r0
   18202:	b086      	sub	sp, #24
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   18204:	7925      	ldrb	r5, [r4, #4]
	handle = node_rx->hdr.handle;
   18206:	88e6      	ldrh	r6, [r4, #6]
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   18208:	2d03      	cmp	r5, #3
{
   1820a:	4688      	mov	r8, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
   1820c:	f100 001c 	add.w	r0, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   18210:	f000 80f5 	beq.w	183fe <hci_evt_encode+0x202>
	switch (node_rx->hdr.type) {
   18214:	2d17      	cmp	r5, #23
   18216:	f000 80eb 	beq.w	183f0 <hci_evt_encode+0x1f4>
   1821a:	d812      	bhi.n	18242 <hci_evt_encode+0x46>
   1821c:	2d05      	cmp	r5, #5
   1821e:	d02d      	beq.n	1827c <hci_evt_encode+0x80>
   18220:	2d16      	cmp	r5, #22
   18222:	f000 80ae 	beq.w	18382 <hci_evt_encode+0x186>
		LL_ASSERT(0);
   18226:	f641 0394 	movw	r3, #6292	; 0x1894
		LL_ASSERT(0);
   1822a:	4a9a      	ldr	r2, [pc, #616]	; (18494 <hci_evt_encode+0x298>)
   1822c:	499a      	ldr	r1, [pc, #616]	; (18498 <hci_evt_encode+0x29c>)
   1822e:	489b      	ldr	r0, [pc, #620]	; (1849c <hci_evt_encode+0x2a0>)
   18230:	f009 f81c 	bl	2126c <printk>
   18234:	4040      	eors	r0, r0
   18236:	f380 8811 	msr	BASEPRI, r0
   1823a:	f04f 0003 	mov.w	r0, #3
   1823e:	df02      	svc	2
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
   18240:	e067      	b.n	18312 <hci_evt_encode+0x116>
	switch (node_rx->hdr.type) {
   18242:	2d18      	cmp	r5, #24
   18244:	d1ef      	bne.n	18226 <hci_evt_encode+0x2a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   18246:	4b96      	ldr	r3, [pc, #600]	; (184a0 <hci_evt_encode+0x2a4>)
   18248:	685b      	ldr	r3, [r3, #4]
   1824a:	0098      	lsls	r0, r3, #2
   1824c:	d561      	bpl.n	18312 <hci_evt_encode+0x116>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   1824e:	4b95      	ldr	r3, [pc, #596]	; (184a4 <hci_evt_encode+0x2a8>)
   18250:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   18252:	0759      	lsls	r1, r3, #29
   18254:	d55d      	bpl.n	18312 <hci_evt_encode+0x116>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
   18256:	2209      	movs	r2, #9
   18258:	2103      	movs	r1, #3
   1825a:	4640      	mov	r0, r8
   1825c:	f00f f8b2 	bl	273c4 <meta_evt>
	sep->status = cu->status;
   18260:	7f23      	ldrb	r3, [r4, #28]
   18262:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
   18264:	8be3      	ldrh	r3, [r4, #30]
   18266:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
   1826a:	8c23      	ldrh	r3, [r4, #32]
   1826c:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   18270:	8c63      	ldrh	r3, [r4, #34]	; 0x22
	sep->handle = sys_cpu_to_le16(handle);
   18272:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   18276:	f8a0 3007 	strh.w	r3, [r0, #7]
   1827a:	e04a      	b.n	18312 <hci_evt_encode+0x116>
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   1827c:	4b8a      	ldr	r3, [pc, #552]	; (184a8 <hci_evt_encode+0x2ac>)
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   1827e:	7e27      	ldrb	r7, [r4, #24]
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   18280:	6818      	ldr	r0, [r3, #0]
   18282:	889a      	ldrh	r2, [r3, #4]
   18284:	799b      	ldrb	r3, [r3, #6]
   18286:	f88d 3016 	strb.w	r3, [sp, #22]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1828a:	4b85      	ldr	r3, [pc, #532]	; (184a0 <hci_evt_encode+0x2a4>)
	direct = node_rx->hdr.rx_ftr.direct;
   1828c:	7e65      	ldrb	r5, [r4, #25]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1828e:	685b      	ldr	r3, [r3, #4]
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   18290:	9004      	str	r0, [sp, #16]
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   18292:	427f      	negs	r7, r7
	if (direct) {
   18294:	f015 0501 	ands.w	r5, r5, #1
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   18298:	f8ad 2014 	strh.w	r2, [sp, #20]
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   1829c:	b27f      	sxtb	r7, r7
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1829e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
	if (direct) {
   182a2:	d039      	beq.n	18318 <hci_evt_encode+0x11c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   182a4:	2b00      	cmp	r3, #0
   182a6:	d034      	beq.n	18312 <hci_evt_encode+0x116>
	    !(le_event_mask & BT_EVT_MASK_LE_DIRECT_ADV_REPORT)) {
   182a8:	4b7e      	ldr	r3, [pc, #504]	; (184a4 <hci_evt_encode+0x2a8>)
   182aa:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   182ac:	055a      	lsls	r2, r3, #21
   182ae:	d530      	bpl.n	18312 <hci_evt_encode+0x116>
	LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
   182b0:	7f23      	ldrb	r3, [r4, #28]
   182b2:	f003 030f 	and.w	r3, r3, #15
   182b6:	2b01      	cmp	r3, #1
   182b8:	d00c      	beq.n	182d4 <hci_evt_encode+0xd8>
   182ba:	4a76      	ldr	r2, [pc, #472]	; (18494 <hci_evt_encode+0x298>)
   182bc:	497b      	ldr	r1, [pc, #492]	; (184ac <hci_evt_encode+0x2b0>)
   182be:	4877      	ldr	r0, [pc, #476]	; (1849c <hci_evt_encode+0x2a0>)
   182c0:	f241 2327 	movw	r3, #4647	; 0x1227
   182c4:	f008 ffd2 	bl	2126c <printk>
   182c8:	4040      	eors	r0, r0
   182ca:	f380 8811 	msr	BASEPRI, r0
   182ce:	f04f 0003 	mov.w	r0, #3
   182d2:	df02      	svc	2
	drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
   182d4:	2211      	movs	r2, #17
   182d6:	210b      	movs	r1, #11
   182d8:	4640      	mov	r0, r8
   182da:	f00f f873 	bl	273c4 <meta_evt>
	drp->num_reports = 1U;
   182de:	2301      	movs	r3, #1
   182e0:	7003      	strb	r3, [r0, #0]
	dir_info->evt_type = BT_HCI_ADV_DIRECT_IND;
   182e2:	7043      	strb	r3, [r0, #1]
		dir_info->addr.type = adv->tx_addr;
   182e4:	7f23      	ldrb	r3, [r4, #28]
   182e6:	f3c3 1380 	ubfx	r3, r3, #6, #1
	drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
   182ea:	4605      	mov	r5, r0
		dir_info->addr.type = adv->tx_addr;
   182ec:	7083      	strb	r3, [r0, #2]
		memcpy(&dir_info->addr.a.val[0], &adv->direct_ind.adv_addr[0],
   182ee:	2206      	movs	r2, #6
   182f0:	f104 011e 	add.w	r1, r4, #30
   182f4:	3003      	adds	r0, #3
   182f6:	f00b fd57 	bl	23da8 <memcpy>
	dir_info->dir_addr.type = adv->rx_addr;
   182fa:	7f23      	ldrb	r3, [r4, #28]
   182fc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   18300:	726b      	strb	r3, [r5, #9]
	memcpy(&dir_info->dir_addr.a.val[0],
   18302:	2206      	movs	r2, #6
   18304:	f104 0124 	add.w	r1, r4, #36	; 0x24
   18308:	f105 000a 	add.w	r0, r5, #10
   1830c:	f00b fd4c 	bl	23da8 <memcpy>
	dir_info->rssi = rssi;
   18310:	742f      	strb	r7, [r5, #16]
}
   18312:	b006      	add	sp, #24
   18314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   18318:	2b00      	cmp	r3, #0
   1831a:	d0fa      	beq.n	18312 <hci_evt_encode+0x116>
	    !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
   1831c:	4b61      	ldr	r3, [pc, #388]	; (184a4 <hci_evt_encode+0x2a8>)
   1831e:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   18320:	079b      	lsls	r3, r3, #30
   18322:	d5f6      	bpl.n	18312 <hci_evt_encode+0x116>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
   18324:	7f23      	ldrb	r3, [r4, #28]
   18326:	f003 030f 	and.w	r3, r3, #15
   1832a:	2b01      	cmp	r3, #1
		data_len = (adv->len - BDADDR_SIZE);
   1832c:	bf1e      	ittt	ne
   1832e:	7f65      	ldrbne	r5, [r4, #29]
   18330:	3d06      	subne	r5, #6
   18332:	b2ed      	uxtbne	r5, r5
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
   18334:	f105 020b 	add.w	r2, r5, #11
   18338:	b2d2      	uxtb	r2, r2
   1833a:	2102      	movs	r1, #2
   1833c:	4640      	mov	r0, r8
   1833e:	f00f f841 	bl	273c4 <meta_evt>
	sep->num_reports = 1U;
   18342:	2301      	movs	r3, #1
   18344:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
   18346:	7f23      	ldrb	r3, [r4, #28]
   18348:	f003 030f 	and.w	r3, r3, #15
   1834c:	3318      	adds	r3, #24
   1834e:	446b      	add	r3, sp
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
   18350:	4606      	mov	r6, r0
	adv_info->evt_type = c_adv_type[adv->type];
   18352:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   18356:	7043      	strb	r3, [r0, #1]
		adv_info->addr.type = adv->tx_addr;
   18358:	7f23      	ldrb	r3, [r4, #28]
   1835a:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1835e:	7083      	strb	r3, [r0, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
   18360:	2206      	movs	r2, #6
   18362:	f104 011e 	add.w	r1, r4, #30
   18366:	3003      	adds	r0, #3
   18368:	f00b fd1e 	bl	23da8 <memcpy>
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   1836c:	360a      	adds	r6, #10
	adv_info->length = data_len;
   1836e:	f806 5c01 	strb.w	r5, [r6, #-1]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   18372:	462a      	mov	r2, r5
   18374:	f104 0124 	add.w	r1, r4, #36	; 0x24
   18378:	4630      	mov	r0, r6
   1837a:	f00b fd15 	bl	23da8 <memcpy>
	*prssi = rssi;
   1837e:	5577      	strb	r7, [r6, r5]
   18380:	e7c7      	b.n	18312 <hci_evt_encode+0x116>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   18382:	4b47      	ldr	r3, [pc, #284]	; (184a0 <hci_evt_encode+0x2a4>)
   18384:	685b      	ldr	r3, [r3, #4]
   18386:	009f      	lsls	r7, r3, #2
   18388:	d5c3      	bpl.n	18312 <hci_evt_encode+0x116>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   1838a:	4b46      	ldr	r3, [pc, #280]	; (184a4 <hci_evt_encode+0x2a8>)
   1838c:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1838e:	07dd      	lsls	r5, r3, #31
   18390:	d5bf      	bpl.n	18312 <hci_evt_encode+0x116>
	uint8_t status = cc->status;
   18392:	7f27      	ldrb	r7, [r4, #28]
	if (!status) {
   18394:	b91f      	cbnz	r7, 1839e <hci_evt_encode+0x1a2>
		conn_count++;
   18396:	4a46      	ldr	r2, [pc, #280]	; (184b0 <hci_evt_encode+0x2b4>)
   18398:	6813      	ldr	r3, [r2, #0]
   1839a:	3301      	adds	r3, #1
   1839c:	6013      	str	r3, [r2, #0]
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
   1839e:	2212      	movs	r2, #18
   183a0:	2101      	movs	r1, #1
   183a2:	4640      	mov	r0, r8
   183a4:	f00f f80e 	bl	273c4 <meta_evt>
   183a8:	4605      	mov	r5, r0
	if (status) {
   183aa:	b12f      	cbz	r7, 183b8 <hci_evt_encode+0x1bc>
		(void)memset(lecc, 0x00, sizeof(*lecc));
   183ac:	2212      	movs	r2, #18
   183ae:	2100      	movs	r1, #0
   183b0:	f00b fd05 	bl	23dbe <memset>
		lecc->status = status;
   183b4:	702f      	strb	r7, [r5, #0]
		return;
   183b6:	e7ac      	b.n	18312 <hci_evt_encode+0x116>
	lecc->status = 0x00;
   183b8:	7007      	strb	r7, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
   183ba:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = cc->role;
   183be:	7f63      	ldrb	r3, [r4, #29]
   183c0:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
   183c2:	7fa3      	ldrb	r3, [r4, #30]
   183c4:	f003 0301 	and.w	r3, r3, #1
   183c8:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &cc->peer_addr[0], BDADDR_SIZE);
   183ca:	2206      	movs	r2, #6
   183cc:	f104 011f 	add.w	r1, r4, #31
   183d0:	3005      	adds	r0, #5
   183d2:	f00b fce9 	bl	23da8 <memcpy>
	lecc->interval = sys_cpu_to_le16(cc->interval);
   183d6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   183d8:	f8a5 300b 	strh.w	r3, [r5, #11]
	lecc->latency = sys_cpu_to_le16(cc->latency);
   183dc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   183de:	f8a5 300d 	strh.w	r3, [r5, #13]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   183e2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   183e4:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = cc->sca;
   183e8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   183ec:	746b      	strb	r3, [r5, #17]
   183ee:	e790      	b.n	18312 <hci_evt_encode+0x116>
		hci_disconn_complete_encode(pdu_data, handle, buf);
   183f0:	460a      	mov	r2, r1
   183f2:	4631      	mov	r1, r6
}
   183f4:	b006      	add	sp, #24
   183f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		hci_disconn_complete_encode(pdu_data, handle, buf);
   183fa:	f7ff be9f 	b.w	1813c <hci_disconn_complete_encode>
	switch (pdu_data->llctrl.opcode) {
   183fe:	7fe3      	ldrb	r3, [r4, #31]
   18400:	2b09      	cmp	r3, #9
   18402:	d00c      	beq.n	1841e <hci_evt_encode+0x222>
   18404:	2b0f      	cmp	r3, #15
   18406:	d013      	beq.n	18430 <hci_evt_encode+0x234>
   18408:	2b07      	cmp	r3, #7
   1840a:	d13f      	bne.n	1848c <hci_evt_encode+0x290>
		le_unknown_rsp(pdu_data, handle, buf);
   1840c:	f894 1020 	ldrb.w	r1, [r4, #32]
	switch (pdu_data->llctrl.unknown_rsp.type) {
   18410:	290e      	cmp	r1, #14
   18412:	d12e      	bne.n	18472 <hci_evt_encode+0x276>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   18414:	4643      	mov	r3, r8
   18416:	4632      	mov	r2, r6
   18418:	2100      	movs	r1, #0
   1841a:	201a      	movs	r0, #26
   1841c:	e003      	b.n	18426 <hci_evt_encode+0x22a>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   1841e:	460b      	mov	r3, r1
   18420:	4632      	mov	r2, r6
   18422:	4601      	mov	r1, r0
   18424:	2000      	movs	r0, #0
}
   18426:	b006      	add	sp, #24
   18428:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   1842c:	f7ff baa6 	b.w	1797c <le_remote_feat_complete>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   18430:	4b1b      	ldr	r3, [pc, #108]	; (184a0 <hci_evt_encode+0x2a4>)
   18432:	685b      	ldr	r3, [r3, #4]
   18434:	009a      	lsls	r2, r3, #2
   18436:	d503      	bpl.n	18440 <hci_evt_encode+0x244>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   18438:	4b1a      	ldr	r3, [pc, #104]	; (184a4 <hci_evt_encode+0x2a8>)
   1843a:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1843c:	069b      	lsls	r3, r3, #26
   1843e:	d409      	bmi.n	18454 <hci_evt_encode+0x258>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
   18440:	2300      	movs	r3, #0
   18442:	e9cd 3301 	strd	r3, r3, [sp, #4]
   18446:	9300      	str	r3, [sp, #0]
   18448:	221a      	movs	r2, #26
   1844a:	2102      	movs	r1, #2
   1844c:	4630      	mov	r0, r6
   1844e:	f00f f9c8 	bl	277e2 <ll_conn_update>
		return;
   18452:	e75e      	b.n	18312 <hci_evt_encode+0x116>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
   18454:	220a      	movs	r2, #10
   18456:	2106      	movs	r1, #6
   18458:	4640      	mov	r0, r8
   1845a:	f00e ffb3 	bl	273c4 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   1845e:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   18460:	8c23      	ldrh	r3, [r4, #32]
   18462:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   18464:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   18466:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   18468:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   1846a:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   1846c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   1846e:	8103      	strh	r3, [r0, #8]
   18470:	e74f      	b.n	18312 <hci_evt_encode+0x116>
   18472:	4b10      	ldr	r3, [pc, #64]	; (184b4 <hci_evt_encode+0x2b8>)
   18474:	4a10      	ldr	r2, [pc, #64]	; (184b8 <hci_evt_encode+0x2bc>)
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   18476:	4811      	ldr	r0, [pc, #68]	; (184bc <hci_evt_encode+0x2c0>)
   18478:	1ad2      	subs	r2, r2, r3
   1847a:	08d2      	lsrs	r2, r2, #3
   1847c:	0192      	lsls	r2, r2, #6
   1847e:	f042 0202 	orr.w	r2, r2, #2
}
   18482:	b006      	add	sp, #24
   18484:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   18488:	f009 bb3c 	b.w	21b04 <log_1>
		LL_ASSERT(0);
   1848c:	f641 135d 	movw	r3, #6493	; 0x195d
   18490:	e6cb      	b.n	1822a <hci_evt_encode+0x2e>
   18492:	bf00      	nop
   18494:	0002f1db 	.word	0x0002f1db
   18498:	0002cf80 	.word	0x0002cf80
   1849c:	0002b804 	.word	0x0002b804
   184a0:	200004d8 	.word	0x200004d8
   184a4:	200004e0 	.word	0x200004e0
   184a8:	00029b97 	.word	0x00029b97
   184ac:	0002f214 	.word	0x0002f214
   184b0:	20002610 	.word	0x20002610
   184b4:	00029870 	.word	0x00029870
   184b8:	000298c0 	.word	0x000298c0
   184bc:	0002e700 	.word	0x0002e700

000184c0 <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   184c0:	7903      	ldrb	r3, [r0, #4]
   184c2:	2b03      	cmp	r3, #3
   184c4:	d006      	beq.n	184d4 <hci_get_class+0x14>

		switch (node_rx->hdr.type) {
   184c6:	3b05      	subs	r3, #5
   184c8:	b2db      	uxtb	r3, r3
   184ca:	2b13      	cmp	r3, #19
   184cc:	d80a      	bhi.n	184e4 <hci_get_class+0x24>
   184ce:	4a06      	ldr	r2, [pc, #24]	; (184e8 <hci_get_class+0x28>)
   184d0:	5cd0      	ldrb	r0, [r2, r3]
   184d2:	4770      	bx	lr
		default:
			return HCI_CLASS_NONE;
		}

#if defined(CONFIG_BT_CONN)
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   184d4:	7f03      	ldrb	r3, [r0, #28]
   184d6:	f003 0303 	and.w	r3, r3, #3
		return HCI_CLASS_EVT_LLCP;
	} else {
		return HCI_CLASS_ACL_DATA;
   184da:	2b03      	cmp	r3, #3
   184dc:	bf0c      	ite	eq
   184de:	2004      	moveq	r0, #4
   184e0:	2005      	movne	r0, #5
   184e2:	4770      	bx	lr
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   184e4:	2000      	movs	r0, #0
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
   184e6:	4770      	bx	lr
   184e8:	0002f245 	.word	0x0002f245

000184ec <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
   184ec:	4b07      	ldr	r3, [pc, #28]	; (1850c <hci_init+0x20>)
   184ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   184f2:	f641 71ff 	movw	r1, #8191	; 0x1fff
   184f6:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   184fa:	4b05      	ldr	r3, [pc, #20]	; (18510 <hci_init+0x24>)
   184fc:	201f      	movs	r0, #31
   184fe:	2100      	movs	r1, #0
   18500:	e9c3 0100 	strd	r0, r1, [r3]
	conn_count = 0U;
   18504:	4b03      	ldr	r3, [pc, #12]	; (18514 <hci_init+0x28>)
   18506:	2200      	movs	r2, #0
   18508:	601a      	str	r2, [r3, #0]
{
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   1850a:	4770      	bx	lr
   1850c:	200004d8 	.word	0x200004d8
   18510:	200004e0 	.word	0x200004e0
   18514:	20002610 	.word	0x20002610

00018518 <ll_rx_link_inc_quota>:
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   18518:	2801      	cmp	r0, #1
{
   1851a:	b538      	push	{r3, r4, r5, lr}
   1851c:	4d0b      	ldr	r5, [pc, #44]	; (1854c <ll_rx_link_inc_quota+0x34>)
   1851e:	4604      	mov	r4, r0
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   18520:	d10f      	bne.n	18542 <ll_rx_link_inc_quota+0x2a>
   18522:	782b      	ldrb	r3, [r5, #0]
   18524:	2b09      	cmp	r3, #9
   18526:	d90c      	bls.n	18542 <ll_rx_link_inc_quota+0x2a>
   18528:	4a09      	ldr	r2, [pc, #36]	; (18550 <ll_rx_link_inc_quota+0x38>)
   1852a:	490a      	ldr	r1, [pc, #40]	; (18554 <ll_rx_link_inc_quota+0x3c>)
   1852c:	480a      	ldr	r0, [pc, #40]	; (18558 <ll_rx_link_inc_quota+0x40>)
   1852e:	f240 539c 	movw	r3, #1436	; 0x59c
   18532:	f008 fe9b 	bl	2126c <printk>
   18536:	4040      	eors	r0, r0
   18538:	f380 8811 	msr	BASEPRI, r0
   1853c:	f04f 0003 	mov.w	r0, #3
   18540:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   18542:	7828      	ldrb	r0, [r5, #0]
   18544:	4404      	add	r4, r0
   18546:	702c      	strb	r4, [r5, #0]
}
   18548:	bd38      	pop	{r3, r4, r5, pc}
   1854a:	bf00      	nop
   1854c:	2000274c 	.word	0x2000274c
   18550:	0002f278 	.word	0x0002f278
   18554:	0002f2b3 	.word	0x0002f2b3
   18558:	0002b804 	.word	0x0002b804

0001855c <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
   1855c:	b510      	push	{r4, lr}
   1855e:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
   18560:	f00f fa6d 	bl	27a3e <lll_reset>
	LL_ASSERT(!err);
   18564:	b160      	cbz	r0, 18580 <perform_lll_reset+0x24>
   18566:	4a21      	ldr	r2, [pc, #132]	; (185ec <perform_lll_reset+0x90>)
   18568:	4921      	ldr	r1, [pc, #132]	; (185f0 <perform_lll_reset+0x94>)
   1856a:	4822      	ldr	r0, [pc, #136]	; (185f4 <perform_lll_reset+0x98>)
   1856c:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
   18570:	f008 fe7c 	bl	2126c <printk>
   18574:	4040      	eors	r0, r0
   18576:	f380 8811 	msr	BASEPRI, r0
   1857a:	f04f 0003 	mov.w	r0, #3
   1857e:	df02      	svc	2

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
   18580:	f00f faba 	bl	27af8 <lll_adv_reset>
	LL_ASSERT(!err);
   18584:	b160      	cbz	r0, 185a0 <perform_lll_reset+0x44>
   18586:	4a19      	ldr	r2, [pc, #100]	; (185ec <perform_lll_reset+0x90>)
   18588:	4919      	ldr	r1, [pc, #100]	; (185f0 <perform_lll_reset+0x94>)
   1858a:	481a      	ldr	r0, [pc, #104]	; (185f4 <perform_lll_reset+0x98>)
   1858c:	f240 73c5 	movw	r3, #1989	; 0x7c5
   18590:	f008 fe6c 	bl	2126c <printk>
   18594:	4040      	eors	r0, r0
   18596:	f380 8811 	msr	BASEPRI, r0
   1859a:	f04f 0003 	mov.w	r0, #3
   1859e:	df02      	svc	2
#endif /* CONFIG_BT_BROADCASTER */

#if defined(CONFIG_BT_OBSERVER)
	/* Reset scan state */
	err = lll_scan_reset();
   185a0:	f00f fc02 	bl	27da8 <lll_scan_reset>
	LL_ASSERT(!err);
   185a4:	b160      	cbz	r0, 185c0 <perform_lll_reset+0x64>
   185a6:	4a11      	ldr	r2, [pc, #68]	; (185ec <perform_lll_reset+0x90>)
   185a8:	4911      	ldr	r1, [pc, #68]	; (185f0 <perform_lll_reset+0x94>)
   185aa:	4812      	ldr	r0, [pc, #72]	; (185f4 <perform_lll_reset+0x98>)
   185ac:	f240 73cb 	movw	r3, #1995	; 0x7cb
   185b0:	f008 fe5c 	bl	2126c <printk>
   185b4:	4040      	eors	r0, r0
   185b6:	f380 8811 	msr	BASEPRI, r0
   185ba:	f04f 0003 	mov.w	r0, #3
   185be:	df02      	svc	2
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
   185c0:	f00f fbfe 	bl	27dc0 <lll_conn_reset>
	LL_ASSERT(!err);
   185c4:	b160      	cbz	r0, 185e0 <perform_lll_reset+0x84>
   185c6:	4a09      	ldr	r2, [pc, #36]	; (185ec <perform_lll_reset+0x90>)
   185c8:	4909      	ldr	r1, [pc, #36]	; (185f0 <perform_lll_reset+0x94>)
   185ca:	480a      	ldr	r0, [pc, #40]	; (185f4 <perform_lll_reset+0x98>)
   185cc:	f240 73d1 	movw	r3, #2001	; 0x7d1
   185d0:	f008 fe4c 	bl	2126c <printk>
   185d4:	4040      	eors	r0, r0
   185d6:	f380 8811 	msr	BASEPRI, r0
   185da:	f04f 0003 	mov.w	r0, #3
   185de:	df02      	svc	2
	z_impl_k_sem_give(sem);
   185e0:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
   185e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   185e6:	f007 bd15 	b.w	20014 <z_impl_k_sem_give>
   185ea:	bf00      	nop
   185ec:	0002f278 	.word	0x0002f278
   185f0:	0002f2ed 	.word	0x0002f2ed
   185f4:	0002b804 	.word	0x0002b804

000185f8 <ull_done>:
}
#endif /* CONFIG_BT_CONN */

#if !defined(CONFIG_BT_CTLR_LOW_LAT_ULL)
static void ull_done(void *param)
{
   185f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	memq_link_t *link;
	struct node_rx_hdr *done;

	do {
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   185fc:	4f35      	ldr	r7, [pc, #212]	; (186d4 <ull_done+0xdc>)
	if (!MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   185fe:	4d36      	ldr	r5, [pc, #216]	; (186d8 <ull_done+0xe0>)
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   18600:	e9d7 0100 	ldrd	r0, r1, [r7]
   18604:	aa01      	add	r2, sp, #4
   18606:	f00e fbf6 	bl	26df6 <memq_peek>
				 (void **)&done);

		if (link) {
   1860a:	4680      	mov	r8, r0
   1860c:	2800      	cmp	r0, #0
   1860e:	d05e      	beq.n	186ce <ull_done+0xd6>
			/* Process done event */
			(void)memq_dequeue(memq_ull_done.tail,
   18610:	6878      	ldr	r0, [r7, #4]
   18612:	2200      	movs	r2, #0
   18614:	4639      	mov	r1, r7
   18616:	f00e fbf6 	bl	26e06 <memq_dequeue>
					   &memq_ull_done.head, NULL);
			rx_demux_event_done(link, done);
   1861a:	9e01      	ldr	r6, [sp, #4]
	struct node_rx_event_done *done = (void *)rx;
	struct ull_hdr *ull_hdr;
	void *release;

	/* Decrement prepare reference if ULL will not resume */
	ull_hdr = done->param;
   1861c:	69f4      	ldr	r4, [r6, #28]
	if (ull_hdr) {
   1861e:	b194      	cbz	r4, 18646 <ull_done+0x4e>
	return hdr->ref;
   18620:	7823      	ldrb	r3, [r4, #0]
		LL_ASSERT(ull_ref_get(ull_hdr));
   18622:	b963      	cbnz	r3, 1863e <ull_done+0x46>
   18624:	4a2d      	ldr	r2, [pc, #180]	; (186dc <ull_done+0xe4>)
   18626:	492e      	ldr	r1, [pc, #184]	; (186e0 <ull_done+0xe8>)
   18628:	482e      	ldr	r0, [pc, #184]	; (186e4 <ull_done+0xec>)
   1862a:	f640 13f3 	movw	r3, #2547	; 0x9f3
   1862e:	f008 fe1d 	bl	2126c <printk>
   18632:	4040      	eors	r0, r0
   18634:	f380 8811 	msr	BASEPRI, r0
   18638:	f04f 0003 	mov.w	r0, #3
   1863c:	df02      	svc	2
	return hdr->ref--;
   1863e:	7823      	ldrb	r3, [r4, #0]
   18640:	3b01      	subs	r3, #1
   18642:	b2db      	uxtb	r3, r3
   18644:	7023      	strb	r3, [r4, #0]
		ull_ref_dec(ull_hdr);
	}

	/* Process role dependent event done */
	switch (done->extra.type) {
   18646:	f896 3020 	ldrb.w	r3, [r6, #32]
   1864a:	b123      	cbz	r3, 18656 <ull_done+0x5e>
   1864c:	2b01      	cmp	r3, #1
   1864e:	d127      	bne.n	186a0 <ull_done+0xa8>
#if defined(CONFIG_BT_CONN)
	case EVENT_DONE_EXTRA_TYPE_CONN:
		ull_conn_done(done);
   18650:	4630      	mov	r0, r6
   18652:	f002 fb8b 	bl	1ad6c <ull_conn_done>
		LL_ASSERT(0);
		break;
	}

	/* release done */
	done->extra.type = 0U;
   18656:	2300      	movs	r3, #0
   18658:	f886 3020 	strb.w	r3, [r6, #32]
 */
static inline bool mfifo_enqueue_idx_get(uint8_t count, uint8_t first, uint8_t last,
					 uint8_t *idx)
{
	/* Non-destructive: Advance write-index modulo 'count' */
	last = last + 1;
   1865c:	78eb      	ldrb	r3, [r5, #3]
	if (last == count) {
   1865e:	7869      	ldrb	r1, [r5, #1]
	if (!MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   18660:	78aa      	ldrb	r2, [r5, #2]
	last = last + 1;
   18662:	3301      	adds	r3, #1
   18664:	b2db      	uxtb	r3, r3
		last = 0U;
   18666:	4299      	cmp	r1, r3
   18668:	bf08      	it	eq
   1866a:	2300      	moveq	r3, #0
	 * We want to maintain the invariant of emptiness defined by
	 * first == last, but we just advanced a copy of the write-index before
	 * and may have wrapped. So if first == last the queue is full and we
	 * can not continue
	 */
	if (last == first) {
   1866c:	429a      	cmp	r2, r3
   1866e:	d125      	bne.n	186bc <ull_done+0xc4>
	release = done_release(link, done);
	LL_ASSERT(release == done);
   18670:	4a1a      	ldr	r2, [pc, #104]	; (186dc <ull_done+0xe4>)
   18672:	491d      	ldr	r1, [pc, #116]	; (186e8 <ull_done+0xf0>)
   18674:	481b      	ldr	r0, [pc, #108]	; (186e4 <ull_done+0xec>)
   18676:	f640 2339 	movw	r3, #2617	; 0xa39
   1867a:	f008 fdf7 	bl	2126c <printk>
   1867e:	4040      	eors	r0, r0
   18680:	f380 8811 	msr	BASEPRI, r0
   18684:	f04f 0003 	mov.w	r0, #3
   18688:	df02      	svc	2
	/* LLL done synchronized */
	lll_done_sync();
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL_DONE */

	/* If disable initiated, signal the semaphore */
	if (ull_hdr && !ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
   1868a:	2c00      	cmp	r4, #0
   1868c:	d0b8      	beq.n	18600 <ull_done+0x8>
	return hdr->ref;
   1868e:	7823      	ldrb	r3, [r4, #0]
   18690:	2b00      	cmp	r3, #0
   18692:	d1b5      	bne.n	18600 <ull_done+0x8>
   18694:	6963      	ldr	r3, [r4, #20]
   18696:	2b00      	cmp	r3, #0
   18698:	d0b2      	beq.n	18600 <ull_done+0x8>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
   1869a:	69a0      	ldr	r0, [r4, #24]
   1869c:	4798      	blx	r3
   1869e:	e7af      	b.n	18600 <ull_done+0x8>
		LL_ASSERT(0);
   186a0:	4a0e      	ldr	r2, [pc, #56]	; (186dc <ull_done+0xe4>)
   186a2:	4912      	ldr	r1, [pc, #72]	; (186ec <ull_done+0xf4>)
   186a4:	480f      	ldr	r0, [pc, #60]	; (186e4 <ull_done+0xec>)
   186a6:	f640 2332 	movw	r3, #2610	; 0xa32
   186aa:	f008 fddf 	bl	2126c <printk>
   186ae:	4040      	eors	r0, r0
   186b0:	f380 8811 	msr	BASEPRI, r0
   186b4:	f04f 0003 	mov.w	r0, #3
   186b8:	df02      	svc	2
		break;
   186ba:	e7cc      	b.n	18656 <ull_done+0x5e>
	done->hdr.link = link;
   186bc:	f8c6 8000 	str.w	r8, [r6]
 */
static inline void mfifo_by_idx_enqueue(uint8_t *fifo, uint8_t size, uint8_t idx,
					void *mem, uint8_t *last)
{
	/* API 2: fifo is array of void-ptrs */
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   186c0:	78e9      	ldrb	r1, [r5, #3]
   186c2:	782a      	ldrb	r2, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   186c4:	fb01 5202 	mla	r2, r1, r2, r5
   186c8:	6056      	str	r6, [r2, #4]

	cpu_dmb(); /* Ensure data accesses are synchronized */
	*last = idx; /* Commit: Update write index */
   186ca:	70eb      	strb	r3, [r5, #3]
	LL_ASSERT(release == done);
   186cc:	e7dd      	b.n	1868a <ull_done+0x92>
}
   186ce:	b002      	add	sp, #8
   186d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   186d4:	20002b00 	.word	0x20002b00
   186d8:	20000b84 	.word	0x20000b84
   186dc:	0002f278 	.word	0x0002f278
   186e0:	0002f2f2 	.word	0x0002f2f2
   186e4:	0002b804 	.word	0x0002b804
   186e8:	0002f307 	.word	0x0002f307
   186ec:	0002cf80 	.word	0x0002cf80

000186f0 <rx_alloc>:
{
   186f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > mem_link_rx.quota_pdu) {
   186f4:	4e34      	ldr	r6, [pc, #208]	; (187c8 <rx_alloc+0xd8>)
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   186f6:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 187cc <rx_alloc+0xdc>
   186fa:	46b0      	mov	r8, r6
   186fc:	f818 7b04 	ldrb.w	r7, [r8], #4
   18700:	4287      	cmp	r7, r0
   18702:	bf28      	it	cs
   18704:	4607      	movcs	r7, r0
   18706:	2f00      	cmp	r7, #0
   18708:	d05b      	beq.n	187c2 <rx_alloc+0xd2>
	last = last + 1;
   1870a:	f899 4003 	ldrb.w	r4, [r9, #3]
	if (last == count) {
   1870e:	f899 2001 	ldrb.w	r2, [r9, #1]
   18712:	f899 3002 	ldrb.w	r3, [r9, #2]
	last = last + 1;
   18716:	3401      	adds	r4, #1
   18718:	b2e4      	uxtb	r4, r4
		last = 0U;
   1871a:	42a2      	cmp	r2, r4
   1871c:	bf08      	it	eq
   1871e:	2400      	moveq	r4, #0
	if (last == first) {
   18720:	42a3      	cmp	r3, r4
   18722:	d148      	bne.n	187b6 <rx_alloc+0xc6>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   18724:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 187d0 <rx_alloc+0xe0>
		link = mem_acquire(&mem_link_rx.free);
   18728:	4f2a      	ldr	r7, [pc, #168]	; (187d4 <rx_alloc+0xe4>)
	while (mem_link_rx.quota_pdu &&
   1872a:	7833      	ldrb	r3, [r6, #0]
   1872c:	2b00      	cmp	r3, #0
   1872e:	d048      	beq.n	187c2 <rx_alloc+0xd2>
	last = last + 1;
   18730:	f898 4003 	ldrb.w	r4, [r8, #3]
	if (last == count) {
   18734:	f898 2001 	ldrb.w	r2, [r8, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   18738:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
   1873c:	3401      	adds	r4, #1
   1873e:	b2e4      	uxtb	r4, r4
		last = 0U;
   18740:	42a2      	cmp	r2, r4
   18742:	bf08      	it	eq
   18744:	2400      	moveq	r4, #0
	if (last == first) {
   18746:	429c      	cmp	r4, r3
   18748:	d03b      	beq.n	187c2 <rx_alloc+0xd2>
		link = mem_acquire(&mem_link_rx.free);
   1874a:	4638      	mov	r0, r7
   1874c:	f00e faee 	bl	26d2c <mem_acquire>
		if (!link) {
   18750:	4605      	mov	r5, r0
   18752:	2800      	cmp	r0, #0
   18754:	d035      	beq.n	187c2 <rx_alloc+0xd2>
		rx = mem_acquire(&mem_pdu_rx.free);
   18756:	4820      	ldr	r0, [pc, #128]	; (187d8 <rx_alloc+0xe8>)
   18758:	f00e fae8 	bl	26d2c <mem_acquire>
		if (!rx) {
   1875c:	b1a0      	cbz	r0, 18788 <rx_alloc+0x98>
		link->mem = NULL;
   1875e:	2300      	movs	r3, #0
   18760:	606b      	str	r3, [r5, #4]
		rx->link = link;
   18762:	6005      	str	r5, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   18764:	f898 2003 	ldrb.w	r2, [r8, #3]
   18768:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1876c:	fb02 8303 	mla	r3, r2, r3, r8
   18770:	6058      	str	r0, [r3, #4]
		ll_rx_link_inc_quota(-1);
   18772:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	*last = idx; /* Commit: Update write index */
   18776:	f888 4003 	strb.w	r4, [r8, #3]
   1877a:	f7ff fecd 	bl	18518 <ll_rx_link_inc_quota>
   1877e:	e7d4      	b.n	1872a <rx_alloc+0x3a>
		rx = mem_acquire(&mem_pdu_rx.free);
   18780:	4815      	ldr	r0, [pc, #84]	; (187d8 <rx_alloc+0xe8>)
   18782:	f00e fad3 	bl	26d2c <mem_acquire>
		if (!rx) {
   18786:	b928      	cbnz	r0, 18794 <rx_alloc+0xa4>
			mem_release(link, &mem_link_rx.free);
   18788:	4628      	mov	r0, r5
   1878a:	4912      	ldr	r1, [pc, #72]	; (187d4 <rx_alloc+0xe4>)
}
   1878c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &mem_link_rx.free);
   18790:	f00e bae5 	b.w	26d5e <mem_release>
		rx->link = link;
   18794:	6005      	str	r5, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   18796:	f899 2003 	ldrb.w	r2, [r9, #3]
   1879a:	f899 3000 	ldrb.w	r3, [r9]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1879e:	fb02 9303 	mla	r3, r2, r3, r9
   187a2:	6058      	str	r0, [r3, #4]
		ll_rx_link_inc_quota(-1);
   187a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		max--;
   187a8:	3f01      	subs	r7, #1
	*last = idx; /* Commit: Update write index */
   187aa:	f889 4003 	strb.w	r4, [r9, #3]
   187ae:	b2ff      	uxtb	r7, r7
		ll_rx_link_inc_quota(-1);
   187b0:	f7ff feb2 	bl	18518 <ll_rx_link_inc_quota>
		max--;
   187b4:	e7a7      	b.n	18706 <rx_alloc+0x16>
		link = mem_acquire(&mem_link_rx.free);
   187b6:	4640      	mov	r0, r8
   187b8:	f00e fab8 	bl	26d2c <mem_acquire>
		if (!link) {
   187bc:	4605      	mov	r5, r0
   187be:	2800      	cmp	r0, #0
   187c0:	d1de      	bne.n	18780 <rx_alloc+0x90>
}
   187c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   187c6:	bf00      	nop
   187c8:	2000274c 	.word	0x2000274c
   187cc:	20000ba8 	.word	0x20000ba8
   187d0:	20000b9c 	.word	0x20000b9c
   187d4:	20002750 	.word	0x20002750
   187d8:	200027c4 	.word	0x200027c4

000187dc <init_reset>:
{
   187dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   187de:	4b43      	ldr	r3, [pc, #268]	; (188ec <init_reset+0x110>)
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   187e0:	4f43      	ldr	r7, [pc, #268]	; (188f0 <init_reset+0x114>)
		link = mem_acquire(&mem_link_done.free);
   187e2:	4e44      	ldr	r6, [pc, #272]	; (188f4 <init_reset+0x118>)
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   187e4:	2204      	movs	r2, #4
   187e6:	1898      	adds	r0, r3, r2
   187e8:	2134      	movs	r1, #52	; 0x34
   187ea:	f00e fa77 	bl	26cdc <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX +
   187ee:	4b41      	ldr	r3, [pc, #260]	; (188f4 <init_reset+0x118>)
   187f0:	2205      	movs	r2, #5
   187f2:	2108      	movs	r1, #8
   187f4:	1d18      	adds	r0, r3, #4
   187f6:	f00e fa71 	bl	26cdc <mem_init>
	last = last + 1;
   187fa:	78fc      	ldrb	r4, [r7, #3]
	if (last == count) {
   187fc:	787a      	ldrb	r2, [r7, #1]
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   187fe:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
   18800:	3401      	adds	r4, #1
   18802:	b2e4      	uxtb	r4, r4
		last = 0U;
   18804:	42a2      	cmp	r2, r4
   18806:	bf08      	it	eq
   18808:	2400      	moveq	r4, #0
	if (last == first) {
   1880a:	429c      	cmp	r4, r3
   1880c:	d00d      	beq.n	1882a <init_reset+0x4e>
		link = mem_acquire(&mem_link_done.free);
   1880e:	4630      	mov	r0, r6
   18810:	f00e fa8c 	bl	26d2c <mem_acquire>
		if (!link) {
   18814:	4605      	mov	r5, r0
   18816:	b140      	cbz	r0, 1882a <init_reset+0x4e>
		rx = mem_acquire(&mem_done.free);
   18818:	4834      	ldr	r0, [pc, #208]	; (188ec <init_reset+0x110>)
   1881a:	f00e fa87 	bl	26d2c <mem_acquire>
		if (!rx) {
   1881e:	2800      	cmp	r0, #0
   18820:	d15c      	bne.n	188dc <init_reset+0x100>
			mem_release(link, &mem_link_done.free);
   18822:	4934      	ldr	r1, [pc, #208]	; (188f4 <init_reset+0x118>)
   18824:	4628      	mov	r0, r5
   18826:	f00e fa9a 	bl	26d5e <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   1882a:	4b33      	ldr	r3, [pc, #204]	; (188f8 <init_reset+0x11c>)
   1882c:	220c      	movs	r2, #12
   1882e:	1d18      	adds	r0, r3, #4
   18830:	2144      	movs	r1, #68	; 0x44
   18832:	f00e fa53 	bl	26cdc <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   18836:	4b31      	ldr	r3, [pc, #196]	; (188fc <init_reset+0x120>)
   18838:	220e      	movs	r2, #14
   1883a:	1d18      	adds	r0, r3, #4
   1883c:	2108      	movs	r1, #8
   1883e:	f00e fa4d 	bl	26cdc <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   18842:	482e      	ldr	r0, [pc, #184]	; (188fc <init_reset+0x120>)
   18844:	f00e fa72 	bl	26d2c <mem_acquire>
	LL_ASSERT(link);
   18848:	4604      	mov	r4, r0
   1884a:	b960      	cbnz	r0, 18866 <init_reset+0x8a>
   1884c:	4a2c      	ldr	r2, [pc, #176]	; (18900 <init_reset+0x124>)
   1884e:	492d      	ldr	r1, [pc, #180]	; (18904 <init_reset+0x128>)
   18850:	482d      	ldr	r0, [pc, #180]	; (18908 <init_reset+0x12c>)
   18852:	f240 739e 	movw	r3, #1950	; 0x79e
   18856:	f008 fd09 	bl	2126c <printk>
   1885a:	4040      	eors	r0, r0
   1885c:	f380 8811 	msr	BASEPRI, r0
   18860:	f04f 0003 	mov.w	r0, #3
   18864:	df02      	svc	2
	MEMQ_INIT(ull_rx, link);
   18866:	4a29      	ldr	r2, [pc, #164]	; (1890c <init_reset+0x130>)
   18868:	4620      	mov	r0, r4
   1886a:	1f11      	subs	r1, r2, #4
   1886c:	f00e faae 	bl	26dcc <memq_init>
	link = mem_acquire(&mem_link_done.free);
   18870:	4820      	ldr	r0, [pc, #128]	; (188f4 <init_reset+0x118>)
   18872:	f00e fa5b 	bl	26d2c <mem_acquire>
	LL_ASSERT(link);
   18876:	4604      	mov	r4, r0
   18878:	b960      	cbnz	r0, 18894 <init_reset+0xb8>
   1887a:	4a21      	ldr	r2, [pc, #132]	; (18900 <init_reset+0x124>)
   1887c:	4921      	ldr	r1, [pc, #132]	; (18904 <init_reset+0x128>)
   1887e:	4822      	ldr	r0, [pc, #136]	; (18908 <init_reset+0x12c>)
   18880:	f240 73a6 	movw	r3, #1958	; 0x7a6
   18884:	f008 fcf2 	bl	2126c <printk>
   18888:	4040      	eors	r0, r0
   1888a:	f380 8811 	msr	BASEPRI, r0
   1888e:	f04f 0003 	mov.w	r0, #3
   18892:	df02      	svc	2
	MEMQ_INIT(ull_done, link);
   18894:	4a1e      	ldr	r2, [pc, #120]	; (18910 <init_reset+0x134>)
   18896:	4620      	mov	r0, r4
   18898:	1f11      	subs	r1, r2, #4
   1889a:	f00e fa97 	bl	26dcc <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   1889e:	4817      	ldr	r0, [pc, #92]	; (188fc <init_reset+0x120>)
   188a0:	f00e fa44 	bl	26d2c <mem_acquire>
	LL_ASSERT(link);
   188a4:	4604      	mov	r4, r0
   188a6:	b960      	cbnz	r0, 188c2 <init_reset+0xe6>
   188a8:	4a15      	ldr	r2, [pc, #84]	; (18900 <init_reset+0x124>)
   188aa:	4916      	ldr	r1, [pc, #88]	; (18904 <init_reset+0x128>)
   188ac:	4816      	ldr	r0, [pc, #88]	; (18908 <init_reset+0x12c>)
   188ae:	f240 73ae 	movw	r3, #1966	; 0x7ae
   188b2:	f008 fcdb 	bl	2126c <printk>
   188b6:	4040      	eors	r0, r0
   188b8:	f380 8811 	msr	BASEPRI, r0
   188bc:	f04f 0003 	mov.w	r0, #3
   188c0:	df02      	svc	2
	MEMQ_INIT(ll_rx, link);
   188c2:	4a14      	ldr	r2, [pc, #80]	; (18914 <init_reset+0x138>)
   188c4:	4620      	mov	r0, r4
   188c6:	1f11      	subs	r1, r2, #4
   188c8:	f00e fa80 	bl	26dcc <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   188cc:	4b12      	ldr	r3, [pc, #72]	; (18918 <init_reset+0x13c>)
   188ce:	220a      	movs	r2, #10
	rx_alloc(UINT8_MAX);
   188d0:	20ff      	movs	r0, #255	; 0xff
	mem_link_rx.quota_pdu = RX_CNT;
   188d2:	701a      	strb	r2, [r3, #0]
	rx_alloc(UINT8_MAX);
   188d4:	f7ff ff0c 	bl	186f0 <rx_alloc>
}
   188d8:	2000      	movs	r0, #0
   188da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rx->link = link;
   188dc:	6005      	str	r5, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   188de:	78fa      	ldrb	r2, [r7, #3]
   188e0:	783b      	ldrb	r3, [r7, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   188e2:	fb02 7303 	mla	r3, r2, r3, r7
   188e6:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
   188e8:	70fc      	strb	r4, [r7, #3]
}
   188ea:	e786      	b.n	187fa <init_reset+0x1e>
   188ec:	2000264c 	.word	0x2000264c
   188f0:	20000b84 	.word	0x20000b84
   188f4:	20002720 	.word	0x20002720
   188f8:	200027c4 	.word	0x200027c4
   188fc:	20002750 	.word	0x20002750
   18900:	0002f278 	.word	0x0002f278
   18904:	0002e896 	.word	0x0002e896
   18908:	0002b804 	.word	0x0002b804
   1890c:	20002b0c 	.word	0x20002b0c
   18910:	20002b04 	.word	0x20002b04
   18914:	20002afc 	.word	0x20002afc
   18918:	2000274c 	.word	0x2000274c

0001891c <tx_cmplt_get>:
{
   1891c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18920:	460c      	mov	r4, r1
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   18922:	4f28      	ldr	r7, [pc, #160]	; (189c4 <tx_cmplt_get+0xa8>)
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
   18924:	7823      	ldrb	r3, [r4, #0]
   18926:	7879      	ldrb	r1, [r7, #1]
   18928:	428b      	cmp	r3, r1
   1892a:	bf28      	it	cs
   1892c:	78bb      	ldrbcs	r3, [r7, #2]
{
   1892e:	4680      	mov	r8, r0
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   18930:	7838      	ldrb	r0, [r7, #0]
		*idx = first;
   18932:	bf28      	it	cs
   18934:	7023      	strbcs	r3, [r4, #0]
	}

	if (*idx == last) {
   18936:	7823      	ldrb	r3, [r4, #0]
   18938:	429a      	cmp	r2, r3
{
   1893a:	4691      	mov	r9, r2
   1893c:	d103      	bne.n	18946 <tx_cmplt_get+0x2a>
		return 0;
   1893e:	2500      	movs	r5, #0
}
   18940:	4628      	mov	r0, r5
   18942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return NULL;
	}

	i = *idx + 1;
   18946:	1c5a      	adds	r2, r3, #1
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
   18948:	4e1f      	ldr	r6, [pc, #124]	; (189c8 <tx_cmplt_get+0xac>)
	i = *idx + 1;
   1894a:	b2d2      	uxtb	r2, r2
		i = 0U;
   1894c:	4291      	cmp	r1, r2
   1894e:	bf08      	it	eq
   18950:	2200      	moveq	r2, #0
	p = (void *)(fifo + (*idx) * size);
   18952:	fb13 f300 	smulbb	r3, r3, r0

	*idx = i;
   18956:	7022      	strb	r2, [r4, #0]
	if (!tx) {
   18958:	18f2      	adds	r2, r6, r3
   1895a:	d0f0      	beq.n	1893e <tx_cmplt_get+0x22>
	*handle = tx->handle;
   1895c:	5af3      	ldrh	r3, [r6, r3]
   1895e:	f8a8 3000 	strh.w	r3, [r8]
	cmplt = 0U;
   18962:	2500      	movs	r5, #0
		node_tx = tx->node;
   18964:	6850      	ldr	r0, [r2, #4]
		if (!node_tx || (node_tx == (void *)1) ||
   18966:	2801      	cmp	r0, #1
		    (((uint32_t)node_tx & ~3) &&
   18968:	f020 0103 	bic.w	r1, r0, #3
		if (!node_tx || (node_tx == (void *)1) ||
   1896c:	d906      	bls.n	1897c <tx_cmplt_get+0x60>
   1896e:	b331      	cbz	r1, 189be <tx_cmplt_get+0xa2>
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
   18970:	7903      	ldrb	r3, [r0, #4]
   18972:	f003 0303 	and.w	r3, r3, #3
		    (((uint32_t)node_tx & ~3) &&
   18976:	3b01      	subs	r3, #1
   18978:	2b01      	cmp	r3, #1
   1897a:	d820      	bhi.n	189be <tx_cmplt_get+0xa2>
			cmplt++;
   1897c:	3501      	adds	r5, #1
   1897e:	b2ed      	uxtb	r5, r5
			tx->node = (void *)1;
   18980:	2301      	movs	r3, #1
   18982:	6053      	str	r3, [r2, #4]
		if (((uint32_t)node_tx & ~3)) {
   18984:	b109      	cbz	r1, 1898a <tx_cmplt_get+0x6e>
			ll_tx_mem_release(node_tx);
   18986:	f001 fc3b 	bl	1a200 <ll_tx_mem_release>
	if (*idx >= count) {
   1898a:	7823      	ldrb	r3, [r4, #0]
		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   1898c:	787a      	ldrb	r2, [r7, #1]
   1898e:	7838      	ldrb	r0, [r7, #0]
   18990:	4293      	cmp	r3, r2
   18992:	bf24      	itt	cs
   18994:	78bb      	ldrbcs	r3, [r7, #2]
		*idx = first;
   18996:	7023      	strbcs	r3, [r4, #0]
	if (*idx == last) {
   18998:	7823      	ldrb	r3, [r4, #0]
   1899a:	4599      	cmp	r9, r3
   1899c:	d0d0      	beq.n	18940 <tx_cmplt_get+0x24>
	i = *idx + 1;
   1899e:	1c59      	adds	r1, r3, #1
   189a0:	b2c9      	uxtb	r1, r1
	p = (void *)(fifo + (*idx) * size);
   189a2:	fb13 f300 	smulbb	r3, r3, r0
		i = 0U;
   189a6:	428a      	cmp	r2, r1
   189a8:	bf08      	it	eq
   189aa:	2100      	moveq	r1, #0
	} while (tx && tx->handle == *handle);
   189ac:	18f2      	adds	r2, r6, r3
	*idx = i;
   189ae:	7021      	strb	r1, [r4, #0]
   189b0:	d0c6      	beq.n	18940 <tx_cmplt_get+0x24>
   189b2:	5af1      	ldrh	r1, [r6, r3]
   189b4:	f8b8 3000 	ldrh.w	r3, [r8]
   189b8:	4299      	cmp	r1, r3
   189ba:	d0d3      	beq.n	18964 <tx_cmplt_get+0x48>
   189bc:	e7c0      	b.n	18940 <tx_cmplt_get+0x24>
			tx->node = (void *)2;
   189be:	2302      	movs	r3, #2
   189c0:	e7df      	b.n	18982 <tx_cmplt_get+0x66>
   189c2:	bf00      	nop
   189c4:	20000cd8 	.word	0x20000cd8
   189c8:	20000cdc 	.word	0x20000cdc

000189cc <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
   189cc:	6008      	str	r0, [r1, #0]
   189ce:	4801      	ldr	r0, [pc, #4]	; (189d4 <ull_ticker_status_give+0x8>)
   189d0:	f007 bb20 	b.w	20014 <z_impl_k_sem_give>
   189d4:	20002b14 	.word	0x20002b14

000189d8 <ll_init>:
{
   189d8:	b510      	push	{r4, lr}
	sem_recv = sem_rx;
   189da:	4b2c      	ldr	r3, [pc, #176]	; (18a8c <ll_init+0xb4>)
{
   189dc:	b086      	sub	sp, #24
	sem_recv = sem_rx;
   189de:	6018      	str	r0, [r3, #0]
	cntr_init();
   189e0:	f004 fc26 	bl	1d230 <cntr_init>
	mayfly_init();
   189e4:	f7fd ffb2 	bl	1694c <mayfly_init>
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   189e8:	4a29      	ldr	r2, [pc, #164]	; (18a90 <ll_init+0xb8>)
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   189ea:	2105      	movs	r1, #5
   189ec:	7211      	strb	r1, [r2, #8]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   189ee:	2102      	movs	r1, #2
   189f0:	7411      	strb	r1, [r2, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_THREAD_OPS;
   189f2:	7611      	strb	r1, [r2, #24]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   189f4:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   189f6:	4927      	ldr	r1, [pc, #156]	; (18a94 <ll_init+0xbc>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   189f8:	7013      	strb	r3, [r2, #0]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   189fa:	9105      	str	r1, [sp, #20]
   189fc:	4926      	ldr	r1, [pc, #152]	; (18a98 <ll_init+0xc0>)
   189fe:	9104      	str	r1, [sp, #16]
   18a00:	4926      	ldr	r1, [pc, #152]	; (18a9c <ll_init+0xc4>)
   18a02:	9103      	str	r1, [sp, #12]
   18a04:	4926      	ldr	r1, [pc, #152]	; (18aa0 <ll_init+0xc8>)
   18a06:	9102      	str	r1, [sp, #8]
   18a08:	210d      	movs	r1, #13
   18a0a:	e9cd 2100 	strd	r2, r1, [sp]
   18a0e:	2000      	movs	r0, #0
   18a10:	4a24      	ldr	r2, [pc, #144]	; (18aa4 <ll_init+0xcc>)
   18a12:	2108      	movs	r1, #8
   18a14:	f7fe fcc4 	bl	173a0 <ticker_init>
	LL_ASSERT(!err);
   18a18:	b160      	cbz	r0, 18a34 <ll_init+0x5c>
   18a1a:	4a23      	ldr	r2, [pc, #140]	; (18aa8 <ll_init+0xd0>)
   18a1c:	4923      	ldr	r1, [pc, #140]	; (18aac <ll_init+0xd4>)
   18a1e:	4824      	ldr	r0, [pc, #144]	; (18ab0 <ll_init+0xd8>)
   18a20:	f44f 7300 	mov.w	r3, #512	; 0x200
   18a24:	f008 fc22 	bl	2126c <printk>
   18a28:	4040      	eors	r0, r0
   18a2a:	f380 8811 	msr	BASEPRI, r0
   18a2e:	f04f 0003 	mov.w	r0, #3
   18a32:	df02      	svc	2
	return z_impl_k_sem_init(sem, initial_count, limit);
   18a34:	2201      	movs	r2, #1
   18a36:	2100      	movs	r1, #0
   18a38:	481e      	ldr	r0, [pc, #120]	; (18ab4 <ll_init+0xdc>)
   18a3a:	f010 f90c 	bl	28c56 <z_impl_k_sem_init>
	err = lll_init();
   18a3e:	f002 ff45 	bl	1b8cc <lll_init>
	if (err) {
   18a42:	4604      	mov	r4, r0
   18a44:	b9f0      	cbnz	r0, 18a84 <ll_init+0xac>
	err = init_reset();
   18a46:	f7ff fec9 	bl	187dc <init_reset>
	if (err) {
   18a4a:	4604      	mov	r4, r0
   18a4c:	b9d0      	cbnz	r0, 18a84 <ll_init+0xac>
	err = lll_adv_init();
   18a4e:	f003 fa8d 	bl	1bf6c <lll_adv_init>
	if (err) {
   18a52:	4604      	mov	r4, r0
   18a54:	b9b0      	cbnz	r0, 18a84 <ll_init+0xac>
	err = ull_adv_init();
   18a56:	f00e fd54 	bl	27502 <ull_adv_init>
	if (err) {
   18a5a:	4604      	mov	r4, r0
   18a5c:	b990      	cbnz	r0, 18a84 <ll_init+0xac>
	err = lll_scan_init();
   18a5e:	f00f f9a1 	bl	27da4 <lll_scan_init>
	if (err) {
   18a62:	4604      	mov	r4, r0
   18a64:	b970      	cbnz	r0, 18a84 <ll_init+0xac>
	err = ull_scan_init();
   18a66:	f00e fe0d 	bl	27684 <ull_scan_init>
	if (err) {
   18a6a:	4604      	mov	r4, r0
   18a6c:	b950      	cbnz	r0, 18a84 <ll_init+0xac>
	err = lll_conn_init();
   18a6e:	f00f f99d 	bl	27dac <lll_conn_init>
	if (err) {
   18a72:	4604      	mov	r4, r0
   18a74:	b930      	cbnz	r0, 18a84 <ll_init+0xac>
	err = ull_conn_init();
   18a76:	f00e ff86 	bl	27986 <ull_conn_init>
	if (err) {
   18a7a:	4604      	mov	r4, r0
   18a7c:	b910      	cbnz	r0, 18a84 <ll_init+0xac>
		ull_filter_reset(true);
   18a7e:	2001      	movs	r0, #1
   18a80:	f002 fd08 	bl	1b494 <ull_filter_reset>
}
   18a84:	4620      	mov	r0, r4
   18a86:	b006      	add	sp, #24
   18a88:	bd10      	pop	{r4, pc}
   18a8a:	bf00      	nop
   18a8c:	20002b10 	.word	0x20002b10
   18a90:	20002f50 	.word	0x20002f50
   18a94:	00027f85 	.word	0x00027f85
   18a98:	0001db29 	.word	0x0001db29
   18a9c:	0001dad1 	.word	0x0001dad1
   18aa0:	20002cac 	.word	0x20002cac
   18aa4:	20002b2c 	.word	0x20002b2c
   18aa8:	0002f278 	.word	0x0002f278
   18aac:	0002f2ed 	.word	0x0002f2ed
   18ab0:	0002b804 	.word	0x0002b804
   18ab4:	20002b14 	.word	0x20002b14

00018ab8 <ll_reset>:
{
   18ab8:	b510      	push	{r4, lr}
   18aba:	b086      	sub	sp, #24
	err = ull_adv_reset();
   18abc:	f00e fd23 	bl	27506 <ull_adv_reset>
	LL_ASSERT(!err);
   18ac0:	b160      	cbz	r0, 18adc <ll_reset+0x24>
   18ac2:	4a3f      	ldr	r2, [pc, #252]	; (18bc0 <ll_reset+0x108>)
   18ac4:	493f      	ldr	r1, [pc, #252]	; (18bc4 <ll_reset+0x10c>)
   18ac6:	4840      	ldr	r0, [pc, #256]	; (18bc8 <ll_reset+0x110>)
   18ac8:	f44f 7328 	mov.w	r3, #672	; 0x2a0
   18acc:	f008 fbce 	bl	2126c <printk>
   18ad0:	4040      	eors	r0, r0
   18ad2:	f380 8811 	msr	BASEPRI, r0
   18ad6:	f04f 0003 	mov.w	r0, #3
   18ada:	df02      	svc	2
	err = ull_scan_reset();
   18adc:	f00e fde8 	bl	276b0 <ull_scan_reset>
	LL_ASSERT(!err);
   18ae0:	b160      	cbz	r0, 18afc <ll_reset+0x44>
   18ae2:	4a37      	ldr	r2, [pc, #220]	; (18bc0 <ll_reset+0x108>)
   18ae4:	4937      	ldr	r1, [pc, #220]	; (18bc4 <ll_reset+0x10c>)
   18ae6:	4838      	ldr	r0, [pc, #224]	; (18bc8 <ll_reset+0x110>)
   18ae8:	f240 23a6 	movw	r3, #678	; 0x2a6
   18aec:	f008 fbbe 	bl	2126c <printk>
   18af0:	4040      	eors	r0, r0
   18af2:	f380 8811 	msr	BASEPRI, r0
   18af6:	f04f 0003 	mov.w	r0, #3
   18afa:	df02      	svc	2
	err = ull_conn_reset();
   18afc:	f001 fbf0 	bl	1a2e0 <ull_conn_reset>
	LL_ASSERT(!err);
   18b00:	b160      	cbz	r0, 18b1c <ll_reset+0x64>
   18b02:	4a2f      	ldr	r2, [pc, #188]	; (18bc0 <ll_reset+0x108>)
   18b04:	492f      	ldr	r1, [pc, #188]	; (18bc4 <ll_reset+0x10c>)
   18b06:	4830      	ldr	r0, [pc, #192]	; (18bc8 <ll_reset+0x110>)
   18b08:	f240 23d1 	movw	r3, #721	; 0x2d1
   18b0c:	f008 fbae 	bl	2126c <printk>
   18b10:	4040      	eors	r0, r0
   18b12:	f380 8811 	msr	BASEPRI, r0
   18b16:	f04f 0003 	mov.w	r0, #3
   18b1a:	df02      	svc	2
	MFIFO_INIT(tx_ack);
   18b1c:	4b2b      	ldr	r3, [pc, #172]	; (18bcc <ll_reset+0x114>)
   18b1e:	2400      	movs	r4, #0
   18b20:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
   18b22:	4620      	mov	r0, r4
   18b24:	f002 fcb6 	bl	1b494 <ull_filter_reset>
	MFIFO_INIT(prep);
   18b28:	4b29      	ldr	r3, [pc, #164]	; (18bd0 <ll_reset+0x118>)
   18b2a:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(done);
   18b2c:	4b29      	ldr	r3, [pc, #164]	; (18bd4 <ll_reset+0x11c>)
   18b2e:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(pdu_rx_free);
   18b30:	4b29      	ldr	r3, [pc, #164]	; (18bd8 <ll_reset+0x120>)
   18b32:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(ll_pdu_rx_free);
   18b34:	4b29      	ldr	r3, [pc, #164]	; (18bdc <ll_reset+0x124>)
   18b36:	805c      	strh	r4, [r3, #2]
   18b38:	2201      	movs	r2, #1
   18b3a:	4621      	mov	r1, r4
   18b3c:	4668      	mov	r0, sp
   18b3e:	f010 f88a 	bl	28c56 <z_impl_k_sem_init>
		mfy.param = &sem;
   18b42:	4b27      	ldr	r3, [pc, #156]	; (18be0 <ll_reset+0x128>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   18b44:	4622      	mov	r2, r4
   18b46:	4621      	mov	r1, r4
   18b48:	2003      	movs	r0, #3
		mfy.param = &sem;
   18b4a:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   18b4e:	f7fd ff55 	bl	169fc <mayfly_enqueue>
		LL_ASSERT(!retval);
   18b52:	b160      	cbz	r0, 18b6e <ll_reset+0xb6>
   18b54:	4a1a      	ldr	r2, [pc, #104]	; (18bc0 <ll_reset+0x108>)
   18b56:	4923      	ldr	r1, [pc, #140]	; (18be4 <ll_reset+0x12c>)
   18b58:	481b      	ldr	r0, [pc, #108]	; (18bc8 <ll_reset+0x110>)
   18b5a:	f240 3303 	movw	r3, #771	; 0x303
   18b5e:	f008 fb85 	bl	2126c <printk>
   18b62:	4040      	eors	r0, r0
   18b64:	f380 8811 	msr	BASEPRI, r0
   18b68:	f04f 0003 	mov.w	r0, #3
   18b6c:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   18b6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18b72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18b76:	4668      	mov	r0, sp
   18b78:	f007 fa72 	bl	20060 <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
   18b7c:	f000 ffc8 	bl	19b10 <ull_adv_reset_finalize>
	LL_ASSERT(!err);
   18b80:	b160      	cbz	r0, 18b9c <ll_reset+0xe4>
   18b82:	4a0f      	ldr	r2, [pc, #60]	; (18bc0 <ll_reset+0x108>)
   18b84:	490f      	ldr	r1, [pc, #60]	; (18bc4 <ll_reset+0x10c>)
   18b86:	4810      	ldr	r0, [pc, #64]	; (18bc8 <ll_reset+0x110>)
   18b88:	f44f 7344 	mov.w	r3, #784	; 0x310
   18b8c:	f008 fb6e 	bl	2126c <printk>
   18b90:	4040      	eors	r0, r0
   18b92:	f380 8811 	msr	BASEPRI, r0
   18b96:	f04f 0003 	mov.w	r0, #3
   18b9a:	df02      	svc	2
	err = init_reset();
   18b9c:	f7ff fe1e 	bl	187dc <init_reset>
	LL_ASSERT(!err);
   18ba0:	b160      	cbz	r0, 18bbc <ll_reset+0x104>
   18ba2:	4a07      	ldr	r2, [pc, #28]	; (18bc0 <ll_reset+0x108>)
   18ba4:	4907      	ldr	r1, [pc, #28]	; (18bc4 <ll_reset+0x10c>)
   18ba6:	4808      	ldr	r0, [pc, #32]	; (18bc8 <ll_reset+0x110>)
   18ba8:	f240 3315 	movw	r3, #789	; 0x315
   18bac:	f008 fb5e 	bl	2126c <printk>
   18bb0:	4040      	eors	r0, r0
   18bb2:	f380 8811 	msr	BASEPRI, r0
   18bb6:	f04f 0003 	mov.w	r0, #3
   18bba:	df02      	svc	2
}
   18bbc:	b006      	add	sp, #24
   18bbe:	bd10      	pop	{r4, pc}
   18bc0:	0002f278 	.word	0x0002f278
   18bc4:	0002f2ed 	.word	0x0002f2ed
   18bc8:	0002b804 	.word	0x0002b804
   18bcc:	20000cd8 	.word	0x20000cd8
   18bd0:	20000bd4 	.word	0x20000bd4
   18bd4:	20000b84 	.word	0x20000b84
   18bd8:	20000ba8 	.word	0x20000ba8
   18bdc:	20000b9c 	.word	0x20000b9c
   18be0:	20000d14 	.word	0x20000d14
   18be4:	0002f317 	.word	0x0002f317

00018be8 <ll_rx_get>:
{
   18be8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   18bec:	4f26      	ldr	r7, [pc, #152]	; (18c88 <ll_rx_get+0xa0>)
   18bee:	f8df 809c 	ldr.w	r8, [pc, #156]	; 18c8c <ll_rx_get+0xa4>
{
   18bf2:	4605      	mov	r5, r0
   18bf4:	460c      	mov	r4, r1
	*node_rx = NULL;
   18bf6:	2300      	movs	r3, #0
   18bf8:	602b      	str	r3, [r5, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   18bfa:	e9d7 0100 	ldrd	r0, r1, [r7]
   18bfe:	aa01      	add	r2, sp, #4
   18c00:	f00e f8f9 	bl	26df6 <memq_peek>
	if (link) {
   18c04:	4606      	mov	r6, r0
   18c06:	2800      	cmp	r0, #0
   18c08:	d036      	beq.n	18c78 <ll_rx_get+0x90>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   18c0a:	9b01      	ldr	r3, [sp, #4]
   18c0c:	4920      	ldr	r1, [pc, #128]	; (18c90 <ll_rx_get+0xa8>)
   18c0e:	781a      	ldrb	r2, [r3, #0]
   18c10:	4620      	mov	r0, r4
   18c12:	f7ff fe83 	bl	1891c <tx_cmplt_get>
		if (!cmplt) {
   18c16:	bb60      	cbnz	r0, 18c72 <ll_rx_get+0x8a>
			f = mfifo_tx_ack.f;
   18c18:	f898 3002 	ldrb.w	r3, [r8, #2]
   18c1c:	f88d 3001 	strb.w	r3, [sp, #1]
				cmplt_curr = tx_cmplt_get(&h, &f,
   18c20:	f898 2003 	ldrb.w	r2, [r8, #3]
   18c24:	4681      	mov	r9, r0
   18c26:	f10d 0101 	add.w	r1, sp, #1
   18c2a:	f10d 0002 	add.w	r0, sp, #2
   18c2e:	f7ff fe75 	bl	1891c <tx_cmplt_get>
			} while ((cmplt_prev != 0U) ||
   18c32:	ea49 0200 	orr.w	r2, r9, r0
   18c36:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   18c3a:	d1f1      	bne.n	18c20 <ll_rx_get+0x38>
			} else if (rx->type == NODE_RX_TYPE_RELEASE) {
   18c3c:	9b01      	ldr	r3, [sp, #4]
   18c3e:	f893 9004 	ldrb.w	r9, [r3, #4]
   18c42:	f1b9 0f01 	cmp.w	r9, #1
   18c46:	d112      	bne.n	18c6e <ll_rx_get+0x86>
				(void)memq_dequeue(memq_ll_rx.tail,
   18c48:	4639      	mov	r1, r7
   18c4a:	6878      	ldr	r0, [r7, #4]
   18c4c:	f00e f8db 	bl	26e06 <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
   18c50:	4910      	ldr	r1, [pc, #64]	; (18c94 <ll_rx_get+0xac>)
   18c52:	4630      	mov	r0, r6
   18c54:	f00e f883 	bl	26d5e <mem_release>
				ll_rx_link_inc_quota(1);
   18c58:	4648      	mov	r0, r9
   18c5a:	f7ff fc5d 	bl	18518 <ll_rx_link_inc_quota>
				mem_release(rx, &mem_pdu_rx.free);
   18c5e:	9801      	ldr	r0, [sp, #4]
   18c60:	490d      	ldr	r1, [pc, #52]	; (18c98 <ll_rx_get+0xb0>)
   18c62:	f00e f87c 	bl	26d5e <mem_release>
				rx_alloc(1);
   18c66:	4648      	mov	r0, r9
   18c68:	f7ff fd42 	bl	186f0 <rx_alloc>
				goto ll_rx_get_again;
   18c6c:	e7c3      	b.n	18bf6 <ll_rx_get+0xe>
			*node_rx = rx;
   18c6e:	602b      	str	r3, [r5, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   18c70:	4610      	mov	r0, r2
}
   18c72:	b003      	add	sp, #12
   18c74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
   18c78:	f898 2003 	ldrb.w	r2, [r8, #3]
   18c7c:	4904      	ldr	r1, [pc, #16]	; (18c90 <ll_rx_get+0xa8>)
   18c7e:	4620      	mov	r0, r4
   18c80:	f7ff fe4c 	bl	1891c <tx_cmplt_get>
   18c84:	e7f5      	b.n	18c72 <ll_rx_get+0x8a>
   18c86:	bf00      	nop
   18c88:	20002af8 	.word	0x20002af8
   18c8c:	20000cd8 	.word	0x20000cd8
   18c90:	20000cda 	.word	0x20000cda
   18c94:	20002750 	.word	0x20002750
   18c98:	200027c4 	.word	0x200027c4

00018c9c <ll_rx_dequeue>:
{
   18c9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   18c9e:	4948      	ldr	r1, [pc, #288]	; (18dc0 <ll_rx_dequeue+0x124>)
	struct node_rx_hdr *rx = NULL;
   18ca0:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   18ca2:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
   18ca4:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   18ca6:	aa01      	add	r2, sp, #4
   18ca8:	f00e f8ad 	bl	26e06 <memq_dequeue>
	LL_ASSERT(link);
   18cac:	4604      	mov	r4, r0
   18cae:	b960      	cbnz	r0, 18cca <ll_rx_dequeue+0x2e>
   18cb0:	4a44      	ldr	r2, [pc, #272]	; (18dc4 <ll_rx_dequeue+0x128>)
   18cb2:	4945      	ldr	r1, [pc, #276]	; (18dc8 <ll_rx_dequeue+0x12c>)
   18cb4:	4845      	ldr	r0, [pc, #276]	; (18dcc <ll_rx_dequeue+0x130>)
   18cb6:	f240 338f 	movw	r3, #911	; 0x38f
   18cba:	f008 fad7 	bl	2126c <printk>
   18cbe:	4040      	eors	r0, r0
   18cc0:	f380 8811 	msr	BASEPRI, r0
   18cc4:	f04f 0003 	mov.w	r0, #3
   18cc8:	df02      	svc	2
	mem_release(link, &mem_link_rx.free);
   18cca:	4941      	ldr	r1, [pc, #260]	; (18dd0 <ll_rx_dequeue+0x134>)
   18ccc:	4620      	mov	r0, r4
   18cce:	f00e f846 	bl	26d5e <mem_release>
	switch (rx->type) {
   18cd2:	9b01      	ldr	r3, [sp, #4]
   18cd4:	7919      	ldrb	r1, [r3, #4]
   18cd6:	291b      	cmp	r1, #27
   18cd8:	d86f      	bhi.n	18dba <ll_rx_dequeue+0x11e>
   18cda:	483e      	ldr	r0, [pc, #248]	; (18dd4 <ll_rx_dequeue+0x138>)
   18cdc:	2201      	movs	r2, #1
   18cde:	408a      	lsls	r2, r1
   18ce0:	4202      	tst	r2, r0
   18ce2:	d15a      	bne.n	18d9a <ll_rx_dequeue+0xfe>
   18ce4:	0252      	lsls	r2, r2, #9
   18ce6:	d568      	bpl.n	18dba <ll_rx_dequeue+0x11e>
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   18ce8:	7f1a      	ldrb	r2, [r3, #28]
   18cea:	2a3c      	cmp	r2, #60	; 0x3c
   18cec:	d002      	beq.n	18cf4 <ll_rx_dequeue+0x58>
   18cee:	7f59      	ldrb	r1, [r3, #29]
   18cf0:	2900      	cmp	r1, #0
   18cf2:	d04d      	beq.n	18d90 <ll_rx_dequeue+0xf4>
			lll = ftr->param;
   18cf4:	689e      	ldr	r6, [r3, #8]
			if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   18cf6:	2a3c      	cmp	r2, #60	; 0x3c
			adv = HDR_LLL2ULL(lll);
   18cf8:	6835      	ldr	r5, [r6, #0]
			if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   18cfa:	d140      	bne.n	18d7e <ll_rx_dequeue+0xe2>
				conn_lll = lll->conn;
   18cfc:	6874      	ldr	r4, [r6, #4]
				LL_ASSERT(conn_lll);
   18cfe:	b964      	cbnz	r4, 18d1a <ll_rx_dequeue+0x7e>
   18d00:	4a30      	ldr	r2, [pc, #192]	; (18dc4 <ll_rx_dequeue+0x128>)
   18d02:	4935      	ldr	r1, [pc, #212]	; (18dd8 <ll_rx_dequeue+0x13c>)
   18d04:	4831      	ldr	r0, [pc, #196]	; (18dcc <ll_rx_dequeue+0x130>)
   18d06:	f240 4305 	movw	r3, #1029	; 0x405
   18d0a:	f008 faaf 	bl	2126c <printk>
   18d0e:	4040      	eors	r0, r0
   18d10:	f380 8811 	msr	BASEPRI, r0
   18d14:	f04f 0003 	mov.w	r0, #3
   18d18:	df02      	svc	2
				lll->conn = NULL;
   18d1a:	2300      	movs	r3, #0
   18d1c:	6073      	str	r3, [r6, #4]
				LL_ASSERT(!conn_lll->link_tx_free);
   18d1e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   18d20:	b163      	cbz	r3, 18d3c <ll_rx_dequeue+0xa0>
   18d22:	4a28      	ldr	r2, [pc, #160]	; (18dc4 <ll_rx_dequeue+0x128>)
   18d24:	492d      	ldr	r1, [pc, #180]	; (18ddc <ll_rx_dequeue+0x140>)
   18d26:	4829      	ldr	r0, [pc, #164]	; (18dcc <ll_rx_dequeue+0x130>)
   18d28:	f44f 6381 	mov.w	r3, #1032	; 0x408
   18d2c:	f008 fa9e 	bl	2126c <printk>
   18d30:	4040      	eors	r0, r0
   18d32:	f380 8811 	msr	BASEPRI, r0
   18d36:	f04f 0003 	mov.w	r0, #3
   18d3a:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
   18d3c:	f104 0140 	add.w	r1, r4, #64	; 0x40
   18d40:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   18d44:	f00e f845 	bl	26dd2 <memq_deinit>
				LL_ASSERT(link);
   18d48:	4606      	mov	r6, r0
   18d4a:	b960      	cbnz	r0, 18d66 <ll_rx_dequeue+0xca>
   18d4c:	4a1d      	ldr	r2, [pc, #116]	; (18dc4 <ll_rx_dequeue+0x128>)
   18d4e:	491e      	ldr	r1, [pc, #120]	; (18dc8 <ll_rx_dequeue+0x12c>)
   18d50:	481e      	ldr	r0, [pc, #120]	; (18dcc <ll_rx_dequeue+0x130>)
   18d52:	f240 430b 	movw	r3, #1035	; 0x40b
   18d56:	f008 fa89 	bl	2126c <printk>
   18d5a:	4040      	eors	r0, r0
   18d5c:	f380 8811 	msr	BASEPRI, r0
   18d60:	f04f 0003 	mov.w	r0, #3
   18d64:	df02      	svc	2
				ll_conn_release(conn);
   18d66:	6820      	ldr	r0, [r4, #0]
				conn_lll->link_tx_free = link;
   18d68:	64e6      	str	r6, [r4, #76]	; 0x4c
				ll_conn_release(conn);
   18d6a:	f001 f9bf 	bl	1a0ec <ll_conn_release>
			adv->is_enabled = 0U;
   18d6e:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
   18d72:	f36f 0300 	bfc	r3, #0, #1
   18d76:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
}
   18d7a:	b002      	add	sp, #8
   18d7c:	bd70      	pop	{r4, r5, r6, pc}
				if (adv->node_rx_cc_free) {
   18d7e:	6e68      	ldr	r0, [r5, #100]	; 0x64
   18d80:	2800      	cmp	r0, #0
   18d82:	d0f4      	beq.n	18d6e <ll_rx_dequeue+0xd2>
					adv->node_rx_cc_free = NULL;
   18d84:	2300      	movs	r3, #0
					mem_release(rx_free, &mem_pdu_rx.free);
   18d86:	4916      	ldr	r1, [pc, #88]	; (18de0 <ll_rx_dequeue+0x144>)
					adv->node_rx_cc_free = NULL;
   18d88:	666b      	str	r3, [r5, #100]	; 0x64
					mem_release(rx_free, &mem_pdu_rx.free);
   18d8a:	f00d ffe8 	bl	26d5e <mem_release>
   18d8e:	e7ee      	b.n	18d6e <ll_rx_dequeue+0xd2>
			LL_ASSERT(0);
   18d90:	f240 4342 	movw	r3, #1090	; 0x442
		LL_ASSERT(0);
   18d94:	4a0b      	ldr	r2, [pc, #44]	; (18dc4 <ll_rx_dequeue+0x128>)
   18d96:	4913      	ldr	r1, [pc, #76]	; (18de4 <ll_rx_dequeue+0x148>)
   18d98:	e005      	b.n	18da6 <ll_rx_dequeue+0x10a>
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   18d9a:	2900      	cmp	r1, #0
   18d9c:	d1ed      	bne.n	18d7a <ll_rx_dequeue+0xde>
   18d9e:	4a09      	ldr	r2, [pc, #36]	; (18dc4 <ll_rx_dequeue+0x128>)
   18da0:	4911      	ldr	r1, [pc, #68]	; (18de8 <ll_rx_dequeue+0x14c>)
   18da2:	f240 43a7 	movw	r3, #1191	; 0x4a7
		LL_ASSERT(0);
   18da6:	4809      	ldr	r0, [pc, #36]	; (18dcc <ll_rx_dequeue+0x130>)
   18da8:	f008 fa60 	bl	2126c <printk>
   18dac:	4040      	eors	r0, r0
   18dae:	f380 8811 	msr	BASEPRI, r0
   18db2:	f04f 0003 	mov.w	r0, #3
   18db6:	df02      	svc	2
}
   18db8:	e7df      	b.n	18d7a <ll_rx_dequeue+0xde>
		LL_ASSERT(0);
   18dba:	f240 43ab 	movw	r3, #1195	; 0x4ab
   18dbe:	e7e9      	b.n	18d94 <ll_rx_dequeue+0xf8>
   18dc0:	20002af8 	.word	0x20002af8
   18dc4:	0002f278 	.word	0x0002f278
   18dc8:	0002e896 	.word	0x0002e896
   18dcc:	0002b804 	.word	0x0002b804
   18dd0:	20002750 	.word	0x20002750
   18dd4:	0b800029 	.word	0x0b800029
   18dd8:	0002f31f 	.word	0x0002f31f
   18ddc:	0002f328 	.word	0x0002f328
   18de0:	200027c4 	.word	0x200027c4
   18de4:	0002cf80 	.word	0x0002cf80
   18de8:	0002f340 	.word	0x0002f340

00018dec <ll_rx_mem_release>:
{
   18dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = *node_rx;
   18df0:	6804      	ldr	r4, [r0, #0]
			LL_ASSERT(0);
   18df2:	4d49      	ldr	r5, [pc, #292]	; (18f18 <ll_rx_mem_release+0x12c>)
   18df4:	f8df 8124 	ldr.w	r8, [pc, #292]	; 18f1c <ll_rx_mem_release+0x130>
   18df8:	4e49      	ldr	r6, [pc, #292]	; (18f20 <ll_rx_mem_release+0x134>)
{
   18dfa:	4607      	mov	r7, r0
	while (rx) {
   18dfc:	b92c      	cbnz	r4, 18e0a <ll_rx_mem_release+0x1e>
	*node_rx = rx;
   18dfe:	603c      	str	r4, [r7, #0]
	rx_alloc(UINT8_MAX);
   18e00:	20ff      	movs	r0, #255	; 0xff
}
   18e02:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx_alloc(UINT8_MAX);
   18e06:	f7ff bc73 	b.w	186f0 <rx_alloc>
		switch (rx_free->type) {
   18e0a:	7923      	ldrb	r3, [r4, #4]
		rx = rx->next;
   18e0c:	f8d4 9000 	ldr.w	r9, [r4]
		switch (rx_free->type) {
   18e10:	2b05      	cmp	r3, #5
   18e12:	d813      	bhi.n	18e3c <ll_rx_mem_release+0x50>
   18e14:	2201      	movs	r2, #1
   18e16:	fa02 f303 	lsl.w	r3, r2, r3
   18e1a:	f013 0f29 	tst.w	r3, #41	; 0x29
   18e1e:	d13a      	bne.n	18e96 <ll_rx_mem_release+0xaa>
			LL_ASSERT(0);
   18e20:	f44f 63b2 	mov.w	r3, #1424	; 0x590
   18e24:	462a      	mov	r2, r5
   18e26:	4641      	mov	r1, r8
   18e28:	4630      	mov	r0, r6
   18e2a:	f008 fa1f 	bl	2126c <printk>
   18e2e:	4040      	eors	r0, r0
   18e30:	f380 8811 	msr	BASEPRI, r0
   18e34:	f04f 0003 	mov.w	r0, #3
   18e38:	df02      	svc	2
			break;
   18e3a:	e01c      	b.n	18e76 <ll_rx_mem_release+0x8a>
		switch (rx_free->type) {
   18e3c:	3b16      	subs	r3, #22
   18e3e:	b2da      	uxtb	r2, r3
   18e40:	2a05      	cmp	r2, #5
   18e42:	d8ed      	bhi.n	18e20 <ll_rx_mem_release+0x34>
   18e44:	2b05      	cmp	r3, #5
   18e46:	d8eb      	bhi.n	18e20 <ll_rx_mem_release+0x34>
   18e48:	a201      	add	r2, pc, #4	; (adr r2, 18e50 <ll_rx_mem_release+0x64>)
   18e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   18e4e:	bf00      	nop
   18e50:	00018e69 	.word	0x00018e69
   18e54:	00018ebd 	.word	0x00018ebd
   18e58:	00018e97 	.word	0x00018e97
   18e5c:	00018e97 	.word	0x00018e97
   18e60:	00018e21 	.word	0x00018e21
   18e64:	00018e97 	.word	0x00018e97
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   18e68:	7f23      	ldrb	r3, [r4, #28]
   18e6a:	2b3c      	cmp	r3, #60	; 0x3c
   18e6c:	d105      	bne.n	18e7a <ll_rx_mem_release+0x8e>
			mem_release(rx_free, &mem_pdu_rx.free);
   18e6e:	492d      	ldr	r1, [pc, #180]	; (18f24 <ll_rx_mem_release+0x138>)
   18e70:	4620      	mov	r0, r4
   18e72:	f00d ff74 	bl	26d5e <mem_release>
{
   18e76:	464c      	mov	r4, r9
   18e78:	e7c0      	b.n	18dfc <ll_rx_mem_release+0x10>
				LL_ASSERT(!cc->status);
   18e7a:	b163      	cbz	r3, 18e96 <ll_rx_mem_release+0xaa>
   18e7c:	492a      	ldr	r1, [pc, #168]	; (18f28 <ll_rx_mem_release+0x13c>)
   18e7e:	f240 5301 	movw	r3, #1281	; 0x501
   18e82:	462a      	mov	r2, r5
   18e84:	4630      	mov	r0, r6
   18e86:	f008 f9f1 	bl	2126c <printk>
   18e8a:	4040      	eors	r0, r0
   18e8c:	f380 8811 	msr	BASEPRI, r0
   18e90:	f04f 0003 	mov.w	r0, #3
   18e94:	df02      	svc	2
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   18e96:	7923      	ldrb	r3, [r4, #4]
   18e98:	b963      	cbnz	r3, 18eb4 <ll_rx_mem_release+0xc8>
   18e9a:	4924      	ldr	r1, [pc, #144]	; (18f2c <ll_rx_mem_release+0x140>)
   18e9c:	f240 5353 	movw	r3, #1363	; 0x553
   18ea0:	462a      	mov	r2, r5
   18ea2:	4630      	mov	r0, r6
   18ea4:	f008 f9e2 	bl	2126c <printk>
   18ea8:	4040      	eors	r0, r0
   18eaa:	f380 8811 	msr	BASEPRI, r0
   18eae:	f04f 0003 	mov.w	r0, #3
   18eb2:	df02      	svc	2
			ll_rx_link_inc_quota(1);
   18eb4:	2001      	movs	r0, #1
   18eb6:	f7ff fb2f 	bl	18518 <ll_rx_link_inc_quota>
   18eba:	e7d8      	b.n	18e6e <ll_rx_mem_release+0x82>
			conn = ll_conn_get(rx_free->handle);
   18ebc:	88e0      	ldrh	r0, [r4, #6]
   18ebe:	f001 f991 	bl	1a1e4 <ll_conn_get>
			LL_ASSERT(!conn->lll.link_tx_free);
   18ec2:	6e83      	ldr	r3, [r0, #104]	; 0x68
			conn = ll_conn_get(rx_free->handle);
   18ec4:	4604      	mov	r4, r0
			LL_ASSERT(!conn->lll.link_tx_free);
   18ec6:	b163      	cbz	r3, 18ee2 <ll_rx_mem_release+0xf6>
   18ec8:	4919      	ldr	r1, [pc, #100]	; (18f30 <ll_rx_mem_release+0x144>)
   18eca:	f240 5383 	movw	r3, #1411	; 0x583
   18ece:	462a      	mov	r2, r5
   18ed0:	4630      	mov	r0, r6
   18ed2:	f008 f9cb 	bl	2126c <printk>
   18ed6:	4040      	eors	r0, r0
   18ed8:	f380 8811 	msr	BASEPRI, r0
   18edc:	f04f 0003 	mov.w	r0, #3
   18ee0:	df02      	svc	2
			link = memq_deinit(&conn->lll.memq_tx.head,
   18ee2:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   18ee6:	f104 0058 	add.w	r0, r4, #88	; 0x58
   18eea:	f00d ff72 	bl	26dd2 <memq_deinit>
			LL_ASSERT(link);
   18eee:	4682      	mov	sl, r0
   18ef0:	b960      	cbnz	r0, 18f0c <ll_rx_mem_release+0x120>
   18ef2:	4910      	ldr	r1, [pc, #64]	; (18f34 <ll_rx_mem_release+0x148>)
   18ef4:	f240 5386 	movw	r3, #1414	; 0x586
   18ef8:	462a      	mov	r2, r5
   18efa:	4630      	mov	r0, r6
   18efc:	f008 f9b6 	bl	2126c <printk>
   18f00:	4040      	eors	r0, r0
   18f02:	f380 8811 	msr	BASEPRI, r0
   18f06:	f04f 0003 	mov.w	r0, #3
   18f0a:	df02      	svc	2
			conn->lll.link_tx_free = link;
   18f0c:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
			ll_conn_release(conn);
   18f10:	4620      	mov	r0, r4
   18f12:	f001 f8eb 	bl	1a0ec <ll_conn_release>
		break;
   18f16:	e7ae      	b.n	18e76 <ll_rx_mem_release+0x8a>
   18f18:	0002f278 	.word	0x0002f278
   18f1c:	0002cf80 	.word	0x0002cf80
   18f20:	0002b804 	.word	0x0002b804
   18f24:	200027c4 	.word	0x200027c4
   18f28:	0002f35e 	.word	0x0002f35e
   18f2c:	0002f36a 	.word	0x0002f36a
   18f30:	0002f38d 	.word	0x0002f38d
   18f34:	0002e896 	.word	0x0002e896

00018f38 <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
   18f38:	4801      	ldr	r0, [pc, #4]	; (18f40 <ll_rx_link_alloc+0x8>)
   18f3a:	f00d bef7 	b.w	26d2c <mem_acquire>
   18f3e:	bf00      	nop
   18f40:	20002750 	.word	0x20002750

00018f44 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
   18f44:	4901      	ldr	r1, [pc, #4]	; (18f4c <ll_rx_link_release+0x8>)
   18f46:	f00d bf0a 	b.w	26d5e <mem_release>
   18f4a:	bf00      	nop
   18f4c:	20002750 	.word	0x20002750

00018f50 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
   18f50:	4801      	ldr	r0, [pc, #4]	; (18f58 <ll_rx_alloc+0x8>)
   18f52:	f00d beeb 	b.w	26d2c <mem_acquire>
   18f56:	bf00      	nop
   18f58:	200027c4 	.word	0x200027c4

00018f5c <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
   18f5c:	4901      	ldr	r1, [pc, #4]	; (18f64 <ll_rx_release+0x8>)
   18f5e:	f00d befe 	b.w	26d5e <mem_release>
   18f62:	bf00      	nop
   18f64:	200027c4 	.word	0x200027c4

00018f68 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
   18f68:	4b02      	ldr	r3, [pc, #8]	; (18f74 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   18f6a:	4a03      	ldr	r2, [pc, #12]	; (18f78 <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   18f6c:	78db      	ldrb	r3, [r3, #3]
   18f6e:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   18f70:	f00d bf3a 	b.w	26de8 <memq_enqueue>
   18f74:	20000cd8 	.word	0x20000cd8
   18f78:	20002afc 	.word	0x20002afc

00018f7c <ll_rx_sched>:
	k_sem_give(sem_recv);
   18f7c:	4b01      	ldr	r3, [pc, #4]	; (18f84 <ll_rx_sched+0x8>)
   18f7e:	6818      	ldr	r0, [r3, #0]
	z_impl_k_sem_give(sem);
   18f80:	f007 b848 	b.w	20014 <z_impl_k_sem_give>
   18f84:	20002b10 	.word	0x20002b10

00018f88 <rx_demux>:
{
   18f88:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   18f8a:	4c3c      	ldr	r4, [pc, #240]	; (1907c <rx_demux+0xf4>)
		LL_ASSERT(0);
   18f8c:	4e3c      	ldr	r6, [pc, #240]	; (19080 <rx_demux+0xf8>)
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   18f8e:	e9d4 0100 	ldrd	r0, r1, [r4]
   18f92:	aa01      	add	r2, sp, #4
   18f94:	f00d ff2f 	bl	26df6 <memq_peek>
		if (link) {
   18f98:	4605      	mov	r5, r0
   18f9a:	2800      	cmp	r0, #0
   18f9c:	d05d      	beq.n	1905a <rx_demux+0xd2>
			LL_ASSERT(rx);
   18f9e:	9b01      	ldr	r3, [sp, #4]
   18fa0:	b963      	cbnz	r3, 18fbc <rx_demux+0x34>
   18fa2:	4938      	ldr	r1, [pc, #224]	; (19084 <rx_demux+0xfc>)
   18fa4:	4838      	ldr	r0, [pc, #224]	; (19088 <rx_demux+0x100>)
   18fa6:	f640 0379 	movw	r3, #2169	; 0x879
   18faa:	4632      	mov	r2, r6
   18fac:	f008 f95e 	bl	2126c <printk>
   18fb0:	4040      	eors	r0, r0
   18fb2:	f380 8811 	msr	BASEPRI, r0
   18fb6:	f04f 0003 	mov.w	r0, #3
   18fba:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   18fbc:	9b01      	ldr	r3, [sp, #4]
   18fbe:	aa02      	add	r2, sp, #8
   18fc0:	7818      	ldrb	r0, [r3, #0]
   18fc2:	f10d 0102 	add.w	r1, sp, #2
   18fc6:	f002 f825 	bl	1b014 <ull_conn_ack_by_last_peek>
			if (link_tx) {
   18fca:	4602      	mov	r2, r0
   18fcc:	9801      	ldr	r0, [sp, #4]
   18fce:	b132      	cbz	r2, 18fde <rx_demux+0x56>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
   18fd0:	9b02      	ldr	r3, [sp, #8]
   18fd2:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   18fd6:	7800      	ldrb	r0, [r0, #0]
				rx_demux_conn_tx_ack(ack_last, handle,
   18fd8:	f00e fa33 	bl	27442 <rx_demux_conn_tx_ack>
	} while (link);
   18fdc:	e7d7      	b.n	18f8e <rx_demux+0x6>
				nack = rx_demux_rx(link, rx);
   18fde:	9003      	str	r0, [sp, #12]
	switch (rx->type) {
   18fe0:	7903      	ldrb	r3, [r0, #4]
   18fe2:	2b05      	cmp	r3, #5
   18fe4:	d016      	beq.n	19014 <rx_demux+0x8c>
   18fe6:	d811      	bhi.n	1900c <rx_demux+0x84>
   18fe8:	2b01      	cmp	r3, #1
   18fea:	d013      	beq.n	19014 <rx_demux+0x8c>
   18fec:	2b03      	cmp	r3, #3
   18fee:	d021      	beq.n	19034 <rx_demux+0xac>
		LL_ASSERT(0);
   18ff0:	4926      	ldr	r1, [pc, #152]	; (1908c <rx_demux+0x104>)
   18ff2:	4825      	ldr	r0, [pc, #148]	; (19088 <rx_demux+0x100>)
   18ff4:	f44f 631e 	mov.w	r3, #2528	; 0x9e0
   18ff8:	4632      	mov	r2, r6
   18ffa:	f008 f937 	bl	2126c <printk>
   18ffe:	4040      	eors	r0, r0
   19000:	f380 8811 	msr	BASEPRI, r0
   19004:	f04f 0003 	mov.w	r0, #3
   19008:	df02      	svc	2
			if (nack) {
   1900a:	e7c0      	b.n	18f8e <rx_demux+0x6>
	switch (rx->type) {
   1900c:	2b16      	cmp	r3, #22
   1900e:	d008      	beq.n	19022 <rx_demux+0x9a>
   19010:	2b17      	cmp	r3, #23
   19012:	d1ed      	bne.n	18ff0 <rx_demux+0x68>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   19014:	4621      	mov	r1, r4
   19016:	6860      	ldr	r0, [r4, #4]
   19018:	2200      	movs	r2, #0
   1901a:	f00d fef4 	bl	26e06 <memq_dequeue>
		ll_rx_put(link, rx);
   1901e:	9903      	ldr	r1, [sp, #12]
   19020:	e015      	b.n	1904e <rx_demux+0xc6>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   19022:	4621      	mov	r1, r4
   19024:	6860      	ldr	r0, [r4, #4]
   19026:	f00d feee 	bl	26e06 <memq_dequeue>
		ull_conn_setup(link, rx);
   1902a:	9903      	ldr	r1, [sp, #12]
   1902c:	4628      	mov	r0, r5
   1902e:	f001 f98d 	bl	1a34c <ull_conn_setup>
			if (nack) {
   19032:	e7ac      	b.n	18f8e <rx_demux+0x6>
		nack = ull_conn_rx(link, (void *)&rx);
   19034:	a903      	add	r1, sp, #12
   19036:	4628      	mov	r0, r5
   19038:	f001 f9b0 	bl	1a39c <ull_conn_rx>
		if (nack) {
   1903c:	4602      	mov	r2, r0
   1903e:	b9d0      	cbnz	r0, 19076 <rx_demux+0xee>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   19040:	4621      	mov	r1, r4
   19042:	6860      	ldr	r0, [r4, #4]
   19044:	f00d fedf 	bl	26e06 <memq_dequeue>
		if (rx) {
   19048:	9903      	ldr	r1, [sp, #12]
   1904a:	2900      	cmp	r1, #0
   1904c:	d09f      	beq.n	18f8e <rx_demux+0x6>
		ll_rx_put(link, rx);
   1904e:	4628      	mov	r0, r5
   19050:	f7ff ff8a 	bl	18f68 <ll_rx_put>
		ll_rx_sched();
   19054:	f7ff ff92 	bl	18f7c <ll_rx_sched>
			if (nack) {
   19058:	e799      	b.n	18f8e <rx_demux+0x6>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
   1905a:	aa03      	add	r2, sp, #12
   1905c:	a902      	add	r1, sp, #8
   1905e:	f10d 0002 	add.w	r0, sp, #2
   19062:	f001 ffbf 	bl	1afe4 <ull_conn_ack_peek>
			if (link) {
   19066:	4602      	mov	r2, r0
   19068:	b128      	cbz	r0, 19076 <rx_demux+0xee>
				rx_demux_conn_tx_ack(ack_last, handle,
   1906a:	9b03      	ldr	r3, [sp, #12]
   1906c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   19070:	f89d 0002 	ldrb.w	r0, [sp, #2]
   19074:	e7b0      	b.n	18fd8 <rx_demux+0x50>
}
   19076:	b004      	add	sp, #16
   19078:	bd70      	pop	{r4, r5, r6, pc}
   1907a:	bf00      	nop
   1907c:	20002b08 	.word	0x20002b08
   19080:	0002f278 	.word	0x0002f278
   19084:	0002fa1b 	.word	0x0002fa1b
   19088:	0002b804 	.word	0x0002b804
   1908c:	0002cf80 	.word	0x0002cf80

00019090 <ll_pdu_rx_alloc_peek>:
{
   19090:	b510      	push	{r4, lr}
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   19092:	4a0a      	ldr	r2, [pc, #40]	; (190bc <ll_pdu_rx_alloc_peek+0x2c>)
   19094:	7891      	ldrb	r1, [r2, #2]
   19096:	78d4      	ldrb	r4, [r2, #3]
   19098:	7853      	ldrb	r3, [r2, #1]
	if (last >= first) {
   1909a:	42a1      	cmp	r1, r4
		return count - first + last;
   1909c:	bf8a      	itet	hi
   1909e:	1a5b      	subhi	r3, r3, r1
		return last - first;
   190a0:	1a63      	subls	r3, r4, r1
		return count - first + last;
   190a2:	191b      	addhi	r3, r3, r4
   190a4:	b2db      	uxtb	r3, r3
   190a6:	4298      	cmp	r0, r3
   190a8:	d806      	bhi.n	190b8 <ll_pdu_rx_alloc_peek+0x28>
	if (first == last) {
   190aa:	42a1      	cmp	r1, r4
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   190ac:	7813      	ldrb	r3, [r2, #0]
   190ae:	d003      	beq.n	190b8 <ll_pdu_rx_alloc_peek+0x28>
	return *((void **)(fifo + first * size));
   190b0:	fb01 2203 	mla	r2, r1, r3, r2
   190b4:	6850      	ldr	r0, [r2, #4]
}
   190b6:	bd10      	pop	{r4, pc}
		return NULL;
   190b8:	2000      	movs	r0, #0
   190ba:	e7fc      	b.n	190b6 <ll_pdu_rx_alloc_peek+0x26>
   190bc:	20000b9c 	.word	0x20000b9c

000190c0 <ll_pdu_rx_alloc>:
{
   190c0:	b510      	push	{r4, lr}
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   190c2:	4a09      	ldr	r2, [pc, #36]	; (190e8 <ll_pdu_rx_alloc+0x28>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
   190c4:	7893      	ldrb	r3, [r2, #2]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
   190c6:	78d0      	ldrb	r0, [r2, #3]
   190c8:	7811      	ldrb	r1, [r2, #0]
   190ca:	7854      	ldrb	r4, [r2, #1]
   190cc:	4298      	cmp	r0, r3
   190ce:	d009      	beq.n	190e4 <ll_pdu_rx_alloc+0x24>
	}

	/* Obtain address of head buffer.
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));
   190d0:	fb03 2101 	mla	r1, r3, r1, r2

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
   190d4:	3301      	adds	r3, #1
   190d6:	b2db      	uxtb	r3, r3
	if (_first == count) {
		_first = 0U;
   190d8:	429c      	cmp	r4, r3
   190da:	bf08      	it	eq
   190dc:	2300      	moveq	r3, #0
	mem = *((void **)(fifo + _first * size));
   190de:	6848      	ldr	r0, [r1, #4]
	}

	*first = _first; /* Write back read-index */
   190e0:	7093      	strb	r3, [r2, #2]
}
   190e2:	bd10      	pop	{r4, pc}
		return NULL;
   190e4:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   190e6:	e7fc      	b.n	190e2 <ll_pdu_rx_alloc+0x22>
   190e8:	20000b9c 	.word	0x20000b9c

000190ec <ll_tx_ack_put>:
{
   190ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
   190ee:	4a12      	ldr	r2, [pc, #72]	; (19138 <ll_tx_ack_put+0x4c>)
   190f0:	78d4      	ldrb	r4, [r2, #3]
	if (last == count) {
   190f2:	7857      	ldrb	r7, [r2, #1]
   190f4:	7895      	ldrb	r5, [r2, #2]
   190f6:	7816      	ldrb	r6, [r2, #0]
	last = last + 1;
   190f8:	1c63      	adds	r3, r4, #1
   190fa:	b2db      	uxtb	r3, r3
		last = 0U;
   190fc:	429f      	cmp	r7, r3
   190fe:	bf08      	it	eq
   19100:	2300      	moveq	r3, #0
	if (last == first) {
   19102:	429d      	cmp	r5, r3
   19104:	d004      	beq.n	19110 <ll_tx_ack_put+0x24>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   19106:	1d15      	adds	r5, r2, #4
   19108:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(tx);
   1910c:	192e      	adds	r6, r5, r4
   1910e:	d10f      	bne.n	19130 <ll_tx_ack_put+0x44>
   19110:	4a0a      	ldr	r2, [pc, #40]	; (1913c <ll_tx_ack_put+0x50>)
   19112:	490b      	ldr	r1, [pc, #44]	; (19140 <ll_tx_ack_put+0x54>)
   19114:	480b      	ldr	r0, [pc, #44]	; (19144 <ll_tx_ack_put+0x58>)
   19116:	f240 53e4 	movw	r3, #1508	; 0x5e4
   1911a:	f008 f8a7 	bl	2126c <printk>
   1911e:	4040      	eors	r0, r0
   19120:	f380 8811 	msr	BASEPRI, r0
   19124:	f04f 0003 	mov.w	r0, #3
   19128:	df02      	svc	2
	tx->handle = handle;
   1912a:	2300      	movs	r3, #0
   1912c:	801b      	strh	r3, [r3, #0]
   1912e:	deff      	udf	#255	; 0xff
   19130:	5328      	strh	r0, [r5, r4]
	tx->node = node_tx;
   19132:	6071      	str	r1, [r6, #4]
	*last = idx; /* Commit: Update write index */
   19134:	70d3      	strb	r3, [r2, #3]
}
   19136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19138:	20000cd8 	.word	0x20000cd8
   1913c:	0002f278 	.word	0x0002f278
   19140:	0002f681 	.word	0x0002f681
   19144:	0002b804 	.word	0x0002b804

00019148 <ll_radio_state_abort>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   19148:	2200      	movs	r2, #0
{
   1914a:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   1914c:	4611      	mov	r1, r2
   1914e:	4b09      	ldr	r3, [pc, #36]	; (19174 <ll_radio_state_abort+0x2c>)
   19150:	2001      	movs	r0, #1
   19152:	f7fd fc53 	bl	169fc <mayfly_enqueue>
	LL_ASSERT(!ret);
   19156:	b160      	cbz	r0, 19172 <ll_radio_state_abort+0x2a>
   19158:	4a07      	ldr	r2, [pc, #28]	; (19178 <ll_radio_state_abort+0x30>)
   1915a:	4908      	ldr	r1, [pc, #32]	; (1917c <ll_radio_state_abort+0x34>)
   1915c:	4808      	ldr	r0, [pc, #32]	; (19180 <ll_radio_state_abort+0x38>)
   1915e:	f240 53fc 	movw	r3, #1532	; 0x5fc
   19162:	f008 f883 	bl	2126c <printk>
   19166:	4040      	eors	r0, r0
   19168:	f380 8811 	msr	BASEPRI, r0
   1916c:	f04f 0003 	mov.w	r0, #3
   19170:	df02      	svc	2
}
   19172:	bd08      	pop	{r3, pc}
   19174:	20000d54 	.word	0x20000d54
   19178:	0002f278 	.word	0x0002f278
   1917c:	0002f3a5 	.word	0x0002f3a5
   19180:	0002b804 	.word	0x0002b804

00019184 <ull_ticker_status_take>:
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   19184:	f030 0302 	bics.w	r3, r0, #2
{
   19188:	b510      	push	{r4, lr}
   1918a:	460c      	mov	r4, r1
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1918c:	d00f      	beq.n	191ae <ull_ticker_status_take+0x2a>
   1918e:	680b      	ldr	r3, [r1, #0]
   19190:	2b02      	cmp	r3, #2
   19192:	d10c      	bne.n	191ae <ull_ticker_status_take+0x2a>
   19194:	4a0a      	ldr	r2, [pc, #40]	; (191c0 <ull_ticker_status_take+0x3c>)
   19196:	490b      	ldr	r1, [pc, #44]	; (191c4 <ull_ticker_status_take+0x40>)
   19198:	480b      	ldr	r0, [pc, #44]	; (191c8 <ull_ticker_status_take+0x44>)
   1919a:	f44f 63c3 	mov.w	r3, #1560	; 0x618
   1919e:	f008 f865 	bl	2126c <printk>
   191a2:	4040      	eors	r0, r0
   191a4:	f380 8811 	msr	BASEPRI, r0
   191a8:	f04f 0003 	mov.w	r0, #3
   191ac:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   191ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   191b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   191b6:	4805      	ldr	r0, [pc, #20]	; (191cc <ull_ticker_status_take+0x48>)
   191b8:	f006 ff52 	bl	20060 <z_impl_k_sem_take>
	return *ret_cb;
   191bc:	6820      	ldr	r0, [r4, #0]
}
   191be:	bd10      	pop	{r4, pc}
   191c0:	0002f278 	.word	0x0002f278
   191c4:	0002f3aa 	.word	0x0002f3aa
   191c8:	0002b804 	.word	0x0002b804
   191cc:	20002b14 	.word	0x20002b14

000191d0 <ull_disable_mark>:
	if (!*m) {
   191d0:	4b02      	ldr	r3, [pc, #8]	; (191dc <ull_disable_mark+0xc>)
   191d2:	681a      	ldr	r2, [r3, #0]
   191d4:	b902      	cbnz	r2, 191d8 <ull_disable_mark+0x8>
		*m = param;
   191d6:	6018      	str	r0, [r3, #0]
}
   191d8:	6818      	ldr	r0, [r3, #0]
   191da:	4770      	bx	lr
   191dc:	20002644 	.word	0x20002644

000191e0 <ull_disable_unmark>:
	if (*m && *m == param) {
   191e0:	4a05      	ldr	r2, [pc, #20]	; (191f8 <ull_disable_unmark+0x18>)
{
   191e2:	4603      	mov	r3, r0
	if (*m && *m == param) {
   191e4:	6810      	ldr	r0, [r2, #0]
   191e6:	b130      	cbz	r0, 191f6 <ull_disable_unmark+0x16>
   191e8:	4283      	cmp	r3, r0
   191ea:	f04f 0300 	mov.w	r3, #0
   191ee:	d101      	bne.n	191f4 <ull_disable_unmark+0x14>
		*m = NULL;
   191f0:	6013      	str	r3, [r2, #0]
		return param;
   191f2:	4770      	bx	lr
	return NULL;
   191f4:	4618      	mov	r0, r3
}
   191f6:	4770      	bx	lr
   191f8:	20002644 	.word	0x20002644

000191fc <ull_disable_mark_get>:
}
   191fc:	4b01      	ldr	r3, [pc, #4]	; (19204 <ull_disable_mark_get+0x8>)
   191fe:	6818      	ldr	r0, [r3, #0]
   19200:	4770      	bx	lr
   19202:	bf00      	nop
   19204:	20002644 	.word	0x20002644

00019208 <ull_update_mark>:
	if (!*m) {
   19208:	4b02      	ldr	r3, [pc, #8]	; (19214 <ull_update_mark+0xc>)
   1920a:	681a      	ldr	r2, [r3, #0]
   1920c:	b902      	cbnz	r2, 19210 <ull_update_mark+0x8>
		*m = param;
   1920e:	6018      	str	r0, [r3, #0]
}
   19210:	6818      	ldr	r0, [r3, #0]
   19212:	4770      	bx	lr
   19214:	20002648 	.word	0x20002648

00019218 <ull_update_unmark>:
	if (*m && *m == param) {
   19218:	4a05      	ldr	r2, [pc, #20]	; (19230 <ull_update_unmark+0x18>)
{
   1921a:	4603      	mov	r3, r0
	if (*m && *m == param) {
   1921c:	6810      	ldr	r0, [r2, #0]
   1921e:	b130      	cbz	r0, 1922e <ull_update_unmark+0x16>
   19220:	4283      	cmp	r3, r0
   19222:	f04f 0300 	mov.w	r3, #0
   19226:	d101      	bne.n	1922c <ull_update_unmark+0x14>
		*m = NULL;
   19228:	6013      	str	r3, [r2, #0]
		return param;
   1922a:	4770      	bx	lr
	return NULL;
   1922c:	4618      	mov	r0, r3
}
   1922e:	4770      	bx	lr
   19230:	20002648 	.word	0x20002648

00019234 <ull_update_mark_get>:
}
   19234:	4b01      	ldr	r3, [pc, #4]	; (1923c <ull_update_mark_get+0x8>)
   19236:	6818      	ldr	r0, [r3, #0]
   19238:	4770      	bx	lr
   1923a:	bf00      	nop
   1923c:	20002648 	.word	0x20002648

00019240 <ull_disable>:
{
   19240:	b530      	push	{r4, r5, lr}
	hdr = HDR_LLL2ULL(lll);
   19242:	6804      	ldr	r4, [r0, #0]
{
   19244:	b087      	sub	sp, #28
   19246:	4605      	mov	r5, r0
	if (!hdr || !ull_ref_get(hdr)) {
   19248:	b914      	cbnz	r4, 19250 <ull_disable+0x10>
		return 0;
   1924a:	2000      	movs	r0, #0
}
   1924c:	b007      	add	sp, #28
   1924e:	bd30      	pop	{r4, r5, pc}
   19250:	7823      	ldrb	r3, [r4, #0]
	if (!hdr || !ull_ref_get(hdr)) {
   19252:	2b00      	cmp	r3, #0
   19254:	d0f9      	beq.n	1924a <ull_disable+0xa>
	return z_impl_k_sem_init(sem, initial_count, limit);
   19256:	2201      	movs	r2, #1
   19258:	2100      	movs	r1, #0
   1925a:	4668      	mov	r0, sp
   1925c:	f00f fcfb 	bl	28c56 <z_impl_k_sem_init>
	hdr->disabled_cb = disabled_cb;
   19260:	4b11      	ldr	r3, [pc, #68]	; (192a8 <ull_disable+0x68>)
   19262:	6163      	str	r3, [r4, #20]
   19264:	7823      	ldrb	r3, [r4, #0]
	hdr->disabled_param = &sem;
   19266:	f8c4 d018 	str.w	sp, [r4, #24]
	if (!ull_ref_get(hdr)) {
   1926a:	2b00      	cmp	r3, #0
   1926c:	d0ed      	beq.n	1924a <ull_disable+0xa>
	mfy.param = lll;
   1926e:	4b0f      	ldr	r3, [pc, #60]	; (192ac <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   19270:	2200      	movs	r2, #0
   19272:	4611      	mov	r1, r2
   19274:	2003      	movs	r0, #3
	mfy.param = lll;
   19276:	609d      	str	r5, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   19278:	f7fd fbc0 	bl	169fc <mayfly_enqueue>
	LL_ASSERT(!ret);
   1927c:	b160      	cbz	r0, 19298 <ull_disable+0x58>
   1927e:	4a0c      	ldr	r2, [pc, #48]	; (192b0 <ull_disable+0x70>)
   19280:	490c      	ldr	r1, [pc, #48]	; (192b4 <ull_disable+0x74>)
   19282:	480d      	ldr	r0, [pc, #52]	; (192b8 <ull_disable+0x78>)
   19284:	f240 6393 	movw	r3, #1683	; 0x693
   19288:	f007 fff0 	bl	2126c <printk>
   1928c:	4040      	eors	r0, r0
   1928e:	f380 8811 	msr	BASEPRI, r0
   19292:	f04f 0003 	mov.w	r0, #3
   19296:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   19298:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1929c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   192a0:	4668      	mov	r0, sp
   192a2:	f006 fedd 	bl	20060 <z_impl_k_sem_take>
	return k_sem_take(&sem, K_FOREVER);
   192a6:	e7d1      	b.n	1924c <ull_disable+0xc>
   192a8:	0002743f 	.word	0x0002743f
   192ac:	20000d44 	.word	0x20000d44
   192b0:	0002f278 	.word	0x0002f278
   192b4:	0002f3a5 	.word	0x0002f3a5
   192b8:	0002b804 	.word	0x0002b804

000192bc <ull_ticker_stop_with_mark>:
{
   192bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   192be:	4606      	mov	r6, r0
   192c0:	b085      	sub	sp, #20
	mark = ull_disable_mark(param);
   192c2:	4608      	mov	r0, r1
{
   192c4:	4615      	mov	r5, r2
	mark = ull_disable_mark(param);
   192c6:	f7ff ff83 	bl	191d0 <ull_disable_mark>
	if (mark != param) {
   192ca:	4281      	cmp	r1, r0
{
   192cc:	460c      	mov	r4, r1
	if (mark != param) {
   192ce:	d121      	bne.n	19314 <ull_ticker_stop_with_mark+0x58>
	ret_cb = TICKER_STATUS_BUSY;
   192d0:	2302      	movs	r3, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   192d2:	af03      	add	r7, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
   192d4:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   192d6:	2103      	movs	r1, #3
   192d8:	4b11      	ldr	r3, [pc, #68]	; (19320 <ull_ticker_stop_with_mark+0x64>)
   192da:	9700      	str	r7, [sp, #0]
   192dc:	4632      	mov	r2, r6
   192de:	2000      	movs	r0, #0
   192e0:	f7fe f952 	bl	17588 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   192e4:	4639      	mov	r1, r7
   192e6:	f7ff ff4d 	bl	19184 <ull_ticker_status_take>
	if (ret) {
   192ea:	b148      	cbz	r0, 19300 <ull_ticker_stop_with_mark+0x44>
		mark = ull_disable_unmark(param);
   192ec:	4620      	mov	r0, r4
   192ee:	f7ff ff77 	bl	191e0 <ull_disable_unmark>
		if (mark != param) {
   192f2:	4284      	cmp	r4, r0
   192f4:	d10e      	bne.n	19314 <ull_ticker_stop_with_mark+0x58>
		return -EALREADY;
   192f6:	f06f 0177 	mvn.w	r1, #119	; 0x77
}
   192fa:	4608      	mov	r0, r1
   192fc:	b005      	add	sp, #20
   192fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = ull_disable(lll_disable);
   19300:	4628      	mov	r0, r5
   19302:	f7ff ff9d 	bl	19240 <ull_disable>
	if (ret) {
   19306:	4601      	mov	r1, r0
   19308:	b938      	cbnz	r0, 1931a <ull_ticker_stop_with_mark+0x5e>
	mark = ull_disable_unmark(param);
   1930a:	4620      	mov	r0, r4
   1930c:	f7ff ff68 	bl	191e0 <ull_disable_unmark>
	if (mark != param) {
   19310:	4284      	cmp	r4, r0
   19312:	d0f2      	beq.n	192fa <ull_ticker_stop_with_mark+0x3e>
		return -ENOLCK;
   19314:	f06f 012d 	mvn.w	r1, #45	; 0x2d
   19318:	e7ef      	b.n	192fa <ull_ticker_stop_with_mark+0x3e>
		return -EBUSY;
   1931a:	f06f 010f 	mvn.w	r1, #15
   1931e:	e7ec      	b.n	192fa <ull_ticker_stop_with_mark+0x3e>
   19320:	000189cd 	.word	0x000189cd

00019324 <ull_pdu_rx_alloc_peek>:
{
   19324:	b510      	push	{r4, lr}
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   19326:	4a0a      	ldr	r2, [pc, #40]	; (19350 <ull_pdu_rx_alloc_peek+0x2c>)
   19328:	7891      	ldrb	r1, [r2, #2]
   1932a:	78d4      	ldrb	r4, [r2, #3]
   1932c:	7853      	ldrb	r3, [r2, #1]
	if (last >= first) {
   1932e:	42a1      	cmp	r1, r4
		return count - first + last;
   19330:	bf8a      	itet	hi
   19332:	1a5b      	subhi	r3, r3, r1
		return last - first;
   19334:	1a63      	subls	r3, r4, r1
		return count - first + last;
   19336:	191b      	addhi	r3, r3, r4
   19338:	b2db      	uxtb	r3, r3
   1933a:	4298      	cmp	r0, r3
   1933c:	d806      	bhi.n	1934c <ull_pdu_rx_alloc_peek+0x28>
	if (first == last) {
   1933e:	42a1      	cmp	r1, r4
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   19340:	7813      	ldrb	r3, [r2, #0]
   19342:	d003      	beq.n	1934c <ull_pdu_rx_alloc_peek+0x28>
	return *((void **)(fifo + first * size));
   19344:	fb01 2203 	mla	r2, r1, r3, r2
   19348:	6850      	ldr	r0, [r2, #4]
}
   1934a:	bd10      	pop	{r4, pc}
		return NULL;
   1934c:	2000      	movs	r0, #0
   1934e:	e7fc      	b.n	1934a <ull_pdu_rx_alloc_peek+0x26>
   19350:	20000ba8 	.word	0x20000ba8

00019354 <ull_pdu_rx_alloc>:
{
   19354:	b510      	push	{r4, lr}
	return MFIFO_DEQUEUE(pdu_rx_free);
   19356:	4a09      	ldr	r2, [pc, #36]	; (1937c <ull_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   19358:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   1935a:	78d0      	ldrb	r0, [r2, #3]
   1935c:	7811      	ldrb	r1, [r2, #0]
   1935e:	7854      	ldrb	r4, [r2, #1]
   19360:	4298      	cmp	r0, r3
   19362:	d009      	beq.n	19378 <ull_pdu_rx_alloc+0x24>
	mem = *((void **)(fifo + _first * size));
   19364:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   19368:	3301      	adds	r3, #1
   1936a:	b2db      	uxtb	r3, r3
		_first = 0U;
   1936c:	429c      	cmp	r4, r3
   1936e:	bf08      	it	eq
   19370:	2300      	moveq	r3, #0
	mem = *((void **)(fifo + _first * size));
   19372:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   19374:	7093      	strb	r3, [r2, #2]
}
   19376:	bd10      	pop	{r4, pc}
		return NULL;
   19378:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(pdu_rx_free);
   1937a:	e7fc      	b.n	19376 <ull_pdu_rx_alloc+0x22>
   1937c:	20000ba8 	.word	0x20000ba8

00019380 <ull_rx_put>:
{
   19380:	b538      	push	{r3, r4, r5, lr}
   19382:	460c      	mov	r4, r1
   19384:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   19386:	f001 fe27 	bl	1afd8 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   1938a:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   1938c:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   1938e:	4a03      	ldr	r2, [pc, #12]	; (1939c <ull_rx_put+0x1c>)
   19390:	4628      	mov	r0, r5
}
   19392:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   19396:	f00d bd27 	b.w	26de8 <memq_enqueue>
   1939a:	bf00      	nop
   1939c:	20002b0c 	.word	0x20002b0c

000193a0 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   193a0:	2201      	movs	r2, #1
   193a2:	4b02      	ldr	r3, [pc, #8]	; (193ac <ull_rx_sched+0xc>)
   193a4:	4611      	mov	r1, r2
   193a6:	2000      	movs	r0, #0
   193a8:	f7fd bb28 	b.w	169fc <mayfly_enqueue>
   193ac:	20000d34 	.word	0x20000d34

000193b0 <ull_rx_put_done>:
	memq_enqueue(link, done, &memq_ull_done.tail);
   193b0:	4a01      	ldr	r2, [pc, #4]	; (193b8 <ull_rx_put_done+0x8>)
   193b2:	f00d bd19 	b.w	26de8 <memq_enqueue>
   193b6:	bf00      	nop
   193b8:	20002b04 	.word	0x20002b04

000193bc <ull_rx_sched_done>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   193bc:	2201      	movs	r2, #1
   193be:	4b02      	ldr	r3, [pc, #8]	; (193c8 <ull_rx_sched_done+0xc>)
   193c0:	4611      	mov	r1, r2
   193c2:	2000      	movs	r0, #0
   193c4:	f7fd bb1a 	b.w	169fc <mayfly_enqueue>
   193c8:	20000d24 	.word	0x20000d24

000193cc <ull_prepare_enqueue>:
{
   193cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   193d0:	4e14      	ldr	r6, [pc, #80]	; (19424 <ull_prepare_enqueue+0x58>)
{
   193d2:	4699      	mov	r9, r3
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   193d4:	78f3      	ldrb	r3, [r6, #3]
	if (last == count) {
   193d6:	7874      	ldrb	r4, [r6, #1]
	last = last + 1;
   193d8:	1c5d      	adds	r5, r3, #1
{
   193da:	4680      	mov	r8, r0
   193dc:	b2ed      	uxtb	r5, r5
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   193de:	78b0      	ldrb	r0, [r6, #2]
		last = 0U;
   193e0:	42ac      	cmp	r4, r5
   193e2:	bf08      	it	eq
   193e4:	2500      	moveq	r5, #0
	if (last == first) {
   193e6:	42a8      	cmp	r0, r5
{
   193e8:	460f      	mov	r7, r1
   193ea:	4611      	mov	r1, r2
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   193ec:	7832      	ldrb	r2, [r6, #0]
   193ee:	d017      	beq.n	19420 <ull_prepare_enqueue+0x54>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   193f0:	1d34      	adds	r4, r6, #4
   193f2:	fb03 4402 	mla	r4, r3, r2, r4
	if (!e) {
   193f6:	b184      	cbz	r4, 1941a <ull_prepare_enqueue+0x4e>
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
   193f8:	2210      	movs	r2, #16
   193fa:	4620      	mov	r0, r4
   193fc:	f00a fcd4 	bl	23da8 <memcpy>
	e->is_resume = is_resume;
   19400:	7f23      	ldrb	r3, [r4, #28]
   19402:	f89d 2020 	ldrb.w	r2, [sp, #32]
	e->abort_cb = abort_cb;
   19406:	61a7      	str	r7, [r4, #24]
	e->is_resume = is_resume;
   19408:	f002 0201 	and.w	r2, r2, #1
   1940c:	f023 0303 	bic.w	r3, r3, #3
   19410:	4313      	orrs	r3, r2
	e->is_abort_cb = is_abort_cb;
   19412:	e9c4 9804 	strd	r9, r8, [r4, #16]
	e->is_resume = is_resume;
   19416:	7723      	strb	r3, [r4, #28]
	*last = idx; /* Commit: Update write index */
   19418:	70f5      	strb	r5, [r6, #3]
}
   1941a:	4620      	mov	r0, r4
   1941c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return NULL;
   19420:	2400      	movs	r4, #0
   19422:	e7fa      	b.n	1941a <ull_prepare_enqueue+0x4e>
   19424:	20000bd4 	.word	0x20000bd4

00019428 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
   19428:	4b05      	ldr	r3, [pc, #20]	; (19440 <ull_prepare_dequeue_get+0x18>)
   1942a:	7898      	ldrb	r0, [r3, #2]
	if (first == last) {
   1942c:	78d9      	ldrb	r1, [r3, #3]
   1942e:	781a      	ldrb	r2, [r3, #0]
   19430:	4281      	cmp	r1, r0
	return (void *)(fifo + first * size);
   19432:	bf1a      	itte	ne
   19434:	3304      	addne	r3, #4
   19436:	fb00 3002 	mlane	r0, r0, r2, r3
		return NULL;
   1943a:	2000      	moveq	r0, #0
}
   1943c:	4770      	bx	lr
   1943e:	bf00      	nop
   19440:	20000bd4 	.word	0x20000bd4

00019444 <ull_prepare_dequeue_iter>:
{
   19444:	b530      	push	{r4, r5, lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   19446:	4a0c      	ldr	r2, [pc, #48]	; (19478 <ull_prepare_dequeue_iter+0x34>)
{
   19448:	4603      	mov	r3, r0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   1944a:	7854      	ldrb	r4, [r2, #1]
	if (*idx >= count) {
   1944c:	7819      	ldrb	r1, [r3, #0]
   1944e:	78d0      	ldrb	r0, [r2, #3]
   19450:	7815      	ldrb	r5, [r2, #0]
   19452:	42a1      	cmp	r1, r4
   19454:	bf24      	itt	cs
   19456:	7892      	ldrbcs	r2, [r2, #2]
		*idx = first;
   19458:	701a      	strbcs	r2, [r3, #0]
	if (*idx == last) {
   1945a:	7819      	ldrb	r1, [r3, #0]
   1945c:	4288      	cmp	r0, r1
   1945e:	d009      	beq.n	19474 <ull_prepare_dequeue_iter+0x30>
	i = *idx + 1;
   19460:	1c4a      	adds	r2, r1, #1
	p = (void *)(fifo + (*idx) * size);
   19462:	4806      	ldr	r0, [pc, #24]	; (1947c <ull_prepare_dequeue_iter+0x38>)
	i = *idx + 1;
   19464:	b2d2      	uxtb	r2, r2
		i = 0U;
   19466:	4294      	cmp	r4, r2
   19468:	bf08      	it	eq
   1946a:	2200      	moveq	r2, #0
	p = (void *)(fifo + (*idx) * size);
   1946c:	fb01 0005 	mla	r0, r1, r5, r0
	*idx = i;
   19470:	701a      	strb	r2, [r3, #0]
}
   19472:	bd30      	pop	{r4, r5, pc}
		return NULL;
   19474:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   19476:	e7fc      	b.n	19472 <ull_prepare_dequeue_iter+0x2e>
   19478:	20000bd4 	.word	0x20000bd4
   1947c:	20000bd8 	.word	0x20000bd8

00019480 <ull_prepare_dequeue>:
{
   19480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19484:	4605      	mov	r5, r0
	next = ull_prepare_dequeue_get();
   19486:	f7ff ffcf 	bl	19428 <ull_prepare_dequeue_get>
			mfy.param = next;
   1948a:	4f1c      	ldr	r7, [pc, #112]	; (194fc <ull_prepare_dequeue+0x7c>)
		MFIFO_DEQUEUE(prep);
   1948c:	4c1c      	ldr	r4, [pc, #112]	; (19500 <ull_prepare_dequeue+0x80>)
	while (next) {
   1948e:	2800      	cmp	r0, #0
   19490:	d031      	beq.n	194f6 <ull_prepare_dequeue+0x76>
		uint8_t is_aborted = next->is_aborted;
   19492:	7f03      	ldrb	r3, [r0, #28]
		if (!is_aborted) {
   19494:	079a      	lsls	r2, r3, #30
		uint8_t is_aborted = next->is_aborted;
   19496:	f3c3 0640 	ubfx	r6, r3, #1, #1
		uint8_t is_resume = next->is_resume;
   1949a:	f003 0801 	and.w	r8, r3, #1
		if (!is_aborted) {
   1949e:	d414      	bmi.n	194ca <ull_prepare_dequeue+0x4a>
			mfy.param = next;
   194a0:	60b8      	str	r0, [r7, #8]
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
   194a2:	4b16      	ldr	r3, [pc, #88]	; (194fc <ull_prepare_dequeue+0x7c>)
   194a4:	4632      	mov	r2, r6
   194a6:	4631      	mov	r1, r6
   194a8:	4628      	mov	r0, r5
   194aa:	f7fd faa7 	bl	169fc <mayfly_enqueue>
			LL_ASSERT(!ret);
   194ae:	b160      	cbz	r0, 194ca <ull_prepare_dequeue+0x4a>
   194b0:	4a14      	ldr	r2, [pc, #80]	; (19504 <ull_prepare_dequeue+0x84>)
   194b2:	4915      	ldr	r1, [pc, #84]	; (19508 <ull_prepare_dequeue+0x88>)
   194b4:	4815      	ldr	r0, [pc, #84]	; (1950c <ull_prepare_dequeue+0x8c>)
   194b6:	f240 730a 	movw	r3, #1802	; 0x70a
   194ba:	f007 fed7 	bl	2126c <printk>
   194be:	4040      	eors	r0, r0
   194c0:	f380 8811 	msr	BASEPRI, r0
   194c4:	f04f 0003 	mov.w	r0, #3
   194c8:	df02      	svc	2
	uint8_t _first = *first; /* Copy read-index */
   194ca:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   194cc:	78e1      	ldrb	r1, [r4, #3]
		MFIFO_DEQUEUE(prep);
   194ce:	7862      	ldrb	r2, [r4, #1]
   194d0:	4299      	cmp	r1, r3
   194d2:	d005      	beq.n	194e0 <ull_prepare_dequeue+0x60>
	_first += 1U;
   194d4:	3301      	adds	r3, #1
   194d6:	b2db      	uxtb	r3, r3
		_first = 0U;
   194d8:	429a      	cmp	r2, r3
   194da:	bf08      	it	eq
   194dc:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   194de:	70a3      	strb	r3, [r4, #2]
		next = ull_prepare_dequeue_get();
   194e0:	f7ff ffa2 	bl	19428 <ull_prepare_dequeue_get>
		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   194e4:	b138      	cbz	r0, 194f6 <ull_prepare_dequeue+0x76>
   194e6:	2e00      	cmp	r6, #0
   194e8:	d1d1      	bne.n	1948e <ull_prepare_dequeue+0xe>
   194ea:	f1b8 0f00 	cmp.w	r8, #0
   194ee:	d002      	beq.n	194f6 <ull_prepare_dequeue+0x76>
   194f0:	7f03      	ldrb	r3, [r0, #28]
   194f2:	07db      	lsls	r3, r3, #31
   194f4:	d5cb      	bpl.n	1948e <ull_prepare_dequeue+0xe>
}
   194f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   194fa:	bf00      	nop
   194fc:	20000d04 	.word	0x20000d04
   19500:	20000bd4 	.word	0x20000bd4
   19504:	0002f278 	.word	0x0002f278
   19508:	0002f3a5 	.word	0x0002f3a5
   1950c:	0002b804 	.word	0x0002b804

00019510 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
   19510:	4b06      	ldr	r3, [pc, #24]	; (1952c <ull_event_done_extra_get+0x1c>)
   19512:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
   19514:	78d8      	ldrb	r0, [r3, #3]
   19516:	7819      	ldrb	r1, [r3, #0]
   19518:	4290      	cmp	r0, r2
   1951a:	d005      	beq.n	19528 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
   1951c:	fb02 3301 	mla	r3, r2, r1, r3
   19520:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
   19522:	b110      	cbz	r0, 1952a <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
   19524:	3020      	adds	r0, #32
   19526:	4770      	bx	lr
		return NULL;
   19528:	2000      	movs	r0, #0
}
   1952a:	4770      	bx	lr
   1952c:	20000b84 	.word	0x20000b84

00019530 <ull_event_done>:
{
   19530:	b538      	push	{r3, r4, r5, lr}
	evdone = MFIFO_DEQUEUE(done);
   19532:	4a10      	ldr	r2, [pc, #64]	; (19574 <ull_event_done+0x44>)
	uint8_t _first = *first; /* Copy read-index */
   19534:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   19536:	78d4      	ldrb	r4, [r2, #3]
   19538:	7855      	ldrb	r5, [r2, #1]
   1953a:	429c      	cmp	r4, r3
{
   1953c:	4601      	mov	r1, r0
	evdone = MFIFO_DEQUEUE(done);
   1953e:	7810      	ldrb	r0, [r2, #0]
   19540:	d016      	beq.n	19570 <ull_event_done+0x40>
	mem = *((void **)(fifo + _first * size));
   19542:	fb03 2000 	mla	r0, r3, r0, r2
	_first += 1U;
   19546:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   19548:	6844      	ldr	r4, [r0, #4]
	_first += 1U;
   1954a:	b2db      	uxtb	r3, r3
		_first = 0U;
   1954c:	429d      	cmp	r5, r3
   1954e:	bf08      	it	eq
   19550:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   19552:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
   19554:	b154      	cbz	r4, 1956c <ull_event_done+0x3c>
	evdone->hdr.link = NULL;
   19556:	2300      	movs	r3, #0
	link = evdone->hdr.link;
   19558:	6820      	ldr	r0, [r4, #0]
	evdone->hdr.link = NULL;
   1955a:	6023      	str	r3, [r4, #0]
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   1955c:	2302      	movs	r3, #2
   1955e:	7123      	strb	r3, [r4, #4]
	evdone->param = param;
   19560:	61e1      	str	r1, [r4, #28]
	ull_rx_put_done(link, evdone);
   19562:	4621      	mov	r1, r4
   19564:	f7ff ff24 	bl	193b0 <ull_rx_put_done>
	ull_rx_sched_done();
   19568:	f7ff ff28 	bl	193bc <ull_rx_sched_done>
}
   1956c:	4620      	mov	r0, r4
   1956e:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   19570:	2400      	movs	r4, #0
   19572:	e7fb      	b.n	1956c <ull_event_done+0x3c>
   19574:	20000b84 	.word	0x20000b84

00019578 <lll_resume>:
	return lll_prepare_resolve(is_abort_cb, abort_cb, prepare_cb,
				   prepare_param, 0, 0);
}

void lll_resume(void *param)
{
   19578:	b507      	push	{r0, r1, r2, lr}
	struct lll_event *next;
	int ret;

	next = param;
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   1957a:	2201      	movs	r2, #1
   1957c:	9201      	str	r2, [sp, #4]
				  next->prepare_cb, &next->prepare_param,
				  next->is_resume, 1);
   1957e:	7f02      	ldrb	r2, [r0, #28]
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   19580:	f002 0201 	and.w	r2, r2, #1
   19584:	9200      	str	r2, [sp, #0]
   19586:	6902      	ldr	r2, [r0, #16]
{
   19588:	4603      	mov	r3, r0
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   1958a:	e9d0 0105 	ldrd	r0, r1, [r0, #20]
   1958e:	f002 fb09 	bl	1bba4 <lll_prepare_resolve>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   19592:	b168      	cbz	r0, 195b0 <lll_resume+0x38>
   19594:	3077      	adds	r0, #119	; 0x77
   19596:	d00b      	beq.n	195b0 <lll_resume+0x38>
   19598:	4a07      	ldr	r2, [pc, #28]	; (195b8 <lll_resume+0x40>)
   1959a:	4908      	ldr	r1, [pc, #32]	; (195bc <lll_resume+0x44>)
   1959c:	4808      	ldr	r0, [pc, #32]	; (195c0 <lll_resume+0x48>)
   1959e:	234f      	movs	r3, #79	; 0x4f
   195a0:	f007 fe64 	bl	2126c <printk>
   195a4:	4040      	eors	r0, r0
   195a6:	f380 8811 	msr	BASEPRI, r0
   195aa:	f04f 0003 	mov.w	r0, #3
   195ae:	df02      	svc	2
}
   195b0:	b003      	add	sp, #12
   195b2:	f85d fb04 	ldr.w	pc, [sp], #4
   195b6:	bf00      	nop
   195b8:	0002f3d3 	.word	0x0002f3d3
   195bc:	0002f415 	.word	0x0002f415
   195c0:	0002b804 	.word	0x0002b804

000195c4 <ticker_stop_cb>:
{
   195c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   195c6:	9d07      	ldr	r5, [sp, #28]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   195c8:	4c16      	ldr	r4, [pc, #88]	; (19624 <ticker_stop_cb+0x60>)
   195ca:	226c      	movs	r2, #108	; 0x6c
   195cc:	1b2c      	subs	r4, r5, r4
   195ce:	fbb4 f4f2 	udiv	r4, r4, r2
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   195d2:	b2e3      	uxtb	r3, r4
   195d4:	b163      	cbz	r3, 195f0 <ticker_stop_cb+0x2c>
   195d6:	4a14      	ldr	r2, [pc, #80]	; (19628 <ticker_stop_cb+0x64>)
   195d8:	4914      	ldr	r1, [pc, #80]	; (1962c <ticker_stop_cb+0x68>)
   195da:	4815      	ldr	r0, [pc, #84]	; (19630 <ticker_stop_cb+0x6c>)
   195dc:	f640 038f 	movw	r3, #2191	; 0x88f
   195e0:	f007 fe44 	bl	2126c <printk>
   195e4:	4040      	eors	r0, r0
   195e6:	f380 8811 	msr	BASEPRI, r0
   195ea:	f04f 0003 	mov.w	r0, #3
   195ee:	df02      	svc	2
			  TICKER_ID_ADV_BASE + handle,
   195f0:	1ca2      	adds	r2, r4, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   195f2:	4b10      	ldr	r3, [pc, #64]	; (19634 <ticker_stop_cb+0x70>)
   195f4:	9500      	str	r5, [sp, #0]
   195f6:	b2d2      	uxtb	r2, r2
   195f8:	2101      	movs	r1, #1
   195fa:	2000      	movs	r0, #0
   195fc:	f7fd ffc4 	bl	17588 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   19600:	f030 0302 	bics.w	r3, r0, #2
   19604:	d00c      	beq.n	19620 <ticker_stop_cb+0x5c>
   19606:	4a08      	ldr	r2, [pc, #32]	; (19628 <ticker_stop_cb+0x64>)
   19608:	490b      	ldr	r1, [pc, #44]	; (19638 <ticker_stop_cb+0x74>)
   1960a:	4809      	ldr	r0, [pc, #36]	; (19630 <ticker_stop_cb+0x6c>)
   1960c:	f640 0394 	movw	r3, #2196	; 0x894
   19610:	f007 fe2c 	bl	2126c <printk>
   19614:	4040      	eors	r0, r0
   19616:	f380 8811 	msr	BASEPRI, r0
   1961a:	f04f 0003 	mov.w	r0, #3
   1961e:	df02      	svc	2
}
   19620:	b003      	add	sp, #12
   19622:	bd30      	pop	{r4, r5, pc}
   19624:	20002f88 	.word	0x20002f88
   19628:	0002f43c 	.word	0x0002f43c
   1962c:	0002f47b 	.word	0x0002f47b
   19630:	0002b804 	.word	0x0002b804
   19634:	00019741 	.word	0x00019741
   19638:	0002f486 	.word	0x0002f486

0001963c <disabled_cb>:
{
   1963c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	adv = ((struct lll_hdr *)param)->parent;
   1963e:	6805      	ldr	r5, [r0, #0]
	LL_ASSERT(adv->link_cc_free);
   19640:	6e2b      	ldr	r3, [r5, #96]	; 0x60
{
   19642:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
   19644:	b963      	cbnz	r3, 19660 <disabled_cb+0x24>
   19646:	4a1b      	ldr	r2, [pc, #108]	; (196b4 <disabled_cb+0x78>)
   19648:	491b      	ldr	r1, [pc, #108]	; (196b8 <disabled_cb+0x7c>)
   1964a:	481c      	ldr	r0, [pc, #112]	; (196bc <disabled_cb+0x80>)
   1964c:	f640 03dc 	movw	r3, #2268	; 0x8dc
   19650:	f007 fe0c 	bl	2126c <printk>
   19654:	4040      	eors	r0, r0
   19656:	f380 8811 	msr	BASEPRI, r0
   1965a:	f04f 0003 	mov.w	r0, #3
   1965e:	df02      	svc	2
	adv->link_cc_free = NULL;
   19660:	2300      	movs	r3, #0
	link = adv->link_cc_free;
   19662:	6e2f      	ldr	r7, [r5, #96]	; 0x60
	adv->link_cc_free = NULL;
   19664:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
   19666:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   19668:	b963      	cbnz	r3, 19684 <disabled_cb+0x48>
   1966a:	4a12      	ldr	r2, [pc, #72]	; (196b4 <disabled_cb+0x78>)
   1966c:	4914      	ldr	r1, [pc, #80]	; (196c0 <disabled_cb+0x84>)
   1966e:	4813      	ldr	r0, [pc, #76]	; (196bc <disabled_cb+0x80>)
   19670:	f44f 630e 	mov.w	r3, #2272	; 0x8e0
   19674:	f007 fdfa 	bl	2126c <printk>
   19678:	4040      	eors	r0, r0
   1967a:	f380 8811 	msr	BASEPRI, r0
   1967e:	f04f 0003 	mov.w	r0, #3
   19682:	df02      	svc	2
	rx = adv->node_rx_cc_free;
   19684:	6e6c      	ldr	r4, [r5, #100]	; 0x64
	adv->node_rx_cc_free = NULL;
   19686:	2100      	movs	r1, #0
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   19688:	2316      	movs	r3, #22
	adv->node_rx_cc_free = NULL;
   1968a:	6669      	str	r1, [r5, #100]	; 0x64
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1968c:	7123      	strb	r3, [r4, #4]
	rx->hdr.handle = 0xffff;
   1968e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19692:	80e3      	strh	r3, [r4, #6]
	memset(cc, 0x00, sizeof(struct node_rx_cc));
   19694:	2212      	movs	r2, #18
   19696:	f104 001c 	add.w	r0, r4, #28
   1969a:	f00a fb90 	bl	23dbe <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   1969e:	233c      	movs	r3, #60	; 0x3c
   196a0:	7723      	strb	r3, [r4, #28]
	rx->hdr.rx_ftr.param = param;
   196a2:	60a6      	str	r6, [r4, #8]
	ll_rx_put(link, rx);
   196a4:	4621      	mov	r1, r4
   196a6:	4638      	mov	r0, r7
   196a8:	f7ff fc5e 	bl	18f68 <ll_rx_put>
}
   196ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
   196b0:	f7ff bc64 	b.w	18f7c <ll_rx_sched>
   196b4:	0002f43c 	.word	0x0002f43c
   196b8:	0002f49f 	.word	0x0002f49f
   196bc:	0002b804 	.word	0x0002b804
   196c0:	0002f4b1 	.word	0x0002f4b1

000196c4 <conn_release>:
{
   196c4:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
   196c6:	6a05      	ldr	r5, [r0, #32]
	LL_ASSERT(!lll->link_tx_free);
   196c8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
{
   196ca:	4604      	mov	r4, r0
	LL_ASSERT(!lll->link_tx_free);
   196cc:	b163      	cbz	r3, 196e8 <conn_release+0x24>
   196ce:	4a18      	ldr	r2, [pc, #96]	; (19730 <conn_release+0x6c>)
   196d0:	4918      	ldr	r1, [pc, #96]	; (19734 <conn_release+0x70>)
   196d2:	4819      	ldr	r0, [pc, #100]	; (19738 <conn_release+0x74>)
   196d4:	f640 130a 	movw	r3, #2314	; 0x90a
   196d8:	f007 fdc8 	bl	2126c <printk>
   196dc:	4040      	eors	r0, r0
   196de:	f380 8811 	msr	BASEPRI, r0
   196e2:	f04f 0003 	mov.w	r0, #3
   196e6:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   196e8:	f105 0140 	add.w	r1, r5, #64	; 0x40
   196ec:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   196f0:	f00d fb6f 	bl	26dd2 <memq_deinit>
	LL_ASSERT(link);
   196f4:	4606      	mov	r6, r0
   196f6:	b960      	cbnz	r0, 19712 <conn_release+0x4e>
   196f8:	4a0d      	ldr	r2, [pc, #52]	; (19730 <conn_release+0x6c>)
   196fa:	4910      	ldr	r1, [pc, #64]	; (1973c <conn_release+0x78>)
   196fc:	480e      	ldr	r0, [pc, #56]	; (19738 <conn_release+0x74>)
   196fe:	f640 130c 	movw	r3, #2316	; 0x90c
   19702:	f007 fdb3 	bl	2126c <printk>
   19706:	4040      	eors	r0, r0
   19708:	f380 8811 	msr	BASEPRI, r0
   1970c:	f04f 0003 	mov.w	r0, #3
   19710:	df02      	svc	2
	ll_conn_release(lll->hdr.parent);
   19712:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
   19714:	64ee      	str	r6, [r5, #76]	; 0x4c
	adv->lll.conn = NULL;
   19716:	2500      	movs	r5, #0
	ll_conn_release(lll->hdr.parent);
   19718:	f000 fce8 	bl	1a0ec <ll_conn_release>
	ll_rx_release(adv->node_rx_cc_free);
   1971c:	6e60      	ldr	r0, [r4, #100]	; 0x64
	adv->lll.conn = NULL;
   1971e:	6225      	str	r5, [r4, #32]
	ll_rx_release(adv->node_rx_cc_free);
   19720:	f7ff fc1c 	bl	18f5c <ll_rx_release>
	ll_rx_link_release(adv->link_cc_free);
   19724:	6e20      	ldr	r0, [r4, #96]	; 0x60
	adv->node_rx_cc_free = NULL;
   19726:	6665      	str	r5, [r4, #100]	; 0x64
	ll_rx_link_release(adv->link_cc_free);
   19728:	f7ff fc0c 	bl	18f44 <ll_rx_link_release>
	adv->link_cc_free = NULL;
   1972c:	6625      	str	r5, [r4, #96]	; 0x60
}
   1972e:	bd70      	pop	{r4, r5, r6, pc}
   19730:	0002f43c 	.word	0x0002f43c
   19734:	0002f4c6 	.word	0x0002f4c6
   19738:	0002b804 	.word	0x0002b804
   1973c:	0002e896 	.word	0x0002e896

00019740 <ticker_stop_op_cb>:
{
   19740:	b508      	push	{r3, lr}
	if (status != TICKER_STATUS_SUCCESS) {
   19742:	4602      	mov	r2, r0
   19744:	b998      	cbnz	r0, 1976e <ticker_stop_op_cb+0x2e>
	mfy.param = param;
   19746:	4b0a      	ldr	r3, [pc, #40]	; (19770 <ticker_stop_op_cb+0x30>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   19748:	2002      	movs	r0, #2
	mfy.param = param;
   1974a:	6099      	str	r1, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   1974c:	2101      	movs	r1, #1
   1974e:	f7fd f955 	bl	169fc <mayfly_enqueue>
	LL_ASSERT(!ret);
   19752:	b160      	cbz	r0, 1976e <ticker_stop_op_cb+0x2e>
   19754:	4a07      	ldr	r2, [pc, #28]	; (19774 <ticker_stop_op_cb+0x34>)
   19756:	4908      	ldr	r1, [pc, #32]	; (19778 <ticker_stop_op_cb+0x38>)
   19758:	4808      	ldr	r0, [pc, #32]	; (1977c <ticker_stop_op_cb+0x3c>)
   1975a:	f44f 630b 	mov.w	r3, #2224	; 0x8b0
   1975e:	f007 fd85 	bl	2126c <printk>
   19762:	4040      	eors	r0, r0
   19764:	f380 8811 	msr	BASEPRI, r0
   19768:	f04f 0003 	mov.w	r0, #3
   1976c:	df02      	svc	2
}
   1976e:	bd08      	pop	{r3, pc}
   19770:	20000d84 	.word	0x20000d84
   19774:	0002f43c 	.word	0x0002f43c
   19778:	0002f3a5 	.word	0x0002f3a5
   1977c:	0002b804 	.word	0x0002b804

00019780 <adv_disable>:
{
   19780:	b538      	push	{r3, r4, r5, lr}
   19782:	4604      	mov	r4, r0
   19784:	f810 3b1c 	ldrb.w	r3, [r0], #28
	if (ull_ref_get(hdr)) {
   19788:	b34b      	cbz	r3, 197de <adv_disable+0x5e>
		mfy.param = &adv->lll;
   1978a:	4d17      	ldr	r5, [pc, #92]	; (197e8 <adv_disable+0x68>)
		LL_ASSERT(!hdr->disabled_cb);
   1978c:	6963      	ldr	r3, [r4, #20]
		mfy.param = &adv->lll;
   1978e:	60a8      	str	r0, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
   19790:	b163      	cbz	r3, 197ac <adv_disable+0x2c>
   19792:	4a16      	ldr	r2, [pc, #88]	; (197ec <adv_disable+0x6c>)
   19794:	4916      	ldr	r1, [pc, #88]	; (197f0 <adv_disable+0x70>)
   19796:	4817      	ldr	r0, [pc, #92]	; (197f4 <adv_disable+0x74>)
   19798:	f640 03c5 	movw	r3, #2245	; 0x8c5
   1979c:	f007 fd66 	bl	2126c <printk>
   197a0:	4040      	eors	r0, r0
   197a2:	f380 8811 	msr	BASEPRI, r0
   197a6:	f04f 0003 	mov.w	r0, #3
   197aa:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   197ac:	68ab      	ldr	r3, [r5, #8]
   197ae:	61a3      	str	r3, [r4, #24]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   197b0:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   197b2:	4b11      	ldr	r3, [pc, #68]	; (197f8 <adv_disable+0x78>)
   197b4:	6163      	str	r3, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   197b6:	4611      	mov	r1, r2
   197b8:	4b0b      	ldr	r3, [pc, #44]	; (197e8 <adv_disable+0x68>)
   197ba:	2001      	movs	r0, #1
   197bc:	f7fd f91e 	bl	169fc <mayfly_enqueue>
		LL_ASSERT(!ret);
   197c0:	b160      	cbz	r0, 197dc <adv_disable+0x5c>
   197c2:	4a0a      	ldr	r2, [pc, #40]	; (197ec <adv_disable+0x6c>)
   197c4:	490d      	ldr	r1, [pc, #52]	; (197fc <adv_disable+0x7c>)
   197c6:	480b      	ldr	r0, [pc, #44]	; (197f4 <adv_disable+0x74>)
   197c8:	f640 03cc 	movw	r3, #2252	; 0x8cc
   197cc:	f007 fd4e 	bl	2126c <printk>
   197d0:	4040      	eors	r0, r0
   197d2:	f380 8811 	msr	BASEPRI, r0
   197d6:	f04f 0003 	mov.w	r0, #3
   197da:	df02      	svc	2
}
   197dc:	bd38      	pop	{r3, r4, r5, pc}
   197de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&adv->lll);
   197e2:	f7ff bf2b 	b.w	1963c <disabled_cb>
   197e6:	bf00      	nop
   197e8:	20000d74 	.word	0x20000d74
   197ec:	0002f43c 	.word	0x0002f43c
   197f0:	0002f4d9 	.word	0x0002f4d9
   197f4:	0002b804 	.word	0x0002b804
   197f8:	0001963d 	.word	0x0001963d
   197fc:	0002f3a5 	.word	0x0002f3a5

00019800 <ticker_update_op_cb>:
{
   19800:	b510      	push	{r4, lr}
   19802:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   19804:	b180      	cbz	r0, 19828 <ticker_update_op_cb+0x28>
   19806:	f7ff fcf9 	bl	191fc <ull_disable_mark_get>
   1980a:	4284      	cmp	r4, r0
   1980c:	d00c      	beq.n	19828 <ticker_update_op_cb+0x28>
   1980e:	4a07      	ldr	r2, [pc, #28]	; (1982c <ticker_update_op_cb+0x2c>)
   19810:	4907      	ldr	r1, [pc, #28]	; (19830 <ticker_update_op_cb+0x30>)
   19812:	4808      	ldr	r0, [pc, #32]	; (19834 <ticker_update_op_cb+0x34>)
   19814:	f640 0381 	movw	r3, #2177	; 0x881
   19818:	f007 fd28 	bl	2126c <printk>
   1981c:	4040      	eors	r0, r0
   1981e:	f380 8811 	msr	BASEPRI, r0
   19822:	f04f 0003 	mov.w	r0, #3
   19826:	df02      	svc	2
}
   19828:	bd10      	pop	{r4, pc}
   1982a:	bf00      	nop
   1982c:	0002f43c 	.word	0x0002f43c
   19830:	0002f4eb 	.word	0x0002f4eb
   19834:	0002b804 	.word	0x0002b804

00019838 <init_reset>:
{
   19838:	b510      	push	{r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   1983a:	4c13      	ldr	r4, [pc, #76]	; (19888 <init_reset+0x50>)
   1983c:	f104 0028 	add.w	r0, r4, #40	; 0x28
   19840:	f002 fbac 	bl	1bf9c <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   19844:	f104 0034 	add.w	r0, r4, #52	; 0x34
   19848:	f002 fba8 	bl	1bf9c <lll_adv_data_init>
	pdu->len = BDADDR_SIZE;
}

static void init_set(struct ll_adv_set *adv)
{
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   1984c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   19850:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
#if defined(CONFIG_BT_CTLR_PRIVACY)
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
#endif /* CONFIG_BT_CTLR_PRIVACY */
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   19854:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   19856:	f423 7343 	bic.w	r3, r3, #780	; 0x30c
   1985a:	f023 0302 	bic.w	r3, r3, #2
   1985e:	f043 030e 	orr.w	r3, r3, #14
   19862:	84a3      	strh	r3, [r4, #36]	; 0x24
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   19864:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   19868:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	pdu->len = BDADDR_SIZE;
   1986c:	2206      	movs	r2, #6
   1986e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	pdu->type = pdu_type;
   19870:	2000      	movs	r0, #0
	pdu->len = BDADDR_SIZE;
   19872:	705a      	strb	r2, [r3, #1]
	pdu->type = pdu_type;
   19874:	7018      	strb	r0, [r3, #0]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   19876:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   1987a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   1987e:	2104      	movs	r1, #4
   19880:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	pdu->len = BDADDR_SIZE;
   19882:	705a      	strb	r2, [r3, #1]
	pdu->type = pdu_type;
   19884:	7019      	strb	r1, [r3, #0]
}
   19886:	bd10      	pop	{r4, pc}
   19888:	20002f88 	.word	0x20002f88

0001988c <ticker_cb>:
{
   1988c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1988e:	461c      	mov	r4, r3
   19890:	b08b      	sub	sp, #44	; 0x2c
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   19892:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19896:	429c      	cmp	r4, r3
{
   19898:	9d11      	ldr	r5, [sp, #68]	; 0x44
   1989a:	4607      	mov	r7, r0
   1989c:	4616      	mov	r6, r2
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   1989e:	d030      	beq.n	19902 <ticker_cb+0x76>
	return ++hdr->ref;
   198a0:	7829      	ldrb	r1, [r5, #0]
   198a2:	3101      	adds	r1, #1
   198a4:	b2c9      	uxtb	r1, r1
   198a6:	7029      	strb	r1, [r5, #0]
		LL_ASSERT(ref);
   198a8:	b961      	cbnz	r1, 198c4 <ticker_cb+0x38>
   198aa:	4a31      	ldr	r2, [pc, #196]	; (19970 <ticker_cb+0xe4>)
   198ac:	4931      	ldr	r1, [pc, #196]	; (19974 <ticker_cb+0xe8>)
   198ae:	4832      	ldr	r0, [pc, #200]	; (19978 <ticker_cb+0xec>)
   198b0:	f640 0347 	movw	r3, #2119	; 0x847
   198b4:	f007 fcda 	bl	2126c <printk>
   198b8:	4040      	eors	r0, r0
   198ba:	f380 8811 	msr	BASEPRI, r0
   198be:	f04f 0003 	mov.w	r0, #3
   198c2:	df02      	svc	2
		p.ticks_at_expire = ticks_at_expire;
   198c4:	492d      	ldr	r1, [pc, #180]	; (1997c <ticker_cb+0xf0>)
		p.force = force;
   198c6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   198ca:	728b      	strb	r3, [r1, #10]
	lll = &adv->lll;
   198cc:	f105 031c 	add.w	r3, r5, #28
		p.param = lll;
   198d0:	60cb      	str	r3, [r1, #12]
		mfy.param = &p;
   198d2:	4b2b      	ldr	r3, [pc, #172]	; (19980 <ticker_cb+0xf4>)
		p.lazy = lazy;
   198d4:	810c      	strh	r4, [r1, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   198d6:	2200      	movs	r2, #0
		p.remainder = remainder;
   198d8:	e9c1 7600 	strd	r7, r6, [r1]
		mfy.param = &p;
   198dc:	6099      	str	r1, [r3, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   198de:	2001      	movs	r0, #1
   198e0:	4611      	mov	r1, r2
   198e2:	f7fd f88b 	bl	169fc <mayfly_enqueue>
		LL_ASSERT(!ret);
   198e6:	b160      	cbz	r0, 19902 <ticker_cb+0x76>
   198e8:	4a21      	ldr	r2, [pc, #132]	; (19970 <ticker_cb+0xe4>)
   198ea:	4926      	ldr	r1, [pc, #152]	; (19984 <ticker_cb+0xf8>)
   198ec:	4822      	ldr	r0, [pc, #136]	; (19978 <ticker_cb+0xec>)
   198ee:	f640 0354 	movw	r3, #2132	; 0x854
   198f2:	f007 fcbb 	bl	2126c <printk>
   198f6:	4040      	eors	r0, r0
   198f8:	f380 8811 	msr	BASEPRI, r0
   198fc:	f04f 0003 	mov.w	r0, #3
   19900:	df02      	svc	2
	if (!lll->is_hdcd)
   19902:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
   19906:	f014 0401 	ands.w	r4, r4, #1
   1990a:	d12f      	bne.n	1996c <ticker_cb+0xe0>
	lll_rand_isr_get(&random_delay, sizeof(random_delay));
   1990c:	2104      	movs	r1, #4
   1990e:	a809      	add	r0, sp, #36	; 0x24
   19910:	f00e f893 	bl	27a3a <lll_rand_isr_get>
	random_delay %= ticks_delay_window;
   19914:	9b09      	ldr	r3, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   19916:	9506      	str	r5, [sp, #24]
	random_delay %= ticks_delay_window;
   19918:	f240 1247 	movw	r2, #327	; 0x147
   1991c:	fbb3 f1f2 	udiv	r1, r3, r2
   19920:	fb02 3311 	mls	r3, r2, r1, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   19924:	4a18      	ldr	r2, [pc, #96]	; (19988 <ticker_cb+0xfc>)
   19926:	216c      	movs	r1, #108	; 0x6c
   19928:	1aaa      	subs	r2, r5, r2
   1992a:	fbb2 f2f1 	udiv	r2, r2, r1
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1992e:	4917      	ldr	r1, [pc, #92]	; (1998c <ticker_cb+0x100>)
			    TICKER_ID_ADV_BASE + ull_adv_handle_get(adv),
   19930:	3202      	adds	r2, #2
	random_delay += (ticks_delay_window_offset + 1);
   19932:	3301      	adds	r3, #1
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   19934:	e9cd 4104 	strd	r4, r1, [sp, #16]
   19938:	e9cd 4402 	strd	r4, r4, [sp, #8]
   1993c:	e9cd 4400 	strd	r4, r4, [sp]
   19940:	b2d2      	uxtb	r2, r2
   19942:	2101      	movs	r1, #1
   19944:	4620      	mov	r0, r4
	random_delay += (ticks_delay_window_offset + 1);
   19946:	9309      	str	r3, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   19948:	f00d fcfe 	bl	27348 <ticker_update>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1994c:	f030 0302 	bics.w	r3, r0, #2
   19950:	d00c      	beq.n	1996c <ticker_cb+0xe0>
   19952:	4a07      	ldr	r2, [pc, #28]	; (19970 <ticker_cb+0xe4>)
   19954:	490e      	ldr	r1, [pc, #56]	; (19990 <ticker_cb+0x104>)
   19956:	4808      	ldr	r0, [pc, #32]	; (19978 <ticker_cb+0xec>)
   19958:	f240 63fa 	movw	r3, #1786	; 0x6fa
   1995c:	f007 fc86 	bl	2126c <printk>
   19960:	4040      	eors	r0, r0
   19962:	f380 8811 	msr	BASEPRI, r0
   19966:	f04f 0003 	mov.w	r0, #3
   1996a:	df02      	svc	2
}
   1996c:	b00b      	add	sp, #44	; 0x2c
   1996e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19970:	0002f43c 	.word	0x0002f43c
   19974:	0002f51a 	.word	0x0002f51a
   19978:	0002b804 	.word	0x0002b804
   1997c:	20003000 	.word	0x20003000
   19980:	20000d64 	.word	0x20000d64
   19984:	0002f3a5 	.word	0x0002f3a5
   19988:	20002f88 	.word	0x20002f88
   1998c:	00019801 	.word	0x00019801
   19990:	0002f486 	.word	0x0002f486

00019994 <ll_adv_params_set>:
{
   19994:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!adv || adv->is_enabled) {
   19998:	4d57      	ldr	r5, [pc, #348]	; (19af8 <ll_adv_params_set+0x164>)
{
   1999a:	4698      	mov	r8, r3
	if (!adv || adv->is_enabled) {
   1999c:	f895 606a 	ldrb.w	r6, [r5, #106]	; 0x6a
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   199a0:	4b56      	ldr	r3, [pc, #344]	; (19afc <ll_adv_params_set+0x168>)
{
   199a2:	4604      	mov	r4, r0
	if (!adv || adv->is_enabled) {
   199a4:	f016 0601 	ands.w	r6, r6, #1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   199a8:	6818      	ldr	r0, [r3, #0]
   199aa:	791b      	ldrb	r3, [r3, #4]
   199ac:	9000      	str	r0, [sp, #0]
{
   199ae:	4617      	mov	r7, r2
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   199b0:	f88d 3004 	strb.w	r3, [sp, #4]
	if (!adv || adv->is_enabled) {
   199b4:	f040 809e 	bne.w	19af4 <ll_adv_params_set+0x160>
		adv->interval = 0;
   199b8:	2901      	cmp	r1, #1
   199ba:	bf08      	it	eq
   199bc:	2400      	moveq	r4, #0
   199be:	f8a5 4068 	strh.w	r4, [r5, #104]	; 0x68
	adv->lll.chan_map = chan_map;
   199c2:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
   199c6:	f004 0303 	and.w	r3, r4, #3
   199ca:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
   199ce:	f004 0407 	and.w	r4, r4, #7
   199d2:	0064      	lsls	r4, r4, #1
   199d4:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
   199d8:	8cab      	ldrh	r3, [r5, #36]	; 0x24
   199da:	f423 7343 	bic.w	r3, r3, #780	; 0x30c
   199de:	f023 0302 	bic.w	r3, r3, #2
   199e2:	431c      	orrs	r4, r3
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   199e4:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
   199e8:	84ac      	strh	r4, [r5, #36]	; 0x24
   199ea:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   199ee:	ea4f 1a87 	mov.w	sl, r7, lsl #6
   199f2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	pdu->type = pdu_adv_type[adv_type];
   199f4:	f101 0308 	add.w	r3, r1, #8
   199f8:	eb0d 0103 	add.w	r1, sp, r3
	pdu_type_prev = pdu->type;
   199fc:	7822      	ldrb	r2, [r4, #0]
	pdu->type = pdu_adv_type[adv_type];
   199fe:	f811 3c08 	ldrb.w	r3, [r1, #-8]
	pdu_type_prev = pdu->type;
   19a02:	f002 090f 	and.w	r9, r2, #15
	pdu->type = pdu_adv_type[adv_type];
   19a06:	f003 030f 	and.w	r3, r3, #15
   19a0a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
   19a0e:	4313      	orrs	r3, r2
   19a10:	7023      	strb	r3, [r4, #0]
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   19a12:	f003 030f 	and.w	r3, r3, #15
   19a16:	2b01      	cmp	r3, #1
   19a18:	d137      	bne.n	19a8a <ll_adv_params_set+0xf6>
	    (pdu_type_prev != PDU_ADV_TYPE_DIRECT_IND) &&
   19a1a:	f1b9 0f01 	cmp.w	r9, #1
   19a1e:	f104 0b08 	add.w	fp, r4, #8
   19a22:	d003      	beq.n	19a2c <ll_adv_params_set+0x98>
		if (pdu->len == 0U) {
   19a24:	7863      	ldrb	r3, [r4, #1]
   19a26:	b99b      	cbnz	r3, 19a50 <ll_adv_params_set+0xbc>
			adv->ad_data_backup.len = 0U;
   19a28:	f885 6040 	strb.w	r6, [r5, #64]	; 0x40
		pdu->tx_addr = own_addr_type & 0x1;
   19a2c:	f00a 0340 	and.w	r3, sl, #64	; 0x40
   19a30:	ea43 18c8 	orr.w	r8, r3, r8, lsl #7
   19a34:	7823      	ldrb	r3, [r4, #0]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   19a36:	990c      	ldr	r1, [sp, #48]	; 0x30
		pdu->tx_addr = own_addr_type & 0x1;
   19a38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   19a3c:	ea48 0803 	orr.w	r8, r8, r3
   19a40:	f884 8000 	strb.w	r8, [r4]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   19a44:	2206      	movs	r2, #6
   19a46:	4658      	mov	r0, fp
   19a48:	f00a f9ae 	bl	23da8 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   19a4c:	230c      	movs	r3, #12
   19a4e:	e027      	b.n	19aa0 <ll_adv_params_set+0x10c>
			LL_ASSERT(pdu->len >=
   19a50:	2b05      	cmp	r3, #5
   19a52:	d80c      	bhi.n	19a6e <ll_adv_params_set+0xda>
   19a54:	4a2a      	ldr	r2, [pc, #168]	; (19b00 <ll_adv_params_set+0x16c>)
   19a56:	492b      	ldr	r1, [pc, #172]	; (19b04 <ll_adv_params_set+0x170>)
   19a58:	482b      	ldr	r0, [pc, #172]	; (19b08 <ll_adv_params_set+0x174>)
   19a5a:	f240 1393 	movw	r3, #403	; 0x193
   19a5e:	f007 fc05 	bl	2126c <printk>
   19a62:	4040      	eors	r0, r0
   19a64:	f380 8811 	msr	BASEPRI, r0
   19a68:	f04f 0003 	mov.w	r0, #3
   19a6c:	df02      	svc	2
			adv->ad_data_backup.len = pdu->len -
   19a6e:	7862      	ldrb	r2, [r4, #1]
			memcpy(adv->ad_data_backup.data, pdu->adv_ind.data,
   19a70:	4826      	ldr	r0, [pc, #152]	; (19b0c <ll_adv_params_set+0x178>)
			adv->ad_data_backup.len = pdu->len -
   19a72:	3a06      	subs	r2, #6
   19a74:	b2d2      	uxtb	r2, r2
   19a76:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
			memcpy(adv->ad_data_backup.data, pdu->adv_ind.data,
   19a7a:	4659      	mov	r1, fp
   19a7c:	f00a f994 	bl	23da8 <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   19a80:	7823      	ldrb	r3, [r4, #0]
   19a82:	f003 030f 	and.w	r3, r3, #15
   19a86:	2b01      	cmp	r3, #1
   19a88:	d0d0      	beq.n	19a2c <ll_adv_params_set+0x98>
	} else if (pdu->len == 0) {
   19a8a:	7862      	ldrb	r2, [r4, #1]
		pdu->tx_addr = own_addr_type & 0x1;
   19a8c:	f007 0701 	and.w	r7, r7, #1
	} else if (pdu->len == 0) {
   19a90:	b942      	cbnz	r2, 19aa4 <ll_adv_params_set+0x110>
		pdu->tx_addr = own_addr_type & 0x1;
   19a92:	7823      	ldrb	r3, [r4, #0]
   19a94:	f367 1386 	bfi	r3, r7, #6, #1
		pdu->rx_addr = 0;
   19a98:	f362 13c7 	bfi	r3, r2, #7, #1
   19a9c:	7023      	strb	r3, [r4, #0]
		pdu->len = BDADDR_SIZE;
   19a9e:	2306      	movs	r3, #6
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   19aa0:	7063      	strb	r3, [r4, #1]
   19aa2:	e013      	b.n	19acc <ll_adv_params_set+0x138>
		if (((pdu_type_prev == PDU_ADV_TYPE_DIRECT_IND) ||
   19aa4:	f1b9 0f01 	cmp.w	r9, #1
   19aa8:	d10a      	bne.n	19ac0 <ll_adv_params_set+0x12c>
			memcpy(pdu->adv_ind.data, adv->ad_data_backup.data,
   19aaa:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
   19aae:	4917      	ldr	r1, [pc, #92]	; (19b0c <ll_adv_params_set+0x178>)
   19ab0:	f104 0008 	add.w	r0, r4, #8
   19ab4:	f00a f978 	bl	23da8 <memcpy>
			pdu->len = offsetof(struct pdu_adv_adv_ind, data) +
   19ab8:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   19abc:	3306      	adds	r3, #6
   19abe:	7063      	strb	r3, [r4, #1]
		pdu->tx_addr = own_addr_type & 0x1;
   19ac0:	7823      	ldrb	r3, [r4, #0]
   19ac2:	f367 1386 	bfi	r3, r7, #6, #1
		pdu->rx_addr = 0;
   19ac6:	f36f 13c7 	bfc	r3, #7, #1
   19aca:	7023      	strb	r3, [r4, #0]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   19acc:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
   19ad0:	eb05 0583 	add.w	r5, r5, r3, lsl #2
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   19ad4:	f00a 0a40 	and.w	sl, sl, #64	; 0x40
   19ad8:	6bab      	ldr	r3, [r5, #56]	; 0x38
		if (pdu->len == 0) {
   19ada:	785a      	ldrb	r2, [r3, #1]
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   19adc:	f04a 0a04 	orr.w	sl, sl, #4
   19ae0:	f883 a000 	strb.w	sl, [r3]
		if (pdu->len == 0) {
   19ae4:	b912      	cbnz	r2, 19aec <ll_adv_params_set+0x158>
			pdu->len = BDADDR_SIZE;
   19ae6:	2106      	movs	r1, #6
   19ae8:	7059      	strb	r1, [r3, #1]
	return 0;
   19aea:	4616      	mov	r6, r2
}
   19aec:	4630      	mov	r0, r6
   19aee:	b003      	add	sp, #12
   19af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   19af4:	260c      	movs	r6, #12
   19af6:	e7f9      	b.n	19aec <ll_adv_params_set+0x158>
   19af8:	20002f88 	.word	0x20002f88
   19afc:	00029b9e 	.word	0x00029b9e
   19b00:	0002f43c 	.word	0x0002f43c
   19b04:	0002f51e 	.word	0x0002f51e
   19b08:	0002b804 	.word	0x0002b804
   19b0c:	20002fc9 	.word	0x20002fc9

00019b10 <ull_adv_reset_finalize>:
{
   19b10:	b510      	push	{r4, lr}
		lll_adv_data_reset(&lll->adv_data);
   19b12:	4c06      	ldr	r4, [pc, #24]	; (19b2c <ull_adv_reset_finalize+0x1c>)
   19b14:	f104 0028 	add.w	r0, r4, #40	; 0x28
   19b18:	f00d fff0 	bl	27afc <lll_adv_data_reset>
		lll_adv_data_reset(&lll->scan_rsp);
   19b1c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   19b20:	f00d ffec 	bl	27afc <lll_adv_data_reset>
}
   19b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = init_reset();
   19b28:	f7ff be86 	b.w	19838 <init_reset>
   19b2c:	20002f88 	.word	0x20002f88

00019b30 <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   19b30:	4b03      	ldr	r3, [pc, #12]	; (19b40 <ull_adv_handle_get+0x10>)
   19b32:	1ac0      	subs	r0, r0, r3
   19b34:	236c      	movs	r3, #108	; 0x6c
   19b36:	fbb0 f0f3 	udiv	r0, r0, r3
}
   19b3a:	b280      	uxth	r0, r0
   19b3c:	4770      	bx	lr
   19b3e:	bf00      	nop
   19b40:	20002f88 	.word	0x20002f88

00019b44 <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   19b44:	6800      	ldr	r0, [r0, #0]
   19b46:	4b03      	ldr	r3, [pc, #12]	; (19b54 <ull_adv_lll_handle_get+0x10>)
   19b48:	1ac0      	subs	r0, r0, r3
   19b4a:	236c      	movs	r3, #108	; 0x6c
   19b4c:	fbb0 f0f3 	udiv	r0, r0, r3
}
   19b50:	b280      	uxth	r0, r0
   19b52:	4770      	bx	lr
   19b54:	20002f88 	.word	0x20002f88

00019b58 <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   19b58:	b938      	cbnz	r0, 19b6a <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
   19b5a:	4805      	ldr	r0, [pc, #20]	; (19b70 <ull_adv_is_enabled_get+0x18>)
   19b5c:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
	return &ll_adv[handle];
   19b60:	f013 0f01 	tst.w	r3, #1
   19b64:	bf08      	it	eq
   19b66:	2000      	moveq	r0, #0
   19b68:	4770      	bx	lr
		return NULL;
   19b6a:	2000      	movs	r0, #0
}
   19b6c:	4770      	bx	lr
   19b6e:	bf00      	nop
   19b70:	20002f88 	.word	0x20002f88

00019b74 <disable.constprop.0>:
static inline uint8_t disable(uint8_t handle)
   19b74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	adv = ull_adv_is_enabled_get(handle);
   19b76:	2000      	movs	r0, #0
   19b78:	f7ff ffee 	bl	19b58 <ull_adv_is_enabled_get>
	if (!adv) {
   19b7c:	4604      	mov	r4, r0
   19b7e:	2800      	cmp	r0, #0
   19b80:	d037      	beq.n	19bf2 <disable.constprop.0+0x7e>
	if (adv->lll.conn) {
   19b82:	6a03      	ldr	r3, [r0, #32]
   19b84:	bb4b      	cbnz	r3, 19bda <disable.constprop.0+0x66>
	mark = ull_disable_mark(adv);
   19b86:	4620      	mov	r0, r4
   19b88:	f7ff fb22 	bl	191d0 <ull_disable_mark>
	LL_ASSERT(mark == adv);
   19b8c:	4284      	cmp	r4, r0
   19b8e:	d132      	bne.n	19bf6 <disable.constprop.0+0x82>
	if (adv->lll.is_hdcd) {
   19b90:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   19b94:	07db      	lsls	r3, r3, #31
   19b96:	d53c      	bpl.n	19c12 <disable.constprop.0+0x9e>
		ret_cb = TICKER_STATUS_BUSY;
   19b98:	2302      	movs	r3, #2
   19b9a:	9303      	str	r3, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   19b9c:	ab03      	add	r3, sp, #12
   19b9e:	9300      	str	r3, [sp, #0]
   19ba0:	2103      	movs	r1, #3
   19ba2:	4b3f      	ldr	r3, [pc, #252]	; (19ca0 <disable.constprop.0+0x12c>)
   19ba4:	2201      	movs	r2, #1
   19ba6:	2000      	movs	r0, #0
   19ba8:	f7fd fcee 	bl	17588 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
   19bac:	a903      	add	r1, sp, #12
   19bae:	f7ff fae9 	bl	19184 <ull_ticker_status_take>
		if (ret) {
   19bb2:	b370      	cbz	r0, 19c12 <disable.constprop.0+0x9e>
			mark = ull_disable_unmark(adv);
   19bb4:	4620      	mov	r0, r4
   19bb6:	f7ff fb13 	bl	191e0 <ull_disable_unmark>
			LL_ASSERT(mark == adv);
   19bba:	4284      	cmp	r4, r0
   19bbc:	d018      	beq.n	19bf0 <disable.constprop.0+0x7c>
   19bbe:	f640 13ca 	movw	r3, #2506	; 0x9ca
		LL_ASSERT(mark == adv);
   19bc2:	4a38      	ldr	r2, [pc, #224]	; (19ca4 <disable.constprop.0+0x130>)
   19bc4:	4938      	ldr	r1, [pc, #224]	; (19ca8 <disable.constprop.0+0x134>)
   19bc6:	4839      	ldr	r0, [pc, #228]	; (19cac <disable.constprop.0+0x138>)
   19bc8:	f007 fb50 	bl	2126c <printk>
   19bcc:	4040      	eors	r0, r0
   19bce:	f380 8811 	msr	BASEPRI, r0
   19bd2:	f04f 0003 	mov.w	r0, #3
   19bd6:	df02      	svc	2
   19bd8:	e00a      	b.n	19bf0 <disable.constprop.0+0x7c>
		adv->lll.conn->periph.cancelled = 1U;
   19bda:	f893 2020 	ldrb.w	r2, [r3, #32]
   19bde:	f042 0202 	orr.w	r2, r2, #2
   19be2:	f883 2020 	strb.w	r2, [r3, #32]
		if (unlikely(adv->lll.conn->periph.initiated)) {
   19be6:	6a03      	ldr	r3, [r0, #32]
   19be8:	f893 3020 	ldrb.w	r3, [r3, #32]
   19bec:	07da      	lsls	r2, r3, #31
   19bee:	d5ca      	bpl.n	19b86 <disable.constprop.0+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19bf0:	200c      	movs	r0, #12
}
   19bf2:	b004      	add	sp, #16
   19bf4:	bd10      	pop	{r4, pc}
	LL_ASSERT(mark == adv);
   19bf6:	4a2b      	ldr	r2, [pc, #172]	; (19ca4 <disable.constprop.0+0x130>)
   19bf8:	492b      	ldr	r1, [pc, #172]	; (19ca8 <disable.constprop.0+0x134>)
   19bfa:	482c      	ldr	r0, [pc, #176]	; (19cac <disable.constprop.0+0x138>)
   19bfc:	f640 13bf 	movw	r3, #2495	; 0x9bf
   19c00:	f007 fb34 	bl	2126c <printk>
   19c04:	4040      	eors	r0, r0
   19c06:	f380 8811 	msr	BASEPRI, r0
   19c0a:	f04f 0003 	mov.w	r0, #3
   19c0e:	df02      	svc	2
   19c10:	e7be      	b.n	19b90 <disable.constprop.0+0x1c>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   19c12:	ab03      	add	r3, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
   19c14:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   19c16:	9300      	str	r3, [sp, #0]
   19c18:	2103      	movs	r1, #3
   19c1a:	4b21      	ldr	r3, [pc, #132]	; (19ca0 <disable.constprop.0+0x12c>)
	ret_cb = TICKER_STATUS_BUSY;
   19c1c:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   19c1e:	2000      	movs	r0, #0
   19c20:	f7fd fcb2 	bl	17588 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   19c24:	a903      	add	r1, sp, #12
   19c26:	f7ff faad 	bl	19184 <ull_ticker_status_take>
	if (ret) {
   19c2a:	b138      	cbz	r0, 19c3c <disable.constprop.0+0xc8>
		mark = ull_disable_unmark(adv);
   19c2c:	4620      	mov	r0, r4
   19c2e:	f7ff fad7 	bl	191e0 <ull_disable_unmark>
		LL_ASSERT(mark == adv);
   19c32:	4284      	cmp	r4, r0
   19c34:	d0dc      	beq.n	19bf0 <disable.constprop.0+0x7c>
   19c36:	f640 13d8 	movw	r3, #2520	; 0x9d8
   19c3a:	e7c2      	b.n	19bc2 <disable.constprop.0+0x4e>
	ret = ull_disable(&adv->lll);
   19c3c:	f104 001c 	add.w	r0, r4, #28
   19c40:	f7ff fafe 	bl	19240 <ull_disable>
	LL_ASSERT(!ret);
   19c44:	b160      	cbz	r0, 19c60 <disable.constprop.0+0xec>
   19c46:	4a17      	ldr	r2, [pc, #92]	; (19ca4 <disable.constprop.0+0x130>)
   19c48:	4919      	ldr	r1, [pc, #100]	; (19cb0 <disable.constprop.0+0x13c>)
   19c4a:	4818      	ldr	r0, [pc, #96]	; (19cac <disable.constprop.0+0x138>)
   19c4c:	f640 13de 	movw	r3, #2526	; 0x9de
   19c50:	f007 fb0c 	bl	2126c <printk>
   19c54:	4040      	eors	r0, r0
   19c56:	f380 8811 	msr	BASEPRI, r0
   19c5a:	f04f 0003 	mov.w	r0, #3
   19c5e:	df02      	svc	2
	mark = ull_disable_unmark(adv);
   19c60:	4620      	mov	r0, r4
   19c62:	f7ff fabd 	bl	191e0 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   19c66:	4284      	cmp	r4, r0
   19c68:	d00c      	beq.n	19c84 <disable.constprop.0+0x110>
   19c6a:	4a0e      	ldr	r2, [pc, #56]	; (19ca4 <disable.constprop.0+0x130>)
   19c6c:	490e      	ldr	r1, [pc, #56]	; (19ca8 <disable.constprop.0+0x134>)
   19c6e:	480f      	ldr	r0, [pc, #60]	; (19cac <disable.constprop.0+0x138>)
   19c70:	f640 13e1 	movw	r3, #2529	; 0x9e1
   19c74:	f007 fafa 	bl	2126c <printk>
   19c78:	4040      	eors	r0, r0
   19c7a:	f380 8811 	msr	BASEPRI, r0
   19c7e:	f04f 0003 	mov.w	r0, #3
   19c82:	df02      	svc	2
	if (adv->lll.conn) {
   19c84:	6a23      	ldr	r3, [r4, #32]
   19c86:	b113      	cbz	r3, 19c8e <disable.constprop.0+0x11a>
		conn_release(adv);
   19c88:	4620      	mov	r0, r4
   19c8a:	f7ff fd1b 	bl	196c4 <conn_release>
	adv->is_enabled = 0U;
   19c8e:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   19c92:	f36f 0300 	bfc	r3, #0, #1
   19c96:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
	return 0;
   19c9a:	2000      	movs	r0, #0
   19c9c:	e7a9      	b.n	19bf2 <disable.constprop.0+0x7e>
   19c9e:	bf00      	nop
   19ca0:	000189cd 	.word	0x000189cd
   19ca4:	0002f43c 	.word	0x0002f43c
   19ca8:	0002f55c 	.word	0x0002f55c
   19cac:	0002b804 	.word	0x0002b804
   19cb0:	0002f3a5 	.word	0x0002f3a5

00019cb4 <ll_adv_data_set>:
{
   19cb4:	460a      	mov	r2, r1
	return ull_adv_data_set(adv, len, data);
   19cb6:	4601      	mov	r1, r0
   19cb8:	4801      	ldr	r0, [pc, #4]	; (19cc0 <ll_adv_data_set+0xc>)
   19cba:	f00d bc48 	b.w	2754e <ull_adv_data_set>
   19cbe:	bf00      	nop
   19cc0:	20002f88 	.word	0x20002f88

00019cc4 <ll_adv_scan_rsp_set>:
{
   19cc4:	460a      	mov	r2, r1
	return ull_scan_rsp_set(adv, len, data);
   19cc6:	4601      	mov	r1, r0
   19cc8:	4801      	ldr	r0, [pc, #4]	; (19cd0 <ll_adv_scan_rsp_set+0xc>)
   19cca:	f00d bc93 	b.w	275f4 <ull_scan_rsp_set>
   19cce:	bf00      	nop
   19cd0:	20002f88 	.word	0x20002f88

00019cd4 <ticker_cb>:
}

static void ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
		      uint32_t remainder, uint16_t lazy, uint8_t force,
		      void *param)
{
   19cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19cd6:	461d      	mov	r5, r3
   19cd8:	9b07      	ldr	r3, [sp, #28]
	uint8_t ref;

	DEBUG_RADIO_PREPARE_O(1);

	scan = param;
	lll = &scan->lll;
   19cda:	461c      	mov	r4, r3
{
   19cdc:	4607      	mov	r7, r0
   19cde:	f814 1b1c 	ldrb.w	r1, [r4], #28
   19ce2:	3101      	adds	r1, #1
   19ce4:	b2c9      	uxtb	r1, r1
   19ce6:	4616      	mov	r6, r2
   19ce8:	7019      	strb	r1, [r3, #0]

	/* Increment prepare reference count */
	ref = ull_ref_inc(&scan->ull);
	LL_ASSERT(ref);
   19cea:	b961      	cbnz	r1, 19d06 <ticker_cb+0x32>
   19cec:	4a15      	ldr	r2, [pc, #84]	; (19d44 <ticker_cb+0x70>)
   19cee:	4916      	ldr	r1, [pc, #88]	; (19d48 <ticker_cb+0x74>)
   19cf0:	4816      	ldr	r0, [pc, #88]	; (19d4c <ticker_cb+0x78>)
   19cf2:	f240 23ab 	movw	r3, #683	; 0x2ab
   19cf6:	f007 fab9 	bl	2126c <printk>
   19cfa:	4040      	eors	r0, r0
   19cfc:	f380 8811 	msr	BASEPRI, r0
   19d00:	f04f 0003 	mov.w	r0, #3
   19d04:	df02      	svc	2

	/* Append timing parameters */
	p.ticks_at_expire = ticks_at_expire;
   19d06:	4912      	ldr	r1, [pc, #72]	; (19d50 <ticker_cb+0x7c>)
	p.remainder = remainder;
	p.lazy = lazy;
	p.param = lll;
	p.force = force;
   19d08:	f89d 3018 	ldrb.w	r3, [sp, #24]
   19d0c:	728b      	strb	r3, [r1, #10]
	mfy.param = &p;
   19d0e:	4b11      	ldr	r3, [pc, #68]	; (19d54 <ticker_cb+0x80>)
	p.lazy = lazy;
   19d10:	810d      	strh	r5, [r1, #8]

	/* Kick LLL prepare */
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   19d12:	2200      	movs	r2, #0
	p.remainder = remainder;
   19d14:	e9c1 7600 	strd	r7, r6, [r1]
	p.param = lll;
   19d18:	60cc      	str	r4, [r1, #12]
	mfy.param = &p;
   19d1a:	6099      	str	r1, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   19d1c:	2001      	movs	r0, #1
   19d1e:	4611      	mov	r1, r2
   19d20:	f7fc fe6c 	bl	169fc <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   19d24:	b160      	cbz	r0, 19d40 <ticker_cb+0x6c>
   19d26:	4a07      	ldr	r2, [pc, #28]	; (19d44 <ticker_cb+0x70>)
   19d28:	490b      	ldr	r1, [pc, #44]	; (19d58 <ticker_cb+0x84>)
   19d2a:	4808      	ldr	r0, [pc, #32]	; (19d4c <ticker_cb+0x78>)
   19d2c:	f44f 732e 	mov.w	r3, #696	; 0x2b8
   19d30:	f007 fa9c 	bl	2126c <printk>
   19d34:	4040      	eors	r0, r0
   19d36:	f380 8811 	msr	BASEPRI, r0
   19d3a:	f04f 0003 	mov.w	r0, #3
   19d3e:	df02      	svc	2
			  (ret == TICKER_STATUS_BUSY));
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	DEBUG_RADIO_PREPARE_O(1);
}
   19d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19d42:	bf00      	nop
   19d44:	0002f578 	.word	0x0002f578
   19d48:	0002f51a 	.word	0x0002f51a
   19d4c:	0002b804 	.word	0x0002b804
   19d50:	2000304c 	.word	0x2000304c
   19d54:	20000d94 	.word	0x20000d94
   19d58:	0002f3a5 	.word	0x0002f3a5

00019d5c <ull_scan_disable>:
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
   19d5c:	3004      	adds	r0, #4
{
   19d5e:	b508      	push	{r3, lr}
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
   19d60:	f101 021c 	add.w	r2, r1, #28
   19d64:	b2c0      	uxtb	r0, r0
   19d66:	f7ff faa9 	bl	192bc <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   19d6a:	b178      	cbz	r0, 19d8c <ull_scan_disable+0x30>
   19d6c:	3078      	adds	r0, #120	; 0x78
   19d6e:	d00c      	beq.n	19d8a <ull_scan_disable+0x2e>
   19d70:	4a07      	ldr	r2, [pc, #28]	; (19d90 <ull_scan_disable+0x34>)
   19d72:	4908      	ldr	r1, [pc, #32]	; (19d94 <ull_scan_disable+0x38>)
   19d74:	4808      	ldr	r0, [pc, #32]	; (19d98 <ull_scan_disable+0x3c>)
   19d76:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
   19d7a:	f007 fa77 	bl	2126c <printk>
   19d7e:	4040      	eors	r0, r0
   19d80:	f380 8811 	msr	BASEPRI, r0
   19d84:	f04f 0003 	mov.w	r0, #3
   19d88:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
   19d8a:	200c      	movs	r0, #12
}
   19d8c:	bd08      	pop	{r3, pc}
   19d8e:	bf00      	nop
   19d90:	0002f578 	.word	0x0002f578
   19d94:	0002f5b8 	.word	0x0002f5b8
   19d98:	0002b804 	.word	0x0002b804

00019d9c <ull_scan_lll_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   19d9c:	6800      	ldr	r0, [r0, #0]
   19d9e:	4b03      	ldr	r3, [pc, #12]	; (19dac <ull_scan_lll_handle_get+0x10>)
   19da0:	1ac0      	subs	r0, r0, r3
   19da2:	2334      	movs	r3, #52	; 0x34
   19da4:	fbb0 f0f3 	udiv	r0, r0, r3
}
   19da8:	b2c0      	uxtb	r0, r0
   19daa:	4770      	bx	lr
   19dac:	20003018 	.word	0x20003018

00019db0 <ull_scan_is_enabled_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
   19db0:	b938      	cbnz	r0, 19dc2 <ull_scan_is_enabled_get+0x12>
	if (!scan || !scan->is_enabled) {
   19db2:	4805      	ldr	r0, [pc, #20]	; (19dc8 <ull_scan_is_enabled_get+0x18>)
   19db4:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
	return &ll_scan[handle];
   19db8:	f013 0f01 	tst.w	r3, #1
   19dbc:	bf08      	it	eq
   19dbe:	2000      	moveq	r0, #0
   19dc0:	4770      	bx	lr
		return NULL;
   19dc2:	2000      	movs	r0, #0
}
   19dc4:	4770      	bx	lr
   19dc6:	bf00      	nop
   19dc8:	20003018 	.word	0x20003018

00019dcc <ull_scan_is_disabled_get>:
	if (!scan || scan->is_enabled) {
   19dcc:	4a04      	ldr	r2, [pc, #16]	; (19de0 <ull_scan_is_disabled_get+0x14>)
   19dce:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
   19dd2:	f003 0301 	and.w	r3, r3, #1
		return NULL;
   19dd6:	4303      	orrs	r3, r0
}
   19dd8:	bf0c      	ite	eq
   19dda:	4610      	moveq	r0, r2
   19ddc:	2000      	movne	r0, #0
   19dde:	4770      	bx	lr
   19de0:	20003018 	.word	0x20003018

00019de4 <cpr_active_check_and_set>:
	if (!conn_upd_curr) {
   19de4:	4b02      	ldr	r3, [pc, #8]	; (19df0 <cpr_active_check_and_set+0xc>)
   19de6:	681a      	ldr	r2, [r3, #0]
   19de8:	b902      	cbnz	r2, 19dec <cpr_active_check_and_set+0x8>
		conn_upd_curr = conn;
   19dea:	6018      	str	r0, [r3, #0]
}
   19dec:	4770      	bx	lr
   19dee:	bf00      	nop
   19df0:	20003060 	.word	0x20003060

00019df4 <ctrl_tx_rsp_mem_acquire>:
{
   19df4:	b538      	push	{r3, r4, r5, lr}
	if (conn->common.txn_lock) {
   19df6:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
   19dfa:	079b      	lsls	r3, r3, #30
{
   19dfc:	4604      	mov	r4, r0
   19dfe:	4615      	mov	r5, r2
	if (conn->common.txn_lock) {
   19e00:	d504      	bpl.n	19e0c <ctrl_tx_rsp_mem_acquire+0x18>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   19e02:	2301      	movs	r3, #1
		*err = 0U;
   19e04:	2000      	movs	r0, #0
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   19e06:	710b      	strb	r3, [r1, #4]
		*err = 0U;
   19e08:	6010      	str	r0, [r2, #0]
}
   19e0a:	bd38      	pop	{r3, r4, r5, pc}
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   19e0c:	4807      	ldr	r0, [pc, #28]	; (19e2c <ctrl_tx_rsp_mem_acquire+0x38>)
   19e0e:	f00c ff8d 	bl	26d2c <mem_acquire>
	if (!tx) {
   19e12:	b918      	cbnz	r0, 19e1c <ctrl_tx_rsp_mem_acquire+0x28>
		*err = -ENOBUFS;
   19e14:	f06f 0368 	mvn.w	r3, #104	; 0x68
   19e18:	602b      	str	r3, [r5, #0]
		return NULL;
   19e1a:	e7f6      	b.n	19e0a <ctrl_tx_rsp_mem_acquire+0x16>
	conn->common.txn_lock = 1U;
   19e1c:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   19e20:	f043 0302 	orr.w	r3, r3, #2
   19e24:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
	return tx;
   19e28:	e7ef      	b.n	19e0a <ctrl_tx_rsp_mem_acquire+0x16>
   19e2a:	bf00      	nop
   19e2c:	20003118 	.word	0x20003118

00019e30 <init_reset>:
{
   19e30:	b508      	push	{r3, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   19e32:	480d      	ldr	r0, [pc, #52]	; (19e68 <init_reset+0x38>)
   19e34:	4b0d      	ldr	r3, [pc, #52]	; (19e6c <init_reset+0x3c>)
   19e36:	2201      	movs	r2, #1
   19e38:	f44f 719c 	mov.w	r1, #312	; 0x138
   19e3c:	f00c ff4e 	bl	26cdc <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_BUF_ACL_TX_COUNT,
   19e40:	4b0b      	ldr	r3, [pc, #44]	; (19e70 <init_reset+0x40>)
   19e42:	2204      	movs	r2, #4
   19e44:	1898      	adds	r0, r3, r2
   19e46:	2124      	movs	r1, #36	; 0x24
   19e48:	f00c ff48 	bl	26cdc <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   19e4c:	4b09      	ldr	r3, [pc, #36]	; (19e74 <init_reset+0x44>)
   19e4e:	2204      	movs	r2, #4
   19e50:	1898      	adds	r0, r3, r2
   19e52:	212c      	movs	r1, #44	; 0x2c
   19e54:	f00c ff42 	bl	26cdc <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   19e58:	4b07      	ldr	r3, [pc, #28]	; (19e78 <init_reset+0x48>)
   19e5a:	2208      	movs	r2, #8
   19e5c:	1d18      	adds	r0, r3, #4
   19e5e:	4611      	mov	r1, r2
   19e60:	f00c ff3c 	bl	26cdc <mem_init>
}
   19e64:	2000      	movs	r0, #0
   19e66:	bd08      	pop	{r3, pc}
   19e68:	20001cb0 	.word	0x20001cb0
   19e6c:	2000305c 	.word	0x2000305c
   19e70:	20003084 	.word	0x20003084
   19e74:	20003118 	.word	0x20003118
   19e78:	200031cc 	.word	0x200031cc

00019e7c <ticker_stop_op_cb>:
{
   19e7c:	b510      	push	{r4, lr}
   19e7e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   19e80:	b160      	cbz	r0, 19e9c <ticker_stop_op_cb+0x20>
   19e82:	4a11      	ldr	r2, [pc, #68]	; (19ec8 <ticker_stop_op_cb+0x4c>)
   19e84:	4911      	ldr	r1, [pc, #68]	; (19ecc <ticker_stop_op_cb+0x50>)
   19e86:	4812      	ldr	r0, [pc, #72]	; (19ed0 <ticker_stop_op_cb+0x54>)
   19e88:	f640 0316 	movw	r3, #2070	; 0x816
   19e8c:	f007 f9ee 	bl	2126c <printk>
   19e90:	4040      	eors	r0, r0
   19e92:	f380 8811 	msr	BASEPRI, r0
   19e96:	f04f 0003 	mov.w	r0, #3
   19e9a:	df02      	svc	2
	mfy.param = param;
   19e9c:	4b0d      	ldr	r3, [pc, #52]	; (19ed4 <ticker_stop_op_cb+0x58>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   19e9e:	2200      	movs	r2, #0
   19ea0:	2101      	movs	r1, #1
   19ea2:	2002      	movs	r0, #2
	mfy.param = param;
   19ea4:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   19ea6:	f7fc fda9 	bl	169fc <mayfly_enqueue>
	LL_ASSERT(!ret);
   19eaa:	b160      	cbz	r0, 19ec6 <ticker_stop_op_cb+0x4a>
   19eac:	4a06      	ldr	r2, [pc, #24]	; (19ec8 <ticker_stop_op_cb+0x4c>)
   19eae:	490a      	ldr	r1, [pc, #40]	; (19ed8 <ticker_stop_op_cb+0x5c>)
   19eb0:	4807      	ldr	r0, [pc, #28]	; (19ed0 <ticker_stop_op_cb+0x54>)
   19eb2:	f640 031c 	movw	r3, #2076	; 0x81c
   19eb6:	f007 f9d9 	bl	2126c <printk>
   19eba:	4040      	eors	r0, r0
   19ebc:	f380 8811 	msr	BASEPRI, r0
   19ec0:	f04f 0003 	mov.w	r0, #3
   19ec4:	df02      	svc	2
}
   19ec6:	bd10      	pop	{r4, pc}
   19ec8:	0002f5e1 	.word	0x0002f5e1
   19ecc:	0002f7ba 	.word	0x0002f7ba
   19ed0:	0002b804 	.word	0x0002b804
   19ed4:	20000e3c 	.word	0x20000e3c
   19ed8:	0002f3a5 	.word	0x0002f3a5

00019edc <disabled_cb>:
{
   19edc:	b508      	push	{r3, lr}
	mfy.param = param;
   19ede:	4b0b      	ldr	r3, [pc, #44]	; (19f0c <disabled_cb+0x30>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   19ee0:	2200      	movs	r2, #0
	mfy.param = param;
   19ee2:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   19ee4:	4611      	mov	r1, r2
   19ee6:	2001      	movs	r0, #1
   19ee8:	f7fc fd88 	bl	169fc <mayfly_enqueue>
	LL_ASSERT(!ret);
   19eec:	b160      	cbz	r0, 19f08 <disabled_cb+0x2c>
   19eee:	4a08      	ldr	r2, [pc, #32]	; (19f10 <disabled_cb+0x34>)
   19ef0:	4908      	ldr	r1, [pc, #32]	; (19f14 <disabled_cb+0x38>)
   19ef2:	4809      	ldr	r0, [pc, #36]	; (19f18 <disabled_cb+0x3c>)
   19ef4:	f640 0348 	movw	r3, #2120	; 0x848
   19ef8:	f007 f9b8 	bl	2126c <printk>
   19efc:	4040      	eors	r0, r0
   19efe:	f380 8811 	msr	BASEPRI, r0
   19f02:	f04f 0003 	mov.w	r0, #3
   19f06:	df02      	svc	2
}
   19f08:	bd08      	pop	{r3, pc}
   19f0a:	bf00      	nop
   19f0c:	20000e1c 	.word	0x20000e1c
   19f10:	0002f5e1 	.word	0x0002f5e1
   19f14:	0002f3a5 	.word	0x0002f3a5
   19f18:	0002b804 	.word	0x0002b804

00019f1c <conn_disable>:
{
   19f1c:	b538      	push	{r3, r4, r5, lr}
   19f1e:	4604      	mov	r4, r0
	return hdr->ref;
   19f20:	f810 3b1c 	ldrb.w	r3, [r0], #28
	if (ull_ref_get(hdr)) {
   19f24:	b34b      	cbz	r3, 19f7a <conn_disable+0x5e>
		mfy.param = &conn->lll;
   19f26:	4d17      	ldr	r5, [pc, #92]	; (19f84 <conn_disable+0x68>)
		LL_ASSERT(!hdr->disabled_cb);
   19f28:	6963      	ldr	r3, [r4, #20]
		mfy.param = &conn->lll;
   19f2a:	60a8      	str	r0, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
   19f2c:	b163      	cbz	r3, 19f48 <conn_disable+0x2c>
   19f2e:	4a16      	ldr	r2, [pc, #88]	; (19f88 <conn_disable+0x6c>)
   19f30:	4916      	ldr	r1, [pc, #88]	; (19f8c <conn_disable+0x70>)
   19f32:	4817      	ldr	r0, [pc, #92]	; (19f90 <conn_disable+0x74>)
   19f34:	f640 0331 	movw	r3, #2097	; 0x831
   19f38:	f007 f998 	bl	2126c <printk>
   19f3c:	4040      	eors	r0, r0
   19f3e:	f380 8811 	msr	BASEPRI, r0
   19f42:	f04f 0003 	mov.w	r0, #3
   19f46:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   19f48:	68ab      	ldr	r3, [r5, #8]
   19f4a:	61a3      	str	r3, [r4, #24]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   19f4c:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   19f4e:	4b11      	ldr	r3, [pc, #68]	; (19f94 <conn_disable+0x78>)
   19f50:	6163      	str	r3, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   19f52:	4611      	mov	r1, r2
   19f54:	4b0b      	ldr	r3, [pc, #44]	; (19f84 <conn_disable+0x68>)
   19f56:	2001      	movs	r0, #1
   19f58:	f7fc fd50 	bl	169fc <mayfly_enqueue>
		LL_ASSERT(!ret);
   19f5c:	b160      	cbz	r0, 19f78 <conn_disable+0x5c>
   19f5e:	4a0a      	ldr	r2, [pc, #40]	; (19f88 <conn_disable+0x6c>)
   19f60:	490d      	ldr	r1, [pc, #52]	; (19f98 <conn_disable+0x7c>)
   19f62:	480b      	ldr	r0, [pc, #44]	; (19f90 <conn_disable+0x74>)
   19f64:	f640 0338 	movw	r3, #2104	; 0x838
   19f68:	f007 f980 	bl	2126c <printk>
   19f6c:	4040      	eors	r0, r0
   19f6e:	f380 8811 	msr	BASEPRI, r0
   19f72:	f04f 0003 	mov.w	r0, #3
   19f76:	df02      	svc	2
}
   19f78:	bd38      	pop	{r3, r4, r5, pc}
   19f7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&conn->lll);
   19f7e:	f7ff bfad 	b.w	19edc <disabled_cb>
   19f82:	bf00      	nop
   19f84:	20000e2c 	.word	0x20000e2c
   19f88:	0002f5e1 	.word	0x0002f5e1
   19f8c:	0002f4d9 	.word	0x0002f4d9
   19f90:	0002b804 	.word	0x0002b804
   19f94:	00019edd 	.word	0x00019edd
   19f98:	0002f3a5 	.word	0x0002f3a5

00019f9c <conn_setup_adv_scan_disabled_cb>:
{
   19f9c:	b508      	push	{r3, lr}
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   19f9e:	6883      	ldr	r3, [r0, #8]
   19fa0:	685a      	ldr	r2, [r3, #4]
	switch (lll->role) {
   19fa2:	7f53      	ldrb	r3, [r2, #29]
   19fa4:	09db      	lsrs	r3, r3, #7
{
   19fa6:	4601      	mov	r1, r0
	switch (lll->role) {
   19fa8:	d004      	beq.n	19fb4 <conn_setup_adv_scan_disabled_cb+0x18>
}
   19faa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		ull_periph_setup(rx, ftr, lll);
   19fae:	3108      	adds	r1, #8
   19fb0:	f7e7 ba42 	b.w	1438 <ull_periph_setup>
		LL_ASSERT(0);
   19fb4:	4a06      	ldr	r2, [pc, #24]	; (19fd0 <conn_setup_adv_scan_disabled_cb+0x34>)
   19fb6:	4907      	ldr	r1, [pc, #28]	; (19fd4 <conn_setup_adv_scan_disabled_cb+0x38>)
   19fb8:	4807      	ldr	r0, [pc, #28]	; (19fd8 <conn_setup_adv_scan_disabled_cb+0x3c>)
   19fba:	f240 7391 	movw	r3, #1937	; 0x791
   19fbe:	f007 f955 	bl	2126c <printk>
   19fc2:	4040      	eors	r0, r0
   19fc4:	f380 8811 	msr	BASEPRI, r0
   19fc8:	f04f 0003 	mov.w	r0, #3
   19fcc:	df02      	svc	2
}
   19fce:	bd08      	pop	{r3, pc}
   19fd0:	0002f5e1 	.word	0x0002f5e1
   19fd4:	0002cf80 	.word	0x0002cf80
   19fd8:	0002b804 	.word	0x0002b804

00019fdc <ticker_start_conn_op_cb>:
{
   19fdc:	b510      	push	{r4, lr}
   19fde:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   19fe0:	b160      	cbz	r0, 19ffc <ticker_start_conn_op_cb+0x20>
   19fe2:	4a10      	ldr	r2, [pc, #64]	; (1a024 <ticker_start_conn_op_cb+0x48>)
   19fe4:	4910      	ldr	r1, [pc, #64]	; (1a028 <ticker_start_conn_op_cb+0x4c>)
   19fe6:	4811      	ldr	r0, [pc, #68]	; (1a02c <ticker_start_conn_op_cb+0x50>)
   19fe8:	f44f 63ee 	mov.w	r3, #1904	; 0x770
   19fec:	f007 f93e 	bl	2126c <printk>
   19ff0:	4040      	eors	r0, r0
   19ff2:	f380 8811 	msr	BASEPRI, r0
   19ff6:	f04f 0003 	mov.w	r0, #3
   19ffa:	df02      	svc	2
	p = ull_update_unmark(param);
   19ffc:	4620      	mov	r0, r4
   19ffe:	f7ff f90b 	bl	19218 <ull_update_unmark>
	LL_ASSERT(p == param);
   1a002:	4284      	cmp	r4, r0
   1a004:	d00c      	beq.n	1a020 <ticker_start_conn_op_cb+0x44>
   1a006:	4a07      	ldr	r2, [pc, #28]	; (1a024 <ticker_start_conn_op_cb+0x48>)
   1a008:	4909      	ldr	r1, [pc, #36]	; (1a030 <ticker_start_conn_op_cb+0x54>)
   1a00a:	4808      	ldr	r0, [pc, #32]	; (1a02c <ticker_start_conn_op_cb+0x50>)
   1a00c:	f240 7373 	movw	r3, #1907	; 0x773
   1a010:	f007 f92c 	bl	2126c <printk>
   1a014:	4040      	eors	r0, r0
   1a016:	f380 8811 	msr	BASEPRI, r0
   1a01a:	f04f 0003 	mov.w	r0, #3
   1a01e:	df02      	svc	2
}
   1a020:	bd10      	pop	{r4, pc}
   1a022:	bf00      	nop
   1a024:	0002f5e1 	.word	0x0002f5e1
   1a028:	0002f7ba 	.word	0x0002f7ba
   1a02c:	0002b804 	.word	0x0002b804
   1a030:	0002f621 	.word	0x0002f621

0001a034 <ticker_stop_conn_op_cb>:
{
   1a034:	b510      	push	{r4, lr}
   1a036:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1a038:	b160      	cbz	r0, 1a054 <ticker_stop_conn_op_cb+0x20>
   1a03a:	4a10      	ldr	r2, [pc, #64]	; (1a07c <ticker_stop_conn_op_cb+0x48>)
   1a03c:	4910      	ldr	r1, [pc, #64]	; (1a080 <ticker_stop_conn_op_cb+0x4c>)
   1a03e:	4811      	ldr	r0, [pc, #68]	; (1a084 <ticker_stop_conn_op_cb+0x50>)
   1a040:	f240 7366 	movw	r3, #1894	; 0x766
   1a044:	f007 f912 	bl	2126c <printk>
   1a048:	4040      	eors	r0, r0
   1a04a:	f380 8811 	msr	BASEPRI, r0
   1a04e:	f04f 0003 	mov.w	r0, #3
   1a052:	df02      	svc	2
	p = ull_update_mark(param);
   1a054:	4620      	mov	r0, r4
   1a056:	f7ff f8d7 	bl	19208 <ull_update_mark>
	LL_ASSERT(p == param);
   1a05a:	4284      	cmp	r4, r0
   1a05c:	d00c      	beq.n	1a078 <ticker_stop_conn_op_cb+0x44>
   1a05e:	4a07      	ldr	r2, [pc, #28]	; (1a07c <ticker_stop_conn_op_cb+0x48>)
   1a060:	4909      	ldr	r1, [pc, #36]	; (1a088 <ticker_stop_conn_op_cb+0x54>)
   1a062:	4808      	ldr	r0, [pc, #32]	; (1a084 <ticker_stop_conn_op_cb+0x50>)
   1a064:	f240 7369 	movw	r3, #1897	; 0x769
   1a068:	f007 f900 	bl	2126c <printk>
   1a06c:	4040      	eors	r0, r0
   1a06e:	f380 8811 	msr	BASEPRI, r0
   1a072:	f04f 0003 	mov.w	r0, #3
   1a076:	df02      	svc	2
}
   1a078:	bd10      	pop	{r4, pc}
   1a07a:	bf00      	nop
   1a07c:	0002f5e1 	.word	0x0002f5e1
   1a080:	0002f7ba 	.word	0x0002f7ba
   1a084:	0002b804 	.word	0x0002b804
   1a088:	0002f621 	.word	0x0002f621

0001a08c <ticker_update_conn_op_cb>:
{
   1a08c:	b510      	push	{r4, lr}
   1a08e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   1a090:	b1a0      	cbz	r0, 1a0bc <ticker_update_conn_op_cb+0x30>
   1a092:	f7ff f8cf 	bl	19234 <ull_update_mark_get>
   1a096:	4284      	cmp	r4, r0
   1a098:	d010      	beq.n	1a0bc <ticker_update_conn_op_cb+0x30>
   1a09a:	f7ff f8af 	bl	191fc <ull_disable_mark_get>
   1a09e:	4284      	cmp	r4, r0
   1a0a0:	d00c      	beq.n	1a0bc <ticker_update_conn_op_cb+0x30>
   1a0a2:	4a07      	ldr	r2, [pc, #28]	; (1a0c0 <ticker_update_conn_op_cb+0x34>)
   1a0a4:	4907      	ldr	r1, [pc, #28]	; (1a0c4 <ticker_update_conn_op_cb+0x38>)
   1a0a6:	4808      	ldr	r0, [pc, #32]	; (1a0c8 <ticker_update_conn_op_cb+0x3c>)
   1a0a8:	f240 735d 	movw	r3, #1885	; 0x75d
   1a0ac:	f007 f8de 	bl	2126c <printk>
   1a0b0:	4040      	eors	r0, r0
   1a0b2:	f380 8811 	msr	BASEPRI, r0
   1a0b6:	f04f 0003 	mov.w	r0, #3
   1a0ba:	df02      	svc	2
}
   1a0bc:	bd10      	pop	{r4, pc}
   1a0be:	bf00      	nop
   1a0c0:	0002f5e1 	.word	0x0002f5e1
   1a0c4:	0002f62c 	.word	0x0002f62c
   1a0c8:	0002b804 	.word	0x0002b804

0001a0cc <feat_get>:
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   1a0cc:	6803      	ldr	r3, [r0, #0]
   1a0ce:	6841      	ldr	r1, [r0, #4]

	feat = sys_get_le64(features) | ~LL_FEAT_BIT_MASK_VALID;
	feat &= LL_FEAT_BIT_MASK;

	return feat;
}
   1a0d0:	4802      	ldr	r0, [pc, #8]	; (1a0dc <feat_get+0x10>)
   1a0d2:	f001 010f 	and.w	r1, r1, #15
   1a0d6:	4318      	orrs	r0, r3
   1a0d8:	4770      	bx	lr
   1a0da:	bf00      	nop
   1a0dc:	087830d0 	.word	0x087830d0

0001a0e0 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   1a0e0:	4801      	ldr	r0, [pc, #4]	; (1a0e8 <ll_conn_acquire+0x8>)
   1a0e2:	f00c be23 	b.w	26d2c <mem_acquire>
   1a0e6:	bf00      	nop
   1a0e8:	2000305c 	.word	0x2000305c

0001a0ec <ll_conn_release>:
	mem_release(conn, &conn_free);
   1a0ec:	4901      	ldr	r1, [pc, #4]	; (1a0f4 <ll_conn_release+0x8>)
   1a0ee:	f00c be36 	b.w	26d5e <mem_release>
   1a0f2:	bf00      	nop
   1a0f4:	2000305c 	.word	0x2000305c

0001a0f8 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   1a0f8:	4902      	ldr	r1, [pc, #8]	; (1a104 <ll_conn_handle_get+0xc>)
   1a0fa:	f44f 729c 	mov.w	r2, #312	; 0x138
   1a0fe:	f00c be46 	b.w	26d8e <mem_index_get>
   1a102:	bf00      	nop
   1a104:	20001cb0 	.word	0x20001cb0

0001a108 <tx_lll_flush>:
{
   1a108:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	conn = HDR_LLL2ULL(lll);
   1a10c:	6804      	ldr	r4, [r0, #0]
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   1a10e:	4e30      	ldr	r6, [pc, #192]	; (1a1d0 <tx_lll_flush+0xc8>)
{
   1a110:	4605      	mov	r5, r0
	handle = ll_conn_handle_get(conn);
   1a112:	4620      	mov	r0, r4
   1a114:	f7ff fff0 	bl	1a0f8 <ll_conn_handle_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   1a118:	f105 083c 	add.w	r8, r5, #60	; 0x3c
	lll_conn_flush(handle, lll);
   1a11c:	4629      	mov	r1, r5
   1a11e:	f00d fe51 	bl	27dc4 <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   1a122:	6c28      	ldr	r0, [r5, #64]	; 0x40
   1a124:	aa01      	add	r2, sp, #4
   1a126:	4641      	mov	r1, r8
   1a128:	f00c fe6d 	bl	26e06 <memq_dequeue>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1a12c:	1d37      	adds	r7, r6, #4
	while (link) {
   1a12e:	b9f0      	cbnz	r0, 1a16e <tx_lll_flush+0x66>
	LL_ASSERT(rx->hdr.link);
   1a130:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
	rx = (void *)&conn->llcp_terminate.node_rx;
   1a134:	f104 05d4 	add.w	r5, r4, #212	; 0xd4
	LL_ASSERT(rx->hdr.link);
   1a138:	b963      	cbnz	r3, 1a154 <tx_lll_flush+0x4c>
   1a13a:	4a26      	ldr	r2, [pc, #152]	; (1a1d4 <tx_lll_flush+0xcc>)
   1a13c:	4926      	ldr	r1, [pc, #152]	; (1a1d8 <tx_lll_flush+0xd0>)
   1a13e:	4827      	ldr	r0, [pc, #156]	; (1a1dc <tx_lll_flush+0xd4>)
   1a140:	f640 0376 	movw	r3, #2166	; 0x876
   1a144:	f007 f892 	bl	2126c <printk>
   1a148:	4040      	eors	r0, r0
   1a14a:	f380 8811 	msr	BASEPRI, r0
   1a14e:	f04f 0003 	mov.w	r0, #3
   1a152:	df02      	svc	2
	rx->hdr.link = NULL;
   1a154:	2300      	movs	r3, #0
	link = rx->hdr.link;
   1a156:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
	rx->hdr.link = NULL;
   1a15a:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
	ull_rx_put(link, rx);
   1a15e:	4629      	mov	r1, r5
   1a160:	f7ff f90e 	bl	19380 <ull_rx_put>
	ull_rx_sched();
   1a164:	f7ff f91c 	bl	193a0 <ull_rx_sched>
}
   1a168:	b002      	add	sp, #8
   1a16a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   1a16e:	78f3      	ldrb	r3, [r6, #3]
	if (last == count) {
   1a170:	f896 e001 	ldrb.w	lr, [r6, #1]
   1a174:	f896 c002 	ldrb.w	ip, [r6, #2]
   1a178:	7832      	ldrb	r2, [r6, #0]
	last = last + 1;
   1a17a:	1c59      	adds	r1, r3, #1
   1a17c:	b2c9      	uxtb	r1, r1
		last = 0U;
   1a17e:	458e      	cmp	lr, r1
   1a180:	bf08      	it	eq
   1a182:	2100      	moveq	r1, #0
	if (last == first) {
   1a184:	458c      	cmp	ip, r1
   1a186:	d003      	beq.n	1a190 <tx_lll_flush+0x88>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1a188:	fb13 f302 	smulbb	r3, r3, r2
		LL_ASSERT(lll_tx);
   1a18c:	18fa      	adds	r2, r7, r3
   1a18e:	d10f      	bne.n	1a1b0 <tx_lll_flush+0xa8>
   1a190:	4a10      	ldr	r2, [pc, #64]	; (1a1d4 <tx_lll_flush+0xcc>)
   1a192:	4913      	ldr	r1, [pc, #76]	; (1a1e0 <tx_lll_flush+0xd8>)
   1a194:	4811      	ldr	r0, [pc, #68]	; (1a1dc <tx_lll_flush+0xd4>)
   1a196:	f640 0362 	movw	r3, #2146	; 0x862
   1a19a:	f007 f867 	bl	2126c <printk>
   1a19e:	4040      	eors	r0, r0
   1a1a0:	f380 8811 	msr	BASEPRI, r0
   1a1a4:	f04f 0003 	mov.w	r0, #3
   1a1a8:	df02      	svc	2
		lll_tx->handle = LLL_HANDLE_INVALID;
   1a1aa:	2300      	movs	r3, #0
   1a1ac:	801b      	strh	r3, [r3, #0]
   1a1ae:	deff      	udf	#255	; 0xff
   1a1b0:	f64f 7cff 	movw	ip, #65535	; 0xffff
   1a1b4:	f827 c003 	strh.w	ip, [r7, r3]
		lll_tx->node = tx;
   1a1b8:	9b01      	ldr	r3, [sp, #4]
   1a1ba:	6053      	str	r3, [r2, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   1a1bc:	681a      	ldr	r2, [r3, #0]
   1a1be:	6002      	str	r2, [r0, #0]
		tx->next = link;
   1a1c0:	6018      	str	r0, [r3, #0]
	*last = idx; /* Commit: Update write index */
   1a1c2:	70f1      	strb	r1, [r6, #3]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   1a1c4:	6c28      	ldr	r0, [r5, #64]	; 0x40
   1a1c6:	aa01      	add	r2, sp, #4
   1a1c8:	4641      	mov	r1, r8
   1a1ca:	f00c fe1c 	bl	26e06 <memq_dequeue>
   1a1ce:	e7ae      	b.n	1a12e <tx_lll_flush+0x26>
   1a1d0:	20000da4 	.word	0x20000da4
   1a1d4:	0002f5e1 	.word	0x0002f5e1
   1a1d8:	0002f6b1 	.word	0x0002f6b1
   1a1dc:	0002b804 	.word	0x0002b804
   1a1e0:	0002f67d 	.word	0x0002f67d

0001a1e4 <ll_conn_get>:
{
   1a1e4:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1a1e6:	f44f 719c 	mov.w	r1, #312	; 0x138
   1a1ea:	4801      	ldr	r0, [pc, #4]	; (1a1f0 <ll_conn_get+0xc>)
   1a1ec:	f00c bdcc 	b.w	26d88 <mem_get>
   1a1f0:	20001cb0 	.word	0x20001cb0

0001a1f4 <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   1a1f4:	4801      	ldr	r0, [pc, #4]	; (1a1fc <ll_tx_mem_acquire+0x8>)
   1a1f6:	f00c bd99 	b.w	26d2c <mem_acquire>
   1a1fa:	bf00      	nop
   1a1fc:	20003084 	.word	0x20003084

0001a200 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   1a200:	4901      	ldr	r1, [pc, #4]	; (1a208 <ll_tx_mem_release+0x8>)
   1a202:	f00c bdac 	b.w	26d5e <mem_release>
   1a206:	bf00      	nop
   1a208:	20003084 	.word	0x20003084

0001a20c <ll_tx_mem_enqueue>:
{
   1a20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a20e:	4606      	mov	r6, r0
   1a210:	460f      	mov	r7, r1
	conn = ll_connected_get(handle);
   1a212:	f00d fade 	bl	277d2 <ll_connected_get>
	if (!conn) {
   1a216:	4604      	mov	r4, r0
   1a218:	b338      	cbz	r0, 1a26a <ll_tx_mem_enqueue+0x5e>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   1a21a:	4a17      	ldr	r2, [pc, #92]	; (1a278 <ll_tx_mem_enqueue+0x6c>)
   1a21c:	78d5      	ldrb	r5, [r2, #3]
	if (last == count) {
   1a21e:	f892 c001 	ldrb.w	ip, [r2, #1]
   1a222:	7891      	ldrb	r1, [r2, #2]
   1a224:	7810      	ldrb	r0, [r2, #0]
	last = last + 1;
   1a226:	1c6b      	adds	r3, r5, #1
   1a228:	b2db      	uxtb	r3, r3
		last = 0U;
   1a22a:	459c      	cmp	ip, r3
   1a22c:	bf08      	it	eq
   1a22e:	2300      	moveq	r3, #0
	if (last == first) {
   1a230:	4299      	cmp	r1, r3
   1a232:	d01d      	beq.n	1a270 <ll_tx_mem_enqueue+0x64>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1a234:	1d11      	adds	r1, r2, #4
   1a236:	fb15 f500 	smulbb	r5, r5, r0
	if (!lll_tx) {
   1a23a:	1948      	adds	r0, r1, r5
   1a23c:	d018      	beq.n	1a270 <ll_tx_mem_enqueue+0x64>
	lll_tx->handle = handle;
   1a23e:	534e      	strh	r6, [r1, r5]
	lll_tx->node = tx;
   1a240:	6047      	str	r7, [r0, #4]
	*last = idx; /* Commit: Update write index */
   1a242:	70d3      	strb	r3, [r2, #3]
   1a244:	7823      	ldrb	r3, [r4, #0]
	if (ull_ref_get(&conn->ull)) {
   1a246:	b133      	cbz	r3, 1a256 <ll_tx_mem_enqueue+0x4a>
		mfy.param = conn;
   1a248:	4b0c      	ldr	r3, [pc, #48]	; (1a27c <ll_tx_mem_enqueue+0x70>)
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   1a24a:	2200      	movs	r2, #0
   1a24c:	2101      	movs	r1, #1
   1a24e:	2003      	movs	r0, #3
		mfy.param = conn;
   1a250:	609c      	str	r4, [r3, #8]
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   1a252:	f7fc fbd3 	bl	169fc <mayfly_enqueue>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1a256:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1a25a:	2b00      	cmp	r3, #0
   1a25c:	da03      	bge.n	1a266 <ll_tx_mem_enqueue+0x5a>
		ull_periph_latency_cancel(conn, handle);
   1a25e:	4631      	mov	r1, r6
   1a260:	4620      	mov	r0, r4
   1a262:	f001 f847 	bl	1b2f4 <ull_periph_latency_cancel>
	return 0;
   1a266:	2000      	movs	r0, #0
   1a268:	e001      	b.n	1a26e <ll_tx_mem_enqueue+0x62>
		return -EINVAL;
   1a26a:	f06f 0015 	mvn.w	r0, #21
}
   1a26e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   1a270:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1a274:	e7fb      	b.n	1a26e <ll_tx_mem_enqueue+0x62>
   1a276:	bf00      	nop
   1a278:	20000df0 	.word	0x20000df0
   1a27c:	20000e4c 	.word	0x20000e4c

0001a280 <ll_terminate_ind_send>:
{
   1a280:	b538      	push	{r3, r4, r5, lr}
   1a282:	4605      	mov	r5, r0
   1a284:	460c      	mov	r4, r1
	conn = ll_connected_get(handle);
   1a286:	f00d faa4 	bl	277d2 <ll_connected_get>
	if (!conn) {
   1a28a:	b310      	cbz	r0, 1a2d2 <ll_terminate_ind_send+0x52>
	if (conn->llcp_terminate.req != conn->llcp_terminate.ack) {
   1a28c:	f890 30d0 	ldrb.w	r3, [r0, #208]	; 0xd0
   1a290:	f890 20d1 	ldrb.w	r2, [r0, #209]	; 0xd1
   1a294:	429a      	cmp	r2, r3
   1a296:	d11e      	bne.n	1a2d6 <ll_terminate_ind_send+0x56>
	switch (reason) {
   1a298:	2c1a      	cmp	r4, #26
   1a29a:	d808      	bhi.n	1a2ae <ll_terminate_ind_send+0x2e>
   1a29c:	2c04      	cmp	r4, #4
   1a29e:	d904      	bls.n	1a2aa <ll_terminate_ind_send+0x2a>
   1a2a0:	490e      	ldr	r1, [pc, #56]	; (1a2dc <ll_terminate_ind_send+0x5c>)
   1a2a2:	2201      	movs	r2, #1
   1a2a4:	40a2      	lsls	r2, r4
   1a2a6:	420a      	tst	r2, r1
   1a2a8:	d105      	bne.n	1a2b6 <ll_terminate_ind_send+0x36>
   1a2aa:	2012      	movs	r0, #18
   1a2ac:	e012      	b.n	1a2d4 <ll_terminate_ind_send+0x54>
   1a2ae:	2c29      	cmp	r4, #41	; 0x29
   1a2b0:	d001      	beq.n	1a2b6 <ll_terminate_ind_send+0x36>
   1a2b2:	2c3b      	cmp	r4, #59	; 0x3b
   1a2b4:	d1f9      	bne.n	1a2aa <ll_terminate_ind_send+0x2a>
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
   1a2b6:	3301      	adds	r3, #1
   1a2b8:	f880 30d0 	strb.w	r3, [r0, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1a2bc:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	conn->llcp_terminate.reason_own = reason;
   1a2c0:	f880 40d2 	strb.w	r4, [r0, #210]	; 0xd2
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1a2c4:	2b00      	cmp	r3, #0
   1a2c6:	da02      	bge.n	1a2ce <ll_terminate_ind_send+0x4e>
		ull_periph_latency_cancel(conn, handle);
   1a2c8:	4629      	mov	r1, r5
   1a2ca:	f001 f813 	bl	1b2f4 <ull_periph_latency_cancel>
	return 0;
   1a2ce:	2000      	movs	r0, #0
   1a2d0:	e000      	b.n	1a2d4 <ll_terminate_ind_send+0x54>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a2d2:	2002      	movs	r0, #2
}
   1a2d4:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a2d6:	200c      	movs	r0, #12
   1a2d8:	e7fc      	b.n	1a2d4 <ll_terminate_ind_send+0x54>
   1a2da:	bf00      	nop
   1a2dc:	04380020 	.word	0x04380020

0001a2e0 <ull_conn_reset>:
{
   1a2e0:	b510      	push	{r4, lr}
	conn = ll_conn_get(handle);
   1a2e2:	2000      	movs	r0, #0
   1a2e4:	f7ff ff7e 	bl	1a1e4 <ll_conn_get>
   1a2e8:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
   1a2ea:	f100 021c 	add.w	r2, r0, #28
   1a2ee:	4601      	mov	r1, r0
   1a2f0:	2005      	movs	r0, #5
   1a2f2:	f7fe ffe3 	bl	192bc <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   1a2f6:	b170      	cbz	r0, 1a316 <ull_conn_reset+0x36>
   1a2f8:	3078      	adds	r0, #120	; 0x78
   1a2fa:	d00c      	beq.n	1a316 <ull_conn_reset+0x36>
   1a2fc:	4a0d      	ldr	r2, [pc, #52]	; (1a334 <ull_conn_reset+0x54>)
   1a2fe:	490e      	ldr	r1, [pc, #56]	; (1a338 <ull_conn_reset+0x58>)
   1a300:	480e      	ldr	r0, [pc, #56]	; (1a33c <ull_conn_reset+0x5c>)
   1a302:	f240 739f 	movw	r3, #1951	; 0x79f
   1a306:	f006 ffb1 	bl	2126c <printk>
   1a30a:	4040      	eors	r0, r0
   1a30c:	f380 8811 	msr	BASEPRI, r0
   1a310:	f04f 0003 	mov.w	r0, #3
   1a314:	df02      	svc	2
	MFIFO_INIT(conn_tx);
   1a316:	4a0a      	ldr	r2, [pc, #40]	; (1a340 <ull_conn_reset+0x60>)
	conn->lll.handle = LLL_HANDLE_INVALID;
   1a318:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a31c:	8523      	strh	r3, [r4, #40]	; 0x28
	conn->lll.link_tx_free = NULL;
   1a31e:	2300      	movs	r3, #0
	MFIFO_INIT(conn_tx);
   1a320:	8053      	strh	r3, [r2, #2]
	MFIFO_INIT(conn_ack);
   1a322:	4a08      	ldr	r2, [pc, #32]	; (1a344 <ull_conn_reset+0x64>)
	conn->lll.link_tx_free = NULL;
   1a324:	66a3      	str	r3, [r4, #104]	; 0x68
	MFIFO_INIT(conn_ack);
   1a326:	8053      	strh	r3, [r2, #2]
	conn_upd_curr = NULL;
   1a328:	4a07      	ldr	r2, [pc, #28]	; (1a348 <ull_conn_reset+0x68>)
}
   1a32a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	conn_upd_curr = NULL;
   1a32e:	6013      	str	r3, [r2, #0]
	err = init_reset();
   1a330:	f7ff bd7e 	b.w	19e30 <init_reset>
   1a334:	0002f5e1 	.word	0x0002f5e1
   1a338:	0002f5b8 	.word	0x0002f5b8
   1a33c:	0002b804 	.word	0x0002b804
   1a340:	20000df0 	.word	0x20000df0
   1a344:	20000da4 	.word	0x20000da4
   1a348:	20003060 	.word	0x20003060

0001a34c <ull_conn_setup>:
{
   1a34c:	b538      	push	{r3, r4, r5, lr}
	hdr = HDR_LLL2ULL(ftr->param);
   1a34e:	688b      	ldr	r3, [r1, #8]
	rx->link = rx_link;
   1a350:	6008      	str	r0, [r1, #0]
	hdr = HDR_LLL2ULL(ftr->param);
   1a352:	681d      	ldr	r5, [r3, #0]
   1a354:	782b      	ldrb	r3, [r5, #0]
{
   1a356:	460c      	mov	r4, r1
	if (ull_ref_get(hdr)) {
   1a358:	b193      	cbz	r3, 1a380 <ull_conn_setup+0x34>
		LL_ASSERT(!hdr->disabled_cb);
   1a35a:	696b      	ldr	r3, [r5, #20]
   1a35c:	b163      	cbz	r3, 1a378 <ull_conn_setup+0x2c>
   1a35e:	4a0b      	ldr	r2, [pc, #44]	; (1a38c <ull_conn_setup+0x40>)
   1a360:	490b      	ldr	r1, [pc, #44]	; (1a390 <ull_conn_setup+0x44>)
   1a362:	480c      	ldr	r0, [pc, #48]	; (1a394 <ull_conn_setup+0x48>)
   1a364:	f240 3372 	movw	r3, #882	; 0x372
   1a368:	f006 ff80 	bl	2126c <printk>
   1a36c:	4040      	eors	r0, r0
   1a36e:	f380 8811 	msr	BASEPRI, r0
   1a372:	f04f 0003 	mov.w	r0, #3
   1a376:	df02      	svc	2
		hdr->disabled_cb = conn_setup_adv_scan_disabled_cb;
   1a378:	4b07      	ldr	r3, [pc, #28]	; (1a398 <ull_conn_setup+0x4c>)
		hdr->disabled_param = rx;
   1a37a:	61ac      	str	r4, [r5, #24]
		hdr->disabled_cb = conn_setup_adv_scan_disabled_cb;
   1a37c:	616b      	str	r3, [r5, #20]
}
   1a37e:	bd38      	pop	{r3, r4, r5, pc}
   1a380:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		conn_setup_adv_scan_disabled_cb(rx);
   1a384:	4608      	mov	r0, r1
   1a386:	f7ff be09 	b.w	19f9c <conn_setup_adv_scan_disabled_cb>
   1a38a:	bf00      	nop
   1a38c:	0002f5e1 	.word	0x0002f5e1
   1a390:	0002f4d9 	.word	0x0002f4d9
   1a394:	0002b804 	.word	0x0002b804
   1a398:	00019f9d 	.word	0x00019f9d

0001a39c <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
   1a39c:	680b      	ldr	r3, [r1, #0]
{
   1a39e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1a3a2:	4607      	mov	r7, r0
	conn = ll_connected_get((*rx)->hdr.handle);
   1a3a4:	88d8      	ldrh	r0, [r3, #6]
{
   1a3a6:	460e      	mov	r6, r1
	conn = ll_connected_get((*rx)->hdr.handle);
   1a3a8:	f00d fa13 	bl	277d2 <ll_connected_get>
	if (!conn) {
   1a3ac:	6835      	ldr	r5, [r6, #0]
   1a3ae:	4604      	mov	r4, r0
   1a3b0:	b910      	cbnz	r0, 1a3b8 <ull_conn_rx+0x1c>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1a3b2:	2301      	movs	r3, #1
   1a3b4:	712b      	strb	r3, [r5, #4]
	return 0;
   1a3b6:	e007      	b.n	1a3c8 <ull_conn_rx+0x2c>
	switch (pdu_rx->ll_id) {
   1a3b8:	7f28      	ldrb	r0, [r5, #28]
   1a3ba:	f000 0003 	and.w	r0, r0, #3
   1a3be:	2803      	cmp	r0, #3
   1a3c0:	d004      	beq.n	1a3cc <ull_conn_rx+0x30>
   1a3c2:	2800      	cmp	r0, #0
   1a3c4:	f000 83a6 	beq.w	1ab14 <ull_conn_rx+0x778>
   1a3c8:	2000      	movs	r0, #0
   1a3ca:	e149      	b.n	1a660 <ull_conn_rx+0x2c4>
			  struct pdu_data *pdu_rx, struct ll_conn *conn)
{
	int nack = 0;
	uint8_t opcode;

	opcode = pdu_rx->llctrl.opcode;
   1a3cc:	f895 801f 	ldrb.w	r8, [r5, #31]

		return 0;
	}
#endif /* CONFIG_BT_CTLR_LE_ENC */

	switch (opcode) {
   1a3d0:	f1b8 0f11 	cmp.w	r8, #17
   1a3d4:	f200 83b4 	bhi.w	1ab40 <ull_conn_rx+0x7a4>
   1a3d8:	e8df f018 	tbh	[pc, r8, lsl #1]
   1a3dc:	00830012 	.word	0x00830012
   1a3e0:	03b200b3 	.word	0x03b200b3
   1a3e4:	03b203b2 	.word	0x03b203b2
   1a3e8:	033a03b2 	.word	0x033a03b2
   1a3ec:	011500bc 	.word	0x011500bc
   1a3f0:	03b203b2 	.word	0x03b203b2
   1a3f4:	03b20145 	.word	0x03b20145
   1a3f8:	019603b2 	.word	0x019603b2
   1a3fc:	02e203b2 	.word	0x02e203b2
#if defined(CONFIG_BT_PERIPHERAL)
	case PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND:
	{
		uint8_t err;

		if (!conn->lll.role ||
   1a400:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1a404:	2b00      	cmp	r3, #0
   1a406:	f280 839b 	bge.w	1ab40 <ull_conn_rx+0x7a4>
   1a40a:	7f6b      	ldrb	r3, [r5, #29]
   1a40c:	2b0c      	cmp	r3, #12
   1a40e:	f040 8397 	bne.w	1ab40 <ull_conn_rx+0x7a4>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   1a412:	f8b5 1029 	ldrh.w	r1, [r5, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   1a416:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   1a418:	1acb      	subs	r3, r1, r3
   1a41a:	041b      	lsls	r3, r3, #16
   1a41c:	d503      	bpl.n	1a426 <ull_conn_rx+0x8a>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1a41e:	2301      	movs	r3, #1
   1a420:	712b      	strb	r3, [r5, #4]
		err = BT_HCI_ERR_INSTANT_PASSED;
   1a422:	2328      	movs	r3, #40	; 0x28
   1a424:	e00b      	b.n	1a43e <ull_conn_rx+0xa2>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1a426:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   1a42a:	f894 2089 	ldrb.w	r2, [r4, #137]	; 0x89
   1a42e:	1a9b      	subs	r3, r3, r2
   1a430:	f003 0303 	and.w	r3, r3, #3
   1a434:	2b02      	cmp	r3, #2
   1a436:	d105      	bne.n	1a444 <ull_conn_rx+0xa8>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1a438:	2301      	movs	r3, #1
   1a43a:	712b      	strb	r3, [r5, #4]
		err = BT_HCI_ERR_DIFF_TRANS_COLLISION;
   1a43c:	232a      	movs	r3, #42	; 0x2a
			goto ull_conn_rx_unknown_rsp_send;
		}

		err = chan_map_upd_recv(conn, *rx, pdu_rx);
		if (err) {
			conn->llcp_terminate.reason_final = err;
   1a43e:	f884 30d3 	strb.w	r3, [r4, #211]	; 0xd3
   1a442:	e7c1      	b.n	1a3c8 <ull_conn_rx+0x2c>
	cpr_active_check_and_set(conn);
   1a444:	4620      	mov	r0, r4
   1a446:	f7ff fccd 	bl	19de4 <cpr_active_check_and_set>
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   1a44a:	f895 3020 	ldrb.w	r3, [r5, #32]
   1a44e:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) *
   1a452:	f8b5 3021 	ldrh.w	r3, [r5, #33]	; 0x21
   1a456:	f240 42e2 	movw	r2, #1250	; 0x4e2
   1a45a:	4353      	muls	r3, r2
	conn->llcp_cu.win_offset_us =
   1a45c:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   1a460:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
   1a464:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   1a468:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp_cu.interval =
   1a46c:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
   1a470:	f895 2026 	ldrb.w	r2, [r5, #38]	; 0x26
   1a474:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   1a478:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp_cu.latency =
   1a47c:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   1a480:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
   1a484:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
	conn->llcp.conn_upd.instant = instant;
   1a488:	f8a4 108c 	strh.w	r1, [r4, #140]	; 0x8c
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   1a48c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp_cu.timeout =
   1a490:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   1a494:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
   1a498:	f023 030f 	bic.w	r3, r3, #15
   1a49c:	f043 0308 	orr.w	r3, r3, #8
   1a4a0:	f884 309e 	strb.w	r3, [r4, #158]	; 0x9e
	conn->llcp_cu.ack--;
   1a4a4:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
   1a4a8:	3b01      	subs	r3, #1
   1a4aa:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
	link->mem = conn->llcp_rx;
   1a4ae:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1a4b2:	607b      	str	r3, [r7, #4]
	(*rx)->hdr.link = link;
   1a4b4:	6833      	ldr	r3, [r6, #0]
   1a4b6:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   1a4b8:	6833      	ldr	r3, [r6, #0]
   1a4ba:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*rx = NULL;
   1a4be:	2300      	movs	r3, #0
   1a4c0:	6033      	str	r3, [r6, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   1a4c2:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
   1a4c6:	f894 30f5 	ldrb.w	r3, [r4, #245]	; 0xf5
   1a4ca:	4293      	cmp	r3, r2
   1a4cc:	d007      	beq.n	1a4de <ull_conn_rx+0x142>
	    ((conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) ||
   1a4ce:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   1a4d2:	f003 030e 	and.w	r3, r3, #14
   1a4d6:	2b04      	cmp	r3, #4
   1a4d8:	d101      	bne.n	1a4de <ull_conn_rx+0x142>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1a4da:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
				break;
			}
		}

		/* Procedure complete */
		conn->procedure_expire = 0U;
   1a4de:	2000      	movs	r0, #0
   1a4e0:	e0bc      	b.n	1a65c <ull_conn_rx+0x2c0>
		if (!conn->lll.role ||
   1a4e2:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1a4e6:	2b00      	cmp	r3, #0
   1a4e8:	f280 832a 	bge.w	1ab40 <ull_conn_rx+0x7a4>
   1a4ec:	7f6b      	ldrb	r3, [r5, #29]
   1a4ee:	2b08      	cmp	r3, #8
   1a4f0:	f040 8326 	bne.w	1ab40 <ull_conn_rx+0x7a4>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   1a4f4:	f8b5 6025 	ldrh.w	r6, [r5, #37]	; 0x25
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   1a4f8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   1a4fa:	1af3      	subs	r3, r6, r3
   1a4fc:	0418      	lsls	r0, r3, #16
   1a4fe:	d48e      	bmi.n	1a41e <ull_conn_rx+0x82>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1a500:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   1a504:	f894 2089 	ldrb.w	r2, [r4, #137]	; 0x89
   1a508:	1a9b      	subs	r3, r3, r2
   1a50a:	f003 0303 	and.w	r3, r3, #3
   1a50e:	2b02      	cmp	r3, #2
   1a510:	d092      	beq.n	1a438 <ull_conn_rx+0x9c>
	memcpy(&conn->llcp.chan_map.chm[0], &pdu->llctrl.chan_map_ind.chm[0],
   1a512:	2205      	movs	r2, #5
   1a514:	f105 0120 	add.w	r1, r5, #32
   1a518:	f104 008d 	add.w	r0, r4, #141	; 0x8d
   1a51c:	f009 fc44 	bl	23da8 <memcpy>
	conn->llcp.chan_map.initiate = 0U;
   1a520:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
	conn->llcp.chan_map.instant = instant;
   1a524:	f8a4 6092 	strh.w	r6, [r4, #146]	; 0x92
	conn->llcp.chan_map.initiate = 0U;
   1a528:	f36f 0300 	bfc	r3, #0, #1
   1a52c:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
	conn->llcp_type = LLCP_CHAN_MAP;
   1a530:	2302      	movs	r3, #2
   1a532:	f884 308a 	strb.w	r3, [r4, #138]	; 0x8a
	conn->llcp_ack -= 2U;
   1a536:	f894 3089 	ldrb.w	r3, [r4, #137]	; 0x89
   1a53a:	3b02      	subs	r3, #2
   1a53c:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1a540:	e737      	b.n	1a3b2 <ull_conn_rx+0x16>
		if (PDU_DATA_LLCTRL_LEN(terminate_ind) != pdu_rx->len) {
   1a542:	7f6b      	ldrb	r3, [r5, #29]
   1a544:	2b02      	cmp	r3, #2
   1a546:	f040 82fb 	bne.w	1ab40 <ull_conn_rx+0x7a4>
	conn->llcp_terminate.reason_final =
   1a54a:	f895 3020 	ldrb.w	r3, [r5, #32]
   1a54e:	f884 30d3 	strb.w	r3, [r4, #211]	; 0xd3
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1a552:	e72e      	b.n	1a3b2 <ull_conn_rx+0x16>
		if (!conn->lll.role ||
   1a554:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1a558:	2b00      	cmp	r3, #0
   1a55a:	f280 82f1 	bge.w	1ab40 <ull_conn_rx+0x7a4>
   1a55e:	f895 901d 	ldrb.w	r9, [r5, #29]
   1a562:	f1b9 0f09 	cmp.w	r9, #9
   1a566:	f040 82eb 	bne.w	1ab40 <ull_conn_rx+0x7a4>
	tx = ctrl_tx_rsp_mem_acquire(conn, rx, &err);
   1a56a:	aa01      	add	r2, sp, #4
   1a56c:	4629      	mov	r1, r5
   1a56e:	4620      	mov	r0, r4
   1a570:	f7ff fc40 	bl	19df4 <ctrl_tx_rsp_mem_acquire>
	if (!tx) {
   1a574:	4606      	mov	r6, r0
   1a576:	b908      	cbnz	r0, 1a57c <ull_conn_rx+0x1e0>
		return err;
   1a578:	9801      	ldr	r0, [sp, #4]
   1a57a:	e071      	b.n	1a660 <ull_conn_rx+0x2c4>
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   1a57c:	f105 0720 	add.w	r7, r5, #32
   1a580:	4638      	mov	r0, r7
   1a582:	f7ff fda3 	bl	1a0cc <feat_get>
   1a586:	e9d4 232e 	ldrd	r2, r3, [r4, #184]	; 0xb8
   1a58a:	4002      	ands	r2, r0
   1a58c:	400b      	ands	r3, r1
   1a58e:	e9c4 232e 	strd	r2, r3, [r4, #184]	; 0xb8
		feat_land_octet0(feat_get(&req->features[0]), ll_feat_get());
   1a592:	4638      	mov	r0, r7
   1a594:	f7ff fd9a 	bl	1a0cc <feat_get>
   1a598:	4607      	mov	r7, r0
   1a59a:	4688      	mov	r8, r1
   1a59c:	f00c ff4c 	bl	27438 <ll_feat_get>
	conn->common.fex_valid = 1U;
   1a5a0:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
	feat_result = feat_to_keep & feat_octet0;
   1a5a4:	4038      	ands	r0, r7
	conn->common.fex_valid = 1U;
   1a5a6:	f043 0301 	orr.w	r3, r3, #1
   1a5aa:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
	feat_result &= 0xFF;
   1a5ae:	f000 00ff 	and.w	r0, r0, #255	; 0xff
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1a5b2:	7933      	ldrb	r3, [r6, #4]
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1a5b4:	f027 07ff 	bic.w	r7, r7, #255	; 0xff
   1a5b8:	f008 010f 	and.w	r1, r8, #15
   1a5bc:	4307      	orrs	r7, r0
	conn->llcp_feature.features_peer =
   1a5be:	e9c4 7130 	strd	r7, r1, [r4, #192]	; 0xc0
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1a5c2:	f043 0303 	orr.w	r3, r3, #3
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   1a5c6:	f106 0708 	add.w	r7, r6, #8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1a5ca:	7133      	strb	r3, [r6, #4]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   1a5cc:	2208      	movs	r2, #8
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   1a5ce:	f886 9005 	strb.w	r9, [r6, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   1a5d2:	f886 9007 	strb.w	r9, [r6, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   1a5d6:	2100      	movs	r1, #0
   1a5d8:	4638      	mov	r0, r7
   1a5da:	f009 fbf0 	bl	23dbe <memset>
	feat = feat_land_octet0(ll_feat_get(),
   1a5de:	f00c ff2b 	bl	27438 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   1a5e2:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   1a5e6:	4003      	ands	r3, r0
	feat_result &= 0xFF;
   1a5e8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1a5ec:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
	sys_put_le64(feat, pdu_tx->llctrl.feature_rsp.features);
   1a5f0:	4318      	orrs	r0, r3
   1a5f2:	463a      	mov	r2, r7
   1a5f4:	f001 010f 	and.w	r1, r1, #15
   1a5f8:	f00d f897 	bl	2772a <sys_put_le64>
	ctrl_tx_sec_enqueue(conn, tx);
   1a5fc:	4631      	mov	r1, r6
   1a5fe:	4620      	mov	r0, r4
   1a600:	f00d f8a4 	bl	2774c <ctrl_tx_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1a604:	e6d5      	b.n	1a3b2 <ull_conn_rx+0x16>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_PER_INIT_FEAT_XCHG) &&
   1a606:	7f6b      	ldrb	r3, [r5, #29]
   1a608:	2b09      	cmp	r3, #9
   1a60a:	f040 8299 	bne.w	1ab40 <ull_conn_rx+0x7a4>
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   1a60e:	3520      	adds	r5, #32
   1a610:	4628      	mov	r0, r5
   1a612:	f7ff fd5b 	bl	1a0cc <feat_get>
   1a616:	e9d4 232e 	ldrd	r2, r3, [r4, #184]	; 0xb8
   1a61a:	400b      	ands	r3, r1
   1a61c:	4002      	ands	r2, r0
   1a61e:	e9c4 232e 	strd	r2, r3, [r4, #184]	; 0xb8
		feat_land_octet0(feat_get(&rsp->features[0]), ll_feat_get());
   1a622:	4628      	mov	r0, r5
   1a624:	f7ff fd52 	bl	1a0cc <feat_get>
   1a628:	4605      	mov	r5, r0
   1a62a:	460e      	mov	r6, r1
   1a62c:	f00c ff04 	bl	27438 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   1a630:	ea05 0300 	and.w	r3, r5, r0
	feat_result &= 0xFF;
   1a634:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1a638:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
   1a63c:	431d      	orrs	r5, r3
	conn->common.fex_valid = 1U;
   1a63e:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1a642:	f006 060f 	and.w	r6, r6, #15
	conn->common.fex_valid = 1U;
   1a646:	f043 0301 	orr.w	r3, r3, #1
	conn->llcp_feature.features_peer =
   1a64a:	e9c4 5630 	strd	r5, r6, [r4, #192]	; 0xc0
	conn->common.fex_valid = 1U;
   1a64e:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
	conn->llcp_feature.ack = conn->llcp_feature.req;
   1a652:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
   1a656:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
	feat_result &= 0xFF;
   1a65a:	2000      	movs	r0, #0
	conn->procedure_expire = 0U;
   1a65c:	f8a4 0078 	strh.w	r0, [r4, #120]	; 0x78
}
   1a660:	b003      	add	sp, #12
   1a662:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (PDU_DATA_LLCTRL_LEN(version_ind) != pdu_rx->len) {
   1a666:	7f6e      	ldrb	r6, [r5, #29]
   1a668:	2e06      	cmp	r6, #6
   1a66a:	f040 8269 	bne.w	1ab40 <ull_conn_rx+0x7a4>
	if (!conn->llcp_version.tx) {
   1a66e:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
   1a672:	07d9      	lsls	r1, r3, #31
   1a674:	d43d      	bmi.n	1a6f2 <ull_conn_rx+0x356>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1a676:	48c8      	ldr	r0, [pc, #800]	; (1a998 <ull_conn_rx+0x5fc>)
   1a678:	f00c fb58 	bl	26d2c <mem_acquire>
		if (!tx) {
   1a67c:	4601      	mov	r1, r0
   1a67e:	2800      	cmp	r0, #0
   1a680:	f000 8275 	beq.w	1ab6e <ull_conn_rx+0x7d2>
		conn->llcp_version.tx = 1U;
   1a684:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
   1a688:	f043 0301 	orr.w	r3, r3, #1
   1a68c:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1a690:	7903      	ldrb	r3, [r0, #4]
		pdu_tx->len =
   1a692:	7146      	strb	r6, [r0, #5]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1a694:	f043 0303 	orr.w	r3, r3, #3
   1a698:	7103      	strb	r3, [r0, #4]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   1a69a:	230c      	movs	r3, #12
   1a69c:	71c3      	strb	r3, [r0, #7]
		v->version_number = LL_VERSION_NUMBER;
   1a69e:	7203      	strb	r3, [r0, #8]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   1a6a0:	f06f 030e 	mvn.w	r3, #14
   1a6a4:	7243      	strb	r3, [r0, #9]
   1a6a6:	2305      	movs	r3, #5
   1a6a8:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =
   1a6aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a6ae:	72c3      	strb	r3, [r0, #11]
   1a6b0:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, tx);
   1a6b2:	4620      	mov	r0, r4
   1a6b4:	f00d f84a 	bl	2774c <ctrl_tx_enqueue>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1a6b8:	2301      	movs	r3, #1
   1a6ba:	712b      	strb	r3, [r5, #4]
	conn->llcp_version.version_number = v->version_number;
   1a6bc:	f895 3020 	ldrb.w	r3, [r5, #32]
   1a6c0:	f884 30cb 	strb.w	r3, [r4, #203]	; 0xcb
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   1a6c4:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
   1a6c8:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   1a6cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1a6d0:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		sys_le16_to_cpu(v->sub_version_number);
   1a6d4:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   1a6d8:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
   1a6dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp_version.sub_version_number =
   1a6e0:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
	conn->llcp_version.rx = 1U;
   1a6e4:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
   1a6e8:	f043 0302 	orr.w	r3, r3, #2
   1a6ec:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
	return 0;
   1a6f0:	e66a      	b.n	1a3c8 <ull_conn_rx+0x2c>
	} else if (!conn->llcp_version.rx) {
   1a6f2:	f013 0302 	ands.w	r3, r3, #2
   1a6f6:	f47f ae5c 	bne.w	1a3b2 <ull_conn_rx+0x16>
		conn->llcp_version.ack = conn->llcp_version.req;
   1a6fa:	f894 20c8 	ldrb.w	r2, [r4, #200]	; 0xc8
   1a6fe:	f884 20c9 	strb.w	r2, [r4, #201]	; 0xc9
		conn->procedure_expire = 0U;
   1a702:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
   1a706:	e7d9      	b.n	1a6bc <ull_conn_rx+0x320>
		if (PDU_DATA_LLCTRL_LEN(conn_param_req) != pdu_rx->len) {
   1a708:	7f6b      	ldrb	r3, [r5, #29]
   1a70a:	2b18      	cmp	r3, #24
   1a70c:	f040 8218 	bne.w	1ab40 <ull_conn_rx+0x7a4>
	return conn_upd_curr && (conn_upd_curr != conn);
   1a710:	4ba2      	ldr	r3, [pc, #648]	; (1a99c <ull_conn_rx+0x600>)
   1a712:	681b      	ldr	r3, [r3, #0]
   1a714:	b14b      	cbz	r3, 1a72a <ull_conn_rx+0x38e>
		if (cpr_active_is_set(conn)) {
   1a716:	429c      	cmp	r4, r3
   1a718:	d007      	beq.n	1a72a <ull_conn_rx+0x38e>
			nack = reject_ext_ind_send(conn, *rx,
   1a71a:	2220      	movs	r2, #32
				nack = reject_ext_ind_send(conn, *rx,
   1a71c:	4629      	mov	r1, r5
   1a71e:	4620      	mov	r0, r4
}
   1a720:	b003      	add	sp, #12
   1a722:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
				nack = reject_ext_ind_send(conn, *rx,
   1a726:	f00d b836 	b.w	27796 <reject_ext_ind_send.constprop.0>
		if (!conn->lll.role) {
   1a72a:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
					conn->llcp_conn_param.ack) &&
   1a72e:	f894 10f5 	ldrb.w	r1, [r4, #245]	; 0xf5
			if ((conn->llcp_conn_param.req !=
   1a732:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
		if (!conn->lll.role) {
   1a736:	2a00      	cmp	r2, #0
   1a738:	f2c0 80a9 	blt.w	1a88e <ull_conn_rx+0x4f2>
			if ((conn->llcp_conn_param.req !=
   1a73c:	428b      	cmp	r3, r1
   1a73e:	d00a      	beq.n	1a756 <ull_conn_rx+0x3ba>
			    ((conn->llcp_conn_param.state ==
   1a740:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
					conn->llcp_conn_param.ack) &&
   1a744:	f013 0f0b 	tst.w	r3, #11
   1a748:	d003      	beq.n	1a752 <ull_conn_rx+0x3b6>
			      LLCP_CPR_STATE_RSP_WAIT) ||
   1a74a:	f003 030f 	and.w	r3, r3, #15
   1a74e:	2b06      	cmp	r3, #6
   1a750:	d101      	bne.n	1a756 <ull_conn_rx+0x3ba>
				nack = reject_ext_ind_send(conn, *rx,
   1a752:	2223      	movs	r2, #35	; 0x23
   1a754:	e7e2      	b.n	1a71c <ull_conn_rx+0x380>
			} else if (((conn->llcp_req - conn->llcp_ack) &
   1a756:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   1a75a:	f894 2089 	ldrb.w	r2, [r4, #137]	; 0x89
   1a75e:	1a9b      	subs	r3, r3, r2
   1a760:	f003 0303 	and.w	r3, r3, #3
   1a764:	2b02      	cmp	r3, #2
   1a766:	d101      	bne.n	1a76c <ull_conn_rx+0x3d0>
				nack = reject_ext_ind_send(conn, *rx,
   1a768:	222a      	movs	r2, #42	; 0x2a
   1a76a:	e7d7      	b.n	1a71c <ull_conn_rx+0x380>
				uint16_t interval_min =
   1a76c:	f8b5 8020 	ldrh.w	r8, [r5, #32]
   1a770:	fa1f f388 	uxth.w	r3, r8
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1a774:	2b05      	cmp	r3, #5
   1a776:	d922      	bls.n	1a7be <ull_conn_rx+0x422>
				uint16_t interval_max =
   1a778:	f8b5 e022 	ldrh.w	lr, [r5, #34]	; 0x22
   1a77c:	fa1f f08e 	uxth.w	r0, lr
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1a780:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
   1a784:	d81b      	bhi.n	1a7be <ull_conn_rx+0x422>
				    (interval_max > 3200) ||
   1a786:	4283      	cmp	r3, r0
   1a788:	d819      	bhi.n	1a7be <ull_conn_rx+0x422>
				uint16_t latency =
   1a78a:	f8b5 c024 	ldrh.w	ip, [r5, #36]	; 0x24
   1a78e:	fa1f f68c 	uxth.w	r6, ip
				    (interval_min > interval_max) ||
   1a792:	f5b6 7ffa 	cmp.w	r6, #500	; 0x1f4
   1a796:	d212      	bcs.n	1a7be <ull_conn_rx+0x422>
				uint16_t timeout =
   1a798:	8cef      	ldrh	r7, [r5, #38]	; 0x26
   1a79a:	b2bb      	uxth	r3, r7
				    (latency > 499) ||
   1a79c:	f1a3 020a 	sub.w	r2, r3, #10
   1a7a0:	b292      	uxth	r2, r2
   1a7a2:	f640 4976 	movw	r9, #3190	; 0xc76
   1a7a6:	454a      	cmp	r2, r9
   1a7a8:	d809      	bhi.n	1a7be <ull_conn_rx+0x422>
				     ((latency + 1) * interval_max)) ||
   1a7aa:	1c72      	adds	r2, r6, #1
   1a7ac:	b292      	uxth	r2, r2
   1a7ae:	4342      	muls	r2, r0
				    (timeout > 3200) ||
   1a7b0:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   1a7b4:	d203      	bcs.n	1a7be <ull_conn_rx+0x422>
					cpr->preferred_periodicity;
   1a7b6:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
				     ((latency + 1) * interval_max)) ||
   1a7ba:	4290      	cmp	r0, r2
   1a7bc:	d201      	bcs.n	1a7c2 <ull_conn_rx+0x426>
				nack = reject_ext_ind_send(conn, *rx,
   1a7be:	221e      	movs	r2, #30
   1a7c0:	e7ac      	b.n	1a71c <ull_conn_rx+0x380>
				conn->llcp_conn_param.interval_min =
   1a7c2:	f8a4 80f8 	strh.w	r8, [r4, #248]	; 0xf8
				conn->llcp_conn_param.interval_max =
   1a7c6:	f8a4 e0fa 	strh.w	lr, [r4, #250]	; 0xfa
				conn->llcp_conn_param.latency =	latency;
   1a7ca:	f8a4 c0fc 	strh.w	ip, [r4, #252]	; 0xfc
				conn->llcp_conn_param.timeout =	timeout;
   1a7ce:	f8a4 70fe 	strh.w	r7, [r4, #254]	; 0xfe
				conn->llcp_conn_param.preferred_periodicity =
   1a7d2:	f884 2100 	strb.w	r2, [r4, #256]	; 0x100
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   1a7d6:	f895 702a 	ldrb.w	r7, [r5, #42]	; 0x2a
   1a7da:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
   1a7de:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   1a7e2:	f8a4 2102 	strh.w	r2, [r4, #258]	; 0x102
					sys_le16_to_cpu(cpr->offset0);
   1a7e6:	f895 702c 	ldrb.w	r7, [r5, #44]	; 0x2c
   1a7ea:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
   1a7ee:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
				conn->llcp_conn_param.offset0 =
   1a7f2:	f8a4 2104 	strh.w	r2, [r4, #260]	; 0x104
					sys_le16_to_cpu(cpr->offset1);
   1a7f6:	f895 702e 	ldrb.w	r7, [r5, #46]	; 0x2e
   1a7fa:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
   1a7fe:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
				conn->llcp_conn_param.offset1 =
   1a802:	f8a4 2106 	strh.w	r2, [r4, #262]	; 0x106
					sys_le16_to_cpu(cpr->offset2);
   1a806:	f895 7030 	ldrb.w	r7, [r5, #48]	; 0x30
   1a80a:	f895 202f 	ldrb.w	r2, [r5, #47]	; 0x2f
   1a80e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
				conn->llcp_conn_param.offset2 =
   1a812:	f8a4 2108 	strh.w	r2, [r4, #264]	; 0x108
					sys_le16_to_cpu(cpr->offset3);
   1a816:	f895 7032 	ldrb.w	r7, [r5, #50]	; 0x32
   1a81a:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
   1a81e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
				conn->llcp_conn_param.offset3 =
   1a822:	f8a4 210a 	strh.w	r2, [r4, #266]	; 0x10a
					sys_le16_to_cpu(cpr->offset4);
   1a826:	f895 7034 	ldrb.w	r7, [r5, #52]	; 0x34
   1a82a:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
   1a82e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
				conn->llcp_conn_param.offset4 =
   1a832:	f8a4 210c 	strh.w	r2, [r4, #268]	; 0x10c
					sys_le16_to_cpu(cpr->offset5);
   1a836:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
   1a83a:	f895 7036 	ldrb.w	r7, [r5, #54]	; 0x36
   1a83e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
				conn->llcp_conn_param.offset5 =
   1a842:	f8a4 210e 	strh.w	r2, [r4, #270]	; 0x10e
				     lll->interval) ||
   1a846:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
				if ((conn->llcp_conn_param.interval_max !=
   1a848:	4290      	cmp	r0, r2
			if ((conn->llcp_conn_param.interval_max !=
   1a84a:	d112      	bne.n	1a872 <ull_conn_rx+0x4d6>
			     lll->interval) ||
   1a84c:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
   1a84e:	42b0      	cmp	r0, r6
   1a850:	d10f      	bne.n	1a872 <ull_conn_rx+0x4d6>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   1a852:	f240 40e2 	movw	r0, #1250	; 0x4e2
   1a856:	4342      	muls	r2, r0
   1a858:	f242 7010 	movw	r0, #10000	; 0x2710
   1a85c:	fb00 2303 	mla	r3, r0, r3, r2
   1a860:	3b01      	subs	r3, #1
   1a862:	fbb3 f3f2 	udiv	r3, r3, r2
			    (conn->llcp_conn_param.latency != lll->latency) ||
   1a866:	f8b4 2072 	ldrh.w	r2, [r4, #114]	; 0x72
   1a86a:	b29b      	uxth	r3, r3
   1a86c:	429a      	cmp	r2, r3
   1a86e:	f000 8088 	beq.w	1a982 <ull_conn_rx+0x5e6>
				conn->llcp_conn_param.state =
   1a872:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   1a876:	2203      	movs	r2, #3
   1a878:	f362 0303 	bfi	r3, r2, #0, #4
   1a87c:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
			conn->llcp_conn_param.ack--;
   1a880:	3901      	subs	r1, #1
   1a882:	f884 10f5 	strb.w	r1, [r4, #245]	; 0xf5
			cpr_active_check_and_set(conn);
   1a886:	4620      	mov	r0, r4
   1a888:	f7ff faac 	bl	19de4 <cpr_active_check_and_set>
   1a88c:	e59c      	b.n	1a3c8 <ull_conn_rx+0x2c>
		} else if ((conn->llcp_conn_param.req ==
   1a88e:	428b      	cmp	r3, r1
   1a890:	d005      	beq.n	1a89e <ull_conn_rx+0x502>
			    conn->llcp_conn_param.ack) ||
   1a892:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   1a896:	f013 0f0b 	tst.w	r3, #11
   1a89a:	f47f ad8a 	bne.w	1a3b2 <ull_conn_rx+0x16>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   1a89e:	f8b5 8020 	ldrh.w	r8, [r5, #32]
   1a8a2:	fa1f f388 	uxth.w	r3, r8
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1a8a6:	2b05      	cmp	r3, #5
   1a8a8:	d989      	bls.n	1a7be <ull_conn_rx+0x422>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   1a8aa:	f8b5 e022 	ldrh.w	lr, [r5, #34]	; 0x22
   1a8ae:	fa1f f28e 	uxth.w	r2, lr
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1a8b2:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   1a8b6:	d882      	bhi.n	1a7be <ull_conn_rx+0x422>
			    (interval_max > 3200) ||
   1a8b8:	4293      	cmp	r3, r2
   1a8ba:	d880      	bhi.n	1a7be <ull_conn_rx+0x422>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   1a8bc:	f8b5 c024 	ldrh.w	ip, [r5, #36]	; 0x24
   1a8c0:	fa1f f68c 	uxth.w	r6, ip
			    (interval_min > interval_max) ||
   1a8c4:	f5b6 7ffa 	cmp.w	r6, #500	; 0x1f4
   1a8c8:	f4bf af79 	bcs.w	1a7be <ull_conn_rx+0x422>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   1a8cc:	8cef      	ldrh	r7, [r5, #38]	; 0x26
   1a8ce:	b2bb      	uxth	r3, r7
			    (latency > 499) ||
   1a8d0:	f1a3 000a 	sub.w	r0, r3, #10
   1a8d4:	b280      	uxth	r0, r0
   1a8d6:	f640 4976 	movw	r9, #3190	; 0xc76
   1a8da:	4548      	cmp	r0, r9
   1a8dc:	f63f af6f 	bhi.w	1a7be <ull_conn_rx+0x422>
			     ((latency + 1) * interval_max)) ||
   1a8e0:	1c70      	adds	r0, r6, #1
   1a8e2:	b280      	uxth	r0, r0
   1a8e4:	4350      	muls	r0, r2
			    (timeout < 10) || (timeout > 3200) ||
   1a8e6:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
   1a8ea:	f4bf af68 	bcs.w	1a7be <ull_conn_rx+0x422>
				cpr->preferred_periodicity;
   1a8ee:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
			     ((latency + 1) * interval_max)) ||
   1a8f2:	4282      	cmp	r2, r0
   1a8f4:	f4ff af63 	bcc.w	1a7be <ull_conn_rx+0x422>
			conn->llcp_conn_param.interval_min = interval_min;
   1a8f8:	f8a4 80f8 	strh.w	r8, [r4, #248]	; 0xf8
			conn->llcp_conn_param.interval_max = interval_max;
   1a8fc:	f8a4 e0fa 	strh.w	lr, [r4, #250]	; 0xfa
			conn->llcp_conn_param.latency =	latency;
   1a900:	f8a4 c0fc 	strh.w	ip, [r4, #252]	; 0xfc
			conn->llcp_conn_param.timeout =	timeout;
   1a904:	f8a4 70fe 	strh.w	r7, [r4, #254]	; 0xfe
			conn->llcp_conn_param.preferred_periodicity =
   1a908:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   1a90c:	f895 702a 	ldrb.w	r7, [r5, #42]	; 0x2a
   1a910:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
   1a914:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   1a918:	f8a4 0102 	strh.w	r0, [r4, #258]	; 0x102
				sys_le16_to_cpu(cpr->offset0);
   1a91c:	f895 702c 	ldrb.w	r7, [r5, #44]	; 0x2c
   1a920:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
   1a924:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
			conn->llcp_conn_param.offset0 =
   1a928:	f8a4 0104 	strh.w	r0, [r4, #260]	; 0x104
				sys_le16_to_cpu(cpr->offset1);
   1a92c:	f895 702e 	ldrb.w	r7, [r5, #46]	; 0x2e
   1a930:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
   1a934:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
			conn->llcp_conn_param.offset1 =
   1a938:	f8a4 0106 	strh.w	r0, [r4, #262]	; 0x106
				sys_le16_to_cpu(cpr->offset2);
   1a93c:	f895 7030 	ldrb.w	r7, [r5, #48]	; 0x30
   1a940:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
   1a944:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
			conn->llcp_conn_param.offset2 =
   1a948:	f8a4 0108 	strh.w	r0, [r4, #264]	; 0x108
				sys_le16_to_cpu(cpr->offset3);
   1a94c:	f895 7032 	ldrb.w	r7, [r5, #50]	; 0x32
   1a950:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
   1a954:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
			conn->llcp_conn_param.offset3 =
   1a958:	f8a4 010a 	strh.w	r0, [r4, #266]	; 0x10a
				sys_le16_to_cpu(cpr->offset4);
   1a95c:	f895 7034 	ldrb.w	r7, [r5, #52]	; 0x34
   1a960:	f895 0033 	ldrb.w	r0, [r5, #51]	; 0x33
   1a964:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
			conn->llcp_conn_param.offset4 =
   1a968:	f8a4 010c 	strh.w	r0, [r4, #268]	; 0x10c
				sys_le16_to_cpu(cpr->offset5);
   1a96c:	f895 0035 	ldrb.w	r0, [r5, #53]	; 0x35
   1a970:	f895 7036 	ldrb.w	r7, [r5, #54]	; 0x36
   1a974:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
			conn->llcp_conn_param.offset5 =
   1a978:	f8a4 010e 	strh.w	r0, [r4, #270]	; 0x10e
			     lll->interval) ||
   1a97c:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
			if ((conn->llcp_conn_param.interval_max !=
   1a97e:	4282      	cmp	r2, r0
   1a980:	e763      	b.n	1a84a <ull_conn_rx+0x4ae>
				conn->llcp_conn_param.state =
   1a982:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
   1a986:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   1a98a:	f043 0301 	orr.w	r3, r3, #1
   1a98e:	f8a4 30f6 	strh.w	r3, [r4, #246]	; 0xf6
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1a992:	2301      	movs	r3, #1
   1a994:	712b      	strb	r3, [r5, #4]
   1a996:	e773      	b.n	1a880 <ull_conn_rx+0x4e4>
   1a998:	20003118 	.word	0x20003118
   1a99c:	20003060 	.word	0x20003060
		if (PDU_DATA_LLCTRL_LEN(reject_ext_ind) != pdu_rx->len) {
   1a9a0:	7f6b      	ldrb	r3, [r5, #29]
   1a9a2:	2b03      	cmp	r3, #3
   1a9a4:	f040 80cc 	bne.w	1ab40 <ull_conn_rx+0x7a4>
	switch (rej_ext_ind->reject_opcode) {
   1a9a8:	f895 3020 	ldrb.w	r3, [r5, #32]
   1a9ac:	2b0f      	cmp	r3, #15
   1a9ae:	f47f ad00 	bne.w	1a3b2 <ull_conn_rx+0x16>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   1a9b2:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
   1a9b6:	f894 30f5 	ldrb.w	r3, [r4, #245]	; 0xf5
   1a9ba:	4293      	cmp	r3, r2
   1a9bc:	f43f acf9 	beq.w	1a3b2 <ull_conn_rx+0x16>
	if (!lll->role && (rej_ext_ind->error_code ==
   1a9c0:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
   1a9c4:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   1a9c8:	2900      	cmp	r1, #0
   1a9ca:	f2c0 80d3 	blt.w	1ab74 <ull_conn_rx+0x7d8>
   1a9ce:	2b1a      	cmp	r3, #26
   1a9d0:	f040 80d6 	bne.w	1ab80 <ull_conn_rx+0x7e4>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   1a9d4:	f894 209c 	ldrb.w	r2, [r4, #156]	; 0x9c
   1a9d8:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
   1a9dc:	429a      	cmp	r2, r3
   1a9de:	d00c      	beq.n	1a9fa <ull_conn_rx+0x65e>
   1a9e0:	4a78      	ldr	r2, [pc, #480]	; (1abc4 <ull_conn_rx+0x828>)
   1a9e2:	4979      	ldr	r1, [pc, #484]	; (1abc8 <ull_conn_rx+0x82c>)
   1a9e4:	4879      	ldr	r0, [pc, #484]	; (1abcc <ull_conn_rx+0x830>)
   1a9e6:	f241 3309 	movw	r3, #4873	; 0x1309
   1a9ea:	f006 fc3f 	bl	2126c <printk>
   1a9ee:	4040      	eors	r0, r0
   1a9f0:	f380 8811 	msr	BASEPRI, r0
   1a9f4:	f04f 0003 	mov.w	r0, #3
   1a9f8:	df02      	svc	2
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1a9fa:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   1a9fe:	2206      	movs	r2, #6
   1aa00:	f362 0303 	bfi	r3, r2, #0, #4
		conn->llcp_cu.win_size = 1U;
   1aa04:	2201      	movs	r2, #1
   1aa06:	f884 20ac 	strb.w	r2, [r4, #172]	; 0xac
		conn->llcp_cu.win_offset_us = 0U;
   1aa0a:	2200      	movs	r2, #0
   1aa0c:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   1aa10:	f8b4 20fa 	ldrh.w	r2, [r4, #250]	; 0xfa
   1aa14:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   1aa18:	f8b4 20fc 	ldrh.w	r2, [r4, #252]	; 0xfc
   1aa1c:	f8a4 20a2 	strh.w	r2, [r4, #162]	; 0xa2
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   1aa20:	f8b4 20fe 	ldrh.w	r2, [r4, #254]	; 0xfe
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1aa24:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   1aa28:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   1aa2c:	f3c3 1300 	ubfx	r3, r3, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1aa30:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
   1aa34:	00db      	lsls	r3, r3, #3
   1aa36:	f043 0301 	orr.w	r3, r3, #1
   1aa3a:	f022 020f 	bic.w	r2, r2, #15
   1aa3e:	4313      	orrs	r3, r2
   1aa40:	f884 309e 	strb.w	r3, [r4, #158]	; 0x9e
		conn->llcp_cu.ack--;
   1aa44:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
   1aa48:	3b01      	subs	r3, #1
   1aa4a:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
	if (err) {
   1aa4e:	e4b0      	b.n	1a3b2 <ull_conn_rx+0x16>
		if (PDU_DATA_LLCTRL_LEN(unknown_rsp) != pdu_rx->len) {
   1aa50:	7f6b      	ldrb	r3, [r5, #29]
   1aa52:	2b02      	cmp	r3, #2
   1aa54:	d174      	bne.n	1ab40 <ull_conn_rx+0x7a4>
			    conn->llcp_conn_param.req) &&
   1aa56:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
		} else if ((conn->llcp_conn_param.ack !=
   1aa5a:	f894 30f5 	ldrb.w	r3, [r4, #245]	; 0xf5
   1aa5e:	4293      	cmp	r3, r2
   1aa60:	f43f ad3d 	beq.w	1a4de <ull_conn_rx+0x142>
			    conn->llcp_conn_param.req) &&
   1aa64:	f895 3020 	ldrb.w	r3, [r5, #32]
   1aa68:	2b0f      	cmp	r3, #15
   1aa6a:	f47f ad38 	bne.w	1a4de <ull_conn_rx+0x142>
			conn->llcp_conn_param.disabled = 1U;
   1aa6e:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   1aa72:	f043 0320 	orr.w	r3, r3, #32
   1aa76:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
			if (!conn->lll.role) {
   1aa7a:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1aa7e:	2b00      	cmp	r3, #0
   1aa80:	db3e      	blt.n	1ab00 <ull_conn_rx+0x764>
				LL_ASSERT(conn->llcp_cu.req ==
   1aa82:	f894 209c 	ldrb.w	r2, [r4, #156]	; 0x9c
   1aa86:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
   1aa8a:	429a      	cmp	r2, r3
   1aa8c:	d00c      	beq.n	1aaa8 <ull_conn_rx+0x70c>
   1aa8e:	4a4d      	ldr	r2, [pc, #308]	; (1abc4 <ull_conn_rx+0x828>)
   1aa90:	494d      	ldr	r1, [pc, #308]	; (1abc8 <ull_conn_rx+0x82c>)
   1aa92:	484e      	ldr	r0, [pc, #312]	; (1abcc <ull_conn_rx+0x830>)
   1aa94:	f641 2331 	movw	r3, #6705	; 0x1a31
   1aa98:	f006 fbe8 	bl	2126c <printk>
   1aa9c:	4040      	eors	r0, r0
   1aa9e:	f380 8811 	msr	BASEPRI, r0
   1aaa2:	f04f 0003 	mov.w	r0, #3
   1aaa6:	df02      	svc	2
				conn->llcp_conn_param.state =
   1aaa8:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   1aaac:	2206      	movs	r2, #6
   1aaae:	f362 0303 	bfi	r3, r2, #0, #4
				conn->llcp_cu.interval =
   1aab2:	f8b4 20fa 	ldrh.w	r2, [r4, #250]	; 0xfa
   1aab6:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
				conn->llcp_cu.latency =
   1aaba:	f8b4 20fc 	ldrh.w	r2, [r4, #252]	; 0xfc
   1aabe:	f8a4 20a2 	strh.w	r2, [r4, #162]	; 0xa2
				conn->llcp_cu.timeout =
   1aac2:	f8b4 20fe 	ldrh.w	r2, [r4, #254]	; 0xfe
				conn->llcp_conn_param.state =
   1aac6:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
				conn->llcp_cu.timeout =
   1aaca:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   1aace:	f3c3 1300 	ubfx	r3, r3, #4, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1aad2:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
				conn->llcp_cu.win_size = 1U;
   1aad6:	2101      	movs	r1, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1aad8:	00db      	lsls	r3, r3, #3
   1aada:	430b      	orrs	r3, r1
   1aadc:	f022 020f 	bic.w	r2, r2, #15
   1aae0:	4313      	orrs	r3, r2
   1aae2:	f884 309e 	strb.w	r3, [r4, #158]	; 0x9e
				conn->llcp_cu.ack--;
   1aae6:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
				conn->llcp_cu.win_size = 1U;
   1aaea:	f884 10ac 	strb.w	r1, [r4, #172]	; 0xac
				conn->llcp_cu.ack--;
   1aaee:	3b01      	subs	r3, #1
   1aaf0:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1aaf4:	6833      	ldr	r3, [r6, #0]
				conn->llcp_cu.win_offset_us = 0U;
   1aaf6:	2000      	movs	r0, #0
   1aaf8:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1aafc:	7119      	strb	r1, [r3, #4]
				break;
   1aafe:	e5af      	b.n	1a660 <ull_conn_rx+0x2c4>
			if (!conn->llcp_conn_param.cmd) {
   1ab00:	f894 00f6 	ldrb.w	r0, [r4, #246]	; 0xf6
	conn_upd_curr = NULL;
   1ab04:	4b32      	ldr	r3, [pc, #200]	; (1abd0 <ull_conn_rx+0x834>)
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1ab06:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
	conn_upd_curr = NULL;
   1ab0a:	2100      	movs	r1, #0
			if (!conn->llcp_conn_param.cmd) {
   1ab0c:	f010 0010 	ands.w	r0, r0, #16
	conn_upd_curr = NULL;
   1ab10:	6019      	str	r1, [r3, #0]
			if (!conn->llcp_conn_param.cmd) {
   1ab12:	d102      	bne.n	1ab1a <ull_conn_rx+0x77e>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1ab14:	2301      	movs	r3, #1
   1ab16:	712b      	strb	r3, [r5, #4]
		break;
   1ab18:	e5a2      	b.n	1a660 <ull_conn_rx+0x2c4>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1ab1a:	2318      	movs	r3, #24
   1ab1c:	712b      	strb	r3, [r5, #4]
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   1ab1e:	231a      	movs	r3, #26
   1ab20:	772b      	strb	r3, [r5, #28]
			cu->latency = lll->latency;
   1ab22:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			cu->interval = lll->interval;
   1ab24:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
			cu->latency = lll->latency;
   1ab26:	842b      	strh	r3, [r5, #32]
			cu->timeout = conn->supervision_reload *
   1ab28:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
			cu->interval = lll->interval;
   1ab2c:	83ea      	strh	r2, [r5, #30]
			cu->timeout = conn->supervision_reload *
   1ab2e:	4353      	muls	r3, r2
				      lll->interval * 125U / 1000;
   1ab30:	227d      	movs	r2, #125	; 0x7d
   1ab32:	4353      	muls	r3, r2
   1ab34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ab38:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   1ab3c:	846b      	strh	r3, [r5, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
   1ab3e:	e4ce      	b.n	1a4de <ull_conn_rx+0x142>
	tx = ctrl_tx_rsp_mem_acquire(conn, rx, &err);
   1ab40:	4629      	mov	r1, r5
   1ab42:	aa01      	add	r2, sp, #4
   1ab44:	4620      	mov	r0, r4
   1ab46:	f7ff f955 	bl	19df4 <ctrl_tx_rsp_mem_acquire>
	if (!tx) {
   1ab4a:	4601      	mov	r1, r0
   1ab4c:	2800      	cmp	r0, #0
   1ab4e:	f43f ad13 	beq.w	1a578 <ull_conn_rx+0x1dc>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1ab52:	7903      	ldrb	r3, [r0, #4]
	pdu->llctrl.unknown_rsp.type = type;
   1ab54:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1ab58:	f043 0303 	orr.w	r3, r3, #3
   1ab5c:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   1ab5e:	2302      	movs	r3, #2
   1ab60:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   1ab62:	2307      	movs	r3, #7
   1ab64:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, tx);
   1ab66:	4620      	mov	r0, r4
   1ab68:	f00c fdf0 	bl	2774c <ctrl_tx_enqueue>
   1ab6c:	e421      	b.n	1a3b2 <ull_conn_rx+0x16>
			return -ENOBUFS;
   1ab6e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1ab72:	e575      	b.n	1a660 <ull_conn_rx+0x2c4>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   1ab74:	2b23      	cmp	r3, #35	; 0x23
   1ab76:	d003      	beq.n	1ab80 <ull_conn_rx+0x7e4>
			conn->periph.ticks_to_offset =
   1ab78:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
   1ab7c:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   1ab80:	f894 10f6 	ldrb.w	r1, [r4, #246]	; 0xf6
   1ab84:	f001 000f 	and.w	r0, r1, #15
   1ab88:	2804      	cmp	r0, #4
   1ab8a:	d106      	bne.n	1ab9a <ull_conn_rx+0x7fe>
	conn_upd_curr = NULL;
   1ab8c:	4e10      	ldr	r6, [pc, #64]	; (1abd0 <ull_conn_rx+0x834>)
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1ab8e:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
	conn_upd_curr = NULL;
   1ab92:	2000      	movs	r0, #0
   1ab94:	6030      	str	r0, [r6, #0]
		conn->procedure_expire = 0U;
   1ab96:	f8a4 0078 	strh.w	r0, [r4, #120]	; 0x78
	if (!conn->llcp_conn_param.cmd) {
   1ab9a:	06ca      	lsls	r2, r1, #27
   1ab9c:	f57f ac09 	bpl.w	1a3b2 <ull_conn_rx+0x16>
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1aba0:	2218      	movs	r2, #24
   1aba2:	712a      	strb	r2, [r5, #4]
	cu->status = rej_ext_ind->error_code;
   1aba4:	772b      	strb	r3, [r5, #28]
	cu->latency = lll->latency;
   1aba6:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
	cu->interval = lll->interval;
   1aba8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
	cu->latency = lll->latency;
   1abaa:	842b      	strh	r3, [r5, #32]
	cu->timeout = conn->supervision_reload *
   1abac:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
	cu->interval = lll->interval;
   1abb0:	83ea      	strh	r2, [r5, #30]
	cu->timeout = conn->supervision_reload *
   1abb2:	4353      	muls	r3, r2
		      lll->interval * 125U / 1000;
   1abb4:	227d      	movs	r2, #125	; 0x7d
   1abb6:	4353      	muls	r3, r2
   1abb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1abbc:	fbb3 f3f2 	udiv	r3, r3, r2
	cu->timeout = conn->supervision_reload *
   1abc0:	846b      	strh	r3, [r5, #34]	; 0x22
	if (err) {
   1abc2:	e401      	b.n	1a3c8 <ull_conn_rx+0x2c>
   1abc4:	0002f5e1 	.word	0x0002f5e1
   1abc8:	0002f684 	.word	0x0002f684
   1abcc:	0002b804 	.word	0x0002b804
   1abd0:	20003060 	.word	0x20003060

0001abd4 <ull_conn_tx_demux>:
{
   1abd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   1abd6:	4c1f      	ldr	r4, [pc, #124]	; (1ac54 <ull_conn_tx_demux+0x80>)
{
   1abd8:	4605      	mov	r5, r0
	return (void *)(fifo + first * size);
   1abda:	1d26      	adds	r6, r4, #4
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   1abdc:	78a3      	ldrb	r3, [r4, #2]
	if (first == last) {
   1abde:	78e1      	ldrb	r1, [r4, #3]
   1abe0:	7822      	ldrb	r2, [r4, #0]
   1abe2:	4299      	cmp	r1, r3
   1abe4:	d02b      	beq.n	1ac3e <ull_conn_tx_demux+0x6a>
	return (void *)(fifo + first * size);
   1abe6:	fb13 f302 	smulbb	r3, r3, r2
		if (!lll_tx) {
   1abea:	18f7      	adds	r7, r6, r3
   1abec:	d027      	beq.n	1ac3e <ull_conn_tx_demux+0x6a>
		conn = ll_connected_get(lll_tx->handle);
   1abee:	5af0      	ldrh	r0, [r6, r3]
   1abf0:	f00c fdef 	bl	277d2 <ll_connected_get>
		if (conn) {
   1abf4:	6879      	ldr	r1, [r7, #4]
   1abf6:	b318      	cbz	r0, 1ac40 <ull_conn_tx_demux+0x6c>
			tx->next = NULL;
   1abf8:	2300      	movs	r3, #0
   1abfa:	600b      	str	r3, [r1, #0]
			if (!conn->tx_data) {
   1abfc:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   1ac00:	b943      	cbnz	r3, 1ac14 <ull_conn_tx_demux+0x40>
				if (!conn->tx_head) {
   1ac02:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
				conn->tx_data = tx;
   1ac06:	f8c0 1128 	str.w	r1, [r0, #296]	; 0x128
				if (!conn->tx_head) {
   1ac0a:	b91b      	cbnz	r3, 1ac14 <ull_conn_tx_demux+0x40>
					conn->tx_head = tx;
   1ac0c:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
					conn->tx_data_last = NULL;
   1ac10:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
			if (conn->tx_data_last) {
   1ac14:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
   1ac18:	b103      	cbz	r3, 1ac1c <ull_conn_tx_demux+0x48>
				conn->tx_data_last->next = tx;
   1ac1a:	6019      	str	r1, [r3, #0]
			conn->tx_data_last = tx;
   1ac1c:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
	uint8_t _first = *first; /* Copy read-index */
   1ac20:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   1ac22:	78e1      	ldrb	r1, [r4, #3]
		MFIFO_DEQUEUE(conn_tx);
   1ac24:	7862      	ldrb	r2, [r4, #1]
   1ac26:	4299      	cmp	r1, r3
   1ac28:	d005      	beq.n	1ac36 <ull_conn_tx_demux+0x62>
	_first += 1U;
   1ac2a:	3301      	adds	r3, #1
   1ac2c:	b2db      	uxtb	r3, r3
		_first = 0U;
   1ac2e:	429a      	cmp	r2, r3
   1ac30:	bf08      	it	eq
   1ac32:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1ac34:	70a3      	strb	r3, [r4, #2]
	} while (--count);
   1ac36:	3d01      	subs	r5, #1
   1ac38:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   1ac3c:	d1ce      	bne.n	1abdc <ull_conn_tx_demux+0x8>
}
   1ac3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			p->ll_id = PDU_DATA_LLID_RESV;
   1ac40:	790b      	ldrb	r3, [r1, #4]
   1ac42:	f360 0301 	bfi	r3, r0, #0, #2
   1ac46:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
   1ac48:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1ac4c:	f7fe fa4e 	bl	190ec <ll_tx_ack_put>
   1ac50:	e7e6      	b.n	1ac20 <ull_conn_tx_demux+0x4c>
   1ac52:	bf00      	nop
   1ac54:	20000df0 	.word	0x20000df0

0001ac58 <conn_cleanup>:
	if (conn == conn_upd_curr) {
   1ac58:	4b3d      	ldr	r3, [pc, #244]	; (1ad50 <conn_cleanup+0xf8>)
{
   1ac5a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (conn == conn_upd_curr) {
   1ac5e:	681a      	ldr	r2, [r3, #0]
	*((uint8_t *)rx->pdu) = reason;
   1ac60:	f880 10f0 	strb.w	r1, [r0, #240]	; 0xf0
	if (conn == conn_upd_curr) {
   1ac64:	4290      	cmp	r0, r2
		conn_upd_curr = NULL;
   1ac66:	bf04      	itt	eq
   1ac68:	2200      	moveq	r2, #0
   1ac6a:	601a      	streq	r2, [r3, #0]
	rx->hdr.handle = conn->lll.handle;
   1ac6c:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   1ac6e:	f8a0 30da 	strh.w	r3, [r0, #218]	; 0xda
	rx = conn->llcp_rx;
   1ac72:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1ac76:	2317      	movs	r3, #23
{
   1ac78:	4604      	mov	r4, r0
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1ac7a:	f880 30d8 	strb.w	r3, [r0, #216]	; 0xd8
		hdr->type = NODE_RX_TYPE_RELEASE;
   1ac7e:	2501      	movs	r5, #1
	while (rx) {
   1ac80:	bb49      	cbnz	r1, 1acd6 <conn_cleanup+0x7e>
		link = mem_acquire(&mem_link_tx.free);
   1ac82:	4f34      	ldr	r7, [pc, #208]	; (1ad54 <conn_cleanup+0xfc>)
		LL_ASSERT(link);
   1ac84:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 1ad58 <conn_cleanup+0x100>
   1ac88:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 1ad5c <conn_cleanup+0x104>
	while (conn->tx_head) {
   1ac8c:	f8d4 511c 	ldr.w	r5, [r4, #284]	; 0x11c
   1ac90:	bb45      	cbnz	r5, 1ace4 <conn_cleanup+0x8c>
				    TICKER_ID_CONN_BASE + lll->handle,
   1ac92:	8d22      	ldrh	r2, [r4, #40]	; 0x28
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1ac94:	4b32      	ldr	r3, [pc, #200]	; (1ad60 <conn_cleanup+0x108>)
   1ac96:	9400      	str	r4, [sp, #0]
				    TICKER_ID_CONN_BASE + lll->handle,
   1ac98:	3205      	adds	r2, #5
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1ac9a:	b2d2      	uxtb	r2, r2
   1ac9c:	2101      	movs	r1, #1
   1ac9e:	4628      	mov	r0, r5
   1aca0:	f7fc fc72 	bl	17588 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1aca4:	f030 0302 	bics.w	r3, r0, #2
   1aca8:	d00c      	beq.n	1acc4 <conn_cleanup+0x6c>
   1acaa:	4a2b      	ldr	r2, [pc, #172]	; (1ad58 <conn_cleanup+0x100>)
   1acac:	492d      	ldr	r1, [pc, #180]	; (1ad64 <conn_cleanup+0x10c>)
   1acae:	482e      	ldr	r0, [pc, #184]	; (1ad68 <conn_cleanup+0x110>)
   1acb0:	f240 73d3 	movw	r3, #2003	; 0x7d3
   1acb4:	f006 fada 	bl	2126c <printk>
   1acb8:	4040      	eors	r0, r0
   1acba:	f380 8811 	msr	BASEPRI, r0
   1acbe:	f04f 0003 	mov.w	r0, #3
   1acc2:	df02      	svc	2
	lll->handle = LLL_HANDLE_INVALID;
   1acc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   1acc8:	20ff      	movs	r0, #255	; 0xff
	lll->handle = LLL_HANDLE_INVALID;
   1acca:	8523      	strh	r3, [r4, #40]	; 0x28
}
   1accc:	b003      	add	sp, #12
   1acce:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	ull_conn_tx_demux(UINT8_MAX);
   1acd2:	f7ff bf7f 	b.w	1abd4 <ull_conn_tx_demux>
		rx = hdr->link->mem;
   1acd6:	6808      	ldr	r0, [r1, #0]
   1acd8:	6846      	ldr	r6, [r0, #4]
		hdr->type = NODE_RX_TYPE_RELEASE;
   1acda:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   1acdc:	f7fe f944 	bl	18f68 <ll_rx_put>
		rx = hdr->link->mem;
   1ace0:	4631      	mov	r1, r6
   1ace2:	e7cd      	b.n	1ac80 <conn_cleanup+0x28>
	if (conn->tx_head == conn->tx_ctrl) {
   1ace4:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
		conn->tx_head = conn->tx_head->next;
   1ace8:	682b      	ldr	r3, [r5, #0]
	if (conn->tx_head == conn->tx_ctrl) {
   1acea:	4295      	cmp	r5, r2
   1acec:	d124      	bne.n	1ad38 <conn_cleanup+0xe0>
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   1acee:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
		conn->tx_head = conn->tx_head->next;
   1acf2:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   1acf6:	4295      	cmp	r5, r2
			conn->tx_ctrl = NULL;
   1acf8:	bf06      	itte	eq
   1acfa:	2300      	moveq	r3, #0
			conn->tx_ctrl_last = NULL;
   1acfc:	e9c4 3348 	strdeq	r3, r3, [r4, #288]	; 0x120
			conn->tx_ctrl = conn->tx_head;
   1ad00:	f8c4 3120 	strne.w	r3, [r4, #288]	; 0x120
		tx->next = tx;
   1ad04:	602d      	str	r5, [r5, #0]
		link = mem_acquire(&mem_link_tx.free);
   1ad06:	4638      	mov	r0, r7
   1ad08:	f00c f810 	bl	26d2c <mem_acquire>
		LL_ASSERT(link);
   1ad0c:	4606      	mov	r6, r0
   1ad0e:	b960      	cbnz	r0, 1ad2a <conn_cleanup+0xd2>
   1ad10:	4815      	ldr	r0, [pc, #84]	; (1ad68 <conn_cleanup+0x110>)
   1ad12:	f640 030a 	movw	r3, #2058	; 0x80a
   1ad16:	4642      	mov	r2, r8
   1ad18:	4649      	mov	r1, r9
   1ad1a:	f006 faa7 	bl	2126c <printk>
   1ad1e:	4040      	eors	r0, r0
   1ad20:	f380 8811 	msr	BASEPRI, r0
   1ad24:	f04f 0003 	mov.w	r0, #3
   1ad28:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   1ad2a:	f104 025c 	add.w	r2, r4, #92	; 0x5c
   1ad2e:	4629      	mov	r1, r5
   1ad30:	4630      	mov	r0, r6
   1ad32:	f00c f859 	bl	26de8 <memq_enqueue>
   1ad36:	e7a9      	b.n	1ac8c <conn_cleanup+0x34>
		if (conn->tx_head == conn->tx_data) {
   1ad38:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
		conn->tx_head = conn->tx_head->next;
   1ad3c:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
		if (conn->tx_head == conn->tx_data) {
   1ad40:	4295      	cmp	r5, r2
			conn->tx_data = conn->tx_data->next;
   1ad42:	bf08      	it	eq
   1ad44:	f8c4 3128 	streq.w	r3, [r4, #296]	; 0x128
		tx->next = NULL;
   1ad48:	2300      	movs	r3, #0
   1ad4a:	602b      	str	r3, [r5, #0]
   1ad4c:	e7db      	b.n	1ad06 <conn_cleanup+0xae>
   1ad4e:	bf00      	nop
   1ad50:	20003060 	.word	0x20003060
   1ad54:	200031cc 	.word	0x200031cc
   1ad58:	0002f5e1 	.word	0x0002f5e1
   1ad5c:	0002e896 	.word	0x0002e896
   1ad60:	00019e7d 	.word	0x00019e7d
   1ad64:	0002f6be 	.word	0x0002f6be
   1ad68:	0002b804 	.word	0x0002b804

0001ad6c <ull_conn_done>:
{
   1ad6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	conn = CONTAINER_OF(done->param, struct ll_conn, ull);
   1ad70:	69c4      	ldr	r4, [r0, #28]
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   1ad72:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   1ad74:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1ad78:	429a      	cmp	r2, r3
{
   1ad7a:	b08a      	sub	sp, #40	; 0x28
   1ad7c:	4680      	mov	r8, r0
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   1ad7e:	f000 80ba 	beq.w	1aef6 <ull_conn_done+0x18a>
	reason_final = conn->llcp_terminate.reason_final;
   1ad82:	f894 50d3 	ldrb.w	r5, [r4, #211]	; 0xd3
	if (reason_final && (
   1ad86:	b135      	cbz	r5, 1ad96 <ull_conn_done+0x2a>
		conn_cleanup(conn, reason_final);
   1ad88:	4629      	mov	r1, r5
   1ad8a:	4620      	mov	r0, r4
}
   1ad8c:	b00a      	add	sp, #40	; 0x28
   1ad8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		conn_cleanup(conn, reason_final);
   1ad92:	f7ff bf61 	b.w	1ac58 <conn_cleanup>
	latency_event = lll->latency_event;
   1ad96:	8e27      	ldrh	r7, [r4, #48]	; 0x30
	if (done->extra.trx_cnt) {
   1ad98:	8c83      	ldrh	r3, [r0, #36]	; 0x24
	elapsed_event = latency_event + 1;
   1ad9a:	1c7e      	adds	r6, r7, #1
	ticks_drift_minus = 0U;
   1ad9c:	e9cd 5508 	strd	r5, r5, [sp, #32]
	elapsed_event = latency_event + 1;
   1ada0:	b2b6      	uxth	r6, r6
	if (done->extra.trx_cnt) {
   1ada2:	b17b      	cbz	r3, 1adc4 <ull_conn_done+0x58>
		} else if (lll->role) {
   1ada4:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1ada8:	2b00      	cmp	r3, #0
   1adaa:	da08      	bge.n	1adbe <ull_conn_done+0x52>
			ull_drift_ticks_get(done, &ticks_drift_plus,
   1adac:	aa08      	add	r2, sp, #32
   1adae:	a909      	add	r1, sp, #36	; 0x24
   1adb0:	f7e5 fb7e 	bl	4b0 <ull_drift_ticks_get>
			if (!conn->tx_head) {
   1adb4:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   1adb8:	b163      	cbz	r3, 1add4 <ull_conn_done+0x68>
				lll->latency_event = 0;
   1adba:	2300      	movs	r3, #0
				lll->latency_event = lll->latency;
   1adbc:	8623      	strh	r3, [r4, #48]	; 0x30
		conn->connect_expire = 0U;
   1adbe:	2300      	movs	r3, #0
   1adc0:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
	if (done->extra.crc_valid) {
   1adc4:	f898 3026 	ldrb.w	r3, [r8, #38]	; 0x26
   1adc8:	07db      	lsls	r3, r3, #31
   1adca:	d517      	bpl.n	1adfc <ull_conn_done+0x90>
		conn->supervision_expire = 0U;
   1adcc:	2300      	movs	r3, #0
			conn->supervision_expire = conn->supervision_reload;
   1adce:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
   1add2:	e01c      	b.n	1ae0e <ull_conn_done+0xa2>
				ull_conn_tx_demux(UINT8_MAX);
   1add4:	20ff      	movs	r0, #255	; 0xff
   1add6:	f7ff fefd 	bl	1abd4 <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   1adda:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   1adde:	2b00      	cmp	r3, #0
   1ade0:	d1eb      	bne.n	1adba <ull_conn_done+0x4e>
   1ade2:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
   1ade6:	462a      	mov	r2, r5
   1ade8:	f00c f805 	bl	26df6 <memq_peek>
   1adec:	2800      	cmp	r0, #0
   1adee:	d1e4      	bne.n	1adba <ull_conn_done+0x4e>
			} else if (lll->periph.latency_enabled) {
   1adf0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   1adf4:	075a      	lsls	r2, r3, #29
   1adf6:	d5e2      	bpl.n	1adbe <ull_conn_done+0x52>
				lll->latency_event = lll->latency;
   1adf8:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   1adfa:	e7df      	b.n	1adbc <ull_conn_done+0x50>
	else if (conn->connect_expire) {
   1adfc:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
   1ae00:	2b00      	cmp	r3, #0
   1ae02:	d07b      	beq.n	1aefc <ull_conn_done+0x190>
		if (conn->connect_expire > elapsed_event) {
   1ae04:	42b3      	cmp	r3, r6
   1ae06:	d972      	bls.n	1aeee <ull_conn_done+0x182>
			conn->connect_expire -= elapsed_event;
   1ae08:	1b9b      	subs	r3, r3, r6
   1ae0a:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
	if (conn->supervision_expire) {
   1ae0e:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
   1ae12:	b1e3      	cbz	r3, 1ae4e <ull_conn_done+0xe2>
		if (conn->supervision_expire > elapsed_event) {
   1ae14:	42b3      	cmp	r3, r6
   1ae16:	d978      	bls.n	1af0a <ull_conn_done+0x19e>
			conn->supervision_expire -= elapsed_event;
   1ae18:	1b9b      	subs	r3, r3, r6
   1ae1a:	b29b      	uxth	r3, r3
			lll->latency_event = 0U;
   1ae1c:	2200      	movs	r2, #0
			if (conn->supervision_expire <= 6U) {
   1ae1e:	2b06      	cmp	r3, #6
			conn->supervision_expire -= elapsed_event;
   1ae20:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
			lll->latency_event = 0U;
   1ae24:	8622      	strh	r2, [r4, #48]	; 0x30
			if (conn->supervision_expire <= 6U) {
   1ae26:	d972      	bls.n	1af0e <ull_conn_done+0x1a2>
			else if (lll->role) {
   1ae28:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1ae2c:	4293      	cmp	r3, r2
   1ae2e:	da0e      	bge.n	1ae4e <ull_conn_done+0xe2>
				if (latency_event) {
   1ae30:	2f00      	cmp	r7, #0
   1ae32:	d16c      	bne.n	1af0e <ull_conn_done+0x1a2>
					force = conn->periph.force & 0x01;
   1ae34:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
					conn->periph.force >>= 1U;
   1ae38:	085a      	lsrs	r2, r3, #1
					if (force) {
   1ae3a:	f013 0301 	ands.w	r3, r3, #1
						conn->periph.force |= BIT(31);
   1ae3e:	bf17      	itett	ne
   1ae40:	f042 4200 	orrne.w	r2, r2, #2147483648	; 0x80000000
					conn->periph.force >>= 1U;
   1ae44:	f8c4 2080 	streq.w	r2, [r4, #128]	; 0x80
						conn->periph.force |= BIT(31);
   1ae48:	f8c4 2080 	strne.w	r2, [r4, #128]	; 0x80
					force = conn->periph.force & 0x01;
   1ae4c:	461d      	movne	r5, r3
	if (conn->procedure_expire != 0U) {
   1ae4e:	f8b4 3078 	ldrh.w	r3, [r4, #120]	; 0x78
   1ae52:	b123      	cbz	r3, 1ae5e <ull_conn_done+0xf2>
		if (conn->procedure_expire > elapsed_event) {
   1ae54:	42b3      	cmp	r3, r6
   1ae56:	d95c      	bls.n	1af12 <ull_conn_done+0x1a6>
			conn->procedure_expire -= elapsed_event;
   1ae58:	1b9b      	subs	r3, r3, r6
   1ae5a:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1ae5e:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   1ae62:	f894 2089 	ldrb.w	r2, [r4, #137]	; 0x89
   1ae66:	1a9b      	subs	r3, r3, r2
   1ae68:	f003 0303 	and.w	r3, r3, #3
   1ae6c:	2b02      	cmp	r3, #2
   1ae6e:	d104      	bne.n	1ae7a <ull_conn_done+0x10e>
	     ((conn->llcp_type == LLCP_CONN_UPD) ||
   1ae70:	f894 308a 	ldrb.w	r3, [r4, #138]	; 0x8a
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1ae74:	3b01      	subs	r3, #1
   1ae76:	2b01      	cmp	r3, #1
   1ae78:	d905      	bls.n	1ae86 <ull_conn_done+0x11a>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   1ae7a:	f894 209c 	ldrb.w	r2, [r4, #156]	; 0x9c
   1ae7e:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
   1ae82:	429a      	cmp	r2, r3
   1ae84:	d001      	beq.n	1ae8a <ull_conn_done+0x11e>
		lll->latency_event = 0U;
   1ae86:	2300      	movs	r3, #0
   1ae88:	8623      	strh	r3, [r4, #48]	; 0x30
	if ((force) || (latency_event != lll->latency_event)) {
   1ae8a:	8e21      	ldrh	r1, [r4, #48]	; 0x30
   1ae8c:	b90d      	cbnz	r5, 1ae92 <ull_conn_done+0x126>
   1ae8e:	428f      	cmp	r7, r1
   1ae90:	d041      	beq.n	1af16 <ull_conn_done+0x1aa>
		lazy = lll->latency_event + 1U;
   1ae92:	3101      	adds	r1, #1
   1ae94:	b289      	uxth	r1, r1
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   1ae96:	e9dd 7308 	ldrd	r7, r3, [sp, #32]
   1ae9a:	ea53 0207 	orrs.w	r2, r3, r7
   1ae9e:	d101      	bne.n	1aea4 <ull_conn_done+0x138>
   1aea0:	b901      	cbnz	r1, 1aea4 <ull_conn_done+0x138>
   1aea2:	b345      	cbz	r5, 1aef6 <ull_conn_done+0x18a>
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   1aea4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1aea6:	481d      	ldr	r0, [pc, #116]	; (1af1c <ull_conn_done+0x1b0>)
		struct ll_conn *conn = lll->hdr.parent;
   1aea8:	69e6      	ldr	r6, [r4, #28]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1aeaa:	9606      	str	r6, [sp, #24]
   1aeac:	e9cd 5004 	strd	r5, r0, [sp, #16]
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   1aeb0:	3205      	adds	r2, #5
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1aeb2:	2000      	movs	r0, #0
   1aeb4:	9103      	str	r1, [sp, #12]
   1aeb6:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1aeba:	9700      	str	r7, [sp, #0]
   1aebc:	b2d2      	uxtb	r2, r2
   1aebe:	2101      	movs	r1, #1
   1aec0:	f00c fa42 	bl	27348 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1aec4:	f030 0302 	bics.w	r3, r0, #2
   1aec8:	d015      	beq.n	1aef6 <ull_conn_done+0x18a>
   1aeca:	f7fe f997 	bl	191fc <ull_disable_mark_get>
   1aece:	4286      	cmp	r6, r0
   1aed0:	d011      	beq.n	1aef6 <ull_conn_done+0x18a>
   1aed2:	4a13      	ldr	r2, [pc, #76]	; (1af20 <ull_conn_done+0x1b4>)
   1aed4:	4913      	ldr	r1, [pc, #76]	; (1af24 <ull_conn_done+0x1b8>)
   1aed6:	4814      	ldr	r0, [pc, #80]	; (1af28 <ull_conn_done+0x1bc>)
   1aed8:	f240 53ef 	movw	r3, #1519	; 0x5ef
   1aedc:	f006 f9c6 	bl	2126c <printk>
   1aee0:	4040      	eors	r0, r0
   1aee2:	f380 8811 	msr	BASEPRI, r0
   1aee6:	f04f 0003 	mov.w	r0, #3
   1aeea:	df02      	svc	2
   1aeec:	e003      	b.n	1aef6 <ull_conn_done+0x18a>
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
   1aeee:	213e      	movs	r1, #62	; 0x3e
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
   1aef0:	4620      	mov	r0, r4
   1aef2:	f7ff feb1 	bl	1ac58 <conn_cleanup>
}
   1aef6:	b00a      	add	sp, #40	; 0x28
   1aef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!conn->supervision_expire) {
   1aefc:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
   1af00:	2b00      	cmp	r3, #0
   1af02:	d184      	bne.n	1ae0e <ull_conn_done+0xa2>
			conn->supervision_expire = conn->supervision_reload;
   1af04:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
   1af08:	e761      	b.n	1adce <ull_conn_done+0x62>
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
   1af0a:	2108      	movs	r1, #8
   1af0c:	e7f0      	b.n	1aef0 <ull_conn_done+0x184>
				force = 1U;
   1af0e:	2501      	movs	r5, #1
   1af10:	e79d      	b.n	1ae4e <ull_conn_done+0xe2>
			conn_cleanup(conn, BT_HCI_ERR_LL_RESP_TIMEOUT);
   1af12:	2122      	movs	r1, #34	; 0x22
   1af14:	e7ec      	b.n	1aef0 <ull_conn_done+0x184>
	lazy = 0U;
   1af16:	4629      	mov	r1, r5
   1af18:	e7bd      	b.n	1ae96 <ull_conn_done+0x12a>
   1af1a:	bf00      	nop
   1af1c:	0001a08d 	.word	0x0001a08d
   1af20:	0002f5e1 	.word	0x0002f5e1
   1af24:	0002f6eb 	.word	0x0002f6eb
   1af28:	0002b804 	.word	0x0002b804

0001af2c <ull_conn_tx_lll_enqueue>:
{
   1af2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   1af30:	f8df 8088 	ldr.w	r8, [pc, #136]	; 1afbc <ull_conn_tx_lll_enqueue+0x90>
		LL_ASSERT(link);
   1af34:	f8df 9088 	ldr.w	r9, [pc, #136]	; 1afc0 <ull_conn_tx_lll_enqueue+0x94>
   1af38:	f8df a088 	ldr.w	sl, [pc, #136]	; 1afc4 <ull_conn_tx_lll_enqueue+0x98>
{
   1af3c:	4604      	mov	r4, r0
   1af3e:	460e      	mov	r6, r1
	while (conn->tx_head &&
   1af40:	f8d4 511c 	ldr.w	r5, [r4, #284]	; 0x11c
   1af44:	b105      	cbz	r5, 1af48 <ull_conn_tx_lll_enqueue+0x1c>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   1af46:	b90e      	cbnz	r6, 1af4c <ull_conn_tx_lll_enqueue+0x20>
}
   1af48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (conn->tx_head == conn->tx_ctrl) {
   1af4c:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
		conn->tx_head = conn->tx_head->next;
   1af50:	682b      	ldr	r3, [r5, #0]
	if (conn->tx_head == conn->tx_ctrl) {
   1af52:	4295      	cmp	r5, r2
   1af54:	d126      	bne.n	1afa4 <ull_conn_tx_lll_enqueue+0x78>
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   1af56:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
		conn->tx_head = conn->tx_head->next;
   1af5a:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   1af5e:	4295      	cmp	r5, r2
			conn->tx_ctrl = NULL;
   1af60:	bf06      	itte	eq
   1af62:	2300      	moveq	r3, #0
			conn->tx_ctrl_last = NULL;
   1af64:	e9c4 3348 	strdeq	r3, r3, [r4, #288]	; 0x120
			conn->tx_ctrl = conn->tx_head;
   1af68:	f8c4 3120 	strne.w	r3, [r4, #288]	; 0x120
		tx->next = tx;
   1af6c:	602d      	str	r5, [r5, #0]
		link = mem_acquire(&mem_link_tx.free);
   1af6e:	4640      	mov	r0, r8
   1af70:	f00b fedc 	bl	26d2c <mem_acquire>
		LL_ASSERT(link);
   1af74:	4607      	mov	r7, r0
   1af76:	b960      	cbnz	r0, 1af92 <ull_conn_tx_lll_enqueue+0x66>
   1af78:	4813      	ldr	r0, [pc, #76]	; (1afc8 <ull_conn_tx_lll_enqueue+0x9c>)
   1af7a:	f240 6343 	movw	r3, #1603	; 0x643
   1af7e:	464a      	mov	r2, r9
   1af80:	4651      	mov	r1, sl
   1af82:	f006 f973 	bl	2126c <printk>
   1af86:	4040      	eors	r0, r0
   1af88:	f380 8811 	msr	BASEPRI, r0
   1af8c:	f04f 0003 	mov.w	r0, #3
   1af90:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   1af92:	f104 025c 	add.w	r2, r4, #92	; 0x5c
   1af96:	4629      	mov	r1, r5
   1af98:	4638      	mov	r0, r7
   1af9a:	3e01      	subs	r6, #1
   1af9c:	f00b ff24 	bl	26de8 <memq_enqueue>
   1afa0:	b2f6      	uxtb	r6, r6
   1afa2:	e7cd      	b.n	1af40 <ull_conn_tx_lll_enqueue+0x14>
		if (conn->tx_head == conn->tx_data) {
   1afa4:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
		conn->tx_head = conn->tx_head->next;
   1afa8:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
		if (conn->tx_head == conn->tx_data) {
   1afac:	4295      	cmp	r5, r2
			conn->tx_data = conn->tx_data->next;
   1afae:	bf08      	it	eq
   1afb0:	f8c4 3128 	streq.w	r3, [r4, #296]	; 0x128
		tx->next = NULL;
   1afb4:	2300      	movs	r3, #0
   1afb6:	602b      	str	r3, [r5, #0]
   1afb8:	e7d9      	b.n	1af6e <ull_conn_tx_lll_enqueue+0x42>
   1afba:	bf00      	nop
   1afbc:	200031cc 	.word	0x200031cc
   1afc0:	0002f5e1 	.word	0x0002f5e1
   1afc4:	0002e896 	.word	0x0002e896
   1afc8:	0002b804 	.word	0x0002b804

0001afcc <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   1afcc:	4901      	ldr	r1, [pc, #4]	; (1afd4 <ull_conn_link_tx_release+0x8>)
   1afce:	f00b bec6 	b.w	26d5e <mem_release>
   1afd2:	bf00      	nop
   1afd4:	200031cc 	.word	0x200031cc

0001afd8 <ull_conn_ack_last_idx_get>:
}
   1afd8:	4b01      	ldr	r3, [pc, #4]	; (1afe0 <ull_conn_ack_last_idx_get+0x8>)
   1afda:	78d8      	ldrb	r0, [r3, #3]
   1afdc:	4770      	bx	lr
   1afde:	bf00      	nop
   1afe0:	20000da4 	.word	0x20000da4

0001afe4 <ull_conn_ack_peek>:
{
   1afe4:	b570      	push	{r4, r5, r6, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   1afe6:	4b0a      	ldr	r3, [pc, #40]	; (1b010 <ull_conn_ack_peek+0x2c>)
   1afe8:	789c      	ldrb	r4, [r3, #2]
   1afea:	78de      	ldrb	r6, [r3, #3]
	if (first == last) {
   1afec:	42b4      	cmp	r4, r6
{
   1afee:	4605      	mov	r5, r0
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   1aff0:	7818      	ldrb	r0, [r3, #0]
   1aff2:	d00b      	beq.n	1b00c <ull_conn_ack_peek+0x28>
	return (void *)(fifo + first * size);
   1aff4:	3304      	adds	r3, #4
   1aff6:	fb14 f400 	smulbb	r4, r4, r0
	if (!lll_tx) {
   1affa:	1918      	adds	r0, r3, r4
   1affc:	d005      	beq.n	1b00a <ull_conn_ack_peek+0x26>
	*ack_last = mfifo_conn_ack.l;
   1affe:	702e      	strb	r6, [r5, #0]
	*handle = lll_tx->handle;
   1b000:	5b1b      	ldrh	r3, [r3, r4]
   1b002:	800b      	strh	r3, [r1, #0]
	*tx = lll_tx->node;
   1b004:	6843      	ldr	r3, [r0, #4]
   1b006:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   1b008:	6818      	ldr	r0, [r3, #0]
}
   1b00a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   1b00c:	2000      	movs	r0, #0
   1b00e:	e7fc      	b.n	1b00a <ull_conn_ack_peek+0x26>
   1b010:	20000da4 	.word	0x20000da4

0001b014 <ull_conn_ack_by_last_peek>:
{
   1b014:	b530      	push	{r4, r5, lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   1b016:	4b09      	ldr	r3, [pc, #36]	; (1b03c <ull_conn_ack_by_last_peek+0x28>)
   1b018:	789c      	ldrb	r4, [r3, #2]
   1b01a:	781d      	ldrb	r5, [r3, #0]
	if (first == last) {
   1b01c:	4284      	cmp	r4, r0
   1b01e:	d00a      	beq.n	1b036 <ull_conn_ack_by_last_peek+0x22>
	return (void *)(fifo + first * size);
   1b020:	3304      	adds	r3, #4
   1b022:	fb14 f405 	smulbb	r4, r4, r5
	if (!lll_tx) {
   1b026:	1918      	adds	r0, r3, r4
   1b028:	d004      	beq.n	1b034 <ull_conn_ack_by_last_peek+0x20>
	*handle = lll_tx->handle;
   1b02a:	5b1b      	ldrh	r3, [r3, r4]
   1b02c:	800b      	strh	r3, [r1, #0]
	*tx = lll_tx->node;
   1b02e:	6843      	ldr	r3, [r0, #4]
   1b030:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   1b032:	6818      	ldr	r0, [r3, #0]
}
   1b034:	bd30      	pop	{r4, r5, pc}
		return NULL;
   1b036:	2000      	movs	r0, #0
   1b038:	e7fc      	b.n	1b034 <ull_conn_ack_by_last_peek+0x20>
   1b03a:	bf00      	nop
   1b03c:	20000da4 	.word	0x20000da4

0001b040 <ull_conn_ack_dequeue>:
{
   1b040:	b510      	push	{r4, lr}
	return MFIFO_DEQUEUE(conn_ack);
   1b042:	4a09      	ldr	r2, [pc, #36]	; (1b068 <ull_conn_ack_dequeue+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   1b044:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   1b046:	78d0      	ldrb	r0, [r2, #3]
   1b048:	7811      	ldrb	r1, [r2, #0]
   1b04a:	7854      	ldrb	r4, [r2, #1]
   1b04c:	4298      	cmp	r0, r3
   1b04e:	d009      	beq.n	1b064 <ull_conn_ack_dequeue+0x24>
	mem = *((void **)(fifo + _first * size));
   1b050:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   1b054:	3301      	adds	r3, #1
   1b056:	b2db      	uxtb	r3, r3
		_first = 0U;
   1b058:	429c      	cmp	r4, r3
   1b05a:	bf08      	it	eq
   1b05c:	2300      	moveq	r3, #0
	mem = *((void **)(fifo + _first * size));
   1b05e:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   1b060:	7093      	strb	r3, [r2, #2]
}
   1b062:	bd10      	pop	{r4, pc}
		return NULL;
   1b064:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(conn_ack);
   1b066:	e7fc      	b.n	1b062 <ull_conn_ack_dequeue+0x22>
   1b068:	20000da4 	.word	0x20000da4

0001b06c <ull_conn_lll_ack_enqueue>:
{
   1b06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   1b06e:	4a12      	ldr	r2, [pc, #72]	; (1b0b8 <ull_conn_lll_ack_enqueue+0x4c>)
   1b070:	78d4      	ldrb	r4, [r2, #3]
	if (last == count) {
   1b072:	7857      	ldrb	r7, [r2, #1]
   1b074:	7895      	ldrb	r5, [r2, #2]
   1b076:	7816      	ldrb	r6, [r2, #0]
	last = last + 1;
   1b078:	1c63      	adds	r3, r4, #1
   1b07a:	b2db      	uxtb	r3, r3
		last = 0U;
   1b07c:	429f      	cmp	r7, r3
   1b07e:	bf08      	it	eq
   1b080:	2300      	moveq	r3, #0
	if (last == first) {
   1b082:	429d      	cmp	r5, r3
   1b084:	d004      	beq.n	1b090 <ull_conn_lll_ack_enqueue+0x24>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1b086:	1d15      	adds	r5, r2, #4
   1b088:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(lll_tx);
   1b08c:	192e      	adds	r6, r5, r4
   1b08e:	d10f      	bne.n	1b0b0 <ull_conn_lll_ack_enqueue+0x44>
   1b090:	4a0a      	ldr	r2, [pc, #40]	; (1b0bc <ull_conn_lll_ack_enqueue+0x50>)
   1b092:	490b      	ldr	r1, [pc, #44]	; (1b0c0 <ull_conn_lll_ack_enqueue+0x54>)
   1b094:	480b      	ldr	r0, [pc, #44]	; (1b0c4 <ull_conn_lll_ack_enqueue+0x58>)
   1b096:	f240 6381 	movw	r3, #1665	; 0x681
   1b09a:	f006 f8e7 	bl	2126c <printk>
   1b09e:	4040      	eors	r0, r0
   1b0a0:	f380 8811 	msr	BASEPRI, r0
   1b0a4:	f04f 0003 	mov.w	r0, #3
   1b0a8:	df02      	svc	2
	lll_tx->handle = handle;
   1b0aa:	2300      	movs	r3, #0
   1b0ac:	801b      	strh	r3, [r3, #0]
   1b0ae:	deff      	udf	#255	; 0xff
   1b0b0:	5328      	strh	r0, [r5, r4]
	lll_tx->node = tx;
   1b0b2:	6071      	str	r1, [r6, #4]
	*last = idx; /* Commit: Update write index */
   1b0b4:	70d3      	strb	r3, [r2, #3]
}
   1b0b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b0b8:	20000da4 	.word	0x20000da4
   1b0bc:	0002f5e1 	.word	0x0002f5e1
   1b0c0:	0002f67d 	.word	0x0002f67d
   1b0c4:	0002b804 	.word	0x0002b804

0001b0c8 <ull_conn_tx_ack>:
{
   1b0c8:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(pdu_tx->len);
   1b0ca:	7953      	ldrb	r3, [r2, #5]
{
   1b0cc:	4605      	mov	r5, r0
   1b0ce:	460e      	mov	r6, r1
   1b0d0:	4614      	mov	r4, r2
	LL_ASSERT(pdu_tx->len);
   1b0d2:	b963      	cbnz	r3, 1b0ee <ull_conn_tx_ack+0x26>
   1b0d4:	4a2c      	ldr	r2, [pc, #176]	; (1b188 <ull_conn_tx_ack+0xc0>)
   1b0d6:	492d      	ldr	r1, [pc, #180]	; (1b18c <ull_conn_tx_ack+0xc4>)
   1b0d8:	482d      	ldr	r0, [pc, #180]	; (1b190 <ull_conn_tx_ack+0xc8>)
   1b0da:	f240 638e 	movw	r3, #1678	; 0x68e
   1b0de:	f006 f8c5 	bl	2126c <printk>
   1b0e2:	4040      	eors	r0, r0
   1b0e4:	f380 8811 	msr	BASEPRI, r0
   1b0e8:	f04f 0003 	mov.w	r0, #3
   1b0ec:	df02      	svc	2
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   1b0ee:	7923      	ldrb	r3, [r4, #4]
   1b0f0:	f003 0203 	and.w	r2, r3, #3
   1b0f4:	2a03      	cmp	r2, #3
   1b0f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1b0fa:	d13e      	bne.n	1b17a <ull_conn_tx_ack+0xb2>
		if (handle != LLL_HANDLE_INVALID) {
   1b0fc:	4295      	cmp	r5, r2
   1b0fe:	d008      	beq.n	1b112 <ull_conn_tx_ack+0x4a>
			struct ll_conn *conn = ll_conn_get(handle);
   1b100:	4628      	mov	r0, r5
   1b102:	f7ff f86f 	bl	1a1e4 <ll_conn_get>
	switch (pdu_tx->llctrl.opcode) {
   1b106:	79e3      	ldrb	r3, [r4, #7]
   1b108:	2b07      	cmp	r3, #7
   1b10a:	d00f      	beq.n	1b12c <ull_conn_tx_ack+0x64>
   1b10c:	d80a      	bhi.n	1b124 <ull_conn_tx_ack+0x5c>
   1b10e:	2b02      	cmp	r3, #2
   1b110:	d013      	beq.n	1b13a <ull_conn_tx_ack+0x72>
		if (link->next == (void *)tx) {
   1b112:	6833      	ldr	r3, [r6, #0]
   1b114:	42a3      	cmp	r3, r4
   1b116:	d11c      	bne.n	1b152 <ull_conn_tx_ack+0x8a>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   1b118:	4620      	mov	r0, r4
   1b11a:	491e      	ldr	r1, [pc, #120]	; (1b194 <ull_conn_tx_ack+0xcc>)
}
   1b11c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
   1b120:	f00b be1d 	b.w	26d5e <mem_release>
	switch (pdu_tx->llctrl.opcode) {
   1b124:	2b09      	cmp	r3, #9
   1b126:	d001      	beq.n	1b12c <ull_conn_tx_ack+0x64>
   1b128:	2b13      	cmp	r3, #19
   1b12a:	d1f2      	bne.n	1b112 <ull_conn_tx_ack+0x4a>
		conn->common.txn_lock = 0U;
   1b12c:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
   1b130:	f36f 0341 	bfc	r3, #1, #1
   1b134:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
		break;
   1b138:	e7eb      	b.n	1b112 <ull_conn_tx_ack+0x4a>
		if (pdu_tx->llctrl.terminate_ind.error_code ==
   1b13a:	7a23      	ldrb	r3, [r4, #8]
			conn->llcp_terminate.reason_final =
   1b13c:	2b13      	cmp	r3, #19
   1b13e:	bf08      	it	eq
   1b140:	2316      	moveq	r3, #22
   1b142:	f880 30d3 	strb.w	r3, [r0, #211]	; 0xd3
		conn->llcp_terminate.ack--;
   1b146:	f890 30d1 	ldrb.w	r3, [r0, #209]	; 0xd1
   1b14a:	3b01      	subs	r3, #1
   1b14c:	f880 30d1 	strb.w	r3, [r0, #209]	; 0xd1
	break;
   1b150:	e7df      	b.n	1b112 <ull_conn_tx_ack+0x4a>
			LL_ASSERT(!link->next);
   1b152:	b163      	cbz	r3, 1b16e <ull_conn_tx_ack+0xa6>
   1b154:	4a0c      	ldr	r2, [pc, #48]	; (1b188 <ull_conn_tx_ack+0xc0>)
   1b156:	4910      	ldr	r1, [pc, #64]	; (1b198 <ull_conn_tx_ack+0xd0>)
   1b158:	480d      	ldr	r0, [pc, #52]	; (1b190 <ull_conn_tx_ack+0xc8>)
   1b15a:	f240 63a1 	movw	r3, #1697	; 0x6a1
   1b15e:	f006 f885 	bl	2126c <printk>
   1b162:	4040      	eors	r0, r0
   1b164:	f380 8811 	msr	BASEPRI, r0
   1b168:	f04f 0003 	mov.w	r0, #3
   1b16c:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   1b16e:	4621      	mov	r1, r4
   1b170:	4628      	mov	r0, r5
}
   1b172:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
   1b176:	f7fd bfb9 	b.w	190ec <ll_tx_ack_put>
	} else if (handle == LLL_HANDLE_INVALID) {
   1b17a:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   1b17c:	bf04      	itt	eq
   1b17e:	f36f 0301 	bfceq	r3, #0, #2
   1b182:	7123      	strbeq	r3, [r4, #4]
   1b184:	e7f3      	b.n	1b16e <ull_conn_tx_ack+0xa6>
   1b186:	bf00      	nop
   1b188:	0002f5e1 	.word	0x0002f5e1
   1b18c:	0002f744 	.word	0x0002f744
   1b190:	0002b804 	.word	0x0002b804
   1b194:	20003118 	.word	0x20003118
   1b198:	0002f750 	.word	0x0002f750

0001b19c <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param)
{
   1b19c:	b510      	push	{r4, lr}
   1b19e:	460c      	mov	r4, r1
	struct ll_conn *conn = param;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   1b1a0:	b160      	cbz	r0, 1b1bc <ticker_update_latency_cancel_op_cb+0x20>
   1b1a2:	4a0a      	ldr	r2, [pc, #40]	; (1b1cc <ticker_update_latency_cancel_op_cb+0x30>)
   1b1a4:	490a      	ldr	r1, [pc, #40]	; (1b1d0 <ticker_update_latency_cancel_op_cb+0x34>)
   1b1a6:	480b      	ldr	r0, [pc, #44]	; (1b1d4 <ticker_update_latency_cancel_op_cb+0x38>)
   1b1a8:	f240 237e 	movw	r3, #638	; 0x27e
   1b1ac:	f006 f85e 	bl	2126c <printk>
   1b1b0:	4040      	eors	r0, r0
   1b1b2:	f380 8811 	msr	BASEPRI, r0
   1b1b6:	f04f 0003 	mov.w	r0, #3
   1b1ba:	df02      	svc	2

	conn->periph.latency_cancel = 0U;
   1b1bc:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   1b1c0:	f36f 0382 	bfc	r3, #2, #1
   1b1c4:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
}
   1b1c8:	bd10      	pop	{r4, pc}
   1b1ca:	bf00      	nop
   1b1cc:	0002f76d 	.word	0x0002f76d
   1b1d0:	0002f7b3 	.word	0x0002f7b3
   1b1d4:	0002b804 	.word	0x0002b804

0001b1d8 <ticker_op_cb>:
{
   1b1d8:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1b1da:	b160      	cbz	r0, 1b1f6 <ticker_op_cb+0x1e>
   1b1dc:	4a06      	ldr	r2, [pc, #24]	; (1b1f8 <ticker_op_cb+0x20>)
   1b1de:	4907      	ldr	r1, [pc, #28]	; (1b1fc <ticker_op_cb+0x24>)
   1b1e0:	4807      	ldr	r0, [pc, #28]	; (1b200 <ticker_op_cb+0x28>)
   1b1e2:	f240 2376 	movw	r3, #630	; 0x276
   1b1e6:	f006 f841 	bl	2126c <printk>
   1b1ea:	4040      	eors	r0, r0
   1b1ec:	f380 8811 	msr	BASEPRI, r0
   1b1f0:	f04f 0003 	mov.w	r0, #3
   1b1f4:	df02      	svc	2
}
   1b1f6:	bd08      	pop	{r3, pc}
   1b1f8:	0002f76d 	.word	0x0002f76d
   1b1fc:	0002f7ba 	.word	0x0002f7ba
   1b200:	0002b804 	.word	0x0002b804

0001b204 <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   1b204:	2801      	cmp	r0, #1
{
   1b206:	b510      	push	{r4, lr}
   1b208:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   1b20a:	d110      	bne.n	1b22e <ticker_op_stop_adv_cb+0x2a>
   1b20c:	f7fd fff6 	bl	191fc <ull_disable_mark_get>
   1b210:	4284      	cmp	r4, r0
   1b212:	d00c      	beq.n	1b22e <ticker_op_stop_adv_cb+0x2a>
   1b214:	4a06      	ldr	r2, [pc, #24]	; (1b230 <ticker_op_stop_adv_cb+0x2c>)
   1b216:	4907      	ldr	r1, [pc, #28]	; (1b234 <ticker_op_stop_adv_cb+0x30>)
   1b218:	4807      	ldr	r0, [pc, #28]	; (1b238 <ticker_op_stop_adv_cb+0x34>)
   1b21a:	f240 236e 	movw	r3, #622	; 0x26e
   1b21e:	f006 f825 	bl	2126c <printk>
   1b222:	4040      	eors	r0, r0
   1b224:	f380 8811 	msr	BASEPRI, r0
   1b228:	f04f 0003 	mov.w	r0, #3
   1b22c:	df02      	svc	2
}
   1b22e:	bd10      	pop	{r4, pc}
   1b230:	0002f76d 	.word	0x0002f76d
   1b234:	0002f7c6 	.word	0x0002f7c6
   1b238:	0002b804 	.word	0x0002b804

0001b23c <ull_periph_ticker_cb>:
{
   1b23c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b240:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1b242:	f89d 9020 	ldrb.w	r9, [sp, #32]
   1b246:	4690      	mov	r8, r2
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   1b248:	8d22      	ldrh	r2, [r4, #40]	; 0x28
{
   1b24a:	461e      	mov	r6, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   1b24c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1b250:	429a      	cmp	r2, r3
{
   1b252:	4607      	mov	r7, r0
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   1b254:	d03f      	beq.n	1b2d6 <ull_periph_ticker_cb+0x9a>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   1b256:	4601      	mov	r1, r0
   1b258:	4632      	mov	r2, r6
   1b25a:	4620      	mov	r0, r4
   1b25c:	f7e5 fc18 	bl	a90 <ull_conn_llcp>
		if (ret) {
   1b260:	2800      	cmp	r0, #0
   1b262:	d138      	bne.n	1b2d6 <ull_periph_ticker_cb+0x9a>
	return ++hdr->ref;
   1b264:	7825      	ldrb	r5, [r4, #0]
   1b266:	3501      	adds	r5, #1
   1b268:	b2ed      	uxtb	r5, r5
   1b26a:	7025      	strb	r5, [r4, #0]
	LL_ASSERT(ref);
   1b26c:	b965      	cbnz	r5, 1b288 <ull_periph_ticker_cb+0x4c>
   1b26e:	4a1b      	ldr	r2, [pc, #108]	; (1b2dc <ull_periph_ticker_cb+0xa0>)
   1b270:	491b      	ldr	r1, [pc, #108]	; (1b2e0 <ull_periph_ticker_cb+0xa4>)
   1b272:	481c      	ldr	r0, [pc, #112]	; (1b2e4 <ull_periph_ticker_cb+0xa8>)
   1b274:	f44f 7300 	mov.w	r3, #512	; 0x200
   1b278:	f005 fff8 	bl	2126c <printk>
   1b27c:	4040      	eors	r0, r0
   1b27e:	f380 8811 	msr	BASEPRI, r0
   1b282:	f04f 0003 	mov.w	r0, #3
   1b286:	df02      	svc	2
	p.ticks_at_expire = ticks_at_expire;
   1b288:	4d17      	ldr	r5, [pc, #92]	; (1b2e8 <ull_periph_ticker_cb+0xac>)
	p.param = &conn->lll;
   1b28a:	f104 031c 	add.w	r3, r4, #28
   1b28e:	60eb      	str	r3, [r5, #12]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1b290:	2200      	movs	r2, #0
	mfy.param = &p;
   1b292:	4b16      	ldr	r3, [pc, #88]	; (1b2ec <ull_periph_ticker_cb+0xb0>)
	p.lazy = lazy;
   1b294:	812e      	strh	r6, [r5, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1b296:	4611      	mov	r1, r2
   1b298:	2001      	movs	r0, #1
	p.remainder = remainder;
   1b29a:	e9c5 7800 	strd	r7, r8, [r5]
	p.force = force;
   1b29e:	f885 900a 	strb.w	r9, [r5, #10]
	mfy.param = &p;
   1b2a2:	609d      	str	r5, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1b2a4:	f7fb fbaa 	bl	169fc <mayfly_enqueue>
	LL_ASSERT(!err);
   1b2a8:	b160      	cbz	r0, 1b2c4 <ull_periph_ticker_cb+0x88>
   1b2aa:	4a0c      	ldr	r2, [pc, #48]	; (1b2dc <ull_periph_ticker_cb+0xa0>)
   1b2ac:	4910      	ldr	r1, [pc, #64]	; (1b2f0 <ull_periph_ticker_cb+0xb4>)
   1b2ae:	480d      	ldr	r0, [pc, #52]	; (1b2e4 <ull_periph_ticker_cb+0xa8>)
   1b2b0:	f240 230d 	movw	r3, #525	; 0x20d
   1b2b4:	f005 ffda 	bl	2126c <printk>
   1b2b8:	4040      	eors	r0, r0
   1b2ba:	f380 8811 	msr	BASEPRI, r0
   1b2be:	f04f 0003 	mov.w	r0, #3
   1b2c2:	df02      	svc	2
	ull_conn_tx_demux(UINT8_MAX);
   1b2c4:	20ff      	movs	r0, #255	; 0xff
   1b2c6:	f7ff fc85 	bl	1abd4 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   1b2ca:	4620      	mov	r0, r4
   1b2cc:	21ff      	movs	r1, #255	; 0xff
}
   1b2ce:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   1b2d2:	f7ff be2b 	b.w	1af2c <ull_conn_tx_lll_enqueue>
}
   1b2d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b2da:	bf00      	nop
   1b2dc:	0002f76d 	.word	0x0002f76d
   1b2e0:	0002f51a 	.word	0x0002f51a
   1b2e4:	0002b804 	.word	0x0002b804
   1b2e8:	20003218 	.word	0x20003218
   1b2ec:	20000e5c 	.word	0x20000e5c
   1b2f0:	0002f2ed 	.word	0x0002f2ed

0001b2f4 <ull_periph_latency_cancel>:
{
   1b2f4:	b500      	push	{lr}
	if (conn->lll.latency_event && !conn->periph.latency_cancel) {
   1b2f6:	8e03      	ldrh	r3, [r0, #48]	; 0x30
{
   1b2f8:	b089      	sub	sp, #36	; 0x24
	if (conn->lll.latency_event && !conn->periph.latency_cancel) {
   1b2fa:	b33b      	cbz	r3, 1b34c <ull_periph_latency_cancel+0x58>
   1b2fc:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
   1b300:	f012 0304 	ands.w	r3, r2, #4
   1b304:	d122      	bne.n	1b34c <ull_periph_latency_cancel+0x58>
		conn->periph.latency_cancel = 1U;
   1b306:	f042 0204 	orr.w	r2, r2, #4
   1b30a:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
				      (TICKER_ID_CONN_BASE + handle),
   1b30e:	1d4a      	adds	r2, r1, #5
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   1b310:	4910      	ldr	r1, [pc, #64]	; (1b354 <ull_periph_latency_cancel+0x60>)
   1b312:	9006      	str	r0, [sp, #24]
   1b314:	e9cd 3104 	strd	r3, r1, [sp, #16]
   1b318:	2101      	movs	r1, #1
   1b31a:	e9cd 3102 	strd	r3, r1, [sp, #8]
   1b31e:	e9cd 3300 	strd	r3, r3, [sp]
   1b322:	4618      	mov	r0, r3
   1b324:	b2d2      	uxtb	r2, r2
   1b326:	2103      	movs	r1, #3
   1b328:	f00c f80e 	bl	27348 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1b32c:	f030 0302 	bics.w	r3, r0, #2
   1b330:	d00c      	beq.n	1b34c <ull_periph_latency_cancel+0x58>
   1b332:	4a09      	ldr	r2, [pc, #36]	; (1b358 <ull_periph_latency_cancel+0x64>)
   1b334:	4909      	ldr	r1, [pc, #36]	; (1b35c <ull_periph_latency_cancel+0x68>)
   1b336:	480a      	ldr	r0, [pc, #40]	; (1b360 <ull_periph_latency_cancel+0x6c>)
   1b338:	f44f 73e3 	mov.w	r3, #454	; 0x1c6
   1b33c:	f005 ff96 	bl	2126c <printk>
   1b340:	4040      	eors	r0, r0
   1b342:	f380 8811 	msr	BASEPRI, r0
   1b346:	f04f 0003 	mov.w	r0, #3
   1b34a:	df02      	svc	2
}
   1b34c:	b009      	add	sp, #36	; 0x24
   1b34e:	f85d fb04 	ldr.w	pc, [sp], #4
   1b352:	bf00      	nop
   1b354:	0001b19d 	.word	0x0001b19d
   1b358:	0002f76d 	.word	0x0002f76d
   1b35c:	0002f6be 	.word	0x0002f6be
   1b360:	0002b804 	.word	0x0002b804

0001b364 <ll_fal_clear>:
{
	return FAL_SIZE;
}

uint8_t ll_fal_clear(void)
{
   1b364:	b508      	push	{r3, lr}
#if defined(CONFIG_BT_BROADCASTER)
	if (ull_adv_filter_pol_get(0)) {
   1b366:	2000      	movs	r0, #0
   1b368:	f00c f8d9 	bl	2751e <ull_adv_filter_pol_get>
   1b36c:	b108      	cbz	r0, 1b372 <ll_fal_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1b36e:	200c      	movs	r0, #12
#endif /* CONFIG_BT_CTLR_PRIVACY */

	fal_anon = 0U;

	return 0;
}
   1b370:	bd08      	pop	{r3, pc}
	if (ull_scan_filter_pol_get(0) & 0x1) {
   1b372:	f00c f9d1 	bl	27718 <ull_scan_filter_pol_get>
   1b376:	f010 0001 	ands.w	r0, r0, #1
   1b37a:	d1f8      	bne.n	1b36e <ll_fal_clear+0xa>
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   1b37c:	4b02      	ldr	r3, [pc, #8]	; (1b388 <ll_fal_clear+0x24>)
   1b37e:	7018      	strb	r0, [r3, #0]
	filter->addr_type_bitmask = 0;
   1b380:	7058      	strb	r0, [r3, #1]
	fal_anon = 0U;
   1b382:	4b02      	ldr	r3, [pc, #8]	; (1b38c <ll_fal_clear+0x28>)
   1b384:	7018      	strb	r0, [r3, #0]
	return 0;
   1b386:	e7f3      	b.n	1b370 <ll_fal_clear+0xc>
   1b388:	200038bb 	.word	0x200038bb
   1b38c:	200038ba 	.word	0x200038ba

0001b390 <ll_fal_add>:
{
   1b390:	b570      	push	{r4, r5, r6, lr}
   1b392:	4604      	mov	r4, r0
	if (ull_adv_filter_pol_get(0)) {
   1b394:	2000      	movs	r0, #0
   1b396:	f00c f8c2 	bl	2751e <ull_adv_filter_pol_get>
   1b39a:	b108      	cbz	r0, 1b3a0 <ll_fal_add+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1b39c:	200c      	movs	r0, #12
}
   1b39e:	bd70      	pop	{r4, r5, r6, pc}
	if (ull_scan_filter_pol_get(0) & 0x1) {
   1b3a0:	f00c f9ba 	bl	27718 <ull_scan_filter_pol_get>
   1b3a4:	f010 0001 	ands.w	r0, r0, #1
   1b3a8:	d1f8      	bne.n	1b39c <ll_fal_add+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
   1b3aa:	7823      	ldrb	r3, [r4, #0]
   1b3ac:	2bff      	cmp	r3, #255	; 0xff
   1b3ae:	d103      	bne.n	1b3b8 <ll_fal_add+0x28>
		fal_anon = 1U;
   1b3b0:	4b12      	ldr	r3, [pc, #72]	; (1b3fc <ll_fal_add+0x6c>)
   1b3b2:	2201      	movs	r2, #1
   1b3b4:	701a      	strb	r2, [r3, #0]
		return 0;
   1b3b6:	e7f2      	b.n	1b39e <ll_fal_add+0xe>
	if (filter->enable_bitmask == LLL_FILTER_BITMASK_ALL) {
   1b3b8:	4d11      	ldr	r5, [pc, #68]	; (1b400 <ll_fal_add+0x70>)
   1b3ba:	782a      	ldrb	r2, [r5, #0]
   1b3bc:	2aff      	cmp	r2, #255	; 0xff
	return filter_add(&fal_filter, addr->type, addr->a.val);
   1b3be:	f104 0101 	add.w	r1, r4, #1
	if (filter->enable_bitmask == LLL_FILTER_BITMASK_ALL) {
   1b3c2:	d018      	beq.n	1b3f6 <ll_fal_add+0x66>
	     (filter->enable_bitmask & BIT(index));
   1b3c4:	fa22 f400 	lsr.w	r4, r2, r0
	for (index = 0;
   1b3c8:	f014 0401 	ands.w	r4, r4, #1
   1b3cc:	d111      	bne.n	1b3f2 <ll_fal_add+0x62>
	filter->enable_bitmask |= BIT(index);
   1b3ce:	2601      	movs	r6, #1
   1b3d0:	4086      	lsls	r6, r0
   1b3d2:	4332      	orrs	r2, r6
   1b3d4:	702a      	strb	r2, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1b3d6:	f003 0301 	and.w	r3, r3, #1
   1b3da:	786a      	ldrb	r2, [r5, #1]
   1b3dc:	4083      	lsls	r3, r0
   1b3de:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1b3e0:	2206      	movs	r2, #6
   1b3e2:	fb02 5000 	mla	r0, r2, r0, r5
   1b3e6:	3002      	adds	r0, #2
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1b3e8:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1b3ea:	f008 fcdd 	bl	23da8 <memcpy>
	return filter_add(&fal_filter, addr->type, addr->a.val);
   1b3ee:	b2e0      	uxtb	r0, r4
   1b3f0:	e7d5      	b.n	1b39e <ll_fal_add+0xe>
	     index++) {
   1b3f2:	3001      	adds	r0, #1
   1b3f4:	e7e6      	b.n	1b3c4 <ll_fal_add+0x34>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1b3f6:	2407      	movs	r4, #7
   1b3f8:	e7f9      	b.n	1b3ee <ll_fal_add+0x5e>
   1b3fa:	bf00      	nop
   1b3fc:	200038ba 	.word	0x200038ba
   1b400:	200038bb 	.word	0x200038bb

0001b404 <ll_fal_remove>:
{
   1b404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b408:	4607      	mov	r7, r0
	if (ull_adv_filter_pol_get(0)) {
   1b40a:	2000      	movs	r0, #0
   1b40c:	f00c f887 	bl	2751e <ull_adv_filter_pol_get>
   1b410:	b110      	cbz	r0, 1b418 <ll_fal_remove+0x14>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1b412:	200c      	movs	r0, #12
}
   1b414:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ull_scan_filter_pol_get(0) & 0x1) {
   1b418:	f00c f97e 	bl	27718 <ull_scan_filter_pol_get>
   1b41c:	f010 0401 	ands.w	r4, r0, #1
   1b420:	d1f7      	bne.n	1b412 <ll_fal_remove+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
   1b422:	f897 8000 	ldrb.w	r8, [r7]
   1b426:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1b42a:	d103      	bne.n	1b434 <ll_fal_remove+0x30>
		fal_anon = 0U;
   1b42c:	4b17      	ldr	r3, [pc, #92]	; (1b48c <ll_fal_remove+0x88>)
		return 0;
   1b42e:	4620      	mov	r0, r4
		fal_anon = 0U;
   1b430:	701c      	strb	r4, [r3, #0]
		return 0;
   1b432:	e7ef      	b.n	1b414 <ll_fal_remove+0x10>
	if (!filter->enable_bitmask) {
   1b434:	4d16      	ldr	r5, [pc, #88]	; (1b490 <ll_fal_remove+0x8c>)
   1b436:	782b      	ldrb	r3, [r5, #0]
	return filter_remove(&fal_filter, addr->type, addr->a.val);
   1b438:	3701      	adds	r7, #1
	if (!filter->enable_bitmask) {
   1b43a:	b123      	cbz	r3, 1b446 <ll_fal_remove+0x42>
   1b43c:	f105 092c 	add.w	r9, r5, #44	; 0x2c
	index = FAL_SIZE;
   1b440:	2608      	movs	r6, #8
	while (index--) {
   1b442:	3e01      	subs	r6, #1
   1b444:	d202      	bcs.n	1b44c <ll_fal_remove+0x48>
		return BT_HCI_ERR_INVALID_PARAM;
   1b446:	2412      	movs	r4, #18
	return filter_remove(&fal_filter, addr->type, addr->a.val);
   1b448:	b2e0      	uxtb	r0, r4
   1b44a:	e7e3      	b.n	1b414 <ll_fal_remove+0x10>
		if ((filter->enable_bitmask & BIT(index)) &&
   1b44c:	782b      	ldrb	r3, [r5, #0]
   1b44e:	40f3      	lsrs	r3, r6
   1b450:	07da      	lsls	r2, r3, #31
   1b452:	d517      	bpl.n	1b484 <ll_fal_remove+0x80>
		    (((filter->addr_type_bitmask >> index) & 0x01) ==
   1b454:	786b      	ldrb	r3, [r5, #1]
   1b456:	4133      	asrs	r3, r6
   1b458:	ea83 0308 	eor.w	r3, r3, r8
		if ((filter->enable_bitmask & BIT(index)) &&
   1b45c:	07db      	lsls	r3, r3, #31
   1b45e:	d411      	bmi.n	1b484 <ll_fal_remove+0x80>
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
   1b460:	2206      	movs	r2, #6
   1b462:	4639      	mov	r1, r7
   1b464:	4648      	mov	r0, r9
   1b466:	f008 fc8e 	bl	23d86 <memcmp>
		     (addr_type & 0x01)) &&
   1b46a:	b958      	cbnz	r0, 1b484 <ll_fal_remove+0x80>
			filter->enable_bitmask &= ~BIT(index);
   1b46c:	2301      	movs	r3, #1
   1b46e:	fa03 f606 	lsl.w	r6, r3, r6
   1b472:	782b      	ldrb	r3, [r5, #0]
   1b474:	ea23 0306 	bic.w	r3, r3, r6
   1b478:	702b      	strb	r3, [r5, #0]
			filter->addr_type_bitmask &= ~BIT(index);
   1b47a:	786b      	ldrb	r3, [r5, #1]
   1b47c:	ea23 0606 	bic.w	r6, r3, r6
   1b480:	706e      	strb	r6, [r5, #1]
			return 0;
   1b482:	e7e1      	b.n	1b448 <ll_fal_remove+0x44>
   1b484:	f1a9 0906 	sub.w	r9, r9, #6
   1b488:	e7db      	b.n	1b442 <ll_fal_remove+0x3e>
   1b48a:	bf00      	nop
   1b48c:	200038ba 	.word	0x200038ba
   1b490:	200038bb 	.word	0x200038bb

0001b494 <ull_filter_reset>:
	fal_anon = 0U;
   1b494:	4a03      	ldr	r2, [pc, #12]	; (1b4a4 <ull_filter_reset+0x10>)
   1b496:	2300      	movs	r3, #0
   1b498:	7013      	strb	r3, [r2, #0]
	filter->enable_bitmask = 0;
   1b49a:	4a03      	ldr	r2, [pc, #12]	; (1b4a8 <ull_filter_reset+0x14>)
   1b49c:	7013      	strb	r3, [r2, #0]
	filter->addr_type_bitmask = 0;
   1b49e:	7053      	strb	r3, [r2, #1]
}
   1b4a0:	4770      	bx	lr
   1b4a2:	bf00      	nop
   1b4a4:	200038ba 	.word	0x200038ba
   1b4a8:	200038bb 	.word	0x200038bb

0001b4ac <ull_filter_lll_get>:
{
   1b4ac:	b508      	push	{r3, lr}
	LL_ASSERT(filter);
   1b4ae:	b960      	cbnz	r0, 1b4ca <ull_filter_lll_get+0x1e>
   1b4b0:	4a07      	ldr	r2, [pc, #28]	; (1b4d0 <ull_filter_lll_get+0x24>)
   1b4b2:	4908      	ldr	r1, [pc, #32]	; (1b4d4 <ull_filter_lll_get+0x28>)
   1b4b4:	4808      	ldr	r0, [pc, #32]	; (1b4d8 <ull_filter_lll_get+0x2c>)
   1b4b6:	f240 23e3 	movw	r3, #739	; 0x2e3
   1b4ba:	f005 fed7 	bl	2126c <printk>
   1b4be:	4040      	eors	r0, r0
   1b4c0:	f380 8811 	msr	BASEPRI, r0
   1b4c4:	f04f 0003 	mov.w	r0, #3
   1b4c8:	df02      	svc	2
}
   1b4ca:	4804      	ldr	r0, [pc, #16]	; (1b4dc <ull_filter_lll_get+0x30>)
   1b4cc:	bd08      	pop	{r3, pc}
   1b4ce:	bf00      	nop
   1b4d0:	0002f819 	.word	0x0002f819
   1b4d4:	0002f867 	.word	0x0002f867
   1b4d8:	0002b804 	.word	0x0002b804
   1b4dc:	200038bb 	.word	0x200038bb

0001b4e0 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   1b4e0:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	lll_prof_enter_ull_high();

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   1b4e2:	4b08      	ldr	r3, [pc, #32]	; (1b504 <rtc0_nrf5_isr+0x24>)
   1b4e4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   1b4e8:	b122      	cbz	r2, 1b4f4 <rtc0_nrf5_isr+0x14>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   1b4ea:	2000      	movs	r0, #0
   1b4ec:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140

		ticker_trigger(0);
   1b4f0:	f7fb ff9e 	bl	17430 <ticker_trigger>
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   1b4f4:	2001      	movs	r0, #1
   1b4f6:	f7fb fad1 	bl	16a9c <mayfly_run>

	lll_prof_exit_ull_low();
#endif

	DEBUG_TICKER_ISR(0);
}
   1b4fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   1b4fe:	2002      	movs	r0, #2
   1b500:	f7fb bacc 	b.w	16a9c <mayfly_run>
   1b504:	4000b000 	.word	0x4000b000

0001b508 <ticker_stop_op_cb>:
static uint8_t preempt_stop_ack;
static uint8_t preempt_req;
static uint8_t volatile preempt_ack;

static void ticker_stop_op_cb(uint32_t status, void *param)
{
   1b508:	b510      	push	{r4, lr}
	ARG_UNUSED(param);
	ARG_UNUSED(status);

	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   1b50a:	4b0d      	ldr	r3, [pc, #52]	; (1b540 <ticker_stop_op_cb+0x38>)
   1b50c:	4c0d      	ldr	r4, [pc, #52]	; (1b544 <ticker_stop_op_cb+0x3c>)
   1b50e:	781b      	ldrb	r3, [r3, #0]
   1b510:	7822      	ldrb	r2, [r4, #0]
   1b512:	429a      	cmp	r2, r3
   1b514:	d10c      	bne.n	1b530 <ticker_stop_op_cb+0x28>
   1b516:	4a0c      	ldr	r2, [pc, #48]	; (1b548 <ticker_stop_op_cb+0x40>)
   1b518:	490c      	ldr	r1, [pc, #48]	; (1b54c <ticker_stop_op_cb+0x44>)
   1b51a:	480d      	ldr	r0, [pc, #52]	; (1b550 <ticker_stop_op_cb+0x48>)
   1b51c:	f240 23f6 	movw	r3, #758	; 0x2f6
   1b520:	f005 fea4 	bl	2126c <printk>
   1b524:	4040      	eors	r0, r0
   1b526:	f380 8811 	msr	BASEPRI, r0
   1b52a:	f04f 0003 	mov.w	r0, #3
   1b52e:	df02      	svc	2
	preempt_stop_ack++;
   1b530:	7823      	ldrb	r3, [r4, #0]
   1b532:	3301      	adds	r3, #1
   1b534:	7023      	strb	r3, [r4, #0]

	preempt_req = preempt_ack;
   1b536:	4b07      	ldr	r3, [pc, #28]	; (1b554 <ticker_stop_op_cb+0x4c>)
   1b538:	781a      	ldrb	r2, [r3, #0]
   1b53a:	4b07      	ldr	r3, [pc, #28]	; (1b558 <ticker_stop_op_cb+0x50>)
   1b53c:	701a      	strb	r2, [r3, #0]
}
   1b53e:	bd10      	pop	{r4, pc}
   1b540:	200038f2 	.word	0x200038f2
   1b544:	200038f1 	.word	0x200038f1
   1b548:	0002f86e 	.word	0x0002f86e
   1b54c:	0002f8b4 	.word	0x0002f8b4
   1b550:	0002b804 	.word	0x0002b804
   1b554:	200038ed 	.word	0x200038ed
   1b558:	200038ee 	.word	0x200038ee

0001b55c <ticker_start_op_cb>:

static void ticker_start_op_cb(uint32_t status, void *param)
{
   1b55c:	b510      	push	{r4, lr}
	ARG_UNUSED(param);
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1b55e:	b160      	cbz	r0, 1b57a <ticker_start_op_cb+0x1e>
   1b560:	4a1c      	ldr	r2, [pc, #112]	; (1b5d4 <ticker_start_op_cb+0x78>)
   1b562:	491d      	ldr	r1, [pc, #116]	; (1b5d8 <ticker_start_op_cb+0x7c>)
   1b564:	481d      	ldr	r0, [pc, #116]	; (1b5dc <ticker_start_op_cb+0x80>)
   1b566:	f240 23ff 	movw	r3, #767	; 0x2ff
   1b56a:	f005 fe7f 	bl	2126c <printk>
   1b56e:	4040      	eors	r0, r0
   1b570:	f380 8811 	msr	BASEPRI, r0
   1b574:	f04f 0003 	mov.w	r0, #3
   1b578:	df02      	svc	2

	LL_ASSERT(preempt_start_req != preempt_start_ack);
   1b57a:	4b19      	ldr	r3, [pc, #100]	; (1b5e0 <ticker_start_op_cb+0x84>)
   1b57c:	4c19      	ldr	r4, [pc, #100]	; (1b5e4 <ticker_start_op_cb+0x88>)
   1b57e:	781b      	ldrb	r3, [r3, #0]
   1b580:	7822      	ldrb	r2, [r4, #0]
   1b582:	429a      	cmp	r2, r3
   1b584:	d10c      	bne.n	1b5a0 <ticker_start_op_cb+0x44>
   1b586:	4a13      	ldr	r2, [pc, #76]	; (1b5d4 <ticker_start_op_cb+0x78>)
   1b588:	4917      	ldr	r1, [pc, #92]	; (1b5e8 <ticker_start_op_cb+0x8c>)
   1b58a:	4814      	ldr	r0, [pc, #80]	; (1b5dc <ticker_start_op_cb+0x80>)
   1b58c:	f240 3301 	movw	r3, #769	; 0x301
   1b590:	f005 fe6c 	bl	2126c <printk>
   1b594:	4040      	eors	r0, r0
   1b596:	f380 8811 	msr	BASEPRI, r0
   1b59a:	f04f 0003 	mov.w	r0, #3
   1b59e:	df02      	svc	2
	preempt_start_ack++;
   1b5a0:	7823      	ldrb	r3, [r4, #0]
   1b5a2:	3301      	adds	r3, #1
   1b5a4:	7023      	strb	r3, [r4, #0]

	LL_ASSERT(preempt_req == preempt_ack);
   1b5a6:	4b11      	ldr	r3, [pc, #68]	; (1b5ec <ticker_start_op_cb+0x90>)
   1b5a8:	4c11      	ldr	r4, [pc, #68]	; (1b5f0 <ticker_start_op_cb+0x94>)
   1b5aa:	781b      	ldrb	r3, [r3, #0]
   1b5ac:	7822      	ldrb	r2, [r4, #0]
   1b5ae:	429a      	cmp	r2, r3
   1b5b0:	d00c      	beq.n	1b5cc <ticker_start_op_cb+0x70>
   1b5b2:	4a08      	ldr	r2, [pc, #32]	; (1b5d4 <ticker_start_op_cb+0x78>)
   1b5b4:	490f      	ldr	r1, [pc, #60]	; (1b5f4 <ticker_start_op_cb+0x98>)
   1b5b6:	4809      	ldr	r0, [pc, #36]	; (1b5dc <ticker_start_op_cb+0x80>)
   1b5b8:	f44f 7341 	mov.w	r3, #772	; 0x304
   1b5bc:	f005 fe56 	bl	2126c <printk>
   1b5c0:	4040      	eors	r0, r0
   1b5c2:	f380 8811 	msr	BASEPRI, r0
   1b5c6:	f04f 0003 	mov.w	r0, #3
   1b5ca:	df02      	svc	2
	preempt_req++;
   1b5cc:	7823      	ldrb	r3, [r4, #0]
   1b5ce:	3301      	adds	r3, #1
   1b5d0:	7023      	strb	r3, [r4, #0]
}
   1b5d2:	bd10      	pop	{r4, pc}
   1b5d4:	0002f86e 	.word	0x0002f86e
   1b5d8:	0002f7ba 	.word	0x0002f7ba
   1b5dc:	0002b804 	.word	0x0002b804
   1b5e0:	200038f0 	.word	0x200038f0
   1b5e4:	200038ef 	.word	0x200038ef
   1b5e8:	0002f8d9 	.word	0x0002f8d9
   1b5ec:	200038ed 	.word	0x200038ed
   1b5f0:	200038ee 	.word	0x200038ee
   1b5f4:	0002f900 	.word	0x0002f900

0001b5f8 <preempt_ticker_cb>:
}

static void preempt_ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
			      uint32_t remainder, uint16_t lazy, uint8_t force,
			      void *param)
{
   1b5f8:	b510      	push	{r4, lr}
	static memq_link_t link;
	static struct mayfly mfy = {0, 0, &link, NULL, preempt};
	uint32_t ret;

	LL_ASSERT(preempt_ack != preempt_req);
   1b5fa:	4a17      	ldr	r2, [pc, #92]	; (1b658 <preempt_ticker_cb+0x60>)
   1b5fc:	4c17      	ldr	r4, [pc, #92]	; (1b65c <preempt_ticker_cb+0x64>)
   1b5fe:	7812      	ldrb	r2, [r2, #0]
   1b600:	7823      	ldrb	r3, [r4, #0]
   1b602:	429a      	cmp	r2, r3
   1b604:	d10c      	bne.n	1b620 <preempt_ticker_cb+0x28>
   1b606:	4a16      	ldr	r2, [pc, #88]	; (1b660 <preempt_ticker_cb+0x68>)
   1b608:	4916      	ldr	r1, [pc, #88]	; (1b664 <preempt_ticker_cb+0x6c>)
   1b60a:	4817      	ldr	r0, [pc, #92]	; (1b668 <preempt_ticker_cb+0x70>)
   1b60c:	f240 3365 	movw	r3, #869	; 0x365
   1b610:	f005 fe2c 	bl	2126c <printk>
   1b614:	4040      	eors	r0, r0
   1b616:	f380 8811 	msr	BASEPRI, r0
   1b61a:	f04f 0003 	mov.w	r0, #3
   1b61e:	df02      	svc	2
	preempt_ack++;
   1b620:	7823      	ldrb	r3, [r4, #0]

	mfy.param = param;
   1b622:	9a03      	ldr	r2, [sp, #12]
	preempt_ack++;
   1b624:	3301      	adds	r3, #1
   1b626:	b2db      	uxtb	r3, r3
   1b628:	7023      	strb	r3, [r4, #0]
	mfy.param = param;
   1b62a:	4b10      	ldr	r3, [pc, #64]	; (1b66c <preempt_ticker_cb+0x74>)
   1b62c:	609a      	str	r2, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1b62e:	2200      	movs	r2, #0
   1b630:	4611      	mov	r1, r2
   1b632:	2001      	movs	r0, #1
   1b634:	f7fb f9e2 	bl	169fc <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   1b638:	b160      	cbz	r0, 1b654 <preempt_ticker_cb+0x5c>
   1b63a:	4a09      	ldr	r2, [pc, #36]	; (1b660 <preempt_ticker_cb+0x68>)
   1b63c:	490c      	ldr	r1, [pc, #48]	; (1b670 <preempt_ticker_cb+0x78>)
   1b63e:	480a      	ldr	r0, [pc, #40]	; (1b668 <preempt_ticker_cb+0x70>)
   1b640:	f240 336b 	movw	r3, #875	; 0x36b
   1b644:	f005 fe12 	bl	2126c <printk>
   1b648:	4040      	eors	r0, r0
   1b64a:	f380 8811 	msr	BASEPRI, r0
   1b64e:	f04f 0003 	mov.w	r0, #3
   1b652:	df02      	svc	2
}
   1b654:	bd10      	pop	{r4, pc}
   1b656:	bf00      	nop
   1b658:	200038ee 	.word	0x200038ee
   1b65c:	200038ed 	.word	0x200038ed
   1b660:	0002f86e 	.word	0x0002f86e
   1b664:	0002f91b 	.word	0x0002f91b
   1b668:	0002b804 	.word	0x0002b804
   1b66c:	20000e6c 	.word	0x20000e6c
   1b670:	0002f3a5 	.word	0x0002f3a5

0001b674 <preempt_ticker_stop>:
{
   1b674:	b513      	push	{r0, r1, r4, lr}
	if ((preempt_stop_req != preempt_stop_ack) ||
   1b676:	4a17      	ldr	r2, [pc, #92]	; (1b6d4 <preempt_ticker_stop+0x60>)
   1b678:	4917      	ldr	r1, [pc, #92]	; (1b6d8 <preempt_ticker_stop+0x64>)
   1b67a:	7813      	ldrb	r3, [r2, #0]
   1b67c:	7809      	ldrb	r1, [r1, #0]
   1b67e:	4299      	cmp	r1, r3
   1b680:	d003      	beq.n	1b68a <preempt_ticker_stop+0x16>
		return TICKER_STATUS_SUCCESS;
   1b682:	2400      	movs	r4, #0
}
   1b684:	4620      	mov	r0, r4
   1b686:	b002      	add	sp, #8
   1b688:	bd10      	pop	{r4, pc}
	    (preempt_req == preempt_ack)) {
   1b68a:	4b14      	ldr	r3, [pc, #80]	; (1b6dc <preempt_ticker_stop+0x68>)
   1b68c:	4914      	ldr	r1, [pc, #80]	; (1b6e0 <preempt_ticker_stop+0x6c>)
   1b68e:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_stop_req != preempt_stop_ack) ||
   1b690:	7809      	ldrb	r1, [r1, #0]
   1b692:	4299      	cmp	r1, r3
   1b694:	d0f5      	beq.n	1b682 <preempt_ticker_stop+0xe>
	preempt_stop_req++;
   1b696:	7813      	ldrb	r3, [r2, #0]
   1b698:	3301      	adds	r3, #1
   1b69a:	b2db      	uxtb	r3, r3
   1b69c:	7013      	strb	r3, [r2, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1b69e:	2200      	movs	r2, #0
   1b6a0:	4b10      	ldr	r3, [pc, #64]	; (1b6e4 <preempt_ticker_stop+0x70>)
   1b6a2:	9200      	str	r2, [sp, #0]
   1b6a4:	4611      	mov	r1, r2
   1b6a6:	4610      	mov	r0, r2
   1b6a8:	f7fb ff6e 	bl	17588 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1b6ac:	4604      	mov	r4, r0
   1b6ae:	2800      	cmp	r0, #0
   1b6b0:	d0e7      	beq.n	1b682 <preempt_ticker_stop+0xe>
   1b6b2:	2802      	cmp	r0, #2
   1b6b4:	d0e6      	beq.n	1b684 <preempt_ticker_stop+0x10>
   1b6b6:	4a0c      	ldr	r2, [pc, #48]	; (1b6e8 <preempt_ticker_stop+0x74>)
   1b6b8:	490c      	ldr	r1, [pc, #48]	; (1b6ec <preempt_ticker_stop+0x78>)
   1b6ba:	480d      	ldr	r0, [pc, #52]	; (1b6f0 <preempt_ticker_stop+0x7c>)
   1b6bc:	f240 3357 	movw	r3, #855	; 0x357
   1b6c0:	f005 fdd4 	bl	2126c <printk>
   1b6c4:	4040      	eors	r0, r0
   1b6c6:	f380 8811 	msr	BASEPRI, r0
   1b6ca:	f04f 0003 	mov.w	r0, #3
   1b6ce:	df02      	svc	2
   1b6d0:	e7d8      	b.n	1b684 <preempt_ticker_stop+0x10>
   1b6d2:	bf00      	nop
   1b6d4:	200038f2 	.word	0x200038f2
   1b6d8:	200038f1 	.word	0x200038f1
   1b6dc:	200038ed 	.word	0x200038ed
   1b6e0:	200038ee 	.word	0x200038ee
   1b6e4:	0001b509 	.word	0x0001b509
   1b6e8:	0002f86e 	.word	0x0002f86e
   1b6ec:	0002f486 	.word	0x0002f486
   1b6f0:	0002b804 	.word	0x0002b804

0001b6f4 <preempt_ticker_start>:
	ull = HDR_LLL2ULL(p->param);
   1b6f4:	68cb      	ldr	r3, [r1, #12]
   1b6f6:	681b      	ldr	r3, [r3, #0]
{
   1b6f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	preempt_anchor = p->ticks_at_expire;
   1b6fc:	f8d1 8000 	ldr.w	r8, [r1]
	preempt_to = MAX(ull->ticks_active_to_start,
   1b700:	68de      	ldr	r6, [r3, #12]
	if ((preempt_start_req != preempt_start_ack) ||
   1b702:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 1b7a8 <preempt_ticker_start+0xb4>
{
   1b706:	460d      	mov	r5, r1
	preempt_to = MAX(ull->ticks_active_to_start,
   1b708:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   1b70c:	4291      	cmp	r1, r2
   1b70e:	bf2c      	ite	cs
   1b710:	ebc6 0601 	rsbcs	r6, r6, r1
   1b714:	ebc6 0602 	rsbcc	r6, r6, r2
	if ((preempt_start_req != preempt_start_ack) ||
   1b718:	4a24      	ldr	r2, [pc, #144]	; (1b7ac <preempt_ticker_start+0xb8>)
   1b71a:	f899 3000 	ldrb.w	r3, [r9]
   1b71e:	7812      	ldrb	r2, [r2, #0]
   1b720:	429a      	cmp	r2, r3
{
   1b722:	b08a      	sub	sp, #40	; 0x28
   1b724:	4604      	mov	r4, r0
	ticks_at_preempt_new = preempt_anchor + preempt_to;
   1b726:	eb08 0706 	add.w	r7, r8, r6
	if ((preempt_start_req != preempt_start_ack) ||
   1b72a:	d105      	bne.n	1b738 <preempt_ticker_start+0x44>
	    (preempt_req != preempt_ack)) {
   1b72c:	4b20      	ldr	r3, [pc, #128]	; (1b7b0 <preempt_ticker_start+0xbc>)
   1b72e:	4a21      	ldr	r2, [pc, #132]	; (1b7b4 <preempt_ticker_start+0xc0>)
   1b730:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   1b732:	7812      	ldrb	r2, [r2, #0]
   1b734:	429a      	cmp	r2, r3
   1b736:	d018      	beq.n	1b76a <preempt_ticker_start+0x76>
		if (!prev || prev->is_aborted ||
   1b738:	2c00      	cmp	r4, #0
   1b73a:	d032      	beq.n	1b7a2 <preempt_ticker_start+0xae>
   1b73c:	7f23      	ldrb	r3, [r4, #28]
   1b73e:	079b      	lsls	r3, r3, #30
   1b740:	d42f      	bmi.n	1b7a2 <preempt_ticker_start+0xae>
		diff = ticks_at_preempt_new - ticks_at_preempt;
   1b742:	f8df a074 	ldr.w	sl, [pc, #116]	; 1b7b8 <preempt_ticker_start+0xc4>
   1b746:	f8da 2000 	ldr.w	r2, [sl]
   1b74a:	1aba      	subs	r2, r7, r2
		if (!prev || prev->is_aborted ||
   1b74c:	f412 0000 	ands.w	r0, r2, #8388608	; 0x800000
   1b750:	d024      	beq.n	1b79c <preempt_ticker_start+0xa8>
		preempt_ticker_stop();
   1b752:	f7ff ff8f 	bl	1b674 <preempt_ticker_stop>
		prev->is_aborted = 1U;
   1b756:	7f23      	ldrb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   1b758:	68e1      	ldr	r1, [r4, #12]
		ticks_at_preempt = ticks_at_preempt_new;
   1b75a:	f8ca 7000 	str.w	r7, [sl]
		prev->is_aborted = 1U;
   1b75e:	f043 0302 	orr.w	r3, r3, #2
   1b762:	7723      	strb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   1b764:	4620      	mov	r0, r4
   1b766:	69a3      	ldr	r3, [r4, #24]
   1b768:	4798      	blx	r3
	preempt_start_req++;
   1b76a:	f899 2000 	ldrb.w	r2, [r9]
	ticks_at_preempt = ticks_at_preempt_new;
   1b76e:	4b12      	ldr	r3, [pc, #72]	; (1b7b8 <preempt_ticker_start+0xc4>)
	preempt_start_req++;
   1b770:	3201      	adds	r2, #1
	ticks_at_preempt = ticks_at_preempt_new;
   1b772:	601f      	str	r7, [r3, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1b774:	4b11      	ldr	r3, [pc, #68]	; (1b7bc <preempt_ticker_start+0xc8>)
   1b776:	9508      	str	r5, [sp, #32]
	preempt_start_req++;
   1b778:	b2d2      	uxtb	r2, r2
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1b77a:	e9cd 5306 	strd	r5, r3, [sp, #24]
	preempt_start_req++;
   1b77e:	f889 2000 	strb.w	r2, [r9]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1b782:	4b0f      	ldr	r3, [pc, #60]	; (1b7c0 <preempt_ticker_start+0xcc>)
   1b784:	9305      	str	r3, [sp, #20]
   1b786:	2200      	movs	r2, #0
   1b788:	e9cd 2203 	strd	r2, r2, [sp, #12]
   1b78c:	e9cd 2201 	strd	r2, r2, [sp, #4]
   1b790:	9600      	str	r6, [sp, #0]
   1b792:	4643      	mov	r3, r8
   1b794:	4611      	mov	r1, r2
   1b796:	4610      	mov	r0, r2
   1b798:	f00b fdbb 	bl	27312 <ticker_start>
}
   1b79c:	b00a      	add	sp, #40	; 0x28
   1b79e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return TICKER_STATUS_SUCCESS;
   1b7a2:	2000      	movs	r0, #0
   1b7a4:	e7fa      	b.n	1b79c <preempt_ticker_start+0xa8>
   1b7a6:	bf00      	nop
   1b7a8:	200038f0 	.word	0x200038f0
   1b7ac:	200038ef 	.word	0x200038ef
   1b7b0:	200038ed 	.word	0x200038ed
   1b7b4:	200038ee 	.word	0x200038ee
   1b7b8:	20003240 	.word	0x20003240
   1b7bc:	0001b55d 	.word	0x0001b55d
   1b7c0:	0001b5f9 	.word	0x0001b5f9

0001b7c4 <preempt>:

static void preempt(void *param)
{
   1b7c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	uint8_t idx;
	int err;

	/* No event to abort */
	if (!event.curr.abort_cb || !event.curr.param) {
   1b7c6:	4c3b      	ldr	r4, [pc, #236]	; (1b8b4 <preempt+0xf0>)
   1b7c8:	68a3      	ldr	r3, [r4, #8]
{
   1b7ca:	b089      	sub	sp, #36	; 0x24
   1b7cc:	4605      	mov	r5, r0
	if (!event.curr.abort_cb || !event.curr.param) {
   1b7ce:	2b00      	cmp	r3, #0
   1b7d0:	d034      	beq.n	1b83c <preempt+0x78>
   1b7d2:	6823      	ldr	r3, [r4, #0]
   1b7d4:	2b00      	cmp	r3, #0
   1b7d6:	d031      	beq.n	1b83c <preempt+0x78>
		return;
	}

	/* Check if any prepare in pipeline */
	idx = UINT8_MAX;
   1b7d8:	23ff      	movs	r3, #255	; 0xff
   1b7da:	f88d 300a 	strb.w	r3, [sp, #10]
		return;
	}

	/* Find a prepare that is ready and not a resume */
	while (next && (next->is_aborted || next->is_resume)) {
		next = ull_prepare_dequeue_iter(&idx);
   1b7de:	f10d 000a 	add.w	r0, sp, #10
   1b7e2:	f7fd fe2f 	bl	19444 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   1b7e6:	4601      	mov	r1, r0
   1b7e8:	b340      	cbz	r0, 1b83c <preempt+0x78>
   1b7ea:	7f06      	ldrb	r6, [r0, #28]
   1b7ec:	f016 0603 	ands.w	r6, r6, #3
   1b7f0:	d1f5      	bne.n	1b7de <preempt+0x1a>
	if (!next) {
		return;
	}

	/* Preemptor not in pipeline */
	if (next != param) {
   1b7f2:	4285      	cmp	r5, r0
   1b7f4:	d013      	beq.n	1b81e <preempt+0x5a>
		uint32_t ret;

		/* Start the preempt timeout */
		ret = preempt_ticker_start(NULL, next);
   1b7f6:	4630      	mov	r0, r6
   1b7f8:	f7ff ff7c 	bl	1b6f4 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1b7fc:	f030 0302 	bics.w	r3, r0, #2
   1b800:	d01c      	beq.n	1b83c <preempt+0x78>
   1b802:	4a2d      	ldr	r2, [pc, #180]	; (1b8b8 <preempt+0xf4>)
   1b804:	492d      	ldr	r1, [pc, #180]	; (1b8bc <preempt+0xf8>)
   1b806:	f240 3391 	movw	r3, #913	; 0x391

		/* Enqueue as resume event */
		iter = resume_enqueue(resume_cb);
		LL_ASSERT(iter);
	} else {
		LL_ASSERT(err == -ECANCELED);
   1b80a:	482d      	ldr	r0, [pc, #180]	; (1b8c0 <preempt+0xfc>)
   1b80c:	f005 fd2e 	bl	2126c <printk>
   1b810:	4040      	eors	r0, r0
   1b812:	f380 8811 	msr	BASEPRI, r0
   1b816:	f04f 0003 	mov.w	r0, #3
   1b81a:	df02      	svc	2
   1b81c:	e00e      	b.n	1b83c <preempt+0x78>
	err = event.curr.is_abort_cb(next->prepare_param.param,
   1b81e:	6863      	ldr	r3, [r4, #4]
   1b820:	6821      	ldr	r1, [r4, #0]
   1b822:	68e8      	ldr	r0, [r5, #12]
   1b824:	aa03      	add	r2, sp, #12
   1b826:	4798      	blx	r3
	if (!err) {
   1b828:	4607      	mov	r7, r0
   1b82a:	b948      	cbnz	r0, 1b840 <preempt+0x7c>
		next->is_aborted = 1;
   1b82c:	7f2b      	ldrb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1b82e:	68e9      	ldr	r1, [r5, #12]
		next->is_aborted = 1;
   1b830:	f043 0302 	orr.w	r3, r3, #2
   1b834:	772b      	strb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1b836:	4628      	mov	r0, r5
   1b838:	69ab      	ldr	r3, [r5, #24]
   1b83a:	4798      	blx	r3
	}
}
   1b83c:	b009      	add	sp, #36	; 0x24
   1b83e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	event.curr.abort_cb(NULL, event.curr.param);
   1b840:	68a3      	ldr	r3, [r4, #8]
   1b842:	6821      	ldr	r1, [r4, #0]
   1b844:	4630      	mov	r0, r6
   1b846:	4798      	blx	r3
	if (err == -EAGAIN) {
   1b848:	f117 0f0b 	cmn.w	r7, #11
   1b84c:	d12b      	bne.n	1b8a6 <preempt+0xe2>
		iter_idx = UINT8_MAX;
   1b84e:	25ff      	movs	r5, #255	; 0xff
				iter_idx = UINT8_MAX;
   1b850:	f88d 500b 	strb.w	r5, [sp, #11]
			iter = ull_prepare_dequeue_iter(&iter_idx);
   1b854:	f10d 000b 	add.w	r0, sp, #11
   1b858:	f7fd fdf4 	bl	19444 <ull_prepare_dequeue_iter>
		while (iter) {
   1b85c:	b9a0      	cbnz	r0, 1b888 <preempt+0xc4>
	prepare_param.param = event.curr.param;
   1b85e:	6823      	ldr	r3, [r4, #0]
   1b860:	9307      	str	r3, [sp, #28]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1b862:	2301      	movs	r3, #1
	struct lll_prepare_param prepare_param = {0};
   1b864:	e9cd 0004 	strd	r0, r0, [sp, #16]
   1b868:	9006      	str	r0, [sp, #24]
	event.curr.param = NULL;
   1b86a:	6020      	str	r0, [r4, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1b86c:	9300      	str	r3, [sp, #0]
   1b86e:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
   1b872:	9b03      	ldr	r3, [sp, #12]
   1b874:	aa04      	add	r2, sp, #16
   1b876:	f7fd fda9 	bl	193cc <ull_prepare_enqueue>
		LL_ASSERT(iter);
   1b87a:	2800      	cmp	r0, #0
   1b87c:	d1de      	bne.n	1b83c <preempt+0x78>
   1b87e:	4a0e      	ldr	r2, [pc, #56]	; (1b8b8 <preempt+0xf4>)
   1b880:	4910      	ldr	r1, [pc, #64]	; (1b8c4 <preempt+0x100>)
   1b882:	f44f 7371 	mov.w	r3, #964	; 0x3c4
   1b886:	e7c0      	b.n	1b80a <preempt+0x46>
			if (!iter->is_aborted &&
   1b888:	7f03      	ldrb	r3, [r0, #28]
   1b88a:	0799      	lsls	r1, r3, #30
   1b88c:	d4e2      	bmi.n	1b854 <preempt+0x90>
			    (event.curr.param == iter->prepare_param.param) &&
   1b88e:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   1b890:	6821      	ldr	r1, [r4, #0]
   1b892:	4291      	cmp	r1, r2
   1b894:	d1de      	bne.n	1b854 <preempt+0x90>
			    (event.curr.param == iter->prepare_param.param) &&
   1b896:	07da      	lsls	r2, r3, #31
   1b898:	d5dc      	bpl.n	1b854 <preempt+0x90>
				iter->is_aborted = 1;
   1b89a:	f043 0302 	orr.w	r3, r3, #2
   1b89e:	7703      	strb	r3, [r0, #28]
				iter->abort_cb(&iter->prepare_param,
   1b8a0:	6983      	ldr	r3, [r0, #24]
   1b8a2:	4798      	blx	r3
   1b8a4:	e7d4      	b.n	1b850 <preempt+0x8c>
		LL_ASSERT(err == -ECANCELED);
   1b8a6:	378c      	adds	r7, #140	; 0x8c
   1b8a8:	d0c8      	beq.n	1b83c <preempt+0x78>
   1b8aa:	4a03      	ldr	r2, [pc, #12]	; (1b8b8 <preempt+0xf4>)
   1b8ac:	4906      	ldr	r1, [pc, #24]	; (1b8c8 <preempt+0x104>)
   1b8ae:	f240 33c6 	movw	r3, #966	; 0x3c6
   1b8b2:	e7aa      	b.n	1b80a <preempt+0x46>
   1b8b4:	2000322c 	.word	0x2000322c
   1b8b8:	0002f86e 	.word	0x0002f86e
   1b8bc:	0002f486 	.word	0x0002f486
   1b8c0:	0002b804 	.word	0x0002b804
   1b8c4:	0002f936 	.word	0x0002f936
   1b8c8:	0002f93b 	.word	0x0002f93b

0001b8cc <lll_init>:
{
   1b8cc:	b510      	push	{r4, lr}
   1b8ce:	4816      	ldr	r0, [pc, #88]	; (1b928 <lll_init+0x5c>)
   1b8d0:	f004 f816 	bl	1f900 <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1b8d4:	4b15      	ldr	r3, [pc, #84]	; (1b92c <lll_init+0x60>)
   1b8d6:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   1b8d8:	b310      	cbz	r0, 1b920 <lll_init+0x54>
	event.curr.abort_cb = NULL;
   1b8da:	4b15      	ldr	r3, [pc, #84]	; (1b930 <lll_init+0x64>)
   1b8dc:	2400      	movs	r4, #0
   1b8de:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   1b8e0:	f000 fa2e 	bl	1bd40 <lll_clock_init>
	if (err < 0) {
   1b8e4:	2800      	cmp	r0, #0
   1b8e6:	db1a      	blt.n	1b91e <lll_init+0x52>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   1b8e8:	4622      	mov	r2, r4
   1b8ea:	4621      	mov	r1, r4
   1b8ec:	2001      	movs	r0, #1
   1b8ee:	f7e8 fd9f 	bl	4430 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   1b8f2:	4622      	mov	r2, r4
   1b8f4:	2101      	movs	r1, #1
   1b8f6:	200b      	movs	r0, #11
   1b8f8:	f7e8 fd9a 	bl	4430 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   1b8fc:	4622      	mov	r2, r4
   1b8fe:	4621      	mov	r1, r4
   1b900:	2018      	movs	r0, #24
   1b902:	f7e8 fd95 	bl	4430 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   1b906:	2001      	movs	r0, #1
   1b908:	f7e8 fd60 	bl	43cc <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   1b90c:	200b      	movs	r0, #11
   1b90e:	f7e8 fd5d 	bl	43cc <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   1b912:	2018      	movs	r0, #24
   1b914:	f7e8 fd5a 	bl	43cc <arch_irq_enable>
	radio_setup();
   1b918:	f00c faf6 	bl	27f08 <radio_setup>
	return 0;
   1b91c:	4620      	mov	r0, r4
}
   1b91e:	bd10      	pop	{r4, pc}
		return -ENODEV;
   1b920:	f06f 0012 	mvn.w	r0, #18
   1b924:	e7fb      	b.n	1b91e <lll_init+0x52>
   1b926:	bf00      	nop
   1b928:	0002f947 	.word	0x0002f947
   1b92c:	20003228 	.word	0x20003228
   1b930:	2000322c 	.word	0x2000322c

0001b934 <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   1b934:	4a05      	ldr	r2, [pc, #20]	; (1b94c <lll_csrand_get+0x18>)
{
   1b936:	b410      	push	{r4}
   1b938:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   1b93a:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1b93c:	6882      	ldr	r2, [r0, #8]
   1b93e:	6814      	ldr	r4, [r2, #0]
   1b940:	b28a      	uxth	r2, r1
   1b942:	4619      	mov	r1, r3
   1b944:	4623      	mov	r3, r4
}
   1b946:	bc10      	pop	{r4}
   1b948:	4718      	bx	r3
   1b94a:	bf00      	nop
   1b94c:	20003228 	.word	0x20003228

0001b950 <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   1b950:	4b08      	ldr	r3, [pc, #32]	; (1b974 <lll_csrand_isr_get+0x24>)
{
   1b952:	b430      	push	{r4, r5}
   1b954:	4604      	mov	r4, r0
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   1b956:	6818      	ldr	r0, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1b958:	6883      	ldr	r3, [r0, #8]
   1b95a:	685d      	ldr	r5, [r3, #4]
   1b95c:	b28a      	uxth	r2, r1
   1b95e:	b125      	cbz	r5, 1b96a <lll_csrand_isr_get+0x1a>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1b960:	4621      	mov	r1, r4
   1b962:	46ac      	mov	ip, r5
   1b964:	2300      	movs	r3, #0
}
   1b966:	bc30      	pop	{r4, r5}
   1b968:	4760      	bx	ip
   1b96a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1b96e:	bc30      	pop	{r4, r5}
   1b970:	4770      	bx	lr
   1b972:	bf00      	nop
   1b974:	20003228 	.word	0x20003228

0001b978 <lll_disable>:
{
   1b978:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b97a:	4b19      	ldr	r3, [pc, #100]	; (1b9e0 <lll_disable+0x68>)
	if (!param || (param == event.curr.param)) {
   1b97c:	4604      	mov	r4, r0
   1b97e:	b110      	cbz	r0, 1b986 <lll_disable+0xe>
   1b980:	681a      	ldr	r2, [r3, #0]
   1b982:	4282      	cmp	r2, r0
   1b984:	d105      	bne.n	1b992 <lll_disable+0x1a>
		if (event.curr.abort_cb && event.curr.param) {
   1b986:	689a      	ldr	r2, [r3, #8]
   1b988:	b16a      	cbz	r2, 1b9a6 <lll_disable+0x2e>
   1b98a:	6819      	ldr	r1, [r3, #0]
   1b98c:	b159      	cbz	r1, 1b9a6 <lll_disable+0x2e>
			event.curr.abort_cb(NULL, event.curr.param);
   1b98e:	2000      	movs	r0, #0
   1b990:	4790      	blx	r2
		idx = UINT8_MAX;
   1b992:	25ff      	movs	r5, #255	; 0xff
				idx = UINT8_MAX;
   1b994:	f88d 5007 	strb.w	r5, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
   1b998:	f10d 0007 	add.w	r0, sp, #7
   1b99c:	f7fd fd52 	bl	19444 <ull_prepare_dequeue_iter>
		while (next) {
   1b9a0:	b980      	cbnz	r0, 1b9c4 <lll_disable+0x4c>
}
   1b9a2:	b003      	add	sp, #12
   1b9a4:	bd30      	pop	{r4, r5, pc}
			LL_ASSERT(!param);
   1b9a6:	2c00      	cmp	r4, #0
   1b9a8:	d0f3      	beq.n	1b992 <lll_disable+0x1a>
   1b9aa:	4a0e      	ldr	r2, [pc, #56]	; (1b9e4 <lll_disable+0x6c>)
   1b9ac:	490e      	ldr	r1, [pc, #56]	; (1b9e8 <lll_disable+0x70>)
   1b9ae:	480f      	ldr	r0, [pc, #60]	; (1b9ec <lll_disable+0x74>)
   1b9b0:	23fd      	movs	r3, #253	; 0xfd
   1b9b2:	f005 fc5b 	bl	2126c <printk>
   1b9b6:	4040      	eors	r0, r0
   1b9b8:	f380 8811 	msr	BASEPRI, r0
   1b9bc:	f04f 0003 	mov.w	r0, #3
   1b9c0:	df02      	svc	2
   1b9c2:	e7e6      	b.n	1b992 <lll_disable+0x1a>
			if (!next->is_aborted &&
   1b9c4:	7f03      	ldrb	r3, [r0, #28]
   1b9c6:	079b      	lsls	r3, r3, #30
   1b9c8:	d4e6      	bmi.n	1b998 <lll_disable+0x20>
			    (!param || (param == next->prepare_param.param))) {
   1b9ca:	68c1      	ldr	r1, [r0, #12]
			if (!next->is_aborted &&
   1b9cc:	b10c      	cbz	r4, 1b9d2 <lll_disable+0x5a>
			    (!param || (param == next->prepare_param.param))) {
   1b9ce:	428c      	cmp	r4, r1
   1b9d0:	d1e2      	bne.n	1b998 <lll_disable+0x20>
				next->is_aborted = 1;
   1b9d2:	7f03      	ldrb	r3, [r0, #28]
   1b9d4:	f043 0302 	orr.w	r3, r3, #2
   1b9d8:	7703      	strb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   1b9da:	6983      	ldr	r3, [r0, #24]
   1b9dc:	4798      	blx	r3
   1b9de:	e7d9      	b.n	1b994 <lll_disable+0x1c>
   1b9e0:	2000322c 	.word	0x2000322c
   1b9e4:	0002f86e 	.word	0x0002f86e
   1b9e8:	0002f94b 	.word	0x0002f94b
   1b9ec:	0002b804 	.word	0x0002b804

0001b9f0 <lll_done>:
{
   1b9f0:	b538      	push	{r3, r4, r5, lr}
   1b9f2:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   1b9f4:	f7fd fd18 	bl	19428 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   1b9f8:	b17c      	cbz	r4, 1ba1a <lll_done+0x2a>
   1b9fa:	b960      	cbnz	r0, 1ba16 <lll_done+0x26>
   1b9fc:	4a1d      	ldr	r2, [pc, #116]	; (1ba74 <lll_done+0x84>)
   1b9fe:	491e      	ldr	r1, [pc, #120]	; (1ba78 <lll_done+0x88>)
   1ba00:	481e      	ldr	r0, [pc, #120]	; (1ba7c <lll_done+0x8c>)
   1ba02:	f240 1337 	movw	r3, #311	; 0x137
   1ba06:	f005 fc31 	bl	2126c <printk>
   1ba0a:	4040      	eors	r0, r0
   1ba0c:	f380 8811 	msr	BASEPRI, r0
   1ba10:	f04f 0003 	mov.w	r0, #3
   1ba14:	df02      	svc	2
			ull = HDR_LLL2ULL(param);
   1ba16:	6824      	ldr	r4, [r4, #0]
   1ba18:	e015      	b.n	1ba46 <lll_done+0x56>
		LL_ASSERT(event.curr.abort_cb);
   1ba1a:	4d19      	ldr	r5, [pc, #100]	; (1ba80 <lll_done+0x90>)
   1ba1c:	68ab      	ldr	r3, [r5, #8]
   1ba1e:	b963      	cbnz	r3, 1ba3a <lll_done+0x4a>
   1ba20:	4a14      	ldr	r2, [pc, #80]	; (1ba74 <lll_done+0x84>)
   1ba22:	4918      	ldr	r1, [pc, #96]	; (1ba84 <lll_done+0x94>)
   1ba24:	4815      	ldr	r0, [pc, #84]	; (1ba7c <lll_done+0x8c>)
   1ba26:	f240 133d 	movw	r3, #317	; 0x13d
   1ba2a:	f005 fc1f 	bl	2126c <printk>
   1ba2e:	4040      	eors	r0, r0
   1ba30:	f380 8811 	msr	BASEPRI, r0
   1ba34:	f04f 0003 	mov.w	r0, #3
   1ba38:	df02      	svc	2
		param = event.curr.param;
   1ba3a:	682c      	ldr	r4, [r5, #0]
		event.curr.abort_cb = NULL;
   1ba3c:	2300      	movs	r3, #0
   1ba3e:	60ab      	str	r3, [r5, #8]
		event.curr.param = NULL;
   1ba40:	602b      	str	r3, [r5, #0]
		if (param) {
   1ba42:	2c00      	cmp	r4, #0
   1ba44:	d1e7      	bne.n	1ba16 <lll_done+0x26>
	ull_prepare_dequeue(TICKER_USER_ID_LLL);
   1ba46:	2000      	movs	r0, #0
   1ba48:	f7fd fd1a 	bl	19480 <ull_prepare_dequeue>
	evdone = ull_event_done(ull);
   1ba4c:	4620      	mov	r0, r4
   1ba4e:	f7fd fd6f 	bl	19530 <ull_event_done>
	LL_ASSERT(evdone);
   1ba52:	b960      	cbnz	r0, 1ba6e <lll_done+0x7e>
   1ba54:	4a07      	ldr	r2, [pc, #28]	; (1ba74 <lll_done+0x84>)
   1ba56:	490c      	ldr	r1, [pc, #48]	; (1ba88 <lll_done+0x98>)
   1ba58:	4808      	ldr	r0, [pc, #32]	; (1ba7c <lll_done+0x8c>)
   1ba5a:	f240 136d 	movw	r3, #365	; 0x16d
   1ba5e:	f005 fc05 	bl	2126c <printk>
   1ba62:	4040      	eors	r0, r0
   1ba64:	f380 8811 	msr	BASEPRI, r0
   1ba68:	f04f 0003 	mov.w	r0, #3
   1ba6c:	df02      	svc	2
}
   1ba6e:	2000      	movs	r0, #0
   1ba70:	bd38      	pop	{r3, r4, r5, pc}
   1ba72:	bf00      	nop
   1ba74:	0002f86e 	.word	0x0002f86e
   1ba78:	0002f952 	.word	0x0002f952
   1ba7c:	0002b804 	.word	0x0002b804
   1ba80:	2000322c 	.word	0x2000322c
   1ba84:	0002f961 	.word	0x0002f961
   1ba88:	0002f975 	.word	0x0002f975

0001ba8c <lll_is_done>:
	return !event.curr.abort_cb;
   1ba8c:	4b02      	ldr	r3, [pc, #8]	; (1ba98 <lll_is_done+0xc>)
   1ba8e:	6898      	ldr	r0, [r3, #8]
}
   1ba90:	fab0 f080 	clz	r0, r0
   1ba94:	0940      	lsrs	r0, r0, #5
   1ba96:	4770      	bx	lr
   1ba98:	2000322c 	.word	0x2000322c

0001ba9c <lll_chan_set>:
	switch (chan) {
   1ba9c:	2826      	cmp	r0, #38	; 0x26
{
   1ba9e:	b510      	push	{r4, lr}
   1baa0:	4604      	mov	r4, r0
	switch (chan) {
   1baa2:	d00b      	beq.n	1babc <lll_chan_set+0x20>
   1baa4:	2827      	cmp	r0, #39	; 0x27
   1baa6:	d00b      	beq.n	1bac0 <lll_chan_set+0x24>
   1baa8:	2825      	cmp	r0, #37	; 0x25
   1baaa:	d10b      	bne.n	1bac4 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   1baac:	2002      	movs	r0, #2
		radio_freq_chan_set(26);
   1baae:	f001 fcb1 	bl	1d414 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1bab2:	4620      	mov	r0, r4
}
   1bab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1bab8:	f001 bcb2 	b.w	1d420 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   1babc:	201a      	movs	r0, #26
   1babe:	e7f6      	b.n	1baae <lll_chan_set+0x12>
		radio_freq_chan_set(80);
   1bac0:	2050      	movs	r0, #80	; 0x50
   1bac2:	e7f4      	b.n	1baae <lll_chan_set+0x12>
		if (chan < 11) {
   1bac4:	280a      	cmp	r0, #10
   1bac6:	d802      	bhi.n	1bace <lll_chan_set+0x32>
			radio_freq_chan_set(4 + (chan * 2U));
   1bac8:	3002      	adds	r0, #2
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   1baca:	0040      	lsls	r0, r0, #1
   1bacc:	e7ef      	b.n	1baae <lll_chan_set+0x12>
		} else if (chan < 40) {
   1bace:	2827      	cmp	r0, #39	; 0x27
   1bad0:	d801      	bhi.n	1bad6 <lll_chan_set+0x3a>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   1bad2:	3003      	adds	r0, #3
   1bad4:	e7f9      	b.n	1baca <lll_chan_set+0x2e>
			LL_ASSERT(0);
   1bad6:	4a07      	ldr	r2, [pc, #28]	; (1baf4 <lll_chan_set+0x58>)
   1bad8:	4907      	ldr	r1, [pc, #28]	; (1baf8 <lll_chan_set+0x5c>)
   1bada:	4808      	ldr	r0, [pc, #32]	; (1bafc <lll_chan_set+0x60>)
   1badc:	f240 13d9 	movw	r3, #473	; 0x1d9
   1bae0:	f005 fbc4 	bl	2126c <printk>
   1bae4:	4040      	eors	r0, r0
   1bae6:	f380 8811 	msr	BASEPRI, r0
   1baea:	f04f 0003 	mov.w	r0, #3
   1baee:	df02      	svc	2
   1baf0:	e7df      	b.n	1bab2 <lll_chan_set+0x16>
   1baf2:	bf00      	nop
   1baf4:	0002f86e 	.word	0x0002f86e
   1baf8:	0002cf80 	.word	0x0002cf80
   1bafc:	0002b804 	.word	0x0002b804

0001bb00 <lll_isr_cleanup>:
{
   1bb00:	b508      	push	{r3, lr}
   1bb02:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   1bb04:	480f      	ldr	r0, [pc, #60]	; (1bb44 <lll_isr_cleanup+0x44>)
   1bb06:	f001 fc2b 	bl	1d360 <radio_isr_set>
	if (!radio_is_idle()) {
   1bb0a:	f001 fd29 	bl	1d560 <radio_is_idle>
   1bb0e:	b908      	cbnz	r0, 1bb14 <lll_isr_cleanup+0x14>
		radio_disable();
   1bb10:	f001 fcf4 	bl	1d4fc <radio_disable>
	radio_tmr_stop();
   1bb14:	f001 fef2 	bl	1d8fc <radio_tmr_stop>
	err = lll_hfclock_off();
   1bb18:	f000 f954 	bl	1bdc4 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1bb1c:	2800      	cmp	r0, #0
   1bb1e:	da0c      	bge.n	1bb3a <lll_isr_cleanup+0x3a>
   1bb20:	4a09      	ldr	r2, [pc, #36]	; (1bb48 <lll_isr_cleanup+0x48>)
   1bb22:	490a      	ldr	r1, [pc, #40]	; (1bb4c <lll_isr_cleanup+0x4c>)
   1bb24:	480a      	ldr	r0, [pc, #40]	; (1bb50 <lll_isr_cleanup+0x50>)
   1bb26:	f44f 730f 	mov.w	r3, #572	; 0x23c
   1bb2a:	f005 fb9f 	bl	2126c <printk>
   1bb2e:	4040      	eors	r0, r0
   1bb30:	f380 8811 	msr	BASEPRI, r0
   1bb34:	f04f 0003 	mov.w	r0, #3
   1bb38:	df02      	svc	2
}
   1bb3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1bb3e:	2000      	movs	r0, #0
   1bb40:	f7ff bf56 	b.w	1b9f0 <lll_done>
   1bb44:	00027a19 	.word	0x00027a19
   1bb48:	0002f86e 	.word	0x0002f86e
   1bb4c:	0002f97c 	.word	0x0002f97c
   1bb50:	0002b804 	.word	0x0002b804

0001bb54 <lll_isr_early_abort>:
{
   1bb54:	b508      	push	{r3, lr}
   1bb56:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   1bb58:	480e      	ldr	r0, [pc, #56]	; (1bb94 <lll_isr_early_abort+0x40>)
   1bb5a:	f001 fc01 	bl	1d360 <radio_isr_set>
	if (!radio_is_idle()) {
   1bb5e:	f001 fcff 	bl	1d560 <radio_is_idle>
   1bb62:	b908      	cbnz	r0, 1bb68 <lll_isr_early_abort+0x14>
		radio_disable();
   1bb64:	f001 fcca 	bl	1d4fc <radio_disable>
	err = lll_hfclock_off();
   1bb68:	f000 f92c 	bl	1bdc4 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1bb6c:	2800      	cmp	r0, #0
   1bb6e:	da0c      	bge.n	1bb8a <lll_isr_early_abort+0x36>
   1bb70:	4a09      	ldr	r2, [pc, #36]	; (1bb98 <lll_isr_early_abort+0x44>)
   1bb72:	490a      	ldr	r1, [pc, #40]	; (1bb9c <lll_isr_early_abort+0x48>)
   1bb74:	480a      	ldr	r0, [pc, #40]	; (1bba0 <lll_isr_early_abort+0x4c>)
   1bb76:	f240 234b 	movw	r3, #587	; 0x24b
   1bb7a:	f005 fb77 	bl	2126c <printk>
   1bb7e:	4040      	eors	r0, r0
   1bb80:	f380 8811 	msr	BASEPRI, r0
   1bb84:	f04f 0003 	mov.w	r0, #3
   1bb88:	df02      	svc	2
}
   1bb8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1bb8e:	2000      	movs	r0, #0
   1bb90:	f7ff bf2e 	b.w	1b9f0 <lll_done>
   1bb94:	00027a19 	.word	0x00027a19
   1bb98:	0002f86e 	.word	0x0002f86e
   1bb9c:	0002f97c 	.word	0x0002f97c
   1bba0:	0002b804 	.word	0x0002b804

0001bba4 <lll_prepare_resolve>:
{
   1bba4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1bba8:	461d      	mov	r5, r3
   1bbaa:	f89d a030 	ldrb.w	sl, [sp, #48]	; 0x30
	idx = UINT8_MAX;
   1bbae:	23ff      	movs	r3, #255	; 0xff
{
   1bbb0:	4681      	mov	r9, r0
   1bbb2:	4688      	mov	r8, r1
   1bbb4:	4616      	mov	r6, r2
	idx = UINT8_MAX;
   1bbb6:	f88d 300f 	strb.w	r3, [sp, #15]
		p = ull_prepare_dequeue_iter(&idx);
   1bbba:	f10d 000f 	add.w	r0, sp, #15
   1bbbe:	f7fd fc41 	bl	19444 <ull_prepare_dequeue_iter>
   1bbc2:	4604      	mov	r4, r0
	while (p && (p->is_aborted || p->is_resume)) {
   1bbc4:	b110      	cbz	r0, 1bbcc <lll_prepare_resolve+0x28>
   1bbc6:	7f03      	ldrb	r3, [r0, #28]
   1bbc8:	079b      	lsls	r3, r3, #30
   1bbca:	d1f6      	bne.n	1bbba <lll_prepare_resolve+0x16>
	    event.curr.abort_cb ||
   1bbcc:	4f41      	ldr	r7, [pc, #260]	; (1bcd4 <lll_prepare_resolve+0x130>)
	if ((!is_dequeue && !is_done_sync()) ||
   1bbce:	68bb      	ldr	r3, [r7, #8]
   1bbd0:	b923      	cbnz	r3, 1bbdc <lll_prepare_resolve+0x38>
	    event.curr.abort_cb ||
   1bbd2:	2c00      	cmp	r4, #0
   1bbd4:	d046      	beq.n	1bc64 <lll_prepare_resolve+0xc0>
	    (p && is_resume)) {
   1bbd6:	f1ba 0f00 	cmp.w	sl, #0
   1bbda:	d034      	beq.n	1bc46 <lll_prepare_resolve+0xa2>
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   1bbdc:	462a      	mov	r2, r5
   1bbde:	f8cd a000 	str.w	sl, [sp]
   1bbe2:	4633      	mov	r3, r6
   1bbe4:	4641      	mov	r1, r8
   1bbe6:	4648      	mov	r0, r9
   1bbe8:	f7fd fbf0 	bl	193cc <ull_prepare_enqueue>
		LL_ASSERT(next);
   1bbec:	4605      	mov	r5, r0
   1bbee:	b960      	cbnz	r0, 1bc0a <lll_prepare_resolve+0x66>
   1bbf0:	4a39      	ldr	r2, [pc, #228]	; (1bcd8 <lll_prepare_resolve+0x134>)
   1bbf2:	493a      	ldr	r1, [pc, #232]	; (1bcdc <lll_prepare_resolve+0x138>)
   1bbf4:	483a      	ldr	r0, [pc, #232]	; (1bce0 <lll_prepare_resolve+0x13c>)
   1bbf6:	f240 2386 	movw	r3, #646	; 0x286
   1bbfa:	f005 fb37 	bl	2126c <printk>
   1bbfe:	4040      	eors	r0, r0
   1bc00:	f380 8811 	msr	BASEPRI, r0
   1bc04:	f04f 0003 	mov.w	r0, #3
   1bc08:	df02      	svc	2
		if (is_resume) {
   1bc0a:	f1ba 0f00 	cmp.w	sl, #0
   1bc0e:	d005      	beq.n	1bc1c <lll_prepare_resolve+0x78>
		return -EINPROGRESS;
   1bc10:	f06f 0476 	mvn.w	r4, #118	; 0x76
}
   1bc14:	4620      	mov	r0, r4
   1bc16:	b004      	add	sp, #16
   1bc18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ret  = preempt_ticker_start(p, next);
   1bc1c:	4629      	mov	r1, r5
   1bc1e:	4620      	mov	r0, r4
   1bc20:	f7ff fd68 	bl	1b6f4 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1bc24:	f030 0302 	bics.w	r3, r0, #2
   1bc28:	d0f2      	beq.n	1bc10 <lll_prepare_resolve+0x6c>
   1bc2a:	4a2b      	ldr	r2, [pc, #172]	; (1bcd8 <lll_prepare_resolve+0x134>)
   1bc2c:	492d      	ldr	r1, [pc, #180]	; (1bce4 <lll_prepare_resolve+0x140>)
   1bc2e:	482c      	ldr	r0, [pc, #176]	; (1bce0 <lll_prepare_resolve+0x13c>)
   1bc30:	f240 2391 	movw	r3, #657	; 0x291
   1bc34:	f005 fb1a 	bl	2126c <printk>
   1bc38:	4040      	eors	r0, r0
   1bc3a:	f380 8811 	msr	BASEPRI, r0
   1bc3e:	f04f 0003 	mov.w	r0, #3
   1bc42:	df02      	svc	2
   1bc44:	e7e4      	b.n	1bc10 <lll_prepare_resolve+0x6c>
	LL_ASSERT(!p || &p->prepare_param == prepare_param);
   1bc46:	42ac      	cmp	r4, r5
   1bc48:	d00c      	beq.n	1bc64 <lll_prepare_resolve+0xc0>
   1bc4a:	4a23      	ldr	r2, [pc, #140]	; (1bcd8 <lll_prepare_resolve+0x134>)
   1bc4c:	4926      	ldr	r1, [pc, #152]	; (1bce8 <lll_prepare_resolve+0x144>)
   1bc4e:	4824      	ldr	r0, [pc, #144]	; (1bce0 <lll_prepare_resolve+0x13c>)
   1bc50:	f240 23b7 	movw	r3, #695	; 0x2b7
   1bc54:	f005 fb0a 	bl	2126c <printk>
   1bc58:	4040      	eors	r0, r0
   1bc5a:	f380 8811 	msr	BASEPRI, r0
   1bc5e:	f04f 0003 	mov.w	r0, #3
   1bc62:	df02      	svc	2
	event.curr.param = prepare_param->param;
   1bc64:	68eb      	ldr	r3, [r5, #12]
	event.curr.abort_cb = abort_cb;
   1bc66:	f8c7 8008 	str.w	r8, [r7, #8]
	event.curr.is_abort_cb = is_abort_cb;
   1bc6a:	e9c7 3900 	strd	r3, r9, [r7]
	err = prepare_cb(prepare_param);
   1bc6e:	4628      	mov	r0, r5
   1bc70:	47b0      	blx	r6
   1bc72:	4604      	mov	r4, r0
	ret = preempt_ticker_stop();
   1bc74:	f7ff fcfe 	bl	1b674 <preempt_ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1bc78:	f030 0302 	bics.w	r3, r0, #2
   1bc7c:	d00c      	beq.n	1bc98 <lll_prepare_resolve+0xf4>
   1bc7e:	4a16      	ldr	r2, [pc, #88]	; (1bcd8 <lll_prepare_resolve+0x134>)
   1bc80:	4918      	ldr	r1, [pc, #96]	; (1bce4 <lll_prepare_resolve+0x140>)
   1bc82:	4817      	ldr	r0, [pc, #92]	; (1bce0 <lll_prepare_resolve+0x13c>)
   1bc84:	f44f 7331 	mov.w	r3, #708	; 0x2c4
   1bc88:	f005 faf0 	bl	2126c <printk>
   1bc8c:	4040      	eors	r0, r0
   1bc8e:	f380 8811 	msr	BASEPRI, r0
   1bc92:	f04f 0003 	mov.w	r0, #3
   1bc96:	df02      	svc	2
		p = ull_prepare_dequeue_iter(&idx);
   1bc98:	f10d 000f 	add.w	r0, sp, #15
   1bc9c:	f7fd fbd2 	bl	19444 <ull_prepare_dequeue_iter>
		if (!p) {
   1bca0:	4601      	mov	r1, r0
   1bca2:	2800      	cmp	r0, #0
   1bca4:	d0b6      	beq.n	1bc14 <lll_prepare_resolve+0x70>
	} while (p->is_aborted || p->is_resume);
   1bca6:	7f00      	ldrb	r0, [r0, #28]
   1bca8:	f010 0003 	ands.w	r0, r0, #3
   1bcac:	d1f4      	bne.n	1bc98 <lll_prepare_resolve+0xf4>
	ret = preempt_ticker_start(NULL, p);
   1bcae:	f7ff fd21 	bl	1b6f4 <preempt_ticker_start>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1bcb2:	f030 0302 	bics.w	r3, r0, #2
   1bcb6:	d0ad      	beq.n	1bc14 <lll_prepare_resolve+0x70>
   1bcb8:	4a07      	ldr	r2, [pc, #28]	; (1bcd8 <lll_prepare_resolve+0x134>)
   1bcba:	490a      	ldr	r1, [pc, #40]	; (1bce4 <lll_prepare_resolve+0x140>)
   1bcbc:	4808      	ldr	r0, [pc, #32]	; (1bce0 <lll_prepare_resolve+0x13c>)
   1bcbe:	f240 23d1 	movw	r3, #721	; 0x2d1
   1bcc2:	f005 fad3 	bl	2126c <printk>
   1bcc6:	4040      	eors	r0, r0
   1bcc8:	f380 8811 	msr	BASEPRI, r0
   1bccc:	f04f 0003 	mov.w	r0, #3
   1bcd0:	df02      	svc	2
   1bcd2:	e79f      	b.n	1bc14 <lll_prepare_resolve+0x70>
   1bcd4:	2000322c 	.word	0x2000322c
   1bcd8:	0002f86e 	.word	0x0002f86e
   1bcdc:	0002f95c 	.word	0x0002f95c
   1bce0:	0002b804 	.word	0x0002b804
   1bce4:	0002f486 	.word	0x0002f486
   1bce8:	0002f985 	.word	0x0002f985

0001bcec <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   1bcec:	b570      	push	{r4, r5, r6, lr}
   1bcee:	4606      	mov	r6, r0
   1bcf0:	b08a      	sub	sp, #40	; 0x28
   1bcf2:	460d      	mov	r5, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   1bcf4:	2201      	movs	r2, #1
   1bcf6:	2100      	movs	r1, #0
   1bcf8:	a804      	add	r0, sp, #16
   1bcfa:	f00c ffac 	bl	28c56 <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   1bcfe:	4b0f      	ldr	r3, [pc, #60]	; (1bd3c <blocking_on+0x50>)
   1bd00:	9301      	str	r3, [sp, #4]
   1bd02:	2400      	movs	r4, #0
   1bd04:	2303      	movs	r3, #3
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   1bd06:	4669      	mov	r1, sp
   1bd08:	4630      	mov	r0, r6
   1bd0a:	9403      	str	r4, [sp, #12]
   1bd0c:	9302      	str	r3, [sp, #8]
   1bd0e:	f005 fb29 	bl	21364 <onoff_request>
	if (err < 0) {
   1bd12:	2800      	cmp	r0, #0
   1bd14:	db10      	blt.n	1bd38 <blocking_on+0x4c>
   1bd16:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1bd1a:	4621      	mov	r1, r4
   1bd1c:	f240 30e7 	movw	r0, #999	; 0x3e7
   1bd20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bd24:	2300      	movs	r3, #0
   1bd26:	fbe5 0106 	umlal	r0, r1, r5, r6
   1bd2a:	f7e4 fa29 	bl	180 <__aeabi_uldivmod>
   1bd2e:	4602      	mov	r2, r0
   1bd30:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1bd32:	a804      	add	r0, sp, #16
   1bd34:	f004 f994 	bl	20060 <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   1bd38:	b00a      	add	sp, #40	; 0x28
   1bd3a:	bd70      	pop	{r4, r5, r6, pc}
   1bd3c:	00027ad7 	.word	0x00027ad7

0001bd40 <lll_clock_init>:

int lll_clock_init(void)
{
   1bd40:	b508      	push	{r3, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1bd42:	2001      	movs	r0, #1
   1bd44:	f002 f94c 	bl	1dfe0 <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   1bd48:	4904      	ldr	r1, [pc, #16]	; (1bd5c <lll_clock_init+0x1c>)
   1bd4a:	2300      	movs	r3, #0
   1bd4c:	604b      	str	r3, [r1, #4]
   1bd4e:	60cb      	str	r3, [r1, #12]
   1bd50:	2301      	movs	r3, #1
   1bd52:	608b      	str	r3, [r1, #8]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   1bd54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return onoff_request(mgr, &lf_cli);
   1bd58:	f005 bb04 	b.w	21364 <onoff_request>
   1bd5c:	20003248 	.word	0x20003248

0001bd60 <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   1bd60:	4b0c      	ldr	r3, [pc, #48]	; (1bd94 <lll_clock_wait+0x34>)
   1bd62:	781a      	ldrb	r2, [r3, #0]
{
   1bd64:	b510      	push	{r4, lr}
	if (done) {
   1bd66:	b10a      	cbz	r2, 1bd6c <lll_clock_wait+0xc>
		return 0;
   1bd68:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   1bd6a:	bd10      	pop	{r4, pc}
	done = true;
   1bd6c:	2001      	movs	r0, #1
   1bd6e:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1bd70:	f002 f936 	bl	1dfe0 <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   1bd74:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1bd78:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   1bd7a:	f7ff ffb7 	bl	1bcec <blocking_on>
	if (err) {
   1bd7e:	2800      	cmp	r0, #0
   1bd80:	d1f3      	bne.n	1bd6a <lll_clock_wait+0xa>
	err = onoff_release(mgr);
   1bd82:	4620      	mov	r0, r4
   1bd84:	f005 fb37 	bl	213f6 <onoff_release>
	if (err != ONOFF_STATE_ON) {
   1bd88:	2802      	cmp	r0, #2
   1bd8a:	d0ed      	beq.n	1bd68 <lll_clock_wait+0x8>
		return -EIO;
   1bd8c:	f06f 0004 	mvn.w	r0, #4
   1bd90:	e7eb      	b.n	1bd6a <lll_clock_wait+0xa>
   1bd92:	bf00      	nop
   1bd94:	200038f3 	.word	0x200038f3

0001bd98 <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   1bd98:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1bd9a:	4b09      	ldr	r3, [pc, #36]	; (1bdc0 <lll_hfclock_on+0x28>)
   1bd9c:	f3bf 8f5b 	dmb	ish
   1bda0:	e853 2f00 	ldrex	r2, [r3]
   1bda4:	1c51      	adds	r1, r2, #1
   1bda6:	e843 1000 	strex	r0, r1, [r3]
   1bdaa:	2800      	cmp	r0, #0
   1bdac:	d1f8      	bne.n	1bda0 <lll_hfclock_on+0x8>
   1bdae:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   1bdb2:	2a00      	cmp	r2, #0
   1bdb4:	dc01      	bgt.n	1bdba <lll_hfclock_on+0x22>
		return 0;
	}

	z_nrf_clock_bt_ctlr_hf_request();
   1bdb6:	f002 f91b 	bl	1dff0 <z_nrf_clock_bt_ctlr_hf_request>
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   1bdba:	2000      	movs	r0, #0
   1bdbc:	bd08      	pop	{r3, pc}
   1bdbe:	bf00      	nop
   1bdc0:	20003244 	.word	0x20003244

0001bdc4 <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   1bdc4:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   1bdc6:	4b0c      	ldr	r3, [pc, #48]	; (1bdf8 <lll_hfclock_off+0x34>)
   1bdc8:	681a      	ldr	r2, [r3, #0]
   1bdca:	2a00      	cmp	r2, #0
   1bdcc:	dd10      	ble.n	1bdf0 <lll_hfclock_off+0x2c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1bdce:	f3bf 8f5b 	dmb	ish
   1bdd2:	e853 2f00 	ldrex	r2, [r3]
   1bdd6:	1e51      	subs	r1, r2, #1
   1bdd8:	e843 1000 	strex	r0, r1, [r3]
   1bddc:	2800      	cmp	r0, #0
   1bdde:	d1f8      	bne.n	1bdd2 <lll_hfclock_off+0xe>
   1bde0:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   1bde4:	2a01      	cmp	r2, #1
   1bde6:	dc01      	bgt.n	1bdec <lll_hfclock_off+0x28>
		return 0;
	}

	z_nrf_clock_bt_ctlr_hf_release();
   1bde8:	f002 f918 	bl	1e01c <z_nrf_clock_bt_ctlr_hf_release>
		return 0;
   1bdec:	2000      	movs	r0, #0
   1bdee:	e001      	b.n	1bdf4 <lll_hfclock_off+0x30>
		return -EALREADY;
   1bdf0:	f06f 0077 	mvn.w	r0, #119	; 0x77
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   1bdf4:	bd08      	pop	{r3, pc}
   1bdf6:	bf00      	nop
   1bdf8:	20003244 	.word	0x20003244

0001bdfc <lll_clock_ppm_get>:
}

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
}
   1bdfc:	4b01      	ldr	r3, [pc, #4]	; (1be04 <lll_clock_ppm_get+0x8>)
   1bdfe:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   1be02:	4770      	bx	lr
   1be04:	0002a844 	.word	0x0002a844

0001be08 <isr_tx>:

	lll_done(param);
}

static void isr_tx(void *param)
{
   1be08:	b538      	push	{r3, r4, r5, lr}
   1be0a:	4605      	mov	r5, r0
		lll_prof_latency_capture();
		node_rx_prof = lll_prof_reserve();
	}

	/* Clear radio tx status and events */
	lll_isr_tx_status_reset();
   1be0c:	f00b fe3d 	bl	27a8a <lll_isr_tx_status_reset>

	/* setup tIFS switching */
	radio_tmr_tifs_set(EVENT_IFS_US);
   1be10:	2096      	movs	r0, #150	; 0x96
   1be12:	f001 fcdd 	bl	1d7d0 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, phy_flags);
   1be16:	2300      	movs	r3, #0
   1be18:	4618      	mov	r0, r3
   1be1a:	461a      	mov	r2, r3
   1be1c:	4619      	mov	r1, r3
   1be1e:	f001 fc47 	bl	1d6b0 <radio_switch_complete_and_tx>

	/* setup Rx buffer */
	node_rx = ull_pdu_rx_alloc_peek(1);
   1be22:	2001      	movs	r0, #1
   1be24:	f7fd fa7e 	bl	19324 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1be28:	4604      	mov	r4, r0
   1be2a:	b960      	cbnz	r0, 1be46 <isr_tx+0x3e>
   1be2c:	4a1c      	ldr	r2, [pc, #112]	; (1bea0 <isr_tx+0x98>)
   1be2e:	491d      	ldr	r1, [pc, #116]	; (1bea4 <isr_tx+0x9c>)
   1be30:	481d      	ldr	r0, [pc, #116]	; (1bea8 <isr_tx+0xa0>)
   1be32:	f240 432a 	movw	r3, #1066	; 0x42a
   1be36:	f005 fa19 	bl	2126c <printk>
   1be3a:	4040      	eors	r0, r0
   1be3c:	f380 8811 	msr	BASEPRI, r0
   1be40:	f04f 0003 	mov.w	r0, #3
   1be44:	df02      	svc	2
	radio_pkt_rx_set(node_rx->pdu);
   1be46:	f104 001c 	add.w	r0, r4, #28
   1be4a:	f001 fb3f 	bl	1d4cc <radio_pkt_rx_set>

	/* assert if radio packet ptr is not set and radio started rx */
	LL_ASSERT(!radio_is_ready());
   1be4e:	f001 fb73 	bl	1d538 <radio_is_ready>
   1be52:	b160      	cbz	r0, 1be6e <isr_tx+0x66>
   1be54:	4a12      	ldr	r2, [pc, #72]	; (1bea0 <isr_tx+0x98>)
   1be56:	4915      	ldr	r1, [pc, #84]	; (1beac <isr_tx+0xa4>)
   1be58:	4813      	ldr	r0, [pc, #76]	; (1bea8 <isr_tx+0xa0>)
   1be5a:	f240 432e 	movw	r3, #1070	; 0x42e
   1be5e:	f005 fa05 	bl	2126c <printk>
   1be62:	4040      	eors	r0, r0
   1be64:	f380 8811 	msr	BASEPRI, r0
   1be68:	f04f 0003 	mov.w	r0, #3
   1be6c:	df02      	svc	2

	if (IS_ENABLED(CONFIG_BT_CTLR_PROFILE_ISR)) {
		lll_prof_cputime_capture();
	}

	radio_isr_set(isr_rx, param);
   1be6e:	4629      	mov	r1, r5
   1be70:	480f      	ldr	r0, [pc, #60]	; (1beb0 <isr_tx+0xa8>)
   1be72:	f001 fa75 	bl	1d360 <radio_isr_set>
		radio_ar_configure(count, irks, 0);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	/* +/- 2us active clock jitter, +1 us hcto compensation */
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1be76:	f001 fd93 	bl	1d9a0 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1be7a:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1be7c:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1be7e:	4608      	mov	r0, r1
   1be80:	f00c f868 	bl	27f54 <radio_rx_chain_delay_get>
	hcto += addr_us_get(phy_p);
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   1be84:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1be86:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   1be88:	4608      	mov	r0, r1
   1be8a:	f00c f85f 	bl	27f4c <radio_tx_chain_delay_get>
   1be8e:	442c      	add	r4, r5
   1be90:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   1be92:	1a20      	subs	r0, r4, r0
   1be94:	f001 fd3e 	bl	1d914 <radio_tmr_hcto_configure>
		/* NOTE: as scratch packet is used to receive, it is safe to
		 * generate profile event using rx nodes.
		 */
		lll_prof_reserve_send(node_rx_prof);
	}
}
   1be98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_tmr_end_capture();
   1be9c:	f001 bd72 	b.w	1d984 <radio_tmr_end_capture>
   1bea0:	0002f9cc 	.word	0x0002f9cc
   1bea4:	0002fa16 	.word	0x0002fa16
   1bea8:	0002b804 	.word	0x0002b804
   1beac:	0002fa1e 	.word	0x0002fa1e
   1beb0:	0001c375 	.word	0x0001c375

0001beb4 <is_abort_cb>:
	if (next != curr) {
   1beb4:	4281      	cmp	r1, r0
{
   1beb6:	b508      	push	{r3, lr}
	if (next != curr) {
   1beb8:	d018      	beq.n	1beec <is_abort_cb+0x38>
		} else if (lll->is_hdcd) {
   1beba:	7a0b      	ldrb	r3, [r1, #8]
   1bebc:	07db      	lsls	r3, r3, #31
   1bebe:	d522      	bpl.n	1bf06 <is_abort_cb+0x52>
			*resume_cb = resume_prepare_cb;
   1bec0:	4b12      	ldr	r3, [pc, #72]	; (1bf0c <is_abort_cb+0x58>)
   1bec2:	6013      	str	r3, [r2, #0]
			err = lll_hfclock_on();
   1bec4:	f7ff ff68 	bl	1bd98 <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   1bec8:	2800      	cmp	r0, #0
   1beca:	da0c      	bge.n	1bee6 <is_abort_cb+0x32>
   1becc:	4a10      	ldr	r2, [pc, #64]	; (1bf10 <is_abort_cb+0x5c>)
   1bece:	4911      	ldr	r1, [pc, #68]	; (1bf14 <is_abort_cb+0x60>)
   1bed0:	4811      	ldr	r0, [pc, #68]	; (1bf18 <is_abort_cb+0x64>)
   1bed2:	f240 33e3 	movw	r3, #995	; 0x3e3
   1bed6:	f005 f9c9 	bl	2126c <printk>
   1beda:	4040      	eors	r0, r0
   1bedc:	f380 8811 	msr	BASEPRI, r0
   1bee0:	f04f 0003 	mov.w	r0, #3
   1bee4:	df02      	svc	2
   1bee6:	f06f 000a 	mvn.w	r0, #10
   1beea:	e00b      	b.n	1bf04 <is_abort_cb+0x50>
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   1beec:	7b0b      	ldrb	r3, [r1, #12]
   1beee:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1bef2:	690b      	ldr	r3, [r1, #16]
   1bef4:	781b      	ldrb	r3, [r3, #0]
   1bef6:	f003 030f 	and.w	r3, r3, #15
		return 0;
   1befa:	2b01      	cmp	r3, #1
   1befc:	bf14      	ite	ne
   1befe:	f06f 008b 	mvnne.w	r0, #139	; 0x8b
   1bf02:	2000      	moveq	r0, #0
}
   1bf04:	bd08      	pop	{r3, pc}
			return -ECANCELED;
   1bf06:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1bf0a:	e7fb      	b.n	1bf04 <is_abort_cb+0x50>
   1bf0c:	00027b8d 	.word	0x00027b8d
   1bf10:	0002f9cc 	.word	0x0002f9cc
   1bf14:	0002f97c 	.word	0x0002f97c
   1bf18:	0002b804 	.word	0x0002b804

0001bf1c <abort_cb>:
{
   1bf1c:	b510      	push	{r4, lr}
   1bf1e:	460c      	mov	r4, r1
	if (!prepare_param) {
   1bf20:	b930      	cbnz	r0, 1bf30 <abort_cb+0x14>
		radio_isr_set(isr_abort, param);
   1bf22:	480e      	ldr	r0, [pc, #56]	; (1bf5c <abort_cb+0x40>)
   1bf24:	f001 fa1c 	bl	1d360 <radio_isr_set>
}
   1bf28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   1bf2c:	f001 bae6 	b.w	1d4fc <radio_disable>
	err = lll_hfclock_off();
   1bf30:	f7ff ff48 	bl	1bdc4 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1bf34:	2800      	cmp	r0, #0
   1bf36:	da0c      	bge.n	1bf52 <abort_cb+0x36>
   1bf38:	4a09      	ldr	r2, [pc, #36]	; (1bf60 <abort_cb+0x44>)
   1bf3a:	490a      	ldr	r1, [pc, #40]	; (1bf64 <abort_cb+0x48>)
   1bf3c:	480a      	ldr	r0, [pc, #40]	; (1bf68 <abort_cb+0x4c>)
   1bf3e:	f240 4309 	movw	r3, #1033	; 0x409
   1bf42:	f005 f993 	bl	2126c <printk>
   1bf46:	4040      	eors	r0, r0
   1bf48:	f380 8811 	msr	BASEPRI, r0
   1bf4c:	f04f 0003 	mov.w	r0, #3
   1bf50:	df02      	svc	2
	lll_done(param);
   1bf52:	4620      	mov	r0, r4
}
   1bf54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1bf58:	f7ff bd4a 	b.w	1b9f0 <lll_done>
   1bf5c:	00027ae3 	.word	0x00027ae3
   1bf60:	0002f9cc 	.word	0x0002f9cc
   1bf64:	0002f97c 	.word	0x0002f97c
   1bf68:	0002b804 	.word	0x0002b804

0001bf6c <lll_adv_init>:
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   1bf6c:	4b08      	ldr	r3, [pc, #32]	; (1bf90 <lll_adv_init+0x24>)
   1bf6e:	2204      	movs	r2, #4
{
   1bf70:	b510      	push	{r4, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   1bf72:	1898      	adds	r0, r3, r2
   1bf74:	2128      	movs	r1, #40	; 0x28
   1bf76:	f00a feb1 	bl	26cdc <mem_init>
	MFIFO_INIT(pdu_free);
   1bf7a:	4b06      	ldr	r3, [pc, #24]	; (1bf94 <lll_adv_init+0x28>)
   1bf7c:	2400      	movs	r4, #0
   1bf7e:	805c      	strh	r4, [r3, #2]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1bf80:	2202      	movs	r2, #2
   1bf82:	4621      	mov	r1, r4
   1bf84:	4804      	ldr	r0, [pc, #16]	; (1bf98 <lll_adv_init+0x2c>)
   1bf86:	f00c fe66 	bl	28c56 <z_impl_k_sem_init>
}
   1bf8a:	4620      	mov	r0, r4
   1bf8c:	bd10      	pop	{r4, pc}
   1bf8e:	bf00      	nop
   1bf90:	20003258 	.word	0x20003258
   1bf94:	20000e7c 	.word	0x20000e7c
   1bf98:	200032fc 	.word	0x200032fc

0001bf9c <lll_adv_data_init>:
{
   1bf9c:	b510      	push	{r4, lr}
   1bf9e:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   1bfa0:	4805      	ldr	r0, [pc, #20]	; (1bfb8 <lll_adv_data_init+0x1c>)
   1bfa2:	f00a fec3 	bl	26d2c <mem_acquire>
	if (!p) {
   1bfa6:	4603      	mov	r3, r0
   1bfa8:	b118      	cbz	r0, 1bfb2 <lll_adv_data_init+0x16>
	p->len = 0U;
   1bfaa:	2000      	movs	r0, #0
   1bfac:	7058      	strb	r0, [r3, #1]
	pdu->pdu[0] = (void *)p;
   1bfae:	6063      	str	r3, [r4, #4]
}
   1bfb0:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   1bfb2:	f06f 000b 	mvn.w	r0, #11
   1bfb6:	e7fb      	b.n	1bfb0 <lll_adv_data_init+0x14>
   1bfb8:	20003258 	.word	0x20003258

0001bfbc <lll_adv_pdu_alloc_pdu_adv>:
{
   1bfbc:	b538      	push	{r3, r4, r5, lr}
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   1bfbe:	4c33      	ldr	r4, [pc, #204]	; (1c08c <lll_adv_pdu_alloc_pdu_adv+0xd0>)
   1bfc0:	78a2      	ldrb	r2, [r4, #2]
	if (first == last) {
   1bfc2:	78e1      	ldrb	r1, [r4, #3]
   1bfc4:	7823      	ldrb	r3, [r4, #0]
   1bfc6:	4291      	cmp	r1, r2
   1bfc8:	d023      	beq.n	1c012 <lll_adv_pdu_alloc_pdu_adv+0x56>
	return *((void **)(fifo + first * size));
   1bfca:	fb02 4303 	mla	r3, r2, r3, r4
   1bfce:	685d      	ldr	r5, [r3, #4]
	if (p) {
   1bfd0:	b1fd      	cbz	r5, 1c012 <lll_adv_pdu_alloc_pdu_adv+0x56>
	return z_impl_k_sem_take(sem, timeout);
   1bfd2:	482f      	ldr	r0, [pc, #188]	; (1c090 <lll_adv_pdu_alloc_pdu_adv+0xd4>)
   1bfd4:	2200      	movs	r2, #0
   1bfd6:	2300      	movs	r3, #0
   1bfd8:	f004 f842 	bl	20060 <z_impl_k_sem_take>
		LL_ASSERT(!err);
   1bfdc:	b160      	cbz	r0, 1bff8 <lll_adv_pdu_alloc_pdu_adv+0x3c>
   1bfde:	4a2d      	ldr	r2, [pc, #180]	; (1c094 <lll_adv_pdu_alloc_pdu_adv+0xd8>)
   1bfe0:	492d      	ldr	r1, [pc, #180]	; (1c098 <lll_adv_pdu_alloc_pdu_adv+0xdc>)
   1bfe2:	482e      	ldr	r0, [pc, #184]	; (1c09c <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   1bfe4:	f240 137f 	movw	r3, #383	; 0x17f
   1bfe8:	f005 f940 	bl	2126c <printk>
   1bfec:	4040      	eors	r0, r0
   1bfee:	f380 8811 	msr	BASEPRI, r0
   1bff2:	f04f 0003 	mov.w	r0, #3
   1bff6:	df02      	svc	2
	uint8_t _first = *first; /* Copy read-index */
   1bff8:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   1bffa:	78e1      	ldrb	r1, [r4, #3]
		MFIFO_DEQUEUE(pdu_free);
   1bffc:	7862      	ldrb	r2, [r4, #1]
   1bffe:	4299      	cmp	r1, r3
   1c000:	d005      	beq.n	1c00e <lll_adv_pdu_alloc_pdu_adv+0x52>
	_first += 1U;
   1c002:	3301      	adds	r3, #1
   1c004:	b2db      	uxtb	r3, r3
		_first = 0U;
   1c006:	429a      	cmp	r2, r3
   1c008:	bf08      	it	eq
   1c00a:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1c00c:	70a3      	strb	r3, [r4, #2]
}
   1c00e:	4628      	mov	r0, r5
   1c010:	bd38      	pop	{r3, r4, r5, pc}
	p = mem_acquire(&mem_pdu.free);
   1c012:	4823      	ldr	r0, [pc, #140]	; (1c0a0 <lll_adv_pdu_alloc_pdu_adv+0xe4>)
   1c014:	f00a fe8a 	bl	26d2c <mem_acquire>
	if (p) {
   1c018:	4605      	mov	r5, r0
   1c01a:	2800      	cmp	r0, #0
   1c01c:	d1f7      	bne.n	1c00e <lll_adv_pdu_alloc_pdu_adv+0x52>
   1c01e:	481c      	ldr	r0, [pc, #112]	; (1c090 <lll_adv_pdu_alloc_pdu_adv+0xd4>)
   1c020:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c024:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c028:	f004 f81a 	bl	20060 <z_impl_k_sem_take>
	LL_ASSERT(!err);
   1c02c:	b160      	cbz	r0, 1c048 <lll_adv_pdu_alloc_pdu_adv+0x8c>
   1c02e:	4a19      	ldr	r2, [pc, #100]	; (1c094 <lll_adv_pdu_alloc_pdu_adv+0xd8>)
   1c030:	4919      	ldr	r1, [pc, #100]	; (1c098 <lll_adv_pdu_alloc_pdu_adv+0xdc>)
   1c032:	481a      	ldr	r0, [pc, #104]	; (1c09c <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   1c034:	f44f 73c9 	mov.w	r3, #402	; 0x192
   1c038:	f005 f918 	bl	2126c <printk>
   1c03c:	4040      	eors	r0, r0
   1c03e:	f380 8811 	msr	BASEPRI, r0
   1c042:	f04f 0003 	mov.w	r0, #3
   1c046:	df02      	svc	2
	uint8_t _first = *first; /* Copy read-index */
   1c048:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   1c04a:	78e0      	ldrb	r0, [r4, #3]
	p = MFIFO_DEQUEUE(pdu_free);
   1c04c:	7822      	ldrb	r2, [r4, #0]
   1c04e:	7861      	ldrb	r1, [r4, #1]
   1c050:	4298      	cmp	r0, r3
   1c052:	d10d      	bne.n	1c070 <lll_adv_pdu_alloc_pdu_adv+0xb4>
	LL_ASSERT(p);
   1c054:	4a0f      	ldr	r2, [pc, #60]	; (1c094 <lll_adv_pdu_alloc_pdu_adv+0xd8>)
   1c056:	4913      	ldr	r1, [pc, #76]	; (1c0a4 <lll_adv_pdu_alloc_pdu_adv+0xe8>)
   1c058:	4810      	ldr	r0, [pc, #64]	; (1c09c <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   1c05a:	f240 1395 	movw	r3, #405	; 0x195
   1c05e:	f005 f905 	bl	2126c <printk>
   1c062:	4040      	eors	r0, r0
   1c064:	f380 8811 	msr	BASEPRI, r0
   1c068:	f04f 0003 	mov.w	r0, #3
   1c06c:	df02      	svc	2
   1c06e:	e7ce      	b.n	1c00e <lll_adv_pdu_alloc_pdu_adv+0x52>
	mem = *((void **)(fifo + _first * size));
   1c070:	fb03 4202 	mla	r2, r3, r2, r4
	_first += 1U;
   1c074:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   1c076:	6852      	ldr	r2, [r2, #4]
	_first += 1U;
   1c078:	b2db      	uxtb	r3, r3
		_first = 0U;
   1c07a:	4299      	cmp	r1, r3
   1c07c:	bf08      	it	eq
   1c07e:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1c080:	70a3      	strb	r3, [r4, #2]
   1c082:	2a00      	cmp	r2, #0
   1c084:	d0e6      	beq.n	1c054 <lll_adv_pdu_alloc_pdu_adv+0x98>
   1c086:	4615      	mov	r5, r2
   1c088:	e7c1      	b.n	1c00e <lll_adv_pdu_alloc_pdu_adv+0x52>
   1c08a:	bf00      	nop
   1c08c:	20000e7c 	.word	0x20000e7c
   1c090:	200032fc 	.word	0x200032fc
   1c094:	0002f9cc 	.word	0x0002f9cc
   1c098:	0002f2ed 	.word	0x0002f2ed
   1c09c:	0002b804 	.word	0x0002b804
   1c0a0:	20003258 	.word	0x20003258
   1c0a4:	0002b792 	.word	0x0002b792

0001c0a8 <lll_adv_pdu_latest_get>:
{
   1c0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	first = pdu->first;
   1c0aa:	7803      	ldrb	r3, [r0, #0]
	if (first != pdu->last) {
   1c0ac:	7842      	ldrb	r2, [r0, #1]
   1c0ae:	429a      	cmp	r2, r3
{
   1c0b0:	4605      	mov	r5, r0
   1c0b2:	460e      	mov	r6, r1
	first = pdu->first;
   1c0b4:	b2dc      	uxtb	r4, r3
	if (first != pdu->last) {
   1c0b6:	d021      	beq.n	1c0fc <lll_adv_pdu_latest_get+0x54>
			if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   1c0b8:	4a13      	ldr	r2, [pc, #76]	; (1c108 <lll_adv_pdu_latest_get+0x60>)
   1c0ba:	78d0      	ldrb	r0, [r2, #3]
	if (last == count) {
   1c0bc:	7857      	ldrb	r7, [r2, #1]
   1c0be:	7891      	ldrb	r1, [r2, #2]
	last = last + 1;
   1c0c0:	1c43      	adds	r3, r0, #1
   1c0c2:	b2db      	uxtb	r3, r3
		last = 0U;
   1c0c4:	429f      	cmp	r7, r3
   1c0c6:	bf08      	it	eq
   1c0c8:	2300      	moveq	r3, #0
	if (last == first) {
   1c0ca:	4299      	cmp	r1, r3
   1c0cc:	d01a      	beq.n	1c104 <lll_adv_pdu_latest_get+0x5c>
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1c0ce:	f892 c000 	ldrb.w	ip, [r2]
   1c0d2:	eb05 0784 	add.w	r7, r5, r4, lsl #2
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1c0d6:	fb0c 2000 	mla	r0, ip, r0, r2
		p = pdu->pdu[pdu_idx];
   1c0da:	6879      	ldr	r1, [r7, #4]
   1c0dc:	6041      	str	r1, [r0, #4]
	*last = idx; /* Commit: Update write index */
   1c0de:	70d3      	strb	r3, [r2, #3]
		first += 1U;
   1c0e0:	3401      	adds	r4, #1
   1c0e2:	b2e4      	uxtb	r4, r4
	z_impl_k_sem_give(sem);
   1c0e4:	4809      	ldr	r0, [pc, #36]	; (1c10c <lll_adv_pdu_latest_get+0x64>)
   1c0e6:	f003 ff95 	bl	20014 <z_impl_k_sem_give>
			first = 0U;
   1c0ea:	2c02      	cmp	r4, #2
		*is_modified = 1U;
   1c0ec:	f04f 0301 	mov.w	r3, #1
			first = 0U;
   1c0f0:	bf08      	it	eq
   1c0f2:	2400      	moveq	r4, #0
		pdu->first = first;
   1c0f4:	702c      	strb	r4, [r5, #0]
		*is_modified = 1U;
   1c0f6:	7033      	strb	r3, [r6, #0]
		pdu->pdu[pdu_idx] = NULL;
   1c0f8:	2300      	movs	r3, #0
   1c0fa:	607b      	str	r3, [r7, #4]
	return (void *)pdu->pdu[first];
   1c0fc:	eb05 0484 	add.w	r4, r5, r4, lsl #2
   1c100:	6860      	ldr	r0, [r4, #4]
}
   1c102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return NULL;
   1c104:	2000      	movs	r0, #0
   1c106:	e7fc      	b.n	1c102 <lll_adv_pdu_latest_get+0x5a>
   1c108:	20000e7c 	.word	0x20000e7c
   1c10c:	200032fc 	.word	0x200032fc

0001c110 <chan_prepare.isra.0>:
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   1c110:	7a03      	ldrb	r3, [r0, #8]
	return __builtin_ffs(op);
   1c112:	f3c3 1302 	ubfx	r3, r3, #4, #3
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   1c116:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c118:	2b00      	cmp	r3, #0
   1c11a:	4604      	mov	r4, r0
   1c11c:	fa93 f0a3 	rbit	r0, r3
   1c120:	fab0 f080 	clz	r0, r0
   1c124:	bf08      	it	eq
   1c126:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
	LL_ASSERT(chan);
   1c12a:	1c45      	adds	r5, r0, #1
   1c12c:	d10c      	bne.n	1c148 <chan_prepare.isra.0+0x38>
   1c12e:	4a30      	ldr	r2, [pc, #192]	; (1c1f0 <chan_prepare.isra.0+0xe0>)
   1c130:	4930      	ldr	r1, [pc, #192]	; (1c1f4 <chan_prepare.isra.0+0xe4>)
   1c132:	4831      	ldr	r0, [pc, #196]	; (1c1f8 <chan_prepare.isra.0+0xe8>)
   1c134:	f44f 63a4 	mov.w	r3, #1312	; 0x520
   1c138:	f005 f898 	bl	2126c <printk>
   1c13c:	4040      	eors	r0, r0
   1c13e:	f380 8811 	msr	BASEPRI, r0
   1c142:	f04f 0003 	mov.w	r0, #3
   1c146:	df02      	svc	2

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1c148:	7a23      	ldrb	r3, [r4, #8]
   1c14a:	f3c3 1202 	ubfx	r2, r3, #4, #3
   1c14e:	1e51      	subs	r1, r2, #1
   1c150:	400a      	ands	r2, r1
   1c152:	f362 1306 	bfi	r3, r2, #4, #3

	lll_chan_set(36 + chan);
   1c156:	f105 0024 	add.w	r0, r5, #36	; 0x24
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1c15a:	7223      	strb	r3, [r4, #8]
	lll_chan_set(36 + chan);
   1c15c:	f7ff fc9e 	bl	1ba9c <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   1c160:	2300      	movs	r3, #0
#endif /* CONFIG_BT_CTLR_ADV_EXT_PDU_EXTRA_DATA_MEMORY */

static inline struct pdu_adv *lll_adv_data_latest_get(struct lll_adv *lll,
						      uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   1c162:	f10d 0107 	add.w	r1, sp, #7
   1c166:	f104 000c 	add.w	r0, r4, #12
   1c16a:	f88d 3007 	strb.w	r3, [sp, #7]
   1c16e:	f7ff ff9b 	bl	1c0a8 <lll_adv_pdu_latest_get>
	pdu = lll_adv_data_latest_get(lll, &upd);
	LL_ASSERT(pdu);
   1c172:	4605      	mov	r5, r0
   1c174:	b960      	cbnz	r0, 1c190 <chan_prepare.isra.0+0x80>
   1c176:	4a1e      	ldr	r2, [pc, #120]	; (1c1f0 <chan_prepare.isra.0+0xe0>)
   1c178:	4920      	ldr	r1, [pc, #128]	; (1c1fc <chan_prepare.isra.0+0xec>)
   1c17a:	481f      	ldr	r0, [pc, #124]	; (1c1f8 <chan_prepare.isra.0+0xe8>)
   1c17c:	f240 5329 	movw	r3, #1321	; 0x529
   1c180:	f005 f874 	bl	2126c <printk>
   1c184:	4040      	eors	r0, r0
   1c186:	f380 8811 	msr	BASEPRI, r0
   1c18a:	f04f 0003 	mov.w	r0, #3
   1c18e:	df02      	svc	2

	radio_pkt_tx_set(pdu);
   1c190:	4628      	mov	r0, r5
   1c192:	f001 f9a1 	bl	1d4d8 <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   1c196:	782b      	ldrb	r3, [r5, #0]
   1c198:	f003 030f 	and.w	r3, r3, #15
   1c19c:	2b02      	cmp	r3, #2
   1c19e:	d01f      	beq.n	1c1e0 <chan_prepare.isra.0+0xd0>
}

static inline struct pdu_adv *lll_adv_scan_rsp_latest_get(struct lll_adv *lll,
							  uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   1c1a0:	f10d 0107 	add.w	r1, sp, #7
   1c1a4:	f104 0018 	add.w	r0, r4, #24
   1c1a8:	f7ff ff7e 	bl	1c0a8 <lll_adv_pdu_latest_get>
	    (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		struct pdu_adv *scan_pdu;

		scan_pdu = lll_adv_scan_rsp_latest_get(lll, &upd);
		LL_ASSERT(scan_pdu);
   1c1ac:	b960      	cbnz	r0, 1c1c8 <chan_prepare.isra.0+0xb8>
   1c1ae:	4a10      	ldr	r2, [pc, #64]	; (1c1f0 <chan_prepare.isra.0+0xe0>)
   1c1b0:	4913      	ldr	r1, [pc, #76]	; (1c200 <chan_prepare.isra.0+0xf0>)
   1c1b2:	4811      	ldr	r0, [pc, #68]	; (1c1f8 <chan_prepare.isra.0+0xe8>)
   1c1b4:	f240 5333 	movw	r3, #1331	; 0x533
   1c1b8:	f005 f858 	bl	2126c <printk>
   1c1bc:	4040      	eors	r0, r0
   1c1be:	f380 8811 	msr	BASEPRI, r0
   1c1c2:	f04f 0003 	mov.w	r0, #3
   1c1c6:	df02      	svc	2
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   1c1c8:	480e      	ldr	r0, [pc, #56]	; (1c204 <chan_prepare.isra.0+0xf4>)
   1c1ca:	4621      	mov	r1, r4
   1c1cc:	f001 f8c8 	bl	1d360 <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1c1d0:	2096      	movs	r0, #150	; 0x96
   1c1d2:	f001 fafd 	bl	1d7d0 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   1c1d6:	2000      	movs	r0, #0
   1c1d8:	f001 fa58 	bl	1d68c <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   1c1dc:	b003      	add	sp, #12
   1c1de:	bd30      	pop	{r4, r5, pc}
		radio_isr_set(isr_done, lll);
   1c1e0:	4809      	ldr	r0, [pc, #36]	; (1c208 <chan_prepare.isra.0+0xf8>)
   1c1e2:	4621      	mov	r1, r4
   1c1e4:	f001 f8bc 	bl	1d360 <radio_isr_set>
		radio_switch_complete_and_disable();
   1c1e8:	f001 fa74 	bl	1d6d4 <radio_switch_complete_and_disable>
	return pdu;
   1c1ec:	e7f6      	b.n	1c1dc <chan_prepare.isra.0+0xcc>
   1c1ee:	bf00      	nop
   1c1f0:	0002f9cc 	.word	0x0002f9cc
   1c1f4:	0002f814 	.word	0x0002f814
   1c1f8:	0002b804 	.word	0x0002b804
   1c1fc:	0002fa35 	.word	0x0002fa35
   1c200:	0002fa30 	.word	0x0002fa30
   1c204:	0001be09 	.word	0x0001be09
   1c208:	00027b3d 	.word	0x00027b3d

0001c20c <prepare_cb>:
{
   1c20c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	lll = p->param;
   1c20e:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->conn &&
   1c210:	6863      	ldr	r3, [r4, #4]
{
   1c212:	4605      	mov	r5, r0
	if (unlikely(lll->conn &&
   1c214:	b163      	cbz	r3, 1c230 <prepare_cb+0x24>
   1c216:	f893 3020 	ldrb.w	r3, [r3, #32]
   1c21a:	079a      	lsls	r2, r3, #30
   1c21c:	d008      	beq.n	1c230 <prepare_cb+0x24>
		radio_isr_set(lll_isr_early_abort, lll);
   1c21e:	4831      	ldr	r0, [pc, #196]	; (1c2e4 <prepare_cb+0xd8>)
   1c220:	4621      	mov	r1, r4
		radio_isr_set(isr_abort, lll);
   1c222:	f001 f89d 	bl	1d360 <radio_isr_set>
		radio_disable();
   1c226:	f001 f969 	bl	1d4fc <radio_disable>
}
   1c22a:	2000      	movs	r0, #0
   1c22c:	b003      	add	sp, #12
   1c22e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	radio_reset();
   1c230:	f001 f8b6 	bl	1d3a0 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1c234:	2000      	movs	r0, #0
   1c236:	f001 f8e7 	bl	1d408 <radio_tx_power_set>
	radio_phy_set(0, 0);
   1c23a:	2100      	movs	r1, #0
   1c23c:	4608      	mov	r0, r1
   1c23e:	f001 f8d3 	bl	1d3e8 <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_LEG_PAYLOAD_SIZE_MAX, 0);
   1c242:	2200      	movs	r2, #0
   1c244:	2125      	movs	r1, #37	; 0x25
   1c246:	2008      	movs	r0, #8
   1c248:	f001 f914 	bl	1d474 <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   1c24c:	4b26      	ldr	r3, [pc, #152]	; (1c2e8 <prepare_cb+0xdc>)
   1c24e:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   1c250:	a801      	add	r0, sp, #4
   1c252:	f001 f8f7 	bl	1d444 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1c256:	4925      	ldr	r1, [pc, #148]	; (1c2ec <prepare_cb+0xe0>)
   1c258:	f240 605b 	movw	r0, #1627	; 0x65b
   1c25c:	f001 f98a 	bl	1d574 <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   1c260:	7a23      	ldrb	r3, [r4, #8]
   1c262:	f3c3 0242 	ubfx	r2, r3, #1, #3
   1c266:	f362 1306 	bfi	r3, r2, #4, #3
   1c26a:	7223      	strb	r3, [r4, #8]
	pdu = chan_prepare(lll);
   1c26c:	4620      	mov	r0, r4
   1c26e:	f7ff ff4f 	bl	1c110 <chan_prepare.isra.0>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER_ACCEPT_LIST) && lll->filter_policy) {
   1c272:	7a63      	ldrb	r3, [r4, #9]
   1c274:	079b      	lsls	r3, r3, #30
   1c276:	d007      	beq.n	1c288 <prepare_cb+0x7c>
		struct lll_filter *fal = ull_filter_lll_get(true);
   1c278:	2001      	movs	r0, #1
   1c27a:	f7ff f917 	bl	1b4ac <ull_filter_lll_get>
		radio_filter_configure(fal->enable_bitmask,
   1c27e:	7841      	ldrb	r1, [r0, #1]
   1c280:	1c82      	adds	r2, r0, #2
   1c282:	7800      	ldrb	r0, [r0, #0]
   1c284:	f001 fa56 	bl	1d734 <radio_filter_configure>
	ull = HDR_LLL2ULL(lll);
   1c288:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   1c28a:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   1c28c:	4638      	mov	r0, r7
   1c28e:	f00b fbdd 	bl	27a4c <lll_event_offset_get>
   1c292:	4406      	add	r6, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   1c294:	686a      	ldr	r2, [r5, #4]
   1c296:	f106 0109 	add.w	r1, r6, #9
   1c29a:	2001      	movs	r0, #1
   1c29c:	f001 faa4 	bl	1d7e8 <radio_tmr_start>
	radio_tmr_end_capture();
   1c2a0:	f001 fb70 	bl	1d984 <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   1c2a4:	4620      	mov	r0, r4
   1c2a6:	f7fd fc4d 	bl	19b44 <ull_adv_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_ADV_BASE +
   1c2aa:	1c81      	adds	r1, r0, #2
   1c2ac:	4632      	mov	r2, r6
   1c2ae:	b2c9      	uxtb	r1, r1
   1c2b0:	4638      	mov	r0, r7
   1c2b2:	f00b fbd9 	bl	27a68 <lll_preempt_calc>
   1c2b6:	b110      	cbz	r0, 1c2be <prepare_cb+0xb2>
		radio_isr_set(isr_abort, lll);
   1c2b8:	480d      	ldr	r0, [pc, #52]	; (1c2f0 <prepare_cb+0xe4>)
   1c2ba:	4621      	mov	r1, r4
   1c2bc:	e7b1      	b.n	1c222 <prepare_cb+0x16>
		ret = lll_prepare_done(lll);
   1c2be:	4620      	mov	r0, r4
   1c2c0:	f00b fbbf 	bl	27a42 <lll_prepare_done>
		LL_ASSERT(!ret);
   1c2c4:	2800      	cmp	r0, #0
   1c2c6:	d0b0      	beq.n	1c22a <prepare_cb+0x1e>
   1c2c8:	4a0a      	ldr	r2, [pc, #40]	; (1c2f4 <prepare_cb+0xe8>)
   1c2ca:	490b      	ldr	r1, [pc, #44]	; (1c2f8 <prepare_cb+0xec>)
   1c2cc:	480b      	ldr	r0, [pc, #44]	; (1c2fc <prepare_cb+0xf0>)
   1c2ce:	f240 33ba 	movw	r3, #954	; 0x3ba
   1c2d2:	f004 ffcb 	bl	2126c <printk>
   1c2d6:	4040      	eors	r0, r0
   1c2d8:	f380 8811 	msr	BASEPRI, r0
   1c2dc:	f04f 0003 	mov.w	r0, #3
   1c2e0:	df02      	svc	2
   1c2e2:	e7a2      	b.n	1c22a <prepare_cb+0x1e>
   1c2e4:	0001bb55 	.word	0x0001bb55
   1c2e8:	8e89bed6 	.word	0x8e89bed6
   1c2ec:	00555555 	.word	0x00555555
   1c2f0:	00027ae3 	.word	0x00027ae3
   1c2f4:	0002f9cc 	.word	0x0002f9cc
   1c2f8:	0002f3a5 	.word	0x0002f3a5
   1c2fc:	0002b804 	.word	0x0002b804

0001c300 <lll_adv_prepare>:
{
   1c300:	b513      	push	{r0, r1, r4, lr}
   1c302:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1c304:	f7ff fd48 	bl	1bd98 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1c308:	2800      	cmp	r0, #0
   1c30a:	da0c      	bge.n	1c326 <lll_adv_prepare+0x26>
   1c30c:	4a12      	ldr	r2, [pc, #72]	; (1c358 <lll_adv_prepare+0x58>)
   1c30e:	4913      	ldr	r1, [pc, #76]	; (1c35c <lll_adv_prepare+0x5c>)
   1c310:	4813      	ldr	r0, [pc, #76]	; (1c360 <lll_adv_prepare+0x60>)
   1c312:	f240 2385 	movw	r3, #645	; 0x285
   1c316:	f004 ffa9 	bl	2126c <printk>
   1c31a:	4040      	eors	r0, r0
   1c31c:	f380 8811 	msr	BASEPRI, r0
   1c320:	f04f 0003 	mov.w	r0, #3
   1c324:	df02      	svc	2
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   1c326:	4a0f      	ldr	r2, [pc, #60]	; (1c364 <lll_adv_prepare+0x64>)
   1c328:	490f      	ldr	r1, [pc, #60]	; (1c368 <lll_adv_prepare+0x68>)
   1c32a:	4810      	ldr	r0, [pc, #64]	; (1c36c <lll_adv_prepare+0x6c>)
   1c32c:	9400      	str	r4, [sp, #0]
   1c32e:	2300      	movs	r3, #0
   1c330:	f00b f8aa 	bl	27488 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1c334:	b170      	cbz	r0, 1c354 <lll_adv_prepare+0x54>
   1c336:	3077      	adds	r0, #119	; 0x77
   1c338:	d00c      	beq.n	1c354 <lll_adv_prepare+0x54>
   1c33a:	4a07      	ldr	r2, [pc, #28]	; (1c358 <lll_adv_prepare+0x58>)
   1c33c:	490c      	ldr	r1, [pc, #48]	; (1c370 <lll_adv_prepare+0x70>)
   1c33e:	4808      	ldr	r0, [pc, #32]	; (1c360 <lll_adv_prepare+0x60>)
   1c340:	f44f 7322 	mov.w	r3, #648	; 0x288
   1c344:	f004 ff92 	bl	2126c <printk>
   1c348:	4040      	eors	r0, r0
   1c34a:	f380 8811 	msr	BASEPRI, r0
   1c34e:	f04f 0003 	mov.w	r0, #3
   1c352:	df02      	svc	2
}
   1c354:	b002      	add	sp, #8
   1c356:	bd10      	pop	{r4, pc}
   1c358:	0002f9cc 	.word	0x0002f9cc
   1c35c:	0002f97c 	.word	0x0002f97c
   1c360:	0002b804 	.word	0x0002b804
   1c364:	0001c20d 	.word	0x0001c20d
   1c368:	0001bf1d 	.word	0x0001bf1d
   1c36c:	0001beb5 	.word	0x0001beb5
   1c370:	0002fa39 	.word	0x0002fa39

0001c374 <isr_rx>:
{
   1c374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c378:	b087      	sub	sp, #28
   1c37a:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   1c37c:	f001 f8e6 	bl	1d54c <radio_is_done>
	if (trx_done) {
   1c380:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
   1c384:	d074      	beq.n	1c470 <isr_rx+0xfc>
		crc_ok = radio_crc_is_valid();
   1c386:	f001 f901 	bl	1d58c <radio_crc_is_valid>
   1c38a:	b2c6      	uxtb	r6, r0
		devmatch_ok = radio_filter_has_match();
   1c38c:	f001 fa00 	bl	1d790 <radio_filter_has_match>
   1c390:	fa5f f880 	uxtb.w	r8, r0
		devmatch_id = radio_filter_match_get();
   1c394:	f001 fa06 	bl	1d7a4 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   1c398:	f001 fb20 	bl	1d9dc <radio_ar_has_match>
		irkmatch_id = radio_ar_match_get();
   1c39c:	f001 fb06 	bl	1d9ac <radio_ar_match_get>
		rssi_ready = radio_rssi_is_ready();
   1c3a0:	f001 f9be 	bl	1d720 <radio_rssi_is_ready>
	lll_isr_status_reset();
   1c3a4:	f00b fb81 	bl	27aaa <lll_isr_status_reset>
	if (!trx_done) {
   1c3a8:	2d00      	cmp	r5, #0
   1c3aa:	f000 80bf 	beq.w	1c52c <isr_rx+0x1b8>
	if (crc_ok) {
   1c3ae:	2e00      	cmp	r6, #0
   1c3b0:	f000 80bc 	beq.w	1c52c <isr_rx+0x1b8>
#if defined(CONFIG_BT_CTLR_PRIVACY)
	/* An IRK match implies address resolution enabled */
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
				    FILTER_IDX_NONE;
#else
	uint8_t rl_idx = FILTER_IDX_NONE;
   1c3b4:	23ff      	movs	r3, #255	; 0xff
#endif /* CONFIG_BT_CTLR_PRIVACY */

	node_rx = ull_pdu_rx_alloc_peek(1);
   1c3b6:	2001      	movs	r0, #1
	uint8_t rl_idx = FILTER_IDX_NONE;
   1c3b8:	f88d 3017 	strb.w	r3, [sp, #23]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1c3bc:	f7fc ffb2 	bl	19324 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1c3c0:	4605      	mov	r5, r0
   1c3c2:	b960      	cbnz	r0, 1c3de <isr_rx+0x6a>
   1c3c4:	4a5e      	ldr	r2, [pc, #376]	; (1c540 <isr_rx+0x1cc>)
   1c3c6:	495f      	ldr	r1, [pc, #380]	; (1c544 <isr_rx+0x1d0>)
   1c3c8:	485f      	ldr	r0, [pc, #380]	; (1c548 <isr_rx+0x1d4>)
   1c3ca:	f240 5363 	movw	r3, #1379	; 0x563
   1c3ce:	f004 ff4d 	bl	2126c <printk>
   1c3d2:	4040      	eors	r0, r0
   1c3d4:	f380 8811 	msr	BASEPRI, r0
   1c3d8:	f04f 0003 	mov.w	r0, #3
   1c3dc:	df02      	svc	2
   1c3de:	7b23      	ldrb	r3, [r4, #12]
   1c3e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2

	pdu_rx = (void *)node_rx->pdu;
   1c3e4:	f105 0a1c 	add.w	sl, r5, #28
   1c3e8:	691e      	ldr	r6, [r3, #16]
	pdu_adv = lll_adv_data_curr_get(lll);

	addr = pdu_adv->adv_ind.addr;
   1c3ea:	46b1      	mov	r9, r6
	tx_addr = pdu_adv->tx_addr;
   1c3ec:	f819 7b02 	ldrb.w	r7, [r9], #2

	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   1c3f0:	f007 030f 	and.w	r3, r7, #15
   1c3f4:	2b01      	cmp	r3, #1
	} else {
		tgt_addr = NULL;
	}
	rx_addr = pdu_adv->rx_addr;

	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1c3f6:	7f2b      	ldrb	r3, [r5, #28]
   1c3f8:	f003 030f 	and.w	r3, r3, #15
		tgt_addr = pdu_adv->direct_ind.tgt_addr;
   1c3fc:	bf0c      	ite	eq
   1c3fe:	3608      	addeq	r6, #8
		tgt_addr = NULL;
   1c400:	2600      	movne	r6, #0
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1c402:	2b03      	cmp	r3, #3
	tx_addr = pdu_adv->tx_addr;
   1c404:	f3c7 1b80 	ubfx	fp, r7, #6, #1
	rx_addr = pdu_adv->rx_addr;
   1c408:	ea4f 17d7 	mov.w	r7, r7, lsr #7
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1c40c:	d133      	bne.n	1c476 <isr_rx+0x102>
   1c40e:	7f6b      	ldrb	r3, [r5, #29]
   1c410:	2b0c      	cmp	r3, #12
   1c412:	f040 808b 	bne.w	1c52c <isr_rx+0x1b8>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   1c416:	2e00      	cmp	r6, #0
   1c418:	f040 8088 	bne.w	1c52c <isr_rx+0x1b8>
	    (tgt_addr == NULL) &&
	    lll_adv_scan_req_check(lll, pdu_rx, tx_addr, addr, devmatch_ok,
   1c41c:	f10d 0317 	add.w	r3, sp, #23
   1c420:	e9cd 8300 	strd	r8, r3, [sp]
   1c424:	465a      	mov	r2, fp
   1c426:	464b      	mov	r3, r9
   1c428:	4651      	mov	r1, sl
   1c42a:	4620      	mov	r0, r4
   1c42c:	f00b fbc2 	bl	27bb4 <lll_adv_scan_req_check>
	    (tgt_addr == NULL) &&
   1c430:	b308      	cbz	r0, 1c476 <isr_rx+0x102>
				    &rl_idx)) {
		radio_isr_set(isr_done, lll);
   1c432:	4621      	mov	r1, r4
   1c434:	4845      	ldr	r0, [pc, #276]	; (1c54c <isr_rx+0x1d8>)
   1c436:	f000 ff93 	bl	1d360 <radio_isr_set>
		radio_switch_complete_and_disable();
   1c43a:	f001 f94b 	bl	1d6d4 <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   1c43e:	7e20      	ldrb	r0, [r4, #24]
   1c440:	eb04 0480 	add.w	r4, r4, r0, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   1c444:	69e0      	ldr	r0, [r4, #28]
   1c446:	f001 f847 	bl	1d4d8 <radio_pkt_tx_set>

		/* assert if radio packet ptr is not set and radio started tx */
		LL_ASSERT(!radio_is_ready());
   1c44a:	f001 f875 	bl	1d538 <radio_is_ready>
   1c44e:	b160      	cbz	r0, 1c46a <isr_rx+0xf6>
   1c450:	4a3b      	ldr	r2, [pc, #236]	; (1c540 <isr_rx+0x1cc>)
   1c452:	493f      	ldr	r1, [pc, #252]	; (1c550 <isr_rx+0x1dc>)
   1c454:	483c      	ldr	r0, [pc, #240]	; (1c548 <isr_rx+0x1d4>)
   1c456:	f240 537c 	movw	r3, #1404	; 0x57c
   1c45a:	f004 ff07 	bl	2126c <printk>
   1c45e:	4040      	eors	r0, r0
   1c460:	f380 8811 	msr	BASEPRI, r0
   1c464:	f04f 0003 	mov.w	r0, #3
   1c468:	df02      	svc	2
}
   1c46a:	b007      	add	sp, #28
   1c46c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0U;
   1c470:	462e      	mov	r6, r5
   1c472:	46a8      	mov	r8, r5
   1c474:	e796      	b.n	1c3a4 <isr_rx+0x30>
	 *       Under this race, peer central would get failed to establish
	 *       connection as the disconnect reason. This is an acceptable
	 *       outcome to keep the thread mode implementation simple when
	 *       disabling connectable advertising.
	 */
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   1c476:	7f2b      	ldrb	r3, [r5, #28]
   1c478:	f003 030f 	and.w	r3, r3, #15
   1c47c:	2b05      	cmp	r3, #5
   1c47e:	d155      	bne.n	1c52c <isr_rx+0x1b8>
   1c480:	7f6b      	ldrb	r3, [r5, #29]
   1c482:	2b22      	cmp	r3, #34	; 0x22
   1c484:	d152      	bne.n	1c52c <isr_rx+0x1b8>
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
		   lll->conn && !lll->conn->periph.cancelled &&
   1c486:	6863      	ldr	r3, [r4, #4]
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   1c488:	2b00      	cmp	r3, #0
   1c48a:	d04f      	beq.n	1c52c <isr_rx+0x1b8>
		   lll->conn && !lll->conn->periph.cancelled &&
   1c48c:	f893 3020 	ldrb.w	r3, [r3, #32]
   1c490:	079b      	lsls	r3, r3, #30
   1c492:	d44b      	bmi.n	1c52c <isr_rx+0x1b8>
		   lll_adv_connect_ind_check(lll, pdu_rx, tx_addr, addr,
   1c494:	f10d 0317 	add.w	r3, sp, #23
   1c498:	e9cd 8302 	strd	r8, r3, [sp, #8]
   1c49c:	e9cd 7600 	strd	r7, r6, [sp]
   1c4a0:	464b      	mov	r3, r9
   1c4a2:	465a      	mov	r2, fp
   1c4a4:	4651      	mov	r1, sl
   1c4a6:	4620      	mov	r0, r4
   1c4a8:	f00b fb9c 	bl	27be4 <lll_adv_connect_ind_check>
		   lll->conn && !lll->conn->periph.cancelled &&
   1c4ac:	2800      	cmp	r0, #0
   1c4ae:	d03d      	beq.n	1c52c <isr_rx+0x1b8>
		struct node_rx_pdu *rx;

		if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
			rx = ull_pdu_rx_alloc_peek(4);
		} else {
			rx = ull_pdu_rx_alloc_peek(3);
   1c4b0:	2003      	movs	r0, #3
   1c4b2:	f7fc ff37 	bl	19324 <ull_pdu_rx_alloc_peek>
		}

		if (!rx) {
   1c4b6:	2800      	cmp	r0, #0
   1c4b8:	d038      	beq.n	1c52c <isr_rx+0x1b8>
			return -ENOBUFS;
		}

		radio_isr_set(isr_abort, lll);
   1c4ba:	4826      	ldr	r0, [pc, #152]	; (1c554 <isr_rx+0x1e0>)
   1c4bc:	4621      	mov	r1, r4
   1c4be:	f000 ff4f 	bl	1d360 <radio_isr_set>
		radio_disable();
   1c4c2:	f001 f81b 	bl	1d4fc <radio_disable>

		/* assert if radio started tx */
		LL_ASSERT(!radio_is_ready());
   1c4c6:	f001 f837 	bl	1d538 <radio_is_ready>
   1c4ca:	b160      	cbz	r0, 1c4e6 <isr_rx+0x172>
   1c4cc:	4a1c      	ldr	r2, [pc, #112]	; (1c540 <isr_rx+0x1cc>)
   1c4ce:	4920      	ldr	r1, [pc, #128]	; (1c550 <isr_rx+0x1dc>)
   1c4d0:	481d      	ldr	r0, [pc, #116]	; (1c548 <isr_rx+0x1d4>)
   1c4d2:	f240 53c3 	movw	r3, #1475	; 0x5c3
   1c4d6:	f004 fec9 	bl	2126c <printk>
   1c4da:	4040      	eors	r0, r0
   1c4dc:	f380 8811 	msr	BASEPRI, r0
   1c4e0:	f04f 0003 	mov.w	r0, #3
   1c4e4:	df02      	svc	2
			lll->conn->rssi_latest =  radio_rssi_get();
		}
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

		/* Stop further LLL radio events */
		lll->conn->periph.initiated = 1;
   1c4e6:	6862      	ldr	r2, [r4, #4]
   1c4e8:	f892 3020 	ldrb.w	r3, [r2, #32]
   1c4ec:	f043 0301 	orr.w	r3, r3, #1
   1c4f0:	f882 3020 	strb.w	r3, [r2, #32]

		rx = ull_pdu_rx_alloc();
   1c4f4:	f7fc ff2e 	bl	19354 <ull_pdu_rx_alloc>

		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1c4f8:	2316      	movs	r3, #22
   1c4fa:	7103      	strb	r3, [r0, #4]
		rx->hdr.handle = 0xffff;
   1c4fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c500:	80c3      	strh	r3, [r0, #6]

		ftr = &(rx->hdr.rx_ftr);
		ftr->param = lll;
   1c502:	6084      	str	r4, [r0, #8]
		rx = ull_pdu_rx_alloc();
   1c504:	4605      	mov	r5, r0
		ftr->ticks_anchor = radio_tmr_start_get();
   1c506:	f001 f9f3 	bl	1d8f0 <radio_tmr_start_get>
   1c50a:	6128      	str	r0, [r5, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   1c50c:	f001 fa42 	bl	1d994 <radio_tmr_end_get>
				    radio_rx_chain_delay_get(0, 0);
   1c510:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   1c512:	4604      	mov	r4, r0
				    radio_rx_chain_delay_get(0, 0);
   1c514:	4608      	mov	r0, r1
   1c516:	f00b fd1d 	bl	27f54 <radio_rx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   1c51a:	1a24      	subs	r4, r4, r0

		if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
			ftr->extra = ull_pdu_rx_alloc();
		}

		ull_rx_put(rx->hdr.link, rx);
   1c51c:	4629      	mov	r1, r5
   1c51e:	6828      	ldr	r0, [r5, #0]
		ftr->radio_end_us = radio_tmr_end_get() -
   1c520:	616c      	str	r4, [r5, #20]
		ull_rx_put(rx->hdr.link, rx);
   1c522:	f7fc ff2d 	bl	19380 <ull_rx_put>
		ull_rx_sched();
   1c526:	f7fc ff3b 	bl	193a0 <ull_rx_sched>
		if (!err) {
   1c52a:	e79e      	b.n	1c46a <isr_rx+0xf6>
	radio_isr_set(isr_done, param);
   1c52c:	4807      	ldr	r0, [pc, #28]	; (1c54c <isr_rx+0x1d8>)
   1c52e:	4621      	mov	r1, r4
   1c530:	f000 ff16 	bl	1d360 <radio_isr_set>
}
   1c534:	b007      	add	sp, #28
   1c536:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	radio_disable();
   1c53a:	f000 bfdf 	b.w	1d4fc <radio_disable>
   1c53e:	bf00      	nop
   1c540:	0002f9cc 	.word	0x0002f9cc
   1c544:	0002fa16 	.word	0x0002fa16
   1c548:	0002b804 	.word	0x0002b804
   1c54c:	00027b3d 	.word	0x00027b3d
   1c550:	0002fa1e 	.word	0x0002fa1e
   1c554:	00027ae3 	.word	0x00027ae3

0001c558 <ticker_stop_cb>:
	lll_done(param);
}

static void ticker_stop_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
			   uint32_t remainder, uint16_t lazy, uint8_t force, void *param)
{
   1c558:	b508      	push	{r3, lr}
	radio_isr_set(isr_done_cleanup, param);
   1c55a:	9903      	ldr	r1, [sp, #12]
   1c55c:	4803      	ldr	r0, [pc, #12]	; (1c56c <ticker_stop_cb+0x14>)
   1c55e:	f000 feff 	bl	1d360 <radio_isr_set>
	radio_disable();
}
   1c562:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_disable();
   1c566:	f000 bfc9 	b.w	1d4fc <radio_disable>
   1c56a:	bf00      	nop
   1c56c:	00027c61 	.word	0x00027c61

0001c570 <common_prepare_cb>:
{
   1c570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	lll = p->param;
   1c574:	68c4      	ldr	r4, [r0, #12]
	lll->state = 0U;
   1c576:	7923      	ldrb	r3, [r4, #4]
   1c578:	f36f 0300 	bfc	r3, #0, #1
{
   1c57c:	b08c      	sub	sp, #48	; 0x30
	lll->state = 0U;
   1c57e:	7123      	strb	r3, [r4, #4]
{
   1c580:	460d      	mov	r5, r1
   1c582:	4607      	mov	r7, r0
	radio_reset();
   1c584:	f000 ff0c 	bl	1d3a0 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1c588:	2000      	movs	r0, #0
   1c58a:	f000 ff3d 	bl	1d408 <radio_tx_power_set>
	radio_phy_set(0, 0);
   1c58e:	2100      	movs	r1, #0
   1c590:	4608      	mov	r0, r1
   1c592:	f000 ff29 	bl	1d3e8 <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_LEG_PAYLOAD_SIZE_MAX, 0);
   1c596:	2200      	movs	r2, #0
   1c598:	2125      	movs	r1, #37	; 0x25
   1c59a:	2008      	movs	r0, #8
   1c59c:	f000 ff6a 	bl	1d474 <radio_pkt_configure>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1c5a0:	2001      	movs	r0, #1
   1c5a2:	f7fc febf 	bl	19324 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1c5a6:	4606      	mov	r6, r0
   1c5a8:	b960      	cbnz	r0, 1c5c4 <common_prepare_cb+0x54>
   1c5aa:	4a4e      	ldr	r2, [pc, #312]	; (1c6e4 <common_prepare_cb+0x174>)
   1c5ac:	494e      	ldr	r1, [pc, #312]	; (1c6e8 <common_prepare_cb+0x178>)
   1c5ae:	484f      	ldr	r0, [pc, #316]	; (1c6ec <common_prepare_cb+0x17c>)
   1c5b0:	f44f 73b6 	mov.w	r3, #364	; 0x16c
   1c5b4:	f004 fe5a 	bl	2126c <printk>
   1c5b8:	4040      	eors	r0, r0
   1c5ba:	f380 8811 	msr	BASEPRI, r0
   1c5be:	f04f 0003 	mov.w	r0, #3
   1c5c2:	df02      	svc	2
	radio_pkt_rx_set(node_rx->pdu);
   1c5c4:	f106 001c 	add.w	r0, r6, #28
   1c5c8:	f000 ff80 	bl	1d4cc <radio_pkt_rx_set>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   1c5cc:	4b48      	ldr	r3, [pc, #288]	; (1c6f0 <common_prepare_cb+0x180>)
   1c5ce:	930b      	str	r3, [sp, #44]	; 0x2c
	radio_aa_set((uint8_t *)&aa);
   1c5d0:	a80b      	add	r0, sp, #44	; 0x2c
   1c5d2:	f000 ff37 	bl	1d444 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1c5d6:	4947      	ldr	r1, [pc, #284]	; (1c6f4 <common_prepare_cb+0x184>)
   1c5d8:	f240 605b 	movw	r0, #1627	; 0x65b
   1c5dc:	f000 ffca 	bl	1d574 <radio_crc_configure>
	lll_chan_set(37 + lll->chan);
   1c5e0:	7920      	ldrb	r0, [r4, #4]
   1c5e2:	f3c0 0041 	ubfx	r0, r0, #1, #2
   1c5e6:	3025      	adds	r0, #37	; 0x25
   1c5e8:	f7ff fa58 	bl	1ba9c <lll_chan_set>
	radio_isr_set(isr_rx, lll);
   1c5ec:	4842      	ldr	r0, [pc, #264]	; (1c6f8 <common_prepare_cb+0x188>)
   1c5ee:	4621      	mov	r1, r4
   1c5f0:	f000 feb6 	bl	1d360 <radio_isr_set>
	} else if (lll->type ||
   1c5f4:	7923      	ldrb	r3, [r4, #4]
   1c5f6:	069b      	lsls	r3, r3, #26
   1c5f8:	d539      	bpl.n	1c66e <common_prepare_cb+0xfe>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1c5fa:	2096      	movs	r0, #150	; 0x96
   1c5fc:	f001 f8e8 	bl	1d7d0 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   1c600:	2300      	movs	r3, #0
   1c602:	461a      	mov	r2, r3
   1c604:	4619      	mov	r1, r3
   1c606:	4618      	mov	r0, r3
   1c608:	f001 f852 	bl	1d6b0 <radio_switch_complete_and_tx>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER_ACCEPT_LIST) && lll->filter_policy) {
   1c60c:	7923      	ldrb	r3, [r4, #4]
   1c60e:	f013 0f18 	tst.w	r3, #24
   1c612:	d007      	beq.n	1c624 <common_prepare_cb+0xb4>
		struct lll_filter *fal = ull_filter_lll_get(true);
   1c614:	2001      	movs	r0, #1
   1c616:	f7fe ff49 	bl	1b4ac <ull_filter_lll_get>
		radio_filter_configure(fal->enable_bitmask,
   1c61a:	7841      	ldrb	r1, [r0, #1]
   1c61c:	1c82      	adds	r2, r0, #2
   1c61e:	7800      	ldrb	r0, [r0, #0]
   1c620:	f001 f888 	bl	1d734 <radio_filter_configure>
	ull = HDR_LLL2ULL(lll);
   1c624:	f8d4 8000 	ldr.w	r8, [r4]
	ticks_at_event = p->ticks_at_expire;
   1c628:	683e      	ldr	r6, [r7, #0]
	ticks_at_event += lll_event_offset_get(ull);
   1c62a:	4640      	mov	r0, r8
   1c62c:	f00b fa0e 	bl	27a4c <lll_event_offset_get>
   1c630:	4406      	add	r6, r0
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   1c632:	687a      	ldr	r2, [r7, #4]
   1c634:	f106 0109 	add.w	r1, r6, #9
   1c638:	2000      	movs	r0, #0
   1c63a:	f001 f8d5 	bl	1d7e8 <radio_tmr_start>
	radio_tmr_end_capture();
   1c63e:	f001 f9a1 	bl	1d984 <radio_tmr_end_capture>
	radio_rssi_measure();
   1c642:	f001 f855 	bl	1d6f0 <radio_rssi_measure>
				   ull_scan_lll_handle_get(lll)),
   1c646:	4620      	mov	r0, r4
   1c648:	f7fd fba8 	bl	19d9c <ull_scan_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_SCAN_BASE +
   1c64c:	1d01      	adds	r1, r0, #4
   1c64e:	4632      	mov	r2, r6
   1c650:	b2c9      	uxtb	r1, r1
   1c652:	4640      	mov	r0, r8
   1c654:	f00b fa08 	bl	27a68 <lll_preempt_calc>
   1c658:	b160      	cbz	r0, 1c674 <common_prepare_cb+0x104>
		radio_isr_set(isr_abort, lll);
   1c65a:	4828      	ldr	r0, [pc, #160]	; (1c6fc <common_prepare_cb+0x18c>)
   1c65c:	4621      	mov	r1, r4
   1c65e:	f000 fe7f 	bl	1d360 <radio_isr_set>
		radio_disable();
   1c662:	f000 ff4b 	bl	1d4fc <radio_disable>
}
   1c666:	2000      	movs	r0, #0
   1c668:	b00c      	add	sp, #48	; 0x30
   1c66a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		radio_switch_complete_and_disable();
   1c66e:	f001 f831 	bl	1d6d4 <radio_switch_complete_and_disable>
   1c672:	e7cb      	b.n	1c60c <common_prepare_cb+0x9c>
		if (!is_resume && lll->ticks_window) {
   1c674:	bb1d      	cbnz	r5, 1c6be <common_prepare_cb+0x14e>
   1c676:	6923      	ldr	r3, [r4, #16]
   1c678:	b30b      	cbz	r3, 1c6be <common_prepare_cb+0x14e>
			ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1c67a:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
   1c67e:	9208      	str	r2, [sp, #32]
   1c680:	4a1f      	ldr	r2, [pc, #124]	; (1c700 <common_prepare_cb+0x190>)
   1c682:	e9cd 4206 	strd	r4, r2, [sp, #24]
   1c686:	4a1f      	ldr	r2, [pc, #124]	; (1c704 <common_prepare_cb+0x194>)
   1c688:	e9cd 3500 	strd	r3, r5, [sp]
   1c68c:	e9cd 5204 	strd	r5, r2, [sp, #16]
   1c690:	4633      	mov	r3, r6
   1c692:	e9cd 5502 	strd	r5, r5, [sp, #8]
   1c696:	2203      	movs	r2, #3
   1c698:	4629      	mov	r1, r5
   1c69a:	f00a fe3a 	bl	27312 <ticker_start>
			LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1c69e:	f030 0302 	bics.w	r3, r0, #2
   1c6a2:	d00c      	beq.n	1c6be <common_prepare_cb+0x14e>
   1c6a4:	4a0f      	ldr	r2, [pc, #60]	; (1c6e4 <common_prepare_cb+0x174>)
   1c6a6:	4918      	ldr	r1, [pc, #96]	; (1c708 <common_prepare_cb+0x198>)
   1c6a8:	4810      	ldr	r0, [pc, #64]	; (1c6ec <common_prepare_cb+0x17c>)
   1c6aa:	f240 13d7 	movw	r3, #471	; 0x1d7
   1c6ae:	f004 fddd 	bl	2126c <printk>
   1c6b2:	4040      	eors	r0, r0
   1c6b4:	f380 8811 	msr	BASEPRI, r0
   1c6b8:	f04f 0003 	mov.w	r0, #3
   1c6bc:	df02      	svc	2
		ret = lll_prepare_done(lll);
   1c6be:	4620      	mov	r0, r4
   1c6c0:	f00b f9bf 	bl	27a42 <lll_prepare_done>
		LL_ASSERT(!ret);
   1c6c4:	2800      	cmp	r0, #0
   1c6c6:	d0ce      	beq.n	1c666 <common_prepare_cb+0xf6>
   1c6c8:	4a06      	ldr	r2, [pc, #24]	; (1c6e4 <common_prepare_cb+0x174>)
   1c6ca:	4910      	ldr	r1, [pc, #64]	; (1c70c <common_prepare_cb+0x19c>)
   1c6cc:	4807      	ldr	r0, [pc, #28]	; (1c6ec <common_prepare_cb+0x17c>)
   1c6ce:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
   1c6d2:	f004 fdcb 	bl	2126c <printk>
   1c6d6:	4040      	eors	r0, r0
   1c6d8:	f380 8811 	msr	BASEPRI, r0
   1c6dc:	f04f 0003 	mov.w	r0, #3
   1c6e0:	df02      	svc	2
   1c6e2:	e7c0      	b.n	1c666 <common_prepare_cb+0xf6>
   1c6e4:	0002fa5d 	.word	0x0002fa5d
   1c6e8:	0002fa16 	.word	0x0002fa16
   1c6ec:	0002b804 	.word	0x0002b804
   1c6f0:	8e89bed6 	.word	0x8e89bed6
   1c6f4:	00555555 	.word	0x00555555
   1c6f8:	0001c905 	.word	0x0001c905
   1c6fc:	00027d5f 	.word	0x00027d5f
   1c700:	0001c829 	.word	0x0001c829
   1c704:	0001c559 	.word	0x0001c559
   1c708:	0002f486 	.word	0x0002f486
   1c70c:	0002f3a5 	.word	0x0002f3a5

0001c710 <isr_common_done>:

	radio_isr_set(isr_rx, param);
}

static void isr_common_done(void *param)
{
   1c710:	b538      	push	{r3, r4, r5, lr}
   1c712:	4604      	mov	r4, r0
	struct node_rx_pdu *node_rx;
	struct lll_scan *lll;

	/* Clear radio status and events */
	lll_isr_status_reset();
   1c714:	f00b f9c9 	bl	27aaa <lll_isr_status_reset>

	/* Reset scanning state */
	lll = param;
	lll->state = 0U;
   1c718:	7923      	ldrb	r3, [r4, #4]
   1c71a:	f36f 0300 	bfc	r3, #0, #1
   1c71e:	7123      	strb	r3, [r4, #4]
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	/* setup tIFS switching */
	if (0) {
		/* TODO: Add Rx-Rx switch usecase improvement in the future */
	} else if (lll->type ||
   1c720:	069b      	lsls	r3, r3, #26
   1c722:	d526      	bpl.n	1c772 <isr_common_done+0x62>
#if defined(CONFIG_BT_CENTRAL)
		   lll->conn) {
#else /* !CONFIG_BT_CENTRAL */
		   0) {
#endif /* !CONFIG_BT_CENTRAL */
		radio_tmr_tifs_set(EVENT_IFS_US);
   1c724:	2096      	movs	r0, #150	; 0x96
   1c726:	f001 f853 	bl	1d7d0 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   1c72a:	2300      	movs	r3, #0
   1c72c:	461a      	mov	r2, r3
   1c72e:	4619      	mov	r1, r3
   1c730:	4618      	mov	r0, r3
   1c732:	f000 ffbd 	bl	1d6b0 <radio_switch_complete_and_tx>
	} else {
		radio_switch_complete_and_disable();
	}

	node_rx = ull_pdu_rx_alloc_peek(1);
   1c736:	2001      	movs	r0, #1
   1c738:	f7fc fdf4 	bl	19324 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1c73c:	4605      	mov	r5, r0
   1c73e:	b960      	cbnz	r0, 1c75a <isr_common_done+0x4a>
   1c740:	4a0d      	ldr	r2, [pc, #52]	; (1c778 <isr_common_done+0x68>)
   1c742:	490e      	ldr	r1, [pc, #56]	; (1c77c <isr_common_done+0x6c>)
   1c744:	480e      	ldr	r0, [pc, #56]	; (1c780 <isr_common_done+0x70>)
   1c746:	f44f 7346 	mov.w	r3, #792	; 0x318
   1c74a:	f004 fd8f 	bl	2126c <printk>
   1c74e:	4040      	eors	r0, r0
   1c750:	f380 8811 	msr	BASEPRI, r0
   1c754:	f04f 0003 	mov.w	r0, #3
   1c758:	df02      	svc	2
	radio_pkt_rx_set(node_rx->pdu);
   1c75a:	f105 001c 	add.w	r0, r5, #28
   1c75e:	f000 feb5 	bl	1d4cc <radio_pkt_rx_set>
		radio_ar_configure(count, irks, 0);
#endif
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	radio_rssi_measure();
   1c762:	f000 ffc5 	bl	1d6f0 <radio_rssi_measure>

	radio_isr_set(isr_rx, param);
   1c766:	4621      	mov	r1, r4
   1c768:	4806      	ldr	r0, [pc, #24]	; (1c784 <isr_common_done+0x74>)
}
   1c76a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(isr_rx, param);
   1c76e:	f000 bdf7 	b.w	1d360 <radio_isr_set>
		radio_switch_complete_and_disable();
   1c772:	f000 ffaf 	bl	1d6d4 <radio_switch_complete_and_disable>
   1c776:	e7de      	b.n	1c736 <isr_common_done+0x26>
   1c778:	0002fa5d 	.word	0x0002fa5d
   1c77c:	0002fa16 	.word	0x0002fa16
   1c780:	0002b804 	.word	0x0002b804
   1c784:	0001c905 	.word	0x0001c905

0001c788 <isr_tx>:
{
   1c788:	b570      	push	{r4, r5, r6, lr}
   1c78a:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   1c78c:	f00b f97d 	bl	27a8a <lll_isr_tx_status_reset>
	radio_switch_complete_and_disable();
   1c790:	f000 ffa0 	bl	1d6d4 <radio_switch_complete_and_disable>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1c794:	2001      	movs	r0, #1
   1c796:	f7fc fdc5 	bl	19324 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1c79a:	4604      	mov	r4, r0
   1c79c:	b960      	cbnz	r0, 1c7b8 <isr_tx+0x30>
   1c79e:	4a1d      	ldr	r2, [pc, #116]	; (1c814 <isr_tx+0x8c>)
   1c7a0:	491d      	ldr	r1, [pc, #116]	; (1c818 <isr_tx+0x90>)
   1c7a2:	481e      	ldr	r0, [pc, #120]	; (1c81c <isr_tx+0x94>)
   1c7a4:	f240 23d2 	movw	r3, #722	; 0x2d2
   1c7a8:	f004 fd60 	bl	2126c <printk>
   1c7ac:	4040      	eors	r0, r0
   1c7ae:	f380 8811 	msr	BASEPRI, r0
   1c7b2:	f04f 0003 	mov.w	r0, #3
   1c7b6:	df02      	svc	2
	radio_pkt_rx_set(node_rx->pdu);
   1c7b8:	f104 001c 	add.w	r0, r4, #28
   1c7bc:	f000 fe86 	bl	1d4cc <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   1c7c0:	f000 feba 	bl	1d538 <radio_is_ready>
   1c7c4:	b160      	cbz	r0, 1c7e0 <isr_tx+0x58>
   1c7c6:	4a13      	ldr	r2, [pc, #76]	; (1c814 <isr_tx+0x8c>)
   1c7c8:	4915      	ldr	r1, [pc, #84]	; (1c820 <isr_tx+0x98>)
   1c7ca:	4814      	ldr	r0, [pc, #80]	; (1c81c <isr_tx+0x94>)
   1c7cc:	f240 23d6 	movw	r3, #726	; 0x2d6
   1c7d0:	f004 fd4c 	bl	2126c <printk>
   1c7d4:	4040      	eors	r0, r0
   1c7d6:	f380 8811 	msr	BASEPRI, r0
   1c7da:	f04f 0003 	mov.w	r0, #3
   1c7de:	df02      	svc	2
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1c7e0:	f001 f8de 	bl	1d9a0 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   1c7e4:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1c7e6:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   1c7e8:	4608      	mov	r0, r1
   1c7ea:	f00b fbb3 	bl	27f54 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   1c7ee:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   1c7f0:	4606      	mov	r6, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   1c7f2:	4608      	mov	r0, r1
   1c7f4:	f00b fbaa 	bl	27f4c <radio_tx_chain_delay_get>
   1c7f8:	4434      	add	r4, r6
   1c7fa:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   1c7fc:	1a20      	subs	r0, r4, r0
   1c7fe:	f001 f889 	bl	1d914 <radio_tmr_hcto_configure>
	radio_rssi_measure();
   1c802:	f000 ff75 	bl	1d6f0 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   1c806:	4629      	mov	r1, r5
   1c808:	4806      	ldr	r0, [pc, #24]	; (1c824 <isr_tx+0x9c>)
}
   1c80a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	radio_isr_set(isr_rx, param);
   1c80e:	f000 bda7 	b.w	1d360 <radio_isr_set>
   1c812:	bf00      	nop
   1c814:	0002fa5d 	.word	0x0002fa5d
   1c818:	0002fa16 	.word	0x0002fa16
   1c81c:	0002b804 	.word	0x0002b804
   1c820:	0002fa1e 	.word	0x0002fa1e
   1c824:	0001c905 	.word	0x0001c905

0001c828 <ticker_op_start_cb>:
{
   1c828:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1c82a:	b160      	cbz	r0, 1c846 <ticker_op_start_cb+0x1e>
   1c82c:	4a06      	ldr	r2, [pc, #24]	; (1c848 <ticker_op_start_cb+0x20>)
   1c82e:	4907      	ldr	r1, [pc, #28]	; (1c84c <ticker_op_start_cb+0x24>)
   1c830:	4807      	ldr	r0, [pc, #28]	; (1c850 <ticker_op_start_cb+0x28>)
   1c832:	f44f 7318 	mov.w	r3, #608	; 0x260
   1c836:	f004 fd19 	bl	2126c <printk>
   1c83a:	4040      	eors	r0, r0
   1c83c:	f380 8811 	msr	BASEPRI, r0
   1c840:	f04f 0003 	mov.w	r0, #3
   1c844:	df02      	svc	2
}
   1c846:	bd08      	pop	{r3, pc}
   1c848:	0002fa5d 	.word	0x0002fa5d
   1c84c:	0002f7ba 	.word	0x0002f7ba
   1c850:	0002b804 	.word	0x0002b804

0001c854 <is_abort_cb>:
	if (next != curr) {
   1c854:	4281      	cmp	r1, r0
{
   1c856:	b508      	push	{r3, lr}
	if (next != curr) {
   1c858:	d017      	beq.n	1c88a <is_abort_cb+0x36>
			if (!lll->ticks_window) {
   1c85a:	690b      	ldr	r3, [r1, #16]
   1c85c:	b9e3      	cbnz	r3, 1c898 <is_abort_cb+0x44>
				*resume_cb = resume_prepare_cb;
   1c85e:	4b10      	ldr	r3, [pc, #64]	; (1c8a0 <is_abort_cb+0x4c>)
   1c860:	6013      	str	r3, [r2, #0]
				err = lll_hfclock_on();
   1c862:	f7ff fa99 	bl	1bd98 <lll_hfclock_on>
				LL_ASSERT(err >= 0);
   1c866:	2800      	cmp	r0, #0
   1c868:	da0c      	bge.n	1c884 <is_abort_cb+0x30>
   1c86a:	4a0e      	ldr	r2, [pc, #56]	; (1c8a4 <is_abort_cb+0x50>)
   1c86c:	490e      	ldr	r1, [pc, #56]	; (1c8a8 <is_abort_cb+0x54>)
   1c86e:	480f      	ldr	r0, [pc, #60]	; (1c8ac <is_abort_cb+0x58>)
   1c870:	f240 230e 	movw	r3, #526	; 0x20e
   1c874:	f004 fcfa 	bl	2126c <printk>
   1c878:	4040      	eors	r0, r0
   1c87a:	f380 8811 	msr	BASEPRI, r0
   1c87e:	f04f 0003 	mov.w	r0, #3
   1c882:	df02      	svc	2
				return -EAGAIN;
   1c884:	f06f 000a 	mvn.w	r0, #10
   1c888:	e005      	b.n	1c896 <is_abort_cb+0x42>
		radio_isr_set(isr_window, lll);
   1c88a:	4809      	ldr	r0, [pc, #36]	; (1c8b0 <is_abort_cb+0x5c>)
   1c88c:	f000 fd68 	bl	1d360 <radio_isr_set>
	radio_disable();
   1c890:	f000 fe34 	bl	1d4fc <radio_disable>
   1c894:	2000      	movs	r0, #0
}
   1c896:	bd08      	pop	{r3, pc}
			return -ECANCELED;
   1c898:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1c89c:	e7fb      	b.n	1c896 <is_abort_cb+0x42>
   1c89e:	bf00      	nop
   1c8a0:	00027ceb 	.word	0x00027ceb
   1c8a4:	0002fa5d 	.word	0x0002fa5d
   1c8a8:	0002f97c 	.word	0x0002f97c
   1c8ac:	0002b804 	.word	0x0002b804
   1c8b0:	00027caf 	.word	0x00027caf

0001c8b4 <abort_cb>:
{
   1c8b4:	b510      	push	{r4, lr}
   1c8b6:	460c      	mov	r4, r1
	if (!prepare_param) {
   1c8b8:	b930      	cbnz	r0, 1c8c8 <abort_cb+0x14>
			radio_isr_set(isr_abort, param);
   1c8ba:	480e      	ldr	r0, [pc, #56]	; (1c8f4 <abort_cb+0x40>)
   1c8bc:	f000 fd50 	bl	1d360 <radio_isr_set>
}
   1c8c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			radio_disable();
   1c8c4:	f000 be1a 	b.w	1d4fc <radio_disable>
	err = lll_hfclock_off();
   1c8c8:	f7ff fa7c 	bl	1bdc4 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1c8cc:	2800      	cmp	r0, #0
   1c8ce:	da0c      	bge.n	1c8ea <abort_cb+0x36>
   1c8d0:	4a09      	ldr	r2, [pc, #36]	; (1c8f8 <abort_cb+0x44>)
   1c8d2:	490a      	ldr	r1, [pc, #40]	; (1c8fc <abort_cb+0x48>)
   1c8d4:	480a      	ldr	r0, [pc, #40]	; (1c900 <abort_cb+0x4c>)
   1c8d6:	f44f 7314 	mov.w	r3, #592	; 0x250
   1c8da:	f004 fcc7 	bl	2126c <printk>
   1c8de:	4040      	eors	r0, r0
   1c8e0:	f380 8811 	msr	BASEPRI, r0
   1c8e4:	f04f 0003 	mov.w	r0, #3
   1c8e8:	df02      	svc	2
	lll_done(param);
   1c8ea:	4620      	mov	r0, r4
}
   1c8ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1c8f0:	f7ff b87e 	b.w	1b9f0 <lll_done>
   1c8f4:	00027d5f 	.word	0x00027d5f
   1c8f8:	0002fa5d 	.word	0x0002fa5d
   1c8fc:	0002f97c 	.word	0x0002f97c
   1c900:	0002b804 	.word	0x0002b804

0001c904 <isr_rx>:
{
   1c904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c908:	4605      	mov	r5, r0
	trx_done = radio_is_done();
   1c90a:	f000 fe1f 	bl	1d54c <radio_is_done>
	if (trx_done) {
   1c90e:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
   1c912:	f000 8089 	beq.w	1ca28 <isr_rx+0x124>
		crc_ok = radio_crc_is_valid();
   1c916:	f000 fe39 	bl	1d58c <radio_crc_is_valid>
   1c91a:	fa5f f880 	uxtb.w	r8, r0
		devmatch_ok = radio_filter_has_match();
   1c91e:	f000 ff37 	bl	1d790 <radio_filter_has_match>
   1c922:	b2c7      	uxtb	r7, r0
		devmatch_id = radio_filter_match_get();
   1c924:	f000 ff3e 	bl	1d7a4 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   1c928:	f001 f858 	bl	1d9dc <radio_ar_has_match>
		irkmatch_id = radio_ar_match_get();
   1c92c:	f001 f83e 	bl	1d9ac <radio_ar_match_get>
		rssi_ready = radio_rssi_is_ready();
   1c930:	f000 fef6 	bl	1d720 <radio_rssi_is_ready>
   1c934:	b2c6      	uxtb	r6, r0
		phy_flags_rx = radio_phy_flags_rx_get();
   1c936:	f00b fb12 	bl	27f5e <radio_phy_flags_rx_get>
	lll_isr_status_reset();
   1c93a:	f00b f8b6 	bl	27aaa <lll_isr_status_reset>
	if (!trx_done) {
   1c93e:	2c00      	cmp	r4, #0
   1c940:	f000 808d 	beq.w	1ca5e <isr_rx+0x15a>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1c944:	2001      	movs	r0, #1
   1c946:	f7fc fced 	bl	19324 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1c94a:	4604      	mov	r4, r0
   1c94c:	b960      	cbnz	r0, 1c968 <isr_rx+0x64>
   1c94e:	4a65      	ldr	r2, [pc, #404]	; (1cae4 <isr_rx+0x1e0>)
   1c950:	4965      	ldr	r1, [pc, #404]	; (1cae8 <isr_rx+0x1e4>)
   1c952:	4866      	ldr	r0, [pc, #408]	; (1caec <isr_rx+0x1e8>)
   1c954:	f240 2391 	movw	r3, #657	; 0x291
   1c958:	f004 fc88 	bl	2126c <printk>
   1c95c:	4040      	eors	r0, r0
   1c95e:	f380 8811 	msr	BASEPRI, r0
   1c962:	f04f 0003 	mov.w	r0, #3
   1c966:	df02      	svc	2
	if (crc_ok && isr_rx_scan_check(lll, irkmatch_ok, devmatch_ok,
   1c968:	f1b8 0f00 	cmp.w	r8, #0
   1c96c:	d077      	beq.n	1ca5e <isr_rx+0x15a>
		 (!devmatch_ok || ull_filter_lll_rl_idx_allowed(irkmatch_ok,
								rl_idx))) ||
		(((lll->filter_policy & 0x01) != 0) &&
		 (devmatch_ok || ull_filter_lll_irk_in_fal(rl_idx)));
#else
	return ((lll->filter_policy & 0x01) == 0U) ||
   1c96e:	792a      	ldrb	r2, [r5, #4]
   1c970:	0713      	lsls	r3, r2, #28
   1c972:	d501      	bpl.n	1c978 <isr_rx+0x74>
	if (crc_ok && isr_rx_scan_check(lll, irkmatch_ok, devmatch_ok,
   1c974:	2f00      	cmp	r7, #0
   1c976:	d072      	beq.n	1ca5e <isr_rx+0x15a>

		return 0;
#endif /* CONFIG_BT_CENTRAL */

	/* Active scanner */
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   1c978:	7f23      	ldrb	r3, [r4, #28]
   1c97a:	f013 010f 	ands.w	r1, r3, #15
   1c97e:	d002      	beq.n	1c986 <isr_rx+0x82>
   1c980:	2906      	cmp	r1, #6
   1c982:	f040 80ad 	bne.w	1cae0 <isr_rx+0x1dc>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   1c986:	7f60      	ldrb	r0, [r4, #29]
   1c988:	2825      	cmp	r0, #37	; 0x25
   1c98a:	d851      	bhi.n	1ca30 <isr_rx+0x12c>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind)) &&
		   lll->type &&
   1c98c:	0690      	lsls	r0, r2, #26
   1c98e:	d54f      	bpl.n	1ca30 <isr_rx+0x12c>
		bt_addr_t *lrpa;
#endif /* CONFIG_BT_CTLR_PRIVACY */
		int err;

		/* setup tIFS switching */
		radio_tmr_tifs_set(EVENT_IFS_US);
   1c990:	2096      	movs	r0, #150	; 0x96
   1c992:	f000 ff1d 	bl	1d7d0 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   1c996:	2000      	movs	r0, #0
   1c998:	f000 fe78 	bl	1d68c <radio_switch_complete_and_rx>

		/* save the adv packet */
		err = isr_rx_scan_report(lll, rssi_ready, phy_flags_rx,
   1c99c:	2100      	movs	r1, #0
   1c99e:	4630      	mov	r0, r6
   1c9a0:	f00b f9b8 	bl	27d14 <isr_rx_scan_report.constprop.0>
					 irkmatch_ok ? rl_idx : FILTER_IDX_NONE,
					 false);
		if (err) {
   1c9a4:	2800      	cmp	r0, #0
   1c9a6:	d15a      	bne.n	1ca5e <isr_rx+0x15a>
			return err;
		}

		/* prepare the scan request packet */
		pdu_tx = (void *)radio_pkt_scratch_get();
   1c9a8:	f000 fdfe 	bl	1d5a8 <radio_pkt_scratch_get>
			       BDADDR_SIZE);
		} else {
#else
		if (1) {
#endif /* CONFIG_BT_CTLR_PRIVACY */
			pdu_tx->tx_addr = lll->init_addr_type;
   1c9ac:	792b      	ldrb	r3, [r5, #4]
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
   1c9ae:	7f22      	ldrb	r2, [r4, #28]
			pdu_tx->tx_addr = lll->init_addr_type;
   1c9b0:	f3c3 1380 	ubfx	r3, r3, #6, #1
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   1c9b4:	019b      	lsls	r3, r3, #6
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
   1c9b6:	f3c2 1280 	ubfx	r2, r2, #6, #1
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   1c9ba:	f043 0303 	orr.w	r3, r3, #3
   1c9be:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   1c9c2:	7802      	ldrb	r2, [r0, #0]
   1c9c4:	f002 0230 	and.w	r2, r2, #48	; 0x30
   1c9c8:	4313      	orrs	r3, r2
   1c9ca:	7003      	strb	r3, [r0, #0]
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
   1c9cc:	230c      	movs	r3, #12
   1c9ce:	7043      	strb	r3, [r0, #1]
		pdu_tx = (void *)radio_pkt_scratch_get();
   1c9d0:	4606      	mov	r6, r0
			memcpy(&pdu_tx->scan_req.scan_addr[0],
   1c9d2:	2206      	movs	r2, #6
   1c9d4:	1d69      	adds	r1, r5, #5
   1c9d6:	3002      	adds	r0, #2
   1c9d8:	f007 f9e6 	bl	23da8 <memcpy>
			       &lll->init_addr[0], BDADDR_SIZE);
		}
		memcpy(&pdu_tx->scan_req.adv_addr[0],
   1c9dc:	2206      	movs	r2, #6
   1c9de:	f104 011e 	add.w	r1, r4, #30
   1c9e2:	f106 0008 	add.w	r0, r6, #8
   1c9e6:	f007 f9df 	bl	23da8 <memcpy>
		       &pdu_adv_rx->adv_ind.addr[0], BDADDR_SIZE);

		radio_pkt_tx_set(pdu_tx);
   1c9ea:	4630      	mov	r0, r6
   1c9ec:	f000 fd74 	bl	1d4d8 <radio_pkt_tx_set>

		/* assert if radio packet ptr is not set and radio started tx */
		LL_ASSERT(!radio_is_ready());
   1c9f0:	f000 fda2 	bl	1d538 <radio_is_ready>
   1c9f4:	b160      	cbz	r0, 1ca10 <isr_rx+0x10c>
   1c9f6:	4a3b      	ldr	r2, [pc, #236]	; (1cae4 <isr_rx+0x1e0>)
   1c9f8:	493d      	ldr	r1, [pc, #244]	; (1caf0 <isr_rx+0x1ec>)
   1c9fa:	483c      	ldr	r0, [pc, #240]	; (1caec <isr_rx+0x1e8>)
   1c9fc:	f240 43d2 	movw	r3, #1234	; 0x4d2
   1ca00:	f004 fc34 	bl	2126c <printk>
   1ca04:	4040      	eors	r0, r0
   1ca06:	f380 8811 	msr	BASEPRI, r0
   1ca0a:	f04f 0003 	mov.w	r0, #3
   1ca0e:	df02      	svc	2
			lll_prof_cputime_capture();

		}

		/* capture end of Tx-ed PDU, used to calculate HCTO. */
		radio_tmr_end_capture();
   1ca10:	f000 ffb8 	bl	1d984 <radio_tmr_end_capture>
					 radio_rx_chain_delay_get(0, 0) -
					 CONFIG_BT_CTLR_GPIO_PA_OFFSET);
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN */

		/* switch scanner state to active */
		lll->state = 1U;
   1ca14:	792b      	ldrb	r3, [r5, #4]
		if (pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) {
			lll->is_adv_ind = 1U;
		}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

		radio_isr_set(isr_tx, lll);
   1ca16:	4837      	ldr	r0, [pc, #220]	; (1caf4 <isr_rx+0x1f0>)
		lll->state = 1U;
   1ca18:	f043 0301 	orr.w	r3, r3, #1
   1ca1c:	712b      	strb	r3, [r5, #4]
		radio_isr_set(isr_tx, lll);
   1ca1e:	4629      	mov	r1, r5
}
   1ca20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		radio_isr_set(isr_tx, lll);
   1ca24:	f000 bc9c 	b.w	1d360 <radio_isr_set>
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready =
   1ca28:	46a0      	mov	r8, r4
   1ca2a:	4626      	mov	r6, r4
   1ca2c:	4627      	mov	r7, r4
   1ca2e:	e784      	b.n	1c93a <isr_rx+0x36>

		return 0;
	}
	/* Passive scanner or scan responses */
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   1ca30:	f013 0f0d 	tst.w	r3, #13
   1ca34:	d001      	beq.n	1ca3a <isr_rx+0x136>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   1ca36:	2906      	cmp	r1, #6
   1ca38:	d10a      	bne.n	1ca50 <isr_rx+0x14c>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   1ca3a:	7f60      	ldrb	r0, [r4, #29]
   1ca3c:	2825      	cmp	r0, #37	; 0x25
   1ca3e:	d807      	bhi.n	1ca50 <isr_rx+0x14c>
	bool dir_report = false;
   1ca40:	2700      	movs	r7, #0
						       pdu_adv_rx, rl_idx)) ||
#endif /* CONFIG_BT_CTLR_ADV_EXT */
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
		   (lll->state != 0U) &&
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
   1ca42:	7f63      	ldrb	r3, [r4, #29]
   1ca44:	b15b      	cbz	r3, 1ca5e <isr_rx+0x15a>
		   1) {
#endif /* !CONFIG_BT_CENTRAL */
		uint32_t err;

		/* save the scan response packet */
		err = isr_rx_scan_report(lll, rssi_ready, phy_flags_rx,
   1ca46:	4639      	mov	r1, r7
   1ca48:	4630      	mov	r0, r6
   1ca4a:	f00b f963 	bl	27d14 <isr_rx_scan_report.constprop.0>
					 irkmatch_ok ? rl_idx :
						       FILTER_IDX_NONE,
					 dir_report);
		if (err) {
   1ca4e:	e006      	b.n	1ca5e <isr_rx+0x15a>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
   1ca50:	2901      	cmp	r1, #1
   1ca52:	d00c      	beq.n	1ca6e <isr_rx+0x16a>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   1ca54:	7f23      	ldrb	r3, [r4, #28]
					rl_idx, &dir_report))) ||
   1ca56:	f003 030f 	and.w	r3, r3, #15
   1ca5a:	2b04      	cmp	r3, #4
   1ca5c:	d028      	beq.n	1cab0 <isr_rx+0x1ac>
	radio_isr_set(isr_done, lll);
   1ca5e:	4629      	mov	r1, r5
   1ca60:	4825      	ldr	r0, [pc, #148]	; (1caf8 <isr_rx+0x1f4>)
   1ca62:	f000 fc7d 	bl	1d360 <radio_isr_set>
}
   1ca66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	radio_disable();
   1ca6a:	f000 bd47 	b.w	1d4fc <radio_disable>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
   1ca6e:	7f61      	ldrb	r1, [r4, #29]
   1ca70:	290c      	cmp	r1, #12
   1ca72:	d1f4      	bne.n	1ca5e <isr_rx+0x15a>
		return false;
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	return (((lll->init_addr_type == addr_type) &&
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   1ca74:	f3c2 1280 	ubfx	r2, r2, #6, #1
   1ca78:	ebb2 1fd3 	cmp.w	r2, r3, lsr #7
		    isr_scan_tgta_check(lll, false, pdu_adv_rx->rx_addr,
   1ca7c:	ea4f 17d3 	mov.w	r7, r3, lsr #7
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   1ca80:	d00d      	beq.n	1ca9e <isr_rx+0x19a>

static inline bool isr_scan_tgta_rpa_check(struct lll_scan *lll,
					   uint8_t addr_type, uint8_t *addr,
					   bool *dir_report)
{
	if (((lll->filter_policy & 0x02) != 0U) && (addr_type != 0) &&
   1ca82:	792b      	ldrb	r3, [r5, #4]
   1ca84:	f3c3 03c1 	ubfx	r3, r3, #3, #2
   1ca88:	079a      	lsls	r2, r3, #30
   1ca8a:	d5e3      	bpl.n	1ca54 <isr_rx+0x150>
   1ca8c:	2f00      	cmp	r7, #0
   1ca8e:	d0e1      	beq.n	1ca54 <isr_rx+0x150>
   1ca90:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1ca94:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1ca98:	2b40      	cmp	r3, #64	; 0x40
   1ca9a:	d1db      	bne.n	1ca54 <isr_rx+0x150>
   1ca9c:	e7d1      	b.n	1ca42 <isr_rx+0x13e>
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   1ca9e:	2206      	movs	r2, #6
   1caa0:	f104 0124 	add.w	r1, r4, #36	; 0x24
   1caa4:	1d68      	adds	r0, r5, #5
   1caa6:	f007 f96e 	bl	23d86 <memcmp>
	return (((lll->init_addr_type == addr_type) &&
   1caaa:	2800      	cmp	r0, #0
   1caac:	d0c8      	beq.n	1ca40 <isr_rx+0x13c>
   1caae:	e7e8      	b.n	1ca82 <isr_rx+0x17e>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   1cab0:	7f63      	ldrb	r3, [r4, #29]
   1cab2:	2b25      	cmp	r3, #37	; 0x25
   1cab4:	d8d3      	bhi.n	1ca5e <isr_rx+0x15a>
		   (lll->state != 0U) &&
   1cab6:	792b      	ldrb	r3, [r5, #4]
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
   1cab8:	07db      	lsls	r3, r3, #31
   1caba:	d5d0      	bpl.n	1ca5e <isr_rx+0x15a>
	return false;
}

static inline bool isr_scan_rsp_adva_matches(struct pdu_adv *srsp)
{
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
   1cabc:	f000 fd74 	bl	1d5a8 <radio_pkt_scratch_get>

	return ((sreq->rx_addr == srsp->tx_addr) &&
   1cac0:	7f23      	ldrb	r3, [r4, #28]
   1cac2:	7802      	ldrb	r2, [r0, #0]
   1cac4:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1cac8:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   1cacc:	d1c7      	bne.n	1ca5e <isr_rx+0x15a>
		(memcmp(&sreq->scan_req.adv_addr[0],
   1cace:	2206      	movs	r2, #6
   1cad0:	f104 011e 	add.w	r1, r4, #30
   1cad4:	3008      	adds	r0, #8
   1cad6:	f007 f956 	bl	23d86 <memcmp>
		   (lll->state != 0U) &&
   1cada:	2800      	cmp	r0, #0
   1cadc:	d0b0      	beq.n	1ca40 <isr_rx+0x13c>
   1cade:	e7be      	b.n	1ca5e <isr_rx+0x15a>
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   1cae0:	2902      	cmp	r1, #2
   1cae2:	e7a9      	b.n	1ca38 <isr_rx+0x134>
   1cae4:	0002fa5d 	.word	0x0002fa5d
   1cae8:	0002fa16 	.word	0x0002fa16
   1caec:	0002b804 	.word	0x0002b804
   1caf0:	0002fa1e 	.word	0x0002fa1e
   1caf4:	0001c789 	.word	0x0001c789
   1caf8:	00027c9d 	.word	0x00027c9d

0001cafc <lll_scan_prepare>:
{
   1cafc:	b513      	push	{r0, r1, r4, lr}
   1cafe:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1cb00:	f7ff f94a 	bl	1bd98 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1cb04:	2800      	cmp	r0, #0
   1cb06:	da0b      	bge.n	1cb20 <lll_scan_prepare+0x24>
   1cb08:	4a11      	ldr	r2, [pc, #68]	; (1cb50 <lll_scan_prepare+0x54>)
   1cb0a:	4912      	ldr	r1, [pc, #72]	; (1cb54 <lll_scan_prepare+0x58>)
   1cb0c:	4812      	ldr	r0, [pc, #72]	; (1cb58 <lll_scan_prepare+0x5c>)
   1cb0e:	237a      	movs	r3, #122	; 0x7a
   1cb10:	f004 fbac 	bl	2126c <printk>
   1cb14:	4040      	eors	r0, r0
   1cb16:	f380 8811 	msr	BASEPRI, r0
   1cb1a:	f04f 0003 	mov.w	r0, #3
   1cb1e:	df02      	svc	2
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   1cb20:	4a0e      	ldr	r2, [pc, #56]	; (1cb5c <lll_scan_prepare+0x60>)
   1cb22:	490f      	ldr	r1, [pc, #60]	; (1cb60 <lll_scan_prepare+0x64>)
   1cb24:	480f      	ldr	r0, [pc, #60]	; (1cb64 <lll_scan_prepare+0x68>)
   1cb26:	9400      	str	r4, [sp, #0]
   1cb28:	2300      	movs	r3, #0
   1cb2a:	f00a fcad 	bl	27488 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1cb2e:	b168      	cbz	r0, 1cb4c <lll_scan_prepare+0x50>
   1cb30:	3077      	adds	r0, #119	; 0x77
   1cb32:	d00b      	beq.n	1cb4c <lll_scan_prepare+0x50>
   1cb34:	4a06      	ldr	r2, [pc, #24]	; (1cb50 <lll_scan_prepare+0x54>)
   1cb36:	490c      	ldr	r1, [pc, #48]	; (1cb68 <lll_scan_prepare+0x6c>)
   1cb38:	4807      	ldr	r0, [pc, #28]	; (1cb58 <lll_scan_prepare+0x5c>)
   1cb3a:	237d      	movs	r3, #125	; 0x7d
   1cb3c:	f004 fb96 	bl	2126c <printk>
   1cb40:	4040      	eors	r0, r0
   1cb42:	f380 8811 	msr	BASEPRI, r0
   1cb46:	f04f 0003 	mov.w	r0, #3
   1cb4a:	df02      	svc	2
}
   1cb4c:	b002      	add	sp, #8
   1cb4e:	bd10      	pop	{r4, pc}
   1cb50:	0002fa5d 	.word	0x0002fa5d
   1cb54:	0002f97c 	.word	0x0002f97c
   1cb58:	0002b804 	.word	0x0002b804
   1cb5c:	00027c5b 	.word	0x00027c5b
   1cb60:	0001c8b5 	.word	0x0001c8b5
   1cb64:	0001c855 	.word	0x0001c855
   1cb68:	0002fa39 	.word	0x0002fa39

0001cb6c <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   1cb6c:	b570      	push	{r4, r5, r6, lr}
   1cb6e:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   1cb70:	f00a ff9b 	bl	27aaa <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   1cb74:	f7fc fccc 	bl	19510 <ull_event_done_extra_get>
	LL_ASSERT(e);
   1cb78:	4604      	mov	r4, r0
   1cb7a:	b960      	cbnz	r0, 1cb96 <isr_done+0x2a>
   1cb7c:	4a17      	ldr	r2, [pc, #92]	; (1cbdc <isr_done+0x70>)
   1cb7e:	4918      	ldr	r1, [pc, #96]	; (1cbe0 <isr_done+0x74>)
   1cb80:	4818      	ldr	r0, [pc, #96]	; (1cbe4 <isr_done+0x78>)
   1cb82:	f240 237b 	movw	r3, #635	; 0x27b
   1cb86:	f004 fb71 	bl	2126c <printk>
   1cb8a:	4040      	eors	r0, r0
   1cb8c:	f380 8811 	msr	BASEPRI, r0
   1cb90:	f04f 0003 	mov.w	r0, #3
   1cb94:	df02      	svc	2

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   1cb96:	2301      	movs	r3, #1
	e->trx_cnt = trx_cnt;
	e->crc_valid = crc_valid;
   1cb98:	4913      	ldr	r1, [pc, #76]	; (1cbe8 <isr_done+0x7c>)
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   1cb9a:	7023      	strb	r3, [r4, #0]
	e->trx_cnt = trx_cnt;
   1cb9c:	4b13      	ldr	r3, [pc, #76]	; (1cbec <isr_done+0x80>)
	e->crc_valid = crc_valid;
   1cb9e:	79a2      	ldrb	r2, [r4, #6]
   1cba0:	7809      	ldrb	r1, [r1, #0]
	e->trx_cnt = trx_cnt;
   1cba2:	881b      	ldrh	r3, [r3, #0]
   1cba4:	80a3      	strh	r3, [r4, #4]
	e->crc_valid = crc_valid;
   1cba6:	f361 0200 	bfi	r2, r1, #0, #1
   1cbaa:	71a2      	strb	r2, [r4, #6]
#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   1cbac:	b18b      	cbz	r3, 1cbd2 <isr_done+0x66>
		struct lll_conn *lll = param;

		if (lll->role) {
   1cbae:	f995 301d 	ldrsb.w	r3, [r5, #29]
   1cbb2:	2b00      	cmp	r3, #0
   1cbb4:	da0d      	bge.n	1cbd2 <isr_done+0x66>
			preamble_to_addr_us =
				addr_us_get(0);
#endif /* !CONFIG_BT_CTLR_PHY */

			e->drift.start_to_address_actual_us =
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   1cbb6:	f000 fed9 	bl	1d96c <radio_tmr_aa_restore>
   1cbba:	4606      	mov	r6, r0
   1cbbc:	f000 fedc 	bl	1d978 <radio_tmr_ready_get>
			e->drift.window_widening_event_us =
   1cbc0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   1cbc2:	60e3      	str	r3, [r4, #12]
				lll->periph.window_widening_event_us;
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   1cbc4:	2328      	movs	r3, #40	; 0x28
   1cbc6:	6123      	str	r3, [r4, #16]
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   1cbc8:	1a36      	subs	r6, r6, r0

			/* Reset window widening, as anchor point sync-ed */
			lll->periph.window_widening_event_us = 0;
   1cbca:	2300      	movs	r3, #0
			e->drift.start_to_address_actual_us =
   1cbcc:	60a6      	str	r6, [r4, #8]
			lll->periph.window_widening_event_us = 0;
   1cbce:	632b      	str	r3, [r5, #48]	; 0x30
			lll->periph.window_size_event_us = 0;
   1cbd0:	63ab      	str	r3, [r5, #56]	; 0x38
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   1cbd2:	4628      	mov	r0, r5
}
   1cbd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	lll_isr_cleanup(param);
   1cbd8:	f7fe bf92 	b.w	1bb00 <lll_isr_cleanup>
   1cbdc:	0002fab9 	.word	0x0002fab9
   1cbe0:	0002e7da 	.word	0x0002e7da
   1cbe4:	0002b804 	.word	0x0002b804
   1cbe8:	200038f5 	.word	0x200038f5
   1cbec:	20003728 	.word	0x20003728

0001cbf0 <lll_conn_prepare_reset>:
	trx_cnt = 0U;
   1cbf0:	4a03      	ldr	r2, [pc, #12]	; (1cc00 <lll_conn_prepare_reset+0x10>)
   1cbf2:	2300      	movs	r3, #0
   1cbf4:	8013      	strh	r3, [r2, #0]
	crc_valid = 0U;
   1cbf6:	4a03      	ldr	r2, [pc, #12]	; (1cc04 <lll_conn_prepare_reset+0x14>)
   1cbf8:	7013      	strb	r3, [r2, #0]
	crc_expire = 0U;
   1cbfa:	4a03      	ldr	r2, [pc, #12]	; (1cc08 <lll_conn_prepare_reset+0x18>)
   1cbfc:	7013      	strb	r3, [r2, #0]
}
   1cbfe:	4770      	bx	lr
   1cc00:	20003728 	.word	0x20003728
   1cc04:	200038f5 	.word	0x200038f5
   1cc08:	200038f4 	.word	0x200038f4

0001cc0c <lll_conn_abort_cb>:
{
   1cc0c:	b538      	push	{r3, r4, r5, lr}
   1cc0e:	460d      	mov	r5, r1
	if (!prepare_param) {
   1cc10:	4604      	mov	r4, r0
   1cc12:	b930      	cbnz	r0, 1cc22 <lll_conn_abort_cb+0x16>
		radio_isr_set(isr_done, param);
   1cc14:	4810      	ldr	r0, [pc, #64]	; (1cc58 <lll_conn_abort_cb+0x4c>)
   1cc16:	f000 fba3 	bl	1d360 <radio_isr_set>
}
   1cc1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_disable();
   1cc1e:	f000 bc6d 	b.w	1d4fc <radio_disable>
	err = lll_hfclock_off();
   1cc22:	f7ff f8cf 	bl	1bdc4 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1cc26:	2800      	cmp	r0, #0
   1cc28:	da0b      	bge.n	1cc42 <lll_conn_abort_cb+0x36>
   1cc2a:	4a0c      	ldr	r2, [pc, #48]	; (1cc5c <lll_conn_abort_cb+0x50>)
   1cc2c:	490c      	ldr	r1, [pc, #48]	; (1cc60 <lll_conn_abort_cb+0x54>)
   1cc2e:	480d      	ldr	r0, [pc, #52]	; (1cc64 <lll_conn_abort_cb+0x58>)
   1cc30:	239f      	movs	r3, #159	; 0x9f
   1cc32:	f004 fb1b 	bl	2126c <printk>
   1cc36:	4040      	eors	r0, r0
   1cc38:	f380 8811 	msr	BASEPRI, r0
   1cc3c:	f04f 0003 	mov.w	r0, #3
   1cc40:	df02      	svc	2
	lll = prepare_param->param;
   1cc42:	68e2      	ldr	r2, [r4, #12]
	lll->latency_prepare += (prepare_param->lazy + 1);
   1cc44:	8921      	ldrh	r1, [r4, #8]
   1cc46:	8a53      	ldrh	r3, [r2, #18]
   1cc48:	440b      	add	r3, r1
   1cc4a:	3301      	adds	r3, #1
   1cc4c:	8253      	strh	r3, [r2, #18]
	lll_done(param);
   1cc4e:	4628      	mov	r0, r5
}
   1cc50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_done(param);
   1cc54:	f7fe becc 	b.w	1b9f0 <lll_done>
   1cc58:	0001cb6d 	.word	0x0001cb6d
   1cc5c:	0002fab9 	.word	0x0002fab9
   1cc60:	0002f97c 	.word	0x0002f97c
   1cc64:	0002b804 	.word	0x0002b804

0001cc68 <lll_conn_rx_pkt_set>:
{
   1cc68:	b510      	push	{r4, lr}
	node_rx = ull_pdu_rx_alloc_peek(1);
   1cc6a:	2001      	movs	r0, #1
   1cc6c:	f7fc fb5a 	bl	19324 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1cc70:	4604      	mov	r4, r0
   1cc72:	b960      	cbnz	r0, 1cc8e <lll_conn_rx_pkt_set+0x26>
   1cc74:	4a0d      	ldr	r2, [pc, #52]	; (1ccac <lll_conn_rx_pkt_set+0x44>)
   1cc76:	490e      	ldr	r1, [pc, #56]	; (1ccb0 <lll_conn_rx_pkt_set+0x48>)
   1cc78:	480e      	ldr	r0, [pc, #56]	; (1ccb4 <lll_conn_rx_pkt_set+0x4c>)
   1cc7a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   1cc7e:	f004 faf5 	bl	2126c <printk>
   1cc82:	4040      	eors	r0, r0
   1cc84:	f380 8811 	msr	BASEPRI, r0
   1cc88:	f04f 0003 	mov.w	r0, #3
   1cc8c:	df02      	svc	2
	radio_phy_set(phy, 0);
   1cc8e:	2100      	movs	r1, #0
   1cc90:	4608      	mov	r0, r1
   1cc92:	f000 fba9 	bl	1d3e8 <radio_phy_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   1cc96:	2008      	movs	r0, #8
   1cc98:	2201      	movs	r2, #1
   1cc9a:	211b      	movs	r1, #27
   1cc9c:	f000 fbea 	bl	1d474 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   1cca0:	f104 001c 	add.w	r0, r4, #28
}
   1cca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_pkt_rx_set(node_rx->pdu);
   1cca8:	f000 bc10 	b.w	1d4cc <radio_pkt_rx_set>
   1ccac:	0002fab9 	.word	0x0002fab9
   1ccb0:	0002fa16 	.word	0x0002fa16
   1ccb4:	0002b804 	.word	0x0002b804

0001ccb8 <lll_conn_isr_tx>:
{
   1ccb8:	b570      	push	{r4, r5, r6, lr}
   1ccba:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   1ccbc:	f00a fee5 	bl	27a8a <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1ccc0:	2096      	movs	r0, #150	; 0x96
   1ccc2:	f000 fd85 	bl	1d7d0 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1ccc6:	2300      	movs	r3, #0
   1ccc8:	4618      	mov	r0, r3
   1ccca:	461a      	mov	r2, r3
   1cccc:	4619      	mov	r1, r3
   1ccce:	f000 fcef 	bl	1d6b0 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   1ccd2:	4628      	mov	r0, r5
   1ccd4:	f7ff ffc8 	bl	1cc68 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1ccd8:	f000 fc2e 	bl	1d538 <radio_is_ready>
   1ccdc:	b160      	cbz	r0, 1ccf8 <lll_conn_isr_tx+0x40>
   1ccde:	4a12      	ldr	r2, [pc, #72]	; (1cd28 <lll_conn_isr_tx+0x70>)
   1cce0:	4912      	ldr	r1, [pc, #72]	; (1cd2c <lll_conn_isr_tx+0x74>)
   1cce2:	4813      	ldr	r0, [pc, #76]	; (1cd30 <lll_conn_isr_tx+0x78>)
   1cce4:	f44f 73d6 	mov.w	r3, #428	; 0x1ac
   1cce8:	f004 fac0 	bl	2126c <printk>
   1ccec:	4040      	eors	r0, r0
   1ccee:	f380 8811 	msr	BASEPRI, r0
   1ccf2:	f04f 0003 	mov.w	r0, #3
   1ccf6:	df02      	svc	2
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 +
   1ccf8:	f000 fe52 	bl	1d9a0 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   1ccfc:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 +
   1ccfe:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   1cd00:	4608      	mov	r0, r1
   1cd02:	f00b f927 	bl	27f54 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   1cd06:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   1cd08:	4606      	mov	r6, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   1cd0a:	4608      	mov	r0, r1
   1cd0c:	f00b f91e 	bl	27f4c <radio_tx_chain_delay_get>
   1cd10:	4434      	add	r4, r6
   1cd12:	34cb      	adds	r4, #203	; 0xcb
	radio_tmr_hcto_configure(hcto);
   1cd14:	1a20      	subs	r0, r4, r0
   1cd16:	f000 fdfd 	bl	1d914 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   1cd1a:	4629      	mov	r1, r5
   1cd1c:	4805      	ldr	r0, [pc, #20]	; (1cd34 <lll_conn_isr_tx+0x7c>)
}
   1cd1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   1cd22:	f000 bb1d 	b.w	1d360 <radio_isr_set>
   1cd26:	bf00      	nop
   1cd28:	0002fab9 	.word	0x0002fab9
   1cd2c:	0002fa1e 	.word	0x0002fa1e
   1cd30:	0002b804 	.word	0x0002b804
   1cd34:	0001cd39 	.word	0x0001cd39

0001cd38 <lll_conn_isr_rx>:
{
   1cd38:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1cd3c:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   1cd3e:	f000 fc05 	bl	1d54c <radio_is_done>
	if (trx_done) {
   1cd42:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
   1cd46:	d010      	beq.n	1cd6a <lll_conn_isr_rx+0x32>
		crc_ok = radio_crc_is_valid();
   1cd48:	f000 fc20 	bl	1d58c <radio_crc_is_valid>
   1cd4c:	b2c7      	uxtb	r7, r0
		rssi_ready = radio_rssi_is_ready();
   1cd4e:	f000 fce7 	bl	1d720 <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   1cd52:	f00a fea1 	bl	27a98 <lll_isr_rx_status_reset>
	if (!trx_done) {
   1cd56:	b955      	cbnz	r5, 1cd6e <lll_conn_isr_rx+0x36>
		radio_isr_set(isr_done, param);
   1cd58:	489e      	ldr	r0, [pc, #632]	; (1cfd4 <lll_conn_isr_rx+0x29c>)
   1cd5a:	4621      	mov	r1, r4
   1cd5c:	f000 fb00 	bl	1d360 <radio_isr_set>
}
   1cd60:	b002      	add	sp, #8
   1cd62:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		radio_disable();
   1cd66:	f000 bbc9 	b.w	1d4fc <radio_disable>
		crc_ok = rssi_ready = 0U;
   1cd6a:	462f      	mov	r7, r5
   1cd6c:	e7f1      	b.n	1cd52 <lll_conn_isr_rx+0x1a>
	trx_cnt++;
   1cd6e:	4a9a      	ldr	r2, [pc, #616]	; (1cfd8 <lll_conn_isr_rx+0x2a0>)
   1cd70:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1cd72:	2001      	movs	r0, #1
	trx_cnt++;
   1cd74:	3301      	adds	r3, #1
   1cd76:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1cd78:	f7fc fad4 	bl	19324 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1cd7c:	4606      	mov	r6, r0
   1cd7e:	b958      	cbnz	r0, 1cd98 <lll_conn_isr_rx+0x60>
   1cd80:	4a96      	ldr	r2, [pc, #600]	; (1cfdc <lll_conn_isr_rx+0x2a4>)
   1cd82:	4997      	ldr	r1, [pc, #604]	; (1cfe0 <lll_conn_isr_rx+0x2a8>)
   1cd84:	4897      	ldr	r0, [pc, #604]	; (1cfe4 <lll_conn_isr_rx+0x2ac>)
   1cd86:	23d8      	movs	r3, #216	; 0xd8
   1cd88:	f004 fa70 	bl	2126c <printk>
   1cd8c:	4040      	eors	r0, r0
   1cd8e:	f380 8811 	msr	BASEPRI, r0
   1cd92:	f04f 0003 	mov.w	r0, #3
   1cd96:	df02      	svc	2
	if (crc_ok) {
   1cd98:	f8df 824c 	ldr.w	r8, [pc, #588]	; 1cfe8 <lll_conn_isr_rx+0x2b0>
   1cd9c:	2f00      	cmp	r7, #0
   1cd9e:	f000 80fa 	beq.w	1cf96 <lll_conn_isr_rx+0x25e>
#elif !defined(HAL_RADIO_PDU_LEN_MAX)
#error "Undefined HAL_RADIO_PDU_LEN_MAX."
#endif

	/* Ack for tx-ed data */
	if (pdu_data_rx->nesn != lll->sn) {
   1cda2:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
   1cda6:	7f31      	ldrb	r1, [r6, #28]
   1cda8:	f003 0201 	and.w	r2, r3, #1
   1cdac:	f3c1 0180 	ubfx	r1, r1, #2, #1
   1cdb0:	4291      	cmp	r1, r2
   1cdb2:	f000 80ab 	beq.w	1cf0c <lll_conn_isr_rx+0x1d4>
		struct pdu_data *pdu_data_tx;
		struct node_tx *tx;
		memq_link_t *link;

		/* Increment sequence number */
		lll->sn++;
   1cdb6:	f082 0201 	eor.w	r2, r2, #1
   1cdba:	f362 0300 	bfi	r3, r2, #0, #1
   1cdbe:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52

#if defined(CONFIG_BT_PERIPHERAL)
		/* First ack (and redundantly any other ack) enable use of
		 * peripheral latency.
		 */
		if (lll->role) {
   1cdc2:	f994 301d 	ldrsb.w	r3, [r4, #29]
   1cdc6:	2b00      	cmp	r3, #0
			lll->periph.latency_enabled = 1;
   1cdc8:	bfbe      	ittt	lt
   1cdca:	f894 3020 	ldrblt.w	r3, [r4, #32]
   1cdce:	f043 0304 	orrlt.w	r3, r3, #4
   1cdd2:	f884 3020 	strblt.w	r3, [r4, #32]
		}
#endif /* CONFIG_BT_PERIPHERAL */

		FORCE_MD_CNT_DEC();

		if (!lll->empty) {
   1cdd6:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
   1cdda:	f013 0504 	ands.w	r5, r3, #4
   1cdde:	f040 808f 	bne.w	1cf00 <lll_conn_isr_rx+0x1c8>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   1cde2:	e9d4 010f 	ldrd	r0, r1, [r4, #60]	; 0x3c
   1cde6:	aa01      	add	r2, sp, #4
   1cde8:	f00a f805 	bl	26df6 <memq_peek>
			}

			link = NULL;
		}

		if (link) {
   1cdec:	4681      	mov	r9, r0
   1cdee:	2800      	cmp	r0, #0
   1cdf0:	f040 808f 	bne.w	1cf12 <lll_conn_isr_rx+0x1da>
			}
		}
	}

	/* process received data */
	if ((pdu_data_rx->sn == lll->nesn) &&
   1cdf4:	7f32      	ldrb	r2, [r6, #28]
   1cdf6:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
   1cdfa:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1cdfe:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1ce02:	429a      	cmp	r2, r3
   1ce04:	f000 80b3 	beq.w	1cf6e <lll_conn_isr_rx+0x236>
	is_rx_enqueue = 0U;
   1ce08:	f04f 0a00 	mov.w	sl, #0
		crc_valid = 1U;
   1ce0c:	4b77      	ldr	r3, [pc, #476]	; (1cfec <lll_conn_isr_rx+0x2b4>)
		crc_expire = 0U;
   1ce0e:	2500      	movs	r5, #0
		crc_valid = 1U;
   1ce10:	2201      	movs	r2, #1
		crc_expire = 0U;
   1ce12:	f888 5000 	strb.w	r5, [r8]
		crc_valid = 1U;
   1ce16:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1ce18:	a901      	add	r1, sp, #4
   1ce1a:	4620      	mov	r0, r4
   1ce1c:	f00a ffe3 	bl	27de6 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1ce20:	2d00      	cmp	r5, #0
   1ce22:	f040 80cb 	bne.w	1cfbc <lll_conn_isr_rx+0x284>
   1ce26:	b157      	cbz	r7, 1ce3e <lll_conn_isr_rx+0x106>
   1ce28:	7f33      	ldrb	r3, [r6, #28]
   1ce2a:	06d9      	lsls	r1, r3, #27
   1ce2c:	d407      	bmi.n	1ce3e <lll_conn_isr_rx+0x106>
			      (pdu_data_tx->md == 0) &&
   1ce2e:	9b01      	ldr	r3, [sp, #4]
   1ce30:	781a      	ldrb	r2, [r3, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1ce32:	06d2      	lsls	r2, r2, #27
   1ce34:	d403      	bmi.n	1ce3e <lll_conn_isr_rx+0x106>
			      (pdu_data_tx->md == 0) &&
   1ce36:	785b      	ldrb	r3, [r3, #1]
   1ce38:	2b00      	cmp	r3, #0
   1ce3a:	f000 80bf 	beq.w	1cfbc <lll_conn_isr_rx+0x284>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1ce3e:	2096      	movs	r0, #150	; 0x96
   1ce40:	f000 fcc6 	bl	1d7d0 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   1ce44:	2000      	movs	r0, #0
   1ce46:	f000 fc21 	bl	1d68c <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   1ce4a:	4869      	ldr	r0, [pc, #420]	; (1cff0 <lll_conn_isr_rx+0x2b8>)
   1ce4c:	4621      	mov	r1, r4
   1ce4e:	f000 fa87 	bl	1d360 <radio_isr_set>
		radio_tmr_end_capture();
   1ce52:	f000 fd97 	bl	1d984 <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   1ce56:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
   1ce5a:	9901      	ldr	r1, [sp, #4]
   1ce5c:	f3c3 0200 	ubfx	r2, r3, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   1ce60:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1ce64:	009b      	lsls	r3, r3, #2
   1ce66:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   1ce6a:	780a      	ldrb	r2, [r1, #0]
   1ce6c:	f022 020c 	bic.w	r2, r2, #12
   1ce70:	4313      	orrs	r3, r2
   1ce72:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   1ce74:	4620      	mov	r0, r4
   1ce76:	f00a ffa6 	bl	27dc6 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1ce7a:	f000 fb5d 	bl	1d538 <radio_is_ready>
   1ce7e:	b160      	cbz	r0, 1ce9a <lll_conn_isr_rx+0x162>
   1ce80:	4a56      	ldr	r2, [pc, #344]	; (1cfdc <lll_conn_isr_rx+0x2a4>)
   1ce82:	495c      	ldr	r1, [pc, #368]	; (1cff4 <lll_conn_isr_rx+0x2bc>)
   1ce84:	4857      	ldr	r0, [pc, #348]	; (1cfe4 <lll_conn_isr_rx+0x2ac>)
   1ce86:	f44f 73a2 	mov.w	r3, #324	; 0x144
   1ce8a:	f004 f9ef 	bl	2126c <printk>
   1ce8e:	4040      	eors	r0, r0
   1ce90:	f380 8811 	msr	BASEPRI, r0
   1ce94:	f04f 0003 	mov.w	r0, #3
   1ce98:	df02      	svc	2
	if (!radio_tmr_aa_restore()) {
   1ce9a:	f000 fd67 	bl	1d96c <radio_tmr_aa_restore>
   1ce9e:	b918      	cbnz	r0, 1cea8 <lll_conn_isr_rx+0x170>
		radio_tmr_aa_save(radio_tmr_aa_get());
   1cea0:	f000 fd58 	bl	1d954 <radio_tmr_aa_get>
   1cea4:	f000 fd5c 	bl	1d960 <radio_tmr_aa_save>
	if (tx_release) {
   1cea8:	f1b9 0f00 	cmp.w	r9, #0
   1ceac:	f000 808d 	beq.w	1cfca <lll_conn_isr_rx+0x292>
		LL_ASSERT(lll->handle != 0xFFFF);
   1ceb0:	89a2      	ldrh	r2, [r4, #12]
   1ceb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1ceb6:	429a      	cmp	r2, r3
   1ceb8:	d10c      	bne.n	1ced4 <lll_conn_isr_rx+0x19c>
   1ceba:	4a48      	ldr	r2, [pc, #288]	; (1cfdc <lll_conn_isr_rx+0x2a4>)
   1cebc:	494e      	ldr	r1, [pc, #312]	; (1cff8 <lll_conn_isr_rx+0x2c0>)
   1cebe:	4849      	ldr	r0, [pc, #292]	; (1cfe4 <lll_conn_isr_rx+0x2ac>)
   1cec0:	f240 1353 	movw	r3, #339	; 0x153
   1cec4:	f004 f9d2 	bl	2126c <printk>
   1cec8:	4040      	eors	r0, r0
   1ceca:	f380 8811 	msr	BASEPRI, r0
   1cece:	f04f 0003 	mov.w	r0, #3
   1ced2:	df02      	svc	2
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   1ced4:	89a0      	ldrh	r0, [r4, #12]
   1ced6:	4649      	mov	r1, r9
   1ced8:	f7fe f8c8 	bl	1b06c <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   1cedc:	f1ba 0f00 	cmp.w	sl, #0
   1cee0:	d009      	beq.n	1cef6 <lll_conn_isr_rx+0x1be>
		ull_pdu_rx_alloc();
   1cee2:	f7fc fa37 	bl	19354 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1cee6:	2303      	movs	r3, #3
   1cee8:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   1ceea:	89a3      	ldrh	r3, [r4, #12]
		ull_rx_put(node_rx->hdr.link, node_rx);
   1ceec:	6830      	ldr	r0, [r6, #0]
		node_rx->hdr.handle = lll->handle;
   1ceee:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   1cef0:	4631      	mov	r1, r6
   1cef2:	f7fc fa45 	bl	19380 <ull_rx_put>
		ull_rx_sched();
   1cef6:	f7fc fa53 	bl	193a0 <ull_rx_sched>
}
   1cefa:	b002      	add	sp, #8
   1cefc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			lll->empty = 0;
   1cf00:	f36f 0382 	bfc	r3, #2, #1
   1cf04:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
			pdu_data_tx = (void *)radio_pkt_empty_get();
   1cf08:	f000 fb4a 	bl	1d5a0 <radio_pkt_empty_get>
	tx_release = NULL;
   1cf0c:	f04f 0900 	mov.w	r9, #0
   1cf10:	e770      	b.n	1cdf4 <lll_conn_isr_rx+0xbc>
					       lll->packet_tx_head_offset);
   1cf12:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
			pdu_data_tx_len = pdu_data_tx->len;
   1cf16:	9a01      	ldr	r2, [sp, #4]
   1cf18:	441a      	add	r2, r3
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   1cf1a:	7952      	ldrb	r2, [r2, #5]
   1cf1c:	4413      	add	r3, r2
			if (offset < lll->packet_tx_head_len) {
   1cf1e:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   1cf22:	b2db      	uxtb	r3, r3
			if (offset < lll->packet_tx_head_len) {
   1cf24:	4293      	cmp	r3, r2
   1cf26:	d202      	bcs.n	1cf2e <lll_conn_isr_rx+0x1f6>
				lll->packet_tx_head_offset = offset;
   1cf28:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
   1cf2c:	e7ee      	b.n	1cf0c <lll_conn_isr_rx+0x1d4>
			} else if (offset == lll->packet_tx_head_len) {
   1cf2e:	d110      	bne.n	1cf52 <lll_conn_isr_rx+0x21a>
				memq_dequeue(lll->memq_tx.tail,
   1cf30:	462a      	mov	r2, r5
   1cf32:	6c20      	ldr	r0, [r4, #64]	; 0x40
				lll->packet_tx_head_len = 0;
   1cf34:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
				memq_dequeue(lll->memq_tx.tail,
   1cf38:	f104 013c 	add.w	r1, r4, #60	; 0x3c
   1cf3c:	f009 ff63 	bl	26e06 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   1cf40:	9b01      	ldr	r3, [sp, #4]
   1cf42:	681a      	ldr	r2, [r3, #0]
   1cf44:	f8c9 2000 	str.w	r2, [r9]
				tx->next = link;
   1cf48:	f8c3 9000 	str.w	r9, [r3]
				*tx_release = tx;
   1cf4c:	f8dd 9004 	ldr.w	r9, [sp, #4]
				FORCE_MD_CNT_SET();
   1cf50:	e750      	b.n	1cdf4 <lll_conn_isr_rx+0xbc>
				LL_ASSERT(0);
   1cf52:	4a22      	ldr	r2, [pc, #136]	; (1cfdc <lll_conn_isr_rx+0x2a4>)
   1cf54:	4929      	ldr	r1, [pc, #164]	; (1cffc <lll_conn_isr_rx+0x2c4>)
   1cf56:	4823      	ldr	r0, [pc, #140]	; (1cfe4 <lll_conn_isr_rx+0x2ac>)
   1cf58:	f240 3307 	movw	r3, #775	; 0x307
   1cf5c:	f004 f986 	bl	2126c <printk>
   1cf60:	4040      	eors	r0, r0
   1cf62:	f380 8811 	msr	BASEPRI, r0
   1cf66:	f04f 0003 	mov.w	r0, #3
   1cf6a:	df02      	svc	2
   1cf6c:	e7ce      	b.n	1cf0c <lll_conn_isr_rx+0x1d4>
	    /* check so that we will NEVER use the rx buffer reserved for empty
	     * packet and internal control enqueue
	     */
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   1cf6e:	2003      	movs	r0, #3
   1cf70:	f7fc f9d8 	bl	19324 <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   1cf74:	2800      	cmp	r0, #0
   1cf76:	f43f af47 	beq.w	1ce08 <lll_conn_isr_rx+0xd0>
		/* Increment next expected serial number */
		lll->nesn++;
   1cf7a:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
   1cf7e:	f083 0302 	eor.w	r3, r3, #2
   1cf82:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52

		if (pdu_data_rx->len != 0) {
   1cf86:	f896 a01d 	ldrb.w	sl, [r6, #29]
	is_rx_enqueue = 0U;
   1cf8a:	f1ba 0a00 	subs.w	sl, sl, #0
   1cf8e:	bf18      	it	ne
   1cf90:	f04f 0a01 	movne.w	sl, #1
   1cf94:	e73a      	b.n	1ce0c <lll_conn_isr_rx+0xd4>
		if (crc_expire == 0U) {
   1cf96:	f898 3000 	ldrb.w	r3, [r8]
   1cf9a:	b913      	cbnz	r3, 1cfa2 <lll_conn_isr_rx+0x26a>
			crc_expire = 2U;
   1cf9c:	2302      	movs	r3, #2
   1cf9e:	f888 3000 	strb.w	r3, [r8]
		crc_expire--;
   1cfa2:	f898 5000 	ldrb.w	r5, [r8]
   1cfa6:	3d01      	subs	r5, #1
   1cfa8:	b2ed      	uxtb	r5, r5
   1cfaa:	f888 5000 	strb.w	r5, [r8]
	is_rx_enqueue = 0U;
   1cfae:	f04f 0a00 	mov.w	sl, #0
		is_done = (crc_expire == 0U);
   1cfb2:	fab5 f585 	clz	r5, r5
   1cfb6:	096d      	lsrs	r5, r5, #5
	tx_release = NULL;
   1cfb8:	46d1      	mov	r9, sl
   1cfba:	e72d      	b.n	1ce18 <lll_conn_isr_rx+0xe0>
		radio_isr_set(isr_done, param);
   1cfbc:	4805      	ldr	r0, [pc, #20]	; (1cfd4 <lll_conn_isr_rx+0x29c>)
   1cfbe:	4621      	mov	r1, r4
   1cfc0:	f000 f9ce 	bl	1d360 <radio_isr_set>
			radio_switch_complete_and_disable();
   1cfc4:	f000 fb86 	bl	1d6d4 <radio_switch_complete_and_disable>
   1cfc8:	e745      	b.n	1ce56 <lll_conn_isr_rx+0x11e>
	if (is_rx_enqueue) {
   1cfca:	f1ba 0f00 	cmp.w	sl, #0
   1cfce:	d094      	beq.n	1cefa <lll_conn_isr_rx+0x1c2>
   1cfd0:	e787      	b.n	1cee2 <lll_conn_isr_rx+0x1aa>
   1cfd2:	bf00      	nop
   1cfd4:	0001cb6d 	.word	0x0001cb6d
   1cfd8:	20003728 	.word	0x20003728
   1cfdc:	0002fab9 	.word	0x0002fab9
   1cfe0:	0002fa16 	.word	0x0002fa16
   1cfe4:	0002b804 	.word	0x0002b804
   1cfe8:	200038f4 	.word	0x200038f4
   1cfec:	200038f5 	.word	0x200038f5
   1cff0:	0001ccb9 	.word	0x0001ccb9
   1cff4:	0002fa1e 	.word	0x0002fa1e
   1cff8:	0002fb04 	.word	0x0002fb04
   1cffc:	0002cf80 	.word	0x0002cf80

0001d000 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   1d000:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t remainder;
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
   1d004:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   1d006:	89a2      	ldrh	r2, [r4, #12]
   1d008:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1d00c:	429a      	cmp	r2, r3
{
   1d00e:	4606      	mov	r6, r0
	if (unlikely(lll->handle == 0xFFFF)) {
   1d010:	d109      	bne.n	1d026 <prepare_cb+0x26>
		radio_isr_set(lll_isr_early_abort, lll);
   1d012:	485e      	ldr	r0, [pc, #376]	; (1d18c <prepare_cb+0x18c>)
   1d014:	4621      	mov	r1, r4
#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   1d016:	f000 f9a3 	bl	1d360 <radio_isr_set>
		radio_disable();
   1d01a:	f000 fa6f 	bl	1d4fc <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   1d01e:	2000      	movs	r0, #0
   1d020:	b002      	add	sp, #8
   1d022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	lll_conn_prepare_reset();
   1d026:	f7ff fde3 	bl	1cbf0 <lll_conn_prepare_reset>
	lll->latency_event = lll->latency_prepare + p->lazy;
   1d02a:	8933      	ldrh	r3, [r6, #8]
   1d02c:	8a62      	ldrh	r2, [r4, #18]
   1d02e:	441a      	add	r2, r3
	event_counter = lll->event_counter + lll->latency_event;
   1d030:	8ae3      	ldrh	r3, [r4, #22]
	lll->latency_event = lll->latency_prepare + p->lazy;
   1d032:	b292      	uxth	r2, r2
	event_counter = lll->event_counter + lll->latency_event;
   1d034:	4413      	add	r3, r2
	lll->event_counter = (event_counter + 1);
   1d036:	3301      	adds	r3, #1
   1d038:	82e3      	strh	r3, [r4, #22]
	if (lll->data_chan_sel) {
   1d03a:	7f63      	ldrb	r3, [r4, #29]
	lll->latency_event = lll->latency_prepare + p->lazy;
   1d03c:	82a2      	strh	r2, [r4, #20]
	lll->latency_prepare = 0;
   1d03e:	2500      	movs	r5, #0
	if (lll->data_chan_sel) {
   1d040:	0659      	lsls	r1, r3, #25
	lll->latency_prepare = 0;
   1d042:	8265      	strh	r5, [r4, #18]
	if (lll->data_chan_sel) {
   1d044:	f140 8082 	bpl.w	1d14c <prepare_cb+0x14c>
		LL_ASSERT(0);
   1d048:	4a51      	ldr	r2, [pc, #324]	; (1d190 <prepare_cb+0x190>)
   1d04a:	4952      	ldr	r1, [pc, #328]	; (1d194 <prepare_cb+0x194>)
   1d04c:	4852      	ldr	r0, [pc, #328]	; (1d198 <prepare_cb+0x198>)
   1d04e:	238f      	movs	r3, #143	; 0x8f
   1d050:	f004 f90c 	bl	2126c <printk>
   1d054:	4040      	eors	r0, r0
   1d056:	f380 8811 	msr	BASEPRI, r0
   1d05a:	f04f 0003 	mov.w	r0, #3
   1d05e:	df02      	svc	2
	lll->periph.window_widening_event_us +=
   1d060:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	; 0x2c
	    lll->periph.window_widening_max_us) {
   1d064:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	lll->periph.window_widening_event_us +=
   1d066:	4413      	add	r3, r2
		lll->periph.window_widening_event_us =
   1d068:	4299      	cmp	r1, r3
   1d06a:	bf94      	ite	ls
   1d06c:	6321      	strls	r1, [r4, #48]	; 0x30
   1d06e:	6323      	strhi	r3, [r4, #48]	; 0x30
	lll->periph.window_size_event_us +=
   1d070:	e9d4 130d 	ldrd	r1, r3, [r4, #52]	; 0x34
	lll->periph.window_widening_prepare_us = 0;
   1d074:	2200      	movs	r2, #0
	lll->periph.window_size_event_us +=
   1d076:	440b      	add	r3, r1
	lll->periph.window_size_prepare_us = 0;
   1d078:	e9c4 230d 	strd	r2, r3, [r4, #52]	; 0x34
	lll->periph.window_widening_prepare_us = 0;
   1d07c:	62e2      	str	r2, [r4, #44]	; 0x2c
	if (!lll->empty) {
   1d07e:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
   1d082:	f012 0204 	ands.w	r2, r2, #4
   1d086:	d10a      	bne.n	1d09e <prepare_cb+0x9e>
		link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, NULL);
   1d088:	e9d4 010f 	ldrd	r0, r1, [r4, #60]	; 0x3c
   1d08c:	f009 feb3 	bl	26df6 <memq_peek>
		if (!link) {
   1d090:	b928      	cbnz	r0, 1d09e <prepare_cb+0x9e>
			lll->empty = 1U;
   1d092:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
   1d096:	f043 0304 	orr.w	r3, r3, #4
   1d09a:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
	radio_reset();
   1d09e:	f000 f97f 	bl	1d3a0 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1d0a2:	2000      	movs	r0, #0
   1d0a4:	f000 f9b0 	bl	1d408 <radio_tx_power_set>
	lll_conn_rx_pkt_set(lll);
   1d0a8:	4620      	mov	r0, r4
   1d0aa:	f7ff fddd 	bl	1cc68 <lll_conn_rx_pkt_set>
	radio_aa_set(lll->access_addr);
   1d0ae:	1d20      	adds	r0, r4, #4
   1d0b0:	f000 f9c8 	bl	1d444 <radio_aa_set>
			     ((uint32_t)lll->crc_init[1] << 8) |
   1d0b4:	7a63      	ldrb	r3, [r4, #9]
			    (((uint32_t)lll->crc_init[2] << 16) |
   1d0b6:	7aa1      	ldrb	r1, [r4, #10]
			     ((uint32_t)lll->crc_init[1] << 8) |
   1d0b8:	021b      	lsls	r3, r3, #8
			    (((uint32_t)lll->crc_init[2] << 16) |
   1d0ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((uint32_t)lll->crc_init[0])));
   1d0be:	7a21      	ldrb	r1, [r4, #8]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1d0c0:	f240 605b 	movw	r0, #1627	; 0x65b
   1d0c4:	4319      	orrs	r1, r3
   1d0c6:	f000 fa55 	bl	1d574 <radio_crc_configure>
	lll_chan_set(data_chan_use);
   1d0ca:	4628      	mov	r0, r5
   1d0cc:	f7fe fce6 	bl	1ba9c <lll_chan_set>
	radio_isr_set(lll_conn_isr_rx, lll);
   1d0d0:	4621      	mov	r1, r4
   1d0d2:	4832      	ldr	r0, [pc, #200]	; (1d19c <prepare_cb+0x19c>)
   1d0d4:	f000 f944 	bl	1d360 <radio_isr_set>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1d0d8:	2096      	movs	r0, #150	; 0x96
   1d0da:	f000 fb79 	bl	1d7d0 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1d0de:	2300      	movs	r3, #0
   1d0e0:	461a      	mov	r2, r3
   1d0e2:	4619      	mov	r1, r3
   1d0e4:	4618      	mov	r0, r3
   1d0e6:	f000 fae3 	bl	1d6b0 <radio_switch_complete_and_tx>
	ull = HDR_LLL2ULL(lll);
   1d0ea:	f8d4 8000 	ldr.w	r8, [r4]
	ticks_at_event = p->ticks_at_expire;
   1d0ee:	6837      	ldr	r7, [r6, #0]
	ticks_at_event += lll_event_offset_get(ull);
   1d0f0:	4640      	mov	r0, r8
   1d0f2:	f00a fcab 	bl	27a4c <lll_event_offset_get>
   1d0f6:	4407      	add	r7, r0
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   1d0f8:	6872      	ldr	r2, [r6, #4]
   1d0fa:	f107 0109 	add.w	r1, r7, #9
   1d0fe:	2000      	movs	r0, #0
   1d100:	f000 fb72 	bl	1d7e8 <radio_tmr_start>
   1d104:	4605      	mov	r5, r0
	radio_tmr_aa_capture();
   1d106:	f000 fc11 	bl	1d92c <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   1d10a:	2000      	movs	r0, #0
   1d10c:	f000 fc28 	bl	1d960 <radio_tmr_aa_save>
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   1d110:	6b26      	ldr	r6, [r4, #48]	; 0x30
   1d112:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	hcto += radio_rx_ready_delay_get(0, 0);
   1d114:	2100      	movs	r1, #0
   1d116:	eb03 0346 	add.w	r3, r3, r6, lsl #1
   1d11a:	4608      	mov	r0, r1
   1d11c:	f103 0688 	add.w	r6, r3, #136	; 0x88
   1d120:	f00a ff16 	bl	27f50 <radio_rx_ready_delay_get>
	hcto += addr_us_get(0);
   1d124:	4435      	add	r5, r6
	hcto += radio_rx_chain_delay_get(0, 0);
   1d126:	2100      	movs	r1, #0
	hcto += addr_us_get(0);
   1d128:	4405      	add	r5, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   1d12a:	4608      	mov	r0, r1
   1d12c:	f00a ff12 	bl	27f54 <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   1d130:	4428      	add	r0, r5
   1d132:	f000 fbef 	bl	1d914 <radio_tmr_hcto_configure>
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
   1d136:	89a1      	ldrh	r1, [r4, #12]
   1d138:	3105      	adds	r1, #5
   1d13a:	463a      	mov	r2, r7
   1d13c:	b2c9      	uxtb	r1, r1
   1d13e:	4640      	mov	r0, r8
   1d140:	f00a fc92 	bl	27a68 <lll_preempt_calc>
   1d144:	b170      	cbz	r0, 1d164 <prepare_cb+0x164>
		radio_isr_set(lll_isr_abort, lll);
   1d146:	4816      	ldr	r0, [pc, #88]	; (1d1a0 <prepare_cb+0x1a0>)
   1d148:	4621      	mov	r1, r4
   1d14a:	e764      	b.n	1d016 <prepare_cb+0x16>
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   1d14c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1d150:	7fa1      	ldrb	r1, [r4, #30]
   1d152:	9300      	str	r3, [sp, #0]
   1d154:	f104 001f 	add.w	r0, r4, #31
   1d158:	f104 0318 	add.w	r3, r4, #24
   1d15c:	f00a fc22 	bl	279a4 <lll_chan_sel_1>
   1d160:	4605      	mov	r5, r0
   1d162:	e77d      	b.n	1d060 <prepare_cb+0x60>
		ret = lll_prepare_done(lll);
   1d164:	4620      	mov	r0, r4
   1d166:	f00a fc6c 	bl	27a42 <lll_prepare_done>
		LL_ASSERT(!ret);
   1d16a:	2800      	cmp	r0, #0
   1d16c:	f43f af57 	beq.w	1d01e <prepare_cb+0x1e>
   1d170:	4a07      	ldr	r2, [pc, #28]	; (1d190 <prepare_cb+0x190>)
   1d172:	490c      	ldr	r1, [pc, #48]	; (1d1a4 <prepare_cb+0x1a4>)
   1d174:	4808      	ldr	r0, [pc, #32]	; (1d198 <prepare_cb+0x198>)
   1d176:	f240 1319 	movw	r3, #281	; 0x119
   1d17a:	f004 f877 	bl	2126c <printk>
   1d17e:	4040      	eors	r0, r0
   1d180:	f380 8811 	msr	BASEPRI, r0
   1d184:	f04f 0003 	mov.w	r0, #3
   1d188:	df02      	svc	2
   1d18a:	e748      	b.n	1d01e <prepare_cb+0x1e>
   1d18c:	0001bb55 	.word	0x0001bb55
   1d190:	0002fb2b 	.word	0x0002fb2b
   1d194:	0002cf80 	.word	0x0002cf80
   1d198:	0002b804 	.word	0x0002b804
   1d19c:	0001cd39 	.word	0x0001cd39
   1d1a0:	00027ac5 	.word	0x00027ac5
   1d1a4:	0002f3a5 	.word	0x0002f3a5

0001d1a8 <lll_periph_prepare>:
{
   1d1a8:	b513      	push	{r0, r1, r4, lr}
   1d1aa:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1d1ac:	f7fe fdf4 	bl	1bd98 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1d1b0:	2800      	cmp	r0, #0
   1d1b2:	da0b      	bge.n	1d1cc <lll_periph_prepare+0x24>
   1d1b4:	4a17      	ldr	r2, [pc, #92]	; (1d214 <lll_periph_prepare+0x6c>)
   1d1b6:	4918      	ldr	r1, [pc, #96]	; (1d218 <lll_periph_prepare+0x70>)
   1d1b8:	4818      	ldr	r0, [pc, #96]	; (1d21c <lll_periph_prepare+0x74>)
   1d1ba:	2347      	movs	r3, #71	; 0x47
   1d1bc:	f004 f856 	bl	2126c <printk>
   1d1c0:	4040      	eors	r0, r0
   1d1c2:	f380 8811 	msr	BASEPRI, r0
   1d1c6:	f04f 0003 	mov.w	r0, #3
   1d1ca:	df02      	svc	2
	lll = p->param;
   1d1cc:	68e2      	ldr	r2, [r4, #12]
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   1d1ce:	8921      	ldrh	r1, [r4, #8]
   1d1d0:	6a53      	ldr	r3, [r2, #36]	; 0x24
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   1d1d2:	4813      	ldr	r0, [pc, #76]	; (1d220 <lll_periph_prepare+0x78>)
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   1d1d4:	fb01 3303 	mla	r3, r1, r3, r3
	lll->periph.window_widening_prepare_us +=
   1d1d8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   1d1da:	440b      	add	r3, r1
	    lll->periph.window_widening_max_us) {
   1d1dc:	6a91      	ldr	r1, [r2, #40]	; 0x28
		lll->periph.window_widening_prepare_us =
   1d1de:	4299      	cmp	r1, r3
   1d1e0:	bf94      	ite	ls
   1d1e2:	62d1      	strls	r1, [r2, #44]	; 0x2c
   1d1e4:	62d3      	strhi	r3, [r2, #44]	; 0x2c
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   1d1e6:	4a0f      	ldr	r2, [pc, #60]	; (1d224 <lll_periph_prepare+0x7c>)
   1d1e8:	490f      	ldr	r1, [pc, #60]	; (1d228 <lll_periph_prepare+0x80>)
   1d1ea:	9400      	str	r4, [sp, #0]
   1d1ec:	2300      	movs	r3, #0
   1d1ee:	f00a f94b 	bl	27488 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1d1f2:	b168      	cbz	r0, 1d210 <lll_periph_prepare+0x68>
   1d1f4:	3077      	adds	r0, #119	; 0x77
   1d1f6:	d00b      	beq.n	1d210 <lll_periph_prepare+0x68>
   1d1f8:	4a06      	ldr	r2, [pc, #24]	; (1d214 <lll_periph_prepare+0x6c>)
   1d1fa:	490c      	ldr	r1, [pc, #48]	; (1d22c <lll_periph_prepare+0x84>)
   1d1fc:	4807      	ldr	r0, [pc, #28]	; (1d21c <lll_periph_prepare+0x74>)
   1d1fe:	2358      	movs	r3, #88	; 0x58
   1d200:	f004 f834 	bl	2126c <printk>
   1d204:	4040      	eors	r0, r0
   1d206:	f380 8811 	msr	BASEPRI, r0
   1d20a:	f04f 0003 	mov.w	r0, #3
   1d20e:	df02      	svc	2
}
   1d210:	b002      	add	sp, #8
   1d212:	bd10      	pop	{r4, pc}
   1d214:	0002fb2b 	.word	0x0002fb2b
   1d218:	0002f97c 	.word	0x0002f97c
   1d21c:	0002b804 	.word	0x0002b804
   1d220:	00027a47 	.word	0x00027a47
   1d224:	0001d001 	.word	0x0001d001
   1d228:	0001cc0d 	.word	0x0001cc0d
   1d22c:	0002fa39 	.word	0x0002fa39

0001d230 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   1d230:	4b05      	ldr	r3, [pc, #20]	; (1d248 <cntr_init+0x18>)
   1d232:	2200      	movs	r2, #0
   1d234:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1d238:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1d23c:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   1d240:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   1d244:	4770      	bx	lr
   1d246:	bf00      	nop
   1d248:	4000b000 	.word	0x4000b000

0001d24c <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   1d24c:	4a04      	ldr	r2, [pc, #16]	; (1d260 <cntr_start+0x14>)
   1d24e:	7813      	ldrb	r3, [r2, #0]
   1d250:	1c59      	adds	r1, r3, #1
   1d252:	7011      	strb	r1, [r2, #0]
   1d254:	2001      	movs	r0, #1
   1d256:	b913      	cbnz	r3, 1d25e <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1d258:	4a02      	ldr	r2, [pc, #8]	; (1d264 <cntr_start+0x18>)
   1d25a:	6010      	str	r0, [r2, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   1d25c:	4618      	mov	r0, r3
}
   1d25e:	4770      	bx	lr
   1d260:	200038f6 	.word	0x200038f6
   1d264:	4000b000 	.word	0x4000b000

0001d268 <cntr_stop>:

uint32_t cntr_stop(void)
{
   1d268:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   1d26a:	4c0d      	ldr	r4, [pc, #52]	; (1d2a0 <cntr_stop+0x38>)
   1d26c:	7823      	ldrb	r3, [r4, #0]
   1d26e:	b95b      	cbnz	r3, 1d288 <cntr_stop+0x20>
   1d270:	4a0c      	ldr	r2, [pc, #48]	; (1d2a4 <cntr_stop+0x3c>)
   1d272:	490d      	ldr	r1, [pc, #52]	; (1d2a8 <cntr_stop+0x40>)
   1d274:	480d      	ldr	r0, [pc, #52]	; (1d2ac <cntr_stop+0x44>)
   1d276:	232d      	movs	r3, #45	; 0x2d
   1d278:	f003 fff8 	bl	2126c <printk>
   1d27c:	4040      	eors	r0, r0
   1d27e:	f380 8811 	msr	BASEPRI, r0
   1d282:	f04f 0003 	mov.w	r0, #3
   1d286:	df02      	svc	2

	if (--_refcount) {
   1d288:	7820      	ldrb	r0, [r4, #0]
   1d28a:	3801      	subs	r0, #1
   1d28c:	b2c0      	uxtb	r0, r0
   1d28e:	7020      	strb	r0, [r4, #0]
   1d290:	2301      	movs	r3, #1
   1d292:	b910      	cbnz	r0, 1d29a <cntr_stop+0x32>
   1d294:	4a06      	ldr	r2, [pc, #24]	; (1d2b0 <cntr_stop+0x48>)
   1d296:	6053      	str	r3, [r2, #4]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   1d298:	bd10      	pop	{r4, pc}
		return 1;
   1d29a:	4618      	mov	r0, r3
   1d29c:	e7fc      	b.n	1d298 <cntr_stop+0x30>
   1d29e:	bf00      	nop
   1d2a0:	200038f6 	.word	0x200038f6
   1d2a4:	0002fb8f 	.word	0x0002fb8f
   1d2a8:	0002fbdb 	.word	0x0002fbdb
   1d2ac:	0002b804 	.word	0x0002b804
   1d2b0:	4000b000 	.word	0x4000b000

0001d2b4 <cntr_cnt_get>:
     return p_reg->COUNTER;
   1d2b4:	4b01      	ldr	r3, [pc, #4]	; (1d2bc <cntr_cnt_get+0x8>)
   1d2b6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   1d2ba:	4770      	bx	lr
   1d2bc:	4000b000 	.word	0x4000b000

0001d2c0 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   1d2c0:	4b02      	ldr	r3, [pc, #8]	; (1d2cc <cntr_cmp_set+0xc>)
   1d2c2:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1d2c6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   1d2ca:	4770      	bx	lr
   1d2cc:	4000b000 	.word	0x4000b000

0001d2d0 <do_ecb>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d2d0:	4b10      	ldr	r3, [pc, #64]	; (1d314 <do_ecb+0x44>)
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   1d2d2:	b530      	push	{r4, r5, lr}
   1d2d4:	2201      	movs	r2, #1
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   1d2d6:	2400      	movs	r4, #0
   1d2d8:	605a      	str	r2, [r3, #4]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   1d2da:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   1d2de:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   1d2e2:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
   1d2e6:	601a      	str	r2, [r3, #0]
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1d2e8:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
   1d2ec:	b931      	cbnz	r1, 1d2fc <do_ecb+0x2c>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1d2ee:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1d2f2:	b919      	cbnz	r1, 1d2fc <do_ecb+0x2c>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   1d2f4:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1d2f8:	2900      	cmp	r1, #0
   1d2fa:	d1f5      	bne.n	1d2e8 <do_ecb+0x18>
   1d2fc:	605a      	str	r2, [r3, #4]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   1d2fe:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
   1d302:	2900      	cmp	r1, #0
   1d304:	d1e8      	bne.n	1d2d8 <do_ecb+0x8>
   1d306:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504
   1d30a:	2d00      	cmp	r5, #0
   1d30c:	d0e4      	beq.n	1d2d8 <do_ecb+0x8>

	NRF_ECB->ECBDATAPTR = 0;
   1d30e:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
}
   1d312:	bd30      	pop	{r4, r5, pc}
   1d314:	4000e000 	.word	0x4000e000

0001d318 <hal_radio_enable_on_tick_ppi_config_and_enable>:
static inline void hal_radio_enable_on_tick_ppi_config_and_enable(uint8_t trx)
{
	/* No need to configure anything for the pre-programmed channels.
	 * Just enable and disable them accordingly.
	 */
	nrf_ppi_channels_disable(
   1d318:	2800      	cmp	r0, #0
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   1d31a:	4b08      	ldr	r3, [pc, #32]	; (1d33c <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
   1d31c:	bf14      	ite	ne
   1d31e:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
   1d322:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
   1d326:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
		NRF_PPI,
		trx ? BIT(HAL_RADIO_ENABLE_RX_ON_TICK_PPI)
		    : BIT(HAL_RADIO_ENABLE_TX_ON_TICK_PPI));
	nrf_ppi_channels_enable(
   1d32a:	bf14      	ite	ne
   1d32c:	f44f 1280 	movne.w	r2, #1048576	; 0x100000
   1d330:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    p_reg->CHENSET = mask;
   1d334:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		NRF_PPI,
		trx ? BIT(HAL_RADIO_ENABLE_TX_ON_TICK_PPI)
		    : BIT(HAL_RADIO_ENABLE_RX_ON_TICK_PPI));
}
   1d338:	4770      	bx	lr
   1d33a:	bf00      	nop
   1d33c:	4001f000 	.word	0x4001f000

0001d340 <isr_radio>:
}
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

uint32_t radio_has_disabled(void)
{
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   1d340:	4b04      	ldr	r3, [pc, #16]	; (1d354 <isr_radio+0x14>)
   1d342:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   1d346:	b123      	cbz	r3, 1d352 <isr_radio+0x12>
		isr_cb(isr_cb_param);
   1d348:	4b03      	ldr	r3, [pc, #12]	; (1d358 <isr_radio+0x18>)
   1d34a:	4a04      	ldr	r2, [pc, #16]	; (1d35c <isr_radio+0x1c>)
   1d34c:	681b      	ldr	r3, [r3, #0]
   1d34e:	6810      	ldr	r0, [r2, #0]
   1d350:	4718      	bx	r3
}
   1d352:	4770      	bx	lr
   1d354:	40001000 	.word	0x40001000
   1d358:	2000341c 	.word	0x2000341c
   1d35c:	20003420 	.word	0x20003420

0001d360 <radio_isr_set>:
{
   1d360:	b538      	push	{r3, r4, r5, lr}
   1d362:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   1d364:	2001      	movs	r0, #1
{
   1d366:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   1d368:	f7e7 f840 	bl	43ec <arch_irq_disable>
	isr_cb_param = param;
   1d36c:	4b08      	ldr	r3, [pc, #32]	; (1d390 <radio_isr_set+0x30>)
   1d36e:	601d      	str	r5, [r3, #0]
	isr_cb = cb;
   1d370:	4b08      	ldr	r3, [pc, #32]	; (1d394 <radio_isr_set+0x34>)
   1d372:	601c      	str	r4, [r3, #0]
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1d374:	4b08      	ldr	r3, [pc, #32]	; (1d398 <radio_isr_set+0x38>)
   1d376:	2210      	movs	r2, #16
   1d378:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d37c:	4b07      	ldr	r3, [pc, #28]	; (1d39c <radio_isr_set+0x3c>)
   1d37e:	2202      	movs	r2, #2
   1d380:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   1d384:	2001      	movs	r0, #1
}
   1d386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   1d38a:	f7e7 b81f 	b.w	43cc <arch_irq_enable>
   1d38e:	bf00      	nop
   1d390:	20003420 	.word	0x20003420
   1d394:	2000341c 	.word	0x2000341c
   1d398:	40001000 	.word	0x40001000
   1d39c:	e000e100 	.word	0xe000e100

0001d3a0 <radio_reset>:
{
   1d3a0:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
   1d3a2:	2001      	movs	r0, #1
   1d3a4:	f7e7 f822 	bl	43ec <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (radio_power ? RADIO_POWER_POWER_Enabled : RADIO_POWER_POWER_Disabled)
   1d3a8:	4a0d      	ldr	r2, [pc, #52]	; (1d3e0 <radio_reset+0x40>)
   1d3aa:	2300      	movs	r3, #0
   1d3ac:	f8c2 3ffc 	str.w	r3, [r2, #4092]	; 0xffc
   1d3b0:	2301      	movs	r3, #1
   1d3b2:	f8c2 3ffc 	str.w	r3, [r2, #4092]	; 0xffc
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

static inline void hal_radio_reset(void)
{
	/* Anomalies 102, 106 and 107 */
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1d3b6:	f8d2 3774 	ldr.w	r3, [r2, #1908]	; 0x774
					 0xfffffffe) | 0x01000000;
   1d3ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1d3be:	f023 0301 	bic.w	r3, r3, #1
   1d3c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1d3c6:	f8c2 3774 	str.w	r3, [r2, #1908]	; 0x774
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1d3ca:	4b06      	ldr	r3, [pc, #24]	; (1d3e4 <radio_reset+0x44>)
   1d3cc:	f44f 5290 	mov.w	r2, #4608	; 0x1200
   1d3d0:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1d3d4:	f44f 5210 	mov.w	r2, #9216	; 0x2400
   1d3d8:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
   1d3dc:	bd08      	pop	{r3, pc}
   1d3de:	bf00      	nop
   1d3e0:	40001000 	.word	0x40001000
   1d3e4:	4001f000 	.word	0x4001f000

0001d3e8 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   1d3e8:	4b06      	ldr	r3, [pc, #24]	; (1d404 <radio_phy_set+0x1c>)
	default:
		mode = RADIO_MODE_MODE_Ble_1Mbit;
		break;

	case BIT(1):
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   1d3ea:	2802      	cmp	r0, #2
   1d3ec:	bf14      	ite	ne
   1d3ee:	2203      	movne	r2, #3
   1d3f0:	2204      	moveq	r2, #4
   1d3f2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   1d3f6:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1d3fa:	f042 0201 	orr.w	r2, r2, #1
   1d3fe:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   1d402:	4770      	bx	lr
   1d404:	40001000 	.word	0x40001000

0001d408 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   1d408:	4b01      	ldr	r3, [pc, #4]	; (1d410 <radio_tx_power_set+0x8>)
   1d40a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   1d40e:	4770      	bx	lr
   1d410:	40001000 	.word	0x40001000

0001d414 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   1d414:	4b01      	ldr	r3, [pc, #4]	; (1d41c <radio_freq_chan_set+0x8>)
   1d416:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   1d41a:	4770      	bx	lr
   1d41c:	40001000 	.word	0x40001000

0001d420 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   1d420:	4b07      	ldr	r3, [pc, #28]	; (1d440 <radio_whiten_iv_set+0x20>)
   1d422:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   1d426:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1d42a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   1d42e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   1d432:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1d436:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   1d43a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   1d43e:	4770      	bx	lr
   1d440:	40001000 	.word	0x40001000

0001d444 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   1d444:	4a0a      	ldr	r2, [pc, #40]	; (1d470 <radio_aa_set+0x2c>)
   1d446:	2300      	movs	r3, #0
   1d448:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   1d44c:	2301      	movs	r3, #1
   1d44e:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   1d452:	78c3      	ldrb	r3, [r0, #3]
   1d454:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   1d458:	7843      	ldrb	r3, [r0, #1]
   1d45a:	7881      	ldrb	r1, [r0, #2]
   1d45c:	041b      	lsls	r3, r3, #16
   1d45e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   1d462:	7801      	ldrb	r1, [r0, #0]
   1d464:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1d468:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   1d46c:	4770      	bx	lr
   1d46e:	bf00      	nop
   1d470:	40001000 	.word	0x40001000

0001d474 <radio_pkt_configure>:
	switch (phy) {
   1d474:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   1d478:	2b02      	cmp	r3, #2
{
   1d47a:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   1d47c:	bf14      	ite	ne
   1d47e:	2400      	movne	r4, #0
   1d480:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
	if (dc) {
   1d484:	07d3      	lsls	r3, r2, #31
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1d486:	f1c0 0308 	rsb	r3, r0, #8
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   1d48a:	bf48      	it	mi
   1d48c:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1d490:	041b      	lsls	r3, r3, #16
			   ((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   1d492:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   1d496:	4320      	orrs	r0, r4
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1d498:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1d49c:	4a09      	ldr	r2, [pc, #36]	; (1d4c4 <radio_pkt_configure+0x50>)
			    RADIO_PCNF0_S1LEN_Msk) |
   1d49e:	4303      	orrs	r3, r0
   1d4a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1d4a4:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   1d4a8:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   1d4ac:	4b06      	ldr	r3, [pc, #24]	; (1d4c8 <radio_pkt_configure+0x54>)
   1d4ae:	4003      	ands	r3, r0
   1d4b0:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((uint32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   1d4b4:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   1d4b8:	4319      	orrs	r1, r3
   1d4ba:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   1d4be:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   1d4c2:	bd10      	pop	{r4, pc}
   1d4c4:	40001000 	.word	0x40001000
   1d4c8:	fef80000 	.word	0xfef80000

0001d4cc <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   1d4cc:	4b01      	ldr	r3, [pc, #4]	; (1d4d4 <radio_pkt_rx_set+0x8>)
   1d4ce:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   1d4d2:	4770      	bx	lr
   1d4d4:	40001000 	.word	0x40001000

0001d4d8 <radio_pkt_tx_set>:
   1d4d8:	4b01      	ldr	r3, [pc, #4]	; (1d4e0 <radio_pkt_tx_set+0x8>)
   1d4da:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   1d4de:	4770      	bx	lr
   1d4e0:	40001000 	.word	0x40001000

0001d4e4 <radio_rx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d4e4:	4b01      	ldr	r3, [pc, #4]	; (1d4ec <radio_rx_enable+0x8>)
   1d4e6:	2201      	movs	r2, #1
   1d4e8:	605a      	str	r2, [r3, #4]
}
   1d4ea:	4770      	bx	lr
   1d4ec:	40001000 	.word	0x40001000

0001d4f0 <radio_tx_enable>:
   1d4f0:	4b01      	ldr	r3, [pc, #4]	; (1d4f8 <radio_tx_enable+0x8>)
   1d4f2:	2201      	movs	r2, #1
   1d4f4:	601a      	str	r2, [r3, #0]
}
   1d4f6:	4770      	bx	lr
   1d4f8:	40001000 	.word	0x40001000

0001d4fc <radio_disable>:
    p_reg->CHENCLR = mask;
   1d4fc:	4a07      	ldr	r2, [pc, #28]	; (1d51c <radio_disable+0x20>)
   1d4fe:	f44f 6310 	mov.w	r3, #2304	; 0x900
   1d502:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1d506:	2301      	movs	r3, #1
   1d508:	6053      	str	r3, [r2, #4]
   1d50a:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   1d50c:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
   1d510:	2100      	movs	r1, #0
   1d512:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
   1d516:	6113      	str	r3, [r2, #16]
}
   1d518:	4770      	bx	lr
   1d51a:	bf00      	nop
   1d51c:	4001f000 	.word	0x4001f000

0001d520 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   1d520:	4b04      	ldr	r3, [pc, #16]	; (1d534 <radio_status_reset+0x14>)
   1d522:	2200      	movs	r2, #0
   1d524:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   1d528:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   1d52c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   1d530:	4770      	bx	lr
   1d532:	bf00      	nop
   1d534:	40001000 	.word	0x40001000

0001d538 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   1d538:	4b03      	ldr	r3, [pc, #12]	; (1d548 <radio_is_ready+0x10>)
   1d53a:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   1d53e:	3800      	subs	r0, #0
   1d540:	bf18      	it	ne
   1d542:	2001      	movne	r0, #1
   1d544:	4770      	bx	lr
   1d546:	bf00      	nop
   1d548:	40001000 	.word	0x40001000

0001d54c <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   1d54c:	4b03      	ldr	r3, [pc, #12]	; (1d55c <radio_is_done+0x10>)
   1d54e:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   1d552:	3800      	subs	r0, #0
   1d554:	bf18      	it	ne
   1d556:	2001      	movne	r0, #1
   1d558:	4770      	bx	lr
   1d55a:	bf00      	nop
   1d55c:	40001000 	.word	0x40001000

0001d560 <radio_is_idle>:
}

uint32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
   1d560:	4b03      	ldr	r3, [pc, #12]	; (1d570 <radio_is_idle+0x10>)
   1d562:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   1d566:	fab0 f080 	clz	r0, r0
   1d56a:	0940      	lsrs	r0, r0, #5
   1d56c:	4770      	bx	lr
   1d56e:	bf00      	nop
   1d570:	40001000 	.word	0x40001000

0001d574 <radio_crc_configure>:

void radio_crc_configure(uint32_t polynomial, uint32_t iv)
{
	NRF_RADIO->CRCCNF =
   1d574:	4b04      	ldr	r3, [pc, #16]	; (1d588 <radio_crc_configure+0x14>)
   1d576:	f240 1203 	movw	r2, #259	; 0x103
   1d57a:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
   1d57e:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   1d582:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   1d586:	4770      	bx	lr
   1d588:	40001000 	.word	0x40001000

0001d58c <radio_crc_is_valid>:

uint32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
   1d58c:	4b03      	ldr	r3, [pc, #12]	; (1d59c <radio_crc_is_valid+0x10>)
   1d58e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1d592:	3800      	subs	r0, #0
   1d594:	bf18      	it	ne
   1d596:	2001      	movne	r0, #1
   1d598:	4770      	bx	lr
   1d59a:	bf00      	nop
   1d59c:	40001000 	.word	0x40001000

0001d5a0 <radio_pkt_empty_get>:
				       PDU_AC_LL_SIZE_MAX)];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
   1d5a0:	4800      	ldr	r0, [pc, #0]	; (1d5a4 <radio_pkt_empty_get+0x4>)
   1d5a2:	4770      	bx	lr
   1d5a4:	20003314 	.word	0x20003314

0001d5a8 <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
   1d5a8:	4800      	ldr	r0, [pc, #0]	; (1d5ac <radio_pkt_scratch_get+0x4>)
   1d5aa:	4770      	bx	lr
   1d5ac:	20003318 	.word	0x20003318

0001d5b0 <sw_switch>:

static uint8_t sw_tifs_toggle;

void sw_switch(uint8_t dir_curr, uint8_t dir_next, uint8_t phy_curr, uint8_t flags_curr,
	       uint8_t phy_next, uint8_t flags_next)
{
   1d5b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1d5b2:	4d30      	ldr	r5, [pc, #192]	; (1d674 <sw_switch+0xc4>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1d5b4:	4f30      	ldr	r7, [pc, #192]	; (1d678 <sw_switch+0xc8>)
   1d5b6:	782e      	ldrb	r6, [r5, #0]
   1d5b8:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 1d67c <sw_switch+0xcc>
{
   1d5bc:	f89d c014 	ldrb.w	ip, [sp, #20]
   1d5c0:	f8c7 e568 	str.w	lr, [r7, #1384]	; 0x568
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1d5c4:	00f3      	lsls	r3, r6, #3
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1d5c6:	f106 040c 	add.w	r4, r6, #12
   1d5ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d5ce:	b2e4      	uxtb	r4, r4
   1d5d0:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1d5d4:	00e4      	lsls	r4, r4, #3
   1d5d6:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
	nrf_ppi_event_endpoint_setup(
   1d5da:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1d5de:	4b28      	ldr	r3, [pc, #160]	; (1d680 <sw_switch+0xd0>)
   1d5e0:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   1d5e4:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   1d5e8:	00b7      	lsls	r7, r6, #2
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1d5ea:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510

	/* NOTE: As constants are passed to dir_curr and dir_next, the
	 *       compiler should optimize out the redundant code path
	 *       during the optimization.
	 */
	if (dir_next) {
   1d5ee:	2900      	cmp	r1, #0
   1d5f0:	d03a      	beq.n	1d668 <sw_switch+0xb8>
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_2M_NS;
   1d5f2:	f24a 035a 	movw	r3, #41050	; 0xa05a
		/* TX */

		/* Calculate delay with respect to current and next PHY.
		 */
		if (dir_curr) {
   1d5f6:	b330      	cbz	r0, 1d646 <sw_switch+0x96>
   1d5f8:	f649 4240 	movw	r2, #40000	; 0x9c40
   1d5fc:	f1bc 0f02 	cmp.w	ip, #2
   1d600:	bf08      	it	eq
   1d602:	4613      	moveq	r3, r2
			delay = HAL_RADIO_NS2US_ROUND(
   1d604:	f203 13f5 	addw	r3, r3, #501	; 0x1f5
			hal_radio_b2b_txen_on_sw_switch(ppi);
		} else {
			/* If RX PHY is LE Coded, calculate for S8 coding.
			 * Assumption being, S8 has higher delay.
			 */
			delay = HAL_RADIO_NS2US_ROUND(
   1d608:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d60c:	fbb3 f3f2 	udiv	r3, r3, r2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1d610:	4a1c      	ldr	r2, [pc, #112]	; (1d684 <sw_switch+0xd4>)
   1d612:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		}
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   1d616:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
   1d61a:	f502 4210 	add.w	r2, r2, #36864	; 0x9000
   1d61e:	f8d2 1540 	ldr.w	r1, [r2, #1344]	; 0x540
   1d622:	4299      	cmp	r1, r3
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   1d624:	bf8a      	itet	hi
   1d626:	f8d2 1540 	ldrhi.w	r1, [r2, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   1d62a:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   1d62c:	1acb      	subhi	r3, r1, r3
   1d62e:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    p_reg->CHENSET = mask;
   1d632:	4b11      	ldr	r3, [pc, #68]	; (1d678 <sw_switch+0xc8>)
   1d634:	f44f 6210 	mov.w	r2, #2304	; 0x900
   1d638:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
#if !defined(CONFIG_SOC_SERIES_NRF53X)
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
#endif /* !CONFIG_SOC_SERIES_NRF53X */
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER || CONFIG_SOC_SERIES_NRF53X */

	sw_tifs_toggle += 1U;
   1d63c:	1c73      	adds	r3, r6, #1
	sw_tifs_toggle &= 1U;
   1d63e:	f003 0301 	and.w	r3, r3, #1
   1d642:	702b      	strb	r3, [r5, #0]
}
   1d644:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d646:	f649 4140 	movw	r1, #40000	; 0x9c40
   1d64a:	f1bc 0f02 	cmp.w	ip, #2
   1d64e:	bf08      	it	eq
   1d650:	460b      	moveq	r3, r1
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_2M_NS;
   1d652:	f241 504a 	movw	r0, #5450	; 0x154a
   1d656:	f242 41b8 	movw	r1, #9400	; 0x24b8
   1d65a:	2a02      	cmp	r2, #2
   1d65c:	bf08      	it	eq
   1d65e:	4601      	moveq	r1, r0
			delay = HAL_RADIO_NS2US_ROUND(
   1d660:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
   1d664:	440b      	add	r3, r1
   1d666:	e7cf      	b.n	1d608 <sw_switch+0x58>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1d668:	4b07      	ldr	r3, [pc, #28]	; (1d688 <sw_switch+0xd8>)
   1d66a:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
   1d66e:	232d      	movs	r3, #45	; 0x2d
}
   1d670:	e7d1      	b.n	1d616 <sw_switch+0x66>
   1d672:	bf00      	nop
   1d674:	200038f7 	.word	0x200038f7
   1d678:	4001f000 	.word	0x4001f000
   1d67c:	4000110c 	.word	0x4000110c
   1d680:	40009140 	.word	0x40009140
   1d684:	40001000 	.word	0x40001000
   1d688:	40001004 	.word	0x40001004

0001d68c <radio_switch_complete_and_rx>:
#endif /* CONFIG_BT_CTLR_TIFS_HW */

void radio_switch_complete_and_rx(uint8_t phy_rx)
{
   1d68c:	b507      	push	{r0, r1, r2, lr}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1d68e:	4b07      	ldr	r3, [pc, #28]	; (1d6ac <radio_switch_complete_and_rx+0x20>)
   1d690:	2203      	movs	r2, #3
   1d692:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* NOTE: As Tx chain delays are negligible constant values (~1 us)
	 *	 across nRF5x radios, sw_switch assumes the 1M chain delay for
	 *       calculations.
	 */
	sw_switch(SW_SWITCH_TX, SW_SWITCH_RX, SW_SWITCH_PHY_1M, SW_SWITCH_FLAGS_DONTCARE, phy_rx,
   1d696:	2300      	movs	r3, #0
   1d698:	e9cd 0300 	strd	r0, r3, [sp]
   1d69c:	461a      	mov	r2, r3
   1d69e:	4619      	mov	r1, r3
   1d6a0:	2001      	movs	r0, #1
   1d6a2:	f7ff ff85 	bl	1d5b0 <sw_switch>
		  SW_SWITCH_FLAGS_DONTCARE);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1d6a6:	b003      	add	sp, #12
   1d6a8:	f85d fb04 	ldr.w	pc, [sp], #4
   1d6ac:	40001000 	.word	0x40001000

0001d6b0 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(uint8_t phy_rx, uint8_t flags_rx,
				  uint8_t phy_tx, uint8_t flags_tx)
{
   1d6b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1d6b2:	4c07      	ldr	r4, [pc, #28]	; (1d6d0 <radio_switch_complete_and_tx+0x20>)
   1d6b4:	2503      	movs	r5, #3
   1d6b6:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;

	sw_switch(SW_SWITCH_RX, SW_SWITCH_TX, phy_rx, flags_rx, phy_tx, flags_tx);
   1d6ba:	e9cd 2300 	strd	r2, r3, [sp]
   1d6be:	460b      	mov	r3, r1
   1d6c0:	4602      	mov	r2, r0
   1d6c2:	2101      	movs	r1, #1
   1d6c4:	2000      	movs	r0, #0
   1d6c6:	f7ff ff73 	bl	1d5b0 <sw_switch>
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1d6ca:	b003      	add	sp, #12
   1d6cc:	bd30      	pop	{r4, r5, pc}
   1d6ce:	bf00      	nop
   1d6d0:	40001000 	.word	0x40001000

0001d6d4 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   1d6d4:	4b05      	ldr	r3, [pc, #20]	; (1d6ec <radio_switch_complete_and_disable+0x18>)
   1d6d6:	2203      	movs	r2, #3
   1d6d8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->CHENCLR = mask;
   1d6dc:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   1d6e0:	f44f 6210 	mov.w	r2, #2304	; 0x900
   1d6e4:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1d6e8:	4770      	bx	lr
   1d6ea:	bf00      	nop
   1d6ec:	40001000 	.word	0x40001000

0001d6f0 <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_PHY_CODED */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   1d6f0:	4a03      	ldr	r2, [pc, #12]	; (1d700 <radio_rssi_measure+0x10>)
   1d6f2:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1d6f6:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   1d6fa:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
   1d6fe:	4770      	bx	lr
   1d700:	40001000 	.word	0x40001000

0001d704 <radio_rssi_get>:

uint32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   1d704:	4b01      	ldr	r3, [pc, #4]	; (1d70c <radio_rssi_get+0x8>)
   1d706:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   1d70a:	4770      	bx	lr
   1d70c:	40001000 	.word	0x40001000

0001d710 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   1d710:	4b02      	ldr	r3, [pc, #8]	; (1d71c <radio_rssi_status_reset+0xc>)
   1d712:	2200      	movs	r2, #0
   1d714:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   1d718:	4770      	bx	lr
   1d71a:	bf00      	nop
   1d71c:	40001000 	.word	0x40001000

0001d720 <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   1d720:	4b03      	ldr	r3, [pc, #12]	; (1d730 <radio_rssi_is_ready+0x10>)
   1d722:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   1d726:	3800      	subs	r0, #0
   1d728:	bf18      	it	ne
   1d72a:	2001      	movne	r0, #1
   1d72c:	4770      	bx	lr
   1d72e:	bf00      	nop
   1d730:	40001000 	.word	0x40001000

0001d734 <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   1d734:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d736:	2400      	movs	r4, #0
   1d738:	2706      	movs	r7, #6
   1d73a:	fb07 f304 	mul.w	r3, r7, r4
   1d73e:	18d5      	adds	r5, r2, r3
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   1d740:	58d6      	ldr	r6, [r2, r3]
   1d742:	00a3      	lsls	r3, r4, #2
   1d744:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	for (index = 0U; index < 8; index++) {
   1d74c:	3401      	adds	r4, #1
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1d74e:	f8c3 6600 	str.w	r6, [r3, #1536]	; 0x600
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   1d752:	88ad      	ldrh	r5, [r5, #4]
   1d754:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   1d758:	2c08      	cmp	r4, #8
   1d75a:	d1ee      	bne.n	1d73a <radio_filter_configure+0x6>
		bdaddr += 6;
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   1d75c:	4b02      	ldr	r3, [pc, #8]	; (1d768 <radio_filter_configure+0x34>)
   1d75e:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   1d762:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   1d766:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d768:	40001000 	.word	0x40001000

0001d76c <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   1d76c:	4a03      	ldr	r2, [pc, #12]	; (1d77c <radio_filter_disable+0x10>)
   1d76e:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   1d772:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1d776:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   1d77a:	4770      	bx	lr
   1d77c:	40001000 	.word	0x40001000

0001d780 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   1d780:	4b02      	ldr	r3, [pc, #8]	; (1d78c <radio_filter_status_reset+0xc>)
   1d782:	2200      	movs	r2, #0
   1d784:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   1d788:	4770      	bx	lr
   1d78a:	bf00      	nop
   1d78c:	40001000 	.word	0x40001000

0001d790 <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   1d790:	4b03      	ldr	r3, [pc, #12]	; (1d7a0 <radio_filter_has_match+0x10>)
   1d792:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   1d796:	3800      	subs	r0, #0
   1d798:	bf18      	it	ne
   1d79a:	2001      	movne	r0, #1
   1d79c:	4770      	bx	lr
   1d79e:	bf00      	nop
   1d7a0:	40001000 	.word	0x40001000

0001d7a4 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   1d7a4:	4b01      	ldr	r3, [pc, #4]	; (1d7ac <radio_filter_match_get+0x8>)
   1d7a6:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   1d7aa:	4770      	bx	lr
   1d7ac:	40001000 	.word	0x40001000

0001d7b0 <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1d7b0:	4b05      	ldr	r3, [pc, #20]	; (1d7c8 <radio_tmr_status_reset+0x18>)
   1d7b2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   1d7b6:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
   1d7ba:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   1d7be:	4a03      	ldr	r2, [pc, #12]	; (1d7cc <radio_tmr_status_reset+0x1c>)
   1d7c0:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			BIT(HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI) |
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   1d7c4:	4770      	bx	lr
   1d7c6:	bf00      	nop
   1d7c8:	4000b000 	.word	0x4000b000
   1d7cc:	0e7000c0 	.word	0x0e7000c0

0001d7d0 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   1d7d0:	4b03      	ldr	r3, [pc, #12]	; (1d7e0 <radio_tmr_tifs_set+0x10>)
   1d7d2:	4a04      	ldr	r2, [pc, #16]	; (1d7e4 <radio_tmr_tifs_set+0x14>)
   1d7d4:	781b      	ldrb	r3, [r3, #0]
   1d7d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   1d7da:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1d7de:	4770      	bx	lr
   1d7e0:	200038f7 	.word	0x200038f7
   1d7e4:	40009000 	.word	0x40009000

0001d7e8 <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   1d7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1d7ea:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   1d7ee:	4c2f      	ldr	r4, [pc, #188]	; (1d8ac <radio_tmr_start+0xc4>)
   1d7f0:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   1d7f4:	42a3      	cmp	r3, r4
		ticks_start--;
		remainder += 30517578UL;
   1d7f6:	bf88      	it	hi
   1d7f8:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d7fc:	4b2c      	ldr	r3, [pc, #176]	; (1d8b0 <radio_tmr_start+0xc8>)
	}
	remainder /= 1000000UL;
   1d7fe:	4c2d      	ldr	r4, [pc, #180]	; (1d8b4 <radio_tmr_start+0xcc>)
		remainder += 30517578UL;
   1d800:	bf84      	itt	hi
   1d802:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
   1d806:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
   1d80a:	f04f 0501 	mov.w	r5, #1

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   1d80e:	f04f 0600 	mov.w	r6, #0
	remainder /= 1000000UL;
   1d812:	fbb2 f4f4 	udiv	r4, r2, r4
	EVENT_TIMER->PRESCALER = 4;
   1d816:	f04f 0704 	mov.w	r7, #4
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1d81a:	f04f 0202 	mov.w	r2, #2
   1d81e:	60dd      	str	r5, [r3, #12]
	EVENT_TIMER->MODE = 0;
   1d820:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	EVENT_TIMER->PRESCALER = 4;
   1d824:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1d828:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
   1d82c:	4a22      	ldr	r2, [pc, #136]	; (1d8b8 <radio_tmr_start+0xd0>)
    p_reg->CC[cc_channel] = cc_value;
   1d82e:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
		ticks_start--;
   1d832:	bf88      	it	hi
   1d834:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
   1d838:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   1d83c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1d840:	f8c2 1344 	str.w	r1, [r2, #836]	; 0x344
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1d844:	491d      	ldr	r1, [pc, #116]	; (1d8bc <radio_tmr_start+0xd4>)
   1d846:	f502 72a4 	add.w	r2, r2, #328	; 0x148
   1d84a:	f8c1 2540 	str.w	r2, [r1, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1d84e:	f8c1 3544 	str.w	r3, [r1, #1348]	; 0x544
    p_reg->CHENSET = mask;
   1d852:	2340      	movs	r3, #64	; 0x40
   1d854:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
	nrf_rtc_event_enable(NRF_RTC0, RTC_EVTENSET_COMPARE2_Msk);

	hal_event_timer_start_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_EVENT_TIMER_START_PPI));

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   1d858:	f7ff fd5e 	bl	1d318 <hal_radio_enable_on_tick_ppi_config_and_enable>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d85c:	4b18      	ldr	r3, [pc, #96]	; (1d8c0 <radio_tmr_start+0xd8>)
   1d85e:	60dd      	str	r5, [r3, #12]
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   1d860:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   1d864:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   1d868:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
   1d86c:	601d      	str	r5, [r3, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1d86e:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
   1d872:	3b74      	subs	r3, #116	; 0x74
   1d874:	f8c1 3550 	str.w	r3, [r1, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1d878:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
   1d87c:	f8c1 3554 	str.w	r3, [r1, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1d880:	f503 739a 	add.w	r3, r3, #308	; 0x134
   1d884:	f8c1 3558 	str.w	r3, [r1, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1d888:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   1d88c:	33c4      	adds	r3, #196	; 0xc4
   1d88e:	f8c1 355c 	str.w	r3, [r1, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1d892:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
   1d896:	3bc0      	subs	r3, #192	; 0xc0
   1d898:	f8c1 3560 	str.w	r3, [r1, #1376]	; 0x560
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1d89c:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   1d8a0:	33c8      	adds	r3, #200	; 0xc8
   1d8a2:	f8c1 3564 	str.w	r3, [r1, #1380]	; 0x564
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   1d8a6:	4620      	mov	r0, r4
   1d8a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d8aa:	bf00      	nop
   1d8ac:	7ff0bdbf 	.word	0x7ff0bdbf
   1d8b0:	40008000 	.word	0x40008000
   1d8b4:	000f4240 	.word	0x000f4240
   1d8b8:	4000b000 	.word	0x4000b000
   1d8bc:	4001f000 	.word	0x4001f000
   1d8c0:	40009000 	.word	0x40009000

0001d8c4 <radio_tmr_start_now>:
#endif /* CONFIG_SOC_SERIES_NRF53X */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

uint32_t radio_tmr_start_now(uint8_t trx)
{
   1d8c4:	b510      	push	{r4, lr}
	uint32_t now, start;

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   1d8c6:	f7ff fd27 	bl	1d318 <hal_radio_enable_on_tick_ppi_config_and_enable>
   1d8ca:	4b08      	ldr	r3, [pc, #32]	; (1d8ec <radio_tmr_start_now+0x28>)
   1d8cc:	2401      	movs	r4, #1
   1d8ce:	645c      	str	r4, [r3, #68]	; 0x44
#endif /* CONFIG_SOC_SERIES_NRF53X */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	/* Capture the current time */
	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CAPTURE1);
	now = EVENT_TIMER->CC[1];
   1d8d0:	f8d3 2544 	ldr.w	r2, [r3, #1348]	; 0x544
	start = now;
   1d8d4:	4611      	mov	r1, r2

	/* Setup PPI while determining the latency in doing so */
	do {
		/* Set start to be, now plus the determined latency */
		start = (now << 1) - start;
   1d8d6:	ebc1 0142 	rsb	r1, r1, r2, lsl #1

		/* Setup compare event with min. 1 us offset */
		nrf_timer_cc_set(EVENT_TIMER, 0, start + 1);
   1d8da:	1c48      	adds	r0, r1, #1
    p_reg->CC[cc_channel] = cc_value;
   1d8dc:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d8e0:	645c      	str	r4, [r3, #68]	; 0x44

		/* Capture the current time */
		nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CAPTURE1);

		now = EVENT_TIMER->CC[1];
   1d8e2:	f8d3 2544 	ldr.w	r2, [r3, #1348]	; 0x544
	} while (now > start);
   1d8e6:	4291      	cmp	r1, r2
   1d8e8:	d3f5      	bcc.n	1d8d6 <radio_tmr_start_now+0x12>

	return start + 1;
}
   1d8ea:	bd10      	pop	{r4, pc}
   1d8ec:	40008000 	.word	0x40008000

0001d8f0 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   1d8f0:	4b01      	ldr	r3, [pc, #4]	; (1d8f8 <radio_tmr_start_get+0x8>)
   1d8f2:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   1d8f6:	4770      	bx	lr
   1d8f8:	4000b000 	.word	0x4000b000

0001d8fc <radio_tmr_stop>:
   1d8fc:	4a04      	ldr	r2, [pc, #16]	; (1d910 <radio_tmr_stop+0x14>)
   1d8fe:	2301      	movs	r3, #1
   1d900:	6053      	str	r3, [r2, #4]
   1d902:	6113      	str	r3, [r2, #16]
   1d904:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   1d908:	6053      	str	r3, [r2, #4]
   1d90a:	6113      	str	r3, [r2, #16]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1d90c:	4770      	bx	lr
   1d90e:	bf00      	nop
   1d910:	40008000 	.word	0x40008000

0001d914 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   1d914:	4b04      	ldr	r3, [pc, #16]	; (1d928 <radio_tmr_hcto_configure+0x14>)
   1d916:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->CHENSET = mask;
   1d91a:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
   1d91e:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   1d922:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   1d926:	4770      	bx	lr
   1d928:	40008000 	.word	0x40008000

0001d92c <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1d92c:	4b06      	ldr	r3, [pc, #24]	; (1d948 <radio_tmr_aa_capture+0x1c>)
   1d92e:	4a07      	ldr	r2, [pc, #28]	; (1d94c <radio_tmr_aa_capture+0x20>)
   1d930:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1d934:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   1d938:	3240      	adds	r2, #64	; 0x40
   1d93a:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    p_reg->CHENSET = mask;
   1d93e:	4a04      	ldr	r2, [pc, #16]	; (1d950 <radio_tmr_aa_capture+0x24>)
   1d940:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   1d944:	4770      	bx	lr
   1d946:	bf00      	nop
   1d948:	4001f000 	.word	0x4001f000
   1d94c:	40001100 	.word	0x40001100
   1d950:	04000080 	.word	0x04000080

0001d954 <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   1d954:	4b01      	ldr	r3, [pc, #4]	; (1d95c <radio_tmr_aa_get+0x8>)
   1d956:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   1d95a:	4770      	bx	lr
   1d95c:	40008000 	.word	0x40008000

0001d960 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   1d960:	4b01      	ldr	r3, [pc, #4]	; (1d968 <radio_tmr_aa_save+0x8>)
   1d962:	6018      	str	r0, [r3, #0]
}
   1d964:	4770      	bx	lr
   1d966:	bf00      	nop
   1d968:	20003424 	.word	0x20003424

0001d96c <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
   1d96c:	4b01      	ldr	r3, [pc, #4]	; (1d974 <radio_tmr_aa_restore+0x8>)
   1d96e:	6818      	ldr	r0, [r3, #0]
   1d970:	4770      	bx	lr
   1d972:	bf00      	nop
   1d974:	20003424 	.word	0x20003424

0001d978 <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   1d978:	4b01      	ldr	r3, [pc, #4]	; (1d980 <radio_tmr_ready_get+0x8>)
   1d97a:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   1d97e:	4770      	bx	lr
   1d980:	40008000 	.word	0x40008000

0001d984 <radio_tmr_end_capture>:
   1d984:	4b02      	ldr	r3, [pc, #8]	; (1d990 <radio_tmr_end_capture+0xc>)
   1d986:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   1d98a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 */
#if defined(CONFIG_BT_CTLR_TIFS_HW) || !defined(CONFIG_SOC_SERIES_NRF53X)
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
#endif /* CONFIG_BT_CTLR_TIFS_HW || !CONFIG_SOC_SERIES_NRF53X */
}
   1d98e:	4770      	bx	lr
   1d990:	4001f000 	.word	0x4001f000

0001d994 <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   1d994:	4b01      	ldr	r3, [pc, #4]	; (1d99c <radio_tmr_end_get+0x8>)
   1d996:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   1d99a:	4770      	bx	lr
   1d99c:	40008000 	.word	0x40008000

0001d9a0 <radio_tmr_tifs_base_get>:
   1d9a0:	4b01      	ldr	r3, [pc, #4]	; (1d9a8 <radio_tmr_tifs_base_get+0x8>)
   1d9a2:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   1d9a6:	4770      	bx	lr
   1d9a8:	40008000 	.word	0x40008000

0001d9ac <radio_ar_match_get>:
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   1d9ac:	4b01      	ldr	r3, [pc, #4]	; (1d9b4 <radio_ar_match_get+0x8>)
   1d9ae:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1d9b2:	4770      	bx	lr
   1d9b4:	4000f000 	.word	0x4000f000

0001d9b8 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1d9b8:	4a06      	ldr	r2, [pc, #24]	; (1d9d4 <radio_ar_status_reset+0x1c>)
   1d9ba:	2300      	movs	r3, #0
   1d9bc:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1d9c0:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   1d9c4:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    p_reg->CHENCLR = mask;
   1d9c8:	4b03      	ldr	r3, [pc, #12]	; (1d9d8 <radio_ar_status_reset+0x20>)
   1d9ca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1d9ce:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   1d9d2:	4770      	bx	lr
   1d9d4:	40001000 	.word	0x40001000
   1d9d8:	4001f000 	.word	0x4001f000

0001d9dc <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   1d9dc:	4b08      	ldr	r3, [pc, #32]	; (1da00 <radio_ar_has_match+0x24>)
   1d9de:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   1d9e2:	b160      	cbz	r0, 1d9fe <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   1d9e4:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   1d9e8:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   1d9ec:	b138      	cbz	r0, 1d9fe <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   1d9ee:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   1d9f2:	b120      	cbz	r0, 1d9fe <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   1d9f4:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   1d9f8:	fab0 f080 	clz	r0, r0
   1d9fc:	0940      	lsrs	r0, r0, #5
}
   1d9fe:	4770      	bx	lr
   1da00:	40001000 	.word	0x40001000

0001da04 <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1da04:	2902      	cmp	r1, #2
{
   1da06:	b510      	push	{r4, lr}
   1da08:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1da0a:	d00b      	beq.n	1da24 <mayfly_enable_cb+0x20>
   1da0c:	4a0a      	ldr	r2, [pc, #40]	; (1da38 <mayfly_enable_cb+0x34>)
   1da0e:	490b      	ldr	r1, [pc, #44]	; (1da3c <mayfly_enable_cb+0x38>)
   1da10:	480b      	ldr	r0, [pc, #44]	; (1da40 <mayfly_enable_cb+0x3c>)
   1da12:	231e      	movs	r3, #30
   1da14:	f003 fc2a 	bl	2126c <printk>
   1da18:	4040      	eors	r0, r0
   1da1a:	f380 8811 	msr	BASEPRI, r0
   1da1e:	f04f 0003 	mov.w	r0, #3
   1da22:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   1da24:	200b      	movs	r0, #11
	if (enable) {
   1da26:	b11c      	cbz	r4, 1da30 <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   1da28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   1da2c:	f7e6 bcce 	b.w	43cc <arch_irq_enable>
}
   1da30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   1da34:	f7e6 bcda 	b.w	43ec <arch_irq_disable>
   1da38:	0002fc06 	.word	0x0002fc06
   1da3c:	0002fc54 	.word	0x0002fc54
   1da40:	0002b804 	.word	0x0002b804

0001da44 <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
   1da44:	b508      	push	{r3, lr}
	(void)caller_id;

	switch (callee_id) {
   1da46:	b181      	cbz	r1, 1da6a <mayfly_is_enabled+0x26>
   1da48:	3901      	subs	r1, #1
   1da4a:	2901      	cmp	r1, #1
   1da4c:	d912      	bls.n	1da74 <mayfly_is_enabled+0x30>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   1da4e:	4a0a      	ldr	r2, [pc, #40]	; (1da78 <mayfly_is_enabled+0x34>)
   1da50:	490a      	ldr	r1, [pc, #40]	; (1da7c <mayfly_is_enabled+0x38>)
   1da52:	480b      	ldr	r0, [pc, #44]	; (1da80 <mayfly_is_enabled+0x3c>)
   1da54:	2336      	movs	r3, #54	; 0x36
   1da56:	f003 fc09 	bl	2126c <printk>
   1da5a:	4040      	eors	r0, r0
   1da5c:	f380 8811 	msr	BASEPRI, r0
   1da60:	f04f 0003 	mov.w	r0, #3
   1da64:	df02      	svc	2
		break;
	}

	return 0;
}
   1da66:	2000      	movs	r0, #0
   1da68:	bd08      	pop	{r3, pc}
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   1da6a:	2018      	movs	r0, #24
}
   1da6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   1da70:	f7e6 bcd0 	b.w	4414 <arch_irq_is_enabled>
   1da74:	200b      	movs	r0, #11
   1da76:	e7f9      	b.n	1da6c <mayfly_is_enabled+0x28>
   1da78:	0002fc06 	.word	0x0002fc06
   1da7c:	0002cf80 	.word	0x0002cf80
   1da80:	0002b804 	.word	0x0002b804

0001da84 <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1da84:	2901      	cmp	r1, #1
{
   1da86:	b508      	push	{r3, lr}
	switch (callee_id) {
   1da88:	d008      	beq.n	1da9c <mayfly_pend+0x18>
   1da8a:	2902      	cmp	r1, #2
   1da8c:	d006      	beq.n	1da9c <mayfly_pend+0x18>
   1da8e:	b949      	cbnz	r1, 1daa4 <mayfly_pend+0x20>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1da90:	4b0b      	ldr	r3, [pc, #44]	; (1dac0 <mayfly_pend+0x3c>)
   1da92:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1da96:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	default:
		LL_ASSERT(0);
		break;
	}
}
   1da9a:	bd08      	pop	{r3, pc}
   1da9c:	4b08      	ldr	r3, [pc, #32]	; (1dac0 <mayfly_pend+0x3c>)
   1da9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1daa2:	e7f8      	b.n	1da96 <mayfly_pend+0x12>
		LL_ASSERT(0);
   1daa4:	4a07      	ldr	r2, [pc, #28]	; (1dac4 <mayfly_pend+0x40>)
   1daa6:	4908      	ldr	r1, [pc, #32]	; (1dac8 <mayfly_pend+0x44>)
   1daa8:	4808      	ldr	r0, [pc, #32]	; (1dacc <mayfly_pend+0x48>)
   1daaa:	2367      	movs	r3, #103	; 0x67
   1daac:	f003 fbde 	bl	2126c <printk>
   1dab0:	4040      	eors	r0, r0
   1dab2:	f380 8811 	msr	BASEPRI, r0
   1dab6:	f04f 0003 	mov.w	r0, #3
   1daba:	df02      	svc	2
}
   1dabc:	e7ed      	b.n	1da9a <mayfly_pend+0x16>
   1dabe:	bf00      	nop
   1dac0:	e000e100 	.word	0xe000e100
   1dac4:	0002fc06 	.word	0x0002fc06
   1dac8:	0002cf80 	.word	0x0002cf80
   1dacc:	0002b804 	.word	0x0002b804

0001dad0 <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1dad0:	2803      	cmp	r0, #3
{
   1dad2:	b510      	push	{r4, lr}
   1dad4:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1dad6:	d90b      	bls.n	1daf0 <hal_ticker_instance0_caller_id_get+0x20>
   1dad8:	4a0e      	ldr	r2, [pc, #56]	; (1db14 <hal_ticker_instance0_caller_id_get+0x44>)
   1dada:	490f      	ldr	r1, [pc, #60]	; (1db18 <hal_ticker_instance0_caller_id_get+0x48>)
   1dadc:	480f      	ldr	r0, [pc, #60]	; (1db1c <hal_ticker_instance0_caller_id_get+0x4c>)
   1dade:	232b      	movs	r3, #43	; 0x2b
   1dae0:	f003 fbc4 	bl	2126c <printk>
   1dae4:	4040      	eors	r0, r0
   1dae6:	f380 8811 	msr	BASEPRI, r0
   1daea:	f04f 0003 	mov.w	r0, #3
   1daee:	df02      	svc	2

	caller_id = caller_id_lut[user_id];
   1daf0:	4b0b      	ldr	r3, [pc, #44]	; (1db20 <hal_ticker_instance0_caller_id_get+0x50>)
   1daf2:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1daf4:	b95c      	cbnz	r4, 1db0e <hal_ticker_instance0_caller_id_get+0x3e>
   1daf6:	4a07      	ldr	r2, [pc, #28]	; (1db14 <hal_ticker_instance0_caller_id_get+0x44>)
   1daf8:	490a      	ldr	r1, [pc, #40]	; (1db24 <hal_ticker_instance0_caller_id_get+0x54>)
   1dafa:	4808      	ldr	r0, [pc, #32]	; (1db1c <hal_ticker_instance0_caller_id_get+0x4c>)
   1dafc:	232e      	movs	r3, #46	; 0x2e
   1dafe:	f003 fbb5 	bl	2126c <printk>
   1db02:	4040      	eors	r0, r0
   1db04:	f380 8811 	msr	BASEPRI, r0
   1db08:	f04f 0003 	mov.w	r0, #3
   1db0c:	df02      	svc	2

	return caller_id;
}
   1db0e:	4620      	mov	r0, r4
   1db10:	bd10      	pop	{r4, pc}
   1db12:	bf00      	nop
   1db14:	0002fc76 	.word	0x0002fc76
   1db18:	0002fcc4 	.word	0x0002fcc4
   1db1c:	0002b804 	.word	0x0002b804
   1db20:	0002fd06 	.word	0x0002fd06
   1db24:	0002fce4 	.word	0x0002fce4

0001db28 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   1db28:	3801      	subs	r0, #1
{
   1db2a:	b510      	push	{r4, lr}
   1db2c:	461c      	mov	r4, r3
	switch (caller_id) {
   1db2e:	2804      	cmp	r0, #4
   1db30:	d845      	bhi.n	1dbbe <hal_ticker_instance0_sched+0x96>
   1db32:	e8df f000 	tbb	[pc, r0]
   1db36:	1a03      	.short	0x1a03
   1db38:	2c23      	.short	0x2c23
   1db3a:	3b          	.byte	0x3b
   1db3b:	00          	.byte	0x00
	case TICKER_CALL_ID_ISR:
		switch (callee_id) {
   1db3c:	2904      	cmp	r1, #4
   1db3e:	d107      	bne.n	1db50 <hal_ticker_instance0_sched+0x28>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;
   1db40:	4b20      	ldr	r3, [pc, #128]	; (1dbc4 <hal_ticker_instance0_sched+0x9c>)

			/* TODO: scheduler lock, if preemptive threads used */
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1db42:	2102      	movs	r1, #2
			m.param = instance;
   1db44:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1db46:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
   1db48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1db4c:	f7f8 bf56 	b.w	169fc <mayfly_enqueue>
			LL_ASSERT(0);
   1db50:	234e      	movs	r3, #78	; 0x4e
		LL_ASSERT(0);
   1db52:	4a1d      	ldr	r2, [pc, #116]	; (1dbc8 <hal_ticker_instance0_sched+0xa0>)
   1db54:	491d      	ldr	r1, [pc, #116]	; (1dbcc <hal_ticker_instance0_sched+0xa4>)
   1db56:	481e      	ldr	r0, [pc, #120]	; (1dbd0 <hal_ticker_instance0_sched+0xa8>)
   1db58:	f003 fb88 	bl	2126c <printk>
   1db5c:	4040      	eors	r0, r0
   1db5e:	f380 8811 	msr	BASEPRI, r0
   1db62:	f04f 0003 	mov.w	r0, #3
   1db66:	df02      	svc	2
}
   1db68:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1db6a:	2903      	cmp	r1, #3
   1db6c:	d104      	bne.n	1db78 <hal_ticker_instance0_sched+0x50>
			m.param = instance;
   1db6e:	4b19      	ldr	r3, [pc, #100]	; (1dbd4 <hal_ticker_instance0_sched+0xac>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1db70:	2101      	movs	r1, #1
			m.param = instance;
   1db72:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1db74:	4608      	mov	r0, r1
   1db76:	e7e7      	b.n	1db48 <hal_ticker_instance0_sched+0x20>
			LL_ASSERT(0);
   1db78:	2365      	movs	r3, #101	; 0x65
   1db7a:	e7ea      	b.n	1db52 <hal_ticker_instance0_sched+0x2a>
		switch (callee_id) {
   1db7c:	2904      	cmp	r1, #4
   1db7e:	d104      	bne.n	1db8a <hal_ticker_instance0_sched+0x62>
			m.param = instance;
   1db80:	4b15      	ldr	r3, [pc, #84]	; (1dbd8 <hal_ticker_instance0_sched+0xb0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1db82:	2102      	movs	r1, #2
			m.param = instance;
   1db84:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1db86:	2001      	movs	r0, #1
   1db88:	e7de      	b.n	1db48 <hal_ticker_instance0_sched+0x20>
			LL_ASSERT(0);
   1db8a:	237c      	movs	r3, #124	; 0x7c
   1db8c:	e7e1      	b.n	1db52 <hal_ticker_instance0_sched+0x2a>
		switch (callee_id) {
   1db8e:	2903      	cmp	r1, #3
   1db90:	d003      	beq.n	1db9a <hal_ticker_instance0_sched+0x72>
   1db92:	2904      	cmp	r1, #4
   1db94:	d006      	beq.n	1dba4 <hal_ticker_instance0_sched+0x7c>
			LL_ASSERT(0);
   1db96:	23a2      	movs	r3, #162	; 0xa2
   1db98:	e7db      	b.n	1db52 <hal_ticker_instance0_sched+0x2a>
			m.param = instance;
   1db9a:	4b10      	ldr	r3, [pc, #64]	; (1dbdc <hal_ticker_instance0_sched+0xb4>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1db9c:	2101      	movs	r1, #1
			m.param = instance;
   1db9e:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1dba0:	2002      	movs	r0, #2
   1dba2:	e7d1      	b.n	1db48 <hal_ticker_instance0_sched+0x20>
			m.param = instance;
   1dba4:	4b0e      	ldr	r3, [pc, #56]	; (1dbe0 <hal_ticker_instance0_sched+0xb8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1dba6:	2102      	movs	r1, #2
			m.param = instance;
   1dba8:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1dbaa:	e7e3      	b.n	1db74 <hal_ticker_instance0_sched+0x4c>
		switch (callee_id) {
   1dbac:	2904      	cmp	r1, #4
   1dbae:	d104      	bne.n	1dbba <hal_ticker_instance0_sched+0x92>
			m.param = instance;
   1dbb0:	4b0c      	ldr	r3, [pc, #48]	; (1dbe4 <hal_ticker_instance0_sched+0xbc>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1dbb2:	2102      	movs	r1, #2
			m.param = instance;
   1dbb4:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1dbb6:	2003      	movs	r0, #3
   1dbb8:	e7c6      	b.n	1db48 <hal_ticker_instance0_sched+0x20>
			LL_ASSERT(0);
   1dbba:	23ba      	movs	r3, #186	; 0xba
   1dbbc:	e7c9      	b.n	1db52 <hal_ticker_instance0_sched+0x2a>
		LL_ASSERT(0);
   1dbbe:	23c0      	movs	r3, #192	; 0xc0
   1dbc0:	e7c7      	b.n	1db52 <hal_ticker_instance0_sched+0x2a>
   1dbc2:	bf00      	nop
   1dbc4:	20000e9c 	.word	0x20000e9c
   1dbc8:	0002fc76 	.word	0x0002fc76
   1dbcc:	0002cf80 	.word	0x0002cf80
   1dbd0:	0002b804 	.word	0x0002b804
   1dbd4:	20000e8c 	.word	0x20000e8c
   1dbd8:	20000edc 	.word	0x20000edc
   1dbdc:	20000ecc 	.word	0x20000ecc
   1dbe0:	20000ebc 	.word	0x20000ebc
   1dbe4:	20000eac 	.word	0x20000eac

0001dbe8 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1dbe8:	4b02      	ldr	r3, [pc, #8]	; (1dbf4 <net_buf_pool_get+0xc>)
   1dbea:	2228      	movs	r2, #40	; 0x28
   1dbec:	fb02 3000 	mla	r0, r2, r0, r3
   1dbf0:	4770      	bx	lr
   1dbf2:	bf00      	nop
   1dbf4:	20001188 	.word	0x20001188

0001dbf8 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1dbf8:	7982      	ldrb	r2, [r0, #6]

	return buf - pool->__bufs;
   1dbfa:	4b05      	ldr	r3, [pc, #20]	; (1dc10 <net_buf_id+0x18>)
   1dbfc:	2128      	movs	r1, #40	; 0x28
   1dbfe:	fb01 3302 	mla	r3, r1, r2, r3
   1dc02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1dc04:	1ac0      	subs	r0, r0, r3
}
   1dc06:	4b03      	ldr	r3, [pc, #12]	; (1dc14 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   1dc08:	10c0      	asrs	r0, r0, #3
}
   1dc0a:	4358      	muls	r0, r3
   1dc0c:	4770      	bx	lr
   1dc0e:	bf00      	nop
   1dc10:	20001188 	.word	0x20001188
   1dc14:	aaaaaaab 	.word	0xaaaaaaab

0001dc18 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1dc18:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1dc1a:	4b0a      	ldr	r3, [pc, #40]	; (1dc44 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1dc1c:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1dc1e:	2428      	movs	r4, #40	; 0x28
   1dc20:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   1dc24:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1dc26:	6a1b      	ldr	r3, [r3, #32]
   1dc28:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1dc2a:	6823      	ldr	r3, [r4, #0]
   1dc2c:	429a      	cmp	r2, r3
   1dc2e:	bf94      	ite	ls
   1dc30:	600a      	strls	r2, [r1, #0]
   1dc32:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1dc34:	f7ff ffe0 	bl	1dbf8 <net_buf_id>
   1dc38:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1dc3c:	fb02 3000 	mla	r0, r2, r0, r3
   1dc40:	bd10      	pop	{r4, pc}
   1dc42:	bf00      	nop
   1dc44:	20001188 	.word	0x20001188

0001dc48 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1dc48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dc4c:	4605      	mov	r5, r0
   1dc4e:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1dc50:	4610      	mov	r0, r2
   1dc52:	4619      	mov	r1, r3
{
   1dc54:	4691      	mov	r9, r2
   1dc56:	4698      	mov	r8, r3
   1dc58:	4617      	mov	r7, r2
   1dc5a:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1dc5c:	f00b fa70 	bl	29140 <sys_clock_timeout_end_calc>
   1dc60:	4682      	mov	sl, r0
   1dc62:	468b      	mov	fp, r1
	__asm__ volatile(
   1dc64:	f04f 0320 	mov.w	r3, #32
   1dc68:	f3ef 8111 	mrs	r1, BASEPRI
   1dc6c:	f383 8812 	msr	BASEPRI_MAX, r3
   1dc70:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1dc74:	8b6b      	ldrh	r3, [r5, #26]
   1dc76:	2b00      	cmp	r3, #0
   1dc78:	d055      	beq.n	1dd26 <net_buf_alloc_len+0xde>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1dc7a:	8b2a      	ldrh	r2, [r5, #24]
   1dc7c:	429a      	cmp	r2, r3
   1dc7e:	d93e      	bls.n	1dcfe <net_buf_alloc_len+0xb6>
   1dc80:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   1dc82:	2200      	movs	r2, #0
   1dc84:	2300      	movs	r3, #0
   1dc86:	4628      	mov	r0, r5
   1dc88:	f002 f990 	bl	1ffac <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1dc8c:	9900      	ldr	r1, [sp, #0]
   1dc8e:	4604      	mov	r4, r0
   1dc90:	2800      	cmp	r0, #0
   1dc92:	d034      	beq.n	1dcfe <net_buf_alloc_len+0xb6>
	__asm__ volatile(
   1dc94:	f381 8811 	msr	BASEPRI, r1
   1dc98:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1dc9c:	9b01      	ldr	r3, [sp, #4]
   1dc9e:	2b00      	cmp	r3, #0
   1dca0:	d051      	beq.n	1dd46 <net_buf_alloc_len+0xfe>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1dca2:	ea58 0309 	orrs.w	r3, r8, r9
   1dca6:	d00f      	beq.n	1dcc8 <net_buf_alloc_len+0x80>
   1dca8:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   1dcac:	bf08      	it	eq
   1dcae:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
   1dcb2:	d009      	beq.n	1dcc8 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   1dcb4:	f003 f888 	bl	20dc8 <sys_clock_tick_get>
   1dcb8:	ebba 0700 	subs.w	r7, sl, r0
   1dcbc:	eb6b 0601 	sbc.w	r6, fp, r1
   1dcc0:	2e00      	cmp	r6, #0
   1dcc2:	bfbc      	itt	lt
   1dcc4:	2700      	movlt	r7, #0
   1dcc6:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1dcc8:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1dcca:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1dd5c <net_buf_alloc_len+0x114>
   1dcce:	2228      	movs	r2, #40	; 0x28
   1dcd0:	fb02 8303 	mla	r3, r2, r3, r8
   1dcd4:	a901      	add	r1, sp, #4
   1dcd6:	6a1b      	ldr	r3, [r3, #32]
   1dcd8:	681b      	ldr	r3, [r3, #0]
   1dcda:	463a      	mov	r2, r7
   1dcdc:	681d      	ldr	r5, [r3, #0]
   1dcde:	4620      	mov	r0, r4
   1dce0:	4633      	mov	r3, r6
   1dce2:	47a8      	blx	r5
   1dce4:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1dce6:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1dce8:	bb70      	cbnz	r0, 1dd48 <net_buf_alloc_len+0x100>
	k_lifo_put(&pool->free, buf);
   1dcea:	79a0      	ldrb	r0, [r4, #6]
   1dcec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1dcf0:	4621      	mov	r1, r4
   1dcf2:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   1dcf6:	f00a ff68 	bl	28bca <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1dcfa:	462c      	mov	r4, r5
}
   1dcfc:	e01f      	b.n	1dd3e <net_buf_alloc_len+0xf6>
		uninit_count = pool->uninit_count--;
   1dcfe:	8b6b      	ldrh	r3, [r5, #26]
   1dd00:	1e5a      	subs	r2, r3, #1
   1dd02:	836a      	strh	r2, [r5, #26]
   1dd04:	f381 8811 	msr	BASEPRI, r1
   1dd08:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   1dd0c:	8b2c      	ldrh	r4, [r5, #24]
   1dd0e:	1ae3      	subs	r3, r4, r3
   1dd10:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   1dd12:	2018      	movs	r0, #24
   1dd14:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   1dd18:	4810      	ldr	r0, [pc, #64]	; (1dd5c <net_buf_alloc_len+0x114>)
   1dd1a:	4b11      	ldr	r3, [pc, #68]	; (1dd60 <net_buf_alloc_len+0x118>)
   1dd1c:	1a2d      	subs	r5, r5, r0
   1dd1e:	10ed      	asrs	r5, r5, #3
   1dd20:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1dd22:	71a5      	strb	r5, [r4, #6]
		goto success;
   1dd24:	e7ba      	b.n	1dc9c <net_buf_alloc_len+0x54>
   1dd26:	f381 8811 	msr	BASEPRI, r1
   1dd2a:	f3bf 8f6f 	isb	sy
   1dd2e:	464a      	mov	r2, r9
   1dd30:	4643      	mov	r3, r8
   1dd32:	4628      	mov	r0, r5
   1dd34:	f002 f93a 	bl	1ffac <z_impl_k_queue_get>
	if (!buf) {
   1dd38:	4604      	mov	r4, r0
   1dd3a:	2800      	cmp	r0, #0
   1dd3c:	d1ae      	bne.n	1dc9c <net_buf_alloc_len+0x54>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1dd3e:	4620      	mov	r0, r4
   1dd40:	b003      	add	sp, #12
   1dd42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   1dd46:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   1dd48:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1dd4a:	2201      	movs	r2, #1
	buf->frags = NULL;
   1dd4c:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1dd4e:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   1dd50:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   1dd52:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1dd54:	6923      	ldr	r3, [r4, #16]
   1dd56:	81e2      	strh	r2, [r4, #14]
   1dd58:	60a3      	str	r3, [r4, #8]
	return buf;
   1dd5a:	e7f0      	b.n	1dd3e <net_buf_alloc_len+0xf6>
   1dd5c:	20001188 	.word	0x20001188
   1dd60:	cccccccd 	.word	0xcccccccd

0001dd64 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1dd64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dd68:	4d17      	ldr	r5, [pc, #92]	; (1ddc8 <net_buf_unref+0x64>)
   1dd6a:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1dd6c:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1dd6e:	2728      	movs	r7, #40	; 0x28
	while (buf) {
   1dd70:	b90c      	cbnz	r4, 1dd76 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1dd72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1dd76:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1dd78:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   1dd7c:	3b01      	subs	r3, #1
   1dd7e:	b2db      	uxtb	r3, r3
   1dd80:	7123      	strb	r3, [r4, #4]
   1dd82:	2b00      	cmp	r3, #0
   1dd84:	d1f5      	bne.n	1dd72 <net_buf_unref+0xe>
		if (buf->__buf) {
   1dd86:	6921      	ldr	r1, [r4, #16]
   1dd88:	b159      	cbz	r1, 1dda2 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1dd8a:	7963      	ldrb	r3, [r4, #5]
   1dd8c:	079b      	lsls	r3, r3, #30
   1dd8e:	d407      	bmi.n	1dda0 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1dd90:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   1dd92:	fb07 5303 	mla	r3, r7, r3, r5
   1dd96:	4620      	mov	r0, r4
   1dd98:	6a1b      	ldr	r3, [r3, #32]
   1dd9a:	681b      	ldr	r3, [r3, #0]
   1dd9c:	689b      	ldr	r3, [r3, #8]
   1dd9e:	4798      	blx	r3
			buf->__buf = NULL;
   1dda0:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   1dda2:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1dda4:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   1dda6:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1ddaa:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   1ddac:	69db      	ldr	r3, [r3, #28]
   1ddae:	b11b      	cbz	r3, 1ddb8 <net_buf_unref+0x54>
			pool->destroy(buf);
   1ddb0:	4620      	mov	r0, r4
   1ddb2:	4798      	blx	r3
{
   1ddb4:	4644      	mov	r4, r8
   1ddb6:	e7db      	b.n	1dd70 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   1ddb8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1ddbc:	4621      	mov	r1, r4
   1ddbe:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   1ddc2:	f00a ff02 	bl	28bca <k_queue_prepend>
}
   1ddc6:	e7f5      	b.n	1ddb4 <net_buf_unref+0x50>
   1ddc8:	20001188 	.word	0x20001188

0001ddcc <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   1ddcc:	4b08      	ldr	r3, [pc, #32]	; (1ddf0 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1ddce:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1ddd0:	1ac3      	subs	r3, r0, r3
{
   1ddd2:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1ddd4:	4907      	ldr	r1, [pc, #28]	; (1ddf4 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   1ddd6:	109b      	asrs	r3, r3, #2
{
   1ddd8:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1ddda:	4359      	muls	r1, r3
   1dddc:	4806      	ldr	r0, [pc, #24]	; (1ddf8 <onoff_stop+0x2c>)
   1ddde:	2240      	movs	r2, #64	; 0x40
   1dde0:	f00a fb0b 	bl	283fa <stop>
	notify(mgr, res);
   1dde4:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1dde6:	4601      	mov	r1, r0
	notify(mgr, res);
   1dde8:	4620      	mov	r0, r4
}
   1ddea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1ddee:	4718      	bx	r3
   1ddf0:	20003468 	.word	0x20003468
   1ddf4:	b6db6db7 	.word	0xb6db6db7
   1ddf8:	00029510 	.word	0x00029510

0001ddfc <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1ddfc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1ddfe:	4c0c      	ldr	r4, [pc, #48]	; (1de30 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1de00:	4a0c      	ldr	r2, [pc, #48]	; (1de34 <onoff_start+0x38>)
   1de02:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   1de04:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1de06:	9300      	str	r3, [sp, #0]
{
   1de08:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1de0a:	460b      	mov	r3, r1
   1de0c:	490a      	ldr	r1, [pc, #40]	; (1de38 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   1de0e:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1de10:	4361      	muls	r1, r4
{
   1de12:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1de14:	4809      	ldr	r0, [pc, #36]	; (1de3c <onoff_start+0x40>)
   1de16:	f00a fb1d 	bl	28454 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1de1a:	1e01      	subs	r1, r0, #0
   1de1c:	da05      	bge.n	1de2a <onoff_start+0x2e>
		notify(mgr, err);
   1de1e:	4630      	mov	r0, r6
   1de20:	462b      	mov	r3, r5
	}
}
   1de22:	b002      	add	sp, #8
   1de24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   1de28:	4718      	bx	r3
}
   1de2a:	b002      	add	sp, #8
   1de2c:	bd70      	pop	{r4, r5, r6, pc}
   1de2e:	bf00      	nop
   1de30:	20003468 	.word	0x20003468
   1de34:	000284c3 	.word	0x000284c3
   1de38:	b6db6db7 	.word	0xb6db6db7
   1de3c:	00029510 	.word	0x00029510

0001de40 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1de40:	2200      	movs	r2, #0
{
   1de42:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1de44:	2101      	movs	r1, #1
{
   1de46:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1de48:	4610      	mov	r0, r2
   1de4a:	f7e6 faf1 	bl	4430 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   1de4e:	2000      	movs	r0, #0
   1de50:	f7e6 fabc 	bl	43cc <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1de54:	480f      	ldr	r0, [pc, #60]	; (1de94 <clk_init+0x54>)
   1de56:	f001 fae9 	bl	1f42c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1de5a:	4b0f      	ldr	r3, [pc, #60]	; (1de98 <clk_init+0x58>)
   1de5c:	4298      	cmp	r0, r3
   1de5e:	d115      	bne.n	1de8c <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1de60:	f00a fcbe 	bl	287e0 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   1de64:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1de66:	490d      	ldr	r1, [pc, #52]	; (1de9c <clk_init+0x5c>)
   1de68:	4630      	mov	r0, r6
   1de6a:	f003 fa68 	bl	2133e <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1de6e:	2800      	cmp	r0, #0
   1de70:	db0b      	blt.n	1de8a <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
   1de72:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1de74:	4909      	ldr	r1, [pc, #36]	; (1de9c <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1de76:	2501      	movs	r5, #1
   1de78:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1de7a:	f104 001c 	add.w	r0, r4, #28
   1de7e:	f003 fa5e 	bl	2133e <onoff_manager_init>
		if (err < 0) {
   1de82:	2800      	cmp	r0, #0
   1de84:	db01      	blt.n	1de8a <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1de86:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   1de88:	2000      	movs	r0, #0
}
   1de8a:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1de8c:	f06f 0004 	mvn.w	r0, #4
   1de90:	e7fb      	b.n	1de8a <clk_init+0x4a>
   1de92:	bf00      	nop
   1de94:	0001ded5 	.word	0x0001ded5
   1de98:	0bad0000 	.word	0x0bad0000
   1de9c:	0002a784 	.word	0x0002a784

0001dea0 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1dea0:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1dea2:	230c      	movs	r3, #12
   1dea4:	4809      	ldr	r0, [pc, #36]	; (1decc <clkstarted_handle.constprop.0+0x2c>)
   1dea6:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   1dea8:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   1deaa:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   1deac:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   1deb0:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   1deb2:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   1deb4:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   1deb6:	4418      	add	r0, r3
   1deb8:	f00a fa8c 	bl	283d4 <set_on_state>
	if (callback) {
   1debc:	b12d      	cbz	r5, 1deca <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1debe:	4632      	mov	r2, r6
   1dec0:	462b      	mov	r3, r5
   1dec2:	4803      	ldr	r0, [pc, #12]	; (1ded0 <clkstarted_handle.constprop.0+0x30>)
}
   1dec4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1dec8:	4718      	bx	r3
}
   1deca:	bd70      	pop	{r4, r5, r6, pc}
   1decc:	20003468 	.word	0x20003468
   1ded0:	00029510 	.word	0x00029510

0001ded4 <clock_event_handler>:
	switch (event) {
   1ded4:	b110      	cbz	r0, 1dedc <clock_event_handler+0x8>
   1ded6:	2801      	cmp	r0, #1
   1ded8:	d004      	beq.n	1dee4 <clock_event_handler+0x10>
   1deda:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1dedc:	4b03      	ldr	r3, [pc, #12]	; (1deec <clock_event_handler+0x18>)
   1dede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1dee0:	075b      	lsls	r3, r3, #29
   1dee2:	d101      	bne.n	1dee8 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1dee4:	f7ff bfdc 	b.w	1dea0 <clkstarted_handle.constprop.0>
}
   1dee8:	4770      	bx	lr
   1deea:	bf00      	nop
   1deec:	20003468 	.word	0x20003468

0001def0 <generic_hfclk_start>:
{
   1def0:	b508      	push	{r3, lr}
	__asm__ volatile(
   1def2:	f04f 0320 	mov.w	r3, #32
   1def6:	f3ef 8111 	mrs	r1, BASEPRI
   1defa:	f383 8812 	msr	BASEPRI_MAX, r3
   1defe:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1df02:	4a12      	ldr	r2, [pc, #72]	; (1df4c <generic_hfclk_start+0x5c>)
   1df04:	6813      	ldr	r3, [r2, #0]
   1df06:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   1df0a:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   1df0e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1df10:	d00c      	beq.n	1df2c <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1df12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1df16:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1df1a:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1df1e:	f013 0301 	ands.w	r3, r3, #1
   1df22:	d003      	beq.n	1df2c <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   1df24:	480a      	ldr	r0, [pc, #40]	; (1df50 <generic_hfclk_start+0x60>)
   1df26:	f00a fa55 	bl	283d4 <set_on_state>
			already_started = true;
   1df2a:	2301      	movs	r3, #1
	__asm__ volatile(
   1df2c:	f381 8811 	msr	BASEPRI, r1
   1df30:	f3bf 8f6f 	isb	sy
	if (already_started) {
   1df34:	b123      	cbz	r3, 1df40 <generic_hfclk_start+0x50>
}
   1df36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1df3a:	2000      	movs	r0, #0
   1df3c:	f7ff bfb0 	b.w	1dea0 <clkstarted_handle.constprop.0>
}
   1df40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1df44:	2001      	movs	r0, #1
   1df46:	f001 ba81 	b.w	1f44c <nrfx_clock_start>
   1df4a:	bf00      	nop
   1df4c:	200034b8 	.word	0x200034b8
   1df50:	200034a8 	.word	0x200034a8

0001df54 <api_blocking_start>:
{
   1df54:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1df56:	2200      	movs	r2, #0
   1df58:	2301      	movs	r3, #1
   1df5a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1df5e:	ab04      	add	r3, sp, #16
   1df60:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1df64:	4a09      	ldr	r2, [pc, #36]	; (1df8c <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1df66:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1df6a:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1df6c:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1df70:	f00a faa0 	bl	284b4 <api_start>
	if (err < 0) {
   1df74:	2800      	cmp	r0, #0
   1df76:	db05      	blt.n	1df84 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1df78:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1df7c:	2300      	movs	r3, #0
   1df7e:	4668      	mov	r0, sp
   1df80:	f002 f86e 	bl	20060 <z_impl_k_sem_take>
}
   1df84:	b007      	add	sp, #28
   1df86:	f85d fb04 	ldr.w	pc, [sp], #4
   1df8a:	bf00      	nop
   1df8c:	000284db 	.word	0x000284db

0001df90 <lfclk_start>:
{
   1df90:	b510      	push	{r4, lr}
	if (!once) {
   1df92:	4c07      	ldr	r4, [pc, #28]	; (1dfb0 <lfclk_start+0x20>)
   1df94:	7823      	ldrb	r3, [r4, #0]
   1df96:	b92b      	cbnz	r3, 1dfa4 <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
   1df98:	f44f 70a5 	mov.w	r0, #330	; 0x14a
   1df9c:	f00b f8cc 	bl	29138 <z_impl_k_busy_wait>
		once = true;
   1dfa0:	2301      	movs	r3, #1
   1dfa2:	7023      	strb	r3, [r4, #0]
}
   1dfa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1dfa8:	2000      	movs	r0, #0
   1dfaa:	f001 ba4f 	b.w	1f44c <nrfx_clock_start>
   1dfae:	bf00      	nop
   1dfb0:	200038f8 	.word	0x200038f8

0001dfb4 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1dfb4:	4b09      	ldr	r3, [pc, #36]	; (1dfdc <generic_hfclk_stop+0x28>)
   1dfb6:	f3bf 8f5b 	dmb	ish
   1dfba:	e853 2f00 	ldrex	r2, [r3]
   1dfbe:	f022 0102 	bic.w	r1, r2, #2
   1dfc2:	e843 1000 	strex	r0, r1, [r3]
   1dfc6:	2800      	cmp	r0, #0
   1dfc8:	d1f7      	bne.n	1dfba <generic_hfclk_stop+0x6>
   1dfca:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   1dfce:	07d3      	lsls	r3, r2, #31
   1dfd0:	d402      	bmi.n	1dfd8 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1dfd2:	2001      	movs	r0, #1
   1dfd4:	f001 ba82 	b.w	1f4dc <nrfx_clock_stop>
}
   1dfd8:	4770      	bx	lr
   1dfda:	bf00      	nop
   1dfdc:	200034b8 	.word	0x200034b8

0001dfe0 <z_nrf_clock_control_get_onoff>:
}
   1dfe0:	4a02      	ldr	r2, [pc, #8]	; (1dfec <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
   1dfe2:	b2c3      	uxtb	r3, r0
}
   1dfe4:	201c      	movs	r0, #28
   1dfe6:	fb03 2000 	mla	r0, r3, r0, r2
   1dfea:	4770      	bx	lr
   1dfec:	20003468 	.word	0x20003468

0001dff0 <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1dff0:	4b09      	ldr	r3, [pc, #36]	; (1e018 <z_nrf_clock_bt_ctlr_hf_request+0x28>)
   1dff2:	f3bf 8f5b 	dmb	ish
   1dff6:	e853 2f00 	ldrex	r2, [r3]
   1dffa:	f042 0101 	orr.w	r1, r2, #1
   1dffe:	e843 1000 	strex	r0, r1, [r3]
   1e002:	2800      	cmp	r0, #0
   1e004:	d1f7      	bne.n	1dff6 <z_nrf_clock_bt_ctlr_hf_request+0x6>
   1e006:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
   1e00a:	0793      	lsls	r3, r2, #30
   1e00c:	d402      	bmi.n	1e014 <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1e00e:	2001      	movs	r0, #1
   1e010:	f001 ba1c 	b.w	1f44c <nrfx_clock_start>
}
   1e014:	4770      	bx	lr
   1e016:	bf00      	nop
   1e018:	200034b8 	.word	0x200034b8

0001e01c <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e01c:	4b09      	ldr	r3, [pc, #36]	; (1e044 <z_nrf_clock_bt_ctlr_hf_release+0x28>)
   1e01e:	f3bf 8f5b 	dmb	ish
   1e022:	e853 2f00 	ldrex	r2, [r3]
   1e026:	f022 0101 	bic.w	r1, r2, #1
   1e02a:	e843 1000 	strex	r0, r1, [r3]
   1e02e:	2800      	cmp	r0, #0
   1e030:	d1f7      	bne.n	1e022 <z_nrf_clock_bt_ctlr_hf_release+0x6>
   1e032:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
   1e036:	0793      	lsls	r3, r2, #30
   1e038:	d402      	bmi.n	1e040 <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1e03a:	2001      	movs	r0, #1
   1e03c:	f001 ba4e 	b.w	1f4dc <nrfx_clock_stop>
}
   1e040:	4770      	bx	lr
   1e042:	bf00      	nop
   1e044:	200034b8 	.word	0x200034b8

0001e048 <z_nrf_clock_control_lf_on>:
{
   1e048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1e04c:	4939      	ldr	r1, [pc, #228]	; (1e134 <z_nrf_clock_control_lf_on+0xec>)
   1e04e:	f3bf 8f5b 	dmb	ish
   1e052:	4607      	mov	r7, r0
   1e054:	2201      	movs	r2, #1
   1e056:	e851 3f00 	ldrex	r3, [r1]
   1e05a:	e841 2000 	strex	r0, r2, [r1]
   1e05e:	2800      	cmp	r0, #0
   1e060:	d1f9      	bne.n	1e056 <z_nrf_clock_control_lf_on+0xe>
   1e062:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1e066:	b933      	cbnz	r3, 1e076 <z_nrf_clock_control_lf_on+0x2e>
   1e068:	4933      	ldr	r1, [pc, #204]	; (1e138 <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
   1e06a:	4834      	ldr	r0, [pc, #208]	; (1e13c <z_nrf_clock_control_lf_on+0xf4>)
   1e06c:	604b      	str	r3, [r1, #4]
   1e06e:	60cb      	str	r3, [r1, #12]
   1e070:	608a      	str	r2, [r1, #8]
   1e072:	f003 f977 	bl	21364 <onoff_request>
	switch (start_mode) {
   1e076:	1e7b      	subs	r3, r7, #1
   1e078:	2b01      	cmp	r3, #1
   1e07a:	d82f      	bhi.n	1e0dc <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1e07c:	2f01      	cmp	r7, #1
   1e07e:	d107      	bne.n	1e090 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1e080:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e084:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1e088:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1e08c:	2b01      	cmp	r3, #1
   1e08e:	d025      	beq.n	1e0dc <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1e090:	f00a fcd1 	bl	28a36 <k_is_in_isr>
   1e094:	4604      	mov	r4, r0
   1e096:	b918      	cbnz	r0, 1e0a0 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
   1e098:	4b29      	ldr	r3, [pc, #164]	; (1e140 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
   1e09a:	781b      	ldrb	r3, [r3, #0]
   1e09c:	2b00      	cmp	r3, #0
   1e09e:	d141      	bne.n	1e124 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
   1e0a0:	f04f 0320 	mov.w	r3, #32
   1e0a4:	f3ef 8611 	mrs	r6, BASEPRI
   1e0a8:	f383 8812 	msr	BASEPRI_MAX, r3
   1e0ac:	f3bf 8f6f 	isb	sy
   1e0b0:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e0b2:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1e144 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1e0b6:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   1e0ba:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1e0be:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   1e0c2:	03d2      	lsls	r2, r2, #15
   1e0c4:	d50c      	bpl.n	1e0e0 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1e0c6:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1e0ca:	2b01      	cmp	r3, #1
   1e0cc:	d001      	beq.n	1e0d2 <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1e0ce:	2f01      	cmp	r7, #1
   1e0d0:	d106      	bne.n	1e0e0 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
   1e0d2:	b30c      	cbz	r4, 1e118 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
   1e0d4:	f386 8811 	msr	BASEPRI, r6
   1e0d8:	f3bf 8f6f 	isb	sy
}
   1e0dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1e0e0:	b1ac      	cbz	r4, 1e10e <z_nrf_clock_control_lf_on+0xc6>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1e0e2:	4630      	mov	r0, r6
   1e0e4:	f7e6 f930 	bl	4348 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1e0e8:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1e0ec:	2b00      	cmp	r3, #0
   1e0ee:	d1e4      	bne.n	1e0ba <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1e0f0:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1e0f4:	2a00      	cmp	r2, #0
   1e0f6:	d0e0      	beq.n	1e0ba <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e0f8:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1e0fc:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   1e100:	2301      	movs	r3, #1
   1e102:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
   1e106:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e10a:	60ab      	str	r3, [r5, #8]
}
   1e10c:	e7d5      	b.n	1e0ba <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
   1e10e:	2100      	movs	r1, #0
   1e110:	2021      	movs	r0, #33	; 0x21
   1e112:	f002 fc63 	bl	209dc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1e116:	e7e7      	b.n	1e0e8 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
   1e118:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e11c:	2202      	movs	r2, #2
   1e11e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1e122:	e7db      	b.n	1e0dc <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
   1e124:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e128:	2202      	movs	r2, #2
   1e12a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   1e12e:	4606      	mov	r6, r0
}
   1e130:	e7bf      	b.n	1e0b2 <z_nrf_clock_control_lf_on+0x6a>
   1e132:	bf00      	nop
   1e134:	200034bc 	.word	0x200034bc
   1e138:	20003458 	.word	0x20003458
   1e13c:	20003484 	.word	0x20003484
   1e140:	20003d0b 	.word	0x20003d0b
   1e144:	e000e100 	.word	0xe000e100

0001e148 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
   1e148:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
   1e14a:	4c04      	ldr	r4, [pc, #16]	; (1e15c <rtt_console_init+0x14>)
   1e14c:	4620      	mov	r0, r4
   1e14e:	f7e3 ff21 	bl	1f94 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
   1e152:	4620      	mov	r0, r4
   1e154:	f7e6 fde4 	bl	4d20 <__stdout_hook_install>

	return 0;
}
   1e158:	2000      	movs	r0, #0
   1e15a:	bd10      	pop	{r4, pc}
   1e15c:	0001e161 	.word	0x0001e161

0001e160 <rtt_console_out>:
{
   1e160:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   1e164:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1e1c4 <rtt_console_out+0x64>
   1e168:	4e17      	ldr	r6, [pc, #92]	; (1e1c8 <rtt_console_out+0x68>)
	char c = (char)character;
   1e16a:	f88d 0007 	strb.w	r0, [sp, #7]
{
   1e16e:	4604      	mov	r4, r0
	char c = (char)character;
   1e170:	2503      	movs	r5, #3
   1e172:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e176:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e17a:	4640      	mov	r0, r8
   1e17c:	f001 fe5c 	bl	1fe38 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
   1e180:	2201      	movs	r2, #1
   1e182:	f10d 0107 	add.w	r1, sp, #7
   1e186:	2000      	movs	r0, #0
   1e188:	f001 fb60 	bl	1f84c <SEGGER_RTT_WriteNoLock>
   1e18c:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
   1e18e:	4640      	mov	r0, r8
   1e190:	f001 feca 	bl	1ff28 <z_impl_k_mutex_unlock>
		if (cnt) {
   1e194:	b12f      	cbz	r7, 1e1a2 <rtt_console_out+0x42>
			host_present = true;
   1e196:	2301      	movs	r3, #1
   1e198:	7033      	strb	r3, [r6, #0]
}
   1e19a:	4620      	mov	r0, r4
   1e19c:	b002      	add	sp, #8
   1e19e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
   1e1a2:	7833      	ldrb	r3, [r6, #0]
   1e1a4:	2b00      	cmp	r3, #0
   1e1a6:	d0f8      	beq.n	1e19a <rtt_console_out+0x3a>
			if (max_cnt) {
   1e1a8:	3d01      	subs	r5, #1
   1e1aa:	d008      	beq.n	1e1be <rtt_console_out+0x5e>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
   1e1ac:	f00a fc43 	bl	28a36 <k_is_in_isr>
   1e1b0:	2800      	cmp	r0, #0
   1e1b2:	d1de      	bne.n	1e172 <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
   1e1b4:	2100      	movs	r1, #0
   1e1b6:	2042      	movs	r0, #66	; 0x42
   1e1b8:	f002 fc10 	bl	209dc <z_impl_k_sleep>
   1e1bc:	e7d9      	b.n	1e172 <rtt_console_out+0x12>
				host_present = false;
   1e1be:	7035      	strb	r5, [r6, #0]
   1e1c0:	e7eb      	b.n	1e19a <rtt_console_out+0x3a>
   1e1c2:	bf00      	nop
   1e1c4:	200010d0 	.word	0x200010d0
   1e1c8:	200038f9 	.word	0x200038f9

0001e1cc <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1e1cc:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   1e1ce:	4b09      	ldr	r3, [pc, #36]	; (1e1f4 <gpio_nrfx_init+0x28>)
   1e1d0:	781a      	ldrb	r2, [r3, #0]
   1e1d2:	b96a      	cbnz	r2, 1e1f0 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   1e1d4:	2101      	movs	r1, #1
   1e1d6:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1e1d8:	2006      	movs	r0, #6
   1e1da:	2105      	movs	r1, #5
   1e1dc:	f7e6 f928 	bl	4430 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   1e1e0:	2006      	movs	r0, #6
   1e1e2:	f7e6 f8f3 	bl	43cc <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1e1e6:	4b04      	ldr	r3, [pc, #16]	; (1e1f8 <gpio_nrfx_init+0x2c>)
   1e1e8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1e1ec:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   1e1f0:	2000      	movs	r0, #0
   1e1f2:	bd08      	pop	{r3, pc}
   1e1f4:	200038fa 	.word	0x200038fa
   1e1f8:	40006000 	.word	0x40006000

0001e1fc <gpio_nrfx_pin_interrupt_configure>:
{
   1e1fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1e1fe:	4617      	mov	r7, r2
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1e200:	6842      	ldr	r2, [r0, #4]
	return port->data;
   1e202:	6906      	ldr	r6, [r0, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1e204:	7a12      	ldrb	r2, [r2, #8]
   1e206:	f001 041f 	and.w	r4, r1, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   1e20a:	f5b7 3fa0 	cmp.w	r7, #81920	; 0x14000
{
   1e20e:	460d      	mov	r5, r1
   1e210:	ea44 1442 	orr.w	r4, r4, r2, lsl #5
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   1e214:	d10c      	bne.n	1e230 <gpio_nrfx_pin_interrupt_configure+0x34>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1e216:	f004 021f 	and.w	r2, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1e21a:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   1e21e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   1e222:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1e226:	07d0      	lsls	r0, r2, #31
   1e228:	d507      	bpl.n	1e23a <gpio_nrfx_pin_interrupt_configure+0x3e>
		return -ENOTSUP;
   1e22a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1e22e:	e09a      	b.n	1e366 <gpio_nrfx_pin_interrupt_configure+0x16a>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1e230:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
   1e234:	68f1      	ldr	r1, [r6, #12]
   1e236:	f000 8098 	beq.w	1e36a <gpio_nrfx_pin_interrupt_configure+0x16e>
   1e23a:	68f2      	ldr	r2, [r6, #12]
   1e23c:	2101      	movs	r1, #1
   1e23e:	40a9      	lsls	r1, r5
   1e240:	4311      	orrs	r1, r2
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1e242:	6972      	ldr	r2, [r6, #20]
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1e244:	60f1      	str	r1, [r6, #12]
   1e246:	2101      	movs	r1, #1
   1e248:	40a9      	lsls	r1, r5
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1e24a:	f5b7 3fa0 	cmp.w	r7, #81920	; 0x14000
   1e24e:	bf0c      	ite	eq
   1e250:	430a      	orreq	r2, r1
   1e252:	438a      	bicne	r2, r1
   1e254:	6172      	str	r2, [r6, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1e256:	69b2      	ldr	r2, [r6, #24]
   1e258:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   1e25c:	bf0c      	ite	eq
   1e25e:	430a      	orreq	r2, r1
   1e260:	438a      	bicne	r2, r1
   1e262:	61b2      	str	r2, [r6, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1e264:	6932      	ldr	r2, [r6, #16]
   1e266:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   1e26a:	bf0c      	ite	eq
   1e26c:	4311      	orreq	r1, r2
   1e26e:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   1e272:	4a4a      	ldr	r2, [pc, #296]	; (1e39c <gpio_nrfx_pin_interrupt_configure+0x1a0>)
   1e274:	6131      	str	r1, [r6, #16]
   1e276:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1e27a:	2000      	movs	r0, #0
   1e27c:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1e27e:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   1e282:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   1e286:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   1e28a:	428c      	cmp	r4, r1
   1e28c:	d172      	bne.n	1e374 <gpio_nrfx_pin_interrupt_configure+0x178>
		    && (intenset & BIT(i))) {
   1e28e:	fa23 f100 	lsr.w	r1, r3, r0
   1e292:	07c9      	lsls	r1, r1, #31
   1e294:	d56e      	bpl.n	1e374 <gpio_nrfx_pin_interrupt_configure+0x178>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   1e296:	0083      	lsls	r3, r0, #2
   1e298:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e29c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1e2a0:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   1e2a4:	f021 0101 	bic.w	r1, r1, #1
   1e2a8:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   1e2ac:	2301      	movs	r3, #1
   1e2ae:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   1e2b0:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   1e2b4:	b2c0      	uxtb	r0, r0
   1e2b6:	f001 f981 	bl	1f5bc <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1e2ba:	4620      	mov	r0, r4
   1e2bc:	2100      	movs	r1, #0
   1e2be:	f00a f90f 	bl	284e0 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   1e2c2:	68f0      	ldr	r0, [r6, #12]
   1e2c4:	40e8      	lsrs	r0, r5
   1e2c6:	f010 0001 	ands.w	r0, r0, #1
   1e2ca:	d04c      	beq.n	1e366 <gpio_nrfx_pin_interrupt_configure+0x16a>
		if (data->trig_edge & BIT(pin)) {
   1e2cc:	6970      	ldr	r0, [r6, #20]
   1e2ce:	40e8      	lsrs	r0, r5
   1e2d0:	f010 0201 	ands.w	r2, r0, #1
   1e2d4:	d055      	beq.n	1e382 <gpio_nrfx_pin_interrupt_configure+0x186>
				if (data->double_edge & BIT(pin)) {
   1e2d6:	69b3      	ldr	r3, [r6, #24]
   1e2d8:	40eb      	lsrs	r3, r5
   1e2da:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1e2dc:	bf5f      	itttt	pl
   1e2de:	6931      	ldrpl	r1, [r6, #16]
   1e2e0:	fa21 f505 	lsrpl.w	r5, r1, r5
   1e2e4:	f005 0501 	andpl.w	r5, r5, #1
   1e2e8:	f1c5 0502 	rsbpl	r5, r5, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   1e2ec:	f10d 0007 	add.w	r0, sp, #7
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1e2f0:	bf54      	ite	pl
   1e2f2:	b2ed      	uxtbpl	r5, r5
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
   1e2f4:	2503      	movmi	r5, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   1e2f6:	f001 f981 	bl	1f5fc <nrfx_gpiote_channel_alloc>
   1e2fa:	4b29      	ldr	r3, [pc, #164]	; (1e3a0 <gpio_nrfx_pin_interrupt_configure+0x1a4>)
   1e2fc:	4298      	cmp	r0, r3
   1e2fe:	d13d      	bne.n	1e37c <gpio_nrfx_pin_interrupt_configure+0x180>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   1e300:	f89d 2007 	ldrb.w	r2, [sp, #7]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1e304:	0093      	lsls	r3, r2, #2
   1e306:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e30a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1e30e:	0224      	lsls	r4, r4, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1e310:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   1e314:	f421 3147 	bic.w	r1, r1, #203776	; 0x31c00
   1e318:	f421 7140 	bic.w	r1, r1, #768	; 0x300
   1e31c:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1e320:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   1e324:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
   1e328:	430c      	orrs	r4, r1
   1e32a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   1e32e:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   1e332:	0093      	lsls	r3, r2, #2
   1e334:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e338:	f503 43c2 	add.w	r3, r3, #24832	; 0x6100
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1e33c:	2000      	movs	r0, #0
   1e33e:	6018      	str	r0, [r3, #0]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
   1e340:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1e344:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1e346:	008b      	lsls	r3, r1, #2
   1e348:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e34c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1e350:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1e354:	f042 0201 	orr.w	r2, r2, #1
   1e358:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
   1e35c:	4a0f      	ldr	r2, [pc, #60]	; (1e39c <gpio_nrfx_pin_interrupt_configure+0x1a0>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   1e35e:	2301      	movs	r3, #1
   1e360:	408b      	lsls	r3, r1
   1e362:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1e366:	b003      	add	sp, #12
   1e368:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1e36a:	2201      	movs	r2, #1
   1e36c:	40aa      	lsls	r2, r5
   1e36e:	ea21 0102 	bic.w	r1, r1, r2
   1e372:	e766      	b.n	1e242 <gpio_nrfx_pin_interrupt_configure+0x46>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1e374:	3001      	adds	r0, #1
   1e376:	2808      	cmp	r0, #8
   1e378:	d181      	bne.n	1e27e <gpio_nrfx_pin_interrupt_configure+0x82>
   1e37a:	e79e      	b.n	1e2ba <gpio_nrfx_pin_interrupt_configure+0xbe>
		return -ENODEV;
   1e37c:	f06f 0012 	mvn.w	r0, #18
   1e380:	e7f1      	b.n	1e366 <gpio_nrfx_pin_interrupt_configure+0x16a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1e382:	6931      	ldr	r1, [r6, #16]
   1e384:	40e9      	lsrs	r1, r5
   1e386:	f001 0101 	and.w	r1, r1, #1
   1e38a:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1e38e:	4620      	mov	r0, r4
   1e390:	b2c9      	uxtb	r1, r1
   1e392:	f00a f8a5 	bl	284e0 <nrf_gpio_cfg_sense_set>
	int res = 0;
   1e396:	4610      	mov	r0, r2
   1e398:	e7e5      	b.n	1e366 <gpio_nrfx_pin_interrupt_configure+0x16a>
   1e39a:	bf00      	nop
   1e39c:	40006000 	.word	0x40006000
   1e3a0:	0bad0000 	.word	0x0bad0000

0001e3a4 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1e3a4:	4b2a      	ldr	r3, [pc, #168]	; (1e450 <gpio_nrfx_config+0xac>)
{
   1e3a6:	b570      	push	{r4, r5, r6, lr}
	return port->config;
   1e3a8:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1e3aa:	482a      	ldr	r0, [pc, #168]	; (1e454 <gpio_nrfx_config+0xb0>)
   1e3ac:	4013      	ands	r3, r2
   1e3ae:	4283      	cmp	r3, r0
   1e3b0:	d03e      	beq.n	1e430 <gpio_nrfx_config+0x8c>
   1e3b2:	d80d      	bhi.n	1e3d0 <gpio_nrfx_config+0x2c>
   1e3b4:	2b06      	cmp	r3, #6
   1e3b6:	d015      	beq.n	1e3e4 <gpio_nrfx_config+0x40>
   1e3b8:	d805      	bhi.n	1e3c6 <gpio_nrfx_config+0x22>
   1e3ba:	b19b      	cbz	r3, 1e3e4 <gpio_nrfx_config+0x40>
   1e3bc:	2b02      	cmp	r3, #2
   1e3be:	d039      	beq.n	1e434 <gpio_nrfx_config+0x90>
   1e3c0:	f06f 0015 	mvn.w	r0, #21
   1e3c4:	e033      	b.n	1e42e <gpio_nrfx_config+0x8a>
   1e3c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1e3ca:	d1f9      	bne.n	1e3c0 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   1e3cc:	2301      	movs	r3, #1
   1e3ce:	e009      	b.n	1e3e4 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1e3d0:	4821      	ldr	r0, [pc, #132]	; (1e458 <gpio_nrfx_config+0xb4>)
   1e3d2:	4283      	cmp	r3, r0
   1e3d4:	d030      	beq.n	1e438 <gpio_nrfx_config+0x94>
   1e3d6:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1e3da:	d02f      	beq.n	1e43c <gpio_nrfx_config+0x98>
   1e3dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1e3e0:	d1ee      	bne.n	1e3c0 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   1e3e2:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   1e3e4:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
   1e3e6:	bf54      	ite	pl
   1e3e8:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   1e3ec:	2503      	movmi	r5, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1e3ee:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   1e3f2:	f412 7f00 	tst.w	r2, #512	; 0x200
	dir = ((flags & GPIO_OUTPUT) != 0)
   1e3f6:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1e3fa:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   1e3fe:	d007      	beq.n	1e410 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1e400:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1e404:	6876      	ldr	r6, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1e406:	d01b      	beq.n	1e440 <gpio_nrfx_config+0x9c>
			nrf_gpio_port_out_set(reg, BIT(pin));
   1e408:	2201      	movs	r2, #1
   1e40a:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   1e40c:	f8c6 2508 	str.w	r2, [r6, #1288]	; 0x508
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1e410:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
    *p_pin = pin_number & 0x1F;
   1e414:	f001 011f 	and.w	r1, r1, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1e418:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   1e41c:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
   1e420:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1e424:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   1e428:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
   1e42c:	2000      	movs	r0, #0
}
   1e42e:	bd70      	pop	{r4, r5, r6, pc}
		drive = NRF_GPIO_PIN_H0D1;
   1e430:	2307      	movs	r3, #7
   1e432:	e7d7      	b.n	1e3e4 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   1e434:	2304      	movs	r3, #4
   1e436:	e7d5      	b.n	1e3e4 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   1e438:	2305      	movs	r3, #5
   1e43a:	e7d3      	b.n	1e3e4 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   1e43c:	2303      	movs	r3, #3
   1e43e:	e7d1      	b.n	1e3e4 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1e440:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   1e442:	bf42      	ittt	mi
   1e444:	2201      	movmi	r2, #1
   1e446:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   1e448:	f8c6 250c 	strmi.w	r2, [r6, #1292]	; 0x50c
}
   1e44c:	e7e0      	b.n	1e410 <gpio_nrfx_config+0x6c>
   1e44e:	bf00      	nop
   1e450:	00f00006 	.word	0x00f00006
   1e454:	00100006 	.word	0x00100006
   1e458:	00400002 	.word	0x00400002

0001e45c <gpiote_event_handler>:
{
   1e45c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e460:	4b41      	ldr	r3, [pc, #260]	; (1e568 <gpiote_event_handler+0x10c>)
   1e462:	f8d3 517c 	ldr.w	r5, [r3, #380]	; 0x17c
	if (port_event) {
   1e466:	2d00      	cmp	r5, #0
   1e468:	d059      	beq.n	1e51e <gpiote_event_handler+0xc2>
	uint32_t out = data->pin_int_en;
   1e46a:	4b40      	ldr	r3, [pc, #256]	; (1e56c <gpiote_event_handler+0x110>)
    return p_reg->IN;
   1e46c:	f04f 49a0 	mov.w	r9, #1342177280	; 0x50000000
	out &= ~data->trig_edge & ~data->double_edge;
   1e470:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
	uint32_t out = data->pin_int_en;
   1e474:	68df      	ldr	r7, [r3, #12]
   1e476:	f8d9 4510 	ldr.w	r4, [r9, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   1e47a:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
   1e47c:	430a      	orrs	r2, r1
   1e47e:	ea27 0702 	bic.w	r7, r7, r2
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   1e482:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
   1e484:	ea27 0404 	bic.w	r4, r7, r4
	uint32_t check_pins = level_pins;
   1e488:	463a      	mov	r2, r7
	uint32_t bit = 1U << pin;
   1e48a:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   1e48c:	f04f 0800 	mov.w	r8, #0
	while (check_pins) {
   1e490:	bb82      	cbnz	r2, 1e4f4 <gpiote_event_handler+0x98>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1e492:	4b35      	ldr	r3, [pc, #212]	; (1e568 <gpiote_event_handler+0x10c>)
   1e494:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   1e498:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1e49c:	4a34      	ldr	r2, [pc, #208]	; (1e570 <gpiote_event_handler+0x114>)
    return p_reg->INTENSET & mask;
   1e49e:	4832      	ldr	r0, [pc, #200]	; (1e568 <gpiote_event_handler+0x10c>)
   1e4a0:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   1e4a2:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1e4a4:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   1e4a6:	f8d0 1304 	ldr.w	r1, [r0, #772]	; 0x304
   1e4aa:	fa06 fc03 	lsl.w	ip, r6, r3
   1e4ae:	ea1c 0f01 	tst.w	ip, r1
   1e4b2:	d00c      	beq.n	1e4ce <gpiote_event_handler+0x72>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e4b4:	6811      	ldr	r1, [r2, #0]
   1e4b6:	b151      	cbz	r1, 1e4ce <gpiote_event_handler+0x72>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1e4b8:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   1e4bc:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1e4c0:	6017      	str	r7, [r2, #0]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1e4c2:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   1e4c6:	fa06 f101 	lsl.w	r1, r6, r1
   1e4ca:	430c      	orrs	r4, r1
   1e4cc:	6811      	ldr	r1, [r2, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1e4ce:	3301      	adds	r3, #1
   1e4d0:	2b08      	cmp	r3, #8
   1e4d2:	f102 0204 	add.w	r2, r2, #4
   1e4d6:	d1e6      	bne.n	1e4a6 <gpiote_event_handler+0x4a>
	if (fired_triggers[0]) {
   1e4d8:	bb1c      	cbnz	r4, 1e522 <gpiote_event_handler+0xc6>
	if (port_event) {
   1e4da:	b14d      	cbz	r5, 1e4f0 <gpiote_event_handler+0x94>
	uint32_t out = data->pin_int_en;
   1e4dc:	4e23      	ldr	r6, [pc, #140]	; (1e56c <gpiote_event_handler+0x110>)
	out &= ~data->trig_edge & ~data->double_edge;
   1e4de:	e9d6 3105 	ldrd	r3, r1, [r6, #20]
	uint32_t out = data->pin_int_en;
   1e4e2:	68f2      	ldr	r2, [r6, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1e4e4:	430b      	orrs	r3, r1
   1e4e6:	ea22 0203 	bic.w	r2, r2, r3
	uint32_t bit = 1U << pin;
   1e4ea:	2401      	movs	r4, #1
	uint32_t pin = 0U;
   1e4ec:	2500      	movs	r5, #0
	while (level_pins) {
   1e4ee:	bb4a      	cbnz	r2, 1e544 <gpiote_event_handler+0xe8>
}
   1e4f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (check_pins & bit) {
   1e4f4:	4216      	tst	r6, r2
   1e4f6:	d00e      	beq.n	1e516 <gpiote_event_handler+0xba>
			if (!(level_pins & bit)) {
   1e4f8:	423e      	tst	r6, r7
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1e4fa:	f008 001f 	and.w	r0, r8, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1e4fe:	bf08      	it	eq
   1e500:	f500 73e0 	addeq.w	r3, r0, #448	; 0x1c0
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1e504:	f04f 0100 	mov.w	r1, #0
   1e508:	bf08      	it	eq
   1e50a:	f859 3023 	ldreq.w	r3, [r9, r3, lsl #2]
   1e50e:	f009 ffe7 	bl	284e0 <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
   1e512:	ea22 0206 	bic.w	r2, r2, r6
		++pin;
   1e516:	f108 0801 	add.w	r8, r8, #1
		bit <<= 1;
   1e51a:	0076      	lsls	r6, r6, #1
   1e51c:	e7b8      	b.n	1e490 <gpiote_event_handler+0x34>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1e51e:	462c      	mov	r4, r5
   1e520:	e7bc      	b.n	1e49c <gpiote_event_handler+0x40>
	gpio_fire_callbacks(list, port, pins);
   1e522:	4b12      	ldr	r3, [pc, #72]	; (1e56c <gpiote_event_handler+0x110>)
   1e524:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1e526:	2900      	cmp	r1, #0
   1e528:	d0d7      	beq.n	1e4da <gpiote_event_handler+0x7e>
	return node->next;
   1e52a:	680e      	ldr	r6, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1e52c:	4f11      	ldr	r7, [pc, #68]	; (1e574 <gpiote_event_handler+0x118>)
		if (cb->pin_mask & pins) {
   1e52e:	688a      	ldr	r2, [r1, #8]
   1e530:	4022      	ands	r2, r4
   1e532:	d002      	beq.n	1e53a <gpiote_event_handler+0xde>
			cb->handler(port, cb, cb->pin_mask & pins);
   1e534:	684b      	ldr	r3, [r1, #4]
   1e536:	4638      	mov	r0, r7
   1e538:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1e53a:	2e00      	cmp	r6, #0
   1e53c:	d0cd      	beq.n	1e4da <gpiote_event_handler+0x7e>
   1e53e:	4631      	mov	r1, r6
   1e540:	6836      	ldr	r6, [r6, #0]
   1e542:	e7f4      	b.n	1e52e <gpiote_event_handler+0xd2>
		if (level_pins & bit) {
   1e544:	4214      	tst	r4, r2
   1e546:	d00c      	beq.n	1e562 <gpiote_event_handler+0x106>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1e548:	6931      	ldr	r1, [r6, #16]
   1e54a:	40e9      	lsrs	r1, r5
   1e54c:	f001 0101 	and.w	r1, r1, #1
   1e550:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1e554:	b2c9      	uxtb	r1, r1
   1e556:	f005 001f 	and.w	r0, r5, #31
   1e55a:	f009 ffc1 	bl	284e0 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1e55e:	ea22 0204 	bic.w	r2, r2, r4
		++pin;
   1e562:	3501      	adds	r5, #1
		bit <<= 1;
   1e564:	0064      	lsls	r4, r4, #1
   1e566:	e7c2      	b.n	1e4ee <gpiote_event_handler+0x92>
   1e568:	40006000 	.word	0x40006000
   1e56c:	200034c0 	.word	0x200034c0
   1e570:	40006100 	.word	0x40006100
   1e574:	00029570 	.word	0x00029570

0001e578 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   1e578:	4b02      	ldr	r3, [pc, #8]	; (1e584 <flash_nrf_pages_layout+0xc>)
   1e57a:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1e57c:	2301      	movs	r3, #1
   1e57e:	6013      	str	r3, [r2, #0]
}
   1e580:	4770      	bx	lr
   1e582:	bf00      	nop
   1e584:	200034dc 	.word	0x200034dc

0001e588 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   1e588:	4800      	ldr	r0, [pc, #0]	; (1e58c <flash_nrf_get_parameters+0x4>)
   1e58a:	4770      	bx	lr
   1e58c:	0002a7d8 	.word	0x0002a7d8

0001e590 <flash_nrf_read>:
{
   1e590:	b570      	push	{r4, r5, r6, lr}
   1e592:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   1e594:	4628      	mov	r0, r5
   1e596:	4619      	mov	r1, r3
{
   1e598:	4616      	mov	r6, r2
   1e59a:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1e59c:	f009 ffff 	bl	2859e <is_regular_addr_valid>
   1e5a0:	b970      	cbnz	r0, 1e5c0 <flash_nrf_read+0x30>
   1e5a2:	4a0c      	ldr	r2, [pc, #48]	; (1e5d4 <flash_nrf_read+0x44>)
   1e5a4:	4b0c      	ldr	r3, [pc, #48]	; (1e5d8 <flash_nrf_read+0x48>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1e5a6:	480d      	ldr	r0, [pc, #52]	; (1e5dc <flash_nrf_read+0x4c>)
   1e5a8:	1a9b      	subs	r3, r3, r2
   1e5aa:	08db      	lsrs	r3, r3, #3
   1e5ac:	019b      	lsls	r3, r3, #6
   1e5ae:	f043 0301 	orr.w	r3, r3, #1
   1e5b2:	4622      	mov	r2, r4
   1e5b4:	4629      	mov	r1, r5
   1e5b6:	f003 fab9 	bl	21b2c <log_2>
		return -EINVAL;
   1e5ba:	f06f 0015 	mvn.w	r0, #21
}
   1e5be:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
   1e5c0:	b134      	cbz	r4, 1e5d0 <flash_nrf_read+0x40>
	memcpy(data, (void *)addr, len);
   1e5c2:	4622      	mov	r2, r4
   1e5c4:	4629      	mov	r1, r5
   1e5c6:	4630      	mov	r0, r6
   1e5c8:	f005 fbee 	bl	23da8 <memcpy>
	return 0;
   1e5cc:	2000      	movs	r0, #0
   1e5ce:	e7f6      	b.n	1e5be <flash_nrf_read+0x2e>
		return 0;
   1e5d0:	4620      	mov	r0, r4
   1e5d2:	e7f4      	b.n	1e5be <flash_nrf_read+0x2e>
   1e5d4:	00029870 	.word	0x00029870
   1e5d8:	00029a60 	.word	0x00029a60
   1e5dc:	0002fd32 	.word	0x0002fd32

0001e5e0 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   1e5e0:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1e5e2:	2201      	movs	r2, #1
   1e5e4:	4611      	mov	r1, r2
   1e5e6:	4807      	ldr	r0, [pc, #28]	; (1e604 <nrf_flash_init+0x24>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1e5e8:	4c07      	ldr	r4, [pc, #28]	; (1e608 <nrf_flash_init+0x28>)
   1e5ea:	f00a fb34 	bl	28c56 <z_impl_k_sem_init>
	nrf_flash_sync_init();
   1e5ee:	f000 f981 	bl	1e8f4 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1e5f2:	f00a f909 	bl	28808 <nrfx_nvmc_flash_page_count_get>
   1e5f6:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1e5f8:	f00a f902 	bl	28800 <nrfx_nvmc_flash_page_size_get>
   1e5fc:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   1e5fe:	2000      	movs	r0, #0
   1e600:	bd10      	pop	{r4, pc}
   1e602:	bf00      	nop
   1e604:	200034e4 	.word	0x200034e4
   1e608:	200034dc 	.word	0x200034dc

0001e60c <flash_nrf_erase>:
{
   1e60c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e60e:	b087      	sub	sp, #28
   1e610:	460e      	mov	r6, r1
   1e612:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1e614:	f00a f8f4 	bl	28800 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   1e618:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1e61a:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   1e61c:	4630      	mov	r0, r6
   1e61e:	f009 ffbe 	bl	2859e <is_regular_addr_valid>
   1e622:	b388      	cbz	r0, 1e688 <flash_nrf_erase+0x7c>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1e624:	fbb6 f3f7 	udiv	r3, r6, r7
   1e628:	fb07 6313 	mls	r3, r7, r3, r6
   1e62c:	b923      	cbnz	r3, 1e638 <flash_nrf_erase+0x2c>
   1e62e:	fbb5 f4f7 	udiv	r4, r5, r7
   1e632:	fb07 5414 	mls	r4, r7, r4, r5
   1e636:	b184      	cbz	r4, 1e65a <flash_nrf_erase+0x4e>
   1e638:	4a25      	ldr	r2, [pc, #148]	; (1e6d0 <flash_nrf_erase+0xc4>)
   1e63a:	4b26      	ldr	r3, [pc, #152]	; (1e6d4 <flash_nrf_erase+0xc8>)
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   1e63c:	4826      	ldr	r0, [pc, #152]	; (1e6d8 <flash_nrf_erase+0xcc>)
   1e63e:	1a9b      	subs	r3, r3, r2
   1e640:	08db      	lsrs	r3, r3, #3
   1e642:	019b      	lsls	r3, r3, #6
   1e644:	f043 0301 	orr.w	r3, r3, #1
   1e648:	462a      	mov	r2, r5
   1e64a:	4631      	mov	r1, r6
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1e64c:	f003 fa6e 	bl	21b2c <log_2>
		return -EINVAL;
   1e650:	f06f 0415 	mvn.w	r4, #21
}
   1e654:	4620      	mov	r0, r4
   1e656:	b007      	add	sp, #28
   1e658:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!n_pages) {
   1e65a:	42bd      	cmp	r5, r7
   1e65c:	d3fa      	bcc.n	1e654 <flash_nrf_erase+0x48>
	return z_impl_k_sem_take(sem, timeout);
   1e65e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e662:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e666:	481d      	ldr	r0, [pc, #116]	; (1e6dc <flash_nrf_erase+0xd0>)
   1e668:	f001 fcfa 	bl	20060 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1e66c:	f009 ffce 	bl	2860c <nrf_flash_sync_is_required>
   1e670:	ab02      	add	r3, sp, #8
   1e672:	4601      	mov	r1, r0
   1e674:	b998      	cbnz	r0, 1e69e <flash_nrf_erase+0x92>
	return FLASH_OP_DONE;
}

static int erase(uint32_t addr, uint32_t size)
{
	struct flash_context context = {
   1e676:	2210      	movs	r2, #16
   1e678:	4618      	mov	r0, r3
   1e67a:	f005 fba0 	bl	23dbe <memset>
   1e67e:	e9cd 6503 	strd	r6, r5, [sp, #12]
#if defined(CONFIG_SOC_FLASH_NRF_PARTIAL_ERASE)
		.flash_addr_next = addr
#endif
	};

	return	erase_op(&context);
   1e682:	f009 ff9f 	bl	285c4 <erase_op>
   1e686:	e01d      	b.n	1e6c4 <flash_nrf_erase+0xb8>
   1e688:	4a11      	ldr	r2, [pc, #68]	; (1e6d0 <flash_nrf_erase+0xc4>)
   1e68a:	4b12      	ldr	r3, [pc, #72]	; (1e6d4 <flash_nrf_erase+0xc8>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1e68c:	4814      	ldr	r0, [pc, #80]	; (1e6e0 <flash_nrf_erase+0xd4>)
   1e68e:	1a9b      	subs	r3, r3, r2
   1e690:	08db      	lsrs	r3, r3, #3
   1e692:	019b      	lsls	r3, r3, #6
   1e694:	f043 0301 	orr.w	r3, r3, #1
   1e698:	462a      	mov	r2, r5
   1e69a:	4631      	mov	r1, r6
   1e69c:	e7d6      	b.n	1e64c <flash_nrf_erase+0x40>
	struct flash_context context = {
   1e69e:	2210      	movs	r2, #16
   1e6a0:	4621      	mov	r1, r4
   1e6a2:	4618      	mov	r0, r3
   1e6a4:	f005 fb8b 	bl	23dbe <memset>
   1e6a8:	2201      	movs	r2, #1
   1e6aa:	f88d 2014 	strb.w	r2, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   1e6ae:	4a0d      	ldr	r2, [pc, #52]	; (1e6e4 <flash_nrf_erase+0xd8>)
   1e6b0:	e9cd 2000 	strd	r2, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1e6b4:	480c      	ldr	r0, [pc, #48]	; (1e6e8 <flash_nrf_erase+0xdc>)
	struct flash_context context = {
   1e6b6:	e9cd 6503 	strd	r6, r5, [sp, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1e6ba:	f000 f925 	bl	1e908 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1e6be:	4668      	mov	r0, sp
   1e6c0:	f7e3 f84a 	bl	1758 <nrf_flash_sync_exe>
	return	erase_op(&context);
   1e6c4:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1e6c6:	4805      	ldr	r0, [pc, #20]	; (1e6dc <flash_nrf_erase+0xd0>)
   1e6c8:	f001 fca4 	bl	20014 <z_impl_k_sem_give>
}
   1e6cc:	e7c2      	b.n	1e654 <flash_nrf_erase+0x48>
   1e6ce:	bf00      	nop
   1e6d0:	00029870 	.word	0x00029870
   1e6d4:	00029a60 	.word	0x00029a60
   1e6d8:	0002fd4f 	.word	0x0002fd4f
   1e6dc:	200034e4 	.word	0x200034e4
   1e6e0:	0002fd32 	.word	0x0002fd32
   1e6e4:	000285c5 	.word	0x000285c5
   1e6e8:	00015e64 	.word	0x00015e64

0001e6ec <write_op>:
{
   1e6ec:	b538      	push	{r3, r4, r5, lr}
	if (w_ctx->enable_time_limit) {
   1e6ee:	7b03      	ldrb	r3, [r0, #12]
{
   1e6f0:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   1e6f2:	b10b      	cbz	r3, 1e6f8 <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   1e6f4:	f000 f910 	bl	1e918 <nrf_flash_sync_get_timestamp_begin>
{
   1e6f8:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   1e6fa:	68a3      	ldr	r3, [r4, #8]
   1e6fc:	2b03      	cmp	r3, #3
   1e6fe:	d806      	bhi.n	1e70e <write_op+0x22>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1e700:	4a12      	ldr	r2, [pc, #72]	; (1e74c <write_op+0x60>)
   1e702:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1e706:	07db      	lsls	r3, r3, #31
   1e708:	d5fb      	bpl.n	1e702 <write_op+0x16>
	return FLASH_OP_DONE;
   1e70a:	2000      	movs	r0, #0
}
   1e70c:	bd38      	pop	{r3, r4, r5, pc}
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   1e70e:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   1e710:	6860      	ldr	r0, [r4, #4]
   1e712:	6819      	ldr	r1, [r3, #0]
   1e714:	f000 ffd6 	bl	1f6c4 <nrfx_nvmc_word_write>
	w_ctx->flash_addr += shift;
   1e718:	6863      	ldr	r3, [r4, #4]
   1e71a:	3304      	adds	r3, #4
   1e71c:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   1e71e:	6823      	ldr	r3, [r4, #0]
   1e720:	3304      	adds	r3, #4
   1e722:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   1e724:	68a3      	ldr	r3, [r4, #8]
   1e726:	3b04      	subs	r3, #4
   1e728:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   1e72a:	7b23      	ldrb	r3, [r4, #12]
		i++;
   1e72c:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   1e72e:	2b00      	cmp	r3, #0
   1e730:	d0e3      	beq.n	1e6fa <write_op+0xe>
			if (nrf_flash_sync_check_time_limit(i)) {
   1e732:	4628      	mov	r0, r5
   1e734:	f7e3 f88c 	bl	1850 <nrf_flash_sync_check_time_limit>
   1e738:	2800      	cmp	r0, #0
   1e73a:	d0de      	beq.n	1e6fa <write_op+0xe>
   1e73c:	4a03      	ldr	r2, [pc, #12]	; (1e74c <write_op+0x60>)
   1e73e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1e742:	07d9      	lsls	r1, r3, #31
   1e744:	d5fb      	bpl.n	1e73e <write_op+0x52>
				return FLASH_OP_ONGOING;
   1e746:	2001      	movs	r0, #1
   1e748:	e7e0      	b.n	1e70c <write_op+0x20>
   1e74a:	bf00      	nop
   1e74c:	4001e000 	.word	0x4001e000

0001e750 <flash_nrf_write>:
{
   1e750:	b570      	push	{r4, r5, r6, lr}
   1e752:	460d      	mov	r5, r1
   1e754:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   1e756:	4619      	mov	r1, r3
   1e758:	4628      	mov	r0, r5
{
   1e75a:	4616      	mov	r6, r2
   1e75c:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1e75e:	f009 ff1e 	bl	2859e <is_regular_addr_valid>
   1e762:	b980      	cbnz	r0, 1e786 <flash_nrf_write+0x36>
   1e764:	4a23      	ldr	r2, [pc, #140]	; (1e7f4 <flash_nrf_write+0xa4>)
   1e766:	4b24      	ldr	r3, [pc, #144]	; (1e7f8 <flash_nrf_write+0xa8>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1e768:	4824      	ldr	r0, [pc, #144]	; (1e7fc <flash_nrf_write+0xac>)
   1e76a:	1a9b      	subs	r3, r3, r2
   1e76c:	08db      	lsrs	r3, r3, #3
   1e76e:	019b      	lsls	r3, r3, #6
   1e770:	f043 0301 	orr.w	r3, r3, #1
   1e774:	4622      	mov	r2, r4
   1e776:	4629      	mov	r1, r5
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1e778:	f003 f9d8 	bl	21b2c <log_2>
		return -EINVAL;
   1e77c:	f06f 0415 	mvn.w	r4, #21
}
   1e780:	4620      	mov	r0, r4
   1e782:	b006      	add	sp, #24
   1e784:	bd70      	pop	{r4, r5, r6, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   1e786:	ea44 0305 	orr.w	r3, r4, r5
   1e78a:	079b      	lsls	r3, r3, #30
   1e78c:	d00a      	beq.n	1e7a4 <flash_nrf_write+0x54>
   1e78e:	4a19      	ldr	r2, [pc, #100]	; (1e7f4 <flash_nrf_write+0xa4>)
   1e790:	4b19      	ldr	r3, [pc, #100]	; (1e7f8 <flash_nrf_write+0xa8>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1e792:	481b      	ldr	r0, [pc, #108]	; (1e800 <flash_nrf_write+0xb0>)
   1e794:	1a9b      	subs	r3, r3, r2
   1e796:	08db      	lsrs	r3, r3, #3
   1e798:	019b      	lsls	r3, r3, #6
   1e79a:	f043 0301 	orr.w	r3, r3, #1
   1e79e:	4622      	mov	r2, r4
   1e7a0:	4629      	mov	r1, r5
   1e7a2:	e7e9      	b.n	1e778 <flash_nrf_write+0x28>
	if (!len) {
   1e7a4:	2c00      	cmp	r4, #0
   1e7a6:	d0eb      	beq.n	1e780 <flash_nrf_write+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1e7a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e7ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e7b0:	4814      	ldr	r0, [pc, #80]	; (1e804 <flash_nrf_write+0xb4>)
   1e7b2:	f001 fc55 	bl	20060 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1e7b6:	f009 ff29 	bl	2860c <nrf_flash_sync_is_required>
   1e7ba:	4603      	mov	r3, r0
	struct flash_context context = {
   1e7bc:	e9cd 6502 	strd	r6, r5, [sp, #8]
   1e7c0:	a802      	add	r0, sp, #8
   1e7c2:	9404      	str	r4, [sp, #16]
	if (nrf_flash_sync_is_required()) {
   1e7c4:	b18b      	cbz	r3, 1e7ea <flash_nrf_write+0x9a>
	struct flash_context context = {
   1e7c6:	2301      	movs	r3, #1
   1e7c8:	f88d 3014 	strb.w	r3, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   1e7cc:	4b0e      	ldr	r3, [pc, #56]	; (1e808 <flash_nrf_write+0xb8>)
   1e7ce:	e9cd 3000 	strd	r3, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   1e7d2:	f641 504c 	movw	r0, #7500	; 0x1d4c
   1e7d6:	f000 f897 	bl	1e908 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1e7da:	4668      	mov	r0, sp
   1e7dc:	f7e2 ffbc 	bl	1758 <nrf_flash_sync_exe>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
		.enable_time_limit = 0 /* disable time limit */
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	};

	return write_op(&context);
   1e7e0:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1e7e2:	4808      	ldr	r0, [pc, #32]	; (1e804 <flash_nrf_write+0xb4>)
   1e7e4:	f001 fc16 	bl	20014 <z_impl_k_sem_give>
}
   1e7e8:	e7ca      	b.n	1e780 <flash_nrf_write+0x30>
	struct flash_context context = {
   1e7ea:	f88d 3014 	strb.w	r3, [sp, #20]
	return write_op(&context);
   1e7ee:	f7ff ff7d 	bl	1e6ec <write_op>
   1e7f2:	e7f5      	b.n	1e7e0 <flash_nrf_write+0x90>
   1e7f4:	00029870 	.word	0x00029870
   1e7f8:	00029a60 	.word	0x00029a60
   1e7fc:	0002fd32 	.word	0x0002fd32
   1e800:	0002fd6e 	.word	0x0002fd6e
   1e804:	200034e4 	.word	0x200034e4
   1e808:	0001e6ed 	.word	0x0001e6ed

0001e80c <time_slot_callback_work>:
{
   1e80c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1e80e:	9b07      	ldr	r3, [sp, #28]
	rc = op_desc->handler(op_desc->context);
   1e810:	e9d3 2000 	ldrd	r2, r0, [r3]
   1e814:	4790      	blx	r2
	if (rc != FLASH_OP_ONGOING) {
   1e816:	2801      	cmp	r0, #1
	rc = op_desc->handler(op_desc->context);
   1e818:	4604      	mov	r4, r0
	if (rc != FLASH_OP_ONGOING) {
   1e81a:	d013      	beq.n	1e844 <time_slot_callback_work+0x38>
		ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   1e81c:	f10d 010f 	add.w	r1, sp, #15
   1e820:	f10d 000e 	add.w	r0, sp, #14
   1e824:	f008 fe2b 	bl	2747e <ll_timeslice_ticker_id_get>
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   1e828:	2300      	movs	r3, #0
   1e82a:	9300      	str	r3, [sp, #0]
   1e82c:	4619      	mov	r1, r3
   1e82e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1e832:	f89d 000e 	ldrb.w	r0, [sp, #14]
   1e836:	f7f8 fea7 	bl	17588 <ticker_stop>
		_ticker_sync_context.result = (rc == FLASH_OP_DONE) ? 0 : rc;
   1e83a:	4b03      	ldr	r3, [pc, #12]	; (1e848 <time_slot_callback_work+0x3c>)
   1e83c:	60dc      	str	r4, [r3, #12]
	z_impl_k_sem_give(sem);
   1e83e:	4803      	ldr	r0, [pc, #12]	; (1e84c <time_slot_callback_work+0x40>)
   1e840:	f001 fbe8 	bl	20014 <z_impl_k_sem_give>
}
   1e844:	b004      	add	sp, #16
   1e846:	bd10      	pop	{r4, pc}
   1e848:	200034fc 	.word	0x200034fc
   1e84c:	2000350c 	.word	0x2000350c

0001e850 <time_slot_delay>:
{
   1e850:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e854:	b08d      	sub	sp, #52	; 0x34
   1e856:	4606      	mov	r6, r0
   1e858:	460f      	mov	r7, r1
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   1e85a:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   1e85e:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
{
   1e862:	4690      	mov	r8, r2
   1e864:	4699      	mov	r9, r3
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   1e866:	f008 fe0a 	bl	2747e <ll_timeslice_ticker_id_get>
			   (ticker_id + 1), /* ticker_id */
   1e86a:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
	err = ticker_start(instance_index, /* Radio instance ticker */
   1e86e:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   1e872:	9700      	str	r7, [sp, #0]
   1e874:	2400      	movs	r4, #0
			   (ticker_id + 1), /* ticker_id */
   1e876:	3501      	adds	r5, #1
	err = ticker_start(instance_index, /* Radio instance ticker */
   1e878:	4633      	mov	r3, r6
   1e87a:	e9cd 4407 	strd	r4, r4, [sp, #28]
   1e87e:	e9cd 8905 	strd	r8, r9, [sp, #20]
   1e882:	e9cd 4403 	strd	r4, r4, [sp, #12]
   1e886:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1e88a:	b2ea      	uxtb	r2, r5
   1e88c:	2101      	movs	r1, #1
   1e88e:	f008 fd40 	bl	27312 <ticker_start>
	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
   1e892:	f030 0302 	bics.w	r3, r0, #2
   1e896:	d00d      	beq.n	1e8b4 <time_slot_delay+0x64>
		_ticker_sync_context.result = 0;
   1e898:	4b08      	ldr	r3, [pc, #32]	; (1e8bc <time_slot_delay+0x6c>)
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   1e89a:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
		_ticker_sync_context.result = 0;
   1e89e:	60dc      	str	r4, [r3, #12]
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   1e8a0:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   1e8a4:	9400      	str	r4, [sp, #0]
   1e8a6:	4623      	mov	r3, r4
   1e8a8:	4621      	mov	r1, r4
   1e8aa:	f7f8 fe6d 	bl	17588 <ticker_stop>
   1e8ae:	4804      	ldr	r0, [pc, #16]	; (1e8c0 <time_slot_delay+0x70>)
   1e8b0:	f001 fbb0 	bl	20014 <z_impl_k_sem_give>
}
   1e8b4:	b00d      	add	sp, #52	; 0x34
   1e8b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1e8ba:	bf00      	nop
   1e8bc:	200034fc 	.word	0x200034fc
   1e8c0:	2000350c 	.word	0x2000350c

0001e8c4 <time_slot_callback_prepare>:
	time_slot_delay(ticks_at_expire,
   1e8c4:	9b01      	ldr	r3, [sp, #4]
   1e8c6:	4a02      	ldr	r2, [pc, #8]	; (1e8d0 <time_slot_callback_prepare+0xc>)
   1e8c8:	2131      	movs	r1, #49	; 0x31
   1e8ca:	f7ff bfc1 	b.w	1e850 <time_slot_delay>
   1e8ce:	bf00      	nop
   1e8d0:	0001e8d5 	.word	0x0001e8d5

0001e8d4 <time_slot_callback_abort>:
{
   1e8d4:	b570      	push	{r4, r5, r6, lr}
   1e8d6:	9d05      	ldr	r5, [sp, #20]
   1e8d8:	4604      	mov	r4, r0
	ll_radio_state_abort();
   1e8da:	f7fa fc35 	bl	19148 <ll_radio_state_abort>
	time_slot_delay(ticks_at_expire,
   1e8de:	462b      	mov	r3, r5
   1e8e0:	4620      	mov	r0, r4
   1e8e2:	4a03      	ldr	r2, [pc, #12]	; (1e8f0 <time_slot_callback_abort+0x1c>)
}
   1e8e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	time_slot_delay(ticks_at_expire,
   1e8e8:	2106      	movs	r1, #6
   1e8ea:	f7ff bfb1 	b.w	1e850 <time_slot_delay>
   1e8ee:	bf00      	nop
   1e8f0:	0001e80d 	.word	0x0001e80d

0001e8f4 <nrf_flash_sync_init>:
{
   1e8f4:	b508      	push	{r3, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1e8f6:	2201      	movs	r2, #1
   1e8f8:	2100      	movs	r1, #0
   1e8fa:	4802      	ldr	r0, [pc, #8]	; (1e904 <nrf_flash_sync_init+0x10>)
   1e8fc:	f00a f9ab 	bl	28c56 <z_impl_k_sem_init>
}
   1e900:	2000      	movs	r0, #0
   1e902:	bd08      	pop	{r3, pc}
   1e904:	2000350c 	.word	0x2000350c

0001e908 <nrf_flash_sync_set_context>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
   1e908:	4b02      	ldr	r3, [pc, #8]	; (1e914 <nrf_flash_sync_set_context+0xc>)
   1e90a:	f2a0 62a4 	subw	r2, r0, #1700	; 0x6a4
	_ticker_sync_context.slot = duration;
   1e90e:	e9c3 2000 	strd	r2, r0, [r3]
}
   1e912:	4770      	bx	lr
   1e914:	200034fc 	.word	0x200034fc

0001e918 <nrf_flash_sync_get_timestamp_begin>:
{
   1e918:	b508      	push	{r3, lr}
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
   1e91a:	f008 fd2d 	bl	27378 <ticker_ticks_now_get>
   1e91e:	4b01      	ldr	r3, [pc, #4]	; (1e924 <nrf_flash_sync_get_timestamp_begin+0xc>)
   1e920:	6098      	str	r0, [r3, #8]
}
   1e922:	bd08      	pop	{r3, pc}
   1e924:	200034fc 	.word	0x200034fc

0001e928 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   1e928:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   1e92a:	794b      	ldrb	r3, [r1, #5]
   1e92c:	2b01      	cmp	r3, #1
   1e92e:	d124      	bne.n	1e97a <uarte_nrfx_configure+0x52>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1e930:	798b      	ldrb	r3, [r1, #6]
   1e932:	2b03      	cmp	r3, #3
   1e934:	d121      	bne.n	1e97a <uarte_nrfx_configure+0x52>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1e936:	79cc      	ldrb	r4, [r1, #7]
   1e938:	b12c      	cbz	r4, 1e946 <uarte_nrfx_configure+0x1e>
   1e93a:	2c01      	cmp	r4, #1
   1e93c:	d11d      	bne.n	1e97a <uarte_nrfx_configure+0x52>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
   1e93e:	6843      	ldr	r3, [r0, #4]
   1e940:	685b      	ldr	r3, [r3, #4]
   1e942:	079b      	lsls	r3, r3, #30
   1e944:	d019      	beq.n	1e97a <uarte_nrfx_configure+0x52>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1e946:	790a      	ldrb	r2, [r1, #4]
   1e948:	b112      	cbz	r2, 1e950 <uarte_nrfx_configure+0x28>
   1e94a:	2a02      	cmp	r2, #2
   1e94c:	d115      	bne.n	1e97a <uarte_nrfx_configure+0x52>
   1e94e:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1e950:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1e952:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   1e954:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1e958:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   1e95a:	d062      	beq.n	1ea22 <uarte_nrfx_configure+0xfa>
   1e95c:	d82b      	bhi.n	1e9b6 <uarte_nrfx_configure+0x8e>
   1e95e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1e962:	d061      	beq.n	1ea28 <uarte_nrfx_configure+0x100>
   1e964:	d814      	bhi.n	1e990 <uarte_nrfx_configure+0x68>
   1e966:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1e96a:	d05f      	beq.n	1ea2c <uarte_nrfx_configure+0x104>
   1e96c:	d808      	bhi.n	1e980 <uarte_nrfx_configure+0x58>
   1e96e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1e972:	d05e      	beq.n	1ea32 <uarte_nrfx_configure+0x10a>
   1e974:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1e978:	d05e      	beq.n	1ea38 <uarte_nrfx_configure+0x110>
   1e97a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1e97e:	e04f      	b.n	1ea20 <uarte_nrfx_configure+0xf8>
   1e980:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1e984:	d05b      	beq.n	1ea3e <uarte_nrfx_configure+0x116>
   1e986:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1e98a:	d1f6      	bne.n	1e97a <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1e98c:	4b36      	ldr	r3, [pc, #216]	; (1ea68 <uarte_nrfx_configure+0x140>)
   1e98e:	e03c      	b.n	1ea0a <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   1e990:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1e994:	d056      	beq.n	1ea44 <uarte_nrfx_configure+0x11c>
   1e996:	d807      	bhi.n	1e9a8 <uarte_nrfx_configure+0x80>
   1e998:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1e99c:	d054      	beq.n	1ea48 <uarte_nrfx_configure+0x120>
   1e99e:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1e9a2:	d1ea      	bne.n	1e97a <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1e9a4:	4b31      	ldr	r3, [pc, #196]	; (1ea6c <uarte_nrfx_configure+0x144>)
   1e9a6:	e030      	b.n	1ea0a <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   1e9a8:	f647 2612 	movw	r6, #31250	; 0x7a12
   1e9ac:	42b3      	cmp	r3, r6
   1e9ae:	d1e4      	bne.n	1e97a <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1e9b0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1e9b4:	e029      	b.n	1ea0a <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   1e9b6:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1e9ba:	d047      	beq.n	1ea4c <uarte_nrfx_configure+0x124>
   1e9bc:	d813      	bhi.n	1e9e6 <uarte_nrfx_configure+0xbe>
   1e9be:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1e9c2:	d046      	beq.n	1ea52 <uarte_nrfx_configure+0x12a>
   1e9c4:	d809      	bhi.n	1e9da <uarte_nrfx_configure+0xb2>
   1e9c6:	f64d 26c0 	movw	r6, #56000	; 0xdac0
   1e9ca:	42b3      	cmp	r3, r6
   1e9cc:	d043      	beq.n	1ea56 <uarte_nrfx_configure+0x12e>
   1e9ce:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1e9d2:	d1d2      	bne.n	1e97a <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1e9d4:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1e9d8:	e017      	b.n	1ea0a <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   1e9da:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1e9de:	d1cc      	bne.n	1e97a <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1e9e0:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1e9e4:	e011      	b.n	1ea0a <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   1e9e6:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1e9ea:	d037      	beq.n	1ea5c <uarte_nrfx_configure+0x134>
   1e9ec:	d808      	bhi.n	1ea00 <uarte_nrfx_configure+0xd8>
   1e9ee:	4e20      	ldr	r6, [pc, #128]	; (1ea70 <uarte_nrfx_configure+0x148>)
   1e9f0:	42b3      	cmp	r3, r6
   1e9f2:	d036      	beq.n	1ea62 <uarte_nrfx_configure+0x13a>
   1e9f4:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1e9f8:	d1bf      	bne.n	1e97a <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1e9fa:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1e9fe:	e004      	b.n	1ea0a <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   1ea00:	4e1c      	ldr	r6, [pc, #112]	; (1ea74 <uarte_nrfx_configure+0x14c>)
   1ea02:	42b3      	cmp	r3, r6
   1ea04:	d1b9      	bne.n	1e97a <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1ea06:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1ea0a:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   1ea0e:	6903      	ldr	r3, [r0, #16]
   1ea10:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   1ea12:	4322      	orrs	r2, r4
   1ea14:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1ea16:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   1ea1a:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1ea1e:	2000      	movs	r0, #0
}
   1ea20:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1ea22:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1ea26:	e7f0      	b.n	1ea0a <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1ea28:	4b13      	ldr	r3, [pc, #76]	; (1ea78 <uarte_nrfx_configure+0x150>)
   1ea2a:	e7ee      	b.n	1ea0a <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1ea2c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1ea30:	e7eb      	b.n	1ea0a <uarte_nrfx_configure+0xe2>
		nrf_baudrate = 0x00014000;
   1ea32:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1ea36:	e7e8      	b.n	1ea0a <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   1ea38:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1ea3c:	e7e5      	b.n	1ea0a <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1ea3e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1ea42:	e7e2      	b.n	1ea0a <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1ea44:	4b0d      	ldr	r3, [pc, #52]	; (1ea7c <uarte_nrfx_configure+0x154>)
   1ea46:	e7e0      	b.n	1ea0a <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1ea48:	4b0d      	ldr	r3, [pc, #52]	; (1ea80 <uarte_nrfx_configure+0x158>)
   1ea4a:	e7de      	b.n	1ea0a <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1ea4c:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1ea50:	e7db      	b.n	1ea0a <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1ea52:	4b0c      	ldr	r3, [pc, #48]	; (1ea84 <uarte_nrfx_configure+0x15c>)
   1ea54:	e7d9      	b.n	1ea0a <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1ea56:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1ea5a:	e7d6      	b.n	1ea0a <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1ea5c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1ea60:	e7d3      	b.n	1ea0a <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1ea62:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1ea66:	e7d0      	b.n	1ea0a <uarte_nrfx_configure+0xe2>
   1ea68:	0013b000 	.word	0x0013b000
   1ea6c:	004ea000 	.word	0x004ea000
   1ea70:	0003d090 	.word	0x0003d090
   1ea74:	000f4240 	.word	0x000f4240
   1ea78:	00275000 	.word	0x00275000
   1ea7c:	0075c000 	.word	0x0075c000
   1ea80:	003af000 	.word	0x003af000
   1ea84:	013a9000 	.word	0x013a9000

0001ea88 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   1ea88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return dev->data;
   1ea8a:	6906      	ldr	r6, [r0, #16]
{
   1ea8c:	4605      	mov	r5, r0
   1ea8e:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1ea90:	f009 ffd1 	bl	28a36 <k_is_in_isr>
   1ea94:	b910      	cbnz	r0, 1ea9c <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   1ea96:	4b2c      	ldr	r3, [pc, #176]	; (1eb48 <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
   1ea98:	781b      	ldrb	r3, [r3, #0]
   1ea9a:	b983      	cbnz	r3, 1eabe <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   1ea9c:	f04f 0320 	mov.w	r3, #32
   1eaa0:	f3ef 8411 	mrs	r4, BASEPRI
   1eaa4:	f383 8812 	msr	BASEPRI_MAX, r3
   1eaa8:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   1eaac:	6868      	ldr	r0, [r5, #4]
   1eaae:	f009 fe3a 	bl	28726 <is_tx_ready.isra.0>
   1eab2:	bb28      	cbnz	r0, 1eb00 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
   1eab4:	f384 8811 	msr	BASEPRI, r4
   1eab8:	f3bf 8f6f 	isb	sy
}
   1eabc:	e7ee      	b.n	1ea9c <uarte_nrfx_poll_out+0x14>
{
   1eabe:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1eac0:	6868      	ldr	r0, [r5, #4]
   1eac2:	f009 fe30 	bl	28726 <is_tx_ready.isra.0>
   1eac6:	b970      	cbnz	r0, 1eae6 <uarte_nrfx_poll_out+0x5e>
   1eac8:	2001      	movs	r0, #1
   1eaca:	f009 fe87 	bl	287dc <nrfx_busy_wait>
   1eace:	3c01      	subs	r4, #1
   1ead0:	d1f6      	bne.n	1eac0 <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
   1ead2:	2100      	movs	r1, #0
   1ead4:	2021      	movs	r0, #33	; 0x21
   1ead6:	f001 ff81 	bl	209dc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1eada:	e7f0      	b.n	1eabe <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   1eadc:	f384 8811 	msr	BASEPRI, r4
   1eae0:	f3bf 8f6f 	isb	sy
}
   1eae4:	e7f5      	b.n	1ead2 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   1eae6:	f04f 0320 	mov.w	r3, #32
   1eaea:	f3ef 8411 	mrs	r4, BASEPRI
   1eaee:	f383 8812 	msr	BASEPRI_MAX, r3
   1eaf2:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1eaf6:	6868      	ldr	r0, [r5, #4]
   1eaf8:	f009 fe15 	bl	28726 <is_tx_ready.isra.0>
   1eafc:	2800      	cmp	r0, #0
   1eafe:	d0ed      	beq.n	1eadc <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
   1eb00:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
   1eb04:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
   1eb06:	680b      	ldr	r3, [r1, #0]
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   1eb08:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1eb0a:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1eb0e:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1eb12:	2200      	movs	r2, #0
   1eb14:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1eb18:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   1eb1c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   1eb20:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1eb24:	684a      	ldr	r2, [r1, #4]
   1eb26:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1eb28:	bf41      	itttt	mi
   1eb2a:	2208      	movmi	r2, #8
   1eb2c:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   1eb30:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   1eb34:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1eb38:	2201      	movs	r2, #1
   1eb3a:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   1eb3c:	f384 8811 	msr	BASEPRI, r4
   1eb40:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   1eb44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1eb46:	bf00      	nop
   1eb48:	20003d0b 	.word	0x20003d0b

0001eb4c <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1eb4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1eb4e:	2200      	movs	r2, #0
   1eb50:	4607      	mov	r7, r0
   1eb52:	2101      	movs	r1, #1
   1eb54:	2002      	movs	r0, #2
   1eb56:	f7e5 fc6b 	bl	4430 <z_arm_irq_priority_set>
   1eb5a:	2002      	movs	r0, #2
   1eb5c:	f7e5 fc36 	bl	43cc <arch_irq_enable>
	return dev->config;
   1eb60:	687d      	ldr	r5, [r7, #4]
	return dev->data;
   1eb62:	693e      	ldr	r6, [r7, #16]
	return config->uarte_regs;
   1eb64:	682c      	ldr	r4, [r5, #0]
	nrf_gpio_pin_write(cfg->pseltxd, 1);
   1eb66:	f8d5 c008 	ldr.w	ip, [r5, #8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1eb6a:	2300      	movs	r3, #0
   1eb6c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->OUTSET = set_mask;
   1eb70:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    *p_pin = pin_number & 0x1F;
   1eb74:	f00c 031f 	and.w	r3, ip, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1eb78:	2201      	movs	r2, #1
   1eb7a:	409a      	lsls	r2, r3
    reg->PIN_CNF[pin_number] = cnf;
   1eb7c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
	data->dev = dev;
   1eb80:	6037      	str	r7, [r6, #0]
    p_reg->OUTSET = set_mask;
   1eb82:	f8c1 2508 	str.w	r2, [r1, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
   1eb86:	2203      	movs	r2, #3
   1eb88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (cfg->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   1eb8c:	68ea      	ldr	r2, [r5, #12]
   1eb8e:	1c50      	adds	r0, r2, #1
   1eb90:	d007      	beq.n	1eba2 <uarte_0_init+0x56>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1eb92:	7e28      	ldrb	r0, [r5, #24]
    *p_pin = pin_number & 0x1F;
   1eb94:	f002 031f 	and.w	r3, r2, #31
    reg->PIN_CNF[pin_number] = cnf;
   1eb98:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1eb9c:	0080      	lsls	r0, r0, #2
    reg->PIN_CNF[pin_number] = cnf;
   1eb9e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
   1eba2:	f8c4 c50c 	str.w	ip, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1eba6:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
	if (cfg->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   1ebaa:	692a      	ldr	r2, [r5, #16]
   1ebac:	1c53      	adds	r3, r2, #1
   1ebae:	d009      	beq.n	1ebc4 <uarte_0_init+0x78>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1ebb0:	7e69      	ldrb	r1, [r5, #25]
    *p_pin = pin_number & 0x1F;
   1ebb2:	f002 031f 	and.w	r3, r2, #31
    reg->PIN_CNF[pin_number] = cnf;
   1ebb6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1ebba:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1ebbe:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
   1ebc0:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	if (cfg->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   1ebc4:	6969      	ldr	r1, [r5, #20]
   1ebc6:	1c48      	adds	r0, r1, #1
   1ebc8:	d00c      	beq.n	1ebe4 <uarte_0_init+0x98>
    *p_pin = pin_number & 0x1F;
   1ebca:	f001 031f 	and.w	r3, r1, #31
    p_reg->OUTSET = set_mask;
   1ebce:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1ebd2:	2001      	movs	r0, #1
   1ebd4:	4098      	lsls	r0, r3
    reg->PIN_CNF[pin_number] = cnf;
   1ebd6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    p_reg->OUTSET = set_mask;
   1ebda:	f8cc 0508 	str.w	r0, [ip, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
   1ebde:	2003      	movs	r0, #3
   1ebe0:	f84c 0023 	str.w	r0, [ip, r3, lsl #2]
    p_reg->PSEL.RTS = pselrts;
   1ebe4:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1ebe8:	4638      	mov	r0, r7
    p_reg->PSEL.CTS = pselcts;
   1ebea:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
   1ebee:	1d31      	adds	r1, r6, #4
   1ebf0:	f7ff fe9a 	bl	1e928 <uarte_nrfx_configure>
	if (err) {
   1ebf4:	4607      	mov	r7, r0
   1ebf6:	b9a8      	cbnz	r0, 1ec24 <uarte_0_init+0xd8>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1ebf8:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1ebfa:	0719      	lsls	r1, r3, #28
   1ebfc:	d527      	bpl.n	1ec4e <uarte_0_init+0x102>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1ebfe:	f106 0012 	add.w	r0, r6, #18
   1ec02:	f000 fd6d 	bl	1f6e0 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1ec06:	4b27      	ldr	r3, [pc, #156]	; (1eca4 <uarte_0_init+0x158>)
   1ec08:	4298      	cmp	r0, r3
   1ec0a:	d00d      	beq.n	1ec28 <uarte_0_init+0xdc>
   1ec0c:	4b26      	ldr	r3, [pc, #152]	; (1eca8 <uarte_0_init+0x15c>)
   1ec0e:	4927      	ldr	r1, [pc, #156]	; (1ecac <uarte_0_init+0x160>)
		LOG_ERR("Failed to allocate PPI Channel");
   1ec10:	4827      	ldr	r0, [pc, #156]	; (1ecb0 <uarte_0_init+0x164>)
   1ec12:	1ac9      	subs	r1, r1, r3
   1ec14:	08c9      	lsrs	r1, r1, #3
   1ec16:	0189      	lsls	r1, r1, #6
   1ec18:	f041 0101 	orr.w	r1, r1, #1
   1ec1c:	f002 ff65 	bl	21aea <log_0>
		return -EIO;
   1ec20:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
   1ec24:	4638      	mov	r0, r7
   1ec26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   1ec28:	7cb0      	ldrb	r0, [r6, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1ec2a:	00c3      	lsls	r3, r0, #3
   1ec2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1ec30:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   1ec34:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1ec38:	f504 7190 	add.w	r1, r4, #288	; 0x120
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1ec3c:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1ec40:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   1ec44:	4a1b      	ldr	r2, [pc, #108]	; (1ecb4 <uarte_0_init+0x168>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1ec46:	2301      	movs	r3, #1
   1ec48:	4083      	lsls	r3, r0
   1ec4a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1ec4e:	2308      	movs	r3, #8
   1ec50:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (cfg->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   1ec54:	68eb      	ldr	r3, [r5, #12]
   1ec56:	3301      	adds	r3, #1
   1ec58:	d00c      	beq.n	1ec74 <uarte_0_init+0x128>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ec5a:	2300      	movs	r3, #0
   1ec5c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1ec60:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1ec64:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1ec68:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1ec6c:	2301      	movs	r3, #1
   1ec6e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ec72:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1ec74:	686b      	ldr	r3, [r5, #4]
   1ec76:	071a      	lsls	r2, r3, #28
    p_reg->INTENSET = mask;
   1ec78:	bf5c      	itt	pl
   1ec7a:	f44f 7280 	movpl.w	r2, #256	; 0x100
   1ec7e:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1ec82:	06db      	lsls	r3, r3, #27
   1ec84:	bf44      	itt	mi
   1ec86:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1ec8a:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   1ec8e:	3610      	adds	r6, #16
    p_reg->TXD.MAXCNT = length;
   1ec90:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1ec92:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1ec96:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ec9a:	2301      	movs	r3, #1
   1ec9c:	60a3      	str	r3, [r4, #8]
   1ec9e:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   1eca0:	e7c0      	b.n	1ec24 <uarte_0_init+0xd8>
   1eca2:	bf00      	nop
   1eca4:	0bad0000 	.word	0x0bad0000
   1eca8:	00029870 	.word	0x00029870
   1ecac:	00029aa8 	.word	0x00029aa8
   1ecb0:	0002fd96 	.word	0x0002fd96
   1ecb4:	4001f000 	.word	0x4001f000

0001ecb8 <random_byte_get>:
	__asm__ volatile(
   1ecb8:	f04f 0320 	mov.w	r3, #32
   1ecbc:	f3ef 8211 	mrs	r2, BASEPRI
   1ecc0:	f383 8812 	msr	BASEPRI_MAX, r3
   1ecc4:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1ecc8:	4b09      	ldr	r3, [pc, #36]	; (1ecf0 <random_byte_get+0x38>)
   1ecca:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1ecce:	b161      	cbz	r1, 1ecea <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1ecd0:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1ecd2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1ecd6:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   1ecda:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   1ecde:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1ece0:	f382 8811 	msr	BASEPRI, r2
   1ece4:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1ece8:	4770      	bx	lr
	int retval = -EAGAIN;
   1ecea:	f06f 000a 	mvn.w	r0, #10
   1ecee:	e7f7      	b.n	1ece0 <random_byte_get+0x28>
   1ecf0:	4000d000 	.word	0x4000d000

0001ecf4 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1ecf4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ecf6:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   1ecf8:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   1ecfa:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1ecfc:	f04f 0020 	mov.w	r0, #32
   1ed00:	f3ef 8e11 	mrs	lr, BASEPRI
   1ed04:	f380 8812 	msr	BASEPRI_MAX, r0
   1ed08:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1ed0c:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1ed0e:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
   1ed12:	1ba4      	subs	r4, r4, r6
   1ed14:	403c      	ands	r4, r7
	if (available < len) {
   1ed16:	42a2      	cmp	r2, r4
		len = available;
   1ed18:	bf88      	it	hi
   1ed1a:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1ed1c:	18b0      	adds	r0, r6, r2
   1ed1e:	4038      	ands	r0, r7
	first = rngp->first_alloc;
   1ed20:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1ed22:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
   1ed24:	f38e 8811 	msr	BASEPRI, lr
   1ed28:	f3bf 8f6f 	isb	sy
   1ed2c:	1888      	adds	r0, r1, r2
	uint8_t *dst   = buf;
   1ed2e:	460a      	mov	r2, r1
	irq_unlock(key);

	while (likely(len--)) {
   1ed30:	4290      	cmp	r0, r2
   1ed32:	d119      	bne.n	1ed68 <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1ed34:	4566      	cmp	r6, ip
   1ed36:	d10d      	bne.n	1ed54 <rng_pool_get+0x60>
	__asm__ volatile(
   1ed38:	f04f 0520 	mov.w	r5, #32
   1ed3c:	f3ef 8011 	mrs	r0, BASEPRI
   1ed40:	f385 8812 	msr	BASEPRI_MAX, r5
   1ed44:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1ed48:	781d      	ldrb	r5, [r3, #0]
   1ed4a:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   1ed4c:	f380 8811 	msr	BASEPRI, r0
   1ed50:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1ed54:	1a52      	subs	r2, r2, r1
	available = available - len;
	if (available <= rngp->threshold) {
   1ed56:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   1ed58:	b290      	uxth	r0, r2
	available = available - len;
   1ed5a:	1a22      	subs	r2, r4, r0
	if (available <= rngp->threshold) {
   1ed5c:	4293      	cmp	r3, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1ed5e:	bf22      	ittt	cs
   1ed60:	4b06      	ldrcs	r3, [pc, #24]	; (1ed7c <rng_pool_get+0x88>)
   1ed62:	2201      	movcs	r2, #1
   1ed64:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1ed66:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1ed68:	eb03 0e05 	add.w	lr, r3, r5
		first = (first + 1) & mask;
   1ed6c:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1ed6e:	f89e e005 	ldrb.w	lr, [lr, #5]
   1ed72:	f802 eb01 	strb.w	lr, [r2], #1
		first = (first + 1) & mask;
   1ed76:	403d      	ands	r5, r7
   1ed78:	e7da      	b.n	1ed30 <rng_pool_get+0x3c>
   1ed7a:	bf00      	nop
   1ed7c:	4000d000 	.word	0x4000d000

0001ed80 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1ed80:	43db      	mvns	r3, r3
{
   1ed82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1ed86:	f013 0501 	ands.w	r5, r3, #1
{
   1ed8a:	460e      	mov	r6, r1
   1ed8c:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1ed8e:	d004      	beq.n	1ed9a <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1ed90:	4821      	ldr	r0, [pc, #132]	; (1ee18 <entropy_nrf5_get_entropy_isr+0x98>)
   1ed92:	f7ff ffaf 	bl	1ecf4 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1ed96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1ed9a:	b3a2      	cbz	r2, 1ee06 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   1ed9c:	f04f 0320 	mov.w	r3, #32
   1eda0:	f3ef 8811 	mrs	r8, BASEPRI
   1eda4:	f383 8812 	msr	BASEPRI_MAX, r3
   1eda8:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1edac:	200d      	movs	r0, #13
   1edae:	f7e5 fb31 	bl	4414 <arch_irq_is_enabled>
   1edb2:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1edb4:	200d      	movs	r0, #13
   1edb6:	f7e5 fb19 	bl	43ec <arch_irq_disable>
	__asm__ volatile(
   1edba:	f388 8811 	msr	BASEPRI, r8
   1edbe:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1edc2:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1ee1c <entropy_nrf5_get_entropy_isr+0x9c>
   1edc6:	f8df 9058 	ldr.w	r9, [pc, #88]	; 1ee20 <entropy_nrf5_get_entropy_isr+0xa0>
   1edca:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   1edce:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   1edd2:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1edd6:	2301      	movs	r3, #1
   1edd8:	f8c8 3000 	str.w	r3, [r8]
   1eddc:	4625      	mov	r5, r4
   1edde:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1ede2:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   1ede6:	b183      	cbz	r3, 1ee0a <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   1ede8:	f7ff ff66 	bl	1ecb8 <random_byte_get>
			if (byte < 0) {
   1edec:	1e03      	subs	r3, r0, #0
   1edee:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   1edf2:	dbf6      	blt.n	1ede2 <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   1edf4:	3d01      	subs	r5, #1
   1edf6:	b2ad      	uxth	r5, r5
   1edf8:	5573      	strb	r3, [r6, r5]
		} while (len);
   1edfa:	2d00      	cmp	r5, #0
   1edfc:	d1f1      	bne.n	1ede2 <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   1edfe:	b117      	cbz	r7, 1ee06 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   1ee00:	200d      	movs	r0, #13
   1ee02:	f7e5 fae3 	bl	43cc <arch_irq_enable>
	return cnt;
   1ee06:	4620      	mov	r0, r4
   1ee08:	e7c5      	b.n	1ed96 <entropy_nrf5_get_entropy_isr+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
   1ee0a:	f3bf 8f4f 	dsb	sy
				__WFE();
   1ee0e:	bf20      	wfe
				__SEV();
   1ee10:	bf40      	sev
				__WFE();
   1ee12:	bf20      	wfe
   1ee14:	e7e5      	b.n	1ede2 <entropy_nrf5_get_entropy_isr+0x62>
   1ee16:	bf00      	nop
   1ee18:	20003554 	.word	0x20003554
   1ee1c:	4000d000 	.word	0x4000d000
   1ee20:	e000e100 	.word	0xe000e100

0001ee24 <entropy_nrf5_get_entropy>:
{
   1ee24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   1ee28:	4f13      	ldr	r7, [pc, #76]	; (1ee78 <entropy_nrf5_get_entropy+0x54>)
   1ee2a:	460d      	mov	r5, r1
   1ee2c:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1ee2e:	f107 0845 	add.w	r8, r7, #69	; 0x45
   1ee32:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   1ee36:	b914      	cbnz	r4, 1ee3e <entropy_nrf5_get_entropy+0x1a>
}
   1ee38:	4620      	mov	r0, r4
   1ee3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ee3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ee42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ee46:	4638      	mov	r0, r7
   1ee48:	f001 f90a 	bl	20060 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1ee4c:	4622      	mov	r2, r4
   1ee4e:	4629      	mov	r1, r5
   1ee50:	4640      	mov	r0, r8
   1ee52:	f7ff ff4f 	bl	1ecf4 <rng_pool_get>
   1ee56:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   1ee58:	4638      	mov	r0, r7
   1ee5a:	f001 f8db 	bl	20014 <z_impl_k_sem_give>
		if (bytes == 0U) {
   1ee5e:	b93e      	cbnz	r6, 1ee70 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   1ee60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ee64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ee68:	4648      	mov	r0, r9
   1ee6a:	f001 f8f9 	bl	20060 <z_impl_k_sem_take>
			continue;
   1ee6e:	e7e2      	b.n	1ee36 <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   1ee70:	1ba4      	subs	r4, r4, r6
   1ee72:	b2a4      	uxth	r4, r4
		buf += bytes;
   1ee74:	4435      	add	r5, r6
   1ee76:	e7de      	b.n	1ee36 <entropy_nrf5_get_entropy+0x12>
   1ee78:	20003524 	.word	0x20003524

0001ee7c <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1ee7c:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1ee7e:	4c19      	ldr	r4, [pc, #100]	; (1eee4 <entropy_nrf5_init+0x68>)
   1ee80:	2201      	movs	r2, #1
   1ee82:	4611      	mov	r1, r2
   1ee84:	4620      	mov	r0, r4
   1ee86:	f009 fee6 	bl	28c56 <z_impl_k_sem_init>
   1ee8a:	2201      	movs	r2, #1
   1ee8c:	2100      	movs	r1, #0
   1ee8e:	f104 0018 	add.w	r0, r4, #24
   1ee92:	f009 fee0 	bl	28c56 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1ee96:	f240 4307 	movw	r3, #1031	; 0x407
   1ee9a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1ee9e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1eea2:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1eea4:	230c      	movs	r3, #12
   1eea6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1eeaa:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   1eeac:	4b0e      	ldr	r3, [pc, #56]	; (1eee8 <entropy_nrf5_init+0x6c>)
   1eeae:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1eeb2:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1eeb6:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1eeba:	f042 0201 	orr.w	r2, r2, #1
   1eebe:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   1eec2:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1eec4:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   1eec8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1eecc:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1eed0:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1eed2:	6019      	str	r1, [r3, #0]
   1eed4:	200d      	movs	r0, #13
   1eed6:	f7e5 faab 	bl	4430 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1eeda:	200d      	movs	r0, #13
   1eedc:	f7e5 fa76 	bl	43cc <arch_irq_enable>

	return 0;
}
   1eee0:	4628      	mov	r0, r5
   1eee2:	bd38      	pop	{r3, r4, r5, pc}
   1eee4:	20003524 	.word	0x20003524
   1eee8:	4000d000 	.word	0x4000d000

0001eeec <isr>:
{
   1eeec:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1eeee:	f7ff fee3 	bl	1ecb8 <random_byte_get>
	if (byte < 0) {
   1eef2:	2800      	cmp	r0, #0
   1eef4:	db20      	blt.n	1ef38 <isr+0x4c>
	uint8_t last  = rngp->last;
   1eef6:	4b17      	ldr	r3, [pc, #92]	; (1ef54 <isr+0x68>)
   1eef8:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1eefc:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1ef00:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1ef04:	1a51      	subs	r1, r2, r1
   1ef06:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1ef0a:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1ef0c:	d10d      	bne.n	1ef2a <isr+0x3e>
	uint8_t last  = rngp->last;
   1ef0e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1ef12:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1ef16:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1ef1a:	1a51      	subs	r1, r2, r1
   1ef1c:	ea34 0101 	bics.w	r1, r4, r1
   1ef20:	d10b      	bne.n	1ef3a <isr+0x4e>
   1ef22:	4b0d      	ldr	r3, [pc, #52]	; (1ef58 <isr+0x6c>)
   1ef24:	2201      	movs	r2, #1
   1ef26:	605a      	str	r2, [r3, #4]
}
   1ef28:	e00e      	b.n	1ef48 <isr+0x5c>
	rngp->buffer[last] = byte;
   1ef2a:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1ef2c:	3201      	adds	r2, #1
   1ef2e:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1ef30:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1ef34:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   1ef38:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1ef3a:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1ef3c:	3201      	adds	r2, #1
   1ef3e:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1ef40:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1ef44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1ef48:	4804      	ldr	r0, [pc, #16]	; (1ef5c <isr+0x70>)
}
   1ef4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ef4e:	f001 b861 	b.w	20014 <z_impl_k_sem_give>
   1ef52:	bf00      	nop
   1ef54:	20003524 	.word	0x20003524
   1ef58:	4000d000 	.word	0x4000d000
   1ef5c:	2000353c 	.word	0x2000353c

0001ef60 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
   1ef60:	4a04      	ldr	r2, [pc, #16]	; (1ef74 <sys_clock_timeout_handler+0x14>)
   1ef62:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   1ef64:	1ac8      	subs	r0, r1, r3
   1ef66:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   1ef6a:	4403      	add	r3, r0
   1ef6c:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1ef6e:	f001 becf 	b.w	20d10 <sys_clock_announce>
   1ef72:	bf00      	nop
   1ef74:	20003584 	.word	0x20003584

0001ef78 <set_absolute_alarm>:
{
   1ef78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ef7c:	0086      	lsls	r6, r0, #2
   1ef7e:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1ef82:	f100 0450 	add.w	r4, r0, #80	; 0x50
   1ef86:	f506 3688 	add.w	r6, r6, #69632	; 0x11000
   1ef8a:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1ef8c:	b2a4      	uxth	r4, r4
   1ef8e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1ef92:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return p_reg->CC[ch];
   1ef96:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
   1ef9a:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1f008 <set_absolute_alarm+0x90>
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1ef9e:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1efa2:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1efa6:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
   1efa8:	f8d8 9504 	ldr.w	r9, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1efac:	eba3 0309 	sub.w	r3, r3, r9
   1efb0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1efb4:	f029 427f 	bic.w	r2, r9, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   1efb8:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
   1efba:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
   1efbe:	d102      	bne.n	1efc6 <set_absolute_alarm+0x4e>
	z_impl_k_busy_wait(usec_to_wait);
   1efc0:	2013      	movs	r0, #19
   1efc2:	f00a f8b9 	bl	29138 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1efc6:	f109 0202 	add.w	r2, r9, #2
	return (a - b) & COUNTER_MAX;
   1efca:	1aab      	subs	r3, r5, r2
   1efcc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
   1efd0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   1efd4:	bf88      	it	hi
   1efd6:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1efd8:	2300      	movs	r3, #0
   1efda:	6023      	str	r3, [r4, #0]
   1efdc:	6823      	ldr	r3, [r4, #0]
    p_reg->EVTENSET = mask;
   1efde:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1efe2:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1efe6:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
   1efea:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   1efee:	4599      	cmp	r9, r3
   1eff0:	d006      	beq.n	1f000 <set_absolute_alarm+0x88>
	return (a - b) & COUNTER_MAX;
   1eff2:	1aeb      	subs	r3, r5, r3
   1eff4:	3b02      	subs	r3, #2
   1eff6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   1effa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   1effe:	d801      	bhi.n	1f004 <set_absolute_alarm+0x8c>
}
   1f000:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		prev_cc = cc_val;
   1f004:	462b      	mov	r3, r5
   1f006:	e7cf      	b.n	1efa8 <set_absolute_alarm+0x30>
   1f008:	40011000 	.word	0x40011000

0001f00c <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   1f00c:	b570      	push	{r4, r5, r6, lr}
   1f00e:	4d15      	ldr	r5, [pc, #84]	; (1f064 <rtc_nrf_isr+0x58>)
    return p_reg->INTENSET & mask;
   1f010:	4c15      	ldr	r4, [pc, #84]	; (1f068 <rtc_nrf_isr+0x5c>)
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1f012:	2600      	movs	r6, #0
   1f014:	682b      	ldr	r3, [r5, #0]
   1f016:	2000      	movs	r0, #0
   1f018:	b106      	cbz	r6, 1f01c <rtc_nrf_isr+0x10>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
   1f01a:	bd70      	pop	{r4, r5, r6, pc}
   1f01c:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
   1f020:	03d2      	lsls	r2, r2, #15
   1f022:	d5fa      	bpl.n	1f01a <rtc_nrf_isr+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f024:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
   1f028:	2a00      	cmp	r2, #0
   1f02a:	d0f6      	beq.n	1f01a <rtc_nrf_isr+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1f02c:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
   1f030:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    p_reg->EVTENCLR = mask;
   1f034:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1f038:	f8c4 2348 	str.w	r2, [r4, #840]	; 0x348
    return p_reg->CC[ch];
   1f03c:	f8d4 1540 	ldr.w	r1, [r4, #1344]	; 0x540
     return p_reg->COUNTER;
   1f040:	f8d4 6504 	ldr.w	r6, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1f044:	1a72      	subs	r2, r6, r1
   1f046:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
				cc_val = now;
   1f04a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   1f04e:	bf88      	it	hi
   1f050:	4631      	movhi	r1, r6
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1f052:	2601      	movs	r6, #1
			if (handler) {
   1f054:	b11b      	cbz	r3, 1f05e <rtc_nrf_isr+0x52>
				handler(chan, cc_val,
   1f056:	686a      	ldr	r2, [r5, #4]
   1f058:	6028      	str	r0, [r5, #0]
   1f05a:	4798      	blx	r3
   1f05c:	e7da      	b.n	1f014 <rtc_nrf_isr+0x8>
   1f05e:	602b      	str	r3, [r5, #0]
}
   1f060:	e7db      	b.n	1f01a <rtc_nrf_isr+0xe>
   1f062:	bf00      	nop
   1f064:	20003578 	.word	0x20003578
   1f068:	40011000 	.word	0x40011000

0001f06c <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
   1f06c:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
   1f06e:	4c0f      	ldr	r4, [pc, #60]	; (1f0ac <sys_clock_driver_init+0x40>)
   1f070:	2500      	movs	r5, #0
    p_reg->INTENSET = mask;
   1f072:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
   1f076:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    p_reg->INTENSET = mask;
   1f07a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   1f07e:	4b0c      	ldr	r3, [pc, #48]	; (1f0b0 <sys_clock_driver_init+0x44>)
   1f080:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1f084:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1f088:	2101      	movs	r1, #1
   1f08a:	462a      	mov	r2, r5
   1f08c:	2011      	movs	r0, #17
   1f08e:	f7e5 f9cf 	bl	4430 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1f092:	2011      	movs	r0, #17
   1f094:	f7e5 f99a 	bl	43cc <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1f098:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1f09a:	4a06      	ldr	r2, [pc, #24]	; (1f0b4 <sys_clock_driver_init+0x48>)
   1f09c:	60a3      	str	r3, [r4, #8]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
   1f09e:	2002      	movs	r0, #2
   1f0a0:	6023      	str	r3, [r4, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
   1f0a2:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
   1f0a4:	f7fe ffd0 	bl	1e048 <z_nrf_clock_control_lf_on>

	return 0;
}
   1f0a8:	4628      	mov	r0, r5
   1f0aa:	bd38      	pop	{r3, r4, r5, pc}
   1f0ac:	40011000 	.word	0x40011000
   1f0b0:	e000e100 	.word	0xe000e100
   1f0b4:	20003580 	.word	0x20003580

0001f0b8 <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1f0b8:	4a13      	ldr	r2, [pc, #76]	; (1f108 <sys_clock_set_timeout+0x50>)
   1f0ba:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1f0be:	bf14      	ite	ne
   1f0c0:	4603      	movne	r3, r0
   1f0c2:	4613      	moveq	r3, r2
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1f0c4:	3b01      	subs	r3, #1
   1f0c6:	2b00      	cmp	r3, #0
   1f0c8:	dd1c      	ble.n	1f104 <sys_clock_set_timeout+0x4c>
   1f0ca:	4293      	cmp	r3, r2
   1f0cc:	bfa8      	it	ge
   1f0ce:	4613      	movge	r3, r2
     return p_reg->COUNTER;
   1f0d0:	4a0e      	ldr	r2, [pc, #56]	; (1f10c <sys_clock_set_timeout+0x54>)
   1f0d2:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
   1f0d6:	4a0e      	ldr	r2, [pc, #56]	; (1f110 <sys_clock_set_timeout+0x58>)
   1f0d8:	6811      	ldr	r1, [r2, #0]
	return (a - b) & COUNTER_MAX;
   1f0da:	1a40      	subs	r0, r0, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
   1f0dc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
   1f0e0:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
		ticks = 0;
   1f0e4:	bf18      	it	ne
   1f0e6:	2300      	movne	r3, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1f0e8:	3201      	adds	r2, #1
   1f0ea:	4413      	add	r3, r2
	cc_data[chan].callback = handler;
   1f0ec:	4a09      	ldr	r2, [pc, #36]	; (1f114 <sys_clock_set_timeout+0x5c>)
   1f0ee:	480a      	ldr	r0, [pc, #40]	; (1f118 <sys_clock_set_timeout+0x60>)
   1f0f0:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
   1f0f2:	2000      	movs	r0, #0
   1f0f4:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
   1f0f6:	4a04      	ldr	r2, [pc, #16]	; (1f108 <sys_clock_set_timeout+0x50>)
   1f0f8:	4293      	cmp	r3, r2
   1f0fa:	bf94      	ite	ls
   1f0fc:	18c9      	addls	r1, r1, r3
   1f0fe:	1889      	addhi	r1, r1, r2
   1f100:	f7ff bf3a 	b.w	1ef78 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1f104:	2300      	movs	r3, #0
   1f106:	e7e3      	b.n	1f0d0 <sys_clock_set_timeout+0x18>
   1f108:	007fffff 	.word	0x007fffff
   1f10c:	40011000 	.word	0x40011000
   1f110:	20003584 	.word	0x20003584
   1f114:	20003578 	.word	0x20003578
   1f118:	0001ef61 	.word	0x0001ef61

0001f11c <sys_clock_elapsed>:
   1f11c:	4b04      	ldr	r3, [pc, #16]	; (1f130 <sys_clock_elapsed+0x14>)
   1f11e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
{
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return counter_sub(counter(), last_count) / CYC_PER_TICK;
   1f122:	4b04      	ldr	r3, [pc, #16]	; (1f134 <sys_clock_elapsed+0x18>)
	return (a - b) & COUNTER_MAX;
   1f124:	681b      	ldr	r3, [r3, #0]
   1f126:	1ac0      	subs	r0, r0, r3
}
   1f128:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1f12c:	4770      	bx	lr
   1f12e:	bf00      	nop
   1f130:	40011000 	.word	0x40011000
   1f134:	20003584 	.word	0x20003584

0001f138 <sys_clock_cycle_get_32>:
	__asm__ volatile(
   1f138:	f04f 0320 	mov.w	r3, #32
   1f13c:	f3ef 8211 	mrs	r2, BASEPRI
   1f140:	f383 8812 	msr	BASEPRI_MAX, r3
   1f144:	f3bf 8f6f 	isb	sy

uint32_t sys_clock_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   1f148:	4906      	ldr	r1, [pc, #24]	; (1f164 <sys_clock_cycle_get_32+0x2c>)
   1f14a:	4b07      	ldr	r3, [pc, #28]	; (1f168 <sys_clock_cycle_get_32+0x30>)
   1f14c:	6808      	ldr	r0, [r1, #0]
   1f14e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
   1f152:	f382 8811 	msr	BASEPRI, r2
   1f156:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
   1f15a:	1a1b      	subs	r3, r3, r0
   1f15c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
   1f160:	4418      	add	r0, r3
   1f162:	4770      	bx	lr
   1f164:	20003584 	.word	0x20003584
   1f168:	40011000 	.word	0x40011000

0001f16c <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1f16c:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   1f170:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1f174:	2a06      	cmp	r2, #6
   1f176:	d109      	bne.n	1f18c <nrf52_errata_16+0x20>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1f178:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   1f17c:	f3c3 1303 	ubfx	r3, r3, #4, #4
   1f180:	3b03      	subs	r3, #3
   1f182:	2b04      	cmp	r3, #4
   1f184:	d802      	bhi.n	1f18c <nrf52_errata_16+0x20>
   1f186:	4a02      	ldr	r2, [pc, #8]	; (1f190 <nrf52_errata_16+0x24>)
   1f188:	5cd0      	ldrb	r0, [r2, r3]
   1f18a:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1f18c:	2000      	movs	r0, #0
    #endif
}
   1f18e:	4770      	bx	lr
   1f190:	0002fde5 	.word	0x0002fde5

0001f194 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1f194:	4a02      	ldr	r2, [pc, #8]	; (1f1a0 <nvmc_wait+0xc>)
   1f196:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1f19a:	2b00      	cmp	r3, #0
   1f19c:	d0fb      	beq.n	1f196 <nvmc_wait+0x2>
}
   1f19e:	4770      	bx	lr
   1f1a0:	4001e000 	.word	0x4001e000

0001f1a4 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1f1a4:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
   1f1a6:	f009 fb0a 	bl	287be <nrf52_errata_108>
   1f1aa:	b140      	cbz	r0, 1f1be <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   1f1ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f1b0:	4a90      	ldr	r2, [pc, #576]	; (1f3f4 <SystemInit+0x250>)
   1f1b2:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
   1f1b6:	f3c3 2304 	ubfx	r3, r3, #8, #5
   1f1ba:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
   1f1be:	f7ff ffd5 	bl	1f16c <nrf52_errata_16>
   1f1c2:	b110      	cbz	r0, 1f1ca <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   1f1c4:	4b8c      	ldr	r3, [pc, #560]	; (1f3f8 <SystemInit+0x254>)
   1f1c6:	4a8d      	ldr	r2, [pc, #564]	; (1f3fc <SystemInit+0x258>)
   1f1c8:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
   1f1ca:	f009 faf8 	bl	287be <nrf52_errata_108>
   1f1ce:	b148      	cbz	r0, 1f1e4 <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   1f1d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f1d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1f1d8:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
   1f1dc:	f3c3 3342 	ubfx	r3, r3, #13, #3
   1f1e0:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
   1f1e4:	f7ff ffc2 	bl	1f16c <nrf52_errata_16>
   1f1e8:	b130      	cbz	r0, 1f1f8 <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   1f1ea:	4a85      	ldr	r2, [pc, #532]	; (1f400 <SystemInit+0x25c>)
   1f1ec:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
   1f1f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1f1f4:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   1f1f8:	f009 fae1 	bl	287be <nrf52_errata_108>
   1f1fc:	b140      	cbz	r0, 1f210 <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
   1f1fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f202:	2200      	movs	r2, #0
   1f204:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1f208:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1f20c:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
   1f210:	f7ff ffac 	bl	1f16c <nrf52_errata_16>
   1f214:	b120      	cbz	r0, 1f220 <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
   1f216:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f21a:	2203      	movs	r2, #3
   1f21c:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
   1f220:	f7ff ffa4 	bl	1f16c <nrf52_errata_16>
   1f224:	b160      	cbz	r0, 1f240 <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
   1f226:	4b77      	ldr	r3, [pc, #476]	; (1f404 <SystemInit+0x260>)
   1f228:	2205      	movs	r2, #5
   1f22a:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
   1f22e:	2201      	movs	r2, #1
   1f230:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
   1f234:	2200      	movs	r2, #0
   1f236:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
   1f23a:	223f      	movs	r2, #63	; 0x3f
   1f23c:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1f240:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f244:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1f248:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1f24a:	bf09      	itett	eq
   1f24c:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   1f250:	f8d3 3134 	ldrne.w	r3, [r3, #308]	; 0x134
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1f254:	f893 2fe0 	ldrbeq.w	r2, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1f258:	f8d3 3fe8 	ldreq.w	r3, [r3, #4072]	; 0xfe8
   1f25c:	bf08      	it	eq
   1f25e:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1f262:	2a06      	cmp	r2, #6
   1f264:	d14d      	bne.n	1f302 <SystemInit+0x15e>
            {
                switch(var2)
   1f266:	3b03      	subs	r3, #3
   1f268:	2b04      	cmp	r3, #4
   1f26a:	d803      	bhi.n	1f274 <SystemInit+0xd0>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1f26c:	4a66      	ldr	r2, [pc, #408]	; (1f408 <SystemInit+0x264>)
   1f26e:	5cd3      	ldrb	r3, [r2, r3]
   1f270:	2b00      	cmp	r3, #0
   1f272:	d046      	beq.n	1f302 <SystemInit+0x15e>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1f274:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1f278:	4b64      	ldr	r3, [pc, #400]	; (1f40c <SystemInit+0x268>)
   1f27a:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1f27e:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1f282:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1f286:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1f28a:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1f28e:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1f292:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1f296:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1f29a:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1f29e:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1f2a2:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1f2a6:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1f2aa:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1f2ae:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1f2b2:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1f2b6:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1f2ba:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1f2be:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1f2c2:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1f2c6:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1f2ca:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1f2ce:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1f2d2:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1f2d6:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1f2da:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1f2de:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1f2e2:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1f2e6:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1f2ea:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1f2ee:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1f2f2:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1f2f6:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1f2fa:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1f2fe:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
   1f302:	f009 fa5c 	bl	287be <nrf52_errata_108>
   1f306:	b148      	cbz	r0, 1f31c <SystemInit+0x178>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   1f308:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f30c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1f310:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   1f314:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   1f318:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   1f31c:	f009 fa4f 	bl	287be <nrf52_errata_108>
   1f320:	b148      	cbz	r0, 1f336 <SystemInit+0x192>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1f322:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f326:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1f32a:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1f32c:	bf44      	itt	mi
   1f32e:	f06f 0201 	mvnmi.w	r2, #1
   1f332:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1f336:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1f33a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1f33e:	2a06      	cmp	r2, #6
   1f340:	d126      	bne.n	1f390 <SystemInit+0x1ec>
            {
                switch(var2)
   1f342:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   1f346:	3b03      	subs	r3, #3
   1f348:	2b04      	cmp	r3, #4
   1f34a:	d802      	bhi.n	1f352 <SystemInit+0x1ae>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
   1f34c:	4a30      	ldr	r2, [pc, #192]	; (1f410 <SystemInit+0x26c>)
   1f34e:	5cd3      	ldrb	r3, [r2, r3]
   1f350:	b163      	cbz	r3, 1f36c <SystemInit+0x1c8>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   1f352:	4a30      	ldr	r2, [pc, #192]	; (1f414 <SystemInit+0x270>)
   1f354:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
   1f358:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1f35c:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1f360:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1f364:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   1f368:	2b06      	cmp	r3, #6
   1f36a:	d111      	bne.n	1f390 <SystemInit+0x1ec>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1f36c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f370:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   1f374:	3b03      	subs	r3, #3
   1f376:	2b04      	cmp	r3, #4
   1f378:	d802      	bhi.n	1f380 <SystemInit+0x1dc>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
   1f37a:	4a27      	ldr	r2, [pc, #156]	; (1f418 <SystemInit+0x274>)
   1f37c:	5cd3      	ldrb	r3, [r2, r3]
   1f37e:	b13b      	cbz	r3, 1f390 <SystemInit+0x1ec>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   1f380:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1f384:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   1f388:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f38c:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1f390:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1f394:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1f398:	2a00      	cmp	r2, #0
   1f39a:	db03      	blt.n	1f3a4 <SystemInit+0x200>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1f39c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1f3a0:	2b00      	cmp	r3, #0
   1f3a2:	da22      	bge.n	1f3ea <SystemInit+0x246>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1f3a4:	491d      	ldr	r1, [pc, #116]	; (1f41c <SystemInit+0x278>)
   1f3a6:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1f3a8:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1f3ac:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1f3b0:	2415      	movs	r4, #21
    nvmc_wait();
   1f3b2:	f7ff feef 	bl	1f194 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1f3b6:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1f3ba:	f7ff feeb 	bl	1f194 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1f3be:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1f3c2:	f7ff fee7 	bl	1f194 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1f3c6:	2300      	movs	r3, #0
   1f3c8:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1f3cc:	f7ff fee2 	bl	1f194 <nvmc_wait>
   1f3d0:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1f3d4:	490a      	ldr	r1, [pc, #40]	; (1f400 <SystemInit+0x25c>)
   1f3d6:	4b12      	ldr	r3, [pc, #72]	; (1f420 <SystemInit+0x27c>)
   1f3d8:	68ca      	ldr	r2, [r1, #12]
   1f3da:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1f3de:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1f3e0:	60cb      	str	r3, [r1, #12]
   1f3e2:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1f3e6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1f3e8:	e7fd      	b.n	1f3e6 <SystemInit+0x242>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1f3ea:	4b0e      	ldr	r3, [pc, #56]	; (1f424 <SystemInit+0x280>)
   1f3ec:	4a0e      	ldr	r2, [pc, #56]	; (1f428 <SystemInit+0x284>)
   1f3ee:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1f3f0:	bd10      	pop	{r4, pc}
   1f3f2:	bf00      	nop
   1f3f4:	40013000 	.word	0x40013000
   1f3f8:	4007c000 	.word	0x4007c000
   1f3fc:	baadf00d 	.word	0xbaadf00d
   1f400:	e000ed00 	.word	0xe000ed00
   1f404:	40005000 	.word	0x40005000
   1f408:	0002fdd6 	.word	0x0002fdd6
   1f40c:	4000c000 	.word	0x4000c000
   1f410:	0002fddb 	.word	0x0002fddb
   1f414:	40001000 	.word	0x40001000
   1f418:	0002fde0 	.word	0x0002fde0
   1f41c:	4001e000 	.word	0x4001e000
   1f420:	05fa0004 	.word	0x05fa0004
   1f424:	20000f00 	.word	0x20000f00
   1f428:	03d09000 	.word	0x03d09000

0001f42c <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   1f42c:	4b04      	ldr	r3, [pc, #16]	; (1f440 <nrfx_clock_init+0x14>)
   1f42e:	791a      	ldrb	r2, [r3, #4]
   1f430:	b922      	cbnz	r2, 1f43c <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   1f432:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   1f434:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   1f436:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   1f438:	4802      	ldr	r0, [pc, #8]	; (1f444 <nrfx_clock_init+0x18>)
   1f43a:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   1f43c:	4802      	ldr	r0, [pc, #8]	; (1f448 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1f43e:	4770      	bx	lr
   1f440:	20003588 	.word	0x20003588
   1f444:	0bad0000 	.word	0x0bad0000
   1f448:	0bad000c 	.word	0x0bad000c

0001f44c <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   1f44c:	b530      	push	{r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   1f44e:	b110      	cbz	r0, 1f456 <nrfx_clock_start+0xa>
   1f450:	2801      	cmp	r0, #1
   1f452:	d034      	beq.n	1f4be <nrfx_clock_start+0x72>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   1f454:	bd30      	pop	{r4, r5, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1f456:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f45a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1f45e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   1f462:	03c9      	lsls	r1, r1, #15
   1f464:	d529      	bpl.n	1f4ba <nrfx_clock_start+0x6e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1f466:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   1f46a:	2a01      	cmp	r2, #1
   1f46c:	d125      	bne.n	1f4ba <nrfx_clock_start+0x6e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1f46e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f472:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f476:	2200      	movs	r2, #0
   1f478:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1f47c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   1f480:	2202      	movs	r2, #2
   1f482:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    core_debug = CoreDebug->DEMCR;
   1f486:	4a13      	ldr	r2, [pc, #76]	; (1f4d4 <nrfx_clock_start+0x88>)
   1f488:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
   1f48c:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
   1f490:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    dwt_ctrl = DWT->CTRL;
   1f494:	4b10      	ldr	r3, [pc, #64]	; (1f4d8 <nrfx_clock_start+0x8c>)
   1f496:	681c      	ldr	r4, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
   1f498:	f044 0101 	orr.w	r1, r4, #1
   1f49c:	6019      	str	r1, [r3, #0]
    cyccnt_inital = DWT->CYCCNT;
   1f49e:	685d      	ldr	r5, [r3, #4]
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
   1f4a0:	6859      	ldr	r1, [r3, #4]
   1f4a2:	1b49      	subs	r1, r1, r5
   1f4a4:	f5b1 5f0a 	cmp.w	r1, #8832	; 0x2280
   1f4a8:	d3fa      	bcc.n	1f4a0 <nrfx_clock_start+0x54>
    DWT->CTRL = dwt_ctrl;
   1f4aa:	601c      	str	r4, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f4ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    CoreDebug->DEMCR = core_debug;
   1f4b0:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
   1f4b4:	2201      	movs	r2, #1
   1f4b6:	609a      	str	r2, [r3, #8]
}
   1f4b8:	e7cc      	b.n	1f454 <nrfx_clock_start+0x8>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1f4ba:	2200      	movs	r2, #0
   1f4bc:	e7d7      	b.n	1f46e <nrfx_clock_start+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f4be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f4c2:	2200      	movs	r2, #0
   1f4c4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1f4c8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1f4cc:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f4d0:	6018      	str	r0, [r3, #0]
}
   1f4d2:	e7bf      	b.n	1f454 <nrfx_clock_start+0x8>
   1f4d4:	e000ed00 	.word	0xe000ed00
   1f4d8:	e0001000 	.word	0xe0001000

0001f4dc <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1f4dc:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   1f4de:	b110      	cbz	r0, 1f4e6 <nrfx_clock_stop+0xa>
   1f4e0:	2801      	cmp	r0, #1
   1f4e2:	d017      	beq.n	1f514 <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   1f4e4:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   1f4e6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   1f4ea:	2302      	movs	r3, #2
   1f4ec:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f4f0:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   1f4f4:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f4f8:	2301      	movs	r3, #1
   1f4fa:	60e3      	str	r3, [r4, #12]
   1f4fc:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1f500:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   1f504:	03db      	lsls	r3, r3, #15
   1f506:	d5ed      	bpl.n	1f4e4 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   1f508:	2001      	movs	r0, #1
   1f50a:	f009 f967 	bl	287dc <nrfx_busy_wait>
   1f50e:	3d01      	subs	r5, #1
   1f510:	d1f6      	bne.n	1f500 <nrfx_clock_stop+0x24>
   1f512:	e7e7      	b.n	1f4e4 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
   1f514:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f518:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   1f51a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f51e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1f522:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f526:	6060      	str	r0, [r4, #4]
   1f528:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1f52c:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1f530:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
   1f534:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1f536:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1f53a:	d505      	bpl.n	1f548 <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   1f53c:	b123      	cbz	r3, 1f548 <nrfx_clock_stop+0x6c>
   1f53e:	2001      	movs	r0, #1
   1f540:	f009 f94c 	bl	287dc <nrfx_busy_wait>
   1f544:	3d01      	subs	r5, #1
   1f546:	d1f1      	bne.n	1f52c <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
   1f548:	4b01      	ldr	r3, [pc, #4]	; (1f550 <nrfx_clock_stop+0x74>)
   1f54a:	2200      	movs	r2, #0
   1f54c:	715a      	strb	r2, [r3, #5]
   1f54e:	e7c9      	b.n	1f4e4 <nrfx_clock_stop+0x8>
   1f550:	20003588 	.word	0x20003588

0001f554 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1f554:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   1f558:	b510      	push	{r4, lr}
   1f55a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1f55e:	b16a      	cbz	r2, 1f57c <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f560:	2200      	movs	r2, #0
   1f562:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1f566:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   1f56a:	2201      	movs	r2, #1
   1f56c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   1f570:	4b11      	ldr	r3, [pc, #68]	; (1f5b8 <nrfx_power_clock_irq_handler+0x64>)
   1f572:	7958      	ldrb	r0, [r3, #5]
   1f574:	b910      	cbnz	r0, 1f57c <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
   1f576:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1f578:	681b      	ldr	r3, [r3, #0]
   1f57a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1f57c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f580:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   1f584:	b172      	cbz	r2, 1f5a4 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f586:	2200      	movs	r2, #0
   1f588:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1f58c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1f590:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1f594:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   1f598:	0792      	lsls	r2, r2, #30
   1f59a:	d104      	bne.n	1f5a6 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1f59c:	2201      	movs	r2, #1
   1f59e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f5a2:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   1f5a4:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   1f5a6:	2202      	movs	r2, #2
   1f5a8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1f5ac:	4b02      	ldr	r3, [pc, #8]	; (1f5b8 <nrfx_power_clock_irq_handler+0x64>)
}
   1f5ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1f5b2:	681b      	ldr	r3, [r3, #0]
   1f5b4:	2001      	movs	r0, #1
   1f5b6:	4718      	bx	r3
   1f5b8:	20003588 	.word	0x20003588

0001f5bc <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   1f5bc:	2301      	movs	r3, #1
   1f5be:	fa03 f000 	lsl.w	r0, r3, r0
   1f5c2:	b2c3      	uxtb	r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   1f5c4:	b193      	cbz	r3, 1f5ec <nrfx_gpiote_channel_free+0x30>
	__asm__ volatile(
   1f5c6:	f04f 0320 	mov.w	r3, #32
   1f5ca:	f3ef 8111 	mrs	r1, BASEPRI
   1f5ce:	f383 8812 	msr	BASEPRI_MAX, r3
   1f5d2:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   1f5d6:	4a06      	ldr	r2, [pc, #24]	; (1f5f0 <nrfx_gpiote_channel_free+0x34>)
   1f5d8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   1f5da:	ea23 0000 	bic.w	r0, r3, r0
   1f5de:	64d0      	str	r0, [r2, #76]	; 0x4c
	__asm__ volatile(
   1f5e0:	f381 8811 	msr	BASEPRI, r1
   1f5e4:	f3bf 8f6f 	isb	sy
   1f5e8:	4802      	ldr	r0, [pc, #8]	; (1f5f4 <nrfx_gpiote_channel_free+0x38>)
   1f5ea:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   1f5ec:	4802      	ldr	r0, [pc, #8]	; (1f5f8 <nrfx_gpiote_channel_free+0x3c>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1f5ee:	4770      	bx	lr
   1f5f0:	20003590 	.word	0x20003590
   1f5f4:	0bad0000 	.word	0x0bad0000
   1f5f8:	0bad0004 	.word	0x0bad0004

0001f5fc <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   1f5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f600:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   1f602:	f8df e05c 	ldr.w	lr, [pc, #92]	; 1f660 <nrfx_gpiote_channel_alloc+0x64>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   1f606:	4817      	ldr	r0, [pc, #92]	; (1f664 <nrfx_gpiote_channel_alloc+0x68>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   1f608:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1f668 <nrfx_gpiote_channel_alloc+0x6c>
{
   1f60c:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   1f60e:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
   1f610:	2601      	movs	r6, #1
   1f612:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   1f614:	f04f 0120 	mov.w	r1, #32
   1f618:	f3ef 8c11 	mrs	ip, BASEPRI
   1f61c:	f381 8812 	msr	BASEPRI_MAX, r1
   1f620:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   1f624:	fa22 f103 	lsr.w	r1, r2, r3
   1f628:	07c9      	lsls	r1, r1, #31
   1f62a:	d50a      	bpl.n	1f642 <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   1f62c:	f8de 104c 	ldr.w	r1, [lr, #76]	; 0x4c
   1f630:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   1f634:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
   1f636:	bf01      	itttt	eq
   1f638:	4339      	orreq	r1, r7
   1f63a:	f8ce 104c 	streq.w	r1, [lr, #76]	; 0x4c
            err_code = NRFX_SUCCESS;
   1f63e:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
   1f640:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   1f642:	f38c 8811 	msr	BASEPRI, ip
   1f646:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   1f64a:	4540      	cmp	r0, r8
   1f64c:	d005      	beq.n	1f65a <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   1f64e:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   1f652:	439a      	bics	r2, r3
   1f654:	f104 0401 	add.w	r4, r4, #1
   1f658:	d1db      	bne.n	1f612 <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1f65a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f65e:	bf00      	nop
   1f660:	20003590 	.word	0x20003590
   1f664:	0bad0002 	.word	0x0bad0002
   1f668:	0bad0000 	.word	0x0bad0000

0001f66c <nvmc_word_write>:
   1f66c:	4a04      	ldr	r2, [pc, #16]	; (1f680 <nvmc_word_write+0x14>)
   1f66e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1f672:	07db      	lsls	r3, r3, #31
   1f674:	d5fb      	bpl.n	1f66e <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   1f676:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   1f678:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   1f67c:	4770      	bx	lr
   1f67e:	bf00      	nop
   1f680:	4001e000 	.word	0x4001e000

0001f684 <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   1f684:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f688:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   1f68a:	fbb0 f3f2 	udiv	r3, r0, r2
   1f68e:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   1f692:	b973      	cbnz	r3, 1f6b2 <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   1f694:	4b08      	ldr	r3, [pc, #32]	; (1f6b8 <nrfx_nvmc_page_erase+0x34>)
   1f696:	2202      	movs	r2, #2
   1f698:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   1f69c:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1f6a0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1f6a4:	07d2      	lsls	r2, r2, #31
   1f6a6:	d5fb      	bpl.n	1f6a0 <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
   1f6a8:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   1f6aa:	4804      	ldr	r0, [pc, #16]	; (1f6bc <nrfx_nvmc_page_erase+0x38>)
   1f6ac:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1f6b0:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   1f6b2:	4803      	ldr	r0, [pc, #12]	; (1f6c0 <nrfx_nvmc_page_erase+0x3c>)
}
   1f6b4:	4770      	bx	lr
   1f6b6:	bf00      	nop
   1f6b8:	4001e000 	.word	0x4001e000
   1f6bc:	0bad0000 	.word	0x0bad0000
   1f6c0:	0bad000a 	.word	0x0bad000a

0001f6c4 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   1f6c4:	b510      	push	{r4, lr}
   1f6c6:	4c05      	ldr	r4, [pc, #20]	; (1f6dc <nrfx_nvmc_word_write+0x18>)
   1f6c8:	2301      	movs	r3, #1
   1f6ca:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   1f6ce:	f7ff ffcd 	bl	1f66c <nvmc_word_write>
   1f6d2:	2300      	movs	r3, #0
   1f6d4:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
   1f6d8:	bd10      	pop	{r4, pc}
   1f6da:	bf00      	nop
   1f6dc:	4001e000 	.word	0x4001e000

0001f6e0 <nrfx_ppi_channel_alloc>:


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1f6e0:	4b18      	ldr	r3, [pc, #96]	; (1f744 <nrfx_ppi_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
            *p_channel = channel;
            err_code   = NRFX_SUCCESS;
   1f6e2:	f8df c064 	ldr.w	ip, [pc, #100]	; 1f748 <nrfx_ppi_channel_alloc+0x68>
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1f6e6:	681b      	ldr	r3, [r3, #0]
{
   1f6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1f6ec:	43db      	mvns	r3, r3
{
   1f6ee:	4605      	mov	r5, r0
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   1f6f0:	4f16      	ldr	r7, [pc, #88]	; (1f74c <nrfx_ppi_channel_alloc+0x6c>)
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   1f6f2:	4817      	ldr	r0, [pc, #92]	; (1f750 <nrfx_ppi_channel_alloc+0x70>)
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1f6f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   1f6f8:	2400      	movs	r4, #0
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
   1f6fa:	f04f 0e01 	mov.w	lr, #1
   1f6fe:	b2e6      	uxtb	r6, r4
   1f700:	b90b      	cbnz	r3, 1f706 <nrfx_ppi_channel_alloc+0x26>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1f702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1f706:	f04f 0220 	mov.w	r2, #32
   1f70a:	f3ef 8811 	mrs	r8, BASEPRI
   1f70e:	f382 8812 	msr	BASEPRI_MAX, r2
   1f712:	f3bf 8f6f 	isb	sy
   1f716:	fa0e f206 	lsl.w	r2, lr, r6
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   1f71a:	421a      	tst	r2, r3
   1f71c:	d006      	beq.n	1f72c <nrfx_ppi_channel_alloc+0x4c>
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   1f71e:	6839      	ldr	r1, [r7, #0]
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   1f720:	420a      	tst	r2, r1
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
   1f722:	bf01      	itttt	eq
   1f724:	4311      	orreq	r1, r2
   1f726:	6039      	streq	r1, [r7, #0]
            *p_channel = channel;
   1f728:	702e      	strbeq	r6, [r5, #0]
            err_code   = NRFX_SUCCESS;
   1f72a:	4660      	moveq	r0, ip
	__asm__ volatile(
   1f72c:	f388 8811 	msr	BASEPRI, r8
   1f730:	f3bf 8f6f 	isb	sy
        if (err_code == NRFX_SUCCESS)
   1f734:	4560      	cmp	r0, ip
   1f736:	f104 0401 	add.w	r4, r4, #1
   1f73a:	d0e2      	beq.n	1f702 <nrfx_ppi_channel_alloc+0x22>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
   1f73c:	ea23 0302 	bic.w	r3, r3, r2
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   1f740:	e7dd      	b.n	1f6fe <nrfx_ppi_channel_alloc+0x1e>
   1f742:	bf00      	nop
   1f744:	0002a748 	.word	0x0002a748
   1f748:	0bad0000 	.word	0x0bad0000
   1f74c:	200035e0 	.word	0x200035e0
   1f750:	0bad0002 	.word	0x0bad0002

0001f754 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   1f754:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1f756:	4c11      	ldr	r4, [pc, #68]	; (1f79c <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   1f758:	4a11      	ldr	r2, [pc, #68]	; (1f7a0 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   1f75a:	4912      	ldr	r1, [pc, #72]	; (1f7a4 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1f75c:	2303      	movs	r3, #3
   1f75e:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1f760:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1f762:	4b11      	ldr	r3, [pc, #68]	; (1f7a8 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
   1f764:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1f766:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   1f768:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1f76c:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   1f76e:	2300      	movs	r3, #0
   1f770:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   1f772:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1f774:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   1f776:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   1f778:	4a0c      	ldr	r2, [pc, #48]	; (1f7ac <_DoInit+0x58>)
   1f77a:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   1f77c:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   1f77e:	2210      	movs	r2, #16
   1f780:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   1f782:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   1f784:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1f786:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   1f788:	f004 fab4 	bl	23cf4 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   1f78c:	4908      	ldr	r1, [pc, #32]	; (1f7b0 <_DoInit+0x5c>)
   1f78e:	4620      	mov	r0, r4
   1f790:	f004 fab0 	bl	23cf4 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   1f794:	2320      	movs	r3, #32
   1f796:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   1f798:	bd10      	pop	{r4, pc}
   1f79a:	bf00      	nop
   1f79c:	200035e4 	.word	0x200035e4
   1f7a0:	0002fdea 	.word	0x0002fdea
   1f7a4:	0002fdf3 	.word	0x0002fdf3
   1f7a8:	2000390b 	.word	0x2000390b
   1f7ac:	200038fb 	.word	0x200038fb
   1f7b0:	0002fdf7 	.word	0x0002fdf7

0001f7b4 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1f7b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   1f7b8:	4f23      	ldr	r7, [pc, #140]	; (1f848 <SEGGER_RTT_WriteSkipNoLock+0x94>)
   1f7ba:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1f7be:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   1f7c0:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1f7c4:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
   1f7c6:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   1f7c8:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1f7ca:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1f7cc:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1f7ce:	d834      	bhi.n	1f83a <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   1f7d0:	f8d2 a020 	ldr.w	sl, [r2, #32]
   1f7d4:	ebaa 0905 	sub.w	r9, sl, r5
   1f7d8:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
   1f7dc:	4294      	cmp	r4, r2
   1f7de:	d811      	bhi.n	1f804 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1f7e0:	f04f 0918 	mov.w	r9, #24
   1f7e4:	fb06 9309 	mla	r3, r6, r9, r9
   1f7e8:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
   1f7ea:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1f7ec:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
   1f7ee:	4641      	mov	r1, r8
   1f7f0:	4428      	add	r0, r5
   1f7f2:	f004 fad9 	bl	23da8 <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   1f7f6:	fb09 7606 	mla	r6, r9, r6, r7
   1f7fa:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   1f7fc:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
   1f7fe:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   1f800:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   1f804:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   1f806:	429c      	cmp	r4, r3
   1f808:	d81b      	bhi.n	1f842 <SEGGER_RTT_WriteSkipNoLock+0x8e>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1f80a:	fb00 bb0b 	mla	fp, r0, fp, fp
   1f80e:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   1f810:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1f812:	f8db 0004 	ldr.w	r0, [fp, #4]
   1f816:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   1f818:	4428      	add	r0, r5
   1f81a:	f004 fac5 	bl	23da8 <memcpy>
      if (NumBytes) {
   1f81e:	ebb4 040a 	subs.w	r4, r4, sl
   1f822:	d006      	beq.n	1f832 <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy((void*)pDst, pData + Rem, NumBytes);
   1f824:	f8db 0004 	ldr.w	r0, [fp, #4]
   1f828:	4622      	mov	r2, r4
   1f82a:	eb08 0109 	add.w	r1, r8, r9
   1f82e:	f004 fabb 	bl	23da8 <memcpy>
      pRing->WrOff = NumBytes;
   1f832:	2018      	movs	r0, #24
   1f834:	fb00 7606 	mla	r6, r0, r6, r7
   1f838:	e7e0      	b.n	1f7fc <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
   1f83a:	3b01      	subs	r3, #1
   1f83c:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   1f83e:	42a3      	cmp	r3, r4
   1f840:	d2ce      	bcs.n	1f7e0 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   1f842:	2000      	movs	r0, #0
   1f844:	e7dc      	b.n	1f800 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   1f846:	bf00      	nop
   1f848:	200035e4 	.word	0x200035e4

0001f84c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1f84c:	b570      	push	{r4, r5, r6, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   1f84e:	4b16      	ldr	r3, [pc, #88]	; (1f8a8 <SEGGER_RTT_WriteNoLock+0x5c>)
   1f850:	2418      	movs	r4, #24
   1f852:	fb00 4504 	mla	r5, r0, r4, r4
   1f856:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   1f858:	fb04 3300 	mla	r3, r4, r0, r3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1f85c:	4616      	mov	r6, r2
  switch (pRing->Flags) {
   1f85e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   1f860:	2c01      	cmp	r4, #1
   1f862:	d00e      	beq.n	1f882 <SEGGER_RTT_WriteNoLock+0x36>
   1f864:	2c02      	cmp	r4, #2
   1f866:	d018      	beq.n	1f89a <SEGGER_RTT_WriteNoLock+0x4e>
   1f868:	b9e4      	cbnz	r4, 1f8a4 <SEGGER_RTT_WriteNoLock+0x58>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
   1f86a:	4628      	mov	r0, r5
   1f86c:	f008 ffd0 	bl	28810 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
   1f870:	4286      	cmp	r6, r0
   1f872:	d804      	bhi.n	1f87e <SEGGER_RTT_WriteNoLock+0x32>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
   1f874:	4632      	mov	r2, r6
   1f876:	4628      	mov	r0, r5
   1f878:	f008 ffd3 	bl	28822 <_WriteNoCheck>
   1f87c:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
   1f87e:	4620      	mov	r0, r4
   1f880:	bd70      	pop	{r4, r5, r6, pc}
    Avail = _GetAvailWriteSpace(pRing);
   1f882:	4628      	mov	r0, r5
   1f884:	f008 ffc4 	bl	28810 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
   1f888:	4286      	cmp	r6, r0
   1f88a:	4634      	mov	r4, r6
   1f88c:	bf28      	it	cs
   1f88e:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
   1f890:	4622      	mov	r2, r4
   1f892:	4628      	mov	r0, r5
   1f894:	f008 ffc5 	bl	28822 <_WriteNoCheck>
    break;
   1f898:	e7f1      	b.n	1f87e <SEGGER_RTT_WriteNoLock+0x32>
    Status = _WriteBlocking(pRing, pData, NumBytes);
   1f89a:	4628      	mov	r0, r5
}
   1f89c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
   1f8a0:	f008 bfdb 	b.w	2885a <_WriteBlocking>
  switch (pRing->Flags) {
   1f8a4:	2400      	movs	r4, #0
  return Status;
   1f8a6:	e7ea      	b.n	1f87e <SEGGER_RTT_WriteNoLock+0x32>
   1f8a8:	200035e4 	.word	0x200035e4

0001f8ac <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   1f8ac:	4b03      	ldr	r3, [pc, #12]	; (1f8bc <SEGGER_RTT_HasDataUp+0x10>)
   1f8ae:	2218      	movs	r2, #24
   1f8b0:	fb02 3300 	mla	r3, r2, r0, r3
   1f8b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   1f8b6:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   1f8b8:	1a80      	subs	r0, r0, r2
   1f8ba:	4770      	bx	lr
   1f8bc:	200035e4 	.word	0x200035e4

0001f8c0 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1f8c0:	4b0e      	ldr	r3, [pc, #56]	; (1f8fc <z_sys_init_run_level+0x3c>)
{
   1f8c2:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1f8c4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1f8c8:	3001      	adds	r0, #1
   1f8ca:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1f8ce:	42a6      	cmp	r6, r4
   1f8d0:	d800      	bhi.n	1f8d4 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   1f8d2:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   1f8d4:	e9d4 3500 	ldrd	r3, r5, [r4]
   1f8d8:	4628      	mov	r0, r5
   1f8da:	4798      	blx	r3
		if (dev != NULL) {
   1f8dc:	b165      	cbz	r5, 1f8f8 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   1f8de:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   1f8e0:	b130      	cbz	r0, 1f8f0 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1f8e2:	2800      	cmp	r0, #0
   1f8e4:	bfb8      	it	lt
   1f8e6:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   1f8e8:	28ff      	cmp	r0, #255	; 0xff
   1f8ea:	bfa8      	it	ge
   1f8ec:	20ff      	movge	r0, #255	; 0xff
   1f8ee:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1f8f0:	785a      	ldrb	r2, [r3, #1]
   1f8f2:	f042 0201 	orr.w	r2, r2, #1
   1f8f6:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1f8f8:	3408      	adds	r4, #8
   1f8fa:	e7e8      	b.n	1f8ce <z_sys_init_run_level+0xe>
   1f8fc:	0002a818 	.word	0x0002a818

0001f900 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   1f900:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   1f902:	4605      	mov	r5, r0
   1f904:	b910      	cbnz	r0, 1f90c <z_impl_device_get_binding+0xc>
		return NULL;
   1f906:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   1f908:	4620      	mov	r0, r4
   1f90a:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   1f90c:	7803      	ldrb	r3, [r0, #0]
   1f90e:	2b00      	cmp	r3, #0
   1f910:	d0f9      	beq.n	1f906 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   1f912:	4c0e      	ldr	r4, [pc, #56]	; (1f94c <z_impl_device_get_binding+0x4c>)
   1f914:	4e0e      	ldr	r6, [pc, #56]	; (1f950 <z_impl_device_get_binding+0x50>)
   1f916:	42b4      	cmp	r4, r6
   1f918:	d108      	bne.n	1f92c <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   1f91a:	4c0c      	ldr	r4, [pc, #48]	; (1f94c <z_impl_device_get_binding+0x4c>)
   1f91c:	42b4      	cmp	r4, r6
   1f91e:	d0f2      	beq.n	1f906 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1f920:	4620      	mov	r0, r4
   1f922:	f008 ffcb 	bl	288bc <z_device_ready>
   1f926:	b950      	cbnz	r0, 1f93e <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   1f928:	3418      	adds	r4, #24
   1f92a:	e7f7      	b.n	1f91c <z_impl_device_get_binding+0x1c>
		if (z_device_ready(dev) && (dev->name == name)) {
   1f92c:	4620      	mov	r0, r4
   1f92e:	f008 ffc5 	bl	288bc <z_device_ready>
   1f932:	b110      	cbz	r0, 1f93a <z_impl_device_get_binding+0x3a>
   1f934:	6823      	ldr	r3, [r4, #0]
   1f936:	42ab      	cmp	r3, r5
   1f938:	d0e6      	beq.n	1f908 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   1f93a:	3418      	adds	r4, #24
   1f93c:	e7eb      	b.n	1f916 <z_impl_device_get_binding+0x16>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1f93e:	6821      	ldr	r1, [r4, #0]
   1f940:	4628      	mov	r0, r5
   1f942:	f004 fa03 	bl	23d4c <strcmp>
   1f946:	2800      	cmp	r0, #0
   1f948:	d1ee      	bne.n	1f928 <z_impl_device_get_binding+0x28>
   1f94a:	e7dd      	b.n	1f908 <z_impl_device_get_binding+0x8>
   1f94c:	00029510 	.word	0x00029510
   1f950:	000295a0 	.word	0x000295a0

0001f954 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1f954:	4b01      	ldr	r3, [pc, #4]	; (1f95c <z_impl_z_errno+0x8>)
   1f956:	6898      	ldr	r0, [r3, #8]
}
   1f958:	3064      	adds	r0, #100	; 0x64
   1f95a:	4770      	bx	lr
   1f95c:	2000368c 	.word	0x2000368c

0001f960 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   1f960:	b510      	push	{r4, lr}
   1f962:	4604      	mov	r4, r0
	z_impl_log_panic();
   1f964:	f7e3 fa26 	bl	2db4 <z_impl_log_panic>
   1f968:	4b06      	ldr	r3, [pc, #24]	; (1f984 <k_sys_fatal_error_handler+0x24>)
   1f96a:	4907      	ldr	r1, [pc, #28]	; (1f988 <k_sys_fatal_error_handler+0x28>)
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
   1f96c:	4807      	ldr	r0, [pc, #28]	; (1f98c <k_sys_fatal_error_handler+0x2c>)
   1f96e:	1ac9      	subs	r1, r1, r3
   1f970:	08c9      	lsrs	r1, r1, #3
   1f972:	0189      	lsls	r1, r1, #6
   1f974:	f041 0101 	orr.w	r1, r1, #1
   1f978:	f002 f8b7 	bl	21aea <log_0>
	arch_system_halt(reason);
   1f97c:	4620      	mov	r0, r4
   1f97e:	f008 ffa7 	bl	288d0 <arch_system_halt>
   1f982:	bf00      	nop
   1f984:	00029870 	.word	0x00029870
   1f988:	00029a88 	.word	0x00029a88
   1f98c:	0002fdfe 	.word	0x0002fdfe

0001f990 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1f990:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1f994:	4606      	mov	r6, r0
   1f996:	460f      	mov	r7, r1
	__asm__ volatile(
   1f998:	f04f 0320 	mov.w	r3, #32
   1f99c:	f3ef 8811 	mrs	r8, BASEPRI
   1f9a0:	f383 8812 	msr	BASEPRI_MAX, r3
   1f9a4:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1f9a8:	f001 f832 	bl	20a10 <z_impl_z_current_get>
   1f9ac:	4c1f      	ldr	r4, [pc, #124]	; (1fa2c <z_fatal_error+0x9c>)
   1f9ae:	4b20      	ldr	r3, [pc, #128]	; (1fa30 <z_fatal_error+0xa0>)
   1f9b0:	1ae4      	subs	r4, r4, r3
   1f9b2:	2e04      	cmp	r6, #4
   1f9b4:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   1f9b8:	bf96      	itet	ls
   1f9ba:	4a1e      	ldrls	r2, [pc, #120]	; (1fa34 <z_fatal_error+0xa4>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1f9bc:	4a1e      	ldrhi	r2, [pc, #120]	; (1fa38 <z_fatal_error+0xa8>)
   1f9be:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
   1f9c2:	01a4      	lsls	r4, r4, #6
   1f9c4:	f044 0301 	orr.w	r3, r4, #1
   1f9c8:	4605      	mov	r5, r0
   1f9ca:	f8ad 3000 	strh.w	r3, [sp]
   1f9ce:	481b      	ldr	r0, [pc, #108]	; (1fa3c <z_fatal_error+0xac>)
   1f9d0:	2300      	movs	r3, #0
   1f9d2:	4631      	mov	r1, r6
   1f9d4:	f002 f8c3 	bl	21b5e <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1f9d8:	b147      	cbz	r7, 1f9ec <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1f9da:	69fb      	ldr	r3, [r7, #28]
   1f9dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1f9e0:	b123      	cbz	r3, 1f9ec <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
   1f9e2:	4817      	ldr	r0, [pc, #92]	; (1fa40 <z_fatal_error+0xb0>)
   1f9e4:	f044 0101 	orr.w	r1, r4, #1
   1f9e8:	f002 f87f 	bl	21aea <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1f9ec:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1f9f0:	b12d      	cbz	r5, 1f9fe <z_fatal_error+0x6e>
   1f9f2:	4628      	mov	r0, r5
   1f9f4:	f009 f828 	bl	28a48 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1f9f8:	b108      	cbz	r0, 1f9fe <z_fatal_error+0x6e>
   1f9fa:	7803      	ldrb	r3, [r0, #0]
   1f9fc:	b903      	cbnz	r3, 1fa00 <z_fatal_error+0x70>
		thread_name = "unknown";
   1f9fe:	4811      	ldr	r0, [pc, #68]	; (1fa44 <z_fatal_error+0xb4>)
   1fa00:	f7e3 f86a 	bl	2ad8 <z_log_strdup>
	LOG_ERR("Current thread: %p (%s)", thread,
   1fa04:	4623      	mov	r3, r4
   1fa06:	4602      	mov	r2, r0
   1fa08:	4629      	mov	r1, r5
   1fa0a:	480f      	ldr	r0, [pc, #60]	; (1fa48 <z_fatal_error+0xb8>)
   1fa0c:	f002 f88e 	bl	21b2c <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1fa10:	4639      	mov	r1, r7
   1fa12:	4630      	mov	r0, r6
   1fa14:	f7ff ffa4 	bl	1f960 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1fa18:	f388 8811 	msr	BASEPRI, r8
   1fa1c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1fa20:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1fa22:	b002      	add	sp, #8
   1fa24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1fa28:	f7e5 b884 	b.w	4b34 <z_impl_k_thread_abort>
   1fa2c:	00029a88 	.word	0x00029a88
   1fa30:	00029870 	.word	0x00029870
   1fa34:	0002a830 	.word	0x0002a830
   1fa38:	0002fe0d 	.word	0x0002fe0d
   1fa3c:	0002fe1b 	.word	0x0002fe1b
   1fa40:	0002fe43 	.word	0x0002fe43
   1fa44:	0002b65b 	.word	0x0002b65b
   1fa48:	0002fe64 	.word	0x0002fe64

0001fa4c <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   1fa4c:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   1fa4e:	2300      	movs	r3, #0
{
   1fa50:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
   1fa52:	2201      	movs	r2, #1
   1fa54:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1fa58:	220f      	movs	r2, #15
   1fa5a:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1fa5e:	9301      	str	r3, [sp, #4]
	struct k_thread *thread = &z_idle_threads[i];
   1fa60:	4c0c      	ldr	r4, [pc, #48]	; (1fa94 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1fa62:	4b0d      	ldr	r3, [pc, #52]	; (1fa98 <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
   1fa64:	490d      	ldr	r1, [pc, #52]	; (1fa9c <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1fa66:	2218      	movs	r2, #24
	struct k_thread *thread = &z_idle_threads[i];
   1fa68:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1fa6c:	fb02 3300 	mla	r3, r2, r0, r3
	z_setup_new_thread(thread, stack,
   1fa70:	f44f 75b0 	mov.w	r5, #352	; 0x160
   1fa74:	9300      	str	r3, [sp, #0]
   1fa76:	fb05 1100 	mla	r1, r5, r0, r1
   1fa7a:	4b09      	ldr	r3, [pc, #36]	; (1faa0 <init_idle_thread+0x54>)
   1fa7c:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1fa80:	4620      	mov	r0, r4
   1fa82:	f000 f909 	bl	1fc98 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1fa86:	7b63      	ldrb	r3, [r4, #13]
   1fa88:	f023 0304 	bic.w	r3, r3, #4
   1fa8c:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   1fa8e:	b007      	add	sp, #28
   1fa90:	bd30      	pop	{r4, r5, pc}
   1fa92:	bf00      	nop
   1fa94:	20001de8 	.word	0x20001de8
   1fa98:	2000368c 	.word	0x2000368c
   1fa9c:	20005ec0 	.word	0x20005ec0
   1faa0:	0001fe0d 	.word	0x0001fe0d

0001faa4 <bg_thread_main>:
{
   1faa4:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   1faa6:	4b0a      	ldr	r3, [pc, #40]	; (1fad0 <bg_thread_main+0x2c>)
   1faa8:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1faaa:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1faac:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1faae:	f7ff ff07 	bl	1f8c0 <z_sys_init_run_level>
	boot_banner();
   1fab2:	f001 facf 	bl	21054 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1fab6:	2003      	movs	r0, #3
   1fab8:	f7ff ff02 	bl	1f8c0 <z_sys_init_run_level>
	z_init_static_threads();
   1fabc:	f000 f94a 	bl	1fd54 <z_init_static_threads>
	main();
   1fac0:	f7e1 feea 	bl	1898 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1fac4:	4a03      	ldr	r2, [pc, #12]	; (1fad4 <bg_thread_main+0x30>)
   1fac6:	7b13      	ldrb	r3, [r2, #12]
   1fac8:	f023 0301 	bic.w	r3, r3, #1
   1facc:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1face:	bd08      	pop	{r3, pc}
   1fad0:	20003d0b 	.word	0x20003d0b
   1fad4:	20001e68 	.word	0x20001e68

0001fad8 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1fad8:	4802      	ldr	r0, [pc, #8]	; (1fae4 <z_bss_zero+0xc>)
   1fada:	4a03      	ldr	r2, [pc, #12]	; (1fae8 <z_bss_zero+0x10>)
   1fadc:	2100      	movs	r1, #0
   1fade:	1a12      	subs	r2, r2, r0
   1fae0:	f004 b96d 	b.w	23dbe <memset>
   1fae4:	200012f0 	.word	0x200012f0
   1fae8:	20003d0c 	.word	0x20003d0c

0001faec <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   1faec:	b580      	push	{r7, lr}
   1faee:	b0a6      	sub	sp, #152	; 0x98
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1faf0:	f7e2 ff40 	bl	2974 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1faf4:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 1fbb4 <z_cstart+0xc8>
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1faf8:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1fafc:	4d2e      	ldr	r5, [pc, #184]	; (1fbb8 <z_cstart+0xcc>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1fafe:	4e2f      	ldr	r6, [pc, #188]	; (1fbbc <z_cstart+0xd0>)
   1fb00:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1fb02:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 1fbc0 <z_cstart+0xd4>
   1fb06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1fb0a:	2400      	movs	r4, #0
   1fb0c:	616b      	str	r3, [r5, #20]
   1fb0e:	23e0      	movs	r3, #224	; 0xe0
   1fb10:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1fb14:	77ec      	strb	r4, [r5, #31]
   1fb16:	762c      	strb	r4, [r5, #24]
   1fb18:	766c      	strb	r4, [r5, #25]
   1fb1a:	76ac      	strb	r4, [r5, #26]
   1fb1c:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1fb20:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1fb22:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1fb26:	626b      	str	r3, [r5, #36]	; 0x24
   1fb28:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1fb2c:	f7e4 ffcc 	bl	4ac8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1fb30:	f7e4 fbf6 	bl	4320 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1fb34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fb38:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1fb3a:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1fb3c:	f7e5 f8c0 	bl	4cc0 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1fb40:	f7e5 f80a 	bl	4b58 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   1fb44:	f240 1301 	movw	r3, #257	; 0x101
   1fb48:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1fb4c:	ab06      	add	r3, sp, #24
   1fb4e:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   1fb50:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1fb54:	f008 feb1 	bl	288ba <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1fb58:	4620      	mov	r0, r4
   1fb5a:	f7ff feb1 	bl	1f8c0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1fb5e:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   1fb60:	4d18      	ldr	r5, [pc, #96]	; (1fbc4 <z_cstart+0xd8>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1fb62:	f7ff fead 	bl	1f8c0 <z_sys_init_run_level>
	z_sched_init();
   1fb66:	f000 fea5 	bl	208b4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1fb6a:	4b17      	ldr	r3, [pc, #92]	; (1fbc8 <z_cstart+0xdc>)
   1fb6c:	9305      	str	r3, [sp, #20]
   1fb6e:	2301      	movs	r3, #1
   1fb70:	4916      	ldr	r1, [pc, #88]	; (1fbcc <z_cstart+0xe0>)
   1fb72:	9400      	str	r4, [sp, #0]
   1fb74:	e9cd 4303 	strd	r4, r3, [sp, #12]
   1fb78:	f44f 7200 	mov.w	r2, #512	; 0x200
   1fb7c:	464b      	mov	r3, r9
   1fb7e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1fb82:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   1fb84:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1fb86:	f000 f887 	bl	1fc98 <z_setup_new_thread>
   1fb8a:	7b6a      	ldrb	r2, [r5, #13]
   1fb8c:	4607      	mov	r7, r0
   1fb8e:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   1fb92:	4628      	mov	r0, r5
   1fb94:	736a      	strb	r2, [r5, #13]
   1fb96:	f009 f9c3 	bl	28f20 <z_ready_thread>
		init_idle_thread(i);
   1fb9a:	4620      	mov	r0, r4
   1fb9c:	f7ff ff56 	bl	1fa4c <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1fba0:	4b0b      	ldr	r3, [pc, #44]	; (1fbd0 <z_cstart+0xe4>)
   1fba2:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1fba4:	464a      	mov	r2, r9
   1fba6:	4639      	mov	r1, r7
   1fba8:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
   1fbaa:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
   1fbac:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1fbb0:	f7e4 fd12 	bl	45d8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1fbb4:	20006840 	.word	0x20006840
   1fbb8:	e000ed00 	.word	0xe000ed00
   1fbbc:	2000368c 	.word	0x2000368c
   1fbc0:	0001faa5 	.word	0x0001faa5
   1fbc4:	20001e68 	.word	0x20001e68
   1fbc8:	0002c6eb 	.word	0x0002c6eb
   1fbcc:	20005ca0 	.word	0x20005ca0
   1fbd0:	20001de8 	.word	0x20001de8

0001fbd4 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   1fbd4:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1fbd6:	4c06      	ldr	r4, [pc, #24]	; (1fbf0 <statics_init+0x1c>)
   1fbd8:	4d06      	ldr	r5, [pc, #24]	; (1fbf4 <statics_init+0x20>)
   1fbda:	42ac      	cmp	r4, r5
   1fbdc:	d301      	bcc.n	1fbe2 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   1fbde:	2000      	movs	r0, #0
   1fbe0:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1fbe2:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1fbe6:	4620      	mov	r0, r4
   1fbe8:	f008 fe7b 	bl	288e2 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1fbec:	3414      	adds	r4, #20
   1fbee:	e7f4      	b.n	1fbda <statics_init+0x6>
   1fbf0:	200010d0 	.word	0x200010d0
   1fbf4:	200010d0 	.word	0x200010d0

0001fbf8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1fbf8:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1fbfa:	4b0e      	ldr	r3, [pc, #56]	; (1fc34 <init_mem_slab_module+0x3c>)
   1fbfc:	4c0e      	ldr	r4, [pc, #56]	; (1fc38 <init_mem_slab_module+0x40>)
   1fbfe:	42a3      	cmp	r3, r4
   1fc00:	d301      	bcc.n	1fc06 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   1fc02:	2000      	movs	r0, #0
	return rc;
}
   1fc04:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1fc06:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1fc0a:	ea41 0200 	orr.w	r2, r1, r0
   1fc0e:	f012 0203 	ands.w	r2, r2, #3
   1fc12:	d10b      	bne.n	1fc2c <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1fc14:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1fc16:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1fc18:	42aa      	cmp	r2, r5
   1fc1a:	d101      	bne.n	1fc20 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1fc1c:	331c      	adds	r3, #28
   1fc1e:	e7ee      	b.n	1fbfe <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1fc20:	695e      	ldr	r6, [r3, #20]
   1fc22:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1fc24:	3201      	adds	r2, #1
		slab->free_list = p;
   1fc26:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1fc28:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1fc2a:	e7f5      	b.n	1fc18 <init_mem_slab_module+0x20>
	return rc;
   1fc2c:	f06f 0015 	mvn.w	r0, #21
   1fc30:	e7e8      	b.n	1fc04 <init_mem_slab_module+0xc>
   1fc32:	bf00      	nop
   1fc34:	20001060 	.word	0x20001060
   1fc38:	200010d0 	.word	0x200010d0

0001fc3c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1fc3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1fc3e:	460c      	mov	r4, r1
	__asm__ volatile(
   1fc40:	f04f 0520 	mov.w	r5, #32
   1fc44:	f3ef 8111 	mrs	r1, BASEPRI
   1fc48:	f385 8812 	msr	BASEPRI_MAX, r5
   1fc4c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1fc50:	6945      	ldr	r5, [r0, #20]
   1fc52:	b15d      	cbz	r5, 1fc6c <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   1fc54:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1fc56:	682b      	ldr	r3, [r5, #0]
   1fc58:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1fc5a:	6983      	ldr	r3, [r0, #24]
   1fc5c:	3301      	adds	r3, #1
   1fc5e:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1fc60:	2000      	movs	r0, #0
	__asm__ volatile(
   1fc62:	f381 8811 	msr	BASEPRI, r1
   1fc66:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   1fc6a:	e011      	b.n	1fc90 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1fc6c:	ea52 0c03 	orrs.w	ip, r2, r3
   1fc70:	d103      	bne.n	1fc7a <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   1fc72:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   1fc74:	f06f 000b 	mvn.w	r0, #11
   1fc78:	e7f3      	b.n	1fc62 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1fc7a:	e9cd 2300 	strd	r2, r3, [sp]
   1fc7e:	4602      	mov	r2, r0
   1fc80:	3008      	adds	r0, #8
   1fc82:	f000 fd6d 	bl	20760 <z_pend_curr>
		if (result == 0) {
   1fc86:	b918      	cbnz	r0, 1fc90 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   1fc88:	4b02      	ldr	r3, [pc, #8]	; (1fc94 <k_mem_slab_alloc+0x58>)
   1fc8a:	689b      	ldr	r3, [r3, #8]
   1fc8c:	695b      	ldr	r3, [r3, #20]
   1fc8e:	6023      	str	r3, [r4, #0]
}
   1fc90:	b003      	add	sp, #12
   1fc92:	bd30      	pop	{r4, r5, pc}
   1fc94:	2000368c 	.word	0x2000368c

0001fc98 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1fc98:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   1fc9c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1fc9e:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1fca0:	2604      	movs	r6, #4
   1fca2:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   1fca4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1fca6:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1fca8:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   1fcac:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1fcae:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   1fcb0:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1fcb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   1fcb6:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1fcb8:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   1fcbc:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   1fcbe:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   1fcc2:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   1fcc6:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   1fcc8:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   1fcca:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1fccc:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1fcd0:	9202      	str	r2, [sp, #8]
   1fcd2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1fcd4:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   1fcd6:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1fcd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1fcda:	9200      	str	r2, [sp, #0]
   1fcdc:	4642      	mov	r2, r8
{
   1fcde:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1fce0:	f7e4 fc48 	bl	4574 <arch_new_thread>
	if (!_current) {
   1fce4:	4b04      	ldr	r3, [pc, #16]	; (1fcf8 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   1fce6:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   1fce8:	689b      	ldr	r3, [r3, #8]
   1fcea:	b103      	cbz	r3, 1fcee <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   1fcec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   1fcee:	6763      	str	r3, [r4, #116]	; 0x74
}
   1fcf0:	4640      	mov	r0, r8
   1fcf2:	b004      	add	sp, #16
   1fcf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1fcf8:	2000368c 	.word	0x2000368c

0001fcfc <z_impl_k_thread_create>:
{
   1fcfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fcfe:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1fd00:	2700      	movs	r7, #0
   1fd02:	9705      	str	r7, [sp, #20]
   1fd04:	9f10      	ldr	r7, [sp, #64]	; 0x40
   1fd06:	9704      	str	r7, [sp, #16]
   1fd08:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   1fd0a:	9703      	str	r7, [sp, #12]
   1fd0c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1fd0e:	9702      	str	r7, [sp, #8]
{
   1fd10:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1fd14:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   1fd16:	9701      	str	r7, [sp, #4]
   1fd18:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   1fd1a:	9700      	str	r7, [sp, #0]
{
   1fd1c:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1fd1e:	f7ff ffbb 	bl	1fc98 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1fd22:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   1fd26:	bf08      	it	eq
   1fd28:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   1fd2c:	d005      	beq.n	1fd3a <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1fd2e:	ea55 0306 	orrs.w	r3, r5, r6
   1fd32:	d105      	bne.n	1fd40 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   1fd34:	4620      	mov	r0, r4
   1fd36:	f000 fcb7 	bl	206a8 <z_sched_start>
}
   1fd3a:	4620      	mov	r0, r4
   1fd3c:	b007      	add	sp, #28
   1fd3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1fd40:	4903      	ldr	r1, [pc, #12]	; (1fd50 <z_impl_k_thread_create+0x54>)
   1fd42:	4632      	mov	r2, r6
   1fd44:	462b      	mov	r3, r5
   1fd46:	f104 0018 	add.w	r0, r4, #24
   1fd4a:	f000 ff67 	bl	20c1c <z_add_timeout>
   1fd4e:	e7f4      	b.n	1fd3a <z_impl_k_thread_create+0x3e>
   1fd50:	00028f41 	.word	0x00028f41

0001fd54 <z_init_static_threads>:
{
   1fd54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1fd58:	4c29      	ldr	r4, [pc, #164]	; (1fe00 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   1fd5a:	4d2a      	ldr	r5, [pc, #168]	; (1fe04 <z_init_static_threads+0xb0>)
{
   1fd5c:	b087      	sub	sp, #28
   1fd5e:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   1fd60:	42ae      	cmp	r6, r5
   1fd62:	f104 0430 	add.w	r4, r4, #48	; 0x30
   1fd66:	d30f      	bcc.n	1fd88 <z_init_static_threads+0x34>
	k_sched_lock();
   1fd68:	f000 fbba 	bl	204e0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1fd6c:	4c24      	ldr	r4, [pc, #144]	; (1fe00 <z_init_static_threads+0xac>)
   1fd6e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1fe08 <z_init_static_threads+0xb4>
   1fd72:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1fd76:	f240 37e7 	movw	r7, #999	; 0x3e7
   1fd7a:	42ac      	cmp	r4, r5
   1fd7c:	d320      	bcc.n	1fdc0 <z_init_static_threads+0x6c>
}
   1fd7e:	b007      	add	sp, #28
   1fd80:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   1fd84:	f000 bd7a 	b.w	2087c <k_sched_unlock>
		z_setup_new_thread(
   1fd88:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1fd8c:	9305      	str	r3, [sp, #20]
   1fd8e:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1fd92:	9304      	str	r3, [sp, #16]
   1fd94:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1fd98:	9303      	str	r3, [sp, #12]
   1fd9a:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1fd9e:	9302      	str	r3, [sp, #8]
   1fda0:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1fda4:	9301      	str	r3, [sp, #4]
   1fda6:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1fdaa:	9300      	str	r3, [sp, #0]
   1fdac:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1fdb0:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1fdb4:	f7ff ff70 	bl	1fc98 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1fdb8:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1fdbc:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   1fdbe:	e7ce      	b.n	1fd5e <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1fdc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1fdc2:	1c5a      	adds	r2, r3, #1
   1fdc4:	d00d      	beq.n	1fde2 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   1fdc6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1fdca:	2100      	movs	r1, #0
   1fdcc:	4638      	mov	r0, r7
   1fdce:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1fdd2:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   1fdd6:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1fdda:	d104      	bne.n	1fde6 <z_init_static_threads+0x92>
	z_sched_start(thread);
   1fddc:	4640      	mov	r0, r8
   1fdde:	f000 fc63 	bl	206a8 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1fde2:	3430      	adds	r4, #48	; 0x30
   1fde4:	e7c9      	b.n	1fd7a <z_init_static_threads+0x26>
   1fde6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1fdea:	2300      	movs	r3, #0
   1fdec:	f7e0 f9c8 	bl	180 <__aeabi_uldivmod>
   1fdf0:	4602      	mov	r2, r0
   1fdf2:	460b      	mov	r3, r1
   1fdf4:	f108 0018 	add.w	r0, r8, #24
   1fdf8:	4649      	mov	r1, r9
   1fdfa:	f000 ff0f 	bl	20c1c <z_add_timeout>
   1fdfe:	e7f0      	b.n	1fde2 <z_init_static_threads+0x8e>
   1fe00:	20001060 	.word	0x20001060
   1fe04:	20001060 	.word	0x20001060
   1fe08:	00028f41 	.word	0x00028f41

0001fe0c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1fe0c:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   1fe0e:	4c09      	ldr	r4, [pc, #36]	; (1fe34 <idle+0x28>)
	__asm__ volatile(
   1fe10:	f04f 0220 	mov.w	r2, #32
   1fe14:	f3ef 8311 	mrs	r3, BASEPRI
   1fe18:	f382 8812 	msr	BASEPRI_MAX, r2
   1fe1c:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   1fe20:	f009 f95a 	bl	290d8 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
   1fe24:	61a0      	str	r0, [r4, #24]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
   1fe26:	f7e4 f90f 	bl	4048 <pm_system_suspend>
   1fe2a:	2800      	cmp	r0, #0
   1fe2c:	d1f0      	bne.n	1fe10 <idle+0x4>
	arch_cpu_idle();
   1fe2e:	f7e4 fa7d 	bl	432c <arch_cpu_idle>
}
   1fe32:	e7ed      	b.n	1fe10 <idle+0x4>
   1fe34:	2000368c 	.word	0x2000368c

0001fe38 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1fe38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1fe3c:	4604      	mov	r4, r0
   1fe3e:	4617      	mov	r7, r2
   1fe40:	461e      	mov	r6, r3
   1fe42:	f04f 0320 	mov.w	r3, #32
   1fe46:	f3ef 8811 	mrs	r8, BASEPRI
   1fe4a:	f383 8812 	msr	BASEPRI_MAX, r3
   1fe4e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1fe52:	68c3      	ldr	r3, [r0, #12]
   1fe54:	4a32      	ldr	r2, [pc, #200]	; (1ff20 <z_impl_k_mutex_lock+0xe8>)
   1fe56:	b16b      	cbz	r3, 1fe74 <z_impl_k_mutex_lock+0x3c>
   1fe58:	6880      	ldr	r0, [r0, #8]
   1fe5a:	6891      	ldr	r1, [r2, #8]
   1fe5c:	4288      	cmp	r0, r1
   1fe5e:	d019      	beq.n	1fe94 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1fe60:	ea57 0306 	orrs.w	r3, r7, r6
   1fe64:	d118      	bne.n	1fe98 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1fe66:	f388 8811 	msr	BASEPRI, r8
   1fe6a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   1fe6e:	f06f 000f 	mvn.w	r0, #15
   1fe72:	e00c      	b.n	1fe8e <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   1fe74:	6891      	ldr	r1, [r2, #8]
   1fe76:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1fe7a:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1fe7c:	3301      	adds	r3, #1
   1fe7e:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1fe80:	6893      	ldr	r3, [r2, #8]
   1fe82:	60a3      	str	r3, [r4, #8]
   1fe84:	f388 8811 	msr	BASEPRI, r8
   1fe88:	f3bf 8f6f 	isb	sy
		return 0;
   1fe8c:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1fe8e:	b002      	add	sp, #8
   1fe90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1fe94:	6921      	ldr	r1, [r4, #16]
   1fe96:	e7f0      	b.n	1fe7a <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1fe98:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1fe9c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   1fea0:	4299      	cmp	r1, r3
   1fea2:	bfa8      	it	ge
   1fea4:	4619      	movge	r1, r3
   1fea6:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   1feaa:	4291      	cmp	r1, r2
   1feac:	bfb8      	it	lt
   1feae:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1feb0:	428b      	cmp	r3, r1
   1feb2:	dd2e      	ble.n	1ff12 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   1feb4:	f008 fdd3 	bl	28a5e <adjust_owner_prio.isra.0>
   1feb8:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1feba:	e9cd 7600 	strd	r7, r6, [sp]
   1febe:	4819      	ldr	r0, [pc, #100]	; (1ff24 <z_impl_k_mutex_lock+0xec>)
   1fec0:	4622      	mov	r2, r4
   1fec2:	4641      	mov	r1, r8
   1fec4:	f000 fc4c 	bl	20760 <z_pend_curr>
	if (got_mutex == 0) {
   1fec8:	2800      	cmp	r0, #0
   1feca:	d0e0      	beq.n	1fe8e <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   1fecc:	f04f 0320 	mov.w	r3, #32
   1fed0:	f3ef 8611 	mrs	r6, BASEPRI
   1fed4:	f383 8812 	msr	BASEPRI_MAX, r3
   1fed8:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1fedc:	6823      	ldr	r3, [r4, #0]
   1fede:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fee0:	429c      	cmp	r4, r3
   1fee2:	d00a      	beq.n	1fefa <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1fee4:	b14b      	cbz	r3, 1fefa <z_impl_k_mutex_lock+0xc2>
   1fee6:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1feea:	4299      	cmp	r1, r3
   1feec:	bfa8      	it	ge
   1feee:	4619      	movge	r1, r3
   1fef0:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   1fef4:	4299      	cmp	r1, r3
   1fef6:	bfb8      	it	lt
   1fef8:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1fefa:	68a0      	ldr	r0, [r4, #8]
   1fefc:	f008 fdaf 	bl	28a5e <adjust_owner_prio.isra.0>
   1ff00:	b900      	cbnz	r0, 1ff04 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
   1ff02:	b145      	cbz	r5, 1ff16 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   1ff04:	4807      	ldr	r0, [pc, #28]	; (1ff24 <z_impl_k_mutex_lock+0xec>)
   1ff06:	4631      	mov	r1, r6
   1ff08:	f000 fad8 	bl	204bc <z_reschedule>
	return -EAGAIN;
   1ff0c:	f06f 000a 	mvn.w	r0, #10
   1ff10:	e7bd      	b.n	1fe8e <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   1ff12:	2500      	movs	r5, #0
   1ff14:	e7d1      	b.n	1feba <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
   1ff16:	f386 8811 	msr	BASEPRI, r6
   1ff1a:	f3bf 8f6f 	isb	sy
   1ff1e:	e7f5      	b.n	1ff0c <z_impl_k_mutex_lock+0xd4>
   1ff20:	2000368c 	.word	0x2000368c
   1ff24:	20003d0c 	.word	0x20003d0c

0001ff28 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1ff28:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   1ff2a:	6883      	ldr	r3, [r0, #8]
{
   1ff2c:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1ff2e:	2b00      	cmp	r3, #0
   1ff30:	d032      	beq.n	1ff98 <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1ff32:	4a1c      	ldr	r2, [pc, #112]	; (1ffa4 <z_impl_k_mutex_unlock+0x7c>)
   1ff34:	6892      	ldr	r2, [r2, #8]
   1ff36:	4293      	cmp	r3, r2
   1ff38:	d131      	bne.n	1ff9e <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   1ff3a:	7bda      	ldrb	r2, [r3, #15]
   1ff3c:	3a01      	subs	r2, #1
   1ff3e:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1ff40:	68c3      	ldr	r3, [r0, #12]
   1ff42:	2b01      	cmp	r3, #1
   1ff44:	d905      	bls.n	1ff52 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1ff46:	3b01      	subs	r3, #1
   1ff48:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   1ff4a:	f000 fc97 	bl	2087c <k_sched_unlock>

	return 0;
   1ff4e:	2000      	movs	r0, #0
}
   1ff50:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1ff52:	f04f 0320 	mov.w	r3, #32
   1ff56:	f3ef 8511 	mrs	r5, BASEPRI
   1ff5a:	f383 8812 	msr	BASEPRI_MAX, r3
   1ff5e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1ff62:	6901      	ldr	r1, [r0, #16]
   1ff64:	6880      	ldr	r0, [r0, #8]
   1ff66:	f008 fd7a 	bl	28a5e <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1ff6a:	4620      	mov	r0, r4
   1ff6c:	f009 f849 	bl	29002 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1ff70:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1ff72:	b158      	cbz	r0, 1ff8c <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
   1ff74:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1ff78:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1ff7a:	2200      	movs	r2, #0
   1ff7c:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   1ff7e:	f008 ffcf 	bl	28f20 <z_ready_thread>
		z_reschedule(&lock, key);
   1ff82:	4809      	ldr	r0, [pc, #36]	; (1ffa8 <z_impl_k_mutex_unlock+0x80>)
   1ff84:	4629      	mov	r1, r5
   1ff86:	f000 fa99 	bl	204bc <z_reschedule>
   1ff8a:	e7de      	b.n	1ff4a <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1ff8c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1ff8e:	f385 8811 	msr	BASEPRI, r5
   1ff92:	f3bf 8f6f 	isb	sy
   1ff96:	e7d8      	b.n	1ff4a <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1ff98:	f06f 0015 	mvn.w	r0, #21
   1ff9c:	e7d8      	b.n	1ff50 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   1ff9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ffa2:	e7d5      	b.n	1ff50 <z_impl_k_mutex_unlock+0x28>
   1ffa4:	2000368c 	.word	0x2000368c
   1ffa8:	20003d0c 	.word	0x20003d0c

0001ffac <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1ffac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1ffae:	4611      	mov	r1, r2
	__asm__ volatile(
   1ffb0:	f04f 0220 	mov.w	r2, #32
   1ffb4:	f3ef 8511 	mrs	r5, BASEPRI
   1ffb8:	f382 8812 	msr	BASEPRI_MAX, r2
   1ffbc:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   1ffc0:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1ffc2:	b19c      	cbz	r4, 1ffec <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1ffc4:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1ffc6:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1ffc8:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1ffcc:	4294      	cmp	r4, r2
	list->head = node;
   1ffce:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1ffd0:	bf08      	it	eq
   1ffd2:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1ffd4:	2101      	movs	r1, #1
   1ffd6:	4620      	mov	r0, r4
   1ffd8:	f008 fdb4 	bl	28b44 <z_queue_node_peek>
   1ffdc:	4604      	mov	r4, r0
	__asm__ volatile(
   1ffde:	f385 8811 	msr	BASEPRI, r5
   1ffe2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1ffe6:	4620      	mov	r0, r4
   1ffe8:	b003      	add	sp, #12
   1ffea:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1ffec:	ea51 0203 	orrs.w	r2, r1, r3
   1fff0:	d0f5      	beq.n	1ffde <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1fff2:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1fff6:	e9cd 1300 	strd	r1, r3, [sp]
   1fffa:	4610      	mov	r0, r2
   1fffc:	4629      	mov	r1, r5
   1fffe:	f000 fbaf 	bl	20760 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   20002:	2800      	cmp	r0, #0
   20004:	d1ef      	bne.n	1ffe6 <z_impl_k_queue_get+0x3a>
   20006:	4b02      	ldr	r3, [pc, #8]	; (20010 <z_impl_k_queue_get+0x64>)
   20008:	689b      	ldr	r3, [r3, #8]
   2000a:	695c      	ldr	r4, [r3, #20]
   2000c:	e7eb      	b.n	1ffe6 <z_impl_k_queue_get+0x3a>
   2000e:	bf00      	nop
   20010:	2000368c 	.word	0x2000368c

00020014 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   20014:	b538      	push	{r3, r4, r5, lr}
   20016:	4604      	mov	r4, r0
	__asm__ volatile(
   20018:	f04f 0320 	mov.w	r3, #32
   2001c:	f3ef 8511 	mrs	r5, BASEPRI
   20020:	f383 8812 	msr	BASEPRI_MAX, r3
   20024:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   20028:	f008 ffeb 	bl	29002 <z_unpend_first_thread>

	if (thread != NULL) {
   2002c:	b148      	cbz	r0, 20042 <z_impl_k_sem_give+0x2e>
   2002e:	2200      	movs	r2, #0
   20030:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   20032:	f008 ff75 	bl	28f20 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   20036:	4629      	mov	r1, r5
   20038:	4808      	ldr	r0, [pc, #32]	; (2005c <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   2003a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   2003e:	f000 ba3d 	b.w	204bc <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   20042:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   20046:	429a      	cmp	r2, r3
   20048:	bf18      	it	ne
   2004a:	3301      	addne	r3, #1
   2004c:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2004e:	2102      	movs	r1, #2
   20050:	f104 0010 	add.w	r0, r4, #16
   20054:	f009 fa09 	bl	2946a <z_handle_obj_poll_events>
}
   20058:	e7ed      	b.n	20036 <z_impl_k_sem_give+0x22>
   2005a:	bf00      	nop
   2005c:	20003d0c 	.word	0x20003d0c

00020060 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   20060:	b513      	push	{r0, r1, r4, lr}
   20062:	f04f 0420 	mov.w	r4, #32
   20066:	f3ef 8111 	mrs	r1, BASEPRI
   2006a:	f384 8812 	msr	BASEPRI_MAX, r4
   2006e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   20072:	6884      	ldr	r4, [r0, #8]
   20074:	b144      	cbz	r4, 20088 <z_impl_k_sem_take+0x28>
		sem->count--;
   20076:	3c01      	subs	r4, #1
   20078:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   2007a:	f381 8811 	msr	BASEPRI, r1
   2007e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   20082:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   20084:	b002      	add	sp, #8
   20086:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   20088:	ea52 0403 	orrs.w	r4, r2, r3
   2008c:	d106      	bne.n	2009c <z_impl_k_sem_take+0x3c>
   2008e:	f381 8811 	msr	BASEPRI, r1
   20092:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   20096:	f06f 000f 	mvn.w	r0, #15
   2009a:	e7f3      	b.n	20084 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   2009c:	e9cd 2300 	strd	r2, r3, [sp]
   200a0:	4602      	mov	r2, r0
   200a2:	4802      	ldr	r0, [pc, #8]	; (200ac <z_impl_k_sem_take+0x4c>)
   200a4:	f000 fb5c 	bl	20760 <z_pend_curr>
	return ret;
   200a8:	e7ec      	b.n	20084 <z_impl_k_sem_take+0x24>
   200aa:	bf00      	nop
   200ac:	20003d0c 	.word	0x20003d0c

000200b0 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   200b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   200b2:	4b09      	ldr	r3, [pc, #36]	; (200d8 <k_sys_work_q_init+0x28>)
   200b4:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   200b6:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   200b8:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   200ba:	9300      	str	r3, [sp, #0]
   200bc:	4907      	ldr	r1, [pc, #28]	; (200dc <k_sys_work_q_init+0x2c>)
   200be:	4808      	ldr	r0, [pc, #32]	; (200e0 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   200c0:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   200c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   200c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
   200cc:	f000 f914 	bl	202f8 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   200d0:	4620      	mov	r0, r4
   200d2:	b004      	add	sp, #16
   200d4:	bd10      	pop	{r4, pc}
   200d6:	bf00      	nop
   200d8:	0002fec9 	.word	0x0002fec9
   200dc:	20006840 	.word	0x20006840
   200e0:	20001ee8 	.word	0x20001ee8

000200e4 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   200e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   200e8:	4e47      	ldr	r6, [pc, #284]	; (20208 <work_queue_main+0x124>)
   200ea:	b085      	sub	sp, #20
   200ec:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   200ee:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   200f2:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
   200f6:	f04f 0320 	mov.w	r3, #32
   200fa:	f3ef 8711 	mrs	r7, BASEPRI
   200fe:	f383 8812 	msr	BASEPRI_MAX, r3
   20102:	f3bf 8f6f 	isb	sy
   20106:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   2010a:	b98d      	cbnz	r5, 20130 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   2010c:	2102      	movs	r1, #2
   2010e:	f104 0098 	add.w	r0, r4, #152	; 0x98
   20112:	f008 fdb0 	bl	28c76 <flag_test_and_clear>
   20116:	2800      	cmp	r0, #0
   20118:	d135      	bne.n	20186 <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   2011a:	2300      	movs	r3, #0
   2011c:	e9cd 8900 	strd	r8, r9, [sp]
   20120:	9302      	str	r3, [sp, #8]
   20122:	f104 0288 	add.w	r2, r4, #136	; 0x88
   20126:	4639      	mov	r1, r7
   20128:	4838      	ldr	r0, [pc, #224]	; (2020c <work_queue_main+0x128>)
   2012a:	f000 fcd9 	bl	20ae0 <z_sched_wait>
			continue;
   2012e:	e7e2      	b.n	200f6 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20130:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   20134:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   20136:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2013a:	4295      	cmp	r5, r2
   2013c:	d101      	bne.n	20142 <work_queue_main+0x5e>
	list->tail = node;
   2013e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   20142:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   20146:	f043 0302 	orr.w	r3, r3, #2
   2014a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   2014e:	68eb      	ldr	r3, [r5, #12]
   20150:	f023 0304 	bic.w	r3, r3, #4
   20154:	f043 0301 	orr.w	r3, r3, #1
   20158:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   2015a:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   2015c:	f387 8811 	msr	BASEPRI, r7
   20160:	f3bf 8f6f 	isb	sy

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
			handler(work);
   20164:	4628      	mov	r0, r5
   20166:	4798      	blx	r3
	__asm__ volatile(
   20168:	f04f 0320 	mov.w	r3, #32
   2016c:	f3ef 8b11 	mrs	fp, BASEPRI
   20170:	f383 8812 	msr	BASEPRI_MAX, r3
   20174:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   20178:	68eb      	ldr	r3, [r5, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2017a:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   2017c:	f023 0201 	bic.w	r2, r3, #1
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   20180:	d40b      	bmi.n	2019a <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
   20182:	60ea      	str	r2, [r5, #12]
   20184:	e00e      	b.n	201a4 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   20186:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   2018a:	2200      	movs	r2, #0
   2018c:	2101      	movs	r1, #1
   2018e:	4628      	mov	r0, r5
   20190:	f008 ff5f 	bl	29052 <z_sched_wake>
   20194:	2800      	cmp	r0, #0
   20196:	d1f8      	bne.n	2018a <work_queue_main+0xa6>
   20198:	e7bf      	b.n	2011a <work_queue_main+0x36>
	return list->head;
   2019a:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   2019c:	f023 0303 	bic.w	r3, r3, #3
   201a0:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   201a2:	b970      	cbnz	r0, 201c2 <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
   201a4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   201a8:	f023 0302 	bic.w	r3, r3, #2
   201ac:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   201b0:	f38b 8811 	msr	BASEPRI, fp
   201b4:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
   201b8:	05d8      	lsls	r0, r3, #23
   201ba:	d49c      	bmi.n	200f6 <work_queue_main+0x12>
	z_impl_k_yield();
   201bc:	f000 fb86 	bl	208cc <z_impl_k_yield>
}
   201c0:	e799      	b.n	200f6 <work_queue_main+0x12>
	return node->next;
   201c2:	2700      	movs	r7, #0
   201c4:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   201c8:	463b      	mov	r3, r7
		if (wc->work == work) {
   201ca:	6842      	ldr	r2, [r0, #4]
   201cc:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   201ce:	4601      	mov	r1, r0
		if (wc->work == work) {
   201d0:	d10c      	bne.n	201ec <work_queue_main+0x108>
	return node->next;
   201d2:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   201d4:	b997      	cbnz	r7, 201fc <work_queue_main+0x118>
   201d6:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   201d8:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   201da:	4282      	cmp	r2, r0
   201dc:	d100      	bne.n	201e0 <work_queue_main+0xfc>
	list->tail = node;
   201de:	6071      	str	r1, [r6, #4]
	parent->next = child;
   201e0:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   201e4:	f7ff ff16 	bl	20014 <z_impl_k_sem_give>
}
   201e8:	4639      	mov	r1, r7
   201ea:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   201ec:	f1ba 0f00 	cmp.w	sl, #0
   201f0:	d0d8      	beq.n	201a4 <work_queue_main+0xc0>
	return node->next;
   201f2:	4650      	mov	r0, sl
   201f4:	460f      	mov	r7, r1
   201f6:	f8da a000 	ldr.w	sl, [sl]
   201fa:	e7e6      	b.n	201ca <work_queue_main+0xe6>
	return list->tail;
   201fc:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
   201fe:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   20200:	4290      	cmp	r0, r2
	list->tail = node;
   20202:	bf08      	it	eq
   20204:	6077      	streq	r7, [r6, #4]
}
   20206:	e7eb      	b.n	201e0 <work_queue_main+0xfc>
   20208:	200036b4 	.word	0x200036b4
   2020c:	20003d0c 	.word	0x20003d0c

00020210 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   20210:	68c3      	ldr	r3, [r0, #12]
{
   20212:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   20214:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   20218:	079b      	lsls	r3, r3, #30
{
   2021a:	4605      	mov	r5, r0
   2021c:	460c      	mov	r4, r1
	if (ret) {
   2021e:	d50d      	bpl.n	2023c <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   20220:	2201      	movs	r2, #1
   20222:	2100      	movs	r1, #0
   20224:	f104 0008 	add.w	r0, r4, #8
   20228:	f008 fd15 	bl	28c56 <z_impl_k_sem_init>
	parent->next = child;
   2022c:	2300      	movs	r3, #0
   2022e:	6023      	str	r3, [r4, #0]
	return list->tail;
   20230:	4b05      	ldr	r3, [pc, #20]	; (20248 <cancel_sync_locked+0x38>)
	canceler->work = work;
   20232:	6065      	str	r5, [r4, #4]
   20234:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   20236:	b91a      	cbnz	r2, 20240 <cancel_sync_locked+0x30>
	list->head = node;
   20238:	e9c3 4400 	strd	r4, r4, [r3]
}
   2023c:	4630      	mov	r0, r6
   2023e:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   20240:	6014      	str	r4, [r2, #0]
	list->tail = node;
   20242:	605c      	str	r4, [r3, #4]
}
   20244:	e7fa      	b.n	2023c <cancel_sync_locked+0x2c>
   20246:	bf00      	nop
   20248:	200036b4 	.word	0x200036b4

0002024c <submit_to_queue_locked>:
{
   2024c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   2024e:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   20250:	079a      	lsls	r2, r3, #30
{
   20252:	4604      	mov	r4, r0
   20254:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   20256:	f3c3 0540 	ubfx	r5, r3, #1, #1
   2025a:	d41f      	bmi.n	2029c <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   2025c:	075f      	lsls	r7, r3, #29
   2025e:	d41f      	bmi.n	202a0 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   20260:	680a      	ldr	r2, [r1, #0]
   20262:	b90a      	cbnz	r2, 20268 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   20264:	6882      	ldr	r2, [r0, #8]
   20266:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   20268:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   2026a:	bf44      	itt	mi
   2026c:	68a3      	ldrmi	r3, [r4, #8]
   2026e:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   20270:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   20272:	bf4c      	ite	mi
   20274:	2502      	movmi	r5, #2
		ret = 1;
   20276:	2501      	movpl	r5, #1
	if (queue == NULL) {
   20278:	b37f      	cbz	r7, 202da <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   2027a:	4b1b      	ldr	r3, [pc, #108]	; (202e8 <submit_to_queue_locked+0x9c>)
   2027c:	689b      	ldr	r3, [r3, #8]
   2027e:	42bb      	cmp	r3, r7
   20280:	d111      	bne.n	202a6 <submit_to_queue_locked+0x5a>
   20282:	f008 fbd8 	bl	28a36 <k_is_in_isr>
   20286:	f080 0001 	eor.w	r0, r0, #1
   2028a:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   2028c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   20290:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   20292:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   20296:	d523      	bpl.n	202e0 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   20298:	b13a      	cbz	r2, 202aa <submit_to_queue_locked+0x5e>
   2029a:	b940      	cbnz	r0, 202ae <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   2029c:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   202a0:	2300      	movs	r3, #0
   202a2:	6033      	str	r3, [r6, #0]
	return ret;
   202a4:	e013      	b.n	202ce <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   202a6:	2000      	movs	r0, #0
   202a8:	e7f0      	b.n	2028c <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   202aa:	071b      	lsls	r3, r3, #28
   202ac:	d4f6      	bmi.n	2029c <submit_to_queue_locked+0x50>
	parent->next = child;
   202ae:	2300      	movs	r3, #0
   202b0:	6023      	str	r3, [r4, #0]
	return list->tail;
   202b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   202b6:	b963      	cbnz	r3, 202d2 <submit_to_queue_locked+0x86>
	list->head = node;
   202b8:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   202bc:	4638      	mov	r0, r7
   202be:	f008 fcf3 	bl	28ca8 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   202c2:	68e3      	ldr	r3, [r4, #12]
   202c4:	f043 0304 	orr.w	r3, r3, #4
   202c8:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   202ca:	6833      	ldr	r3, [r6, #0]
   202cc:	60a3      	str	r3, [r4, #8]
}
   202ce:	4628      	mov	r0, r5
   202d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   202d2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   202d4:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   202d8:	e7f0      	b.n	202bc <submit_to_queue_locked+0x70>
		return -EINVAL;
   202da:	f06f 0515 	mvn.w	r5, #21
   202de:	e7df      	b.n	202a0 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   202e0:	f06f 0512 	mvn.w	r5, #18
   202e4:	e7dc      	b.n	202a0 <submit_to_queue_locked+0x54>
   202e6:	bf00      	nop
   202e8:	2000368c 	.word	0x2000368c

000202ec <k_work_submit>:
{
   202ec:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   202ee:	4801      	ldr	r0, [pc, #4]	; (202f4 <k_work_submit+0x8>)
   202f0:	f008 bd3a 	b.w	28d68 <k_work_submit_to_queue>
   202f4:	20001ee8 	.word	0x20001ee8

000202f8 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   202f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   202fa:	b089      	sub	sp, #36	; 0x24
   202fc:	4604      	mov	r4, r0
	list->head = NULL;
   202fe:	2000      	movs	r0, #0
	list->tail = NULL;
   20300:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   20304:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   20306:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   2030a:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   2030e:	f104 0090 	add.w	r0, r4, #144	; 0x90
   20312:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   20316:	b31d      	cbz	r5, 20360 <k_work_queue_start+0x68>
   20318:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   2031a:	2800      	cmp	r0, #0
   2031c:	f240 1001 	movw	r0, #257	; 0x101
   20320:	bf08      	it	eq
   20322:	2001      	moveq	r0, #1
	*flagp = flags;
   20324:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   20328:	2000      	movs	r0, #0
   2032a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2032e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   20332:	e9cd 3003 	strd	r3, r0, [sp, #12]
   20336:	e9cd 0001 	strd	r0, r0, [sp, #4]
   2033a:	e9cd 6706 	strd	r6, r7, [sp, #24]
   2033e:	4b09      	ldr	r3, [pc, #36]	; (20364 <k_work_queue_start+0x6c>)
   20340:	9400      	str	r4, [sp, #0]
   20342:	4620      	mov	r0, r4
   20344:	f7ff fcda 	bl	1fcfc <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   20348:	b125      	cbz	r5, 20354 <k_work_queue_start+0x5c>
   2034a:	6829      	ldr	r1, [r5, #0]
   2034c:	b111      	cbz	r1, 20354 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   2034e:	4620      	mov	r0, r4
   20350:	f008 fb77 	bl	28a42 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   20354:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   20356:	b009      	add	sp, #36	; 0x24
   20358:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2035c:	f008 bb76 	b.w	28a4c <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   20360:	2001      	movs	r0, #1
   20362:	e7df      	b.n	20324 <k_work_queue_start+0x2c>
   20364:	000200e5 	.word	0x000200e5

00020368 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   20368:	b513      	push	{r0, r1, r4, lr}
   2036a:	9001      	str	r0, [sp, #4]
   2036c:	4608      	mov	r0, r1
	__asm__ volatile(
   2036e:	f04f 0120 	mov.w	r1, #32
   20372:	f3ef 8411 	mrs	r4, BASEPRI
   20376:	f381 8812 	msr	BASEPRI_MAX, r1
   2037a:	f3bf 8f6f 	isb	sy
	return *flagp;
   2037e:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   20380:	f011 0f0e 	tst.w	r1, #14
   20384:	d116      	bne.n	203b4 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   20386:	ea53 0c02 	orrs.w	ip, r3, r2
   2038a:	d108      	bne.n	2039e <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   2038c:	a901      	add	r1, sp, #4
   2038e:	f7ff ff5d 	bl	2024c <submit_to_queue_locked>
	__asm__ volatile(
   20392:	f384 8811 	msr	BASEPRI, r4
   20396:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   2039a:	b002      	add	sp, #8
   2039c:	bd10      	pop	{r4, pc}
	*flagp |= BIT(bit);
   2039e:	f041 0108 	orr.w	r1, r1, #8
   203a2:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   203a4:	9901      	ldr	r1, [sp, #4]
   203a6:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   203a8:	3010      	adds	r0, #16
   203aa:	4903      	ldr	r1, [pc, #12]	; (203b8 <k_work_schedule_for_queue+0x50>)
   203ac:	f000 fc36 	bl	20c1c <z_add_timeout>
	return ret;
   203b0:	2001      	movs	r0, #1
   203b2:	e7ee      	b.n	20392 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   203b4:	2000      	movs	r0, #0
   203b6:	e7ec      	b.n	20392 <k_work_schedule_for_queue+0x2a>
   203b8:	00028d19 	.word	0x00028d19

000203bc <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   203bc:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   203be:	4801      	ldr	r0, [pc, #4]	; (203c4 <k_work_schedule+0x8>)
   203c0:	f7ff bfd2 	b.w	20368 <k_work_schedule_for_queue>
   203c4:	20001ee8 	.word	0x20001ee8

000203c8 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   203c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   203ca:	460c      	mov	r4, r1
   203cc:	9001      	str	r0, [sp, #4]
   203ce:	4616      	mov	r6, r2
   203d0:	461d      	mov	r5, r3
	__asm__ volatile(
   203d2:	f04f 0320 	mov.w	r3, #32
   203d6:	f3ef 8711 	mrs	r7, BASEPRI
   203da:	f383 8812 	msr	BASEPRI_MAX, r3
   203de:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   203e2:	4608      	mov	r0, r1
   203e4:	f008 fc52 	bl	28c8c <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   203e8:	ea55 0306 	orrs.w	r3, r5, r6
   203ec:	d109      	bne.n	20402 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   203ee:	a901      	add	r1, sp, #4
   203f0:	4620      	mov	r0, r4
   203f2:	f7ff ff2b 	bl	2024c <submit_to_queue_locked>
	__asm__ volatile(
   203f6:	f387 8811 	msr	BASEPRI, r7
   203fa:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   203fe:	b003      	add	sp, #12
   20400:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   20402:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   20404:	4906      	ldr	r1, [pc, #24]	; (20420 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   20406:	f043 0308 	orr.w	r3, r3, #8
   2040a:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   2040c:	9b01      	ldr	r3, [sp, #4]
   2040e:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   20410:	f104 0010 	add.w	r0, r4, #16
   20414:	4632      	mov	r2, r6
   20416:	462b      	mov	r3, r5
   20418:	f000 fc00 	bl	20c1c <z_add_timeout>
	return ret;
   2041c:	2001      	movs	r0, #1
   2041e:	e7ea      	b.n	203f6 <k_work_reschedule_for_queue+0x2e>
   20420:	00028d19 	.word	0x00028d19

00020424 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   20424:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   20426:	4801      	ldr	r0, [pc, #4]	; (2042c <k_work_reschedule+0x8>)
   20428:	f7ff bfce 	b.w	203c8 <k_work_reschedule_for_queue>
   2042c:	20001ee8 	.word	0x20001ee8

00020430 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   20430:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   20432:	4c08      	ldr	r4, [pc, #32]	; (20454 <z_reset_time_slice+0x24>)
   20434:	6823      	ldr	r3, [r4, #0]
   20436:	b15b      	cbz	r3, 20450 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   20438:	f7fe fe70 	bl	1f11c <sys_clock_elapsed>
   2043c:	4603      	mov	r3, r0
   2043e:	6820      	ldr	r0, [r4, #0]
   20440:	4a05      	ldr	r2, [pc, #20]	; (20458 <z_reset_time_slice+0x28>)
   20442:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   20444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   20448:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   2044a:	2100      	movs	r1, #0
   2044c:	f008 be54 	b.w	290f8 <z_set_timeout_expiry>
}
   20450:	bd10      	pop	{r4, pc}
   20452:	bf00      	nop
   20454:	200036c4 	.word	0x200036c4
   20458:	2000368c 	.word	0x2000368c

0002045c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   2045c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2045e:	4604      	mov	r4, r0
   20460:	460d      	mov	r5, r1
	__asm__ volatile(
   20462:	f04f 0320 	mov.w	r3, #32
   20466:	f3ef 8611 	mrs	r6, BASEPRI
   2046a:	f383 8812 	msr	BASEPRI_MAX, r3
   2046e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   20472:	4b0f      	ldr	r3, [pc, #60]	; (204b0 <k_sched_time_slice_set+0x54>)
   20474:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   20476:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   2047a:	f240 30e7 	movw	r0, #999	; 0x3e7
   2047e:	6119      	str	r1, [r3, #16]
   20480:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20484:	2300      	movs	r3, #0
   20486:	fbe4 0107 	umlal	r0, r1, r4, r7
   2048a:	f7df fe79 	bl	180 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   2048e:	2c00      	cmp	r4, #0
   20490:	4b08      	ldr	r3, [pc, #32]	; (204b4 <k_sched_time_slice_set+0x58>)
   20492:	dc09      	bgt.n	204a8 <k_sched_time_slice_set+0x4c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   20494:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   20496:	4b08      	ldr	r3, [pc, #32]	; (204b8 <k_sched_time_slice_set+0x5c>)
   20498:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   2049a:	f7ff ffc9 	bl	20430 <z_reset_time_slice>
	__asm__ volatile(
   2049e:	f386 8811 	msr	BASEPRI, r6
   204a2:	f3bf 8f6f 	isb	sy
	}
}
   204a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   204a8:	2802      	cmp	r0, #2
   204aa:	bfb8      	it	lt
   204ac:	2002      	movlt	r0, #2
   204ae:	e7f1      	b.n	20494 <k_sched_time_slice_set+0x38>
   204b0:	2000368c 	.word	0x2000368c
   204b4:	200036c4 	.word	0x200036c4
   204b8:	200036c0 	.word	0x200036c0

000204bc <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   204bc:	b949      	cbnz	r1, 204d2 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   204be:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   204c2:	b930      	cbnz	r0, 204d2 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   204c4:	4b05      	ldr	r3, [pc, #20]	; (204dc <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   204c6:	69da      	ldr	r2, [r3, #28]
   204c8:	689b      	ldr	r3, [r3, #8]
   204ca:	429a      	cmp	r2, r3
   204cc:	d001      	beq.n	204d2 <z_reschedule+0x16>
	ret = arch_swap(key);
   204ce:	f7e3 bffd 	b.w	44cc <arch_swap>
   204d2:	f381 8811 	msr	BASEPRI, r1
   204d6:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   204da:	4770      	bx	lr
   204dc:	2000368c 	.word	0x2000368c

000204e0 <k_sched_lock>:
	__asm__ volatile(
   204e0:	f04f 0320 	mov.w	r3, #32
   204e4:	f3ef 8111 	mrs	r1, BASEPRI
   204e8:	f383 8812 	msr	BASEPRI_MAX, r3
   204ec:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   204f0:	4b04      	ldr	r3, [pc, #16]	; (20504 <k_sched_lock+0x24>)
   204f2:	689a      	ldr	r2, [r3, #8]
   204f4:	7bd3      	ldrb	r3, [r2, #15]
   204f6:	3b01      	subs	r3, #1
   204f8:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   204fa:	f381 8811 	msr	BASEPRI, r1
   204fe:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   20502:	4770      	bx	lr
   20504:	2000368c 	.word	0x2000368c

00020508 <update_cache>:
{
   20508:	b538      	push	{r3, r4, r5, lr}
   2050a:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
   2050c:	480c      	ldr	r0, [pc, #48]	; (20540 <update_cache+0x38>)
   2050e:	4d0d      	ldr	r5, [pc, #52]	; (20544 <update_cache+0x3c>)
   20510:	f008 fd00 	bl	28f14 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   20514:	4604      	mov	r4, r0
   20516:	b900      	cbnz	r0, 2051a <update_cache+0x12>
   20518:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   2051a:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   2051c:	b94a      	cbnz	r2, 20532 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   2051e:	7b5a      	ldrb	r2, [r3, #13]
   20520:	06d2      	lsls	r2, r2, #27
   20522:	d106      	bne.n	20532 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   20524:	69a2      	ldr	r2, [r4, #24]
   20526:	b922      	cbnz	r2, 20532 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   20528:	89da      	ldrh	r2, [r3, #14]
   2052a:	2a7f      	cmp	r2, #127	; 0x7f
   2052c:	d901      	bls.n	20532 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   2052e:	61eb      	str	r3, [r5, #28]
}
   20530:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   20532:	429c      	cmp	r4, r3
   20534:	d001      	beq.n	2053a <update_cache+0x32>
			z_reset_time_slice();
   20536:	f7ff ff7b 	bl	20430 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   2053a:	61ec      	str	r4, [r5, #28]
}
   2053c:	e7f8      	b.n	20530 <update_cache+0x28>
   2053e:	bf00      	nop
   20540:	200036ac 	.word	0x200036ac
   20544:	2000368c 	.word	0x2000368c

00020548 <move_thread_to_end_of_prio_q>:
{
   20548:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   2054a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   2054e:	7b43      	ldrb	r3, [r0, #13]
   20550:	2a00      	cmp	r2, #0
{
   20552:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   20554:	da04      	bge.n	20560 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   20556:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2055a:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   2055c:	f008 fc85 	bl	28e6a <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   20560:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   20562:	4a15      	ldr	r2, [pc, #84]	; (205b8 <move_thread_to_end_of_prio_q+0x70>)
   20564:	f063 037f 	orn	r3, r3, #127	; 0x7f
   20568:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   2056a:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2056e:	f102 0520 	add.w	r5, r2, #32
   20572:	42ab      	cmp	r3, r5
   20574:	d01b      	beq.n	205ae <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20576:	b1d3      	cbz	r3, 205ae <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
   20578:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   2057c:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   20580:	4286      	cmp	r6, r0
   20582:	d00f      	beq.n	205a4 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
   20584:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   20586:	2800      	cmp	r0, #0
   20588:	dd0c      	ble.n	205a4 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   2058a:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   2058c:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   20590:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   20592:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   20594:	6890      	ldr	r0, [r2, #8]
   20596:	1a43      	subs	r3, r0, r1
   20598:	4258      	negs	r0, r3
}
   2059a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   2059e:	4158      	adcs	r0, r3
   205a0:	f7ff bfb2 	b.w	20508 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   205a4:	42a3      	cmp	r3, r4
   205a6:	d002      	beq.n	205ae <move_thread_to_end_of_prio_q+0x66>
   205a8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   205aa:	2b00      	cmp	r3, #0
   205ac:	d1e6      	bne.n	2057c <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
   205ae:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
   205b2:	6021      	str	r1, [r4, #0]
	list->tail = node;
   205b4:	6251      	str	r1, [r2, #36]	; 0x24
}
   205b6:	e7ed      	b.n	20594 <move_thread_to_end_of_prio_q+0x4c>
   205b8:	2000368c 	.word	0x2000368c

000205bc <z_time_slice>:
{
   205bc:	b538      	push	{r3, r4, r5, lr}
   205be:	4601      	mov	r1, r0
	__asm__ volatile(
   205c0:	f04f 0320 	mov.w	r3, #32
   205c4:	f3ef 8411 	mrs	r4, BASEPRI
   205c8:	f383 8812 	msr	BASEPRI_MAX, r3
   205cc:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   205d0:	4b15      	ldr	r3, [pc, #84]	; (20628 <z_time_slice+0x6c>)
   205d2:	4a16      	ldr	r2, [pc, #88]	; (2062c <z_time_slice+0x70>)
   205d4:	6898      	ldr	r0, [r3, #8]
   205d6:	6815      	ldr	r5, [r2, #0]
   205d8:	42a8      	cmp	r0, r5
   205da:	d106      	bne.n	205ea <z_time_slice+0x2e>
			z_reset_time_slice();
   205dc:	f7ff ff28 	bl	20430 <z_reset_time_slice>
	__asm__ volatile(
   205e0:	f384 8811 	msr	BASEPRI, r4
   205e4:	f3bf 8f6f 	isb	sy
}
   205e8:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   205ea:	2500      	movs	r5, #0
   205ec:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   205ee:	4a10      	ldr	r2, [pc, #64]	; (20630 <z_time_slice+0x74>)
   205f0:	6812      	ldr	r2, [r2, #0]
   205f2:	b1ba      	cbz	r2, 20624 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   205f4:	89c2      	ldrh	r2, [r0, #14]
   205f6:	2a7f      	cmp	r2, #127	; 0x7f
   205f8:	d814      	bhi.n	20624 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
   205fa:	7b42      	ldrb	r2, [r0, #13]
   205fc:	06d2      	lsls	r2, r2, #27
   205fe:	d111      	bne.n	20624 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   20600:	4a0c      	ldr	r2, [pc, #48]	; (20634 <z_time_slice+0x78>)
   20602:	f990 500e 	ldrsb.w	r5, [r0, #14]
   20606:	6812      	ldr	r2, [r2, #0]
   20608:	4295      	cmp	r5, r2
   2060a:	db0b      	blt.n	20624 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   2060c:	4a0a      	ldr	r2, [pc, #40]	; (20638 <z_time_slice+0x7c>)
   2060e:	4290      	cmp	r0, r2
   20610:	d008      	beq.n	20624 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
   20612:	691a      	ldr	r2, [r3, #16]
   20614:	428a      	cmp	r2, r1
   20616:	dc02      	bgt.n	2061e <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
   20618:	f7ff ff96 	bl	20548 <move_thread_to_end_of_prio_q>
   2061c:	e7de      	b.n	205dc <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
   2061e:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
   20620:	611a      	str	r2, [r3, #16]
   20622:	e7dd      	b.n	205e0 <z_time_slice+0x24>
   20624:	2200      	movs	r2, #0
   20626:	e7fb      	b.n	20620 <z_time_slice+0x64>
   20628:	2000368c 	.word	0x2000368c
   2062c:	200036bc 	.word	0x200036bc
   20630:	200036c4 	.word	0x200036c4
   20634:	200036c0 	.word	0x200036c0
   20638:	20001de8 	.word	0x20001de8

0002063c <ready_thread>:
{
   2063c:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   2063e:	f990 200d 	ldrsb.w	r2, [r0, #13]
   20642:	7b43      	ldrb	r3, [r0, #13]
   20644:	2a00      	cmp	r2, #0
   20646:	db2a      	blt.n	2069e <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   20648:	06da      	lsls	r2, r3, #27
   2064a:	d128      	bne.n	2069e <ready_thread+0x62>
   2064c:	6982      	ldr	r2, [r0, #24]
   2064e:	bb32      	cbnz	r2, 2069e <ready_thread+0x62>
	return list->head == list;
   20650:	4a14      	ldr	r2, [pc, #80]	; (206a4 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
   20652:	f063 037f 	orn	r3, r3, #127	; 0x7f
   20656:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
   20658:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2065c:	f102 0520 	add.w	r5, r2, #32
   20660:	42ab      	cmp	r3, r5
   20662:	d017      	beq.n	20694 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20664:	b1b3      	cbz	r3, 20694 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
   20666:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2066a:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   2066e:	428e      	cmp	r6, r1
   20670:	d00b      	beq.n	2068a <ready_thread+0x4e>
		return b2 - b1;
   20672:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   20674:	2900      	cmp	r1, #0
   20676:	dd08      	ble.n	2068a <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
   20678:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2067a:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   2067e:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   20680:	6058      	str	r0, [r3, #4]
}
   20682:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   20684:	2000      	movs	r0, #0
   20686:	f7ff bf3f 	b.w	20508 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   2068a:	42a3      	cmp	r3, r4
   2068c:	d002      	beq.n	20694 <ready_thread+0x58>
   2068e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20690:	2b00      	cmp	r3, #0
   20692:	d1ea      	bne.n	2066a <ready_thread+0x2e>
	node->prev = tail;
   20694:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
   20698:	6020      	str	r0, [r4, #0]
	list->tail = node;
   2069a:	6250      	str	r0, [r2, #36]	; 0x24
}
   2069c:	e7f1      	b.n	20682 <ready_thread+0x46>
}
   2069e:	bc70      	pop	{r4, r5, r6}
   206a0:	4770      	bx	lr
   206a2:	bf00      	nop
   206a4:	2000368c 	.word	0x2000368c

000206a8 <z_sched_start>:
{
   206a8:	b510      	push	{r4, lr}
	__asm__ volatile(
   206aa:	f04f 0220 	mov.w	r2, #32
   206ae:	f3ef 8411 	mrs	r4, BASEPRI
   206b2:	f382 8812 	msr	BASEPRI_MAX, r2
   206b6:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   206ba:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   206bc:	0751      	lsls	r1, r2, #29
   206be:	d404      	bmi.n	206ca <z_sched_start+0x22>
	__asm__ volatile(
   206c0:	f384 8811 	msr	BASEPRI, r4
   206c4:	f3bf 8f6f 	isb	sy
}
   206c8:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   206ca:	f022 0204 	bic.w	r2, r2, #4
   206ce:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   206d0:	f7ff ffb4 	bl	2063c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   206d4:	4621      	mov	r1, r4
   206d6:	4802      	ldr	r0, [pc, #8]	; (206e0 <z_sched_start+0x38>)
}
   206d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   206dc:	f7ff beee 	b.w	204bc <z_reschedule>
   206e0:	20003d0c 	.word	0x20003d0c

000206e4 <unready_thread>:
{
   206e4:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   206e6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   206ea:	7b43      	ldrb	r3, [r0, #13]
   206ec:	2a00      	cmp	r2, #0
{
   206ee:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   206f0:	da04      	bge.n	206fc <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   206f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   206f6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   206f8:	f008 fbb7 	bl	28e6a <sys_dlist_remove>
	update_cache(thread == _current);
   206fc:	4b04      	ldr	r3, [pc, #16]	; (20710 <unready_thread+0x2c>)
   206fe:	6898      	ldr	r0, [r3, #8]
   20700:	1a43      	subs	r3, r0, r1
   20702:	4258      	negs	r0, r3
   20704:	4158      	adcs	r0, r3
}
   20706:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   2070a:	f7ff befd 	b.w	20508 <update_cache>
   2070e:	bf00      	nop
   20710:	2000368c 	.word	0x2000368c

00020714 <pend>:
{
   20714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20718:	4606      	mov	r6, r0
   2071a:	4615      	mov	r5, r2
   2071c:	461c      	mov	r4, r3
	__asm__ volatile(
   2071e:	f04f 0320 	mov.w	r3, #32
   20722:	f3ef 8711 	mrs	r7, BASEPRI
   20726:	f383 8812 	msr	BASEPRI_MAX, r3
   2072a:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   2072e:	f008 fc29 	bl	28f84 <add_to_waitq_locked>
	__asm__ volatile(
   20732:	f387 8811 	msr	BASEPRI, r7
   20736:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2073a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   2073e:	bf08      	it	eq
   20740:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   20744:	d008      	beq.n	20758 <pend+0x44>
   20746:	462a      	mov	r2, r5
   20748:	4623      	mov	r3, r4
   2074a:	f106 0018 	add.w	r0, r6, #24
   2074e:	4903      	ldr	r1, [pc, #12]	; (2075c <pend+0x48>)
}
   20750:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   20754:	f000 ba62 	b.w	20c1c <z_add_timeout>
   20758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2075c:	00028f41 	.word	0x00028f41

00020760 <z_pend_curr>:
{
   20760:	b510      	push	{r4, lr}
	pending_current = _current;
   20762:	4b07      	ldr	r3, [pc, #28]	; (20780 <z_pend_curr+0x20>)
   20764:	6898      	ldr	r0, [r3, #8]
   20766:	4b07      	ldr	r3, [pc, #28]	; (20784 <z_pend_curr+0x24>)
{
   20768:	460c      	mov	r4, r1
	pending_current = _current;
   2076a:	6018      	str	r0, [r3, #0]
{
   2076c:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   2076e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   20772:	f7ff ffcf 	bl	20714 <pend>
   20776:	4620      	mov	r0, r4
}
   20778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2077c:	f7e3 bea6 	b.w	44cc <arch_swap>
   20780:	2000368c 	.word	0x2000368c
   20784:	200036bc 	.word	0x200036bc

00020788 <z_set_prio>:
{
   20788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2078a:	4604      	mov	r4, r0
	__asm__ volatile(
   2078c:	f04f 0320 	mov.w	r3, #32
   20790:	f3ef 8611 	mrs	r6, BASEPRI
   20794:	f383 8812 	msr	BASEPRI_MAX, r3
   20798:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   2079c:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2079e:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   207a0:	b249      	sxtb	r1, r1
   207a2:	d133      	bne.n	2080c <z_set_prio+0x84>
		if (need_sched) {
   207a4:	6982      	ldr	r2, [r0, #24]
   207a6:	bb8a      	cbnz	r2, 2080c <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   207a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   207ac:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   207ae:	f008 fb5c 	bl	28e6a <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   207b2:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   207b4:	4a17      	ldr	r2, [pc, #92]	; (20814 <z_set_prio+0x8c>)
				thread->base.prio = prio;
   207b6:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   207b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   207bc:	7343      	strb	r3, [r0, #13]
   207be:	4610      	mov	r0, r2
   207c0:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   207c4:	4283      	cmp	r3, r0
   207c6:	d01b      	beq.n	20800 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   207c8:	b1d3      	cbz	r3, 20800 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
   207ca:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
   207cc:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   207d0:	42a9      	cmp	r1, r5
   207d2:	d010      	beq.n	207f6 <z_set_prio+0x6e>
		return b2 - b1;
   207d4:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   207d6:	2d00      	cmp	r5, #0
   207d8:	dd0d      	ble.n	207f6 <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
   207da:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   207dc:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   207e0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   207e2:	605c      	str	r4, [r3, #4]
			update_cache(1);
   207e4:	2001      	movs	r0, #1
   207e6:	f7ff fe8f 	bl	20508 <update_cache>
   207ea:	2001      	movs	r0, #1
	__asm__ volatile(
   207ec:	f386 8811 	msr	BASEPRI, r6
   207f0:	f3bf 8f6f 	isb	sy
}
   207f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   207f6:	42bb      	cmp	r3, r7
   207f8:	d002      	beq.n	20800 <z_set_prio+0x78>
   207fa:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   207fc:	2b00      	cmp	r3, #0
   207fe:	d1e5      	bne.n	207cc <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
   20800:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
   20802:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
   20806:	601c      	str	r4, [r3, #0]
	list->tail = node;
   20808:	6254      	str	r4, [r2, #36]	; 0x24
}
   2080a:	e7eb      	b.n	207e4 <z_set_prio+0x5c>
			thread->base.prio = prio;
   2080c:	73a1      	strb	r1, [r4, #14]
   2080e:	2000      	movs	r0, #0
   20810:	e7ec      	b.n	207ec <z_set_prio+0x64>
   20812:	bf00      	nop
   20814:	2000368c 	.word	0x2000368c

00020818 <z_impl_k_thread_suspend>:
{
   20818:	b570      	push	{r4, r5, r6, lr}
   2081a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   2081c:	3018      	adds	r0, #24
   2081e:	f008 fc35 	bl	2908c <z_abort_timeout>
	__asm__ volatile(
   20822:	f04f 0320 	mov.w	r3, #32
   20826:	f3ef 8611 	mrs	r6, BASEPRI
   2082a:	f383 8812 	msr	BASEPRI_MAX, r3
   2082e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   20832:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   20836:	7b63      	ldrb	r3, [r4, #13]
   20838:	2a00      	cmp	r2, #0
   2083a:	da05      	bge.n	20848 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2083c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   20840:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   20842:	4620      	mov	r0, r4
   20844:	f008 fb11 	bl	28e6a <sys_dlist_remove>
		update_cache(thread == _current);
   20848:	4d0b      	ldr	r5, [pc, #44]	; (20878 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2084a:	7b63      	ldrb	r3, [r4, #13]
   2084c:	68a8      	ldr	r0, [r5, #8]
   2084e:	f043 0310 	orr.w	r3, r3, #16
   20852:	7363      	strb	r3, [r4, #13]
   20854:	1b03      	subs	r3, r0, r4
   20856:	4258      	negs	r0, r3
   20858:	4158      	adcs	r0, r3
   2085a:	f7ff fe55 	bl	20508 <update_cache>
	__asm__ volatile(
   2085e:	f386 8811 	msr	BASEPRI, r6
   20862:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   20866:	68ab      	ldr	r3, [r5, #8]
   20868:	42a3      	cmp	r3, r4
   2086a:	d103      	bne.n	20874 <z_impl_k_thread_suspend+0x5c>
}
   2086c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   20870:	f008 bb46 	b.w	28f00 <z_reschedule_unlocked>
}
   20874:	bd70      	pop	{r4, r5, r6, pc}
   20876:	bf00      	nop
   20878:	2000368c 	.word	0x2000368c

0002087c <k_sched_unlock>:
{
   2087c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2087e:	f04f 0320 	mov.w	r3, #32
   20882:	f3ef 8411 	mrs	r4, BASEPRI
   20886:	f383 8812 	msr	BASEPRI_MAX, r3
   2088a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   2088e:	4b08      	ldr	r3, [pc, #32]	; (208b0 <k_sched_unlock+0x34>)
   20890:	689a      	ldr	r2, [r3, #8]
   20892:	7bd3      	ldrb	r3, [r2, #15]
   20894:	3301      	adds	r3, #1
   20896:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   20898:	2000      	movs	r0, #0
   2089a:	f7ff fe35 	bl	20508 <update_cache>
	__asm__ volatile(
   2089e:	f384 8811 	msr	BASEPRI, r4
   208a2:	f3bf 8f6f 	isb	sy
}
   208a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   208aa:	f008 bb29 	b.w	28f00 <z_reschedule_unlocked>
   208ae:	bf00      	nop
   208b0:	2000368c 	.word	0x2000368c

000208b4 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   208b4:	4b04      	ldr	r3, [pc, #16]	; (208c8 <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   208b6:	2100      	movs	r1, #0
   208b8:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   208bc:	e9c3 2208 	strd	r2, r2, [r3, #32]
   208c0:	4608      	mov	r0, r1
   208c2:	f7ff bdcb 	b.w	2045c <k_sched_time_slice_set>
   208c6:	bf00      	nop
   208c8:	2000368c 	.word	0x2000368c

000208cc <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   208cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   208ce:	f04f 0320 	mov.w	r3, #32
   208d2:	f3ef 8511 	mrs	r5, BASEPRI
   208d6:	f383 8812 	msr	BASEPRI_MAX, r3
   208da:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(&_kernel.ready_q.runq,
   208de:	491a      	ldr	r1, [pc, #104]	; (20948 <z_impl_k_yield+0x7c>)
   208e0:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   208e2:	7b43      	ldrb	r3, [r0, #13]
   208e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   208e8:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   208ea:	f008 fabe 	bl	28e6a <sys_dlist_remove>
			       _current);
	}
	queue_thread(&_kernel.ready_q.runq, _current);
   208ee:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   208f0:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   208f2:	4608      	mov	r0, r1
   208f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
   208f8:	735a      	strb	r2, [r3, #13]
   208fa:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   208fe:	4282      	cmp	r2, r0
   20900:	d01c      	beq.n	2093c <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20902:	b1da      	cbz	r2, 2093c <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
   20904:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
   20906:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   2090a:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
   2090e:	42a6      	cmp	r6, r4
   20910:	d00f      	beq.n	20932 <z_impl_k_yield+0x66>
		return b2 - b1;
   20912:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   20914:	2c00      	cmp	r4, #0
   20916:	dd0c      	ble.n	20932 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
   20918:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   2091a:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   2091e:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   20920:	6053      	str	r3, [r2, #4]
	update_cache(1);
   20922:	2001      	movs	r0, #1
   20924:	f7ff fdf0 	bl	20508 <update_cache>
   20928:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   2092a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2092e:	f7e3 bdcd 	b.w	44cc <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   20932:	42ba      	cmp	r2, r7
   20934:	d002      	beq.n	2093c <z_impl_k_yield+0x70>
   20936:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20938:	2a00      	cmp	r2, #0
   2093a:	d1e6      	bne.n	2090a <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
   2093c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
   2093e:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
   20942:	6013      	str	r3, [r2, #0]
	list->tail = node;
   20944:	624b      	str	r3, [r1, #36]	; 0x24
}
   20946:	e7ec      	b.n	20922 <z_impl_k_yield+0x56>
   20948:	2000368c 	.word	0x2000368c

0002094c <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   2094c:	ea50 0301 	orrs.w	r3, r0, r1
{
   20950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20954:	4605      	mov	r5, r0
   20956:	460e      	mov	r6, r1
	if (ticks == 0) {
   20958:	d103      	bne.n	20962 <z_tick_sleep+0x16>
	z_impl_k_yield();
   2095a:	f7ff ffb7 	bl	208cc <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   2095e:	2000      	movs	r0, #0
   20960:	e033      	b.n	209ca <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   20962:	f06f 0401 	mvn.w	r4, #1
   20966:	1a24      	subs	r4, r4, r0
   20968:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2096c:	eb63 0301 	sbc.w	r3, r3, r1
   20970:	2c01      	cmp	r4, #1
   20972:	f173 0300 	sbcs.w	r3, r3, #0
   20976:	da02      	bge.n	2097e <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   20978:	f008 fbd8 	bl	2912c <sys_clock_tick_get_32>
   2097c:	1944      	adds	r4, r0, r5
   2097e:	f04f 0320 	mov.w	r3, #32
   20982:	f3ef 8811 	mrs	r8, BASEPRI
   20986:	f383 8812 	msr	BASEPRI_MAX, r3
   2098a:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   2098e:	4f10      	ldr	r7, [pc, #64]	; (209d0 <z_tick_sleep+0x84>)
   20990:	4b10      	ldr	r3, [pc, #64]	; (209d4 <z_tick_sleep+0x88>)
   20992:	68b8      	ldr	r0, [r7, #8]
   20994:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   20996:	f7ff fea5 	bl	206e4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   2099a:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   2099c:	490e      	ldr	r1, [pc, #56]	; (209d8 <z_tick_sleep+0x8c>)
   2099e:	462a      	mov	r2, r5
   209a0:	4633      	mov	r3, r6
   209a2:	3018      	adds	r0, #24
   209a4:	f000 f93a 	bl	20c1c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   209a8:	68ba      	ldr	r2, [r7, #8]
   209aa:	7b53      	ldrb	r3, [r2, #13]
   209ac:	f043 0310 	orr.w	r3, r3, #16
   209b0:	7353      	strb	r3, [r2, #13]
   209b2:	4640      	mov	r0, r8
   209b4:	f7e3 fd8a 	bl	44cc <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   209b8:	f008 fbb8 	bl	2912c <sys_clock_tick_get_32>
   209bc:	1a20      	subs	r0, r4, r0
   209be:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   209c2:	2801      	cmp	r0, #1
   209c4:	f173 0300 	sbcs.w	r3, r3, #0
   209c8:	dbc9      	blt.n	2095e <z_tick_sleep+0x12>
}
   209ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   209ce:	bf00      	nop
   209d0:	2000368c 	.word	0x2000368c
   209d4:	200036bc 	.word	0x200036bc
   209d8:	00028f41 	.word	0x00028f41

000209dc <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   209dc:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   209e0:	bf08      	it	eq
   209e2:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   209e6:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   209e8:	d106      	bne.n	209f8 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   209ea:	4b08      	ldr	r3, [pc, #32]	; (20a0c <z_impl_k_sleep+0x30>)
   209ec:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   209ee:	f7ff ff13 	bl	20818 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   209f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   209f6:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   209f8:	f7ff ffa8 	bl	2094c <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   209fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   20a00:	fb80 0303 	smull	r0, r3, r0, r3
   20a04:	0bc0      	lsrs	r0, r0, #15
   20a06:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   20a0a:	e7f4      	b.n	209f6 <z_impl_k_sleep+0x1a>
   20a0c:	2000368c 	.word	0x2000368c

00020a10 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   20a10:	4b01      	ldr	r3, [pc, #4]	; (20a18 <z_impl_z_current_get+0x8>)
   20a12:	6898      	ldr	r0, [r3, #8]
   20a14:	4770      	bx	lr
   20a16:	bf00      	nop
   20a18:	2000368c 	.word	0x2000368c

00020a1c <z_impl_k_is_preempt_thread>:
   20a1c:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   20a20:	b93b      	cbnz	r3, 20a32 <z_impl_k_is_preempt_thread+0x16>
   20a22:	4b05      	ldr	r3, [pc, #20]	; (20a38 <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   20a24:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
   20a26:	89d8      	ldrh	r0, [r3, #14]
   20a28:	287f      	cmp	r0, #127	; 0x7f
   20a2a:	bf8c      	ite	hi
   20a2c:	2000      	movhi	r0, #0
   20a2e:	2001      	movls	r0, #1
   20a30:	4770      	bx	lr
   20a32:	2000      	movs	r0, #0
}
   20a34:	4770      	bx	lr
   20a36:	bf00      	nop
   20a38:	2000368c 	.word	0x2000368c

00020a3c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   20a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20a40:	4604      	mov	r4, r0
   20a42:	f04f 0320 	mov.w	r3, #32
   20a46:	f3ef 8611 	mrs	r6, BASEPRI
   20a4a:	f383 8812 	msr	BASEPRI_MAX, r3
   20a4e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   20a52:	7b43      	ldrb	r3, [r0, #13]
   20a54:	071a      	lsls	r2, r3, #28
   20a56:	d505      	bpl.n	20a64 <z_thread_abort+0x28>
	__asm__ volatile(
   20a58:	f386 8811 	msr	BASEPRI, r6
   20a5c:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   20a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   20a64:	f023 0220 	bic.w	r2, r3, #32
   20a68:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   20a6c:	09d2      	lsrs	r2, r2, #7
   20a6e:	d120      	bne.n	20ab2 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   20a70:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   20a72:	68a3      	ldr	r3, [r4, #8]
   20a74:	b113      	cbz	r3, 20a7c <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   20a76:	4620      	mov	r0, r4
   20a78:	f008 f9ff 	bl	28e7a <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   20a7c:	f104 0018 	add.w	r0, r4, #24
   20a80:	f008 fb04 	bl	2908c <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   20a84:	f104 0758 	add.w	r7, r4, #88	; 0x58
   20a88:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   20a8c:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20a8e:	42bd      	cmp	r5, r7
   20a90:	d000      	beq.n	20a94 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   20a92:	b9b5      	cbnz	r5, 20ac2 <z_thread_abort+0x86>
		update_cache(1);
   20a94:	2001      	movs	r0, #1
   20a96:	f7ff fd37 	bl	20508 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   20a9a:	4b10      	ldr	r3, [pc, #64]	; (20adc <z_thread_abort+0xa0>)
   20a9c:	689b      	ldr	r3, [r3, #8]
   20a9e:	42a3      	cmp	r3, r4
   20aa0:	d1da      	bne.n	20a58 <z_thread_abort+0x1c>
   20aa2:	f3ef 8305 	mrs	r3, IPSR
   20aa6:	2b00      	cmp	r3, #0
   20aa8:	d1d6      	bne.n	20a58 <z_thread_abort+0x1c>
   20aaa:	4630      	mov	r0, r6
   20aac:	f7e3 fd0e 	bl	44cc <arch_swap>
	return ret;
   20ab0:	e7d2      	b.n	20a58 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   20ab2:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   20ab6:	f043 0308 	orr.w	r3, r3, #8
   20aba:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   20abc:	f008 f9d5 	bl	28e6a <sys_dlist_remove>
}
   20ac0:	e7d7      	b.n	20a72 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   20ac2:	4628      	mov	r0, r5
   20ac4:	f008 f9d9 	bl	28e7a <unpend_thread_no_timeout>
   20ac8:	f105 0018 	add.w	r0, r5, #24
   20acc:	f008 fade 	bl	2908c <z_abort_timeout>
   20ad0:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   20ad4:	4628      	mov	r0, r5
   20ad6:	f7ff fdb1 	bl	2063c <ready_thread>
   20ada:	e7d7      	b.n	20a8c <z_thread_abort+0x50>
   20adc:	2000368c 	.word	0x2000368c

00020ae0 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   20ae0:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   20ae2:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   20ae6:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   20ae8:	e9cd 6700 	strd	r6, r7, [sp]
   20aec:	f7ff fe38 	bl	20760 <z_pend_curr>

	if (data != NULL) {
   20af0:	b11c      	cbz	r4, 20afa <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   20af2:	4b03      	ldr	r3, [pc, #12]	; (20b00 <z_sched_wait+0x20>)
   20af4:	689b      	ldr	r3, [r3, #8]
   20af6:	695b      	ldr	r3, [r3, #20]
   20af8:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   20afa:	b002      	add	sp, #8
   20afc:	bdd0      	pop	{r4, r6, r7, pc}
   20afe:	bf00      	nop
   20b00:	2000368c 	.word	0x2000368c

00020b04 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   20b04:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
   20b06:	4806      	ldr	r0, [pc, #24]	; (20b20 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   20b08:	4a06      	ldr	r2, [pc, #24]	; (20b24 <z_data_copy+0x20>)
   20b0a:	4907      	ldr	r1, [pc, #28]	; (20b28 <z_data_copy+0x24>)
   20b0c:	1a12      	subs	r2, r2, r0
   20b0e:	f003 f94b 	bl	23da8 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   20b12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
   20b16:	4a05      	ldr	r2, [pc, #20]	; (20b2c <z_data_copy+0x28>)
   20b18:	4905      	ldr	r1, [pc, #20]	; (20b30 <z_data_copy+0x2c>)
   20b1a:	4806      	ldr	r0, [pc, #24]	; (20b34 <z_data_copy+0x30>)
   20b1c:	f003 b944 	b.w	23da8 <memcpy>
   20b20:	20000000 	.word	0x20000000
   20b24:	200012f0 	.word	0x200012f0
   20b28:	0002ff18 	.word	0x0002ff18
   20b2c:	00000000 	.word	0x00000000
   20b30:	0002ff18 	.word	0x0002ff18
   20b34:	20000000 	.word	0x20000000

00020b38 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   20b38:	4b03      	ldr	r3, [pc, #12]	; (20b48 <elapsed+0x10>)
   20b3a:	681b      	ldr	r3, [r3, #0]
   20b3c:	b90b      	cbnz	r3, 20b42 <elapsed+0xa>
   20b3e:	f7fe baed 	b.w	1f11c <sys_clock_elapsed>
}
   20b42:	2000      	movs	r0, #0
   20b44:	4770      	bx	lr
   20b46:	bf00      	nop
   20b48:	200036c8 	.word	0x200036c8

00020b4c <next_timeout>:
	return list->head == list;
   20b4c:	4b11      	ldr	r3, [pc, #68]	; (20b94 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
   20b4e:	b510      	push	{r4, lr}
   20b50:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20b52:	429c      	cmp	r4, r3
   20b54:	bf08      	it	eq
   20b56:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   20b58:	f7ff ffee 	bl	20b38 <elapsed>
   20b5c:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
   20b5e:	b16c      	cbz	r4, 20b7c <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   20b60:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
   20b64:	1ac0      	subs	r0, r0, r3
   20b66:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   20b6a:	2801      	cmp	r0, #1
   20b6c:	f173 0200 	sbcs.w	r2, r3, #0
   20b70:	db0d      	blt.n	20b8e <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   20b72:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   20b76:	f173 0300 	sbcs.w	r3, r3, #0
   20b7a:	db01      	blt.n	20b80 <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
   20b7c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   20b80:	4b05      	ldr	r3, [pc, #20]	; (20b98 <next_timeout+0x4c>)
   20b82:	691b      	ldr	r3, [r3, #16]
   20b84:	b113      	cbz	r3, 20b8c <next_timeout+0x40>
   20b86:	4298      	cmp	r0, r3
   20b88:	bfa8      	it	ge
   20b8a:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   20b8c:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   20b8e:	2000      	movs	r0, #0
   20b90:	e7f6      	b.n	20b80 <next_timeout+0x34>
   20b92:	bf00      	nop
   20b94:	20000f04 	.word	0x20000f04
   20b98:	2000368c 	.word	0x2000368c

00020b9c <remove_timeout>:
{
   20b9c:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   20b9e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   20ba0:	b168      	cbz	r0, 20bbe <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   20ba2:	4a0a      	ldr	r2, [pc, #40]	; (20bcc <remove_timeout+0x30>)
   20ba4:	6852      	ldr	r2, [r2, #4]
   20ba6:	4290      	cmp	r0, r2
   20ba8:	d009      	beq.n	20bbe <remove_timeout+0x22>
	if (next(t) != NULL) {
   20baa:	b143      	cbz	r3, 20bbe <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   20bac:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   20bb0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   20bb4:	1912      	adds	r2, r2, r4
   20bb6:	eb41 0105 	adc.w	r1, r1, r5
   20bba:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   20bbe:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   20bc0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   20bc2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   20bc4:	2300      	movs	r3, #0
	node->prev = NULL;
   20bc6:	e9c0 3300 	strd	r3, r3, [r0]
}
   20bca:	bd30      	pop	{r4, r5, pc}
   20bcc:	20000f04 	.word	0x20000f04

00020bd0 <timeout_rem>:
	return ret;
}

/* must be locked */
static k_ticks_t timeout_rem(const struct _timeout *timeout)
{
   20bd0:	b570      	push	{r4, r5, r6, lr}
	k_ticks_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   20bd2:	6804      	ldr	r4, [r0, #0]
   20bd4:	b1e4      	cbz	r4, 20c10 <timeout_rem+0x40>
	return list->head == list;
   20bd6:	4a10      	ldr	r2, [pc, #64]	; (20c18 <timeout_rem+0x48>)
   20bd8:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20bda:	4293      	cmp	r3, r2
   20bdc:	d015      	beq.n	20c0a <timeout_rem+0x3a>
	return (node == list->tail) ? NULL : node->next;
   20bde:	2400      	movs	r4, #0
   20be0:	6851      	ldr	r1, [r2, #4]
   20be2:	4625      	mov	r5, r4
		return 0;
	}

	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   20be4:	b933      	cbnz	r3, 20bf4 <timeout_rem+0x24>
		if (timeout == t) {
			break;
		}
	}

	return ticks - elapsed();
   20be6:	f7ff ffa7 	bl	20b38 <elapsed>
   20bea:	4601      	mov	r1, r0
   20bec:	1a20      	subs	r0, r4, r0
   20bee:	eb65 71e1 	sbc.w	r1, r5, r1, asr #31
}
   20bf2:	bd70      	pop	{r4, r5, r6, pc}
		ticks += t->dticks;
   20bf4:	e9d3 2604 	ldrd	r2, r6, [r3, #16]
   20bf8:	18a4      	adds	r4, r4, r2
   20bfa:	eb45 0506 	adc.w	r5, r5, r6
		if (timeout == t) {
   20bfe:	4283      	cmp	r3, r0
   20c00:	d0f1      	beq.n	20be6 <timeout_rem+0x16>
   20c02:	428b      	cmp	r3, r1
   20c04:	d0ef      	beq.n	20be6 <timeout_rem+0x16>
   20c06:	681b      	ldr	r3, [r3, #0]
   20c08:	e7ec      	b.n	20be4 <timeout_rem+0x14>
   20c0a:	2400      	movs	r4, #0
   20c0c:	4625      	mov	r5, r4
   20c0e:	e7ea      	b.n	20be6 <timeout_rem+0x16>
		return 0;
   20c10:	4620      	mov	r0, r4
   20c12:	4621      	mov	r1, r4
   20c14:	e7ed      	b.n	20bf2 <timeout_rem+0x22>
   20c16:	bf00      	nop
   20c18:	20000f04 	.word	0x20000f04

00020c1c <z_add_timeout>:
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   20c1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   20c20:	bf08      	it	eq
   20c22:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   20c26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20c28:	4604      	mov	r4, r0
   20c2a:	461f      	mov	r7, r3
   20c2c:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   20c2e:	d067      	beq.n	20d00 <z_add_timeout+0xe4>
	to->fn = fn;
   20c30:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   20c32:	f04f 0320 	mov.w	r3, #32
   20c36:	f3ef 8611 	mrs	r6, BASEPRI
   20c3a:	f383 8812 	msr	BASEPRI_MAX, r3
   20c3e:	f3bf 8f6f 	isb	sy
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   20c42:	f06f 0201 	mvn.w	r2, #1
   20c46:	1b53      	subs	r3, r2, r5
   20c48:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   20c4c:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   20c50:	2b00      	cmp	r3, #0
   20c52:	db1b      	blt.n	20c8c <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   20c54:	4b2b      	ldr	r3, [pc, #172]	; (20d04 <z_add_timeout+0xe8>)
   20c56:	e9d3 1300 	ldrd	r1, r3, [r3]
   20c5a:	1a52      	subs	r2, r2, r1
   20c5c:	eb6c 0303 	sbc.w	r3, ip, r3
   20c60:	1b55      	subs	r5, r2, r5
			to->dticks = MAX(1, ticks);
   20c62:	eb63 0307 	sbc.w	r3, r3, r7
   20c66:	2d01      	cmp	r5, #1
   20c68:	f173 0200 	sbcs.w	r2, r3, #0
   20c6c:	bfbc      	itt	lt
   20c6e:	2501      	movlt	r5, #1
   20c70:	2300      	movlt	r3, #0
   20c72:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
   20c76:	4824      	ldr	r0, [pc, #144]	; (20d08 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
   20c78:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20c7c:	4283      	cmp	r3, r0
   20c7e:	d118      	bne.n	20cb2 <z_add_timeout+0x96>
	node->prev = tail;
   20c80:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
   20c84:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   20c88:	6044      	str	r4, [r0, #4]
}
   20c8a:	e026      	b.n	20cda <z_add_timeout+0xbe>
			to->dticks = timeout.ticks + 1 + elapsed();
   20c8c:	f7ff ff54 	bl	20b38 <elapsed>
   20c90:	3501      	adds	r5, #1
   20c92:	f147 0700 	adc.w	r7, r7, #0
   20c96:	182d      	adds	r5, r5, r0
   20c98:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
   20c9c:	e9c4 5704 	strd	r5, r7, [r4, #16]
   20ca0:	e7e9      	b.n	20c76 <z_add_timeout+0x5a>
			to->dticks -= t->dticks;
   20ca2:	1a52      	subs	r2, r2, r1
   20ca4:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   20ca8:	459c      	cmp	ip, r3
   20caa:	e9c4 2504 	strd	r2, r5, [r4, #16]
   20cae:	d0e7      	beq.n	20c80 <z_add_timeout+0x64>
   20cb0:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   20cb2:	2b00      	cmp	r3, #0
   20cb4:	d0e4      	beq.n	20c80 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
   20cb6:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
   20cba:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
   20cbe:	428a      	cmp	r2, r1
   20cc0:	eb75 0e07 	sbcs.w	lr, r5, r7
   20cc4:	daed      	bge.n	20ca2 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
   20cc6:	1a8a      	subs	r2, r1, r2
   20cc8:	eb67 0505 	sbc.w	r5, r7, r5
   20ccc:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   20cd0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   20cd2:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   20cd6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   20cd8:	605c      	str	r4, [r3, #4]
	return list->head == list;
   20cda:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20cdc:	4283      	cmp	r3, r0
   20cde:	d00b      	beq.n	20cf8 <z_add_timeout+0xdc>
		if (to == first()) {
   20ce0:	429c      	cmp	r4, r3
   20ce2:	d109      	bne.n	20cf8 <z_add_timeout+0xdc>
			int32_t next_time = next_timeout();
   20ce4:	f7ff ff32 	bl	20b4c <next_timeout>
			if (next_time == 0 ||
   20ce8:	b118      	cbz	r0, 20cf2 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
   20cea:	4b08      	ldr	r3, [pc, #32]	; (20d0c <z_add_timeout+0xf0>)
			if (next_time == 0 ||
   20cec:	691b      	ldr	r3, [r3, #16]
   20cee:	4283      	cmp	r3, r0
   20cf0:	d002      	beq.n	20cf8 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
   20cf2:	2100      	movs	r1, #0
   20cf4:	f7fe f9e0 	bl	1f0b8 <sys_clock_set_timeout>
	__asm__ volatile(
   20cf8:	f386 8811 	msr	BASEPRI, r6
   20cfc:	f3bf 8f6f 	isb	sy
}
   20d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20d02:	bf00      	nop
   20d04:	20001f88 	.word	0x20001f88
   20d08:	20000f04 	.word	0x20000f04
   20d0c:	2000368c 	.word	0x2000368c

00020d10 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   20d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20d14:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   20d16:	f7ff fc51 	bl	205bc <z_time_slice>
	__asm__ volatile(
   20d1a:	f04f 0320 	mov.w	r3, #32
   20d1e:	f3ef 8411 	mrs	r4, BASEPRI
   20d22:	f383 8812 	msr	BASEPRI_MAX, r3
   20d26:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   20d2a:	4e24      	ldr	r6, [pc, #144]	; (20dbc <sys_clock_announce+0xac>)
	return list->head == list;
   20d2c:	f8df 8090 	ldr.w	r8, [pc, #144]	; 20dc0 <sys_clock_announce+0xb0>
   20d30:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   20d32:	4d24      	ldr	r5, [pc, #144]	; (20dc4 <sys_clock_announce+0xb4>)
   20d34:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   20d38:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20d3a:	4540      	cmp	r0, r8
		curr_tick += dt;
   20d3c:	e9d5 1e00 	ldrd	r1, lr, [r5]
   20d40:	ea4f 77e2 	mov.w	r7, r2, asr #31
   20d44:	d00b      	beq.n	20d5e <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   20d46:	b150      	cbz	r0, 20d5e <sys_clock_announce+0x4e>
   20d48:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
   20d4c:	429a      	cmp	r2, r3
   20d4e:	eb77 090c 	sbcs.w	r9, r7, ip
   20d52:	da16      	bge.n	20d82 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   20d54:	1a9b      	subs	r3, r3, r2
   20d56:	eb6c 0c07 	sbc.w	ip, ip, r7
   20d5a:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   20d5e:	1852      	adds	r2, r2, r1
   20d60:	eb4e 0707 	adc.w	r7, lr, r7
   20d64:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
   20d68:	2500      	movs	r5, #0
   20d6a:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
   20d6c:	f7ff feee 	bl	20b4c <next_timeout>
   20d70:	4629      	mov	r1, r5
   20d72:	f7fe f9a1 	bl	1f0b8 <sys_clock_set_timeout>
	__asm__ volatile(
   20d76:	f384 8811 	msr	BASEPRI, r4
   20d7a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   20d7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   20d82:	1859      	adds	r1, r3, r1
   20d84:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
   20d88:	1ad3      	subs	r3, r2, r3
   20d8a:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   20d8c:	2200      	movs	r2, #0
   20d8e:	2300      	movs	r3, #0
   20d90:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
   20d94:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
   20d98:	f7ff ff00 	bl	20b9c <remove_timeout>
   20d9c:	f384 8811 	msr	BASEPRI, r4
   20da0:	f3bf 8f6f 	isb	sy
		t->fn(t);
   20da4:	6883      	ldr	r3, [r0, #8]
   20da6:	4798      	blx	r3
	__asm__ volatile(
   20da8:	f04f 0320 	mov.w	r3, #32
   20dac:	f3ef 8411 	mrs	r4, BASEPRI
   20db0:	f383 8812 	msr	BASEPRI_MAX, r3
   20db4:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   20db8:	e7bc      	b.n	20d34 <sys_clock_announce+0x24>
   20dba:	bf00      	nop
   20dbc:	200036c8 	.word	0x200036c8
   20dc0:	20000f04 	.word	0x20000f04
   20dc4:	20001f88 	.word	0x20001f88

00020dc8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   20dc8:	b510      	push	{r4, lr}
   20dca:	f04f 0320 	mov.w	r3, #32
   20dce:	f3ef 8411 	mrs	r4, BASEPRI
   20dd2:	f383 8812 	msr	BASEPRI_MAX, r3
   20dd6:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   20dda:	f7fe f99f 	bl	1f11c <sys_clock_elapsed>
   20dde:	4a05      	ldr	r2, [pc, #20]	; (20df4 <sys_clock_tick_get+0x2c>)
   20de0:	e9d2 3100 	ldrd	r3, r1, [r2]
   20de4:	18c0      	adds	r0, r0, r3
   20de6:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
   20dea:	f384 8811 	msr	BASEPRI, r4
   20dee:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   20df2:	bd10      	pop	{r4, pc}
   20df4:	20001f88 	.word	0x20001f88

00020df8 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   20df8:	b570      	push	{r4, r5, r6, lr}
   20dfa:	4604      	mov	r4, r0
	__asm__ volatile(
   20dfc:	f04f 0320 	mov.w	r3, #32
   20e00:	f3ef 8611 	mrs	r6, BASEPRI
   20e04:	f383 8812 	msr	BASEPRI_MAX, r3
   20e08:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   20e0c:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   20e10:	3301      	adds	r3, #1
   20e12:	f142 0200 	adc.w	r2, r2, #0
   20e16:	2b02      	cmp	r3, #2
   20e18:	f172 0300 	sbcs.w	r3, r2, #0
   20e1c:	d304      	bcc.n	20e28 <z_timer_expiration_handler+0x30>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   20e1e:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   20e22:	4911      	ldr	r1, [pc, #68]	; (20e68 <z_timer_expiration_handler+0x70>)
   20e24:	f7ff fefa 	bl	20c1c <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   20e28:	6b23      	ldr	r3, [r4, #48]	; 0x30
   20e2a:	3301      	adds	r3, #1
   20e2c:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   20e2e:	6a23      	ldr	r3, [r4, #32]
   20e30:	b10b      	cbz	r3, 20e36 <z_timer_expiration_handler+0x3e>
		timer->expiry_fn(timer);
   20e32:	4620      	mov	r0, r4
   20e34:	4798      	blx	r3
	return list->head == list;
   20e36:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20e3a:	42a5      	cmp	r5, r4
   20e3c:	d000      	beq.n	20e40 <z_timer_expiration_handler+0x48>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   20e3e:	b925      	cbnz	r5, 20e4a <z_timer_expiration_handler+0x52>
	__asm__ volatile(
   20e40:	f386 8811 	msr	BASEPRI, r6
   20e44:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   20e48:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   20e4a:	4628      	mov	r0, r5
   20e4c:	f008 f828 	bl	28ea0 <z_unpend_thread_no_timeout>
   20e50:	2300      	movs	r3, #0
   20e52:	67eb      	str	r3, [r5, #124]	; 0x7c
   20e54:	f386 8811 	msr	BASEPRI, r6
   20e58:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   20e5c:	4628      	mov	r0, r5
}
   20e5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   20e62:	f008 b85d 	b.w	28f20 <z_ready_thread>
   20e66:	bf00      	nop
   20e68:	00020df9 	.word	0x00020df9

00020e6c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   20e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20e70:	4611      	mov	r1, r2
   20e72:	4605      	mov	r5, r0
   20e74:	4618      	mov	r0, r3
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   20e76:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   20e7a:	bf08      	it	eq
   20e7c:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
{
   20e80:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   20e84:	4688      	mov	r8, r1
   20e86:	4607      	mov	r7, r0
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   20e88:	d03c      	beq.n	20f04 <z_impl_k_timer_start+0x98>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   20e8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   20e8e:	bf08      	it	eq
   20e90:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   20e94:	4614      	mov	r4, r2
   20e96:	461e      	mov	r6, r3
   20e98:	d013      	beq.n	20ec2 <z_impl_k_timer_start+0x56>
   20e9a:	431a      	orrs	r2, r3
   20e9c:	d011      	beq.n	20ec2 <z_impl_k_timer_start+0x56>
	    Z_TICK_ABS(period.ticks) < 0) {
   20e9e:	f06f 0201 	mvn.w	r2, #1
   20ea2:	1b12      	subs	r2, r2, r4
   20ea4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   20ea8:	eb62 0203 	sbc.w	r2, r2, r3
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   20eac:	2a00      	cmp	r2, #0
   20eae:	da08      	bge.n	20ec2 <z_impl_k_timer_start+0x56>
		period.ticks = MAX(period.ticks - 1, 1);
   20eb0:	3c01      	subs	r4, #1
   20eb2:	f163 0600 	sbc.w	r6, r3, #0
   20eb6:	2c01      	cmp	r4, #1
   20eb8:	f176 0300 	sbcs.w	r3, r6, #0
   20ebc:	bfbc      	itt	lt
   20ebe:	2401      	movlt	r4, #1
   20ec0:	2600      	movlt	r6, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   20ec2:	f06f 0301 	mvn.w	r3, #1
   20ec6:	1a5b      	subs	r3, r3, r1
   20ec8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20ecc:	eb63 0300 	sbc.w	r3, r3, r0
   20ed0:	2b00      	cmp	r3, #0
   20ed2:	da08      	bge.n	20ee6 <z_impl_k_timer_start+0x7a>
		duration.ticks = MAX(duration.ticks - 1, 0);
   20ed4:	1e4a      	subs	r2, r1, #1
   20ed6:	f160 0700 	sbc.w	r7, r0, #0
   20eda:	2f00      	cmp	r7, #0
   20edc:	4690      	mov	r8, r2
   20ede:	bfbc      	itt	lt
   20ee0:	f04f 0800 	movlt.w	r8, #0
   20ee4:	4647      	movlt	r7, r8
	}

	(void)z_abort_timeout(&timer->timeout);
   20ee6:	4628      	mov	r0, r5
   20ee8:	f008 f8d0 	bl	2908c <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   20eec:	2300      	movs	r3, #0
   20eee:	632b      	str	r3, [r5, #48]	; 0x30
	timer->period = period;
   20ef0:	e9c5 460a 	strd	r4, r6, [r5, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   20ef4:	4642      	mov	r2, r8
   20ef6:	463b      	mov	r3, r7
   20ef8:	4628      	mov	r0, r5
   20efa:	4903      	ldr	r1, [pc, #12]	; (20f08 <z_impl_k_timer_start+0x9c>)
		     duration);
}
   20efc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   20f00:	f7ff be8c 	b.w	20c1c <z_add_timeout>
}
   20f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20f08:	00020df9 	.word	0x00020df9

00020f0c <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   20f0c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   20f10:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   20f12:	4b29      	ldr	r3, [pc, #164]	; (20fb8 <z_impl_k_poll+0xac>)
   20f14:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   20f16:	2301      	movs	r3, #1
   20f18:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   20f1c:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   20f20:	ea52 0305 	orrs.w	r3, r2, r5
{
   20f24:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   20f26:	bf0c      	ite	eq
   20f28:	2301      	moveq	r3, #1
   20f2a:	2300      	movne	r3, #0
   20f2c:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   20f30:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   20f32:	f008 f98b 	bl	2924c <register_events>
   20f36:	4681      	mov	r9, r0
	__asm__ volatile(
   20f38:	f04f 0320 	mov.w	r3, #32
   20f3c:	f3ef 8a11 	mrs	sl, BASEPRI
   20f40:	f383 8812 	msr	BASEPRI_MAX, r3
   20f44:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   20f48:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   20f4c:	b964      	cbnz	r4, 20f68 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   20f4e:	4601      	mov	r1, r0
   20f50:	4652      	mov	r2, sl
   20f52:	4640      	mov	r0, r8
   20f54:	f008 fa4b 	bl	293ee <clear_event_registrations>
	__asm__ volatile(
   20f58:	f38a 8811 	msr	BASEPRI, sl
   20f5c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   20f60:	4620      	mov	r0, r4
   20f62:	b002      	add	sp, #8
   20f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   20f68:	2300      	movs	r3, #0
   20f6a:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   20f6e:	ea56 0305 	orrs.w	r3, r6, r5
   20f72:	d106      	bne.n	20f82 <z_impl_k_poll+0x76>
   20f74:	f38a 8811 	msr	BASEPRI, sl
   20f78:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   20f7c:	f06f 040a 	mvn.w	r4, #10
   20f80:	e7ee      	b.n	20f60 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   20f82:	e9cd 6500 	strd	r6, r5, [sp]
   20f86:	4a0d      	ldr	r2, [pc, #52]	; (20fbc <z_impl_k_poll+0xb0>)
   20f88:	480d      	ldr	r0, [pc, #52]	; (20fc0 <z_impl_k_poll+0xb4>)
   20f8a:	4651      	mov	r1, sl
   20f8c:	f7ff fbe8 	bl	20760 <z_pend_curr>
   20f90:	4604      	mov	r4, r0
	__asm__ volatile(
   20f92:	f04f 0320 	mov.w	r3, #32
   20f96:	f3ef 8511 	mrs	r5, BASEPRI
   20f9a:	f383 8812 	msr	BASEPRI_MAX, r3
   20f9e:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   20fa2:	462a      	mov	r2, r5
   20fa4:	4649      	mov	r1, r9
   20fa6:	4640      	mov	r0, r8
   20fa8:	f008 fa21 	bl	293ee <clear_event_registrations>
	__asm__ volatile(
   20fac:	f385 8811 	msr	BASEPRI, r5
   20fb0:	f3bf 8f6f 	isb	sy
	return swap_rc;
   20fb4:	e7d4      	b.n	20f60 <z_impl_k_poll+0x54>
   20fb6:	bf00      	nop
   20fb8:	2000368c 	.word	0x2000368c
   20fbc:	20000f0c 	.word	0x20000f0c
   20fc0:	20003d0c 	.word	0x20003d0c

00020fc4 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   20fc4:	b538      	push	{r3, r4, r5, lr}
   20fc6:	4603      	mov	r3, r0
	__asm__ volatile(
   20fc8:	f04f 0220 	mov.w	r2, #32
   20fcc:	f3ef 8511 	mrs	r5, BASEPRI
   20fd0:	f382 8812 	msr	BASEPRI_MAX, r2
   20fd4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   20fd8:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   20fda:	2101      	movs	r1, #1
   20fdc:	6081      	str	r1, [r0, #8]
	return list->head == list;
   20fde:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   20fe0:	4283      	cmp	r3, r0
   20fe2:	d106      	bne.n	20ff2 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   20fe4:	f385 8811 	msr	BASEPRI, r5
   20fe8:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   20fec:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   20fee:	4620      	mov	r0, r4
   20ff0:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   20ff2:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   20ff6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   20ff8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   20ffa:	2300      	movs	r3, #0
	node->prev = NULL;
   20ffc:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   21000:	f008 f99b 	bl	2933a <signal_poll_event>
	z_reschedule(&lock, key);
   21004:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   21006:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   21008:	4801      	ldr	r0, [pc, #4]	; (21010 <z_impl_k_poll_signal_raise+0x4c>)
   2100a:	f7ff fa57 	bl	204bc <z_reschedule>
	return rc;
   2100e:	e7ee      	b.n	20fee <z_impl_k_poll_signal_raise+0x2a>
   21010:	20003d0c 	.word	0x20003d0c

00021014 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   21014:	b573      	push	{r0, r1, r4, r5, r6, lr}
   21016:	4606      	mov	r6, r0
   21018:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   2101a:	f007 fd0c 	bl	28a36 <k_is_in_isr>
   2101e:	b978      	cbnz	r0, 21040 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   21020:	4b0b      	ldr	r3, [pc, #44]	; (21050 <z_thread_aligned_alloc+0x3c>)
   21022:	689b      	ldr	r3, [r3, #8]
   21024:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   21026:	b17c      	cbz	r4, 21048 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   21028:	1d2a      	adds	r2, r5, #4
   2102a:	d209      	bcs.n	21040 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   2102c:	2000      	movs	r0, #0
   2102e:	2100      	movs	r1, #0
   21030:	e9cd 0100 	strd	r0, r1, [sp]
   21034:	f046 0104 	orr.w	r1, r6, #4
   21038:	4620      	mov	r0, r4
   2103a:	f007 fc5a 	bl	288f2 <k_heap_aligned_alloc>
	if (mem == NULL) {
   2103e:	b908      	cbnz	r0, 21044 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   21040:	2400      	movs	r4, #0
	}

	return ret;
   21042:	e001      	b.n	21048 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   21044:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   21046:	1d04      	adds	r4, r0, #4
}
   21048:	4620      	mov	r0, r4
   2104a:	b002      	add	sp, #8
   2104c:	bd70      	pop	{r4, r5, r6, pc}
   2104e:	bf00      	nop
   21050:	2000368c 	.word	0x2000368c

00021054 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   21054:	4a02      	ldr	r2, [pc, #8]	; (21060 <boot_banner+0xc>)
   21056:	4903      	ldr	r1, [pc, #12]	; (21064 <boot_banner+0x10>)
   21058:	4803      	ldr	r0, [pc, #12]	; (21068 <boot_banner+0x14>)
   2105a:	f000 b907 	b.w	2126c <printk>
   2105e:	bf00      	nop
   21060:	0002d5c0 	.word	0x0002d5c0
   21064:	0002fed2 	.word	0x0002fed2
   21068:	0002fef0 	.word	0x0002fef0

0002106c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   2106c:	4770      	bx	lr

0002106e <prov_reset>:
	bt_mesh_prov_enable(BT_MESH_PROV_ADV | BT_MESH_PROV_GATT);
   2106e:	2003      	movs	r0, #3
   21070:	f7f3 b972 	b.w	14358 <bt_mesh_prov_enable>

00021074 <gpio_pin_interrupt_configure.constprop.0.isra.0>:
#endif

extern int z_impl_gpio_pin_interrupt_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags);

__pinned_func
static inline int gpio_pin_interrupt_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags)
   21074:	b430      	push	{r4, r5}
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   21076:	6905      	ldr	r5, [r0, #16]
	const struct gpio_driver_api *api =
   21078:	6884      	ldr	r4, [r0, #8]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   2107a:	682a      	ldr	r2, [r5, #0]
	return api->pin_interrupt_configure(port, pin, mode, trig);
   2107c:	69a4      	ldr	r4, [r4, #24]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   2107e:	2301      	movs	r3, #1
   21080:	408b      	lsls	r3, r1
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   21082:	4213      	tst	r3, r2
	return api->pin_interrupt_configure(port, pin, mode, trig);
   21084:	46a4      	mov	ip, r4
   21086:	bf08      	it	eq
   21088:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
}
   2108c:	bc30      	pop	{r4, r5}
   2108e:	bf18      	it	ne
   21090:	f44f 3300 	movne.w	r3, #131072	; 0x20000
   21094:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
   21098:	4760      	bx	ip

0002109a <gpio_pin_configure.isra.0>:


extern int z_impl_gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags);

__pinned_func
static inline int gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags)
   2109a:	b4f0      	push	{r4, r5, r6, r7}
   2109c:	4613      	mov	r3, r2
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   2109e:	04d4      	lsls	r4, r2, #19
	const struct gpio_driver_api *api =
   210a0:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
   210a2:	6906      	ldr	r6, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   210a4:	d506      	bpl.n	210b4 <gpio_pin_configure.isra.0+0x1a>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   210a6:	f412 6f40 	tst.w	r2, #3072	; 0xc00
   210aa:	d003      	beq.n	210b4 <gpio_pin_configure.isra.0+0x1a>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   210ac:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   210ae:	bf48      	it	mi
   210b0:	f483 6340 	eormi.w	r3, r3, #3072	; 0xc00
		data->invert |= (gpio_port_pins_t)BIT(pin);
   210b4:	6834      	ldr	r4, [r6, #0]
   210b6:	2501      	movs	r5, #1
   210b8:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   210ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   210be:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   210c0:	bf4c      	ite	mi
   210c2:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   210c4:	43ac      	bicpl	r4, r5
	return api->pin_configure(port, pin, flags);
   210c6:	683b      	ldr	r3, [r7, #0]
   210c8:	6034      	str	r4, [r6, #0]
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
}
   210ca:	bcf0      	pop	{r4, r5, r6, r7}
   210cc:	4718      	bx	r3

000210ce <bl_core_loop>:

#if MIGRATION_STEP1
  void bl_core_loop(void)
	{
		// nothing to do
	}
   210ce:	4770      	bx	lr

000210d0 <bl_output>:

      __weak void bl_verbose(int verbose)     {}                  // dummy
      __weak void bl_logo(int l,BL_txt m,BL_ob *o,int v) {}       // dummy
  #endif

  __weak int  bl_output(BL_ob *o, int val) { return 0; }      // dummy
   210d0:	2000      	movs	r0, #0
   210d2:	4770      	bx	lr

000210d4 <bl_gear_init>:
  __weak void bl_gear_init(BL_notify cb)  {}                  // dummy
   210d4:	4770      	bx	lr

000210d6 <bl_sleep>:
  {
   210d6:	b538      	push	{r3, r4, r5, lr}
   210d8:	2100      	movs	r1, #0
	return k_sleep(Z_TIMEOUT_MS(ms));
   210da:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
   210de:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   210e2:	f240 30e7 	movw	r0, #999	; 0x3e7
   210e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   210ea:	2300      	movs	r3, #0
   210ec:	fbc4 0105 	smlal	r0, r1, r4, r5
   210f0:	f7df f846 	bl	180 <__aeabi_uldivmod>
  }
   210f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_impl_k_sleep(timeout);
   210f8:	f7ff bc70 	b.w	209dc <z_impl_k_sleep>

000210fc <bl_loop>:

  void bl_loop(void)
  {
    bl_core_loop();
   210fc:	f7ff bfe7 	b.w	210ce <bl_core_loop>

00021100 <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   21100:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   21102:	2364      	movs	r3, #100	; 0x64
{
   21104:	4604      	mov	r4, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   21106:	2504      	movs	r5, #4
	uint8_t num_digits = 0;
   21108:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   2110a:	f04f 0c0a 	mov.w	ip, #10
	while (buflen > 0 && divisor > 0) {
   2110e:	b111      	cbz	r1, 21116 <u8_to_dec+0x16>
   21110:	3d01      	subs	r5, #1
   21112:	d101      	bne.n	21118 <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   21114:	7025      	strb	r5, [r4, #0]
	}

	return num_digits;
}
   21116:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   21118:	429a      	cmp	r2, r3
		digit = value / divisor;
   2111a:	fbb2 f7f3 	udiv	r7, r2, r3
   2111e:	b2fe      	uxtb	r6, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   21120:	d202      	bcs.n	21128 <u8_to_dec+0x28>
   21122:	2b01      	cmp	r3, #1
   21124:	d000      	beq.n	21128 <u8_to_dec+0x28>
   21126:	b130      	cbz	r0, 21136 <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   21128:	3630      	adds	r6, #48	; 0x30
			buflen--;
   2112a:	3901      	subs	r1, #1
			num_digits++;
   2112c:	3001      	adds	r0, #1
			*buf = (char)digit + '0';
   2112e:	f804 6b01 	strb.w	r6, [r4], #1
			buflen--;
   21132:	b2c9      	uxtb	r1, r1
			num_digits++;
   21134:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   21136:	fb03 2217 	mls	r2, r3, r7, r2
   2113a:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   2113c:	fbb3 f3fc 	udiv	r3, r3, ip
   21140:	e7e5      	b.n	2110e <u8_to_dec+0xe>

00021142 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   21142:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   21146:	b2da      	uxtb	r2, r3
   21148:	2a09      	cmp	r2, #9
   2114a:	d802      	bhi.n	21152 <char2hex+0x10>
		*x = c - '0';
   2114c:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   2114e:	2000      	movs	r0, #0
   21150:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   21152:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   21156:	2b05      	cmp	r3, #5
   21158:	d802      	bhi.n	21160 <char2hex+0x1e>
		*x = c - 'a' + 10;
   2115a:	3857      	subs	r0, #87	; 0x57
   2115c:	7008      	strb	r0, [r1, #0]
   2115e:	e7f6      	b.n	2114e <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   21160:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   21164:	2b05      	cmp	r3, #5
   21166:	d801      	bhi.n	2116c <char2hex+0x2a>
		*x = c - 'A' + 10;
   21168:	3837      	subs	r0, #55	; 0x37
   2116a:	e7f7      	b.n	2115c <char2hex+0x1a>
		return -EINVAL;
   2116c:	f06f 0015 	mvn.w	r0, #21
}
   21170:	4770      	bx	lr

00021172 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   21172:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   21176:	4614      	mov	r4, r2
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   21178:	f001 0201 	and.w	r2, r1, #1
   2117c:	eb02 0651 	add.w	r6, r2, r1, lsr #1
   21180:	429e      	cmp	r6, r3
{
   21182:	4605      	mov	r5, r0
	if (buflen < hexlen / 2 + hexlen % 2) {
   21184:	ea4f 0751 	mov.w	r7, r1, lsr #1
   21188:	d904      	bls.n	21194 <hex2bin+0x22>
		return 0;
   2118a:	2600      	movs	r6, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   2118c:	4630      	mov	r0, r6
   2118e:	b002      	add	sp, #8
   21190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (hexlen % 2) {
   21194:	b15a      	cbz	r2, 211ae <hex2bin+0x3c>
		if (char2hex(hex[0], &dec) < 0) {
   21196:	7800      	ldrb	r0, [r0, #0]
   21198:	f10d 0107 	add.w	r1, sp, #7
   2119c:	f7ff ffd1 	bl	21142 <char2hex>
   211a0:	2800      	cmp	r0, #0
   211a2:	dbf2      	blt.n	2118a <hex2bin+0x18>
		buf[0] = dec;
   211a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   211a8:	f804 3b01 	strb.w	r3, [r4], #1
		hex++;
   211ac:	3501      	adds	r5, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   211ae:	3501      	adds	r5, #1
   211b0:	4427      	add	r7, r4
   211b2:	42bc      	cmp	r4, r7
   211b4:	d0ea      	beq.n	2118c <hex2bin+0x1a>
		if (char2hex(hex[2 * i], &dec) < 0) {
   211b6:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   211ba:	f10d 0107 	add.w	r1, sp, #7
   211be:	f7ff ffc0 	bl	21142 <char2hex>
   211c2:	2800      	cmp	r0, #0
   211c4:	dbe1      	blt.n	2118a <hex2bin+0x18>
		buf[i] = dec << 4;
   211c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   211ca:	011b      	lsls	r3, r3, #4
   211cc:	7023      	strb	r3, [r4, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   211ce:	f815 0b02 	ldrb.w	r0, [r5], #2
   211d2:	f7ff ffb6 	bl	21142 <char2hex>
   211d6:	2800      	cmp	r0, #0
   211d8:	dbd7      	blt.n	2118a <hex2bin+0x18>
		buf[i] += dec;
   211da:	7823      	ldrb	r3, [r4, #0]
   211dc:	f89d 2007 	ldrb.w	r2, [sp, #7]
   211e0:	4413      	add	r3, r2
   211e2:	f804 3b01 	strb.w	r3, [r4], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   211e6:	e7e4      	b.n	211b2 <hex2bin+0x40>

000211e8 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   211e8:	4603      	mov	r3, r0
   211ea:	b140      	cbz	r0, 211fe <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   211ec:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   211ee:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   211f2:	2a02      	cmp	r2, #2
   211f4:	d006      	beq.n	21204 <sys_notify_validate+0x1c>
   211f6:	2a03      	cmp	r2, #3
   211f8:	d004      	beq.n	21204 <sys_notify_validate+0x1c>
   211fa:	2a01      	cmp	r2, #1
   211fc:	d005      	beq.n	2120a <sys_notify_validate+0x22>
		return -EINVAL;
   211fe:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   21202:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   21204:	681a      	ldr	r2, [r3, #0]
   21206:	2a00      	cmp	r2, #0
   21208:	d0f9      	beq.n	211fe <sys_notify_validate+0x16>
		notify->result = 0;
   2120a:	2000      	movs	r0, #0
   2120c:	6098      	str	r0, [r3, #8]
   2120e:	4770      	bx	lr

00021210 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   21210:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   21212:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   21216:	2a02      	cmp	r2, #2
{
   21218:	b510      	push	{r4, lr}
   2121a:	4603      	mov	r3, r0
	notify->result = res;
   2121c:	6081      	str	r1, [r0, #8]
	switch (method) {
   2121e:	d00a      	beq.n	21236 <sys_notify_finalize+0x26>
   21220:	2a03      	cmp	r2, #3
   21222:	d10b      	bne.n	2123c <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   21224:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   21226:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   21228:	2200      	movs	r2, #0
   2122a:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   2122c:	b108      	cbz	r0, 21232 <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   2122e:	f7ff fec9 	bl	20fc4 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   21232:	4620      	mov	r0, r4
   21234:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   21236:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   21238:	2400      	movs	r4, #0
		break;
   2123a:	e7f5      	b.n	21228 <sys_notify_finalize+0x18>
	switch (method) {
   2123c:	2400      	movs	r4, #0
   2123e:	4620      	mov	r0, r4
   21240:	e7f2      	b.n	21228 <sys_notify_finalize+0x18>

00021242 <arch_printk_char_out>:
}
   21242:	2000      	movs	r0, #0
   21244:	4770      	bx	lr

00021246 <str_out>:
{
   21246:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   21248:	688a      	ldr	r2, [r1, #8]
   2124a:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   2124c:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2124e:	b114      	cbz	r4, 21256 <str_out+0x10>
   21250:	684b      	ldr	r3, [r1, #4]
   21252:	4293      	cmp	r3, r2
   21254:	dc01      	bgt.n	2125a <str_out+0x14>
		ctx->count++;
   21256:	608d      	str	r5, [r1, #8]
}
   21258:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   2125a:	3b01      	subs	r3, #1
   2125c:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   2125e:	bf08      	it	eq
   21260:	2200      	moveq	r2, #0
   21262:	608d      	str	r5, [r1, #8]
   21264:	bf0c      	ite	eq
   21266:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   21268:	54a0      	strbne	r0, [r4, r2]
   2126a:	e7f5      	b.n	21258 <str_out+0x12>

0002126c <printk>:
{
   2126c:	b40f      	push	{r0, r1, r2, r3}
   2126e:	b507      	push	{r0, r1, r2, lr}
   21270:	a904      	add	r1, sp, #16
   21272:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   21276:	9101      	str	r1, [sp, #4]
	z_log_printk(fmt, ap);
   21278:	f000 fc98 	bl	21bac <z_log_printk>
}
   2127c:	b003      	add	sp, #12
   2127e:	f85d eb04 	ldr.w	lr, [sp], #4
   21282:	b004      	add	sp, #16
   21284:	4770      	bx	lr

00021286 <snprintk>:
{
   21286:	b40c      	push	{r2, r3}
   21288:	b507      	push	{r0, r1, r2, lr}
   2128a:	ab04      	add	r3, sp, #16
   2128c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   21290:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   21292:	f7e0 fe85 	bl	1fa0 <vsnprintk>
}
   21296:	b003      	add	sp, #12
   21298:	f85d eb04 	ldr.w	lr, [sp], #4
   2129c:	b002      	add	sp, #8
   2129e:	4770      	bx	lr

000212a0 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   212a0:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   212a2:	f013 0307 	ands.w	r3, r3, #7
   212a6:	d105      	bne.n	212b4 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   212a8:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   212aa:	2b00      	cmp	r3, #0
   212ac:	bf0c      	ite	eq
   212ae:	2000      	moveq	r0, #0
   212b0:	2003      	movne	r0, #3
   212b2:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   212b4:	2b02      	cmp	r3, #2
   212b6:	d105      	bne.n	212c4 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   212b8:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
   212ba:	2b00      	cmp	r3, #0
   212bc:	bf14      	ite	ne
   212be:	2000      	movne	r0, #0
   212c0:	2004      	moveq	r0, #4
   212c2:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   212c4:	2b01      	cmp	r3, #1
   212c6:	d105      	bne.n	212d4 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   212c8:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   212ca:	2b00      	cmp	r3, #0
   212cc:	bf0c      	ite	eq
   212ce:	2000      	moveq	r0, #0
   212d0:	2005      	movne	r0, #5
   212d2:	4770      	bx	lr
	int evt = EVT_NOP;
   212d4:	2000      	movs	r0, #0
}
   212d6:	4770      	bx	lr

000212d8 <notify_one>:
{
   212d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   212dc:	460d      	mov	r5, r1
   212de:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   212e0:	4619      	mov	r1, r3
   212e2:	1d28      	adds	r0, r5, #4
{
   212e4:	4690      	mov	r8, r2
   212e6:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   212e8:	f7ff ff92 	bl	21210 <sys_notify_finalize>
	if (cb) {
   212ec:	4604      	mov	r4, r0
   212ee:	b138      	cbz	r0, 21300 <notify_one+0x28>
		cb(mgr, cli, state, res);
   212f0:	4633      	mov	r3, r6
   212f2:	4642      	mov	r2, r8
   212f4:	4629      	mov	r1, r5
   212f6:	4638      	mov	r0, r7
   212f8:	46a4      	mov	ip, r4
}
   212fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   212fe:	4760      	bx	ip
}
   21300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00021304 <transition_complete>:
{
   21304:	b410      	push	{r4}
	__asm__ volatile(
   21306:	f04f 0420 	mov.w	r4, #32
   2130a:	f3ef 8211 	mrs	r2, BASEPRI
   2130e:	f384 8812 	msr	BASEPRI_MAX, r4
   21312:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   21316:	6141      	str	r1, [r0, #20]
}
   21318:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   2131a:	2101      	movs	r1, #1
   2131c:	f7e0 be54 	b.w	1fc8 <process_event>

00021320 <validate_args>:
{
   21320:	b510      	push	{r4, lr}
   21322:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   21324:	b140      	cbz	r0, 21338 <validate_args+0x18>
   21326:	b139      	cbz	r1, 21338 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   21328:	1d08      	adds	r0, r1, #4
   2132a:	f7ff ff5d 	bl	211e8 <sys_notify_validate>
	if ((rv == 0)
   2132e:	b928      	cbnz	r0, 2133c <validate_args+0x1c>
	    && ((cli->notify.flags
   21330:	68a3      	ldr	r3, [r4, #8]
   21332:	f033 0303 	bics.w	r3, r3, #3
   21336:	d001      	beq.n	2133c <validate_args+0x1c>
		rv = -EINVAL;
   21338:	f06f 0015 	mvn.w	r0, #21
}
   2133c:	bd10      	pop	{r4, pc}

0002133e <onoff_manager_init>:
{
   2133e:	b538      	push	{r3, r4, r5, lr}
   21340:	460c      	mov	r4, r1
	if ((mgr == NULL)
   21342:	4605      	mov	r5, r0
   21344:	b158      	cbz	r0, 2135e <onoff_manager_init+0x20>
	    || (transitions == NULL)
   21346:	b151      	cbz	r1, 2135e <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   21348:	680b      	ldr	r3, [r1, #0]
   2134a:	b143      	cbz	r3, 2135e <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   2134c:	684b      	ldr	r3, [r1, #4]
   2134e:	b133      	cbz	r3, 2135e <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   21350:	221c      	movs	r2, #28
   21352:	2100      	movs	r1, #0
   21354:	f002 fd33 	bl	23dbe <memset>
   21358:	612c      	str	r4, [r5, #16]
	return 0;
   2135a:	2000      	movs	r0, #0
}
   2135c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2135e:	f06f 0015 	mvn.w	r0, #21
   21362:	e7fb      	b.n	2135c <onoff_manager_init+0x1e>

00021364 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   21364:	b570      	push	{r4, r5, r6, lr}
   21366:	4604      	mov	r4, r0
   21368:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   2136a:	f7ff ffd9 	bl	21320 <validate_args>

	if (rv < 0) {
   2136e:	1e05      	subs	r5, r0, #0
   21370:	db31      	blt.n	213d6 <onoff_request+0x72>
   21372:	f04f 0320 	mov.w	r3, #32
   21376:	f3ef 8111 	mrs	r1, BASEPRI
   2137a:	f383 8812 	msr	BASEPRI_MAX, r3
   2137e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   21382:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   21384:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   21386:	f64f 75ff 	movw	r5, #65535	; 0xffff
   2138a:	42ab      	cmp	r3, r5
   2138c:	f000 0207 	and.w	r2, r0, #7
   21390:	d02e      	beq.n	213f0 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   21392:	2a02      	cmp	r2, #2
   21394:	d10e      	bne.n	213b4 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   21396:	3301      	adds	r3, #1
   21398:	8363      	strh	r3, [r4, #26]
	rv = state;
   2139a:	4615      	mov	r5, r2
		notify = true;
   2139c:	2301      	movs	r3, #1
	__asm__ volatile(
   2139e:	f381 8811 	msr	BASEPRI, r1
   213a2:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   213a6:	b1b3      	cbz	r3, 213d6 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   213a8:	2300      	movs	r3, #0
   213aa:	4631      	mov	r1, r6
   213ac:	4620      	mov	r0, r4
   213ae:	f7ff ff93 	bl	212d8 <notify_one>
   213b2:	e010      	b.n	213d6 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   213b4:	0783      	lsls	r3, r0, #30
   213b6:	d001      	beq.n	213bc <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   213b8:	2a06      	cmp	r2, #6
   213ba:	d10e      	bne.n	213da <onoff_request+0x76>
	parent->next = child;
   213bc:	2300      	movs	r3, #0
   213be:	6033      	str	r3, [r6, #0]
	return list->tail;
   213c0:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   213c2:	b993      	cbnz	r3, 213ea <onoff_request+0x86>
	list->head = node;
   213c4:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   213c8:	4615      	mov	r5, r2
   213ca:	b962      	cbnz	r2, 213e6 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   213cc:	460a      	mov	r2, r1
   213ce:	4620      	mov	r0, r4
   213d0:	2102      	movs	r1, #2
   213d2:	f7e0 fdf9 	bl	1fc8 <process_event>
		}
	}

	return rv;
}
   213d6:	4628      	mov	r0, r5
   213d8:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   213da:	2a05      	cmp	r2, #5
   213dc:	bf0c      	ite	eq
   213de:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   213e2:	f06f 0504 	mvnne.w	r5, #4
   213e6:	2300      	movs	r3, #0
   213e8:	e7d9      	b.n	2139e <onoff_request+0x3a>
	parent->next = child;
   213ea:	601e      	str	r6, [r3, #0]
	list->tail = node;
   213ec:	6066      	str	r6, [r4, #4]
}
   213ee:	e7eb      	b.n	213c8 <onoff_request+0x64>
		rv = -EAGAIN;
   213f0:	f06f 050a 	mvn.w	r5, #10
   213f4:	e7f7      	b.n	213e6 <onoff_request+0x82>

000213f6 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   213f6:	b510      	push	{r4, lr}
	__asm__ volatile(
   213f8:	f04f 0320 	mov.w	r3, #32
   213fc:	f3ef 8211 	mrs	r2, BASEPRI
   21400:	f383 8812 	msr	BASEPRI_MAX, r3
   21404:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   21408:	8b04      	ldrh	r4, [r0, #24]
   2140a:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   2140e:	2c02      	cmp	r4, #2
   21410:	d00a      	beq.n	21428 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   21412:	2c01      	cmp	r4, #1
   21414:	bf0c      	ite	eq
   21416:	f06f 0004 	mvneq.w	r0, #4
   2141a:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   2141e:	f382 8811 	msr	BASEPRI, r2
   21422:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   21426:	e008      	b.n	2143a <onoff_release+0x44>
	mgr->refs -= 1U;
   21428:	8b43      	ldrh	r3, [r0, #26]
   2142a:	3b01      	subs	r3, #1
   2142c:	b29b      	uxth	r3, r3
   2142e:	8343      	strh	r3, [r0, #26]
	if (stop) {
   21430:	b923      	cbnz	r3, 2143c <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   21432:	4621      	mov	r1, r4
   21434:	f7e0 fdc8 	bl	1fc8 <process_event>
	int rv = state;
   21438:	4620      	mov	r0, r4
}
   2143a:	bd10      	pop	{r4, pc}
	int rv = state;
   2143c:	4620      	mov	r0, r4
   2143e:	e7ee      	b.n	2141e <onoff_release+0x28>

00021440 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   21440:	4604      	mov	r4, r0
   21442:	b508      	push	{r3, lr}
   21444:	4608      	mov	r0, r1
   21446:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   21448:	461a      	mov	r2, r3
   2144a:	47a0      	blx	r4
	return z_impl_z_current_get();
   2144c:	f7ff fae0 	bl	20a10 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   21450:	f7e3 fb70 	bl	4b34 <z_impl_k_thread_abort>

00021454 <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   21454:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   21456:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   2145a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   2145e:	bf2c      	ite	cs
   21460:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   21464:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   21468:	4770      	bx	lr

0002146a <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   2146a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   2146e:	6880      	ldr	r0, [r0, #8]
   21470:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   21474:	bf2c      	ite	cs
   21476:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   2147a:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   2147e:	4770      	bx	lr

00021480 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
   21480:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   21482:	2201      	movs	r2, #1
   21484:	f7ff ffe6 	bl	21454 <chunk_field>
}
   21488:	40d0      	lsrs	r0, r2
   2148a:	bd08      	pop	{r3, pc}

0002148c <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   2148c:	6883      	ldr	r3, [r0, #8]
   2148e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   21492:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   21496:	d308      	bcc.n	214aa <set_chunk_used+0x1e>
		if (used) {
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   21498:	684b      	ldr	r3, [r1, #4]
		if (used) {
   2149a:	b11a      	cbz	r2, 214a4 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   2149c:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   214a0:	604b      	str	r3, [r1, #4]
   214a2:	4770      	bx	lr
   214a4:	f023 0301 	bic.w	r3, r3, #1
   214a8:	e7fa      	b.n	214a0 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   214aa:	884b      	ldrh	r3, [r1, #2]
		if (used) {
   214ac:	b11a      	cbz	r2, 214b6 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   214ae:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   214b2:	804b      	strh	r3, [r1, #2]
		}
	}
}
   214b4:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   214b6:	f023 0301 	bic.w	r3, r3, #1
   214ba:	e7fa      	b.n	214b2 <set_chunk_used+0x26>

000214bc <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   214bc:	0053      	lsls	r3, r2, #1
   214be:	2201      	movs	r2, #1
   214c0:	f7ff bfd3 	b.w	2146a <chunk_set>

000214c4 <bucket_idx.isra.0>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   214c4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   214c8:	bf2c      	ite	cs
   214ca:	2008      	movcs	r0, #8
   214cc:	2004      	movcc	r0, #4
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   214ce:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   214d0:	3008      	adds	r0, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   214d2:	eba1 00d0 	sub.w	r0, r1, r0, lsr #3
	return 31 - __builtin_clz(usable_sz);
   214d6:	fab0 f080 	clz	r0, r0
}
   214da:	f1c0 001f 	rsb	r0, r0, #31
   214de:	4770      	bx	lr

000214e0 <free_list_remove_bidx>:

	return ret;
}

static void free_list_remove_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   214e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   214e4:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   214e6:	2203      	movs	r2, #3
   214e8:	460e      	mov	r6, r1
   214ea:	4604      	mov	r4, r0
   214ec:	f7ff ffb2 	bl	21454 <chunk_field>

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & (1 << bidx));

	if (next_free_chunk(h, c) == c) {
   214f0:	4286      	cmp	r6, r0
   214f2:	4605      	mov	r5, r0
   214f4:	f107 0804 	add.w	r8, r7, #4
   214f8:	d10b      	bne.n	21512 <free_list_remove_bidx+0x32>
		/* this is the last chunk */
		h->avail_buckets &= ~(1 << bidx);
   214fa:	2301      	movs	r3, #1
   214fc:	fa03 f707 	lsl.w	r7, r3, r7
   21500:	68e3      	ldr	r3, [r4, #12]
   21502:	ea23 0307 	bic.w	r3, r3, r7
   21506:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   21508:	2300      	movs	r3, #0
   2150a:	f844 3028 	str.w	r3, [r4, r8, lsl #2]

		b->next = second;
		set_next_free_chunk(h, first, second);
		set_prev_free_chunk(h, second, first);
	}
}
   2150e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   21512:	4631      	mov	r1, r6
   21514:	2202      	movs	r2, #2
   21516:	4620      	mov	r0, r4
   21518:	f7ff ff9c 	bl	21454 <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   2151c:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   2151e:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   21520:	4601      	mov	r1, r0
		b->next = second;
   21522:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   21526:	4620      	mov	r0, r4
   21528:	2203      	movs	r2, #3
   2152a:	f7ff ff9e 	bl	2146a <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   2152e:	4633      	mov	r3, r6
   21530:	4629      	mov	r1, r5
   21532:	4620      	mov	r0, r4
   21534:	2202      	movs	r2, #2
}
   21536:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2153a:	f7ff bf96 	b.w	2146a <chunk_set>

0002153e <free_list_remove>:

static void free_list_remove(struct z_heap *h, chunkid_t c)
{
   2153e:	b570      	push	{r4, r5, r6, lr}
	return big_heap_chunks(h->end_chunk);
   21540:	6886      	ldr	r6, [r0, #8]
   21542:	460d      	mov	r5, r1
   21544:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   21546:	f7ff ff9b 	bl	21480 <chunk_size>
   2154a:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   2154e:	4601      	mov	r1, r0
   21550:	d301      	bcc.n	21556 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   21552:	2801      	cmp	r0, #1
   21554:	d009      	beq.n	2156a <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   21556:	4630      	mov	r0, r6
   21558:	f7ff ffb4 	bl	214c4 <bucket_idx.isra.0>
		free_list_remove_bidx(h, c, bidx);
   2155c:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   2155e:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   21560:	4620      	mov	r0, r4
	}
}
   21562:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		free_list_remove_bidx(h, c, bidx);
   21566:	f7ff bfbb 	b.w	214e0 <free_list_remove_bidx>
}
   2156a:	bd70      	pop	{r4, r5, r6, pc}

0002156c <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   2156c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21570:	4605      	mov	r5, r0
	int bi = bucket_idx(h, sz);
   21572:	6880      	ldr	r0, [r0, #8]
{
   21574:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   21576:	f7ff ffa5 	bl	214c4 <bucket_idx.isra.0>
   2157a:	eb05 0a80 	add.w	sl, r5, r0, lsl #2
   2157e:	4606      	mov	r6, r0
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   21580:	f8da 9010 	ldr.w	r9, [sl, #16]
   21584:	f1b9 0f00 	cmp.w	r9, #0
   21588:	d01b      	beq.n	215c2 <alloc_chunk+0x56>
   2158a:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   2158c:	f8da 4010 	ldr.w	r4, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   21590:	4628      	mov	r0, r5
   21592:	4621      	mov	r1, r4
   21594:	f7ff ff74 	bl	21480 <chunk_size>
   21598:	4540      	cmp	r0, r8
   2159a:	d307      	bcc.n	215ac <alloc_chunk+0x40>
				free_list_remove_bidx(h, c, bi);
   2159c:	4632      	mov	r2, r6

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   2159e:	4621      	mov	r1, r4
   215a0:	4628      	mov	r0, r5
   215a2:	f7ff ff9d 	bl	214e0 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   215a6:	4620      	mov	r0, r4
   215a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return chunk_field(h, c, FREE_NEXT);
   215ac:	2203      	movs	r2, #3
   215ae:	4621      	mov	r1, r4
   215b0:	4628      	mov	r0, r5
   215b2:	f7ff ff4f 	bl	21454 <chunk_field>
		} while (--i && b->next != first);
   215b6:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   215b8:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   215bc:	d001      	beq.n	215c2 <alloc_chunk+0x56>
   215be:	4581      	cmp	r9, r0
   215c0:	d1e4      	bne.n	2158c <alloc_chunk+0x20>
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   215c2:	68e9      	ldr	r1, [r5, #12]
   215c4:	3601      	adds	r6, #1
   215c6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   215ca:	40b4      	lsls	r4, r6
	if (bmask != 0U) {
   215cc:	400c      	ands	r4, r1
   215ce:	d0ea      	beq.n	215a6 <alloc_chunk+0x3a>
		int minbucket = __builtin_ctz(bmask);
   215d0:	fa94 f2a4 	rbit	r2, r4
   215d4:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   215d8:	1d13      	adds	r3, r2, #4
   215da:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
   215de:	e7de      	b.n	2159e <alloc_chunk+0x32>

000215e0 <split_chunks>:
{
   215e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   215e4:	4614      	mov	r4, r2
   215e6:	4605      	mov	r5, r0
   215e8:	460e      	mov	r6, r1
	chunksz_t sz0 = chunk_size(h, lc);
   215ea:	f7ff ff49 	bl	21480 <chunk_size>
	chunksz_t lsz = rc - lc;
   215ee:	eba4 0806 	sub.w	r8, r4, r6
	chunksz_t rsz = sz0 - lsz;
   215f2:	1b37      	subs	r7, r6, r4
   215f4:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   215f6:	4642      	mov	r2, r8
   215f8:	4631      	mov	r1, r6
   215fa:	4628      	mov	r0, r5
   215fc:	f7ff ff5e 	bl	214bc <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   21600:	463a      	mov	r2, r7
   21602:	4621      	mov	r1, r4
   21604:	4628      	mov	r0, r5
   21606:	f7ff ff59 	bl	214bc <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   2160a:	4643      	mov	r3, r8
   2160c:	2200      	movs	r2, #0
   2160e:	4621      	mov	r1, r4
   21610:	4628      	mov	r0, r5
   21612:	f7ff ff2a 	bl	2146a <chunk_set>
	return c + chunk_size(h, c);
   21616:	4621      	mov	r1, r4
   21618:	4628      	mov	r0, r5
   2161a:	f7ff ff31 	bl	21480 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   2161e:	463b      	mov	r3, r7
   21620:	1821      	adds	r1, r4, r0
   21622:	2200      	movs	r2, #0
   21624:	4628      	mov	r0, r5
}
   21626:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2162a:	f7ff bf1e 	b.w	2146a <chunk_set>

0002162e <merge_chunks>:
{
   2162e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21632:	4616      	mov	r6, r2
   21634:	4604      	mov	r4, r0
   21636:	460f      	mov	r7, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   21638:	f7ff ff22 	bl	21480 <chunk_size>
   2163c:	4631      	mov	r1, r6
   2163e:	4605      	mov	r5, r0
   21640:	4620      	mov	r0, r4
   21642:	f7ff ff1d 	bl	21480 <chunk_size>
   21646:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
   21648:	462a      	mov	r2, r5
   2164a:	4639      	mov	r1, r7
   2164c:	4620      	mov	r0, r4
   2164e:	f7ff ff35 	bl	214bc <set_chunk_size>
	return c + chunk_size(h, c);
   21652:	4631      	mov	r1, r6
   21654:	4620      	mov	r0, r4
   21656:	f7ff ff13 	bl	21480 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   2165a:	462b      	mov	r3, r5
   2165c:	1831      	adds	r1, r6, r0
   2165e:	2200      	movs	r2, #0
   21660:	4620      	mov	r0, r4
}
   21662:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21666:	f7ff bf00 	b.w	2146a <chunk_set>

0002166a <free_list_add>:
{
   2166a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return big_heap_chunks(h->end_chunk);
   2166e:	6886      	ldr	r6, [r0, #8]
   21670:	460d      	mov	r5, r1
   21672:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   21674:	f7ff ff04 	bl	21480 <chunk_size>
   21678:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   2167c:	4601      	mov	r1, r0
   2167e:	d301      	bcc.n	21684 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   21680:	2801      	cmp	r0, #1
   21682:	d033      	beq.n	216ec <free_list_add+0x82>
		int bidx = bucket_idx(h, chunk_size(h, c));
   21684:	4630      	mov	r0, r6
   21686:	f7ff ff1d 	bl	214c4 <bucket_idx.isra.0>
	if (b->next == 0U) {
   2168a:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   2168e:	6916      	ldr	r6, [r2, #16]
   21690:	b99e      	cbnz	r6, 216ba <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   21692:	2301      	movs	r3, #1
   21694:	fa03 f000 	lsl.w	r0, r3, r0
   21698:	68e3      	ldr	r3, [r4, #12]
   2169a:	4303      	orrs	r3, r0
   2169c:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   2169e:	4629      	mov	r1, r5
		b->next = c;
   216a0:	6115      	str	r5, [r2, #16]
   216a2:	462b      	mov	r3, r5
   216a4:	2202      	movs	r2, #2
   216a6:	4620      	mov	r0, r4
   216a8:	f7ff fedf 	bl	2146a <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   216ac:	2203      	movs	r2, #3
   216ae:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   216b0:	4620      	mov	r0, r4
}
   216b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   216b6:	f7ff bed8 	b.w	2146a <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   216ba:	2202      	movs	r2, #2
   216bc:	4631      	mov	r1, r6
   216be:	4620      	mov	r0, r4
   216c0:	f7ff fec8 	bl	21454 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   216c4:	4629      	mov	r1, r5
   216c6:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   216c8:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   216ca:	4620      	mov	r0, r4
   216cc:	f7ff fecd 	bl	2146a <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   216d0:	2203      	movs	r2, #3
   216d2:	4633      	mov	r3, r6
   216d4:	4629      	mov	r1, r5
   216d6:	4620      	mov	r0, r4
   216d8:	f7ff fec7 	bl	2146a <chunk_set>
   216dc:	4639      	mov	r1, r7
   216de:	462b      	mov	r3, r5
   216e0:	4620      	mov	r0, r4
   216e2:	f7ff fec2 	bl	2146a <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   216e6:	2202      	movs	r2, #2
   216e8:	4631      	mov	r1, r6
   216ea:	e7e1      	b.n	216b0 <free_list_add+0x46>
   216ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000216f0 <free_chunk>:
{
   216f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   216f2:	460c      	mov	r4, r1
   216f4:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   216f6:	f7ff fec3 	bl	21480 <chunk_size>
   216fa:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   216fc:	2201      	movs	r2, #1
   216fe:	4631      	mov	r1, r6
   21700:	4628      	mov	r0, r5
   21702:	f7ff fea7 	bl	21454 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   21706:	07c3      	lsls	r3, r0, #31
   21708:	d40c      	bmi.n	21724 <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   2170a:	4631      	mov	r1, r6
   2170c:	4628      	mov	r0, r5
   2170e:	f7ff ff16 	bl	2153e <free_list_remove>
	return c + chunk_size(h, c);
   21712:	4621      	mov	r1, r4
   21714:	4628      	mov	r0, r5
   21716:	f7ff feb3 	bl	21480 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   2171a:	4621      	mov	r1, r4
   2171c:	1822      	adds	r2, r4, r0
   2171e:	4628      	mov	r0, r5
   21720:	f7ff ff85 	bl	2162e <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   21724:	2200      	movs	r2, #0
   21726:	4621      	mov	r1, r4
   21728:	4628      	mov	r0, r5
   2172a:	f7ff fe93 	bl	21454 <chunk_field>
   2172e:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   21730:	2201      	movs	r2, #1
   21732:	4639      	mov	r1, r7
   21734:	4628      	mov	r0, r5
   21736:	f7ff fe8d 	bl	21454 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   2173a:	ea10 0602 	ands.w	r6, r0, r2
   2173e:	d113      	bne.n	21768 <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   21740:	4639      	mov	r1, r7
   21742:	4628      	mov	r0, r5
   21744:	f7ff fefb 	bl	2153e <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   21748:	4621      	mov	r1, r4
   2174a:	4632      	mov	r2, r6
   2174c:	4628      	mov	r0, r5
   2174e:	f7ff fe81 	bl	21454 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   21752:	4622      	mov	r2, r4
   21754:	1a21      	subs	r1, r4, r0
   21756:	4628      	mov	r0, r5
   21758:	f7ff ff69 	bl	2162e <merge_chunks>
   2175c:	4621      	mov	r1, r4
   2175e:	4632      	mov	r2, r6
   21760:	4628      	mov	r0, r5
   21762:	f7ff fe77 	bl	21454 <chunk_field>
   21766:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   21768:	4621      	mov	r1, r4
   2176a:	4628      	mov	r0, r5
}
   2176c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   21770:	f7ff bf7b 	b.w	2166a <free_list_add>

00021774 <sys_heap_free>:
{
   21774:	b510      	push	{r4, lr}
	if (mem == NULL) {
   21776:	b191      	cbz	r1, 2179e <sys_heap_free+0x2a>
   21778:	6800      	ldr	r0, [r0, #0]
	return big_heap(h) ? 8 : 4;
   2177a:	6883      	ldr	r3, [r0, #8]
   2177c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21780:	bf2c      	ite	cs
   21782:	2408      	movcs	r4, #8
   21784:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   21786:	1b0c      	subs	r4, r1, r4
   21788:	1a24      	subs	r4, r4, r0
   2178a:	08e4      	lsrs	r4, r4, #3
	set_chunk_used(h, c, false);
   2178c:	4621      	mov	r1, r4
   2178e:	2200      	movs	r2, #0
   21790:	f7ff fe7c 	bl	2148c <set_chunk_used>
	free_chunk(h, c);
   21794:	4621      	mov	r1, r4
}
   21796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	free_chunk(h, c);
   2179a:	f7ff bfa9 	b.w	216f0 <free_chunk>
}
   2179e:	bd10      	pop	{r4, pc}

000217a0 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   217a0:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   217a2:	6806      	ldr	r6, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   217a4:	b909      	cbnz	r1, 217aa <sys_heap_alloc+0xa>
		return NULL;
   217a6:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   217a8:	bd70      	pop	{r4, r5, r6, pc}
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   217aa:	68b3      	ldr	r3, [r6, #8]
	if (bytes == 0U || size_too_big(h, bytes)) {
   217ac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   217b0:	d9f9      	bls.n	217a6 <sys_heap_alloc+0x6>
	return big_heap(h) ? 8 : 4;
   217b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   217b6:	bf2c      	ite	cs
   217b8:	2208      	movcs	r2, #8
   217ba:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   217bc:	1dcc      	adds	r4, r1, #7
   217be:	4414      	add	r4, r2
   217c0:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   217c2:	4621      	mov	r1, r4
   217c4:	4630      	mov	r0, r6
   217c6:	f7ff fed1 	bl	2156c <alloc_chunk>
	if (c == 0U) {
   217ca:	4605      	mov	r5, r0
   217cc:	2800      	cmp	r0, #0
   217ce:	d0ea      	beq.n	217a6 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   217d0:	4601      	mov	r1, r0
   217d2:	4630      	mov	r0, r6
   217d4:	f7ff fe54 	bl	21480 <chunk_size>
   217d8:	42a0      	cmp	r0, r4
   217da:	d909      	bls.n	217f0 <sys_heap_alloc+0x50>
		split_chunks(h, c, c + chunk_sz);
   217dc:	442c      	add	r4, r5
   217de:	4629      	mov	r1, r5
   217e0:	4630      	mov	r0, r6
   217e2:	4622      	mov	r2, r4
   217e4:	f7ff fefc 	bl	215e0 <split_chunks>
		free_list_add(h, c + chunk_sz);
   217e8:	4621      	mov	r1, r4
   217ea:	4630      	mov	r0, r6
   217ec:	f7ff ff3d 	bl	2166a <free_list_add>
	set_chunk_used(h, c, true);
   217f0:	4629      	mov	r1, r5
   217f2:	4630      	mov	r0, r6
   217f4:	2201      	movs	r2, #1
   217f6:	f7ff fe49 	bl	2148c <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   217fa:	68b3      	ldr	r3, [r6, #8]
   217fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21800:	bf2c      	ite	cs
   21802:	2308      	movcs	r3, #8
   21804:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   21806:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   2180a:	4428      	add	r0, r5
	return chunk_mem(h, c);
   2180c:	e7cc      	b.n	217a8 <sys_heap_alloc+0x8>

0002180e <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   2180e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;
   21812:	6806      	ldr	r6, [r0, #0]
{
   21814:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   21816:	424a      	negs	r2, r1
   21818:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   2181c:	ea31 0202 	bics.w	r2, r1, r2
	return big_heap_chunks(h->end_chunk);
   21820:	68b5      	ldr	r5, [r6, #8]
{
   21822:	460b      	mov	r3, r1
	if (align != rew) {
   21824:	d00f      	beq.n	21846 <sys_heap_aligned_alloc+0x38>
	return big_heap(h) ? 8 : 4;
   21826:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   2182a:	bf34      	ite	cc
   2182c:	2104      	movcc	r1, #4
   2182e:	2108      	movcs	r1, #8
   21830:	42b9      	cmp	r1, r7
   21832:	460a      	mov	r2, r1
   21834:	46b9      	mov	r9, r7
   21836:	bf28      	it	cs
   21838:	463a      	movcs	r2, r7
		align -= rew;
   2183a:	1bdf      	subs	r7, r3, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   2183c:	b994      	cbnz	r4, 21864 <sys_heap_aligned_alloc+0x56>
		return NULL;
   2183e:	2500      	movs	r5, #0
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   21840:	4628      	mov	r0, r5
   21842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21846:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   2184a:	bf34      	ite	cc
   2184c:	2204      	movcc	r2, #4
   2184e:	2208      	movcs	r2, #8
		if (align <= chunk_header_bytes(h)) {
   21850:	4291      	cmp	r1, r2
   21852:	d804      	bhi.n	2185e <sys_heap_aligned_alloc+0x50>
			return sys_heap_alloc(heap, bytes);
   21854:	4621      	mov	r1, r4
}
   21856:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   2185a:	f7ff bfa1 	b.w	217a0 <sys_heap_alloc>
		rew = 0;
   2185e:	f04f 0900 	mov.w	r9, #0
   21862:	e7eb      	b.n	2183c <sys_heap_aligned_alloc+0x2e>
	if (bytes == 0 || size_too_big(h, bytes)) {
   21864:	ebb5 0fd4 	cmp.w	r5, r4, lsr #3
   21868:	d9e9      	bls.n	2183e <sys_heap_aligned_alloc+0x30>
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   2186a:	1de1      	adds	r1, r4, #7
   2186c:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   21870:	4439      	add	r1, r7
   21872:	bf2c      	ite	cs
   21874:	2308      	movcs	r3, #8
   21876:	2304      	movcc	r3, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   21878:	1a89      	subs	r1, r1, r2
   2187a:	4419      	add	r1, r3
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   2187c:	08c9      	lsrs	r1, r1, #3
   2187e:	4630      	mov	r0, r6
   21880:	f7ff fe74 	bl	2156c <alloc_chunk>
	if (c0 == 0) {
   21884:	4680      	mov	r8, r0
   21886:	2800      	cmp	r0, #0
   21888:	d0d9      	beq.n	2183e <sys_heap_aligned_alloc+0x30>
	return big_heap(h) ? 8 : 4;
   2188a:	68b3      	ldr	r3, [r6, #8]
   2188c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21890:	bf2c      	ite	cs
   21892:	2308      	movcs	r3, #8
   21894:	2304      	movcc	r3, #4
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   21896:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
   2189a:	441d      	add	r5, r3
   2189c:	1e7a      	subs	r2, r7, #1
   2189e:	4435      	add	r5, r6
   218a0:	427f      	negs	r7, r7
   218a2:	4415      	add	r5, r2
   218a4:	403d      	ands	r5, r7
   218a6:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   218aa:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   218ac:	1aeb      	subs	r3, r5, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   218ae:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   218b0:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   218b2:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   218b6:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   218b8:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   218bc:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   218c0:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   218c4:	d208      	bcs.n	218d8 <sys_heap_aligned_alloc+0xca>
		split_chunks(h, c0, c);
   218c6:	4601      	mov	r1, r0
   218c8:	463a      	mov	r2, r7
   218ca:	4630      	mov	r0, r6
   218cc:	f7ff fe88 	bl	215e0 <split_chunks>
		free_list_add(h, c0);
   218d0:	4641      	mov	r1, r8
   218d2:	4630      	mov	r0, r6
   218d4:	f7ff fec9 	bl	2166a <free_list_add>
	return c + chunk_size(h, c);
   218d8:	4639      	mov	r1, r7
   218da:	4630      	mov	r0, r6
   218dc:	f7ff fdd0 	bl	21480 <chunk_size>
   218e0:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   218e2:	4284      	cmp	r4, r0
   218e4:	d208      	bcs.n	218f8 <sys_heap_aligned_alloc+0xea>
		split_chunks(h, c, c_end);
   218e6:	4639      	mov	r1, r7
   218e8:	4630      	mov	r0, r6
   218ea:	4622      	mov	r2, r4
   218ec:	f7ff fe78 	bl	215e0 <split_chunks>
		free_list_add(h, c_end);
   218f0:	4621      	mov	r1, r4
   218f2:	4630      	mov	r0, r6
   218f4:	f7ff feb9 	bl	2166a <free_list_add>
	set_chunk_used(h, c, true);
   218f8:	2201      	movs	r2, #1
   218fa:	4639      	mov	r1, r7
   218fc:	4630      	mov	r0, r6
   218fe:	f7ff fdc5 	bl	2148c <set_chunk_used>
	return mem;
   21902:	e79d      	b.n	21840 <sys_heap_aligned_alloc+0x32>

00021904 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   21904:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   21908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2190a:	bf2c      	ite	cs
   2190c:	2408      	movcs	r4, #8
   2190e:	2404      	movcc	r4, #4
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   21910:	1b14      	subs	r4, r2, r4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   21912:	1dce      	adds	r6, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   21914:	440c      	add	r4, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   21916:	f026 0607 	bic.w	r6, r6, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   2191a:	f024 0407 	bic.w	r4, r4, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   2191e:	1ba4      	subs	r4, r4, r6
   21920:	08e4      	lsrs	r4, r4, #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   21922:	2300      	movs	r3, #0
	heap->heap = h;
   21924:	6006      	str	r6, [r0, #0]

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   21926:	4621      	mov	r1, r4
	h->end_chunk = heap_sz;
   21928:	60b4      	str	r4, [r6, #8]
	h->avail_buckets = 0;
   2192a:	60f3      	str	r3, [r6, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   2192c:	4620      	mov	r0, r4
   2192e:	f7ff fdc9 	bl	214c4 <bucket_idx.isra.0>
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   21932:	0085      	lsls	r5, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   21934:	351b      	adds	r5, #27
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   21936:	1c41      	adds	r1, r0, #1
   21938:	08ed      	lsrs	r5, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   2193a:	f106 0210 	add.w	r2, r6, #16
		h->buckets[i].next = 0;
   2193e:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
   21940:	428b      	cmp	r3, r1
   21942:	db2e      	blt.n	219a2 <sys_heap_init+0x9e>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   21944:	462a      	mov	r2, r5
   21946:	4630      	mov	r0, r6
   21948:	2100      	movs	r1, #0
   2194a:	f7ff fdb7 	bl	214bc <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   2194e:	2300      	movs	r3, #0
   21950:	461a      	mov	r2, r3
   21952:	4619      	mov	r1, r3
   21954:	4630      	mov	r0, r6
   21956:	f7ff fd88 	bl	2146a <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   2195a:	1b67      	subs	r7, r4, r5
	set_chunk_used(h, 0, true);
   2195c:	4619      	mov	r1, r3
   2195e:	4630      	mov	r0, r6
   21960:	2201      	movs	r2, #1
   21962:	f7ff fd93 	bl	2148c <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   21966:	463a      	mov	r2, r7
   21968:	4629      	mov	r1, r5
   2196a:	f7ff fda7 	bl	214bc <set_chunk_size>
   2196e:	462b      	mov	r3, r5
   21970:	2200      	movs	r2, #0
   21972:	4629      	mov	r1, r5
   21974:	4630      	mov	r0, r6
   21976:	f7ff fd78 	bl	2146a <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
   2197a:	4621      	mov	r1, r4
   2197c:	4630      	mov	r0, r6
   2197e:	f7ff fd9d 	bl	214bc <set_chunk_size>
   21982:	463b      	mov	r3, r7
   21984:	4621      	mov	r1, r4
   21986:	4630      	mov	r0, r6
   21988:	2200      	movs	r2, #0
   2198a:	f7ff fd6e 	bl	2146a <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
   2198e:	4621      	mov	r1, r4
   21990:	4630      	mov	r0, r6
   21992:	2201      	movs	r2, #1
   21994:	f7ff fd7a 	bl	2148c <set_chunk_used>

	free_list_add(h, chunk0_size);
   21998:	4629      	mov	r1, r5
}
   2199a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   2199e:	f7ff be64 	b.w	2166a <free_list_add>
		h->buckets[i].next = 0;
   219a2:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   219a6:	3301      	adds	r3, #1
   219a8:	e7ca      	b.n	21940 <sys_heap_init+0x3c>

000219aa <encode_uint>:
{
   219aa:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   219ae:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   219b0:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   219b2:	2b6f      	cmp	r3, #111	; 0x6f
{
   219b4:	4680      	mov	r8, r0
   219b6:	460f      	mov	r7, r1
   219b8:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   219ba:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   219be:	d029      	beq.n	21a14 <encode_uint+0x6a>
   219c0:	d824      	bhi.n	21a0c <encode_uint+0x62>
		return 16;
   219c2:	2b58      	cmp	r3, #88	; 0x58
   219c4:	bf14      	ite	ne
   219c6:	260a      	movne	r6, #10
   219c8:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   219ca:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   219ce:	4632      	mov	r2, r6
   219d0:	2300      	movs	r3, #0
   219d2:	4640      	mov	r0, r8
   219d4:	4639      	mov	r1, r7
   219d6:	f7de fbd3 	bl	180 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   219da:	2a09      	cmp	r2, #9
   219dc:	b2d4      	uxtb	r4, r2
   219de:	d81e      	bhi.n	21a1e <encode_uint+0x74>
   219e0:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   219e2:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   219e4:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   219e6:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   219ea:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   219ee:	d301      	bcc.n	219f4 <encode_uint+0x4a>
   219f0:	45d1      	cmp	r9, sl
   219f2:	d811      	bhi.n	21a18 <encode_uint+0x6e>
	if (conv->flag_hash) {
   219f4:	782b      	ldrb	r3, [r5, #0]
   219f6:	069b      	lsls	r3, r3, #26
   219f8:	d505      	bpl.n	21a06 <encode_uint+0x5c>
		if (radix == 8) {
   219fa:	2e08      	cmp	r6, #8
   219fc:	d115      	bne.n	21a2a <encode_uint+0x80>
			conv->altform_0 = true;
   219fe:	78ab      	ldrb	r3, [r5, #2]
   21a00:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   21a04:	70ab      	strb	r3, [r5, #2]
}
   21a06:	4648      	mov	r0, r9
   21a08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   21a0c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   21a10:	2b70      	cmp	r3, #112	; 0x70
   21a12:	e7d7      	b.n	219c4 <encode_uint+0x1a>
	switch (specifier) {
   21a14:	2608      	movs	r6, #8
   21a16:	e7d8      	b.n	219ca <encode_uint+0x20>
		value /= radix;
   21a18:	4680      	mov	r8, r0
   21a1a:	460f      	mov	r7, r1
   21a1c:	e7d7      	b.n	219ce <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   21a1e:	f1bb 0f19 	cmp.w	fp, #25
   21a22:	bf94      	ite	ls
   21a24:	3437      	addls	r4, #55	; 0x37
   21a26:	3457      	addhi	r4, #87	; 0x57
   21a28:	e7db      	b.n	219e2 <encode_uint+0x38>
		} else if (radix == 16) {
   21a2a:	2e10      	cmp	r6, #16
   21a2c:	d1eb      	bne.n	21a06 <encode_uint+0x5c>
			conv->altform_0c = true;
   21a2e:	78ab      	ldrb	r3, [r5, #2]
   21a30:	f043 0310 	orr.w	r3, r3, #16
   21a34:	e7e6      	b.n	21a04 <encode_uint+0x5a>

00021a36 <outs>:
{
   21a36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21a3a:	4607      	mov	r7, r0
   21a3c:	4688      	mov	r8, r1
   21a3e:	4615      	mov	r5, r2
   21a40:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   21a42:	4614      	mov	r4, r2
   21a44:	42b4      	cmp	r4, r6
   21a46:	eba4 0005 	sub.w	r0, r4, r5
   21a4a:	d302      	bcc.n	21a52 <outs+0x1c>
   21a4c:	b93e      	cbnz	r6, 21a5e <outs+0x28>
   21a4e:	7823      	ldrb	r3, [r4, #0]
   21a50:	b12b      	cbz	r3, 21a5e <outs+0x28>
		int rc = out((int)*sp++, ctx);
   21a52:	f814 0b01 	ldrb.w	r0, [r4], #1
   21a56:	4641      	mov	r1, r8
   21a58:	47b8      	blx	r7
		if (rc < 0) {
   21a5a:	2800      	cmp	r0, #0
   21a5c:	daf2      	bge.n	21a44 <outs+0xe>
}
   21a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00021a62 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   21a62:	4770      	bx	lr

00021a64 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   21a64:	2300      	movs	r3, #0
	list->head = NULL;
   21a66:	e9c0 3300 	strd	r3, r3, [r0]
}
   21a6a:	4770      	bx	lr

00021a6c <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   21a6c:	6803      	ldr	r3, [r0, #0]
   21a6e:	b923      	cbnz	r3, 21a7a <log_list_add_tail+0xe>
		list->head = msg;
   21a70:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   21a72:	2300      	movs	r3, #0
	list->tail = msg;
   21a74:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   21a76:	600b      	str	r3, [r1, #0]
}
   21a78:	4770      	bx	lr
		list->tail->next = msg;
   21a7a:	6843      	ldr	r3, [r0, #4]
   21a7c:	6019      	str	r1, [r3, #0]
   21a7e:	e7f8      	b.n	21a72 <log_list_add_tail+0x6>

00021a80 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   21a80:	6800      	ldr	r0, [r0, #0]
   21a82:	4770      	bx	lr

00021a84 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   21a84:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   21a86:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   21a88:	b108      	cbz	r0, 21a8e <log_list_head_get+0xa>
		list->head = list->head->next;
   21a8a:	6802      	ldr	r2, [r0, #0]
   21a8c:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   21a8e:	4770      	bx	lr

00021a90 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   21a90:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   21a92:	f7e1 fa0b 	bl	2eac <log_msg_chunk_alloc>

	if (msg != NULL) {
   21a96:	b118      	cbz	r0, 21aa0 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   21a98:	2301      	movs	r3, #1
   21a9a:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   21a9c:	2300      	movs	r3, #0
   21a9e:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   21aa0:	bd08      	pop	{r3, pc}

00021aa2 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   21aa2:	f7fd bb49 	b.w	1f138 <sys_clock_cycle_get_32>

00021aa6 <dummy_timestamp>:
   21aa6:	2000      	movs	r0, #0
   21aa8:	4770      	bx	lr

00021aaa <z_log_get_s_mask>:
{
   21aaa:	b5f0      	push	{r4, r5, r6, r7, lr}
   21aac:	4605      	mov	r5, r0
	uint32_t mask = 0U;
   21aae:	2000      	movs	r0, #0
	uint32_t arg = 0U;
   21ab0:	4603      	mov	r3, r0
	bool arm = false;
   21ab2:	4602      	mov	r2, r0
				mask |= BIT(arg);
   21ab4:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
   21ab6:	f815 4b01 	ldrb.w	r4, [r5], #1
   21aba:	b10c      	cbz	r4, 21ac0 <z_log_get_s_mask+0x16>
   21abc:	428b      	cmp	r3, r1
   21abe:	d300      	bcc.n	21ac2 <z_log_get_s_mask+0x18>
}
   21ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   21ac2:	2c25      	cmp	r4, #37	; 0x25
   21ac4:	d102      	bne.n	21acc <z_log_get_s_mask+0x22>
			arm = !arm;
   21ac6:	f082 0201 	eor.w	r2, r2, #1
   21aca:	e7f4      	b.n	21ab6 <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   21acc:	2a00      	cmp	r2, #0
   21ace:	d0f2      	beq.n	21ab6 <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   21ad0:	f044 0620 	orr.w	r6, r4, #32
   21ad4:	3e61      	subs	r6, #97	; 0x61
   21ad6:	2e19      	cmp	r6, #25
   21ad8:	d8ed      	bhi.n	21ab6 <z_log_get_s_mask+0xc>
			if (curr == 's') {
   21ada:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   21adc:	bf04      	itt	eq
   21ade:	fa07 f203 	lsleq.w	r2, r7, r3
   21ae2:	4310      	orreq	r0, r2
			arg++;
   21ae4:	3301      	adds	r3, #1
			arm = false;
   21ae6:	2200      	movs	r2, #0
   21ae8:	e7e5      	b.n	21ab6 <z_log_get_s_mask+0xc>

00021aea <log_0>:
{
   21aea:	b538      	push	{r3, r4, r5, lr}
   21aec:	4605      	mov	r5, r0
   21aee:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   21af0:	f7ff ffce 	bl	21a90 <z_log_msg_std_alloc>

	if (msg != NULL) {
   21af4:	b128      	cbz	r0, 21b02 <log_0+0x18>
		msg->str = str;
   21af6:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   21af8:	4621      	mov	r1, r4
}
   21afa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   21afe:	f7e1 b8f7 	b.w	2cf0 <msg_finalize>
}
   21b02:	bd38      	pop	{r3, r4, r5, pc}

00021b04 <log_1>:
{
   21b04:	b570      	push	{r4, r5, r6, lr}
   21b06:	4606      	mov	r6, r0
   21b08:	460d      	mov	r5, r1
   21b0a:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   21b0c:	f7ff ffc0 	bl	21a90 <z_log_msg_std_alloc>

	if (msg != NULL) {
   21b10:	b158      	cbz	r0, 21b2a <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   21b12:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   21b14:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   21b16:	2101      	movs	r1, #1
   21b18:	f361 1207 	bfi	r2, r1, #4, #4
   21b1c:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   21b1e:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
   21b20:	4621      	mov	r1, r4
}
   21b22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   21b26:	f7e1 b8e3 	b.w	2cf0 <msg_finalize>
}
   21b2a:	bd70      	pop	{r4, r5, r6, pc}

00021b2c <log_2>:
{
   21b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21b30:	4680      	mov	r8, r0
   21b32:	460f      	mov	r7, r1
   21b34:	4616      	mov	r6, r2
   21b36:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   21b38:	f7ff ffaa 	bl	21a90 <z_log_msg_std_alloc>

	if (msg != NULL) {
   21b3c:	b168      	cbz	r0, 21b5a <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   21b3e:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   21b40:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   21b44:	2202      	movs	r2, #2
   21b46:	f362 1307 	bfi	r3, r2, #4, #4
   21b4a:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   21b4c:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
   21b50:	4629      	mov	r1, r5
}
   21b52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   21b56:	f7e1 b8cb 	b.w	2cf0 <msg_finalize>
}
   21b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00021b5e <log_3>:
{
   21b5e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21b62:	4680      	mov	r8, r0
   21b64:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   21b68:	460f      	mov	r7, r1
   21b6a:	4616      	mov	r6, r2
   21b6c:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   21b6e:	f7ff ff8f 	bl	21a90 <z_log_msg_std_alloc>

	if (msg != NULL) {
   21b72:	b170      	cbz	r0, 21b92 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   21b74:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   21b76:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   21b7a:	2203      	movs	r2, #3
   21b7c:	f362 1307 	bfi	r3, r2, #4, #4
   21b80:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   21b82:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
   21b86:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
   21b88:	4649      	mov	r1, r9
}
   21b8a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   21b8e:	f7e1 b8af 	b.w	2cf0 <msg_finalize>
}
   21b92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00021b96 <log_n>:
{
   21b96:	b510      	push	{r4, lr}
   21b98:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   21b9a:	f000 f8b9 	bl	21d10 <log_msg_create_n>
		if (msg == NULL) {
   21b9e:	b120      	cbz	r0, 21baa <log_n+0x14>
		msg_finalize(msg, src_level);
   21ba0:	4621      	mov	r1, r4
}
   21ba2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   21ba6:	f7e1 b8a3 	b.w	2cf0 <msg_finalize>
}
   21baa:	bd10      	pop	{r4, pc}

00021bac <z_log_printk>:
{
   21bac:	b500      	push	{lr}
   21bae:	b0a3      	sub	sp, #140	; 0x8c
   21bb0:	4602      	mov	r2, r0
   21bb2:	460b      	mov	r3, r1
			length = vsnprintk(str, sizeof(str), fmt, ap);
   21bb4:	a801      	add	r0, sp, #4
   21bb6:	2181      	movs	r1, #129	; 0x81
   21bb8:	f7e0 f9f2 	bl	1fa0 <vsnprintk>
			msg = log_msg_hexdump_create(NULL, str, length);
   21bbc:	2881      	cmp	r0, #129	; 0x81
   21bbe:	4602      	mov	r2, r0
   21bc0:	a901      	add	r1, sp, #4
   21bc2:	bf28      	it	cs
   21bc4:	2281      	movcs	r2, #129	; 0x81
   21bc6:	2000      	movs	r0, #0
   21bc8:	f000 f8fe 	bl	21dc8 <log_msg_hexdump_create>
			if (msg == NULL) {
   21bcc:	b118      	cbz	r0, 21bd6 <z_log_printk+0x2a>
			msg_finalize(msg, src_level_union.structure);
   21bce:	f04f 0100 	mov.w	r1, #0
   21bd2:	f7e1 f88d 	bl	2cf0 <msg_finalize>
}
   21bd6:	b023      	add	sp, #140	; 0x8c
   21bd8:	f85d fb04 	ldr.w	pc, [sp], #4

00021bdc <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   21bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21be0:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   21be2:	8903      	ldrh	r3, [r0, #8]
{
   21be4:	f89d 7020 	ldrb.w	r7, [sp, #32]
   21be8:	460e      	mov	r6, r1
   21bea:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   21bec:	f3c3 028d 	ubfx	r2, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   21bf0:	42a2      	cmp	r2, r4
   21bf2:	d803      	bhi.n	21bfc <log_msg_hexdump_data_op+0x20>
		*length = 0;
   21bf4:	2300      	movs	r3, #0
   21bf6:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   21bf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   21bfc:	680b      	ldr	r3, [r1, #0]
   21bfe:	4423      	add	r3, r4
   21c00:	4293      	cmp	r3, r2
		*length = available_len - offset;
   21c02:	bf84      	itt	hi
   21c04:	1b13      	subhi	r3, r2, r4
   21c06:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   21c08:	2a0c      	cmp	r2, #12
	req_len = *length;
   21c0a:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   21c0e:	d92a      	bls.n	21c66 <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   21c10:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   21c12:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   21c16:	d82d      	bhi.n	21c74 <log_msg_hexdump_data_op+0x98>
		head_data = msg->payload.ext.data.bytes;
   21c18:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   21c1a:	2208      	movs	r2, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   21c1c:	454a      	cmp	r2, r9
   21c1e:	bf28      	it	cs
   21c20:	464a      	movcs	r2, r9
   21c22:	4615      	mov	r5, r2
			(void)memcpy(&head_data[offset], data, cpy_len);
   21c24:	4420      	add	r0, r4
		if (put_op) {
   21c26:	b317      	cbz	r7, 21c6e <log_msg_hexdump_data_op+0x92>
			(void)memcpy(&head_data[offset], data, cpy_len);
   21c28:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   21c2a:	f002 f8bd 	bl	23da8 <memcpy>
		req_len -= cpy_len;
   21c2e:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   21c32:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   21c34:	f1b9 0f00 	cmp.w	r9, #0
   21c38:	d0de      	beq.n	21bf8 <log_msg_hexdump_data_op+0x1c>
   21c3a:	f1b8 0f00 	cmp.w	r8, #0
   21c3e:	d0db      	beq.n	21bf8 <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   21c40:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   21c44:	454d      	cmp	r5, r9
   21c46:	bf28      	it	cs
   21c48:	464d      	movcs	r5, r9
			(void)memcpy(&cont->payload.bytes[offset],
   21c4a:	1d20      	adds	r0, r4, #4
   21c4c:	4440      	add	r0, r8
   21c4e:	462a      	mov	r2, r5
		if (put_op) {
   21c50:	b1bf      	cbz	r7, 21c82 <log_msg_hexdump_data_op+0xa6>
			(void)memcpy(&cont->payload.bytes[offset],
   21c52:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   21c54:	f002 f8a8 	bl	23da8 <memcpy>
		req_len -= cpy_len;
   21c58:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   21c5c:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
   21c60:	442e      	add	r6, r5
		offset = 0;
   21c62:	2400      	movs	r4, #0
   21c64:	e7e6      	b.n	21c34 <log_msg_hexdump_data_op+0x58>
		head_data = msg->payload.single.bytes;
   21c66:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   21c68:	f04f 0800 	mov.w	r8, #0
   21c6c:	e7d6      	b.n	21c1c <log_msg_hexdump_data_op+0x40>
			(void)memcpy(data, &head_data[offset], cpy_len);
   21c6e:	4601      	mov	r1, r0
   21c70:	4630      	mov	r0, r6
   21c72:	e7da      	b.n	21c2a <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   21c74:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   21c76:	2c1b      	cmp	r4, #27
   21c78:	d9dc      	bls.n	21c34 <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   21c7a:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   21c7e:	3c1c      	subs	r4, #28
   21c80:	e7f9      	b.n	21c76 <log_msg_hexdump_data_op+0x9a>
			(void)memcpy(data, &cont->payload.bytes[offset],
   21c82:	4601      	mov	r1, r0
   21c84:	4630      	mov	r0, r6
   21c86:	e7e5      	b.n	21c54 <log_msg_hexdump_data_op+0x78>

00021c88 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   21c88:	3004      	adds	r0, #4
   21c8a:	f3bf 8f5b 	dmb	ish
   21c8e:	e850 3f00 	ldrex	r3, [r0]
   21c92:	3301      	adds	r3, #1
   21c94:	e840 3200 	strex	r2, r3, [r0]
   21c98:	2a00      	cmp	r2, #0
   21c9a:	d1f8      	bne.n	21c8e <log_msg_get+0x6>
   21c9c:	f3bf 8f5b 	dmb	ish
}
   21ca0:	4770      	bx	lr

00021ca2 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   21ca2:	7a40      	ldrb	r0, [r0, #9]
}
   21ca4:	0900      	lsrs	r0, r0, #4
   21ca6:	4770      	bx	lr

00021ca8 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   21ca8:	7a43      	ldrb	r3, [r0, #9]
   21caa:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   21cae:	ea4f 1213 	mov.w	r2, r3, lsr #4
   21cb2:	d216      	bcs.n	21ce2 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   21cb4:	2a03      	cmp	r2, #3
   21cb6:	d803      	bhi.n	21cc0 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   21cb8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   21cbc:	6940      	ldr	r0, [r0, #20]
   21cbe:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   21cc0:	2901      	cmp	r1, #1
   21cc2:	d803      	bhi.n	21ccc <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   21cc4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   21cc8:	6980      	ldr	r0, [r0, #24]
   21cca:	4770      	bx	lr
	cont = msg->payload.ext.next;
   21ccc:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   21cce:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   21cd0:	2906      	cmp	r1, #6
   21cd2:	d803      	bhi.n	21cdc <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   21cd4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   21cd8:	6848      	ldr	r0, [r1, #4]
   21cda:	4770      	bx	lr
		cont = cont->next;
   21cdc:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   21cde:	3907      	subs	r1, #7
		cont = cont->next;
   21ce0:	e7f6      	b.n	21cd0 <log_msg_arg_get+0x28>
		return 0;
   21ce2:	2000      	movs	r0, #0
}
   21ce4:	4770      	bx	lr

00021ce6 <log_msg_put>:
{
   21ce6:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   21ce8:	1d02      	adds	r2, r0, #4
   21cea:	f3bf 8f5b 	dmb	ish
   21cee:	e852 1f00 	ldrex	r1, [r2]
   21cf2:	3901      	subs	r1, #1
   21cf4:	e842 1c00 	strex	ip, r1, [r2]
   21cf8:	f1bc 0f00 	cmp.w	ip, #0
   21cfc:	d1f7      	bne.n	21cee <log_msg_put+0x8>
   21cfe:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   21d02:	685b      	ldr	r3, [r3, #4]
   21d04:	b90b      	cbnz	r3, 21d0a <log_msg_put+0x24>
		msg_free(msg);
   21d06:	f7e1 b8e5 	b.w	2ed4 <msg_free>
}
   21d0a:	4770      	bx	lr

00021d0c <log_msg_str_get>:
}
   21d0c:	6900      	ldr	r0, [r0, #16]
   21d0e:	4770      	bx	lr

00021d10 <log_msg_create_n>:
{
   21d10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21d14:	4680      	mov	r8, r0
   21d16:	460f      	mov	r7, r1
   21d18:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   21d1a:	f7e1 f8c7 	bl	2eac <log_msg_chunk_alloc>
	if (msg != NULL) {
   21d1e:	4604      	mov	r4, r0
   21d20:	b358      	cbz	r0, 21d7a <log_msg_create_n+0x6a>
		msg->hdr.ref_cnt = 1;
   21d22:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   21d24:	f04f 0a00 	mov.w	sl, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   21d28:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   21d2a:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   21d2c:	f8a0 a008 	strh.w	sl, [r0, #8]
   21d30:	d90c      	bls.n	21d4c <log_msg_create_n+0x3c>
	msg->hdr.params.generic.ext = 1;
   21d32:	7a03      	ldrb	r3, [r0, #8]
	*next = NULL;
   21d34:	f8c0 a014 	str.w	sl, [r0, #20]
	msg->hdr.params.generic.ext = 1;
   21d38:	f043 0302 	orr.w	r3, r3, #2
   21d3c:	7203      	strb	r3, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   21d3e:	f1a5 0902 	sub.w	r9, r5, #2
	next = &msg->payload.ext.next;
   21d42:	f100 0b14 	add.w	fp, r0, #20
	while (n > 0) {
   21d46:	f1b9 0f00 	cmp.w	r9, #0
   21d4a:	dc0e      	bgt.n	21d6a <log_msg_create_n+0x5a>
		msg->hdr.params.std.nargs = nargs;
   21d4c:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
   21d4e:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   21d52:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   21d56:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   21d58:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   21d5a:	d819      	bhi.n	21d90 <log_msg_create_n+0x80>
		(void)memcpy(msg->payload.single.args, args,
   21d5c:	00aa      	lsls	r2, r5, #2
   21d5e:	4639      	mov	r1, r7
   21d60:	f104 0014 	add.w	r0, r4, #20
   21d64:	f002 f820 	bl	23da8 <memcpy>
	while (nargs != 0U) {
   21d68:	e007      	b.n	21d7a <log_msg_create_n+0x6a>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   21d6a:	f7e1 f89f 	bl	2eac <log_msg_chunk_alloc>
		if (cont == NULL) {
   21d6e:	4606      	mov	r6, r0
   21d70:	b930      	cbnz	r0, 21d80 <log_msg_create_n+0x70>
			msg_free(msg);
   21d72:	4620      	mov	r0, r4
   21d74:	f7e1 f8ae 	bl	2ed4 <msg_free>
			return NULL;
   21d78:	4634      	mov	r4, r6
}
   21d7a:	4620      	mov	r0, r4
   21d7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   21d80:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   21d84:	f1a9 0907 	sub.w	r9, r9, #7
   21d88:	f8c0 a000 	str.w	sl, [r0]
		next = &cont->next;
   21d8c:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   21d8e:	e7da      	b.n	21d46 <log_msg_create_n+0x36>
		(void)memcpy(msg->payload.ext.data.args, args,
   21d90:	4639      	mov	r1, r7
   21d92:	2208      	movs	r2, #8
   21d94:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   21d98:	f8d4 8014 	ldr.w	r8, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   21d9c:	f002 f804 	bl	23da8 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   21da0:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   21da2:	3708      	adds	r7, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   21da4:	2d07      	cmp	r5, #7
   21da6:	462e      	mov	r6, r5
   21da8:	bf28      	it	cs
   21daa:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   21dac:	ea4f 0986 	mov.w	r9, r6, lsl #2
   21db0:	4639      	mov	r1, r7
   21db2:	f108 0004 	add.w	r0, r8, #4
   21db6:	464a      	mov	r2, r9
   21db8:	f001 fff6 	bl	23da8 <memcpy>
	while (nargs != 0U) {
   21dbc:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   21dbe:	f8d8 8000 	ldr.w	r8, [r8]
		args += cpy_args;
   21dc2:	444f      	add	r7, r9
	while (nargs != 0U) {
   21dc4:	d1ee      	bne.n	21da4 <log_msg_create_n+0x94>
   21dc6:	e7d8      	b.n	21d7a <log_msg_create_n+0x6a>

00021dc8 <log_msg_hexdump_create>:
{
   21dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   21dcc:	f643 75ff 	movw	r5, #16383	; 0x3fff
   21dd0:	4295      	cmp	r5, r2
{
   21dd2:	4680      	mov	r8, r0
   21dd4:	460e      	mov	r6, r1
   21dd6:	4617      	mov	r7, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   21dd8:	bf28      	it	cs
   21dda:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
   21ddc:	f7e1 f866 	bl	2eac <log_msg_chunk_alloc>
	if (msg == NULL) {
   21de0:	4604      	mov	r4, r0
   21de2:	b388      	cbz	r0, 21e48 <log_msg_hexdump_create+0x80>
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   21de4:	8902      	ldrh	r2, [r0, #8]
	msg->str = str;
   21de6:	f8c0 8010 	str.w	r8, [r0, #16]
	msg->hdr.ref_cnt = 1;
   21dea:	2301      	movs	r3, #1
   21dec:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   21dee:	00ab      	lsls	r3, r5, #2
   21df0:	f043 0301 	orr.w	r3, r3, #1
   21df4:	f002 0202 	and.w	r2, r2, #2
   21df8:	4313      	orrs	r3, r2
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   21dfa:	2f0c      	cmp	r7, #12
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   21dfc:	8103      	strh	r3, [r0, #8]
		(void)memcpy(msg->payload.single.bytes, data, length);
   21dfe:	f100 0814 	add.w	r8, r0, #20
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   21e02:	d918      	bls.n	21e36 <log_msg_hexdump_create+0x6e>
		(void)memcpy(msg->payload.ext.data.bytes,
   21e04:	4631      	mov	r1, r6
   21e06:	2208      	movs	r2, #8
   21e08:	3018      	adds	r0, #24
   21e0a:	f001 ffcd 	bl	23da8 <memcpy>
		msg->hdr.params.generic.ext = 1;
   21e0e:	7a23      	ldrb	r3, [r4, #8]
		msg->payload.ext.next = NULL;
   21e10:	f04f 0900 	mov.w	r9, #0
		msg->hdr.params.generic.ext = 1;
   21e14:	f043 0302 	orr.w	r3, r3, #2
		msg->payload.ext.next = NULL;
   21e18:	f8c4 9014 	str.w	r9, [r4, #20]
		msg->hdr.params.generic.ext = 1;
   21e1c:	7223      	strb	r3, [r4, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   21e1e:	3608      	adds	r6, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   21e20:	3d08      	subs	r5, #8
	while (length > 0) {
   21e22:	b18d      	cbz	r5, 21e48 <log_msg_hexdump_create+0x80>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   21e24:	f7e1 f842 	bl	2eac <log_msg_chunk_alloc>
		if (cont == NULL) {
   21e28:	4607      	mov	r7, r0
   21e2a:	b980      	cbnz	r0, 21e4e <log_msg_hexdump_create+0x86>
			msg_free(msg);
   21e2c:	4620      	mov	r0, r4
   21e2e:	f7e1 f851 	bl	2ed4 <msg_free>
			return NULL;
   21e32:	463c      	mov	r4, r7
   21e34:	e008      	b.n	21e48 <log_msg_hexdump_create+0x80>
		(void)memcpy(msg->payload.single.bytes, data, length);
   21e36:	462a      	mov	r2, r5
   21e38:	4631      	mov	r1, r6
   21e3a:	4640      	mov	r0, r8
   21e3c:	f001 ffb4 	bl	23da8 <memcpy>
		msg->hdr.params.generic.ext = 0;
   21e40:	7a23      	ldrb	r3, [r4, #8]
   21e42:	f36f 0341 	bfc	r3, #1, #1
   21e46:	7223      	strb	r3, [r4, #8]
}
   21e48:	4620      	mov	r0, r4
   21e4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
   21e4e:	2d1c      	cmp	r5, #28
   21e50:	462f      	mov	r7, r5
   21e52:	bf28      	it	cs
   21e54:	271c      	movcs	r7, #28
		*prev_cont = cont;
   21e56:	f8c8 0000 	str.w	r0, [r8]
		(void)memcpy(cont->payload.bytes, data, chunk_length);
   21e5a:	4631      	mov	r1, r6
		cont->next = NULL;
   21e5c:	f8c0 9000 	str.w	r9, [r0]
		prev_cont = &cont->next;
   21e60:	4680      	mov	r8, r0
		(void)memcpy(cont->payload.bytes, data, chunk_length);
   21e62:	463a      	mov	r2, r7
   21e64:	3004      	adds	r0, #4
   21e66:	f001 ff9f 	bl	23da8 <memcpy>
		data += chunk_length;
   21e6a:	443e      	add	r6, r7
		length -= chunk_length;
   21e6c:	1bed      	subs	r5, r5, r7
   21e6e:	e7d8      	b.n	21e22 <log_msg_hexdump_create+0x5a>

00021e70 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   21e70:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   21e72:	2400      	movs	r4, #0
   21e74:	9400      	str	r4, [sp, #0]
   21e76:	f7ff feb1 	bl	21bdc <log_msg_hexdump_data_op>
}
   21e7a:	b002      	add	sp, #8
   21e7c:	bd10      	pop	{r4, pc}

00021e7e <buffer_write>:
{
   21e7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21e80:	4606      	mov	r6, r0
   21e82:	460d      	mov	r5, r1
   21e84:	4614      	mov	r4, r2
   21e86:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   21e88:	4621      	mov	r1, r4
   21e8a:	4628      	mov	r0, r5
   21e8c:	463a      	mov	r2, r7
   21e8e:	47b0      	blx	r6
	} while (len != 0);
   21e90:	1a24      	subs	r4, r4, r0
		buf += processed;
   21e92:	4405      	add	r5, r0
	} while (len != 0);
   21e94:	d1f8      	bne.n	21e88 <buffer_write+0xa>
}
   21e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00021e98 <std_print>:
{
   21e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21e9c:	b08e      	sub	sp, #56	; 0x38
   21e9e:	af0e      	add	r7, sp, #56	; 0x38
   21ea0:	4680      	mov	r8, r0
   21ea2:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   21ea4:	f7ff ff32 	bl	21d0c <log_msg_str_get>
   21ea8:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   21eaa:	4640      	mov	r0, r8
   21eac:	f7ff fef9 	bl	21ca2 <log_msg_nargs_get>
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   21eb0:	0083      	lsls	r3, r0, #2
   21eb2:	3307      	adds	r3, #7
   21eb4:	f023 0307 	bic.w	r3, r3, #7
   21eb8:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
   21ebc:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   21ebe:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   21ec0:	f04f 0900 	mov.w	r9, #0
   21ec4:	45d1      	cmp	r9, sl
   21ec6:	d116      	bne.n	21ef6 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   21ec8:	4640      	mov	r0, r8
   21eca:	f7ff feea 	bl	21ca2 <log_msg_nargs_get>
   21ece:	280f      	cmp	r0, #15
   21ed0:	d81e      	bhi.n	21f10 <std_print+0x78>
   21ed2:	e8df f010 	tbh	[pc, r0, lsl #1]
   21ed6:	0019      	.short	0x0019
   21ed8:	00260020 	.word	0x00260020
   21edc:	0036002d 	.word	0x0036002d
   21ee0:	004e0041 	.word	0x004e0041
   21ee4:	006e005d 	.word	0x006e005d
   21ee8:	00960081 	.word	0x00960081
   21eec:	00c600ad 	.word	0x00c600ad
   21ef0:	00fe00e1 	.word	0x00fe00e1
   21ef4:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
   21ef6:	4649      	mov	r1, r9
   21ef8:	4640      	mov	r0, r8
   21efa:	f7ff fed5 	bl	21ca8 <log_msg_arg_get>
   21efe:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   21f02:	f109 0901 	add.w	r9, r9, #1
   21f06:	e7dd      	b.n	21ec4 <std_print+0x2c>
		print_formatted(output, str);
   21f08:	4631      	mov	r1, r6
   21f0a:	4628      	mov	r0, r5
   21f0c:	f7e1 f820 	bl	2f50 <print_formatted>
}
   21f10:	46bd      	mov	sp, r7
   21f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   21f16:	6822      	ldr	r2, [r4, #0]
   21f18:	4631      	mov	r1, r6
   21f1a:	4628      	mov	r0, r5
   21f1c:	f7e1 f818 	bl	2f50 <print_formatted>
		break;
   21f20:	e7f6      	b.n	21f10 <std_print+0x78>
		print_formatted(output, str, args[0], args[1]);
   21f22:	e9d4 2300 	ldrd	r2, r3, [r4]
   21f26:	4631      	mov	r1, r6
   21f28:	4628      	mov	r0, r5
   21f2a:	f7e1 f811 	bl	2f50 <print_formatted>
		break;
   21f2e:	e7ef      	b.n	21f10 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2]);
   21f30:	68a3      	ldr	r3, [r4, #8]
   21f32:	9300      	str	r3, [sp, #0]
   21f34:	e9d4 2300 	ldrd	r2, r3, [r4]
   21f38:	4631      	mov	r1, r6
   21f3a:	4628      	mov	r0, r5
   21f3c:	f7e1 f808 	bl	2f50 <print_formatted>
		break;
   21f40:	e7e6      	b.n	21f10 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   21f42:	68e3      	ldr	r3, [r4, #12]
   21f44:	9301      	str	r3, [sp, #4]
   21f46:	68a3      	ldr	r3, [r4, #8]
   21f48:	9300      	str	r3, [sp, #0]
   21f4a:	e9d4 2300 	ldrd	r2, r3, [r4]
   21f4e:	4631      	mov	r1, r6
   21f50:	4628      	mov	r0, r5
   21f52:	f7e0 fffd 	bl	2f50 <print_formatted>
		break;
   21f56:	e7db      	b.n	21f10 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   21f58:	6923      	ldr	r3, [r4, #16]
   21f5a:	9302      	str	r3, [sp, #8]
   21f5c:	68e3      	ldr	r3, [r4, #12]
   21f5e:	9301      	str	r3, [sp, #4]
   21f60:	68a3      	ldr	r3, [r4, #8]
   21f62:	9300      	str	r3, [sp, #0]
   21f64:	e9d4 2300 	ldrd	r2, r3, [r4]
   21f68:	4631      	mov	r1, r6
   21f6a:	4628      	mov	r0, r5
   21f6c:	f7e0 fff0 	bl	2f50 <print_formatted>
		break;
   21f70:	e7ce      	b.n	21f10 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   21f72:	6963      	ldr	r3, [r4, #20]
   21f74:	9303      	str	r3, [sp, #12]
   21f76:	6923      	ldr	r3, [r4, #16]
   21f78:	9302      	str	r3, [sp, #8]
   21f7a:	68e3      	ldr	r3, [r4, #12]
   21f7c:	9301      	str	r3, [sp, #4]
   21f7e:	68a3      	ldr	r3, [r4, #8]
   21f80:	9300      	str	r3, [sp, #0]
   21f82:	e9d4 2300 	ldrd	r2, r3, [r4]
   21f86:	4631      	mov	r1, r6
   21f88:	4628      	mov	r0, r5
   21f8a:	f7e0 ffe1 	bl	2f50 <print_formatted>
		break;
   21f8e:	e7bf      	b.n	21f10 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   21f90:	69a3      	ldr	r3, [r4, #24]
   21f92:	9304      	str	r3, [sp, #16]
   21f94:	6963      	ldr	r3, [r4, #20]
   21f96:	9303      	str	r3, [sp, #12]
   21f98:	6923      	ldr	r3, [r4, #16]
   21f9a:	9302      	str	r3, [sp, #8]
   21f9c:	68e3      	ldr	r3, [r4, #12]
   21f9e:	9301      	str	r3, [sp, #4]
   21fa0:	68a3      	ldr	r3, [r4, #8]
   21fa2:	9300      	str	r3, [sp, #0]
   21fa4:	e9d4 2300 	ldrd	r2, r3, [r4]
   21fa8:	4631      	mov	r1, r6
   21faa:	4628      	mov	r0, r5
   21fac:	f7e0 ffd0 	bl	2f50 <print_formatted>
		break;
   21fb0:	e7ae      	b.n	21f10 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   21fb2:	69e3      	ldr	r3, [r4, #28]
   21fb4:	9305      	str	r3, [sp, #20]
   21fb6:	69a3      	ldr	r3, [r4, #24]
   21fb8:	9304      	str	r3, [sp, #16]
   21fba:	6963      	ldr	r3, [r4, #20]
   21fbc:	9303      	str	r3, [sp, #12]
   21fbe:	6923      	ldr	r3, [r4, #16]
   21fc0:	9302      	str	r3, [sp, #8]
   21fc2:	68e3      	ldr	r3, [r4, #12]
   21fc4:	9301      	str	r3, [sp, #4]
   21fc6:	68a3      	ldr	r3, [r4, #8]
   21fc8:	9300      	str	r3, [sp, #0]
   21fca:	e9d4 2300 	ldrd	r2, r3, [r4]
   21fce:	4631      	mov	r1, r6
   21fd0:	4628      	mov	r0, r5
   21fd2:	f7e0 ffbd 	bl	2f50 <print_formatted>
		break;
   21fd6:	e79b      	b.n	21f10 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   21fd8:	6a23      	ldr	r3, [r4, #32]
   21fda:	9306      	str	r3, [sp, #24]
   21fdc:	69e3      	ldr	r3, [r4, #28]
   21fde:	9305      	str	r3, [sp, #20]
   21fe0:	69a3      	ldr	r3, [r4, #24]
   21fe2:	9304      	str	r3, [sp, #16]
   21fe4:	6963      	ldr	r3, [r4, #20]
   21fe6:	9303      	str	r3, [sp, #12]
   21fe8:	6923      	ldr	r3, [r4, #16]
   21fea:	9302      	str	r3, [sp, #8]
   21fec:	68e3      	ldr	r3, [r4, #12]
   21fee:	9301      	str	r3, [sp, #4]
   21ff0:	68a3      	ldr	r3, [r4, #8]
   21ff2:	9300      	str	r3, [sp, #0]
   21ff4:	e9d4 2300 	ldrd	r2, r3, [r4]
   21ff8:	4631      	mov	r1, r6
   21ffa:	4628      	mov	r0, r5
   21ffc:	f7e0 ffa8 	bl	2f50 <print_formatted>
		break;
   22000:	e786      	b.n	21f10 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   22002:	6a63      	ldr	r3, [r4, #36]	; 0x24
   22004:	9307      	str	r3, [sp, #28]
   22006:	6a23      	ldr	r3, [r4, #32]
   22008:	9306      	str	r3, [sp, #24]
   2200a:	69e3      	ldr	r3, [r4, #28]
   2200c:	9305      	str	r3, [sp, #20]
   2200e:	69a3      	ldr	r3, [r4, #24]
   22010:	9304      	str	r3, [sp, #16]
   22012:	6963      	ldr	r3, [r4, #20]
   22014:	9303      	str	r3, [sp, #12]
   22016:	6923      	ldr	r3, [r4, #16]
   22018:	9302      	str	r3, [sp, #8]
   2201a:	68e3      	ldr	r3, [r4, #12]
   2201c:	9301      	str	r3, [sp, #4]
   2201e:	68a3      	ldr	r3, [r4, #8]
   22020:	9300      	str	r3, [sp, #0]
   22022:	e9d4 2300 	ldrd	r2, r3, [r4]
   22026:	4631      	mov	r1, r6
   22028:	4628      	mov	r0, r5
   2202a:	f7e0 ff91 	bl	2f50 <print_formatted>
		break;
   2202e:	e76f      	b.n	21f10 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   22030:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22032:	9308      	str	r3, [sp, #32]
   22034:	6a63      	ldr	r3, [r4, #36]	; 0x24
   22036:	9307      	str	r3, [sp, #28]
   22038:	6a23      	ldr	r3, [r4, #32]
   2203a:	9306      	str	r3, [sp, #24]
   2203c:	69e3      	ldr	r3, [r4, #28]
   2203e:	9305      	str	r3, [sp, #20]
   22040:	69a3      	ldr	r3, [r4, #24]
   22042:	9304      	str	r3, [sp, #16]
   22044:	6963      	ldr	r3, [r4, #20]
   22046:	9303      	str	r3, [sp, #12]
   22048:	6923      	ldr	r3, [r4, #16]
   2204a:	9302      	str	r3, [sp, #8]
   2204c:	68e3      	ldr	r3, [r4, #12]
   2204e:	9301      	str	r3, [sp, #4]
   22050:	68a3      	ldr	r3, [r4, #8]
   22052:	9300      	str	r3, [sp, #0]
   22054:	e9d4 2300 	ldrd	r2, r3, [r4]
   22058:	4631      	mov	r1, r6
   2205a:	4628      	mov	r0, r5
   2205c:	f7e0 ff78 	bl	2f50 <print_formatted>
		break;
   22060:	e756      	b.n	21f10 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   22062:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   22064:	9309      	str	r3, [sp, #36]	; 0x24
   22066:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22068:	9308      	str	r3, [sp, #32]
   2206a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2206c:	9307      	str	r3, [sp, #28]
   2206e:	6a23      	ldr	r3, [r4, #32]
   22070:	9306      	str	r3, [sp, #24]
   22072:	69e3      	ldr	r3, [r4, #28]
   22074:	9305      	str	r3, [sp, #20]
   22076:	69a3      	ldr	r3, [r4, #24]
   22078:	9304      	str	r3, [sp, #16]
   2207a:	6963      	ldr	r3, [r4, #20]
   2207c:	9303      	str	r3, [sp, #12]
   2207e:	6923      	ldr	r3, [r4, #16]
   22080:	9302      	str	r3, [sp, #8]
   22082:	68e3      	ldr	r3, [r4, #12]
   22084:	9301      	str	r3, [sp, #4]
   22086:	68a3      	ldr	r3, [r4, #8]
   22088:	9300      	str	r3, [sp, #0]
   2208a:	e9d4 2300 	ldrd	r2, r3, [r4]
   2208e:	4631      	mov	r1, r6
   22090:	4628      	mov	r0, r5
   22092:	f7e0 ff5d 	bl	2f50 <print_formatted>
		break;
   22096:	e73b      	b.n	21f10 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   22098:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2209a:	930a      	str	r3, [sp, #40]	; 0x28
   2209c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2209e:	9309      	str	r3, [sp, #36]	; 0x24
   220a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   220a2:	9308      	str	r3, [sp, #32]
   220a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   220a6:	9307      	str	r3, [sp, #28]
   220a8:	6a23      	ldr	r3, [r4, #32]
   220aa:	9306      	str	r3, [sp, #24]
   220ac:	69e3      	ldr	r3, [r4, #28]
   220ae:	9305      	str	r3, [sp, #20]
   220b0:	69a3      	ldr	r3, [r4, #24]
   220b2:	9304      	str	r3, [sp, #16]
   220b4:	6963      	ldr	r3, [r4, #20]
   220b6:	9303      	str	r3, [sp, #12]
   220b8:	6923      	ldr	r3, [r4, #16]
   220ba:	9302      	str	r3, [sp, #8]
   220bc:	68e3      	ldr	r3, [r4, #12]
   220be:	9301      	str	r3, [sp, #4]
   220c0:	68a3      	ldr	r3, [r4, #8]
   220c2:	9300      	str	r3, [sp, #0]
   220c4:	e9d4 2300 	ldrd	r2, r3, [r4]
   220c8:	4631      	mov	r1, r6
   220ca:	4628      	mov	r0, r5
   220cc:	f7e0 ff40 	bl	2f50 <print_formatted>
		break;
   220d0:	e71e      	b.n	21f10 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   220d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   220d4:	930b      	str	r3, [sp, #44]	; 0x2c
   220d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   220d8:	930a      	str	r3, [sp, #40]	; 0x28
   220da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   220dc:	9309      	str	r3, [sp, #36]	; 0x24
   220de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   220e0:	9308      	str	r3, [sp, #32]
   220e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   220e4:	9307      	str	r3, [sp, #28]
   220e6:	6a23      	ldr	r3, [r4, #32]
   220e8:	9306      	str	r3, [sp, #24]
   220ea:	69e3      	ldr	r3, [r4, #28]
   220ec:	9305      	str	r3, [sp, #20]
   220ee:	69a3      	ldr	r3, [r4, #24]
   220f0:	9304      	str	r3, [sp, #16]
   220f2:	6963      	ldr	r3, [r4, #20]
   220f4:	9303      	str	r3, [sp, #12]
   220f6:	6923      	ldr	r3, [r4, #16]
   220f8:	9302      	str	r3, [sp, #8]
   220fa:	68e3      	ldr	r3, [r4, #12]
   220fc:	9301      	str	r3, [sp, #4]
   220fe:	68a3      	ldr	r3, [r4, #8]
   22100:	9300      	str	r3, [sp, #0]
   22102:	e9d4 2300 	ldrd	r2, r3, [r4]
   22106:	4631      	mov	r1, r6
   22108:	4628      	mov	r0, r5
   2210a:	f7e0 ff21 	bl	2f50 <print_formatted>
		break;
   2210e:	e6ff      	b.n	21f10 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   22110:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   22112:	930c      	str	r3, [sp, #48]	; 0x30
   22114:	6b63      	ldr	r3, [r4, #52]	; 0x34
   22116:	930b      	str	r3, [sp, #44]	; 0x2c
   22118:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2211a:	930a      	str	r3, [sp, #40]	; 0x28
   2211c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2211e:	9309      	str	r3, [sp, #36]	; 0x24
   22120:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22122:	9308      	str	r3, [sp, #32]
   22124:	6a63      	ldr	r3, [r4, #36]	; 0x24
   22126:	9307      	str	r3, [sp, #28]
   22128:	6a23      	ldr	r3, [r4, #32]
   2212a:	9306      	str	r3, [sp, #24]
   2212c:	69e3      	ldr	r3, [r4, #28]
   2212e:	9305      	str	r3, [sp, #20]
   22130:	69a3      	ldr	r3, [r4, #24]
   22132:	9304      	str	r3, [sp, #16]
   22134:	6963      	ldr	r3, [r4, #20]
   22136:	9303      	str	r3, [sp, #12]
   22138:	6923      	ldr	r3, [r4, #16]
   2213a:	9302      	str	r3, [sp, #8]
   2213c:	68e3      	ldr	r3, [r4, #12]
   2213e:	9301      	str	r3, [sp, #4]
   22140:	68a3      	ldr	r3, [r4, #8]
   22142:	9300      	str	r3, [sp, #0]
   22144:	e9d4 2300 	ldrd	r2, r3, [r4]
   22148:	4631      	mov	r1, r6
   2214a:	4628      	mov	r0, r5
   2214c:	f7e0 ff00 	bl	2f50 <print_formatted>
}
   22150:	e6de      	b.n	21f10 <std_print+0x78>

00022152 <log_output_flush>:
		     output->control_block->offset,
   22152:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   22154:	6881      	ldr	r1, [r0, #8]
{
   22156:	b510      	push	{r4, lr}
   22158:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   2215a:	e9d2 2300 	ldrd	r2, r3, [r2]
   2215e:	6800      	ldr	r0, [r0, #0]
   22160:	f7ff fe8d 	bl	21e7e <buffer_write>
	output->control_block->offset = 0;
   22164:	6863      	ldr	r3, [r4, #4]
   22166:	2200      	movs	r2, #0
   22168:	601a      	str	r2, [r3, #0]
}
   2216a:	bd10      	pop	{r4, pc}

0002216c <out_func>:
{
   2216c:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   2216e:	684b      	ldr	r3, [r1, #4]
   22170:	681a      	ldr	r2, [r3, #0]
   22172:	68cb      	ldr	r3, [r1, #12]
   22174:	429a      	cmp	r2, r3
{
   22176:	4605      	mov	r5, r0
   22178:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   2217a:	d102      	bne.n	22182 <out_func+0x16>
		log_output_flush(out_ctx);
   2217c:	4608      	mov	r0, r1
   2217e:	f7ff ffe8 	bl	22152 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   22182:	6863      	ldr	r3, [r4, #4]
   22184:	f3bf 8f5b 	dmb	ish
   22188:	e853 2f00 	ldrex	r2, [r3]
   2218c:	1c51      	adds	r1, r2, #1
   2218e:	e843 1000 	strex	r0, r1, [r3]
   22192:	2800      	cmp	r0, #0
   22194:	d1f8      	bne.n	22188 <out_func+0x1c>
   22196:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   2219a:	68a3      	ldr	r3, [r4, #8]
   2219c:	549d      	strb	r5, [r3, r2]
}
   2219e:	2000      	movs	r0, #0
   221a0:	bd38      	pop	{r3, r4, r5, pc}

000221a2 <z_impl_flash_write>:
{
   221a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const struct flash_driver_api *api =
   221a6:	6886      	ldr	r6, [r0, #8]
{
   221a8:	4699      	mov	r9, r3
	if (api->write_protection != NULL) {
   221aa:	68f3      	ldr	r3, [r6, #12]
{
   221ac:	4605      	mov	r5, r0
   221ae:	460f      	mov	r7, r1
   221b0:	4690      	mov	r8, r2
	if (api->write_protection != NULL) {
   221b2:	b95b      	cbnz	r3, 221cc <z_impl_flash_write+0x2a>
	rc = api->write(dev, offset, data, len);
   221b4:	6874      	ldr	r4, [r6, #4]
   221b6:	464b      	mov	r3, r9
   221b8:	4642      	mov	r2, r8
   221ba:	4639      	mov	r1, r7
   221bc:	4628      	mov	r0, r5
   221be:	47a0      	blx	r4
	if (api->write_protection != NULL) {
   221c0:	68f3      	ldr	r3, [r6, #12]
	rc = api->write(dev, offset, data, len);
   221c2:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
   221c4:	b943      	cbnz	r3, 221d8 <z_impl_flash_write+0x36>
}
   221c6:	4620      	mov	r0, r4
   221c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rc = api->write_protection(dev, false);
   221cc:	2100      	movs	r1, #0
   221ce:	4798      	blx	r3
		if (rc) {
   221d0:	4604      	mov	r4, r0
   221d2:	2800      	cmp	r0, #0
   221d4:	d0ee      	beq.n	221b4 <z_impl_flash_write+0x12>
   221d6:	e7f6      	b.n	221c6 <z_impl_flash_write+0x24>
		(void) api->write_protection(dev, true);
   221d8:	2101      	movs	r1, #1
   221da:	4628      	mov	r0, r5
   221dc:	4798      	blx	r3
   221de:	e7f2      	b.n	221c6 <z_impl_flash_write+0x24>

000221e0 <nvs_flash_rd>:
{
   221e0:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   221e2:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   221e4:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   221e6:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   221e8:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   221ea:	fa16 f181 	uxtah	r1, r6, r1
   221ee:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   221f2:	6884      	ldr	r4, [r0, #8]
   221f4:	6824      	ldr	r4, [r4, #0]
   221f6:	46a4      	mov	ip, r4
}
   221f8:	bc70      	pop	{r4, r5, r6}
   221fa:	4760      	bx	ip

000221fc <nvs_flash_block_cmp>:
{
   221fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22200:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   22202:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   22204:	681d      	ldr	r5, [r3, #0]
   22206:	426d      	negs	r5, r5
{
   22208:	b089      	sub	sp, #36	; 0x24
   2220a:	4681      	mov	r9, r0
   2220c:	460e      	mov	r6, r1
   2220e:	4617      	mov	r7, r2
	block_size =
   22210:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   22214:	b91c      	cbnz	r4, 2221e <nvs_flash_block_cmp+0x22>
	return 0;
   22216:	4620      	mov	r0, r4
}
   22218:	b009      	add	sp, #36	; 0x24
   2221a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   2221e:	42ac      	cmp	r4, r5
   22220:	46a0      	mov	r8, r4
   22222:	bf28      	it	cs
   22224:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   22226:	4643      	mov	r3, r8
   22228:	466a      	mov	r2, sp
   2222a:	4631      	mov	r1, r6
   2222c:	4648      	mov	r0, r9
   2222e:	f7ff ffd7 	bl	221e0 <nvs_flash_rd>
		if (rc) {
   22232:	2800      	cmp	r0, #0
   22234:	d1f0      	bne.n	22218 <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   22236:	4642      	mov	r2, r8
   22238:	4669      	mov	r1, sp
   2223a:	4638      	mov	r0, r7
   2223c:	f001 fda3 	bl	23d86 <memcmp>
		if (rc) {
   22240:	b920      	cbnz	r0, 2224c <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   22242:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   22246:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   22248:	4447      	add	r7, r8
   2224a:	e7e3      	b.n	22214 <nvs_flash_block_cmp+0x18>
			return 1;
   2224c:	2001      	movs	r0, #1
   2224e:	e7e3      	b.n	22218 <nvs_flash_block_cmp+0x1c>

00022250 <nvs_flash_cmp_const>:
{
   22250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22254:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   22256:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   22258:	681d      	ldr	r5, [r3, #0]
   2225a:	426d      	negs	r5, r5
{
   2225c:	b088      	sub	sp, #32
	block_size =
   2225e:	f005 0520 	and.w	r5, r5, #32
{
   22262:	4607      	mov	r7, r0
   22264:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   22266:	4668      	mov	r0, sp
{
   22268:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   2226a:	462a      	mov	r2, r5
   2226c:	f001 fda7 	bl	23dbe <memset>
	while (len) {
   22270:	b91c      	cbnz	r4, 2227a <nvs_flash_cmp_const+0x2a>
	return 0;
   22272:	4620      	mov	r0, r4
}
   22274:	b008      	add	sp, #32
   22276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   2227a:	42ac      	cmp	r4, r5
   2227c:	46a0      	mov	r8, r4
   2227e:	bf28      	it	cs
   22280:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   22282:	4643      	mov	r3, r8
   22284:	466a      	mov	r2, sp
   22286:	4631      	mov	r1, r6
   22288:	4638      	mov	r0, r7
   2228a:	f7ff ffb7 	bl	221fc <nvs_flash_block_cmp>
		if (rc) {
   2228e:	2800      	cmp	r0, #0
   22290:	d1f0      	bne.n	22274 <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   22292:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   22296:	4446      	add	r6, r8
   22298:	e7ea      	b.n	22270 <nvs_flash_cmp_const+0x20>

0002229a <nvs_flash_erase_sector>:
{
   2229a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2229e:	6803      	ldr	r3, [r0, #0]
   222a0:	f8b0 900c 	ldrh.w	r9, [r0, #12]
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   222a4:	6a86      	ldr	r6, [r0, #40]	; 0x28
	addr &= ADDR_SECT_MASK;
   222a6:	0c0f      	lsrs	r7, r1, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   222a8:	0c09      	lsrs	r1, r1, #16
{
   222aa:	4605      	mov	r5, r0
	addr &= ADDR_SECT_MASK;
   222ac:	043f      	lsls	r7, r7, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   222ae:	fb09 3a01 	mla	sl, r9, r1, r3
	const struct flash_driver_api *api =
   222b2:	f8d6 8008 	ldr.w	r8, [r6, #8]
	if (api->write_protection != NULL) {
   222b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
   222ba:	b9b3      	cbnz	r3, 222ea <nvs_flash_erase_sector+0x50>
	rc = api->erase(dev, offset, size);
   222bc:	f8d8 3008 	ldr.w	r3, [r8, #8]
   222c0:	464a      	mov	r2, r9
   222c2:	4651      	mov	r1, sl
   222c4:	4630      	mov	r0, r6
   222c6:	4798      	blx	r3
	if (api->write_protection != NULL) {
   222c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
	rc = api->erase(dev, offset, size);
   222cc:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
   222ce:	b9ab      	cbnz	r3, 222fc <nvs_flash_erase_sector+0x62>
	if (rc) {
   222d0:	b98c      	cbnz	r4, 222f6 <nvs_flash_erase_sector+0x5c>
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   222d2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   222d4:	89ab      	ldrh	r3, [r5, #12]
   222d6:	7912      	ldrb	r2, [r2, #4]
   222d8:	4639      	mov	r1, r7
   222da:	4628      	mov	r0, r5
   222dc:	f7ff ffb8 	bl	22250 <nvs_flash_cmp_const>
		rc = -ENXIO;
   222e0:	1e04      	subs	r4, r0, #0
   222e2:	bf18      	it	ne
   222e4:	f06f 0405 	mvnne.w	r4, #5
   222e8:	e005      	b.n	222f6 <nvs_flash_erase_sector+0x5c>
		rc = api->write_protection(dev, false);
   222ea:	2100      	movs	r1, #0
   222ec:	4630      	mov	r0, r6
   222ee:	4798      	blx	r3
		if (rc) {
   222f0:	4604      	mov	r4, r0
   222f2:	2800      	cmp	r0, #0
   222f4:	d0e2      	beq.n	222bc <nvs_flash_erase_sector+0x22>
}
   222f6:	4620      	mov	r0, r4
   222f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		(void) api->write_protection(dev, true);
   222fc:	2101      	movs	r1, #1
   222fe:	4630      	mov	r0, r6
   22300:	4798      	blx	r3
   22302:	e7e5      	b.n	222d0 <nvs_flash_erase_sector+0x36>

00022304 <nvs_ate_crc8_update>:
{
   22304:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   22306:	4601      	mov	r1, r0
{
   22308:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2230a:	2207      	movs	r2, #7
   2230c:	20ff      	movs	r0, #255	; 0xff
   2230e:	f7df fe29 	bl	1f64 <crc8_ccitt>
	entry->crc8 = crc8;
   22312:	71e0      	strb	r0, [r4, #7]
}
   22314:	bd10      	pop	{r4, pc}

00022316 <nvs_sector_advance.isra.0>:
	*addr += (1 << ADDR_SECT_SHIFT);
   22316:	680b      	ldr	r3, [r1, #0]
   22318:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   2231c:	0c1a      	lsrs	r2, r3, #16
   2231e:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   22322:	bf08      	it	eq
   22324:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   22328:	600b      	str	r3, [r1, #0]
}
   2232a:	4770      	bx	lr

0002232c <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   2232c:	7803      	ldrb	r3, [r0, #0]
   2232e:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   22330:	bf81      	itttt	hi
   22332:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
   22336:	18c9      	addhi	r1, r1, r3
   22338:	425b      	neghi	r3, r3
   2233a:	4019      	andhi	r1, r3
}
   2233c:	4608      	mov	r0, r1
   2233e:	4770      	bx	lr

00022340 <nvs_ate_valid>:
{
   22340:	b570      	push	{r4, r5, r6, lr}
   22342:	460c      	mov	r4, r1
   22344:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   22346:	2108      	movs	r1, #8
   22348:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2234a:	f7ff ffef 	bl	2232c <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2234e:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   22350:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   22352:	4621      	mov	r1, r4
   22354:	20ff      	movs	r0, #255	; 0xff
   22356:	f7df fe05 	bl	1f64 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   2235a:	79e3      	ldrb	r3, [r4, #7]
   2235c:	4283      	cmp	r3, r0
   2235e:	d107      	bne.n	22370 <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   22360:	89a8      	ldrh	r0, [r5, #12]
   22362:	8863      	ldrh	r3, [r4, #2]
   22364:	1b80      	subs	r0, r0, r6
	if ((nvs_ate_crc8_check(entry)) ||
   22366:	4283      	cmp	r3, r0
   22368:	bf2c      	ite	cs
   2236a:	2000      	movcs	r0, #0
   2236c:	2001      	movcc	r0, #1
}
   2236e:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   22370:	2000      	movs	r0, #0
   22372:	e7fc      	b.n	2236e <nvs_ate_valid+0x2e>

00022374 <nvs_close_ate_valid>:
{
   22374:	b538      	push	{r3, r4, r5, lr}
   22376:	4605      	mov	r5, r0
   22378:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   2237a:	f7ff ffe1 	bl	22340 <nvs_ate_valid>
   2237e:	b1a0      	cbz	r0, 223aa <nvs_close_ate_valid+0x36>
   22380:	88a0      	ldrh	r0, [r4, #4]
   22382:	b998      	cbnz	r0, 223ac <nvs_close_ate_valid+0x38>
   22384:	8822      	ldrh	r2, [r4, #0]
   22386:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2238a:	429a      	cmp	r2, r3
   2238c:	d10d      	bne.n	223aa <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2238e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   22390:	2108      	movs	r1, #8
   22392:	f7ff ffcb 	bl	2232c <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   22396:	8862      	ldrh	r2, [r4, #2]
   22398:	89ab      	ldrh	r3, [r5, #12]
   2239a:	1a9b      	subs	r3, r3, r2
   2239c:	fbb3 f2f0 	udiv	r2, r3, r0
   223a0:	fb02 3010 	mls	r0, r2, r0, r3
   223a4:	fab0 f080 	clz	r0, r0
   223a8:	0940      	lsrs	r0, r0, #5
}
   223aa:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   223ac:	2000      	movs	r0, #0
   223ae:	e7fc      	b.n	223aa <nvs_close_ate_valid+0x36>

000223b0 <nvs_flash_al_wrt.part.0>:
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   223b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   223b4:	8985      	ldrh	r5, [r0, #12]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   223b6:	4606      	mov	r6, r0
	offset += addr & ADDR_OFFS_MASK;
   223b8:	6800      	ldr	r0, [r0, #0]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   223ba:	461c      	mov	r4, r3
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   223bc:	0c0b      	lsrs	r3, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   223be:	fa10 f181 	uxtah	r1, r0, r1
   223c2:	fb03 1505 	mla	r5, r3, r5, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   223c6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   223c8:	681f      	ldr	r7, [r3, #0]
   223ca:	427f      	negs	r7, r7
	if (blen > 0) {
   223cc:	4027      	ands	r7, r4
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   223ce:	b088      	sub	sp, #32
   223d0:	4690      	mov	r8, r2
	if (blen > 0) {
   223d2:	d008      	beq.n	223e6 <nvs_flash_al_wrt.part.0+0x36>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   223d4:	6ab0      	ldr	r0, [r6, #40]	; 0x28
	return z_impl_flash_write(dev, offset, data, len);
   223d6:	463b      	mov	r3, r7
   223d8:	4629      	mov	r1, r5
   223da:	f7ff fee2 	bl	221a2 <z_impl_flash_write>
		if (rc) {
   223de:	b9b8      	cbnz	r0, 22410 <nvs_flash_al_wrt.part.0+0x60>
		len -= blen;
   223e0:	1be4      	subs	r4, r4, r7
		offset += blen;
   223e2:	443d      	add	r5, r7
		data8 += blen;
   223e4:	44b8      	add	r8, r7
	if (len) {
   223e6:	b1b4      	cbz	r4, 22416 <nvs_flash_al_wrt.part.0+0x66>
		memcpy(buf, data8, len);
   223e8:	4622      	mov	r2, r4
   223ea:	4641      	mov	r1, r8
   223ec:	4668      	mov	r0, sp
   223ee:	f001 fcdb 	bl	23da8 <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   223f2:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   223f4:	681a      	ldr	r2, [r3, #0]
   223f6:	7919      	ldrb	r1, [r3, #4]
   223f8:	1b12      	subs	r2, r2, r4
   223fa:	eb0d 0004 	add.w	r0, sp, r4
   223fe:	f001 fcde 	bl	23dbe <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   22402:	e9d6 030a 	ldrd	r0, r3, [r6, #40]	; 0x28
   22406:	681b      	ldr	r3, [r3, #0]
   22408:	466a      	mov	r2, sp
   2240a:	4629      	mov	r1, r5
   2240c:	f7ff fec9 	bl	221a2 <z_impl_flash_write>
}
   22410:	b008      	add	sp, #32
   22412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
end:
   22416:	4620      	mov	r0, r4
   22418:	e7fa      	b.n	22410 <nvs_flash_al_wrt.part.0+0x60>

0002241a <nvs_flash_data_wrt>:
{
   2241a:	b538      	push	{r3, r4, r5, lr}
   2241c:	4604      	mov	r4, r0
	if (!len) {
   2241e:	4615      	mov	r5, r2
   22420:	b12a      	cbz	r2, 2242e <nvs_flash_data_wrt+0x14>
   22422:	4613      	mov	r3, r2
   22424:	460a      	mov	r2, r1
   22426:	6881      	ldr	r1, [r0, #8]
   22428:	f7ff ffc2 	bl	223b0 <nvs_flash_al_wrt.part.0>
   2242c:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   2242e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   22430:	4629      	mov	r1, r5
   22432:	f7ff ff7b 	bl	2232c <nvs_al_size.isra.0>
   22436:	68a3      	ldr	r3, [r4, #8]
   22438:	4403      	add	r3, r0
   2243a:	60a3      	str	r3, [r4, #8]
}
   2243c:	4610      	mov	r0, r2
   2243e:	bd38      	pop	{r3, r4, r5, pc}

00022440 <nvs_flash_ate_wrt>:
{
   22440:	b510      	push	{r4, lr}
   22442:	460a      	mov	r2, r1
	if (!len) {
   22444:	2308      	movs	r3, #8
   22446:	6841      	ldr	r1, [r0, #4]
{
   22448:	4604      	mov	r4, r0
   2244a:	f7ff ffb1 	bl	223b0 <nvs_flash_al_wrt.part.0>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   2244e:	2108      	movs	r1, #8
   22450:	4602      	mov	r2, r0
   22452:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   22454:	f7ff ff6a 	bl	2232c <nvs_al_size.isra.0>
   22458:	6863      	ldr	r3, [r4, #4]
   2245a:	1a1b      	subs	r3, r3, r0
   2245c:	6063      	str	r3, [r4, #4]
}
   2245e:	4610      	mov	r0, r2
   22460:	bd10      	pop	{r4, pc}

00022462 <nvs_add_gc_done_ate>:
{
   22462:	b513      	push	{r0, r1, r4, lr}
	gc_done_ate.id = 0xffff;
   22464:	f64f 73ff 	movw	r3, #65535	; 0xffff
   22468:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   2246c:	2300      	movs	r3, #0
{
   2246e:	4604      	mov	r4, r0
	gc_done_ate.len = 0U;
   22470:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   22474:	6883      	ldr	r3, [r0, #8]
   22476:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   2247a:	4668      	mov	r0, sp
   2247c:	f7ff ff42 	bl	22304 <nvs_ate_crc8_update>
	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   22480:	4669      	mov	r1, sp
   22482:	4620      	mov	r0, r4
   22484:	f7ff ffdc 	bl	22440 <nvs_flash_ate_wrt>
}
   22488:	b002      	add	sp, #8
   2248a:	bd10      	pop	{r4, pc}

0002248c <nvs_prev_ate>:
{
   2248c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2248e:	4605      	mov	r5, r0
   22490:	460e      	mov	r6, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   22492:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   22494:	2108      	movs	r1, #8
   22496:	f7ff ff49 	bl	2232c <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2249a:	6831      	ldr	r1, [r6, #0]
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2249c:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2249e:	2308      	movs	r3, #8
   224a0:	4628      	mov	r0, r5
   224a2:	f7ff fe9d 	bl	221e0 <nvs_flash_rd>
	if (rc) {
   224a6:	4604      	mov	r4, r0
   224a8:	2800      	cmp	r0, #0
   224aa:	d138      	bne.n	2251e <nvs_prev_ate+0x92>
	*addr += ate_size;
   224ac:	6833      	ldr	r3, [r6, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   224ae:	89a8      	ldrh	r0, [r5, #12]
	*addr += ate_size;
   224b0:	443b      	add	r3, r7
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   224b2:	b29a      	uxth	r2, r3
   224b4:	1bc7      	subs	r7, r0, r7
   224b6:	42ba      	cmp	r2, r7
	*addr += ate_size;
   224b8:	6033      	str	r3, [r6, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   224ba:	d130      	bne.n	2251e <nvs_prev_ate+0x92>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   224bc:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   224be:	bf03      	ittte	eq
   224c0:	89e9      	ldrheq	r1, [r5, #14]
   224c2:	f101 31ff 	addeq.w	r1, r1, #4294967295	; 0xffffffff
   224c6:	eb03 4101 	addeq.w	r1, r3, r1, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
   224ca:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
   224ce:	6031      	str	r1, [r6, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   224d0:	2308      	movs	r3, #8
   224d2:	466a      	mov	r2, sp
   224d4:	4628      	mov	r0, r5
   224d6:	f7ff fe83 	bl	221e0 <nvs_flash_rd>
	if (rc) {
   224da:	4604      	mov	r4, r0
   224dc:	b9f8      	cbnz	r0, 2251e <nvs_prev_ate+0x92>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   224de:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   224e0:	466a      	mov	r2, sp
   224e2:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   224e4:	4603      	mov	r3, r0
		if (data8[i] != value) {
   224e6:	f812 0b01 	ldrb.w	r0, [r2], #1
   224ea:	4281      	cmp	r1, r0
   224ec:	d10c      	bne.n	22508 <nvs_prev_ate+0x7c>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   224ee:	3301      	adds	r3, #1
   224f0:	2b08      	cmp	r3, #8
   224f2:	d1f8      	bne.n	224e6 <nvs_prev_ate+0x5a>
		*addr = fs->ate_wra;
   224f4:	686b      	ldr	r3, [r5, #4]
   224f6:	e005      	b.n	22504 <nvs_prev_ate+0x78>
		(*addr) &= ADDR_SECT_MASK;
   224f8:	6833      	ldr	r3, [r6, #0]
		(*addr) += close_ate.offset;
   224fa:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   224fe:	0c1b      	lsrs	r3, r3, #16
   22500:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   22502:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   22504:	6033      	str	r3, [r6, #0]
		return 0;
   22506:	e00a      	b.n	2251e <nvs_prev_ate+0x92>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   22508:	4669      	mov	r1, sp
   2250a:	4628      	mov	r0, r5
   2250c:	f7ff ff32 	bl	22374 <nvs_close_ate_valid>
   22510:	2800      	cmp	r0, #0
   22512:	d1f1      	bne.n	224f8 <nvs_prev_ate+0x6c>
	return nvs_recover_last_ate(fs, addr);
   22514:	4631      	mov	r1, r6
   22516:	4628      	mov	r0, r5
   22518:	f7e0 ff90 	bl	343c <nvs_recover_last_ate>
   2251c:	4604      	mov	r4, r0
}
   2251e:	4620      	mov	r0, r4
   22520:	b003      	add	sp, #12
   22522:	bdf0      	pop	{r4, r5, r6, r7, pc}

00022524 <nvs_gc>:
{
   22524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22528:	4604      	mov	r4, r0
   2252a:	b093      	sub	sp, #76	; 0x4c
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2252c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2252e:	2108      	movs	r1, #8
   22530:	f7ff fefc 	bl	2232c <nvs_al_size.isra.0>
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   22534:	6863      	ldr	r3, [r4, #4]
   22536:	0c1b      	lsrs	r3, r3, #16
   22538:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2253a:	4605      	mov	r5, r0
	nvs_sector_advance(fs, &sec_addr);
   2253c:	a901      	add	r1, sp, #4
   2253e:	89e0      	ldrh	r0, [r4, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   22540:	9301      	str	r3, [sp, #4]
	nvs_sector_advance(fs, &sec_addr);
   22542:	f7ff fee8 	bl	22316 <nvs_sector_advance.isra.0>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   22546:	9b01      	ldr	r3, [sp, #4]
   22548:	89a1      	ldrh	r1, [r4, #12]
   2254a:	4419      	add	r1, r3
   2254c:	1b49      	subs	r1, r1, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2254e:	2308      	movs	r3, #8
   22550:	aa04      	add	r2, sp, #16
   22552:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
   22554:	9102      	str	r1, [sp, #8]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   22556:	f7ff fe43 	bl	221e0 <nvs_flash_rd>
	if (rc < 0) {
   2255a:	2800      	cmp	r0, #0
   2255c:	f2c0 8094 	blt.w	22688 <nvs_gc+0x164>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   22560:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   22562:	aa04      	add	r2, sp, #16
   22564:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   22566:	2300      	movs	r3, #0
		if (data8[i] != value) {
   22568:	f812 0b01 	ldrb.w	r0, [r2], #1
   2256c:	4281      	cmp	r1, r0
   2256e:	d17c      	bne.n	2266a <nvs_gc+0x146>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   22570:	3301      	adds	r3, #1
   22572:	2b08      	cmp	r3, #8
   22574:	d1f8      	bne.n	22568 <nvs_gc+0x44>
	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   22576:	68a0      	ldr	r0, [r4, #8]
   22578:	6863      	ldr	r3, [r4, #4]
   2257a:	4428      	add	r0, r5
   2257c:	4283      	cmp	r3, r0
   2257e:	d26e      	bcs.n	2265e <nvs_gc+0x13a>
	rc = nvs_flash_erase_sector(fs, sec_addr);
   22580:	9901      	ldr	r1, [sp, #4]
   22582:	4620      	mov	r0, r4
   22584:	f7ff fe89 	bl	2229a <nvs_flash_erase_sector>
	if (rc) {
   22588:	e07e      	b.n	22688 <nvs_gc+0x164>
		gc_addr &= ADDR_SECT_MASK;
   2258a:	9b02      	ldr	r3, [sp, #8]
		gc_addr += close_ate.offset;
   2258c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
		gc_addr &= ADDR_SECT_MASK;
   22590:	0c1b      	lsrs	r3, r3, #16
   22592:	041b      	lsls	r3, r3, #16
		gc_addr += close_ate.offset;
   22594:	4413      	add	r3, r2
   22596:	9302      	str	r3, [sp, #8]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   22598:	aa06      	add	r2, sp, #24
   2259a:	a902      	add	r1, sp, #8
   2259c:	4620      	mov	r0, r4
		gc_prev_addr = gc_addr;
   2259e:	f8dd a008 	ldr.w	sl, [sp, #8]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   225a2:	f7ff ff73 	bl	2248c <nvs_prev_ate>
		if (rc) {
   225a6:	2800      	cmp	r0, #0
   225a8:	d16e      	bne.n	22688 <nvs_gc+0x164>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   225aa:	a906      	add	r1, sp, #24
   225ac:	4620      	mov	r0, r4
   225ae:	f7ff fec7 	bl	22340 <nvs_ate_valid>
   225b2:	2800      	cmp	r0, #0
   225b4:	d034      	beq.n	22620 <nvs_gc+0xfc>
		wlk_addr = fs->ate_wra;
   225b6:	6863      	ldr	r3, [r4, #4]
   225b8:	9303      	str	r3, [sp, #12]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   225ba:	aa08      	add	r2, sp, #32
   225bc:	a903      	add	r1, sp, #12
   225be:	4620      	mov	r0, r4
			wlk_prev_addr = wlk_addr;
   225c0:	9e03      	ldr	r6, [sp, #12]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   225c2:	f7ff ff63 	bl	2248c <nvs_prev_ate>
			if (rc) {
   225c6:	2800      	cmp	r0, #0
   225c8:	d15e      	bne.n	22688 <nvs_gc+0x164>
			if ((wlk_ate.id == gc_ate.id) &&
   225ca:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   225ce:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   225d2:	429a      	cmp	r2, r3
   225d4:	d027      	beq.n	22626 <nvs_gc+0x102>
		} while (wlk_addr != fs->ate_wra);
   225d6:	6862      	ldr	r2, [r4, #4]
   225d8:	9b03      	ldr	r3, [sp, #12]
   225da:	429a      	cmp	r2, r3
   225dc:	d1ed      	bne.n	225ba <nvs_gc+0x96>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   225de:	4556      	cmp	r6, sl
   225e0:	d11e      	bne.n	22620 <nvs_gc+0xfc>
   225e2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   225e6:	b1db      	cbz	r3, 22620 <nvs_gc+0xfc>
			data_addr += gc_ate.offset;
   225e8:	f8bd 301a 	ldrh.w	r3, [sp, #26]
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   225ec:	ea4f 471a 	mov.w	r7, sl, lsr #16
   225f0:	043f      	lsls	r7, r7, #16
			data_addr += gc_ate.offset;
   225f2:	441f      	add	r7, r3
			nvs_ate_crc8_update(&gc_ate);
   225f4:	a806      	add	r0, sp, #24
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   225f6:	68a3      	ldr	r3, [r4, #8]
   225f8:	f8ad 301a 	strh.w	r3, [sp, #26]
			nvs_ate_crc8_update(&gc_ate);
   225fc:	f7ff fe82 	bl	22304 <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   22600:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   22602:	f8bd 801c 	ldrh.w	r8, [sp, #28]
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   22606:	681e      	ldr	r6, [r3, #0]
   22608:	4276      	negs	r6, r6
	block_size =
   2260a:	f006 0620 	and.w	r6, r6, #32
	while (len) {
   2260e:	f1b8 0f00 	cmp.w	r8, #0
   22612:	d10f      	bne.n	22634 <nvs_gc+0x110>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   22614:	a906      	add	r1, sp, #24
   22616:	4620      	mov	r0, r4
   22618:	f7ff ff12 	bl	22440 <nvs_flash_ate_wrt>
			if (rc) {
   2261c:	2800      	cmp	r0, #0
   2261e:	d133      	bne.n	22688 <nvs_gc+0x164>
	} while (gc_prev_addr != stop_addr);
   22620:	45ca      	cmp	sl, r9
   22622:	d1b9      	bne.n	22598 <nvs_gc+0x74>
gc_done:
   22624:	e7a7      	b.n	22576 <nvs_gc+0x52>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   22626:	a908      	add	r1, sp, #32
   22628:	4620      	mov	r0, r4
   2262a:	f7ff fe89 	bl	22340 <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   2262e:	2800      	cmp	r0, #0
   22630:	d0d1      	beq.n	225d6 <nvs_gc+0xb2>
   22632:	e7d4      	b.n	225de <nvs_gc+0xba>
		bytes_to_copy = MIN(block_size, len);
   22634:	4546      	cmp	r6, r8
   22636:	46b3      	mov	fp, r6
   22638:	bf28      	it	cs
   2263a:	46c3      	movcs	fp, r8
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   2263c:	465b      	mov	r3, fp
   2263e:	aa0a      	add	r2, sp, #40	; 0x28
   22640:	4639      	mov	r1, r7
   22642:	4620      	mov	r0, r4
   22644:	f7ff fdcc 	bl	221e0 <nvs_flash_rd>
		if (rc) {
   22648:	b9f0      	cbnz	r0, 22688 <nvs_gc+0x164>
		rc = nvs_flash_data_wrt(fs, buf, bytes_to_copy);
   2264a:	465a      	mov	r2, fp
   2264c:	a90a      	add	r1, sp, #40	; 0x28
   2264e:	4620      	mov	r0, r4
   22650:	f7ff fee3 	bl	2241a <nvs_flash_data_wrt>
		if (rc) {
   22654:	b9c0      	cbnz	r0, 22688 <nvs_gc+0x164>
		len -= bytes_to_copy;
   22656:	eba8 080b 	sub.w	r8, r8, fp
		addr += bytes_to_copy;
   2265a:	445f      	add	r7, fp
   2265c:	e7d7      	b.n	2260e <nvs_gc+0xea>
		rc = nvs_add_gc_done_ate(fs);
   2265e:	4620      	mov	r0, r4
   22660:	f7ff feff 	bl	22462 <nvs_add_gc_done_ate>
		if (rc) {
   22664:	2800      	cmp	r0, #0
   22666:	d08b      	beq.n	22580 <nvs_gc+0x5c>
   22668:	e00e      	b.n	22688 <nvs_gc+0x164>
	stop_addr = gc_addr - ate_size;
   2266a:	9b02      	ldr	r3, [sp, #8]
	if (nvs_close_ate_valid(fs, &close_ate)) {
   2266c:	a904      	add	r1, sp, #16
   2266e:	4620      	mov	r0, r4
	stop_addr = gc_addr - ate_size;
   22670:	eba3 0905 	sub.w	r9, r3, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
   22674:	f7ff fe7e 	bl	22374 <nvs_close_ate_valid>
   22678:	2800      	cmp	r0, #0
   2267a:	d186      	bne.n	2258a <nvs_gc+0x66>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   2267c:	a902      	add	r1, sp, #8
   2267e:	4620      	mov	r0, r4
   22680:	f7e0 fedc 	bl	343c <nvs_recover_last_ate>
		if (rc) {
   22684:	2800      	cmp	r0, #0
   22686:	d087      	beq.n	22598 <nvs_gc+0x74>
}
   22688:	b013      	add	sp, #76	; 0x4c
   2268a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002268e <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   2268e:	2300      	movs	r3, #0
   22690:	461a      	mov	r2, r3
   22692:	f7e1 b8e5 	b.w	3860 <nvs_write>

00022696 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   22696:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   22698:	2400      	movs	r4, #0
   2269a:	9400      	str	r4, [sp, #0]
   2269c:	f7e1 f9b4 	bl	3a08 <nvs_read_hist>
	return rc;
}
   226a0:	b002      	add	sp, #8
   226a2:	bd10      	pop	{r4, pc}

000226a4 <device_get_binding>:
   226a4:	f7fd b92c 	b.w	1f900 <z_impl_device_get_binding>

000226a8 <get_sectors_cb>:
{
   226a8:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   226aa:	6802      	ldr	r2, [r0, #0]
   226ac:	684c      	ldr	r4, [r1, #4]
   226ae:	42a2      	cmp	r2, r4
   226b0:	d316      	bcc.n	226e0 <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   226b2:	688b      	ldr	r3, [r1, #8]
   226b4:	4423      	add	r3, r4
   226b6:	429a      	cmp	r2, r3
   226b8:	d206      	bcs.n	226c8 <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   226ba:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   226be:	42ab      	cmp	r3, r5
   226c0:	d304      	bcc.n	226cc <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   226c2:	f06f 030b 	mvn.w	r3, #11
   226c6:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   226c8:	2000      	movs	r0, #0
   226ca:	e00a      	b.n	226e2 <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   226cc:	68cd      	ldr	r5, [r1, #12]
   226ce:	1b12      	subs	r2, r2, r4
   226d0:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
   226d4:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   226d8:	6842      	ldr	r2, [r0, #4]
   226da:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   226dc:	3301      	adds	r3, #1
   226de:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   226e0:	2001      	movs	r0, #1
}
   226e2:	bd70      	pop	{r4, r5, r6, pc}

000226e4 <settings_load>:
	return settings_load_subtree(NULL);
   226e4:	2000      	movs	r0, #0
   226e6:	f7e1 ba83 	b.w	3bf0 <settings_load_subtree>

000226ea <settings_delete>:
	return settings_save_one(name, NULL, 0);
   226ea:	2200      	movs	r2, #0
   226ec:	4611      	mov	r1, r2
   226ee:	f7e1 ba45 	b.w	3b7c <settings_save_one>

000226f2 <settings_name_steq>:
{
   226f2:	4603      	mov	r3, r0
   226f4:	b530      	push	{r4, r5, lr}
   226f6:	4608      	mov	r0, r1
	if (next) {
   226f8:	b10a      	cbz	r2, 226fe <settings_name_steq+0xc>
		*next = NULL;
   226fa:	2100      	movs	r1, #0
   226fc:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   226fe:	b163      	cbz	r3, 2271a <settings_name_steq+0x28>
   22700:	b190      	cbz	r0, 22728 <settings_name_steq+0x36>
   22702:	1e41      	subs	r1, r0, #1
   22704:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   22706:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   2270a:	4604      	mov	r4, r0
   2270c:	f810 3b01 	ldrb.w	r3, [r0], #1
   22710:	b15d      	cbz	r5, 2272a <settings_name_steq+0x38>
   22712:	429d      	cmp	r5, r3
   22714:	d101      	bne.n	2271a <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   22716:	2d3d      	cmp	r5, #61	; 0x3d
   22718:	d1f5      	bne.n	22706 <settings_name_steq+0x14>
	return 0;
   2271a:	2000      	movs	r0, #0
   2271c:	e004      	b.n	22728 <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   2271e:	2b3d      	cmp	r3, #61	; 0x3d
   22720:	d008      	beq.n	22734 <settings_name_steq+0x42>
   22722:	fab3 f083 	clz	r0, r3
   22726:	0940      	lsrs	r0, r0, #5
}
   22728:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   2272a:	2b2f      	cmp	r3, #47	; 0x2f
   2272c:	d1f7      	bne.n	2271e <settings_name_steq+0x2c>
		if (next) {
   2272e:	b10a      	cbz	r2, 22734 <settings_name_steq+0x42>
			*next = name + 1;
   22730:	3401      	adds	r4, #1
   22732:	6014      	str	r4, [r2, #0]
		return 1;
   22734:	2001      	movs	r0, #1
   22736:	e7f7      	b.n	22728 <settings_name_steq+0x36>

00022738 <settings_name_next>:
{
   22738:	b530      	push	{r4, r5, lr}
   2273a:	4603      	mov	r3, r0
	if (next) {
   2273c:	b109      	cbz	r1, 22742 <settings_name_next+0xa>
		*next = NULL;
   2273e:	2200      	movs	r2, #0
   22740:	600a      	str	r2, [r1, #0]
	if (!name) {
   22742:	b16b      	cbz	r3, 22760 <settings_name_next+0x28>
   22744:	461a      	mov	r2, r3
   22746:	4614      	mov	r4, r2
   22748:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   2274a:	f812 5b01 	ldrb.w	r5, [r2], #1
   2274e:	b135      	cbz	r5, 2275e <settings_name_next+0x26>
   22750:	2d3d      	cmp	r5, #61	; 0x3d
   22752:	d004      	beq.n	2275e <settings_name_next+0x26>
   22754:	2d2f      	cmp	r5, #47	; 0x2f
   22756:	d1f6      	bne.n	22746 <settings_name_next+0xe>
		if (next) {
   22758:	b109      	cbz	r1, 2275e <settings_name_next+0x26>
			*next = name + 1;
   2275a:	3401      	adds	r4, #1
   2275c:	600c      	str	r4, [r1, #0]
}
   2275e:	bd30      	pop	{r4, r5, pc}
		return 0;
   22760:	4618      	mov	r0, r3
   22762:	e7fc      	b.n	2275e <settings_name_next+0x26>

00022764 <settings_nvs_read_fn>:
{
   22764:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   22766:	4613      	mov	r3, r2
{
   22768:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   2276a:	460a      	mov	r2, r1
   2276c:	8881      	ldrh	r1, [r0, #4]
   2276e:	6800      	ldr	r0, [r0, #0]
   22770:	f7ff ff91 	bl	22696 <nvs_read>
}
   22774:	42a0      	cmp	r0, r4
   22776:	bfa8      	it	ge
   22778:	4620      	movge	r0, r4
   2277a:	bd10      	pop	{r4, pc}

0002277c <settings_nvs_save>:
{
   2277c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22780:	b097      	sub	sp, #92	; 0x5c
   22782:	4604      	mov	r4, r0
   22784:	9201      	str	r2, [sp, #4]
   22786:	469b      	mov	fp, r3
	if (!name) {
   22788:	4689      	mov	r9, r1
   2278a:	2900      	cmp	r1, #0
   2278c:	d06b      	beq.n	22866 <settings_nvs_save+0xea>
	delete = ((value == NULL) || (val_len == 0));
   2278e:	b1da      	cbz	r2, 227c8 <settings_nvs_save+0x4c>
   22790:	fabb f78b 	clz	r7, fp
   22794:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   22796:	8f25      	ldrh	r5, [r4, #56]	; 0x38
   22798:	3501      	adds	r5, #1
   2279a:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   2279c:	46a8      	mov	r8, r5
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   2279e:	f104 0a08 	add.w	sl, r4, #8
		name_id--;
   227a2:	1e6e      	subs	r6, r5, #1
   227a4:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   227a6:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   227aa:	d030      	beq.n	2280e <settings_nvs_save+0x92>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   227ac:	234a      	movs	r3, #74	; 0x4a
   227ae:	aa03      	add	r2, sp, #12
   227b0:	4631      	mov	r1, r6
   227b2:	4650      	mov	r0, sl
   227b4:	f7ff ff6f 	bl	22696 <nvs_read>
		if (rc < 0) {
   227b8:	2800      	cmp	r0, #0
   227ba:	da07      	bge.n	227cc <settings_nvs_save+0x50>
			if (rc == -ENOENT) {
   227bc:	f110 0f02 	cmn.w	r0, #2
   227c0:	bf08      	it	eq
   227c2:	46b0      	moveq	r8, r6
   227c4:	4635      	mov	r5, r6
   227c6:	e7ec      	b.n	227a2 <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   227c8:	2701      	movs	r7, #1
   227ca:	e7e4      	b.n	22796 <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   227cc:	f100 0358 	add.w	r3, r0, #88	; 0x58
   227d0:	eb0d 0003 	add.w	r0, sp, r3
   227d4:	2300      	movs	r3, #0
   227d6:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   227da:	a903      	add	r1, sp, #12
   227dc:	4648      	mov	r0, r9
   227de:	f001 fab5 	bl	23d4c <strcmp>
   227e2:	2800      	cmp	r0, #0
   227e4:	d1ee      	bne.n	227c4 <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   227e6:	2f00      	cmp	r7, #0
   227e8:	d03b      	beq.n	22862 <settings_nvs_save+0xe6>
   227ea:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   227ec:	42b3      	cmp	r3, r6
   227ee:	d142      	bne.n	22876 <settings_nvs_save+0xfa>
			cf->last_name_id--;
   227f0:	4622      	mov	r2, r4
   227f2:	1e73      	subs	r3, r6, #1
   227f4:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   227f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   227fc:	2302      	movs	r3, #2
   227fe:	4650      	mov	r0, sl
   22800:	f7e1 f82e 	bl	3860 <nvs_write>
			if (rc < 0) {
   22804:	2800      	cmp	r0, #0
   22806:	da36      	bge.n	22876 <settings_nvs_save+0xfa>
}
   22808:	b017      	add	sp, #92	; 0x5c
   2280a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   2280e:	bb6f      	cbnz	r7, 2286c <settings_nvs_save+0xf0>
	write_name = true;
   22810:	2701      	movs	r7, #1
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   22812:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   22816:	d02b      	beq.n	22870 <settings_nvs_save+0xf4>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   22818:	f104 0508 	add.w	r5, r4, #8
   2281c:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   22820:	9a01      	ldr	r2, [sp, #4]
   22822:	465b      	mov	r3, fp
   22824:	b289      	uxth	r1, r1
   22826:	4628      	mov	r0, r5
   22828:	f7e1 f81a 	bl	3860 <nvs_write>
	if (rc < 0) {
   2282c:	2800      	cmp	r0, #0
   2282e:	dbeb      	blt.n	22808 <settings_nvs_save+0x8c>
	if (write_name) {
   22830:	b157      	cbz	r7, 22848 <settings_nvs_save+0xcc>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   22832:	4648      	mov	r0, r9
   22834:	f001 fa7a 	bl	23d2c <strlen>
   22838:	464a      	mov	r2, r9
   2283a:	4603      	mov	r3, r0
   2283c:	4641      	mov	r1, r8
   2283e:	4628      	mov	r0, r5
   22840:	f7e1 f80e 	bl	3860 <nvs_write>
		if (rc < 0) {
   22844:	2800      	cmp	r0, #0
   22846:	dbdf      	blt.n	22808 <settings_nvs_save+0x8c>
	if (write_name_id > cf->last_name_id) {
   22848:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   2284a:	4543      	cmp	r3, r8
   2284c:	d220      	bcs.n	22890 <settings_nvs_save+0x114>
		cf->last_name_id = write_name_id;
   2284e:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   22850:	2302      	movs	r3, #2
		cf->last_name_id = write_name_id;
   22852:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   22856:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2285a:	4628      	mov	r0, r5
   2285c:	f7e1 f800 	bl	3860 <nvs_write>
   22860:	e016      	b.n	22890 <settings_nvs_save+0x114>
   22862:	46b0      	mov	r8, r6
   22864:	e7d5      	b.n	22812 <settings_nvs_save+0x96>
		return -EINVAL;
   22866:	f06f 0015 	mvn.w	r0, #21
   2286a:	e7cd      	b.n	22808 <settings_nvs_save+0x8c>
		return 0;
   2286c:	2000      	movs	r0, #0
   2286e:	e7cb      	b.n	22808 <settings_nvs_save+0x8c>
		return -ENOMEM;
   22870:	f06f 000b 	mvn.w	r0, #11
   22874:	e7c8      	b.n	22808 <settings_nvs_save+0x8c>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   22876:	4631      	mov	r1, r6
   22878:	4650      	mov	r0, sl
   2287a:	f7ff ff08 	bl	2268e <nvs_delete>
			if (rc >= 0) {
   2287e:	2800      	cmp	r0, #0
   22880:	dbc2      	blt.n	22808 <settings_nvs_save+0x8c>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   22882:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   22886:	313f      	adds	r1, #63	; 0x3f
   22888:	b289      	uxth	r1, r1
   2288a:	4650      	mov	r0, sl
   2288c:	f7ff feff 	bl	2268e <nvs_delete>
	if (rc < 0) {
   22890:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   22894:	e7b8      	b.n	22808 <settings_nvs_save+0x8c>

00022896 <settings_nvs_backend_init>:
{
   22896:	b573      	push	{r0, r1, r4, r5, r6, lr}
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   22898:	f100 0608 	add.w	r6, r0, #8
   2289c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
{
   2289e:	4604      	mov	r4, r0
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   228a0:	4630      	mov	r0, r6
   228a2:	f7e0 fdfd 	bl	34a0 <nvs_init>
	if (rc) {
   228a6:	4605      	mov	r5, r0
   228a8:	b970      	cbnz	r0, 228c8 <settings_nvs_backend_init+0x32>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   228aa:	2302      	movs	r3, #2
   228ac:	f10d 0206 	add.w	r2, sp, #6
   228b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   228b4:	4630      	mov	r0, r6
   228b6:	f7ff feee 	bl	22696 <nvs_read>
	if (rc < 0) {
   228ba:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   228bc:	bfac      	ite	ge
   228be:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
		cf->last_name_id = NVS_NAMECNT_ID;
   228c2:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
		cf->last_name_id = last_name_id;
   228c6:	8723      	strh	r3, [r4, #56]	; 0x38
}
   228c8:	4628      	mov	r0, r5
   228ca:	b002      	add	sp, #8
   228cc:	bd70      	pop	{r4, r5, r6, pc}

000228ce <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   228ce:	2200      	movs	r2, #0
   228d0:	e9c0 2200 	strd	r2, r2, [r0]
   228d4:	6082      	str	r2, [r0, #8]
}
   228d6:	4770      	bx	lr

000228d8 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   228d8:	b538      	push	{r3, r4, r5, lr}
   228da:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   228dc:	42ab      	cmp	r3, r5
{
   228de:	4611      	mov	r1, r2
   228e0:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   228e2:	d804      	bhi.n	228ee <_copy+0x16>
		(void)memcpy(to, from, from_len);
   228e4:	461a      	mov	r2, r3
   228e6:	f001 fa5f 	bl	23da8 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   228ea:	4620      	mov	r0, r4
   228ec:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   228ee:	2400      	movs	r4, #0
   228f0:	e7fb      	b.n	228ea <_copy+0x12>

000228f2 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   228f2:	f001 ba64 	b.w	23dbe <memset>

000228f6 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   228f6:	09c3      	lsrs	r3, r0, #7
   228f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   228fc:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   22900:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   22904:	b2c0      	uxtb	r0, r0
   22906:	4770      	bx	lr

00022908 <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   22908:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2290c:	4606      	mov	r6, r0
   2290e:	b0a9      	sub	sp, #164	; 0xa4
   22910:	4688      	mov	r8, r1
   22912:	4614      	mov	r4, r2
   22914:	2740      	movs	r7, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   22916:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   2291a:	f7e1 fbd9 	bl	40d0 <uECC_get_rng>
		if (!rng_function ||
   2291e:	4603      	mov	r3, r0
   22920:	2800      	cmp	r0, #0
   22922:	d03e      	beq.n	229a2 <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   22924:	2140      	movs	r1, #64	; 0x40
   22926:	a808      	add	r0, sp, #32
   22928:	4798      	blx	r3
		if (!rng_function ||
   2292a:	b3d0      	cbz	r0, 229a2 <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   2292c:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   22930:	f112 031f 	adds.w	r3, r2, #31
   22934:	bf48      	it	mi
   22936:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   2293a:	466d      	mov	r5, sp
   2293c:	464a      	mov	r2, r9
   2293e:	a908      	add	r1, sp, #32
   22940:	4628      	mov	r0, r5
   22942:	f343 1347 	sbfx	r3, r3, #5, #8
   22946:	f000 f9fa 	bl	22d3e <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   2294a:	4622      	mov	r2, r4
   2294c:	4629      	mov	r1, r5
   2294e:	a818      	add	r0, sp, #96	; 0x60
   22950:	f000 fe0f 	bl	23572 <EccPoint_compute_public_key>
   22954:	b318      	cbz	r0, 2299e <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   22956:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   2295a:	1dd9      	adds	r1, r3, #7
   2295c:	bf48      	it	mi
   2295e:	f103 010e 	addmi.w	r1, r3, #14
   22962:	462a      	mov	r2, r5
   22964:	4640      	mov	r0, r8
   22966:	10c9      	asrs	r1, r1, #3
   22968:	f000 fe2b 	bl	235c2 <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   2296c:	f994 1001 	ldrsb.w	r1, [r4, #1]
   22970:	aa18      	add	r2, sp, #96	; 0x60
   22972:	4630      	mov	r0, r6
   22974:	f000 fe25 	bl	235c2 <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   22978:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   2297c:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   22980:	ab18      	add	r3, sp, #96	; 0x60
   22982:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   22986:	1870      	adds	r0, r6, r1
   22988:	f000 fe1b 	bl	235c2 <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   2298c:	2220      	movs	r2, #32
   2298e:	2100      	movs	r1, #0
   22990:	4628      	mov	r0, r5
   22992:	f001 fa14 	bl	23dbe <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   22996:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   22998:	b029      	add	sp, #164	; 0xa4
   2299a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   2299e:	3f01      	subs	r7, #1
   229a0:	d1bb      	bne.n	2291a <uECC_make_key+0x12>
        		return 0;
   229a2:	2000      	movs	r0, #0
   229a4:	e7f8      	b.n	22998 <uECC_make_key+0x90>

000229a6 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   229a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   229aa:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   229ac:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   229b0:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   229b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   229b8:	b0a4      	sub	sp, #144	; 0x90
   229ba:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   229bc:	1dda      	adds	r2, r3, #7
   229be:	bf48      	it	mi
   229c0:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   229c4:	ad04      	add	r5, sp, #16
{
   229c6:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   229c8:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   229ca:	4628      	mov	r0, r5
   229cc:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   229ce:	9502      	str	r5, [sp, #8]
   229d0:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   229d2:	f000 fe0a 	bl	235ea <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   229d6:	463a      	mov	r2, r7
   229d8:	4649      	mov	r1, r9
   229da:	a814      	add	r0, sp, #80	; 0x50
   229dc:	f000 fe05 	bl	235ea <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   229e0:	ab14      	add	r3, sp, #80	; 0x50
   229e2:	eb09 0107 	add.w	r1, r9, r7
   229e6:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   229ea:	463a      	mov	r2, r7
   229ec:	f000 fdfd 	bl	235ea <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   229f0:	4623      	mov	r3, r4
   229f2:	4632      	mov	r2, r6
   229f4:	4629      	mov	r1, r5
   229f6:	4628      	mov	r0, r5
   229f8:	f000 fd8f 	bl	2351a <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   229fc:	fab0 f380 	clz	r3, r0
   22a00:	9401      	str	r4, [sp, #4]
   22a02:	aa24      	add	r2, sp, #144	; 0x90
   22a04:	095b      	lsrs	r3, r3, #5
   22a06:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   22a0a:	8863      	ldrh	r3, [r4, #2]
   22a0c:	3301      	adds	r3, #1
   22a0e:	b21b      	sxth	r3, r3
   22a10:	9300      	str	r3, [sp, #0]
   22a12:	f851 2c88 	ldr.w	r2, [r1, #-136]
   22a16:	a914      	add	r1, sp, #80	; 0x50
   22a18:	2300      	movs	r3, #0
   22a1a:	4608      	mov	r0, r1
   22a1c:	f000 fcb0 	bl	23380 <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   22a20:	aa14      	add	r2, sp, #80	; 0x50
   22a22:	4639      	mov	r1, r7
   22a24:	4640      	mov	r0, r8
   22a26:	f000 fdcc 	bl	235c2 <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   22a2a:	4621      	mov	r1, r4
   22a2c:	a814      	add	r0, sp, #80	; 0x50
   22a2e:	f000 fc1c 	bl	2326a <EccPoint_isZero>
   22a32:	af02      	add	r7, sp, #8
   22a34:	4604      	mov	r4, r0
   22a36:	2208      	movs	r2, #8
   22a38:	2100      	movs	r1, #0
   22a3a:	4638      	mov	r0, r7
   22a3c:	f001 f9bf 	bl	23dbe <memset>
   22a40:	2220      	movs	r2, #32
   22a42:	2100      	movs	r1, #0
   22a44:	4630      	mov	r0, r6
   22a46:	f001 f9ba 	bl	23dbe <memset>
   22a4a:	2220      	movs	r2, #32
   22a4c:	2100      	movs	r1, #0
   22a4e:	4628      	mov	r0, r5
   22a50:	f001 f9b5 	bl	23dbe <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   22a54:	fab4 f084 	clz	r0, r4
   22a58:	0940      	lsrs	r0, r0, #5
   22a5a:	b024      	add	sp, #144	; 0x90
   22a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00022a60 <uECC_vli_add>:
{
   22a60:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   22a62:	2400      	movs	r4, #0
{
   22a64:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   22a66:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   22a68:	b265      	sxtb	r5, r4
   22a6a:	42ab      	cmp	r3, r5
   22a6c:	dc00      	bgt.n	22a70 <uECC_vli_add+0x10>
}
   22a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   22a70:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   22a74:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   22a78:	443d      	add	r5, r7
   22a7a:	4405      	add	r5, r0
	return (p_true*(cond)) | (p_false*(!cond));
   22a7c:	42af      	cmp	r7, r5
   22a7e:	f000 0001 	and.w	r0, r0, #1
   22a82:	bf18      	it	ne
   22a84:	2000      	movne	r0, #0
		result[i] = sum;
   22a86:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   22a8a:	bf88      	it	hi
   22a8c:	f040 0001 	orrhi.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   22a90:	3401      	adds	r4, #1
   22a92:	e7e9      	b.n	22a68 <uECC_vli_add+0x8>

00022a94 <uECC_vli_rshift1>:
	vli += num_words;
   22a94:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   22a98:	2300      	movs	r3, #0
	while (vli-- > end) {
   22a9a:	4288      	cmp	r0, r1
   22a9c:	d300      	bcc.n	22aa0 <uECC_vli_rshift1+0xc>
}
   22a9e:	4770      	bx	lr
		uECC_word_t temp = *vli;
   22aa0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   22aa4:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   22aa8:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   22aaa:	07d3      	lsls	r3, r2, #31
   22aac:	e7f5      	b.n	22a9a <uECC_vli_rshift1+0x6>

00022aae <vli_modInv_update>:
	if (!EVEN(uv)) {
   22aae:	6803      	ldr	r3, [r0, #0]
{
   22ab0:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   22ab2:	f013 0601 	ands.w	r6, r3, #1
{
   22ab6:	4605      	mov	r5, r0
   22ab8:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   22aba:	d005      	beq.n	22ac8 <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   22abc:	4613      	mov	r3, r2
   22abe:	460a      	mov	r2, r1
   22ac0:	4601      	mov	r1, r0
   22ac2:	f7ff ffcd 	bl	22a60 <uECC_vli_add>
   22ac6:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   22ac8:	4621      	mov	r1, r4
   22aca:	4628      	mov	r0, r5
   22acc:	f7ff ffe2 	bl	22a94 <uECC_vli_rshift1>
	if (carry) {
   22ad0:	b146      	cbz	r6, 22ae4 <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   22ad2:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   22ad6:	3a01      	subs	r2, #1
   22ad8:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   22adc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   22ae0:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   22ae4:	bd70      	pop	{r4, r5, r6, pc}

00022ae6 <uECC_vli_mult>:
	for (k = 0; k < num_words; ++k) {
   22ae6:	f04f 0c00 	mov.w	ip, #0
{
   22aea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uECC_word_t r1 = 0;
   22aee:	4665      	mov	r5, ip
	uECC_word_t r0 = 0;
   22af0:	4664      	mov	r4, ip
	for (k = 0; k < num_words; ++k) {
   22af2:	fa4f f98c 	sxtb.w	r9, ip
   22af6:	454b      	cmp	r3, r9
   22af8:	dc16      	bgt.n	22b28 <uECC_vli_mult+0x42>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   22afa:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   22afe:	eb06 0643 	add.w	r6, r6, r3, lsl #1
   22b02:	9600      	str	r6, [sp, #0]
   22b04:	f04f 0800 	mov.w	r8, #0
   22b08:	9f00      	ldr	r7, [sp, #0]
   22b0a:	fa53 fe88 	uxtab	lr, r3, r8
   22b0e:	fa4f fe8e 	sxtb.w	lr, lr
   22b12:	45be      	cmp	lr, r7
   22b14:	fa5f f688 	uxtb.w	r6, r8
   22b18:	db26      	blt.n	22b68 <uECC_vli_mult+0x82>
	result[num_words * 2 - 1] = r0;
   22b1a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   22b1e:	f840 4c04 	str.w	r4, [r0, #-4]
}
   22b22:	b003      	add	sp, #12
   22b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (k = 0; k < num_words; ++k) {
   22b28:	f04f 0e00 	mov.w	lr, #0
   22b2c:	eb02 0a8c 	add.w	sl, r2, ip, lsl #2
   22b30:	46f0      	mov	r8, lr
	uECC_dword_t p = (uECC_dword_t)a * b;
   22b32:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   22b36:	f85a 6904 	ldr.w	r6, [sl], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   22b3a:	fba6 6707 	umull	r6, r7, r6, r7
   22b3e:	1934      	adds	r4, r6, r4
		for (i = 0; i <= k; ++i) {
   22b40:	f10e 0e01 	add.w	lr, lr, #1
   22b44:	417d      	adcs	r5, r7
   22b46:	fa4f f68e 	sxtb.w	r6, lr
   22b4a:	f04f 0b00 	mov.w	fp, #0
   22b4e:	bf28      	it	cs
   22b50:	f04f 0b01 	movcs.w	fp, #1
   22b54:	454e      	cmp	r6, r9
	*r2 += (r01 < p);
   22b56:	44d8      	add	r8, fp
		for (i = 0; i <= k; ++i) {
   22b58:	ddeb      	ble.n	22b32 <uECC_vli_mult+0x4c>
		result[k] = r0;
   22b5a:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   22b5e:	462c      	mov	r4, r5
   22b60:	f10c 0c01 	add.w	ip, ip, #1
	*r2 += (r01 < p);
   22b64:	4645      	mov	r5, r8
   22b66:	e7c4      	b.n	22af2 <uECC_vli_mult+0xc>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   22b68:	3601      	adds	r6, #1
   22b6a:	fa4f fc86 	sxtb.w	ip, r6
   22b6e:	ebae 0a0c 	sub.w	sl, lr, ip
   22b72:	46a9      	mov	r9, r5
   22b74:	eb01 068c 	add.w	r6, r1, ip, lsl #2
   22b78:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
   22b7c:	2500      	movs	r5, #0
   22b7e:	459c      	cmp	ip, r3
   22b80:	db05      	blt.n	22b8e <uECC_vli_mult+0xa8>
		result[k] = r0;
   22b82:	f840 402e 	str.w	r4, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   22b86:	f108 0801 	add.w	r8, r8, #1
		result[k] = r0;
   22b8a:	464c      	mov	r4, r9
   22b8c:	e7bc      	b.n	22b08 <uECC_vli_mult+0x22>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   22b8e:	f856 bb04 	ldr.w	fp, [r6], #4
   22b92:	f85a 7904 	ldr.w	r7, [sl], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   22b96:	fbab 7b07 	umull	r7, fp, fp, r7
   22b9a:	f8cd b004 	str.w	fp, [sp, #4]
   22b9e:	193c      	adds	r4, r7, r4
   22ba0:	9f01      	ldr	r7, [sp, #4]
   22ba2:	eb57 0909 	adcs.w	r9, r7, r9
   22ba6:	f04f 0b00 	mov.w	fp, #0
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   22baa:	f10c 0c01 	add.w	ip, ip, #1
   22bae:	bf28      	it	cs
   22bb0:	f04f 0b01 	movcs.w	fp, #1
	*r2 += (r01 < p);
   22bb4:	445d      	add	r5, fp
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   22bb6:	fa4f fc8c 	sxtb.w	ip, ip
   22bba:	e7e0      	b.n	22b7e <uECC_vli_mult+0x98>

00022bbc <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   22bbc:	2300      	movs	r3, #0
{
   22bbe:	b510      	push	{r4, lr}
		 vli[i] = 0;
   22bc0:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   22bc2:	b25a      	sxtb	r2, r3
   22bc4:	4291      	cmp	r1, r2
   22bc6:	dc00      	bgt.n	22bca <uECC_vli_clear+0xe>
}
   22bc8:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   22bca:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   22bce:	3301      	adds	r3, #1
   22bd0:	e7f7      	b.n	22bc2 <uECC_vli_clear+0x6>

00022bd2 <uECC_vli_isZero>:
{
   22bd2:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   22bd4:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   22bd6:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   22bd8:	b25c      	sxtb	r4, r3
   22bda:	42a1      	cmp	r1, r4
   22bdc:	dc03      	bgt.n	22be6 <uECC_vli_isZero+0x14>
}
   22bde:	fab2 f082 	clz	r0, r2
   22be2:	0940      	lsrs	r0, r0, #5
   22be4:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   22be6:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   22bea:	3301      	adds	r3, #1
   22bec:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   22bee:	e7f3      	b.n	22bd8 <uECC_vli_isZero+0x6>

00022bf0 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   22bf0:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   22bf2:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   22bf4:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   22bf8:	f001 011f 	and.w	r1, r1, #31
   22bfc:	fa03 f101 	lsl.w	r1, r3, r1
}
   22c00:	4008      	ands	r0, r1
   22c02:	4770      	bx	lr

00022c04 <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   22c04:	3901      	subs	r1, #1
   22c06:	b24b      	sxtb	r3, r1
{
   22c08:	4602      	mov	r2, r0
   22c0a:	eb00 0183 	add.w	r1, r0, r3, lsl #2
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   22c0e:	2b00      	cmp	r3, #0
   22c10:	da03      	bge.n	22c1a <uECC_vli_numBits+0x16>
	return (i + 1);
   22c12:	3301      	adds	r3, #1
   22c14:	b258      	sxtb	r0, r3
	if (num_digits == 0) {
   22c16:	b938      	cbnz	r0, 22c28 <uECC_vli_numBits+0x24>
   22c18:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   22c1a:	f851 0904 	ldr.w	r0, [r1], #-4
   22c1e:	2800      	cmp	r0, #0
   22c20:	d1f7      	bne.n	22c12 <uECC_vli_numBits+0xe>
   22c22:	3b01      	subs	r3, #1
   22c24:	b25b      	sxtb	r3, r3
   22c26:	e7f2      	b.n	22c0e <uECC_vli_numBits+0xa>
	digit = vli[num_digits - 1];
   22c28:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   22c2c:	3b01      	subs	r3, #1
   22c2e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	for (i = 0; digit; ++i) {
   22c32:	2300      	movs	r3, #0
   22c34:	b922      	cbnz	r2, 22c40 <uECC_vli_numBits+0x3c>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   22c36:	3801      	subs	r0, #1
   22c38:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   22c3c:	b200      	sxth	r0, r0
}
   22c3e:	4770      	bx	lr
		digit >>= 1;
   22c40:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   22c42:	3301      	adds	r3, #1
   22c44:	e7f6      	b.n	22c34 <uECC_vli_numBits+0x30>

00022c46 <uECC_vli_set>:
{
   22c46:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   22c48:	2300      	movs	r3, #0
   22c4a:	b25c      	sxtb	r4, r3
   22c4c:	42a2      	cmp	r2, r4
   22c4e:	dc00      	bgt.n	22c52 <uECC_vli_set+0xc>
}
   22c50:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   22c52:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   22c56:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   22c5a:	3301      	adds	r3, #1
   22c5c:	e7f5      	b.n	22c4a <uECC_vli_set+0x4>

00022c5e <uECC_vli_cmp_unsafe>:
{
   22c5e:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   22c60:	3a01      	subs	r2, #1
   22c62:	b253      	sxtb	r3, r2
   22c64:	009a      	lsls	r2, r3, #2
   22c66:	2b00      	cmp	r3, #0
   22c68:	da01      	bge.n	22c6e <uECC_vli_cmp_unsafe+0x10>
	return 0;
   22c6a:	2000      	movs	r0, #0
}
   22c6c:	bd30      	pop	{r4, r5, pc}
		if (left[i] > right[i]) {
   22c6e:	5885      	ldr	r5, [r0, r2]
   22c70:	588c      	ldr	r4, [r1, r2]
   22c72:	42a5      	cmp	r5, r4
   22c74:	d805      	bhi.n	22c82 <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
   22c76:	f1a2 0204 	sub.w	r2, r2, #4
   22c7a:	d304      	bcc.n	22c86 <uECC_vli_cmp_unsafe+0x28>
	for (i = num_words - 1; i >= 0; --i) {
   22c7c:	3b01      	subs	r3, #1
   22c7e:	b25b      	sxtb	r3, r3
   22c80:	e7f1      	b.n	22c66 <uECC_vli_cmp_unsafe+0x8>
			return 1;
   22c82:	2001      	movs	r0, #1
   22c84:	e7f2      	b.n	22c6c <uECC_vli_cmp_unsafe+0xe>
			return -1;
   22c86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22c8a:	e7ef      	b.n	22c6c <uECC_vli_cmp_unsafe+0xe>

00022c8c <uECC_vli_equal>:
	for (i = num_words - 1; i >= 0; --i) {
   22c8c:	3a01      	subs	r2, #1
   22c8e:	b253      	sxtb	r3, r2
{
   22c90:	b570      	push	{r4, r5, r6, lr}
   22c92:	009a      	lsls	r2, r3, #2
	uECC_word_t diff = 0;
   22c94:	2400      	movs	r4, #0
	for (i = num_words - 1; i >= 0; --i) {
   22c96:	2b00      	cmp	r3, #0
   22c98:	da03      	bge.n	22ca2 <uECC_vli_equal+0x16>
}
   22c9a:	1e20      	subs	r0, r4, #0
   22c9c:	bf18      	it	ne
   22c9e:	2001      	movne	r0, #1
   22ca0:	bd70      	pop	{r4, r5, r6, pc}
		diff |= (left[i] ^ right[i]);
   22ca2:	5885      	ldr	r5, [r0, r2]
   22ca4:	588e      	ldr	r6, [r1, r2]
	for (i = num_words - 1; i >= 0; --i) {
   22ca6:	3b01      	subs	r3, #1
		diff |= (left[i] ^ right[i]);
   22ca8:	4075      	eors	r5, r6
   22caa:	432c      	orrs	r4, r5
	for (i = num_words - 1; i >= 0; --i) {
   22cac:	b25b      	sxtb	r3, r3
   22cae:	3a04      	subs	r2, #4
   22cb0:	e7f1      	b.n	22c96 <uECC_vli_equal+0xa>

00022cb2 <uECC_vli_sub>:
{
   22cb2:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   22cb4:	2400      	movs	r4, #0
{
   22cb6:	4606      	mov	r6, r0
   22cb8:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   22cba:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   22cbc:	b265      	sxtb	r5, r4
   22cbe:	4565      	cmp	r5, ip
   22cc0:	db00      	blt.n	22cc4 <uECC_vli_sub+0x12>
}
   22cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   22cc4:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   22cc8:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   22ccc:	1a3d      	subs	r5, r7, r0
   22cce:	1aed      	subs	r5, r5, r3
	return (p_true*(cond)) | (p_false*(!cond));
   22cd0:	42af      	cmp	r7, r5
   22cd2:	f000 0001 	and.w	r0, r0, #1
   22cd6:	bf18      	it	ne
   22cd8:	2000      	movne	r0, #0
		result[i] = diff;
   22cda:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   22cde:	bf38      	it	cc
   22ce0:	f040 0001 	orrcc.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   22ce4:	3401      	adds	r4, #1
   22ce6:	e7e9      	b.n	22cbc <uECC_vli_sub+0xa>

00022ce8 <uECC_vli_modAdd>:
{
   22ce8:	b570      	push	{r4, r5, r6, lr}
   22cea:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   22cee:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   22cf0:	4633      	mov	r3, r6
{
   22cf2:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   22cf4:	f7ff feb4 	bl	22a60 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   22cf8:	b930      	cbnz	r0, 22d08 <uECC_vli_modAdd+0x20>
   22cfa:	4632      	mov	r2, r6
   22cfc:	4621      	mov	r1, r4
   22cfe:	4628      	mov	r0, r5
   22d00:	f7ff ffad 	bl	22c5e <uECC_vli_cmp_unsafe>
   22d04:	2801      	cmp	r0, #1
   22d06:	d007      	beq.n	22d18 <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   22d08:	4633      	mov	r3, r6
   22d0a:	462a      	mov	r2, r5
   22d0c:	4621      	mov	r1, r4
   22d0e:	4620      	mov	r0, r4
}
   22d10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   22d14:	f7ff bfcd 	b.w	22cb2 <uECC_vli_sub>
}
   22d18:	bd70      	pop	{r4, r5, r6, pc}

00022d1a <uECC_vli_modSub>:
{
   22d1a:	b570      	push	{r4, r5, r6, lr}
   22d1c:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   22d20:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   22d22:	4633      	mov	r3, r6
{
   22d24:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   22d26:	f7ff ffc4 	bl	22cb2 <uECC_vli_sub>
	if (l_borrow) {
   22d2a:	b138      	cbz	r0, 22d3c <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   22d2c:	4633      	mov	r3, r6
   22d2e:	462a      	mov	r2, r5
   22d30:	4621      	mov	r1, r4
   22d32:	4620      	mov	r0, r4
}
   22d34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   22d38:	f7ff be92 	b.w	22a60 <uECC_vli_add>
}
   22d3c:	bd70      	pop	{r4, r5, r6, pc}

00022d3e <uECC_vli_mmod>:
{
   22d3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22d42:	b0a5      	sub	sp, #148	; 0x94
   22d44:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   22d46:	ab14      	add	r3, sp, #80	; 0x50
   22d48:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   22d4c:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   22d4e:	4629      	mov	r1, r5
   22d50:	4610      	mov	r0, r2
{
   22d52:	4617      	mov	r7, r2
			   uECC_vli_numBits(mod, num_words);
   22d54:	f7ff ff56 	bl	22c04 <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   22d58:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   22d5c:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   22d5e:	2c00      	cmp	r4, #0
   22d60:	4621      	mov	r1, r4
   22d62:	bfb8      	it	lt
   22d64:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   22d68:	4263      	negs	r3, r4
   22d6a:	f003 031f 	and.w	r3, r3, #31
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   22d6e:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   22d72:	f004 061f 	and.w	r6, r4, #31
	uECC_vli_clear(mod_multiple, word_shift);
   22d76:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   22d78:	bf58      	it	pl
   22d7a:	425e      	negpl	r6, r3
	uECC_vli_clear(mod_multiple, word_shift);
   22d7c:	f7ff ff1e 	bl	22bbc <uECC_vli_clear>
	if (bit_shift > 0) {
   22d80:	2e00      	cmp	r6, #0
   22d82:	b208      	sxth	r0, r1
   22d84:	dd2b      	ble.n	22dde <uECC_vli_mmod+0xa0>
   22d86:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   22d88:	2200      	movs	r2, #0
   22d8a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   22d8e:	f1c6 0e20 	rsb	lr, r6, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   22d92:	4613      	mov	r3, r2
   22d94:	429d      	cmp	r5, r3
   22d96:	d817      	bhi.n	22dc8 <uECC_vli_mmod+0x8a>
		for (i = 0; i < num_words * 2; ++i) {
   22d98:	006b      	lsls	r3, r5, #1
   22d9a:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   22d9c:	ab04      	add	r3, sp, #16
   22d9e:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   22da2:	1e6f      	subs	r7, r5, #1
   22da4:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   22da6:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   22da8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   22dac:	2c00      	cmp	r4, #0
   22dae:	da54      	bge.n	22e5a <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   22db0:	ab24      	add	r3, sp, #144	; 0x90
   22db2:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   22db6:	462a      	mov	r2, r5
   22db8:	f856 1c88 	ldr.w	r1, [r6, #-136]
   22dbc:	4640      	mov	r0, r8
   22dbe:	f7ff ff42 	bl	22c46 <uECC_vli_set>
}
   22dc2:	b025      	add	sp, #148	; 0x94
   22dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   22dc8:	f857 c023 	ldr.w	ip, [r7, r3, lsl #2]
   22dcc:	fa0c f106 	lsl.w	r1, ip, r6
   22dd0:	430a      	orrs	r2, r1
   22dd2:	f840 2b04 	str.w	r2, [r0], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   22dd6:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   22dd8:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   22ddc:	e7da      	b.n	22d94 <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   22dde:	ab04      	add	r3, sp, #16
   22de0:	462a      	mov	r2, r5
   22de2:	4639      	mov	r1, r7
   22de4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   22de8:	f7ff ff2d 	bl	22c46 <uECC_vli_set>
   22dec:	e7d4      	b.n	22d98 <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   22dee:	fa0f fe82 	sxth.w	lr, r2
   22df2:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   22df6:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   22dfa:	ab24      	add	r3, sp, #144	; 0x90
   22dfc:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   22e00:	3001      	adds	r0, #1
   22e02:	f852 3c80 	ldr.w	r3, [r2, #-128]
   22e06:	440b      	add	r3, r1
   22e08:	ebbb 0303 	subs.w	r3, fp, r3
   22e0c:	bf34      	ite	cc
   22e0e:	2201      	movcc	r2, #1
   22e10:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   22e12:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   22e14:	bf18      	it	ne
   22e16:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   22e18:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   22e1c:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   22e20:	9b01      	ldr	r3, [sp, #4]
   22e22:	b242      	sxtb	r2, r0
   22e24:	429a      	cmp	r2, r3
   22e26:	dbe2      	blt.n	22dee <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   22e28:	1a73      	subs	r3, r6, r1
   22e2a:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   22e2c:	4629      	mov	r1, r5
   22e2e:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   22e30:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   22e32:	f7ff fe2f 	bl	22a94 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   22e36:	ab24      	add	r3, sp, #144	; 0x90
   22e38:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   22e3c:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   22e3e:	f853 2c80 	ldr.w	r2, [r3, #-128]
   22e42:	f857 3c80 	ldr.w	r3, [r7, #-128]
   22e46:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
   22e4a:	f847 3c80 	str.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   22e4e:	4648      	mov	r0, r9
	for (index = 1; shift >= 0; --shift) {
   22e50:	3c01      	subs	r4, #1
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   22e52:	f7ff fe1f 	bl	22a94 <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   22e56:	b224      	sxth	r4, r4
   22e58:	e7a8      	b.n	22dac <uECC_vli_mmod+0x6e>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   22e5a:	ab24      	add	r3, sp, #144	; 0x90
   22e5c:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   22e5e:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   22e62:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   22e64:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   22e68:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   22e6c:	e7d8      	b.n	22e20 <uECC_vli_mmod+0xe2>

00022e6e <uECC_vli_modMult_fast>:
{
   22e6e:	b530      	push	{r4, r5, lr}
   22e70:	461c      	mov	r4, r3
   22e72:	b091      	sub	sp, #68	; 0x44
   22e74:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   22e76:	f993 3000 	ldrsb.w	r3, [r3]
   22e7a:	4668      	mov	r0, sp
   22e7c:	f7ff fe33 	bl	22ae6 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   22e80:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   22e84:	4669      	mov	r1, sp
   22e86:	4628      	mov	r0, r5
   22e88:	4798      	blx	r3
}
   22e8a:	b011      	add	sp, #68	; 0x44
   22e8c:	bd30      	pop	{r4, r5, pc}

00022e8e <uECC_vli_modSquare_fast>:
{
   22e8e:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   22e90:	460a      	mov	r2, r1
   22e92:	f7ff bfec 	b.w	22e6e <uECC_vli_modMult_fast>

00022e96 <double_jacobian_default>:
{
   22e96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   22e9a:	f993 6000 	ldrsb.w	r6, [r3]
{
   22e9e:	b092      	sub	sp, #72	; 0x48
   22ea0:	4604      	mov	r4, r0
   22ea2:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   22ea4:	4610      	mov	r0, r2
   22ea6:	4631      	mov	r1, r6
{
   22ea8:	4615      	mov	r5, r2
   22eaa:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   22eac:	f7ff fe91 	bl	22bd2 <uECC_vli_isZero>
   22eb0:	2800      	cmp	r0, #0
   22eb2:	f040 8091 	bne.w	22fd8 <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   22eb6:	463a      	mov	r2, r7
   22eb8:	4649      	mov	r1, r9
   22eba:	a802      	add	r0, sp, #8
   22ebc:	f7ff ffe7 	bl	22e8e <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   22ec0:	463b      	mov	r3, r7
   22ec2:	aa02      	add	r2, sp, #8
   22ec4:	4621      	mov	r1, r4
   22ec6:	a80a      	add	r0, sp, #40	; 0x28
   22ec8:	f7ff ffd1 	bl	22e6e <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   22ecc:	a902      	add	r1, sp, #8
   22ece:	4608      	mov	r0, r1
   22ed0:	463a      	mov	r2, r7
   22ed2:	f7ff ffdc 	bl	22e8e <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   22ed6:	463b      	mov	r3, r7
   22ed8:	462a      	mov	r2, r5
   22eda:	4649      	mov	r1, r9
   22edc:	4648      	mov	r0, r9
   22ede:	f7ff ffc6 	bl	22e6e <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   22ee2:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   22ee6:	463a      	mov	r2, r7
   22ee8:	4629      	mov	r1, r5
   22eea:	4628      	mov	r0, r5
   22eec:	f7ff ffcf 	bl	22e8e <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   22ef0:	4643      	mov	r3, r8
   22ef2:	462a      	mov	r2, r5
   22ef4:	4621      	mov	r1, r4
   22ef6:	4620      	mov	r0, r4
   22ef8:	9600      	str	r6, [sp, #0]
   22efa:	f7ff fef5 	bl	22ce8 <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   22efe:	4643      	mov	r3, r8
   22f00:	462a      	mov	r2, r5
   22f02:	4629      	mov	r1, r5
   22f04:	4628      	mov	r0, r5
   22f06:	9600      	str	r6, [sp, #0]
   22f08:	f7ff feee 	bl	22ce8 <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   22f0c:	4643      	mov	r3, r8
   22f0e:	462a      	mov	r2, r5
   22f10:	4621      	mov	r1, r4
   22f12:	4628      	mov	r0, r5
   22f14:	9600      	str	r6, [sp, #0]
   22f16:	f7ff ff00 	bl	22d1a <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   22f1a:	463b      	mov	r3, r7
   22f1c:	462a      	mov	r2, r5
   22f1e:	4621      	mov	r1, r4
   22f20:	4620      	mov	r0, r4
   22f22:	f7ff ffa4 	bl	22e6e <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   22f26:	4643      	mov	r3, r8
   22f28:	4622      	mov	r2, r4
   22f2a:	4621      	mov	r1, r4
   22f2c:	4628      	mov	r0, r5
   22f2e:	9600      	str	r6, [sp, #0]
   22f30:	f7ff feda 	bl	22ce8 <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   22f34:	4643      	mov	r3, r8
   22f36:	9600      	str	r6, [sp, #0]
   22f38:	462a      	mov	r2, r5
   22f3a:	4621      	mov	r1, r4
   22f3c:	4620      	mov	r0, r4
   22f3e:	f7ff fed3 	bl	22ce8 <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   22f42:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   22f44:	07db      	lsls	r3, r3, #31
   22f46:	d54a      	bpl.n	22fde <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   22f48:	4633      	mov	r3, r6
   22f4a:	4642      	mov	r2, r8
   22f4c:	4621      	mov	r1, r4
   22f4e:	4620      	mov	r0, r4
   22f50:	f7ff fd86 	bl	22a60 <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   22f54:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   22f56:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   22f58:	4620      	mov	r0, r4
   22f5a:	f7ff fd9b 	bl	22a94 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   22f5e:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   22f62:	3b01      	subs	r3, #1
   22f64:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   22f68:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   22f6c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   22f70:	463a      	mov	r2, r7
   22f72:	4621      	mov	r1, r4
   22f74:	4628      	mov	r0, r5
   22f76:	f7ff ff8a 	bl	22e8e <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   22f7a:	4643      	mov	r3, r8
   22f7c:	aa0a      	add	r2, sp, #40	; 0x28
   22f7e:	4629      	mov	r1, r5
   22f80:	4628      	mov	r0, r5
   22f82:	9600      	str	r6, [sp, #0]
   22f84:	f7ff fec9 	bl	22d1a <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   22f88:	4643      	mov	r3, r8
   22f8a:	aa0a      	add	r2, sp, #40	; 0x28
   22f8c:	4629      	mov	r1, r5
   22f8e:	4628      	mov	r0, r5
   22f90:	9600      	str	r6, [sp, #0]
   22f92:	f7ff fec2 	bl	22d1a <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   22f96:	a90a      	add	r1, sp, #40	; 0x28
   22f98:	4608      	mov	r0, r1
   22f9a:	4643      	mov	r3, r8
   22f9c:	462a      	mov	r2, r5
   22f9e:	9600      	str	r6, [sp, #0]
   22fa0:	f7ff febb 	bl	22d1a <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   22fa4:	463b      	mov	r3, r7
   22fa6:	aa0a      	add	r2, sp, #40	; 0x28
   22fa8:	4621      	mov	r1, r4
   22faa:	4620      	mov	r0, r4
   22fac:	f7ff ff5f 	bl	22e6e <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   22fb0:	aa02      	add	r2, sp, #8
   22fb2:	4643      	mov	r3, r8
   22fb4:	4610      	mov	r0, r2
   22fb6:	4621      	mov	r1, r4
   22fb8:	9600      	str	r6, [sp, #0]
   22fba:	f7ff feae 	bl	22d1a <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   22fbe:	4632      	mov	r2, r6
   22fc0:	4629      	mov	r1, r5
   22fc2:	4620      	mov	r0, r4
   22fc4:	f7ff fe3f 	bl	22c46 <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   22fc8:	4649      	mov	r1, r9
   22fca:	4628      	mov	r0, r5
   22fcc:	f7ff fe3b 	bl	22c46 <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   22fd0:	a902      	add	r1, sp, #8
   22fd2:	4648      	mov	r0, r9
   22fd4:	f7ff fe37 	bl	22c46 <uECC_vli_set>
}
   22fd8:	b012      	add	sp, #72	; 0x48
   22fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   22fde:	4631      	mov	r1, r6
   22fe0:	4620      	mov	r0, r4
   22fe2:	f7ff fd57 	bl	22a94 <uECC_vli_rshift1>
   22fe6:	e7c3      	b.n	22f70 <double_jacobian_default+0xda>

00022fe8 <x_side_default>:
{
   22fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22fec:	4615      	mov	r5, r2
   22fee:	b08a      	sub	sp, #40	; 0x28
   22ff0:	4604      	mov	r4, r0
   22ff2:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   22ff4:	221c      	movs	r2, #28
   22ff6:	2100      	movs	r1, #0
   22ff8:	a803      	add	r0, sp, #12
   22ffa:	f000 fee0 	bl	23dbe <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   22ffe:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   23000:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   23004:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   23006:	462a      	mov	r2, r5
   23008:	4631      	mov	r1, r6
   2300a:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   2300c:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   2300e:	f7ff ff3e 	bl	22e8e <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   23012:	463b      	mov	r3, r7
   23014:	aa02      	add	r2, sp, #8
   23016:	4621      	mov	r1, r4
   23018:	4620      	mov	r0, r4
   2301a:	f8cd 8000 	str.w	r8, [sp]
   2301e:	f7ff fe7c 	bl	22d1a <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   23022:	462b      	mov	r3, r5
   23024:	4632      	mov	r2, r6
   23026:	4621      	mov	r1, r4
   23028:	4620      	mov	r0, r4
   2302a:	f7ff ff20 	bl	22e6e <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   2302e:	f8cd 8000 	str.w	r8, [sp]
   23032:	463b      	mov	r3, r7
   23034:	f105 0284 	add.w	r2, r5, #132	; 0x84
   23038:	4621      	mov	r1, r4
   2303a:	4620      	mov	r0, r4
   2303c:	f7ff fe54 	bl	22ce8 <uECC_vli_modAdd>
}
   23040:	b00a      	add	sp, #40	; 0x28
   23042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023046 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   23046:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2304a:	b09a      	sub	sp, #104	; 0x68
   2304c:	4616      	mov	r6, r2
   2304e:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   23052:	4644      	mov	r4, r8
{
   23054:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   23056:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   2305a:	9500      	str	r5, [sp, #0]
{
   2305c:	4607      	mov	r7, r0
   2305e:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   23060:	4623      	mov	r3, r4
   23062:	4602      	mov	r2, r0
   23064:	4631      	mov	r1, r6
   23066:	a802      	add	r0, sp, #8
   23068:	f7ff fe57 	bl	22d1a <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   2306c:	a902      	add	r1, sp, #8
   2306e:	4642      	mov	r2, r8
   23070:	4608      	mov	r0, r1
   23072:	f7ff ff0c 	bl	22e8e <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   23076:	4643      	mov	r3, r8
   23078:	aa02      	add	r2, sp, #8
   2307a:	4639      	mov	r1, r7
   2307c:	4638      	mov	r0, r7
   2307e:	f7ff fef6 	bl	22e6e <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   23082:	4643      	mov	r3, r8
   23084:	aa02      	add	r2, sp, #8
   23086:	4631      	mov	r1, r6
   23088:	4630      	mov	r0, r6
   2308a:	f7ff fef0 	bl	22e6e <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   2308e:	4623      	mov	r3, r4
   23090:	4652      	mov	r2, sl
   23092:	4649      	mov	r1, r9
   23094:	a802      	add	r0, sp, #8
   23096:	9500      	str	r5, [sp, #0]
   23098:	f7ff fe26 	bl	22ce8 <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   2309c:	4623      	mov	r3, r4
   2309e:	4652      	mov	r2, sl
   230a0:	4649      	mov	r1, r9
   230a2:	4648      	mov	r0, r9
   230a4:	9500      	str	r5, [sp, #0]
   230a6:	f7ff fe38 	bl	22d1a <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   230aa:	4623      	mov	r3, r4
   230ac:	463a      	mov	r2, r7
   230ae:	4631      	mov	r1, r6
   230b0:	a80a      	add	r0, sp, #40	; 0x28
   230b2:	9500      	str	r5, [sp, #0]
   230b4:	f7ff fe31 	bl	22d1a <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   230b8:	4643      	mov	r3, r8
   230ba:	aa0a      	add	r2, sp, #40	; 0x28
   230bc:	4651      	mov	r1, sl
   230be:	4650      	mov	r0, sl
   230c0:	f7ff fed5 	bl	22e6e <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   230c4:	4623      	mov	r3, r4
   230c6:	4632      	mov	r2, r6
   230c8:	4639      	mov	r1, r7
   230ca:	a80a      	add	r0, sp, #40	; 0x28
   230cc:	9500      	str	r5, [sp, #0]
   230ce:	f7ff fe0b 	bl	22ce8 <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   230d2:	4642      	mov	r2, r8
   230d4:	4649      	mov	r1, r9
   230d6:	4630      	mov	r0, r6
   230d8:	f7ff fed9 	bl	22e8e <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   230dc:	4623      	mov	r3, r4
   230de:	aa0a      	add	r2, sp, #40	; 0x28
   230e0:	4631      	mov	r1, r6
   230e2:	4630      	mov	r0, r6
   230e4:	9500      	str	r5, [sp, #0]
   230e6:	f7ff fe18 	bl	22d1a <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   230ea:	4623      	mov	r3, r4
   230ec:	4632      	mov	r2, r6
   230ee:	4639      	mov	r1, r7
   230f0:	a812      	add	r0, sp, #72	; 0x48
   230f2:	9500      	str	r5, [sp, #0]
   230f4:	f7ff fe11 	bl	22d1a <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   230f8:	4643      	mov	r3, r8
   230fa:	aa12      	add	r2, sp, #72	; 0x48
   230fc:	4649      	mov	r1, r9
   230fe:	4648      	mov	r0, r9
   23100:	f7ff feb5 	bl	22e6e <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   23104:	4623      	mov	r3, r4
   23106:	4652      	mov	r2, sl
   23108:	4649      	mov	r1, r9
   2310a:	4648      	mov	r0, r9
   2310c:	9500      	str	r5, [sp, #0]
   2310e:	f7ff fe04 	bl	22d1a <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   23112:	4642      	mov	r2, r8
   23114:	a902      	add	r1, sp, #8
   23116:	a812      	add	r0, sp, #72	; 0x48
   23118:	f7ff feb9 	bl	22e8e <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   2311c:	a912      	add	r1, sp, #72	; 0x48
   2311e:	4623      	mov	r3, r4
   23120:	aa0a      	add	r2, sp, #40	; 0x28
   23122:	4608      	mov	r0, r1
   23124:	9500      	str	r5, [sp, #0]
   23126:	f7ff fdf8 	bl	22d1a <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   2312a:	4623      	mov	r3, r4
   2312c:	463a      	mov	r2, r7
   2312e:	a912      	add	r1, sp, #72	; 0x48
   23130:	a80a      	add	r0, sp, #40	; 0x28
   23132:	9500      	str	r5, [sp, #0]
   23134:	f7ff fdf1 	bl	22d1a <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   23138:	a90a      	add	r1, sp, #40	; 0x28
   2313a:	4643      	mov	r3, r8
   2313c:	aa02      	add	r2, sp, #8
   2313e:	4608      	mov	r0, r1
   23140:	f7ff fe95 	bl	22e6e <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   23144:	4623      	mov	r3, r4
   23146:	4652      	mov	r2, sl
   23148:	a90a      	add	r1, sp, #40	; 0x28
   2314a:	4650      	mov	r0, sl
   2314c:	9500      	str	r5, [sp, #0]
   2314e:	f7ff fde4 	bl	22d1a <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   23152:	462a      	mov	r2, r5
   23154:	a912      	add	r1, sp, #72	; 0x48
   23156:	4638      	mov	r0, r7
   23158:	f7ff fd75 	bl	22c46 <uECC_vli_set>
}
   2315c:	b01a      	add	sp, #104	; 0x68
   2315e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00023162 <uECC_vli_modInv>:
{
   23162:	b5f0      	push	{r4, r5, r6, r7, lr}
   23164:	460f      	mov	r7, r1
   23166:	b0a1      	sub	sp, #132	; 0x84
   23168:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   2316a:	4619      	mov	r1, r3
   2316c:	4638      	mov	r0, r7
{
   2316e:	4615      	mov	r5, r2
   23170:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   23172:	f7ff fd2e 	bl	22bd2 <uECC_vli_isZero>
   23176:	b128      	cbz	r0, 23184 <uECC_vli_modInv+0x22>
		uECC_vli_clear(result, num_words);
   23178:	4630      	mov	r0, r6
}
   2317a:	b021      	add	sp, #132	; 0x84
   2317c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		uECC_vli_clear(result, num_words);
   23180:	f7ff bd1c 	b.w	22bbc <uECC_vli_clear>
	uECC_vli_set(a, input, num_words);
   23184:	4622      	mov	r2, r4
   23186:	4639      	mov	r1, r7
   23188:	4668      	mov	r0, sp
   2318a:	f7ff fd5c 	bl	22c46 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   2318e:	4629      	mov	r1, r5
   23190:	a808      	add	r0, sp, #32
   23192:	f7ff fd58 	bl	22c46 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   23196:	a810      	add	r0, sp, #64	; 0x40
   23198:	4621      	mov	r1, r4
   2319a:	f7ff fd0f 	bl	22bbc <uECC_vli_clear>
	u[0] = 1;
   2319e:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   231a0:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   231a2:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   231a4:	f7ff fd0a 	bl	22bbc <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   231a8:	4622      	mov	r2, r4
   231aa:	a908      	add	r1, sp, #32
   231ac:	4668      	mov	r0, sp
   231ae:	f7ff fd56 	bl	22c5e <uECC_vli_cmp_unsafe>
   231b2:	b930      	cbnz	r0, 231c2 <uECC_vli_modInv+0x60>
  	uECC_vli_set(result, u, num_words);
   231b4:	4622      	mov	r2, r4
   231b6:	a910      	add	r1, sp, #64	; 0x40
   231b8:	4630      	mov	r0, r6
   231ba:	f7ff fd44 	bl	22c46 <uECC_vli_set>
}
   231be:	b021      	add	sp, #132	; 0x84
   231c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (EVEN(a)) {
   231c2:	9b00      	ldr	r3, [sp, #0]
   231c4:	07da      	lsls	r2, r3, #31
   231c6:	d409      	bmi.n	231dc <uECC_vli_modInv+0x7a>
			uECC_vli_rshift1(a, num_words);
   231c8:	4621      	mov	r1, r4
   231ca:	4668      	mov	r0, sp
   231cc:	f7ff fc62 	bl	22a94 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   231d0:	4622      	mov	r2, r4
   231d2:	4629      	mov	r1, r5
   231d4:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   231d6:	f7ff fc6a 	bl	22aae <vli_modInv_update>
   231da:	e7e5      	b.n	231a8 <uECC_vli_modInv+0x46>
    		} else if (EVEN(b)) {
   231dc:	9b08      	ldr	r3, [sp, #32]
   231de:	07db      	lsls	r3, r3, #31
   231e0:	d407      	bmi.n	231f2 <uECC_vli_modInv+0x90>
			uECC_vli_rshift1(b, num_words);
   231e2:	4621      	mov	r1, r4
   231e4:	a808      	add	r0, sp, #32
   231e6:	f7ff fc55 	bl	22a94 <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   231ea:	4622      	mov	r2, r4
   231ec:	4629      	mov	r1, r5
   231ee:	a818      	add	r0, sp, #96	; 0x60
   231f0:	e7f1      	b.n	231d6 <uECC_vli_modInv+0x74>
		} else if (cmpResult > 0) {
   231f2:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   231f4:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   231f6:	dd1c      	ble.n	23232 <uECC_vli_modInv+0xd0>
			uECC_vli_sub(a, a, b, num_words);
   231f8:	aa08      	add	r2, sp, #32
   231fa:	4669      	mov	r1, sp
   231fc:	4668      	mov	r0, sp
   231fe:	f7ff fd58 	bl	22cb2 <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   23202:	4621      	mov	r1, r4
   23204:	4668      	mov	r0, sp
   23206:	f7ff fc45 	bl	22a94 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   2320a:	4622      	mov	r2, r4
   2320c:	a918      	add	r1, sp, #96	; 0x60
   2320e:	a810      	add	r0, sp, #64	; 0x40
   23210:	f7ff fd25 	bl	22c5e <uECC_vli_cmp_unsafe>
   23214:	2800      	cmp	r0, #0
   23216:	da05      	bge.n	23224 <uECC_vli_modInv+0xc2>
        			uECC_vli_add(u, u, mod, num_words);
   23218:	a910      	add	r1, sp, #64	; 0x40
   2321a:	4623      	mov	r3, r4
   2321c:	462a      	mov	r2, r5
   2321e:	4608      	mov	r0, r1
   23220:	f7ff fc1e 	bl	22a60 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   23224:	a910      	add	r1, sp, #64	; 0x40
   23226:	4623      	mov	r3, r4
   23228:	aa18      	add	r2, sp, #96	; 0x60
   2322a:	4608      	mov	r0, r1
   2322c:	f7ff fd41 	bl	22cb2 <uECC_vli_sub>
   23230:	e7ce      	b.n	231d0 <uECC_vli_modInv+0x6e>
      			uECC_vli_sub(b, b, a, num_words);
   23232:	466a      	mov	r2, sp
   23234:	a808      	add	r0, sp, #32
   23236:	f7ff fd3c 	bl	22cb2 <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   2323a:	4621      	mov	r1, r4
   2323c:	a808      	add	r0, sp, #32
   2323e:	f7ff fc29 	bl	22a94 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   23242:	4622      	mov	r2, r4
   23244:	a910      	add	r1, sp, #64	; 0x40
   23246:	a818      	add	r0, sp, #96	; 0x60
   23248:	f7ff fd09 	bl	22c5e <uECC_vli_cmp_unsafe>
   2324c:	2800      	cmp	r0, #0
   2324e:	da05      	bge.n	2325c <uECC_vli_modInv+0xfa>
        			uECC_vli_add(v, v, mod, num_words);
   23250:	a918      	add	r1, sp, #96	; 0x60
   23252:	4623      	mov	r3, r4
   23254:	462a      	mov	r2, r5
   23256:	4608      	mov	r0, r1
   23258:	f7ff fc02 	bl	22a60 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   2325c:	a918      	add	r1, sp, #96	; 0x60
   2325e:	4623      	mov	r3, r4
   23260:	aa10      	add	r2, sp, #64	; 0x40
   23262:	4608      	mov	r0, r1
   23264:	f7ff fd25 	bl	22cb2 <uECC_vli_sub>
   23268:	e7bf      	b.n	231ea <uECC_vli_modInv+0x88>

0002326a <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   2326a:	7809      	ldrb	r1, [r1, #0]
   2326c:	0049      	lsls	r1, r1, #1
   2326e:	b249      	sxtb	r1, r1
   23270:	f7ff bcaf 	b.w	22bd2 <uECC_vli_isZero>

00023274 <apply_z>:
{
   23274:	b5f0      	push	{r4, r5, r6, r7, lr}
   23276:	4615      	mov	r5, r2
   23278:	b089      	sub	sp, #36	; 0x24
   2327a:	461c      	mov	r4, r3
   2327c:	4607      	mov	r7, r0
   2327e:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   23280:	461a      	mov	r2, r3
   23282:	4629      	mov	r1, r5
   23284:	4668      	mov	r0, sp
   23286:	f7ff fe02 	bl	22e8e <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   2328a:	4623      	mov	r3, r4
   2328c:	466a      	mov	r2, sp
   2328e:	4639      	mov	r1, r7
   23290:	4638      	mov	r0, r7
   23292:	f7ff fdec 	bl	22e6e <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   23296:	4623      	mov	r3, r4
   23298:	462a      	mov	r2, r5
   2329a:	4669      	mov	r1, sp
   2329c:	4668      	mov	r0, sp
   2329e:	f7ff fde6 	bl	22e6e <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   232a2:	4623      	mov	r3, r4
   232a4:	466a      	mov	r2, sp
   232a6:	4631      	mov	r1, r6
   232a8:	4630      	mov	r0, r6
   232aa:	f7ff fde0 	bl	22e6e <uECC_vli_modMult_fast>
}
   232ae:	b009      	add	sp, #36	; 0x24
   232b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000232b2 <XYcZ_add>:
{
   232b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   232b6:	b08a      	sub	sp, #40	; 0x28
   232b8:	4614      	mov	r4, r2
   232ba:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   232be:	4655      	mov	r5, sl
{
   232c0:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   232c2:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   232c6:	9600      	str	r6, [sp, #0]
{
   232c8:	4680      	mov	r8, r0
   232ca:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   232cc:	462b      	mov	r3, r5
   232ce:	4602      	mov	r2, r0
   232d0:	4621      	mov	r1, r4
   232d2:	a802      	add	r0, sp, #8
   232d4:	f7ff fd21 	bl	22d1a <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   232d8:	a902      	add	r1, sp, #8
   232da:	4652      	mov	r2, sl
   232dc:	4608      	mov	r0, r1
   232de:	f7ff fdd6 	bl	22e8e <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   232e2:	4653      	mov	r3, sl
   232e4:	aa02      	add	r2, sp, #8
   232e6:	4641      	mov	r1, r8
   232e8:	4640      	mov	r0, r8
   232ea:	f7ff fdc0 	bl	22e6e <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   232ee:	4653      	mov	r3, sl
   232f0:	aa02      	add	r2, sp, #8
   232f2:	4621      	mov	r1, r4
   232f4:	4620      	mov	r0, r4
   232f6:	f7ff fdba 	bl	22e6e <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   232fa:	462b      	mov	r3, r5
   232fc:	464a      	mov	r2, r9
   232fe:	4639      	mov	r1, r7
   23300:	4638      	mov	r0, r7
   23302:	9600      	str	r6, [sp, #0]
   23304:	f7ff fd09 	bl	22d1a <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   23308:	4652      	mov	r2, sl
   2330a:	4639      	mov	r1, r7
   2330c:	a802      	add	r0, sp, #8
   2330e:	f7ff fdbe 	bl	22e8e <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   23312:	a902      	add	r1, sp, #8
   23314:	462b      	mov	r3, r5
   23316:	4642      	mov	r2, r8
   23318:	4608      	mov	r0, r1
   2331a:	9600      	str	r6, [sp, #0]
   2331c:	f7ff fcfd 	bl	22d1a <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   23320:	a902      	add	r1, sp, #8
   23322:	462b      	mov	r3, r5
   23324:	4622      	mov	r2, r4
   23326:	4608      	mov	r0, r1
   23328:	9600      	str	r6, [sp, #0]
   2332a:	f7ff fcf6 	bl	22d1a <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   2332e:	462b      	mov	r3, r5
   23330:	4642      	mov	r2, r8
   23332:	4621      	mov	r1, r4
   23334:	4620      	mov	r0, r4
   23336:	9600      	str	r6, [sp, #0]
   23338:	f7ff fcef 	bl	22d1a <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   2333c:	4653      	mov	r3, sl
   2333e:	4622      	mov	r2, r4
   23340:	4649      	mov	r1, r9
   23342:	4648      	mov	r0, r9
   23344:	f7ff fd93 	bl	22e6e <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   23348:	462b      	mov	r3, r5
   2334a:	aa02      	add	r2, sp, #8
   2334c:	4641      	mov	r1, r8
   2334e:	4620      	mov	r0, r4
   23350:	9600      	str	r6, [sp, #0]
   23352:	f7ff fce2 	bl	22d1a <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   23356:	4653      	mov	r3, sl
   23358:	4622      	mov	r2, r4
   2335a:	4639      	mov	r1, r7
   2335c:	4638      	mov	r0, r7
   2335e:	f7ff fd86 	bl	22e6e <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   23362:	462b      	mov	r3, r5
   23364:	464a      	mov	r2, r9
   23366:	4639      	mov	r1, r7
   23368:	4638      	mov	r0, r7
   2336a:	9600      	str	r6, [sp, #0]
   2336c:	f7ff fcd5 	bl	22d1a <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   23370:	4632      	mov	r2, r6
   23372:	a902      	add	r1, sp, #8
   23374:	4620      	mov	r0, r4
   23376:	f7ff fc66 	bl	22c46 <uECC_vli_set>
}
   2337a:	b00a      	add	sp, #40	; 0x28
   2337c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00023380 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   23380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23384:	b0b1      	sub	sp, #196	; 0xc4
   23386:	e9cd 0103 	strd	r0, r1, [sp, #12]
   2338a:	9c3b      	ldr	r4, [sp, #236]	; 0xec
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   2338c:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   23390:	a818      	add	r0, sp, #96	; 0x60
{
   23392:	4692      	mov	sl, r2
	uECC_vli_set(Rx[1], point, num_words);
   23394:	463a      	mov	r2, r7
{
   23396:	461d      	mov	r5, r3
	uECC_vli_set(Rx[1], point, num_words);
   23398:	f7ff fc55 	bl	22c46 <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   2339c:	00bb      	lsls	r3, r7, #2
   2339e:	9305      	str	r3, [sp, #20]
   233a0:	9b04      	ldr	r3, [sp, #16]
   233a2:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   233a6:	4619      	mov	r1, r3
   233a8:	a828      	add	r0, sp, #160	; 0xa0
   233aa:	9302      	str	r3, [sp, #8]
   233ac:	f7ff fc4b 	bl	22c46 <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   233b0:	f994 6000 	ldrsb.w	r6, [r4]
	if (initial_Z) {
   233b4:	2d00      	cmp	r5, #0
   233b6:	f000 8086 	beq.w	234c6 <EccPoint_mult+0x146>
		uECC_vli_set(z, initial_Z, num_words);
   233ba:	4632      	mov	r2, r6
   233bc:	4629      	mov	r1, r5
   233be:	a808      	add	r0, sp, #32
   233c0:	f7ff fc41 	bl	22c46 <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   233c4:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   233c8:	4632      	mov	r2, r6
   233ca:	a918      	add	r1, sp, #96	; 0x60
   233cc:	4640      	mov	r0, r8
	uECC_vli_set(Y2, Y1, num_words);
   233ce:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   233d2:	f7ff fc38 	bl	22c46 <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   233d6:	a928      	add	r1, sp, #160	; 0xa0
   233d8:	4648      	mov	r0, r9
   233da:	f7ff fc34 	bl	22c46 <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   233de:	4623      	mov	r3, r4
   233e0:	aa08      	add	r2, sp, #32
   233e2:	a818      	add	r0, sp, #96	; 0x60
   233e4:	f7ff ff46 	bl	23274 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   233e8:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   233ec:	4623      	mov	r3, r4
   233ee:	aa08      	add	r2, sp, #32
   233f0:	a928      	add	r1, sp, #160	; 0xa0
   233f2:	a818      	add	r0, sp, #96	; 0x60
   233f4:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   233f6:	4623      	mov	r3, r4
   233f8:	aa08      	add	r2, sp, #32
   233fa:	4649      	mov	r1, r9
   233fc:	4640      	mov	r0, r8
   233fe:	f7ff ff39 	bl	23274 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   23402:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   23406:	3d02      	subs	r5, #2
   23408:	b22d      	sxth	r5, r5
   2340a:	2d00      	cmp	r5, #0
   2340c:	dc62      	bgt.n	234d4 <EccPoint_mult+0x154>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   2340e:	f8da 5000 	ldr.w	r5, [sl]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   23412:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   23414:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   23418:	ab10      	add	r3, sp, #64	; 0x40
   2341a:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   2341e:	43ed      	mvns	r5, r5
   23420:	ab20      	add	r3, sp, #128	; 0x80
   23422:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   23426:	f005 0501 	and.w	r5, r5, #1
   2342a:	ab10      	add	r3, sp, #64	; 0x40
   2342c:	eb03 1945 	add.w	r9, r3, r5, lsl #5
   23430:	ab20      	add	r3, sp, #128	; 0x80
   23432:	eb03 1545 	add.w	r5, r3, r5, lsl #5
   23436:	462b      	mov	r3, r5
   23438:	464a      	mov	r2, r9
   2343a:	4631      	mov	r1, r6
   2343c:	4640      	mov	r0, r8

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   2343e:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   23442:	f7ff fe00 	bl	23046 <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   23446:	4653      	mov	r3, sl
   23448:	aa10      	add	r2, sp, #64	; 0x40
   2344a:	a918      	add	r1, sp, #96	; 0x60
   2344c:	a808      	add	r0, sp, #32
   2344e:	9700      	str	r7, [sp, #0]
   23450:	f7ff fc63 	bl	22d1a <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   23454:	a908      	add	r1, sp, #32
   23456:	4623      	mov	r3, r4
   23458:	4632      	mov	r2, r6
   2345a:	4608      	mov	r0, r1
   2345c:	f7ff fd07 	bl	22e6e <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   23460:	a908      	add	r1, sp, #32
   23462:	9a04      	ldr	r2, [sp, #16]
   23464:	4623      	mov	r3, r4
   23466:	4608      	mov	r0, r1
   23468:	f7ff fd01 	bl	22e6e <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   2346c:	a908      	add	r1, sp, #32
   2346e:	463b      	mov	r3, r7
   23470:	4652      	mov	r2, sl
   23472:	4608      	mov	r0, r1
   23474:	f7ff fe75 	bl	23162 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   23478:	a908      	add	r1, sp, #32
   2347a:	9a02      	ldr	r2, [sp, #8]
   2347c:	4623      	mov	r3, r4
   2347e:	4608      	mov	r0, r1
   23480:	f7ff fcf5 	bl	22e6e <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   23484:	a908      	add	r1, sp, #32
   23486:	4623      	mov	r3, r4
   23488:	4642      	mov	r2, r8
   2348a:	4608      	mov	r0, r1
   2348c:	f7ff fcef 	bl	22e6e <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   23490:	4633      	mov	r3, r6
   23492:	4642      	mov	r2, r8
   23494:	4629      	mov	r1, r5
   23496:	4648      	mov	r0, r9
   23498:	9400      	str	r4, [sp, #0]
   2349a:	f7ff ff0a 	bl	232b2 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   2349e:	4623      	mov	r3, r4
   234a0:	aa08      	add	r2, sp, #32
   234a2:	a920      	add	r1, sp, #128	; 0x80
   234a4:	a810      	add	r0, sp, #64	; 0x40
   234a6:	f7ff fee5 	bl	23274 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   234aa:	9803      	ldr	r0, [sp, #12]
   234ac:	463a      	mov	r2, r7
   234ae:	a910      	add	r1, sp, #64	; 0x40
   234b0:	f7ff fbc9 	bl	22c46 <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   234b4:	9803      	ldr	r0, [sp, #12]
   234b6:	9b05      	ldr	r3, [sp, #20]
   234b8:	a920      	add	r1, sp, #128	; 0x80
   234ba:	4418      	add	r0, r3
   234bc:	f7ff fbc3 	bl	22c46 <uECC_vli_set>
}
   234c0:	b031      	add	sp, #196	; 0xc4
   234c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   234c6:	4631      	mov	r1, r6
   234c8:	a808      	add	r0, sp, #32
   234ca:	f7ff fb77 	bl	22bbc <uECC_vli_clear>
		z[0] = 1;
   234ce:	2301      	movs	r3, #1
   234d0:	9308      	str	r3, [sp, #32]
   234d2:	e777      	b.n	233c4 <EccPoint_mult+0x44>
		nb = !uECC_vli_testBit(scalar, i);
   234d4:	4629      	mov	r1, r5
   234d6:	4650      	mov	r0, sl
   234d8:	f7ff fb8a 	bl	22bf0 <uECC_vli_testBit>
   234dc:	fab0 f680 	clz	r6, r0
   234e0:	0976      	lsrs	r6, r6, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   234e2:	f1c6 0101 	rsb	r1, r6, #1
   234e6:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
   234ea:	eb09 1646 	add.w	r6, r9, r6, lsl #5
   234ee:	eb08 1041 	add.w	r0, r8, r1, lsl #5
   234f2:	4633      	mov	r3, r6
   234f4:	eb09 1141 	add.w	r1, r9, r1, lsl #5
   234f8:	465a      	mov	r2, fp
   234fa:	9400      	str	r4, [sp, #0]
   234fc:	e9cd 0106 	strd	r0, r1, [sp, #24]
   23500:	f7ff fda1 	bl	23046 <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   23504:	9907      	ldr	r1, [sp, #28]
   23506:	9806      	ldr	r0, [sp, #24]
   23508:	9400      	str	r4, [sp, #0]
   2350a:	460b      	mov	r3, r1
   2350c:	4602      	mov	r2, r0
   2350e:	4631      	mov	r1, r6
   23510:	4658      	mov	r0, fp
   23512:	f7ff fece 	bl	232b2 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   23516:	3d01      	subs	r5, #1
   23518:	e776      	b.n	23408 <EccPoint_mult+0x88>

0002351a <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   2351a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   2351e:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   23522:	f119 081f 	adds.w	r8, r9, #31
{
   23526:	461d      	mov	r5, r3
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   23528:	bf48      	it	mi
   2352a:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
{
   2352e:	460e      	mov	r6, r1
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   23530:	f348 1847 	sbfx	r8, r8, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   23534:	3524      	adds	r5, #36	; 0x24
   23536:	4601      	mov	r1, r0
{
   23538:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   2353a:	4643      	mov	r3, r8
   2353c:	462a      	mov	r2, r5
   2353e:	4630      	mov	r0, r6
   23540:	f7ff fa8e 	bl	22a60 <uECC_vli_add>
   23544:	4604      	mov	r4, r0
   23546:	b990      	cbnz	r0, 2356e <regularize_k+0x54>
   23548:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   2354c:	da06      	bge.n	2355c <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   2354e:	4649      	mov	r1, r9
   23550:	4630      	mov	r0, r6
   23552:	f7ff fb4d 	bl	22bf0 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   23556:	1e04      	subs	r4, r0, #0
   23558:	bf18      	it	ne
   2355a:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   2355c:	4643      	mov	r3, r8
   2355e:	462a      	mov	r2, r5
   23560:	4631      	mov	r1, r6
   23562:	4638      	mov	r0, r7
   23564:	f7ff fa7c 	bl	22a60 <uECC_vli_add>

	return carry;
}
   23568:	4620      	mov	r0, r4
   2356a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   2356e:	2401      	movs	r4, #1
   23570:	e7f4      	b.n	2355c <regularize_k+0x42>

00023572 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   23572:	b530      	push	{r4, r5, lr}
   23574:	4614      	mov	r4, r2
   23576:	b095      	sub	sp, #84	; 0x54
   23578:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   2357a:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   2357c:	4623      	mov	r3, r4
{
   2357e:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   23580:	a904      	add	r1, sp, #16
   23582:	9102      	str	r1, [sp, #8]
   23584:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   23586:	f7ff ffc8 	bl	2351a <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   2358a:	fab0 f380 	clz	r3, r0
   2358e:	095b      	lsrs	r3, r3, #5
   23590:	aa14      	add	r2, sp, #80	; 0x50
   23592:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   23596:	8863      	ldrh	r3, [r4, #2]
   23598:	9401      	str	r4, [sp, #4]
   2359a:	3301      	adds	r3, #1
   2359c:	b21b      	sxth	r3, r3
   2359e:	9300      	str	r3, [sp, #0]
   235a0:	f852 2c48 	ldr.w	r2, [r2, #-72]
   235a4:	2300      	movs	r3, #0
   235a6:	f104 0144 	add.w	r1, r4, #68	; 0x44
   235aa:	4628      	mov	r0, r5
   235ac:	f7ff fee8 	bl	23380 <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   235b0:	4621      	mov	r1, r4
   235b2:	4628      	mov	r0, r5
   235b4:	f7ff fe59 	bl	2326a <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   235b8:	fab0 f080 	clz	r0, r0
   235bc:	0940      	lsrs	r0, r0, #5
   235be:	b015      	add	sp, #84	; 0x54
   235c0:	bd30      	pop	{r4, r5, pc}

000235c2 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   235c2:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   235c4:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   235c6:	1e4f      	subs	r7, r1, #1
   235c8:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   235ca:	428c      	cmp	r4, r1
   235cc:	f105 0501 	add.w	r5, r5, #1
   235d0:	db00      	blt.n	235d4 <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   235d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   235d4:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   235d6:	f023 0603 	bic.w	r6, r3, #3
   235da:	f003 0303 	and.w	r3, r3, #3
   235de:	5996      	ldr	r6, [r2, r6]
   235e0:	00db      	lsls	r3, r3, #3
   235e2:	fa26 f303 	lsr.w	r3, r6, r3
   235e6:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   235e8:	e7ee      	b.n	235c8 <uECC_vli_nativeToBytes+0x6>

000235ea <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   235ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   235ec:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   235ee:	1cd1      	adds	r1, r2, #3
   235f0:	bf48      	it	mi
   235f2:	1d91      	addmi	r1, r2, #6
   235f4:	f341 0187 	sbfx	r1, r1, #2, #8
{
   235f8:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   235fa:	f7ff fadf 	bl	22bbc <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   235fe:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   23600:	1e67      	subs	r7, r4, #1
   23602:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   23604:	42a2      	cmp	r2, r4
   23606:	f105 0501 	add.w	r5, r5, #1
   2360a:	db00      	blt.n	2360e <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   2360c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   2360e:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   23610:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   23614:	5cb2      	ldrb	r2, [r6, r2]
   23616:	f003 0303 	and.w	r3, r3, #3
   2361a:	00db      	lsls	r3, r3, #3
   2361c:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   23620:	5842      	ldr	r2, [r0, r1]
   23622:	431a      	orrs	r2, r3
   23624:	5042      	str	r2, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   23626:	e7ec      	b.n	23602 <uECC_vli_bytesToNative+0x18>

00023628 <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   23628:	b5f0      	push	{r4, r5, r6, r7, lr}
   2362a:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   2362c:	f991 6000 	ldrsb.w	r6, [r1]
{
   23630:	4605      	mov	r5, r0
   23632:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   23634:	f7ff fe19 	bl	2326a <EccPoint_isZero>
   23638:	bb28      	cbnz	r0, 23686 <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   2363a:	1d27      	adds	r7, r4, #4
   2363c:	4632      	mov	r2, r6
   2363e:	4629      	mov	r1, r5
   23640:	4638      	mov	r0, r7
   23642:	f7ff fb0c 	bl	22c5e <uECC_vli_cmp_unsafe>
   23646:	2801      	cmp	r0, #1
   23648:	d120      	bne.n	2368c <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   2364a:	4632      	mov	r2, r6
   2364c:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   23650:	4638      	mov	r0, r7
   23652:	f7ff fb04 	bl	22c5e <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   23656:	2801      	cmp	r0, #1
   23658:	d118      	bne.n	2368c <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   2365a:	4622      	mov	r2, r4
   2365c:	4668      	mov	r0, sp
   2365e:	f7ff fc16 	bl	22e8e <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   23662:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   23666:	4622      	mov	r2, r4
   23668:	4629      	mov	r1, r5
   2366a:	a808      	add	r0, sp, #32
   2366c:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   2366e:	4632      	mov	r2, r6
   23670:	a908      	add	r1, sp, #32
   23672:	4668      	mov	r0, sp
   23674:	f7ff fb0a 	bl	22c8c <uECC_vli_equal>
		return -3;
   23678:	2800      	cmp	r0, #0
   2367a:	bf0c      	ite	eq
   2367c:	2000      	moveq	r0, #0
   2367e:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   23682:	b011      	add	sp, #68	; 0x44
   23684:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   23686:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2368a:	e7fa      	b.n	23682 <uECC_valid_point+0x5a>
		return -2;
   2368c:	f06f 0001 	mvn.w	r0, #1
   23690:	e7f7      	b.n	23682 <uECC_valid_point+0x5a>

00023692 <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   23692:	b570      	push	{r4, r5, r6, lr}
   23694:	460c      	mov	r4, r1
   23696:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   23698:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   2369a:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   2369e:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   236a0:	4601      	mov	r1, r0
   236a2:	4668      	mov	r0, sp
   236a4:	f7ff ffa1 	bl	235ea <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   236a8:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   236ac:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   236b0:	18a9      	adds	r1, r5, r2
   236b2:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   236b6:	f7ff ff98 	bl	235ea <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   236ba:	2210      	movs	r2, #16
   236bc:	4631      	mov	r1, r6
   236be:	4668      	mov	r0, sp
   236c0:	f7ff facd 	bl	22c5e <uECC_vli_cmp_unsafe>
   236c4:	b128      	cbz	r0, 236d2 <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   236c6:	4621      	mov	r1, r4
   236c8:	4668      	mov	r0, sp
   236ca:	f7ff ffad 	bl	23628 <uECC_valid_point>
}
   236ce:	b010      	add	sp, #64	; 0x40
   236d0:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   236d2:	f06f 0003 	mvn.w	r0, #3
   236d6:	e7fa      	b.n	236ce <uECC_valid_public_key+0x3c>

000236d8 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   236d8:	78cb      	ldrb	r3, [r1, #3]
   236da:	7802      	ldrb	r2, [r0, #0]
   236dc:	4053      	eors	r3, r2
   236de:	7003      	strb	r3, [r0, #0]
   236e0:	884b      	ldrh	r3, [r1, #2]
   236e2:	7842      	ldrb	r2, [r0, #1]
   236e4:	4053      	eors	r3, r2
   236e6:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   236e8:	680a      	ldr	r2, [r1, #0]
   236ea:	7883      	ldrb	r3, [r0, #2]
   236ec:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   236f0:	7083      	strb	r3, [r0, #2]
   236f2:	680a      	ldr	r2, [r1, #0]
   236f4:	78c3      	ldrb	r3, [r0, #3]
   236f6:	4053      	eors	r3, r2
   236f8:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   236fa:	79cb      	ldrb	r3, [r1, #7]
   236fc:	7902      	ldrb	r2, [r0, #4]
   236fe:	4053      	eors	r3, r2
   23700:	7103      	strb	r3, [r0, #4]
   23702:	88cb      	ldrh	r3, [r1, #6]
   23704:	7942      	ldrb	r2, [r0, #5]
   23706:	4053      	eors	r3, r2
   23708:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   2370a:	684a      	ldr	r2, [r1, #4]
   2370c:	7983      	ldrb	r3, [r0, #6]
   2370e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   23712:	7183      	strb	r3, [r0, #6]
   23714:	684a      	ldr	r2, [r1, #4]
   23716:	79c3      	ldrb	r3, [r0, #7]
   23718:	4053      	eors	r3, r2
   2371a:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2371c:	7acb      	ldrb	r3, [r1, #11]
   2371e:	7a02      	ldrb	r2, [r0, #8]
   23720:	4053      	eors	r3, r2
   23722:	7203      	strb	r3, [r0, #8]
   23724:	7a42      	ldrb	r2, [r0, #9]
   23726:	894b      	ldrh	r3, [r1, #10]
   23728:	4053      	eors	r3, r2
   2372a:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   2372c:	688a      	ldr	r2, [r1, #8]
   2372e:	7a83      	ldrb	r3, [r0, #10]
   23730:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   23734:	7283      	strb	r3, [r0, #10]
   23736:	688a      	ldr	r2, [r1, #8]
   23738:	7ac3      	ldrb	r3, [r0, #11]
   2373a:	4053      	eors	r3, r2
   2373c:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   2373e:	7bcb      	ldrb	r3, [r1, #15]
   23740:	7b02      	ldrb	r2, [r0, #12]
   23742:	4053      	eors	r3, r2
   23744:	7303      	strb	r3, [r0, #12]
   23746:	89cb      	ldrh	r3, [r1, #14]
   23748:	7b42      	ldrb	r2, [r0, #13]
   2374a:	4053      	eors	r3, r2
   2374c:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   2374e:	68ca      	ldr	r2, [r1, #12]
   23750:	7b83      	ldrb	r3, [r0, #14]
   23752:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   23756:	7383      	strb	r3, [r0, #14]
   23758:	68ca      	ldr	r2, [r1, #12]
   2375a:	7bc3      	ldrb	r3, [r0, #15]
   2375c:	4053      	eors	r3, r2
   2375e:	73c3      	strb	r3, [r0, #15]
}
   23760:	4770      	bx	lr

00023762 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   23762:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   23764:	7802      	ldrb	r2, [r0, #0]
   23766:	f88d 2000 	strb.w	r2, [sp]
   2376a:	7942      	ldrb	r2, [r0, #5]
   2376c:	f88d 2001 	strb.w	r2, [sp, #1]
   23770:	7a82      	ldrb	r2, [r0, #10]
   23772:	f88d 2002 	strb.w	r2, [sp, #2]
   23776:	7bc2      	ldrb	r2, [r0, #15]
   23778:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   2377c:	7902      	ldrb	r2, [r0, #4]
   2377e:	f88d 2004 	strb.w	r2, [sp, #4]
   23782:	7a42      	ldrb	r2, [r0, #9]
   23784:	f88d 2005 	strb.w	r2, [sp, #5]
   23788:	7b82      	ldrb	r2, [r0, #14]
   2378a:	f88d 2006 	strb.w	r2, [sp, #6]
   2378e:	78c2      	ldrb	r2, [r0, #3]
   23790:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   23794:	7a02      	ldrb	r2, [r0, #8]
   23796:	f88d 2008 	strb.w	r2, [sp, #8]
   2379a:	7b42      	ldrb	r2, [r0, #13]
   2379c:	f88d 2009 	strb.w	r2, [sp, #9]
   237a0:	7882      	ldrb	r2, [r0, #2]
   237a2:	f88d 200a 	strb.w	r2, [sp, #10]
   237a6:	79c2      	ldrb	r2, [r0, #7]
   237a8:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   237ac:	7b02      	ldrb	r2, [r0, #12]
   237ae:	f88d 200c 	strb.w	r2, [sp, #12]
   237b2:	7842      	ldrb	r2, [r0, #1]
   237b4:	7ac3      	ldrb	r3, [r0, #11]
   237b6:	f88d 200d 	strb.w	r2, [sp, #13]
   237ba:	7982      	ldrb	r2, [r0, #6]
   237bc:	f88d 200e 	strb.w	r2, [sp, #14]
   237c0:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   237c4:	2310      	movs	r3, #16
   237c6:	466a      	mov	r2, sp
   237c8:	4619      	mov	r1, r3
   237ca:	f7ff f885 	bl	228d8 <_copy>
}
   237ce:	b005      	add	sp, #20
   237d0:	f85d fb04 	ldr.w	pc, [sp], #4

000237d4 <mult_row_column>:
{
   237d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   237d6:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   237d8:	7808      	ldrb	r0, [r1, #0]
{
   237da:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   237dc:	f7ff f88b 	bl	228f6 <_double_byte>
   237e0:	4605      	mov	r5, r0
   237e2:	7860      	ldrb	r0, [r4, #1]
   237e4:	f7ff f887 	bl	228f6 <_double_byte>
   237e8:	78a2      	ldrb	r2, [r4, #2]
   237ea:	7863      	ldrb	r3, [r4, #1]
   237ec:	4053      	eors	r3, r2
   237ee:	78e2      	ldrb	r2, [r4, #3]
   237f0:	4053      	eors	r3, r2
   237f2:	405d      	eors	r5, r3
   237f4:	4045      	eors	r5, r0
   237f6:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   237f8:	7860      	ldrb	r0, [r4, #1]
   237fa:	7827      	ldrb	r7, [r4, #0]
   237fc:	f7ff f87b 	bl	228f6 <_double_byte>
   23800:	4605      	mov	r5, r0
   23802:	78a0      	ldrb	r0, [r4, #2]
   23804:	f7ff f877 	bl	228f6 <_double_byte>
   23808:	78a3      	ldrb	r3, [r4, #2]
   2380a:	405f      	eors	r7, r3
   2380c:	78e3      	ldrb	r3, [r4, #3]
   2380e:	405f      	eors	r7, r3
   23810:	407d      	eors	r5, r7
   23812:	4045      	eors	r5, r0
   23814:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   23816:	78a0      	ldrb	r0, [r4, #2]
   23818:	7865      	ldrb	r5, [r4, #1]
   2381a:	7827      	ldrb	r7, [r4, #0]
   2381c:	f7ff f86b 	bl	228f6 <_double_byte>
   23820:	406f      	eors	r7, r5
   23822:	4605      	mov	r5, r0
   23824:	78e0      	ldrb	r0, [r4, #3]
   23826:	f7ff f866 	bl	228f6 <_double_byte>
   2382a:	78e3      	ldrb	r3, [r4, #3]
   2382c:	405f      	eors	r7, r3
   2382e:	407d      	eors	r5, r7
   23830:	4045      	eors	r5, r0
   23832:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   23834:	7820      	ldrb	r0, [r4, #0]
   23836:	f7ff f85e 	bl	228f6 <_double_byte>
   2383a:	7863      	ldrb	r3, [r4, #1]
   2383c:	7825      	ldrb	r5, [r4, #0]
   2383e:	405d      	eors	r5, r3
   23840:	78a3      	ldrb	r3, [r4, #2]
   23842:	405d      	eors	r5, r3
   23844:	4045      	eors	r5, r0
   23846:	78e0      	ldrb	r0, [r4, #3]
   23848:	f7ff f855 	bl	228f6 <_double_byte>
   2384c:	b2ed      	uxtb	r5, r5
   2384e:	4045      	eors	r5, r0
   23850:	70f5      	strb	r5, [r6, #3]
}
   23852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00023854 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   23854:	b570      	push	{r4, r5, r6, lr}
   23856:	4614      	mov	r4, r2
   23858:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   2385a:	4605      	mov	r5, r0
   2385c:	2800      	cmp	r0, #0
   2385e:	d049      	beq.n	238f4 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   23860:	2900      	cmp	r1, #0
   23862:	d049      	beq.n	238f8 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   23864:	2a00      	cmp	r2, #0
   23866:	d049      	beq.n	238fc <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   23868:	2310      	movs	r3, #16
   2386a:	460a      	mov	r2, r1
   2386c:	4668      	mov	r0, sp
   2386e:	4619      	mov	r1, r3
   23870:	f7ff f832 	bl	228d8 <_copy>
	add_round_key(state, s->words);
   23874:	4621      	mov	r1, r4
   23876:	4668      	mov	r0, sp
   23878:	f7ff ff2e 	bl	236d8 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   2387c:	3410      	adds	r4, #16
   2387e:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   23882:	4668      	mov	r0, sp
   23884:	f7e0 fcee 	bl	4264 <sub_bytes>
		shift_rows(state);
   23888:	4668      	mov	r0, sp
   2388a:	f7ff ff6a 	bl	23762 <shift_rows>
	mult_row_column(t, s);
   2388e:	4669      	mov	r1, sp
   23890:	a804      	add	r0, sp, #16
   23892:	f7ff ff9f 	bl	237d4 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   23896:	a901      	add	r1, sp, #4
   23898:	a805      	add	r0, sp, #20
   2389a:	f7ff ff9b 	bl	237d4 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   2389e:	a902      	add	r1, sp, #8
   238a0:	a806      	add	r0, sp, #24
   238a2:	f7ff ff97 	bl	237d4 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   238a6:	a903      	add	r1, sp, #12
   238a8:	a807      	add	r0, sp, #28
   238aa:	f7ff ff93 	bl	237d4 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   238ae:	2310      	movs	r3, #16
   238b0:	4619      	mov	r1, r3
   238b2:	eb0d 0203 	add.w	r2, sp, r3
   238b6:	4668      	mov	r0, sp
   238b8:	f7ff f80e 	bl	228d8 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   238bc:	4621      	mov	r1, r4
   238be:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   238c0:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   238c2:	f7ff ff09 	bl	236d8 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   238c6:	42a6      	cmp	r6, r4
   238c8:	d1db      	bne.n	23882 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   238ca:	f7e0 fccb 	bl	4264 <sub_bytes>
	shift_rows(state);
   238ce:	4668      	mov	r0, sp
   238d0:	f7ff ff47 	bl	23762 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   238d4:	4631      	mov	r1, r6
   238d6:	4668      	mov	r0, sp
   238d8:	f7ff fefe 	bl	236d8 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   238dc:	2310      	movs	r3, #16
   238de:	4619      	mov	r1, r3
   238e0:	466a      	mov	r2, sp
   238e2:	4628      	mov	r0, r5
   238e4:	f7fe fff8 	bl	228d8 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   238e8:	4668      	mov	r0, sp
   238ea:	2210      	movs	r2, #16
   238ec:	2100      	movs	r1, #0
   238ee:	f7ff f800 	bl	228f2 <_set>

	return TC_CRYPTO_SUCCESS;
   238f2:	2001      	movs	r0, #1
}
   238f4:	b008      	add	sp, #32
   238f6:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   238f8:	4608      	mov	r0, r1
   238fa:	e7fb      	b.n	238f4 <tc_aes_encrypt+0xa0>
   238fc:	4610      	mov	r0, r2
   238fe:	e7f9      	b.n	238f4 <tc_aes_encrypt+0xa0>

00023900 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   23900:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   23902:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   23904:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   23906:	f912 3b10 	ldrsb.w	r3, [r2], #16
   2390a:	2b00      	cmp	r3, #0
   2390c:	bfb4      	ite	lt
   2390e:	2387      	movlt	r3, #135	; 0x87
   23910:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   23912:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   23916:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   2391a:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   2391c:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   23920:	d002      	beq.n	23928 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   23922:	7813      	ldrb	r3, [r2, #0]
   23924:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   23926:	e7f4      	b.n	23912 <gf_double+0x12>
	}
}
   23928:	bd10      	pop	{r4, pc}

0002392a <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   2392a:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   2392c:	b120      	cbz	r0, 23938 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   2392e:	2258      	movs	r2, #88	; 0x58
   23930:	2100      	movs	r1, #0
   23932:	f7fe ffde 	bl	228f2 <_set>
   23936:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   23938:	bd08      	pop	{r3, pc}

0002393a <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   2393a:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2393c:	4604      	mov	r4, r0
   2393e:	b188      	cbz	r0, 23964 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   23940:	2210      	movs	r2, #16
   23942:	2100      	movs	r1, #0
   23944:	f7fe ffd5 	bl	228f2 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   23948:	2210      	movs	r2, #16
   2394a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2394e:	2100      	movs	r1, #0
   23950:	f7fe ffcf 	bl	228f2 <_set>
	s->leftover_offset = 0;
   23954:	2300      	movs	r3, #0
   23956:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   23958:	2200      	movs	r2, #0
   2395a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2395e:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   23962:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   23964:	bd10      	pop	{r4, pc}

00023966 <tc_cmac_setup>:
{
   23966:	b570      	push	{r4, r5, r6, lr}
   23968:	460d      	mov	r5, r1
   2396a:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   2396c:	4604      	mov	r4, r0
   2396e:	b310      	cbz	r0, 239b6 <tc_cmac_setup+0x50>
   23970:	b311      	cbz	r1, 239b8 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   23972:	2258      	movs	r2, #88	; 0x58
   23974:	2100      	movs	r1, #0
   23976:	f7fe ffbc 	bl	228f2 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   2397a:	4629      	mov	r1, r5
	s->sched = sched;
   2397c:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   2397e:	4630      	mov	r0, r6
   23980:	f7e0 fc7c 	bl	427c <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   23984:	2210      	movs	r2, #16
   23986:	2100      	movs	r1, #0
   23988:	4620      	mov	r0, r4
   2398a:	f7fe ffb2 	bl	228f2 <_set>
	gf_double (s->K1, s->iv);
   2398e:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   23992:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   23994:	4621      	mov	r1, r4
   23996:	4620      	mov	r0, r4
   23998:	f7ff ff5c 	bl	23854 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   2399c:	4621      	mov	r1, r4
   2399e:	4628      	mov	r0, r5
   239a0:	f7ff ffae 	bl	23900 <gf_double>
	gf_double (s->K2, s->K1);
   239a4:	4629      	mov	r1, r5
   239a6:	f104 0020 	add.w	r0, r4, #32
   239aa:	f7ff ffa9 	bl	23900 <gf_double>
	tc_cmac_init(s);
   239ae:	4620      	mov	r0, r4
   239b0:	f7ff ffc3 	bl	2393a <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   239b4:	2001      	movs	r0, #1
}
   239b6:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   239b8:	4608      	mov	r0, r1
   239ba:	e7fc      	b.n	239b6 <tc_cmac_setup+0x50>

000239bc <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   239bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   239c0:	460d      	mov	r5, r1
   239c2:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   239c4:	4604      	mov	r4, r0
   239c6:	2800      	cmp	r0, #0
   239c8:	d061      	beq.n	23a8e <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   239ca:	b912      	cbnz	r2, 239d2 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   239cc:	2001      	movs	r0, #1
}
   239ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   239d2:	2900      	cmp	r1, #0
   239d4:	d05b      	beq.n	23a8e <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   239d6:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   239da:	ea53 0102 	orrs.w	r1, r3, r2
   239de:	d056      	beq.n	23a8e <tc_cmac_update+0xd2>
	s->countdown--;
   239e0:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   239e2:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   239e6:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   239ea:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   239ee:	f1b8 0f00 	cmp.w	r8, #0
   239f2:	d02a      	beq.n	23a4a <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   239f4:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   239f8:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   239fc:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   239fe:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   23a00:	d208      	bcs.n	23a14 <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   23a02:	462a      	mov	r2, r5
   23a04:	4633      	mov	r3, r6
   23a06:	4631      	mov	r1, r6
   23a08:	f7fe ff66 	bl	228d8 <_copy>
			s->leftover_offset += data_length;
   23a0c:	6c62      	ldr	r2, [r4, #68]	; 0x44
   23a0e:	4432      	add	r2, r6
   23a10:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   23a12:	e7db      	b.n	239cc <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   23a14:	463b      	mov	r3, r7
   23a16:	462a      	mov	r2, r5
   23a18:	4639      	mov	r1, r7
   23a1a:	f7fe ff5d 	bl	228d8 <_copy>
		data_length -= remaining_space;
   23a1e:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   23a20:	2300      	movs	r3, #0
   23a22:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   23a24:	4446      	add	r6, r8
		data += remaining_space;
   23a26:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   23a28:	1e63      	subs	r3, r4, #1
   23a2a:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   23a2e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   23a32:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   23a36:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   23a38:	ea82 0200 	eor.w	r2, r2, r0
   23a3c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   23a3e:	d1f6      	bne.n	23a2e <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   23a40:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   23a42:	4621      	mov	r1, r4
   23a44:	4620      	mov	r0, r4
   23a46:	f7ff ff05 	bl	23854 <tc_aes_encrypt>
   23a4a:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   23a4e:	2e10      	cmp	r6, #16
   23a50:	d80a      	bhi.n	23a68 <tc_cmac_update+0xac>
	if (data_length > 0) {
   23a52:	2e00      	cmp	r6, #0
   23a54:	d0ba      	beq.n	239cc <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   23a56:	4633      	mov	r3, r6
   23a58:	462a      	mov	r2, r5
   23a5a:	4631      	mov	r1, r6
   23a5c:	f104 0030 	add.w	r0, r4, #48	; 0x30
   23a60:	f7fe ff3a 	bl	228d8 <_copy>
		s->leftover_offset = data_length;
   23a64:	6466      	str	r6, [r4, #68]	; 0x44
   23a66:	e7b1      	b.n	239cc <tc_cmac_update+0x10>
   23a68:	1e63      	subs	r3, r4, #1
   23a6a:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   23a6c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   23a70:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   23a74:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   23a76:	ea82 0200 	eor.w	r2, r2, r0
   23a7a:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   23a7c:	d1f6      	bne.n	23a6c <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   23a7e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   23a80:	4621      	mov	r1, r4
   23a82:	4620      	mov	r0, r4
   23a84:	f7ff fee6 	bl	23854 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   23a88:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   23a8a:	3e10      	subs	r6, #16
   23a8c:	e7df      	b.n	23a4e <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   23a8e:	2000      	movs	r0, #0
   23a90:	e79d      	b.n	239ce <tc_cmac_update+0x12>

00023a92 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   23a92:	b570      	push	{r4, r5, r6, lr}
   23a94:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   23a96:	4605      	mov	r5, r0
   23a98:	b1e8      	cbz	r0, 23ad6 <tc_cmac_final+0x44>
   23a9a:	b369      	cbz	r1, 23af8 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   23a9c:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   23a9e:	2a10      	cmp	r2, #16
   23aa0:	d11a      	bne.n	23ad8 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   23aa2:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   23aa4:	1e63      	subs	r3, r4, #1
   23aa6:	3901      	subs	r1, #1
   23aa8:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   23aac:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   23ab0:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   23ab4:	4072      	eors	r2, r6
   23ab6:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   23aba:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   23abc:	ea82 0206 	eor.w	r2, r2, r6
   23ac0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   23ac2:	d1f3      	bne.n	23aac <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   23ac4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   23ac6:	4621      	mov	r1, r4
   23ac8:	4628      	mov	r0, r5
   23aca:	f7ff fec3 	bl	23854 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   23ace:	4620      	mov	r0, r4
   23ad0:	f7ff ff2b 	bl	2392a <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   23ad4:	2001      	movs	r0, #1
}
   23ad6:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   23ad8:	f102 0030 	add.w	r0, r2, #48	; 0x30
   23adc:	2100      	movs	r1, #0
   23ade:	f1c2 0210 	rsb	r2, r2, #16
   23ae2:	4420      	add	r0, r4
   23ae4:	f7fe ff05 	bl	228f2 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   23ae8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   23aea:	4423      	add	r3, r4
   23aec:	2280      	movs	r2, #128	; 0x80
   23aee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   23af2:	f104 0120 	add.w	r1, r4, #32
   23af6:	e7d5      	b.n	23aa4 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   23af8:	4608      	mov	r0, r1
   23afa:	e7ec      	b.n	23ad6 <tc_cmac_final+0x44>

00023afc <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   23afc:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   23afe:	6800      	ldr	r0, [r0, #0]
   23b00:	f7e0 bc2c 	b.w	435c <z_arm_fatal_error>

00023b04 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   23b04:	2100      	movs	r1, #0
   23b06:	2001      	movs	r0, #1
   23b08:	f7e0 bc28 	b.w	435c <z_arm_fatal_error>

00023b0c <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   23b0c:	b508      	push	{r3, lr}
	handler();
   23b0e:	f7e0 fcb5 	bl	447c <z_SysNmiOnReset>
	z_arm_int_exit();
}
   23b12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   23b16:	f7e0 bd95 	b.w	4644 <z_arm_exc_exit>

00023b1a <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   23b1a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23b1e:	4684      	mov	ip, r0
   23b20:	4688      	mov	r8, r1
	register const char *s = nptr;
   23b22:	4604      	mov	r4, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   23b24:	4621      	mov	r1, r4
   23b26:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   23b2a:	2b20      	cmp	r3, #32
   23b2c:	d0fa      	beq.n	23b24 <strtol+0xa>
   23b2e:	f1a3 0009 	sub.w	r0, r3, #9
   23b32:	2804      	cmp	r0, #4
   23b34:	d9f6      	bls.n	23b24 <strtol+0xa>
	} while (isspace(c));
	if (c == '-') {
   23b36:	2b2d      	cmp	r3, #45	; 0x2d
   23b38:	d12d      	bne.n	23b96 <strtol+0x7c>
		neg = 1;
		c = *s++;
   23b3a:	784b      	ldrb	r3, [r1, #1]
   23b3c:	1c8c      	adds	r4, r1, #2
		neg = 1;
   23b3e:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   23b40:	2a00      	cmp	r2, #0
   23b42:	d05a      	beq.n	23bfa <strtol+0xe0>
   23b44:	2a10      	cmp	r2, #16
   23b46:	d109      	bne.n	23b5c <strtol+0x42>
   23b48:	2b30      	cmp	r3, #48	; 0x30
   23b4a:	d107      	bne.n	23b5c <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   23b4c:	7823      	ldrb	r3, [r4, #0]
   23b4e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   23b52:	2b58      	cmp	r3, #88	; 0x58
   23b54:	d14c      	bne.n	23bf0 <strtol+0xd6>
		c = s[1];
   23b56:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   23b58:	2210      	movs	r2, #16
		s += 2;
   23b5a:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   23b5c:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   23b60:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   23b62:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
   23b64:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   23b68:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   23b6a:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   23b6e:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   23b72:	2d09      	cmp	r5, #9
   23b74:	d815      	bhi.n	23ba2 <strtol+0x88>
			c -= '0';
   23b76:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   23b78:	429a      	cmp	r2, r3
   23b7a:	dd22      	ble.n	23bc2 <strtol+0xa8>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   23b7c:	1c75      	adds	r5, r6, #1
   23b7e:	d007      	beq.n	23b90 <strtol+0x76>
   23b80:	4570      	cmp	r0, lr
   23b82:	d81b      	bhi.n	23bbc <strtol+0xa2>
   23b84:	d101      	bne.n	23b8a <strtol+0x70>
   23b86:	454b      	cmp	r3, r9
   23b88:	dc18      	bgt.n	23bbc <strtol+0xa2>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   23b8a:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   23b8e:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
   23b90:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   23b94:	e7eb      	b.n	23b6e <strtol+0x54>
	} else if (c == '+') {
   23b96:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   23b98:	bf04      	itt	eq
   23b9a:	784b      	ldrbeq	r3, [r1, #1]
   23b9c:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   23b9e:	2100      	movs	r1, #0
   23ba0:	e7ce      	b.n	23b40 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   23ba2:	f043 0520 	orr.w	r5, r3, #32
   23ba6:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   23ba8:	2d19      	cmp	r5, #25
   23baa:	d80a      	bhi.n	23bc2 <strtol+0xa8>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   23bac:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   23bb0:	2d1a      	cmp	r5, #26
   23bb2:	bf34      	ite	cc
   23bb4:	2537      	movcc	r5, #55	; 0x37
   23bb6:	2557      	movcs	r5, #87	; 0x57
   23bb8:	1b5b      	subs	r3, r3, r5
   23bba:	e7dd      	b.n	23b78 <strtol+0x5e>
			any = -1;
   23bbc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   23bc0:	e7e6      	b.n	23b90 <strtol+0x76>
		}
	}

	if (any < 0) {
   23bc2:	1c73      	adds	r3, r6, #1
   23bc4:	d109      	bne.n	23bda <strtol+0xc0>
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   23bc6:	f7fb fec5 	bl	1f954 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   23bca:	2322      	movs	r3, #34	; 0x22
   23bcc:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   23bce:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   23bd0:	f1b8 0f00 	cmp.w	r8, #0
   23bd4:	d107      	bne.n	23be6 <strtol+0xcc>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   23bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   23bda:	b101      	cbz	r1, 23bde <strtol+0xc4>
		acc = -acc;
   23bdc:	4240      	negs	r0, r0
	if (endptr != NULL) {
   23bde:	f1b8 0f00 	cmp.w	r8, #0
   23be2:	d0f8      	beq.n	23bd6 <strtol+0xbc>
		*endptr = (char *)(any ? s - 1 : nptr);
   23be4:	b10e      	cbz	r6, 23bea <strtol+0xd0>
   23be6:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   23bea:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   23bee:	e7f2      	b.n	23bd6 <strtol+0xbc>
	if (base == 0) {
   23bf0:	2330      	movs	r3, #48	; 0x30
   23bf2:	2a00      	cmp	r2, #0
   23bf4:	d1b2      	bne.n	23b5c <strtol+0x42>
		base = c == '0' ? 8 : 10;
   23bf6:	2208      	movs	r2, #8
   23bf8:	e7b0      	b.n	23b5c <strtol+0x42>
	if ((base == 0 || base == 16) &&
   23bfa:	2b30      	cmp	r3, #48	; 0x30
   23bfc:	d0a6      	beq.n	23b4c <strtol+0x32>
		base = c == '0' ? 8 : 10;
   23bfe:	220a      	movs	r2, #10
   23c00:	e7ac      	b.n	23b5c <strtol+0x42>

00023c02 <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   23c02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23c06:	4607      	mov	r7, r0
   23c08:	4688      	mov	r8, r1
	register const char *s = nptr;
   23c0a:	4604      	mov	r4, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   23c0c:	4621      	mov	r1, r4
   23c0e:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   23c12:	2b20      	cmp	r3, #32
   23c14:	d0fa      	beq.n	23c0c <strtoul+0xa>
   23c16:	f1a3 0009 	sub.w	r0, r3, #9
   23c1a:	2804      	cmp	r0, #4
   23c1c:	d9f6      	bls.n	23c0c <strtoul+0xa>
	} while (isspace(c));
	if (c == '-') {
   23c1e:	2b2d      	cmp	r3, #45	; 0x2d
   23c20:	d12f      	bne.n	23c82 <strtoul+0x80>
		neg = 1;
		c = *s++;
   23c22:	784b      	ldrb	r3, [r1, #1]
   23c24:	1c8c      	adds	r4, r1, #2
		neg = 1;
   23c26:	f04f 0c01 	mov.w	ip, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   23c2a:	2a00      	cmp	r2, #0
   23c2c:	d05e      	beq.n	23cec <strtoul+0xea>
   23c2e:	2a10      	cmp	r2, #16
   23c30:	d109      	bne.n	23c46 <strtoul+0x44>
   23c32:	2b30      	cmp	r3, #48	; 0x30
   23c34:	d107      	bne.n	23c46 <strtoul+0x44>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   23c36:	7823      	ldrb	r3, [r4, #0]
   23c38:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   23c3c:	2b58      	cmp	r3, #88	; 0x58
   23c3e:	d150      	bne.n	23ce2 <strtoul+0xe0>
		c = s[1];
   23c40:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   23c42:	2210      	movs	r2, #16
		s += 2;
   23c44:	3402      	adds	r4, #2

	if (base == 0) {
		base = c == '0' ? 8 : 10;
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   23c46:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   23c4a:	2600      	movs	r6, #0
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   23c4c:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   23c50:	fb02 fe01 	mul.w	lr, r2, r1
   23c54:	ea6f 0e0e 	mvn.w	lr, lr
	for (acc = 0, any = 0;; c = *s++) {
   23c58:	4630      	mov	r0, r6
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   23c5a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   23c5e:	2d09      	cmp	r5, #9
   23c60:	d816      	bhi.n	23c90 <strtoul+0x8e>
			c -= '0';
   23c62:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   23c64:	429a      	cmp	r2, r3
   23c66:	dd23      	ble.n	23cb0 <strtoul+0xae>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   23c68:	2e00      	cmp	r6, #0
   23c6a:	db1e      	blt.n	23caa <strtoul+0xa8>
   23c6c:	4288      	cmp	r0, r1
   23c6e:	d81c      	bhi.n	23caa <strtoul+0xa8>
   23c70:	d101      	bne.n	23c76 <strtoul+0x74>
   23c72:	4573      	cmp	r3, lr
   23c74:	dc19      	bgt.n	23caa <strtoul+0xa8>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   23c76:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   23c7a:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
   23c7c:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   23c80:	e7eb      	b.n	23c5a <strtoul+0x58>
	} else if (c == '+') {
   23c82:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   23c84:	bf04      	itt	eq
   23c86:	784b      	ldrbeq	r3, [r1, #1]
   23c88:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   23c8a:	f04f 0c00 	mov.w	ip, #0
   23c8e:	e7cc      	b.n	23c2a <strtoul+0x28>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   23c90:	f043 0520 	orr.w	r5, r3, #32
   23c94:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   23c96:	2d19      	cmp	r5, #25
   23c98:	d80a      	bhi.n	23cb0 <strtoul+0xae>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   23c9a:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   23c9e:	2d1a      	cmp	r5, #26
   23ca0:	bf34      	ite	cc
   23ca2:	2537      	movcc	r5, #55	; 0x37
   23ca4:	2557      	movcs	r5, #87	; 0x57
   23ca6:	1b5b      	subs	r3, r3, r5
   23ca8:	e7dc      	b.n	23c64 <strtoul+0x62>
			any = -1;
   23caa:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   23cae:	e7e5      	b.n	23c7c <strtoul+0x7a>
		}
	}
	if (any < 0) {
   23cb0:	2e00      	cmp	r6, #0
   23cb2:	da0a      	bge.n	23cca <strtoul+0xc8>
   23cb4:	f7fb fe4e 	bl	1f954 <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   23cb8:	2322      	movs	r3, #34	; 0x22
   23cba:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   23cbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   23cc0:	f1b8 0f00 	cmp.w	r8, #0
   23cc4:	d109      	bne.n	23cda <strtoul+0xd8>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   23cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   23cca:	f1bc 0f00 	cmp.w	ip, #0
   23cce:	d000      	beq.n	23cd2 <strtoul+0xd0>
		acc = -acc;
   23cd0:	4240      	negs	r0, r0
	if (endptr != NULL) {
   23cd2:	f1b8 0f00 	cmp.w	r8, #0
   23cd6:	d0f6      	beq.n	23cc6 <strtoul+0xc4>
		*endptr = (char *)(any ? s - 1 : nptr);
   23cd8:	b106      	cbz	r6, 23cdc <strtoul+0xda>
   23cda:	1e67      	subs	r7, r4, #1
   23cdc:	f8c8 7000 	str.w	r7, [r8]
	return acc;
   23ce0:	e7f1      	b.n	23cc6 <strtoul+0xc4>
	if (base == 0) {
   23ce2:	2330      	movs	r3, #48	; 0x30
   23ce4:	2a00      	cmp	r2, #0
   23ce6:	d1ae      	bne.n	23c46 <strtoul+0x44>
		base = c == '0' ? 8 : 10;
   23ce8:	2208      	movs	r2, #8
   23cea:	e7ac      	b.n	23c46 <strtoul+0x44>
	if ((base == 0 || base == 16) &&
   23cec:	2b30      	cmp	r3, #48	; 0x30
   23cee:	d0a2      	beq.n	23c36 <strtoul+0x34>
		base = c == '0' ? 8 : 10;
   23cf0:	220a      	movs	r2, #10
   23cf2:	e7a8      	b.n	23c46 <strtoul+0x44>

00023cf4 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   23cf4:	3901      	subs	r1, #1
   23cf6:	4603      	mov	r3, r0
   23cf8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   23cfc:	b90a      	cbnz	r2, 23d02 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   23cfe:	701a      	strb	r2, [r3, #0]

	return dest;
}
   23d00:	4770      	bx	lr
		*d = *s;
   23d02:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   23d06:	e7f7      	b.n	23cf8 <strcpy+0x4>

00023d08 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   23d08:	b570      	push	{r4, r5, r6, lr}
   23d0a:	4605      	mov	r5, r0
   23d0c:	462b      	mov	r3, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   23d0e:	b142      	cbz	r2, 23d22 <strncpy+0x1a>
   23d10:	f811 4b01 	ldrb.w	r4, [r1], #1
		*d = *s;
		s++;
		d++;
		n--;
   23d14:	1e56      	subs	r6, r2, #1
	while ((n > 0) && *s != '\0') {
   23d16:	b92c      	cbnz	r4, 23d24 <strncpy+0x1c>
   23d18:	442a      	add	r2, r5
	}

	while (n > 0) {
		*d = '\0';
   23d1a:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
   23d1e:	429a      	cmp	r2, r3
   23d20:	d1fb      	bne.n	23d1a <strncpy+0x12>
		d++;
		n--;
	}

	return dest;
}
   23d22:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   23d24:	f805 4b01 	strb.w	r4, [r5], #1
		n--;
   23d28:	4632      	mov	r2, r6
   23d2a:	e7ef      	b.n	23d0c <strncpy+0x4>

00023d2c <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   23d2c:	4603      	mov	r3, r0
	size_t n = 0;
   23d2e:	2000      	movs	r0, #0

	while (*s != '\0') {
   23d30:	5c1a      	ldrb	r2, [r3, r0]
   23d32:	b902      	cbnz	r2, 23d36 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   23d34:	4770      	bx	lr
		n++;
   23d36:	3001      	adds	r0, #1
   23d38:	e7fa      	b.n	23d30 <strlen+0x4>

00023d3a <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   23d3a:	4603      	mov	r3, r0
	size_t n = 0;
   23d3c:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   23d3e:	5c1a      	ldrb	r2, [r3, r0]
   23d40:	b10a      	cbz	r2, 23d46 <strnlen+0xc>
   23d42:	4288      	cmp	r0, r1
   23d44:	d100      	bne.n	23d48 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   23d46:	4770      	bx	lr
		n++;
   23d48:	3001      	adds	r0, #1
   23d4a:	e7f8      	b.n	23d3e <strnlen+0x4>

00023d4c <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   23d4c:	1e43      	subs	r3, r0, #1
   23d4e:	3901      	subs	r1, #1
   23d50:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   23d54:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   23d58:	4282      	cmp	r2, r0
   23d5a:	d101      	bne.n	23d60 <strcmp+0x14>
   23d5c:	2a00      	cmp	r2, #0
   23d5e:	d1f7      	bne.n	23d50 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   23d60:	1a10      	subs	r0, r2, r0
   23d62:	4770      	bx	lr

00023d64 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   23d64:	b510      	push	{r4, lr}
   23d66:	3901      	subs	r1, #1
   23d68:	4402      	add	r2, r0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   23d6a:	4282      	cmp	r2, r0
   23d6c:	d009      	beq.n	23d82 <strncmp+0x1e>
   23d6e:	7803      	ldrb	r3, [r0, #0]
   23d70:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   23d74:	42a3      	cmp	r3, r4
   23d76:	d100      	bne.n	23d7a <strncmp+0x16>
   23d78:	b90b      	cbnz	r3, 23d7e <strncmp+0x1a>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   23d7a:	1b18      	subs	r0, r3, r4
   23d7c:	e002      	b.n	23d84 <strncmp+0x20>
		s1++;
   23d7e:	3001      	adds	r0, #1
		n--;
   23d80:	e7f3      	b.n	23d6a <strncmp+0x6>
	return (n == 0) ? 0 : (*s1 - *s2);
   23d82:	2000      	movs	r0, #0
}
   23d84:	bd10      	pop	{r4, pc}

00023d86 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   23d86:	b510      	push	{r4, lr}
   23d88:	4603      	mov	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   23d8a:	b15a      	cbz	r2, 23da4 <memcmp+0x1e>
   23d8c:	3901      	subs	r1, #1
   23d8e:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   23d90:	f813 0b01 	ldrb.w	r0, [r3], #1
   23d94:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   23d98:	42a3      	cmp	r3, r4
   23d9a:	d001      	beq.n	23da0 <memcmp+0x1a>
   23d9c:	4290      	cmp	r0, r2
   23d9e:	d0f7      	beq.n	23d90 <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   23da0:	1a80      	subs	r0, r0, r2
}
   23da2:	bd10      	pop	{r4, pc}
		return 0;
   23da4:	4610      	mov	r0, r2
   23da6:	e7fc      	b.n	23da2 <memcmp+0x1c>

00023da8 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   23da8:	b510      	push	{r4, lr}
   23daa:	1e43      	subs	r3, r0, #1
   23dac:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   23dae:	4291      	cmp	r1, r2
   23db0:	d100      	bne.n	23db4 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   23db2:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   23db4:	f811 4b01 	ldrb.w	r4, [r1], #1
   23db8:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   23dbc:	e7f7      	b.n	23dae <memcpy+0x6>

00023dbe <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   23dbe:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   23dc0:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   23dc2:	4603      	mov	r3, r0
	while (n > 0) {
   23dc4:	4293      	cmp	r3, r2
   23dc6:	d100      	bne.n	23dca <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   23dc8:	4770      	bx	lr
		*(d_byte++) = c_byte;
   23dca:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   23dce:	e7f9      	b.n	23dc4 <memset+0x6>

00023dd0 <_stdout_hook_default>:
}
   23dd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23dd4:	4770      	bx	lr

00023dd6 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   23dd6:	b084      	sub	sp, #16
   23dd8:	ab04      	add	r3, sp, #16
   23dda:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   23dde:	f89d 3004 	ldrb.w	r3, [sp, #4]
   23de2:	2b06      	cmp	r3, #6
   23de4:	d108      	bne.n	23df8 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   23de6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   23dea:	2201      	movs	r2, #1
   23dec:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   23df0:	f3bf 8f4f 	dsb	sy
        __WFE();
   23df4:	bf20      	wfe
    while (true)
   23df6:	e7fd      	b.n	23df4 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   23df8:	b004      	add	sp, #16
   23dfa:	4770      	bx	lr

00023dfc <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   23dfc:	b084      	sub	sp, #16
   23dfe:	ab04      	add	r3, sp, #16
   23e00:	e903 0007 	stmdb	r3, {r0, r1, r2}
   23e04:	2300      	movs	r3, #0
   23e06:	f383 8811 	msr	BASEPRI, r3
   23e0a:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   23e0e:	b004      	add	sp, #16
   23e10:	4770      	bx	lr

00023e12 <send_cmd_status>:
{
   23e12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   23e16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   23e1a:	4606      	mov	r6, r0
   23e1c:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   23e1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   23e22:	2100      	movs	r1, #0
   23e24:	200f      	movs	r0, #15
   23e26:	f7e1 fbab 	bl	5580 <bt_buf_get_evt>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   23e2a:	2701      	movs	r7, #1
	return net_buf_simple_add(&buf->b, len);
   23e2c:	f100 0808 	add.w	r8, r0, #8
   23e30:	4604      	mov	r4, r0
   23e32:	7507      	strb	r7, [r0, #20]
   23e34:	2102      	movs	r1, #2
   23e36:	4640      	mov	r0, r8
   23e38:	f004 fa06 	bl	28248 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   23e3c:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   23e3e:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   23e40:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   23e42:	7041      	strb	r1, [r0, #1]
   23e44:	4640      	mov	r0, r8
   23e46:	f004 f9ff 	bl	28248 <net_buf_simple_add>
	evt->ncmd = 1U;
   23e4a:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   23e4c:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   23e4e:	8046      	strh	r6, [r0, #2]
		bt_recv_prio(buf);
   23e50:	4620      	mov	r0, r4
}
   23e52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv_prio(buf);
   23e56:	f7e2 bb31 	b.w	64bc <bt_recv_prio>

00023e5a <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   23e5a:	f101 0320 	add.w	r3, r1, #32
   23e5e:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   23e60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   23e64:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   23e68:	428b      	cmp	r3, r1
   23e6a:	d1f9      	bne.n	23e60 <sys_memcpy_swap.constprop.0+0x6>
}
   23e6c:	4770      	bx	lr

00023e6e <bt_hci_ecc_supported_commands>:
	supported_commands[34] |= BIT(2);
   23e6e:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   23e72:	f043 0306 	orr.w	r3, r3, #6
   23e76:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	supported_commands[41] |= BIT(2);
   23e7a:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   23e7e:	f043 0304 	orr.w	r3, r3, #4
   23e82:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
}
   23e86:	4770      	bx	lr

00023e88 <default_CSPRNG>:
{
   23e88:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   23e8a:	f003 face 	bl	2742a <bt_rand>
}
   23e8e:	fab0 f080 	clz	r0, r0
   23e92:	0940      	lsrs	r0, r0, #5
   23e94:	bd08      	pop	{r3, pc}

00023e96 <bt_settings_decode_key>:
{
   23e96:	b570      	push	{r4, r5, r6, lr}
   23e98:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   23e9a:	2100      	movs	r1, #0
{
   23e9c:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   23e9e:	f7fe fc4b 	bl	22738 <settings_name_next>
   23ea2:	280d      	cmp	r0, #13
   23ea4:	d118      	bne.n	23ed8 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   23ea6:	7b23      	ldrb	r3, [r4, #12]
   23ea8:	2b30      	cmp	r3, #48	; 0x30
   23eaa:	d111      	bne.n	23ed0 <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   23eac:	2300      	movs	r3, #0
   23eae:	702b      	strb	r3, [r5, #0]
   23eb0:	f104 060c 	add.w	r6, r4, #12
   23eb4:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   23eb6:	462a      	mov	r2, r5
   23eb8:	4620      	mov	r0, r4
   23eba:	2301      	movs	r3, #1
   23ebc:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   23ebe:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   23ec0:	f7fd f957 	bl	21172 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   23ec4:	42b4      	cmp	r4, r6
   23ec6:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   23eca:	d1f4      	bne.n	23eb6 <bt_settings_decode_key+0x20>
	return 0;
   23ecc:	2000      	movs	r0, #0
}
   23ece:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   23ed0:	2b31      	cmp	r3, #49	; 0x31
   23ed2:	d101      	bne.n	23ed8 <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   23ed4:	2301      	movs	r3, #1
   23ed6:	e7ea      	b.n	23eae <bt_settings_decode_key+0x18>
		return -EINVAL;
   23ed8:	f06f 0015 	mvn.w	r0, #21
   23edc:	e7f7      	b.n	23ece <bt_settings_decode_key+0x38>

00023ede <xor16>:
#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_HCI_CORE)
#define LOG_MODULE_NAME bt_aes_ccm
#include "common/log.h"

static inline void xor16(uint8_t *dst, const uint8_t *a, const uint8_t *b)
{
   23ede:	b510      	push	{r4, lr}
	dst[0] = a[0] ^ b[0];
   23ee0:	780b      	ldrb	r3, [r1, #0]
   23ee2:	7814      	ldrb	r4, [r2, #0]
   23ee4:	4063      	eors	r3, r4
   23ee6:	7003      	strb	r3, [r0, #0]
	dst[1] = a[1] ^ b[1];
   23ee8:	7854      	ldrb	r4, [r2, #1]
   23eea:	784b      	ldrb	r3, [r1, #1]
   23eec:	4063      	eors	r3, r4
   23eee:	7043      	strb	r3, [r0, #1]
	dst[2] = a[2] ^ b[2];
   23ef0:	7894      	ldrb	r4, [r2, #2]
   23ef2:	788b      	ldrb	r3, [r1, #2]
   23ef4:	4063      	eors	r3, r4
   23ef6:	7083      	strb	r3, [r0, #2]
	dst[3] = a[3] ^ b[3];
   23ef8:	78d4      	ldrb	r4, [r2, #3]
   23efa:	78cb      	ldrb	r3, [r1, #3]
   23efc:	4063      	eors	r3, r4
   23efe:	70c3      	strb	r3, [r0, #3]
	dst[4] = a[4] ^ b[4];
   23f00:	7914      	ldrb	r4, [r2, #4]
   23f02:	790b      	ldrb	r3, [r1, #4]
   23f04:	4063      	eors	r3, r4
   23f06:	7103      	strb	r3, [r0, #4]
	dst[5] = a[5] ^ b[5];
   23f08:	7954      	ldrb	r4, [r2, #5]
   23f0a:	794b      	ldrb	r3, [r1, #5]
   23f0c:	4063      	eors	r3, r4
   23f0e:	7143      	strb	r3, [r0, #5]
	dst[6] = a[6] ^ b[6];
   23f10:	7994      	ldrb	r4, [r2, #6]
   23f12:	798b      	ldrb	r3, [r1, #6]
   23f14:	4063      	eors	r3, r4
   23f16:	7183      	strb	r3, [r0, #6]
	dst[7] = a[7] ^ b[7];
   23f18:	79d4      	ldrb	r4, [r2, #7]
   23f1a:	79cb      	ldrb	r3, [r1, #7]
   23f1c:	4063      	eors	r3, r4
   23f1e:	71c3      	strb	r3, [r0, #7]
	dst[8] = a[8] ^ b[8];
   23f20:	7a14      	ldrb	r4, [r2, #8]
   23f22:	7a0b      	ldrb	r3, [r1, #8]
   23f24:	4063      	eors	r3, r4
   23f26:	7203      	strb	r3, [r0, #8]
	dst[9] = a[9] ^ b[9];
   23f28:	7a54      	ldrb	r4, [r2, #9]
   23f2a:	7a4b      	ldrb	r3, [r1, #9]
   23f2c:	4063      	eors	r3, r4
   23f2e:	7243      	strb	r3, [r0, #9]
	dst[10] = a[10] ^ b[10];
   23f30:	7a8b      	ldrb	r3, [r1, #10]
   23f32:	7a94      	ldrb	r4, [r2, #10]
   23f34:	4063      	eors	r3, r4
   23f36:	7283      	strb	r3, [r0, #10]
	dst[11] = a[11] ^ b[11];
   23f38:	7ad4      	ldrb	r4, [r2, #11]
   23f3a:	7acb      	ldrb	r3, [r1, #11]
   23f3c:	4063      	eors	r3, r4
   23f3e:	72c3      	strb	r3, [r0, #11]
	dst[12] = a[12] ^ b[12];
   23f40:	7b14      	ldrb	r4, [r2, #12]
   23f42:	7b0b      	ldrb	r3, [r1, #12]
   23f44:	4063      	eors	r3, r4
   23f46:	7303      	strb	r3, [r0, #12]
	dst[13] = a[13] ^ b[13];
   23f48:	7b54      	ldrb	r4, [r2, #13]
   23f4a:	7b4b      	ldrb	r3, [r1, #13]
   23f4c:	4063      	eors	r3, r4
   23f4e:	7343      	strb	r3, [r0, #13]
	dst[14] = a[14] ^ b[14];
   23f50:	7b94      	ldrb	r4, [r2, #14]
   23f52:	7b8b      	ldrb	r3, [r1, #14]
   23f54:	4063      	eors	r3, r4
   23f56:	7383      	strb	r3, [r0, #14]
	dst[15] = a[15] ^ b[15];
   23f58:	7bcb      	ldrb	r3, [r1, #15]
   23f5a:	7bd2      	ldrb	r2, [r2, #15]
   23f5c:	4053      	eors	r3, r2
   23f5e:	73c3      	strb	r3, [r0, #15]
}
   23f60:	bd10      	pop	{r4, pc}

00023f62 <ccm_crypt.isra.0>:
	}

	return 0;
}

static int ccm_crypt(const uint8_t key[16], const uint8_t nonce[13],
   23f62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23f66:	b08b      	sub	sp, #44	; 0x2c
   23f68:	4607      	mov	r7, r0
   23f6a:	9d14      	ldr	r5, [sp, #80]	; 0x50
   23f6c:	4690      	mov	r8, r2
	uint16_t last_blk, blk_cnt;
	size_t i, j;
	int err;

	last_blk = msg_len % 16;
	blk_cnt = (msg_len + 15) / 16;
   23f6e:	f105 060f 	add.w	r6, r5, #15
	if (!last_blk) {
		last_blk = 16U;
	}

	a_i[0] = 0x01;
   23f72:	2401      	movs	r4, #1
		last_blk = 16U;
   23f74:	f015 050f 	ands.w	r5, r5, #15
	memcpy(&a_i[1], nonce, 13);
   23f78:	f04f 020d 	mov.w	r2, #13
   23f7c:	f10d 0009 	add.w	r0, sp, #9
static int ccm_crypt(const uint8_t key[16], const uint8_t nonce[13],
   23f80:	4699      	mov	r9, r3
	blk_cnt = (msg_len + 15) / 16;
   23f82:	ea4f 1616 	mov.w	r6, r6, lsr #4
		last_blk = 16U;
   23f86:	bf08      	it	eq
   23f88:	2510      	moveq	r5, #16
	a_i[0] = 0x01;
   23f8a:	f88d 4008 	strb.w	r4, [sp, #8]
	memcpy(&a_i[1], nonce, 13);
   23f8e:	f7ff ff0b 	bl	23da8 <memcpy>

	for (j = 0; j < blk_cnt; j++) {
   23f92:	b2b6      	uxth	r6, r6
   23f94:	f04f 0b00 	mov.w	fp, #0
		if (err) {
			return err;
		}

		/* Encrypted = Payload[0-15] ^ C_1 */
		if (j < blk_cnt - 1) {
   23f98:	f106 3aff 	add.w	sl, r6, #4294967295	; 0xffffffff
	for (j = 0; j < blk_cnt; j++) {
   23f9c:	1e63      	subs	r3, r4, #1
   23f9e:	429e      	cmp	r6, r3
   23fa0:	d802      	bhi.n	23fa8 <ccm_crypt.isra.0+0x46>
					in_msg[(j * 16) + i] ^ s_i[i];
			}
		}
	}
	return 0;
}
   23fa2:	b00b      	add	sp, #44	; 0x2c
   23fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	dst[0] = val >> 8;
   23fa8:	f3c4 2207 	ubfx	r2, r4, #8, #8
   23fac:	f88d 2016 	strb.w	r2, [sp, #22]
		err = bt_encrypt_be(key, a_i, s_i);
   23fb0:	a902      	add	r1, sp, #8
   23fb2:	aa06      	add	r2, sp, #24
   23fb4:	4638      	mov	r0, r7
   23fb6:	9301      	str	r3, [sp, #4]
	dst[1] = val;
   23fb8:	f88d 4017 	strb.w	r4, [sp, #23]
   23fbc:	f003 fa37 	bl	2742e <bt_encrypt_be>
		if (err) {
   23fc0:	4601      	mov	r1, r0
   23fc2:	2800      	cmp	r0, #0
   23fc4:	d1ed      	bne.n	23fa2 <ccm_crypt.isra.0+0x40>
		if (j < blk_cnt - 1) {
   23fc6:	9b01      	ldr	r3, [sp, #4]
   23fc8:	459a      	cmp	sl, r3
   23fca:	eb08 020b 	add.w	r2, r8, fp
   23fce:	eb09 000b 	add.w	r0, r9, fp
   23fd2:	d906      	bls.n	23fe2 <ccm_crypt.isra.0+0x80>
			xor16(&out_msg[j * 16], s_i, &in_msg[j * 16]);
   23fd4:	a906      	add	r1, sp, #24
   23fd6:	f7ff ff82 	bl	23ede <xor16>
	for (j = 0; j < blk_cnt; j++) {
   23fda:	3401      	adds	r4, #1
   23fdc:	f10b 0b10 	add.w	fp, fp, #16
   23fe0:	e7dc      	b.n	23f9c <ccm_crypt.isra.0+0x3a>
   23fe2:	f10d 0c18 	add.w	ip, sp, #24
					in_msg[(j * 16) + i] ^ s_i[i];
   23fe6:	f812 3b01 	ldrb.w	r3, [r2], #1
   23fea:	f81c eb01 	ldrb.w	lr, [ip], #1
			for (i = 0; i < last_blk; i++) {
   23fee:	3101      	adds	r1, #1
				out_msg[(j * 16) + i] =
   23ff0:	ea83 030e 	eor.w	r3, r3, lr
			for (i = 0; i < last_blk; i++) {
   23ff4:	42a9      	cmp	r1, r5
				out_msg[(j * 16) + i] =
   23ff6:	f800 3b01 	strb.w	r3, [r0], #1
			for (i = 0; i < last_blk; i++) {
   23ffa:	d3f4      	bcc.n	23fe6 <ccm_crypt.isra.0+0x84>
   23ffc:	e7ed      	b.n	23fda <ccm_crypt.isra.0+0x78>

00023ffe <ccm_auth.isra.0>:
static int ccm_auth(const uint8_t key[16], uint8_t nonce[13],
   23ffe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		last_blk = 16U;
   24002:	f013 090f 	ands.w	r9, r3, #15
static int ccm_auth(const uint8_t key[16], uint8_t nonce[13],
   24006:	b08d      	sub	sp, #52	; 0x34
   24008:	461f      	mov	r7, r3
	b[0] = 0x01;
   2400a:	f04f 0301 	mov.w	r3, #1
static int ccm_auth(const uint8_t key[16], uint8_t nonce[13],
   2400e:	4680      	mov	r8, r0
   24010:	4616      	mov	r6, r2
	memcpy(b + 1, nonce, 13);
   24012:	eb0d 0003 	add.w	r0, sp, r3
   24016:	f04f 020d 	mov.w	r2, #13
   2401a:	46ea      	mov	sl, sp
		last_blk = 16U;
   2401c:	bf08      	it	eq
   2401e:	f04f 0910 	moveq.w	r9, #16
	b[0] = 0x01;
   24022:	f88d 3000 	strb.w	r3, [sp]
static int ccm_auth(const uint8_t key[16], uint8_t nonce[13],
   24026:	9c17      	ldr	r4, [sp, #92]	; 0x5c
	memcpy(b + 1, nonce, 13);
   24028:	f7ff febe 	bl	23da8 <memcpy>
	dst[0] = val >> 8;
   2402c:	2300      	movs	r3, #0
	err = bt_encrypt_be(key, b, s0);
   2402e:	aa08      	add	r2, sp, #32
   24030:	4651      	mov	r1, sl
   24032:	4640      	mov	r0, r8
   24034:	f88d 300e 	strb.w	r3, [sp, #14]
	dst[1] = val;
   24038:	f88d 300f 	strb.w	r3, [sp, #15]
   2403c:	f003 f9f7 	bl	2742e <bt_encrypt_be>
	if (err) {
   24040:	2800      	cmp	r0, #0
   24042:	f040 809a 	bne.w	2417a <ccm_auth.isra.0+0x17c>
	b[0] = (((mic_size - 2) / 2) << 3) | ((!!aad_len) << 6) | 0x01;
   24046:	9b19      	ldr	r3, [sp, #100]	; 0x64
	dst[0] = val >> 8;
   24048:	f88d 000e 	strb.w	r0, [sp, #14]
   2404c:	3b02      	subs	r3, #2
   2404e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   24052:	ea4f 0383 	mov.w	r3, r3, lsl #2
   24056:	bf14      	ite	ne
   24058:	2240      	movne	r2, #64	; 0x40
   2405a:	2200      	moveq	r2, #0
   2405c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
   24060:	4313      	orrs	r3, r2
   24062:	f043 0301 	orr.w	r3, r3, #1
	err = bt_encrypt_be(key, b, X0);
   24066:	aa04      	add	r2, sp, #16
   24068:	4651      	mov	r1, sl
   2406a:	4640      	mov	r0, r8
	b[0] = (((mic_size - 2) / 2) << 3) | ((!!aad_len) << 6) | 0x01;
   2406c:	f88d 3000 	strb.w	r3, [sp]
	dst[1] = val;
   24070:	f88d 700f 	strb.w	r7, [sp, #15]
	err = bt_encrypt_be(key, b, X0);
   24074:	f003 f9db 	bl	2742e <bt_encrypt_be>
	if (err) {
   24078:	4683      	mov	fp, r0
   2407a:	bbb0      	cbnz	r0, 240ea <ccm_auth.isra.0+0xec>
	if (aad_len) {
   2407c:	b3ac      	cbz	r4, 240ea <ccm_auth.isra.0+0xec>
			b[i] = X0[i] ^ b[i];
   2407e:	f89d 3010 	ldrb.w	r3, [sp, #16]
   24082:	f88d 3000 	strb.w	r3, [sp]
   24086:	f89d 3011 	ldrb.w	r3, [sp, #17]
   2408a:	4063      	eors	r3, r4
		aad_len += sizeof(uint16_t);
   2408c:	3402      	adds	r4, #2
			b[i] = X0[i] ^ b[i];
   2408e:	f88d 3001 	strb.w	r3, [sp, #1]
		aad_len += sizeof(uint16_t);
   24092:	b2e4      	uxtb	r4, r4
		while (aad_len > 16) {
   24094:	2502      	movs	r5, #2
				b[i] = X0[i] ^ aad[j];
   24096:	4651      	mov	r1, sl
   24098:	aa04      	add	r2, sp, #16
		while (aad_len > 16) {
   2409a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   2409c:	2c10      	cmp	r4, #16
   2409e:	445b      	add	r3, fp
   240a0:	d80a      	bhi.n	240b8 <ccm_auth.isra.0+0xba>
   240a2:	aa04      	add	r2, sp, #16
		for (; i < aad_len; i++, j++) {
   240a4:	42a5      	cmp	r5, r4
   240a6:	4621      	mov	r1, r4
   240a8:	db38      	blt.n	2411c <ccm_auth.isra.0+0x11e>
		for (i = aad_len; i < 16; i++) {
   240aa:	290f      	cmp	r1, #15
   240ac:	dd3e      	ble.n	2412c <ccm_auth.isra.0+0x12e>
		err = bt_encrypt_be(key, b, X0);
   240ae:	4669      	mov	r1, sp
   240b0:	4640      	mov	r0, r8
   240b2:	f003 f9bc 	bl	2742e <bt_encrypt_be>
		if (err) {
   240b6:	e018      	b.n	240ea <ccm_auth.isra.0+0xec>
		while (aad_len > 16) {
   240b8:	4628      	mov	r0, r5
				b[i] = X0[i] ^ aad[j];
   240ba:	f810 e002 	ldrb.w	lr, [r0, r2]
   240be:	f813 cb01 	ldrb.w	ip, [r3], #1
   240c2:	ea8c 0c0e 	eor.w	ip, ip, lr
   240c6:	f800 c001 	strb.w	ip, [r0, r1]
				i++, j++;
   240ca:	3001      	adds	r0, #1
			} while (i < 16);
   240cc:	2810      	cmp	r0, #16
   240ce:	d1f4      	bne.n	240ba <ccm_auth.isra.0+0xbc>
			err = bt_encrypt_be(key, b, X0);
   240d0:	4640      	mov	r0, r8
   240d2:	f003 f9ac 	bl	2742e <bt_encrypt_be>
				i++, j++;
   240d6:	f1c5 0510 	rsb	r5, r5, #16
   240da:	3c10      	subs	r4, #16
   240dc:	44ab      	add	fp, r5
			aad_len -= 16;
   240de:	b2e4      	uxtb	r4, r4
			if (err) {
   240e0:	4605      	mov	r5, r0
   240e2:	4669      	mov	r1, sp
   240e4:	aa04      	add	r2, sp, #16
   240e6:	2800      	cmp	r0, #0
   240e8:	d0d7      	beq.n	2409a <ccm_auth.isra.0+0x9c>
	blk_cnt = (msg_len + 15) / 16;
   240ea:	370f      	adds	r7, #15
			memcpy(&b[i], &Xn[i], 16 - i);
   240ec:	ab04      	add	r3, sp, #16
   240ee:	4635      	mov	r5, r6
	blk_cnt = (msg_len + 15) / 16;
   240f0:	2400      	movs	r4, #0
	for (j = 0; j < blk_cnt; j++) {
   240f2:	f3c7 170f 	ubfx	r7, r7, #4, #16
			memcpy(&b[i], &Xn[i], 16 - i);
   240f6:	eb03 0609 	add.w	r6, r3, r9
	for (j = 0; j < blk_cnt; j++) {
   240fa:	42bc      	cmp	r4, r7
   240fc:	db1b      	blt.n	24136 <ccm_auth.isra.0+0x138>
   240fe:	e9dd 2118 	ldrd	r2, r1, [sp, #96]	; 0x60
   24102:	ac08      	add	r4, sp, #32
   24104:	ab04      	add	r3, sp, #16
   24106:	1851      	adds	r1, r2, r1
	for (i = 0; i < mic_size; i++) {
   24108:	4291      	cmp	r1, r2
   2410a:	d036      	beq.n	2417a <ccm_auth.isra.0+0x17c>
		mic[i] = s0[i] ^ Xn[i];
   2410c:	f814 0b01 	ldrb.w	r0, [r4], #1
   24110:	f813 5b01 	ldrb.w	r5, [r3], #1
   24114:	4068      	eors	r0, r5
   24116:	f802 0b01 	strb.w	r0, [r2], #1
	for (i = 0; i < mic_size; i++) {
   2411a:	e7f5      	b.n	24108 <ccm_auth.isra.0+0x10a>
			b[i] = X0[i] ^ aad[j];
   2411c:	5d50      	ldrb	r0, [r2, r5]
   2411e:	f813 1b01 	ldrb.w	r1, [r3], #1
   24122:	4041      	eors	r1, r0
   24124:	f80d 1005 	strb.w	r1, [sp, r5]
		for (; i < aad_len; i++, j++) {
   24128:	3501      	adds	r5, #1
   2412a:	e7bb      	b.n	240a4 <ccm_auth.isra.0+0xa6>
			b[i] = X0[i];
   2412c:	5c53      	ldrb	r3, [r2, r1]
   2412e:	f80d 3001 	strb.w	r3, [sp, r1]
		for (i = aad_len; i < 16; i++) {
   24132:	3101      	adds	r1, #1
   24134:	e7b9      	b.n	240aa <ccm_auth.isra.0+0xac>
		if (j + 1 == blk_cnt) {
   24136:	3401      	adds	r4, #1
   24138:	42bc      	cmp	r4, r7
   2413a:	d121      	bne.n	24180 <ccm_auth.isra.0+0x182>
   2413c:	f10d 0c10 	add.w	ip, sp, #16
   24140:	466b      	mov	r3, sp
   24142:	4628      	mov	r0, r5
			for (i = 0; i < last_blk; i++) {
   24144:	2200      	movs	r2, #0
				b[i] = Xn[i] ^ cleartext_msg[(j * 16) + i];
   24146:	f81c 1b01 	ldrb.w	r1, [ip], #1
   2414a:	f810 eb01 	ldrb.w	lr, [r0], #1
			for (i = 0; i < last_blk; i++) {
   2414e:	3201      	adds	r2, #1
				b[i] = Xn[i] ^ cleartext_msg[(j * 16) + i];
   24150:	ea81 010e 	eor.w	r1, r1, lr
			for (i = 0; i < last_blk; i++) {
   24154:	454a      	cmp	r2, r9
				b[i] = Xn[i] ^ cleartext_msg[(j * 16) + i];
   24156:	f803 1b01 	strb.w	r1, [r3], #1
			for (i = 0; i < last_blk; i++) {
   2415a:	dbf4      	blt.n	24146 <ccm_auth.isra.0+0x148>
			memcpy(&b[i], &Xn[i], 16 - i);
   2415c:	f1c9 0210 	rsb	r2, r9, #16
   24160:	4631      	mov	r1, r6
   24162:	eb0d 0009 	add.w	r0, sp, r9
   24166:	f7ff fe1f 	bl	23da8 <memcpy>
		err = bt_encrypt_be(key, b, Xn);
   2416a:	aa04      	add	r2, sp, #16
   2416c:	4651      	mov	r1, sl
   2416e:	4640      	mov	r0, r8
   24170:	f003 f95d 	bl	2742e <bt_encrypt_be>
		if (err) {
   24174:	3510      	adds	r5, #16
   24176:	2800      	cmp	r0, #0
   24178:	d0bf      	beq.n	240fa <ccm_auth.isra.0+0xfc>
}
   2417a:	b00d      	add	sp, #52	; 0x34
   2417c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xor16(b, Xn, &cleartext_msg[j * 16]);
   24180:	462a      	mov	r2, r5
   24182:	a904      	add	r1, sp, #16
   24184:	4668      	mov	r0, sp
   24186:	f7ff feaa 	bl	23ede <xor16>
   2418a:	e7ee      	b.n	2416a <ccm_auth.isra.0+0x16c>

0002418c <bt_ccm_decrypt>:

int bt_ccm_decrypt(const uint8_t key[16], uint8_t nonce[13],
		   const uint8_t *enc_data, size_t len, const uint8_t *aad,
		   size_t aad_len, uint8_t *plaintext, size_t mic_size)
{
   2418c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24190:	b089      	sub	sp, #36	; 0x24
   24192:	e9dd ba13 	ldrd	fp, sl, [sp, #76]	; 0x4c
	uint8_t mic[16];

	if (aad_len >= 0xff00 || mic_size > sizeof(mic)) {
   24196:	f5bb 4f7f 	cmp.w	fp, #65280	; 0xff00
{
   2419a:	9e15      	ldr	r6, [sp, #84]	; 0x54
   2419c:	4607      	mov	r7, r0
   2419e:	4688      	mov	r8, r1
   241a0:	4615      	mov	r5, r2
   241a2:	461c      	mov	r4, r3
	if (aad_len >= 0xff00 || mic_size > sizeof(mic)) {
   241a4:	d21e      	bcs.n	241e4 <bt_ccm_decrypt+0x58>
   241a6:	2e10      	cmp	r6, #16
   241a8:	d81c      	bhi.n	241e4 <bt_ccm_decrypt+0x58>
		return -EINVAL;
	}

	ccm_crypt(key, nonce, enc_data, plaintext, len);
   241aa:	9300      	str	r3, [sp, #0]
   241ac:	4653      	mov	r3, sl
   241ae:	f7ff fed8 	bl	23f62 <ccm_crypt.isra.0>

	ccm_auth(key, nonce, plaintext, len, aad, aad_len, mic, mic_size);
   241b2:	f10d 0910 	add.w	r9, sp, #16
   241b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   241b8:	9300      	str	r3, [sp, #0]
   241ba:	4652      	mov	r2, sl
   241bc:	4623      	mov	r3, r4
   241be:	4641      	mov	r1, r8
   241c0:	4638      	mov	r0, r7
   241c2:	e9cd b901 	strd	fp, r9, [sp, #4]
   241c6:	9603      	str	r6, [sp, #12]
   241c8:	f7ff ff19 	bl	23ffe <ccm_auth.isra.0>

	if (memcmp(mic, enc_data + len, mic_size)) {
   241cc:	4632      	mov	r2, r6
   241ce:	1929      	adds	r1, r5, r4
   241d0:	4648      	mov	r0, r9
   241d2:	f7ff fdd8 	bl	23d86 <memcmp>
		return -EBADMSG;
   241d6:	2800      	cmp	r0, #0
   241d8:	bf18      	it	ne
   241da:	f06f 004c 	mvnne.w	r0, #76	; 0x4c
	}

	return 0;
}
   241de:	b009      	add	sp, #36	; 0x24
   241e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EINVAL;
   241e4:	f06f 0015 	mvn.w	r0, #21
   241e8:	e7f9      	b.n	241de <bt_ccm_decrypt+0x52>

000241ea <bt_ccm_encrypt>:

int bt_ccm_encrypt(const uint8_t key[16], uint8_t nonce[13],
		   const uint8_t *plaintext, size_t len, const uint8_t *aad,
		   size_t aad_len, uint8_t *enc_data, size_t mic_size)
{
   241ea:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   241ee:	4617      	mov	r7, r2
   241f0:	e9dd 280b 	ldrd	r2, r8, [sp, #44]	; 0x2c
	BT_DBG("nonce %s", bt_hex(nonce, 13));
	BT_DBG("msg (len %zu) %s", len, bt_hex(plaintext, len));
	BT_DBG("aad_len %zu mic_size %zu", aad_len, mic_size);

	/* Unsupported AAD size */
	if (aad_len >= 0xff00 || mic_size > 16) {
   241f4:	f5b2 4f7f 	cmp.w	r2, #65280	; 0xff00
{
   241f8:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
   241fc:	4605      	mov	r5, r0
   241fe:	460e      	mov	r6, r1
   24200:	461c      	mov	r4, r3
	uint8_t *mic = enc_data + len;
   24202:	eb08 0e03 	add.w	lr, r8, r3
	if (aad_len >= 0xff00 || mic_size > 16) {
   24206:	d215      	bcs.n	24234 <bt_ccm_encrypt+0x4a>
   24208:	f1bc 0f10 	cmp.w	ip, #16
   2420c:	d812      	bhi.n	24234 <bt_ccm_encrypt+0x4a>
		return -EINVAL;
	}

	ccm_auth(key, nonce, enc_data, len, aad, aad_len, mic, mic_size);
   2420e:	9201      	str	r2, [sp, #4]
   24210:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   24212:	9200      	str	r2, [sp, #0]
   24214:	e9cd ec02 	strd	lr, ip, [sp, #8]
   24218:	4642      	mov	r2, r8
   2421a:	f7ff fef0 	bl	23ffe <ccm_auth.isra.0>

	ccm_crypt(key, nonce, plaintext, enc_data, len);
   2421e:	4628      	mov	r0, r5
   24220:	9400      	str	r4, [sp, #0]
   24222:	4643      	mov	r3, r8
   24224:	463a      	mov	r2, r7
   24226:	4631      	mov	r1, r6
   24228:	f7ff fe9b 	bl	23f62 <ccm_crypt.isra.0>

	return 0;
   2422c:	2000      	movs	r0, #0
}
   2422e:	b004      	add	sp, #16
   24230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
   24234:	f06f 0015 	mvn.w	r0, #21
   24238:	e7f9      	b.n	2422e <bt_ccm_encrypt+0x44>

0002423a <bt_uuid_cmp>:
{
   2423a:	b510      	push	{r4, lr}
   2423c:	460c      	mov	r4, r1
	if (u1->type != u2->type) {
   2423e:	7801      	ldrb	r1, [r0, #0]
   24240:	7822      	ldrb	r2, [r4, #0]
   24242:	428a      	cmp	r2, r1
{
   24244:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   24246:	d00f      	beq.n	24268 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   24248:	4669      	mov	r1, sp
   2424a:	f7e1 f8db 	bl	5404 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   2424e:	a905      	add	r1, sp, #20
   24250:	4620      	mov	r0, r4
   24252:	f7e1 f8d7 	bl	5404 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   24256:	2210      	movs	r2, #16
   24258:	f10d 0115 	add.w	r1, sp, #21
   2425c:	f10d 0001 	add.w	r0, sp, #1
   24260:	f7ff fd91 	bl	23d86 <memcmp>
}
   24264:	b00a      	add	sp, #40	; 0x28
   24266:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   24268:	2a01      	cmp	r2, #1
   2426a:	d006      	beq.n	2427a <bt_uuid_cmp+0x40>
   2426c:	2a02      	cmp	r2, #2
   2426e:	d007      	beq.n	24280 <bt_uuid_cmp+0x46>
   24270:	b972      	cbnz	r2, 24290 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   24272:	8840      	ldrh	r0, [r0, #2]
   24274:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   24276:	1ac0      	subs	r0, r0, r3
   24278:	e7f4      	b.n	24264 <bt_uuid_cmp+0x2a>
   2427a:	6840      	ldr	r0, [r0, #4]
   2427c:	6863      	ldr	r3, [r4, #4]
   2427e:	e7fa      	b.n	24276 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   24280:	2210      	movs	r2, #16
   24282:	1c61      	adds	r1, r4, #1
   24284:	3001      	adds	r0, #1
}
   24286:	b00a      	add	sp, #40	; 0x28
   24288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2428c:	f7ff bd7b 	b.w	23d86 <memcmp>
	switch (u1->type) {
   24290:	f06f 0015 	mvn.w	r0, #21
   24294:	e7e6      	b.n	24264 <bt_uuid_cmp+0x2a>

00024296 <bt_uuid_create>:
	switch (data_len) {
   24296:	2a04      	cmp	r2, #4
{
   24298:	b510      	push	{r4, lr}
	switch (data_len) {
   2429a:	d00a      	beq.n	242b2 <bt_uuid_create+0x1c>
   2429c:	2a10      	cmp	r2, #16
   2429e:	d00d      	beq.n	242bc <bt_uuid_create+0x26>
   242a0:	2a02      	cmp	r2, #2
   242a2:	f04f 0300 	mov.w	r3, #0
   242a6:	d10f      	bne.n	242c8 <bt_uuid_create+0x32>
		uuid->type = BT_UUID_TYPE_16;
   242a8:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   242aa:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   242ac:	8043      	strh	r3, [r0, #2]
	return true;
   242ae:	2001      	movs	r0, #1
}
   242b0:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   242b2:	2301      	movs	r3, #1
   242b4:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   242b6:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   242b8:	6042      	str	r2, [r0, #4]
		break;
   242ba:	e7f8      	b.n	242ae <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   242bc:	2302      	movs	r3, #2
   242be:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   242c2:	f7ff fd71 	bl	23da8 <memcpy>
		break;
   242c6:	e7f2      	b.n	242ae <bt_uuid_create+0x18>
	switch (data_len) {
   242c8:	4618      	mov	r0, r3
   242ca:	e7f1      	b.n	242b0 <bt_uuid_create+0x1a>

000242cc <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   242cc:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   242ce:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   242d0:	2106      	movs	r1, #6
{
   242d2:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   242d4:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   242d8:	f003 f8a7 	bl	2742a <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   242dc:	b918      	cbnz	r0, 242e6 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   242de:	79a3      	ldrb	r3, [r4, #6]
   242e0:	f063 033f 	orn	r3, r3, #63	; 0x3f
   242e4:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   242e6:	bd10      	pop	{r4, pc}

000242e8 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   242e8:	280f      	cmp	r0, #15
   242ea:	d806      	bhi.n	242fa <bt_hci_evt_get_flags+0x12>
   242ec:	280d      	cmp	r0, #13
   242ee:	d80b      	bhi.n	24308 <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   242f0:	2805      	cmp	r0, #5
   242f2:	bf14      	ite	ne
   242f4:	2002      	movne	r0, #2
   242f6:	2003      	moveq	r0, #3
   242f8:	4770      	bx	lr
	switch (evt) {
   242fa:	2813      	cmp	r0, #19
   242fc:	d004      	beq.n	24308 <bt_hci_evt_get_flags+0x20>
   242fe:	281a      	cmp	r0, #26
   24300:	bf14      	ite	ne
   24302:	2002      	movne	r0, #2
   24304:	2001      	moveq	r0, #1
   24306:	4770      	bx	lr
   24308:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   2430a:	4770      	bx	lr

0002430c <atomic_or>:
{
   2430c:	4603      	mov	r3, r0
}
   2430e:	f3bf 8f5b 	dmb	ish
   24312:	e853 0f00 	ldrex	r0, [r3]
   24316:	ea40 0201 	orr.w	r2, r0, r1
   2431a:	e843 2c00 	strex	ip, r2, [r3]
   2431e:	f1bc 0f00 	cmp.w	ip, #0
   24322:	d1f6      	bne.n	24312 <atomic_or+0x6>
   24324:	f3bf 8f5b 	dmb	ish
   24328:	4770      	bx	lr

0002432a <bt_hci_disconnect>:
{
   2432a:	b570      	push	{r4, r5, r6, lr}
   2432c:	4606      	mov	r6, r0
   2432e:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   24330:	f240 4006 	movw	r0, #1030	; 0x406
   24334:	2103      	movs	r1, #3
   24336:	f7e1 fce5 	bl	5d04 <bt_hci_cmd_create>
	if (!buf) {
   2433a:	4604      	mov	r4, r0
   2433c:	b168      	cbz	r0, 2435a <bt_hci_disconnect+0x30>
   2433e:	2103      	movs	r1, #3
   24340:	3008      	adds	r0, #8
   24342:	f003 ff81 	bl	28248 <net_buf_simple_add>
	disconn->reason = reason;
   24346:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   24348:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2434a:	4621      	mov	r1, r4
   2434c:	2200      	movs	r2, #0
}
   2434e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   24352:	f240 4006 	movw	r0, #1030	; 0x406
   24356:	f7e1 be2d 	b.w	5fb4 <bt_hci_cmd_send_sync>
}
   2435a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2435e:	bd70      	pop	{r4, r5, r6, pc}

00024360 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   24360:	6880      	ldr	r0, [r0, #8]
   24362:	f7e1 bea1 	b.w	60a8 <bt_hci_le_enh_conn_complete>

00024366 <le_legacy_conn_complete>:
{
   24366:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   24368:	6881      	ldr	r1, [r0, #8]
{
   2436a:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   2436c:	780b      	ldrb	r3, [r1, #0]
   2436e:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   24372:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   24376:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   2437a:	78cb      	ldrb	r3, [r1, #3]
   2437c:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   24380:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   24384:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   24388:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   2438c:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   24390:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   24394:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   24398:	7c4b      	ldrb	r3, [r1, #17]
   2439a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   2439e:	2207      	movs	r2, #7
   243a0:	3104      	adds	r1, #4
   243a2:	a803      	add	r0, sp, #12
   243a4:	f7ff fd00 	bl	23da8 <memcpy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   243a8:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   243aa:	4669      	mov	r1, sp
   243ac:	2206      	movs	r2, #6
   243ae:	f10d 0013 	add.w	r0, sp, #19
   243b2:	9400      	str	r4, [sp, #0]
   243b4:	f8ad 4004 	strh.w	r4, [sp, #4]
   243b8:	f7ff fcf6 	bl	23da8 <memcpy>
   243bc:	2206      	movs	r2, #6
   243be:	4669      	mov	r1, sp
   243c0:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   243c4:	9400      	str	r4, [sp, #0]
   243c6:	f8ad 4004 	strh.w	r4, [sp, #4]
   243ca:	f7ff fced 	bl	23da8 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   243ce:	a802      	add	r0, sp, #8
   243d0:	f7e1 fe6a 	bl	60a8 <bt_hci_le_enh_conn_complete>
}
   243d4:	b00a      	add	sp, #40	; 0x28
   243d6:	bd10      	pop	{r4, pc}

000243d8 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   243d8:	8803      	ldrh	r3, [r0, #0]
   243da:	8842      	ldrh	r2, [r0, #2]
   243dc:	4293      	cmp	r3, r2
{
   243de:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   243e0:	d819      	bhi.n	24416 <bt_le_conn_params_valid+0x3e>
   243e2:	2b05      	cmp	r3, #5
   243e4:	d917      	bls.n	24416 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   243e6:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   243ea:	d814      	bhi.n	24416 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   243ec:	8883      	ldrh	r3, [r0, #4]
   243ee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   243f2:	d210      	bcs.n	24416 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   243f4:	88c0      	ldrh	r0, [r0, #6]
   243f6:	f1a0 010a 	sub.w	r1, r0, #10
   243fa:	b289      	uxth	r1, r1
   243fc:	f640 4476 	movw	r4, #3190	; 0xc76
   24400:	42a1      	cmp	r1, r4
   24402:	d808      	bhi.n	24416 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   24404:	3301      	adds	r3, #1
   24406:	b29b      	uxth	r3, r3
   24408:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   2440a:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   2440e:	bf34      	ite	cc
   24410:	2001      	movcc	r0, #1
   24412:	2000      	movcs	r0, #0
}
   24414:	bd10      	pop	{r4, pc}
		return false;
   24416:	2000      	movs	r0, #0
   24418:	e7fc      	b.n	24414 <bt_le_conn_params_valid+0x3c>

0002441a <bt_send>:
		return bt_hci_ecc_send(buf);
   2441a:	f7e0 be4b 	b.w	50b4 <bt_hci_ecc_send>

0002441e <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   2441e:	2000      	movs	r0, #0
   24420:	4770      	bx	lr

00024422 <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   24422:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   24424:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   24428:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   2442a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2442e:	2100      	movs	r1, #0
{
   24430:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   24432:	f7e1 f8a5 	bl	5580 <bt_buf_get_evt>
   24436:	2102      	movs	r1, #2
   24438:	4604      	mov	r4, r0
   2443a:	3008      	adds	r0, #8
   2443c:	f003 ff04 	bl	28248 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   24440:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   24442:	7045      	strb	r5, [r0, #1]

	return buf;
}
   24444:	4620      	mov	r0, r4
   24446:	bd70      	pop	{r4, r5, r6, pc}

00024448 <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   24448:	3103      	adds	r1, #3
{
   2444a:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   2444c:	b2c9      	uxtb	r1, r1
{
   2444e:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   24450:	200e      	movs	r0, #14
   24452:	f7ff ffe6 	bl	24422 <bt_hci_evt_create>
   24456:	2103      	movs	r1, #3
   24458:	4604      	mov	r4, r0
   2445a:	3008      	adds	r0, #8
   2445c:	f003 fef4 	bl	28248 <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   24460:	2301      	movs	r3, #1
   24462:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   24464:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   24468:	4620      	mov	r0, r4
   2446a:	bd38      	pop	{r3, r4, r5, pc}

0002446c <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   2446c:	b570      	push	{r4, r5, r6, lr}
   2446e:	4605      	mov	r5, r0
   24470:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   24472:	200f      	movs	r0, #15
   24474:	2104      	movs	r1, #4
   24476:	f7ff ffd4 	bl	24422 <bt_hci_evt_create>
   2447a:	2104      	movs	r1, #4
   2447c:	4604      	mov	r4, r0
   2447e:	3008      	adds	r0, #8
   24480:	f003 fee2 	bl	28248 <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   24484:	2201      	movs	r2, #1
	cs->status = status;
   24486:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   24488:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   2448a:	8045      	strh	r5, [r0, #2]

	return buf;
}
   2448c:	4620      	mov	r0, r4
   2448e:	bd70      	pop	{r4, r5, r6, pc}

00024490 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24490:	f3bf 8f5b 	dmb	ish
   24494:	6800      	ldr	r0, [r0, #0]
   24496:	f3bf 8f5b 	dmb	ish
}
   2449a:	4770      	bx	lr

0002449c <is_adv_using_rand_addr>:
{
   2449c:	b508      	push	{r3, lr}
	adv = bt_le_adv_lookup_legacy();
   2449e:	f7e2 fee3 	bl	7268 <bt_le_adv_lookup_legacy>
	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
   244a2:	b120      	cbz	r0, 244ae <is_adv_using_rand_addr+0x12>
   244a4:	3010      	adds	r0, #16
   244a6:	f7ff fff3 	bl	24490 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   244aa:	f3c0 1080 	ubfx	r0, r0, #6, #1
}
   244ae:	bd08      	pop	{r3, pc}

000244b0 <bt_lookup_id_addr>:
}
   244b0:	4608      	mov	r0, r1
   244b2:	4770      	bx	lr

000244b4 <bt_id_set_private_addr>:
{
   244b4:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   244b6:	2106      	movs	r1, #6
   244b8:	4668      	mov	r0, sp
   244ba:	f002 ffb6 	bl	2742a <bt_rand>
	if (err) {
   244be:	b940      	cbnz	r0, 244d2 <bt_id_set_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   244c0:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   244c4:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   244c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   244ca:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   244ce:	f7e2 fb63 	bl	6b98 <set_random_address>
}
   244d2:	b003      	add	sp, #12
   244d4:	f85d fb04 	ldr.w	pc, [sp], #4

000244d8 <bt_id_set_adv_private_addr>:
{
   244d8:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   244da:	2106      	movs	r1, #6
   244dc:	4668      	mov	r0, sp
   244de:	f002 ffa4 	bl	2742a <bt_rand>
	if (err) {
   244e2:	b940      	cbnz	r0, 244f6 <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   244e4:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   244e8:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   244ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   244ee:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   244f2:	f7e2 fb51 	bl	6b98 <set_random_address>
}
   244f6:	b003      	add	sp, #12
   244f8:	f85d fb04 	ldr.w	pc, [sp], #4

000244fc <bt_id_scan_random_addr_check>:
{
   244fc:	b508      	push	{r3, lr}
	adv = bt_le_adv_lookup_legacy();
   244fe:	f7e2 feb3 	bl	7268 <bt_le_adv_lookup_legacy>
	if (!adv) {
   24502:	b110      	cbz	r0, 2450a <bt_id_scan_random_addr_check+0xe>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   24504:	3010      	adds	r0, #16
   24506:	f7ff ffc3 	bl	24490 <atomic_get>
}
   2450a:	2001      	movs	r0, #1
   2450c:	bd08      	pop	{r3, pc}

0002450e <bt_id_init>:
#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
}
   2450e:	2000      	movs	r0, #0
   24510:	4770      	bx	lr

00024512 <get_adv_channel_map>:
{
   24512:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   24514:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   24518:	bf0c      	ite	eq
   2451a:	2007      	moveq	r0, #7
   2451c:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   2451e:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   24520:	bf48      	it	mi
   24522:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   24526:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   24528:	bf48      	it	mi
   2452a:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   2452e:	4770      	bx	lr

00024530 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24530:	f3bf 8f5b 	dmb	ish
   24534:	6800      	ldr	r0, [r0, #0]
   24536:	f3bf 8f5b 	dmb	ish
}
   2453a:	4770      	bx	lr

0002453c <atomic_and>:
{
   2453c:	4603      	mov	r3, r0
}
   2453e:	f3bf 8f5b 	dmb	ish
   24542:	e853 0f00 	ldrex	r0, [r3]
   24546:	ea00 0201 	and.w	r2, r0, r1
   2454a:	e843 2c00 	strex	ip, r2, [r3]
   2454e:	f1bc 0f00 	cmp.w	ip, #0
   24552:	d1f6      	bne.n	24542 <atomic_and+0x6>
   24554:	f3bf 8f5b 	dmb	ish
   24558:	4770      	bx	lr

0002455a <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2455a:	2301      	movs	r3, #1
{
   2455c:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2455e:	fa03 f101 	lsl.w	r1, r3, r1
{
   24562:	4604      	mov	r4, r0
	if (val) {
   24564:	b162      	cbz	r2, 24580 <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   24566:	f3bf 8f5b 	dmb	ish
   2456a:	e854 3f00 	ldrex	r3, [r4]
   2456e:	430b      	orrs	r3, r1
   24570:	e844 3200 	strex	r2, r3, [r4]
   24574:	2a00      	cmp	r2, #0
   24576:	d1f8      	bne.n	2456a <atomic_set_bit_to+0x10>
   24578:	f3bf 8f5b 	dmb	ish
}
   2457c:	bc10      	pop	{r4}
   2457e:	4770      	bx	lr
   24580:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   24582:	43c9      	mvns	r1, r1
   24584:	f7ff bfda 	b.w	2453c <atomic_and>

00024588 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   24588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2458c:	b087      	sub	sp, #28
   2458e:	4605      	mov	r5, r0
   24590:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   24594:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   24598:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   2459c:	460c      	mov	r4, r1
   2459e:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   245a0:	2100      	movs	r1, #0
   245a2:	2210      	movs	r2, #16
   245a4:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   245a6:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   245a8:	f7ff fc09 	bl	23dbe <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   245ac:	b186      	cbz	r6, 245d0 <le_adv_update.constprop.0+0x48>
		const char *name = bt_get_name();
   245ae:	f7e2 fad5 	bl	6b5c <bt_get_name>
   245b2:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   245b4:	2c00      	cmp	r4, #0
   245b6:	d139      	bne.n	2462c <le_adv_update.constprop.0+0xa4>
   245b8:	2f00      	cmp	r7, #0
   245ba:	d142      	bne.n	24642 <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   245bc:	4658      	mov	r0, fp
   245be:	f7ff fbb5 	bl	23d2c <strlen>
   245c2:	2309      	movs	r3, #9
   245c4:	f88d 3000 	strb.w	r3, [sp]
   245c8:	f88d 0001 	strb.w	r0, [sp, #1]
   245cc:	f8cd b004 	str.w	fp, [sp, #4]
		if (name_type == ADV_NAME_TYPE_AD) {
   245d0:	2e01      	cmp	r6, #1
			d_len = 2;
   245d2:	bf0c      	ite	eq
   245d4:	2202      	moveq	r2, #2
		d_len = 1;
   245d6:	2201      	movne	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   245d8:	a902      	add	r1, sp, #8
   245da:	f242 0008 	movw	r0, #8200	; 0x2008
		d[0].len = ad_len;
   245de:	e9cd 4802 	strd	r4, r8, [sp, #8]
			d[1].data = &data;
   245e2:	bf04      	itt	eq
   245e4:	f8cd d010 	streq.w	sp, [sp, #16]
			d[1].len = 1;
   245e8:	9605      	streq	r6, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   245ea:	f7e2 fd87 	bl	70fc <hci_set_ad>
		if (err) {
   245ee:	4604      	mov	r4, r0
   245f0:	b978      	cbnz	r0, 24612 <le_adv_update.constprop.0+0x8a>
	if (scannable) {
   245f2:	f1ba 0f00 	cmp.w	sl, #0
   245f6:	d126      	bne.n	24646 <le_adv_update.constprop.0+0xbe>
   245f8:	3510      	adds	r5, #16
   245fa:	f3bf 8f5b 	dmb	ish
   245fe:	e855 3f00 	ldrex	r3, [r5]
   24602:	f043 0304 	orr.w	r3, r3, #4
   24606:	e845 3200 	strex	r2, r3, [r5]
   2460a:	2a00      	cmp	r2, #0
   2460c:	d1f7      	bne.n	245fe <le_adv_update.constprop.0+0x76>
   2460e:	f3bf 8f5b 	dmb	ish
}
   24612:	4620      	mov	r0, r4
   24614:	b007      	add	sp, #28
   24616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2461a:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   2461e:	3a08      	subs	r2, #8
   24620:	2a01      	cmp	r2, #1
   24622:	d925      	bls.n	24670 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   24624:	3301      	adds	r3, #1
   24626:	4598      	cmp	r8, r3
   24628:	d1f7      	bne.n	2461a <le_adv_update.constprop.0+0x92>
   2462a:	e7c5      	b.n	245b8 <le_adv_update.constprop.0+0x30>
   2462c:	2300      	movs	r3, #0
   2462e:	e7fa      	b.n	24626 <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   24630:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   24634:	3a08      	subs	r2, #8
   24636:	2a01      	cmp	r2, #1
   24638:	d91a      	bls.n	24670 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   2463a:	3301      	adds	r3, #1
   2463c:	4599      	cmp	r9, r3
   2463e:	d1f7      	bne.n	24630 <le_adv_update.constprop.0+0xa8>
   24640:	e7bc      	b.n	245bc <le_adv_update.constprop.0+0x34>
   24642:	2300      	movs	r3, #0
   24644:	e7fa      	b.n	2463c <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   24646:	2e02      	cmp	r6, #2
   24648:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   2464c:	bf08      	it	eq
   2464e:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   24650:	a902      	add	r1, sp, #8
			d_len = 2;
   24652:	bf08      	it	eq
   24654:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   24656:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   2465a:	bf08      	it	eq
   2465c:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   24660:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   24664:	f7e2 fd4a 	bl	70fc <hci_set_ad>
		if (err) {
   24668:	2800      	cmp	r0, #0
   2466a:	d0c5      	beq.n	245f8 <le_adv_update.constprop.0+0x70>
   2466c:	4604      	mov	r4, r0
   2466e:	e7d0      	b.n	24612 <le_adv_update.constprop.0+0x8a>
			return -EINVAL;
   24670:	f06f 0415 	mvn.w	r4, #21
   24674:	e7cd      	b.n	24612 <le_adv_update.constprop.0+0x8a>

00024676 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   24676:	6843      	ldr	r3, [r0, #4]
   24678:	f013 0008 	ands.w	r0, r3, #8
   2467c:	d00a      	beq.n	24694 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   2467e:	035a      	lsls	r2, r3, #13
   24680:	d407      	bmi.n	24692 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   24682:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
		return ADV_NAME_TYPE_SD;
   24686:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2468a:	bf0c      	ite	eq
   2468c:	2001      	moveq	r0, #1
   2468e:	2002      	movne	r0, #2
   24690:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   24692:	2001      	movs	r0, #1
}
   24694:	4770      	bx	lr

00024696 <bt_le_adv_set_enable_legacy>:
{
   24696:	b570      	push	{r4, r5, r6, lr}
   24698:	4606      	mov	r6, r0
   2469a:	b086      	sub	sp, #24
   2469c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   2469e:	f242 000a 	movw	r0, #8202	; 0x200a
   246a2:	2101      	movs	r1, #1
   246a4:	f7e1 fb2e 	bl	5d04 <bt_hci_cmd_create>
	if (!buf) {
   246a8:	4604      	mov	r4, r0
   246aa:	b1b0      	cbz	r0, 246da <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   246ac:	3008      	adds	r0, #8
	if (enable) {
   246ae:	b195      	cbz	r5, 246d6 <bt_le_adv_set_enable_legacy+0x40>
   246b0:	2101      	movs	r1, #1
   246b2:	f003 fdd8 	bl	28266 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   246b6:	f106 0210 	add.w	r2, r6, #16
   246ba:	a903      	add	r1, sp, #12
   246bc:	4620      	mov	r0, r4
   246be:	9500      	str	r5, [sp, #0]
   246c0:	2306      	movs	r3, #6
   246c2:	f7e1 fb0d 	bl	5ce0 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   246c6:	2200      	movs	r2, #0
   246c8:	4621      	mov	r1, r4
   246ca:	f242 000a 	movw	r0, #8202	; 0x200a
   246ce:	f7e1 fc71 	bl	5fb4 <bt_hci_cmd_send_sync>
}
   246d2:	b006      	add	sp, #24
   246d4:	bd70      	pop	{r4, r5, r6, pc}
   246d6:	4629      	mov	r1, r5
   246d8:	e7eb      	b.n	246b2 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   246da:	f06f 0068 	mvn.w	r0, #104	; 0x68
   246de:	e7f8      	b.n	246d2 <bt_le_adv_set_enable_legacy+0x3c>

000246e0 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   246e0:	3018      	adds	r0, #24
   246e2:	f004 bb7e 	b.w	28de2 <k_work_cancel_delayable>

000246e6 <atomic_and>:
{
   246e6:	4603      	mov	r3, r0
}
   246e8:	f3bf 8f5b 	dmb	ish
   246ec:	e853 0f00 	ldrex	r0, [r3]
   246f0:	ea00 0201 	and.w	r2, r0, r1
   246f4:	e843 2c00 	strex	ip, r2, [r3]
   246f8:	f1bc 0f00 	cmp.w	ip, #0
   246fc:	d1f6      	bne.n	246ec <atomic_and+0x6>
   246fe:	f3bf 8f5b 	dmb	ish
   24702:	4770      	bx	lr

00024704 <bt_le_scan_set_enable>:
	return bt_le_scan_set_enable_legacy(enable);
   24704:	f7e2 bfd4 	b.w	76b0 <bt_le_scan_set_enable_legacy>

00024708 <tx_notify>:
{
   24708:	b570      	push	{r4, r5, r6, lr}
   2470a:	4604      	mov	r4, r0
	__asm__ volatile(
   2470c:	f04f 0220 	mov.w	r2, #32
   24710:	f3ef 8311 	mrs	r3, BASEPRI
   24714:	f382 8812 	msr	BASEPRI_MAX, r2
   24718:	f3bf 8f6f 	isb	sy
	return list->head;
   2471c:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   2471e:	b920      	cbnz	r0, 2472a <tx_notify+0x22>
	__asm__ volatile(
   24720:	f383 8811 	msr	BASEPRI, r3
   24724:	f3bf 8f6f 	isb	sy
}
   24728:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2472a:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   2472c:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2472e:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24730:	4288      	cmp	r0, r1
	list->tail = node;
   24732:	bf08      	it	eq
   24734:	6262      	streq	r2, [r4, #36]	; 0x24
   24736:	f383 8811 	msr	BASEPRI, r3
   2473a:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   2473e:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   24742:	f7e3 fb03 	bl	7d4c <tx_free>
		cb(conn, user_data);
   24746:	4631      	mov	r1, r6
   24748:	4620      	mov	r0, r4
   2474a:	47a8      	blx	r5
	while (1) {
   2474c:	e7de      	b.n	2470c <tx_notify+0x4>

0002474e <tx_complete_work>:
	tx_notify(conn);
   2474e:	3828      	subs	r0, #40	; 0x28
   24750:	f7ff bfda 	b.w	24708 <tx_notify>

00024754 <bt_conn_reset_rx_state>:
{
   24754:	b510      	push	{r4, lr}
   24756:	4604      	mov	r4, r0
	if (!conn->rx) {
   24758:	6900      	ldr	r0, [r0, #16]
   2475a:	b118      	cbz	r0, 24764 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   2475c:	f7f9 fb02 	bl	1dd64 <net_buf_unref>
	conn->rx = NULL;
   24760:	2300      	movs	r3, #0
   24762:	6123      	str	r3, [r4, #16]
}
   24764:	bd10      	pop	{r4, pc}

00024766 <conn_cleanup>:
{
   24766:	b570      	push	{r4, r5, r6, lr}
   24768:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   2476a:	f100 0638 	add.w	r6, r0, #56	; 0x38
   2476e:	2200      	movs	r2, #0
   24770:	2300      	movs	r3, #0
   24772:	4630      	mov	r0, r6
   24774:	f003 fcaf 	bl	280d6 <net_buf_get>
   24778:	4605      	mov	r5, r0
   2477a:	b950      	cbnz	r0, 24792 <conn_cleanup+0x2c>
	bt_conn_reset_rx_state(conn);
   2477c:	4620      	mov	r0, r4
   2477e:	f7ff ffe9 	bl	24754 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   24782:	f104 0058 	add.w	r0, r4, #88	; 0x58
   24786:	2200      	movs	r2, #0
}
   24788:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   2478c:	2300      	movs	r3, #0
   2478e:	f7fb be49 	b.w	20424 <k_work_reschedule>
		if (tx_data(buf)->tx) {
   24792:	6968      	ldr	r0, [r5, #20]
   24794:	b108      	cbz	r0, 2479a <conn_cleanup+0x34>
			tx_free(tx_data(buf)->tx);
   24796:	f7e3 fad9 	bl	7d4c <tx_free>
		net_buf_unref(buf);
   2479a:	4628      	mov	r0, r5
   2479c:	f7f9 fae2 	bl	1dd64 <net_buf_unref>
   247a0:	e7e5      	b.n	2476e <conn_cleanup+0x8>

000247a2 <bt_conn_ref>:
{
   247a2:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   247a4:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   247a8:	f3bf 8f5b 	dmb	ish
   247ac:	6813      	ldr	r3, [r2, #0]
   247ae:	f3bf 8f5b 	dmb	ish
		if (!old) {
   247b2:	b17b      	cbz	r3, 247d4 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   247b4:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   247b8:	1c59      	adds	r1, r3, #1
   247ba:	e852 4f00 	ldrex	r4, [r2]
   247be:	429c      	cmp	r4, r3
   247c0:	d104      	bne.n	247cc <bt_conn_ref+0x2a>
   247c2:	e842 1c00 	strex	ip, r1, [r2]
   247c6:	f1bc 0f00 	cmp.w	ip, #0
   247ca:	d1f6      	bne.n	247ba <bt_conn_ref+0x18>
   247cc:	f3bf 8f5b 	dmb	ish
   247d0:	d1ea      	bne.n	247a8 <bt_conn_ref+0x6>
}
   247d2:	bd10      	pop	{r4, pc}
			return NULL;
   247d4:	4618      	mov	r0, r3
   247d6:	e7fc      	b.n	247d2 <bt_conn_ref+0x30>

000247d8 <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   247d8:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   247dc:	f3bf 8f5b 	dmb	ish
   247e0:	e853 2f00 	ldrex	r2, [r3]
   247e4:	3a01      	subs	r2, #1
   247e6:	e843 2100 	strex	r1, r2, [r3]
   247ea:	2900      	cmp	r1, #0
   247ec:	d1f8      	bne.n	247e0 <bt_conn_unref+0x8>
   247ee:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   247f2:	7883      	ldrb	r3, [r0, #2]
   247f4:	2b01      	cmp	r3, #1
   247f6:	d108      	bne.n	2480a <bt_conn_unref+0x32>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   247f8:	f3bf 8f5b 	dmb	ish
   247fc:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   24800:	f3bf 8f5b 	dmb	ish
   24804:	b90b      	cbnz	r3, 2480a <bt_conn_unref+0x32>
		bt_le_adv_resume();
   24806:	f7e2 bf13 	b.w	7630 <bt_le_adv_resume>
}
   2480a:	4770      	bx	lr

0002480c <conn_lookup_handle>:
{
   2480c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24810:	4607      	mov	r7, r0
   24812:	460e      	mov	r6, r1
   24814:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   24816:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   24818:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   2481c:	42b4      	cmp	r4, r6
   2481e:	d103      	bne.n	24828 <conn_lookup_handle+0x1c>
	return NULL;
   24820:	2300      	movs	r3, #0
}
   24822:	4618      	mov	r0, r3
   24824:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   24828:	fb09 7004 	mla	r0, r9, r4, r7
   2482c:	f7ff ffb9 	bl	247a2 <bt_conn_ref>
   24830:	4603      	mov	r3, r0
		if (!conn) {
   24832:	b158      	cbz	r0, 2484c <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   24834:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   24836:	2d01      	cmp	r5, #1
   24838:	d002      	beq.n	24840 <conn_lookup_handle+0x34>
   2483a:	3d07      	subs	r5, #7
   2483c:	2d01      	cmp	r5, #1
   2483e:	d803      	bhi.n	24848 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   24840:	881a      	ldrh	r2, [r3, #0]
   24842:	4542      	cmp	r2, r8
   24844:	d0ed      	beq.n	24822 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   24846:	4618      	mov	r0, r3
   24848:	f7ff ffc6 	bl	247d8 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   2484c:	3401      	adds	r4, #1
   2484e:	e7e5      	b.n	2481c <conn_lookup_handle+0x10>

00024850 <bt_conn_connected>:
{
   24850:	b510      	push	{r4, lr}
   24852:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   24854:	f7e4 f8c2 	bl	89dc <bt_l2cap_connected>
	notify_connected(conn);
   24858:	4620      	mov	r0, r4
}
   2485a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   2485e:	f7e3 ba7f 	b.w	7d60 <notify_connected>

00024862 <bt_conn_disconnect>:
{
   24862:	b538      	push	{r3, r4, r5, lr}
	switch (conn->state) {
   24864:	7a83      	ldrb	r3, [r0, #10]
   24866:	3b02      	subs	r3, #2
{
   24868:	4604      	mov	r4, r0
	switch (conn->state) {
   2486a:	2b06      	cmp	r3, #6
   2486c:	d805      	bhi.n	2487a <bt_conn_disconnect+0x18>
   2486e:	e8df f003 	tbb	[pc, r3]
   24872:	0408      	.short	0x0408
   24874:	0e0c0404 	.word	0x0e0c0404
   24878:	0c          	.byte	0x0c
   24879:	00          	.byte	0x00
   2487a:	f06f 057f 	mvn.w	r5, #127	; 0x7f
}
   2487e:	4628      	mov	r0, r5
   24880:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
   24882:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   24884:	2100      	movs	r1, #0
   24886:	f7e3 fc91 	bl	81ac <bt_conn_set_state>
		return 0;
   2488a:	2500      	movs	r5, #0
   2488c:	e7f7      	b.n	2487e <bt_conn_disconnect+0x1c>
	err = bt_hci_disconnect(conn->handle, reason);
   2488e:	8800      	ldrh	r0, [r0, #0]
   24890:	f7ff fd4b 	bl	2432a <bt_hci_disconnect>
	if (err) {
   24894:	4605      	mov	r5, r0
   24896:	2800      	cmp	r0, #0
   24898:	d1f1      	bne.n	2487e <bt_conn_disconnect+0x1c>
	if (conn->state == BT_CONN_CONNECTED) {
   2489a:	7aa3      	ldrb	r3, [r4, #10]
   2489c:	2b07      	cmp	r3, #7
   2489e:	d1ee      	bne.n	2487e <bt_conn_disconnect+0x1c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   248a0:	2108      	movs	r1, #8
   248a2:	4620      	mov	r0, r4
   248a4:	f7e3 fc82 	bl	81ac <bt_conn_set_state>
   248a8:	e7e9      	b.n	2487e <bt_conn_disconnect+0x1c>

000248aa <bt_conn_get_security>:
}
   248aa:	2001      	movs	r0, #1
   248ac:	4770      	bx	lr

000248ae <bt_conn_is_peer_addr_le>:
{
   248ae:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   248b0:	7a03      	ldrb	r3, [r0, #8]
   248b2:	428b      	cmp	r3, r1
{
   248b4:	4604      	mov	r4, r0
   248b6:	4615      	mov	r5, r2
	if (id != conn->id) {
   248b8:	d115      	bne.n	248e6 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   248ba:	f100 0188 	add.w	r1, r0, #136	; 0x88
   248be:	2207      	movs	r2, #7
   248c0:	4628      	mov	r0, r5
   248c2:	f7ff fa60 	bl	23d86 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   248c6:	b180      	cbz	r0, 248ea <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   248c8:	78e3      	ldrb	r3, [r4, #3]
   248ca:	2207      	movs	r2, #7
   248cc:	b943      	cbnz	r3, 248e0 <bt_conn_is_peer_addr_le+0x32>
   248ce:	f104 0196 	add.w	r1, r4, #150	; 0x96
   248d2:	4628      	mov	r0, r5
   248d4:	f7ff fa57 	bl	23d86 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   248d8:	fab0 f080 	clz	r0, r0
   248dc:	0940      	lsrs	r0, r0, #5
}
   248de:	bd38      	pop	{r3, r4, r5, pc}
   248e0:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   248e4:	e7f5      	b.n	248d2 <bt_conn_is_peer_addr_le+0x24>
		return false;
   248e6:	2000      	movs	r0, #0
   248e8:	e7f9      	b.n	248de <bt_conn_is_peer_addr_le+0x30>
		return true;
   248ea:	2001      	movs	r0, #1
   248ec:	e7f7      	b.n	248de <bt_conn_is_peer_addr_le+0x30>

000248ee <bt_conn_le_conn_update>:
{
   248ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   248f0:	4607      	mov	r7, r0
   248f2:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   248f4:	f242 0013 	movw	r0, #8211	; 0x2013
   248f8:	210e      	movs	r1, #14
   248fa:	f7e1 fa03 	bl	5d04 <bt_hci_cmd_create>
	if (!buf) {
   248fe:	4606      	mov	r6, r0
   24900:	b1d0      	cbz	r0, 24938 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   24902:	210e      	movs	r1, #14
   24904:	3008      	adds	r0, #8
   24906:	f003 fc9f 	bl	28248 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   2490a:	220e      	movs	r2, #14
   2490c:	4604      	mov	r4, r0
   2490e:	2100      	movs	r1, #0
   24910:	f7ff fa55 	bl	23dbe <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   24914:	883b      	ldrh	r3, [r7, #0]
   24916:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   24918:	882b      	ldrh	r3, [r5, #0]
   2491a:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2491c:	886b      	ldrh	r3, [r5, #2]
   2491e:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   24920:	88ab      	ldrh	r3, [r5, #4]
   24922:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   24924:	88eb      	ldrh	r3, [r5, #6]
   24926:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   24928:	4631      	mov	r1, r6
   2492a:	2200      	movs	r2, #0
}
   2492c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   24930:	f242 0013 	movw	r0, #8211	; 0x2013
   24934:	f7e1 bb3e 	b.w	5fb4 <bt_hci_cmd_send_sync>
}
   24938:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2493c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002493e <l2cap_connected>:
}
   2493e:	4770      	bx	lr

00024940 <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   24940:	3010      	adds	r0, #16
   24942:	f004 ba4e 	b.w	28de2 <k_work_cancel_delayable>

00024946 <bt_l2cap_chan_remove>:
	return list->head;
   24946:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   24948:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2494a:	b17b      	cbz	r3, 2496c <bt_l2cap_chan_remove+0x26>
   2494c:	3b08      	subs	r3, #8
   2494e:	2200      	movs	r2, #0
   24950:	b163      	cbz	r3, 2496c <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   24952:	428b      	cmp	r3, r1
			sys_slist_remove(&conn->channels, prev, &chan->node);
   24954:	f103 0408 	add.w	r4, r3, #8
		if (chan == ch) {
   24958:	d10e      	bne.n	24978 <bt_l2cap_chan_remove+0x32>
	return node->next;
   2495a:	6899      	ldr	r1, [r3, #8]
	return list->tail;
   2495c:	6d45      	ldr	r5, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   2495e:	b932      	cbnz	r2, 2496e <bt_l2cap_chan_remove+0x28>
   24960:	42ac      	cmp	r4, r5
	list->head = node;
   24962:	6501      	str	r1, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   24964:	d100      	bne.n	24968 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   24966:	6541      	str	r1, [r0, #84]	; 0x54
	parent->next = child;
   24968:	2200      	movs	r2, #0
   2496a:	609a      	str	r2, [r3, #8]
}
   2496c:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_REMOVE(slist, snode)
   2496e:	42ac      	cmp	r4, r5
	parent->next = child;
   24970:	6011      	str	r1, [r2, #0]
	list->tail = node;
   24972:	bf08      	it	eq
   24974:	6542      	streq	r2, [r0, #84]	; 0x54
}
   24976:	e7f7      	b.n	24968 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   24978:	2c00      	cmp	r4, #0
   2497a:	d0f7      	beq.n	2496c <bt_l2cap_chan_remove+0x26>
	return node->next;
   2497c:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2497e:	2b00      	cmp	r3, #0
   24980:	d0f4      	beq.n	2496c <bt_l2cap_chan_remove+0x26>
   24982:	3b08      	subs	r3, #8
   24984:	4622      	mov	r2, r4
   24986:	e7e3      	b.n	24950 <bt_l2cap_chan_remove+0xa>

00024988 <bt_l2cap_chan_del>:
{
   24988:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   2498a:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   2498e:	4604      	mov	r4, r0
	if (!chan->conn) {
   24990:	b123      	cbz	r3, 2499c <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   24992:	686b      	ldr	r3, [r5, #4]
   24994:	b103      	cbz	r3, 24998 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   24996:	4798      	blx	r3
	chan->conn = NULL;
   24998:	2300      	movs	r3, #0
   2499a:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   2499c:	68e3      	ldr	r3, [r4, #12]
   2499e:	b10b      	cbz	r3, 249a4 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   249a0:	4620      	mov	r0, r4
   249a2:	4798      	blx	r3
	if (ops->released) {
   249a4:	69eb      	ldr	r3, [r5, #28]
   249a6:	b11b      	cbz	r3, 249b0 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   249a8:	4620      	mov	r0, r4
}
   249aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   249ae:	4718      	bx	r3
}
   249b0:	bd70      	pop	{r4, r5, r6, pc}

000249b2 <bt_l2cap_disconnected>:
	return list->head;
   249b2:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   249b4:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   249b6:	b18b      	cbz	r3, 249dc <bt_l2cap_disconnected+0x2a>
   249b8:	f1b3 0008 	subs.w	r0, r3, #8
   249bc:	d00e      	beq.n	249dc <bt_l2cap_disconnected+0x2a>
	return node->next;
   249be:	681c      	ldr	r4, [r3, #0]
   249c0:	b104      	cbz	r4, 249c4 <bt_l2cap_disconnected+0x12>
   249c2:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   249c4:	f7ff ffe0 	bl	24988 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   249c8:	b144      	cbz	r4, 249dc <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   249ca:	f114 0308 	adds.w	r3, r4, #8
   249ce:	d002      	beq.n	249d6 <bt_l2cap_disconnected+0x24>
	return node->next;
   249d0:	68a3      	ldr	r3, [r4, #8]
   249d2:	b103      	cbz	r3, 249d6 <bt_l2cap_disconnected+0x24>
   249d4:	3b08      	subs	r3, #8
{
   249d6:	4620      	mov	r0, r4
   249d8:	461c      	mov	r4, r3
   249da:	e7f3      	b.n	249c4 <bt_l2cap_disconnected+0x12>
}
   249dc:	bd10      	pop	{r4, pc}

000249de <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   249de:	3104      	adds	r1, #4
   249e0:	f7e3 bcd6 	b.w	8390 <bt_conn_create_pdu_timeout>

000249e4 <bt_l2cap_send_cb>:
{
   249e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   249e8:	4614      	mov	r4, r2
   249ea:	4605      	mov	r5, r0
   249ec:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   249ee:	f102 0008 	add.w	r0, r2, #8
   249f2:	2104      	movs	r1, #4
   249f4:	461e      	mov	r6, r3
   249f6:	f8dd 8018 	ldr.w	r8, [sp, #24]
   249fa:	f003 fc68 	bl	282ce <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   249fe:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   24a00:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   24a02:	3a04      	subs	r2, #4
   24a04:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   24a06:	4643      	mov	r3, r8
   24a08:	4632      	mov	r2, r6
   24a0a:	4621      	mov	r1, r4
   24a0c:	4628      	mov	r0, r5
}
   24a0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   24a12:	f7e3 bb21 	b.w	8058 <bt_conn_send_cb>

00024a16 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   24a16:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   24a18:	b160      	cbz	r0, 24a34 <bt_l2cap_le_lookup_tx_cid+0x1e>
   24a1a:	3808      	subs	r0, #8
   24a1c:	b900      	cbnz	r0, 24a20 <bt_l2cap_le_lookup_tx_cid+0xa>
   24a1e:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   24a20:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
   24a24:	428b      	cmp	r3, r1
   24a26:	d005      	beq.n	24a34 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   24a28:	f110 0308 	adds.w	r3, r0, #8
   24a2c:	d001      	beq.n	24a32 <bt_l2cap_le_lookup_tx_cid+0x1c>
	return node->next;
   24a2e:	6880      	ldr	r0, [r0, #8]
   24a30:	e7f2      	b.n	24a18 <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   24a32:	4618      	mov	r0, r3
}
   24a34:	4770      	bx	lr

00024a36 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   24a36:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   24a38:	b160      	cbz	r0, 24a54 <bt_l2cap_le_lookup_rx_cid+0x1e>
   24a3a:	3808      	subs	r0, #8
   24a3c:	b900      	cbnz	r0, 24a40 <bt_l2cap_le_lookup_rx_cid+0xa>
   24a3e:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   24a40:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   24a44:	428b      	cmp	r3, r1
   24a46:	d005      	beq.n	24a54 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   24a48:	f110 0308 	adds.w	r3, r0, #8
   24a4c:	d001      	beq.n	24a52 <bt_l2cap_le_lookup_rx_cid+0x1c>
	return node->next;
   24a4e:	6880      	ldr	r0, [r0, #8]
   24a50:	e7f2      	b.n	24a38 <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   24a52:	4618      	mov	r0, r3
}
   24a54:	4770      	bx	lr

00024a56 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   24a56:	4770      	bx	lr

00024a58 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   24a58:	4603      	mov	r3, r0
	return list->head;
   24a5a:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   24a5c:	b128      	cbz	r0, 24a6a <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24a5e:	6859      	ldr	r1, [r3, #4]
	return node->next;
   24a60:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   24a62:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24a64:	4288      	cmp	r0, r1
	list->tail = node;
   24a66:	bf08      	it	eq
   24a68:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   24a6a:	4770      	bx	lr

00024a6c <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   24a6c:	4603      	mov	r3, r0
	size_t bytes = 0;
   24a6e:	2000      	movs	r0, #0

	while (buf) {
   24a70:	b903      	cbnz	r3, 24a74 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   24a72:	4770      	bx	lr
		bytes += buf->len;
   24a74:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   24a76:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   24a78:	4410      	add	r0, r2
		buf = buf->frags;
   24a7a:	e7f9      	b.n	24a70 <net_buf_frags_len+0x4>

00024a7c <att_sent>:
	if (chan->ops->sent) {
   24a7c:	684b      	ldr	r3, [r1, #4]
   24a7e:	695b      	ldr	r3, [r3, #20]
{
   24a80:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   24a82:	b103      	cbz	r3, 24a86 <att_sent+0xa>
		chan->ops->sent(chan);
   24a84:	4718      	bx	r3
}
   24a86:	4770      	bx	lr

00024a88 <attr_read_type_cb>:
{
   24a88:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   24a8a:	68d4      	ldr	r4, [r2, #12]
   24a8c:	7823      	ldrb	r3, [r4, #0]
   24a8e:	3102      	adds	r1, #2
   24a90:	b913      	cbnz	r3, 24a98 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   24a92:	7021      	strb	r1, [r4, #0]
	return true;
   24a94:	2001      	movs	r0, #1
   24a96:	e006      	b.n	24aa6 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   24a98:	428b      	cmp	r3, r1
   24a9a:	d0fb      	beq.n	24a94 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   24a9c:	8983      	ldrh	r3, [r0, #12]
   24a9e:	3b02      	subs	r3, #2
   24aa0:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   24aa2:	2000      	movs	r0, #0
   24aa4:	6110      	str	r0, [r2, #16]
}
   24aa6:	bd10      	pop	{r4, pc}

00024aa8 <att_op_get_type>:
	switch (op) {
   24aa8:	281e      	cmp	r0, #30
   24aaa:	d816      	bhi.n	24ada <att_op_get_type+0x32>
   24aac:	b308      	cbz	r0, 24af2 <att_op_get_type+0x4a>
   24aae:	1e43      	subs	r3, r0, #1
   24ab0:	2b1d      	cmp	r3, #29
   24ab2:	d81e      	bhi.n	24af2 <att_op_get_type+0x4a>
   24ab4:	e8df f003 	tbb	[pc, r3]
   24ab8:	23172317 	.word	0x23172317
   24abc:	23172317 	.word	0x23172317
   24ac0:	23172317 	.word	0x23172317
   24ac4:	23172317 	.word	0x23172317
   24ac8:	1d172317 	.word	0x1d172317
   24acc:	2317231d 	.word	0x2317231d
   24ad0:	1d191d17 	.word	0x1d191d17
   24ad4:	0f1b      	.short	0x0f1b
   24ad6:	2004      	movs	r0, #4
   24ad8:	4770      	bx	lr
   24ada:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   24ade:	2b52      	cmp	r3, #82	; 0x52
   24ae0:	d107      	bne.n	24af2 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   24ae2:	2000      	movs	r0, #0
}
   24ae4:	4770      	bx	lr
		return ATT_RESPONSE;
   24ae6:	2002      	movs	r0, #2
   24ae8:	4770      	bx	lr
		return ATT_NOTIFICATION;
   24aea:	2003      	movs	r0, #3
   24aec:	4770      	bx	lr
		return ATT_INDICATION;
   24aee:	2005      	movs	r0, #5
   24af0:	4770      	bx	lr
		return ATT_COMMAND;
   24af2:	f010 0f40 	tst.w	r0, #64	; 0x40
   24af6:	bf0c      	ite	eq
   24af8:	2006      	moveq	r0, #6
   24afa:	2000      	movne	r0, #0
   24afc:	4770      	bx	lr
		return ATT_REQUEST;
   24afe:	2001      	movs	r0, #1
   24b00:	4770      	bx	lr

00024b02 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   24b02:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   24b04:	e9cd 2301 	strd	r2, r3, [sp, #4]
   24b08:	2300      	movs	r3, #0
   24b0a:	9300      	str	r3, [sp, #0]
   24b0c:	461a      	mov	r2, r3
   24b0e:	f7e5 fdd1 	bl	a6b4 <bt_gatt_foreach_attr_type>
				  user_data);
}
   24b12:	b005      	add	sp, #20
   24b14:	f85d fb04 	ldr.w	pc, [sp], #4

00024b18 <find_info_cb>:
{
   24b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   24b1a:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   24b1c:	6817      	ldr	r7, [r2, #0]
{
   24b1e:	4605      	mov	r5, r0
   24b20:	460e      	mov	r6, r1
   24b22:	4614      	mov	r4, r2
	if (!data->rsp) {
   24b24:	b963      	cbnz	r3, 24b40 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   24b26:	6850      	ldr	r0, [r2, #4]
   24b28:	2101      	movs	r1, #1
   24b2a:	3008      	adds	r0, #8
   24b2c:	f003 fb8c 	bl	28248 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   24b30:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   24b32:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   24b34:	781b      	ldrb	r3, [r3, #0]
   24b36:	2b00      	cmp	r3, #0
   24b38:	bf0c      	ite	eq
   24b3a:	2301      	moveq	r3, #1
   24b3c:	2302      	movne	r3, #2
   24b3e:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   24b40:	68a3      	ldr	r3, [r4, #8]
   24b42:	781b      	ldrb	r3, [r3, #0]
   24b44:	2b01      	cmp	r3, #1
   24b46:	d003      	beq.n	24b50 <find_info_cb+0x38>
   24b48:	2b02      	cmp	r3, #2
   24b4a:	d019      	beq.n	24b80 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   24b4c:	2000      	movs	r0, #0
   24b4e:	e016      	b.n	24b7e <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   24b50:	682b      	ldr	r3, [r5, #0]
   24b52:	781b      	ldrb	r3, [r3, #0]
   24b54:	2b00      	cmp	r3, #0
   24b56:	d1f9      	bne.n	24b4c <find_info_cb+0x34>
   24b58:	6860      	ldr	r0, [r4, #4]
   24b5a:	2104      	movs	r1, #4
   24b5c:	3008      	adds	r0, #8
   24b5e:	f003 fb73 	bl	28248 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   24b62:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   24b64:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   24b66:	885b      	ldrh	r3, [r3, #2]
   24b68:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   24b6a:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   24b6c:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   24b6e:	899b      	ldrh	r3, [r3, #12]
   24b70:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   24b74:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   24b76:	2804      	cmp	r0, #4
   24b78:	bf94      	ite	ls
   24b7a:	2000      	movls	r0, #0
   24b7c:	2001      	movhi	r0, #1
}
   24b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   24b80:	682b      	ldr	r3, [r5, #0]
   24b82:	781b      	ldrb	r3, [r3, #0]
   24b84:	2b02      	cmp	r3, #2
   24b86:	d1e1      	bne.n	24b4c <find_info_cb+0x34>
   24b88:	6860      	ldr	r0, [r4, #4]
   24b8a:	2112      	movs	r1, #18
   24b8c:	3008      	adds	r0, #8
   24b8e:	f003 fb5b 	bl	28248 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   24b92:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   24b94:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   24b96:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   24b98:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   24b9c:	3101      	adds	r1, #1
   24b9e:	f7ff f903 	bl	23da8 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   24ba2:	6863      	ldr	r3, [r4, #4]
   24ba4:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   24ba8:	899b      	ldrh	r3, [r3, #12]
   24baa:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   24bac:	2812      	cmp	r0, #18
   24bae:	e7e3      	b.n	24b78 <find_info_cb+0x60>

00024bb0 <att_chan_mtu_updated>:
{
   24bb0:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   24bb2:	6806      	ldr	r6, [r0, #0]
	return list->head;
   24bb4:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   24bb6:	b30b      	cbz	r3, 24bfc <att_chan_mtu_updated+0x4c>
   24bb8:	f5b3 74a2 	subs.w	r4, r3, #324	; 0x144
   24bbc:	d01d      	beq.n	24bfa <att_chan_mtu_updated+0x4a>
	return node->next;
   24bbe:	681a      	ldr	r2, [r3, #0]
   24bc0:	b10a      	cbz	r2, 24bc6 <att_chan_mtu_updated+0x16>
   24bc2:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
{
   24bc6:	2300      	movs	r3, #0
   24bc8:	4619      	mov	r1, r3
		if (chan == updated_chan) {
   24bca:	42a0      	cmp	r0, r4
   24bcc:	d009      	beq.n	24be2 <att_chan_mtu_updated+0x32>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   24bce:	f8b4 508a 	ldrh.w	r5, [r4, #138]	; 0x8a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   24bd2:	f8b4 407a 	ldrh.w	r4, [r4, #122]	; 0x7a
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   24bd6:	42a9      	cmp	r1, r5
   24bd8:	bf38      	it	cc
   24bda:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   24bdc:	42a3      	cmp	r3, r4
   24bde:	bf38      	it	cc
   24be0:	4623      	movcc	r3, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   24be2:	b162      	cbz	r2, 24bfe <att_chan_mtu_updated+0x4e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   24be4:	f512 75a2 	adds.w	r5, r2, #324	; 0x144
   24be8:	d004      	beq.n	24bf4 <att_chan_mtu_updated+0x44>
	return node->next;
   24bea:	f8d2 5144 	ldr.w	r5, [r2, #324]	; 0x144
   24bee:	b10d      	cbz	r5, 24bf4 <att_chan_mtu_updated+0x44>
   24bf0:	f5a5 75a2 	sub.w	r5, r5, #324	; 0x144
{
   24bf4:	4614      	mov	r4, r2
   24bf6:	462a      	mov	r2, r5
   24bf8:	e7e7      	b.n	24bca <att_chan_mtu_updated+0x1a>
   24bfa:	4623      	mov	r3, r4
   24bfc:	4619      	mov	r1, r3
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   24bfe:	f8b0 408a 	ldrh.w	r4, [r0, #138]	; 0x8a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   24c02:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   24c06:	428c      	cmp	r4, r1
   24c08:	d801      	bhi.n	24c0e <att_chan_mtu_updated+0x5e>
   24c0a:	429a      	cmp	r2, r3
   24c0c:	d909      	bls.n	24c22 <att_chan_mtu_updated+0x72>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   24c0e:	429a      	cmp	r2, r3
   24c10:	bf38      	it	cc
   24c12:	461a      	movcc	r2, r3
   24c14:	42a1      	cmp	r1, r4
   24c16:	6830      	ldr	r0, [r6, #0]
   24c18:	bf38      	it	cc
   24c1a:	4621      	movcc	r1, r4
}
   24c1c:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   24c1e:	f7e6 bad7 	b.w	b1d0 <bt_gatt_att_max_mtu_changed>
}
   24c22:	bc70      	pop	{r4, r5, r6}
   24c24:	4770      	bx	lr

00024c26 <attr_read_group_cb>:
	if (!data->rsp->len) {
   24c26:	68d0      	ldr	r0, [r2, #12]
   24c28:	7803      	ldrb	r3, [r0, #0]
   24c2a:	3104      	adds	r1, #4
   24c2c:	b913      	cbnz	r3, 24c34 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   24c2e:	7001      	strb	r1, [r0, #0]
	return true;
   24c30:	2001      	movs	r0, #1
}
   24c32:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   24c34:	428b      	cmp	r3, r1
   24c36:	d0fb      	beq.n	24c30 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   24c38:	6891      	ldr	r1, [r2, #8]
   24c3a:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   24c3c:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   24c3e:	3b04      	subs	r3, #4
   24c40:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   24c42:	6110      	str	r0, [r2, #16]
		return false;
   24c44:	4770      	bx	lr

00024c46 <chan_req_sent>:
	if (chan->req) {
   24c46:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   24c4a:	b133      	cbz	r3, 24c5a <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   24c4c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   24c50:	2300      	movs	r3, #0
   24c52:	f500 7088 	add.w	r0, r0, #272	; 0x110
   24c56:	f7fb bbe5 	b.w	20424 <k_work_reschedule>
}
   24c5a:	4770      	bx	lr

00024c5c <write_cb>:
{
   24c5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   24c5e:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   24c60:	4601      	mov	r1, r0
{
   24c62:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   24c64:	222a      	movs	r2, #42	; 0x2a
   24c66:	6820      	ldr	r0, [r4, #0]
   24c68:	f000 fd88 	bl	2577c <bt_gatt_check_perm>
   24c6c:	4605      	mov	r5, r0
   24c6e:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   24c70:	bb00      	cbnz	r0, 24cb4 <write_cb+0x58>
	if (!data->req) {
   24c72:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   24c74:	68b7      	ldr	r7, [r6, #8]
   24c76:	68e2      	ldr	r2, [r4, #12]
   24c78:	6820      	ldr	r0, [r4, #0]
		flags |= BT_GATT_WRITE_FLAG_CMD;
   24c7a:	2b00      	cmp	r3, #0
   24c7c:	bf14      	ite	ne
   24c7e:	2300      	movne	r3, #0
   24c80:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   24c82:	9301      	str	r3, [sp, #4]
   24c84:	8a63      	ldrh	r3, [r4, #18]
   24c86:	9300      	str	r3, [sp, #0]
   24c88:	4631      	mov	r1, r6
   24c8a:	8a23      	ldrh	r3, [r4, #16]
   24c8c:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   24c8e:	1e03      	subs	r3, r0, #0
   24c90:	db05      	blt.n	24c9e <write_cb+0x42>
   24c92:	8a22      	ldrh	r2, [r4, #16]
   24c94:	4293      	cmp	r3, r2
   24c96:	d10b      	bne.n	24cb0 <write_cb+0x54>
	data->err = 0U;
   24c98:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   24c9a:	2501      	movs	r5, #1
   24c9c:	e005      	b.n	24caa <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   24c9e:	f113 0fff 	cmn.w	r3, #255	; 0xff
   24ca2:	d305      	bcc.n	24cb0 <write_cb+0x54>
		return -err;
   24ca4:	425b      	negs	r3, r3
   24ca6:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   24ca8:	7523      	strb	r3, [r4, #20]
}
   24caa:	4628      	mov	r0, r5
   24cac:	b003      	add	sp, #12
   24cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   24cb0:	230e      	movs	r3, #14
   24cb2:	e7f9      	b.n	24ca8 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   24cb4:	2500      	movs	r5, #0
   24cb6:	e7f8      	b.n	24caa <write_cb+0x4e>

00024cb8 <chan_req_send>:
{
   24cb8:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   24cba:	688e      	ldr	r6, [r1, #8]
{
   24cbc:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   24cbe:	4630      	mov	r0, r6
   24cc0:	f7ff fed4 	bl	24a6c <net_buf_frags_len>
   24cc4:	f8b5 308a 	ldrh.w	r3, [r5, #138]	; 0x8a
   24cc8:	4283      	cmp	r3, r0
{
   24cca:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   24ccc:	d30a      	bcc.n	24ce4 <chan_req_send+0x2c>
	req->buf = NULL;
   24cce:	2200      	movs	r2, #0
	chan->req = req;
   24cd0:	f8c5 10f4 	str.w	r1, [r5, #244]	; 0xf4
	err = chan_send(chan, buf, NULL);
   24cd4:	4628      	mov	r0, r5
	req->buf = NULL;
   24cd6:	608a      	str	r2, [r1, #8]
	err = chan_send(chan, buf, NULL);
   24cd8:	4631      	mov	r1, r6
   24cda:	f7e4 f8d3 	bl	8e84 <chan_send>
	if (err) {
   24cde:	b100      	cbz	r0, 24ce2 <chan_req_send+0x2a>
		req->buf = buf;
   24ce0:	60a6      	str	r6, [r4, #8]
}
   24ce2:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   24ce4:	f06f 0079 	mvn.w	r0, #121	; 0x79
   24ce8:	e7fb      	b.n	24ce2 <chan_req_send+0x2a>

00024cea <process_queue>:
{
   24cea:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   24cec:	2200      	movs	r2, #0
{
   24cee:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   24cf0:	2300      	movs	r3, #0
   24cf2:	4608      	mov	r0, r1
{
   24cf4:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   24cf6:	f003 f9ee 	bl	280d6 <net_buf_get>
	if (buf) {
   24cfa:	4605      	mov	r5, r0
   24cfc:	b160      	cbz	r0, 24d18 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   24cfe:	4601      	mov	r1, r0
   24d00:	2200      	movs	r2, #0
   24d02:	4620      	mov	r0, r4
   24d04:	f7e4 f8be 	bl	8e84 <chan_send>
		if (err) {
   24d08:	4604      	mov	r4, r0
   24d0a:	b118      	cbz	r0, 24d14 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   24d0c:	4629      	mov	r1, r5
   24d0e:	4630      	mov	r0, r6
   24d10:	f003 ff5b 	bl	28bca <k_queue_prepend>
}
   24d14:	4620      	mov	r0, r4
   24d16:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   24d18:	f06f 0401 	mvn.w	r4, #1
   24d1c:	e7fa      	b.n	24d14 <process_queue+0x2a>

00024d1e <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24d1e:	b510      	push	{r4, lr}
	return list->head;
   24d20:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24d22:	2200      	movs	r2, #0
   24d24:	b153      	cbz	r3, 24d3c <sys_slist_find_and_remove.isra.0+0x1e>
   24d26:	428b      	cmp	r3, r1
   24d28:	d10e      	bne.n	24d48 <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   24d2a:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   24d2c:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   24d2e:	b932      	cbnz	r2, 24d3e <sys_slist_find_and_remove.isra.0+0x20>
   24d30:	42a1      	cmp	r1, r4
	list->head = node;
   24d32:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   24d34:	d100      	bne.n	24d38 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   24d36:	6043      	str	r3, [r0, #4]
	parent->next = child;
   24d38:	2300      	movs	r3, #0
   24d3a:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24d3c:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   24d3e:	42a1      	cmp	r1, r4
	parent->next = child;
   24d40:	6013      	str	r3, [r2, #0]
	list->tail = node;
   24d42:	bf08      	it	eq
   24d44:	6042      	streq	r2, [r0, #4]
}
   24d46:	e7f7      	b.n	24d38 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   24d48:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24d4a:	681b      	ldr	r3, [r3, #0]
   24d4c:	e7ea      	b.n	24d24 <sys_slist_find_and_remove.isra.0+0x6>

00024d4e <att_chan_read>:
{
   24d4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24d52:	4680      	mov	r8, r0
   24d54:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   24d56:	4610      	mov	r0, r2
{
   24d58:	4699      	mov	r9, r3
   24d5a:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   24d5c:	f7ff fe86 	bl	24a6c <net_buf_frags_len>
   24d60:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   24d64:	4283      	cmp	r3, r0
{
   24d66:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   24d68:	d97a      	bls.n	24e60 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   24d6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   24d6e:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   24d70:	4630      	mov	r0, r6
   24d72:	f003 fa3b 	bl	281ec <net_buf_frag_last>
	size_t len, total = 0;
   24d76:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   24d7a:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   24d7c:	4630      	mov	r0, r6
   24d7e:	f7ff fe75 	bl	24a6c <net_buf_frags_len>
   24d82:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   24d86:	f105 0708 	add.w	r7, r5, #8
   24d8a:	1a24      	subs	r4, r4, r0
   24d8c:	4638      	mov	r0, r7
   24d8e:	f003 fb10 	bl	283b2 <net_buf_simple_tailroom>
   24d92:	4284      	cmp	r4, r0
   24d94:	d211      	bcs.n	24dba <att_chan_read+0x6c>
   24d96:	4630      	mov	r0, r6
   24d98:	f7ff fe68 	bl	24a6c <net_buf_frags_len>
   24d9c:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   24da0:	1a24      	subs	r4, r4, r0
		if (!len) {
   24da2:	bb34      	cbnz	r4, 24df2 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   24da4:	79b0      	ldrb	r0, [r6, #6]
   24da6:	f7f8 ff1f 	bl	1dbe8 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   24daa:	2200      	movs	r2, #0
   24dac:	2300      	movs	r3, #0
   24dae:	f003 f98d 	bl	280cc <net_buf_alloc_fixed>
			if (!frag) {
   24db2:	4605      	mov	r5, r0
   24db4:	b930      	cbnz	r0, 24dc4 <att_chan_read+0x76>
	return total;
   24db6:	4657      	mov	r7, sl
   24db8:	e02c      	b.n	24e14 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   24dba:	4638      	mov	r0, r7
   24dbc:	f003 faf9 	bl	283b2 <net_buf_simple_tailroom>
   24dc0:	4604      	mov	r4, r0
   24dc2:	e7ee      	b.n	24da2 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   24dc4:	4601      	mov	r1, r0
   24dc6:	4630      	mov	r0, r6
   24dc8:	f003 fa21 	bl	2820e <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   24dcc:	4630      	mov	r0, r6
   24dce:	f7ff fe4d 	bl	24a6c <net_buf_frags_len>
   24dd2:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   24dd6:	f105 0708 	add.w	r7, r5, #8
   24dda:	1a24      	subs	r4, r4, r0
   24ddc:	4638      	mov	r0, r7
   24dde:	f003 fae8 	bl	283b2 <net_buf_simple_tailroom>
   24de2:	4284      	cmp	r4, r0
   24de4:	d21a      	bcs.n	24e1c <att_chan_read+0xce>
   24de6:	4630      	mov	r0, r6
   24de8:	f7ff fe40 	bl	24a6c <net_buf_frags_len>
   24dec:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   24df0:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   24df2:	68a9      	ldr	r1, [r5, #8]
   24df4:	89aa      	ldrh	r2, [r5, #12]
   24df6:	f8db 7004 	ldr.w	r7, [fp, #4]
   24dfa:	9803      	ldr	r0, [sp, #12]
   24dfc:	f8cd 9000 	str.w	r9, [sp]
   24e00:	440a      	add	r2, r1
   24e02:	b2a3      	uxth	r3, r4
   24e04:	4659      	mov	r1, fp
   24e06:	47b8      	blx	r7
		if (read < 0) {
   24e08:	1e07      	subs	r7, r0, #0
   24e0a:	da0c      	bge.n	24e26 <att_chan_read+0xd8>
				return total;
   24e0c:	f1ba 0f00 	cmp.w	sl, #0
   24e10:	bf18      	it	ne
   24e12:	4657      	movne	r7, sl
}
   24e14:	4638      	mov	r0, r7
   24e16:	b005      	add	sp, #20
   24e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24e1c:	4638      	mov	r0, r7
   24e1e:	f003 fac8 	bl	283b2 <net_buf_simple_tailroom>
   24e22:	4604      	mov	r4, r0
   24e24:	e7e5      	b.n	24df2 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   24e26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   24e28:	b993      	cbnz	r3, 24e50 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   24e2a:	4639      	mov	r1, r7
   24e2c:	f105 0008 	add.w	r0, r5, #8
   24e30:	f003 fa0a 	bl	28248 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   24e34:	4630      	mov	r0, r6
   24e36:	f7ff fe19 	bl	24a6c <net_buf_frags_len>
   24e3a:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
		offset += read;
   24e3e:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   24e40:	4283      	cmp	r3, r0
		total += read;
   24e42:	44ba      	add	sl, r7
		offset += read;
   24e44:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   24e48:	d9b5      	bls.n	24db6 <att_chan_read+0x68>
   24e4a:	42a7      	cmp	r7, r4
   24e4c:	d096      	beq.n	24d7c <att_chan_read+0x2e>
   24e4e:	e7b2      	b.n	24db6 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   24e50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   24e52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   24e54:	4639      	mov	r1, r7
   24e56:	4628      	mov	r0, r5
   24e58:	4798      	blx	r3
   24e5a:	2800      	cmp	r0, #0
   24e5c:	d1e5      	bne.n	24e2a <att_chan_read+0xdc>
   24e5e:	e7aa      	b.n	24db6 <att_chan_read+0x68>
		return 0;
   24e60:	2700      	movs	r7, #0
   24e62:	e7d7      	b.n	24e14 <att_chan_read+0xc6>

00024e64 <chan_cfm_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   24e64:	30f0      	adds	r0, #240	; 0xf0
   24e66:	f3bf 8f5b 	dmb	ish
   24e6a:	e850 3f00 	ldrex	r3, [r0]
   24e6e:	f023 0302 	bic.w	r3, r3, #2
   24e72:	e840 3200 	strex	r2, r3, [r0]
   24e76:	2a00      	cmp	r2, #0
   24e78:	d1f7      	bne.n	24e6a <chan_cfm_sent+0x6>
   24e7a:	f3bf 8f5b 	dmb	ish
}
   24e7e:	4770      	bx	lr

00024e80 <chan_rsp_sent>:
   24e80:	30f0      	adds	r0, #240	; 0xf0
   24e82:	f3bf 8f5b 	dmb	ish
   24e86:	e850 3f00 	ldrex	r3, [r0]
   24e8a:	f023 0301 	bic.w	r3, r3, #1
   24e8e:	e840 3200 	strex	r2, r3, [r0]
   24e92:	2a00      	cmp	r2, #0
   24e94:	d1f7      	bne.n	24e86 <chan_rsp_sent+0x6>
   24e96:	f3bf 8f5b 	dmb	ish
}
   24e9a:	4770      	bx	lr

00024e9c <read_cb>:
{
   24e9c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   24ea0:	f8d2 8000 	ldr.w	r8, [r2]
{
   24ea4:	4606      	mov	r6, r0
	data->err = 0x00;
   24ea6:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   24ea8:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   24eac:	7317      	strb	r7, [r2, #12]
{
   24eae:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   24eb0:	4631      	mov	r1, r6
   24eb2:	2215      	movs	r2, #21
   24eb4:	f000 fc62 	bl	2577c <bt_gatt_check_perm>
   24eb8:	4604      	mov	r4, r0
   24eba:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   24ebc:	b9a0      	cbnz	r0, 24ee8 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   24ebe:	e9cd 0000 	strd	r0, r0, [sp]
   24ec2:	88ab      	ldrh	r3, [r5, #4]
   24ec4:	68aa      	ldr	r2, [r5, #8]
   24ec6:	4631      	mov	r1, r6
   24ec8:	4640      	mov	r0, r8
   24eca:	f7ff ff40 	bl	24d4e <att_chan_read>
	if (ret < 0) {
   24ece:	1e03      	subs	r3, r0, #0
   24ed0:	da0c      	bge.n	24eec <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   24ed2:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   24ed6:	bf26      	itte	cs
   24ed8:	425b      	negcs	r3, r3
   24eda:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   24edc:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   24ede:	732b      	strb	r3, [r5, #12]
}
   24ee0:	4620      	mov	r0, r4
   24ee2:	b002      	add	sp, #8
   24ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   24ee8:	463c      	mov	r4, r7
   24eea:	e7f9      	b.n	24ee0 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   24eec:	2401      	movs	r4, #1
   24eee:	e7f7      	b.n	24ee0 <read_cb+0x44>

00024ef0 <bt_att_sent>:
{
   24ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   24ef2:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
	struct bt_att *att = chan->att;
   24ef6:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   24efa:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   24efc:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   24f00:	b10b      	cbz	r3, 24f06 <bt_att_sent+0x16>
		chan->sent(chan);
   24f02:	4638      	mov	r0, r7
   24f04:	4798      	blx	r3
   24f06:	f3bf 8f5b 	dmb	ish
   24f0a:	f105 03e8 	add.w	r3, r5, #232	; 0xe8
   24f0e:	e853 2f00 	ldrex	r2, [r3]
   24f12:	f022 0210 	bic.w	r2, r2, #16
   24f16:	e843 2100 	strex	r1, r2, [r3]
   24f1a:	2900      	cmp	r1, #0
   24f1c:	d1f7      	bne.n	24f0e <bt_att_sent+0x1e>
   24f1e:	f3bf 8f5b 	dmb	ish
	if (!att) {
   24f22:	b30c      	cbz	r4, 24f68 <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   24f24:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   24f28:	b98b      	cbnz	r3, 24f4e <bt_att_sent+0x5e>
   24f2a:	6863      	ldr	r3, [r4, #4]
   24f2c:	b17b      	cbz	r3, 24f4e <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   24f2e:	1d20      	adds	r0, r4, #4
   24f30:	f7ff fd92 	bl	24a58 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   24f34:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   24f36:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   24f38:	4638      	mov	r0, r7
   24f3a:	f7ff febd 	bl	24cb8 <chan_req_send>
   24f3e:	2800      	cmp	r0, #0
   24f40:	da12      	bge.n	24f68 <bt_att_sent+0x78>
	parent->next = child;
   24f42:	6863      	ldr	r3, [r4, #4]
   24f44:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   24f46:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   24f48:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   24f4a:	b903      	cbnz	r3, 24f4e <bt_att_sent+0x5e>
	list->tail = node;
   24f4c:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   24f4e:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   24f52:	4638      	mov	r0, r7
   24f54:	f7ff fec9 	bl	24cea <process_queue>
	if (!err) {
   24f58:	b130      	cbz	r0, 24f68 <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   24f5a:	f104 010c 	add.w	r1, r4, #12
   24f5e:	4638      	mov	r0, r7
}
   24f60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   24f64:	f7ff bec1 	b.w	24cea <process_queue>
}
   24f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024f6a <att_req_send_process>:
{
   24f6a:	b570      	push	{r4, r5, r6, lr}
   24f6c:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   24f6e:	3004      	adds	r0, #4
   24f70:	f7ff fd72 	bl	24a58 <sys_slist_get>
	if (!node) {
   24f74:	4606      	mov	r6, r0
   24f76:	b1c0      	cbz	r0, 24faa <att_req_send_process+0x40>
	return list->head;
   24f78:	6beb      	ldr	r3, [r5, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   24f7a:	b153      	cbz	r3, 24f92 <att_req_send_process+0x28>
   24f7c:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   24f80:	d007      	beq.n	24f92 <att_req_send_process+0x28>
	return node->next;
   24f82:	681c      	ldr	r4, [r3, #0]
   24f84:	b10c      	cbz	r4, 24f8a <att_req_send_process+0x20>
   24f86:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
		if (!chan->req) {
   24f8a:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   24f8e:	b13b      	cbz	r3, 24fa0 <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   24f90:	b964      	cbnz	r4, 24fac <att_req_send_process+0x42>
	parent->next = child;
   24f92:	686b      	ldr	r3, [r5, #4]
   24f94:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   24f96:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   24f98:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   24f9a:	b933      	cbnz	r3, 24faa <att_req_send_process+0x40>
	list->tail = node;
   24f9c:	60ae      	str	r6, [r5, #8]
}
   24f9e:	e004      	b.n	24faa <att_req_send_process+0x40>
	return chan_req_send(chan, req);
   24fa0:	4631      	mov	r1, r6
   24fa2:	f7ff fe89 	bl	24cb8 <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   24fa6:	2800      	cmp	r0, #0
   24fa8:	dbf2      	blt.n	24f90 <att_req_send_process+0x26>
}
   24faa:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   24fac:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   24fb0:	d004      	beq.n	24fbc <att_req_send_process+0x52>
	return node->next;
   24fb2:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   24fb6:	b10b      	cbz	r3, 24fbc <att_req_send_process+0x52>
   24fb8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   24fbc:	4620      	mov	r0, r4
   24fbe:	461c      	mov	r4, r3
   24fc0:	e7e3      	b.n	24f8a <att_req_send_process+0x20>

00024fc2 <bt_att_status>:
{
   24fc2:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24fc4:	f3bf 8f5b 	dmb	ish
   24fc8:	680b      	ldr	r3, [r1, #0]
   24fca:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   24fce:	07db      	lsls	r3, r3, #31
{
   24fd0:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   24fd2:	d519      	bpl.n	25008 <bt_att_status+0x46>
	if (!chan->att) {
   24fd4:	f850 0c08 	ldr.w	r0, [r0, #-8]
   24fd8:	b1b0      	cbz	r0, 25008 <bt_att_status+0x46>
	if (chan->req) {
   24fda:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   24fde:	b99b      	cbnz	r3, 25008 <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   24fe0:	3004      	adds	r0, #4
   24fe2:	f7ff fd39 	bl	24a58 <sys_slist_get>
	if (!node) {
   24fe6:	4604      	mov	r4, r0
   24fe8:	b170      	cbz	r0, 25008 <bt_att_status+0x46>
	return chan_req_send(chan, req);
   24fea:	4601      	mov	r1, r0
   24fec:	f1a5 0008 	sub.w	r0, r5, #8
   24ff0:	f7ff fe62 	bl	24cb8 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   24ff4:	2800      	cmp	r0, #0
   24ff6:	da07      	bge.n	25008 <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   24ff8:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   24ffc:	685a      	ldr	r2, [r3, #4]
   24ffe:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   25000:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   25002:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   25004:	b902      	cbnz	r2, 25008 <bt_att_status+0x46>
	list->tail = node;
   25006:	609c      	str	r4, [r3, #8]
}
   25008:	bd38      	pop	{r3, r4, r5, pc}

0002500a <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2500a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2500e:	4688      	mov	r8, r1
   25010:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   25012:	2101      	movs	r1, #1
   25014:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   25016:	4605      	mov	r5, r0
   25018:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2501a:	f7e4 f93b 	bl	9294 <bt_att_chan_create_pdu>
	if (!buf) {
   2501e:	4604      	mov	r4, r0
   25020:	b170      	cbz	r0, 25040 <send_err_rsp.part.0+0x36>
   25022:	2104      	movs	r1, #4
   25024:	3008      	adds	r0, #8
   25026:	f003 f90f 	bl	28248 <net_buf_simple_add>
	rsp->request = req;
   2502a:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   2502e:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   25030:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   25034:	4621      	mov	r1, r4
   25036:	4628      	mov	r0, r5
}
   25038:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   2503c:	f7e3 bf90 	b.w	8f60 <bt_att_chan_send_rsp.constprop.0>
}
   25040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025044 <att_write_cmd>:
{
   25044:	b530      	push	{r4, r5, lr}
   25046:	460c      	mov	r4, r1
   25048:	b085      	sub	sp, #20
   2504a:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   2504c:	f101 0008 	add.w	r0, r1, #8
   25050:	f003 f982 	bl	28358 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   25054:	89a2      	ldrh	r2, [r4, #12]
   25056:	9202      	str	r2, [sp, #8]
   25058:	68a2      	ldr	r2, [r4, #8]
   2505a:	9201      	str	r2, [sp, #4]
   2505c:	2200      	movs	r2, #0
   2505e:	4603      	mov	r3, r0
   25060:	9200      	str	r2, [sp, #0]
   25062:	4611      	mov	r1, r2
   25064:	4628      	mov	r0, r5
   25066:	f7e4 fa09 	bl	947c <att_write_rsp>
}
   2506a:	b005      	add	sp, #20
   2506c:	bd30      	pop	{r4, r5, pc}

0002506e <att_write_req>:
{
   2506e:	b530      	push	{r4, r5, lr}
   25070:	460c      	mov	r4, r1
   25072:	b085      	sub	sp, #20
   25074:	4605      	mov	r5, r0
   25076:	f101 0008 	add.w	r0, r1, #8
   2507a:	f003 f96d 	bl	28358 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   2507e:	89a2      	ldrh	r2, [r4, #12]
   25080:	9202      	str	r2, [sp, #8]
   25082:	68a2      	ldr	r2, [r4, #8]
   25084:	9201      	str	r2, [sp, #4]
   25086:	2200      	movs	r2, #0
   25088:	4603      	mov	r3, r0
   2508a:	9200      	str	r2, [sp, #0]
   2508c:	2112      	movs	r1, #18
   2508e:	2213      	movs	r2, #19
   25090:	4628      	mov	r0, r5
   25092:	f7e4 f9f3 	bl	947c <att_write_rsp>
}
   25096:	b005      	add	sp, #20
   25098:	bd30      	pop	{r4, r5, pc}

0002509a <att_exec_write_req>:
{
   2509a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return att_exec_write_rsp(chan, req->flags);
   2509e:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = chan->chan.chan.conn;
   250a0:	6887      	ldr	r7, [r0, #8]
	return att_exec_write_rsp(chan, req->flags);
   250a2:	f893 8000 	ldrb.w	r8, [r3]
{
   250a6:	4606      	mov	r6, r0
	uint8_t err = 0U;
   250a8:	2400      	movs	r4, #0
	while ((buf = net_buf_get(&chan->att->prep_queue, K_NO_WAIT))) {
   250aa:	6830      	ldr	r0, [r6, #0]
   250ac:	2200      	movs	r2, #0
   250ae:	2300      	movs	r3, #0
   250b0:	3024      	adds	r0, #36	; 0x24
   250b2:	f003 f810 	bl	280d6 <net_buf_get>
   250b6:	4605      	mov	r5, r0
   250b8:	b970      	cbnz	r0, 250d8 <att_exec_write_req+0x3e>
	if (err) {
   250ba:	bb4c      	cbnz	r4, 25110 <att_exec_write_req+0x76>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_EXEC_WRITE_RSP, 0);
   250bc:	2119      	movs	r1, #25
   250be:	4622      	mov	r2, r4
   250c0:	4638      	mov	r0, r7
   250c2:	f7e4 fa3f 	bl	9544 <bt_att_create_pdu>
	if (!buf) {
   250c6:	4601      	mov	r1, r0
   250c8:	b320      	cbz	r0, 25114 <att_exec_write_req+0x7a>
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   250ca:	4630      	mov	r0, r6
   250cc:	f7e3 ff48 	bl	8f60 <bt_att_chan_send_rsp.constprop.0>
}
   250d0:	4620      	mov	r0, r4
   250d2:	b004      	add	sp, #16
   250d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!err && flags == BT_ATT_FLAG_EXEC) {
   250d8:	b9b4      	cbnz	r4, 25108 <att_exec_write_req+0x6e>
   250da:	f1b8 0f01 	cmp.w	r8, #1
   250de:	d113      	bne.n	25108 <att_exec_write_req+0x6e>
			err = att_write_rsp(chan, BT_ATT_OP_EXEC_WRITE_REQ, 0,
   250e0:	89aa      	ldrh	r2, [r5, #12]
   250e2:	8aab      	ldrh	r3, [r5, #20]
   250e4:	9202      	str	r2, [sp, #8]
   250e6:	68aa      	ldr	r2, [r5, #8]
   250e8:	9201      	str	r2, [sp, #4]
   250ea:	8aea      	ldrh	r2, [r5, #22]
   250ec:	9200      	str	r2, [sp, #0]
   250ee:	2118      	movs	r1, #24
   250f0:	4622      	mov	r2, r4
   250f2:	4630      	mov	r0, r6
   250f4:	f7e4 f9c2 	bl	947c <att_write_rsp>
			if (err) {
   250f8:	4604      	mov	r4, r0
   250fa:	b128      	cbz	r0, 25108 <att_exec_write_req+0x6e>
	if (!req) {
   250fc:	4603      	mov	r3, r0
   250fe:	8aaa      	ldrh	r2, [r5, #20]
   25100:	2118      	movs	r1, #24
   25102:	4630      	mov	r0, r6
   25104:	f7ff ff81 	bl	2500a <send_err_rsp.part.0>
		net_buf_unref(buf);
   25108:	4628      	mov	r0, r5
   2510a:	f7f8 fe2b 	bl	1dd64 <net_buf_unref>
   2510e:	e7cc      	b.n	250aa <att_exec_write_req+0x10>
		return 0;
   25110:	4604      	mov	r4, r0
   25112:	e7dd      	b.n	250d0 <att_exec_write_req+0x36>
		return BT_ATT_ERR_UNLIKELY;
   25114:	240e      	movs	r4, #14
   25116:	e7db      	b.n	250d0 <att_exec_write_req+0x36>

00025118 <att_read_blob_req>:
{
   25118:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   2511a:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   2511c:	8813      	ldrh	r3, [r2, #0]
   2511e:	8852      	ldrh	r2, [r2, #2]
   25120:	9200      	str	r2, [sp, #0]
   25122:	210c      	movs	r1, #12
   25124:	220d      	movs	r2, #13
   25126:	f7e4 fb7f 	bl	9828 <att_read_rsp>
}
   2512a:	b003      	add	sp, #12
   2512c:	f85d fb04 	ldr.w	pc, [sp], #4

00025130 <att_read_req>:
{
   25130:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   25132:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   25134:	2200      	movs	r2, #0
   25136:	881b      	ldrh	r3, [r3, #0]
   25138:	9200      	str	r2, [sp, #0]
   2513a:	210a      	movs	r1, #10
   2513c:	220b      	movs	r2, #11
   2513e:	f7e4 fb73 	bl	9828 <att_read_rsp>
}
   25142:	b003      	add	sp, #12
   25144:	f85d fb04 	ldr.w	pc, [sp], #4

00025148 <att_mtu_req>:
{
   25148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   2514a:	6803      	ldr	r3, [r0, #0]
{
   2514c:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   2514e:	6818      	ldr	r0, [r3, #0]
   25150:	f3bf 8f5b 	dmb	ish
   25154:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   25158:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2515c:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   25160:	071b      	lsls	r3, r3, #28
   25162:	d420      	bmi.n	251a6 <att_mtu_req+0x5e>
	mtu_client = sys_le16_to_cpu(req->mtu);
   25164:	688b      	ldr	r3, [r1, #8]
   25166:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   25168:	2e16      	cmp	r6, #22
   2516a:	d91e      	bls.n	251aa <att_mtu_req+0x62>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   2516c:	2202      	movs	r2, #2
   2516e:	2103      	movs	r1, #3
   25170:	f7e4 f9e8 	bl	9544 <bt_att_create_pdu>
	if (!pdu) {
   25174:	4607      	mov	r7, r0
   25176:	b1d0      	cbz	r0, 251ae <att_mtu_req+0x66>
	return net_buf_simple_add(&buf->b, len);
   25178:	2102      	movs	r1, #2
   2517a:	3008      	adds	r0, #8
   2517c:	f003 f864 	bl	28248 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   25180:	2345      	movs	r3, #69	; 0x45
   25182:	7003      	strb	r3, [r0, #0]
   25184:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   25186:	4639      	mov	r1, r7
   25188:	4620      	mov	r0, r4
   2518a:	f7e3 fee9 	bl	8f60 <bt_att_chan_send_rsp.constprop.0>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2518e:	2e45      	cmp	r6, #69	; 0x45
   25190:	bf28      	it	cs
   25192:	2645      	movcs	r6, #69	; 0x45
	att_chan_mtu_updated(chan);
   25194:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   25196:	f8a4 607a 	strh.w	r6, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2519a:	f8a4 608a 	strh.w	r6, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   2519e:	f7ff fd07 	bl	24bb0 <att_chan_mtu_updated>
	return 0;
   251a2:	4628      	mov	r0, r5
}
   251a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   251a6:	2006      	movs	r0, #6
   251a8:	e7fc      	b.n	251a4 <att_mtu_req+0x5c>
		return BT_ATT_ERR_INVALID_PDU;
   251aa:	2004      	movs	r0, #4
   251ac:	e7fa      	b.n	251a4 <att_mtu_req+0x5c>
		return BT_ATT_ERR_UNLIKELY;
   251ae:	200e      	movs	r0, #14
   251b0:	e7f8      	b.n	251a4 <att_mtu_req+0x5c>

000251b2 <bt_att_init>:
	bt_gatt_init();
   251b2:	f7e5 ba05 	b.w	a5c0 <bt_gatt_init>

000251b6 <bt_att_get_mtu>:
{
   251b6:	b508      	push	{r3, lr}
	att = att_get(conn);
   251b8:	f7e3 fd66 	bl	8c88 <att_get>
	if (!att) {
   251bc:	b1d8      	cbz	r0, 251f6 <bt_att_get_mtu+0x40>
	return list->head;
   251be:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   251c0:	b1c8      	cbz	r0, 251f6 <bt_att_get_mtu+0x40>
   251c2:	f5b0 71a2 	subs.w	r1, r0, #324	; 0x144
   251c6:	d015      	beq.n	251f4 <bt_att_get_mtu+0x3e>
	return node->next;
   251c8:	6803      	ldr	r3, [r0, #0]
   251ca:	b10b      	cbz	r3, 251d0 <bt_att_get_mtu+0x1a>
   251cc:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   251d0:	2000      	movs	r0, #0
		if (chan->chan.tx.mtu > mtu) {
   251d2:	f8b1 208a 	ldrh.w	r2, [r1, #138]	; 0x8a
   251d6:	4290      	cmp	r0, r2
   251d8:	bf38      	it	cc
   251da:	4610      	movcc	r0, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   251dc:	b15b      	cbz	r3, 251f6 <bt_att_get_mtu+0x40>
Z_GENLIST_PEEK_NEXT(slist, snode)
   251de:	f513 72a2 	adds.w	r2, r3, #324	; 0x144
   251e2:	d004      	beq.n	251ee <bt_att_get_mtu+0x38>
	return node->next;
   251e4:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
   251e8:	b10a      	cbz	r2, 251ee <bt_att_get_mtu+0x38>
   251ea:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
{
   251ee:	4619      	mov	r1, r3
   251f0:	4613      	mov	r3, r2
   251f2:	e7ee      	b.n	251d2 <bt_att_get_mtu+0x1c>
		return 0;
   251f4:	4608      	mov	r0, r1
}
   251f6:	bd08      	pop	{r3, pc}

000251f8 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   251f8:	898a      	ldrh	r2, [r1, #12]
   251fa:	6889      	ldr	r1, [r1, #8]
   251fc:	2300      	movs	r3, #0
   251fe:	f7e4 bc85 	b.w	9b0c <att_handle_rsp>

00025202 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   25202:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   25206:	4607      	mov	r7, r0
   25208:	460d      	mov	r5, r1
   2520a:	4616      	mov	r6, r2
   2520c:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   2520e:	f7e3 fd3b 	bl	8c88 <att_get>
	if (!att) {
   25212:	4604      	mov	r4, r0
   25214:	b938      	cbnz	r0, 25226 <bt_att_send+0x24>
		net_buf_unref(buf);
   25216:	4628      	mov	r0, r5
   25218:	f7f8 fda4 	bl	1dd64 <net_buf_unref>
		return -ENOTCONN;
   2521c:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   25220:	b002      	add	sp, #8
   25222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   25226:	b146      	cbz	r6, 2523a <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   25228:	f8cd 8000 	str.w	r8, [sp]
   2522c:	4633      	mov	r3, r6
   2522e:	462a      	mov	r2, r5
   25230:	2104      	movs	r1, #4
   25232:	4638      	mov	r0, r7
   25234:	f7ff fbd6 	bl	249e4 <bt_l2cap_send_cb>
   25238:	e7f2      	b.n	25220 <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
   2523a:	f100 060c 	add.w	r6, r0, #12
   2523e:	4629      	mov	r1, r5
   25240:	4630      	mov	r0, r6
   25242:	f002 ffc2 	bl	281ca <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   25246:	2200      	movs	r2, #0
   25248:	2300      	movs	r3, #0
   2524a:	4630      	mov	r0, r6
   2524c:	f002 ff43 	bl	280d6 <net_buf_get>
	if (!buf) {
   25250:	4605      	mov	r5, r0
   25252:	b908      	cbnz	r0, 25258 <bt_att_send+0x56>
	return 0;
   25254:	2000      	movs	r0, #0
   25256:	e7e3      	b.n	25220 <bt_att_send+0x1e>
	return list->head;
   25258:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2525a:	b1c3      	cbz	r3, 2528e <bt_att_send+0x8c>
   2525c:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   25260:	d015      	beq.n	2528e <bt_att_send+0x8c>
	return node->next;
   25262:	681c      	ldr	r4, [r3, #0]
   25264:	b10c      	cbz	r4, 2526a <bt_att_send+0x68>
   25266:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
	return chan_send(chan, buf, cb);
   2526a:	2200      	movs	r2, #0
   2526c:	4629      	mov	r1, r5
   2526e:	f7e3 fe09 	bl	8e84 <chan_send>
		if (err >= 0) {
   25272:	2800      	cmp	r0, #0
   25274:	daee      	bge.n	25254 <bt_att_send+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25276:	b154      	cbz	r4, 2528e <bt_att_send+0x8c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25278:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   2527c:	d004      	beq.n	25288 <bt_att_send+0x86>
	return node->next;
   2527e:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   25282:	b10b      	cbz	r3, 25288 <bt_att_send+0x86>
   25284:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   25288:	4620      	mov	r0, r4
   2528a:	461c      	mov	r4, r3
   2528c:	e7ed      	b.n	2526a <bt_att_send+0x68>
		k_queue_prepend(&att->tx_queue._queue, buf);
   2528e:	4629      	mov	r1, r5
   25290:	4630      	mov	r0, r6
   25292:	f003 fc9a 	bl	28bca <k_queue_prepend>
   25296:	e7dd      	b.n	25254 <bt_att_send+0x52>

00025298 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   25298:	b510      	push	{r4, lr}
   2529a:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   2529c:	f7e3 fcf4 	bl	8c88 <att_get>
	if (!att) {
   252a0:	b160      	cbz	r0, 252bc <bt_att_req_send+0x24>
	parent->next = child;
   252a2:	2300      	movs	r3, #0
   252a4:	6023      	str	r3, [r4, #0]
	return list->tail;
   252a6:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   252a8:	b92b      	cbnz	r3, 252b6 <bt_att_req_send+0x1e>
	list->head = node;
   252aa:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   252ae:	f7ff fe5c 	bl	24f6a <att_req_send_process>

	return 0;
   252b2:	2000      	movs	r0, #0
}
   252b4:	bd10      	pop	{r4, pc}
	parent->next = child;
   252b6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   252b8:	6084      	str	r4, [r0, #8]
}
   252ba:	e7f8      	b.n	252ae <bt_att_req_send+0x16>
		return -ENOTCONN;
   252bc:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   252c0:	e7f8      	b.n	252b4 <bt_att_req_send+0x1c>

000252c2 <found_attr>:
	*found = attr;
   252c2:	6010      	str	r0, [r2, #0]
}
   252c4:	2000      	movs	r0, #0
   252c6:	4770      	bx	lr

000252c8 <gatt_ccc_changed>:
{
   252c8:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   252ca:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   252cc:	895a      	ldrh	r2, [r3, #10]
   252ce:	428a      	cmp	r2, r1
   252d0:	d003      	beq.n	252da <gatt_ccc_changed+0x12>
		ccc->value = value;
   252d2:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   252d4:	68db      	ldr	r3, [r3, #12]
   252d6:	b103      	cbz	r3, 252da <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   252d8:	4718      	bx	r3
}
   252da:	4770      	bx	lr

000252dc <gatt_indicate_rsp>:
{
   252dc:	b510      	push	{r4, lr}
   252de:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   252e0:	68a3      	ldr	r3, [r4, #8]
{
   252e2:	460a      	mov	r2, r1
	if (params->func) {
   252e4:	b10b      	cbz	r3, 252ea <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   252e6:	4621      	mov	r1, r4
   252e8:	4798      	blx	r3
	params->_ref--;
   252ea:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   252ec:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   252ee:	3b01      	subs	r3, #1
   252f0:	b2db      	uxtb	r3, r3
   252f2:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   252f4:	b122      	cbz	r2, 25300 <gatt_indicate_rsp+0x24>
   252f6:	b91b      	cbnz	r3, 25300 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   252f8:	4620      	mov	r0, r4
}
   252fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   252fe:	4710      	bx	r2
}
   25300:	bd10      	pop	{r4, pc}

00025302 <match_uuid>:
	data->attr = attr;
   25302:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   25304:	8091      	strh	r1, [r2, #4]
}
   25306:	2000      	movs	r0, #0
   25308:	4770      	bx	lr

0002530a <ccc_set_cb>:
}
   2530a:	2000      	movs	r0, #0
   2530c:	4770      	bx	lr

0002530e <atomic_get>:
   2530e:	f3bf 8f5b 	dmb	ish
   25312:	6800      	ldr	r0, [r0, #0]
   25314:	f3bf 8f5b 	dmb	ish
}
   25318:	4770      	bx	lr

0002531a <gen_hash_m>:
{
   2531a:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2531c:	6807      	ldr	r7, [r0, #0]
   2531e:	783d      	ldrb	r5, [r7, #0]
{
   25320:	b089      	sub	sp, #36	; 0x24
   25322:	4606      	mov	r6, r0
   25324:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   25326:	b10d      	cbz	r5, 2532c <gen_hash_m+0x12>
	switch (u16->val) {
   25328:	2501      	movs	r5, #1
   2532a:	e014      	b.n	25356 <gen_hash_m+0x3c>
   2532c:	887b      	ldrh	r3, [r7, #2]
   2532e:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   25332:	d004      	beq.n	2533e <gen_hash_m+0x24>
   25334:	d812      	bhi.n	2535c <gen_hash_m+0x42>
   25336:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   2533a:	2b03      	cmp	r3, #3
   2533c:	d8f4      	bhi.n	25328 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   2533e:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25342:	2202      	movs	r2, #2
   25344:	f10d 010e 	add.w	r1, sp, #14
   25348:	4620      	mov	r0, r4
   2534a:	f7fe fb37 	bl	239bc <tc_cmac_update>
   2534e:	b9e0      	cbnz	r0, 2538a <gen_hash_m+0x70>
			state->err = -EINVAL;
   25350:	f06f 0315 	mvn.w	r3, #21
   25354:	65a3      	str	r3, [r4, #88]	; 0x58
}
   25356:	4628      	mov	r0, r5
   25358:	b009      	add	sp, #36	; 0x24
   2535a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   2535c:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   25360:	33ff      	adds	r3, #255	; 0xff
   25362:	b29b      	uxth	r3, r3
   25364:	2b04      	cmp	r3, #4
   25366:	d8df      	bhi.n	25328 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   25368:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2536c:	2202      	movs	r2, #2
   2536e:	f10d 010e 	add.w	r1, sp, #14
   25372:	4620      	mov	r0, r4
   25374:	f7fe fb22 	bl	239bc <tc_cmac_update>
   25378:	2800      	cmp	r0, #0
   2537a:	d0e9      	beq.n	25350 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   2537c:	887b      	ldrh	r3, [r7, #2]
   2537e:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25382:	2202      	movs	r2, #2
   25384:	f10d 010e 	add.w	r1, sp, #14
   25388:	e017      	b.n	253ba <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   2538a:	887b      	ldrh	r3, [r7, #2]
   2538c:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25390:	2202      	movs	r2, #2
   25392:	f10d 010e 	add.w	r1, sp, #14
   25396:	4620      	mov	r0, r4
   25398:	f7fe fb10 	bl	239bc <tc_cmac_update>
   2539c:	2800      	cmp	r0, #0
   2539e:	d0d7      	beq.n	25350 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   253a0:	2000      	movs	r0, #0
   253a2:	2310      	movs	r3, #16
   253a4:	eb0d 0203 	add.w	r2, sp, r3
   253a8:	6877      	ldr	r7, [r6, #4]
   253aa:	9000      	str	r0, [sp, #0]
   253ac:	4631      	mov	r1, r6
   253ae:	47b8      	blx	r7
		if (len < 0) {
   253b0:	1e02      	subs	r2, r0, #0
   253b2:	da01      	bge.n	253b8 <gen_hash_m+0x9e>
			state->err = len;
   253b4:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   253b6:	e7ce      	b.n	25356 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   253b8:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   253ba:	4620      	mov	r0, r4
   253bc:	f7fe fafe 	bl	239bc <tc_cmac_update>
   253c0:	2800      	cmp	r0, #0
   253c2:	d1b1      	bne.n	25328 <gen_hash_m+0xe>
   253c4:	e7c4      	b.n	25350 <gen_hash_m+0x36>

000253c6 <atomic_or>:
{
   253c6:	4603      	mov	r3, r0
}
   253c8:	f3bf 8f5b 	dmb	ish
   253cc:	e853 0f00 	ldrex	r0, [r3]
   253d0:	ea40 0201 	orr.w	r2, r0, r1
   253d4:	e843 2c00 	strex	ip, r2, [r3]
   253d8:	f1bc 0f00 	cmp.w	ip, #0
   253dc:	d1f6      	bne.n	253cc <atomic_or+0x6>
   253de:	f3bf 8f5b 	dmb	ish
   253e2:	4770      	bx	lr

000253e4 <bt_addr_le_cmp>:
   253e4:	2207      	movs	r2, #7
   253e6:	f7fe bcce 	b.w	23d86 <memcmp>

000253ea <sc_restore_rsp>:
{
   253ea:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   253ec:	f7e4 fc90 	bl	9d10 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   253f0:	b140      	cbz	r0, 25404 <sc_restore_rsp+0x1a>
   253f2:	7a03      	ldrb	r3, [r0, #8]
   253f4:	07db      	lsls	r3, r3, #31
   253f6:	d505      	bpl.n	25404 <sc_restore_rsp+0x1a>
}
   253f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   253fc:	2101      	movs	r1, #1
   253fe:	300c      	adds	r0, #12
   25400:	f7ff bfe1 	b.w	253c6 <atomic_or>
   25404:	bd08      	pop	{r3, pc}

00025406 <find_ccc_cfg>:
{
   25406:	b513      	push	{r0, r1, r4, lr}
						    &cfg->peer)) {
   25408:	1c4a      	adds	r2, r1, #1
{
   2540a:	460c      	mov	r4, r1
		if (conn) {
   2540c:	b140      	cbz	r0, 25420 <find_ccc_cfg+0x1a>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   2540e:	7809      	ldrb	r1, [r1, #0]
   25410:	f7ff fa4d 	bl	248ae <bt_conn_is_peer_addr_le>
	return NULL;
   25414:	2800      	cmp	r0, #0
   25416:	bf08      	it	eq
   25418:	2400      	moveq	r4, #0
}
   2541a:	4620      	mov	r0, r4
   2541c:	b002      	add	sp, #8
   2541e:	bd10      	pop	{r4, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   25420:	9000      	str	r0, [sp, #0]
   25422:	4669      	mov	r1, sp
   25424:	f8cd 0003 	str.w	r0, [sp, #3]
   25428:	4610      	mov	r0, r2
   2542a:	f7ff ffdb 	bl	253e4 <bt_addr_le_cmp>
	return NULL;
   2542e:	2800      	cmp	r0, #0
   25430:	bf18      	it	ne
   25432:	2400      	movne	r4, #0
   25434:	e7f1      	b.n	2541a <find_ccc_cfg+0x14>

00025436 <ccc_find_cfg>:
{
   25436:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   25438:	7803      	ldrb	r3, [r0, #0]
   2543a:	4293      	cmp	r3, r2
{
   2543c:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   2543e:	d001      	beq.n	25444 <ccc_find_cfg+0xe>
	return NULL;
   25440:	2000      	movs	r0, #0
}
   25442:	bd10      	pop	{r4, pc}
		    !bt_addr_le_cmp(&ccc->cfg[i].peer, addr)) {
   25444:	3001      	adds	r0, #1
   25446:	f7ff ffcd 	bl	253e4 <bt_addr_le_cmp>
		if (id == ccc->cfg[i].id &&
   2544a:	2800      	cmp	r0, #0
   2544c:	d1f8      	bne.n	25440 <ccc_find_cfg+0xa>
			return &ccc->cfg[i];
   2544e:	4620      	mov	r0, r4
   25450:	e7f7      	b.n	25442 <ccc_find_cfg+0xc>

00025452 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   25452:	2207      	movs	r2, #7
   25454:	f7fe bca8 	b.w	23da8 <memcpy>

00025458 <clear_ccc_cfg>:
{
   25458:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2545a:	2500      	movs	r5, #0
{
   2545c:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2545e:	4669      	mov	r1, sp
   25460:	3001      	adds	r0, #1
   25462:	9500      	str	r5, [sp, #0]
   25464:	f8cd 5003 	str.w	r5, [sp, #3]
   25468:	f7ff fff3 	bl	25452 <bt_addr_le_copy>
	cfg->id = 0U;
   2546c:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   2546e:	8125      	strh	r5, [r4, #8]
}
   25470:	b003      	add	sp, #12
   25472:	bd30      	pop	{r4, r5, pc}

00025474 <atomic_and>:
{
   25474:	4603      	mov	r3, r0
}
   25476:	f3bf 8f5b 	dmb	ish
   2547a:	e853 0f00 	ldrex	r0, [r3]
   2547e:	ea00 0201 	and.w	r2, r0, r1
   25482:	e843 2c00 	strex	ip, r2, [r3]
   25486:	f1bc 0f00 	cmp.w	ip, #0
   2548a:	d1f6      	bne.n	2547a <atomic_and+0x6>
   2548c:	f3bf 8f5b 	dmb	ish
   25490:	4770      	bx	lr

00025492 <gatt_foreach_iter>:
{
   25492:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (handle > end_handle) {
   25494:	4299      	cmp	r1, r3
{
   25496:	4604      	mov	r4, r0
   25498:	9e08      	ldr	r6, [sp, #32]
   2549a:	e9dd 0706 	ldrd	r0, r7, [sp, #24]
   2549e:	460d      	mov	r5, r1
	if (handle > end_handle) {
   254a0:	d810      	bhi.n	254c4 <gatt_foreach_iter+0x32>
	if (handle < start_handle) {
   254a2:	4291      	cmp	r1, r2
   254a4:	d201      	bcs.n	254aa <gatt_foreach_iter+0x18>
		return BT_GATT_ITER_CONTINUE;
   254a6:	2001      	movs	r0, #1
}
   254a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   254aa:	b968      	cbnz	r0, 254c8 <gatt_foreach_iter+0x36>
	if (attr_data && attr_data != attr->user_data) {
   254ac:	b997      	cbnz	r7, 254d4 <gatt_foreach_iter+0x42>
	*num_matches -= 1;
   254ae:	8833      	ldrh	r3, [r6, #0]
	result = func(attr, handle, user_data);
   254b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	*num_matches -= 1;
   254b2:	3b01      	subs	r3, #1
   254b4:	8033      	strh	r3, [r6, #0]
	result = func(attr, handle, user_data);
   254b6:	4629      	mov	r1, r5
   254b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   254ba:	4620      	mov	r0, r4
   254bc:	4798      	blx	r3
	if (!*num_matches) {
   254be:	8833      	ldrh	r3, [r6, #0]
   254c0:	2b00      	cmp	r3, #0
   254c2:	d1f1      	bne.n	254a8 <gatt_foreach_iter+0x16>
		return BT_GATT_ITER_STOP;
   254c4:	2000      	movs	r0, #0
   254c6:	e7ef      	b.n	254a8 <gatt_foreach_iter+0x16>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   254c8:	6821      	ldr	r1, [r4, #0]
   254ca:	f7fe feb6 	bl	2423a <bt_uuid_cmp>
   254ce:	2800      	cmp	r0, #0
   254d0:	d0ec      	beq.n	254ac <gatt_foreach_iter+0x1a>
   254d2:	e7e8      	b.n	254a6 <gatt_foreach_iter+0x14>
	if (attr_data && attr_data != attr->user_data) {
   254d4:	68e3      	ldr	r3, [r4, #12]
   254d6:	429f      	cmp	r7, r3
   254d8:	d1e5      	bne.n	254a6 <gatt_foreach_iter+0x14>
   254da:	e7e8      	b.n	254ae <gatt_foreach_iter+0x1c>

000254dc <clear_cf_cfg>:
{
   254dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   254de:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   254e0:	2500      	movs	r5, #0
   254e2:	4669      	mov	r1, sp
   254e4:	3001      	adds	r0, #1
   254e6:	9500      	str	r5, [sp, #0]
   254e8:	f8cd 5003 	str.w	r5, [sp, #3]
   254ec:	f7ff ffb1 	bl	25452 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   254f0:	f104 0008 	add.w	r0, r4, #8
   254f4:	2201      	movs	r2, #1
   254f6:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   254f8:	340c      	adds	r4, #12
   254fa:	f7fe fc60 	bl	23dbe <memset>
   254fe:	f3bf 8f5b 	dmb	ish
   25502:	e854 3f00 	ldrex	r3, [r4]
   25506:	e844 5200 	strex	r2, r5, [r4]
   2550a:	2a00      	cmp	r2, #0
   2550c:	d1f9      	bne.n	25502 <clear_cf_cfg+0x26>
   2550e:	f3bf 8f5b 	dmb	ish
}
   25512:	b003      	add	sp, #12
   25514:	bd30      	pop	{r4, r5, pc}

00025516 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   25516:	2a02      	cmp	r2, #2
{
   25518:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   2551a:	d108      	bne.n	2552e <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   2551c:	2300      	movs	r3, #0
   2551e:	f100 0188 	add.w	r1, r0, #136	; 0x88
   25522:	461a      	mov	r2, r3
   25524:	7a00      	ldrb	r0, [r0, #8]
   25526:	f7e4 fcb3 	bl	9e90 <sc_save>
}
   2552a:	2002      	movs	r0, #2
   2552c:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   2552e:	f7e4 ff17 	bl	a360 <sc_clear>
   25532:	e7fa      	b.n	2552a <sc_ccc_cfg_write+0x14>

00025534 <read_ppcp>:
{
   25534:	b513      	push	{r0, r1, r4, lr}
   25536:	4610      	mov	r0, r2
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   25538:	2218      	movs	r2, #24
{
   2553a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   2553e:	f8ad 2000 	strh.w	r2, [sp]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   25542:	2228      	movs	r2, #40	; 0x28
   25544:	f8ad 2002 	strh.w	r2, [sp, #2]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   25548:	2200      	movs	r2, #0
   2554a:	f8ad 2004 	strh.w	r2, [sp, #4]
	if (offset > value_len) {
   2554e:	2908      	cmp	r1, #8
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   25550:	f04f 022a 	mov.w	r2, #42	; 0x2a
   25554:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   25558:	d80b      	bhi.n	25572 <read_ppcp+0x3e>
	len = MIN(buf_len, value_len - offset);
   2555a:	f1c1 0408 	rsb	r4, r1, #8
   2555e:	429c      	cmp	r4, r3
   25560:	bfa8      	it	ge
   25562:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   25564:	4622      	mov	r2, r4
   25566:	4469      	add	r1, sp
   25568:	f7fe fc1e 	bl	23da8 <memcpy>
}
   2556c:	4620      	mov	r0, r4
   2556e:	b002      	add	sp, #8
   25570:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25572:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   25576:	e7f9      	b.n	2556c <read_ppcp+0x38>

00025578 <read_appearance>:
{
   25578:	b513      	push	{r0, r1, r4, lr}
   2557a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   2557e:	4610      	mov	r0, r2
	if (offset > value_len) {
   25580:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   25582:	f04f 0200 	mov.w	r2, #0
   25586:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   2558a:	d80d      	bhi.n	255a8 <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   2558c:	f1c1 0402 	rsb	r4, r1, #2
   25590:	429c      	cmp	r4, r3
   25592:	bfa8      	it	ge
   25594:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   25596:	f10d 0306 	add.w	r3, sp, #6
   2559a:	4622      	mov	r2, r4
   2559c:	4419      	add	r1, r3
   2559e:	f7fe fc03 	bl	23da8 <memcpy>
}
   255a2:	4620      	mov	r0, r4
   255a4:	b002      	add	sp, #8
   255a6:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   255a8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   255ac:	e7f9      	b.n	255a2 <read_appearance+0x2a>

000255ae <read_name>:
{
   255ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   255b2:	4698      	mov	r8, r3
   255b4:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   255b8:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   255ba:	f7e1 facf 	bl	6b5c <bt_get_name>
   255be:	4607      	mov	r7, r0
				 strlen(name));
   255c0:	f7fe fbb4 	bl	23d2c <strlen>
	if (offset > value_len) {
   255c4:	b283      	uxth	r3, r0
   255c6:	42b3      	cmp	r3, r6
   255c8:	d30c      	bcc.n	255e4 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   255ca:	1b9c      	subs	r4, r3, r6
   255cc:	4544      	cmp	r4, r8
   255ce:	bfa8      	it	ge
   255d0:	4644      	movge	r4, r8
   255d2:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   255d4:	4622      	mov	r2, r4
   255d6:	19b9      	adds	r1, r7, r6
   255d8:	4628      	mov	r0, r5
   255da:	f7fe fbe5 	bl	23da8 <memcpy>
}
   255de:	4620      	mov	r0, r4
   255e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   255e4:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   255e8:	e7f9      	b.n	255de <read_name+0x30>

000255ea <cf_read>:
{
   255ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   255ec:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   255ee:	2300      	movs	r3, #0
{
   255f0:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   255f4:	f88d 3004 	strb.w	r3, [sp, #4]
{
   255f8:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   255fa:	f7e4 fb89 	bl	9d10 <find_cf_cfg>
	if (cfg) {
   255fe:	b128      	cbz	r0, 2560c <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   25600:	f100 0108 	add.w	r1, r0, #8
   25604:	2201      	movs	r2, #1
   25606:	a801      	add	r0, sp, #4
   25608:	f7fe fbce 	bl	23da8 <memcpy>
	if (offset > value_len) {
   2560c:	2e01      	cmp	r6, #1
   2560e:	d80d      	bhi.n	2562c <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   25610:	f1c6 0401 	rsb	r4, r6, #1
   25614:	42bc      	cmp	r4, r7
   25616:	bfa8      	it	ge
   25618:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2561a:	ab01      	add	r3, sp, #4
   2561c:	4622      	mov	r2, r4
   2561e:	1999      	adds	r1, r3, r6
   25620:	4628      	mov	r0, r5
   25622:	f7fe fbc1 	bl	23da8 <memcpy>
}
   25626:	4620      	mov	r0, r4
   25628:	b003      	add	sp, #12
   2562a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2562c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   25630:	e7f9      	b.n	25626 <cf_read+0x3c>

00025632 <bt_gatt_attr_read_service>:
{
   25632:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   25634:	68c9      	ldr	r1, [r1, #12]
{
   25636:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   2563a:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   2563c:	780b      	ldrb	r3, [r1, #0]
{
   2563e:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   25640:	b993      	cbnz	r3, 25668 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   25642:	884b      	ldrh	r3, [r1, #2]
   25644:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   25648:	2d02      	cmp	r5, #2
   2564a:	d819      	bhi.n	25680 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   2564c:	f1c5 0202 	rsb	r2, r5, #2
   25650:	4294      	cmp	r4, r2
   25652:	bfa8      	it	ge
   25654:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   25656:	f10d 0306 	add.w	r3, sp, #6
   2565a:	4622      	mov	r2, r4
   2565c:	1959      	adds	r1, r3, r5
   2565e:	f7fe fba3 	bl	23da8 <memcpy>
}
   25662:	4620      	mov	r0, r4
   25664:	b003      	add	sp, #12
   25666:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   25668:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   2566a:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   2566e:	d807      	bhi.n	25680 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   25670:	f1c5 0210 	rsb	r2, r5, #16
   25674:	4294      	cmp	r4, r2
   25676:	bfa8      	it	ge
   25678:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   2567a:	4622      	mov	r2, r4
   2567c:	4429      	add	r1, r5
   2567e:	e7ee      	b.n	2565e <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25680:	f06f 0406 	mvn.w	r4, #6
   25684:	e7ed      	b.n	25662 <bt_gatt_attr_read_service+0x30>

00025686 <bt_gatt_attr_read_ccc>:
{
   25686:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   25688:	68c9      	ldr	r1, [r1, #12]
{
   2568a:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   2568e:	4615      	mov	r5, r2
   25690:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   25692:	f7ff feb8 	bl	25406 <find_ccc_cfg>
	if (cfg) {
   25696:	b100      	cbz	r0, 2569a <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   25698:	8900      	ldrh	r0, [r0, #8]
   2569a:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   2569e:	2e02      	cmp	r6, #2
   256a0:	d80e      	bhi.n	256c0 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   256a2:	f1c6 0402 	rsb	r4, r6, #2
   256a6:	42bc      	cmp	r4, r7
   256a8:	bfa8      	it	ge
   256aa:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   256ac:	f10d 0306 	add.w	r3, sp, #6
   256b0:	4622      	mov	r2, r4
   256b2:	1999      	adds	r1, r3, r6
   256b4:	4628      	mov	r0, r5
   256b6:	f7fe fb77 	bl	23da8 <memcpy>
}
   256ba:	4620      	mov	r0, r4
   256bc:	b003      	add	sp, #12
   256be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   256c0:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   256c4:	e7f9      	b.n	256ba <bt_gatt_attr_read_ccc+0x34>

000256c6 <bt_gatt_attr_value_handle>:
{
   256c6:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   256c8:	4604      	mov	r4, r0
   256ca:	b910      	cbnz	r0, 256d2 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   256cc:	2000      	movs	r0, #0
}
   256ce:	b002      	add	sp, #8
   256d0:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   256d2:	2300      	movs	r3, #0
   256d4:	f88d 3004 	strb.w	r3, [sp, #4]
   256d8:	6800      	ldr	r0, [r0, #0]
   256da:	f642 0303 	movw	r3, #10243	; 0x2803
   256de:	a901      	add	r1, sp, #4
   256e0:	f8ad 3006 	strh.w	r3, [sp, #6]
   256e4:	f7fe fda9 	bl	2423a <bt_uuid_cmp>
   256e8:	2800      	cmp	r0, #0
   256ea:	d1ef      	bne.n	256cc <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   256ec:	68e3      	ldr	r3, [r4, #12]
   256ee:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   256f0:	2800      	cmp	r0, #0
   256f2:	d1ec      	bne.n	256ce <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   256f4:	4620      	mov	r0, r4
   256f6:	f7e4 ffad 	bl	a654 <bt_gatt_attr_get_handle>
   256fa:	3001      	adds	r0, #1
   256fc:	b280      	uxth	r0, r0
	return handle;
   256fe:	e7e6      	b.n	256ce <bt_gatt_attr_value_handle+0x8>

00025700 <bt_gatt_attr_read_chrc>:
{
   25700:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   25702:	68cf      	ldr	r7, [r1, #12]
{
   25704:	b087      	sub	sp, #28
   25706:	4608      	mov	r0, r1
   25708:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   2570a:	79bb      	ldrb	r3, [r7, #6]
   2570c:	f88d 3004 	strb.w	r3, [sp, #4]
{
   25710:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   25714:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   25716:	f7ff ffd6 	bl	256c6 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2571a:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2571c:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   25720:	780b      	ldrb	r3, [r1, #0]
   25722:	b99b      	cbnz	r3, 2574c <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   25724:	884b      	ldrh	r3, [r1, #2]
   25726:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   2572a:	2105      	movs	r1, #5
	if (offset > value_len) {
   2572c:	42b1      	cmp	r1, r6
   2572e:	d315      	bcc.n	2575c <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   25730:	1b89      	subs	r1, r1, r6
   25732:	42a1      	cmp	r1, r4
   25734:	bfa8      	it	ge
   25736:	4621      	movge	r1, r4
   25738:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   2573a:	ab01      	add	r3, sp, #4
   2573c:	4622      	mov	r2, r4
   2573e:	1999      	adds	r1, r3, r6
   25740:	4628      	mov	r0, r5
   25742:	f7fe fb31 	bl	23da8 <memcpy>
}
   25746:	4620      	mov	r0, r4
   25748:	b007      	add	sp, #28
   2574a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   2574c:	3101      	adds	r1, #1
   2574e:	2210      	movs	r2, #16
   25750:	f10d 0007 	add.w	r0, sp, #7
   25754:	f7fe fb28 	bl	23da8 <memcpy>
		value_len += 16U;
   25758:	2113      	movs	r1, #19
   2575a:	e7e7      	b.n	2572c <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2575c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   25760:	e7f1      	b.n	25746 <bt_gatt_attr_read_chrc+0x46>

00025762 <bt_gatt_foreach_attr>:
{
   25762:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   25764:	e9cd 2301 	strd	r2, r3, [sp, #4]
   25768:	2300      	movs	r3, #0
   2576a:	9300      	str	r3, [sp, #0]
   2576c:	461a      	mov	r2, r3
   2576e:	f7e4 ffa1 	bl	a6b4 <bt_gatt_foreach_attr_type>
}
   25772:	b005      	add	sp, #20
   25774:	f85d fb04 	ldr.w	pc, [sp], #4

00025778 <bt_gatt_get_mtu>:
	return bt_att_get_mtu(conn);
   25778:	f7ff bd1d 	b.w	251b6 <bt_att_get_mtu>

0002577c <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   2577c:	07d3      	lsls	r3, r2, #31
{
   2577e:	b510      	push	{r4, lr}
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   25780:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   25782:	d504      	bpl.n	2578e <bt_gatt_check_perm+0x12>
   25784:	f014 0f15 	tst.w	r4, #21
   25788:	d017      	beq.n	257ba <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2578a:	684b      	ldr	r3, [r1, #4]
   2578c:	b1ab      	cbz	r3, 257ba <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2578e:	0793      	lsls	r3, r2, #30
   25790:	d504      	bpl.n	2579c <bt_gatt_check_perm+0x20>
   25792:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   25796:	d012      	beq.n	257be <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   25798:	688b      	ldr	r3, [r1, #8]
   2579a:	b183      	cbz	r3, 257be <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   2579c:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   2579e:	f014 0f30 	tst.w	r4, #48	; 0x30
   257a2:	d104      	bne.n	257ae <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   257a4:	f014 000c 	ands.w	r0, r4, #12
   257a8:	bf18      	it	ne
   257aa:	200f      	movne	r0, #15
}
   257ac:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   257ae:	f7ff f87c 	bl	248aa <bt_conn_get_security>
   257b2:	2802      	cmp	r0, #2
   257b4:	d8f6      	bhi.n	257a4 <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   257b6:	2005      	movs	r0, #5
   257b8:	e7f8      	b.n	257ac <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   257ba:	2002      	movs	r0, #2
   257bc:	e7f6      	b.n	257ac <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   257be:	2003      	movs	r0, #3
   257c0:	e7f4      	b.n	257ac <bt_gatt_check_perm+0x30>

000257c2 <bt_gatt_change_aware>:
{
   257c2:	b538      	push	{r3, r4, r5, lr}
   257c4:	460d      	mov	r5, r1
	cfg = find_cf_cfg(conn);
   257c6:	f7e4 faa3 	bl	9d10 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   257ca:	b910      	cbnz	r0, 257d2 <bt_gatt_change_aware+0x10>
		return true;
   257cc:	2501      	movs	r5, #1
}
   257ce:	4628      	mov	r0, r5
   257d0:	bd38      	pop	{r3, r4, r5, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   257d2:	7a03      	ldrb	r3, [r0, #8]
   257d4:	07d9      	lsls	r1, r3, #31
   257d6:	d5f9      	bpl.n	257cc <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   257d8:	f100 040c 	add.w	r4, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   257dc:	4620      	mov	r0, r4
   257de:	f7ff fd96 	bl	2530e <atomic_get>
   257e2:	07c2      	lsls	r2, r0, #31
   257e4:	d4f2      	bmi.n	257cc <bt_gatt_change_aware+0xa>
	if (!req) {
   257e6:	2d00      	cmp	r5, #0
   257e8:	d0f1      	beq.n	257ce <bt_gatt_change_aware+0xc>
   257ea:	4620      	mov	r0, r4
   257ec:	f7ff fd8f 	bl	2530e <atomic_get>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   257f0:	0783      	lsls	r3, r0, #30
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   257f2:	f3c0 0540 	ubfx	r5, r0, #1, #1
   257f6:	d509      	bpl.n	2580c <bt_gatt_change_aware+0x4a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   257f8:	f06f 0102 	mvn.w	r1, #2
   257fc:	4620      	mov	r0, r4
   257fe:	f7ff fe39 	bl	25474 <atomic_and>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   25802:	2101      	movs	r1, #1
   25804:	4620      	mov	r0, r4
   25806:	f7ff fdde 	bl	253c6 <atomic_or>
}
   2580a:	e7e0      	b.n	257ce <bt_gatt_change_aware+0xc>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2580c:	2102      	movs	r1, #2
   2580e:	e7f9      	b.n	25804 <bt_gatt_change_aware+0x42>

00025810 <bt_smp_recv>:
{
   25810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   25812:	2100      	movs	r1, #0
   25814:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25818:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	struct bt_conn *conn = chan->conn;
   2581c:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   2581e:	4608      	mov	r0, r1
   25820:	f7ff f8dd 	bl	249de <bt_l2cap_create_pdu_timeout>
   25824:	f100 0608 	add.w	r6, r0, #8
   25828:	4604      	mov	r4, r0
   2582a:	2101      	movs	r1, #1
   2582c:	4630      	mov	r0, r6
   2582e:	f002 fd0b 	bl	28248 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   25832:	2505      	movs	r5, #5
   25834:	7005      	strb	r5, [r0, #0]
   25836:	2101      	movs	r1, #1
   25838:	4630      	mov	r0, r6
   2583a:	f002 fd05 	bl	28248 <net_buf_simple_add>
   2583e:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   25840:	7005      	strb	r5, [r0, #0]
   25842:	4622      	mov	r2, r4
   25844:	9300      	str	r3, [sp, #0]
   25846:	2106      	movs	r1, #6
   25848:	4638      	mov	r0, r7
   2584a:	f7ff f8cb 	bl	249e4 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   2584e:	b110      	cbz	r0, 25856 <bt_smp_recv+0x46>
		net_buf_unref(buf);
   25850:	4620      	mov	r0, r4
   25852:	f7f8 fa87 	bl	1dd64 <net_buf_unref>
}
   25856:	2000      	movs	r0, #0
   25858:	b003      	add	sp, #12
   2585a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002585c <bt_smp_sign>:
   2585c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   25860:	4770      	bx	lr

00025862 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   25862:	2000      	movs	r0, #0
   25864:	4770      	bx	lr

00025866 <model_start>:
	if (mod->cb && mod->cb->start) {
   25866:	6983      	ldr	r3, [r0, #24]
   25868:	b113      	cbz	r3, 25870 <model_start+0xa>
   2586a:	685b      	ldr	r3, [r3, #4]
   2586c:	b103      	cbz	r3, 25870 <model_start+0xa>
		mod->cb->start(mod);
   2586e:	4718      	bx	r3
}
   25870:	4770      	bx	lr

00025872 <bt_mesh_init>:
{
   25872:	b538      	push	{r3, r4, r5, lr}
   25874:	4605      	mov	r5, r0
	err = bt_mesh_comp_register(comp);
   25876:	4608      	mov	r0, r1
   25878:	f7ea fe78 	bl	1056c <bt_mesh_comp_register>
	if (err) {
   2587c:	4604      	mov	r4, r0
   2587e:	b9a0      	cbnz	r0, 258aa <bt_mesh_init+0x38>
		bt_mesh_proxy_init();
   25880:	f7f0 f9b6 	bl	15bf0 <bt_mesh_proxy_init>
		err = bt_mesh_prov_init(prov);
   25884:	4628      	mov	r0, r5
   25886:	f7ee f87b 	bl	13980 <bt_mesh_prov_init>
		if (err) {
   2588a:	4604      	mov	r4, r0
   2588c:	b968      	cbnz	r0, 258aa <bt_mesh_init+0x38>
	bt_mesh_cfg_default_set();
   2588e:	f7e6 f873 	bl	b978 <bt_mesh_cfg_default_set>
	bt_mesh_net_init();
   25892:	f7e7 fb41 	bl	cf18 <bt_mesh_net_init>
	bt_mesh_trans_init();
   25896:	f7e8 fed5 	bl	e644 <bt_mesh_trans_init>
	bt_mesh_hb_init();
   2589a:	f7ea f8a1 	bl	f9e0 <bt_mesh_hb_init>
	bt_mesh_beacon_init();
   2589e:	f7e6 fbb1 	bl	c004 <bt_mesh_beacon_init>
	bt_mesh_adv_init();
   258a2:	f7ed fd47 	bl	13334 <bt_mesh_adv_init>
		bt_mesh_settings_init();
   258a6:	f7ed fe69 	bl	1357c <bt_mesh_settings_init>
}
   258aa:	4620      	mov	r0, r4
   258ac:	bd38      	pop	{r3, r4, r5, pc}

000258ae <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   258ae:	f3bf 8f5b 	dmb	ish
   258b2:	6800      	ldr	r0, [r0, #0]
   258b4:	f3bf 8f5b 	dmb	ish
}
   258b8:	4770      	bx	lr

000258ba <bt_mesh_friend_set>:
}
   258ba:	f06f 0085 	mvn.w	r0, #133	; 0x85
   258be:	4770      	bx	lr

000258c0 <bt_mesh_friend_get>:
}
   258c0:	2002      	movs	r0, #2
   258c2:	4770      	bx	lr

000258c4 <bt_mesh_fixed_group_match>:
{
   258c4:	b508      	push	{r3, lr}
	switch (addr) {
   258c6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   258ca:	4298      	cmp	r0, r3
   258cc:	d00d      	beq.n	258ea <bt_mesh_fixed_group_match+0x26>
   258ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
   258d2:	4298      	cmp	r0, r3
   258d4:	d00c      	beq.n	258f0 <bt_mesh_fixed_group_match+0x2c>
   258d6:	f64f 73fc 	movw	r3, #65532	; 0xfffc
   258da:	4298      	cmp	r0, r3
   258dc:	d10a      	bne.n	258f4 <bt_mesh_fixed_group_match+0x30>
		return (bt_mesh_gatt_proxy_get() == BT_MESH_FEATURE_ENABLED);
   258de:	f7e5 ff89 	bl	b7f4 <bt_mesh_gatt_proxy_get>
		return (bt_mesh_relay_get() == BT_MESH_FEATURE_ENABLED);
   258e2:	1e43      	subs	r3, r0, #1
   258e4:	4258      	negs	r0, r3
   258e6:	4158      	adcs	r0, r3
}
   258e8:	bd08      	pop	{r3, pc}
		return (bt_mesh_relay_get() == BT_MESH_FEATURE_ENABLED);
   258ea:	f7e6 f835 	bl	b958 <bt_mesh_relay_get>
   258ee:	e7f8      	b.n	258e2 <bt_mesh_fixed_group_match+0x1e>
		return true;
   258f0:	2001      	movs	r0, #1
   258f2:	e7f9      	b.n	258e8 <bt_mesh_fixed_group_match+0x24>
	switch (addr) {
   258f4:	2000      	movs	r0, #0
   258f6:	e7f7      	b.n	258e8 <bt_mesh_fixed_group_match+0x24>

000258f8 <adv_buf_destroy>:
{
   258f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_mesh_adv adv = *BT_MESH_ADV(buf);
   258fa:	6943      	ldr	r3, [r0, #20]
{
   258fc:	4604      	mov	r4, r0
	struct bt_mesh_adv adv = *BT_MESH_ADV(buf);
   258fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   25902:	ab04      	add	r3, sp, #16
   25904:	e903 0007 	stmdb	r3, {r0, r1, r2}
   25908:	4605      	mov	r5, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2590a:	79a0      	ldrb	r0, [r4, #6]
   2590c:	460e      	mov	r6, r1
   2590e:	f7f8 f96b 	bl	1dbe8 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   25912:	4621      	mov	r1, r4
   25914:	f003 f959 	bl	28bca <k_queue_prepend>
}

static inline void bt_mesh_adv_send_end(
	int err, struct bt_mesh_adv const *adv)
{
	if (adv->started && adv->cb && adv->cb->end) {
   25918:	f89d 300c 	ldrb.w	r3, [sp, #12]
   2591c:	075b      	lsls	r3, r3, #29
   2591e:	d508      	bpl.n	25932 <adv_buf_destroy+0x3a>
   25920:	b13d      	cbz	r5, 25932 <adv_buf_destroy+0x3a>
   25922:	686b      	ldr	r3, [r5, #4]
   25924:	b12b      	cbz	r3, 25932 <adv_buf_destroy+0x3a>
		adv->cb->end(err, adv->cb_data);
   25926:	4631      	mov	r1, r6
   25928:	2000      	movs	r0, #0
}
   2592a:	b004      	add	sp, #16
   2592c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   25930:	4718      	bx	r3
   25932:	b004      	add	sp, #16
   25934:	bd70      	pop	{r4, r5, r6, pc}

00025936 <sub_update_beacon_observation>:
	sub->beacons_last = sub->beacons_cur;
   25936:	7943      	ldrb	r3, [r0, #5]
   25938:	7103      	strb	r3, [r0, #4]
	sub->beacons_cur = 0U;
   2593a:	2300      	movs	r3, #0
   2593c:	7143      	strb	r3, [r0, #5]
}
   2593e:	4770      	bx	lr

00025940 <cache_check>:
{
   25940:	b508      	push	{r3, lr}
	return !memcmp(sub->beacon_cache, beacon_data, 21);
   25942:	2215      	movs	r2, #21
   25944:	3006      	adds	r0, #6
   25946:	f7fe fa1e 	bl	23d86 <memcmp>
}
   2594a:	fab0 f080 	clz	r0, r0
   2594e:	0940      	lsrs	r0, r0, #5
   25950:	bd08      	pop	{r3, pc}

00025952 <beacon_complete>:
{
   25952:	b510      	push	{r4, lr}
   25954:	460c      	mov	r4, r1
	return z_impl_k_uptime_ticks();
   25956:	f003 fbed 	bl	29134 <z_impl_k_uptime_ticks>
   2595a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2595e:	fba0 0302 	umull	r0, r3, r0, r2
   25962:	fb02 3301 	mla	r3, r2, r1, r3
   25966:	0bc0      	lsrs	r0, r0, #15
   25968:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return (uint32_t)k_uptime_get();
   2596c:	6020      	str	r0, [r4, #0]
}
   2596e:	bd10      	pop	{r4, pc}

00025970 <subnet_evt>:
	if (evt != BT_MESH_KEY_DELETED) {
   25970:	2901      	cmp	r1, #1
   25972:	d001      	beq.n	25978 <subnet_evt+0x8>
		bt_mesh_beacon_update(sub);
   25974:	f7e6 bb14 	b.w	bfa0 <bt_mesh_beacon_update>
}
   25978:	4770      	bx	lr

0002597a <subnet_beacon_enable>:
	sub->beacons_last = 0U;
   2597a:	2200      	movs	r2, #0
   2597c:	8082      	strh	r2, [r0, #4]
	bt_mesh_beacon_update(sub);
   2597e:	f7e6 bb0f 	b.w	bfa0 <bt_mesh_beacon_update>

00025982 <sys_get_be24>:
	return ((uint32_t)src[0] << 16) | sys_get_be16(&src[1]);
   25982:	f8b0 3001 	ldrh.w	r3, [r0, #1]
   25986:	7802      	ldrb	r2, [r0, #0]
   25988:	ba5b      	rev16	r3, r3
   2598a:	b29b      	uxth	r3, r3
}
   2598c:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
   25990:	4770      	bx	lr

00025992 <net_encrypt>:
{
   25992:	b570      	push	{r4, r5, r6, lr}
   25994:	460d      	mov	r5, r1
   25996:	4604      	mov	r4, r0
	err = bt_mesh_net_encrypt(cred->enc, buf, iv_index, proxy);
   25998:	4601      	mov	r1, r0
   2599a:	1c68      	adds	r0, r5, #1
{
   2599c:	4616      	mov	r6, r2
	err = bt_mesh_net_encrypt(cred->enc, buf, iv_index, proxy);
   2599e:	f000 fbc8 	bl	26132 <bt_mesh_net_encrypt>
	if (err) {
   259a2:	b938      	cbnz	r0, 259b4 <net_encrypt+0x22>
	return bt_mesh_net_obfuscate(buf->data, iv_index, cred->privacy);
   259a4:	6820      	ldr	r0, [r4, #0]
   259a6:	f105 0211 	add.w	r2, r5, #17
   259aa:	4631      	mov	r1, r6
}
   259ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_mesh_net_obfuscate(buf->data, iv_index, cred->privacy);
   259b0:	f7ea b956 	b.w	fc60 <bt_mesh_net_obfuscate>
}
   259b4:	bd70      	pop	{r4, r5, r6, pc}

000259b6 <bt_mesh_net_clear>:
{
   259b6:	b508      	push	{r3, lr}
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_NET_PENDING);
   259b8:	2003      	movs	r0, #3
   259ba:	f7ed fd67 	bl	1348c <bt_mesh_settings_store_schedule>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_IV_PENDING);
   259be:	2004      	movs	r0, #4
   259c0:	f7ed fd64 	bl	1348c <bt_mesh_settings_store_schedule>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
   259c4:	2007      	movs	r0, #7
   259c6:	f7ed fd61 	bl	1348c <bt_mesh_settings_store_schedule>
}
   259ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_SEQ_PENDING);
   259ce:	2005      	movs	r0, #5
   259d0:	f7ed bd5c 	b.w	1348c <bt_mesh_settings_store_schedule>

000259d4 <bt_mesh_subnet_store>:
	update_subnet_settings(net_idx, true);
   259d4:	2101      	movs	r1, #1
   259d6:	f7e7 bcd5 	b.w	d384 <update_subnet_settings>

000259da <key_refresh>:
{
   259da:	b538      	push	{r3, r4, r5, lr}
   259dc:	4604      	mov	r4, r0
	switch (new_phase) {
   259de:	2903      	cmp	r1, #3
   259e0:	d809      	bhi.n	259f6 <key_refresh+0x1c>
   259e2:	e8df f001 	tbb	[pc, r1]
   259e6:	0213      	.short	0x0213
   259e8:	110d      	.short	0x110d
		sub->kr_phase = new_phase;
   259ea:	2301      	movs	r3, #1
   259ec:	7783      	strb	r3, [r0, #30]
		subnet_evt(sub, BT_MESH_KEY_UPDATED);
   259ee:	2102      	movs	r1, #2
		subnet_evt(sub, BT_MESH_KEY_REVOKED);
   259f0:	4620      	mov	r0, r4
   259f2:	f7e7 fb7b 	bl	d0ec <subnet_evt>
		bt_mesh_subnet_store(sub->net_idx);
   259f6:	8ba0      	ldrh	r0, [r4, #28]
}
   259f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_mesh_subnet_store(sub->net_idx);
   259fc:	f7ff bfea 	b.w	259d4 <bt_mesh_subnet_store>
		sub->kr_phase = new_phase;
   25a00:	2302      	movs	r3, #2
   25a02:	7783      	strb	r3, [r0, #30]
		subnet_evt(sub, BT_MESH_KEY_SWAPPED);
   25a04:	2103      	movs	r1, #3
   25a06:	e7f3      	b.n	259f0 <key_refresh+0x16>
		if (sub->kr_phase == BT_MESH_KR_NORMAL) {
   25a08:	7f83      	ldrb	r3, [r0, #30]
   25a0a:	b163      	cbz	r3, 25a26 <key_refresh+0x4c>
		sub->kr_phase = BT_MESH_KR_NORMAL;
   25a0c:	2500      	movs	r5, #0
		memcpy(&sub->keys[0], &sub->keys[1], sizeof(sub->keys[0]));
   25a0e:	f104 0186 	add.w	r1, r4, #134	; 0x86
		sub->kr_phase = BT_MESH_KR_NORMAL;
   25a12:	77a5      	strb	r5, [r4, #30]
		memcpy(&sub->keys[0], &sub->keys[1], sizeof(sub->keys[0]));
   25a14:	225a      	movs	r2, #90	; 0x5a
   25a16:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   25a1a:	f7fe f9c5 	bl	23da8 <memcpy>
		sub->keys[1].valid = 0U;
   25a1e:	f884 5086 	strb.w	r5, [r4, #134]	; 0x86
		subnet_evt(sub, BT_MESH_KEY_REVOKED);
   25a22:	2104      	movs	r1, #4
   25a24:	e7e4      	b.n	259f0 <key_refresh+0x16>
}
   25a26:	bd38      	pop	{r3, r4, r5, pc}

00025a28 <bt_mesh_kr_update>:
	if (!new_key) {
   25a28:	b16a      	cbz	r2, 25a46 <bt_mesh_kr_update+0x1e>
	if (sub->kr_phase == BT_MESH_KR_PHASE_1) {
   25a2a:	7f83      	ldrb	r3, [r0, #30]
   25a2c:	2b01      	cmp	r3, #1
   25a2e:	d105      	bne.n	25a3c <bt_mesh_kr_update+0x14>
		key_refresh(sub, (kr_flag ? BT_MESH_KR_PHASE_2 :
   25a30:	2900      	cmp	r1, #0
   25a32:	bf14      	ite	ne
   25a34:	2102      	movne	r1, #2
   25a36:	2103      	moveq	r1, #3
		key_refresh(sub, BT_MESH_KR_PHASE_3);
   25a38:	f7ff bfcf 	b.w	259da <key_refresh>
	} else if (sub->kr_phase == BT_MESH_KR_PHASE_2 && !kr_flag) {
   25a3c:	2b02      	cmp	r3, #2
   25a3e:	d102      	bne.n	25a46 <bt_mesh_kr_update+0x1e>
   25a40:	b909      	cbnz	r1, 25a46 <bt_mesh_kr_update+0x1e>
		key_refresh(sub, BT_MESH_KR_PHASE_3);
   25a42:	2103      	movs	r1, #3
   25a44:	e7f8      	b.n	25a38 <bt_mesh_kr_update+0x10>
}
   25a46:	4770      	bx	lr

00025a48 <bt_mesh_subnet_add>:
{
   25a48:	b570      	push	{r4, r5, r6, lr}
   25a4a:	4606      	mov	r6, r0
   25a4c:	460c      	mov	r4, r1
	sub = subnet_alloc(net_idx);
   25a4e:	f7e7 fb5f 	bl	d110 <subnet_alloc>
	if (!sub) {
   25a52:	4605      	mov	r5, r0
   25a54:	b1f0      	cbz	r0, 25a94 <bt_mesh_subnet_add+0x4c>
	if (sub->net_idx == net_idx) {
   25a56:	8b83      	ldrh	r3, [r0, #28]
   25a58:	42b3      	cmp	r3, r6
   25a5a:	d10a      	bne.n	25a72 <bt_mesh_subnet_add+0x2a>
		if (memcmp(key, sub->keys[0].net, 16)) {
   25a5c:	f100 012d 	add.w	r1, r0, #45	; 0x2d
   25a60:	2210      	movs	r2, #16
   25a62:	4620      	mov	r0, r4
   25a64:	f7fe f98f 	bl	23d86 <memcmp>
		return STATUS_SUCCESS;
   25a68:	2800      	cmp	r0, #0
   25a6a:	bf14      	ite	ne
   25a6c:	2006      	movne	r0, #6
   25a6e:	2000      	moveq	r0, #0
}
   25a70:	bd70      	pop	{r4, r5, r6, pc}
	err = net_keys_create(&sub->keys[0], key);
   25a72:	4621      	mov	r1, r4
   25a74:	302c      	adds	r0, #44	; 0x2c
   25a76:	f7e7 fb8d 	bl	d194 <net_keys_create>
	if (err) {
   25a7a:	4604      	mov	r4, r0
   25a7c:	b960      	cbnz	r0, 25a98 <bt_mesh_subnet_add+0x50>
	subnet_evt(sub, BT_MESH_KEY_ADDED);
   25a7e:	4601      	mov	r1, r0
	sub->kr_phase = BT_MESH_KR_NORMAL;
   25a80:	83e8      	strh	r0, [r5, #30]
	sub->net_idx = net_idx;
   25a82:	83ae      	strh	r6, [r5, #28]
	subnet_evt(sub, BT_MESH_KEY_ADDED);
   25a84:	4628      	mov	r0, r5
   25a86:	f7e7 fb31 	bl	d0ec <subnet_evt>
		bt_mesh_subnet_store(sub->net_idx);
   25a8a:	8ba8      	ldrh	r0, [r5, #28]
   25a8c:	f7ff ffa2 	bl	259d4 <bt_mesh_subnet_store>
	return STATUS_SUCCESS;
   25a90:	4620      	mov	r0, r4
   25a92:	e7ed      	b.n	25a70 <bt_mesh_subnet_add+0x28>
		return STATUS_INSUFF_RESOURCES;
   25a94:	2005      	movs	r0, #5
   25a96:	e7eb      	b.n	25a70 <bt_mesh_subnet_add+0x28>
		return STATUS_UNSPECIFIED;
   25a98:	2010      	movs	r0, #16
   25a9a:	e7e9      	b.n	25a70 <bt_mesh_subnet_add+0x28>

00025a9c <subnet_del>:
{
   25a9c:	b510      	push	{r4, lr}
   25a9e:	4604      	mov	r4, r0
		update_subnet_settings(sub->net_idx, false);
   25aa0:	2100      	movs	r1, #0
   25aa2:	8b80      	ldrh	r0, [r0, #28]
   25aa4:	f7e7 fc6e 	bl	d384 <update_subnet_settings>
	bt_mesh_net_loopback_clear(sub->net_idx);
   25aa8:	8ba0      	ldrh	r0, [r4, #28]
   25aaa:	f7e7 f81b 	bl	cae4 <bt_mesh_net_loopback_clear>
	subnet_evt(sub, BT_MESH_KEY_DELETED);
   25aae:	2101      	movs	r1, #1
   25ab0:	4620      	mov	r0, r4
   25ab2:	f7e7 fb1b 	bl	d0ec <subnet_evt>
	(void)memset(sub, 0, sizeof(*sub));
   25ab6:	22e0      	movs	r2, #224	; 0xe0
   25ab8:	2100      	movs	r1, #0
   25aba:	4620      	mov	r0, r4
   25abc:	f7fe f97f 	bl	23dbe <memset>
	sub->net_idx = BT_MESH_KEY_UNUSED;
   25ac0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   25ac4:	83a3      	strh	r3, [r4, #28]
}
   25ac6:	bd10      	pop	{r4, pc}

00025ac8 <bt_mesh_subnet_exists>:
{
   25ac8:	b508      	push	{r3, lr}
	return !!bt_mesh_subnet_get(net_idx);
   25aca:	f7e7 fc05 	bl	d2d8 <bt_mesh_subnet_get>
}
   25ace:	3800      	subs	r0, #0
   25ad0:	bf18      	it	ne
   25ad2:	2001      	movne	r0, #1
   25ad4:	bd08      	pop	{r3, pc}

00025ad6 <bt_mesh_subnet_update>:
{
   25ad6:	b538      	push	{r3, r4, r5, lr}
	sub = bt_mesh_subnet_get(net_idx);
   25ad8:	f7e7 fbfe 	bl	d2d8 <bt_mesh_subnet_get>
{
   25adc:	460c      	mov	r4, r1
	if (!sub) {
   25ade:	4605      	mov	r5, r0
   25ae0:	b340      	cbz	r0, 25b34 <bt_mesh_subnet_update+0x5e>
	switch (sub->kr_phase) {
   25ae2:	7f83      	ldrb	r3, [r0, #30]
   25ae4:	2b01      	cmp	r3, #1
   25ae6:	d00e      	beq.n	25b06 <bt_mesh_subnet_update+0x30>
   25ae8:	d904      	bls.n	25af4 <bt_mesh_subnet_update+0x1e>
   25aea:	3b02      	subs	r3, #2
   25aec:	2b01      	cmp	r3, #1
   25aee:	d813      	bhi.n	25b18 <bt_mesh_subnet_update+0x42>
		return STATUS_CANNOT_UPDATE;
   25af0:	200b      	movs	r0, #11
   25af2:	e010      	b.n	25b16 <bt_mesh_subnet_update+0x40>
		if (!memcmp(key, sub->keys[0].net, 16)) {
   25af4:	f100 012d 	add.w	r1, r0, #45	; 0x2d
   25af8:	2210      	movs	r2, #16
   25afa:	4620      	mov	r0, r4
   25afc:	f7fe f943 	bl	23d86 <memcmp>
   25b00:	b950      	cbnz	r0, 25b18 <bt_mesh_subnet_update+0x42>
			return STATUS_IDX_ALREADY_STORED;
   25b02:	2006      	movs	r0, #6
   25b04:	e007      	b.n	25b16 <bt_mesh_subnet_update+0x40>
		if (!memcmp(key, sub->keys[1].net, 16)) {
   25b06:	f100 0187 	add.w	r1, r0, #135	; 0x87
   25b0a:	2210      	movs	r2, #16
   25b0c:	4620      	mov	r0, r4
   25b0e:	f7fe f93a 	bl	23d86 <memcmp>
   25b12:	2800      	cmp	r0, #0
   25b14:	d1ec      	bne.n	25af0 <bt_mesh_subnet_update+0x1a>
}
   25b16:	bd38      	pop	{r3, r4, r5, pc}
	err = net_keys_create(&sub->keys[1], key);
   25b18:	4621      	mov	r1, r4
   25b1a:	f105 0086 	add.w	r0, r5, #134	; 0x86
   25b1e:	f7e7 fb39 	bl	d194 <net_keys_create>
	if (err) {
   25b22:	4604      	mov	r4, r0
   25b24:	2800      	cmp	r0, #0
   25b26:	d1e3      	bne.n	25af0 <bt_mesh_subnet_update+0x1a>
	key_refresh(sub, BT_MESH_KR_PHASE_1);
   25b28:	4628      	mov	r0, r5
   25b2a:	2101      	movs	r1, #1
   25b2c:	f7ff ff55 	bl	259da <key_refresh>
	return STATUS_SUCCESS;
   25b30:	4620      	mov	r0, r4
   25b32:	e7f0      	b.n	25b16 <bt_mesh_subnet_update+0x40>
		return STATUS_INVALID_NETKEY;
   25b34:	2004      	movs	r0, #4
   25b36:	e7ee      	b.n	25b16 <bt_mesh_subnet_update+0x40>

00025b38 <bt_mesh_subnet_del>:
{
   25b38:	b508      	push	{r3, lr}
	sub = bt_mesh_subnet_get(net_idx);
   25b3a:	f7e7 fbcd 	bl	d2d8 <bt_mesh_subnet_get>
	if (!sub) {
   25b3e:	b118      	cbz	r0, 25b48 <bt_mesh_subnet_del+0x10>
	subnet_del(sub);
   25b40:	f7ff ffac 	bl	25a9c <subnet_del>
	return STATUS_SUCCESS;
   25b44:	2000      	movs	r0, #0
}
   25b46:	bd08      	pop	{r3, pc}
		return STATUS_INVALID_NETKEY;
   25b48:	2004      	movs	r0, #4
   25b4a:	e7fc      	b.n	25b46 <bt_mesh_subnet_del+0xe>

00025b4c <bt_mesh_subnet_kr_phase_get>:
{
   25b4c:	b508      	push	{r3, lr}
	sub = bt_mesh_subnet_get(net_idx);
   25b4e:	f7e7 fbc3 	bl	d2d8 <bt_mesh_subnet_get>
	if (!sub) {
   25b52:	b118      	cbz	r0, 25b5c <bt_mesh_subnet_kr_phase_get+0x10>
	*phase = sub->kr_phase;
   25b54:	7f83      	ldrb	r3, [r0, #30]
	return STATUS_SUCCESS;
   25b56:	2000      	movs	r0, #0
   25b58:	700b      	strb	r3, [r1, #0]
}
   25b5a:	bd08      	pop	{r3, pc}
		*phase = BT_MESH_KR_NORMAL;
   25b5c:	4603      	mov	r3, r0
		return STATUS_INVALID_NETKEY;
   25b5e:	2004      	movs	r0, #4
   25b60:	e7fa      	b.n	25b58 <bt_mesh_subnet_kr_phase_get+0xc>

00025b62 <bt_mesh_subnet_node_id_set>:
	if (node_id == BT_MESH_FEATURE_NOT_SUPPORTED) {
   25b62:	2902      	cmp	r1, #2
{
   25b64:	b508      	push	{r3, lr}
	if (node_id == BT_MESH_FEATURE_NOT_SUPPORTED) {
   25b66:	d00c      	beq.n	25b82 <bt_mesh_subnet_node_id_set+0x20>
	sub = bt_mesh_subnet_get(net_idx);
   25b68:	f7e7 fbb6 	bl	d2d8 <bt_mesh_subnet_get>
	if (!sub) {
   25b6c:	b158      	cbz	r0, 25b86 <bt_mesh_subnet_node_id_set+0x24>
	if (node_id) {
   25b6e:	b129      	cbz	r1, 25b7c <bt_mesh_subnet_node_id_set+0x1a>
		bt_mesh_proxy_identity_start(sub);
   25b70:	f7ef fd12 	bl	15598 <bt_mesh_proxy_identity_start>
	bt_mesh_adv_update();
   25b74:	f7ed fbd8 	bl	13328 <bt_mesh_adv_update>
	return STATUS_SUCCESS;
   25b78:	2000      	movs	r0, #0
}
   25b7a:	bd08      	pop	{r3, pc}
		bt_mesh_proxy_identity_stop(sub);
   25b7c:	f7ef fd16 	bl	155ac <bt_mesh_proxy_identity_stop>
   25b80:	e7f8      	b.n	25b74 <bt_mesh_subnet_node_id_set+0x12>
		return STATUS_CANNOT_SET;
   25b82:	200f      	movs	r0, #15
   25b84:	e7f9      	b.n	25b7a <bt_mesh_subnet_node_id_set+0x18>
		return STATUS_INVALID_NETKEY;
   25b86:	2004      	movs	r0, #4
   25b88:	e7f7      	b.n	25b7a <bt_mesh_subnet_node_id_set+0x18>

00025b8a <bt_mesh_subnet_node_id_get>:
{
   25b8a:	b508      	push	{r3, lr}
	sub = bt_mesh_subnet_get(net_idx);
   25b8c:	f7e7 fba4 	bl	d2d8 <bt_mesh_subnet_get>
	if (!sub) {
   25b90:	b118      	cbz	r0, 25b9a <bt_mesh_subnet_node_id_get+0x10>
	*node_id = sub->node_id;
   25b92:	7fc3      	ldrb	r3, [r0, #31]
	return STATUS_SUCCESS;
   25b94:	2000      	movs	r0, #0
   25b96:	700b      	strb	r3, [r1, #0]
}
   25b98:	bd08      	pop	{r3, pc}
		*node_id = 0x00;
   25b9a:	4603      	mov	r3, r0
		return STATUS_INVALID_NETKEY;
   25b9c:	2004      	movs	r0, #4
   25b9e:	e7fa      	b.n	25b96 <bt_mesh_subnet_node_id_get+0xc>

00025ba0 <bt_mesh_subnet_set>:
{
   25ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25ba4:	4606      	mov	r6, r0
   25ba6:	4688      	mov	r8, r1
   25ba8:	4617      	mov	r7, r2
   25baa:	461d      	mov	r5, r3
	sub = subnet_alloc(net_idx);
   25bac:	f7e7 fab0 	bl	d110 <subnet_alloc>
	if (!sub) {
   25bb0:	4604      	mov	r4, r0
   25bb2:	b300      	cbz	r0, 25bf6 <bt_mesh_subnet_set+0x56>
	if (sub->net_idx == net_idx) {
   25bb4:	8b83      	ldrh	r3, [r0, #28]
   25bb6:	42b3      	cmp	r3, r6
   25bb8:	d020      	beq.n	25bfc <bt_mesh_subnet_set+0x5c>
		if (!keys[i]) {
   25bba:	b957      	cbnz	r7, 25bd2 <bt_mesh_subnet_set+0x32>
   25bbc:	b99d      	cbnz	r5, 25be6 <bt_mesh_subnet_set+0x46>
		sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
   25bbe:	2500      	movs	r5, #0
	bt_mesh_beacon_update(sub);
   25bc0:	4620      	mov	r0, r4
	sub->net_idx = net_idx;
   25bc2:	83a6      	strh	r6, [r4, #28]
	sub->kr_phase = kr_phase;
   25bc4:	f884 801e 	strb.w	r8, [r4, #30]
		sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
   25bc8:	77e5      	strb	r5, [r4, #31]
	bt_mesh_beacon_update(sub);
   25bca:	f7e6 f9e9 	bl	bfa0 <bt_mesh_beacon_update>
	return 0;
   25bce:	4628      	mov	r0, r5
   25bd0:	e007      	b.n	25be2 <bt_mesh_subnet_set+0x42>
		if (net_keys_create(&sub->keys[i], keys[i])) {
   25bd2:	4639      	mov	r1, r7
   25bd4:	302c      	adds	r0, #44	; 0x2c
   25bd6:	f7e7 fadd 	bl	d194 <net_keys_create>
   25bda:	2800      	cmp	r0, #0
   25bdc:	d0ee      	beq.n	25bbc <bt_mesh_subnet_set+0x1c>
			return -EIO;
   25bde:	f06f 0004 	mvn.w	r0, #4
}
   25be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (net_keys_create(&sub->keys[i], keys[i])) {
   25be6:	4629      	mov	r1, r5
   25be8:	f104 0086 	add.w	r0, r4, #134	; 0x86
   25bec:	f7e7 fad2 	bl	d194 <net_keys_create>
   25bf0:	2800      	cmp	r0, #0
   25bf2:	d0e4      	beq.n	25bbe <bt_mesh_subnet_set+0x1e>
   25bf4:	e7f3      	b.n	25bde <bt_mesh_subnet_set+0x3e>
		return -ENOMEM;
   25bf6:	f06f 000b 	mvn.w	r0, #11
   25bfa:	e7f2      	b.n	25be2 <bt_mesh_subnet_set+0x42>
		return -EALREADY;
   25bfc:	f06f 0077 	mvn.w	r0, #119	; 0x77
   25c00:	e7ef      	b.n	25be2 <bt_mesh_subnet_set+0x42>

00025c02 <app_key_del>:
{
   25c02:	b510      	push	{r4, lr}
		update_app_key_settings(app->app_idx, false);
   25c04:	2100      	movs	r1, #0
{
   25c06:	4604      	mov	r4, r0
		update_app_key_settings(app->app_idx, false);
   25c08:	8840      	ldrh	r0, [r0, #2]
   25c0a:	f7e7 fe15 	bl	d838 <update_app_key_settings>
	app_key_evt(app, BT_MESH_KEY_DELETED);
   25c0e:	4620      	mov	r0, r4
   25c10:	2101      	movs	r1, #1
   25c12:	f7e7 fd6f 	bl	d6f4 <app_key_evt>
	app->net_idx = BT_MESH_KEY_UNUSED;
   25c16:	f64f 73ff 	movw	r3, #65535	; 0xffff
   25c1a:	8023      	strh	r3, [r4, #0]
	app->app_idx = BT_MESH_KEY_UNUSED;
   25c1c:	8063      	strh	r3, [r4, #2]
	(void)memset(app->keys, 0, sizeof(app->keys));
   25c1e:	1d60      	adds	r0, r4, #5
   25c20:	2222      	movs	r2, #34	; 0x22
}
   25c22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)memset(app->keys, 0, sizeof(app->keys));
   25c26:	2100      	movs	r1, #0
   25c28:	f7fe b8c9 	b.w	23dbe <memset>

00025c2c <bt_mesh_app_key_add>:
{
   25c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25c30:	4607      	mov	r7, r0
	if (!bt_mesh_subnet_get(net_idx)) {
   25c32:	4608      	mov	r0, r1
{
   25c34:	4688      	mov	r8, r1
   25c36:	4616      	mov	r6, r2
	if (!bt_mesh_subnet_get(net_idx)) {
   25c38:	f7e7 fb4e 	bl	d2d8 <bt_mesh_subnet_get>
   25c3c:	b380      	cbz	r0, 25ca0 <bt_mesh_app_key_add+0x74>
	app = app_key_alloc(app_idx);
   25c3e:	4638      	mov	r0, r7
   25c40:	f7e7 fd6c 	bl	d71c <app_key_alloc>
	if (!app) {
   25c44:	4605      	mov	r5, r0
   25c46:	b348      	cbz	r0, 25c9c <bt_mesh_app_key_add+0x70>
	if (app->app_idx == app_idx) {
   25c48:	8843      	ldrh	r3, [r0, #2]
   25c4a:	42bb      	cmp	r3, r7
   25c4c:	d10d      	bne.n	25c6a <bt_mesh_app_key_add+0x3e>
		if (app->net_idx != net_idx) {
   25c4e:	8803      	ldrh	r3, [r0, #0]
   25c50:	4543      	cmp	r3, r8
   25c52:	d125      	bne.n	25ca0 <bt_mesh_app_key_add+0x74>
		if (memcmp(key, app->keys[0].val, 16)) {
   25c54:	1d81      	adds	r1, r0, #6
   25c56:	2210      	movs	r2, #16
   25c58:	4630      	mov	r0, r6
   25c5a:	f7fe f894 	bl	23d86 <memcmp>
		return STATUS_SUCCESS;
   25c5e:	2800      	cmp	r0, #0
   25c60:	bf14      	ite	ne
   25c62:	2006      	movne	r0, #6
   25c64:	2000      	moveq	r0, #0
}
   25c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return bt_mesh_k4(app_key, app_id);
   25c6a:	1d41      	adds	r1, r0, #5
   25c6c:	4630      	mov	r0, r6
   25c6e:	f7e9 ffb9 	bl	fbe4 <bt_mesh_k4>
	if (bt_mesh_app_id(key, &app->keys[0].id)) {
   25c72:	4604      	mov	r4, r0
   25c74:	b9b0      	cbnz	r0, 25ca4 <bt_mesh_app_key_add+0x78>
	memcpy(app->keys[0].val, key, 16);
   25c76:	2210      	movs	r2, #16
	app->updated = false;
   25c78:	7128      	strb	r0, [r5, #4]
	memcpy(app->keys[0].val, key, 16);
   25c7a:	4631      	mov	r1, r6
	app->net_idx = net_idx;
   25c7c:	f8a5 8000 	strh.w	r8, [r5]
	app->app_idx = app_idx;
   25c80:	806f      	strh	r7, [r5, #2]
	memcpy(app->keys[0].val, key, 16);
   25c82:	1da8      	adds	r0, r5, #6
   25c84:	f7fe f890 	bl	23da8 <memcpy>
		update_app_key_settings(app->app_idx, true);
   25c88:	8868      	ldrh	r0, [r5, #2]
   25c8a:	2101      	movs	r1, #1
   25c8c:	f7e7 fdd4 	bl	d838 <update_app_key_settings>
	app_key_evt(app, BT_MESH_KEY_ADDED);
   25c90:	4628      	mov	r0, r5
   25c92:	4621      	mov	r1, r4
   25c94:	f7e7 fd2e 	bl	d6f4 <app_key_evt>
	return STATUS_SUCCESS;
   25c98:	4620      	mov	r0, r4
   25c9a:	e7e4      	b.n	25c66 <bt_mesh_app_key_add+0x3a>
		return STATUS_INSUFF_RESOURCES;
   25c9c:	2005      	movs	r0, #5
   25c9e:	e7e2      	b.n	25c66 <bt_mesh_app_key_add+0x3a>
		return STATUS_INVALID_NETKEY;
   25ca0:	2004      	movs	r0, #4
   25ca2:	e7e0      	b.n	25c66 <bt_mesh_app_key_add+0x3a>
		return STATUS_CANNOT_SET;
   25ca4:	200f      	movs	r0, #15
   25ca6:	e7de      	b.n	25c66 <bt_mesh_app_key_add+0x3a>

00025ca8 <bt_mesh_app_key_update>:
{
   25ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25caa:	4616      	mov	r6, r2
	app = app_get(app_idx);
   25cac:	f7e7 fd10 	bl	d6d0 <app_get>
	if (!app) {
   25cb0:	4605      	mov	r5, r0
   25cb2:	b3a0      	cbz	r0, 25d1e <bt_mesh_app_key_update+0x76>
	if (net_idx != BT_MESH_KEY_UNUSED && app->net_idx != net_idx) {
   25cb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   25cb8:	4299      	cmp	r1, r3
   25cba:	8800      	ldrh	r0, [r0, #0]
   25cbc:	d001      	beq.n	25cc2 <bt_mesh_app_key_update+0x1a>
   25cbe:	4281      	cmp	r1, r0
   25cc0:	d12f      	bne.n	25d22 <bt_mesh_app_key_update+0x7a>
	sub = bt_mesh_subnet_get(app->net_idx);
   25cc2:	f7e7 fb09 	bl	d2d8 <bt_mesh_subnet_get>
	if (!sub) {
   25cc6:	b370      	cbz	r0, 25d26 <bt_mesh_app_key_update+0x7e>
	if (sub->kr_phase != BT_MESH_KR_PHASE_1) {
   25cc8:	7f87      	ldrb	r7, [r0, #30]
   25cca:	2f01      	cmp	r7, #1
   25ccc:	d001      	beq.n	25cd2 <bt_mesh_app_key_update+0x2a>
		return STATUS_CANNOT_UPDATE;
   25cce:	200b      	movs	r0, #11
}
   25cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (app->updated) {
   25cd2:	792b      	ldrb	r3, [r5, #4]
   25cd4:	b153      	cbz	r3, 25cec <bt_mesh_app_key_update+0x44>
		if (memcmp(app->keys[1].val, key, 16)) {
   25cd6:	2210      	movs	r2, #16
   25cd8:	4631      	mov	r1, r6
   25cda:	f105 0017 	add.w	r0, r5, #23
   25cde:	f7fe f852 	bl	23d86 <memcmp>
		return STATUS_SUCCESS;
   25ce2:	2800      	cmp	r0, #0
   25ce4:	bf14      	ite	ne
   25ce6:	2006      	movne	r0, #6
   25ce8:	2000      	moveq	r0, #0
   25cea:	e7f1      	b.n	25cd0 <bt_mesh_app_key_update+0x28>
   25cec:	f105 0116 	add.w	r1, r5, #22
   25cf0:	4630      	mov	r0, r6
   25cf2:	f7e9 ff77 	bl	fbe4 <bt_mesh_k4>
	if (bt_mesh_app_id(key, &app->keys[1].id)) {
   25cf6:	4604      	mov	r4, r0
   25cf8:	2800      	cmp	r0, #0
   25cfa:	d1e8      	bne.n	25cce <bt_mesh_app_key_update+0x26>
	memcpy(app->keys[1].val, key, 16);
   25cfc:	2210      	movs	r2, #16
   25cfe:	4631      	mov	r1, r6
	app->updated = true;
   25d00:	712f      	strb	r7, [r5, #4]
	memcpy(app->keys[1].val, key, 16);
   25d02:	f105 0017 	add.w	r0, r5, #23
   25d06:	f7fe f84f 	bl	23da8 <memcpy>
		update_app_key_settings(app->app_idx, true);
   25d0a:	8868      	ldrh	r0, [r5, #2]
   25d0c:	4639      	mov	r1, r7
   25d0e:	f7e7 fd93 	bl	d838 <update_app_key_settings>
	app_key_evt(app, BT_MESH_KEY_UPDATED);
   25d12:	4628      	mov	r0, r5
   25d14:	2102      	movs	r1, #2
   25d16:	f7e7 fced 	bl	d6f4 <app_key_evt>
	return STATUS_SUCCESS;
   25d1a:	4620      	mov	r0, r4
   25d1c:	e7d8      	b.n	25cd0 <bt_mesh_app_key_update+0x28>
		return STATUS_INVALID_APPKEY;
   25d1e:	2003      	movs	r0, #3
   25d20:	e7d6      	b.n	25cd0 <bt_mesh_app_key_update+0x28>
		return STATUS_INVALID_BINDING;
   25d22:	2011      	movs	r0, #17
   25d24:	e7d4      	b.n	25cd0 <bt_mesh_app_key_update+0x28>
		return STATUS_INVALID_NETKEY;
   25d26:	2004      	movs	r0, #4
   25d28:	e7d2      	b.n	25cd0 <bt_mesh_app_key_update+0x28>

00025d2a <bt_mesh_app_key_del>:
{
   25d2a:	b538      	push	{r3, r4, r5, lr}
	if (net_idx != BT_MESH_KEY_UNUSED && !bt_mesh_subnet_get(net_idx)) {
   25d2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   25d30:	4299      	cmp	r1, r3
{
   25d32:	4605      	mov	r5, r0
   25d34:	460c      	mov	r4, r1
	if (net_idx != BT_MESH_KEY_UNUSED && !bt_mesh_subnet_get(net_idx)) {
   25d36:	d104      	bne.n	25d42 <bt_mesh_app_key_del+0x18>
	app = app_get(app_idx);
   25d38:	4628      	mov	r0, r5
   25d3a:	f7e7 fcc9 	bl	d6d0 <app_get>
	if (!app) {
   25d3e:	b938      	cbnz	r0, 25d50 <bt_mesh_app_key_del+0x26>
}
   25d40:	bd38      	pop	{r3, r4, r5, pc}
	if (net_idx != BT_MESH_KEY_UNUSED && !bt_mesh_subnet_get(net_idx)) {
   25d42:	4608      	mov	r0, r1
   25d44:	f7e7 fac8 	bl	d2d8 <bt_mesh_subnet_get>
   25d48:	2800      	cmp	r0, #0
   25d4a:	d1f5      	bne.n	25d38 <bt_mesh_app_key_del+0xe>
		return STATUS_INVALID_NETKEY;
   25d4c:	2004      	movs	r0, #4
   25d4e:	e7f7      	b.n	25d40 <bt_mesh_app_key_del+0x16>
	if (net_idx != BT_MESH_KEY_UNUSED && net_idx != app->net_idx) {
   25d50:	f64f 73ff 	movw	r3, #65535	; 0xffff
   25d54:	429c      	cmp	r4, r3
   25d56:	d002      	beq.n	25d5e <bt_mesh_app_key_del+0x34>
   25d58:	8803      	ldrh	r3, [r0, #0]
   25d5a:	42a3      	cmp	r3, r4
   25d5c:	d103      	bne.n	25d66 <bt_mesh_app_key_del+0x3c>
	app_key_del(app);
   25d5e:	f7ff ff50 	bl	25c02 <app_key_del>
	return STATUS_SUCCESS;
   25d62:	2000      	movs	r0, #0
   25d64:	e7ec      	b.n	25d40 <bt_mesh_app_key_del+0x16>
		return STATUS_INVALID_BINDING;
   25d66:	2011      	movs	r0, #17
   25d68:	e7ea      	b.n	25d40 <bt_mesh_app_key_del+0x16>

00025d6a <bt_mesh_app_key_set>:
{
   25d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25d6e:	4607      	mov	r7, r0
   25d70:	4688      	mov	r8, r1
   25d72:	4616      	mov	r6, r2
   25d74:	461d      	mov	r5, r3
	app = app_key_alloc(app_idx);
   25d76:	f7e7 fcd1 	bl	d71c <app_key_alloc>
	if (!app) {
   25d7a:	4604      	mov	r4, r0
   25d7c:	b348      	cbz	r0, 25dd2 <bt_mesh_app_key_set+0x68>
	if (app->app_idx == app_idx) {
   25d7e:	8843      	ldrh	r3, [r0, #2]
   25d80:	42bb      	cmp	r3, r7
   25d82:	d029      	beq.n	25dd8 <bt_mesh_app_key_set+0x6e>
	memcpy(app->keys[0].val, old_key, 16);
   25d84:	4631      	mov	r1, r6
   25d86:	2210      	movs	r2, #16
   25d88:	3006      	adds	r0, #6
   25d8a:	f7fe f80d 	bl	23da8 <memcpy>
   25d8e:	4630      	mov	r0, r6
   25d90:	1d61      	adds	r1, r4, #5
   25d92:	f7e9 ff27 	bl	fbe4 <bt_mesh_k4>
	if (bt_mesh_app_id(old_key, &app->keys[0].id)) {
   25d96:	4606      	mov	r6, r0
   25d98:	b120      	cbz	r0, 25da4 <bt_mesh_app_key_set+0x3a>
		return -EIO;
   25d9a:	f06f 0604 	mvn.w	r6, #4
}
   25d9e:	4630      	mov	r0, r6
   25da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (new_key) {
   25da4:	b93d      	cbnz	r5, 25db6 <bt_mesh_app_key_set+0x4c>
	app->updated = !!new_key;
   25da6:	3d00      	subs	r5, #0
   25da8:	bf18      	it	ne
   25daa:	2501      	movne	r5, #1
	app->net_idx = net_idx;
   25dac:	f8a4 8000 	strh.w	r8, [r4]
	app->app_idx = app_idx;
   25db0:	8067      	strh	r7, [r4, #2]
	app->updated = !!new_key;
   25db2:	7125      	strb	r5, [r4, #4]
	return 0;
   25db4:	e7f3      	b.n	25d9e <bt_mesh_app_key_set+0x34>
		memcpy(app->keys[1].val, new_key, 16);
   25db6:	4629      	mov	r1, r5
   25db8:	2210      	movs	r2, #16
   25dba:	f104 0017 	add.w	r0, r4, #23
   25dbe:	f7fd fff3 	bl	23da8 <memcpy>
   25dc2:	f104 0116 	add.w	r1, r4, #22
   25dc6:	4628      	mov	r0, r5
   25dc8:	f7e9 ff0c 	bl	fbe4 <bt_mesh_k4>
		if (bt_mesh_app_id(new_key, &app->keys[1].id)) {
   25dcc:	2800      	cmp	r0, #0
   25dce:	d0ea      	beq.n	25da6 <bt_mesh_app_key_set+0x3c>
   25dd0:	e7e3      	b.n	25d9a <bt_mesh_app_key_set+0x30>
		return -ENOMEM;
   25dd2:	f06f 060b 	mvn.w	r6, #11
   25dd6:	e7e2      	b.n	25d9e <bt_mesh_app_key_set+0x34>
		return 0;
   25dd8:	2600      	movs	r6, #0
   25dda:	e7e0      	b.n	25d9e <bt_mesh_app_key_set+0x34>

00025ddc <seg_rx_assemble>:
{
   25ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf->data = buf->__buf;
   25de0:	688b      	ldr	r3, [r1, #8]
   25de2:	600b      	str	r3, [r1, #0]
	buf->len  = 0U;
   25de4:	2500      	movs	r5, #0
   25de6:	4606      	mov	r6, r0
   25de8:	460c      	mov	r4, r1
   25dea:	4617      	mov	r7, r2
   25dec:	808d      	strh	r5, [r1, #4]
	for (i = 0; i <= rx->seg_n; i++) {
   25dee:	f100 0804 	add.w	r8, r0, #4
				       MIN(seg_len(rx->ctl),
   25df2:	7ff3      	ldrb	r3, [r6, #31]
		net_buf_simple_add_mem(buf, rx->seg[i],
   25df4:	f858 1b04 	ldr.w	r1, [r8], #4
		return BT_MESH_APP_SEG_SDU_MAX;
   25df8:	f013 0f20 	tst.w	r3, #32
				       MIN(seg_len(rx->ctl),
   25dfc:	8bb3      	ldrh	r3, [r6, #28]
		return BT_MESH_APP_SEG_SDU_MAX;
   25dfe:	bf14      	ite	ne
   25e00:	2208      	movne	r2, #8
   25e02:	220c      	moveq	r2, #12
				       MIN(seg_len(rx->ctl),
   25e04:	fb05 3312 	mls	r3, r5, r2, r3
		net_buf_simple_add_mem(buf, rx->seg[i],
   25e08:	429a      	cmp	r2, r3
   25e0a:	bfa8      	it	ge
   25e0c:	461a      	movge	r2, r3
   25e0e:	4620      	mov	r0, r4
   25e10:	f002 fa20 	bl	28254 <net_buf_simple_add_mem>
	for (i = 0; i <= rx->seg_n; i++) {
   25e14:	7ff3      	ldrb	r3, [r6, #31]
   25e16:	3501      	adds	r5, #1
   25e18:	461a      	mov	r2, r3
   25e1a:	f003 031f 	and.w	r3, r3, #31
   25e1e:	42ab      	cmp	r3, r5
   25e20:	dae7      	bge.n	25df2 <seg_rx_assemble+0x16>
	if (!rx->ctl) {
   25e22:	0693      	lsls	r3, r2, #26
   25e24:	d407      	bmi.n	25e36 <seg_rx_assemble+0x5a>
		buf->len -= APP_MIC_LEN(aszmic);
   25e26:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
   25e2a:	2f00      	cmp	r7, #0
   25e2c:	bf14      	ite	ne
   25e2e:	2208      	movne	r2, #8
   25e30:	2204      	moveq	r2, #4
   25e32:	1a9b      	subs	r3, r3, r2
   25e34:	80a3      	strh	r3, [r4, #4]
}
   25e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025e3a <ack_timeout>:
{
   25e3a:	b538      	push	{r3, r4, r5, lr}
	if (rx->ttl == BT_MESH_TTL_DEFAULT) {
   25e3c:	f890 4020 	ldrb.w	r4, [r0, #32]
   25e40:	2cff      	cmp	r4, #255	; 0xff
{
   25e42:	4605      	mov	r5, r0
	if (rx->ttl == BT_MESH_TTL_DEFAULT) {
   25e44:	d102      	bne.n	25e4c <ack_timeout+0x12>
		ttl = bt_mesh_default_ttl_get();
   25e46:	f7e5 fcfd 	bl	b844 <bt_mesh_default_ttl_get>
   25e4a:	4604      	mov	r4, r0
	to += ((rx->seg_n + 1) - popcount(rx->block)) * 100U;
   25e4c:	6a68      	ldr	r0, [r5, #36]	; 0x24
   25e4e:	f7da f9af 	bl	1b0 <__popcountsi2>
   25e52:	7feb      	ldrb	r3, [r5, #31]
   25e54:	f003 031f 	and.w	r3, r3, #31
   25e58:	1a18      	subs	r0, r3, r0
   25e5a:	2364      	movs	r3, #100	; 0x64
   25e5c:	fb00 3303 	mla	r3, r0, r3, r3
	to = 150 + (ttl * 50U);
   25e60:	2296      	movs	r2, #150	; 0x96
   25e62:	2032      	movs	r0, #50	; 0x32
   25e64:	fb10 2004 	smlabb	r0, r0, r4, r2
	to += ((rx->seg_n + 1) - popcount(rx->block)) * 100U;
   25e68:	4418      	add	r0, r3
}
   25e6a:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
   25e6e:	bfb8      	it	lt
   25e70:	f44f 70c8 	movlt.w	r0, #400	; 0x190
   25e74:	bd38      	pop	{r3, r4, r5, pc}

00025e76 <sdu_try_decrypt>:
	if (ctx->seg) {
   25e76:	69d0      	ldr	r0, [r2, #28]
{
   25e78:	b570      	push	{r4, r5, r6, lr}
   25e7a:	460d      	mov	r5, r1
   25e7c:	4614      	mov	r4, r2
	if (ctx->seg) {
   25e7e:	b118      	cbz	r0, 25e88 <sdu_try_decrypt+0x12>
		seg_rx_assemble(ctx->seg, ctx->buf, ctx->crypto.aszmic);
   25e80:	7852      	ldrb	r2, [r2, #1]
   25e82:	6961      	ldr	r1, [r4, #20]
   25e84:	f7ff ffaa 	bl	25ddc <seg_rx_assemble>
	net_buf_simple_reset(ctx->sdu);
   25e88:	69a3      	ldr	r3, [r4, #24]
   25e8a:	2200      	movs	r2, #0
   25e8c:	809a      	strh	r2, [r3, #4]
	buf->data = buf->__buf;
   25e8e:	689a      	ldr	r2, [r3, #8]
   25e90:	601a      	str	r2, [r3, #0]
	return bt_mesh_app_decrypt(key, &ctx->crypto, ctx->buf, ctx->sdu);
   25e92:	4621      	mov	r1, r4
   25e94:	6962      	ldr	r2, [r4, #20]
   25e96:	4628      	mov	r0, r5
}
   25e98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_mesh_app_decrypt(key, &ctx->crypto, ctx->buf, ctx->sdu);
   25e9c:	f000 ba06 	b.w	262ac <bt_mesh_app_decrypt>

00025ea0 <schedule_retransmit>:
{
   25ea0:	b510      	push	{r4, lr}
	if (!tx->nack_count) {
   25ea2:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
   25ea6:	b38b      	cbz	r3, 25f0c <schedule_retransmit+0x6c>
	if (--tx->seg_pending || tx->sending) {
   25ea8:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   25eac:	3b01      	subs	r3, #1
   25eae:	b2db      	uxtb	r3, r3
   25eb0:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
   25eb4:	bb53      	cbnz	r3, 25f0c <schedule_retransmit+0x6c>
   25eb6:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
   25eba:	06db      	lsls	r3, r3, #27
   25ebc:	d426      	bmi.n	25f0c <schedule_retransmit+0x6c>
	k_work_reschedule(&tx->retransmit,
   25ebe:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
   25ec2:	f100 0440 	add.w	r4, r0, #64	; 0x40
   25ec6:	b131      	cbz	r1, 25ed6 <schedule_retransmit+0x36>
   25ec8:	2200      	movs	r2, #0
   25eca:	4613      	mov	r3, r2
   25ecc:	4620      	mov	r0, r4
}
   25ece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_reschedule(&tx->retransmit,
   25ed2:	f7fa baa7 	b.w	20424 <k_work_reschedule>
			  K_MSEC(SEG_RETRANSMIT_TIMEOUT(tx)));
   25ed6:	f9b0 302a 	ldrsh.w	r3, [r0, #42]	; 0x2a
   25eda:	2b00      	cmp	r3, #0
   25edc:	bfc8      	it	gt
   25ede:	f890 2034 	ldrbgt.w	r2, [r0, #52]	; 0x34
   25ee2:	f04f 0332 	mov.w	r3, #50	; 0x32
   25ee6:	bfc5      	ittet	gt
   25ee8:	f44f 70c8 	movgt.w	r0, #400	; 0x190
   25eec:	fb03 0002 	mlagt	r0, r3, r2, r0
   25ef0:	4618      	movle	r0, r3
   25ef2:	2100      	movgt	r1, #0
   25ef4:	03c0      	lsls	r0, r0, #15
   25ef6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   25efa:	2300      	movs	r3, #0
   25efc:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   25f00:	03c9      	lsls	r1, r1, #15
   25f02:	f7da f93d 	bl	180 <__aeabi_uldivmod>
   25f06:	4602      	mov	r2, r0
   25f08:	460b      	mov	r3, r1
   25f0a:	e7df      	b.n	25ecc <schedule_retransmit+0x2c>
}
   25f0c:	bd10      	pop	{r4, pc}

00025f0e <seg_sent>:
	schedule_retransmit(tx);
   25f0e:	4608      	mov	r0, r1
   25f10:	f7ff bfc6 	b.w	25ea0 <schedule_retransmit>

00025f14 <seg_send_start>:
{
   25f14:	b538      	push	{r3, r4, r5, lr}
	if (!tx->started && tx->cb && tx->cb->start) {
   25f16:	f892 3036 	ldrb.w	r3, [r2, #54]	; 0x36
   25f1a:	071b      	lsls	r3, r3, #28
{
   25f1c:	460d      	mov	r5, r1
   25f1e:	4614      	mov	r4, r2
	if (!tx->started && tx->cb && tx->cb->start) {
   25f20:	d40b      	bmi.n	25f3a <seg_send_start+0x26>
   25f22:	6b93      	ldr	r3, [r2, #56]	; 0x38
   25f24:	b14b      	cbz	r3, 25f3a <seg_send_start+0x26>
   25f26:	681b      	ldr	r3, [r3, #0]
   25f28:	b13b      	cbz	r3, 25f3a <seg_send_start+0x26>
		tx->cb->start(duration, err, tx->cb_data);
   25f2a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
   25f2c:	4798      	blx	r3
		tx->started = 1U;
   25f2e:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
   25f32:	f043 0308 	orr.w	r3, r3, #8
   25f36:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	if (err) {
   25f3a:	b125      	cbz	r5, 25f46 <seg_send_start+0x32>
		schedule_retransmit(tx);
   25f3c:	4620      	mov	r0, r4
}
   25f3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		schedule_retransmit(tx);
   25f42:	f7ff bfad 	b.w	25ea0 <schedule_retransmit>
}
   25f46:	bd38      	pop	{r3, r4, r5, pc}

00025f48 <seg_retransmit>:
	seg_tx_send_unacked(tx);
   25f48:	3840      	subs	r0, #64	; 0x40
   25f4a:	f7e7 bf8d 	b.w	de68 <seg_tx_send_unacked>

00025f4e <send_ack.isra.0>:
static int send_ack(struct bt_mesh_subnet *sub, uint16_t src, uint16_t dst,
   25f4e:	b5f0      	push	{r4, r5, r6, r7, lr}
   25f50:	b08b      	sub	sp, #44	; 0x2c
	struct bt_mesh_msg_ctx ctx = {
   25f52:	8b87      	ldrh	r7, [r0, #28]
static int send_ack(struct bt_mesh_subnet *sub, uint16_t src, uint16_t dst,
   25f54:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
	struct bt_mesh_msg_ctx ctx = {
   25f58:	f8ad 7010 	strh.w	r7, [sp, #16]
static int send_ack(struct bt_mesh_subnet *sub, uint16_t src, uint16_t dst,
   25f5c:	460d      	mov	r5, r1
	struct bt_mesh_msg_ctx ctx = {
   25f5e:	f64f 77ff 	movw	r7, #65535	; 0xffff
   25f62:	2100      	movs	r1, #0
   25f64:	f88d 301b 	strb.w	r3, [sp, #27]
	struct bt_mesh_net_tx tx = {
   25f68:	ab04      	add	r3, sp, #16
static int send_ack(struct bt_mesh_subnet *sub, uint16_t src, uint16_t dst,
   25f6a:	9e11      	ldr	r6, [sp, #68]	; 0x44
	struct bt_mesh_msg_ctx ctx = {
   25f6c:	f8cd 1016 	str.w	r1, [sp, #22]
   25f70:	f88d 101a 	strb.w	r1, [sp, #26]
   25f74:	f8ad 7012 	strh.w	r7, [sp, #18]
   25f78:	f8ad 2014 	strh.w	r2, [sp, #20]
	struct bt_mesh_net_tx tx = {
   25f7c:	9109      	str	r1, [sp, #36]	; 0x24
   25f7e:	9007      	str	r0, [sp, #28]
   25f80:	9308      	str	r3, [sp, #32]
   25f82:	b36c      	cbz	r4, 25fe0 <send_ack.isra.0+0x92>
		.src = obo ? bt_mesh_primary_addr() : src,
   25f84:	f7ea fb26 	bl	105d4 <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
   25f88:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
		.xmit = bt_mesh_net_transmit_get(),
   25f8c:	f7e5 fc76 	bl	b87c <bt_mesh_net_transmit_get>
	if (!BT_MESH_ADDR_IS_UNICAST(src)) {
   25f90:	b22d      	sxth	r5, r5
   25f92:	2d00      	cmp	r5, #0
	struct bt_mesh_net_tx tx = {
   25f94:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
	if (!BT_MESH_ADDR_IS_UNICAST(src)) {
   25f98:	dd20      	ble.n	25fdc <send_ack.isra.0+0x8e>
	uint16_t seq_zero = *seq_auth & TRANS_SEQ_ZERO_MASK;
   25f9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
	dst[1] = val;
   25f9c:	f88d 600d 	strb.w	r6, [sp, #13]
   25fa0:	881b      	ldrh	r3, [r3, #0]
	sys_put_be16(((seq_zero << 2) & 0x7ffc) | (obo << 15), buf);
   25fa2:	03e4      	lsls	r4, r4, #15
   25fa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
   25fa8:	ea44 0483 	orr.w	r4, r4, r3, lsl #2
	dst[0] = val >> 8;
   25fac:	f3c4 2307 	ubfx	r3, r4, #8, #8
   25fb0:	f88d 3008 	strb.w	r3, [sp, #8]
	sys_put_be16(val >> 16, dst);
   25fb4:	0c33      	lsrs	r3, r6, #16
	dst[0] = val >> 8;
   25fb6:	0e32      	lsrs	r2, r6, #24
	dst[1] = val;
   25fb8:	f88d 300b 	strb.w	r3, [sp, #11]
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_ACK, buf, sizeof(buf),
   25fbc:	2100      	movs	r1, #0
	dst[0] = val >> 8;
   25fbe:	f3c6 2307 	ubfx	r3, r6, #8, #8
   25fc2:	f88d 200a 	strb.w	r2, [sp, #10]
   25fc6:	f88d 300c 	strb.w	r3, [sp, #12]
   25fca:	e9cd 1100 	strd	r1, r1, [sp]
   25fce:	2306      	movs	r3, #6
   25fd0:	aa02      	add	r2, sp, #8
   25fd2:	a807      	add	r0, sp, #28
	dst[1] = val;
   25fd4:	f88d 4009 	strb.w	r4, [sp, #9]
   25fd8:	f7e8 fa44 	bl	e464 <bt_mesh_ctl_send>
}
   25fdc:	b00b      	add	sp, #44	; 0x2c
   25fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct bt_mesh_net_tx tx = {
   25fe0:	4628      	mov	r0, r5
   25fe2:	e7d1      	b.n	25f88 <send_ack.isra.0+0x3a>

00025fe4 <bt_mesh_rpl_update>:
	if (rpl->old_iv && !rx->old_iv) {
   25fe4:	f990 3001 	ldrsb.w	r3, [r0, #1]
   25fe8:	2b00      	cmp	r3, #0
   25fea:	da07      	bge.n	25ffc <bt_mesh_rpl_update+0x18>
   25fec:	7d0b      	ldrb	r3, [r1, #20]
   25fee:	f013 0301 	ands.w	r3, r3, #1
		rpl->seg = 0;
   25ff2:	bf02      	ittt	eq
   25ff4:	6842      	ldreq	r2, [r0, #4]
   25ff6:	f363 221f 	bfieq	r2, r3, #8, #24
   25ffa:	6042      	streq	r2, [r0, #4]
	rpl->seq = rx->seq;
   25ffc:	8a0a      	ldrh	r2, [r1, #16]
	rpl->src = rx->ctx.addr;
   25ffe:	890b      	ldrh	r3, [r1, #8]
	rpl->seq = rx->seq;
   26000:	8042      	strh	r2, [r0, #2]
   26002:	7c8a      	ldrb	r2, [r1, #18]
   26004:	7102      	strb	r2, [r0, #4]
	rpl->old_iv = rx->old_iv;
   26006:	7d0a      	ldrb	r2, [r1, #20]
	rpl->src = rx->ctx.addr;
   26008:	f3c3 030e 	ubfx	r3, r3, #0, #15
   2600c:	f002 0201 	and.w	r2, r2, #1
   26010:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
   26014:	8003      	strh	r3, [r0, #0]
		schedule_rpl_store(rpl, false);
   26016:	f7e9 b95b 	b.w	f2d0 <schedule_rpl_store.constprop.0>

0002601a <bt_mesh_rpl_clear>:
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_RPL_PENDING);
   2601a:	2000      	movs	r0, #0
   2601c:	f7ed ba36 	b.w	1348c <bt_mesh_settings_store_schedule>

00026020 <hb_publish_start_cb>:
{
   26020:	4608      	mov	r0, r1
   26022:	4611      	mov	r1, r2
	if (err) {
   26024:	b108      	cbz	r0, 2602a <hb_publish_start_cb+0xa>
		hb_publish_end_cb(err, cb_data);
   26026:	f7e9 ba91 	b.w	f54c <hb_publish_end_cb>
}
   2602a:	4770      	bx	lr

0002602c <sys_put_be32>:
	sys_put_be16(val >> 16, dst);
   2602c:	0c03      	lsrs	r3, r0, #16
	dst[0] = val >> 8;
   2602e:	0e02      	lsrs	r2, r0, #24
	dst[1] = val;
   26030:	704b      	strb	r3, [r1, #1]
	dst[0] = val >> 8;
   26032:	f3c0 2307 	ubfx	r3, r0, #8, #8
   26036:	700a      	strb	r2, [r1, #0]
   26038:	708b      	strb	r3, [r1, #2]
	dst[1] = val;
   2603a:	70c8      	strb	r0, [r1, #3]
}
   2603c:	4770      	bx	lr

0002603e <create_app_nonce>:
{
   2603e:	b538      	push	{r3, r4, r5, lr}
	if (ctx->dev_key) {
   26040:	780b      	ldrb	r3, [r1, #0]
{
   26042:	460c      	mov	r4, r1
		nonce[0] = 0x01;
   26044:	2b00      	cmp	r3, #0
   26046:	4601      	mov	r1, r0
   26048:	bf14      	ite	ne
   2604a:	2302      	movne	r3, #2
   2604c:	2301      	moveq	r3, #1
   2604e:	f801 3b01 	strb.w	r3, [r1], #1
{
   26052:	4605      	mov	r5, r0
	sys_put_be32((ctx->seq_num | ((uint32_t)ctx->aszmic << 31)), &nonce[1]);
   26054:	68a3      	ldr	r3, [r4, #8]
   26056:	7860      	ldrb	r0, [r4, #1]
   26058:	ea43 70c0 	orr.w	r0, r3, r0, lsl #31
   2605c:	f7ff ffe6 	bl	2602c <sys_put_be32>
	sys_put_be16(ctx->src, &nonce[5]);
   26060:	8863      	ldrh	r3, [r4, #2]
	dst[1] = val;
   26062:	71ab      	strb	r3, [r5, #6]
	dst[0] = val >> 8;
   26064:	0a1a      	lsrs	r2, r3, #8
   26066:	716a      	strb	r2, [r5, #5]
	sys_put_be16(ctx->dst, &nonce[7]);
   26068:	88a3      	ldrh	r3, [r4, #4]
	dst[1] = val;
   2606a:	722b      	strb	r3, [r5, #8]
	dst[0] = val >> 8;
   2606c:	0a1a      	lsrs	r2, r3, #8
   2606e:	71ea      	strb	r2, [r5, #7]
	sys_put_be32(ctx->iv_index, &nonce[9]);
   26070:	68e0      	ldr	r0, [r4, #12]
   26072:	f105 0109 	add.w	r1, r5, #9
}
   26076:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	sys_put_be32(ctx->iv_index, &nonce[9]);
   2607a:	f7ff bfd7 	b.w	2602c <sys_put_be32>

0002607e <bt_mesh_aes_cmac>:
{
   2607e:	b570      	push	{r4, r5, r6, lr}
   26080:	b0c2      	sub	sp, #264	; 0x108
   26082:	460d      	mov	r5, r1
   26084:	4614      	mov	r4, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   26086:	4601      	mov	r1, r0
   26088:	aa16      	add	r2, sp, #88	; 0x58
   2608a:	4668      	mov	r0, sp
{
   2608c:	461e      	mov	r6, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2608e:	f7fd fc6a 	bl	23966 <tc_cmac_setup>
   26092:	b130      	cbz	r0, 260a2 <bt_mesh_aes_cmac+0x24>
   26094:	3508      	adds	r5, #8
	for (; sg_len; sg_len--, sg++) {
   26096:	b944      	cbnz	r4, 260aa <bt_mesh_aes_cmac+0x2c>
	if (tc_cmac_final(mac, &state) == TC_CRYPTO_FAIL) {
   26098:	4669      	mov	r1, sp
   2609a:	4630      	mov	r0, r6
   2609c:	f7fd fcf9 	bl	23a92 <tc_cmac_final>
   260a0:	b968      	cbnz	r0, 260be <bt_mesh_aes_cmac+0x40>
		return -EIO;
   260a2:	f06f 0004 	mvn.w	r0, #4
}
   260a6:	b042      	add	sp, #264	; 0x108
   260a8:	bd70      	pop	{r4, r5, r6, pc}
		if (tc_cmac_update(&state, sg->data,
   260aa:	e955 1202 	ldrd	r1, r2, [r5, #-8]
   260ae:	4668      	mov	r0, sp
   260b0:	f7fd fc84 	bl	239bc <tc_cmac_update>
   260b4:	3508      	adds	r5, #8
   260b6:	2800      	cmp	r0, #0
   260b8:	d0f3      	beq.n	260a2 <bt_mesh_aes_cmac+0x24>
	for (; sg_len; sg_len--, sg++) {
   260ba:	3c01      	subs	r4, #1
   260bc:	e7eb      	b.n	26096 <bt_mesh_aes_cmac+0x18>
	return 0;
   260be:	4620      	mov	r0, r4
   260c0:	e7f1      	b.n	260a6 <bt_mesh_aes_cmac+0x28>

000260c2 <bt_mesh_aes_cmac_one>:
{
   260c2:	b507      	push	{r0, r1, r2, lr}
	struct bt_mesh_sg sg = { m, len };
   260c4:	e9cd 1200 	strd	r1, r2, [sp]
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
   260c8:	2201      	movs	r2, #1
   260ca:	4669      	mov	r1, sp
   260cc:	f7ff ffd7 	bl	2607e <bt_mesh_aes_cmac>
}
   260d0:	b003      	add	sp, #12
   260d2:	f85d fb04 	ldr.w	pc, [sp], #4

000260d6 <bt_mesh_s1>:
{
   260d6:	b530      	push	{r4, r5, lr}
	const uint8_t zero[16] = { 0 };
   260d8:	2200      	movs	r2, #0
{
   260da:	b085      	sub	sp, #20
   260dc:	460d      	mov	r5, r1
	const uint8_t zero[16] = { 0 };
   260de:	e9cd 2200 	strd	r2, r2, [sp]
   260e2:	e9cd 2202 	strd	r2, r2, [sp, #8]
{
   260e6:	4604      	mov	r4, r0
	return bt_mesh_aes_cmac_one(zero, m, strlen(m), salt);
   260e8:	f7fd fe20 	bl	23d2c <strlen>
   260ec:	462b      	mov	r3, r5
   260ee:	4602      	mov	r2, r0
   260f0:	4621      	mov	r1, r4
   260f2:	4668      	mov	r0, sp
   260f4:	f7ff ffe5 	bl	260c2 <bt_mesh_aes_cmac_one>
}
   260f8:	3800      	subs	r0, #0
   260fa:	bf18      	it	ne
   260fc:	2001      	movne	r0, #1
   260fe:	b005      	add	sp, #20
   26100:	bd30      	pop	{r4, r5, pc}

00026102 <bt_mesh_k1>:
{
   26102:	b570      	push	{r4, r5, r6, lr}
   26104:	9d04      	ldr	r5, [sp, #16]
   26106:	4606      	mov	r6, r0
   26108:	461c      	mov	r4, r3
   2610a:	4610      	mov	r0, r2
	err = bt_mesh_aes_cmac_one(salt, ikm, ikm_len, okm);
   2610c:	462b      	mov	r3, r5
   2610e:	460a      	mov	r2, r1
   26110:	4631      	mov	r1, r6
   26112:	f7ff ffd6 	bl	260c2 <bt_mesh_aes_cmac_one>
	if (err < 0) {
   26116:	2800      	cmp	r0, #0
   26118:	db0a      	blt.n	26130 <bt_mesh_k1+0x2e>
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
   2611a:	4620      	mov	r0, r4
   2611c:	f7fd fe06 	bl	23d2c <strlen>
   26120:	462b      	mov	r3, r5
   26122:	4602      	mov	r2, r0
   26124:	4621      	mov	r1, r4
   26126:	4628      	mov	r0, r5
}
   26128:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
   2612c:	f7ff bfc9 	b.w	260c2 <bt_mesh_aes_cmac_one>
}
   26130:	bd70      	pop	{r4, r5, r6, pc}

00026132 <bt_mesh_net_encrypt>:
{
   26132:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   26136:	680c      	ldr	r4, [r1, #0]
{
   26138:	4607      	mov	r7, r0
   2613a:	4610      	mov	r0, r2
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   2613c:	f994 2001 	ldrsb.w	r2, [r4, #1]
   26140:	f894 9001 	ldrb.w	r9, [r4, #1]
	nonce[2] = pdu[2];
   26144:	f894 8002 	ldrb.w	r8, [r4, #2]
	nonce[3] = pdu[3];
   26148:	f894 e003 	ldrb.w	lr, [r4, #3]
	nonce[4] = pdu[4];
   2614c:	f894 c004 	ldrb.w	ip, [r4, #4]
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   26150:	2a00      	cmp	r2, #0
{
   26152:	460d      	mov	r5, r1
	nonce[6] = pdu[6];
   26154:	79a2      	ldrb	r2, [r4, #6]
	nonce[5] = pdu[5];
   26156:	7961      	ldrb	r1, [r4, #5]
{
   26158:	b089      	sub	sp, #36	; 0x24
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   2615a:	bfb4      	ite	lt
   2615c:	2608      	movlt	r6, #8
   2615e:	2604      	movge	r6, #4
	if (IS_ENABLED(CONFIG_BT_MESH_PROXY) && proxy) {
   26160:	b373      	cbz	r3, 261c0 <bt_mesh_net_encrypt+0x8e>
	nonce[0] = 0x03;
   26162:	2303      	movs	r3, #3
   26164:	f88d 3010 	strb.w	r3, [sp, #16]
	nonce[1] = 0x00;
   26168:	2300      	movs	r3, #0
   2616a:	f88d 3011 	strb.w	r3, [sp, #17]
	nonce[5] = pdu[5];
   2616e:	f88d 1015 	strb.w	r1, [sp, #21]
	sys_put_be32(iv_index, &nonce[9]);
   26172:	f10d 0119 	add.w	r1, sp, #25
	nonce[3] = pdu[3];
   26176:	f88d e013 	strb.w	lr, [sp, #19]
	nonce[4] = pdu[4];
   2617a:	f88d c014 	strb.w	ip, [sp, #20]
	nonce[6] = pdu[6];
   2617e:	f88d 2016 	strb.w	r2, [sp, #22]
	nonce[7] = 0U;
   26182:	f88d 3017 	strb.w	r3, [sp, #23]
	nonce[8] = 0U;
   26186:	f88d 3018 	strb.w	r3, [sp, #24]
	nonce[2] = pdu[2];
   2618a:	f88d 8012 	strb.w	r8, [sp, #18]
	sys_put_be32(iv_index, &nonce[9]);
   2618e:	f7ff ff4d 	bl	2602c <sys_put_be32>
	err = bt_ccm_encrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   26192:	682a      	ldr	r2, [r5, #0]
   26194:	88ab      	ldrh	r3, [r5, #4]
   26196:	3207      	adds	r2, #7
   26198:	2100      	movs	r1, #0
   2619a:	e9cd 1100 	strd	r1, r1, [sp]
   2619e:	e9cd 2602 	strd	r2, r6, [sp, #8]
   261a2:	3b07      	subs	r3, #7
   261a4:	a904      	add	r1, sp, #16
   261a6:	4638      	mov	r0, r7
   261a8:	f7fe f81f 	bl	241ea <bt_ccm_encrypt>
	if (!err) {
   261ac:	4604      	mov	r4, r0
   261ae:	b918      	cbnz	r0, 261b8 <bt_mesh_net_encrypt+0x86>
		net_buf_simple_add(buf, mic_len);
   261b0:	4631      	mov	r1, r6
   261b2:	4628      	mov	r0, r5
   261b4:	f002 f848 	bl	28248 <net_buf_simple_add>
}
   261b8:	4620      	mov	r0, r4
   261ba:	b009      	add	sp, #36	; 0x24
   261bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nonce[0] = 0x00;
   261c0:	f88d 3010 	strb.w	r3, [sp, #16]
	nonce[1] = pdu[1];
   261c4:	f88d 9011 	strb.w	r9, [sp, #17]
   261c8:	e7d1      	b.n	2616e <bt_mesh_net_encrypt+0x3c>

000261ca <bt_mesh_net_decrypt>:
{
   261ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   261ce:	680c      	ldr	r4, [r1, #0]
{
   261d0:	4606      	mov	r6, r0
   261d2:	4610      	mov	r0, r2
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   261d4:	f994 2001 	ldrsb.w	r2, [r4, #1]
   261d8:	f894 9001 	ldrb.w	r9, [r4, #1]
	nonce[2] = pdu[2];
   261dc:	f894 8002 	ldrb.w	r8, [r4, #2]
	nonce[3] = pdu[3];
   261e0:	f894 e003 	ldrb.w	lr, [r4, #3]
	nonce[4] = pdu[4];
   261e4:	f894 c004 	ldrb.w	ip, [r4, #4]
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   261e8:	2a00      	cmp	r2, #0
{
   261ea:	460d      	mov	r5, r1
	nonce[6] = pdu[6];
   261ec:	79a2      	ldrb	r2, [r4, #6]
	nonce[5] = pdu[5];
   261ee:	7961      	ldrb	r1, [r4, #5]
{
   261f0:	b089      	sub	sp, #36	; 0x24
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   261f2:	bfb4      	ite	lt
   261f4:	2708      	movlt	r7, #8
   261f6:	2704      	movge	r7, #4
	if (IS_ENABLED(CONFIG_BT_MESH_PROXY) && proxy) {
   261f8:	b353      	cbz	r3, 26250 <bt_mesh_net_decrypt+0x86>
	nonce[0] = 0x03;
   261fa:	2303      	movs	r3, #3
   261fc:	f88d 3010 	strb.w	r3, [sp, #16]
	nonce[1] = 0x00;
   26200:	2300      	movs	r3, #0
   26202:	f88d 3011 	strb.w	r3, [sp, #17]
	nonce[5] = pdu[5];
   26206:	f88d 1015 	strb.w	r1, [sp, #21]
	sys_put_be32(iv_index, &nonce[9]);
   2620a:	f10d 0119 	add.w	r1, sp, #25
	nonce[3] = pdu[3];
   2620e:	f88d e013 	strb.w	lr, [sp, #19]
	nonce[4] = pdu[4];
   26212:	f88d c014 	strb.w	ip, [sp, #20]
	nonce[6] = pdu[6];
   26216:	f88d 2016 	strb.w	r2, [sp, #22]
	nonce[7] = 0U;
   2621a:	f88d 3017 	strb.w	r3, [sp, #23]
	nonce[8] = 0U;
   2621e:	f88d 3018 	strb.w	r3, [sp, #24]
	nonce[2] = pdu[2];
   26222:	f88d 8012 	strb.w	r8, [sp, #18]
	sys_put_be32(iv_index, &nonce[9]);
   26226:	f7ff ff01 	bl	2602c <sys_put_be32>
	buf->len -= mic_len;
   2622a:	88ab      	ldrh	r3, [r5, #4]
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   2622c:	682a      	ldr	r2, [r5, #0]
	buf->len -= mic_len;
   2622e:	1bdb      	subs	r3, r3, r7
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   26230:	3207      	adds	r2, #7
	buf->len -= mic_len;
   26232:	b29b      	uxth	r3, r3
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   26234:	2100      	movs	r1, #0
   26236:	e9cd 1100 	strd	r1, r1, [sp]
	buf->len -= mic_len;
   2623a:	80ab      	strh	r3, [r5, #4]
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   2623c:	e9cd 2702 	strd	r2, r7, [sp, #8]
   26240:	3b07      	subs	r3, #7
   26242:	a904      	add	r1, sp, #16
   26244:	4630      	mov	r0, r6
   26246:	f7fd ffa1 	bl	2418c <bt_ccm_decrypt>
}
   2624a:	b009      	add	sp, #36	; 0x24
   2624c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nonce[0] = 0x00;
   26250:	f88d 3010 	strb.w	r3, [sp, #16]
	nonce[1] = pdu[1];
   26254:	f88d 9011 	strb.w	r9, [sp, #17]
   26258:	e7d5      	b.n	26206 <bt_mesh_net_decrypt+0x3c>

0002625a <bt_mesh_app_encrypt>:
{
   2625a:	b570      	push	{r4, r5, r6, lr}
   2625c:	460d      	mov	r5, r1
   2625e:	b088      	sub	sp, #32
   26260:	4606      	mov	r6, r0
	create_app_nonce(nonce, ctx);
   26262:	a804      	add	r0, sp, #16
{
   26264:	4614      	mov	r4, r2
	create_app_nonce(nonce, ctx);
   26266:	f7ff feea 	bl	2603e <create_app_nonce>
	err = bt_ccm_encrypt(key, nonce, buf->data, buf->len, ctx->ad,
   2626a:	692b      	ldr	r3, [r5, #16]
   2626c:	7868      	ldrb	r0, [r5, #1]
   2626e:	6822      	ldr	r2, [r4, #0]
   26270:	2b00      	cmp	r3, #0
   26272:	bf14      	ite	ne
   26274:	2110      	movne	r1, #16
   26276:	2100      	moveq	r1, #0
   26278:	2800      	cmp	r0, #0
   2627a:	bf14      	ite	ne
   2627c:	2008      	movne	r0, #8
   2627e:	2004      	moveq	r0, #4
   26280:	e9cd 3100 	strd	r3, r1, [sp]
   26284:	e9cd 2002 	strd	r2, r0, [sp, #8]
   26288:	88a3      	ldrh	r3, [r4, #4]
   2628a:	4630      	mov	r0, r6
   2628c:	a904      	add	r1, sp, #16
   2628e:	f7fd ffac 	bl	241ea <bt_ccm_encrypt>
	if (!err) {
   26292:	4606      	mov	r6, r0
   26294:	b938      	cbnz	r0, 262a6 <bt_mesh_app_encrypt+0x4c>
		net_buf_simple_add(buf, APP_MIC_LEN(ctx->aszmic));
   26296:	786b      	ldrb	r3, [r5, #1]
   26298:	2b00      	cmp	r3, #0
   2629a:	bf14      	ite	ne
   2629c:	2108      	movne	r1, #8
   2629e:	2104      	moveq	r1, #4
   262a0:	4620      	mov	r0, r4
   262a2:	f001 ffd1 	bl	28248 <net_buf_simple_add>
}
   262a6:	4630      	mov	r0, r6
   262a8:	b008      	add	sp, #32
   262aa:	bd70      	pop	{r4, r5, r6, pc}

000262ac <bt_mesh_app_decrypt>:
{
   262ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   262ae:	460d      	mov	r5, r1
   262b0:	b089      	sub	sp, #36	; 0x24
   262b2:	4607      	mov	r7, r0
	create_app_nonce(nonce, ctx);
   262b4:	a804      	add	r0, sp, #16
{
   262b6:	4614      	mov	r4, r2
   262b8:	461e      	mov	r6, r3
	create_app_nonce(nonce, ctx);
   262ba:	f7ff fec0 	bl	2603e <create_app_nonce>
	err = bt_ccm_decrypt(key, nonce, buf->data, buf->len, ctx->ad,
   262be:	692b      	ldr	r3, [r5, #16]
   262c0:	7868      	ldrb	r0, [r5, #1]
   262c2:	6831      	ldr	r1, [r6, #0]
   262c4:	2b00      	cmp	r3, #0
   262c6:	bf14      	ite	ne
   262c8:	2210      	movne	r2, #16
   262ca:	2200      	moveq	r2, #0
   262cc:	2800      	cmp	r0, #0
   262ce:	bf14      	ite	ne
   262d0:	2008      	movne	r0, #8
   262d2:	2004      	moveq	r0, #4
   262d4:	e9cd 1002 	strd	r1, r0, [sp, #8]
   262d8:	e9cd 3200 	strd	r3, r2, [sp]
   262dc:	a904      	add	r1, sp, #16
   262de:	88a3      	ldrh	r3, [r4, #4]
   262e0:	6822      	ldr	r2, [r4, #0]
   262e2:	4638      	mov	r0, r7
   262e4:	f7fd ff52 	bl	2418c <bt_ccm_decrypt>
	if (!err) {
   262e8:	4605      	mov	r5, r0
   262ea:	b918      	cbnz	r0, 262f4 <bt_mesh_app_decrypt+0x48>
		net_buf_simple_add(out, buf->len);
   262ec:	88a1      	ldrh	r1, [r4, #4]
   262ee:	4630      	mov	r0, r6
   262f0:	f001 ffaa 	bl	28248 <net_buf_simple_add>
}
   262f4:	4628      	mov	r0, r5
   262f6:	b009      	add	sp, #36	; 0x24
   262f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000262fa <bt_mesh_prov_conf_salt>:
{
   262fa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const uint8_t conf_salt_key[16] = { 0 };
   262fc:	2200      	movs	r2, #0
   262fe:	e9cd 2200 	strd	r2, r2, [sp]
   26302:	e9cd 2202 	strd	r2, r2, [sp, #8]
{
   26306:	460b      	mov	r3, r1
	return bt_mesh_aes_cmac_one(conf_salt_key, conf_inputs, 145, salt);
   26308:	2291      	movs	r2, #145	; 0x91
   2630a:	4601      	mov	r1, r0
   2630c:	4668      	mov	r0, sp
   2630e:	f7ff fed8 	bl	260c2 <bt_mesh_aes_cmac_one>
}
   26312:	b005      	add	sp, #20
   26314:	f85d fb04 	ldr.w	pc, [sp], #4

00026318 <bt_mesh_prov_conf>:

int bt_mesh_prov_conf(const uint8_t conf_key[16], const uint8_t rand[16],
		      const uint8_t auth[16], uint8_t conf[16])
{
   26318:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_mesh_sg sg[] = { { rand, 16 }, { auth, 16 } };
   2631a:	9100      	str	r1, [sp, #0]
   2631c:	2110      	movs	r1, #16
   2631e:	e9cd 1201 	strd	r1, r2, [sp, #4]
   26322:	9103      	str	r1, [sp, #12]

	BT_DBG("ConfirmationKey %s", bt_hex(conf_key, 16));
	BT_DBG("RandomDevice %s", bt_hex(rand, 16));
	BT_DBG("AuthValue %s", bt_hex(auth, 16));

	return bt_mesh_aes_cmac(conf_key, sg, ARRAY_SIZE(sg), conf);
   26324:	2202      	movs	r2, #2
   26326:	4669      	mov	r1, sp
   26328:	f7ff fea9 	bl	2607e <bt_mesh_aes_cmac>
}
   2632c:	b005      	add	sp, #20
   2632e:	f85d fb04 	ldr.w	pc, [sp], #4

00026332 <bt_mesh_prov_decrypt>:

int bt_mesh_prov_decrypt(const uint8_t key[16], uint8_t nonce[13],
			 const uint8_t data[25 + 8], uint8_t out[25])
{
   26332:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_ccm_decrypt(key, nonce, data, 25, NULL, 0, out, 8);
   26334:	2408      	movs	r4, #8
   26336:	e9cd 3402 	strd	r3, r4, [sp, #8]
   2633a:	2300      	movs	r3, #0
   2633c:	e9cd 3300 	strd	r3, r3, [sp]
   26340:	2319      	movs	r3, #25
   26342:	f7fd ff23 	bl	2418c <bt_ccm_decrypt>
}
   26346:	b004      	add	sp, #16
   26348:	bd10      	pop	{r4, pc}

0002634a <bt_mesh_beacon_auth>:
}

int bt_mesh_beacon_auth(const uint8_t beacon_key[16], uint8_t flags,
			const uint8_t net_id[8], uint32_t iv_index,
			uint8_t auth[8])
{
   2634a:	b530      	push	{r4, r5, lr}
   2634c:	b089      	sub	sp, #36	; 0x24
   2634e:	4604      	mov	r4, r0
   26350:	4608      	mov	r0, r1
   26352:	461d      	mov	r5, r3
   26354:	4611      	mov	r1, r2

	BT_DBG("BeaconKey %s", bt_hex(beacon_key, 16));
	BT_DBG("NetId %s", bt_hex(net_id, 8));
	BT_DBG("IV Index 0x%08x", iv_index);

	msg[0] = flags;
   26356:	f88d 0000 	strb.w	r0, [sp]
	memcpy(&msg[1], net_id, 8);
   2635a:	2208      	movs	r2, #8
   2635c:	f10d 0001 	add.w	r0, sp, #1
   26360:	f7fd fd22 	bl	23da8 <memcpy>
	sys_put_be32(iv_index, &msg[9]);
   26364:	f10d 0109 	add.w	r1, sp, #9
   26368:	4628      	mov	r0, r5
   2636a:	f7ff fe5f 	bl	2602c <sys_put_be32>

	BT_DBG("BeaconMsg %s", bt_hex(msg, sizeof(msg)));

	err = bt_mesh_aes_cmac_one(beacon_key, msg, sizeof(msg), tmp);
   2636e:	4620      	mov	r0, r4
   26370:	ab04      	add	r3, sp, #16
   26372:	220d      	movs	r2, #13
   26374:	4669      	mov	r1, sp
   26376:	f7ff fea4 	bl	260c2 <bt_mesh_aes_cmac_one>
	if (!err) {
   2637a:	4604      	mov	r4, r0
   2637c:	b920      	cbnz	r0, 26388 <bt_mesh_beacon_auth+0x3e>
		memcpy(auth, tmp, 8);
   2637e:	980c      	ldr	r0, [sp, #48]	; 0x30
   26380:	2208      	movs	r2, #8
   26382:	a904      	add	r1, sp, #16
   26384:	f7fd fd10 	bl	23da8 <memcpy>
	}

	return err;
}
   26388:	4620      	mov	r0, r4
   2638a:	b009      	add	sp, #36	; 0x24
   2638c:	bd30      	pop	{r4, r5, pc}

0002638e <k_uptime_get_32>:
{
   2638e:	b508      	push	{r3, lr}
   26390:	f002 fed0 	bl	29134 <z_impl_k_uptime_ticks>
   26394:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   26398:	fba0 3002 	umull	r3, r0, r0, r2
   2639c:	fb02 0101 	mla	r1, r2, r1, r0
   263a0:	0bd8      	lsrs	r0, r3, #15
}
   263a2:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   263a6:	bd08      	pop	{r3, pc}

000263a8 <find_group_mod_visitor>:
	if (mod->elem_idx != ctx->mod->elem_idx) {
   263a8:	684b      	ldr	r3, [r1, #4]
   263aa:	7902      	ldrb	r2, [r0, #4]
   263ac:	791b      	ldrb	r3, [r3, #4]
   263ae:	429a      	cmp	r2, r3
   263b0:	d001      	beq.n	263b6 <find_group_mod_visitor+0xe>
	return BT_MESH_WALK_CONTINUE;
   263b2:	2001      	movs	r0, #1
   263b4:	4770      	bx	lr
	ctx->entry = model_group_get(mod, ctx->addr);
   263b6:	890b      	ldrh	r3, [r1, #8]
		if (mod->groups[i] == addr) {
   263b8:	8a02      	ldrh	r2, [r0, #16]
   263ba:	429a      	cmp	r2, r3
   263bc:	d005      	beq.n	263ca <find_group_mod_visitor+0x22>
   263be:	8a42      	ldrh	r2, [r0, #18]
   263c0:	429a      	cmp	r2, r3
   263c2:	d00c      	beq.n	263de <find_group_mod_visitor+0x36>
	ctx->entry = model_group_get(mod, ctx->addr);
   263c4:	2300      	movs	r3, #0
   263c6:	600b      	str	r3, [r1, #0]
   263c8:	e7f3      	b.n	263b2 <find_group_mod_visitor+0xa>
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
   263ca:	2300      	movs	r3, #0
			return &mod->groups[i];
   263cc:	3308      	adds	r3, #8
   263ce:	eb00 0343 	add.w	r3, r0, r3, lsl #1
	ctx->entry = model_group_get(mod, ctx->addr);
   263d2:	600b      	str	r3, [r1, #0]
	if (ctx->entry) {
   263d4:	2b00      	cmp	r3, #0
   263d6:	d0ec      	beq.n	263b2 <find_group_mod_visitor+0xa>
		ctx->mod = mod;
   263d8:	6048      	str	r0, [r1, #4]
		return BT_MESH_WALK_STOP;
   263da:	2000      	movs	r0, #0
}
   263dc:	4770      	bx	lr
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
   263de:	2301      	movs	r3, #1
   263e0:	e7f4      	b.n	263cc <find_group_mod_visitor+0x24>

000263e2 <commit_mod>:
{
   263e2:	b570      	push	{r4, r5, r6, lr}
	if (mod->pub && mod->pub->update &&
   263e4:	6885      	ldr	r5, [r0, #8]
   263e6:	b1dd      	cbz	r5, 26420 <commit_mod+0x3e>
   263e8:	696b      	ldr	r3, [r5, #20]
   263ea:	b1cb      	cbz	r3, 26420 <commit_mod+0x3e>
   263ec:	88ab      	ldrh	r3, [r5, #4]
   263ee:	b1bb      	cbz	r3, 26420 <commit_mod+0x3e>
		int32_t ms = bt_mesh_model_pub_period_get(mod);
   263f0:	f7e9 fe38 	bl	10064 <bt_mesh_model_pub_period_get>
		if (ms > 0) {
   263f4:	1e04      	subs	r4, r0, #0
   263f6:	dd13      	ble.n	26420 <commit_mod+0x3e>
   263f8:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   263fc:	f240 30e7 	movw	r0, #999	; 0x3e7
   26400:	2100      	movs	r1, #0
   26402:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   26406:	2300      	movs	r3, #0
   26408:	fbc4 0106 	smlal	r0, r1, r4, r6
   2640c:	f7d9 feb8 	bl	180 <__aeabi_uldivmod>
   26410:	4602      	mov	r2, r0
   26412:	460b      	mov	r3, r1
			k_work_schedule(&mod->pub->timer, K_MSEC(ms));
   26414:	f105 0018 	add.w	r0, r5, #24
}
   26418:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&mod->pub->timer, K_MSEC(ms));
   2641c:	f7f9 bfce 	b.w	203bc <k_work_schedule>
}
   26420:	bd70      	pop	{r4, r5, r6, pc}

00026422 <sig_mod_set>:
{
   26422:	b507      	push	{r0, r1, r2, lr}
	return mod_set(false, name, len_rd, read_cb, cb_arg);
   26424:	9300      	str	r3, [sp, #0]
   26426:	4613      	mov	r3, r2
   26428:	460a      	mov	r2, r1
   2642a:	4601      	mov	r1, r0
   2642c:	2000      	movs	r0, #0
   2642e:	f7e9 ff8f 	bl	10350 <mod_set>
}
   26432:	b003      	add	sp, #12
   26434:	f85d fb04 	ldr.w	pc, [sp], #4

00026438 <vnd_mod_set>:
{
   26438:	b507      	push	{r0, r1, r2, lr}
	return mod_set(true, name, len_rd, read_cb, cb_arg);
   2643a:	9300      	str	r3, [sp, #0]
   2643c:	4613      	mov	r3, r2
   2643e:	460a      	mov	r2, r1
   26440:	4601      	mov	r1, r0
   26442:	2001      	movs	r0, #1
   26444:	f7e9 ff84 	bl	10350 <mod_set>
}
   26448:	b003      	add	sp, #12
   2644a:	f85d fb04 	ldr.w	pc, [sp], #4

0002644e <bt_mesh_model_has_key>:
		if (mod->keys[i] == key ||
   2644e:	8983      	ldrh	r3, [r0, #12]
   26450:	4299      	cmp	r1, r3
   26452:	d015      	beq.n	26480 <bt_mesh_model_has_key+0x32>
   26454:	f64f 72fc 	movw	r2, #65532	; 0xfffc
   26458:	4293      	cmp	r3, r2
   2645a:	d103      	bne.n	26464 <bt_mesh_model_has_key+0x16>
		     BT_MESH_IS_DEV_KEY(key))) {
   2645c:	1ccb      	adds	r3, r1, #3
		    (mod->keys[i] == BT_MESH_KEY_DEV_ANY &&
   2645e:	b29b      	uxth	r3, r3
   26460:	2b01      	cmp	r3, #1
   26462:	d90d      	bls.n	26480 <bt_mesh_model_has_key+0x32>
		if (mod->keys[i] == key ||
   26464:	89c3      	ldrh	r3, [r0, #14]
   26466:	4299      	cmp	r1, r3
   26468:	d00a      	beq.n	26480 <bt_mesh_model_has_key+0x32>
   2646a:	f64f 72fc 	movw	r2, #65532	; 0xfffc
   2646e:	4293      	cmp	r3, r2
   26470:	d108      	bne.n	26484 <bt_mesh_model_has_key+0x36>
		     BT_MESH_IS_DEV_KEY(key))) {
   26472:	1cc8      	adds	r0, r1, #3
		    (mod->keys[i] == BT_MESH_KEY_DEV_ANY &&
   26474:	b280      	uxth	r0, r0
   26476:	2801      	cmp	r0, #1
   26478:	bf8c      	ite	hi
   2647a:	2000      	movhi	r0, #0
   2647c:	2001      	movls	r0, #1
   2647e:	4770      	bx	lr
			return true;
   26480:	2001      	movs	r0, #1
   26482:	4770      	bx	lr
	return false;
   26484:	2000      	movs	r0, #0
}
   26486:	4770      	bx	lr

00026488 <bt_mesh_model_find_vnd>:
{
   26488:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0U; i < elem->vnd_model_count; i++) {
   2648a:	7947      	ldrb	r7, [r0, #5]
{
   2648c:	4604      	mov	r4, r0
	for (i = 0U; i < elem->vnd_model_count; i++) {
   2648e:	2300      	movs	r3, #0
   26490:	b2d8      	uxtb	r0, r3
   26492:	4287      	cmp	r7, r0
   26494:	d801      	bhi.n	2649a <bt_mesh_model_find_vnd+0x12>
	return NULL;
   26496:	2000      	movs	r0, #0
}
   26498:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (elem->vnd_models[i].vnd.company == company &&
   2649a:	68e6      	ldr	r6, [r4, #12]
   2649c:	015d      	lsls	r5, r3, #5
   2649e:	eb06 1043 	add.w	r0, r6, r3, lsl #5
   264a2:	5b75      	ldrh	r5, [r6, r5]
   264a4:	428d      	cmp	r5, r1
   264a6:	d102      	bne.n	264ae <bt_mesh_model_find_vnd+0x26>
   264a8:	8845      	ldrh	r5, [r0, #2]
   264aa:	4295      	cmp	r5, r2
   264ac:	d0f4      	beq.n	26498 <bt_mesh_model_find_vnd+0x10>
	for (i = 0U; i < elem->vnd_model_count; i++) {
   264ae:	3301      	adds	r3, #1
   264b0:	e7ee      	b.n	26490 <bt_mesh_model_find_vnd+0x8>

000264b2 <bt_mesh_model_find>:
{
   264b2:	b570      	push	{r4, r5, r6, lr}
	for (i = 0U; i < elem->model_count; i++) {
   264b4:	7906      	ldrb	r6, [r0, #4]
{
   264b6:	4602      	mov	r2, r0
	for (i = 0U; i < elem->model_count; i++) {
   264b8:	2300      	movs	r3, #0
   264ba:	b2d8      	uxtb	r0, r3
   264bc:	4286      	cmp	r6, r0
   264be:	d801      	bhi.n	264c4 <bt_mesh_model_find+0x12>
	return NULL;
   264c0:	2000      	movs	r0, #0
   264c2:	e008      	b.n	264d6 <bt_mesh_model_find+0x24>
		if (elem->models[i].id == id) {
   264c4:	6895      	ldr	r5, [r2, #8]
   264c6:	015c      	lsls	r4, r3, #5
   264c8:	eb05 1043 	add.w	r0, r5, r3, lsl #5
   264cc:	5b2c      	ldrh	r4, [r5, r4]
   264ce:	428c      	cmp	r4, r1
   264d0:	f103 0301 	add.w	r3, r3, #1
   264d4:	d1f1      	bne.n	264ba <bt_mesh_model_find+0x8>
}
   264d6:	bd70      	pop	{r4, r5, r6, pc}

000264d8 <bt_mesh_model_extensions_walk>:
{
   264d8:	460b      	mov	r3, r1
	(void)cb(model, user_data);
   264da:	4611      	mov	r1, r2
   264dc:	4718      	bx	r3

000264de <bt_mesh_model_bind_store>:
	mod->flags |= BT_MESH_MOD_BIND_PENDING;
   264de:	88c3      	ldrh	r3, [r0, #6]
   264e0:	f043 0301 	orr.w	r3, r3, #1
   264e4:	80c3      	strh	r3, [r0, #6]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_MOD_PENDING);
   264e6:	2008      	movs	r0, #8
   264e8:	f7ec bfd0 	b.w	1348c <bt_mesh_settings_store_schedule>

000264ec <bt_mesh_model_sub_store>:
	mod->flags |= BT_MESH_MOD_SUB_PENDING;
   264ec:	88c3      	ldrh	r3, [r0, #6]
   264ee:	f043 0302 	orr.w	r3, r3, #2
   264f2:	80c3      	strh	r3, [r0, #6]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_MOD_PENDING);
   264f4:	2008      	movs	r0, #8
   264f6:	f7ec bfc9 	b.w	1348c <bt_mesh_settings_store_schedule>

000264fa <bt_mesh_model_pub_store>:
	mod->flags |= BT_MESH_MOD_PUB_PENDING;
   264fa:	88c3      	ldrh	r3, [r0, #6]
   264fc:	f043 0304 	orr.w	r3, r3, #4
   26500:	80c3      	strh	r3, [r0, #6]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_MOD_PENDING);
   26502:	2008      	movs	r0, #8
   26504:	f7ec bfc2 	b.w	1348c <bt_mesh_settings_store_schedule>

00026508 <bt_mesh_model_msg_init>:
#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_MESH_DEBUG_ACCESS)
#define LOG_MODULE_NAME bt_mesh_msg
#include "common/log.h"

void bt_mesh_model_msg_init(struct net_buf_simple *msg, uint32_t opcode)
{
   26508:	b538      	push	{r3, r4, r5, lr}
	if (!buf->__buf) {
   2650a:	6883      	ldr	r3, [r0, #8]
   2650c:	4604      	mov	r4, r0
   2650e:	b913      	cbnz	r3, 26516 <bt_mesh_model_msg_init+0xe>
		buf->__buf = (uint8_t *)buf + sizeof(*buf);
   26510:	f100 030c 	add.w	r3, r0, #12
   26514:	6083      	str	r3, [r0, #8]
	buf->data = buf->__buf + reserve_head;
   26516:	68a3      	ldr	r3, [r4, #8]
   26518:	6023      	str	r3, [r4, #0]
	net_buf_simple_init(msg, 0);

	switch (BT_MESH_MODEL_OP_LEN(opcode)) {
   2651a:	29ff      	cmp	r1, #255	; 0xff
	buf->len = 0U;
   2651c:	f04f 0300 	mov.w	r3, #0
   26520:	80a3      	strh	r3, [r4, #4]
   26522:	d805      	bhi.n	26530 <bt_mesh_model_msg_init+0x28>
	case 1:
		net_buf_simple_add_u8(msg, opcode);
   26524:	4620      	mov	r0, r4
   26526:	b2c9      	uxtb	r1, r1
		break;
	default:
		BT_WARN("Unknown opcode format");
		break;
	}
}
   26528:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_simple_add_u8(msg, opcode);
   2652c:	f001 be9b 	b.w	28266 <net_buf_simple_add_u8>
	switch (BT_MESH_MODEL_OP_LEN(opcode)) {
   26530:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
		net_buf_simple_add_be16(msg, opcode);
   26534:	b28d      	uxth	r5, r1
	switch (BT_MESH_MODEL_OP_LEN(opcode)) {
   26536:	d205      	bcs.n	26544 <bt_mesh_model_msg_init+0x3c>
		net_buf_simple_add_be16(msg, opcode);
   26538:	4629      	mov	r1, r5
   2653a:	4620      	mov	r0, r4
}
   2653c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_simple_add_be16(msg, opcode);
   26540:	f001 bea3 	b.w	2828a <net_buf_simple_add_be16>
		net_buf_simple_add_u8(msg, ((opcode >> 16) & 0xff));
   26544:	f3c1 4107 	ubfx	r1, r1, #16, #8
   26548:	4620      	mov	r0, r4
   2654a:	f001 fe8c 	bl	28266 <net_buf_simple_add_u8>
		net_buf_simple_add_le16(msg, opcode & 0xffff);
   2654e:	4629      	mov	r1, r5
   26550:	4620      	mov	r0, r4
}
   26552:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_simple_add_le16(msg, opcode & 0xffff);
   26556:	f001 be8e 	b.w	28276 <net_buf_simple_add_le16>

0002655a <bt_mesh_msg_ack_ctx_match>:
	return err;
}

bool bt_mesh_msg_ack_ctx_match(const struct bt_mesh_msg_ack_ctx *ack,
			       uint32_t op, uint16_t addr, void **user_data)
{
   2655a:	b510      	push	{r4, lr}
	if (ack->op != op || (BT_MESH_ADDR_IS_UNICAST(ack->dst) && ack->dst != addr)) {
   2655c:	6984      	ldr	r4, [r0, #24]
   2655e:	428c      	cmp	r4, r1
   26560:	d10b      	bne.n	2657a <bt_mesh_msg_ack_ctx_match+0x20>
   26562:	f9b0 401c 	ldrsh.w	r4, [r0, #28]
   26566:	8b81      	ldrh	r1, [r0, #28]
   26568:	2c00      	cmp	r4, #0
   2656a:	dd01      	ble.n	26570 <bt_mesh_msg_ack_ctx_match+0x16>
   2656c:	4291      	cmp	r1, r2
   2656e:	d104      	bne.n	2657a <bt_mesh_msg_ack_ctx_match+0x20>
		return false;
	}

	if (user_data != NULL) {
   26570:	b10b      	cbz	r3, 26576 <bt_mesh_msg_ack_ctx_match+0x1c>
		*user_data = ack->user_data;
   26572:	6a02      	ldr	r2, [r0, #32]
   26574:	601a      	str	r2, [r3, #0]
	}

	return true;
   26576:	2001      	movs	r0, #1
   26578:	e000      	b.n	2657c <bt_mesh_msg_ack_ctx_match+0x22>
		return false;
   2657a:	2000      	movs	r0, #0
}
   2657c:	bd10      	pop	{r4, pc}

0002657e <key_idx_pack>:

#include <sys/byteorder.h>

static inline void key_idx_pack(struct net_buf_simple *buf,
				uint16_t idx1, uint16_t idx2)
{
   2657e:	b538      	push	{r3, r4, r5, lr}
	net_buf_simple_add_le16(buf, idx1 | ((idx2 & 0x00f) << 12));
   26580:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
{
   26584:	4605      	mov	r5, r0
   26586:	4614      	mov	r4, r2
	net_buf_simple_add_le16(buf, idx1 | ((idx2 & 0x00f) << 12));
   26588:	b289      	uxth	r1, r1
   2658a:	f001 fe74 	bl	28276 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(buf, idx2 >> 4);
   2658e:	f3c4 1107 	ubfx	r1, r4, #4, #8
   26592:	4628      	mov	r0, r5
}
   26594:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_simple_add_u8(buf, idx2 >> 4);
   26598:	f001 be65 	b.w	28266 <net_buf_simple_add_u8>

0002659c <mod_sub_clear_visitor>:
{
   2659c:	b508      	push	{r3, lr}
	mod_sub_list_clear(mod);
   2659e:	f7ea fae7 	bl	10b70 <mod_sub_list_clear>
}
   265a2:	2001      	movs	r0, #1
   265a4:	bd08      	pop	{r3, pc}

000265a6 <reset_send_end>:
	bt_mesh_reset();
   265a6:	f7e4 bfc3 	b.w	b530 <bt_mesh_reset>

000265aa <mod_reset>:
{
   265aa:	b510      	push	{r4, lr}
   265ac:	4604      	mov	r4, r0
	clear_count = mod_sub_list_clear(mod);
   265ae:	f7ea fadf 	bl	10b70 <mod_sub_list_clear>
		if (clear_count) {
   265b2:	b110      	cbz	r0, 265ba <mod_reset+0x10>
			bt_mesh_model_sub_store(mod);
   265b4:	4620      	mov	r0, r4
   265b6:	f7ff ff99 	bl	264ec <bt_mesh_model_sub_store>
	if (mod->cb && mod->cb->reset) {
   265ba:	69a3      	ldr	r3, [r4, #24]
   265bc:	b12b      	cbz	r3, 265ca <mod_reset+0x20>
   265be:	68db      	ldr	r3, [r3, #12]
   265c0:	b11b      	cbz	r3, 265ca <mod_reset+0x20>
		mod->cb->reset(mod);
   265c2:	4620      	mov	r0, r4
}
   265c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mod->cb->reset(mod);
   265c8:	4718      	bx	r3
}
   265ca:	bd10      	pop	{r4, pc}

000265cc <key_idx_unpack>:

static inline void key_idx_unpack(struct net_buf_simple *buf,
				  uint16_t *idx1, uint16_t *idx2)
{
   265cc:	b410      	push	{r4}
	*idx1 = sys_get_le16(&buf->data[0]) & 0xfff;
   265ce:	6804      	ldr	r4, [r0, #0]
   265d0:	8823      	ldrh	r3, [r4, #0]
   265d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
   265d6:	800b      	strh	r3, [r1, #0]
	*idx2 = sys_get_le16(&buf->data[1]) >> 4;
   265d8:	f8b4 3001 	ldrh.w	r3, [r4, #1]
	net_buf_simple_pull(buf, 3);
}
   265dc:	bc10      	pop	{r4}
	*idx2 = sys_get_le16(&buf->data[1]) >> 4;
   265de:	091b      	lsrs	r3, r3, #4
   265e0:	8013      	strh	r3, [r2, #0]
	net_buf_simple_pull(buf, 3);
   265e2:	2103      	movs	r1, #3
   265e4:	f001 bea0 	b.w	28328 <net_buf_simple_pull>

000265e8 <app_key_del>:
{
   265e8:	b530      	push	{r4, r5, lr}
   265ea:	b085      	sub	sp, #20
   265ec:	4604      	mov	r4, r0
   265ee:	460d      	mov	r5, r1
   265f0:	4610      	mov	r0, r2
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   265f2:	a903      	add	r1, sp, #12
   265f4:	f10d 020e 	add.w	r2, sp, #14
   265f8:	f7ff ffe8 	bl	265cc <key_idx_unpack>
	status = bt_mesh_app_key_del(key_app_idx, key_net_idx);
   265fc:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   26600:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   26604:	f7ff fb91 	bl	25d2a <bt_mesh_app_key_del>
	return send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   26608:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   2660c:	9300      	str	r3, [sp, #0]
	status = bt_mesh_app_key_del(key_app_idx, key_net_idx);
   2660e:	4602      	mov	r2, r0
	return send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   26610:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   26614:	4629      	mov	r1, r5
   26616:	4620      	mov	r0, r4
   26618:	f7ea fae0 	bl	10bdc <send_app_key_status>
}
   2661c:	b005      	add	sp, #20
   2661e:	bd30      	pop	{r4, r5, pc}

00026620 <app_key_update>:
{
   26620:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   26622:	4614      	mov	r4, r2
   26624:	4605      	mov	r5, r0
   26626:	460e      	mov	r6, r1
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   26628:	f10d 020e 	add.w	r2, sp, #14
   2662c:	a903      	add	r1, sp, #12
   2662e:	4620      	mov	r0, r4
   26630:	f7ff ffcc 	bl	265cc <key_idx_unpack>
	status = bt_mesh_app_key_update(key_app_idx, key_net_idx, buf->data);
   26634:	6822      	ldr	r2, [r4, #0]
   26636:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   2663a:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   2663e:	f7ff fb33 	bl	25ca8 <bt_mesh_app_key_update>
	return send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   26642:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   26646:	9300      	str	r3, [sp, #0]
	status = bt_mesh_app_key_update(key_app_idx, key_net_idx, buf->data);
   26648:	4602      	mov	r2, r0
	return send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   2664a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   2664e:	4631      	mov	r1, r6
   26650:	4628      	mov	r0, r5
   26652:	f7ea fac3 	bl	10bdc <send_app_key_status>
}
   26656:	b004      	add	sp, #16
   26658:	bd70      	pop	{r4, r5, r6, pc}

0002665a <app_key_add>:
{
   2665a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2665c:	4614      	mov	r4, r2
   2665e:	4605      	mov	r5, r0
   26660:	460e      	mov	r6, r1
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   26662:	f10d 020e 	add.w	r2, sp, #14
   26666:	a903      	add	r1, sp, #12
   26668:	4620      	mov	r0, r4
   2666a:	f7ff ffaf 	bl	265cc <key_idx_unpack>
	status = bt_mesh_app_key_add(key_app_idx, key_net_idx, buf->data);
   2666e:	6822      	ldr	r2, [r4, #0]
   26670:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   26674:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   26678:	f7ff fad8 	bl	25c2c <bt_mesh_app_key_add>
	return send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   2667c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   26680:	9300      	str	r3, [sp, #0]
	status = bt_mesh_app_key_add(key_app_idx, key_net_idx, buf->data);
   26682:	4602      	mov	r2, r0
	return send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   26684:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   26688:	4631      	mov	r1, r6
   2668a:	4628      	mov	r0, r5
   2668c:	f7ea faa6 	bl	10bdc <send_app_key_status>
}
   26690:	b004      	add	sp, #16
   26692:	bd70      	pop	{r4, r5, r6, pc}

00026694 <bt_mesh_hb_pwr2>:
	if (!val) {
   26694:	b158      	cbz	r0, 266ae <bt_mesh_hb_pwr2+0x1a>
	} else if (val == 0xff || val == 0x11) {
   26696:	28ff      	cmp	r0, #255	; 0xff
   26698:	d007      	beq.n	266aa <bt_mesh_hb_pwr2+0x16>
   2669a:	2811      	cmp	r0, #17
   2669c:	d005      	beq.n	266aa <bt_mesh_hb_pwr2+0x16>
		return (1 << (val - 1));
   2669e:	2301      	movs	r3, #1
   266a0:	3801      	subs	r0, #1
   266a2:	fa03 f000 	lsl.w	r0, r3, r0
   266a6:	b280      	uxth	r0, r0
   266a8:	4770      	bx	lr
		return 0xffff;
   266aa:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
   266ae:	4770      	bx	lr

000266b0 <friend_get>:
	return send_friend_status(model, ctx);
   266b0:	f7eb b8a0 	b.w	117f4 <send_friend_status>

000266b4 <get_model>:
{
   266b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < 4) {
   266b6:	888b      	ldrh	r3, [r1, #4]
   266b8:	2b03      	cmp	r3, #3
{
   266ba:	4605      	mov	r5, r0
   266bc:	460c      	mov	r4, r1
   266be:	4616      	mov	r6, r2
		id = net_buf_simple_pull_le16(buf);
   266c0:	4608      	mov	r0, r1
	if (buf->len < 4) {
   266c2:	d809      	bhi.n	266d8 <get_model+0x24>
		id = net_buf_simple_pull_le16(buf);
   266c4:	f001 fe48 	bl	28358 <net_buf_simple_pull_le16>
		*vnd = false;
   266c8:	2300      	movs	r3, #0
		id = net_buf_simple_pull_le16(buf);
   266ca:	4601      	mov	r1, r0
		*vnd = false;
   266cc:	7033      	strb	r3, [r6, #0]
		return bt_mesh_model_find(elem, id);
   266ce:	4628      	mov	r0, r5
}
   266d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return bt_mesh_model_find(elem, id);
   266d4:	f7ff beed 	b.w	264b2 <bt_mesh_model_find>
		company = net_buf_simple_pull_le16(buf);
   266d8:	f001 fe3e 	bl	28358 <net_buf_simple_pull_le16>
   266dc:	4607      	mov	r7, r0
		id = net_buf_simple_pull_le16(buf);
   266de:	4620      	mov	r0, r4
   266e0:	f001 fe3a 	bl	28358 <net_buf_simple_pull_le16>
		*vnd = true;
   266e4:	2301      	movs	r3, #1
		id = net_buf_simple_pull_le16(buf);
   266e6:	4602      	mov	r2, r0
		*vnd = true;
   266e8:	7033      	strb	r3, [r6, #0]
		return bt_mesh_model_find_vnd(elem, company, id);
   266ea:	4639      	mov	r1, r7
   266ec:	4628      	mov	r0, r5
}
   266ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return bt_mesh_model_find_vnd(elem, company, id);
   266f2:	f7ff bec9 	b.w	26488 <bt_mesh_model_find_vnd>

000266f6 <gatt_proxy_get>:
	return send_gatt_proxy_status(model, ctx);
   266f6:	f7eb bd83 	b.w	12200 <send_gatt_proxy_status>

000266fa <create_mod_app_status.constprop.0>:
static void create_mod_app_status(struct net_buf_simple *msg,
   266fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   266fe:	f89d 9020 	ldrb.w	r9, [sp, #32]
   26702:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   26706:	4604      	mov	r4, r0
   26708:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(msg, OP_MOD_APP_STATUS);
   2670a:	f248 013e 	movw	r1, #32830	; 0x803e
static void create_mod_app_status(struct net_buf_simple *msg,
   2670e:	4617      	mov	r7, r2
   26710:	461e      	mov	r6, r3
	bt_mesh_model_msg_init(msg, OP_MOD_APP_STATUS);
   26712:	f7ff fef9 	bl	26508 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, status);
   26716:	4649      	mov	r1, r9
   26718:	4620      	mov	r0, r4
   2671a:	f001 fda4 	bl	28266 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, elem_addr);
   2671e:	4639      	mov	r1, r7
   26720:	4620      	mov	r0, r4
   26722:	f001 fda8 	bl	28276 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(msg, app_idx);
   26726:	4631      	mov	r1, r6
   26728:	4620      	mov	r0, r4
   2672a:	f001 fda4 	bl	28276 <net_buf_simple_add_le16>
	if (vnd) {
   2672e:	b14d      	cbz	r5, 26744 <create_mod_app_status.constprop.0+0x4a>
		memcpy(net_buf_simple_add(msg, 4), mod_id, 4);
   26730:	2104      	movs	r1, #4
   26732:	4620      	mov	r0, r4
   26734:	f001 fd88 	bl	28248 <net_buf_simple_add>
   26738:	2204      	movs	r2, #4
		memcpy(net_buf_simple_add(msg, 2), mod_id, 2);
   2673a:	4641      	mov	r1, r8
}
   2673c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		memcpy(net_buf_simple_add(msg, 2), mod_id, 2);
   26740:	f7fd bb32 	b.w	23da8 <memcpy>
   26744:	2102      	movs	r1, #2
   26746:	4620      	mov	r0, r4
   26748:	f001 fd7e 	bl	28248 <net_buf_simple_add>
   2674c:	2202      	movs	r2, #2
   2674e:	e7f4      	b.n	2673a <create_mod_app_status.constprop.0+0x40>

00026750 <_mod_pub_set.constprop.0>:
static uint8_t _mod_pub_set(struct bt_mesh_model *model, uint16_t pub_addr,
   26750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26754:	4604      	mov	r4, r0
	if (!model->pub) {
   26756:	6880      	ldr	r0, [r0, #8]
static uint8_t _mod_pub_set(struct bt_mesh_model *model, uint16_t pub_addr,
   26758:	f89d 701c 	ldrb.w	r7, [sp, #28]
   2675c:	460e      	mov	r6, r1
   2675e:	4690      	mov	r8, r2
   26760:	461d      	mov	r5, r3
	if (!model->pub) {
   26762:	2800      	cmp	r0, #0
   26764:	d065      	beq.n	26832 <_mod_pub_set.constprop.0+0xe2>
	if (!IS_ENABLED(CONFIG_BT_MESH_LOW_POWER) && cred_flag) {
   26766:	2b00      	cmp	r3, #0
   26768:	d161      	bne.n	2682e <_mod_pub_set.constprop.0+0xde>
	if (!model->pub->update && period) {
   2676a:	6942      	ldr	r2, [r0, #20]
   2676c:	b90a      	cbnz	r2, 26772 <_mod_pub_set.constprop.0+0x22>
   2676e:	2f00      	cmp	r7, #0
   26770:	d15f      	bne.n	26832 <_mod_pub_set.constprop.0+0xe2>
	if (pub_addr == BT_MESH_ADDR_UNASSIGNED) {
   26772:	b99e      	cbnz	r6, 2679c <_mod_pub_set.constprop.0+0x4c>
		if (model->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
   26774:	8883      	ldrh	r3, [r0, #4]
   26776:	b173      	cbz	r3, 26796 <_mod_pub_set.constprop.0+0x46>
		model->pub->addr = BT_MESH_ADDR_UNASSIGNED;
   26778:	6843      	ldr	r3, [r0, #4]
   2677a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   2677e:	6043      	str	r3, [r0, #4]
		model->pub->ttl = 0U;
   26780:	6883      	ldr	r3, [r0, #8]
   26782:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
   26786:	6083      	str	r3, [r0, #8]
		if (model->pub->update) {
   26788:	b112      	cbz	r2, 26790 <_mod_pub_set.constprop.0+0x40>
			(void)k_work_cancel_delayable(&model->pub->timer);
   2678a:	3018      	adds	r0, #24
   2678c:	f002 fb29 	bl	28de2 <k_work_cancel_delayable>
			bt_mesh_model_pub_store(model);
   26790:	4620      	mov	r0, r4
   26792:	f7ff feb2 	bl	264fa <bt_mesh_model_pub_store>
}
   26796:	4628      	mov	r0, r5
   26798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_mesh_app_key_exists(app_idx) || !bt_mesh_model_has_key(model, app_idx)) {
   2679c:	4640      	mov	r0, r8
   2679e:	f7e7 f921 	bl	d9e4 <bt_mesh_app_key_exists>
   267a2:	b908      	cbnz	r0, 267a8 <_mod_pub_set.constprop.0+0x58>
		return STATUS_INVALID_APPKEY;
   267a4:	2503      	movs	r5, #3
   267a6:	e7f6      	b.n	26796 <_mod_pub_set.constprop.0+0x46>
	if (!bt_mesh_app_key_exists(app_idx) || !bt_mesh_model_has_key(model, app_idx)) {
   267a8:	4641      	mov	r1, r8
   267aa:	4620      	mov	r0, r4
   267ac:	f7ff fe4f 	bl	2644e <bt_mesh_model_has_key>
   267b0:	2800      	cmp	r0, #0
   267b2:	d0f7      	beq.n	267a4 <_mod_pub_set.constprop.0+0x54>
	if (BT_MESH_ADDR_IS_VIRTUAL(model->pub->addr)) {
   267b4:	68a3      	ldr	r3, [r4, #8]
   267b6:	8898      	ldrh	r0, [r3, #4]
   267b8:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
   267bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   267c0:	d205      	bcs.n	267ce <_mod_pub_set.constprop.0+0x7e>
		uint8_t *uuid = bt_mesh_va_label_get(model->pub->addr);
   267c2:	f7e7 ffe5 	bl	e790 <bt_mesh_va_label_get>
		if (uuid) {
   267c6:	b110      	cbz	r0, 267ce <_mod_pub_set.constprop.0+0x7e>
			bt_mesh_va_del(uuid, NULL);
   267c8:	2100      	movs	r1, #0
   267ca:	f7e7 ffa5 	bl	e718 <bt_mesh_va_del>
	model->pub->addr = pub_addr;
   267ce:	68a3      	ldr	r3, [r4, #8]
	model->pub->ttl = ttl;
   267d0:	f89d 2018 	ldrb.w	r2, [sp, #24]
	model->pub->addr = pub_addr;
   267d4:	809e      	strh	r6, [r3, #4]
	model->pub->key = app_idx;
   267d6:	88de      	ldrh	r6, [r3, #6]
	model->pub->ttl = ttl;
   267d8:	721a      	strb	r2, [r3, #8]
	model->pub->key = app_idx;
   267da:	f426 56ff 	bic.w	r6, r6, #8160	; 0x1fe0
   267de:	f026 061f 	bic.w	r6, r6, #31
   267e2:	f3c8 080c 	ubfx	r8, r8, #0, #13
	model->pub->retransmit = retransmit;
   267e6:	f89d 2020 	ldrb.w	r2, [sp, #32]
	model->pub->period = period;
   267ea:	729f      	strb	r7, [r3, #10]
	model->pub->key = app_idx;
   267ec:	ea46 0608 	orr.w	r6, r6, r8
   267f0:	80de      	strh	r6, [r3, #6]
	model->pub->retransmit = retransmit;
   267f2:	725a      	strb	r2, [r3, #9]
	if (model->pub->update) {
   267f4:	695b      	ldr	r3, [r3, #20]
   267f6:	2b00      	cmp	r3, #0
   267f8:	d0ca      	beq.n	26790 <_mod_pub_set.constprop.0+0x40>
		period_ms = bt_mesh_model_pub_period_get(model);
   267fa:	4620      	mov	r0, r4
   267fc:	f7e9 fc32 	bl	10064 <bt_mesh_model_pub_period_get>
		if (period_ms > 0) {
   26800:	1e06      	subs	r6, r0, #0
   26802:	68a0      	ldr	r0, [r4, #8]
   26804:	ddc1      	ble.n	2678a <_mod_pub_set.constprop.0+0x3a>
			k_work_reschedule(&model->pub->timer,
   26806:	f100 0718 	add.w	r7, r0, #24
   2680a:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   2680e:	f240 30e7 	movw	r0, #999	; 0x3e7
   26812:	2100      	movs	r1, #0
   26814:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   26818:	2300      	movs	r3, #0
   2681a:	fbc6 010c 	smlal	r0, r1, r6, ip
   2681e:	f7d9 fcaf 	bl	180 <__aeabi_uldivmod>
   26822:	4602      	mov	r2, r0
   26824:	460b      	mov	r3, r1
   26826:	4638      	mov	r0, r7
   26828:	f7f9 fdfc 	bl	20424 <k_work_reschedule>
   2682c:	e7b0      	b.n	26790 <_mod_pub_set.constprop.0+0x40>
		return STATUS_FEAT_NOT_SUPP;
   2682e:	250a      	movs	r5, #10
   26830:	e7b1      	b.n	26796 <_mod_pub_set.constprop.0+0x46>
		return STATUS_NVAL_PUB_PARAM;
   26832:	2507      	movs	r5, #7
   26834:	e7af      	b.n	26796 <_mod_pub_set.constprop.0+0x46>

00026836 <mod_unbind.constprop.0>:
static uint8_t mod_unbind(struct bt_mesh_model *model, uint16_t key_idx, bool store)
   26836:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2683a:	4604      	mov	r4, r0
   2683c:	b085      	sub	sp, #20
	if (!bt_mesh_app_key_exists(key_idx)) {
   2683e:	4608      	mov	r0, r1
static uint8_t mod_unbind(struct bt_mesh_model *model, uint16_t key_idx, bool store)
   26840:	460d      	mov	r5, r1
	if (!bt_mesh_app_key_exists(key_idx)) {
   26842:	f7e7 f8cf 	bl	d9e4 <bt_mesh_app_key_exists>
   26846:	b328      	cbz	r0, 26894 <mod_unbind.constprop.0+0x5e>
   26848:	f104 060c 	add.w	r6, r4, #12
   2684c:	f104 0810 	add.w	r8, r4, #16
		model->keys[i] = BT_MESH_KEY_UNUSED;
   26850:	f64f 79ff 	movw	r9, #65535	; 0xffff
			_mod_pub_set(model, BT_MESH_ADDR_UNASSIGNED,
   26854:	2700      	movs	r7, #0
		if (model->keys[i] != key_idx) {
   26856:	f836 3b02 	ldrh.w	r3, [r6], #2
   2685a:	429d      	cmp	r5, r3
   2685c:	d114      	bne.n	26888 <mod_unbind.constprop.0+0x52>
		model->keys[i] = BT_MESH_KEY_UNUSED;
   2685e:	f826 9c02 	strh.w	r9, [r6, #-2]
			bt_mesh_model_bind_store(model);
   26862:	4620      	mov	r0, r4
   26864:	f7ff fe3b 	bl	264de <bt_mesh_model_bind_store>
		if (model->pub && model->pub->key == key_idx) {
   26868:	68a3      	ldr	r3, [r4, #8]
   2686a:	b16b      	cbz	r3, 26888 <mod_unbind.constprop.0+0x52>
   2686c:	88db      	ldrh	r3, [r3, #6]
   2686e:	f3c3 030b 	ubfx	r3, r3, #0, #12
   26872:	42ab      	cmp	r3, r5
   26874:	d108      	bne.n	26888 <mod_unbind.constprop.0+0x52>
			_mod_pub_set(model, BT_MESH_ADDR_UNASSIGNED,
   26876:	2300      	movs	r3, #0
   26878:	e9cd 7701 	strd	r7, r7, [sp, #4]
   2687c:	9700      	str	r7, [sp, #0]
   2687e:	461a      	mov	r2, r3
   26880:	4619      	mov	r1, r3
   26882:	4620      	mov	r0, r4
   26884:	f7ff ff64 	bl	26750 <_mod_pub_set.constprop.0>
	for (i = 0; i < ARRAY_SIZE(model->keys); i++) {
   26888:	4546      	cmp	r6, r8
   2688a:	d1e4      	bne.n	26856 <mod_unbind.constprop.0+0x20>
   2688c:	2000      	movs	r0, #0
}
   2688e:	b005      	add	sp, #20
   26890:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return STATUS_INVALID_APPKEY;
   26894:	2003      	movs	r0, #3
   26896:	e7fa      	b.n	2688e <mod_unbind.constprop.0+0x58>

00026898 <mod_app_key_del>:
	mod_unbind(mod, *app_idx, true);
   26898:	9b00      	ldr	r3, [sp, #0]
   2689a:	8819      	ldrh	r1, [r3, #0]
   2689c:	f7ff bfcb 	b.w	26836 <mod_unbind.constprop.0>

000268a0 <heartbeat_pub_get>:
{
   268a0:	b530      	push	{r4, r5, lr}
   268a2:	b085      	sub	sp, #20
   268a4:	4604      	mov	r4, r0
   268a6:	460d      	mov	r5, r1
	bt_mesh_hb_pub_get(&pub);
   268a8:	4668      	mov	r0, sp
   268aa:	f7e8 ffef 	bl	f88c <bt_mesh_hb_pub_get>
	return hb_pub_send_status(model, ctx, STATUS_SUCCESS, &pub);
   268ae:	466b      	mov	r3, sp
   268b0:	2200      	movs	r2, #0
   268b2:	4629      	mov	r1, r5
   268b4:	4620      	mov	r0, r4
   268b6:	f7ec f857 	bl	12968 <hb_pub_send_status>
}
   268ba:	b005      	add	sp, #20
   268bc:	bd30      	pop	{r4, r5, pc}

000268be <heartbeat_sub_get>:
{
   268be:	b530      	push	{r4, r5, lr}
   268c0:	b085      	sub	sp, #20
   268c2:	4604      	mov	r4, r0
   268c4:	460d      	mov	r5, r1
	bt_mesh_hb_sub_get(&sub);
   268c6:	4668      	mov	r0, sp
   268c8:	f7e9 f862 	bl	f990 <bt_mesh_hb_sub_get>
	return hb_sub_send_status(model, ctx, &sub);
   268cc:	466a      	mov	r2, sp
   268ce:	4629      	mov	r1, r5
   268d0:	4620      	mov	r0, r4
   268d2:	f7ec f911 	bl	12af8 <hb_sub_send_status>
}
   268d6:	b005      	add	sp, #20
   268d8:	bd30      	pop	{r4, r5, pc}

000268da <attention_off>:
	if (srv->cb && srv->cb->attn_off) {
   268da:	f850 3c04 	ldr.w	r3, [r0, #-4]
   268de:	b123      	cbz	r3, 268ea <attention_off+0x10>
   268e0:	695b      	ldr	r3, [r3, #20]
   268e2:	b113      	cbz	r3, 268ea <attention_off+0x10>
		srv->cb->attn_off(srv->model);
   268e4:	f850 0c08 	ldr.w	r0, [r0, #-8]
   268e8:	4718      	bx	r3
}
   268ea:	4770      	bx	lr

000268ec <attention_get>:
	return send_attention_status(model, ctx);
   268ec:	f7ec b9b8 	b.w	12c60 <send_attention_status>

000268f0 <health_fault_test_unrel>:
{
   268f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_mesh_health_srv *srv = model->user_data;
   268f4:	69c7      	ldr	r7, [r0, #28]
{
   268f6:	4604      	mov	r4, r0
	test_id = net_buf_simple_pull_u8(buf);
   268f8:	4610      	mov	r0, r2
{
   268fa:	4615      	mov	r5, r2
	test_id = net_buf_simple_pull_u8(buf);
   268fc:	f001 fd24 	bl	28348 <net_buf_simple_pull_u8>
   26900:	4606      	mov	r6, r0
	company_id = net_buf_simple_pull_le16(buf);
   26902:	4628      	mov	r0, r5
   26904:	f001 fd28 	bl	28358 <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_test) {
   26908:	687b      	ldr	r3, [r7, #4]
	company_id = net_buf_simple_pull_le16(buf);
   2690a:	4602      	mov	r2, r0
	if (srv->cb && srv->cb->fault_test) {
   2690c:	b133      	cbz	r3, 2691c <health_fault_test_unrel+0x2c>
   2690e:	68db      	ldr	r3, [r3, #12]
   26910:	b123      	cbz	r3, 2691c <health_fault_test_unrel+0x2c>
		return srv->cb->fault_test(model, test_id, company_id);
   26912:	4631      	mov	r1, r6
   26914:	4620      	mov	r0, r4
}
   26916:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return srv->cb->fault_test(model, test_id, company_id);
   2691a:	4718      	bx	r3
}
   2691c:	2000      	movs	r0, #0
   2691e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00026922 <health_fault_clear_unrel>:
{
   26922:	b570      	push	{r4, r5, r6, lr}
	struct bt_mesh_health_srv *srv = model->user_data;
   26924:	69c5      	ldr	r5, [r0, #28]
{
   26926:	4604      	mov	r4, r0
	company_id = net_buf_simple_pull_le16(buf);
   26928:	4610      	mov	r0, r2
   2692a:	f001 fd15 	bl	28358 <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_clear) {
   2692e:	686b      	ldr	r3, [r5, #4]
	company_id = net_buf_simple_pull_le16(buf);
   26930:	4601      	mov	r1, r0
	if (srv->cb && srv->cb->fault_clear) {
   26932:	b12b      	cbz	r3, 26940 <health_fault_clear_unrel+0x1e>
   26934:	689b      	ldr	r3, [r3, #8]
   26936:	b11b      	cbz	r3, 26940 <health_fault_clear_unrel+0x1e>
		return srv->cb->fault_clear(model, company_id);
   26938:	4620      	mov	r0, r4
}
   2693a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return srv->cb->fault_clear(model, company_id);
   2693e:	4718      	bx	r3
}
   26940:	2000      	movs	r0, #0
   26942:	bd70      	pop	{r4, r5, r6, pc}

00026944 <health_period_get>:
	return send_health_period_status(model, ctx);
   26944:	f7ec bb84 	b.w	13050 <send_health_period_status>

00026948 <health_period_set>:
{
   26948:	b538      	push	{r3, r4, r5, lr}
   2694a:	4604      	mov	r4, r0
   2694c:	460d      	mov	r5, r1
	err = health_period_set_unrel(model, ctx, buf);
   2694e:	f7ec f9c5 	bl	12cdc <health_period_set_unrel>
	if (err) {
   26952:	b928      	cbnz	r0, 26960 <health_period_set+0x18>
	return send_health_period_status(model, ctx);
   26954:	4629      	mov	r1, r5
   26956:	4620      	mov	r0, r4
}
   26958:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return send_health_period_status(model, ctx);
   2695c:	f7ec bb78 	b.w	13050 <send_health_period_status>
}
   26960:	bd38      	pop	{r3, r4, r5, pc}

00026962 <attention_set_unrel>:
{
   26962:	b510      	push	{r4, lr}
   26964:	4604      	mov	r4, r0
	time = net_buf_simple_pull_u8(buf);
   26966:	4610      	mov	r0, r2
   26968:	f001 fcee 	bl	28348 <net_buf_simple_pull_u8>
   2696c:	4601      	mov	r1, r0
	bt_mesh_attention(model, time);
   2696e:	4620      	mov	r0, r4
   26970:	f7ec fbce 	bl	13110 <bt_mesh_attention>
}
   26974:	2000      	movs	r0, #0
   26976:	bd10      	pop	{r4, pc}

00026978 <attention_set>:
{
   26978:	b538      	push	{r3, r4, r5, lr}
   2697a:	4604      	mov	r4, r0
   2697c:	460d      	mov	r5, r1
	err = attention_set_unrel(model, ctx, buf);
   2697e:	f7ff fff0 	bl	26962 <attention_set_unrel>
	if (err) {
   26982:	b928      	cbnz	r0, 26990 <attention_set+0x18>
	return send_attention_status(model, ctx);
   26984:	4629      	mov	r1, r5
   26986:	4620      	mov	r0, r4
}
   26988:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return send_attention_status(model, ctx);
   2698c:	f7ec b968 	b.w	12c60 <send_attention_status>
}
   26990:	bd38      	pop	{r3, r4, r5, pc}

00026992 <bt_mesh_adv_buf_ready>:
}
   26992:	4770      	bx	lr

00026994 <store_pending>:
{
   26994:	b508      	push	{r3, lr}
	if (atomic_test_and_clear_bit(pending_flags,
   26996:	2000      	movs	r0, #0
   26998:	f7ec fd0a 	bl	133b0 <atomic_test_and_clear_bit.constprop.0>
   2699c:	b118      	cbz	r0, 269a6 <store_pending+0x12>
		bt_mesh_rpl_pending_store(BT_MESH_ADDR_ALL_NODES);
   2699e:	f64f 70ff 	movw	r0, #65535	; 0xffff
   269a2:	f7e8 fd23 	bl	f3ec <bt_mesh_rpl_pending_store>
	if (atomic_test_and_clear_bit(pending_flags,
   269a6:	2001      	movs	r0, #1
   269a8:	f7ec fd02 	bl	133b0 <atomic_test_and_clear_bit.constprop.0>
   269ac:	b108      	cbz	r0, 269b2 <store_pending+0x1e>
		bt_mesh_subnet_pending_store();
   269ae:	f7e6 fe67 	bl	d680 <bt_mesh_subnet_pending_store>
	if (atomic_test_and_clear_bit(pending_flags,
   269b2:	2002      	movs	r0, #2
   269b4:	f7ec fcfc 	bl	133b0 <atomic_test_and_clear_bit.constprop.0>
   269b8:	b108      	cbz	r0, 269be <store_pending+0x2a>
		bt_mesh_app_key_pending_store();
   269ba:	f7e7 f90f 	bl	dbdc <bt_mesh_app_key_pending_store>
	if (atomic_test_and_clear_bit(pending_flags,
   269be:	2003      	movs	r0, #3
   269c0:	f7ec fcf6 	bl	133b0 <atomic_test_and_clear_bit.constprop.0>
   269c4:	b108      	cbz	r0, 269ca <store_pending+0x36>
		bt_mesh_net_pending_net_store();
   269c6:	f7e6 faff 	bl	cfc8 <bt_mesh_net_pending_net_store>
	if (atomic_test_and_clear_bit(pending_flags,
   269ca:	2004      	movs	r0, #4
   269cc:	f7ec fcf0 	bl	133b0 <atomic_test_and_clear_bit.constprop.0>
   269d0:	b108      	cbz	r0, 269d6 <store_pending+0x42>
		bt_mesh_net_pending_iv_store();
   269d2:	f7e6 fab5 	bl	cf40 <bt_mesh_net_pending_iv_store>
	if (atomic_test_and_clear_bit(pending_flags,
   269d6:	2005      	movs	r0, #5
   269d8:	f7ec fcea 	bl	133b0 <atomic_test_and_clear_bit.constprop.0>
   269dc:	b108      	cbz	r0, 269e2 <store_pending+0x4e>
		bt_mesh_net_pending_seq_store();
   269de:	f7e6 fb33 	bl	d048 <bt_mesh_net_pending_seq_store>
	if (atomic_test_and_clear_bit(pending_flags,
   269e2:	2006      	movs	r0, #6
   269e4:	f7ec fce4 	bl	133b0 <atomic_test_and_clear_bit.constprop.0>
   269e8:	b108      	cbz	r0, 269ee <store_pending+0x5a>
		bt_mesh_hb_pub_pending_store();
   269ea:	f7e9 f823 	bl	fa34 <bt_mesh_hb_pub_pending_store>
	if (atomic_test_and_clear_bit(pending_flags,
   269ee:	2007      	movs	r0, #7
   269f0:	f7ec fcde 	bl	133b0 <atomic_test_and_clear_bit.constprop.0>
   269f4:	b108      	cbz	r0, 269fa <store_pending+0x66>
		bt_mesh_cfg_pending_store();
   269f6:	f7e4 ffd7 	bl	b9a8 <bt_mesh_cfg_pending_store>
	if (atomic_test_and_clear_bit(pending_flags,
   269fa:	2008      	movs	r0, #8
   269fc:	f7ec fcd8 	bl	133b0 <atomic_test_and_clear_bit.constprop.0>
   26a00:	b108      	cbz	r0, 26a06 <store_pending+0x72>
		bt_mesh_model_pending_store();
   26a02:	f7e9 fff1 	bl	109e8 <bt_mesh_model_pending_store>
	if (atomic_test_and_clear_bit(pending_flags,
   26a06:	2009      	movs	r0, #9
   26a08:	f7ec fcd2 	bl	133b0 <atomic_test_and_clear_bit.constprop.0>
   26a0c:	b118      	cbz	r0, 26a16 <store_pending+0x82>
}
   26a0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_mesh_va_pending_store();
   26a12:	f7e8 bb21 	b.w	f058 <bt_mesh_va_pending_store>
}
   26a16:	bd08      	pop	{r3, pc}

00026a18 <bt_mesh_prov_buf_init>:
}

static inline void bt_mesh_prov_buf_init(struct net_buf_simple *buf, uint8_t type)
{
   26a18:	b538      	push	{r3, r4, r5, lr}
   26a1a:	4604      	mov	r4, r0
   26a1c:	460d      	mov	r5, r1
	net_buf_simple_reserve(buf, PROV_BEARER_BUF_HEADROOM);
   26a1e:	2105      	movs	r1, #5
   26a20:	f001 fb79 	bl	28116 <net_buf_simple_reserve>
	net_buf_simple_add_u8(buf, type);
   26a24:	4629      	mov	r1, r5
   26a26:	4620      	mov	r0, r4
}
   26a28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_simple_add_u8(buf, type);
   26a2c:	f001 bc1b 	b.w	28266 <net_buf_simple_add_u8>

00026a30 <prov_fail>:
	prov_send_fail_msg(reason);
   26a30:	f7ed b802 	b.w	13a38 <prov_send_fail_msg>

00026a34 <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   26a34:	f101 0320 	add.w	r3, r1, #32
   26a38:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   26a3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   26a3e:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   26a42:	428b      	cmp	r3, r1
   26a44:	d1f9      	bne.n	26a3a <sys_memcpy_swap.constprop.0+0x6>
}
   26a46:	4770      	bx	lr

00026a48 <atomic_or>:
{
   26a48:	4603      	mov	r3, r0
}
   26a4a:	f3bf 8f5b 	dmb	ish
   26a4e:	e853 0f00 	ldrex	r0, [r3]
   26a52:	ea40 0201 	orr.w	r2, r0, r1
   26a56:	e843 2c00 	strex	ip, r2, [r3]
   26a5a:	f1bc 0f00 	cmp.w	ip, #0
   26a5e:	d1f6      	bne.n	26a4e <atomic_or+0x6>
   26a60:	f3bf 8f5b 	dmb	ish
   26a64:	4770      	bx	lr

00026a66 <net_buf_add_u8.isra.0>:
	return net_buf_simple_add_u8(&buf->b, val);
   26a66:	3008      	adds	r0, #8
   26a68:	f001 bbfd 	b.w	28266 <net_buf_simple_add_u8>

00026a6c <buf_start>:
{
   26a6c:	4608      	mov	r0, r1
   26a6e:	4611      	mov	r1, r2
	if (err) {
   26a70:	b108      	cbz	r0, 26a76 <buf_start+0xa>
		buf_sent(err, user_data);
   26a72:	f7ee ba03 	b.w	14e7c <buf_sent>
}
   26a76:	4770      	bx	lr

00026a78 <pb_adv_reset>:

void pb_adv_reset(void)
{
	reset_adv_link();
   26a78:	f7ed bd9e 	b.w	145b8 <reset_adv_link>

00026a7c <clear_tx>:
}
   26a7c:	4770      	bx	lr

00026a7e <pb_gatt_reset>:
}

void pb_gatt_reset(void)
{
	reset_state();
   26a7e:	f7ee baa5 	b.w	14fcc <reset_state>

00026a82 <proxy_ccc_changed>:
}
   26a82:	4770      	bx	lr

00026a84 <beacon_send>:
{
   26a84:	b530      	push	{r4, r5, lr}
   26a86:	b08d      	sub	sp, #52	; 0x34
	NET_BUF_SIMPLE_DEFINE(buf, 23);
   26a88:	ab06      	add	r3, sp, #24
   26a8a:	f44f 12b8 	mov.w	r2, #1507328	; 0x170000
{
   26a8e:	4604      	mov	r4, r0
   26a90:	460d      	mov	r5, r1
	net_buf_simple_reserve(&buf, 1);
   26a92:	a803      	add	r0, sp, #12
   26a94:	2101      	movs	r1, #1
	NET_BUF_SIMPLE_DEFINE(buf, 23);
   26a96:	e9cd 2304 	strd	r2, r3, [sp, #16]
   26a9a:	9303      	str	r3, [sp, #12]
	net_buf_simple_reserve(&buf, 1);
   26a9c:	f001 fb3b 	bl	28116 <net_buf_simple_reserve>
	bt_mesh_beacon_create(sub, &buf);
   26aa0:	a903      	add	r1, sp, #12
   26aa2:	4628      	mov	r0, r5
   26aa4:	f7e5 fa08 	bl	beb8 <bt_mesh_beacon_create>
	return bt_mesh_proxy_msg_send(&client->cli, BT_MESH_PROXY_BEACON,
   26aa8:	2300      	movs	r3, #0
   26aaa:	9300      	str	r3, [sp, #0]
   26aac:	aa03      	add	r2, sp, #12
   26aae:	2101      	movs	r1, #1
   26ab0:	4620      	mov	r0, r4
   26ab2:	f000 f885 	bl	26bc0 <bt_mesh_proxy_msg_send>
}
   26ab6:	b00d      	add	sp, #52	; 0x34
   26ab8:	bd30      	pop	{r4, r5, pc}

00026aba <send_beacon_cb>:
{
   26aba:	460b      	mov	r3, r1
	return beacon_send(client, sub);
   26abc:	4601      	mov	r1, r0
   26abe:	4618      	mov	r0, r3
   26ac0:	f7ff bfe0 	b.w	26a84 <beacon_send>

00026ac4 <buf_send_end>:
	net_buf_unref(buf);
   26ac4:	4608      	mov	r0, r1
   26ac6:	f7f7 b94d 	b.w	1dd64 <net_buf_unref>

00026aca <filter_add>:
{
   26aca:	b510      	push	{r4, lr}
	if (addr == BT_MESH_ADDR_UNASSIGNED) {
   26acc:	b191      	cbz	r1, 26af4 <filter_add+0x2a>
		if (client->filter[i] == addr) {
   26ace:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
   26ad2:	4299      	cmp	r1, r3
   26ad4:	d00e      	beq.n	26af4 <filter_add+0x2a>
   26ad6:	f8b0 4052 	ldrh.w	r4, [r0, #82]	; 0x52
   26ada:	42a1      	cmp	r1, r4
   26adc:	d00a      	beq.n	26af4 <filter_add+0x2a>
   26ade:	f8b0 2054 	ldrh.w	r2, [r0, #84]	; 0x54
   26ae2:	4291      	cmp	r1, r2
   26ae4:	d006      	beq.n	26af4 <filter_add+0x2a>
		if (client->filter[i] == BT_MESH_ADDR_UNASSIGNED) {
   26ae6:	b113      	cbz	r3, 26aee <filter_add+0x24>
   26ae8:	b12c      	cbz	r4, 26af6 <filter_add+0x2c>
   26aea:	b91a      	cbnz	r2, 26af4 <filter_add+0x2a>
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   26aec:	2302      	movs	r3, #2
			client->filter[i] = addr;
   26aee:	3328      	adds	r3, #40	; 0x28
   26af0:	f820 1013 	strh.w	r1, [r0, r3, lsl #1]
}
   26af4:	bd10      	pop	{r4, pc}
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   26af6:	2301      	movs	r3, #1
   26af8:	e7f9      	b.n	26aee <filter_add+0x24>

00026afa <filter_remove>:
	if (addr == BT_MESH_ADDR_UNASSIGNED) {
   26afa:	b181      	cbz	r1, 26b1e <filter_remove+0x24>
		if (client->filter[i] == addr) {
   26afc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
   26b00:	428b      	cmp	r3, r1
   26b02:	d00d      	beq.n	26b20 <filter_remove+0x26>
   26b04:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
   26b08:	428b      	cmp	r3, r1
   26b0a:	d00b      	beq.n	26b24 <filter_remove+0x2a>
   26b0c:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   26b10:	428b      	cmp	r3, r1
   26b12:	d104      	bne.n	26b1e <filter_remove+0x24>
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   26b14:	2302      	movs	r3, #2
			client->filter[i] = BT_MESH_ADDR_UNASSIGNED;
   26b16:	3328      	adds	r3, #40	; 0x28
   26b18:	2200      	movs	r2, #0
   26b1a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
}
   26b1e:	4770      	bx	lr
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   26b20:	2300      	movs	r3, #0
   26b22:	e7f8      	b.n	26b16 <filter_remove+0x1c>
   26b24:	2301      	movs	r3, #1
   26b26:	e7f6      	b.n	26b16 <filter_remove+0x1c>

00026b28 <prov_ccc_write>:
	if (value != BT_GATT_CCC_NOTIFY) {
   26b28:	2a01      	cmp	r2, #1
{
   26b2a:	b508      	push	{r3, lr}
   26b2c:	4601      	mov	r1, r0
	if (value != BT_GATT_CCC_NOTIFY) {
   26b2e:	d004      	beq.n	26b3a <prov_ccc_write+0x12>
}
   26b30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   26b34:	4610      	mov	r0, r2
   26b36:	f7ee bc39 	b.w	153ac <prov_ccc_write.part.0>
	client = find_client(conn);
   26b3a:	f7ee fb19 	bl	15170 <find_client>
	if (client->filter_type == NONE) {
   26b3e:	f890 3056 	ldrb.w	r3, [r0, #86]	; 0x56
   26b42:	b92b      	cbnz	r3, 26b50 <prov_ccc_write+0x28>
		client->filter_type = PROV;
   26b44:	2303      	movs	r3, #3
   26b46:	f880 3056 	strb.w	r3, [r0, #86]	; 0x56
		bt_mesh_pb_gatt_open(conn);
   26b4a:	4608      	mov	r0, r1
   26b4c:	f7ee fada 	bl	15104 <bt_mesh_pb_gatt_open>
}
   26b50:	2002      	movs	r0, #2
   26b52:	bd08      	pop	{r3, pc}

00026b54 <proxy_ccc_write>:
	if (value != BT_GATT_CCC_NOTIFY) {
   26b54:	2a01      	cmp	r2, #1
{
   26b56:	b508      	push	{r3, lr}
   26b58:	4611      	mov	r1, r2
	if (value != BT_GATT_CCC_NOTIFY) {
   26b5a:	d004      	beq.n	26b66 <proxy_ccc_write+0x12>
}
   26b5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   26b60:	4610      	mov	r0, r2
   26b62:	f7ee bc23 	b.w	153ac <prov_ccc_write.part.0>
	client = find_client(conn);
   26b66:	f7ee fb03 	bl	15170 <find_client>
	if (client->filter_type == NONE) {
   26b6a:	f890 3056 	ldrb.w	r3, [r0, #86]	; 0x56
   26b6e:	b923      	cbnz	r3, 26b7a <proxy_ccc_write+0x26>
		client->filter_type = ACCEPT;
   26b70:	f880 1056 	strb.w	r1, [r0, #86]	; 0x56
		k_work_submit(&client->send_beacons);
   26b74:	3058      	adds	r0, #88	; 0x58
   26b76:	f7f9 fbb9 	bl	202ec <k_work_submit>
}
   26b7a:	2002      	movs	r0, #2
   26b7c:	bd08      	pop	{r3, pc}

00026b7e <prov_ccc_changed>:
   26b7e:	4770      	bx	lr

00026b80 <sub_count_cb>:
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   26b80:	8b82      	ldrh	r2, [r0, #28]
   26b82:	f64f 73ff 	movw	r3, #65535	; 0xffff
   26b86:	429a      	cmp	r2, r3
{
   26b88:	b510      	push	{r4, lr}
   26b8a:	460c      	mov	r4, r1
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   26b8c:	d005      	beq.n	26b9a <sub_count_cb+0x1a>
	return (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING ||
   26b8e:	7fc3      	ldrb	r3, [r0, #31]
   26b90:	2b01      	cmp	r3, #1
   26b92:	d104      	bne.n	26b9e <sub_count_cb+0x1e>
		(*count)++;
   26b94:	6823      	ldr	r3, [r4, #0]
   26b96:	3301      	adds	r3, #1
   26b98:	6023      	str	r3, [r4, #0]
}
   26b9a:	2000      	movs	r0, #0
   26b9c:	bd10      	pop	{r4, pc}
		bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
   26b9e:	f7e4 fe29 	bl	b7f4 <bt_mesh_gatt_proxy_get>
	if (advertise_subnet(sub)) {
   26ba2:	2801      	cmp	r0, #1
   26ba4:	d1f9      	bne.n	26b9a <sub_count_cb+0x1a>
   26ba6:	e7f5      	b.n	26b94 <sub_count_cb+0x14>

00026ba8 <bt_mesh_proxy_addr_add>:
{
   26ba8:	4603      	mov	r3, r0
	struct bt_mesh_proxy_client *client =
   26baa:	3840      	subs	r0, #64	; 0x40
	if (client->filter_type == ACCEPT) {
   26bac:	7d9b      	ldrb	r3, [r3, #22]
   26bae:	2b01      	cmp	r3, #1
   26bb0:	d101      	bne.n	26bb6 <bt_mesh_proxy_addr_add+0xe>
		filter_add(client, addr);
   26bb2:	f7ff bf8a 	b.w	26aca <filter_add>
	} else if (client->filter_type == REJECT) {
   26bb6:	2b02      	cmp	r3, #2
   26bb8:	d101      	bne.n	26bbe <bt_mesh_proxy_addr_add+0x16>
		filter_remove(client, addr);
   26bba:	f7ff bf9e 	b.w	26afa <filter_remove>
}
   26bbe:	4770      	bx	lr

00026bc0 <bt_mesh_proxy_msg_send>:
{
   26bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = role->conn;
   26bc4:	f8d0 9000 	ldr.w	r9, [r0]
{
   26bc8:	b085      	sub	sp, #20
   26bca:	4606      	mov	r6, r0
   26bcc:	469a      	mov	sl, r3
	mtu = bt_gatt_get_mtu(conn) - 3;
   26bce:	4648      	mov	r0, r9
{
   26bd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   26bd2:	9303      	str	r3, [sp, #12]
   26bd4:	4688      	mov	r8, r1
   26bd6:	4614      	mov	r4, r2
	mtu = bt_gatt_get_mtu(conn) - 3;
   26bd8:	f7fe fdce 	bl	25778 <bt_gatt_get_mtu>
	if (mtu > msg->len) {
   26bdc:	88a3      	ldrh	r3, [r4, #4]
	mtu = bt_gatt_get_mtu(conn) - 3;
   26bde:	1ec5      	subs	r5, r0, #3
   26be0:	b2ad      	uxth	r5, r5
	if (mtu > msg->len) {
   26be2:	42ab      	cmp	r3, r5
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_COMPLETE, type));
   26be4:	f008 0b3f 	and.w	fp, r8, #63	; 0x3f
	if (mtu > msg->len) {
   26be8:	d20f      	bcs.n	26c0a <bt_mesh_proxy_msg_send+0x4a>
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_COMPLETE, type));
   26bea:	4659      	mov	r1, fp
			net_buf_simple_push_u8(msg, PDU_HDR(SAR_LAST, type));
   26bec:	4620      	mov	r0, r4
   26bee:	f001 fb82 	bl	282f6 <net_buf_simple_push_u8>
			err = role->cb.send(conn, msg->data, msg->len, end, user_data);
   26bf2:	68b5      	ldr	r5, [r6, #8]
   26bf4:	9b03      	ldr	r3, [sp, #12]
   26bf6:	88a2      	ldrh	r2, [r4, #4]
   26bf8:	6821      	ldr	r1, [r4, #0]
   26bfa:	930e      	str	r3, [sp, #56]	; 0x38
   26bfc:	4648      	mov	r0, r9
   26bfe:	4653      	mov	r3, sl
   26c00:	46ac      	mov	ip, r5
}
   26c02:	b005      	add	sp, #20
   26c04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			err = role->cb.send(conn, msg->data, msg->len, end, user_data);
   26c08:	4760      	bx	ip
	net_buf_simple_push_u8(msg, PDU_HDR(SAR_FIRST, type));
   26c0a:	f04b 0140 	orr.w	r1, fp, #64	; 0x40
   26c0e:	4620      	mov	r0, r4
   26c10:	f001 fb71 	bl	282f6 <net_buf_simple_push_u8>
	err = role->cb.send(conn, msg->data, mtu, NULL, NULL);
   26c14:	2300      	movs	r3, #0
   26c16:	68b7      	ldr	r7, [r6, #8]
   26c18:	6821      	ldr	r1, [r4, #0]
   26c1a:	9300      	str	r3, [sp, #0]
   26c1c:	462a      	mov	r2, r5
   26c1e:	4648      	mov	r0, r9
   26c20:	47b8      	blx	r7
	if (err) {
   26c22:	4607      	mov	r7, r0
   26c24:	b938      	cbnz	r0, 26c36 <bt_mesh_proxy_msg_send+0x76>
	net_buf_simple_pull(msg, mtu);
   26c26:	4629      	mov	r1, r5
   26c28:	4620      	mov	r0, r4
   26c2a:	f001 fb7d 	bl	28328 <net_buf_simple_pull>
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_CONT, type));
   26c2e:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
	while (msg->len) {
   26c32:	88a3      	ldrh	r3, [r4, #4]
   26c34:	b91b      	cbnz	r3, 26c3e <bt_mesh_proxy_msg_send+0x7e>
}
   26c36:	4638      	mov	r0, r7
   26c38:	b005      	add	sp, #20
   26c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (msg->len + 1 < mtu) {
   26c3e:	3301      	adds	r3, #1
   26c40:	42ab      	cmp	r3, r5
   26c42:	da02      	bge.n	26c4a <bt_mesh_proxy_msg_send+0x8a>
			net_buf_simple_push_u8(msg, PDU_HDR(SAR_LAST, type));
   26c44:	f048 01c0 	orr.w	r1, r8, #192	; 0xc0
   26c48:	e7d0      	b.n	26bec <bt_mesh_proxy_msg_send+0x2c>
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_CONT, type));
   26c4a:	4659      	mov	r1, fp
   26c4c:	4620      	mov	r0, r4
   26c4e:	f001 fb52 	bl	282f6 <net_buf_simple_push_u8>
		err = role->cb.send(conn, msg->data, mtu, NULL, NULL);
   26c52:	2300      	movs	r3, #0
   26c54:	6821      	ldr	r1, [r4, #0]
   26c56:	f8d6 c008 	ldr.w	ip, [r6, #8]
   26c5a:	9300      	str	r3, [sp, #0]
   26c5c:	462a      	mov	r2, r5
   26c5e:	4648      	mov	r0, r9
   26c60:	47e0      	blx	ip
		if (err) {
   26c62:	b920      	cbnz	r0, 26c6e <bt_mesh_proxy_msg_send+0xae>
		net_buf_simple_pull(msg, mtu);
   26c64:	4629      	mov	r1, r5
   26c66:	4620      	mov	r0, r4
   26c68:	f001 fb5e 	bl	28328 <net_buf_simple_pull>
   26c6c:	e7e1      	b.n	26c32 <bt_mesh_proxy_msg_send+0x72>
   26c6e:	4607      	mov	r7, r0
   26c70:	e7e1      	b.n	26c36 <bt_mesh_proxy_msg_send+0x76>

00026c72 <k_sem_give>:
	z_impl_k_sem_give(sem);
   26c72:	f7f9 b9cf 	b.w	20014 <z_impl_k_sem_give>

00026c76 <key_idx_unpack>:
{
   26c76:	b410      	push	{r4}
	*idx1 = sys_get_le16(&buf->data[0]) & 0xfff;
   26c78:	6804      	ldr	r4, [r0, #0]
   26c7a:	8823      	ldrh	r3, [r4, #0]
   26c7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
   26c80:	800b      	strh	r3, [r1, #0]
	*idx2 = sys_get_le16(&buf->data[1]) >> 4;
   26c82:	f8b4 3001 	ldrh.w	r3, [r4, #1]
}
   26c86:	bc10      	pop	{r4}
	*idx2 = sys_get_le16(&buf->data[1]) >> 4;
   26c88:	091b      	lsrs	r3, r3, #4
   26c8a:	8013      	strh	r3, [r2, #0]
	net_buf_simple_pull(buf, 3);
   26c8c:	2103      	movs	r1, #3
   26c8e:	f001 bb4b 	b.w	28328 <net_buf_simple_pull>

00026c92 <transmit_status>:
{
   26c92:	460b      	mov	r3, r1
   26c94:	4611      	mov	r1, r2
	return state_status_u8(model, ctx, buf, OP_NET_TRANSMIT_STATUS);
   26c96:	8898      	ldrh	r0, [r3, #4]
   26c98:	f248 0225 	movw	r2, #32805	; 0x8025
   26c9c:	f7ef be3a 	b.w	16914 <state_status_u8.constprop.0.isra.0>

00026ca0 <net_transmit_status>:
   26ca0:	f7ff bff7 	b.w	26c92 <transmit_status>

00026ca4 <gatt_proxy_status>:
{
   26ca4:	460b      	mov	r3, r1
   26ca6:	4611      	mov	r1, r2
	return state_status_u8(model, ctx, buf, OP_GATT_PROXY_STATUS);
   26ca8:	8898      	ldrh	r0, [r3, #4]
   26caa:	f248 0214 	movw	r2, #32788	; 0x8014
   26cae:	f7ef be31 	b.w	16914 <state_status_u8.constprop.0.isra.0>

00026cb2 <friend_status>:
{
   26cb2:	460b      	mov	r3, r1
   26cb4:	4611      	mov	r1, r2
	return state_status_u8(model, ctx, buf, OP_FRIEND_STATUS);
   26cb6:	8898      	ldrh	r0, [r3, #4]
   26cb8:	f248 0211 	movw	r2, #32785	; 0x8011
   26cbc:	f7ef be2a 	b.w	16914 <state_status_u8.constprop.0.isra.0>

00026cc0 <ttl_status>:
{
   26cc0:	460b      	mov	r3, r1
   26cc2:	4611      	mov	r1, r2
	return state_status_u8(model, ctx, buf, OP_DEFAULT_TTL_STATUS);
   26cc4:	8898      	ldrh	r0, [r3, #4]
   26cc6:	f248 020e 	movw	r2, #32782	; 0x800e
   26cca:	f7ef be23 	b.w	16914 <state_status_u8.constprop.0.isra.0>

00026cce <beacon_status>:
{
   26cce:	460b      	mov	r3, r1
   26cd0:	4611      	mov	r1, r2
	return state_status_u8(model, ctx, buf, OP_BEACON_STATUS);
   26cd2:	8898      	ldrh	r0, [r3, #4]
   26cd4:	f248 020b 	movw	r2, #32779	; 0x800b
   26cd8:	f7ef be1c 	b.w	16914 <state_status_u8.constprop.0.isra.0>

00026cdc <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
   26cdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
   26cde:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   26ce0:	1dc3      	adds	r3, r0, #7
{
   26ce2:	4605      	mov	r5, r0
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   26ce4:	f023 0303 	bic.w	r3, r3, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   26ce8:	1e50      	subs	r0, r2, #1
{
   26cea:	460e      	mov	r6, r1
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   26cec:	b280      	uxth	r0, r0
{
   26cee:	4614      	mov	r4, r2
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   26cf0:	801a      	strh	r2, [r3, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   26cf2:	2100      	movs	r1, #0
   26cf4:	2204      	movs	r2, #4
   26cf6:	fb06 5000 	mla	r0, r6, r0, r5
   26cfa:	f7fd f860 	bl	23dbe <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
   26cfe:	3c02      	subs	r4, #2
   26d00:	b2a4      	uxth	r4, r4
   26d02:	f64f 77ff 	movw	r7, #65535	; 0xffff
   26d06:	42bc      	cmp	r4, r7
   26d08:	d101      	bne.n	26d0e <mem_init+0x32>
		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
   26d0a:	b003      	add	sp, #12
   26d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
   26d0e:	1c63      	adds	r3, r4, #1
   26d10:	b29b      	uxth	r3, r3
   26d12:	4373      	muls	r3, r6
		next = (uint32_t)((uint8_t *) mem_pool +
   26d14:	18ea      	adds	r2, r5, r3
   26d16:	9201      	str	r2, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   26d18:	1b98      	subs	r0, r3, r6
   26d1a:	2204      	movs	r2, #4
   26d1c:	eb0d 0102 	add.w	r1, sp, r2
   26d20:	4428      	add	r0, r5
   26d22:	3c01      	subs	r4, #1
   26d24:	f7fd f840 	bl	23da8 <memcpy>
   26d28:	b2a4      	uxth	r4, r4
   26d2a:	e7ec      	b.n	26d06 <mem_init+0x2a>

00026d2c <mem_acquire>:

void *mem_acquire(void **mem_head)
{
   26d2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
   26d2e:	6804      	ldr	r4, [r0, #0]
{
   26d30:	4605      	mov	r5, r0
	if (*mem_head) {
   26d32:	b18c      	cbz	r4, 26d58 <mem_acquire+0x2c>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   26d34:	1de3      	adds	r3, r4, #7
   26d36:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
   26d3a:	2204      	movs	r2, #4
   26d3c:	4621      	mov	r1, r4
   26d3e:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   26d42:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
   26d44:	f7fd f830 	bl	23da8 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
   26d48:	9b01      	ldr	r3, [sp, #4]
   26d4a:	b123      	cbz	r3, 26d56 <mem_acquire+0x2a>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   26d4c:	1dda      	adds	r2, r3, #7
   26d4e:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
   26d52:	3e01      	subs	r6, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   26d54:	8016      	strh	r6, [r2, #0]
				free_count;
		}

		*mem_head = head;
   26d56:	602b      	str	r3, [r5, #0]
		return mem;
	}

	return NULL;
}
   26d58:	4620      	mov	r0, r4
   26d5a:	b002      	add	sp, #8
   26d5c:	bd70      	pop	{r4, r5, r6, pc}

00026d5e <mem_release>:

void mem_release(void *mem, void **mem_head)
{
   26d5e:	b570      	push	{r4, r5, r6, lr}
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
   26d60:	680c      	ldr	r4, [r1, #0]
{
   26d62:	4606      	mov	r6, r0
   26d64:	460d      	mov	r5, r1
	if (*mem_head) {
   26d66:	b11c      	cbz	r4, 26d70 <mem_release+0x12>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   26d68:	1de3      	adds	r3, r4, #7
   26d6a:	f023 0303 	bic.w	r3, r3, #3
   26d6e:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
   26d70:	2204      	movs	r2, #4
   26d72:	4629      	mov	r1, r5
   26d74:	4630      	mov	r0, r6
   26d76:	f7fd f817 	bl	23da8 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
   26d7a:	1df2      	adds	r2, r6, #7
   26d7c:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
   26d80:	1c63      	adds	r3, r4, #1
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
   26d82:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
   26d84:	602e      	str	r6, [r5, #0]
}
   26d86:	bd70      	pop	{r4, r5, r6, pc}

00026d88 <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
   26d88:	fb02 0001 	mla	r0, r2, r1, r0
   26d8c:	4770      	bx	lr

00026d8e <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
   26d8e:	1a40      	subs	r0, r0, r1
   26d90:	b280      	uxth	r0, r0
}
   26d92:	fbb0 f0f2 	udiv	r0, r0, r2
   26d96:	4770      	bx	lr

00026d98 <mem_rcopy>:
/**
 * @brief  Copy bytes in reverse
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
   26d98:	b510      	push	{r4, lr}
	src += len;
   26d9a:	4411      	add	r1, r2
	while (len--) {
   26d9c:	3801      	subs	r0, #1
   26d9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   26da2:	3a01      	subs	r2, #1
   26da4:	b292      	uxth	r2, r2
   26da6:	429a      	cmp	r2, r3
   26da8:	d100      	bne.n	26dac <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
   26daa:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
   26dac:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   26db0:	f800 4f01 	strb.w	r4, [r0, #1]!
   26db4:	e7f5      	b.n	26da2 <mem_rcopy+0xa>

00026db6 <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
   26db6:	4401      	add	r1, r0
   26db8:	4288      	cmp	r0, r1
   26dba:	d101      	bne.n	26dc0 <mem_nz+0xa>
		if (*src++) {
			return 1;
		}
	}

	return 0;
   26dbc:	2000      	movs	r0, #0
   26dbe:	4770      	bx	lr
		if (*src++) {
   26dc0:	f810 3b01 	ldrb.w	r3, [r0], #1
   26dc4:	2b00      	cmp	r3, #0
   26dc6:	d0f7      	beq.n	26db8 <mem_nz+0x2>
			return 1;
   26dc8:	2001      	movs	r0, #1
}
   26dca:	4770      	bx	lr

00026dcc <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
   26dcc:	6010      	str	r0, [r2, #0]
   26dce:	6008      	str	r0, [r1, #0]

	return link;
}
   26dd0:	4770      	bx	lr

00026dd2 <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
   26dd2:	680a      	ldr	r2, [r1, #0]
{
   26dd4:	4603      	mov	r3, r0
	if (*head != *tail) {
   26dd6:	6800      	ldr	r0, [r0, #0]
   26dd8:	4290      	cmp	r0, r2
   26dda:	f04f 0200 	mov.w	r2, #0
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
   26dde:	bf0a      	itet	eq
   26de0:	600a      	streq	r2, [r1, #0]
		return NULL;
   26de2:	4610      	movne	r0, r2
	*head = *tail = NULL;
   26de4:	601a      	streq	r2, [r3, #0]

	return old_head;
}
   26de6:	4770      	bx	lr

00026de8 <memq_enqueue>:
 * @param mem[in]      The memory payload to be enqueued. Pointed to by old tail
 * @param tail[in,out] Tail of queue. Will be updated to point to link
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
   26de8:	b510      	push	{r4, lr}
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
   26dea:	6814      	ldr	r4, [r2, #0]
   26dec:	6020      	str	r0, [r4, #0]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
   26dee:	6814      	ldr	r4, [r2, #0]
   26df0:	6061      	str	r1, [r4, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	cpu_dmb(); /* Ensure data accesses are synchronized */
	*tail = link; /* Commit: enqueue of memq node */
   26df2:	6010      	str	r0, [r2, #0]

	return link;
}
   26df4:	bd10      	pop	{r4, pc}

00026df6 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
   26df6:	4288      	cmp	r0, r1
   26df8:	d003      	beq.n	26e02 <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
   26dfa:	b11a      	cbz	r2, 26e04 <memq_peek+0xe>
		*mem = head->mem;
   26dfc:	6843      	ldr	r3, [r0, #4]
   26dfe:	6013      	str	r3, [r2, #0]
   26e00:	4770      	bx	lr
		return NULL;
   26e02:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
   26e04:	4770      	bx	lr

00026e06 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
   26e06:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
   26e08:	4283      	cmp	r3, r0
   26e0a:	d009      	beq.n	26e20 <memq_dequeue+0x1a>
	if (mem) {
   26e0c:	b122      	cbz	r2, 26e18 <memq_dequeue+0x12>
		*mem = head->mem;
   26e0e:	6858      	ldr	r0, [r3, #4]
   26e10:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
   26e12:	681a      	ldr	r2, [r3, #0]
   26e14:	600a      	str	r2, [r1, #0]

	return old_head;
   26e16:	e001      	b.n	26e1c <memq_dequeue+0x16>
	if (old_head == NULL) {
   26e18:	2b00      	cmp	r3, #0
   26e1a:	d1fa      	bne.n	26e12 <memq_dequeue+0xc>
}
   26e1c:	4618      	mov	r0, r3
   26e1e:	4770      	bx	lr
		return NULL; /* queue is empty */
   26e20:	2300      	movs	r3, #0
   26e22:	e7fb      	b.n	26e1c <memq_dequeue+0x16>

00026e24 <util_ones_count_get>:
 * @param octets_len Must not be bigger than 255/8 = 31 bytes
 *
 * @return popcnt of 'octets'
 */
uint8_t util_ones_count_get(uint8_t *octets, uint8_t octets_len)
{
   26e24:	b510      	push	{r4, lr}
   26e26:	1e42      	subs	r2, r0, #1
	uint8_t one_count = 0U;
   26e28:	2000      	movs	r0, #0

	while (octets_len--) {
   26e2a:	3901      	subs	r1, #1
   26e2c:	b2c9      	uxtb	r1, r1
   26e2e:	29ff      	cmp	r1, #255	; 0xff
   26e30:	d100      	bne.n	26e34 <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
   26e32:	bd10      	pop	{r4, pc}
		bite = *octets;
   26e34:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
   26e38:	2b00      	cmp	r3, #0
   26e3a:	d0f6      	beq.n	26e2a <util_ones_count_get+0x6>
			bite &= (bite - 1);
   26e3c:	b25b      	sxtb	r3, r3
   26e3e:	1e5c      	subs	r4, r3, #1
   26e40:	4023      	ands	r3, r4
			one_count++;
   26e42:	3001      	adds	r0, #1
			bite &= (bite - 1);
   26e44:	b2db      	uxtb	r3, r3
			one_count++;
   26e46:	b2c0      	uxtb	r0, r0
   26e48:	e7f6      	b.n	26e38 <util_ones_count_get+0x14>

00026e4a <ticker_dequeue>:
{
   26e4a:	b5f0      	push	{r4, r5, r6, r7, lr}
	previous = instance->ticker_id_head;
   26e4c:	7f42      	ldrb	r2, [r0, #29]
	node = &instance->nodes[0];
   26e4e:	6806      	ldr	r6, [r0, #0]
{
   26e50:	4605      	mov	r5, r0
   26e52:	468c      	mov	ip, r1
	previous = instance->ticker_id_head;
   26e54:	4613      	mov	r3, r2
	total = 0U;
   26e56:	2000      	movs	r0, #0
	while (current != TICKER_NULL) {
   26e58:	2aff      	cmp	r2, #255	; 0xff
   26e5a:	d101      	bne.n	26e60 <ticker_dequeue+0x16>
		return 0;
   26e5c:	2000      	movs	r0, #0
}
   26e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
   26e60:	eb02 0442 	add.w	r4, r2, r2, lsl #1
   26e64:	0127      	lsls	r7, r4, #4
   26e66:	eb06 1404 	add.w	r4, r6, r4, lsl #4
		if (current == id) {
   26e6a:	4562      	cmp	r2, ip
		total += ticker_current->ticks_to_expire;
   26e6c:	68a1      	ldr	r1, [r4, #8]
		current = ticker_current->next;
   26e6e:	5df7      	ldrb	r7, [r6, r7]
		total += ticker_current->ticks_to_expire;
   26e70:	4408      	add	r0, r1
		if (current == id) {
   26e72:	d002      	beq.n	26e7a <ticker_dequeue+0x30>
   26e74:	4613      	mov	r3, r2
		current = ticker_current->next;
   26e76:	463a      	mov	r2, r7
   26e78:	e7ee      	b.n	26e58 <ticker_dequeue+0xe>
	if (previous == current) {
   26e7a:	4293      	cmp	r3, r2
   26e7c:	d100      	bne.n	26e80 <ticker_dequeue+0x36>
		instance->ticker_id_head = ticker_current->next;
   26e7e:	776f      	strb	r7, [r5, #29]
	node[previous].next = ticker_current->next;
   26e80:	b21b      	sxth	r3, r3
   26e82:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   26e86:	011b      	lsls	r3, r3, #4
   26e88:	54f7      	strb	r7, [r6, r3]
	if (ticker_current->next != TICKER_NULL) {
   26e8a:	7823      	ldrb	r3, [r4, #0]
   26e8c:	2bff      	cmp	r3, #255	; 0xff
   26e8e:	d0e6      	beq.n	26e5e <ticker_dequeue+0x14>
		node[ticker_current->next].ticks_to_expire += timeout;
   26e90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   26e94:	eb06 1303 	add.w	r3, r6, r3, lsl #4
   26e98:	689a      	ldr	r2, [r3, #8]
   26e9a:	440a      	add	r2, r1
   26e9c:	609a      	str	r2, [r3, #8]
	return (total + timeout);
   26e9e:	e7de      	b.n	26e5e <ticker_dequeue+0x14>

00026ea0 <ticks_to_expire_prep>:
{
   26ea0:	b530      	push	{r4, r5, lr}
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   26ea2:	1a55      	subs	r5, r2, r1
   26ea4:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
   26ea8:	6883      	ldr	r3, [r0, #8]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   26eaa:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   26eac:	d109      	bne.n	26ec2 <ticks_to_expire_prep+0x22>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   26eae:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   26eb2:	442b      	add	r3, r5
	if (ticks_to_expire > ticks_to_expire_minus) {
   26eb4:	42a3      	cmp	r3, r4
   26eb6:	d90e      	bls.n	26ed6 <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
   26eb8:	1b1b      	subs	r3, r3, r4
		ticks_to_expire_minus = 0U;
   26eba:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
   26ebc:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   26ebe:	6144      	str	r4, [r0, #20]
}
   26ec0:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   26ec2:	1a8a      	subs	r2, r1, r2
   26ec4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   26ec8:	4293      	cmp	r3, r2
   26eca:	d901      	bls.n	26ed0 <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
   26ecc:	1a9b      	subs	r3, r3, r2
   26ece:	e7f1      	b.n	26eb4 <ticks_to_expire_prep+0x14>
			ticks_to_expire_minus +=
   26ed0:	4414      	add	r4, r2
   26ed2:	1ae4      	subs	r4, r4, r3
			ticks_to_expire = 0U;
   26ed4:	2300      	movs	r3, #0
		ticks_to_expire_minus -= ticks_to_expire;
   26ed6:	1ae4      	subs	r4, r4, r3
		ticks_to_expire = 0U;
   26ed8:	2300      	movs	r3, #0
   26eda:	e7ef      	b.n	26ebc <ticks_to_expire_prep+0x1c>

00026edc <ticker_job_op_cb>:
{
   26edc:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   26ede:	2200      	movs	r2, #0
   26ee0:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
   26ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	user_op->status = status;
   26ee4:	6299      	str	r1, [r3, #40]	; 0x28
{
   26ee6:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
   26ee8:	b10a      	cbz	r2, 26eee <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   26eea:	6b19      	ldr	r1, [r3, #48]	; 0x30
   26eec:	4710      	bx	r2
}
   26eee:	4770      	bx	lr

00026ef0 <ticker_job_list_insert>:
{
   26ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26ef4:	b089      	sub	sp, #36	; 0x24
	node = &instance->nodes[0];
   26ef6:	6803      	ldr	r3, [r0, #0]
   26ef8:	9303      	str	r3, [sp, #12]
	users = &instance->users[0];
   26efa:	6843      	ldr	r3, [r0, #4]
   26efc:	9305      	str	r3, [sp, #20]
	while (count_user--) {
   26efe:	7a43      	ldrb	r3, [r0, #9]
{
   26f00:	4606      	mov	r6, r0
   26f02:	4688      	mov	r8, r1
   26f04:	3b01      	subs	r3, #1
   26f06:	fa5f fa83 	uxtb.w	sl, r3
	while (count_user--) {
   26f0a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   26f0e:	d102      	bne.n	26f16 <ticker_job_list_insert+0x26>
}
   26f10:	b009      	add	sp, #36	; 0x24
   26f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		user = &users[count_user];
   26f16:	9b05      	ldr	r3, [sp, #20]
   26f18:	eb03 0bca 	add.w	fp, r3, sl, lsl #3
		user_ops = (void *)&user->user_op[0];
   26f1c:	f8db 3004 	ldr.w	r3, [fp, #4]
		user_ops_first = user->first;
   26f20:	f89b 7001 	ldrb.w	r7, [fp, #1]
		user_ops = (void *)&user->user_op[0];
   26f24:	9304      	str	r3, [sp, #16]
		while ((insert_head != TICKER_NULL) ||
   26f26:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   26f2a:	d076      	beq.n	2701a <ticker_job_list_insert+0x12a>
				ticker = &node[id_insert];
   26f2c:	eb08 0448 	add.w	r4, r8, r8, lsl #1
   26f30:	9a03      	ldr	r2, [sp, #12]
   26f32:	f8cd 8008 	str.w	r8, [sp, #8]
   26f36:	0123      	lsls	r3, r4, #4
				user_op = NULL;
   26f38:	2500      	movs	r5, #0
				insert_head = ticker->next;
   26f3a:	f812 8003 	ldrb.w	r8, [r2, r3]
				ticker = &node[id_insert];
   26f3e:	eb02 1404 	add.w	r4, r2, r4, lsl #4
	ticker->next = TICKER_NULL;
   26f42:	23ff      	movs	r3, #255	; 0xff
   26f44:	7023      	strb	r3, [r4, #0]
	ticker_new = &node[id];
   26f46:	f9bd c008 	ldrsh.w	ip, [sp, #8]
	node = &instance->nodes[0];
   26f4a:	6830      	ldr	r0, [r6, #0]
	ticker_new = &node[id];
   26f4c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   26f50:	ea4f 120c 	mov.w	r2, ip, lsl #4
   26f54:	eb00 1c0c 	add.w	ip, r0, ip, lsl #4
   26f58:	9206      	str	r2, [sp, #24]
	ticks_to_expire = ticker_new->ticks_to_expire;
   26f5a:	f8dc 2008 	ldr.w	r2, [ip, #8]
   26f5e:	9201      	str	r2, [sp, #4]
	current = instance->ticker_id_head;
   26f60:	7f72      	ldrb	r2, [r6, #29]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   26f62:	2aff      	cmp	r2, #255	; 0xff
   26f64:	d00c      	beq.n	26f80 <ticker_job_list_insert+0x90>
		(ticker_current = &node[current])->ticks_to_expire))) {
   26f66:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
   26f6a:	ea4f 110e 	mov.w	r1, lr, lsl #4
   26f6e:	eb00 1e0e 	add.w	lr, r0, lr, lsl #4
   26f72:	9107      	str	r1, [sp, #28]
		(ticks_to_expire_current =
   26f74:	f8de 9008 	ldr.w	r9, [lr, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   26f78:	9901      	ldr	r1, [sp, #4]
   26f7a:	4549      	cmp	r1, r9
   26f7c:	f080 8085 	bcs.w	2708a <ticker_job_list_insert+0x19a>
	if (previous == TICKER_NULL) {
   26f80:	2bff      	cmp	r3, #255	; 0xff
		node[previous].next = id;
   26f82:	bf18      	it	ne
   26f84:	b21b      	sxthne	r3, r3
	ticker_new->ticks_to_expire = ticks_to_expire;
   26f86:	9901      	ldr	r1, [sp, #4]
   26f88:	f8cc 1008 	str.w	r1, [ip, #8]
		node[previous].next = id;
   26f8c:	bf18      	it	ne
   26f8e:	eb03 0343 	addne.w	r3, r3, r3, lsl #1
	ticker_new->next = current;
   26f92:	9906      	ldr	r1, [sp, #24]
		instance->ticker_id_head = id;
   26f94:	bf08      	it	eq
   26f96:	9b02      	ldreq	r3, [sp, #8]
	ticker_new->next = current;
   26f98:	5442      	strb	r2, [r0, r1]
		node[previous].next = id;
   26f9a:	bf1d      	ittte	ne
   26f9c:	011b      	lslne	r3, r3, #4
   26f9e:	9902      	ldrne	r1, [sp, #8]
   26fa0:	54c1      	strbne	r1, [r0, r3]
		instance->ticker_id_head = id;
   26fa2:	7773      	strbeq	r3, [r6, #29]
	if (current != TICKER_NULL) {
   26fa4:	2aff      	cmp	r2, #255	; 0xff
   26fa6:	d007      	beq.n	26fb8 <ticker_job_list_insert+0xc8>
		node[current].ticks_to_expire -= ticks_to_expire;
   26fa8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   26fac:	eb00 1202 	add.w	r2, r0, r2, lsl #4
   26fb0:	9901      	ldr	r1, [sp, #4]
   26fb2:	6893      	ldr	r3, [r2, #8]
   26fb4:	1a5b      	subs	r3, r3, r1
   26fb6:	6093      	str	r3, [r2, #8]
	ticker->req = ticker->ack + 1;
   26fb8:	78a3      	ldrb	r3, [r4, #2]
   26fba:	3301      	adds	r3, #1
   26fbc:	7063      	strb	r3, [r4, #1]
			if (user_op) {
   26fbe:	2d00      	cmp	r5, #0
   26fc0:	d0b1      	beq.n	26f26 <ticker_job_list_insert+0x36>
				ticker_job_op_cb(user_op, status);
   26fc2:	2100      	movs	r1, #0
   26fc4:	4628      	mov	r0, r5
   26fc6:	f7ff ff89 	bl	26edc <ticker_job_op_cb>
				if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   26fca:	6863      	ldr	r3, [r4, #4]
   26fcc:	2b00      	cmp	r3, #0
   26fce:	d1aa      	bne.n	26f26 <ticker_job_list_insert+0x36>
					ticker->fp_op_func =
   26fd0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   26fd2:	6223      	str	r3, [r4, #32]
					ticker->op_context =
   26fd4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   26fd6:	6263      	str	r3, [r4, #36]	; 0x24
   26fd8:	e7a5      	b.n	26f26 <ticker_job_list_insert+0x36>
				user_op = &user_ops[user_ops_first];
   26fda:	9a04      	ldr	r2, [sp, #16]
   26fdc:	2334      	movs	r3, #52	; 0x34
   26fde:	fb17 f303 	smulbb	r3, r7, r3
   26fe2:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
   26fe4:	3701      	adds	r7, #1
				if (first == user->count_user_op) {
   26fe6:	f89b 2000 	ldrb.w	r2, [fp]
				first = user_ops_first + 1;
   26fea:	b2ff      	uxtb	r7, r7
					first = 0U;
   26fec:	42ba      	cmp	r2, r7
   26fee:	bf08      	it	eq
   26ff0:	2700      	moveq	r7, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   26ff2:	9a04      	ldr	r2, [sp, #16]
   26ff4:	5cd3      	ldrb	r3, [r2, r3]
   26ff6:	2b04      	cmp	r3, #4
   26ff8:	d10f      	bne.n	2701a <ticker_job_list_insert+0x12a>
				id_insert = user_op->id;
   26ffa:	786b      	ldrb	r3, [r5, #1]
   26ffc:	9302      	str	r3, [sp, #8]
				ticker = &node[id_insert];
   26ffe:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   27002:	9b03      	ldr	r3, [sp, #12]
   27004:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				if (((ticker->req -
   27008:	7863      	ldrb	r3, [r4, #1]
				      ticker->ack) & 0xff) != 0U) {
   2700a:	78a2      	ldrb	r2, [r4, #2]
				if (((ticker->req -
   2700c:	1a9b      	subs	r3, r3, r2
				      ticker->ack) & 0xff) != 0U) {
   2700e:	b2db      	uxtb	r3, r3
				if (((ticker->req -
   27010:	b153      	cbz	r3, 27028 <ticker_job_list_insert+0x138>
					ticker_job_op_cb(user_op,
   27012:	2101      	movs	r1, #1
   27014:	4628      	mov	r0, r5
   27016:	f7ff ff61 	bl	26edc <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
   2701a:	f89b 3002 	ldrb.w	r3, [fp, #2]
   2701e:	42bb      	cmp	r3, r7
   27020:	d1db      	bne.n	26fda <ticker_job_list_insert+0xea>
   27022:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   27026:	e76e      	b.n	26f06 <ticker_job_list_insert+0x16>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   27028:	8aab      	ldrh	r3, [r5, #20]
				ticker_job_op_start(ticker, user_op,
   2702a:	6971      	ldr	r1, [r6, #20]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   2702c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   27030:	4293      	cmp	r3, r2
   27032:	d006      	beq.n	27042 <ticker_job_list_insert+0x152>
		ticker->must_expire =
   27034:	f64f 72ff 	movw	r2, #65535	; 0xffff
   27038:	1a98      	subs	r0, r3, r2
   2703a:	4242      	negs	r2, r0
   2703c:	4142      	adcs	r2, r0
   2703e:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
   27042:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   27044:	62a2      	str	r2, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   27046:	68ea      	ldr	r2, [r5, #12]
   27048:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   2704a:	692a      	ldr	r2, [r5, #16]
   2704c:	6222      	str	r2, [r4, #32]
	ticker->lazy_periodic =
   2704e:	f64f 72fd 	movw	r2, #65533	; 0xfffd
   27052:	4293      	cmp	r3, r2
   27054:	bf88      	it	hi
   27056:	2300      	movhi	r3, #0
   27058:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
   2705a:	69ab      	ldr	r3, [r5, #24]
   2705c:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
   2705e:	69eb      	ldr	r3, [r5, #28]
   27060:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
   27062:	6a2b      	ldr	r3, [r5, #32]
   27064:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0U;
   27066:	f04f 0900 	mov.w	r9, #0
	ticker->ticks_to_expire = start->ticks_first;
   2706a:	68ab      	ldr	r3, [r5, #8]
   2706c:	60a3      	str	r3, [r4, #8]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   2706e:	686a      	ldr	r2, [r5, #4]
	ticker->ticks_to_expire_minus = 0U;
   27070:	f8c4 9014 	str.w	r9, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   27074:	4620      	mov	r0, r4
   27076:	f7ff ff13 	bl	26ea0 <ticks_to_expire_prep>
	ticker->force = 1U;
   2707a:	f04f 0301 	mov.w	r3, #1
	ticker->remainder_current = 0U;
   2707e:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   27082:	f8a4 901e 	strh.w	r9, [r4, #30]
	ticker->force = 1U;
   27086:	70e3      	strb	r3, [r4, #3]
}
   27088:	e75b      	b.n	26f42 <ticker_job_list_insert+0x52>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
   2708a:	9901      	ldr	r1, [sp, #4]
   2708c:	ebb1 0109 	subs.w	r1, r1, r9
   27090:	9101      	str	r1, [sp, #4]
   27092:	d105      	bne.n	270a0 <ticker_job_list_insert+0x1b0>
   27094:	f8bc 101e 	ldrh.w	r1, [ip, #30]
   27098:	f8be e01e 	ldrh.w	lr, [lr, #30]
   2709c:	4571      	cmp	r1, lr
   2709e:	d803      	bhi.n	270a8 <ticker_job_list_insert+0x1b8>
		current = ticker_current->next;
   270a0:	4613      	mov	r3, r2
   270a2:	9a07      	ldr	r2, [sp, #28]
   270a4:	5c82      	ldrb	r2, [r0, r2]
   270a6:	e75c      	b.n	26f62 <ticker_job_list_insert+0x72>
   270a8:	f8cd 9004 	str.w	r9, [sp, #4]
   270ac:	e768      	b.n	26f80 <ticker_job_list_insert+0x90>

000270ae <ticker_worker>:
{
   270ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   270b2:	7f86      	ldrb	r6, [r0, #30]
	instance->worker_trigger = 1U;
   270b4:	2301      	movs	r3, #1
{
   270b6:	b08d      	sub	sp, #52	; 0x34
   270b8:	4605      	mov	r5, r0
	instance->worker_trigger = 1U;
   270ba:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
   270bc:	b91e      	cbnz	r6, 270c6 <ticker_worker+0x18>
	if (instance->ticker_id_head == TICKER_NULL) {
   270be:	7f43      	ldrb	r3, [r0, #29]
   270c0:	2bff      	cmp	r3, #255	; 0xff
   270c2:	d103      	bne.n	270cc <ticker_worker+0x1e>
		instance->worker_trigger = 0U;
   270c4:	77c6      	strb	r6, [r0, #31]
}
   270c6:	b00d      	add	sp, #52	; 0x34
   270c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   270cc:	f7f6 f8f2 	bl	1d2b4 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   270d0:	696b      	ldr	r3, [r5, #20]
	ticker_id_head = instance->ticker_id_head;
   270d2:	7f6f      	ldrb	r7, [r5, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   270d4:	1ac0      	subs	r0, r0, r3
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   270d6:	7f2b      	ldrb	r3, [r5, #28]
   270d8:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   270da:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   270de:	d004      	beq.n	270ea <ticker_worker+0x3c>
		if (instance->ticks_slot_previous > ticks_elapsed) {
   270e0:	69ae      	ldr	r6, [r5, #24]
	uint8_t slot_reserved = 0;
   270e2:	455e      	cmp	r6, fp
   270e4:	bf94      	ite	ls
   270e6:	2600      	movls	r6, #0
   270e8:	2601      	movhi	r6, #1
	node = &instance->nodes[0];
   270ea:	f8d5 9000 	ldr.w	r9, [r5]
	ticks_expired = 0U;
   270ee:	f04f 0800 	mov.w	r8, #0
	while (ticker_id_head != TICKER_NULL) {
   270f2:	2fff      	cmp	r7, #255	; 0xff
   270f4:	d11a      	bne.n	2712c <ticker_worker+0x7e>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   270f6:	7aea      	ldrb	r2, [r5, #11]
   270f8:	7aab      	ldrb	r3, [r5, #10]
   270fa:	4293      	cmp	r3, r2
   270fc:	d105      	bne.n	2710a <ticker_worker+0x5c>
	uint8_t idx = *ticks_elapsed_index + 1;
   270fe:	3301      	adds	r3, #1
   27100:	b2db      	uxtb	r3, r3
		idx = 0U;
   27102:	2b02      	cmp	r3, #2
   27104:	bf08      	it	eq
   27106:	2300      	moveq	r3, #0
	*ticks_elapsed_index = idx;
   27108:	72eb      	strb	r3, [r5, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   2710a:	7aeb      	ldrb	r3, [r5, #11]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   2710c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   2710e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   27112:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   27114:	f8c3 800c 	str.w	r8, [r3, #12]
	instance->worker_trigger = 0U;
   27118:	2300      	movs	r3, #0
   2711a:	77eb      	strb	r3, [r5, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   2711c:	2104      	movs	r1, #4
   2711e:	462b      	mov	r3, r5
   27120:	2003      	movs	r0, #3
   27122:	46a4      	mov	ip, r4
}
   27124:	b00d      	add	sp, #52	; 0x34
   27126:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   2712a:	4760      	bx	ip
		ticker = &node[ticker_id_head];
   2712c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   27130:	eb09 1407 	add.w	r4, r9, r7, lsl #4
   27134:	013a      	lsls	r2, r7, #4
		ticks_to_expire = ticker->ticks_to_expire;
   27136:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   27138:	459b      	cmp	fp, r3
   2713a:	d3dc      	bcc.n	270f6 <ticker_worker+0x48>
		ticks_elapsed -= ticks_to_expire;
   2713c:	ebab 0b03 	sub.w	fp, fp, r3
		ticks_expired += ticks_to_expire;
   27140:	4498      	add	r8, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   27142:	78a3      	ldrb	r3, [r4, #2]
   27144:	9303      	str	r3, [sp, #12]
		ticker_id_head = ticker->next;
   27146:	f819 7002 	ldrb.w	r7, [r9, r2]
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   2714a:	7863      	ldrb	r3, [r4, #1]
   2714c:	9a03      	ldr	r2, [sp, #12]
   2714e:	1a9b      	subs	r3, r3, r2
   27150:	b2db      	uxtb	r3, r3
   27152:	2b01      	cmp	r3, #1
   27154:	d1cd      	bne.n	270f2 <ticker_worker+0x44>
		if (ticker->ticks_slot != 0U &&
   27156:	69a3      	ldr	r3, [r4, #24]
   27158:	9304      	str	r3, [sp, #16]
   2715a:	2b00      	cmp	r3, #0
   2715c:	d034      	beq.n	271c8 <ticker_worker+0x11a>
   2715e:	2e00      	cmp	r6, #0
   27160:	f040 80a8 	bne.w	272b4 <ticker_worker+0x206>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   27164:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
   27168:	9305      	str	r3, [sp, #20]
   2716a:	3380      	adds	r3, #128	; 0x80
   2716c:	d02c      	beq.n	271c8 <ticker_worker+0x11a>
   2716e:	2fff      	cmp	r7, #255	; 0xff
   27170:	d02a      	beq.n	271c8 <ticker_worker+0x11a>
		int32_t lazy_current = ticker->lazy_current;
   27172:	8be3      	ldrh	r3, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
   27174:	8ba2      	ldrh	r2, [r4, #28]
		uint32_t current_age = ticker->ticks_periodic +
   27176:	6861      	ldr	r1, [r4, #4]
		if (lazy_current >= ticker->lazy_periodic) {
   27178:	4293      	cmp	r3, r2
			lazy_current -= ticker->lazy_periodic;
   2717a:	bf28      	it	cs
   2717c:	1a9b      	subcs	r3, r3, r2
		uint32_t current_age = ticker->ticks_periodic +
   2717e:	fb03 1201 	mla	r2, r3, r1, r1
   27182:	9209      	str	r2, [sp, #36]	; 0x24
		uint32_t acc_ticks_to_expire = 0U;
   27184:	2200      	movs	r2, #0
   27186:	9206      	str	r2, [sp, #24]
				(lazy_current - ticker->priority);
   27188:	9a05      	ldr	r2, [sp, #20]
   2718a:	1a9b      	subs	r3, r3, r2
		uint32_t current_age = ticker->ticks_periodic +
   2718c:	46ba      	mov	sl, r7
				(lazy_current - ticker->priority);
   2718e:	930b      	str	r3, [sp, #44]	; 0x2c
			struct ticker_node *ticker_next = &nodes[id_head];
   27190:	fa0f fa8a 	sxth.w	sl, sl
   27194:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
   27198:	ea4f 130a 	mov.w	r3, sl, lsl #4
   2719c:	eb09 1a0a 	add.w	sl, r9, sl, lsl #4
   271a0:	9308      	str	r3, [sp, #32]
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   271a2:	f8da c008 	ldr.w	ip, [sl, #8]
   271a6:	9b06      	ldr	r3, [sp, #24]
   271a8:	4463      	add	r3, ip
   271aa:	9306      	str	r3, [sp, #24]
			if (acc_ticks_to_expire > ticker->ticks_slot) {
   271ac:	9a06      	ldr	r2, [sp, #24]
   271ae:	9b04      	ldr	r3, [sp, #16]
   271b0:	4293      	cmp	r3, r2
   271b2:	d309      	bcc.n	271c8 <ticker_worker+0x11a>
			if (ticker_next->ticks_slot == 0U) {
   271b4:	f8da 3018 	ldr.w	r3, [sl, #24]
   271b8:	2b00      	cmp	r3, #0
   271ba:	d13a      	bne.n	27232 <ticker_worker+0x184>
			id_head = ticker_next->next;
   271bc:	9b08      	ldr	r3, [sp, #32]
   271be:	f819 a003 	ldrb.w	sl, [r9, r3]
		while (id_head != TICKER_NULL) {
   271c2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   271c6:	d1e3      	bne.n	27190 <ticker_worker+0xe2>
		must_expire_skip = 0U;
   271c8:	f04f 0a00 	mov.w	sl, #0
		if (ticker->ext_data) {
   271cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   271ce:	2b00      	cmp	r3, #0
   271d0:	f000 809a 	beq.w	27308 <ticker_worker+0x25a>
			ticker->ext_data->ticks_drift = 0U;
   271d4:	2200      	movs	r2, #0
			ticks_drift = ticker->ext_data->ticks_drift;
   271d6:	6859      	ldr	r1, [r3, #4]
			ticker->ext_data->reschedule_state =
   271d8:	721a      	strb	r2, [r3, #8]
			ticker->ext_data->ticks_drift = 0U;
   271da:	605a      	str	r2, [r3, #4]
		ticker->ack--;
   271dc:	9b03      	ldr	r3, [sp, #12]
   271de:	3b01      	subs	r3, #1
   271e0:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
   271e2:	68e3      	ldr	r3, [r4, #12]
   271e4:	469e      	mov	lr, r3
   271e6:	2b00      	cmp	r3, #0
   271e8:	d083      	beq.n	270f2 <ticker_worker+0x44>
					   ticks_expired -
   271ea:	6960      	ldr	r0, [r4, #20]
   271ec:	696b      	ldr	r3, [r5, #20]
			ticker->timeout_func(ticks_at_expire,
   271ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
					   ticks_expired -
   271f0:	eba8 0000 	sub.w	r0, r8, r0
   271f4:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   271f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   271fa:	f1ba 0f00 	cmp.w	sl, #0
   271fe:	f040 8085 	bne.w	2730c <ticker_worker+0x25e>
   27202:	8be3      	ldrh	r3, [r4, #30]
   27204:	f8d4 c010 	ldr.w	ip, [r4, #16]
   27208:	f8cd c004 	str.w	ip, [sp, #4]
   2720c:	f894 c003 	ldrb.w	ip, [r4, #3]
   27210:	f8cd c000 	str.w	ip, [sp]
   27214:	46f4      	mov	ip, lr
   27216:	47e0      	blx	ip
			if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   27218:	f1ba 0f00 	cmp.w	sl, #0
   2721c:	f47f af69 	bne.w	270f2 <ticker_worker+0x44>
				if (ticker->ticks_slot != 0U) {
   27220:	69a3      	ldr	r3, [r4, #24]
				ticker->lazy_current = 0U;
   27222:	f8a4 a01e 	strh.w	sl, [r4, #30]
					slot_reserved = 1U;
   27226:	2b00      	cmp	r3, #0
				ticker->force = 0U;
   27228:	f884 a003 	strb.w	sl, [r4, #3]
					slot_reserved = 1U;
   2722c:	bf18      	it	ne
   2722e:	2601      	movne	r6, #1
   27230:	e75f      	b.n	270f2 <ticker_worker+0x44>
			int32_t lazy_next = ticker_next->lazy_current;
   27232:	f8ba 201e 	ldrh.w	r2, [sl, #30]
				ticker_next->lazy_periodic > lazy_next;
   27236:	f8ba 001c 	ldrh.w	r0, [sl, #28]
				ticker_next->priority;
   2723a:	f99a e02d 	ldrsb.w	lr, [sl, #45]	; 0x2d
   2723e:	f8cd e01c 	str.w	lr, [sp, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   27242:	f8da e004 	ldr.w	lr, [sl, #4]
			if (!lazy_next_periodic_skip) {
   27246:	4282      	cmp	r2, r0
			int32_t lazy_next = ticker_next->lazy_current;
   27248:	4613      	mov	r3, r2
				lazy_next -= ticker_next->lazy_periodic;
   2724a:	bf28      	it	cs
   2724c:	1a13      	subcs	r3, r2, r0
					  0U :
   2724e:	f1be 0f00 	cmp.w	lr, #0
   27252:	d04d      	beq.n	272f0 <ticker_worker+0x242>
   27254:	ebae 0c0c 	sub.w	ip, lr, ip
				(ticker->ticks_periodic == 0U) ||
   27258:	2900      	cmp	r1, #0
   2725a:	d04b      	beq.n	272f4 <ticker_worker+0x246>
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   2725c:	fb0e cc03 	mla	ip, lr, r3, ip
				(ticker->ticks_periodic == 0U) ||
   27260:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
   27264:	45e6      	cmp	lr, ip
   27266:	bf8c      	ite	hi
   27268:	f04f 0e01 	movhi.w	lr, #1
   2726c:	f04f 0e00 	movls.w	lr, #0
					(ticker->ticks_periodic != 0U) &&
   27270:	bf34      	ite	cc
   27272:	f04f 0c01 	movcc.w	ip, #1
   27276:	f04f 0c00 	movcs.w	ip, #0
			uint8_t next_force = (ticker_next->force > ticker->force);
   2727a:	f89a a003 	ldrb.w	sl, [sl, #3]
   2727e:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
			if (!lazy_next_periodic_skip &&
   27282:	4282      	cmp	r2, r0
			uint8_t next_force = (ticker_next->force > ticker->force);
   27284:	f894 a003 	ldrb.w	sl, [r4, #3]
			if (!lazy_next_periodic_skip &&
   27288:	d398      	bcc.n	271bc <ticker_worker+0x10e>
   2728a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2728c:	4552      	cmp	r2, sl
   2728e:	d811      	bhi.n	272b4 <ticker_worker+0x206>
			    (next_force ||
   27290:	9a07      	ldr	r2, [sp, #28]
   27292:	f112 0f80 	cmn.w	r2, #128	; 0x80
   27296:	d00d      	beq.n	272b4 <ticker_worker+0x206>
				(lazy_next - ticker_next->priority) >
   27298:	1a9b      	subs	r3, r3, r2
			     next_is_critical ||
   2729a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2729c:	4293      	cmp	r3, r2
   2729e:	dd02      	ble.n	272a6 <ticker_worker+0x1f8>
			     (next_has_priority && !current_is_older) ||
   272a0:	f1be 0f00 	cmp.w	lr, #0
   272a4:	d006      	beq.n	272b4 <ticker_worker+0x206>
   272a6:	9b05      	ldr	r3, [sp, #20]
   272a8:	9a07      	ldr	r2, [sp, #28]
   272aa:	4293      	cmp	r3, r2
   272ac:	d186      	bne.n	271bc <ticker_worker+0x10e>
			     (equal_priority && next_is_older))) {
   272ae:	f1bc 0f00 	cmp.w	ip, #0
   272b2:	d083      	beq.n	271bc <ticker_worker+0x10e>
			struct ticker_ext *ext_data = ticker->ext_data;
   272b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		int32_t lazy_current = ticker->lazy_current;
   272b6:	8be2      	ldrh	r2, [r4, #30]
			if (ext_data &&
   272b8:	b14b      	cbz	r3, 272ce <ticker_worker+0x220>
   272ba:	6819      	ldr	r1, [r3, #0]
   272bc:	b1f1      	cbz	r1, 272fc <ticker_worker+0x24e>
			    ext_data->ticks_slot_window != 0U &&
   272be:	7a19      	ldrb	r1, [r3, #8]
   272c0:	b9e1      	cbnz	r1, 272fc <ticker_worker+0x24e>
			    TICKER_RESCHEDULE_STATE_NONE &&
   272c2:	8ba1      	ldrh	r1, [r4, #28]
   272c4:	4291      	cmp	r1, r2
   272c6:	d819      	bhi.n	272fc <ticker_worker+0x24e>
				ext_data->reschedule_state =
   272c8:	f04f 0101 	mov.w	r1, #1
				ext_data->reschedule_state =
   272cc:	7219      	strb	r1, [r3, #8]
			ticker->lazy_current++;
   272ce:	3201      	adds	r2, #1
			if ((ticker->must_expire == 0U) ||
   272d0:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
			ticker->lazy_current++;
   272d4:	b292      	uxth	r2, r2
   272d6:	83e2      	strh	r2, [r4, #30]
			if ((ticker->must_expire == 0U) ||
   272d8:	b131      	cbz	r1, 272e8 <ticker_worker+0x23a>
   272da:	8ba1      	ldrh	r1, [r4, #28]
   272dc:	4291      	cmp	r1, r2
   272de:	d203      	bcs.n	272e8 <ticker_worker+0x23a>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
   272e0:	b17b      	cbz	r3, 27302 <ticker_worker+0x254>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
   272e2:	7a1b      	ldrb	r3, [r3, #8]
   272e4:	2b01      	cmp	r3, #1
   272e6:	d10c      	bne.n	27302 <ticker_worker+0x254>
				ticker->ack--;
   272e8:	9b03      	ldr	r3, [sp, #12]
   272ea:	3b01      	subs	r3, #1
   272ec:	70a3      	strb	r3, [r4, #2]
				continue;
   272ee:	e700      	b.n	270f2 <ticker_worker+0x44>
					  0U :
   272f0:	46f4      	mov	ip, lr
   272f2:	e7b1      	b.n	27258 <ticker_worker+0x1aa>
				(ticker->ticks_periodic == 0U) ||
   272f4:	f04f 0e01 	mov.w	lr, #1
					(ticker->ticks_periodic != 0U) &&
   272f8:	468c      	mov	ip, r1
   272fa:	e7be      	b.n	2727a <ticker_worker+0x1cc>
				ext_data->reschedule_state =
   272fc:	f04f 0100 	mov.w	r1, #0
   27300:	e7e4      	b.n	272cc <ticker_worker+0x21e>
			must_expire_skip = 1U;
   27302:	f04f 0a01 	mov.w	sl, #1
   27306:	e761      	b.n	271cc <ticker_worker+0x11e>
			ticks_drift = 0U;
   27308:	4619      	mov	r1, r3
   2730a:	e767      	b.n	271dc <ticker_worker+0x12e>
			ticker->timeout_func(ticks_at_expire,
   2730c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   27310:	e778      	b.n	27204 <ticker_worker+0x156>

00027312 <ticker_start>:
{
   27312:	b510      	push	{r4, lr}
   27314:	b08a      	sub	sp, #40	; 0x28
	return ticker_start_ext(instance_index, user_id, ticker_id,
   27316:	2400      	movs	r4, #0
   27318:	9409      	str	r4, [sp, #36]	; 0x24
   2731a:	9c14      	ldr	r4, [sp, #80]	; 0x50
   2731c:	9408      	str	r4, [sp, #32]
   2731e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   27320:	9407      	str	r4, [sp, #28]
   27322:	9c12      	ldr	r4, [sp, #72]	; 0x48
   27324:	9406      	str	r4, [sp, #24]
   27326:	9c11      	ldr	r4, [sp, #68]	; 0x44
   27328:	9405      	str	r4, [sp, #20]
   2732a:	9c10      	ldr	r4, [sp, #64]	; 0x40
   2732c:	9404      	str	r4, [sp, #16]
   2732e:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
   27332:	9403      	str	r4, [sp, #12]
   27334:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   27336:	9402      	str	r4, [sp, #8]
   27338:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   2733a:	9401      	str	r4, [sp, #4]
   2733c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2733e:	9400      	str	r4, [sp, #0]
   27340:	f7f0 f888 	bl	17454 <ticker_start_ext>
}
   27344:	b00a      	add	sp, #40	; 0x28
   27346:	bd10      	pop	{r4, pc}

00027348 <ticker_update>:
{
   27348:	b510      	push	{r4, lr}
   2734a:	b088      	sub	sp, #32
	return ticker_update_ext(instance_index, user_id, ticker_id,
   2734c:	2400      	movs	r4, #0
   2734e:	9407      	str	r4, [sp, #28]
   27350:	9c10      	ldr	r4, [sp, #64]	; 0x40
   27352:	9406      	str	r4, [sp, #24]
   27354:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   27356:	9405      	str	r4, [sp, #20]
   27358:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
   2735c:	9404      	str	r4, [sp, #16]
   2735e:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
   27362:	9403      	str	r4, [sp, #12]
   27364:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   27366:	9402      	str	r4, [sp, #8]
   27368:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   2736a:	9401      	str	r4, [sp, #4]
   2736c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   2736e:	9400      	str	r4, [sp, #0]
   27370:	f7f0 f8be 	bl	174f0 <ticker_update_ext>
}
   27374:	b008      	add	sp, #32
   27376:	bd10      	pop	{r4, pc}

00027378 <ticker_ticks_now_get>:
	return cntr_cnt_get();
   27378:	f7f5 bf9c 	b.w	1d2b4 <cntr_cnt_get>

0002737c <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   2737c:	1a40      	subs	r0, r0, r1
}
   2737e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   27382:	4770      	bx	lr

00027384 <ll_addr_read>:

uint8_t *ll_addr_read(uint8_t addr_type, uint8_t *const bdaddr)
{
   27384:	b538      	push	{r3, r4, r5, lr}
	uint8_t *addr;

	addr = ll_addr_get(addr_type);
   27386:	f7f0 f959 	bl	1763c <ll_addr_get>
{
   2738a:	460d      	mov	r5, r1
	if (addr) {
   2738c:	4604      	mov	r4, r0
   2738e:	b120      	cbz	r0, 2739a <ll_addr_read+0x16>
		memcpy(bdaddr, addr, BDADDR_SIZE);
   27390:	4601      	mov	r1, r0
   27392:	2206      	movs	r2, #6
   27394:	4628      	mov	r0, r5
   27396:	f7fc fd07 	bl	23da8 <memcpy>
	}

	return addr;
}
   2739a:	4620      	mov	r0, r4
   2739c:	bd38      	pop	{r3, r4, r5, pc}

0002739e <ll_tx_pwr_lvl_get>:

#include "ll.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
   2739e:	b538      	push	{r3, r4, r5, lr}
   273a0:	4604      	mov	r4, r0
	switch (handle_type) {
   273a2:	2c02      	cmp	r4, #2
{
   273a4:	4608      	mov	r0, r1
   273a6:	461d      	mov	r5, r3
	switch (handle_type) {
   273a8:	d106      	bne.n	273b8 <ll_tx_pwr_lvl_get+0x1a>
#endif /* CONFIG_BT_OBSERVER && CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL*/
#if defined(CONFIG_BT_CONN)
		case (BT_HCI_VS_LL_HANDLE_TYPE_CONN): {
			struct ll_conn *conn;

			conn = ll_connected_get(handle);
   273aa:	f000 fa12 	bl	277d2 <ll_connected_get>
			if (!conn) {
   273ae:	b108      	cbz	r0, 273b4 <ll_tx_pwr_lvl_get+0x16>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
				/* Level desired is maximum available */
				*tx_pwr_lvl = lll_radio_tx_pwr_max_get();
#else  /* !CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
				/* Return default if not multiple TXP */
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   273b0:	2400      	movs	r4, #0
   273b2:	702c      	strb	r4, [r5, #0]
			return BT_HCI_ERR_UNKNOWN_CMD;
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
   273b4:	4620      	mov	r0, r4
   273b6:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_UNKNOWN_CMD;
   273b8:	2401      	movs	r4, #1
   273ba:	e7fb      	b.n	273b4 <ll_tx_pwr_lvl_get+0x16>

000273bc <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
   273bc:	2300      	movs	r3, #0
   273be:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   273c0:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
   273c2:	4770      	bx	lr

000273c4 <meta_evt>:
{
   273c4:	b570      	push	{r4, r5, r6, lr}
	return net_buf_simple_add(&buf->b, len);
   273c6:	f100 0408 	add.w	r4, r0, #8
   273ca:	460e      	mov	r6, r1
   273cc:	4620      	mov	r0, r4
   273ce:	2102      	movs	r1, #2
   273d0:	4615      	mov	r5, r2
   273d2:	f000 ff39 	bl	28248 <net_buf_simple_add>
	hdr->evt = evt;
   273d6:	233e      	movs	r3, #62	; 0x3e
   273d8:	7003      	strb	r3, [r0, #0]
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   273da:	1c6b      	adds	r3, r5, #1
	hdr->len = len;
   273dc:	7043      	strb	r3, [r0, #1]
   273de:	2101      	movs	r1, #1
   273e0:	4620      	mov	r0, r4
   273e2:	f000 ff31 	bl	28248 <net_buf_simple_add>
	me->subevent = subevt;
   273e6:	7006      	strb	r6, [r0, #0]
   273e8:	4629      	mov	r1, r5
   273ea:	4620      	mov	r0, r4
}
   273ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   273f0:	f000 bf2a 	b.w	28248 <net_buf_simple_add>

000273f4 <sys_get_le64>:
{
   273f4:	4603      	mov	r3, r0
}
   273f6:	6800      	ldr	r0, [r0, #0]
   273f8:	6859      	ldr	r1, [r3, #4]
   273fa:	4770      	bx	lr

000273fc <hci_num_cmplt_encode>:
{
   273fc:	b570      	push	{r4, r5, r6, lr}
   273fe:	f100 0408 	add.w	r4, r0, #8
   27402:	460e      	mov	r6, r1
   27404:	4620      	mov	r0, r4
   27406:	2102      	movs	r1, #2
   27408:	4615      	mov	r5, r2
   2740a:	f000 ff1d 	bl	28248 <net_buf_simple_add>
	hdr->evt = evt;
   2740e:	2313      	movs	r3, #19
	hdr->len = len;
   27410:	2105      	movs	r1, #5
	hdr->evt = evt;
   27412:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   27414:	7041      	strb	r1, [r0, #1]
   27416:	4620      	mov	r0, r4
   27418:	f000 ff16 	bl	28248 <net_buf_simple_add>
	ep->num_handles = num_handles;
   2741c:	2301      	movs	r3, #1
   2741e:	7003      	strb	r3, [r0, #0]
	hc->handle = sys_cpu_to_le16(handle);
   27420:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   27424:	f8a0 5003 	strh.w	r5, [r0, #3]
}
   27428:	bd70      	pop	{r4, r5, r6, pc}

0002742a <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
   2742a:	f7f4 ba83 	b.w	1b934 <lll_csrand_get>

0002742e <bt_encrypt_be>:
	return 0;
}

int bt_encrypt_be(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   2742e:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt_be(key, plaintext, enc_data);
   27430:	f000 fd30 	bl	27e94 <ecb_encrypt_be>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   27434:	2000      	movs	r0, #0
   27436:	bd08      	pop	{r3, pc}

00027438 <ll_feat_get>:

#else /* !CONFIG_BT_CTLR_SET_HOST_FEATURE */
uint64_t ll_feat_get(void)
{
	return LL_FEAT;
}
   27438:	208e      	movs	r0, #142	; 0x8e
   2743a:	2100      	movs	r1, #0
   2743c:	4770      	bx	lr

0002743e <disabled_cb>:
   2743e:	f7f8 bde9 	b.w	20014 <z_impl_k_sem_give>

00027442 <rx_demux_conn_tx_ack>:
{
   27442:	b537      	push	{r0, r1, r2, r4, r5, lr}
   27444:	4605      	mov	r5, r0
   27446:	4614      	mov	r4, r2
   27448:	9300      	str	r3, [sp, #0]
   2744a:	f8ad 1006 	strh.w	r1, [sp, #6]
		ull_conn_ack_dequeue();
   2744e:	f7f3 fdf7 	bl	1b040 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   27452:	4621      	mov	r1, r4
   27454:	9a00      	ldr	r2, [sp, #0]
   27456:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   2745a:	f7f3 fe35 	bl	1b0c8 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   2745e:	4620      	mov	r0, r4
   27460:	f7f3 fdb4 	bl	1afcc <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   27464:	466a      	mov	r2, sp
   27466:	f10d 0106 	add.w	r1, sp, #6
   2746a:	4628      	mov	r0, r5
   2746c:	f7f3 fdd2 	bl	1b014 <ull_conn_ack_by_last_peek>
	} while (link);
   27470:	4604      	mov	r4, r0
   27472:	2800      	cmp	r0, #0
   27474:	d1eb      	bne.n	2744e <rx_demux_conn_tx_ack+0xc>
			ll_rx_sched();
   27476:	f7f1 fd81 	bl	18f7c <ll_rx_sched>
}
   2747a:	b003      	add	sp, #12
   2747c:	bd30      	pop	{r4, r5, pc}

0002747e <ll_timeslice_ticker_id_get>:
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   2747e:	2300      	movs	r3, #0
   27480:	7003      	strb	r3, [r0, #0]
	*ticker_id = (TICKER_NODES - FLASH_TICKER_NODES);
   27482:	2306      	movs	r3, #6
   27484:	700b      	strb	r3, [r1, #0]
}
   27486:	4770      	bx	lr

00027488 <lll_prepare>:
{
   27488:	b507      	push	{r0, r1, r2, lr}
	return lll_prepare_resolve(is_abort_cb, abort_cb, prepare_cb,
   2748a:	2300      	movs	r3, #0
   2748c:	e9cd 3300 	strd	r3, r3, [sp]
   27490:	9b04      	ldr	r3, [sp, #16]
   27492:	f7f4 fb87 	bl	1bba4 <lll_prepare_resolve>
}
   27496:	b003      	add	sp, #12
   27498:	f85d fb04 	ldr.w	pc, [sp], #4

0002749c <adv_time_get.constprop.0.isra.0>:
static uint16_t adv_time_get(struct pdu_adv *pdu, struct pdu_adv *pdu_scan,
   2749c:	b530      	push	{r4, r5, lr}
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   2749e:	7804      	ldrb	r4, [r0, #0]
   274a0:	f004 040f 	and.w	r4, r4, #15
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
   274a4:	1e53      	subs	r3, r2, #1
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   274a6:	2c02      	cmp	r4, #2
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
   274a8:	b29d      	uxth	r5, r3
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   274aa:	d10d      	bne.n	274c8 <adv_time_get.constprop.0.isra.0+0x2c>
			adv_size += pdu->len;
   274ac:	7841      	ldrb	r1, [r0, #1]
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
   274ae:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   274b2:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   274b6:	3110      	adds	r1, #16
   274b8:	0058      	lsls	r0, r3, #1
   274ba:	00c9      	lsls	r1, r1, #3
   274bc:	f500 70c8 	add.w	r0, r0, #400	; 0x190
   274c0:	fb01 0002 	mla	r0, r1, r2, r0
			time_us += (BYTES2US(adv_size, PHY_1M) +
   274c4:	b280      	uxth	r0, r0
}
   274c6:	bd30      	pop	{r4, r5, pc}
			if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   274c8:	2c01      	cmp	r4, #1
   274ca:	d016      	beq.n	274fa <adv_time_get.constprop.0.isra.0+0x5e>
			BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
   274cc:	3110      	adds	r1, #16
		const uint16_t scan_rsp_us =
   274ce:	00c9      	lsls	r1, r1, #3
			} else if (pdu->type == PDU_ADV_TYPE_ADV_IND) {
   274d0:	b96c      	cbnz	r4, 274ee <adv_time_get.constprop.0.isra.0+0x52>
				adv_size += pdu->len;
   274d2:	7840      	ldrb	r0, [r0, #1]
				time_us += scan_req_us + EVENT_IFS_MAX_US +
   274d4:	f501 7136 	add.w	r1, r1, #728	; 0x2d8
				adv_size += pdu->len;
   274d8:	3010      	adds	r0, #16
				   BYTES2US(adv_size, PHY_1M) + EVENT_IFS_MAX_US;
   274da:	00c3      	lsls	r3, r0, #3
				    EVENT_IFS_MAX_US + rx_to_us +
   274dc:	f503 73b3 	add.w	r3, r3, #358	; 0x166
   274e0:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
   274e4:	3098      	adds	r0, #152	; 0x98
				    rxtx_turn_us) * (adv_chn_cnt - 1) +
   274e6:	fb13 f305 	smulbb	r3, r3, r5
			time_us += (BYTES2US(adv_size, PHY_1M) +
   274ea:	4418      	add	r0, r3
   274ec:	e7ea      	b.n	274c4 <adv_time_get.constprop.0.isra.0+0x28>
			} else if (pdu->type == PDU_ADV_TYPE_SCAN_IND) {
   274ee:	2c06      	cmp	r4, #6
   274f0:	d0ef      	beq.n	274d2 <adv_time_get.constprop.0.isra.0+0x36>
		uint16_t adv_size =
   274f2:	2010      	movs	r0, #16
	uint16_t time_us = EVENT_OVERHEAD_START_US + EVENT_OVERHEAD_END_US;
   274f4:	f44f 71c8 	mov.w	r1, #400	; 0x190
   274f8:	e7ef      	b.n	274da <adv_time_get.constprop.0.isra.0+0x3e>
				adv_size += TARGETA_SIZE;
   274fa:	2016      	movs	r0, #22
				time_us += conn_ind_us;
   274fc:	f44f 713c 	mov.w	r1, #752	; 0x2f0
   27500:	e7eb      	b.n	274da <adv_time_get.constprop.0.isra.0+0x3e>

00027502 <ull_adv_init>:
	err = init_reset();
   27502:	f7f2 b999 	b.w	19838 <init_reset>

00027506 <ull_adv_reset>:
{
   27506:	b508      	push	{r3, lr}
		(void)disable(handle);
   27508:	f7f2 fb34 	bl	19b74 <disable.constprop.0>
}
   2750c:	2000      	movs	r0, #0
   2750e:	bd08      	pop	{r3, pc}

00027510 <ull_adv_is_enabled>:
{
   27510:	b508      	push	{r3, lr}
	adv = ull_adv_is_enabled_get(handle);
   27512:	f7f2 fb21 	bl	19b58 <ull_adv_is_enabled_get>
}
   27516:	3800      	subs	r0, #0
   27518:	bf18      	it	ne
   2751a:	2001      	movne	r0, #1
   2751c:	bd08      	pop	{r3, pc}

0002751e <ull_adv_filter_pol_get>:
{
   2751e:	b508      	push	{r3, lr}
	adv = ull_adv_is_enabled_get(handle);
   27520:	f7f2 fb1a 	bl	19b58 <ull_adv_is_enabled_get>
	if (!adv) {
   27524:	b118      	cbz	r0, 2752e <ull_adv_filter_pol_get+0x10>
	return adv->lll.filter_policy;
   27526:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
   2752a:	f000 0003 	and.w	r0, r0, #3
}
   2752e:	bd08      	pop	{r3, pc}

00027530 <ull_adv_pdu_update_addrs>:
{
   27530:	b510      	push	{r4, lr}
			own_id_addr = ll_addr_get(pdu->tx_addr);
   27532:	460c      	mov	r4, r1
   27534:	f814 0b02 	ldrb.w	r0, [r4], #2
   27538:	f3c0 1080 	ubfx	r0, r0, #6, #1
   2753c:	f7f0 f87e 	bl	1763c <ll_addr_get>
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
   27540:	2206      	movs	r2, #6
			own_id_addr = ll_addr_get(pdu->tx_addr);
   27542:	4601      	mov	r1, r0
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
   27544:	4620      	mov	r0, r4
   27546:	f7fc fc2f 	bl	23da8 <memcpy>
}
   2754a:	4620      	mov	r0, r4
   2754c:	bd10      	pop	{r4, pc}

0002754e <ull_adv_data_set>:
	if (len > PDU_AC_DATA_SIZE_MAX) {
   2754e:	291f      	cmp	r1, #31
{
   27550:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   27554:	4604      	mov	r4, r0
   27556:	460d      	mov	r5, r1
   27558:	4690      	mov	r8, r2
	if (len > PDU_AC_DATA_SIZE_MAX) {
   2755a:	d849      	bhi.n	275f0 <ull_adv_data_set+0xa2>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   2755c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   27560:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   27564:	6adf      	ldr	r7, [r3, #44]	; 0x2c
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   27566:	783b      	ldrb	r3, [r7, #0]
   27568:	f003 030f 	and.w	r3, r3, #15
   2756c:	2b01      	cmp	r3, #1
   2756e:	d10a      	bne.n	27586 <ull_adv_data_set+0x38>
		adv->ad_data_backup.len = len;
   27570:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
		memcpy(adv->ad_data_backup.data, data, adv->ad_data_backup.len);
   27574:	460a      	mov	r2, r1
   27576:	3041      	adds	r0, #65	; 0x41
   27578:	4641      	mov	r1, r8
   2757a:	f7fc fc15 	bl	23da8 <memcpy>
	return 0;
   2757e:	2000      	movs	r0, #0
}
   27580:	b002      	add	sp, #8
   27582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   27586:	f10d 0107 	add.w	r1, sp, #7
   2758a:	3028      	adds	r0, #40	; 0x28
   2758c:	f000 fabc 	bl	27b08 <lll_adv_pdu_alloc>
	pdu->tx_addr = prev->tx_addr;
   27590:	4639      	mov	r1, r7
   27592:	4606      	mov	r6, r0
   27594:	f811 2b02 	ldrb.w	r2, [r1], #2
   27598:	f3c2 1080 	ubfx	r0, r2, #6, #1
	pdu->type = prev->type;
   2759c:	f3c2 0303 	ubfx	r3, r2, #0, #4
   275a0:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
   275a4:	f002 0280 	and.w	r2, r2, #128	; 0x80
   275a8:	4630      	mov	r0, r6
   275aa:	4313      	orrs	r3, r2
   275ac:	f800 3b02 	strb.w	r3, [r0], #2
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   275b0:	2206      	movs	r2, #6
   275b2:	f7fc fbf9 	bl	23da8 <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
   275b6:	462a      	mov	r2, r5
   275b8:	4641      	mov	r1, r8
   275ba:	f106 0008 	add.w	r0, r6, #8
	pdu->len = BDADDR_SIZE + len;
   275be:	3506      	adds	r5, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
   275c0:	f7fc fbf2 	bl	23da8 <memcpy>
	pdu->len = BDADDR_SIZE + len;
   275c4:	7075      	strb	r5, [r6, #1]
	if (adv->is_enabled) {
   275c6:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   275ca:	07db      	lsls	r3, r3, #31
   275cc:	d404      	bmi.n	275d8 <ull_adv_data_set+0x8a>
	pdu->last = idx;
   275ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
   275d2:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
   275d6:	e7d2      	b.n	2757e <ull_adv_data_set+0x30>
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   275d8:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   275dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		err = ull_adv_time_update(adv, pdu, pdu_scan);
   275e0:	4631      	mov	r1, r6
   275e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   275e4:	4620      	mov	r0, r4
   275e6:	f7d9 f937 	bl	858 <ull_adv_time_update>
		if (err) {
   275ea:	2800      	cmp	r0, #0
   275ec:	d0ef      	beq.n	275ce <ull_adv_data_set+0x80>
   275ee:	e7c7      	b.n	27580 <ull_adv_data_set+0x32>
		return BT_HCI_ERR_INVALID_PARAM;
   275f0:	2012      	movs	r0, #18
   275f2:	e7c5      	b.n	27580 <ull_adv_data_set+0x32>

000275f4 <ull_scan_rsp_set>:
	if (len > PDU_AC_DATA_SIZE_MAX) {
   275f4:	291f      	cmp	r1, #31
{
   275f6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   275fa:	4604      	mov	r4, r0
   275fc:	460e      	mov	r6, r1
   275fe:	4617      	mov	r7, r2
	if (len > PDU_AC_DATA_SIZE_MAX) {
   27600:	d83e      	bhi.n	27680 <ull_scan_rsp_set+0x8c>
   27602:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   27606:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   2760a:	f10d 0107 	add.w	r1, sp, #7
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   2760e:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   27612:	3034      	adds	r0, #52	; 0x34
   27614:	f000 fa78 	bl	27b08 <lll_adv_pdu_alloc>
	pdu->tx_addr = prev->tx_addr;
   27618:	4641      	mov	r1, r8
   2761a:	4605      	mov	r5, r0
   2761c:	f811 3b02 	ldrb.w	r3, [r1], #2
   27620:	f3c3 1380 	ubfx	r3, r3, #6, #1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   27624:	019b      	lsls	r3, r3, #6
   27626:	f043 0304 	orr.w	r3, r3, #4
   2762a:	7003      	strb	r3, [r0, #0]
	pdu->len = BDADDR_SIZE + len;
   2762c:	1db3      	adds	r3, r6, #6
   2762e:	7043      	strb	r3, [r0, #1]
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   27630:	2206      	movs	r2, #6
   27632:	3002      	adds	r0, #2
   27634:	f7fc fbb8 	bl	23da8 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   27638:	4632      	mov	r2, r6
   2763a:	4639      	mov	r1, r7
   2763c:	f105 0008 	add.w	r0, r5, #8
   27640:	f7fc fbb2 	bl	23da8 <memcpy>
	if (adv->is_enabled) {
   27644:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   27648:	07db      	lsls	r3, r3, #31
   2764a:	d407      	bmi.n	2765c <ull_scan_rsp_set+0x68>
	pdu->last = idx;
   2764c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   27650:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	return 0;
   27654:	2000      	movs	r0, #0
}
   27656:	b002      	add	sp, #8
   27658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   2765c:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   27660:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   27664:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
		if ((pdu_adv_scan->type == PDU_ADV_TYPE_ADV_IND) ||
   27666:	780b      	ldrb	r3, [r1, #0]
   27668:	f013 030f 	ands.w	r3, r3, #15
   2766c:	d001      	beq.n	27672 <ull_scan_rsp_set+0x7e>
   2766e:	2b06      	cmp	r3, #6
   27670:	d1ec      	bne.n	2764c <ull_scan_rsp_set+0x58>
			err = ull_adv_time_update(adv, pdu_adv_scan, pdu);
   27672:	462a      	mov	r2, r5
   27674:	4620      	mov	r0, r4
   27676:	f7d9 f8ef 	bl	858 <ull_adv_time_update>
			if (err) {
   2767a:	2800      	cmp	r0, #0
   2767c:	d0e6      	beq.n	2764c <ull_scan_rsp_set+0x58>
   2767e:	e7ea      	b.n	27656 <ull_scan_rsp_set+0x62>
		return BT_HCI_ERR_INVALID_PARAM;
   27680:	2012      	movs	r0, #18
   27682:	e7e8      	b.n	27656 <ull_scan_rsp_set+0x62>

00027684 <ull_scan_init>:
}
   27684:	2000      	movs	r0, #0
   27686:	4770      	bx	lr

00027688 <disable.constprop.0>:
	ll_rx_put(rx_hdr->link, rx_hdr);
	ll_rx_sched();
}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

static uint8_t disable(uint8_t handle)
   27688:	b510      	push	{r4, lr}
{
	struct ll_scan_set *scan;
	uint8_t ret;

	scan = ull_scan_is_enabled_get(handle);
   2768a:	2000      	movs	r0, #0
   2768c:	f7f2 fb90 	bl	19db0 <ull_scan_is_enabled_get>
	if (!scan) {
   27690:	4604      	mov	r4, r0
   27692:	b158      	cbz	r0, 276ac <disable.constprop.0+0x24>
	if (scan->lll.conn) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}
#endif

	ret = ull_scan_disable(handle, scan);
   27694:	4601      	mov	r1, r0
   27696:	2000      	movs	r0, #0
   27698:	f7f2 fb60 	bl	19d5c <ull_scan_disable>
	if (ret) {
   2769c:	b928      	cbnz	r0, 276aa <disable.constprop.0+0x22>
		return ret;
	}

	scan->is_enabled = 0U;
   2769e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   276a2:	f360 0300 	bfi	r3, r0, #0, #1
   276a6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		ull_filter_adv_scan_state_cb(0);
	}
#endif

	return 0;
}
   276aa:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   276ac:	200c      	movs	r0, #12
   276ae:	e7fc      	b.n	276aa <disable.constprop.0+0x22>

000276b0 <ull_scan_reset>:
{
   276b0:	b508      	push	{r3, lr}
		(void)disable(handle);
   276b2:	f7ff ffe9 	bl	27688 <disable.constprop.0>
}
   276b6:	2000      	movs	r0, #0
   276b8:	bd08      	pop	{r3, pc}

000276ba <ll_scan_enable>:
{
   276ba:	b510      	push	{r4, lr}
	if (!enable) {
   276bc:	b918      	cbnz	r0, 276c6 <ll_scan_enable+0xc>
}
   276be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = disable(SCAN_HANDLE_1M);
   276c2:	f7ff bfe1 	b.w	27688 <disable.constprop.0>
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
   276c6:	2000      	movs	r0, #0
   276c8:	f7f2 fb80 	bl	19dcc <ull_scan_is_disabled_get>
	if (!scan) {
   276cc:	4604      	mov	r4, r0
   276ce:	b190      	cbz	r0, 276f6 <ll_scan_enable+0x3c>
	    (!is_coded_phy && (scan->own_addr_type & 0x1))) {
   276d0:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
   276d4:	079b      	lsls	r3, r3, #30
   276d6:	d404      	bmi.n	276e2 <ll_scan_enable+0x28>
		err = ull_scan_enable(scan);
   276d8:	4620      	mov	r0, r4
}
   276da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = ull_scan_enable(scan);
   276de:	f7d9 b913 	b.w	908 <ull_scan_enable>
		if (!mem_nz(ll_addr_get(BT_ADDR_LE_RANDOM), BDADDR_SIZE)) {
   276e2:	2001      	movs	r0, #1
   276e4:	f7ef ffaa 	bl	1763c <ll_addr_get>
   276e8:	2106      	movs	r1, #6
   276ea:	f7ff fb64 	bl	26db6 <mem_nz>
   276ee:	2800      	cmp	r0, #0
   276f0:	d1f2      	bne.n	276d8 <ll_scan_enable+0x1e>
			return BT_HCI_ERR_INVALID_PARAM;
   276f2:	2012      	movs	r0, #18
}
   276f4:	bd10      	pop	{r4, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   276f6:	200c      	movs	r0, #12
   276f8:	e7fc      	b.n	276f4 <ll_scan_enable+0x3a>

000276fa <ull_scan_is_enabled>:
{
   276fa:	b508      	push	{r3, lr}
	scan = ull_scan_is_enabled_get(handle);
   276fc:	f7f2 fb58 	bl	19db0 <ull_scan_is_enabled_get>
	if (!scan) {
   27700:	b148      	cbz	r0, 27716 <ull_scan_is_enabled+0x1c>
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
   27702:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
   27706:	f890 0020 	ldrb.w	r0, [r0, #32]
   2770a:	f003 0301 	and.w	r3, r3, #1
   2770e:	f3c0 1040 	ubfx	r0, r0, #5, #1
   27712:	fa03 f000 	lsl.w	r0, r3, r0
}
   27716:	bd08      	pop	{r3, pc}

00027718 <ull_scan_filter_pol_get>:
{
   27718:	b508      	push	{r3, lr}
	scan = ull_scan_is_enabled_get(handle);
   2771a:	f7f2 fb49 	bl	19db0 <ull_scan_is_enabled_get>
	if (!scan) {
   2771e:	b118      	cbz	r0, 27728 <ull_scan_filter_pol_get+0x10>
	return scan->lll.filter_policy;
   27720:	f890 0020 	ldrb.w	r0, [r0, #32]
   27724:	f3c0 00c1 	ubfx	r0, r0, #3, #2
}
   27728:	bd08      	pop	{r3, pc}

0002772a <sys_put_le64>:
	dst[1] = val >> 8;
   2772a:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   2772e:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   27730:	7053      	strb	r3, [r2, #1]
	sys_put_le16(val >> 16, &dst[2]);
   27732:	0c00      	lsrs	r0, r0, #16
	dst[1] = val >> 8;
   27734:	f3c1 2307 	ubfx	r3, r1, #8, #8
	dst[0] = val;
   27738:	7111      	strb	r1, [r2, #4]
	sys_put_le16(val >> 16, &dst[2]);
   2773a:	0c09      	lsrs	r1, r1, #16
	dst[0] = val;
   2773c:	7090      	strb	r0, [r2, #2]
   2773e:	7191      	strb	r1, [r2, #6]
	dst[1] = val >> 8;
   27740:	0a00      	lsrs	r0, r0, #8
   27742:	0a09      	lsrs	r1, r1, #8
   27744:	70d0      	strb	r0, [r2, #3]
   27746:	7153      	strb	r3, [r2, #5]
   27748:	71d1      	strb	r1, [r2, #7]
}
   2774a:	4770      	bx	lr

0002774c <ctrl_tx_enqueue>:
		if (!conn->tx_ctrl) {
   2774c:	e9d0 3247 	ldrd	r3, r2, [r0, #284]	; 0x11c
{
   27750:	b510      	push	{r4, lr}
	if (
   27752:	b18b      	cbz	r3, 27778 <ctrl_tx_enqueue+0x2c>
		if (conn->tx_head == conn->tx_data) {
   27754:	f8d0 4128 	ldr.w	r4, [r0, #296]	; 0x128
   27758:	42a3      	cmp	r3, r4
			conn->tx_data = conn->tx_data->next;
   2775a:	bf04      	itt	eq
   2775c:	681c      	ldreq	r4, [r3, #0]
   2775e:	f8c0 4128 	streq.w	r4, [r0, #296]	; 0x128
		if (!conn->tx_ctrl) {
   27762:	b992      	cbnz	r2, 2778a <ctrl_tx_enqueue+0x3e>
			tx->next = conn->tx_head->next;
   27764:	681a      	ldr	r2, [r3, #0]
   27766:	600a      	str	r2, [r1, #0]
			conn->tx_head->next = tx;
   27768:	6019      	str	r1, [r3, #0]
				conn->tx_ctrl = tx;
   2776a:	f8c0 1120 	str.w	r1, [r0, #288]	; 0x120
	if (!tx->next) {
   2776e:	680b      	ldr	r3, [r1, #0]
	conn->tx_ctrl_last = tx;
   27770:	f8c0 1124 	str.w	r1, [r0, #292]	; 0x124
	if (!tx->next) {
   27774:	b133      	cbz	r3, 27784 <ctrl_tx_enqueue+0x38>
}
   27776:	bd10      	pop	{r4, pc}
		if (!conn->tx_ctrl) {
   27778:	b93a      	cbnz	r2, 2778a <ctrl_tx_enqueue+0x3e>
			tx->next = conn->tx_head;
   2777a:	600a      	str	r2, [r1, #0]
				conn->tx_ctrl = tx;
   2777c:	e9c0 1147 	strd	r1, r1, [r0, #284]	; 0x11c
				conn->tx_ctrl_last = tx;
   27780:	f8c0 1124 	str.w	r1, [r0, #292]	; 0x124
		conn->tx_data_last = tx;
   27784:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
}
   27788:	e7f5      	b.n	27776 <ctrl_tx_enqueue+0x2a>
	tx->next = conn->tx_ctrl_last->next;
   2778a:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
   2778e:	681a      	ldr	r2, [r3, #0]
   27790:	600a      	str	r2, [r1, #0]
	conn->tx_ctrl_last->next = tx;
   27792:	6019      	str	r1, [r3, #0]
   27794:	e7eb      	b.n	2776e <ctrl_tx_enqueue+0x22>

00027796 <reject_ext_ind_send.constprop.0>:
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   27796:	b573      	push	{r0, r1, r4, r5, r6, lr}
   27798:	4616      	mov	r6, r2
	tx = ctrl_tx_rsp_mem_acquire(conn, rx, &err);
   2779a:	aa01      	add	r2, sp, #4
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   2779c:	460c      	mov	r4, r1
   2779e:	4605      	mov	r5, r0
	tx = ctrl_tx_rsp_mem_acquire(conn, rx, &err);
   277a0:	f7f2 fb28 	bl	19df4 <ctrl_tx_rsp_mem_acquire>
	if (!tx) {
   277a4:	4601      	mov	r1, r0
   277a6:	b910      	cbnz	r0, 277ae <reject_ext_ind_send.constprop.0+0x18>
		return err;
   277a8:	9801      	ldr	r0, [sp, #4]
}
   277aa:	b002      	add	sp, #8
   277ac:	bd70      	pop	{r4, r5, r6, pc}
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   277ae:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   277b0:	7246      	strb	r6, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   277b2:	f043 0303 	orr.w	r3, r3, #3
   277b6:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   277b8:	2303      	movs	r3, #3
   277ba:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   277bc:	2311      	movs	r3, #17
   277be:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   277c0:	230f      	movs	r3, #15
   277c2:	7203      	strb	r3, [r0, #8]
	ctrl_tx_enqueue(conn, tx);
   277c4:	4628      	mov	r0, r5
   277c6:	f7ff ffc1 	bl	2774c <ctrl_tx_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   277ca:	2301      	movs	r3, #1
   277cc:	7123      	strb	r3, [r4, #4]
	return 0;
   277ce:	2000      	movs	r0, #0
   277d0:	e7eb      	b.n	277aa <reject_ext_ind_send.constprop.0+0x14>

000277d2 <ll_connected_get>:
{
   277d2:	b508      	push	{r3, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   277d4:	b918      	cbnz	r0, 277de <ll_connected_get+0xc>
	conn = ll_conn_get(handle);
   277d6:	f7f2 fd05 	bl	1a1e4 <ll_conn_get>
	if (conn->lll.handle != handle) {
   277da:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   277dc:	b103      	cbz	r3, 277e0 <ll_connected_get+0xe>
		return NULL;
   277de:	2000      	movs	r0, #0
}
   277e0:	bd08      	pop	{r3, pc}

000277e2 <ll_conn_update>:
{
   277e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   277e6:	4605      	mov	r5, r0
   277e8:	f8bd a020 	ldrh.w	sl, [sp, #32]
   277ec:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
   277f0:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
   277f4:	460c      	mov	r4, r1
   277f6:	4617      	mov	r7, r2
   277f8:	461e      	mov	r6, r3
	conn = ll_connected_get(handle);
   277fa:	f7ff ffea 	bl	277d2 <ll_connected_get>
	if (!conn) {
   277fe:	2800      	cmp	r0, #0
   27800:	d06e      	beq.n	278e0 <ll_conn_update+0xfe>
	if (!cmd) {
   27802:	bb84      	cbnz	r4, 27866 <ll_conn_update+0x84>
		if (!conn->llcp_conn_param.disabled &&
   27804:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   27808:	069a      	lsls	r2, r3, #26
   2780a:	d408      	bmi.n	2781e <ll_conn_update+0x3c>
		    (!conn->common.fex_valid ||
   2780c:	f890 107c 	ldrb.w	r1, [r0, #124]	; 0x7c
		if (!conn->llcp_conn_param.disabled &&
   27810:	f011 0101 	ands.w	r1, r1, #1
   27814:	d045      	beq.n	278a2 <ll_conn_update+0xc0>
		     (conn->llcp_feature.features_conn &
   27816:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
		    (!conn->common.fex_valid ||
   2781a:	079b      	lsls	r3, r3, #30
   2781c:	d424      	bmi.n	27868 <ll_conn_update+0x86>
		} else if (conn->lll.role) {
   2781e:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   27822:	2b00      	cmp	r3, #0
   27824:	db5e      	blt.n	278e4 <ll_conn_update+0x102>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   27826:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
   2782a:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
   2782e:	429a      	cmp	r2, r3
   27830:	d15a      	bne.n	278e8 <ll_conn_update+0x106>
		conn->llcp_cu.win_size = 1U;
   27832:	2301      	movs	r3, #1
   27834:	f880 30ac 	strb.w	r3, [r0, #172]	; 0xac
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   27838:	f890 309e 	ldrb.w	r3, [r0, #158]	; 0x9e
		conn->llcp_cu.interval = interval_max;
   2783c:	f8a0 a0a0 	strh.w	sl, [r0, #160]	; 0xa0
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   27840:	f023 030f 	bic.w	r3, r3, #15
		conn->llcp_cu.win_offset_us = 0U;
   27844:	2400      	movs	r4, #0
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   27846:	f043 0309 	orr.w	r3, r3, #9
		conn->llcp_cu.req++;
   2784a:	3201      	adds	r2, #1
		conn->llcp_cu.win_offset_us = 0U;
   2784c:	f8c0 40a8 	str.w	r4, [r0, #168]	; 0xa8
		conn->llcp_cu.latency = latency;
   27850:	f8a0 90a2 	strh.w	r9, [r0, #162]	; 0xa2
		conn->llcp_cu.timeout = timeout;
   27854:	f8a0 80a4 	strh.w	r8, [r0, #164]	; 0xa4
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   27858:	f880 309e 	strb.w	r3, [r0, #158]	; 0x9e
		conn->llcp_cu.req++;
   2785c:	f880 209c 	strb.w	r2, [r0, #156]	; 0x9c
}
   27860:	4620      	mov	r0, r4
   27862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27866:	4621      	mov	r1, r4
		cmd--;
   27868:	1e4c      	subs	r4, r1, #1
		if (cmd) {
   2786a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
			if ((conn->llcp_conn_param.req ==
   2786e:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
			     conn->llcp_conn_param.ack) ||
   27872:	f890 20f5 	ldrb.w	r2, [r0, #245]	; 0xf5
		if (cmd) {
   27876:	d016      	beq.n	278a6 <ll_conn_update+0xc4>
			if ((conn->llcp_conn_param.req ==
   27878:	4293      	cmp	r3, r2
   2787a:	d035      	beq.n	278e8 <ll_conn_update+0x106>
			    (conn->llcp_conn_param.state !=
   2787c:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
			     conn->llcp_conn_param.ack) ||
   27880:	f003 020f 	and.w	r2, r3, #15
   27884:	2a03      	cmp	r2, #3
   27886:	d12f      	bne.n	278e8 <ll_conn_update+0x106>
			conn->llcp_conn_param.state = cmd;
   27888:	f004 040f 	and.w	r4, r4, #15
   2788c:	f044 0410 	orr.w	r4, r4, #16
   27890:	f023 031f 	bic.w	r3, r3, #31
   27894:	431c      	orrs	r4, r3
   27896:	f880 40f6 	strb.w	r4, [r0, #246]	; 0xf6
			conn->llcp_conn_param.status = status;
   2789a:	f880 70f7 	strb.w	r7, [r0, #247]	; 0xf7
	return 0;
   2789e:	2400      	movs	r4, #0
   278a0:	e7de      	b.n	27860 <ll_conn_update+0x7e>
			cmd++;
   278a2:	2101      	movs	r1, #1
   278a4:	e7e0      	b.n	27868 <ll_conn_update+0x86>
			if (conn->llcp_conn_param.req !=
   278a6:	4293      	cmp	r3, r2
   278a8:	d11e      	bne.n	278e8 <ll_conn_update+0x106>
			conn->llcp_conn_param.state = cmd;
   278aa:	f8b0 20f6 	ldrh.w	r2, [r0, #246]	; 0xf6
			conn->llcp_conn_param.interval_min = interval_min;
   278ae:	f8a0 60f8 	strh.w	r6, [r0, #248]	; 0xf8
			conn->llcp_conn_param.req++;
   278b2:	3301      	adds	r3, #1
   278b4:	f880 30f4 	strb.w	r3, [r0, #244]	; 0xf4
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   278b8:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
			conn->llcp_conn_param.interval_max = interval_max;
   278bc:	f8a0 a0fa 	strh.w	sl, [r0, #250]	; 0xfa
			conn->llcp_conn_param.state = cmd;
   278c0:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
   278c4:	f042 0210 	orr.w	r2, r2, #16
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   278c8:	2b00      	cmp	r3, #0
			conn->llcp_conn_param.latency = latency;
   278ca:	f8a0 90fc 	strh.w	r9, [r0, #252]	; 0xfc
			conn->llcp_conn_param.timeout = timeout;
   278ce:	f8a0 80fe 	strh.w	r8, [r0, #254]	; 0xfe
			conn->llcp_conn_param.state = cmd;
   278d2:	f8a0 20f6 	strh.w	r2, [r0, #246]	; 0xf6
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   278d6:	dac3      	bge.n	27860 <ll_conn_update+0x7e>
				ull_periph_latency_cancel(conn, handle);
   278d8:	4629      	mov	r1, r5
   278da:	f7f3 fd0b 	bl	1b2f4 <ull_periph_latency_cancel>
   278de:	e7bf      	b.n	27860 <ll_conn_update+0x7e>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   278e0:	2402      	movs	r4, #2
   278e2:	e7bd      	b.n	27860 <ll_conn_update+0x7e>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   278e4:	241a      	movs	r4, #26
   278e6:	e7bb      	b.n	27860 <ll_conn_update+0x7e>
			return BT_HCI_ERR_CMD_DISALLOWED;
   278e8:	240c      	movs	r4, #12
   278ea:	e7b9      	b.n	27860 <ll_conn_update+0x7e>

000278ec <ll_chm_get>:
{
   278ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   278ee:	460d      	mov	r5, r1
	conn = ll_connected_get(handle);
   278f0:	f7ff ff6f 	bl	277d2 <ll_connected_get>
	if (!conn) {
   278f4:	4604      	mov	r4, r0
   278f6:	b170      	cbz	r0, 27916 <ll_chm_get+0x2a>
		conn->chm_updated = 0U;
   278f8:	2700      	movs	r7, #0
		memcpy(chm, conn->lll.data_chan_map,
   278fa:	f100 0634 	add.w	r6, r0, #52	; 0x34
		conn->chm_updated = 0U;
   278fe:	f884 7130 	strb.w	r7, [r4, #304]	; 0x130
		memcpy(chm, conn->lll.data_chan_map,
   27902:	2205      	movs	r2, #5
   27904:	4631      	mov	r1, r6
   27906:	4628      	mov	r0, r5
   27908:	f7fc fa4e 	bl	23da8 <memcpy>
	} while (conn->chm_updated);
   2790c:	f894 0130 	ldrb.w	r0, [r4, #304]	; 0x130
   27910:	2800      	cmp	r0, #0
   27912:	d1f4      	bne.n	278fe <ll_chm_get+0x12>
}
   27914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   27916:	2002      	movs	r0, #2
   27918:	e7fc      	b.n	27914 <ll_chm_get+0x28>

0002791a <ll_feature_req_send>:
{
   2791a:	b510      	push	{r4, lr}
   2791c:	4604      	mov	r4, r0
	conn = ll_connected_get(handle);
   2791e:	f7ff ff58 	bl	277d2 <ll_connected_get>
	if (!conn) {
   27922:	b188      	cbz	r0, 27948 <ll_feature_req_send+0x2e>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   27924:	f890 10b0 	ldrb.w	r1, [r0, #176]	; 0xb0
   27928:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
   2792c:	428a      	cmp	r2, r1
   2792e:	d10d      	bne.n	2794c <ll_feature_req_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   27930:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	conn->llcp_feature.req++;
   27934:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   27936:	2b00      	cmp	r3, #0
	conn->llcp_feature.req++;
   27938:	f880 20b0 	strb.w	r2, [r0, #176]	; 0xb0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2793c:	da02      	bge.n	27944 <ll_feature_req_send+0x2a>
		ull_periph_latency_cancel(conn, handle);
   2793e:	4621      	mov	r1, r4
   27940:	f7f3 fcd8 	bl	1b2f4 <ull_periph_latency_cancel>
	return 0;
   27944:	2000      	movs	r0, #0
   27946:	e000      	b.n	2794a <ll_feature_req_send+0x30>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   27948:	2002      	movs	r0, #2
}
   2794a:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   2794c:	200c      	movs	r0, #12
   2794e:	e7fc      	b.n	2794a <ll_feature_req_send+0x30>

00027950 <ll_version_ind_send>:
{
   27950:	b510      	push	{r4, lr}
   27952:	4604      	mov	r4, r0
	conn = ll_connected_get(handle);
   27954:	f7ff ff3d 	bl	277d2 <ll_connected_get>
	if (!conn) {
   27958:	b188      	cbz	r0, 2797e <ll_version_ind_send+0x2e>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   2795a:	f890 10c8 	ldrb.w	r1, [r0, #200]	; 0xc8
   2795e:	f890 20c9 	ldrb.w	r2, [r0, #201]	; 0xc9
   27962:	428a      	cmp	r2, r1
   27964:	d10d      	bne.n	27982 <ll_version_ind_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   27966:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	conn->llcp_version.req++;
   2796a:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   2796c:	2b00      	cmp	r3, #0
	conn->llcp_version.req++;
   2796e:	f880 20c8 	strb.w	r2, [r0, #200]	; 0xc8
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   27972:	da02      	bge.n	2797a <ll_version_ind_send+0x2a>
		ull_periph_latency_cancel(conn, handle);
   27974:	4621      	mov	r1, r4
   27976:	f7f3 fcbd 	bl	1b2f4 <ull_periph_latency_cancel>
	return 0;
   2797a:	2000      	movs	r0, #0
   2797c:	e000      	b.n	27980 <ll_version_ind_send+0x30>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   2797e:	2002      	movs	r0, #2
}
   27980:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   27982:	200c      	movs	r0, #12
   27984:	e7fc      	b.n	27980 <ll_version_ind_send+0x30>

00027986 <ull_conn_init>:
	err = init_reset();
   27986:	f7f2 ba53 	b.w	19e30 <init_reset>

0002798a <tx_demux>:
{
   2798a:	b510      	push	{r4, lr}
   2798c:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   2798e:	2001      	movs	r0, #1
   27990:	f7f3 f920 	bl	1abd4 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   27994:	4620      	mov	r0, r4
   27996:	2101      	movs	r1, #1
}
   27998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   2799c:	f7f3 bac6 	b.w	1af2c <ull_conn_tx_lll_enqueue>

000279a0 <ull_conn_lll_max_tx_octets_get>:
}
   279a0:	201b      	movs	r0, #27
   279a2:	4770      	bx	lr

000279a4 <lll_chan_sel_1>:
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.2
 * Channel Selection algorithm #1
 */
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   279a4:	b530      	push	{r4, r5, lr}
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   279a6:	fb02 1101 	mla	r1, r2, r1, r1
   279aa:	7802      	ldrb	r2, [r0, #0]
{
   279ac:	f89d 500c 	ldrb.w	r5, [sp, #12]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   279b0:	4411      	add	r1, r2
   279b2:	2225      	movs	r2, #37	; 0x25
{
   279b4:	4604      	mov	r4, r0
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   279b6:	fbb1 f0f2 	udiv	r0, r1, r2
   279ba:	fb02 1110 	mls	r1, r2, r0, r1
   279be:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   279c0:	08c2      	lsrs	r2, r0, #3
	*chan_use = chan_next;
   279c2:	7020      	strb	r0, [r4, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   279c4:	5c9c      	ldrb	r4, [r3, r2]
   279c6:	f001 0107 	and.w	r1, r1, #7
   279ca:	fa44 f101 	asr.w	r1, r4, r1
   279ce:	f011 0101 	ands.w	r1, r1, #1
   279d2:	d109      	bne.n	279e8 <lll_chan_sel_1+0x44>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   279d4:	fbb0 f2f5 	udiv	r2, r0, r5
   279d8:	fb05 0212 	mls	r2, r5, r2, r0
   279dc:	1e5c      	subs	r4, r3, #1
   279de:	b2d2      	uxtb	r2, r2
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   279e0:	3304      	adds	r3, #4
	chan_next = 0U;
   279e2:	4608      	mov	r0, r1
	while (byte_count--) {
   279e4:	42a3      	cmp	r3, r4
   279e6:	d100      	bne.n	279ea <lll_chan_sel_1+0x46>
}
   279e8:	bd30      	pop	{r4, r5, pc}
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   279ea:	f100 0108 	add.w	r1, r0, #8
   279ee:	f814 5f01 	ldrb.w	r5, [r4, #1]!
		bit_count = 8U;
		while (bit_count--) {
   279f2:	b2c9      	uxtb	r1, r1
   279f4:	4288      	cmp	r0, r1
   279f6:	d0f5      	beq.n	279e4 <lll_chan_sel_1+0x40>
			if (bite & 0x01) {
   279f8:	f015 0f01 	tst.w	r5, #1
   279fc:	d003      	beq.n	27a06 <lll_chan_sel_1+0x62>
				if (chan_index == 0U) {
   279fe:	2a00      	cmp	r2, #0
   27a00:	d0f2      	beq.n	279e8 <lll_chan_sel_1+0x44>
					break;
				}
				chan_index--;
   27a02:	3a01      	subs	r2, #1
   27a04:	b2d2      	uxtb	r2, r2
			}
			chan_next++;
   27a06:	3001      	adds	r0, #1
   27a08:	b2c0      	uxtb	r0, r0
			bite >>= 1;
   27a0a:	086d      	lsrs	r5, r5, #1
   27a0c:	e7f2      	b.n	279f4 <lll_chan_sel_1+0x50>

00027a0e <ll_fal_size_get>:
}
   27a0e:	2008      	movs	r0, #8
   27a10:	4770      	bx	lr

00027a12 <swi_lll_nrf5_isr>:
	mayfly_run(TICKER_USER_ID_LLL);
   27a12:	2000      	movs	r0, #0
   27a14:	f7ef b842 	b.w	16a9c <mayfly_run>

00027a18 <isr_race>:
	radio_status_reset();
   27a18:	f7f5 bd82 	b.w	1d520 <radio_status_reset>

00027a1c <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   27a1c:	4668      	mov	r0, sp
   27a1e:	f020 0107 	bic.w	r1, r0, #7
   27a22:	468d      	mov	sp, r1
   27a24:	b501      	push	{r0, lr}
	isr_radio();
   27a26:	f7f5 fc8b 	bl	1d340 <isr_radio>
	ISR_DIRECT_PM();
   27a2a:	f7dc fd19 	bl	4460 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   27a2e:	f7dc fe09 	bl	4644 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   27a32:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   27a36:	4685      	mov	sp, r0
   27a38:	4770      	bx	lr

00027a3a <lll_rand_isr_get>:
   27a3a:	f7f3 bf89 	b.w	1b950 <lll_csrand_isr_get>

00027a3e <lll_reset>:
}
   27a3e:	2000      	movs	r0, #0
   27a40:	4770      	bx	lr

00027a42 <lll_prepare_done>:
}
   27a42:	2000      	movs	r0, #0
   27a44:	4770      	bx	lr

00027a46 <lll_is_abort_cb>:
}
   27a46:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   27a4a:	4770      	bx	lr

00027a4c <lll_event_offset_get>:
{
   27a4c:	4603      	mov	r3, r0
		return MAX(ull->ticks_active_to_start,
   27a4e:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
	} else if (ull->ticks_prepare_to_start & XON_BITMASK) {
   27a52:	2a00      	cmp	r2, #0
   27a54:	da04      	bge.n	27a60 <lll_event_offset_get+0x14>
		return MAX(ull->ticks_active_to_start,
   27a56:	68db      	ldr	r3, [r3, #12]
   27a58:	4298      	cmp	r0, r3
   27a5a:	bf38      	it	cc
   27a5c:	4618      	movcc	r0, r3
   27a5e:	4770      	bx	lr
		return MAX(ull->ticks_active_to_start,
   27a60:	4290      	cmp	r0, r2
   27a62:	bf38      	it	cc
   27a64:	4610      	movcc	r0, r2
}
   27a66:	4770      	bx	lr

00027a68 <lll_preempt_calc>:
{
   27a68:	b510      	push	{r4, lr}
   27a6a:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   27a6c:	f7ff fc84 	bl	27378 <ticker_ticks_now_get>
	diff = ticks_now - ticks_at_event;
   27a70:	1b00      	subs	r0, r0, r4
	if (diff & BIT(HAL_TICKER_CNTR_MSBIT)) {
   27a72:	0203      	lsls	r3, r0, #8
   27a74:	d405      	bmi.n	27a82 <lll_preempt_calc+0x1a>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   27a76:	3003      	adds	r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) {
   27a78:	2809      	cmp	r0, #9
   27a7a:	bf94      	ite	ls
   27a7c:	2000      	movls	r0, #0
   27a7e:	2001      	movhi	r0, #1
}
   27a80:	bd10      	pop	{r4, pc}
		return 0;
   27a82:	2000      	movs	r0, #0
   27a84:	e7fc      	b.n	27a80 <lll_preempt_calc+0x18>

00027a86 <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   27a86:	f000 ba63 	b.w	27f50 <radio_rx_ready_delay_get>

00027a8a <lll_isr_tx_status_reset>:
{
   27a8a:	b508      	push	{r3, lr}
	radio_status_reset();
   27a8c:	f7f5 fd48 	bl	1d520 <radio_status_reset>
}
   27a90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   27a94:	f7f5 be8c 	b.w	1d7b0 <radio_tmr_status_reset>

00027a98 <lll_isr_rx_status_reset>:
{
   27a98:	b508      	push	{r3, lr}
	radio_status_reset();
   27a9a:	f7f5 fd41 	bl	1d520 <radio_status_reset>
	radio_tmr_status_reset();
   27a9e:	f7f5 fe87 	bl	1d7b0 <radio_tmr_status_reset>
}
   27aa2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   27aa6:	f7f5 be33 	b.w	1d710 <radio_rssi_status_reset>

00027aaa <lll_isr_status_reset>:
{
   27aaa:	b508      	push	{r3, lr}
	radio_status_reset();
   27aac:	f7f5 fd38 	bl	1d520 <radio_status_reset>
	radio_tmr_status_reset();
   27ab0:	f7f5 fe7e 	bl	1d7b0 <radio_tmr_status_reset>
	radio_filter_status_reset();
   27ab4:	f7f5 fe64 	bl	1d780 <radio_filter_status_reset>
	radio_ar_status_reset();
   27ab8:	f7f5 ff7e 	bl	1d9b8 <radio_ar_status_reset>
}
   27abc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   27ac0:	f7f5 be26 	b.w	1d710 <radio_rssi_status_reset>

00027ac4 <lll_isr_abort>:
{
   27ac4:	b510      	push	{r4, lr}
   27ac6:	4604      	mov	r4, r0
	lll_isr_status_reset();
   27ac8:	f7ff ffef 	bl	27aaa <lll_isr_status_reset>
	lll_isr_cleanup(param);
   27acc:	4620      	mov	r0, r4
}
   27ace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   27ad2:	f7f4 b815 	b.w	1bb00 <lll_isr_cleanup>

00027ad6 <clock_ready>:
   27ad6:	f101 0010 	add.w	r0, r1, #16
   27ada:	f7f8 ba9b 	b.w	20014 <z_impl_k_sem_give>

00027ade <lll_clock_ppm_local_get>:
}
   27ade:	2032      	movs	r0, #50	; 0x32
   27ae0:	4770      	bx	lr

00027ae2 <isr_abort>:
{
   27ae2:	b510      	push	{r4, lr}
   27ae4:	4604      	mov	r4, r0
	lll_isr_status_reset();
   27ae6:	f7ff ffe0 	bl	27aaa <lll_isr_status_reset>
	radio_filter_disable();
   27aea:	f7f5 fe3f 	bl	1d76c <radio_filter_disable>
	lll_isr_cleanup(param);
   27aee:	4620      	mov	r0, r4
}
   27af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   27af4:	f7f4 b804 	b.w	1bb00 <lll_isr_cleanup>

00027af8 <lll_adv_reset>:
   27af8:	f7f4 ba38 	b.w	1bf6c <lll_adv_init>

00027afc <lll_adv_data_reset>:
{
   27afc:	4603      	mov	r3, r0
	pdu->first = 0U;
   27afe:	2000      	movs	r0, #0
   27b00:	7018      	strb	r0, [r3, #0]
	pdu->last = 0U;
   27b02:	7058      	strb	r0, [r3, #1]
	pdu->pdu[1] = NULL;
   27b04:	6098      	str	r0, [r3, #8]
}
   27b06:	4770      	bx	lr

00027b08 <lll_adv_pdu_alloc>:
{
   27b08:	b510      	push	{r4, lr}
	first = pdu->first;
   27b0a:	7804      	ldrb	r4, [r0, #0]
	last = pdu->last;
   27b0c:	7843      	ldrb	r3, [r0, #1]
	if (first == last) {
   27b0e:	429c      	cmp	r4, r3
	first = pdu->first;
   27b10:	b2e2      	uxtb	r2, r4
	if (first == last) {
   27b12:	d10d      	bne.n	27b30 <lll_adv_pdu_alloc+0x28>
		last++;
   27b14:	3301      	adds	r3, #1
   27b16:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   27b18:	2b02      	cmp	r3, #2
   27b1a:	d100      	bne.n	27b1e <lll_adv_pdu_alloc+0x16>
			last = 0U;
   27b1c:	2300      	movs	r3, #0
	*idx = last;
   27b1e:	eb00 0483 	add.w	r4, r0, r3, lsl #2
   27b22:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   27b24:	6860      	ldr	r0, [r4, #4]
	if (p) {
   27b26:	b910      	cbnz	r0, 27b2e <lll_adv_pdu_alloc+0x26>
	p = lll_adv_pdu_alloc_pdu_adv();
   27b28:	f7f4 fa48 	bl	1bfbc <lll_adv_pdu_alloc_pdu_adv>
	pdu->pdu[last] = (void *)p;
   27b2c:	6060      	str	r0, [r4, #4]
}
   27b2e:	bd10      	pop	{r4, pc}
		pdu->last = first;
   27b30:	7042      	strb	r2, [r0, #1]
		first_latest = pdu->first;
   27b32:	7804      	ldrb	r4, [r0, #0]
		if (first_latest != first) {
   27b34:	42a2      	cmp	r2, r4
   27b36:	d0f2      	beq.n	27b1e <lll_adv_pdu_alloc+0x16>
			pdu->last = last;
   27b38:	7043      	strb	r3, [r0, #1]
			last++;
   27b3a:	e7eb      	b.n	27b14 <lll_adv_pdu_alloc+0xc>

00027b3c <isr_done>:
{
   27b3c:	b510      	push	{r4, lr}
   27b3e:	4604      	mov	r4, r0
	lll_isr_status_reset();
   27b40:	f7ff ffb3 	bl	27aaa <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   27b44:	7a23      	ldrb	r3, [r4, #8]
   27b46:	f003 0271 	and.w	r2, r3, #113	; 0x71
   27b4a:	2a01      	cmp	r2, #1
		lll->chan_map_curr = lll->chan_map;
   27b4c:	bf02      	ittt	eq
   27b4e:	f3c3 0242 	ubfxeq	r2, r3, #1, #3
   27b52:	f362 1306 	bfieq	r3, r2, #4, #3
   27b56:	7223      	strbeq	r3, [r4, #8]
	if (lll->chan_map_curr &&
   27b58:	7a23      	ldrb	r3, [r4, #8]
   27b5a:	f013 0f70 	tst.w	r3, #112	; 0x70
   27b5e:	d00e      	beq.n	27b7e <isr_done+0x42>
	    (!lll->conn || !lll->conn->periph.cancelled) &&
   27b60:	6863      	ldr	r3, [r4, #4]
   27b62:	b11b      	cbz	r3, 27b6c <isr_done+0x30>
   27b64:	f893 3020 	ldrb.w	r3, [r3, #32]
   27b68:	079b      	lsls	r3, r3, #30
   27b6a:	d408      	bmi.n	27b7e <isr_done+0x42>
		pdu = chan_prepare(lll);
   27b6c:	4620      	mov	r0, r4
   27b6e:	f7f4 facf 	bl	1c110 <chan_prepare.isra.0>
		radio_tx_enable();
   27b72:	f7f5 fcbd 	bl	1d4f0 <radio_tx_enable>
}
   27b76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   27b7a:	f7f5 bf03 	b.w	1d984 <radio_tmr_end_capture>
	radio_filter_disable();
   27b7e:	f7f5 fdf5 	bl	1d76c <radio_filter_disable>
	lll_isr_cleanup(param);
   27b82:	4620      	mov	r0, r4
}
   27b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   27b88:	f7f3 bfba 	b.w	1bb00 <lll_isr_cleanup>

00027b8c <resume_prepare_cb>:
	ull = HDR_LLL2ULL(p->param);
   27b8c:	68c3      	ldr	r3, [r0, #12]
{
   27b8e:	b570      	push	{r4, r5, r6, lr}
   27b90:	4604      	mov	r4, r0
	ull = HDR_LLL2ULL(p->param);
   27b92:	681e      	ldr	r6, [r3, #0]
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   27b94:	f7ff fbf0 	bl	27378 <ticker_ticks_now_get>
   27b98:	4605      	mov	r5, r0
   27b9a:	4630      	mov	r0, r6
   27b9c:	f7ff ff56 	bl	27a4c <lll_event_offset_get>
	p->remainder = 0;
   27ba0:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   27ba2:	1a2d      	subs	r5, r5, r0
   27ba4:	6025      	str	r5, [r4, #0]
	p->remainder = 0;
   27ba6:	6063      	str	r3, [r4, #4]
	p->lazy = 0;
   27ba8:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   27baa:	4620      	mov	r0, r4
}
   27bac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   27bb0:	f7f4 bb2c 	b.w	1c20c <prepare_cb>

00027bb4 <lll_adv_scan_req_check>:
{
   27bb4:	b510      	push	{r4, lr}
	return (((lll->filter_policy & 0x01) == 0U) || devmatch_ok) &&
   27bb6:	7a40      	ldrb	r0, [r0, #9]
{
   27bb8:	f89d 4008 	ldrb.w	r4, [sp, #8]
	return (((lll->filter_policy & 0x01) == 0U) || devmatch_ok) &&
   27bbc:	07c0      	lsls	r0, r0, #31
   27bbe:	d500      	bpl.n	27bc2 <lll_adv_scan_req_check+0xe>
   27bc0:	b174      	cbz	r4, 27be0 <lll_adv_scan_req_check+0x2c>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   27bc2:	7808      	ldrb	r0, [r1, #0]
   27bc4:	ebb2 1fd0 	cmp.w	r2, r0, lsr #7
   27bc8:	d108      	bne.n	27bdc <lll_adv_scan_req_check+0x28>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   27bca:	2206      	movs	r2, #6
   27bcc:	3108      	adds	r1, #8
   27bce:	4618      	mov	r0, r3
   27bd0:	f7fc f8d9 	bl	23d86 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   27bd4:	fab0 f080 	clz	r0, r0
   27bd8:	0940      	lsrs	r0, r0, #5
}
   27bda:	bd10      	pop	{r4, pc}
	return (tx_addr == sr->rx_addr) &&
   27bdc:	2000      	movs	r0, #0
   27bde:	e7fc      	b.n	27bda <lll_adv_scan_req_check+0x26>
	return (((lll->filter_policy & 0x01) == 0U) || devmatch_ok) &&
   27be0:	4620      	mov	r0, r4
   27be2:	e7fa      	b.n	27bda <lll_adv_scan_req_check+0x26>

00027be4 <lll_adv_connect_ind_check>:
{
   27be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27be6:	9f07      	ldr	r7, [sp, #28]
   27be8:	f89d 4020 	ldrb.w	r4, [sp, #32]
   27bec:	4606      	mov	r6, r0
   27bee:	460d      	mov	r5, r1
   27bf0:	4618      	mov	r0, r3
	if (tgt_addr) {
   27bf2:	b1ef      	cbz	r7, 27c30 <lll_adv_connect_ind_check+0x4c>
}

static inline bool isr_rx_ci_adva_check(uint8_t tx_addr, uint8_t *addr,
					struct pdu_adv *ci)
{
	return (tx_addr == ci->rx_addr) &&
   27bf4:	780b      	ldrb	r3, [r1, #0]
   27bf6:	ebb2 1fd3 	cmp.w	r2, r3, lsr #7
   27bfa:	d003      	beq.n	27c04 <lll_adv_connect_ind_check+0x20>
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   27bfc:	2000      	movs	r0, #0
   27bfe:	f000 0001 	and.w	r0, r0, #1
}
   27c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   27c04:	2206      	movs	r2, #6
   27c06:	3108      	adds	r1, #8
   27c08:	f7fc f8bd 	bl	23d86 <memcmp>
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   27c0c:	2800      	cmp	r0, #0
   27c0e:	d1f5      	bne.n	27bfc <lll_adv_connect_ind_check+0x18>
	return (rx_addr == ci->tx_addr) &&
   27c10:	782b      	ldrb	r3, [r5, #0]
   27c12:	f89d 2018 	ldrb.w	r2, [sp, #24]
   27c16:	f3c3 1380 	ubfx	r3, r3, #6, #1
   27c1a:	4293      	cmp	r3, r2
   27c1c:	d1ef      	bne.n	27bfe <lll_adv_connect_ind_check+0x1a>
	       !memcmp(tgt_addr, ci->connect_ind.init_addr, BDADDR_SIZE);
   27c1e:	2206      	movs	r2, #6
   27c20:	1ca9      	adds	r1, r5, #2
   27c22:	4638      	mov	r0, r7
   27c24:	f7fc f8af 	bl	23d86 <memcmp>
	return (rx_addr == ci->tx_addr) &&
   27c28:	fab0 f080 	clz	r0, r0
   27c2c:	0940      	lsrs	r0, r0, #5
   27c2e:	e7e6      	b.n	27bfe <lll_adv_connect_ind_check+0x1a>
	return (((lll->filter_policy & 0x02) == 0) ||
   27c30:	7a73      	ldrb	r3, [r6, #9]
		(devmatch_ok)) &&
   27c32:	079b      	lsls	r3, r3, #30
   27c34:	d500      	bpl.n	27c38 <lll_adv_connect_ind_check+0x54>
	return (((lll->filter_policy & 0x02) == 0) ||
   27c36:	b174      	cbz	r4, 27c56 <lll_adv_connect_ind_check+0x72>
	return (tx_addr == ci->rx_addr) &&
   27c38:	782b      	ldrb	r3, [r5, #0]
   27c3a:	ebb2 1fd3 	cmp.w	r2, r3, lsr #7
   27c3e:	d108      	bne.n	27c52 <lll_adv_connect_ind_check+0x6e>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   27c40:	2206      	movs	r2, #6
   27c42:	f105 0108 	add.w	r1, r5, #8
   27c46:	f7fc f89e 	bl	23d86 <memcmp>
	return (tx_addr == ci->rx_addr) &&
   27c4a:	fab0 f080 	clz	r0, r0
   27c4e:	0940      	lsrs	r0, r0, #5
   27c50:	e7d7      	b.n	27c02 <lll_adv_connect_ind_check+0x1e>
   27c52:	2000      	movs	r0, #0
   27c54:	e7d5      	b.n	27c02 <lll_adv_connect_ind_check+0x1e>
		(devmatch_ok)) &&
   27c56:	4620      	mov	r0, r4
   27c58:	e7d3      	b.n	27c02 <lll_adv_connect_ind_check+0x1e>

00027c5a <prepare_cb>:
	return common_prepare_cb(p, false);
   27c5a:	2100      	movs	r1, #0
   27c5c:	f7f4 bc88 	b.w	1c570 <common_prepare_cb>

00027c60 <isr_done_cleanup>:
{
   27c60:	b538      	push	{r3, r4, r5, lr}
   27c62:	4604      	mov	r4, r0
	lll_isr_status_reset();
   27c64:	f7ff ff21 	bl	27aaa <lll_isr_status_reset>
	if (lll_is_done(param)) {
   27c68:	4620      	mov	r0, r4
   27c6a:	f7f3 ff0f 	bl	1ba8c <lll_is_done>
   27c6e:	4605      	mov	r5, r0
   27c70:	b998      	cbnz	r0, 27c9a <isr_done_cleanup+0x3a>
	radio_filter_disable();
   27c72:	f7f5 fd7b 	bl	1d76c <radio_filter_disable>
	if (++lll->chan == 3U) {
   27c76:	7923      	ldrb	r3, [r4, #4]
   27c78:	f3c3 0241 	ubfx	r2, r3, #1, #2
   27c7c:	3201      	adds	r2, #1
   27c7e:	f002 0203 	and.w	r2, r2, #3
   27c82:	2a03      	cmp	r2, #3
   27c84:	bf14      	ite	ne
   27c86:	f362 0342 	bfine	r3, r2, #1, #2
		lll->chan = 0U;
   27c8a:	f365 0342 	bfieq	r3, r5, #1, #2
   27c8e:	7123      	strb	r3, [r4, #4]
	lll_isr_cleanup(param);
   27c90:	4620      	mov	r0, r4
}
   27c92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_isr_cleanup(param);
   27c96:	f7f3 bf33 	b.w	1bb00 <lll_isr_cleanup>
}
   27c9a:	bd38      	pop	{r3, r4, r5, pc}

00027c9c <isr_done>:
{
   27c9c:	b508      	push	{r3, lr}
	isr_common_done(param);
   27c9e:	f7f4 fd37 	bl	1c710 <isr_common_done>
	radio_rx_enable();
   27ca2:	f7f5 fc1f 	bl	1d4e4 <radio_rx_enable>
}
   27ca6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_end_capture();
   27caa:	f7f5 be6b 	b.w	1d984 <radio_tmr_end_capture>

00027cae <isr_window>:
{
   27cae:	b510      	push	{r4, lr}
   27cb0:	4604      	mov	r4, r0
	isr_common_done(param);
   27cb2:	f7f4 fd2d 	bl	1c710 <isr_common_done>
	if (++lll->chan == 3U) {
   27cb6:	7923      	ldrb	r3, [r4, #4]
   27cb8:	f3c3 0241 	ubfx	r2, r3, #1, #2
   27cbc:	3201      	adds	r2, #1
   27cbe:	f002 0203 	and.w	r2, r2, #3
   27cc2:	2a03      	cmp	r2, #3
   27cc4:	bf14      	ite	ne
   27cc6:	f362 0342 	bfine	r3, r2, #1, #2
		lll->chan = 0U;
   27cca:	f36f 0342 	bfceq	r3, #1, #2
   27cce:	7123      	strb	r3, [r4, #4]
	lll_chan_set(37 + lll->chan);
   27cd0:	7920      	ldrb	r0, [r4, #4]
   27cd2:	f3c0 0041 	ubfx	r0, r0, #1, #2
   27cd6:	3025      	adds	r0, #37	; 0x25
   27cd8:	f7f3 fee0 	bl	1ba9c <lll_chan_set>
	remainder_us = radio_tmr_start_now(0);
   27cdc:	2000      	movs	r0, #0
   27cde:	f7f5 fdf1 	bl	1d8c4 <radio_tmr_start_now>
}
   27ce2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_tmr_end_capture();
   27ce6:	f7f5 be4d 	b.w	1d984 <radio_tmr_end_capture>

00027cea <resume_prepare_cb>:
	ull = HDR_LLL2ULL(p->param);
   27cea:	68c3      	ldr	r3, [r0, #12]
{
   27cec:	b570      	push	{r4, r5, r6, lr}
   27cee:	4604      	mov	r4, r0
	ull = HDR_LLL2ULL(p->param);
   27cf0:	681e      	ldr	r6, [r3, #0]
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   27cf2:	f7ff fb41 	bl	27378 <ticker_ticks_now_get>
   27cf6:	4605      	mov	r5, r0
   27cf8:	4630      	mov	r0, r6
   27cfa:	f7ff fea7 	bl	27a4c <lll_event_offset_get>
	p->remainder = 0;
   27cfe:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   27d00:	1a2d      	subs	r5, r5, r0
   27d02:	6025      	str	r5, [r4, #0]
	p->remainder = 0;
   27d04:	6063      	str	r3, [r4, #4]
	p->lazy = 0;
   27d06:	8123      	strh	r3, [r4, #8]
	return common_prepare_cb(p, true);
   27d08:	4620      	mov	r0, r4
   27d0a:	2101      	movs	r1, #1
}
   27d0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return common_prepare_cb(p, true);
   27d10:	f7f4 bc2e 	b.w	1c570 <common_prepare_cb>

00027d14 <isr_rx_scan_report.constprop.0>:
			&srsp->scan_rsp.addr[0], BDADDR_SIZE) == 0));
}

static int isr_rx_scan_report(struct lll_scan *lll, uint8_t rssi_ready,
   27d14:	b570      	push	{r4, r5, r6, lr}
   27d16:	4606      	mov	r6, r0
			      bool dir_report)
{
	struct node_rx_pdu *node_rx;
	int err = 0;

	node_rx = ull_pdu_rx_alloc_peek(3);
   27d18:	2003      	movs	r0, #3
static int isr_rx_scan_report(struct lll_scan *lll, uint8_t rssi_ready,
   27d1a:	460d      	mov	r5, r1
	node_rx = ull_pdu_rx_alloc_peek(3);
   27d1c:	f7f1 fb02 	bl	19324 <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
   27d20:	4604      	mov	r4, r0
   27d22:	b1c8      	cbz	r0, 27d58 <isr_rx_scan_report.constprop.0+0x44>
		return -ENOBUFS;
	}
	ull_pdu_rx_alloc();
   27d24:	f7f1 fb16 	bl	19354 <ull_pdu_rx_alloc>

	/* Prepare the report (adv or scan resp) */
	node_rx->hdr.handle = 0xffff;
   27d28:	f64f 73ff 	movw	r3, #65535	; 0xffff
   27d2c:	80e3      	strh	r3, [r4, #6]
			}
			break;
		}
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   27d2e:	2305      	movs	r3, #5
   27d30:	7123      	strb	r3, [r4, #4]
	}

	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   27d32:	b17e      	cbz	r6, 27d54 <isr_rx_scan_report.constprop.0+0x40>
   27d34:	f7f5 fce6 	bl	1d704 <radio_rssi_get>
   27d38:	b2c0      	uxtb	r0, r0
	/* save the resolving list index. */
	node_rx->hdr.rx_ftr.rl_idx = rl_idx;
#endif /* CONFIG_BT_CTLR_PRIVACY */
#if defined(CONFIG_BT_CTLR_EXT_SCAN_FP)
	/* save the directed adv report flag */
	node_rx->hdr.rx_ftr.direct = dir_report;
   27d3a:	7e63      	ldrb	r3, [r4, #25]
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   27d3c:	7620      	strb	r0, [r4, #24]
	node_rx->hdr.rx_ftr.direct = dir_report;
   27d3e:	f365 0300 	bfi	r3, r5, #0, #1
		node_rx->hdr.rx_ftr.chan = _radio.scanner.chan - 1;
		node_rx->hdr.rx_ftr.ticks_anchor = _radio.ticks_anchor;
	}
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */

	ull_rx_put(node_rx->hdr.link, node_rx);
   27d42:	6820      	ldr	r0, [r4, #0]
	node_rx->hdr.rx_ftr.direct = dir_report;
   27d44:	7663      	strb	r3, [r4, #25]
	ull_rx_put(node_rx->hdr.link, node_rx);
   27d46:	4621      	mov	r1, r4
   27d48:	f7f1 fb1a 	bl	19380 <ull_rx_put>
	ull_rx_sched();
   27d4c:	f7f1 fb28 	bl	193a0 <ull_rx_sched>

	return err;
   27d50:	2000      	movs	r0, #0
}
   27d52:	bd70      	pop	{r4, r5, r6, pc}
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   27d54:	207f      	movs	r0, #127	; 0x7f
   27d56:	e7f0      	b.n	27d3a <isr_rx_scan_report.constprop.0+0x26>
		return -ENOBUFS;
   27d58:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27d5c:	e7f9      	b.n	27d52 <isr_rx_scan_report.constprop.0+0x3e>

00027d5e <isr_abort>:
{
   27d5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   27d60:	4604      	mov	r4, r0
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   27d62:	2500      	movs	r5, #0
	lll_isr_status_reset();
   27d64:	f7ff fea1 	bl	27aaa <lll_isr_status_reset>
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   27d68:	462b      	mov	r3, r5
   27d6a:	2203      	movs	r2, #3
   27d6c:	4629      	mov	r1, r5
   27d6e:	9500      	str	r5, [sp, #0]
   27d70:	4628      	mov	r0, r5
   27d72:	f7ef fc09 	bl	17588 <ticker_stop>
	radio_disable();
   27d76:	f7f5 fbc1 	bl	1d4fc <radio_disable>
	radio_filter_disable();
   27d7a:	f7f5 fcf7 	bl	1d76c <radio_filter_disable>
	if (++lll->chan == 3U) {
   27d7e:	7922      	ldrb	r2, [r4, #4]
   27d80:	f3c2 0041 	ubfx	r0, r2, #1, #2
   27d84:	3001      	adds	r0, #1
   27d86:	f000 0003 	and.w	r0, r0, #3
   27d8a:	2803      	cmp	r0, #3
   27d8c:	bf14      	ite	ne
   27d8e:	f360 0242 	bfine	r2, r0, #1, #2
		lll->chan = 0U;
   27d92:	f365 0242 	bfieq	r2, r5, #1, #2
	lll_isr_cleanup(param);
   27d96:	4620      	mov	r0, r4
		lll->chan = 0U;
   27d98:	7122      	strb	r2, [r4, #4]
}
   27d9a:	b003      	add	sp, #12
   27d9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	lll_isr_cleanup(param);
   27da0:	f7f3 beae 	b.w	1bb00 <lll_isr_cleanup>

00027da4 <lll_scan_init>:
}
   27da4:	2000      	movs	r0, #0
   27da6:	4770      	bx	lr

00027da8 <lll_scan_reset>:
   27da8:	2000      	movs	r0, #0
   27daa:	4770      	bx	lr

00027dac <lll_conn_init>:
{
   27dac:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   27dae:	f7f5 fbf7 	bl	1d5a0 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   27db2:	7803      	ldrb	r3, [r0, #0]
   27db4:	2201      	movs	r2, #1
   27db6:	f362 0301 	bfi	r3, r2, #0, #2
   27dba:	7003      	strb	r3, [r0, #0]
}
   27dbc:	2000      	movs	r0, #0
   27dbe:	bd08      	pop	{r3, pc}

00027dc0 <lll_conn_reset>:
}
   27dc0:	2000      	movs	r0, #0
   27dc2:	4770      	bx	lr

00027dc4 <lll_conn_flush>:
}
   27dc4:	4770      	bx	lr

00027dc6 <lll_conn_tx_pkt_set>:
{
   27dc6:	b510      	push	{r4, lr}
   27dc8:	460c      	mov	r4, r1
	radio_phy_set(phy, flags);
   27dca:	2100      	movs	r1, #0
   27dcc:	4608      	mov	r0, r1
   27dce:	f7f5 fb0b 	bl	1d3e8 <radio_phy_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   27dd2:	2008      	movs	r0, #8
   27dd4:	2201      	movs	r2, #1
   27dd6:	211b      	movs	r1, #27
   27dd8:	f7f5 fb4c 	bl	1d474 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   27ddc:	4620      	mov	r0, r4
}
   27dde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_pkt_tx_set(pdu_data_tx);
   27de2:	f7f5 bb79 	b.w	1d4d8 <radio_pkt_tx_set>

00027de6 <lll_conn_pdu_tx_prep>:
{
   27de6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   27dea:	4604      	mov	r4, r0
   27dec:	4688      	mov	r8, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   27dee:	aa01      	add	r2, sp, #4
   27df0:	e9d0 010f 	ldrd	r0, r1, [r0, #60]	; 0x3c
   27df4:	f7fe ffff 	bl	26df6 <memq_peek>
	if (lll->empty || !link) {
   27df8:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
   27dfc:	075b      	lsls	r3, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   27dfe:	4681      	mov	r9, r0
	if (lll->empty || !link) {
   27e00:	d400      	bmi.n	27e04 <lll_conn_pdu_tx_prep+0x1e>
   27e02:	b9b8      	cbnz	r0, 27e34 <lll_conn_pdu_tx_prep+0x4e>
		lll->empty = 1U;
   27e04:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
   27e08:	f043 0304 	orr.w	r3, r3, #4
   27e0c:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
		p = (void *)radio_pkt_empty_get();
   27e10:	f7f5 fbc6 	bl	1d5a0 <radio_pkt_empty_get>
   27e14:	7803      	ldrb	r3, [r0, #0]
   27e16:	4605      	mov	r5, r0
		if (link || FORCE_MD_CNT_GET()) {
   27e18:	f1b9 0f00 	cmp.w	r9, #0
   27e1c:	d007      	beq.n	27e2e <lll_conn_pdu_tx_prep+0x48>
			p->md = 1U;
   27e1e:	f043 0310 	orr.w	r3, r3, #16
			p->md = 0U;
   27e22:	702b      	strb	r3, [r5, #0]
	*pdu_data_tx = p;
   27e24:	f8c8 5000 	str.w	r5, [r8]
}
   27e28:	b003      	add	sp, #12
   27e2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			p->md = 0U;
   27e2e:	f369 1304 	bfi	r3, r9, #4, #1
   27e32:	e7f6      	b.n	27e22 <lll_conn_pdu_tx_prep+0x3c>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   27e34:	9f01      	ldr	r7, [sp, #4]
   27e36:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
		if (!lll->packet_tx_head_len) {
   27e3a:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   27e3e:	3704      	adds	r7, #4
   27e40:	19bd      	adds	r5, r7, r6
		if (!lll->packet_tx_head_len) {
   27e42:	b913      	cbnz	r3, 27e4a <lll_conn_pdu_tx_prep+0x64>
			lll->packet_tx_head_len = p->len;
   27e44:	786b      	ldrb	r3, [r5, #1]
   27e46:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
		if (lll->packet_tx_head_offset) {
   27e4a:	b126      	cbz	r6, 27e56 <lll_conn_pdu_tx_prep+0x70>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   27e4c:	5dbb      	ldrb	r3, [r7, r6]
   27e4e:	2201      	movs	r2, #1
   27e50:	f362 0301 	bfi	r3, r2, #0, #2
   27e54:	55bb      	strb	r3, [r7, r6]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   27e56:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   27e5a:	1b9b      	subs	r3, r3, r6
   27e5c:	706b      	strb	r3, [r5, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   27e5e:	4620      	mov	r0, r4
   27e60:	f7ff fd9e 	bl	279a0 <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   27e64:	786b      	ldrb	r3, [r5, #1]
   27e66:	4283      	cmp	r3, r0
   27e68:	d90b      	bls.n	27e82 <lll_conn_pdu_tx_prep+0x9c>
			p->len = max_tx_octets;
   27e6a:	7068      	strb	r0, [r5, #1]
			p->md = 1U;
   27e6c:	5dbb      	ldrb	r3, [r7, r6]
			p->md = 1U;
   27e6e:	f043 0310 	orr.w	r3, r3, #16
			p->md = 0U;
   27e72:	55bb      	strb	r3, [r7, r6]
		p->rfu = 0U;
   27e74:	5dbb      	ldrb	r3, [r7, r6]
   27e76:	f36f 1347 	bfc	r3, #5, #3
   27e7a:	55bb      	strb	r3, [r7, r6]
		p->resv = 0U;
   27e7c:	2300      	movs	r3, #0
   27e7e:	70ab      	strb	r3, [r5, #2]
   27e80:	e7d0      	b.n	27e24 <lll_conn_pdu_tx_prep+0x3e>
		} else if ((link->next != lll->memq_tx.tail) ||
   27e82:	6c23      	ldr	r3, [r4, #64]	; 0x40
   27e84:	f8d9 2000 	ldr.w	r2, [r9]
   27e88:	429a      	cmp	r2, r3
   27e8a:	5dbb      	ldrb	r3, [r7, r6]
   27e8c:	d1ef      	bne.n	27e6e <lll_conn_pdu_tx_prep+0x88>
			p->md = 0U;
   27e8e:	f36f 1304 	bfc	r3, #4, #1
   27e92:	e7ee      	b.n	27e72 <lll_conn_pdu_tx_prep+0x8c>

00027e94 <ecb_encrypt_be>:

void ecb_encrypt_be(uint8_t const *const key_be, uint8_t const *const clear_text_be,
		    uint8_t * const cipher_text_be)
{
   27e94:	b530      	push	{r4, r5, lr}
   27e96:	b08d      	sub	sp, #52	; 0x34
   27e98:	460d      	mov	r5, r1
   27e9a:	4614      	mov	r4, r2
	struct ecb_param ecb;

	memcpy(&ecb.key[0], key_be, sizeof(ecb.key));
   27e9c:	4601      	mov	r1, r0
   27e9e:	2210      	movs	r2, #16
   27ea0:	4668      	mov	r0, sp
   27ea2:	f7fb ff81 	bl	23da8 <memcpy>
	memcpy(&ecb.clear_text[0], clear_text_be, sizeof(ecb.clear_text));
   27ea6:	2210      	movs	r2, #16
   27ea8:	4629      	mov	r1, r5
   27eaa:	eb0d 0002 	add.w	r0, sp, r2
   27eae:	f7fb ff7b 	bl	23da8 <memcpy>

	do_ecb(&ecb);
   27eb2:	4668      	mov	r0, sp
   27eb4:	f7f5 fa0c 	bl	1d2d0 <do_ecb>

	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
   27eb8:	2210      	movs	r2, #16
   27eba:	a908      	add	r1, sp, #32
   27ebc:	4620      	mov	r0, r4
   27ebe:	f7fb ff73 	bl	23da8 <memcpy>
}
   27ec2:	b00d      	add	sp, #52	; 0x34
   27ec4:	bd30      	pop	{r4, r5, pc}

00027ec6 <ecb_encrypt>:

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   27ec6:	b570      	push	{r4, r5, r6, lr}
   27ec8:	b08c      	sub	sp, #48	; 0x30
   27eca:	460e      	mov	r6, r1
   27ecc:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   27ece:	4601      	mov	r1, r0
   27ed0:	2210      	movs	r2, #16
   27ed2:	4668      	mov	r0, sp
{
   27ed4:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   27ed6:	f7fe ff5f 	bl	26d98 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   27eda:	2210      	movs	r2, #16
   27edc:	eb0d 0002 	add.w	r0, sp, r2
   27ee0:	4631      	mov	r1, r6
   27ee2:	f7fe ff59 	bl	26d98 <mem_rcopy>

	do_ecb(&ecb);
   27ee6:	4668      	mov	r0, sp
   27ee8:	f7f5 f9f2 	bl	1d2d0 <do_ecb>

	if (cipher_text_le) {
   27eec:	b125      	cbz	r5, 27ef8 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   27eee:	2210      	movs	r2, #16
   27ef0:	a908      	add	r1, sp, #32
   27ef2:	4628      	mov	r0, r5
   27ef4:	f7fe ff50 	bl	26d98 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   27ef8:	b124      	cbz	r4, 27f04 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   27efa:	2210      	movs	r2, #16
   27efc:	a908      	add	r1, sp, #32
   27efe:	4620      	mov	r0, r4
   27f00:	f7fb ff52 	bl	23da8 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   27f04:	b00c      	add	sp, #48	; 0x30
   27f06:	bd70      	pop	{r4, r5, r6, pc}

00027f08 <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   27f08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   27f0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   27f10:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   27f12:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   27f16:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   27f1a:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   27f1e:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   27f22:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   27f26:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   27f2a:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   27f2e:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   27f32:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   27f36:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   27f3a:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   27f3e:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   27f42:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   27f46:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   27f4a:	4770      	bx	lr

00027f4c <radio_tx_chain_delay_get>:
}
   27f4c:	2001      	movs	r0, #1
   27f4e:	4770      	bx	lr

00027f50 <radio_rx_ready_delay_get>:
}
   27f50:	2029      	movs	r0, #41	; 0x29
   27f52:	4770      	bx	lr

00027f54 <radio_rx_chain_delay_get>:
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_2M_US;
   27f54:	2802      	cmp	r0, #2
}
   27f56:	bf14      	ite	ne
   27f58:	200a      	movne	r0, #10
   27f5a:	2006      	moveq	r0, #6
   27f5c:	4770      	bx	lr

00027f5e <radio_phy_flags_rx_get>:
}
   27f5e:	2000      	movs	r0, #0
   27f60:	4770      	bx	lr

00027f62 <mayfly_prio_is_equal>:
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   27f62:	4288      	cmp	r0, r1
   27f64:	d00a      	beq.n	27f7c <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
   27f66:	2801      	cmp	r0, #1
   27f68:	d104      	bne.n	27f74 <mayfly_prio_is_equal+0x12>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   27f6a:	2902      	cmp	r1, #2
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   27f6c:	bf14      	ite	ne
   27f6e:	2000      	movne	r0, #0
   27f70:	2001      	moveq	r0, #1
   27f72:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   27f74:	2802      	cmp	r0, #2
   27f76:	d103      	bne.n	27f80 <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   27f78:	2901      	cmp	r1, #1
   27f7a:	e7f7      	b.n	27f6c <mayfly_prio_is_equal+0xa>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   27f7c:	2001      	movs	r0, #1
   27f7e:	4770      	bx	lr
   27f80:	2000      	movs	r0, #0
}
   27f82:	4770      	bx	lr

00027f84 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   27f84:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   27f86:	2000      	movs	r0, #0
   27f88:	f7f5 b99a 	b.w	1d2c0 <cntr_cmp_set>

00027f8c <sys_put_le32>:
	dst[1] = val >> 8;
   27f8c:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   27f90:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
   27f92:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
   27f94:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
   27f96:	0a00      	lsrs	r0, r0, #8
   27f98:	704b      	strb	r3, [r1, #1]
   27f9a:	70c8      	strb	r0, [r1, #3]
}
   27f9c:	4770      	bx	lr

00027f9e <hci_vendor_read_static_addr>:
				 uint8_t size)
{
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   27f9e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
{
   27fa2:	b510      	push	{r4, lr}
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   27fa4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   27fa8:	3201      	adds	r2, #1
{
   27faa:	4604      	mov	r4, r0
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   27fac:	d106      	bne.n	27fbc <hci_vendor_read_static_addr+0x1e>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   27fae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   27fb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   27fb6:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   27fb8:	4293      	cmp	r3, r2
   27fba:	d044      	beq.n	28046 <hci_vendor_read_static_addr+0xa8>
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   27fbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   27fc0:	f8d2 00a0 	ldr.w	r0, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   27fc4:	f010 0001 	ands.w	r0, r0, #1
   27fc8:	d036      	beq.n	28038 <hci_vendor_read_static_addr+0x9a>
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   27fca:	4621      	mov	r1, r4
   27fcc:	f8d2 00a4 	ldr.w	r0, [r2, #164]	; 0xa4
   27fd0:	f7ff ffdc 	bl	27f8c <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   27fd4:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   27fd8:	7123      	strb	r3, [r4, #4]
	dst[1] = val >> 8;
   27fda:	f3c3 2307 	ubfx	r3, r3, #8, #8

		/* The FICR value is a just a random number, with no knowledge
		 * of the Bluetooth Specification requirements for random
		 * static addresses.
		 */
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   27fde:	f063 033f 	orn	r3, r3, #63	; 0x3f
   27fe2:	7163      	strb	r3, [r4, #5]

		/* If no public address is provided and a static address is
		 * available, then it is recommended to return an identity root
		 * key (if available) from this command.
		 */
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   27fe4:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
   27fe8:	3101      	adds	r1, #1
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   27fea:	f104 0306 	add.w	r3, r4, #6
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   27fee:	d024      	beq.n	2803a <hci_vendor_read_static_addr+0x9c>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   27ff0:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   27ff4:	3101      	adds	r1, #1
   27ff6:	d020      	beq.n	2803a <hci_vendor_read_static_addr+0x9c>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   27ff8:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   27ffc:	3101      	adds	r1, #1
   27ffe:	d01c      	beq.n	2803a <hci_vendor_read_static_addr+0x9c>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   28000:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   28004:	3101      	adds	r1, #1
   28006:	d018      	beq.n	2803a <hci_vendor_read_static_addr+0x9c>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   28008:	4619      	mov	r1, r3
   2800a:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
   2800e:	f7ff ffbd 	bl	27f8c <sys_put_le32>
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   28012:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
   28016:	f104 010a 	add.w	r1, r4, #10
   2801a:	f7ff ffb7 	bl	27f8c <sys_put_le32>
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   2801e:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
   28022:	f104 010e 	add.w	r1, r4, #14
   28026:	f7ff ffb1 	bl	27f8c <sys_put_le32>
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   2802a:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
   2802e:	f104 0112 	add.w	r1, r4, #18
   28032:	f7ff ffab 	bl	27f8c <sys_put_le32>
		} else {
			/* Mark IR as invalid */
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
		}

		return 1;
   28036:	2001      	movs	r0, #1
	}

	return 0;
}
   28038:	bd10      	pop	{r4, pc}
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   2803a:	2210      	movs	r2, #16
   2803c:	2100      	movs	r1, #0
   2803e:	4618      	mov	r0, r3
   28040:	f7fb febd 	bl	23dbe <memset>
   28044:	e7f7      	b.n	28036 <hci_vendor_read_static_addr+0x98>
	return 0;
   28046:	2000      	movs	r0, #0
   28048:	e7f6      	b.n	28038 <hci_vendor_read_static_addr+0x9a>

0002804a <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   2804a:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   2804c:	2210      	movs	r2, #16
{
   2804e:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   28050:	2100      	movs	r1, #0
   28052:	f7fb feb4 	bl	23dbe <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   28056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   2805a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   2805e:	3301      	adds	r3, #1
   28060:	d023      	beq.n	280aa <hci_vendor_read_key_hierarchy_roots+0x60>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   28062:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   28066:	3301      	adds	r3, #1
   28068:	d01f      	beq.n	280aa <hci_vendor_read_key_hierarchy_roots+0x60>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   2806a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   2806e:	3301      	adds	r3, #1
   28070:	d01b      	beq.n	280aa <hci_vendor_read_key_hierarchy_roots+0x60>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   28072:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   28076:	3301      	adds	r3, #1
   28078:	d017      	beq.n	280aa <hci_vendor_read_key_hierarchy_roots+0x60>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   2807a:	4621      	mov	r1, r4
   2807c:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
   28080:	f7ff ff84 	bl	27f8c <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   28084:	1d21      	adds	r1, r4, #4
   28086:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
   2808a:	f7ff ff7f 	bl	27f8c <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   2808e:	f104 0108 	add.w	r1, r4, #8
   28092:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
   28096:	f7ff ff79 	bl	27f8c <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   2809a:	f104 010c 	add.w	r1, r4, #12
   2809e:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   280a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   280a6:	f7ff bf71 	b.w	27f8c <sys_put_le32>
		(void)memset(er, 0x00, 16);
   280aa:	4620      	mov	r0, r4
   280ac:	2210      	movs	r2, #16
}
   280ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   280b2:	2100      	movs	r1, #0
   280b4:	f7fb be83 	b.w	23dbe <memset>

000280b8 <sys_put_be32>:
	sys_put_be16(val >> 16, dst);
   280b8:	0c03      	lsrs	r3, r0, #16
	dst[0] = val >> 8;
   280ba:	0e02      	lsrs	r2, r0, #24
	dst[1] = val;
   280bc:	704b      	strb	r3, [r1, #1]
	dst[0] = val >> 8;
   280be:	f3c0 2307 	ubfx	r3, r0, #8, #8
   280c2:	700a      	strb	r2, [r1, #0]
   280c4:	708b      	strb	r3, [r1, #2]
	dst[1] = val;
   280c6:	70c8      	strb	r0, [r1, #3]
}
   280c8:	4770      	bx	lr

000280ca <fixed_data_unref>:
}
   280ca:	4770      	bx	lr

000280cc <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   280cc:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   280ce:	6849      	ldr	r1, [r1, #4]
   280d0:	6809      	ldr	r1, [r1, #0]
   280d2:	f7f5 bdb9 	b.w	1dc48 <net_buf_alloc_len>

000280d6 <net_buf_get>:
{
   280d6:	b570      	push	{r4, r5, r6, lr}
   280d8:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   280da:	f7f7 ff67 	bl	1ffac <z_impl_k_queue_get>
	if (!buf) {
   280de:	4605      	mov	r5, r0
   280e0:	b128      	cbz	r0, 280ee <net_buf_get+0x18>
   280e2:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   280e4:	7963      	ldrb	r3, [r4, #5]
   280e6:	f013 0301 	ands.w	r3, r3, #1
   280ea:	d102      	bne.n	280f2 <net_buf_get+0x1c>
	frag->frags = NULL;
   280ec:	6023      	str	r3, [r4, #0]
}
   280ee:	4628      	mov	r0, r5
   280f0:	bd70      	pop	{r4, r5, r6, pc}
   280f2:	2300      	movs	r3, #0
   280f4:	2200      	movs	r2, #0
   280f6:	4630      	mov	r0, r6
   280f8:	f7f7 ff58 	bl	1ffac <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   280fc:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   280fe:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   28100:	f023 0301 	bic.w	r3, r3, #1
   28104:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   28106:	4604      	mov	r4, r0
   28108:	e7ec      	b.n	280e4 <net_buf_get+0xe>

0002810a <net_buf_simple_init_with_data>:
	buf->size  = size;
   2810a:	b292      	uxth	r2, r2
	buf->__buf = data;
   2810c:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   2810e:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   28110:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   28112:	8082      	strh	r2, [r0, #4]
}
   28114:	4770      	bx	lr

00028116 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   28116:	6883      	ldr	r3, [r0, #8]
   28118:	440b      	add	r3, r1
   2811a:	6003      	str	r3, [r0, #0]
}
   2811c:	4770      	bx	lr

0002811e <net_buf_slist_put>:
{
   2811e:	b510      	push	{r4, lr}
	for (tail = buf; tail->frags; tail = tail->frags) {
   28120:	460b      	mov	r3, r1
   28122:	681c      	ldr	r4, [r3, #0]
   28124:	b984      	cbnz	r4, 28148 <net_buf_slist_put+0x2a>
	__asm__ volatile(
   28126:	f04f 0220 	mov.w	r2, #32
   2812a:	f3ef 8411 	mrs	r4, BASEPRI
   2812e:	f382 8812 	msr	BASEPRI_MAX, r2
   28132:	f3bf 8f6f 	isb	sy
	return list->tail;
   28136:	6842      	ldr	r2, [r0, #4]
Z_GENLIST_APPEND_LIST(slist, snode)
   28138:	b962      	cbnz	r2, 28154 <net_buf_slist_put+0x36>
	list->head = node;
   2813a:	6001      	str	r1, [r0, #0]
	list->tail = node;
   2813c:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   2813e:	f384 8811 	msr	BASEPRI, r4
   28142:	f3bf 8f6f 	isb	sy
}
   28146:	bd10      	pop	{r4, pc}
		tail->flags |= NET_BUF_FRAGS;
   28148:	795a      	ldrb	r2, [r3, #5]
   2814a:	f042 0201 	orr.w	r2, r2, #1
   2814e:	715a      	strb	r2, [r3, #5]
   28150:	4623      	mov	r3, r4
   28152:	e7e6      	b.n	28122 <net_buf_slist_put+0x4>
	parent->next = child;
   28154:	6011      	str	r1, [r2, #0]
}
   28156:	e7f1      	b.n	2813c <net_buf_slist_put+0x1e>

00028158 <net_buf_slist_get>:
{
   28158:	b570      	push	{r4, r5, r6, lr}
   2815a:	4603      	mov	r3, r0
	__asm__ volatile(
   2815c:	f04f 0220 	mov.w	r2, #32
   28160:	f3ef 8111 	mrs	r1, BASEPRI
   28164:	f382 8812 	msr	BASEPRI_MAX, r2
   28168:	f3bf 8f6f 	isb	sy
	return list->head;
   2816c:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2816e:	b128      	cbz	r0, 2817c <net_buf_slist_get+0x24>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   28170:	685c      	ldr	r4, [r3, #4]
	return node->next;
   28172:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   28174:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   28176:	42a0      	cmp	r0, r4
	list->tail = node;
   28178:	bf08      	it	eq
   2817a:	605a      	streq	r2, [r3, #4]
	__asm__ volatile(
   2817c:	f381 8811 	msr	BASEPRI, r1
   28180:	f3bf 8f6f 	isb	sy
	if (!buf) {
   28184:	b128      	cbz	r0, 28192 <net_buf_slist_get+0x3a>
   28186:	4602      	mov	r2, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   28188:	7951      	ldrb	r1, [r2, #5]
   2818a:	f011 0101 	ands.w	r1, r1, #1
   2818e:	d101      	bne.n	28194 <net_buf_slist_get+0x3c>
	frag->frags = NULL;
   28190:	6011      	str	r1, [r2, #0]
}
   28192:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   28194:	f04f 0120 	mov.w	r1, #32
   28198:	f3ef 8511 	mrs	r5, BASEPRI
   2819c:	f381 8812 	msr	BASEPRI_MAX, r1
   281a0:	f3bf 8f6f 	isb	sy
	return list->head;
   281a4:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_GET(slist, snode)
   281a6:	b129      	cbz	r1, 281b4 <net_buf_slist_get+0x5c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   281a8:	685e      	ldr	r6, [r3, #4]
	return node->next;
   281aa:	680c      	ldr	r4, [r1, #0]
	list->head = node;
   281ac:	601c      	str	r4, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   281ae:	42b1      	cmp	r1, r6
	list->tail = node;
   281b0:	bf08      	it	eq
   281b2:	605c      	streq	r4, [r3, #4]
		frag->frags = (void *)sys_slist_get(list);
   281b4:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
   281b6:	f385 8811 	msr	BASEPRI, r5
   281ba:	f3bf 8f6f 	isb	sy
		frag->flags &= ~NET_BUF_FRAGS;
   281be:	7951      	ldrb	r1, [r2, #5]
   281c0:	f021 0101 	bic.w	r1, r1, #1
   281c4:	7151      	strb	r1, [r2, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   281c6:	6812      	ldr	r2, [r2, #0]
   281c8:	e7de      	b.n	28188 <net_buf_slist_get+0x30>

000281ca <net_buf_put>:
{
   281ca:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   281cc:	460a      	mov	r2, r1
   281ce:	6814      	ldr	r4, [r2, #0]
   281d0:	b914      	cbnz	r4, 281d8 <net_buf_put+0xe>
}
   281d2:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   281d4:	f000 bd03 	b.w	28bde <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   281d8:	7953      	ldrb	r3, [r2, #5]
   281da:	f043 0301 	orr.w	r3, r3, #1
   281de:	7153      	strb	r3, [r2, #5]
   281e0:	4622      	mov	r2, r4
   281e2:	e7f4      	b.n	281ce <net_buf_put+0x4>

000281e4 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   281e4:	7902      	ldrb	r2, [r0, #4]
   281e6:	3201      	adds	r2, #1
   281e8:	7102      	strb	r2, [r0, #4]
	return buf;
}
   281ea:	4770      	bx	lr

000281ec <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   281ec:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   281ee:	4618      	mov	r0, r3
   281f0:	681b      	ldr	r3, [r3, #0]
   281f2:	2b00      	cmp	r3, #0
   281f4:	d1fb      	bne.n	281ee <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   281f6:	4770      	bx	lr

000281f8 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   281f8:	6802      	ldr	r2, [r0, #0]
{
   281fa:	b510      	push	{r4, lr}
	if (parent->frags) {
   281fc:	b12a      	cbz	r2, 2820a <net_buf_frag_insert+0x12>
   281fe:	460b      	mov	r3, r1
	while (buf->frags) {
   28200:	461c      	mov	r4, r3
   28202:	681b      	ldr	r3, [r3, #0]
   28204:	2b00      	cmp	r3, #0
   28206:	d1fb      	bne.n	28200 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   28208:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   2820a:	6001      	str	r1, [r0, #0]
}
   2820c:	bd10      	pop	{r4, pc}

0002820e <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   2820e:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   28210:	4604      	mov	r4, r0
   28212:	b920      	cbnz	r0, 2821e <net_buf_frag_add+0x10>
	buf->ref++;
   28214:	790b      	ldrb	r3, [r1, #4]
   28216:	3301      	adds	r3, #1
   28218:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   2821a:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   2821c:	bd10      	pop	{r4, pc}
   2821e:	4603      	mov	r3, r0
	while (buf->frags) {
   28220:	4618      	mov	r0, r3
   28222:	681b      	ldr	r3, [r3, #0]
   28224:	2b00      	cmp	r3, #0
   28226:	d1fb      	bne.n	28220 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   28228:	f7ff ffe6 	bl	281f8 <net_buf_frag_insert>
   2822c:	4620      	mov	r0, r4
   2822e:	e7f5      	b.n	2821c <net_buf_frag_add+0xe>

00028230 <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   28230:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	__ASSERT_NO_MSG(frag);

	if (parent) {
   28232:	b108      	cbz	r0, 28238 <net_buf_frag_del+0x8>
		__ASSERT_NO_MSG(parent->frags);
		__ASSERT_NO_MSG(parent->frags == frag);
		parent->frags = frag->frags;
   28234:	680b      	ldr	r3, [r1, #0]
   28236:	6003      	str	r3, [r0, #0]
	}

	next_frag = frag->frags;
   28238:	680c      	ldr	r4, [r1, #0]

	frag->frags = NULL;
   2823a:	2300      	movs	r3, #0

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   2823c:	4608      	mov	r0, r1
	frag->frags = NULL;
   2823e:	600b      	str	r3, [r1, #0]
	net_buf_unref(frag);
   28240:	f7f5 fd90 	bl	1dd64 <net_buf_unref>
#endif

	return next_frag;
}
   28244:	4620      	mov	r0, r4
   28246:	bd10      	pop	{r4, pc}

00028248 <net_buf_simple_add>:
	return buf->data + buf->len;
   28248:	8883      	ldrh	r3, [r0, #4]
   2824a:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   2824c:	4419      	add	r1, r3
   2824e:	8081      	strh	r1, [r0, #4]
	return tail;
}
   28250:	18d0      	adds	r0, r2, r3
   28252:	4770      	bx	lr

00028254 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   28254:	b430      	push	{r4, r5}
   28256:	8884      	ldrh	r4, [r0, #4]
   28258:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   2825a:	18a3      	adds	r3, r4, r2
   2825c:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2825e:	1928      	adds	r0, r5, r4
}
   28260:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   28262:	f7fb bda1 	b.w	23da8 <memcpy>

00028266 <net_buf_simple_add_u8>:
   28266:	8883      	ldrh	r3, [r0, #4]
   28268:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   2826a:	b510      	push	{r4, lr}
	buf->len += len;
   2826c:	1c5c      	adds	r4, r3, #1
   2826e:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   28270:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   28272:	18d0      	adds	r0, r2, r3
   28274:	bd10      	pop	{r4, pc}

00028276 <net_buf_simple_add_le16>:
   28276:	8883      	ldrh	r3, [r0, #4]
   28278:	6802      	ldr	r2, [r0, #0]

void net_buf_simple_add_le16(struct net_buf_simple *buf, uint16_t val)
{
   2827a:	b530      	push	{r4, r5, lr}
   2827c:	18d4      	adds	r4, r2, r3
	buf->len += len;
   2827e:	1c9d      	adds	r5, r3, #2
   28280:	8085      	strh	r5, [r0, #4]
	dst[0] = val;
   28282:	54d1      	strb	r1, [r2, r3]
	dst[1] = val >> 8;
   28284:	0a09      	lsrs	r1, r1, #8
   28286:	7061      	strb	r1, [r4, #1]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
}
   28288:	bd30      	pop	{r4, r5, pc}

0002828a <net_buf_simple_add_be16>:
   2828a:	8883      	ldrh	r3, [r0, #4]
   2828c:	6802      	ldr	r2, [r0, #0]

void net_buf_simple_add_be16(struct net_buf_simple *buf, uint16_t val)
{
   2828e:	b530      	push	{r4, r5, lr}
	buf->len += len;
   28290:	1c9d      	adds	r5, r3, #2
   28292:	8085      	strh	r5, [r0, #4]
   28294:	18d4      	adds	r4, r2, r3
	dst[0] = val >> 8;
   28296:	0a08      	lsrs	r0, r1, #8
   28298:	54d0      	strb	r0, [r2, r3]
	dst[1] = val;
   2829a:	7061      	strb	r1, [r4, #1]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_be16(val, net_buf_simple_add(buf, sizeof(val)));
}
   2829c:	bd30      	pop	{r4, r5, pc}

0002829e <net_buf_simple_add_le24>:
   2829e:	8883      	ldrh	r3, [r0, #4]

void net_buf_simple_add_le24(struct net_buf_simple *buf, uint32_t val)
{
   282a0:	b530      	push	{r4, r5, lr}
   282a2:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
   282a4:	1cdd      	adds	r5, r3, #3
   282a6:	18e2      	adds	r2, r4, r3
   282a8:	8085      	strh	r5, [r0, #4]
	dst[0] = val;
   282aa:	54e1      	strb	r1, [r4, r3]
	dst[1] = val >> 8;
   282ac:	f3c1 2307 	ubfx	r3, r1, #8, #8
	dst[2] = val >> 16;
   282b0:	0c09      	lsrs	r1, r1, #16
	dst[1] = val >> 8;
   282b2:	7053      	strb	r3, [r2, #1]
	dst[2] = val >> 16;
   282b4:	7091      	strb	r1, [r2, #2]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le24(val, net_buf_simple_add(buf, 3));
}
   282b6:	bd30      	pop	{r4, r5, pc}

000282b8 <net_buf_simple_add_be32>:

	sys_put_le32(val, net_buf_simple_add(buf, sizeof(val)));
}

void net_buf_simple_add_be32(struct net_buf_simple *buf, uint32_t val)
{
   282b8:	4603      	mov	r3, r0
   282ba:	4608      	mov	r0, r1
   282bc:	889a      	ldrh	r2, [r3, #4]
   282be:	6819      	ldr	r1, [r3, #0]
   282c0:	b410      	push	{r4}
	buf->len += len;
   282c2:	1d14      	adds	r4, r2, #4
   282c4:	809c      	strh	r4, [r3, #4]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_be32(val, net_buf_simple_add(buf, sizeof(val)));
   282c6:	4411      	add	r1, r2
}
   282c8:	bc10      	pop	{r4}
	sys_put_be32(val, net_buf_simple_add(buf, sizeof(val)));
   282ca:	f7ff bef5 	b.w	280b8 <sys_put_be32>

000282ce <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   282ce:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   282d0:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   282d2:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   282d4:	1a40      	subs	r0, r0, r1
	buf->len += len;
   282d6:	4411      	add	r1, r2
	buf->data -= len;
   282d8:	6018      	str	r0, [r3, #0]
	buf->len += len;
   282da:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   282dc:	4770      	bx	lr

000282de <net_buf_simple_push_be16>:
	buf->data -= len;
   282de:	6803      	ldr	r3, [r0, #0]
   282e0:	1e9a      	subs	r2, r3, #2
   282e2:	6002      	str	r2, [r0, #0]
	buf->len += len;
   282e4:	8882      	ldrh	r2, [r0, #4]
   282e6:	3202      	adds	r2, #2
   282e8:	8082      	strh	r2, [r0, #4]
	dst[0] = val >> 8;
   282ea:	0a0a      	lsrs	r2, r1, #8
   282ec:	f803 2c02 	strb.w	r2, [r3, #-2]
	dst[1] = val;
   282f0:	f803 1c01 	strb.w	r1, [r3, #-1]
void net_buf_simple_push_be16(struct net_buf_simple *buf, uint16_t val)
{
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_be16(val, net_buf_simple_push(buf, sizeof(val)));
}
   282f4:	4770      	bx	lr

000282f6 <net_buf_simple_push_u8>:
	buf->data -= len;
   282f6:	6802      	ldr	r2, [r0, #0]
   282f8:	1e53      	subs	r3, r2, #1
   282fa:	6003      	str	r3, [r0, #0]
	buf->len += len;
   282fc:	8883      	ldrh	r3, [r0, #4]
   282fe:	3301      	adds	r3, #1
   28300:	8083      	strh	r3, [r0, #4]

void net_buf_simple_push_u8(struct net_buf_simple *buf, uint8_t val)
{
	uint8_t *data = net_buf_simple_push(buf, 1);

	*data = val;
   28302:	f802 1c01 	strb.w	r1, [r2, #-1]
}
   28306:	4770      	bx	lr

00028308 <net_buf_simple_push_be24>:
	buf->data -= len;
   28308:	6803      	ldr	r3, [r0, #0]
   2830a:	1eda      	subs	r2, r3, #3
   2830c:	6002      	str	r2, [r0, #0]
	buf->len += len;
   2830e:	8882      	ldrh	r2, [r0, #4]
   28310:	3203      	adds	r2, #3
   28312:	8082      	strh	r2, [r0, #4]
	dst[0] = val >> 16;
   28314:	0c0a      	lsrs	r2, r1, #16
   28316:	f803 2c03 	strb.w	r2, [r3, #-3]
	dst[0] = val >> 8;
   2831a:	f3c1 2207 	ubfx	r2, r1, #8, #8
   2831e:	f803 2c02 	strb.w	r2, [r3, #-2]
	dst[1] = val;
   28322:	f803 1c01 	strb.w	r1, [r3, #-1]
void net_buf_simple_push_be24(struct net_buf_simple *buf, uint32_t val)
{
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_be24(val, net_buf_simple_push(buf, 3));
}
   28326:	4770      	bx	lr

00028328 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   28328:	8882      	ldrh	r2, [r0, #4]
   2832a:	1a52      	subs	r2, r2, r1
{
   2832c:	4603      	mov	r3, r0
	buf->len -= len;
   2832e:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   28330:	6800      	ldr	r0, [r0, #0]
   28332:	4408      	add	r0, r1
   28334:	6018      	str	r0, [r3, #0]
}
   28336:	4770      	bx	lr

00028338 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   28338:	4603      	mov	r3, r0
	void *data = buf->data;
   2833a:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2833c:	889a      	ldrh	r2, [r3, #4]
   2833e:	1a52      	subs	r2, r2, r1
	buf->data += len;
   28340:	4401      	add	r1, r0
	buf->len -= len;
   28342:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   28344:	6019      	str	r1, [r3, #0]

	return data;
}
   28346:	4770      	bx	lr

00028348 <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   28348:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   2834a:	6803      	ldr	r3, [r0, #0]
   2834c:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   2834e:	2101      	movs	r1, #1
   28350:	f7ff ffea 	bl	28328 <net_buf_simple_pull>

	return val;
}
   28354:	4620      	mov	r0, r4
   28356:	bd10      	pop	{r4, pc}

00028358 <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   28358:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   2835a:	6803      	ldr	r3, [r0, #0]
   2835c:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2835e:	2102      	movs	r1, #2
   28360:	f7ff ffe2 	bl	28328 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   28364:	4620      	mov	r0, r4
   28366:	bd10      	pop	{r4, pc}

00028368 <net_buf_simple_pull_be16>:

uint16_t net_buf_simple_pull_be16(struct net_buf_simple *buf)
{
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   28368:	6803      	ldr	r3, [r0, #0]
{
   2836a:	b510      	push	{r4, lr}
   2836c:	881c      	ldrh	r4, [r3, #0]
   2836e:	ba64      	rev16	r4, r4
   28370:	b2a4      	uxth	r4, r4
	net_buf_simple_pull(buf, sizeof(val));
   28372:	2102      	movs	r1, #2
   28374:	f7ff ffd8 	bl	28328 <net_buf_simple_pull>

	return sys_be16_to_cpu(val);
}
   28378:	4620      	mov	r0, r4
   2837a:	bd10      	pop	{r4, pc}

0002837c <net_buf_simple_pull_le24>:
{
	struct uint24 {
		uint32_t u24:24;
	} __packed val;

	val = UNALIGNED_GET((struct uint24 *)buf->data);
   2837c:	6803      	ldr	r3, [r0, #0]
{
   2837e:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((struct uint24 *)buf->data);
   28380:	785a      	ldrb	r2, [r3, #1]
   28382:	781c      	ldrb	r4, [r3, #0]
   28384:	789b      	ldrb	r3, [r3, #2]
   28386:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
   2838a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
	net_buf_simple_pull(buf, sizeof(val));
   2838e:	2103      	movs	r1, #3
   28390:	f7ff ffca 	bl	28328 <net_buf_simple_pull>

	return sys_le24_to_cpu(val.u24);
}
   28394:	4620      	mov	r0, r4
   28396:	bd10      	pop	{r4, pc}

00028398 <net_buf_simple_pull_be32>:

	return sys_le32_to_cpu(val);
}

uint32_t net_buf_simple_pull_be32(struct net_buf_simple *buf)
{
   28398:	b510      	push	{r4, lr}
   2839a:	6803      	ldr	r3, [r0, #0]
   2839c:	681c      	ldr	r4, [r3, #0]
	uint32_t val;

	val = UNALIGNED_GET((uint32_t *)buf->data);
	net_buf_simple_pull(buf, sizeof(val));
   2839e:	2104      	movs	r1, #4
   283a0:	ba24      	rev	r4, r4
   283a2:	f7ff ffc1 	bl	28328 <net_buf_simple_pull>

	return sys_be32_to_cpu(val);
}
   283a6:	4620      	mov	r0, r4
   283a8:	bd10      	pop	{r4, pc}

000283aa <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   283aa:	6802      	ldr	r2, [r0, #0]
   283ac:	6880      	ldr	r0, [r0, #8]
}
   283ae:	1a10      	subs	r0, r2, r0
   283b0:	4770      	bx	lr

000283b2 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   283b2:	8883      	ldrh	r3, [r0, #4]
   283b4:	88c2      	ldrh	r2, [r0, #6]
   283b6:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   283b8:	6803      	ldr	r3, [r0, #0]
   283ba:	6880      	ldr	r0, [r0, #8]
   283bc:	1a18      	subs	r0, r3, r0
}
   283be:	1a10      	subs	r0, r2, r0
   283c0:	4770      	bx	lr

000283c2 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   283c2:	6903      	ldr	r3, [r0, #16]
   283c4:	b2c9      	uxtb	r1, r1
   283c6:	220c      	movs	r2, #12
   283c8:	fb01 3302 	mla	r3, r1, r2, r3
   283cc:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   283ce:	f000 0007 	and.w	r0, r0, #7
   283d2:	4770      	bx	lr

000283d4 <set_on_state>:
	__asm__ volatile(
   283d4:	f04f 0320 	mov.w	r3, #32
   283d8:	f3ef 8211 	mrs	r2, BASEPRI
   283dc:	f383 8812 	msr	BASEPRI_MAX, r3
   283e0:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   283e4:	6803      	ldr	r3, [r0, #0]
   283e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   283ea:	f043 0302 	orr.w	r3, r3, #2
   283ee:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   283f0:	f382 8811 	msr	BASEPRI, r2
   283f4:	f3bf 8f6f 	isb	sy
}
   283f8:	4770      	bx	lr

000283fa <stop>:
{
   283fa:	4603      	mov	r3, r0
   283fc:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   283fe:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   28400:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   28402:	f04f 0420 	mov.w	r4, #32
   28406:	f3ef 8611 	mrs	r6, BASEPRI
   2840a:	f384 8812 	msr	BASEPRI_MAX, r4
   2840e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   28412:	250c      	movs	r5, #12
   28414:	fb05 0401 	mla	r4, r5, r1, r0
   28418:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   2841a:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   2841e:	d001      	beq.n	28424 <stop+0x2a>
   28420:	42a2      	cmp	r2, r4
   28422:	d111      	bne.n	28448 <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   28424:	fb05 0001 	mla	r0, r5, r1, r0
   28428:	2201      	movs	r2, #1
   2842a:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
   2842c:	2000      	movs	r0, #0
	__asm__ volatile(
   2842e:	f386 8811 	msr	BASEPRI, r6
   28432:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   28436:	b930      	cbnz	r0, 28446 <stop+0x4c>
	get_sub_config(dev, type)->stop();
   28438:	685b      	ldr	r3, [r3, #4]
   2843a:	220c      	movs	r2, #12
   2843c:	fb02 3101 	mla	r1, r2, r1, r3
   28440:	684b      	ldr	r3, [r1, #4]
   28442:	4798      	blx	r3
	return 0;
   28444:	2000      	movs	r0, #0
}
   28446:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   28448:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2844c:	e7ef      	b.n	2842e <stop+0x34>

0002844e <api_stop>:
	return stop(dev, subsys, CTX_API);
   2844e:	2280      	movs	r2, #128	; 0x80
   28450:	f7ff bfd3 	b.w	283fa <stop>

00028454 <async_start>:
{
   28454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28456:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   28458:	6904      	ldr	r4, [r0, #16]
{
   2845a:	4605      	mov	r5, r0
   2845c:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   2845e:	f04f 0020 	mov.w	r0, #32
   28462:	f3ef 8c11 	mrs	ip, BASEPRI
   28466:	f380 8812 	msr	BASEPRI_MAX, r0
   2846a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2846e:	260c      	movs	r6, #12
   28470:	fb06 4601 	mla	r6, r6, r1, r4
   28474:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   28476:	f000 0e07 	and.w	lr, r0, #7
   2847a:	f1be 0f01 	cmp.w	lr, #1
   2847e:	d110      	bne.n	284a2 <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   28480:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
   28482:	2600      	movs	r6, #0
	__asm__ volatile(
   28484:	f38c 8811 	msr	BASEPRI, ip
   28488:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   2848c:	b93e      	cbnz	r6, 2849e <async_start+0x4a>
	subdata->cb = cb;
   2848e:	200c      	movs	r0, #12
   28490:	4341      	muls	r1, r0
   28492:	440c      	add	r4, r1
	subdata->user_data = user_data;
   28494:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   28498:	686b      	ldr	r3, [r5, #4]
   2849a:	585b      	ldr	r3, [r3, r1]
   2849c:	4798      	blx	r3
}
   2849e:	4630      	mov	r0, r6
   284a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   284a2:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   284a6:	4287      	cmp	r7, r0
   284a8:	bf14      	ite	ne
   284aa:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
   284ae:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   284b2:	e7e7      	b.n	28484 <async_start+0x30>

000284b4 <api_start>:
{
   284b4:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   284b6:	2480      	movs	r4, #128	; 0x80
   284b8:	9400      	str	r4, [sp, #0]
   284ba:	f7ff ffcb 	bl	28454 <async_start>
}
   284be:	b002      	add	sp, #8
   284c0:	bd10      	pop	{r4, pc}

000284c2 <onoff_started_callback>:
	return &data->mgr[type];
   284c2:	6900      	ldr	r0, [r0, #16]
{
   284c4:	b410      	push	{r4}
	return &data->mgr[type];
   284c6:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   284c8:	241c      	movs	r4, #28
   284ca:	fb03 0004 	mla	r0, r3, r4, r0
   284ce:	2100      	movs	r1, #0
}
   284d0:	bc10      	pop	{r4}
	notify(mgr, 0);
   284d2:	4710      	bx	r2

000284d4 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   284d4:	2000      	movs	r0, #0
   284d6:	f7f7 b801 	b.w	1f4dc <nrfx_clock_stop>

000284da <blocking_start_callback>:
{
   284da:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   284dc:	f7f7 bd9a 	b.w	20014 <z_impl_k_sem_give>

000284e0 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   284e0:	f000 001f 	and.w	r0, r0, #31
   284e4:	0080      	lsls	r0, r0, #2
   284e6:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   284ea:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
   284ee:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   284f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   284f6:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
   284fa:	4770      	bx	lr

000284fc <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   284fc:	6843      	ldr	r3, [r0, #4]
   284fe:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   28500:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   28504:	600b      	str	r3, [r1, #0]
}
   28506:	2000      	movs	r0, #0
   28508:	4770      	bx	lr

0002850a <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2850a:	6843      	ldr	r3, [r0, #4]
   2850c:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   2850e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   28512:	4042      	eors	r2, r0
   28514:	400a      	ands	r2, r1
   28516:	4042      	eors	r2, r0
    p_reg->OUT = value;
   28518:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   2851c:	2000      	movs	r0, #0
   2851e:	4770      	bx	lr

00028520 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   28520:	6843      	ldr	r3, [r0, #4]
   28522:	685b      	ldr	r3, [r3, #4]
}
   28524:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   28526:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   2852a:	4770      	bx	lr

0002852c <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2852c:	6843      	ldr	r3, [r0, #4]
   2852e:	685b      	ldr	r3, [r3, #4]
}
   28530:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   28532:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   28536:	4770      	bx	lr

00028538 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   28538:	6843      	ldr	r3, [r0, #4]
   2853a:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2853c:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   28540:	404b      	eors	r3, r1
    p_reg->OUT = value;
   28542:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   28546:	2000      	movs	r0, #0
   28548:	4770      	bx	lr

0002854a <gpio_nrfx_manage_callback>:
	return port->data;
   2854a:	6903      	ldr	r3, [r0, #16]
	return list->head;
   2854c:	6858      	ldr	r0, [r3, #4]
{
   2854e:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   28550:	b158      	cbz	r0, 2856a <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   28552:	2400      	movs	r4, #0
   28554:	4281      	cmp	r1, r0
   28556:	d112      	bne.n	2857e <gpio_nrfx_manage_callback+0x34>
	return node->next;
   28558:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   2855a:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   2855c:	b954      	cbnz	r4, 28574 <gpio_nrfx_manage_callback+0x2a>
   2855e:	428d      	cmp	r5, r1
	list->head = node;
   28560:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   28562:	d100      	bne.n	28566 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   28564:	6098      	str	r0, [r3, #8]
	parent->next = child;
   28566:	2000      	movs	r0, #0
   28568:	6008      	str	r0, [r1, #0]
	if (set) {
   2856a:	b96a      	cbnz	r2, 28588 <gpio_nrfx_manage_callback+0x3e>
	return 0;
   2856c:	2000      	movs	r0, #0
}
   2856e:	bd30      	pop	{r4, r5, pc}
   28570:	4628      	mov	r0, r5
   28572:	e7ef      	b.n	28554 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   28574:	428d      	cmp	r5, r1
	parent->next = child;
   28576:	6020      	str	r0, [r4, #0]
	list->tail = node;
   28578:	bf08      	it	eq
   2857a:	609c      	streq	r4, [r3, #8]
}
   2857c:	e7f3      	b.n	28566 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   2857e:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   28580:	4604      	mov	r4, r0
   28582:	2d00      	cmp	r5, #0
   28584:	d1f4      	bne.n	28570 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   28586:	b13a      	cbz	r2, 28598 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
   28588:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   2858a:	685a      	ldr	r2, [r3, #4]
   2858c:	600a      	str	r2, [r1, #0]
	list->head = node;
   2858e:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   28590:	2800      	cmp	r0, #0
   28592:	d1eb      	bne.n	2856c <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   28594:	6099      	str	r1, [r3, #8]
}
   28596:	e7ea      	b.n	2856e <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   28598:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2859c:	e7e7      	b.n	2856e <gpio_nrfx_manage_callback+0x24>

0002859e <is_regular_addr_valid>:
{
   2859e:	b538      	push	{r3, r4, r5, lr}
   285a0:	4604      	mov	r4, r0
   285a2:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   285a4:	f000 f926 	bl	287f4 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   285a8:	4284      	cmp	r4, r0
   285aa:	d209      	bcs.n	285c0 <is_regular_addr_valid+0x22>
   285ac:	2c00      	cmp	r4, #0
   285ae:	db07      	blt.n	285c0 <is_regular_addr_valid+0x22>
	    addr < 0 ||
   285b0:	42a8      	cmp	r0, r5
   285b2:	d305      	bcc.n	285c0 <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   285b4:	442c      	add	r4, r5
	    len > flash_size ||
   285b6:	4284      	cmp	r4, r0
   285b8:	bf8c      	ite	hi
   285ba:	2000      	movhi	r0, #0
   285bc:	2001      	movls	r0, #1
}
   285be:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   285c0:	2000      	movs	r0, #0
   285c2:	e7fc      	b.n	285be <is_regular_addr_valid+0x20>

000285c4 <erase_op>:
{
   285c4:	b570      	push	{r4, r5, r6, lr}
   285c6:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   285c8:	f000 f91a 	bl	28800 <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   285cc:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   285ce:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   285d0:	b10b      	cbz	r3, 285d6 <erase_op+0x12>
		nrf_flash_sync_get_timestamp_begin();
   285d2:	f7f6 f9a1 	bl	1e918 <nrf_flash_sync_get_timestamp_begin>
{
   285d6:	2600      	movs	r6, #0
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   285d8:	6860      	ldr	r0, [r4, #4]
   285da:	f7f7 f853 	bl	1f684 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   285de:	68a3      	ldr	r3, [r4, #8]
   285e0:	1b5b      	subs	r3, r3, r5
   285e2:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   285e4:	6863      	ldr	r3, [r4, #4]
   285e6:	442b      	add	r3, r5
   285e8:	6063      	str	r3, [r4, #4]
		if (e_ctx->enable_time_limit) {
   285ea:	7b23      	ldrb	r3, [r4, #12]
		i++;
   285ec:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   285ee:	b93b      	cbnz	r3, 28600 <erase_op+0x3c>
	} while (e_ctx->len > 0);
   285f0:	68a3      	ldr	r3, [r4, #8]
   285f2:	2b00      	cmp	r3, #0
   285f4:	d1f0      	bne.n	285d8 <erase_op+0x14>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   285f6:	68a0      	ldr	r0, [r4, #8]
}
   285f8:	3800      	subs	r0, #0
   285fa:	bf18      	it	ne
   285fc:	2001      	movne	r0, #1
   285fe:	bd70      	pop	{r4, r5, r6, pc}
			if (nrf_flash_sync_check_time_limit(i)) {
   28600:	4630      	mov	r0, r6
   28602:	f7d9 f925 	bl	1850 <nrf_flash_sync_check_time_limit>
   28606:	2800      	cmp	r0, #0
   28608:	d0f2      	beq.n	285f0 <erase_op+0x2c>
   2860a:	e7f4      	b.n	285f6 <erase_op+0x32>

0002860c <nrf_flash_sync_is_required>:
	return ticker_is_initialized(0);
   2860c:	2000      	movs	r0, #0
   2860e:	f7ee bf03 	b.w	17418 <ticker_is_initialized>

00028612 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   28612:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   28616:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
   28618:	6883      	ldr	r3, [r0, #8]
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   2861a:	f04f 0800 	mov.w	r8, #0
	info->index = 0U;

	api->page_layout(dev, &layout, &layout_size);
   2861e:	695b      	ldr	r3, [r3, #20]
	info->start_offset = 0;
   28620:	f8c4 8000 	str.w	r8, [r4]
{
   28624:	460d      	mov	r5, r1
   28626:	4616      	mov	r6, r2
	info->index = 0U;
   28628:	f8c4 8008 	str.w	r8, [r4, #8]
	api->page_layout(dev, &layout, &layout_size);
   2862c:	aa01      	add	r2, sp, #4
   2862e:	4669      	mov	r1, sp
   28630:	4798      	blx	r3

	while (layout_size--) {
   28632:	e9dd 7c00 	ldrd	r7, ip, [sp]
   28636:	4640      	mov	r0, r8
		info->size = layout->pages_size;
   28638:	f107 0e04 	add.w	lr, r7, #4
	while (layout_size--) {
   2863c:	4560      	cmp	r0, ip
   2863e:	d104      	bne.n	2864a <flash_get_page_info+0x38>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   28640:	f06f 0015 	mvn.w	r0, #21
}
   28644:	b003      	add	sp, #12
   28646:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		info->size = layout->pages_size;
   2864a:	f85e 9030 	ldr.w	r9, [lr, r0, lsl #3]
			index_jmp = index - info->index;
   2864e:	68a1      	ldr	r1, [r4, #8]
			index_jmp = (offs - info->start_offset) / info->size;
   28650:	6822      	ldr	r2, [r4, #0]
		info->size = layout->pages_size;
   28652:	f8c4 9004 	str.w	r9, [r4, #4]
		if (offs == 0) {
   28656:	b985      	cbnz	r5, 2867a <flash_get_page_info+0x68>
			index_jmp = index - info->index;
   28658:	1a73      	subs	r3, r6, r1
		index_jmp = MIN(index_jmp, layout->pages_count);
   2865a:	f857 8030 	ldr.w	r8, [r7, r0, lsl #3]
   2865e:	4543      	cmp	r3, r8
   28660:	bf28      	it	cs
   28662:	4643      	movcs	r3, r8
		info->start_offset += (index_jmp * info->size);
   28664:	fb03 2209 	mla	r2, r3, r9, r2
		info->index += index_jmp;
   28668:	4419      	add	r1, r3
		if (index_jmp < layout->pages_count) {
   2866a:	4598      	cmp	r8, r3
		info->start_offset += (index_jmp * info->size);
   2866c:	6022      	str	r2, [r4, #0]
		info->index += index_jmp;
   2866e:	60a1      	str	r1, [r4, #8]
		if (index_jmp < layout->pages_count) {
   28670:	f100 0001 	add.w	r0, r0, #1
   28674:	d9e2      	bls.n	2863c <flash_get_page_info+0x2a>
			return 0;
   28676:	2000      	movs	r0, #0
   28678:	e7e4      	b.n	28644 <flash_get_page_info+0x32>
			index_jmp = (offs - info->start_offset) / info->size;
   2867a:	1aab      	subs	r3, r5, r2
   2867c:	fbb3 f3f9 	udiv	r3, r3, r9
   28680:	e7eb      	b.n	2865a <flash_get_page_info+0x48>

00028682 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   28682:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   28684:	2200      	movs	r2, #0
   28686:	f7ff bfc4 	b.w	28612 <flash_get_page_info>

0002868a <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   2868a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   2868e:	6883      	ldr	r3, [r0, #8]
{
   28690:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
   28692:	695b      	ldr	r3, [r3, #20]
{
   28694:	4688      	mov	r8, r1
   28696:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   28698:	a901      	add	r1, sp, #4
   2869a:	aa02      	add	r2, sp, #8
   2869c:	4798      	blx	r3
	off_t off = 0;
   2869e:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   286a0:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   286a2:	4625      	mov	r5, r4
   286a4:	9b02      	ldr	r3, [sp, #8]
   286a6:	42ab      	cmp	r3, r5
   286a8:	d802      	bhi.n	286b0 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   286aa:	b006      	add	sp, #24
   286ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   286b0:	9f01      	ldr	r7, [sp, #4]
   286b2:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   286b6:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   286b8:	687b      	ldr	r3, [r7, #4]
   286ba:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   286bc:	683a      	ldr	r2, [r7, #0]
   286be:	42b2      	cmp	r2, r6
   286c0:	eb0a 0306 	add.w	r3, sl, r6
   286c4:	d802      	bhi.n	286cc <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   286c6:	3501      	adds	r5, #1
   286c8:	469a      	mov	sl, r3
   286ca:	e7eb      	b.n	286a4 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   286cc:	4649      	mov	r1, r9
   286ce:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   286d0:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   286d2:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   286d4:	47c0      	blx	r8
   286d6:	2800      	cmp	r0, #0
   286d8:	d0e7      	beq.n	286aa <flash_page_foreach+0x20>
			off += page_info.size;
   286da:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   286dc:	3601      	adds	r6, #1
			off += page_info.size;
   286de:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   286e0:	e7ec      	b.n	286bc <flash_page_foreach+0x32>

000286e2 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   286e2:	6902      	ldr	r2, [r0, #16]
{
   286e4:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   286e6:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   286ea:	e883 0003 	stmia.w	r3, {r0, r1}
}
   286ee:	2000      	movs	r0, #0
   286f0:	4770      	bx	lr

000286f2 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   286f2:	6843      	ldr	r3, [r0, #4]
   286f4:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   286f6:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   286fa:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   286fe:	4770      	bx	lr

00028700 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   28700:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   28702:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   28704:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   28706:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2870a:	b148      	cbz	r0, 28720 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   2870c:	7c52      	ldrb	r2, [r2, #17]
   2870e:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   28710:	2000      	movs	r0, #0
   28712:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   28716:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2871a:	2201      	movs	r2, #1
   2871c:	601a      	str	r2, [r3, #0]
	return 0;
   2871e:	4770      	bx	lr
		return -1;
   28720:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   28724:	4770      	bx	lr

00028726 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   28726:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   28728:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2872a:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2872e:	b940      	cbnz	r0, 28742 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   28730:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   28732:	071b      	lsls	r3, r3, #28
   28734:	d406      	bmi.n	28744 <is_tx_ready.isra.0+0x1e>
   28736:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   2873a:	3800      	subs	r0, #0
   2873c:	bf18      	it	ne
   2873e:	2001      	movne	r0, #1
   28740:	4770      	bx	lr
   28742:	2001      	movs	r0, #1
}
   28744:	4770      	bx	lr

00028746 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   28746:	6843      	ldr	r3, [r0, #4]
   28748:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   2874a:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   2874e:	05d1      	lsls	r1, r2, #23
   28750:	d518      	bpl.n	28784 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   28752:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   28756:	b1aa      	cbz	r2, 28784 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   28758:	f04f 0120 	mov.w	r1, #32
   2875c:	f3ef 8211 	mrs	r2, BASEPRI
   28760:	f381 8812 	msr	BASEPRI_MAX, r1
   28764:	f3bf 8f6f 	isb	sy
   28768:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2876c:	b131      	cbz	r1, 2877c <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2876e:	2100      	movs	r1, #0
   28770:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   28774:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   28778:	2101      	movs	r1, #1
   2877a:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   2877c:	f382 8811 	msr	BASEPRI, r2
   28780:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   28784:	6842      	ldr	r2, [r0, #4]
   28786:	6852      	ldr	r2, [r2, #4]
   28788:	06d2      	lsls	r2, r2, #27
   2878a:	d515      	bpl.n	287b8 <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
   2878c:	f04f 0120 	mov.w	r1, #32
   28790:	f3ef 8211 	mrs	r2, BASEPRI
   28794:	f381 8812 	msr	BASEPRI_MAX, r1
   28798:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2879c:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   287a0:	b111      	cbz	r1, 287a8 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   287a2:	2100      	movs	r1, #0
   287a4:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   287a8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   287ac:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   287b0:	f382 8811 	msr	BASEPRI, r2
   287b4:	f3bf 8f6f 	isb	sy
}
   287b8:	4770      	bx	lr

000287ba <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   287ba:	4770      	bx	lr

000287bc <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   287bc:	4770      	bx	lr

000287be <nrf52_errata_108>:
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   287be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   287c2:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   287c6:	1c42      	adds	r2, r0, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   287c8:	bf04      	itt	eq
   287ca:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
   287ce:	f893 0fe0 	ldrbeq.w	r0, [r3, #4064]	; 0xfe0
}
   287d2:	1f83      	subs	r3, r0, #6
   287d4:	4258      	negs	r0, r3
   287d6:	4158      	adcs	r0, r3
   287d8:	4770      	bx	lr

000287da <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   287da:	4700      	bx	r0

000287dc <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   287dc:	f000 bcac 	b.w	29138 <z_impl_k_busy_wait>

000287e0 <nrfx_clock_enable>:
{
   287e0:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   287e2:	2000      	movs	r0, #0
   287e4:	f7db fe16 	bl	4414 <arch_irq_is_enabled>
   287e8:	b918      	cbnz	r0, 287f2 <nrfx_clock_enable+0x12>
}
   287ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   287ee:	f7db bded 	b.w	43cc <arch_irq_enable>
   287f2:	bd08      	pop	{r3, pc}

000287f4 <nrfx_nvmc_flash_size_get>:
   287f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   287f8:	691a      	ldr	r2, [r3, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   287fa:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   287fc:	4350      	muls	r0, r2
   287fe:	4770      	bx	lr

00028800 <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   28800:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   28804:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   28806:	4770      	bx	lr

00028808 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   28808:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2880c:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   2880e:	4770      	bx	lr

00028810 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   28810:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   28812:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   28814:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   28816:	bf9c      	itt	ls
   28818:	6880      	ldrls	r0, [r0, #8]
   2881a:	181b      	addls	r3, r3, r0
    r = RdOff - WrOff - 1u;
   2881c:	3b01      	subs	r3, #1
   2881e:	1a98      	subs	r0, r3, r2
}
   28820:	4770      	bx	lr

00028822 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   28822:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   28826:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   2882a:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   2882c:	eba9 0804 	sub.w	r8, r9, r4
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   28830:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
   28832:	4590      	cmp	r8, r2
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   28834:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   28836:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
   28838:	4414      	add	r4, r2
  if (Rem > NumBytes) {
   2883a:	d904      	bls.n	28846 <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   2883c:	f7fb fab4 	bl	23da8 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   28840:	60ec      	str	r4, [r5, #12]
}
   28842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   28846:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
   28848:	eba4 0409 	sub.w	r4, r4, r9
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   2884c:	f7fb faac 	bl	23da8 <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   28850:	6868      	ldr	r0, [r5, #4]
   28852:	4622      	mov	r2, r4
   28854:	eb07 0108 	add.w	r1, r7, r8
   28858:	e7f0      	b.n	2883c <_WriteNoCheck+0x1a>

0002885a <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   2885a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
   2885e:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   28860:	4606      	mov	r6, r0
   28862:	4689      	mov	r9, r1
   28864:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   28866:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   2886a:	6934      	ldr	r4, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   2886c:	68b3      	ldr	r3, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2886e:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
   28870:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   28872:	bf28      	it	cs
   28874:	18e4      	addcs	r4, r4, r3
   28876:	3c01      	subs	r4, #1
   28878:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   2887a:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   2887c:	42bc      	cmp	r4, r7
   2887e:	bf28      	it	cs
   28880:	463c      	movcs	r4, r7
   28882:	4294      	cmp	r4, r2
   28884:	bf28      	it	cs
   28886:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
   28888:	4649      	mov	r1, r9
   2888a:	4428      	add	r0, r5
   2888c:	4622      	mov	r2, r4
   2888e:	f7fb fa8b 	bl	23da8 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   28892:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   28894:	4425      	add	r5, r4
      WrOff = 0u;
   28896:	42ab      	cmp	r3, r5
   28898:	bf08      	it	eq
   2889a:	2500      	moveq	r5, #0
  } while (NumBytes);
   2889c:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   2889e:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   288a0:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   288a2:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   288a4:	d1e1      	bne.n	2886a <_WriteBlocking+0x10>
}
   288a6:	4640      	mov	r0, r8
   288a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000288ac <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   288ac:	f7f6 bf52 	b.w	1f754 <_DoInit>

000288b0 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   288b0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   288b2:	f7ff fffb 	bl	288ac <SEGGER_RTT_Init>

	return 0;
}
   288b6:	2000      	movs	r0, #0
   288b8:	bd08      	pop	{r3, pc}

000288ba <z_device_state_init>:
}
   288ba:	4770      	bx	lr

000288bc <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   288bc:	b138      	cbz	r0, 288ce <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   288be:	68c3      	ldr	r3, [r0, #12]
   288c0:	8818      	ldrh	r0, [r3, #0]
   288c2:	f3c0 0008 	ubfx	r0, r0, #0, #9
   288c6:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   288ca:	4258      	negs	r0, r3
   288cc:	4158      	adcs	r0, r3
}
   288ce:	4770      	bx	lr

000288d0 <arch_system_halt>:
	__asm__ volatile(
   288d0:	f04f 0220 	mov.w	r2, #32
   288d4:	f3ef 8311 	mrs	r3, BASEPRI
   288d8:	f382 8812 	msr	BASEPRI_MAX, r2
   288dc:	f3bf 8f6f 	isb	sy
	for (;;) {
   288e0:	e7fe      	b.n	288e0 <arch_system_halt+0x10>

000288e2 <k_heap_init>:
{
   288e2:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   288e4:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   288e8:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   288ec:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   288ee:	f7f9 b809 	b.w	21904 <sys_heap_init>

000288f2 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   288f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   288f6:	b085      	sub	sp, #20
   288f8:	4606      	mov	r6, r0
   288fa:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   288fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   28900:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   28902:	f000 fc1d 	bl	29140 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   28906:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2890a:	4605      	mov	r5, r0
   2890c:	460f      	mov	r7, r1
   2890e:	f04f 0320 	mov.w	r3, #32
   28912:	f3ef 8411 	mrs	r4, BASEPRI
   28916:	f383 8812 	msr	BASEPRI_MAX, r3
   2891a:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2891e:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   28922:	464a      	mov	r2, r9
   28924:	4641      	mov	r1, r8
   28926:	4630      	mov	r0, r6
   28928:	f7f8 ff71 	bl	2180e <sys_heap_aligned_alloc>
   2892c:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   2892e:	f7f8 fa4b 	bl	20dc8 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   28932:	9b03      	ldr	r3, [sp, #12]
   28934:	b13b      	cbz	r3, 28946 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   28936:	f384 8811 	msr	BASEPRI, r4
   2893a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   2893e:	4618      	mov	r0, r3
   28940:	b005      	add	sp, #20
   28942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   28946:	1a28      	subs	r0, r5, r0
   28948:	eb67 0101 	sbc.w	r1, r7, r1
   2894c:	2801      	cmp	r0, #1
   2894e:	f171 0200 	sbcs.w	r2, r1, #0
   28952:	dbf0      	blt.n	28936 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   28954:	e9cd 0100 	strd	r0, r1, [sp]
   28958:	465a      	mov	r2, fp
   2895a:	4621      	mov	r1, r4
   2895c:	4650      	mov	r0, sl
   2895e:	f7f7 feff 	bl	20760 <z_pend_curr>
	__asm__ volatile(
   28962:	f04f 0320 	mov.w	r3, #32
   28966:	f3ef 8411 	mrs	r4, BASEPRI
   2896a:	f383 8812 	msr	BASEPRI_MAX, r3
   2896e:	f3bf 8f6f 	isb	sy
   28972:	e7d6      	b.n	28922 <k_heap_aligned_alloc+0x30>

00028974 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   28974:	b538      	push	{r3, r4, r5, lr}
   28976:	4604      	mov	r4, r0
   28978:	f04f 0320 	mov.w	r3, #32
   2897c:	f3ef 8511 	mrs	r5, BASEPRI
   28980:	f383 8812 	msr	BASEPRI_MAX, r3
   28984:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   28988:	f7f8 fef4 	bl	21774 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   2898c:	f104 000c 	add.w	r0, r4, #12
   28990:	f000 fb4f 	bl	29032 <z_unpend_all>
   28994:	b130      	cbz	r0, 289a4 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   28996:	4629      	mov	r1, r5
   28998:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   2899c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   289a0:	f7f7 bd8c 	b.w	204bc <z_reschedule>
	__asm__ volatile(
   289a4:	f385 8811 	msr	BASEPRI, r5
   289a8:	f3bf 8f6f 	isb	sy
}
   289ac:	bd38      	pop	{r3, r4, r5, pc}

000289ae <k_mem_slab_init>:
{
   289ae:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   289b0:	2400      	movs	r4, #0
   289b2:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   289b4:	ea41 0402 	orr.w	r4, r1, r2
   289b8:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   289bc:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   289c0:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   289c2:	d10c      	bne.n	289de <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   289c4:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   289c6:	42a3      	cmp	r3, r4
   289c8:	d103      	bne.n	289d2 <k_mem_slab_init+0x24>
   289ca:	e9c0 0000 	strd	r0, r0, [r0]
}
   289ce:	2000      	movs	r0, #0
}
   289d0:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   289d2:	6945      	ldr	r5, [r0, #20]
   289d4:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   289d6:	3401      	adds	r4, #1
		slab->free_list = p;
   289d8:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   289da:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   289dc:	e7f3      	b.n	289c6 <k_mem_slab_init+0x18>
		return -EINVAL;
   289de:	f06f 0015 	mvn.w	r0, #21
	return rc;
   289e2:	e7f5      	b.n	289d0 <k_mem_slab_init+0x22>

000289e4 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   289e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   289e6:	4604      	mov	r4, r0
   289e8:	460d      	mov	r5, r1
	__asm__ volatile(
   289ea:	f04f 0320 	mov.w	r3, #32
   289ee:	f3ef 8611 	mrs	r6, BASEPRI
   289f2:	f383 8812 	msr	BASEPRI_MAX, r3
   289f6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   289fa:	6947      	ldr	r7, [r0, #20]
   289fc:	b977      	cbnz	r7, 28a1c <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   289fe:	f000 fb00 	bl	29002 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   28a02:	b158      	cbz	r0, 28a1c <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   28a04:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   28a06:	6142      	str	r2, [r0, #20]
   28a08:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   28a0a:	f000 fa89 	bl	28f20 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   28a0e:	4631      	mov	r1, r6
   28a10:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   28a14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   28a18:	f7f7 bd50 	b.w	204bc <z_reschedule>
	**(char ***) mem = slab->free_list;
   28a1c:	682b      	ldr	r3, [r5, #0]
   28a1e:	6962      	ldr	r2, [r4, #20]
   28a20:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   28a22:	682b      	ldr	r3, [r5, #0]
   28a24:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   28a26:	69a3      	ldr	r3, [r4, #24]
   28a28:	3b01      	subs	r3, #1
   28a2a:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   28a2c:	f386 8811 	msr	BASEPRI, r6
   28a30:	f3bf 8f6f 	isb	sy
}
   28a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00028a36 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   28a36:	f3ef 8005 	mrs	r0, IPSR
}
   28a3a:	3800      	subs	r0, #0
   28a3c:	bf18      	it	ne
   28a3e:	2001      	movne	r0, #1
   28a40:	4770      	bx	lr

00028a42 <z_impl_k_thread_name_set>:
}
   28a42:	f06f 0057 	mvn.w	r0, #87	; 0x57
   28a46:	4770      	bx	lr

00028a48 <k_thread_name_get>:
}
   28a48:	2000      	movs	r0, #0
   28a4a:	4770      	bx	lr

00028a4c <z_impl_k_thread_start>:
	z_sched_start(thread);
   28a4c:	f7f7 be2c 	b.w	206a8 <z_sched_start>

00028a50 <z_pm_save_idle_exit>:
{
   28a50:	b508      	push	{r3, lr}
	pm_system_resume();
   28a52:	f7db fad3 	bl	3ffc <pm_system_resume>
}
   28a56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   28a5a:	f7ff beaf 	b.w	287bc <sys_clock_idle_exit>

00028a5e <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   28a5e:	f990 300e 	ldrsb.w	r3, [r0, #14]
   28a62:	428b      	cmp	r3, r1
   28a64:	d001      	beq.n	28a6a <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   28a66:	f7f7 be8f 	b.w	20788 <z_set_prio>
}
   28a6a:	2000      	movs	r0, #0
   28a6c:	4770      	bx	lr

00028a6e <z_impl_k_mutex_init>:
{
   28a6e:	4603      	mov	r3, r0
	mutex->owner = NULL;
   28a70:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   28a72:	e9c3 0002 	strd	r0, r0, [r3, #8]
   28a76:	e9c3 3300 	strd	r3, r3, [r3]
}
   28a7a:	4770      	bx	lr

00028a7c <queue_insert>:
{
   28a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28a80:	4699      	mov	r9, r3
   28a82:	4604      	mov	r4, r0
   28a84:	f89d 3020 	ldrb.w	r3, [sp, #32]
   28a88:	460d      	mov	r5, r1
   28a8a:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   28a8c:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   28a90:	f04f 0220 	mov.w	r2, #32
   28a94:	f3ef 8711 	mrs	r7, BASEPRI
   28a98:	f382 8812 	msr	BASEPRI_MAX, r2
   28a9c:	f3bf 8f6f 	isb	sy
	if (is_append) {
   28aa0:	b103      	cbz	r3, 28aa4 <queue_insert+0x28>
	return list->tail;
   28aa2:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   28aa4:	4630      	mov	r0, r6
   28aa6:	f000 faac 	bl	29002 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   28aaa:	b158      	cbz	r0, 28ac4 <queue_insert+0x48>
   28aac:	2400      	movs	r4, #0
   28aae:	67c4      	str	r4, [r0, #124]	; 0x7c
   28ab0:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   28ab4:	f000 fa34 	bl	28f20 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   28ab8:	4630      	mov	r0, r6
   28aba:	4639      	mov	r1, r7
   28abc:	f7f7 fcfe 	bl	204bc <z_reschedule>
	return 0;
   28ac0:	2000      	movs	r0, #0
   28ac2:	e00c      	b.n	28ade <queue_insert+0x62>
	if (alloc) {
   28ac4:	f1b9 0f00 	cmp.w	r9, #0
   28ac8:	d01b      	beq.n	28b02 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   28aca:	2108      	movs	r1, #8
   28acc:	f7f8 faa2 	bl	21014 <z_thread_aligned_alloc>
		if (anode == NULL) {
   28ad0:	b938      	cbnz	r0, 28ae2 <queue_insert+0x66>
	__asm__ volatile(
   28ad2:	f387 8811 	msr	BASEPRI, r7
   28ad6:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   28ada:	f06f 000b 	mvn.w	r0, #11
}
   28ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   28ae2:	2301      	movs	r3, #1
		anode->data = data;
   28ae4:	f8c0 8004 	str.w	r8, [r0, #4]
   28ae8:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   28aea:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   28aec:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   28af0:	b95d      	cbnz	r5, 28b0a <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   28af2:	6823      	ldr	r3, [r4, #0]
   28af4:	4313      	orrs	r3, r2
   28af6:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   28af8:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   28afa:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   28afc:	b973      	cbnz	r3, 28b1c <queue_insert+0xa0>
	list->tail = node;
   28afe:	6060      	str	r0, [r4, #4]
}
   28b00:	e00c      	b.n	28b1c <queue_insert+0xa0>
	node->next_and_flags = flags;
   28b02:	f8c8 9000 	str.w	r9, [r8]
}
   28b06:	4640      	mov	r0, r8
   28b08:	e7ef      	b.n	28aea <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   28b0a:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   28b0c:	f033 0303 	bics.w	r3, r3, #3
   28b10:	d110      	bne.n	28b34 <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   28b12:	6002      	str	r2, [r0, #0]
	return list->tail;
   28b14:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   28b16:	b93a      	cbnz	r2, 28b28 <queue_insert+0xac>
	list->head = node;
   28b18:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   28b1c:	2104      	movs	r1, #4
   28b1e:	f104 0010 	add.w	r0, r4, #16
   28b22:	f000 fca2 	bl	2946a <z_handle_obj_poll_events>
   28b26:	e7c7      	b.n	28ab8 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   28b28:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   28b2a:	f003 0303 	and.w	r3, r3, #3
   28b2e:	4303      	orrs	r3, r0
   28b30:	6013      	str	r3, [r2, #0]
   28b32:	e7e4      	b.n	28afe <queue_insert+0x82>
   28b34:	4313      	orrs	r3, r2
   28b36:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   28b38:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   28b3a:	f003 0303 	and.w	r3, r3, #3
   28b3e:	4303      	orrs	r3, r0
   28b40:	602b      	str	r3, [r5, #0]
}
   28b42:	e7eb      	b.n	28b1c <queue_insert+0xa0>

00028b44 <z_queue_node_peek>:
{
   28b44:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   28b46:	4604      	mov	r4, r0
   28b48:	b130      	cbz	r0, 28b58 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   28b4a:	6802      	ldr	r2, [r0, #0]
   28b4c:	0793      	lsls	r3, r2, #30
   28b4e:	d003      	beq.n	28b58 <z_queue_node_peek+0x14>
		ret = anode->data;
   28b50:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   28b52:	b109      	cbz	r1, 28b58 <z_queue_node_peek+0x14>
			k_free(anode);
   28b54:	f000 fc97 	bl	29486 <k_free>
}
   28b58:	4620      	mov	r0, r4
   28b5a:	bd10      	pop	{r4, pc}

00028b5c <z_impl_k_queue_init>:
	list->head = NULL;
   28b5c:	2300      	movs	r3, #0
	list->tail = NULL;
   28b5e:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   28b62:	f100 0308 	add.w	r3, r0, #8
   28b66:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   28b6a:	f100 0310 	add.w	r3, r0, #16
   28b6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   28b72:	4770      	bx	lr

00028b74 <z_impl_k_queue_cancel_wait>:
{
   28b74:	b570      	push	{r4, r5, r6, lr}
   28b76:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   28b78:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   28b7c:	f04f 0320 	mov.w	r3, #32
   28b80:	f3ef 8611 	mrs	r6, BASEPRI
   28b84:	f383 8812 	msr	BASEPRI_MAX, r3
   28b88:	f3bf 8f6f 	isb	sy
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   28b8c:	4628      	mov	r0, r5
   28b8e:	f000 fa38 	bl	29002 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   28b92:	b120      	cbz	r0, 28b9e <z_impl_k_queue_cancel_wait+0x2a>
   28b94:	2200      	movs	r2, #0
   28b96:	67c2      	str	r2, [r0, #124]	; 0x7c
	thread->base.swap_data = data;
   28b98:	6142      	str	r2, [r0, #20]
	z_ready_thread(thread);
   28b9a:	f000 f9c1 	bl	28f20 <z_ready_thread>
	z_handle_obj_poll_events(&queue->poll_events, state);
   28b9e:	f104 0010 	add.w	r0, r4, #16
   28ba2:	2108      	movs	r1, #8
   28ba4:	f000 fc61 	bl	2946a <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   28ba8:	4631      	mov	r1, r6
   28baa:	4628      	mov	r0, r5
}
   28bac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&queue->lock, key);
   28bb0:	f7f7 bc84 	b.w	204bc <z_reschedule>

00028bb4 <k_queue_append>:
{
   28bb4:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   28bb6:	2301      	movs	r3, #1
   28bb8:	9300      	str	r3, [sp, #0]
   28bba:	2300      	movs	r3, #0
{
   28bbc:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   28bbe:	4619      	mov	r1, r3
   28bc0:	f7ff ff5c 	bl	28a7c <queue_insert>
}
   28bc4:	b003      	add	sp, #12
   28bc6:	f85d fb04 	ldr.w	pc, [sp], #4

00028bca <k_queue_prepend>:
{
   28bca:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   28bcc:	2300      	movs	r3, #0
{
   28bce:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   28bd0:	9300      	str	r3, [sp, #0]
   28bd2:	4619      	mov	r1, r3
   28bd4:	f7ff ff52 	bl	28a7c <queue_insert>
}
   28bd8:	b003      	add	sp, #12
   28bda:	f85d fb04 	ldr.w	pc, [sp], #4

00028bde <k_queue_append_list>:
{
   28bde:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28be2:	4605      	mov	r5, r0
   28be4:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   28be6:	460c      	mov	r4, r1
   28be8:	b391      	cbz	r1, 28c50 <k_queue_append_list+0x72>
   28bea:	b38a      	cbz	r2, 28c50 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   28bec:	f100 0708 	add.w	r7, r0, #8
   28bf0:	f04f 0320 	mov.w	r3, #32
   28bf4:	f3ef 8811 	mrs	r8, BASEPRI
   28bf8:	f383 8812 	msr	BASEPRI_MAX, r3
   28bfc:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   28c00:	4638      	mov	r0, r7
   28c02:	f000 f9fe 	bl	29002 <z_unpend_first_thread>
   28c06:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   28c0a:	b920      	cbnz	r0, 28c16 <k_queue_append_list+0x38>
	return list->tail;
   28c0c:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   28c0e:	b9ca      	cbnz	r2, 28c44 <k_queue_append_list+0x66>
	list->head = node;
   28c10:	602c      	str	r4, [r5, #0]
	list->tail = node;
   28c12:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   28c14:	e00a      	b.n	28c2c <k_queue_append_list+0x4e>
   28c16:	6144      	str	r4, [r0, #20]
   28c18:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   28c1c:	f000 f980 	bl	28f20 <z_ready_thread>
		head = *(void **)head;
   28c20:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   28c22:	4638      	mov	r0, r7
   28c24:	f000 f9ed 	bl	29002 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   28c28:	2c00      	cmp	r4, #0
   28c2a:	d1ee      	bne.n	28c0a <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   28c2c:	2104      	movs	r1, #4
   28c2e:	f105 0010 	add.w	r0, r5, #16
   28c32:	f000 fc1a 	bl	2946a <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   28c36:	4638      	mov	r0, r7
   28c38:	4641      	mov	r1, r8
   28c3a:	f7f7 fc3f 	bl	204bc <z_reschedule>
	return 0;
   28c3e:	2000      	movs	r0, #0
}
   28c40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   28c44:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   28c46:	f003 0303 	and.w	r3, r3, #3
   28c4a:	431c      	orrs	r4, r3
   28c4c:	6014      	str	r4, [r2, #0]
}
   28c4e:	e7e0      	b.n	28c12 <k_queue_append_list+0x34>
		return -EINVAL;
   28c50:	f06f 0015 	mvn.w	r0, #21
   28c54:	e7f4      	b.n	28c40 <k_queue_append_list+0x62>

00028c56 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   28c56:	b15a      	cbz	r2, 28c70 <z_impl_k_sem_init+0x1a>
   28c58:	428a      	cmp	r2, r1
   28c5a:	d309      	bcc.n	28c70 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   28c5c:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   28c60:	e9c0 1202 	strd	r1, r2, [r0, #8]
   28c64:	e9c0 0000 	strd	r0, r0, [r0]
   28c68:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   28c6c:	2000      	movs	r0, #0
   28c6e:	4770      	bx	lr
		return -EINVAL;
   28c70:	f06f 0015 	mvn.w	r0, #21
}
   28c74:	4770      	bx	lr

00028c76 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   28c76:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   28c78:	2301      	movs	r3, #1
   28c7a:	408b      	lsls	r3, r1
   28c7c:	ea22 0303 	bic.w	r3, r2, r3
   28c80:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   28c82:	fa22 f001 	lsr.w	r0, r2, r1
}
   28c86:	f000 0001 	and.w	r0, r0, #1
   28c8a:	4770      	bx	lr

00028c8c <unschedule_locked>:
{
   28c8c:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   28c8e:	2103      	movs	r1, #3
{
   28c90:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   28c92:	300c      	adds	r0, #12
   28c94:	f7ff ffef 	bl	28c76 <flag_test_and_clear>
   28c98:	4604      	mov	r4, r0
   28c9a:	b118      	cbz	r0, 28ca4 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   28c9c:	f105 0010 	add.w	r0, r5, #16
   28ca0:	f000 f9f4 	bl	2908c <z_abort_timeout>
}
   28ca4:	4620      	mov	r0, r4
   28ca6:	bd38      	pop	{r3, r4, r5, pc}

00028ca8 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   28ca8:	b120      	cbz	r0, 28cb4 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   28caa:	2200      	movs	r2, #0
   28cac:	4611      	mov	r1, r2
   28cae:	3088      	adds	r0, #136	; 0x88
   28cb0:	f000 b9cf 	b.w	29052 <z_sched_wake>
}
   28cb4:	4770      	bx	lr

00028cb6 <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   28cb6:	68c3      	ldr	r3, [r0, #12]
{
   28cb8:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   28cba:	f3c3 0540 	ubfx	r5, r3, #1, #1
   28cbe:	079b      	lsls	r3, r3, #30
{
   28cc0:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   28cc2:	d416      	bmi.n	28cf2 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   28cc4:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   28cc6:	2102      	movs	r1, #2
   28cc8:	300c      	adds	r0, #12
   28cca:	f7ff ffd4 	bl	28c76 <flag_test_and_clear>
   28cce:	b180      	cbz	r0, 28cf2 <cancel_async_locked+0x3c>
	return list->head;
   28cd0:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   28cd4:	b16a      	cbz	r2, 28cf2 <cancel_async_locked+0x3c>
   28cd6:	4294      	cmp	r4, r2
   28cd8:	d11b      	bne.n	28d12 <cancel_async_locked+0x5c>
	return node->next;
   28cda:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   28cdc:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
Z_GENLIST_REMOVE(slist, snode)
   28ce0:	b98d      	cbnz	r5, 28d06 <cancel_async_locked+0x50>
   28ce2:	428c      	cmp	r4, r1
	list->head = node;
   28ce4:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   28ce8:	d101      	bne.n	28cee <cancel_async_locked+0x38>
	list->tail = node;
   28cea:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
	parent->next = child;
   28cee:	2300      	movs	r3, #0
   28cf0:	6023      	str	r3, [r4, #0]
	return *flagp;
   28cf2:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   28cf4:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   28cf8:	bf1e      	ittt	ne
   28cfa:	f043 0302 	orrne.w	r3, r3, #2
   28cfe:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   28d00:	f003 000f 	andne.w	r0, r3, #15
}
   28d04:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   28d06:	428c      	cmp	r4, r1
	parent->next = child;
   28d08:	602a      	str	r2, [r5, #0]
	list->tail = node;
   28d0a:	bf08      	it	eq
   28d0c:	f8c6 5084 	streq.w	r5, [r6, #132]	; 0x84
}
   28d10:	e7ed      	b.n	28cee <cancel_async_locked+0x38>
	return node->next;
   28d12:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   28d14:	6812      	ldr	r2, [r2, #0]
   28d16:	e7dd      	b.n	28cd4 <cancel_async_locked+0x1e>

00028d18 <work_timeout>:
{
   28d18:	b573      	push	{r0, r1, r4, r5, r6, lr}
   28d1a:	4604      	mov	r4, r0
   28d1c:	f04f 0320 	mov.w	r3, #32
   28d20:	f3ef 8511 	mrs	r5, BASEPRI
   28d24:	f383 8812 	msr	BASEPRI_MAX, r3
   28d28:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   28d2c:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   28d2e:	f1a0 0610 	sub.w	r6, r0, #16
   28d32:	2103      	movs	r1, #3
   28d34:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   28d36:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   28d38:	f7ff ff9d 	bl	28c76 <flag_test_and_clear>
   28d3c:	b128      	cbz	r0, 28d4a <work_timeout+0x32>
		queue = dw->queue;
   28d3e:	69a3      	ldr	r3, [r4, #24]
   28d40:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   28d42:	a901      	add	r1, sp, #4
   28d44:	4630      	mov	r0, r6
   28d46:	f7f7 fa81 	bl	2024c <submit_to_queue_locked>
	__asm__ volatile(
   28d4a:	f385 8811 	msr	BASEPRI, r5
   28d4e:	f3bf 8f6f 	isb	sy
}
   28d52:	b002      	add	sp, #8
   28d54:	bd70      	pop	{r4, r5, r6, pc}

00028d56 <k_work_init>:
{
   28d56:	b538      	push	{r3, r4, r5, lr}
   28d58:	4604      	mov	r4, r0
   28d5a:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   28d5c:	2210      	movs	r2, #16
   28d5e:	2100      	movs	r1, #0
   28d60:	f7fb f82d 	bl	23dbe <memset>
   28d64:	6065      	str	r5, [r4, #4]
}
   28d66:	bd38      	pop	{r3, r4, r5, pc}

00028d68 <k_work_submit_to_queue>:
{
   28d68:	b537      	push	{r0, r1, r2, r4, r5, lr}
   28d6a:	9001      	str	r0, [sp, #4]
   28d6c:	4608      	mov	r0, r1
	__asm__ volatile(
   28d6e:	f04f 0320 	mov.w	r3, #32
   28d72:	f3ef 8511 	mrs	r5, BASEPRI
   28d76:	f383 8812 	msr	BASEPRI_MAX, r3
   28d7a:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   28d7e:	a901      	add	r1, sp, #4
   28d80:	f7f7 fa64 	bl	2024c <submit_to_queue_locked>
   28d84:	4604      	mov	r4, r0
	__asm__ volatile(
   28d86:	f385 8811 	msr	BASEPRI, r5
   28d8a:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   28d8e:	2800      	cmp	r0, #0
   28d90:	dd04      	ble.n	28d9c <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   28d92:	f7f7 fe43 	bl	20a1c <z_impl_k_is_preempt_thread>
   28d96:	b108      	cbz	r0, 28d9c <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   28d98:	f7f7 fd98 	bl	208cc <z_impl_k_yield>
}
   28d9c:	4620      	mov	r0, r4
   28d9e:	b003      	add	sp, #12
   28da0:	bd30      	pop	{r4, r5, pc}

00028da2 <k_work_init_delayable>:
{
   28da2:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   28da4:	2230      	movs	r2, #48	; 0x30
{
   28da6:	4604      	mov	r4, r0
   28da8:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   28daa:	2100      	movs	r1, #0
   28dac:	f7fb f807 	bl	23dbe <memset>
   28db0:	f44f 7380 	mov.w	r3, #256	; 0x100
   28db4:	6065      	str	r5, [r4, #4]
   28db6:	60e3      	str	r3, [r4, #12]
}
   28db8:	bd38      	pop	{r3, r4, r5, pc}

00028dba <k_work_delayable_busy_get>:
	__asm__ volatile(
   28dba:	f04f 0220 	mov.w	r2, #32
   28dbe:	f3ef 8311 	mrs	r3, BASEPRI
   28dc2:	f382 8812 	msr	BASEPRI_MAX, r2
   28dc6:	f3bf 8f6f 	isb	sy
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28dca:	f3bf 8f5b 	dmb	ish
   28dce:	68c0      	ldr	r0, [r0, #12]
   28dd0:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
   28dd4:	f383 8811 	msr	BASEPRI, r3
   28dd8:	f3bf 8f6f 	isb	sy
}
   28ddc:	f000 000f 	and.w	r0, r0, #15
   28de0:	4770      	bx	lr

00028de2 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   28de2:	b538      	push	{r3, r4, r5, lr}
   28de4:	4604      	mov	r4, r0
	__asm__ volatile(
   28de6:	f04f 0320 	mov.w	r3, #32
   28dea:	f3ef 8511 	mrs	r5, BASEPRI
   28dee:	f383 8812 	msr	BASEPRI_MAX, r3
   28df2:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   28df6:	f7ff ff49 	bl	28c8c <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   28dfa:	4620      	mov	r0, r4
   28dfc:	f7ff ff5b 	bl	28cb6 <cancel_async_locked>
	__asm__ volatile(
   28e00:	f385 8811 	msr	BASEPRI, r5
   28e04:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   28e08:	bd38      	pop	{r3, r4, r5, pc}

00028e0a <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   28e0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28e0c:	4604      	mov	r4, r0
   28e0e:	460d      	mov	r5, r1
	__asm__ volatile(
   28e10:	f04f 0320 	mov.w	r3, #32
   28e14:	f3ef 8711 	mrs	r7, BASEPRI
   28e18:	f383 8812 	msr	BASEPRI_MAX, r3
   28e1c:	f3bf 8f6f 	isb	sy
   28e20:	f3bf 8f5b 	dmb	ish
   28e24:	68c3      	ldr	r3, [r0, #12]
   28e26:	f3bf 8f5b 	dmb	ish
	return atomic_get(&dwork->work.flags) & K_WORK_MASK;
   28e2a:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   28e2e:	2b00      	cmp	r3, #0
   28e30:	bf14      	ite	ne
   28e32:	2601      	movne	r6, #1
   28e34:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   28e36:	d009      	beq.n	28e4c <k_work_cancel_delayable_sync+0x42>
	(void)unschedule_locked(dwork);
   28e38:	f7ff ff28 	bl	28c8c <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   28e3c:	4620      	mov	r0, r4
   28e3e:	f7ff ff3a 	bl	28cb6 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   28e42:	4629      	mov	r1, r5
   28e44:	4620      	mov	r0, r4
   28e46:	f7f7 f9e3 	bl	20210 <cancel_sync_locked>
   28e4a:	4603      	mov	r3, r0
	__asm__ volatile(
   28e4c:	f387 8811 	msr	BASEPRI, r7
   28e50:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   28e54:	b13b      	cbz	r3, 28e66 <k_work_cancel_delayable_sync+0x5c>
	return z_impl_k_sem_take(sem, timeout);
   28e56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   28e5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28e5e:	f105 0008 	add.w	r0, r5, #8
   28e62:	f7f7 f8fd 	bl	20060 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   28e66:	4630      	mov	r0, r6
   28e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00028e6a <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   28e6a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   28e6e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   28e70:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   28e72:	2300      	movs	r3, #0
	node->prev = NULL;
   28e74:	e9c0 3300 	strd	r3, r3, [r0]
}
   28e78:	4770      	bx	lr

00028e7a <unpend_thread_no_timeout>:
{
   28e7a:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   28e7c:	f7ff fff5 	bl	28e6a <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   28e80:	7b43      	ldrb	r3, [r0, #13]
   28e82:	f023 0302 	bic.w	r3, r3, #2
   28e86:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   28e88:	2300      	movs	r3, #0
   28e8a:	6083      	str	r3, [r0, #8]
}
   28e8c:	bd08      	pop	{r3, pc}

00028e8e <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   28e8e:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   28e92:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   28e96:	4283      	cmp	r3, r0
		return b2 - b1;
   28e98:	bf14      	ite	ne
   28e9a:	1ac0      	subne	r0, r0, r3
	return 0;
   28e9c:	2000      	moveq	r0, #0
}
   28e9e:	4770      	bx	lr

00028ea0 <z_unpend_thread_no_timeout>:
{
   28ea0:	b508      	push	{r3, lr}
	__asm__ volatile(
   28ea2:	f04f 0320 	mov.w	r3, #32
   28ea6:	f3ef 8111 	mrs	r1, BASEPRI
   28eaa:	f383 8812 	msr	BASEPRI_MAX, r3
   28eae:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   28eb2:	f7ff ffe2 	bl	28e7a <unpend_thread_no_timeout>
	__asm__ volatile(
   28eb6:	f381 8811 	msr	BASEPRI, r1
   28eba:	f3bf 8f6f 	isb	sy
}
   28ebe:	bd08      	pop	{r3, pc}

00028ec0 <z_unpend_thread>:
{
   28ec0:	b510      	push	{r4, lr}
	__asm__ volatile(
   28ec2:	f04f 0320 	mov.w	r3, #32
   28ec6:	f3ef 8411 	mrs	r4, BASEPRI
   28eca:	f383 8812 	msr	BASEPRI_MAX, r3
   28ece:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   28ed2:	f7ff ffd2 	bl	28e7a <unpend_thread_no_timeout>
	__asm__ volatile(
   28ed6:	f384 8811 	msr	BASEPRI, r4
   28eda:	f3bf 8f6f 	isb	sy
}
   28ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   28ee2:	3018      	adds	r0, #24
   28ee4:	f000 b8d2 	b.w	2908c <z_abort_timeout>

00028ee8 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   28ee8:	4603      	mov	r3, r0
   28eea:	b920      	cbnz	r0, 28ef6 <z_reschedule_irqlock+0xe>
   28eec:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   28ef0:	b90a      	cbnz	r2, 28ef6 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   28ef2:	f7db baeb 	b.w	44cc <arch_swap>
   28ef6:	f383 8811 	msr	BASEPRI, r3
   28efa:	f3bf 8f6f 	isb	sy
}
   28efe:	4770      	bx	lr

00028f00 <z_reschedule_unlocked>:
	__asm__ volatile(
   28f00:	f04f 0320 	mov.w	r3, #32
   28f04:	f3ef 8011 	mrs	r0, BASEPRI
   28f08:	f383 8812 	msr	BASEPRI_MAX, r3
   28f0c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   28f10:	f7ff bfea 	b.w	28ee8 <z_reschedule_irqlock>

00028f14 <z_priq_dumb_best>:
{
   28f14:	4603      	mov	r3, r0
	return list->head == list;
   28f16:	6800      	ldr	r0, [r0, #0]
}
   28f18:	4283      	cmp	r3, r0
   28f1a:	bf08      	it	eq
   28f1c:	2000      	moveq	r0, #0
   28f1e:	4770      	bx	lr

00028f20 <z_ready_thread>:
{
   28f20:	b510      	push	{r4, lr}
   28f22:	f04f 0320 	mov.w	r3, #32
   28f26:	f3ef 8411 	mrs	r4, BASEPRI
   28f2a:	f383 8812 	msr	BASEPRI_MAX, r3
   28f2e:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   28f32:	f7f7 fb83 	bl	2063c <ready_thread>
	__asm__ volatile(
   28f36:	f384 8811 	msr	BASEPRI, r4
   28f3a:	f3bf 8f6f 	isb	sy
}
   28f3e:	bd10      	pop	{r4, pc}

00028f40 <z_thread_timeout>:
{
   28f40:	b510      	push	{r4, lr}
   28f42:	4601      	mov	r1, r0
	__asm__ volatile(
   28f44:	f04f 0320 	mov.w	r3, #32
   28f48:	f3ef 8411 	mrs	r4, BASEPRI
   28f4c:	f383 8812 	msr	BASEPRI_MAX, r3
   28f50:	f3bf 8f6f 	isb	sy
		if (!killed) {
   28f54:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   28f58:	f013 0f28 	tst.w	r3, #40	; 0x28
   28f5c:	d10d      	bne.n	28f7a <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   28f5e:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   28f62:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   28f64:	b10b      	cbz	r3, 28f6a <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   28f66:	f7ff ff88 	bl	28e7a <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   28f6a:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   28f6e:	f023 0314 	bic.w	r3, r3, #20
   28f72:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   28f76:	f7f7 fb61 	bl	2063c <ready_thread>
	__asm__ volatile(
   28f7a:	f384 8811 	msr	BASEPRI, r4
   28f7e:	f3bf 8f6f 	isb	sy
}
   28f82:	bd10      	pop	{r4, pc}

00028f84 <add_to_waitq_locked>:
{
   28f84:	b538      	push	{r3, r4, r5, lr}
   28f86:	4604      	mov	r4, r0
   28f88:	460d      	mov	r5, r1
	unready_thread(thread);
   28f8a:	f7f7 fbab 	bl	206e4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   28f8e:	7b63      	ldrb	r3, [r4, #13]
   28f90:	f043 0302 	orr.w	r3, r3, #2
   28f94:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   28f96:	b195      	cbz	r5, 28fbe <add_to_waitq_locked+0x3a>
   28f98:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   28f9a:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28f9c:	429d      	cmp	r5, r3
   28f9e:	d015      	beq.n	28fcc <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   28fa0:	b1a3      	cbz	r3, 28fcc <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
   28fa2:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   28fa6:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   28faa:	4291      	cmp	r1, r2
   28fac:	d008      	beq.n	28fc0 <add_to_waitq_locked+0x3c>
		return b2 - b1;
   28fae:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   28fb0:	2a00      	cmp	r2, #0
   28fb2:	dd05      	ble.n	28fc0 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
   28fb4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   28fb6:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   28fba:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   28fbc:	605c      	str	r4, [r3, #4]
}
   28fbe:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   28fc0:	686a      	ldr	r2, [r5, #4]
   28fc2:	4293      	cmp	r3, r2
   28fc4:	d002      	beq.n	28fcc <add_to_waitq_locked+0x48>
   28fc6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   28fc8:	2b00      	cmp	r3, #0
   28fca:	d1ec      	bne.n	28fa6 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   28fcc:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   28fce:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   28fd2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   28fd4:	606c      	str	r4, [r5, #4]
}
   28fd6:	e7f2      	b.n	28fbe <add_to_waitq_locked+0x3a>

00028fd8 <z_unpend1_no_timeout>:
{
   28fd8:	b510      	push	{r4, lr}
	__asm__ volatile(
   28fda:	f04f 0320 	mov.w	r3, #32
   28fde:	f3ef 8411 	mrs	r4, BASEPRI
   28fe2:	f383 8812 	msr	BASEPRI_MAX, r3
   28fe6:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   28fea:	f7ff ff93 	bl	28f14 <z_priq_dumb_best>
		if (thread != NULL) {
   28fee:	4601      	mov	r1, r0
   28ff0:	b108      	cbz	r0, 28ff6 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   28ff2:	f7ff ff42 	bl	28e7a <unpend_thread_no_timeout>
	__asm__ volatile(
   28ff6:	f384 8811 	msr	BASEPRI, r4
   28ffa:	f3bf 8f6f 	isb	sy
}
   28ffe:	4608      	mov	r0, r1
   29000:	bd10      	pop	{r4, pc}

00029002 <z_unpend_first_thread>:
{
   29002:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   29004:	f04f 0320 	mov.w	r3, #32
   29008:	f3ef 8511 	mrs	r5, BASEPRI
   2900c:	f383 8812 	msr	BASEPRI_MAX, r3
   29010:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   29014:	f7ff ff7e 	bl	28f14 <z_priq_dumb_best>
		if (thread != NULL) {
   29018:	4604      	mov	r4, r0
   2901a:	b120      	cbz	r0, 29026 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   2901c:	f7ff ff2d 	bl	28e7a <unpend_thread_no_timeout>
   29020:	3018      	adds	r0, #24
   29022:	f000 f833 	bl	2908c <z_abort_timeout>
	__asm__ volatile(
   29026:	f385 8811 	msr	BASEPRI, r5
   2902a:	f3bf 8f6f 	isb	sy
}
   2902e:	4620      	mov	r0, r4
   29030:	bd38      	pop	{r3, r4, r5, pc}

00029032 <z_unpend_all>:
{
   29032:	b538      	push	{r3, r4, r5, lr}
   29034:	4605      	mov	r5, r0
	int need_sched = 0;
   29036:	2000      	movs	r0, #0
	return list->head == list;
   29038:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2903a:	42a5      	cmp	r5, r4
   2903c:	d000      	beq.n	29040 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2903e:	b904      	cbnz	r4, 29042 <z_unpend_all+0x10>
}
   29040:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   29042:	4620      	mov	r0, r4
   29044:	f7ff ff3c 	bl	28ec0 <z_unpend_thread>
		z_ready_thread(thread);
   29048:	4620      	mov	r0, r4
   2904a:	f7ff ff69 	bl	28f20 <z_ready_thread>
		need_sched = 1;
   2904e:	2001      	movs	r0, #1
   29050:	e7f2      	b.n	29038 <z_unpend_all+0x6>

00029052 <z_sched_wake>:
{
   29052:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   29054:	f04f 0320 	mov.w	r3, #32
   29058:	f3ef 8511 	mrs	r5, BASEPRI
   2905c:	f383 8812 	msr	BASEPRI_MAX, r3
   29060:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   29064:	f7ff ff56 	bl	28f14 <z_priq_dumb_best>
		if (thread != NULL) {
   29068:	4604      	mov	r4, r0
   2906a:	b150      	cbz	r0, 29082 <z_sched_wake+0x30>
   2906c:	67c1      	str	r1, [r0, #124]	; 0x7c
   2906e:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   29070:	f7ff ff03 	bl	28e7a <unpend_thread_no_timeout>
   29074:	3018      	adds	r0, #24
   29076:	f000 f809 	bl	2908c <z_abort_timeout>
			ready_thread(thread);
   2907a:	4620      	mov	r0, r4
   2907c:	f7f7 fade 	bl	2063c <ready_thread>
			ret = true;
   29080:	2001      	movs	r0, #1
	__asm__ volatile(
   29082:	f385 8811 	msr	BASEPRI, r5
   29086:	f3bf 8f6f 	isb	sy
}
   2908a:	bd38      	pop	{r3, r4, r5, pc}

0002908c <z_abort_timeout>:
{
   2908c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2908e:	f04f 0220 	mov.w	r2, #32
   29092:	f3ef 8411 	mrs	r4, BASEPRI
   29096:	f382 8812 	msr	BASEPRI_MAX, r2
   2909a:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   2909e:	6803      	ldr	r3, [r0, #0]
   290a0:	b13b      	cbz	r3, 290b2 <z_abort_timeout+0x26>
			remove_timeout(to);
   290a2:	f7f7 fd7b 	bl	20b9c <remove_timeout>
			ret = 0;
   290a6:	2000      	movs	r0, #0
	__asm__ volatile(
   290a8:	f384 8811 	msr	BASEPRI, r4
   290ac:	f3bf 8f6f 	isb	sy
}
   290b0:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   290b2:	f06f 0015 	mvn.w	r0, #21
   290b6:	e7f7      	b.n	290a8 <z_abort_timeout+0x1c>

000290b8 <z_timeout_remaining>:
{
   290b8:	b510      	push	{r4, lr}
	__asm__ volatile(
   290ba:	f04f 0320 	mov.w	r3, #32
   290be:	f3ef 8411 	mrs	r4, BASEPRI
   290c2:	f383 8812 	msr	BASEPRI_MAX, r3
   290c6:	f3bf 8f6f 	isb	sy
		ticks = timeout_rem(timeout);
   290ca:	f7f7 fd81 	bl	20bd0 <timeout_rem>
	__asm__ volatile(
   290ce:	f384 8811 	msr	BASEPRI, r4
   290d2:	f3bf 8f6f 	isb	sy
}
   290d6:	bd10      	pop	{r4, pc}

000290d8 <z_get_next_timeout_expiry>:
{
   290d8:	b510      	push	{r4, lr}
	__asm__ volatile(
   290da:	f04f 0320 	mov.w	r3, #32
   290de:	f3ef 8411 	mrs	r4, BASEPRI
   290e2:	f383 8812 	msr	BASEPRI_MAX, r3
   290e6:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   290ea:	f7f7 fd2f 	bl	20b4c <next_timeout>
	__asm__ volatile(
   290ee:	f384 8811 	msr	BASEPRI, r4
   290f2:	f3bf 8f6f 	isb	sy
}
   290f6:	bd10      	pop	{r4, pc}

000290f8 <z_set_timeout_expiry>:
{
   290f8:	b570      	push	{r4, r5, r6, lr}
   290fa:	4604      	mov	r4, r0
   290fc:	460d      	mov	r5, r1
	__asm__ volatile(
   290fe:	f04f 0320 	mov.w	r3, #32
   29102:	f3ef 8611 	mrs	r6, BASEPRI
   29106:	f383 8812 	msr	BASEPRI_MAX, r3
   2910a:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   2910e:	f7f7 fd1d 	bl	20b4c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   29112:	2801      	cmp	r0, #1
   29114:	dd05      	ble.n	29122 <z_set_timeout_expiry+0x2a>
   29116:	42a0      	cmp	r0, r4
   29118:	db03      	blt.n	29122 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   2911a:	4629      	mov	r1, r5
   2911c:	4620      	mov	r0, r4
   2911e:	f7f5 ffcb 	bl	1f0b8 <sys_clock_set_timeout>
	__asm__ volatile(
   29122:	f386 8811 	msr	BASEPRI, r6
   29126:	f3bf 8f6f 	isb	sy
}
   2912a:	bd70      	pop	{r4, r5, r6, pc}

0002912c <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2912c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2912e:	f7f7 fe4b 	bl	20dc8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   29132:	bd08      	pop	{r3, pc}

00029134 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   29134:	f7f7 be48 	b.w	20dc8 <sys_clock_tick_get>

00029138 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   29138:	b108      	cbz	r0, 2913e <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2913a:	f7db be0f 	b.w	4d5c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2913e:	4770      	bx	lr

00029140 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   29140:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   29144:	bf08      	it	eq
   29146:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   2914a:	b538      	push	{r3, r4, r5, lr}
   2914c:	4605      	mov	r5, r0
   2914e:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   29150:	d01d      	beq.n	2918e <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   29152:	ea51 0300 	orrs.w	r3, r1, r0
   29156:	d103      	bne.n	29160 <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   29158:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   2915c:	f7f7 be34 	b.w	20dc8 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   29160:	f06f 0301 	mvn.w	r3, #1
   29164:	1a18      	subs	r0, r3, r0
   29166:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2916a:	eb63 0101 	sbc.w	r1, r3, r1
   2916e:	2900      	cmp	r1, #0
   29170:	da0c      	bge.n	2918c <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
   29172:	f7f7 fe29 	bl	20dc8 <sys_clock_tick_get>
   29176:	2d01      	cmp	r5, #1
   29178:	4622      	mov	r2, r4
   2917a:	f174 0400 	sbcs.w	r4, r4, #0
   2917e:	462b      	mov	r3, r5
   29180:	bfbc      	itt	lt
   29182:	2301      	movlt	r3, #1
   29184:	2200      	movlt	r2, #0
   29186:	1818      	adds	r0, r3, r0
   29188:	eb41 0102 	adc.w	r1, r1, r2
}
   2918c:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   2918e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29192:	4601      	mov	r1, r0
   29194:	e7fa      	b.n	2918c <sys_clock_timeout_end_calc+0x4c>

00029196 <k_timer_init>:
	timer->status = 0U;
   29196:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   29198:	e9c0 1208 	strd	r1, r2, [r0, #32]
   2919c:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   291a0:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   291a4:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   291a8:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   291aa:	6343      	str	r3, [r0, #52]	; 0x34
}
   291ac:	4770      	bx	lr

000291ae <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   291ae:	b510      	push	{r4, lr}
   291b0:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   291b2:	f7ff ff6b 	bl	2908c <z_abort_timeout>

	if (inactive) {
   291b6:	b9b0      	cbnz	r0, 291e6 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   291b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   291ba:	b10b      	cbz	r3, 291c0 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   291bc:	4620      	mov	r0, r4
   291be:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   291c0:	f104 0018 	add.w	r0, r4, #24
   291c4:	f7ff ff08 	bl	28fd8 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   291c8:	b168      	cbz	r0, 291e6 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   291ca:	f7ff fea9 	bl	28f20 <z_ready_thread>
	__asm__ volatile(
   291ce:	f04f 0320 	mov.w	r3, #32
   291d2:	f3ef 8011 	mrs	r0, BASEPRI
   291d6:	f383 8812 	msr	BASEPRI_MAX, r3
   291da:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   291de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   291e2:	f7ff be81 	b.w	28ee8 <z_reschedule_irqlock>
   291e6:	bd10      	pop	{r4, pc}

000291e8 <add_event>:
{
   291e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   291ea:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   291ec:	e9d0 2300 	ldrd	r2, r3, [r0]
   291f0:	4290      	cmp	r0, r2
   291f2:	4604      	mov	r4, r0
   291f4:	460d      	mov	r5, r1
   291f6:	d105      	bne.n	29204 <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
   291f8:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   291fa:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   291fe:	601d      	str	r5, [r3, #0]
	list->tail = node;
   29200:	6065      	str	r5, [r4, #4]
}
   29202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   29204:	2b00      	cmp	r3, #0
   29206:	d0f7      	beq.n	291f8 <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   29208:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2920a:	b100      	cbz	r0, 2920e <add_event+0x26>
   2920c:	3860      	subs	r0, #96	; 0x60
   2920e:	b107      	cbz	r7, 29212 <add_event+0x2a>
   29210:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   29212:	4639      	mov	r1, r7
   29214:	f7ff fe3b 	bl	28e8e <z_sched_prio_cmp>
	if ((pending == NULL) ||
   29218:	2800      	cmp	r0, #0
   2921a:	dced      	bgt.n	291f8 <add_event+0x10>
	return list->head == list;
   2921c:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2921e:	42b4      	cmp	r4, r6
   29220:	d0ea      	beq.n	291f8 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   29222:	2e00      	cmp	r6, #0
   29224:	d0e8      	beq.n	291f8 <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
   29226:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   29228:	b101      	cbz	r1, 2922c <add_event+0x44>
   2922a:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   2922c:	4638      	mov	r0, r7
   2922e:	f7ff fe2e 	bl	28e8e <z_sched_prio_cmp>
   29232:	2800      	cmp	r0, #0
   29234:	dd05      	ble.n	29242 <add_event+0x5a>
	sys_dnode_t *const prev = successor->prev;
   29236:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   29238:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   2923c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2923e:	6075      	str	r5, [r6, #4]
			return;
   29240:	e7df      	b.n	29202 <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
   29242:	6863      	ldr	r3, [r4, #4]
   29244:	42b3      	cmp	r3, r6
   29246:	d0d7      	beq.n	291f8 <add_event+0x10>
   29248:	6836      	ldr	r6, [r6, #0]
   2924a:	e7ea      	b.n	29222 <add_event+0x3a>

0002924c <register_events>:
{
   2924c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   29250:	2500      	movs	r5, #0
{
   29252:	468b      	mov	fp, r1
   29254:	4614      	mov	r4, r2
   29256:	461f      	mov	r7, r3
   29258:	4682      	mov	sl, r0
	int events_registered = 0;
   2925a:	462e      	mov	r6, r5
	event->poller = NULL;
   2925c:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   2925e:	455d      	cmp	r5, fp
   29260:	db02      	blt.n	29268 <register_events+0x1c>
}
   29262:	4630      	mov	r0, r6
   29264:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29268:	f04f 0320 	mov.w	r3, #32
   2926c:	f3ef 8911 	mrs	r9, BASEPRI
   29270:	f383 8812 	msr	BASEPRI_MAX, r3
   29274:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   29278:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2927c:	f003 031f 	and.w	r3, r3, #31
   29280:	3b01      	subs	r3, #1
   29282:	2b07      	cmp	r3, #7
   29284:	d80f      	bhi.n	292a6 <register_events+0x5a>
   29286:	e8df f003 	tbb	[pc, r3]
   2928a:	041e      	.short	0x041e
   2928c:	0e0e0a0e 	.word	0x0e0e0a0e
   29290:	250e      	.short	0x250e
		if (k_sem_count_get(event->sem) > 0U) {
   29292:	f8da 3010 	ldr.w	r3, [sl, #16]
   29296:	689b      	ldr	r3, [r3, #8]
   29298:	b12b      	cbz	r3, 292a6 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   2929a:	2302      	movs	r3, #2
   2929c:	e020      	b.n	292e0 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   2929e:	f8da 3010 	ldr.w	r3, [sl, #16]
   292a2:	681b      	ldr	r3, [r3, #0]
   292a4:	bb8b      	cbnz	r3, 2930a <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   292a6:	bb47      	cbnz	r7, 292fa <register_events+0xae>
   292a8:	7823      	ldrb	r3, [r4, #0]
   292aa:	b333      	cbz	r3, 292fa <register_events+0xae>
	switch (event->type) {
   292ac:	f89a 300d 	ldrb.w	r3, [sl, #13]
   292b0:	f003 031f 	and.w	r3, r3, #31
   292b4:	3b01      	subs	r3, #1
   292b6:	2b07      	cmp	r3, #7
   292b8:	d830      	bhi.n	2931c <register_events+0xd0>
   292ba:	e8df f003 	tbb	[pc, r3]
   292be:	2833      	.short	0x2833
   292c0:	2f2f282f 	.word	0x2f2f282f
   292c4:	382f      	.short	0x382f
		if (event->signal->signaled != 0U) {
   292c6:	f8da 3010 	ldr.w	r3, [sl, #16]
   292ca:	689b      	ldr	r3, [r3, #8]
   292cc:	2b00      	cmp	r3, #0
   292ce:	d0ea      	beq.n	292a6 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   292d0:	2301      	movs	r3, #1
   292d2:	e005      	b.n	292e0 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   292d4:	f8da 3010 	ldr.w	r3, [sl, #16]
   292d8:	6a1b      	ldr	r3, [r3, #32]
   292da:	2b00      	cmp	r3, #0
   292dc:	d0e3      	beq.n	292a6 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   292de:	2310      	movs	r3, #16
	event->state |= state;
   292e0:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   292e4:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   292e8:	f3c2 3145 	ubfx	r1, r2, #13, #6
   292ec:	430b      	orrs	r3, r1
   292ee:	f363 3252 	bfi	r2, r3, #13, #6
   292f2:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   292f6:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   292fa:	f389 8811 	msr	BASEPRI, r9
   292fe:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   29302:	3501      	adds	r5, #1
   29304:	f10a 0a14 	add.w	sl, sl, #20
   29308:	e7a9      	b.n	2925e <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2930a:	2304      	movs	r3, #4
   2930c:	e7e8      	b.n	292e0 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   2930e:	f8da 0010 	ldr.w	r0, [sl, #16]
   29312:	4622      	mov	r2, r4
   29314:	4651      	mov	r1, sl
   29316:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   29318:	f7ff ff66 	bl	291e8 <add_event>
	event->poller = poller;
   2931c:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   29320:	3601      	adds	r6, #1
   29322:	e7ea      	b.n	292fa <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   29324:	f8da 0010 	ldr.w	r0, [sl, #16]
   29328:	4622      	mov	r2, r4
   2932a:	4651      	mov	r1, sl
   2932c:	e7f4      	b.n	29318 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   2932e:	f8da 0010 	ldr.w	r0, [sl, #16]
   29332:	4622      	mov	r2, r4
   29334:	4651      	mov	r1, sl
   29336:	3024      	adds	r0, #36	; 0x24
   29338:	e7ee      	b.n	29318 <register_events+0xcc>

0002933a <signal_poll_event>:
{
   2933a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2933e:	6884      	ldr	r4, [r0, #8]
{
   29340:	4605      	mov	r5, r0
   29342:	460e      	mov	r6, r1
	if (poller != NULL) {
   29344:	b144      	cbz	r4, 29358 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   29346:	7863      	ldrb	r3, [r4, #1]
   29348:	2b01      	cmp	r3, #1
   2934a:	d136      	bne.n	293ba <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
   2934c:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   29350:	f013 0302 	ands.w	r3, r3, #2
   29354:	d10a      	bne.n	2936c <signal_poll_event+0x32>
		poller->is_polling = false;
   29356:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   29358:	68eb      	ldr	r3, [r5, #12]
   2935a:	f3c3 3145 	ubfx	r1, r3, #13, #6
   2935e:	430e      	orrs	r6, r1
	event->poller = NULL;
   29360:	2000      	movs	r0, #0
	event->state |= state;
   29362:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   29366:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   29368:	60eb      	str	r3, [r5, #12]
	return retcode;
   2936a:	e00b      	b.n	29384 <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   2936c:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   29370:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29374:	bf08      	it	eq
   29376:	f112 0f02 	cmneq.w	r2, #2
   2937a:	d105      	bne.n	29388 <signal_poll_event+0x4e>
		poller->is_polling = false;
   2937c:	2300      	movs	r3, #0
   2937e:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   29380:	f06f 000a 	mvn.w	r0, #10
}
   29384:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   29388:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   2938c:	4640      	mov	r0, r8
   2938e:	f7ff fd97 	bl	28ec0 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   29392:	2e08      	cmp	r6, #8
   29394:	bf0c      	ite	eq
   29396:	f06f 0303 	mvneq.w	r3, #3
   2939a:	2300      	movne	r3, #0
   2939c:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2939e:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   293a2:	06db      	lsls	r3, r3, #27
   293a4:	d102      	bne.n	293ac <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
   293a6:	f854 7c48 	ldr.w	r7, [r4, #-72]
   293aa:	b10f      	cbz	r7, 293b0 <signal_poll_event+0x76>
		poller->is_polling = false;
   293ac:	2300      	movs	r3, #0
   293ae:	e7d2      	b.n	29356 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   293b0:	4640      	mov	r0, r8
   293b2:	f7ff fdb5 	bl	28f20 <z_ready_thread>
		poller->is_polling = false;
   293b6:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   293b8:	e7ce      	b.n	29358 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   293ba:	2b02      	cmp	r3, #2
   293bc:	d1f6      	bne.n	293ac <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   293be:	7823      	ldrb	r3, [r4, #0]
   293c0:	2b00      	cmp	r3, #0
   293c2:	d0c9      	beq.n	29358 <signal_poll_event+0x1e>
   293c4:	f854 7c04 	ldr.w	r7, [r4, #-4]
   293c8:	2f00      	cmp	r7, #0
   293ca:	d0f4      	beq.n	293b6 <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   293cc:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   293d0:	f1a4 0914 	sub.w	r9, r4, #20
   293d4:	f104 0014 	add.w	r0, r4, #20
   293d8:	f7ff fe58 	bl	2908c <z_abort_timeout>
		twork->poll_result = 0;
   293dc:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   293e0:	4649      	mov	r1, r9
   293e2:	4638      	mov	r0, r7
   293e4:	f7ff fcc0 	bl	28d68 <k_work_submit_to_queue>
		poller->is_polling = false;
   293e8:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   293ec:	e7b4      	b.n	29358 <signal_poll_event+0x1e>

000293ee <clear_event_registrations>:
	while (num_events--) {
   293ee:	2314      	movs	r3, #20
{
   293f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   293f2:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   293f6:	2400      	movs	r4, #0
   293f8:	2601      	movs	r6, #1
	while (num_events--) {
   293fa:	b901      	cbnz	r1, 293fe <clear_event_registrations+0x10>
}
   293fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   293fe:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   29402:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   29406:	f003 031f 	and.w	r3, r3, #31
   2940a:	2b08      	cmp	r3, #8
   2940c:	f1a0 0714 	sub.w	r7, r0, #20
   29410:	d80d      	bhi.n	2942e <clear_event_registrations+0x40>
   29412:	fa06 f303 	lsl.w	r3, r6, r3
   29416:	f413 7f8b 	tst.w	r3, #278	; 0x116
   2941a:	d008      	beq.n	2942e <clear_event_registrations+0x40>
	return node->next != NULL;
   2941c:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   29420:	b12b      	cbz	r3, 2942e <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   29422:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   29426:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   29428:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   2942a:	e940 4405 	strd	r4, r4, [r0, #-20]
   2942e:	f382 8811 	msr	BASEPRI, r2
   29432:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   29436:	f04f 0320 	mov.w	r3, #32
   2943a:	f3ef 8211 	mrs	r2, BASEPRI
   2943e:	f383 8812 	msr	BASEPRI_MAX, r3
   29442:	f3bf 8f6f 	isb	sy
   29446:	3901      	subs	r1, #1
   29448:	4638      	mov	r0, r7
   2944a:	e7d6      	b.n	293fa <clear_event_registrations+0xc>

0002944c <k_poll_event_init>:
{
   2944c:	b510      	push	{r4, lr}
	event->type = type;
   2944e:	04d2      	lsls	r2, r2, #19
   29450:	0209      	lsls	r1, r1, #8
   29452:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
   29456:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
   2945a:	430a      	orrs	r2, r1
   2945c:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   2945e:	2400      	movs	r4, #0
	event->type = type;
   29460:	430a      	orrs	r2, r1
	event->obj = obj;
   29462:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   29466:	6084      	str	r4, [r0, #8]
}
   29468:	bd10      	pop	{r4, pc}

0002946a <z_handle_obj_poll_events>:
{
   2946a:	4603      	mov	r3, r0
	return list->head == list;
   2946c:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2946e:	4283      	cmp	r3, r0
   29470:	d008      	beq.n	29484 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   29472:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   29476:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   29478:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2947a:	2300      	movs	r3, #0
	node->prev = NULL;
   2947c:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   29480:	f7ff bf5b 	b.w	2933a <signal_poll_event>
}
   29484:	4770      	bx	lr

00029486 <k_free>:
	if (ptr != NULL) {
   29486:	b120      	cbz	r0, 29492 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   29488:	1f01      	subs	r1, r0, #4
   2948a:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2948e:	f7ff ba71 	b.w	28974 <k_heap_free>
}
   29492:	4770      	bx	lr

00029494 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   29494:	f7f5 be86 	b.w	1f1a4 <SystemInit>
