
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:

	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
   0:	60 4d 00 20 a5 3a 00 00 e3 9f 01 00 79 3a 00 00     `M. .:......y:..
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_init(mutex);
  10:	79 3a 00 00 79 3a 00 00 79 3a 00 00 00 00 00 00     y:..y:..y:......
	...

	k_mutex_init(&fs->nvs_lock);

	fs->flash_device = device_get_binding(dev_name);
	if (!fs->flash_device) {
		LOG_ERR("No valid flash device found");
  2c:	f5 34 00 00 79 3a 00 00 00 00 00 00 a1 34 00 00     .4..y:.......4..
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
  3c:	63 e0 01 00                                         c...

00000040 <_irq_vector_table>:
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
  40:	a5 35 00 00 51 d4 01 00 a5 35 00 00 a5 35 00 00     .5..Q....5...5..
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
  50:	a5 35 00 00 a5 35 00 00 a5 35 00 00 a5 35 00 00     .5...5...5...5..
		return -EINVAL;
  60:	a5 35 00 00 a5 35 00 00 a5 35 00 00 a5 35 00 00     .5...5...5...5..
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
  70:	a5 35 00 00 a5 35 00 00 a5 35 00 00 a5 35 00 00     .5...5...5...5..
		LOG_ERR("Unsupported write block size");
  80:	a5 35 00 00 a5 35 00 00 a5 35 00 00 a5 35 00 00     .5...5...5...5..
  90:	a5 35 00 00 a5 35 00 00 a5 35 00 00 a5 35 00 00     .5...5...5...5..
		LOG_ERR("Unable to get page info");
  a0:	a5 35 00 00 a5 35 00 00 a5 35 00 00 a5 35 00 00     .5...5...5...5..
	if (!fs->sector_size || fs->sector_size % info.size) {
  b0:	a5 35 00 00 a5 35 00 00 a5 35 00 00 a5 35 00 00     .5...5...5...5..
		LOG_ERR("Invalid sector size");
  c0:	a5 35 00 00 a5 35 00 00 a5 35 00 00 a5 35 00 00     .5...5...5...5..
  d0:	a5 35 00 00 a5 35 00 00 a5 35 00 00                 .5...5...5..

Disassembly of section text:

000000e0 <__aeabi_ldivmod>:
	uint8_t erase_value = fs->flash_parameters->erase_value;
      e0:	b97b      	cbnz	r3, 102 <CONFIG_KOBJECT_TEXT_AREA+0x2>
      e2:	b972      	cbnz	r2, 102 <CONFIG_KOBJECT_TEXT_AREA+0x2>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
      e4:	2900      	cmp	r1, #0
      e6:	bfbe      	ittt	lt
      e8:	2000      	movlt	r0, #0
      ea:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
      ee:	e006      	blt.n	fe <__aeabi_ldivmod+0x1e>
      f0:	bf08      	it	eq
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
      f2:	2800      	cmpeq	r0, #0
      f4:	bf1c      	itt	ne
      f6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
	uint16_t i, closed_sectors = 0;
      fa:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
	for (i = 0; i < fs->sector_count; i++) {
      fe:	f000 b9d3 	b.w	4a8 <__aeabi_idiv0>
     102:	f1ad 0c08 	sub.w	ip, sp, #8
     106:	e96d ce04 	strd	ip, lr, [sp, #-16]!
	if (closed_sectors == fs->sector_count) {
     10a:	2900      	cmp	r1, #0
     10c:	db09      	blt.n	122 <CONFIG_KOBJECT_TEXT_AREA+0x22>
     10e:	2b00      	cmp	r3, #0
	if (i == fs->sector_count) {
     110:	db1a      	blt.n	148 <CONFIG_IDLE_STACK_SIZE+0x8>
     112:	f000 f861 	bl	1d8 <__udivmoddi4>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
     116:	f8dd e004 	ldr.w	lr, [sp, #4]
     11a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     11e:	b004      	add	sp, #16
     120:	4770      	bx	lr
		if (!rc) {
     122:	4240      	negs	r0, r0
			nvs_sector_advance(fs, &addr);
     124:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     128:	2b00      	cmp	r3, #0
     12a:	db1b      	blt.n	164 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x1a>
	rc = nvs_recover_last_ate(fs, &addr);
     12c:	f000 f854 	bl	1d8 <__udivmoddi4>
     130:	f8dd e004 	ldr.w	lr, [sp, #4]
	if (rc) {
     134:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     138:	b004      	add	sp, #16
     13a:	4240      	negs	r0, r0
	fs->ate_wra = addr;
     13c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
	fs->data_wra = addr & ADDR_SECT_MASK;
     140:	4252      	negs	r2, r2
	fs->ate_wra = addr;
     142:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
	fs->data_wra = addr & ADDR_SECT_MASK;
     146:	4770      	bx	lr
     148:	4252      	negs	r2, r2
	while (fs->ate_wra >= fs->data_wra) {
     14a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     14e:	f000 f843 	bl	1d8 <__udivmoddi4>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
     152:	f8dd e004 	ldr.w	lr, [sp, #4]
     156:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     15a:	b004      	add	sp, #16
		if (rc) {
     15c:	4240      	negs	r0, r0
     15e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
		if (data8[i] != value) {
     162:	4770      	bx	lr
     164:	4252      	negs	r2, r2
     166:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
     16a:	f000 f835 	bl	1d8 <__udivmoddi4>
     16e:	f8dd e004 	ldr.w	lr, [sp, #4]
	nvs_sector_advance(fs, &addr);
     172:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
	addr = fs->ate_wra & ADDR_SECT_MASK;
     176:	b004      	add	sp, #16
	nvs_sector_advance(fs, &addr);
     178:	4252      	negs	r2, r2
	addr = fs->ate_wra & ADDR_SECT_MASK;
     17a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
	nvs_sector_advance(fs, &addr);
     17e:	4770      	bx	lr

00000180 <__aeabi_uldivmod>:
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
     180:	b953      	cbnz	r3, 198 <CONFIG_BT_MESH_TX_SEG_RETRANS_TIMEOUT_UNICAST+0x8>
     182:	b94a      	cbnz	r2, 198 <CONFIG_BT_MESH_TX_SEG_RETRANS_TIMEOUT_UNICAST+0x8>
     184:	2900      	cmp	r1, #0
     186:	bf08      	it	eq
     188:	2800      	cmpeq	r0, #0
     18a:	bf1c      	itt	ne
	if (rc < 0) {
     18c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     190:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
		       (uint16_t)(fs->sector_size - ate_size);
     194:	f000 b988 	b.w	4a8 <__aeabi_idiv0>
     198:	f1ad 0c08 	sub.w	ip, sp, #8
		addr = (i << ADDR_SECT_SHIFT) +
     19c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
     1a0:	f000 f81a 	bl	1d8 <__udivmoddi4>
		addr = (i << ADDR_SECT_SHIFT) +
     1a4:	f8dd e004 	ldr.w	lr, [sp, #4]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
     1a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
			nvs_sector_advance(fs, &addr);
     1ac:	b004      	add	sp, #16
     1ae:	4770      	bx	lr

000001b0 <__popcountsi2>:
     1b0:	0843      	lsrs	r3, r0, #1
     1b2:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
			closed_sectors++;
     1b6:	1ac0      	subs	r0, r0, r3
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
     1b8:	0883      	lsrs	r3, r0, #2
     1ba:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
     1be:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
			closed_sectors++;
     1c2:	4418      	add	r0, r3
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
     1c4:	eb00 1010 	add.w	r0, r0, r0, lsr #4
			if (!rc) {
     1c8:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
	for (i = 0; i < fs->sector_count; i++) {
     1cc:	eb00 2000 	add.w	r0, r0, r0, lsl #8
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
     1d0:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     1d4:	0e00      	lsrs	r0, r0, #24
     1d6:	4770      	bx	lr

000001d8 <__udivmoddi4>:
				rc = -ESPIPE;
     1d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     1dc:	9e08      	ldr	r6, [sp, #32]
	if (rc) {
     1de:	460d      	mov	r5, r1
		addr = fs->ate_wra + ate_size;
     1e0:	4604      	mov	r4, r0
     1e2:	4688      	mov	r8, r1
     1e4:	2b00      	cmp	r3, #0
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
     1e6:	d14d      	bne.n	284 <CONFIG_BT_HCI_TX_STACK_SIZE+0x4>
     1e8:	428a      	cmp	r2, r1
     1ea:	4694      	mov	ip, r2
     1ec:	d968      	bls.n	2c0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x40>
     1ee:	fab2 f282 	clz	r2, r2
     1f2:	b152      	cbz	r2, 20a <CONFIG_FLASH_SIZE+0xa>
     1f4:	fa01 f302 	lsl.w	r3, r1, r2
     1f8:	f1c2 0120 	rsb	r1, r2, #32
     1fc:	fa20 f101 	lsr.w	r1, r0, r1
		LOG_INF("No GC Done marker found: restarting gc");
     200:	fa0c fc02 	lsl.w	ip, ip, r2
     204:	ea41 0803 	orr.w	r8, r1, r3
     208:	4094      	lsls	r4, r2
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
     20a:	ea4f 451c 	mov.w	r5, ip, lsr #16
     20e:	0c21      	lsrs	r1, r4, #16
     210:	fbb8 fef5 	udiv	lr, r8, r5
		if (rc) {
     214:	fa1f f78c 	uxth.w	r7, ip
		fs->ate_wra &= ADDR_SECT_MASK;
     218:	fb05 831e 	mls	r3, r5, lr, r8
     21c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
     220:	fb0e f107 	mul.w	r1, lr, r7
     224:	4299      	cmp	r1, r3
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
     226:	d90b      	bls.n	240 <CONFIG_FLASH_SIZE+0x40>
     228:	eb1c 0303 	adds.w	r3, ip, r3
		rc = nvs_gc(fs);
     22c:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
     230:	f080 811e 	bcs.w	470 <CONFIG_LOG_BUFFER_SIZE+0x70>
     234:	4299      	cmp	r1, r3
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
     236:	f240 811b 	bls.w	470 <CONFIG_LOG_BUFFER_SIZE+0x70>
     23a:	f1ae 0e02 	sub.w	lr, lr, #2
     23e:	4463      	add	r3, ip
			if (rc) {
     240:	1a5b      	subs	r3, r3, r1
     242:	b2a4      	uxth	r4, r4
			if (nvs_ate_valid(fs, &gc_done_ate) &&
     244:	fbb3 f0f5 	udiv	r0, r3, r5
     248:	fb05 3310 	mls	r3, r5, r0, r3
     24c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     250:	fb00 f707 	mul.w	r7, r0, r7
     254:	42a7      	cmp	r7, r4
			    (gc_done_ate.id == 0xffff) &&
     256:	d90a      	bls.n	26e <CONFIG_BT_MESH_RPL_STORE_TIMEOUT+0x16>
     258:	eb1c 0404 	adds.w	r4, ip, r4
     25c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
			addr += ate_size;
     260:	f080 8108 	bcs.w	474 <CONFIG_BT_HCI_ECC_STACK_SIZE>
     264:	42a7      	cmp	r7, r4
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
     266:	f240 8105 	bls.w	474 <CONFIG_BT_HCI_ECC_STACK_SIZE>
     26a:	4464      	add	r4, ip
     26c:	3802      	subs	r0, #2
     26e:	1be4      	subs	r4, r4, r7
		if (rc < 0) {
     270:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
		if (!rc) {
     274:	2100      	movs	r1, #0
		fs->data_wra += fs->flash_parameters->write_block_size;
     276:	b11e      	cbz	r6, 280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     278:	40d4      	lsrs	r4, r2
     27a:	2300      	movs	r3, #0
     27c:	e9c6 4300 	strd	r4, r3, [r6]
	while (fs->ate_wra > fs->data_wra) {
     280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     284:	428b      	cmp	r3, r1
     286:	d908      	bls.n	29a <CONFIG_BT_HCI_TX_STACK_SIZE+0x1a>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
     288:	2e00      	cmp	r6, #0
     28a:	f000 80ee 	beq.w	46a <CONFIG_LOG_BUFFER_SIZE+0x6a>
     28e:	2100      	movs	r1, #0
     290:	e9c6 0500 	strd	r0, r5, [r6]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
     294:	4608      	mov	r0, r1
     296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     29a:	fab3 f183 	clz	r1, r3
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
     29e:	2900      	cmp	r1, #0
     2a0:	d14a      	bne.n	338 <CONFIG_BT_MESH_ADV_STACK_SIZE+0x38>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
     2a2:	42ab      	cmp	r3, r5
     2a4:	d302      	bcc.n	2ac <CONFIG_BT_HCI_TX_STACK_SIZE+0x2c>
     2a6:	4282      	cmp	r2, r0
		if (rc) {
     2a8:	f200 80f9 	bhi.w	49e <CONFIG_BT_HCI_ECC_STACK_SIZE+0x2a>
     2ac:	1a84      	subs	r4, r0, r2
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
     2ae:	eb65 0303 	sbc.w	r3, r5, r3
     2b2:	2001      	movs	r0, #1
     2b4:	4698      	mov	r8, r3
		      (fs->sector_size - 2 * ate_size))) {
     2b6:	2e00      	cmp	r6, #0
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
     2b8:	d0e2      	beq.n	280 <CONFIG_BT_HCI_TX_STACK_SIZE>
		      (fs->sector_size - 2 * ate_size))) {
     2ba:	e9c6 4800 	strd	r4, r8, [r6]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
     2be:	e7df      	b.n	280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     2c0:	b902      	cbnz	r2, 2c4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x44>
		rc = nvs_add_gc_done_ate(fs);
     2c2:	deff      	udf	#255	; 0xff
     2c4:	fab2 f282 	clz	r2, r2
     2c8:	2a00      	cmp	r2, #0
     2ca:	f040 8091 	bne.w	3f0 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x8>
     2ce:	eba1 050c 	sub.w	r5, r1, ip
     2d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
     2d6:	fa1f fe8c 	uxth.w	lr, ip
     2da:	2101      	movs	r1, #1
     2dc:	fbb5 f3f7 	udiv	r3, r5, r7
     2e0:	fb07 5013 	mls	r0, r7, r3, r5
     2e4:	0c25      	lsrs	r5, r4, #16
     2e6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     2ea:	fb0e f003 	mul.w	r0, lr, r3
     2ee:	42a8      	cmp	r0, r5
     2f0:	d908      	bls.n	304 <CONFIG_BT_MESH_ADV_STACK_SIZE+0x4>
     2f2:	eb1c 0505 	adds.w	r5, ip, r5
		rc = -EDEADLK;
     2f6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
     2fa:	d202      	bcs.n	302 <CONFIG_BT_MESH_ADV_STACK_SIZE+0x2>
     2fc:	42a8      	cmp	r0, r5
	if (rc) {
     2fe:	f200 80cb 	bhi.w	498 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x24>
     302:	4643      	mov	r3, r8
	fs->ready = true;
     304:	1a2d      	subs	r5, r5, r0
     306:	b2a4      	uxth	r4, r4
     308:	fbb5 f0f7 	udiv	r0, r5, r7
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
     30c:	fb07 5510 	mls	r5, r7, r0, r5
     310:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     314:	fb0e fe00 	mul.w	lr, lr, r0
     318:	45a6      	cmp	lr, r4
     31a:	d908      	bls.n	32e <CONFIG_BT_MESH_ADV_STACK_SIZE+0x2e>
     31c:	eb1c 0404 	adds.w	r4, ip, r4
     320:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
	LOG_INF("alloc wra: %d, %x",
     324:	d202      	bcs.n	32c <CONFIG_BT_MESH_ADV_STACK_SIZE+0x2c>
     326:	45a6      	cmp	lr, r4
     328:	f200 80bb 	bhi.w	4a2 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x2e>
     32c:	4628      	mov	r0, r5
     32e:	eba4 040e 	sub.w	r4, r4, lr
	LOG_INF("data wra: %d, %x",
     332:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
     336:	e79e      	b.n	276 <CONFIG_BT_MESH_RPL_STORE_TIMEOUT+0x1e>
     338:	f1c1 0720 	rsb	r7, r1, #32
     33c:	408b      	lsls	r3, r1
	return 0;
     33e:	fa22 fc07 	lsr.w	ip, r2, r7
     342:	ea4c 0c03 	orr.w	ip, ip, r3
     346:	fa20 f407 	lsr.w	r4, r0, r7
			LOG_INF("GC Done marker found");
     34a:	fa05 f301 	lsl.w	r3, r5, r1
     34e:	431c      	orrs	r4, r3
     350:	40fd      	lsrs	r5, r7
     352:	ea4f 491c 	mov.w	r9, ip, lsr #16
			nvs_sector_advance(fs, &addr);
     356:	fa00 f301 	lsl.w	r3, r0, r1
			addr = fs->ate_wra & ADDR_SECT_MASK;
     35a:	fbb5 f8f9 	udiv	r8, r5, r9
     35e:	0c20      	lsrs	r0, r4, #16
			nvs_sector_advance(fs, &addr);
     360:	fa1f fe8c 	uxth.w	lr, ip
			rc = nvs_flash_erase_sector(fs, addr);
     364:	fb09 5518 	mls	r5, r9, r8, r5
     368:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
			goto end;
     36c:	fb08 f00e 	mul.w	r0, r8, lr
		if (nvs_ate_valid(fs, &last_ate)) {
     370:	42a8      	cmp	r0, r5
     372:	fa02 f201 	lsl.w	r2, r2, r1
     376:	d90b      	bls.n	390 <CONFIG_BT_MESH_ADV_STACK_SIZE+0x90>
     378:	eb1c 0505 	adds.w	r5, ip, r5
			fs->data_wra = addr & ADDR_SECT_MASK;
     37c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
     380:	f080 8088 	bcs.w	494 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x20>
     384:	42a8      	cmp	r0, r5
     386:	f240 8085 	bls.w	494 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x20>
			fs->data_wra = addr & ADDR_SECT_MASK;
     38a:	f1a8 0802 	sub.w	r8, r8, #2
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
     38e:	4465      	add	r5, ip
     390:	1a2d      	subs	r5, r5, r0
     392:	b2a4      	uxth	r4, r4
     394:	fbb5 f0f9 	udiv	r0, r5, r9
     398:	fb09 5510 	mls	r5, r9, r0, r5
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
     39c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
		fs->ate_wra -= ate_size;
     3a0:	fb00 fe0e 	mul.w	lr, r0, lr
     3a4:	45ae      	cmp	lr, r5
     3a6:	d908      	bls.n	3ba <CONFIG_BT_MESH_ADV_STACK_SIZE+0xba>
     3a8:	eb1c 0505 	adds.w	r5, ip, r5
     3ac:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
     3b0:	d26c      	bcs.n	48c <CONFIG_BT_HCI_ECC_STACK_SIZE+0x18>
     3b2:	45ae      	cmp	lr, r5
     3b4:	d96a      	bls.n	48c <CONFIG_BT_HCI_ECC_STACK_SIZE+0x18>
     3b6:	3802      	subs	r0, #2
     3b8:	4465      	add	r5, ip
     3ba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     3be:	fba0 9402 	umull	r9, r4, r0, r2
     3c2:	eba5 050e 	sub.w	r5, r5, lr
     3c6:	42a5      	cmp	r5, r4
     3c8:	46c8      	mov	r8, r9
     3ca:	46a6      	mov	lr, r4
     3cc:	d356      	bcc.n	47c <CONFIG_BT_HCI_ECC_STACK_SIZE+0x8>
     3ce:	d053      	beq.n	478 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x4>
     3d0:	b15e      	cbz	r6, 3ea <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x2>
     3d2:	ebb3 0208 	subs.w	r2, r3, r8
     3d6:	eb65 050e 	sbc.w	r5, r5, lr
     3da:	fa05 f707 	lsl.w	r7, r5, r7
     3de:	fa22 f301 	lsr.w	r3, r2, r1
     3e2:	40cd      	lsrs	r5, r1
     3e4:	431f      	orrs	r7, r3
     3e6:	e9c6 7500 	strd	r7, r5, [r6]
     3ea:	2100      	movs	r1, #0
     3ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3f0:	f1c2 0320 	rsb	r3, r2, #32
     3f4:	fa20 f103 	lsr.w	r1, r0, r3
     3f8:	fa0c fc02 	lsl.w	ip, ip, r2
     3fc:	fa25 f303 	lsr.w	r3, r5, r3
     400:	4095      	lsls	r5, r2
     402:	430d      	orrs	r5, r1
     404:	ea4f 471c 	mov.w	r7, ip, lsr #16
     408:	fa1f fe8c 	uxth.w	lr, ip
     40c:	fbb3 f1f7 	udiv	r1, r3, r7
     410:	fb07 3011 	mls	r0, r7, r1, r3
     414:	0c2b      	lsrs	r3, r5, #16
     416:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     41a:	fb01 f00e 	mul.w	r0, r1, lr
     41e:	4298      	cmp	r0, r3
     420:	fa04 f402 	lsl.w	r4, r4, r2
     424:	d908      	bls.n	438 <CONFIG_LOG_BUFFER_SIZE+0x38>
     426:	eb1c 0303 	adds.w	r3, ip, r3
     42a:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
     42e:	d22f      	bcs.n	490 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x1c>
     430:	4298      	cmp	r0, r3
     432:	d92d      	bls.n	490 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x1c>
     434:	3902      	subs	r1, #2
     436:	4463      	add	r3, ip
     438:	1a1b      	subs	r3, r3, r0
     43a:	b2ad      	uxth	r5, r5
     43c:	fbb3 f0f7 	udiv	r0, r3, r7
     440:	fb07 3310 	mls	r3, r7, r0, r3
     444:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     448:	fb00 f30e 	mul.w	r3, r0, lr
     44c:	42ab      	cmp	r3, r5
     44e:	d908      	bls.n	462 <CONFIG_LOG_BUFFER_SIZE+0x62>
     450:	eb1c 0505 	adds.w	r5, ip, r5
     454:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     458:	d216      	bcs.n	488 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x14>
     45a:	42ab      	cmp	r3, r5
     45c:	d914      	bls.n	488 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x14>
     45e:	3802      	subs	r0, #2
     460:	4465      	add	r5, ip
     462:	1aed      	subs	r5, r5, r3
     464:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     468:	e738      	b.n	2dc <CONFIG_BT_HCI_TX_STACK_SIZE+0x5c>
     46a:	4631      	mov	r1, r6
     46c:	4630      	mov	r0, r6
     46e:	e707      	b.n	280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     470:	4686      	mov	lr, r0
     472:	e6e5      	b.n	240 <CONFIG_FLASH_SIZE+0x40>
     474:	4618      	mov	r0, r3
     476:	e6fa      	b.n	26e <CONFIG_BT_MESH_RPL_STORE_TIMEOUT+0x16>
     478:	454b      	cmp	r3, r9
     47a:	d2a9      	bcs.n	3d0 <CONFIG_BT_MESH_ADV_STACK_SIZE+0xd0>
     47c:	ebb9 0802 	subs.w	r8, r9, r2
     480:	eb64 0e0c 	sbc.w	lr, r4, ip
     484:	3801      	subs	r0, #1
     486:	e7a3      	b.n	3d0 <CONFIG_BT_MESH_ADV_STACK_SIZE+0xd0>
     488:	4640      	mov	r0, r8
     48a:	e7ea      	b.n	462 <CONFIG_LOG_BUFFER_SIZE+0x62>
     48c:	4620      	mov	r0, r4
     48e:	e794      	b.n	3ba <CONFIG_BT_MESH_ADV_STACK_SIZE+0xba>
     490:	4641      	mov	r1, r8
     492:	e7d1      	b.n	438 <CONFIG_LOG_BUFFER_SIZE+0x38>
     494:	46d0      	mov	r8, sl
     496:	e77b      	b.n	390 <CONFIG_BT_MESH_ADV_STACK_SIZE+0x90>
     498:	3b02      	subs	r3, #2
     49a:	4465      	add	r5, ip
     49c:	e732      	b.n	304 <CONFIG_BT_MESH_ADV_STACK_SIZE+0x4>
     49e:	4608      	mov	r0, r1
     4a0:	e709      	b.n	2b6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x36>
     4a2:	4464      	add	r4, ip
     4a4:	3802      	subs	r0, #2
     4a6:	e742      	b.n	32e <CONFIG_BT_MESH_ADV_STACK_SIZE+0x2e>

000004a8 <__aeabi_idiv0>:
     4a8:	4770      	bx	lr
     4aa:	bf00      	nop
     4ac:	0000      	movs	r0, r0
	...

000004b0 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
     4b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     4b4:	4603      	mov	r3, r0
	uint32_t window_widening_event_us;
	uint32_t preamble_to_addr_us;

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
     4b6:	e9d0 800a 	ldrd	r8, r0, [r0, #40]	; 0x28
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
     4ba:	6b1e      	ldr	r6, [r3, #48]	; 0x30
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
     4bc:	4d18      	ldr	r5, [pc, #96]	; (520 <ull_drift_ticks_get+0x70>)
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
     4be:	1984      	adds	r4, r0, r6
	start_to_address_expected_us = EVENT_JITTER_US +
     4c0:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
     4c2:	45a0      	cmp	r8, r4
{
     4c4:	4617      	mov	r7, r2
     4c6:	4689      	mov	r9, r1
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
     4c8:	a313      	add	r3, pc, #76	; (adr r3, 518 <ull_drift_ticks_get+0x68>)
     4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
	if (start_to_address_actual_us <= start_to_address_expected_us) {
     4ce:	d815      	bhi.n	4fc <ull_drift_ticks_get+0x4c>
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
     4d0:	fba0 0105 	umull	r0, r1, r0, r5
     4d4:	f7ff fe54 	bl	180 <__aeabi_uldivmod>
     4d8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
     4dc:	f8c9 0000 	str.w	r0, [r9]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
     4e0:	eba4 0008 	sub.w	r0, r4, r8
					       start_to_address_actual_us));
	} else {
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
     4e4:	a30c      	add	r3, pc, #48	; (adr r3, 518 <ull_drift_ticks_get+0x68>)
     4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
     4ea:	fba0 0105 	umull	r0, r1, r0, r5
     4ee:	f7ff fe47 	bl	180 <__aeabi_uldivmod>
     4f2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
     4f6:	6038      	str	r0, [r7, #0]
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
     4f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
     4fc:	fba8 0105 	umull	r0, r1, r8, r5
     500:	f7ff fe3e 	bl	180 <__aeabi_uldivmod>
     504:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
     508:	f8c9 0000 	str.w	r0, [r9]
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
     50c:	f106 0030 	add.w	r0, r6, #48	; 0x30
     510:	e7e8      	b.n	4e4 <ull_drift_ticks_get+0x34>
     512:	bf00      	nop
     514:	f3af 8000 	nop.w
     518:	1afd498d 	.word	0x1afd498d
     51c:	00000007 	.word	0x00000007
     520:	3b9aca00 	.word	0x3b9aca00
     524:	00000000 	.word	0x00000000

00000528 <ll_adv_enable>:
	uint8_t aux_is_started = 0U;
	uint32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
uint8_t ll_adv_enable(uint8_t enable)
{
     528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     52c:	b08f      	sub	sp, #60	; 0x3c
	struct ll_adv_set *adv;
	struct lll_adv *lll;
	uint8_t hci_err;
	uint32_t ret;

	if (!enable) {
     52e:	b920      	cbnz	r0, 53a <ll_adv_enable+0x12>
		conn_release(adv);
	}
#endif /* CONFIG_BT_PERIPHERAL */

	return BT_HCI_ERR_CMD_DISALLOWED;
}
     530:	b00f      	add	sp, #60	; 0x3c
     532:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return disable(handle);
     536:	f011 b83f 	b.w	115b8 <disable.constprop.0>
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
     53a:	4dbf      	ldr	r5, [pc, #764]	; (838 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x38>)
     53c:	f895 706a 	ldrb.w	r7, [r5, #106]	; 0x6a
     540:	f017 0701 	ands.w	r7, r7, #1
     544:	f040 816f 	bne.w	826 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x26>
	lll_adv_pdu_enqueue(&lll->adv_data, idx);
}

static inline struct pdu_adv *lll_adv_data_peek(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     548:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
     54c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
     550:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     554:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
     558:	eb05 0383 	add.w	r3, r5, r3, lsl #2
     55c:	f8d3 b038 	ldr.w	fp, [r3, #56]	; 0x38
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		pdu_adv_to_update = pdu;
	}

	if (pdu_adv_to_update) {
     560:	f1b9 0f00 	cmp.w	r9, #0
     564:	d013      	beq.n	58e <ll_adv_enable+0x66>
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		} else if (ll_adv_cmds_is_ext() && pdu->tx_addr) {
			own_id_addr = adv->rnd_addr;
#endif
		} else {
			own_id_addr = ll_addr_get(pdu->tx_addr);
     566:	464c      	mov	r4, r9
     568:	f814 0b02 	ldrb.w	r0, [r4], #2
     56c:	f3c0 1080 	ubfx	r0, r0, #6, #1
     570:	f00e fd86 	bl	f080 <ll_addr_get>
	} else {
		tx_addr = own_id_addr;
	}

	adv_addr = adv_pdu_adva_get(pdu);
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
     574:	2206      	movs	r2, #6
			own_id_addr = ll_addr_get(pdu->tx_addr);
     576:	4601      	mov	r1, r0
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
     578:	4620      	mov	r0, r4
     57a:	f019 fe80 	bl	1a27e <memcpy>
		if (pdu_adv_to_update->tx_addr &&
     57e:	f899 3000 	ldrb.w	r3, [r9]
     582:	065a      	lsls	r2, r3, #25
     584:	d40d      	bmi.n	5a2 <ll_adv_enable+0x7a>
			ull_adv_pdu_update_addrs(adv, pdu_scan);
     586:	48ac      	ldr	r0, [pc, #688]	; (838 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x38>)
     588:	4659      	mov	r1, fp
     58a:	f01c fceb 	bl	1cf64 <ull_adv_pdu_update_addrs>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
     58e:	f899 3000 	ldrb.w	r3, [r9]
     592:	f013 0f0e 	tst.w	r3, #14
     596:	f040 80a2 	bne.w	6de <CONFIG_BT_COMPANY_ID+0xed>
		if (lll->conn) {
     59a:	6a2b      	ldr	r3, [r5, #32]
     59c:	b14b      	cbz	r3, 5b2 <ll_adv_enable+0x8a>
	return BT_HCI_ERR_CMD_DISALLOWED;
     59e:	270c      	movs	r7, #12
     5a0:	e099      	b.n	6d6 <CONFIG_BT_COMPANY_ID+0xe5>
		    !mem_nz((void *)adv_addr, BDADDR_SIZE)) {
     5a2:	2106      	movs	r1, #6
     5a4:	4620      	mov	r0, r4
     5a6:	f01c f920 	bl	1c7ea <mem_nz>
		if (pdu_adv_to_update->tx_addr &&
     5aa:	2800      	cmp	r0, #0
     5ac:	d1eb      	bne.n	586 <ll_adv_enable+0x5e>
			return BT_HCI_ERR_INVALID_PARAM;
     5ae:	2712      	movs	r7, #18
     5b0:	e091      	b.n	6d6 <CONFIG_BT_COMPANY_ID+0xe5>
		link = ll_rx_link_alloc();
     5b2:	f010 f9e3 	bl	1097c <ll_rx_link_alloc>
		if (!link) {
     5b6:	4680      	mov	r8, r0
     5b8:	b130      	cbz	r0, 5c8 <ll_adv_enable+0xa0>
		node_rx = ll_rx_alloc();
     5ba:	f010 f9eb 	bl	10994 <ll_rx_alloc>
		if (!node_rx) {
     5be:	4682      	mov	sl, r0
     5c0:	b920      	cbnz	r0, 5cc <ll_adv_enable+0xa4>
			ll_rx_link_release(link);
     5c2:	4640      	mov	r0, r8
     5c4:	f010 f9e0 	bl	10988 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
     5c8:	2707      	movs	r7, #7
     5ca:	e084      	b.n	6d6 <CONFIG_BT_COMPANY_ID+0xe5>
		conn = ll_conn_acquire();
     5cc:	f011 faaa 	bl	11b24 <ll_conn_acquire>
		if (!conn) {
     5d0:	4604      	mov	r4, r0
     5d2:	b918      	cbnz	r0, 5dc <CONFIG_BT_CTLR_XTAL_THRESHOLD>
			ll_rx_release(node_rx);
     5d4:	4650      	mov	r0, sl
     5d6:	f010 f9e3 	bl	109a0 <ll_rx_release>
     5da:	e7f2      	b.n	5c2 <ll_adv_enable+0x9a>
		conn_lll->handle = 0xFFFF;
     5dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
     5e0:	8502      	strh	r2, [r0, #40]	; 0x28
		if (!conn_lll->link_tx_free) {
     5e2:	6e82      	ldr	r2, [r0, #104]	; 0x68
		conn_lll = &conn->lll;
     5e4:	f100 031c 	add.w	r3, r0, #28
		if (!conn_lll->link_tx_free) {
     5e8:	b912      	cbnz	r2, 5f0 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x14>
			conn_lll->link_tx_free = &conn_lll->link_tx;
     5ea:	f100 0260 	add.w	r2, r0, #96	; 0x60
     5ee:	6682      	str	r2, [r0, #104]	; 0x68
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
     5f0:	f104 025c 	add.w	r2, r4, #92	; 0x5c
     5f4:	f104 0158 	add.w	r1, r4, #88	; 0x58
     5f8:	6ea0      	ldr	r0, [r4, #104]	; 0x68
     5fa:	930b      	str	r3, [sp, #44]	; 0x2c
     5fc:	f01c f900 	bl	1c800 <memq_init>
		conn_lll->sn = 0;
     600:	f894 206e 	ldrb.w	r2, [r4, #110]	; 0x6e
     604:	f022 0207 	bic.w	r2, r2, #7
     608:	f884 206e 	strb.w	r2, [r4, #110]	; 0x6e
		conn_lll->data_chan_sel = 0;
     60c:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
     610:	f002 023f 	and.w	r2, r2, #63	; 0x3f
     614:	f062 027f 	orn	r2, r2, #127	; 0x7f
     618:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
		conn_lll->periph.initiated = 0;
     61c:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
     620:	f022 0207 	bic.w	r2, r2, #7
     624:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
		conn->connect_expire = 6;
     628:	2206      	movs	r2, #6
     62a:	f8a4 2070 	strh.w	r2, [r4, #112]	; 0x70
		conn->common.fex_valid = 0;
     62e:	f894 207c 	ldrb.w	r2, [r4, #124]	; 0x7c
		conn_lll->link_tx_free = NULL;
     632:	2600      	movs	r6, #0
		conn->common.fex_valid = 0;
     634:	f022 0207 	bic.w	r2, r2, #7
     638:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
		conn_lll->periph.window_widening_event_us = 0;
     63c:	e9c4 6612 	strd	r6, r6, [r4, #72]	; 0x48
		conn_lll->link_tx_free = NULL;
     640:	66a6      	str	r6, [r4, #104]	; 0x68
		conn_lll->packet_tx_head_len = 0;
     642:	f8a4 606c 	strh.w	r6, [r4, #108]	; 0x6c
		conn_lll->latency_prepare = 0;
     646:	85e6      	strh	r6, [r4, #46]	; 0x2e
		conn_lll->latency_event = 0;
     648:	6326      	str	r6, [r4, #48]	; 0x30
		conn_lll->data_chan_use = 0;
     64a:	f884 603b 	strb.w	r6, [r4, #59]	; 0x3b
		conn_lll->periph.window_size_prepare_us = 0;
     64e:	6526      	str	r6, [r4, #80]	; 0x50
		conn->supervision_expire = 0;
     650:	f8a4 6074 	strh.w	r6, [r4, #116]	; 0x74
		conn->procedure_expire = 0;
     654:	f8a4 6078 	strh.w	r6, [r4, #120]	; 0x78
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
     658:	f8a4 6088 	strh.w	r6, [r4, #136]	; 0x88
     65c:	f884 608a 	strb.w	r6, [r4, #138]	; 0x8a
		conn->llcp_rx = NULL;
     660:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
     664:	f8a4 609c 	strh.w	r6, [r4, #156]	; 0x9c
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
     668:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
		conn->llcp_feature.features_conn = ll_feat_get();
     66c:	f01c fbfe 	bl	1ce6c <ll_feat_get>
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     670:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
		lll->conn = conn_lll;
     674:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     676:	622b      	str	r3, [r5, #32]
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     678:	f022 0203 	bic.w	r2, r2, #3
     67c:	f884 20ca 	strb.w	r2, [r4, #202]	; 0xca
		conn->llcp_conn_param.disabled = 0;
     680:	f894 20f6 	ldrb.w	r2, [r4, #246]	; 0xf6
		conn->llcp_version.req = conn->llcp_version.ack = 0;
     684:	f8a4 60c8 	strh.w	r6, [r4, #200]	; 0xc8
		conn->llcp_feature.features_conn = ll_feat_get();
     688:	e9c4 012e 	strd	r0, r1, [r4, #184]	; 0xb8
		conn->llcp_conn_param.disabled = 0;
     68c:	f366 1245 	bfi	r2, r6, #5, #1
		conn->llcp_feature.features_peer = 0;
     690:	2000      	movs	r0, #0
     692:	2100      	movs	r1, #0
		adv->node_rx_cc_free = node_rx;
     694:	e9c5 8a18 	strd	r8, sl, [r5, #96]	; 0x60
		conn->llcp_feature.features_peer = 0;
     698:	e9c4 0130 	strd	r0, r1, [r4, #192]	; 0xc0
		conn->tx_data = conn->tx_data_last = 0;
     69c:	e9c4 664a 	strd	r6, r6, [r4, #296]	; 0x128
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
     6a0:	e9c4 6648 	strd	r6, r6, [r4, #288]	; 0x120
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->ref = 0U;
	hdr->disabled_cb = hdr->disabled_param = NULL;
     6a4:	e9c4 6605 	strd	r6, r6, [r4, #20]
		conn->llcp_terminate.req = conn->llcp_terminate.ack = 0;
     6a8:	f8a4 60d0 	strh.w	r6, [r4, #208]	; 0xd0
		conn->llcp_terminate.reason_final = 0;
     6ac:	f884 60d3 	strb.w	r6, [r4, #211]	; 0xd3
		conn->llcp_terminate.node_rx.hdr.link = link;
     6b0:	f8c4 80d4 	str.w	r8, [r4, #212]	; 0xd4
		conn->llcp_conn_param.req = 0;
     6b4:	f8a4 60f4 	strh.w	r6, [r4, #244]	; 0xf4
		conn->llcp_conn_param.disabled = 0;
     6b8:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
		conn->periph.ticks_to_offset = 0;
     6bc:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
     6c0:	f8c4 611c 	str.w	r6, [r4, #284]	; 0x11c
	hdr->ref = 0U;
     6c4:	7026      	strb	r6, [r4, #0]

static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
     6c6:	61e4      	str	r4, [r4, #28]
		err = lll_clock_wait();
     6c8:	f013 f86c 	bl	137a4 <lll_clock_wait>
		if (err) {
     6cc:	b138      	cbz	r0, 6de <CONFIG_BT_COMPANY_ID+0xed>
			conn_release(adv);
     6ce:	485a      	ldr	r0, [pc, #360]	; (838 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x38>)
     6d0:	f010 fd1a 	bl	11108 <conn_release>
			return BT_HCI_ERR_HW_FAILURE;
     6d4:	2703      	movs	r7, #3
}
     6d6:	4638      	mov	r0, r7
     6d8:	b00f      	add	sp, #60	; 0x3c
     6da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t ch_map = lll->chan_map;
     6de:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     6e2:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
     6e4:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     6e8:	f10d 0033 	add.w	r0, sp, #51	; 0x33
	uint8_t ch_map = lll->chan_map;
     6ec:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     6f0:	f01c f8b2 	bl	1c858 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
     6f4:	4602      	mov	r2, r0
     6f6:	2800      	cmp	r0, #0
     6f8:	f000 808d 	beq.w	816 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x16>
	uint16_t time_us = adv_time_get(pdu_adv, pdu_scan, adv_chn_cnt, phy,
     6fc:	f89b 1001 	ldrb.w	r1, [fp, #1]
     700:	4648      	mov	r0, r9
     702:	f01c fbe5 	bl	1ced0 <adv_time_get.constprop.0.isra.0>
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
     706:	494d      	ldr	r1, [pc, #308]	; (83c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3c>)
     708:	61ed      	str	r5, [r5, #28]
     70a:	2400      	movs	r4, #0
	adv->ull.ticks_prepare_to_start =
     70c:	2331      	movs	r3, #49	; 0x31
	adv->ull.ticks_preempt_to_start =
     70e:	e9c5 3402 	strd	r3, r4, [r5, #8]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
     712:	fba0 0101 	umull	r0, r1, r0, r1
     716:	a346      	add	r3, pc, #280	; (adr r3, 830 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x30>)
     718:	e9d3 2300 	ldrd	r2, r3, [r3]
	hdr->disabled_cb = hdr->disabled_param = NULL;
     71c:	e9c5 4405 	strd	r4, r4, [r5, #20]
	hdr->ref = 0U;
     720:	702c      	strb	r4, [r5, #0]
	adv->ull.ticks_active_to_start = 0;
     722:	606c      	str	r4, [r5, #4]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
     724:	f7ff fd2c 	bl	180 <__aeabi_uldivmod>
	uint16_t interval = adv->interval;
     728:	f8b5 8068 	ldrh.w	r8, [r5, #104]	; 0x68
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
     72c:	6128      	str	r0, [r5, #16]
	ticks_anchor = ticker_ticks_now_get();
     72e:	f01c fb3d 	bl	1cdac <ticker_ticks_now_get>
     732:	4606      	mov	r6, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
     734:	f1b8 0f00 	cmp.w	r8, #0
     738:	d106      	bne.n	748 <CONFIG_BT_COMPANY_ID+0x157>
     73a:	f899 4000 	ldrb.w	r4, [r9]
     73e:	f004 040f 	and.w	r4, r4, #15
     742:	1e63      	subs	r3, r4, #1
     744:	425c      	negs	r4, r3
     746:	415c      	adcs	r4, r3
     748:	f895 9024 	ldrb.w	r9, [r5, #36]	; 0x24
				   (adv->ull.ticks_slot + ticks_slot_overhead),
     74c:	692b      	ldr	r3, [r5, #16]
     74e:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 840 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x40>
     752:	4a3c      	ldr	r2, [pc, #240]	; (844 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x44>)
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
     754:	f364 0900 	bfi	r9, r4, #0, #1
     758:	f885 9024 	strb.w	r9, [r5, #36]	; 0x24
	if (lll->is_hdcd) {
     75c:	f04f 0a02 	mov.w	sl, #2
     760:	f019 0901 	ands.w	r9, r9, #1
     764:	ac0d      	add	r4, sp, #52	; 0x34
		ret_cb = TICKER_STATUS_BUSY;
     766:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
	if (lll->is_hdcd) {
     76a:	d031      	beq.n	7d0 <CONFIG_BT_COMPANY_ID+0x1df>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     76c:	2000      	movs	r0, #0
     76e:	e9cd 2505 	strd	r2, r5, [sp, #20]
     772:	e9cd 0300 	strd	r0, r3, [sp]
     776:	9304      	str	r3, [sp, #16]
     778:	2103      	movs	r1, #3
     77a:	e9cd b407 	strd	fp, r4, [sp, #28]
     77e:	e9cd 0002 	strd	r0, r0, [sp, #8]
     782:	4633      	mov	r3, r6
     784:	4652      	mov	r2, sl
     786:	f01c fade 	bl	1cd46 <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
     78a:	4621      	mov	r1, r4
     78c:	f010 fa1c 	bl	10bc8 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
     790:	2800      	cmp	r0, #0
     792:	d140      	bne.n	816 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x16>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     794:	4a2c      	ldr	r2, [pc, #176]	; (848 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x48>)
     796:	9506      	str	r5, [sp, #24]
     798:	f24a 33d8 	movw	r3, #41944	; 0xa3d8
     79c:	e9cd 0204 	strd	r0, r2, [sp, #16]
     7a0:	9300      	str	r3, [sp, #0]
     7a2:	e9cd b407 	strd	fp, r4, [sp, #28]
     7a6:	e9cd 0002 	strd	r0, r0, [sp, #8]
     7aa:	9001      	str	r0, [sp, #4]
     7ac:	4633      	mov	r3, r6
     7ae:	2201      	movs	r2, #1
     7b0:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
     7b2:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     7b6:	f01c fac6 	bl	1cd46 <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
     7ba:	4621      	mov	r1, r4
     7bc:	f010 fa04 	bl	10bc8 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
     7c0:	bb48      	cbnz	r0, 816 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x16>
	adv->is_enabled = 1;
     7c2:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
     7c6:	f043 0301 	orr.w	r3, r3, #1
     7ca:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
	return 0;
     7ce:	e782      	b.n	6d6 <CONFIG_BT_COMPANY_ID+0xe5>
		ll_adv_ticker_ext[handle].ticks_slot_window =
     7d0:	491e      	ldr	r1, [pc, #120]	; (84c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4c>)
			ULL_ADV_RANDOM_DELAY + ticks_slot;
     7d2:	f203 1047 	addw	r0, r3, #327	; 0x147
		ll_adv_ticker_ext[handle].ticks_slot_window =
     7d6:	6008      	str	r0, [r1, #0]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     7d8:	481d      	ldr	r0, [pc, #116]	; (850 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x50>)
		ret = ticker_start_ext(
     7da:	e9cd 3204 	strd	r3, r2, [sp, #16]
     7de:	e9cd 4108 	strd	r4, r1, [sp, #32]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     7e2:	f04f 0c91 	mov.w	ip, #145	; 0x91
     7e6:	fba8 0100 	umull	r0, r1, r8, r0
		ret = ticker_start_ext(
     7ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
     7ee:	e9cd 9302 	strd	r9, r3, [sp, #8]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     7f2:	fb0c 1108 	mla	r1, ip, r8, r1
     7f6:	a30e      	add	r3, pc, #56	; (adr r3, 830 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x30>)
     7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret = ticker_start_ext(
     7fc:	e9cd 5b06 	strd	r5, fp, [sp, #24]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     800:	f7ff fcbe 	bl	180 <__aeabi_uldivmod>
		ret = ticker_start_ext(
     804:	4633      	mov	r3, r6
     806:	e9cd 9000 	strd	r9, r0, [sp]
     80a:	4652      	mov	r2, sl
     80c:	2103      	movs	r1, #3
     80e:	4648      	mov	r0, r9
     810:	f00e fb42 	bl	ee98 <ticker_start_ext>
     814:	e7d1      	b.n	7ba <CONFIG_BT_COMPANY_ID+0x1c9>
	if (adv->lll.conn) {
     816:	6a2b      	ldr	r3, [r5, #32]
     818:	2b00      	cmp	r3, #0
     81a:	f43f aec0 	beq.w	59e <ll_adv_enable+0x76>
		conn_release(adv);
     81e:	4806      	ldr	r0, [pc, #24]	; (838 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x38>)
     820:	f010 fc72 	bl	11108 <conn_release>
     824:	e6bb      	b.n	59e <ll_adv_enable+0x76>
			return 0;
     826:	2700      	movs	r7, #0
     828:	e755      	b.n	6d6 <CONFIG_BT_COMPANY_ID+0xe5>
     82a:	bf00      	nop
     82c:	f3af 8000 	nop.w
     830:	1afd498d 	.word	0x1afd498d
     834:	00000007 	.word	0x00000007
     838:	200026cc 	.word	0x200026cc
     83c:	3b9aca00 	.word	0x3b9aca00
     840:	00010411 	.word	0x00010411
     844:	000112d1 	.word	0x000112d1
     848:	00011009 	.word	0x00011009
     84c:	20002738 	.word	0x20002738
     850:	84e72a00 	.word	0x84e72a00
     854:	00000000 	.word	0x00000000

00000858 <ull_adv_time_update>:
{
     858:	b570      	push	{r4, r5, r6, lr}
	chan_map = lll->chan_map;
     85a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
     85e:	b08a      	sub	sp, #40	; 0x28
	chan_map = lll->chan_map;
     860:	f3c3 0342 	ubfx	r3, r3, #1, #3
{
     864:	460d      	mov	r5, r1
     866:	4604      	mov	r4, r0
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
     868:	2101      	movs	r1, #1
     86a:	f10d 0023 	add.w	r0, sp, #35	; 0x23
{
     86e:	4616      	mov	r6, r2
	chan_map = lll->chan_map;
     870:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
     874:	f01b fff0 	bl	1c858 <util_ones_count_get>
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
     878:	7871      	ldrb	r1, [r6, #1]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
     87a:	4602      	mov	r2, r0
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
     87c:	4628      	mov	r0, r5
     87e:	f01c fb27 	bl	1ced0 <adv_time_get.constprop.0.isra.0>
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
     882:	491d      	ldr	r1, [pc, #116]	; (8f8 <ull_adv_time_update+0xa0>)
     884:	a31a      	add	r3, pc, #104	; (adr r3, 8f0 <ull_adv_time_update+0x98>)
     886:	e9d3 2300 	ldrd	r2, r3, [r3]
     88a:	fba0 0101 	umull	r0, r1, r0, r1
     88e:	f7ff fc77 	bl	180 <__aeabi_uldivmod>
	if (adv->ull.ticks_slot > time_ticks) {
     892:	6921      	ldr	r1, [r4, #16]
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
     894:	4605      	mov	r5, r0
	if (adv->ull.ticks_slot > time_ticks) {
     896:	428d      	cmp	r5, r1
     898:	d21f      	bcs.n	8da <ull_adv_time_update+0x82>
		ticks_minus = adv->ull.ticks_slot - time_ticks;
     89a:	1b48      	subs	r0, r1, r5
		ticks_plus = 0U;
     89c:	2100      	movs	r1, #0
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
     89e:	4a17      	ldr	r2, [pc, #92]	; (8fc <ull_adv_time_update+0xa4>)
	ret_cb = TICKER_STATUS_BUSY;
     8a0:	2302      	movs	r3, #2
     8a2:	9309      	str	r3, [sp, #36]	; 0x24
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
     8a4:	1aa2      	subs	r2, r4, r2
     8a6:	236c      	movs	r3, #108	; 0x6c
     8a8:	fbb2 f2f3 	udiv	r2, r2, r3
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
     8ac:	4b14      	ldr	r3, [pc, #80]	; (900 <ull_adv_time_update+0xa8>)
     8ae:	9305      	str	r3, [sp, #20]
     8b0:	ae09      	add	r6, sp, #36	; 0x24
     8b2:	2300      	movs	r3, #0
			    (TICKER_ID_ADV_BASE +
     8b4:	3202      	adds	r2, #2
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
     8b6:	e9cd 1001 	strd	r1, r0, [sp, #4]
     8ba:	e9cd 3303 	strd	r3, r3, [sp, #12]
     8be:	2103      	movs	r1, #3
     8c0:	9606      	str	r6, [sp, #24]
     8c2:	9300      	str	r3, [sp, #0]
     8c4:	b2d2      	uxtb	r2, r2
     8c6:	4618      	mov	r0, r3
     8c8:	f01c fa58 	bl	1cd7c <ticker_update>
	ret = ull_ticker_status_take(ret, &ret_cb);
     8cc:	4631      	mov	r1, r6
     8ce:	f010 f97b 	bl	10bc8 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
     8d2:	b940      	cbnz	r0, 8e6 <ull_adv_time_update+0x8e>
	adv->ull.ticks_slot = time_ticks;
     8d4:	6125      	str	r5, [r4, #16]
}
     8d6:	b00a      	add	sp, #40	; 0x28
     8d8:	bd70      	pop	{r4, r5, r6, pc}
	} else if (adv->ull.ticks_slot < time_ticks) {
     8da:	d902      	bls.n	8e2 <ull_adv_time_update+0x8a>
		ticks_plus = time_ticks - adv->ull.ticks_slot;
     8dc:	1a69      	subs	r1, r5, r1
		ticks_minus = 0U;
     8de:	2000      	movs	r0, #0
     8e0:	e7dd      	b.n	89e <ull_adv_time_update+0x46>
		return BT_HCI_ERR_SUCCESS;
     8e2:	2000      	movs	r0, #0
     8e4:	e7f7      	b.n	8d6 <ull_adv_time_update+0x7e>
		return BT_HCI_ERR_CMD_DISALLOWED;
     8e6:	200c      	movs	r0, #12
     8e8:	e7f5      	b.n	8d6 <ull_adv_time_update+0x7e>
     8ea:	bf00      	nop
     8ec:	f3af 8000 	nop.w
     8f0:	1afd498d 	.word	0x1afd498d
     8f4:	00000007 	.word	0x00000007
     8f8:	3b9aca00 	.word	0x3b9aca00
     8fc:	200026cc 	.word	0x200026cc
     900:	00010411 	.word	0x00010411
     904:	00000000 	.word	0x00000000

00000908 <ull_scan_enable>:
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
						   SCAN_INT_UNIT_US);
}

uint8_t ull_scan_enable(struct ll_scan_set *scan)
{
     908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     90c:	4604      	mov	r4, r0
	uint32_t volatile ret_cb;
	uint32_t ticks_interval;
	uint32_t ticks_anchor;
	uint32_t ret;

	lll->init_addr_type = scan->own_addr_type;
     90e:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
     912:	f894 3020 	ldrb.w	r3, [r4, #32]
	lll->is_stop = 0U;

	ull_hdr_init(&scan->ull);
	lll_hdr_init(lll, scan);

	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
     916:	4f3e      	ldr	r7, [pc, #248]	; (a10 <ull_scan_enable+0x108>)
	lll->init_addr_type = scan->own_addr_type;
     918:	f3c0 0040 	ubfx	r0, r0, #1, #1
     91c:	f360 1386 	bfi	r3, r0, #6, #1
{
     920:	b08c      	sub	sp, #48	; 0x30
	lll->init_addr_type = scan->own_addr_type;
     922:	f884 3020 	strb.w	r3, [r4, #32]
	(void)ll_addr_read(lll->init_addr_type, lll->init_addr);
     926:	f104 0121 	add.w	r1, r4, #33	; 0x21
     92a:	f01c fa45 	bl	1cdb8 <ll_addr_read>
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
     92e:	8d26      	ldrh	r6, [r4, #40]	; 0x28
	lll->chan = 0U;
     930:	f894 3020 	ldrb.w	r3, [r4, #32]
     934:	61e4      	str	r4, [r4, #28]
     936:	2500      	movs	r5, #0
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
     938:	fba6 0107 	umull	r0, r1, r6, r7
     93c:	f04f 0c91 	mov.w	ip, #145	; 0x91
	lll->chan = 0U;
     940:	f003 0379 	and.w	r3, r3, #121	; 0x79
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
     944:	fb0c 1106 	mla	r1, ip, r6, r1
	hdr->disabled_cb = hdr->disabled_param = NULL;
     948:	e9c4 5505 	strd	r5, r5, [r4, #20]
	lll->chan = 0U;
     94c:	f884 3020 	strb.w	r3, [r4, #32]
	hdr->ref = 0U;
     950:	7025      	strb	r5, [r4, #0]
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
     952:	a32d      	add	r3, pc, #180	; (adr r3, a08 <ull_scan_enable+0x100>)
     954:	e9d3 2300 	ldrd	r2, r3, [r3]
     958:	f7ff fc12 	bl	180 <__aeabi_uldivmod>
						SCAN_INT_UNIT_US);

	/* TODO: active_to_start feature port */
	scan->ull.ticks_active_to_start = 0U;
	scan->ull.ticks_prepare_to_start =
     95c:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US);
	scan->ull.ticks_preempt_to_start =
     95e:	e9c4 3502 	strd	r3, r5, [r4, #8]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_PREEMPT_MIN_US);
	if ((lll->ticks_window +
     962:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	scan->ull.ticks_active_to_start = 0U;
     964:	6065      	str	r5, [r4, #4]
	if ((lll->ticks_window +
     966:	3309      	adds	r3, #9
	     HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) <
	    (ticks_interval -
     968:	f1a0 0231 	sub.w	r2, r0, #49	; 0x31
	if ((lll->ticks_window +
     96c:	4293      	cmp	r3, r2
	     HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US))) {
		scan->ull.ticks_slot =
     96e:	bf32      	itee	cc
     970:	6123      	strcc	r3, [r4, #16]
			(lll->ticks_window +
			 HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US));
	} else {
		if (IS_ENABLED(CONFIG_BT_CTLR_SCAN_UNRESERVED)) {
			scan->ull.ticks_slot = 0U;
     972:	6125      	strcs	r5, [r4, #16]
		} else {
			scan->ull.ticks_slot = ticks_interval -
				HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US);
		}

		lll->ticks_window = 0U;
     974:	62e5      	strcs	r5, [r4, #44]	; 0x2c
	return &ll_scan[handle];
}

uint8_t ull_scan_handle_get(struct ll_scan_set *scan)
{
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
     976:	4d27      	ldr	r5, [pc, #156]	; (a14 <ull_scan_enable+0x10c>)
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
     978:	4606      	mov	r6, r0
	ticks_anchor = ticker_ticks_now_get();
     97a:	f01c fa17 	bl	1cdac <ticker_ticks_now_get>
	ret_cb = TICKER_STATUS_BUSY;
     97e:	2302      	movs	r3, #2
     980:	930b      	str	r3, [sp, #44]	; 0x2c
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
     982:	1b65      	subs	r5, r4, r5
     984:	2334      	movs	r3, #52	; 0x34
     986:	fbb5 f5f3 	udiv	r5, r5, r3
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     98a:	4b23      	ldr	r3, [pc, #140]	; (a18 <ull_scan_enable+0x110>)
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
     98c:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     990:	e9cd 4306 	strd	r4, r3, [sp, #24]
     994:	46b8      	mov	r8, r7
     996:	4b21      	ldr	r3, [pc, #132]	; (a1c <ull_scan_enable+0x114>)
     998:	9305      	str	r3, [sp, #20]
	ticks_anchor = ticker_ticks_now_get();
     99a:	4607      	mov	r7, r0
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     99c:	6923      	ldr	r3, [r4, #16]
     99e:	9304      	str	r3, [sp, #16]
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
     9a0:	fbac 0808 	umull	r0, r8, ip, r8
     9a4:	2191      	movs	r1, #145	; 0x91
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     9a6:	f04f 0900 	mov.w	r9, #0
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
     9aa:	fb01 810c 	mla	r1, r1, ip, r8
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     9ae:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
     9b2:	a315      	add	r3, pc, #84	; (adr r3, a08 <ull_scan_enable+0x100>)
     9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     9b8:	f8cd a020 	str.w	sl, [sp, #32]
     9bc:	f8cd 900c 	str.w	r9, [sp, #12]
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
     9c0:	f7ff fbde 	bl	180 <__aeabi_uldivmod>
     9c4:	4610      	mov	r0, r2
     9c6:	4619      	mov	r1, r3
     9c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     9cc:	2300      	movs	r3, #0
     9ce:	f7ff fbd7 	bl	180 <__aeabi_uldivmod>
			   TICKER_USER_ID_THREAD, TICKER_ID_SCAN_BASE + handle,
     9d2:	3504      	adds	r5, #4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     9d4:	b2ed      	uxtb	r5, r5
     9d6:	e9cd 6001 	strd	r6, r0, [sp, #4]
     9da:	2103      	movs	r1, #3
     9dc:	f8cd 9000 	str.w	r9, [sp]
     9e0:	463b      	mov	r3, r7
     9e2:	462a      	mov	r2, r5
     9e4:	4648      	mov	r0, r9
     9e6:	f01c f9ae 	bl	1cd46 <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
     9ea:	4651      	mov	r1, sl
     9ec:	f010 f8ec 	bl	10bc8 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
     9f0:	b940      	cbnz	r0, a04 <ull_scan_enable+0xfc>
	scan->is_enabled = 1U;
     9f2:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
     9f6:	f043 0301 	orr.w	r3, r3, #1
     9fa:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
     9fe:	b00c      	add	sp, #48	; 0x30
     a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
     a04:	200c      	movs	r0, #12
     a06:	e7fa      	b.n	9fe <ull_scan_enable+0xf6>
     a08:	1afd498d 	.word	0x1afd498d
     a0c:	00000007 	.word	0x00000007
     a10:	84e72a00 	.word	0x84e72a00
     a14:	2000275c 	.word	0x2000275c
     a18:	00010411 	.word	0x00010411
     a1c:	00011719 	.word	0x00011719

00000a20 <ll_scan_params_set>:
{
     a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a22:	4604      	mov	r4, r0
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
     a24:	2000      	movs	r0, #0
{
     a26:	4616      	mov	r6, r2
     a28:	461f      	mov	r7, r3
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
     a2a:	f010 fef1 	bl	11810 <ull_scan_is_disabled_get>
	if (!scan) {
     a2e:	4605      	mov	r5, r0
     a30:	b320      	cbz	r0, a7c <ll_scan_params_set+0x5c>
	scan->own_addr_type = own_addr_type;
     a32:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
	lll->interval = interval;
     a36:	8501      	strh	r1, [r0, #40]	; 0x28
	scan->own_addr_type = own_addr_type;
     a38:	f367 0342 	bfi	r3, r7, #1, #2
     a3c:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
	lll->filter_policy = filter_policy;
     a40:	f89d 3018 	ldrb.w	r3, [sp, #24]
     a44:	0164      	lsls	r4, r4, #5
     a46:	00db      	lsls	r3, r3, #3
     a48:	f003 0318 	and.w	r3, r3, #24
     a4c:	f004 0420 	and.w	r4, r4, #32
     a50:	431c      	orrs	r4, r3
     a52:	f890 3020 	ldrb.w	r3, [r0, #32]
     a56:	f023 0338 	bic.w	r3, r3, #56	; 0x38
     a5a:	431c      	orrs	r4, r3
     a5c:	f880 4020 	strb.w	r4, [r0, #32]
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
     a60:	4809      	ldr	r0, [pc, #36]	; (a88 <ll_scan_params_set+0x68>)
     a62:	2491      	movs	r4, #145	; 0x91
     a64:	fba6 0100 	umull	r0, r1, r6, r0
     a68:	a305      	add	r3, pc, #20	; (adr r3, a80 <ll_scan_params_set+0x60>)
     a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
     a6e:	fb04 1106 	mla	r1, r4, r6, r1
     a72:	f7ff fb85 	bl	180 <__aeabi_uldivmod>
     a76:	62e8      	str	r0, [r5, #44]	; 0x2c
	return 0;
     a78:	2000      	movs	r0, #0
}
     a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
     a7c:	200c      	movs	r0, #12
     a7e:	e7fc      	b.n	a7a <ll_scan_params_set+0x5a>
     a80:	1afd498d 	.word	0x1afd498d
     a84:	00000007 	.word	0x00000007
     a88:	84e72a00 	.word	0x84e72a00
     a8c:	00000000 	.word	0x00000000

00000a90 <ull_conn_llcp>:

	return 0;
}

int ull_conn_llcp(struct ll_conn *conn, uint32_t ticks_at_expire, uint16_t lazy)
{
     a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a94:	4691      	mov	r9, r2
	/* Check if no other procedure with instant is requested and not in
	 * Encryption setup.
	 */
	if ((conn->llcp_ack == conn->llcp_req) &&
     a96:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
     a9a:	f890 2089 	ldrb.w	r2, [r0, #137]	; 0x89
     a9e:	4293      	cmp	r3, r2
{
     aa0:	b08d      	sub	sp, #52	; 0x34
     aa2:	4604      	mov	r4, r0
     aa4:	460f      	mov	r7, r1
	if ((conn->llcp_ack == conn->llcp_req) &&
     aa6:	d10b      	bne.n	ac0 <ull_conn_llcp+0x30>
#endif /* !CONFIG_BT_CTLR_LE_ENC */

		/* TODO: Optimize the checks below, maybe have common flag */

		/* check if connection update procedure is requested */
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
     aa8:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
     aac:	f890 209c 	ldrb.w	r2, [r0, #156]	; 0x9c
     ab0:	428a      	cmp	r2, r1
     ab2:	d025      	beq.n	b00 <__data_size+0x30>
			/* switch to LLCP_CONN_UPD state machine */
			conn->llcp_type = LLCP_CONN_UPD;
     ab4:	2201      	movs	r2, #1
			conn->llcp_ack -= 2U;
     ab6:	3b02      	subs	r3, #2
			conn->llcp_type = LLCP_CONN_UPD;
     ab8:	f880 208a 	strb.w	r2, [r0, #138]	; 0x8a
			conn->llcp_ack -= 2U;
     abc:	f880 3089 	strb.w	r3, [r0, #137]	; 0x89
	}

	/* Check if procedures with instant or encryption setup is requested or
	 * active.
	 */
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
     ac0:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
     ac4:	f894 2089 	ldrb.w	r2, [r4, #137]	; 0x89
     ac8:	1a9a      	subs	r2, r3, r2
     aca:	f002 0203 	and.w	r2, r2, #3
     ace:	2a02      	cmp	r2, #2
     ad0:	f040 826e 	bne.w	fb0 <__data_size+0x4e0>
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
		}

		/* Process procedures with instants or encryption setup */
		/* FIXME: Make LE Ping cacheable */
		switch (conn->llcp_type) {
     ad4:	f894 008a 	ldrb.w	r0, [r4, #138]	; 0x8a
     ad8:	2801      	cmp	r0, #1
     ada:	f000 8214 	beq.w	f06 <__data_size+0x436>
     ade:	2802      	cmp	r0, #2
     ae0:	f000 8430 	beq.w	1344 <CONFIG_BT_RX_STACK_SIZE+0x344>
		}
		break;
#endif /* CONFIG_BT_CTLR_PHY */

		default:
			LL_ASSERT(0);
     ae4:	4acc      	ldr	r2, [pc, #816]	; (e18 <__data_size+0x348>)
     ae6:	49cd      	ldr	r1, [pc, #820]	; (e1c <__data_size+0x34c>)
     ae8:	48cd      	ldr	r0, [pc, #820]	; (e20 <__data_size+0x350>)
     aea:	f240 4352 	movw	r3, #1106	; 0x452
     aee:	f018 f869 	bl	18bc4 <printk>
     af2:	4040      	eors	r0, r0
     af4:	f380 8811 	msr	BASEPRI, r0
     af8:	f04f 0003 	mov.w	r0, #3
     afc:	df02      	svc	2
			break;
     afe:	e257      	b.n	fb0 <__data_size+0x4e0>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
     b00:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
     b04:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
     b08:	4293      	cmp	r3, r2
     b0a:	d05b      	beq.n	bc4 <__data_size+0xf4>
static inline void event_fex_prep(struct ll_conn *conn)
{
	struct node_tx *tx;

	/* If waiting for response, do nothing */
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
     b0c:	1a9b      	subs	r3, r3, r2
     b0e:	07da      	lsls	r2, r3, #31
     b10:	d5d6      	bpl.n	ac0 <ull_conn_llcp+0x30>
		return;
	}

	if (conn->common.fex_valid) {
     b12:	f890 107c 	ldrb.w	r1, [r0, #124]	; 0x7c
     b16:	f011 0801 	ands.w	r8, r1, #1
     b1a:	d026      	beq.n	b6a <__data_size+0x9a>
		struct node_rx_pdu *rx;
		struct pdu_data *pdu;

		/* get a rx node for ULL->LL */
		rx = ll_pdu_rx_alloc();
     b1c:	f00f fff2 	bl	10b04 <ll_pdu_rx_alloc>
		if (!rx) {
     b20:	4605      	mov	r5, r0
     b22:	2800      	cmp	r0, #0
     b24:	d0cc      	beq.n	ac0 <ull_conn_llcp+0x30>
			return;
		}

		/* procedure request acked */
		conn->llcp_feature.ack = conn->llcp_feature.req;
     b26:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
     b2a:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1

		/* prepare feature rsp structure */
		rx->hdr.handle = conn->lll.handle;
     b2e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     b30:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
     b32:	2303      	movs	r3, #3
     b34:	7103      	strb	r3, [r0, #4]
		pdu = (void *)rx->pdu;
		pdu->ll_id = PDU_DATA_LLID_CTRL;
     b36:	7f03      	ldrb	r3, [r0, #28]
     b38:	f043 0303 	orr.w	r3, r3, #3
     b3c:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
			   sizeof(struct pdu_data_llctrl_feature_rsp);
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
     b3e:	f100 0620 	add.w	r6, r0, #32
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
     b42:	2309      	movs	r3, #9
     b44:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
     b46:	77c3      	strb	r3, [r0, #31]
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
     b48:	2208      	movs	r2, #8
     b4a:	2100      	movs	r1, #0
     b4c:	4630      	mov	r0, r6
     b4e:	f019 fba1 	bl	1a294 <memset>
			sizeof(pdu->llctrl.feature_rsp.features));
		sys_put_le64(conn->llcp_feature.features_peer,
     b52:	e9d4 0130 	ldrd	r0, r1, [r4, #192]	; 0xc0
     b56:	4632      	mov	r2, r6
     b58:	f01c fb01 	bl	1d15e <sys_put_le64>
			     pdu->llctrl.feature_req.features);

		/* enqueue feature rsp structure into rx queue */
		ll_rx_put(rx->hdr.link, rx);
     b5c:	4629      	mov	r1, r5
			sys_cpu_to_le16(conn->llcp_version.company_id);
		pdu->llctrl.version_ind.sub_version_number =
			sys_cpu_to_le16(conn->llcp_version.sub_version_number);

		/* enqueue version ind structure into rx queue */
		ll_rx_put(rx->hdr.link, rx);
     b5e:	6808      	ldr	r0, [r1, #0]
     b60:	f00f ff24 	bl	109ac <ll_rx_put>
		ll_rx_sched();
     b64:	f00f ff2c 	bl	109c0 <ll_rx_sched>
     b68:	e7aa      	b.n	ac0 <ull_conn_llcp+0x30>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
     b6a:	48ae      	ldr	r0, [pc, #696]	; (e24 <__data_size+0x354>)
     b6c:	f01b fdf8 	bl	1c760 <mem_acquire>
	if (tx) {
     b70:	4605      	mov	r5, r0
     b72:	2800      	cmp	r0, #0
     b74:	d0a4      	beq.n	ac0 <ull_conn_llcp+0x30>
		conn->llcp_feature.ack--;
     b76:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
     b7a:	3b01      	subs	r3, #1
     b7c:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
		pdu->ll_id = PDU_DATA_LLID_CTRL;
     b80:	7903      	ldrb	r3, [r0, #4]
     b82:	f043 0303 	orr.w	r3, r3, #3
     b86:	7103      	strb	r3, [r0, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
     b88:	2309      	movs	r3, #9
     b8a:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
     b8c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
     b90:	2b00      	cmp	r3, #0
     b92:	bfac      	ite	ge
     b94:	2308      	movge	r3, #8
     b96:	230e      	movlt	r3, #14
		(void)memset(&pdu->llctrl.feature_req.features[0],
     b98:	f100 0608 	add.w	r6, r0, #8
		pdu->llctrl.opcode = !conn->lll.role ?
     b9c:	71c3      	strb	r3, [r0, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
     b9e:	2208      	movs	r2, #8
     ba0:	4641      	mov	r1, r8
     ba2:	4630      	mov	r0, r6
     ba4:	f019 fb76 	bl	1a294 <memset>
		sys_put_le64(conn->llcp_feature.features_conn,
     ba8:	e9d4 012e 	ldrd	r0, r1, [r4, #184]	; 0xb8
     bac:	4632      	mov	r2, r6
     bae:	f01c fad6 	bl	1d15e <sys_put_le64>
		ctrl_tx_enqueue(conn, tx);
     bb2:	4629      	mov	r1, r5
			ctrl_tx_enqueue(conn, tx);
     bb4:	4620      	mov	r0, r4
     bb6:	f01c fae3 	bl	1d180 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->procedure_reload;
     bba:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
     bbe:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
     bc2:	e77d      	b.n	ac0 <ull_conn_llcp+0x30>
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
     bc4:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
     bc8:	f890 20c8 	ldrb.w	r2, [r0, #200]	; 0xc8
     bcc:	4293      	cmp	r3, r2
     bce:	d05f      	beq.n	c90 <__data_size+0x1c0>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
     bd0:	1a9b      	subs	r3, r3, r2
     bd2:	07db      	lsls	r3, r3, #31
     bd4:	f57f af74 	bpl.w	ac0 <ull_conn_llcp+0x30>
	if (conn->llcp_version.tx == 0U) {
     bd8:	f890 30ca 	ldrb.w	r3, [r0, #202]	; 0xca
     bdc:	07de      	lsls	r6, r3, #31
     bde:	d424      	bmi.n	c2a <__data_size+0x15a>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
     be0:	4890      	ldr	r0, [pc, #576]	; (e24 <__data_size+0x354>)
     be2:	f01b fdbd 	bl	1c760 <mem_acquire>
		if (tx) {
     be6:	4601      	mov	r1, r0
     be8:	2800      	cmp	r0, #0
     bea:	f43f af69 	beq.w	ac0 <ull_conn_llcp+0x30>
			conn->llcp_version.ack--;
     bee:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
     bf2:	3b01      	subs	r3, #1
     bf4:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
			conn->llcp_version.tx = 1U;
     bf8:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
     bfc:	f043 0301 	orr.w	r3, r3, #1
     c00:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
			pdu->ll_id = PDU_DATA_LLID_CTRL;
     c04:	7903      	ldrb	r3, [r0, #4]
     c06:	f043 0303 	orr.w	r3, r3, #3
     c0a:	7103      	strb	r3, [r0, #4]
			pdu->len =
     c0c:	2306      	movs	r3, #6
     c0e:	7143      	strb	r3, [r0, #5]
			pdu->llctrl.opcode =
     c10:	230c      	movs	r3, #12
     c12:	71c3      	strb	r3, [r0, #7]
			pdu->llctrl.version_ind.version_number =
     c14:	7203      	strb	r3, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
     c16:	f06f 030e 	mvn.w	r3, #14
     c1a:	7243      	strb	r3, [r0, #9]
     c1c:	2305      	movs	r3, #5
     c1e:	7283      	strb	r3, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
     c20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     c24:	72c3      	strb	r3, [r0, #11]
     c26:	7303      	strb	r3, [r0, #12]
     c28:	e7c4      	b.n	bb4 <__data_size+0xe4>
	} else if (conn->llcp_version.rx) {
     c2a:	079d      	lsls	r5, r3, #30
     c2c:	d522      	bpl.n	c74 <__data_size+0x1a4>
		rx = ll_pdu_rx_alloc();
     c2e:	f00f ff69 	bl	10b04 <ll_pdu_rx_alloc>
		if (!rx) {
     c32:	4601      	mov	r1, r0
     c34:	2800      	cmp	r0, #0
     c36:	f43f af43 	beq.w	ac0 <ull_conn_llcp+0x30>
		conn->llcp_version.ack = conn->llcp_version.req;
     c3a:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
     c3e:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
		rx->hdr.handle = conn->lll.handle;
     c42:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     c44:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
     c46:	2303      	movs	r3, #3
     c48:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
     c4a:	7f03      	ldrb	r3, [r0, #28]
     c4c:	f043 0303 	orr.w	r3, r3, #3
     c50:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
     c52:	2306      	movs	r3, #6
     c54:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
     c56:	230c      	movs	r3, #12
     c58:	77c3      	strb	r3, [r0, #31]
		pdu->llctrl.version_ind.version_number =
     c5a:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
     c5e:	f880 3020 	strb.w	r3, [r0, #32]
		pdu->llctrl.version_ind.company_id =
     c62:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
     c66:	f8a0 3021 	strh.w	r3, [r0, #33]	; 0x21
		pdu->llctrl.version_ind.sub_version_number =
     c6a:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
     c6e:	f8a0 3023 	strh.w	r3, [r0, #35]	; 0x23
     c72:	e774      	b.n	b5e <__data_size+0x8e>
	} else {
		/* tx-ed but no rx, and new request placed */
		LL_ASSERT(0);
     c74:	f640 532d 	movw	r3, #3373	; 0xd2d
	}
	break;
#endif /* CONFIG_BT_CTLR_SCHED_ADVANCED */

	default:
		LL_ASSERT(0);
     c78:	4a67      	ldr	r2, [pc, #412]	; (e18 <__data_size+0x348>)
     c7a:	4968      	ldr	r1, [pc, #416]	; (e1c <__data_size+0x34c>)
     c7c:	4868      	ldr	r0, [pc, #416]	; (e20 <__data_size+0x350>)
     c7e:	f017 ffa1 	bl	18bc4 <printk>
     c82:	4040      	eors	r0, r0
     c84:	f380 8811 	msr	BASEPRI, r0
     c88:	f04f 0003 	mov.w	r0, #3
     c8c:	df02      	svc	2
		break;
     c8e:	e717      	b.n	ac0 <ull_conn_llcp+0x30>
		} else if (conn->llcp_conn_param.ack !=
     c90:	f890 20f5 	ldrb.w	r2, [r0, #245]	; 0xf5
     c94:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
     c98:	429a      	cmp	r2, r3
     c9a:	f43f af11 	beq.w	ac0 <ull_conn_llcp+0x30>
	return conn_upd_curr && (conn_upd_curr != conn);
     c9e:	4d62      	ldr	r5, [pc, #392]	; (e28 <__data_size+0x358>)
     ca0:	682b      	ldr	r3, [r5, #0]
     ca2:	b113      	cbz	r3, caa <__data_size+0x1da>
	if (cpr_active_is_set(conn)) {
     ca4:	4298      	cmp	r0, r3
     ca6:	f47f af0b 	bne.w	ac0 <ull_conn_llcp+0x30>
	switch (conn->llcp_conn_param.state) {
     caa:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
     cae:	f003 030f 	and.w	r3, r3, #15
     cb2:	2b06      	cmp	r3, #6
     cb4:	f200 8124 	bhi.w	f00 <__data_size+0x430>
     cb8:	a201      	add	r2, pc, #4	; (adr r2, cc0 <__data_size+0x1f0>)
     cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     cbe:	bf00      	nop
     cc0:	00000cdd 	.word	0x00000cdd
     cc4:	00000d61 	.word	0x00000d61
     cc8:	00000eb7 	.word	0x00000eb7
     ccc:	00000ac1 	.word	0x00000ac1
     cd0:	00000ac1 	.word	0x00000ac1
     cd4:	00000ac1 	.word	0x00000ac1
     cd8:	00000ac1 	.word	0x00000ac1
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
     cdc:	4851      	ldr	r0, [pc, #324]	; (e24 <__data_size+0x354>)
			event_counter = lll->event_counter +
     cde:	8e66      	ldrh	r6, [r4, #50]	; 0x32
					lll->latency_prepare + lazy;
     ce0:	f8b4 802e 	ldrh.w	r8, [r4, #46]	; 0x2e
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
     ce4:	f01b fd3c 	bl	1c760 <mem_acquire>
	if (!tx) {
     ce8:	4601      	mov	r1, r0
     cea:	2800      	cmp	r0, #0
     cec:	f43f aee8 	beq.w	ac0 <ull_conn_llcp+0x30>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     cf0:	7903      	ldrb	r3, [r0, #4]
	conn_upd_curr = conn;
     cf2:	602c      	str	r4, [r5, #0]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     cf4:	f043 0303 	orr.w	r3, r3, #3
     cf8:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
     cfa:	2318      	movs	r3, #24
     cfc:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
     cfe:	230f      	movs	r3, #15
     d00:	71c3      	strb	r3, [r0, #7]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
     d02:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
     d06:	8103      	strh	r3, [r0, #8]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
     d08:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	; 0xfa
     d0c:	8143      	strh	r3, [r0, #10]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
     d0e:	f8b4 30fc 	ldrh.w	r3, [r4, #252]	; 0xfc
     d12:	8183      	strh	r3, [r0, #12]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
     d14:	f8b4 30fe 	ldrh.w	r3, [r4, #254]	; 0xfe
     d18:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0U;
     d1a:	2300      	movs	r3, #0
     d1c:	7403      	strb	r3, [r0, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
     d1e:	74c3      	strb	r3, [r0, #19]
     d20:	7503      	strb	r3, [r0, #20]
			event_counter = lll->event_counter +
     d22:	4446      	add	r6, r8
	p->offset1 = sys_cpu_to_le16(0xffff);
     d24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     d28:	7543      	strb	r3, [r0, #21]
     d2a:	7583      	strb	r3, [r0, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
     d2c:	75c3      	strb	r3, [r0, #23]
     d2e:	7603      	strb	r3, [r0, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
     d30:	7643      	strb	r3, [r0, #25]
     d32:	7683      	strb	r3, [r0, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
     d34:	76c3      	strb	r3, [r0, #27]
     d36:	7703      	strb	r3, [r0, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
     d38:	7743      	strb	r3, [r0, #29]
     d3a:	7783      	strb	r3, [r0, #30]
					lll->latency_prepare + lazy;
     d3c:	444e      	add	r6, r9
	conn->procedure_expire = conn->procedure_reload;
     d3e:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
     d42:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
     d46:	f8a0 6011 	strh.w	r6, [r0, #17]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
     d4a:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
     d4e:	2204      	movs	r2, #4
     d50:	f362 0303 	bfi	r3, r2, #0, #4
     d54:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
	ctrl_tx_enqueue(conn, tx);
     d58:	4620      	mov	r0, r4
     d5a:	f01c fa11 	bl	1d180 <ctrl_tx_enqueue>
     d5e:	e6af      	b.n	ac0 <ull_conn_llcp+0x30>
	if (conn->llcp_conn_param.status) {
     d60:	f894 30f7 	ldrb.w	r3, [r4, #247]	; 0xf7
     d64:	b1eb      	cbz	r3, da2 <__data_size+0x2d2>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
     d66:	482f      	ldr	r0, [pc, #188]	; (e24 <__data_size+0x354>)
     d68:	f01b fcfa 	bl	1c760 <mem_acquire>
		if (!tx) {
     d6c:	4601      	mov	r1, r0
     d6e:	2800      	cmp	r0, #0
     d70:	f43f aea6 	beq.w	ac0 <ull_conn_llcp+0x30>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
     d74:	7903      	ldrb	r3, [r0, #4]
     d76:	f043 0303 	orr.w	r3, r3, #3
     d7a:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
     d7c:	2311      	movs	r3, #17
     d7e:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
     d80:	2303      	movs	r3, #3
     d82:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
     d84:	230f      	movs	r3, #15
     d86:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
     d88:	f894 30f7 	ldrb.w	r3, [r4, #247]	; 0xf7
     d8c:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, tx);
     d8e:	4620      	mov	r0, r4
     d90:	f01c f9f6 	bl	1d180 <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
     d94:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
     d98:	f884 30f5 	strb.w	r3, [r4, #245]	; 0xf5
	conn_upd_curr = NULL;
     d9c:	2300      	movs	r3, #0
     d9e:	602b      	str	r3, [r5, #0]
		return;
     da0:	e68e      	b.n	ac0 <ull_conn_llcp+0x30>
	if (!conn->lll.role) {
     da2:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
     da6:	2a00      	cmp	r2, #0
     da8:	db40      	blt.n	e2c <__data_size+0x35c>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
     daa:	f894 20f6 	ldrb.w	r2, [r4, #246]	; 0xf6
		conn->llcp_cu.win_offset_us = 0U;
     dae:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
     db2:	2006      	movs	r0, #6
     db4:	f360 0203 	bfi	r2, r0, #0, #4
		preferred_periodicity = conn->llcp_conn_param.preferred_periodicity;
     db8:	f894 0100 	ldrb.w	r0, [r4, #256]	; 0x100
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
     dbc:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
		conn->llcp_cu.win_size = 1U;
     dc0:	2201      	movs	r2, #1
     dc2:	f884 20ac 	strb.w	r2, [r4, #172]	; 0xac
		interval_max = conn->llcp_conn_param.interval_max;
     dc6:	f8b4 20fa 	ldrh.w	r2, [r4, #250]	; 0xfa
		if (preferred_periodicity) {
     dca:	b148      	cbz	r0, de0 <__data_size+0x310>
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
     dcc:	fbb2 f3f0 	udiv	r3, r2, r0
     dd0:	fb13 f300 	smulbb	r3, r3, r0
			if (conn->llcp_cu.interval < conn->llcp_conn_param.interval_min) {
     dd4:	f8b4 00f8 	ldrh.w	r0, [r4, #248]	; 0xf8
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
     dd8:	b29b      	uxth	r3, r3
				conn->llcp_cu.interval = interval_max;
     dda:	4298      	cmp	r0, r3
     ddc:	bf98      	it	ls
     dde:	461a      	movls	r2, r3
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
     de0:	f8b4 30fc 	ldrh.w	r3, [r4, #252]	; 0xfc
     de4:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
     de8:	f8b4 30fe 	ldrh.w	r3, [r4, #254]	; 0xfe
     dec:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
     df0:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
			conn->llcp_cu.interval = interval_max;
     df4:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
     df8:	f3c3 1300 	ubfx	r3, r3, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
     dfc:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
     e00:	00db      	lsls	r3, r3, #3
     e02:	f043 0302 	orr.w	r3, r3, #2
     e06:	f022 020f 	bic.w	r2, r2, #15
     e0a:	4313      	orrs	r3, r2
		conn->llcp_cu.ack--;
     e0c:	3901      	subs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
     e0e:	f884 309e 	strb.w	r3, [r4, #158]	; 0x9e
		conn->llcp_cu.ack--;
     e12:	f884 109d 	strb.w	r1, [r4, #157]	; 0x9d
		return;
     e16:	e653      	b.n	ac0 <ull_conn_llcp+0x30>
     e18:	00022ca1 	.word	0x00022ca1
     e1c:	000218fc 	.word	0x000218fc
     e20:	00020429 	.word	0x00020429
     e24:	2000285c 	.word	0x2000285c
     e28:	200027a4 	.word	0x200027a4
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
     e2c:	4867      	ldr	r0, [pc, #412]	; (fcc <__data_size+0x4fc>)
     e2e:	f01b fc97 	bl	1c760 <mem_acquire>
	if (!tx) {
     e32:	4601      	mov	r1, r0
     e34:	2800      	cmp	r0, #0
     e36:	f43f ae43 	beq.w	ac0 <ull_conn_llcp+0x30>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
     e3a:	7903      	ldrb	r3, [r0, #4]
     e3c:	f043 0303 	orr.w	r3, r3, #3
     e40:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
     e42:	2318      	movs	r3, #24
     e44:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
     e46:	2310      	movs	r3, #16
     e48:	71c3      	strb	r3, [r0, #7]
	rsp->interval_min =
     e4a:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
     e4e:	8103      	strh	r3, [r0, #8]
	rsp->interval_max =
     e50:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	; 0xfa
     e54:	8143      	strh	r3, [r0, #10]
	rsp->latency =
     e56:	f8b4 30fc 	ldrh.w	r3, [r4, #252]	; 0xfc
     e5a:	8183      	strh	r3, [r0, #12]
	rsp->timeout =
     e5c:	f8b4 30fe 	ldrh.w	r3, [r4, #254]	; 0xfe
     e60:	81c3      	strh	r3, [r0, #14]
	rsp->preferred_periodicity =
     e62:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
     e66:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
     e68:	f8b4 3102 	ldrh.w	r3, [r4, #258]	; 0x102
     e6c:	f8a0 3011 	strh.w	r3, [r0, #17]
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
     e70:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
     e74:	f8a0 3013 	strh.w	r3, [r0, #19]
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
     e78:	f8b4 3106 	ldrh.w	r3, [r4, #262]	; 0x106
     e7c:	f8a0 3015 	strh.w	r3, [r0, #21]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
     e80:	f8b4 3108 	ldrh.w	r3, [r4, #264]	; 0x108
     e84:	f8a0 3017 	strh.w	r3, [r0, #23]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
     e88:	f8b4 310a 	ldrh.w	r3, [r4, #266]	; 0x10a
     e8c:	f8a0 3019 	strh.w	r3, [r0, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
     e90:	f8b4 310c 	ldrh.w	r3, [r4, #268]	; 0x10c
     e94:	f8a0 301b 	strh.w	r3, [r0, #27]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
     e98:	f8b4 310e 	ldrh.w	r3, [r4, #270]	; 0x10e
     e9c:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, tx);
     ea0:	4620      	mov	r0, r4
     ea2:	f01c f96d 	bl	1d180 <ctrl_tx_enqueue>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
     ea6:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
     eaa:	2205      	movs	r2, #5
     eac:	f362 0303 	bfi	r3, r2, #0, #4
     eb0:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
     eb4:	e604      	b.n	ac0 <ull_conn_llcp+0x30>
	rx = ll_pdu_rx_alloc();
     eb6:	f00f fe25 	bl	10b04 <ll_pdu_rx_alloc>
	if (!rx) {
     eba:	4601      	mov	r1, r0
     ebc:	2800      	cmp	r0, #0
     ebe:	f43f adff 	beq.w	ac0 <ull_conn_llcp+0x30>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
     ec2:	f894 20f6 	ldrb.w	r2, [r4, #246]	; 0xf6
     ec6:	2303      	movs	r3, #3
     ec8:	f363 0203 	bfi	r2, r3, #0, #4
     ecc:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
	rx->hdr.handle = conn->lll.handle;
     ed0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
     ed2:	7103      	strb	r3, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
     ed4:	7f03      	ldrb	r3, [r0, #28]
	rx->hdr.handle = conn->lll.handle;
     ed6:	80c2      	strh	r2, [r0, #6]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
     ed8:	f043 0303 	orr.w	r3, r3, #3
     edc:	7703      	strb	r3, [r0, #28]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
     ede:	2318      	movs	r3, #24
     ee0:	7743      	strb	r3, [r0, #29]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
     ee2:	230f      	movs	r3, #15
     ee4:	77c3      	strb	r3, [r0, #31]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
     ee6:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
     eea:	8403      	strh	r3, [r0, #32]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
     eec:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	; 0xfa
     ef0:	8443      	strh	r3, [r0, #34]	; 0x22
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
     ef2:	f8b4 30fc 	ldrh.w	r3, [r4, #252]	; 0xfc
     ef6:	8483      	strh	r3, [r0, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
     ef8:	f8b4 30fe 	ldrh.w	r3, [r4, #254]	; 0xfe
     efc:	84c3      	strh	r3, [r0, #38]	; 0x26
	ll_rx_put(rx->hdr.link, rx);
     efe:	e62e      	b.n	b5e <__data_size+0x8e>
		LL_ASSERT(0);
     f00:	f640 635e 	movw	r3, #3678	; 0xe5e
     f04:	e6b8      	b.n	c78 <__data_size+0x1a8>
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
     f06:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
     f08:	f8b4 8032 	ldrh.w	r8, [r4, #50]	; 0x32
     f0c:	4490      	add	r8, r2
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
     f0e:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
     f12:	44c8      	add	r8, r9
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
     f14:	f012 0107 	ands.w	r1, r2, #7
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
     f18:	fa1f f888 	uxth.w	r8, r8
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
     f1c:	d058      	beq.n	fd0 <__data_size+0x500>
		rx = ll_pdu_rx_alloc_peek(1);
     f1e:	f00f fdd9 	bl	10ad4 <ll_pdu_rx_alloc_peek>
		if (!rx) {
     f22:	4606      	mov	r6, r0
     f24:	2800      	cmp	r0, #0
     f26:	d043      	beq.n	fb0 <__data_size+0x4e0>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
     f28:	4828      	ldr	r0, [pc, #160]	; (fcc <__data_size+0x4fc>)
     f2a:	f01b fc19 	bl	1c760 <mem_acquire>
		if (!tx) {
     f2e:	4605      	mov	r5, r0
     f30:	2800      	cmp	r0, #0
     f32:	d03d      	beq.n	fb0 <__data_size+0x4e0>
		cpr_active_check_and_set(conn);
     f34:	4620      	mov	r0, r4
     f36:	f010 fc77 	bl	11828 <cpr_active_check_and_set>
		(void)ll_pdu_rx_alloc();
     f3a:	f00f fde3 	bl	10b04 <ll_pdu_rx_alloc>
		rx->hdr.link->mem = conn->llcp_rx;
     f3e:	6833      	ldr	r3, [r6, #0]
     f40:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
     f44:	605a      	str	r2, [r3, #4]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     f46:	792b      	ldrb	r3, [r5, #4]
		conn->llcp_rx = rx;
     f48:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     f4c:	f043 0303 	orr.w	r3, r3, #3
     f50:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
     f52:	2200      	movs	r2, #0
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
     f54:	230c      	movs	r3, #12
     f56:	716b      	strb	r3, [r5, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
     f58:	71ea      	strb	r2, [r5, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
     f5a:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
     f5e:	722b      	strb	r3, [r5, #8]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
     f60:	f240 41e2 	movw	r1, #1250	; 0x4e2
     f64:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
     f68:	fbb3 f3f1 	udiv	r3, r3, r1
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
     f6c:	f8a5 3009 	strh.w	r3, [r5, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
     f70:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
     f74:	f8a5 300b 	strh.w	r3, [r5, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
     f78:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
     f7c:	f8a5 300d 	strh.w	r3, [r5, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
     f80:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
     f84:	f8a5 300f 	strh.w	r3, [r5, #15]
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
     f88:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
     f8c:	f362 0302 	bfi	r3, r2, #0, #3
     f90:	f884 309e 	strb.w	r3, [r4, #158]	; 0x9e
		conn->llcp.conn_upd.instant = event_counter +
     f94:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
     f96:	4498      	add	r8, r3
					      conn->lll.latency + 6;
     f98:	f108 0806 	add.w	r8, r8, #6
     f9c:	fa1f f888 	uxth.w	r8, r8
		conn->llcp.conn_upd.instant = event_counter +
     fa0:	f8a4 808c 	strh.w	r8, [r4, #140]	; 0x8c
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
     fa4:	f8a5 8011 	strh.w	r8, [r5, #17]
			ctrl_tx_enqueue(conn, tx);
     fa8:	4629      	mov	r1, r5
     faa:	4620      	mov	r0, r4
     fac:	f01c f8e8 	bl	1d180 <ctrl_tx_enqueue>
	if (((conn->llcp_terminate.req - conn->llcp_terminate.ack) & 0xFF) ==
     fb0:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
     fb4:	f894 20d1 	ldrb.w	r2, [r4, #209]	; 0xd1
     fb8:	1a9b      	subs	r3, r3, r2
     fba:	b2db      	uxtb	r3, r3
     fbc:	2b01      	cmp	r3, #1
     fbe:	f000 8211 	beq.w	13e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5c>
	return 0;
     fc2:	2000      	movs	r0, #0
}
     fc4:	b00d      	add	sp, #52	; 0x34
     fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     fca:	bf00      	nop
     fcc:	2000285c 	.word	0x2000285c
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
     fd0:	f8b4 a08c 	ldrh.w	sl, [r4, #140]	; 0x8c
     fd4:	eba8 020a 	sub.w	r2, r8, sl
	} else if (instant_latency <= 0x7FFF) {
     fd8:	0410      	lsls	r0, r2, #16
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
     fda:	fa1f fb82 	uxth.w	fp, r2
	} else if (instant_latency <= 0x7FFF) {
     fde:	d4e7      	bmi.n	fb0 <__data_size+0x4e0>
			conn->llcp_ack = conn->llcp_req;
     fe0:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
		conn->llcp_cu.ack = conn->llcp_cu.req;
     fe4:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     fe8:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
		conn->llcp_cu.ack = conn->llcp_cu.req;
     fec:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     ff0:	f894 30f5 	ldrb.w	r3, [r4, #245]	; 0xf5
     ff4:	4293      	cmp	r3, r2
     ff6:	d009      	beq.n	100c <CONFIG_BT_RX_STACK_SIZE+0xc>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
     ff8:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     ffc:	f003 030f 	and.w	r3, r3, #15
    1000:	2b06      	cmp	r3, #6
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    1002:	bf04      	itt	eq
    1004:	f884 20f5 	strbeq.w	r2, [r4, #245]	; 0xf5
			conn->procedure_expire = 0U;
    1008:	f8a4 1078 	strheq.w	r1, [r4, #120]	; 0x78
	if (conn == conn_upd_curr) {
    100c:	4bc0      	ldr	r3, [pc, #768]	; (1310 <CONFIG_BT_RX_STACK_SIZE+0x310>)
		rx = conn->llcp_rx;
    100e:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
	if (conn == conn_upd_curr) {
    1012:	681a      	ldr	r2, [r3, #0]
    1014:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
    1016:	bf04      	itt	eq
    1018:	2200      	moveq	r2, #0
    101a:	601a      	streq	r2, [r3, #0]
		LL_ASSERT(rx && rx->hdr.link);
    101c:	b10d      	cbz	r5, 1022 <CONFIG_BT_RX_STACK_SIZE+0x22>
    101e:	682b      	ldr	r3, [r5, #0]
    1020:	b963      	cbnz	r3, 103c <CONFIG_BT_RX_STACK_SIZE+0x3c>
    1022:	4abc      	ldr	r2, [pc, #752]	; (1314 <CONFIG_BT_RX_STACK_SIZE+0x314>)
    1024:	49bc      	ldr	r1, [pc, #752]	; (1318 <CONFIG_BT_RX_STACK_SIZE+0x318>)
    1026:	48bd      	ldr	r0, [pc, #756]	; (131c <CONFIG_BT_RX_STACK_SIZE+0x31c>)
    1028:	f640 23b4 	movw	r3, #2740	; 0xab4
    102c:	f017 fdca 	bl	18bc4 <printk>
    1030:	4040      	eors	r0, r0
    1032:	f380 8811 	msr	BASEPRI, r0
    1036:	f04f 0003 	mov.w	r0, #3
    103a:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    103c:	6828      	ldr	r0, [r5, #0]
		if ((conn->llcp_cu.interval != lll->interval) ||
    103e:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
		conn->llcp_rx = rx->hdr.link->mem;
    1042:	6843      	ldr	r3, [r0, #4]
    1044:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
		if ((conn->llcp_cu.interval != lll->interval) ||
    1048:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
		    (conn->llcp_cu.latency != lll->latency) ||
    104a:	f8b4 60a2 	ldrh.w	r6, [r4, #162]	; 0xa2
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    104e:	f8b4 10a4 	ldrh.w	r1, [r4, #164]	; 0xa4
		if ((conn->llcp_cu.interval != lll->interval) ||
    1052:	429a      	cmp	r2, r3
    1054:	d113      	bne.n	107e <CONFIG_BT_RX_STACK_SIZE+0x7e>
    1056:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1058:	42b3      	cmp	r3, r6
    105a:	d110      	bne.n	107e <CONFIG_BT_RX_STACK_SIZE+0x7e>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    105c:	f240 43e2 	movw	r3, #1250	; 0x4e2
    1060:	fb03 fc02 	mul.w	ip, r3, r2
    1064:	f242 7310 	movw	r3, #10000	; 0x2710
    1068:	fb03 c301 	mla	r3, r3, r1, ip
    106c:	3b01      	subs	r3, #1
    106e:	fbb3 f3fc 	udiv	r3, r3, ip
		    (conn->llcp_cu.latency != lll->latency) ||
    1072:	f8b4 c072 	ldrh.w	ip, [r4, #114]	; 0x72
    1076:	b29b      	uxth	r3, r3
    1078:	459c      	cmp	ip, r3
    107a:	f000 8121 	beq.w	12c0 <CONFIG_BT_RX_STACK_SIZE+0x2c0>
			rx->hdr.handle = lll->handle;
    107e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1080:	80eb      	strh	r3, [r5, #6]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    1082:	2318      	movs	r3, #24
    1084:	712b      	strb	r3, [r5, #4]
			cu->status = 0x00;
    1086:	2300      	movs	r3, #0
    1088:	772b      	strb	r3, [r5, #28]
			cu->interval = conn->llcp_cu.interval;
    108a:	83ea      	strh	r2, [r5, #30]
			cu->latency = conn->llcp_cu.latency;
    108c:	842e      	strh	r6, [r5, #32]
			cu->timeout = conn->llcp_cu.timeout;
    108e:	8469      	strh	r1, [r5, #34]	; 0x22
		ll_rx_put(rx->hdr.link, rx);
    1090:	4629      	mov	r1, r5
    1092:	f00f fc8b 	bl	109ac <ll_rx_put>
		ll_rx_sched();
    1096:	f00f fc93 	bl	109c0 <ll_rx_sched>
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
    109a:	68a3      	ldr	r3, [r4, #8]
    109c:	2b00      	cmp	r3, #0
    109e:	da09      	bge.n	10b4 <CONFIG_BT_RX_STACK_SIZE+0xb4>
			uint32_t ticks_prepare_to_start =
    10a0:	68e0      	ldr	r0, [r4, #12]
    10a2:	6862      	ldr	r2, [r4, #4]
			conn->ull.ticks_prepare_to_start &= ~XON_BITMASK;
    10a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->ull.ticks_prepare_to_start -
    10a8:	4290      	cmp	r0, r2
    10aa:	bf2c      	ite	cs
    10ac:	183f      	addcs	r7, r7, r0
    10ae:	18bf      	addcc	r7, r7, r2
			conn->ull.ticks_prepare_to_start &= ~XON_BITMASK;
    10b0:	60a3      	str	r3, [r4, #8]
			ticks_at_expire -= (conn->ull.ticks_prepare_to_start -
    10b2:	1aff      	subs	r7, r7, r3
		conn_interval_old = instant_latency * lll->interval;
    10b4:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
		latency = conn_interval_old / conn->llcp_cu.interval;
    10b6:	f8b4 60a0 	ldrh.w	r6, [r4, #160]	; 0xa0
    10ba:	4d99      	ldr	r5, [pc, #612]	; (1320 <CONFIG_BT_RX_STACK_SIZE+0x320>)
		conn_interval_old = instant_latency * lll->interval;
    10bc:	fb10 f00b 	smulbb	r0, r0, fp
    10c0:	b280      	uxth	r0, r0
		latency = conn_interval_old / conn->llcp_cu.interval;
    10c2:	fbb0 f2f6 	udiv	r2, r0, r6
    10c6:	b293      	uxth	r3, r2
    10c8:	930b      	str	r3, [sp, #44]	; 0x2c
		conn_interval_new = latency * conn->llcp_cu.interval;
    10ca:	fb16 f302 	smulbb	r3, r6, r2
    10ce:	b29b      	uxth	r3, r3
		if (conn_interval_new > conn_interval_old) {
    10d0:	4298      	cmp	r0, r3
    10d2:	f240 41e2 	movw	r1, #1250	; 0x4e2
    10d6:	f080 80f6 	bcs.w	12c6 <CONFIG_BT_RX_STACK_SIZE+0x2c6>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    10da:	1a18      	subs	r0, r3, r0
    10dc:	4348      	muls	r0, r1
    10de:	a38a      	add	r3, pc, #552	; (adr r3, 1308 <CONFIG_BT_RX_STACK_SIZE+0x308>)
    10e0:	e9d3 2300 	ldrd	r2, r3, [r3]
    10e4:	fba0 0105 	umull	r0, r1, r0, r5
    10e8:	f7ff f84a 	bl	180 <__aeabi_uldivmod>
    10ec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    10f0:	4407      	add	r7, r0
		lll->latency_prepare -= (instant_latency - latency);
    10f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		lll->latency_prepare += lazy;
    10f4:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
		lll->latency_prepare -= (instant_latency - latency);
    10f6:	ebaa 0a08 	sub.w	sl, sl, r8
    10fa:	449a      	add	sl, r3
		} else if (lll->role) {
    10fc:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		lll->latency_prepare += lazy;
    1100:	4491      	add	r9, r2
		lll->latency_prepare -= (instant_latency - latency);
    1102:	44ca      	add	sl, r9
		conn_interval_us = conn->llcp_cu.interval *
    1104:	f240 48e2 	movw	r8, #1250	; 0x4e2
		} else if (lll->role) {
    1108:	2b00      	cmp	r3, #0
		lll->latency_prepare -= (instant_latency - latency);
    110a:	f8a4 a02e 	strh.w	sl, [r4, #46]	; 0x2e
		conn_interval_us = conn->llcp_cu.interval *
    110e:	fb08 f906 	mul.w	r9, r8, r6
		} else if (lll->role) {
    1112:	f280 80e5 	bge.w	12e0 <CONFIG_BT_RX_STACK_SIZE+0x2e0>
				lll->periph.window_widening_periodic_us *
    1116:	6c22      	ldr	r2, [r4, #64]	; 0x40
			lll->periph.window_widening_prepare_us -=
    1118:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    111a:	fb02 331b 	mls	r3, r2, fp, r3
    111e:	64a3      	str	r3, [r4, #72]	; 0x48
				(((lll_clock_ppm_local_get() +
    1120:	f01c f9f7 	bl	1d512 <lll_clock_ppm_local_get>
    1124:	4606      	mov	r6, r0
				   lll_clock_ppm_get(conn->periph.sca)) *
    1126:	f894 007c 	ldrb.w	r0, [r4, #124]	; 0x7c
    112a:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    112e:	f012 fb87 	bl	13840 <lll_clock_ppm_get>
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    1132:	f894 20ac 	ldrb.w	r2, [r4, #172]	; 0xac
				(((lll_clock_ppm_local_get() +
    1136:	4406      	add	r6, r0
				   lll_clock_ppm_get(conn->periph.sca)) *
    1138:	fb09 f606 	mul.w	r6, r9, r6
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    113c:	fb08 f202 	mul.w	r2, r8, r2
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    1140:	f506 2674 	add.w	r6, r6, #999424	; 0xf4000
    1144:	4877      	ldr	r0, [pc, #476]	; (1324 <CONFIG_BT_RX_STACK_SIZE+0x324>)
			lll->periph.window_size_prepare_us =
    1146:	6522      	str	r2, [r4, #80]	; 0x50
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    1148:	f206 263f 	addw	r6, r6, #575	; 0x23f
			conn->periph.ticks_to_offset = 0U;
    114c:	2200      	movs	r2, #0
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    114e:	fbb6 f6f0 	udiv	r6, r6, r0
				lll->periph.window_widening_periodic_us *
    1152:	980b      	ldr	r0, [sp, #44]	; 0x2c
			conn->periph.ticks_to_offset = 0U;
    1154:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
			lll->periph.window_widening_prepare_us +=
    1158:	6ca2      	ldr	r2, [r4, #72]	; 0x48
			lll->periph.window_widening_periodic_us =
    115a:	6426      	str	r6, [r4, #64]	; 0x40
				lll->periph.window_widening_periodic_us *
    115c:	4370      	muls	r0, r6
				(conn_interval_us >> 1) - EVENT_IFS_US;
    115e:	ea4f 0359 	mov.w	r3, r9, lsr #1
    1162:	3b96      	subs	r3, #150	; 0x96
			lll->periph.window_widening_prepare_us +=
    1164:	4402      	add	r2, r0
			lll->periph.window_widening_max_us =
    1166:	6463      	str	r3, [r4, #68]	; 0x44
			lll->periph.window_widening_prepare_us +=
    1168:	429a      	cmp	r2, r3
    116a:	bf94      	ite	ls
    116c:	64a2      	strls	r2, [r4, #72]	; 0x48
    116e:	64a3      	strhi	r3, [r4, #72]	; 0x48
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1170:	fba0 0105 	umull	r0, r1, r0, r5
    1174:	a364      	add	r3, pc, #400	; (adr r3, 1308 <CONFIG_BT_RX_STACK_SIZE+0x308>)
    1176:	e9d3 2300 	ldrd	r2, r3, [r3]
    117a:	f7ff f801 	bl	180 <__aeabi_uldivmod>
    117e:	1a3f      	subs	r7, r7, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1180:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
    1184:	fbb0 f0f8 	udiv	r0, r0, r8
    1188:	fb08 f000 	mul.w	r0, r8, r0
    118c:	a35e      	add	r3, pc, #376	; (adr r3, 1308 <CONFIG_BT_RX_STACK_SIZE+0x308>)
    118e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1192:	fba0 0105 	umull	r0, r1, r0, r5
    1196:	f7fe fff3 	bl	180 <__aeabi_uldivmod>
			periodic_us -= lll->periph.window_widening_periodic_us;
    119a:	eba9 0606 	sub.w	r6, r9, r6
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    119e:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
		lll->interval = conn->llcp_cu.interval;
    11a2:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
    11a6:	8563      	strh	r3, [r4, #42]	; 0x2a
		lll->latency = conn->llcp_cu.latency;
    11a8:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
    11ac:	85a3      	strh	r3, [r4, #44]	; 0x2c
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    11ae:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
    11b2:	f242 7210 	movw	r2, #10000	; 0x2710
    11b6:	fb02 9303 	mla	r3, r2, r3, r9
    11ba:	3b01      	subs	r3, #1
    11bc:	fbb3 f3f9 	udiv	r3, r3, r9
    11c0:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    11c4:	4b58      	ldr	r3, [pc, #352]	; (1328 <CONFIG_BT_RX_STACK_SIZE+0x328>)
    11c6:	444b      	add	r3, r9
    11c8:	fbb3 f3f9 	udiv	r3, r3, r9
    11cc:	f8a4 3076 	strh.w	r3, [r4, #118]	; 0x76
		if (conn->llcp_cu.cmd) {
    11d0:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
    11d4:	0719      	lsls	r1, r3, #28
			conn->supervision_expire = 0U;
    11d6:	bf44      	itt	mi
    11d8:	2300      	movmi	r3, #0
    11da:	f8a4 3074 	strhmi.w	r3, [r4, #116]	; 0x74
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    11de:	2102      	movs	r1, #2
    11e0:	2001      	movs	r0, #1
    11e2:	f014 f951 	bl	15488 <mayfly_is_enabled>
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    11e6:	2200      	movs	r2, #0
    11e8:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    11ea:	4682      	mov	sl, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    11ec:	2001      	movs	r0, #1
    11ee:	f00d f8f9 	bl	e3e4 <mayfly_enable>
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    11f2:	4620      	mov	r0, r4
    11f4:	f010 fca2 	bl	11b3c <ll_conn_handle_get>
    11f8:	f100 0905 	add.w	r9, r0, #5
    11fc:	fa5f f989 	uxtb.w	r9, r9
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
    1200:	4b4a      	ldr	r3, [pc, #296]	; (132c <CONFIG_BT_RX_STACK_SIZE+0x32c>)
    1202:	9400      	str	r4, [sp, #0]
    1204:	464a      	mov	r2, r9
    1206:	2101      	movs	r1, #1
    1208:	2000      	movs	r0, #0
    120a:	f00d fedf 	bl	efcc <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    120e:	f030 0302 	bics.w	r3, r0, #2
    1212:	d00c      	beq.n	122e <CONFIG_BT_RX_STACK_SIZE+0x22e>
    1214:	4a3f      	ldr	r2, [pc, #252]	; (1314 <CONFIG_BT_RX_STACK_SIZE+0x314>)
    1216:	4946      	ldr	r1, [pc, #280]	; (1330 <CONFIG_BT_RX_STACK_SIZE+0x330>)
    1218:	4840      	ldr	r0, [pc, #256]	; (131c <CONFIG_BT_RX_STACK_SIZE+0x31c>)
    121a:	f640 335f 	movw	r3, #2911	; 0xb5f
    121e:	f017 fcd1 	bl	18bc4 <printk>
    1222:	4040      	eors	r0, r0
    1224:	f380 8811 	msr	BASEPRI, r0
    1228:	f04f 0003 	mov.w	r0, #3
    122c:	df02      	svc	2
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    122e:	fba6 6505 	umull	r6, r5, r6, r5
    1232:	a335      	add	r3, pc, #212	; (adr r3, 1308 <CONFIG_BT_RX_STACK_SIZE+0x308>)
    1234:	e9d3 2300 	ldrd	r2, r3, [r3]
    1238:	4630      	mov	r0, r6
    123a:	4629      	mov	r1, r5
    123c:	f7fe ffa0 	bl	180 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1240:	4b3c      	ldr	r3, [pc, #240]	; (1334 <CONFIG_BT_RX_STACK_SIZE+0x334>)
    1242:	9408      	str	r4, [sp, #32]
    1244:	e9cd 4306 	strd	r4, r3, [sp, #24]
    1248:	4b3b      	ldr	r3, [pc, #236]	; (1338 <CONFIG_BT_RX_STACK_SIZE+0x338>)
    124a:	9305      	str	r3, [sp, #20]
    124c:	6923      	ldr	r3, [r4, #16]
    124e:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(periodic_us),
    1250:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
    1254:	4839      	ldr	r0, [pc, #228]	; (133c <CONFIG_BT_RX_STACK_SIZE+0x33c>)
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1256:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    125a:	9303      	str	r3, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
    125c:	fba4 0100 	umull	r0, r1, r4, r0
    1260:	2307      	movs	r3, #7
    1262:	1a30      	subs	r0, r6, r0
    1264:	fb03 1104 	mla	r1, r3, r4, r1
    1268:	eb65 0101 	sbc.w	r1, r5, r1
    126c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1270:	2300      	movs	r3, #0
    1272:	f7fe ff85 	bl	180 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1276:	463b      	mov	r3, r7
    1278:	e9cd 4001 	strd	r4, r0, [sp, #4]
    127c:	f8cd 8000 	str.w	r8, [sp]
    1280:	464a      	mov	r2, r9
    1282:	2101      	movs	r1, #1
    1284:	2000      	movs	r0, #0
    1286:	f01b fd5e 	bl	1cd46 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    128a:	f030 0302 	bics.w	r3, r0, #2
    128e:	d00c      	beq.n	12aa <CONFIG_BT_RX_STACK_SIZE+0x2aa>
    1290:	4a20      	ldr	r2, [pc, #128]	; (1314 <CONFIG_BT_RX_STACK_SIZE+0x314>)
    1292:	4927      	ldr	r1, [pc, #156]	; (1330 <CONFIG_BT_RX_STACK_SIZE+0x330>)
    1294:	4821      	ldr	r0, [pc, #132]	; (131c <CONFIG_BT_RX_STACK_SIZE+0x31c>)
    1296:	f640 3379 	movw	r3, #2937	; 0xb79
    129a:	f017 fc93 	bl	18bc4 <printk>
    129e:	4040      	eors	r0, r0
    12a0:	f380 8811 	msr	BASEPRI, r0
    12a4:	f04f 0003 	mov.w	r0, #3
    12a8:	df02      	svc	2
		if (mayfly_was_enabled) {
    12aa:	f1ba 0f00 	cmp.w	sl, #0
    12ae:	d004      	beq.n	12ba <CONFIG_BT_RX_STACK_SIZE+0x2ba>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    12b0:	2201      	movs	r2, #1
    12b2:	2102      	movs	r1, #2
    12b4:	4610      	mov	r0, r2
    12b6:	f00d f895 	bl	e3e4 <mayfly_enable>
				return -ECANCELED;
    12ba:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    12be:	e681      	b.n	fc4 <__data_size+0x4f4>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    12c0:	2301      	movs	r3, #1
    12c2:	712b      	strb	r3, [r5, #4]
    12c4:	e6e4      	b.n	1090 <CONFIG_BT_RX_STACK_SIZE+0x90>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    12c6:	fb06 0012 	mls	r0, r6, r2, r0
    12ca:	b280      	uxth	r0, r0
    12cc:	4348      	muls	r0, r1
    12ce:	a30e      	add	r3, pc, #56	; (adr r3, 1308 <CONFIG_BT_RX_STACK_SIZE+0x308>)
    12d0:	e9d3 2300 	ldrd	r2, r3, [r3]
    12d4:	fba0 0105 	umull	r0, r1, r0, r5
    12d8:	f7fe ff52 	bl	180 <__aeabi_uldivmod>
    12dc:	1a3f      	subs	r7, r7, r0
    12de:	e708      	b.n	10f2 <CONFIG_BT_RX_STACK_SIZE+0xf2>
			LL_ASSERT(0);
    12e0:	4a0c      	ldr	r2, [pc, #48]	; (1314 <CONFIG_BT_RX_STACK_SIZE+0x314>)
    12e2:	4917      	ldr	r1, [pc, #92]	; (1340 <CONFIG_BT_RX_STACK_SIZE+0x340>)
    12e4:	480d      	ldr	r0, [pc, #52]	; (131c <CONFIG_BT_RX_STACK_SIZE+0x31c>)
    12e6:	f44f 6333 	mov.w	r3, #2864	; 0xb30
    12ea:	f017 fc6b 	bl	18bc4 <printk>
    12ee:	4040      	eors	r0, r0
    12f0:	f380 8811 	msr	BASEPRI, r0
    12f4:	f04f 0003 	mov.w	r0, #3
    12f8:	df02      	svc	2
		uint32_t ticks_win_offset = 0;
    12fa:	f04f 0800 	mov.w	r8, #0
		periodic_us = conn_interval_us;
    12fe:	464e      	mov	r6, r9
    1300:	e74f      	b.n	11a2 <CONFIG_BT_RX_STACK_SIZE+0x1a2>
    1302:	bf00      	nop
    1304:	f3af 8000 	nop.w
    1308:	1afd498d 	.word	0x1afd498d
    130c:	00000007 	.word	0x00000007
    1310:	200027a4 	.word	0x200027a4
    1314:	00022ca1 	.word	0x00022ca1
    1318:	00022d6b 	.word	0x00022d6b
    131c:	00020429 	.word	0x00020429
    1320:	3b9aca00 	.word	0x3b9aca00
    1324:	000f4240 	.word	0x000f4240
    1328:	026259ff 	.word	0x026259ff
    132c:	00011a79 	.word	0x00011a79
    1330:	00022d7e 	.word	0x00022d7e
    1334:	00011a21 	.word	0x00011a21
    1338:	00012c81 	.word	0x00012c81
    133c:	1afd498d 	.word	0x1afd498d
    1340:	000218fc 	.word	0x000218fc
			event_counter = lll->event_counter +
    1344:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    1346:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
    1348:	440a      	add	r2, r1
					lll->latency_prepare + lazy;
    134a:	4491      	add	r9, r2
	if (conn->llcp.chan_map.initiate) {
    134c:	f894 208c 	ldrb.w	r2, [r4, #140]	; 0x8c
    1350:	07d2      	lsls	r2, r2, #31
			event_counter = lll->event_counter +
    1352:	fa1f f989 	uxth.w	r9, r9
	if (conn->llcp.chan_map.initiate) {
    1356:	d525      	bpl.n	13a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1c>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1358:	4836      	ldr	r0, [pc, #216]	; (1434 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xac>)
    135a:	f01b fa01 	bl	1c760 <mem_acquire>
		if (tx) {
    135e:	4605      	mov	r5, r0
    1360:	2800      	cmp	r0, #0
    1362:	f43f ae25 	beq.w	fb0 <__data_size+0x4e0>
			conn->llcp.chan_map.initiate = 0U;
    1366:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
    136a:	f36f 0300 	bfc	r3, #0, #1
    136e:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
			conn->llcp.chan_map.instant = event_counter +
    1372:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1374:	4499      	add	r9, r3
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1376:	7903      	ldrb	r3, [r0, #4]
						      conn->lll.latency + 6;
    1378:	f109 0906 	add.w	r9, r9, #6
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    137c:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp.chan_map.instant = event_counter +
    1380:	f8a4 9092 	strh.w	r9, [r4, #146]	; 0x92
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1384:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    1386:	2308      	movs	r3, #8
    1388:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    138a:	2301      	movs	r3, #1
    138c:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    138e:	2205      	movs	r2, #5
    1390:	f104 018d 	add.w	r1, r4, #141	; 0x8d
    1394:	3008      	adds	r0, #8
    1396:	f018 ff72 	bl	1a27e <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    139a:	f8b4 3092 	ldrh.w	r3, [r4, #146]	; 0x92
    139e:	f8a5 300d 	strh.w	r3, [r5, #13]
    13a2:	e601      	b.n	fa8 <__data_size+0x4d8>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    13a4:	f8b4 2092 	ldrh.w	r2, [r4, #146]	; 0x92
    13a8:	eba9 0902 	sub.w	r9, r9, r2
    13ac:	f419 4f00 	tst.w	r9, #32768	; 0x8000
    13b0:	f47f adfe 	bne.w	fb0 <__data_size+0x4e0>
		memcpy(&lll->data_chan_map[0],
    13b4:	f104 0534 	add.w	r5, r4, #52	; 0x34
			conn->llcp_ack = conn->llcp_req;
    13b8:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
		memcpy(&lll->data_chan_map[0],
    13bc:	2205      	movs	r2, #5
    13be:	f104 018d 	add.w	r1, r4, #141	; 0x8d
    13c2:	4628      	mov	r0, r5
    13c4:	f018 ff5b 	bl	1a27e <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
    13c8:	2105      	movs	r1, #5
    13ca:	4628      	mov	r0, r5
    13cc:	f01b fa44 	bl	1c858 <util_ones_count_get>
		lll->data_chan_count =
    13d0:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    13d4:	f360 0305 	bfi	r3, r0, #0, #6
    13d8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
    13dc:	2301      	movs	r3, #1
    13de:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
    13e2:	e5e5      	b.n	fb0 <__data_size+0x4e0>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    13e4:	4813      	ldr	r0, [pc, #76]	; (1434 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xac>)
    13e6:	f01b f9bb 	bl	1c760 <mem_acquire>
		if (tx) {
    13ea:	4601      	mov	r1, r0
    13ec:	b188      	cbz	r0, 1412 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8a>
			conn->llcp_terminate.ack--;
    13ee:	f894 30d1 	ldrb.w	r3, [r4, #209]	; 0xd1
    13f2:	3b01      	subs	r3, #1
    13f4:	f884 30d1 	strb.w	r3, [r4, #209]	; 0xd1
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    13f8:	7903      	ldrb	r3, [r0, #4]
    13fa:	f043 0303 	orr.w	r3, r3, #3
    13fe:	7103      	strb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
    1400:	2302      	movs	r3, #2
    1402:	7143      	strb	r3, [r0, #5]
			pdu_tx->llctrl.opcode =
    1404:	71c3      	strb	r3, [r0, #7]
			pdu_tx->llctrl.terminate_ind.error_code =
    1406:	f894 30d2 	ldrb.w	r3, [r4, #210]	; 0xd2
    140a:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, tx);
    140c:	4620      	mov	r0, r4
    140e:	f01b feb7 	bl	1d180 <ctrl_tx_enqueue>
		if (!conn->procedure_expire) {
    1412:	f8b4 0078 	ldrh.w	r0, [r4, #120]	; 0x78
    1416:	2800      	cmp	r0, #0
    1418:	f47f add3 	bne.w	fc2 <__data_size+0x4f2>
			conn->procedure_expire = conn->supervision_reload;
    141c:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
			if (conn->procedure_expire <= 1U) {
    1420:	2b01      	cmp	r3, #1
    1422:	d902      	bls.n	142a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa2>
			conn->procedure_expire = conn->supervision_reload;
    1424:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
    1428:	e5cb      	b.n	fc2 <__data_size+0x4f2>
				conn->procedure_expire++;
    142a:	3301      	adds	r3, #1
    142c:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
    1430:	e5c8      	b.n	fc4 <__data_size+0x4f4>
    1432:	bf00      	nop
    1434:	2000285c 	.word	0x2000285c

00001438 <ull_periph_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param);

void ull_periph_setup(struct node_rx_hdr *rx, struct node_rx_ftr *ftr,
		     struct lll_conn *lll)
{
    1438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t win_offset;
	memq_link_t *link;
	uint16_t timeout;
	uint8_t chan_sel;

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    143c:	680b      	ldr	r3, [r1, #0]
    143e:	f8d3 a000 	ldr.w	sl, [r3]
	conn = lll->hdr.parent;

	/* Populate the peripheral context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;

	peer_addr_type = pdu_adv->tx_addr;
    1442:	7f03      	ldrb	r3, [r0, #28]
{
    1444:	b093      	sub	sp, #76	; 0x4c
	conn = lll->hdr.parent;
    1446:	4617      	mov	r7, r2
{
    1448:	4615      	mov	r5, r2
    144a:	4604      	mov	r4, r0
	peer_addr_type = pdu_adv->tx_addr;
    144c:	f3c3 1380 	ubfx	r3, r3, #6, #1
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    1450:	2206      	movs	r2, #6
{
    1452:	4689      	mov	r9, r1
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    1454:	f100 011e 	add.w	r1, r0, #30
    1458:	a810      	add	r0, sp, #64	; 0x40
	peer_addr_type = pdu_adv->tx_addr;
    145a:	930c      	str	r3, [sp, #48]	; 0x30
	conn = lll->hdr.parent;
    145c:	f857 6b08 	ldr.w	r6, [r7], #8
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    1460:	f018 ff0d 	bl	1a27e <memcpy>
		peer_addr_type += 2;
	} else {
#else /* CONFIG_BT_CTLR_PRIVACY */
	if (1) {
#endif /* CONFIG_BT_CTLR_PRIVACY */
		memcpy(peer_id_addr, peer_addr, BDADDR_SIZE);
    1464:	2206      	movs	r2, #6
    1466:	a910      	add	r1, sp, #64	; 0x40
    1468:	a80e      	add	r0, sp, #56	; 0x38
    146a:	f018 ff08 	bl	1a27e <memcpy>
	}

	/* Use the link stored in the node rx to enqueue connection
	 * complete node rx towards LL context.
	 */
	link = rx->link;
    146e:	4621      	mov	r1, r4
	conn->own_id_addr_type = own_id_addr_type;
	(void)memcpy(conn->own_id_addr, own_id_addr,
		     sizeof(conn->own_id_addr));
#endif /* CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN */

	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    1470:	2203      	movs	r2, #3
	link = rx->link;
    1472:	f851 bb2e 	ldr.w	fp, [r1], #46
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    1476:	4638      	mov	r0, r7
    1478:	f018 ff01 	bl	1a27e <memcpy>
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    147c:	1d2b      	adds	r3, r5, #4
    147e:	4618      	mov	r0, r3
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    1480:	f105 0718 	add.w	r7, r5, #24
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    1484:	2204      	movs	r2, #4
    1486:	f104 012a 	add.w	r1, r4, #42	; 0x2a
    148a:	930a      	str	r3, [sp, #40]	; 0x28
    148c:	f018 fef7 	bl	1a27e <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    1490:	2205      	movs	r2, #5
    1492:	f104 013a 	add.w	r1, r4, #58	; 0x3a
    1496:	4638      	mov	r0, r7
    1498:	f018 fef1 	bl	1a27e <memcpy>
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    149c:	2105      	movs	r1, #5
    149e:	4638      	mov	r0, r7
    14a0:	f01b f9da 	bl	1c858 <util_ones_count_get>
    14a4:	7f6a      	ldrb	r2, [r5, #29]
    14a6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    14aa:	f360 0205 	bfi	r2, r0, #0, #6
    14ae:	776a      	strb	r2, [r5, #29]
			       sizeof(lll->data_chan_map));
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    14b0:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
    14b4:	f3c2 0104 	ubfx	r1, r2, #0, #5
    14b8:	77a9      	strb	r1, [r5, #30]
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    14ba:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    14bc:	81e9      	strh	r1, [r5, #14]
	if ((lll->data_chan_count < 2) || (lll->data_chan_hop < 5) ||
    14be:	2801      	cmp	r0, #1
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    14c0:	f002 021f 	and.w	r2, r2, #31
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    14c4:	b28f      	uxth	r7, r1
	if ((lll->data_chan_count < 2) || (lll->data_chan_hop < 5) ||
    14c6:	d906      	bls.n	14d6 <ull_periph_setup+0x9e>
    14c8:	321b      	adds	r2, #27
    14ca:	f002 021f 	and.w	r2, r2, #31
    14ce:	2a0b      	cmp	r2, #11
    14d0:	d801      	bhi.n	14d6 <ull_periph_setup+0x9e>
	    (lll->data_chan_hop > 16) || !lll->interval) {
    14d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    14d4:	b99f      	cbnz	r7, 14fe <ull_periph_setup+0xc6>
{
	/* Reset the advertising disabled callback */
	hdr->disabled_cb = NULL;

	/* Let the advertiser continue with connectable advertising */
	lll->periph.initiated = 0U;
    14d6:	f895 3020 	ldrb.w	r3, [r5, #32]
	hdr->disabled_cb = NULL;
    14da:	2200      	movs	r2, #0
	lll->periph.initiated = 0U;
    14dc:	f362 0300 	bfi	r3, r2, #0, #1
	hdr->disabled_cb = NULL;
    14e0:	f8ca 2014 	str.w	r2, [sl, #20]
	lll->periph.initiated = 0U;
    14e4:	f885 3020 	strb.w	r3, [r5, #32]

	/* Mark for buffer for release */
	rx->type = NODE_RX_TYPE_RELEASE;
    14e8:	2301      	movs	r3, #1
    14ea:	7123      	strb	r3, [r4, #4]
		/* Mark for buffer for release */
		rx->type = NODE_RX_TYPE_RELEASE;
	}

	/* Enqueue connection or CSA event to be release */
	ll_rx_put(link, rx);
    14ec:	4621      	mov	r1, r4
    14ee:	4658      	mov	r0, fp
    14f0:	f00f fa5c 	bl	109ac <ll_rx_put>
	ll_rx_sched();
    14f4:	f00f fa64 	bl	109c0 <ll_rx_sched>
}
    14f8:	b013      	add	sp, #76	; 0x4c
    14fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	((struct lll_adv *)ftr->param)->conn = NULL;
    14fe:	f8d9 2000 	ldr.w	r2, [r9]
    1502:	930d      	str	r3, [sp, #52]	; 0x34
    1504:	f04f 0800 	mov.w	r8, #0
    1508:	f8c2 8004 	str.w	r8, [r2, #4]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    150c:	f894 1037 	ldrb.w	r1, [r4, #55]	; 0x37
    1510:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
    1514:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    1518:	822a      	strh	r2, [r5, #16]
	conn->periph.sca = pdu_adv->connect_ind.sca;
    151a:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
    151e:	f896 107c 	ldrb.w	r1, [r6, #124]	; 0x7c
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    1522:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1524:	930b      	str	r3, [sp, #44]	; 0x2c
	conn->periph.sca = pdu_adv->connect_ind.sca;
    1526:	0952      	lsrs	r2, r2, #5
    1528:	f362 01c5 	bfi	r1, r2, #3, #3
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    152c:	f240 43e2 	movw	r3, #1250	; 0x4e2
	conn->periph.sca = pdu_adv->connect_ind.sca;
    1530:	f886 107c 	strb.w	r1, [r6, #124]	; 0x7c
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    1534:	435f      	muls	r7, r3
		(((lll_clock_ppm_local_get() +
    1536:	f01b ffec 	bl	1d512 <lll_clock_ppm_local_get>
    153a:	900a      	str	r0, [sp, #40]	; 0x28
		   lll_clock_ppm_get(conn->periph.sca)) *
    153c:	f896 007c 	ldrb.w	r0, [r6, #124]	; 0x7c
    1540:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    1544:	f012 f97c 	bl	13840 <lll_clock_ppm_get>
		(((lll_clock_ppm_local_get() +
    1548:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    154a:	4410      	add	r0, r2
		   lll_clock_ppm_get(conn->periph.sca)) *
    154c:	4378      	muls	r0, r7
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    154e:	f500 2074 	add.w	r0, r0, #999424	; 0xf4000
    1552:	4a77      	ldr	r2, [pc, #476]	; (1730 <ull_periph_setup+0x2f8>)
    1554:	f200 203f 	addw	r0, r0, #575	; 0x23f
    1558:	fbb0 f0f2 	udiv	r0, r0, r2
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
    155c:	087a      	lsrs	r2, r7, #1
    155e:	3a96      	subs	r2, #150	; 0x96
    1560:	62aa      	str	r2, [r5, #40]	; 0x28
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
    1562:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
	lll->periph.window_widening_periodic_us =
    1566:	6268      	str	r0, [r5, #36]	; 0x24
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
    1568:	f240 43e2 	movw	r3, #1250	; 0x4e2
    156c:	435a      	muls	r2, r3
    156e:	63aa      	str	r2, [r5, #56]	; 0x38
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    1570:	8f22      	ldrh	r2, [r4, #56]	; 0x38
    1572:	920a      	str	r2, [sp, #40]	; 0x28
    1574:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
	memcpy((void *)&conn->periph.force, &lll->access_addr[0],
    1578:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    157a:	f242 7110 	movw	r1, #10000	; 0x2710
    157e:	fb01 7202 	mla	r2, r1, r2, r7
    1582:	3a01      	subs	r2, #1
    1584:	fbb2 f2f7 	udiv	r2, r2, r7
    1588:	f8a6 2072 	strh.w	r2, [r6, #114]	; 0x72
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    158c:	4a69      	ldr	r2, [pc, #420]	; (1734 <ull_periph_setup+0x2fc>)
	memcpy((void *)&conn->periph.force, &lll->access_addr[0],
    158e:	4619      	mov	r1, r3
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1590:	443a      	add	r2, r7
	memcpy((void *)&conn->periph.force, &lll->access_addr[0],
    1592:	f106 0080 	add.w	r0, r6, #128	; 0x80
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1596:	fbb2 f2f7 	udiv	r2, r2, r7
    159a:	f8a6 2076 	strh.w	r2, [r6, #118]	; 0x76
	memcpy((void *)&conn->periph.force, &lll->access_addr[0],
    159e:	2204      	movs	r2, #4
    15a0:	f018 fe6d 	bl	1a27e <memcpy>
	cc->peer_addr_type = peer_addr_type;
    15a4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    15a8:	77a2      	strb	r2, [r4, #30]
	cc->status = 0U;
    15aa:	f44f 7380 	mov.w	r3, #256	; 0x100
    15ae:	83a3      	strh	r3, [r4, #28]
	memcpy(cc->peer_addr, peer_id_addr, BDADDR_SIZE);
    15b0:	a90e      	add	r1, sp, #56	; 0x38
    15b2:	2206      	movs	r2, #6
    15b4:	f104 001f 	add.w	r0, r4, #31
    15b8:	f018 fe61 	bl	1a27e <memcpy>
	cc->interval = lll->interval;
    15bc:	89eb      	ldrh	r3, [r5, #14]
    15be:	84e3      	strh	r3, [r4, #38]	; 0x26
	cc->latency = lll->latency;
    15c0:	8a2b      	ldrh	r3, [r5, #16]
    15c2:	8523      	strh	r3, [r4, #40]	; 0x28
	cc->sca = conn->periph.sca;
    15c4:	f896 307c 	ldrb.w	r3, [r6, #124]	; 0x7c
	cc->timeout = timeout;
    15c8:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
    15cc:	8562      	strh	r2, [r4, #42]	; 0x2a
	cc->sca = conn->periph.sca;
    15ce:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    15d2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	lll->handle = ll_conn_handle_get(conn);
    15d6:	4630      	mov	r0, r6
    15d8:	f010 fab0 	bl	11b3c <ll_conn_handle_get>
	ll_rx_put(link, rx);
    15dc:	4621      	mov	r1, r4
	lll->handle = ll_conn_handle_get(conn);
    15de:	81a8      	strh	r0, [r5, #12]
	rx->handle = lll->handle;
    15e0:	80e0      	strh	r0, [r4, #6]
	ll_rx_put(link, rx);
    15e2:	4658      	mov	r0, fp
    15e4:	f00f f9e2 	bl	109ac <ll_rx_put>
	ll_rx_sched();
    15e8:	f00f f9ea 	bl	109c0 <ll_rx_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(0, 0);
    15ec:	4641      	mov	r1, r8
    15ee:	4640      	mov	r0, r8
    15f0:	f01b ff63 	bl	1d4ba <lll_radio_rx_ready_delay_get>
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    15f4:	4c50      	ldr	r4, [pc, #320]	; (1738 <ull_periph_setup+0x300>)
	conn->ull.ticks_active_to_start = 0U;
    15f6:	f8c6 8004 	str.w	r8, [r6, #4]
	ready_delay_us = lll_radio_rx_ready_delay_get(0, 0);
    15fa:	4683      	mov	fp, r0
	conn->ull.ticks_prepare_to_start =
    15fc:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    15fe:	f200 4052 	addw	r0, r0, #1106	; 0x452
	conn->ull.ticks_preempt_to_start =
    1602:	e9c6 3802 	strd	r3, r8, [r6, #8]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1606:	fba0 0104 	umull	r0, r1, r0, r4
    160a:	a347      	add	r3, pc, #284	; (adr r3, 1728 <ull_periph_setup+0x2f0>)
    160c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1610:	f7fe fdb6 	bl	180 <__aeabi_uldivmod>
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    1614:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	conn_offset_us = ftr->radio_end_us;
    1616:	f8d9 300c 	ldr.w	r3, [r9, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    161a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    161e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    1622:	fb01 3302 	mla	r3, r1, r2, r3
	conn->ull.ticks_slot =
    1626:	6130      	str	r0, [r6, #16]
	conn_interval_us -= lll->periph.window_widening_periodic_us;
    1628:	6a68      	ldr	r0, [r5, #36]	; 0x24
	conn_offset_us -= EVENT_JITTER_US;
    162a:	f203 41b2 	addw	r1, r3, #1202	; 0x4b2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    162e:	4642      	mov	r2, r8
	conn_interval_us -= lll->periph.window_widening_periodic_us;
    1630:	1a3f      	subs	r7, r7, r0
	conn_offset_us -= ready_delay_us;
    1632:	eba1 0b0b 	sub.w	fp, r1, fp
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    1636:	2001      	movs	r0, #1
    1638:	2102      	movs	r1, #2
    163a:	f00c fed3 	bl	e3e4 <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    163e:	4650      	mov	r0, sl
    1640:	f00f ff98 	bl	11574 <ull_adv_handle_get>
    1644:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    1646:	4b3d      	ldr	r3, [pc, #244]	; (173c <ull_periph_setup+0x304>)
    1648:	f8cd a000 	str.w	sl, [sp]
    164c:	b2d2      	uxtb	r2, r2
    164e:	2101      	movs	r1, #1
    1650:	4640      	mov	r0, r8
    1652:	f00d fcbb 	bl	efcc <ticker_stop>
	ticker_op_stop_adv_cb(ticker_status, adv);
    1656:	4651      	mov	r1, sl
    1658:	f011 faf6 	bl	12c48 <ticker_op_stop_adv_cb>
	if (adv->lll.is_hdcd) {
    165c:	f89a 3024 	ldrb.w	r3, [sl, #36]	; 0x24
    1660:	07db      	lsls	r3, r3, #31
    1662:	d507      	bpl.n	1674 <ull_periph_setup+0x23c>
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    1664:	2201      	movs	r2, #1
    1666:	f8cd 8000 	str.w	r8, [sp]
    166a:	4643      	mov	r3, r8
    166c:	4611      	mov	r1, r2
    166e:	4640      	mov	r0, r8
    1670:	f00d fcac 	bl	efcc <ticker_stop>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1674:	4630      	mov	r0, r6
    1676:	f010 fa61 	bl	11b3c <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    167a:	fba7 7804 	umull	r7, r8, r7, r4
    167e:	a32a      	add	r3, pc, #168	; (adr r3, 1728 <ull_periph_setup+0x2f0>)
    1680:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1684:	4605      	mov	r5, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    1686:	4641      	mov	r1, r8
    1688:	4638      	mov	r0, r7
    168a:	f7fe fd79 	bl	180 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    168e:	f8d9 3008 	ldr.w	r3, [r9, #8]
    1692:	f1a3 093a 	sub.w	r9, r3, #58	; 0x3a
    1696:	f240 13ab 	movw	r3, #427	; 0x1ab
    169a:	9308      	str	r3, [sp, #32]
    169c:	4b28      	ldr	r3, [pc, #160]	; (1740 <ull_periph_setup+0x308>)
    169e:	e9cd 6306 	strd	r6, r3, [sp, #24]
    16a2:	4b28      	ldr	r3, [pc, #160]	; (1744 <ull_periph_setup+0x30c>)
    16a4:	9305      	str	r3, [sp, #20]
    16a6:	6933      	ldr	r3, [r6, #16]
    16a8:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    16aa:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
    16ae:	4826      	ldr	r0, [pc, #152]	; (1748 <ull_periph_setup+0x310>)
    16b0:	2307      	movs	r3, #7
    16b2:	fba6 0100 	umull	r0, r1, r6, r0
    16b6:	1a38      	subs	r0, r7, r0
    16b8:	fb03 1106 	mla	r1, r3, r6, r1
    16bc:	eb68 0101 	sbc.w	r1, r8, r1
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    16c0:	f04f 0a00 	mov.w	sl, #0
				     HAL_TICKER_REMAINDER(conn_interval_us),
    16c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    16c8:	2300      	movs	r3, #0
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    16ca:	f8cd a00c 	str.w	sl, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    16ce:	f7fe fd57 	bl	180 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    16d2:	a315      	add	r3, pc, #84	; (adr r3, 1728 <ull_periph_setup+0x2f0>)
    16d4:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    16d8:	e9cd 6001 	strd	r6, r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    16dc:	fbab 0104 	umull	r0, r1, fp, r4
    16e0:	f7fe fd4e 	bl	180 <__aeabi_uldivmod>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    16e4:	3505      	adds	r5, #5
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    16e6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    16ea:	b2ed      	uxtb	r5, r5
    16ec:	9000      	str	r0, [sp, #0]
    16ee:	464b      	mov	r3, r9
    16f0:	462a      	mov	r2, r5
    16f2:	2101      	movs	r1, #1
    16f4:	4650      	mov	r0, sl
    16f6:	f01b fb26 	bl	1cd46 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    16fa:	f030 0302 	bics.w	r3, r0, #2
    16fe:	d00c      	beq.n	171a <ull_periph_setup+0x2e2>
    1700:	4a12      	ldr	r2, [pc, #72]	; (174c <ull_periph_setup+0x314>)
    1702:	4913      	ldr	r1, [pc, #76]	; (1750 <ull_periph_setup+0x318>)
    1704:	4813      	ldr	r0, [pc, #76]	; (1754 <ull_periph_setup+0x31c>)
    1706:	f44f 73d6 	mov.w	r3, #428	; 0x1ac
    170a:	f017 fa5b 	bl	18bc4 <printk>
    170e:	4040      	eors	r0, r0
    1710:	f380 8811 	msr	BASEPRI, r0
    1714:	f04f 0003 	mov.w	r0, #3
    1718:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    171a:	2201      	movs	r2, #1
    171c:	2102      	movs	r1, #2
    171e:	4610      	mov	r0, r2
    1720:	f00c fe60 	bl	e3e4 <mayfly_enable>
    1724:	e6e8      	b.n	14f8 <ull_periph_setup+0xc0>
    1726:	bf00      	nop
    1728:	1afd498d 	.word	0x1afd498d
    172c:	00000007 	.word	0x00000007
    1730:	000f4240 	.word	0x000f4240
    1734:	026259ff 	.word	0x026259ff
    1738:	3b9aca00 	.word	0x3b9aca00
    173c:	00012c49 	.word	0x00012c49
    1740:	00012c1d 	.word	0x00012c1d
    1744:	00012c81 	.word	0x00012c81
    1748:	1afd498d 	.word	0x1afd498d
    174c:	00022e2d 	.word	0x00022e2d
    1750:	00022d7e 	.word	0x00022d7e
    1754:	00020429 	.word	0x00020429

00001758 <nrf_flash_sync_exe>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
	_ticker_sync_context.slot = duration;
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
    1758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    175c:	b08f      	sub	sp, #60	; 0x3c
			      /* (MAYFLY_CALL_ID_PROGRAM) */
			   ticker_id, /* flash ticker id */
			   ticker_ticks_now_get(), /* current tick */
			   0, /* first int. immediately */
			   /* period */
			   HAL_TICKER_US_TO_TICKS(
    175e:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 1838 <nrf_flash_sync_exe+0xe0>
{
    1762:	900a      	str	r0, [sp, #40]	; 0x28
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
    1764:	f10d 0137 	add.w	r1, sp, #55	; 0x37
    1768:	f10d 0036 	add.w	r0, sp, #54	; 0x36
    176c:	f01b fba1 	bl	1ceb2 <ll_timeslice_ticker_id_get>
			   HAL_TICKER_US_TO_TICKS(
    1770:	4f32      	ldr	r7, [pc, #200]	; (183c <nrf_flash_sync_exe+0xe4>)
	err = ticker_start(instance_index,
    1772:	f89d a036 	ldrb.w	sl, [sp, #54]	; 0x36
    1776:	f89d b037 	ldrb.w	fp, [sp, #55]	; 0x37
    177a:	f01b fb17 	bl	1cdac <ticker_ticks_now_get>
			   HAL_TICKER_US_TO_TICKS(
    177e:	f8d8 4000 	ldr.w	r4, [r8]
    1782:	fba4 5407 	umull	r5, r4, r4, r7
    1786:	a32a      	add	r3, pc, #168	; (adr r3, 1830 <nrf_flash_sync_exe+0xd8>)
    1788:	e9d3 2300 	ldrd	r2, r3, [r3]
	err = ticker_start(instance_index,
    178c:	4681      	mov	r9, r0
			   HAL_TICKER_US_TO_TICKS(
    178e:	4621      	mov	r1, r4
    1790:	4628      	mov	r0, r5
    1792:	f7fe fcf5 	bl	180 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
    1796:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			   HAL_TICKER_US_TO_TICKS(
    1798:	900b      	str	r0, [sp, #44]	; 0x2c
				_ticker_sync_context.interval),
			   /* period remainder */
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
			   0, /* lazy, voluntary skips */
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    179a:	f8d8 0004 	ldr.w	r0, [r8, #4]
	err = ticker_start(instance_index,
    179e:	9306      	str	r3, [sp, #24]
    17a0:	4b27      	ldr	r3, [pc, #156]	; (1840 <nrf_flash_sync_exe+0xe8>)
    17a2:	9305      	str	r3, [sp, #20]
    17a4:	2600      	movs	r6, #0
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    17a6:	a322      	add	r3, pc, #136	; (adr r3, 1830 <nrf_flash_sync_exe+0xd8>)
    17a8:	e9d3 2300 	ldrd	r2, r3, [r3]
    17ac:	fba0 0107 	umull	r0, r1, r0, r7
	err = ticker_start(instance_index,
    17b0:	e9cd 6607 	strd	r6, r6, [sp, #28]
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    17b4:	f7fe fce4 	bl	180 <__aeabi_uldivmod>
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
    17b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	err = ticker_start(instance_index,
    17ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    17be:	e9cd 6003 	strd	r6, r0, [sp, #12]
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
    17c2:	4820      	ldr	r0, [pc, #128]	; (1844 <nrf_flash_sync_exe+0xec>)
    17c4:	f023 477f 	bic.w	r7, r3, #4278190080	; 0xff000000
    17c8:	fba7 0100 	umull	r0, r1, r7, r0
    17cc:	2307      	movs	r3, #7
    17ce:	1a28      	subs	r0, r5, r0
    17d0:	fb03 1107 	mla	r1, r3, r7, r1
    17d4:	eb64 0101 	sbc.w	r1, r4, r1
    17d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    17dc:	2300      	movs	r3, #0
    17de:	f7fe fccf 	bl	180 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
    17e2:	9600      	str	r6, [sp, #0]
    17e4:	e9cd 7001 	strd	r7, r0, [sp, #4]
    17e8:	464b      	mov	r3, r9
    17ea:	465a      	mov	r2, fp
    17ec:	2103      	movs	r1, #3
    17ee:	4650      	mov	r0, sl
    17f0:	f01b faa9 	bl	1cd46 <ticker_start>
			   time_slot_callback_prepare,
			   op_desc,
			   NULL, /* no op callback */
			   NULL);

	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
    17f4:	f030 0402 	bics.w	r4, r0, #2
    17f8:	d116      	bne.n	1828 <nrf_flash_sync_exe+0xd0>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    17fa:	4a13      	ldr	r2, [pc, #76]	; (1848 <nrf_flash_sync_exe+0xf0>)
    17fc:	4813      	ldr	r0, [pc, #76]	; (184c <nrf_flash_sync_exe+0xf4>)
    17fe:	2300      	movs	r3, #0
    1800:	f016 f950 	bl	17aa4 <z_impl_k_sem_take>
		result = -ECANCELED;
	} else if (k_sem_take(&sem_sync, K_MSEC(FLASH_TIMEOUT_MS)) != 0) {
    1804:	b168      	cbz	r0, 1822 <nrf_flash_sync_exe+0xca>
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
    1806:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
    180a:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
    180e:	9400      	str	r4, [sp, #0]
    1810:	4623      	mov	r3, r4
    1812:	2103      	movs	r1, #3
    1814:	f00d fbda 	bl	efcc <ticker_stop>
		/* Stop any scheduled jobs */
		_ticker_stop(instance_index, 3, ticker_id);

		/* wait for operation's complete overrun*/
		result = -ETIMEDOUT;
    1818:	f06f 0073 	mvn.w	r0, #115	; 0x73
	} else {
		result = _ticker_sync_context.result;
	}

	return result;
}
    181c:	b00f      	add	sp, #60	; 0x3c
    181e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		result = _ticker_sync_context.result;
    1822:	f8d8 000c 	ldr.w	r0, [r8, #12]
    1826:	e7f9      	b.n	181c <nrf_flash_sync_exe+0xc4>
		result = -ECANCELED;
    1828:	f06f 008b 	mvn.w	r0, #139	; 0x8b
	return result;
    182c:	e7f6      	b.n	181c <nrf_flash_sync_exe+0xc4>
    182e:	bf00      	nop
    1830:	1afd498d 	.word	0x1afd498d
    1834:	00000007 	.word	0x00000007
    1838:	20002c40 	.word	0x20002c40
    183c:	3b9aca00 	.word	0x3b9aca00
    1840:	00016309 	.word	0x00016309
    1844:	1afd498d 	.word	0x1afd498d
    1848:	000b7b44 	.word	0x000b7b44
    184c:	20002c50 	.word	0x20002c50

00001850 <nrf_flash_sync_check_time_limit>:
{
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
    1850:	b538      	push	{r3, r4, r5, lr}
	uint32_t ticks_diff;

	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
    1852:	4d0f      	ldr	r5, [pc, #60]	; (1890 <nrf_flash_sync_check_time_limit+0x40>)
{
    1854:	4604      	mov	r4, r0
	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
    1856:	f01b faa9 	bl	1cdac <ticker_ticks_now_get>
    185a:	68a9      	ldr	r1, [r5, #8]
    185c:	f01b faa8 	bl	1cdb0 <ticker_ticks_diff_get>
					   _ticker_sync_context.ticks_begin);
	if (ticks_diff + ticks_diff/iteration >
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
    1860:	6869      	ldr	r1, [r5, #4]
	if (ticks_diff + ticks_diff/iteration >
    1862:	fbb0 f4f4 	udiv	r4, r0, r4
    1866:	4404      	add	r4, r0
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
    1868:	480a      	ldr	r0, [pc, #40]	; (1894 <nrf_flash_sync_check_time_limit+0x44>)
    186a:	a307      	add	r3, pc, #28	; (adr r3, 1888 <nrf_flash_sync_check_time_limit+0x38>)
    186c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1870:	fba1 0100 	umull	r0, r1, r1, r0
    1874:	f7fe fc84 	bl	180 <__aeabi_uldivmod>
    1878:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return true;
	}

	return false;
}
    187c:	4284      	cmp	r4, r0
    187e:	bf94      	ite	ls
    1880:	2000      	movls	r0, #0
    1882:	2001      	movhi	r0, #1
    1884:	bd38      	pop	{r3, r4, r5, pc}
    1886:	bf00      	nop
    1888:	1afd498d 	.word	0x1afd498d
    188c:	00000007 	.word	0x00000007
    1890:	20002c40 	.word	0x20002c40
    1894:	3b9aca00 	.word	0x3b9aca00

00001898 <when>:
//==============================================================================
// when callback
//==============================================================================

  int when(BL_ob *o, int val)
  {
    1898:	b508      	push	{r3, lr}
    189a:	460b      	mov	r3, r1
    switch (o->op)
    189c:	6841      	ldr	r1, [r0, #4]
    189e:	290a      	cmp	r1, #10
  {
    18a0:	4602      	mov	r2, r0
    switch (o->op)
    18a2:	d103      	bne.n	18ac <when+0x14>
    {
      case OP_TICK:
        bl_logo(1,BL_G"when",o,val);
    18a4:	4902      	ldr	r1, [pc, #8]	; (18b0 <when+0x18>)
    18a6:	2001      	movs	r0, #1
    18a8:	f000 f94a 	bl	1b40 <bl_logo>
        return 0;
    }
    return 0;
  }
    18ac:	2000      	movs	r0, #0
    18ae:	bd08      	pop	{r3, pc}
    18b0:	0001f858 	.word	0x0001f858

000018b4 <main>:
// framework engine
//==============================================================================

  void main(void)
  {
    bl_init(NULL,NULL,2);              // Bluccino init (no callback passing)
    18b4:	2100      	movs	r1, #0
    18b6:	4608      	mov	r0, r1
  {
    18b8:	b508      	push	{r3, lr}
    bl_init(NULL,NULL,2);              // Bluccino init (no callback passing)
    18ba:	2202      	movs	r2, #2
    18bc:	f000 f890 	bl	19e0 <bl_init>
    bl_init(timer,when,0);             // TIMER init (pass 'when' callback)
    18c0:	4907      	ldr	r1, [pc, #28]	; (18e0 <main+0x2c>)
    18c2:	4808      	ldr	r0, [pc, #32]	; (18e4 <main+0x30>)
    init();                            // app init

    for(;;)
    {
      bl_loop(NULL);                   // run Bluccino loop
      bl_loop(timer);                  // run TIMER loop
    18c4:	4c07      	ldr	r4, [pc, #28]	; (18e4 <main+0x30>)
    bl_init(timer,when,0);             // TIMER init (pass 'when' callback)
    18c6:	2200      	movs	r2, #0
    18c8:	f000 f88a 	bl	19e0 <bl_init>
      bl_loop(NULL);                   // run Bluccino loop
    18cc:	2000      	movs	r0, #0
    18ce:	f000 f8a9 	bl	1a24 <bl_loop>
      bl_loop(timer);                  // run TIMER loop
    18d2:	4620      	mov	r0, r4
    18d4:	f000 f8a6 	bl	1a24 <bl_loop>
     bl_sleep(10);                     // sleep 10 ms
    18d8:	200a      	movs	r0, #10
    18da:	f017 f89d 	bl	18a18 <bl_sleep>
    18de:	e7f5      	b.n	18cc <main+0x18>
    18e0:	00001899 	.word	0x00001899
    18e4:	000018e9 	.word	0x000018e9

000018e8 <timer>:
//==============================================================================
// public interface
//==============================================================================

  int timer(BL_ob *o, int val)
  {
    18e8:	b510      	push	{r4, lr}
    18ea:	4604      	mov	r4, r0
    switch (o->op)
    18ec:	6840      	ldr	r0, [r0, #4]
    18ee:	2801      	cmp	r0, #1
  {
    18f0:	460b      	mov	r3, r1
    switch (o->op)
    18f2:	d003      	beq.n	18fc <timer+0x14>
    18f4:	2802      	cmp	r0, #2
    18f6:	d009      	beq.n	190c <timer+0x24>
          time += 1000;                    // next time = current time + 1000 ms
        }
        break;
    }
    return 0;
  }
    18f8:	2000      	movs	r0, #0
    18fa:	bd10      	pop	{r4, pc}
        bl_logo(1,BL_B"timer",o,val);
    18fc:	4622      	mov	r2, r4
    18fe:	4912      	ldr	r1, [pc, #72]	; (1948 <timer+0x60>)
    1900:	f000 f91e 	bl	1b40 <bl_logo>
        notify = o->data;
    1904:	4b11      	ldr	r3, [pc, #68]	; (194c <timer+0x64>)
    1906:	68e2      	ldr	r2, [r4, #12]
    1908:	601a      	str	r2, [r3, #0]
        break;
    190a:	e7f5      	b.n	18f8 <timer+0x10>
        if (bl_ms() >= time)
    190c:	4c10      	ldr	r4, [pc, #64]	; (1950 <timer+0x68>)
    190e:	f017 f87a 	bl	18a06 <bl_ms>
    1912:	e9d4 3200 	ldrd	r3, r2, [r4]
    1916:	4298      	cmp	r0, r3
    1918:	eb71 0202 	sbcs.w	r2, r1, r2
    191c:	dbec      	blt.n	18f8 <timer+0x10>
          bl_logo(3,"loop",&tim,time);
    191e:	4a0d      	ldr	r2, [pc, #52]	; (1954 <timer+0x6c>)
    1920:	490d      	ldr	r1, [pc, #52]	; (1958 <timer+0x70>)
    1922:	2003      	movs	r0, #3
    1924:	f000 f90c 	bl	1b40 <bl_logo>
          bl_out(&tim,time,notify);        // emit tick message
    1928:	4b08      	ldr	r3, [pc, #32]	; (194c <timer+0x64>)
    192a:	6821      	ldr	r1, [r4, #0]
    192c:	681a      	ldr	r2, [r3, #0]
    192e:	4809      	ldr	r0, [pc, #36]	; (1954 <timer+0x6c>)
    1930:	f000 f83e 	bl	19b0 <bl_out>
          time += 1000;                    // next time = current time + 1000 ms
    1934:	e9d4 3200 	ldrd	r3, r2, [r4]
    1938:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
    193c:	f142 0200 	adc.w	r2, r2, #0
    1940:	e9c4 3200 	strd	r3, r2, [r4]
    1944:	e7d8      	b.n	18f8 <timer+0x10>
    1946:	bf00      	nop
    1948:	0001f862 	.word	0x0001f862
    194c:	20001898 	.word	0x20001898
    1950:	20000d78 	.word	0x20000d78
    1954:	20000260 	.word	0x20000260
    1958:	0001f86d 	.word	0x0001f86d

0000195c <when_core>:
//==============================================================================
// core message callback
//==============================================================================

  static int when_core(BL_ob *o, int val)
  {
    195c:	b510      	push	{r4, lr}
    195e:	4602      	mov	r2, r0
    1960:	460c      	mov	r4, r1
    bl_logo(2,"@api",o,val);
    1962:	460b      	mov	r3, r1
    1964:	2002      	movs	r0, #2
    1966:	4902      	ldr	r1, [pc, #8]	; (1970 <when_core+0x14>)
    1968:	f000 f8ea 	bl	1b40 <bl_logo>
    return val;
  }
    196c:	4620      	mov	r0, r4
    196e:	bd10      	pop	{r4, pc}
    1970:	0001f872 	.word	0x0001f872

00001974 <bl_us>:
  {
    1974:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
    1976:	f01d f821 	bl	1e9bc <z_impl_k_uptime_ticks>
    return (BL_us)((1000000*cyc)/f);
    197a:	4a0b      	ldr	r2, [pc, #44]	; (19a8 <bl_us+0x34>)
    197c:	fba0 0302 	umull	r0, r3, r0, r2
    1980:	fb02 3101 	mla	r1, r2, r1, r3
    if (offset == 0)                        // first call always returns 0
    1984:	4b09      	ldr	r3, [pc, #36]	; (19ac <bl_us+0x38>)
    1986:	e9d3 4200 	ldrd	r4, r2, [r3]
    return (BL_us)((1000000*cyc)/f);
    198a:	0bc0      	lsrs	r0, r0, #15
    if (offset == 0)                        // first call always returns 0
    198c:	4322      	orrs	r2, r4
    return (BL_us)((1000000*cyc)/f);
    198e:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    1992:	ea4f 31d1 	mov.w	r1, r1, lsr #15
      offset = us;
    1996:	bf08      	it	eq
    1998:	e9c3 0100 	strdeq	r0, r1, [r3]
    return us  - offset;
    199c:	e9d3 2300 	ldrd	r2, r3, [r3]
    19a0:	1a80      	subs	r0, r0, r2
    19a2:	eb61 0103 	sbc.w	r1, r1, r3
  }
    19a6:	bd10      	pop	{r4, pc}
    19a8:	000f4240 	.word	0x000f4240
    19ac:	20000d80 	.word	0x20000d80

000019b0 <bl_out>:
    if (driver)                        // if a driver callback has been provided
    19b0:	4b0a      	ldr	r3, [pc, #40]	; (19dc <bl_out+0x2c>)
    19b2:	681b      	ldr	r3, [r3, #0]
  {
    19b4:	b570      	push	{r4, r5, r6, lr}
    19b6:	4605      	mov	r5, r0
    19b8:	460e      	mov	r6, r1
    19ba:	4614      	mov	r4, r2
    if (driver)                        // if a driver callback has been provided
    19bc:	b913      	cbnz	r3, 19c4 <bl_out+0x14>
    if (cb)                            // is an app callback provided?
    19be:	b934      	cbnz	r4, 19ce <bl_out+0x1e>
    return 0;
    19c0:	4620      	mov	r0, r4
  }
    19c2:	bd70      	pop	{r4, r5, r6, pc}
      if ( driver(o,val) )             // could driver process the message?
    19c4:	4798      	blx	r3
    19c6:	2800      	cmp	r0, #0
    19c8:	d0f9      	beq.n	19be <bl_out+0xe>
        return 1;                      // yes? => then we are already done!
    19ca:	2001      	movs	r0, #1
    19cc:	e7f9      	b.n	19c2 <bl_out+0x12>
      return cb(o,val);                // forward event message to app
    19ce:	4631      	mov	r1, r6
    19d0:	4628      	mov	r0, r5
    19d2:	4623      	mov	r3, r4
  }
    19d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return cb(o,val);                // forward event message to app
    19d8:	4718      	bx	r3
    19da:	bf00      	nop
    19dc:	2000189c 	.word	0x2000189c

000019e0 <bl_init>:

    // bl_init(NULL,when,verbose)           // Bluccino API level loop
    // bl_init(bl_gear,when_core,0)         // initialize gear

  void bl_init(BL_fct module,BL_fct cb, int val)
  {
    19e0:	b508      	push	{r3, lr}
    19e2:	460b      	mov	r3, r1
    if (module)
    19e4:	4601      	mov	r1, r0
    19e6:	b128      	cbz	r0, 19f4 <bl_init+0x14>
      bl_sys(OP_INIT,module,cb);            // init module
    19e8:	461a      	mov	r2, r3
      bl_verbose(val);

      bl_sys(OP_INIT,bl_gear,bl_down);      // init gear
      bl_sys(OP_INIT,bl_core,when_core);    // init core
    }
  }
    19ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      bl_sys(OP_INIT,bl_core,when_core);    // init core
    19ee:	2001      	movs	r0, #1
    19f0:	f017 b825 	b.w	18a3e <bl_sys>
      notify = cb;
    19f4:	4906      	ldr	r1, [pc, #24]	; (1a10 <bl_init+0x30>)
      bl_verbose(val);
    19f6:	4610      	mov	r0, r2
      notify = cb;
    19f8:	600b      	str	r3, [r1, #0]
      bl_verbose(val);
    19fa:	f000 f829 	bl	1a50 <bl_verbose>
      bl_sys(OP_INIT,bl_gear,bl_down);      // init gear
    19fe:	4a05      	ldr	r2, [pc, #20]	; (1a14 <bl_init+0x34>)
    1a00:	4905      	ldr	r1, [pc, #20]	; (1a18 <bl_init+0x38>)
    1a02:	2001      	movs	r0, #1
    1a04:	f017 f81b 	bl	18a3e <bl_sys>
      bl_sys(OP_INIT,bl_core,when_core);    // init core
    1a08:	4a04      	ldr	r2, [pc, #16]	; (1a1c <bl_init+0x3c>)
    1a0a:	4905      	ldr	r1, [pc, #20]	; (1a20 <bl_init+0x40>)
    1a0c:	e7ed      	b.n	19ea <bl_init+0xa>
    1a0e:	bf00      	nop
    1a10:	200018a0 	.word	0x200018a0
    1a14:	00018a03 	.word	0x00018a03
    1a18:	000189fb 	.word	0x000189fb
    1a1c:	0000195d 	.word	0x0000195d
    1a20:	000189ff 	.word	0x000189ff

00001a24 <bl_loop>:

    // bl_loop(NULL)                        // Blucino API level loop
    // bl_loop(bl_core)                     // core level loop

  void bl_loop(BL_fct module)
  {
    1a24:	b510      	push	{r4, lr}
    if (module)
    1a26:	4604      	mov	r4, r0
    1a28:	b130      	cbz	r0, 1a38 <bl_loop+0x14>
      bl_sys(OP_LOOP,module,NULL);          // run specific module loop
    1a2a:	2200      	movs	r2, #0
    1a2c:	4601      	mov	r1, r0
    else
    {
      bl_sys(OP_LOOP,bl_gear,NULL);         // run gear loop
      bl_sys(OP_LOOP,bl_core,NULL);         // run core loop
    }
  }
    1a2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      bl_sys(OP_LOOP,bl_core,NULL);         // run core loop
    1a32:	2002      	movs	r0, #2
    1a34:	f017 b803 	b.w	18a3e <bl_sys>
      bl_sys(OP_LOOP,bl_gear,NULL);         // run gear loop
    1a38:	4602      	mov	r2, r0
    1a3a:	4903      	ldr	r1, [pc, #12]	; (1a48 <bl_loop+0x24>)
    1a3c:	2002      	movs	r0, #2
    1a3e:	f016 fffe 	bl	18a3e <bl_sys>
      bl_sys(OP_LOOP,bl_core,NULL);         // run core loop
    1a42:	4902      	ldr	r1, [pc, #8]	; (1a4c <bl_loop+0x28>)
    1a44:	4622      	mov	r2, r4
    1a46:	e7f2      	b.n	1a2e <bl_loop+0xa>
    1a48:	000189fb 	.word	0x000189fb
    1a4c:	000189ff 	.word	0x000189ff

00001a50 <bl_verbose>:
    color = attention ? BL_G : (provisioned ? BL_Y : "");
  }

  void bl_verbose(int verbose)              // set verbose level
  {
    debug = verbose;
    1a50:	4b01      	ldr	r3, [pc, #4]	; (1a58 <bl_verbose+0x8>)
    1a52:	6018      	str	r0, [r3, #0]
  }
    1a54:	4770      	bx	lr
    1a56:	bf00      	nop
    1a58:	200018a4 	.word	0x200018a4

00001a5c <bl_dbg>:
//==============================================================================
// debug tracing
//==============================================================================

  bool bl_dbg(int lev)
  {
    1a5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    if (lev > debug)
    1a60:	4b30      	ldr	r3, [pc, #192]	; (1b24 <bl_dbg+0xc8>)
    1a62:	681b      	ldr	r3, [r3, #0]
    1a64:	4283      	cmp	r3, r0
  {
    1a66:	4605      	mov	r5, r0
    if (lev > debug)
    1a68:	db59      	blt.n	1b1e <bl_dbg+0xc2>
    BL_us us = bl_us();                    // clock time now in us
    1a6a:	f7ff ff83 	bl	1974 <bl_us>
    *pus = us % 1000;                      // map us to range 0 .. 999
    1a6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1a72:	2300      	movs	r3, #0
    BL_us us = bl_us();                    // clock time now in us
    1a74:	4682      	mov	sl, r0
    1a76:	4689      	mov	r9, r1
    *pus = us % 1000;                      // map us to range 0 .. 999
    1a78:	f7fe fb32 	bl	e0 <__aeabi_ldivmod>
    *pms = us/1000 - offset;
    1a7c:	4f2a      	ldr	r7, [pc, #168]	; (1b28 <bl_dbg+0xcc>)
    1a7e:	2300      	movs	r3, #0
    *pus = us % 1000;                      // map us to range 0 .. 999
    1a80:	4616      	mov	r6, r2
    *pms = us/1000 - offset;
    1a82:	4650      	mov	r0, sl
    1a84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1a88:	4649      	mov	r1, r9
    1a8a:	f7fe fb29 	bl	e0 <__aeabi_ldivmod>
    1a8e:	e9d7 4800 	ldrd	r4, r8, [r7]
    1a92:	4a26      	ldr	r2, [pc, #152]	; (1b2c <bl_dbg+0xd0>)
    1a94:	f8d2 c000 	ldr.w	ip, [r2]
    1a98:	1b03      	subs	r3, r0, r4
    for (; *pms >= 1000; offset += 1000, sec++)
    1a9a:	4641      	mov	r1, r8
    1a9c:	f04f 0e00 	mov.w	lr, #0
    1aa0:	4620      	mov	r0, r4
    1aa2:	f514 747a 	adds.w	r4, r4, #1000	; 0x3e8
    1aa6:	4688      	mov	r8, r1
    1aa8:	f141 0100 	adc.w	r1, r1, #0
    1aac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    1ab0:	46e1      	mov	r9, ip
    1ab2:	f10c 0c01 	add.w	ip, ip, #1
    1ab6:	da25      	bge.n	1b04 <bl_dbg+0xa8>
    1ab8:	f1be 0f00 	cmp.w	lr, #0
    1abc:	d003      	beq.n	1ac6 <bl_dbg+0x6a>
    1abe:	e9c7 0800 	strd	r0, r8, [r7]
    1ac2:	f8c2 9000 	str.w	r9, [r2]
    1ac6:	481a      	ldr	r0, [pc, #104]	; (1b30 <bl_dbg+0xd4>)
    1ac8:	6811      	ldr	r1, [r2, #0]
    1aca:	6804      	ldr	r4, [r0, #0]
      sec -= 60;
    1acc:	2700      	movs	r7, #0
    for (; sec >= 60; min++)
    1ace:	293b      	cmp	r1, #59	; 0x3b
    1ad0:	46a4      	mov	ip, r4
    1ad2:	f104 0401 	add.w	r4, r4, #1
    1ad6:	dc1a      	bgt.n	1b0e <bl_dbg+0xb2>
    1ad8:	b117      	cbz	r7, 1ae0 <bl_dbg+0x84>
    1ada:	6011      	str	r1, [r2, #0]
    1adc:	f8c0 c000 	str.w	ip, [r0]
    now(&min,&sec,&ms,&us);

      // print header in green if in attention mode,
      // yellow if node is provisioned, otherwise white by default

    printk("%s#%d[%03d:%02d:%03d.%03d] " BL_0, color,lev, min,sec,ms,us);
    1ae0:	e9cd 3601 	strd	r3, r6, [sp, #4]
    1ae4:	9100      	str	r1, [sp, #0]
    1ae6:	4913      	ldr	r1, [pc, #76]	; (1b34 <bl_dbg+0xd8>)
    1ae8:	6803      	ldr	r3, [r0, #0]
    1aea:	6809      	ldr	r1, [r1, #0]
    1aec:	4812      	ldr	r0, [pc, #72]	; (1b38 <bl_dbg+0xdc>)

    for (int i=0; i < lev; i++)
    {
      printk("  ");                   // indentation
    1aee:	4e13      	ldr	r6, [pc, #76]	; (1b3c <bl_dbg+0xe0>)
    printk("%s#%d[%03d:%02d:%03d.%03d] " BL_0, color,lev, min,sec,ms,us);
    1af0:	462a      	mov	r2, r5
    1af2:	f017 f867 	bl	18bc4 <printk>
    for (int i=0; i < lev; i++)
    1af6:	2400      	movs	r4, #0
    1af8:	42a5      	cmp	r5, r4
    1afa:	dc0b      	bgt.n	1b14 <bl_dbg+0xb8>
    1afc:	2001      	movs	r0, #1
    }

    return true;
  }
    1afe:	b004      	add	sp, #16
    1b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      *pms -= 1000;
    1b04:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
    1b08:	f04f 0e01 	mov.w	lr, #1
    1b0c:	e7c8      	b.n	1aa0 <bl_dbg+0x44>
      sec -= 60;
    1b0e:	393c      	subs	r1, #60	; 0x3c
    1b10:	2701      	movs	r7, #1
    1b12:	e7dc      	b.n	1ace <bl_dbg+0x72>
      printk("  ");                   // indentation
    1b14:	4630      	mov	r0, r6
    1b16:	f017 f855 	bl	18bc4 <printk>
    for (int i=0; i < lev; i++)
    1b1a:	3401      	adds	r4, #1
    1b1c:	e7ec      	b.n	1af8 <bl_dbg+0x9c>
      return false;
    1b1e:	2000      	movs	r0, #0
    1b20:	e7ed      	b.n	1afe <bl_dbg+0xa2>
    1b22:	bf00      	nop
    1b24:	200018a4 	.word	0x200018a4
    1b28:	20000d88 	.word	0x20000d88
    1b2c:	200018ac 	.word	0x200018ac
    1b30:	200018a8 	.word	0x200018a8
    1b34:	20000270 	.word	0x20000270
    1b38:	0001f883 	.word	0x0001f883
    1b3c:	0001fa28 	.word	0x0001fa28

00001b40 <bl_logo>:
    msg = (msg[0] == '@') ? msg+1 : msg;
    printk("%s%s: @%d,%d\n"BL_0, col, msg, id,value);
  }

  void bl_logo(int lev, BL_txt msg, BL_ob *o, int value) // log event message
  {
    1b40:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    1b42:	460c      	mov	r4, r1
    1b44:	4615      	mov	r5, r2
    1b46:	461e      	mov	r6, r3
    if ( !bl_dbg(lev) )
    1b48:	f7ff ff88 	bl	1a5c <bl_dbg>
    1b4c:	b308      	cbz	r0, 1b92 <bl_logo+0x52>
     return;

    BL_txt col = (msg[0] != '@') ? "" : (value ? BL_G : BL_M);
    1b4e:	7823      	ldrb	r3, [r4, #0]
    1b50:	2b40      	cmp	r3, #64	; 0x40
    1b52:	d120      	bne.n	1b96 <bl_logo+0x56>
    1b54:	4911      	ldr	r1, [pc, #68]	; (1b9c <bl_logo+0x5c>)
    1b56:	4b12      	ldr	r3, [pc, #72]	; (1ba0 <bl_logo+0x60>)
    msg = (msg[0] == '@') ? msg+1 : msg;
    1b58:	3401      	adds	r4, #1
    BL_txt col = (msg[0] != '@') ? "" : (value ? BL_G : BL_M);
    1b5a:	2e00      	cmp	r6, #0
    1b5c:	bf08      	it	eq
    1b5e:	4619      	moveq	r1, r3

    #if CFG_PRETTY_LOGGING             // pretty text for class tag & opcode
      printk("%s%s [%s:%s @%d (%d)]\n"BL_0, col,msg,
    1b60:	782b      	ldrb	r3, [r5, #0]
    1b62:	9602      	str	r6, [sp, #8]
    return (cl < BL_LENGTH(text)) ? text[cl] : "???";
    1b64:	2b13      	cmp	r3, #19
    1b66:	bf96      	itet	ls
    1b68:	4a0e      	ldrls	r2, [pc, #56]	; (1ba4 <bl_logo+0x64>)
    1b6a:	4b0f      	ldrhi	r3, [pc, #60]	; (1ba8 <bl_logo+0x68>)
    1b6c:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
    op = (op < 0) ? -op : op;
    1b70:	686a      	ldr	r2, [r5, #4]
    1b72:	2a00      	cmp	r2, #0
    1b74:	bfb8      	it	lt
    1b76:	4252      	neglt	r2, r2
    return (op < BL_LENGTH(text)) ? text[op] : "???";
    1b78:	2a14      	cmp	r2, #20
    1b7a:	bf96      	itet	ls
    1b7c:	480b      	ldrls	r0, [pc, #44]	; (1bac <bl_logo+0x6c>)
    1b7e:	4a0a      	ldrhi	r2, [pc, #40]	; (1ba8 <bl_logo+0x68>)
    1b80:	f850 2022 	ldrls.w	r2, [r0, r2, lsl #2]
      printk("%s%s [%s:%s @%d (%d)]\n"BL_0, col,msg,
    1b84:	68a8      	ldr	r0, [r5, #8]
    1b86:	e9cd 2000 	strd	r2, r0, [sp]
    1b8a:	4809      	ldr	r0, [pc, #36]	; (1bb0 <bl_logo+0x70>)
    1b8c:	4622      	mov	r2, r4
    1b8e:	f017 f819 	bl	18bc4 <printk>
             cltext(o->cl),optext(o->op),o->id,value);
    #else
      printk("%s%s [%d:%d @%d (%d)]\n"BL_0,col,msg,
             o->cl,o->op, o->id,value);
    #endif
  }
    1b92:	b004      	add	sp, #16
    1b94:	bd70      	pop	{r4, r5, r6, pc}
    BL_txt col = (msg[0] != '@') ? "" : (value ? BL_G : BL_M);
    1b96:	4907      	ldr	r1, [pc, #28]	; (1bb4 <bl_logo+0x74>)
    1b98:	e7e2      	b.n	1b60 <bl_logo+0x20>
    1b9a:	bf00      	nop
    1b9c:	0001f87d 	.word	0x0001f87d
    1ba0:	0001f8a3 	.word	0x0001f8a3
    1ba4:	0001f2ac 	.word	0x0001f2ac
    1ba8:	0001f8b7 	.word	0x0001f8b7
    1bac:	0001f258 	.word	0x0001f258
    1bb0:	0001f8bb 	.word	0x0001f8bb
    1bb4:	00021df5 	.word	0x00021df5

00001bb8 <__printk_hook_install>:
 *
 * @return N/A
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
    1bb8:	4b01      	ldr	r3, [pc, #4]	; (1bc0 <__printk_hook_install+0x8>)
    1bba:	6018      	str	r0, [r3, #0]
}
    1bbc:	4770      	bx	lr
    1bbe:	bf00      	nop
    1bc0:	20000274 	.word	0x20000274

00001bc4 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    1bc4:	b530      	push	{r4, r5, lr}
    1bc6:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    1bc8:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    1bcc:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    1bce:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    1bd0:	a901      	add	r1, sp, #4
    1bd2:	4805      	ldr	r0, [pc, #20]	; (1be8 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    1bd4:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    1bd6:	f000 f8e9 	bl	1dac <cbvprintf>

	if (ctx.count < ctx.max) {
    1bda:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    1bde:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    1be0:	bfb8      	it	lt
    1be2:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    1be4:	b005      	add	sp, #20
    1be6:	bd30      	pop	{r4, r5, pc}
    1be8:	00018b9f 	.word	0x00018b9f

00001bec <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1bec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1bf0:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1bf4:	f019 0808 	ands.w	r8, r9, #8
{
    1bf8:	4604      	mov	r4, r0
    1bfa:	4693      	mov	fp, r2
	if (processing) {
    1bfc:	d00d      	beq.n	1c1a <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    1bfe:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1c00:	bf0c      	ite	eq
    1c02:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    1c06:	f049 0920 	orrne.w	r9, r9, #32
    1c0a:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1c0e:	f38b 8811 	msr	BASEPRI, fp
    1c12:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    1c16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1c1a:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    1c1e:	2902      	cmp	r1, #2
    1c20:	d107      	bne.n	1c32 <process_event+0x46>
			evt = process_recheck(mgr);
    1c22:	4620      	mov	r0, r4
    1c24:	f016 ffe8 	bl	18bf8 <process_recheck>
		if (evt == EVT_NOP) {
    1c28:	2800      	cmp	r0, #0
    1c2a:	d0f0      	beq.n	1c0e <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    1c2c:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1c2e:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
    1c30:	d14e      	bne.n	1cd0 <process_event+0xe4>
			res = mgr->last_res;
    1c32:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1c34:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    1c36:	2f00      	cmp	r7, #0
    1c38:	da15      	bge.n	1c66 <process_event+0x7a>
		*clients = mgr->clients;
    1c3a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1c3c:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    1c40:	e9c4 8800 	strd	r8, r8, [r4]
    1c44:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1c48:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    1c4a:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1c4c:	8b21      	ldrh	r1, [r4, #24]
    1c4e:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1c52:	45ca      	cmp	sl, r9
    1c54:	d002      	beq.n	1c5c <process_event+0x70>
		if (do_monitors
    1c56:	68a3      	ldr	r3, [r4, #8]
    1c58:	2b00      	cmp	r3, #0
    1c5a:	d15a      	bne.n	1d12 <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    1c5c:	b90d      	cbnz	r5, 1c62 <process_event+0x76>
		    || (transit != NULL)) {
    1c5e:	2e00      	cmp	r6, #0
    1c60:	d071      	beq.n	1d46 <process_event+0x15a>
    1c62:	2300      	movs	r3, #0
    1c64:	e056      	b.n	1d14 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1c66:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    1c6a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1c6c:	2a01      	cmp	r2, #1
    1c6e:	d81e      	bhi.n	1cae <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1c70:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    1c74:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    1c76:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1c78:	b289      	uxth	r1, r1
    1c7a:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1c7e:	d10a      	bne.n	1c96 <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1c80:	b13d      	cbz	r5, 1c92 <process_event+0xa6>
    1c82:	8b63      	ldrh	r3, [r4, #26]
    1c84:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    1c86:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    1c88:	3301      	adds	r3, #1
    1c8a:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1c8c:	2a00      	cmp	r2, #0
    1c8e:	d1fa      	bne.n	1c86 <process_event+0x9a>
    1c90:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1c92:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    1c96:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1c98:	4620      	mov	r0, r4
    1c9a:	f016 ffad 	bl	18bf8 <process_recheck>
    1c9e:	4606      	mov	r6, r0
    1ca0:	2800      	cmp	r0, #0
    1ca2:	d0d3      	beq.n	1c4c <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1ca4:	8b23      	ldrh	r3, [r4, #24]
    1ca6:	f043 0320 	orr.w	r3, r3, #32
    1caa:	8323      	strh	r3, [r4, #24]
    1cac:	e7cd      	b.n	1c4a <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1cae:	2b04      	cmp	r3, #4
    1cb0:	d10c      	bne.n	1ccc <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1cb2:	f021 0107 	bic.w	r1, r1, #7
    1cb6:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1cb8:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1cba:	4620      	mov	r0, r4
    1cbc:	f016 ff9c 	bl	18bf8 <process_recheck>
    1cc0:	4605      	mov	r5, r0
    1cc2:	2800      	cmp	r0, #0
    1cc4:	d0c1      	beq.n	1c4a <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1cc6:	f041 0120 	orr.w	r1, r1, #32
    1cca:	8321      	strh	r1, [r4, #24]
    1ccc:	2500      	movs	r5, #0
    1cce:	e7bc      	b.n	1c4a <process_event+0x5e>
		} else if (evt == EVT_START) {
    1cd0:	2803      	cmp	r0, #3
    1cd2:	d109      	bne.n	1ce8 <process_event+0xfc>
			transit = mgr->transitions->start;
    1cd4:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1cd6:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    1cda:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1cdc:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    1ce0:	8323      	strh	r3, [r4, #24]
}
    1ce2:	2500      	movs	r5, #0
		res = 0;
    1ce4:	462f      	mov	r7, r5
    1ce6:	e7b1      	b.n	1c4c <process_event+0x60>
		} else if (evt == EVT_STOP) {
    1ce8:	2804      	cmp	r0, #4
    1cea:	d106      	bne.n	1cfa <process_event+0x10e>
			transit = mgr->transitions->stop;
    1cec:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1cee:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    1cf2:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1cf4:	f043 0304 	orr.w	r3, r3, #4
    1cf8:	e7f2      	b.n	1ce0 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    1cfa:	2805      	cmp	r0, #5
    1cfc:	d106      	bne.n	1d0c <process_event+0x120>
			transit = mgr->transitions->reset;
    1cfe:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1d00:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    1d04:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1d06:	f043 0305 	orr.w	r3, r3, #5
    1d0a:	e7e9      	b.n	1ce0 <process_event+0xf4>
    1d0c:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    1d0e:	462e      	mov	r6, r5
    1d10:	e7e8      	b.n	1ce4 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    1d12:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1d14:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1d18:	8321      	strh	r1, [r4, #24]
    1d1a:	f38b 8811 	msr	BASEPRI, fp
    1d1e:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    1d22:	b9fb      	cbnz	r3, 1d64 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
    1d24:	bb85      	cbnz	r5, 1d88 <process_event+0x19c>
			if (transit != NULL) {
    1d26:	b116      	cbz	r6, 1d2e <process_event+0x142>
				transit(mgr, transition_complete);
    1d28:	491f      	ldr	r1, [pc, #124]	; (1da8 <process_event+0x1bc>)
    1d2a:	4620      	mov	r0, r4
    1d2c:	47b0      	blx	r6
	__asm__ volatile(
    1d2e:	f04f 0320 	mov.w	r3, #32
    1d32:	f3ef 8b11 	mrs	fp, BASEPRI
    1d36:	f383 8812 	msr	BASEPRI_MAX, r3
    1d3a:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1d3e:	8b23      	ldrh	r3, [r4, #24]
    1d40:	f023 0308 	bic.w	r3, r3, #8
    1d44:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1d46:	8b23      	ldrh	r3, [r4, #24]
    1d48:	06da      	lsls	r2, r3, #27
    1d4a:	d525      	bpl.n	1d98 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1d4c:	f023 0310 	bic.w	r3, r3, #16
    1d50:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    1d52:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    1d54:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    1d58:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    1d5c:	2900      	cmp	r1, #0
    1d5e:	f47f af5e 	bne.w	1c1e <process_event+0x32>
out:
    1d62:	e754      	b.n	1c0e <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1d64:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1d66:	2900      	cmp	r1, #0
    1d68:	d0dc      	beq.n	1d24 <process_event+0x138>
	return node->next;
    1d6a:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    1d6e:	f8d1 b004 	ldr.w	fp, [r1, #4]
    1d72:	463b      	mov	r3, r7
    1d74:	4652      	mov	r2, sl
    1d76:	4620      	mov	r0, r4
    1d78:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1d7a:	f1b9 0f00 	cmp.w	r9, #0
    1d7e:	d0d1      	beq.n	1d24 <process_event+0x138>
    1d80:	4649      	mov	r1, r9
    1d82:	f8d9 9000 	ldr.w	r9, [r9]
    1d86:	e7f2      	b.n	1d6e <process_event+0x182>
    1d88:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    1d8a:	463b      	mov	r3, r7
    1d8c:	4652      	mov	r2, sl
    1d8e:	4620      	mov	r0, r4
    1d90:	682d      	ldr	r5, [r5, #0]
    1d92:	f016 ff4d 	bl	18c30 <notify_one>
    1d96:	e7c5      	b.n	1d24 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1d98:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1d9c:	bf1e      	ittt	ne
    1d9e:	f023 0320 	bicne.w	r3, r3, #32
    1da2:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    1da4:	2102      	movne	r1, #2
    1da6:	e7d5      	b.n	1d54 <process_event+0x168>
    1da8:	00018c5d 	.word	0x00018c5d

00001dac <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    1dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1db0:	b091      	sub	sp, #68	; 0x44
    1db2:	468b      	mov	fp, r1
    1db4:	9002      	str	r0, [sp, #8]
    1db6:	4692      	mov	sl, r2
    1db8:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    1dba:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    1dbc:	f89a 0000 	ldrb.w	r0, [sl]
    1dc0:	b908      	cbnz	r0, 1dc6 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    1dc2:	4628      	mov	r0, r5
    1dc4:	e35f      	b.n	2486 <cbvprintf+0x6da>
		if (*fp != '%') {
    1dc6:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    1dc8:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
    1dcc:	d007      	beq.n	1dde <cbvprintf+0x32>
			OUTC('%');
    1dce:	9b02      	ldr	r3, [sp, #8]
    1dd0:	4659      	mov	r1, fp
    1dd2:	4798      	blx	r3
    1dd4:	2800      	cmp	r0, #0
    1dd6:	f2c0 8356 	blt.w	2486 <cbvprintf+0x6da>
    1dda:	3501      	adds	r5, #1
			break;
    1ddc:	e212      	b.n	2204 <cbvprintf+0x458>
		} state = {
    1dde:	2218      	movs	r2, #24
    1de0:	2100      	movs	r1, #0
    1de2:	a80a      	add	r0, sp, #40	; 0x28
    1de4:	f018 fa56 	bl	1a294 <memset>
	if (*sp == '%') {
    1de8:	f89a 3001 	ldrb.w	r3, [sl, #1]
    1dec:	2b25      	cmp	r3, #37	; 0x25
    1dee:	d078      	beq.n	1ee2 <cbvprintf+0x136>
    1df0:	2200      	movs	r2, #0
    1df2:	4610      	mov	r0, r2
    1df4:	4696      	mov	lr, r2
    1df6:	4694      	mov	ip, r2
    1df8:	4616      	mov	r6, r2
    1dfa:	4639      	mov	r1, r7
		switch (*sp) {
    1dfc:	f817 3b01 	ldrb.w	r3, [r7], #1
    1e00:	2b2b      	cmp	r3, #43	; 0x2b
    1e02:	f000 809d 	beq.w	1f40 <cbvprintf+0x194>
    1e06:	f200 8094 	bhi.w	1f32 <cbvprintf+0x186>
    1e0a:	2b20      	cmp	r3, #32
    1e0c:	f000 809b 	beq.w	1f46 <cbvprintf+0x19a>
    1e10:	2b23      	cmp	r3, #35	; 0x23
    1e12:	f000 809b 	beq.w	1f4c <cbvprintf+0x1a0>
    1e16:	b12e      	cbz	r6, 1e24 <cbvprintf+0x78>
    1e18:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    1e1c:	f046 0604 	orr.w	r6, r6, #4
    1e20:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    1e24:	f1bc 0f00 	cmp.w	ip, #0
    1e28:	d005      	beq.n	1e36 <cbvprintf+0x8a>
    1e2a:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    1e2e:	f046 0608 	orr.w	r6, r6, #8
    1e32:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    1e36:	f1be 0f00 	cmp.w	lr, #0
    1e3a:	d005      	beq.n	1e48 <cbvprintf+0x9c>
    1e3c:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    1e40:	f046 0610 	orr.w	r6, r6, #16
    1e44:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    1e48:	b128      	cbz	r0, 1e56 <cbvprintf+0xaa>
    1e4a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    1e4e:	f040 0020 	orr.w	r0, r0, #32
    1e52:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    1e56:	b12a      	cbz	r2, 1e64 <cbvprintf+0xb8>
    1e58:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1e5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    1e60:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    1e64:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1e68:	f002 0044 	and.w	r0, r2, #68	; 0x44
    1e6c:	2844      	cmp	r0, #68	; 0x44
    1e6e:	d103      	bne.n	1e78 <cbvprintf+0xcc>
		conv->flag_zero = false;
    1e70:	f36f 1286 	bfc	r2, #6, #1
    1e74:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    1e78:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    1e7c:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    1e7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    1e82:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    1e86:	d17b      	bne.n	1f80 <cbvprintf+0x1d4>
		conv->width_star = true;
    1e88:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1e8c:	f042 0201 	orr.w	r2, r2, #1
			++sp;
    1e90:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    1e92:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    1e96:	781a      	ldrb	r2, [r3, #0]
    1e98:	2a2e      	cmp	r2, #46	; 0x2e
    1e9a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1e9e:	bf0c      	ite	eq
    1ea0:	2101      	moveq	r1, #1
    1ea2:	2100      	movne	r1, #0
    1ea4:	f361 0241 	bfi	r2, r1, #1, #1
    1ea8:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    1eac:	d174      	bne.n	1f98 <cbvprintf+0x1ec>
	if (*sp == '*') {
    1eae:	785a      	ldrb	r2, [r3, #1]
    1eb0:	2a2a      	cmp	r2, #42	; 0x2a
    1eb2:	d06a      	beq.n	1f8a <cbvprintf+0x1de>
	++sp;
    1eb4:	3301      	adds	r3, #1
	size_t val = 0;
    1eb6:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    1eb8:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    1eba:	4618      	mov	r0, r3
    1ebc:	f810 2b01 	ldrb.w	r2, [r0], #1
    1ec0:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1ec4:	2f09      	cmp	r7, #9
    1ec6:	f240 808e 	bls.w	1fe6 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    1eca:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    1ece:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    1ed0:	f3c2 0040 	ubfx	r0, r2, #1, #1
    1ed4:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    1ed8:	f361 0241 	bfi	r2, r1, #1, #1
    1edc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    1ee0:	e05a      	b.n	1f98 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    1ee2:	f10a 0702 	add.w	r7, sl, #2
    1ee6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    1eea:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1eee:	07d9      	lsls	r1, r3, #31
    1ef0:	f140 8149 	bpl.w	2186 <cbvprintf+0x3da>
			width = va_arg(ap, int);
    1ef4:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    1ef8:	f1b9 0f00 	cmp.w	r9, #0
    1efc:	da07      	bge.n	1f0e <cbvprintf+0x162>
				conv->flag_dash = true;
    1efe:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1f02:	f042 0204 	orr.w	r2, r2, #4
    1f06:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
    1f0a:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
    1f0e:	075a      	lsls	r2, r3, #29
    1f10:	f140 8142 	bpl.w	2198 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
    1f14:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    1f18:	f1b8 0f00 	cmp.w	r8, #0
    1f1c:	f280 8141 	bge.w	21a2 <cbvprintf+0x3f6>
				conv->prec_present = false;
    1f20:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1f24:	f36f 0341 	bfc	r3, #1, #1
    1f28:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    1f2c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    1f30:	e137      	b.n	21a2 <cbvprintf+0x3f6>
		switch (*sp) {
    1f32:	2b2d      	cmp	r3, #45	; 0x2d
    1f34:	d00c      	beq.n	1f50 <cbvprintf+0x1a4>
    1f36:	2b30      	cmp	r3, #48	; 0x30
    1f38:	f47f af6d 	bne.w	1e16 <cbvprintf+0x6a>
			conv->flag_zero = true;
    1f3c:	2201      	movs	r2, #1
	} while (loop);
    1f3e:	e75c      	b.n	1dfa <cbvprintf+0x4e>
			conv->flag_plus = true;
    1f40:	f04f 0c01 	mov.w	ip, #1
    1f44:	e759      	b.n	1dfa <cbvprintf+0x4e>
			conv->flag_space = true;
    1f46:	f04f 0e01 	mov.w	lr, #1
    1f4a:	e756      	b.n	1dfa <cbvprintf+0x4e>
			conv->flag_hash = true;
    1f4c:	2001      	movs	r0, #1
    1f4e:	e754      	b.n	1dfa <cbvprintf+0x4e>
		switch (*sp) {
    1f50:	2601      	movs	r6, #1
    1f52:	e752      	b.n	1dfa <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    1f54:	fb0c 0202 	mla	r2, ip, r2, r0
    1f58:	3a30      	subs	r2, #48	; 0x30
    1f5a:	4633      	mov	r3, r6
    1f5c:	461e      	mov	r6, r3
    1f5e:	f816 0b01 	ldrb.w	r0, [r6], #1
    1f62:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1f66:	2f09      	cmp	r7, #9
    1f68:	d9f4      	bls.n	1f54 <cbvprintf+0x1a8>
	if (sp != wp) {
    1f6a:	4299      	cmp	r1, r3
    1f6c:	d093      	beq.n	1e96 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    1f6e:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    1f72:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    1f74:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    1f76:	f362 0141 	bfi	r1, r2, #1, #1
    1f7a:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    1f7e:	e78a      	b.n	1e96 <cbvprintf+0xea>
    1f80:	460b      	mov	r3, r1
	size_t val = 0;
    1f82:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1f84:	f04f 0c0a 	mov.w	ip, #10
    1f88:	e7e8      	b.n	1f5c <cbvprintf+0x1b0>
		conv->prec_star = true;
    1f8a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1f8e:	f042 0204 	orr.w	r2, r2, #4
    1f92:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    1f96:	3302      	adds	r3, #2
	switch (*sp) {
    1f98:	461f      	mov	r7, r3
    1f9a:	f817 2b01 	ldrb.w	r2, [r7], #1
    1f9e:	2a6c      	cmp	r2, #108	; 0x6c
    1fa0:	d041      	beq.n	2026 <cbvprintf+0x27a>
    1fa2:	d825      	bhi.n	1ff0 <cbvprintf+0x244>
    1fa4:	2a68      	cmp	r2, #104	; 0x68
    1fa6:	d02b      	beq.n	2000 <cbvprintf+0x254>
    1fa8:	2a6a      	cmp	r2, #106	; 0x6a
    1faa:	d046      	beq.n	203a <cbvprintf+0x28e>
    1fac:	2a4c      	cmp	r2, #76	; 0x4c
    1fae:	d04c      	beq.n	204a <cbvprintf+0x29e>
    1fb0:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    1fb2:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    1fb6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
    1fba:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    1fbe:	2a78      	cmp	r2, #120	; 0x78
    1fc0:	f200 80d9 	bhi.w	2176 <cbvprintf+0x3ca>
    1fc4:	2a57      	cmp	r2, #87	; 0x57
    1fc6:	d84d      	bhi.n	2064 <cbvprintf+0x2b8>
    1fc8:	2a41      	cmp	r2, #65	; 0x41
    1fca:	d003      	beq.n	1fd4 <cbvprintf+0x228>
    1fcc:	3a45      	subs	r2, #69	; 0x45
    1fce:	2a02      	cmp	r2, #2
    1fd0:	f200 80d1 	bhi.w	2176 <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    1fd4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1fd8:	2204      	movs	r2, #4
    1fda:	f362 0302 	bfi	r3, r2, #0, #3
    1fde:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    1fe2:	2301      	movs	r3, #1
			break;
    1fe4:	e09e      	b.n	2124 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
    1fe6:	fb06 2101 	mla	r1, r6, r1, r2
    1fea:	3930      	subs	r1, #48	; 0x30
    1fec:	4603      	mov	r3, r0
    1fee:	e764      	b.n	1eba <cbvprintf+0x10e>
	switch (*sp) {
    1ff0:	2a74      	cmp	r2, #116	; 0x74
    1ff2:	d026      	beq.n	2042 <cbvprintf+0x296>
    1ff4:	2a7a      	cmp	r2, #122	; 0x7a
    1ff6:	d1db      	bne.n	1fb0 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    1ff8:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1ffc:	2206      	movs	r2, #6
    1ffe:	e00d      	b.n	201c <cbvprintf+0x270>
		if (*++sp == 'h') {
    2000:	785a      	ldrb	r2, [r3, #1]
    2002:	2a68      	cmp	r2, #104	; 0x68
    2004:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    2008:	d106      	bne.n	2018 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
    200a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    200c:	f361 02c6 	bfi	r2, r1, #3, #4
    2010:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    2014:	1c9f      	adds	r7, r3, #2
    2016:	e7cc      	b.n	1fb2 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    2018:	4613      	mov	r3, r2
    201a:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    201c:	f362 03c6 	bfi	r3, r2, #3, #4
    2020:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    2024:	e7c5      	b.n	1fb2 <cbvprintf+0x206>
		if (*++sp == 'l') {
    2026:	785a      	ldrb	r2, [r3, #1]
    2028:	2a6c      	cmp	r2, #108	; 0x6c
    202a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    202e:	d101      	bne.n	2034 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
    2030:	2104      	movs	r1, #4
    2032:	e7eb      	b.n	200c <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
    2034:	4613      	mov	r3, r2
    2036:	2203      	movs	r2, #3
    2038:	e7f0      	b.n	201c <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
    203a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    203e:	2205      	movs	r2, #5
    2040:	e7ec      	b.n	201c <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
    2042:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    2046:	2207      	movs	r2, #7
    2048:	e7e8      	b.n	201c <cbvprintf+0x270>
		conv->unsupported = true;
    204a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    204e:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    2052:	f023 0302 	bic.w	r3, r3, #2
    2056:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    205a:	f043 0302 	orr.w	r3, r3, #2
    205e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    2062:	e7a6      	b.n	1fb2 <cbvprintf+0x206>
	switch (conv->specifier) {
    2064:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    2068:	2920      	cmp	r1, #32
    206a:	f200 8084 	bhi.w	2176 <cbvprintf+0x3ca>
    206e:	a001      	add	r0, pc, #4	; (adr r0, 2074 <cbvprintf+0x2c8>)
    2070:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    2074:	00002139 	.word	0x00002139
    2078:	00002177 	.word	0x00002177
    207c:	00002177 	.word	0x00002177
    2080:	00002177 	.word	0x00002177
    2084:	00002177 	.word	0x00002177
    2088:	00002177 	.word	0x00002177
    208c:	00002177 	.word	0x00002177
    2090:	00002177 	.word	0x00002177
    2094:	00002177 	.word	0x00002177
    2098:	00001fd5 	.word	0x00001fd5
    209c:	00002177 	.word	0x00002177
    20a0:	00002139 	.word	0x00002139
    20a4:	000020f9 	.word	0x000020f9
    20a8:	00001fd5 	.word	0x00001fd5
    20ac:	00001fd5 	.word	0x00001fd5
    20b0:	00001fd5 	.word	0x00001fd5
    20b4:	00002177 	.word	0x00002177
    20b8:	000020f9 	.word	0x000020f9
    20bc:	00002177 	.word	0x00002177
    20c0:	00002177 	.word	0x00002177
    20c4:	00002177 	.word	0x00002177
    20c8:	00002177 	.word	0x00002177
    20cc:	00002141 	.word	0x00002141
    20d0:	00002139 	.word	0x00002139
    20d4:	0000215d 	.word	0x0000215d
    20d8:	00002177 	.word	0x00002177
    20dc:	00002177 	.word	0x00002177
    20e0:	0000215d 	.word	0x0000215d
    20e4:	00002177 	.word	0x00002177
    20e8:	00002139 	.word	0x00002139
    20ec:	00002177 	.word	0x00002177
    20f0:	00002177 	.word	0x00002177
    20f4:	00002139 	.word	0x00002139
		conv->specifier_cat = SPECIFIER_SINT;
    20f8:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    20fc:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    20fe:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    2102:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    2106:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    2108:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    210c:	bf02      	ittt	eq
    210e:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    2112:	f041 0101 	orreq.w	r1, r1, #1
    2116:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    211a:	2a63      	cmp	r2, #99	; 0x63
    211c:	d131      	bne.n	2182 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    211e:	3b00      	subs	r3, #0
    2120:	bf18      	it	ne
    2122:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    2124:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    2128:	f3c2 0140 	ubfx	r1, r2, #1, #1
    212c:	430b      	orrs	r3, r1
    212e:	f363 0241 	bfi	r2, r3, #1, #1
    2132:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    2136:	e6d8      	b.n	1eea <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    2138:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    213c:	2002      	movs	r0, #2
    213e:	e7de      	b.n	20fe <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    2140:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    2144:	f003 0378 	and.w	r3, r3, #120	; 0x78
    2148:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    214c:	2103      	movs	r1, #3
    214e:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    2152:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    2154:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    2158:	4143      	adcs	r3, r0
    215a:	e7e3      	b.n	2124 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    215c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    2160:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    2162:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    2166:	f361 0202 	bfi	r2, r1, #0, #3
    216a:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    216e:	bf14      	ite	ne
    2170:	2301      	movne	r3, #1
    2172:	2300      	moveq	r3, #0
    2174:	e7d6      	b.n	2124 <cbvprintf+0x378>
		conv->invalid = true;
    2176:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    217a:	f043 0301 	orr.w	r3, r3, #1
    217e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    2182:	2300      	movs	r3, #0
    2184:	e7ce      	b.n	2124 <cbvprintf+0x378>
		} else if (conv->width_present) {
    2186:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    218a:	2a00      	cmp	r2, #0
			width = conv->width_value;
    218c:	bfb4      	ite	lt
    218e:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
    2192:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
    2196:	e6ba      	b.n	1f0e <cbvprintf+0x162>
		} else if (conv->prec_present) {
    2198:	079b      	lsls	r3, r3, #30
    219a:	f57f aec7 	bpl.w	1f2c <cbvprintf+0x180>
			precision = conv->prec_value;
    219e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    21a2:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    21a6:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    21a8:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    21ac:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    21b0:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    21b4:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    21b6:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    21ba:	d138      	bne.n	222e <cbvprintf+0x482>
			switch (length_mod) {
    21bc:	1ecb      	subs	r3, r1, #3
    21be:	2b04      	cmp	r3, #4
    21c0:	d822      	bhi.n	2208 <cbvprintf+0x45c>
    21c2:	e8df f003 	tbb	[pc, r3]
    21c6:	0903      	.short	0x0903
    21c8:	2109      	.short	0x2109
    21ca:	21          	.byte	0x21
    21cb:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    21cc:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    21d0:	17da      	asrs	r2, r3, #31
    21d2:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    21d6:	e006      	b.n	21e6 <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
    21d8:	3407      	adds	r4, #7
    21da:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    21de:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    21e2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    21e6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    21ea:	f013 0603 	ands.w	r6, r3, #3
    21ee:	d056      	beq.n	229e <cbvprintf+0x4f2>
			OUTS(sp, fp);
    21f0:	9802      	ldr	r0, [sp, #8]
    21f2:	463b      	mov	r3, r7
    21f4:	4652      	mov	r2, sl
    21f6:	4659      	mov	r1, fp
    21f8:	f017 f8c9 	bl	1938e <outs>
    21fc:	2800      	cmp	r0, #0
    21fe:	f2c0 8142 	blt.w	2486 <cbvprintf+0x6da>
    2202:	4405      	add	r5, r0
			continue;
    2204:	46ba      	mov	sl, r7
    2206:	e5d9      	b.n	1dbc <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    2208:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    220c:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    220e:	ea4f 72e3 	mov.w	r2, r3, asr #31
    2212:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    2216:	d105      	bne.n	2224 <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
    2218:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    221c:	930a      	str	r3, [sp, #40]	; 0x28
    221e:	2300      	movs	r3, #0
    2220:	930b      	str	r3, [sp, #44]	; 0x2c
    2222:	e7e0      	b.n	21e6 <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
    2224:	2902      	cmp	r1, #2
    2226:	d1de      	bne.n	21e6 <cbvprintf+0x43a>
				value->sint = (short)value->sint;
    2228:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
    222c:	e7d0      	b.n	21d0 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
    222e:	2b02      	cmp	r3, #2
    2230:	d123      	bne.n	227a <cbvprintf+0x4ce>
			switch (length_mod) {
    2232:	1ecb      	subs	r3, r1, #3
    2234:	2b04      	cmp	r3, #4
    2236:	d813      	bhi.n	2260 <cbvprintf+0x4b4>
    2238:	e8df f003 	tbb	[pc, r3]
    223c:	120a0a03 	.word	0x120a0a03
    2240:	12          	.byte	0x12
    2241:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    2242:	6822      	ldr	r2, [r4, #0]
    2244:	920a      	str	r2, [sp, #40]	; 0x28
    2246:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    2248:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    224a:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    224c:	4604      	mov	r4, r0
    224e:	e7ca      	b.n	21e6 <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
    2250:	1de0      	adds	r0, r4, #7
    2252:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    2256:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    225a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    225e:	e7f5      	b.n	224c <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
    2260:	f854 3b04 	ldr.w	r3, [r4], #4
    2264:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    2266:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    2268:	f04f 0300 	mov.w	r3, #0
    226c:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    226e:	d0d3      	beq.n	2218 <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
    2270:	2902      	cmp	r1, #2
    2272:	d1b8      	bne.n	21e6 <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
    2274:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    2278:	e7d0      	b.n	221c <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
    227a:	2b04      	cmp	r3, #4
    227c:	d109      	bne.n	2292 <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
    227e:	1de3      	adds	r3, r4, #7
    2280:	f023 0307 	bic.w	r3, r3, #7
    2284:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    2288:	e9d3 2300 	ldrd	r2, r3, [r3]
    228c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    2290:	e7a9      	b.n	21e6 <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    2292:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    2294:	bf04      	itt	eq
    2296:	f854 3b04 	ldreq.w	r3, [r4], #4
    229a:	930a      	streq	r3, [sp, #40]	; 0x28
    229c:	e7a3      	b.n	21e6 <cbvprintf+0x43a>
		switch (conv->specifier) {
    229e:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    22a2:	2878      	cmp	r0, #120	; 0x78
    22a4:	d8ae      	bhi.n	2204 <cbvprintf+0x458>
    22a6:	2862      	cmp	r0, #98	; 0x62
    22a8:	d822      	bhi.n	22f0 <cbvprintf+0x544>
    22aa:	2825      	cmp	r0, #37	; 0x25
    22ac:	f43f ad8f 	beq.w	1dce <cbvprintf+0x22>
    22b0:	2858      	cmp	r0, #88	; 0x58
    22b2:	d1a7      	bne.n	2204 <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
    22b4:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    22b8:	9300      	str	r3, [sp, #0]
    22ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    22be:	ab04      	add	r3, sp, #16
    22c0:	aa0c      	add	r2, sp, #48	; 0x30
    22c2:	f017 f81e 	bl	19302 <encode_uint>
    22c6:	4682      	mov	sl, r0
			if (precision >= 0) {
    22c8:	f1b8 0f00 	cmp.w	r8, #0
    22cc:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    22d0:	db0c      	blt.n	22ec <cbvprintf+0x540>
				conv->flag_zero = false;
    22d2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    22d6:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    22da:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    22de:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    22e0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    22e4:	d902      	bls.n	22ec <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
    22e6:	eba8 0303 	sub.w	r3, r8, r3
    22ea:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    22ec:	4680      	mov	r8, r0
    22ee:	e03d      	b.n	236c <cbvprintf+0x5c0>
		switch (conv->specifier) {
    22f0:	3863      	subs	r0, #99	; 0x63
    22f2:	2815      	cmp	r0, #21
    22f4:	d886      	bhi.n	2204 <cbvprintf+0x458>
    22f6:	a201      	add	r2, pc, #4	; (adr r2, 22fc <cbvprintf+0x550>)
    22f8:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    22fc:	0000237d 	.word	0x0000237d
    2300:	000023e1 	.word	0x000023e1
    2304:	00002205 	.word	0x00002205
    2308:	00002205 	.word	0x00002205
    230c:	00002205 	.word	0x00002205
    2310:	00002205 	.word	0x00002205
    2314:	000023e1 	.word	0x000023e1
    2318:	00002205 	.word	0x00002205
    231c:	00002205 	.word	0x00002205
    2320:	00002205 	.word	0x00002205
    2324:	00002205 	.word	0x00002205
    2328:	0000243b 	.word	0x0000243b
    232c:	00002409 	.word	0x00002409
    2330:	0000240d 	.word	0x0000240d
    2334:	00002205 	.word	0x00002205
    2338:	00002205 	.word	0x00002205
    233c:	00002355 	.word	0x00002355
    2340:	00002205 	.word	0x00002205
    2344:	00002409 	.word	0x00002409
    2348:	00002205 	.word	0x00002205
    234c:	00002205 	.word	0x00002205
    2350:	00002409 	.word	0x00002409
			if (precision >= 0) {
    2354:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    2358:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    235c:	db0a      	blt.n	2374 <cbvprintf+0x5c8>
				len = strnlen(bps, precision);
    235e:	4641      	mov	r1, r8
    2360:	4650      	mov	r0, sl
    2362:	f017 ff55 	bl	1a210 <strnlen>
			bpe = bps + len;
    2366:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    236a:	2600      	movs	r6, #0
		if (bps == NULL) {
    236c:	f1ba 0f00 	cmp.w	sl, #0
    2370:	d10c      	bne.n	238c <cbvprintf+0x5e0>
    2372:	e747      	b.n	2204 <cbvprintf+0x458>
				len = strlen(bps);
    2374:	4650      	mov	r0, sl
    2376:	f017 ff44 	bl	1a202 <strlen>
    237a:	e7f4      	b.n	2366 <cbvprintf+0x5ba>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    237c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    237e:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    2382:	2600      	movs	r6, #0
			bps = buf;
    2384:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
    2388:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    238c:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    2390:	b106      	cbz	r6, 2394 <cbvprintf+0x5e8>
			nj_len += 1U;
    2392:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    2394:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    2398:	06d0      	lsls	r0, r2, #27
    239a:	d568      	bpl.n	246e <cbvprintf+0x6c2>
			nj_len += 2U;
    239c:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    239e:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    23a0:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    23a2:	bf48      	it	mi
    23a4:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    23a6:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    23a8:	bf48      	it	mi
    23aa:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    23ac:	f1b9 0f00 	cmp.w	r9, #0
    23b0:	dd76      	ble.n	24a0 <cbvprintf+0x6f4>
			if (!conv->flag_dash) {
    23b2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    23b6:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    23ba:	f3c2 0380 	ubfx	r3, r2, #2, #1
    23be:	9303      	str	r3, [sp, #12]
    23c0:	0753      	lsls	r3, r2, #29
    23c2:	d46d      	bmi.n	24a0 <cbvprintf+0x6f4>
				if (conv->flag_zero) {
    23c4:	0650      	lsls	r0, r2, #25
    23c6:	d561      	bpl.n	248c <cbvprintf+0x6e0>
					if (sign != 0) {
    23c8:	b146      	cbz	r6, 23dc <cbvprintf+0x630>
						OUTC(sign);
    23ca:	9b02      	ldr	r3, [sp, #8]
    23cc:	4659      	mov	r1, fp
    23ce:	4630      	mov	r0, r6
    23d0:	4798      	blx	r3
    23d2:	2800      	cmp	r0, #0
    23d4:	db57      	blt.n	2486 <cbvprintf+0x6da>
						sign = 0;
    23d6:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    23d8:	3501      	adds	r5, #1
						sign = 0;
    23da:	461e      	mov	r6, r3
					pad = '0';
    23dc:	2330      	movs	r3, #48	; 0x30
    23de:	e056      	b.n	248e <cbvprintf+0x6e2>
			if (conv->flag_plus) {
    23e0:	071e      	lsls	r6, r3, #28
    23e2:	d40f      	bmi.n	2404 <cbvprintf+0x658>
				sign = ' ';
    23e4:	f013 0610 	ands.w	r6, r3, #16
    23e8:	bf18      	it	ne
    23ea:	2620      	movne	r6, #32
			sint = value->sint;
    23ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    23f0:	2b00      	cmp	r3, #0
    23f2:	f6bf af5f 	bge.w	22b4 <cbvprintf+0x508>
				value->uint = (uint_value_type)-sint;
    23f6:	4252      	negs	r2, r2
    23f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    23fc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    2400:	262d      	movs	r6, #45	; 0x2d
    2402:	e757      	b.n	22b4 <cbvprintf+0x508>
				sign = '+';
    2404:	262b      	movs	r6, #43	; 0x2b
    2406:	e7f1      	b.n	23ec <cbvprintf+0x640>
		switch (conv->specifier) {
    2408:	2600      	movs	r6, #0
    240a:	e753      	b.n	22b4 <cbvprintf+0x508>
			if (value->ptr != NULL) {
    240c:	980a      	ldr	r0, [sp, #40]	; 0x28
    240e:	b340      	cbz	r0, 2462 <cbvprintf+0x6b6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    2410:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    2414:	9300      	str	r3, [sp, #0]
    2416:	aa0c      	add	r2, sp, #48	; 0x30
    2418:	ab04      	add	r3, sp, #16
    241a:	2100      	movs	r1, #0
    241c:	f016 ff71 	bl	19302 <encode_uint>
				conv->altform_0c = true;
    2420:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    2424:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    2428:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    242c:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    2430:	4682      	mov	sl, r0
				conv->altform_0c = true;
    2432:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    2436:	2600      	movs	r6, #0
				goto prec_int_pad0;
    2438:	e746      	b.n	22c8 <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
    243a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    243c:	2907      	cmp	r1, #7
    243e:	f63f aee1 	bhi.w	2204 <cbvprintf+0x458>
    2442:	e8df f001 	tbb	[pc, r1]
    2446:	040c      	.short	0x040c
    2448:	08080c06 	.word	0x08080c06
    244c:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    244e:	701d      	strb	r5, [r3, #0]
		break;
    2450:	e6d8      	b.n	2204 <cbvprintf+0x458>
		*(short *)dp = (short)count;
    2452:	801d      	strh	r5, [r3, #0]
		break;
    2454:	e6d6      	b.n	2204 <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
    2456:	17ea      	asrs	r2, r5, #31
    2458:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    245c:	e6d2      	b.n	2204 <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    245e:	601d      	str	r5, [r3, #0]
		break;
    2460:	e6d0      	b.n	2204 <cbvprintf+0x458>
			bps = "(nil)";
    2462:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 252c <cbvprintf+0x780>
    2466:	4606      	mov	r6, r0
			bpe = bps + 5;
    2468:	f10a 0805 	add.w	r8, sl, #5
    246c:	e78e      	b.n	238c <cbvprintf+0x5e0>
		} else if (conv->altform_0) {
    246e:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    2470:	bf48      	it	mi
    2472:	3301      	addmi	r3, #1
    2474:	e793      	b.n	239e <cbvprintf+0x5f2>
					OUTC(pad);
    2476:	4618      	mov	r0, r3
    2478:	9303      	str	r3, [sp, #12]
    247a:	4659      	mov	r1, fp
    247c:	9b02      	ldr	r3, [sp, #8]
    247e:	4798      	blx	r3
    2480:	2800      	cmp	r0, #0
    2482:	9b03      	ldr	r3, [sp, #12]
    2484:	da04      	bge.n	2490 <cbvprintf+0x6e4>
#undef OUTS
#undef OUTC
}
    2486:	b011      	add	sp, #68	; 0x44
    2488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    248c:	2320      	movs	r3, #32
    248e:	444d      	add	r5, r9
    2490:	464a      	mov	r2, r9
				while (width-- > 0) {
    2492:	2a00      	cmp	r2, #0
    2494:	eba5 0109 	sub.w	r1, r5, r9
    2498:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    249c:	dceb      	bgt.n	2476 <cbvprintf+0x6ca>
    249e:	460d      	mov	r5, r1
		if (sign != 0) {
    24a0:	b136      	cbz	r6, 24b0 <cbvprintf+0x704>
			OUTC(sign);
    24a2:	9b02      	ldr	r3, [sp, #8]
    24a4:	4659      	mov	r1, fp
    24a6:	4630      	mov	r0, r6
    24a8:	4798      	blx	r3
    24aa:	2800      	cmp	r0, #0
    24ac:	dbeb      	blt.n	2486 <cbvprintf+0x6da>
    24ae:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    24b0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    24b4:	06d9      	lsls	r1, r3, #27
    24b6:	d401      	bmi.n	24bc <cbvprintf+0x710>
    24b8:	071a      	lsls	r2, r3, #28
    24ba:	d506      	bpl.n	24ca <cbvprintf+0x71e>
				OUTC('0');
    24bc:	9b02      	ldr	r3, [sp, #8]
    24be:	4659      	mov	r1, fp
    24c0:	2030      	movs	r0, #48	; 0x30
    24c2:	4798      	blx	r3
    24c4:	2800      	cmp	r0, #0
    24c6:	dbde      	blt.n	2486 <cbvprintf+0x6da>
    24c8:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    24ca:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    24ce:	06db      	lsls	r3, r3, #27
    24d0:	d507      	bpl.n	24e2 <cbvprintf+0x736>
				OUTC(conv->specifier);
    24d2:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    24d6:	9b02      	ldr	r3, [sp, #8]
    24d8:	4659      	mov	r1, fp
    24da:	4798      	blx	r3
    24dc:	2800      	cmp	r0, #0
    24de:	dbd2      	blt.n	2486 <cbvprintf+0x6da>
    24e0:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    24e2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    24e4:	442e      	add	r6, r5
    24e6:	1b73      	subs	r3, r6, r5
    24e8:	2b00      	cmp	r3, #0
    24ea:	dc16      	bgt.n	251a <cbvprintf+0x76e>
			OUTS(bps, bpe);
    24ec:	9802      	ldr	r0, [sp, #8]
    24ee:	4643      	mov	r3, r8
    24f0:	4652      	mov	r2, sl
    24f2:	4659      	mov	r1, fp
    24f4:	f016 ff4b 	bl	1938e <outs>
    24f8:	2800      	cmp	r0, #0
    24fa:	dbc4      	blt.n	2486 <cbvprintf+0x6da>
    24fc:	4405      	add	r5, r0
		while (width > 0) {
    24fe:	44a9      	add	r9, r5
    2500:	eba9 0305 	sub.w	r3, r9, r5
    2504:	2b00      	cmp	r3, #0
    2506:	f77f ae7d 	ble.w	2204 <cbvprintf+0x458>
			OUTC(' ');
    250a:	9b02      	ldr	r3, [sp, #8]
    250c:	4659      	mov	r1, fp
    250e:	2020      	movs	r0, #32
    2510:	4798      	blx	r3
    2512:	2800      	cmp	r0, #0
    2514:	dbb7      	blt.n	2486 <cbvprintf+0x6da>
    2516:	3501      	adds	r5, #1
			--width;
    2518:	e7f2      	b.n	2500 <cbvprintf+0x754>
				OUTC('0');
    251a:	9b02      	ldr	r3, [sp, #8]
    251c:	4659      	mov	r1, fp
    251e:	2030      	movs	r0, #48	; 0x30
    2520:	4798      	blx	r3
    2522:	2800      	cmp	r0, #0
    2524:	dbaf      	blt.n	2486 <cbvprintf+0x6da>
    2526:	3501      	adds	r5, #1
    2528:	e7dd      	b.n	24e6 <cbvprintf+0x73a>
    252a:	bf00      	nop
    252c:	0001f9b2 	.word	0x0001f9b2

00002530 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    2530:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    2532:	4910      	ldr	r1, [pc, #64]	; (2574 <enable_logger+0x44>)
    2534:	4810      	ldr	r0, [pc, #64]	; (2578 <enable_logger+0x48>)
{
    2536:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    2538:	2200      	movs	r2, #0
    253a:	f01c fa70 	bl	1ea1e <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    253e:	4d0f      	ldr	r5, [pc, #60]	; (257c <enable_logger+0x4c>)
    2540:	490f      	ldr	r1, [pc, #60]	; (2580 <enable_logger+0x50>)
    2542:	2200      	movs	r2, #0
    2544:	2300      	movs	r3, #0
    2546:	e9cd 2306 	strd	r2, r3, [sp, #24]
    254a:	2400      	movs	r4, #0
    254c:	230e      	movs	r3, #14
    254e:	e9cd 3403 	strd	r3, r4, [sp, #12]
    2552:	e9cd 4401 	strd	r4, r4, [sp, #4]
    2556:	4b0b      	ldr	r3, [pc, #44]	; (2584 <enable_logger+0x54>)
    2558:	9400      	str	r4, [sp, #0]
    255a:	f44f 7240 	mov.w	r2, #768	; 0x300
    255e:	4628      	mov	r0, r5
    2560:	f015 f8ee 	bl	17740 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    2564:	4908      	ldr	r1, [pc, #32]	; (2588 <enable_logger+0x58>)
    2566:	4628      	mov	r0, r5
    2568:	f01b febf 	bl	1e2ea <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    256c:	4620      	mov	r0, r4
    256e:	b009      	add	sp, #36	; 0x24
    2570:	bd30      	pop	{r4, r5, pc}
    2572:	bf00      	nop
    2574:	0000258d 	.word	0x0000258d
    2578:	20000d90 	.word	0x20000d90
    257c:	20000dc8 	.word	0x20000dc8
    2580:	20003440 	.word	0x20003440
    2584:	000028cd 	.word	0x000028cd
    2588:	0001f9b8 	.word	0x0001f9b8

0000258c <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    258c:	4801      	ldr	r0, [pc, #4]	; (2594 <log_process_thread_timer_expiry_fn+0x8>)
    258e:	f015 ba63 	b.w	17a58 <z_impl_k_sem_give>
    2592:	bf00      	nop
    2594:	20000b98 	.word	0x20000b98

00002598 <log_core_init>:
	panic_mode = false;
    2598:	4a0c      	ldr	r2, [pc, #48]	; (25cc <log_core_init+0x34>)
    259a:	2300      	movs	r3, #0
{
    259c:	b510      	push	{r4, lr}
	panic_mode = false;
    259e:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    25a0:	4a0b      	ldr	r2, [pc, #44]	; (25d0 <log_core_init+0x38>)
    25a2:	6013      	str	r3, [r2, #0]
		timestamp_func = default_get_timestamp;
    25a4:	4b0b      	ldr	r3, [pc, #44]	; (25d4 <log_core_init+0x3c>)
    25a6:	4a0c      	ldr	r2, [pc, #48]	; (25d8 <log_core_init+0x40>)
    25a8:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    25aa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    25ae:	f000 fcb9 	bl	2f24 <log_output_timestamp_freq_set>
		log_msg_pool_init();
    25b2:	f000 fa6b 	bl	2a8c <log_msg_pool_init>
		log_list_init(&list);
    25b6:	4809      	ldr	r0, [pc, #36]	; (25dc <log_core_init+0x44>)
    25b8:	f016 ff00 	bl	193bc <log_list_init>
}
    25bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    25c0:	4907      	ldr	r1, [pc, #28]	; (25e0 <log_core_init+0x48>)
    25c2:	4808      	ldr	r0, [pc, #32]	; (25e4 <log_core_init+0x4c>)
    25c4:	2308      	movs	r3, #8
    25c6:	2248      	movs	r2, #72	; 0x48
    25c8:	f01b be45 	b.w	1e256 <k_mem_slab_init>
    25cc:	20002e6d 	.word	0x20002e6d
    25d0:	200018b4 	.word	0x200018b4
    25d4:	20000278 	.word	0x20000278
    25d8:	000193fb 	.word	0x000193fb
    25dc:	200018bc 	.word	0x200018bc
    25e0:	20006068 	.word	0x20006068
    25e4:	200018c4 	.word	0x200018c4

000025e8 <log_init>:
{
    25e8:	b570      	push	{r4, r5, r6, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    25ea:	4b12      	ldr	r3, [pc, #72]	; (2634 <log_init+0x4c>)
    25ec:	f3bf 8f5b 	dmb	ish
    25f0:	e853 5f00 	ldrex	r5, [r3]
    25f4:	1c6a      	adds	r2, r5, #1
    25f6:	e843 2100 	strex	r1, r2, [r3]
    25fa:	2900      	cmp	r1, #0
    25fc:	d1f8      	bne.n	25f0 <log_init+0x8>
    25fe:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    2602:	b92d      	cbnz	r5, 2610 <log_init+0x28>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    2604:	4c0c      	ldr	r4, [pc, #48]	; (2638 <log_init+0x50>)
    2606:	4e0d      	ldr	r6, [pc, #52]	; (263c <log_init+0x54>)
    2608:	1b36      	subs	r6, r6, r4
    260a:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    260c:	42b5      	cmp	r5, r6
    260e:	db00      	blt.n	2612 <log_init+0x2a>
}
    2610:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    2612:	7b23      	ldrb	r3, [r4, #12]
    2614:	b153      	cbz	r3, 262c <log_init+0x44>
			if (backend->api->init != NULL) {
    2616:	6823      	ldr	r3, [r4, #0]
    2618:	699b      	ldr	r3, [r3, #24]
    261a:	b10b      	cbz	r3, 2620 <log_init+0x38>
				backend->api->init(backend);
    261c:	4620      	mov	r0, r4
    261e:	4798      	blx	r3
			log_backend_enable(backend,
    2620:	6863      	ldr	r3, [r4, #4]
    2622:	2204      	movs	r2, #4
    2624:	6819      	ldr	r1, [r3, #0]
    2626:	4620      	mov	r0, r4
    2628:	f000 fa22 	bl	2a70 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    262c:	3501      	adds	r5, #1
    262e:	3410      	adds	r4, #16
    2630:	e7ec      	b.n	260c <log_init+0x24>
    2632:	bf00      	nop
    2634:	200018b8 	.word	0x200018b8
    2638:	0001f16c 	.word	0x0001f16c
    263c:	0001f17c 	.word	0x0001f17c

00002640 <get_msg>:
{
    2640:	b510      	push	{r4, lr}
    2642:	f04f 0320 	mov.w	r3, #32
    2646:	f3ef 8411 	mrs	r4, BASEPRI
    264a:	f383 8812 	msr	BASEPRI_MAX, r3
    264e:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
    2652:	4804      	ldr	r0, [pc, #16]	; (2664 <get_msg+0x24>)
    2654:	f016 fec2 	bl	193dc <log_list_head_get>
	__asm__ volatile(
    2658:	f384 8811 	msr	BASEPRI, r4
    265c:	f3bf 8f6f 	isb	sy
}
    2660:	bd10      	pop	{r4, pc}
    2662:	bf00      	nop
    2664:	200018bc 	.word	0x200018bc

00002668 <z_log_notify_backend_enabled>:
{
    2668:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    266a:	4c04      	ldr	r4, [pc, #16]	; (267c <z_log_notify_backend_enabled+0x14>)
    266c:	7823      	ldrb	r3, [r4, #0]
    266e:	b913      	cbnz	r3, 2676 <z_log_notify_backend_enabled+0xe>
    2670:	4803      	ldr	r0, [pc, #12]	; (2680 <z_log_notify_backend_enabled+0x18>)
    2672:	f015 f9f1 	bl	17a58 <z_impl_k_sem_give>
	backend_attached = true;
    2676:	2301      	movs	r3, #1
    2678:	7023      	strb	r3, [r4, #0]
}
    267a:	bd10      	pop	{r4, pc}
    267c:	20002e6c 	.word	0x20002e6c
    2680:	20000b98 	.word	0x20000b98

00002684 <z_log_dropped>:
    2684:	4b06      	ldr	r3, [pc, #24]	; (26a0 <z_log_dropped+0x1c>)
    2686:	f3bf 8f5b 	dmb	ish
    268a:	e853 2f00 	ldrex	r2, [r3]
    268e:	3201      	adds	r2, #1
    2690:	e843 2100 	strex	r1, r2, [r3]
    2694:	2900      	cmp	r1, #0
    2696:	d1f8      	bne.n	268a <z_log_dropped+0x6>
    2698:	f3bf 8f5b 	dmb	ish
}
    269c:	4770      	bx	lr
    269e:	bf00      	nop
    26a0:	200018b4 	.word	0x200018b4

000026a4 <z_log_dropped_read_and_clear>:
}
    26a4:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    26a6:	4b06      	ldr	r3, [pc, #24]	; (26c0 <z_log_dropped_read_and_clear+0x1c>)
    26a8:	f3bf 8f5b 	dmb	ish
    26ac:	4602      	mov	r2, r0
    26ae:	e853 0f00 	ldrex	r0, [r3]
    26b2:	e843 2100 	strex	r1, r2, [r3]
    26b6:	2900      	cmp	r1, #0
    26b8:	d1f9      	bne.n	26ae <z_log_dropped_read_and_clear+0xa>
    26ba:	f3bf 8f5b 	dmb	ish
    26be:	4770      	bx	lr
    26c0:	200018b4 	.word	0x200018b4

000026c4 <dropped_notify>:
{
    26c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    26c6:	f7ff ffed 	bl	26a4 <z_log_dropped_read_and_clear>
    26ca:	4c0a      	ldr	r4, [pc, #40]	; (26f4 <dropped_notify+0x30>)
    26cc:	4d0a      	ldr	r5, [pc, #40]	; (26f8 <dropped_notify+0x34>)
    26ce:	1b2d      	subs	r5, r5, r4
    26d0:	4607      	mov	r7, r0
    26d2:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    26d4:	2600      	movs	r6, #0
    26d6:	42ae      	cmp	r6, r5
    26d8:	db00      	blt.n	26dc <dropped_notify+0x18>
}
    26da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    26dc:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    26de:	795b      	ldrb	r3, [r3, #5]
    26e0:	b12b      	cbz	r3, 26ee <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
    26e2:	6823      	ldr	r3, [r4, #0]
    26e4:	691b      	ldr	r3, [r3, #16]
    26e6:	b113      	cbz	r3, 26ee <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
    26e8:	4639      	mov	r1, r7
    26ea:	4620      	mov	r0, r4
    26ec:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    26ee:	3601      	adds	r6, #1
    26f0:	3410      	adds	r4, #16
    26f2:	e7f0      	b.n	26d6 <dropped_notify+0x12>
    26f4:	0001f16c 	.word	0x0001f16c
    26f8:	0001f17c 	.word	0x0001f17c

000026fc <z_log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    26fc:	4b16      	ldr	r3, [pc, #88]	; (2758 <z_log_strdup+0x5c>)
    26fe:	4298      	cmp	r0, r3
{
    2700:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2702:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    2704:	d302      	bcc.n	270c <z_log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    2706:	4b15      	ldr	r3, [pc, #84]	; (275c <z_log_strdup+0x60>)
    2708:	4298      	cmp	r0, r3
    270a:	d320      	bcc.n	274e <z_log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    270c:	4814      	ldr	r0, [pc, #80]	; (2760 <z_log_strdup+0x64>)
    270e:	2200      	movs	r2, #0
    2710:	2300      	movs	r3, #0
    2712:	a901      	add	r1, sp, #4
    2714:	f014 ffb4 	bl	17680 <k_mem_slab_alloc>
	if (err != 0) {
    2718:	4605      	mov	r5, r0
    271a:	b9d8      	cbnz	r0, 2754 <z_log_strdup+0x58>
    271c:	2201      	movs	r2, #1
    271e:	9b01      	ldr	r3, [sp, #4]
    2720:	f3bf 8f5b 	dmb	ish
    2724:	e853 1f00 	ldrex	r1, [r3]
    2728:	e843 2000 	strex	r0, r2, [r3]
    272c:	2800      	cmp	r0, #0
    272e:	d1f9      	bne.n	2724 <z_log_strdup+0x28>
    2730:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    2734:	9801      	ldr	r0, [sp, #4]
    2736:	4621      	mov	r1, r4
    2738:	2241      	movs	r2, #65	; 0x41
    273a:	3004      	adds	r0, #4
    273c:	f017 fd4f 	bl	1a1de <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    2740:	9c01      	ldr	r4, [sp, #4]
    2742:	237e      	movs	r3, #126	; 0x7e
    2744:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    2748:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
	return dup->buf;
    274c:	3404      	adds	r4, #4
}
    274e:	4620      	mov	r0, r4
    2750:	b003      	add	sp, #12
    2752:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    2754:	4c03      	ldr	r4, [pc, #12]	; (2764 <z_log_strdup+0x68>)
    2756:	e7fa      	b.n	274e <z_log_strdup+0x52>
    2758:	0001eb5c 	.word	0x0001eb5c
    275c:	000235f4 	.word	0x000235f4
    2760:	200018c4 	.word	0x200018c4
    2764:	0001f9c0 	.word	0x0001f9c0

00002768 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    2768:	b150      	cbz	r0, 2780 <log_is_strdup+0x18>
    276a:	4b06      	ldr	r3, [pc, #24]	; (2784 <log_is_strdup+0x1c>)
    276c:	4298      	cmp	r0, r3
    276e:	d306      	bcc.n	277e <log_is_strdup+0x16>
    2770:	f503 7310 	add.w	r3, r3, #576	; 0x240
    2774:	4298      	cmp	r0, r3
    2776:	bf2c      	ite	cs
    2778:	2000      	movcs	r0, #0
    277a:	2001      	movcc	r0, #1
    277c:	4770      	bx	lr
    277e:	2000      	movs	r0, #0
}
    2780:	4770      	bx	lr
    2782:	bf00      	nop
    2784:	20006068 	.word	0x20006068

00002788 <z_impl_log_process>:
	if (!backend_attached && !bypass) {
    2788:	4b43      	ldr	r3, [pc, #268]	; (2898 <z_impl_log_process+0x110>)
    278a:	781b      	ldrb	r3, [r3, #0]
{
    278c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2790:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    2792:	b903      	cbnz	r3, 2796 <z_impl_log_process+0xe>
    2794:	b300      	cbz	r0, 27d8 <z_impl_log_process+0x50>
	msg = get_msg();
    2796:	f7ff ff53 	bl	2640 <get_msg>
	if (msg.msg) {
    279a:	4605      	mov	r5, r0
    279c:	b178      	cbz	r0, 27be <z_impl_log_process+0x36>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    279e:	f3bf 8f5b 	dmb	ish
    27a2:	4b3e      	ldr	r3, [pc, #248]	; (289c <z_impl_log_process+0x114>)
    27a4:	e853 2f00 	ldrex	r2, [r3]
    27a8:	3a01      	subs	r2, #1
    27aa:	e843 2100 	strex	r1, r2, [r3]
    27ae:	2900      	cmp	r1, #0
    27b0:	d1f8      	bne.n	27a4 <z_impl_log_process+0x1c>
    27b2:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
    27b6:	b19c      	cbz	r4, 27e0 <z_impl_log_process+0x58>
			log_msg_put(msg.msg);
    27b8:	4628      	mov	r0, r5
    27ba:	f016 ff40 	bl	1963e <log_msg_put>
	if (!bypass && z_log_dropped_pending()) {
    27be:	b92c      	cbnz	r4, 27cc <z_impl_log_process+0x44>
	return dropped_cnt > 0;
    27c0:	4b37      	ldr	r3, [pc, #220]	; (28a0 <z_impl_log_process+0x118>)
	if (!bypass && z_log_dropped_pending()) {
    27c2:	681b      	ldr	r3, [r3, #0]
    27c4:	2b00      	cmp	r3, #0
    27c6:	dd01      	ble.n	27cc <z_impl_log_process+0x44>
		dropped_notify();
    27c8:	f7ff ff7c 	bl	26c4 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    27cc:	4835      	ldr	r0, [pc, #212]	; (28a4 <z_impl_log_process+0x11c>)
    27ce:	f016 fe03 	bl	193d8 <log_list_head_peek>
    27d2:	1e04      	subs	r4, r0, #0
    27d4:	bf18      	it	ne
    27d6:	2401      	movne	r4, #1
}
    27d8:	4620      	mov	r0, r4
    27da:	b003      	add	sp, #12
    27dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    27e0:	4b31      	ldr	r3, [pc, #196]	; (28a8 <z_impl_log_process+0x120>)
		if (!IS_ENABLED(CONFIG_LOG2) &&
    27e2:	781b      	ldrb	r3, [r3, #0]
    27e4:	b9bb      	cbnz	r3, 2816 <z_impl_log_process+0x8e>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    27e6:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    27e8:	07db      	lsls	r3, r3, #31
    27ea:	d414      	bmi.n	2816 <z_impl_log_process+0x8e>
	msg_str = log_msg_str_get(msg);
    27ec:	f016 ff3a 	bl	19664 <log_msg_str_get>
    27f0:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    27f2:	4628      	mov	r0, r5
    27f4:	f016 ff01 	bl	195fa <log_msg_nargs_get>
    27f8:	4601      	mov	r1, r0
    27fa:	4640      	mov	r0, r8
    27fc:	f016 fe01 	bl	19402 <z_log_get_s_mask>
    2800:	4b2a      	ldr	r3, [pc, #168]	; (28ac <z_impl_log_process+0x124>)
    2802:	4a2b      	ldr	r2, [pc, #172]	; (28b0 <z_impl_log_process+0x128>)
		if (!is_rodata(str) && !log_is_strdup(str) &&
    2804:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 28b4 <z_impl_log_process+0x12c>
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    2808:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 28b8 <z_impl_log_process+0x130>
    280c:	1a9b      	subs	r3, r3, r2
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    280e:	4606      	mov	r6, r0
    2810:	ea4f 09d3 	mov.w	r9, r3, lsr #3
	while (mask) {
    2814:	b936      	cbnz	r6, 2824 <z_impl_log_process+0x9c>
	return __log_backends_end - __log_backends_start;
    2816:	4e29      	ldr	r6, [pc, #164]	; (28bc <z_impl_log_process+0x134>)
    2818:	4f29      	ldr	r7, [pc, #164]	; (28c0 <z_impl_log_process+0x138>)
    281a:	1bbf      	subs	r7, r7, r6
    281c:	113f      	asrs	r7, r7, #4
    281e:	f04f 0800 	mov.w	r8, #0
    2822:	e036      	b.n	2892 <z_impl_log_process+0x10a>
		idx = 31 - __builtin_clz(mask);
    2824:	fab6 f786 	clz	r7, r6
    2828:	f1c7 071f 	rsb	r7, r7, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    282c:	4639      	mov	r1, r7
    282e:	4628      	mov	r0, r5
    2830:	f016 fee6 	bl	19600 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    2834:	4b23      	ldr	r3, [pc, #140]	; (28c4 <z_impl_log_process+0x13c>)
    2836:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
    2838:	4602      	mov	r2, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    283a:	d302      	bcc.n	2842 <z_impl_log_process+0xba>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    283c:	4b22      	ldr	r3, [pc, #136]	; (28c8 <z_impl_log_process+0x140>)
    283e:	4298      	cmp	r0, r3
    2840:	d316      	bcc.n	2870 <z_impl_log_process+0xe8>
    2842:	4610      	mov	r0, r2
    2844:	f7ff ff90 	bl	2768 <log_is_strdup>
    2848:	b990      	cbnz	r0, 2870 <z_impl_log_process+0xe8>
    284a:	4552      	cmp	r2, sl
    284c:	d010      	beq.n	2870 <z_impl_log_process+0xe8>
	return msg->hdr.ids.source_id;
    284e:	8969      	ldrh	r1, [r5, #10]
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
    2850:	f3c1 1189 	ubfx	r1, r1, #6, #10
    2854:	f000 f8fe 	bl	2a54 <log_source_name_get>
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    2858:	ea4f 1389 	mov.w	r3, r9, lsl #6
    285c:	f043 0301 	orr.w	r3, r3, #1
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
    2860:	4602      	mov	r2, r0
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    2862:	f8ad 3000 	strh.w	r3, [sp]
    2866:	4639      	mov	r1, r7
    2868:	4643      	mov	r3, r8
    286a:	4658      	mov	r0, fp
    286c:	f016 fe23 	bl	194b6 <log_3>
		mask &= ~BIT(idx);
    2870:	2301      	movs	r3, #1
    2872:	fa03 f707 	lsl.w	r7, r3, r7
    2876:	ea26 0607 	bic.w	r6, r6, r7
    287a:	e7cb      	b.n	2814 <z_impl_log_process+0x8c>
	return backend->cb->active;
    287c:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    287e:	795b      	ldrb	r3, [r3, #5]
    2880:	b123      	cbz	r3, 288c <z_impl_log_process+0x104>
	backend->api->put(backend, msg);
    2882:	6833      	ldr	r3, [r6, #0]
    2884:	4629      	mov	r1, r5
    2886:	685b      	ldr	r3, [r3, #4]
    2888:	4630      	mov	r0, r6
    288a:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    288c:	f108 0801 	add.w	r8, r8, #1
    2890:	3610      	adds	r6, #16
    2892:	45b8      	cmp	r8, r7
    2894:	dbf2      	blt.n	287c <z_impl_log_process+0xf4>
    2896:	e78f      	b.n	27b8 <z_impl_log_process+0x30>
    2898:	20002e6c 	.word	0x20002e6c
    289c:	200018b0 	.word	0x200018b0
    28a0:	200018b4 	.word	0x200018b4
    28a4:	200018bc 	.word	0x200018bc
    28a8:	20002e6d 	.word	0x20002e6d
    28ac:	0001f12c 	.word	0x0001f12c
    28b0:	0001ef2c 	.word	0x0001ef2c
    28b4:	0001f9c0 	.word	0x0001f9c0
    28b8:	0001f9da 	.word	0x0001f9da
    28bc:	0001f16c 	.word	0x0001f16c
    28c0:	0001f17c 	.word	0x0001f17c
    28c4:	0001eb5c 	.word	0x0001eb5c
    28c8:	000235f4 	.word	0x000235f4

000028cc <log_process_thread_func>:
{
    28cc:	b510      	push	{r4, lr}
	log_init();
    28ce:	f7ff fe8b 	bl	25e8 <log_init>
	return z_impl_z_current_get();
    28d2:	f015 fdbf 	bl	18454 <z_impl_z_current_get>
	proc_tid = process_tid;
    28d6:	4b0c      	ldr	r3, [pc, #48]	; (2908 <log_process_thread_func+0x3c>)
    28d8:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    28da:	b130      	cbz	r0, 28ea <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    28dc:	4b0b      	ldr	r3, [pc, #44]	; (290c <log_process_thread_func+0x40>)
	    process_tid &&
    28de:	681b      	ldr	r3, [r3, #0]
    28e0:	2b09      	cmp	r3, #9
    28e2:	dd02      	ble.n	28ea <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    28e4:	480a      	ldr	r0, [pc, #40]	; (2910 <log_process_thread_func+0x44>)
    28e6:	f015 f8b7 	bl	17a58 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    28ea:	4c09      	ldr	r4, [pc, #36]	; (2910 <log_process_thread_func+0x44>)
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    28ec:	2000      	movs	r0, #0
    28ee:	f7ff ff4b 	bl	2788 <z_impl_log_process>
		if (log_process(false) == false) {
    28f2:	2800      	cmp	r0, #0
    28f4:	d1fa      	bne.n	28ec <log_process_thread_func+0x20>
    28f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    28fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    28fe:	4620      	mov	r0, r4
    2900:	f015 f8d0 	bl	17aa4 <z_impl_k_sem_take>
    2904:	e7f2      	b.n	28ec <log_process_thread_func+0x20>
    2906:	bf00      	nop
    2908:	200018e0 	.word	0x200018e0
    290c:	200018b0 	.word	0x200018b0
    2910:	20000b98 	.word	0x20000b98

00002914 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    2914:	4b29      	ldr	r3, [pc, #164]	; (29bc <msg_finalize+0xa8>)
{
    2916:	b537      	push	{r0, r1, r2, r4, r5, lr}
	msg->hdr.timestamp = timestamp_func();
    2918:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    291a:	8141      	strh	r1, [r0, #10]
{
    291c:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    291e:	4798      	blx	r3
    2920:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    2922:	f04f 0320 	mov.w	r3, #32
    2926:	f3ef 8511 	mrs	r5, BASEPRI
    292a:	f383 8812 	msr	BASEPRI_MAX, r3
    292e:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    2932:	4823      	ldr	r0, [pc, #140]	; (29c0 <msg_finalize+0xac>)
    2934:	4621      	mov	r1, r4
    2936:	f016 fd45 	bl	193c4 <log_list_add_tail>
	__asm__ volatile(
    293a:	f385 8811 	msr	BASEPRI, r5
    293e:	f3bf 8f6f 	isb	sy
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    2942:	f3bf 8f5b 	dmb	ish
    2946:	4b1f      	ldr	r3, [pc, #124]	; (29c4 <msg_finalize+0xb0>)
    2948:	e853 2f00 	ldrex	r2, [r3]
    294c:	3201      	adds	r2, #1
    294e:	e843 2100 	strex	r1, r2, [r3]
    2952:	2900      	cmp	r1, #0
    2954:	d1f8      	bne.n	2948 <msg_finalize+0x34>
    2956:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    295a:	4a1b      	ldr	r2, [pc, #108]	; (29c8 <msg_finalize+0xb4>)
    295c:	7812      	ldrb	r2, [r2, #0]
    295e:	b182      	cbz	r2, 2982 <msg_finalize+0x6e>
	__asm__ volatile(
    2960:	f04f 0320 	mov.w	r3, #32
    2964:	f3ef 8411 	mrs	r4, BASEPRI
    2968:	f383 8812 	msr	BASEPRI_MAX, r3
    296c:	f3bf 8f6f 	isb	sy
    2970:	2000      	movs	r0, #0
    2972:	f7ff ff09 	bl	2788 <z_impl_log_process>
	__asm__ volatile(
    2976:	f384 8811 	msr	BASEPRI, r4
    297a:	f3bf 8f6f 	isb	sy
}
    297e:	b003      	add	sp, #12
    2980:	bd30      	pop	{r4, r5, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    2982:	4a12      	ldr	r2, [pc, #72]	; (29cc <msg_finalize+0xb8>)
    2984:	681b      	ldr	r3, [r3, #0]
    2986:	6812      	ldr	r2, [r2, #0]
    2988:	2a00      	cmp	r2, #0
    298a:	d0f8      	beq.n	297e <msg_finalize+0x6a>
    298c:	2b01      	cmp	r3, #1
    298e:	d10a      	bne.n	29a6 <msg_finalize+0x92>
	z_impl_k_timer_start(timer, duration, period);
    2990:	2200      	movs	r2, #0
    2992:	2300      	movs	r3, #0
    2994:	e9cd 2300 	strd	r2, r3, [sp]
    2998:	480d      	ldr	r0, [pc, #52]	; (29d0 <msg_finalize+0xbc>)
    299a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    299e:	2300      	movs	r3, #0
    29a0:	f015 ff86 	bl	188b0 <z_impl_k_timer_start>
    29a4:	e7eb      	b.n	297e <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    29a6:	2b0a      	cmp	r3, #10
    29a8:	d1e9      	bne.n	297e <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
    29aa:	4809      	ldr	r0, [pc, #36]	; (29d0 <msg_finalize+0xbc>)
    29ac:	f01c f843 	bl	1ea36 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    29b0:	4808      	ldr	r0, [pc, #32]	; (29d4 <msg_finalize+0xc0>)
}
    29b2:	b003      	add	sp, #12
    29b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    29b8:	f015 b84e 	b.w	17a58 <z_impl_k_sem_give>
    29bc:	20000278 	.word	0x20000278
    29c0:	200018bc 	.word	0x200018bc
    29c4:	200018b0 	.word	0x200018b0
    29c8:	20002e6d 	.word	0x20002e6d
    29cc:	200018e0 	.word	0x200018e0
    29d0:	20000d90 	.word	0x20000d90
    29d4:	20000b98 	.word	0x20000b98

000029d8 <z_impl_log_panic>:
{
    29d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    29da:	4f0e      	ldr	r7, [pc, #56]	; (2a14 <z_impl_log_panic+0x3c>)
    29dc:	783d      	ldrb	r5, [r7, #0]
    29de:	b975      	cbnz	r5, 29fe <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    29e0:	4c0d      	ldr	r4, [pc, #52]	; (2a18 <z_impl_log_panic+0x40>)
    29e2:	4e0e      	ldr	r6, [pc, #56]	; (2a1c <z_impl_log_panic+0x44>)
	log_init();
    29e4:	f7ff fe00 	bl	25e8 <log_init>
    29e8:	1b36      	subs	r6, r6, r4
    29ea:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    29ec:	42b5      	cmp	r5, r6
    29ee:	db07      	blt.n	2a00 <z_impl_log_panic+0x28>
    29f0:	2000      	movs	r0, #0
    29f2:	f7ff fec9 	bl	2788 <z_impl_log_process>
		while (log_process(false) == true) {
    29f6:	2800      	cmp	r0, #0
    29f8:	d1fa      	bne.n	29f0 <z_impl_log_panic+0x18>
	panic_mode = true;
    29fa:	2301      	movs	r3, #1
    29fc:	703b      	strb	r3, [r7, #0]
}
    29fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    2a00:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    2a02:	795b      	ldrb	r3, [r3, #5]
    2a04:	b11b      	cbz	r3, 2a0e <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    2a06:	6823      	ldr	r3, [r4, #0]
    2a08:	4620      	mov	r0, r4
    2a0a:	695b      	ldr	r3, [r3, #20]
    2a0c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    2a0e:	3501      	adds	r5, #1
    2a10:	3410      	adds	r4, #16
    2a12:	e7eb      	b.n	29ec <z_impl_log_panic+0x14>
    2a14:	20002e6d 	.word	0x20002e6d
    2a18:	0001f16c 	.word	0x0001f16c
    2a1c:	0001f17c 	.word	0x0001f17c

00002a20 <log_free>:
{
    2a20:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    2a22:	3804      	subs	r0, #4
    2a24:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    2a26:	f3bf 8f5b 	dmb	ish
    2a2a:	e850 3f00 	ldrex	r3, [r0]
    2a2e:	1e5a      	subs	r2, r3, #1
    2a30:	e840 2100 	strex	r1, r2, [r0]
    2a34:	2900      	cmp	r1, #0
    2a36:	d1f8      	bne.n	2a2a <log_free+0xa>
    2a38:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    2a3c:	2b01      	cmp	r3, #1
    2a3e:	d103      	bne.n	2a48 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    2a40:	4803      	ldr	r0, [pc, #12]	; (2a50 <log_free+0x30>)
    2a42:	a901      	add	r1, sp, #4
    2a44:	f01b fc22 	bl	1e28c <k_mem_slab_free>
}
    2a48:	b003      	add	sp, #12
    2a4a:	f85d fb04 	ldr.w	pc, [sp], #4
    2a4e:	bf00      	nop
    2a50:	200018c4 	.word	0x200018c4

00002a54 <log_source_name_get>:
    2a54:	4a04      	ldr	r2, [pc, #16]	; (2a68 <log_source_name_get+0x14>)
    2a56:	4b05      	ldr	r3, [pc, #20]	; (2a6c <log_source_name_get+0x18>)
    2a58:	1a9b      	subs	r3, r3, r2
	return log_sources_count();
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    2a5a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    2a5e:	bf34      	ite	cc
    2a60:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    2a64:	2000      	movcs	r0, #0
}
    2a66:	4770      	bx	lr
    2a68:	0001ef2c 	.word	0x0001ef2c
    2a6c:	0001f16c 	.word	0x0001f16c

00002a70 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    2a70:	4a05      	ldr	r2, [pc, #20]	; (2a88 <log_backend_enable+0x18>)
	backend->cb->id = id;
    2a72:	6843      	ldr	r3, [r0, #4]
    2a74:	1a80      	subs	r0, r0, r2
    2a76:	1100      	asrs	r0, r0, #4
    2a78:	3001      	adds	r0, #1
	backend->cb->active = true;
    2a7a:	2201      	movs	r2, #1

	log_backend_id_set(backend, id);
    2a7c:	7118      	strb	r0, [r3, #4]
	backend->cb->ctx = ctx;
    2a7e:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    2a80:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    2a82:	f7ff bdf1 	b.w	2668 <z_log_notify_backend_enabled>
    2a86:	bf00      	nop
    2a88:	0001f16c 	.word	0x0001f16c

00002a8c <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    2a8c:	2320      	movs	r3, #32
    2a8e:	4902      	ldr	r1, [pc, #8]	; (2a98 <log_msg_pool_init+0xc>)
    2a90:	4802      	ldr	r0, [pc, #8]	; (2a9c <log_msg_pool_init+0x10>)
    2a92:	461a      	mov	r2, r3
    2a94:	f01b bbdf 	b.w	1e256 <k_mem_slab_init>
    2a98:	200062a8 	.word	0x200062a8
    2a9c:	200018e4 	.word	0x200018e4

00002aa0 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    2aa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
    2aa2:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    2aa4:	4d09      	ldr	r5, [pc, #36]	; (2acc <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    2aa6:	9301      	str	r3, [sp, #4]
    2aa8:	2001      	movs	r0, #1
    2aaa:	f7ff fe6d 	bl	2788 <z_impl_log_process>
    2aae:	4604      	mov	r4, r0
			z_log_dropped();
    2ab0:	f7ff fde8 	bl	2684 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    2ab4:	2200      	movs	r2, #0
    2ab6:	2300      	movs	r3, #0
    2ab8:	a901      	add	r1, sp, #4
    2aba:	4628      	mov	r0, r5
    2abc:	f014 fde0 	bl	17680 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    2ac0:	b108      	cbz	r0, 2ac6 <log_msg_no_space_handle+0x26>
    2ac2:	2c00      	cmp	r4, #0
    2ac4:	d1f0      	bne.n	2aa8 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
    2ac6:	9801      	ldr	r0, [sp, #4]
    2ac8:	b003      	add	sp, #12
    2aca:	bd30      	pop	{r4, r5, pc}
    2acc:	200018e4 	.word	0x200018e4

00002ad0 <log_msg_chunk_alloc>:
{
    2ad0:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    2ad2:	2300      	movs	r3, #0
    2ad4:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    2ad6:	4807      	ldr	r0, [pc, #28]	; (2af4 <log_msg_chunk_alloc+0x24>)
    2ad8:	2200      	movs	r2, #0
    2ada:	2300      	movs	r3, #0
    2adc:	a901      	add	r1, sp, #4
    2ade:	f014 fdcf 	bl	17680 <k_mem_slab_alloc>
	if (err != 0) {
    2ae2:	b110      	cbz	r0, 2aea <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
    2ae4:	f7ff ffdc 	bl	2aa0 <log_msg_no_space_handle>
    2ae8:	9001      	str	r0, [sp, #4]
}
    2aea:	9801      	ldr	r0, [sp, #4]
    2aec:	b003      	add	sp, #12
    2aee:	f85d fb04 	ldr.w	pc, [sp], #4
    2af2:	bf00      	nop
    2af4:	200018e4 	.word	0x200018e4

00002af8 <msg_free>:
{
    2af8:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    2afa:	7a03      	ldrb	r3, [r0, #8]
    2afc:	b085      	sub	sp, #20
	if (log_msg_is_std(msg) && nargs) {
    2afe:	07dc      	lsls	r4, r3, #31
{
    2b00:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    2b02:	d41e      	bmi.n	2b42 <msg_free+0x4a>
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    2b04:	7a45      	ldrb	r5, [r0, #9]
	if (log_msg_is_std(msg) && nargs) {
    2b06:	092d      	lsrs	r5, r5, #4
    2b08:	d01b      	beq.n	2b42 <msg_free+0x4a>
		uint32_t smask = 0U;
    2b0a:	2400      	movs	r4, #0
		for (i = 0U; i < nargs; i++) {
    2b0c:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
    2b0e:	9801      	ldr	r0, [sp, #4]
    2b10:	4631      	mov	r1, r6
    2b12:	f016 fd75 	bl	19600 <log_msg_arg_get>
    2b16:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    2b18:	f7ff fe26 	bl	2768 <log_is_strdup>
    2b1c:	b170      	cbz	r0, 2b3c <msg_free+0x44>
				if (smask == 0U) {
    2b1e:	b934      	cbnz	r4, 2b2e <msg_free+0x36>
					smask = z_log_get_s_mask(
    2b20:	9b01      	ldr	r3, [sp, #4]
    2b22:	4629      	mov	r1, r5
    2b24:	6918      	ldr	r0, [r3, #16]
    2b26:	f016 fc6c 	bl	19402 <z_log_get_s_mask>
					if (smask == 0U) {
    2b2a:	4604      	mov	r4, r0
    2b2c:	b148      	cbz	r0, 2b42 <msg_free+0x4a>
				if (smask & BIT(i)) {
    2b2e:	fa24 f306 	lsr.w	r3, r4, r6
    2b32:	07d9      	lsls	r1, r3, #31
    2b34:	d502      	bpl.n	2b3c <msg_free+0x44>
					log_free(buf);
    2b36:	4638      	mov	r0, r7
    2b38:	f7ff ff72 	bl	2a20 <log_free>
		for (i = 0U; i < nargs; i++) {
    2b3c:	3601      	adds	r6, #1
    2b3e:	42ae      	cmp	r6, r5
    2b40:	d3e5      	bcc.n	2b0e <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
    2b42:	9b01      	ldr	r3, [sp, #4]
    2b44:	7a1a      	ldrb	r2, [r3, #8]
    2b46:	0792      	lsls	r2, r2, #30
    2b48:	d504      	bpl.n	2b54 <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
    2b4a:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    2b4c:	4c08      	ldr	r4, [pc, #32]	; (2b70 <msg_free+0x78>)
    2b4e:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    2b50:	9b03      	ldr	r3, [sp, #12]
    2b52:	b92b      	cbnz	r3, 2b60 <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    2b54:	4806      	ldr	r0, [pc, #24]	; (2b70 <msg_free+0x78>)
    2b56:	a901      	add	r1, sp, #4
    2b58:	f01b fb98 	bl	1e28c <k_mem_slab_free>
}
    2b5c:	b005      	add	sp, #20
    2b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
    2b60:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    2b62:	a903      	add	r1, sp, #12
    2b64:	4620      	mov	r0, r4
    2b66:	f01b fb91 	bl	1e28c <k_mem_slab_free>
		cont = next;
    2b6a:	9503      	str	r5, [sp, #12]
    2b6c:	e7f0      	b.n	2b50 <msg_free+0x58>
    2b6e:	bf00      	nop
    2b70:	200018e4 	.word	0x200018e4

00002b74 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    2b74:	b40e      	push	{r1, r2, r3}
    2b76:	b503      	push	{r0, r1, lr}
    2b78:	ab03      	add	r3, sp, #12
    2b7a:	4601      	mov	r1, r0
    2b7c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    2b80:	4804      	ldr	r0, [pc, #16]	; (2b94 <print_formatted+0x20>)
	va_start(args, fmt);
    2b82:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    2b84:	f7ff f912 	bl	1dac <cbvprintf>
	va_end(args);

	return length;
}
    2b88:	b002      	add	sp, #8
    2b8a:	f85d eb04 	ldr.w	lr, [sp], #4
    2b8e:	b003      	add	sp, #12
    2b90:	4770      	bx	lr
    2b92:	bf00      	nop
    2b94:	00019ac5 	.word	0x00019ac5

00002b98 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    2b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2b9c:	461d      	mov	r5, r3
    2b9e:	9b08      	ldr	r3, [sp, #32]
    2ba0:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    2ba2:	06da      	lsls	r2, r3, #27
{
    2ba4:	4604      	mov	r4, r0
    2ba6:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    2ba8:	d405      	bmi.n	2bb6 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    2baa:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    2bac:	bf4c      	ite	mi
    2bae:	492a      	ldrmi	r1, [pc, #168]	; (2c58 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    2bb0:	492a      	ldrpl	r1, [pc, #168]	; (2c5c <hexdump_line_print+0xc4>)
    2bb2:	f7ff ffdf 	bl	2b74 <print_formatted>
	newline_print(output, flags);

	for (int i = 0; i < prefix_offset; i++) {
		print_formatted(output, " ");
    2bb6:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 2c60 <hexdump_line_print+0xc8>
{
    2bba:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    2bbe:	45a8      	cmp	r8, r5
    2bc0:	db2a      	blt.n	2c18 <hexdump_line_print+0x80>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    2bc2:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 2c64 <hexdump_line_print+0xcc>
			print_formatted(output, "%02x ", data[i]);
    2bc6:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 2c68 <hexdump_line_print+0xd0>
			print_formatted(output, " ");
    2bca:	f8df a094 	ldr.w	sl, [pc, #148]	; 2c60 <hexdump_line_print+0xc8>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2bce:	2500      	movs	r5, #0
		if (i < length) {
    2bd0:	42bd      	cmp	r5, r7
    2bd2:	d22f      	bcs.n	2c34 <hexdump_line_print+0x9c>
			print_formatted(output, "%02x ", data[i]);
    2bd4:	5d72      	ldrb	r2, [r6, r5]
    2bd6:	4649      	mov	r1, r9
    2bd8:	4620      	mov	r0, r4
    2bda:	f7ff ffcb 	bl	2b74 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2bde:	3501      	adds	r5, #1
    2be0:	2d10      	cmp	r5, #16
    2be2:	d120      	bne.n	2c26 <hexdump_line_print+0x8e>
		}
	}

	print_formatted(output, "|");
    2be4:	4921      	ldr	r1, [pc, #132]	; (2c6c <hexdump_line_print+0xd4>)
			char c = (char)data[i];

			print_formatted(output, "%c",
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    2be6:	f8df 8078 	ldr.w	r8, [pc, #120]	; 2c60 <hexdump_line_print+0xc8>
			print_formatted(output, "%c",
    2bea:	f8df 9084 	ldr.w	r9, [pc, #132]	; 2c70 <hexdump_line_print+0xd8>
	print_formatted(output, "|");
    2bee:	4620      	mov	r0, r4
    2bf0:	f7ff ffc0 	bl	2b74 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2bf4:	2500      	movs	r5, #0
		if (i < length) {
    2bf6:	42af      	cmp	r7, r5
    2bf8:	d928      	bls.n	2c4c <hexdump_line_print+0xb4>
			char c = (char)data[i];
    2bfa:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
    2bfc:	f1a2 0320 	sub.w	r3, r2, #32
    2c00:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(output, "%c",
    2c02:	bf28      	it	cs
    2c04:	222e      	movcs	r2, #46	; 0x2e
    2c06:	4649      	mov	r1, r9
    2c08:	4620      	mov	r0, r4
    2c0a:	f7ff ffb3 	bl	2b74 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2c0e:	3501      	adds	r5, #1
    2c10:	2d10      	cmp	r5, #16
    2c12:	d114      	bne.n	2c3e <hexdump_line_print+0xa6>
		}
	}
}
    2c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    2c18:	4649      	mov	r1, r9
    2c1a:	4620      	mov	r0, r4
    2c1c:	f7ff ffaa 	bl	2b74 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    2c20:	f108 0801 	add.w	r8, r8, #1
    2c24:	e7cb      	b.n	2bbe <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    2c26:	076a      	lsls	r2, r5, #29
    2c28:	d1d2      	bne.n	2bd0 <hexdump_line_print+0x38>
			print_formatted(output, " ");
    2c2a:	4651      	mov	r1, sl
    2c2c:	4620      	mov	r0, r4
    2c2e:	f7ff ffa1 	bl	2b74 <print_formatted>
    2c32:	e7cd      	b.n	2bd0 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
    2c34:	4641      	mov	r1, r8
    2c36:	4620      	mov	r0, r4
    2c38:	f7ff ff9c 	bl	2b74 <print_formatted>
    2c3c:	e7cf      	b.n	2bde <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    2c3e:	076b      	lsls	r3, r5, #29
    2c40:	d1d9      	bne.n	2bf6 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    2c42:	4641      	mov	r1, r8
    2c44:	4620      	mov	r0, r4
    2c46:	f7ff ff95 	bl	2b74 <print_formatted>
    2c4a:	e7d4      	b.n	2bf6 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    2c4c:	4641      	mov	r1, r8
    2c4e:	4620      	mov	r0, r4
    2c50:	f7ff ff90 	bl	2b74 <print_formatted>
    2c54:	e7db      	b.n	2c0e <hexdump_line_print+0x76>
    2c56:	bf00      	nop
    2c58:	0001fa1f 	.word	0x0001fa1f
    2c5c:	0001fa1e 	.word	0x0001fa1e
    2c60:	0001fa29 	.word	0x0001fa29
    2c64:	0001fa27 	.word	0x0001fa27
    2c68:	0001fa21 	.word	0x0001fa21
    2c6c:	0001fa2b 	.word	0x0001fa2b
    2c70:	0001fa2d 	.word	0x0001fa2d

00002c74 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    2c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c78:	b087      	sub	sp, #28
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    2c7a:	f011 0602 	ands.w	r6, r1, #2
{
    2c7e:	9205      	str	r2, [sp, #20]
    2c80:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
    2c84:	f9bd 9048 	ldrsh.w	r9, [sp, #72]	; 0x48
    2c88:	4607      	mov	r7, r0
    2c8a:	461a      	mov	r2, r3
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    2c8c:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    2c90:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    2c94:	d006      	beq.n	2ca4 <prefix_print+0x30>
	if (!format) {
    2c96:	f011 0f44 	tst.w	r1, #68	; 0x44
    2c9a:	d138      	bne.n	2d0e <prefix_print+0x9a>
		length = print_formatted(output, "[%08lu] ", timestamp);
    2c9c:	4933      	ldr	r1, [pc, #204]	; (2d6c <prefix_print+0xf8>)
    2c9e:	f7ff ff69 	bl	2b74 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    2ca2:	4606      	mov	r6, r0
	if (color) {
    2ca4:	f1ba 0f00 	cmp.w	sl, #0
    2ca8:	d00a      	beq.n	2cc0 <prefix_print+0x4c>
		const char *log_color = start && (colors[level] != NULL) ?
    2caa:	4b31      	ldr	r3, [pc, #196]	; (2d70 <prefix_print+0xfc>)
		print_formatted(output, "%s", log_color);
    2cac:	4931      	ldr	r1, [pc, #196]	; (2d74 <prefix_print+0x100>)
		const char *log_color = start && (colors[level] != NULL) ?
    2cae:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
		print_formatted(output, "%s", log_color);
    2cb2:	4b31      	ldr	r3, [pc, #196]	; (2d78 <prefix_print+0x104>)
    2cb4:	4638      	mov	r0, r7
    2cb6:	2a00      	cmp	r2, #0
    2cb8:	bf08      	it	eq
    2cba:	461a      	moveq	r2, r3
    2cbc:	f7ff ff5a 	bl	2b74 <print_formatted>
	if (level_on) {
    2cc0:	b13d      	cbz	r5, 2cd2 <prefix_print+0x5e>
		total += print_formatted(output, "<%s> ", severity[level]);
    2cc2:	4b2e      	ldr	r3, [pc, #184]	; (2d7c <prefix_print+0x108>)
    2cc4:	492e      	ldr	r1, [pc, #184]	; (2d80 <prefix_print+0x10c>)
    2cc6:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
    2cca:	4638      	mov	r0, r7
    2ccc:	f7ff ff52 	bl	2b74 <print_formatted>
    2cd0:	4605      	mov	r5, r0
	if (source_id >= 0) {
    2cd2:	f1b9 0f00 	cmp.w	r9, #0
    2cd6:	db16      	blt.n	2d06 <prefix_print+0x92>
		total += print_formatted(output,
    2cd8:	9b05      	ldr	r3, [sp, #20]
    2cda:	2b00      	cmp	r3, #0
    2cdc:	d043      	beq.n	2d66 <prefix_print+0xf2>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    2cde:	2301      	movs	r3, #1
    2ce0:	fa03 f808 	lsl.w	r8, r3, r8
		total += print_formatted(output,
    2ce4:	4b27      	ldr	r3, [pc, #156]	; (2d84 <prefix_print+0x110>)
    2ce6:	4c28      	ldr	r4, [pc, #160]	; (2d88 <prefix_print+0x114>)
    2ce8:	f018 0f10 	tst.w	r8, #16
    2cec:	bf18      	it	ne
    2cee:	461c      	movne	r4, r3
    2cf0:	4649      	mov	r1, r9
    2cf2:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    2cf6:	f7ff fead 	bl	2a54 <log_source_name_get>
    2cfa:	4621      	mov	r1, r4
    2cfc:	4602      	mov	r2, r0
    2cfe:	4638      	mov	r0, r7
    2d00:	f7ff ff38 	bl	2b74 <print_formatted>
    2d04:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    2d06:	19a8      	adds	r0, r5, r6
    2d08:	b007      	add	sp, #28
    2d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    2d0e:	4b1f      	ldr	r3, [pc, #124]	; (2d8c <prefix_print+0x118>)
    2d10:	6819      	ldr	r1, [r3, #0]
    2d12:	b331      	cbz	r1, 2d62 <prefix_print+0xee>
		timestamp /= timestamp_div;
    2d14:	4b1e      	ldr	r3, [pc, #120]	; (2d90 <prefix_print+0x11c>)
    2d16:	f44f 6661 	mov.w	r6, #3600	; 0xe10
    2d1a:	681b      	ldr	r3, [r3, #0]
    2d1c:	fbb2 f3f3 	udiv	r3, r2, r3
		ms = (remainder * 1000U) / freq;
    2d20:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
		total_seconds = timestamp / freq;
    2d24:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    2d28:	fbb4 f2f6 	udiv	r2, r4, r6
    2d2c:	fb06 4612 	mls	r6, r6, r2, r4
		remainder = timestamp % freq;
    2d30:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    2d34:	fb0b f404 	mul.w	r4, fp, r4
		mins = seconds / 60U;
    2d38:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2d3c:	fbb4 fef1 	udiv	lr, r4, r1
		mins = seconds / 60U;
    2d40:	fbb6 f3fc 	udiv	r3, r6, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2d44:	fb01 441e 	mls	r4, r1, lr, r4
			length = print_formatted(output,
    2d48:	fb0c 6613 	mls	r6, ip, r3, r6
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2d4c:	fb0b f404 	mul.w	r4, fp, r4
			length = print_formatted(output,
    2d50:	9600      	str	r6, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2d52:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(output,
    2d56:	e9cd e101 	strd	lr, r1, [sp, #4]
    2d5a:	490e      	ldr	r1, [pc, #56]	; (2d94 <prefix_print+0x120>)
    2d5c:	f7ff ff0a 	bl	2b74 <print_formatted>
    2d60:	e79f      	b.n	2ca2 <prefix_print+0x2e>
		length = 0;
    2d62:	4608      	mov	r0, r1
    2d64:	e79d      	b.n	2ca2 <prefix_print+0x2e>
		total += print_formatted(output,
    2d66:	4c08      	ldr	r4, [pc, #32]	; (2d88 <prefix_print+0x114>)
    2d68:	e7c2      	b.n	2cf0 <prefix_print+0x7c>
    2d6a:	bf00      	nop
    2d6c:	0001fa39 	.word	0x0001fa39
    2d70:	0001f2fc 	.word	0x0001f2fc
    2d74:	00020681 	.word	0x00020681
    2d78:	0001f8d1 	.word	0x0001f8d1
    2d7c:	0001f310 	.word	0x0001f310
    2d80:	0001fa5e 	.word	0x0001fa5e
    2d84:	0001fa35 	.word	0x0001fa35
    2d88:	0001fa30 	.word	0x0001fa30
    2d8c:	20001900 	.word	0x20001900
    2d90:	20001904 	.word	0x20001904
    2d94:	0001fa42 	.word	0x0001fa42

00002d98 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    2d98:	b538      	push	{r3, r4, r5, lr}
    2d9a:	460c      	mov	r4, r1
	if (color) {
    2d9c:	07e1      	lsls	r1, r4, #31
{
    2d9e:	4605      	mov	r5, r0
	if (color) {
    2da0:	d503      	bpl.n	2daa <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    2da2:	4a08      	ldr	r2, [pc, #32]	; (2dc4 <postfix_print+0x2c>)
    2da4:	4908      	ldr	r1, [pc, #32]	; (2dc8 <postfix_print+0x30>)
    2da6:	f7ff fee5 	bl	2b74 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    2daa:	06e2      	lsls	r2, r4, #27
    2dac:	d408      	bmi.n	2dc0 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    2dae:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    2db0:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    2db2:	bf4c      	ite	mi
    2db4:	4905      	ldrmi	r1, [pc, #20]	; (2dcc <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    2db6:	4906      	ldrpl	r1, [pc, #24]	; (2dd0 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    2db8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    2dbc:	f7ff beda 	b.w	2b74 <print_formatted>
}
    2dc0:	bd38      	pop	{r3, r4, r5, pc}
    2dc2:	bf00      	nop
    2dc4:	0001f8d1 	.word	0x0001f8d1
    2dc8:	00020681 	.word	0x00020681
    2dcc:	0001fa1f 	.word	0x0001fa1f
    2dd0:	0001fa1e 	.word	0x0001fa1e

00002dd4 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg,
			    uint32_t flags)
{
    2dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    2dd8:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(output, flags, std_msg, timestamp,
    2dda:	f013 0807 	ands.w	r8, r3, #7
{
    2dde:	b08a      	sub	sp, #40	; 0x28
    2de0:	4605      	mov	r5, r0
    2de2:	460e      	mov	r6, r1
    2de4:	4617      	mov	r7, r2
			0 : prefix_print(output, flags, std_msg, timestamp,
    2de6:	d022      	beq.n	2e2e <log_output_msg_process+0x5a>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    2de8:	7a0a      	ldrb	r2, [r1, #8]
	return msg->hdr.ids.source_id;
    2dea:	8949      	ldrh	r1, [r1, #10]
    2dec:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    2df0:	f3c1 1189 	ubfx	r1, r1, #6, #10
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    2df4:	43d2      	mvns	r2, r2
    2df6:	e9cd 8300 	strd	r8, r3, [sp]
    2dfa:	9102      	str	r1, [sp, #8]
    2dfc:	68f3      	ldr	r3, [r6, #12]
    2dfe:	f002 0201 	and.w	r2, r2, #1
    2e02:	4639      	mov	r1, r7
    2e04:	f7ff ff36 	bl	2c74 <prefix_print>
    2e08:	4681      	mov	r9, r0
    2e0a:	7a34      	ldrb	r4, [r6, #8]
    2e0c:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    2e0e:	f014 0401 	ands.w	r4, r4, #1
    2e12:	d00e      	beq.n	2e32 <log_output_msg_process+0x5e>
		std_print(msg, output);
    2e14:	4629      	mov	r1, r5
    2e16:	4630      	mov	r0, r6
    2e18:	f016 fcea 	bl	197f0 <std_print>
		raw_string_print(msg, output);
	} else {
		hexdump_print(msg, output, prefix_offset, flags);
	}

	if (!raw_string) {
    2e1c:	f1b8 0f00 	cmp.w	r8, #0
    2e20:	d02b      	beq.n	2e7a <log_output_msg_process+0xa6>
		postfix_print(output, flags, level);
    2e22:	4642      	mov	r2, r8
    2e24:	4639      	mov	r1, r7
    2e26:	4628      	mov	r0, r5
    2e28:	f7ff ffb6 	bl	2d98 <postfix_print>
    2e2c:	e025      	b.n	2e7a <log_output_msg_process+0xa6>
			0 : prefix_print(output, flags, std_msg, timestamp,
    2e2e:	46c1      	mov	r9, r8
    2e30:	e7eb      	b.n	2e0a <log_output_msg_process+0x36>
	} else if (raw_string) {
    2e32:	f1b8 0f00 	cmp.w	r8, #0
    2e36:	d126      	bne.n	2e86 <log_output_msg_process+0xb2>
	size_t offset = 0;
    2e38:	4627      	mov	r7, r4
		length = output->size;
    2e3a:	68eb      	ldr	r3, [r5, #12]
    2e3c:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
    2e3e:	aa06      	add	r2, sp, #24
    2e40:	463b      	mov	r3, r7
    2e42:	68a9      	ldr	r1, [r5, #8]
    2e44:	4630      	mov	r0, r6
    2e46:	f016 fcbf 	bl	197c8 <log_msg_hexdump_data_get>
		output->control_block->offset = length;
    2e4a:	9a06      	ldr	r2, [sp, #24]
    2e4c:	686b      	ldr	r3, [r5, #4]
    2e4e:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    2e50:	b13a      	cbz	r2, 2e62 <log_output_msg_process+0x8e>
			eol = (output->buf[length - 1] == '\n');
    2e52:	68ab      	ldr	r3, [r5, #8]
    2e54:	4413      	add	r3, r2
    2e56:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    2e5a:	f1a4 030a 	sub.w	r3, r4, #10
    2e5e:	425c      	negs	r4, r3
    2e60:	415c      	adcs	r4, r3
		log_output_flush(output);
    2e62:	4628      	mov	r0, r5
    2e64:	f016 fe21 	bl	19aaa <log_output_flush>
		offset += length;
    2e68:	9b06      	ldr	r3, [sp, #24]
    2e6a:	441f      	add	r7, r3
	} while (length > 0);
    2e6c:	2b00      	cmp	r3, #0
    2e6e:	d1e4      	bne.n	2e3a <log_output_msg_process+0x66>
	if (eol) {
    2e70:	b11c      	cbz	r4, 2e7a <log_output_msg_process+0xa6>
		print_formatted(output, "\r");
    2e72:	4914      	ldr	r1, [pc, #80]	; (2ec4 <log_output_msg_process+0xf0>)
    2e74:	4628      	mov	r0, r5
    2e76:	f7ff fe7d 	bl	2b74 <print_formatted>
	}

	log_output_flush(output);
    2e7a:	4628      	mov	r0, r5
}
    2e7c:	b00a      	add	sp, #40	; 0x28
    2e7e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
    2e82:	f016 be12 	b.w	19aaa <log_output_flush>
	print_formatted(output, "%s", log_msg_str_get(msg));
    2e86:	4630      	mov	r0, r6
    2e88:	f016 fbec 	bl	19664 <log_msg_str_get>
    2e8c:	490e      	ldr	r1, [pc, #56]	; (2ec8 <log_output_msg_process+0xf4>)
    2e8e:	4602      	mov	r2, r0
    2e90:	4628      	mov	r0, r5
    2e92:	f7ff fe6f 	bl	2b74 <print_formatted>
		length = sizeof(buf);
    2e96:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    2e9a:	aa05      	add	r2, sp, #20
    2e9c:	4623      	mov	r3, r4
    2e9e:	a906      	add	r1, sp, #24
    2ea0:	4630      	mov	r0, r6
		length = sizeof(buf);
    2ea2:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    2ea6:	f016 fc8f 	bl	197c8 <log_msg_hexdump_data_get>
		if (length) {
    2eaa:	9a05      	ldr	r2, [sp, #20]
    2eac:	2a00      	cmp	r2, #0
    2eae:	d0b8      	beq.n	2e22 <log_output_msg_process+0x4e>
			hexdump_line_print(output, buf, length,
    2eb0:	464b      	mov	r3, r9
    2eb2:	9700      	str	r7, [sp, #0]
    2eb4:	a906      	add	r1, sp, #24
    2eb6:	4628      	mov	r0, r5
    2eb8:	f7ff fe6e 	bl	2b98 <hexdump_line_print>
			offset += length;
    2ebc:	9b05      	ldr	r3, [sp, #20]
    2ebe:	441c      	add	r4, r3
		length = sizeof(buf);
    2ec0:	e7eb      	b.n	2e9a <log_output_msg_process+0xc6>
    2ec2:	bf00      	nop
    2ec4:	0001fa64 	.word	0x0001fa64
    2ec8:	00020681 	.word	0x00020681

00002ecc <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    2ecc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    2ece:	f242 730f 	movw	r3, #9999	; 0x270f
    2ed2:	428b      	cmp	r3, r1
    2ed4:	bf28      	it	cs
    2ed6:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    2ed8:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    2eda:	4a0f      	ldr	r2, [pc, #60]	; (2f18 <log_output_dropped_process+0x4c>)
{
    2edc:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    2ede:	2105      	movs	r1, #5
    2ee0:	4668      	mov	r0, sp
    2ee2:	f015 fe7c 	bl	18bde <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    2ee6:	6863      	ldr	r3, [r4, #4]
    2ee8:	490c      	ldr	r1, [pc, #48]	; (2f1c <log_output_dropped_process+0x50>)
    2eea:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    2eec:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    2eee:	220b      	movs	r2, #11
    2ef0:	4628      	mov	r0, r5
    2ef2:	f016 fc70 	bl	197d6 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    2ef6:	6863      	ldr	r3, [r4, #4]
    2ef8:	4632      	mov	r2, r6
    2efa:	4669      	mov	r1, sp
    2efc:	4628      	mov	r0, r5
    2efe:	685b      	ldr	r3, [r3, #4]
    2f00:	f016 fc69 	bl	197d6 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    2f04:	6863      	ldr	r3, [r4, #4]
    2f06:	4906      	ldr	r1, [pc, #24]	; (2f20 <log_output_dropped_process+0x54>)
    2f08:	685b      	ldr	r3, [r3, #4]
    2f0a:	221b      	movs	r2, #27
    2f0c:	4628      	mov	r0, r5
    2f0e:	f016 fc62 	bl	197d6 <buffer_write>
		     output->control_block->ctx);
}
    2f12:	b002      	add	sp, #8
    2f14:	bd70      	pop	{r4, r5, r6, pc}
    2f16:	bf00      	nop
    2f18:	000227a6 	.word	0x000227a6
    2f1c:	0001fa9e 	.word	0x0001fa9e
    2f20:	0001fa82 	.word	0x0001fa82

00002f24 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    2f24:	4a08      	ldr	r2, [pc, #32]	; (2f48 <log_output_timestamp_freq_set+0x24>)
{
    2f26:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    2f28:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    2f2a:	4c08      	ldr	r4, [pc, #32]	; (2f4c <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    2f2c:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    2f2e:	2100      	movs	r1, #0
    2f30:	42a0      	cmp	r0, r4
    2f32:	d804      	bhi.n	2f3e <log_output_timestamp_freq_set+0x1a>
    2f34:	b101      	cbz	r1, 2f38 <log_output_timestamp_freq_set+0x14>
    2f36:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    2f38:	4b05      	ldr	r3, [pc, #20]	; (2f50 <log_output_timestamp_freq_set+0x2c>)
    2f3a:	6018      	str	r0, [r3, #0]
}
    2f3c:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    2f3e:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    2f40:	005b      	lsls	r3, r3, #1
    2f42:	2101      	movs	r1, #1
    2f44:	e7f4      	b.n	2f30 <log_output_timestamp_freq_set+0xc>
    2f46:	bf00      	nop
    2f48:	20001904 	.word	0x20001904
    2f4c:	000f4240 	.word	0x000f4240
    2f50:	20001900 	.word	0x20001900

00002f54 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    2f54:	4b01      	ldr	r3, [pc, #4]	; (2f5c <log_backend_rtt_init+0x8>)
    2f56:	2201      	movs	r2, #1
    2f58:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    2f5a:	4770      	bx	lr
    2f5c:	20002e7e 	.word	0x20002e7e

00002f60 <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
    2f60:	4b02      	ldr	r3, [pc, #8]	; (2f6c <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    2f62:	4803      	ldr	r0, [pc, #12]	; (2f70 <panic+0x10>)
    2f64:	2201      	movs	r2, #1
    2f66:	701a      	strb	r2, [r3, #0]
    2f68:	f016 bd9f 	b.w	19aaa <log_output_flush>
    2f6c:	20002e7f 	.word	0x20002e7f
    2f70:	0001f340 	.word	0x0001f340

00002f74 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    2f74:	4801      	ldr	r0, [pc, #4]	; (2f7c <dropped+0x8>)
    2f76:	f7ff bfa9 	b.w	2ecc <log_output_dropped_process>
    2f7a:	bf00      	nop
    2f7c:	0001f340 	.word	0x0001f340

00002f80 <put>:
{
    2f80:	b510      	push	{r4, lr}
	log_msg_get(msg);
    2f82:	4608      	mov	r0, r1
    2f84:	460c      	mov	r4, r1
    2f86:	f016 fb2b 	bl	195e0 <log_msg_get>
	log_output_msg_process(output, msg, flags);
    2f8a:	4805      	ldr	r0, [pc, #20]	; (2fa0 <put+0x20>)
    2f8c:	4621      	mov	r1, r4
    2f8e:	220f      	movs	r2, #15
    2f90:	f7ff ff20 	bl	2dd4 <log_output_msg_process>
	log_msg_put(msg);
    2f94:	4620      	mov	r0, r4
}
    2f96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2f9a:	f016 bb50 	b.w	1963e <log_msg_put>
    2f9e:	bf00      	nop
    2fa0:	0001f340 	.word	0x0001f340

00002fa4 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    2fa4:	4b05      	ldr	r3, [pc, #20]	; (2fbc <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
    2fa6:	781b      	ldrb	r3, [r3, #0]
    2fa8:	b11b      	cbz	r3, 2fb2 <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    2faa:	f241 3088 	movw	r0, #5000	; 0x1388
    2fae:	f01b bd07 	b.w	1e9c0 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    2fb2:	20a4      	movs	r0, #164	; 0xa4
    2fb4:	2100      	movs	r1, #0
    2fb6:	f015 ba33 	b.w	18420 <z_impl_k_sleep>
    2fba:	bf00      	nop
    2fbc:	20002e7f 	.word	0x20002e7f

00002fc0 <data_out_block_mode>:
{
    2fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    2fc4:	f8df 908c 	ldr.w	r9, [pc, #140]	; 3054 <data_out_block_mode+0x94>
	return z_impl_k_mutex_lock(mutex, timeout);
    2fc8:	f8df a08c 	ldr.w	sl, [pc, #140]	; 3058 <data_out_block_mode+0x98>
{
    2fcc:	4680      	mov	r8, r0
    2fce:	460f      	mov	r7, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    2fd0:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
    2fd2:	f899 5000 	ldrb.w	r5, [r9]
    2fd6:	b9cd      	cbnz	r5, 300c <data_out_block_mode+0x4c>
    2fd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2fdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2fe0:	4650      	mov	r0, sl
    2fe2:	f014 fc4b 	bl	1787c <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    2fe6:	463a      	mov	r2, r7
    2fe8:	4641      	mov	r1, r8
    2fea:	4628      	mov	r0, r5
    2fec:	f014 f904 	bl	171f8 <SEGGER_RTT_WriteSkipNoLock>
    2ff0:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
    2ff2:	4650      	mov	r0, sl
    2ff4:	f014 fcba 	bl	1796c <z_impl_k_mutex_unlock>
		if (ret) {
    2ff8:	4d18      	ldr	r5, [pc, #96]	; (305c <data_out_block_mode+0x9c>)
    2ffa:	b1fe      	cbz	r6, 303c <data_out_block_mode+0x7c>
	host_present = true;
    2ffc:	2301      	movs	r3, #1
    2ffe:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    3000:	f899 3000 	ldrb.w	r3, [r9]
    3004:	b96b      	cbnz	r3, 3022 <data_out_block_mode+0x62>
}
    3006:	4638      	mov	r0, r7
    3008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    300c:	463a      	mov	r2, r7
    300e:	4641      	mov	r1, r8
    3010:	2000      	movs	r0, #0
    3012:	f014 f8f1 	bl	171f8 <SEGGER_RTT_WriteSkipNoLock>
    3016:	4606      	mov	r6, r0
    3018:	e7ee      	b.n	2ff8 <data_out_block_mode+0x38>
	if (retry_cnt == 0) {
    301a:	b95c      	cbnz	r4, 3034 <data_out_block_mode+0x74>
		host_present = false;
    301c:	702c      	strb	r4, [r5, #0]
    301e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    3022:	2000      	movs	r0, #0
    3024:	f014 f964 	bl	172f0 <SEGGER_RTT_HasDataUp>
    3028:	2800      	cmp	r0, #0
    302a:	d0ec      	beq.n	3006 <data_out_block_mode+0x46>
    302c:	782b      	ldrb	r3, [r5, #0]
    302e:	2b00      	cmp	r3, #0
    3030:	d1f3      	bne.n	301a <data_out_block_mode+0x5a>
    3032:	e7e8      	b.n	3006 <data_out_block_mode+0x46>
			on_failed_write(retry_cnt--);
    3034:	3c01      	subs	r4, #1
    3036:	f7ff ffb5 	bl	2fa4 <on_failed_write.part.0>
    303a:	e7f2      	b.n	3022 <data_out_block_mode+0x62>
		} else if (host_present) {
    303c:	782b      	ldrb	r3, [r5, #0]
    303e:	b113      	cbz	r3, 3046 <data_out_block_mode+0x86>
	if (retry_cnt == 0) {
    3040:	3c01      	subs	r4, #1
    3042:	d104      	bne.n	304e <data_out_block_mode+0x8e>
		host_present = false;
    3044:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    3046:	782b      	ldrb	r3, [r5, #0]
    3048:	2b00      	cmp	r3, #0
    304a:	d1c2      	bne.n	2fd2 <data_out_block_mode+0x12>
    304c:	e7db      	b.n	3006 <data_out_block_mode+0x46>
    304e:	f7ff ffa9 	bl	2fa4 <on_failed_write.part.0>
    3052:	e7f8      	b.n	3046 <data_out_block_mode+0x86>
    3054:	20002e7f 	.word	0x20002e7f
    3058:	20000b58 	.word	0x20000b58
    305c:	20002e7e 	.word	0x20002e7e

00003060 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
    3060:	4b10      	ldr	r3, [pc, #64]	; (30a4 <settings_save_one+0x44>)
{
    3062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
    3066:	681c      	ldr	r4, [r3, #0]
{
    3068:	4605      	mov	r5, r0
    306a:	460e      	mov	r6, r1
    306c:	4617      	mov	r7, r2
	if (!cs) {
    306e:	b1ac      	cbz	r4, 309c <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
    3070:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3074:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3078:	480b      	ldr	r0, [pc, #44]	; (30a8 <settings_save_one+0x48>)
    307a:	f014 fbff 	bl	1787c <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    307e:	6863      	ldr	r3, [r4, #4]
    3080:	4632      	mov	r2, r6
    3082:	f8d3 8008 	ldr.w	r8, [r3, #8]
    3086:	4629      	mov	r1, r5
    3088:	463b      	mov	r3, r7
    308a:	4620      	mov	r0, r4
    308c:	47c0      	blx	r8
    308e:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    3090:	4805      	ldr	r0, [pc, #20]	; (30a8 <settings_save_one+0x48>)
    3092:	f014 fc6b 	bl	1796c <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
    3096:	4620      	mov	r0, r4
    3098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    309c:	f06f 0401 	mvn.w	r4, #1
    30a0:	e7f9      	b.n	3096 <settings_save_one+0x36>
    30a2:	bf00      	nop
    30a4:	20001924 	.word	0x20001924
    30a8:	20000b6c 	.word	0x20000b6c

000030ac <settings_load_subtree_direct>:
{
    30ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
    30ae:	e9cd 0101 	strd	r0, r1, [sp, #4]
    30b2:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
    30b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    30b8:	480a      	ldr	r0, [pc, #40]	; (30e4 <settings_load_subtree_direct+0x38>)
    30ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    30be:	f014 fbdd 	bl	1787c <z_impl_k_mutex_lock>
	return list->head;
    30c2:	4b09      	ldr	r3, [pc, #36]	; (30e8 <settings_load_subtree_direct+0x3c>)
    30c4:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    30c6:	b134      	cbz	r4, 30d6 <settings_load_subtree_direct+0x2a>
		cs->cs_itf->csi_load(cs, &arg);
    30c8:	6863      	ldr	r3, [r4, #4]
    30ca:	4620      	mov	r0, r4
    30cc:	681b      	ldr	r3, [r3, #0]
    30ce:	a901      	add	r1, sp, #4
    30d0:	4798      	blx	r3
	return node->next;
    30d2:	6824      	ldr	r4, [r4, #0]
    30d4:	e7f7      	b.n	30c6 <settings_load_subtree_direct+0x1a>
	return z_impl_k_mutex_unlock(mutex);
    30d6:	4803      	ldr	r0, [pc, #12]	; (30e4 <settings_load_subtree_direct+0x38>)
    30d8:	f014 fc48 	bl	1796c <z_impl_k_mutex_unlock>
}
    30dc:	2000      	movs	r0, #0
    30de:	b004      	add	sp, #16
    30e0:	bd10      	pop	{r4, pc}
    30e2:	bf00      	nop
    30e4:	20000b6c 	.word	0x20000b6c
    30e8:	2000191c 	.word	0x2000191c

000030ec <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    30ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    30ee:	4605      	mov	r5, r0
	__asm__ volatile(
    30f0:	f04f 0320 	mov.w	r3, #32
    30f4:	f3ef 8611 	mrs	r6, BASEPRI
    30f8:	f383 8812 	msr	BASEPRI_MAX, r3
    30fc:	f3bf 8f6f 	isb	sy
	return list->head;
    3100:	4b09      	ldr	r3, [pc, #36]	; (3128 <pm_state_notify+0x3c>)
    3102:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3104:	b15c      	cbz	r4, 311e <pm_state_notify+0x32>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
    3106:	4f09      	ldr	r7, [pc, #36]	; (312c <pm_state_notify+0x40>)
			callback = notifier->state_exit;
    3108:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    310c:	2d00      	cmp	r5, #0
    310e:	bf08      	it	eq
    3110:	4613      	moveq	r3, r2
		if (callback) {
    3112:	b10b      	cbz	r3, 3118 <pm_state_notify+0x2c>
			callback(z_power_state.state);
    3114:	7838      	ldrb	r0, [r7, #0]
    3116:	4798      	blx	r3
	return node->next;
    3118:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    311a:	2c00      	cmp	r4, #0
    311c:	d1f4      	bne.n	3108 <pm_state_notify+0x1c>
	__asm__ volatile(
    311e:	f386 8811 	msr	BASEPRI, r6
    3122:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    3126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3128:	20001928 	.word	0x20001928
    312c:	20001930 	.word	0x20001930

00003130 <pm_system_resume>:

void pm_system_resume(void)
{
    3130:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    3132:	4b0f      	ldr	r3, [pc, #60]	; (3170 <pm_system_resume+0x40>)
    3134:	681a      	ldr	r2, [r3, #0]
    3136:	b9ba      	cbnz	r2, 3168 <pm_system_resume+0x38>
		post_ops_done = 1;
    3138:	2201      	movs	r2, #1
    313a:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
    313c:	4a0d      	ldr	r2, [pc, #52]	; (3174 <pm_system_resume+0x44>)
    313e:	ca07      	ldmia	r2, {r0, r1, r2}
    3140:	ab01      	add	r3, sp, #4
    3142:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    3146:	4a0c      	ldr	r2, [pc, #48]	; (3178 <pm_system_resume+0x48>)
    3148:	b14a      	cbz	r2, 315e <pm_system_resume+0x2e>
		pm_power_state_exit_post_ops(info);
    314a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    314e:	f017 f8c0 	bl	1a2d2 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    3152:	2000      	movs	r0, #0
	}
}
    3154:	b005      	add	sp, #20
    3156:	f85d eb04 	ldr.w	lr, [sp], #4
		pm_state_notify(false);
    315a:	f7ff bfc7 	b.w	30ec <pm_state_notify>
    315e:	f382 8811 	msr	BASEPRI, r2
    3162:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    3166:	e7f4      	b.n	3152 <pm_system_resume+0x22>
}
    3168:	b005      	add	sp, #20
    316a:	f85d fb04 	ldr.w	pc, [sp], #4
    316e:	bf00      	nop
    3170:	2000027c 	.word	0x2000027c
    3174:	20001930 	.word	0x20001930
    3178:	0001a2d3 	.word	0x0001a2d3

0000317c <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
    317c:	b5f0      	push	{r4, r5, r6, r7, lr}
    317e:	b089      	sub	sp, #36	; 0x24
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
    3180:	466e      	mov	r6, sp
    3182:	4601      	mov	r1, r0
{
    3184:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
    3186:	4630      	mov	r0, r6
    3188:	f016 fcf4 	bl	19b74 <pm_policy_next_state>
    318c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    3190:	4c17      	ldr	r4, [pc, #92]	; (31f0 <pm_system_suspend+0x74>)
    3192:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    3196:	7820      	ldrb	r0, [r4, #0]
    3198:	4627      	mov	r7, r4
    319a:	b338      	cbz	r0, 31ec <pm_system_suspend+0x70>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
    319c:	4b15      	ldr	r3, [pc, #84]	; (31f4 <pm_system_suspend+0x78>)
    319e:	2100      	movs	r1, #0
    31a0:	6019      	str	r1, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
    31a2:	1c6b      	adds	r3, r5, #1
    31a4:	d00d      	beq.n	31c2 <pm_system_suspend+0x46>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    31a6:	4814      	ldr	r0, [pc, #80]	; (31f8 <pm_system_suspend+0x7c>)
    31a8:	4616      	mov	r6, r2
    31aa:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    31ae:	4a13      	ldr	r2, [pc, #76]	; (31fc <pm_system_suspend+0x80>)
    31b0:	2300      	movs	r3, #0
    31b2:	fbe6 010c 	umlal	r0, r1, r6, ip
    31b6:	f7fc ffe3 	bl	180 <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    31ba:	2101      	movs	r1, #1
    31bc:	1a28      	subs	r0, r5, r0
    31be:	f01b fbdf 	bl	1e980 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    31c2:	f014 feaf 	bl	17f24 <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
    31c6:	2001      	movs	r0, #1
    31c8:	f7ff ff90 	bl	30ec <pm_state_notify>
	pm_state_set(z_power_state);
    31cc:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
    31d0:	ab05      	add	r3, sp, #20
    31d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    31d6:	4a0a      	ldr	r2, [pc, #40]	; (3200 <pm_system_suspend+0x84>)
    31d8:	b11a      	cbz	r2, 31e2 <pm_system_suspend+0x66>
		pm_power_state_set(info);
    31da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    31de:	f017 f865 	bl	1a2ac <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
    31e2:	f7ff ffa5 	bl	3130 <pm_system_resume>
	k_sched_unlock();
    31e6:	f015 f86b 	bl	182c0 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
    31ea:	7820      	ldrb	r0, [r4, #0]
}
    31ec:	b009      	add	sp, #36	; 0x24
    31ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31f0:	20001930 	.word	0x20001930
    31f4:	2000027c 	.word	0x2000027c
    31f8:	000f423f 	.word	0x000f423f
    31fc:	000f4240 	.word	0x000f4240
    3200:	0001a2ad 	.word	0x0001a2ad

00003204 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    3204:	4904      	ldr	r1, [pc, #16]	; (3218 <sub_bytes+0x14>)
    3206:	1e43      	subs	r3, r0, #1
    3208:	300f      	adds	r0, #15
    320a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    320e:	5c8a      	ldrb	r2, [r1, r2]
    3210:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    3212:	4283      	cmp	r3, r0
    3214:	d1f9      	bne.n	320a <sub_bytes+0x6>
	}
}
    3216:	4770      	bx	lr
    3218:	0001fac7 	.word	0x0001fac7

0000321c <tc_aes128_set_encrypt_key>:
{
    321c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    321e:	4e26      	ldr	r6, [pc, #152]	; (32b8 <tc_aes128_set_encrypt_key+0x9c>)
{
    3220:	4607      	mov	r7, r0
    3222:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    3224:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    3226:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    3228:	ad01      	add	r5, sp, #4
    322a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    322c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    322e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    3230:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    3234:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    3238:	4638      	mov	r0, r7
    323a:	2f00      	cmp	r7, #0
    323c:	d038      	beq.n	32b0 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
    323e:	2c00      	cmp	r4, #0
    3240:	d038      	beq.n	32b4 <tc_aes128_set_encrypt_key+0x98>
    3242:	1f38      	subs	r0, r7, #4
    3244:	4621      	mov	r1, r4
    3246:	4602      	mov	r2, r0
    3248:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    324a:	784b      	ldrb	r3, [r1, #1]
    324c:	780d      	ldrb	r5, [r1, #0]
    324e:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    3250:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    3254:	78cd      	ldrb	r5, [r1, #3]
    3256:	432b      	orrs	r3, r5
    3258:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
    325a:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    325c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    3260:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    3262:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    3266:	d1f0      	bne.n	324a <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    3268:	4c14      	ldr	r4, [pc, #80]	; (32bc <tc_aes128_set_encrypt_key+0xa0>)
    326a:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    326c:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    326e:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    3270:	d116      	bne.n	32a0 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    3272:	f3c3 4207 	ubfx	r2, r3, #16, #8
    3276:	5ca5      	ldrb	r5, [r4, r2]
    3278:	0e1a      	lsrs	r2, r3, #24
    327a:	5ca2      	ldrb	r2, [r4, r2]
    327c:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    3280:	f3c3 2507 	ubfx	r5, r3, #8, #8
    3284:	b2db      	uxtb	r3, r3
    3286:	5d65      	ldrb	r5, [r4, r5]
    3288:	5ce3      	ldrb	r3, [r4, r3]
    328a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    328e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    3292:	f021 0303 	bic.w	r3, r1, #3
    3296:	3330      	adds	r3, #48	; 0x30
    3298:	446b      	add	r3, sp
    329a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    329e:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    32a0:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    32a4:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    32a6:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    32a8:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    32aa:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    32ac:	d1de      	bne.n	326c <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
    32ae:	2001      	movs	r0, #1
}
    32b0:	b00d      	add	sp, #52	; 0x34
    32b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    32b4:	4620      	mov	r0, r4
    32b6:	e7fb      	b.n	32b0 <tc_aes128_set_encrypt_key+0x94>
    32b8:	0001f1b0 	.word	0x0001f1b0
    32bc:	0001fac7 	.word	0x0001fac7

000032c0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    32c0:	4901      	ldr	r1, [pc, #4]	; (32c8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    32c2:	2210      	movs	r2, #16
	str	r2, [r1]
    32c4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    32c6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    32c8:	e000ed10 	.word	0xe000ed10

000032cc <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    32cc:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    32ce:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    32d0:	f380 8811 	msr	BASEPRI, r0
	isb
    32d4:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    32d8:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    32dc:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    32de:	b662      	cpsie	i
	isb
    32e0:	f3bf 8f6f 	isb	sy

	bx	lr
    32e4:	4770      	bx	lr
    32e6:	bf00      	nop

000032e8 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    32e8:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    32ea:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    32ec:	f381 8811 	msr	BASEPRI, r1

	wfe
    32f0:	bf20      	wfe

	msr	BASEPRI, r0
    32f2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    32f6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    32f8:	4770      	bx	lr
    32fa:	bf00      	nop

000032fc <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    32fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    32fe:	4606      	mov	r6, r0

	if (esf != NULL) {
    3300:	460c      	mov	r4, r1
    3302:	b301      	cbz	r1, 3346 <z_arm_fatal_error+0x4a>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    3304:	4b13      	ldr	r3, [pc, #76]	; (3354 <z_arm_fatal_error+0x58>)
    3306:	4d14      	ldr	r5, [pc, #80]	; (3358 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    3308:	4814      	ldr	r0, [pc, #80]	; (335c <z_arm_fatal_error+0x60>)
    330a:	1aed      	subs	r5, r5, r3
    330c:	08ed      	lsrs	r5, r5, #3
    330e:	01ad      	lsls	r5, r5, #6
    3310:	f045 0501 	orr.w	r5, r5, #1
    3314:	f8ad 5000 	strh.w	r5, [sp]
    3318:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    331c:	6809      	ldr	r1, [r1, #0]
    331e:	f016 f8ca 	bl	194b6 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    3322:	f8ad 5000 	strh.w	r5, [sp]
    3326:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    332a:	68e1      	ldr	r1, [r4, #12]
    332c:	480c      	ldr	r0, [pc, #48]	; (3360 <z_arm_fatal_error+0x64>)
    332e:	f016 f8c2 	bl	194b6 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    3332:	69e1      	ldr	r1, [r4, #28]
    3334:	480b      	ldr	r0, [pc, #44]	; (3364 <z_arm_fatal_error+0x68>)
    3336:	462a      	mov	r2, r5
    3338:	f016 f890 	bl	1945c <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    333c:	69a1      	ldr	r1, [r4, #24]
    333e:	480a      	ldr	r0, [pc, #40]	; (3368 <z_arm_fatal_error+0x6c>)
    3340:	462a      	mov	r2, r5
    3342:	f016 f88b 	bl	1945c <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    3346:	4621      	mov	r1, r4
    3348:	4630      	mov	r0, r6
}
    334a:	b002      	add	sp, #8
    334c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    3350:	f014 b840 	b.w	173d4 <z_fatal_error>
    3354:	0001ef2c 	.word	0x0001ef2c
    3358:	0001f144 	.word	0x0001f144
    335c:	0001fbc7 	.word	0x0001fbc7
    3360:	0001fbf6 	.word	0x0001fbf6
    3364:	0001fc25 	.word	0x0001fc25
    3368:	0001fc34 	.word	0x0001fc34

0000336c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    336c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    336e:	2b00      	cmp	r3, #0
    3370:	db08      	blt.n	3384 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3372:	2201      	movs	r2, #1
    3374:	f000 001f 	and.w	r0, r0, #31
    3378:	fa02 f000 	lsl.w	r0, r2, r0
    337c:	095b      	lsrs	r3, r3, #5
    337e:	4a02      	ldr	r2, [pc, #8]	; (3388 <arch_irq_enable+0x1c>)
    3380:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    3384:	4770      	bx	lr
    3386:	bf00      	nop
    3388:	e000e100 	.word	0xe000e100

0000338c <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    338c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    338e:	2b00      	cmp	r3, #0
    3390:	db0d      	blt.n	33ae <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3392:	2201      	movs	r2, #1
    3394:	095b      	lsrs	r3, r3, #5
    3396:	f000 001f 	and.w	r0, r0, #31
    339a:	fa02 f000 	lsl.w	r0, r2, r0
    339e:	3320      	adds	r3, #32
    33a0:	4a03      	ldr	r2, [pc, #12]	; (33b0 <arch_irq_disable+0x24>)
    33a2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    33a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    33aa:	f3bf 8f6f 	isb	sy
}
    33ae:	4770      	bx	lr
    33b0:	e000e100 	.word	0xe000e100

000033b4 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    33b4:	4b05      	ldr	r3, [pc, #20]	; (33cc <arch_irq_is_enabled+0x18>)
    33b6:	0942      	lsrs	r2, r0, #5
    33b8:	f000 001f 	and.w	r0, r0, #31
    33bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    33c0:	2301      	movs	r3, #1
    33c2:	fa03 f000 	lsl.w	r0, r3, r0
}
    33c6:	4010      	ands	r0, r2
    33c8:	4770      	bx	lr
    33ca:	bf00      	nop
    33cc:	e000e100 	.word	0xe000e100

000033d0 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    33d0:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    33d2:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    33d4:	bfa8      	it	ge
    33d6:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    33da:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    33de:	bfb8      	it	lt
    33e0:	4b06      	ldrlt	r3, [pc, #24]	; (33fc <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    33e2:	ea4f 1141 	mov.w	r1, r1, lsl #5
    33e6:	bfac      	ite	ge
    33e8:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    33ec:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    33f0:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    33f2:	bfb4      	ite	lt
    33f4:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    33f6:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    33fa:	4770      	bx	lr
    33fc:	e000ed14 	.word	0xe000ed14

00003400 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    3400:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    3402:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    3404:	4b04      	ldr	r3, [pc, #16]	; (3418 <_arch_isr_direct_pm+0x18>)
    3406:	6998      	ldr	r0, [r3, #24]
    3408:	b118      	cbz	r0, 3412 <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    340a:	2200      	movs	r2, #0
    340c:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit(idle_val);
    340e:	f01a ff73 	bl	1e2f8 <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    3412:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    3414:	bd08      	pop	{r3, pc}
    3416:	bf00      	nop
    3418:	20002dd0 	.word	0x20002dd0

0000341c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    341c:	bf30      	wfi
    b z_SysNmiOnReset
    341e:	f7ff bffd 	b.w	341c <z_SysNmiOnReset>
    3422:	bf00      	nop

00003424 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3424:	4a0f      	ldr	r2, [pc, #60]	; (3464 <z_arm_prep_c+0x40>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    3426:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3428:	4b0f      	ldr	r3, [pc, #60]	; (3468 <z_arm_prep_c+0x44>)
    342a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    342e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    3430:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3434:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    3438:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    343c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    3440:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
    3444:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    3448:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    344c:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    3450:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    3454:	f014 f862 	bl	1751c <z_bss_zero>
	z_data_copy();
    3458:	f015 f876 	bl	18548 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    345c:	f000 fb16 	bl	3a8c <z_arm_interrupt_init>
	z_cstart();
    3460:	f014 f866 	bl	17530 <z_cstart>
    3464:	00000000 	.word	0x00000000
    3468:	e000ed00 	.word	0xe000ed00

0000346c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    346c:	4a09      	ldr	r2, [pc, #36]	; (3494 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    346e:	490a      	ldr	r1, [pc, #40]	; (3498 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    3470:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    3472:	6809      	ldr	r1, [r1, #0]
    3474:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3476:	4909      	ldr	r1, [pc, #36]	; (349c <arch_swap+0x30>)
	_current->arch.basepri = key;
    3478:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    347a:	684b      	ldr	r3, [r1, #4]
    347c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3480:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    3482:	2300      	movs	r3, #0
    3484:	f383 8811 	msr	BASEPRI, r3
    3488:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    348c:	6893      	ldr	r3, [r2, #8]
}
    348e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    3490:	4770      	bx	lr
    3492:	bf00      	nop
    3494:	20002dd0 	.word	0x20002dd0
    3498:	0001f830 	.word	0x0001f830
    349c:	e000ed00 	.word	0xe000ed00

000034a0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    34a0:	4912      	ldr	r1, [pc, #72]	; (34ec <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    34a2:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    34a4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    34a8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    34aa:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    34ae:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    34b2:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    34b4:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    34b8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    34bc:	4f0c      	ldr	r7, [pc, #48]	; (34f0 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    34be:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    34c2:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    34c4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    34c6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    34c8:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    34ca:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    34cc:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    34ce:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    34d2:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    34d4:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    34d6:	f000 fb1b 	bl	3b10 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    34da:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    34de:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    34e2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    34e6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    34ea:	4770      	bx	lr
    ldr r1, =_kernel
    34ec:	20002dd0 	.word	0x20002dd0
    ldr v4, =_SCS_ICSR
    34f0:	e000ed04 	.word	0xe000ed04

000034f4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    34f4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    34f8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    34fa:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    34fe:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    3502:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    3504:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    3508:	2902      	cmp	r1, #2
    beq _oops
    350a:	d0ff      	beq.n	350c <_oops>

0000350c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    350c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    350e:	f016 fd60 	bl	19fd2 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    3512:	bd01      	pop	{r0, pc}

00003514 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    3514:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    3518:	9b00      	ldr	r3, [sp, #0]
    351a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    351e:	490a      	ldr	r1, [pc, #40]	; (3548 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    3520:	9b01      	ldr	r3, [sp, #4]
    3522:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    3526:	9b02      	ldr	r3, [sp, #8]
    3528:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    352c:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    3530:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3534:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    3538:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    353c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    353e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    3540:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    3542:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    3544:	4770      	bx	lr
    3546:	bf00      	nop
    3548:	00018d99 	.word	0x00018d99

0000354c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    354c:	4a09      	ldr	r2, [pc, #36]	; (3574 <z_check_thread_stack_fail+0x28>)
{
    354e:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    3550:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    3552:	b170      	cbz	r0, 3572 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    3554:	f113 0f16 	cmn.w	r3, #22
    3558:	6e80      	ldr	r0, [r0, #104]	; 0x68
    355a:	d005      	beq.n	3568 <z_check_thread_stack_fail+0x1c>
    355c:	f1a0 0220 	sub.w	r2, r0, #32
    3560:	429a      	cmp	r2, r3
    3562:	d805      	bhi.n	3570 <z_check_thread_stack_fail+0x24>
    3564:	4283      	cmp	r3, r0
    3566:	d203      	bcs.n	3570 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    3568:	4281      	cmp	r1, r0
    356a:	bf28      	it	cs
    356c:	2000      	movcs	r0, #0
    356e:	4770      	bx	lr
    3570:	2000      	movs	r0, #0
}
    3572:	4770      	bx	lr
    3574:	20002dd0 	.word	0x20002dd0

00003578 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    3578:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    357a:	4b09      	ldr	r3, [pc, #36]	; (35a0 <arch_switch_to_main_thread+0x28>)
    357c:	6098      	str	r0, [r3, #8]
{
    357e:	460d      	mov	r5, r1
    3580:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    3582:	f000 fac5 	bl	3b10 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    3586:	4620      	mov	r0, r4
    3588:	f385 8809 	msr	PSP, r5
    358c:	2100      	movs	r1, #0
    358e:	b663      	cpsie	if
    3590:	f381 8811 	msr	BASEPRI, r1
    3594:	f3bf 8f6f 	isb	sy
    3598:	2200      	movs	r2, #0
    359a:	2300      	movs	r3, #0
    359c:	f015 fbfc 	bl	18d98 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    35a0:	20002dd0 	.word	0x20002dd0

000035a4 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    35a4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    35a6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    35a8:	4a0b      	ldr	r2, [pc, #44]	; (35d8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    35aa:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    35ac:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    35ae:	bf1e      	ittt	ne
	movne	r1, #0
    35b0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    35b2:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    35b4:	f01a fea0 	blne	1e2f8 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    35b8:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    35ba:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    35be:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    35c2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    35c6:	4905      	ldr	r1, [pc, #20]	; (35dc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    35c8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    35ca:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    35cc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    35ce:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    35d2:	4903      	ldr	r1, [pc, #12]	; (35e0 <_isr_wrapper+0x3c>)
	bx r1
    35d4:	4708      	bx	r1
    35d6:	0000      	.short	0x0000
	ldr r2, =_kernel
    35d8:	20002dd0 	.word	0x20002dd0
	ldr r1, =_sw_isr_table
    35dc:	0001ec5c 	.word	0x0001ec5c
	ldr r1, =z_arm_int_exit
    35e0:	000035e5 	.word	0x000035e5

000035e4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    35e4:	4b04      	ldr	r3, [pc, #16]	; (35f8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    35e6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    35e8:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    35ea:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    35ec:	d003      	beq.n	35f6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    35ee:	4903      	ldr	r1, [pc, #12]	; (35fc <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    35f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    35f4:	600a      	str	r2, [r1, #0]

000035f6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    35f6:	4770      	bx	lr
	ldr r3, =_kernel
    35f8:	20002dd0 	.word	0x20002dd0
	ldr r1, =_SCS_ICSR
    35fc:	e000ed04 	.word	0xe000ed04

00003600 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    3600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3604:	4b35      	ldr	r3, [pc, #212]	; (36dc <mem_manage_fault+0xdc>)
    3606:	4c36      	ldr	r4, [pc, #216]	; (36e0 <mem_manage_fault+0xe0>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3608:	4d36      	ldr	r5, [pc, #216]	; (36e4 <mem_manage_fault+0xe4>)
    360a:	1ae4      	subs	r4, r4, r3
    360c:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    360e:	01a4      	lsls	r4, r4, #6
    3610:	f044 0901 	orr.w	r9, r4, #1
{
    3614:	4607      	mov	r7, r0
    3616:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    3618:	4833      	ldr	r0, [pc, #204]	; (36e8 <mem_manage_fault+0xe8>)
    361a:	4649      	mov	r1, r9
{
    361c:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    361e:	f015 ff10 	bl	19442 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3622:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3624:	06db      	lsls	r3, r3, #27
    3626:	d503      	bpl.n	3630 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Stacking error (context area might be"
    3628:	4830      	ldr	r0, [pc, #192]	; (36ec <mem_manage_fault+0xec>)
    362a:	4649      	mov	r1, r9
    362c:	f015 ff09 	bl	19442 <log_0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    3630:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3632:	0718      	lsls	r0, r3, #28
    3634:	d504      	bpl.n	3640 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Unstacking error");
    3636:	482e      	ldr	r0, [pc, #184]	; (36f0 <mem_manage_fault+0xf0>)
    3638:	f044 0101 	orr.w	r1, r4, #1
    363c:	f015 ff01 	bl	19442 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    3640:	4d28      	ldr	r5, [pc, #160]	; (36e4 <mem_manage_fault+0xe4>)
    3642:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3644:	0799      	lsls	r1, r3, #30
    3646:	d423      	bmi.n	3690 <mem_manage_fault+0x90>
	uint32_t mmfar = -EINVAL;
    3648:	f06f 0915 	mvn.w	r9, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    364c:	4d25      	ldr	r5, [pc, #148]	; (36e4 <mem_manage_fault+0xe4>)
    364e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3650:	07db      	lsls	r3, r3, #31
    3652:	d504      	bpl.n	365e <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Instruction Access Violation");
    3654:	4827      	ldr	r0, [pc, #156]	; (36f4 <mem_manage_fault+0xf4>)
    3656:	f044 0101 	orr.w	r1, r4, #1
    365a:	f015 fef2 	bl	19442 <log_0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    365e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3660:	0698      	lsls	r0, r3, #26
    3662:	d504      	bpl.n	366e <mem_manage_fault+0x6e>
		PR_FAULT_INFO(
    3664:	4824      	ldr	r0, [pc, #144]	; (36f8 <mem_manage_fault+0xf8>)
    3666:	f044 0101 	orr.w	r1, r4, #1
    366a:	f015 feea 	bl	19442 <log_0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    366e:	4b1d      	ldr	r3, [pc, #116]	; (36e4 <mem_manage_fault+0xe4>)
    3670:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3672:	06d1      	lsls	r1, r2, #27
    3674:	d424      	bmi.n	36c0 <mem_manage_fault+0xc0>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    3676:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3678:	0792      	lsls	r2, r2, #30
    367a:	d421      	bmi.n	36c0 <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    367c:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    367e:	4a19      	ldr	r2, [pc, #100]	; (36e4 <mem_manage_fault+0xe4>)
    3680:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3682:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    3686:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    3688:	2300      	movs	r3, #0
    368a:	7033      	strb	r3, [r6, #0]

	return reason;
}
    368c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
    3690:	f044 0a01 	orr.w	sl, r4, #1
    3694:	4819      	ldr	r0, [pc, #100]	; (36fc <mem_manage_fault+0xfc>)
    3696:	4651      	mov	r1, sl
    3698:	f015 fed3 	bl	19442 <log_0>
		uint32_t temp = SCB->MMFAR;
    369c:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    36a0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    36a2:	061a      	lsls	r2, r3, #24
    36a4:	d5d0      	bpl.n	3648 <mem_manage_fault+0x48>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    36a6:	4816      	ldr	r0, [pc, #88]	; (3700 <mem_manage_fault+0x100>)
    36a8:	4652      	mov	r2, sl
    36aa:	4649      	mov	r1, r9
    36ac:	f015 fed6 	bl	1945c <log_1>
			if (from_hard_fault != 0) {
    36b0:	f1b8 0f00 	cmp.w	r8, #0
    36b4:	d0ca      	beq.n	364c <mem_manage_fault+0x4c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    36b6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    36b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    36bc:	62ab      	str	r3, [r5, #40]	; 0x28
    36be:	e7c5      	b.n	364c <mem_manage_fault+0x4c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    36c0:	685b      	ldr	r3, [r3, #4]
    36c2:	051b      	lsls	r3, r3, #20
    36c4:	d5da      	bpl.n	367c <mem_manage_fault+0x7c>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    36c6:	4639      	mov	r1, r7
    36c8:	4648      	mov	r0, r9
    36ca:	f7ff ff3f 	bl	354c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    36ce:	2800      	cmp	r0, #0
    36d0:	d0d4      	beq.n	367c <mem_manage_fault+0x7c>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    36d2:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    36d6:	2002      	movs	r0, #2
    36d8:	e7d1      	b.n	367e <mem_manage_fault+0x7e>
    36da:	bf00      	nop
    36dc:	0001ef2c 	.word	0x0001ef2c
    36e0:	0001f144 	.word	0x0001f144
    36e4:	e000ed00 	.word	0xe000ed00
    36e8:	0001fc62 	.word	0x0001fc62
    36ec:	0001fc78 	.word	0x0001fc78
    36f0:	0001fcab 	.word	0x0001fcab
    36f4:	0001fcec 	.word	0x0001fcec
    36f8:	0001fd0b 	.word	0x0001fd0b
    36fc:	0001fcbe 	.word	0x0001fcbe
    3700:	0001fcd6 	.word	0x0001fcd6

00003704 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    3704:	b570      	push	{r4, r5, r6, lr}
    3706:	4b23      	ldr	r3, [pc, #140]	; (3794 <usage_fault.constprop.0+0x90>)
    3708:	4c23      	ldr	r4, [pc, #140]	; (3798 <usage_fault.constprop.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    370a:	4d24      	ldr	r5, [pc, #144]	; (379c <usage_fault.constprop.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    370c:	4824      	ldr	r0, [pc, #144]	; (37a0 <usage_fault.constprop.0+0x9c>)
    370e:	1ae4      	subs	r4, r4, r3
    3710:	08e4      	lsrs	r4, r4, #3
    3712:	01a4      	lsls	r4, r4, #6
    3714:	f044 0601 	orr.w	r6, r4, #1
    3718:	4631      	mov	r1, r6
    371a:	f015 fe92 	bl	19442 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    371e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3720:	019b      	lsls	r3, r3, #6
    3722:	d503      	bpl.n	372c <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    3724:	481f      	ldr	r0, [pc, #124]	; (37a4 <usage_fault.constprop.0+0xa0>)
    3726:	4631      	mov	r1, r6
    3728:	f015 fe8b 	bl	19442 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    372c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    372e:	01dd      	lsls	r5, r3, #7
    3730:	d504      	bpl.n	373c <usage_fault.constprop.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    3732:	481d      	ldr	r0, [pc, #116]	; (37a8 <usage_fault.constprop.0+0xa4>)
    3734:	f044 0101 	orr.w	r1, r4, #1
    3738:	f015 fe83 	bl	19442 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    373c:	4d17      	ldr	r5, [pc, #92]	; (379c <usage_fault.constprop.0+0x98>)
    373e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3740:	0318      	lsls	r0, r3, #12
    3742:	d504      	bpl.n	374e <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    3744:	4819      	ldr	r0, [pc, #100]	; (37ac <usage_fault.constprop.0+0xa8>)
    3746:	f044 0101 	orr.w	r1, r4, #1
    374a:	f015 fe7a 	bl	19442 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    374e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3750:	0359      	lsls	r1, r3, #13
    3752:	d504      	bpl.n	375e <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    3754:	4816      	ldr	r0, [pc, #88]	; (37b0 <usage_fault.constprop.0+0xac>)
    3756:	f044 0101 	orr.w	r1, r4, #1
    375a:	f015 fe72 	bl	19442 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    375e:	4d0f      	ldr	r5, [pc, #60]	; (379c <usage_fault.constprop.0+0x98>)
    3760:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3762:	039a      	lsls	r2, r3, #14
    3764:	d504      	bpl.n	3770 <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    3766:	4813      	ldr	r0, [pc, #76]	; (37b4 <usage_fault.constprop.0+0xb0>)
    3768:	f044 0101 	orr.w	r1, r4, #1
    376c:	f015 fe69 	bl	19442 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    3770:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3772:	03db      	lsls	r3, r3, #15
    3774:	d504      	bpl.n	3780 <usage_fault.constprop.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    3776:	4810      	ldr	r0, [pc, #64]	; (37b8 <usage_fault.constprop.0+0xb4>)
    3778:	f044 0101 	orr.w	r1, r4, #1
    377c:	f015 fe61 	bl	19442 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3780:	4a06      	ldr	r2, [pc, #24]	; (379c <usage_fault.constprop.0+0x98>)
    3782:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3784:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    3788:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    378c:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    378e:	2000      	movs	r0, #0
    3790:	bd70      	pop	{r4, r5, r6, pc}
    3792:	bf00      	nop
    3794:	0001ef2c 	.word	0x0001ef2c
    3798:	0001f144 	.word	0x0001f144
    379c:	e000ed00 	.word	0xe000ed00
    37a0:	0001fd3a 	.word	0x0001fd3a
    37a4:	0001fd52 	.word	0x0001fd52
    37a8:	0001fd65 	.word	0x0001fd65
    37ac:	0001fd7f 	.word	0x0001fd7f
    37b0:	0001fd9d 	.word	0x0001fd9d
    37b4:	0001fdc2 	.word	0x0001fdc2
    37b8:	0001fddc 	.word	0x0001fddc

000037bc <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    37bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    37c0:	4b2a      	ldr	r3, [pc, #168]	; (386c <bus_fault.constprop.0+0xb0>)
    37c2:	4c2b      	ldr	r4, [pc, #172]	; (3870 <bus_fault.constprop.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    37c4:	4d2b      	ldr	r5, [pc, #172]	; (3874 <bus_fault.constprop.0+0xb8>)
    37c6:	1ae4      	subs	r4, r4, r3
    37c8:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    37ca:	01a4      	lsls	r4, r4, #6
    37cc:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    37d0:	4607      	mov	r7, r0
    37d2:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    37d4:	4828      	ldr	r0, [pc, #160]	; (3878 <bus_fault.constprop.0+0xbc>)
    37d6:	4641      	mov	r1, r8
    37d8:	f015 fe33 	bl	19442 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    37dc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    37de:	04d9      	lsls	r1, r3, #19
    37e0:	d503      	bpl.n	37ea <bus_fault.constprop.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
    37e2:	4826      	ldr	r0, [pc, #152]	; (387c <bus_fault.constprop.0+0xc0>)
    37e4:	4641      	mov	r1, r8
    37e6:	f015 fe2c 	bl	19442 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    37ea:	6aab      	ldr	r3, [r5, #40]	; 0x28
    37ec:	051a      	lsls	r2, r3, #20
    37ee:	d504      	bpl.n	37fa <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    37f0:	4823      	ldr	r0, [pc, #140]	; (3880 <bus_fault.constprop.0+0xc4>)
    37f2:	f044 0101 	orr.w	r1, r4, #1
    37f6:	f015 fe24 	bl	19442 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    37fa:	4d1e      	ldr	r5, [pc, #120]	; (3874 <bus_fault.constprop.0+0xb8>)
    37fc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    37fe:	059b      	lsls	r3, r3, #22
    3800:	d512      	bpl.n	3828 <bus_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
    3802:	f044 0801 	orr.w	r8, r4, #1
    3806:	481f      	ldr	r0, [pc, #124]	; (3884 <bus_fault.constprop.0+0xc8>)
    3808:	4641      	mov	r1, r8
    380a:	f015 fe1a 	bl	19442 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    380e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    3810:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3812:	0418      	lsls	r0, r3, #16
    3814:	d508      	bpl.n	3828 <bus_fault.constprop.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    3816:	481c      	ldr	r0, [pc, #112]	; (3888 <bus_fault.constprop.0+0xcc>)
    3818:	4642      	mov	r2, r8
    381a:	f015 fe1f 	bl	1945c <log_1>
			if (from_hard_fault != 0) {
    381e:	b11f      	cbz	r7, 3828 <bus_fault.constprop.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    3820:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3822:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    3826:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    3828:	4d12      	ldr	r5, [pc, #72]	; (3874 <bus_fault.constprop.0+0xb8>)
    382a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    382c:	0559      	lsls	r1, r3, #21
    382e:	d504      	bpl.n	383a <bus_fault.constprop.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
    3830:	4816      	ldr	r0, [pc, #88]	; (388c <bus_fault.constprop.0+0xd0>)
    3832:	f044 0101 	orr.w	r1, r4, #1
    3836:	f015 fe04 	bl	19442 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    383a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    383c:	05da      	lsls	r2, r3, #23
    383e:	d50d      	bpl.n	385c <bus_fault.constprop.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
    3840:	4813      	ldr	r0, [pc, #76]	; (3890 <bus_fault.constprop.0+0xd4>)
    3842:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    3846:	f015 fdfc 	bl	19442 <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    384a:	4a0a      	ldr	r2, [pc, #40]	; (3874 <bus_fault.constprop.0+0xb8>)
    384c:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    384e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3850:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    3854:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3856:	7030      	strb	r0, [r6, #0]
}
    3858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    385c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    385e:	049b      	lsls	r3, r3, #18
    3860:	d5f3      	bpl.n	384a <bus_fault.constprop.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    3862:	480c      	ldr	r0, [pc, #48]	; (3894 <bus_fault.constprop.0+0xd8>)
    3864:	f044 0101 	orr.w	r1, r4, #1
    3868:	e7ed      	b.n	3846 <bus_fault.constprop.0+0x8a>
    386a:	bf00      	nop
    386c:	0001ef2c 	.word	0x0001ef2c
    3870:	0001f144 	.word	0x0001f144
    3874:	e000ed00 	.word	0xe000ed00
    3878:	0001fe07 	.word	0x0001fe07
    387c:	0001fe1d 	.word	0x0001fe1d
    3880:	0001fcab 	.word	0x0001fcab
    3884:	0001fe2e 	.word	0x0001fe2e
    3888:	0001fe47 	.word	0x0001fe47
    388c:	0001fe5c 	.word	0x0001fe5c
    3890:	0001fe77 	.word	0x0001fe77
    3894:	0001fd0b 	.word	0x0001fd0b

00003898 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    3898:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    389c:	4b65      	ldr	r3, [pc, #404]	; (3a34 <z_arm_fault+0x19c>)
    389e:	685e      	ldr	r6, [r3, #4]
{
    38a0:	b08b      	sub	sp, #44	; 0x2c
    38a2:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    38a4:	f3c6 0408 	ubfx	r4, r6, #0, #9
    38a8:	2700      	movs	r7, #0
    38aa:	f387 8811 	msr	BASEPRI, r7
    38ae:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    38b2:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    38b6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    38ba:	d10d      	bne.n	38d8 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    38bc:	f002 030c 	and.w	r3, r2, #12
    38c0:	2b08      	cmp	r3, #8
    38c2:	d10b      	bne.n	38dc <z_arm_fault+0x44>
    38c4:	495c      	ldr	r1, [pc, #368]	; (3a38 <z_arm_fault+0x1a0>)
    38c6:	4b5d      	ldr	r3, [pc, #372]	; (3a3c <z_arm_fault+0x1a4>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    38c8:	485d      	ldr	r0, [pc, #372]	; (3a40 <z_arm_fault+0x1a8>)
    38ca:	1ac9      	subs	r1, r1, r3
    38cc:	08c9      	lsrs	r1, r1, #3
    38ce:	0189      	lsls	r1, r1, #6
    38d0:	f041 0101 	orr.w	r1, r1, #1
    38d4:	f015 fdb5 	bl	19442 <log_0>
		return NULL;
    38d8:	463d      	mov	r5, r7
    38da:	e003      	b.n	38e4 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    38dc:	0712      	lsls	r2, r2, #28
    38de:	d401      	bmi.n	38e4 <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
    38e0:	4605      	mov	r5, r0
			*nested_exc = true;
    38e2:	2701      	movs	r7, #1
	*recoverable = false;
    38e4:	2300      	movs	r3, #0
    38e6:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    38ea:	1ee3      	subs	r3, r4, #3
    38ec:	2b09      	cmp	r3, #9
    38ee:	f200 8088 	bhi.w	3a02 <z_arm_fault+0x16a>
    38f2:	e8df f003 	tbb	[pc, r3]
    38f6:	7505      	.short	0x7505
    38f8:	86867279 	.word	0x86867279
    38fc:	7d868686 	.word	0x7d868686
    3900:	4a4e      	ldr	r2, [pc, #312]	; (3a3c <z_arm_fault+0x1a4>)
    3902:	4e4d      	ldr	r6, [pc, #308]	; (3a38 <z_arm_fault+0x1a0>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3904:	f8df 812c 	ldr.w	r8, [pc, #300]	; 3a34 <z_arm_fault+0x19c>
	PR_FAULT_INFO("***** HARD FAULT *****");
    3908:	484e      	ldr	r0, [pc, #312]	; (3a44 <z_arm_fault+0x1ac>)
    390a:	1ab6      	subs	r6, r6, r2
    390c:	08f6      	lsrs	r6, r6, #3
    390e:	01b6      	lsls	r6, r6, #6
    3910:	f046 0601 	orr.w	r6, r6, #1
    3914:	4631      	mov	r1, r6
    3916:	f015 fd94 	bl	19442 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    391a:	f8d8 402c 	ldr.w	r4, [r8, #44]	; 0x2c
	*recoverable = false;
    391e:	f04f 0900 	mov.w	r9, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3922:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    3926:	f88d 9007 	strb.w	r9, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    392a:	d005      	beq.n	3938 <z_arm_fault+0xa0>
		PR_EXC("  Bus fault on vector table read");
    392c:	4846      	ldr	r0, [pc, #280]	; (3a48 <z_arm_fault+0x1b0>)
    392e:	4631      	mov	r1, r6
	PR_FAULT_INFO(
    3930:	f015 fd87 	bl	19442 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    3934:	2400      	movs	r4, #0
}
    3936:	e007      	b.n	3948 <z_arm_fault+0xb0>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    3938:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    393c:	2b00      	cmp	r3, #0
    393e:	da1d      	bge.n	397c <z_arm_fault+0xe4>
		PR_EXC("  Debug event");
    3940:	4842      	ldr	r0, [pc, #264]	; (3a4c <z_arm_fault+0x1b4>)
    3942:	4631      	mov	r1, r6
    3944:	f015 fd7d 	bl	19442 <log_0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    3948:	f89d 3007 	ldrb.w	r3, [sp, #7]
    394c:	b99b      	cbnz	r3, 3976 <z_arm_fault+0xde>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    394e:	2220      	movs	r2, #32
    3950:	4629      	mov	r1, r5
    3952:	a802      	add	r0, sp, #8
    3954:	f016 fc93 	bl	1a27e <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    3958:	9b09      	ldr	r3, [sp, #36]	; 0x24
    395a:	2f00      	cmp	r7, #0
    395c:	d065      	beq.n	3a2a <z_arm_fault+0x192>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    395e:	f3c3 0208 	ubfx	r2, r3, #0, #9
    3962:	b922      	cbnz	r2, 396e <z_arm_fault+0xd6>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    3964:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    3968:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    396c:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    396e:	a902      	add	r1, sp, #8
    3970:	4620      	mov	r0, r4
    3972:	f7ff fcc3 	bl	32fc <z_arm_fatal_error>
}
    3976:	b00b      	add	sp, #44	; 0x2c
    3978:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    397c:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    3980:	005b      	lsls	r3, r3, #1
    3982:	d5e1      	bpl.n	3948 <z_arm_fault+0xb0>
		PR_EXC("  Fault escalation (see below)");
    3984:	4832      	ldr	r0, [pc, #200]	; (3a50 <z_arm_fault+0x1b8>)
    3986:	4631      	mov	r1, r6
    3988:	f015 fd5b 	bl	19442 <log_0>
	uint16_t fault_insn = *(ret_addr - 1);
    398c:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    398e:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    3992:	f64d 7302 	movw	r3, #57090	; 0xdf02
    3996:	429a      	cmp	r2, r3
    3998:	d00a      	beq.n	39b0 <z_arm_fault+0x118>
		} else if (SCB_MMFSR != 0) {
    399a:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
    399e:	b173      	cbz	r3, 39be <z_arm_fault+0x126>
			reason = mem_manage_fault(esf, 1, recoverable);
    39a0:	f10d 0207 	add.w	r2, sp, #7
    39a4:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    39a6:	4628      	mov	r0, r5
    39a8:	f7ff fe2a 	bl	3600 <mem_manage_fault>
    39ac:	4604      	mov	r4, r0
		break;
    39ae:	e7cb      	b.n	3948 <z_arm_fault+0xb0>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    39b0:	6829      	ldr	r1, [r5, #0]
    39b2:	4828      	ldr	r0, [pc, #160]	; (3a54 <z_arm_fault+0x1bc>)
    39b4:	4632      	mov	r2, r6
    39b6:	f015 fd51 	bl	1945c <log_1>
			reason = esf->basic.r0;
    39ba:	682c      	ldr	r4, [r5, #0]
    39bc:	e7c4      	b.n	3948 <z_arm_fault+0xb0>
		} else if (SCB_BFSR != 0) {
    39be:	f898 3029 	ldrb.w	r3, [r8, #41]	; 0x29
    39c2:	b12b      	cbz	r3, 39d0 <z_arm_fault+0x138>
			reason = bus_fault(esf, 1, recoverable);
    39c4:	f10d 0107 	add.w	r1, sp, #7
    39c8:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    39ca:	f7ff fef7 	bl	37bc <bus_fault.constprop.0>
    39ce:	e7ed      	b.n	39ac <z_arm_fault+0x114>
		} else if (SCB_UFSR != 0) {
    39d0:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
    39d4:	b29b      	uxth	r3, r3
    39d6:	2b00      	cmp	r3, #0
    39d8:	d0b6      	beq.n	3948 <z_arm_fault+0xb0>
		reason = usage_fault(esf);
    39da:	f7ff fe93 	bl	3704 <usage_fault.constprop.0>
    39de:	e7e5      	b.n	39ac <z_arm_fault+0x114>
		reason = mem_manage_fault(esf, 0, recoverable);
    39e0:	f10d 0207 	add.w	r2, sp, #7
    39e4:	2100      	movs	r1, #0
    39e6:	e7de      	b.n	39a6 <z_arm_fault+0x10e>
		reason = bus_fault(esf, 0, recoverable);
    39e8:	f10d 0107 	add.w	r1, sp, #7
    39ec:	2000      	movs	r0, #0
    39ee:	e7ec      	b.n	39ca <z_arm_fault+0x132>
    39f0:	4911      	ldr	r1, [pc, #68]	; (3a38 <z_arm_fault+0x1a0>)
    39f2:	4b12      	ldr	r3, [pc, #72]	; (3a3c <z_arm_fault+0x1a4>)
	PR_FAULT_INFO(
    39f4:	4818      	ldr	r0, [pc, #96]	; (3a58 <z_arm_fault+0x1c0>)
    39f6:	1ac9      	subs	r1, r1, r3
    39f8:	08c9      	lsrs	r1, r1, #3
    39fa:	0189      	lsls	r1, r1, #6
    39fc:	f041 0101 	orr.w	r1, r1, #1
    3a00:	e796      	b.n	3930 <z_arm_fault+0x98>
    3a02:	4a0e      	ldr	r2, [pc, #56]	; (3a3c <z_arm_fault+0x1a4>)
    3a04:	4b0c      	ldr	r3, [pc, #48]	; (3a38 <z_arm_fault+0x1a0>)
	PR_FAULT_INFO("***** %s %d) *****",
    3a06:	4815      	ldr	r0, [pc, #84]	; (3a5c <z_arm_fault+0x1c4>)
    3a08:	4915      	ldr	r1, [pc, #84]	; (3a60 <z_arm_fault+0x1c8>)
    3a0a:	1a9b      	subs	r3, r3, r2
    3a0c:	08db      	lsrs	r3, r3, #3
    3a0e:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
    3a12:	ea4f 1383 	mov.w	r3, r3, lsl #6
    3a16:	bf18      	it	ne
    3a18:	4601      	movne	r1, r0
    3a1a:	f043 0301 	orr.w	r3, r3, #1
    3a1e:	4811      	ldr	r0, [pc, #68]	; (3a64 <z_arm_fault+0x1cc>)
    3a20:	f1a4 0210 	sub.w	r2, r4, #16
    3a24:	f015 fd2e 	bl	19484 <log_2>
    3a28:	e784      	b.n	3934 <z_arm_fault+0x9c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3a2a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    3a2e:	f023 0301 	bic.w	r3, r3, #1
    3a32:	e79b      	b.n	396c <z_arm_fault+0xd4>
    3a34:	e000ed00 	.word	0xe000ed00
    3a38:	0001f144 	.word	0x0001f144
    3a3c:	0001ef2c 	.word	0x0001ef2c
    3a40:	0001fe8f 	.word	0x0001fe8f
    3a44:	0001feba 	.word	0x0001feba
    3a48:	0001fed1 	.word	0x0001fed1
    3a4c:	0001fef2 	.word	0x0001fef2
    3a50:	0001ff00 	.word	0x0001ff00
    3a54:	0001ff1f 	.word	0x0001ff1f
    3a58:	0001ff3b 	.word	0x0001ff3b
    3a5c:	0001ff74 	.word	0x0001ff74
    3a60:	0001ff5f 	.word	0x0001ff5f
    3a64:	0001ff8d 	.word	0x0001ff8d

00003a68 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    3a68:	4a02      	ldr	r2, [pc, #8]	; (3a74 <z_arm_fault_init+0xc>)
    3a6a:	6953      	ldr	r3, [r2, #20]
    3a6c:	f043 0310 	orr.w	r3, r3, #16
    3a70:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    3a72:	4770      	bx	lr
    3a74:	e000ed00 	.word	0xe000ed00

00003a78 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    3a78:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    3a7c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    3a80:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    3a82:	4672      	mov	r2, lr
	bl z_arm_fault
    3a84:	f7ff ff08 	bl	3898 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    3a88:	bd01      	pop	{r0, pc}
    3a8a:	bf00      	nop

00003a8c <z_arm_interrupt_init>:
    3a8c:	4804      	ldr	r0, [pc, #16]	; (3aa0 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    3a8e:	2300      	movs	r3, #0
    3a90:	2120      	movs	r1, #32
    3a92:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    3a94:	3301      	adds	r3, #1
    3a96:	2b27      	cmp	r3, #39	; 0x27
    3a98:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    3a9c:	d1f9      	bne.n	3a92 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    3a9e:	4770      	bx	lr
    3aa0:	e000e100 	.word	0xe000e100

00003aa4 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    3aa4:	f01b f854 	bl	1eb50 <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3aa8:	2020      	movs	r0, #32
    msr BASEPRI, r0
    3aaa:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    3aae:	4808      	ldr	r0, [pc, #32]	; (3ad0 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    3ab0:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    3ab4:	1840      	adds	r0, r0, r1
    msr PSP, r0
    3ab6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    3aba:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    3abe:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    3ac0:	4308      	orrs	r0, r1
    msr CONTROL, r0
    3ac2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    3ac6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    3aca:	f7ff fcab 	bl	3424 <z_arm_prep_c>
    3ace:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    3ad0:	20004ee0 	.word	0x20004ee0

00003ad4 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    3ad4:	4b06      	ldr	r3, [pc, #24]	; (3af0 <z_impl_k_thread_abort+0x1c>)
    3ad6:	689b      	ldr	r3, [r3, #8]
    3ad8:	4283      	cmp	r3, r0
    3ada:	d107      	bne.n	3aec <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3adc:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    3ae0:	b123      	cbz	r3, 3aec <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3ae2:	4a04      	ldr	r2, [pc, #16]	; (3af4 <z_impl_k_thread_abort+0x20>)
    3ae4:	6853      	ldr	r3, [r2, #4]
    3ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3aea:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    3aec:	f014 bcc8 	b.w	18480 <z_thread_abort>
    3af0:	20002dd0 	.word	0x20002dd0
    3af4:	e000ed00 	.word	0xe000ed00

00003af8 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    3af8:	4b02      	ldr	r3, [pc, #8]	; (3b04 <z_arm_configure_static_mpu_regions+0xc>)
    3afa:	4a03      	ldr	r2, [pc, #12]	; (3b08 <z_arm_configure_static_mpu_regions+0x10>)
    3afc:	4803      	ldr	r0, [pc, #12]	; (3b0c <z_arm_configure_static_mpu_regions+0x14>)
    3afe:	2101      	movs	r1, #1
    3b00:	f000 b88c 	b.w	3c1c <arm_core_mpu_configure_static_mpu_regions>
    3b04:	20010000 	.word	0x20010000
    3b08:	20000000 	.word	0x20000000
    3b0c:	0001f350 	.word	0x0001f350

00003b10 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    3b10:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    3b12:	4b05      	ldr	r3, [pc, #20]	; (3b28 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    3b14:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    3b16:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    3b18:	4a04      	ldr	r2, [pc, #16]	; (3b2c <z_arm_configure_dynamic_mpu_regions+0x1c>)
    3b1a:	2120      	movs	r1, #32
    3b1c:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    3b20:	4618      	mov	r0, r3
    3b22:	2101      	movs	r1, #1
    3b24:	f000 b884 	b.w	3c30 <arm_core_mpu_configure_dynamic_mpu_regions>
    3b28:	2000193c 	.word	0x2000193c
    3b2c:	150b0000 	.word	0x150b0000

00003b30 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    3b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    3b32:	4f2a      	ldr	r7, [pc, #168]	; (3bdc <mpu_configure_regions+0xac>)
    3b34:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    3b36:	2100      	movs	r1, #0
    3b38:	42b1      	cmp	r1, r6
    3b3a:	da14      	bge.n	3b66 <mpu_configure_regions+0x36>
		if (regions[i].size == 0U) {
    3b3c:	6844      	ldr	r4, [r0, #4]
    3b3e:	2c00      	cmp	r4, #0
    3b40:	d048      	beq.n	3bd4 <mpu_configure_regions+0xa4>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    3b42:	b1c3      	cbz	r3, 3b76 <mpu_configure_regions+0x46>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    3b44:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    3b48:	ea14 0f0c 	tst.w	r4, ip
    3b4c:	d00d      	beq.n	3b6a <mpu_configure_regions+0x3a>
    3b4e:	4a24      	ldr	r2, [pc, #144]	; (3be0 <mpu_configure_regions+0xb0>)
    3b50:	4b24      	ldr	r3, [pc, #144]	; (3be4 <mpu_configure_regions+0xb4>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    3b52:	4825      	ldr	r0, [pc, #148]	; (3be8 <mpu_configure_regions+0xb8>)
    3b54:	1ad2      	subs	r2, r2, r3
    3b56:	08d2      	lsrs	r2, r2, #3
    3b58:	0192      	lsls	r2, r2, #6
    3b5a:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    3b5e:	f015 fc7d 	bl	1945c <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    3b62:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    3b66:	4610      	mov	r0, r2
    3b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    3b6a:	2c1f      	cmp	r4, #31
    3b6c:	d9ef      	bls.n	3b4e <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    3b6e:	6805      	ldr	r5, [r0, #0]
		&&
    3b70:	ea1c 0f05 	tst.w	ip, r5
    3b74:	d1eb      	bne.n	3b4e <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    3b76:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    3b78:	b2d5      	uxtb	r5, r2
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    3b7a:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
    3b7e:	6802      	ldr	r2, [r0, #0]
	if (size <= 32U) {
    3b80:	d916      	bls.n	3bb0 <mpu_configure_regions+0x80>
	if (size > (1UL << 31)) {
    3b82:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    3b86:	d815      	bhi.n	3bb4 <mpu_configure_regions+0x84>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    3b88:	3c01      	subs	r4, #1
    3b8a:	fab4 f484 	clz	r4, r4
    3b8e:	f1c4 041f 	rsb	r4, r4, #31
    3b92:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    3b94:	2d07      	cmp	r5, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    3b96:	ea4c 0404 	orr.w	r4, ip, r4
    3b9a:	d90d      	bls.n	3bb8 <mpu_configure_regions+0x88>
    3b9c:	4a10      	ldr	r2, [pc, #64]	; (3be0 <mpu_configure_regions+0xb0>)
    3b9e:	4b11      	ldr	r3, [pc, #68]	; (3be4 <mpu_configure_regions+0xb4>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    3ba0:	4812      	ldr	r0, [pc, #72]	; (3bec <mpu_configure_regions+0xbc>)
    3ba2:	1ad2      	subs	r2, r2, r3
    3ba4:	08d2      	lsrs	r2, r2, #3
    3ba6:	0192      	lsls	r2, r2, #6
    3ba8:	f042 0201 	orr.w	r2, r2, #1
    3bac:	4629      	mov	r1, r5
    3bae:	e7d6      	b.n	3b5e <mpu_configure_regions+0x2e>
		return REGION_32B;
    3bb0:	2408      	movs	r4, #8
    3bb2:	e7ef      	b.n	3b94 <mpu_configure_regions+0x64>
		return REGION_4G;
    3bb4:	243e      	movs	r4, #62	; 0x3e
    3bb6:	e7ed      	b.n	3b94 <mpu_configure_regions+0x64>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3bb8:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    3bbc:	432a      	orrs	r2, r5
    3bbe:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3bc2:	f044 0401 	orr.w	r4, r4, #1
    3bc6:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3bca:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3bce:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
		reg_index++;
    3bd2:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
    3bd4:	3101      	adds	r1, #1
    3bd6:	300c      	adds	r0, #12
    3bd8:	e7ae      	b.n	3b38 <mpu_configure_regions+0x8>
    3bda:	bf00      	nop
    3bdc:	e000ed00 	.word	0xe000ed00
    3be0:	0001f134 	.word	0x0001f134
    3be4:	0001ef2c 	.word	0x0001ef2c
    3be8:	0001ffa4 	.word	0x0001ffa4
    3bec:	0001ffc7 	.word	0x0001ffc7

00003bf0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    3bf0:	4b04      	ldr	r3, [pc, #16]	; (3c04 <arm_core_mpu_enable+0x14>)
    3bf2:	2205      	movs	r2, #5
    3bf4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    3bf8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3bfc:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    3c00:	4770      	bx	lr
    3c02:	bf00      	nop
    3c04:	e000ed00 	.word	0xe000ed00

00003c08 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    3c08:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    3c0c:	4b02      	ldr	r3, [pc, #8]	; (3c18 <arm_core_mpu_disable+0x10>)
    3c0e:	2200      	movs	r2, #0
    3c10:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    3c14:	4770      	bx	lr
    3c16:	bf00      	nop
    3c18:	e000ed00 	.word	0xe000ed00

00003c1c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    3c1c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    3c1e:	4c03      	ldr	r4, [pc, #12]	; (3c2c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    3c20:	2301      	movs	r3, #1
    3c22:	7822      	ldrb	r2, [r4, #0]
    3c24:	f7ff ff84 	bl	3b30 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    3c28:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    3c2a:	bd10      	pop	{r4, pc}
    3c2c:	20002e80 	.word	0x20002e80

00003c30 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    3c30:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    3c32:	4a09      	ldr	r2, [pc, #36]	; (3c58 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    3c34:	2300      	movs	r3, #0
    3c36:	7812      	ldrb	r2, [r2, #0]
    3c38:	f7ff ff7a 	bl	3b30 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    3c3c:	f110 0f16 	cmn.w	r0, #22
    3c40:	d003      	beq.n	3c4a <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    3c42:	4b06      	ldr	r3, [pc, #24]	; (3c5c <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
    3c44:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    3c46:	2807      	cmp	r0, #7
    3c48:	dd00      	ble.n	3c4c <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    3c4a:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    3c4c:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    3c50:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    3c54:	3001      	adds	r0, #1
    3c56:	e7f6      	b.n	3c46 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    3c58:	20002e80 	.word	0x20002e80
    3c5c:	e000ed00 	.word	0xe000ed00

00003c60 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    3c60:	4914      	ldr	r1, [pc, #80]	; (3cb4 <z_arm_mpu_init+0x54>)
    3c62:	6808      	ldr	r0, [r1, #0]
    3c64:	2808      	cmp	r0, #8
{
    3c66:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    3c68:	d821      	bhi.n	3cae <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    3c6a:	f7ff ffcd 	bl	3c08 <arm_core_mpu_disable>
    3c6e:	4c12      	ldr	r4, [pc, #72]	; (3cb8 <z_arm_mpu_init+0x58>)
    3c70:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3c72:	2200      	movs	r2, #0
    3c74:	4290      	cmp	r0, r2
    3c76:	f101 010c 	add.w	r1, r1, #12
    3c7a:	d105      	bne.n	3c88 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    3c7c:	4b0f      	ldr	r3, [pc, #60]	; (3cbc <z_arm_mpu_init+0x5c>)
    3c7e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    3c80:	f7ff ffb6 	bl	3bf0 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    3c84:	2000      	movs	r0, #0
}
    3c86:	bd10      	pop	{r4, pc}
    3c88:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3c8c:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    3c90:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    3c94:	4313      	orrs	r3, r2
    3c96:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3c9a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3c9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
    3ca2:	f043 0301 	orr.w	r3, r3, #1
    3ca6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3caa:	3201      	adds	r2, #1
    3cac:	e7e2      	b.n	3c74 <z_arm_mpu_init+0x14>
		return -1;
    3cae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3cb2:	e7e8      	b.n	3c86 <z_arm_mpu_init+0x26>
    3cb4:	0001f35c 	.word	0x0001f35c
    3cb8:	e000ed00 	.word	0xe000ed00
    3cbc:	20002e80 	.word	0x20002e80

00003cc0 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    3cc0:	4b01      	ldr	r3, [pc, #4]	; (3cc8 <__stdout_hook_install+0x8>)
    3cc2:	6018      	str	r0, [r3, #0]
}
    3cc4:	4770      	bx	lr
    3cc6:	bf00      	nop
    3cc8:	20000280 	.word	0x20000280

00003ccc <nordicsemi_nrf52_init>:
	__asm__ volatile(
    3ccc:	f04f 0320 	mov.w	r3, #32
    3cd0:	f3ef 8211 	mrs	r2, BASEPRI
    3cd4:	f383 8812 	msr	BASEPRI_MAX, r3
    3cd8:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    3cdc:	4906      	ldr	r1, [pc, #24]	; (3cf8 <nordicsemi_nrf52_init+0x2c>)
    3cde:	2301      	movs	r3, #1
    3ce0:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    3ce4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    3ce8:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    3cec:	f382 8811 	msr	BASEPRI, r2
    3cf0:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    3cf4:	2000      	movs	r0, #0
    3cf6:	4770      	bx	lr
    3cf8:	4001e000 	.word	0x4001e000

00003cfc <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    3cfc:	b120      	cbz	r0, 3d08 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    3cfe:	4b03      	ldr	r3, [pc, #12]	; (3d0c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    3d00:	0180      	lsls	r0, r0, #6
    3d02:	f043 0301 	orr.w	r3, r3, #1
    3d06:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    3d08:	4770      	bx	lr
    3d0a:	bf00      	nop
    3d0c:	0001f250 	.word	0x0001f250

00003d10 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    3d10:	4b0e      	ldr	r3, [pc, #56]	; (3d4c <bt_hex_real+0x3c>)
    3d12:	2940      	cmp	r1, #64	; 0x40
{
    3d14:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
    3d16:	bf28      	it	cs
    3d18:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    3d1a:	4c0d      	ldr	r4, [pc, #52]	; (3d50 <bt_hex_real+0x40>)
    3d1c:	1846      	adds	r6, r0, r1
    3d1e:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
    3d20:	42b0      	cmp	r0, r6
    3d22:	f103 0302 	add.w	r3, r3, #2
    3d26:	d104      	bne.n	3d32 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    3d28:	2300      	movs	r3, #0
    3d2a:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    3d2e:	4807      	ldr	r0, [pc, #28]	; (3d4c <bt_hex_real+0x3c>)
    3d30:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    3d32:	7802      	ldrb	r2, [r0, #0]
    3d34:	0912      	lsrs	r2, r2, #4
    3d36:	5ca2      	ldrb	r2, [r4, r2]
    3d38:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    3d3c:	f810 2b01 	ldrb.w	r2, [r0], #1
    3d40:	f002 020f 	and.w	r2, r2, #15
    3d44:	5ca2      	ldrb	r2, [r4, r2]
    3d46:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    3d4a:	e7e9      	b.n	3d20 <bt_hex_real+0x10>
    3d4c:	20002e9f 	.word	0x20002e9f
    3d50:	00020045 	.word	0x00020045

00003d54 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    3d54:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    3d56:	7803      	ldrb	r3, [r0, #0]
    3d58:	b08b      	sub	sp, #44	; 0x2c
    3d5a:	4604      	mov	r4, r0
    3d5c:	ad07      	add	r5, sp, #28
    3d5e:	2b03      	cmp	r3, #3
    3d60:	d821      	bhi.n	3da6 <bt_addr_le_str_real+0x52>
    3d62:	e8df f003 	tbb	[pc, r3]
    3d66:	1a02      	.short	0x1a02
    3d68:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    3d6a:	4912      	ldr	r1, [pc, #72]	; (3db4 <bt_addr_le_str_real+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    3d6c:	4628      	mov	r0, r5
    3d6e:	f016 fa2c 	bl	1a1ca <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    3d72:	7863      	ldrb	r3, [r4, #1]
    3d74:	9304      	str	r3, [sp, #16]
    3d76:	78a3      	ldrb	r3, [r4, #2]
    3d78:	9303      	str	r3, [sp, #12]
    3d7a:	78e3      	ldrb	r3, [r4, #3]
    3d7c:	9302      	str	r3, [sp, #8]
    3d7e:	7923      	ldrb	r3, [r4, #4]
    3d80:	9301      	str	r3, [sp, #4]
    3d82:	7963      	ldrb	r3, [r4, #5]
    3d84:	9300      	str	r3, [sp, #0]
    3d86:	4a0c      	ldr	r2, [pc, #48]	; (3db8 <bt_addr_le_str_real+0x64>)
    3d88:	79a3      	ldrb	r3, [r4, #6]
    3d8a:	9505      	str	r5, [sp, #20]
    3d8c:	211e      	movs	r1, #30
    3d8e:	480b      	ldr	r0, [pc, #44]	; (3dbc <bt_addr_le_str_real+0x68>)
    3d90:	f014 ff25 	bl	18bde <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    3d94:	4809      	ldr	r0, [pc, #36]	; (3dbc <bt_addr_le_str_real+0x68>)
    3d96:	b00b      	add	sp, #44	; 0x2c
    3d98:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    3d9a:	4909      	ldr	r1, [pc, #36]	; (3dc0 <bt_addr_le_str_real+0x6c>)
    3d9c:	e7e6      	b.n	3d6c <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    3d9e:	4909      	ldr	r1, [pc, #36]	; (3dc4 <bt_addr_le_str_real+0x70>)
    3da0:	e7e4      	b.n	3d6c <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    3da2:	4909      	ldr	r1, [pc, #36]	; (3dc8 <bt_addr_le_str_real+0x74>)
    3da4:	e7e2      	b.n	3d6c <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    3da6:	4a09      	ldr	r2, [pc, #36]	; (3dcc <bt_addr_le_str_real+0x78>)
    3da8:	210a      	movs	r1, #10
    3daa:	4628      	mov	r0, r5
    3dac:	f014 ff17 	bl	18bde <snprintk>
		break;
    3db0:	e7df      	b.n	3d72 <bt_addr_le_str_real+0x1e>
    3db2:	bf00      	nop
    3db4:	00020000 	.word	0x00020000
    3db8:	00020022 	.word	0x00020022
    3dbc:	20002e81 	.word	0x20002e81
    3dc0:	00020007 	.word	0x00020007
    3dc4:	0002000e 	.word	0x0002000e
    3dc8:	00020018 	.word	0x00020018
    3dcc:	00022208 	.word	0x00022208

00003dd0 <le_gen_dhkey>:
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
}

static uint8_t le_gen_dhkey(uint8_t *key, uint8_t key_type)
{
    3dd0:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3dd2:	4c21      	ldr	r4, [pc, #132]	; (3e58 <le_gen_dhkey+0x88>)
    3dd4:	f3bf 8f5b 	dmb	ish
    3dd8:	6823      	ldr	r3, [r4, #0]
    3dda:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    3dde:	07da      	lsls	r2, r3, #31
{
    3de0:	4606      	mov	r6, r0
    3de2:	460d      	mov	r5, r1
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    3de4:	d501      	bpl.n	3dea <le_gen_dhkey+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
    3de6:	200c      	movs	r0, #12
			  key_type == BT_HCI_LE_KEY_TYPE_DEBUG);

	k_sem_give(&cmd_sem);

	return BT_HCI_ERR_SUCCESS;
}
    3de8:	bd70      	pop	{r4, r5, r6, pc}
	if (key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
    3dea:	2901      	cmp	r1, #1
    3dec:	d831      	bhi.n	3e52 <le_gen_dhkey+0x82>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3dee:	f3bf 8f5b 	dmb	ish
    3df2:	e854 3f00 	ldrex	r3, [r4]
    3df6:	f043 0202 	orr.w	r2, r3, #2
    3dfa:	e844 2100 	strex	r1, r2, [r4]
    3dfe:	2900      	cmp	r1, #0
    3e00:	d1f7      	bne.n	3df2 <le_gen_dhkey+0x22>
    3e02:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
    3e06:	079b      	lsls	r3, r3, #30
    3e08:	d4ed      	bmi.n	3de6 <le_gen_dhkey+0x16>
	sys_memcpy_swap(ecc.public_key_be, key, BT_PUB_KEY_COORD_LEN);
    3e0a:	4814      	ldr	r0, [pc, #80]	; (3e5c <le_gen_dhkey+0x8c>)
    3e0c:	4631      	mov	r1, r6
    3e0e:	f016 fa8f 	bl	1a330 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.public_key_be[BT_PUB_KEY_COORD_LEN], &key[BT_PUB_KEY_COORD_LEN],
    3e12:	4813      	ldr	r0, [pc, #76]	; (3e60 <le_gen_dhkey+0x90>)
    3e14:	f106 0120 	add.w	r1, r6, #32
    3e18:	f016 fa8a 	bl	1a330 <sys_memcpy_swap.constprop.0>
    3e1c:	f3bf 8f5b 	dmb	ish
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
    3e20:	b175      	cbz	r5, 3e40 <le_gen_dhkey+0x70>
    3e22:	e854 3f00 	ldrex	r3, [r4]
    3e26:	f043 0304 	orr.w	r3, r3, #4
    3e2a:	e844 3200 	strex	r2, r3, [r4]
    3e2e:	2a00      	cmp	r2, #0
    3e30:	d1f7      	bne.n	3e22 <le_gen_dhkey+0x52>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3e32:	f3bf 8f5b 	dmb	ish
	z_impl_k_sem_give(sem);
    3e36:	480b      	ldr	r0, [pc, #44]	; (3e64 <le_gen_dhkey+0x94>)
    3e38:	f013 fe0e 	bl	17a58 <z_impl_k_sem_give>
    3e3c:	2000      	movs	r0, #0
    3e3e:	e7d3      	b.n	3de8 <le_gen_dhkey+0x18>
    3e40:	e854 3f00 	ldrex	r3, [r4]
    3e44:	f023 0304 	bic.w	r3, r3, #4
    3e48:	e844 3200 	strex	r2, r3, [r4]
    3e4c:	2a00      	cmp	r2, #0
    3e4e:	d0f0      	beq.n	3e32 <le_gen_dhkey+0x62>
    3e50:	e7f6      	b.n	3e40 <le_gen_dhkey+0x70>
		return BT_HCI_ERR_INVALID_PARAM;
    3e52:	2012      	movs	r0, #18
    3e54:	e7c8      	b.n	3de8 <le_gen_dhkey+0x18>
    3e56:	bf00      	nop
    3e58:	20001948 	.word	0x20001948
    3e5c:	20002f40 	.word	0x20002f40
    3e60:	20002f60 	.word	0x20002f60
    3e64:	20000b80 	.word	0x20000b80

00003e68 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
    3e68:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    3e6a:	7d06      	ldrb	r6, [r0, #20]
    3e6c:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
    3e6e:	b976      	cbnz	r6, 3e8e <bt_hci_ecc_send+0x26>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
    3e70:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
    3e72:	881d      	ldrh	r5, [r3, #0]
    3e74:	f242 0226 	movw	r2, #8230	; 0x2026
    3e78:	4295      	cmp	r5, r2
    3e7a:	d045      	beq.n	3f08 <bt_hci_ecc_send+0xa0>
    3e7c:	d80f      	bhi.n	3e9e <bt_hci_ecc_send+0x36>
    3e7e:	f242 0201 	movw	r2, #8193	; 0x2001
    3e82:	4295      	cmp	r5, r2
    3e84:	d04f      	beq.n	3f26 <bt_hci_ecc_send+0xbe>
    3e86:	f242 0325 	movw	r3, #8229	; 0x2025
    3e8a:	429d      	cmp	r5, r3
    3e8c:	d013      	beq.n	3eb6 <bt_hci_ecc_send+0x4e>
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
    3e8e:	4b2a      	ldr	r3, [pc, #168]	; (3f38 <bt_hci_ecc_send+0xd0>)
    3e90:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
    3e94:	4620      	mov	r0, r4
    3e96:	691b      	ldr	r3, [r3, #16]
}
    3e98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
    3e9c:	4718      	bx	r3
		switch (sys_le16_to_cpu(chdr->opcode)) {
    3e9e:	f242 035e 	movw	r3, #8286	; 0x205e
    3ea2:	429d      	cmp	r5, r3
    3ea4:	d1f3      	bne.n	3e8e <bt_hci_ecc_send+0x26>
 *
 * @return New beginning of the buffer data.
 */
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull(&buf->b, len);
    3ea6:	2103      	movs	r1, #3
    3ea8:	3008      	adds	r0, #8
    3eaa:	f019 ff07 	bl	1dcbc <net_buf_simple_pull>
	cmd = (void *)buf->data;
    3eae:	68a0      	ldr	r0, [r4, #8]
	status = le_gen_dhkey(cmd->key, cmd->key_type);
    3eb0:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    3eb4:	e02e      	b.n	3f14 <bt_hci_ecc_send+0xac>
    3eb6:	2103      	movs	r1, #3
    3eb8:	3008      	adds	r0, #8
    3eba:	f019 feff 	bl	1dcbc <net_buf_simple_pull>
	net_buf_unref(buf);
    3ebe:	4620      	mov	r0, r4
    3ec0:	f011 fc72 	bl	157a8 <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3ec4:	f3bf 8f5b 	dmb	ish
    3ec8:	4b1c      	ldr	r3, [pc, #112]	; (3f3c <bt_hci_ecc_send+0xd4>)
    3eca:	681a      	ldr	r2, [r3, #0]
    3ecc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
    3ed0:	0792      	lsls	r2, r2, #30
    3ed2:	d507      	bpl.n	3ee4 <bt_hci_ecc_send+0x7c>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    3ed4:	260c      	movs	r6, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
    3ed6:	4631      	mov	r1, r6
    3ed8:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
    3edc:	f016 fa04 	bl	1a2e8 <send_cmd_status>
}
    3ee0:	2000      	movs	r0, #0
    3ee2:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3ee4:	f3bf 8f5b 	dmb	ish
    3ee8:	e853 2f00 	ldrex	r2, [r3]
    3eec:	f042 0101 	orr.w	r1, r2, #1
    3ef0:	e843 1000 	strex	r0, r1, [r3]
    3ef4:	2800      	cmp	r0, #0
    3ef6:	d1f7      	bne.n	3ee8 <bt_hci_ecc_send+0x80>
    3ef8:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
    3efc:	07d3      	lsls	r3, r2, #31
    3efe:	d4e9      	bmi.n	3ed4 <bt_hci_ecc_send+0x6c>
    3f00:	480f      	ldr	r0, [pc, #60]	; (3f40 <bt_hci_ecc_send+0xd8>)
    3f02:	f013 fda9 	bl	17a58 <z_impl_k_sem_give>
}
    3f06:	e7e6      	b.n	3ed6 <bt_hci_ecc_send+0x6e>
    3f08:	2103      	movs	r1, #3
    3f0a:	3008      	adds	r0, #8
    3f0c:	f019 fed6 	bl	1dcbc <net_buf_simple_pull>
	status = le_gen_dhkey(cmd->key, BT_HCI_LE_KEY_TYPE_GENERATED);
    3f10:	68a0      	ldr	r0, [r4, #8]
    3f12:	4631      	mov	r1, r6
	status = le_gen_dhkey(cmd->key, cmd->key_type);
    3f14:	f7ff ff5c 	bl	3dd0 <le_gen_dhkey>
    3f18:	4606      	mov	r6, r0
	net_buf_unref(buf);
    3f1a:	4620      	mov	r0, r4
    3f1c:	f011 fc44 	bl	157a8 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
    3f20:	4631      	mov	r1, r6
    3f22:	4628      	mov	r0, r5
    3f24:	e7da      	b.n	3edc <bt_hci_ecc_send+0x74>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
    3f26:	78da      	ldrb	r2, [r3, #3]
    3f28:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    3f2c:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
    3f2e:	791a      	ldrb	r2, [r3, #4]
    3f30:	f022 0201 	bic.w	r2, r2, #1
    3f34:	711a      	strb	r2, [r3, #4]
}
    3f36:	e7aa      	b.n	3e8e <bt_hci_ecc_send+0x26>
    3f38:	20000000 	.word	0x20000000
    3f3c:	20001948 	.word	0x20001948
    3f40:	20000b80 	.word	0x20000b80

00003f44 <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
    3f44:	b510      	push	{r4, lr}
    3f46:	4b0d      	ldr	r3, [pc, #52]	; (3f7c <save_id+0x38>)
    3f48:	4c0d      	ldr	r4, [pc, #52]	; (3f80 <save_id+0x3c>)
	int err;
	BT_INFO("Saving ID");
    3f4a:	480e      	ldr	r0, [pc, #56]	; (3f84 <save_id+0x40>)
    3f4c:	1ae4      	subs	r4, r4, r3
    3f4e:	08e4      	lsrs	r4, r4, #3
    3f50:	01a4      	lsls	r4, r4, #6
    3f52:	f044 0103 	orr.w	r1, r4, #3
    3f56:	f015 fa74 	bl	19442 <log_0>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
    3f5a:	490b      	ldr	r1, [pc, #44]	; (3f88 <save_id+0x44>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
    3f5c:	480b      	ldr	r0, [pc, #44]	; (3f8c <save_id+0x48>)
    3f5e:	79ca      	ldrb	r2, [r1, #7]
    3f60:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    3f64:	f7ff f87c 	bl	3060 <settings_save_one>
	if (err) {
    3f68:	4601      	mov	r1, r0
    3f6a:	b130      	cbz	r0, 3f7a <save_id+0x36>
		BT_ERR("Failed to save ID (err %d)", err);
    3f6c:	f044 0201 	orr.w	r2, r4, #1
    3f70:	4807      	ldr	r0, [pc, #28]	; (3f90 <save_id+0x4c>)
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		BT_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
    3f72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Failed to save ID (err %d)", err);
    3f76:	f015 ba71 	b.w	1945c <log_1>
}
    3f7a:	bd10      	pop	{r4, pc}
    3f7c:	0001ef2c 	.word	0x0001ef2c
    3f80:	0001f104 	.word	0x0001f104
    3f84:	00020061 	.word	0x00020061
    3f88:	20000000 	.word	0x20000000
    3f8c:	0002006b 	.word	0x0002006b
    3f90:	00020071 	.word	0x00020071

00003f94 <set>:
{
    3f94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3f96:	4616      	mov	r6, r2
    3f98:	461f      	mov	r7, r3
	if (!name) {
    3f9a:	4604      	mov	r4, r0
    3f9c:	b960      	cbnz	r0, 3fb8 <set+0x24>
    3f9e:	4925      	ldr	r1, [pc, #148]	; (4034 <set+0xa0>)
    3fa0:	4b25      	ldr	r3, [pc, #148]	; (4038 <set+0xa4>)
		BT_ERR("Insufficient number of arguments");
    3fa2:	4826      	ldr	r0, [pc, #152]	; (403c <set+0xa8>)
    3fa4:	1ac9      	subs	r1, r1, r3
    3fa6:	08c9      	lsrs	r1, r1, #3
    3fa8:	0189      	lsls	r1, r1, #6
    3faa:	f041 0101 	orr.w	r1, r1, #1
    3fae:	f015 fa48 	bl	19442 <log_0>
	return -ENOENT;
    3fb2:	f06f 0401 	mvn.w	r4, #1
    3fb6:	e01c      	b.n	3ff2 <set+0x5e>
	len = settings_name_next(name, &next);
    3fb8:	a901      	add	r1, sp, #4
    3fba:	f015 fdc5 	bl	19b48 <settings_name_next>
	if (!strncmp(name, "id", len)) {
    3fbe:	4920      	ldr	r1, [pc, #128]	; (4040 <set+0xac>)
	len = settings_name_next(name, &next);
    3fc0:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
    3fc2:	4620      	mov	r0, r4
    3fc4:	f016 f939 	bl	1a23a <strncmp>
    3fc8:	4604      	mov	r4, r0
    3fca:	2800      	cmp	r0, #0
    3fcc:	d1f1      	bne.n	3fb2 <set+0x1e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3fce:	f3bf 8f5b 	dmb	ish
    3fd2:	4d1c      	ldr	r5, [pc, #112]	; (4044 <set+0xb0>)
    3fd4:	682b      	ldr	r3, [r5, #0]
    3fd6:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
    3fda:	075b      	lsls	r3, r3, #29
    3fdc:	d50c      	bpl.n	3ff8 <set+0x64>
    3fde:	4915      	ldr	r1, [pc, #84]	; (4034 <set+0xa0>)
    3fe0:	4b15      	ldr	r3, [pc, #84]	; (4038 <set+0xa4>)
			BT_WARN("Ignoring identities stored in flash");
    3fe2:	4819      	ldr	r0, [pc, #100]	; (4048 <set+0xb4>)
    3fe4:	1ac9      	subs	r1, r1, r3
    3fe6:	08c9      	lsrs	r1, r1, #3
    3fe8:	0189      	lsls	r1, r1, #6
    3fea:	f041 0102 	orr.w	r1, r1, #2
    3fee:	f015 fa28 	bl	19442 <log_0>
}
    3ff2:	4620      	mov	r0, r4
    3ff4:	b003      	add	sp, #12
    3ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
    3ff8:	3dcc      	subs	r5, #204	; 0xcc
    3ffa:	2207      	movs	r2, #7
    3ffc:	4629      	mov	r1, r5
    3ffe:	4638      	mov	r0, r7
    4000:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
    4002:	2806      	cmp	r0, #6
    4004:	d810      	bhi.n	4028 <set+0x94>
    4006:	4b0c      	ldr	r3, [pc, #48]	; (4038 <set+0xa4>)
    4008:	490a      	ldr	r1, [pc, #40]	; (4034 <set+0xa0>)
				BT_ERR("Invalid length ID address in storage");
    400a:	4810      	ldr	r0, [pc, #64]	; (404c <set+0xb8>)
    400c:	1ac9      	subs	r1, r1, r3
    400e:	08c9      	lsrs	r1, r1, #3
    4010:	0189      	lsls	r1, r1, #6
    4012:	f041 0101 	orr.w	r1, r1, #1
    4016:	f015 fa14 	bl	19442 <log_0>
			(void)memset(bt_dev.id_addr, 0,
    401a:	2207      	movs	r2, #7
    401c:	4621      	mov	r1, r4
    401e:	4628      	mov	r0, r5
    4020:	f016 f938 	bl	1a294 <memset>
			bt_dev.id_count = 0U;
    4024:	71ec      	strb	r4, [r5, #7]
    4026:	e7e4      	b.n	3ff2 <set+0x5e>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
    4028:	2307      	movs	r3, #7
    402a:	fbb0 f0f3 	udiv	r0, r0, r3
    402e:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
    4030:	e7df      	b.n	3ff2 <set+0x5e>
    4032:	bf00      	nop
    4034:	0001f104 	.word	0x0001f104
    4038:	0001ef2c 	.word	0x0001ef2c
    403c:	0002008c 	.word	0x0002008c
    4040:	00020015 	.word	0x00020015
    4044:	200000cc 	.word	0x200000cc
    4048:	000200ad 	.word	0x000200ad
    404c:	000200d1 	.word	0x000200d1

00004050 <bt_settings_encode_key>:
{
    4050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4054:	b088      	sub	sp, #32
		snprintk(path, path_size,
    4056:	799c      	ldrb	r4, [r3, #6]
{
    4058:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
    405c:	795d      	ldrb	r5, [r3, #5]
    405e:	791e      	ldrb	r6, [r3, #4]
    4060:	78df      	ldrb	r7, [r3, #3]
    4062:	f893 c002 	ldrb.w	ip, [r3, #2]
    4066:	f893 e001 	ldrb.w	lr, [r3, #1]
    406a:	781b      	ldrb	r3, [r3, #0]
	if (key) {
    406c:	f1b8 0f00 	cmp.w	r8, #0
    4070:	d00e      	beq.n	4090 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
    4072:	e9cd 3806 	strd	r3, r8, [sp, #24]
    4076:	e9cd ce04 	strd	ip, lr, [sp, #16]
    407a:	4613      	mov	r3, r2
    407c:	e9cd 6702 	strd	r6, r7, [sp, #8]
    4080:	e9cd 4500 	strd	r4, r5, [sp]
    4084:	4a08      	ldr	r2, [pc, #32]	; (40a8 <bt_settings_encode_key+0x58>)
    4086:	f014 fdaa 	bl	18bde <snprintk>
}
    408a:	b008      	add	sp, #32
    408c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
    4090:	e9cd e305 	strd	lr, r3, [sp, #20]
    4094:	e9cd 7c03 	strd	r7, ip, [sp, #12]
    4098:	4613      	mov	r3, r2
    409a:	e9cd 5601 	strd	r5, r6, [sp, #4]
    409e:	4a03      	ldr	r2, [pc, #12]	; (40ac <bt_settings_encode_key+0x5c>)
    40a0:	9400      	str	r4, [sp, #0]
    40a2:	f014 fd9c 	bl	18bde <snprintk>
}
    40a6:	e7f0      	b.n	408a <bt_settings_encode_key+0x3a>
    40a8:	000200f6 	.word	0x000200f6
    40ac:	0002011a 	.word	0x0002011a

000040b0 <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
    40b0:	4801      	ldr	r0, [pc, #4]	; (40b8 <bt_settings_save_id+0x8>)
    40b2:	f013 be3d 	b.w	17d30 <k_work_submit>
    40b6:	bf00      	nop
    40b8:	20000284 	.word	0x20000284

000040bc <commit>:
}

static int commit(void)
{
    40bc:	b538      	push	{r3, r4, r5, lr}
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
    40be:	4d1b      	ldr	r5, [pc, #108]	; (412c <commit+0x70>)
    40c0:	79eb      	ldrb	r3, [r5, #7]
    40c2:	b9b3      	cbnz	r3, 40f2 <commit+0x36>
		err = bt_setup_public_id_addr();
    40c4:	f001 fb8c 	bl	57e0 <bt_setup_public_id_addr>
		if (err) {
    40c8:	4604      	mov	r4, r0
    40ca:	b158      	cbz	r0, 40e4 <commit+0x28>
    40cc:	4918      	ldr	r1, [pc, #96]	; (4130 <commit+0x74>)
    40ce:	4b19      	ldr	r3, [pc, #100]	; (4134 <commit+0x78>)
	}

	if (!bt_dev.id_count) {
		err = bt_setup_random_id_addr();
		if (err) {
			BT_ERR("Unable to setup an identity address");
    40d0:	4819      	ldr	r0, [pc, #100]	; (4138 <commit+0x7c>)
    40d2:	1ac9      	subs	r1, r1, r3
    40d4:	08c9      	lsrs	r1, r1, #3
    40d6:	0189      	lsls	r1, r1, #6
    40d8:	f041 0101 	orr.w	r1, r1, #1
    40dc:	f015 f9b1 	bl	19442 <log_0>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
    40e0:	4620      	mov	r0, r4
    40e2:	bd38      	pop	{r3, r4, r5, pc}
	if (!bt_dev.id_count) {
    40e4:	79eb      	ldrb	r3, [r5, #7]
    40e6:	b923      	cbnz	r3, 40f2 <commit+0x36>
		err = bt_setup_random_id_addr();
    40e8:	f001 fbe4 	bl	58b4 <bt_setup_random_id_addr>
		if (err) {
    40ec:	4604      	mov	r4, r0
    40ee:	2800      	cmp	r0, #0
    40f0:	d1ec      	bne.n	40cc <commit+0x10>
    40f2:	f3bf 8f5b 	dmb	ish
    40f6:	4d11      	ldr	r5, [pc, #68]	; (413c <commit+0x80>)
    40f8:	682b      	ldr	r3, [r5, #0]
    40fa:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    40fe:	079b      	lsls	r3, r3, #30
    4100:	d401      	bmi.n	4106 <commit+0x4a>
		bt_finalize_init();
    4102:	f000 ff89 	bl	5018 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4106:	f3bf 8f5b 	dmb	ish
    410a:	e855 4f00 	ldrex	r4, [r5]
    410e:	f424 4380 	bic.w	r3, r4, #16384	; 0x4000
    4112:	e845 3200 	strex	r2, r3, [r5]
    4116:	2a00      	cmp	r2, #0
    4118:	d1f7      	bne.n	410a <commit+0x4e>
    411a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
    411e:	f414 4480 	ands.w	r4, r4, #16384	; 0x4000
    4122:	d0dd      	beq.n	40e0 <commit+0x24>
		bt_settings_save_id();
    4124:	f7ff ffc4 	bl	40b0 <bt_settings_save_id>
	return 0;
    4128:	2400      	movs	r4, #0
    412a:	e7d9      	b.n	40e0 <commit+0x24>
    412c:	20000000 	.word	0x20000000
    4130:	0001f104 	.word	0x0001f104
    4134:	0001ef2c 	.word	0x0001ef2c
    4138:	0002013b 	.word	0x0002013b
    413c:	200000cc 	.word	0x200000cc

00004140 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    4140:	b430      	push	{r4, r5}
    4142:	4603      	mov	r3, r0
    4144:	4608      	mov	r0, r1
	switch (src->type) {
    4146:	781a      	ldrb	r2, [r3, #0]
    4148:	2a01      	cmp	r2, #1
    414a:	d013      	beq.n	4174 <uuid_to_uuid128+0x34>
    414c:	2a02      	cmp	r2, #2
    414e:	d026      	beq.n	419e <uuid_to_uuid128+0x5e>
    4150:	b972      	cbnz	r2, 4170 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    4152:	4a15      	ldr	r2, [pc, #84]	; (41a8 <uuid_to_uuid128+0x68>)
    4154:	f102 0410 	add.w	r4, r2, #16
    4158:	f852 5b04 	ldr.w	r5, [r2], #4
    415c:	f841 5b04 	str.w	r5, [r1], #4
    4160:	42a2      	cmp	r2, r4
    4162:	d1f9      	bne.n	4158 <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
    4164:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
    4166:	7812      	ldrb	r2, [r2, #0]
    4168:	700a      	strb	r2, [r1, #0]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    416a:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    416c:	0a1b      	lsrs	r3, r3, #8
    416e:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    4170:	bc30      	pop	{r4, r5}
    4172:	4770      	bx	lr
		*dst = uuid128_base;
    4174:	4a0c      	ldr	r2, [pc, #48]	; (41a8 <uuid_to_uuid128+0x68>)
    4176:	f102 0410 	add.w	r4, r2, #16
    417a:	f852 5b04 	ldr.w	r5, [r2], #4
    417e:	f841 5b04 	str.w	r5, [r1], #4
    4182:	42a2      	cmp	r2, r4
    4184:	d1f9      	bne.n	417a <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
    4186:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
    4188:	7812      	ldrb	r2, [r2, #0]
    418a:	700a      	strb	r2, [r1, #0]
    418c:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    4190:	7343      	strb	r3, [r0, #13]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    4192:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    4194:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    4196:	0a1b      	lsrs	r3, r3, #8
    4198:	7382      	strb	r2, [r0, #14]
    419a:	7403      	strb	r3, [r0, #16]
}
    419c:	e7e8      	b.n	4170 <uuid_to_uuid128+0x30>
}
    419e:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
    41a0:	2211      	movs	r2, #17
    41a2:	4619      	mov	r1, r3
    41a4:	f016 b86b 	b.w	1a27e <memcpy>
    41a8:	00020179 	.word	0x00020179

000041ac <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    41ac:	b538      	push	{r3, r4, r5, lr}
    41ae:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
    41b0:	4805      	ldr	r0, [pc, #20]	; (41c8 <bt_buf_get_rx+0x1c>)
    41b2:	f019 fca5 	bl	1db00 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    41b6:	4604      	mov	r4, r0
    41b8:	b120      	cbz	r0, 41c4 <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
    41ba:	2100      	movs	r1, #0
    41bc:	3008      	adds	r0, #8
    41be:	f019 fcc4 	bl	1db4a <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    41c2:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    41c4:	4620      	mov	r0, r4
    41c6:	bd38      	pop	{r3, r4, r5, pc}
    41c8:	20000cd8 	.word	0x20000cd8

000041cc <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    41cc:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
    41ce:	490b      	ldr	r1, [pc, #44]	; (41fc <bt_buf_get_cmd_complete+0x30>)
{
    41d0:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
    41d2:	f8d1 0130 	ldr.w	r0, [r1, #304]	; 0x130
{
    41d6:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
    41d8:	b920      	cbnz	r0, 41e4 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    41da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    41de:	2001      	movs	r0, #1
    41e0:	f7ff bfe4 	b.w	41ac <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
    41e4:	f019 fcdf 	bl	1dba6 <net_buf_ref>
    41e8:	2301      	movs	r3, #1
		buf->len = 0U;
    41ea:	2100      	movs	r1, #0
    41ec:	7503      	strb	r3, [r0, #20]
    41ee:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
    41f0:	4604      	mov	r4, r0
    41f2:	3008      	adds	r0, #8
    41f4:	f019 fca9 	bl	1db4a <net_buf_simple_reserve>
}
    41f8:	4620      	mov	r0, r4
    41fa:	bd10      	pop	{r4, pc}
    41fc:	20000000 	.word	0x20000000

00004200 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    4200:	b570      	push	{r4, r5, r6, lr}
    4202:	4604      	mov	r4, r0
	switch (evt) {
    4204:	2c0f      	cmp	r4, #15
{
    4206:	460d      	mov	r5, r1
    4208:	4610      	mov	r0, r2
    420a:	4619      	mov	r1, r3
	switch (evt) {
    420c:	d805      	bhi.n	421a <bt_buf_get_evt+0x1a>
    420e:	2c0d      	cmp	r4, #13
    4210:	d912      	bls.n	4238 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    4212:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    4216:	f7ff bfd9 	b.w	41cc <bt_buf_get_cmd_complete>
	switch (evt) {
    421a:	2c13      	cmp	r4, #19
    421c:	d10c      	bne.n	4238 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    421e:	480b      	ldr	r0, [pc, #44]	; (424c <bt_buf_get_evt+0x4c>)
    4220:	f019 fc6e 	bl	1db00 <net_buf_alloc_fixed>
			if (buf) {
    4224:	4604      	mov	r4, r0
    4226:	b128      	cbz	r0, 4234 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
    4228:	2100      	movs	r1, #0
    422a:	3008      	adds	r0, #8
    422c:	f019 fc8d 	bl	1db4a <net_buf_simple_reserve>
    4230:	2301      	movs	r3, #1
    4232:	7523      	strb	r3, [r4, #20]
}
    4234:	4620      	mov	r0, r4
    4236:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
    4238:	4602      	mov	r2, r0
    423a:	460b      	mov	r3, r1
		if (discardable) {
    423c:	b10d      	cbz	r5, 4242 <bt_buf_get_evt+0x42>
    423e:	4804      	ldr	r0, [pc, #16]	; (4250 <bt_buf_get_evt+0x50>)
    4240:	e7ee      	b.n	4220 <bt_buf_get_evt+0x20>
}
    4242:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    4246:	2001      	movs	r0, #1
    4248:	f7ff bfb0 	b.w	41ac <bt_buf_get_rx>
    424c:	20000d28 	.word	0x20000d28
    4250:	20000c60 	.word	0x20000c60

00004254 <ver_str>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(uint8_t ver)
{
    4254:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    4256:	4d0b      	ldr	r5, [pc, #44]	; (4284 <ver_str+0x30>)
{
    4258:	4606      	mov	r6, r0
	const char * const str[] = {
    425a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    425c:	b08e      	sub	sp, #56	; 0x38
	const char * const str[] = {
    425e:	ac01      	add	r4, sp, #4
    4260:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    4262:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    4264:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    4266:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    4268:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0", "5.1", "5.2", "5.3"
	};

	if (ver < ARRAY_SIZE(str)) {
    426a:	2e0c      	cmp	r6, #12
	const char * const str[] = {
    426c:	682b      	ldr	r3, [r5, #0]
    426e:	6023      	str	r3, [r4, #0]
		return str[ver];
    4270:	bf9b      	ittet	ls
    4272:	ab0e      	addls	r3, sp, #56	; 0x38
    4274:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
    4278:	4803      	ldrhi	r0, [pc, #12]	; (4288 <ver_str+0x34>)
		return str[ver];
    427a:	f856 0c34 	ldrls.w	r0, [r6, #-52]
}
    427e:	b00e      	add	sp, #56	; 0x38
    4280:	bd70      	pop	{r4, r5, r6, pc}
    4282:	bf00      	nop
    4284:	0001f1dc 	.word	0x0001f1dc
    4288:	00020280 	.word	0x00020280

0000428c <hci_data_buf_overflow>:
    428c:	4905      	ldr	r1, [pc, #20]	; (42a4 <hci_data_buf_overflow+0x18>)
    428e:	4a06      	ldr	r2, [pc, #24]	; (42a8 <hci_data_buf_overflow+0x1c>)
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
    4290:	6883      	ldr	r3, [r0, #8]
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    4292:	4806      	ldr	r0, [pc, #24]	; (42ac <hci_data_buf_overflow+0x20>)
    4294:	1a52      	subs	r2, r2, r1
    4296:	08d2      	lsrs	r2, r2, #3
    4298:	0192      	lsls	r2, r2, #6
    429a:	7819      	ldrb	r1, [r3, #0]
    429c:	f042 0202 	orr.w	r2, r2, #2
    42a0:	f015 b8dc 	b.w	1945c <log_1>
    42a4:	0001ef2c 	.word	0x0001ef2c
    42a8:	0001f01c 	.word	0x0001f01c
    42ac:	00020288 	.word	0x00020288

000042b0 <hci_disconn_complete_prio>:
{
    42b0:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    42b2:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
    42b4:	781a      	ldrb	r2, [r3, #0]
    42b6:	b972      	cbnz	r2, 42d6 <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    42b8:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    42bc:	4620      	mov	r0, r4
    42be:	f001 ff61 	bl	6184 <bt_conn_lookup_handle>
	if (!conn) {
    42c2:	4605      	mov	r5, r0
    42c4:	b940      	cbnz	r0, 42d8 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
    42c6:	4b08      	ldr	r3, [pc, #32]	; (42e8 <hci_disconn_complete_prio+0x38>)
    42c8:	881a      	ldrh	r2, [r3, #0]
    42ca:	b922      	cbnz	r2, 42d6 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
    42cc:	ea6f 5004 	mvn.w	r0, r4, lsl #20
    42d0:	ea6f 5010 	mvn.w	r0, r0, lsr #20
    42d4:	8018      	strh	r0, [r3, #0]
}
    42d6:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    42d8:	2101      	movs	r1, #1
    42da:	f001 ff5b 	bl	6194 <bt_conn_set_state>
	bt_conn_unref(conn);
    42de:	4628      	mov	r0, r5
}
    42e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    42e4:	f016 bbfb 	b.w	1aade <bt_conn_unref>
    42e8:	20002e10 	.word	0x20002e10

000042ec <hci_disconn_complete>:
{
    42ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    42ee:	6885      	ldr	r5, [r0, #8]
	if (evt->status) {
    42f0:	782e      	ldrb	r6, [r5, #0]
    42f2:	b9ee      	cbnz	r6, 4330 <hci_disconn_complete+0x44>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    42f4:	f8b5 7001 	ldrh.w	r7, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    42f8:	4638      	mov	r0, r7
    42fa:	f001 ff43 	bl	6184 <bt_conn_lookup_handle>
	if (!conn) {
    42fe:	4604      	mov	r4, r0
    4300:	b960      	cbnz	r0, 431c <hci_disconn_complete+0x30>
    4302:	4b0c      	ldr	r3, [pc, #48]	; (4334 <hci_disconn_complete+0x48>)
    4304:	4a0c      	ldr	r2, [pc, #48]	; (4338 <hci_disconn_complete+0x4c>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    4306:	480d      	ldr	r0, [pc, #52]	; (433c <hci_disconn_complete+0x50>)
    4308:	1ad2      	subs	r2, r2, r3
    430a:	08d2      	lsrs	r2, r2, #3
    430c:	0192      	lsls	r2, r2, #6
    430e:	4639      	mov	r1, r7
    4310:	f042 0201 	orr.w	r2, r2, #1
}
    4314:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    4318:	f015 b8a0 	b.w	1945c <log_1>
	conn->err = evt->reason;
    431c:	78eb      	ldrb	r3, [r5, #3]
    431e:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4320:	4631      	mov	r1, r6
    4322:	f001 ff37 	bl	6194 <bt_conn_set_state>
		bt_conn_unref(conn);
    4326:	4620      	mov	r0, r4
}
    4328:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    432c:	f016 bbd7 	b.w	1aade <bt_conn_unref>
}
    4330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4332:	bf00      	nop
    4334:	0001ef2c 	.word	0x0001ef2c
    4338:	0001f01c 	.word	0x0001f01c
    433c:	000202b0 	.word	0x000202b0

00004340 <hci_hardware_error>:
{
    4340:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    4342:	2101      	movs	r1, #1
    4344:	3008      	adds	r0, #8
    4346:	f019 fcc1 	bl	1dccc <net_buf_simple_pull_mem>
    434a:	4b06      	ldr	r3, [pc, #24]	; (4364 <hci_hardware_error+0x24>)
    434c:	4a06      	ldr	r2, [pc, #24]	; (4368 <hci_hardware_error+0x28>)
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    434e:	7801      	ldrb	r1, [r0, #0]
    4350:	4806      	ldr	r0, [pc, #24]	; (436c <hci_hardware_error+0x2c>)
    4352:	1ad2      	subs	r2, r2, r3
    4354:	08d2      	lsrs	r2, r2, #3
    4356:	0192      	lsls	r2, r2, #6
}
    4358:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    435c:	f042 0201 	orr.w	r2, r2, #1
    4360:	f015 b87c 	b.w	1945c <log_1>
    4364:	0001ef2c 	.word	0x0001ef2c
    4368:	0001f01c 	.word	0x0001f01c
    436c:	000202d6 	.word	0x000202d6

00004370 <hci_vendor_event>:
{
    4370:	b510      	push	{r4, lr}
    4372:	4a0a      	ldr	r2, [pc, #40]	; (439c <hci_vendor_event+0x2c>)
    4374:	4c0a      	ldr	r4, [pc, #40]	; (43a0 <hci_vendor_event+0x30>)
		BT_WARN("Unhandled vendor-specific event: %s",
    4376:	8981      	ldrh	r1, [r0, #12]
    4378:	6880      	ldr	r0, [r0, #8]
    437a:	1aa4      	subs	r4, r4, r2
    437c:	f7ff fcc8 	bl	3d10 <bt_hex_real>
{
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
    4380:	f7fe f9bc 	bl	26fc <z_log_strdup>
    4384:	08e4      	lsrs	r4, r4, #3
    4386:	01a4      	lsls	r4, r4, #6
    4388:	f044 0402 	orr.w	r4, r4, #2
    438c:	4601      	mov	r1, r0
    438e:	4622      	mov	r2, r4
    4390:	4804      	ldr	r0, [pc, #16]	; (43a4 <hci_vendor_event+0x34>)
}
    4392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    4396:	f015 b861 	b.w	1945c <log_1>
    439a:	bf00      	nop
    439c:	0001ef2c 	.word	0x0001ef2c
    43a0:	0001f01c 	.word	0x0001f01c
    43a4:	000202f8 	.word	0x000202f8

000043a8 <le_conn_update_complete>:
{
    43a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    43aa:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    43ac:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    43b0:	4630      	mov	r0, r6
    43b2:	f001 fee7 	bl	6184 <bt_conn_lookup_handle>
	if (!conn) {
    43b6:	4604      	mov	r4, r0
    43b8:	b968      	cbnz	r0, 43d6 <le_conn_update_complete+0x2e>
    43ba:	4b25      	ldr	r3, [pc, #148]	; (4450 <le_conn_update_complete+0xa8>)
    43bc:	4a25      	ldr	r2, [pc, #148]	; (4454 <le_conn_update_complete+0xac>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    43be:	4826      	ldr	r0, [pc, #152]	; (4458 <le_conn_update_complete+0xb0>)
    43c0:	1ad2      	subs	r2, r2, r3
    43c2:	08d2      	lsrs	r2, r2, #3
    43c4:	0192      	lsls	r2, r2, #6
    43c6:	f042 0201 	orr.w	r2, r2, #1
    43ca:	4631      	mov	r1, r6
}
    43cc:	b002      	add	sp, #8
    43ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    43d2:	f015 b843 	b.w	1945c <log_1>
	if (!evt->status) {
    43d6:	782b      	ldrb	r3, [r5, #0]
    43d8:	b9cb      	cbnz	r3, 440e <le_conn_update_complete+0x66>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    43da:	792a      	ldrb	r2, [r5, #4]
    43dc:	78eb      	ldrb	r3, [r5, #3]
    43de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    43e2:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    43e6:	79aa      	ldrb	r2, [r5, #6]
    43e8:	796b      	ldrb	r3, [r5, #5]
    43ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    43ee:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    43f2:	79eb      	ldrb	r3, [r5, #7]
    43f4:	7a2a      	ldrb	r2, [r5, #8]
    43f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    43fa:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    43fe:	f001 ffdf 	bl	63c0 <notify_le_param_updated>
	bt_conn_unref(conn);
    4402:	4620      	mov	r0, r4
}
    4404:	b002      	add	sp, #8
    4406:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    440a:	f016 bb68 	b.w	1aade <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    440e:	2b1a      	cmp	r3, #26
    4410:	d1f7      	bne.n	4402 <le_conn_update_complete+0x5a>
    4412:	78c3      	ldrb	r3, [r0, #3]
    4414:	2b01      	cmp	r3, #1
    4416:	d1f4      	bne.n	4402 <le_conn_update_complete+0x5a>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    4418:	f44f 6180 	mov.w	r1, #1024	; 0x400
    441c:	3004      	adds	r0, #4
    441e:	f016 f9d9 	bl	1a7d4 <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
    4422:	0543      	lsls	r3, r0, #21
    4424:	d4ed      	bmi.n	4402 <le_conn_update_complete+0x5a>
		param.interval_min = conn->le.interval_min;
    4426:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
    442a:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
    442e:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
    4432:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
    4436:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
    443a:	f8ad 3004 	strh.w	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
    443e:	4669      	mov	r1, sp
		param.timeout = conn->le.pending_timeout;
    4440:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    4444:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
    4448:	4620      	mov	r0, r4
    444a:	f002 faf1 	bl	6a30 <bt_l2cap_update_conn_param>
    444e:	e7d8      	b.n	4402 <le_conn_update_complete+0x5a>
    4450:	0001ef2c 	.word	0x0001ef2c
    4454:	0001f01c 	.word	0x0001f01c
    4458:	0002031c 	.word	0x0002031c

0000445c <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    445c:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    445e:	4c0d      	ldr	r4, [pc, #52]	; (4494 <find_pending_connect.part.0+0x38>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    4460:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    4462:	2205      	movs	r2, #5
    4464:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    4468:	f002 f88e 	bl	6588 <bt_conn_lookup_state_le>
		if (!conn) {
    446c:	b978      	cbnz	r0, 448e <find_pending_connect.part.0+0x32>
						       BT_ADDR_LE_NONE,
    446e:	4b0a      	ldr	r3, [pc, #40]	; (4498 <find_pending_connect.part.0+0x3c>)
    4470:	6b58      	ldr	r0, [r3, #52]	; 0x34
    4472:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
    4474:	9000      	str	r0, [sp, #0]
    4476:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    447a:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    447e:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
						       BT_ADDR_LE_NONE,
    4482:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    4486:	2204      	movs	r2, #4
    4488:	4669      	mov	r1, sp
    448a:	f002 f87d 	bl	6588 <bt_conn_lookup_state_le>
}
    448e:	b002      	add	sp, #8
    4490:	bd10      	pop	{r4, pc}
    4492:	bf00      	nop
    4494:	20000000 	.word	0x20000000
    4498:	0001f1dc 	.word	0x0001f1dc

0000449c <handle_event>:
{
    449c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    449e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    44a2:	4605      	mov	r5, r0
    44a4:	4608      	mov	r0, r1
		if (handler->event != event) {
    44a6:	7811      	ldrb	r1, [r2, #0]
    44a8:	42a9      	cmp	r1, r5
    44aa:	d01a      	beq.n	44e2 <handle_event+0x46>
	for (i = 0; i < num_handlers; i++) {
    44ac:	3208      	adds	r2, #8
    44ae:	429a      	cmp	r2, r3
    44b0:	d1f9      	bne.n	44a6 <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    44b2:	8986      	ldrh	r6, [r0, #12]
    44b4:	4b16      	ldr	r3, [pc, #88]	; (4510 <handle_event+0x74>)
    44b6:	4c17      	ldr	r4, [pc, #92]	; (4514 <handle_event+0x78>)
    44b8:	6880      	ldr	r0, [r0, #8]
    44ba:	4631      	mov	r1, r6
    44bc:	1ae4      	subs	r4, r4, r3
    44be:	f7ff fc27 	bl	3d10 <bt_hex_real>
    44c2:	f7fe f91b 	bl	26fc <z_log_strdup>
    44c6:	08e4      	lsrs	r4, r4, #3
    44c8:	01a4      	lsls	r4, r4, #6
    44ca:	f044 0402 	orr.w	r4, r4, #2
    44ce:	4603      	mov	r3, r0
    44d0:	f8ad 4000 	strh.w	r4, [sp]
    44d4:	4810      	ldr	r0, [pc, #64]	; (4518 <handle_event+0x7c>)
    44d6:	4632      	mov	r2, r6
    44d8:	4629      	mov	r1, r5
    44da:	f014 ffec 	bl	194b6 <log_3>
}
    44de:	b002      	add	sp, #8
    44e0:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
    44e2:	8981      	ldrh	r1, [r0, #12]
    44e4:	7853      	ldrb	r3, [r2, #1]
    44e6:	428b      	cmp	r3, r1
    44e8:	d90d      	bls.n	4506 <handle_event+0x6a>
    44ea:	4a09      	ldr	r2, [pc, #36]	; (4510 <handle_event+0x74>)
    44ec:	4b09      	ldr	r3, [pc, #36]	; (4514 <handle_event+0x78>)
			BT_ERR("Too small (%u bytes) event 0x%02x",
    44ee:	480b      	ldr	r0, [pc, #44]	; (451c <handle_event+0x80>)
    44f0:	1a9b      	subs	r3, r3, r2
    44f2:	08db      	lsrs	r3, r3, #3
    44f4:	019b      	lsls	r3, r3, #6
    44f6:	f043 0301 	orr.w	r3, r3, #1
    44fa:	462a      	mov	r2, r5
}
    44fc:	b002      	add	sp, #8
    44fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    4502:	f014 bfbf 	b.w	19484 <log_2>
		handler->handler(buf);
    4506:	6853      	ldr	r3, [r2, #4]
}
    4508:	b002      	add	sp, #8
    450a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
    450e:	4718      	bx	r3
    4510:	0001ef2c 	.word	0x0001ef2c
    4514:	0001f01c 	.word	0x0001f01c
    4518:	00020362 	.word	0x00020362
    451c:	00020340 	.word	0x00020340

00004520 <hci_le_meta_event>:
{
    4520:	b510      	push	{r4, lr}
    4522:	2101      	movs	r1, #1
    4524:	4604      	mov	r4, r0
    4526:	3008      	adds	r0, #8
    4528:	f019 fbd0 	bl	1dccc <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    452c:	4621      	mov	r1, r4
    452e:	4a03      	ldr	r2, [pc, #12]	; (453c <hci_le_meta_event+0x1c>)
    4530:	7800      	ldrb	r0, [r0, #0]
}
    4532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    4536:	2308      	movs	r3, #8
    4538:	f7ff bfb0 	b.w	449c <handle_event>
    453c:	0001f3ac 	.word	0x0001f3ac

00004540 <hci_cmd_done>:
{
    4540:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    4544:	4607      	mov	r7, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    4546:	7990      	ldrb	r0, [r2, #6]
    4548:	f8df 8118 	ldr.w	r8, [pc, #280]	; 4664 <hci_cmd_done+0x124>
{
    454c:	460e      	mov	r6, r1
    454e:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    4550:	f011 f86c 	bl	1562c <net_buf_pool_get>
    4554:	4580      	cmp	r8, r0
    4556:	d016      	beq.n	4586 <hci_cmd_done+0x46>
    4558:	4b43      	ldr	r3, [pc, #268]	; (4668 <hci_cmd_done+0x128>)
    455a:	4d44      	ldr	r5, [pc, #272]	; (466c <hci_cmd_done+0x12c>)
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    455c:	79a0      	ldrb	r0, [r4, #6]
    455e:	9700      	str	r7, [sp, #0]
    4560:	1aed      	subs	r5, r5, r3
    4562:	08ed      	lsrs	r5, r5, #3
    4564:	9001      	str	r0, [sp, #4]
    4566:	f011 f861 	bl	1562c <net_buf_pool_get>
    456a:	01ad      	lsls	r5, r5, #6
    456c:	f045 0502 	orr.w	r5, r5, #2
    4570:	e9cd 0802 	strd	r0, r8, [sp, #8]
    4574:	462b      	mov	r3, r5
    4576:	483e      	ldr	r0, [pc, #248]	; (4670 <hci_cmd_done+0x130>)
    4578:	2204      	movs	r2, #4
    457a:	4669      	mov	r1, sp
    457c:	f014 ffb7 	bl	194ee <log_n>
}
    4580:	b004      	add	sp, #16
    4582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
    4586:	4620      	mov	r0, r4
    4588:	f011 f858 	bl	1563c <net_buf_id>
    458c:	4d39      	ldr	r5, [pc, #228]	; (4674 <hci_cmd_done+0x134>)
    458e:	f04f 080c 	mov.w	r8, #12
    4592:	fb08 5000 	mla	r0, r8, r0, r5
    4596:	8843      	ldrh	r3, [r0, #2]
    4598:	42bb      	cmp	r3, r7
    459a:	d014      	beq.n	45c6 <hci_cmd_done+0x86>
    459c:	4b32      	ldr	r3, [pc, #200]	; (4668 <hci_cmd_done+0x128>)
    459e:	4e33      	ldr	r6, [pc, #204]	; (466c <hci_cmd_done+0x12c>)
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    45a0:	4620      	mov	r0, r4
    45a2:	1af6      	subs	r6, r6, r3
    45a4:	f011 f84a 	bl	1563c <net_buf_id>
    45a8:	08f6      	lsrs	r6, r6, #3
    45aa:	fb08 5500 	mla	r5, r8, r0, r5
    45ae:	01b6      	lsls	r6, r6, #6
    45b0:	f046 0602 	orr.w	r6, r6, #2
    45b4:	886a      	ldrh	r2, [r5, #2]
    45b6:	4830      	ldr	r0, [pc, #192]	; (4678 <hci_cmd_done+0x138>)
    45b8:	4633      	mov	r3, r6
    45ba:	4639      	mov	r1, r7
}
    45bc:	b004      	add	sp, #16
    45be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    45c2:	f014 bf5f 	b.w	19484 <log_2>
	if (bt_dev.sent_cmd) {
    45c6:	4f2d      	ldr	r7, [pc, #180]	; (467c <hci_cmd_done+0x13c>)
    45c8:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
    45cc:	b120      	cbz	r0, 45d8 <hci_cmd_done+0x98>
		net_buf_unref(bt_dev.sent_cmd);
    45ce:	f011 f8eb 	bl	157a8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    45d2:	2300      	movs	r3, #0
    45d4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	if (cmd(buf)->state && !status) {
    45d8:	4620      	mov	r0, r4
    45da:	f011 f82f 	bl	1563c <net_buf_id>
    45de:	270c      	movs	r7, #12
    45e0:	fb07 5000 	mla	r0, r7, r0, r5
    45e4:	6843      	ldr	r3, [r0, #4]
    45e6:	b1a3      	cbz	r3, 4612 <hci_cmd_done+0xd2>
    45e8:	b99e      	cbnz	r6, 4612 <hci_cmd_done+0xd2>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    45ea:	4620      	mov	r0, r4
    45ec:	f011 f826 	bl	1563c <net_buf_id>
    45f0:	fb07 5000 	mla	r0, r7, r0, r5
	atomic_val_t mask = ATOMIC_MASK(bit);
    45f4:	2301      	movs	r3, #1
    45f6:	6847      	ldr	r7, [r0, #4]
    45f8:	e9d7 2000 	ldrd	r2, r0, [r7]
    45fc:	f000 011f 	and.w	r1, r0, #31
    4600:	fa03 f101 	lsl.w	r1, r3, r1
	if (val) {
    4604:	7a3b      	ldrb	r3, [r7, #8]
    4606:	0940      	lsrs	r0, r0, #5
    4608:	b1e3      	cbz	r3, 4644 <hci_cmd_done+0x104>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    460a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    460e:	f016 f8e1 	bl	1a7d4 <atomic_or>
	if (cmd(buf)->sync) {
    4612:	4620      	mov	r0, r4
    4614:	f011 f812 	bl	1563c <net_buf_id>
    4618:	270c      	movs	r7, #12
    461a:	fb07 5000 	mla	r0, r7, r0, r5
    461e:	6883      	ldr	r3, [r0, #8]
    4620:	2b00      	cmp	r3, #0
    4622:	d0ad      	beq.n	4580 <hci_cmd_done+0x40>
		cmd(buf)->status = status;
    4624:	4620      	mov	r0, r4
    4626:	f011 f809 	bl	1563c <net_buf_id>
    462a:	4378      	muls	r0, r7
    462c:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    462e:	4620      	mov	r0, r4
    4630:	f011 f804 	bl	1563c <net_buf_id>
    4634:	fb07 5500 	mla	r5, r7, r0, r5
    4638:	68a8      	ldr	r0, [r5, #8]
}
    463a:	b004      	add	sp, #16
    463c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_impl_k_sem_give(sem);
    4640:	f013 ba0a 	b.w	17a58 <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4644:	43cb      	mvns	r3, r1
    4646:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    464a:	f3bf 8f5b 	dmb	ish
    464e:	e852 1f00 	ldrex	r1, [r2]
    4652:	4019      	ands	r1, r3
    4654:	e842 1000 	strex	r0, r1, [r2]
    4658:	2800      	cmp	r0, #0
    465a:	d1f8      	bne.n	464e <hci_cmd_done+0x10e>
    465c:	f3bf 8f5b 	dmb	ish
    4660:	e7d7      	b.n	4612 <hci_cmd_done+0xd2>
    4662:	bf00      	nop
    4664:	20000cb0 	.word	0x20000cb0
    4668:	0001ef2c 	.word	0x0001ef2c
    466c:	0001f01c 	.word	0x0001f01c
    4670:	00020384 	.word	0x00020384
    4674:	2000194c 	.word	0x2000194c
    4678:	000203b9 	.word	0x000203b9
    467c:	20000000 	.word	0x20000000

00004680 <hci_cmd_status>:
{
    4680:	b538      	push	{r3, r4, r5, lr}
    4682:	2104      	movs	r1, #4
    4684:	4604      	mov	r4, r0
    4686:	3008      	adds	r0, #8
    4688:	f019 fb20 	bl	1dccc <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    468c:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    468e:	7801      	ldrb	r1, [r0, #0]
    4690:	8840      	ldrh	r0, [r0, #2]
    4692:	4622      	mov	r2, r4
    4694:	f7ff ff54 	bl	4540 <hci_cmd_done>
	if (ncmd) {
    4698:	b125      	cbz	r5, 46a4 <hci_cmd_status+0x24>
    469a:	4803      	ldr	r0, [pc, #12]	; (46a8 <hci_cmd_status+0x28>)
}
    469c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    46a0:	f013 b9da 	b.w	17a58 <z_impl_k_sem_give>
    46a4:	bd38      	pop	{r3, r4, r5, pc}
    46a6:	bf00      	nop
    46a8:	20000118 	.word	0x20000118

000046ac <hci_cmd_complete>:
{
    46ac:	b538      	push	{r3, r4, r5, lr}
    46ae:	2103      	movs	r1, #3
    46b0:	4604      	mov	r4, r0
    46b2:	3008      	adds	r0, #8
    46b4:	f019 fb0a 	bl	1dccc <net_buf_simple_pull_mem>
	status = buf->data[0];
    46b8:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    46ba:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    46bc:	7819      	ldrb	r1, [r3, #0]
    46be:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    46c2:	4622      	mov	r2, r4
    46c4:	f7ff ff3c 	bl	4540 <hci_cmd_done>
	if (ncmd) {
    46c8:	b125      	cbz	r5, 46d4 <hci_cmd_complete+0x28>
    46ca:	4803      	ldr	r0, [pc, #12]	; (46d8 <hci_cmd_complete+0x2c>)
}
    46cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    46d0:	f013 b9c2 	b.w	17a58 <z_impl_k_sem_give>
    46d4:	bd38      	pop	{r3, r4, r5, pc}
    46d6:	bf00      	nop
    46d8:	20000118 	.word	0x20000118

000046dc <hci_num_completed_packets>:
{
    46dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    46e0:	4d39      	ldr	r5, [pc, #228]	; (47c8 <hci_num_completed_packets+0xec>)
    46e2:	4b3a      	ldr	r3, [pc, #232]	; (47cc <hci_num_completed_packets+0xf0>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    46e4:	f8d0 8008 	ldr.w	r8, [r0, #8]
				BT_ERR("packets count mismatch");
    46e8:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 47d0 <hci_num_completed_packets+0xf4>
    46ec:	1aed      	subs	r5, r5, r3
	for (i = 0; i < evt->num_handles; i++) {
    46ee:	2600      	movs	r6, #0
    46f0:	08ed      	lsrs	r5, r5, #3
			tx->pending_no_cb = 0U;
    46f2:	46b1      	mov	r9, r6
	for (i = 0; i < evt->num_handles; i++) {
    46f4:	f898 3000 	ldrb.w	r3, [r8]
    46f8:	429e      	cmp	r6, r3
    46fa:	db01      	blt.n	4700 <hci_num_completed_packets+0x24>
}
    46fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    4700:	eb08 0386 	add.w	r3, r8, r6, lsl #2
    4704:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    4708:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    470c:	4658      	mov	r0, fp
    470e:	f001 fd39 	bl	6184 <bt_conn_lookup_handle>
		if (!conn) {
    4712:	4604      	mov	r4, r0
    4714:	b1d8      	cbz	r0, 474e <hci_num_completed_packets+0x72>
			k_work_submit(&conn->tx_complete_work);
    4716:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
    471a:	2f00      	cmp	r7, #0
    471c:	d033      	beq.n	4786 <hci_num_completed_packets+0xaa>
	__asm__ volatile(
    471e:	f04f 0320 	mov.w	r3, #32
    4722:	f3ef 8211 	mrs	r2, BASEPRI
    4726:	f383 8812 	msr	BASEPRI_MAX, r3
    472a:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    472e:	69e3      	ldr	r3, [r4, #28]
    4730:	b1b3      	cbz	r3, 4760 <hci_num_completed_packets+0x84>
				conn->pending_no_cb--;
    4732:	3b01      	subs	r3, #1
    4734:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    4736:	f382 8811 	msr	BASEPRI, r2
    473a:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    473e:	4620      	mov	r0, r4
    4740:	f001 fbfe 	bl	5f40 <bt_conn_get_pkts>
    4744:	3f01      	subs	r7, #1
    4746:	f013 f987 	bl	17a58 <z_impl_k_sem_give>
    474a:	b2bf      	uxth	r7, r7
    474c:	e7e5      	b.n	471a <hci_num_completed_packets+0x3e>
			BT_ERR("No connection for handle %u", handle);
    474e:	01aa      	lsls	r2, r5, #6
    4750:	4820      	ldr	r0, [pc, #128]	; (47d4 <hci_num_completed_packets+0xf8>)
    4752:	f042 0201 	orr.w	r2, r2, #1
    4756:	4659      	mov	r1, fp
    4758:	f014 fe80 	bl	1945c <log_1>
	for (i = 0; i < evt->num_handles; i++) {
    475c:	3601      	adds	r6, #1
    475e:	e7c9      	b.n	46f4 <hci_num_completed_packets+0x18>
	return list->head;
    4760:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    4762:	b12b      	cbz	r3, 4770 <hci_num_completed_packets+0x94>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    4764:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    4766:	6818      	ldr	r0, [r3, #0]
	list->head = node;
    4768:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    476a:	428b      	cmp	r3, r1
	list->tail = node;
    476c:	bf08      	it	eq
    476e:	61a0      	streq	r0, [r4, #24]
    4770:	f382 8811 	msr	BASEPRI, r2
    4774:	f3bf 8f6f 	isb	sy
			if (!node) {
    4778:	b94b      	cbnz	r3, 478e <hci_num_completed_packets+0xb2>
				BT_ERR("packets count mismatch");
    477a:	01a9      	lsls	r1, r5, #6
    477c:	f041 0101 	orr.w	r1, r1, #1
    4780:	4650      	mov	r0, sl
    4782:	f014 fe5e 	bl	19442 <log_0>
		bt_conn_unref(conn);
    4786:	4620      	mov	r0, r4
    4788:	f016 f9a9 	bl	1aade <bt_conn_unref>
    478c:	e7e6      	b.n	475c <hci_num_completed_packets+0x80>
	__asm__ volatile(
    478e:	f04f 0220 	mov.w	r2, #32
    4792:	f3ef 8111 	mrs	r1, BASEPRI
    4796:	f382 8812 	msr	BASEPRI_MAX, r2
    479a:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    479e:	68da      	ldr	r2, [r3, #12]
    47a0:	61e2      	str	r2, [r4, #28]
	return list->tail;
    47a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    47a4:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
    47a8:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
    47ac:	b94a      	cbnz	r2, 47c2 <hci_num_completed_packets+0xe6>
	list->head = node;
    47ae:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    47b2:	f381 8811 	msr	BASEPRI, r1
    47b6:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
    47ba:	4658      	mov	r0, fp
    47bc:	f013 fab8 	bl	17d30 <k_work_submit>
    47c0:	e7bd      	b.n	473e <hci_num_completed_packets+0x62>
	parent->next = child;
    47c2:	6013      	str	r3, [r2, #0]
	list->tail = node;
    47c4:	6263      	str	r3, [r4, #36]	; 0x24
}
    47c6:	e7f4      	b.n	47b2 <hci_num_completed_packets+0xd6>
    47c8:	0001f01c 	.word	0x0001f01c
    47cc:	0001ef2c 	.word	0x0001ef2c
    47d0:	000204c0 	.word	0x000204c0
    47d4:	000204a4 	.word	0x000204a4

000047d8 <bt_hci_cmd_state_set_init>:
{
    47d8:	b510      	push	{r4, lr}
	state->bit = bit;
    47da:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
    47de:	f89d 3008 	ldrb.w	r3, [sp, #8]
    47e2:	720b      	strb	r3, [r1, #8]
{
    47e4:	460c      	mov	r4, r1
	cmd(buf)->state = state;
    47e6:	f010 ff29 	bl	1563c <net_buf_id>
    47ea:	4b03      	ldr	r3, [pc, #12]	; (47f8 <bt_hci_cmd_state_set_init+0x20>)
    47ec:	220c      	movs	r2, #12
    47ee:	fb02 3300 	mla	r3, r2, r0, r3
    47f2:	605c      	str	r4, [r3, #4]
}
    47f4:	bd10      	pop	{r4, pc}
    47f6:	bf00      	nop
    47f8:	2000194c 	.word	0x2000194c

000047fc <bt_hci_cmd_create>:
{
    47fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    4800:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4804:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4808:	4606      	mov	r6, r0
    480a:	4817      	ldr	r0, [pc, #92]	; (4868 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
    480c:	4d17      	ldr	r5, [pc, #92]	; (486c <bt_hci_cmd_create+0x70>)
{
    480e:	460f      	mov	r7, r1
    4810:	f019 f976 	bl	1db00 <net_buf_alloc_fixed>
    4814:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    4816:	f100 0a08 	add.w	sl, r0, #8
    481a:	2100      	movs	r1, #0
    481c:	f04f 0800 	mov.w	r8, #0
    4820:	4650      	mov	r0, sl
    4822:	f019 f992 	bl	1db4a <net_buf_simple_reserve>
    4826:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
    482a:	4620      	mov	r0, r4
    482c:	f010 ff06 	bl	1563c <net_buf_id>
    4830:	f04f 090c 	mov.w	r9, #12
    4834:	fb09 5000 	mla	r0, r9, r0, r5
    4838:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    483a:	4620      	mov	r0, r4
    483c:	f010 fefe 	bl	1563c <net_buf_id>
    4840:	fb09 5000 	mla	r0, r9, r0, r5
    4844:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    4848:	4620      	mov	r0, r4
    484a:	f010 fef7 	bl	1563c <net_buf_id>
    484e:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    4852:	2103      	movs	r1, #3
    4854:	f8c5 8004 	str.w	r8, [r5, #4]
    4858:	4650      	mov	r0, sl
    485a:	f019 f9d6 	bl	1dc0a <net_buf_simple_add>
	hdr->param_len = param_len;
    485e:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    4860:	8006      	strh	r6, [r0, #0]
}
    4862:	4620      	mov	r0, r4
    4864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4868:	20000cb0 	.word	0x20000cb0
    486c:	2000194c 	.word	0x2000194c

00004870 <bt_hci_cmd_send>:
{
    4870:	b538      	push	{r3, r4, r5, lr}
    4872:	4605      	mov	r5, r0
	if (!buf) {
    4874:	460c      	mov	r4, r1
    4876:	b919      	cbnz	r1, 4880 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    4878:	f7ff ffc0 	bl	47fc <bt_hci_cmd_create>
		if (!buf) {
    487c:	4604      	mov	r4, r0
    487e:	b1f0      	cbz	r0, 48be <bt_hci_cmd_send+0x4e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    4880:	f640 4335 	movw	r3, #3125	; 0xc35
    4884:	429d      	cmp	r5, r3
    4886:	d114      	bne.n	48b2 <bt_hci_cmd_send+0x42>
	BT_DBG("buf %p len %u type %u", buf, buf->len, bt_buf_get_type(buf));

	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
    4888:	4620      	mov	r0, r4
    488a:	f7ff faed 	bl	3e68 <bt_hci_ecc_send>
		if (err) {
    488e:	4605      	mov	r5, r0
    4890:	b168      	cbz	r0, 48ae <bt_hci_cmd_send+0x3e>
    4892:	4b0c      	ldr	r3, [pc, #48]	; (48c4 <bt_hci_cmd_send+0x54>)
    4894:	4a0c      	ldr	r2, [pc, #48]	; (48c8 <bt_hci_cmd_send+0x58>)
    4896:	1ad2      	subs	r2, r2, r3
    4898:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Unable to send to driver (err %d)", err);
    489a:	0192      	lsls	r2, r2, #6
    489c:	4601      	mov	r1, r0
    489e:	f042 0201 	orr.w	r2, r2, #1
    48a2:	480a      	ldr	r0, [pc, #40]	; (48cc <bt_hci_cmd_send+0x5c>)
    48a4:	f014 fdda 	bl	1945c <log_1>
			net_buf_unref(buf);
    48a8:	4620      	mov	r0, r4
    48aa:	f010 ff7d 	bl	157a8 <net_buf_unref>
}
    48ae:	4628      	mov	r0, r5
    48b0:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    48b2:	4807      	ldr	r0, [pc, #28]	; (48d0 <bt_hci_cmd_send+0x60>)
    48b4:	4621      	mov	r1, r4
    48b6:	f019 f969 	bl	1db8c <net_buf_put>
	return 0;
    48ba:	2500      	movs	r5, #0
    48bc:	e7f7      	b.n	48ae <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
    48be:	f06f 0568 	mvn.w	r5, #104	; 0x68
    48c2:	e7f4      	b.n	48ae <bt_hci_cmd_send+0x3e>
    48c4:	0001ef2c 	.word	0x0001ef2c
    48c8:	0001f01c 	.word	0x0001f01c
    48cc:	00020461 	.word	0x00020461
    48d0:	20000134 	.word	0x20000134

000048d4 <le_conn_param_neg_reply>:
{
    48d4:	b570      	push	{r4, r5, r6, lr}
    48d6:	4606      	mov	r6, r0
    48d8:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    48da:	f242 0021 	movw	r0, #8225	; 0x2021
    48de:	2103      	movs	r1, #3
    48e0:	f7ff ff8c 	bl	47fc <bt_hci_cmd_create>
	if (!buf) {
    48e4:	4604      	mov	r4, r0
    48e6:	b958      	cbnz	r0, 4900 <le_conn_param_neg_reply+0x2c>
    48e8:	490c      	ldr	r1, [pc, #48]	; (491c <le_conn_param_neg_reply+0x48>)
    48ea:	4b0d      	ldr	r3, [pc, #52]	; (4920 <le_conn_param_neg_reply+0x4c>)
		BT_ERR("Unable to allocate buffer");
    48ec:	480d      	ldr	r0, [pc, #52]	; (4924 <le_conn_param_neg_reply+0x50>)
    48ee:	1ac9      	subs	r1, r1, r3
    48f0:	08c9      	lsrs	r1, r1, #3
    48f2:	0189      	lsls	r1, r1, #6
}
    48f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    48f8:	f041 0101 	orr.w	r1, r1, #1
    48fc:	f014 bda1 	b.w	19442 <log_0>
    4900:	2103      	movs	r1, #3
    4902:	3008      	adds	r0, #8
    4904:	f019 f981 	bl	1dc0a <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    4908:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    490a:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    490c:	4621      	mov	r1, r4
    490e:	f242 0021 	movw	r0, #8225	; 0x2021
}
    4912:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    4916:	f7ff bfab 	b.w	4870 <bt_hci_cmd_send>
    491a:	bf00      	nop
    491c:	0001f01c 	.word	0x0001f01c
    4920:	0001ef2c 	.word	0x0001ef2c
    4924:	000204d7 	.word	0x000204d7

00004928 <le_conn_param_req>:
{
    4928:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    492a:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    492c:	78d9      	ldrb	r1, [r3, #3]
    492e:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    4930:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    4932:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4936:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    493a:	7959      	ldrb	r1, [r3, #5]
    493c:	791a      	ldrb	r2, [r3, #4]
    493e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4942:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    4946:	799a      	ldrb	r2, [r3, #6]
    4948:	79d9      	ldrb	r1, [r3, #7]
    494a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    494e:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    4952:	7a1a      	ldrb	r2, [r3, #8]
    4954:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    4956:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    4958:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    495c:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
    495e:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    4962:	f001 fc0f 	bl	6184 <bt_conn_lookup_handle>
	if (!conn) {
    4966:	4606      	mov	r6, r0
    4968:	b980      	cbnz	r0, 498c <le_conn_param_req+0x64>
    496a:	4b20      	ldr	r3, [pc, #128]	; (49ec <le_conn_param_req+0xc4>)
    496c:	4a20      	ldr	r2, [pc, #128]	; (49f0 <le_conn_param_req+0xc8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    496e:	4821      	ldr	r0, [pc, #132]	; (49f4 <le_conn_param_req+0xcc>)
    4970:	1ad2      	subs	r2, r2, r3
    4972:	08d2      	lsrs	r2, r2, #3
    4974:	0192      	lsls	r2, r2, #6
    4976:	4621      	mov	r1, r4
    4978:	f042 0201 	orr.w	r2, r2, #1
    497c:	f014 fd6e 	bl	1945c <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    4980:	2102      	movs	r1, #2
    4982:	4620      	mov	r0, r4
    4984:	f7ff ffa6 	bl	48d4 <le_conn_param_neg_reply>
}
    4988:	b003      	add	sp, #12
    498a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    498c:	4669      	mov	r1, sp
    498e:	f001 fd63 	bl	6458 <le_param_req>
    4992:	b938      	cbnz	r0, 49a4 <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    4994:	211e      	movs	r1, #30
    4996:	4620      	mov	r0, r4
    4998:	f7ff ff9c 	bl	48d4 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    499c:	4630      	mov	r0, r6
    499e:	f016 f89e 	bl	1aade <bt_conn_unref>
    49a2:	e7f1      	b.n	4988 <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    49a4:	210e      	movs	r1, #14
    49a6:	f242 0020 	movw	r0, #8224	; 0x2020
    49aa:	f7ff ff27 	bl	47fc <bt_hci_cmd_create>
	if (!buf) {
    49ae:	4605      	mov	r5, r0
    49b0:	2800      	cmp	r0, #0
    49b2:	d0f3      	beq.n	499c <le_conn_param_req+0x74>
    49b4:	210e      	movs	r1, #14
    49b6:	3008      	adds	r0, #8
    49b8:	f019 f927 	bl	1dc0a <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
    49bc:	220e      	movs	r2, #14
    49be:	4604      	mov	r4, r0
    49c0:	2100      	movs	r1, #0
    49c2:	f015 fc67 	bl	1a294 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    49c6:	f8bd 3000 	ldrh.w	r3, [sp]
    49ca:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    49cc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    49d0:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    49d2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    49d6:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    49d8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
    49dc:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    49de:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    49e0:	4629      	mov	r1, r5
    49e2:	f242 0020 	movw	r0, #8224	; 0x2020
    49e6:	f7ff ff43 	bl	4870 <bt_hci_cmd_send>
    49ea:	e7d7      	b.n	499c <le_conn_param_req+0x74>
    49ec:	0001ef2c 	.word	0x0001ef2c
    49f0:	0001f01c 	.word	0x0001f01c
    49f4:	0002031c 	.word	0x0002031c

000049f8 <conn_auto_initiate>:
{
    49f8:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    49fa:	7a83      	ldrb	r3, [r0, #10]
    49fc:	2b07      	cmp	r3, #7
{
    49fe:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    4a00:	d121      	bne.n	4a46 <conn_auto_initiate+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4a02:	f3bf 8f5b 	dmb	ish
    4a06:	6843      	ldr	r3, [r0, #4]
    4a08:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    4a0c:	049a      	lsls	r2, r3, #18
    4a0e:	d41a      	bmi.n	4a46 <conn_auto_initiate+0x4e>
    4a10:	78c3      	ldrb	r3, [r0, #3]
    4a12:	b123      	cbz	r3, 4a1e <conn_auto_initiate+0x26>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
    4a14:	4b0c      	ldr	r3, [pc, #48]	; (4a48 <conn_auto_initiate+0x50>)
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
    4a16:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
    4a1a:	071b      	lsls	r3, r3, #28
    4a1c:	d513      	bpl.n	4a46 <conn_auto_initiate+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    4a1e:	2102      	movs	r1, #2
    4a20:	f242 0016 	movw	r0, #8214	; 0x2016
    4a24:	f7ff feea 	bl	47fc <bt_hci_cmd_create>
	if (!buf) {
    4a28:	4605      	mov	r5, r0
    4a2a:	b160      	cbz	r0, 4a46 <conn_auto_initiate+0x4e>
    4a2c:	2102      	movs	r1, #2
    4a2e:	3008      	adds	r0, #8
    4a30:	f019 f8eb 	bl	1dc0a <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    4a34:	8823      	ldrh	r3, [r4, #0]
    4a36:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    4a38:	4629      	mov	r1, r5
    4a3a:	f242 0016 	movw	r0, #8214	; 0x2016
}
    4a3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    4a42:	f7ff bf15 	b.w	4870 <bt_hci_cmd_send>
}
    4a46:	bd38      	pop	{r3, r4, r5, pc}
    4a48:	20000000 	.word	0x20000000

00004a4c <le_remote_feat_complete>:
{
    4a4c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    4a4e:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    4a50:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    4a54:	4630      	mov	r0, r6
    4a56:	f001 fb95 	bl	6184 <bt_conn_lookup_handle>
	if (!conn) {
    4a5a:	4604      	mov	r4, r0
    4a5c:	b960      	cbnz	r0, 4a78 <le_remote_feat_complete+0x2c>
    4a5e:	4a10      	ldr	r2, [pc, #64]	; (4aa0 <le_remote_feat_complete+0x54>)
    4a60:	4b10      	ldr	r3, [pc, #64]	; (4aa4 <le_remote_feat_complete+0x58>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    4a62:	4811      	ldr	r0, [pc, #68]	; (4aa8 <le_remote_feat_complete+0x5c>)
    4a64:	1ad2      	subs	r2, r2, r3
    4a66:	08d2      	lsrs	r2, r2, #3
    4a68:	0192      	lsls	r2, r2, #6
    4a6a:	4631      	mov	r1, r6
    4a6c:	f042 0201 	orr.w	r2, r2, #1
}
    4a70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    4a74:	f014 bcf2 	b.w	1945c <log_1>
	if (!evt->status) {
    4a78:	782b      	ldrb	r3, [r5, #0]
    4a7a:	b923      	cbnz	r3, 4a86 <le_remote_feat_complete+0x3a>
		memcpy(conn->le.features, evt->features,
    4a7c:	2208      	movs	r2, #8
    4a7e:	1ce9      	adds	r1, r5, #3
    4a80:	30ac      	adds	r0, #172	; 0xac
    4a82:	f015 fbfc 	bl	1a27e <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    4a86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    4a8a:	1d20      	adds	r0, r4, #4
    4a8c:	f015 fea2 	bl	1a7d4 <atomic_or>
	conn_auto_initiate(conn);
    4a90:	4620      	mov	r0, r4
    4a92:	f7ff ffb1 	bl	49f8 <conn_auto_initiate>
	bt_conn_unref(conn);
    4a96:	4620      	mov	r0, r4
}
    4a98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    4a9c:	f016 b81f 	b.w	1aade <bt_conn_unref>
    4aa0:	0001f01c 	.word	0x0001f01c
    4aa4:	0001ef2c 	.word	0x0001ef2c
    4aa8:	0002031c 	.word	0x0002031c

00004aac <bt_hci_cmd_send_sync>:
{
    4aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ab0:	4607      	mov	r7, r0
    4ab2:	b086      	sub	sp, #24
    4ab4:	4615      	mov	r5, r2
	if (!buf) {
    4ab6:	460c      	mov	r4, r1
    4ab8:	b921      	cbnz	r1, 4ac4 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
    4aba:	f7ff fe9f 	bl	47fc <bt_hci_cmd_create>
		if (!buf) {
    4abe:	4604      	mov	r4, r0
    4ac0:	2800      	cmp	r0, #0
    4ac2:	d057      	beq.n	4b74 <bt_hci_cmd_send_sync+0xc8>
	return z_impl_k_sem_init(sem, initial_count, limit);
    4ac4:	2201      	movs	r2, #1
    4ac6:	2100      	movs	r1, #0
    4ac8:	4668      	mov	r0, sp
    4aca:	f019 fd11 	bl	1e4f0 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    4ace:	4620      	mov	r0, r4
    4ad0:	f010 fdb4 	bl	1563c <net_buf_id>
    4ad4:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 4b7c <bt_hci_cmd_send_sync+0xd0>
    4ad8:	230c      	movs	r3, #12
    4ada:	fb03 8000 	mla	r0, r3, r0, r8
    4ade:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
    4ae2:	4620      	mov	r0, r4
    4ae4:	f019 f85f 	bl	1dba6 <net_buf_ref>
    4ae8:	4601      	mov	r1, r0
    4aea:	4825      	ldr	r0, [pc, #148]	; (4b80 <bt_hci_cmd_send_sync+0xd4>)
    4aec:	f019 f84e 	bl	1db8c <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    4af0:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    4af4:	2300      	movs	r3, #0
    4af6:	4668      	mov	r0, sp
    4af8:	f012 ffd4 	bl	17aa4 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    4afc:	4606      	mov	r6, r0
    4afe:	b180      	cbz	r0, 4b22 <bt_hci_cmd_send_sync+0x76>
    4b00:	4a20      	ldr	r2, [pc, #128]	; (4b84 <bt_hci_cmd_send_sync+0xd8>)
    4b02:	4921      	ldr	r1, [pc, #132]	; (4b88 <bt_hci_cmd_send_sync+0xdc>)
    4b04:	4821      	ldr	r0, [pc, #132]	; (4b8c <bt_hci_cmd_send_sync+0xe0>)
    4b06:	f44f 7399 	mov.w	r3, #306	; 0x132
    4b0a:	f014 f85b 	bl	18bc4 <printk>
    4b0e:	4820      	ldr	r0, [pc, #128]	; (4b90 <bt_hci_cmd_send_sync+0xe4>)
    4b10:	4631      	mov	r1, r6
    4b12:	f014 f857 	bl	18bc4 <printk>
    4b16:	4040      	eors	r0, r0
    4b18:	f380 8811 	msr	BASEPRI, r0
    4b1c:	f04f 0003 	mov.w	r0, #3
    4b20:	df02      	svc	2
	status = cmd(buf)->status;
    4b22:	4620      	mov	r0, r4
    4b24:	f010 fd8a 	bl	1563c <net_buf_id>
    4b28:	230c      	movs	r3, #12
    4b2a:	4358      	muls	r0, r3
    4b2c:	f818 6000 	ldrb.w	r6, [r8, r0]
	if (status) {
    4b30:	b1be      	cbz	r6, 4b62 <bt_hci_cmd_send_sync+0xb6>
    4b32:	4a18      	ldr	r2, [pc, #96]	; (4b94 <bt_hci_cmd_send_sync+0xe8>)
    4b34:	4b18      	ldr	r3, [pc, #96]	; (4b98 <bt_hci_cmd_send_sync+0xec>)
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    4b36:	4819      	ldr	r0, [pc, #100]	; (4b9c <bt_hci_cmd_send_sync+0xf0>)
    4b38:	1a9b      	subs	r3, r3, r2
    4b3a:	08db      	lsrs	r3, r3, #3
    4b3c:	019b      	lsls	r3, r3, #6
    4b3e:	f043 0302 	orr.w	r3, r3, #2
    4b42:	4632      	mov	r2, r6
    4b44:	4639      	mov	r1, r7
    4b46:	f014 fc9d 	bl	19484 <log_2>
		net_buf_unref(buf);
    4b4a:	4620      	mov	r0, r4
    4b4c:	f010 fe2c 	bl	157a8 <net_buf_unref>
			return -EIO;
    4b50:	2e09      	cmp	r6, #9
    4b52:	bf0c      	ite	eq
    4b54:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
    4b58:	f06f 0004 	mvnne.w	r0, #4
}
    4b5c:	b006      	add	sp, #24
    4b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
    4b62:	b115      	cbz	r5, 4b6a <bt_hci_cmd_send_sync+0xbe>
		*rsp = buf;
    4b64:	602c      	str	r4, [r5, #0]
	return 0;
    4b66:	4630      	mov	r0, r6
    4b68:	e7f8      	b.n	4b5c <bt_hci_cmd_send_sync+0xb0>
		net_buf_unref(buf);
    4b6a:	4620      	mov	r0, r4
    4b6c:	f010 fe1c 	bl	157a8 <net_buf_unref>
	return 0;
    4b70:	4628      	mov	r0, r5
    4b72:	e7f3      	b.n	4b5c <bt_hci_cmd_send_sync+0xb0>
			return -ENOBUFS;
    4b74:	f06f 0068 	mvn.w	r0, #104	; 0x68
    4b78:	e7f0      	b.n	4b5c <bt_hci_cmd_send_sync+0xb0>
    4b7a:	bf00      	nop
    4b7c:	2000194c 	.word	0x2000194c
    4b80:	20000134 	.word	0x20000134
    4b84:	000203ec 	.word	0x000203ec
    4b88:	00020420 	.word	0x00020420
    4b8c:	00020429 	.word	0x00020429
    4b90:	000204f1 	.word	0x000204f1
    4b94:	0001ef2c 	.word	0x0001ef2c
    4b98:	0001f01c 	.word	0x0001f01c
    4b9c:	00020511 	.word	0x00020511

00004ba0 <bt_hci_le_enh_conn_complete>:
{
    4ba0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    4ba4:	f8b0 9001 	ldrh.w	r9, [r0, #1]
		if (disconnected_handles[i] == handle) {
    4ba8:	4a80      	ldr	r2, [pc, #512]	; (4dac <bt_hci_le_enh_conn_complete+0x20c>)
	if (evt->status) {
    4baa:	7804      	ldrb	r4, [r0, #0]
		if (disconnected_handles[i] == handle) {
    4bac:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
    4bae:	ea6f 5309 	mvn.w	r3, r9, lsl #20
    4bb2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
    4bb6:	b29b      	uxth	r3, r3
    4bb8:	4299      	cmp	r1, r3
    4bba:	f04f 0800 	mov.w	r8, #0
			disconnected_handles[i] = 0;
    4bbe:	bf08      	it	eq
    4bc0:	f8a2 8000 	strheq.w	r8, [r2]
{
    4bc4:	b085      	sub	sp, #20
    4bc6:	4605      	mov	r5, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    4bc8:	fa1f f789 	uxth.w	r7, r9
			return true;
    4bcc:	bf08      	it	eq
    4bce:	f04f 0801 	moveq.w	r8, #1
	if (evt->status) {
    4bd2:	2c00      	cmp	r4, #0
    4bd4:	d03a      	beq.n	4c4c <bt_hci_le_enh_conn_complete+0xac>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    4bd6:	2c3c      	cmp	r4, #60	; 0x3c
    4bd8:	d12a      	bne.n	4c30 <bt_hci_le_enh_conn_complete+0x90>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    4bda:	f000 ff07 	bl	59ec <bt_le_adv_lookup_legacy>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4bde:	f3bf 8f5b 	dmb	ish
    4be2:	3010      	adds	r0, #16
    4be4:	e850 3f00 	ldrex	r3, [r0]
    4be8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    4bec:	e840 3200 	strex	r2, r3, [r0]
    4bf0:	2a00      	cmp	r2, #0
    4bf2:	d1f7      	bne.n	4be4 <bt_hci_le_enh_conn_complete+0x44>
    4bf4:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
    4bf8:	2000      	movs	r0, #0
    4bfa:	f7ff fc2f 	bl	445c <find_pending_connect.part.0>
		if (!conn) {
    4bfe:	4605      	mov	r5, r0
    4c00:	b960      	cbnz	r0, 4c1c <bt_hci_le_enh_conn_complete+0x7c>
    4c02:	4b6b      	ldr	r3, [pc, #428]	; (4db0 <bt_hci_le_enh_conn_complete+0x210>)
    4c04:	496b      	ldr	r1, [pc, #428]	; (4db4 <bt_hci_le_enh_conn_complete+0x214>)
			BT_ERR("No pending peripheral connection");
    4c06:	486c      	ldr	r0, [pc, #432]	; (4db8 <bt_hci_le_enh_conn_complete+0x218>)
    4c08:	1ac9      	subs	r1, r1, r3
    4c0a:	08c9      	lsrs	r1, r1, #3
    4c0c:	0189      	lsls	r1, r1, #6
    4c0e:	f041 0101 	orr.w	r1, r1, #1
}
    4c12:	b005      	add	sp, #20
    4c14:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			BT_ERR("No pending peripheral connection");
    4c18:	f014 bc13 	b.w	19442 <log_0>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    4c1c:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4c1e:	2100      	movs	r1, #0
    4c20:	f001 fab8 	bl	6194 <bt_conn_set_state>
		bt_conn_unref(conn);
    4c24:	4628      	mov	r0, r5
}
    4c26:	b005      	add	sp, #20
    4c28:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
    4c2c:	f015 bf57 	b.w	1aade <bt_conn_unref>
    4c30:	4b5f      	ldr	r3, [pc, #380]	; (4db0 <bt_hci_le_enh_conn_complete+0x210>)
    4c32:	4a60      	ldr	r2, [pc, #384]	; (4db4 <bt_hci_le_enh_conn_complete+0x214>)
		BT_WARN("Unexpected status 0x%02x", evt->status);
    4c34:	4861      	ldr	r0, [pc, #388]	; (4dbc <bt_hci_le_enh_conn_complete+0x21c>)
    4c36:	1ad2      	subs	r2, r2, r3
    4c38:	08d2      	lsrs	r2, r2, #3
    4c3a:	0192      	lsls	r2, r2, #6
    4c3c:	f042 0202 	orr.w	r2, r2, #2
    4c40:	4621      	mov	r1, r4
}
    4c42:	b005      	add	sp, #20
    4c44:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		BT_WARN("Unexpected status 0x%02x", evt->status);
    4c48:	f014 bc08 	b.w	1945c <log_1>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    4c4c:	7903      	ldrb	r3, [r0, #4]
    4c4e:	3b02      	subs	r3, #2
    4c50:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    4c52:	f100 0604 	add.w	r6, r0, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    4c56:	d848      	bhi.n	4cea <bt_hci_le_enh_conn_complete+0x14a>
	memcpy(dst, src, sizeof(*dst));
    4c58:	2207      	movs	r2, #7
    4c5a:	4631      	mov	r1, r6
    4c5c:	a802      	add	r0, sp, #8
    4c5e:	f015 fb0e 	bl	1a27e <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    4c62:	f89d 3008 	ldrb.w	r3, [sp, #8]
	memcpy(dst, src, sizeof(*dst));
    4c66:	2206      	movs	r2, #6
    4c68:	3b02      	subs	r3, #2
    4c6a:	f105 0111 	add.w	r1, r5, #17
    4c6e:	f10d 0001 	add.w	r0, sp, #1
    4c72:	f88d 3008 	strb.w	r3, [sp, #8]
    4c76:	f015 fb02 	bl	1a27e <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    4c7a:	2301      	movs	r3, #1
    4c7c:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
    4c80:	78eb      	ldrb	r3, [r5, #3]
    4c82:	2b01      	cmp	r3, #1
    4c84:	d119      	bne.n	4cba <bt_hci_le_enh_conn_complete+0x11a>
    4c86:	a802      	add	r0, sp, #8
    4c88:	f7ff fbe8 	bl	445c <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    4c8c:	78eb      	ldrb	r3, [r5, #3]
    4c8e:	2b01      	cmp	r3, #1
    4c90:	4604      	mov	r4, r0
    4c92:	d111      	bne.n	4cb8 <bt_hci_le_enh_conn_complete+0x118>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    4c94:	f000 feaa 	bl	59ec <bt_le_adv_lookup_legacy>
    4c98:	f3bf 8f5b 	dmb	ish
    4c9c:	f100 0310 	add.w	r3, r0, #16
    4ca0:	e853 2f00 	ldrex	r2, [r3]
    4ca4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    4ca8:	e843 2100 	strex	r1, r2, [r3]
    4cac:	2900      	cmp	r1, #0
    4cae:	d1f7      	bne.n	4ca0 <bt_hci_le_enh_conn_complete+0x100>
    4cb0:	f3bf 8f5b 	dmb	ish
		(void)bt_le_lim_adv_cancel_timeout(adv);
    4cb4:	f015 feb7 	bl	1aa26 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
    4cb8:	bb64      	cbnz	r4, 4d14 <bt_hci_le_enh_conn_complete+0x174>
    4cba:	4a3d      	ldr	r2, [pc, #244]	; (4db0 <bt_hci_le_enh_conn_complete+0x210>)
    4cbc:	4c3d      	ldr	r4, [pc, #244]	; (4db4 <bt_hci_le_enh_conn_complete+0x214>)
		BT_ERR("No pending conn for peer %s",
    4cbe:	4630      	mov	r0, r6
    4cc0:	1aa4      	subs	r4, r4, r2
    4cc2:	f7ff f847 	bl	3d54 <bt_addr_le_str_real>
    4cc6:	f7fd fd19 	bl	26fc <z_log_strdup>
    4cca:	08e4      	lsrs	r4, r4, #3
    4ccc:	01a4      	lsls	r4, r4, #6
    4cce:	f044 0401 	orr.w	r4, r4, #1
    4cd2:	4601      	mov	r1, r0
    4cd4:	4622      	mov	r2, r4
    4cd6:	483a      	ldr	r0, [pc, #232]	; (4dc0 <bt_hci_le_enh_conn_complete+0x220>)
    4cd8:	f014 fbc0 	bl	1945c <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    4cdc:	211f      	movs	r1, #31
    4cde:	4638      	mov	r0, r7
    4ce0:	f015 fd87 	bl	1a7f2 <bt_hci_disconnect>
}
    4ce4:	b005      	add	sp, #20
    4ce6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
    4cea:	78c3      	ldrb	r3, [r0, #3]
    4cec:	2b01      	cmp	r3, #1
    4cee:	bf04      	itt	eq
    4cf0:	4b34      	ldreq	r3, [pc, #208]	; (4dc4 <bt_hci_le_enh_conn_complete+0x224>)
    4cf2:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
    4cf6:	4631      	mov	r1, r6
    4cf8:	4620      	mov	r0, r4
    4cfa:	f015 fe3b 	bl	1a974 <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
    4cfe:	2207      	movs	r2, #7
    4d00:	4601      	mov	r1, r0
    4d02:	a802      	add	r0, sp, #8
    4d04:	f015 fabb 	bl	1a27e <memcpy>
    4d08:	2207      	movs	r2, #7
    4d0a:	4631      	mov	r1, r6
    4d0c:	4668      	mov	r0, sp
    4d0e:	f015 fab6 	bl	1a27e <memcpy>
}
    4d12:	e7b5      	b.n	4c80 <bt_hci_le_enh_conn_complete+0xe0>
	conn->handle = handle;
    4d14:	4620      	mov	r0, r4
	memcpy(dst, src, sizeof(*dst));
    4d16:	2207      	movs	r2, #7
    4d18:	f820 9b88 	strh.w	r9, [r0], #136
    4d1c:	a902      	add	r1, sp, #8
    4d1e:	f015 faae 	bl	1a27e <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    4d22:	7e2a      	ldrb	r2, [r5, #24]
    4d24:	7deb      	ldrb	r3, [r5, #23]
    4d26:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4d2a:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    4d2e:	7eaa      	ldrb	r2, [r5, #26]
    4d30:	7e6b      	ldrb	r3, [r5, #25]
    4d32:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4d36:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    4d3a:	7f2a      	ldrb	r2, [r5, #28]
    4d3c:	7eeb      	ldrb	r3, [r5, #27]
    4d3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4d42:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
    4d46:	78eb      	ldrb	r3, [r5, #3]
    4d48:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
    4d4a:	2200      	movs	r2, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    4d4c:	2b01      	cmp	r3, #1
	conn->err = 0U;
    4d4e:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    4d50:	d117      	bne.n	4d82 <bt_hci_le_enh_conn_complete+0x1e2>
    4d52:	2207      	movs	r2, #7
    4d54:	4669      	mov	r1, sp
    4d56:	f104 008f 	add.w	r0, r4, #143	; 0x8f
    4d5a:	f015 fa90 	bl	1a27e <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    4d5e:	f000 fe45 	bl	59ec <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
    4d62:	7a21      	ldrb	r1, [r4, #8]
    4d64:	4d17      	ldr	r5, [pc, #92]	; (4dc4 <bt_hci_le_enh_conn_complete+0x224>)
    4d66:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    4d6a:	2207      	movs	r2, #7
    4d6c:	4429      	add	r1, r5
    4d6e:	f104 0096 	add.w	r0, r4, #150	; 0x96
    4d72:	f015 fa84 	bl	1a27e <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
    4d76:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
    4d7a:	065b      	lsls	r3, r3, #25
    4d7c:	d501      	bpl.n	4d82 <bt_hci_le_enh_conn_complete+0x1e2>
			bt_le_adv_resume();
    4d7e:	f000 fe39 	bl	59f4 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    4d82:	2107      	movs	r1, #7
    4d84:	4620      	mov	r0, r4
    4d86:	f001 fa05 	bl	6194 <bt_conn_set_state>
	if (is_disconnected) {
    4d8a:	f1b8 0f00 	cmp.w	r8, #0
    4d8e:	d003      	beq.n	4d98 <bt_hci_le_enh_conn_complete+0x1f8>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    4d90:	2101      	movs	r1, #1
    4d92:	4620      	mov	r0, r4
    4d94:	f001 f9fe 	bl	6194 <bt_conn_set_state>
	bt_conn_connected(conn);
    4d98:	4620      	mov	r0, r4
    4d9a:	f015 fedc 	bl	1ab56 <bt_conn_connected>
	conn_auto_initiate(conn);
    4d9e:	4620      	mov	r0, r4
    4da0:	f7ff fe2a 	bl	49f8 <conn_auto_initiate>
	bt_conn_unref(conn);
    4da4:	4620      	mov	r0, r4
    4da6:	f015 fe9a 	bl	1aade <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4daa:	e79b      	b.n	4ce4 <bt_hci_le_enh_conn_complete+0x144>
    4dac:	20002e10 	.word	0x20002e10
    4db0:	0001ef2c 	.word	0x0001ef2c
    4db4:	0001f01c 	.word	0x0001f01c
    4db8:	0002052d 	.word	0x0002052d
    4dbc:	0002054e 	.word	0x0002054e
    4dc0:	00020567 	.word	0x00020567
    4dc4:	20000000 	.word	0x20000000

00004dc8 <hci_event_prio>:
		      sizeof(struct bt_hci_evt_num_completed_packets)),
#endif /* CONFIG_BT_CONN || CONFIG_BT_ISO */
};

void hci_event_prio(struct net_buf *buf)
{
    4dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4dcc:	4604      	mov	r4, r0
	struct net_buf_simple_state state;
	struct bt_hci_evt_hdr *hdr;
	uint8_t evt_flags;

	net_buf_simple_save(&buf->b, &state);
    4dce:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    4dd2:	4630      	mov	r0, r6
    4dd4:	f018 ffa5 	bl	1dd22 <net_buf_simple_headroom>
	state->len = buf->len;
    4dd8:	f8b4 800c 	ldrh.w	r8, [r4, #12]

	BT_ASSERT(buf->len >= sizeof(*hdr));
    4ddc:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
    4de0:	4605      	mov	r5, r0
    4de2:	d80c      	bhi.n	4dfe <hci_event_prio+0x36>
    4de4:	4a1c      	ldr	r2, [pc, #112]	; (4e58 <hci_event_prio+0x90>)
    4de6:	491d      	ldr	r1, [pc, #116]	; (4e5c <hci_event_prio+0x94>)
    4de8:	481d      	ldr	r0, [pc, #116]	; (4e60 <hci_event_prio+0x98>)
    4dea:	f640 5315 	movw	r3, #3349	; 0xd15
    4dee:	f013 fee9 	bl	18bc4 <printk>
    4df2:	4040      	eors	r0, r0
    4df4:	f380 8811 	msr	BASEPRI, r0
    4df8:	f04f 0003 	mov.w	r0, #3
    4dfc:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    4dfe:	4630      	mov	r0, r6
    4e00:	2102      	movs	r1, #2
    4e02:	f018 ff63 	bl	1dccc <net_buf_simple_pull_mem>
    4e06:	4607      	mov	r7, r0

	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    4e08:	7800      	ldrb	r0, [r0, #0]
    4e0a:	f015 fcd1 	bl	1a7b0 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    4e0e:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    4e10:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    4e12:	d40c      	bmi.n	4e2e <hci_event_prio+0x66>
    4e14:	4a10      	ldr	r2, [pc, #64]	; (4e58 <hci_event_prio+0x90>)
    4e16:	4913      	ldr	r1, [pc, #76]	; (4e64 <hci_event_prio+0x9c>)
    4e18:	4811      	ldr	r0, [pc, #68]	; (4e60 <hci_event_prio+0x98>)
    4e1a:	f640 5319 	movw	r3, #3353	; 0xd19
    4e1e:	f013 fed1 	bl	18bc4 <printk>
    4e22:	4040      	eors	r0, r0
    4e24:	f380 8811 	msr	BASEPRI, r0
    4e28:	f04f 0003 	mov.w	r0, #3
    4e2c:	df02      	svc	2

	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    4e2e:	2305      	movs	r3, #5
    4e30:	4a0d      	ldr	r2, [pc, #52]	; (4e68 <hci_event_prio+0xa0>)
    4e32:	7838      	ldrb	r0, [r7, #0]
    4e34:	4621      	mov	r1, r4
    4e36:	f7ff fb31 	bl	449c <handle_event>

	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    4e3a:	07b3      	lsls	r3, r6, #30
    4e3c:	d507      	bpl.n	4e4e <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    4e3e:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    4e40:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    4e44:	fa10 f585 	uxtah	r5, r0, r5
    4e48:	60a5      	str	r5, [r4, #8]
		net_buf_simple_restore(&buf->b, &state);
	} else {
		net_buf_unref(buf);
	}
}
    4e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    4e4e:	4620      	mov	r0, r4
}
    4e50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    4e54:	f010 bca8 	b.w	157a8 <net_buf_unref>
    4e58:	000203ec 	.word	0x000203ec
    4e5c:	00020583 	.word	0x00020583
    4e60:	00020429 	.word	0x00020429
    4e64:	0002059c 	.word	0x0002059c
    4e68:	0001f43c 	.word	0x0001f43c

00004e6c <bt_recv>:

int bt_recv(struct net_buf *buf)
{
    4e6c:	b570      	push	{r4, r5, r6, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    4e6e:	7d01      	ldrb	r1, [r0, #20]
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_DBG("buf %p len %u", buf, buf->len);

	switch (bt_buf_get_type(buf)) {
    4e70:	2901      	cmp	r1, #1
{
    4e72:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    4e74:	d04b      	beq.n	4f0e <bt_recv+0xa2>
    4e76:	2903      	cmp	r1, #3
    4e78:	d178      	bne.n	4f6c <bt_recv+0x100>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    4e7a:	8983      	ldrh	r3, [r0, #12]
    4e7c:	2b03      	cmp	r3, #3
    4e7e:	d80c      	bhi.n	4e9a <bt_recv+0x2e>
    4e80:	4a42      	ldr	r2, [pc, #264]	; (4f8c <bt_recv+0x120>)
    4e82:	4943      	ldr	r1, [pc, #268]	; (4f90 <bt_recv+0x124>)
    4e84:	4843      	ldr	r0, [pc, #268]	; (4f94 <bt_recv+0x128>)
    4e86:	f44f 73db 	mov.w	r3, #438	; 0x1b6
    4e8a:	f013 fe9b 	bl	18bc4 <printk>
    4e8e:	4040      	eors	r0, r0
    4e90:	f380 8811 	msr	BASEPRI, r0
    4e94:	f04f 0003 	mov.w	r0, #3
    4e98:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    4e9a:	2104      	movs	r1, #4
    4e9c:	f104 0008 	add.w	r0, r4, #8
    4ea0:	f018 ff14 	bl	1dccc <net_buf_simple_pull_mem>
	if (buf->len != len) {
    4ea4:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    4ea6:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    4ea8:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    4eaa:	23ff      	movs	r3, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
    4eac:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    4eb0:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
    4eb2:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    4eb4:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
    4eb6:	d00d      	beq.n	4ed4 <bt_recv+0x68>
    4eb8:	4837      	ldr	r0, [pc, #220]	; (4f98 <bt_recv+0x12c>)
    4eba:	4b38      	ldr	r3, [pc, #224]	; (4f9c <bt_recv+0x130>)
    4ebc:	1a1b      	subs	r3, r3, r0
    4ebe:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    4ec0:	019b      	lsls	r3, r3, #6
    4ec2:	4837      	ldr	r0, [pc, #220]	; (4fa0 <bt_recv+0x134>)
    4ec4:	f043 0301 	orr.w	r3, r3, #1
    4ec8:	f014 fadc 	bl	19484 <log_2>
	net_buf_unref(buf);
    4ecc:	4620      	mov	r0, r4
    4ece:	f010 fc6b 	bl	157a8 <net_buf_unref>
    4ed2:	e01a      	b.n	4f0a <bt_recv+0x9e>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    4ed4:	f001 f956 	bl	6184 <bt_conn_lookup_handle>
	if (!conn) {
    4ed8:	4605      	mov	r5, r0
    4eda:	b958      	cbnz	r0, 4ef4 <bt_recv+0x88>
    4edc:	4b2e      	ldr	r3, [pc, #184]	; (4f98 <bt_recv+0x12c>)
    4ede:	4a2f      	ldr	r2, [pc, #188]	; (4f9c <bt_recv+0x130>)
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    4ee0:	8ae1      	ldrh	r1, [r4, #22]
    4ee2:	4830      	ldr	r0, [pc, #192]	; (4fa4 <bt_recv+0x138>)
    4ee4:	1ad2      	subs	r2, r2, r3
    4ee6:	08d2      	lsrs	r2, r2, #3
    4ee8:	0192      	lsls	r2, r2, #6
    4eea:	f042 0201 	orr.w	r2, r2, #1
    4eee:	f014 fab5 	bl	1945c <log_1>
		net_buf_unref(buf);
    4ef2:	e7eb      	b.n	4ecc <bt_recv+0x60>
	acl(buf)->index = bt_conn_index(conn);
    4ef4:	f001 fa34 	bl	6360 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    4ef8:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    4efa:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    4efc:	4621      	mov	r1, r4
    4efe:	4628      	mov	r0, r5
    4f00:	f001 f856 	bl	5fb0 <bt_conn_recv>
	bt_conn_unref(conn);
    4f04:	4628      	mov	r0, r5
    4f06:	f015 fdea 	bl	1aade <bt_conn_unref>

		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
			net_buf_put(&bt_dev.rx_queue, buf);
		}
#endif
		return 0;
    4f0a:	2000      	movs	r0, #0
	default:
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
		return -EINVAL;
	}
}
    4f0c:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    4f0e:	8983      	ldrh	r3, [r0, #12]
    4f10:	2b01      	cmp	r3, #1
    4f12:	d80c      	bhi.n	4f2e <bt_recv+0xc2>
    4f14:	4a1d      	ldr	r2, [pc, #116]	; (4f8c <bt_recv+0x120>)
    4f16:	491e      	ldr	r1, [pc, #120]	; (4f90 <bt_recv+0x124>)
    4f18:	481e      	ldr	r0, [pc, #120]	; (4f94 <bt_recv+0x128>)
    4f1a:	f640 130d 	movw	r3, #2317	; 0x90d
    4f1e:	f013 fe51 	bl	18bc4 <printk>
    4f22:	4040      	eors	r0, r0
    4f24:	f380 8811 	msr	BASEPRI, r0
    4f28:	f04f 0003 	mov.w	r0, #3
    4f2c:	df02      	svc	2
    4f2e:	2102      	movs	r1, #2
    4f30:	f104 0008 	add.w	r0, r4, #8
    4f34:	f018 feca 	bl	1dccc <net_buf_simple_pull_mem>
    4f38:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    4f3a:	7800      	ldrb	r0, [r0, #0]
    4f3c:	f015 fc38 	bl	1a7b0 <bt_hci_evt_get_flags>
    4f40:	0783      	lsls	r3, r0, #30
    4f42:	d40c      	bmi.n	4f5e <bt_recv+0xf2>
    4f44:	4a11      	ldr	r2, [pc, #68]	; (4f8c <bt_recv+0x120>)
    4f46:	4918      	ldr	r1, [pc, #96]	; (4fa8 <bt_recv+0x13c>)
    4f48:	4812      	ldr	r0, [pc, #72]	; (4f94 <bt_recv+0x128>)
    4f4a:	f640 1311 	movw	r3, #2321	; 0x911
    4f4e:	f013 fe39 	bl	18bc4 <printk>
    4f52:	4040      	eors	r0, r0
    4f54:	f380 8811 	msr	BASEPRI, r0
    4f58:	f04f 0003 	mov.w	r0, #3
    4f5c:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    4f5e:	4a13      	ldr	r2, [pc, #76]	; (4fac <bt_recv+0x140>)
    4f60:	7828      	ldrb	r0, [r5, #0]
    4f62:	2304      	movs	r3, #4
    4f64:	4621      	mov	r1, r4
    4f66:	f7ff fa99 	bl	449c <handle_event>
    4f6a:	e7af      	b.n	4ecc <bt_recv+0x60>
    4f6c:	4b0a      	ldr	r3, [pc, #40]	; (4f98 <bt_recv+0x12c>)
    4f6e:	4a0b      	ldr	r2, [pc, #44]	; (4f9c <bt_recv+0x130>)
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    4f70:	480f      	ldr	r0, [pc, #60]	; (4fb0 <bt_recv+0x144>)
    4f72:	1ad2      	subs	r2, r2, r3
    4f74:	08d2      	lsrs	r2, r2, #3
    4f76:	0192      	lsls	r2, r2, #6
    4f78:	f042 0201 	orr.w	r2, r2, #1
    4f7c:	f014 fa6e 	bl	1945c <log_1>
		net_buf_unref(buf);
    4f80:	4620      	mov	r0, r4
    4f82:	f010 fc11 	bl	157a8 <net_buf_unref>
		return -EINVAL;
    4f86:	f06f 0015 	mvn.w	r0, #21
    4f8a:	e7bf      	b.n	4f0c <bt_recv+0xa0>
    4f8c:	000203ec 	.word	0x000203ec
    4f90:	00020583 	.word	0x00020583
    4f94:	00020429 	.word	0x00020429
    4f98:	0001ef2c 	.word	0x0001ef2c
    4f9c:	0001f01c 	.word	0x0001f01c
    4fa0:	000205b5 	.word	0x000205b5
    4fa4:	000205d9 	.word	0x000205d9
    4fa8:	000205fb 	.word	0x000205fb
    4fac:	0001f40c 	.word	0x0001f40c
    4fb0:	00020629 	.word	0x00020629

00004fb4 <bt_recv_prio>:

#if defined(CONFIG_BT_RECV_IS_RX_THREAD)
int bt_recv_prio(struct net_buf *buf)
{
    4fb4:	b510      	push	{r4, lr}
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    4fb6:	7d03      	ldrb	r3, [r0, #20]
    4fb8:	2b01      	cmp	r3, #1
{
    4fba:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    4fbc:	d00c      	beq.n	4fd8 <bt_recv_prio+0x24>
    4fbe:	4a09      	ldr	r2, [pc, #36]	; (4fe4 <bt_recv_prio+0x30>)
    4fc0:	4909      	ldr	r1, [pc, #36]	; (4fe8 <bt_recv_prio+0x34>)
    4fc2:	480a      	ldr	r0, [pc, #40]	; (4fec <bt_recv_prio+0x38>)
    4fc4:	f640 535c 	movw	r3, #3420	; 0xd5c
    4fc8:	f013 fdfc 	bl	18bc4 <printk>
    4fcc:	4040      	eors	r0, r0
    4fce:	f380 8811 	msr	BASEPRI, r0
    4fd2:	f04f 0003 	mov.w	r0, #3
    4fd6:	df02      	svc	2

	hci_event_prio(buf);
    4fd8:	4620      	mov	r0, r4
    4fda:	f7ff fef5 	bl	4dc8 <hci_event_prio>

	return 0;
}
    4fde:	2000      	movs	r0, #0
    4fe0:	bd10      	pop	{r4, pc}
    4fe2:	bf00      	nop
    4fe4:	000203ec 	.word	0x000203ec
    4fe8:	0002063d 	.word	0x0002063d
    4fec:	00020429 	.word	0x00020429

00004ff0 <bt_hci_driver_register>:
#endif /* defined(CONFIG_BT_RECV_IS_RX_THREAD) */

int bt_hci_driver_register(const struct bt_hci_driver *drv)
{
	if (bt_dev.drv) {
    4ff0:	4a08      	ldr	r2, [pc, #32]	; (5014 <bt_hci_driver_register+0x24>)
{
    4ff2:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    4ff4:	f8d2 014c 	ldr.w	r0, [r2, #332]	; 0x14c
    4ff8:	b930      	cbnz	r0, 5008 <bt_hci_driver_register+0x18>
		return -EALREADY;
	}

	if (!drv->open || !drv->send) {
    4ffa:	68d9      	ldr	r1, [r3, #12]
    4ffc:	b139      	cbz	r1, 500e <bt_hci_driver_register+0x1e>
    4ffe:	6919      	ldr	r1, [r3, #16]
    5000:	b129      	cbz	r1, 500e <bt_hci_driver_register+0x1e>
		return -EINVAL;
	}

	bt_dev.drv = drv;
    5002:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
	BT_DBG("Registered %s", drv->name ? drv->name : "");

	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");

	return 0;
    5006:	4770      	bx	lr
		return -EALREADY;
    5008:	f06f 0077 	mvn.w	r0, #119	; 0x77
    500c:	4770      	bx	lr
		return -EINVAL;
    500e:	f06f 0015 	mvn.w	r0, #21
}
    5012:	4770      	bx	lr
    5014:	20000000 	.word	0x20000000

00005018 <bt_finalize_init>:

void bt_finalize_init(void)
{
    5018:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    501c:	4d2e      	ldr	r5, [pc, #184]	; (50d8 <bt_finalize_init+0xc0>)
    501e:	4c2f      	ldr	r4, [pc, #188]	; (50dc <bt_finalize_init+0xc4>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    5020:	4e2f      	ldr	r6, [pc, #188]	; (50e0 <bt_finalize_init+0xc8>)
		BT_INFO("Identity[%d]: %s",
    5022:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 50e4 <bt_finalize_init+0xcc>
{
    5026:	b087      	sub	sp, #28
    5028:	2102      	movs	r1, #2
    502a:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
    502e:	f015 fbd1 	bl	1a7d4 <atomic_or>
	atomic_set_bit(bt_dev.flags, BT_DEV_READY);

	if (IS_ENABLED(CONFIG_BT_OBSERVER)) {
		bt_le_scan_update(false);
    5032:	2000      	movs	r0, #0
    5034:	f000 fd58 	bl	5ae8 <bt_le_scan_update>
    5038:	4b2b      	ldr	r3, [pc, #172]	; (50e8 <bt_finalize_init+0xd0>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    503a:	492c      	ldr	r1, [pc, #176]	; (50ec <bt_finalize_init+0xd4>)
    503c:	1ae4      	subs	r4, r4, r3
    503e:	79eb      	ldrb	r3, [r5, #7]
    5040:	4628      	mov	r0, r5
    5042:	2b01      	cmp	r3, #1
    5044:	bf88      	it	hi
    5046:	460e      	movhi	r6, r1
    5048:	f7fe fe84 	bl	3d54 <bt_addr_le_str_real>
    504c:	f7fd fb56 	bl	26fc <z_log_strdup>
    5050:	08e4      	lsrs	r4, r4, #3
    5052:	01a4      	lsls	r4, r4, #6
    5054:	f044 0803 	orr.w	r8, r4, #3
    5058:	4602      	mov	r2, r0
    505a:	4631      	mov	r1, r6
    505c:	4824      	ldr	r0, [pc, #144]	; (50f0 <bt_finalize_init+0xd8>)
    505e:	4643      	mov	r3, r8
    5060:	f014 fa10 	bl	19484 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    5064:	462f      	mov	r7, r5
    5066:	2601      	movs	r6, #1
    5068:	79eb      	ldrb	r3, [r5, #7]
    506a:	429e      	cmp	r6, r3
    506c:	f107 0707 	add.w	r7, r7, #7
    5070:	db25      	blt.n	50be <bt_finalize_init+0xa6>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    5072:	f895 6068 	ldrb.w	r6, [r5, #104]	; 0x68
    5076:	4630      	mov	r0, r6
    5078:	f7ff f8ec 	bl	4254 <ver_str>
    507c:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
    5080:	9304      	str	r3, [sp, #16]
    5082:	f044 0403 	orr.w	r4, r4, #3
    5086:	f8b5 306e 	ldrh.w	r3, [r5, #110]	; 0x6e
    508a:	9305      	str	r3, [sp, #20]
    508c:	e9cd 0602 	strd	r0, r6, [sp, #8]
    5090:	4623      	mov	r3, r4
    5092:	a902      	add	r1, sp, #8
    5094:	2204      	movs	r2, #4
    5096:	4817      	ldr	r0, [pc, #92]	; (50f4 <bt_finalize_init+0xdc>)
    5098:	f014 fa29 	bl	194ee <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    509c:	f895 6069 	ldrb.w	r6, [r5, #105]	; 0x69
    50a0:	4630      	mov	r0, r6
    50a2:	f7ff f8d7 	bl	4254 <ver_str>
    50a6:	f8b5 306c 	ldrh.w	r3, [r5, #108]	; 0x6c
    50aa:	f8ad 4000 	strh.w	r4, [sp]
    50ae:	4601      	mov	r1, r0
    50b0:	4632      	mov	r2, r6
    50b2:	4811      	ldr	r0, [pc, #68]	; (50f8 <bt_finalize_init+0xe0>)
    50b4:	f014 f9ff 	bl	194b6 <log_3>
	}

	bt_dev_show_info();
}
    50b8:	b007      	add	sp, #28
    50ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_INFO("Identity[%d]: %s",
    50be:	4638      	mov	r0, r7
    50c0:	f7fe fe48 	bl	3d54 <bt_addr_le_str_real>
    50c4:	f7fd fb1a 	bl	26fc <z_log_strdup>
    50c8:	4631      	mov	r1, r6
    50ca:	4602      	mov	r2, r0
    50cc:	4643      	mov	r3, r8
    50ce:	4648      	mov	r0, r9
    50d0:	f014 f9d8 	bl	19484 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    50d4:	3601      	adds	r6, #1
    50d6:	e7c7      	b.n	5068 <bt_finalize_init+0x50>
    50d8:	20000000 	.word	0x20000000
    50dc:	0001f01c 	.word	0x0001f01c
    50e0:	00021df5 	.word	0x00021df5
    50e4:	00020673 	.word	0x00020673
    50e8:	0001ef2c 	.word	0x0001ef2c
    50ec:	00020660 	.word	0x00020660
    50f0:	00020664 	.word	0x00020664
    50f4:	00020684 	.word	0x00020684
    50f8:	000206c2 	.word	0x000206c2

000050fc <bt_init>:

static int bt_init(void)
{
    50fc:	b570      	push	{r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    50fe:	4dbc      	ldr	r5, [pc, #752]	; (53f0 <bt_init+0x2f4>)
    5100:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
    5104:	6899      	ldr	r1, [r3, #8]
    5106:	f011 0101 	ands.w	r1, r1, #1
{
    510a:	b086      	sub	sp, #24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    510c:	d123      	bne.n	5156 <bt_init+0x5a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    510e:	aa01      	add	r2, sp, #4
    5110:	f640 4003 	movw	r0, #3075	; 0xc03
    5114:	f7ff fcca 	bl	4aac <bt_hci_cmd_send_sync>
		if (err) {
    5118:	4604      	mov	r4, r0
    511a:	2800      	cmp	r0, #0
    511c:	d178      	bne.n	5210 <bt_init+0x114>
	uint8_t status = buf->data[0];
    511e:	9b01      	ldr	r3, [sp, #4]
    5120:	689b      	ldr	r3, [r3, #8]
	if (status) {
    5122:	781b      	ldrb	r3, [r3, #0]
    5124:	b9a3      	cbnz	r3, 5150 <bt_init+0x54>
		bt_scan_reset();
    5126:	f000 fcd9 	bl	5adc <bt_scan_reset>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    512a:	f3bf 8f5b 	dmb	ish
    512e:	462b      	mov	r3, r5
    5130:	f853 2fcc 	ldr.w	r2, [r3, #204]!
    5134:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    5138:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    513c:	f3bf 8f5b 	dmb	ish
    5140:	e853 1f00 	ldrex	r1, [r3]
    5144:	e843 2000 	strex	r0, r2, [r3]
    5148:	2800      	cmp	r0, #0
    514a:	d1f9      	bne.n	5140 <bt_init+0x44>
    514c:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    5150:	9801      	ldr	r0, [sp, #4]
    5152:	f010 fb29 	bl	157a8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    5156:	aa01      	add	r2, sp, #4
    5158:	2100      	movs	r1, #0
    515a:	f241 0003 	movw	r0, #4099	; 0x1003
    515e:	f7ff fca5 	bl	4aac <bt_hci_cmd_send_sync>
	if (err) {
    5162:	4604      	mov	r4, r0
    5164:	2800      	cmp	r0, #0
    5166:	d153      	bne.n	5210 <bt_init+0x114>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    5168:	9b01      	ldr	r3, [sp, #4]
    516a:	48a2      	ldr	r0, [pc, #648]	; (53f4 <bt_init+0x2f8>)
    516c:	6899      	ldr	r1, [r3, #8]
    516e:	2208      	movs	r2, #8
    5170:	3101      	adds	r1, #1
    5172:	f015 f884 	bl	1a27e <memcpy>
	net_buf_unref(rsp);
    5176:	9801      	ldr	r0, [sp, #4]
    5178:	f010 fb16 	bl	157a8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    517c:	4621      	mov	r1, r4
    517e:	aa01      	add	r2, sp, #4
    5180:	f241 0001 	movw	r0, #4097	; 0x1001
    5184:	f7ff fc92 	bl	4aac <bt_hci_cmd_send_sync>
	if (err) {
    5188:	4604      	mov	r4, r0
    518a:	2800      	cmp	r0, #0
    518c:	d140      	bne.n	5210 <bt_init+0x114>
	read_local_ver_complete(rsp);
    518e:	9801      	ldr	r0, [sp, #4]
    5190:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    5192:	785a      	ldrb	r2, [r3, #1]
    5194:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    5198:	78d9      	ldrb	r1, [r3, #3]
    519a:	789a      	ldrb	r2, [r3, #2]
    519c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    51a0:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
    51a4:	791a      	ldrb	r2, [r3, #4]
    51a6:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    51aa:	7a19      	ldrb	r1, [r3, #8]
    51ac:	79da      	ldrb	r2, [r3, #7]
    51ae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    51b2:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    51b6:	795a      	ldrb	r2, [r3, #5]
    51b8:	799b      	ldrb	r3, [r3, #6]
    51ba:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    51be:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
    51c2:	f010 faf1 	bl	157a8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    51c6:	4621      	mov	r1, r4
    51c8:	aa01      	add	r2, sp, #4
    51ca:	f241 0002 	movw	r0, #4098	; 0x1002
    51ce:	f7ff fc6d 	bl	4aac <bt_hci_cmd_send_sync>
	if (err) {
    51d2:	4604      	mov	r4, r0
    51d4:	b9e0      	cbnz	r0, 5210 <bt_init+0x114>
	memcpy(bt_dev.supported_commands, rp->commands,
    51d6:	9b01      	ldr	r3, [sp, #4]
    51d8:	4887      	ldr	r0, [pc, #540]	; (53f8 <bt_init+0x2fc>)
    51da:	6899      	ldr	r1, [r3, #8]
    51dc:	2240      	movs	r2, #64	; 0x40
    51de:	3101      	adds	r1, #1
    51e0:	f015 f84d 	bl	1a27e <memcpy>
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
    51e4:	4884      	ldr	r0, [pc, #528]	; (53f8 <bt_init+0x2fc>)
    51e6:	f015 f8ad 	bl	1a344 <bt_hci_ecc_supported_commands>
	net_buf_unref(rsp);
    51ea:	9801      	ldr	r0, [sp, #4]
    51ec:	f010 fadc 	bl	157a8 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    51f0:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    51f4:	0658      	lsls	r0, r3, #25
    51f6:	d40e      	bmi.n	5216 <bt_init+0x11a>
    51f8:	4b80      	ldr	r3, [pc, #512]	; (53fc <bt_init+0x300>)
    51fa:	4981      	ldr	r1, [pc, #516]	; (5400 <bt_init+0x304>)
		BT_ERR("Non-LE capable controller detected!");
    51fc:	4881      	ldr	r0, [pc, #516]	; (5404 <bt_init+0x308>)
    51fe:	1ac9      	subs	r1, r1, r3
    5200:	08c9      	lsrs	r1, r1, #3
    5202:	0189      	lsls	r1, r1, #6
    5204:	f041 0101 	orr.w	r1, r1, #1
    5208:	f014 f91b 	bl	19442 <log_0>
		return -ENODEV;
    520c:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    5210:	4620      	mov	r0, r4
    5212:	b006      	add	sp, #24
    5214:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    5216:	4621      	mov	r1, r4
    5218:	aa01      	add	r2, sp, #4
    521a:	f242 0003 	movw	r0, #8195	; 0x2003
    521e:	f7ff fc45 	bl	4aac <bt_hci_cmd_send_sync>
	if (err) {
    5222:	4604      	mov	r4, r0
    5224:	2800      	cmp	r0, #0
    5226:	d1f3      	bne.n	5210 <bt_init+0x114>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    5228:	9b01      	ldr	r3, [sp, #4]
    522a:	4877      	ldr	r0, [pc, #476]	; (5408 <bt_init+0x30c>)
    522c:	6899      	ldr	r1, [r3, #8]
    522e:	2208      	movs	r2, #8
    5230:	3101      	adds	r1, #1
    5232:	f015 f824 	bl	1a27e <memcpy>
	net_buf_unref(rsp);
    5236:	9801      	ldr	r0, [sp, #4]
    5238:	f010 fab6 	bl	157a8 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    523c:	4621      	mov	r1, r4
    523e:	aa01      	add	r2, sp, #4
    5240:	f242 0002 	movw	r0, #8194	; 0x2002
    5244:	f7ff fc32 	bl	4aac <bt_hci_cmd_send_sync>
		if (err) {
    5248:	4604      	mov	r4, r0
    524a:	2800      	cmp	r0, #0
    524c:	d1e0      	bne.n	5210 <bt_init+0x114>
		le_read_buffer_size_complete(rsp);
    524e:	9b01      	ldr	r3, [sp, #4]
    5250:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    5252:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    5256:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
    525a:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
    525c:	b121      	cbz	r1, 5268 <bt_init+0x16c>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    525e:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
    5260:	486a      	ldr	r0, [pc, #424]	; (540c <bt_init+0x310>)
    5262:	4611      	mov	r1, r2
    5264:	f019 f944 	bl	1e4f0 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    5268:	9801      	ldr	r0, [sp, #4]
    526a:	f010 fa9d 	bl	157a8 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    526e:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
    5272:	f016 0620 	ands.w	r6, r6, #32
    5276:	f000 809f 	beq.w	53b8 <bt_init+0x2bc>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    527a:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
    527e:	0719      	lsls	r1, r3, #28
    5280:	f100 80ca 	bmi.w	5418 <bt_init+0x31c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    5284:	2108      	movs	r1, #8
    5286:	f242 0001 	movw	r0, #8193	; 0x2001
    528a:	f7ff fab7 	bl	47fc <bt_hci_cmd_create>
	if (!buf) {
    528e:	4604      	mov	r4, r0
    5290:	2800      	cmp	r0, #0
    5292:	f000 8098 	beq.w	53c6 <bt_init+0x2ca>
	return net_buf_simple_add(&buf->b, len);
    5296:	2108      	movs	r1, #8
    5298:	4408      	add	r0, r1
    529a:	f018 fcb6 	bl	1dc0a <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    529e:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    52a2:	f895 209a 	ldrb.w	r2, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    52a6:	f013 0f02 	tst.w	r3, #2
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    52aa:	f002 0206 	and.w	r2, r2, #6
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    52ae:	bf0c      	ite	eq
    52b0:	230f      	moveq	r3, #15
    52b2:	232f      	movne	r3, #47	; 0x2f
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    52b4:	2a06      	cmp	r2, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    52b6:	bf08      	it	eq
    52b8:	f443 73c0 	orreq.w	r3, r3, #384	; 0x180
	dst[0] = val;
    52bc:	2200      	movs	r2, #0
    52be:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    52c0:	0a1b      	lsrs	r3, r3, #8
    52c2:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    52c4:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    52c6:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    52c8:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    52ca:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    52cc:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    52ce:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    52d0:	4621      	mov	r1, r4
    52d2:	f242 0001 	movw	r0, #8193	; 0x2001
    52d6:	f7ff fbe9 	bl	4aac <bt_hci_cmd_send_sync>
	if (err) {
    52da:	4604      	mov	r4, r0
    52dc:	2800      	cmp	r0, #0
    52de:	d197      	bne.n	5210 <bt_init+0x114>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    52e0:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    52e4:	069a      	lsls	r2, r3, #26
    52e6:	d41d      	bmi.n	5324 <bt_init+0x228>
	if (bt_dev.le.acl_mtu) {
    52e8:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
    52ec:	b9d1      	cbnz	r1, 5324 <bt_init+0x228>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    52ee:	aa01      	add	r2, sp, #4
    52f0:	f241 0005 	movw	r0, #4101	; 0x1005
    52f4:	f7ff fbda 	bl	4aac <bt_hci_cmd_send_sync>
	if (err) {
    52f8:	4604      	mov	r4, r0
    52fa:	2800      	cmp	r0, #0
    52fc:	d188      	bne.n	5210 <bt_init+0x114>
	if (bt_dev.le.acl_mtu) {
    52fe:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
    5302:	b963      	cbnz	r3, 531e <bt_init+0x222>
    5304:	9b01      	ldr	r3, [sp, #4]
    5306:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    5308:	785a      	ldrb	r2, [r3, #1]
    530a:	7899      	ldrb	r1, [r3, #2]
    530c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    5310:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    5314:	889a      	ldrh	r2, [r3, #4]
    5316:	483d      	ldr	r0, [pc, #244]	; (540c <bt_init+0x310>)
    5318:	4611      	mov	r1, r2
    531a:	f019 f8e9 	bl	1e4f0 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    531e:	9801      	ldr	r0, [sp, #4]
    5320:	f010 fa42 	bl	157a8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    5324:	2108      	movs	r1, #8
    5326:	f640 4001 	movw	r0, #3073	; 0xc01
    532a:	f7ff fa67 	bl	47fc <bt_hci_cmd_create>
	if (!buf) {
    532e:	4604      	mov	r4, r0
    5330:	2800      	cmp	r0, #0
    5332:	d048      	beq.n	53c6 <bt_init+0x2ca>
    5334:	2108      	movs	r1, #8
    5336:	4408      	add	r0, r1
    5338:	f018 fc67 	bl	1dc0a <net_buf_simple_add>
	dst[0] = val;
    533c:	2310      	movs	r3, #16
    533e:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    5340:	2388      	movs	r3, #136	; 0x88
    5342:	7043      	strb	r3, [r0, #1]
    5344:	2302      	movs	r3, #2
	dst[0] = val;
    5346:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    5348:	70c3      	strb	r3, [r0, #3]
    534a:	2320      	movs	r3, #32
	dst[0] = val;
    534c:	7082      	strb	r2, [r0, #2]
    534e:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    5350:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    5352:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    5354:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    5356:	4621      	mov	r1, r4
    5358:	f640 4001 	movw	r0, #3073	; 0xc01
    535c:	f7ff fba6 	bl	4aac <bt_hci_cmd_send_sync>
	if (err) {
    5360:	4604      	mov	r4, r0
    5362:	2800      	cmp	r0, #0
    5364:	f47f af54 	bne.w	5210 <bt_init+0x114>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    5368:	4601      	mov	r1, r0
    536a:	466a      	mov	r2, sp
    536c:	f64f 4001 	movw	r0, #64513	; 0xfc01
    5370:	f7ff fb9c 	bl	4aac <bt_hci_cmd_send_sync>
    5374:	4e22      	ldr	r6, [pc, #136]	; (5400 <bt_init+0x304>)
    5376:	4b21      	ldr	r3, [pc, #132]	; (53fc <bt_init+0x300>)
    5378:	1af6      	subs	r6, r6, r3
    537a:	08f6      	lsrs	r6, r6, #3
    537c:	01b6      	lsls	r6, r6, #6
	if (err) {
    537e:	2800      	cmp	r0, #0
    5380:	d05f      	beq.n	5442 <bt_init+0x346>
		BT_WARN("Vendor HCI extensions not available");
    5382:	4823      	ldr	r0, [pc, #140]	; (5410 <bt_init+0x314>)
    5384:	f046 0102 	orr.w	r1, r6, #2
			BT_WARN("Failed to read supported vendor features");
    5388:	f014 f85b 	bl	19442 <log_0>
	err = bt_id_init();
    538c:	f015 fb0f 	bl	1a9ae <bt_id_init>
	if (err) {
    5390:	4604      	mov	r4, r0
    5392:	2800      	cmp	r0, #0
    5394:	f47f af3c 	bne.w	5210 <bt_init+0x114>
		err = bt_conn_init();
    5398:	f001 f9ba 	bl	6710 <bt_conn_init>
		if (err) {
    539c:	4604      	mov	r4, r0
    539e:	2800      	cmp	r0, #0
    53a0:	f47f af36 	bne.w	5210 <bt_init+0x114>
		if (!bt_dev.id_count) {
    53a4:	79eb      	ldrb	r3, [r5, #7]
    53a6:	2b00      	cmp	r3, #0
    53a8:	f040 80b8 	bne.w	551c <bt_init+0x420>
			BT_INFO("No ID address. App must call settings_load()");
    53ac:	4819      	ldr	r0, [pc, #100]	; (5414 <bt_init+0x318>)
    53ae:	f046 0103 	orr.w	r1, r6, #3
    53b2:	f014 f846 	bl	19442 <log_0>
			return 0;
    53b6:	e72b      	b.n	5210 <bt_init+0x114>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    53b8:	2102      	movs	r1, #2
    53ba:	f640 406d 	movw	r0, #3181	; 0xc6d
    53be:	f7ff fa1d 	bl	47fc <bt_hci_cmd_create>
		if (!buf) {
    53c2:	4604      	mov	r4, r0
    53c4:	b910      	cbnz	r0, 53cc <bt_init+0x2d0>
		return -ENOBUFS;
    53c6:	f06f 0468 	mvn.w	r4, #104	; 0x68
    53ca:	e721      	b.n	5210 <bt_init+0x114>
    53cc:	2102      	movs	r1, #2
    53ce:	3008      	adds	r0, #8
    53d0:	f018 fc1b 	bl	1dc0a <net_buf_simple_add>
		cp_le->le = 0x01;
    53d4:	2301      	movs	r3, #1
    53d6:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    53d8:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    53da:	4621      	mov	r1, r4
    53dc:	4632      	mov	r2, r6
    53de:	f640 406d 	movw	r0, #3181	; 0xc6d
    53e2:	f7ff fb63 	bl	4aac <bt_hci_cmd_send_sync>
		if (err) {
    53e6:	4604      	mov	r4, r0
    53e8:	2800      	cmp	r0, #0
    53ea:	f43f af46 	beq.w	527a <bt_init+0x17e>
    53ee:	e70f      	b.n	5210 <bt_init+0x114>
    53f0:	20000000 	.word	0x20000000
    53f4:	20000070 	.word	0x20000070
    53f8:	20000078 	.word	0x20000078
    53fc:	0001ef2c 	.word	0x0001ef2c
    5400:	0001f01c 	.word	0x0001f01c
    5404:	000206e9 	.word	0x000206e9
    5408:	200000d0 	.word	0x200000d0
    540c:	20000100 	.word	0x20000100
    5410:	0002070d 	.word	0x0002070d
    5414:	000207e1 	.word	0x000207e1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    5418:	aa01      	add	r2, sp, #4
    541a:	2100      	movs	r1, #0
    541c:	f242 001c 	movw	r0, #8220	; 0x201c
    5420:	f7ff fb44 	bl	4aac <bt_hci_cmd_send_sync>
		if (err) {
    5424:	4604      	mov	r4, r0
    5426:	2800      	cmp	r0, #0
    5428:	f47f aef2 	bne.w	5210 <bt_init+0x114>
		le_read_supp_states_complete(rsp);
    542c:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    542e:	6883      	ldr	r3, [r0, #8]
    5430:	f8d3 2001 	ldr.w	r2, [r3, #1]
    5434:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    5438:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
    543c:	f010 f9b4 	bl	157a8 <net_buf_unref>
    5440:	e720      	b.n	5284 <bt_init+0x188>
	rp.info = (void *)rsp->data;
    5442:	9b00      	ldr	r3, [sp, #0]
	BT_INFO("HW Platform: %s (0x%04x)",
    5444:	4839      	ldr	r0, [pc, #228]	; (552c <bt_init+0x430>)
	rp.info = (void *)rsp->data;
    5446:	689c      	ldr	r4, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    5448:	f8b4 2001 	ldrh.w	r2, [r4, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
    544c:	2a03      	cmp	r2, #3
		return plat_str[platform];
    544e:	bf96      	itet	ls
    5450:	4937      	ldrls	r1, [pc, #220]	; (5530 <bt_init+0x434>)
	return "unknown";
    5452:	4938      	ldrhi	r1, [pc, #224]	; (5534 <bt_init+0x438>)
		return plat_str[platform];
    5454:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    5458:	f046 0303 	orr.w	r3, r6, #3
    545c:	f014 f812 	bl	19484 <log_2>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    5460:	f8b4 1001 	ldrh.w	r1, [r4, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    5464:	f8b4 2003 	ldrh.w	r2, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    5468:	2902      	cmp	r1, #2
	BT_INFO("HW Variant: %s (0x%04x)",
    546a:	f046 0303 	orr.w	r3, r6, #3
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    546e:	d12e      	bne.n	54ce <bt_init+0x3d2>
	if (variant < ARRAY_SIZE(nordic_str)) {
    5470:	2a03      	cmp	r2, #3
    5472:	d82c      	bhi.n	54ce <bt_init+0x3d2>
		return nordic_str[variant];
    5474:	4930      	ldr	r1, [pc, #192]	; (5538 <bt_init+0x43c>)
    5476:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    547a:	4830      	ldr	r0, [pc, #192]	; (553c <bt_init+0x440>)
    547c:	f014 f802 	bl	19484 <log_2>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    5480:	7962      	ldrb	r2, [r4, #5]
    5482:	482f      	ldr	r0, [pc, #188]	; (5540 <bt_init+0x444>)
	if (variant < ARRAY_SIZE(var_str)) {
    5484:	2a03      	cmp	r2, #3
		return var_str[variant];
    5486:	bf96      	itet	ls
    5488:	492e      	ldrls	r1, [pc, #184]	; (5544 <bt_init+0x448>)
	return "unknown";
    548a:	492a      	ldrhi	r1, [pc, #168]	; (5534 <bt_init+0x438>)
		return var_str[variant];
    548c:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    5490:	e9cd 1201 	strd	r1, r2, [sp, #4]
    5494:	79a2      	ldrb	r2, [r4, #6]
    5496:	9203      	str	r2, [sp, #12]
    5498:	f8b4 2007 	ldrh.w	r2, [r4, #7]
    549c:	9204      	str	r2, [sp, #16]
    549e:	f8d4 2009 	ldr.w	r2, [r4, #9]
    54a2:	9205      	str	r2, [sp, #20]
    54a4:	f046 0303 	orr.w	r3, r6, #3
    54a8:	2205      	movs	r2, #5
    54aa:	a901      	add	r1, sp, #4
    54ac:	f014 f81f 	bl	194ee <log_n>
	net_buf_unref(rsp);
    54b0:	9800      	ldr	r0, [sp, #0]
    54b2:	f010 f979 	bl	157a8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    54b6:	466a      	mov	r2, sp
    54b8:	2100      	movs	r1, #0
    54ba:	f64f 4002 	movw	r0, #64514	; 0xfc02
    54be:	f7ff faf5 	bl	4aac <bt_hci_cmd_send_sync>
	if (err) {
    54c2:	4604      	mov	r4, r0
    54c4:	b128      	cbz	r0, 54d2 <bt_init+0x3d6>
		BT_WARN("Failed to read supported vendor commands");
    54c6:	4820      	ldr	r0, [pc, #128]	; (5548 <bt_init+0x44c>)
    54c8:	f046 0102 	orr.w	r1, r6, #2
    54cc:	e75c      	b.n	5388 <bt_init+0x28c>
		return "unknown";
    54ce:	4919      	ldr	r1, [pc, #100]	; (5534 <bt_init+0x438>)
    54d0:	e7d3      	b.n	547a <bt_init+0x37e>
	rp.cmds = (void *)rsp->data;
    54d2:	9b00      	ldr	r3, [sp, #0]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    54d4:	481d      	ldr	r0, [pc, #116]	; (554c <bt_init+0x450>)
    54d6:	6899      	ldr	r1, [r3, #8]
    54d8:	2202      	movs	r2, #2
    54da:	3101      	adds	r1, #1
    54dc:	f014 fecf 	bl	1a27e <memcpy>
	net_buf_unref(rsp);
    54e0:	9800      	ldr	r0, [sp, #0]
    54e2:	f010 f961 	bl	157a8 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    54e6:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
    54ea:	075b      	lsls	r3, r3, #29
    54ec:	f57f af4e 	bpl.w	538c <bt_init+0x290>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    54f0:	466a      	mov	r2, sp
    54f2:	4621      	mov	r1, r4
    54f4:	f64f 4003 	movw	r0, #64515	; 0xfc03
    54f8:	f7ff fad8 	bl	4aac <bt_hci_cmd_send_sync>
		if (err) {
    54fc:	b118      	cbz	r0, 5506 <bt_init+0x40a>
			BT_WARN("Failed to read supported vendor features");
    54fe:	4814      	ldr	r0, [pc, #80]	; (5550 <bt_init+0x454>)
    5500:	f046 0102 	orr.w	r1, r6, #2
    5504:	e740      	b.n	5388 <bt_init+0x28c>
		rp.feat = (void *)rsp->data;
    5506:	9b00      	ldr	r3, [sp, #0]
		memcpy(bt_dev.vs_features, rp.feat->features,
    5508:	4812      	ldr	r0, [pc, #72]	; (5554 <bt_init+0x458>)
    550a:	6899      	ldr	r1, [r3, #8]
    550c:	2201      	movs	r2, #1
    550e:	4411      	add	r1, r2
    5510:	f014 feb5 	bl	1a27e <memcpy>
		net_buf_unref(rsp);
    5514:	9800      	ldr	r0, [sp, #0]
    5516:	f010 f947 	bl	157a8 <net_buf_unref>
    551a:	e737      	b.n	538c <bt_init+0x290>
    551c:	2104      	movs	r1, #4
    551e:	480e      	ldr	r0, [pc, #56]	; (5558 <bt_init+0x45c>)
    5520:	f015 f958 	bl	1a7d4 <atomic_or>
	bt_finalize_init();
    5524:	f7ff fd78 	bl	5018 <bt_finalize_init>
	return 0;
    5528:	e672      	b.n	5210 <bt_init+0x114>
    552a:	bf00      	nop
    552c:	00020731 	.word	0x00020731
    5530:	0001f42c 	.word	0x0001f42c
    5534:	00020280 	.word	0x00020280
    5538:	0001f3fc 	.word	0x0001f3fc
    553c:	0002074a 	.word	0x0002074a
    5540:	00020762 	.word	0x00020762
    5544:	0001f464 	.word	0x0001f464
    5548:	0002078f 	.word	0x0002078f
    554c:	200000b9 	.word	0x200000b9
    5550:	000207b8 	.word	0x000207b8
    5554:	200000b8 	.word	0x200000b8
    5558:	200000cc 	.word	0x200000cc

0000555c <init_work>:

static void init_work(struct k_work *work)
{
    555c:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    555e:	f7ff fdcd 	bl	50fc <bt_init>
	if (ready_cb) {
    5562:	4b03      	ldr	r3, [pc, #12]	; (5570 <init_work+0x14>)
    5564:	681b      	ldr	r3, [r3, #0]
    5566:	b113      	cbz	r3, 556e <init_work+0x12>
		ready_cb(err);
	}
}
    5568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    556c:	4718      	bx	r3
}
    556e:	bd10      	pop	{r4, pc}
    5570:	2000197c 	.word	0x2000197c

00005574 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
    5574:	4800      	ldr	r0, [pc, #0]	; (5578 <bt_get_name+0x4>)
    5576:	4770      	bx	lr
    5578:	0002080e 	.word	0x0002080e

0000557c <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    557c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    557e:	4f0b      	ldr	r7, [pc, #44]	; (55ac <id_find+0x30>)
{
    5580:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    5582:	2500      	movs	r5, #0
    5584:	79fb      	ldrb	r3, [r7, #7]
    5586:	b2ec      	uxtb	r4, r5
    5588:	42a3      	cmp	r3, r4
    558a:	d802      	bhi.n	5592 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    558c:	f06f 0401 	mvn.w	r4, #1
    5590:	e009      	b.n	55a6 <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    5592:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
    5596:	2207      	movs	r2, #7
    5598:	4439      	add	r1, r7
    559a:	4630      	mov	r0, r6
    559c:	f014 fe5e 	bl	1a25c <memcmp>
    55a0:	3501      	adds	r5, #1
    55a2:	2800      	cmp	r0, #0
    55a4:	d1ee      	bne.n	5584 <id_find+0x8>
}
    55a6:	4620      	mov	r0, r4
    55a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    55aa:	bf00      	nop
    55ac:	20000000 	.word	0x20000000

000055b0 <set_random_address>:
{
    55b0:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
    55b2:	4914      	ldr	r1, [pc, #80]	; (5604 <set_random_address+0x54>)
    55b4:	2206      	movs	r2, #6
    55b6:	4605      	mov	r5, r0
    55b8:	f014 fe50 	bl	1a25c <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    55bc:	4604      	mov	r4, r0
    55be:	b1e0      	cbz	r0, 55fa <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    55c0:	2106      	movs	r1, #6
    55c2:	f242 0005 	movw	r0, #8197	; 0x2005
    55c6:	f7ff f919 	bl	47fc <bt_hci_cmd_create>
	if (!buf) {
    55ca:	4604      	mov	r4, r0
    55cc:	b1b8      	cbz	r0, 55fe <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    55ce:	2206      	movs	r2, #6
    55d0:	4629      	mov	r1, r5
    55d2:	3008      	adds	r0, #8
    55d4:	f018 fb1f 	bl	1dc16 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    55d8:	4621      	mov	r1, r4
    55da:	2200      	movs	r2, #0
    55dc:	f242 0005 	movw	r0, #8197	; 0x2005
    55e0:	f7ff fa64 	bl	4aac <bt_hci_cmd_send_sync>
	if (err) {
    55e4:	4604      	mov	r4, r0
    55e6:	b940      	cbnz	r0, 55fa <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
    55e8:	2206      	movs	r2, #6
    55ea:	4806      	ldr	r0, [pc, #24]	; (5604 <set_random_address+0x54>)
    55ec:	4629      	mov	r1, r5
    55ee:	f014 fe46 	bl	1a27e <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    55f2:	4b05      	ldr	r3, [pc, #20]	; (5608 <set_random_address+0x58>)
    55f4:	2201      	movs	r2, #1
    55f6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
    55fa:	4620      	mov	r0, r4
    55fc:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    55fe:	f06f 0468 	mvn.w	r4, #104	; 0x68
    5602:	e7fa      	b.n	55fa <set_random_address+0x4a>
    5604:	20000061 	.word	0x20000061
    5608:	20000000 	.word	0x20000000

0000560c <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    560c:	b530      	push	{r4, r5, lr}
    560e:	4604      	mov	r4, r0
    5610:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    5612:	460d      	mov	r5, r1
    5614:	b1e9      	cbz	r1, 5652 <id_create.constprop.0+0x46>
    5616:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    5618:	2207      	movs	r2, #7
    561a:	a902      	add	r1, sp, #8
    561c:	4628      	mov	r0, r5
    561e:	9302      	str	r3, [sp, #8]
    5620:	f8cd 300b 	str.w	r3, [sp, #11]
    5624:	f014 fe1a 	bl	1a25c <memcmp>
    5628:	b198      	cbz	r0, 5652 <id_create.constprop.0+0x46>
	memcpy(dst, src, sizeof(*dst));
    562a:	4817      	ldr	r0, [pc, #92]	; (5688 <id_create.constprop.0+0x7c>)
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    562c:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    5630:	2207      	movs	r2, #7
    5632:	4629      	mov	r1, r5
    5634:	4420      	add	r0, r4
    5636:	f014 fe22 	bl	1a27e <memcpy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    563a:	4814      	ldr	r0, [pc, #80]	; (568c <id_create.constprop.0+0x80>)
    563c:	f015 f98a 	bl	1a954 <atomic_get>
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    5640:	0782      	lsls	r2, r0, #30
    5642:	f3c0 0340 	ubfx	r3, r0, #1, #1
    5646:	d51d      	bpl.n	5684 <id_create.constprop.0+0x78>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
    5648:	f7fe fd32 	bl	40b0 <bt_settings_save_id>
	}

	return 0;
    564c:	2000      	movs	r0, #0
}
    564e:	b005      	add	sp, #20
    5650:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
    5652:	4668      	mov	r0, sp
    5654:	f015 f89e 	bl	1a794 <bt_addr_le_create_static>
			if (err) {
    5658:	2800      	cmp	r0, #0
    565a:	d1f8      	bne.n	564e <id_create.constprop.0+0x42>
		} while (id_find(&new_addr) >= 0);
    565c:	4668      	mov	r0, sp
    565e:	f7ff ff8d 	bl	557c <id_find>
    5662:	2800      	cmp	r0, #0
    5664:	daf5      	bge.n	5652 <id_create.constprop.0+0x46>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    5666:	4808      	ldr	r0, [pc, #32]	; (5688 <id_create.constprop.0+0x7c>)
    5668:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    566c:	4404      	add	r4, r0
    566e:	2207      	movs	r2, #7
    5670:	4669      	mov	r1, sp
    5672:	4620      	mov	r0, r4
    5674:	f014 fe03 	bl	1a27e <memcpy>
		if (addr) {
    5678:	2d00      	cmp	r5, #0
    567a:	d0de      	beq.n	563a <id_create.constprop.0+0x2e>
    567c:	2207      	movs	r2, #7
    567e:	4621      	mov	r1, r4
    5680:	4628      	mov	r0, r5
    5682:	e7d8      	b.n	5636 <id_create.constprop.0+0x2a>
	return 0;
    5684:	4618      	mov	r0, r3
    5686:	e7e2      	b.n	564e <id_create.constprop.0+0x42>
    5688:	20000000 	.word	0x20000000
    568c:	200000cc 	.word	0x200000cc

00005690 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    5690:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5692:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    5694:	4605      	mov	r5, r0
    5696:	b918      	cbnz	r0, 56a0 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    5698:	b344      	cbz	r4, 56ec <bt_id_create+0x5c>
		return -EINVAL;
    569a:	f06f 0015 	mvn.w	r0, #21
    569e:	e023      	b.n	56e8 <bt_id_create+0x58>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    56a0:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    56a2:	2207      	movs	r2, #7
    56a4:	4669      	mov	r1, sp
    56a6:	9300      	str	r3, [sp, #0]
    56a8:	f8cd 3003 	str.w	r3, [sp, #3]
    56ac:	f014 fdd6 	bl	1a25c <memcmp>
    56b0:	2800      	cmp	r0, #0
    56b2:	d0f1      	beq.n	5698 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    56b4:	782b      	ldrb	r3, [r5, #0]
    56b6:	2b01      	cmp	r3, #1
    56b8:	d104      	bne.n	56c4 <bt_id_create+0x34>
    56ba:	79ab      	ldrb	r3, [r5, #6]
    56bc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    56c0:	2bc0      	cmp	r3, #192	; 0xc0
    56c2:	d00a      	beq.n	56da <bt_id_create+0x4a>
    56c4:	4b1b      	ldr	r3, [pc, #108]	; (5734 <bt_id_create+0xa4>)
    56c6:	491c      	ldr	r1, [pc, #112]	; (5738 <bt_id_create+0xa8>)
			BT_ERR("Only static random identity address supported");
    56c8:	481c      	ldr	r0, [pc, #112]	; (573c <bt_id_create+0xac>)
    56ca:	1ac9      	subs	r1, r1, r3
    56cc:	08c9      	lsrs	r1, r1, #3
    56ce:	0189      	lsls	r1, r1, #6
    56d0:	f041 0101 	orr.w	r1, r1, #1
    56d4:	f013 feb5 	bl	19442 <log_0>
			return -EINVAL;
    56d8:	e7df      	b.n	569a <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    56da:	4628      	mov	r0, r5
    56dc:	f7ff ff4e 	bl	557c <id_find>
    56e0:	2800      	cmp	r0, #0
    56e2:	dbd9      	blt.n	5698 <bt_id_create+0x8>
			return -EALREADY;
    56e4:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
    56e8:	b002      	add	sp, #8
    56ea:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    56ec:	4e14      	ldr	r6, [pc, #80]	; (5740 <bt_id_create+0xb0>)
    56ee:	79f3      	ldrb	r3, [r6, #7]
    56f0:	2b01      	cmp	r3, #1
    56f2:	d01c      	beq.n	572e <bt_id_create+0x9e>
    56f4:	f106 00cc 	add.w	r0, r6, #204	; 0xcc
    56f8:	f015 f92c 	bl	1a954 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    56fc:	07c3      	lsls	r3, r0, #31
    56fe:	d40b      	bmi.n	5718 <bt_id_create+0x88>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
    5700:	2d00      	cmp	r5, #0
    5702:	d0ca      	beq.n	569a <bt_id_create+0xa>
    5704:	2207      	movs	r2, #7
    5706:	4669      	mov	r1, sp
    5708:	4628      	mov	r0, r5
    570a:	9400      	str	r4, [sp, #0]
    570c:	f8cd 4003 	str.w	r4, [sp, #3]
    5710:	f014 fda4 	bl	1a25c <memcmp>
    5714:	2800      	cmp	r0, #0
    5716:	d0c0      	beq.n	569a <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
    5718:	79f4      	ldrb	r4, [r6, #7]
	err = id_create(new_id, addr, irk);
    571a:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
    571c:	1c63      	adds	r3, r4, #1
	err = id_create(new_id, addr, irk);
    571e:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    5720:	71f3      	strb	r3, [r6, #7]
	err = id_create(new_id, addr, irk);
    5722:	f7ff ff73 	bl	560c <id_create.constprop.0>
	new_id = bt_dev.id_count++;
    5726:	2800      	cmp	r0, #0
    5728:	bf08      	it	eq
    572a:	4620      	moveq	r0, r4
    572c:	e7dc      	b.n	56e8 <bt_id_create+0x58>
		return -ENOMEM;
    572e:	f06f 000b 	mvn.w	r0, #11
    5732:	e7d9      	b.n	56e8 <bt_id_create+0x58>
    5734:	0001ef2c 	.word	0x0001ef2c
    5738:	0001f02c 	.word	0x0001f02c
    573c:	00020815 	.word	0x00020815
    5740:	20000000 	.word	0x20000000

00005744 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
    5744:	b570      	push	{r4, r5, r6, lr}
    5746:	b086      	sub	sp, #24
    5748:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    574a:	aa01      	add	r2, sp, #4
    574c:	2100      	movs	r1, #0
    574e:	f241 0009 	movw	r0, #4105	; 0x1009
    5752:	f7ff f9ab 	bl	4aac <bt_hci_cmd_send_sync>
	if (err) {
    5756:	4604      	mov	r4, r0
    5758:	b160      	cbz	r0, 5774 <bt_id_read_public_addr+0x30>
    575a:	491e      	ldr	r1, [pc, #120]	; (57d4 <bt_id_read_public_addr+0x90>)
    575c:	4b1e      	ldr	r3, [pc, #120]	; (57d8 <bt_id_read_public_addr+0x94>)
		BT_WARN("Failed to read public address");
    575e:	481f      	ldr	r0, [pc, #124]	; (57dc <bt_id_read_public_addr+0x98>)
    5760:	1ac9      	subs	r1, r1, r3
    5762:	08c9      	lsrs	r1, r1, #3
    5764:	0189      	lsls	r1, r1, #6
    5766:	f041 0102 	orr.w	r1, r1, #2
    576a:	f013 fe6a 	bl	19442 <log_0>

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
		return 0U;
    576e:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
    5770:	b006      	add	sp, #24
    5772:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    5774:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    5776:	9002      	str	r0, [sp, #8]
    5778:	689d      	ldr	r5, [r3, #8]
    577a:	f8ad 000c 	strh.w	r0, [sp, #12]
    577e:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
    5780:	2206      	movs	r2, #6
    5782:	a902      	add	r1, sp, #8
    5784:	4628      	mov	r0, r5
    5786:	f014 fd69 	bl	1a25c <memcmp>
    578a:	b918      	cbnz	r0, 5794 <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
    578c:	9801      	ldr	r0, [sp, #4]
    578e:	f010 f80b 	bl	157a8 <net_buf_unref>
    5792:	e7ec      	b.n	576e <bt_id_read_public_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    5794:	23ff      	movs	r3, #255	; 0xff
    5796:	2206      	movs	r2, #6
    5798:	a904      	add	r1, sp, #16
    579a:	4628      	mov	r0, r5
    579c:	f88d 3010 	strb.w	r3, [sp, #16]
    57a0:	f88d 3011 	strb.w	r3, [sp, #17]
    57a4:	f88d 3012 	strb.w	r3, [sp, #18]
    57a8:	f88d 3013 	strb.w	r3, [sp, #19]
    57ac:	f88d 3014 	strb.w	r3, [sp, #20]
    57b0:	f88d 3015 	strb.w	r3, [sp, #21]
    57b4:	f014 fd52 	bl	1a25c <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    57b8:	2800      	cmp	r0, #0
    57ba:	d0e7      	beq.n	578c <bt_id_read_public_addr+0x48>
	memcpy(dst, src, sizeof(*dst));
    57bc:	2206      	movs	r2, #6
    57be:	4629      	mov	r1, r5
    57c0:	1c70      	adds	r0, r6, #1
    57c2:	f014 fd5c 	bl	1a27e <memcpy>
	net_buf_unref(rsp);
    57c6:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    57c8:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
    57ca:	f00f ffed 	bl	157a8 <net_buf_unref>
	return 1U;
    57ce:	2001      	movs	r0, #1
    57d0:	e7ce      	b.n	5770 <bt_id_read_public_addr+0x2c>
    57d2:	bf00      	nop
    57d4:	0001f02c 	.word	0x0001f02c
    57d8:	0001ef2c 	.word	0x0001ef2c
    57dc:	00020843 	.word	0x00020843

000057e0 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
    57e0:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
    57e2:	4668      	mov	r0, sp
    57e4:	f7ff ffae 	bl	5744 <bt_id_read_public_addr>
    57e8:	4b04      	ldr	r3, [pc, #16]	; (57fc <bt_setup_public_id_addr+0x1c>)
    57ea:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
    57ec:	b118      	cbz	r0, 57f6 <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
    57ee:	4669      	mov	r1, sp
    57f0:	2000      	movs	r0, #0
    57f2:	f7ff ff0b 	bl	560c <id_create.constprop.0>
}
    57f6:	b003      	add	sp, #12
    57f8:	f85d fb04 	ldr.w	pc, [sp], #4
    57fc:	20000000 	.word	0x20000000

00005800 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    5800:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    5804:	4b25      	ldr	r3, [pc, #148]	; (589c <bt_read_static_addr+0x9c>)
    5806:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
    580a:	f014 0401 	ands.w	r4, r4, #1
{
    580e:	4607      	mov	r7, r0
    5810:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    5812:	d10a      	bne.n	582a <bt_read_static_addr+0x2a>
    5814:	4922      	ldr	r1, [pc, #136]	; (58a0 <bt_read_static_addr+0xa0>)
    5816:	4b23      	ldr	r3, [pc, #140]	; (58a4 <bt_read_static_addr+0xa4>)
		BT_WARN("Read Static Addresses command not available");
    5818:	4823      	ldr	r0, [pc, #140]	; (58a8 <bt_read_static_addr+0xa8>)
    581a:	1ac9      	subs	r1, r1, r3
    581c:	08c9      	lsrs	r1, r1, #3
    581e:	0189      	lsls	r1, r1, #6
    5820:	f041 0102 	orr.w	r1, r1, #2
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
    5824:	f013 fe0d 	bl	19442 <log_0>
    5828:	e012      	b.n	5850 <bt_read_static_addr+0x50>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    582a:	aa01      	add	r2, sp, #4
    582c:	2100      	movs	r1, #0
    582e:	f64f 4009 	movw	r0, #64521	; 0xfc09
    5832:	f7ff f93b 	bl	4aac <bt_hci_cmd_send_sync>
	if (err) {
    5836:	4605      	mov	r5, r0
    5838:	b170      	cbz	r0, 5858 <bt_read_static_addr+0x58>
    583a:	4b1a      	ldr	r3, [pc, #104]	; (58a4 <bt_read_static_addr+0xa4>)
    583c:	4918      	ldr	r1, [pc, #96]	; (58a0 <bt_read_static_addr+0xa0>)
		BT_WARN("Failed to read static addresses");
    583e:	481b      	ldr	r0, [pc, #108]	; (58ac <bt_read_static_addr+0xac>)
    5840:	1ac9      	subs	r1, r1, r3
    5842:	08c9      	lsrs	r1, r1, #3
    5844:	0189      	lsls	r1, r1, #6
    5846:	f041 0102 	orr.w	r1, r1, #2
    584a:	f013 fdfa 	bl	19442 <log_0>
		return 0;
    584e:	2400      	movs	r4, #0
	}

	return cnt;
}
    5850:	4620      	mov	r0, r4
    5852:	b002      	add	sp, #8
    5854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rp = (void *)rsp->data;
    5858:	9b01      	ldr	r3, [sp, #4]
    585a:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    585c:	785c      	ldrb	r4, [r3, #1]
    585e:	42b4      	cmp	r4, r6
    5860:	bf28      	it	cs
    5862:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    5864:	f04f 0816 	mov.w	r8, #22
    5868:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
    586a:	42a5      	cmp	r5, r4
    586c:	db0d      	blt.n	588a <bt_read_static_addr+0x8a>
	net_buf_unref(rsp);
    586e:	9801      	ldr	r0, [sp, #4]
    5870:	f00f ff9a 	bl	157a8 <net_buf_unref>
	if (!cnt) {
    5874:	2c00      	cmp	r4, #0
    5876:	d1eb      	bne.n	5850 <bt_read_static_addr+0x50>
    5878:	4909      	ldr	r1, [pc, #36]	; (58a0 <bt_read_static_addr+0xa0>)
    587a:	4b0a      	ldr	r3, [pc, #40]	; (58a4 <bt_read_static_addr+0xa4>)
		BT_WARN("No static addresses stored in controller");
    587c:	480c      	ldr	r0, [pc, #48]	; (58b0 <bt_read_static_addr+0xb0>)
    587e:	1ac9      	subs	r1, r1, r3
    5880:	08c9      	lsrs	r1, r1, #3
    5882:	0189      	lsls	r1, r1, #6
    5884:	f041 0102 	orr.w	r1, r1, #2
    5888:	e7cc      	b.n	5824 <bt_read_static_addr+0x24>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    588a:	fb08 7005 	mla	r0, r8, r5, r7
    588e:	2216      	movs	r2, #22
    5890:	4631      	mov	r1, r6
    5892:	f014 fcf4 	bl	1a27e <memcpy>
	for (i = 0; i < cnt; i++) {
    5896:	3501      	adds	r5, #1
    5898:	e7e7      	b.n	586a <bt_read_static_addr+0x6a>
    589a:	bf00      	nop
    589c:	20000000 	.word	0x20000000
    58a0:	0001f02c 	.word	0x0001f02c
    58a4:	0001ef2c 	.word	0x0001ef2c
    58a8:	00020861 	.word	0x00020861
    58ac:	0002088d 	.word	0x0002088d
    58b0:	000208ad 	.word	0x000208ad

000058b4 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    58b4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    58b6:	4e15      	ldr	r6, [pc, #84]	; (590c <bt_setup_random_id_addr+0x58>)
    58b8:	79f4      	ldrb	r4, [r6, #7]
{
    58ba:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    58bc:	b9f4      	cbnz	r4, 58fc <bt_setup_random_id_addr+0x48>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    58be:	2101      	movs	r1, #1
    58c0:	a802      	add	r0, sp, #8
    58c2:	f7ff ff9d 	bl	5800 <bt_read_static_addr>
    58c6:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
    58c8:	b1c0      	cbz	r0, 58fc <bt_setup_random_id_addr+0x48>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    58ca:	2716      	movs	r7, #22
    58cc:	ab02      	add	r3, sp, #8
    58ce:	b2e5      	uxtb	r5, r4
    58d0:	fb07 3105 	mla	r1, r7, r5, r3
    58d4:	2206      	movs	r2, #6
    58d6:	f10d 0001 	add.w	r0, sp, #1
    58da:	f014 fcd0 	bl	1a27e <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    58de:	2301      	movs	r3, #1

				err = id_create(i, &addr, irk);
    58e0:	4669      	mov	r1, sp
    58e2:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
    58e4:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
    58e8:	f7ff fe90 	bl	560c <id_create.constprop.0>
				if (err) {
    58ec:	b920      	cbnz	r0, 58f8 <bt_setup_random_id_addr+0x44>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    58ee:	79f2      	ldrb	r2, [r6, #7]
    58f0:	3401      	adds	r4, #1
    58f2:	b2e3      	uxtb	r3, r4
    58f4:	429a      	cmp	r2, r3
    58f6:	d8e9      	bhi.n	58cc <bt_setup_random_id_addr+0x18>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
    58f8:	b009      	add	sp, #36	; 0x24
    58fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
    58fc:	2100      	movs	r1, #0
    58fe:	4608      	mov	r0, r1
}
    5900:	b009      	add	sp, #36	; 0x24
    5902:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
    5906:	f7ff bec3 	b.w	5690 <bt_id_create>
    590a:	bf00      	nop
    590c:	20000000 	.word	0x20000000

00005910 <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
    5910:	b570      	push	{r4, r5, r6, lr}
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
    5912:	4b10      	ldr	r3, [pc, #64]	; (5954 <bt_id_set_scan_own_addr+0x44>)
    5914:	781b      	ldrb	r3, [r3, #0]
    5916:	700b      	strb	r3, [r1, #0]
{
    5918:	4606      	mov	r6, r0
    591a:	460d      	mov	r5, r1
		/* Use NRPA unless identity has been explicitly requested
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
    591c:	f015 f820 	bl	1a960 <is_adv_using_rand_addr>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    5920:	b9a0      	cbnz	r0, 594c <bt_id_set_scan_own_addr+0x3c>
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
    5922:	f015 f829 	bl	1a978 <bt_id_set_private_addr>
			if (err) {
    5926:	4604      	mov	r4, r0
    5928:	b170      	cbz	r0, 5948 <bt_id_set_scan_own_addr+0x38>
				if (active_scan || !is_adv_using_rand_addr()) {
    592a:	b986      	cbnz	r6, 594e <bt_id_set_scan_own_addr+0x3e>
    592c:	f015 f818 	bl	1a960 <is_adv_using_rand_addr>
    5930:	b168      	cbz	r0, 594e <bt_id_set_scan_own_addr+0x3e>
    5932:	4a09      	ldr	r2, [pc, #36]	; (5958 <bt_id_set_scan_own_addr+0x48>)
    5934:	4b09      	ldr	r3, [pc, #36]	; (595c <bt_id_set_scan_own_addr+0x4c>)
					return err;
				}

				BT_WARN("Ignoring failure to set address for passive scan (%d)",
    5936:	480a      	ldr	r0, [pc, #40]	; (5960 <bt_id_set_scan_own_addr+0x50>)
    5938:	1ad2      	subs	r2, r2, r3
    593a:	08d2      	lsrs	r2, r2, #3
    593c:	0192      	lsls	r2, r2, #6
    593e:	f042 0202 	orr.w	r2, r2, #2
    5942:	4621      	mov	r1, r4
    5944:	f013 fd8a 	bl	1945c <log_1>
					err);
			}

			*own_addr_type = BT_ADDR_LE_RANDOM;
    5948:	2301      	movs	r3, #1
    594a:	702b      	strb	r3, [r5, #0]
				return err;
			}
		}
	}

	return 0;
    594c:	2400      	movs	r4, #0
}
    594e:	4620      	mov	r0, r4
    5950:	bd70      	pop	{r4, r5, r6, pc}
    5952:	bf00      	nop
    5954:	20000000 	.word	0x20000000
    5958:	0001f02c 	.word	0x0001f02c
    595c:	0001ef2c 	.word	0x0001ef2c
    5960:	000208d6 	.word	0x000208d6

00005964 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    5964:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
    5966:	4606      	mov	r6, r0
    5968:	4b1e      	ldr	r3, [pc, #120]	; (59e4 <le_adv_start_add_conn+0x80>)
    596a:	f816 2b09 	ldrb.w	r2, [r6], #9
    596e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
    5972:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    5974:	2300      	movs	r3, #0
{
    5976:	4605      	mov	r5, r0
	return memcmp(a, b, sizeof(*a));
    5978:	2207      	movs	r2, #7
    597a:	460f      	mov	r7, r1
    597c:	4630      	mov	r0, r6
    597e:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    5980:	9300      	str	r3, [sp, #0]
    5982:	f8cd 3003 	str.w	r3, [sp, #3]
    5986:	f014 fc69 	bl	1a25c <memcmp>
    598a:	782a      	ldrb	r2, [r5, #0]
    598c:	4604      	mov	r4, r0
    598e:	b9a8      	cbnz	r0, 59bc <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    5990:	4b15      	ldr	r3, [pc, #84]	; (59e8 <le_adv_start_add_conn+0x84>)
    5992:	6818      	ldr	r0, [r3, #0]
    5994:	8899      	ldrh	r1, [r3, #4]
    5996:	9002      	str	r0, [sp, #8]
    5998:	799b      	ldrb	r3, [r3, #6]
    599a:	f8ad 100c 	strh.w	r1, [sp, #12]
    599e:	4610      	mov	r0, r2
    59a0:	a902      	add	r1, sp, #8
    59a2:	f88d 300e 	strb.w	r3, [sp, #14]
    59a6:	f000 fd91 	bl	64cc <bt_conn_add_le>
		if (!conn) {
    59aa:	4605      	mov	r5, r0
    59ac:	b1b8      	cbz	r0, 59de <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    59ae:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    59b0:	f000 fbf0 	bl	6194 <bt_conn_set_state>
	*out_conn = conn;
    59b4:	603d      	str	r5, [r7, #0]
	return 0;
}
    59b6:	4620      	mov	r0, r4
    59b8:	b005      	add	sp, #20
    59ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    59bc:	4631      	mov	r1, r6
    59be:	4610      	mov	r0, r2
    59c0:	f000 fdbc 	bl	653c <bt_conn_exists_le>
    59c4:	4604      	mov	r4, r0
    59c6:	b938      	cbnz	r0, 59d8 <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    59c8:	7828      	ldrb	r0, [r5, #0]
    59ca:	4631      	mov	r1, r6
    59cc:	f000 fd7e 	bl	64cc <bt_conn_add_le>
	if (!conn) {
    59d0:	4605      	mov	r5, r0
    59d2:	b120      	cbz	r0, 59de <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    59d4:	2105      	movs	r1, #5
    59d6:	e7eb      	b.n	59b0 <le_adv_start_add_conn+0x4c>
		return -EINVAL;
    59d8:	f06f 0415 	mvn.w	r4, #21
    59dc:	e7eb      	b.n	59b6 <le_adv_start_add_conn+0x52>
		return -ENOMEM;
    59de:	f06f 040b 	mvn.w	r4, #11
    59e2:	e7e8      	b.n	59b6 <le_adv_start_add_conn+0x52>
    59e4:	20000000 	.word	0x20000000
    59e8:	0001f220 	.word	0x0001f220

000059ec <bt_le_adv_lookup_legacy>:
}
    59ec:	4800      	ldr	r0, [pc, #0]	; (59f0 <bt_le_adv_lookup_legacy+0x4>)
    59ee:	4770      	bx	lr
    59f0:	20000018 	.word	0x20000018

000059f4 <bt_le_adv_resume>:
	return 0;
}

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
    59f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    59f6:	481e      	ldr	r0, [pc, #120]	; (5a70 <bt_le_adv_resume+0x7c>)
    59f8:	4c1d      	ldr	r4, [pc, #116]	; (5a70 <bt_le_adv_resume+0x7c>)
    59fa:	f014 ffda 	bl	1a9b2 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    59fe:	f410 5f00 	tst.w	r0, #8192	; 0x2000
    5a02:	d032      	beq.n	5a6a <bt_le_adv_resume+0x76>
    5a04:	4620      	mov	r0, r4
    5a06:	f014 ffd4 	bl	1a9b2 <atomic_get>
    5a0a:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    5a0c:	f3c0 1580 	ubfx	r5, r0, #6, #1
    5a10:	d42b      	bmi.n	5a6a <bt_le_adv_resume+0x76>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5a12:	4620      	mov	r0, r4
    5a14:	f014 ffcd 	bl	1a9b2 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    5a18:	0583      	lsls	r3, r0, #22
    5a1a:	d526      	bpl.n	5a6a <bt_le_adv_resume+0x76>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
    5a1c:	a901      	add	r1, sp, #4
    5a1e:	f1a4 0010 	sub.w	r0, r4, #16
    5a22:	f7ff ff9f 	bl	5964 <le_adv_start_add_conn>
	if (err) {
    5a26:	bb00      	cbnz	r0, 5a6a <bt_le_adv_resume+0x76>
	return bt_le_adv_set_enable_legacy(adv, enable);
    5a28:	2101      	movs	r1, #1
    5a2a:	f1a4 0010 	sub.w	r0, r4, #16
    5a2e:	f014 ffd5 	bl	1a9dc <bt_le_adv_set_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		bt_id_set_adv_private_addr(adv);
	}

	err = bt_le_adv_set_enable(adv, true);
	if (err) {
    5a32:	b150      	cbz	r0, 5a4a <bt_le_adv_resume+0x56>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5a34:	4629      	mov	r1, r5
    5a36:	9801      	ldr	r0, [sp, #4]
    5a38:	f000 fbac 	bl	6194 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5a3c:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    5a40:	4620      	mov	r0, r4
    5a42:	f014 ffbc 	bl	1a9be <atomic_and>
	return (old & mask) != 0;
    5a46:	f3c0 3540 	ubfx	r5, r0, #13, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
    5a4a:	9801      	ldr	r0, [sp, #4]
    5a4c:	f015 f847 	bl	1aade <bt_conn_unref>
	if (persist_paused) {
    5a50:	b15d      	cbz	r5, 5a6a <bt_le_adv_resume+0x76>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5a52:	f3bf 8f5b 	dmb	ish
    5a56:	e854 3f00 	ldrex	r3, [r4]
    5a5a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    5a5e:	e844 3200 	strex	r2, r3, [r4]
    5a62:	2a00      	cmp	r2, #0
    5a64:	d1f7      	bne.n	5a56 <bt_le_adv_resume+0x62>
    5a66:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
    5a6a:	b003      	add	sp, #12
    5a6c:	bd30      	pop	{r4, r5, pc}
    5a6e:	bf00      	nop
    5a70:	20000028 	.word	0x20000028

00005a74 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
    5a74:	b530      	push	{r4, r5, lr}
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    5a76:	2102      	movs	r1, #2
{
    5a78:	b087      	sub	sp, #28
    5a7a:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    5a7c:	f242 000c 	movw	r0, #8204	; 0x200c
    5a80:	f7fe febc 	bl	47fc <bt_hci_cmd_create>
	if (!buf) {
    5a84:	4605      	mov	r5, r0
    5a86:	b318      	cbz	r0, 5ad0 <bt_le_scan_set_enable_legacy+0x5c>
	return net_buf_simple_add(&buf->b, len);
    5a88:	2102      	movs	r1, #2
    5a8a:	3008      	adds	r0, #8
    5a8c:	f018 f8bd 	bl	1dc0a <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    5a90:	2c01      	cmp	r4, #1
    5a92:	d11b      	bne.n	5acc <bt_le_scan_set_enable_legacy+0x58>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5a94:	f3bf 8f5b 	dmb	ish
    5a98:	4b0f      	ldr	r3, [pc, #60]	; (5ad8 <bt_le_scan_set_enable_legacy+0x64>)
    5a9a:	681b      	ldr	r3, [r3, #0]
    5a9c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    5aa0:	f3c3 2300 	ubfx	r3, r3, #8, #1
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
						 BT_DEV_SCAN_FILTER_DUP);
	} else {
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    5aa4:	7043      	strb	r3, [r0, #1]
	}

	cp->enable = enable;

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
    5aa6:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
    5aa8:	7004      	strb	r4, [r0, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
    5aaa:	425c      	negs	r4, r3
    5aac:	415c      	adcs	r4, r3
    5aae:	4a0a      	ldr	r2, [pc, #40]	; (5ad8 <bt_le_scan_set_enable_legacy+0x64>)
    5ab0:	9400      	str	r4, [sp, #0]
    5ab2:	a903      	add	r1, sp, #12
    5ab4:	4628      	mov	r0, r5
    5ab6:	2305      	movs	r3, #5
    5ab8:	f7fe fe8e 	bl	47d8 <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    5abc:	2200      	movs	r2, #0
    5abe:	4629      	mov	r1, r5
    5ac0:	f242 000c 	movw	r0, #8204	; 0x200c
    5ac4:	f7fe fff2 	bl	4aac <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
    5ac8:	b007      	add	sp, #28
    5aca:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    5acc:	2300      	movs	r3, #0
    5ace:	e7e9      	b.n	5aa4 <bt_le_scan_set_enable_legacy+0x30>
		return -ENOBUFS;
    5ad0:	f06f 0068 	mvn.w	r0, #104	; 0x68
    5ad4:	e7f8      	b.n	5ac8 <bt_le_scan_set_enable_legacy+0x54>
    5ad6:	bf00      	nop
    5ad8:	200000cc 	.word	0x200000cc

00005adc <bt_scan_reset>:
	scan_dev_found_cb = NULL;
    5adc:	4b01      	ldr	r3, [pc, #4]	; (5ae4 <bt_scan_reset+0x8>)
    5ade:	2200      	movs	r2, #0
    5ae0:	601a      	str	r2, [r3, #0]
}
    5ae2:	4770      	bx	lr
    5ae4:	20001988 	.word	0x20001988

00005ae8 <bt_le_scan_update>:
    5ae8:	4b0a      	ldr	r3, [pc, #40]	; (5b14 <bt_le_scan_update+0x2c>)
    5aea:	f3bf 8f5b 	dmb	ish
    5aee:	681a      	ldr	r2, [r3, #0]
    5af0:	f3bf 8f5b 	dmb	ish
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    5af4:	f3c2 1080 	ubfx	r0, r2, #6, #1
    5af8:	0652      	lsls	r2, r2, #25
    5afa:	d408      	bmi.n	5b0e <bt_le_scan_update+0x26>
    5afc:	f3bf 8f5b 	dmb	ish
    5b00:	681b      	ldr	r3, [r3, #0]
    5b02:	f3bf 8f5b 	dmb	ish
		return 0;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    5b06:	069b      	lsls	r3, r3, #26
    5b08:	d501      	bpl.n	5b0e <bt_le_scan_update+0x26>
	return bt_le_scan_set_enable_legacy(enable);
    5b0a:	f7ff bfb3 	b.w	5a74 <bt_le_scan_set_enable_legacy>
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
    5b0e:	2000      	movs	r0, #0
    5b10:	4770      	bx	lr
    5b12:	bf00      	nop
    5b14:	200000cc 	.word	0x200000cc

00005b18 <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
    5b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
    5b1c:	f100 0808 	add.w	r8, r0, #8
    5b20:	b08b      	sub	sp, #44	; 0x2c
    5b22:	4604      	mov	r4, r0
    5b24:	4640      	mov	r0, r8
    5b26:	f018 f8d9 	bl	1dcdc <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
    5b2a:	f8df b164 	ldr.w	fp, [pc, #356]	; 5c90 <bt_hci_le_adv_report+0x178>
    5b2e:	4606      	mov	r6, r0
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	BT_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
    5b30:	b916      	cbnz	r6, 5b38 <bt_hci_le_adv_report+0x20>

		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
    5b32:	b00b      	add	sp, #44	; 0x2c
    5b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < sizeof(*evt)) {
    5b38:	89a3      	ldrh	r3, [r4, #12]
    5b3a:	2b08      	cmp	r3, #8
    5b3c:	d80c      	bhi.n	5b58 <bt_hci_le_adv_report+0x40>
    5b3e:	4b55      	ldr	r3, [pc, #340]	; (5c94 <bt_hci_le_adv_report+0x17c>)
    5b40:	4955      	ldr	r1, [pc, #340]	; (5c98 <bt_hci_le_adv_report+0x180>)
			BT_ERR("Unexpected end of buffer");
    5b42:	4856      	ldr	r0, [pc, #344]	; (5c9c <bt_hci_le_adv_report+0x184>)
    5b44:	1ac9      	subs	r1, r1, r3
    5b46:	08c9      	lsrs	r1, r1, #3
    5b48:	0189      	lsls	r1, r1, #6
    5b4a:	f041 0101 	orr.w	r1, r1, #1
}
    5b4e:	b00b      	add	sp, #44	; 0x2c
    5b50:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			BT_ERR("Unexpected end of buffer");
    5b54:	f013 bc75 	b.w	19442 <log_0>
	return net_buf_simple_pull_mem(&buf->b, len);
    5b58:	2109      	movs	r1, #9
    5b5a:	4640      	mov	r0, r8
    5b5c:	f018 f8b6 	bl	1dccc <net_buf_simple_pull_mem>
		adv_info.rssi = evt->data[evt->length];
    5b60:	f890 a008 	ldrb.w	sl, [r0, #8]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    5b64:	237f      	movs	r3, #127	; 0x7f
    5b66:	f88d 301e 	strb.w	r3, [sp, #30]
		adv_info.rssi = evt->data[evt->length];
    5b6a:	eb00 030a 	add.w	r3, r0, sl
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    5b6e:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
    5b70:	7a5b      	ldrb	r3, [r3, #9]
    5b72:	f88d 301d 	strb.w	r3, [sp, #29]
		adv_info.sid = BT_GAP_SID_INVALID;
    5b76:	23ff      	movs	r3, #255	; 0xff
    5b78:	f88d 301c 	strb.w	r3, [sp, #28]
		adv_info.interval = 0U;
    5b7c:	2300      	movs	r3, #0
    5b7e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    5b82:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
		adv_info.adv_type = evt->evt_type;
    5b86:	7802      	ldrb	r2, [r0, #0]
    5b88:	f88d 201f 	strb.w	r2, [sp, #31]
    5b8c:	2a04      	cmp	r2, #4
    5b8e:	bf9c      	itt	ls
    5b90:	4b43      	ldrls	r3, [pc, #268]	; (5ca0 <bt_hci_le_adv_report+0x188>)
    5b92:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props(evt->evt_type);
    5b94:	f8ad 3020 	strh.w	r3, [sp, #32]
    5b98:	4b42      	ldr	r3, [pc, #264]	; (5ca4 <bt_hci_le_adv_report+0x18c>)
    5b9a:	f3bf 8f5b 	dmb	ish
    5b9e:	681b      	ldr	r3, [r3, #0]
    5ba0:	f3bf 8f5b 	dmb	ish
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    5ba4:	065a      	lsls	r2, r3, #25
    5ba6:	4605      	mov	r5, r0
		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);
    5ba8:	f100 0101 	add.w	r1, r0, #1
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    5bac:	d50b      	bpl.n	5bc6 <bt_hci_le_adv_report+0xae>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    5bae:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    5bb2:	075b      	lsls	r3, r3, #29
    5bb4:	d507      	bpl.n	5bc6 <bt_hci_le_adv_report+0xae>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
    5bb6:	7a29      	ldrb	r1, [r5, #8]
	return net_buf_simple_pull(&buf->b, len);
    5bb8:	4640      	mov	r0, r8
    5bba:	3101      	adds	r1, #1
    5bbc:	3e01      	subs	r6, #1
    5bbe:	f018 f87d 	bl	1dcbc <net_buf_simple_pull>
    5bc2:	b2f6      	uxtb	r6, r6
    5bc4:	e7b4      	b.n	5b30 <bt_hci_le_adv_report+0x18>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    5bc6:	786b      	ldrb	r3, [r5, #1]
    5bc8:	1e9a      	subs	r2, r3, #2
    5bca:	2a01      	cmp	r2, #1
    5bcc:	d84d      	bhi.n	5c6a <bt_hci_le_adv_report+0x152>
	memcpy(dst, src, sizeof(*dst));
    5bce:	2207      	movs	r2, #7
    5bd0:	a802      	add	r0, sp, #8
    5bd2:	f014 fb54 	bl	1a27e <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    5bd6:	f89d 3008 	ldrb.w	r3, [sp, #8]
    5bda:	3b02      	subs	r3, #2
    5bdc:	f88d 3008 	strb.w	r3, [sp, #8]
	info->addr = &id_addr;
    5be0:	ab02      	add	r3, sp, #8
    5be2:	9306      	str	r3, [sp, #24]
	if (scan_dev_found_cb) {
    5be4:	f8db 3000 	ldr.w	r3, [fp]
    5be8:	b1a3      	cbz	r3, 5c14 <bt_hci_le_adv_report+0xfc>
	state->offset = net_buf_simple_headroom(buf);
    5bea:	4640      	mov	r0, r8
    5bec:	f018 f899 	bl	1dd22 <net_buf_simple_headroom>
	state->len = buf->len;
    5bf0:	89a7      	ldrh	r7, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    5bf2:	f89d 201f 	ldrb.w	r2, [sp, #31]
    5bf6:	f99d 101d 	ldrsb.w	r1, [sp, #29]
    5bfa:	f8db c000 	ldr.w	ip, [fp]
		buf->len = len;
    5bfe:	f8a4 a00c 	strh.w	sl, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    5c02:	4681      	mov	r9, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    5c04:	4643      	mov	r3, r8
    5c06:	a802      	add	r0, sp, #8
    5c08:	47e0      	blx	ip
	buf->data = buf->__buf + state->offset;
    5c0a:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    5c0c:	81a7      	strh	r7, [r4, #12]
	buf->data = buf->__buf + state->offset;
    5c0e:	fa10 f089 	uxtah	r0, r0, r9
    5c12:	60a0      	str	r0, [r4, #8]
	return list->head;
    5c14:	4b24      	ldr	r3, [pc, #144]	; (5ca8 <bt_hci_le_adv_report+0x190>)
    5c16:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    5c18:	2b00      	cmp	r3, #0
    5c1a:	d0cc      	beq.n	5bb6 <bt_hci_le_adv_report+0x9e>
    5c1c:	f1b3 0208 	subs.w	r2, r3, #8
    5c20:	d0c9      	beq.n	5bb6 <bt_hci_le_adv_report+0x9e>
	return node->next;
    5c22:	681f      	ldr	r7, [r3, #0]
    5c24:	b107      	cbz	r7, 5c28 <bt_hci_le_adv_report+0x110>
    5c26:	3f08      	subs	r7, #8
		if (listener->recv) {
    5c28:	6813      	ldr	r3, [r2, #0]
    5c2a:	9201      	str	r2, [sp, #4]
    5c2c:	b193      	cbz	r3, 5c54 <bt_hci_le_adv_report+0x13c>
	state->offset = net_buf_simple_headroom(buf);
    5c2e:	4640      	mov	r0, r8
    5c30:	f018 f877 	bl	1dd22 <net_buf_simple_headroom>
			listener->recv(info, &buf->b);
    5c34:	9a01      	ldr	r2, [sp, #4]
	state->len = buf->len;
    5c36:	89a3      	ldrh	r3, [r4, #12]
    5c38:	6812      	ldr	r2, [r2, #0]
			buf->len = len;
    5c3a:	f8a4 a00c 	strh.w	sl, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    5c3e:	4681      	mov	r9, r0
			listener->recv(info, &buf->b);
    5c40:	4641      	mov	r1, r8
    5c42:	a806      	add	r0, sp, #24
	state->len = buf->len;
    5c44:	9300      	str	r3, [sp, #0]
    5c46:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
    5c48:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    5c4a:	9b00      	ldr	r3, [sp, #0]
    5c4c:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
    5c4e:	fa10 f089 	uxtah	r0, r0, r9
    5c52:	60a0      	str	r0, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    5c54:	2f00      	cmp	r7, #0
    5c56:	d0ae      	beq.n	5bb6 <bt_hci_le_adv_report+0x9e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    5c58:	f117 0308 	adds.w	r3, r7, #8
    5c5c:	d002      	beq.n	5c64 <bt_hci_le_adv_report+0x14c>
	return node->next;
    5c5e:	68bb      	ldr	r3, [r7, #8]
    5c60:	b103      	cbz	r3, 5c64 <bt_hci_le_adv_report+0x14c>
    5c62:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
    5c64:	463a      	mov	r2, r7
    5c66:	461f      	mov	r7, r3
    5c68:	e7de      	b.n	5c28 <bt_hci_le_adv_report+0x110>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    5c6a:	2bff      	cmp	r3, #255	; 0xff
    5c6c:	d109      	bne.n	5c82 <bt_hci_le_adv_report+0x16a>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    5c6e:	2300      	movs	r3, #0
    5c70:	9304      	str	r3, [sp, #16]
    5c72:	2207      	movs	r2, #7
    5c74:	f8cd 3013 	str.w	r3, [sp, #19]
    5c78:	a904      	add	r1, sp, #16
    5c7a:	a802      	add	r0, sp, #8
    5c7c:	f014 faff 	bl	1a27e <memcpy>
}
    5c80:	e7ae      	b.n	5be0 <bt_hci_le_adv_report+0xc8>
		bt_addr_le_copy(&id_addr,
    5c82:	2000      	movs	r0, #0
    5c84:	f014 fe76 	bl	1a974 <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
    5c88:	2207      	movs	r2, #7
    5c8a:	4601      	mov	r1, r0
    5c8c:	e7f5      	b.n	5c7a <bt_hci_le_adv_report+0x162>
    5c8e:	bf00      	nop
    5c90:	20001988 	.word	0x20001988
    5c94:	0001ef2c 	.word	0x0001ef2c
    5c98:	0001f0fc 	.word	0x0001f0fc
    5c9c:	00020919 	.word	0x00020919
    5ca0:	0002093a 	.word	0x0002093a
    5ca4:	200000cc 	.word	0x200000cc
    5ca8:	20001980 	.word	0x20001980

00005cac <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    5cac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5cb0:	4c62      	ldr	r4, [pc, #392]	; (5e3c <bt_le_scan_start+0x190>)
    5cb2:	f3bf 8f5b 	dmb	ish
    5cb6:	6823      	ldr	r3, [r4, #0]
    5cb8:	f3bf 8f5b 	dmb	ish
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    5cbc:	f013 0f02 	tst.w	r3, #2
{
    5cc0:	4605      	mov	r5, r0
    5cc2:	460f      	mov	r7, r1
    5cc4:	4626      	mov	r6, r4
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    5cc6:	f000 80b6 	beq.w	5e36 <bt_le_scan_start+0x18a>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    5cca:	7802      	ldrb	r2, [r0, #0]
    5ccc:	2a01      	cmp	r2, #1
    5cce:	d905      	bls.n	5cdc <bt_le_scan_start+0x30>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    5cd0:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
    5cd4:	4620      	mov	r0, r4
    5cd6:	b003      	add	sp, #12
    5cd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
    5cdc:	6843      	ldr	r3, [r0, #4]
    5cde:	f033 030f 	bics.w	r3, r3, #15
    5ce2:	d1f5      	bne.n	5cd0 <bt_le_scan_start+0x24>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    5ce4:	8900      	ldrh	r0, [r0, #8]
    5ce6:	1f03      	subs	r3, r0, #4
    5ce8:	b29b      	uxth	r3, r3
    5cea:	f643 7cfc 	movw	ip, #16380	; 0x3ffc
    5cee:	4563      	cmp	r3, ip
    5cf0:	d8ee      	bhi.n	5cd0 <bt_le_scan_start+0x24>
	if (param->window < 0x0004 || param->window > 0x4000) {
    5cf2:	8969      	ldrh	r1, [r5, #10]
    5cf4:	1f0b      	subs	r3, r1, #4
    5cf6:	b29b      	uxth	r3, r3
    5cf8:	4563      	cmp	r3, ip
    5cfa:	d8e9      	bhi.n	5cd0 <bt_le_scan_start+0x24>
	if (param->window > param->interval) {
    5cfc:	4288      	cmp	r0, r1
    5cfe:	d3e7      	bcc.n	5cd0 <bt_le_scan_start+0x24>
	if (param->type && !bt_id_scan_random_addr_check()) {
    5d00:	b98a      	cbnz	r2, 5d26 <bt_le_scan_start+0x7a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5d02:	f3bf 8f5b 	dmb	ish
    5d06:	e856 0f00 	ldrex	r0, [r6]
    5d0a:	f040 0340 	orr.w	r3, r0, #64	; 0x40
    5d0e:	e846 3200 	strex	r2, r3, [r6]
    5d12:	2a00      	cmp	r2, #0
    5d14:	d1f7      	bne.n	5d06 <bt_le_scan_start+0x5a>
    5d16:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    5d1a:	f010 0040 	ands.w	r0, r0, #64	; 0x40
    5d1e:	d007      	beq.n	5d30 <bt_le_scan_start+0x84>
		return -EALREADY;
    5d20:	f06f 0477 	mvn.w	r4, #119	; 0x77
    5d24:	e7d6      	b.n	5cd4 <bt_le_scan_start+0x28>
	if (param->type && !bt_id_scan_random_addr_check()) {
    5d26:	f014 fe39 	bl	1a99c <bt_id_scan_random_addr_check>
    5d2a:	2800      	cmp	r0, #0
    5d2c:	d1e9      	bne.n	5d02 <bt_le_scan_start+0x56>
    5d2e:	e7cf      	b.n	5cd0 <bt_le_scan_start+0x24>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5d30:	f3bf 8f5b 	dmb	ish
    5d34:	6823      	ldr	r3, [r4, #0]
    5d36:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    5d3a:	0699      	lsls	r1, r3, #26
    5d3c:	d509      	bpl.n	5d52 <bt_le_scan_start+0xa6>
	return bt_le_scan_set_enable_legacy(enable);
    5d3e:	f7ff fe99 	bl	5a74 <bt_le_scan_set_enable_legacy>
		if (err) {
    5d42:	4604      	mov	r4, r0
    5d44:	b128      	cbz	r0, 5d52 <bt_le_scan_start+0xa6>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5d46:	f06f 0140 	mvn.w	r1, #64	; 0x40
    5d4a:	483c      	ldr	r0, [pc, #240]	; (5e3c <bt_le_scan_start+0x190>)
    5d4c:	f014 fe6e 	bl	1aa2c <atomic_and>
		return err;
    5d50:	e7c0      	b.n	5cd4 <bt_le_scan_start+0x28>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
    5d52:	686b      	ldr	r3, [r5, #4]
	if (val) {
    5d54:	07da      	lsls	r2, r3, #31
    5d56:	d515      	bpl.n	5d84 <bt_le_scan_start+0xd8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5d58:	f3bf 8f5b 	dmb	ish
    5d5c:	e856 3f00 	ldrex	r3, [r6]
    5d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    5d64:	e846 3200 	strex	r2, r3, [r6]
    5d68:	2a00      	cmp	r2, #0
    5d6a:	d1f7      	bne.n	5d5c <bt_le_scan_start+0xb0>
    5d6c:	f3bf 8f5b 	dmb	ish
		if (param->timeout) {
    5d70:	89ac      	ldrh	r4, [r5, #12]
    5d72:	b16c      	cbz	r4, 5d90 <bt_le_scan_start+0xe4>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5d74:	4831      	ldr	r0, [pc, #196]	; (5e3c <bt_le_scan_start+0x190>)
    5d76:	f06f 0140 	mvn.w	r1, #64	; 0x40
    5d7a:	f014 fe57 	bl	1aa2c <atomic_and>
			return -ENOTSUP;
    5d7e:	f06f 0485 	mvn.w	r4, #133	; 0x85
    5d82:	e7a7      	b.n	5cd4 <bt_le_scan_start+0x28>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5d84:	f46f 7180 	mvn.w	r1, #256	; 0x100
    5d88:	482c      	ldr	r0, [pc, #176]	; (5e3c <bt_le_scan_start+0x190>)
    5d8a:	f014 fe4f 	bl	1aa2c <atomic_and>
    5d8e:	e7ef      	b.n	5d70 <bt_le_scan_start+0xc4>
		err = start_le_scan_legacy(param->type, param->interval,
    5d90:	f895 8000 	ldrb.w	r8, [r5]
    5d94:	f8b5 9008 	ldrh.w	r9, [r5, #8]
    5d98:	896d      	ldrh	r5, [r5, #10]
	(void)memset(&set_param, 0, sizeof(set_param));
    5d9a:	4621      	mov	r1, r4
    5d9c:	2207      	movs	r2, #7
    5d9e:	4668      	mov	r0, sp
    5da0:	f014 fa78 	bl	1a294 <memset>
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
    5da4:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    5da8:	4258      	negs	r0, r3
    5daa:	f10d 0105 	add.w	r1, sp, #5
    5dae:	4158      	adcs	r0, r3
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
    5db0:	f88d 4006 	strb.w	r4, [sp, #6]
	set_param.scan_type = scan_type;
    5db4:	f88d 8000 	strb.w	r8, [sp]
	set_param.interval = sys_cpu_to_le16(interval);
    5db8:	f8ad 9001 	strh.w	r9, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
    5dbc:	f8ad 5003 	strh.w	r5, [sp, #3]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
    5dc0:	f7ff fda6 	bl	5910 <bt_id_set_scan_own_addr>
	if (err) {
    5dc4:	4604      	mov	r4, r0
    5dc6:	2800      	cmp	r0, #0
    5dc8:	d1bd      	bne.n	5d46 <bt_le_scan_start+0x9a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    5dca:	2107      	movs	r1, #7
    5dcc:	f242 000b 	movw	r0, #8203	; 0x200b
    5dd0:	f7fe fd14 	bl	47fc <bt_hci_cmd_create>
	if (!buf) {
    5dd4:	4605      	mov	r5, r0
    5dd6:	b358      	cbz	r0, 5e30 <bt_le_scan_start+0x184>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    5dd8:	2207      	movs	r2, #7
    5dda:	4669      	mov	r1, sp
    5ddc:	3008      	adds	r0, #8
    5dde:	f017 ff1a 	bl	1dc16 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
    5de2:	4622      	mov	r2, r4
    5de4:	4629      	mov	r1, r5
    5de6:	f242 000b 	movw	r0, #8203	; 0x200b
    5dea:	f7fe fe5f 	bl	4aac <bt_hci_cmd_send_sync>
	if (err) {
    5dee:	4604      	mov	r4, r0
    5df0:	2800      	cmp	r0, #0
    5df2:	d1a8      	bne.n	5d46 <bt_le_scan_start+0x9a>
	return bt_le_scan_set_enable_legacy(enable);
    5df4:	2001      	movs	r0, #1
    5df6:	f7ff fe3d 	bl	5a74 <bt_le_scan_set_enable_legacy>
	if (err) {
    5dfa:	4604      	mov	r4, r0
    5dfc:	2800      	cmp	r0, #0
    5dfe:	d1a2      	bne.n	5d46 <bt_le_scan_start+0x9a>
	if (val) {
    5e00:	f1b8 0f01 	cmp.w	r8, #1
    5e04:	d10e      	bne.n	5e24 <bt_le_scan_start+0x178>
    5e06:	f3bf 8f5b 	dmb	ish
    5e0a:	e856 3f00 	ldrex	r3, [r6]
    5e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    5e12:	e846 3200 	strex	r2, r3, [r6]
    5e16:	2a00      	cmp	r2, #0
    5e18:	d1f7      	bne.n	5e0a <bt_le_scan_start+0x15e>
    5e1a:	f3bf 8f5b 	dmb	ish
	scan_dev_found_cb = cb;
    5e1e:	4b08      	ldr	r3, [pc, #32]	; (5e40 <bt_le_scan_start+0x194>)
    5e20:	601f      	str	r7, [r3, #0]
	return 0;
    5e22:	e757      	b.n	5cd4 <bt_le_scan_start+0x28>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5e24:	f06f 0180 	mvn.w	r1, #128	; 0x80
    5e28:	4804      	ldr	r0, [pc, #16]	; (5e3c <bt_le_scan_start+0x190>)
    5e2a:	f014 fdff 	bl	1aa2c <atomic_and>
	if (err) {
    5e2e:	e7f6      	b.n	5e1e <bt_le_scan_start+0x172>
		return -ENOBUFS;
    5e30:	f06f 0468 	mvn.w	r4, #104	; 0x68
    5e34:	e787      	b.n	5d46 <bt_le_scan_start+0x9a>
		return -EAGAIN;
    5e36:	f06f 040a 	mvn.w	r4, #10
    5e3a:	e74b      	b.n	5cd4 <bt_le_scan_start+0x28>
    5e3c:	200000cc 	.word	0x200000cc
    5e40:	20001988 	.word	0x20001988

00005e44 <bt_hci_evt_le_pkey_complete>:

	return 0;
}

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
    5e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5e46:	4c1d      	ldr	r4, [pc, #116]	; (5ebc <bt_hci_evt_le_pkey_complete+0x78>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    5e48:	6886      	ldr	r6, [r0, #8]
    5e4a:	f3bf 8f5b 	dmb	ish
    5e4e:	e854 3f00 	ldrex	r3, [r4]
    5e52:	f023 0310 	bic.w	r3, r3, #16
    5e56:	e844 3200 	strex	r2, r3, [r4]
    5e5a:	2a00      	cmp	r2, #0
    5e5c:	d1f7      	bne.n	5e4e <bt_hci_evt_le_pkey_complete+0xa>
    5e5e:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
    5e62:	7833      	ldrb	r3, [r6, #0]
    5e64:	b983      	cbnz	r3, 5e88 <bt_hci_evt_le_pkey_complete+0x44>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
    5e66:	4816      	ldr	r0, [pc, #88]	; (5ec0 <bt_hci_evt_le_pkey_complete+0x7c>)
    5e68:	2240      	movs	r2, #64	; 0x40
    5e6a:	1c71      	adds	r1, r6, #1
    5e6c:	f014 fa07 	bl	1a27e <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5e70:	f3bf 8f5b 	dmb	ish
    5e74:	e854 3f00 	ldrex	r3, [r4]
    5e78:	f043 0308 	orr.w	r3, r3, #8
    5e7c:	e844 3200 	strex	r2, r3, [r4]
    5e80:	2a00      	cmp	r2, #0
    5e82:	d1f7      	bne.n	5e74 <bt_hci_evt_le_pkey_complete+0x30>
    5e84:	f3bf 8f5b 	dmb	ish
	return list->head;
    5e88:	4d0e      	ldr	r5, [pc, #56]	; (5ec4 <bt_hci_evt_le_pkey_complete+0x80>)
    5e8a:	682c      	ldr	r4, [r5, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    5e8c:	b91c      	cbnz	r4, 5e96 <bt_hci_evt_le_pkey_complete+0x52>
	list->head = NULL;
    5e8e:	2300      	movs	r3, #0
	list->tail = NULL;
    5e90:	e9c5 3300 	strd	r3, r3, [r5]
			cb->func(evt->status ? NULL : pub_key);
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
    5e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			cb->func(evt->status ? NULL : pub_key);
    5e96:	4f0a      	ldr	r7, [pc, #40]	; (5ec0 <bt_hci_evt_le_pkey_complete+0x7c>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    5e98:	3c04      	subs	r4, #4
    5e9a:	2c00      	cmp	r4, #0
    5e9c:	d0f7      	beq.n	5e8e <bt_hci_evt_le_pkey_complete+0x4a>
		if (cb->func) {
    5e9e:	6823      	ldr	r3, [r4, #0]
    5ea0:	b12b      	cbz	r3, 5eae <bt_hci_evt_le_pkey_complete+0x6a>
			cb->func(evt->status ? NULL : pub_key);
    5ea2:	7832      	ldrb	r2, [r6, #0]
    5ea4:	2a00      	cmp	r2, #0
    5ea6:	bf0c      	ite	eq
    5ea8:	4638      	moveq	r0, r7
    5eaa:	2000      	movne	r0, #0
    5eac:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    5eae:	1d23      	adds	r3, r4, #4
    5eb0:	d0ed      	beq.n	5e8e <bt_hci_evt_le_pkey_complete+0x4a>
	return node->next;
    5eb2:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    5eb4:	2c00      	cmp	r4, #0
    5eb6:	d0ea      	beq.n	5e8e <bt_hci_evt_le_pkey_complete+0x4a>
    5eb8:	3c04      	subs	r4, #4
    5eba:	e7ee      	b.n	5e9a <bt_hci_evt_le_pkey_complete+0x56>
    5ebc:	200000cc 	.word	0x200000cc
    5ec0:	20002f80 	.word	0x20002f80
    5ec4:	20001990 	.word	0x20001990

00005ec8 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
    5ec8:	4905      	ldr	r1, [pc, #20]	; (5ee0 <bt_hci_evt_le_dhkey_complete+0x18>)
    5eca:	680b      	ldr	r3, [r1, #0]
    5ecc:	b133      	cbz	r3, 5edc <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    5ece:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
    5ed0:	2000      	movs	r0, #0
    5ed2:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
    5ed4:	7811      	ldrb	r1, [r2, #0]
    5ed6:	b901      	cbnz	r1, 5eda <bt_hci_evt_le_dhkey_complete+0x12>
    5ed8:	1c50      	adds	r0, r2, #1
    5eda:	4718      	bx	r3
	}
}
    5edc:	4770      	bx	lr
    5ede:	bf00      	nop
    5ee0:	2000198c 	.word	0x2000198c

00005ee4 <tx_free>:
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    5ee4:	2300      	movs	r3, #0
	tx->user_data = NULL;
    5ee6:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
    5eea:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
    5eec:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    5eee:	4801      	ldr	r0, [pc, #4]	; (5ef4 <tx_free+0x10>)
    5ef0:	f018 baad 	b.w	1e44e <k_queue_append>
    5ef4:	20000be0 	.word	0x20000be0

00005ef8 <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    5ef8:	4b0e      	ldr	r3, [pc, #56]	; (5f34 <notify_connected+0x3c>)
{
    5efa:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    5efc:	681d      	ldr	r5, [r3, #0]
{
    5efe:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    5f00:	b955      	cbnz	r5, 5f18 <notify_connected+0x20>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    5f02:	4d0d      	ldr	r5, [pc, #52]	; (5f38 <notify_connected+0x40>)
    5f04:	4e0d      	ldr	r6, [pc, #52]	; (5f3c <notify_connected+0x44>)
		if (cb->connected) {
			cb->connected(conn, conn->err);
    5f06:	7a61      	ldrb	r1, [r4, #9]
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    5f08:	42b5      	cmp	r5, r6
    5f0a:	d30c      	bcc.n	5f26 <notify_connected+0x2e>
		}
	}

	if (!conn->err) {
    5f0c:	b989      	cbnz	r1, 5f32 <notify_connected+0x3a>
		bt_gatt_connected(conn);
    5f0e:	4620      	mov	r0, r4
	}
}
    5f10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_gatt_connected(conn);
    5f14:	f003 b848 	b.w	8fa8 <bt_gatt_connected>
		if (cb->connected) {
    5f18:	682b      	ldr	r3, [r5, #0]
    5f1a:	b113      	cbz	r3, 5f22 <notify_connected+0x2a>
			cb->connected(conn, conn->err);
    5f1c:	7a61      	ldrb	r1, [r4, #9]
    5f1e:	4620      	mov	r0, r4
    5f20:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    5f22:	692d      	ldr	r5, [r5, #16]
    5f24:	e7ec      	b.n	5f00 <notify_connected+0x8>
		if (cb->connected) {
    5f26:	682b      	ldr	r3, [r5, #0]
    5f28:	b10b      	cbz	r3, 5f2e <notify_connected+0x36>
			cb->connected(conn, conn->err);
    5f2a:	4620      	mov	r0, r4
    5f2c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    5f2e:	3514      	adds	r5, #20
    5f30:	e7e9      	b.n	5f06 <notify_connected+0xe>
}
    5f32:	bd70      	pop	{r4, r5, r6, pc}
    5f34:	20001998 	.word	0x20001998
    5f38:	0001edb8 	.word	0x0001edb8
    5f3c:	0001edb8 	.word	0x0001edb8

00005f40 <bt_conn_get_pkts>:
}
    5f40:	4800      	ldr	r0, [pc, #0]	; (5f44 <bt_conn_get_pkts+0x4>)
    5f42:	4770      	bx	lr
    5f44:	20000100 	.word	0x20000100

00005f48 <bt_conn_new>:
{
    5f48:	b538      	push	{r3, r4, r5, lr}
    5f4a:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
    5f4c:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    5f4e:	2501      	movs	r5, #1
    5f50:	428b      	cmp	r3, r1
    5f52:	d102      	bne.n	5f5a <bt_conn_new+0x12>
		return NULL;
    5f54:	2400      	movs	r4, #0
}
    5f56:	4620      	mov	r0, r4
    5f58:	bd38      	pop	{r3, r4, r5, pc}
    5f5a:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
    5f5e:	f3bf 8f5b 	dmb	ish
    5f62:	e852 0f00 	ldrex	r0, [r2]
    5f66:	2800      	cmp	r0, #0
    5f68:	d104      	bne.n	5f74 <bt_conn_new+0x2c>
    5f6a:	e842 5c00 	strex	ip, r5, [r2]
    5f6e:	f1bc 0f00 	cmp.w	ip, #0
    5f72:	d1f6      	bne.n	5f62 <bt_conn_new+0x1a>
    5f74:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
    5f78:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    5f7c:	d002      	beq.n	5f84 <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
    5f7e:	3301      	adds	r3, #1
    5f80:	4604      	mov	r4, r0
    5f82:	e7e5      	b.n	5f50 <bt_conn_new+0x8>
	if (!conn) {
    5f84:	2c00      	cmp	r4, #0
    5f86:	d0e6      	beq.n	5f56 <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
    5f88:	22b8      	movs	r2, #184	; 0xb8
    5f8a:	2100      	movs	r1, #0
    5f8c:	4620      	mov	r0, r4
    5f8e:	f014 f981 	bl	1a294 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
    5f92:	f104 0058 	add.w	r0, r4, #88	; 0x58
    5f96:	4904      	ldr	r1, [pc, #16]	; (5fa8 <bt_conn_new+0x60>)
    5f98:	f018 fb50 	bl	1e63c <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
    5f9c:	4903      	ldr	r1, [pc, #12]	; (5fac <bt_conn_new+0x64>)
    5f9e:	f104 0028 	add.w	r0, r4, #40	; 0x28
    5fa2:	f018 fb25 	bl	1e5f0 <k_work_init>
	return conn;
    5fa6:	e7d6      	b.n	5f56 <bt_conn_new+0xe>
    5fa8:	00006639 	.word	0x00006639
    5fac:	0001aa91 	.word	0x0001aa91

00005fb0 <bt_conn_recv>:
{
    5fb0:	b570      	push	{r4, r5, r6, lr}
    5fb2:	4616      	mov	r6, r2
    5fb4:	4604      	mov	r4, r0
    5fb6:	460d      	mov	r5, r1
	tx_notify(conn);
    5fb8:	f014 fd47 	bl	1aa4a <tx_notify>
	switch (flags) {
    5fbc:	2e01      	cmp	r6, #1
    5fbe:	d02b      	beq.n	6018 <bt_conn_recv+0x68>
    5fc0:	2e02      	cmp	r6, #2
    5fc2:	d158      	bne.n	6076 <bt_conn_recv+0xc6>
		if (conn->rx) {
    5fc4:	6923      	ldr	r3, [r4, #16]
    5fc6:	b163      	cbz	r3, 5fe2 <bt_conn_recv+0x32>
    5fc8:	4b35      	ldr	r3, [pc, #212]	; (60a0 <bt_conn_recv+0xf0>)
    5fca:	4936      	ldr	r1, [pc, #216]	; (60a4 <bt_conn_recv+0xf4>)
			BT_ERR("Unexpected first L2CAP frame");
    5fcc:	4836      	ldr	r0, [pc, #216]	; (60a8 <bt_conn_recv+0xf8>)
    5fce:	1ac9      	subs	r1, r1, r3
    5fd0:	08c9      	lsrs	r1, r1, #3
    5fd2:	0189      	lsls	r1, r1, #6
    5fd4:	f041 0101 	orr.w	r1, r1, #1
    5fd8:	f013 fa33 	bl	19442 <log_0>
			bt_conn_reset_rx_state(conn);
    5fdc:	4620      	mov	r0, r4
    5fde:	f014 fd5a 	bl	1aa96 <bt_conn_reset_rx_state>
		conn->rx = buf;
    5fe2:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
    5fe4:	6923      	ldr	r3, [r4, #16]
    5fe6:	8999      	ldrh	r1, [r3, #12]
    5fe8:	2901      	cmp	r1, #1
    5fea:	d958      	bls.n	609e <bt_conn_recv+0xee>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
    5fec:	689a      	ldr	r2, [r3, #8]
    5fee:	8812      	ldrh	r2, [r2, #0]
    5ff0:	3204      	adds	r2, #4
    5ff2:	b292      	uxth	r2, r2
	if (conn->rx->len < acl_total_len) {
    5ff4:	4291      	cmp	r1, r2
    5ff6:	d352      	bcc.n	609e <bt_conn_recv+0xee>
	if (conn->rx->len > acl_total_len) {
    5ff8:	d949      	bls.n	608e <bt_conn_recv+0xde>
    5ffa:	4829      	ldr	r0, [pc, #164]	; (60a0 <bt_conn_recv+0xf0>)
    5ffc:	4b29      	ldr	r3, [pc, #164]	; (60a4 <bt_conn_recv+0xf4>)
    5ffe:	1a1b      	subs	r3, r3, r0
    6000:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL len mismatch (%u > %u)",
    6002:	019b      	lsls	r3, r3, #6
    6004:	4829      	ldr	r0, [pc, #164]	; (60ac <bt_conn_recv+0xfc>)
    6006:	f043 0301 	orr.w	r3, r3, #1
    600a:	f013 fa3b 	bl	19484 <log_2>
		bt_conn_reset_rx_state(conn);
    600e:	4620      	mov	r0, r4
}
    6010:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
    6014:	f014 bd3f 	b.w	1aa96 <bt_conn_reset_rx_state>
		if (!conn->rx) {
    6018:	6920      	ldr	r0, [r4, #16]
    601a:	b968      	cbnz	r0, 6038 <bt_conn_recv+0x88>
    601c:	4921      	ldr	r1, [pc, #132]	; (60a4 <bt_conn_recv+0xf4>)
    601e:	4b20      	ldr	r3, [pc, #128]	; (60a0 <bt_conn_recv+0xf0>)
			BT_ERR("Unexpected L2CAP continuation");
    6020:	4823      	ldr	r0, [pc, #140]	; (60b0 <bt_conn_recv+0x100>)
    6022:	1ac9      	subs	r1, r1, r3
    6024:	08c9      	lsrs	r1, r1, #3
    6026:	0189      	lsls	r1, r1, #6
    6028:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Not enough buffer space for L2CAP data");
    602c:	f013 fa09 	bl	19442 <log_0>
			bt_conn_reset_rx_state(conn);
    6030:	4620      	mov	r0, r4
    6032:	f014 fd30 	bl	1aa96 <bt_conn_reset_rx_state>
    6036:	e001      	b.n	603c <bt_conn_recv+0x8c>
		if (!buf->len) {
    6038:	89ae      	ldrh	r6, [r5, #12]
    603a:	b926      	cbnz	r6, 6046 <bt_conn_recv+0x96>
			net_buf_unref(buf);
    603c:	4628      	mov	r0, r5
}
    603e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
    6042:	f00f bbb1 	b.w	157a8 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
    6046:	3008      	adds	r0, #8
    6048:	f017 fe6f 	bl	1dd2a <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    604c:	4286      	cmp	r6, r0
    604e:	d908      	bls.n	6062 <bt_conn_recv+0xb2>
    6050:	4914      	ldr	r1, [pc, #80]	; (60a4 <bt_conn_recv+0xf4>)
    6052:	4b13      	ldr	r3, [pc, #76]	; (60a0 <bt_conn_recv+0xf0>)
			BT_ERR("Not enough buffer space for L2CAP data");
    6054:	4817      	ldr	r0, [pc, #92]	; (60b4 <bt_conn_recv+0x104>)
    6056:	1ac9      	subs	r1, r1, r3
    6058:	08c9      	lsrs	r1, r1, #3
    605a:	0189      	lsls	r1, r1, #6
    605c:	f041 0101 	orr.w	r1, r1, #1
    6060:	e7e4      	b.n	602c <bt_conn_recv+0x7c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    6062:	6920      	ldr	r0, [r4, #16]
    6064:	89aa      	ldrh	r2, [r5, #12]
    6066:	68a9      	ldr	r1, [r5, #8]
    6068:	3008      	adds	r0, #8
    606a:	f017 fdd4 	bl	1dc16 <net_buf_simple_add_mem>
		net_buf_unref(buf);
    606e:	4628      	mov	r0, r5
    6070:	f00f fb9a 	bl	157a8 <net_buf_unref>
		break;
    6074:	e7b6      	b.n	5fe4 <bt_conn_recv+0x34>
    6076:	4a0a      	ldr	r2, [pc, #40]	; (60a0 <bt_conn_recv+0xf0>)
    6078:	4b0a      	ldr	r3, [pc, #40]	; (60a4 <bt_conn_recv+0xf4>)
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    607a:	480f      	ldr	r0, [pc, #60]	; (60b8 <bt_conn_recv+0x108>)
    607c:	1a9b      	subs	r3, r3, r2
    607e:	08db      	lsrs	r3, r3, #3
    6080:	019b      	lsls	r3, r3, #6
    6082:	f043 0201 	orr.w	r2, r3, #1
    6086:	4631      	mov	r1, r6
    6088:	f013 f9e8 	bl	1945c <log_1>
		bt_conn_reset_rx_state(conn);
    608c:	e7d0      	b.n	6030 <bt_conn_recv+0x80>
	conn->rx = NULL;
    608e:	2200      	movs	r2, #0
    6090:	6122      	str	r2, [r4, #16]
	bt_l2cap_recv(conn, buf);
    6092:	4620      	mov	r0, r4
    6094:	4619      	mov	r1, r3
}
    6096:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    609a:	f000 bc91 	b.w	69c0 <bt_l2cap_recv>
}
    609e:	bd70      	pop	{r4, r5, r6, pc}
    60a0:	0001ef2c 	.word	0x0001ef2c
    60a4:	0001ef4c 	.word	0x0001ef4c
    60a8:	00020946 	.word	0x00020946
    60ac:	000209c6 	.word	0x000209c6
    60b0:	00020963 	.word	0x00020963
    60b4:	00020981 	.word	0x00020981
    60b8:	000209a8 	.word	0x000209a8

000060bc <bt_conn_send_cb>:
{
    60bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    60c0:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
    60c2:	7a83      	ldrb	r3, [r0, #10]
    60c4:	2b07      	cmp	r3, #7
{
    60c6:	4605      	mov	r5, r0
    60c8:	460e      	mov	r6, r1
    60ca:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
    60cc:	d00c      	beq.n	60e8 <bt_conn_send_cb+0x2c>
    60ce:	4926      	ldr	r1, [pc, #152]	; (6168 <bt_conn_send_cb+0xac>)
    60d0:	4b26      	ldr	r3, [pc, #152]	; (616c <bt_conn_send_cb+0xb0>)
		BT_ERR("not connected!");
    60d2:	4827      	ldr	r0, [pc, #156]	; (6170 <bt_conn_send_cb+0xb4>)
    60d4:	1ac9      	subs	r1, r1, r3
    60d6:	08c9      	lsrs	r1, r1, #3
    60d8:	0189      	lsls	r1, r1, #6
    60da:	f041 0101 	orr.w	r1, r1, #1
    60de:	f013 f9b0 	bl	19442 <log_0>
			return -ENOTCONN;
    60e2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    60e6:	e01d      	b.n	6124 <bt_conn_send_cb+0x68>
	if (cb) {
    60e8:	2a00      	cmp	r2, #0
    60ea:	d03a      	beq.n	6162 <bt_conn_send_cb+0xa6>
	return z_impl_z_current_get();
    60ec:	f012 f9b2 	bl	18454 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    60f0:	4b20      	ldr	r3, [pc, #128]	; (6174 <bt_conn_send_cb+0xb8>)
    60f2:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    60f4:	4820      	ldr	r0, [pc, #128]	; (6178 <bt_conn_send_cb+0xbc>)
    60f6:	bf07      	ittee	eq
    60f8:	2200      	moveq	r2, #0
    60fa:	2300      	moveq	r3, #0
    60fc:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    6100:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    6104:	f011 fc74 	bl	179f0 <z_impl_k_queue_get>
    6108:	4604      	mov	r4, r0
		if (!tx) {
    610a:	b968      	cbnz	r0, 6128 <bt_conn_send_cb+0x6c>
    610c:	4b17      	ldr	r3, [pc, #92]	; (616c <bt_conn_send_cb+0xb0>)
    610e:	4916      	ldr	r1, [pc, #88]	; (6168 <bt_conn_send_cb+0xac>)
			BT_ERR("Unable to allocate TX context");
    6110:	481a      	ldr	r0, [pc, #104]	; (617c <bt_conn_send_cb+0xc0>)
    6112:	1ac9      	subs	r1, r1, r3
    6114:	08c9      	lsrs	r1, r1, #3
    6116:	0189      	lsls	r1, r1, #6
    6118:	f041 0101 	orr.w	r1, r1, #1
    611c:	f013 f991 	bl	19442 <log_0>
			return -ENOBUFS;
    6120:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    6124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    6128:	7aab      	ldrb	r3, [r5, #10]
    612a:	2b07      	cmp	r3, #7
    612c:	d00d      	beq.n	614a <bt_conn_send_cb+0x8e>
    612e:	4b0f      	ldr	r3, [pc, #60]	; (616c <bt_conn_send_cb+0xb0>)
    6130:	490d      	ldr	r1, [pc, #52]	; (6168 <bt_conn_send_cb+0xac>)
			BT_WARN("Disconnected while allocating context");
    6132:	4813      	ldr	r0, [pc, #76]	; (6180 <bt_conn_send_cb+0xc4>)
    6134:	1ac9      	subs	r1, r1, r3
    6136:	08c9      	lsrs	r1, r1, #3
    6138:	0189      	lsls	r1, r1, #6
    613a:	f041 0102 	orr.w	r1, r1, #2
    613e:	f013 f980 	bl	19442 <log_0>
			tx_free(tx);
    6142:	4620      	mov	r0, r4
    6144:	f7ff fece 	bl	5ee4 <tx_free>
    6148:	e7cb      	b.n	60e2 <bt_conn_send_cb+0x26>
		tx->pending_no_cb = 0U;
    614a:	2300      	movs	r3, #0
		tx->user_data = user_data;
    614c:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    6150:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    6152:	6170      	str	r0, [r6, #20]
	net_buf_put(&conn->tx_queue, buf);
    6154:	f105 0038 	add.w	r0, r5, #56	; 0x38
    6158:	4631      	mov	r1, r6
    615a:	f017 fd17 	bl	1db8c <net_buf_put>
	return 0;
    615e:	2000      	movs	r0, #0
    6160:	e7e0      	b.n	6124 <bt_conn_send_cb+0x68>
		tx_data(buf)->tx = NULL;
    6162:	614a      	str	r2, [r1, #20]
    6164:	e7f6      	b.n	6154 <bt_conn_send_cb+0x98>
    6166:	bf00      	nop
    6168:	0001ef4c 	.word	0x0001ef4c
    616c:	0001ef2c 	.word	0x0001ef2c
    6170:	000209e1 	.word	0x000209e1
    6174:	200017f0 	.word	0x200017f0
    6178:	20000be0 	.word	0x20000be0
    617c:	000209f0 	.word	0x000209f0
    6180:	00020a0e 	.word	0x00020a0e

00006184 <bt_conn_lookup_handle>:
{
    6184:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    6186:	2101      	movs	r1, #1
    6188:	4801      	ldr	r0, [pc, #4]	; (6190 <bt_conn_lookup_handle+0xc>)
    618a:	f014 bcc2 	b.w	1ab12 <conn_lookup_handle>
    618e:	bf00      	nop
    6190:	20000e48 	.word	0x20000e48

00006194 <bt_conn_set_state>:
{
    6194:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
    6196:	7a86      	ldrb	r6, [r0, #10]
    6198:	428e      	cmp	r6, r1
{
    619a:	4604      	mov	r4, r0
    619c:	460d      	mov	r5, r1
	if (conn->state == state) {
    619e:	d112      	bne.n	61c6 <bt_conn_set_state+0x32>
    61a0:	4b66      	ldr	r3, [pc, #408]	; (633c <bt_conn_set_state+0x1a8>)
    61a2:	4a67      	ldr	r2, [pc, #412]	; (6340 <bt_conn_set_state+0x1ac>)
		BT_WARN("no transition %s", state2str(state));
    61a4:	4867      	ldr	r0, [pc, #412]	; (6344 <bt_conn_set_state+0x1b0>)
    61a6:	2e08      	cmp	r6, #8
    61a8:	eba2 0203 	sub.w	r2, r2, r3
    61ac:	bf96      	itet	ls
    61ae:	4b66      	ldrls	r3, [pc, #408]	; (6348 <bt_conn_set_state+0x1b4>)
    61b0:	4966      	ldrhi	r1, [pc, #408]	; (634c <bt_conn_set_state+0x1b8>)
    61b2:	f853 1026 	ldrls.w	r1, [r3, r6, lsl #2]
    61b6:	08d2      	lsrs	r2, r2, #3
    61b8:	0192      	lsls	r2, r2, #6
    61ba:	f042 0202 	orr.w	r2, r2, #2
}
    61be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
    61c2:	f013 b94b 	b.w	1945c <log_1>
	conn->state = state;
    61c6:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
    61c8:	b926      	cbnz	r6, 61d4 <bt_conn_set_state+0x40>
		if (conn->type != BT_CONN_TYPE_ISO) {
    61ca:	7883      	ldrb	r3, [r0, #2]
    61cc:	2b08      	cmp	r3, #8
    61ce:	d001      	beq.n	61d4 <bt_conn_set_state+0x40>
			bt_conn_ref(conn);
    61d0:	f014 fc6a 	bl	1aaa8 <bt_conn_ref>
	switch (conn->state) {
    61d4:	7aa3      	ldrb	r3, [r4, #10]
    61d6:	2b08      	cmp	r3, #8
    61d8:	f200 80a5 	bhi.w	6326 <bt_conn_set_state+0x192>
    61dc:	e8df f003 	tbb	[pc, r3]
    61e0:	adad0537 	.word	0xadad0537
    61e4:	1cadadad 	.word	0x1cadadad
    61e8:	ad          	.byte	0xad
    61e9:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
    61ea:	4d59      	ldr	r5, [pc, #356]	; (6350 <bt_conn_set_state+0x1bc>)
		tx->pending_no_cb = 0U;
    61ec:	2600      	movs	r6, #0
	__asm__ volatile(
    61ee:	f04f 0320 	mov.w	r3, #32
    61f2:	f3ef 8211 	mrs	r2, BASEPRI
    61f6:	f383 8812 	msr	BASEPRI_MAX, r3
    61fa:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    61fe:	69e3      	ldr	r3, [r4, #28]
    6200:	2b00      	cmp	r3, #0
    6202:	d071      	beq.n	62e8 <bt_conn_set_state+0x154>
			conn->pending_no_cb--;
    6204:	3b01      	subs	r3, #1
    6206:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    6208:	f382 8811 	msr	BASEPRI, r2
    620c:	f3bf 8f6f 	isb	sy
    6210:	4628      	mov	r0, r5
    6212:	f011 fc21 	bl	17a58 <z_impl_k_sem_give>
}
    6216:	e7ea      	b.n	61ee <bt_conn_set_state+0x5a>
		if (conn->type == BT_CONN_TYPE_SCO) {
    6218:	78a3      	ldrb	r3, [r4, #2]
    621a:	2b04      	cmp	r3, #4
    621c:	f000 808d 	beq.w	633a <bt_conn_set_state+0x1a6>
	z_impl_k_queue_init(queue);
    6220:	f104 0038 	add.w	r0, r4, #56	; 0x38
    6224:	f018 f8e7 	bl	1e3f6 <z_impl_k_queue_init>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    6228:	484a      	ldr	r0, [pc, #296]	; (6354 <bt_conn_set_state+0x1c0>)
    622a:	2100      	movs	r1, #0
    622c:	f012 fb90 	bl	18950 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    6230:	2300      	movs	r3, #0
	list->tail = NULL;
    6232:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    6236:	78e3      	ldrb	r3, [r4, #3]
    6238:	2b01      	cmp	r3, #1
    623a:	d17e      	bne.n	633a <bt_conn_set_state+0x1a6>
			k_work_schedule(&conn->deferred_work,
    623c:	f104 0058 	add.w	r0, r4, #88	; 0x58
    6240:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
    6244:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
    6248:	2300      	movs	r3, #0
    624a:	f011 bdd9 	b.w	17e00 <k_work_schedule>
		if (conn->type == BT_CONN_TYPE_SCO) {
    624e:	78a3      	ldrb	r3, [r4, #2]
    6250:	2b04      	cmp	r3, #4
    6252:	d104      	bne.n	625e <bt_conn_set_state+0xca>
			bt_conn_unref(conn);
    6254:	4620      	mov	r0, r4
}
    6256:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
    625a:	f014 bc40 	b.w	1aade <bt_conn_unref>
		switch (old_state) {
    625e:	2e08      	cmp	r6, #8
    6260:	d86b      	bhi.n	633a <bt_conn_set_state+0x1a6>
    6262:	a301      	add	r3, pc, #4	; (adr r3, 6268 <bt_conn_set_state+0xd4>)
    6264:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
    6268:	000062d5 	.word	0x000062d5
    626c:	0000628d 	.word	0x0000628d
    6270:	000062c7 	.word	0x000062c7
    6274:	00006255 	.word	0x00006255
    6278:	00006255 	.word	0x00006255
    627c:	000062c7 	.word	0x000062c7
    6280:	000062c7 	.word	0x000062c7
    6284:	000062d5 	.word	0x000062d5
    6288:	000062d5 	.word	0x000062d5
			tx_notify(conn);
    628c:	4620      	mov	r0, r4
    628e:	f014 fbdc 	bl	1aa4a <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    6292:	78a3      	ldrb	r3, [r4, #2]
    6294:	2b01      	cmp	r3, #1
    6296:	d103      	bne.n	62a0 <bt_conn_set_state+0x10c>
				k_work_cancel_delayable(&conn->deferred_work);
    6298:	f104 0058 	add.w	r0, r4, #88	; 0x58
    629c:	f018 f9ee 	bl	1e67c <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    62a0:	f3bf 8f5b 	dmb	ish
    62a4:	3404      	adds	r4, #4
    62a6:	e854 3f00 	ldrex	r3, [r4]
    62aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    62ae:	e844 3200 	strex	r2, r3, [r4]
    62b2:	2a00      	cmp	r2, #0
    62b4:	d1f7      	bne.n	62a6 <bt_conn_set_state+0x112>
    62b6:	f3bf 8f5b 	dmb	ish
    62ba:	4826      	ldr	r0, [pc, #152]	; (6354 <bt_conn_set_state+0x1c0>)
}
    62bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    62c0:	2100      	movs	r1, #0
    62c2:	f012 bb45 	b.w	18950 <z_impl_k_poll_signal_raise>
			if (conn->err) {
    62c6:	7a63      	ldrb	r3, [r4, #9]
    62c8:	2b00      	cmp	r3, #0
    62ca:	d0c3      	beq.n	6254 <bt_conn_set_state+0xc0>
				notify_connected(conn);
    62cc:	4620      	mov	r0, r4
    62ce:	f7ff fe13 	bl	5ef8 <notify_connected>
    62d2:	e7bf      	b.n	6254 <bt_conn_set_state+0xc0>
    62d4:	4a1a      	ldr	r2, [pc, #104]	; (6340 <bt_conn_set_state+0x1ac>)
    62d6:	4b19      	ldr	r3, [pc, #100]	; (633c <bt_conn_set_state+0x1a8>)
			BT_WARN("Invalid (%u) old state", state);
    62d8:	481f      	ldr	r0, [pc, #124]	; (6358 <bt_conn_set_state+0x1c4>)
    62da:	1ad2      	subs	r2, r2, r3
    62dc:	08d2      	lsrs	r2, r2, #3
    62de:	0192      	lsls	r2, r2, #6
    62e0:	f042 0202 	orr.w	r2, r2, #2
    62e4:	4629      	mov	r1, r5
    62e6:	e76a      	b.n	61be <bt_conn_set_state+0x2a>
	return list->head;
    62e8:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    62ea:	b128      	cbz	r0, 62f8 <bt_conn_set_state+0x164>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    62ec:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    62ee:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    62f0:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    62f2:	4288      	cmp	r0, r1
	list->tail = node;
    62f4:	bf08      	it	eq
    62f6:	61a3      	streq	r3, [r4, #24]
    62f8:	f382 8811 	msr	BASEPRI, r2
    62fc:	f3bf 8f6f 	isb	sy
		if (!node) {
    6300:	b1d8      	cbz	r0, 633a <bt_conn_set_state+0x1a6>
	__asm__ volatile(
    6302:	f04f 0220 	mov.w	r2, #32
    6306:	f3ef 8311 	mrs	r3, BASEPRI
    630a:	f382 8812 	msr	BASEPRI_MAX, r2
    630e:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    6312:	68c2      	ldr	r2, [r0, #12]
    6314:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    6316:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    6318:	f383 8811 	msr	BASEPRI, r3
    631c:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    6320:	f7ff fde0 	bl	5ee4 <tx_free>
    6324:	e774      	b.n	6210 <bt_conn_set_state+0x7c>
    6326:	4a06      	ldr	r2, [pc, #24]	; (6340 <bt_conn_set_state+0x1ac>)
    6328:	4b04      	ldr	r3, [pc, #16]	; (633c <bt_conn_set_state+0x1a8>)
		BT_WARN("no valid (%u) state was set", state);
    632a:	480c      	ldr	r0, [pc, #48]	; (635c <bt_conn_set_state+0x1c8>)
    632c:	1ad2      	subs	r2, r2, r3
    632e:	08d2      	lsrs	r2, r2, #3
    6330:	0192      	lsls	r2, r2, #6
    6332:	f042 0202 	orr.w	r2, r2, #2
    6336:	4629      	mov	r1, r5
    6338:	e741      	b.n	61be <bt_conn_set_state+0x2a>
}
    633a:	bd70      	pop	{r4, r5, r6, pc}
    633c:	0001ef2c 	.word	0x0001ef2c
    6340:	0001ef4c 	.word	0x0001ef4c
    6344:	00020a3e 	.word	0x00020a3e
    6348:	0001f474 	.word	0x0001f474
    634c:	00020a34 	.word	0x00020a34
    6350:	20000100 	.word	0x20000100
    6354:	20000294 	.word	0x20000294
    6358:	00020a4f 	.word	0x00020a4f
    635c:	00020a66 	.word	0x00020a66

00006360 <bt_conn_index>:
		index = conn - acl_conns;
    6360:	4b03      	ldr	r3, [pc, #12]	; (6370 <bt_conn_index+0x10>)
    6362:	1ac0      	subs	r0, r0, r3
    6364:	4b03      	ldr	r3, [pc, #12]	; (6374 <bt_conn_index+0x14>)
    6366:	1180      	asrs	r0, r0, #6
    6368:	4358      	muls	r0, r3
}
    636a:	b2c0      	uxtb	r0, r0
    636c:	4770      	bx	lr
    636e:	bf00      	nop
    6370:	20000e48 	.word	0x20000e48
    6374:	aaaaaaab 	.word	0xaaaaaaab

00006378 <bt_conn_create_pdu_timeout>:
{
    6378:	b538      	push	{r3, r4, r5, lr}
    637a:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
    637c:	490c      	ldr	r1, [pc, #48]	; (63b0 <bt_conn_create_pdu_timeout+0x38>)
    637e:	2800      	cmp	r0, #0
    6380:	bf08      	it	eq
    6382:	4608      	moveq	r0, r1
    6384:	f017 fbbc 	bl	1db00 <net_buf_alloc_fixed>
	if (!buf) {
    6388:	4604      	mov	r4, r0
    638a:	b958      	cbnz	r0, 63a4 <bt_conn_create_pdu_timeout+0x2c>
    638c:	4909      	ldr	r1, [pc, #36]	; (63b4 <bt_conn_create_pdu_timeout+0x3c>)
    638e:	4b0a      	ldr	r3, [pc, #40]	; (63b8 <bt_conn_create_pdu_timeout+0x40>)
		BT_WARN("Unable to allocate buffer within timeout");
    6390:	480a      	ldr	r0, [pc, #40]	; (63bc <bt_conn_create_pdu_timeout+0x44>)
    6392:	1ac9      	subs	r1, r1, r3
    6394:	08c9      	lsrs	r1, r1, #3
    6396:	0189      	lsls	r1, r1, #6
    6398:	f041 0102 	orr.w	r1, r1, #2
    639c:	f013 f851 	bl	19442 <log_0>
}
    63a0:	4620      	mov	r0, r4
    63a2:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_reserve(&buf->b, reserve);
    63a4:	1d29      	adds	r1, r5, #4
    63a6:	3008      	adds	r0, #8
    63a8:	f017 fbcf 	bl	1db4a <net_buf_simple_reserve>
	return buf;
    63ac:	e7f8      	b.n	63a0 <bt_conn_create_pdu_timeout+0x28>
    63ae:	bf00      	nop
    63b0:	20000c10 	.word	0x20000c10
    63b4:	0001ef4c 	.word	0x0001ef4c
    63b8:	0001ef2c 	.word	0x0001ef2c
    63bc:	00020a82 	.word	0x00020a82

000063c0 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
    63c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    63c2:	f3bf 8f5b 	dmb	ish
    63c6:	6842      	ldr	r2, [r0, #4]
    63c8:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    63cc:	0592      	lsls	r2, r2, #22
{
    63ce:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    63d0:	f100 0304 	add.w	r3, r0, #4
    63d4:	d519      	bpl.n	640a <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
    63d6:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    63da:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
    63de:	4291      	cmp	r1, r2
    63e0:	d813      	bhi.n	640a <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
    63e2:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
    63e6:	4291      	cmp	r1, r2
    63e8:	d30f      	bcc.n	640a <notify_le_param_updated+0x4a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
    63ea:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
    63ee:	4291      	cmp	r1, r2
    63f0:	d10b      	bne.n	640a <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    63f2:	f3bf 8f5b 	dmb	ish
    63f6:	e853 2f00 	ldrex	r2, [r3]
    63fa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    63fe:	e843 2100 	strex	r1, r2, [r3]
    6402:	2900      	cmp	r1, #0
    6404:	d1f7      	bne.n	63f6 <notify_le_param_updated+0x36>
    6406:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    640a:	4b10      	ldr	r3, [pc, #64]	; (644c <notify_le_param_updated+0x8c>)
    640c:	681d      	ldr	r5, [r3, #0]
    640e:	b925      	cbnz	r5, 641a <notify_le_param_updated+0x5a>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    6410:	4d0f      	ldr	r5, [pc, #60]	; (6450 <notify_le_param_updated+0x90>)
    6412:	4f10      	ldr	r7, [pc, #64]	; (6454 <notify_le_param_updated+0x94>)
    6414:	42bd      	cmp	r5, r7
    6416:	d30c      	bcc.n	6432 <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
    6418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
    641a:	68ee      	ldr	r6, [r5, #12]
    641c:	b13e      	cbz	r6, 642e <notify_le_param_updated+0x6e>
			cb->le_param_updated(conn, conn->le.interval,
    641e:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    6422:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    6426:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    642a:	4620      	mov	r0, r4
    642c:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    642e:	692d      	ldr	r5, [r5, #16]
    6430:	e7ed      	b.n	640e <notify_le_param_updated+0x4e>
		if (cb->le_param_updated) {
    6432:	68ee      	ldr	r6, [r5, #12]
    6434:	b13e      	cbz	r6, 6446 <notify_le_param_updated+0x86>
			cb->le_param_updated(conn, conn->le.interval,
    6436:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    643a:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    643e:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    6442:	4620      	mov	r0, r4
    6444:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    6446:	3514      	adds	r5, #20
    6448:	e7e4      	b.n	6414 <notify_le_param_updated+0x54>
    644a:	bf00      	nop
    644c:	20001998 	.word	0x20001998
    6450:	0001edb8 	.word	0x0001edb8
    6454:	0001edb8 	.word	0x0001edb8

00006458 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
    6458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    645c:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
    645e:	4608      	mov	r0, r1
{
    6460:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
    6462:	f014 fa1d 	bl	1a8a0 <bt_le_conn_params_valid>
    6466:	4605      	mov	r5, r0
    6468:	b918      	cbnz	r0, 6472 <le_param_req+0x1a>
		return false;
    646a:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
    646c:	4628      	mov	r0, r5
    646e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    6472:	4b13      	ldr	r3, [pc, #76]	; (64c0 <le_param_req+0x68>)
    6474:	681e      	ldr	r6, [r3, #0]
    6476:	b946      	cbnz	r6, 648a <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    6478:	4e12      	ldr	r6, [pc, #72]	; (64c4 <le_param_req+0x6c>)
    647a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 64c8 <le_param_req+0x70>
    647e:	4546      	cmp	r6, r8
    6480:	d2f4      	bcs.n	646c <le_param_req+0x14>
		if (!cb->le_param_req) {
    6482:	68b3      	ldr	r3, [r6, #8]
    6484:	b983      	cbnz	r3, 64a8 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    6486:	3614      	adds	r6, #20
    6488:	e7f9      	b.n	647e <le_param_req+0x26>
		if (!cb->le_param_req) {
    648a:	68b3      	ldr	r3, [r6, #8]
    648c:	b90b      	cbnz	r3, 6492 <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
    648e:	6936      	ldr	r6, [r6, #16]
    6490:	e7f1      	b.n	6476 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
    6492:	4621      	mov	r1, r4
    6494:	4638      	mov	r0, r7
    6496:	4798      	blx	r3
    6498:	2800      	cmp	r0, #0
    649a:	d0e6      	beq.n	646a <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
    649c:	4620      	mov	r0, r4
    649e:	f014 f9ff 	bl	1a8a0 <bt_le_conn_params_valid>
    64a2:	2800      	cmp	r0, #0
    64a4:	d1f3      	bne.n	648e <le_param_req+0x36>
    64a6:	e7e0      	b.n	646a <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
    64a8:	4621      	mov	r1, r4
    64aa:	4638      	mov	r0, r7
    64ac:	4798      	blx	r3
    64ae:	2800      	cmp	r0, #0
    64b0:	d0db      	beq.n	646a <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
    64b2:	4620      	mov	r0, r4
    64b4:	f014 f9f4 	bl	1a8a0 <bt_le_conn_params_valid>
    64b8:	2800      	cmp	r0, #0
    64ba:	d1e4      	bne.n	6486 <le_param_req+0x2e>
    64bc:	e7d5      	b.n	646a <le_param_req+0x12>
    64be:	bf00      	nop
    64c0:	20001998 	.word	0x20001998
    64c4:	0001edb8 	.word	0x0001edb8
    64c8:	0001edb8 	.word	0x0001edb8

000064cc <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    64cc:	b570      	push	{r4, r5, r6, lr}
    64ce:	4606      	mov	r6, r0
    64d0:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
    64d2:	4809      	ldr	r0, [pc, #36]	; (64f8 <bt_conn_add_le+0x2c>)
    64d4:	2101      	movs	r1, #1
    64d6:	f7ff fd37 	bl	5f48 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
    64da:	4604      	mov	r4, r0
    64dc:	b150      	cbz	r0, 64f4 <bt_conn_add_le+0x28>
		return NULL;
	}

	conn->id = id;
    64de:	7206      	strb	r6, [r0, #8]
    64e0:	2207      	movs	r2, #7
    64e2:	4629      	mov	r1, r5
    64e4:	3088      	adds	r0, #136	; 0x88
    64e6:	f013 feca 	bl	1a27e <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    64ea:	2301      	movs	r3, #1
    64ec:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    64ee:	4b03      	ldr	r3, [pc, #12]	; (64fc <bt_conn_add_le+0x30>)
    64f0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    64f4:	4620      	mov	r0, r4
    64f6:	bd70      	pop	{r4, r5, r6, pc}
    64f8:	20000e48 	.word	0x20000e48
    64fc:	00280018 	.word	0x00280018

00006500 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
    6500:	b570      	push	{r4, r5, r6, lr}
    6502:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    6504:	480c      	ldr	r0, [pc, #48]	; (6538 <bt_conn_lookup_addr_le+0x38>)
{
    6506:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    6508:	f014 face 	bl	1aaa8 <bt_conn_ref>

		if (!conn) {
    650c:	4604      	mov	r4, r0
    650e:	b128      	cbz	r0, 651c <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    6510:	7883      	ldrb	r3, [r0, #2]
    6512:	2b01      	cmp	r3, #1
    6514:	d004      	beq.n	6520 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
    6516:	f014 fae2 	bl	1aade <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    651a:	2400      	movs	r4, #0
}
    651c:	4620      	mov	r0, r4
    651e:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
    6520:	4629      	mov	r1, r5
    6522:	4632      	mov	r2, r6
    6524:	f014 fb46 	bl	1abb4 <bt_conn_is_peer_addr_le>
    6528:	4605      	mov	r5, r0
    652a:	2800      	cmp	r0, #0
    652c:	d1f6      	bne.n	651c <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
    652e:	4620      	mov	r0, r4
    6530:	f014 fad5 	bl	1aade <bt_conn_unref>
	return NULL;
    6534:	462c      	mov	r4, r5
			continue;
    6536:	e7f1      	b.n	651c <bt_conn_lookup_addr_le+0x1c>
    6538:	20000e48 	.word	0x20000e48

0000653c <bt_conn_exists_le>:
{
    653c:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
    653e:	f7ff ffdf 	bl	6500 <bt_conn_lookup_addr_le>
	if (conn) {
    6542:	4604      	mov	r4, r0
    6544:	b1a0      	cbz	r0, 6570 <bt_conn_exists_le+0x34>
    6546:	4b0b      	ldr	r3, [pc, #44]	; (6574 <bt_conn_exists_le+0x38>)
    6548:	4a0b      	ldr	r2, [pc, #44]	; (6578 <bt_conn_exists_le+0x3c>)
    654a:	1ad2      	subs	r2, r2, r3
		BT_WARN("Found valid connection in %s state",
    654c:	7a83      	ldrb	r3, [r0, #10]
    654e:	480b      	ldr	r0, [pc, #44]	; (657c <bt_conn_exists_le+0x40>)
    6550:	2b08      	cmp	r3, #8
    6552:	bf96      	itet	ls
    6554:	490a      	ldrls	r1, [pc, #40]	; (6580 <bt_conn_exists_le+0x44>)
    6556:	490b      	ldrhi	r1, [pc, #44]	; (6584 <bt_conn_exists_le+0x48>)
    6558:	f851 1023 	ldrls.w	r1, [r1, r3, lsl #2]
    655c:	08d2      	lsrs	r2, r2, #3
    655e:	0192      	lsls	r2, r2, #6
    6560:	f042 0202 	orr.w	r2, r2, #2
    6564:	f012 ff7a 	bl	1945c <log_1>
		bt_conn_unref(conn);
    6568:	4620      	mov	r0, r4
    656a:	f014 fab8 	bl	1aade <bt_conn_unref>
		return true;
    656e:	2001      	movs	r0, #1
}
    6570:	bd10      	pop	{r4, pc}
    6572:	bf00      	nop
    6574:	0001ef2c 	.word	0x0001ef2c
    6578:	0001ef4c 	.word	0x0001ef4c
    657c:	00020aab 	.word	0x00020aab
    6580:	0001f474 	.word	0x0001f474
    6584:	00020a34 	.word	0x00020a34

00006588 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    6588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    658a:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    658c:	480e      	ldr	r0, [pc, #56]	; (65c8 <bt_conn_lookup_state_le+0x40>)
{
    658e:	460e      	mov	r6, r1
    6590:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    6592:	f014 fa89 	bl	1aaa8 <bt_conn_ref>

		if (!conn) {
    6596:	4604      	mov	r4, r0
    6598:	b1a0      	cbz	r0, 65c4 <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    659a:	7883      	ldrb	r3, [r0, #2]
    659c:	2b01      	cmp	r3, #1
    659e:	d003      	beq.n	65a8 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
    65a0:	f014 fa9d 	bl	1aade <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    65a4:	2400      	movs	r4, #0
			continue;
    65a6:	e00d      	b.n	65c4 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
    65a8:	b136      	cbz	r6, 65b8 <bt_conn_lookup_state_le+0x30>
    65aa:	4632      	mov	r2, r6
    65ac:	4629      	mov	r1, r5
    65ae:	f014 fb01 	bl	1abb4 <bt_conn_is_peer_addr_le>
    65b2:	b908      	cbnz	r0, 65b8 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
    65b4:	4620      	mov	r0, r4
    65b6:	e7f3      	b.n	65a0 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
    65b8:	7aa3      	ldrb	r3, [r4, #10]
    65ba:	42bb      	cmp	r3, r7
    65bc:	d1fa      	bne.n	65b4 <bt_conn_lookup_state_le+0x2c>
    65be:	7a23      	ldrb	r3, [r4, #8]
    65c0:	42ab      	cmp	r3, r5
    65c2:	d1f7      	bne.n	65b4 <bt_conn_lookup_state_le+0x2c>
}
    65c4:	4620      	mov	r0, r4
    65c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    65c8:	20000e48 	.word	0x20000e48

000065cc <send_conn_le_param_update>:
{
    65cc:	b538      	push	{r3, r4, r5, lr}
    65ce:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    65d0:	4608      	mov	r0, r1
{
    65d2:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    65d4:	f014 f964 	bl	1a8a0 <bt_le_conn_params_valid>
    65d8:	b348      	cbz	r0, 662e <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    65da:	4b16      	ldr	r3, [pc, #88]	; (6634 <send_conn_le_param_update+0x68>)
    65dc:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
    65e0:	0799      	lsls	r1, r3, #30
    65e2:	d407      	bmi.n	65f4 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
    65e4:	78e3      	ldrb	r3, [r4, #3]
    65e6:	b183      	cbz	r3, 660a <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
    65e8:	4629      	mov	r1, r5
    65ea:	4620      	mov	r0, r4
}
    65ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    65f0:	f000 ba1e 	b.w	6a30 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    65f4:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    65f8:	079a      	lsls	r2, r3, #30
    65fa:	d5f3      	bpl.n	65e4 <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    65fc:	f3bf 8f5b 	dmb	ish
    6600:	6863      	ldr	r3, [r4, #4]
    6602:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    6606:	055b      	lsls	r3, r3, #21
    6608:	d4ec      	bmi.n	65e4 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    660a:	4629      	mov	r1, r5
    660c:	4620      	mov	r0, r4
    660e:	f014 faf1 	bl	1abf4 <bt_conn_le_conn_update>
		if (rc == 0) {
    6612:	b958      	cbnz	r0, 662c <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
    6614:	882b      	ldrh	r3, [r5, #0]
    6616:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
    661a:	886b      	ldrh	r3, [r5, #2]
    661c:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
    6620:	88ab      	ldrh	r3, [r5, #4]
    6622:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    6626:	88eb      	ldrh	r3, [r5, #6]
    6628:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    662c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    662e:	f06f 0015 	mvn.w	r0, #21
    6632:	e7fb      	b.n	662c <send_conn_le_param_update+0x60>
    6634:	20000000 	.word	0x20000000

00006638 <deferred_work>:
{
    6638:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    663a:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
    663e:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
    6640:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    6644:	b9fb      	cbnz	r3, 6686 <deferred_work+0x4e>
		bt_l2cap_disconnected(conn);
    6646:	4628      	mov	r0, r5
    6648:	f014 fb36 	bl	1acb8 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    664c:	4b2c      	ldr	r3, [pc, #176]	; (6700 <deferred_work+0xc8>)
    664e:	681e      	ldr	r6, [r3, #0]
    6650:	b94e      	cbnz	r6, 6666 <deferred_work+0x2e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    6652:	4e2c      	ldr	r6, [pc, #176]	; (6704 <deferred_work+0xcc>)
    6654:	4f2c      	ldr	r7, [pc, #176]	; (6708 <deferred_work+0xd0>)
    6656:	42be      	cmp	r6, r7
    6658:	d30d      	bcc.n	6676 <deferred_work+0x3e>
		bt_conn_unref(conn);
    665a:	4628      	mov	r0, r5
}
    665c:	b003      	add	sp, #12
    665e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    6662:	f014 ba3c 	b.w	1aade <bt_conn_unref>
		if (cb->disconnected) {
    6666:	6873      	ldr	r3, [r6, #4]
    6668:	b11b      	cbz	r3, 6672 <deferred_work+0x3a>
			cb->disconnected(conn, conn->err);
    666a:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
    666e:	4628      	mov	r0, r5
    6670:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    6672:	6936      	ldr	r6, [r6, #16]
    6674:	e7ec      	b.n	6650 <deferred_work+0x18>
		if (cb->disconnected) {
    6676:	6873      	ldr	r3, [r6, #4]
    6678:	b11b      	cbz	r3, 6682 <deferred_work+0x4a>
			cb->disconnected(conn, conn->err);
    667a:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
    667e:	4628      	mov	r0, r5
    6680:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    6682:	3614      	adds	r6, #20
    6684:	e7e7      	b.n	6656 <deferred_work+0x1e>
	if (conn->type != BT_CONN_TYPE_LE) {
    6686:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    668a:	2b01      	cmp	r3, #1
    668c:	d12f      	bne.n	66ee <deferred_work+0xb6>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    668e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
    6692:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
    6696:	e856 3f00 	ldrex	r3, [r6]
    669a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    669e:	e846 2100 	strex	r1, r2, [r6]
    66a2:	2900      	cmp	r1, #0
    66a4:	d1f7      	bne.n	6696 <deferred_work+0x5e>
    66a6:	f3bf 8f5b 	dmb	ish
    66aa:	059b      	lsls	r3, r3, #22
    66ac:	d521      	bpl.n	66f2 <deferred_work+0xba>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    66ae:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    66b2:	f8ad 3000 	strh.w	r3, [sp]
    66b6:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
    66ba:	f8ad 3002 	strh.w	r3, [sp, #2]
    66be:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    66c2:	f8ad 3004 	strh.w	r3, [sp, #4]
    66c6:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    66ca:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
    66ce:	4669      	mov	r1, sp
    66d0:	4628      	mov	r0, r5
    66d2:	f7ff ff7b 	bl	65cc <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    66d6:	f3bf 8f5b 	dmb	ish
    66da:	e856 3f00 	ldrex	r3, [r6]
    66de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    66e2:	e846 3200 	strex	r2, r3, [r6]
    66e6:	2a00      	cmp	r2, #0
    66e8:	d1f7      	bne.n	66da <deferred_work+0xa2>
    66ea:	f3bf 8f5b 	dmb	ish
}
    66ee:	b003      	add	sp, #12
    66f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		param = BT_LE_CONN_PARAM(
    66f2:	4a06      	ldr	r2, [pc, #24]	; (670c <deferred_work+0xd4>)
    66f4:	6810      	ldr	r0, [r2, #0]
    66f6:	6851      	ldr	r1, [r2, #4]
    66f8:	466b      	mov	r3, sp
    66fa:	c303      	stmia	r3!, {r0, r1}
    66fc:	e7e7      	b.n	66ce <deferred_work+0x96>
    66fe:	bf00      	nop
    6700:	20001998 	.word	0x20001998
    6704:	0001edb8 	.word	0x0001edb8
    6708:	0001edb8 	.word	0x0001edb8
    670c:	0001f218 	.word	0x0001f218

00006710 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
    6710:	b570      	push	{r4, r5, r6, lr}
    6712:	4d0b      	ldr	r5, [pc, #44]	; (6740 <bt_conn_init+0x30>)
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    6714:	4e0b      	ldr	r6, [pc, #44]	; (6744 <bt_conn_init+0x34>)
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    6716:	2400      	movs	r4, #0
		k_fifo_put(&free_tx, &conn_tx[i]);
    6718:	4629      	mov	r1, r5
    671a:	4630      	mov	r0, r6
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    671c:	3401      	adds	r4, #1
		k_fifo_put(&free_tx, &conn_tx[i]);
    671e:	f017 fe96 	bl	1e44e <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    6722:	2c08      	cmp	r4, #8
    6724:	f105 0510 	add.w	r5, r5, #16
    6728:	d1f6      	bne.n	6718 <bt_conn_init+0x8>
	}

	bt_att_init();
    672a:	f014 fec5 	bl	1b4b8 <bt_att_init>

	err = bt_smp_init();
    672e:	f015 fa1b 	bl	1bb68 <bt_smp_init>
	if (err) {
    6732:	4604      	mov	r4, r0
    6734:	b908      	cbnz	r0, 673a <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
    6736:	f014 fb11 	bl	1ad5c <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
    673a:	4620      	mov	r0, r4
    673c:	bd70      	pop	{r4, r5, r6, pc}
    673e:	bf00      	nop
    6740:	2000199c 	.word	0x2000199c
    6744:	20000be0 	.word	0x20000be0

00006748 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    6748:	4a0b      	ldr	r2, [pc, #44]	; (6778 <l2cap_accept+0x30>)
{
    674a:	b508      	push	{r3, lr}
    674c:	4603      	mov	r3, r0
		if (l2cap->chan.chan.conn) {
    674e:	6810      	ldr	r0, [r2, #0]
    6750:	b918      	cbnz	r0, 675a <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    6752:	4b0a      	ldr	r3, [pc, #40]	; (677c <l2cap_accept+0x34>)
    6754:	6053      	str	r3, [r2, #4]
		*chan = &l2cap->chan.chan;
    6756:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    6758:	bd08      	pop	{r3, pc}
    675a:	4909      	ldr	r1, [pc, #36]	; (6780 <l2cap_accept+0x38>)
    675c:	4a09      	ldr	r2, [pc, #36]	; (6784 <l2cap_accept+0x3c>)
	BT_ERR("No available L2CAP context for conn %p", conn);
    675e:	480a      	ldr	r0, [pc, #40]	; (6788 <l2cap_accept+0x40>)
    6760:	1a52      	subs	r2, r2, r1
    6762:	08d2      	lsrs	r2, r2, #3
    6764:	0192      	lsls	r2, r2, #6
    6766:	f042 0201 	orr.w	r2, r2, #1
    676a:	4619      	mov	r1, r3
    676c:	f012 fe76 	bl	1945c <log_1>
	return -ENOMEM;
    6770:	f06f 000b 	mvn.w	r0, #11
    6774:	e7f0      	b.n	6758 <l2cap_accept+0x10>
    6776:	bf00      	nop
    6778:	20000f08 	.word	0x20000f08
    677c:	0001f4b8 	.word	0x0001f4b8
    6780:	0001ef2c 	.word	0x0001ef2c
    6784:	0001f034 	.word	0x0001f034
    6788:	00020b2b 	.word	0x00020b2b

0000678c <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    678c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    678e:	4605      	mov	r5, r0
    6790:	460f      	mov	r7, r1
    6792:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
    6794:	2300      	movs	r3, #0
    6796:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    679a:	2104      	movs	r1, #4
    679c:	2000      	movs	r0, #0
    679e:	f7ff fdeb 	bl	6378 <bt_conn_create_pdu_timeout>
	if (!buf) {
    67a2:	4604      	mov	r4, r0
    67a4:	b960      	cbnz	r0, 67c0 <l2cap_create_le_sig_pdu.constprop.0+0x34>
    67a6:	4a0a      	ldr	r2, [pc, #40]	; (67d0 <l2cap_create_le_sig_pdu.constprop.0+0x44>)
    67a8:	4b0a      	ldr	r3, [pc, #40]	; (67d4 <l2cap_create_le_sig_pdu.constprop.0+0x48>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
    67aa:	480b      	ldr	r0, [pc, #44]	; (67d8 <l2cap_create_le_sig_pdu.constprop.0+0x4c>)
    67ac:	1ad2      	subs	r2, r2, r3
    67ae:	08d2      	lsrs	r2, r2, #3
    67b0:	0192      	lsls	r2, r2, #6
    67b2:	f042 0201 	orr.w	r2, r2, #1
    67b6:	4629      	mov	r1, r5
    67b8:	f012 fe50 	bl	1945c <log_1>
}
    67bc:	4620      	mov	r0, r4
    67be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
    67c0:	2104      	movs	r1, #4
    67c2:	3008      	adds	r0, #8
    67c4:	f017 fa21 	bl	1dc0a <net_buf_simple_add>
	hdr->code = code;
    67c8:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
    67ca:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    67cc:	8046      	strh	r6, [r0, #2]
	return buf;
    67ce:	e7f5      	b.n	67bc <l2cap_create_le_sig_pdu.constprop.0+0x30>
    67d0:	0001f034 	.word	0x0001f034
    67d4:	0001ef2c 	.word	0x0001ef2c
    67d8:	00020b52 	.word	0x00020b52

000067dc <l2cap_rtx_timeout>:
{
    67dc:	b538      	push	{r3, r4, r5, lr}
    67de:	4a0b      	ldr	r2, [pc, #44]	; (680c <l2cap_rtx_timeout+0x30>)
    67e0:	4b0b      	ldr	r3, [pc, #44]	; (6810 <l2cap_rtx_timeout+0x34>)
	struct bt_conn *conn = chan->chan.conn;
    67e2:	4604      	mov	r4, r0
    67e4:	1ad2      	subs	r2, r2, r3
    67e6:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
    67ea:	480a      	ldr	r0, [pc, #40]	; (6814 <l2cap_rtx_timeout+0x38>)
    67ec:	08d2      	lsrs	r2, r2, #3
    67ee:	0192      	lsls	r2, r2, #6
    67f0:	4621      	mov	r1, r4
    67f2:	f042 0201 	orr.w	r2, r2, #1
    67f6:	f012 fe31 	bl	1945c <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
    67fa:	4628      	mov	r0, r5
    67fc:	4621      	mov	r1, r4
    67fe:	f014 fa25 	bl	1ac4c <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    6802:	4620      	mov	r0, r4
}
    6804:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    6808:	f014 ba41 	b.w	1ac8e <bt_l2cap_chan_del>
    680c:	0001f034 	.word	0x0001f034
    6810:	0001ef2c 	.word	0x0001ef2c
    6814:	00020b7a 	.word	0x00020b7a

00006818 <bt_l2cap_connected>:
{
    6818:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    681c:	4e29      	ldr	r6, [pc, #164]	; (68c4 <bt_l2cap_connected+0xac>)
    681e:	4f2a      	ldr	r7, [pc, #168]	; (68c8 <bt_l2cap_connected+0xb0>)
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
    6820:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 68cc <bt_l2cap_connected+0xb4>
{
    6824:	4604      	mov	r4, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    6826:	42be      	cmp	r6, r7
    6828:	d302      	bcc.n	6830 <bt_l2cap_connected+0x18>
}
    682a:	b003      	add	sp, #12
    682c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    6830:	6873      	ldr	r3, [r6, #4]
    6832:	a901      	add	r1, sp, #4
    6834:	4620      	mov	r0, r4
    6836:	4798      	blx	r3
    6838:	2800      	cmp	r0, #0
    683a:	db3d      	blt.n	68b8 <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
    683c:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    683e:	8833      	ldrh	r3, [r6, #0]
    6840:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
    6844:	f8a5 3080 	strh.w	r3, [r5, #128]	; 0x80
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
    6848:	4641      	mov	r1, r8
    684a:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    684e:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
    6852:	f017 fef3 	bl	1e63c <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    6856:	f3bf 8f5b 	dmb	ish
    685a:	f105 0368 	add.w	r3, r5, #104	; 0x68
    685e:	2200      	movs	r2, #0
    6860:	e853 1f00 	ldrex	r1, [r3]
    6864:	e843 2000 	strex	r0, r2, [r3]
    6868:	2800      	cmp	r0, #0
    686a:	d1f9      	bne.n	6860 <bt_l2cap_connected+0x48>
    686c:	f3bf 8f5b 	dmb	ish
	parent->next = child;
    6870:	60aa      	str	r2, [r5, #8]
	return list->tail;
    6872:	6d62      	ldr	r2, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
    6874:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode)
    6878:	bb02      	cbnz	r2, 68bc <bt_l2cap_connected+0xa4>
	list->head = node;
    687a:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (chan->ops->connected) {
    687e:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    6880:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
    6882:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    6884:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    6888:	681b      	ldr	r3, [r3, #0]
    688a:	b103      	cbz	r3, 688e <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
    688c:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    688e:	9b01      	ldr	r3, [sp, #4]
    6890:	f3bf 8f5b 	dmb	ish
    6894:	3368      	adds	r3, #104	; 0x68
    6896:	e853 2f00 	ldrex	r2, [r3]
    689a:	f042 0201 	orr.w	r2, r2, #1
    689e:	e843 2100 	strex	r1, r2, [r3]
    68a2:	2900      	cmp	r1, #0
    68a4:	d1f7      	bne.n	6896 <bt_l2cap_connected+0x7e>
    68a6:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    68aa:	9801      	ldr	r0, [sp, #4]
    68ac:	6843      	ldr	r3, [r0, #4]
    68ae:	699b      	ldr	r3, [r3, #24]
    68b0:	b113      	cbz	r3, 68b8 <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
    68b2:	f100 0168 	add.w	r1, r0, #104	; 0x68
    68b6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    68b8:	360c      	adds	r6, #12
    68ba:	e7b4      	b.n	6826 <bt_l2cap_connected+0xe>
	parent->next = child;
    68bc:	6013      	str	r3, [r2, #0]
	list->tail = node;
    68be:	6563      	str	r3, [r4, #84]	; 0x54
}
    68c0:	e7dd      	b.n	687e <bt_l2cap_connected+0x66>
    68c2:	bf00      	nop
    68c4:	0001ed94 	.word	0x0001ed94
    68c8:	0001edb8 	.word	0x0001edb8
    68cc:	000067dd 	.word	0x000067dd

000068d0 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
    68d0:	898b      	ldrh	r3, [r1, #12]
    68d2:	2b03      	cmp	r3, #3
{
    68d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    68d6:	4606      	mov	r6, r0
    68d8:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    68da:	d80a      	bhi.n	68f2 <l2cap_recv+0x22>
    68dc:	4931      	ldr	r1, [pc, #196]	; (69a4 <l2cap_recv+0xd4>)
    68de:	4b32      	ldr	r3, [pc, #200]	; (69a8 <l2cap_recv+0xd8>)
		BT_ERR("Too small L2CAP signaling PDU");
    68e0:	4832      	ldr	r0, [pc, #200]	; (69ac <l2cap_recv+0xdc>)
    68e2:	1ac9      	subs	r1, r1, r3
    68e4:	08c9      	lsrs	r1, r1, #3
    68e6:	0189      	lsls	r1, r1, #6
    68e8:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid ident value in L2CAP PDU");
    68ec:	f012 fda9 	bl	19442 <log_0>
		return 0;
    68f0:	e013      	b.n	691a <l2cap_recv+0x4a>
	return net_buf_simple_pull_mem(&buf->b, len);
    68f2:	2104      	movs	r1, #4
    68f4:	f105 0008 	add.w	r0, r5, #8
    68f8:	f017 f9e8 	bl	1dccc <net_buf_simple_pull_mem>
	if (buf->len != len) {
    68fc:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    68fe:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
    6900:	428a      	cmp	r2, r1
    6902:	4604      	mov	r4, r0
    6904:	d00c      	beq.n	6920 <l2cap_recv+0x50>
    6906:	4828      	ldr	r0, [pc, #160]	; (69a8 <l2cap_recv+0xd8>)
    6908:	4b26      	ldr	r3, [pc, #152]	; (69a4 <l2cap_recv+0xd4>)
    690a:	1a1b      	subs	r3, r3, r0
    690c:	08db      	lsrs	r3, r3, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    690e:	019b      	lsls	r3, r3, #6
    6910:	4827      	ldr	r0, [pc, #156]	; (69b0 <l2cap_recv+0xe0>)
    6912:	f043 0301 	orr.w	r3, r3, #1
    6916:	f012 fdb5 	bl	19484 <log_2>
}
    691a:	2000      	movs	r0, #0
    691c:	b002      	add	sp, #8
    691e:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
    6920:	7843      	ldrb	r3, [r0, #1]
    6922:	b943      	cbnz	r3, 6936 <l2cap_recv+0x66>
    6924:	491f      	ldr	r1, [pc, #124]	; (69a4 <l2cap_recv+0xd4>)
    6926:	4b20      	ldr	r3, [pc, #128]	; (69a8 <l2cap_recv+0xd8>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    6928:	4822      	ldr	r0, [pc, #136]	; (69b4 <l2cap_recv+0xe4>)
    692a:	1ac9      	subs	r1, r1, r3
    692c:	08c9      	lsrs	r1, r1, #3
    692e:	0189      	lsls	r1, r1, #6
    6930:	f041 0101 	orr.w	r1, r1, #1
    6934:	e7da      	b.n	68ec <l2cap_recv+0x1c>
	switch (hdr->code) {
    6936:	7801      	ldrb	r1, [r0, #0]
    6938:	2901      	cmp	r1, #1
    693a:	d0ee      	beq.n	691a <l2cap_recv+0x4a>
    693c:	2913      	cmp	r1, #19
    693e:	d10a      	bne.n	6956 <l2cap_recv+0x86>
	if (buf->len < sizeof(*rsp)) {
    6940:	2a01      	cmp	r2, #1
    6942:	d8ea      	bhi.n	691a <l2cap_recv+0x4a>
    6944:	4917      	ldr	r1, [pc, #92]	; (69a4 <l2cap_recv+0xd4>)
    6946:	4b18      	ldr	r3, [pc, #96]	; (69a8 <l2cap_recv+0xd8>)
		BT_ERR("Too small LE conn param rsp");
    6948:	481b      	ldr	r0, [pc, #108]	; (69b8 <l2cap_recv+0xe8>)
    694a:	1ac9      	subs	r1, r1, r3
    694c:	08c9      	lsrs	r1, r1, #3
    694e:	0189      	lsls	r1, r1, #6
    6950:	f041 0101 	orr.w	r1, r1, #1
    6954:	e7ca      	b.n	68ec <l2cap_recv+0x1c>
    6956:	4b14      	ldr	r3, [pc, #80]	; (69a8 <l2cap_recv+0xd8>)
    6958:	4a12      	ldr	r2, [pc, #72]	; (69a4 <l2cap_recv+0xd4>)
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    695a:	4818      	ldr	r0, [pc, #96]	; (69bc <l2cap_recv+0xec>)
    695c:	1ad2      	subs	r2, r2, r3
    695e:	08d2      	lsrs	r2, r2, #3
    6960:	0192      	lsls	r2, r2, #6
    6962:	f042 0202 	orr.w	r2, r2, #2
    6966:	f012 fd79 	bl	1945c <log_1>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    696a:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
    696c:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    696e:	2202      	movs	r2, #2
    6970:	2001      	movs	r0, #1
    6972:	f7ff ff0b 	bl	678c <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    6976:	4604      	mov	r4, r0
    6978:	2800      	cmp	r0, #0
    697a:	d0ce      	beq.n	691a <l2cap_recv+0x4a>
	return net_buf_simple_add(&buf->b, len);
    697c:	2102      	movs	r1, #2
    697e:	3008      	adds	r0, #8
    6980:	f017 f943 	bl	1dc0a <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    6984:	2300      	movs	r3, #0
    6986:	7003      	strb	r3, [r0, #0]
    6988:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    698a:	4622      	mov	r2, r4
    698c:	9300      	str	r3, [sp, #0]
    698e:	2105      	movs	r1, #5
    6990:	4628      	mov	r0, r5
    6992:	f014 f9aa 	bl	1acea <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
    6996:	2800      	cmp	r0, #0
    6998:	d0bf      	beq.n	691a <l2cap_recv+0x4a>
		net_buf_unref(buf);
    699a:	4620      	mov	r0, r4
    699c:	f00e ff04 	bl	157a8 <net_buf_unref>
    69a0:	e7bb      	b.n	691a <l2cap_recv+0x4a>
    69a2:	bf00      	nop
    69a4:	0001f034 	.word	0x0001f034
    69a8:	0001ef2c 	.word	0x0001ef2c
    69ac:	00020b8a 	.word	0x00020b8a
    69b0:	00020ba8 	.word	0x00020ba8
    69b4:	00020bc9 	.word	0x00020bc9
    69b8:	00020bea 	.word	0x00020bea
    69bc:	00020c06 	.word	0x00020c06

000069c0 <bt_l2cap_recv>:
{
    69c0:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
    69c2:	898b      	ldrh	r3, [r1, #12]
    69c4:	2b03      	cmp	r3, #3
{
    69c6:	4605      	mov	r5, r0
    69c8:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    69ca:	d80e      	bhi.n	69ea <bt_l2cap_recv+0x2a>
    69cc:	4914      	ldr	r1, [pc, #80]	; (6a20 <bt_l2cap_recv+0x60>)
    69ce:	4b15      	ldr	r3, [pc, #84]	; (6a24 <bt_l2cap_recv+0x64>)
		BT_ERR("Too small L2CAP PDU received");
    69d0:	4815      	ldr	r0, [pc, #84]	; (6a28 <bt_l2cap_recv+0x68>)
    69d2:	1ac9      	subs	r1, r1, r3
    69d4:	08c9      	lsrs	r1, r1, #3
    69d6:	0189      	lsls	r1, r1, #6
    69d8:	f041 0101 	orr.w	r1, r1, #1
    69dc:	f012 fd31 	bl	19442 <log_0>
	net_buf_unref(buf);
    69e0:	4620      	mov	r0, r4
}
    69e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
    69e6:	f00e bedf 	b.w	157a8 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
    69ea:	2104      	movs	r1, #4
    69ec:	f104 0008 	add.w	r0, r4, #8
    69f0:	f017 f96c 	bl	1dccc <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    69f4:	8841      	ldrh	r1, [r0, #2]
    69f6:	4628      	mov	r0, r5
    69f8:	f014 f9a0 	bl	1ad3c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    69fc:	b950      	cbnz	r0, 6a14 <bt_l2cap_recv+0x54>
    69fe:	4b09      	ldr	r3, [pc, #36]	; (6a24 <bt_l2cap_recv+0x64>)
    6a00:	4a07      	ldr	r2, [pc, #28]	; (6a20 <bt_l2cap_recv+0x60>)
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
    6a02:	480a      	ldr	r0, [pc, #40]	; (6a2c <bt_l2cap_recv+0x6c>)
    6a04:	1ad2      	subs	r2, r2, r3
    6a06:	08d2      	lsrs	r2, r2, #3
    6a08:	0192      	lsls	r2, r2, #6
    6a0a:	f042 0202 	orr.w	r2, r2, #2
    6a0e:	f012 fd25 	bl	1945c <log_1>
		net_buf_unref(buf);
    6a12:	e7e5      	b.n	69e0 <bt_l2cap_recv+0x20>
	chan->ops->recv(chan, buf);
    6a14:	6843      	ldr	r3, [r0, #4]
    6a16:	4621      	mov	r1, r4
    6a18:	691b      	ldr	r3, [r3, #16]
    6a1a:	4798      	blx	r3
    6a1c:	e7e0      	b.n	69e0 <bt_l2cap_recv+0x20>
    6a1e:	bf00      	nop
    6a20:	0001f034 	.word	0x0001f034
    6a24:	0001ef2c 	.word	0x0001ef2c
    6a28:	00020c24 	.word	0x00020c24
    6a2c:	00020c41 	.word	0x00020c41

00006a30 <bt_l2cap_update_conn_param>:
{
    6a30:	b573      	push	{r0, r1, r4, r5, r6, lr}
    6a32:	460d      	mov	r5, r1
	ident++;
    6a34:	4916      	ldr	r1, [pc, #88]	; (6a90 <bt_l2cap_update_conn_param+0x60>)
    6a36:	780b      	ldrb	r3, [r1, #0]
    6a38:	3301      	adds	r3, #1
	if (!ident) {
    6a3a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
    6a3e:	bf08      	it	eq
    6a40:	2301      	moveq	r3, #1
    6a42:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    6a44:	7809      	ldrb	r1, [r1, #0]
{
    6a46:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    6a48:	2208      	movs	r2, #8
    6a4a:	2012      	movs	r0, #18
    6a4c:	f7ff fe9e 	bl	678c <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    6a50:	4604      	mov	r4, r0
    6a52:	b1d0      	cbz	r0, 6a8a <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
    6a54:	2108      	movs	r1, #8
    6a56:	4408      	add	r0, r1
    6a58:	f017 f8d7 	bl	1dc0a <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    6a5c:	882b      	ldrh	r3, [r5, #0]
    6a5e:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    6a60:	886b      	ldrh	r3, [r5, #2]
    6a62:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    6a64:	88ab      	ldrh	r3, [r5, #4]
    6a66:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    6a68:	88eb      	ldrh	r3, [r5, #6]
    6a6a:	80c3      	strh	r3, [r0, #6]
    6a6c:	2300      	movs	r3, #0
    6a6e:	9300      	str	r3, [sp, #0]
    6a70:	4622      	mov	r2, r4
    6a72:	2105      	movs	r1, #5
    6a74:	4630      	mov	r0, r6
    6a76:	f014 f938 	bl	1acea <bt_l2cap_send_cb>
	if (err) {
    6a7a:	4605      	mov	r5, r0
    6a7c:	b110      	cbz	r0, 6a84 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
    6a7e:	4620      	mov	r0, r4
    6a80:	f00e fe92 	bl	157a8 <net_buf_unref>
}
    6a84:	4628      	mov	r0, r5
    6a86:	b002      	add	sp, #8
    6a88:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    6a8a:	f06f 050b 	mvn.w	r5, #11
    6a8e:	e7f9      	b.n	6a84 <bt_l2cap_update_conn_param+0x54>
    6a90:	20002fc0 	.word	0x20002fc0

00006a94 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
    6a94:	4b02      	ldr	r3, [pc, #8]	; (6aa0 <att_cfm_sent+0xc>)
    6a96:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
    6a9a:	f014 b972 	b.w	1ad82 <att_sent>
    6a9e:	bf00      	nop
    6aa0:	0001b16b 	.word	0x0001b16b

00006aa4 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
    6aa4:	4b02      	ldr	r3, [pc, #8]	; (6ab0 <att_rsp_sent+0xc>)
    6aa6:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
    6aaa:	f014 b96a 	b.w	1ad82 <att_sent>
    6aae:	bf00      	nop
    6ab0:	0001b187 	.word	0x0001b187

00006ab4 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
    6ab4:	4b02      	ldr	r3, [pc, #8]	; (6ac0 <att_req_sent+0xc>)
    6ab6:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
    6aba:	f014 b962 	b.w	1ad82 <att_sent>
    6abe:	bf00      	nop
    6ac0:	0001af4d 	.word	0x0001af4d

00006ac4 <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
    6ac4:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
    6ac6:	7a83      	ldrb	r3, [r0, #10]
    6ac8:	2b07      	cmp	r3, #7
    6aca:	d00b      	beq.n	6ae4 <att_get+0x20>
    6acc:	4918      	ldr	r1, [pc, #96]	; (6b30 <att_get+0x6c>)
    6ace:	4b19      	ldr	r3, [pc, #100]	; (6b34 <att_get+0x70>)
		BT_WARN("Not connected");
    6ad0:	4819      	ldr	r0, [pc, #100]	; (6b38 <att_get+0x74>)
    6ad2:	1ac9      	subs	r1, r1, r3
    6ad4:	08c9      	lsrs	r1, r1, #3
    6ad6:	0189      	lsls	r1, r1, #6
    6ad8:	f041 0102 	orr.w	r1, r1, #2
		return NULL;
	}

	att_chan = ATT_CHAN(chan);
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
		BT_WARN("ATT channel flagged as disconnected");
    6adc:	f012 fcb1 	bl	19442 <log_0>
		return NULL;
    6ae0:	2400      	movs	r4, #0
    6ae2:	e00e      	b.n	6b02 <att_get+0x3e>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    6ae4:	2104      	movs	r1, #4
    6ae6:	f014 f929 	bl	1ad3c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    6aea:	4604      	mov	r4, r0
    6aec:	b958      	cbnz	r0, 6b06 <att_get+0x42>
    6aee:	4910      	ldr	r1, [pc, #64]	; (6b30 <att_get+0x6c>)
    6af0:	4b10      	ldr	r3, [pc, #64]	; (6b34 <att_get+0x70>)
		BT_ERR("Unable to find ATT channel");
    6af2:	4812      	ldr	r0, [pc, #72]	; (6b3c <att_get+0x78>)
    6af4:	1ac9      	subs	r1, r1, r3
    6af6:	08c9      	lsrs	r1, r1, #3
    6af8:	0189      	lsls	r1, r1, #6
    6afa:	f041 0101 	orr.w	r1, r1, #1
    6afe:	f012 fca0 	bl	19442 <log_0>
	}

	return att_chan->att;
}
    6b02:	4620      	mov	r0, r4
    6b04:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6b06:	f3bf 8f5b 	dmb	ish
    6b0a:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
    6b0e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
    6b12:	075b      	lsls	r3, r3, #29
    6b14:	d508      	bpl.n	6b28 <att_get+0x64>
    6b16:	4906      	ldr	r1, [pc, #24]	; (6b30 <att_get+0x6c>)
    6b18:	4b06      	ldr	r3, [pc, #24]	; (6b34 <att_get+0x70>)
		BT_WARN("ATT channel flagged as disconnected");
    6b1a:	4809      	ldr	r0, [pc, #36]	; (6b40 <att_get+0x7c>)
    6b1c:	1ac9      	subs	r1, r1, r3
    6b1e:	08c9      	lsrs	r1, r1, #3
    6b20:	0189      	lsls	r1, r1, #6
    6b22:	f041 0102 	orr.w	r1, r1, #2
    6b26:	e7d9      	b.n	6adc <att_get+0x18>
	return att_chan->att;
    6b28:	f850 4c08 	ldr.w	r4, [r0, #-8]
    6b2c:	e7e9      	b.n	6b02 <att_get+0x3e>
    6b2e:	bf00      	nop
    6b30:	0001ef3c 	.word	0x0001ef3c
    6b34:	0001ef2c 	.word	0x0001ef2c
    6b38:	00020c7d 	.word	0x00020c7d
    6b3c:	00020c8b 	.word	0x00020c8b
    6b40:	00020ca6 	.word	0x00020ca6

00006b44 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    6b44:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    6b46:	3808      	subs	r0, #8
    6b48:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    6b4a:	a901      	add	r1, sp, #4
    6b4c:	4802      	ldr	r0, [pc, #8]	; (6b58 <bt_att_released+0x14>)
    6b4e:	f017 fb9d 	bl	1e28c <k_mem_slab_free>
}
    6b52:	b003      	add	sp, #12
    6b54:	f85d fb04 	ldr.w	pc, [sp], #4
    6b58:	20000b04 	.word	0x20000b04

00006b5c <find_type_cb>:
{
    6b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
    6b60:	f8d2 9000 	ldr.w	r9, [r2]
{
    6b64:	b091      	sub	sp, #68	; 0x44
    6b66:	4607      	mov	r7, r0
    6b68:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    6b6a:	2500      	movs	r5, #0
    6b6c:	f642 0301 	movw	r3, #10241	; 0x2801
    6b70:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
    6b72:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    6b76:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    6b7a:	a90b      	add	r1, sp, #44	; 0x2c
{
    6b7c:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    6b7e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    6b82:	f013 fdbe 	bl	1a702 <bt_uuid_cmp>
    6b86:	2800      	cmp	r0, #0
    6b88:	d066      	beq.n	6c58 <find_type_cb+0xfc>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    6b8a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    6b8e:	6838      	ldr	r0, [r7, #0]
    6b90:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    6b94:	a90b      	add	r1, sp, #44	; 0x2c
    6b96:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    6b9a:	f013 fdb2 	bl	1a702 <bt_uuid_cmp>
    6b9e:	b138      	cbz	r0, 6bb0 <find_type_cb+0x54>
		if (data->group &&
    6ba0:	68a3      	ldr	r3, [r4, #8]
    6ba2:	b11b      	cbz	r3, 6bac <find_type_cb+0x50>
    6ba4:	885a      	ldrh	r2, [r3, #2]
    6ba6:	42b2      	cmp	r2, r6
    6ba8:	d200      	bcs.n	6bac <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
    6baa:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
    6bac:	2001      	movs	r0, #1
    6bae:	e009      	b.n	6bc4 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
    6bb0:	6861      	ldr	r1, [r4, #4]
    6bb2:	4608      	mov	r0, r1
    6bb4:	f014 f8dd 	bl	1ad72 <net_buf_frags_len>
    6bb8:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
    6bbc:	1a1b      	subs	r3, r3, r0
    6bbe:	2b03      	cmp	r3, #3
    6bc0:	d803      	bhi.n	6bca <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
    6bc2:	2000      	movs	r0, #0
}
    6bc4:	b011      	add	sp, #68	; 0x44
    6bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
    6bca:	4608      	mov	r0, r1
    6bcc:	f016 ffef 	bl	1dbae <net_buf_frag_last>
    6bd0:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
    6bd2:	6860      	ldr	r0, [r4, #4]
    6bd4:	f014 f8cd 	bl	1ad72 <net_buf_frags_len>
    6bd8:	f8b9 a08a 	ldrh.w	sl, [r9, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
    6bdc:	f105 0b08 	add.w	fp, r5, #8
    6be0:	ebaa 0a00 	sub.w	sl, sl, r0
    6be4:	4658      	mov	r0, fp
    6be6:	f017 f8a0 	bl	1dd2a <net_buf_simple_tailroom>
    6bea:	4582      	cmp	sl, r0
    6bec:	d237      	bcs.n	6c5e <find_type_cb+0x102>
    6bee:	6860      	ldr	r0, [r4, #4]
    6bf0:	f014 f8bf 	bl	1ad72 <net_buf_frags_len>
    6bf4:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
    6bf8:	1a18      	subs	r0, r3, r0
	if (!len) {
    6bfa:	b970      	cbnz	r0, 6c1a <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
    6bfc:	6863      	ldr	r3, [r4, #4]
    6bfe:	7998      	ldrb	r0, [r3, #6]
    6c00:	f00e fd14 	bl	1562c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
    6c04:	2200      	movs	r2, #0
    6c06:	2300      	movs	r3, #0
    6c08:	f016 ff7a 	bl	1db00 <net_buf_alloc_fixed>
		if (!frag) {
    6c0c:	4605      	mov	r5, r0
    6c0e:	2800      	cmp	r0, #0
    6c10:	d0d7      	beq.n	6bc2 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
    6c12:	4601      	mov	r1, r0
    6c14:	6860      	ldr	r0, [r4, #4]
    6c16:	f016 ffdb 	bl	1dbd0 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    6c1a:	2300      	movs	r3, #0
    6c1c:	9300      	str	r3, [sp, #0]
    6c1e:	f8d7 9004 	ldr.w	r9, [r7, #4]
    6c22:	4639      	mov	r1, r7
    6c24:	2310      	movs	r3, #16
    6c26:	aa02      	add	r2, sp, #8
    6c28:	4640      	mov	r0, r8
    6c2a:	47c8      	blx	r9
	if (read < 0) {
    6c2c:	1e07      	subs	r7, r0, #0
    6c2e:	db13      	blt.n	6c58 <find_type_cb+0xfc>
	if (read != data->value_len) {
    6c30:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    6c32:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
    6c34:	42ba      	cmp	r2, r7
    6c36:	d037      	beq.n	6ca8 <find_type_cb+0x14c>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    6c38:	4601      	mov	r1, r0
    6c3a:	a80b      	add	r0, sp, #44	; 0x2c
    6c3c:	f013 fd8f 	bl	1a75e <bt_uuid_create>
    6c40:	b988      	cbnz	r0, 6c66 <find_type_cb+0x10a>
    6c42:	4a1b      	ldr	r2, [pc, #108]	; (6cb0 <find_type_cb+0x154>)
    6c44:	4b1b      	ldr	r3, [pc, #108]	; (6cb4 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %u", data->value_len);
    6c46:	7c21      	ldrb	r1, [r4, #16]
    6c48:	481b      	ldr	r0, [pc, #108]	; (6cb8 <find_type_cb+0x15c>)
    6c4a:	1ad2      	subs	r2, r2, r3
    6c4c:	08d2      	lsrs	r2, r2, #3
    6c4e:	0192      	lsls	r2, r2, #6
    6c50:	f042 0202 	orr.w	r2, r2, #2
			BT_WARN("Unable to create UUID: size %d", read);
    6c54:	f012 fc02 	bl	1945c <log_1>
	data->group = NULL;
    6c58:	2300      	movs	r3, #0
    6c5a:	60a3      	str	r3, [r4, #8]
    6c5c:	e7a6      	b.n	6bac <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
    6c5e:	4658      	mov	r0, fp
    6c60:	f017 f863 	bl	1dd2a <net_buf_simple_tailroom>
    6c64:	e7c9      	b.n	6bfa <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
    6c66:	b2fa      	uxtb	r2, r7
    6c68:	a902      	add	r1, sp, #8
    6c6a:	a806      	add	r0, sp, #24
    6c6c:	f013 fd77 	bl	1a75e <bt_uuid_create>
    6c70:	b948      	cbnz	r0, 6c86 <find_type_cb+0x12a>
    6c72:	4a0f      	ldr	r2, [pc, #60]	; (6cb0 <find_type_cb+0x154>)
    6c74:	4b0f      	ldr	r3, [pc, #60]	; (6cb4 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %d", read);
    6c76:	4811      	ldr	r0, [pc, #68]	; (6cbc <find_type_cb+0x160>)
    6c78:	1ad2      	subs	r2, r2, r3
    6c7a:	08d2      	lsrs	r2, r2, #3
    6c7c:	0192      	lsls	r2, r2, #6
    6c7e:	f042 0202 	orr.w	r2, r2, #2
    6c82:	4639      	mov	r1, r7
    6c84:	e7e6      	b.n	6c54 <find_type_cb+0xf8>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
    6c86:	a906      	add	r1, sp, #24
    6c88:	a80b      	add	r0, sp, #44	; 0x2c
    6c8a:	f013 fd3a 	bl	1a702 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
    6c8e:	2800      	cmp	r0, #0
    6c90:	d1e2      	bne.n	6c58 <find_type_cb+0xfc>
	data->err = 0x00;
    6c92:	2300      	movs	r3, #0
    6c94:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
    6c96:	2104      	movs	r1, #4
    6c98:	f105 0008 	add.w	r0, r5, #8
    6c9c:	f016 ffb5 	bl	1dc0a <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
    6ca0:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    6ca2:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    6ca4:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
    6ca6:	e781      	b.n	6bac <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
    6ca8:	a902      	add	r1, sp, #8
    6caa:	f013 fad7 	bl	1a25c <memcmp>
    6cae:	e7ee      	b.n	6c8e <find_type_cb+0x132>
    6cb0:	0001ef3c 	.word	0x0001ef3c
    6cb4:	0001ef2c 	.word	0x0001ef2c
    6cb8:	00020cca 	.word	0x00020cca
    6cbc:	00020ce9 	.word	0x00020ce9

00006cc0 <chan_send>:
{
    6cc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    6cc4:	688b      	ldr	r3, [r1, #8]
    6cc6:	781b      	ldrb	r3, [r3, #0]
    6cc8:	2bd2      	cmp	r3, #210	; 0xd2
{
    6cca:	4606      	mov	r6, r0
    6ccc:	460c      	mov	r4, r1
    6cce:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    6cd0:	d116      	bne.n	6d00 <chan_send+0x40>
		err = bt_smp_sign(chan->att->conn, buf);
    6cd2:	6803      	ldr	r3, [r0, #0]
    6cd4:	6818      	ldr	r0, [r3, #0]
    6cd6:	f014 ff44 	bl	1bb62 <bt_smp_sign>
		if (err) {
    6cda:	4605      	mov	r5, r0
    6cdc:	b180      	cbz	r0, 6d00 <chan_send+0x40>
    6cde:	4b24      	ldr	r3, [pc, #144]	; (6d70 <chan_send+0xb0>)
    6ce0:	4924      	ldr	r1, [pc, #144]	; (6d74 <chan_send+0xb4>)
			BT_ERR("Error signing data");
    6ce2:	4825      	ldr	r0, [pc, #148]	; (6d78 <chan_send+0xb8>)
    6ce4:	1ac9      	subs	r1, r1, r3
    6ce6:	08c9      	lsrs	r1, r1, #3
    6ce8:	0189      	lsls	r1, r1, #6
    6cea:	f041 0101 	orr.w	r1, r1, #1
    6cee:	f012 fba8 	bl	19442 <log_0>
			net_buf_unref(buf);
    6cf2:	4620      	mov	r0, r4
    6cf4:	f00e fd58 	bl	157a8 <net_buf_unref>
}
    6cf8:	4628      	mov	r0, r5
    6cfa:	b003      	add	sp, #12
    6cfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
    6d00:	f104 0008 	add.w	r0, r4, #8
    6d04:	f017 f80d 	bl	1dd22 <net_buf_simple_headroom>
	state->len = buf->len;
    6d08:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    6d0c:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
    6d0e:	b957      	cbnz	r7, 6d26 <chan_send+0x66>
	switch (att_op_get_type(buf->data[0])) {
    6d10:	68a3      	ldr	r3, [r4, #8]
    6d12:	7818      	ldrb	r0, [r3, #0]
    6d14:	f014 f84b 	bl	1adae <att_op_get_type>
    6d18:	1e43      	subs	r3, r0, #1
    6d1a:	b2db      	uxtb	r3, r3
    6d1c:	2b04      	cmp	r3, #4
    6d1e:	bf9c      	itt	ls
    6d20:	4a16      	ldrls	r2, [pc, #88]	; (6d7c <chan_send+0xbc>)
    6d22:	f852 7023 	ldrls.w	r7, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    6d26:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
    6d28:	f8c6 7140 	str.w	r7, [r6, #320]	; 0x140
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    6d2c:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
    6d2e:	4b14      	ldr	r3, [pc, #80]	; (6d80 <chan_send+0xc0>)
    6d30:	429f      	cmp	r7, r3
    6d32:	d018      	beq.n	6d66 <chan_send+0xa6>
	} else if (cb == chan_cfm_sent) {
    6d34:	4b13      	ldr	r3, [pc, #76]	; (6d84 <chan_send+0xc4>)
    6d36:	429f      	cmp	r7, r3
    6d38:	d017      	beq.n	6d6a <chan_send+0xaa>
		return att_sent;
    6d3a:	4913      	ldr	r1, [pc, #76]	; (6d88 <chan_send+0xc8>)
    6d3c:	4b13      	ldr	r3, [pc, #76]	; (6d8c <chan_send+0xcc>)
    6d3e:	4a14      	ldr	r2, [pc, #80]	; (6d90 <chan_send+0xd0>)
    6d40:	428f      	cmp	r7, r1
    6d42:	bf18      	it	ne
    6d44:	4613      	movne	r3, r2
			       &chan->chan.chan);
    6d46:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    6d48:	9600      	str	r6, [sp, #0]
    6d4a:	4622      	mov	r2, r4
    6d4c:	2104      	movs	r1, #4
    6d4e:	f013 ffcc 	bl	1acea <bt_l2cap_send_cb>
	if (err) {
    6d52:	4605      	mov	r5, r0
    6d54:	2800      	cmp	r0, #0
    6d56:	d0cf      	beq.n	6cf8 <chan_send+0x38>
	buf->data = buf->__buf + state->offset;
    6d58:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    6d5a:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
    6d5e:	fa10 f088 	uxtah	r0, r0, r8
    6d62:	60a0      	str	r0, [r4, #8]
}
    6d64:	e7c8      	b.n	6cf8 <chan_send+0x38>
		return att_rsp_sent;
    6d66:	4b0b      	ldr	r3, [pc, #44]	; (6d94 <chan_send+0xd4>)
    6d68:	e7ed      	b.n	6d46 <chan_send+0x86>
		return att_cfm_sent;
    6d6a:	4b0b      	ldr	r3, [pc, #44]	; (6d98 <chan_send+0xd8>)
    6d6c:	e7eb      	b.n	6d46 <chan_send+0x86>
    6d6e:	bf00      	nop
    6d70:	0001ef2c 	.word	0x0001ef2c
    6d74:	0001ef3c 	.word	0x0001ef3c
    6d78:	00020d08 	.word	0x00020d08
    6d7c:	0001f4dc 	.word	0x0001f4dc
    6d80:	0001b187 	.word	0x0001b187
    6d84:	0001b16b 	.word	0x0001b16b
    6d88:	0001af4d 	.word	0x0001af4d
    6d8c:	00006ab5 	.word	0x00006ab5
    6d90:	0001ad83 	.word	0x0001ad83
    6d94:	00006aa5 	.word	0x00006aa5
    6d98:	00006a95 	.word	0x00006a95

00006d9c <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
    6d9c:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
    6d9e:	4a07      	ldr	r2, [pc, #28]	; (6dbc <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
    6da0:	4604      	mov	r4, r0
    6da2:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
    6da4:	f7ff ff8c 	bl	6cc0 <chan_send>
	if (err) {
    6da8:	b130      	cbz	r0, 6db8 <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
    6daa:	4629      	mov	r1, r5
    6dac:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
}
    6db0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
    6db4:	f016 beea 	b.w	1db8c <net_buf_put>
}
    6db8:	bd38      	pop	{r3, r4, r5, pc}
    6dba:	bf00      	nop
    6dbc:	0001b187 	.word	0x0001b187

00006dc0 <read_group_cb>:
{
    6dc0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    6dc4:	4605      	mov	r5, r0
    6dc6:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    6dc8:	f04f 0800 	mov.w	r8, #0
    6dcc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    6dd0:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
    6dd2:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    6dd4:	f88d 8008 	strb.w	r8, [sp, #8]
    6dd8:	a902      	add	r1, sp, #8
{
    6dda:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    6ddc:	f8ad 300a 	strh.w	r3, [sp, #10]
    6de0:	f013 fc8f 	bl	1a702 <bt_uuid_cmp>
    6de4:	b1a0      	cbz	r0, 6e10 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    6de6:	f642 0301 	movw	r3, #10241	; 0x2801
    6dea:	6828      	ldr	r0, [r5, #0]
    6dec:	f88d 800c 	strb.w	r8, [sp, #12]
    6df0:	a903      	add	r1, sp, #12
    6df2:	f8ad 300e 	strh.w	r3, [sp, #14]
    6df6:	f013 fc84 	bl	1a702 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    6dfa:	b148      	cbz	r0, 6e10 <read_group_cb+0x50>
		if (data->group &&
    6dfc:	6923      	ldr	r3, [r4, #16]
    6dfe:	b11b      	cbz	r3, 6e08 <read_group_cb+0x48>
    6e00:	885a      	ldrh	r2, [r3, #2]
    6e02:	42b2      	cmp	r2, r6
    6e04:	d200      	bcs.n	6e08 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
    6e06:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    6e08:	2001      	movs	r0, #1
}
    6e0a:	b004      	add	sp, #16
    6e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    6e10:	6861      	ldr	r1, [r4, #4]
    6e12:	6828      	ldr	r0, [r5, #0]
    6e14:	f013 fc75 	bl	1a702 <bt_uuid_cmp>
    6e18:	b110      	cbz	r0, 6e20 <read_group_cb+0x60>
		data->group = NULL;
    6e1a:	2300      	movs	r3, #0
    6e1c:	6123      	str	r3, [r4, #16]
    6e1e:	e7f3      	b.n	6e08 <read_group_cb+0x48>
	if (data->rsp->len &&
    6e20:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    6e22:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
    6e24:	781a      	ldrb	r2, [r3, #0]
    6e26:	b13a      	cbz	r2, 6e38 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    6e28:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
    6e2c:	8981      	ldrh	r1, [r0, #12]
    6e2e:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    6e30:	4293      	cmp	r3, r2
    6e32:	da01      	bge.n	6e38 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
    6e34:	2000      	movs	r0, #0
    6e36:	e7e8      	b.n	6e0a <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
    6e38:	2104      	movs	r1, #4
    6e3a:	3008      	adds	r0, #8
    6e3c:	f016 fee5 	bl	1dc0a <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    6e40:	4b09      	ldr	r3, [pc, #36]	; (6e68 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    6e42:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    6e44:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    6e46:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    6e48:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    6e4a:	4629      	mov	r1, r5
    6e4c:	9300      	str	r3, [sp, #0]
    6e4e:	9401      	str	r4, [sp, #4]
    6e50:	2300      	movs	r3, #0
    6e52:	4638      	mov	r0, r7
    6e54:	f014 f8fe 	bl	1b054 <att_chan_read>
	if (read < 0) {
    6e58:	2800      	cmp	r0, #0
    6e5a:	dbeb      	blt.n	6e34 <read_group_cb+0x74>
	if (!data->group) {
    6e5c:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    6e5e:	3800      	subs	r0, #0
    6e60:	bf18      	it	ne
    6e62:	2001      	movne	r0, #1
    6e64:	e7d1      	b.n	6e0a <read_group_cb+0x4a>
    6e66:	bf00      	nop
    6e68:	0001af2d 	.word	0x0001af2d

00006e6c <read_type_cb>:
{
    6e6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
    6e70:	f8d2 8000 	ldr.w	r8, [r2]
{
    6e74:	4606      	mov	r6, r0
    6e76:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    6e78:	6800      	ldr	r0, [r0, #0]
    6e7a:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
    6e7c:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
    6e80:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    6e82:	f013 fc3e 	bl	1a702 <bt_uuid_cmp>
    6e86:	4607      	mov	r7, r0
    6e88:	2800      	cmp	r0, #0
    6e8a:	d13e      	bne.n	6f0a <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    6e8c:	4628      	mov	r0, r5
    6e8e:	2215      	movs	r2, #21
    6e90:	4631      	mov	r1, r6
    6e92:	f014 fdf6 	bl	1ba82 <bt_gatt_check_perm>
    6e96:	4605      	mov	r5, r0
    6e98:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    6e9a:	b148      	cbz	r0, 6eb0 <read_type_cb+0x44>
		if (data->rsp->len) {
    6e9c:	68e3      	ldr	r3, [r4, #12]
    6e9e:	781b      	ldrb	r3, [r3, #0]
    6ea0:	b923      	cbnz	r3, 6eac <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
    6ea2:	2500      	movs	r5, #0
}
    6ea4:	4628      	mov	r0, r5
    6ea6:	b003      	add	sp, #12
    6ea8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
    6eac:	7527      	strb	r7, [r4, #20]
    6eae:	e7f8      	b.n	6ea2 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    6eb0:	68a0      	ldr	r0, [r4, #8]
    6eb2:	f016 fe7c 	bl	1dbae <net_buf_frag_last>
    6eb6:	2102      	movs	r1, #2
    6eb8:	3008      	adds	r0, #8
    6eba:	f016 fea6 	bl	1dc0a <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    6ebe:	4b14      	ldr	r3, [pc, #80]	; (6f10 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    6ec0:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    6ec2:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
    6ec4:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    6ec8:	4631      	mov	r1, r6
    6eca:	9300      	str	r3, [sp, #0]
    6ecc:	9401      	str	r4, [sp, #4]
    6ece:	462b      	mov	r3, r5
    6ed0:	4640      	mov	r0, r8
    6ed2:	f014 f8bf 	bl	1b054 <att_chan_read>
	if (read < 0) {
    6ed6:	2800      	cmp	r0, #0
    6ed8:	da07      	bge.n	6eea <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
    6eda:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    6ede:	bf26      	itte	cs
    6ee0:	4240      	negcs	r0, r0
    6ee2:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    6ee4:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
    6ee6:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    6ee8:	e7dc      	b.n	6ea4 <read_type_cb+0x38>
	if (!data->item) {
    6eea:	6923      	ldr	r3, [r4, #16]
    6eec:	2b00      	cmp	r3, #0
    6eee:	d0d8      	beq.n	6ea2 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    6ef0:	68a0      	ldr	r0, [r4, #8]
    6ef2:	f013 ff3e 	bl	1ad72 <net_buf_frags_len>
    6ef6:	f8b8 508a 	ldrh.w	r5, [r8, #138]	; 0x8a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    6efa:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    6efc:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    6efe:	7818      	ldrb	r0, [r3, #0]
    6f00:	4285      	cmp	r5, r0
    6f02:	bf94      	ite	ls
    6f04:	2500      	movls	r5, #0
    6f06:	2501      	movhi	r5, #1
    6f08:	e7cc      	b.n	6ea4 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    6f0a:	2501      	movs	r5, #1
    6f0c:	e7ca      	b.n	6ea4 <read_type_cb+0x38>
    6f0e:	bf00      	nop
    6f10:	0001ad8f 	.word	0x0001ad8f

00006f14 <prep_write_cb>:
{
    6f14:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    6f18:	4614      	mov	r4, r2
    6f1a:	4606      	mov	r6, r0
    6f1c:	460f      	mov	r7, r1
	data->err = bt_gatt_check_perm(data->conn, attr,
    6f1e:	222a      	movs	r2, #42	; 0x2a
    6f20:	4601      	mov	r1, r0
    6f22:	6820      	ldr	r0, [r4, #0]
    6f24:	f014 fdad 	bl	1ba82 <bt_gatt_check_perm>
    6f28:	4605      	mov	r5, r0
    6f2a:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    6f2c:	2800      	cmp	r0, #0
    6f2e:	d12e      	bne.n	6f8e <prep_write_cb+0x7a>
	if (!(attr->perm & BT_GATT_PERM_PREPARE_WRITE)) {
    6f30:	7cb3      	ldrb	r3, [r6, #18]
    6f32:	065b      	lsls	r3, r3, #25
    6f34:	d516      	bpl.n	6f64 <prep_write_cb+0x50>
	write = attr->write(data->conn, attr, data->value, data->len,
    6f36:	2301      	movs	r3, #1
    6f38:	9301      	str	r3, [sp, #4]
    6f3a:	89e3      	ldrh	r3, [r4, #14]
    6f3c:	9300      	str	r3, [sp, #0]
    6f3e:	f8d6 8008 	ldr.w	r8, [r6, #8]
    6f42:	89a3      	ldrh	r3, [r4, #12]
    6f44:	68a2      	ldr	r2, [r4, #8]
    6f46:	6820      	ldr	r0, [r4, #0]
    6f48:	4631      	mov	r1, r6
    6f4a:	47c0      	blx	r8
	if (write != 0) {
    6f4c:	b150      	cbz	r0, 6f64 <prep_write_cb+0x50>
	if (err < 0 && err >= -0xff) {
    6f4e:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    6f52:	bf26      	itte	cs
    6f54:	4243      	negcs	r3, r0
    6f56:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
    6f58:	230e      	movcc	r3, #14
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
    6f5a:	7423      	strb	r3, [r4, #16]
}
    6f5c:	4628      	mov	r0, r5
    6f5e:	b002      	add	sp, #8
    6f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_alloc_fixed(pool, timeout);
    6f64:	480b      	ldr	r0, [pc, #44]	; (6f94 <prep_write_cb+0x80>)
    6f66:	2200      	movs	r2, #0
    6f68:	2300      	movs	r3, #0
    6f6a:	f016 fdc9 	bl	1db00 <net_buf_alloc_fixed>
	data->buf = net_buf_alloc(&prep_pool, K_NO_WAIT);
    6f6e:	6060      	str	r0, [r4, #4]
	if (!data->buf) {
    6f70:	b908      	cbnz	r0, 6f76 <prep_write_cb+0x62>
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
    6f72:	2309      	movs	r3, #9
    6f74:	e7f1      	b.n	6f5a <prep_write_cb+0x46>
	attr_data->offset = data->offset;
    6f76:	89e3      	ldrh	r3, [r4, #14]
    6f78:	82c3      	strh	r3, [r0, #22]
	attr_data->handle = handle;
    6f7a:	8287      	strh	r7, [r0, #20]
	return net_buf_simple_add_mem(&buf->b, mem, len);
    6f7c:	89a2      	ldrh	r2, [r4, #12]
    6f7e:	68a1      	ldr	r1, [r4, #8]
    6f80:	3008      	adds	r0, #8
    6f82:	f016 fe48 	bl	1dc16 <net_buf_simple_add_mem>
	data->err = 0U;
    6f86:	2300      	movs	r3, #0
    6f88:	7423      	strb	r3, [r4, #16]
	return BT_GATT_ITER_CONTINUE;
    6f8a:	2501      	movs	r5, #1
    6f8c:	e7e6      	b.n	6f5c <prep_write_cb+0x48>
		return BT_GATT_ITER_STOP;
    6f8e:	2500      	movs	r5, #0
    6f90:	e7e4      	b.n	6f5c <prep_write_cb+0x48>
    6f92:	bf00      	nop
    6f94:	20000d50 	.word	0x20000d50

00006f98 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    6f98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    6f9a:	2300      	movs	r3, #0
{
    6f9c:	4606      	mov	r6, r0
    6f9e:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    6fa0:	4828      	ldr	r0, [pc, #160]	; (7044 <bt_att_accept+0xac>)
    6fa2:	2200      	movs	r2, #0
    6fa4:	4669      	mov	r1, sp
    6fa6:	f010 fb6b 	bl	17680 <k_mem_slab_alloc>
    6faa:	4604      	mov	r4, r0
    6fac:	b178      	cbz	r0, 6fce <bt_att_accept+0x36>
    6fae:	4a26      	ldr	r2, [pc, #152]	; (7048 <bt_att_accept+0xb0>)
    6fb0:	4b26      	ldr	r3, [pc, #152]	; (704c <bt_att_accept+0xb4>)
		BT_ERR("No available ATT context for conn %p", conn);
    6fb2:	4827      	ldr	r0, [pc, #156]	; (7050 <bt_att_accept+0xb8>)
    6fb4:	1ad2      	subs	r2, r2, r3
    6fb6:	08d2      	lsrs	r2, r2, #3
    6fb8:	0192      	lsls	r2, r2, #6
    6fba:	f042 0201 	orr.w	r2, r2, #1
    6fbe:	4631      	mov	r1, r6
		BT_ERR("No available ATT channel for conn %p", att->conn);
    6fc0:	f012 fa4c 	bl	1945c <log_1>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
    6fc4:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
    6fc8:	4620      	mov	r0, r4
    6fca:	b003      	add	sp, #12
    6fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
    6fce:	4601      	mov	r1, r0
    6fd0:	2244      	movs	r2, #68	; 0x44
    6fd2:	9800      	ldr	r0, [sp, #0]
    6fd4:	f013 f95e 	bl	1a294 <memset>
	att->conn = conn;
    6fd8:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    6fda:	481e      	ldr	r0, [pc, #120]	; (7054 <bt_att_accept+0xbc>)
	list->tail = NULL;
    6fdc:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
    6fde:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
    6fe2:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
    6fe6:	2200      	movs	r2, #0
    6fe8:	2300      	movs	r3, #0
    6fea:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    6fec:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    6fee:	f010 fb47 	bl	17680 <k_mem_slab_alloc>
    6ff2:	4604      	mov	r4, r0
    6ff4:	b148      	cbz	r0, 700a <bt_att_accept+0x72>
    6ff6:	4a14      	ldr	r2, [pc, #80]	; (7048 <bt_att_accept+0xb0>)
    6ff8:	4b14      	ldr	r3, [pc, #80]	; (704c <bt_att_accept+0xb4>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
    6ffa:	6829      	ldr	r1, [r5, #0]
    6ffc:	4816      	ldr	r0, [pc, #88]	; (7058 <bt_att_accept+0xc0>)
    6ffe:	1ad2      	subs	r2, r2, r3
    7000:	08d2      	lsrs	r2, r2, #3
    7002:	0192      	lsls	r2, r2, #6
    7004:	f042 0201 	orr.w	r2, r2, #1
    7008:	e7da      	b.n	6fc0 <bt_att_accept+0x28>
	(void)memset(chan, 0, sizeof(*chan));
    700a:	4601      	mov	r1, r0
    700c:	f44f 72a4 	mov.w	r2, #328	; 0x148
    7010:	9801      	ldr	r0, [sp, #4]
    7012:	f013 f93f 	bl	1a294 <memset>
	chan->chan.chan.ops = &ops;
    7016:	9801      	ldr	r0, [sp, #4]
    7018:	4b10      	ldr	r3, [pc, #64]	; (705c <bt_att_accept+0xc4>)
    701a:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
    701c:	30f8      	adds	r0, #248	; 0xf8
    701e:	f017 f9ea 	bl	1e3f6 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    7022:	9b01      	ldr	r3, [sp, #4]
    7024:	f3bf 8f5b 	dmb	ish
    7028:	33f0      	adds	r3, #240	; 0xf0
    702a:	e853 2f00 	ldrex	r2, [r3]
    702e:	e843 4100 	strex	r1, r4, [r3]
    7032:	2900      	cmp	r1, #0
    7034:	d1f9      	bne.n	702a <bt_att_accept+0x92>
    7036:	f3bf 8f5b 	dmb	ish
	chan->att = att;
    703a:	9b01      	ldr	r3, [sp, #4]
    703c:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
    7040:	603b      	str	r3, [r7, #0]
	return 0;
    7042:	e7c1      	b.n	6fc8 <bt_att_accept+0x30>
    7044:	20000ae8 	.word	0x20000ae8
    7048:	0001ef3c 	.word	0x0001ef3c
    704c:	0001ef2c 	.word	0x0001ef2c
    7050:	00020d1b 	.word	0x00020d1b
    7054:	20000b04 	.word	0x20000b04
    7058:	00020d40 	.word	0x00020d40
    705c:	200002a4 	.word	0x200002a4

00007060 <bt_att_connected>:
{
    7060:	b570      	push	{r4, r5, r6, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    7062:	4606      	mov	r6, r0
{
    7064:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    7066:	2104      	movs	r1, #4
    7068:	f856 0908 	ldr.w	r0, [r6], #-8
    706c:	f013 fe56 	bl	1ad1c <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
    7070:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
    7074:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    7076:	b93b      	cbnz	r3, 7088 <bt_att_connected+0x28>
    7078:	f105 000c 	add.w	r0, r5, #12
    707c:	f017 f9bb 	bl	1e3f6 <z_impl_k_queue_init>
    7080:	f105 0024 	add.w	r0, r5, #36	; 0x24
    7084:	f017 f9b7 	bl	1e3f6 <z_impl_k_queue_init>
	parent->next = child;
    7088:	6bea      	ldr	r2, [r5, #60]	; 0x3c
    708a:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
Z_GENLIST_PREPEND(slist, snode)
    708e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
	sys_slist_prepend(&att->chans, &chan->node);
    7090:	f504 739e 	add.w	r3, r4, #316	; 0x13c
	list->head = node;
    7094:	63eb      	str	r3, [r5, #60]	; 0x3c
Z_GENLIST_PREPEND(slist, snode)
    7096:	b902      	cbnz	r2, 709a <bt_att_connected+0x3a>
	list->tail = node;
    7098:	642b      	str	r3, [r5, #64]	; 0x40
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    709a:	f3bf 8f5b 	dmb	ish
    709e:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    70a2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
    70a6:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    70a8:	bf58      	it	pl
    70aa:	2317      	movpl	r3, #23
	att_chan_mtu_updated(att_chan);
    70ac:	4630      	mov	r0, r6
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    70ae:	bf5c      	itt	pl
    70b0:	f8a4 3082 	strhpl.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    70b4:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
    70b8:	f013 fefd 	bl	1aeb6 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
    70bc:	f504 7084 	add.w	r0, r4, #264	; 0x108
    70c0:	4902      	ldr	r1, [pc, #8]	; (70cc <bt_att_connected+0x6c>)
}
    70c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
    70c6:	f017 bab9 	b.w	1e63c <k_work_init_delayable>
    70ca:	bf00      	nop
    70cc:	00007a9d 	.word	0x00007a9d

000070d0 <bt_att_chan_create_pdu>:
{
    70d0:	b538      	push	{r3, r4, r5, lr}
    70d2:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    70d4:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
    70d8:	3201      	adds	r2, #1
    70da:	428a      	cmp	r2, r1
    70dc:	d90c      	bls.n	70f8 <bt_att_chan_create_pdu+0x28>
    70de:	481a      	ldr	r0, [pc, #104]	; (7148 <bt_att_chan_create_pdu+0x78>)
    70e0:	4b1a      	ldr	r3, [pc, #104]	; (714c <bt_att_chan_create_pdu+0x7c>)
    70e2:	1a1b      	subs	r3, r3, r0
    70e4:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    70e6:	019b      	lsls	r3, r3, #6
    70e8:	4819      	ldr	r0, [pc, #100]	; (7150 <bt_att_chan_create_pdu+0x80>)
    70ea:	f043 0302 	orr.w	r3, r3, #2
    70ee:	f012 f9c9 	bl	19484 <log_2>
		return NULL;
    70f2:	2400      	movs	r4, #0
}
    70f4:	4620      	mov	r0, r4
    70f6:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
    70f8:	4628      	mov	r0, r5
    70fa:	f013 fe58 	bl	1adae <att_op_get_type>
    70fe:	2802      	cmp	r0, #2
    7100:	d001      	beq.n	7106 <bt_att_chan_create_pdu+0x36>
    7102:	2804      	cmp	r0, #4
    7104:	d114      	bne.n	7130 <bt_att_chan_create_pdu+0x60>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
    7106:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    710a:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
    710c:	2100      	movs	r1, #0
    710e:	4608      	mov	r0, r1
    7110:	f013 fde8 	bl	1ace4 <bt_l2cap_create_pdu_timeout>
    7114:	4604      	mov	r4, r0
	if (!buf) {
    7116:	b980      	cbnz	r0, 713a <bt_att_chan_create_pdu+0x6a>
    7118:	4b0b      	ldr	r3, [pc, #44]	; (7148 <bt_att_chan_create_pdu+0x78>)
    711a:	4a0c      	ldr	r2, [pc, #48]	; (714c <bt_att_chan_create_pdu+0x7c>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
    711c:	480d      	ldr	r0, [pc, #52]	; (7154 <bt_att_chan_create_pdu+0x84>)
    711e:	1ad2      	subs	r2, r2, r3
    7120:	08d2      	lsrs	r2, r2, #3
    7122:	0192      	lsls	r2, r2, #6
    7124:	f042 0201 	orr.w	r2, r2, #1
    7128:	4629      	mov	r1, r5
    712a:	f012 f997 	bl	1945c <log_1>
		return NULL;
    712e:	e7e1      	b.n	70f4 <bt_att_chan_create_pdu+0x24>
		buf = bt_l2cap_create_pdu(NULL, 0);
    7130:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7134:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7138:	e7e8      	b.n	710c <bt_att_chan_create_pdu+0x3c>
	return net_buf_simple_add(&buf->b, len);
    713a:	2101      	movs	r1, #1
    713c:	3008      	adds	r0, #8
    713e:	f016 fd64 	bl	1dc0a <net_buf_simple_add>
	hdr->code = op;
    7142:	7005      	strb	r5, [r0, #0]
	return buf;
    7144:	e7d6      	b.n	70f4 <bt_att_chan_create_pdu+0x24>
    7146:	bf00      	nop
    7148:	0001ef2c 	.word	0x0001ef2c
    714c:	0001ef3c 	.word	0x0001ef3c
    7150:	00020d65 	.word	0x00020d65
    7154:	00020b52 	.word	0x00020b52

00007158 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
    7158:	898b      	ldrh	r3, [r1, #12]
{
    715a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    715e:	4604      	mov	r4, r0
    7160:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
    7162:	b963      	cbnz	r3, 717e <bt_att_recv+0x26>
    7164:	494c      	ldr	r1, [pc, #304]	; (7298 <bt_att_recv+0x140>)
    7166:	4b4d      	ldr	r3, [pc, #308]	; (729c <bt_att_recv+0x144>)
		BT_ERR("Too small ATT PDU received");
    7168:	484d      	ldr	r0, [pc, #308]	; (72a0 <bt_att_recv+0x148>)
    716a:	1ac9      	subs	r1, r1, r3
    716c:	08c9      	lsrs	r1, r1, #3
    716e:	0189      	lsls	r1, r1, #6
    7170:	f041 0101 	orr.w	r1, r1, #1
			BT_WARN("Ignoring unexpected indication");
    7174:	f012 f965 	bl	19442 <log_0>
}
    7178:	2000      	movs	r0, #0
    717a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    717e:	2101      	movs	r1, #1
    7180:	f108 0008 	add.w	r0, r8, #8
    7184:	f016 fda2 	bl	1dccc <net_buf_simple_pull_mem>
	if (!att_chan->att) {
    7188:	f854 3c08 	ldr.w	r3, [r4, #-8]
    718c:	4605      	mov	r5, r0
    718e:	2b00      	cmp	r3, #0
    7190:	d0f2      	beq.n	7178 <bt_att_recv+0x20>
		if (hdr->code == handlers[i].op) {
    7192:	7801      	ldrb	r1, [r0, #0]
    7194:	4a43      	ldr	r2, [pc, #268]	; (72a4 <bt_att_recv+0x14c>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    7196:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    719a:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
    719c:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
    71a0:	4288      	cmp	r0, r1
    71a2:	d11e      	bne.n	71e2 <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
    71a4:	00d8      	lsls	r0, r3, #3
    71a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    71aa:	789f      	ldrb	r7, [r3, #2]
    71ac:	2f01      	cmp	r7, #1
    71ae:	d133      	bne.n	7218 <bt_att_recv+0xc0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    71b0:	f3bf 8f5b 	dmb	ish
    71b4:	34e8      	adds	r4, #232	; 0xe8
    71b6:	e854 3f00 	ldrex	r3, [r4]
    71ba:	f043 0101 	orr.w	r1, r3, #1
    71be:	e844 1c00 	strex	ip, r1, [r4]
    71c2:	f1bc 0f00 	cmp.w	ip, #0
    71c6:	d1f6      	bne.n	71b6 <bt_att_recv+0x5e>
    71c8:	f3bf 8f5b 	dmb	ish
    71cc:	07d9      	lsls	r1, r3, #31
    71ce:	d53e      	bpl.n	724e <bt_att_recv+0xf6>
    71d0:	4931      	ldr	r1, [pc, #196]	; (7298 <bt_att_recv+0x140>)
    71d2:	4b32      	ldr	r3, [pc, #200]	; (729c <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected request");
    71d4:	4834      	ldr	r0, [pc, #208]	; (72a8 <bt_att_recv+0x150>)
    71d6:	1ac9      	subs	r1, r1, r3
    71d8:	08c9      	lsrs	r1, r1, #3
    71da:	0189      	lsls	r1, r1, #6
    71dc:	f041 0102 	orr.w	r1, r1, #2
    71e0:	e7c8      	b.n	7174 <bt_att_recv+0x1c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    71e2:	3301      	adds	r3, #1
    71e4:	2b0d      	cmp	r3, #13
    71e6:	d1d9      	bne.n	719c <bt_att_recv+0x44>
    71e8:	4b2c      	ldr	r3, [pc, #176]	; (729c <bt_att_recv+0x144>)
    71ea:	4a2b      	ldr	r2, [pc, #172]	; (7298 <bt_att_recv+0x140>)
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
    71ec:	482f      	ldr	r0, [pc, #188]	; (72ac <bt_att_recv+0x154>)
    71ee:	1ad2      	subs	r2, r2, r3
    71f0:	08d2      	lsrs	r2, r2, #3
    71f2:	0192      	lsls	r2, r2, #6
    71f4:	f042 0202 	orr.w	r2, r2, #2
    71f8:	f012 f930 	bl	1945c <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    71fc:	7829      	ldrb	r1, [r5, #0]
    71fe:	4608      	mov	r0, r1
    7200:	f013 fdd5 	bl	1adae <att_op_get_type>
    7204:	2800      	cmp	r0, #0
    7206:	d0b7      	beq.n	7178 <bt_att_recv+0x20>
	if (!req) {
    7208:	2900      	cmp	r1, #0
    720a:	d0b5      	beq.n	7178 <bt_att_recv+0x20>
    720c:	2306      	movs	r3, #6
    720e:	2200      	movs	r2, #0
    7210:	4630      	mov	r0, r6
    7212:	f014 f87d 	bl	1b310 <send_err_rsp.part.0>
    7216:	e7af      	b.n	7178 <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
    7218:	2f05      	cmp	r7, #5
    721a:	d118      	bne.n	724e <bt_att_recv+0xf6>
    721c:	f3bf 8f5b 	dmb	ish
    7220:	34e8      	adds	r4, #232	; 0xe8
    7222:	e854 3f00 	ldrex	r3, [r4]
    7226:	f043 0102 	orr.w	r1, r3, #2
    722a:	e844 1c00 	strex	ip, r1, [r4]
    722e:	f1bc 0f00 	cmp.w	ip, #0
    7232:	d1f6      	bne.n	7222 <bt_att_recv+0xca>
    7234:	f3bf 8f5b 	dmb	ish
    7238:	079b      	lsls	r3, r3, #30
    723a:	d508      	bpl.n	724e <bt_att_recv+0xf6>
    723c:	4916      	ldr	r1, [pc, #88]	; (7298 <bt_att_recv+0x140>)
    723e:	4b17      	ldr	r3, [pc, #92]	; (729c <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected indication");
    7240:	481b      	ldr	r0, [pc, #108]	; (72b0 <bt_att_recv+0x158>)
    7242:	1ac9      	subs	r1, r1, r3
    7244:	08c9      	lsrs	r1, r1, #3
    7246:	0189      	lsls	r1, r1, #6
    7248:	f041 0102 	orr.w	r1, r1, #2
    724c:	e792      	b.n	7174 <bt_att_recv+0x1c>
	if (buf->len < handler->expect_len) {
    724e:	1813      	adds	r3, r2, r0
    7250:	f8b8 100c 	ldrh.w	r1, [r8, #12]
    7254:	785a      	ldrb	r2, [r3, #1]
    7256:	428a      	cmp	r2, r1
    7258:	d90e      	bls.n	7278 <bt_att_recv+0x120>
    725a:	4a10      	ldr	r2, [pc, #64]	; (729c <bt_att_recv+0x144>)
    725c:	4b0e      	ldr	r3, [pc, #56]	; (7298 <bt_att_recv+0x140>)
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    725e:	4815      	ldr	r0, [pc, #84]	; (72b4 <bt_att_recv+0x15c>)
    7260:	1a9b      	subs	r3, r3, r2
    7262:	08db      	lsrs	r3, r3, #3
    7264:	019b      	lsls	r3, r3, #6
    7266:	782a      	ldrb	r2, [r5, #0]
    7268:	f043 0301 	orr.w	r3, r3, #1
    726c:	f012 f90a 	bl	19484 <log_2>
	if (handler->type == ATT_REQUEST && err) {
    7270:	2f01      	cmp	r7, #1
    7272:	d181      	bne.n	7178 <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
    7274:	2304      	movs	r3, #4
    7276:	e00a      	b.n	728e <bt_att_recv+0x136>
		err = handler->func(att_chan, buf);
    7278:	685b      	ldr	r3, [r3, #4]
    727a:	4641      	mov	r1, r8
    727c:	4630      	mov	r0, r6
    727e:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    7280:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
    7282:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    7284:	f47f af78 	bne.w	7178 <bt_att_recv+0x20>
    7288:	2800      	cmp	r0, #0
    728a:	f43f af75 	beq.w	7178 <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
    728e:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    7290:	2900      	cmp	r1, #0
    7292:	f43f af71 	beq.w	7178 <bt_att_recv+0x20>
    7296:	e7ba      	b.n	720e <bt_att_recv+0xb6>
    7298:	0001ef3c 	.word	0x0001ef3c
    729c:	0001ef2c 	.word	0x0001ef2c
    72a0:	00020d8a 	.word	0x00020d8a
    72a4:	0001f4f0 	.word	0x0001f4f0
    72a8:	00020da5 	.word	0x00020da5
    72ac:	00020dff 	.word	0x00020dff
    72b0:	00020dc1 	.word	0x00020dc1
    72b4:	00020de0 	.word	0x00020de0

000072b8 <att_write_rsp>:
{
    72b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    72bc:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    72be:	6803      	ldr	r3, [r0, #0]
    72c0:	460e      	mov	r6, r1
    72c2:	3900      	subs	r1, #0
{
    72c4:	b086      	sub	sp, #24
    72c6:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    72c8:	bf18      	it	ne
    72ca:	2101      	movne	r1, #1
    72cc:	6818      	ldr	r0, [r3, #0]
{
    72ce:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    72d0:	f014 fbfa 	bl	1bac8 <bt_gatt_change_aware>
    72d4:	2800      	cmp	r0, #0
    72d6:	d04d      	beq.n	7374 <att_write_rsp+0xbc>
	if (!handle) {
    72d8:	2f00      	cmp	r7, #0
    72da:	d04d      	beq.n	7378 <att_write_rsp+0xc0>
	(void)memset(&data, 0, sizeof(data));
    72dc:	2218      	movs	r2, #24
    72de:	2100      	movs	r1, #0
    72e0:	4668      	mov	r0, sp
    72e2:	f012 ffd7 	bl	1a294 <memset>
	if (rsp) {
    72e6:	f1b8 0f00 	cmp.w	r8, #0
    72ea:	d126      	bne.n	733a <att_write_rsp+0x82>
	data.conn = chan->att->conn;
    72ec:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    72ee:	4a23      	ldr	r2, [pc, #140]	; (737c <att_write_rsp+0xc4>)
	data.conn = chan->att->conn;
    72f0:	681b      	ldr	r3, [r3, #0]
    72f2:	9300      	str	r3, [sp, #0]
	data.offset = offset;
    72f4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    72f8:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    72fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    72fe:	9303      	str	r3, [sp, #12]
	data.len = len;
    7300:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    7304:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    7308:	2301      	movs	r3, #1
    730a:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    730e:	4639      	mov	r1, r7
    7310:	466b      	mov	r3, sp
    7312:	4638      	mov	r0, r7
	data.req = req;
    7314:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    7318:	f013 fd76 	bl	1ae08 <bt_gatt_foreach_attr>
	if (data.err) {
    731c:	f89d 4014 	ldrb.w	r4, [sp, #20]
    7320:	b30c      	cbz	r4, 7366 <att_write_rsp+0xae>
		if (rsp) {
    7322:	f1b8 0f00 	cmp.w	r8, #0
    7326:	d019      	beq.n	735c <att_write_rsp+0xa4>
			net_buf_unref(data.buf);
    7328:	9801      	ldr	r0, [sp, #4]
    732a:	f00e fa3d 	bl	157a8 <net_buf_unref>
	if (!req) {
    732e:	b976      	cbnz	r6, 734e <att_write_rsp+0x96>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    7330:	2400      	movs	r4, #0
}
    7332:	4620      	mov	r0, r4
    7334:	b006      	add	sp, #24
    7336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    733a:	2200      	movs	r2, #0
    733c:	4641      	mov	r1, r8
    733e:	4628      	mov	r0, r5
    7340:	f7ff fec6 	bl	70d0 <bt_att_chan_create_pdu>
    7344:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    7346:	2800      	cmp	r0, #0
    7348:	d1d0      	bne.n	72ec <att_write_rsp+0x34>
			return BT_ATT_ERR_UNLIKELY;
    734a:	240e      	movs	r4, #14
    734c:	e7f1      	b.n	7332 <att_write_rsp+0x7a>
    734e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    7352:	463a      	mov	r2, r7
    7354:	4631      	mov	r1, r6
    7356:	4628      	mov	r0, r5
    7358:	f013 ffda 	bl	1b310 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    735c:	2e18      	cmp	r6, #24
    735e:	d1e7      	bne.n	7330 <att_write_rsp+0x78>
    7360:	f89d 4014 	ldrb.w	r4, [sp, #20]
    7364:	e7e5      	b.n	7332 <att_write_rsp+0x7a>
	if (data.buf) {
    7366:	9901      	ldr	r1, [sp, #4]
    7368:	2900      	cmp	r1, #0
    736a:	d0e1      	beq.n	7330 <att_write_rsp+0x78>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    736c:	4628      	mov	r0, r5
    736e:	f7ff fd15 	bl	6d9c <bt_att_chan_send_rsp.constprop.0>
    7372:	e7de      	b.n	7332 <att_write_rsp+0x7a>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    7374:	2412      	movs	r4, #18
    7376:	e7dc      	b.n	7332 <att_write_rsp+0x7a>
		return BT_ATT_ERR_INVALID_HANDLE;
    7378:	2401      	movs	r4, #1
    737a:	e7da      	b.n	7332 <att_write_rsp+0x7a>
    737c:	0001af63 	.word	0x0001af63

00007380 <bt_att_create_pdu>:
{
    7380:	b570      	push	{r4, r5, r6, lr}
    7382:	460e      	mov	r6, r1
    7384:	4615      	mov	r5, r2
	att = att_get(conn);
    7386:	f7ff fb9d 	bl	6ac4 <att_get>
	if (!att) {
    738a:	b1c0      	cbz	r0, 73be <bt_att_create_pdu+0x3e>
	return list->head;
    738c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    738e:	1c69      	adds	r1, r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    7390:	b15b      	cbz	r3, 73aa <bt_att_create_pdu+0x2a>
    7392:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
    7396:	d008      	beq.n	73aa <bt_att_create_pdu+0x2a>
	return node->next;
    7398:	681b      	ldr	r3, [r3, #0]
    739a:	b10b      	cbz	r3, 73a0 <bt_att_create_pdu+0x20>
    739c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (len + sizeof(op) > chan->chan.tx.mtu) {
    73a0:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
    73a4:	4291      	cmp	r1, r2
    73a6:	d90c      	bls.n	73c2 <bt_att_create_pdu+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    73a8:	b98b      	cbnz	r3, 73ce <bt_att_create_pdu+0x4e>
    73aa:	4a0e      	ldr	r2, [pc, #56]	; (73e4 <bt_att_create_pdu+0x64>)
    73ac:	4b0e      	ldr	r3, [pc, #56]	; (73e8 <bt_att_create_pdu+0x68>)
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
    73ae:	480f      	ldr	r0, [pc, #60]	; (73ec <bt_att_create_pdu+0x6c>)
    73b0:	1ad2      	subs	r2, r2, r3
    73b2:	08d2      	lsrs	r2, r2, #3
    73b4:	0192      	lsls	r2, r2, #6
    73b6:	f042 0202 	orr.w	r2, r2, #2
    73ba:	f012 f84f 	bl	1945c <log_1>
}
    73be:	2000      	movs	r0, #0
    73c0:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
    73c2:	462a      	mov	r2, r5
    73c4:	4631      	mov	r1, r6
}
    73c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
    73ca:	f7ff be81 	b.w	70d0 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
    73ce:	f513 74a2 	adds.w	r4, r3, #324	; 0x144
    73d2:	d004      	beq.n	73de <bt_att_create_pdu+0x5e>
	return node->next;
    73d4:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    73d8:	b10c      	cbz	r4, 73de <bt_att_create_pdu+0x5e>
    73da:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
    73de:	4618      	mov	r0, r3
    73e0:	4623      	mov	r3, r4
    73e2:	e7dd      	b.n	73a0 <bt_att_create_pdu+0x20>
    73e4:	0001ef3c 	.word	0x0001ef3c
    73e8:	0001ef2c 	.word	0x0001ef2c
    73ec:	00020e19 	.word	0x00020e19

000073f0 <att_prepare_write_req>:
{
    73f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    73f4:	460c      	mov	r4, r1
    73f6:	b087      	sub	sp, #28
    73f8:	4605      	mov	r5, r0
    73fa:	2104      	movs	r1, #4
    73fc:	f104 0008 	add.w	r0, r4, #8
    7400:	f016 fc64 	bl	1dccc <net_buf_simple_pull_mem>
	struct bt_conn *conn = chan->chan.chan.conn;
    7404:	f8d5 b008 	ldr.w	fp, [r5, #8]
	handle = sys_le16_to_cpu(req->handle);
    7408:	f8b0 a000 	ldrh.w	sl, [r0]
	offset = sys_le16_to_cpu(req->offset);
    740c:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	return att_prep_write_rsp(chan, handle, offset, buf->data, buf->len);
    7410:	f8d4 8008 	ldr.w	r8, [r4, #8]
    7414:	89a7      	ldrh	r7, [r4, #12]
	if (!bt_gatt_change_aware(conn, true)) {
    7416:	2101      	movs	r1, #1
    7418:	4658      	mov	r0, fp
	handle = sys_le16_to_cpu(req->handle);
    741a:	fa1f f68a 	uxth.w	r6, sl
	if (!bt_gatt_change_aware(conn, true)) {
    741e:	f014 fb53 	bl	1bac8 <bt_gatt_change_aware>
    7422:	2800      	cmp	r0, #0
    7424:	d04a      	beq.n	74bc <att_prepare_write_req+0xcc>
	if (!handle) {
    7426:	2e00      	cmp	r6, #0
    7428:	d04a      	beq.n	74c0 <att_prepare_write_req+0xd0>
	(void)memset(&data, 0, sizeof(data));
    742a:	2214      	movs	r2, #20
    742c:	2100      	movs	r1, #0
    742e:	a801      	add	r0, sp, #4
    7430:	f012 ff30 	bl	1a294 <memset>
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    7434:	2301      	movs	r3, #1
    7436:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    743a:	4a23      	ldr	r2, [pc, #140]	; (74c8 <att_prepare_write_req+0xd8>)
	data.conn = conn;
    743c:	f8cd b004 	str.w	fp, [sp, #4]
	data.len = len;
    7440:	b2ff      	uxtb	r7, r7
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    7442:	ab01      	add	r3, sp, #4
    7444:	4631      	mov	r1, r6
    7446:	4630      	mov	r0, r6
	data.offset = offset;
    7448:	f8ad 9012 	strh.w	r9, [sp, #18]
	data.value = value;
    744c:	f8cd 800c 	str.w	r8, [sp, #12]
	data.len = len;
    7450:	f8ad 7010 	strh.w	r7, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    7454:	f013 fcd8 	bl	1ae08 <bt_gatt_foreach_attr>
	if (data.err) {
    7458:	f89d 4014 	ldrb.w	r4, [sp, #20]
    745c:	b154      	cbz	r4, 7474 <att_prepare_write_req+0x84>
	if (!req) {
    745e:	4623      	mov	r3, r4
    7460:	4632      	mov	r2, r6
    7462:	2116      	movs	r1, #22
    7464:	4628      	mov	r0, r5
    7466:	f013 ff53 	bl	1b310 <send_err_rsp.part.0>
		return 0;
    746a:	2400      	movs	r4, #0
}
    746c:	4620      	mov	r0, r4
    746e:	b007      	add	sp, #28
    7470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_buf_put(&chan->att->prep_queue, data.buf);
    7474:	6828      	ldr	r0, [r5, #0]
    7476:	9902      	ldr	r1, [sp, #8]
    7478:	3024      	adds	r0, #36	; 0x24
    747a:	f016 fb87 	bl	1db8c <net_buf_put>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_PREPARE_WRITE_RSP, 0);
    747e:	4622      	mov	r2, r4
    7480:	2117      	movs	r1, #23
    7482:	4658      	mov	r0, fp
    7484:	f7ff ff7c 	bl	7380 <bt_att_create_pdu>
    7488:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    748a:	b1d8      	cbz	r0, 74c4 <att_prepare_write_req+0xd4>
	return net_buf_simple_add(&buf->b, len);
    748c:	2104      	movs	r1, #4
    748e:	3008      	adds	r0, #8
    7490:	f016 fbbb 	bl	1dc0a <net_buf_simple_add>
    7494:	4606      	mov	r6, r0
	rsp->handle = sys_cpu_to_le16(handle);
    7496:	f8a0 a000 	strh.w	sl, [r0]
	rsp->offset = sys_cpu_to_le16(offset);
    749a:	f8a0 9002 	strh.w	r9, [r0, #2]
    749e:	9802      	ldr	r0, [sp, #8]
    74a0:	4639      	mov	r1, r7
    74a2:	3008      	adds	r0, #8
    74a4:	f016 fbb1 	bl	1dc0a <net_buf_simple_add>
	memcpy(rsp->value, value, len);
    74a8:	4641      	mov	r1, r8
    74aa:	463a      	mov	r2, r7
    74ac:	1d30      	adds	r0, r6, #4
    74ae:	f012 fee6 	bl	1a27e <memcpy>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    74b2:	9902      	ldr	r1, [sp, #8]
    74b4:	4628      	mov	r0, r5
    74b6:	f7ff fc71 	bl	6d9c <bt_att_chan_send_rsp.constprop.0>
	return 0;
    74ba:	e7d7      	b.n	746c <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    74bc:	2412      	movs	r4, #18
    74be:	e7d5      	b.n	746c <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_INVALID_HANDLE;
    74c0:	2401      	movs	r4, #1
    74c2:	e7d3      	b.n	746c <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_UNLIKELY;
    74c4:	240e      	movs	r4, #14
    74c6:	e7d1      	b.n	746c <att_prepare_write_req+0x7c>
    74c8:	00006f15 	.word	0x00006f15

000074cc <att_read_group_req>:
{
    74cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    74d0:	898c      	ldrh	r4, [r1, #12]
    74d2:	3c04      	subs	r4, #4
    74d4:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    74d6:	2c02      	cmp	r4, #2
{
    74d8:	4605      	mov	r5, r0
    74da:	b08c      	sub	sp, #48	; 0x30
    74dc:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    74de:	d001      	beq.n	74e4 <att_read_group_req+0x18>
    74e0:	2c10      	cmp	r4, #16
    74e2:	d16e      	bne.n	75c2 <att_read_group_req+0xf6>
	return net_buf_simple_pull_mem(&buf->b, len);
    74e4:	2104      	movs	r1, #4
    74e6:	3008      	adds	r0, #8
    74e8:	f016 fbf0 	bl	1dccc <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    74ec:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    74f0:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    74f2:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    74f4:	1d01      	adds	r1, r0, #4
    74f6:	4622      	mov	r2, r4
    74f8:	4640      	mov	r0, r8
    74fa:	f013 f930 	bl	1a75e <bt_uuid_create>
    74fe:	2800      	cmp	r0, #0
    7500:	d061      	beq.n	75c6 <att_read_group_req+0xfa>
	if (!start || !end) {
    7502:	2e00      	cmp	r6, #0
    7504:	d03a      	beq.n	757c <att_read_group_req+0xb0>
    7506:	2400      	movs	r4, #0
    7508:	2f00      	cmp	r7, #0
    750a:	d036      	beq.n	757a <att_read_group_req+0xae>
	if (start > end) {
    750c:	42b7      	cmp	r7, r6
    750e:	d335      	bcc.n	757c <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    7510:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    7514:	a901      	add	r1, sp, #4
    7516:	4640      	mov	r0, r8
    7518:	f88d 4004 	strb.w	r4, [sp, #4]
    751c:	f8ad 3006 	strh.w	r3, [sp, #6]
    7520:	f013 f8ef 	bl	1a702 <bt_uuid_cmp>
    7524:	2800      	cmp	r0, #0
    7526:	d134      	bne.n	7592 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
    7528:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    752a:	2214      	movs	r2, #20
    752c:	2100      	movs	r1, #0
    752e:	a807      	add	r0, sp, #28
    7530:	f012 feb0 	bl	1a294 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    7534:	2201      	movs	r2, #1
    7536:	2111      	movs	r1, #17
    7538:	4620      	mov	r0, r4
    753a:	f7ff ff21 	bl	7380 <bt_att_create_pdu>
    753e:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    7540:	2800      	cmp	r0, #0
    7542:	d040      	beq.n	75c6 <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
    7544:	2101      	movs	r1, #1
    7546:	3008      	adds	r0, #8
	data.uuid = uuid;
    7548:	e9cd 5807 	strd	r5, r8, [sp, #28]
    754c:	f016 fb5d 	bl	1dc0a <net_buf_simple_add>
	data.rsp->len = 0U;
    7550:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    7554:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    7556:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    7558:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    755c:	4a1b      	ldr	r2, [pc, #108]	; (75cc <att_read_group_req+0x100>)
	data.group = NULL;
    755e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    7562:	4639      	mov	r1, r7
    7564:	4630      	mov	r0, r6
    7566:	f013 fc4f 	bl	1ae08 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    756a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    756c:	781c      	ldrb	r4, [r3, #0]
    756e:	bb1c      	cbnz	r4, 75b8 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
    7570:	9809      	ldr	r0, [sp, #36]	; 0x24
    7572:	f00e f919 	bl	157a8 <net_buf_unref>
	if (!req) {
    7576:	230a      	movs	r3, #10
    7578:	e018      	b.n	75ac <att_read_group_req+0xe0>
			*err = 0U;
    757a:	463e      	mov	r6, r7
	if (!req) {
    757c:	2301      	movs	r3, #1
    757e:	4632      	mov	r2, r6
    7580:	2110      	movs	r1, #16
    7582:	4628      	mov	r0, r5
    7584:	f013 fec4 	bl	1b310 <send_err_rsp.part.0>
		return 0;
    7588:	2400      	movs	r4, #0
}
    758a:	4620      	mov	r0, r4
    758c:	b00c      	add	sp, #48	; 0x30
    758e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    7592:	f642 0301 	movw	r3, #10241	; 0x2801
    7596:	a907      	add	r1, sp, #28
    7598:	4640      	mov	r0, r8
    759a:	f88d 401c 	strb.w	r4, [sp, #28]
    759e:	f8ad 301e 	strh.w	r3, [sp, #30]
    75a2:	f013 f8ae 	bl	1a702 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    75a6:	2800      	cmp	r0, #0
    75a8:	d0be      	beq.n	7528 <att_read_group_req+0x5c>
	if (!req) {
    75aa:	2310      	movs	r3, #16
    75ac:	4632      	mov	r2, r6
    75ae:	2110      	movs	r1, #16
    75b0:	4628      	mov	r0, r5
    75b2:	f013 fead 	bl	1b310 <send_err_rsp.part.0>
		return 0;
    75b6:	e7e8      	b.n	758a <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    75b8:	9909      	ldr	r1, [sp, #36]	; 0x24
    75ba:	4628      	mov	r0, r5
    75bc:	f7ff fbee 	bl	6d9c <bt_att_chan_send_rsp.constprop.0>
	return 0;
    75c0:	e7e2      	b.n	7588 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
    75c2:	2404      	movs	r4, #4
    75c4:	e7e1      	b.n	758a <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
    75c6:	240e      	movs	r4, #14
    75c8:	e7df      	b.n	758a <att_read_group_req+0xbe>
    75ca:	bf00      	nop
    75cc:	00006dc1 	.word	0x00006dc1

000075d0 <att_read_mult_req>:
{
    75d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    75d4:	6886      	ldr	r6, [r0, #8]
{
    75d6:	b085      	sub	sp, #20
    75d8:	4604      	mov	r4, r0
    75da:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
    75dc:	4630      	mov	r0, r6
    75de:	2101      	movs	r1, #1
    75e0:	f014 fa72 	bl	1bac8 <bt_gatt_change_aware>
    75e4:	b3b8      	cbz	r0, 7656 <att_read_mult_req+0x86>
	(void)memset(&data, 0, sizeof(data));
    75e6:	2210      	movs	r2, #16
    75e8:	2100      	movs	r1, #0
    75ea:	4668      	mov	r0, sp
    75ec:	f012 fe52 	bl	1a294 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    75f0:	2200      	movs	r2, #0
    75f2:	210f      	movs	r1, #15
    75f4:	4630      	mov	r0, r6
    75f6:	f7ff fec3 	bl	7380 <bt_att_create_pdu>
    75fa:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    75fc:	b368      	cbz	r0, 765a <att_read_mult_req+0x8a>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    75fe:	f8df 9060 	ldr.w	r9, [pc, #96]	; 7660 <att_read_mult_req+0x90>
	data.chan = chan;
    7602:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
    7604:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    7608:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    760c:	89ab      	ldrh	r3, [r5, #12]
    760e:	2b01      	cmp	r3, #1
    7610:	d804      	bhi.n	761c <att_read_mult_req+0x4c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    7612:	9902      	ldr	r1, [sp, #8]
    7614:	4620      	mov	r0, r4
    7616:	f7ff fbc1 	bl	6d9c <bt_att_chan_send_rsp.constprop.0>
    761a:	e018      	b.n	764e <att_read_mult_req+0x7e>
    761c:	4638      	mov	r0, r7
    761e:	f016 fb65 	bl	1dcec <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    7622:	466b      	mov	r3, sp
    7624:	464a      	mov	r2, r9
    7626:	4601      	mov	r1, r0
    7628:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    762a:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    762e:	f013 fbeb 	bl	1ae08 <bt_gatt_foreach_attr>
		if (data.err) {
    7632:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7636:	2b00      	cmp	r3, #0
    7638:	d0e8      	beq.n	760c <att_read_mult_req+0x3c>
			net_buf_unref(data.buf);
    763a:	9802      	ldr	r0, [sp, #8]
    763c:	f00e f8b4 	bl	157a8 <net_buf_unref>
	if (!req) {
    7640:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7644:	4632      	mov	r2, r6
    7646:	210e      	movs	r1, #14
    7648:	4620      	mov	r0, r4
    764a:	f013 fe61 	bl	1b310 <send_err_rsp.part.0>
	return 0;
    764e:	2000      	movs	r0, #0
}
    7650:	b005      	add	sp, #20
    7652:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    7656:	2012      	movs	r0, #18
    7658:	e7fa      	b.n	7650 <att_read_mult_req+0x80>
		return BT_ATT_ERR_UNLIKELY;
    765a:	200e      	movs	r0, #14
    765c:	e7f8      	b.n	7650 <att_read_mult_req+0x80>
    765e:	bf00      	nop
    7660:	0001b1a3 	.word	0x0001b1a3

00007664 <att_read_rsp>:
{
    7664:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    7668:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
    766c:	4605      	mov	r5, r0
    766e:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    7670:	4640      	mov	r0, r8
    7672:	2101      	movs	r1, #1
{
    7674:	4614      	mov	r4, r2
    7676:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    7678:	f014 fa26 	bl	1bac8 <bt_gatt_change_aware>
    767c:	b388      	cbz	r0, 76e2 <att_read_rsp+0x7e>
	if (!handle) {
    767e:	b396      	cbz	r6, 76e6 <att_read_rsp+0x82>
	(void)memset(&data, 0, sizeof(data));
    7680:	2210      	movs	r2, #16
    7682:	2100      	movs	r1, #0
    7684:	4668      	mov	r0, sp
    7686:	f012 fe05 	bl	1a294 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    768a:	2200      	movs	r2, #0
    768c:	4621      	mov	r1, r4
    768e:	4640      	mov	r0, r8
    7690:	f7ff fe76 	bl	7380 <bt_att_create_pdu>
    7694:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    7696:	b340      	cbz	r0, 76ea <att_read_rsp+0x86>
	data.offset = offset;
    7698:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    769c:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    76a0:	2301      	movs	r3, #1
    76a2:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    76a6:	4a12      	ldr	r2, [pc, #72]	; (76f0 <att_read_rsp+0x8c>)
	data.chan = chan;
    76a8:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    76aa:	466b      	mov	r3, sp
    76ac:	4631      	mov	r1, r6
    76ae:	4630      	mov	r0, r6
    76b0:	f013 fbaa 	bl	1ae08 <bt_gatt_foreach_attr>
	if (data.err) {
    76b4:	f89d 400c 	ldrb.w	r4, [sp, #12]
    76b8:	b174      	cbz	r4, 76d8 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
    76ba:	9802      	ldr	r0, [sp, #8]
    76bc:	f00e f874 	bl	157a8 <net_buf_unref>
	if (!req) {
    76c0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    76c4:	4632      	mov	r2, r6
    76c6:	4639      	mov	r1, r7
    76c8:	4628      	mov	r0, r5
    76ca:	f013 fe21 	bl	1b310 <send_err_rsp.part.0>
		return 0;
    76ce:	2400      	movs	r4, #0
}
    76d0:	4620      	mov	r0, r4
    76d2:	b004      	add	sp, #16
    76d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    76d8:	9902      	ldr	r1, [sp, #8]
    76da:	4628      	mov	r0, r5
    76dc:	f7ff fb5e 	bl	6d9c <bt_att_chan_send_rsp.constprop.0>
	return 0;
    76e0:	e7f6      	b.n	76d0 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    76e2:	2412      	movs	r4, #18
    76e4:	e7f4      	b.n	76d0 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
    76e6:	2401      	movs	r4, #1
    76e8:	e7f2      	b.n	76d0 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    76ea:	240e      	movs	r4, #14
    76ec:	e7f0      	b.n	76d0 <att_read_rsp+0x6c>
    76ee:	bf00      	nop
    76f0:	0001b1a3 	.word	0x0001b1a3

000076f4 <att_read_type_req>:
{
    76f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    76f8:	898c      	ldrh	r4, [r1, #12]
    76fa:	3c04      	subs	r4, #4
    76fc:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    76fe:	2c02      	cmp	r4, #2
{
    7700:	4605      	mov	r5, r0
    7702:	b08c      	sub	sp, #48	; 0x30
    7704:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    7706:	d001      	beq.n	770c <att_read_type_req+0x18>
    7708:	2c10      	cmp	r4, #16
    770a:	d14f      	bne.n	77ac <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
    770c:	2104      	movs	r1, #4
    770e:	3008      	adds	r0, #8
    7710:	f016 fadc 	bl	1dccc <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    7714:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    7718:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    771a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    771c:	1d01      	adds	r1, r0, #4
    771e:	4622      	mov	r2, r4
    7720:	4640      	mov	r0, r8
    7722:	f013 f81c 	bl	1a75e <bt_uuid_create>
    7726:	b188      	cbz	r0, 774c <att_read_type_req+0x58>
	if (!start || !end) {
    7728:	b19e      	cbz	r6, 7752 <att_read_type_req+0x5e>
    772a:	b18f      	cbz	r7, 7750 <att_read_type_req+0x5c>
	if (start > end) {
    772c:	42be      	cmp	r6, r7
    772e:	d810      	bhi.n	7752 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    7730:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    7732:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    7734:	2100      	movs	r1, #0
    7736:	eb0d 0002 	add.w	r0, sp, r2
    773a:	f012 fdab 	bl	1a294 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    773e:	2201      	movs	r2, #1
    7740:	2109      	movs	r1, #9
    7742:	4620      	mov	r0, r4
    7744:	f7ff fe1c 	bl	7380 <bt_att_create_pdu>
    7748:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    774a:	b968      	cbnz	r0, 7768 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
    774c:	240e      	movs	r4, #14
    774e:	e007      	b.n	7760 <att_read_type_req+0x6c>
			*err = 0U;
    7750:	463e      	mov	r6, r7
	if (!req) {
    7752:	2301      	movs	r3, #1
    7754:	4632      	mov	r2, r6
    7756:	2108      	movs	r1, #8
    7758:	4628      	mov	r0, r5
    775a:	f013 fdd9 	bl	1b310 <send_err_rsp.part.0>
		return 0;
    775e:	2400      	movs	r4, #0
}
    7760:	4620      	mov	r0, r4
    7762:	b00c      	add	sp, #48	; 0x30
    7764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    7768:	2101      	movs	r1, #1
    776a:	3008      	adds	r0, #8
	data.uuid = uuid;
    776c:	e9cd 5806 	strd	r5, r8, [sp, #24]
    7770:	f016 fa4b 	bl	1dc0a <net_buf_simple_add>
	data.rsp->len = 0U;
    7774:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    7778:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    777a:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    777c:	4a0c      	ldr	r2, [pc, #48]	; (77b0 <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
    777e:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    7782:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    7784:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    7788:	4630      	mov	r0, r6
    778a:	ab06      	add	r3, sp, #24
    778c:	f013 fb3c 	bl	1ae08 <bt_gatt_foreach_attr>
	if (data.err) {
    7790:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    7794:	b12c      	cbz	r4, 77a2 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    7796:	9808      	ldr	r0, [sp, #32]
    7798:	f00e f806 	bl	157a8 <net_buf_unref>
	if (!req) {
    779c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    77a0:	e7d8      	b.n	7754 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    77a2:	9908      	ldr	r1, [sp, #32]
    77a4:	4628      	mov	r0, r5
    77a6:	f7ff faf9 	bl	6d9c <bt_att_chan_send_rsp.constprop.0>
	return 0;
    77aa:	e7d9      	b.n	7760 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
    77ac:	2404      	movs	r4, #4
    77ae:	e7d7      	b.n	7760 <att_read_type_req+0x6c>
    77b0:	00006e6d 	.word	0x00006e6d

000077b4 <att_find_type_req>:
{
    77b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    77b8:	4688      	mov	r8, r1
    77ba:	b086      	sub	sp, #24
    77bc:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
    77be:	2106      	movs	r1, #6
    77c0:	f108 0008 	add.w	r0, r8, #8
    77c4:	f016 fa82 	bl	1dccc <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    77c8:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
    77ca:	b317      	cbz	r7, 7812 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
    77cc:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
    77d0:	f1b9 0f00 	cmp.w	r9, #0
    77d4:	d01c      	beq.n	7810 <att_find_type_req+0x5c>
	if (start > end) {
    77d6:	45b9      	cmp	r9, r7
    77d8:	d31b      	bcc.n	7812 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
    77da:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    77dc:	f8ad 3002 	strh.w	r3, [sp, #2]
    77e0:	2400      	movs	r4, #0
    77e2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    77e6:	a901      	add	r1, sp, #4
    77e8:	4668      	mov	r0, sp
	value = buf->data;
    77ea:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    77ee:	f88d 4000 	strb.w	r4, [sp]
    77f2:	f88d 4004 	strb.w	r4, [sp, #4]
    77f6:	f8ad 3006 	strh.w	r3, [sp, #6]
    77fa:	f012 ff82 	bl	1a702 <bt_uuid_cmp>
    77fe:	4606      	mov	r6, r0
    7800:	b190      	cbz	r0, 7828 <att_find_type_req+0x74>
	if (!req) {
    7802:	230a      	movs	r3, #10
    7804:	463a      	mov	r2, r7
    7806:	2106      	movs	r1, #6
    7808:	4628      	mov	r0, r5
    780a:	f013 fd81 	bl	1b310 <send_err_rsp.part.0>
		return 0;
    780e:	e007      	b.n	7820 <att_find_type_req+0x6c>
			*err = 0U;
    7810:	464f      	mov	r7, r9
	if (!req) {
    7812:	2301      	movs	r3, #1
    7814:	463a      	mov	r2, r7
    7816:	2106      	movs	r1, #6
    7818:	4628      	mov	r0, r5
    781a:	f013 fd79 	bl	1b310 <send_err_rsp.part.0>
		return 0;
    781e:	2400      	movs	r4, #0
}
    7820:	4620      	mov	r0, r4
    7822:	b006      	add	sp, #24
    7824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    7828:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
    782c:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    7830:	4601      	mov	r1, r0
    7832:	2214      	movs	r2, #20
    7834:	a801      	add	r0, sp, #4
    7836:	f012 fd2d 	bl	1a294 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    783a:	4632      	mov	r2, r6
    783c:	2107      	movs	r1, #7
    783e:	4640      	mov	r0, r8
    7840:	f7ff fd9e 	bl	7380 <bt_att_create_pdu>
    7844:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    7846:	b1d8      	cbz	r0, 7880 <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    7848:	230a      	movs	r3, #10
    784a:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    784e:	4a0d      	ldr	r2, [pc, #52]	; (7884 <att_find_type_req+0xd0>)
	data.value_len = value_len;
    7850:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    7854:	ab01      	add	r3, sp, #4
    7856:	4649      	mov	r1, r9
    7858:	4638      	mov	r0, r7
	data.value = value;
    785a:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
    785e:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    7860:	f013 fad2 	bl	1ae08 <bt_gatt_foreach_attr>
	if (data.err) {
    7864:	f89d 4015 	ldrb.w	r4, [sp, #21]
    7868:	b12c      	cbz	r4, 7876 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    786a:	9802      	ldr	r0, [sp, #8]
    786c:	f00d ff9c 	bl	157a8 <net_buf_unref>
	if (!req) {
    7870:	f89d 3015 	ldrb.w	r3, [sp, #21]
    7874:	e7ce      	b.n	7814 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    7876:	9902      	ldr	r1, [sp, #8]
    7878:	4628      	mov	r0, r5
    787a:	f7ff fa8f 	bl	6d9c <bt_att_chan_send_rsp.constprop.0>
	return 0;
    787e:	e7cf      	b.n	7820 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    7880:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    7882:	e7cd      	b.n	7820 <att_find_type_req+0x6c>
    7884:	00006b5d 	.word	0x00006b5d

00007888 <att_find_info_req>:
{
    7888:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    788a:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    788c:	881e      	ldrh	r6, [r3, #0]
{
    788e:	b085      	sub	sp, #20
    7890:	4605      	mov	r5, r0
	if (!start || !end) {
    7892:	b19e      	cbz	r6, 78bc <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    7894:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    7896:	b184      	cbz	r4, 78ba <att_find_info_req+0x32>
	if (start > end) {
    7898:	42a6      	cmp	r6, r4
    789a:	d80f      	bhi.n	78bc <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    789c:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
    789e:	2210      	movs	r2, #16
    78a0:	2100      	movs	r1, #0
    78a2:	4668      	mov	r0, sp
    78a4:	f012 fcf6 	bl	1a294 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    78a8:	2200      	movs	r2, #0
    78aa:	2105      	movs	r1, #5
    78ac:	4638      	mov	r0, r7
    78ae:	f7ff fd67 	bl	7380 <bt_att_create_pdu>
    78b2:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    78b4:	b958      	cbnz	r0, 78ce <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    78b6:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    78b8:	e007      	b.n	78ca <att_find_info_req+0x42>
			*err = 0U;
    78ba:	4626      	mov	r6, r4
	if (!req) {
    78bc:	2301      	movs	r3, #1
    78be:	4632      	mov	r2, r6
    78c0:	2104      	movs	r1, #4
    78c2:	4628      	mov	r0, r5
    78c4:	f013 fd24 	bl	1b310 <send_err_rsp.part.0>
	return 0;
    78c8:	2000      	movs	r0, #0
}
    78ca:	b005      	add	sp, #20
    78cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    78ce:	4621      	mov	r1, r4
    78d0:	4a08      	ldr	r2, [pc, #32]	; (78f4 <att_find_info_req+0x6c>)
	data.chan = chan;
    78d2:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    78d4:	466b      	mov	r3, sp
    78d6:	4630      	mov	r0, r6
    78d8:	f013 fa96 	bl	1ae08 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    78dc:	9c02      	ldr	r4, [sp, #8]
    78de:	b924      	cbnz	r4, 78ea <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    78e0:	9801      	ldr	r0, [sp, #4]
    78e2:	f00d ff61 	bl	157a8 <net_buf_unref>
	if (!req) {
    78e6:	230a      	movs	r3, #10
    78e8:	e7e9      	b.n	78be <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    78ea:	9901      	ldr	r1, [sp, #4]
    78ec:	4628      	mov	r0, r5
    78ee:	f7ff fa55 	bl	6d9c <bt_att_chan_send_rsp.constprop.0>
    78f2:	e7e9      	b.n	78c8 <att_find_info_req+0x40>
    78f4:	0001ae1f 	.word	0x0001ae1f

000078f8 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    78f8:	b513      	push	{r0, r1, r4, lr}
    78fa:	4602      	mov	r2, r0
    78fc:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    78fe:	4808      	ldr	r0, [pc, #32]	; (7920 <bt_att_req_alloc+0x28>)
    7900:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
    7902:	2400      	movs	r4, #0
    7904:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    7906:	f00f febb 	bl	17680 <k_mem_slab_alloc>
    790a:	4601      	mov	r1, r0
    790c:	b930      	cbnz	r0, 791c <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
    790e:	9801      	ldr	r0, [sp, #4]
    7910:	2210      	movs	r2, #16
    7912:	f012 fcbf 	bl	1a294 <memset>

	return req;
    7916:	9801      	ldr	r0, [sp, #4]
}
    7918:	b002      	add	sp, #8
    791a:	bd10      	pop	{r4, pc}
		return NULL;
    791c:	4620      	mov	r0, r4
    791e:	e7fb      	b.n	7918 <bt_att_req_alloc+0x20>
    7920:	20000b20 	.word	0x20000b20

00007924 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    7924:	b507      	push	{r0, r1, r2, lr}
    7926:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
    7928:	6880      	ldr	r0, [r0, #8]
    792a:	b120      	cbz	r0, 7936 <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
    792c:	f00d ff3c 	bl	157a8 <net_buf_unref>
		req->buf = NULL;
    7930:	9b01      	ldr	r3, [sp, #4]
    7932:	2200      	movs	r2, #0
    7934:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
    7936:	4803      	ldr	r0, [pc, #12]	; (7944 <bt_att_req_free+0x20>)
    7938:	a901      	add	r1, sp, #4
    793a:	f016 fca7 	bl	1e28c <k_mem_slab_free>
}
    793e:	b003      	add	sp, #12
    7940:	f85d fb04 	ldr.w	pc, [sp], #4
    7944:	20000b20 	.word	0x20000b20

00007948 <att_handle_rsp>:
{
    7948:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    794c:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
    794e:	f500 7088 	add.w	r0, r0, #272	; 0x110
{
    7952:	460f      	mov	r7, r1
    7954:	4690      	mov	r8, r2
    7956:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
    7958:	f016 fe90 	bl	1e67c <k_work_cancel_delayable>
	if (!chan->req) {
    795c:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
    7960:	b9e5      	cbnz	r5, 799c <att_handle_rsp+0x54>
    7962:	4919      	ldr	r1, [pc, #100]	; (79c8 <att_handle_rsp+0x80>)
    7964:	4819      	ldr	r0, [pc, #100]	; (79cc <att_handle_rsp+0x84>)
    7966:	1a40      	subs	r0, r0, r1
    7968:	08c0      	lsrs	r0, r0, #3
		BT_WARN("No pending ATT request");
    796a:	0180      	lsls	r0, r0, #6
    796c:	f040 0102 	orr.w	r1, r0, #2
    7970:	4817      	ldr	r0, [pc, #92]	; (79d0 <att_handle_rsp+0x88>)
    7972:	f011 fd66 	bl	19442 <log_0>
	bt_att_func_t func = NULL;
    7976:	46aa      	mov	sl, r5
	att_req_send_process(chan->att);
    7978:	6820      	ldr	r0, [r4, #0]
    797a:	f013 fc79 	bl	1b270 <att_req_send_process>
	if (func) {
    797e:	f1ba 0f00 	cmp.w	sl, #0
    7982:	d007      	beq.n	7994 <att_handle_rsp+0x4c>
		func(chan->att->conn, err, pdu, len, params);
    7984:	6820      	ldr	r0, [r4, #0]
    7986:	f8cd 9000 	str.w	r9, [sp]
    798a:	6800      	ldr	r0, [r0, #0]
    798c:	4643      	mov	r3, r8
    798e:	463a      	mov	r2, r7
    7990:	4631      	mov	r1, r6
    7992:	47d0      	blx	sl
}
    7994:	2000      	movs	r0, #0
    7996:	b003      	add	sp, #12
    7998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
    799c:	4b0d      	ldr	r3, [pc, #52]	; (79d4 <att_handle_rsp+0x8c>)
    799e:	429d      	cmp	r5, r3
    79a0:	f04f 0b00 	mov.w	fp, #0
    79a4:	d103      	bne.n	79ae <att_handle_rsp+0x66>
		chan->req = NULL;
    79a6:	f8c4 b0f4 	str.w	fp, [r4, #244]	; 0xf4
	bt_att_func_t func = NULL;
    79aa:	46da      	mov	sl, fp
		goto process;
    79ac:	e7e4      	b.n	7978 <att_handle_rsp+0x30>
	func = chan->req->func;
    79ae:	f8d5 a004 	ldr.w	sl, [r5, #4]
	chan->req->func = NULL;
    79b2:	f8c5 b004 	str.w	fp, [r5, #4]
	bt_att_req_free(chan->req);
    79b6:	4628      	mov	r0, r5
	params = chan->req->user_data;
    79b8:	f8d5 900c 	ldr.w	r9, [r5, #12]
	bt_att_req_free(chan->req);
    79bc:	f7ff ffb2 	bl	7924 <bt_att_req_free>
	chan->req = NULL;
    79c0:	f8c4 b0f4 	str.w	fp, [r4, #244]	; 0xf4
    79c4:	e7d8      	b.n	7978 <att_handle_rsp+0x30>
    79c6:	bf00      	nop
    79c8:	0001ef2c 	.word	0x0001ef2c
    79cc:	0001ef3c 	.word	0x0001ef3c
    79d0:	00020e34 	.word	0x00020e34
    79d4:	20001a1c 	.word	0x20001a1c

000079d8 <bt_att_disconnected>:
{
    79d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
    79da:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
    79de:	b085      	sub	sp, #20
    79e0:	4604      	mov	r4, r0
	if (!att_chan->att) {
    79e2:	2d00      	cmp	r5, #0
    79e4:	d056      	beq.n	7a94 <bt_att_disconnected+0xbc>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
    79e6:	f500 719e 	add.w	r1, r0, #316	; 0x13c
    79ea:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    79ee:	f013 fb19 	bl	1b024 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
    79f2:	f1a4 0608 	sub.w	r6, r4, #8
    79f6:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
    79fa:	2200      	movs	r2, #0
    79fc:	2300      	movs	r3, #0
    79fe:	4638      	mov	r0, r7
    7a00:	f016 f883 	bl	1db0a <net_buf_get>
    7a04:	4602      	mov	r2, r0
    7a06:	bb50      	cbnz	r0, 7a5e <bt_att_disconnected+0x86>
	if (chan->req) {
    7a08:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
    7a0c:	b123      	cbz	r3, 7a18 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
    7a0e:	4601      	mov	r1, r0
    7a10:	230e      	movs	r3, #14
    7a12:	4630      	mov	r0, r6
    7a14:	f7ff ff98 	bl	7948 <att_handle_rsp>
	chan->att = NULL;
    7a18:	2300      	movs	r3, #0
    7a1a:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
    7a1e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    7a20:	2b00      	cmp	r3, #0
    7a22:	d137      	bne.n	7a94 <bt_att_disconnected+0xbc>
	att_reset(att);
    7a24:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->prep_queue, K_NO_WAIT))) {
    7a26:	9803      	ldr	r0, [sp, #12]
    7a28:	2200      	movs	r2, #0
    7a2a:	2300      	movs	r3, #0
    7a2c:	3024      	adds	r0, #36	; 0x24
    7a2e:	f016 f86c 	bl	1db0a <net_buf_get>
    7a32:	b9b8      	cbnz	r0, 7a64 <bt_att_disconnected+0x8c>
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    7a34:	9803      	ldr	r0, [sp, #12]
    7a36:	2200      	movs	r2, #0
    7a38:	2300      	movs	r3, #0
    7a3a:	300c      	adds	r0, #12
    7a3c:	f016 f865 	bl	1db0a <net_buf_get>
    7a40:	b998      	cbnz	r0, 7a6a <bt_att_disconnected+0x92>
	att->conn = NULL;
    7a42:	9a03      	ldr	r2, [sp, #12]
	return list->head;
    7a44:	6855      	ldr	r5, [r2, #4]
    7a46:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    7a48:	b995      	cbnz	r5, 7a70 <bt_att_disconnected+0x98>
	k_mem_slab_free(&att_slab, (void **)&att);
    7a4a:	4813      	ldr	r0, [pc, #76]	; (7a98 <bt_att_disconnected+0xc0>)
    7a4c:	a903      	add	r1, sp, #12
    7a4e:	f016 fc1d 	bl	1e28c <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
    7a52:	6820      	ldr	r0, [r4, #0]
}
    7a54:	b005      	add	sp, #20
    7a56:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_gatt_disconnected(ch->chan.conn);
    7a5a:	f001 bbdd 	b.w	9218 <bt_gatt_disconnected>
		net_buf_unref(buf);
    7a5e:	f00d fea3 	bl	157a8 <net_buf_unref>
    7a62:	e7ca      	b.n	79fa <bt_att_disconnected+0x22>
		net_buf_unref(buf);
    7a64:	f00d fea0 	bl	157a8 <net_buf_unref>
    7a68:	e7dd      	b.n	7a26 <bt_att_disconnected+0x4e>
		net_buf_unref(buf);
    7a6a:	f00d fe9d 	bl	157a8 <net_buf_unref>
    7a6e:	e7e1      	b.n	7a34 <bt_att_disconnected+0x5c>
	return node->next;
    7a70:	682e      	ldr	r6, [r5, #0]
		if (req->func) {
    7a72:	686f      	ldr	r7, [r5, #4]
    7a74:	b137      	cbz	r7, 7a84 <bt_att_disconnected+0xac>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
    7a76:	68eb      	ldr	r3, [r5, #12]
    7a78:	9300      	str	r3, [sp, #0]
    7a7a:	2300      	movs	r3, #0
    7a7c:	461a      	mov	r2, r3
    7a7e:	210e      	movs	r1, #14
    7a80:	4618      	mov	r0, r3
    7a82:	47b8      	blx	r7
		bt_att_req_free(req);
    7a84:	4628      	mov	r0, r5
    7a86:	f7ff ff4d 	bl	7924 <bt_att_req_free>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    7a8a:	2e00      	cmp	r6, #0
    7a8c:	d0dd      	beq.n	7a4a <bt_att_disconnected+0x72>
    7a8e:	4635      	mov	r5, r6
    7a90:	6836      	ldr	r6, [r6, #0]
    7a92:	e7ee      	b.n	7a72 <bt_att_disconnected+0x9a>
}
    7a94:	b005      	add	sp, #20
    7a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7a98:	20000ae8 	.word	0x20000ae8

00007a9c <att_timeout>:
    7a9c:	4b08      	ldr	r3, [pc, #32]	; (7ac0 <att_timeout+0x24>)
    7a9e:	4909      	ldr	r1, [pc, #36]	; (7ac4 <att_timeout+0x28>)
{
    7aa0:	b510      	push	{r4, lr}
    7aa2:	1ac9      	subs	r1, r1, r3
    7aa4:	08c9      	lsrs	r1, r1, #3
	BT_ERR("ATT Timeout");
    7aa6:	0189      	lsls	r1, r1, #6
{
    7aa8:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    7aaa:	f041 0101 	orr.w	r1, r1, #1
    7aae:	4806      	ldr	r0, [pc, #24]	; (7ac8 <att_timeout+0x2c>)
    7ab0:	f011 fcc7 	bl	19442 <log_0>
	bt_att_disconnected(&chan->chan.chan);
    7ab4:	f5a4 7084 	sub.w	r0, r4, #264	; 0x108
}
    7ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
    7abc:	f7ff bf8c 	b.w	79d8 <bt_att_disconnected>
    7ac0:	0001ef2c 	.word	0x0001ef2c
    7ac4:	0001ef3c 	.word	0x0001ef3c
    7ac8:	00020e4b 	.word	0x00020e4b

00007acc <db_hash_store>:

static void db_hash_store(void)
{
	int err;

	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
    7acc:	490a      	ldr	r1, [pc, #40]	; (7af8 <db_hash_store+0x2c>)
    7ace:	480b      	ldr	r0, [pc, #44]	; (7afc <db_hash_store+0x30>)
{
    7ad0:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
    7ad2:	2210      	movs	r2, #16
    7ad4:	f7fb fac4 	bl	3060 <settings_save_one>
	if (err) {
    7ad8:	4601      	mov	r1, r0
    7ada:	b158      	cbz	r0, 7af4 <db_hash_store+0x28>
    7adc:	4b08      	ldr	r3, [pc, #32]	; (7b00 <db_hash_store+0x34>)
    7ade:	4a09      	ldr	r2, [pc, #36]	; (7b04 <db_hash_store+0x38>)
		BT_ERR("Failed to save Database Hash (err %d)", err);
    7ae0:	4809      	ldr	r0, [pc, #36]	; (7b08 <db_hash_store+0x3c>)
    7ae2:	1ad2      	subs	r2, r2, r3
    7ae4:	08d2      	lsrs	r2, r2, #3
    7ae6:	0192      	lsls	r2, r2, #6
	}

	BT_DBG("Database Hash stored");
}
    7ae8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
    7aec:	f042 0201 	orr.w	r2, r2, #1
    7af0:	f011 bcb4 	b.w	1945c <log_1>
}
    7af4:	bd08      	pop	{r3, pc}
    7af6:	bf00      	nop
    7af8:	20000ff0 	.word	0x20000ff0
    7afc:	00020e5e 	.word	0x00020e5e
    7b00:	0001ef2c 	.word	0x0001ef2c
    7b04:	0001f014 	.word	0x0001f014
    7b08:	00020e66 	.word	0x00020e66

00007b0c <db_hash_set>:

SETTINGS_STATIC_HANDLER_DEFINE(bt_cf, "bt/cf", NULL, cf_set, NULL, NULL);

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
    7b0c:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
    7b0e:	490b      	ldr	r1, [pc, #44]	; (7b3c <db_hash_set+0x30>)
{
    7b10:	4614      	mov	r4, r2
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
    7b12:	4618      	mov	r0, r3
    7b14:	2210      	movs	r2, #16
    7b16:	47a0      	blx	r4
	if (len < 0) {
    7b18:	1e04      	subs	r4, r0, #0
    7b1a:	da0c      	bge.n	7b36 <db_hash_set+0x2a>
    7b1c:	4a08      	ldr	r2, [pc, #32]	; (7b40 <db_hash_set+0x34>)
    7b1e:	4b09      	ldr	r3, [pc, #36]	; (7b44 <db_hash_set+0x38>)
		BT_ERR("Failed to decode value (err %zd)", len);
    7b20:	4809      	ldr	r0, [pc, #36]	; (7b48 <db_hash_set+0x3c>)
    7b22:	1ad2      	subs	r2, r2, r3
    7b24:	08d2      	lsrs	r2, r2, #3
    7b26:	0192      	lsls	r2, r2, #6
    7b28:	f042 0201 	orr.w	r2, r2, #1
    7b2c:	4621      	mov	r1, r4
    7b2e:	f011 fc95 	bl	1945c <log_1>

	BT_HEXDUMP_DBG(db_hash.stored_hash, sizeof(db_hash.stored_hash),
		       "Stored Hash: ");

	return 0;
}
    7b32:	4620      	mov	r0, r4
    7b34:	bd10      	pop	{r4, pc}
	return 0;
    7b36:	2400      	movs	r4, #0
    7b38:	e7fb      	b.n	7b32 <db_hash_set+0x26>
    7b3a:	bf00      	nop
    7b3c:	20001000 	.word	0x20001000
    7b40:	0001f014 	.word	0x0001f014
    7b44:	0001ef2c 	.word	0x0001ef2c
    7b48:	00020e8c 	.word	0x00020e8c

00007b4c <find_cf_cfg>:
{
    7b4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7b4e:	4d0d      	ldr	r5, [pc, #52]	; (7b84 <find_cf_cfg+0x38>)
		if (!conn) {
    7b50:	4604      	mov	r4, r0
    7b52:	b960      	cbnz	r0, 7b6e <find_cf_cfg+0x22>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    7b54:	9000      	str	r0, [sp, #0]
    7b56:	4669      	mov	r1, sp
    7b58:	f8cd 0003 	str.w	r0, [sp, #3]
    7b5c:	1c68      	adds	r0, r5, #1
    7b5e:	f013 fdc4 	bl	1b6ea <bt_addr_le_cmp>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    7b62:	2800      	cmp	r0, #0
    7b64:	bf08      	it	eq
    7b66:	462c      	moveq	r4, r5
}
    7b68:	4620      	mov	r0, r4
    7b6a:	b003      	add	sp, #12
    7b6c:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    7b6e:	462a      	mov	r2, r5
    7b70:	f812 1b01 	ldrb.w	r1, [r2], #1
    7b74:	f013 f81e 	bl	1abb4 <bt_conn_is_peer_addr_le>
	return NULL;
    7b78:	2800      	cmp	r0, #0
    7b7a:	bf14      	ite	ne
    7b7c:	462c      	movne	r4, r5
    7b7e:	2400      	moveq	r4, #0
    7b80:	e7f2      	b.n	7b68 <find_cf_cfg+0x1c>
    7b82:	bf00      	nop
    7b84:	20001a34 	.word	0x20001a34

00007b88 <find_sc_cfg>:
{
    7b88:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
    7b8a:	4c06      	ldr	r4, [pc, #24]	; (7ba4 <find_sc_cfg+0x1c>)
    7b8c:	7823      	ldrb	r3, [r4, #0]
    7b8e:	4283      	cmp	r3, r0
    7b90:	d103      	bne.n	7b9a <find_sc_cfg+0x12>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
    7b92:	1c60      	adds	r0, r4, #1
    7b94:	f013 fda9 	bl	1b6ea <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
    7b98:	b108      	cbz	r0, 7b9e <find_sc_cfg+0x16>
	return NULL;
    7b9a:	2000      	movs	r0, #0
}
    7b9c:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
    7b9e:	4620      	mov	r0, r4
    7ba0:	e7fc      	b.n	7b9c <find_sc_cfg+0x14>
    7ba2:	bf00      	nop
    7ba4:	20002e14 	.word	0x20002e14

00007ba8 <bt_gatt_attr_write_ccc>:
{
    7ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7bac:	461f      	mov	r7, r3
    7bae:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
    7bb2:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
    7bb6:	4604      	mov	r4, r0
    7bb8:	4688      	mov	r8, r1
	if (offset) {
    7bba:	2b00      	cmp	r3, #0
    7bbc:	d147      	bne.n	7c4e <bt_gatt_attr_write_ccc+0xa6>
	if (!len || len > sizeof(uint16_t)) {
    7bbe:	1e7b      	subs	r3, r7, #1
    7bc0:	2b01      	cmp	r3, #1
    7bc2:	d847      	bhi.n	7c54 <bt_gatt_attr_write_ccc+0xac>
		value = *(uint8_t *)buf;
    7bc4:	7816      	ldrb	r6, [r2, #0]
	if (len < sizeof(uint16_t)) {
    7bc6:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
    7bc8:	4649      	mov	r1, r9
    7bca:	bf14      	ite	ne
    7bcc:	8816      	ldrhne	r6, [r2, #0]
		value = *(uint8_t *)buf;
    7bce:	b2b6      	uxtheq	r6, r6
	cfg = find_ccc_cfg(conn, ccc);
    7bd0:	f013 fd9c 	bl	1b70c <find_ccc_cfg>
	if (!cfg) {
    7bd4:	4605      	mov	r5, r0
    7bd6:	b9e0      	cbnz	r0, 7c12 <bt_gatt_attr_write_ccc+0x6a>
		if (!value) {
    7bd8:	b916      	cbnz	r6, 7be0 <bt_gatt_attr_write_ccc+0x38>
			return len;
    7bda:	4638      	mov	r0, r7
}
    7bdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
    7be0:	4649      	mov	r1, r9
    7be2:	f013 fd93 	bl	1b70c <find_ccc_cfg>
		if (!cfg) {
    7be6:	4605      	mov	r5, r0
    7be8:	b960      	cbnz	r0, 7c04 <bt_gatt_attr_write_ccc+0x5c>
    7bea:	4b1c      	ldr	r3, [pc, #112]	; (7c5c <bt_gatt_attr_write_ccc+0xb4>)
    7bec:	491c      	ldr	r1, [pc, #112]	; (7c60 <bt_gatt_attr_write_ccc+0xb8>)
			BT_WARN("No space to store CCC cfg");
    7bee:	481d      	ldr	r0, [pc, #116]	; (7c64 <bt_gatt_attr_write_ccc+0xbc>)
    7bf0:	1ac9      	subs	r1, r1, r3
    7bf2:	08c9      	lsrs	r1, r1, #3
    7bf4:	0189      	lsls	r1, r1, #6
    7bf6:	f041 0102 	orr.w	r1, r1, #2
    7bfa:	f011 fc22 	bl	19442 <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    7bfe:	f06f 0010 	mvn.w	r0, #16
    7c02:	e7eb      	b.n	7bdc <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    7c04:	f104 0188 	add.w	r1, r4, #136	; 0x88
    7c08:	3001      	adds	r0, #1
    7c0a:	f013 fda5 	bl	1b758 <bt_addr_le_copy>
		cfg->id = conn->id;
    7c0e:	7a23      	ldrb	r3, [r4, #8]
    7c10:	702b      	strb	r3, [r5, #0]
	if (ccc->cfg_write) {
    7c12:	f8d9 3010 	ldr.w	r3, [r9, #16]
    7c16:	b973      	cbnz	r3, 7c36 <bt_gatt_attr_write_ccc+0x8e>
	if (cfg->value != ccc->value) {
    7c18:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
    7c1c:	812e      	strh	r6, [r5, #8]
	if (cfg->value != ccc->value) {
    7c1e:	42b3      	cmp	r3, r6
    7c20:	d003      	beq.n	7c2a <bt_gatt_attr_write_ccc+0x82>
		gatt_ccc_changed(attr, ccc);
    7c22:	4649      	mov	r1, r9
    7c24:	4640      	mov	r0, r8
    7c26:	f013 fcd2 	bl	1b5ce <gatt_ccc_changed>
	if (!value) {
    7c2a:	2e00      	cmp	r6, #0
    7c2c:	d1d5      	bne.n	7bda <bt_gatt_attr_write_ccc+0x32>
		clear_ccc_cfg(cfg);
    7c2e:	4628      	mov	r0, r5
    7c30:	f013 fd95 	bl	1b75e <clear_ccc_cfg>
    7c34:	e7d1      	b.n	7bda <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
    7c36:	4632      	mov	r2, r6
    7c38:	4641      	mov	r1, r8
    7c3a:	4620      	mov	r0, r4
    7c3c:	4798      	blx	r3
		if (write < 0) {
    7c3e:	2800      	cmp	r0, #0
    7c40:	dbcc      	blt.n	7bdc <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
    7c42:	1e44      	subs	r4, r0, #1
    7c44:	2c01      	cmp	r4, #1
    7c46:	d9e7      	bls.n	7c18 <bt_gatt_attr_write_ccc+0x70>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
    7c48:	f06f 000d 	mvn.w	r0, #13
    7c4c:	e7c6      	b.n	7bdc <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    7c4e:	f06f 0006 	mvn.w	r0, #6
    7c52:	e7c3      	b.n	7bdc <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    7c54:	f06f 000c 	mvn.w	r0, #12
    7c58:	e7c0      	b.n	7bdc <bt_gatt_attr_write_ccc+0x34>
    7c5a:	bf00      	nop
    7c5c:	0001ef2c 	.word	0x0001ef2c
    7c60:	0001f014 	.word	0x0001f014
    7c64:	00020ead 	.word	0x00020ead

00007c68 <sc_store>:
{
    7c68:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
    7c6a:	4605      	mov	r5, r0
{
    7c6c:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
    7c6e:	f815 2b01 	ldrb.w	r2, [r5], #1
{
    7c72:	4604      	mov	r4, r0
	if (cfg->id) {
    7c74:	b1fa      	cbz	r2, 7cb6 <sc_store+0x4e>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
    7c76:	ae02      	add	r6, sp, #8
    7c78:	2104      	movs	r1, #4
    7c7a:	4630      	mov	r0, r6
    7c7c:	f010 feec 	bl	18a58 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
    7c80:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
    7c82:	4a0e      	ldr	r2, [pc, #56]	; (7cbc <sc_store+0x54>)
    7c84:	462b      	mov	r3, r5
    7c86:	2124      	movs	r1, #36	; 0x24
    7c88:	a803      	add	r0, sp, #12
    7c8a:	f7fc f9e1 	bl	4050 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
    7c8e:	f104 0108 	add.w	r1, r4, #8
    7c92:	2204      	movs	r2, #4
    7c94:	a803      	add	r0, sp, #12
    7c96:	f7fb f9e3 	bl	3060 <settings_save_one>
	if (err) {
    7c9a:	4601      	mov	r1, r0
    7c9c:	b148      	cbz	r0, 7cb2 <sc_store+0x4a>
    7c9e:	4a08      	ldr	r2, [pc, #32]	; (7cc0 <sc_store+0x58>)
    7ca0:	4b08      	ldr	r3, [pc, #32]	; (7cc4 <sc_store+0x5c>)
		BT_ERR("failed to store SC (err %d)", err);
    7ca2:	4809      	ldr	r0, [pc, #36]	; (7cc8 <sc_store+0x60>)
    7ca4:	1ad2      	subs	r2, r2, r3
    7ca6:	08d2      	lsrs	r2, r2, #3
    7ca8:	0192      	lsls	r2, r2, #6
    7caa:	f042 0201 	orr.w	r2, r2, #1
    7cae:	f011 fbd5 	bl	1945c <log_1>
}
    7cb2:	b00c      	add	sp, #48	; 0x30
    7cb4:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
    7cb6:	9200      	str	r2, [sp, #0]
    7cb8:	e7e3      	b.n	7c82 <sc_store+0x1a>
    7cba:	bf00      	nop
    7cbc:	00021129 	.word	0x00021129
    7cc0:	0001f014 	.word	0x0001f014
    7cc4:	0001ef2c 	.word	0x0001ef2c
    7cc8:	00020ec7 	.word	0x00020ec7

00007ccc <sc_save>:
{
    7ccc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    7cd0:	4680      	mov	r8, r0
    7cd2:	460f      	mov	r7, r1
    7cd4:	4616      	mov	r6, r2
    7cd6:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
    7cd8:	f7ff ff56 	bl	7b88 <find_sc_cfg>
	if (!cfg) {
    7cdc:	4604      	mov	r4, r0
    7cde:	b9c8      	cbnz	r0, 7d14 <sc_save+0x48>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    7ce0:	4669      	mov	r1, sp
    7ce2:	9000      	str	r0, [sp, #0]
    7ce4:	f8cd 0003 	str.w	r0, [sp, #3]
    7ce8:	f7ff ff4e 	bl	7b88 <find_sc_cfg>
		if (!cfg) {
    7cec:	4604      	mov	r4, r0
    7cee:	b960      	cbnz	r0, 7d0a <sc_save+0x3e>
    7cf0:	4916      	ldr	r1, [pc, #88]	; (7d4c <sc_save+0x80>)
    7cf2:	4b17      	ldr	r3, [pc, #92]	; (7d50 <sc_save+0x84>)
			BT_ERR("unable to save SC: no cfg left");
    7cf4:	4817      	ldr	r0, [pc, #92]	; (7d54 <sc_save+0x88>)
    7cf6:	1ac9      	subs	r1, r1, r3
    7cf8:	08c9      	lsrs	r1, r1, #3
    7cfa:	0189      	lsls	r1, r1, #6
    7cfc:	f041 0101 	orr.w	r1, r1, #1
    7d00:	f011 fb9f 	bl	19442 <log_0>
}
    7d04:	b002      	add	sp, #8
    7d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
    7d0a:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
    7d0e:	4639      	mov	r1, r7
    7d10:	f013 fd22 	bl	1b758 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
    7d14:	8922      	ldrh	r2, [r4, #8]
    7d16:	8963      	ldrh	r3, [r4, #10]
    7d18:	b97a      	cbnz	r2, 7d3a <sc_save+0x6e>
    7d1a:	b983      	cbnz	r3, 7d3e <sc_save+0x72>
		cfg->data.start = start;
    7d1c:	8126      	strh	r6, [r4, #8]
		*end = new_end;
    7d1e:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
    7d20:	4621      	mov	r1, r4
    7d22:	f811 0b01 	ldrb.w	r0, [r1], #1
    7d26:	f012 fddc 	bl	1a8e2 <bt_addr_le_is_bonded>
    7d2a:	2800      	cmp	r0, #0
    7d2c:	d0ea      	beq.n	7d04 <sc_save+0x38>
		sc_store(cfg);
    7d2e:	4620      	mov	r0, r4
}
    7d30:	b002      	add	sp, #8
    7d32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
    7d36:	f7ff bf97 	b.w	7c68 <sc_store>
	if (new_start >= *start && new_end <= *end) {
    7d3a:	4296      	cmp	r6, r2
    7d3c:	d302      	bcc.n	7d44 <sc_save+0x78>
    7d3e:	429d      	cmp	r5, r3
    7d40:	d8ed      	bhi.n	7d1e <sc_save+0x52>
    7d42:	e7df      	b.n	7d04 <sc_save+0x38>
	if (*end < new_end) {
    7d44:	429d      	cmp	r5, r3
		*start = new_start;
    7d46:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
    7d48:	d9ea      	bls.n	7d20 <sc_save+0x54>
    7d4a:	e7e8      	b.n	7d1e <sc_save+0x52>
    7d4c:	0001f014 	.word	0x0001f014
    7d50:	0001ef2c 	.word	0x0001ef2c
    7d54:	00020ee3 	.word	0x00020ee3

00007d58 <db_hash_commit>:

static int db_hash_commit(void)
{
    7d58:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    7d5a:	2108      	movs	r1, #8
    7d5c:	4804      	ldr	r0, [pc, #16]	; (7d70 <db_hash_commit+0x18>)
    7d5e:	f013 fcb5 	bl	1b6cc <atomic_or>
	atomic_set_bit(gatt_sc.flags, DB_HASH_LOAD);
	/* Reschedule work to calculate and compare against the Hash value
	 * loaded from flash.
	 */
	k_work_reschedule(&db_hash.work, K_NO_WAIT);
    7d62:	2200      	movs	r2, #0
    7d64:	2300      	movs	r3, #0
    7d66:	4803      	ldr	r0, [pc, #12]	; (7d74 <db_hash_commit+0x1c>)
    7d68:	f010 f87e 	bl	17e68 <k_work_reschedule>

	return 0;
}
    7d6c:	2000      	movs	r0, #0
    7d6e:	bd08      	pop	{r3, pc}
    7d70:	200010b8 	.word	0x200010b8
    7d74:	20001010 	.word	0x20001010

00007d78 <sc_set>:
{
    7d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7d7c:	460e      	mov	r6, r1
    7d7e:	b086      	sub	sp, #24
    7d80:	4617      	mov	r7, r2
    7d82:	4698      	mov	r8, r3
	if (!name) {
    7d84:	4605      	mov	r5, r0
    7d86:	b978      	cbnz	r0, 7da8 <sc_set+0x30>
    7d88:	493b      	ldr	r1, [pc, #236]	; (7e78 <sc_set+0x100>)
    7d8a:	4b3c      	ldr	r3, [pc, #240]	; (7e7c <sc_set+0x104>)
		BT_ERR("Insufficient number of arguments");
    7d8c:	483c      	ldr	r0, [pc, #240]	; (7e80 <sc_set+0x108>)
    7d8e:	1ac9      	subs	r1, r1, r3
    7d90:	08c9      	lsrs	r1, r1, #3
    7d92:	0189      	lsls	r1, r1, #6
    7d94:	f041 0101 	orr.w	r1, r1, #1
    7d98:	f011 fb53 	bl	19442 <log_0>
		return -EINVAL;
    7d9c:	f06f 0415 	mvn.w	r4, #21
}
    7da0:	4620      	mov	r0, r4
    7da2:	b006      	add	sp, #24
    7da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
    7da8:	a902      	add	r1, sp, #8
    7daa:	f012 fad8 	bl	1a35e <bt_settings_decode_key>
	if (err) {
    7dae:	4604      	mov	r4, r0
    7db0:	b178      	cbz	r0, 7dd2 <sc_set+0x5a>
    7db2:	4a32      	ldr	r2, [pc, #200]	; (7e7c <sc_set+0x104>)
    7db4:	4c30      	ldr	r4, [pc, #192]	; (7e78 <sc_set+0x100>)
    7db6:	4628      	mov	r0, r5
    7db8:	1aa4      	subs	r4, r4, r2
    7dba:	f7fa fc9f 	bl	26fc <z_log_strdup>
    7dbe:	08e4      	lsrs	r4, r4, #3
		BT_ERR("Unable to decode address %s", log_strdup(name));
    7dc0:	01a4      	lsls	r4, r4, #6
    7dc2:	f044 0401 	orr.w	r4, r4, #1
    7dc6:	4601      	mov	r1, r0
    7dc8:	482e      	ldr	r0, [pc, #184]	; (7e84 <sc_set+0x10c>)
    7dca:	4622      	mov	r2, r4
    7dcc:	f011 fb46 	bl	1945c <log_1>
    7dd0:	e7e4      	b.n	7d9c <sc_set+0x24>
	settings_name_next(name, &next);
    7dd2:	a901      	add	r1, sp, #4
    7dd4:	4628      	mov	r0, r5
    7dd6:	f011 feb7 	bl	19b48 <settings_name_next>
	if (!next) {
    7dda:	9801      	ldr	r0, [sp, #4]
    7ddc:	b170      	cbz	r0, 7dfc <sc_set+0x84>
		unsigned long next_id = strtoul(next, NULL, 10);
    7dde:	4621      	mov	r1, r4
    7de0:	220a      	movs	r2, #10
    7de2:	f012 f979 	bl	1a0d8 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
    7de6:	4601      	mov	r1, r0
    7de8:	b140      	cbz	r0, 7dfc <sc_set+0x84>
    7dea:	4a23      	ldr	r2, [pc, #140]	; (7e78 <sc_set+0x100>)
    7dec:	4b23      	ldr	r3, [pc, #140]	; (7e7c <sc_set+0x104>)
			BT_ERR("Invalid local identity %lu", next_id);
    7dee:	4826      	ldr	r0, [pc, #152]	; (7e88 <sc_set+0x110>)
    7df0:	1ad2      	subs	r2, r2, r3
    7df2:	08d2      	lsrs	r2, r2, #3
    7df4:	0192      	lsls	r2, r2, #6
    7df6:	f042 0201 	orr.w	r2, r2, #1
    7dfa:	e7e7      	b.n	7dcc <sc_set+0x54>
	cfg = find_sc_cfg(id, &addr);
    7dfc:	a902      	add	r1, sp, #8
    7dfe:	2000      	movs	r0, #0
    7e00:	f7ff fec2 	bl	7b88 <find_sc_cfg>
	if (!cfg && len_rd) {
    7e04:	4605      	mov	r5, r0
    7e06:	bb80      	cbnz	r0, 7e6a <sc_set+0xf2>
    7e08:	2e00      	cmp	r6, #0
    7e0a:	d0c9      	beq.n	7da0 <sc_set+0x28>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    7e0c:	a904      	add	r1, sp, #16
    7e0e:	9004      	str	r0, [sp, #16]
    7e10:	4606      	mov	r6, r0
    7e12:	f8cd 0013 	str.w	r0, [sp, #19]
    7e16:	f7ff feb7 	bl	7b88 <find_sc_cfg>
		if (!cfg) {
    7e1a:	4605      	mov	r5, r0
    7e1c:	b960      	cbnz	r0, 7e38 <sc_set+0xc0>
    7e1e:	4b17      	ldr	r3, [pc, #92]	; (7e7c <sc_set+0x104>)
    7e20:	4915      	ldr	r1, [pc, #84]	; (7e78 <sc_set+0x100>)
			BT_ERR("Unable to restore SC: no cfg left");
    7e22:	481a      	ldr	r0, [pc, #104]	; (7e8c <sc_set+0x114>)
    7e24:	1ac9      	subs	r1, r1, r3
    7e26:	08c9      	lsrs	r1, r1, #3
    7e28:	0189      	lsls	r1, r1, #6
    7e2a:	f041 0101 	orr.w	r1, r1, #1
    7e2e:	f011 fb08 	bl	19442 <log_0>
			return -ENOMEM;
    7e32:	f06f 040b 	mvn.w	r4, #11
    7e36:	e7b3      	b.n	7da0 <sc_set+0x28>
		cfg->id = id;
    7e38:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
    7e3c:	a902      	add	r1, sp, #8
    7e3e:	f013 fc8b 	bl	1b758 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
    7e42:	f105 0108 	add.w	r1, r5, #8
    7e46:	2204      	movs	r2, #4
    7e48:	4640      	mov	r0, r8
    7e4a:	47b8      	blx	r7
		if (len < 0) {
    7e4c:	1e05      	subs	r5, r0, #0
    7e4e:	daa7      	bge.n	7da0 <sc_set+0x28>
    7e50:	4b0a      	ldr	r3, [pc, #40]	; (7e7c <sc_set+0x104>)
    7e52:	4a09      	ldr	r2, [pc, #36]	; (7e78 <sc_set+0x100>)
			BT_ERR("Failed to decode value (err %zd)", len);
    7e54:	480e      	ldr	r0, [pc, #56]	; (7e90 <sc_set+0x118>)
    7e56:	1ad2      	subs	r2, r2, r3
    7e58:	08d2      	lsrs	r2, r2, #3
    7e5a:	0192      	lsls	r2, r2, #6
    7e5c:	f042 0201 	orr.w	r2, r2, #1
    7e60:	4629      	mov	r1, r5
    7e62:	f011 fafb 	bl	1945c <log_1>
			return len;
    7e66:	462c      	mov	r4, r5
    7e68:	e79a      	b.n	7da0 <sc_set+0x28>
	if (len_rd) {
    7e6a:	2e00      	cmp	r6, #0
    7e6c:	d1e9      	bne.n	7e42 <sc_set+0xca>
		memset(cfg, 0, sizeof(*cfg));
    7e6e:	220c      	movs	r2, #12
    7e70:	4631      	mov	r1, r6
    7e72:	f012 fa0f 	bl	1a294 <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
    7e76:	e793      	b.n	7da0 <sc_set+0x28>
    7e78:	0001f014 	.word	0x0001f014
    7e7c:	0001ef2c 	.word	0x0001ef2c
    7e80:	0002008c 	.word	0x0002008c
    7e84:	00020f02 	.word	0x00020f02
    7e88:	00020f1e 	.word	0x00020f1e
    7e8c:	00020f39 	.word	0x00020f39
    7e90:	00020e8c 	.word	0x00020e8c

00007e94 <bt_gatt_service_init.part.0>:
static void bt_gatt_service_init(void)
    7e94:	4908      	ldr	r1, [pc, #32]	; (7eb8 <bt_gatt_service_init.part.0+0x24>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    7e96:	4a09      	ldr	r2, [pc, #36]	; (7ebc <bt_gatt_service_init.part.0+0x28>)
    7e98:	880b      	ldrh	r3, [r1, #0]
static void bt_gatt_service_init(void)
    7e9a:	b510      	push	{r4, lr}
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    7e9c:	4c08      	ldr	r4, [pc, #32]	; (7ec0 <bt_gatt_service_init.part.0+0x2c>)
    7e9e:	2000      	movs	r0, #0
    7ea0:	42a2      	cmp	r2, r4
    7ea2:	d302      	bcc.n	7eaa <bt_gatt_service_init.part.0+0x16>
    7ea4:	b100      	cbz	r0, 7ea8 <bt_gatt_service_init.part.0+0x14>
    7ea6:	800b      	strh	r3, [r1, #0]
}
    7ea8:	bd10      	pop	{r4, pc}
		last_static_handle += svc->attr_count;
    7eaa:	6850      	ldr	r0, [r2, #4]
    7eac:	4403      	add	r3, r0
    7eae:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    7eb0:	3208      	adds	r2, #8
    7eb2:	2001      	movs	r0, #1
    7eb4:	e7f4      	b.n	7ea0 <bt_gatt_service_init.part.0+0xc>
    7eb6:	bf00      	nop
    7eb8:	20002e12 	.word	0x20002e12
    7ebc:	0001edb8 	.word	0x0001edb8
    7ec0:	0001edc8 	.word	0x0001edc8

00007ec4 <cf_set>:
{
    7ec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7ec8:	460f      	mov	r7, r1
    7eca:	b085      	sub	sp, #20
    7ecc:	4690      	mov	r8, r2
    7ece:	4699      	mov	r9, r3
	if (!name) {
    7ed0:	4606      	mov	r6, r0
    7ed2:	b978      	cbnz	r0, 7ef4 <cf_set+0x30>
    7ed4:	493a      	ldr	r1, [pc, #232]	; (7fc0 <cf_set+0xfc>)
    7ed6:	4b3b      	ldr	r3, [pc, #236]	; (7fc4 <cf_set+0x100>)
		BT_ERR("Insufficient number of arguments");
    7ed8:	483b      	ldr	r0, [pc, #236]	; (7fc8 <cf_set+0x104>)
    7eda:	1ac9      	subs	r1, r1, r3
    7edc:	08c9      	lsrs	r1, r1, #3
    7ede:	0189      	lsls	r1, r1, #6
    7ee0:	f041 0101 	orr.w	r1, r1, #1
    7ee4:	f011 faad 	bl	19442 <log_0>
		return -EINVAL;
    7ee8:	f06f 0515 	mvn.w	r5, #21
}
    7eec:	4628      	mov	r0, r5
    7eee:	b005      	add	sp, #20
    7ef0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
    7ef4:	a902      	add	r1, sp, #8
    7ef6:	f012 fa32 	bl	1a35e <bt_settings_decode_key>
	if (err) {
    7efa:	4605      	mov	r5, r0
    7efc:	b178      	cbz	r0, 7f1e <cf_set+0x5a>
    7efe:	4a31      	ldr	r2, [pc, #196]	; (7fc4 <cf_set+0x100>)
    7f00:	4c2f      	ldr	r4, [pc, #188]	; (7fc0 <cf_set+0xfc>)
    7f02:	4630      	mov	r0, r6
    7f04:	1aa4      	subs	r4, r4, r2
    7f06:	f7fa fbf9 	bl	26fc <z_log_strdup>
    7f0a:	08e4      	lsrs	r4, r4, #3
		BT_ERR("Unable to decode address %s", log_strdup(name));
    7f0c:	01a4      	lsls	r4, r4, #6
    7f0e:	f044 0401 	orr.w	r4, r4, #1
    7f12:	4601      	mov	r1, r0
    7f14:	482d      	ldr	r0, [pc, #180]	; (7fcc <cf_set+0x108>)
    7f16:	4622      	mov	r2, r4
    7f18:	f011 faa0 	bl	1945c <log_1>
    7f1c:	e7e4      	b.n	7ee8 <cf_set+0x24>
	settings_name_next(name, &next);
    7f1e:	a901      	add	r1, sp, #4
    7f20:	4630      	mov	r0, r6
    7f22:	f011 fe11 	bl	19b48 <settings_name_next>
	if (!next) {
    7f26:	9801      	ldr	r0, [sp, #4]
    7f28:	b340      	cbz	r0, 7f7c <cf_set+0xb8>
		unsigned long next_id = strtoul(next, NULL, 10);
    7f2a:	4629      	mov	r1, r5
    7f2c:	220a      	movs	r2, #10
    7f2e:	f012 f8d3 	bl	1a0d8 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
    7f32:	4601      	mov	r1, r0
    7f34:	b310      	cbz	r0, 7f7c <cf_set+0xb8>
    7f36:	4a22      	ldr	r2, [pc, #136]	; (7fc0 <cf_set+0xfc>)
    7f38:	4b22      	ldr	r3, [pc, #136]	; (7fc4 <cf_set+0x100>)
			BT_ERR("Invalid local identity %lu", next_id);
    7f3a:	4825      	ldr	r0, [pc, #148]	; (7fd0 <cf_set+0x10c>)
    7f3c:	1ad2      	subs	r2, r2, r3
    7f3e:	08d2      	lsrs	r2, r2, #3
    7f40:	0192      	lsls	r2, r2, #6
    7f42:	f042 0201 	orr.w	r2, r2, #1
    7f46:	e7e7      	b.n	7f18 <cf_set+0x54>
			    !bt_addr_le_cmp(addr, &cf_cfg[i].peer)) {
    7f48:	1c61      	adds	r1, r4, #1
    7f4a:	a802      	add	r0, sp, #8
    7f4c:	f013 fbcd 	bl	1b6ea <bt_addr_le_cmp>
			if (id == cf_cfg[i].id &&
    7f50:	b9c0      	cbnz	r0, 7f84 <cf_set+0xc0>
	if (len_rd) {
    7f52:	b38f      	cbz	r7, 7fb8 <cf_set+0xf4>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
    7f54:	f104 0108 	add.w	r1, r4, #8
    7f58:	2201      	movs	r2, #1
    7f5a:	4648      	mov	r0, r9
    7f5c:	47c0      	blx	r8
		if (len < 0) {
    7f5e:	1e04      	subs	r4, r0, #0
    7f60:	dac4      	bge.n	7eec <cf_set+0x28>
    7f62:	4b18      	ldr	r3, [pc, #96]	; (7fc4 <cf_set+0x100>)
    7f64:	4a16      	ldr	r2, [pc, #88]	; (7fc0 <cf_set+0xfc>)
			BT_ERR("Failed to decode value (err %zd)", len);
    7f66:	481b      	ldr	r0, [pc, #108]	; (7fd4 <cf_set+0x110>)
    7f68:	1ad2      	subs	r2, r2, r3
    7f6a:	08d2      	lsrs	r2, r2, #3
    7f6c:	0192      	lsls	r2, r2, #6
    7f6e:	f042 0201 	orr.w	r2, r2, #1
    7f72:	4621      	mov	r1, r4
    7f74:	f011 fa72 	bl	1945c <log_1>
			return len;
    7f78:	4625      	mov	r5, r4
    7f7a:	e7b7      	b.n	7eec <cf_set+0x28>
			if (id == cf_cfg[i].id &&
    7f7c:	4c16      	ldr	r4, [pc, #88]	; (7fd8 <cf_set+0x114>)
    7f7e:	7823      	ldrb	r3, [r4, #0]
    7f80:	2b00      	cmp	r3, #0
    7f82:	d0e1      	beq.n	7f48 <cf_set+0x84>
		cfg = find_cf_cfg(NULL);
    7f84:	2000      	movs	r0, #0
    7f86:	f7ff fde1 	bl	7b4c <find_cf_cfg>
		if (!cfg) {
    7f8a:	4604      	mov	r4, r0
    7f8c:	b960      	cbnz	r0, 7fa8 <cf_set+0xe4>
    7f8e:	4b0d      	ldr	r3, [pc, #52]	; (7fc4 <cf_set+0x100>)
    7f90:	490b      	ldr	r1, [pc, #44]	; (7fc0 <cf_set+0xfc>)
			BT_ERR("Unable to restore CF: no cfg left");
    7f92:	4812      	ldr	r0, [pc, #72]	; (7fdc <cf_set+0x118>)
    7f94:	1ac9      	subs	r1, r1, r3
    7f96:	08c9      	lsrs	r1, r1, #3
    7f98:	0189      	lsls	r1, r1, #6
    7f9a:	f041 0101 	orr.w	r1, r1, #1
    7f9e:	f011 fa50 	bl	19442 <log_0>
			return -ENOMEM;
    7fa2:	f06f 050b 	mvn.w	r5, #11
    7fa6:	e7a1      	b.n	7eec <cf_set+0x28>
		cfg->id = id;
    7fa8:	4620      	mov	r0, r4
    7faa:	2300      	movs	r3, #0
    7fac:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
    7fb0:	a902      	add	r1, sp, #8
    7fb2:	f013 fbd1 	bl	1b758 <bt_addr_le_copy>
    7fb6:	e7cc      	b.n	7f52 <cf_set+0x8e>
		clear_cf_cfg(cfg);
    7fb8:	4620      	mov	r0, r4
    7fba:	f013 fc12 	bl	1b7e2 <clear_cf_cfg>
    7fbe:	e795      	b.n	7eec <cf_set+0x28>
    7fc0:	0001f014 	.word	0x0001f014
    7fc4:	0001ef2c 	.word	0x0001ef2c
    7fc8:	0002008c 	.word	0x0002008c
    7fcc:	00020f02 	.word	0x00020f02
    7fd0:	00020f1e 	.word	0x00020f1e
    7fd4:	00020e8c 	.word	0x00020e8c
    7fd8:	20001a34 	.word	0x20001a34
    7fdc:	00020f5b 	.word	0x00020f5b

00007fe0 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
    7fe0:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
    7fe2:	6881      	ldr	r1, [r0, #8]
{
    7fe4:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    7fe6:	4a07      	ldr	r2, [pc, #28]	; (8004 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4>)
    7fe8:	4291      	cmp	r1, r2
    7fea:	d109      	bne.n	8000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
    7fec:	791a      	ldrb	r2, [r3, #4]
    7fee:	6819      	ldr	r1, [r3, #0]
    7ff0:	68c0      	ldr	r0, [r0, #12]
    7ff2:	f013 fba3 	bl	1b73c <ccc_find_cfg>
	if (cfg) {
    7ff6:	b118      	cbz	r0, 8000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC>
		memset(cfg, 0, sizeof(*cfg));
    7ff8:	220a      	movs	r2, #10
    7ffa:	2100      	movs	r1, #0
    7ffc:	f012 f94a 	bl	1a294 <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
    8000:	2001      	movs	r0, #1
    8002:	bd08      	pop	{r3, pc}
    8004:	00007ba9 	.word	0x00007ba9

00008008 <ccc_load>:
{
    8008:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    800a:	4b21      	ldr	r3, [pc, #132]	; (8090 <ccc_load+0x88>)
{
    800c:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    800e:	6882      	ldr	r2, [r0, #8]
    8010:	429a      	cmp	r2, r3
    8012:	d002      	beq.n	801a <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
    8014:	2001      	movs	r0, #1
}
    8016:	b002      	add	sp, #8
    8018:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
    801a:	68a3      	ldr	r3, [r4, #8]
    801c:	68c6      	ldr	r6, [r0, #12]
    801e:	b94b      	cbnz	r3, 8034 <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
    8020:	7922      	ldrb	r2, [r4, #4]
    8022:	6821      	ldr	r1, [r4, #0]
    8024:	4630      	mov	r0, r6
    8026:	f013 fb89 	bl	1b73c <ccc_find_cfg>
	if (!cfg) {
    802a:	2800      	cmp	r0, #0
    802c:	d0f2      	beq.n	8014 <ccc_load+0xc>
	clear_ccc_cfg(cfg);
    802e:	f013 fb96 	bl	1b75e <clear_ccc_cfg>
    8032:	e7ef      	b.n	8014 <ccc_load+0xc>
	} else if (!load->count) {
    8034:	68e0      	ldr	r0, [r4, #12]
    8036:	2800      	cmp	r0, #0
    8038:	d0ed      	beq.n	8016 <ccc_load+0xe>
	if (load->entry->handle != handle) {
    803a:	881b      	ldrh	r3, [r3, #0]
    803c:	4299      	cmp	r1, r3
    803e:	d00a      	beq.n	8056 <ccc_load+0x4e>
		if (load->entry->handle < handle) {
    8040:	d9e8      	bls.n	8014 <ccc_load+0xc>
	load->count--;
    8042:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
    8044:	68a3      	ldr	r3, [r4, #8]
	load->count--;
    8046:	3801      	subs	r0, #1
	load->entry++;
    8048:	3304      	adds	r3, #4
	load->count--;
    804a:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    804c:	3800      	subs	r0, #0
	load->entry++;
    804e:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    8050:	bf18      	it	ne
    8052:	2001      	movne	r0, #1
    8054:	e7df      	b.n	8016 <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
    8056:	7922      	ldrb	r2, [r4, #4]
    8058:	6821      	ldr	r1, [r4, #0]
    805a:	4630      	mov	r0, r6
    805c:	f013 fb6e 	bl	1b73c <ccc_find_cfg>
	if (!cfg) {
    8060:	4605      	mov	r5, r0
    8062:	b980      	cbnz	r0, 8086 <ccc_load+0x7e>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
    8064:	9000      	str	r0, [sp, #0]
    8066:	4602      	mov	r2, r0
    8068:	f8cd 0003 	str.w	r0, [sp, #3]
    806c:	4669      	mov	r1, sp
    806e:	4630      	mov	r0, r6
    8070:	f013 fb64 	bl	1b73c <ccc_find_cfg>
		if (!cfg) {
    8074:	4605      	mov	r5, r0
    8076:	2800      	cmp	r0, #0
    8078:	d0e3      	beq.n	8042 <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
    807a:	6821      	ldr	r1, [r4, #0]
    807c:	3001      	adds	r0, #1
    807e:	f013 fb6b 	bl	1b758 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
    8082:	7923      	ldrb	r3, [r4, #4]
    8084:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
    8086:	68a3      	ldr	r3, [r4, #8]
    8088:	885b      	ldrh	r3, [r3, #2]
    808a:	812b      	strh	r3, [r5, #8]
    808c:	e7d9      	b.n	8042 <ccc_load+0x3a>
    808e:	bf00      	nop
    8090:	00007ba9 	.word	0x00007ba9

00008094 <ccc_save>:
{
    8094:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    8096:	4b0c      	ldr	r3, [pc, #48]	; (80c8 <ccc_save+0x34>)
{
    8098:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    809a:	6882      	ldr	r2, [r0, #8]
    809c:	429a      	cmp	r2, r3
{
    809e:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    80a0:	d10f      	bne.n	80c2 <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
    80a2:	7922      	ldrb	r2, [r4, #4]
    80a4:	6821      	ldr	r1, [r4, #0]
    80a6:	68c0      	ldr	r0, [r0, #12]
    80a8:	f013 fb48 	bl	1b73c <ccc_find_cfg>
	if (!cfg) {
    80ac:	b148      	cbz	r0, 80c2 <ccc_save+0x2e>
	save->store[save->count].handle = handle;
    80ae:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
    80b2:	8901      	ldrh	r1, [r0, #8]
    80b4:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
    80b8:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
    80ba:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
    80bc:	8151      	strh	r1, [r2, #10]
	save->count++;
    80be:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
    80c2:	2001      	movs	r0, #1
    80c4:	bd38      	pop	{r3, r4, r5, pc}
    80c6:	bf00      	nop
    80c8:	00007ba9 	.word	0x00007ba9

000080cc <db_changed>:
{
    80cc:	b513      	push	{r0, r1, r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    80ce:	f06f 0104 	mvn.w	r1, #4
    80d2:	4813      	ldr	r0, [pc, #76]	; (8120 <db_changed+0x54>)
		if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    80d4:	4c13      	ldr	r4, [pc, #76]	; (8124 <db_changed+0x58>)
    80d6:	f013 fb50 	bl	1b77a <atomic_and>
	k_work_reschedule(&db_hash.work, DB_HASH_TIMEOUT);
    80da:	2300      	movs	r3, #0
    80dc:	4812      	ldr	r0, [pc, #72]	; (8128 <db_changed+0x5c>)
    80de:	f44f 72a4 	mov.w	r2, #328	; 0x148
    80e2:	f00f fec1 	bl	17e68 <k_work_reschedule>
		if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    80e6:	2300      	movs	r3, #0
    80e8:	4669      	mov	r1, sp
    80ea:	1c60      	adds	r0, r4, #1
    80ec:	9300      	str	r3, [sp, #0]
    80ee:	f8cd 3003 	str.w	r3, [sp, #3]
    80f2:	f013 fafa 	bl	1b6ea <bt_addr_le_cmp>
    80f6:	b188      	cbz	r0, 811c <db_changed+0x50>
		if (CF_ROBUST_CACHING(cfg)) {
    80f8:	7a23      	ldrb	r3, [r4, #8]
    80fa:	07db      	lsls	r3, r3, #31
    80fc:	d50e      	bpl.n	811c <db_changed+0x50>
    80fe:	f06f 0102 	mvn.w	r1, #2
    8102:	f104 000c 	add.w	r0, r4, #12
    8106:	f013 fb38 	bl	1b77a <atomic_and>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    810a:	f06f 0101 	mvn.w	r1, #1
    810e:	f104 000c 	add.w	r0, r4, #12
}
    8112:	b002      	add	sp, #8
    8114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8118:	f013 bb2f 	b.w	1b77a <atomic_and>
    811c:	b002      	add	sp, #8
    811e:	bd10      	pop	{r4, pc}
    8120:	200010b8 	.word	0x200010b8
    8124:	20001a34 	.word	0x20001a34
    8128:	20001010 	.word	0x20001010

0000812c <bt_gatt_clear_sc>:
{
    812c:	b570      	push	{r4, r5, r6, lr}
    812e:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
    8130:	f7ff fd2a 	bl	7b88 <find_sc_cfg>
	if (!cfg) {
    8134:	4604      	mov	r4, r0
    8136:	b318      	cbz	r0, 8180 <bt_gatt_clear_sc+0x54>
		if (cfg->id) {
    8138:	4605      	mov	r5, r0
    813a:	f815 2b01 	ldrb.w	r2, [r5], #1
    813e:	b312      	cbz	r2, 8186 <bt_gatt_clear_sc+0x5a>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
    8140:	ae02      	add	r6, sp, #8
    8142:	2104      	movs	r1, #4
    8144:	4630      	mov	r0, r6
    8146:	f010 fc87 	bl	18a58 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
    814a:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
    814c:	2124      	movs	r1, #36	; 0x24
    814e:	4a0f      	ldr	r2, [pc, #60]	; (818c <bt_gatt_clear_sc+0x60>)
    8150:	462b      	mov	r3, r5
    8152:	a803      	add	r0, sp, #12
    8154:	f7fb ff7c 	bl	4050 <bt_settings_encode_key>
		err = settings_delete(key);
    8158:	a803      	add	r0, sp, #12
    815a:	f011 fcce 	bl	19afa <settings_delete>
		if (err) {
    815e:	4601      	mov	r1, r0
    8160:	b148      	cbz	r0, 8176 <bt_gatt_clear_sc+0x4a>
    8162:	4a0b      	ldr	r2, [pc, #44]	; (8190 <bt_gatt_clear_sc+0x64>)
    8164:	4b0b      	ldr	r3, [pc, #44]	; (8194 <bt_gatt_clear_sc+0x68>)
			BT_ERR("failed to delete SC (err %d)", err);
    8166:	480c      	ldr	r0, [pc, #48]	; (8198 <bt_gatt_clear_sc+0x6c>)
    8168:	1ad2      	subs	r2, r2, r3
    816a:	08d2      	lsrs	r2, r2, #3
    816c:	0192      	lsls	r2, r2, #6
    816e:	f042 0201 	orr.w	r2, r2, #1
    8172:	f011 f973 	bl	1945c <log_1>
	memset(cfg, 0, sizeof(*cfg));
    8176:	220c      	movs	r2, #12
    8178:	2100      	movs	r1, #0
    817a:	4620      	mov	r0, r4
    817c:	f012 f88a 	bl	1a294 <memset>
}
    8180:	2000      	movs	r0, #0
    8182:	b00c      	add	sp, #48	; 0x30
    8184:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
    8186:	9200      	str	r2, [sp, #0]
    8188:	e7e0      	b.n	814c <bt_gatt_clear_sc+0x20>
    818a:	bf00      	nop
    818c:	00021129 	.word	0x00021129
    8190:	0001f014 	.word	0x0001f014
    8194:	0001ef2c 	.word	0x0001ef2c
    8198:	00020f7d 	.word	0x00020f7d

0000819c <sc_clear>:
{
    819c:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    819e:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
    81a2:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    81a4:	4631      	mov	r1, r6
    81a6:	7a00      	ldrb	r0, [r0, #8]
    81a8:	f012 fb9b 	bl	1a8e2 <bt_addr_le_is_bonded>
    81ac:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
    81ae:	4631      	mov	r1, r6
    81b0:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    81b2:	b17d      	cbz	r5, 81d4 <sc_clear+0x38>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
    81b4:	f7ff ffba 	bl	812c <bt_gatt_clear_sc>
		if (err) {
    81b8:	4601      	mov	r1, r0
    81ba:	b1a0      	cbz	r0, 81e6 <sc_clear+0x4a>
    81bc:	4a0a      	ldr	r2, [pc, #40]	; (81e8 <sc_clear+0x4c>)
    81be:	4b0b      	ldr	r3, [pc, #44]	; (81ec <sc_clear+0x50>)
			BT_ERR("Failed to clear SC %d", err);
    81c0:	480b      	ldr	r0, [pc, #44]	; (81f0 <sc_clear+0x54>)
    81c2:	1ad2      	subs	r2, r2, r3
    81c4:	08d2      	lsrs	r2, r2, #3
    81c6:	0192      	lsls	r2, r2, #6
}
    81c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Failed to clear SC %d", err);
    81cc:	f042 0201 	orr.w	r2, r2, #1
    81d0:	f011 b944 	b.w	1945c <log_1>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
    81d4:	f7ff fcd8 	bl	7b88 <find_sc_cfg>
		if (cfg) {
    81d8:	b128      	cbz	r0, 81e6 <sc_clear+0x4a>
	memset(cfg, 0, sizeof(*cfg));
    81da:	4629      	mov	r1, r5
    81dc:	220c      	movs	r2, #12
}
    81de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
    81e2:	f012 b857 	b.w	1a294 <memset>
}
    81e6:	bd70      	pop	{r4, r5, r6, pc}
    81e8:	0001f014 	.word	0x0001f014
    81ec:	0001ef2c 	.word	0x0001ef2c
    81f0:	00020f9a 	.word	0x00020f9a

000081f4 <disconnected_cb>:
{
    81f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    81f8:	4b1f      	ldr	r3, [pc, #124]	; (8278 <disconnected_cb+0x84>)
{
    81fa:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    81fc:	6882      	ldr	r2, [r0, #8]
    81fe:	429a      	cmp	r2, r3
{
    8200:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    8202:	d102      	bne.n	820a <disconnected_cb+0x16>
	ccc = attr->user_data;
    8204:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
    8206:	8963      	ldrh	r3, [r4, #10]
    8208:	b9c3      	cbnz	r3, 823c <disconnected_cb+0x48>
}
    820a:	2001      	movs	r0, #1
    820c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    8210:	f105 0888 	add.w	r8, r5, #136	; 0x88
    8214:	7a28      	ldrb	r0, [r5, #8]
    8216:	4641      	mov	r1, r8
    8218:	f012 fb63 	bl	1a8e2 <bt_addr_le_is_bonded>
    821c:	b948      	cbnz	r0, 8232 <disconnected_cb+0x3e>
				if (ccc == &sc_ccc) {
    821e:	4b17      	ldr	r3, [pc, #92]	; (827c <disconnected_cb+0x88>)
    8220:	429c      	cmp	r4, r3
    8222:	d102      	bne.n	822a <disconnected_cb+0x36>
					sc_clear(conn);
    8224:	4628      	mov	r0, r5
    8226:	f7ff ffb9 	bl	819c <sc_clear>
				clear_ccc_cfg(cfg);
    822a:	4620      	mov	r0, r4
    822c:	f013 fa97 	bl	1b75e <clear_ccc_cfg>
	if (!value_used) {
    8230:	e019      	b.n	8266 <disconnected_cb+0x72>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    8232:	4641      	mov	r1, r8
    8234:	4638      	mov	r0, r7
    8236:	f013 fa8f 	bl	1b758 <bt_addr_le_copy>
	if (!value_used) {
    823a:	e014      	b.n	8266 <disconnected_cb+0x72>
		if (!cfg->value) {
    823c:	8923      	ldrh	r3, [r4, #8]
    823e:	b193      	cbz	r3, 8266 <disconnected_cb+0x72>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    8240:	4627      	mov	r7, r4
    8242:	4628      	mov	r0, r5
    8244:	f817 1b01 	ldrb.w	r1, [r7], #1
    8248:	463a      	mov	r2, r7
    824a:	f012 fcb3 	bl	1abb4 <bt_conn_is_peer_addr_le>
    824e:	2800      	cmp	r0, #0
    8250:	d1de      	bne.n	8210 <disconnected_cb+0x1c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    8252:	7820      	ldrb	r0, [r4, #0]
    8254:	4639      	mov	r1, r7
    8256:	f7fe f953 	bl	6500 <bt_conn_lookup_addr_le>
			if (tmp) {
    825a:	b120      	cbz	r0, 8266 <disconnected_cb+0x72>
				if (tmp->state == BT_CONN_CONNECTED) {
    825c:	7a85      	ldrb	r5, [r0, #10]
				bt_conn_unref(tmp);
    825e:	f012 fc3e 	bl	1aade <bt_conn_unref>
	if (!value_used) {
    8262:	2d07      	cmp	r5, #7
    8264:	d0d1      	beq.n	820a <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
    8266:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
    8268:	2100      	movs	r1, #0
    826a:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
    826c:	2b00      	cmp	r3, #0
    826e:	d0cc      	beq.n	820a <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
    8270:	4630      	mov	r0, r6
    8272:	4798      	blx	r3
    8274:	e7c9      	b.n	820a <disconnected_cb+0x16>
    8276:	bf00      	nop
    8278:	00007ba9 	.word	0x00007ba9
    827c:	200002f8 	.word	0x200002f8

00008280 <sc_indicate>:
{
    8280:	b570      	push	{r4, r5, r6, lr}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    8282:	4c12      	ldr	r4, [pc, #72]	; (82cc <sc_indicate+0x4c>)
    8284:	4606      	mov	r6, r0
    8286:	460d      	mov	r5, r1
    8288:	f104 0050 	add.w	r0, r4, #80	; 0x50
    828c:	2101      	movs	r1, #1
    828e:	f013 fa1d 	bl	1b6cc <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    8292:	07c2      	lsls	r2, r0, #31
    8294:	d40e      	bmi.n	82b4 <sc_indicate+0x34>
		gatt_sc.start = start;
    8296:	8326      	strh	r6, [r4, #24]
		*end = new_end;
    8298:	8365      	strh	r5, [r4, #26]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    829a:	480d      	ldr	r0, [pc, #52]	; (82d0 <sc_indicate+0x50>)
    829c:	f013 f9ba 	bl	1b614 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
    82a0:	0783      	lsls	r3, r0, #30
    82a2:	d40d      	bmi.n	82c0 <sc_indicate+0x40>
}
    82a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&gatt_sc.work, timeout);
    82a8:	480a      	ldr	r0, [pc, #40]	; (82d4 <sc_indicate+0x54>)
    82aa:	f44f 72a4 	mov.w	r2, #328	; 0x148
    82ae:	2300      	movs	r3, #0
    82b0:	f00f bdda 	b.w	17e68 <k_work_reschedule>
	if (new_start >= *start && new_end <= *end) {
    82b4:	8b22      	ldrh	r2, [r4, #24]
    82b6:	8b63      	ldrh	r3, [r4, #26]
    82b8:	42b2      	cmp	r2, r6
    82ba:	d802      	bhi.n	82c2 <sc_indicate+0x42>
    82bc:	42ab      	cmp	r3, r5
    82be:	d3eb      	bcc.n	8298 <sc_indicate+0x18>
}
    82c0:	bd70      	pop	{r4, r5, r6, pc}
	if (*end < new_end) {
    82c2:	42ab      	cmp	r3, r5
		*start = new_start;
    82c4:	8326      	strh	r6, [r4, #24]
	if (*end < new_end) {
    82c6:	d2e8      	bcs.n	829a <sc_indicate+0x1a>
    82c8:	e7e6      	b.n	8298 <sc_indicate+0x18>
    82ca:	bf00      	nop
    82cc:	20001068 	.word	0x20001068
    82d0:	200010b8 	.word	0x200010b8
    82d4:	20001088 	.word	0x20001088

000082d8 <sc_commit>:
{
    82d8:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    82da:	4809      	ldr	r0, [pc, #36]	; (8300 <sc_commit+0x28>)
    82dc:	f06f 0102 	mvn.w	r1, #2
    82e0:	f013 fa4b 	bl	1b77a <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    82e4:	4806      	ldr	r0, [pc, #24]	; (8300 <sc_commit+0x28>)
    82e6:	f013 f995 	bl	1b614 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    82ea:	07c3      	lsls	r3, r0, #31
    82ec:	d505      	bpl.n	82fa <sc_commit+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
    82ee:	4805      	ldr	r0, [pc, #20]	; (8304 <sc_commit+0x2c>)
    82f0:	f44f 72a4 	mov.w	r2, #328	; 0x148
    82f4:	2300      	movs	r3, #0
    82f6:	f00f fdb7 	bl	17e68 <k_work_reschedule>
}
    82fa:	2000      	movs	r0, #0
    82fc:	bd08      	pop	{r3, pc}
    82fe:	bf00      	nop
    8300:	200010b8 	.word	0x200010b8
    8304:	20001088 	.word	0x20001088

00008308 <sc_indicate_rsp>:
{
    8308:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    830a:	f06f 0102 	mvn.w	r1, #2
    830e:	4604      	mov	r4, r0
    8310:	480d      	ldr	r0, [pc, #52]	; (8348 <sc_indicate_rsp+0x40>)
    8312:	f013 fa32 	bl	1b77a <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8316:	480c      	ldr	r0, [pc, #48]	; (8348 <sc_indicate_rsp+0x40>)
    8318:	f013 f97c 	bl	1b614 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    831c:	07c2      	lsls	r2, r0, #31
    831e:	d504      	bpl.n	832a <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
    8320:	480a      	ldr	r0, [pc, #40]	; (834c <sc_indicate_rsp+0x44>)
    8322:	2200      	movs	r2, #0
    8324:	2300      	movs	r3, #0
    8326:	f00f fd9f 	bl	17e68 <k_work_reschedule>
	cfg = find_cf_cfg(conn);
    832a:	4620      	mov	r0, r4
    832c:	f7ff fc0e 	bl	7b4c <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    8330:	b140      	cbz	r0, 8344 <sc_indicate_rsp+0x3c>
    8332:	7a03      	ldrb	r3, [r0, #8]
    8334:	07db      	lsls	r3, r3, #31
    8336:	d505      	bpl.n	8344 <sc_indicate_rsp+0x3c>
}
    8338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    833c:	2101      	movs	r1, #1
    833e:	300c      	adds	r0, #12
    8340:	f013 b9c4 	b.w	1b6cc <atomic_or>
    8344:	bd10      	pop	{r4, pc}
    8346:	bf00      	nop
    8348:	200010b8 	.word	0x200010b8
    834c:	20001088 	.word	0x20001088

00008350 <cf_write>:
{
    8350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8354:	4698      	mov	r8, r3
    8356:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
    835a:	2b01      	cmp	r3, #1
{
    835c:	4606      	mov	r6, r0
    835e:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
    8360:	d83d      	bhi.n	83de <cf_write+0x8e>
	if (offset + len > sizeof(cfg->data)) {
    8362:	4443      	add	r3, r8
    8364:	2b01      	cmp	r3, #1
    8366:	4645      	mov	r5, r8
    8368:	dc3c      	bgt.n	83e4 <cf_write+0x94>
	cfg = find_cf_cfg(conn);
    836a:	f7ff fbef 	bl	7b4c <find_cf_cfg>
	if (!cfg) {
    836e:	4604      	mov	r4, r0
    8370:	b918      	cbnz	r0, 837a <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
    8372:	f7ff fbeb 	bl	7b4c <find_cf_cfg>
	if (!cfg) {
    8376:	4604      	mov	r4, r0
    8378:	b180      	cbz	r0, 839c <cf_write+0x4c>
{
    837a:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
    837c:	f1b8 0f00 	cmp.w	r8, #0
    8380:	d11b      	bne.n	83ba <cf_write+0x6a>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    8382:	f106 0188 	add.w	r1, r6, #136	; 0x88
    8386:	1c60      	adds	r0, r4, #1
    8388:	f013 f9e6 	bl	1b758 <bt_addr_le_copy>
	cfg->id = conn->id;
    838c:	4620      	mov	r0, r4
    838e:	7a33      	ldrb	r3, [r6, #8]
    8390:	f800 3b0c 	strb.w	r3, [r0], #12
    8394:	2101      	movs	r1, #1
    8396:	f013 f999 	bl	1b6cc <atomic_or>
}
    839a:	e00b      	b.n	83b4 <cf_write+0x64>
    839c:	4b14      	ldr	r3, [pc, #80]	; (83f0 <cf_write+0xa0>)
    839e:	4915      	ldr	r1, [pc, #84]	; (83f4 <cf_write+0xa4>)
		BT_WARN("No space to store Client Supported Features");
    83a0:	4815      	ldr	r0, [pc, #84]	; (83f8 <cf_write+0xa8>)
    83a2:	1ac9      	subs	r1, r1, r3
    83a4:	08c9      	lsrs	r1, r1, #3
    83a6:	0189      	lsls	r1, r1, #6
    83a8:	f041 0102 	orr.w	r1, r1, #2
    83ac:	f011 f849 	bl	19442 <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    83b0:	f06f 0510 	mvn.w	r5, #16
}
    83b4:	4628      	mov	r0, r5
    83b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
    83ba:	7a20      	ldrb	r0, [r4, #8]
    83bc:	fa20 f301 	lsr.w	r3, r0, r1
    83c0:	07da      	lsls	r2, r3, #31
    83c2:	d503      	bpl.n	83cc <cf_write+0x7c>
		    !(value[i / 8] & BIT(i % 8))) {
    83c4:	783b      	ldrb	r3, [r7, #0]
    83c6:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
    83c8:	07db      	lsls	r3, r3, #31
    83ca:	d50e      	bpl.n	83ea <cf_write+0x9a>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
    83cc:	3101      	adds	r1, #1
    83ce:	2903      	cmp	r1, #3
    83d0:	d1d4      	bne.n	837c <cf_write+0x2c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
    83d2:	783b      	ldrb	r3, [r7, #0]
    83d4:	f003 0307 	and.w	r3, r3, #7
    83d8:	4318      	orrs	r0, r3
    83da:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
    83dc:	e7d1      	b.n	8382 <cf_write+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    83de:	f06f 0506 	mvn.w	r5, #6
    83e2:	e7e7      	b.n	83b4 <cf_write+0x64>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    83e4:	f06f 050c 	mvn.w	r5, #12
    83e8:	e7e4      	b.n	83b4 <cf_write+0x64>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    83ea:	f06f 0512 	mvn.w	r5, #18
    83ee:	e7e1      	b.n	83b4 <cf_write+0x64>
    83f0:	0001ef2c 	.word	0x0001ef2c
    83f4:	0001f014 	.word	0x0001f014
    83f8:	00020fb0 	.word	0x00020fb0

000083fc <bt_gatt_init>:
{
    83fc:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    83fe:	4b1c      	ldr	r3, [pc, #112]	; (8470 <bt_gatt_init+0x74>)
    8400:	f3bf 8f5b 	dmb	ish
    8404:	2201      	movs	r2, #1
    8406:	e853 1f00 	ldrex	r1, [r3]
    840a:	2900      	cmp	r1, #0
    840c:	d103      	bne.n	8416 <bt_gatt_init+0x1a>
    840e:	e843 2000 	strex	r0, r2, [r3]
    8412:	2800      	cmp	r0, #0
    8414:	d1f7      	bne.n	8406 <bt_gatt_init+0xa>
    8416:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    841a:	d127      	bne.n	846c <bt_gatt_init+0x70>
    841c:	f3bf 8f5b 	dmb	ish
    8420:	4b14      	ldr	r3, [pc, #80]	; (8474 <bt_gatt_init+0x78>)
    8422:	e853 1f00 	ldrex	r1, [r3]
    8426:	2900      	cmp	r1, #0
    8428:	d103      	bne.n	8432 <bt_gatt_init+0x36>
    842a:	e843 2000 	strex	r0, r2, [r3]
    842e:	2800      	cmp	r0, #0
    8430:	d1f7      	bne.n	8422 <bt_gatt_init+0x26>
    8432:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
    8436:	d101      	bne.n	843c <bt_gatt_init+0x40>
    8438:	f7ff fd2c 	bl	7e94 <bt_gatt_service_init.part.0>
	list->head = NULL;
    843c:	4b0e      	ldr	r3, [pc, #56]	; (8478 <bt_gatt_init+0x7c>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
    843e:	490f      	ldr	r1, [pc, #60]	; (847c <bt_gatt_init+0x80>)
    8440:	480f      	ldr	r0, [pc, #60]	; (8480 <bt_gatt_init+0x84>)
    8442:	2200      	movs	r2, #0
	list->tail = NULL;
    8444:	e9c3 2200 	strd	r2, r2, [r3]
    8448:	f016 f8f8 	bl	1e63c <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
    844c:	2300      	movs	r3, #0
    844e:	f44f 72a4 	mov.w	r2, #328	; 0x148
    8452:	480b      	ldr	r0, [pc, #44]	; (8480 <bt_gatt_init+0x84>)
    8454:	f00f fcd4 	bl	17e00 <k_work_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
    8458:	490a      	ldr	r1, [pc, #40]	; (8484 <bt_gatt_init+0x88>)
    845a:	480b      	ldr	r0, [pc, #44]	; (8488 <bt_gatt_init+0x8c>)
    845c:	f016 f8ee 	bl	1e63c <k_work_init_delayable>
}
    8460:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    8464:	4809      	ldr	r0, [pc, #36]	; (848c <bt_gatt_init+0x90>)
    8466:	2102      	movs	r1, #2
    8468:	f013 b930 	b.w	1b6cc <atomic_or>
    846c:	bd08      	pop	{r3, pc}
    846e:	bf00      	nop
    8470:	20001a4c 	.word	0x20001a4c
    8474:	20001a68 	.word	0x20001a68
    8478:	20001a2c 	.word	0x20001a2c
    847c:	000086a9 	.word	0x000086a9
    8480:	20001010 	.word	0x20001010
    8484:	00008bcd 	.word	0x00008bcd
    8488:	20001088 	.word	0x20001088
    848c:	200010b8 	.word	0x200010b8

00008490 <bt_gatt_attr_get_handle>:
{
    8490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
    8494:	4603      	mov	r3, r0
    8496:	b148      	cbz	r0, 84ac <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
    8498:	8a00      	ldrh	r0, [r0, #16]
    849a:	b938      	cbnz	r0, 84ac <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    849c:	4912      	ldr	r1, [pc, #72]	; (84e8 <bt_gatt_attr_get_handle+0x58>)
    849e:	f8df e04c 	ldr.w	lr, [pc, #76]	; 84ec <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
    84a2:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    84a4:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    84a8:	4571      	cmp	r1, lr
    84aa:	d301      	bcc.n	84b0 <bt_gatt_attr_get_handle+0x20>
}
    84ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    84b0:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
    84b4:	42bb      	cmp	r3, r7
    84b6:	d304      	bcc.n	84c2 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    84b8:	fb0c 7206 	mla	r2, ip, r6, r7
    84bc:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
    84be:	4293      	cmp	r3, r2
    84c0:	d90e      	bls.n	84e0 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
    84c2:	19a2      	adds	r2, r4, r6
    84c4:	b292      	uxth	r2, r2
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    84c6:	3108      	adds	r1, #8
    84c8:	4614      	mov	r4, r2
    84ca:	e7ed      	b.n	84a8 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
    84cc:	fb0c 7805 	mla	r8, ip, r5, r7
    84d0:	4543      	cmp	r3, r8
    84d2:	d007      	beq.n	84e4 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    84d4:	3501      	adds	r5, #1
    84d6:	1962      	adds	r2, r4, r5
    84d8:	42b5      	cmp	r5, r6
    84da:	b292      	uxth	r2, r2
    84dc:	d1f6      	bne.n	84cc <bt_gatt_attr_get_handle+0x3c>
    84de:	e7f2      	b.n	84c6 <bt_gatt_attr_get_handle+0x36>
    84e0:	2500      	movs	r5, #0
    84e2:	e7f8      	b.n	84d6 <bt_gatt_attr_get_handle+0x46>
    84e4:	4610      	mov	r0, r2
    84e6:	e7e1      	b.n	84ac <bt_gatt_attr_get_handle+0x1c>
    84e8:	0001edb8 	.word	0x0001edb8
    84ec:	0001edc8 	.word	0x0001edc8

000084f0 <bt_gatt_foreach_attr_type>:
{
    84f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    84f4:	b08b      	sub	sp, #44	; 0x2c
    84f6:	4698      	mov	r8, r3
	if (!num_matches) {
    84f8:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
{
    84fc:	9207      	str	r2, [sp, #28]
    84fe:	4606      	mov	r6, r0
    8500:	460f      	mov	r7, r1
	if (!num_matches) {
    8502:	b91b      	cbnz	r3, 850c <bt_gatt_foreach_attr_type+0x1c>
		num_matches = UINT16_MAX;
    8504:	f64f 73ff 	movw	r3, #65535	; 0xffff
    8508:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
	if (start_handle <= last_static_handle) {
    850c:	4b39      	ldr	r3, [pc, #228]	; (85f4 <bt_gatt_foreach_attr_type+0x104>)
    850e:	881b      	ldrh	r3, [r3, #0]
    8510:	42b3      	cmp	r3, r6
    8512:	d230      	bcs.n	8576 <bt_gatt_foreach_attr_type+0x86>
	foreach_attr_type_dyndb(start_handle, end_handle, uuid, attr_data,
    8514:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
    8518:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
	return list->head;
    851c:	4b36      	ldr	r3, [pc, #216]	; (85f8 <bt_gatt_foreach_attr_type+0x108>)
    851e:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    8520:	2c00      	cmp	r4, #0
    8522:	d130      	bne.n	8586 <bt_gatt_foreach_attr_type+0x96>
}
    8524:	b00b      	add	sp, #44	; 0x2c
    8526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
    852a:	6861      	ldr	r1, [r4, #4]
    852c:	4449      	add	r1, r9
    852e:	42b1      	cmp	r1, r6
    8530:	d21f      	bcs.n	8572 <bt_gatt_foreach_attr_type+0x82>
				handle += static_svc->attr_count;
    8532:	b289      	uxth	r1, r1
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    8534:	3408      	adds	r4, #8
    8536:	4689      	mov	r9, r1
    8538:	4554      	cmp	r4, sl
    853a:	d3f6      	bcc.n	852a <bt_gatt_foreach_attr_type+0x3a>
    853c:	e7ea      	b.n	8514 <bt_gatt_foreach_attr_type+0x24>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    853e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    8540:	6820      	ldr	r0, [r4, #0]
    8542:	9304      	str	r3, [sp, #16]
    8544:	9b15      	ldr	r3, [sp, #84]	; 0x54
    8546:	9303      	str	r3, [sp, #12]
    8548:	ab14      	add	r3, sp, #80	; 0x50
    854a:	e9cd 8301 	strd	r8, r3, [sp, #4]
    854e:	9b07      	ldr	r3, [sp, #28]
    8550:	9300      	str	r3, [sp, #0]
    8552:	4632      	mov	r2, r6
    8554:	463b      	mov	r3, r7
    8556:	fb0b 0005 	mla	r0, fp, r5, r0
    855a:	f013 f91d 	bl	1b798 <gatt_foreach_iter>
    855e:	2800      	cmp	r0, #0
    8560:	d0e0      	beq.n	8524 <bt_gatt_foreach_attr_type+0x34>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    8562:	3501      	adds	r5, #1
    8564:	6863      	ldr	r3, [r4, #4]
    8566:	eb09 0105 	add.w	r1, r9, r5
    856a:	42ab      	cmp	r3, r5
    856c:	b289      	uxth	r1, r1
    856e:	d8e6      	bhi.n	853e <bt_gatt_foreach_attr_type+0x4e>
    8570:	e7e0      	b.n	8534 <bt_gatt_foreach_attr_type+0x44>
    8572:	2500      	movs	r5, #0
    8574:	e7f6      	b.n	8564 <bt_gatt_foreach_attr_type+0x74>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    8576:	4c21      	ldr	r4, [pc, #132]	; (85fc <bt_gatt_foreach_attr_type+0x10c>)
    8578:	f8df a084 	ldr.w	sl, [pc, #132]	; 8600 <bt_gatt_foreach_attr_type+0x110>
		uint16_t handle = 1;
    857c:	f04f 0901 	mov.w	r9, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
    8580:	f04f 0b14 	mov.w	fp, #20
    8584:	e7d8      	b.n	8538 <bt_gatt_foreach_attr_type+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    8586:	3c08      	subs	r4, #8
			struct bt_gatt_attr *attr = &svc->attrs[i];
    8588:	f04f 0a14 	mov.w	sl, #20
			if (gatt_foreach_iter(attr, attr->handle,
    858c:	f10d 0b26 	add.w	fp, sp, #38	; 0x26
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    8590:	2c00      	cmp	r4, #0
    8592:	d0c7      	beq.n	8524 <bt_gatt_foreach_attr_type+0x34>
Z_GENLIST_PEEK_NEXT(slist, snode)
    8594:	f114 0908 	adds.w	r9, r4, #8
    8598:	d029      	beq.n	85ee <bt_gatt_foreach_attr_type+0xfe>
	return node->next;
    859a:	68a3      	ldr	r3, [r4, #8]
		next = SYS_SLIST_PEEK_NEXT_CONTAINER(svc, node);
    859c:	b33b      	cbz	r3, 85ee <bt_gatt_foreach_attr_type+0xfe>
		if (next) {
    859e:	f1b3 0508 	subs.w	r5, r3, #8
    85a2:	d01d      	beq.n	85e0 <bt_gatt_foreach_attr_type+0xf0>
			if (next->attrs[0].handle <= start_handle) {
    85a4:	f853 3c08 	ldr.w	r3, [r3, #-8]
    85a8:	8a1b      	ldrh	r3, [r3, #16]
    85aa:	42b3      	cmp	r3, r6
    85ac:	d81f      	bhi.n	85ee <bt_gatt_foreach_attr_type+0xfe>
    85ae:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    85b0:	2c00      	cmp	r4, #0
    85b2:	d0b7      	beq.n	8524 <bt_gatt_foreach_attr_type+0x34>
    85b4:	3c08      	subs	r4, #8
    85b6:	e7eb      	b.n	8590 <bt_gatt_foreach_attr_type+0xa0>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    85b8:	6820      	ldr	r0, [r4, #0]
			if (gatt_foreach_iter(attr, attr->handle,
    85ba:	9b16      	ldr	r3, [sp, #88]	; 0x58
			struct bt_gatt_attr *attr = &svc->attrs[i];
    85bc:	fb0a 0005 	mla	r0, sl, r5, r0
			if (gatt_foreach_iter(attr, attr->handle,
    85c0:	4632      	mov	r2, r6
    85c2:	8a01      	ldrh	r1, [r0, #16]
    85c4:	9304      	str	r3, [sp, #16]
    85c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
    85c8:	f8cd 8004 	str.w	r8, [sp, #4]
    85cc:	e9cd b302 	strd	fp, r3, [sp, #8]
    85d0:	9b07      	ldr	r3, [sp, #28]
    85d2:	9300      	str	r3, [sp, #0]
    85d4:	463b      	mov	r3, r7
    85d6:	f013 f8df 	bl	1b798 <gatt_foreach_iter>
    85da:	2800      	cmp	r0, #0
    85dc:	d0a2      	beq.n	8524 <bt_gatt_foreach_attr_type+0x34>
		for (i = 0; i < svc->attr_count; i++) {
    85de:	3501      	adds	r5, #1
    85e0:	6863      	ldr	r3, [r4, #4]
    85e2:	429d      	cmp	r5, r3
    85e4:	d3e8      	bcc.n	85b8 <bt_gatt_foreach_attr_type+0xc8>
Z_GENLIST_PEEK_NEXT(slist, snode)
    85e6:	f1b9 0f00 	cmp.w	r9, #0
    85ea:	d1e0      	bne.n	85ae <bt_gatt_foreach_attr_type+0xbe>
    85ec:	e79a      	b.n	8524 <bt_gatt_foreach_attr_type+0x34>
    85ee:	2500      	movs	r5, #0
    85f0:	e7f6      	b.n	85e0 <bt_gatt_foreach_attr_type+0xf0>
    85f2:	bf00      	nop
    85f4:	20002e12 	.word	0x20002e12
    85f8:	20001a44 	.word	0x20001a44
    85fc:	0001edb8 	.word	0x0001edb8
    8600:	0001edc8 	.word	0x0001edc8

00008604 <db_hash_gen>:
{
    8604:	b530      	push	{r4, r5, lr}
    8606:	b0c9      	sub	sp, #292	; 0x124
	uint8_t key[16] = {};
    8608:	2300      	movs	r3, #0
{
    860a:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    860c:	aa1c      	add	r2, sp, #112	; 0x70
    860e:	4669      	mov	r1, sp
    8610:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
    8612:	e9cd 3300 	strd	r3, r3, [sp]
    8616:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    861a:	f011 fc0f 	bl	19e3c <tc_cmac_setup>
    861e:	b958      	cbnz	r0, 8638 <db_hash_gen+0x34>
    8620:	491a      	ldr	r1, [pc, #104]	; (868c <db_hash_gen+0x88>)
    8622:	4b1b      	ldr	r3, [pc, #108]	; (8690 <db_hash_gen+0x8c>)
		BT_ERR("Unable to setup AES CMAC");
    8624:	481b      	ldr	r0, [pc, #108]	; (8694 <db_hash_gen+0x90>)
    8626:	1ac9      	subs	r1, r1, r3
    8628:	08c9      	lsrs	r1, r1, #3
    862a:	0189      	lsls	r1, r1, #6
    862c:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to calculate hash");
    8630:	f010 ff07 	bl	19442 <log_0>
}
    8634:	b049      	add	sp, #292	; 0x124
    8636:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    8638:	f64f 71ff 	movw	r1, #65535	; 0xffff
    863c:	2001      	movs	r0, #1
    863e:	4a16      	ldr	r2, [pc, #88]	; (8698 <db_hash_gen+0x94>)
    8640:	ab04      	add	r3, sp, #16
    8642:	f013 fa11 	bl	1ba68 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
    8646:	4815      	ldr	r0, [pc, #84]	; (869c <db_hash_gen+0x98>)
    8648:	a904      	add	r1, sp, #16
    864a:	f011 fc8d 	bl	19f68 <tc_cmac_final>
    864e:	b940      	cbnz	r0, 8662 <db_hash_gen+0x5e>
    8650:	490e      	ldr	r1, [pc, #56]	; (868c <db_hash_gen+0x88>)
    8652:	4b0f      	ldr	r3, [pc, #60]	; (8690 <db_hash_gen+0x8c>)
		BT_ERR("Unable to calculate hash");
    8654:	4812      	ldr	r0, [pc, #72]	; (86a0 <db_hash_gen+0x9c>)
    8656:	1ac9      	subs	r1, r1, r3
    8658:	08c9      	lsrs	r1, r1, #3
    865a:	0189      	lsls	r1, r1, #6
    865c:	f041 0101 	orr.w	r1, r1, #1
    8660:	e7e6      	b.n	8630 <db_hash_gen+0x2c>
    8662:	4b0e      	ldr	r3, [pc, #56]	; (869c <db_hash_gen+0x98>)
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
    8664:	2208      	movs	r2, #8
    8666:	f103 010f 	add.w	r1, r3, #15
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
    866a:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    866c:	780d      	ldrb	r5, [r1, #0]
    866e:	f803 5b01 	strb.w	r5, [r3], #1
	for (i = 0; i < (length/2); i++) {
    8672:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
    8674:	f801 0901 	strb.w	r0, [r1], #-1
	for (i = 0; i < (length/2); i++) {
    8678:	d1f7      	bne.n	866a <db_hash_gen+0x66>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
    867a:	b10c      	cbz	r4, 8680 <db_hash_gen+0x7c>
		db_hash_store();
    867c:	f7ff fa26 	bl	7acc <db_hash_store>
    8680:	2104      	movs	r1, #4
    8682:	4808      	ldr	r0, [pc, #32]	; (86a4 <db_hash_gen+0xa0>)
    8684:	f013 f822 	bl	1b6cc <atomic_or>
    8688:	e7d4      	b.n	8634 <db_hash_gen+0x30>
    868a:	bf00      	nop
    868c:	0001f014 	.word	0x0001f014
    8690:	0001ef2c 	.word	0x0001ef2c
    8694:	00020fdc 	.word	0x00020fdc
    8698:	0001b621 	.word	0x0001b621
    869c:	20000ff0 	.word	0x20000ff0
    86a0:	00020ff5 	.word	0x00020ff5
    86a4:	200010b8 	.word	0x200010b8

000086a8 <db_hash_process>:
{
    86a8:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    86aa:	4817      	ldr	r0, [pc, #92]	; (8708 <db_hash_process+0x60>)
    86ac:	f06f 0108 	mvn.w	r1, #8
    86b0:	f013 f863 	bl	1b77a <atomic_and>
	if (atomic_test_and_clear_bit(gatt_sc.flags, DB_HASH_LOAD)) {
    86b4:	0702      	lsls	r2, r0, #28
    86b6:	d522      	bpl.n	86fe <db_hash_process+0x56>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    86b8:	4813      	ldr	r0, [pc, #76]	; (8708 <db_hash_process+0x60>)
    86ba:	f012 ffab 	bl	1b614 <atomic_get>
    86be:	4603      	mov	r3, r0
		if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
    86c0:	075b      	lsls	r3, r3, #29
    86c2:	f3c0 0080 	ubfx	r0, r0, #2, #1
    86c6:	d401      	bmi.n	86cc <db_hash_process+0x24>
			db_hash_gen(false);
    86c8:	f7ff ff9c 	bl	8604 <db_hash_gen>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
    86cc:	490f      	ldr	r1, [pc, #60]	; (870c <db_hash_process+0x64>)
    86ce:	2210      	movs	r2, #16
    86d0:	1888      	adds	r0, r1, r2
    86d2:	f011 fdc3 	bl	1a25c <memcmp>
    86d6:	b948      	cbnz	r0, 86ec <db_hash_process+0x44>
			k_work_cancel_delayable(&gatt_sc.work);
    86d8:	480d      	ldr	r0, [pc, #52]	; (8710 <db_hash_process+0x68>)
    86da:	f015 ffcf 	bl	1e67c <k_work_cancel_delayable>
}
    86de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    86e2:	4809      	ldr	r0, [pc, #36]	; (8708 <db_hash_process+0x60>)
    86e4:	f06f 0101 	mvn.w	r1, #1
    86e8:	f013 b847 	b.w	1b77a <atomic_and>
		sc_indicate(0x0001, 0xffff);
    86ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
    86f0:	2001      	movs	r0, #1
    86f2:	f7ff fdc5 	bl	8280 <sc_indicate>
}
    86f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		db_hash_store();
    86fa:	f7ff b9e7 	b.w	7acc <db_hash_store>
}
    86fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	db_hash_gen(true);
    8702:	2001      	movs	r0, #1
    8704:	f7ff bf7e 	b.w	8604 <db_hash_gen>
    8708:	200010b8 	.word	0x200010b8
    870c:	20000ff0 	.word	0x20000ff0
    8710:	20001088 	.word	0x20001088

00008714 <bt_gatt_service_register>:
{
    8714:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8718:	4b6a      	ldr	r3, [pc, #424]	; (88c4 <bt_gatt_service_register+0x1b0>)
    871a:	f3bf 8f5b 	dmb	ish
    871e:	4605      	mov	r5, r0
    8720:	2201      	movs	r2, #1
    8722:	e853 1f00 	ldrex	r1, [r3]
    8726:	2900      	cmp	r1, #0
    8728:	d103      	bne.n	8732 <bt_gatt_service_register+0x1e>
    872a:	e843 2000 	strex	r0, r2, [r3]
    872e:	2800      	cmp	r0, #0
    8730:	d1f7      	bne.n	8722 <bt_gatt_service_register+0xe>
    8732:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
    8736:	d101      	bne.n	873c <bt_gatt_service_register+0x28>
    8738:	f7ff fbac 	bl	7e94 <bt_gatt_service_init.part.0>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    873c:	682b      	ldr	r3, [r5, #0]
    873e:	2400      	movs	r4, #0
    8740:	6818      	ldr	r0, [r3, #0]
    8742:	f88d 4000 	strb.w	r4, [sp]
    8746:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    874a:	4669      	mov	r1, sp
    874c:	f8ad 3002 	strh.w	r3, [sp, #2]
    8750:	f011 ffd7 	bl	1a702 <bt_uuid_cmp>
    8754:	b928      	cbnz	r0, 8762 <bt_gatt_service_register+0x4e>
		return -EALREADY;
    8756:	f06f 0477 	mvn.w	r4, #119	; 0x77
}
    875a:	4620      	mov	r0, r4
    875c:	b003      	add	sp, #12
    875e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
    8762:	682b      	ldr	r3, [r5, #0]
    8764:	a901      	add	r1, sp, #4
    8766:	6818      	ldr	r0, [r3, #0]
    8768:	f88d 4004 	strb.w	r4, [sp, #4]
    876c:	f641 0301 	movw	r3, #6145	; 0x1801
    8770:	f8ad 3006 	strh.w	r3, [sp, #6]
    8774:	f011 ffc5 	bl	1a702 <bt_uuid_cmp>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    8778:	2800      	cmp	r0, #0
    877a:	d0ec      	beq.n	8756 <bt_gatt_service_register+0x42>
	return list->head;
    877c:	4c52      	ldr	r4, [pc, #328]	; (88c8 <bt_gatt_service_register+0x1b4>)
	k_sched_lock();
    877e:	f00f fbd1 	bl	17f24 <k_sched_lock>
	if (sys_slist_is_empty(&db)) {
    8782:	6826      	ldr	r6, [r4, #0]
	struct bt_gatt_attr *attrs = svc->attrs;
    8784:	f8d5 8000 	ldr.w	r8, [r5]
	uint16_t count = svc->attr_count;
    8788:	f8b5 9004 	ldrh.w	r9, [r5, #4]
	if (sys_slist_is_empty(&db)) {
    878c:	b936      	cbnz	r6, 879c <bt_gatt_service_register+0x88>
		handle = last_static_handle;
    878e:	4b4f      	ldr	r3, [pc, #316]	; (88cc <bt_gatt_service_register+0x1b8>)
    8790:	881f      	ldrh	r7, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, found_attr, &attr);
    8792:	f8df b13c 	ldr.w	fp, [pc, #316]	; 88d0 <bt_gatt_service_register+0x1bc>
	const struct bt_gatt_attr *attr = NULL;
    8796:	f04f 0a00 	mov.w	sl, #0
    879a:	e01a      	b.n	87d2 <bt_gatt_service_register+0xbe>
	return list->tail;
    879c:	6863      	ldr	r3, [r4, #4]
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    879e:	2b00      	cmp	r3, #0
    87a0:	f000 808d 	beq.w	88be <bt_gatt_service_register+0x1aa>
	handle = last->attrs[last->attr_count - 1].handle;
    87a4:	e953 3202 	ldrd	r3, r2, [r3, #-8]
    87a8:	2114      	movs	r1, #20
    87aa:	fb01 3302 	mla	r3, r1, r2, r3
    87ae:	f833 7c04 	ldrh.w	r7, [r3, #-4]
    87b2:	463e      	mov	r6, r7
    87b4:	e7ed      	b.n	8792 <bt_gatt_service_register+0x7e>
		if (!attrs->handle) {
    87b6:	f8b8 1010 	ldrh.w	r1, [r8, #16]
    87ba:	bb39      	cbnz	r1, 880c <bt_gatt_service_register+0xf8>
			attrs->handle = ++handle;
    87bc:	1c79      	adds	r1, r7, #1
    87be:	b289      	uxth	r1, r1
    87c0:	f8a8 1010 	strh.w	r1, [r8, #16]
	for (; attrs && count; attrs++, count--) {
    87c4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    87c8:	f108 0814 	add.w	r8, r8, #20
    87cc:	fa1f f989 	uxth.w	r9, r9
    87d0:	460f      	mov	r7, r1
    87d2:	f1b8 0f00 	cmp.w	r8, #0
    87d6:	d002      	beq.n	87de <bt_gatt_service_register+0xca>
    87d8:	f1b9 0f00 	cmp.w	r9, #0
    87dc:	d1eb      	bne.n	87b6 <bt_gatt_service_register+0xa2>
	if (last_handle == 0 || svc->attrs[0].handle > last_handle) {
    87de:	b11e      	cbz	r6, 87e8 <bt_gatt_service_register+0xd4>
    87e0:	682b      	ldr	r3, [r5, #0]
    87e2:	8a18      	ldrh	r0, [r3, #16]
    87e4:	4286      	cmp	r6, r0
    87e6:	d22f      	bcs.n	8848 <bt_gatt_service_register+0x134>
	parent->next = child;
    87e8:	2200      	movs	r2, #0
		sys_slist_append(&db, &svc->node);
    87ea:	f105 0308 	add.w	r3, r5, #8
    87ee:	60aa      	str	r2, [r5, #8]
	return list->tail;
    87f0:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    87f2:	2a00      	cmp	r2, #0
    87f4:	d146      	bne.n	8884 <bt_gatt_service_register+0x170>
	list->head = node;
    87f6:	e9c4 3300 	strd	r3, r3, [r4]
	if (!atomic_get(&init)) {
    87fa:	4836      	ldr	r0, [pc, #216]	; (88d4 <bt_gatt_service_register+0x1c0>)
    87fc:	f012 ff0a 	bl	1b614 <atomic_get>
    8800:	4604      	mov	r4, r0
    8802:	2800      	cmp	r0, #0
    8804:	d14b      	bne.n	889e <bt_gatt_service_register+0x18a>
		k_sched_unlock();
    8806:	f00f fd5b 	bl	182c0 <k_sched_unlock>
		return 0;
    880a:	e7a6      	b.n	875a <bt_gatt_service_register+0x46>
		} else if (attrs->handle > handle) {
    880c:	42b9      	cmp	r1, r7
    880e:	d8d9      	bhi.n	87c4 <bt_gatt_service_register+0xb0>
	bt_gatt_foreach_attr(handle, handle, found_attr, &attr);
    8810:	ab01      	add	r3, sp, #4
    8812:	465a      	mov	r2, fp
    8814:	4608      	mov	r0, r1
	const struct bt_gatt_attr *attr = NULL;
    8816:	f8cd a004 	str.w	sl, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, found_attr, &attr);
    881a:	f013 f925 	bl	1ba68 <bt_gatt_foreach_attr>
	return attr;
    881e:	9b01      	ldr	r3, [sp, #4]
		} else if (find_attr(attrs->handle)) {
    8820:	b183      	cbz	r3, 8844 <bt_gatt_service_register+0x130>
    8822:	4b2d      	ldr	r3, [pc, #180]	; (88d8 <bt_gatt_service_register+0x1c4>)
    8824:	4a2d      	ldr	r2, [pc, #180]	; (88dc <bt_gatt_service_register+0x1c8>)
			BT_ERR("Unable to register handle 0x%04x",
    8826:	f8b8 1010 	ldrh.w	r1, [r8, #16]
    882a:	482d      	ldr	r0, [pc, #180]	; (88e0 <bt_gatt_service_register+0x1cc>)
    882c:	1ad2      	subs	r2, r2, r3
    882e:	08d2      	lsrs	r2, r2, #3
    8830:	0192      	lsls	r2, r2, #6
    8832:	f042 0201 	orr.w	r2, r2, #1
    8836:	f010 fe11 	bl	1945c <log_1>
		return err;
    883a:	f06f 0415 	mvn.w	r4, #21
		k_sched_unlock();
    883e:	f00f fd3f 	bl	182c0 <k_sched_unlock>
		return err;
    8842:	e78a      	b.n	875a <bt_gatt_service_register+0x46>
    8844:	4639      	mov	r1, r7
    8846:	e7bd      	b.n	87c4 <bt_gatt_service_register+0xb0>
	return list->head;
    8848:	6821      	ldr	r1, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, tmp, node) {
    884a:	2900      	cmp	r1, #0
    884c:	d0d5      	beq.n	87fa <bt_gatt_service_register+0xe6>
    884e:	f1a1 0308 	sub.w	r3, r1, #8
    8852:	2200      	movs	r2, #0
    8854:	2b00      	cmp	r3, #0
    8856:	d0d0      	beq.n	87fa <bt_gatt_service_register+0xe6>
		if (tmp->attrs[0].handle > svc->attrs[0].handle) {
    8858:	681e      	ldr	r6, [r3, #0]
    885a:	8a36      	ldrh	r6, [r6, #16]
    885c:	4286      	cmp	r6, r0
    885e:	d914      	bls.n	888a <bt_gatt_service_register+0x176>
				sys_slist_insert(&db, &prev->node, &svc->node);
    8860:	f105 0308 	add.w	r3, r5, #8
			if (prev) {
    8864:	b112      	cbz	r2, 886c <bt_gatt_service_register+0x158>
Z_GENLIST_INSERT(slist, snode)
    8866:	f112 0f08 	cmn.w	r2, #8
    886a:	d105      	bne.n	8878 <bt_gatt_service_register+0x164>
Z_GENLIST_PREPEND(slist, snode)
    886c:	6862      	ldr	r2, [r4, #4]
	parent->next = child;
    886e:	60a9      	str	r1, [r5, #8]
	list->head = node;
    8870:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    8872:	2a00      	cmp	r2, #0
    8874:	d1c1      	bne.n	87fa <bt_gatt_service_register+0xe6>
    8876:	e006      	b.n	8886 <bt_gatt_service_register+0x172>
	return node->next;
    8878:	6891      	ldr	r1, [r2, #8]
	parent->next = child;
    887a:	60a9      	str	r1, [r5, #8]
Z_GENLIST_INSERT(slist, snode)
    887c:	2900      	cmp	r1, #0
    887e:	d0b7      	beq.n	87f0 <bt_gatt_service_register+0xdc>
	parent->next = child;
    8880:	6093      	str	r3, [r2, #8]
	if (err < 0) {
    8882:	e7ba      	b.n	87fa <bt_gatt_service_register+0xe6>
    8884:	6013      	str	r3, [r2, #0]
	list->tail = node;
    8886:	6063      	str	r3, [r4, #4]
    8888:	e7b7      	b.n	87fa <bt_gatt_service_register+0xe6>
Z_GENLIST_PEEK_NEXT(slist, snode)
    888a:	f113 0f08 	cmn.w	r3, #8
    888e:	d0b4      	beq.n	87fa <bt_gatt_service_register+0xe6>
	return node->next;
    8890:	689e      	ldr	r6, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, tmp, node) {
    8892:	2e00      	cmp	r6, #0
    8894:	d0b1      	beq.n	87fa <bt_gatt_service_register+0xe6>
    8896:	461a      	mov	r2, r3
    8898:	f1a6 0308 	sub.w	r3, r6, #8
    889c:	e7da      	b.n	8854 <bt_gatt_service_register+0x140>
		    svc->attrs[svc->attr_count - 1].handle);
    889e:	e9d5 2300 	ldrd	r2, r3, [r5]
	sc_indicate(svc->attrs[0].handle,
    88a2:	2114      	movs	r1, #20
    88a4:	fb01 2303 	mla	r3, r1, r3, r2
    88a8:	8a10      	ldrh	r0, [r2, #16]
    88aa:	f833 1c04 	ldrh.w	r1, [r3, #-4]
    88ae:	f7ff fce7 	bl	8280 <sc_indicate>
	return 0;
    88b2:	2400      	movs	r4, #0
	db_changed();
    88b4:	f7ff fc0a 	bl	80cc <db_changed>
	k_sched_unlock();
    88b8:	f00f fd02 	bl	182c0 <k_sched_unlock>
	return 0;
    88bc:	e74d      	b.n	875a <bt_gatt_service_register+0x46>
	handle = last->attrs[last->attr_count - 1].handle;
    88be:	681b      	ldr	r3, [r3, #0]
    88c0:	deff      	udf	#255	; 0xff
    88c2:	bf00      	nop
    88c4:	20001a68 	.word	0x20001a68
    88c8:	20001a44 	.word	0x20001a44
    88cc:	20002e12 	.word	0x20002e12
    88d0:	0001b5c9 	.word	0x0001b5c9
    88d4:	20001a4c 	.word	0x20001a4c
    88d8:	0001ef2c 	.word	0x0001ef2c
    88dc:	0001f014 	.word	0x0001f014
    88e0:	0002100e 	.word	0x0002100e

000088e4 <ccc_set_direct>:
{
    88e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    88e8:	b0b9      	sub	sp, #228	; 0xe4
    88ea:	4688      	mov	r8, r1
    88ec:	4614      	mov	r4, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
    88ee:	493f      	ldr	r1, [pc, #252]	; (89ec <ccc_set_direct+0x108>)
    88f0:	9840      	ldr	r0, [sp, #256]	; 0x100
    88f2:	466a      	mov	r2, sp
{
    88f4:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
    88f6:	f011 f904 	bl	19b02 <settings_name_steq>
    88fa:	b978      	cbnz	r0, 891c <ccc_set_direct+0x38>
    88fc:	4b3c      	ldr	r3, [pc, #240]	; (89f0 <ccc_set_direct+0x10c>)
    88fe:	493d      	ldr	r1, [pc, #244]	; (89f4 <ccc_set_direct+0x110>)
			BT_ERR("Invalid key");
    8900:	483d      	ldr	r0, [pc, #244]	; (89f8 <ccc_set_direct+0x114>)
    8902:	1ac9      	subs	r1, r1, r3
    8904:	08c9      	lsrs	r1, r1, #3
    8906:	0189      	lsls	r1, r1, #6
    8908:	f041 0101 	orr.w	r1, r1, #1
    890c:	f010 fd99 	bl	19442 <log_0>
			return -EINVAL;
    8910:	f06f 0515 	mvn.w	r5, #21
}
    8914:	4628      	mov	r0, r5
    8916:	b039      	add	sp, #228	; 0xe4
    8918:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
    891c:	9e00      	ldr	r6, [sp, #0]
		settings_name_next(name, &next);
    891e:	a901      	add	r1, sp, #4
    8920:	4630      	mov	r0, r6
    8922:	f011 f911 	bl	19b48 <settings_name_next>
		if (!name) {
    8926:	b96e      	cbnz	r6, 8944 <ccc_set_direct+0x60>
    8928:	4932      	ldr	r1, [pc, #200]	; (89f4 <ccc_set_direct+0x110>)
    892a:	4b31      	ldr	r3, [pc, #196]	; (89f0 <ccc_set_direct+0x10c>)
			BT_ERR("Insufficient number of arguments");
    892c:	4833      	ldr	r0, [pc, #204]	; (89fc <ccc_set_direct+0x118>)
    892e:	1ac9      	subs	r1, r1, r3
    8930:	08c9      	lsrs	r1, r1, #3
    8932:	0189      	lsls	r1, r1, #6
    8934:	f041 0101 	orr.w	r1, r1, #1
    8938:	f010 fd83 	bl	19442 <log_0>
			return -EINVAL;
    893c:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
    8940:	4625      	mov	r5, r4
    8942:	e7e7      	b.n	8914 <ccc_set_direct+0x30>
		} else if (!next) {
    8944:	9801      	ldr	r0, [sp, #4]
    8946:	b9c0      	cbnz	r0, 897a <ccc_set_direct+0x96>
		err = bt_settings_decode_key(name, &addr);
    8948:	f10d 0908 	add.w	r9, sp, #8
			load.addr_with_id.id = BT_ID_DEFAULT;
    894c:	2300      	movs	r3, #0
		err = bt_settings_decode_key(name, &addr);
    894e:	4649      	mov	r1, r9
    8950:	4630      	mov	r0, r6
			load.addr_with_id.id = BT_ID_DEFAULT;
    8952:	f88d 3014 	strb.w	r3, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
    8956:	f011 fd02 	bl	1a35e <bt_settings_decode_key>
		if (err) {
    895a:	4605      	mov	r5, r0
    895c:	b1f8      	cbz	r0, 899e <ccc_set_direct+0xba>
    895e:	4a24      	ldr	r2, [pc, #144]	; (89f0 <ccc_set_direct+0x10c>)
    8960:	4c24      	ldr	r4, [pc, #144]	; (89f4 <ccc_set_direct+0x110>)
    8962:	4630      	mov	r0, r6
    8964:	1aa4      	subs	r4, r4, r2
    8966:	08e4      	lsrs	r4, r4, #3
    8968:	f7f9 fec8 	bl	26fc <z_log_strdup>
			BT_ERR("Unable to decode address %s", log_strdup(name));
    896c:	01a4      	lsls	r4, r4, #6
    896e:	f044 0401 	orr.w	r4, r4, #1
    8972:	4601      	mov	r1, r0
    8974:	4622      	mov	r2, r4
    8976:	4822      	ldr	r0, [pc, #136]	; (8a00 <ccc_set_direct+0x11c>)
    8978:	e00e      	b.n	8998 <ccc_set_direct+0xb4>
			unsigned long next_id = strtoul(next, NULL, 10);
    897a:	2100      	movs	r1, #0
    897c:	220a      	movs	r2, #10
    897e:	f011 fbab 	bl	1a0d8 <strtoul>
			if (next_id >= CONFIG_BT_ID_MAX) {
    8982:	4601      	mov	r1, r0
    8984:	2800      	cmp	r0, #0
    8986:	d0df      	beq.n	8948 <ccc_set_direct+0x64>
    8988:	4a1a      	ldr	r2, [pc, #104]	; (89f4 <ccc_set_direct+0x110>)
    898a:	4b19      	ldr	r3, [pc, #100]	; (89f0 <ccc_set_direct+0x10c>)
				BT_ERR("Invalid local identity %lu", next_id);
    898c:	481d      	ldr	r0, [pc, #116]	; (8a04 <ccc_set_direct+0x120>)
    898e:	1ad2      	subs	r2, r2, r3
    8990:	08d2      	lsrs	r2, r2, #3
    8992:	0192      	lsls	r2, r2, #6
    8994:	f042 0201 	orr.w	r2, r2, #1
			BT_ERR("Unable to decode address %s", log_strdup(name));
    8998:	f010 fd60 	bl	1945c <log_1>
    899c:	e7ce      	b.n	893c <ccc_set_direct+0x58>
		load.addr_with_id.addr = &addr;
    899e:	f8cd 9010 	str.w	r9, [sp, #16]
		if (len_rd) {
    89a2:	f1b8 0f00 	cmp.w	r8, #0
    89a6:	d01d      	beq.n	89e4 <ccc_set_direct+0x100>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
    89a8:	ae08      	add	r6, sp, #32
    89aa:	22c0      	movs	r2, #192	; 0xc0
    89ac:	4631      	mov	r1, r6
    89ae:	4638      	mov	r0, r7
    89b0:	47a0      	blx	r4
			if (len < 0) {
    89b2:	1e04      	subs	r4, r0, #0
    89b4:	da0b      	bge.n	89ce <ccc_set_direct+0xea>
    89b6:	4b0e      	ldr	r3, [pc, #56]	; (89f0 <ccc_set_direct+0x10c>)
    89b8:	4a0e      	ldr	r2, [pc, #56]	; (89f4 <ccc_set_direct+0x110>)
				BT_ERR("Failed to decode value (err %zd)", len);
    89ba:	4813      	ldr	r0, [pc, #76]	; (8a08 <ccc_set_direct+0x124>)
    89bc:	1ad2      	subs	r2, r2, r3
    89be:	08d2      	lsrs	r2, r2, #3
    89c0:	0192      	lsls	r2, r2, #6
    89c2:	f042 0201 	orr.w	r2, r2, #1
    89c6:	4621      	mov	r1, r4
    89c8:	f010 fd48 	bl	1945c <log_1>
				return len;
    89cc:	e7b8      	b.n	8940 <ccc_set_direct+0x5c>
			load.count = len / sizeof(*ccc_store);
    89ce:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
    89d0:	9606      	str	r6, [sp, #24]
			load.count = len / sizeof(*ccc_store);
    89d2:	9407      	str	r4, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
    89d4:	4a0d      	ldr	r2, [pc, #52]	; (8a0c <ccc_set_direct+0x128>)
    89d6:	ab04      	add	r3, sp, #16
    89d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    89dc:	2001      	movs	r0, #1
    89de:	f013 f843 	bl	1ba68 <bt_gatt_foreach_attr>
	return 0;
    89e2:	e797      	b.n	8914 <ccc_set_direct+0x30>
			load.count = 0;
    89e4:	e9cd 0006 	strd	r0, r0, [sp, #24]
    89e8:	e7f4      	b.n	89d4 <ccc_set_direct+0xf0>
    89ea:	bf00      	nop
    89ec:	0002102f 	.word	0x0002102f
    89f0:	0001ef2c 	.word	0x0001ef2c
    89f4:	0001f014 	.word	0x0001f014
    89f8:	00021036 	.word	0x00021036
    89fc:	0002008c 	.word	0x0002008c
    8a00:	00020f02 	.word	0x00020f02
    8a04:	00020f1e 	.word	0x00020f1e
    8a08:	00020e8c 	.word	0x00020e8c
    8a0c:	00008009 	.word	0x00008009

00008a10 <gatt_indicate>:
{
    8a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8a14:	4615      	mov	r5, r2
    8a16:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
    8a18:	2214      	movs	r2, #20
    8a1a:	6869      	ldr	r1, [r5, #4]
{
    8a1c:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
    8a1e:	f013 f830 	bl	1ba82 <bt_gatt_check_perm>
    8a22:	b170      	cbz	r0, 8a42 <gatt_indicate+0x32>
    8a24:	4b28      	ldr	r3, [pc, #160]	; (8ac8 <gatt_indicate+0xb8>)
    8a26:	4929      	ldr	r1, [pc, #164]	; (8acc <gatt_indicate+0xbc>)
		BT_WARN("Link is not encrypted");
    8a28:	4829      	ldr	r0, [pc, #164]	; (8ad0 <gatt_indicate+0xc0>)
    8a2a:	1ac9      	subs	r1, r1, r3
    8a2c:	08c9      	lsrs	r1, r1, #3
    8a2e:	0189      	lsls	r1, r1, #6
    8a30:	f041 0102 	orr.w	r1, r1, #2
    8a34:	f010 fd05 	bl	19442 <log_0>
		return -EPERM;
    8a38:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
}
    8a3c:	4628      	mov	r0, r5
    8a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    8a42:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    8a46:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
    8a48:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    8a4a:	f7fe ff55 	bl	78f8 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
    8a4e:	3602      	adds	r6, #2
	if (!req) {
    8a50:	4604      	mov	r4, r0
    8a52:	b910      	cbnz	r0, 8a5a <gatt_indicate+0x4a>
		return -ENOMEM;
    8a54:	f06f 050b 	mvn.w	r5, #11
    8a58:	e7f0      	b.n	8a3c <gatt_indicate+0x2c>
	req->func = func;
    8a5a:	4b1e      	ldr	r3, [pc, #120]	; (8ad4 <gatt_indicate+0xc4>)
    8a5c:	6043      	str	r3, [r0, #4]
	req->user_data = params;
    8a5e:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
    8a60:	4632      	mov	r2, r6
    8a62:	211d      	movs	r1, #29
    8a64:	4640      	mov	r0, r8
    8a66:	f7fe fc8b 	bl	7380 <bt_att_create_pdu>
	if (!buf) {
    8a6a:	4606      	mov	r6, r0
    8a6c:	b968      	cbnz	r0, 8a8a <gatt_indicate+0x7a>
    8a6e:	4b16      	ldr	r3, [pc, #88]	; (8ac8 <gatt_indicate+0xb8>)
    8a70:	4916      	ldr	r1, [pc, #88]	; (8acc <gatt_indicate+0xbc>)
		BT_WARN("No buffer available to send indication");
    8a72:	4819      	ldr	r0, [pc, #100]	; (8ad8 <gatt_indicate+0xc8>)
    8a74:	1ac9      	subs	r1, r1, r3
    8a76:	08c9      	lsrs	r1, r1, #3
    8a78:	0189      	lsls	r1, r1, #6
    8a7a:	f041 0102 	orr.w	r1, r1, #2
    8a7e:	f010 fce0 	bl	19442 <log_0>
		bt_att_req_free(req);
    8a82:	4620      	mov	r0, r4
    8a84:	f7fe ff4e 	bl	7924 <bt_att_req_free>
    8a88:	e7e4      	b.n	8a54 <gatt_indicate+0x44>
	return net_buf_simple_add(&buf->b, len);
    8a8a:	f100 0a08 	add.w	sl, r0, #8
    8a8e:	2102      	movs	r1, #2
    8a90:	4650      	mov	r0, sl
    8a92:	f015 f8ba 	bl	1dc0a <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    8a96:	4607      	mov	r7, r0
    8a98:	8aa9      	ldrh	r1, [r5, #20]
    8a9a:	f827 9b02 	strh.w	r9, [r7], #2
    8a9e:	4650      	mov	r0, sl
    8aa0:	f015 f8b3 	bl	1dc0a <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    8aa4:	8aaa      	ldrh	r2, [r5, #20]
    8aa6:	6929      	ldr	r1, [r5, #16]
    8aa8:	4638      	mov	r0, r7
    8aaa:	f011 fbe8 	bl	1a27e <memcpy>
	req->buf = buf;
    8aae:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
    8ab0:	4621      	mov	r1, r4
    8ab2:	4640      	mov	r0, r8
    8ab4:	f012 fd73 	bl	1b59e <bt_att_req_send>
	if (err) {
    8ab8:	4605      	mov	r5, r0
    8aba:	2800      	cmp	r0, #0
    8abc:	d0be      	beq.n	8a3c <gatt_indicate+0x2c>
		bt_att_req_free(req);
    8abe:	4620      	mov	r0, r4
    8ac0:	f7fe ff30 	bl	7924 <bt_att_req_free>
    8ac4:	e7ba      	b.n	8a3c <gatt_indicate+0x2c>
    8ac6:	bf00      	nop
    8ac8:	0001ef2c 	.word	0x0001ef2c
    8acc:	0001f014 	.word	0x0001f014
    8ad0:	00021042 	.word	0x00021042
    8ad4:	0001b5e3 	.word	0x0001b5e3
    8ad8:	00021058 	.word	0x00021058

00008adc <bt_gatt_indicate>:
{
    8adc:	b530      	push	{r4, r5, lr}
    8ade:	4604      	mov	r4, r0
    8ae0:	b08b      	sub	sp, #44	; 0x2c
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8ae2:	4837      	ldr	r0, [pc, #220]	; (8bc0 <bt_gatt_indicate+0xe4>)
    8ae4:	f012 fd96 	bl	1b614 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    8ae8:	0782      	lsls	r2, r0, #30
{
    8aea:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    8aec:	d561      	bpl.n	8bb2 <bt_gatt_indicate+0xd6>
	if (conn && conn->state != BT_CONN_CONNECTED) {
    8aee:	b114      	cbz	r4, 8af6 <bt_gatt_indicate+0x1a>
    8af0:	7aa3      	ldrb	r3, [r4, #10]
    8af2:	2b07      	cmp	r3, #7
    8af4:	d160      	bne.n	8bb8 <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
    8af6:	6868      	ldr	r0, [r5, #4]
    8af8:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    8afa:	f7ff fcc9 	bl	8490 <bt_gatt_attr_get_handle>
	if (params->uuid) {
    8afe:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    8b00:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
    8b04:	b33a      	cbz	r2, 8b56 <bt_gatt_indicate+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    8b06:	a905      	add	r1, sp, #20
    8b08:	9102      	str	r1, [sp, #8]
    8b0a:	492e      	ldr	r1, [pc, #184]	; (8bc4 <bt_gatt_indicate+0xe8>)
    8b0c:	9101      	str	r1, [sp, #4]
    8b0e:	2101      	movs	r1, #1
	found->attr = NULL;
    8b10:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    8b12:	9100      	str	r1, [sp, #0]
    8b14:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    8b18:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    8b1a:	f7ff fce9 	bl	84f0 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
    8b1e:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    8b20:	b91b      	cbnz	r3, 8b2a <bt_gatt_indicate+0x4e>
			return -ENOENT;
    8b22:	f06f 0001 	mvn.w	r0, #1
}
    8b26:	b00b      	add	sp, #44	; 0x2c
    8b28:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
    8b2a:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    8b2c:	9b05      	ldr	r3, [sp, #20]
    8b2e:	6818      	ldr	r0, [r3, #0]
    8b30:	2300      	movs	r3, #0
    8b32:	f88d 3010 	strb.w	r3, [sp, #16]
    8b36:	a904      	add	r1, sp, #16
    8b38:	f642 0303 	movw	r3, #10243	; 0x2803
    8b3c:	f8ad 3012 	strh.w	r3, [sp, #18]
    8b40:	f011 fddf 	bl	1a702 <bt_uuid_cmp>
    8b44:	b970      	cbnz	r0, 8b64 <bt_gatt_indicate+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    8b46:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    8b48:	68c3      	ldr	r3, [r0, #12]
    8b4a:	799b      	ldrb	r3, [r3, #6]
    8b4c:	069b      	lsls	r3, r3, #26
    8b4e:	d405      	bmi.n	8b5c <bt_gatt_indicate+0x80>
			return -EINVAL;
    8b50:	f06f 0015 	mvn.w	r0, #21
    8b54:	e7e7      	b.n	8b26 <bt_gatt_indicate+0x4a>
		if (!data.handle) {
    8b56:	2800      	cmp	r0, #0
    8b58:	d1e8      	bne.n	8b2c <bt_gatt_indicate+0x50>
    8b5a:	e7e2      	b.n	8b22 <bt_gatt_indicate+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    8b5c:	f012 ff36 	bl	1b9cc <bt_gatt_attr_value_handle>
    8b60:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
    8b64:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
    8b68:	b13c      	cbz	r4, 8b7a <bt_gatt_indicate+0x9e>
		params->_ref = 1;
    8b6a:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
    8b6c:	4601      	mov	r1, r0
		params->_ref = 1;
    8b6e:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
    8b70:	462a      	mov	r2, r5
    8b72:	4620      	mov	r0, r4
    8b74:	f7ff ff4c 	bl	8a10 <gatt_indicate>
    8b78:	e7d5      	b.n	8b26 <bt_gatt_indicate+0x4a>
	data.err = -ENOTCONN;
    8b7a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    8b7e:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    8b80:	2302      	movs	r3, #2
    8b82:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    8b86:	f642 1302 	movw	r3, #10498	; 0x2902
    8b8a:	f8ad 3012 	strh.w	r3, [sp, #18]
    8b8e:	ab05      	add	r3, sp, #20
    8b90:	9302      	str	r3, [sp, #8]
    8b92:	4b0d      	ldr	r3, [pc, #52]	; (8bc8 <bt_gatt_indicate+0xec>)
    8b94:	9301      	str	r3, [sp, #4]
    8b96:	2301      	movs	r3, #1
    8b98:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
    8b9a:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    8b9c:	4623      	mov	r3, r4
    8b9e:	aa04      	add	r2, sp, #16
    8ba0:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    8ba4:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    8ba6:	f88d 4010 	strb.w	r4, [sp, #16]
    8baa:	f7ff fca1 	bl	84f0 <bt_gatt_foreach_attr_type>
	return data.err;
    8bae:	9807      	ldr	r0, [sp, #28]
    8bb0:	e7b9      	b.n	8b26 <bt_gatt_indicate+0x4a>
		return -EAGAIN;
    8bb2:	f06f 000a 	mvn.w	r0, #10
    8bb6:	e7b6      	b.n	8b26 <bt_gatt_indicate+0x4a>
		return -ENOTCONN;
    8bb8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    8bbc:	e7b3      	b.n	8b26 <bt_gatt_indicate+0x4a>
    8bbe:	bf00      	nop
    8bc0:	200000cc 	.word	0x200000cc
    8bc4:	0001b609 	.word	0x0001b609
    8bc8:	00008db9 	.word	0x00008db9

00008bcc <sc_process>:
{
    8bcc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    8bce:	f830 3c08 	ldrh.w	r3, [r0, #-8]
    8bd2:	f8ad 3004 	strh.w	r3, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    8bd6:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
    8bda:	4604      	mov	r4, r0
	sc_range[1] = sys_cpu_to_le16(sc->end);
    8bdc:	f830 3c06 	ldrh.w	r3, [r0, #-6]
    8be0:	f8ad 3006 	strh.w	r3, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    8be4:	f1a0 0620 	sub.w	r6, r0, #32
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    8be8:	f06f 0101 	mvn.w	r1, #1
    8bec:	4628      	mov	r0, r5
    8bee:	f012 fdc4 	bl	1b77a <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
    8bf2:	4b0d      	ldr	r3, [pc, #52]	; (8c28 <sc_process+0x5c>)
    8bf4:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
    8bf8:	4b0c      	ldr	r3, [pc, #48]	; (8c2c <sc_process+0x60>)
    8bfa:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
    8bfe:	ab01      	add	r3, sp, #4
	sc->start = 0U;
    8c00:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
    8c02:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
    8c06:	2304      	movs	r3, #4
	sc->start = 0U;
    8c08:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
    8c0c:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
    8c10:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    8c14:	4631      	mov	r1, r6
    8c16:	f7ff ff61 	bl	8adc <bt_gatt_indicate>
    8c1a:	b918      	cbnz	r0, 8c24 <sc_process+0x58>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    8c1c:	2102      	movs	r1, #2
    8c1e:	4628      	mov	r0, r5
    8c20:	f012 fd54 	bl	1b6cc <atomic_or>
}
    8c24:	b002      	add	sp, #8
    8c26:	bd70      	pop	{r4, r5, r6, pc}
    8c28:	0001f590 	.word	0x0001f590
    8c2c:	00008309 	.word	0x00008309

00008c30 <gatt_notify>:
{
    8c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8c34:	4614      	mov	r4, r2
    8c36:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
    8c38:	2214      	movs	r2, #20
    8c3a:	6861      	ldr	r1, [r4, #4]
{
    8c3c:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
    8c3e:	f012 ff20 	bl	1ba82 <bt_gatt_check_perm>
    8c42:	b168      	cbz	r0, 8c60 <gatt_notify+0x30>
    8c44:	4b1e      	ldr	r3, [pc, #120]	; (8cc0 <gatt_notify+0x90>)
    8c46:	491f      	ldr	r1, [pc, #124]	; (8cc4 <gatt_notify+0x94>)
		BT_WARN("Link is not encrypted");
    8c48:	481f      	ldr	r0, [pc, #124]	; (8cc8 <gatt_notify+0x98>)
    8c4a:	1ac9      	subs	r1, r1, r3
    8c4c:	08c9      	lsrs	r1, r1, #3
    8c4e:	0189      	lsls	r1, r1, #6
    8c50:	f041 0102 	orr.w	r1, r1, #2
    8c54:	f010 fbf5 	bl	19442 <log_0>
		return -EPERM;
    8c58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    8c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				sizeof(*nfy) + params->len);
    8c60:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    8c62:	211b      	movs	r1, #27
    8c64:	3202      	adds	r2, #2
    8c66:	4638      	mov	r0, r7
    8c68:	f7fe fb8a 	bl	7380 <bt_att_create_pdu>
	if (!buf) {
    8c6c:	4605      	mov	r5, r0
    8c6e:	b960      	cbnz	r0, 8c8a <gatt_notify+0x5a>
    8c70:	4b13      	ldr	r3, [pc, #76]	; (8cc0 <gatt_notify+0x90>)
    8c72:	4914      	ldr	r1, [pc, #80]	; (8cc4 <gatt_notify+0x94>)
		BT_WARN("No buffer available to send notification");
    8c74:	4815      	ldr	r0, [pc, #84]	; (8ccc <gatt_notify+0x9c>)
    8c76:	1ac9      	subs	r1, r1, r3
    8c78:	08c9      	lsrs	r1, r1, #3
    8c7a:	0189      	lsls	r1, r1, #6
    8c7c:	f041 0102 	orr.w	r1, r1, #2
    8c80:	f010 fbdf 	bl	19442 <log_0>
		return -ENOMEM;
    8c84:	f06f 000b 	mvn.w	r0, #11
    8c88:	e7e8      	b.n	8c5c <gatt_notify+0x2c>
    8c8a:	f100 0908 	add.w	r9, r0, #8
    8c8e:	2102      	movs	r1, #2
    8c90:	4648      	mov	r0, r9
    8c92:	f014 ffba 	bl	1dc0a <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    8c96:	4606      	mov	r6, r0
    8c98:	89a1      	ldrh	r1, [r4, #12]
    8c9a:	f826 8b02 	strh.w	r8, [r6], #2
    8c9e:	4648      	mov	r0, r9
    8ca0:	f014 ffb3 	bl	1dc0a <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
    8ca4:	89a2      	ldrh	r2, [r4, #12]
    8ca6:	68a1      	ldr	r1, [r4, #8]
    8ca8:	4630      	mov	r0, r6
    8caa:	f011 fae8 	bl	1a27e <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
    8cae:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    8cb2:	4629      	mov	r1, r5
    8cb4:	4638      	mov	r0, r7
}
    8cb6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
    8cba:	f012 bc25 	b.w	1b508 <bt_att_send>
    8cbe:	bf00      	nop
    8cc0:	0001ef2c 	.word	0x0001ef2c
    8cc4:	0001f014 	.word	0x0001f014
    8cc8:	00021042 	.word	0x00021042
    8ccc:	0002107f 	.word	0x0002107f

00008cd0 <bt_gatt_notify_cb>:
{
    8cd0:	b530      	push	{r4, r5, lr}
    8cd2:	4604      	mov	r4, r0
    8cd4:	b08b      	sub	sp, #44	; 0x2c
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8cd6:	4835      	ldr	r0, [pc, #212]	; (8dac <bt_gatt_notify_cb+0xdc>)
    8cd8:	f012 fc9c 	bl	1b614 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    8cdc:	0782      	lsls	r2, r0, #30
{
    8cde:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    8ce0:	d55d      	bpl.n	8d9e <bt_gatt_notify_cb+0xce>
	if (conn && conn->state != BT_CONN_CONNECTED) {
    8ce2:	b114      	cbz	r4, 8cea <bt_gatt_notify_cb+0x1a>
    8ce4:	7aa3      	ldrb	r3, [r4, #10]
    8ce6:	2b07      	cmp	r3, #7
    8ce8:	d15c      	bne.n	8da4 <bt_gatt_notify_cb+0xd4>
	data.attr = params->attr;
    8cea:	6868      	ldr	r0, [r5, #4]
    8cec:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    8cee:	f7ff fbcf 	bl	8490 <bt_gatt_attr_get_handle>
	if (params->uuid) {
    8cf2:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    8cf4:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
    8cf8:	b33a      	cbz	r2, 8d4a <bt_gatt_notify_cb+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    8cfa:	a905      	add	r1, sp, #20
    8cfc:	9102      	str	r1, [sp, #8]
    8cfe:	492c      	ldr	r1, [pc, #176]	; (8db0 <bt_gatt_notify_cb+0xe0>)
    8d00:	9101      	str	r1, [sp, #4]
    8d02:	2101      	movs	r1, #1
	found->attr = NULL;
    8d04:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    8d06:	9100      	str	r1, [sp, #0]
    8d08:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    8d0c:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    8d0e:	f7ff fbef 	bl	84f0 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
    8d12:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    8d14:	b91b      	cbnz	r3, 8d1e <bt_gatt_notify_cb+0x4e>
			return -ENOENT;
    8d16:	f06f 0001 	mvn.w	r0, #1
}
    8d1a:	b00b      	add	sp, #44	; 0x2c
    8d1c:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
    8d1e:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    8d20:	9b05      	ldr	r3, [sp, #20]
    8d22:	6818      	ldr	r0, [r3, #0]
    8d24:	2300      	movs	r3, #0
    8d26:	f88d 3010 	strb.w	r3, [sp, #16]
    8d2a:	a904      	add	r1, sp, #16
    8d2c:	f642 0303 	movw	r3, #10243	; 0x2803
    8d30:	f8ad 3012 	strh.w	r3, [sp, #18]
    8d34:	f011 fce5 	bl	1a702 <bt_uuid_cmp>
    8d38:	b970      	cbnz	r0, 8d58 <bt_gatt_notify_cb+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    8d3a:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
    8d3c:	68c3      	ldr	r3, [r0, #12]
    8d3e:	799b      	ldrb	r3, [r3, #6]
    8d40:	06db      	lsls	r3, r3, #27
    8d42:	d405      	bmi.n	8d50 <bt_gatt_notify_cb+0x80>
			return -EINVAL;
    8d44:	f06f 0015 	mvn.w	r0, #21
    8d48:	e7e7      	b.n	8d1a <bt_gatt_notify_cb+0x4a>
		if (!data.handle) {
    8d4a:	2800      	cmp	r0, #0
    8d4c:	d1e8      	bne.n	8d20 <bt_gatt_notify_cb+0x50>
    8d4e:	e7e2      	b.n	8d16 <bt_gatt_notify_cb+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    8d50:	f012 fe3c 	bl	1b9cc <bt_gatt_attr_value_handle>
    8d54:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
    8d58:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
    8d5c:	b12c      	cbz	r4, 8d6a <bt_gatt_notify_cb+0x9a>
		return gatt_notify(conn, data.handle, params);
    8d5e:	4601      	mov	r1, r0
    8d60:	462a      	mov	r2, r5
    8d62:	4620      	mov	r0, r4
    8d64:	f7ff ff64 	bl	8c30 <gatt_notify>
    8d68:	e7d7      	b.n	8d1a <bt_gatt_notify_cb+0x4a>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    8d6a:	f642 1202 	movw	r2, #10498	; 0x2902
    8d6e:	f8ad 2012 	strh.w	r2, [sp, #18]
    8d72:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
    8d74:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    8d78:	9202      	str	r2, [sp, #8]
    8d7a:	4a0e      	ldr	r2, [pc, #56]	; (8db4 <bt_gatt_notify_cb+0xe4>)
	data.err = -ENOTCONN;
    8d7c:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
    8d7e:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    8d80:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
    8d84:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    8d88:	aa04      	add	r2, sp, #16
    8d8a:	4623      	mov	r3, r4
    8d8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
    8d90:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    8d92:	f88d 4010 	strb.w	r4, [sp, #16]
    8d96:	f7ff fbab 	bl	84f0 <bt_gatt_foreach_attr_type>
	return data.err;
    8d9a:	9807      	ldr	r0, [sp, #28]
    8d9c:	e7bd      	b.n	8d1a <bt_gatt_notify_cb+0x4a>
		return -EAGAIN;
    8d9e:	f06f 000a 	mvn.w	r0, #10
    8da2:	e7ba      	b.n	8d1a <bt_gatt_notify_cb+0x4a>
		return -ENOTCONN;
    8da4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    8da8:	e7b7      	b.n	8d1a <bt_gatt_notify_cb+0x4a>
    8daa:	bf00      	nop
    8dac:	200000cc 	.word	0x200000cc
    8db0:	0001b609 	.word	0x0001b609
    8db4:	00008db9 	.word	0x00008db9

00008db8 <notify_cb>:
{
    8db8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    8dba:	4b37      	ldr	r3, [pc, #220]	; (8e98 <notify_cb+0xe0>)
{
    8dbc:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    8dbe:	6882      	ldr	r2, [r0, #8]
    8dc0:	429a      	cmp	r2, r3
{
    8dc2:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    8dc4:	d12d      	bne.n	8e22 <notify_cb+0x6a>
	ccc = attr->user_data;
    8dc6:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    8dc8:	4b34      	ldr	r3, [pc, #208]	; (8e9c <notify_cb+0xe4>)
    8dca:	429f      	cmp	r7, r3
    8dcc:	d119      	bne.n	8e02 <notify_cb+0x4a>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    8dce:	4d34      	ldr	r5, [pc, #208]	; (8ea0 <notify_cb+0xe8>)
    8dd0:	2300      	movs	r3, #0
    8dd2:	4669      	mov	r1, sp
    8dd4:	1c68      	adds	r0, r5, #1
    8dd6:	9300      	str	r3, [sp, #0]
    8dd8:	f8cd 3003 	str.w	r3, [sp, #3]
    8ddc:	f012 fc85 	bl	1b6ea <bt_addr_le_cmp>
    8de0:	b178      	cbz	r0, 8e02 <notify_cb+0x4a>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    8de2:	4629      	mov	r1, r5
    8de4:	2207      	movs	r2, #7
    8de6:	f811 0b01 	ldrb.w	r0, [r1], #1
    8dea:	f7fd fbcd 	bl	6588 <bt_conn_lookup_state_le>
			if (!conn) {
    8dee:	b9e0      	cbnz	r0, 8e2a <notify_cb+0x72>
				sc = (struct sc_data *)data->ind_params->data;
    8df0:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
    8df2:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
    8df4:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
    8df6:	f811 0b01 	ldrb.w	r0, [r1], #1
    8dfa:	8853      	ldrh	r3, [r2, #2]
    8dfc:	8812      	ldrh	r2, [r2, #0]
    8dfe:	f7fe ff65 	bl	7ccc <sc_save>
		if (cfg->value != data->type) {
    8e02:	893a      	ldrh	r2, [r7, #8]
    8e04:	89a3      	ldrh	r3, [r4, #12]
    8e06:	429a      	cmp	r2, r3
    8e08:	d10b      	bne.n	8e22 <notify_cb+0x6a>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    8e0a:	4639      	mov	r1, r7
    8e0c:	f811 0b01 	ldrb.w	r0, [r1], #1
    8e10:	f7fd fb76 	bl	6500 <bt_conn_lookup_addr_le>
		if (!conn) {
    8e14:	4605      	mov	r5, r0
    8e16:	b120      	cbz	r0, 8e22 <notify_cb+0x6a>
		if (conn->state != BT_CONN_CONNECTED) {
    8e18:	7a83      	ldrb	r3, [r0, #10]
    8e1a:	2b07      	cmp	r3, #7
    8e1c:	d008      	beq.n	8e30 <notify_cb+0x78>
			bt_conn_unref(conn);
    8e1e:	f011 fe5e 	bl	1aade <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
    8e22:	2701      	movs	r7, #1
}
    8e24:	4638      	mov	r0, r7
    8e26:	b003      	add	sp, #12
    8e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
    8e2a:	f011 fe58 	bl	1aade <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    8e2e:	e7e8      	b.n	8e02 <notify_cb+0x4a>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    8e30:	697b      	ldr	r3, [r7, #20]
    8e32:	b123      	cbz	r3, 8e3e <notify_cb+0x86>
    8e34:	4631      	mov	r1, r6
    8e36:	4798      	blx	r3
    8e38:	b908      	cbnz	r0, 8e3e <notify_cb+0x86>
			bt_conn_unref(conn);
    8e3a:	4628      	mov	r0, r5
    8e3c:	e7ef      	b.n	8e1e <notify_cb+0x66>
		if (bt_gatt_check_perm(conn, attr,
    8e3e:	2214      	movs	r2, #20
    8e40:	4631      	mov	r1, r6
    8e42:	4628      	mov	r0, r5
    8e44:	f012 fe1d 	bl	1ba82 <bt_gatt_check_perm>
    8e48:	4607      	mov	r7, r0
    8e4a:	b150      	cbz	r0, 8e62 <notify_cb+0xaa>
    8e4c:	4b15      	ldr	r3, [pc, #84]	; (8ea4 <notify_cb+0xec>)
    8e4e:	4916      	ldr	r1, [pc, #88]	; (8ea8 <notify_cb+0xf0>)
			BT_WARN("Link is not encrypted");
    8e50:	4816      	ldr	r0, [pc, #88]	; (8eac <notify_cb+0xf4>)
    8e52:	1ac9      	subs	r1, r1, r3
    8e54:	08c9      	lsrs	r1, r1, #3
    8e56:	0189      	lsls	r1, r1, #6
    8e58:	f041 0102 	orr.w	r1, r1, #2
    8e5c:	f010 faf1 	bl	19442 <log_0>
			continue;
    8e60:	e7df      	b.n	8e22 <notify_cb+0x6a>
		if (data->type == BT_GATT_CCC_INDICATE) {
    8e62:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
    8e64:	88a1      	ldrh	r1, [r4, #4]
    8e66:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
    8e68:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
    8e6a:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
    8e6c:	d10f      	bne.n	8e8e <notify_cb+0xd6>
			err = gatt_indicate(conn, data->handle,
    8e6e:	f7ff fdcf 	bl	8a10 <gatt_indicate>
			if (err == 0) {
    8e72:	4606      	mov	r6, r0
    8e74:	b918      	cbnz	r0, 8e7e <notify_cb+0xc6>
				data->ind_params->_ref++;
    8e76:	6922      	ldr	r2, [r4, #16]
    8e78:	7d93      	ldrb	r3, [r2, #22]
    8e7a:	3301      	adds	r3, #1
    8e7c:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
    8e7e:	4628      	mov	r0, r5
    8e80:	f011 fe2d 	bl	1aade <bt_conn_unref>
		if (err < 0) {
    8e84:	2e00      	cmp	r6, #0
    8e86:	dbcd      	blt.n	8e24 <notify_cb+0x6c>
		data->err = 0;
    8e88:	2300      	movs	r3, #0
    8e8a:	60a3      	str	r3, [r4, #8]
    8e8c:	e7c9      	b.n	8e22 <notify_cb+0x6a>
			err = gatt_notify(conn, data->handle, data->nfy_params);
    8e8e:	f7ff fecf 	bl	8c30 <gatt_notify>
    8e92:	4606      	mov	r6, r0
    8e94:	e7f3      	b.n	8e7e <notify_cb+0xc6>
    8e96:	bf00      	nop
    8e98:	00007ba9 	.word	0x00007ba9
    8e9c:	200002f8 	.word	0x200002f8
    8ea0:	20002e14 	.word	0x20002e14
    8ea4:	0001ef2c 	.word	0x0001ef2c
    8ea8:	0001f014 	.word	0x0001f014
    8eac:	00021042 	.word	0x00021042

00008eb0 <update_ccc>:
{
    8eb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    8eb2:	4b34      	ldr	r3, [pc, #208]	; (8f84 <update_ccc+0xd4>)
	struct bt_conn *conn = data->conn;
    8eb4:	6815      	ldr	r5, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
    8eb6:	6882      	ldr	r2, [r0, #8]
    8eb8:	429a      	cmp	r2, r3
{
    8eba:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    8ebc:	d11b      	bne.n	8ef6 <update_ccc+0x46>
	ccc = attr->user_data;
    8ebe:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
    8ec0:	8933      	ldrh	r3, [r6, #8]
    8ec2:	b1c3      	cbz	r3, 8ef6 <update_ccc+0x46>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    8ec4:	4632      	mov	r2, r6
    8ec6:	4628      	mov	r0, r5
    8ec8:	f812 1b01 	ldrb.w	r1, [r2], #1
    8ecc:	f011 fe72 	bl	1abb4 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    8ed0:	b188      	cbz	r0, 8ef6 <update_ccc+0x46>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    8ed2:	222a      	movs	r2, #42	; 0x2a
    8ed4:	4621      	mov	r1, r4
    8ed6:	4628      	mov	r0, r5
    8ed8:	f012 fdd3 	bl	1ba82 <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    8edc:	2803      	cmp	r0, #3
    8ede:	d10d      	bne.n	8efc <update_ccc+0x4c>
    8ee0:	4a29      	ldr	r2, [pc, #164]	; (8f88 <update_ccc+0xd8>)
    8ee2:	4b2a      	ldr	r3, [pc, #168]	; (8f8c <update_ccc+0xdc>)
				BT_WARN("CCC %p not writable", attr);
    8ee4:	482a      	ldr	r0, [pc, #168]	; (8f90 <update_ccc+0xe0>)
    8ee6:	1ad2      	subs	r2, r2, r3
    8ee8:	08d2      	lsrs	r2, r2, #3
    8eea:	0192      	lsls	r2, r2, #6
    8eec:	f042 0202 	orr.w	r2, r2, #2
    8ef0:	4621      	mov	r1, r4
    8ef2:	f010 fab3 	bl	1945c <log_1>
}
    8ef6:	2001      	movs	r0, #1
    8ef8:	b002      	add	sp, #8
    8efa:	bd70      	pop	{r4, r5, r6, pc}
		gatt_ccc_changed(attr, ccc);
    8efc:	4631      	mov	r1, r6
    8efe:	4620      	mov	r0, r4
    8f00:	f012 fb65 	bl	1b5ce <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    8f04:	4b23      	ldr	r3, [pc, #140]	; (8f94 <update_ccc+0xe4>)
    8f06:	429e      	cmp	r6, r3
    8f08:	d1f5      	bne.n	8ef6 <update_ccc+0x46>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    8f0a:	7a28      	ldrb	r0, [r5, #8]
    8f0c:	f105 0188 	add.w	r1, r5, #136	; 0x88
    8f10:	f7fe fe3a 	bl	7b88 <find_sc_cfg>
	if (!cfg) {
    8f14:	4604      	mov	r4, r0
    8f16:	2800      	cmp	r0, #0
    8f18:	d0ed      	beq.n	8ef6 <update_ccc+0x46>
	if (!(cfg->data.start || cfg->data.end)) {
    8f1a:	8902      	ldrh	r2, [r0, #8]
    8f1c:	8943      	ldrh	r3, [r0, #10]
    8f1e:	ea53 0102 	orrs.w	r1, r3, r2
    8f22:	d0e8      	beq.n	8ef6 <update_ccc+0x46>
	index = bt_conn_index(conn);
    8f24:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    8f26:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    8f2a:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
    8f2e:	f7fd fa17 	bl	6360 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    8f32:	4919      	ldr	r1, [pc, #100]	; (8f98 <update_ccc+0xe8>)
    8f34:	4a19      	ldr	r2, [pc, #100]	; (8f9c <update_ccc+0xec>)
    8f36:	2318      	movs	r3, #24
    8f38:	fb03 1300 	mla	r3, r3, r0, r1
    8f3c:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    8f3e:	4a18      	ldr	r2, [pc, #96]	; (8fa0 <update_ccc+0xf0>)
    8f40:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    8f42:	aa01      	add	r2, sp, #4
    8f44:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
    8f46:	2204      	movs	r2, #4
    8f48:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    8f4a:	b203      	sxth	r3, r0
    8f4c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8f50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    8f54:	4628      	mov	r0, r5
    8f56:	f7ff fdc1 	bl	8adc <bt_gatt_indicate>
    8f5a:	b148      	cbz	r0, 8f70 <update_ccc+0xc0>
    8f5c:	490a      	ldr	r1, [pc, #40]	; (8f88 <update_ccc+0xd8>)
    8f5e:	4b0b      	ldr	r3, [pc, #44]	; (8f8c <update_ccc+0xdc>)
		BT_ERR("SC restore indication failed");
    8f60:	4810      	ldr	r0, [pc, #64]	; (8fa4 <update_ccc+0xf4>)
    8f62:	1ac9      	subs	r1, r1, r3
    8f64:	08c9      	lsrs	r1, r1, #3
    8f66:	0189      	lsls	r1, r1, #6
    8f68:	f041 0101 	orr.w	r1, r1, #1
    8f6c:	f010 fa69 	bl	19442 <log_0>
	memset(&cfg->data, 0, sizeof(cfg->data));
    8f70:	2204      	movs	r2, #4
    8f72:	2100      	movs	r1, #0
    8f74:	f104 0008 	add.w	r0, r4, #8
    8f78:	f011 f98c 	bl	1a294 <memset>
		sc_store(cfg);
    8f7c:	4620      	mov	r0, r4
    8f7e:	f7fe fe73 	bl	7c68 <sc_store>
    8f82:	e7b8      	b.n	8ef6 <update_ccc+0x46>
    8f84:	00007ba9 	.word	0x00007ba9
    8f88:	0001f014 	.word	0x0001f014
    8f8c:	0001ef2c 	.word	0x0001ef2c
    8f90:	000210a8 	.word	0x000210a8
    8f94:	200002f8 	.word	0x200002f8
    8f98:	20001a50 	.word	0x20001a50
    8f9c:	0001f590 	.word	0x0001f590
    8fa0:	0001b6f1 	.word	0x0001b6f1
    8fa4:	000210bc 	.word	0x000210bc

00008fa8 <bt_gatt_connected>:
{
    8fa8:	b530      	push	{r4, r5, lr}
    8faa:	b08f      	sub	sp, #60	; 0x3c
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    8fac:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
    8fb0:	4604      	mov	r4, r0
	data.conn = conn;
    8fb2:	9003      	str	r0, [sp, #12]
	data.sec = BT_SECURITY_L1;
    8fb4:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    8fb6:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
    8fb8:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    8fbc:	4629      	mov	r1, r5
    8fbe:	f011 fc90 	bl	1a8e2 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
    8fc2:	b190      	cbz	r0, 8fea <bt_gatt_connected+0x42>
		if (conn->id) {
    8fc4:	7a22      	ldrb	r2, [r4, #8]
    8fc6:	b1ca      	cbz	r2, 8ffc <bt_gatt_connected+0x54>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
    8fc8:	ac02      	add	r4, sp, #8
    8fca:	2104      	movs	r1, #4
    8fcc:	4620      	mov	r0, r4
    8fce:	f00f fd43 	bl	18a58 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
    8fd2:	9400      	str	r4, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
    8fd4:	4a0a      	ldr	r2, [pc, #40]	; (9000 <bt_gatt_connected+0x58>)
    8fd6:	2124      	movs	r1, #36	; 0x24
    8fd8:	a805      	add	r0, sp, #20
    8fda:	462b      	mov	r3, r5
    8fdc:	f7fb f838 	bl	4050 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
    8fe0:	aa05      	add	r2, sp, #20
    8fe2:	4908      	ldr	r1, [pc, #32]	; (9004 <bt_gatt_connected+0x5c>)
    8fe4:	4610      	mov	r0, r2
    8fe6:	f7fa f861 	bl	30ac <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    8fea:	4a07      	ldr	r2, [pc, #28]	; (9008 <bt_gatt_connected+0x60>)
    8fec:	ab03      	add	r3, sp, #12
    8fee:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8ff2:	2001      	movs	r0, #1
    8ff4:	f012 fd38 	bl	1ba68 <bt_gatt_foreach_attr>
}
    8ff8:	b00f      	add	sp, #60	; 0x3c
    8ffa:	bd30      	pop	{r4, r5, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
    8ffc:	9200      	str	r2, [sp, #0]
    8ffe:	e7e9      	b.n	8fd4 <bt_gatt_connected+0x2c>
    9000:	00021032 	.word	0x00021032
    9004:	000088e5 	.word	0x000088e5
    9008:	00008eb1 	.word	0x00008eb1

0000900c <bt_gatt_att_max_mtu_changed>:
{
    900c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
    900e:	4b09      	ldr	r3, [pc, #36]	; (9034 <bt_gatt_att_max_mtu_changed+0x28>)
    9010:	681c      	ldr	r4, [r3, #0]
    9012:	4605      	mov	r5, r0
    9014:	460e      	mov	r6, r1
    9016:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    9018:	b10c      	cbz	r4, 901e <bt_gatt_att_max_mtu_changed+0x12>
    901a:	3c04      	subs	r4, #4
    901c:	b904      	cbnz	r4, 9020 <bt_gatt_att_max_mtu_changed+0x14>
}
    901e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->att_mtu_updated) {
    9020:	6823      	ldr	r3, [r4, #0]
    9022:	b11b      	cbz	r3, 902c <bt_gatt_att_max_mtu_changed+0x20>
			cb->att_mtu_updated(conn, tx, rx);
    9024:	463a      	mov	r2, r7
    9026:	4631      	mov	r1, r6
    9028:	4628      	mov	r0, r5
    902a:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    902c:	1d23      	adds	r3, r4, #4
    902e:	d0f6      	beq.n	901e <bt_gatt_att_max_mtu_changed+0x12>
	return node->next;
    9030:	6864      	ldr	r4, [r4, #4]
    9032:	e7f1      	b.n	9018 <bt_gatt_att_max_mtu_changed+0xc>
    9034:	20001a2c 	.word	0x20001a2c

00009038 <db_hash_read>:
{
    9038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    903a:	4914      	ldr	r1, [pc, #80]	; (908c <db_hash_read+0x54>)
{
    903c:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    9040:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    9042:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
    9046:	461f      	mov	r7, r3
    9048:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    904a:	f015 fb2b 	bl	1e6a4 <k_work_cancel_delayable_sync>
    904e:	4810      	ldr	r0, [pc, #64]	; (9090 <db_hash_read+0x58>)
    9050:	f012 fae0 	bl	1b614 <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
    9054:	0743      	lsls	r3, r0, #29
    9056:	d402      	bmi.n	905e <db_hash_read+0x26>
		db_hash_gen(true);
    9058:	2001      	movs	r0, #1
    905a:	f7ff fad3 	bl	8604 <db_hash_gen>
	(void)bt_gatt_change_aware(conn, true);
    905e:	2101      	movs	r1, #1
    9060:	4620      	mov	r0, r4
    9062:	f012 fd31 	bl	1bac8 <bt_gatt_change_aware>
	if (offset > value_len) {
    9066:	2e10      	cmp	r6, #16
    9068:	d80c      	bhi.n	9084 <db_hash_read+0x4c>
	len = MIN(buf_len, value_len - offset);
    906a:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
    906e:	4909      	ldr	r1, [pc, #36]	; (9094 <db_hash_read+0x5c>)
	len = MIN(buf_len, value_len - offset);
    9070:	42bc      	cmp	r4, r7
    9072:	bfa8      	it	ge
    9074:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
    9076:	4622      	mov	r2, r4
    9078:	4431      	add	r1, r6
    907a:	4628      	mov	r0, r5
    907c:	f011 f8ff 	bl	1a27e <memcpy>
}
    9080:	4620      	mov	r0, r4
    9082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    9084:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
    9088:	e7fa      	b.n	9080 <db_hash_read+0x48>
    908a:	bf00      	nop
    908c:	20001040 	.word	0x20001040
    9090:	200010b8 	.word	0x200010b8
    9094:	20000ff0 	.word	0x20000ff0

00009098 <bt_gatt_store_ccc>:
{
    9098:	b570      	push	{r4, r5, r6, lr}
    909a:	b0c0      	sub	sp, #256	; 0x100
	save.count = 0;
    909c:	2300      	movs	r3, #0
{
    909e:	4604      	mov	r4, r0
    90a0:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
    90a2:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
    90a4:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
    90a8:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
    90aa:	4a18      	ldr	r2, [pc, #96]	; (910c <bt_gatt_store_ccc+0x74>)
    90ac:	ab0d      	add	r3, sp, #52	; 0x34
    90ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
    90b2:	2001      	movs	r0, #1
    90b4:	f012 fcd8 	bl	1ba68 <bt_gatt_foreach_attr>
	if (id) {
    90b8:	b31c      	cbz	r4, 9102 <bt_gatt_store_ccc+0x6a>
		u8_to_dec(id_str, sizeof(id_str), id);
    90ba:	ae03      	add	r6, sp, #12
    90bc:	4622      	mov	r2, r4
    90be:	2104      	movs	r1, #4
    90c0:	4630      	mov	r0, r6
    90c2:	f00f fcc9 	bl	18a58 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
    90c6:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
    90c8:	4a11      	ldr	r2, [pc, #68]	; (9110 <bt_gatt_store_ccc+0x78>)
    90ca:	462b      	mov	r3, r5
    90cc:	2124      	movs	r1, #36	; 0x24
    90ce:	a804      	add	r0, sp, #16
    90d0:	f7fa ffbe 	bl	4050 <bt_settings_encode_key>
	if (save.count) {
    90d4:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
    90d6:	b1b2      	cbz	r2, 9106 <bt_gatt_store_ccc+0x6e>
		len = save.count * sizeof(*save.store);
    90d8:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
    90da:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
    90dc:	a804      	add	r0, sp, #16
    90de:	f7f9 ffbf 	bl	3060 <settings_save_one>
	if (err) {
    90e2:	4604      	mov	r4, r0
    90e4:	b150      	cbz	r0, 90fc <bt_gatt_store_ccc+0x64>
    90e6:	4a0b      	ldr	r2, [pc, #44]	; (9114 <bt_gatt_store_ccc+0x7c>)
    90e8:	4b0b      	ldr	r3, [pc, #44]	; (9118 <bt_gatt_store_ccc+0x80>)
    90ea:	1ad2      	subs	r2, r2, r3
    90ec:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Failed to store CCCs (err %d)", err);
    90ee:	0192      	lsls	r2, r2, #6
    90f0:	4601      	mov	r1, r0
    90f2:	f042 0201 	orr.w	r2, r2, #1
    90f6:	4809      	ldr	r0, [pc, #36]	; (911c <bt_gatt_store_ccc+0x84>)
    90f8:	f010 f9b0 	bl	1945c <log_1>
}
    90fc:	4620      	mov	r0, r4
    90fe:	b040      	add	sp, #256	; 0x100
    9100:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
    9102:	9400      	str	r4, [sp, #0]
    9104:	e7e0      	b.n	90c8 <bt_gatt_store_ccc+0x30>
		str = NULL;
    9106:	4611      	mov	r1, r2
    9108:	e7e8      	b.n	90dc <bt_gatt_store_ccc+0x44>
    910a:	bf00      	nop
    910c:	00008095 	.word	0x00008095
    9110:	00021032 	.word	0x00021032
    9114:	0001f014 	.word	0x0001f014
    9118:	0001ef2c 	.word	0x0001ef2c
    911c:	000210d9 	.word	0x000210d9

00009120 <bt_gatt_service_unregister>:
{
    9120:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9124:	4604      	mov	r4, r0
	k_sched_lock();
    9126:	f00e fefd 	bl	17f24 <k_sched_lock>
	return list->head;
    912a:	4a38      	ldr	r2, [pc, #224]	; (920c <bt_gatt_service_unregister+0xec>)
    912c:	6813      	ldr	r3, [r2, #0]
	if (!sys_slist_find_and_remove(&db, &svc->node)) {
    912e:	f104 0008 	add.w	r0, r4, #8
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9132:	2100      	movs	r1, #0
    9134:	b93b      	cbnz	r3, 9146 <bt_gatt_service_unregister+0x26>
		k_sched_unlock();
    9136:	f00f f8c3 	bl	182c0 <k_sched_unlock>
		return err;
    913a:	f06f 0501 	mvn.w	r5, #1
}
    913e:	4628      	mov	r0, r5
    9140:	b003      	add	sp, #12
    9142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9146:	4298      	cmp	r0, r3
    9148:	d11f      	bne.n	918a <bt_gatt_service_unregister+0x6a>
	return node->next;
    914a:	68a3      	ldr	r3, [r4, #8]
	return list->tail;
    914c:	6855      	ldr	r5, [r2, #4]
Z_GENLIST_REMOVE(slist, snode)
    914e:	b9b9      	cbnz	r1, 9180 <bt_gatt_service_unregister+0x60>
    9150:	42a8      	cmp	r0, r5
	list->head = node;
    9152:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    9154:	d100      	bne.n	9158 <bt_gatt_service_unregister+0x38>
	list->tail = node;
    9156:	6053      	str	r3, [r2, #4]
	parent->next = child;
    9158:	2500      	movs	r5, #0
		if (attr->write == bt_gatt_attr_write_ccc) {
    915a:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 9210 <bt_gatt_service_unregister+0xf0>
    915e:	60a5      	str	r5, [r4, #8]
		struct bt_gatt_attr *attr = &svc->attrs[i];
    9160:	f04f 0914 	mov.w	r9, #20
	ccc->value = 0;
    9164:	46a8      	mov	r8, r5
	for (uint16_t i = 0; i < svc->attr_count; i++) {
    9166:	6863      	ldr	r3, [r4, #4]
    9168:	b2aa      	uxth	r2, r5
    916a:	4293      	cmp	r3, r2
    916c:	d810      	bhi.n	9190 <bt_gatt_service_unregister+0x70>
	if (!atomic_get(&init)) {
    916e:	4829      	ldr	r0, [pc, #164]	; (9214 <bt_gatt_service_unregister+0xf4>)
    9170:	f012 fa50 	bl	1b614 <atomic_get>
    9174:	4605      	mov	r5, r0
    9176:	2800      	cmp	r0, #0
    9178:	d138      	bne.n	91ec <bt_gatt_service_unregister+0xcc>
		k_sched_unlock();
    917a:	f00f f8a1 	bl	182c0 <k_sched_unlock>
		return 0;
    917e:	e7de      	b.n	913e <bt_gatt_service_unregister+0x1e>
Z_GENLIST_REMOVE(slist, snode)
    9180:	42a8      	cmp	r0, r5
	parent->next = child;
    9182:	600b      	str	r3, [r1, #0]
	list->tail = node;
    9184:	bf08      	it	eq
    9186:	6051      	streq	r1, [r2, #4]
}
    9188:	e7e6      	b.n	9158 <bt_gatt_service_unregister+0x38>
	return node->next;
    918a:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    918c:	681b      	ldr	r3, [r3, #0]
    918e:	e7d1      	b.n	9134 <bt_gatt_service_unregister+0x14>
		struct bt_gatt_attr *attr = &svc->attrs[i];
    9190:	6823      	ldr	r3, [r4, #0]
    9192:	fb09 3302 	mla	r3, r9, r2, r3
		if (attr->write == bt_gatt_attr_write_ccc) {
    9196:	689a      	ldr	r2, [r3, #8]
    9198:	4552      	cmp	r2, sl
    919a:	d125      	bne.n	91e8 <bt_gatt_service_unregister+0xc8>
			gatt_unregister_ccc(attr->user_data);
    919c:	68de      	ldr	r6, [r3, #12]
		if (bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    919e:	f8cd 8000 	str.w	r8, [sp]
    91a2:	1c77      	adds	r7, r6, #1
	ccc->value = 0;
    91a4:	f8a6 800a 	strh.w	r8, [r6, #10]
		if (bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    91a8:	4669      	mov	r1, sp
    91aa:	4638      	mov	r0, r7
    91ac:	f8cd 8003 	str.w	r8, [sp, #3]
    91b0:	f012 fa9b 	bl	1b6ea <bt_addr_le_cmp>
    91b4:	b1c0      	cbz	r0, 91e8 <bt_gatt_service_unregister+0xc8>
			conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    91b6:	7830      	ldrb	r0, [r6, #0]
    91b8:	4639      	mov	r1, r7
    91ba:	f7fd f9a1 	bl	6500 <bt_conn_lookup_addr_le>
			if (conn) {
    91be:	b948      	cbnz	r0, 91d4 <bt_gatt_service_unregister+0xb4>
			    bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
    91c0:	7830      	ldrb	r0, [r6, #0]
    91c2:	4639      	mov	r1, r7
    91c4:	f011 fb8d 	bl	1a8e2 <bt_addr_le_is_bonded>
			if (IS_ENABLED(CONFIG_BT_SETTINGS) && store &&
    91c8:	b158      	cbz	r0, 91e2 <bt_gatt_service_unregister+0xc2>
				bt_gatt_store_ccc(cfg->id, &cfg->peer);
    91ca:	7830      	ldrb	r0, [r6, #0]
    91cc:	4639      	mov	r1, r7
    91ce:	f7ff ff63 	bl	9098 <bt_gatt_store_ccc>
    91d2:	e006      	b.n	91e2 <bt_gatt_service_unregister+0xc2>
				if (conn->state == BT_CONN_CONNECTED) {
    91d4:	f890 b00a 	ldrb.w	fp, [r0, #10]
				bt_conn_unref(conn);
    91d8:	f011 fc81 	bl	1aade <bt_conn_unref>
			if (IS_ENABLED(CONFIG_BT_SETTINGS) && store &&
    91dc:	f1bb 0f07 	cmp.w	fp, #7
    91e0:	d1ee      	bne.n	91c0 <bt_gatt_service_unregister+0xa0>
			clear_ccc_cfg(cfg);
    91e2:	4630      	mov	r0, r6
    91e4:	f012 fabb 	bl	1b75e <clear_ccc_cfg>
	for (uint16_t i = 0; i < svc->attr_count; i++) {
    91e8:	3501      	adds	r5, #1
    91ea:	e7bc      	b.n	9166 <bt_gatt_service_unregister+0x46>
		    svc->attrs[svc->attr_count - 1].handle);
    91ec:	e9d4 2300 	ldrd	r2, r3, [r4]
	sc_indicate(svc->attrs[0].handle,
    91f0:	2114      	movs	r1, #20
    91f2:	fb01 2303 	mla	r3, r1, r3, r2
    91f6:	8a10      	ldrh	r0, [r2, #16]
    91f8:	f833 1c04 	ldrh.w	r1, [r3, #-4]
    91fc:	f7ff f840 	bl	8280 <sc_indicate>
	return 0;
    9200:	2500      	movs	r5, #0
	db_changed();
    9202:	f7fe ff63 	bl	80cc <db_changed>
	k_sched_unlock();
    9206:	f00f f85b 	bl	182c0 <k_sched_unlock>
	return 0;
    920a:	e798      	b.n	913e <bt_gatt_service_unregister+0x1e>
    920c:	20001a44 	.word	0x20001a44
    9210:	00007ba9 	.word	0x00007ba9
    9214:	20001a4c 	.word	0x20001a4c

00009218 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    9218:	b5f0      	push	{r4, r5, r6, r7, lr}
    921a:	4604      	mov	r4, r0
    921c:	b08d      	sub	sp, #52	; 0x34
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    921e:	4603      	mov	r3, r0
    9220:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9224:	2001      	movs	r0, #1
    9226:	4a3a      	ldr	r2, [pc, #232]	; (9310 <bt_gatt_disconnected+0xf8>)
		k_work_cancel_delayable(&gatt_ccc_store.work);
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    9228:	f104 0588 	add.w	r5, r4, #136	; 0x88
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    922c:	f012 fc1c 	bl	1ba68 <bt_gatt_foreach_attr>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    9230:	7a20      	ldrb	r0, [r4, #8]
    9232:	4629      	mov	r1, r5
    9234:	f011 fb55 	bl	1a8e2 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    9238:	2800      	cmp	r0, #0
    923a:	d035      	beq.n	92a8 <bt_gatt_disconnected+0x90>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
    923c:	4629      	mov	r1, r5
    923e:	7a20      	ldrb	r0, [r4, #8]
    9240:	f7ff ff2a 	bl	9098 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
    9244:	4620      	mov	r0, r4
    9246:	f7fe fc81 	bl	7b4c <find_cf_cfg>
	if (!cfg) {
    924a:	4606      	mov	r6, r0
    924c:	2800      	cmp	r0, #0
    924e:	d04b      	beq.n	92e8 <bt_gatt_disconnected+0xd0>
		if (conn->id) {
    9250:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
    9252:	3608      	adds	r6, #8
		if (conn->id) {
    9254:	2a00      	cmp	r2, #0
    9256:	d049      	beq.n	92ec <bt_gatt_disconnected+0xd4>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
    9258:	af02      	add	r7, sp, #8
    925a:	2104      	movs	r1, #4
    925c:	4638      	mov	r0, r7
    925e:	f00f fbfb 	bl	18a58 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
    9262:	9700      	str	r7, [sp, #0]
    9264:	462b      	mov	r3, r5
    9266:	4a2b      	ldr	r2, [pc, #172]	; (9314 <bt_gatt_disconnected+0xfc>)
    9268:	2124      	movs	r1, #36	; 0x24
    926a:	a803      	add	r0, sp, #12
    926c:	f7fa fef0 	bl	4050 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
    9270:	7a23      	ldrb	r3, [r4, #8]
    9272:	2701      	movs	r7, #1
    9274:	b93b      	cbnz	r3, 9286 <bt_gatt_disconnected+0x6e>
		bt_settings_encode_key(key, sizeof(key), "cf",
    9276:	2300      	movs	r3, #0
    9278:	9300      	str	r3, [sp, #0]
    927a:	4a26      	ldr	r2, [pc, #152]	; (9314 <bt_gatt_disconnected+0xfc>)
    927c:	462b      	mov	r3, r5
    927e:	2124      	movs	r1, #36	; 0x24
    9280:	a803      	add	r0, sp, #12
    9282:	f7fa fee5 	bl	4050 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
    9286:	4631      	mov	r1, r6
    9288:	463a      	mov	r2, r7
    928a:	a803      	add	r0, sp, #12
    928c:	f7f9 fee8 	bl	3060 <settings_save_one>
	if (err) {
    9290:	4601      	mov	r1, r0
    9292:	b148      	cbz	r0, 92a8 <bt_gatt_disconnected+0x90>
    9294:	4a20      	ldr	r2, [pc, #128]	; (9318 <bt_gatt_disconnected+0x100>)
    9296:	4b21      	ldr	r3, [pc, #132]	; (931c <bt_gatt_disconnected+0x104>)
		BT_ERR("Failed to store Client Features (err %d)", err);
    9298:	4821      	ldr	r0, [pc, #132]	; (9320 <bt_gatt_disconnected+0x108>)
    929a:	1ad2      	subs	r2, r2, r3
    929c:	08d2      	lsrs	r2, r2, #3
    929e:	0192      	lsls	r2, r2, #6
    92a0:	f042 0201 	orr.w	r2, r2, #1
    92a4:	f010 f8da 	bl	1945c <log_1>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    92a8:	7a20      	ldrb	r0, [r4, #8]
    92aa:	4629      	mov	r1, r5
    92ac:	f011 fb19 	bl	1a8e2 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
    92b0:	b150      	cbz	r0, 92c8 <bt_gatt_disconnected+0xb0>
		struct addr_with_id addr_with_id = {
    92b2:	7a23      	ldrb	r3, [r4, #8]
    92b4:	f88d 3010 	strb.w	r3, [sp, #16]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
    92b8:	4a1a      	ldr	r2, [pc, #104]	; (9324 <bt_gatt_disconnected+0x10c>)
		struct addr_with_id addr_with_id = {
    92ba:	9503      	str	r5, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
    92bc:	ab03      	add	r3, sp, #12
    92be:	f64f 71ff 	movw	r1, #65535	; 0xffff
    92c2:	2001      	movs	r0, #1
    92c4:	f012 fbd0 	bl	1ba68 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
    92c8:	4620      	mov	r0, r4
    92ca:	f7fe fc3f 	bl	7b4c <find_cf_cfg>
	if (!cfg) {
    92ce:	4606      	mov	r6, r0
    92d0:	b1d8      	cbz	r0, 930a <bt_gatt_disconnected+0xf2>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    92d2:	7a20      	ldrb	r0, [r4, #8]
    92d4:	4629      	mov	r1, r5
    92d6:	f011 fb04 	bl	1a8e2 <bt_addr_le_is_bonded>
    92da:	b948      	cbnz	r0, 92f0 <bt_gatt_disconnected+0xd8>
		clear_cf_cfg(cfg);
    92dc:	4630      	mov	r0, r6
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    92de:	b00d      	add	sp, #52	; 0x34
    92e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		clear_cf_cfg(cfg);
    92e4:	f012 ba7d 	b.w	1b7e2 <clear_cf_cfg>
		len = 0;
    92e8:	4607      	mov	r7, r0
    92ea:	e7c4      	b.n	9276 <bt_gatt_disconnected+0x5e>
    92ec:	2701      	movs	r7, #1
    92ee:	e7c2      	b.n	9276 <bt_gatt_disconnected+0x5e>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    92f0:	4629      	mov	r1, r5
    92f2:	1c70      	adds	r0, r6, #1
    92f4:	f012 fa30 	bl	1b758 <bt_addr_le_copy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    92f8:	f06f 0102 	mvn.w	r1, #2
    92fc:	f106 000c 	add.w	r0, r6, #12
}
    9300:	b00d      	add	sp, #52	; 0x34
    9302:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    9306:	f012 ba38 	b.w	1b77a <atomic_and>
    930a:	b00d      	add	sp, #52	; 0x34
    930c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    930e:	bf00      	nop
    9310:	000081f5 	.word	0x000081f5
    9314:	00021123 	.word	0x00021123
    9318:	0001f014 	.word	0x0001f014
    931c:	0001ef2c 	.word	0x0001ef2c
    9320:	000210f7 	.word	0x000210f7
    9324:	00007fe1 	.word	0x00007fe1

00009328 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    9328:	4a0b      	ldr	r2, [pc, #44]	; (9358 <bt_smp_accept+0x30>)
{
    932a:	b508      	push	{r3, lr}
    932c:	4603      	mov	r3, r0
		if (smp->chan.conn) {
    932e:	6810      	ldr	r0, [r2, #0]
    9330:	b918      	cbnz	r0, 933a <bt_smp_accept+0x12>
			continue;
		}

		smp->chan.ops = &ops;
    9332:	4b0a      	ldr	r3, [pc, #40]	; (935c <bt_smp_accept+0x34>)
    9334:	6053      	str	r3, [r2, #4]

		*chan = &smp->chan;
    9336:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    9338:	bd08      	pop	{r3, pc}
    933a:	4909      	ldr	r1, [pc, #36]	; (9360 <bt_smp_accept+0x38>)
    933c:	4a09      	ldr	r2, [pc, #36]	; (9364 <bt_smp_accept+0x3c>)
	BT_ERR("No available SMP context for conn %p", conn);
    933e:	480a      	ldr	r0, [pc, #40]	; (9368 <bt_smp_accept+0x40>)
    9340:	1a52      	subs	r2, r2, r1
    9342:	08d2      	lsrs	r2, r2, #3
    9344:	0192      	lsls	r2, r2, #6
    9346:	f042 0201 	orr.w	r2, r2, #1
    934a:	4619      	mov	r1, r3
    934c:	f010 f886 	bl	1945c <log_1>
	return -ENOMEM;
    9350:	f06f 000b 	mvn.w	r0, #11
    9354:	e7f0      	b.n	9338 <bt_smp_accept+0x10>
    9356:	bf00      	nop
    9358:	200010c0 	.word	0x200010c0
    935c:	0001f694 	.word	0x0001f694
    9360:	0001ef2c 	.word	0x0001ef2c
    9364:	0001f10c 	.word	0x0001f10c
    9368:	00021134 	.word	0x00021134

0000936c <bt_mesh_is_provisioned>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    936c:	4b04      	ldr	r3, [pc, #16]	; (9380 <bt_mesh_is_provisioned+0x14>)
    936e:	f3bf 8f5b 	dmb	ish
    9372:	6818      	ldr	r0, [r3, #0]
    9374:	f3bf 8f5b 	dmb	ish
}

bool bt_mesh_is_provisioned(void)
{
	return atomic_test_bit(bt_mesh.flags, BT_MESH_VALID);
}
    9378:	f000 0001 	and.w	r0, r0, #1
    937c:	4770      	bx	lr
    937e:	bf00      	nop
    9380:	200011e0 	.word	0x200011e0

00009384 <bt_mesh_start>:
		mod->cb->start(mod);
	}
}

int bt_mesh_start(void)
{
    9384:	b538      	push	{r3, r4, r5, lr}
	int err;

	err = bt_mesh_adv_enable();
    9386:	f003 fd2d 	bl	cde4 <bt_mesh_adv_enable>
	if (err) {
    938a:	4604      	mov	r4, r0
    938c:	b158      	cbz	r0, 93a6 <bt_mesh_start+0x22>
    938e:	4917      	ldr	r1, [pc, #92]	; (93ec <bt_mesh_start+0x68>)
    9390:	4b17      	ldr	r3, [pc, #92]	; (93f0 <bt_mesh_start+0x6c>)
		BT_ERR("Failed enabling advertiser");
    9392:	4818      	ldr	r0, [pc, #96]	; (93f4 <bt_mesh_start+0x70>)
    9394:	1ac9      	subs	r1, r1, r3
    9396:	08c9      	lsrs	r1, r1, #3
    9398:	0189      	lsls	r1, r1, #6
    939a:	f041 0101 	orr.w	r1, r1, #1
    939e:	f010 f850 	bl	19442 <log_0>
	bt_mesh_hb_start();

	bt_mesh_model_foreach(model_start, NULL);

	return 0;
}
    93a2:	4620      	mov	r0, r4
    93a4:	bd38      	pop	{r3, r4, r5, pc}
	if (bt_mesh_beacon_enabled()) {
    93a6:	f000 f867 	bl	9478 <bt_mesh_beacon_enabled>
    93aa:	b1e0      	cbz	r0, 93e6 <bt_mesh_start+0x62>
		bt_mesh_beacon_enable();
    93ac:	f000 fc04 	bl	9bb8 <bt_mesh_beacon_enable>
	    bt_mesh_gatt_proxy_get() != BT_MESH_GATT_PROXY_NOT_SUPPORTED) {
    93b0:	f000 f892 	bl	94d8 <bt_mesh_gatt_proxy_get>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    93b4:	2802      	cmp	r0, #2
    93b6:	d003      	beq.n	93c0 <bt_mesh_start+0x3c>
		bt_mesh_proxy_gatt_enable();
    93b8:	f004 fda2 	bl	df00 <bt_mesh_proxy_gatt_enable>
		bt_mesh_adv_update();
    93bc:	f003 fd0c 	bl	cdd8 <bt_mesh_adv_update>
		bt_mesh_scan_enable();
    93c0:	f000 fa1a 	bl	97f8 <bt_mesh_scan_enable>
		struct bt_mesh_subnet *sub = bt_mesh_subnet_next(NULL);
    93c4:	2000      	movs	r0, #0
    93c6:	f001 fb73 	bl	aab0 <bt_mesh_subnet_next>
    93ca:	4605      	mov	r5, r0
		uint16_t addr = bt_mesh_primary_addr();
    93cc:	f003 fb98 	bl	cb00 <bt_mesh_primary_addr>
    93d0:	4601      	mov	r1, r0
		bt_mesh_prov_complete(sub->net_idx, addr);
    93d2:	8ba8      	ldrh	r0, [r5, #28]
    93d4:	f003 fdc6 	bl	cf64 <bt_mesh_prov_complete>
	bt_mesh_hb_start();
    93d8:	f003 f896 	bl	c508 <bt_mesh_hb_start>
	bt_mesh_model_foreach(model_start, NULL);
    93dc:	4806      	ldr	r0, [pc, #24]	; (93f8 <bt_mesh_start+0x74>)
    93de:	2100      	movs	r1, #0
    93e0:	f003 f9c0 	bl	c764 <bt_mesh_model_foreach>
	return 0;
    93e4:	e7dd      	b.n	93a2 <bt_mesh_start+0x1e>
		bt_mesh_beacon_disable();
    93e6:	f000 fbf9 	bl	9bdc <bt_mesh_beacon_disable>
    93ea:	e7e1      	b.n	93b0 <bt_mesh_start+0x2c>
    93ec:	0001f09c 	.word	0x0001f09c
    93f0:	0001ef2c 	.word	0x0001ef2c
    93f4:	00021160 	.word	0x00021160
    93f8:	0001bb6d 	.word	0x0001bb6d

000093fc <atomic_set_bit_to.constprop.0>:
	atomic_val_t mask = ATOMIC_MASK(bit);
    93fc:	2301      	movs	r3, #1
    93fe:	fa03 f000 	lsl.w	r0, r3, r0
	if (val) {
    9402:	4b0c      	ldr	r3, [pc, #48]	; (9434 <atomic_set_bit_to.constprop.0+0x38>)
    9404:	b159      	cbz	r1, 941e <atomic_set_bit_to.constprop.0+0x22>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9406:	f3bf 8f5b 	dmb	ish
    940a:	e853 2f00 	ldrex	r2, [r3]
    940e:	4302      	orrs	r2, r0
    9410:	e843 2100 	strex	r1, r2, [r3]
    9414:	2900      	cmp	r1, #0
    9416:	d1f8      	bne.n	940a <atomic_set_bit_to.constprop.0+0xe>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9418:	f3bf 8f5b 	dmb	ish
	}
}
    941c:	4770      	bx	lr
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    941e:	43c0      	mvns	r0, r0
    9420:	f3bf 8f5b 	dmb	ish
    9424:	e853 2f00 	ldrex	r2, [r3]
    9428:	4002      	ands	r2, r0
    942a:	e843 2100 	strex	r1, r2, [r3]
    942e:	2900      	cmp	r1, #0
    9430:	d0f2      	beq.n	9418 <atomic_set_bit_to.constprop.0+0x1c>
    9432:	e7f7      	b.n	9424 <atomic_set_bit_to.constprop.0+0x28>
    9434:	200011e0 	.word	0x200011e0

00009438 <bt_mesh_beacon_set>:
	uint8_t frnd;
	uint8_t default_ttl;
};

void bt_mesh_beacon_set(bool beacon)
{
    9438:	b510      	push	{r4, lr}
    943a:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    943c:	480d      	ldr	r0, [pc, #52]	; (9474 <bt_mesh_beacon_set+0x3c>)
    943e:	f012 fb9b 	bl	1bb78 <atomic_get>
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_BEACON) == beacon) {
    9442:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    9446:	4284      	cmp	r4, r0
    9448:	d013      	beq.n	9472 <bt_mesh_beacon_set+0x3a>
		return;
	}

	atomic_set_bit_to(bt_mesh.flags, BT_MESH_BEACON, beacon);
    944a:	4621      	mov	r1, r4
    944c:	2007      	movs	r0, #7
    944e:	f7ff ffd5 	bl	93fc <atomic_set_bit_to.constprop.0>

	if (beacon) {
    9452:	b15c      	cbz	r4, 946c <bt_mesh_beacon_set+0x34>
		bt_mesh_beacon_enable();
    9454:	f000 fbb0 	bl	9bb8 <bt_mesh_beacon_enable>
    9458:	4806      	ldr	r0, [pc, #24]	; (9474 <bt_mesh_beacon_set+0x3c>)
    945a:	f012 fb8d 	bl	1bb78 <atomic_get>
	} else {
		bt_mesh_beacon_disable();
	}

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    945e:	07c3      	lsls	r3, r0, #31
    9460:	d507      	bpl.n	9472 <bt_mesh_beacon_set+0x3a>
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
	}
}
    9462:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
    9466:	2007      	movs	r0, #7
    9468:	f003 bd16 	b.w	ce98 <bt_mesh_settings_store_schedule>
		bt_mesh_beacon_disable();
    946c:	f000 fbb6 	bl	9bdc <bt_mesh_beacon_disable>
    9470:	e7f2      	b.n	9458 <bt_mesh_beacon_set+0x20>
}
    9472:	bd10      	pop	{r4, pc}
    9474:	200011e0 	.word	0x200011e0

00009478 <bt_mesh_beacon_enabled>:

bool bt_mesh_beacon_enabled(void)
{
    9478:	b508      	push	{r3, lr}
    947a:	4803      	ldr	r0, [pc, #12]	; (9488 <bt_mesh_beacon_enabled+0x10>)
    947c:	f012 fb7c 	bl	1bb78 <atomic_get>
	return atomic_test_bit(bt_mesh.flags, BT_MESH_BEACON);
}
    9480:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    9484:	bd08      	pop	{r3, pc}
    9486:	bf00      	nop
    9488:	200011e0 	.word	0x200011e0

0000948c <bt_mesh_gatt_proxy_set>:

static int feature_set(int feature_flag, enum bt_mesh_feat_state state)
{
	if (state != BT_MESH_FEATURE_DISABLED &&
    948c:	2801      	cmp	r0, #1
		       BT_MESH_FEATURE_ENABLED :
		       BT_MESH_FEATURE_DISABLED;
}

int bt_mesh_gatt_proxy_set(enum bt_mesh_feat_state gatt_proxy)
{
    948e:	b508      	push	{r3, lr}
    9490:	4601      	mov	r1, r0
	if (state != BT_MESH_FEATURE_DISABLED &&
    9492:	d819      	bhi.n	94c8 <bt_mesh_gatt_proxy_set+0x3c>
    9494:	480f      	ldr	r0, [pc, #60]	; (94d4 <bt_mesh_gatt_proxy_set+0x48>)
    9496:	f012 fb6f 	bl	1bb78 <atomic_get>
	    (state == BT_MESH_FEATURE_ENABLED)) {
    949a:	f001 0101 	and.w	r1, r1, #1
	if (atomic_test_bit(bt_mesh.flags, feature_flag) ==
    949e:	f3c0 2000 	ubfx	r0, r0, #8, #1
    94a2:	4281      	cmp	r1, r0
    94a4:	d013      	beq.n	94ce <bt_mesh_gatt_proxy_set+0x42>
	atomic_set_bit_to(bt_mesh.flags, feature_flag,
    94a6:	2008      	movs	r0, #8
    94a8:	f7ff ffa8 	bl	93fc <atomic_set_bit_to.constprop.0>
	err = feature_set(BT_MESH_GATT_PROXY, gatt_proxy);
	if (err) {
		return err;
	}

	bt_mesh_hb_feature_changed(BT_MESH_FEAT_PROXY);
    94ac:	2002      	movs	r0, #2
    94ae:	f003 f81f 	bl	c4f0 <bt_mesh_hb_feature_changed>
    94b2:	4808      	ldr	r0, [pc, #32]	; (94d4 <bt_mesh_gatt_proxy_set+0x48>)
    94b4:	f012 fb60 	bl	1bb78 <atomic_get>

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    94b8:	f010 0001 	ands.w	r0, r0, #1
    94bc:	d003      	beq.n	94c6 <bt_mesh_gatt_proxy_set+0x3a>
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
    94be:	2007      	movs	r0, #7
    94c0:	f003 fcea 	bl	ce98 <bt_mesh_settings_store_schedule>
    94c4:	2000      	movs	r0, #0
	}

	return 0;
}
    94c6:	bd08      	pop	{r3, pc}
		return -EINVAL;
    94c8:	f06f 0015 	mvn.w	r0, #21
    94cc:	e7fb      	b.n	94c6 <bt_mesh_gatt_proxy_set+0x3a>
		return -EALREADY;
    94ce:	f06f 0077 	mvn.w	r0, #119	; 0x77
    94d2:	e7f8      	b.n	94c6 <bt_mesh_gatt_proxy_set+0x3a>
    94d4:	200011e0 	.word	0x200011e0

000094d8 <bt_mesh_gatt_proxy_get>:

enum bt_mesh_feat_state bt_mesh_gatt_proxy_get(void)
{
    94d8:	b508      	push	{r3, lr}
    94da:	4803      	ldr	r0, [pc, #12]	; (94e8 <bt_mesh_gatt_proxy_get+0x10>)
    94dc:	f012 fb4c 	bl	1bb78 <atomic_get>
	if (!IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY)) {
		return BT_MESH_FEATURE_NOT_SUPPORTED;
	}

	return feature_get(BT_MESH_GATT_PROXY);
}
    94e0:	f3c0 2000 	ubfx	r0, r0, #8, #1
    94e4:	bd08      	pop	{r3, pc}
    94e6:	bf00      	nop
    94e8:	200011e0 	.word	0x200011e0

000094ec <bt_mesh_default_ttl_set>:

int bt_mesh_default_ttl_set(uint8_t default_ttl)
{
	if (default_ttl == 1 || default_ttl > BT_MESH_TTL_MAX) {
    94ec:	2801      	cmp	r0, #1
{
    94ee:	b508      	push	{r3, lr}
	if (default_ttl == 1 || default_ttl > BT_MESH_TTL_MAX) {
    94f0:	d014      	beq.n	951c <bt_mesh_default_ttl_set+0x30>
    94f2:	0602      	lsls	r2, r0, #24
    94f4:	d412      	bmi.n	951c <bt_mesh_default_ttl_set+0x30>
		return -EINVAL;
	}

	if (default_ttl == bt_mesh.default_ttl) {
    94f6:	4b0b      	ldr	r3, [pc, #44]	; (9524 <bt_mesh_default_ttl_set+0x38>)
    94f8:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
    94fc:	4282      	cmp	r2, r0
    94fe:	d101      	bne.n	9504 <bt_mesh_default_ttl_set+0x18>

	bt_mesh.default_ttl = default_ttl;

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
    9500:	2000      	movs	r0, #0
	}

	return 0;
}
    9502:	bd08      	pop	{r3, pc}
	bt_mesh.default_ttl = default_ttl;
    9504:	f883 0027 	strb.w	r0, [r3, #39]	; 0x27
    9508:	f103 0008 	add.w	r0, r3, #8
    950c:	f012 fb34 	bl	1bb78 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    9510:	07c3      	lsls	r3, r0, #31
    9512:	d5f5      	bpl.n	9500 <bt_mesh_default_ttl_set+0x14>
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
    9514:	2007      	movs	r0, #7
    9516:	f003 fcbf 	bl	ce98 <bt_mesh_settings_store_schedule>
    951a:	e7f1      	b.n	9500 <bt_mesh_default_ttl_set+0x14>
		return -EINVAL;
    951c:	f06f 0015 	mvn.w	r0, #21
    9520:	e7ef      	b.n	9502 <bt_mesh_default_ttl_set+0x16>
    9522:	bf00      	nop
    9524:	200011d8 	.word	0x200011d8

00009528 <bt_mesh_default_ttl_get>:

uint8_t bt_mesh_default_ttl_get(void)
{
	return bt_mesh.default_ttl;
}
    9528:	4b01      	ldr	r3, [pc, #4]	; (9530 <bt_mesh_default_ttl_get+0x8>)
    952a:	f893 0027 	ldrb.w	r0, [r3, #39]	; 0x27
    952e:	4770      	bx	lr
    9530:	200011d8 	.word	0x200011d8

00009534 <bt_mesh_net_transmit_set>:

	return feature_get(BT_MESH_FRIEND);
}

void bt_mesh_net_transmit_set(uint8_t xmit)
{
    9534:	b508      	push	{r3, lr}
	if (bt_mesh.net_xmit == xmit) {
    9536:	4b09      	ldr	r3, [pc, #36]	; (955c <bt_mesh_net_transmit_set+0x28>)
    9538:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
    953c:	4282      	cmp	r2, r0
    953e:	d00c      	beq.n	955a <bt_mesh_net_transmit_set+0x26>
		return;
	}

	bt_mesh.net_xmit = xmit;
    9540:	f883 0025 	strb.w	r0, [r3, #37]	; 0x25
    9544:	f103 0008 	add.w	r0, r3, #8
    9548:	f012 fb16 	bl	1bb78 <atomic_get>

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    954c:	07c3      	lsls	r3, r0, #31
    954e:	d504      	bpl.n	955a <bt_mesh_net_transmit_set+0x26>
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
	}
}
    9550:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
    9554:	2007      	movs	r0, #7
    9556:	f003 bc9f 	b.w	ce98 <bt_mesh_settings_store_schedule>
}
    955a:	bd08      	pop	{r3, pc}
    955c:	200011d8 	.word	0x200011d8

00009560 <bt_mesh_net_transmit_get>:

uint8_t bt_mesh_net_transmit_get(void)
{
	return bt_mesh.net_xmit;
}
    9560:	4b01      	ldr	r3, [pc, #4]	; (9568 <bt_mesh_net_transmit_get+0x8>)
    9562:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
    9566:	4770      	bx	lr
    9568:	200011d8 	.word	0x200011d8

0000956c <bt_mesh_relay_set>:
	if (state != BT_MESH_FEATURE_DISABLED &&
    956c:	2801      	cmp	r0, #1

int bt_mesh_relay_set(enum bt_mesh_feat_state relay, uint8_t xmit)
{
    956e:	b538      	push	{r3, r4, r5, lr}
    9570:	4603      	mov	r3, r0
    9572:	460c      	mov	r4, r1
	if (state != BT_MESH_FEATURE_DISABLED &&
    9574:	d823      	bhi.n	95be <bt_mesh_relay_set+0x52>
    9576:	4813      	ldr	r0, [pc, #76]	; (95c4 <bt_mesh_relay_set+0x58>)
    9578:	4d13      	ldr	r5, [pc, #76]	; (95c8 <bt_mesh_relay_set+0x5c>)
    957a:	f012 fafd 	bl	1bb78 <atomic_get>
	    (state == BT_MESH_FEATURE_ENABLED)) {
    957e:	f003 0101 	and.w	r1, r3, #1
	if (atomic_test_bit(bt_mesh.flags, feature_flag) ==
    9582:	f3c0 1080 	ubfx	r0, r0, #6, #1
    9586:	4281      	cmp	r1, r0
    9588:	d012      	beq.n	95b0 <bt_mesh_relay_set+0x44>
	atomic_set_bit_to(bt_mesh.flags, feature_flag,
    958a:	2006      	movs	r0, #6
    958c:	f7ff ff36 	bl	93fc <atomic_set_bit_to.constprop.0>
	if (err == -EALREADY && bt_mesh.relay_xmit == xmit) {
		return -EALREADY;
	}

	bt_mesh.relay_xmit = xmit;
	bt_mesh_hb_feature_changed(BT_MESH_FEAT_RELAY);
    9590:	2001      	movs	r0, #1
	bt_mesh.relay_xmit = xmit;
    9592:	f885 4026 	strb.w	r4, [r5, #38]	; 0x26
	bt_mesh_hb_feature_changed(BT_MESH_FEAT_RELAY);
    9596:	f002 ffab 	bl	c4f0 <bt_mesh_hb_feature_changed>
    959a:	480a      	ldr	r0, [pc, #40]	; (95c4 <bt_mesh_relay_set+0x58>)
    959c:	f012 faec 	bl	1bb78 <atomic_get>

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    95a0:	f010 0001 	ands.w	r0, r0, #1
    95a4:	d003      	beq.n	95ae <bt_mesh_relay_set+0x42>
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
    95a6:	2007      	movs	r0, #7
    95a8:	f003 fc76 	bl	ce98 <bt_mesh_settings_store_schedule>
	}

	return 0;
    95ac:	2000      	movs	r0, #0
}
    95ae:	bd38      	pop	{r3, r4, r5, pc}
	if (err == -EALREADY && bt_mesh.relay_xmit == xmit) {
    95b0:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
    95b4:	42a3      	cmp	r3, r4
    95b6:	d1eb      	bne.n	9590 <bt_mesh_relay_set+0x24>
		return -EALREADY;
    95b8:	f06f 0077 	mvn.w	r0, #119	; 0x77
    95bc:	e7f7      	b.n	95ae <bt_mesh_relay_set+0x42>
		return err;
    95be:	f06f 0015 	mvn.w	r0, #21
    95c2:	e7f4      	b.n	95ae <bt_mesh_relay_set+0x42>
    95c4:	200011e0 	.word	0x200011e0
    95c8:	200011d8 	.word	0x200011d8

000095cc <cfg_set>:
	}
}

static int cfg_set(const char *name, size_t len_rd,
		   settings_read_cb read_cb, void *cb_arg)
{
    95cc:	b513      	push	{r0, r1, r4, lr}
    95ce:	460c      	mov	r4, r1
    95d0:	4610      	mov	r0, r2
    95d2:	4619      	mov	r1, r3
	struct cfg_val cfg;
	int err;

	if (len_rd == 0) {
    95d4:	b17c      	cbz	r4, 95f6 <cfg_set+0x2a>
		BT_DBG("Cleared configuration state");
		return 0;
	}

	err = bt_mesh_settings_set(read_cb, cb_arg, &cfg, sizeof(cfg));
    95d6:	2307      	movs	r3, #7
    95d8:	466a      	mov	r2, sp
    95da:	f003 fc2b 	bl	ce34 <bt_mesh_settings_set>
	if (err) {
    95de:	4604      	mov	r4, r0
    95e0:	b160      	cbz	r0, 95fc <cfg_set+0x30>
    95e2:	4913      	ldr	r1, [pc, #76]	; (9630 <cfg_set+0x64>)
    95e4:	4b13      	ldr	r3, [pc, #76]	; (9634 <cfg_set+0x68>)
		BT_ERR("Failed to set \'cfg\'");
    95e6:	4814      	ldr	r0, [pc, #80]	; (9638 <cfg_set+0x6c>)
    95e8:	1ac9      	subs	r1, r1, r3
    95ea:	08c9      	lsrs	r1, r1, #3
    95ec:	0189      	lsls	r1, r1, #6
    95ee:	f041 0101 	orr.w	r1, r1, #1
    95f2:	f00f ff26 	bl	19442 <log_0>
	bt_mesh_default_ttl_set(cfg.default_ttl);

	BT_DBG("Restored configuration state");

	return 0;
}
    95f6:	4620      	mov	r0, r4
    95f8:	b002      	add	sp, #8
    95fa:	bd10      	pop	{r4, pc}
	bt_mesh_net_transmit_set(cfg.net_transmit);
    95fc:	f89d 0000 	ldrb.w	r0, [sp]
    9600:	f7ff ff98 	bl	9534 <bt_mesh_net_transmit_set>
	bt_mesh_relay_set(cfg.relay, cfg.relay_retransmit);
    9604:	f89d 1002 	ldrb.w	r1, [sp, #2]
    9608:	f89d 0001 	ldrb.w	r0, [sp, #1]
    960c:	f7ff ffae 	bl	956c <bt_mesh_relay_set>
	bt_mesh_beacon_set(cfg.beacon);
    9610:	f89d 0003 	ldrb.w	r0, [sp, #3]
    9614:	3800      	subs	r0, #0
    9616:	bf18      	it	ne
    9618:	2001      	movne	r0, #1
    961a:	f7ff ff0d 	bl	9438 <bt_mesh_beacon_set>
	bt_mesh_gatt_proxy_set(cfg.gatt_proxy);
    961e:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9622:	f7ff ff33 	bl	948c <bt_mesh_gatt_proxy_set>
	bt_mesh_default_ttl_set(cfg.default_ttl);
    9626:	f89d 0006 	ldrb.w	r0, [sp, #6]
    962a:	f7ff ff5f 	bl	94ec <bt_mesh_default_ttl_set>
	return 0;
    962e:	e7e2      	b.n	95f6 <cfg_set+0x2a>
    9630:	0001f064 	.word	0x0001f064
    9634:	0001ef2c 	.word	0x0001ef2c
    9638:	00021188 	.word	0x00021188

0000963c <bt_mesh_relay_get>:
{
    963c:	b508      	push	{r3, lr}
    963e:	4803      	ldr	r0, [pc, #12]	; (964c <bt_mesh_relay_get+0x10>)
    9640:	f012 fa9a 	bl	1bb78 <atomic_get>
}
    9644:	f3c0 1080 	ubfx	r0, r0, #6, #1
    9648:	bd08      	pop	{r3, pc}
    964a:	bf00      	nop
    964c:	200011e0 	.word	0x200011e0

00009650 <bt_mesh_relay_retransmit_get>:
}
    9650:	4b01      	ldr	r3, [pc, #4]	; (9658 <bt_mesh_relay_retransmit_get+0x8>)
    9652:	f893 0026 	ldrb.w	r0, [r3, #38]	; 0x26
    9656:	4770      	bx	lr
    9658:	200011d8 	.word	0x200011d8

0000965c <adv_alloc>:
static struct bt_mesh_adv adv_pool[CONFIG_BT_MESH_ADV_BUF_COUNT];

static struct bt_mesh_adv *adv_alloc(int id)
{
	return &adv_pool[id];
}
    965c:	4b02      	ldr	r3, [pc, #8]	; (9668 <adv_alloc+0xc>)
    965e:	220c      	movs	r2, #12
    9660:	fb02 3000 	mla	r0, r2, r0, r3
    9664:	4770      	bx	lr
    9666:	bf00      	nop
    9668:	20001a6c 	.word	0x20001a6c

0000966c <bt_mesh_scan_cb>:
//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

static void bt_mesh_scan_cb(const bt_addr_le_t *addr, int8_t rssi,
			    uint8_t adv_type, struct net_buf_simple *buf)
{
	if (adv_type != BT_GAP_ADV_TYPE_ADV_NONCONN_IND) {
    966c:	2a03      	cmp	r2, #3
{
    966e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9672:	4680      	mov	r8, r0
    9674:	460f      	mov	r7, r1
    9676:	461c      	mov	r4, r3
	if (adv_type != BT_GAP_ADV_TYPE_ADV_NONCONN_IND) {
    9678:	d104      	bne.n	9684 <bt_mesh_scan_cb+0x18>
		case BT_DATA_MESH_BEACON:
			bt_mesh_beacon_recv(buf);
			break;
		default:
		  //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
			if (scan_cb)                             // scan_cb has been set //@@@1.3
    967a:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 9724 <bt_mesh_scan_cb+0xb8>
	while (buf->len > 1) {
    967e:	88a3      	ldrh	r3, [r4, #4]
    9680:	2b01      	cmp	r3, #1
    9682:	d801      	bhi.n	9688 <bt_mesh_scan_cb+0x1c>
		}

		net_buf_simple_restore(buf, &state);
		net_buf_simple_pull(buf, len);
	}
}
    9684:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		len = net_buf_simple_pull_u8(buf);
    9688:	4620      	mov	r0, r4
    968a:	f014 fb27 	bl	1dcdc <net_buf_simple_pull_u8>
		if (len == 0U) {
    968e:	4605      	mov	r5, r0
    9690:	2800      	cmp	r0, #0
    9692:	d0f7      	beq.n	9684 <bt_mesh_scan_cb+0x18>
		if (len > buf->len) {
    9694:	88a2      	ldrh	r2, [r4, #4]
    9696:	b283      	uxth	r3, r0
    9698:	429a      	cmp	r2, r3
    969a:	d20b      	bcs.n	96b4 <bt_mesh_scan_cb+0x48>
    969c:	4b22      	ldr	r3, [pc, #136]	; (9728 <bt_mesh_scan_cb+0xbc>)
    969e:	4923      	ldr	r1, [pc, #140]	; (972c <bt_mesh_scan_cb+0xc0>)
			BT_WARN("AD malformed");
    96a0:	4823      	ldr	r0, [pc, #140]	; (9730 <bt_mesh_scan_cb+0xc4>)
    96a2:	1ac9      	subs	r1, r1, r3
    96a4:	08c9      	lsrs	r1, r1, #3
    96a6:	0189      	lsls	r1, r1, #6
}
    96a8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			BT_WARN("AD malformed");
    96ac:	f041 0102 	orr.w	r1, r1, #2
    96b0:	f00f bec7 	b.w	19442 <log_0>
	state->offset = net_buf_simple_headroom(buf);
    96b4:	4620      	mov	r0, r4
    96b6:	f014 fb34 	bl	1dd22 <net_buf_simple_headroom>
    96ba:	4606      	mov	r6, r0
		type = net_buf_simple_pull_u8(buf);
    96bc:	4620      	mov	r0, r4
	state->len = buf->len;
    96be:	f8b4 9004 	ldrh.w	r9, [r4, #4]
    96c2:	f014 fb0b 	bl	1dcdc <net_buf_simple_pull_u8>
		buf->len = len - 1;
    96c6:	1e6a      	subs	r2, r5, #1
		switch (type) {
    96c8:	282a      	cmp	r0, #42	; 0x2a
		buf->len = len - 1;
    96ca:	80a2      	strh	r2, [r4, #4]
		switch (type) {
    96cc:	b2b6      	uxth	r6, r6
    96ce:	d007      	beq.n	96e0 <bt_mesh_scan_cb+0x74>
    96d0:	282b      	cmp	r0, #43	; 0x2b
    96d2:	d014      	beq.n	96fe <bt_mesh_scan_cb+0x92>
    96d4:	2829      	cmp	r0, #41	; 0x29
    96d6:	d116      	bne.n	9706 <bt_mesh_scan_cb+0x9a>
			bt_mesh_pb_adv_recv(buf);
    96d8:	4620      	mov	r0, r4
    96da:	f004 f959 	bl	d990 <bt_mesh_pb_adv_recv>
			break;
    96de:	e004      	b.n	96ea <bt_mesh_scan_cb+0x7e>
			bt_mesh_net_recv(buf, rssi, BT_MESH_NET_IF_ADV);
    96e0:	2200      	movs	r2, #0
    96e2:	4639      	mov	r1, r7
    96e4:	4620      	mov	r0, r4
    96e6:	f000 feb3 	bl	a450 <bt_mesh_net_recv>
	buf->data = buf->__buf + state->offset;
    96ea:	68a3      	ldr	r3, [r4, #8]
	buf->len = state->len;
    96ec:	f8a4 9004 	strh.w	r9, [r4, #4]
	buf->data = buf->__buf + state->offset;
    96f0:	4433      	add	r3, r6
    96f2:	6023      	str	r3, [r4, #0]
		net_buf_simple_pull(buf, len);
    96f4:	4629      	mov	r1, r5
    96f6:	4620      	mov	r0, r4
    96f8:	f014 fae0 	bl	1dcbc <net_buf_simple_pull>
    96fc:	e7bf      	b.n	967e <bt_mesh_scan_cb+0x12>
			bt_mesh_beacon_recv(buf);
    96fe:	4620      	mov	r0, r4
    9700:	f000 f970 	bl	99e4 <bt_mesh_beacon_recv>
			break;
    9704:	e7f1      	b.n	96ea <bt_mesh_scan_cb+0x7e>
			if (scan_cb)                             // scan_cb has been set //@@@1.3
    9706:	f8da b000 	ldr.w	fp, [sl]
    970a:	f1bb 0f00 	cmp.w	fp, #0
    970e:	d0ec      	beq.n	96ea <bt_mesh_scan_cb+0x7e>
    9710:	68a3      	ldr	r3, [r4, #8]
	buf->len = state->len;
    9712:	f8a4 9004 	strh.w	r9, [r4, #4]
	buf->data = buf->__buf + state->offset;
    9716:	4433      	add	r3, r6
    9718:	6023      	str	r3, [r4, #0]
			    scan_cb(type, addr, rssi, buf);      // call scan_cb if set
    971a:	463a      	mov	r2, r7
    971c:	4623      	mov	r3, r4
    971e:	4641      	mov	r1, r8
    9720:	47d8      	blx	fp
    9722:	e7e2      	b.n	96ea <bt_mesh_scan_cb+0x7e>
    9724:	20001b5c 	.word	0x20001b5c
    9728:	0001ef2c 	.word	0x0001ef2c
    972c:	0001f044 	.word	0x0001f044
    9730:	000211f6 	.word	0x000211f6

00009734 <bt_mesh_adv_create_from_pool>:
{
    9734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9738:	461e      	mov	r6, r3
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    973a:	4b18      	ldr	r3, [pc, #96]	; (979c <bt_mesh_adv_create_from_pool+0x68>)
    973c:	f3bf 8f5b 	dmb	ish
    9740:	681b      	ldr	r3, [r3, #0]
    9742:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_SUSPENDED)) {
    9746:	f3c3 0840 	ubfx	r8, r3, #1, #1
    974a:	079b      	lsls	r3, r3, #30
{
    974c:	460d      	mov	r5, r1
    974e:	4617      	mov	r7, r2
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_SUSPENDED)) {
    9750:	d50d      	bpl.n	976e <bt_mesh_adv_create_from_pool+0x3a>
    9752:	4b13      	ldr	r3, [pc, #76]	; (97a0 <bt_mesh_adv_create_from_pool+0x6c>)
    9754:	4913      	ldr	r1, [pc, #76]	; (97a4 <bt_mesh_adv_create_from_pool+0x70>)
		BT_WARN("Refusing to allocate buffer while suspended");
    9756:	4814      	ldr	r0, [pc, #80]	; (97a8 <bt_mesh_adv_create_from_pool+0x74>)
    9758:	1ac9      	subs	r1, r1, r3
    975a:	08c9      	lsrs	r1, r1, #3
    975c:	0189      	lsls	r1, r1, #6
    975e:	f041 0102 	orr.w	r1, r1, #2
    9762:	f00f fe6e 	bl	19442 <log_0>
		return NULL;
    9766:	2400      	movs	r4, #0
}
    9768:	4620      	mov	r0, r4
    976a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_alloc_fixed(pool, timeout);
    976e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    9772:	f014 f9c5 	bl	1db00 <net_buf_alloc_fixed>
	if (!buf) {
    9776:	4604      	mov	r4, r0
    9778:	2800      	cmp	r0, #0
    977a:	d0f5      	beq.n	9768 <bt_mesh_adv_create_from_pool+0x34>
	adv = get_id(net_buf_id(buf));
    977c:	f00b ff5e 	bl	1563c <net_buf_id>
    9780:	47a8      	blx	r5
    9782:	4605      	mov	r5, r0
	BT_MESH_ADV(buf) = adv;
    9784:	6160      	str	r0, [r4, #20]
	(void)memset(adv, 0, sizeof(*adv));
    9786:	220c      	movs	r2, #12
    9788:	4641      	mov	r1, r8
    978a:	f010 fd83 	bl	1a294 <memset>
	adv->type         = type;
    978e:	7a2b      	ldrb	r3, [r5, #8]
	adv->xmit         = xmit;
    9790:	726e      	strb	r6, [r5, #9]
	adv->type         = type;
    9792:	f367 0301 	bfi	r3, r7, #0, #2
    9796:	722b      	strb	r3, [r5, #8]
	return buf;
    9798:	e7e6      	b.n	9768 <bt_mesh_adv_create_from_pool+0x34>
    979a:	bf00      	nop
    979c:	200011e0 	.word	0x200011e0
    97a0:	0001ef2c 	.word	0x0001ef2c
    97a4:	0001f044 	.word	0x0001f044
    97a8:	00021203 	.word	0x00021203

000097ac <bt_mesh_adv_create>:
{
    97ac:	b507      	push	{r0, r1, r2, lr}
	return bt_mesh_adv_create_from_pool(&adv_buf_pool, adv_alloc, type,
    97ae:	e9cd 2300 	strd	r2, r3, [sp]
    97b2:	460b      	mov	r3, r1
    97b4:	4602      	mov	r2, r0
    97b6:	4903      	ldr	r1, [pc, #12]	; (97c4 <bt_mesh_adv_create+0x18>)
    97b8:	4803      	ldr	r0, [pc, #12]	; (97c8 <bt_mesh_adv_create+0x1c>)
    97ba:	f7ff ffbb 	bl	9734 <bt_mesh_adv_create_from_pool>
}
    97be:	b003      	add	sp, #12
    97c0:	f85d fb04 	ldr.w	pc, [sp], #4
    97c4:	0000965d 	.word	0x0000965d
    97c8:	20000c38 	.word	0x20000c38

000097cc <bt_mesh_adv_send>:
{
    97cc:	b510      	push	{r4, lr}
	BT_MESH_ADV(buf)->cb = cb;
    97ce:	6944      	ldr	r4, [r0, #20]
	BT_MESH_ADV(buf)->cb_data = cb_data;
    97d0:	e9c4 1200 	strd	r1, r2, [r4]
	BT_MESH_ADV(buf)->busy = 1U;
    97d4:	6942      	ldr	r2, [r0, #20]
    97d6:	7a13      	ldrb	r3, [r2, #8]
    97d8:	f043 0308 	orr.w	r3, r3, #8
    97dc:	7213      	strb	r3, [r2, #8]
	net_buf_put(&bt_mesh_adv_queue, net_buf_ref(buf));
    97de:	f014 f9e2 	bl	1dba6 <net_buf_ref>
    97e2:	4601      	mov	r1, r0
    97e4:	4803      	ldr	r0, [pc, #12]	; (97f4 <bt_mesh_adv_send+0x28>)
    97e6:	f014 f9d1 	bl	1db8c <net_buf_put>
}
    97ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_mesh_adv_buf_ready();
    97ee:	f012 be91 	b.w	1c514 <bt_mesh_adv_buf_ready>
    97f2:	bf00      	nop
    97f4:	20000bc8 	.word	0x20000bc8

000097f8 <bt_mesh_scan_enable>:

int bt_mesh_scan_enable(void)
{
    97f8:	b510      	push	{r4, lr}
    97fa:	b086      	sub	sp, #24
	struct bt_le_scan_param scan_param = {
    97fc:	2214      	movs	r2, #20
    97fe:	2100      	movs	r1, #0
    9800:	a801      	add	r0, sp, #4
    9802:	f010 fd47 	bl	1a294 <memset>
    9806:	f04f 1330 	mov.w	r3, #3145776	; 0x300030
			.window     = MESH_SCAN_WINDOW };
	int err;

	BT_DBG("");

	err = bt_le_scan_start(&scan_param, bt_mesh_scan_cb);
    980a:	490d      	ldr	r1, [pc, #52]	; (9840 <bt_mesh_scan_enable+0x48>)
	struct bt_le_scan_param scan_param = {
    980c:	9303      	str	r3, [sp, #12]
	err = bt_le_scan_start(&scan_param, bt_mesh_scan_cb);
    980e:	a801      	add	r0, sp, #4
    9810:	f7fc fa4c 	bl	5cac <bt_le_scan_start>
	if (err && err != -EALREADY) {
    9814:	4604      	mov	r4, r0
    9816:	b168      	cbz	r0, 9834 <bt_mesh_scan_enable+0x3c>
    9818:	f110 0f78 	cmn.w	r0, #120	; 0x78
    981c:	d00d      	beq.n	983a <bt_mesh_scan_enable+0x42>
    981e:	4a09      	ldr	r2, [pc, #36]	; (9844 <bt_mesh_scan_enable+0x4c>)
    9820:	4b09      	ldr	r3, [pc, #36]	; (9848 <bt_mesh_scan_enable+0x50>)
    9822:	1ad2      	subs	r2, r2, r3
    9824:	08d2      	lsrs	r2, r2, #3
		BT_ERR("starting scan failed (err %d)", err);
    9826:	0192      	lsls	r2, r2, #6
    9828:	4601      	mov	r1, r0
    982a:	f042 0201 	orr.w	r2, r2, #1
    982e:	4807      	ldr	r0, [pc, #28]	; (984c <bt_mesh_scan_enable+0x54>)
    9830:	f00f fe14 	bl	1945c <log_1>
		return err;
	}

	return 0;
}
    9834:	4620      	mov	r0, r4
    9836:	b006      	add	sp, #24
    9838:	bd10      	pop	{r4, pc}
	return 0;
    983a:	2400      	movs	r4, #0
    983c:	e7fa      	b.n	9834 <bt_mesh_scan_enable+0x3c>
    983e:	bf00      	nop
    9840:	0000966d 	.word	0x0000966d
    9844:	0001f044 	.word	0x0001f044
    9848:	0001ef2c 	.word	0x0001ef2c
    984c:	0002122f 	.word	0x0002122f

00009850 <subnet_by_id>:

	return true;
}

static int subnet_by_id(struct bt_mesh_subnet *sub, void *cb_data)
{
    9850:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    9854:	4c22      	ldr	r4, [pc, #136]	; (98e0 <subnet_by_id+0x90>)
    9856:	4b23      	ldr	r3, [pc, #140]	; (98e4 <subnet_by_id+0x94>)
		BT_WARN("Authentication Value %s != %s",
    9858:	f8df a08c 	ldr.w	sl, [pc, #140]	; 98e8 <subnet_by_id+0x98>
    985c:	1ae4      	subs	r4, r4, r3
    985e:	08e4      	lsrs	r4, r4, #3
    9860:	01a4      	lsls	r4, r4, #6
{
    9862:	460d      	mov	r5, r1
	struct beacon_params *params = cb_data;

	for (int i = 0; i < ARRAY_SIZE(sub->keys); i++) {
    9864:	f100 0676 	add.w	r6, r0, #118	; 0x76
    9868:	2700      	movs	r7, #0
		BT_WARN("Authentication Value %s != %s",
    986a:	f044 0402 	orr.w	r4, r4, #2
		if (sub->keys[i].valid && auth_match(&sub->keys[i], params)) {
    986e:	f816 3c4a 	ldrb.w	r3, [r6, #-74]
    9872:	b353      	cbz	r3, 98ca <subnet_by_id+0x7a>
	if (memcmp(params->net_id, keys->net_id, 8)) {
    9874:	f1a6 0818 	sub.w	r8, r6, #24
    9878:	6828      	ldr	r0, [r5, #0]
    987a:	2208      	movs	r2, #8
    987c:	4641      	mov	r1, r8
    987e:	f010 fced 	bl	1a25c <memcmp>
    9882:	bb10      	cbnz	r0, 98ca <subnet_by_id+0x7a>
	bt_mesh_beacon_auth(keys->beacon, params->flags, keys->net_id,
    9884:	f10d 0908 	add.w	r9, sp, #8
    9888:	7b29      	ldrb	r1, [r5, #12]
    988a:	68ab      	ldr	r3, [r5, #8]
    988c:	f8cd 9000 	str.w	r9, [sp]
    9890:	4642      	mov	r2, r8
    9892:	4630      	mov	r0, r6
    9894:	f012 fcf3 	bl	1c27e <bt_mesh_beacon_auth>
	if (memcmp(params->auth, net_auth, 8)) {
    9898:	6868      	ldr	r0, [r5, #4]
    989a:	2208      	movs	r2, #8
    989c:	4649      	mov	r1, r9
    989e:	f010 fcdd 	bl	1a25c <memcmp>
    98a2:	b1c0      	cbz	r0, 98d6 <subnet_by_id+0x86>
		BT_WARN("Authentication Value %s != %s",
    98a4:	2108      	movs	r1, #8
    98a6:	6868      	ldr	r0, [r5, #4]
    98a8:	f7fa fa32 	bl	3d10 <bt_hex_real>
    98ac:	f7f8 ff26 	bl	26fc <z_log_strdup>
    98b0:	2108      	movs	r1, #8
    98b2:	4680      	mov	r8, r0
    98b4:	4648      	mov	r0, r9
    98b6:	f7fa fa2b 	bl	3d10 <bt_hex_real>
    98ba:	f7f8 ff1f 	bl	26fc <z_log_strdup>
    98be:	4623      	mov	r3, r4
    98c0:	4602      	mov	r2, r0
    98c2:	4641      	mov	r1, r8
    98c4:	4650      	mov	r0, sl
    98c6:	f00f fddd 	bl	19484 <log_2>
	for (int i = 0; i < ARRAY_SIZE(sub->keys); i++) {
    98ca:	365a      	adds	r6, #90	; 0x5a
    98cc:	b10f      	cbz	r7, 98d2 <subnet_by_id+0x82>
			params->new_key = (i > 0);
			return true;
		}
	}

	return false;
    98ce:	2000      	movs	r0, #0
    98d0:	e003      	b.n	98da <subnet_by_id+0x8a>
    98d2:	2701      	movs	r7, #1
    98d4:	e7cb      	b.n	986e <subnet_by_id+0x1e>
			params->new_key = (i > 0);
    98d6:	736f      	strb	r7, [r5, #13]
			return true;
    98d8:	2001      	movs	r0, #1
}
    98da:	b004      	add	sp, #16
    98dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    98e0:	0001f05c 	.word	0x0001f05c
    98e4:	0001ef2c 	.word	0x0001ef2c
    98e8:	00021259 	.word	0x00021259

000098ec <bt_mesh_beacon_create>:
{
    98ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    98ee:	460c      	mov	r4, r1
    98f0:	4605      	mov	r5, r0
	uint8_t flags = bt_mesh_net_flags(sub);
    98f2:	f000 ffab 	bl	a84c <bt_mesh_net_flags>
	net_buf_simple_add_u8(buf, BEACON_TYPE_SECURE);
    98f6:	2101      	movs	r1, #1
	uint8_t flags = bt_mesh_net_flags(sub);
    98f8:	4607      	mov	r7, r0
	net_buf_simple_add_u8(buf, BEACON_TYPE_SECURE);
    98fa:	4620      	mov	r0, r4
    98fc:	f014 f994 	bl	1dc28 <net_buf_simple_add_u8>
	keys = &sub->keys[SUBNET_KEY_TX_IDX(sub)];
    9900:	7fae      	ldrb	r6, [r5, #30]
    9902:	1eb3      	subs	r3, r6, #2
    9904:	425e      	negs	r6, r3
	net_buf_simple_add_u8(buf, flags);
    9906:	4639      	mov	r1, r7
    9908:	4620      	mov	r0, r4
	keys = &sub->keys[SUBNET_KEY_TX_IDX(sub)];
    990a:	415e      	adcs	r6, r3
	net_buf_simple_add_u8(buf, flags);
    990c:	f014 f98c 	bl	1dc28 <net_buf_simple_add_u8>
	net_buf_simple_add_mem(buf, keys->net_id, 8);
    9910:	215a      	movs	r1, #90	; 0x5a
    9912:	fb01 5106 	mla	r1, r1, r6, r5
    9916:	2208      	movs	r2, #8
    9918:	315e      	adds	r1, #94	; 0x5e
    991a:	4620      	mov	r0, r4
    991c:	f014 f97b 	bl	1dc16 <net_buf_simple_add_mem>
	net_buf_simple_add_be32(buf, bt_mesh.iv_index);
    9920:	4b06      	ldr	r3, [pc, #24]	; (993c <bt_mesh_beacon_create+0x50>)
    9922:	4620      	mov	r0, r4
    9924:	6819      	ldr	r1, [r3, #0]
    9926:	f014 f991 	bl	1dc4c <net_buf_simple_add_be32>
	net_buf_simple_add_mem(buf, sub->auth, 8);
    992a:	f105 0124 	add.w	r1, r5, #36	; 0x24
    992e:	4620      	mov	r0, r4
    9930:	2208      	movs	r2, #8
}
    9932:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	net_buf_simple_add_mem(buf, sub->auth, 8);
    9936:	f014 b96e 	b.w	1dc16 <net_buf_simple_add_mem>
    993a:	bf00      	nop
    993c:	200011d8 	.word	0x200011d8

00009940 <bt_mesh_beacon_update>:
		break;
	}
}

void bt_mesh_beacon_update(struct bt_mesh_subnet *sub)
{
    9940:	b523      	push	{r0, r1, r5, lr}
    9942:	4605      	mov	r5, r0
	uint8_t flags = bt_mesh_net_flags(sub);
    9944:	f000 ff82 	bl	a84c <bt_mesh_net_flags>
	struct bt_mesh_subnet_keys *keys;
	int err;

	keys = &sub->keys[SUBNET_KEY_TX_IDX(sub)];
    9948:	7fab      	ldrb	r3, [r5, #30]
    994a:	1e9a      	subs	r2, r3, #2
    994c:	4253      	negs	r3, r2
    994e:	4153      	adcs	r3, r2
	uint8_t flags = bt_mesh_net_flags(sub);
    9950:	4601      	mov	r1, r0

	BT_DBG("NetIndex 0x%03x Using %s key", sub->net_idx,
	       SUBNET_KEY_TX_IDX(sub) ? "new" : "current");
	BT_DBG("flags 0x%02x, IVI 0x%08x", flags, bt_mesh.iv_index);

	err = bt_mesh_beacon_auth(keys->beacon, flags, keys->net_id,
    9952:	205a      	movs	r0, #90	; 0x5a
    9954:	4343      	muls	r3, r0
    9956:	f103 025e 	add.w	r2, r3, #94	; 0x5e
    995a:	f103 0076 	add.w	r0, r3, #118	; 0x76
				   bt_mesh.iv_index, sub->auth);
    995e:	f105 0324 	add.w	r3, r5, #36	; 0x24
	err = bt_mesh_beacon_auth(keys->beacon, flags, keys->net_id,
    9962:	9300      	str	r3, [sp, #0]
    9964:	4b0b      	ldr	r3, [pc, #44]	; (9994 <bt_mesh_beacon_update+0x54>)
    9966:	442a      	add	r2, r5
    9968:	681b      	ldr	r3, [r3, #0]
    996a:	4428      	add	r0, r5
    996c:	f012 fc87 	bl	1c27e <bt_mesh_beacon_auth>
	if (err) {
    9970:	b168      	cbz	r0, 998e <bt_mesh_beacon_update+0x4e>
    9972:	4b09      	ldr	r3, [pc, #36]	; (9998 <bt_mesh_beacon_update+0x58>)
    9974:	4a09      	ldr	r2, [pc, #36]	; (999c <bt_mesh_beacon_update+0x5c>)
		BT_ERR("Failed updating net beacon for 0x%03x", sub->net_idx);
    9976:	8ba9      	ldrh	r1, [r5, #28]
    9978:	4809      	ldr	r0, [pc, #36]	; (99a0 <bt_mesh_beacon_update+0x60>)
    997a:	1ad2      	subs	r2, r2, r3
    997c:	08d2      	lsrs	r2, r2, #3
    997e:	0192      	lsls	r2, r2, #6
    9980:	f042 0201 	orr.w	r2, r2, #1
	}
}
    9984:	b002      	add	sp, #8
    9986:	e8bd 4020 	ldmia.w	sp!, {r5, lr}
		BT_ERR("Failed updating net beacon for 0x%03x", sub->net_idx);
    998a:	f00f bd67 	b.w	1945c <log_1>
}
    998e:	b002      	add	sp, #8
    9990:	bd20      	pop	{r5, pc}
    9992:	bf00      	nop
    9994:	200011d8 	.word	0x200011d8
    9998:	0001ef2c 	.word	0x0001ef2c
    999c:	0001f05c 	.word	0x0001f05c
    99a0:	00021277 	.word	0x00021277

000099a4 <bt_mesh_beacon_ivu_initiator>:
	if (val) {
    99a4:	4b0d      	ldr	r3, [pc, #52]	; (99dc <bt_mesh_beacon_ivu_initiator+0x38>)
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    99a6:	f3bf 8f5b 	dmb	ish
    99aa:	b170      	cbz	r0, 99ca <bt_mesh_beacon_ivu_initiator+0x26>
    99ac:	e853 2f00 	ldrex	r2, [r3]
    99b0:	f042 0208 	orr.w	r2, r2, #8
    99b4:	e843 2100 	strex	r1, r2, [r3]
    99b8:	2900      	cmp	r1, #0
    99ba:	d1f7      	bne.n	99ac <bt_mesh_beacon_ivu_initiator+0x8>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    99bc:	f3bf 8f5b 	dmb	ish
	 * An alternative solution would be to check whether beacons are enabled
	 * here, and cancel if not. As the cancel operation may fail, we would
	 * still have to implement an early exit mechanism, so we might as well
	 * just use this every time.
	 */
	k_work_schedule(&beacon_timer, K_NO_WAIT);
    99c0:	4807      	ldr	r0, [pc, #28]	; (99e0 <bt_mesh_beacon_ivu_initiator+0x3c>)
    99c2:	2200      	movs	r2, #0
    99c4:	2300      	movs	r3, #0
    99c6:	f00e ba1b 	b.w	17e00 <k_work_schedule>
    99ca:	e853 2f00 	ldrex	r2, [r3]
    99ce:	f022 0208 	bic.w	r2, r2, #8
    99d2:	e843 2100 	strex	r1, r2, [r3]
    99d6:	2900      	cmp	r1, #0
    99d8:	d0f0      	beq.n	99bc <bt_mesh_beacon_ivu_initiator+0x18>
    99da:	e7f6      	b.n	99ca <bt_mesh_beacon_ivu_initiator+0x26>
    99dc:	200011e0 	.word	0x200011e0
    99e0:	200011a8 	.word	0x200011a8

000099e4 <bt_mesh_beacon_recv>:
{
    99e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < 1) {
    99e6:	8883      	ldrh	r3, [r0, #4]
{
    99e8:	b085      	sub	sp, #20
    99ea:	4604      	mov	r4, r0
	if (buf->len < 1) {
    99ec:	b963      	cbnz	r3, 9a08 <bt_mesh_beacon_recv+0x24>
    99ee:	4b67      	ldr	r3, [pc, #412]	; (9b8c <bt_mesh_beacon_recv+0x1a8>)
    99f0:	4967      	ldr	r1, [pc, #412]	; (9b90 <bt_mesh_beacon_recv+0x1ac>)
		BT_ERR("Too short beacon");
    99f2:	4868      	ldr	r0, [pc, #416]	; (9b94 <bt_mesh_beacon_recv+0x1b0>)
    99f4:	1ac9      	subs	r1, r1, r3
    99f6:	08c9      	lsrs	r1, r1, #3
    99f8:	0189      	lsls	r1, r1, #6
    99fa:	f041 0101 	orr.w	r1, r1, #1
}
    99fe:	b005      	add	sp, #20
    9a00:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		BT_ERR("Too short beacon");
    9a04:	f00f bd1d 	b.w	19442 <log_0>
	type = net_buf_simple_pull_u8(buf);
    9a08:	f014 f968 	bl	1dcdc <net_buf_simple_pull_u8>
	switch (type) {
    9a0c:	4605      	mov	r5, r0
    9a0e:	b158      	cbz	r0, 9a28 <bt_mesh_beacon_recv+0x44>
    9a10:	2801      	cmp	r0, #1
    9a12:	d036      	beq.n	9a82 <bt_mesh_beacon_recv+0x9e>
    9a14:	4a5e      	ldr	r2, [pc, #376]	; (9b90 <bt_mesh_beacon_recv+0x1ac>)
    9a16:	4b5d      	ldr	r3, [pc, #372]	; (9b8c <bt_mesh_beacon_recv+0x1a8>)
    9a18:	1ad2      	subs	r2, r2, r3
    9a1a:	08d2      	lsrs	r2, r2, #3
		BT_WARN("Unknown beacon type 0x%02x", type);
    9a1c:	0192      	lsls	r2, r2, #6
    9a1e:	4601      	mov	r1, r0
    9a20:	f042 0202 	orr.w	r2, r2, #2
    9a24:	485c      	ldr	r0, [pc, #368]	; (9b98 <bt_mesh_beacon_recv+0x1b4>)
    9a26:	e00c      	b.n	9a42 <bt_mesh_beacon_recv+0x5e>
	if (buf->len != 18 && buf->len != 22) {
    9a28:	88a1      	ldrh	r1, [r4, #4]
    9a2a:	f021 0304 	bic.w	r3, r1, #4
    9a2e:	2b12      	cmp	r3, #18
    9a30:	d00c      	beq.n	9a4c <bt_mesh_beacon_recv+0x68>
    9a32:	4a57      	ldr	r2, [pc, #348]	; (9b90 <bt_mesh_beacon_recv+0x1ac>)
    9a34:	4b55      	ldr	r3, [pc, #340]	; (9b8c <bt_mesh_beacon_recv+0x1a8>)
		BT_ERR("Invalid unprovisioned beacon length (%u)", buf->len);
    9a36:	4859      	ldr	r0, [pc, #356]	; (9b9c <bt_mesh_beacon_recv+0x1b8>)
    9a38:	1ad2      	subs	r2, r2, r3
    9a3a:	08d2      	lsrs	r2, r2, #3
    9a3c:	0192      	lsls	r2, r2, #6
    9a3e:	f042 0201 	orr.w	r2, r2, #1
}
    9a42:	b005      	add	sp, #20
    9a44:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		BT_WARN("Unknown beacon type 0x%02x", type);
    9a48:	f00f bd08 	b.w	1945c <log_1>
	uuid = net_buf_simple_pull_mem(buf, 16);
    9a4c:	2110      	movs	r1, #16
    9a4e:	4620      	mov	r0, r4
    9a50:	f014 f93c 	bl	1dccc <net_buf_simple_pull_mem>
    9a54:	4606      	mov	r6, r0
	oob_info = net_buf_simple_pull_be16(buf);
    9a56:	4620      	mov	r0, r4
    9a58:	f014 f950 	bl	1dcfc <net_buf_simple_pull_be16>
	if (buf->len == 4) {
    9a5c:	88a3      	ldrh	r3, [r4, #4]
    9a5e:	2b04      	cmp	r3, #4
	oob_info = net_buf_simple_pull_be16(buf);
    9a60:	4607      	mov	r7, r0
	if (buf->len == 4) {
    9a62:	d104      	bne.n	9a6e <bt_mesh_beacon_recv+0x8a>
		uri_hash_val = net_buf_simple_pull_be32(buf);
    9a64:	4620      	mov	r0, r4
    9a66:	f014 f953 	bl	1dd10 <net_buf_simple_pull_be32>
		uri_hash = &uri_hash_val;
    9a6a:	466d      	mov	r5, sp
		uri_hash_val = net_buf_simple_pull_be32(buf);
    9a6c:	9000      	str	r0, [sp, #0]
	prov = bt_mesh_prov_get();
    9a6e:	f003 fa73 	bl	cf58 <bt_mesh_prov_get>
	if (prov->unprovisioned_beacon) {
    9a72:	6b43      	ldr	r3, [r0, #52]	; 0x34
    9a74:	b11b      	cbz	r3, 9a7e <bt_mesh_beacon_recv+0x9a>
		prov->unprovisioned_beacon(uuid,
    9a76:	462a      	mov	r2, r5
    9a78:	4639      	mov	r1, r7
    9a7a:	4630      	mov	r0, r6
    9a7c:	4798      	blx	r3
}
    9a7e:	b005      	add	sp, #20
    9a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (buf->len < 21) {
    9a82:	88a1      	ldrh	r1, [r4, #4]
    9a84:	2914      	cmp	r1, #20
    9a86:	d808      	bhi.n	9a9a <bt_mesh_beacon_recv+0xb6>
    9a88:	4a41      	ldr	r2, [pc, #260]	; (9b90 <bt_mesh_beacon_recv+0x1ac>)
    9a8a:	4b40      	ldr	r3, [pc, #256]	; (9b8c <bt_mesh_beacon_recv+0x1a8>)
		BT_ERR("Too short secure beacon (len %u)", buf->len);
    9a8c:	4844      	ldr	r0, [pc, #272]	; (9ba0 <bt_mesh_beacon_recv+0x1bc>)
    9a8e:	1ad2      	subs	r2, r2, r3
    9a90:	08d2      	lsrs	r2, r2, #3
    9a92:	0192      	lsls	r2, r2, #6
    9a94:	f042 0201 	orr.w	r2, r2, #1
    9a98:	e7d3      	b.n	9a42 <bt_mesh_beacon_recv+0x5e>
	sub = bt_mesh_subnet_find(cache_check, buf->data);
    9a9a:	6821      	ldr	r1, [r4, #0]
    9a9c:	4841      	ldr	r0, [pc, #260]	; (9ba4 <bt_mesh_beacon_recv+0x1c0>)
    9a9e:	f000 ffc7 	bl	aa30 <bt_mesh_subnet_find>
	if (sub) {
    9aa2:	4605      	mov	r5, r0
    9aa4:	2800      	cmp	r0, #0
    9aa6:	d146      	bne.n	9b36 <bt_mesh_beacon_recv+0x152>
	params.flags = net_buf_simple_pull_u8(buf);
    9aa8:	4620      	mov	r0, r4
	data = buf->data;
    9aaa:	6826      	ldr	r6, [r4, #0]
	params.flags = net_buf_simple_pull_u8(buf);
    9aac:	f014 f916 	bl	1dcdc <net_buf_simple_pull_u8>
	params.net_id = net_buf_simple_pull_mem(buf, 8);
    9ab0:	2108      	movs	r1, #8
	params.flags = net_buf_simple_pull_u8(buf);
    9ab2:	f88d 000c 	strb.w	r0, [sp, #12]
	params.net_id = net_buf_simple_pull_mem(buf, 8);
    9ab6:	4620      	mov	r0, r4
    9ab8:	f014 f908 	bl	1dccc <net_buf_simple_pull_mem>
    9abc:	9000      	str	r0, [sp, #0]
	params.iv_index = net_buf_simple_pull_be32(buf);
    9abe:	4620      	mov	r0, r4
    9ac0:	f014 f926 	bl	1dd10 <net_buf_simple_pull_be32>
	params.auth = buf->data;
    9ac4:	6823      	ldr	r3, [r4, #0]
	params.iv_index = net_buf_simple_pull_be32(buf);
    9ac6:	9002      	str	r0, [sp, #8]
	sub = bt_mesh_subnet_find(subnet_by_id, &params);
    9ac8:	4669      	mov	r1, sp
    9aca:	4837      	ldr	r0, [pc, #220]	; (9ba8 <bt_mesh_beacon_recv+0x1c4>)
	params.auth = buf->data;
    9acc:	9301      	str	r3, [sp, #4]
	sub = bt_mesh_subnet_find(subnet_by_id, &params);
    9ace:	f000 ffaf 	bl	aa30 <bt_mesh_subnet_find>
	if (!sub) {
    9ad2:	4605      	mov	r5, r0
    9ad4:	2800      	cmp	r0, #0
    9ad6:	d0d2      	beq.n	9a7e <bt_mesh_beacon_recv+0x9a>
	if (sub->kr_phase == BT_MESH_KR_PHASE_2 && !params.new_key) {
    9ad8:	7f83      	ldrb	r3, [r0, #30]
    9ada:	2b02      	cmp	r3, #2
    9adc:	d10d      	bne.n	9afa <bt_mesh_beacon_recv+0x116>
    9ade:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9ae2:	b953      	cbnz	r3, 9afa <bt_mesh_beacon_recv+0x116>
    9ae4:	4b29      	ldr	r3, [pc, #164]	; (9b8c <bt_mesh_beacon_recv+0x1a8>)
    9ae6:	492a      	ldr	r1, [pc, #168]	; (9b90 <bt_mesh_beacon_recv+0x1ac>)
		BT_WARN("Ignoring Phase 2 KR Update secured using old key");
    9ae8:	4830      	ldr	r0, [pc, #192]	; (9bac <bt_mesh_beacon_recv+0x1c8>)
    9aea:	1ac9      	subs	r1, r1, r3
    9aec:	08c9      	lsrs	r1, r1, #3
    9aee:	0189      	lsls	r1, r1, #6
    9af0:	f041 0102 	orr.w	r1, r1, #2
    9af4:	f00f fca5 	bl	19442 <log_0>
		return;
    9af8:	e7c1      	b.n	9a7e <bt_mesh_beacon_recv+0x9a>
	memcpy(sub->beacon_cache, data, 21);
    9afa:	2215      	movs	r2, #21
    9afc:	4631      	mov	r1, r6
    9afe:	1da8      	adds	r0, r5, #6
    9b00:	f010 fbbd 	bl	1a27e <memcpy>
	bt_mesh_kr_update(sub, BT_MESH_KEY_REFRESH(params.flags),
    9b04:	f89d 100c 	ldrb.w	r1, [sp, #12]
    9b08:	f89d 200d 	ldrb.w	r2, [sp, #13]
    9b0c:	4628      	mov	r0, r5
    9b0e:	f001 0101 	and.w	r1, r1, #1
    9b12:	f012 f8c8 	bl	1bca6 <bt_mesh_kr_update>
	if (bt_mesh_subnet_get(BT_MESH_KEY_PRIMARY) &&
    9b16:	2000      	movs	r0, #0
    9b18:	f000 feaa 	bl	a870 <bt_mesh_subnet_get>
    9b1c:	b1a8      	cbz	r0, 9b4a <bt_mesh_beacon_recv+0x166>
    9b1e:	8bab      	ldrh	r3, [r5, #28]
    9b20:	b19b      	cbz	r3, 9b4a <bt_mesh_beacon_recv+0x166>
    9b22:	491b      	ldr	r1, [pc, #108]	; (9b90 <bt_mesh_beacon_recv+0x1ac>)
    9b24:	4b19      	ldr	r3, [pc, #100]	; (9b8c <bt_mesh_beacon_recv+0x1a8>)
		BT_WARN("Ignoring secure beacon on non-primary subnet");
    9b26:	4822      	ldr	r0, [pc, #136]	; (9bb0 <bt_mesh_beacon_recv+0x1cc>)
    9b28:	1ac9      	subs	r1, r1, r3
    9b2a:	08c9      	lsrs	r1, r1, #3
    9b2c:	0189      	lsls	r1, r1, #6
    9b2e:	f041 0102 	orr.w	r1, r1, #2
    9b32:	f00f fc86 	bl	19442 <log_0>
	if (bt_mesh_beacon_enabled() &&
    9b36:	f7ff fc9f 	bl	9478 <bt_mesh_beacon_enabled>
    9b3a:	2800      	cmp	r0, #0
    9b3c:	d09f      	beq.n	9a7e <bt_mesh_beacon_recv+0x9a>
	    sub->beacons_cur < 0xff) {
    9b3e:	796b      	ldrb	r3, [r5, #5]
	if (bt_mesh_beacon_enabled() &&
    9b40:	2bff      	cmp	r3, #255	; 0xff
    9b42:	d09c      	beq.n	9a7e <bt_mesh_beacon_recv+0x9a>
		sub->beacons_cur++;
    9b44:	3301      	adds	r3, #1
    9b46:	716b      	strb	r3, [r5, #5]
    9b48:	e799      	b.n	9a7e <bt_mesh_beacon_recv+0x9a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9b4a:	4b1a      	ldr	r3, [pc, #104]	; (9bb4 <bt_mesh_beacon_recv+0x1d0>)
    9b4c:	f3bf 8f5b 	dmb	ish
    9b50:	681a      	ldr	r2, [r3, #0]
    9b52:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR) &&
    9b56:	0712      	lsls	r2, r2, #28
    9b58:	d50f      	bpl.n	9b7a <bt_mesh_beacon_recv+0x196>
    9b5a:	f3bf 8f5b 	dmb	ish
    9b5e:	681a      	ldr	r2, [r3, #0]
    9b60:	f3bf 8f5b 	dmb	ish
	     BT_MESH_IV_UPDATE(params.flags))) {
    9b64:	f89d 300c 	ldrb.w	r3, [sp, #12]
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR) &&
    9b68:	f3c2 0280 	ubfx	r2, r2, #2, #1
	     BT_MESH_IV_UPDATE(params.flags))) {
    9b6c:	f3c3 0340 	ubfx	r3, r3, #1, #1
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR) &&
    9b70:	429a      	cmp	r2, r3
    9b72:	d102      	bne.n	9b7a <bt_mesh_beacon_recv+0x196>
		bt_mesh_beacon_ivu_initiator(false);
    9b74:	2000      	movs	r0, #0
    9b76:	f7ff ff15 	bl	99a4 <bt_mesh_beacon_ivu_initiator>
	bt_mesh_net_iv_update(params.iv_index, BT_MESH_IV_UPDATE(params.flags));
    9b7a:	f89d 100c 	ldrb.w	r1, [sp, #12]
    9b7e:	9802      	ldr	r0, [sp, #8]
    9b80:	f3c1 0140 	ubfx	r1, r1, #1, #1
    9b84:	f000 f97a 	bl	9e7c <bt_mesh_net_iv_update>
    9b88:	e7d5      	b.n	9b36 <bt_mesh_beacon_recv+0x152>
    9b8a:	bf00      	nop
    9b8c:	0001ef2c 	.word	0x0001ef2c
    9b90:	0001f05c 	.word	0x0001f05c
    9b94:	0002129d 	.word	0x0002129d
    9b98:	00021356 	.word	0x00021356
    9b9c:	000212ae 	.word	0x000212ae
    9ba0:	000212d7 	.word	0x000212d7
    9ba4:	0001bbfb 	.word	0x0001bbfb
    9ba8:	00009851 	.word	0x00009851
    9bac:	000212f8 	.word	0x000212f8
    9bb0:	00021329 	.word	0x00021329
    9bb4:	200011e0 	.word	0x200011e0

00009bb8 <bt_mesh_beacon_enable>:

	bt_mesh_beacon_update(sub);
}

void bt_mesh_beacon_enable(void)
{
    9bb8:	b510      	push	{r4, lr}
	if (bt_mesh_is_provisioned()) {
    9bba:	f7ff fbd7 	bl	936c <bt_mesh_is_provisioned>
    9bbe:	b110      	cbz	r0, 9bc6 <bt_mesh_beacon_enable+0xe>
		bt_mesh_subnet_foreach(subnet_beacon_enable);
    9bc0:	4804      	ldr	r0, [pc, #16]	; (9bd4 <bt_mesh_beacon_enable+0x1c>)
    9bc2:	f000 ff59 	bl	aa78 <bt_mesh_subnet_foreach>
	}

	k_work_reschedule(&beacon_timer, K_NO_WAIT);
}
    9bc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_reschedule(&beacon_timer, K_NO_WAIT);
    9bca:	4803      	ldr	r0, [pc, #12]	; (9bd8 <bt_mesh_beacon_enable+0x20>)
    9bcc:	2200      	movs	r2, #0
    9bce:	2300      	movs	r3, #0
    9bd0:	f00e b94a 	b.w	17e68 <k_work_reschedule>
    9bd4:	0001bc17 	.word	0x0001bc17
    9bd8:	200011a8 	.word	0x200011a8

00009bdc <bt_mesh_beacon_disable>:
    9bdc:	4b05      	ldr	r3, [pc, #20]	; (9bf4 <bt_mesh_beacon_disable+0x18>)
    9bde:	f3bf 8f5b 	dmb	ish
    9be2:	681b      	ldr	r3, [r3, #0]
    9be4:	f3bf 8f5b 	dmb	ish

void bt_mesh_beacon_disable(void)
{
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR)) {
    9be8:	071b      	lsls	r3, r3, #28
    9bea:	d402      	bmi.n	9bf2 <bt_mesh_beacon_disable+0x16>
		/* If this fails, we'll do an early exit in the work handler. */
		(void)k_work_cancel_delayable(&beacon_timer);
    9bec:	4802      	ldr	r0, [pc, #8]	; (9bf8 <bt_mesh_beacon_disable+0x1c>)
    9bee:	f014 bd45 	b.w	1e67c <k_work_cancel_delayable>
	}
}
    9bf2:	4770      	bx	lr
    9bf4:	200011e0 	.word	0x200011e0
    9bf8:	200011a8 	.word	0x200011a8

00009bfc <net_decrypt>:
}

static bool net_decrypt(struct bt_mesh_net_rx *rx, struct net_buf_simple *in,
			struct net_buf_simple *out,
			const struct bt_mesh_net_cred *cred)
{
    9bfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9c00:	461e      	mov	r6, r3
	bool proxy = (rx->net_if == BT_MESH_NET_IF_PROXY_CFG);

	if (NID(in->data) != cred->nid) {
    9c02:	680b      	ldr	r3, [r1, #0]
{
    9c04:	4614      	mov	r4, r2
	if (NID(in->data) != cred->nid) {
    9c06:	781a      	ldrb	r2, [r3, #0]
{
    9c08:	4605      	mov	r5, r0
	if (NID(in->data) != cred->nid) {
    9c0a:	7830      	ldrb	r0, [r6, #0]
    9c0c:	f002 037f 	and.w	r3, r2, #127	; 0x7f
    9c10:	4298      	cmp	r0, r3
    9c12:	d002      	beq.n	9c1a <net_decrypt+0x1e>
		return false;
    9c14:	2000      	movs	r0, #0

	BT_DBG("src 0x%04x", rx->ctx.addr);

	return bt_mesh_net_decrypt(cred->enc, out, BT_MESH_NET_IVI_RX(rx),
				   proxy) == 0;
}
    9c16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	rx->old_iv = (IVI(in->data) != (bt_mesh.iv_index & 0x01));
    9c1a:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 9ce4 <net_decrypt+0xe8>
	bool proxy = (rx->net_if == BT_MESH_NET_IF_PROXY_CFG);
    9c1e:	7d2f      	ldrb	r7, [r5, #20]
	rx->old_iv = (IVI(in->data) != (bt_mesh.iv_index & 0x01));
    9c20:	f8d8 3000 	ldr.w	r3, [r8]
    9c24:	f003 0301 	and.w	r3, r3, #1
    9c28:	ea83 13d2 	eor.w	r3, r3, r2, lsr #7
    9c2c:	463a      	mov	r2, r7
    9c2e:	f363 0200 	bfi	r2, r3, #0, #1
	buf->len  = 0U;
    9c32:	2300      	movs	r3, #0
    9c34:	752a      	strb	r2, [r5, #20]
    9c36:	80a3      	strh	r3, [r4, #4]
	buf->data = buf->__buf;
    9c38:	68a3      	ldr	r3, [r4, #8]
    9c3a:	6023      	str	r3, [r4, #0]
	net_buf_simple_add_mem(out, in->data, in->len);
    9c3c:	888a      	ldrh	r2, [r1, #4]
    9c3e:	6809      	ldr	r1, [r1, #0]
    9c40:	4620      	mov	r0, r4
    9c42:	f013 ffe8 	bl	1dc16 <net_buf_simple_add_mem>
	if (bt_mesh_net_obfuscate(out->data, BT_MESH_NET_IVI_RX(rx),
    9c46:	7d2b      	ldrb	r3, [r5, #20]
    9c48:	f8d8 1000 	ldr.w	r1, [r8]
    9c4c:	6820      	ldr	r0, [r4, #0]
    9c4e:	f003 0301 	and.w	r3, r3, #1
    9c52:	f106 0211 	add.w	r2, r6, #17
    9c56:	1ac9      	subs	r1, r1, r3
    9c58:	f002 fd2a 	bl	c6b0 <bt_mesh_net_obfuscate>
    9c5c:	2800      	cmp	r0, #0
    9c5e:	d1d9      	bne.n	9c14 <net_decrypt+0x18>
	return ((uint16_t)src[0] << 8) | src[1];
    9c60:	6823      	ldr	r3, [r4, #0]
    9c62:	f8b3 2005 	ldrh.w	r2, [r3, #5]
    9c66:	ba52      	rev16	r2, r2
    9c68:	b290      	uxth	r0, r2
	rx->ctx.addr = SRC(out->data);
    9c6a:	812a      	strh	r2, [r5, #8]
	if (!BT_MESH_ADDR_IS_UNICAST(rx->ctx.addr)) {
    9c6c:	b212      	sxth	r2, r2
    9c6e:	2a00      	cmp	r2, #0
    9c70:	ddd0      	ble.n	9c14 <net_decrypt+0x18>
	if (bt_mesh_has_addr(rx->ctx.addr)) {
    9c72:	f002 ff5f 	bl	cb34 <bt_mesh_has_addr>
    9c76:	2800      	cmp	r0, #0
    9c78:	d1cc      	bne.n	9c14 <net_decrypt+0x18>
	if (rx->net_if == BT_MESH_NET_IF_ADV && msg_cache_match(out)) {
    9c7a:	7d2d      	ldrb	r5, [r5, #20]
    9c7c:	f015 0130 	ands.w	r1, r5, #48	; 0x30
    9c80:	d11d      	bne.n	9cbe <net_decrypt+0xc2>
		if (msg_cache[i].src == SRC(pdu->data) &&
    9c82:	6823      	ldr	r3, [r4, #0]
    9c84:	f8df b060 	ldr.w	fp, [pc, #96]	; 9ce8 <net_decrypt+0xec>
    9c88:	f8b3 9005 	ldrh.w	r9, [r3, #5]
    9c8c:	fa99 f999 	rev16.w	r9, r9
    9c90:	fa1f f989 	uxth.w	r9, r9
		    msg_cache[i].seq == (SEQ(pdu->data) & BIT_MASK(17))) {
    9c94:	f103 0a02 	add.w	sl, r3, #2
		if (msg_cache[i].src == SRC(pdu->data) &&
    9c98:	f83b 3021 	ldrh.w	r3, [fp, r1, lsl #2]
    9c9c:	f3c3 030e 	ubfx	r3, r3, #0, #15
    9ca0:	454b      	cmp	r3, r9
    9ca2:	d109      	bne.n	9cb8 <net_decrypt+0xbc>
		    msg_cache[i].seq == (SEQ(pdu->data) & BIT_MASK(17))) {
    9ca4:	4650      	mov	r0, sl
    9ca6:	f011 ffba 	bl	1bc1e <sys_get_be24>
    9caa:	f85b 3021 	ldr.w	r3, [fp, r1, lsl #2]
    9cae:	f3c0 0010 	ubfx	r0, r0, #0, #17
		if (msg_cache[i].src == SRC(pdu->data) &&
    9cb2:	ebb0 3fd3 	cmp.w	r0, r3, lsr #15
    9cb6:	d0ad      	beq.n	9c14 <net_decrypt+0x18>
	for (i = 0U; i < ARRAY_SIZE(msg_cache); i++) {
    9cb8:	3101      	adds	r1, #1
    9cba:	290a      	cmp	r1, #10
    9cbc:	d1ec      	bne.n	9c98 <net_decrypt+0x9c>
	bool proxy = (rx->net_if == BT_MESH_NET_IF_PROXY_CFG);
    9cbe:	f007 0330 	and.w	r3, r7, #48	; 0x30
	return bt_mesh_net_decrypt(cred->enc, out, BT_MESH_NET_IVI_RX(rx),
    9cc2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    9cc6:	f8d8 2000 	ldr.w	r2, [r8]
    9cca:	424b      	negs	r3, r1
    9ccc:	f005 0501 	and.w	r5, r5, #1
    9cd0:	414b      	adcs	r3, r1
    9cd2:	1b52      	subs	r2, r2, r5
    9cd4:	4621      	mov	r1, r4
    9cd6:	1c70      	adds	r0, r6, #1
    9cd8:	f012 fa62 	bl	1c1a0 <bt_mesh_net_decrypt>
				   proxy) == 0;
    9cdc:	fab0 f080 	clz	r0, r0
    9ce0:	0940      	lsrs	r0, r0, #5
    9ce2:	e798      	b.n	9c16 <net_decrypt+0x1a>
    9ce4:	200011d8 	.word	0x200011d8
    9ce8:	20001b8c 	.word	0x20001b8c

00009cec <seq_set>:

BT_MESH_SETTINGS_DEFINE(iv, "IV", iv_set);

static int seq_set(const char *name, size_t len_rd, settings_read_cb read_cb,
		   void *cb_arg)
{
    9cec:	b513      	push	{r0, r1, r4, lr}
    9cee:	460c      	mov	r4, r1
    9cf0:	4610      	mov	r0, r2
    9cf2:	4619      	mov	r1, r3
	struct seq_val seq;
	int err;

	if (len_rd == 0) {
    9cf4:	b924      	cbnz	r4, 9d00 <seq_set+0x14>
		BT_DBG("val (null)");

		bt_mesh.seq = 0U;
    9cf6:	4b11      	ldr	r3, [pc, #68]	; (9d3c <seq_set+0x50>)
    9cf8:	605c      	str	r4, [r3, #4]
	}

	BT_DBG("Sequence Number 0x%06x", bt_mesh.seq);

	return 0;
}
    9cfa:	4620      	mov	r0, r4
    9cfc:	b002      	add	sp, #8
    9cfe:	bd10      	pop	{r4, pc}
	err = bt_mesh_settings_set(read_cb, cb_arg, &seq, sizeof(seq));
    9d00:	2303      	movs	r3, #3
    9d02:	aa01      	add	r2, sp, #4
    9d04:	f003 f896 	bl	ce34 <bt_mesh_settings_set>
	if (err) {
    9d08:	4604      	mov	r4, r0
    9d0a:	b150      	cbz	r0, 9d22 <seq_set+0x36>
    9d0c:	4b0c      	ldr	r3, [pc, #48]	; (9d40 <seq_set+0x54>)
    9d0e:	490d      	ldr	r1, [pc, #52]	; (9d44 <seq_set+0x58>)
		BT_ERR("Failed to set \'seq\'");
    9d10:	480d      	ldr	r0, [pc, #52]	; (9d48 <seq_set+0x5c>)
    9d12:	1ac9      	subs	r1, r1, r3
    9d14:	08c9      	lsrs	r1, r1, #3
    9d16:	0189      	lsls	r1, r1, #6
    9d18:	f041 0101 	orr.w	r1, r1, #1
    9d1c:	f00f fb91 	bl	19442 <log_0>
		return err;
    9d20:	e7eb      	b.n	9cfa <seq_set+0xe>
	return ((uint32_t)src[2] << 16) | sys_get_le16(&src[0]);
    9d22:	f89d 2006 	ldrb.w	r2, [sp, #6]
    9d26:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    9d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
		bt_mesh.seq += (CONFIG_BT_MESH_SEQ_STORE_RATE -
    9d2e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
		bt_mesh.seq--;
    9d32:	4a02      	ldr	r2, [pc, #8]	; (9d3c <seq_set+0x50>)
    9d34:	337f      	adds	r3, #127	; 0x7f
    9d36:	6053      	str	r3, [r2, #4]
	return 0;
    9d38:	e7df      	b.n	9cfa <seq_set+0xe>
    9d3a:	bf00      	nop
    9d3c:	200011d8 	.word	0x200011d8
    9d40:	0001ef2c 	.word	0x0001ef2c
    9d44:	0001f0ac 	.word	0x0001f0ac
    9d48:	00021380 	.word	0x00021380

00009d4c <net_set>:
{
    9d4c:	b510      	push	{r4, lr}
    9d4e:	460c      	mov	r4, r1
    9d50:	b086      	sub	sp, #24
    9d52:	4610      	mov	r0, r2
    9d54:	4619      	mov	r1, r3
	if (len_rd == 0) {
    9d56:	b94c      	cbnz	r4, 9d6c <net_set+0x20>
		bt_mesh_comp_unprovision();
    9d58:	f002 fecc 	bl	caf4 <bt_mesh_comp_unprovision>
		(void)memset(bt_mesh.dev_key, 0, sizeof(bt_mesh.dev_key));
    9d5c:	4811      	ldr	r0, [pc, #68]	; (9da4 <net_set+0x58>)
    9d5e:	2210      	movs	r2, #16
    9d60:	4621      	mov	r1, r4
    9d62:	f010 fa97 	bl	1a294 <memset>
}
    9d66:	4620      	mov	r0, r4
    9d68:	b006      	add	sp, #24
    9d6a:	bd10      	pop	{r4, pc}
	err = bt_mesh_settings_set(read_cb, cb_arg, &net, sizeof(net));
    9d6c:	2312      	movs	r3, #18
    9d6e:	aa01      	add	r2, sp, #4
    9d70:	f003 f860 	bl	ce34 <bt_mesh_settings_set>
	if (err) {
    9d74:	4604      	mov	r4, r0
    9d76:	b150      	cbz	r0, 9d8e <net_set+0x42>
    9d78:	4b0b      	ldr	r3, [pc, #44]	; (9da8 <net_set+0x5c>)
    9d7a:	490c      	ldr	r1, [pc, #48]	; (9dac <net_set+0x60>)
		BT_ERR("Failed to set \'net\'");
    9d7c:	480c      	ldr	r0, [pc, #48]	; (9db0 <net_set+0x64>)
    9d7e:	1ac9      	subs	r1, r1, r3
    9d80:	08c9      	lsrs	r1, r1, #3
    9d82:	0189      	lsls	r1, r1, #6
    9d84:	f041 0101 	orr.w	r1, r1, #1
    9d88:	f00f fb5b 	bl	19442 <log_0>
		return err;
    9d8c:	e7eb      	b.n	9d66 <net_set+0x1a>
	memcpy(bt_mesh.dev_key, net.dev_key, sizeof(bt_mesh.dev_key));
    9d8e:	2210      	movs	r2, #16
    9d90:	f10d 0106 	add.w	r1, sp, #6
    9d94:	4803      	ldr	r0, [pc, #12]	; (9da4 <net_set+0x58>)
    9d96:	f010 fa72 	bl	1a27e <memcpy>
	bt_mesh_comp_provision(net.primary_addr);
    9d9a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    9d9e:	f002 fe93 	bl	cac8 <bt_mesh_comp_provision>
	return 0;
    9da2:	e7e0      	b.n	9d66 <net_set+0x1a>
    9da4:	20001230 	.word	0x20001230
    9da8:	0001ef2c 	.word	0x0001ef2c
    9dac:	0001f0ac 	.word	0x0001f0ac
    9db0:	00021394 	.word	0x00021394

00009db4 <atomic_get.constprop.0>:
    9db4:	4b03      	ldr	r3, [pc, #12]	; (9dc4 <atomic_get.constprop.0+0x10>)
    9db6:	f3bf 8f5b 	dmb	ish
    9dba:	6898      	ldr	r0, [r3, #8]
    9dbc:	f3bf 8f5b 	dmb	ish
}
    9dc0:	4770      	bx	lr
    9dc2:	bf00      	nop
    9dc4:	200011d8 	.word	0x200011d8

00009dc8 <atomic_set_bit_to.constprop.0>:
    9dc8:	4b0b      	ldr	r3, [pc, #44]	; (9df8 <atomic_set_bit_to.constprop.0+0x30>)
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9dca:	f3bf 8f5b 	dmb	ish
    9dce:	b150      	cbz	r0, 9de6 <atomic_set_bit_to.constprop.0+0x1e>
    9dd0:	e853 2f00 	ldrex	r2, [r3]
    9dd4:	f042 0204 	orr.w	r2, r2, #4
    9dd8:	e843 2100 	strex	r1, r2, [r3]
    9ddc:	2900      	cmp	r1, #0
    9dde:	d1f7      	bne.n	9dd0 <atomic_set_bit_to.constprop.0+0x8>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9de0:	f3bf 8f5b 	dmb	ish
}
    9de4:	4770      	bx	lr
    9de6:	e853 2f00 	ldrex	r2, [r3]
    9dea:	f022 0204 	bic.w	r2, r2, #4
    9dee:	e843 2100 	strex	r1, r2, [r3]
    9df2:	2900      	cmp	r1, #0
    9df4:	d0f4      	beq.n	9de0 <atomic_set_bit_to.constprop.0+0x18>
    9df6:	e7f6      	b.n	9de6 <atomic_set_bit_to.constprop.0+0x1e>
    9df8:	200011e0 	.word	0x200011e0

00009dfc <iv_set>:
{
    9dfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    9dfe:	460c      	mov	r4, r1
    9e00:	4610      	mov	r0, r2
    9e02:	4619      	mov	r1, r3
	if (len_rd == 0) {
    9e04:	b98c      	cbnz	r4, 9e2a <iv_set+0x2e>
		bt_mesh.iv_index = 0U;
    9e06:	4b19      	ldr	r3, [pc, #100]	; (9e6c <iv_set+0x70>)
    9e08:	f843 4b08 	str.w	r4, [r3], #8
    9e0c:	f3bf 8f5b 	dmb	ish
    9e10:	e853 2f00 	ldrex	r2, [r3]
    9e14:	f022 0204 	bic.w	r2, r2, #4
    9e18:	e843 2100 	strex	r1, r2, [r3]
    9e1c:	2900      	cmp	r1, #0
    9e1e:	d1f7      	bne.n	9e10 <iv_set+0x14>
    9e20:	f3bf 8f5b 	dmb	ish
}
    9e24:	4620      	mov	r0, r4
    9e26:	b003      	add	sp, #12
    9e28:	bd30      	pop	{r4, r5, pc}
	err = bt_mesh_settings_set(read_cb, cb_arg, &iv, sizeof(iv));
    9e2a:	2305      	movs	r3, #5
    9e2c:	466a      	mov	r2, sp
    9e2e:	f003 f801 	bl	ce34 <bt_mesh_settings_set>
	if (err) {
    9e32:	4604      	mov	r4, r0
    9e34:	b150      	cbz	r0, 9e4c <iv_set+0x50>
    9e36:	4b0e      	ldr	r3, [pc, #56]	; (9e70 <iv_set+0x74>)
    9e38:	490e      	ldr	r1, [pc, #56]	; (9e74 <iv_set+0x78>)
		BT_ERR("Failed to set \'iv\'");
    9e3a:	480f      	ldr	r0, [pc, #60]	; (9e78 <iv_set+0x7c>)
    9e3c:	1ac9      	subs	r1, r1, r3
    9e3e:	08c9      	lsrs	r1, r1, #3
    9e40:	0189      	lsls	r1, r1, #6
    9e42:	f041 0101 	orr.w	r1, r1, #1
    9e46:	f00f fafc 	bl	19442 <log_0>
		return err;
    9e4a:	e7eb      	b.n	9e24 <iv_set+0x28>
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS, iv.iv_update);
    9e4c:	f89d 0004 	ldrb.w	r0, [sp, #4]
	bt_mesh.iv_index = iv.iv_index;
    9e50:	4d06      	ldr	r5, [pc, #24]	; (9e6c <iv_set+0x70>)
    9e52:	9b00      	ldr	r3, [sp, #0]
    9e54:	602b      	str	r3, [r5, #0]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS, iv.iv_update);
    9e56:	f000 0001 	and.w	r0, r0, #1
    9e5a:	f7ff ffb5 	bl	9dc8 <atomic_set_bit_to.constprop.0>
	bt_mesh.ivu_duration = iv.iv_duration;
    9e5e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    9e62:	f3c3 0346 	ubfx	r3, r3, #1, #7
    9e66:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
	return 0;
    9e6a:	e7db      	b.n	9e24 <iv_set+0x28>
    9e6c:	200011d8 	.word	0x200011d8
    9e70:	0001ef2c 	.word	0x0001ef2c
    9e74:	0001f0ac 	.word	0x0001f0ac
    9e78:	000213a8 	.word	0x000213a8

00009e7c <bt_mesh_net_iv_update>:
{
    9e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9e7e:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9e80:	f7ff ff98 	bl	9db4 <atomic_get.constprop.0>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    9e84:	4e4f      	ldr	r6, [pc, #316]	; (9fc4 <bt_mesh_net_iv_update+0x148>)
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    9e86:	f010 0f04 	tst.w	r0, #4
		if (iv_index != bt_mesh.iv_index) {
    9e8a:	6832      	ldr	r2, [r6, #0]
{
    9e8c:	460c      	mov	r4, r1
    9e8e:	f3c0 0780 	ubfx	r7, r0, #2, #1
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    9e92:	d012      	beq.n	9eba <bt_mesh_net_iv_update+0x3e>
		if (iv_index != bt_mesh.iv_index) {
    9e94:	42aa      	cmp	r2, r5
    9e96:	d00b      	beq.n	9eb0 <bt_mesh_net_iv_update+0x34>
    9e98:	494b      	ldr	r1, [pc, #300]	; (9fc8 <bt_mesh_net_iv_update+0x14c>)
    9e9a:	4b4c      	ldr	r3, [pc, #304]	; (9fcc <bt_mesh_net_iv_update+0x150>)
			BT_WARN("IV Index mismatch: 0x%08x != 0x%08x",
    9e9c:	484c      	ldr	r0, [pc, #304]	; (9fd0 <bt_mesh_net_iv_update+0x154>)
    9e9e:	1a5b      	subs	r3, r3, r1
    9ea0:	08db      	lsrs	r3, r3, #3
    9ea2:	019b      	lsls	r3, r3, #6
    9ea4:	f043 0302 	orr.w	r3, r3, #2
    9ea8:	4629      	mov	r1, r5
			BT_ERR("IV Index out of sync: 0x%08x != 0x%08x",
    9eaa:	f00f faeb 	bl	19484 <log_2>
    9eae:	e001      	b.n	9eb4 <bt_mesh_net_iv_update+0x38>
		if (iv_update) {
    9eb0:	2900      	cmp	r1, #0
    9eb2:	d055      	beq.n	9f60 <bt_mesh_net_iv_update+0xe4>
			return false;
    9eb4:	2400      	movs	r4, #0
}
    9eb6:	4620      	mov	r0, r4
    9eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (iv_index == bt_mesh.iv_index) {
    9eba:	42aa      	cmp	r2, r5
    9ebc:	d07f      	beq.n	9fbe <bt_mesh_net_iv_update+0x142>
		if (iv_index < bt_mesh.iv_index ||
    9ebe:	d803      	bhi.n	9ec8 <bt_mesh_net_iv_update+0x4c>
		    iv_index > bt_mesh.iv_index + 42) {
    9ec0:	f102 032a 	add.w	r3, r2, #42	; 0x2a
		if (iv_index < bt_mesh.iv_index ||
    9ec4:	42ab      	cmp	r3, r5
    9ec6:	d209      	bcs.n	9edc <bt_mesh_net_iv_update+0x60>
    9ec8:	493f      	ldr	r1, [pc, #252]	; (9fc8 <bt_mesh_net_iv_update+0x14c>)
    9eca:	4b40      	ldr	r3, [pc, #256]	; (9fcc <bt_mesh_net_iv_update+0x150>)
			BT_ERR("IV Index out of sync: 0x%08x != 0x%08x",
    9ecc:	4841      	ldr	r0, [pc, #260]	; (9fd4 <bt_mesh_net_iv_update+0x158>)
    9ece:	1a5b      	subs	r3, r3, r1
    9ed0:	08db      	lsrs	r3, r3, #3
    9ed2:	019b      	lsls	r3, r3, #6
    9ed4:	f043 0301 	orr.w	r3, r3, #1
    9ed8:	4629      	mov	r1, r5
    9eda:	e7e6      	b.n	9eaa <bt_mesh_net_iv_update+0x2e>
		if (iv_index > bt_mesh.iv_index + 1) {
    9edc:	3201      	adds	r2, #1
    9ede:	42aa      	cmp	r2, r5
    9ee0:	d22f      	bcs.n	9f42 <bt_mesh_net_iv_update+0xc6>
    9ee2:	4b39      	ldr	r3, [pc, #228]	; (9fc8 <bt_mesh_net_iv_update+0x14c>)
    9ee4:	4939      	ldr	r1, [pc, #228]	; (9fcc <bt_mesh_net_iv_update+0x150>)
			BT_WARN("Performing IV Index Recovery");
    9ee6:	483c      	ldr	r0, [pc, #240]	; (9fd8 <bt_mesh_net_iv_update+0x15c>)
    9ee8:	1ac9      	subs	r1, r1, r3
    9eea:	08c9      	lsrs	r1, r1, #3
    9eec:	0189      	lsls	r1, r1, #6
    9eee:	f041 0102 	orr.w	r1, r1, #2
    9ef2:	f00f faa6 	bl	19442 <log_0>
			bt_mesh_rpl_clear();
    9ef6:	f012 f881 	bl	1bffc <bt_mesh_rpl_clear>
			bt_mesh.seq = 0U;
    9efa:	e9c6 5700 	strd	r5, r7, [r6]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS, iv_update);
    9efe:	4620      	mov	r0, r4
    9f00:	f7ff ff62 	bl	9dc8 <atomic_set_bit_to.constprop.0>
	bt_mesh.ivu_duration = 0U;
    9f04:	2300      	movs	r3, #0
    9f06:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
	if (iv_update) {
    9f0a:	2c00      	cmp	r4, #0
    9f0c:	d055      	beq.n	9fba <bt_mesh_net_iv_update+0x13e>
		bt_mesh.iv_index = iv_index;
    9f0e:	6035      	str	r5, [r6, #0]
		bt_mesh_rpl_reset();
    9f10:	f002 f980 	bl	c214 <bt_mesh_rpl_reset>
	k_work_reschedule(&bt_mesh.ivu_timer, BT_MESH_IVU_TIMEOUT);
    9f14:	4a31      	ldr	r2, [pc, #196]	; (9fdc <bt_mesh_net_iv_update+0x160>)
    9f16:	4832      	ldr	r0, [pc, #200]	; (9fe0 <bt_mesh_net_iv_update+0x164>)
    9f18:	2300      	movs	r3, #0
    9f1a:	f00d ffa5 	bl	17e68 <k_work_reschedule>
	bt_mesh_subnet_foreach(bt_mesh_beacon_update);
    9f1e:	4831      	ldr	r0, [pc, #196]	; (9fe4 <bt_mesh_net_iv_update+0x168>)
    9f20:	f000 fdaa 	bl	aa78 <bt_mesh_subnet_foreach>
	    bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED) {
    9f24:	f7ff fad8 	bl	94d8 <bt_mesh_gatt_proxy_get>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    9f28:	2801      	cmp	r0, #1
    9f2a:	d102      	bne.n	9f32 <bt_mesh_net_iv_update+0xb6>
		bt_mesh_proxy_beacon_send(NULL);
    9f2c:	2000      	movs	r0, #0
    9f2e:	f003 ff53 	bl	ddd8 <bt_mesh_proxy_beacon_send>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_IV_PENDING);
    9f32:	2004      	movs	r0, #4
    9f34:	f002 ffb0 	bl	ce98 <bt_mesh_settings_store_schedule>
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_SEQ_PENDING);
    9f38:	2005      	movs	r0, #5
    9f3a:	f002 ffad 	bl	ce98 <bt_mesh_settings_store_schedule>
	return true;
    9f3e:	2401      	movs	r4, #1
    9f40:	e7b9      	b.n	9eb6 <bt_mesh_net_iv_update+0x3a>
		if (iv_index == bt_mesh.iv_index + 1 && !iv_update) {
    9f42:	d10b      	bne.n	9f5c <bt_mesh_net_iv_update+0xe0>
    9f44:	b961      	cbnz	r1, 9f60 <bt_mesh_net_iv_update+0xe4>
    9f46:	4b20      	ldr	r3, [pc, #128]	; (9fc8 <bt_mesh_net_iv_update+0x14c>)
    9f48:	4920      	ldr	r1, [pc, #128]	; (9fcc <bt_mesh_net_iv_update+0x150>)
			BT_WARN("Ignoring new index in normal mode");
    9f4a:	4827      	ldr	r0, [pc, #156]	; (9fe8 <bt_mesh_net_iv_update+0x16c>)
    9f4c:	1ac9      	subs	r1, r1, r3
    9f4e:	08c9      	lsrs	r1, r1, #3
    9f50:	0189      	lsls	r1, r1, #6
    9f52:	f041 0102 	orr.w	r1, r1, #2
    9f56:	f00f fa74 	bl	19442 <log_0>
			return false;
    9f5a:	e7ac      	b.n	9eb6 <bt_mesh_net_iv_update+0x3a>
		if (!iv_update) {
    9f5c:	2900      	cmp	r1, #0
    9f5e:	d0aa      	beq.n	9eb6 <bt_mesh_net_iv_update+0x3a>
		if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
    9f60:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
    9f64:	2b5f      	cmp	r3, #95	; 0x5f
    9f66:	d80a      	bhi.n	9f7e <bt_mesh_net_iv_update+0x102>
    9f68:	4b17      	ldr	r3, [pc, #92]	; (9fc8 <bt_mesh_net_iv_update+0x14c>)
    9f6a:	4918      	ldr	r1, [pc, #96]	; (9fcc <bt_mesh_net_iv_update+0x150>)
			BT_WARN("IV Update before minimum duration");
    9f6c:	481f      	ldr	r0, [pc, #124]	; (9fec <bt_mesh_net_iv_update+0x170>)
    9f6e:	1ac9      	subs	r1, r1, r3
    9f70:	08c9      	lsrs	r1, r1, #3
    9f72:	0189      	lsls	r1, r1, #6
    9f74:	f041 0102 	orr.w	r1, r1, #2
    9f78:	f00f fa63 	bl	19442 <log_0>
			return false;
    9f7c:	e79a      	b.n	9eb4 <bt_mesh_net_iv_update+0x38>
	if (!iv_update && bt_mesh_tx_in_progress()) {
    9f7e:	2c00      	cmp	r4, #0
    9f80:	d1bd      	bne.n	9efe <bt_mesh_net_iv_update+0x82>
    9f82:	f001 fbe7 	bl	b754 <bt_mesh_tx_in_progress>
    9f86:	2800      	cmp	r0, #0
    9f88:	d0b9      	beq.n	9efe <bt_mesh_net_iv_update+0x82>
    9f8a:	4b0f      	ldr	r3, [pc, #60]	; (9fc8 <bt_mesh_net_iv_update+0x14c>)
    9f8c:	490f      	ldr	r1, [pc, #60]	; (9fcc <bt_mesh_net_iv_update+0x150>)
		BT_WARN("IV Update deferred because of pending transfer");
    9f8e:	4818      	ldr	r0, [pc, #96]	; (9ff0 <bt_mesh_net_iv_update+0x174>)
    9f90:	1ac9      	subs	r1, r1, r3
    9f92:	08c9      	lsrs	r1, r1, #3
    9f94:	0189      	lsls	r1, r1, #6
    9f96:	f041 0102 	orr.w	r1, r1, #2
    9f9a:	f00f fa52 	bl	19442 <log_0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9f9e:	f3bf 8f5b 	dmb	ish
    9fa2:	4b14      	ldr	r3, [pc, #80]	; (9ff4 <bt_mesh_net_iv_update+0x178>)
    9fa4:	e853 2f00 	ldrex	r2, [r3]
    9fa8:	f042 0220 	orr.w	r2, r2, #32
    9fac:	e843 2100 	strex	r1, r2, [r3]
    9fb0:	2900      	cmp	r1, #0
    9fb2:	d1f7      	bne.n	9fa4 <bt_mesh_net_iv_update+0x128>
    9fb4:	f3bf 8f5b 	dmb	ish
    9fb8:	e77d      	b.n	9eb6 <bt_mesh_net_iv_update+0x3a>
		bt_mesh.seq = 0U;
    9fba:	6074      	str	r4, [r6, #4]
    9fbc:	e7aa      	b.n	9f14 <bt_mesh_net_iv_update+0x98>
			return false;
    9fbe:	463c      	mov	r4, r7
    9fc0:	e779      	b.n	9eb6 <bt_mesh_net_iv_update+0x3a>
    9fc2:	bf00      	nop
    9fc4:	200011d8 	.word	0x200011d8
    9fc8:	0001ef2c 	.word	0x0001ef2c
    9fcc:	0001f0ac 	.word	0x0001f0ac
    9fd0:	000213bb 	.word	0x000213bb
    9fd4:	000213df 	.word	0x000213df
    9fd8:	00021406 	.word	0x00021406
    9fdc:	a8c00000 	.word	0xa8c00000
    9fe0:	20001200 	.word	0x20001200
    9fe4:	00009941 	.word	0x00009941
    9fe8:	00021423 	.word	0x00021423
    9fec:	00021445 	.word	0x00021445
    9ff0:	00021467 	.word	0x00021467
    9ff4:	200011e0 	.word	0x200011e0

00009ff8 <bt_mesh_next_seq>:
{
    9ff8:	b538      	push	{r3, r4, r5, lr}
	uint32_t seq = bt_mesh.seq++;
    9ffa:	4c10      	ldr	r4, [pc, #64]	; (a03c <bt_mesh_next_seq+0x44>)
    9ffc:	6865      	ldr	r5, [r4, #4]
    9ffe:	1c6b      	adds	r3, r5, #1
	if (CONFIG_BT_MESH_SEQ_STORE_RATE > 1 &&
    a000:	065a      	lsls	r2, r3, #25
	uint32_t seq = bt_mesh.seq++;
    a002:	6063      	str	r3, [r4, #4]
	if (CONFIG_BT_MESH_SEQ_STORE_RATE > 1 &&
    a004:	d102      	bne.n	a00c <bt_mesh_next_seq+0x14>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_SEQ_PENDING);
    a006:	2005      	movs	r0, #5
    a008:	f002 ff46 	bl	ce98 <bt_mesh_settings_store_schedule>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    a00c:	f7ff fed2 	bl	9db4 <atomic_get.constprop.0>
    a010:	4603      	mov	r3, r0
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS) &&
    a012:	075b      	lsls	r3, r3, #29
    a014:	f3c0 0080 	ubfx	r0, r0, #2, #1
    a018:	d40e      	bmi.n	a038 <bt_mesh_next_seq+0x40>
    a01a:	6863      	ldr	r3, [r4, #4]
    a01c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    a020:	d90a      	bls.n	a038 <bt_mesh_next_seq+0x40>
	    bt_mesh_subnet_get(BT_MESH_KEY_PRIMARY)) {
    a022:	f000 fc25 	bl	a870 <bt_mesh_subnet_get>
	    bt_mesh.seq > IV_UPDATE_SEQ_LIMIT &&
    a026:	b138      	cbz	r0, a038 <bt_mesh_next_seq+0x40>
		bt_mesh_beacon_ivu_initiator(true);
    a028:	2001      	movs	r0, #1
    a02a:	f7ff fcbb 	bl	99a4 <bt_mesh_beacon_ivu_initiator>
		bt_mesh_net_iv_update(bt_mesh.iv_index + 1, true);
    a02e:	6820      	ldr	r0, [r4, #0]
    a030:	2101      	movs	r1, #1
    a032:	4408      	add	r0, r1
    a034:	f7ff ff22 	bl	9e7c <bt_mesh_net_iv_update>
}
    a038:	4628      	mov	r0, r5
    a03a:	bd38      	pop	{r3, r4, r5, pc}
    a03c:	200011d8 	.word	0x200011d8

0000a040 <net_header_encode>:
{
    a040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const bool ctl = (tx->ctx->app_idx == BT_MESH_KEY_UNUSED);
    a042:	6843      	ldr	r3, [r0, #4]
    a044:	885f      	ldrh	r7, [r3, #2]
	if (ctl && net_buf_simple_tailroom(buf) < 8) {
    a046:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a04a:	429f      	cmp	r7, r3
{
    a04c:	4605      	mov	r5, r0
    a04e:	460e      	mov	r6, r1
    a050:	4614      	mov	r4, r2
	if (ctl && net_buf_simple_tailroom(buf) < 8) {
    a052:	d111      	bne.n	a078 <net_header_encode+0x38>
    a054:	4610      	mov	r0, r2
    a056:	f013 fe68 	bl	1dd2a <net_buf_simple_tailroom>
    a05a:	2807      	cmp	r0, #7
    a05c:	d80c      	bhi.n	a078 <net_header_encode+0x38>
    a05e:	4922      	ldr	r1, [pc, #136]	; (a0e8 <net_header_encode+0xa8>)
    a060:	4b22      	ldr	r3, [pc, #136]	; (a0ec <net_header_encode+0xac>)
		BT_ERR("Insufficient MIC space for CTL PDU");
    a062:	4823      	ldr	r0, [pc, #140]	; (a0f0 <net_header_encode+0xb0>)
    a064:	1ac9      	subs	r1, r1, r3
    a066:	08c9      	lsrs	r1, r1, #3
    a068:	0189      	lsls	r1, r1, #6
    a06a:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Insufficient MIC space for PDU");
    a06e:	f00f f9e8 	bl	19442 <log_0>
		return -EINVAL;
    a072:	f06f 0015 	mvn.w	r0, #21
}
    a076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (net_buf_simple_tailroom(buf) < 4) {
    a078:	4620      	mov	r0, r4
    a07a:	f013 fe56 	bl	1dd2a <net_buf_simple_tailroom>
    a07e:	2803      	cmp	r0, #3
    a080:	d808      	bhi.n	a094 <net_header_encode+0x54>
    a082:	4919      	ldr	r1, [pc, #100]	; (a0e8 <net_header_encode+0xa8>)
    a084:	4b19      	ldr	r3, [pc, #100]	; (a0ec <net_header_encode+0xac>)
		BT_ERR("Insufficient MIC space for PDU");
    a086:	481b      	ldr	r0, [pc, #108]	; (a0f4 <net_header_encode+0xb4>)
    a088:	1ac9      	subs	r1, r1, r3
    a08a:	08c9      	lsrs	r1, r1, #3
    a08c:	0189      	lsls	r1, r1, #6
    a08e:	f041 0101 	orr.w	r1, r1, #1
    a092:	e7ec      	b.n	a06e <net_header_encode+0x2e>
	net_buf_simple_push_be16(buf, tx->ctx->addr);
    a094:	686b      	ldr	r3, [r5, #4]
    a096:	4620      	mov	r0, r4
    a098:	8899      	ldrh	r1, [r3, #4]
    a09a:	f013 fdea 	bl	1dc72 <net_buf_simple_push_be16>
	net_buf_simple_push_be16(buf, tx->src);
    a09e:	8929      	ldrh	r1, [r5, #8]
    a0a0:	4620      	mov	r0, r4
    a0a2:	f013 fde6 	bl	1dc72 <net_buf_simple_push_be16>
	net_buf_simple_push_be24(buf, bt_mesh_next_seq());
    a0a6:	f7ff ffa7 	bl	9ff8 <bt_mesh_next_seq>
    a0aa:	4601      	mov	r1, r0
    a0ac:	4620      	mov	r0, r4
    a0ae:	f013 fdf5 	bl	1dc9c <net_buf_simple_push_be24>
	if (ctl) {
    a0b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a0b6:	429f      	cmp	r7, r3
    a0b8:	686b      	ldr	r3, [r5, #4]
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl | 0x80);
    a0ba:	7ad9      	ldrb	r1, [r3, #11]
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl);
    a0bc:	4620      	mov	r0, r4
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl | 0x80);
    a0be:	bf08      	it	eq
    a0c0:	f041 0180 	orreq.w	r1, r1, #128	; 0x80
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl);
    a0c4:	f013 fde1 	bl	1dc8a <net_buf_simple_push_u8>
	net_buf_simple_push_u8(buf, (nid | (BT_MESH_NET_IVI_TX & 1) << 7));
    a0c8:	4b0b      	ldr	r3, [pc, #44]	; (a0f8 <net_header_encode+0xb8>)
    a0ca:	7819      	ldrb	r1, [r3, #0]
    a0cc:	f7ff fe72 	bl	9db4 <atomic_get.constprop.0>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    a0d0:	f3c0 0080 	ubfx	r0, r0, #2, #1
    a0d4:	1a09      	subs	r1, r1, r0
    a0d6:	ea46 11c1 	orr.w	r1, r6, r1, lsl #7
    a0da:	4620      	mov	r0, r4
    a0dc:	b2c9      	uxtb	r1, r1
    a0de:	f013 fdd4 	bl	1dc8a <net_buf_simple_push_u8>
	return 0;
    a0e2:	2000      	movs	r0, #0
    a0e4:	e7c7      	b.n	a076 <net_header_encode+0x36>
    a0e6:	bf00      	nop
    a0e8:	0001f0ac 	.word	0x0001f0ac
    a0ec:	0001ef2c 	.word	0x0001ef2c
    a0f0:	00021496 	.word	0x00021496
    a0f4:	000214b9 	.word	0x000214b9
    a0f8:	200011d8 	.word	0x200011d8

0000a0fc <bt_mesh_net_encode>:
{
    a0fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	tx->friend_cred = 0U;
    a100:	7ac3      	ldrb	r3, [r0, #11]
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    a102:	6807      	ldr	r7, [r0, #0]
	tx->friend_cred = 0U;
    a104:	f36f 0300 	bfc	r3, #0, #1
    a108:	72c3      	strb	r3, [r0, #11]
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    a10a:	7fbc      	ldrb	r4, [r7, #30]
    a10c:	1ea3      	subs	r3, r4, #2
    a10e:	425c      	negs	r4, r3
    a110:	415c      	adcs	r4, r3
{
    a112:	460d      	mov	r5, r1
	err = net_header_encode(tx, cred->nid, buf);
    a114:	215a      	movs	r1, #90	; 0x5a
    a116:	434c      	muls	r4, r1
    a118:	193b      	adds	r3, r7, r4
{
    a11a:	4616      	mov	r6, r2
	err = net_header_encode(tx, cred->nid, buf);
    a11c:	f893 103d 	ldrb.w	r1, [r3, #61]	; 0x3d
    a120:	462a      	mov	r2, r5
    a122:	f7ff ff8d 	bl	a040 <net_header_encode>
	if (err) {
    a126:	b970      	cbnz	r0, a146 <bt_mesh_net_encode+0x4a>
	return net_encrypt(buf, cred, BT_MESH_NET_IVI_TX, proxy);
    a128:	4b08      	ldr	r3, [pc, #32]	; (a14c <bt_mesh_net_encode+0x50>)
    a12a:	681a      	ldr	r2, [r3, #0]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    a12c:	f7ff fe42 	bl	9db4 <atomic_get.constprop.0>
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    a130:	343d      	adds	r4, #61	; 0x3d
	return net_encrypt(buf, cred, BT_MESH_NET_IVI_TX, proxy);
    a132:	f3c0 0080 	ubfx	r0, r0, #2, #1
    a136:	4633      	mov	r3, r6
    a138:	1a12      	subs	r2, r2, r0
    a13a:	1939      	adds	r1, r7, r4
    a13c:	4628      	mov	r0, r5
}
    a13e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return net_encrypt(buf, cred, BT_MESH_NET_IVI_TX, proxy);
    a142:	f011 bd74 	b.w	1bc2e <net_encrypt>
}
    a146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a14a:	bf00      	nop
    a14c:	200011d8 	.word	0x200011d8

0000a150 <bt_mesh_net_send>:
{
    a150:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a154:	461f      	mov	r7, r3
	tx->friend_cred = 0U;
    a156:	7ac3      	ldrb	r3, [r0, #11]
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    a158:	f8d0 a000 	ldr.w	sl, [r0]
	tx->friend_cred = 0U;
    a15c:	f36f 0300 	bfc	r3, #0, #1
    a160:	72c3      	strb	r3, [r0, #11]
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    a162:	f89a 901e 	ldrb.w	r9, [sl, #30]
    a166:	f1a9 0302 	sub.w	r3, r9, #2
    a16a:	f1d3 0900 	rsbs	r9, r3, #0
    a16e:	eb49 0903 	adc.w	r9, r9, r3
	err = net_header_encode(tx, cred->nid, &buf->b);
    a172:	235a      	movs	r3, #90	; 0x5a
    a174:	fb03 a309 	mla	r3, r3, r9, sl
    a178:	f101 0b08 	add.w	fp, r1, #8
{
    a17c:	460d      	mov	r5, r1
    a17e:	4616      	mov	r6, r2
	err = net_header_encode(tx, cred->nid, &buf->b);
    a180:	f893 103d 	ldrb.w	r1, [r3, #61]	; 0x3d
    a184:	465a      	mov	r2, fp
{
    a186:	4604      	mov	r4, r0
	err = net_header_encode(tx, cred->nid, &buf->b);
    a188:	f7ff ff5a 	bl	a040 <net_header_encode>
	if (err) {
    a18c:	2800      	cmp	r0, #0
    a18e:	f040 8084 	bne.w	a29a <bt_mesh_net_send+0x14a>
	if (bt_mesh_fixed_group_match(tx->ctx->addr) ||
    a192:	6863      	ldr	r3, [r4, #4]
    a194:	8898      	ldrh	r0, [r3, #4]
    a196:	f011 fcf7 	bl	1bb88 <bt_mesh_fixed_group_match>
    a19a:	2800      	cmp	r0, #0
    a19c:	d046      	beq.n	a22c <bt_mesh_net_send+0xdc>
		err = loopback(tx, buf->data, buf->len);
    a19e:	89ab      	ldrh	r3, [r5, #12]
    a1a0:	68a9      	ldr	r1, [r5, #8]
    a1a2:	9300      	str	r3, [sp, #0]
	return net_buf_alloc_fixed(pool, timeout);
    a1a4:	483e      	ldr	r0, [pc, #248]	; (a2a0 <bt_mesh_net_send+0x150>)
    a1a6:	9101      	str	r1, [sp, #4]
    a1a8:	2200      	movs	r2, #0
    a1aa:	2300      	movs	r3, #0
    a1ac:	f013 fca8 	bl	1db00 <net_buf_alloc_fixed>
	if (!buf) {
    a1b0:	9901      	ldr	r1, [sp, #4]
    a1b2:	4680      	mov	r8, r0
    a1b4:	2800      	cmp	r0, #0
    a1b6:	d146      	bne.n	a246 <bt_mesh_net_send+0xf6>
    a1b8:	4b3a      	ldr	r3, [pc, #232]	; (a2a4 <bt_mesh_net_send+0x154>)
    a1ba:	493b      	ldr	r1, [pc, #236]	; (a2a8 <bt_mesh_net_send+0x158>)
		BT_WARN("Unable to allocate loopback");
    a1bc:	483b      	ldr	r0, [pc, #236]	; (a2ac <bt_mesh_net_send+0x15c>)
    a1be:	1ac9      	subs	r1, r1, r3
    a1c0:	08c9      	lsrs	r1, r1, #3
    a1c2:	0189      	lsls	r1, r1, #6
    a1c4:	f041 0102 	orr.w	r1, r1, #2
    a1c8:	f00f f93b 	bl	19442 <log_0>
		return -ENOMEM;
    a1cc:	f06f 080b 	mvn.w	r8, #11
		if (BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr) ||
    a1d0:	6863      	ldr	r3, [r4, #4]
    a1d2:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
    a1d6:	2a00      	cmp	r2, #0
    a1d8:	dc45      	bgt.n	a266 <bt_mesh_net_send+0x116>
    a1da:	7adb      	ldrb	r3, [r3, #11]
    a1dc:	2b01      	cmp	r3, #1
    a1de:	d042      	beq.n	a266 <bt_mesh_net_send+0x116>
	err = net_encrypt(&buf->b, cred, BT_MESH_NET_IVI_TX, false);
    a1e0:	4b33      	ldr	r3, [pc, #204]	; (a2b0 <bt_mesh_net_send+0x160>)
    a1e2:	681a      	ldr	r2, [r3, #0]
    a1e4:	f7ff fde6 	bl	9db4 <atomic_get.constprop.0>
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    a1e8:	215a      	movs	r1, #90	; 0x5a
	err = net_encrypt(&buf->b, cred, BT_MESH_NET_IVI_TX, false);
    a1ea:	f3c0 0080 	ubfx	r0, r0, #2, #1
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    a1ee:	fb01 a109 	mla	r1, r1, r9, sl
	err = net_encrypt(&buf->b, cred, BT_MESH_NET_IVI_TX, false);
    a1f2:	1a12      	subs	r2, r2, r0
    a1f4:	2300      	movs	r3, #0
    a1f6:	313d      	adds	r1, #61	; 0x3d
    a1f8:	4658      	mov	r0, fp
    a1fa:	f011 fd18 	bl	1bc2e <net_encrypt>
	if (err) {
    a1fe:	4680      	mov	r8, r0
    a200:	2800      	cmp	r0, #0
    a202:	d136      	bne.n	a272 <bt_mesh_net_send+0x122>
	BT_MESH_ADV(buf)->cb = cb;
    a204:	696b      	ldr	r3, [r5, #20]
	BT_MESH_ADV(buf)->cb_data = cb_data;
    a206:	e9c3 6700 	strd	r6, r7, [r3]
	    bt_mesh_proxy_relay(buf, tx->ctx->addr) &&
    a20a:	6863      	ldr	r3, [r4, #4]
    a20c:	4628      	mov	r0, r5
    a20e:	8899      	ldrh	r1, [r3, #4]
    a210:	f003 fe96 	bl	df40 <bt_mesh_proxy_relay>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    a214:	b120      	cbz	r0, a220 <bt_mesh_net_send+0xd0>
	    BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr)) {
    a216:	6863      	ldr	r3, [r4, #4]
	    bt_mesh_proxy_relay(buf, tx->ctx->addr) &&
    a218:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    a21c:	2b00      	cmp	r3, #0
    a21e:	dc26      	bgt.n	a26e <bt_mesh_net_send+0x11e>
	bt_mesh_adv_send(buf, cb, cb_data);
    a220:	463a      	mov	r2, r7
    a222:	4631      	mov	r1, r6
    a224:	4628      	mov	r0, r5
    a226:	f7ff fad1 	bl	97cc <bt_mesh_adv_send>
    a22a:	e022      	b.n	a272 <bt_mesh_net_send+0x122>
	    bt_mesh_has_addr(tx->ctx->addr)) {
    a22c:	6863      	ldr	r3, [r4, #4]
    a22e:	8898      	ldrh	r0, [r3, #4]
    a230:	f002 fc80 	bl	cb34 <bt_mesh_has_addr>
	if (bt_mesh_fixed_group_match(tx->ctx->addr) ||
    a234:	2800      	cmp	r0, #0
    a236:	d1b2      	bne.n	a19e <bt_mesh_net_send+0x4e>
	if (tx->ctx->send_ttl == 1U) {
    a238:	6863      	ldr	r3, [r4, #4]
    a23a:	7adb      	ldrb	r3, [r3, #11]
    a23c:	2b01      	cmp	r3, #1
    a23e:	d1cf      	bne.n	a1e0 <bt_mesh_net_send+0x90>
		err = -EINVAL;
    a240:	f06f 0815 	mvn.w	r8, #21
    a244:	e015      	b.n	a272 <bt_mesh_net_send+0x122>
	LOOPBACK_BUF_SUB(buf) = tx->sub;
    a246:	6823      	ldr	r3, [r4, #0]
    a248:	6143      	str	r3, [r0, #20]
	return net_buf_simple_add_mem(&buf->b, mem, len);
    a24a:	9a00      	ldr	r2, [sp, #0]
    a24c:	3008      	adds	r0, #8
    a24e:	f013 fce2 	bl	1dc16 <net_buf_simple_add_mem>
	net_buf_slist_put(&bt_mesh.local_queue, buf);
    a252:	4641      	mov	r1, r8
    a254:	4817      	ldr	r0, [pc, #92]	; (a2b4 <bt_mesh_net_send+0x164>)
    a256:	f013 fc7c 	bl	1db52 <net_buf_slist_put>
	k_work_submit(&bt_mesh.local_work);
    a25a:	4817      	ldr	r0, [pc, #92]	; (a2b8 <bt_mesh_net_send+0x168>)
    a25c:	f00d fd68 	bl	17d30 <k_work_submit>
	return 0;
    a260:	f04f 0800 	mov.w	r8, #0
    a264:	e7b4      	b.n	a1d0 <bt_mesh_net_send+0x80>
			if (!err) {
    a266:	f1b8 0f00 	cmp.w	r8, #0
    a26a:	d102      	bne.n	a272 <bt_mesh_net_send+0x122>
void bt_mesh_net_settings_commit(void);

static inline void send_cb_finalize(const struct bt_mesh_send_cb *cb,
				    void *cb_data)
{
	if (!cb) {
    a26c:	b946      	cbnz	r6, a280 <bt_mesh_net_send+0x130>
	return 0;
    a26e:	f04f 0800 	mov.w	r8, #0
	net_buf_unref(buf);
    a272:	4628      	mov	r0, r5
    a274:	f00b fa98 	bl	157a8 <net_buf_unref>
}
    a278:	4640      	mov	r0, r8
    a27a:	b003      	add	sp, #12
    a27c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return;
	}

	if (cb->start) {
    a280:	6833      	ldr	r3, [r6, #0]
    a282:	b11b      	cbz	r3, a28c <bt_mesh_net_send+0x13c>
		cb->start(0, 0, cb_data);
    a284:	463a      	mov	r2, r7
    a286:	4641      	mov	r1, r8
    a288:	4640      	mov	r0, r8
    a28a:	4798      	blx	r3
	}

	if (cb->end) {
    a28c:	6873      	ldr	r3, [r6, #4]
    a28e:	2b00      	cmp	r3, #0
    a290:	d0ed      	beq.n	a26e <bt_mesh_net_send+0x11e>
		cb->end(0, cb_data);
    a292:	4639      	mov	r1, r7
    a294:	2000      	movs	r0, #0
    a296:	4798      	blx	r3
    a298:	e7eb      	b.n	a272 <bt_mesh_net_send+0x122>
    a29a:	4680      	mov	r8, r0
    a29c:	e7e9      	b.n	a272 <bt_mesh_net_send+0x122>
    a29e:	bf00      	nop
    a2a0:	20000d00 	.word	0x20000d00
    a2a4:	0001ef2c 	.word	0x0001ef2c
    a2a8:	0001f0ac 	.word	0x0001f0ac
    a2ac:	000214d8 	.word	0x000214d8
    a2b0:	200011d8 	.word	0x200011d8
    a2b4:	200011f4 	.word	0x200011f4
    a2b8:	200011e4 	.word	0x200011e4

0000a2bc <bt_mesh_net_decode>:
{
    a2bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a2c0:	460f      	mov	r7, r1
	if (in->len < BT_MESH_NET_MIN_PDU_LEN) {
    a2c2:	8881      	ldrh	r1, [r0, #4]
    a2c4:	2911      	cmp	r1, #17
{
    a2c6:	4606      	mov	r6, r0
    a2c8:	4614      	mov	r4, r2
    a2ca:	4698      	mov	r8, r3
	if (in->len < BT_MESH_NET_MIN_PDU_LEN) {
    a2cc:	d819      	bhi.n	a302 <bt_mesh_net_decode+0x46>
    a2ce:	4b55      	ldr	r3, [pc, #340]	; (a424 <bt_mesh_net_decode+0x168>)
    a2d0:	4c55      	ldr	r4, [pc, #340]	; (a428 <bt_mesh_net_decode+0x16c>)
		BT_WARN("Dropping too short mesh packet (len %u)", in->len);
    a2d2:	4856      	ldr	r0, [pc, #344]	; (a42c <bt_mesh_net_decode+0x170>)
    a2d4:	1ae4      	subs	r4, r4, r3
    a2d6:	08e4      	lsrs	r4, r4, #3
    a2d8:	01a4      	lsls	r4, r4, #6
    a2da:	f044 0402 	orr.w	r4, r4, #2
    a2de:	4622      	mov	r2, r4
    a2e0:	f00f f8bc 	bl	1945c <log_1>
		BT_WARN("%s", bt_hex(in->data, in->len));
    a2e4:	88b1      	ldrh	r1, [r6, #4]
    a2e6:	6830      	ldr	r0, [r6, #0]
    a2e8:	f7f9 fd12 	bl	3d10 <bt_hex_real>
    a2ec:	f7f8 fa06 	bl	26fc <z_log_strdup>
    a2f0:	4601      	mov	r1, r0
    a2f2:	484f      	ldr	r0, [pc, #316]	; (a430 <bt_mesh_net_decode+0x174>)
    a2f4:	4622      	mov	r2, r4
		BT_WARN("Dropping too long mesh packet (len %u)", in->len);
    a2f6:	f00f f8b1 	bl	1945c <log_1>
		return -EINVAL;
    a2fa:	f06f 0015 	mvn.w	r0, #21
}
    a2fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (in->len > BT_MESH_NET_MAX_PDU_LEN) {
    a302:	291d      	cmp	r1, #29
    a304:	d908      	bls.n	a318 <bt_mesh_net_decode+0x5c>
    a306:	4a48      	ldr	r2, [pc, #288]	; (a428 <bt_mesh_net_decode+0x16c>)
    a308:	4b46      	ldr	r3, [pc, #280]	; (a424 <bt_mesh_net_decode+0x168>)
		BT_WARN("Dropping too long mesh packet (len %u)", in->len);
    a30a:	484a      	ldr	r0, [pc, #296]	; (a434 <bt_mesh_net_decode+0x178>)
    a30c:	1ad2      	subs	r2, r2, r3
    a30e:	08d2      	lsrs	r2, r2, #3
    a310:	0192      	lsls	r2, r2, #6
    a312:	f042 0202 	orr.w	r2, r2, #2
    a316:	e7ee      	b.n	a2f6 <bt_mesh_net_decode+0x3a>
	if (net_if == BT_MESH_NET_IF_ADV && check_dup(in)) {
    a318:	bb97      	cbnz	r7, a380 <bt_mesh_net_decode+0xc4>
	return buf->data + buf->len;
    a31a:	6805      	ldr	r5, [r0, #0]
    a31c:	440d      	add	r5, r1
	return ((uint16_t)src[0] << 8) | src[1];
    a31e:	f815 1c07 	ldrb.w	r1, [r5, #-7]
    a322:	f815 3c08 	ldrb.w	r3, [r5, #-8]
    a326:	f815 2c06 	ldrb.w	r2, [r5, #-6]
    a32a:	f815 0c02 	ldrb.w	r0, [r5, #-2]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    a32e:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
	return ((uint16_t)src[0] << 8) | src[1];
    a332:	f815 1c05 	ldrb.w	r1, [r5, #-5]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    a336:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    a33a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
	return ((uint16_t)src[0] << 8) | src[1];
    a33e:	f815 2c04 	ldrb.w	r2, [r5, #-4]
    a342:	f815 3c03 	ldrb.w	r3, [r5, #-3]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    a346:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	return ((uint16_t)src[0] << 8) | src[1];
    a34a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    a34e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    a352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	val = sys_get_be32(tail - 4) ^ sys_get_be32(tail - 8);
    a356:	4059      	eors	r1, r3
	for (i = 0; i < ARRAY_SIZE(dup_cache); i++) {
    a358:	4b37      	ldr	r3, [pc, #220]	; (a438 <bt_mesh_net_decode+0x17c>)
    a35a:	463a      	mov	r2, r7
    a35c:	461d      	mov	r5, r3
		if (dup_cache[i] == val) {
    a35e:	f853 0b04 	ldr.w	r0, [r3], #4
    a362:	4281      	cmp	r1, r0
    a364:	d0c9      	beq.n	a2fa <bt_mesh_net_decode+0x3e>
	for (i = 0; i < ARRAY_SIZE(dup_cache); i++) {
    a366:	3201      	adds	r2, #1
    a368:	2a0a      	cmp	r2, #10
    a36a:	d1f8      	bne.n	a35e <bt_mesh_net_decode+0xa2>
	dup_cache[dup_cache_next++] = val;
    a36c:	4833      	ldr	r0, [pc, #204]	; (a43c <bt_mesh_net_decode+0x180>)
    a36e:	6803      	ldr	r3, [r0, #0]
    a370:	f845 1023 	str.w	r1, [r5, r3, lsl #2]
    a374:	3301      	adds	r3, #1
	dup_cache_next %= ARRAY_SIZE(dup_cache);
    a376:	fb93 f1f2 	sdiv	r1, r3, r2
    a37a:	fb02 3311 	mls	r3, r2, r1, r3
    a37e:	6003      	str	r3, [r0, #0]
	rx->net_if = net_if;
    a380:	7d23      	ldrb	r3, [r4, #20]
    a382:	f367 1305 	bfi	r3, r7, #4, #2
    a386:	7523      	strb	r3, [r4, #20]
	if (!bt_mesh_net_cred_find(rx, in, out, net_decrypt)) {
    a388:	4642      	mov	r2, r8
    a38a:	4b2d      	ldr	r3, [pc, #180]	; (a440 <bt_mesh_net_decode+0x184>)
    a38c:	4631      	mov	r1, r6
    a38e:	4620      	mov	r0, r4
    a390:	f000 fbae 	bl	aaf0 <bt_mesh_net_cred_find>
    a394:	2800      	cmp	r0, #0
    a396:	d041      	beq.n	a41c <bt_mesh_net_decode+0x160>
	rx->ctx.recv_ttl = TTL(out->data);
    a398:	f8d8 1000 	ldr.w	r1, [r8]
	rx->ctl = CTL(out->data);
    a39c:	7d22      	ldrb	r2, [r4, #20]
	rx->ctx.app_idx = BT_MESH_KEY_UNUSED;
    a39e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a3a2:	80e3      	strh	r3, [r4, #6]
	rx->ctx.recv_ttl = TTL(out->data);
    a3a4:	784b      	ldrb	r3, [r1, #1]
    a3a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a3aa:	7363      	strb	r3, [r4, #13]
	if (rx->ctx.recv_ttl == 0U) {
    a3ac:	3b00      	subs	r3, #0
    a3ae:	bf18      	it	ne
    a3b0:	2301      	movne	r3, #1
    a3b2:	425b      	negs	r3, r3
    a3b4:	73e3      	strb	r3, [r4, #15]
	rx->ctl = CTL(out->data);
    a3b6:	784b      	ldrb	r3, [r1, #1]
    a3b8:	09db      	lsrs	r3, r3, #7
    a3ba:	f363 02c3 	bfi	r2, r3, #3, #1
    a3be:	7522      	strb	r2, [r4, #20]
	rx->seq = SEQ(out->data);
    a3c0:	1c88      	adds	r0, r1, #2
    a3c2:	f011 fc2c 	bl	1bc1e <sys_get_be24>
    a3c6:	6120      	str	r0, [r4, #16]
	return ((uint16_t)src[0] << 8) | src[1];
    a3c8:	f8b1 3007 	ldrh.w	r3, [r1, #7]
	if (net_if != BT_MESH_NET_IF_PROXY_CFG &&
    a3cc:	2f03      	cmp	r7, #3
    a3ce:	ba5b      	rev16	r3, r3
    a3d0:	b29a      	uxth	r2, r3
	rx->ctx.recv_dst = DST(out->data);
    a3d2:	8163      	strh	r3, [r4, #10]
	if (net_if != BT_MESH_NET_IF_PROXY_CFG &&
    a3d4:	d00d      	beq.n	a3f2 <bt_mesh_net_decode+0x136>
    a3d6:	b962      	cbnz	r2, a3f2 <bt_mesh_net_decode+0x136>
    a3d8:	4b12      	ldr	r3, [pc, #72]	; (a424 <bt_mesh_net_decode+0x168>)
    a3da:	4913      	ldr	r1, [pc, #76]	; (a428 <bt_mesh_net_decode+0x16c>)
		BT_ERR("Destination address is unassigned; dropping packet");
    a3dc:	4819      	ldr	r0, [pc, #100]	; (a444 <bt_mesh_net_decode+0x188>)
    a3de:	1ac9      	subs	r1, r1, r3
    a3e0:	08c9      	lsrs	r1, r1, #3
    a3e2:	0189      	lsls	r1, r1, #6
    a3e4:	f041 0101 	orr.w	r1, r1, #1
    a3e8:	f00f f82b 	bl	19442 <log_0>
		return -EBADMSG;
    a3ec:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    a3f0:	e785      	b.n	a2fe <bt_mesh_net_decode+0x42>
	msg_cache[rx->msg_cache_idx].src = rx->ctx.addr;
    a3f2:	8922      	ldrh	r2, [r4, #8]
	rx->msg_cache_idx = msg_cache_next++;
    a3f4:	4914      	ldr	r1, [pc, #80]	; (a448 <bt_mesh_net_decode+0x18c>)
	msg_cache[rx->msg_cache_idx].src = rx->ctx.addr;
    a3f6:	f3c2 020e 	ubfx	r2, r2, #0, #15
	rx->msg_cache_idx = msg_cache_next++;
    a3fa:	880b      	ldrh	r3, [r1, #0]
    a3fc:	82e3      	strh	r3, [r4, #22]
	msg_cache[rx->msg_cache_idx].src = rx->ctx.addr;
    a3fe:	ea42 30c0 	orr.w	r0, r2, r0, lsl #15
    a402:	4a12      	ldr	r2, [pc, #72]	; (a44c <bt_mesh_net_decode+0x190>)
    a404:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	rx->msg_cache_idx = msg_cache_next++;
    a408:	3301      	adds	r3, #1
	msg_cache_next %= ARRAY_SIZE(msg_cache);
    a40a:	b29b      	uxth	r3, r3
    a40c:	220a      	movs	r2, #10
    a40e:	fbb3 f0f2 	udiv	r0, r3, r2
    a412:	fb02 3310 	mls	r3, r2, r0, r3
    a416:	800b      	strh	r3, [r1, #0]
	return 0;
    a418:	2000      	movs	r0, #0
}
    a41a:	e770      	b.n	a2fe <bt_mesh_net_decode+0x42>
		return -ENOENT;
    a41c:	f06f 0001 	mvn.w	r0, #1
    a420:	e76d      	b.n	a2fe <bt_mesh_net_decode+0x42>
    a422:	bf00      	nop
    a424:	0001ef2c 	.word	0x0001ef2c
    a428:	0001f0ac 	.word	0x0001f0ac
    a42c:	000214f4 	.word	0x000214f4
    a430:	00020681 	.word	0x00020681
    a434:	0002151c 	.word	0x0002151c
    a438:	20001b60 	.word	0x20001b60
    a43c:	20001b88 	.word	0x20001b88
    a440:	00009bfd 	.word	0x00009bfd
    a444:	00021543 	.word	0x00021543
    a448:	20002e20 	.word	0x20002e20
    a44c:	20001b8c 	.word	0x20001b8c

0000a450 <bt_mesh_net_recv>:
{
    a450:	b5f0      	push	{r4, r5, r6, r7, lr}
    a452:	b093      	sub	sp, #76	; 0x4c
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_NET_MAX_PDU_LEN);
    a454:	ab0a      	add	r3, sp, #40	; 0x28
{
    a456:	4617      	mov	r7, r2
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_NET_MAX_PDU_LEN);
    a458:	f44f 12e8 	mov.w	r2, #1900544	; 0x1d0000
    a45c:	e9cd 2302 	strd	r2, r3, [sp, #8]
{
    a460:	460c      	mov	r4, r1
    a462:	4606      	mov	r6, r0
	struct bt_mesh_net_rx rx = { .ctx.recv_rssi = rssi };
    a464:	2218      	movs	r2, #24
    a466:	2100      	movs	r1, #0
    a468:	a804      	add	r0, sp, #16
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_NET_MAX_PDU_LEN);
    a46a:	9301      	str	r3, [sp, #4]
	struct bt_mesh_net_rx rx = { .ctx.recv_rssi = rssi };
    a46c:	f00f ff12 	bl	1a294 <memset>
    a470:	f88d 401c 	strb.w	r4, [sp, #28]
	if (!bt_mesh_is_provisioned()) {
    a474:	f7fe ff7a 	bl	936c <bt_mesh_is_provisioned>
    a478:	2800      	cmp	r0, #0
    a47a:	d07c      	beq.n	a576 <bt_mesh_net_recv+0x126>
	if (bt_mesh_net_decode(data, net_if, &rx, &buf)) {
    a47c:	ab01      	add	r3, sp, #4
    a47e:	aa04      	add	r2, sp, #16
    a480:	4639      	mov	r1, r7
    a482:	4630      	mov	r0, r6
    a484:	f7ff ff1a 	bl	a2bc <bt_mesh_net_decode>
    a488:	2800      	cmp	r0, #0
    a48a:	d174      	bne.n	a576 <bt_mesh_net_recv+0x126>
	state->offset = net_buf_simple_headroom(buf);
    a48c:	a801      	add	r0, sp, #4
    a48e:	f013 fc48 	bl	1dd22 <net_buf_simple_headroom>
    a492:	4604      	mov	r4, r0
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    a494:	f8bd 001a 	ldrh.w	r0, [sp, #26]
	state->len = buf->len;
    a498:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    a49c:	f011 fb74 	bl	1bb88 <bt_mesh_fixed_group_match>
    a4a0:	bb20      	cbnz	r0, a4ec <bt_mesh_net_recv+0x9c>
			  bt_mesh_has_addr(rx.ctx.recv_dst));
    a4a2:	f8bd 001a 	ldrh.w	r0, [sp, #26]
    a4a6:	f002 fb45 	bl	cb34 <bt_mesh_has_addr>
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    a4aa:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    a4ae:	2f02      	cmp	r7, #2
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    a4b0:	f360 1386 	bfi	r3, r0, #6, #1
    a4b4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    a4b8:	d11a      	bne.n	a4f0 <bt_mesh_net_recv+0xa0>
		bt_mesh_proxy_addr_add(data, rx.ctx.addr);
    a4ba:	f8bd 1018 	ldrh.w	r1, [sp, #24]
    a4be:	4630      	mov	r0, r6
    a4c0:	f012 f8c1 	bl	1c646 <bt_mesh_proxy_addr_add>
		if (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_DISABLED &&
    a4c4:	f7ff f808 	bl	94d8 <bt_mesh_gatt_proxy_get>
		    !rx.local_match) {
    a4c8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    a4cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_DISABLED &&
    a4d0:	4318      	orrs	r0, r3
    a4d2:	b2c0      	uxtb	r0, r0
    a4d4:	b960      	cbnz	r0, a4f0 <bt_mesh_net_recv+0xa0>
    a4d6:	496b      	ldr	r1, [pc, #428]	; (a684 <bt_mesh_net_recv+0x234>)
    a4d8:	4b6b      	ldr	r3, [pc, #428]	; (a688 <bt_mesh_net_recv+0x238>)
			BT_INFO("Proxy is disabled; ignoring message");
    a4da:	486c      	ldr	r0, [pc, #432]	; (a68c <bt_mesh_net_recv+0x23c>)
    a4dc:	1ac9      	subs	r1, r1, r3
    a4de:	08c9      	lsrs	r1, r1, #3
    a4e0:	0189      	lsls	r1, r1, #6
    a4e2:	f041 0103 	orr.w	r1, r1, #3
		BT_ERR("Out of relay buffers");
    a4e6:	f00e ffac 	bl	19442 <log_0>
		return;
    a4ea:	e044      	b.n	a576 <bt_mesh_net_recv+0x126>
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    a4ec:	2001      	movs	r0, #1
    a4ee:	e7dc      	b.n	a4aa <bt_mesh_net_recv+0x5a>
	if (bt_mesh_trans_recv(&buf, &rx) == -EAGAIN) {
    a4f0:	a904      	add	r1, sp, #16
    a4f2:	a801      	add	r0, sp, #4
    a4f4:	f001 fa4c 	bl	b990 <bt_mesh_trans_recv>
    a4f8:	300b      	adds	r0, #11
    a4fa:	d114      	bne.n	a526 <bt_mesh_net_recv+0xd6>
    a4fc:	4b62      	ldr	r3, [pc, #392]	; (a688 <bt_mesh_net_recv+0x238>)
    a4fe:	4961      	ldr	r1, [pc, #388]	; (a684 <bt_mesh_net_recv+0x234>)
		BT_WARN("Removing rejected message from Network Message Cache");
    a500:	4863      	ldr	r0, [pc, #396]	; (a690 <bt_mesh_net_recv+0x240>)
    a502:	1ac9      	subs	r1, r1, r3
    a504:	08c9      	lsrs	r1, r1, #3
    a506:	0189      	lsls	r1, r1, #6
    a508:	f041 0102 	orr.w	r1, r1, #2
    a50c:	f00e ff99 	bl	19442 <log_0>
		msg_cache[rx.msg_cache_idx].src = BT_MESH_ADDR_UNASSIGNED;
    a510:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
    a514:	4a5f      	ldr	r2, [pc, #380]	; (a694 <bt_mesh_net_recv+0x244>)
    a516:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
    a51a:	f36f 010e 	bfc	r1, #0, #15
    a51e:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		msg_cache_next = rx.msg_cache_idx;
    a522:	4a5d      	ldr	r2, [pc, #372]	; (a698 <bt_mesh_net_recv+0x248>)
    a524:	8013      	strh	r3, [r2, #0]
	if (!BT_MESH_ADDR_IS_UNICAST(rx.ctx.recv_dst) ||
    a526:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
    a52a:	2b00      	cmp	r3, #0
    a52c:	dd04      	ble.n	a538 <bt_mesh_net_recv+0xe8>
	    (!rx.local_match && !rx.friend_match)) {
    a52e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	if (!BT_MESH_ADDR_IS_UNICAST(rx.ctx.recv_dst) ||
    a532:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    a536:	d11e      	bne.n	a576 <bt_mesh_net_recv+0x126>
	buf->data = buf->__buf + state->offset;
    a538:	9803      	ldr	r0, [sp, #12]
	if (rx->ctx.recv_ttl <= 1U) {
    a53a:	f89d 301d 	ldrb.w	r3, [sp, #29]
	buf->len = state->len;
    a53e:	f8ad 5008 	strh.w	r5, [sp, #8]
	buf->data = buf->__buf + state->offset;
    a542:	fa10 f484 	uxtah	r4, r0, r4
    a546:	2b01      	cmp	r3, #1
    a548:	9401      	str	r4, [sp, #4]
    a54a:	d914      	bls.n	a576 <bt_mesh_net_recv+0x126>
	if (rx->net_if == BT_MESH_NET_IF_ADV &&
    a54c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    a550:	f013 0f34 	tst.w	r3, #52	; 0x34
    a554:	d108      	bne.n	a568 <bt_mesh_net_recv+0x118>
	    bt_mesh_relay_get() != BT_MESH_RELAY_ENABLED &&
    a556:	f7ff f871 	bl	963c <bt_mesh_relay_get>
	    !rx->friend_cred &&
    a55a:	2801      	cmp	r0, #1
    a55c:	d107      	bne.n	a56e <bt_mesh_net_recv+0x11e>
	if (rx->net_if == BT_MESH_NET_IF_ADV && !rx->friend_cred) {
    a55e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    a562:	f013 0f34 	tst.w	r3, #52	; 0x34
    a566:	d008      	beq.n	a57a <bt_mesh_net_recv+0x12a>
		transmit = bt_mesh_net_transmit_get();
    a568:	f7fe fffa 	bl	9560 <bt_mesh_net_transmit_get>
    a56c:	e007      	b.n	a57e <bt_mesh_net_recv+0x12e>
	    bt_mesh_gatt_proxy_get() != BT_MESH_GATT_PROXY_ENABLED) {
    a56e:	f7fe ffb3 	bl	94d8 <bt_mesh_gatt_proxy_get>
	    bt_mesh_relay_get() != BT_MESH_RELAY_ENABLED &&
    a572:	2801      	cmp	r0, #1
    a574:	d0f3      	beq.n	a55e <bt_mesh_net_recv+0x10e>
}
    a576:	b013      	add	sp, #76	; 0x4c
    a578:	bdf0      	pop	{r4, r5, r6, r7, pc}
		transmit = bt_mesh_relay_retransmit_get();
    a57a:	f7ff f869 	bl	9650 <bt_mesh_relay_retransmit_get>
		transmit = bt_mesh_net_transmit_get();
    a57e:	4601      	mov	r1, r0
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, transmit, K_NO_WAIT);
    a580:	2200      	movs	r2, #0
    a582:	2300      	movs	r3, #0
    a584:	2001      	movs	r0, #1
    a586:	f7ff f911 	bl	97ac <bt_mesh_adv_create>
	if (!buf) {
    a58a:	4604      	mov	r4, r0
    a58c:	b940      	cbnz	r0, a5a0 <bt_mesh_net_recv+0x150>
    a58e:	493d      	ldr	r1, [pc, #244]	; (a684 <bt_mesh_net_recv+0x234>)
    a590:	4b3d      	ldr	r3, [pc, #244]	; (a688 <bt_mesh_net_recv+0x238>)
		BT_ERR("Out of relay buffers");
    a592:	4842      	ldr	r0, [pc, #264]	; (a69c <bt_mesh_net_recv+0x24c>)
    a594:	1ac9      	subs	r1, r1, r3
    a596:	08c9      	lsrs	r1, r1, #3
    a598:	0189      	lsls	r1, r1, #6
    a59a:	f041 0101 	orr.w	r1, r1, #1
    a59e:	e7a2      	b.n	a4e6 <bt_mesh_net_recv+0x96>
	sbuf->data[1] &= 0x80;
    a5a0:	9a01      	ldr	r2, [sp, #4]
    a5a2:	7853      	ldrb	r3, [r2, #1]
    a5a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    a5a8:	7053      	strb	r3, [r2, #1]
	sbuf->data[1] |= rx->ctx.recv_ttl - 1U;
    a5aa:	9a01      	ldr	r2, [sp, #4]
    a5ac:	f89d 301d 	ldrb.w	r3, [sp, #29]
    a5b0:	7851      	ldrb	r1, [r2, #1]
    a5b2:	3b01      	subs	r3, #1
    a5b4:	430b      	orrs	r3, r1
    a5b6:	7053      	strb	r3, [r2, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
    a5b8:	f100 0508 	add.w	r5, r0, #8
    a5bc:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    a5c0:	9901      	ldr	r1, [sp, #4]
    a5c2:	4628      	mov	r0, r5
    a5c4:	f013 fb27 	bl	1dc16 <net_buf_simple_add_mem>
	cred = &rx->sub->keys[SUBNET_KEY_TX_IDX(rx->sub)].msg;
    a5c8:	9a04      	ldr	r2, [sp, #16]
	if (rx->friend_cred) {
    a5ca:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
	cred = &rx->sub->keys[SUBNET_KEY_TX_IDX(rx->sub)].msg;
    a5ce:	7f93      	ldrb	r3, [r2, #30]
    a5d0:	1e99      	subs	r1, r3, #2
    a5d2:	424b      	negs	r3, r1
    a5d4:	414b      	adcs	r3, r1
    a5d6:	215a      	movs	r1, #90	; 0x5a
    a5d8:	434b      	muls	r3, r1
    a5da:	f103 013d 	add.w	r1, r3, #61	; 0x3d
	if (rx->friend_cred) {
    a5de:	0740      	lsls	r0, r0, #29
	cred = &rx->sub->keys[SUBNET_KEY_TX_IDX(rx->sub)].msg;
    a5e0:	4411      	add	r1, r2
	if (rx->friend_cred) {
    a5e2:	d50b      	bpl.n	a5fc <bt_mesh_net_recv+0x1ac>
		buf->data[0] &= 0x80; /* Clear everything except IVI */
    a5e4:	68a6      	ldr	r6, [r4, #8]
    a5e6:	7830      	ldrb	r0, [r6, #0]
    a5e8:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
    a5ec:	7030      	strb	r0, [r6, #0]
		buf->data[0] |= cred->nid;
    a5ee:	68a0      	ldr	r0, [r4, #8]
    a5f0:	4413      	add	r3, r2
    a5f2:	7802      	ldrb	r2, [r0, #0]
    a5f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    a5f8:	4313      	orrs	r3, r2
    a5fa:	7003      	strb	r3, [r0, #0]
	if (net_encrypt(&buf->b, cred, BT_MESH_NET_IVI_RX(rx), false)) {
    a5fc:	4b28      	ldr	r3, [pc, #160]	; (a6a0 <bt_mesh_net_recv+0x250>)
    a5fe:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
    a602:	6818      	ldr	r0, [r3, #0]
    a604:	f002 0201 	and.w	r2, r2, #1
    a608:	1a82      	subs	r2, r0, r2
    a60a:	2300      	movs	r3, #0
    a60c:	4628      	mov	r0, r5
    a60e:	f011 fb0e 	bl	1bc2e <net_encrypt>
    a612:	b168      	cbz	r0, a630 <bt_mesh_net_recv+0x1e0>
    a614:	491b      	ldr	r1, [pc, #108]	; (a684 <bt_mesh_net_recv+0x234>)
    a616:	4b1c      	ldr	r3, [pc, #112]	; (a688 <bt_mesh_net_recv+0x238>)
		BT_ERR("Re-encrypting failed");
    a618:	4822      	ldr	r0, [pc, #136]	; (a6a4 <bt_mesh_net_recv+0x254>)
    a61a:	1ac9      	subs	r1, r1, r3
    a61c:	08c9      	lsrs	r1, r1, #3
    a61e:	0189      	lsls	r1, r1, #6
    a620:	f041 0101 	orr.w	r1, r1, #1
    a624:	f00e ff0d 	bl	19442 <log_0>
	net_buf_unref(buf);
    a628:	4620      	mov	r0, r4
    a62a:	f00b f8bd 	bl	157a8 <net_buf_unref>
    a62e:	e7a2      	b.n	a576 <bt_mesh_net_recv+0x126>
	    (rx->friend_cred ||
    a630:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    a634:	075a      	lsls	r2, r3, #29
    a636:	d512      	bpl.n	a65e <bt_mesh_net_recv+0x20e>
		bt_mesh_proxy_relay(buf, rx->ctx.recv_dst);
    a638:	f8bd 101a 	ldrh.w	r1, [sp, #26]
    a63c:	4620      	mov	r0, r4
    a63e:	f003 fc7f 	bl	df40 <bt_mesh_proxy_relay>
	if (relay_to_adv(rx->net_if) || rx->friend_cred) {
    a642:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	switch (net_if) {
    a646:	f013 0f30 	tst.w	r3, #48	; 0x30
	if (relay_to_adv(rx->net_if) || rx->friend_cred) {
    a64a:	f3c3 1201 	ubfx	r2, r3, #4, #2
	switch (net_if) {
    a64e:	d00b      	beq.n	a668 <bt_mesh_net_recv+0x218>
    a650:	2a02      	cmp	r2, #2
    a652:	d013      	beq.n	a67c <bt_mesh_net_recv+0x22c>
	if (relay_to_adv(rx->net_if) || rx->friend_cred) {
    a654:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    a658:	075b      	lsls	r3, r3, #29
    a65a:	d409      	bmi.n	a670 <bt_mesh_net_recv+0x220>
done:
    a65c:	e7e4      	b.n	a628 <bt_mesh_net_recv+0x1d8>
	     bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED)) {
    a65e:	f7fe ff3b 	bl	94d8 <bt_mesh_gatt_proxy_get>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    a662:	2801      	cmp	r0, #1
    a664:	d1ed      	bne.n	a642 <bt_mesh_net_recv+0x1f2>
    a666:	e7e7      	b.n	a638 <bt_mesh_net_recv+0x1e8>
		return (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED);
    a668:	f7fe ffe8 	bl	963c <bt_mesh_relay_get>
	if (relay_to_adv(rx->net_if) || rx->friend_cred) {
    a66c:	2801      	cmp	r0, #1
    a66e:	d1f1      	bne.n	a654 <bt_mesh_net_recv+0x204>
		bt_mesh_adv_send(buf, NULL, NULL);
    a670:	2200      	movs	r2, #0
    a672:	4611      	mov	r1, r2
    a674:	4620      	mov	r0, r4
    a676:	f7ff f8a9 	bl	97cc <bt_mesh_adv_send>
    a67a:	e7d5      	b.n	a628 <bt_mesh_net_recv+0x1d8>
		return (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
    a67c:	f7fe ff2c 	bl	94d8 <bt_mesh_gatt_proxy_get>
    a680:	e7f4      	b.n	a66c <bt_mesh_net_recv+0x21c>
    a682:	bf00      	nop
    a684:	0001f0ac 	.word	0x0001f0ac
    a688:	0001ef2c 	.word	0x0001ef2c
    a68c:	00021576 	.word	0x00021576
    a690:	0002159a 	.word	0x0002159a
    a694:	20001b8c 	.word	0x20001b8c
    a698:	20002e20 	.word	0x20002e20
    a69c:	000215cf 	.word	0x000215cf
    a6a0:	200011d8 	.word	0x200011d8
    a6a4:	000215e4 	.word	0x000215e4

0000a6a8 <bt_mesh_net_settings_commit>:
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_SEQ_PENDING);
}

void bt_mesh_net_settings_commit(void)
{
	if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
    a6a8:	4805      	ldr	r0, [pc, #20]	; (a6c0 <bt_mesh_net_settings_commit+0x18>)
    a6aa:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    a6ae:	2b5f      	cmp	r3, #95	; 0x5f
    a6b0:	d804      	bhi.n	a6bc <bt_mesh_net_settings_commit+0x14>
		k_work_reschedule(&bt_mesh.ivu_timer, BT_MESH_IVU_TIMEOUT);
    a6b2:	4a04      	ldr	r2, [pc, #16]	; (a6c4 <bt_mesh_net_settings_commit+0x1c>)
    a6b4:	2300      	movs	r3, #0
    a6b6:	3028      	adds	r0, #40	; 0x28
    a6b8:	f00d bbd6 	b.w	17e68 <k_work_reschedule>
	}
}
    a6bc:	4770      	bx	lr
    a6be:	bf00      	nop
    a6c0:	200011d8 	.word	0x200011d8
    a6c4:	a8c00000 	.word	0xa8c00000

0000a6c8 <subnet_evt>:
		.net_idx = BT_MESH_KEY_UNUSED,
	},
};

static void subnet_evt(struct bt_mesh_subnet *sub, enum bt_mesh_key_evt evt)
{
    a6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_mesh_subnet_cb, cb) {
    a6ca:	4c06      	ldr	r4, [pc, #24]	; (a6e4 <subnet_evt+0x1c>)
    a6cc:	4f06      	ldr	r7, [pc, #24]	; (a6e8 <subnet_evt+0x20>)
{
    a6ce:	4605      	mov	r5, r0
    a6d0:	460e      	mov	r6, r1
	STRUCT_SECTION_FOREACH(bt_mesh_subnet_cb, cb) {
    a6d2:	42bc      	cmp	r4, r7
    a6d4:	d300      	bcc.n	a6d8 <subnet_evt+0x10>
		cb->evt_handler(sub, evt);
	}
}
    a6d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb->evt_handler(sub, evt);
    a6d8:	f854 3b04 	ldr.w	r3, [r4], #4
    a6dc:	4631      	mov	r1, r6
    a6de:	4628      	mov	r0, r5
    a6e0:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_mesh_subnet_cb, cb) {
    a6e2:	e7f6      	b.n	a6d2 <subnet_evt+0xa>
    a6e4:	0001edc8 	.word	0x0001edc8
    a6e8:	0001edd4 	.word	0x0001edd4

0000a6ec <subnet_alloc>:
{
	struct bt_mesh_subnet *sub = NULL;

	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
		/* Check for already existing subnet */
		if (subnets[i].net_idx == net_idx) {
    a6ec:	4b0e      	ldr	r3, [pc, #56]	; (a728 <subnet_alloc+0x3c>)
{
    a6ee:	b510      	push	{r4, lr}
		if (subnets[i].net_idx == net_idx) {
    a6f0:	8b9c      	ldrh	r4, [r3, #28]
    a6f2:	42a0      	cmp	r0, r4
{
    a6f4:	4602      	mov	r2, r0
		if (subnets[i].net_idx == net_idx) {
    a6f6:	d00f      	beq.n	a718 <subnet_alloc+0x2c>
			return &subnets[i];
		}

		if (!sub && subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    a6f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
			sub = &subnets[i];
    a6fc:	428c      	cmp	r4, r1
    a6fe:	bf0c      	ite	eq
    a700:	4618      	moveq	r0, r3
    a702:	2000      	movne	r0, #0
		if (subnets[i].net_idx == net_idx) {
    a704:	f8b3 40fc 	ldrh.w	r4, [r3, #252]	; 0xfc
    a708:	42a2      	cmp	r2, r4
    a70a:	d00a      	beq.n	a722 <subnet_alloc+0x36>
		if (!sub && subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    a70c:	b918      	cbnz	r0, a716 <subnet_alloc+0x2a>
			sub = &subnets[i];
    a70e:	33e0      	adds	r3, #224	; 0xe0
    a710:	428c      	cmp	r4, r1
    a712:	bf08      	it	eq
    a714:	4618      	moveq	r0, r3
		}
	}

	return sub;
}
    a716:	bd10      	pop	{r4, pc}
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
    a718:	2000      	movs	r0, #0
			return &subnets[i];
    a71a:	22e0      	movs	r2, #224	; 0xe0
    a71c:	fb02 3000 	mla	r0, r2, r0, r3
    a720:	e7f9      	b.n	a716 <subnet_alloc+0x2a>
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
    a722:	2001      	movs	r0, #1
    a724:	e7f9      	b.n	a71a <subnet_alloc+0x2e>
    a726:	bf00      	nop
    a728:	20000310 	.word	0x20000310

0000a72c <clear_net_key>:
{
    a72c:	b510      	push	{r4, lr}
    a72e:	b086      	sub	sp, #24
	snprintk(path, sizeof(path), "bt/mesh/NetKey/%x", net_idx);
    a730:	4603      	mov	r3, r0
    a732:	4a0b      	ldr	r2, [pc, #44]	; (a760 <clear_net_key+0x34>)
{
    a734:	4604      	mov	r4, r0
	snprintk(path, sizeof(path), "bt/mesh/NetKey/%x", net_idx);
    a736:	2114      	movs	r1, #20
    a738:	a801      	add	r0, sp, #4
    a73a:	f00e fa50 	bl	18bde <snprintk>
	err = settings_delete(path);
    a73e:	a801      	add	r0, sp, #4
    a740:	f00f f9db 	bl	19afa <settings_delete>
	if (err) {
    a744:	b150      	cbz	r0, a75c <clear_net_key+0x30>
    a746:	4a07      	ldr	r2, [pc, #28]	; (a764 <clear_net_key+0x38>)
    a748:	4b07      	ldr	r3, [pc, #28]	; (a768 <clear_net_key+0x3c>)
		BT_ERR("Failed to clear NetKeyIndex 0x%03x", net_idx);
    a74a:	4808      	ldr	r0, [pc, #32]	; (a76c <clear_net_key+0x40>)
    a74c:	1ad2      	subs	r2, r2, r3
    a74e:	08d2      	lsrs	r2, r2, #3
    a750:	0192      	lsls	r2, r2, #6
    a752:	f042 0201 	orr.w	r2, r2, #1
    a756:	4621      	mov	r1, r4
    a758:	f00e fe80 	bl	1945c <log_1>
}
    a75c:	b006      	add	sp, #24
    a75e:	bd10      	pop	{r4, pc}
    a760:	000216bd 	.word	0x000216bd
    a764:	0001f0b4 	.word	0x0001f0b4
    a768:	0001ef2c 	.word	0x0001ef2c
    a76c:	000216cf 	.word	0x000216cf

0000a770 <net_keys_create>:
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
}

static int net_keys_create(struct bt_mesh_subnet_keys *keys,
			   const uint8_t key[16])
{
    a770:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t p = 0;
    a772:	2300      	movs	r3, #0
    a774:	f88d 300f 	strb.w	r3, [sp, #15]
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
    a778:	f100 0322 	add.w	r3, r0, #34	; 0x22
{
    a77c:	460e      	mov	r6, r1
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
    a77e:	9301      	str	r3, [sp, #4]
    a780:	f100 0312 	add.w	r3, r0, #18
    a784:	9300      	str	r3, [sp, #0]
{
    a786:	4605      	mov	r5, r0
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
    a788:	f100 0311 	add.w	r3, r0, #17
    a78c:	2201      	movs	r2, #1
    a78e:	f10d 010f 	add.w	r1, sp, #15
    a792:	4630      	mov	r0, r6
    a794:	f001 fec8 	bl	c528 <bt_mesh_k2>
	int err;

	err = msg_cred_create(&keys->msg, &p, 1, key);
	if (err) {
    a798:	4604      	mov	r4, r0
    a79a:	b160      	cbz	r0, a7b6 <net_keys_create+0x46>
    a79c:	4923      	ldr	r1, [pc, #140]	; (a82c <net_keys_create+0xbc>)
    a79e:	4b24      	ldr	r3, [pc, #144]	; (a830 <net_keys_create+0xc0>)
		BT_ERR("Unable to generate NID, EncKey & PrivacyKey");
    a7a0:	4824      	ldr	r0, [pc, #144]	; (a834 <net_keys_create+0xc4>)
    a7a2:	1ac9      	subs	r1, r1, r3
    a7a4:	08c9      	lsrs	r1, r1, #3
    a7a6:	0189      	lsls	r1, r1, #6
    a7a8:	f041 0101 	orr.w	r1, r1, #1
	BT_DBG("IdentityKey %s", bt_hex(keys->identity, 16));
#endif /* GATT_PROXY */

	err = bt_mesh_beacon_key(key, keys->beacon);
	if (err) {
		BT_ERR("Unable to generate beacon key");
    a7ac:	f00e fe49 	bl	19442 <log_0>
	BT_DBG("BeaconKey %s", bt_hex(keys->beacon, 16));

	keys->valid = 1U;

	return 0;
}
    a7b0:	4620      	mov	r0, r4
    a7b2:	b004      	add	sp, #16
    a7b4:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(keys->net, key, 16);
    a7b6:	2210      	movs	r2, #16
    a7b8:	4631      	mov	r1, r6
    a7ba:	1c68      	adds	r0, r5, #1
    a7bc:	f00f fd5f 	bl	1a27e <memcpy>
	err = bt_mesh_k3(key, keys->net_id);
    a7c0:	f105 0132 	add.w	r1, r5, #50	; 0x32
    a7c4:	4630      	mov	r0, r6
    a7c6:	f001 ff07 	bl	c5d8 <bt_mesh_k3>
	if (err) {
    a7ca:	4604      	mov	r4, r0
    a7cc:	b140      	cbz	r0, a7e0 <net_keys_create+0x70>
    a7ce:	4917      	ldr	r1, [pc, #92]	; (a82c <net_keys_create+0xbc>)
    a7d0:	4b17      	ldr	r3, [pc, #92]	; (a830 <net_keys_create+0xc0>)
		BT_ERR("Unable to generate Net ID");
    a7d2:	4819      	ldr	r0, [pc, #100]	; (a838 <net_keys_create+0xc8>)
    a7d4:	1ac9      	subs	r1, r1, r3
    a7d6:	08c9      	lsrs	r1, r1, #3
    a7d8:	0189      	lsls	r1, r1, #6
    a7da:	f041 0101 	orr.w	r1, r1, #1
    a7de:	e7e5      	b.n	a7ac <net_keys_create+0x3c>
}

static inline int bt_mesh_identity_key(const uint8_t net_key[16],
				       uint8_t identity_key[16])
{
	return bt_mesh_id128(net_key, "nkik", identity_key);
    a7e0:	4916      	ldr	r1, [pc, #88]	; (a83c <net_keys_create+0xcc>)
    a7e2:	f105 023a 	add.w	r2, r5, #58	; 0x3a
    a7e6:	4630      	mov	r0, r6
    a7e8:	f001 ff4c 	bl	c684 <bt_mesh_id128>
	if (err) {
    a7ec:	4604      	mov	r4, r0
    a7ee:	b140      	cbz	r0, a802 <net_keys_create+0x92>
    a7f0:	490e      	ldr	r1, [pc, #56]	; (a82c <net_keys_create+0xbc>)
    a7f2:	4b0f      	ldr	r3, [pc, #60]	; (a830 <net_keys_create+0xc0>)
		BT_ERR("Unable to generate IdentityKey");
    a7f4:	4812      	ldr	r0, [pc, #72]	; (a840 <net_keys_create+0xd0>)
    a7f6:	1ac9      	subs	r1, r1, r3
    a7f8:	08c9      	lsrs	r1, r1, #3
    a7fa:	0189      	lsls	r1, r1, #6
    a7fc:	f041 0101 	orr.w	r1, r1, #1
    a800:	e7d4      	b.n	a7ac <net_keys_create+0x3c>
}

static inline int bt_mesh_beacon_key(const uint8_t net_key[16],
				     uint8_t beacon_key[16])
{
	return bt_mesh_id128(net_key, "nkbk", beacon_key);
    a802:	4910      	ldr	r1, [pc, #64]	; (a844 <net_keys_create+0xd4>)
    a804:	f105 024a 	add.w	r2, r5, #74	; 0x4a
    a808:	4630      	mov	r0, r6
    a80a:	f001 ff3b 	bl	c684 <bt_mesh_id128>
	if (err) {
    a80e:	4604      	mov	r4, r0
    a810:	b140      	cbz	r0, a824 <net_keys_create+0xb4>
    a812:	4906      	ldr	r1, [pc, #24]	; (a82c <net_keys_create+0xbc>)
    a814:	4b06      	ldr	r3, [pc, #24]	; (a830 <net_keys_create+0xc0>)
		BT_ERR("Unable to generate beacon key");
    a816:	480c      	ldr	r0, [pc, #48]	; (a848 <net_keys_create+0xd8>)
    a818:	1ac9      	subs	r1, r1, r3
    a81a:	08c9      	lsrs	r1, r1, #3
    a81c:	0189      	lsls	r1, r1, #6
    a81e:	f041 0101 	orr.w	r1, r1, #1
    a822:	e7c3      	b.n	a7ac <net_keys_create+0x3c>
	keys->valid = 1U;
    a824:	2301      	movs	r3, #1
    a826:	702b      	strb	r3, [r5, #0]
	return 0;
    a828:	e7c2      	b.n	a7b0 <net_keys_create+0x40>
    a82a:	bf00      	nop
    a82c:	0001f0b4 	.word	0x0001f0b4
    a830:	0001ef2c 	.word	0x0001ef2c
    a834:	000216f2 	.word	0x000216f2
    a838:	0002171e 	.word	0x0002171e
    a83c:	00021738 	.word	0x00021738
    a840:	0002173d 	.word	0x0002173d
    a844:	0002175c 	.word	0x0002175c
    a848:	00021761 	.word	0x00021761

0000a84c <bt_mesh_net_flags>:
	if (sub && (sub->kr_phase == BT_MESH_KR_PHASE_2)) {
    a84c:	b118      	cbz	r0, a856 <bt_mesh_net_flags+0xa>
    a84e:	7f80      	ldrb	r0, [r0, #30]
	uint8_t flags = 0x00;
    a850:	1e82      	subs	r2, r0, #2
    a852:	4250      	negs	r0, r2
    a854:	4150      	adcs	r0, r2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a856:	4b05      	ldr	r3, [pc, #20]	; (a86c <bt_mesh_net_flags+0x20>)
    a858:	f3bf 8f5b 	dmb	ish
    a85c:	681b      	ldr	r3, [r3, #0]
    a85e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    a862:	075b      	lsls	r3, r3, #29
		flags |= BT_MESH_NET_FLAG_IVU;
    a864:	bf48      	it	mi
    a866:	f040 0002 	orrmi.w	r0, r0, #2
}
    a86a:	4770      	bx	lr
    a86c:	200011e0 	.word	0x200011e0

0000a870 <bt_mesh_subnet_get>:

	return count;
}

struct bt_mesh_subnet *bt_mesh_subnet_get(uint16_t net_idx)
{
    a870:	4603      	mov	r3, r0
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
		struct bt_mesh_subnet *sub = &subnets[i];

		if (sub->net_idx == net_idx) {
    a872:	4805      	ldr	r0, [pc, #20]	; (a888 <bt_mesh_subnet_get+0x18>)
    a874:	8b82      	ldrh	r2, [r0, #28]
    a876:	429a      	cmp	r2, r3
    a878:	d005      	beq.n	a886 <bt_mesh_subnet_get+0x16>
    a87a:	f8b0 20fc 	ldrh.w	r2, [r0, #252]	; 0xfc
			return sub;
		}
	}

	return NULL;
    a87e:	30e0      	adds	r0, #224	; 0xe0
    a880:	429a      	cmp	r2, r3
    a882:	bf18      	it	ne
    a884:	2000      	movne	r0, #0
}
    a886:	4770      	bx	lr
    a888:	20000310 	.word	0x20000310

0000a88c <store_subnet>:
{
    a88c:	b510      	push	{r4, lr}
    a88e:	b08e      	sub	sp, #56	; 0x38
    a890:	4601      	mov	r1, r0
	sub = bt_mesh_subnet_get(net_idx);
    a892:	f7ff ffed 	bl	a870 <bt_mesh_subnet_get>
	if (!sub) {
    a896:	4604      	mov	r4, r0
    a898:	b960      	cbnz	r0, a8b4 <store_subnet+0x28>
    a89a:	4b1b      	ldr	r3, [pc, #108]	; (a908 <store_subnet+0x7c>)
    a89c:	4a1b      	ldr	r2, [pc, #108]	; (a90c <store_subnet+0x80>)
		BT_WARN("NetKeyIndex 0x%03x not found", net_idx);
    a89e:	481c      	ldr	r0, [pc, #112]	; (a910 <store_subnet+0x84>)
    a8a0:	1ad2      	subs	r2, r2, r3
    a8a2:	08d2      	lsrs	r2, r2, #3
    a8a4:	0192      	lsls	r2, r2, #6
    a8a6:	f042 0202 	orr.w	r2, r2, #2
}
    a8aa:	b00e      	add	sp, #56	; 0x38
    a8ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("NetKeyIndex 0x%03x not found", net_idx);
    a8b0:	f00e bdd4 	b.w	1945c <log_1>
	snprintk(path, sizeof(path), "bt/mesh/NetKey/%x", net_idx);
    a8b4:	460b      	mov	r3, r1
    a8b6:	4a17      	ldr	r2, [pc, #92]	; (a914 <store_subnet+0x88>)
    a8b8:	2114      	movs	r1, #20
    a8ba:	4668      	mov	r0, sp
    a8bc:	f00e f98f 	bl	18bde <snprintk>
	memcpy(&key.val[0], sub->keys[0].net, 16);
    a8c0:	2210      	movs	r2, #16
    a8c2:	f104 012d 	add.w	r1, r4, #45	; 0x2d
    a8c6:	f10d 0015 	add.w	r0, sp, #21
    a8ca:	f00f fcd8 	bl	1a27e <memcpy>
	memcpy(&key.val[1], sub->keys[1].net, 16);
    a8ce:	2210      	movs	r2, #16
    a8d0:	f104 0187 	add.w	r1, r4, #135	; 0x87
    a8d4:	f10d 0025 	add.w	r0, sp, #37	; 0x25
    a8d8:	f00f fcd1 	bl	1a27e <memcpy>
	key.kr_flag = 0U; /* Deprecated */
    a8dc:	7fa3      	ldrb	r3, [r4, #30]
	err = settings_save_one(path, &key, sizeof(key));
    a8de:	2221      	movs	r2, #33	; 0x21
	key.kr_flag = 0U; /* Deprecated */
    a8e0:	005b      	lsls	r3, r3, #1
	err = settings_save_one(path, &key, sizeof(key));
    a8e2:	a905      	add	r1, sp, #20
    a8e4:	4668      	mov	r0, sp
	key.kr_flag = 0U; /* Deprecated */
    a8e6:	f88d 3014 	strb.w	r3, [sp, #20]
	err = settings_save_one(path, &key, sizeof(key));
    a8ea:	f7f8 fbb9 	bl	3060 <settings_save_one>
	if (err) {
    a8ee:	b148      	cbz	r0, a904 <store_subnet+0x78>
    a8f0:	4906      	ldr	r1, [pc, #24]	; (a90c <store_subnet+0x80>)
    a8f2:	4b05      	ldr	r3, [pc, #20]	; (a908 <store_subnet+0x7c>)
		BT_ERR("Failed to store NetKey value");
    a8f4:	4808      	ldr	r0, [pc, #32]	; (a918 <store_subnet+0x8c>)
    a8f6:	1ac9      	subs	r1, r1, r3
    a8f8:	08c9      	lsrs	r1, r1, #3
    a8fa:	0189      	lsls	r1, r1, #6
    a8fc:	f041 0101 	orr.w	r1, r1, #1
    a900:	f00e fd9f 	bl	19442 <log_0>
}
    a904:	b00e      	add	sp, #56	; 0x38
    a906:	bd10      	pop	{r4, pc}
    a908:	0001ef2c 	.word	0x0001ef2c
    a90c:	0001f0b4 	.word	0x0001f0b4
    a910:	0002177f 	.word	0x0002177f
    a914:	000216bd 	.word	0x000216bd
    a918:	0002179c 	.word	0x0002179c

0000a91c <update_subnet_settings>:
{
    a91c:	b470      	push	{r4, r5, r6}
		if (!update->valid) {
    a91e:	4c20      	ldr	r4, [pc, #128]	; (a9a0 <update_subnet_settings+0x84>)
    a920:	7863      	ldrb	r3, [r4, #1]
    a922:	f013 0310 	ands.w	r3, r3, #16
	uint8_t clear = store ? 0U : 1U;
    a926:	f081 0501 	eor.w	r5, r1, #1
		if (!update->valid) {
    a92a:	d018      	beq.n	a95e <update_subnet_settings+0x42>
		if (update->key_idx == key_idx) {
    a92c:	8822      	ldrh	r2, [r4, #0]
    a92e:	f3c2 020b 	ubfx	r2, r2, #0, #12
    a932:	4282      	cmp	r2, r0
	*free_slot = NULL;
    a934:	f04f 0200 	mov.w	r2, #0
		if (update->key_idx == key_idx) {
    a938:	d113      	bne.n	a962 <update_subnet_settings+0x46>
		struct net_key_update *update = &net_key_updates[i];
    a93a:	4623      	mov	r3, r4
		if (!update->valid) {
    a93c:	78e6      	ldrb	r6, [r4, #3]
    a93e:	06f6      	lsls	r6, r6, #27
    a940:	d51b      	bpl.n	a97a <update_subnet_settings+0x5e>
		if (update->key_idx == key_idx) {
    a942:	8864      	ldrh	r4, [r4, #2]
    a944:	f3c4 040b 	ubfx	r4, r4, #0, #12
    a948:	4284      	cmp	r4, r0
    a94a:	d00c      	beq.n	a966 <update_subnet_settings+0x4a>
	if (update) {
    a94c:	b16b      	cbz	r3, a96a <update_subnet_settings+0x4e>
		update->clear = clear;
    a94e:	785a      	ldrb	r2, [r3, #1]
    a950:	f365 1245 	bfi	r2, r5, #5, #1
    a954:	705a      	strb	r2, [r3, #1]
}
    a956:	bc70      	pop	{r4, r5, r6}
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_NET_KEYS_PENDING);
    a958:	2001      	movs	r0, #1
    a95a:	f002 ba9d 	b.w	ce98 <bt_mesh_settings_store_schedule>
			*free_slot = update;
    a95e:	4622      	mov	r2, r4
    a960:	e7ec      	b.n	a93c <update_subnet_settings+0x20>
	match = NULL;
    a962:	4613      	mov	r3, r2
    a964:	e7ea      	b.n	a93c <update_subnet_settings+0x20>
		struct net_key_update *update = &net_key_updates[i];
    a966:	4b0f      	ldr	r3, [pc, #60]	; (a9a4 <update_subnet_settings+0x88>)
    a968:	e7f1      	b.n	a94e <update_subnet_settings+0x32>
	if (!free_slot) {
    a96a:	b94a      	cbnz	r2, a980 <update_subnet_settings+0x64>
		if (store) {
    a96c:	b111      	cbz	r1, a974 <update_subnet_settings+0x58>
}
    a96e:	bc70      	pop	{r4, r5, r6}
			store_subnet(net_idx);
    a970:	f7ff bf8c 	b.w	a88c <store_subnet>
}
    a974:	bc70      	pop	{r4, r5, r6}
			clear_net_key(net_idx);
    a976:	f7ff bed9 	b.w	a72c <clear_net_key>
	if (update) {
    a97a:	2b00      	cmp	r3, #0
    a97c:	d1e7      	bne.n	a94e <update_subnet_settings+0x32>
			*free_slot = update;
    a97e:	4a09      	ldr	r2, [pc, #36]	; (a9a4 <update_subnet_settings+0x88>)
	free_slot->key_idx = net_idx;
    a980:	8811      	ldrh	r1, [r2, #0]
    a982:	f3c0 030b 	ubfx	r3, r0, #0, #12
    a986:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    a98a:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    a98e:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
    a992:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a996:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
    a99a:	430b      	orrs	r3, r1
    a99c:	8013      	strh	r3, [r2, #0]
    a99e:	e7da      	b.n	a956 <update_subnet_settings+0x3a>
    a9a0:	20002e22 	.word	0x20002e22
    a9a4:	20002e24 	.word	0x20002e24

0000a9a8 <net_key_set>:
	return false;
}

static int net_key_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
    a9a8:	b570      	push	{r4, r5, r6, lr}
    a9aa:	4614      	mov	r4, r2
    a9ac:	b08a      	sub	sp, #40	; 0x28
    a9ae:	461e      	mov	r6, r3
	struct net_key_val key;
	int err;
	uint16_t net_idx;

	if (!name) {
    a9b0:	b970      	cbnz	r0, a9d0 <net_key_set+0x28>
    a9b2:	4b1b      	ldr	r3, [pc, #108]	; (aa20 <net_key_set+0x78>)
    a9b4:	491b      	ldr	r1, [pc, #108]	; (aa24 <net_key_set+0x7c>)
		BT_ERR("Insufficient number of arguments");
    a9b6:	481c      	ldr	r0, [pc, #112]	; (aa28 <net_key_set+0x80>)
    a9b8:	1ac9      	subs	r1, r1, r3
    a9ba:	08c9      	lsrs	r1, r1, #3
    a9bc:	0189      	lsls	r1, r1, #6
    a9be:	f041 0101 	orr.w	r1, r1, #1
    a9c2:	f00e fd3e 	bl	19442 <log_0>
		return -ENOENT;
    a9c6:	f06f 0401 	mvn.w	r4, #1
	BT_DBG("NetKeyIndex 0x%03x recovered from storage", net_idx);

	return bt_mesh_subnet_set(
		net_idx, key.kr_phase, key.val[0],
		(key.kr_phase != BT_MESH_KR_NORMAL) ? key.val[1] : NULL);
}
    a9ca:	4620      	mov	r0, r4
    a9cc:	b00a      	add	sp, #40	; 0x28
    a9ce:	bd70      	pop	{r4, r5, r6, pc}
	net_idx = strtol(name, NULL, 16);
    a9d0:	2210      	movs	r2, #16
    a9d2:	2100      	movs	r1, #0
    a9d4:	f00f fb0c 	bl	19ff0 <strtol>
	err = bt_mesh_settings_set(read_cb, cb_arg, &key, sizeof(key));
    a9d8:	2321      	movs	r3, #33	; 0x21
	net_idx = strtol(name, NULL, 16);
    a9da:	b285      	uxth	r5, r0
	err = bt_mesh_settings_set(read_cb, cb_arg, &key, sizeof(key));
    a9dc:	aa01      	add	r2, sp, #4
    a9de:	4620      	mov	r0, r4
    a9e0:	4631      	mov	r1, r6
    a9e2:	f002 fa27 	bl	ce34 <bt_mesh_settings_set>
	if (err) {
    a9e6:	4604      	mov	r4, r0
    a9e8:	b150      	cbz	r0, aa00 <net_key_set+0x58>
    a9ea:	4b0d      	ldr	r3, [pc, #52]	; (aa20 <net_key_set+0x78>)
    a9ec:	490d      	ldr	r1, [pc, #52]	; (aa24 <net_key_set+0x7c>)
		BT_ERR("Failed to set \'net-key\'");
    a9ee:	480f      	ldr	r0, [pc, #60]	; (aa2c <net_key_set+0x84>)
    a9f0:	1ac9      	subs	r1, r1, r3
    a9f2:	08c9      	lsrs	r1, r1, #3
    a9f4:	0189      	lsls	r1, r1, #6
    a9f6:	f041 0101 	orr.w	r1, r1, #1
    a9fa:	f00e fd22 	bl	19442 <log_0>
		return err;
    a9fe:	e7e4      	b.n	a9ca <net_key_set+0x22>
		net_idx, key.kr_phase, key.val[0],
    aa00:	f89d 3004 	ldrb.w	r3, [sp, #4]
	return bt_mesh_subnet_set(
    aa04:	0859      	lsrs	r1, r3, #1
    aa06:	f013 03fe 	ands.w	r3, r3, #254	; 0xfe
    aa0a:	bf18      	it	ne
    aa0c:	f10d 0315 	addne.w	r3, sp, #21
    aa10:	f10d 0205 	add.w	r2, sp, #5
    aa14:	4628      	mov	r0, r5
    aa16:	f011 f956 	bl	1bcc6 <bt_mesh_subnet_set>
    aa1a:	4604      	mov	r4, r0
    aa1c:	e7d5      	b.n	a9ca <net_key_set+0x22>
    aa1e:	bf00      	nop
    aa20:	0001ef2c 	.word	0x0001ef2c
    aa24:	0001f0b4 	.word	0x0001f0b4
    aa28:	0002008c 	.word	0x0002008c
    aa2c:	000217b9 	.word	0x000217b9

0000aa30 <bt_mesh_subnet_find>:
{
    aa30:	b570      	push	{r4, r5, r6, lr}
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    aa32:	4c0f      	ldr	r4, [pc, #60]	; (aa70 <bt_mesh_subnet_find+0x40>)
    aa34:	8ba2      	ldrh	r2, [r4, #28]
    aa36:	f64f 73ff 	movw	r3, #65535	; 0xffff
    aa3a:	429a      	cmp	r2, r3
{
    aa3c:	4605      	mov	r5, r0
    aa3e:	460e      	mov	r6, r1
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    aa40:	d003      	beq.n	aa4a <bt_mesh_subnet_find+0x1a>
		if (!cb || cb(&subnets[i], cb_data)) {
    aa42:	4620      	mov	r0, r4
    aa44:	b14d      	cbz	r5, aa5a <bt_mesh_subnet_find+0x2a>
    aa46:	47a8      	blx	r5
    aa48:	b978      	cbnz	r0, aa6a <bt_mesh_subnet_find+0x3a>
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    aa4a:	f8b4 20fc 	ldrh.w	r2, [r4, #252]	; 0xfc
    aa4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    aa52:	429a      	cmp	r2, r3
    aa54:	d007      	beq.n	aa66 <bt_mesh_subnet_find+0x36>
		if (!cb || cb(&subnets[i], cb_data)) {
    aa56:	b90d      	cbnz	r5, aa5c <bt_mesh_subnet_find+0x2c>
    aa58:	4806      	ldr	r0, [pc, #24]	; (aa74 <bt_mesh_subnet_find+0x44>)
}
    aa5a:	bd70      	pop	{r4, r5, r6, pc}
		if (!cb || cb(&subnets[i], cb_data)) {
    aa5c:	4805      	ldr	r0, [pc, #20]	; (aa74 <bt_mesh_subnet_find+0x44>)
    aa5e:	4631      	mov	r1, r6
    aa60:	47a8      	blx	r5
    aa62:	2800      	cmp	r0, #0
    aa64:	d1f8      	bne.n	aa58 <bt_mesh_subnet_find+0x28>
	return NULL;
    aa66:	2000      	movs	r0, #0
    aa68:	e7f7      	b.n	aa5a <bt_mesh_subnet_find+0x2a>
		if (!cb || cb(&subnets[i], cb_data)) {
    aa6a:	4620      	mov	r0, r4
    aa6c:	e7f5      	b.n	aa5a <bt_mesh_subnet_find+0x2a>
    aa6e:	bf00      	nop
    aa70:	20000310 	.word	0x20000310
    aa74:	200003f0 	.word	0x200003f0

0000aa78 <bt_mesh_subnet_foreach>:
{
    aa78:	b570      	push	{r4, r5, r6, lr}
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    aa7a:	4e0b      	ldr	r6, [pc, #44]	; (aaa8 <bt_mesh_subnet_foreach+0x30>)
    aa7c:	8bb2      	ldrh	r2, [r6, #28]
    aa7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    aa82:	429a      	cmp	r2, r3
{
    aa84:	4605      	mov	r5, r0
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    aa86:	d00d      	beq.n	aaa4 <bt_mesh_subnet_foreach+0x2c>
		cb(&subnets[i]);
    aa88:	4630      	mov	r0, r6
    aa8a:	47a8      	blx	r5
		count++;
    aa8c:	2401      	movs	r4, #1
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    aa8e:	f8b6 20fc 	ldrh.w	r2, [r6, #252]	; 0xfc
    aa92:	f64f 73ff 	movw	r3, #65535	; 0xffff
    aa96:	429a      	cmp	r2, r3
    aa98:	d002      	beq.n	aaa0 <bt_mesh_subnet_foreach+0x28>
		cb(&subnets[i]);
    aa9a:	4804      	ldr	r0, [pc, #16]	; (aaac <bt_mesh_subnet_foreach+0x34>)
    aa9c:	47a8      	blx	r5
		count++;
    aa9e:	3401      	adds	r4, #1
}
    aaa0:	4620      	mov	r0, r4
    aaa2:	bd70      	pop	{r4, r5, r6, pc}
	size_t count = 0;
    aaa4:	2400      	movs	r4, #0
    aaa6:	e7f2      	b.n	aa8e <bt_mesh_subnet_foreach+0x16>
    aaa8:	20000310 	.word	0x20000310
    aaac:	200003f0 	.word	0x200003f0

0000aab0 <bt_mesh_subnet_next>:
	if (sub) {
    aab0:	b1b8      	cbz	r0, aae2 <bt_mesh_subnet_next+0x32>
		if (sub == &subnets[ARRAY_SIZE(subnets)]) {
    aab2:	4b0d      	ldr	r3, [pc, #52]	; (aae8 <bt_mesh_subnet_next+0x38>)
		sub++;
    aab4:	30e0      	adds	r0, #224	; 0xe0
		sub = &subnets[0];
    aab6:	f5a3 72e0 	sub.w	r2, r3, #448	; 0x1c0
    aaba:	4298      	cmp	r0, r3
    aabc:	bf08      	it	eq
    aabe:	4610      	moveq	r0, r2
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
    aac0:	8b83      	ldrh	r3, [r0, #28]
    aac2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    aac6:	4293      	cmp	r3, r2
    aac8:	d10a      	bne.n	aae0 <bt_mesh_subnet_next+0x30>
		if (sub == &subnets[ARRAY_SIZE(subnets)]) {
    aaca:	4a07      	ldr	r2, [pc, #28]	; (aae8 <bt_mesh_subnet_next+0x38>)
	for (int i = 0; i < ARRAY_SIZE(subnets); i++, sub++) {
    aacc:	30e0      	adds	r0, #224	; 0xe0
			sub = &subnets[0];
    aace:	f5a2 71e0 	sub.w	r1, r2, #448	; 0x1c0
    aad2:	4290      	cmp	r0, r2
    aad4:	bf08      	it	eq
    aad6:	4608      	moveq	r0, r1
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
    aad8:	8b82      	ldrh	r2, [r0, #28]
	return NULL;
    aada:	429a      	cmp	r2, r3
    aadc:	bf08      	it	eq
    aade:	2000      	moveq	r0, #0
}
    aae0:	4770      	bx	lr
		sub = &subnets[0];
    aae2:	4802      	ldr	r0, [pc, #8]	; (aaec <bt_mesh_subnet_next+0x3c>)
    aae4:	e7ec      	b.n	aac0 <bt_mesh_subnet_next+0x10>
    aae6:	bf00      	nop
    aae8:	200004d0 	.word	0x200004d0
    aaec:	20000310 	.word	0x20000310

0000aaf0 <bt_mesh_net_cred_find>:
{
    aaf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    aaf4:	4d1c      	ldr	r5, [pc, #112]	; (ab68 <bt_mesh_net_cred_find+0x78>)
    aaf6:	4604      	mov	r4, r0
    aaf8:	460e      	mov	r6, r1
    aafa:	4617      	mov	r7, r2
    aafc:	4698      	mov	r8, r3
	for (i = 0; i < ARRAY_SIZE(subnets); i++) {
    aafe:	f04f 0900 	mov.w	r9, #0
		if (rx->sub->net_idx == BT_MESH_KEY_UNUSED) {
    ab02:	f64f 7aff 	movw	sl, #65535	; 0xffff
    ab06:	8bab      	ldrh	r3, [r5, #28]
		rx->sub = &subnets[i];
    ab08:	6025      	str	r5, [r4, #0]
		if (rx->sub->net_idx == BT_MESH_KEY_UNUSED) {
    ab0a:	4553      	cmp	r3, sl
    ab0c:	d025      	beq.n	ab5a <bt_mesh_net_cred_find+0x6a>
			if (!rx->sub->keys[j].valid) {
    ab0e:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
    ab12:	b133      	cbz	r3, ab22 <bt_mesh_net_cred_find+0x32>
			if (cb(rx, in, out, &rx->sub->keys[j].msg)) {
    ab14:	f105 033d 	add.w	r3, r5, #61	; 0x3d
    ab18:	463a      	mov	r2, r7
    ab1a:	4631      	mov	r1, r6
    ab1c:	4620      	mov	r0, r4
    ab1e:	47c0      	blx	r8
    ab20:	b9c8      	cbnz	r0, ab56 <bt_mesh_net_cred_find+0x66>
			if (!rx->sub->keys[j].valid) {
    ab22:	6823      	ldr	r3, [r4, #0]
    ab24:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
    ab28:	b1ba      	cbz	r2, ab5a <bt_mesh_net_cred_find+0x6a>
			if (cb(rx, in, out, &rx->sub->keys[j].msg)) {
    ab2a:	3397      	adds	r3, #151	; 0x97
    ab2c:	463a      	mov	r2, r7
    ab2e:	4631      	mov	r1, r6
    ab30:	4620      	mov	r0, r4
    ab32:	47c0      	blx	r8
    ab34:	b188      	cbz	r0, ab5a <bt_mesh_net_cred_find+0x6a>
		for (j = 0; j < ARRAY_SIZE(rx->sub->keys); j++) {
    ab36:	2201      	movs	r2, #1
				rx->new_key = (j > 0);
    ab38:	7d23      	ldrb	r3, [r4, #20]
    ab3a:	f023 0306 	bic.w	r3, r3, #6
    ab3e:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
    ab42:	7523      	strb	r3, [r4, #20]
				rx->ctx.net_idx = rx->sub->net_idx;
    ab44:	6823      	ldr	r3, [r4, #0]
    ab46:	8b9b      	ldrh	r3, [r3, #28]
    ab48:	80a3      	strh	r3, [r4, #4]
				return true;
    ab4a:	2001      	movs	r0, #1
}
    ab4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ab50:	f04f 0901 	mov.w	r9, #1
    ab54:	e7d7      	b.n	ab06 <bt_mesh_net_cred_find+0x16>
		for (j = 0; j < ARRAY_SIZE(rx->sub->keys); j++) {
    ab56:	2200      	movs	r2, #0
    ab58:	e7ee      	b.n	ab38 <bt_mesh_net_cred_find+0x48>
	for (i = 0; i < ARRAY_SIZE(subnets); i++) {
    ab5a:	35e0      	adds	r5, #224	; 0xe0
    ab5c:	f1b9 0f00 	cmp.w	r9, #0
    ab60:	d0f6      	beq.n	ab50 <bt_mesh_net_cred_find+0x60>
	return false;
    ab62:	2000      	movs	r0, #0
    ab64:	e7f2      	b.n	ab4c <bt_mesh_net_cred_find+0x5c>
    ab66:	bf00      	nop
    ab68:	20000310 	.word	0x20000310

0000ab6c <app_get>:
};

static struct app_key *app_get(uint16_t app_idx)
{
	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
		if (apps[i].app_idx == app_idx) {
    ab6c:	4b07      	ldr	r3, [pc, #28]	; (ab8c <app_get+0x20>)
    ab6e:	885a      	ldrh	r2, [r3, #2]
    ab70:	4282      	cmp	r2, r0
    ab72:	d007      	beq.n	ab84 <app_get+0x18>
    ab74:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    ab76:	4282      	cmp	r2, r0
    ab78:	d106      	bne.n	ab88 <app_get+0x1c>
	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
    ab7a:	2001      	movs	r0, #1
			return &apps[i];
    ab7c:	2228      	movs	r2, #40	; 0x28
    ab7e:	fb02 3000 	mla	r0, r2, r0, r3
    ab82:	4770      	bx	lr
	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
    ab84:	2000      	movs	r0, #0
    ab86:	e7f9      	b.n	ab7c <app_get+0x10>
		}
	}

	return NULL;
    ab88:	2000      	movs	r0, #0
}
    ab8a:	4770      	bx	lr
    ab8c:	20000a38 	.word	0x20000a38

0000ab90 <app_key_evt>:

	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_APP_KEYS_PENDING);
}

static void app_key_evt(struct app_key *app, enum bt_mesh_key_evt evt)
{
    ab90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_mesh_app_key_cb, cb) {
    ab92:	4d07      	ldr	r5, [pc, #28]	; (abb0 <app_key_evt+0x20>)
    ab94:	4f07      	ldr	r7, [pc, #28]	; (abb4 <app_key_evt+0x24>)
{
    ab96:	4604      	mov	r4, r0
    ab98:	460e      	mov	r6, r1
	STRUCT_SECTION_FOREACH(bt_mesh_app_key_cb, cb) {
    ab9a:	42bd      	cmp	r5, r7
    ab9c:	d300      	bcc.n	aba0 <app_key_evt+0x10>
		cb->evt_handler(app->app_idx, app->net_idx, evt);
	}
}
    ab9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb->evt_handler(app->app_idx, app->net_idx, evt);
    aba0:	f855 3b04 	ldr.w	r3, [r5], #4
    aba4:	8821      	ldrh	r1, [r4, #0]
    aba6:	8860      	ldrh	r0, [r4, #2]
    aba8:	4632      	mov	r2, r6
    abaa:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_mesh_app_key_cb, cb) {
    abac:	e7f5      	b.n	ab9a <app_key_evt+0xa>
    abae:	bf00      	nop
    abb0:	0001edd4 	.word	0x0001edd4
    abb4:	0001edd8 	.word	0x0001edd8

0000abb8 <app_key_alloc>:
{
	struct app_key *app = NULL;

	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
		/* Check for already existing app_key */
		if (apps[i].app_idx == app_idx) {
    abb8:	4b0d      	ldr	r3, [pc, #52]	; (abf0 <app_key_alloc+0x38>)
{
    abba:	b510      	push	{r4, lr}
		if (apps[i].app_idx == app_idx) {
    abbc:	885c      	ldrh	r4, [r3, #2]
    abbe:	42a0      	cmp	r0, r4
{
    abc0:	4602      	mov	r2, r0
		if (apps[i].app_idx == app_idx) {
    abc2:	d00e      	beq.n	abe2 <app_key_alloc+0x2a>
			return &apps[i];
		}

		if (!app && apps[i].app_idx == BT_MESH_KEY_UNUSED) {
    abc4:	f64f 71ff 	movw	r1, #65535	; 0xffff
			app = &apps[i];
    abc8:	428c      	cmp	r4, r1
    abca:	bf0c      	ite	eq
    abcc:	4618      	moveq	r0, r3
    abce:	2000      	movne	r0, #0
		if (apps[i].app_idx == app_idx) {
    abd0:	8d5c      	ldrh	r4, [r3, #42]	; 0x2a
    abd2:	42a2      	cmp	r2, r4
    abd4:	d00a      	beq.n	abec <app_key_alloc+0x34>
		if (!app && apps[i].app_idx == BT_MESH_KEY_UNUSED) {
    abd6:	b918      	cbnz	r0, abe0 <app_key_alloc+0x28>
			app = &apps[i];
    abd8:	3328      	adds	r3, #40	; 0x28
    abda:	428c      	cmp	r4, r1
    abdc:	bf08      	it	eq
    abde:	4618      	moveq	r0, r3
		}
	}

	return app;
}
    abe0:	bd10      	pop	{r4, pc}
	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
    abe2:	2000      	movs	r0, #0
			return &apps[i];
    abe4:	2228      	movs	r2, #40	; 0x28
    abe6:	fb02 3000 	mla	r0, r2, r0, r3
    abea:	e7f9      	b.n	abe0 <app_key_alloc+0x28>
	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
    abec:	2001      	movs	r0, #1
    abee:	e7f9      	b.n	abe4 <app_key_alloc+0x2c>
    abf0:	20000a38 	.word	0x20000a38

0000abf4 <store_app_key>:
{
    abf4:	b530      	push	{r4, r5, lr}
    abf6:	b08f      	sub	sp, #60	; 0x3c
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
    abf8:	4603      	mov	r3, r0
    abfa:	4a20      	ldr	r2, [pc, #128]	; (ac7c <store_app_key+0x88>)
{
    abfc:	4605      	mov	r5, r0
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
    abfe:	2114      	movs	r1, #20
    ac00:	4668      	mov	r0, sp
    ac02:	f00d ffec 	bl	18bde <snprintk>
	app = app_get(app_idx);
    ac06:	4628      	mov	r0, r5
    ac08:	f7ff ffb0 	bl	ab6c <app_get>
	if (!app) {
    ac0c:	4604      	mov	r4, r0
    ac0e:	b960      	cbnz	r0, ac2a <store_app_key+0x36>
    ac10:	4a1b      	ldr	r2, [pc, #108]	; (ac80 <store_app_key+0x8c>)
    ac12:	4b1c      	ldr	r3, [pc, #112]	; (ac84 <store_app_key+0x90>)
		BT_WARN("ApKeyIndex 0x%03x not found", app_idx);
    ac14:	481c      	ldr	r0, [pc, #112]	; (ac88 <store_app_key+0x94>)
    ac16:	1ad2      	subs	r2, r2, r3
    ac18:	08d2      	lsrs	r2, r2, #3
    ac1a:	0192      	lsls	r2, r2, #6
    ac1c:	f042 0202 	orr.w	r2, r2, #2
    ac20:	4629      	mov	r1, r5
		BT_ERR("Failed to store AppKey %s value", log_strdup(path));
    ac22:	f00e fc1b 	bl	1945c <log_1>
}
    ac26:	b00f      	add	sp, #60	; 0x3c
    ac28:	bd30      	pop	{r4, r5, pc}
	key.net_idx = app->net_idx,
    ac2a:	8803      	ldrh	r3, [r0, #0]
    ac2c:	f8ad 3014 	strh.w	r3, [sp, #20]
	memcpy(key.val[0], app->keys[0].val, 16);
    ac30:	1d81      	adds	r1, r0, #6
	key.updated = app->updated,
    ac32:	7903      	ldrb	r3, [r0, #4]
    ac34:	f88d 3016 	strb.w	r3, [sp, #22]
	memcpy(key.val[0], app->keys[0].val, 16);
    ac38:	2210      	movs	r2, #16
    ac3a:	f10d 0017 	add.w	r0, sp, #23
    ac3e:	f00f fb1e 	bl	1a27e <memcpy>
	memcpy(key.val[1], app->keys[1].val, 16);
    ac42:	2210      	movs	r2, #16
    ac44:	f104 0117 	add.w	r1, r4, #23
    ac48:	f10d 0027 	add.w	r0, sp, #39	; 0x27
    ac4c:	f00f fb17 	bl	1a27e <memcpy>
	err = settings_save_one(path, &key, sizeof(key));
    ac50:	2223      	movs	r2, #35	; 0x23
    ac52:	a905      	add	r1, sp, #20
    ac54:	4668      	mov	r0, sp
    ac56:	f7f8 fa03 	bl	3060 <settings_save_one>
	if (err) {
    ac5a:	2800      	cmp	r0, #0
    ac5c:	d0e3      	beq.n	ac26 <store_app_key+0x32>
    ac5e:	4a09      	ldr	r2, [pc, #36]	; (ac84 <store_app_key+0x90>)
    ac60:	4c07      	ldr	r4, [pc, #28]	; (ac80 <store_app_key+0x8c>)
    ac62:	4668      	mov	r0, sp
    ac64:	1aa4      	subs	r4, r4, r2
    ac66:	08e4      	lsrs	r4, r4, #3
    ac68:	f7f7 fd48 	bl	26fc <z_log_strdup>
		BT_ERR("Failed to store AppKey %s value", log_strdup(path));
    ac6c:	01a4      	lsls	r4, r4, #6
    ac6e:	f044 0401 	orr.w	r4, r4, #1
    ac72:	4601      	mov	r1, r0
    ac74:	4622      	mov	r2, r4
    ac76:	4805      	ldr	r0, [pc, #20]	; (ac8c <store_app_key+0x98>)
    ac78:	e7d3      	b.n	ac22 <store_app_key+0x2e>
    ac7a:	bf00      	nop
    ac7c:	000217f1 	.word	0x000217f1
    ac80:	0001f054 	.word	0x0001f054
    ac84:	0001ef2c 	.word	0x0001ef2c
    ac88:	00021803 	.word	0x00021803
    ac8c:	0002181f 	.word	0x0002181f

0000ac90 <clear_app_key>:
{
    ac90:	b510      	push	{r4, lr}
    ac92:	b086      	sub	sp, #24
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
    ac94:	4603      	mov	r3, r0
    ac96:	4a0b      	ldr	r2, [pc, #44]	; (acc4 <clear_app_key+0x34>)
{
    ac98:	4604      	mov	r4, r0
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
    ac9a:	2114      	movs	r1, #20
    ac9c:	a801      	add	r0, sp, #4
    ac9e:	f00d ff9e 	bl	18bde <snprintk>
	err = settings_delete(path);
    aca2:	a801      	add	r0, sp, #4
    aca4:	f00e ff29 	bl	19afa <settings_delete>
	if (err) {
    aca8:	b150      	cbz	r0, acc0 <clear_app_key+0x30>
    acaa:	4a07      	ldr	r2, [pc, #28]	; (acc8 <clear_app_key+0x38>)
    acac:	4b07      	ldr	r3, [pc, #28]	; (accc <clear_app_key+0x3c>)
		BT_ERR("Failed to clear AppKeyIndex 0x%03x", app_idx);
    acae:	4808      	ldr	r0, [pc, #32]	; (acd0 <clear_app_key+0x40>)
    acb0:	1ad2      	subs	r2, r2, r3
    acb2:	08d2      	lsrs	r2, r2, #3
    acb4:	0192      	lsls	r2, r2, #6
    acb6:	f042 0201 	orr.w	r2, r2, #1
    acba:	4621      	mov	r1, r4
    acbc:	f00e fbce 	bl	1945c <log_1>
}
    acc0:	b006      	add	sp, #24
    acc2:	bd10      	pop	{r4, pc}
    acc4:	000217f1 	.word	0x000217f1
    acc8:	0001f054 	.word	0x0001f054
    accc:	0001ef2c 	.word	0x0001ef2c
    acd0:	0002183f 	.word	0x0002183f

0000acd4 <update_app_key_settings>:
{
    acd4:	b470      	push	{r4, r5, r6}
		if (!update->valid) {
    acd6:	4c20      	ldr	r4, [pc, #128]	; (ad58 <update_app_key_settings+0x84>)
    acd8:	7863      	ldrb	r3, [r4, #1]
    acda:	f013 0310 	ands.w	r3, r3, #16
	uint8_t clear = store ? 0U : 1U;
    acde:	f081 0501 	eor.w	r5, r1, #1
		if (!update->valid) {
    ace2:	d018      	beq.n	ad16 <update_app_key_settings+0x42>
		if (update->key_idx == key_idx) {
    ace4:	8822      	ldrh	r2, [r4, #0]
    ace6:	f3c2 020b 	ubfx	r2, r2, #0, #12
    acea:	4282      	cmp	r2, r0
	*free_slot = NULL;
    acec:	f04f 0200 	mov.w	r2, #0
		if (update->key_idx == key_idx) {
    acf0:	d113      	bne.n	ad1a <update_app_key_settings+0x46>
		struct app_key_update *update = &app_key_updates[i];
    acf2:	4623      	mov	r3, r4
		if (!update->valid) {
    acf4:	78e6      	ldrb	r6, [r4, #3]
    acf6:	06f6      	lsls	r6, r6, #27
    acf8:	d51b      	bpl.n	ad32 <update_app_key_settings+0x5e>
		if (update->key_idx == key_idx) {
    acfa:	8864      	ldrh	r4, [r4, #2]
    acfc:	f3c4 040b 	ubfx	r4, r4, #0, #12
    ad00:	4284      	cmp	r4, r0
    ad02:	d00c      	beq.n	ad1e <update_app_key_settings+0x4a>
	if (update) {
    ad04:	b16b      	cbz	r3, ad22 <update_app_key_settings+0x4e>
		update->clear = clear;
    ad06:	785a      	ldrb	r2, [r3, #1]
    ad08:	f365 1245 	bfi	r2, r5, #5, #1
    ad0c:	705a      	strb	r2, [r3, #1]
}
    ad0e:	bc70      	pop	{r4, r5, r6}
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_APP_KEYS_PENDING);
    ad10:	2002      	movs	r0, #2
    ad12:	f002 b8c1 	b.w	ce98 <bt_mesh_settings_store_schedule>
			*free_slot = update;
    ad16:	4622      	mov	r2, r4
    ad18:	e7ec      	b.n	acf4 <update_app_key_settings+0x20>
	match = NULL;
    ad1a:	4613      	mov	r3, r2
    ad1c:	e7ea      	b.n	acf4 <update_app_key_settings+0x20>
		struct app_key_update *update = &app_key_updates[i];
    ad1e:	4b0f      	ldr	r3, [pc, #60]	; (ad5c <update_app_key_settings+0x88>)
    ad20:	e7f1      	b.n	ad06 <update_app_key_settings+0x32>
	if (!free_slot) {
    ad22:	b94a      	cbnz	r2, ad38 <update_app_key_settings+0x64>
		if (store) {
    ad24:	b111      	cbz	r1, ad2c <update_app_key_settings+0x58>
}
    ad26:	bc70      	pop	{r4, r5, r6}
			store_app_key(app_idx);
    ad28:	f7ff bf64 	b.w	abf4 <store_app_key>
}
    ad2c:	bc70      	pop	{r4, r5, r6}
			clear_app_key(app_idx);
    ad2e:	f7ff bfaf 	b.w	ac90 <clear_app_key>
	if (update) {
    ad32:	2b00      	cmp	r3, #0
    ad34:	d1e7      	bne.n	ad06 <update_app_key_settings+0x32>
			*free_slot = update;
    ad36:	4a09      	ldr	r2, [pc, #36]	; (ad5c <update_app_key_settings+0x88>)
	free_slot->key_idx = app_idx;
    ad38:	8811      	ldrh	r1, [r2, #0]
    ad3a:	f3c0 030b 	ubfx	r3, r0, #0, #12
    ad3e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    ad42:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    ad46:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
    ad4a:	f3c3 030d 	ubfx	r3, r3, #0, #14
    ad4e:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
    ad52:	430b      	orrs	r3, r1
    ad54:	8013      	strh	r3, [r2, #0]
    ad56:	e7da      	b.n	ad0e <update_app_key_settings+0x3a>
    ad58:	20002e26 	.word	0x20002e26
    ad5c:	20002e28 	.word	0x20002e28

0000ad60 <subnet_evt>:
	return BT_MESH_KEY_UNUSED;
}

static void subnet_evt(struct bt_mesh_subnet *sub, enum bt_mesh_key_evt evt)
{
	if (evt == BT_MESH_KEY_UPDATED || evt == BT_MESH_KEY_ADDED) {
    ad60:	f011 0ffd 	tst.w	r1, #253	; 0xfd
{
    ad64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ad68:	4607      	mov	r7, r0
    ad6a:	460d      	mov	r5, r1
	if (evt == BT_MESH_KEY_UPDATED || evt == BT_MESH_KEY_ADDED) {
    ad6c:	d015      	beq.n	ad9a <subnet_evt+0x3a>
    ad6e:	4c1e      	ldr	r4, [pc, #120]	; (ade8 <subnet_evt+0x88>)
    ad70:	f04f 0802 	mov.w	r8, #2
	}

	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
		struct app_key *app = &apps[i];

		if (app->app_idx == BT_MESH_KEY_UNUSED) {
    ad74:	f64f 79ff 	movw	r9, #65535	; 0xffff
    ad78:	8863      	ldrh	r3, [r4, #2]
    ad7a:	454b      	cmp	r3, r9
    ad7c:	d008      	beq.n	ad90 <subnet_evt+0x30>
			continue;
		}

		if (app->net_idx != sub->net_idx) {
    ad7e:	8822      	ldrh	r2, [r4, #0]
    ad80:	8bbb      	ldrh	r3, [r7, #28]
    ad82:	429a      	cmp	r2, r3
    ad84:	d104      	bne.n	ad90 <subnet_evt+0x30>
			continue;
		}

		if (evt == BT_MESH_KEY_DELETED) {
    ad86:	2d01      	cmp	r5, #1
    ad88:	d10c      	bne.n	ada4 <subnet_evt+0x44>
			app_key_del(app);
    ad8a:	4620      	mov	r0, r4
    ad8c:	f010 ffcc 	bl	1bd28 <app_key_del>
	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
    ad90:	f1b8 0f01 	cmp.w	r8, #1
    ad94:	f104 0428 	add.w	r4, r4, #40	; 0x28
    ad98:	d101      	bne.n	ad9e <subnet_evt+0x3e>
			app_key_revoke(app);
		} else if (evt == BT_MESH_KEY_SWAPPED && app->updated) {
			app_key_evt(app, BT_MESH_KEY_SWAPPED);
		}
	}
}
    ad9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ad9e:	f04f 0801 	mov.w	r8, #1
    ada2:	e7e9      	b.n	ad78 <subnet_evt+0x18>
		} else if (evt == BT_MESH_KEY_REVOKED) {
    ada4:	2d04      	cmp	r5, #4
    ada6:	d119      	bne.n	addc <subnet_evt+0x7c>
	if (!app->updated) {
    ada8:	7923      	ldrb	r3, [r4, #4]
    adaa:	2b00      	cmp	r3, #0
    adac:	d0f0      	beq.n	ad90 <subnet_evt+0x30>
	memcpy(&app->keys[0], &app->keys[1], sizeof(app->keys[0]));
    adae:	f104 0616 	add.w	r6, r4, #22
    adb2:	2211      	movs	r2, #17
    adb4:	4631      	mov	r1, r6
    adb6:	1d60      	adds	r0, r4, #5
    adb8:	f00f fa61 	bl	1a27e <memcpy>
	memset(&app->keys[1], 0, sizeof(app->keys[1]));
    adbc:	2100      	movs	r1, #0
    adbe:	2211      	movs	r2, #17
    adc0:	4630      	mov	r0, r6
    adc2:	f00f fa67 	bl	1a294 <memset>
	app->updated = false;
    adc6:	2300      	movs	r3, #0
		update_app_key_settings(app->app_idx, true);
    adc8:	8860      	ldrh	r0, [r4, #2]
	app->updated = false;
    adca:	7123      	strb	r3, [r4, #4]
		update_app_key_settings(app->app_idx, true);
    adcc:	2101      	movs	r1, #1
    adce:	f7ff ff81 	bl	acd4 <update_app_key_settings>
			app_key_evt(app, BT_MESH_KEY_SWAPPED);
    add2:	4629      	mov	r1, r5
    add4:	4620      	mov	r0, r4
    add6:	f7ff fedb 	bl	ab90 <app_key_evt>
    adda:	e7d9      	b.n	ad90 <subnet_evt+0x30>
		} else if (evt == BT_MESH_KEY_SWAPPED && app->updated) {
    addc:	2d03      	cmp	r5, #3
    adde:	d1d7      	bne.n	ad90 <subnet_evt+0x30>
    ade0:	7923      	ldrb	r3, [r4, #4]
    ade2:	2b00      	cmp	r3, #0
    ade4:	d0d4      	beq.n	ad90 <subnet_evt+0x30>
    ade6:	e7f4      	b.n	add2 <subnet_evt+0x72>
    ade8:	20000a38 	.word	0x20000a38

0000adec <app_key_set>:
	}
}

static int app_key_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
    adec:	b5f0      	push	{r4, r5, r6, r7, lr}
    adee:	460c      	mov	r4, r1
    adf0:	b08b      	sub	sp, #44	; 0x2c
    adf2:	4616      	mov	r6, r2
    adf4:	461f      	mov	r7, r3
	struct app_key_val key;
	uint16_t app_idx;
	int err;

	if (!name) {
    adf6:	b970      	cbnz	r0, ae16 <app_key_set+0x2a>
    adf8:	4b1d      	ldr	r3, [pc, #116]	; (ae70 <app_key_set+0x84>)
    adfa:	491e      	ldr	r1, [pc, #120]	; (ae74 <app_key_set+0x88>)
		BT_ERR("Insufficient number of arguments");
    adfc:	481e      	ldr	r0, [pc, #120]	; (ae78 <app_key_set+0x8c>)
    adfe:	1ac9      	subs	r1, r1, r3
    ae00:	08c9      	lsrs	r1, r1, #3
    ae02:	0189      	lsls	r1, r1, #6
    ae04:	f041 0101 	orr.w	r1, r1, #1
    ae08:	f00e fb1b 	bl	19442 <log_0>
		return -ENOENT;
    ae0c:	f06f 0401 	mvn.w	r4, #1
	}

	BT_DBG("AppKeyIndex 0x%03x recovered from storage", app_idx);

	return 0;
}
    ae10:	4620      	mov	r0, r4
    ae12:	b00b      	add	sp, #44	; 0x2c
    ae14:	bdf0      	pop	{r4, r5, r6, r7, pc}
	app_idx = strtol(name, NULL, 16);
    ae16:	2210      	movs	r2, #16
    ae18:	2100      	movs	r1, #0
    ae1a:	f00f f8e9 	bl	19ff0 <strtol>
    ae1e:	4605      	mov	r5, r0
	if (!len_rd) {
    ae20:	2c00      	cmp	r4, #0
    ae22:	d0f5      	beq.n	ae10 <app_key_set+0x24>
	err = bt_mesh_settings_set(read_cb, cb_arg, &key, sizeof(key));
    ae24:	2323      	movs	r3, #35	; 0x23
    ae26:	aa01      	add	r2, sp, #4
    ae28:	4639      	mov	r1, r7
    ae2a:	4630      	mov	r0, r6
    ae2c:	f002 f802 	bl	ce34 <bt_mesh_settings_set>
	if (err < 0) {
    ae30:	2800      	cmp	r0, #0
    ae32:	db19      	blt.n	ae68 <app_key_set+0x7c>
	err = bt_mesh_app_key_set(app_idx, key.net_idx, key.val[0],
    ae34:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ae38:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    ae3c:	b10b      	cbz	r3, ae42 <app_key_set+0x56>
    ae3e:	f10d 0317 	add.w	r3, sp, #23
    ae42:	f10d 0207 	add.w	r2, sp, #7
    ae46:	b2a8      	uxth	r0, r5
    ae48:	f010 ff83 	bl	1bd52 <bt_mesh_app_key_set>
	if (err) {
    ae4c:	4604      	mov	r4, r0
    ae4e:	2800      	cmp	r0, #0
    ae50:	d0de      	beq.n	ae10 <app_key_set+0x24>
    ae52:	4b07      	ldr	r3, [pc, #28]	; (ae70 <app_key_set+0x84>)
    ae54:	4907      	ldr	r1, [pc, #28]	; (ae74 <app_key_set+0x88>)
		BT_ERR("Failed to set \'app-key\'");
    ae56:	4809      	ldr	r0, [pc, #36]	; (ae7c <app_key_set+0x90>)
    ae58:	1ac9      	subs	r1, r1, r3
    ae5a:	08c9      	lsrs	r1, r1, #3
    ae5c:	0189      	lsls	r1, r1, #6
    ae5e:	f041 0101 	orr.w	r1, r1, #1
    ae62:	f00e faee 	bl	19442 <log_0>
		return err;
    ae66:	e7d3      	b.n	ae10 <app_key_set+0x24>
		return -EINVAL;
    ae68:	f06f 0415 	mvn.w	r4, #21
    ae6c:	e7d0      	b.n	ae10 <app_key_set+0x24>
    ae6e:	bf00      	nop
    ae70:	0001ef2c 	.word	0x0001ef2c
    ae74:	0001f054 	.word	0x0001f054
    ae78:	0002008c 	.word	0x0002008c
    ae7c:	00021862 	.word	0x00021862

0000ae80 <bt_mesh_app_key_exists>:
		if (apps[i].app_idx == app_idx) {
    ae80:	4b05      	ldr	r3, [pc, #20]	; (ae98 <bt_mesh_app_key_exists+0x18>)
    ae82:	885a      	ldrh	r2, [r3, #2]
    ae84:	4282      	cmp	r2, r0
    ae86:	d004      	beq.n	ae92 <bt_mesh_app_key_exists+0x12>
    ae88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    ae8a:	1a1b      	subs	r3, r3, r0
    ae8c:	4258      	negs	r0, r3
    ae8e:	4158      	adcs	r0, r3
    ae90:	4770      	bx	lr
			return true;
    ae92:	2001      	movs	r0, #1
}
    ae94:	4770      	bx	lr
    ae96:	bf00      	nop
    ae98:	20000a38 	.word	0x20000a38

0000ae9c <bt_mesh_app_key_find>:
{
    ae9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    aea0:	f8dd 9020 	ldr.w	r9, [sp, #32]
    aea4:	4688      	mov	r8, r1
    aea6:	4616      	mov	r6, r2
    aea8:	461f      	mov	r7, r3
	if (dev_key) {
    aeaa:	4604      	mov	r4, r0
    aeac:	b180      	cbz	r0, aed0 <bt_mesh_app_key_find+0x34>
		if (BT_MESH_ADDR_IS_UNICAST(rx->ctx.recv_dst)) {
    aeae:	f9b2 300a 	ldrsh.w	r3, [r2, #10]
    aeb2:	2b00      	cmp	r3, #0
    aeb4:	dc03      	bgt.n	aebe <bt_mesh_app_key_find+0x22>
		return BT_MESH_KEY_UNUSED;
    aeb6:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
    aeba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			err = cb(rx, bt_mesh.dev_key, cb_data);
    aebe:	4919      	ldr	r1, [pc, #100]	; (af24 <bt_mesh_app_key_find+0x88>)
    aec0:	464a      	mov	r2, r9
    aec2:	4630      	mov	r0, r6
    aec4:	47b8      	blx	r7
			if (!err) {
    aec6:	2800      	cmp	r0, #0
    aec8:	d1f5      	bne.n	aeb6 <bt_mesh_app_key_find+0x1a>
				return BT_MESH_KEY_DEV_LOCAL;
    aeca:	f64f 70fe 	movw	r0, #65534	; 0xfffe
    aece:	e7f4      	b.n	aeba <bt_mesh_app_key_find+0x1e>
    aed0:	4d15      	ldr	r5, [pc, #84]	; (af28 <bt_mesh_app_key_find+0x8c>)
		if (app->app_idx == BT_MESH_KEY_UNUSED) {
    aed2:	f64f 7aff 	movw	sl, #65535	; 0xffff
    aed6:	f835 3c14 	ldrh.w	r3, [r5, #-20]
    aeda:	4553      	cmp	r3, sl
    aedc:	4629      	mov	r1, r5
    aede:	d01b      	beq.n	af18 <bt_mesh_app_key_find+0x7c>
		if (app->net_idx != rx->sub->net_idx) {
    aee0:	6833      	ldr	r3, [r6, #0]
    aee2:	f835 2c16 	ldrh.w	r2, [r5, #-22]
    aee6:	8b9b      	ldrh	r3, [r3, #28]
    aee8:	429a      	cmp	r2, r3
    aeea:	d115      	bne.n	af18 <bt_mesh_app_key_find+0x7c>
		if (rx->new_key && app->updated) {
    aeec:	7d33      	ldrb	r3, [r6, #20]
    aeee:	079b      	lsls	r3, r3, #30
    aef0:	d502      	bpl.n	aef8 <bt_mesh_app_key_find+0x5c>
    aef2:	f815 3c12 	ldrb.w	r3, [r5, #-18]
    aef6:	b90b      	cbnz	r3, aefc <bt_mesh_app_key_find+0x60>
			cred = &app->keys[0];
    aef8:	f1a5 0111 	sub.w	r1, r5, #17
		if (cred->id != aid) {
    aefc:	780b      	ldrb	r3, [r1, #0]
    aefe:	4543      	cmp	r3, r8
    af00:	d10a      	bne.n	af18 <bt_mesh_app_key_find+0x7c>
		err = cb(rx, cred->val, cb_data);
    af02:	464a      	mov	r2, r9
    af04:	3101      	adds	r1, #1
    af06:	4630      	mov	r0, r6
    af08:	47b8      	blx	r7
		if (err) {
    af0a:	b928      	cbnz	r0, af18 <bt_mesh_app_key_find+0x7c>
		return app->app_idx;
    af0c:	4807      	ldr	r0, [pc, #28]	; (af2c <bt_mesh_app_key_find+0x90>)
    af0e:	2328      	movs	r3, #40	; 0x28
    af10:	fb03 0404 	mla	r4, r3, r4, r0
    af14:	8860      	ldrh	r0, [r4, #2]
    af16:	e7d0      	b.n	aeba <bt_mesh_app_key_find+0x1e>
	for (i = 0; i < ARRAY_SIZE(apps); i++) {
    af18:	3528      	adds	r5, #40	; 0x28
    af1a:	2c00      	cmp	r4, #0
    af1c:	d1cb      	bne.n	aeb6 <bt_mesh_app_key_find+0x1a>
    af1e:	2401      	movs	r4, #1
    af20:	e7d9      	b.n	aed6 <bt_mesh_app_key_find+0x3a>
    af22:	bf00      	nop
    af24:	20001230 	.word	0x20001230
    af28:	20000a4e 	.word	0x20000a4e
    af2c:	20000a38 	.word	0x20000a38

0000af30 <va_set>:
	return &virtual_addrs[index];
}

static int va_set(const char *name, size_t len_rd,
		  settings_read_cb read_cb, void *cb_arg)
{
    af30:	b5f0      	push	{r4, r5, r6, r7, lr}
    af32:	460c      	mov	r4, r1
    af34:	b087      	sub	sp, #28
    af36:	4616      	mov	r6, r2
    af38:	461f      	mov	r7, r3
	struct va_val va;
	struct virtual_addr *lab;
	uint16_t index;
	int err;

	if (!name) {
    af3a:	b970      	cbnz	r0, af5a <va_set+0x2a>
    af3c:	4b30      	ldr	r3, [pc, #192]	; (b000 <va_set+0xd0>)
    af3e:	4931      	ldr	r1, [pc, #196]	; (b004 <va_set+0xd4>)
		BT_ERR("Insufficient number of arguments");
    af40:	4831      	ldr	r0, [pc, #196]	; (b008 <va_set+0xd8>)
    af42:	1ac9      	subs	r1, r1, r3
    af44:	08c9      	lsrs	r1, r1, #3
    af46:	0189      	lsls	r1, r1, #6
    af48:	f041 0101 	orr.w	r1, r1, #1
    af4c:	f00e fa79 	bl	19442 <log_0>
		return -ENOENT;
    af50:	f06f 0401 	mvn.w	r4, #1

	BT_DBG("Restored Virtual Address, addr 0x%04x ref 0x%04x",
	       lab->addr, lab->ref);

	return 0;
}
    af54:	4620      	mov	r0, r4
    af56:	b007      	add	sp, #28
    af58:	bdf0      	pop	{r4, r5, r6, r7, pc}
	index = strtol(name, NULL, 16);
    af5a:	2210      	movs	r2, #16
    af5c:	2100      	movs	r1, #0
    af5e:	f00f f847 	bl	19ff0 <strtol>
    af62:	4605      	mov	r5, r0
	if (len_rd == 0) {
    af64:	b954      	cbnz	r4, af7c <va_set+0x4c>
    af66:	4926      	ldr	r1, [pc, #152]	; (b000 <va_set+0xd0>)
    af68:	4b26      	ldr	r3, [pc, #152]	; (b004 <va_set+0xd4>)
		BT_WARN("Mesh Virtual Address length = 0");
    af6a:	4828      	ldr	r0, [pc, #160]	; (b00c <va_set+0xdc>)
    af6c:	1a5b      	subs	r3, r3, r1
    af6e:	08db      	lsrs	r3, r3, #3
    af70:	019b      	lsls	r3, r3, #6
    af72:	f043 0102 	orr.w	r1, r3, #2
		BT_WARN("Ignore Mesh Virtual Address ref = 0");
    af76:	f00e fa64 	bl	19442 <log_0>
		return 0;
    af7a:	e7eb      	b.n	af54 <va_set+0x24>
	err = bt_mesh_settings_set(read_cb, cb_arg, &va, sizeof(va));
    af7c:	2314      	movs	r3, #20
    af7e:	aa01      	add	r2, sp, #4
    af80:	4639      	mov	r1, r7
    af82:	4630      	mov	r0, r6
    af84:	f001 ff56 	bl	ce34 <bt_mesh_settings_set>
	if (err) {
    af88:	4604      	mov	r4, r0
    af8a:	b140      	cbz	r0, af9e <va_set+0x6e>
    af8c:	491d      	ldr	r1, [pc, #116]	; (b004 <va_set+0xd4>)
    af8e:	4b1c      	ldr	r3, [pc, #112]	; (b000 <va_set+0xd0>)
		BT_ERR("Failed to set \'virtual address\'");
    af90:	481f      	ldr	r0, [pc, #124]	; (b010 <va_set+0xe0>)
    af92:	1ac9      	subs	r1, r1, r3
    af94:	08c9      	lsrs	r1, r1, #3
    af96:	0189      	lsls	r1, r1, #6
    af98:	f041 0101 	orr.w	r1, r1, #1
    af9c:	e7eb      	b.n	af76 <va_set+0x46>
	if (va.ref == 0) {
    af9e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    afa2:	b943      	cbnz	r3, afb6 <va_set+0x86>
    afa4:	4917      	ldr	r1, [pc, #92]	; (b004 <va_set+0xd4>)
    afa6:	4b16      	ldr	r3, [pc, #88]	; (b000 <va_set+0xd0>)
		BT_WARN("Ignore Mesh Virtual Address ref = 0");
    afa8:	481a      	ldr	r0, [pc, #104]	; (b014 <va_set+0xe4>)
    afaa:	1ac9      	subs	r1, r1, r3
    afac:	08c9      	lsrs	r1, r1, #3
    afae:	0189      	lsls	r1, r1, #6
    afb0:	f041 0102 	orr.w	r1, r1, #2
    afb4:	e7df      	b.n	af76 <va_set+0x46>
	if (index >= ARRAY_SIZE(virtual_addrs)) {
    afb6:	b2ab      	uxth	r3, r5
    afb8:	2b02      	cmp	r3, #2
    afba:	d814      	bhi.n	afe6 <va_set+0xb6>
	return &virtual_addrs[index];
    afbc:	461d      	mov	r5, r3
	memcpy(lab->uuid, va.uuid, 16);
    afbe:	2014      	movs	r0, #20
    afc0:	4e15      	ldr	r6, [pc, #84]	; (b018 <va_set+0xe8>)
    afc2:	4345      	muls	r5, r0
    afc4:	1d28      	adds	r0, r5, #4
    afc6:	2210      	movs	r2, #16
    afc8:	a902      	add	r1, sp, #8
    afca:	4430      	add	r0, r6
    afcc:	f00f f957 	bl	1a27e <memcpy>
	lab->addr = va.addr;
    afd0:	1973      	adds	r3, r6, r5
    afd2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    afd6:	805a      	strh	r2, [r3, #2]
	lab->ref = va.ref;
    afd8:	5b73      	ldrh	r3, [r6, r5]
    afda:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    afde:	f362 030e 	bfi	r3, r2, #0, #15
    afe2:	5373      	strh	r3, [r6, r5]
	return 0;
    afe4:	e7b6      	b.n	af54 <va_set+0x24>
    afe6:	4b06      	ldr	r3, [pc, #24]	; (b000 <va_set+0xd0>)
    afe8:	4906      	ldr	r1, [pc, #24]	; (b004 <va_set+0xd4>)
		BT_WARN("Out of labels buffers");
    afea:	480c      	ldr	r0, [pc, #48]	; (b01c <va_set+0xec>)
    afec:	1ac9      	subs	r1, r1, r3
    afee:	08c9      	lsrs	r1, r1, #3
    aff0:	0189      	lsls	r1, r1, #6
    aff2:	f041 0102 	orr.w	r1, r1, #2
    aff6:	f00e fa24 	bl	19442 <log_0>
		return -ENOBUFS;
    affa:	f06f 0468 	mvn.w	r4, #104	; 0x68
    affe:	e7a9      	b.n	af54 <va_set+0x24>
    b000:	0001ef2c 	.word	0x0001ef2c
    b004:	0001f0f4 	.word	0x0001f0f4
    b008:	0002008c 	.word	0x0002008c
    b00c:	0002189a 	.word	0x0002189a
    b010:	000218ba 	.word	0x000218ba
    b014:	000218da 	.word	0x000218da
    b018:	20002e2a 	.word	0x20002e2a
    b01c:	000218fe 	.word	0x000218fe

0000b020 <seg_rx_reset>:
{
    b020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b024:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable(&rx->ack);
    b026:	3030      	adds	r0, #48	; 0x30
{
    b028:	460f      	mov	r7, r1
	(void)k_work_cancel_delayable(&rx->ack);
    b02a:	f013 fb27 	bl	1e67c <k_work_cancel_delayable>
	for (i = 0; i <= rx->seg_n; i++) {
    b02e:	2500      	movs	r5, #0
		k_mem_slab_free(&segs, &rx->seg[i]);
    b030:	f8df 803c 	ldr.w	r8, [pc, #60]	; b070 <seg_rx_reset+0x50>
    b034:	1d26      	adds	r6, r4, #4
		rx->seg[i] = NULL;
    b036:	46a9      	mov	r9, r5
		if (!rx->seg[i]) {
    b038:	4631      	mov	r1, r6
    b03a:	3604      	adds	r6, #4
    b03c:	680b      	ldr	r3, [r1, #0]
    b03e:	b123      	cbz	r3, b04a <seg_rx_reset+0x2a>
		k_mem_slab_free(&segs, &rx->seg[i]);
    b040:	4640      	mov	r0, r8
    b042:	f013 f923 	bl	1e28c <k_mem_slab_free>
		rx->seg[i] = NULL;
    b046:	f846 9c04 	str.w	r9, [r6, #-4]
	for (i = 0; i <= rx->seg_n; i++) {
    b04a:	7fe3      	ldrb	r3, [r4, #31]
    b04c:	3501      	adds	r5, #1
    b04e:	f003 021f 	and.w	r2, r3, #31
    b052:	4295      	cmp	r5, r2
    b054:	ddf0      	ble.n	b038 <seg_rx_reset+0x18>
	rx->in_use = 0U;
    b056:	f36f 1386 	bfc	r3, #6, #1
    b05a:	77e3      	strb	r3, [r4, #31]
	if (full_reset) {
    b05c:	b137      	cbz	r7, b06c <seg_rx_reset+0x4c>
		rx->seq_auth = 0U;
    b05e:	2000      	movs	r0, #0
    b060:	2100      	movs	r1, #0
    b062:	e9c4 0104 	strd	r0, r1, [r4, #16]
		rx->sub = NULL;
    b066:	2300      	movs	r3, #0
    b068:	6023      	str	r3, [r4, #0]
		rx->src = BT_MESH_ADDR_UNASSIGNED;
    b06a:	61a3      	str	r3, [r4, #24]
}
    b06c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b070:	20000b3c 	.word	0x20000b3c

0000b074 <seg_tx_reset>:
{
    b074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b078:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable(&tx->retransmit);
    b07a:	3040      	adds	r0, #64	; 0x40
    b07c:	f013 fafe 	bl	1e67c <k_work_cancel_delayable>
	tx->cb = NULL;
    b080:	2500      	movs	r5, #0
	tx->blocked = false;
    b082:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
    b086:	4f20      	ldr	r7, [pc, #128]	; (b108 <seg_tx_reset+0x94>)
	tx->sub = NULL;
    b088:	6025      	str	r5, [r4, #0]
	tx->seq_auth = 0U;
    b08a:	2000      	movs	r0, #0
    b08c:	2100      	movs	r1, #0
	tx->cb_data = NULL;
    b08e:	e9c4 550e 	strd	r5, r5, [r4, #56]	; 0x38
	tx->seq_auth = 0U;
    b092:	e9c4 0108 	strd	r0, r1, [r4, #32]
	tx->blocked = false;
    b096:	f365 0200 	bfi	r2, r5, #0, #1
	tx->src = BT_MESH_ADDR_UNASSIGNED;
    b09a:	62a5      	str	r5, [r4, #40]	; 0x28
	tx->blocked = false;
    b09c:	f884 2036 	strb.w	r2, [r4, #54]	; 0x36
	for (i = 0; i <= tx->seg_n && tx->nack_count; i++) {
    b0a0:	1d26      	adds	r6, r4, #4
	tx->seg[seg_idx] = NULL;
    b0a2:	46a8      	mov	r8, r5
	for (i = 0; i <= tx->seg_n && tx->nack_count; i++) {
    b0a4:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    b0a8:	b19b      	cbz	r3, b0d2 <seg_tx_reset+0x5e>
		if (!tx->seg[i]) {
    b0aa:	6833      	ldr	r3, [r6, #0]
    b0ac:	b153      	cbz	r3, b0c4 <seg_tx_reset+0x50>
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
    b0ae:	4631      	mov	r1, r6
    b0b0:	4638      	mov	r0, r7
    b0b2:	f013 f8eb 	bl	1e28c <k_mem_slab_free>
	tx->seg[seg_idx] = NULL;
    b0b6:	f8c6 8000 	str.w	r8, [r6]
	tx->nack_count--;
    b0ba:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    b0be:	3b01      	subs	r3, #1
    b0c0:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	for (i = 0; i <= tx->seg_n && tx->nack_count; i++) {
    b0c4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    b0c8:	3501      	adds	r5, #1
    b0ca:	42ab      	cmp	r3, r5
    b0cc:	f106 0604 	add.w	r6, r6, #4
    b0d0:	dae8      	bge.n	b0a4 <seg_tx_reset+0x30>
	tx->nack_count = 0;
    b0d2:	2100      	movs	r1, #0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b0d4:	4b0d      	ldr	r3, [pc, #52]	; (b10c <seg_tx_reset+0x98>)
    b0d6:	f884 1032 	strb.w	r1, [r4, #50]	; 0x32
    b0da:	f3bf 8f5b 	dmb	ish
    b0de:	e853 2f00 	ldrex	r2, [r3]
    b0e2:	f022 0020 	bic.w	r0, r2, #32
    b0e6:	e843 0400 	strex	r4, r0, [r3]
    b0ea:	2c00      	cmp	r4, #0
    b0ec:	d1f7      	bne.n	b0de <seg_tx_reset+0x6a>
    b0ee:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_IVU_PENDING)) {
    b0f2:	0692      	lsls	r2, r2, #26
    b0f4:	d505      	bpl.n	b102 <seg_tx_reset+0x8e>
}
    b0f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
    b0fa:	f853 0c08 	ldr.w	r0, [r3, #-8]
    b0fe:	f7fe bebd 	b.w	9e7c <bt_mesh_net_iv_update>
}
    b102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b106:	bf00      	nop
    b108:	20000b3c 	.word	0x20000b3c
    b10c:	200011e0 	.word	0x200011e0

0000b110 <seg_tx_complete>:
{
    b110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b114:	4604      	mov	r4, r0
	void *cb_data = tx->cb_data;
    b116:	e9d0 670e 	ldrd	r6, r7, [r0, #56]	; 0x38
		if (&seg_tx[i] != tx &&
    b11a:	4813      	ldr	r0, [pc, #76]	; (b168 <seg_tx_complete+0x58>)
    b11c:	4284      	cmp	r4, r0
{
    b11e:	460d      	mov	r5, r1
		if (&seg_tx[i] != tx &&
    b120:	d014      	beq.n	b14c <seg_tx_complete+0x3c>
		    seg_tx[i].blocked &&
    b122:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
		if (&seg_tx[i] != tx &&
    b126:	07da      	lsls	r2, r3, #31
    b128:	d510      	bpl.n	b14c <seg_tx_complete+0x3c>
	return (tx->src == src) && (tx->dst == dst);
    b12a:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    b12c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    b12e:	4291      	cmp	r1, r2
    b130:	d10c      	bne.n	b14c <seg_tx_complete+0x3c>
    b132:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
    b134:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    b136:	4291      	cmp	r1, r2
    b138:	d108      	bne.n	b14c <seg_tx_complete+0x3c>
		blocked->blocked = false;
    b13a:	f36f 0300 	bfc	r3, #0, #1
    b13e:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
		k_work_reschedule(&blocked->retransmit, K_NO_WAIT);
    b142:	2200      	movs	r2, #0
    b144:	2300      	movs	r3, #0
    b146:	3040      	adds	r0, #64	; 0x40
    b148:	f00c fe8e 	bl	17e68 <k_work_reschedule>
	seg_tx_reset(tx);
    b14c:	4620      	mov	r0, r4
    b14e:	f7ff ff91 	bl	b074 <seg_tx_reset>
	if (cb && cb->end) {
    b152:	b136      	cbz	r6, b162 <seg_tx_complete+0x52>
    b154:	6873      	ldr	r3, [r6, #4]
    b156:	b123      	cbz	r3, b162 <seg_tx_complete+0x52>
		cb->end(err, cb_data);
    b158:	4639      	mov	r1, r7
    b15a:	4628      	mov	r0, r5
}
    b15c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb->end(err, cb_data);
    b160:	4718      	bx	r3
}
    b162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b166:	bf00      	nop
    b168:	200012a0 	.word	0x200012a0

0000b16c <seg_tx_send_unacked>:
{
    b16c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!tx->nack_count) {
    b170:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
{
    b174:	b086      	sub	sp, #24
    b176:	4604      	mov	r4, r0
	if (!tx->nack_count) {
    b178:	2b00      	cmp	r3, #0
    b17a:	d03d      	beq.n	b1f8 <seg_tx_send_unacked+0x8c>
		.net_idx = tx->sub->net_idx,
    b17c:	6801      	ldr	r1, [r0, #0]
	struct bt_mesh_net_tx net_tx = {
    b17e:	9103      	str	r1, [sp, #12]
	struct bt_mesh_msg_ctx ctx = {
    b180:	2300      	movs	r3, #0
    b182:	2501      	movs	r5, #1
    b184:	f8cd 3006 	str.w	r3, [sp, #6]
    b188:	8b8b      	ldrh	r3, [r1, #28]
    b18a:	f8ad 3000 	strh.w	r3, [sp]
	struct bt_mesh_net_tx net_tx = {
    b18e:	8d01      	ldrh	r1, [r0, #40]	; 0x28
	struct bt_mesh_msg_ctx ctx = {
    b190:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
    b194:	f88d 500a 	strb.w	r5, [sp, #10]
    b198:	f890 5034 	ldrb.w	r5, [r0, #52]	; 0x34
    b19c:	f88d 500b 	strb.w	r5, [sp, #11]
	struct bt_mesh_net_tx net_tx = {
    b1a0:	f8ad 1014 	strh.w	r1, [sp, #20]
    b1a4:	f890 502e 	ldrb.w	r5, [r0, #46]	; 0x2e
    b1a8:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    b1ac:	f88d 1016 	strb.w	r1, [sp, #22]
		.friend_cred = tx->friend_cred,
    b1b0:	f3c3 1140 	ubfx	r1, r3, #5, #1
	struct bt_mesh_net_tx net_tx = {
    b1b4:	ea41 0185 	orr.w	r1, r1, r5, lsl #2
	struct bt_mesh_msg_ctx ctx = {
    b1b8:	f343 0240 	sbfx	r2, r3, #1, #1
	struct bt_mesh_net_tx net_tx = {
    b1bc:	f88d 1017 	strb.w	r1, [sp, #23]
	if (!tx->attempts) {
    b1c0:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
	struct bt_mesh_msg_ctx ctx = {
    b1c4:	f8ad 2002 	strh.w	r2, [sp, #2]
		.addr = tx->dst,
    b1c8:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
	struct bt_mesh_msg_ctx ctx = {
    b1ca:	f8ad 2004 	strh.w	r2, [sp, #4]
	struct bt_mesh_net_tx net_tx = {
    b1ce:	f8cd d010 	str.w	sp, [sp, #16]
	if (!tx->attempts) {
    b1d2:	b9a1      	cbnz	r1, b1fe <seg_tx_send_unacked+0x92>
		if (BT_MESH_ADDR_IS_UNICAST(tx->dst)) {
    b1d4:	b212      	sxth	r2, r2
    b1d6:	2a00      	cmp	r2, #0
    b1d8:	dd0c      	ble.n	b1f4 <seg_tx_send_unacked+0x88>
    b1da:	4b5b      	ldr	r3, [pc, #364]	; (b348 <seg_tx_send_unacked+0x1dc>)
    b1dc:	495b      	ldr	r1, [pc, #364]	; (b34c <seg_tx_send_unacked+0x1e0>)
			BT_ERR("Ran out of retransmit attempts");
    b1de:	485c      	ldr	r0, [pc, #368]	; (b350 <seg_tx_send_unacked+0x1e4>)
    b1e0:	1ac9      	subs	r1, r1, r3
    b1e2:	08c9      	lsrs	r1, r1, #3
    b1e4:	0189      	lsls	r1, r1, #6
    b1e6:	f041 0101 	orr.w	r1, r1, #1
    b1ea:	f00e f92a 	bl	19442 <log_0>
			seg_tx_complete(tx, -ETIMEDOUT);
    b1ee:	f06f 0173 	mvn.w	r1, #115	; 0x73
    b1f2:	4620      	mov	r0, r4
			seg_tx_complete(tx, 0);
    b1f4:	f7ff ff8c 	bl	b110 <seg_tx_complete>
}
    b1f8:	b006      	add	sp, #24
    b1fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	tx->sending = 1U;
    b1fe:	f043 0310 	orr.w	r3, r3, #16
		err = bt_mesh_net_send(&net_tx, seg, &seg_sent_cb, tx);
    b202:	f8df 8150 	ldr.w	r8, [pc, #336]	; b354 <seg_tx_send_unacked+0x1e8>
	tx->sending = 1U;
    b206:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
	for (; tx->seg_o <= tx->seg_n; tx->seg_o++) {
    b20a:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    b20e:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
    b212:	429a      	cmp	r2, r3
    b214:	d208      	bcs.n	b228 <seg_tx_send_unacked+0xbc>
	tx->seg_o = 0U;
    b216:	2300      	movs	r3, #0
    b218:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	tx->attempts--;
    b21c:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    b220:	3b01      	subs	r3, #1
    b222:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    b226:	e067      	b.n	b2f8 <seg_tx_send_unacked+0x18c>
		if (!tx->seg[tx->seg_o]) {
    b228:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    b22c:	685b      	ldr	r3, [r3, #4]
    b22e:	b92b      	cbnz	r3, b23c <seg_tx_send_unacked+0xd0>
	for (; tx->seg_o <= tx->seg_n; tx->seg_o++) {
    b230:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    b234:	3301      	adds	r3, #1
    b236:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    b23a:	e7e6      	b.n	b20a <seg_tx_send_unacked+0x9e>
		seg = bt_mesh_adv_create(BT_MESH_ADV_DATA, tx->xmit,
    b23c:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    b240:	2200      	movs	r2, #0
    b242:	2300      	movs	r3, #0
    b244:	2001      	movs	r0, #1
    b246:	f7fe fab1 	bl	97ac <bt_mesh_adv_create>
		if (!seg) {
    b24a:	4607      	mov	r7, r0
    b24c:	2800      	cmp	r0, #0
    b24e:	d053      	beq.n	b2f8 <seg_tx_send_unacked+0x18c>
	net_buf_simple_reserve(&buf->b, reserve);
    b250:	f100 0508 	add.w	r5, r0, #8
    b254:	2109      	movs	r1, #9
    b256:	4628      	mov	r0, r5
    b258:	f012 fc77 	bl	1db4a <net_buf_simple_reserve>
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
    b25c:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
		seg_tx_buf_build(tx, tx->seg_o, &seg->b);
    b260:	f894 6031 	ldrb.w	r6, [r4, #49]	; 0x31
	uint16_t seq_zero = tx->seq_auth & TRANS_SEQ_ZERO_MASK;
    b264:	f8b4 a020 	ldrh.w	sl, [r4, #32]
	net_buf_simple_add_u8(buf, tx->hdr);
    b268:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
		return BT_MESH_APP_SEG_SDU_MAX;
    b26c:	f013 0f02 	tst.w	r3, #2
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
    b270:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
		return BT_MESH_APP_SEG_SDU_MAX;
    b272:	bf14      	ite	ne
    b274:	f04f 0908 	movne.w	r9, #8
    b278:	f04f 090c 	moveq.w	r9, #12
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
    b27c:	fb09 3316 	mls	r3, r9, r6, r3
    b280:	4599      	cmp	r9, r3
	net_buf_simple_add_u8(buf, tx->hdr);
    b282:	4628      	mov	r0, r5
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
    b284:	bfa8      	it	ge
    b286:	fa5f f983 	uxtbge.w	r9, r3
	net_buf_simple_add_u8(buf, tx->hdr);
    b28a:	f012 fccd 	bl	1dc28 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, (tx->aszmic << 7) | seq_zero >> 6);
    b28e:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
	uint16_t seq_zero = tx->seq_auth & TRANS_SEQ_ZERO_MASK;
    b292:	f3ca 0a0c 	ubfx	sl, sl, #0, #13
	net_buf_simple_add_u8(buf, (tx->aszmic << 7) | seq_zero >> 6);
    b296:	f3c3 0380 	ubfx	r3, r3, #2, #1
    b29a:	ea4f 119a 	mov.w	r1, sl, lsr #6
    b29e:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
    b2a2:	4628      	mov	r0, r5
    b2a4:	f012 fcc0 	bl	1dc28 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, (((seq_zero & 0x3f) << 2) | (seg_o >> 3)));
    b2a8:	08f1      	lsrs	r1, r6, #3
    b2aa:	ea41 018a 	orr.w	r1, r1, sl, lsl #2
    b2ae:	b2c9      	uxtb	r1, r1
    b2b0:	4628      	mov	r0, r5
    b2b2:	f012 fcb9 	bl	1dc28 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, ((seg_o & 0x07) << 5) | tx->seg_n);
    b2b6:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    b2ba:	ea41 1146 	orr.w	r1, r1, r6, lsl #5
	net_buf_simple_add_mem(buf, tx->seg[seg_o], len);
    b2be:	eb04 0686 	add.w	r6, r4, r6, lsl #2
	net_buf_simple_add_u8(buf, ((seg_o & 0x07) << 5) | tx->seg_n);
    b2c2:	b2c9      	uxtb	r1, r1
    b2c4:	4628      	mov	r0, r5
    b2c6:	f012 fcaf 	bl	1dc28 <net_buf_simple_add_u8>
	net_buf_simple_add_mem(buf, tx->seg[seg_o], len);
    b2ca:	6871      	ldr	r1, [r6, #4]
    b2cc:	464a      	mov	r2, r9
    b2ce:	4628      	mov	r0, r5
    b2d0:	f012 fca1 	bl	1dc16 <net_buf_simple_add_mem>
		tx->seg_pending++;
    b2d4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    b2d8:	3301      	adds	r3, #1
    b2da:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
		err = bt_mesh_net_send(&net_tx, seg, &seg_sent_cb, tx);
    b2de:	4642      	mov	r2, r8
    b2e0:	4623      	mov	r3, r4
    b2e2:	4639      	mov	r1, r7
    b2e4:	a803      	add	r0, sp, #12
    b2e6:	f7fe ff33 	bl	a150 <bt_mesh_net_send>
		if (err) {
    b2ea:	2800      	cmp	r0, #0
    b2ec:	d0a0      	beq.n	b230 <seg_tx_send_unacked+0xc4>
			tx->seg_pending--;
    b2ee:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    b2f2:	3b01      	subs	r3, #1
    b2f4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	if (!tx->seg_pending) {
    b2f8:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
    b2fc:	b9e1      	cbnz	r1, b338 <seg_tx_send_unacked+0x1cc>
				  K_MSEC(SEG_RETRANSMIT_TIMEOUT(tx)));
    b2fe:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
    b302:	2b00      	cmp	r3, #0
    b304:	bfc4      	itt	gt
    b306:	f894 2034 	ldrbgt.w	r2, [r4, #52]	; 0x34
    b30a:	f44f 73c8 	movgt.w	r3, #400	; 0x190
    b30e:	f04f 0032 	mov.w	r0, #50	; 0x32
    b312:	bfc8      	it	gt
    b314:	fb00 3002 	mlagt	r0, r0, r2, r3
		} else {
			return (t * to_hz + off) / from_hz;
    b318:	03c0      	lsls	r0, r0, #15
    b31a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b31e:	2300      	movs	r3, #0
    b320:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    b324:	03c9      	lsls	r1, r1, #15
    b326:	f7f4 ff2b 	bl	180 <__aeabi_uldivmod>
		k_work_reschedule(&tx->retransmit,
    b32a:	f104 0540 	add.w	r5, r4, #64	; 0x40
    b32e:	4602      	mov	r2, r0
    b330:	460b      	mov	r3, r1
    b332:	4628      	mov	r0, r5
    b334:	f00c fd98 	bl	17e68 <k_work_reschedule>
	tx->sending = 0U;
    b338:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
    b33c:	f36f 1304 	bfc	r3, #4, #1
    b340:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    b344:	e758      	b.n	b1f8 <seg_tx_send_unacked+0x8c>
    b346:	bf00      	nop
    b348:	0001ef2c 	.word	0x0001ef2c
    b34c:	0001f0f4 	.word	0x0001f0f4
    b350:	00021914 	.word	0x00021914
    b354:	0001f6d8 	.word	0x0001f6d8

0000b358 <ctl_recv>:
{
    b358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	switch (ctl_op) {
    b35c:	f011 077f 	ands.w	r7, r1, #127	; 0x7f
{
    b360:	4605      	mov	r5, r0
    b362:	4614      	mov	r4, r2
    b364:	4699      	mov	r9, r3
	switch (ctl_op) {
    b366:	d014      	beq.n	b392 <ctl_recv+0x3a>
    b368:	2f0a      	cmp	r7, #10
    b36a:	f000 80b1 	beq.w	b4d0 <ctl_recv+0x178>
	if (!rx->local_match) {
    b36e:	7d04      	ldrb	r4, [r0, #20]
    b370:	f014 0440 	ands.w	r4, r4, #64	; 0x40
    b374:	d01c      	beq.n	b3b0 <ctl_recv+0x58>
    b376:	4b5d      	ldr	r3, [pc, #372]	; (b4ec <ctl_recv+0x194>)
    b378:	4a5d      	ldr	r2, [pc, #372]	; (b4f0 <ctl_recv+0x198>)
	BT_WARN("Unhandled TransOpCode 0x%02x", ctl_op);
    b37a:	485e      	ldr	r0, [pc, #376]	; (b4f4 <ctl_recv+0x19c>)
    b37c:	1ad2      	subs	r2, r2, r3
    b37e:	08d2      	lsrs	r2, r2, #3
    b380:	0192      	lsls	r2, r2, #6
    b382:	f042 0202 	orr.w	r2, r2, #2
    b386:	4639      	mov	r1, r7
    b388:	f00e f868 	bl	1945c <log_1>
	return -ENOENT;
    b38c:	f06f 0401 	mvn.w	r4, #1
    b390:	e00e      	b.n	b3b0 <ctl_recv+0x58>
	if (buf->len < 6) {
    b392:	8893      	ldrh	r3, [r2, #4]
    b394:	2b05      	cmp	r3, #5
    b396:	d80e      	bhi.n	b3b6 <ctl_recv+0x5e>
    b398:	4955      	ldr	r1, [pc, #340]	; (b4f0 <ctl_recv+0x198>)
    b39a:	4b54      	ldr	r3, [pc, #336]	; (b4ec <ctl_recv+0x194>)
		BT_ERR("Too short ack message");
    b39c:	4856      	ldr	r0, [pc, #344]	; (b4f8 <ctl_recv+0x1a0>)
    b39e:	1ac9      	subs	r1, r1, r3
    b3a0:	08c9      	lsrs	r1, r1, #3
    b3a2:	0189      	lsls	r1, r1, #6
    b3a4:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Received ack for group seg");
    b3a8:	f00e f84b 	bl	19442 <log_0>
		return -EINVAL;
    b3ac:	f06f 0415 	mvn.w	r4, #21
}
    b3b0:	4620      	mov	r0, r4
    b3b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	seq_zero = net_buf_simple_pull_be16(buf);
    b3b6:	4610      	mov	r0, r2
    b3b8:	f012 fca0 	bl	1dcfc <net_buf_simple_pull_be16>
	seq_zero = (seq_zero >> 2) & TRANS_SEQ_ZERO_MASK;
    b3bc:	f3c0 088f 	ubfx	r8, r0, #2, #16
	obo = seq_zero >> 15;
    b3c0:	f3c0 3acf 	ubfx	sl, r0, #15, #16
	ack = net_buf_simple_pull_be32(buf);
    b3c4:	4620      	mov	r0, r4
    b3c6:	f012 fca3 	bl	1dd10 <net_buf_simple_pull_be32>
	tx = seg_tx_lookup(seq_zero, obo, rx->ctx.addr);
    b3ca:	8929      	ldrh	r1, [r5, #8]
		if ((tx->seq_auth & TRANS_SEQ_ZERO_MASK) != seq_zero) {
    b3cc:	4d4b      	ldr	r5, [pc, #300]	; (b4fc <ctl_recv+0x1a4>)
    b3ce:	e9d5 3408 	ldrd	r3, r4, [r5, #32]
	ack = net_buf_simple_pull_be32(buf);
    b3d2:	4606      	mov	r6, r0
		if ((tx->seq_auth & TRANS_SEQ_ZERO_MASK) != seq_zero) {
    b3d4:	f3c3 020c 	ubfx	r2, r3, #0, #13
    b3d8:	f3c8 000c 	ubfx	r0, r8, #0, #13
    b3dc:	42bf      	cmp	r7, r7
    b3de:	bf08      	it	eq
    b3e0:	4282      	cmpeq	r2, r0
    b3e2:	d17a      	bne.n	b4da <ctl_recv+0x182>
		if (tx->dst == addr) {
    b3e4:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
    b3e6:	428a      	cmp	r2, r1
    b3e8:	d00a      	beq.n	b400 <ctl_recv+0xa8>
		if (obo && tx->nack_count == tx->seg_n + 1) {
    b3ea:	f1ba 0f00 	cmp.w	sl, #0
    b3ee:	d074      	beq.n	b4da <ctl_recv+0x182>
    b3f0:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
    b3f4:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    b3f8:	3201      	adds	r2, #1
    b3fa:	4290      	cmp	r0, r2
    b3fc:	d16d      	bne.n	b4da <ctl_recv+0x182>
			tx->dst = addr;
    b3fe:	8569      	strh	r1, [r5, #42]	; 0x2a
	if (!BT_MESH_ADDR_IS_UNICAST(tx->dst)) {
    b400:	f9b5 202a 	ldrsh.w	r2, [r5, #42]	; 0x2a
    b404:	2a00      	cmp	r2, #0
    b406:	dc08      	bgt.n	b41a <ctl_recv+0xc2>
    b408:	4939      	ldr	r1, [pc, #228]	; (b4f0 <ctl_recv+0x198>)
    b40a:	4b38      	ldr	r3, [pc, #224]	; (b4ec <ctl_recv+0x194>)
		BT_ERR("Received ack for group seg");
    b40c:	483c      	ldr	r0, [pc, #240]	; (b500 <ctl_recv+0x1a8>)
    b40e:	1ac9      	subs	r1, r1, r3
    b410:	08c9      	lsrs	r1, r1, #3
    b412:	0189      	lsls	r1, r1, #6
    b414:	f041 0101 	orr.w	r1, r1, #1
    b418:	e7c6      	b.n	b3a8 <ctl_recv+0x50>
	*seq_auth = tx->seq_auth;
    b41a:	e9c9 3400 	strd	r3, r4, [r9]
	if (!ack) {
    b41e:	b986      	cbnz	r6, b442 <ctl_recv+0xea>
    b420:	4b32      	ldr	r3, [pc, #200]	; (b4ec <ctl_recv+0x194>)
    b422:	4933      	ldr	r1, [pc, #204]	; (b4f0 <ctl_recv+0x198>)
		BT_WARN("SDU canceled");
    b424:	4837      	ldr	r0, [pc, #220]	; (b504 <ctl_recv+0x1ac>)
    b426:	1ac9      	subs	r1, r1, r3
    b428:	08c9      	lsrs	r1, r1, #3
    b42a:	0189      	lsls	r1, r1, #6
    b42c:	f041 0102 	orr.w	r1, r1, #2
    b430:	f00e f807 	bl	19442 <log_0>
		seg_tx_complete(tx, -ECANCELED);
    b434:	4831      	ldr	r0, [pc, #196]	; (b4fc <ctl_recv+0x1a4>)
    b436:	f06f 018b 	mvn.w	r1, #139	; 0x8b
    b43a:	f7ff fe69 	bl	b110 <seg_tx_complete>
		return 0;
    b43e:	4634      	mov	r4, r6
    b440:	e7b6      	b.n	b3b0 <ctl_recv+0x58>
	if (find_msb_set(ack) - 1 > tx->seg_n) {
    b442:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
{
	if (op == 0) {
		return 0;
	}

	return 32 - __builtin_clz(op);
    b446:	fab6 f386 	clz	r3, r6
    b44a:	f1c3 031f 	rsb	r3, r3, #31
    b44e:	4293      	cmp	r3, r2
    b450:	d818      	bhi.n	b484 <ctl_recv+0x12c>
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
    b452:	f8df a0b4 	ldr.w	sl, [pc, #180]	; b508 <ctl_recv+0x1b0>
	tx->seg[seg_idx] = NULL;
    b456:	f04f 0800 	mov.w	r8, #0
		ack &= ~BIT(bit - 1);
    b45a:	f04f 0901 	mov.w	r9, #1
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
    b45e:	2e00      	cmp	r6, #0
    b460:	fa96 f7a6 	rbit	r7, r6
    b464:	fab7 f787 	clz	r7, r7
    b468:	bf08      	it	eq
    b46a:	f04f 37ff 	moveq.w	r7, #4294967295	; 0xffffffff
	while ((bit = find_lsb_set(ack))) {
    b46e:	1c7c      	adds	r4, r7, #1
    b470:	d111      	bne.n	b496 <ctl_recv+0x13e>
	if (tx->nack_count) {
    b472:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
    b476:	b333      	cbz	r3, b4c6 <ctl_recv+0x16e>
		k_work_reschedule(&tx->retransmit, K_NO_WAIT);
    b478:	2200      	movs	r2, #0
    b47a:	2300      	movs	r3, #0
    b47c:	4823      	ldr	r0, [pc, #140]	; (b50c <ctl_recv+0x1b4>)
    b47e:	f00c fcf3 	bl	17e68 <k_work_reschedule>
    b482:	e795      	b.n	b3b0 <ctl_recv+0x58>
    b484:	491a      	ldr	r1, [pc, #104]	; (b4f0 <ctl_recv+0x198>)
    b486:	4b19      	ldr	r3, [pc, #100]	; (b4ec <ctl_recv+0x194>)
		BT_ERR("Too large segment number in ack");
    b488:	4821      	ldr	r0, [pc, #132]	; (b510 <ctl_recv+0x1b8>)
    b48a:	1ac9      	subs	r1, r1, r3
    b48c:	08c9      	lsrs	r1, r1, #3
    b48e:	0189      	lsls	r1, r1, #6
    b490:	f041 0101 	orr.w	r1, r1, #1
    b494:	e788      	b.n	b3a8 <ctl_recv+0x50>
		if (tx->seg[bit - 1]) {
    b496:	eb05 0387 	add.w	r3, r5, r7, lsl #2
    b49a:	685b      	ldr	r3, [r3, #4]
    b49c:	b173      	cbz	r3, b4bc <ctl_recv+0x164>
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
    b49e:	eb05 0184 	add.w	r1, r5, r4, lsl #2
    b4a2:	4650      	mov	r0, sl
    b4a4:	f012 fef2 	bl	1e28c <k_mem_slab_free>
    b4a8:	b2fb      	uxtb	r3, r7
	tx->seg[seg_idx] = NULL;
    b4aa:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    b4ae:	f8c3 8004 	str.w	r8, [r3, #4]
	tx->nack_count--;
    b4b2:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
    b4b6:	3b01      	subs	r3, #1
    b4b8:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
		ack &= ~BIT(bit - 1);
    b4bc:	fa09 f707 	lsl.w	r7, r9, r7
    b4c0:	ea26 0607 	bic.w	r6, r6, r7
    b4c4:	e7cb      	b.n	b45e <ctl_recv+0x106>
		seg_tx_complete(tx, 0);
    b4c6:	480d      	ldr	r0, [pc, #52]	; (b4fc <ctl_recv+0x1a4>)
    b4c8:	4621      	mov	r1, r4
    b4ca:	f7ff fe21 	bl	b110 <seg_tx_complete>
    b4ce:	e76f      	b.n	b3b0 <ctl_recv+0x58>
}
    b4d0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return bt_mesh_hb_recv(rx, buf);
    b4d4:	4611      	mov	r1, r2
    b4d6:	f000 bf0f 	b.w	c2f8 <bt_mesh_hb_recv>
    b4da:	4905      	ldr	r1, [pc, #20]	; (b4f0 <ctl_recv+0x198>)
    b4dc:	4b03      	ldr	r3, [pc, #12]	; (b4ec <ctl_recv+0x194>)
		BT_WARN("No matching TX context for ack");
    b4de:	480d      	ldr	r0, [pc, #52]	; (b514 <ctl_recv+0x1bc>)
    b4e0:	1ac9      	subs	r1, r1, r3
    b4e2:	08c9      	lsrs	r1, r1, #3
    b4e4:	0189      	lsls	r1, r1, #6
    b4e6:	f041 0102 	orr.w	r1, r1, #2
    b4ea:	e75d      	b.n	b3a8 <ctl_recv+0x50>
    b4ec:	0001ef2c 	.word	0x0001ef2c
    b4f0:	0001f0f4 	.word	0x0001f0f4
    b4f4:	00021991 	.word	0x00021991
    b4f8:	00021933 	.word	0x00021933
    b4fc:	200012a0 	.word	0x200012a0
    b500:	00021949 	.word	0x00021949
    b504:	00021964 	.word	0x00021964
    b508:	20000b3c 	.word	0x20000b3c
    b50c:	200012e0 	.word	0x200012e0
    b510:	00021971 	.word	0x00021971
    b514:	000219ae 	.word	0x000219ae

0000b518 <send_seg>:
{
    b518:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (seg_tx[i].nack_count) {
    b51c:	4c5f      	ldr	r4, [pc, #380]	; (b69c <send_seg+0x184>)
{
    b51e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
		if (seg_tx[i].nack_count) {
    b520:	f894 e032 	ldrb.w	lr, [r4, #50]	; 0x32
			blocked |= seg_tx_blocks(&seg_tx[i], net_tx->src,
    b524:	f8b0 c008 	ldrh.w	ip, [r0, #8]
{
    b528:	460d      	mov	r5, r1
						 net_tx->ctx->addr);
    b52a:	6841      	ldr	r1, [r0, #4]
			blocked |= seg_tx_blocks(&seg_tx[i], net_tx->src,
    b52c:	888f      	ldrh	r7, [r1, #4]
		if (seg_tx[i].nack_count) {
    b52e:	f1be 0f00 	cmp.w	lr, #0
    b532:	d00e      	beq.n	b552 <send_seg+0x3a>
    b534:	4b5a      	ldr	r3, [pc, #360]	; (b6a0 <send_seg+0x188>)
    b536:	495b      	ldr	r1, [pc, #364]	; (b6a4 <send_seg+0x18c>)
		BT_ERR("No multi-segment message contexts available");
    b538:	485b      	ldr	r0, [pc, #364]	; (b6a8 <send_seg+0x190>)
    b53a:	1ac9      	subs	r1, r1, r3
    b53c:	08c9      	lsrs	r1, r1, #3
    b53e:	0189      	lsls	r1, r1, #6
    b540:	f041 0101 	orr.w	r1, r1, #1
    b544:	f00d ff7d 	bl	19442 <log_0>
		return -EBUSY;
    b548:	f06f 000f 	mvn.w	r0, #15
}
    b54c:	b003      	add	sp, #12
    b54e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ctl_op) {
    b552:	2e00      	cmp	r6, #0
    b554:	d065      	beq.n	b622 <send_seg+0x10a>
		tx->hdr = TRANS_CTL_HDR(*ctl_op, 1);
    b556:	7831      	ldrb	r1, [r6, #0]
    b558:	f061 017f 	orn	r1, r1, #127	; 0x7f
		tx->hdr = SEG_HDR(1, net_tx->aid);
    b55c:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
	tx->src = net_tx->src;
    b560:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
	tx->seg_n = (sdu->len - 1) / seg_len(!!ctl_op);
    b564:	f8b5 c004 	ldrh.w	ip, [r5, #4]
	tx->dst = net_tx->ctx->addr;
    b568:	8567      	strh	r7, [r4, #42]	; 0x2a
		return BT_MESH_APP_SEG_SDU_MAX;
    b56a:	2e00      	cmp	r6, #0
	tx->len = sdu->len;
    b56c:	f8a4 c02c 	strh.w	ip, [r4, #44]	; 0x2c
	tx->seg_o = 0;
    b570:	f04f 0700 	mov.w	r7, #0
	tx->seg_n = (sdu->len - 1) / seg_len(!!ctl_op);
    b574:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
		return BT_MESH_APP_SEG_SDU_MAX;
    b578:	bf18      	it	ne
    b57a:	2608      	movne	r6, #8
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
    b57c:	f8df c12c 	ldr.w	ip, [pc, #300]	; b6ac <send_seg+0x194>
	tx->seg_o = 0;
    b580:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
		return BT_MESH_APP_SEG_SDU_MAX;
    b584:	bf08      	it	eq
    b586:	260c      	moveq	r6, #12
	tx->seg_n = (sdu->len - 1) / seg_len(!!ctl_op);
    b588:	fb91 f1f6 	sdiv	r1, r1, r6
    b58c:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
	tx->nack_count = tx->seg_n + 1;
    b590:	f101 0101 	add.w	r1, r1, #1
    b594:	f884 1032 	strb.w	r1, [r4, #50]	; 0x32
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
    b598:	f8dc 1000 	ldr.w	r1, [ip]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b59c:	f3bf 8f5b 	dmb	ish
    b5a0:	f8dc e008 	ldr.w	lr, [ip, #8]
    b5a4:	f3bf 8f5b 	dmb	ish
    b5a8:	f3ce 0e80 	ubfx	lr, lr, #2, #1
    b5ac:	f8dc c004 	ldr.w	ip, [ip, #4]
		err = k_mem_slab_alloc(&segs, &buf, BUF_TIMEOUT);
    b5b0:	f8df 90fc 	ldr.w	r9, [pc, #252]	; b6b0 <send_seg+0x198>
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
    b5b4:	eba1 010e 	sub.w	r1, r1, lr
    b5b8:	ea4f 2e11 	mov.w	lr, r1, lsr #8
    b5bc:	ea4c 6101 	orr.w	r1, ip, r1, lsl #24
    b5c0:	e9c4 1e08 	strd	r1, lr, [r4, #32]
	tx->sub = net_tx->sub;
    b5c4:	6801      	ldr	r1, [r0, #0]
    b5c6:	6021      	str	r1, [r4, #0]
	tx->cb_data = cb_data;
    b5c8:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	tx->attempts = SEG_RETRANSMIT_ATTEMPTS;
    b5cc:	f04f 0304 	mov.w	r3, #4
    b5d0:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	tx->xmit = net_tx->xmit;
    b5d4:	7a83      	ldrb	r3, [r0, #10]
    b5d6:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	tx->aszmic = net_tx->aszmic;
    b5da:	7ac2      	ldrb	r2, [r0, #11]
	tx->seg_pending = 0;
    b5dc:	f884 7035 	strb.w	r7, [r4, #53]	; 0x35
	tx->aszmic = net_tx->aszmic;
    b5e0:	f3c2 0340 	ubfx	r3, r2, #1, #1
	tx->ctl = !!ctl_op;
    b5e4:	bf14      	ite	ne
    b5e6:	2101      	movne	r1, #1
    b5e8:	4639      	moveq	r1, r7
	tx->blocked = blocked;
    b5ea:	009b      	lsls	r3, r3, #2
	tx->friend_cred = net_tx->friend_cred;
    b5ec:	f002 0201 	and.w	r2, r2, #1
	tx->blocked = blocked;
    b5f0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    b5f4:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
    b5f8:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
    b5fc:	f022 022f 	bic.w	r2, r2, #47	; 0x2f
    b600:	4313      	orrs	r3, r2
    b602:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	tx->ttl = net_tx->ctx->send_ttl;
    b606:	6843      	ldr	r3, [r0, #4]
    b608:	7adb      	ldrb	r3, [r3, #11]
    b60a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	for (seg_o = 0U; sdu->len; seg_o++) {
    b60e:	f8b5 8004 	ldrh.w	r8, [r5, #4]
    b612:	f1b8 0f00 	cmp.w	r8, #0
    b616:	d110      	bne.n	b63a <send_seg+0x122>
	seg_tx_send_unacked(tx);
    b618:	4820      	ldr	r0, [pc, #128]	; (b69c <send_seg+0x184>)
    b61a:	f7ff fda7 	bl	b16c <seg_tx_send_unacked>
	return 0;
    b61e:	4640      	mov	r0, r8
    b620:	e794      	b.n	b54c <send_seg+0x34>
	} else if (BT_MESH_IS_DEV_KEY(net_tx->ctx->app_idx)) {
    b622:	8849      	ldrh	r1, [r1, #2]
    b624:	3103      	adds	r1, #3
    b626:	b289      	uxth	r1, r1
    b628:	2901      	cmp	r1, #1
		tx->hdr = SEG_HDR(1, net_tx->aid);
    b62a:	bf85      	ittet	hi
    b62c:	7ac1      	ldrbhi	r1, [r0, #11]
    b62e:	f3c1 0185 	ubfxhi	r1, r1, #2, #6
		tx->hdr = SEG_HDR(0, 0);
    b632:	2180      	movls	r1, #128	; 0x80
		tx->hdr = SEG_HDR(1, net_tx->aid);
    b634:	f061 013f 	ornhi	r1, r1, #63	; 0x3f
    b638:	e790      	b.n	b55c <send_seg+0x44>
		err = k_mem_slab_alloc(&segs, &buf, BUF_TIMEOUT);
    b63a:	2200      	movs	r2, #0
    b63c:	2300      	movs	r3, #0
    b63e:	a901      	add	r1, sp, #4
    b640:	4648      	mov	r0, r9
    b642:	f00c f81d 	bl	17680 <k_mem_slab_alloc>
		if (err) {
    b646:	f107 0a01 	add.w	sl, r7, #1
    b64a:	b178      	cbz	r0, b66c <send_seg+0x154>
    b64c:	4b14      	ldr	r3, [pc, #80]	; (b6a0 <send_seg+0x188>)
    b64e:	4915      	ldr	r1, [pc, #84]	; (b6a4 <send_seg+0x18c>)
			BT_ERR("Out of segment buffers");
    b650:	4818      	ldr	r0, [pc, #96]	; (b6b4 <send_seg+0x19c>)
    b652:	1ac9      	subs	r1, r1, r3
    b654:	08c9      	lsrs	r1, r1, #3
    b656:	0189      	lsls	r1, r1, #6
    b658:	f041 0101 	orr.w	r1, r1, #1
    b65c:	f00d fef1 	bl	19442 <log_0>
			seg_tx_reset(tx);
    b660:	480e      	ldr	r0, [pc, #56]	; (b69c <send_seg+0x184>)
    b662:	f7ff fd07 	bl	b074 <seg_tx_reset>
			return -ENOBUFS;
    b666:	f06f 0068 	mvn.w	r0, #104	; 0x68
    b66a:	e76f      	b.n	b54c <send_seg+0x34>
		memcpy(buf, net_buf_simple_pull_mem(sdu, len), len);
    b66c:	f8b5 8004 	ldrh.w	r8, [r5, #4]
    b670:	f8dd b004 	ldr.w	fp, [sp, #4]
    b674:	45b0      	cmp	r8, r6
    b676:	bf28      	it	cs
    b678:	46b0      	movcs	r8, r6
    b67a:	4641      	mov	r1, r8
    b67c:	4628      	mov	r0, r5
    b67e:	f012 fb25 	bl	1dccc <net_buf_simple_pull_mem>
		tx->seg[seg_o] = buf;
    b682:	b2ff      	uxtb	r7, r7
		memcpy(buf, net_buf_simple_pull_mem(sdu, len), len);
    b684:	4601      	mov	r1, r0
		tx->seg[seg_o] = buf;
    b686:	eb04 0787 	add.w	r7, r4, r7, lsl #2
		memcpy(buf, net_buf_simple_pull_mem(sdu, len), len);
    b68a:	4642      	mov	r2, r8
    b68c:	4658      	mov	r0, fp
    b68e:	f00e fdf6 	bl	1a27e <memcpy>
		tx->seg[seg_o] = buf;
    b692:	9b01      	ldr	r3, [sp, #4]
    b694:	607b      	str	r3, [r7, #4]
	for (seg_o = 0U; sdu->len; seg_o++) {
    b696:	4657      	mov	r7, sl
    b698:	e7b9      	b.n	b60e <send_seg+0xf6>
    b69a:	bf00      	nop
    b69c:	200012a0 	.word	0x200012a0
    b6a0:	0001ef2c 	.word	0x0001ef2c
    b6a4:	0001f0f4 	.word	0x0001f0f4
    b6a8:	000219cd 	.word	0x000219cd
    b6ac:	200011d8 	.word	0x200011d8
    b6b0:	20000b3c 	.word	0x20000b3c
    b6b4:	000219f9 	.word	0x000219f9

0000b6b8 <send_unseg>:
{
    b6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b6bc:	4604      	mov	r4, r0
    b6be:	460f      	mov	r7, r1
    b6c0:	4690      	mov	r8, r2
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, tx->xmit, BUF_TIMEOUT);
    b6c2:	7a81      	ldrb	r1, [r0, #10]
{
    b6c4:	f8dd a020 	ldr.w	sl, [sp, #32]
    b6c8:	4699      	mov	r9, r3
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, tx->xmit, BUF_TIMEOUT);
    b6ca:	2200      	movs	r2, #0
    b6cc:	2300      	movs	r3, #0
    b6ce:	2001      	movs	r0, #1
    b6d0:	f7fe f86c 	bl	97ac <bt_mesh_adv_create>
	if (!buf) {
    b6d4:	4605      	mov	r5, r0
    b6d6:	b340      	cbz	r0, b72a <send_unseg+0x72>
    b6d8:	f100 0608 	add.w	r6, r0, #8
    b6dc:	2109      	movs	r1, #9
    b6de:	4630      	mov	r0, r6
    b6e0:	f012 fa33 	bl	1db4a <net_buf_simple_reserve>
	if (ctl_op) {
    b6e4:	f1ba 0f00 	cmp.w	sl, #0
    b6e8:	d013      	beq.n	b712 <send_unseg+0x5a>
		net_buf_add_u8(buf, TRANS_CTL_HDR(*ctl_op, 0));
    b6ea:	f89a 1000 	ldrb.w	r1, [sl]
	return net_buf_simple_add_u8(&buf->b, val);
    b6ee:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    b6f2:	4630      	mov	r0, r6
    b6f4:	f012 fa98 	bl	1dc28 <net_buf_simple_add_u8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    b6f8:	88ba      	ldrh	r2, [r7, #4]
    b6fa:	6839      	ldr	r1, [r7, #0]
    b6fc:	4630      	mov	r0, r6
    b6fe:	f012 fa8a 	bl	1dc16 <net_buf_simple_add_mem>
	return bt_mesh_net_send(tx, buf, cb, cb_data);
    b702:	464b      	mov	r3, r9
    b704:	4642      	mov	r2, r8
    b706:	4629      	mov	r1, r5
    b708:	4620      	mov	r0, r4
}
    b70a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_mesh_net_send(tx, buf, cb, cb_data);
    b70e:	f7fe bd1f 	b.w	a150 <bt_mesh_net_send>
	} else if (BT_MESH_IS_DEV_KEY(tx->ctx->app_idx)) {
    b712:	6863      	ldr	r3, [r4, #4]
    b714:	8858      	ldrh	r0, [r3, #2]
    b716:	3003      	adds	r0, #3
    b718:	b280      	uxth	r0, r0
    b71a:	2801      	cmp	r0, #1
		net_buf_add_u8(buf, UNSEG_HDR(1, tx->aid));
    b71c:	bf85      	ittet	hi
    b71e:	7ae1      	ldrbhi	r1, [r4, #11]
    b720:	0889      	lsrhi	r1, r1, #2
	return net_buf_simple_add_u8(&buf->b, val);
    b722:	4651      	movls	r1, sl
    b724:	f041 0140 	orrhi.w	r1, r1, #64	; 0x40
    b728:	e7e3      	b.n	b6f2 <send_unseg+0x3a>
    b72a:	4b07      	ldr	r3, [pc, #28]	; (b748 <send_unseg+0x90>)
    b72c:	4907      	ldr	r1, [pc, #28]	; (b74c <send_unseg+0x94>)
		BT_ERR("Out of network buffers");
    b72e:	4808      	ldr	r0, [pc, #32]	; (b750 <send_unseg+0x98>)
    b730:	1ac9      	subs	r1, r1, r3
    b732:	08c9      	lsrs	r1, r1, #3
    b734:	0189      	lsls	r1, r1, #6
    b736:	f041 0101 	orr.w	r1, r1, #1
    b73a:	f00d fe82 	bl	19442 <log_0>
}
    b73e:	f06f 0068 	mvn.w	r0, #104	; 0x68
    b742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b746:	bf00      	nop
    b748:	0001ef2c 	.word	0x0001ef2c
    b74c:	0001f0f4 	.word	0x0001f0f4
    b750:	00021a10 	.word	0x00021a10

0000b754 <bt_mesh_tx_in_progress>:
		if (seg_tx[i].nack_count) {
    b754:	4b03      	ldr	r3, [pc, #12]	; (b764 <bt_mesh_tx_in_progress+0x10>)
    b756:	f893 0032 	ldrb.w	r0, [r3, #50]	; 0x32
}
    b75a:	3800      	subs	r0, #0
    b75c:	bf18      	it	ne
    b75e:	2001      	movne	r0, #1
    b760:	4770      	bx	lr
    b762:	bf00      	nop
    b764:	200012a0 	.word	0x200012a0

0000b768 <bt_mesh_ctl_send>:
{
    b768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    b76c:	f8d0 9004 	ldr.w	r9, [r0, #4]
{
    b770:	461d      	mov	r5, r3
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    b772:	f899 300b 	ldrb.w	r3, [r9, #11]
{
    b776:	b089      	sub	sp, #36	; 0x24
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    b778:	2bff      	cmp	r3, #255	; 0xff
{
    b77a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
    b77e:	4604      	mov	r4, r0
    b780:	4616      	mov	r6, r2
    b782:	f88d 100f 	strb.w	r1, [sp, #15]
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    b786:	d120      	bne.n	b7ca <bt_mesh_ctl_send+0x62>
		tx->ctx->send_ttl = bt_mesh_default_ttl_get();
    b788:	f7fd fece 	bl	9528 <bt_mesh_default_ttl_get>
    b78c:	f889 000b 	strb.w	r0, [r9, #11]
	net_buf_simple_init_with_data(&buf, data, data_len);
    b790:	462a      	mov	r2, r5
    b792:	4631      	mov	r1, r6
    b794:	a805      	add	r0, sp, #20
    b796:	f012 f9d2 	bl	1db3e <net_buf_simple_init_with_data>
	if (data_len > BT_MESH_SDU_UNSEG_MAX) {
    b79a:	6863      	ldr	r3, [r4, #4]
    b79c:	2d0b      	cmp	r5, #11
		tx->ctx->send_rel = true;
    b79e:	bf84      	itt	hi
    b7a0:	2201      	movhi	r2, #1
    b7a2:	729a      	strbhi	r2, [r3, #10]
	tx->ctx->app_idx = BT_MESH_KEY_UNUSED;
    b7a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    b7a8:	805a      	strh	r2, [r3, #2]
	if (tx->ctx->addr == BT_MESH_ADDR_UNASSIGNED ||
    b7aa:	889a      	ldrh	r2, [r3, #4]
    b7ac:	b122      	cbz	r2, b7b8 <bt_mesh_ctl_send+0x50>
    b7ae:	f482 4200 	eor.w	r2, r2, #32768	; 0x8000
    b7b2:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
    b7b6:	d219      	bcs.n	b7ec <bt_mesh_ctl_send+0x84>
    b7b8:	4915      	ldr	r1, [pc, #84]	; (b810 <bt_mesh_ctl_send+0xa8>)
    b7ba:	4b16      	ldr	r3, [pc, #88]	; (b814 <bt_mesh_ctl_send+0xac>)
		BT_ERR("Invalid destination address");
    b7bc:	4816      	ldr	r0, [pc, #88]	; (b818 <bt_mesh_ctl_send+0xb0>)
    b7be:	1ac9      	subs	r1, r1, r3
    b7c0:	08c9      	lsrs	r1, r1, #3
    b7c2:	0189      	lsls	r1, r1, #6
    b7c4:	f041 0101 	orr.w	r1, r1, #1
    b7c8:	e009      	b.n	b7de <bt_mesh_ctl_send+0x76>
	} else if (tx->ctx->send_ttl > BT_MESH_TTL_MAX) {
    b7ca:	061b      	lsls	r3, r3, #24
    b7cc:	d5e0      	bpl.n	b790 <bt_mesh_ctl_send+0x28>
    b7ce:	4910      	ldr	r1, [pc, #64]	; (b810 <bt_mesh_ctl_send+0xa8>)
    b7d0:	4b10      	ldr	r3, [pc, #64]	; (b814 <bt_mesh_ctl_send+0xac>)
		BT_ERR("TTL too large (max 127)");
    b7d2:	4812      	ldr	r0, [pc, #72]	; (b81c <bt_mesh_ctl_send+0xb4>)
    b7d4:	1ac9      	subs	r1, r1, r3
    b7d6:	08c9      	lsrs	r1, r1, #3
    b7d8:	0189      	lsls	r1, r1, #6
    b7da:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid destination address");
    b7de:	f00d fe30 	bl	19442 <log_0>
		return -EINVAL;
    b7e2:	f06f 0015 	mvn.w	r0, #21
}
    b7e6:	b009      	add	sp, #36	; 0x24
    b7e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (tx->ctx->send_rel) {
    b7ec:	7a9a      	ldrb	r2, [r3, #10]
    b7ee:	f10d 030f 	add.w	r3, sp, #15
		return send_seg(tx, &buf, cb, cb_data, &ctl_op);
    b7f2:	9300      	str	r3, [sp, #0]
    b7f4:	4643      	mov	r3, r8
	if (tx->ctx->send_rel) {
    b7f6:	b12a      	cbz	r2, b804 <bt_mesh_ctl_send+0x9c>
		return send_seg(tx, &buf, cb, cb_data, &ctl_op);
    b7f8:	463a      	mov	r2, r7
    b7fa:	a905      	add	r1, sp, #20
    b7fc:	4620      	mov	r0, r4
    b7fe:	f7ff fe8b 	bl	b518 <send_seg>
    b802:	e7f0      	b.n	b7e6 <bt_mesh_ctl_send+0x7e>
		return send_unseg(tx, &buf, cb, cb_data, &ctl_op);
    b804:	463a      	mov	r2, r7
    b806:	a905      	add	r1, sp, #20
    b808:	4620      	mov	r0, r4
    b80a:	f7ff ff55 	bl	b6b8 <send_unseg>
    b80e:	e7ea      	b.n	b7e6 <bt_mesh_ctl_send+0x7e>
    b810:	0001f0f4 	.word	0x0001f0f4
    b814:	0001ef2c 	.word	0x0001ef2c
    b818:	00021a3f 	.word	0x00021a3f
    b81c:	00021a27 	.word	0x00021a27

0000b820 <bt_mesh_va_del>:
{
    b820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b824:	4f1b      	ldr	r7, [pc, #108]	; (b894 <bt_mesh_va_del+0x74>)
    b826:	4681      	mov	r9, r0
    b828:	460e      	mov	r6, r1
	for (int i = 0; i < ARRAY_SIZE(virtual_addrs); i++) {
    b82a:	2500      	movs	r5, #0
		if (virtual_addrs[i].ref &&
    b82c:	1f3c      	subs	r4, r7, #4
    b82e:	f04f 0a14 	mov.w	sl, #20
    b832:	fb0a f305 	mul.w	r3, sl, r5
    b836:	eb04 0803 	add.w	r8, r4, r3
    b83a:	5ae3      	ldrh	r3, [r4, r3]
    b83c:	f3c3 030e 	ubfx	r3, r3, #0, #15
    b840:	b1db      	cbz	r3, b87a <bt_mesh_va_del+0x5a>
		    !memcmp(uuid, virtual_addrs[i].uuid,
    b842:	2210      	movs	r2, #16
    b844:	4639      	mov	r1, r7
    b846:	4648      	mov	r0, r9
    b848:	f00e fd08 	bl	1a25c <memcmp>
		if (virtual_addrs[i].ref &&
    b84c:	b9a8      	cbnz	r0, b87a <bt_mesh_va_del+0x5a>
	va->ref--;
    b84e:	f8b8 3000 	ldrh.w	r3, [r8]
    b852:	f503 42ff 	add.w	r2, r3, #32640	; 0x7f80
    b856:	327f      	adds	r2, #127	; 0x7f
    b858:	f362 030e 	bfi	r3, r2, #0, #15
    b85c:	f8a8 3000 	strh.w	r3, [r8]
	if (addr) {
    b860:	b99e      	cbnz	r6, b88a <bt_mesh_va_del+0x6a>
	store->changed = 1U;
    b862:	2314      	movs	r3, #20
    b864:	fb03 4405 	mla	r4, r3, r5, r4
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
    b868:	2009      	movs	r0, #9
	store->changed = 1U;
    b86a:	7863      	ldrb	r3, [r4, #1]
    b86c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b870:	7063      	strb	r3, [r4, #1]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
    b872:	f001 fb11 	bl	ce98 <bt_mesh_settings_store_schedule>
	return STATUS_SUCCESS;
    b876:	2000      	movs	r0, #0
}
    b878:	e005      	b.n	b886 <bt_mesh_va_del+0x66>
	for (int i = 0; i < ARRAY_SIZE(virtual_addrs); i++) {
    b87a:	3501      	adds	r5, #1
    b87c:	2d03      	cmp	r5, #3
    b87e:	f107 0714 	add.w	r7, r7, #20
    b882:	d1d6      	bne.n	b832 <bt_mesh_va_del+0x12>
		return STATUS_CANNOT_REMOVE;
    b884:	200c      	movs	r0, #12
}
    b886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		*addr = va->addr;
    b88a:	f8b8 3002 	ldrh.w	r3, [r8, #2]
    b88e:	8033      	strh	r3, [r6, #0]
    b890:	e7e7      	b.n	b862 <bt_mesh_va_del+0x42>
    b892:	bf00      	nop
    b894:	20002e2e 	.word	0x20002e2e

0000b898 <bt_mesh_va_label_get>:
{
    b898:	b570      	push	{r4, r5, r6, lr}
    b89a:	4c11      	ldr	r4, [pc, #68]	; (b8e0 <bt_mesh_va_label_get+0x48>)
    b89c:	4601      	mov	r1, r0
	for (i = 0; i < ARRAY_SIZE(virtual_addrs); i++) {
    b89e:	2200      	movs	r2, #0
    b8a0:	4623      	mov	r3, r4
		if (virtual_addrs[i].ref && virtual_addrs[i].addr == addr) {
    b8a2:	2614      	movs	r6, #20
    b8a4:	fb06 f002 	mul.w	r0, r6, r2
    b8a8:	5a1d      	ldrh	r5, [r3, r0]
    b8aa:	f3c5 050e 	ubfx	r5, r5, #0, #15
    b8ae:	b12d      	cbz	r5, b8bc <bt_mesh_va_label_get+0x24>
    b8b0:	8865      	ldrh	r5, [r4, #2]
    b8b2:	428d      	cmp	r5, r1
    b8b4:	d102      	bne.n	b8bc <bt_mesh_va_label_get+0x24>
			return virtual_addrs[i].uuid;
    b8b6:	3004      	adds	r0, #4
    b8b8:	4418      	add	r0, r3
}
    b8ba:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < ARRAY_SIZE(virtual_addrs); i++) {
    b8bc:	3201      	adds	r2, #1
    b8be:	2a03      	cmp	r2, #3
    b8c0:	f104 0414 	add.w	r4, r4, #20
    b8c4:	d1ee      	bne.n	b8a4 <bt_mesh_va_label_get+0xc>
    b8c6:	4b07      	ldr	r3, [pc, #28]	; (b8e4 <bt_mesh_va_label_get+0x4c>)
    b8c8:	4a07      	ldr	r2, [pc, #28]	; (b8e8 <bt_mesh_va_label_get+0x50>)
	BT_WARN("No matching Label UUID for 0x%04x", addr);
    b8ca:	4808      	ldr	r0, [pc, #32]	; (b8ec <bt_mesh_va_label_get+0x54>)
    b8cc:	1ad2      	subs	r2, r2, r3
    b8ce:	08d2      	lsrs	r2, r2, #3
    b8d0:	0192      	lsls	r2, r2, #6
    b8d2:	f042 0202 	orr.w	r2, r2, #2
    b8d6:	f00d fdc1 	bl	1945c <log_1>
	return NULL;
    b8da:	2000      	movs	r0, #0
    b8dc:	e7ed      	b.n	b8ba <bt_mesh_va_label_get+0x22>
    b8de:	bf00      	nop
    b8e0:	20002e2a 	.word	0x20002e2a
    b8e4:	0001ef2c 	.word	0x0001ef2c
    b8e8:	0001f0f4 	.word	0x0001f0f4
    b8ec:	00021a5b 	.word	0x00021a5b

0000b8f0 <sdu_recv>:
{
    b8f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b8f4:	b08b      	sub	sp, #44	; 0x2c
    b8f6:	4604      	mov	r4, r0
    b8f8:	460d      	mov	r5, r1
    b8fa:	4691      	mov	r9, r2
	struct decrypt_ctx ctx = {
    b8fc:	2100      	movs	r1, #0
    b8fe:	2210      	movs	r2, #16
    b900:	a803      	add	r0, sp, #12
{
    b902:	4698      	mov	r8, r3
    b904:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	struct decrypt_ctx ctx = {
    b908:	f00e fcc4 	bl	1a294 <memset>
			.dev_key = !AKF(&hdr),
    b90c:	ea6f 1395 	mvn.w	r3, r5, lsr #6
    b910:	f003 0301 	and.w	r3, r3, #1
			.dst = rx->ctx.recv_dst,
    b914:	8960      	ldrh	r0, [r4, #10]
			.dev_key = !AKF(&hdr),
    b916:	f88d 3008 	strb.w	r3, [sp, #8]
	struct decrypt_ctx ctx = {
    b91a:	8923      	ldrh	r3, [r4, #8]
    b91c:	f88d 9009 	strb.w	r9, [sp, #9]
    b920:	f8ad 300a 	strh.w	r3, [sp, #10]
    b924:	f8ad 000c 	strh.w	r0, [sp, #12]
    b928:	b367      	cbz	r7, b984 <sdu_recv+0x94>
    b92a:	693a      	ldr	r2, [r7, #16]
    b92c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
			.iv_index = BT_MESH_NET_IVI_RX(rx),
    b930:	7d23      	ldrb	r3, [r4, #20]
	struct decrypt_ctx ctx = {
    b932:	9204      	str	r2, [sp, #16]
			.iv_index = BT_MESH_NET_IVI_RX(rx),
    b934:	f003 0201 	and.w	r2, r3, #1
    b938:	4b13      	ldr	r3, [pc, #76]	; (b988 <sdu_recv+0x98>)
	struct decrypt_ctx ctx = {
    b93a:	9709      	str	r7, [sp, #36]	; 0x24
			.iv_index = BT_MESH_NET_IVI_RX(rx),
    b93c:	681b      	ldr	r3, [r3, #0]
    b93e:	1a9b      	subs	r3, r3, r2
	struct decrypt_ctx ctx = {
    b940:	9305      	str	r3, [sp, #20]
	if (BT_MESH_ADDR_IS_VIRTUAL(rx->ctx.recv_dst)) {
    b942:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
    b946:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
	struct decrypt_ctx ctx = {
    b94a:	e9cd 8607 	strd	r8, r6, [sp, #28]
	if (BT_MESH_ADDR_IS_VIRTUAL(rx->ctx.recv_dst)) {
    b94e:	d202      	bcs.n	b956 <sdu_recv+0x66>
		ctx.crypto.ad = bt_mesh_va_label_get(rx->ctx.recv_dst);
    b950:	f7ff ffa2 	bl	b898 <bt_mesh_va_label_get>
    b954:	9006      	str	r0, [sp, #24]
	rx->ctx.app_idx = bt_mesh_app_key_find(ctx.crypto.dev_key, AID(&hdr),
    b956:	ab02      	add	r3, sp, #8
    b958:	9300      	str	r3, [sp, #0]
    b95a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    b95e:	4b0b      	ldr	r3, [pc, #44]	; (b98c <sdu_recv+0x9c>)
    b960:	4622      	mov	r2, r4
    b962:	f005 013f 	and.w	r1, r5, #63	; 0x3f
    b966:	f7ff fa99 	bl	ae9c <bt_mesh_app_key_find>
	if (rx->ctx.app_idx == BT_MESH_KEY_UNUSED) {
    b96a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b96e:	4298      	cmp	r0, r3
	rx->ctx.app_idx = bt_mesh_app_key_find(ctx.crypto.dev_key, AID(&hdr),
    b970:	80e0      	strh	r0, [r4, #6]
	if (rx->ctx.app_idx == BT_MESH_KEY_UNUSED) {
    b972:	d003      	beq.n	b97c <sdu_recv+0x8c>
	bt_mesh_model_recv(rx, sdu);
    b974:	4631      	mov	r1, r6
    b976:	4620      	mov	r0, r4
    b978:	f001 f93c 	bl	cbf4 <bt_mesh_model_recv>
}
    b97c:	2000      	movs	r0, #0
    b97e:	b00b      	add	sp, #44	; 0x2c
    b980:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	struct decrypt_ctx ctx = {
    b984:	6922      	ldr	r2, [r4, #16]
    b986:	e7d3      	b.n	b930 <sdu_recv+0x40>
    b988:	200011d8 	.word	0x200011d8
    b98c:	0001be5f 	.word	0x0001be5f

0000b990 <bt_mesh_trans_recv>:
{
    b990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint64_t seq_auth = TRANS_SEQ_AUTH_NVAL;
    b994:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
    b998:	b095      	sub	sp, #84	; 0x54
	uint64_t seq_auth = TRANS_SEQ_AUTH_NVAL;
    b99a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b99e:	e9cd 2308 	strd	r2, r3, [sp, #32]
		rx->friend_match = false;
    b9a2:	7d0b      	ldrb	r3, [r1, #20]
    b9a4:	f36f 13c7 	bfc	r3, #7, #1
{
    b9a8:	4607      	mov	r7, r0
		rx->friend_match = false;
    b9aa:	750b      	strb	r3, [r1, #20]
{
    b9ac:	460c      	mov	r4, r1
	net_buf_simple_pull(buf, BT_MESH_NET_HDR_LEN);
    b9ae:	2109      	movs	r1, #9
    b9b0:	f012 f984 	bl	1dcbc <net_buf_simple_pull>
	state->offset = net_buf_simple_headroom(buf);
    b9b4:	4638      	mov	r0, r7
    b9b6:	f012 f9b4 	bl	1dd22 <net_buf_simple_headroom>
	if (SEG(buf->data)) {
    b9ba:	f8d7 9000 	ldr.w	r9, [r7]
	state->len = buf->len;
    b9be:	f8b7 b004 	ldrh.w	fp, [r7, #4]
    b9c2:	f999 3000 	ldrsb.w	r3, [r9]
	state->offset = net_buf_simple_headroom(buf);
    b9c6:	9005      	str	r0, [sp, #20]
    b9c8:	2b00      	cmp	r3, #0
    b9ca:	f280 8282 	bge.w	bed2 <bt_mesh_trans_recv+0x542>
		if (!rx->local_match && !rx->friend_match) {
    b9ce:	f894 a014 	ldrb.w	sl, [r4, #20]
    b9d2:	f01a 00c0 	ands.w	r0, sl, #192	; 0xc0
    b9d6:	f000 82b4 	beq.w	bf42 <bt_mesh_trans_recv+0x5b2>
	struct bt_mesh_rpl *rpl = NULL;
    b9da:	2300      	movs	r3, #0
	if (buf->len < 5) {
    b9dc:	f1bb 0f04 	cmp.w	fp, #4
	struct bt_mesh_rpl *rpl = NULL;
    b9e0:	9307      	str	r3, [sp, #28]
	if (buf->len < 5) {
    b9e2:	d80d      	bhi.n	ba00 <bt_mesh_trans_recv+0x70>
    b9e4:	4a92      	ldr	r2, [pc, #584]	; (bc30 <bt_mesh_trans_recv+0x2a0>)
    b9e6:	4b93      	ldr	r3, [pc, #588]	; (bc34 <bt_mesh_trans_recv+0x2a4>)
		BT_ERR("Too short segmented message (len %u)", buf->len);
    b9e8:	4893      	ldr	r0, [pc, #588]	; (bc38 <bt_mesh_trans_recv+0x2a8>)
    b9ea:	1ad2      	subs	r2, r2, r3
    b9ec:	08d2      	lsrs	r2, r2, #3
    b9ee:	0192      	lsls	r2, r2, #6
    b9f0:	f042 0201 	orr.w	r2, r2, #1
    b9f4:	4659      	mov	r1, fp
    b9f6:	f00d fd31 	bl	1945c <log_1>
		return -EINVAL;
    b9fa:	f06f 0a15 	mvn.w	sl, #21
    b9fe:	e0c4      	b.n	bb8a <bt_mesh_trans_recv+0x1fa>
	if (bt_mesh_rpl_check(net_rx, &rpl)) {
    ba00:	a907      	add	r1, sp, #28
    ba02:	4620      	mov	r0, r4
    ba04:	f000 fbb8 	bl	c178 <bt_mesh_rpl_check>
    ba08:	b178      	cbz	r0, ba2a <bt_mesh_trans_recv+0x9a>
    ba0a:	4a8a      	ldr	r2, [pc, #552]	; (bc34 <bt_mesh_trans_recv+0x2a4>)
    ba0c:	4b88      	ldr	r3, [pc, #544]	; (bc30 <bt_mesh_trans_recv+0x2a0>)
		BT_WARN("Replay: src 0x%04x dst 0x%04x seq 0x%06x",
    ba0e:	8921      	ldrh	r1, [r4, #8]
    ba10:	488a      	ldr	r0, [pc, #552]	; (bc3c <bt_mesh_trans_recv+0x2ac>)
    ba12:	1a9b      	subs	r3, r3, r2
    ba14:	08db      	lsrs	r3, r3, #3
    ba16:	019b      	lsls	r3, r3, #6
    ba18:	f043 0302 	orr.w	r3, r3, #2
    ba1c:	f8ad 3000 	strh.w	r3, [sp]
    ba20:	8962      	ldrh	r2, [r4, #10]
    ba22:	6923      	ldr	r3, [r4, #16]
    ba24:	f00d fd47 	bl	194b6 <log_3>
    ba28:	e7e7      	b.n	b9fa <bt_mesh_trans_recv+0x6a>
	net_buf_simple_pull(buf, 1);
    ba2a:	2101      	movs	r1, #1
    ba2c:	4638      	mov	r0, r7
    ba2e:	f012 f945 	bl	1dcbc <net_buf_simple_pull>
	seq_zero = net_buf_simple_pull_be16(buf);
    ba32:	4638      	mov	r0, r7
    ba34:	f012 f962 	bl	1dcfc <net_buf_simple_pull_be16>
	seg_o = (seq_zero & 0x03) << 3;
    ba38:	00c6      	lsls	r6, r0, #3
	seq_zero = (seq_zero >> 2) & TRANS_SEQ_ZERO_MASK;
    ba3a:	f3c0 058c 	ubfx	r5, r0, #2, #13
	seg_n = net_buf_simple_pull_u8(buf);
    ba3e:	4638      	mov	r0, r7
    ba40:	f012 f94c 	bl	1dcdc <net_buf_simple_pull_u8>
	seg_o = (seq_zero & 0x03) << 3;
    ba44:	f006 0618 	and.w	r6, r6, #24
	seg_o |= seg_n >> 5;
    ba48:	ea46 1650 	orr.w	r6, r6, r0, lsr #5
	seg_n &= 0x1f;
    ba4c:	f000 0a1f 	and.w	sl, r0, #31
	seg_o |= seg_n >> 5;
    ba50:	b2f6      	uxtb	r6, r6
	if (seg_o > seg_n) {
    ba52:	4556      	cmp	r6, sl
	seg_n &= 0x1f;
    ba54:	46d0      	mov	r8, sl
	if (seg_o > seg_n) {
    ba56:	d90c      	bls.n	ba72 <bt_mesh_trans_recv+0xe2>
    ba58:	4a76      	ldr	r2, [pc, #472]	; (bc34 <bt_mesh_trans_recv+0x2a4>)
    ba5a:	4b75      	ldr	r3, [pc, #468]	; (bc30 <bt_mesh_trans_recv+0x2a0>)
		BT_ERR("SegO greater than SegN (%u > %u)", seg_o, seg_n);
    ba5c:	4878      	ldr	r0, [pc, #480]	; (bc40 <bt_mesh_trans_recv+0x2b0>)
    ba5e:	1a9b      	subs	r3, r3, r2
    ba60:	08db      	lsrs	r3, r3, #3
    ba62:	019b      	lsls	r3, r3, #6
    ba64:	f043 0301 	orr.w	r3, r3, #1
    ba68:	4652      	mov	r2, sl
    ba6a:	4631      	mov	r1, r6
    ba6c:	f00d fd0a 	bl	19484 <log_2>
		return -EINVAL;
    ba70:	e7c3      	b.n	b9fa <bt_mesh_trans_recv+0x6a>
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
    ba72:	6922      	ldr	r2, [r4, #16]
    ba74:	4873      	ldr	r0, [pc, #460]	; (bc44 <bt_mesh_trans_recv+0x2b4>)
    ba76:	7d23      	ldrb	r3, [r4, #20]
    ba78:	6800      	ldr	r0, [r0, #0]
    ba7a:	1b55      	subs	r5, r2, r5
    ba7c:	f3c5 050c 	ubfx	r5, r5, #0, #13
    ba80:	f003 0101 	and.w	r1, r3, #1
    ba84:	1a41      	subs	r1, r0, r1
    ba86:	eba2 0c05 	sub.w	ip, r2, r5
    ba8a:	ea4c 6c01 	orr.w	ip, ip, r1, lsl #24
		if (rx->src != net_rx->ctx.addr ||
    ba8e:	4d6e      	ldr	r5, [pc, #440]	; (bc48 <bt_mesh_trans_recv+0x2b8>)
	auth_seqnum = *seq_auth & BIT_MASK(24);
    ba90:	f02c 427f 	bic.w	r2, ip, #4278190080	; 0xff000000
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
    ba94:	0a08      	lsrs	r0, r1, #8
	auth_seqnum = *seq_auth & BIT_MASK(24);
    ba96:	9204      	str	r2, [sp, #16]
		if (rx->src != net_rx->ctx.addr ||
    ba98:	69a9      	ldr	r1, [r5, #24]
    ba9a:	68a2      	ldr	r2, [r4, #8]
    ba9c:	4291      	cmp	r1, r2
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
    ba9e:	e9cd c008 	strd	ip, r0, [sp, #32]
		if (rx->src != net_rx->ctx.addr ||
    baa2:	d118      	bne.n	bad6 <bt_mesh_trans_recv+0x146>
		if (rx->seq_auth >= *seq_auth) {
    baa4:	e9d5 1204 	ldrd	r1, r2, [r5, #16]
    baa8:	4561      	cmp	r1, ip
    baaa:	eb72 0e00 	sbcs.w	lr, r2, r0
    baae:	f080 824a 	bcs.w	bf46 <bt_mesh_trans_recv+0x5b6>
		if (rx->in_use) {
    bab2:	7feb      	ldrb	r3, [r5, #31]
    bab4:	065a      	lsls	r2, r3, #25
    bab6:	d50e      	bpl.n	bad6 <bt_mesh_trans_recv+0x146>
    bab8:	4b5e      	ldr	r3, [pc, #376]	; (bc34 <bt_mesh_trans_recv+0x2a4>)
    baba:	4a5d      	ldr	r2, [pc, #372]	; (bc30 <bt_mesh_trans_recv+0x2a0>)
			BT_WARN("Duplicate SDU from src 0x%04x",
    babc:	8921      	ldrh	r1, [r4, #8]
    babe:	4863      	ldr	r0, [pc, #396]	; (bc4c <bt_mesh_trans_recv+0x2bc>)
    bac0:	1ad2      	subs	r2, r2, r3
    bac2:	08d2      	lsrs	r2, r2, #3
    bac4:	0192      	lsls	r2, r2, #6
    bac6:	f042 0202 	orr.w	r2, r2, #2
    baca:	f00d fcc7 	bl	1945c <log_1>
			seg_rx_reset(rx, true);
    bace:	2101      	movs	r1, #1
    bad0:	4628      	mov	r0, r5
    bad2:	f7ff faa5 	bl	b020 <seg_rx_reset>
	if (!sdu_len_is_ok(net_rx->ctl, seg_n)) {
    bad6:	f1b8 0f02 	cmp.w	r8, #2
    bada:	d96e      	bls.n	bbba <bt_mesh_trans_recv+0x22a>
    badc:	4b55      	ldr	r3, [pc, #340]	; (bc34 <bt_mesh_trans_recv+0x2a4>)
    bade:	4954      	ldr	r1, [pc, #336]	; (bc30 <bt_mesh_trans_recv+0x2a0>)
		BT_ERR("Too big incoming SDU length");
    bae0:	485b      	ldr	r0, [pc, #364]	; (bc50 <bt_mesh_trans_recv+0x2c0>)
    bae2:	1ac9      	subs	r1, r1, r3
    bae4:	08c9      	lsrs	r1, r1, #3
    bae6:	0189      	lsls	r1, r1, #6
    bae8:	f041 0101 	orr.w	r1, r1, #1
    baec:	f00d fca9 	bl	19442 <log_0>
			 net_rx->friend_match);
    baf0:	7d23      	ldrb	r3, [r4, #20]
		send_ack(net_rx->sub, net_rx->ctx.recv_dst, net_rx->ctx.addr,
    baf2:	8922      	ldrh	r2, [r4, #8]
    baf4:	8961      	ldrh	r1, [r4, #10]
    baf6:	6820      	ldr	r0, [r4, #0]
    baf8:	09db      	lsrs	r3, r3, #7
    bafa:	9302      	str	r3, [sp, #8]
    bafc:	2300      	movs	r3, #0
    bafe:	9301      	str	r3, [sp, #4]
    bb00:	ab08      	add	r3, sp, #32
    bb02:	9300      	str	r3, [sp, #0]
    bb04:	7be3      	ldrb	r3, [r4, #15]
    bb06:	f010 fa13 	bl	1bf30 <send_ack.isra.0>
			return -EMSGSIZE;
    bb0a:	f06f 0a79 	mvn.w	sl, #121	; 0x79
    bb0e:	e03c      	b.n	bb8a <bt_mesh_trans_recv+0x1fa>
	if (rx->hdr != *hdr || rx->seg_n != seg_n) {
    bb10:	f899 1000 	ldrb.w	r1, [r9]
    bb14:	7faa      	ldrb	r2, [r5, #30]
    bb16:	4291      	cmp	r1, r2
    bb18:	d104      	bne.n	bb24 <bt_mesh_trans_recv+0x194>
    bb1a:	7fea      	ldrb	r2, [r5, #31]
    bb1c:	f002 021f 	and.w	r2, r2, #31
    bb20:	4542      	cmp	r2, r8
    bb22:	d008      	beq.n	bb36 <bt_mesh_trans_recv+0x1a6>
    bb24:	4942      	ldr	r1, [pc, #264]	; (bc30 <bt_mesh_trans_recv+0x2a0>)
    bb26:	4b43      	ldr	r3, [pc, #268]	; (bc34 <bt_mesh_trans_recv+0x2a4>)
		BT_ERR("Invalid segment for ongoing session");
    bb28:	484a      	ldr	r0, [pc, #296]	; (bc54 <bt_mesh_trans_recv+0x2c4>)
    bb2a:	1ac9      	subs	r1, r1, r3
    bb2c:	08c9      	lsrs	r1, r1, #3
    bb2e:	0189      	lsls	r1, r1, #6
    bb30:	f041 0101 	orr.w	r1, r1, #1
    bb34:	e214      	b.n	bf60 <bt_mesh_trans_recv+0x5d0>
	if (rx->ctl != net_rx->ctl) {
    bb36:	4844      	ldr	r0, [pc, #272]	; (bc48 <bt_mesh_trans_recv+0x2b8>)
    bb38:	7fc1      	ldrb	r1, [r0, #31]
    bb3a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    bb3e:	f3c1 1c40 	ubfx	ip, r1, #5, #1
    bb42:	459c      	cmp	ip, r3
    bb44:	d008      	beq.n	bb58 <bt_mesh_trans_recv+0x1c8>
    bb46:	493a      	ldr	r1, [pc, #232]	; (bc30 <bt_mesh_trans_recv+0x2a0>)
    bb48:	4b3a      	ldr	r3, [pc, #232]	; (bc34 <bt_mesh_trans_recv+0x2a4>)
		BT_ERR("Inconsistent CTL in segment");
    bb4a:	4843      	ldr	r0, [pc, #268]	; (bc58 <bt_mesh_trans_recv+0x2c8>)
    bb4c:	1ac9      	subs	r1, r1, r3
    bb4e:	08c9      	lsrs	r1, r1, #3
    bb50:	0189      	lsls	r1, r1, #6
    bb52:	f041 0101 	orr.w	r1, r1, #1
    bb56:	e203      	b.n	bf60 <bt_mesh_trans_recv+0x5d0>
		if (rx->in_use) {
    bb58:	064b      	lsls	r3, r1, #25
    bb5a:	f100 80b1 	bmi.w	bcc0 <bt_mesh_trans_recv+0x330>
		if (rx->block == BLOCK_COMPLETE(rx->seg_n)) {
    bb5e:	3201      	adds	r2, #1
    bb60:	2301      	movs	r3, #1
    bb62:	6a40      	ldr	r0, [r0, #36]	; 0x24
    bb64:	4093      	lsls	r3, r2
    bb66:	3b01      	subs	r3, #1
    bb68:	4283      	cmp	r3, r0
    bb6a:	d11d      	bne.n	bba8 <bt_mesh_trans_recv+0x218>
			send_ack(net_rx->sub, net_rx->ctx.recv_dst,
    bb6c:	09c9      	lsrs	r1, r1, #7
    bb6e:	e9cd 3101 	strd	r3, r1, [sp, #4]
    bb72:	ab08      	add	r3, sp, #32
    bb74:	6820      	ldr	r0, [r4, #0]
    bb76:	9300      	str	r3, [sp, #0]
    bb78:	8922      	ldrh	r2, [r4, #8]
    bb7a:	7be3      	ldrb	r3, [r4, #15]
    bb7c:	8961      	ldrh	r1, [r4, #10]
    bb7e:	f010 f9d7 	bl	1bf30 <send_ack.isra.0>
			if (rpl) {
    bb82:	9807      	ldr	r0, [sp, #28]
    bb84:	b960      	cbnz	r0, bba0 <bt_mesh_trans_recv+0x210>
		return -EALREADY;
    bb86:	f06f 0a77 	mvn.w	sl, #119	; 0x77
	buf->data = buf->__buf + state->offset;
    bb8a:	68b8      	ldr	r0, [r7, #8]
    bb8c:	9b05      	ldr	r3, [sp, #20]
	buf->len = state->len;
    bb8e:	f8a7 b004 	strh.w	fp, [r7, #4]
	buf->data = buf->__buf + state->offset;
    bb92:	fa10 f083 	uxtah	r0, r0, r3
    bb96:	6038      	str	r0, [r7, #0]
}
    bb98:	4650      	mov	r0, sl
    bb9a:	b015      	add	sp, #84	; 0x54
    bb9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				bt_mesh_rpl_update(rpl, net_rx);
    bba0:	4621      	mov	r1, r4
    bba2:	f010 fa10 	bl	1bfc6 <bt_mesh_rpl_update>
    bba6:	e7ee      	b.n	bb86 <bt_mesh_trans_recv+0x1f6>
    bba8:	4921      	ldr	r1, [pc, #132]	; (bc30 <bt_mesh_trans_recv+0x2a0>)
    bbaa:	4b22      	ldr	r3, [pc, #136]	; (bc34 <bt_mesh_trans_recv+0x2a4>)
		BT_WARN("Got segment for canceled SDU");
    bbac:	482b      	ldr	r0, [pc, #172]	; (bc5c <bt_mesh_trans_recv+0x2cc>)
    bbae:	1ac9      	subs	r1, r1, r3
    bbb0:	08c9      	lsrs	r1, r1, #3
    bbb2:	0189      	lsls	r1, r1, #6
    bbb4:	f041 0102 	orr.w	r1, r1, #2
    bbb8:	e1d2      	b.n	bf60 <bt_mesh_trans_recv+0x5d0>
	if (rpl && rpl->src && auth_seqnum <= rpl->seg &&
    bbba:	9b07      	ldr	r3, [sp, #28]
    bbbc:	b1db      	cbz	r3, bbf6 <bt_mesh_trans_recv+0x266>
    bbbe:	881a      	ldrh	r2, [r3, #0]
    bbc0:	f3c2 020e 	ubfx	r2, r2, #0, #15
    bbc4:	b1ba      	cbz	r2, bbf6 <bt_mesh_trans_recv+0x266>
    bbc6:	685a      	ldr	r2, [r3, #4]
    bbc8:	9904      	ldr	r1, [sp, #16]
    bbca:	ebb1 2f12 	cmp.w	r1, r2, lsr #8
    bbce:	d812      	bhi.n	bbf6 <bt_mesh_trans_recv+0x266>
    bbd0:	f993 3001 	ldrsb.w	r3, [r3, #1]
    bbd4:	2b00      	cmp	r3, #0
    bbd6:	da02      	bge.n	bbde <bt_mesh_trans_recv+0x24e>
	    (!rpl->old_iv || net_rx->old_iv)) {
    bbd8:	7d23      	ldrb	r3, [r4, #20]
    bbda:	07da      	lsls	r2, r3, #31
    bbdc:	d50b      	bpl.n	bbf6 <bt_mesh_trans_recv+0x266>
    bbde:	4b15      	ldr	r3, [pc, #84]	; (bc34 <bt_mesh_trans_recv+0x2a4>)
    bbe0:	4a13      	ldr	r2, [pc, #76]	; (bc30 <bt_mesh_trans_recv+0x2a0>)
		BT_WARN("Ignoring old SeqAuth 0x%06x", auth_seqnum);
    bbe2:	9904      	ldr	r1, [sp, #16]
    bbe4:	481e      	ldr	r0, [pc, #120]	; (bc60 <bt_mesh_trans_recv+0x2d0>)
    bbe6:	1ad2      	subs	r2, r2, r3
    bbe8:	08d2      	lsrs	r2, r2, #3
    bbea:	0192      	lsls	r2, r2, #6
    bbec:	f042 0202 	orr.w	r2, r2, #2
    bbf0:	f00d fc34 	bl	1945c <log_1>
    bbf4:	e7c7      	b.n	bb86 <bt_mesh_trans_recv+0x1f6>
 *
 * @return Number of unallocated memory blocks.
 */
static inline uint32_t k_mem_slab_num_free_get(struct k_mem_slab *slab)
{
	return slab->num_blocks - slab->num_used;
    bbf6:	4b1b      	ldr	r3, [pc, #108]	; (bc64 <bt_mesh_trans_recv+0x2d4>)
	if (k_mem_slab_num_free_get(&segs) < 1) {
    bbf8:	689a      	ldr	r2, [r3, #8]
    bbfa:	699b      	ldr	r3, [r3, #24]
    bbfc:	429a      	cmp	r2, r3
    bbfe:	d137      	bne.n	bc70 <bt_mesh_trans_recv+0x2e0>
    bc00:	490b      	ldr	r1, [pc, #44]	; (bc30 <bt_mesh_trans_recv+0x2a0>)
    bc02:	4b0c      	ldr	r3, [pc, #48]	; (bc34 <bt_mesh_trans_recv+0x2a4>)
		BT_WARN("Not enough segments for incoming message");
    bc04:	4818      	ldr	r0, [pc, #96]	; (bc68 <bt_mesh_trans_recv+0x2d8>)
    bc06:	1ac9      	subs	r1, r1, r3
    bc08:	08c9      	lsrs	r1, r1, #3
    bc0a:	0189      	lsls	r1, r1, #6
    bc0c:	f041 0102 	orr.w	r1, r1, #2
    bc10:	f00d fc17 	bl	19442 <log_0>
    bc14:	4b07      	ldr	r3, [pc, #28]	; (bc34 <bt_mesh_trans_recv+0x2a4>)
    bc16:	4906      	ldr	r1, [pc, #24]	; (bc30 <bt_mesh_trans_recv+0x2a0>)
		BT_WARN("No free slots for new incoming segmented messages");
    bc18:	4814      	ldr	r0, [pc, #80]	; (bc6c <bt_mesh_trans_recv+0x2dc>)
    bc1a:	1ac9      	subs	r1, r1, r3
    bc1c:	08c9      	lsrs	r1, r1, #3
    bc1e:	0189      	lsls	r1, r1, #6
    bc20:	f041 0102 	orr.w	r1, r1, #2
    bc24:	f00d fc0d 	bl	19442 <log_0>
		return -ENOMEM;
    bc28:	f06f 0a0b 	mvn.w	sl, #11
    bc2c:	e7ad      	b.n	bb8a <bt_mesh_trans_recv+0x1fa>
    bc2e:	bf00      	nop
    bc30:	0001f0f4 	.word	0x0001f0f4
    bc34:	0001ef2c 	.word	0x0001ef2c
    bc38:	00021a7d 	.word	0x00021a7d
    bc3c:	00021aa2 	.word	0x00021aa2
    bc40:	00021acb 	.word	0x00021acb
    bc44:	200011d8 	.word	0x200011d8
    bc48:	20001240 	.word	0x20001240
    bc4c:	00021aec 	.word	0x00021aec
    bc50:	00021b7c 	.word	0x00021b7c
    bc54:	00021b1f 	.word	0x00021b1f
    bc58:	00021b43 	.word	0x00021b43
    bc5c:	00021b5f 	.word	0x00021b5f
    bc60:	00021b98 	.word	0x00021b98
    bc64:	20000b3c 	.word	0x20000b3c
    bc68:	00021bb4 	.word	0x00021bb4
    bc6c:	00021bdd 	.word	0x00021bdd
		if (rx->in_use) {
    bc70:	7fe9      	ldrb	r1, [r5, #31]
    bc72:	f011 0040 	ands.w	r0, r1, #64	; 0x40
    bc76:	d1cd      	bne.n	bc14 <bt_mesh_trans_recv+0x284>
		rx->sub = net_rx->sub;
    bc78:	6823      	ldr	r3, [r4, #0]
		rx->ctl = net_rx->ctl;
    bc7a:	f894 c014 	ldrb.w	ip, [r4, #20]
		rx->sub = net_rx->sub;
    bc7e:	602b      	str	r3, [r5, #0]
		rx->seq_auth = *seq_auth;
    bc80:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
		rx->ctl = net_rx->ctl;
    bc84:	f3cc 0cc0 	ubfx	ip, ip, #3, #1
		rx->seg_n = seg_n;
    bc88:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
		rx->seq_auth = *seq_auth;
    bc8c:	e9c5 2304 	strd	r2, r3, [r5, #16]
		rx->seg_n = seg_n;
    bc90:	ea4a 1a4c 	orr.w	sl, sl, ip, lsl #5
    bc94:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
    bc98:	ea4a 0101 	orr.w	r1, sl, r1
    bc9c:	77e9      	strb	r1, [r5, #31]
		rx->hdr = *hdr;
    bc9e:	f899 3000 	ldrb.w	r3, [r9]
    bca2:	77ab      	strb	r3, [r5, #30]
		rx->ttl = net_rx->ctx.send_ttl;
    bca4:	7be3      	ldrb	r3, [r4, #15]
    bca6:	f885 3020 	strb.w	r3, [r5, #32]
		rx->src = net_rx->ctx.addr;
    bcaa:	8923      	ldrh	r3, [r4, #8]
    bcac:	832b      	strh	r3, [r5, #24]
		rx->dst = net_rx->ctx.recv_dst;
    bcae:	8963      	ldrh	r3, [r4, #10]
    bcb0:	836b      	strh	r3, [r5, #26]
	rx->obo = net_rx->friend_match;
    bcb2:	7d23      	ldrb	r3, [r4, #20]
		rx->block = 0U;
    bcb4:	6268      	str	r0, [r5, #36]	; 0x24
	rx->obo = net_rx->friend_match;
    bcb6:	b2ca      	uxtb	r2, r1
    bcb8:	09db      	lsrs	r3, r3, #7
    bcba:	f363 12c7 	bfi	r2, r3, #7, #1
    bcbe:	77ea      	strb	r2, [r5, #31]
	if (BIT(seg_o) & rx->block) {
    bcc0:	f8df a2a4 	ldr.w	sl, [pc, #676]	; bf68 <bt_mesh_trans_recv+0x5d8>
    bcc4:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
    bcc8:	40f3      	lsrs	r3, r6
    bcca:	f013 0301 	ands.w	r3, r3, #1
    bcce:	f47f af5a 	bne.w	bb86 <bt_mesh_trans_recv+0x1f6>
		rx->len = seg_n * seg_len(rx->ctl) + buf->len;
    bcd2:	f89a 101f 	ldrb.w	r1, [sl, #31]
    bcd6:	88ba      	ldrh	r2, [r7, #4]
	if (seg_o == seg_n) {
    bcd8:	4546      	cmp	r6, r8
		rx->len = seg_n * seg_len(rx->ctl) + buf->len;
    bcda:	f3c1 1140 	ubfx	r1, r1, #5, #1
	if (seg_o == seg_n) {
    bcde:	d128      	bne.n	bd32 <bt_mesh_trans_recv+0x3a2>
		return BT_MESH_APP_SEG_SDU_MAX;
    bce0:	2900      	cmp	r1, #0
    bce2:	bf14      	ite	ne
    bce4:	2108      	movne	r1, #8
    bce6:	210c      	moveq	r1, #12
		rx->len = seg_n * seg_len(rx->ctl) + buf->len;
    bce8:	fb01 2206 	mla	r2, r1, r6, r2
    bcec:	b292      	uxth	r2, r2
		if (rx->len > BT_MESH_RX_SDU_MAX) {
    bcee:	2a24      	cmp	r2, #36	; 0x24
		rx->len = seg_n * seg_len(rx->ctl) + buf->len;
    bcf0:	f8aa 201c 	strh.w	r2, [sl, #28]
		if (rx->len > BT_MESH_RX_SDU_MAX) {
    bcf4:	d92c      	bls.n	bd50 <bt_mesh_trans_recv+0x3c0>
    bcf6:	4a9d      	ldr	r2, [pc, #628]	; (bf6c <bt_mesh_trans_recv+0x5dc>)
    bcf8:	499d      	ldr	r1, [pc, #628]	; (bf70 <bt_mesh_trans_recv+0x5e0>)
			BT_ERR("Too large SDU len");
    bcfa:	489e      	ldr	r0, [pc, #632]	; (bf74 <bt_mesh_trans_recv+0x5e4>)
    bcfc:	9304      	str	r3, [sp, #16]
    bcfe:	1a89      	subs	r1, r1, r2
    bd00:	08c9      	lsrs	r1, r1, #3
    bd02:	0189      	lsls	r1, r1, #6
    bd04:	f041 0101 	orr.w	r1, r1, #1
    bd08:	f00d fb9b 	bl	19442 <log_0>
				 seq_auth, 0, rx->obo);
    bd0c:	f89a 201f 	ldrb.w	r2, [sl, #31]
			send_ack(net_rx->sub, net_rx->ctx.recv_dst,
    bd10:	9b04      	ldr	r3, [sp, #16]
    bd12:	9301      	str	r3, [sp, #4]
    bd14:	09d2      	lsrs	r2, r2, #7
    bd16:	ab08      	add	r3, sp, #32
    bd18:	8961      	ldrh	r1, [r4, #10]
    bd1a:	6820      	ldr	r0, [r4, #0]
    bd1c:	9202      	str	r2, [sp, #8]
    bd1e:	9300      	str	r3, [sp, #0]
    bd20:	8922      	ldrh	r2, [r4, #8]
    bd22:	7be3      	ldrb	r3, [r4, #15]
    bd24:	f010 f904 	bl	1bf30 <send_ack.isra.0>
			seg_rx_reset(rx, true);
    bd28:	2101      	movs	r1, #1
    bd2a:	4650      	mov	r0, sl
    bd2c:	f7ff f978 	bl	b020 <seg_rx_reset>
    bd30:	e6eb      	b.n	bb0a <bt_mesh_trans_recv+0x17a>
		return BT_MESH_APP_SEG_SDU_MAX;
    bd32:	2900      	cmp	r1, #0
		if (buf->len != seg_len(rx->ctl)) {
    bd34:	bf14      	ite	ne
    bd36:	2308      	movne	r3, #8
    bd38:	230c      	moveq	r3, #12
    bd3a:	4293      	cmp	r3, r2
    bd3c:	d008      	beq.n	bd50 <bt_mesh_trans_recv+0x3c0>
    bd3e:	498c      	ldr	r1, [pc, #560]	; (bf70 <bt_mesh_trans_recv+0x5e0>)
    bd40:	4b8a      	ldr	r3, [pc, #552]	; (bf6c <bt_mesh_trans_recv+0x5dc>)
			BT_ERR("Incorrect segment size for message type");
    bd42:	488d      	ldr	r0, [pc, #564]	; (bf78 <bt_mesh_trans_recv+0x5e8>)
    bd44:	1ac9      	subs	r1, r1, r3
    bd46:	08c9      	lsrs	r1, r1, #3
    bd48:	0189      	lsls	r1, r1, #6
    bd4a:	f041 0101 	orr.w	r1, r1, #1
    bd4e:	e107      	b.n	bf60 <bt_mesh_trans_recv+0x5d0>
	return z_impl_k_uptime_ticks();
    bd50:	f012 fe34 	bl	1e9bc <z_impl_k_uptime_ticks>
    bd54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    bd58:	fba0 0302 	umull	r0, r3, r0, r2
    bd5c:	fb02 3301 	mla	r3, r2, r1, r3
    bd60:	0bc0      	lsrs	r0, r0, #15
    bd62:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return (uint32_t)k_uptime_get();
    bd66:	62a8      	str	r0, [r5, #40]	; 0x28
		int32_t timeout = ack_timeout(rx);
    bd68:	487f      	ldr	r0, [pc, #508]	; (bf68 <bt_mesh_trans_recv+0x5d8>)
    bd6a:	f010 f85a 	bl	1be22 <ack_timeout>
		k_work_schedule(&rx->ack, K_MSEC(timeout));
    bd6e:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
    bd72:	f240 30e7 	movw	r0, #999	; 0x3e7
    bd76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    bd7a:	2300      	movs	r3, #0
    bd7c:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
    bd80:	1449      	asrs	r1, r1, #17
    bd82:	f7f4 f9fd 	bl	180 <__aeabi_uldivmod>
    bd86:	4602      	mov	r2, r0
    bd88:	460b      	mov	r3, r1
    bd8a:	487c      	ldr	r0, [pc, #496]	; (bf7c <bt_mesh_trans_recv+0x5ec>)
    bd8c:	f00c f838 	bl	17e00 <k_work_schedule>
	err = k_mem_slab_alloc(&segs, &rx->seg[seg_o], K_NO_WAIT);
    bd90:	1c71      	adds	r1, r6, #1
    bd92:	b2c9      	uxtb	r1, r1
    bd94:	487a      	ldr	r0, [pc, #488]	; (bf80 <bt_mesh_trans_recv+0x5f0>)
    bd96:	2200      	movs	r2, #0
    bd98:	2300      	movs	r3, #0
    bd9a:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    bd9e:	f00b fc6f 	bl	17680 <k_mem_slab_alloc>
	if (err) {
    bda2:	4682      	mov	sl, r0
    bda4:	b168      	cbz	r0, bdc2 <bt_mesh_trans_recv+0x432>
    bda6:	4b71      	ldr	r3, [pc, #452]	; (bf6c <bt_mesh_trans_recv+0x5dc>)
    bda8:	4a71      	ldr	r2, [pc, #452]	; (bf70 <bt_mesh_trans_recv+0x5e0>)
		BT_WARN("Unable allocate buffer for Seg %u", seg_o);
    bdaa:	4876      	ldr	r0, [pc, #472]	; (bf84 <bt_mesh_trans_recv+0x5f4>)
    bdac:	1ad2      	subs	r2, r2, r3
    bdae:	08d2      	lsrs	r2, r2, #3
    bdb0:	0192      	lsls	r2, r2, #6
    bdb2:	f042 0202 	orr.w	r2, r2, #2
    bdb6:	4631      	mov	r1, r6
    bdb8:	f00d fb50 	bl	1945c <log_1>
		return -ENOBUFS;
    bdbc:	f06f 0a68 	mvn.w	sl, #104	; 0x68
    bdc0:	e6e3      	b.n	bb8a <bt_mesh_trans_recv+0x1fa>
	memcpy(rx->seg[seg_o], buf->data, buf->len);
    bdc2:	eb05 0386 	add.w	r3, r5, r6, lsl #2
    bdc6:	88ba      	ldrh	r2, [r7, #4]
    bdc8:	6858      	ldr	r0, [r3, #4]
    bdca:	6839      	ldr	r1, [r7, #0]
    bdcc:	f00e fa57 	bl	1a27e <memcpy>
	rx->block |= BIT(seg_o);
    bdd0:	2301      	movs	r3, #1
    bdd2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
    bdd4:	4498      	add	r8, r3
	rx->block |= BIT(seg_o);
    bdd6:	fa03 f606 	lsl.w	r6, r3, r6
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
    bdda:	fa03 f308 	lsl.w	r3, r3, r8
	rx->block |= BIT(seg_o);
    bdde:	4316      	orrs	r6, r2
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
    bde0:	3b01      	subs	r3, #1
    bde2:	429e      	cmp	r6, r3
	rx->block |= BIT(seg_o);
    bde4:	626e      	str	r6, [r5, #36]	; 0x24
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
    bde6:	f47f aed0 	bne.w	bb8a <bt_mesh_trans_recv+0x1fa>
	if (rpl) {
    bdea:	9807      	ldr	r0, [sp, #28]
    bdec:	b168      	cbz	r0, be0a <bt_mesh_trans_recv+0x47a>
		bt_mesh_rpl_update(rpl, net_rx);
    bdee:	4621      	mov	r1, r4
    bdf0:	f010 f8e9 	bl	1bfc6 <bt_mesh_rpl_update>
		rpl->seg = MAX(rpl->seg, auth_seqnum);
    bdf4:	9907      	ldr	r1, [sp, #28]
    bdf6:	9804      	ldr	r0, [sp, #16]
    bdf8:	684b      	ldr	r3, [r1, #4]
    bdfa:	f3c3 2217 	ubfx	r2, r3, #8, #24
    bdfe:	4282      	cmp	r2, r0
    be00:	bf38      	it	cc
    be02:	4602      	movcc	r2, r0
    be04:	f362 231f 	bfi	r3, r2, #8, #24
    be08:	604b      	str	r3, [r1, #4]
	(void)k_work_cancel_delayable(&rx->ack);
    be0a:	4d57      	ldr	r5, [pc, #348]	; (bf68 <bt_mesh_trans_recv+0x5d8>)
    be0c:	f105 0030 	add.w	r0, r5, #48	; 0x30
    be10:	f012 fc34 	bl	1e67c <k_work_cancel_delayable>
		 net_rx->ctx.send_ttl, seq_auth, rx->block, rx->obo);
    be14:	7feb      	ldrb	r3, [r5, #31]
	send_ack(net_rx->sub, net_rx->ctx.recv_dst, net_rx->ctx.addr,
    be16:	8922      	ldrh	r2, [r4, #8]
    be18:	8961      	ldrh	r1, [r4, #10]
    be1a:	6820      	ldr	r0, [r4, #0]
    be1c:	09db      	lsrs	r3, r3, #7
    be1e:	9302      	str	r3, [sp, #8]
    be20:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    be22:	9301      	str	r3, [sp, #4]
    be24:	ae08      	add	r6, sp, #32
    be26:	7be3      	ldrb	r3, [r4, #15]
    be28:	9600      	str	r6, [sp, #0]
    be2a:	f010 f881 	bl	1bf30 <send_ack.isra.0>
	if (net_rx->ctl) {
    be2e:	7d23      	ldrb	r3, [r4, #20]
    be30:	071b      	lsls	r3, r3, #28
    be32:	d513      	bpl.n	be5c <bt_mesh_trans_recv+0x4cc>
		NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_RX_CTL_MAX);
    be34:	ab0e      	add	r3, sp, #56	; 0x38
    be36:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
    be3a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		seg_rx_assemble(rx, &sdu, 0U);
    be3e:	a90b      	add	r1, sp, #44	; 0x2c
    be40:	2200      	movs	r2, #0
    be42:	4628      	mov	r0, r5
		NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_RX_CTL_MAX);
    be44:	930b      	str	r3, [sp, #44]	; 0x2c
		seg_rx_assemble(rx, &sdu, 0U);
    be46:	f00f ffbd 	bl	1bdc4 <seg_rx_assemble>
		err = ctl_recv(net_rx, *hdr, &sdu, seq_auth);
    be4a:	f899 1000 	ldrb.w	r1, [r9]
    be4e:	4633      	mov	r3, r6
    be50:	aa0b      	add	r2, sp, #44	; 0x2c
    be52:	4620      	mov	r0, r4
    be54:	f7ff fa80 	bl	b358 <ctl_recv>
		err = sdu_recv(net_rx, *hdr, ASZMIC(hdr), &seg_buf, &sdu, rx);
    be58:	4682      	mov	sl, r0
    be5a:	e014      	b.n	be86 <bt_mesh_trans_recv+0x4f6>
	} else if (rx->len < 1 + APP_MIC_LEN(ASZMIC(hdr))) {
    be5c:	f899 3001 	ldrb.w	r3, [r9, #1]
    be60:	8baa      	ldrh	r2, [r5, #28]
    be62:	09db      	lsrs	r3, r3, #7
    be64:	bf14      	ite	ne
    be66:	2309      	movne	r3, #9
    be68:	2305      	moveq	r3, #5
    be6a:	429a      	cmp	r2, r3
    be6c:	da10      	bge.n	be90 <bt_mesh_trans_recv+0x500>
    be6e:	4b3f      	ldr	r3, [pc, #252]	; (bf6c <bt_mesh_trans_recv+0x5dc>)
    be70:	493f      	ldr	r1, [pc, #252]	; (bf70 <bt_mesh_trans_recv+0x5e0>)
		BT_ERR("Too short SDU + MIC");
    be72:	4845      	ldr	r0, [pc, #276]	; (bf88 <bt_mesh_trans_recv+0x5f8>)
    be74:	1ac9      	subs	r1, r1, r3
    be76:	08c9      	lsrs	r1, r1, #3
    be78:	0189      	lsls	r1, r1, #6
    be7a:	f041 0101 	orr.w	r1, r1, #1
    be7e:	f00d fae0 	bl	19442 <log_0>
		err = -EINVAL;
    be82:	f06f 0a15 	mvn.w	sl, #21
	seg_rx_reset(rx, false);
    be86:	4838      	ldr	r0, [pc, #224]	; (bf68 <bt_mesh_trans_recv+0x5d8>)
    be88:	2100      	movs	r1, #0
    be8a:	f7ff f8c9 	bl	b020 <seg_rx_reset>
	return err;
    be8e:	e67c      	b.n	bb8a <bt_mesh_trans_recv+0x1fa>
	if (!buf->__buf) {
    be90:	4b3e      	ldr	r3, [pc, #248]	; (bf8c <bt_mesh_trans_recv+0x5fc>)
    be92:	6899      	ldr	r1, [r3, #8]
    be94:	b911      	cbnz	r1, be9c <bt_mesh_trans_recv+0x50c>
		buf->__buf = (uint8_t *)buf + sizeof(*buf);
    be96:	f103 010c 	add.w	r1, r3, #12
    be9a:	6099      	str	r1, [r3, #8]
	buf->data = buf->__buf + reserve_head;
    be9c:	6899      	ldr	r1, [r3, #8]
    be9e:	6019      	str	r1, [r3, #0]
	buf->len = 0U;
    bea0:	2000      	movs	r0, #0
    bea2:	8098      	strh	r0, [r3, #4]
			&sdu, seg_buf.data, rx->len - APP_MIC_LEN(ASZMIC(hdr)));
    bea4:	f899 3001 	ldrb.w	r3, [r9, #1]
    bea8:	09db      	lsrs	r3, r3, #7
    beaa:	bf14      	ite	ne
    beac:	2308      	movne	r3, #8
    beae:	2304      	moveq	r3, #4
		net_buf_simple_init_with_data(
    beb0:	ae0e      	add	r6, sp, #56	; 0x38
    beb2:	1ad2      	subs	r2, r2, r3
    beb4:	4630      	mov	r0, r6
    beb6:	f011 fe42 	bl	1db3e <net_buf_simple_init_with_data>
		err = sdu_recv(net_rx, *hdr, ASZMIC(hdr), &seg_buf, &sdu, rx);
    beba:	f899 2001 	ldrb.w	r2, [r9, #1]
    bebe:	f899 1000 	ldrb.w	r1, [r9]
    bec2:	4b32      	ldr	r3, [pc, #200]	; (bf8c <bt_mesh_trans_recv+0x5fc>)
    bec4:	e9cd 6500 	strd	r6, r5, [sp]
    bec8:	09d2      	lsrs	r2, r2, #7
    beca:	4620      	mov	r0, r4
    becc:	f7ff fd10 	bl	b8f0 <sdu_recv>
    bed0:	e7c2      	b.n	be58 <bt_mesh_trans_recv+0x4c8>
	if (buf->len < 1) {
    bed2:	f1bb 0f00 	cmp.w	fp, #0
    bed6:	d108      	bne.n	beea <bt_mesh_trans_recv+0x55a>
    bed8:	4925      	ldr	r1, [pc, #148]	; (bf70 <bt_mesh_trans_recv+0x5e0>)
    beda:	4b24      	ldr	r3, [pc, #144]	; (bf6c <bt_mesh_trans_recv+0x5dc>)
		BT_ERR("Too small unsegmented PDU");
    bedc:	482c      	ldr	r0, [pc, #176]	; (bf90 <bt_mesh_trans_recv+0x600>)
    bede:	1ac9      	subs	r1, r1, r3
    bee0:	08c9      	lsrs	r1, r1, #3
    bee2:	0189      	lsls	r1, r1, #6
    bee4:	f041 0101 	orr.w	r1, r1, #1
    bee8:	e03a      	b.n	bf60 <bt_mesh_trans_recv+0x5d0>
	if (bt_mesh_rpl_check(rx, NULL)) {
    beea:	2100      	movs	r1, #0
    beec:	4620      	mov	r0, r4
    beee:	f000 f943 	bl	c178 <bt_mesh_rpl_check>
    bef2:	2800      	cmp	r0, #0
    bef4:	f47f ad89 	bne.w	ba0a <bt_mesh_trans_recv+0x7a>
	hdr = net_buf_simple_pull_u8(buf);
    bef8:	4638      	mov	r0, r7
    befa:	f011 feef 	bl	1dcdc <net_buf_simple_pull_u8>
	if (rx->ctl) {
    befe:	7d22      	ldrb	r2, [r4, #20]
    bf00:	f012 0208 	ands.w	r2, r2, #8
	hdr = net_buf_simple_pull_u8(buf);
    bf04:	4601      	mov	r1, r0
	if (rx->ctl) {
    bf06:	d006      	beq.n	bf16 <bt_mesh_trans_recv+0x586>
		return ctl_recv(rx, hdr, buf, seq_auth);
    bf08:	ab08      	add	r3, sp, #32
    bf0a:	463a      	mov	r2, r7
    bf0c:	4620      	mov	r0, r4
    bf0e:	f7ff fa23 	bl	b358 <ctl_recv>
	return sdu_recv(rx, hdr, 0, buf, &sdu, NULL);
    bf12:	4682      	mov	sl, r0
    bf14:	e639      	b.n	bb8a <bt_mesh_trans_recv+0x1fa>
	if (buf->len < 1 + APP_MIC_LEN(0)) {
    bf16:	88bb      	ldrh	r3, [r7, #4]
    bf18:	2b04      	cmp	r3, #4
    bf1a:	d808      	bhi.n	bf2e <bt_mesh_trans_recv+0x59e>
    bf1c:	4914      	ldr	r1, [pc, #80]	; (bf70 <bt_mesh_trans_recv+0x5e0>)
    bf1e:	4b13      	ldr	r3, [pc, #76]	; (bf6c <bt_mesh_trans_recv+0x5dc>)
		BT_ERR("Too short SDU + MIC");
    bf20:	4819      	ldr	r0, [pc, #100]	; (bf88 <bt_mesh_trans_recv+0x5f8>)
    bf22:	1ac9      	subs	r1, r1, r3
    bf24:	08c9      	lsrs	r1, r1, #3
    bf26:	0189      	lsls	r1, r1, #6
    bf28:	f041 0101 	orr.w	r1, r1, #1
    bf2c:	e018      	b.n	bf60 <bt_mesh_trans_recv+0x5d0>
	buf->len -= APP_MIC_LEN(0);
    bf2e:	3b04      	subs	r3, #4
    bf30:	80bb      	strh	r3, [r7, #4]
	return sdu_recv(rx, hdr, 0, buf, &sdu, NULL);
    bf32:	4b18      	ldr	r3, [pc, #96]	; (bf94 <bt_mesh_trans_recv+0x604>)
    bf34:	9300      	str	r3, [sp, #0]
    bf36:	9201      	str	r2, [sp, #4]
    bf38:	463b      	mov	r3, r7
    bf3a:	4620      	mov	r0, r4
    bf3c:	f7ff fcd8 	bl	b8f0 <sdu_recv>
    bf40:	e7e7      	b.n	bf12 <bt_mesh_trans_recv+0x582>
			return 0;
    bf42:	4682      	mov	sl, r0
    bf44:	e628      	b.n	bb98 <bt_mesh_trans_recv+0x208>
		if (rx->seq_auth > *seq_auth) {
    bf46:	458c      	cmp	ip, r1
    bf48:	eb70 0202 	sbcs.w	r2, r0, r2
    bf4c:	f4bf ade0 	bcs.w	bb10 <bt_mesh_trans_recv+0x180>
    bf50:	4907      	ldr	r1, [pc, #28]	; (bf70 <bt_mesh_trans_recv+0x5e0>)
    bf52:	4b06      	ldr	r3, [pc, #24]	; (bf6c <bt_mesh_trans_recv+0x5dc>)
			BT_WARN("Ignoring old SeqAuth");
    bf54:	4810      	ldr	r0, [pc, #64]	; (bf98 <bt_mesh_trans_recv+0x608>)
    bf56:	1ac9      	subs	r1, r1, r3
    bf58:	08c9      	lsrs	r1, r1, #3
    bf5a:	0189      	lsls	r1, r1, #6
    bf5c:	f041 0102 	orr.w	r1, r1, #2
		BT_ERR("Too short SDU + MIC");
    bf60:	f00d fa6f 	bl	19442 <log_0>
		return -EINVAL;
    bf64:	e549      	b.n	b9fa <bt_mesh_trans_recv+0x6a>
    bf66:	bf00      	nop
    bf68:	20001240 	.word	0x20001240
    bf6c:	0001ef2c 	.word	0x0001ef2c
    bf70:	0001f0f4 	.word	0x0001f0f4
    bf74:	00021c0f 	.word	0x00021c0f
    bf78:	00021c21 	.word	0x00021c21
    bf7c:	20001270 	.word	0x20001270
    bf80:	20000b3c 	.word	0x20000b3c
    bf84:	00021c49 	.word	0x00021c49
    bf88:	00021c6b 	.word	0x00021c6b
    bf8c:	200004dc 	.word	0x200004dc
    bf90:	00021c7f 	.word	0x00021c7f
    bf94:	200004d0 	.word	0x200004d0
    bf98:	00021b0a 	.word	0x00021b0a

0000bf9c <rpl_set>:
	}
}

static int rpl_set(const char *name, size_t len_rd,
		   settings_read_cb read_cb, void *cb_arg)
{
    bf9c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    bfa0:	460d      	mov	r5, r1
    bfa2:	4617      	mov	r7, r2
    bfa4:	4698      	mov	r8, r3
	struct bt_mesh_rpl *entry;
	struct rpl_val rpl;
	int err;
	uint16_t src;

	if (!name) {
    bfa6:	b978      	cbnz	r0, bfc8 <rpl_set+0x2c>
    bfa8:	4b3a      	ldr	r3, [pc, #232]	; (c094 <rpl_set+0xf8>)
    bfaa:	493b      	ldr	r1, [pc, #236]	; (c098 <rpl_set+0xfc>)
		BT_ERR("Insufficient number of arguments");
    bfac:	483b      	ldr	r0, [pc, #236]	; (c09c <rpl_set+0x100>)
    bfae:	1ac9      	subs	r1, r1, r3
    bfb0:	08c9      	lsrs	r1, r1, #3
    bfb2:	0189      	lsls	r1, r1, #6
    bfb4:	f041 0101 	orr.w	r1, r1, #1
    bfb8:	f00d fa43 	bl	19442 <log_0>
		return -ENOENT;
    bfbc:	f06f 0501 	mvn.w	r5, #1

	BT_DBG("RPL entry for 0x%04x: Seq 0x%06x old_iv %u", entry->src,
	       entry->seq, entry->old_iv);

	return 0;
}
    bfc0:	4628      	mov	r0, r5
    bfc2:	b002      	add	sp, #8
    bfc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	src = strtol(name, NULL, 16);
    bfc8:	2100      	movs	r1, #0
    bfca:	2210      	movs	r2, #16
    bfcc:	f00e f810 	bl	19ff0 <strtol>
		if (replay_list[i].src == src) {
    bfd0:	4c33      	ldr	r4, [pc, #204]	; (c0a0 <rpl_set+0x104>)
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    bfd2:	2300      	movs	r3, #0
    bfd4:	b281      	uxth	r1, r0
		if (replay_list[i].src == src) {
    bfd6:	f834 2033 	ldrh.w	r2, [r4, r3, lsl #3]
    bfda:	f3c2 020e 	ubfx	r2, r2, #0, #15
    bfde:	4291      	cmp	r1, r2
    bfe0:	d117      	bne.n	c012 <rpl_set+0x76>
			return &replay_list[i];
    bfe2:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
	if (len_rd == 0) {
    bfe6:	b32d      	cbz	r5, c034 <rpl_set+0x98>
	err = bt_mesh_settings_set(read_cb, cb_arg, &rpl, sizeof(rpl));
    bfe8:	2304      	movs	r3, #4
    bfea:	eb0d 0203 	add.w	r2, sp, r3
    bfee:	4641      	mov	r1, r8
    bff0:	4638      	mov	r0, r7
    bff2:	f000 ff1f 	bl	ce34 <bt_mesh_settings_set>
	if (err) {
    bff6:	4605      	mov	r5, r0
    bff8:	2800      	cmp	r0, #0
    bffa:	d03c      	beq.n	c076 <rpl_set+0xda>
    bffc:	4b25      	ldr	r3, [pc, #148]	; (c094 <rpl_set+0xf8>)
    bffe:	4926      	ldr	r1, [pc, #152]	; (c098 <rpl_set+0xfc>)
		BT_ERR("Failed to set `net`");
    c000:	4828      	ldr	r0, [pc, #160]	; (c0a4 <rpl_set+0x108>)
    c002:	1ac9      	subs	r1, r1, r3
    c004:	08c9      	lsrs	r1, r1, #3
    c006:	0189      	lsls	r1, r1, #6
    c008:	f041 0101 	orr.w	r1, r1, #1
    c00c:	f00d fa19 	bl	19442 <log_0>
		return err;
    c010:	e7d6      	b.n	bfc0 <rpl_set+0x24>
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    c012:	3301      	adds	r3, #1
    c014:	2b0a      	cmp	r3, #10
    c016:	d1de      	bne.n	bfd6 <rpl_set+0x3a>
	if (len_rd == 0) {
    c018:	b195      	cbz	r5, c040 <rpl_set+0xa4>
    c01a:	2500      	movs	r5, #0
		if (!replay_list[i].src) {
    c01c:	f834 6035 	ldrh.w	r6, [r4, r5, lsl #3]
    c020:	f3c6 030e 	ubfx	r3, r6, #0, #15
    c024:	b9bb      	cbnz	r3, c056 <rpl_set+0xba>
			replay_list[i].src = src;
    c026:	f360 060e 	bfi	r6, r0, #0, #15
    c02a:	f824 6035 	strh.w	r6, [r4, r5, lsl #3]
			return &replay_list[i];
    c02e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
		if (!entry) {
    c032:	e7d9      	b.n	bfe8 <rpl_set+0x4c>
			(void)memset(entry, 0, sizeof(*entry));
    c034:	2208      	movs	r2, #8
    c036:	4629      	mov	r1, r5
    c038:	4620      	mov	r0, r4
    c03a:	f00e f92b 	bl	1a294 <memset>
    c03e:	e7bf      	b.n	bfc0 <rpl_set+0x24>
    c040:	4b14      	ldr	r3, [pc, #80]	; (c094 <rpl_set+0xf8>)
    c042:	4a15      	ldr	r2, [pc, #84]	; (c098 <rpl_set+0xfc>)
			BT_WARN("Unable to find RPL entry for 0x%04x", src);
    c044:	4818      	ldr	r0, [pc, #96]	; (c0a8 <rpl_set+0x10c>)
    c046:	1ad2      	subs	r2, r2, r3
    c048:	08d2      	lsrs	r2, r2, #3
    c04a:	0192      	lsls	r2, r2, #6
    c04c:	f042 0202 	orr.w	r2, r2, #2
    c050:	f00d fa04 	bl	1945c <log_1>
    c054:	e7b4      	b.n	bfc0 <rpl_set+0x24>
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    c056:	3501      	adds	r5, #1
    c058:	2d0a      	cmp	r5, #10
    c05a:	d1df      	bne.n	c01c <rpl_set+0x80>
    c05c:	4b0d      	ldr	r3, [pc, #52]	; (c094 <rpl_set+0xf8>)
    c05e:	4a0e      	ldr	r2, [pc, #56]	; (c098 <rpl_set+0xfc>)
			BT_ERR("Unable to allocate RPL entry for 0x%04x", src);
    c060:	4812      	ldr	r0, [pc, #72]	; (c0ac <rpl_set+0x110>)
    c062:	1ad2      	subs	r2, r2, r3
    c064:	08d2      	lsrs	r2, r2, #3
    c066:	0192      	lsls	r2, r2, #6
    c068:	f042 0201 	orr.w	r2, r2, #1
    c06c:	f00d f9f6 	bl	1945c <log_1>
			return -ENOMEM;
    c070:	f06f 050b 	mvn.w	r5, #11
    c074:	e7a4      	b.n	bfc0 <rpl_set+0x24>
	entry->seq = rpl.seq;
    c076:	9b01      	ldr	r3, [sp, #4]
    c078:	8063      	strh	r3, [r4, #2]
    c07a:	f3c3 4307 	ubfx	r3, r3, #16, #8
    c07e:	7123      	strb	r3, [r4, #4]
	entry->old_iv = rpl.old_iv;
    c080:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c084:	7862      	ldrb	r2, [r4, #1]
    c086:	f3c3 0300 	ubfx	r3, r3, #0, #1
    c08a:	f363 12c7 	bfi	r2, r3, #7, #1
    c08e:	7062      	strb	r2, [r4, #1]
	return 0;
    c090:	e796      	b.n	bfc0 <rpl_set+0x24>
    c092:	bf00      	nop
    c094:	0001ef2c 	.word	0x0001ef2c
    c098:	0001f0e4 	.word	0x0001f0e4
    c09c:	0002008c 	.word	0x0002008c
    c0a0:	20001310 	.word	0x20001310
    c0a4:	00021cda 	.word	0x00021cda
    c0a8:	00021cb6 	.word	0x00021cb6
    c0ac:	00021cee 	.word	0x00021cee

0000c0b0 <clear_rpl>:
{
    c0b0:	b510      	push	{r4, lr}
	if (!rpl->src) {
    c0b2:	8803      	ldrh	r3, [r0, #0]
    c0b4:	f3c3 020e 	ubfx	r2, r3, #0, #15
{
    c0b8:	b086      	sub	sp, #24
    c0ba:	4604      	mov	r4, r0
	if (!rpl->src) {
    c0bc:	b382      	cbz	r2, c120 <clear_rpl+0x70>
	snprintk(path, sizeof(path), "bt/mesh/RPL/%x", rpl->src);
    c0be:	4613      	mov	r3, r2
    c0c0:	2112      	movs	r1, #18
    c0c2:	4a18      	ldr	r2, [pc, #96]	; (c124 <clear_rpl+0x74>)
    c0c4:	a801      	add	r0, sp, #4
    c0c6:	f00c fd8a 	bl	18bde <snprintk>
	err = settings_delete(path);
    c0ca:	a801      	add	r0, sp, #4
    c0cc:	f00d fd15 	bl	19afa <settings_delete>
	if (err) {
    c0d0:	b148      	cbz	r0, c0e6 <clear_rpl+0x36>
    c0d2:	4915      	ldr	r1, [pc, #84]	; (c128 <clear_rpl+0x78>)
    c0d4:	4b15      	ldr	r3, [pc, #84]	; (c12c <clear_rpl+0x7c>)
		BT_ERR("Failed to clear RPL");
    c0d6:	4816      	ldr	r0, [pc, #88]	; (c130 <clear_rpl+0x80>)
    c0d8:	1ac9      	subs	r1, r1, r3
    c0da:	08c9      	lsrs	r1, r1, #3
    c0dc:	0189      	lsls	r1, r1, #6
    c0de:	f041 0101 	orr.w	r1, r1, #1
    c0e2:	f00d f9ae 	bl	19442 <log_0>
	(void)memset(rpl, 0, sizeof(*rpl));
    c0e6:	2208      	movs	r2, #8
    c0e8:	4620      	mov	r0, r4
    c0ea:	2100      	movs	r1, #0
    c0ec:	f00e f8d2 	bl	1a294 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c0f0:	f3bf 8f5b 	dmb	ish
	return rpl - &replay_list[0];
    c0f4:	480f      	ldr	r0, [pc, #60]	; (c134 <clear_rpl+0x84>)
    c0f6:	1a24      	subs	r4, r4, r0
    c0f8:	10e4      	asrs	r4, r4, #3
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    c0fa:	0962      	lsrs	r2, r4, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    c0fc:	2301      	movs	r3, #1
    c0fe:	f004 041f 	and.w	r4, r4, #31
    c102:	fa03 f404 	lsl.w	r4, r3, r4
    c106:	4b0c      	ldr	r3, [pc, #48]	; (c138 <clear_rpl+0x88>)
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    c108:	43e4      	mvns	r4, r4
    c10a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    c10e:	e853 2f00 	ldrex	r2, [r3]
    c112:	4022      	ands	r2, r4
    c114:	e843 2100 	strex	r1, r2, [r3]
    c118:	2900      	cmp	r1, #0
    c11a:	d1f8      	bne.n	c10e <clear_rpl+0x5e>
    c11c:	f3bf 8f5b 	dmb	ish
}
    c120:	b006      	add	sp, #24
    c122:	bd10      	pop	{r4, pc}
    c124:	00021d16 	.word	0x00021d16
    c128:	0001f0e4 	.word	0x0001f0e4
    c12c:	0001ef2c 	.word	0x0001ef2c
    c130:	00021d25 	.word	0x00021d25
    c134:	20001310 	.word	0x20001310
    c138:	20001bb4 	.word	0x20001bb4

0000c13c <schedule_rpl_store.constprop.0>:
	return rpl - &replay_list[0];
    c13c:	4b0c      	ldr	r3, [pc, #48]	; (c170 <schedule_rpl_store.constprop.0+0x34>)
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c13e:	f3bf 8f5b 	dmb	ish
    c142:	1ac0      	subs	r0, r0, r3
    c144:	10c0      	asrs	r0, r0, #3
    c146:	4b0b      	ldr	r3, [pc, #44]	; (c174 <schedule_rpl_store.constprop.0+0x38>)
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    c148:	0941      	lsrs	r1, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    c14a:	2201      	movs	r2, #1
    c14c:	f000 001f 	and.w	r0, r0, #31
    c150:	fa02 f000 	lsl.w	r0, r2, r0
    c154:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    c158:	e853 2f00 	ldrex	r2, [r3]
    c15c:	4302      	orrs	r2, r0
    c15e:	e843 2100 	strex	r1, r2, [r3]
    c162:	2900      	cmp	r1, #0
    c164:	d1f8      	bne.n	c158 <schedule_rpl_store.constprop.0+0x1c>
    c166:	f3bf 8f5b 	dmb	ish
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_RPL_PENDING);
    c16a:	2000      	movs	r0, #0
    c16c:	f000 be94 	b.w	ce98 <bt_mesh_settings_store_schedule>
    c170:	20001310 	.word	0x20001310
    c174:	20001bb4 	.word	0x20001bb4

0000c178 <bt_mesh_rpl_check>:
{
    c178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
    c17a:	7d06      	ldrb	r6, [r0, #20]
    c17c:	f006 0330 	and.w	r3, r6, #48	; 0x30
    c180:	2b10      	cmp	r3, #16
{
    c182:	4605      	mov	r5, r0
    c184:	460c      	mov	r4, r1
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
    c186:	d00c      	beq.n	c1a2 <bt_mesh_rpl_check+0x2a>
	if (!rx->local_match) {
    c188:	f016 0040 	ands.w	r0, r6, #64	; 0x40
    c18c:	d00a      	beq.n	c1a4 <bt_mesh_rpl_check+0x2c>
    c18e:	481d      	ldr	r0, [pc, #116]	; (c204 <bt_mesh_rpl_check+0x8c>)
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    c190:	2200      	movs	r2, #0
    c192:	4601      	mov	r1, r0
		if (!rpl->src) {
    c194:	f831 7032 	ldrh.w	r7, [r1, r2, lsl #3]
    c198:	f3c7 030e 	ubfx	r3, r7, #0, #15
    c19c:	b91b      	cbnz	r3, c1a6 <bt_mesh_rpl_check+0x2e>
				if (match) {
    c19e:	b1ec      	cbz	r4, c1dc <bt_mesh_rpl_check+0x64>
					*match = rpl;
    c1a0:	6020      	str	r0, [r4, #0]
		return false;
    c1a2:	2000      	movs	r0, #0
}
    c1a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (rpl->src == rx->ctx.addr) {
    c1a6:	892b      	ldrh	r3, [r5, #8]
    c1a8:	f3c7 070e 	ubfx	r7, r7, #0, #15
    c1ac:	429f      	cmp	r7, r3
    c1ae:	d119      	bne.n	c1e4 <bt_mesh_rpl_check+0x6c>
			if (rx->old_iv && !rpl->old_iv) {
    c1b0:	00d7      	lsls	r7, r2, #3
    c1b2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    c1b6:	f992 3001 	ldrsb.w	r3, [r2, #1]
    c1ba:	07f2      	lsls	r2, r6, #31
    c1bc:	d503      	bpl.n	c1c6 <bt_mesh_rpl_check+0x4e>
    c1be:	2b00      	cmp	r3, #0
    c1c0:	db03      	blt.n	c1ca <bt_mesh_rpl_check+0x52>
				return true;
    c1c2:	2001      	movs	r0, #1
    c1c4:	e7ee      	b.n	c1a4 <bt_mesh_rpl_check+0x2c>
			if ((!rx->old_iv && rpl->old_iv) ||
    c1c6:	2b00      	cmp	r3, #0
    c1c8:	dbe9      	blt.n	c19e <bt_mesh_rpl_check+0x26>
			    rpl->seq < rx->seq) {
    c1ca:	4439      	add	r1, r7
    c1cc:	790a      	ldrb	r2, [r1, #4]
    c1ce:	884b      	ldrh	r3, [r1, #2]
    c1d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
			if ((!rx->old_iv && rpl->old_iv) ||
    c1d4:	692a      	ldr	r2, [r5, #16]
    c1d6:	4293      	cmp	r3, r2
    c1d8:	d2f3      	bcs.n	c1c2 <bt_mesh_rpl_check+0x4a>
    c1da:	e7e0      	b.n	c19e <bt_mesh_rpl_check+0x26>
					bt_mesh_rpl_update(rpl, rx);
    c1dc:	4629      	mov	r1, r5
    c1de:	f00f fef2 	bl	1bfc6 <bt_mesh_rpl_update>
    c1e2:	e7de      	b.n	c1a2 <bt_mesh_rpl_check+0x2a>
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    c1e4:	3201      	adds	r2, #1
    c1e6:	2a0a      	cmp	r2, #10
    c1e8:	f100 0008 	add.w	r0, r0, #8
    c1ec:	d1d2      	bne.n	c194 <bt_mesh_rpl_check+0x1c>
    c1ee:	4b06      	ldr	r3, [pc, #24]	; (c208 <bt_mesh_rpl_check+0x90>)
    c1f0:	4906      	ldr	r1, [pc, #24]	; (c20c <bt_mesh_rpl_check+0x94>)
	BT_ERR("RPL is full!");
    c1f2:	4807      	ldr	r0, [pc, #28]	; (c210 <bt_mesh_rpl_check+0x98>)
    c1f4:	1ac9      	subs	r1, r1, r3
    c1f6:	08c9      	lsrs	r1, r1, #3
    c1f8:	0189      	lsls	r1, r1, #6
    c1fa:	f041 0101 	orr.w	r1, r1, #1
    c1fe:	f00d f920 	bl	19442 <log_0>
	return true;
    c202:	e7de      	b.n	c1c2 <bt_mesh_rpl_check+0x4a>
    c204:	20001310 	.word	0x20001310
    c208:	0001ef2c 	.word	0x0001ef2c
    c20c:	0001f0e4 	.word	0x0001f0e4
    c210:	00021d39 	.word	0x00021d39

0000c214 <bt_mesh_rpl_reset>:
{
    c214:	b570      	push	{r4, r5, r6, lr}
    c216:	4d0f      	ldr	r5, [pc, #60]	; (c254 <bt_mesh_rpl_reset+0x40>)
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    c218:	2400      	movs	r4, #0
    c21a:	462e      	mov	r6, r5
		if (rpl->src) {
    c21c:	f836 3034 	ldrh.w	r3, [r6, r4, lsl #3]
    c220:	f3c3 030e 	ubfx	r3, r3, #0, #15
    c224:	b143      	cbz	r3, c238 <bt_mesh_rpl_reset+0x24>
			if (rpl->old_iv) {
    c226:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
    c22a:	f993 2001 	ldrsb.w	r2, [r3, #1]
    c22e:	2a00      	cmp	r2, #0
    c230:	da08      	bge.n	c244 <bt_mesh_rpl_reset+0x30>
					clear_rpl(rpl);
    c232:	4628      	mov	r0, r5
    c234:	f7ff ff3c 	bl	c0b0 <clear_rpl>
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    c238:	3401      	adds	r4, #1
    c23a:	2c0a      	cmp	r4, #10
    c23c:	f105 0508 	add.w	r5, r5, #8
    c240:	d1ec      	bne.n	c21c <bt_mesh_rpl_reset+0x8>
}
    c242:	bd70      	pop	{r4, r5, r6, pc}
				rpl->old_iv = true;
    c244:	785a      	ldrb	r2, [r3, #1]
    c246:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    c24a:	705a      	strb	r2, [r3, #1]
					schedule_rpl_store(rpl, true);
    c24c:	4628      	mov	r0, r5
    c24e:	f7ff ff75 	bl	c13c <schedule_rpl_store.constprop.0>
    c252:	e7f1      	b.n	c238 <bt_mesh_rpl_reset+0x24>
    c254:	20001310 	.word	0x20001310

0000c258 <heartbeat_send.constprop.0>:
static void sub_end(struct k_work *work)
{
	notify_sub_end();
}

static int heartbeat_send(const struct bt_mesh_send_cb *cb, void *cb_data)
    c258:	b530      	push	{r4, r5, lr}
	struct __packed {
		uint8_t init_ttl;
		uint16_t feat;
	} hb;
	struct bt_mesh_msg_ctx ctx = {
		.net_idx = pub.net_idx,
    c25a:	4c26      	ldr	r4, [pc, #152]	; (c2f4 <heartbeat_send.constprop.0+0x9c>)
static int heartbeat_send(const struct bt_mesh_send_cb *cb, void *cb_data)
    c25c:	b08b      	sub	sp, #44	; 0x2c
	struct bt_mesh_msg_ctx ctx = {
    c25e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    c262:	f8ad 2012 	strh.w	r2, [sp, #18]
    c266:	8822      	ldrh	r2, [r4, #0]
    c268:	f8ad 2014 	strh.w	r2, [sp, #20]
    c26c:	2300      	movs	r3, #0
    c26e:	7922      	ldrb	r2, [r4, #4]
    c270:	f88d 201b 	strb.w	r2, [sp, #27]
static int heartbeat_send(const struct bt_mesh_send_cb *cb, void *cb_data)
    c274:	4605      	mov	r5, r0
		.net_idx = pub.net_idx,
    c276:	8920      	ldrh	r0, [r4, #8]
	struct bt_mesh_msg_ctx ctx = {
    c278:	f8cd 3016 	str.w	r3, [sp, #22]
		.app_idx = BT_MESH_KEY_UNUSED,
		.addr = pub.dst,
		.send_ttl = pub.ttl,
	};
	struct bt_mesh_net_tx tx = {
    c27c:	e9cd 3307 	strd	r3, r3, [sp, #28]
	struct bt_mesh_msg_ctx ctx = {
    c280:	f88d 301a 	strb.w	r3, [sp, #26]
	struct bt_mesh_net_tx tx = {
    c284:	9309      	str	r3, [sp, #36]	; 0x24
	struct bt_mesh_msg_ctx ctx = {
    c286:	f8ad 0010 	strh.w	r0, [sp, #16]
		.sub = bt_mesh_subnet_get(pub.net_idx),
    c28a:	f7fe faf1 	bl	a870 <bt_mesh_subnet_get>
	struct bt_mesh_net_tx tx = {
    c28e:	ab04      	add	r3, sp, #16
    c290:	9308      	str	r3, [sp, #32]
    c292:	9007      	str	r0, [sp, #28]
		.ctx = &ctx,
		.src = bt_mesh_primary_addr(),
    c294:	f000 fc34 	bl	cb00 <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
    c298:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
		.xmit = bt_mesh_net_transmit_get(),
    c29c:	f7fd f960 	bl	9560 <bt_mesh_net_transmit_get>
	struct bt_mesh_net_tx tx = {
    c2a0:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
	};

	/* Do nothing if heartbeat publication is not enabled or the subnet is
	 * removed.
	 */
	if (!tx.sub || pub.dst == BT_MESH_ADDR_UNASSIGNED) {
    c2a4:	9807      	ldr	r0, [sp, #28]
    c2a6:	b310      	cbz	r0, c2ee <heartbeat_send.constprop.0+0x96>
    c2a8:	8820      	ldrh	r0, [r4, #0]
    c2aa:	b300      	cbz	r0, c2ee <heartbeat_send.constprop.0+0x96>
		return 0;
	}

	hb.init_ttl = pub.ttl;
    c2ac:	7923      	ldrb	r3, [r4, #4]
    c2ae:	f88d 300c 	strb.w	r3, [sp, #12]

	if (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED) {
    c2b2:	f7fd f9c3 	bl	963c <bt_mesh_relay_get>
	uint16_t feat = 0U;
    c2b6:	1e43      	subs	r3, r0, #1
    c2b8:	425c      	negs	r4, r3
    c2ba:	415c      	adcs	r4, r3
		feat |= BT_MESH_FEAT_RELAY;
	}

	if (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED) {
    c2bc:	f7fd f90c 	bl	94d8 <bt_mesh_gatt_proxy_get>
    c2c0:	2801      	cmp	r0, #1
		feat |= BT_MESH_FEAT_PROXY;
    c2c2:	bf08      	it	eq
    c2c4:	f044 0402 	orreq.w	r4, r4, #2
	}

	if (bt_mesh_friend_get() == BT_MESH_FRIEND_ENABLED) {
    c2c8:	f00f fc5c 	bl	1bb84 <bt_mesh_friend_get>
    c2cc:	2801      	cmp	r0, #1

	hb.feat = sys_cpu_to_be16(feat);

	BT_DBG("InitTTL %u feat 0x%04x", pub.ttl, feat);

	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
    c2ce:	f04f 0300 	mov.w	r3, #0
		feat |= BT_MESH_FEAT_FRIEND;
    c2d2:	bf08      	it	eq
    c2d4:	f044 0404 	orreq.w	r4, r4, #4
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
    c2d8:	e9cd 5300 	strd	r5, r3, [sp]
	hb.feat = sys_cpu_to_be16(feat);
    c2dc:	0224      	lsls	r4, r4, #8
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
    c2de:	2303      	movs	r3, #3
    c2e0:	aa03      	add	r2, sp, #12
    c2e2:	210a      	movs	r1, #10
    c2e4:	a807      	add	r0, sp, #28
	hb.feat = sys_cpu_to_be16(feat);
    c2e6:	f8ad 400d 	strh.w	r4, [sp, #13]
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
    c2ea:	f7ff fa3d 	bl	b768 <bt_mesh_ctl_send>
				cb, cb_data);
}
    c2ee:	b00b      	add	sp, #44	; 0x2c
    c2f0:	bd30      	pop	{r4, r5, pc}
    c2f2:	bf00      	nop
    c2f4:	20001bb8 	.word	0x20001bb8

0000c2f8 <bt_mesh_hb_recv>:
int bt_mesh_hb_recv(struct bt_mesh_net_rx *rx, struct net_buf_simple *buf)
{
	uint8_t init_ttl, hops;
	uint16_t feat;

	if (buf->len < 3) {
    c2f8:	888b      	ldrh	r3, [r1, #4]
    c2fa:	2b02      	cmp	r3, #2
{
    c2fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c300:	4607      	mov	r7, r0
    c302:	460d      	mov	r5, r1
	if (buf->len < 3) {
    c304:	d80d      	bhi.n	c322 <bt_mesh_hb_recv+0x2a>
    c306:	4b2b      	ldr	r3, [pc, #172]	; (c3b4 <bt_mesh_hb_recv+0xbc>)
    c308:	492b      	ldr	r1, [pc, #172]	; (c3b8 <bt_mesh_hb_recv+0xc0>)
		BT_ERR("Too short heartbeat message");
    c30a:	482c      	ldr	r0, [pc, #176]	; (c3bc <bt_mesh_hb_recv+0xc4>)
    c30c:	1ac9      	subs	r1, r1, r3
    c30e:	08c9      	lsrs	r1, r1, #3
    c310:	0189      	lsls	r1, r1, #6
    c312:	f041 0101 	orr.w	r1, r1, #1
    c316:	f00d f894 	bl	19442 <log_0>
		return -EINVAL;
    c31a:	f06f 0015 	mvn.w	r0, #21
	       (hops == 1U) ? "" : "s", feat);

	notify_recv(hops, feat);

	return 0;
}
    c31e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	init_ttl = (net_buf_simple_pull_u8(buf) & 0x7f);
    c322:	4608      	mov	r0, r1
    c324:	f011 fcda 	bl	1dcdc <net_buf_simple_pull_u8>
	if (rx->ctx.addr != sub.src || rx->ctx.recv_dst != sub.dst) {
    c328:	4e25      	ldr	r6, [pc, #148]	; (c3c0 <bt_mesh_hb_recv+0xc8>)
	init_ttl = (net_buf_simple_pull_u8(buf) & 0x7f);
    c32a:	4604      	mov	r4, r0
	feat = net_buf_simple_pull_be16(buf);
    c32c:	4628      	mov	r0, r5
    c32e:	f011 fce5 	bl	1dcfc <net_buf_simple_pull_be16>
	if (rx->ctx.addr != sub.src || rx->ctx.recv_dst != sub.dst) {
    c332:	68ba      	ldr	r2, [r7, #8]
    c334:	68b3      	ldr	r3, [r6, #8]
    c336:	429a      	cmp	r2, r3
	feat = net_buf_simple_pull_be16(buf);
    c338:	4605      	mov	r5, r0
	if (rx->ctx.addr != sub.src || rx->ctx.recv_dst != sub.dst) {
    c33a:	d001      	beq.n	c340 <bt_mesh_hb_recv+0x48>
		return 0;
    c33c:	2000      	movs	r0, #0
    c33e:	e7ee      	b.n	c31e <bt_mesh_hb_recv+0x26>
	return k_work_delayable_busy_get(dwork) != 0;
    c340:	4820      	ldr	r0, [pc, #128]	; (c3c4 <bt_mesh_hb_recv+0xcc>)
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
    c342:	7b7f      	ldrb	r7, [r7, #13]
    c344:	f012 f986 	bl	1e654 <k_work_delayable_busy_get>
	if (!k_work_delayable_is_pending(&sub_timer)) {
    c348:	2800      	cmp	r0, #0
    c34a:	d0f7      	beq.n	c33c <bt_mesh_hb_recv+0x44>
	init_ttl = (net_buf_simple_pull_u8(buf) & 0x7f);
    c34c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
    c350:	1be4      	subs	r4, r4, r7
	sub.min_hops = MIN(sub.min_hops, hops);
    c352:	7bb3      	ldrb	r3, [r6, #14]
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
    c354:	3401      	adds	r4, #1
    c356:	b2e4      	uxtb	r4, r4
	sub.min_hops = MIN(sub.min_hops, hops);
    c358:	42a3      	cmp	r3, r4
    c35a:	bf28      	it	cs
    c35c:	4623      	movcs	r3, r4
    c35e:	73b3      	strb	r3, [r6, #14]
	sub.max_hops = MAX(sub.max_hops, hops);
    c360:	7bf3      	ldrb	r3, [r6, #15]
    c362:	42a3      	cmp	r3, r4
    c364:	bf38      	it	cc
    c366:	4623      	movcc	r3, r4
    c368:	73f3      	strb	r3, [r6, #15]
	if (sub.count < 0xffff) {
    c36a:	89b3      	ldrh	r3, [r6, #12]
    c36c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    c370:	4293      	cmp	r3, r2
		sub.count++;
    c372:	bf1c      	itt	ne
    c374:	3301      	addne	r3, #1
    c376:	81b3      	strhne	r3, [r6, #12]
	if (sub.dst == BT_MESH_ADDR_UNASSIGNED) {
    c378:	8973      	ldrh	r3, [r6, #10]
    c37a:	b15b      	cbz	r3, c394 <bt_mesh_hb_recv+0x9c>
	return z_timeout_remaining(&dwork->timeout);
    c37c:	4812      	ldr	r0, [pc, #72]	; (c3c8 <bt_mesh_hb_recv+0xd0>)
    c37e:	f012 fadf 	bl	1e940 <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
    c382:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c386:	fba0 3002 	umull	r3, r0, r0, r2
    c38a:	0bdb      	lsrs	r3, r3, #15
    c38c:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
	return rem_ms / MSEC_PER_SEC;
    c390:	fbb3 f3f2 	udiv	r3, r3, r2
	sub.remaining = sub_remaining();
    c394:	6073      	str	r3, [r6, #4]
	STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
    c396:	4f0d      	ldr	r7, [pc, #52]	; (c3cc <bt_mesh_hb_recv+0xd4>)
    c398:	4e0d      	ldr	r6, [pc, #52]	; (c3d0 <bt_mesh_hb_recv+0xd8>)
			cb->recv(&sub, hops, feat);
    c39a:	f8df 8024 	ldr.w	r8, [pc, #36]	; c3c0 <bt_mesh_hb_recv+0xc8>
	STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
    c39e:	42be      	cmp	r6, r7
    c3a0:	d2cc      	bcs.n	c33c <bt_mesh_hb_recv+0x44>
		if (cb->recv) {
    c3a2:	6833      	ldr	r3, [r6, #0]
    c3a4:	b11b      	cbz	r3, c3ae <bt_mesh_hb_recv+0xb6>
			cb->recv(&sub, hops, feat);
    c3a6:	462a      	mov	r2, r5
    c3a8:	4621      	mov	r1, r4
    c3aa:	4640      	mov	r0, r8
    c3ac:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
    c3ae:	3608      	adds	r6, #8
    c3b0:	e7f5      	b.n	c39e <bt_mesh_hb_recv+0xa6>
    c3b2:	bf00      	nop
    c3b4:	0001ef2c 	.word	0x0001ef2c
    c3b8:	0001f08c 	.word	0x0001f08c
    c3bc:	00021d5e 	.word	0x00021d5e
    c3c0:	20001bc8 	.word	0x20001bc8
    c3c4:	20001390 	.word	0x20001390
    c3c8:	200013a0 	.word	0x200013a0
    c3cc:	0001edd8 	.word	0x0001edd8
    c3d0:	0001edd8 	.word	0x0001edd8

0000c3d4 <bt_mesh_hb_pub_set>:
	 */
	(void)k_work_cancel_delayable(&pub_timer);
}

uint8_t bt_mesh_hb_pub_set(struct bt_mesh_hb_pub *new_pub)
{
    c3d4:	b538      	push	{r3, r4, r5, lr}
	if (!new_pub || new_pub->dst == BT_MESH_ADDR_UNASSIGNED) {
    c3d6:	4604      	mov	r4, r0
    c3d8:	b108      	cbz	r0, c3de <bt_mesh_hb_pub_set+0xa>
    c3da:	8803      	ldrh	r3, [r0, #0]
    c3dc:	b97b      	cbnz	r3, c3fe <bt_mesh_hb_pub_set+0x2a>
	pub.dst = BT_MESH_ADDR_UNASSIGNED;
    c3de:	4b1a      	ldr	r3, [pc, #104]	; (c448 <bt_mesh_hb_pub_set+0x74>)
	(void)k_work_cancel_delayable(&pub_timer);
    c3e0:	481a      	ldr	r0, [pc, #104]	; (c44c <bt_mesh_hb_pub_set+0x78>)
	pub.dst = BT_MESH_ADDR_UNASSIGNED;
    c3e2:	2400      	movs	r4, #0
    c3e4:	601c      	str	r4, [r3, #0]
	pub.ttl = 0U;
    c3e6:	711c      	strb	r4, [r3, #4]
	pub.period = 0U;
    c3e8:	60dc      	str	r4, [r3, #12]
	(void)k_work_cancel_delayable(&pub_timer);
    c3ea:	f012 f947 	bl	1e67c <k_work_cancel_delayable>
		pub_disable();

		if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
		    bt_mesh_is_provisioned()) {
    c3ee:	f7fc ffbd 	bl	936c <bt_mesh_is_provisioned>
		if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    c3f2:	b1a0      	cbz	r0, c41e <bt_mesh_hb_pub_set+0x4a>
	 * the work item.
	 */
	k_work_reschedule(&pub_timer, K_NO_WAIT);

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		bt_mesh_settings_store_schedule(
    c3f4:	2006      	movs	r0, #6
    c3f6:	f000 fd4f 	bl	ce98 <bt_mesh_settings_store_schedule>
					BT_MESH_SETTINGS_HB_PUB_PENDING);
	}

	return STATUS_SUCCESS;
    c3fa:	2000      	movs	r0, #0
    c3fc:	e00f      	b.n	c41e <bt_mesh_hb_pub_set+0x4a>
	if (!bt_mesh_subnet_get(new_pub->net_idx)) {
    c3fe:	8900      	ldrh	r0, [r0, #8]
    c400:	f7fe fa36 	bl	a870 <bt_mesh_subnet_get>
    c404:	b960      	cbnz	r0, c420 <bt_mesh_hb_pub_set+0x4c>
    c406:	4b12      	ldr	r3, [pc, #72]	; (c450 <bt_mesh_hb_pub_set+0x7c>)
    c408:	4a12      	ldr	r2, [pc, #72]	; (c454 <bt_mesh_hb_pub_set+0x80>)
		BT_ERR("Unknown NetKey 0x%04x", new_pub->net_idx);
    c40a:	4813      	ldr	r0, [pc, #76]	; (c458 <bt_mesh_hb_pub_set+0x84>)
    c40c:	8921      	ldrh	r1, [r4, #8]
    c40e:	1ad2      	subs	r2, r2, r3
    c410:	08d2      	lsrs	r2, r2, #3
    c412:	0192      	lsls	r2, r2, #6
    c414:	f042 0201 	orr.w	r2, r2, #1
    c418:	f00d f820 	bl	1945c <log_1>
		return STATUS_INVALID_NETKEY;
    c41c:	2004      	movs	r0, #4
}
    c41e:	bd38      	pop	{r3, r4, r5, pc}
	new_pub->feat &= BT_MESH_FEAT_SUPPORTED;
    c420:	88e3      	ldrh	r3, [r4, #6]
	pub = *new_pub;
    c422:	4d09      	ldr	r5, [pc, #36]	; (c448 <bt_mesh_hb_pub_set+0x74>)
	new_pub->feat &= BT_MESH_FEAT_SUPPORTED;
    c424:	f003 030f 	and.w	r3, r3, #15
    c428:	80e3      	strh	r3, [r4, #6]
	pub = *new_pub;
    c42a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    c42e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	if (!bt_mesh_is_provisioned()) {
    c432:	f7fc ff9b 	bl	936c <bt_mesh_is_provisioned>
    c436:	2800      	cmp	r0, #0
    c438:	d0f1      	beq.n	c41e <bt_mesh_hb_pub_set+0x4a>
	k_work_reschedule(&pub_timer, K_NO_WAIT);
    c43a:	2200      	movs	r2, #0
    c43c:	2300      	movs	r3, #0
    c43e:	4803      	ldr	r0, [pc, #12]	; (c44c <bt_mesh_hb_pub_set+0x78>)
    c440:	f00b fd12 	bl	17e68 <k_work_reschedule>
    c444:	e7d6      	b.n	c3f4 <bt_mesh_hb_pub_set+0x20>
    c446:	bf00      	nop
    c448:	20001bb8 	.word	0x20001bb8
    c44c:	20001360 	.word	0x20001360
    c450:	0001ef2c 	.word	0x0001ef2c
    c454:	0001f08c 	.word	0x0001f08c
    c458:	00021d7a 	.word	0x00021d7a

0000c45c <hb_pub_set>:
	}
}

static int hb_pub_set(const char *name, size_t len_rd,
		      settings_read_cb read_cb, void *cb_arg)
{
    c45c:	b510      	push	{r4, lr}
    c45e:	b086      	sub	sp, #24
    c460:	4610      	mov	r0, r2
    c462:	4619      	mov	r1, r3
	struct bt_mesh_hb_pub pub;
	struct hb_pub_val hb_val;
	int err;

	err = bt_mesh_settings_set(read_cb, cb_arg, &hb_val, sizeof(hb_val));
    c464:	466a      	mov	r2, sp
    c466:	2308      	movs	r3, #8
    c468:	f000 fce4 	bl	ce34 <bt_mesh_settings_set>
	if (err) {
    c46c:	4604      	mov	r4, r0
    c46e:	b160      	cbz	r0, c48a <hb_pub_set+0x2e>
    c470:	491c      	ldr	r1, [pc, #112]	; (c4e4 <hb_pub_set+0x88>)
    c472:	4b1d      	ldr	r3, [pc, #116]	; (c4e8 <hb_pub_set+0x8c>)
		BT_ERR("Failed to set \'hb_val\'");
    c474:	481d      	ldr	r0, [pc, #116]	; (c4ec <hb_pub_set+0x90>)
    c476:	1ac9      	subs	r1, r1, r3
    c478:	08c9      	lsrs	r1, r1, #3
    c47a:	0189      	lsls	r1, r1, #6
    c47c:	f041 0101 	orr.w	r1, r1, #1
    c480:	f00c ffdf 	bl	19442 <log_0>
	(void)bt_mesh_hb_pub_set(&pub);

	BT_DBG("Restored heartbeat publication");

	return 0;
}
    c484:	4620      	mov	r0, r4
    c486:	b006      	add	sp, #24
    c488:	bd10      	pop	{r4, pc}
	pub.period = bt_mesh_hb_pwr2(hb_val.period);
    c48a:	f89d 2002 	ldrb.w	r2, [sp, #2]
	pub.dst = hb_val.dst;
    c48e:	f8bd 3000 	ldrh.w	r3, [sp]
    c492:	f8ad 3008 	strh.w	r3, [sp, #8]
 * SPDX-License-Identifier: Apache-2.0
 */

static inline uint16_t bt_mesh_hb_pwr2(uint8_t val)
{
	if (!val) {
    c496:	b302      	cbz	r2, c4da <hb_pub_set+0x7e>
		return 0x0000;
	} else if (val == 0xff || val == 0x11) {
    c498:	2aff      	cmp	r2, #255	; 0xff
    c49a:	d020      	beq.n	c4de <hb_pub_set+0x82>
    c49c:	2a11      	cmp	r2, #17
    c49e:	d01e      	beq.n	c4de <hb_pub_set+0x82>
		return 0xffff;
	} else {
		return (1 << (val - 1));
    c4a0:	3a01      	subs	r2, #1
    c4a2:	2301      	movs	r3, #1
    c4a4:	4093      	lsls	r3, r2
    c4a6:	b29b      	uxth	r3, r3
	pub.period = bt_mesh_hb_pwr2(hb_val.period);
    c4a8:	9305      	str	r3, [sp, #20]
	pub.ttl = hb_val.ttl;
    c4aa:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c4ae:	f88d 300c 	strb.w	r3, [sp, #12]
	pub.feat = hb_val.feat;
    c4b2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    c4b6:	f8ad 300e 	strh.w	r3, [sp, #14]
	pub.net_idx = hb_val.net_idx;
    c4ba:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    c4be:	f3c3 030b 	ubfx	r3, r3, #0, #12
    c4c2:	f8ad 3010 	strh.w	r3, [sp, #16]
	if (hb_val.indefinite) {
    c4c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
	(void)bt_mesh_hb_pub_set(&pub);
    c4ca:	a802      	add	r0, sp, #8
	if (hb_val.indefinite) {
    c4cc:	f343 1300 	sbfx	r3, r3, #4, #1
    c4d0:	f8ad 300a 	strh.w	r3, [sp, #10]
	(void)bt_mesh_hb_pub_set(&pub);
    c4d4:	f7ff ff7e 	bl	c3d4 <bt_mesh_hb_pub_set>
	return 0;
    c4d8:	e7d4      	b.n	c484 <hb_pub_set+0x28>
		return 0x0000;
    c4da:	4603      	mov	r3, r0
    c4dc:	e7e4      	b.n	c4a8 <hb_pub_set+0x4c>
		return 0xffff;
    c4de:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c4e2:	e7e1      	b.n	c4a8 <hb_pub_set+0x4c>
    c4e4:	0001f08c 	.word	0x0001f08c
    c4e8:	0001ef2c 	.word	0x0001ef2c
    c4ec:	00021d90 	.word	0x00021d90

0000c4f0 <bt_mesh_hb_feature_changed>:
	if (pub.dst == BT_MESH_ADDR_UNASSIGNED) {
    c4f0:	4b04      	ldr	r3, [pc, #16]	; (c504 <bt_mesh_hb_feature_changed+0x14>)
    c4f2:	881a      	ldrh	r2, [r3, #0]
    c4f4:	b12a      	cbz	r2, c502 <bt_mesh_hb_feature_changed+0x12>
	if (!(pub.feat & features)) {
    c4f6:	88db      	ldrh	r3, [r3, #6]
    c4f8:	4218      	tst	r0, r3
    c4fa:	d002      	beq.n	c502 <bt_mesh_hb_feature_changed+0x12>
	heartbeat_send(NULL, NULL);
    c4fc:	2000      	movs	r0, #0
    c4fe:	f7ff beab 	b.w	c258 <heartbeat_send.constprop.0>
}
    c502:	4770      	bx	lr
    c504:	20001bb8 	.word	0x20001bb8

0000c508 <bt_mesh_hb_start>:
	if (pub.count && pub.period) {
    c508:	4b05      	ldr	r3, [pc, #20]	; (c520 <bt_mesh_hb_start+0x18>)
    c50a:	885a      	ldrh	r2, [r3, #2]
    c50c:	b132      	cbz	r2, c51c <bt_mesh_hb_start+0x14>
    c50e:	68db      	ldr	r3, [r3, #12]
    c510:	b123      	cbz	r3, c51c <bt_mesh_hb_start+0x14>
		k_work_reschedule(&pub_timer, K_NO_WAIT);
    c512:	4804      	ldr	r0, [pc, #16]	; (c524 <bt_mesh_hb_start+0x1c>)
    c514:	2200      	movs	r2, #0
    c516:	2300      	movs	r3, #0
    c518:	f00b bca6 	b.w	17e68 <k_work_reschedule>
}
    c51c:	4770      	bx	lr
    c51e:	bf00      	nop
    c520:	20001bb8 	.word	0x20001bb8
    c524:	20001360 	.word	0x20001360

0000c528 <bt_mesh_k2>:
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
}

int bt_mesh_k2(const uint8_t n[16], const uint8_t *p, size_t p_len,
	       uint8_t net_id[1], uint8_t enc_key[16], uint8_t priv_key[16])
{
    c528:	b5f0      	push	{r4, r5, r6, r7, lr}
    c52a:	b095      	sub	sp, #84	; 0x54
    c52c:	4604      	mov	r4, r0
    c52e:	460f      	mov	r7, r1
	int err;

	BT_DBG("n %s", bt_hex(n, 16));
	BT_DBG("p %s", bt_hex(p, p_len));

	err = bt_mesh_s1("smk2", salt);
    c530:	4828      	ldr	r0, [pc, #160]	; (c5d4 <bt_mesh_k2+0xac>)
    c532:	a902      	add	r1, sp, #8
{
    c534:	4615      	mov	r5, r2
    c536:	461e      	mov	r6, r3
	err = bt_mesh_s1("smk2", salt);
    c538:	f00f fdb8 	bl	1c0ac <bt_mesh_s1>
	if (err) {
    c53c:	2800      	cmp	r0, #0
    c53e:	d146      	bne.n	c5ce <bt_mesh_k2+0xa6>
		return err;
	}

	err = bt_mesh_aes_cmac_one(salt, n, 16, t);
    c540:	4621      	mov	r1, r4
    c542:	ab0a      	add	r3, sp, #40	; 0x28
    c544:	2210      	movs	r2, #16
    c546:	a802      	add	r0, sp, #8
    c548:	f00f fda6 	bl	1c098 <bt_mesh_aes_cmac_one>
	if (err) {
    c54c:	4604      	mov	r4, r0
    c54e:	2800      	cmp	r0, #0
    c550:	d13a      	bne.n	c5c8 <bt_mesh_k2+0xa0>
		return err;
	}

	pad = 0x01;
    c552:	2301      	movs	r3, #1

	sg[0].data = NULL;
	sg[0].len  = 0;
	sg[1].data = p;
	sg[1].len  = p_len;
    c554:	e9cd 7510 	strd	r7, r5, [sp, #64]	; 0x40
	sg[2].data = &pad;
    c558:	f10d 0207 	add.w	r2, sp, #7
	sg[2].len  = sizeof(pad);

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    c55c:	ad06      	add	r5, sp, #24
	sg[2].len  = sizeof(pad);
    c55e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	sg[0].len  = 0;
    c562:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
	pad = 0x01;
    c566:	f88d 3007 	strb.w	r3, [sp, #7]
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    c56a:	2203      	movs	r2, #3
    c56c:	462b      	mov	r3, r5
    c56e:	a90e      	add	r1, sp, #56	; 0x38
    c570:	a80a      	add	r0, sp, #40	; 0x28
    c572:	f00f fd6f 	bl	1c054 <bt_mesh_aes_cmac>
	if (err) {
    c576:	4604      	mov	r4, r0
    c578:	bb30      	cbnz	r0, c5c8 <bt_mesh_k2+0xa0>
		return err;
	}

	net_id[0] = out[15] & 0x7f;
    c57a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27

	sg[0].data = out;
    c57e:	950e      	str	r5, [sp, #56]	; 0x38
	net_id[0] = out[15] & 0x7f;
    c580:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    c584:	7033      	strb	r3, [r6, #0]
	sg[0].len  = sizeof(out);
	pad = 0x02;
    c586:	2302      	movs	r3, #2
    c588:	f88d 3007 	strb.w	r3, [sp, #7]
	sg[0].len  = sizeof(out);
    c58c:	2610      	movs	r6, #16

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    c58e:	462b      	mov	r3, r5
    c590:	2203      	movs	r2, #3
    c592:	a90e      	add	r1, sp, #56	; 0x38
    c594:	a80a      	add	r0, sp, #40	; 0x28
	sg[0].len  = sizeof(out);
    c596:	960f      	str	r6, [sp, #60]	; 0x3c
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    c598:	f00f fd5c 	bl	1c054 <bt_mesh_aes_cmac>
	if (err) {
    c59c:	4604      	mov	r4, r0
    c59e:	b998      	cbnz	r0, c5c8 <bt_mesh_k2+0xa0>
		return err;
	}

	memcpy(enc_key, out, 16);
    c5a0:	4632      	mov	r2, r6
    c5a2:	4629      	mov	r1, r5
    c5a4:	981a      	ldr	r0, [sp, #104]	; 0x68
    c5a6:	f00d fe6a 	bl	1a27e <memcpy>

	pad = 0x03;
    c5aa:	2203      	movs	r2, #3

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    c5ac:	462b      	mov	r3, r5
    c5ae:	a90e      	add	r1, sp, #56	; 0x38
    c5b0:	a80a      	add	r0, sp, #40	; 0x28
	pad = 0x03;
    c5b2:	f88d 2007 	strb.w	r2, [sp, #7]
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    c5b6:	f00f fd4d 	bl	1c054 <bt_mesh_aes_cmac>
	if (err) {
    c5ba:	4604      	mov	r4, r0
    c5bc:	b920      	cbnz	r0, c5c8 <bt_mesh_k2+0xa0>
		return err;
	}

	memcpy(priv_key, out, 16);
    c5be:	981b      	ldr	r0, [sp, #108]	; 0x6c
    c5c0:	4632      	mov	r2, r6
    c5c2:	4629      	mov	r1, r5
    c5c4:	f00d fe5b 	bl	1a27e <memcpy>

	BT_DBG("NID 0x%02x enc_key %s", net_id[0], bt_hex(enc_key, 16));
	BT_DBG("priv_key %s", bt_hex(priv_key, 16));

	return 0;
}
    c5c8:	4620      	mov	r0, r4
    c5ca:	b015      	add	sp, #84	; 0x54
    c5cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return err;
    c5ce:	2401      	movs	r4, #1
    c5d0:	e7fa      	b.n	c5c8 <bt_mesh_k2+0xa0>
    c5d2:	bf00      	nop
    c5d4:	00021de6 	.word	0x00021de6

0000c5d8 <bt_mesh_k3>:

int bt_mesh_k3(const uint8_t n[16], uint8_t out[8])
{
    c5d8:	b530      	push	{r4, r5, lr}
	uint8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
    c5da:	4b14      	ldr	r3, [pc, #80]	; (c62c <bt_mesh_k3+0x54>)
{
    c5dc:	b08b      	sub	sp, #44	; 0x2c
    c5de:	4604      	mov	r4, r0
	uint8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
    c5e0:	6818      	ldr	r0, [r3, #0]
    c5e2:	9000      	str	r0, [sp, #0]
    c5e4:	791b      	ldrb	r3, [r3, #4]
	uint8_t tmp[16];
	uint8_t t[16];
	int err;

	err = bt_mesh_s1("smk3", tmp);
    c5e6:	4812      	ldr	r0, [pc, #72]	; (c630 <bt_mesh_k3+0x58>)
	uint8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
    c5e8:	f88d 3004 	strb.w	r3, [sp, #4]
{
    c5ec:	460d      	mov	r5, r1
	err = bt_mesh_s1("smk3", tmp);
    c5ee:	a902      	add	r1, sp, #8
    c5f0:	f00f fd5c 	bl	1c0ac <bt_mesh_s1>
	if (err) {
    c5f4:	b9b8      	cbnz	r0, c626 <bt_mesh_k3+0x4e>
		return err;
	}

	err = bt_mesh_aes_cmac_one(tmp, n, 16, t);
    c5f6:	4621      	mov	r1, r4
    c5f8:	ab06      	add	r3, sp, #24
    c5fa:	2210      	movs	r2, #16
    c5fc:	a802      	add	r0, sp, #8
    c5fe:	f00f fd4b 	bl	1c098 <bt_mesh_aes_cmac_one>
	if (err) {
    c602:	4604      	mov	r4, r0
    c604:	b960      	cbnz	r0, c620 <bt_mesh_k3+0x48>
		return err;
	}

	err = bt_mesh_aes_cmac_one(t, id64, sizeof(id64), tmp);
    c606:	ab02      	add	r3, sp, #8
    c608:	2205      	movs	r2, #5
    c60a:	4669      	mov	r1, sp
    c60c:	a806      	add	r0, sp, #24
    c60e:	f00f fd43 	bl	1c098 <bt_mesh_aes_cmac_one>
	if (err) {
    c612:	4604      	mov	r4, r0
    c614:	b920      	cbnz	r0, c620 <bt_mesh_k3+0x48>
		return err;
	}

	memcpy(out, tmp + 8, 8);
    c616:	2208      	movs	r2, #8
    c618:	a904      	add	r1, sp, #16
    c61a:	4628      	mov	r0, r5
    c61c:	f00d fe2f 	bl	1a27e <memcpy>

	return 0;
}
    c620:	4620      	mov	r0, r4
    c622:	b00b      	add	sp, #44	; 0x2c
    c624:	bd30      	pop	{r4, r5, pc}
		return err;
    c626:	2401      	movs	r4, #1
    c628:	e7fa      	b.n	c620 <bt_mesh_k3+0x48>
    c62a:	bf00      	nop
    c62c:	00021df0 	.word	0x00021df0
    c630:	00021deb 	.word	0x00021deb

0000c634 <bt_mesh_k4>:

int bt_mesh_k4(const uint8_t n[16], uint8_t out[1])
{
    c634:	b530      	push	{r4, r5, lr}
    c636:	b08b      	sub	sp, #44	; 0x2c
	uint8_t id6[] = { 'i', 'd', '6', 0x01 };
    c638:	4b10      	ldr	r3, [pc, #64]	; (c67c <bt_mesh_k4+0x48>)
    c63a:	9301      	str	r3, [sp, #4]
{
    c63c:	4605      	mov	r5, r0
    c63e:	460c      	mov	r4, r1
	uint8_t tmp[16];
	uint8_t t[16];
	int err;

	err = bt_mesh_s1("smk4", tmp);
    c640:	480f      	ldr	r0, [pc, #60]	; (c680 <bt_mesh_k4+0x4c>)
    c642:	a902      	add	r1, sp, #8
    c644:	f00f fd32 	bl	1c0ac <bt_mesh_s1>
	if (err) {
    c648:	b9a8      	cbnz	r0, c676 <bt_mesh_k4+0x42>
		return err;
	}

	err = bt_mesh_aes_cmac_one(tmp, n, 16, t);
    c64a:	ab06      	add	r3, sp, #24
    c64c:	2210      	movs	r2, #16
    c64e:	4629      	mov	r1, r5
    c650:	a802      	add	r0, sp, #8
    c652:	f00f fd21 	bl	1c098 <bt_mesh_aes_cmac_one>
	if (err) {
    c656:	b960      	cbnz	r0, c672 <bt_mesh_k4+0x3e>
		return err;
	}

	err = bt_mesh_aes_cmac_one(t, id6, sizeof(id6), tmp);
    c658:	2204      	movs	r2, #4
    c65a:	ab02      	add	r3, sp, #8
    c65c:	eb0d 0102 	add.w	r1, sp, r2
    c660:	a806      	add	r0, sp, #24
    c662:	f00f fd19 	bl	1c098 <bt_mesh_aes_cmac_one>
	if (err) {
    c666:	b920      	cbnz	r0, c672 <bt_mesh_k4+0x3e>
		return err;
	}

	out[0] = tmp[15] & BIT_MASK(6);
    c668:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c66c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c670:	7023      	strb	r3, [r4, #0]

	return 0;
}
    c672:	b00b      	add	sp, #44	; 0x2c
    c674:	bd30      	pop	{r4, r5, pc}
		return err;
    c676:	2001      	movs	r0, #1
    c678:	e7fb      	b.n	c672 <bt_mesh_k4+0x3e>
    c67a:	bf00      	nop
    c67c:	01366469 	.word	0x01366469
    c680:	00021df6 	.word	0x00021df6

0000c684 <bt_mesh_id128>:

int bt_mesh_id128(const uint8_t n[16], const char *s, uint8_t out[16])
{
    c684:	b530      	push	{r4, r5, lr}
    c686:	b087      	sub	sp, #28
    c688:	4604      	mov	r4, r0
    c68a:	4608      	mov	r0, r1
	const char *id128 = "id128\x01";
	uint8_t salt[16];
	int err;

	err = bt_mesh_s1(s, salt);
    c68c:	a902      	add	r1, sp, #8
{
    c68e:	4615      	mov	r5, r2
	err = bt_mesh_s1(s, salt);
    c690:	f00f fd0c 	bl	1c0ac <bt_mesh_s1>
	if (err) {
    c694:	b940      	cbnz	r0, c6a8 <bt_mesh_id128+0x24>
		return err;
	}

	return bt_mesh_k1(n, 16, salt, id128, out);
    c696:	4b05      	ldr	r3, [pc, #20]	; (c6ac <bt_mesh_id128+0x28>)
    c698:	9500      	str	r5, [sp, #0]
    c69a:	aa02      	add	r2, sp, #8
    c69c:	2110      	movs	r1, #16
    c69e:	4620      	mov	r0, r4
    c6a0:	f00f fd1a 	bl	1c0d8 <bt_mesh_k1>
}
    c6a4:	b007      	add	sp, #28
    c6a6:	bd30      	pop	{r4, r5, pc}
		return err;
    c6a8:	2001      	movs	r0, #1
    c6aa:	e7fb      	b.n	c6a4 <bt_mesh_id128+0x20>
    c6ac:	00021dfb 	.word	0x00021dfb

0000c6b0 <bt_mesh_net_obfuscate>:
	sys_put_be32(iv_index, &nonce[9]);
}

int bt_mesh_net_obfuscate(uint8_t *pdu, uint32_t iv_index,
			  const uint8_t privacy_key[16])
{
    c6b0:	b570      	push	{r4, r5, r6, lr}
	uint8_t priv_rand[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, };
    c6b2:	4b18      	ldr	r3, [pc, #96]	; (c714 <bt_mesh_net_obfuscate+0x64>)
{
    c6b4:	b088      	sub	sp, #32
    c6b6:	4604      	mov	r4, r0
    c6b8:	460e      	mov	r6, r1
	uint8_t priv_rand[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, };
    c6ba:	6818      	ldr	r0, [r3, #0]
    c6bc:	889b      	ldrh	r3, [r3, #4]
    c6be:	9000      	str	r0, [sp, #0]
    c6c0:	f8ad 3004 	strh.w	r3, [sp, #4]
	uint8_t tmp[16];
	int err, i;

	BT_DBG("IVIndex %u, PrivacyKey %s", iv_index, bt_hex(privacy_key, 16));

	sys_put_be32(iv_index, &priv_rand[5]);
    c6c4:	f10d 0105 	add.w	r1, sp, #5
	uint8_t priv_rand[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, };
    c6c8:	2300      	movs	r3, #0
	sys_put_be32(iv_index, &priv_rand[5]);
    c6ca:	4630      	mov	r0, r6
{
    c6cc:	4615      	mov	r5, r2
	uint8_t priv_rand[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, };
    c6ce:	f8cd 3006 	str.w	r3, [sp, #6]
    c6d2:	f8cd 300a 	str.w	r3, [sp, #10]
    c6d6:	f8ad 300e 	strh.w	r3, [sp, #14]
	sys_put_be32(iv_index, &priv_rand[5]);
    c6da:	f00f fc92 	bl	1c002 <sys_put_be32>
	memcpy(&priv_rand[9], &pdu[7], 7);
    c6de:	2207      	movs	r2, #7
    c6e0:	18a1      	adds	r1, r4, r2
    c6e2:	f10d 0009 	add.w	r0, sp, #9
    c6e6:	f00d fdca 	bl	1a27e <memcpy>

	BT_DBG("PrivacyRandom %s", bt_hex(priv_rand, 16));

	err = bt_encrypt_be(privacy_key, priv_rand, tmp);
    c6ea:	aa04      	add	r2, sp, #16
    c6ec:	4669      	mov	r1, sp
    c6ee:	4628      	mov	r0, r5
    c6f0:	f010 fbb7 	bl	1ce62 <bt_encrypt_be>
	if (err) {
    c6f4:	b958      	cbnz	r0, c70e <bt_mesh_net_obfuscate+0x5e>
    c6f6:	4623      	mov	r3, r4
    c6f8:	aa04      	add	r2, sp, #16
    c6fa:	3406      	adds	r4, #6
		return err;
	}

	for (i = 0; i < 6; i++) {
		pdu[1 + i] ^= tmp[i];
    c6fc:	f813 5f01 	ldrb.w	r5, [r3, #1]!
    c700:	f812 1b01 	ldrb.w	r1, [r2], #1
	for (i = 0; i < 6; i++) {
    c704:	42a3      	cmp	r3, r4
		pdu[1 + i] ^= tmp[i];
    c706:	ea81 0105 	eor.w	r1, r1, r5
    c70a:	7019      	strb	r1, [r3, #0]
	for (i = 0; i < 6; i++) {
    c70c:	d1f6      	bne.n	c6fc <bt_mesh_net_obfuscate+0x4c>
	}

	return 0;
}
    c70e:	b008      	add	sp, #32
    c710:	bd70      	pop	{r4, r5, r6, pc}
    c712:	bf00      	nop
    c714:	0001f227 	.word	0x0001f227

0000c718 <bt_mesh_fcs_calc>:
	0xb4, 0x25, 0x57, 0xc6, 0xb3, 0x22, 0x50, 0xc1,
	0xba, 0x2b, 0x59, 0xc8, 0xbd, 0x2c, 0x5e, 0xcf
};

uint8_t bt_mesh_fcs_calc(const uint8_t *data, uint8_t data_len)
{
    c718:	b510      	push	{r4, lr}
	uint8_t fcs = 0xff;

	while (data_len--) {
		fcs = crc_table[fcs ^ *data++];
    c71a:	4a06      	ldr	r2, [pc, #24]	; (c734 <bt_mesh_fcs_calc+0x1c>)
    c71c:	4401      	add	r1, r0
	uint8_t fcs = 0xff;
    c71e:	23ff      	movs	r3, #255	; 0xff
	while (data_len--) {
    c720:	4288      	cmp	r0, r1
    c722:	d102      	bne.n	c72a <bt_mesh_fcs_calc+0x12>
	}

	BT_DBG("fcs 0x%02x", 0xff - fcs);

	return 0xff - fcs;
    c724:	43d8      	mvns	r0, r3
}
    c726:	b2c0      	uxtb	r0, r0
    c728:	bd10      	pop	{r4, pc}
		fcs = crc_table[fcs ^ *data++];
    c72a:	f810 4b01 	ldrb.w	r4, [r0], #1
    c72e:	4063      	eors	r3, r4
    c730:	5cd3      	ldrb	r3, [r2, r3]
    c732:	e7f5      	b.n	c720 <bt_mesh_fcs_calc+0x8>
    c734:	00021e11 	.word	0x00021e11

0000c738 <bt_mesh_fcs_check>:

bool bt_mesh_fcs_check(struct net_buf_simple *buf, uint8_t received_fcs)
{
    c738:	b530      	push	{r4, r5, lr}
	const uint8_t *data = buf->data;
    c73a:	6804      	ldr	r4, [r0, #0]
	uint16_t data_len = buf->len;
	uint8_t fcs = 0xff;

	while (data_len--) {
    c73c:	8880      	ldrh	r0, [r0, #4]
    c73e:	4d08      	ldr	r5, [pc, #32]	; (c760 <bt_mesh_fcs_check+0x28>)
    c740:	4420      	add	r0, r4
	uint8_t fcs = 0xff;
    c742:	23ff      	movs	r3, #255	; 0xff
	while (data_len--) {
    c744:	4284      	cmp	r4, r0
    c746:	d106      	bne.n	c756 <bt_mesh_fcs_check+0x1e>
		fcs = crc_table[fcs ^ *data++];
	}

	return crc_table[fcs ^ received_fcs] == 0xcf;
    c748:	404b      	eors	r3, r1
    c74a:	5ce8      	ldrb	r0, [r5, r3]
}
    c74c:	f1a0 03cf 	sub.w	r3, r0, #207	; 0xcf
    c750:	4258      	negs	r0, r3
    c752:	4158      	adcs	r0, r3
    c754:	bd30      	pop	{r4, r5, pc}
		fcs = crc_table[fcs ^ *data++];
    c756:	f814 2b01 	ldrb.w	r2, [r4], #1
    c75a:	405a      	eors	r2, r3
    c75c:	5cab      	ldrb	r3, [r5, r2]
    c75e:	e7f1      	b.n	c744 <bt_mesh_fcs_check+0xc>
    c760:	00021e11 	.word	0x00021e11

0000c764 <bt_mesh_model_foreach>:
void bt_mesh_model_foreach(void (*func)(struct bt_mesh_model *mod,
					struct bt_mesh_elem *elem,
					bool vnd, bool primary,
					void *user_data),
			   void *user_data)
{
    c764:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	int i, j;

	for (i = 0; i < dev_comp->elem_count; i++) {
    c768:	f8df 9068 	ldr.w	r9, [pc, #104]	; c7d4 <bt_mesh_model_foreach+0x70>
{
    c76c:	4606      	mov	r6, r0
    c76e:	460f      	mov	r7, r1
	for (i = 0; i < dev_comp->elem_count; i++) {
    c770:	2500      	movs	r5, #0
    c772:	f8d9 3000 	ldr.w	r3, [r9]
    c776:	689a      	ldr	r2, [r3, #8]
    c778:	42aa      	cmp	r2, r5
    c77a:	d802      	bhi.n	c782 <bt_mesh_model_foreach+0x1e>
			struct bt_mesh_model *model = &elem->vnd_models[j];

			func(model, elem, true, i == 0, user_data);
		}
	}
}
    c77c:	b003      	add	sp, #12
    c77e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
    c782:	68dc      	ldr	r4, [r3, #12]
		for (j = 0; j < elem->model_count; j++) {
    c784:	f04f 0800 	mov.w	r8, #0
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
    c788:	eb04 1405 	add.w	r4, r4, r5, lsl #4
		for (j = 0; j < elem->model_count; j++) {
    c78c:	7923      	ldrb	r3, [r4, #4]
    c78e:	4543      	cmp	r3, r8
    c790:	dc06      	bgt.n	c7a0 <bt_mesh_model_foreach+0x3c>
		for (j = 0; j < elem->vnd_model_count; j++) {
    c792:	f04f 0800 	mov.w	r8, #0
    c796:	7963      	ldrb	r3, [r4, #5]
    c798:	4543      	cmp	r3, r8
    c79a:	dc0e      	bgt.n	c7ba <bt_mesh_model_foreach+0x56>
	for (i = 0; i < dev_comp->elem_count; i++) {
    c79c:	3501      	adds	r5, #1
    c79e:	e7e8      	b.n	c772 <bt_mesh_model_foreach+0xe>
			struct bt_mesh_model *model = &elem->models[j];
    c7a0:	68a0      	ldr	r0, [r4, #8]
			func(model, elem, false, i == 0, user_data);
    c7a2:	9700      	str	r7, [sp, #0]
    c7a4:	fab5 f385 	clz	r3, r5
    c7a8:	eb00 1048 	add.w	r0, r0, r8, lsl #5
    c7ac:	095b      	lsrs	r3, r3, #5
    c7ae:	2200      	movs	r2, #0
    c7b0:	4621      	mov	r1, r4
    c7b2:	47b0      	blx	r6
		for (j = 0; j < elem->model_count; j++) {
    c7b4:	f108 0801 	add.w	r8, r8, #1
    c7b8:	e7e8      	b.n	c78c <bt_mesh_model_foreach+0x28>
			struct bt_mesh_model *model = &elem->vnd_models[j];
    c7ba:	68e0      	ldr	r0, [r4, #12]
			func(model, elem, true, i == 0, user_data);
    c7bc:	9700      	str	r7, [sp, #0]
    c7be:	fab5 f385 	clz	r3, r5
    c7c2:	eb00 1048 	add.w	r0, r0, r8, lsl #5
    c7c6:	095b      	lsrs	r3, r3, #5
    c7c8:	2201      	movs	r2, #1
    c7ca:	4621      	mov	r1, r4
    c7cc:	47b0      	blx	r6
		for (j = 0; j < elem->vnd_model_count; j++) {
    c7ce:	f108 0801 	add.w	r8, r8, #1
    c7d2:	e7e0      	b.n	c796 <bt_mesh_model_foreach+0x32>
    c7d4:	20001bd8 	.word	0x20001bd8

0000c7d8 <bt_mesh_model_pub_period_get>:

int32_t bt_mesh_model_pub_period_get(struct bt_mesh_model *mod)
{
	int32_t period;

	if (!mod->pub) {
    c7d8:	6883      	ldr	r3, [r0, #8]
    c7da:	b1eb      	cbz	r3, c818 <bt_mesh_model_pub_period_get+0x40>
		return 0;
	}

	switch (mod->pub->period >> 6) {
    c7dc:	7a98      	ldrb	r0, [r3, #10]
    c7de:	0982      	lsrs	r2, r0, #6
    c7e0:	2a02      	cmp	r2, #2
    c7e2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c7e6:	d012      	beq.n	c80e <bt_mesh_model_pub_period_get+0x36>
    c7e8:	2a03      	cmp	r2, #3
    c7ea:	d013      	beq.n	c814 <bt_mesh_model_pub_period_get+0x3c>
    c7ec:	2a01      	cmp	r2, #1
    c7ee:	d00a      	beq.n	c806 <bt_mesh_model_pub_period_get+0x2e>
	case 0x00:
		/* 1 step is 100 ms */
		period = (mod->pub->period & BIT_MASK(6)) * 100U;
    c7f0:	2264      	movs	r2, #100	; 0x64
    c7f2:	fb10 f002 	smulbb	r0, r0, r2
		break;
	default:
		CODE_UNREACHABLE;
	}

	if (mod->pub->fast_period) {
    c7f6:	79da      	ldrb	r2, [r3, #7]
    c7f8:	0652      	lsls	r2, r2, #25
    c7fa:	d50e      	bpl.n	c81a <bt_mesh_model_pub_period_get+0x42>
		return period >> mod->pub->period_div;
    c7fc:	7adb      	ldrb	r3, [r3, #11]
    c7fe:	f003 030f 	and.w	r3, r3, #15
    c802:	4118      	asrs	r0, r3
    c804:	4770      	bx	lr
		period = (mod->pub->period & BIT_MASK(6)) * MSEC_PER_SEC;
    c806:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		period = (mod->pub->period & BIT_MASK(6)) * 600U * MSEC_PER_SEC;
    c80a:	4350      	muls	r0, r2
		break;
    c80c:	e7f3      	b.n	c7f6 <bt_mesh_model_pub_period_get+0x1e>
		period = (mod->pub->period & BIT_MASK(6)) * 10U * MSEC_PER_SEC;
    c80e:	f242 7210 	movw	r2, #10000	; 0x2710
    c812:	e7fa      	b.n	c80a <bt_mesh_model_pub_period_get+0x32>
		period = (mod->pub->period & BIT_MASK(6)) * 600U * MSEC_PER_SEC;
    c814:	4a01      	ldr	r2, [pc, #4]	; (c81c <bt_mesh_model_pub_period_get+0x44>)
    c816:	e7f8      	b.n	c80a <bt_mesh_model_pub_period_get+0x32>
		return 0;
    c818:	4618      	mov	r0, r3
	} else {
		return period;
	}
}
    c81a:	4770      	bx	lr
    c81c:	000927c0 	.word	0x000927c0

0000c820 <bt_mesh_model_get>:
{
	return &dev_comp->elem[mod->elem_idx];
}

struct bt_mesh_model *bt_mesh_model_get(bool vnd, uint8_t elem_idx, uint8_t mod_idx)
{
    c820:	b538      	push	{r3, r4, r5, lr}
    c822:	4613      	mov	r3, r2
	struct bt_mesh_elem *elem;

	if (elem_idx >= dev_comp->elem_count) {
    c824:	4a1b      	ldr	r2, [pc, #108]	; (c894 <bt_mesh_model_get+0x74>)
    c826:	6812      	ldr	r2, [r2, #0]
{
    c828:	4604      	mov	r4, r0
	if (elem_idx >= dev_comp->elem_count) {
    c82a:	6890      	ldr	r0, [r2, #8]
    c82c:	4281      	cmp	r1, r0
{
    c82e:	460d      	mov	r5, r1
	if (elem_idx >= dev_comp->elem_count) {
    c830:	d30b      	bcc.n	c84a <bt_mesh_model_get+0x2a>
    c832:	4a19      	ldr	r2, [pc, #100]	; (c898 <bt_mesh_model_get+0x78>)
    c834:	4b19      	ldr	r3, [pc, #100]	; (c89c <bt_mesh_model_get+0x7c>)
		BT_ERR("Invalid element index %u", elem_idx);
    c836:	481a      	ldr	r0, [pc, #104]	; (c8a0 <bt_mesh_model_get+0x80>)
    c838:	1ad2      	subs	r2, r2, r3
    c83a:	08d2      	lsrs	r2, r2, #3
    c83c:	0192      	lsls	r2, r2, #6
    c83e:	f042 0201 	orr.w	r2, r2, #1
    c842:	f00c fe0b 	bl	1945c <log_1>
		return NULL;
    c846:	2000      	movs	r0, #0
			return NULL;
		}

		return &elem->models[mod_idx];
	}
}
    c848:	bd38      	pop	{r3, r4, r5, pc}
	elem = &dev_comp->elem[elem_idx];
    c84a:	68d1      	ldr	r1, [r2, #12]
    c84c:	eb01 1105 	add.w	r1, r1, r5, lsl #4
	if (vnd) {
    c850:	b184      	cbz	r4, c874 <bt_mesh_model_get+0x54>
		if (mod_idx >= elem->vnd_model_count) {
    c852:	794a      	ldrb	r2, [r1, #5]
    c854:	429a      	cmp	r2, r3
    c856:	d809      	bhi.n	c86c <bt_mesh_model_get+0x4c>
    c858:	4910      	ldr	r1, [pc, #64]	; (c89c <bt_mesh_model_get+0x7c>)
    c85a:	4a0f      	ldr	r2, [pc, #60]	; (c898 <bt_mesh_model_get+0x78>)
			BT_ERR("Invalid vendor model index %u", mod_idx);
    c85c:	4811      	ldr	r0, [pc, #68]	; (c8a4 <bt_mesh_model_get+0x84>)
    c85e:	1a52      	subs	r2, r2, r1
    c860:	08d2      	lsrs	r2, r2, #3
    c862:	0192      	lsls	r2, r2, #6
    c864:	f042 0201 	orr.w	r2, r2, #1
    c868:	4619      	mov	r1, r3
    c86a:	e7ea      	b.n	c842 <bt_mesh_model_get+0x22>
		return &elem->vnd_models[mod_idx];
    c86c:	68c8      	ldr	r0, [r1, #12]
		return &elem->models[mod_idx];
    c86e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    c872:	e7e9      	b.n	c848 <bt_mesh_model_get+0x28>
		if (mod_idx >= elem->model_count) {
    c874:	790a      	ldrb	r2, [r1, #4]
    c876:	429a      	cmp	r2, r3
    c878:	d809      	bhi.n	c88e <bt_mesh_model_get+0x6e>
    c87a:	4908      	ldr	r1, [pc, #32]	; (c89c <bt_mesh_model_get+0x7c>)
    c87c:	4a06      	ldr	r2, [pc, #24]	; (c898 <bt_mesh_model_get+0x78>)
			BT_ERR("Invalid SIG model index %u", mod_idx);
    c87e:	480a      	ldr	r0, [pc, #40]	; (c8a8 <bt_mesh_model_get+0x88>)
    c880:	1a52      	subs	r2, r2, r1
    c882:	08d2      	lsrs	r2, r2, #3
    c884:	0192      	lsls	r2, r2, #6
    c886:	f042 0201 	orr.w	r2, r2, #1
    c88a:	4619      	mov	r1, r3
    c88c:	e7d9      	b.n	c842 <bt_mesh_model_get+0x22>
		return &elem->models[mod_idx];
    c88e:	6888      	ldr	r0, [r1, #8]
    c890:	e7ed      	b.n	c86e <bt_mesh_model_get+0x4e>
    c892:	bf00      	nop
    c894:	20001bd8 	.word	0x20001bd8
    c898:	0001f03c 	.word	0x0001f03c
    c89c:	0001ef2c 	.word	0x0001ef2c
    c8a0:	00021f37 	.word	0x00021f37
    c8a4:	00021f50 	.word	0x00021f50
    c8a8:	00021f6e 	.word	0x00021f6e

0000c8ac <mod_set>:
	return 0;
}

static int mod_set(bool vnd, const char *name, size_t len_rd,
		   settings_read_cb read_cb, void *cb_arg)
{
    c8ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c8b0:	b086      	sub	sp, #24
    c8b2:	4605      	mov	r5, r0
    c8b4:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
    c8b8:	4616      	mov	r6, r2
    c8ba:	461f      	mov	r7, r3
	uint8_t elem_idx, mod_idx;
	uint16_t mod_key;
	int len;
	const char *next;

	if (!name) {
    c8bc:	468a      	mov	sl, r1
    c8be:	b951      	cbnz	r1, c8d6 <mod_set+0x2a>
    c8c0:	4b75      	ldr	r3, [pc, #468]	; (ca98 <mod_set+0x1ec>)
    c8c2:	4976      	ldr	r1, [pc, #472]	; (ca9c <mod_set+0x1f0>)
	}

	len = settings_name_next(name, &next);

	if (!next) {
		BT_ERR("Insufficient number of arguments");
    c8c4:	4876      	ldr	r0, [pc, #472]	; (caa0 <mod_set+0x1f4>)
    c8c6:	1ac9      	subs	r1, r1, r3
    c8c8:	08c9      	lsrs	r1, r1, #3
    c8ca:	0189      	lsls	r1, r1, #6
    c8cc:	f041 0101 	orr.w	r1, r1, #1
    c8d0:	f00c fdb7 	bl	19442 <log_0>
		return -ENOENT;
    c8d4:	e01b      	b.n	c90e <mod_set+0x62>
	mod_key = strtol(name, NULL, 16);
    c8d6:	2210      	movs	r2, #16
    c8d8:	2100      	movs	r1, #0
    c8da:	4650      	mov	r0, sl
    c8dc:	f00d fb88 	bl	19ff0 <strtol>
	elem_idx = mod_key >> 8;
    c8e0:	f3c0 2407 	ubfx	r4, r0, #8, #8
	mod = bt_mesh_model_get(vnd, elem_idx, mod_idx);
    c8e4:	fa5f f880 	uxtb.w	r8, r0
    c8e8:	4642      	mov	r2, r8
    c8ea:	4628      	mov	r0, r5
    c8ec:	4621      	mov	r1, r4
    c8ee:	f7ff ff97 	bl	c820 <bt_mesh_model_get>
	if (!mod) {
    c8f2:	4605      	mov	r5, r0
    c8f4:	b970      	cbnz	r0, c914 <mod_set+0x68>
    c8f6:	4a68      	ldr	r2, [pc, #416]	; (ca98 <mod_set+0x1ec>)
    c8f8:	4b68      	ldr	r3, [pc, #416]	; (ca9c <mod_set+0x1f0>)
		BT_ERR("Failed to get model for elem_idx %u mod_idx %u",
    c8fa:	486a      	ldr	r0, [pc, #424]	; (caa4 <mod_set+0x1f8>)
    c8fc:	1a9b      	subs	r3, r3, r2
    c8fe:	08db      	lsrs	r3, r3, #3
    c900:	019b      	lsls	r3, r3, #6
    c902:	f043 0301 	orr.w	r3, r3, #1
    c906:	4642      	mov	r2, r8
    c908:	4621      	mov	r1, r4
    c90a:	f00c fdbb 	bl	19484 <log_2>
	if (!strncmp(next, "data", len)) {
		return mod_data_set(mod, next, len_rd, read_cb, cb_arg);
	}

	BT_WARN("Unknown module key %s", next);
	return -ENOENT;
    c90e:	f06f 0401 	mvn.w	r4, #1
    c912:	e011      	b.n	c938 <mod_set+0x8c>
	len = settings_name_next(name, &next);
    c914:	a903      	add	r1, sp, #12
    c916:	4650      	mov	r0, sl
    c918:	f00d f916 	bl	19b48 <settings_name_next>
    c91c:	4680      	mov	r8, r0
	if (!next) {
    c91e:	9803      	ldr	r0, [sp, #12]
    c920:	2800      	cmp	r0, #0
    c922:	d0cd      	beq.n	c8c0 <mod_set+0x14>
	if (!strncmp(next, "bind", len)) {
    c924:	4960      	ldr	r1, [pc, #384]	; (caa8 <mod_set+0x1fc>)
    c926:	4642      	mov	r2, r8
    c928:	f00d fc87 	bl	1a23a <strncmp>
    c92c:	b9d8      	cbnz	r0, c966 <mod_set+0xba>
		mod->keys[i] = BT_MESH_KEY_UNUSED;
    c92e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c932:	60eb      	str	r3, [r5, #12]
	if (len_rd == 0) {
    c934:	b926      	cbnz	r6, c940 <mod_set+0x94>
		return 0;
    c936:	2400      	movs	r4, #0
}
    c938:	4620      	mov	r0, r4
    c93a:	b006      	add	sp, #24
    c93c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	len = read_cb(cb_arg, mod->keys, sizeof(mod->keys));
    c940:	2204      	movs	r2, #4
    c942:	f105 010c 	add.w	r1, r5, #12
	len = read_cb(cb_arg, mod->groups, sizeof(mod->groups));
    c946:	4648      	mov	r0, r9
    c948:	47b8      	blx	r7
	if (len < 0) {
    c94a:	1e04      	subs	r4, r0, #0
    c94c:	daf3      	bge.n	c936 <mod_set+0x8a>
    c94e:	4b52      	ldr	r3, [pc, #328]	; (ca98 <mod_set+0x1ec>)
    c950:	4a52      	ldr	r2, [pc, #328]	; (ca9c <mod_set+0x1f0>)
		BT_ERR("Failed to read value (err %zd)", len);
    c952:	4856      	ldr	r0, [pc, #344]	; (caac <mod_set+0x200>)
    c954:	1ad2      	subs	r2, r2, r3
    c956:	08d2      	lsrs	r2, r2, #3
    c958:	0192      	lsls	r2, r2, #6
    c95a:	f042 0201 	orr.w	r2, r2, #1
    c95e:	4621      	mov	r1, r4
    c960:	f00c fd7c 	bl	1945c <log_1>
		return len;
    c964:	e7e8      	b.n	c938 <mod_set+0x8c>
	if (!strncmp(next, "sub", len)) {
    c966:	4952      	ldr	r1, [pc, #328]	; (cab0 <mod_set+0x204>)
    c968:	9803      	ldr	r0, [sp, #12]
    c96a:	4642      	mov	r2, r8
    c96c:	f00d fc65 	bl	1a23a <strncmp>
    c970:	4601      	mov	r1, r0
    c972:	b948      	cbnz	r0, c988 <mod_set+0xdc>
	(void)memset(mod->groups, 0, sizeof(mod->groups));
    c974:	3510      	adds	r5, #16
    c976:	2204      	movs	r2, #4
    c978:	4628      	mov	r0, r5
    c97a:	f00d fc8b 	bl	1a294 <memset>
	if (len_rd == 0) {
    c97e:	2e00      	cmp	r6, #0
    c980:	d0d9      	beq.n	c936 <mod_set+0x8a>
	len = read_cb(cb_arg, mod->groups, sizeof(mod->groups));
    c982:	2204      	movs	r2, #4
    c984:	4629      	mov	r1, r5
    c986:	e7de      	b.n	c946 <mod_set+0x9a>
	if (!strncmp(next, "pub", len)) {
    c988:	494a      	ldr	r1, [pc, #296]	; (cab4 <mod_set+0x208>)
    c98a:	9803      	ldr	r0, [sp, #12]
    c98c:	4642      	mov	r2, r8
    c98e:	f00d fc54 	bl	1a23a <strncmp>
    c992:	4604      	mov	r4, r0
    c994:	2800      	cmp	r0, #0
    c996:	d154      	bne.n	ca42 <mod_set+0x196>
	if (!mod->pub) {
    c998:	68ab      	ldr	r3, [r5, #8]
    c99a:	b963      	cbnz	r3, c9b6 <mod_set+0x10a>
    c99c:	4b3e      	ldr	r3, [pc, #248]	; (ca98 <mod_set+0x1ec>)
    c99e:	493f      	ldr	r1, [pc, #252]	; (ca9c <mod_set+0x1f0>)
		BT_WARN("Model has no publication context!");
    c9a0:	4845      	ldr	r0, [pc, #276]	; (cab8 <mod_set+0x20c>)
    c9a2:	1ac9      	subs	r1, r1, r3
    c9a4:	08c9      	lsrs	r1, r1, #3
    c9a6:	0189      	lsls	r1, r1, #6
    c9a8:	f041 0102 	orr.w	r1, r1, #2
    c9ac:	f00c fd49 	bl	19442 <log_0>
		return -EINVAL;
    c9b0:	f06f 0415 	mvn.w	r4, #21
    c9b4:	e7c0      	b.n	c938 <mod_set+0x8c>
	if (len_rd == 0) {
    c9b6:	b946      	cbnz	r6, c9ca <mod_set+0x11e>
		mod->pub->addr = BT_MESH_ADDR_UNASSIGNED;
    c9b8:	685a      	ldr	r2, [r3, #4]
    c9ba:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
    c9be:	605a      	str	r2, [r3, #4]
		mod->pub->ttl = 0U;
    c9c0:	689a      	ldr	r2, [r3, #8]
    c9c2:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
    c9c6:	609a      	str	r2, [r3, #8]
		return 0;
    c9c8:	e7b6      	b.n	c938 <mod_set+0x8c>
	err = bt_mesh_settings_set(read_cb, cb_arg, &pub, sizeof(pub));
    c9ca:	2308      	movs	r3, #8
    c9cc:	aa04      	add	r2, sp, #16
    c9ce:	4649      	mov	r1, r9
    c9d0:	4638      	mov	r0, r7
    c9d2:	f000 fa2f 	bl	ce34 <bt_mesh_settings_set>
	if (err) {
    c9d6:	4604      	mov	r4, r0
    c9d8:	b150      	cbz	r0, c9f0 <mod_set+0x144>
    c9da:	4b2f      	ldr	r3, [pc, #188]	; (ca98 <mod_set+0x1ec>)
    c9dc:	492f      	ldr	r1, [pc, #188]	; (ca9c <mod_set+0x1f0>)
		BT_ERR("Failed to set \'model-pub\'");
    c9de:	4837      	ldr	r0, [pc, #220]	; (cabc <mod_set+0x210>)
    c9e0:	1ac9      	subs	r1, r1, r3
    c9e2:	08c9      	lsrs	r1, r1, #3
    c9e4:	0189      	lsls	r1, r1, #6
    c9e6:	f041 0101 	orr.w	r1, r1, #1
    c9ea:	f00c fd2a 	bl	19442 <log_0>
		return err;
    c9ee:	e7a3      	b.n	c938 <mod_set+0x8c>
	mod->pub->addr = pub.addr;
    c9f0:	68aa      	ldr	r2, [r5, #8]
    c9f2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    c9f6:	8093      	strh	r3, [r2, #4]
	mod->pub->cred = pub.cred;
    c9f8:	f89d 3017 	ldrb.w	r3, [sp, #23]
	mod->pub->key = pub.key;
    c9fc:	f3c3 1100 	ubfx	r1, r3, #4, #1
    ca00:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    ca04:	f3c3 030b 	ubfx	r3, r3, #0, #12
    ca08:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
    ca0c:	88d1      	ldrh	r1, [r2, #6]
    ca0e:	f421 51ff 	bic.w	r1, r1, #8160	; 0x1fe0
    ca12:	f021 011f 	bic.w	r1, r1, #31
    ca16:	430b      	orrs	r3, r1
    ca18:	80d3      	strh	r3, [r2, #6]
	mod->pub->ttl = pub.ttl;
    ca1a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    ca1e:	8113      	strh	r3, [r2, #8]
	mod->pub->period = pub.period;
    ca20:	8953      	ldrh	r3, [r2, #10]
    ca22:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    ca26:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    ca2a:	f023 030f 	bic.w	r3, r3, #15
    ca2e:	f3c1 010b 	ubfx	r1, r1, #0, #12
    ca32:	430b      	orrs	r3, r1
    ca34:	8153      	strh	r3, [r2, #10]
	mod->pub->count = 0U;
    ca36:	f3c3 2307 	ubfx	r3, r3, #8, #8
    ca3a:	f360 1307 	bfi	r3, r0, #4, #4
    ca3e:	72d3      	strb	r3, [r2, #11]
		return mod_set_pub(mod, len_rd, read_cb, cb_arg);
    ca40:	e77a      	b.n	c938 <mod_set+0x8c>
	if (!strncmp(next, "data", len)) {
    ca42:	491f      	ldr	r1, [pc, #124]	; (cac0 <mod_set+0x214>)
    ca44:	9803      	ldr	r0, [sp, #12]
    ca46:	4642      	mov	r2, r8
    ca48:	f00d fbf7 	bl	1a23a <strncmp>
    ca4c:	4604      	mov	r4, r0
    ca4e:	b9b0      	cbnz	r0, ca7e <mod_set+0x1d2>
	settings_name_next(name, &next);
    ca50:	9803      	ldr	r0, [sp, #12]
    ca52:	a904      	add	r1, sp, #16
    ca54:	f00d f878 	bl	19b48 <settings_name_next>
	if (mod->cb && mod->cb->settings_set) {
    ca58:	69ab      	ldr	r3, [r5, #24]
    ca5a:	2b00      	cmp	r3, #0
    ca5c:	f43f af6c 	beq.w	c938 <mod_set+0x8c>
    ca60:	f8d3 8000 	ldr.w	r8, [r3]
    ca64:	f1b8 0f00 	cmp.w	r8, #0
    ca68:	f43f af66 	beq.w	c938 <mod_set+0x8c>
		return mod->cb->settings_set(mod, next, len_rd,
    ca6c:	9904      	ldr	r1, [sp, #16]
    ca6e:	f8cd 9000 	str.w	r9, [sp]
    ca72:	463b      	mov	r3, r7
    ca74:	4632      	mov	r2, r6
    ca76:	4628      	mov	r0, r5
    ca78:	47c0      	blx	r8
    ca7a:	4604      	mov	r4, r0
		return mod_data_set(mod, next, len_rd, read_cb, cb_arg);
    ca7c:	e75c      	b.n	c938 <mod_set+0x8c>
    ca7e:	4b06      	ldr	r3, [pc, #24]	; (ca98 <mod_set+0x1ec>)
    ca80:	4a06      	ldr	r2, [pc, #24]	; (ca9c <mod_set+0x1f0>)
	BT_WARN("Unknown module key %s", next);
    ca82:	9903      	ldr	r1, [sp, #12]
    ca84:	480f      	ldr	r0, [pc, #60]	; (cac4 <mod_set+0x218>)
    ca86:	1ad2      	subs	r2, r2, r3
    ca88:	08d2      	lsrs	r2, r2, #3
    ca8a:	0192      	lsls	r2, r2, #6
    ca8c:	f042 0202 	orr.w	r2, r2, #2
    ca90:	f00c fce4 	bl	1945c <log_1>
    ca94:	e73b      	b.n	c90e <mod_set+0x62>
    ca96:	bf00      	nop
    ca98:	0001ef2c 	.word	0x0001ef2c
    ca9c:	0001f03c 	.word	0x0001f03c
    caa0:	0002008c 	.word	0x0002008c
    caa4:	00021f89 	.word	0x00021f89
    caa8:	00021f11 	.word	0x00021f11
    caac:	00021fb8 	.word	0x00021fb8
    cab0:	00021f2f 	.word	0x00021f2f
    cab4:	00021f33 	.word	0x00021f33
    cab8:	00021fd7 	.word	0x00021fd7
    cabc:	00021ff9 	.word	0x00021ff9
    cac0:	000209a3 	.word	0x000209a3
    cac4:	00022013 	.word	0x00022013

0000cac8 <bt_mesh_comp_provision>:
	dev_primary_addr = addr;
    cac8:	4b08      	ldr	r3, [pc, #32]	; (caec <bt_mesh_comp_provision+0x24>)
{
    caca:	b570      	push	{r4, r5, r6, lr}
	dev_primary_addr = addr;
    cacc:	8018      	strh	r0, [r3, #0]
	for (i = 0; i < dev_comp->elem_count; i++) {
    cace:	4b08      	ldr	r3, [pc, #32]	; (caf0 <bt_mesh_comp_provision+0x28>)
    cad0:	6819      	ldr	r1, [r3, #0]
    cad2:	688c      	ldr	r4, [r1, #8]
    cad4:	2300      	movs	r3, #0
    cad6:	18c2      	adds	r2, r0, r3
    cad8:	42a3      	cmp	r3, r4
    cada:	b292      	uxth	r2, r2
    cadc:	d100      	bne.n	cae0 <bt_mesh_comp_provision+0x18>
}
    cade:	bd70      	pop	{r4, r5, r6, pc}
		elem->addr = addr++;
    cae0:	011d      	lsls	r5, r3, #4
    cae2:	68ce      	ldr	r6, [r1, #12]
	for (i = 0; i < dev_comp->elem_count; i++) {
    cae4:	3301      	adds	r3, #1
		elem->addr = addr++;
    cae6:	5372      	strh	r2, [r6, r5]
	for (i = 0; i < dev_comp->elem_count; i++) {
    cae8:	e7f5      	b.n	cad6 <bt_mesh_comp_provision+0xe>
    caea:	bf00      	nop
    caec:	20002e66 	.word	0x20002e66
    caf0:	20001bd8 	.word	0x20001bd8

0000caf4 <bt_mesh_comp_unprovision>:
	dev_primary_addr = BT_MESH_ADDR_UNASSIGNED;
    caf4:	4b01      	ldr	r3, [pc, #4]	; (cafc <bt_mesh_comp_unprovision+0x8>)
    caf6:	2200      	movs	r2, #0
    caf8:	801a      	strh	r2, [r3, #0]
}
    cafa:	4770      	bx	lr
    cafc:	20002e66 	.word	0x20002e66

0000cb00 <bt_mesh_primary_addr>:
}
    cb00:	4b01      	ldr	r3, [pc, #4]	; (cb08 <bt_mesh_primary_addr+0x8>)
    cb02:	8818      	ldrh	r0, [r3, #0]
    cb04:	4770      	bx	lr
    cb06:	bf00      	nop
    cb08:	20002e66 	.word	0x20002e66

0000cb0c <bt_mesh_elem_find>:
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
    cb0c:	b203      	sxth	r3, r0
    cb0e:	2b00      	cmp	r3, #0
    cb10:	dd0b      	ble.n	cb2a <bt_mesh_elem_find+0x1e>
	index = addr - dev_comp->elem[0].addr;
    cb12:	4b07      	ldr	r3, [pc, #28]	; (cb30 <bt_mesh_elem_find+0x24>)
    cb14:	681a      	ldr	r2, [r3, #0]
    cb16:	68d3      	ldr	r3, [r2, #12]
	if (index >= dev_comp->elem_count) {
    cb18:	6892      	ldr	r2, [r2, #8]
	index = addr - dev_comp->elem[0].addr;
    cb1a:	8819      	ldrh	r1, [r3, #0]
    cb1c:	1a40      	subs	r0, r0, r1
	if (index >= dev_comp->elem_count) {
    cb1e:	b280      	uxth	r0, r0
    cb20:	4290      	cmp	r0, r2
    cb22:	d202      	bcs.n	cb2a <bt_mesh_elem_find+0x1e>
	return &dev_comp->elem[index];
    cb24:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    cb28:	4770      	bx	lr
		return NULL;
    cb2a:	2000      	movs	r0, #0
}
    cb2c:	4770      	bx	lr
    cb2e:	bf00      	nop
    cb30:	20001bd8 	.word	0x20001bd8

0000cb34 <bt_mesh_has_addr>:
	if (BT_MESH_ADDR_IS_UNICAST(addr)) {
    cb34:	b202      	sxth	r2, r0
    cb36:	2a00      	cmp	r2, #0
{
    cb38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cb3a:	4603      	mov	r3, r0
	if (BT_MESH_ADDR_IS_UNICAST(addr)) {
    cb3c:	dc08      	bgt.n	cb50 <bt_mesh_has_addr+0x1c>
	for (index = 0; index < dev_comp->elem_count; index++) {
    cb3e:	4a22      	ldr	r2, [pc, #136]	; (cbc8 <bt_mesh_has_addr+0x94>)
    cb40:	6816      	ldr	r6, [r2, #0]
    cb42:	68b7      	ldr	r7, [r6, #8]
    cb44:	2500      	movs	r5, #0
    cb46:	b2aa      	uxth	r2, r5
    cb48:	4297      	cmp	r7, r2
    cb4a:	d807      	bhi.n	cb5c <bt_mesh_has_addr+0x28>
	return false;
    cb4c:	2000      	movs	r0, #0
    cb4e:	e004      	b.n	cb5a <bt_mesh_has_addr+0x26>
		return bt_mesh_elem_find(addr) != NULL;
    cb50:	f7ff ffdc 	bl	cb0c <bt_mesh_elem_find>
    cb54:	3800      	subs	r0, #0
    cb56:	bf18      	it	ne
    cb58:	2001      	movne	r0, #1
}
    cb5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		struct bt_mesh_elem *elem = &dev_comp->elem[index];
    cb5c:	68f1      	ldr	r1, [r6, #12]
    cb5e:	eb01 1202 	add.w	r2, r1, r2, lsl #4
	for (i = 0; i < elem->model_count; i++) {
    cb62:	2000      	movs	r0, #0
    cb64:	f892 c004 	ldrb.w	ip, [r2, #4]
    cb68:	4560      	cmp	r0, ip
    cb6a:	db06      	blt.n	cb7a <bt_mesh_has_addr+0x46>
	for (i = 0; i < elem->vnd_model_count; i++) {
    cb6c:	f892 c005 	ldrb.w	ip, [r2, #5]
    cb70:	2000      	movs	r0, #0
    cb72:	4560      	cmp	r0, ip
    cb74:	db13      	blt.n	cb9e <bt_mesh_has_addr+0x6a>
	for (index = 0; index < dev_comp->elem_count; index++) {
    cb76:	3501      	adds	r5, #1
    cb78:	e7e5      	b.n	cb46 <bt_mesh_has_addr+0x12>
		model = &elem->models[i];
    cb7a:	6891      	ldr	r1, [r2, #8]
    cb7c:	eb01 1140 	add.w	r1, r1, r0, lsl #5
		if (mod->groups[i] == addr) {
    cb80:	8a0c      	ldrh	r4, [r1, #16]
    cb82:	429c      	cmp	r4, r3
    cb84:	d009      	beq.n	cb9a <bt_mesh_has_addr+0x66>
    cb86:	8a4c      	ldrh	r4, [r1, #18]
    cb88:	429c      	cmp	r4, r3
    cb8a:	d104      	bne.n	cb96 <bt_mesh_has_addr+0x62>
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
    cb8c:	2401      	movs	r4, #1
			return &mod->groups[i];
    cb8e:	3408      	adds	r4, #8
    cb90:	eb01 0144 	add.w	r1, r1, r4, lsl #1
		if (match) {
    cb94:	b9a9      	cbnz	r1, cbc2 <bt_mesh_has_addr+0x8e>
	for (i = 0; i < elem->model_count; i++) {
    cb96:	3001      	adds	r0, #1
    cb98:	e7e6      	b.n	cb68 <bt_mesh_has_addr+0x34>
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
    cb9a:	2400      	movs	r4, #0
    cb9c:	e7f7      	b.n	cb8e <bt_mesh_has_addr+0x5a>
		model = &elem->vnd_models[i];
    cb9e:	68d1      	ldr	r1, [r2, #12]
    cba0:	eb01 1140 	add.w	r1, r1, r0, lsl #5
		if (mod->groups[i] == addr) {
    cba4:	8a0c      	ldrh	r4, [r1, #16]
    cba6:	429c      	cmp	r4, r3
    cba8:	d009      	beq.n	cbbe <bt_mesh_has_addr+0x8a>
    cbaa:	8a4c      	ldrh	r4, [r1, #18]
    cbac:	429c      	cmp	r4, r3
    cbae:	d104      	bne.n	cbba <bt_mesh_has_addr+0x86>
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
    cbb0:	2401      	movs	r4, #1
			return &mod->groups[i];
    cbb2:	3408      	adds	r4, #8
    cbb4:	eb01 0144 	add.w	r1, r1, r4, lsl #1
		if (match) {
    cbb8:	b919      	cbnz	r1, cbc2 <bt_mesh_has_addr+0x8e>
	for (i = 0; i < elem->vnd_model_count; i++) {
    cbba:	3001      	adds	r0, #1
    cbbc:	e7d9      	b.n	cb72 <bt_mesh_has_addr+0x3e>
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
    cbbe:	2400      	movs	r4, #0
    cbc0:	e7f7      	b.n	cbb2 <bt_mesh_has_addr+0x7e>
			return true;
    cbc2:	2001      	movs	r0, #1
    cbc4:	e7c9      	b.n	cb5a <bt_mesh_has_addr+0x26>
    cbc6:	bf00      	nop
    cbc8:	20001bd8 	.word	0x20001bd8

0000cbcc <bt_mesh_model_find_group>:
{
    cbcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    cbce:	4604      	mov	r4, r0
	struct find_group_visitor_ctx ctx = {
    cbd0:	2300      	movs	r3, #0
		.mod = *mod,
    cbd2:	6800      	ldr	r0, [r0, #0]
	struct find_group_visitor_ctx ctx = {
    cbd4:	f8ad 100c 	strh.w	r1, [sp, #12]
	bt_mesh_model_extensions_walk(*mod, find_group_mod_visitor, &ctx);
    cbd8:	aa01      	add	r2, sp, #4
    cbda:	4905      	ldr	r1, [pc, #20]	; (cbf0 <bt_mesh_model_find_group+0x24>)
	struct find_group_visitor_ctx ctx = {
    cbdc:	9301      	str	r3, [sp, #4]
    cbde:	9002      	str	r0, [sp, #8]
	bt_mesh_model_extensions_walk(*mod, find_group_mod_visitor, &ctx);
    cbe0:	f00f fbdf 	bl	1c3a2 <bt_mesh_model_extensions_walk>
	*mod = ctx.mod;
    cbe4:	9b02      	ldr	r3, [sp, #8]
}
    cbe6:	9801      	ldr	r0, [sp, #4]
	*mod = ctx.mod;
    cbe8:	6023      	str	r3, [r4, #0]
}
    cbea:	b004      	add	sp, #16
    cbec:	bd10      	pop	{r4, pc}
    cbee:	bf00      	nop
    cbf0:	0001c2c3 	.word	0x0001c2c3

0000cbf4 <bt_mesh_model_recv>:
{
    cbf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (buf->data[0] >> 6) {
    cbf8:	680b      	ldr	r3, [r1, #0]
    cbfa:	4d63      	ldr	r5, [pc, #396]	; (cd88 <bt_mesh_model_recv+0x194>)
    cbfc:	781b      	ldrb	r3, [r3, #0]
{
    cbfe:	460c      	mov	r4, r1
    cc00:	4962      	ldr	r1, [pc, #392]	; (cd8c <bt_mesh_model_recv+0x198>)
	switch (buf->data[0] >> 6) {
    cc02:	099a      	lsrs	r2, r3, #6
    cc04:	1a6d      	subs	r5, r5, r1
    cc06:	2a02      	cmp	r2, #2
{
    cc08:	b085      	sub	sp, #20
    cc0a:	4680      	mov	r8, r0
    cc0c:	ea4f 05d5 	mov.w	r5, r5, lsr #3
	switch (buf->data[0] >> 6) {
    cc10:	d023      	beq.n	cc5a <bt_mesh_model_recv+0x66>
    cc12:	2a03      	cmp	r2, #3
    cc14:	d02d      	beq.n	cc72 <bt_mesh_model_recv+0x7e>
		if (buf->data[0] == 0x7f) {
    cc16:	2b7f      	cmp	r3, #127	; 0x7f
    cc18:	d10e      	bne.n	cc38 <bt_mesh_model_recv+0x44>
			BT_ERR("Ignoring RFU OpCode");
    cc1a:	01a9      	lsls	r1, r5, #6
    cc1c:	485c      	ldr	r0, [pc, #368]	; (cd90 <bt_mesh_model_recv+0x19c>)
    cc1e:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Too short payload for 2-octet OpCode");
    cc22:	f00c fc0e 	bl	19442 <log_0>
		BT_WARN("Unable to decode OpCode");
    cc26:	01ad      	lsls	r5, r5, #6
    cc28:	485a      	ldr	r0, [pc, #360]	; (cd94 <bt_mesh_model_recv+0x1a0>)
    cc2a:	f045 0102 	orr.w	r1, r5, #2
}
    cc2e:	b005      	add	sp, #20
    cc30:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		BT_WARN("Unable to decode OpCode");
    cc34:	f00c bc05 	b.w	19442 <log_0>
		*opcode = net_buf_simple_pull_u8(buf);
    cc38:	4620      	mov	r0, r4
    cc3a:	f011 f84f 	bl	1dcdc <net_buf_simple_pull_u8>
		*opcode = net_buf_simple_pull_be16(buf);
    cc3e:	4607      	mov	r7, r0
			BT_ERR("Invalid message size for OpCode 0x%08x",
    cc40:	01ad      	lsls	r5, r5, #6
	for (i = 0; i < dev_comp->elem_count; i++) {
    cc42:	f04f 0a00 	mov.w	sl, #0
			BT_ERR("Invalid message size for OpCode 0x%08x",
    cc46:	f045 0501 	orr.w	r5, r5, #1
	for (i = 0; i < dev_comp->elem_count; i++) {
    cc4a:	4b53      	ldr	r3, [pc, #332]	; (cd98 <bt_mesh_model_recv+0x1a4>)
    cc4c:	681b      	ldr	r3, [r3, #0]
    cc4e:	689a      	ldr	r2, [r3, #8]
    cc50:	4552      	cmp	r2, sl
    cc52:	d820      	bhi.n	cc96 <bt_mesh_model_recv+0xa2>
}
    cc54:	b005      	add	sp, #20
    cc56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < 2) {
    cc5a:	88a3      	ldrh	r3, [r4, #4]
    cc5c:	2b01      	cmp	r3, #1
    cc5e:	d804      	bhi.n	cc6a <bt_mesh_model_recv+0x76>
			BT_ERR("Too short payload for 2-octet OpCode");
    cc60:	01a9      	lsls	r1, r5, #6
    cc62:	484e      	ldr	r0, [pc, #312]	; (cd9c <bt_mesh_model_recv+0x1a8>)
    cc64:	f041 0101 	orr.w	r1, r1, #1
    cc68:	e7db      	b.n	cc22 <bt_mesh_model_recv+0x2e>
		*opcode = net_buf_simple_pull_be16(buf);
    cc6a:	4620      	mov	r0, r4
    cc6c:	f011 f846 	bl	1dcfc <net_buf_simple_pull_be16>
    cc70:	e7e5      	b.n	cc3e <bt_mesh_model_recv+0x4a>
		if (buf->len < 3) {
    cc72:	88a3      	ldrh	r3, [r4, #4]
    cc74:	2b02      	cmp	r3, #2
    cc76:	d804      	bhi.n	cc82 <bt_mesh_model_recv+0x8e>
			BT_ERR("Too short payload for 3-octet OpCode");
    cc78:	01a9      	lsls	r1, r5, #6
    cc7a:	4849      	ldr	r0, [pc, #292]	; (cda0 <bt_mesh_model_recv+0x1ac>)
    cc7c:	f041 0101 	orr.w	r1, r1, #1
    cc80:	e7cf      	b.n	cc22 <bt_mesh_model_recv+0x2e>
		*opcode = net_buf_simple_pull_u8(buf) << 16;
    cc82:	4620      	mov	r0, r4
    cc84:	f011 f82a 	bl	1dcdc <net_buf_simple_pull_u8>
    cc88:	4607      	mov	r7, r0
		*opcode |= net_buf_simple_pull_le16(buf);
    cc8a:	4620      	mov	r0, r4
    cc8c:	f011 f82e 	bl	1dcec <net_buf_simple_pull_le16>
    cc90:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
		return 0;
    cc94:	e7d4      	b.n	cc40 <bt_mesh_model_recv+0x4c>
		op = find_op(&dev_comp->elem[i], opcode, &model);
    cc96:	f8d3 900c 	ldr.w	r9, [r3, #12]
    cc9a:	eb09 130a 	add.w	r3, r9, sl, lsl #4
		models = elem->vnd_models;
    cc9e:	e9d3 2602 	ldrd	r2, r6, [r3, #8]
	if (BT_MESH_MODEL_OP_LEN(opcode) < 3) {
    cca2:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
		count = elem->model_count;
    cca6:	bf37      	itett	cc
    cca8:	791b      	ldrbcc	r3, [r3, #4]
		count = elem->vnd_model_count;
    ccaa:	795b      	ldrbcs	r3, [r3, #5]
		models = elem->models;
    ccac:	4616      	movcc	r6, r2
	uint32_t cid = UINT32_MAX;
    ccae:	f04f 30ff 	movcc.w	r0, #4294967295	; 0xffffffff
		cid = (uint16_t)(opcode & 0xffff);
    ccb2:	bf28      	it	cs
    ccb4:	b2b8      	uxthcs	r0, r7
	for (i = 0U; i < count; i++) {
    ccb6:	eb06 1243 	add.w	r2, r6, r3, lsl #5
    ccba:	42b2      	cmp	r2, r6
    ccbc:	d102      	bne.n	ccc4 <bt_mesh_model_recv+0xd0>
	for (i = 0; i < dev_comp->elem_count; i++) {
    ccbe:	f10a 0a01 	add.w	sl, sl, #1
    ccc2:	e7c2      	b.n	cc4a <bt_mesh_model_recv+0x56>
		if (IS_ENABLED(CONFIG_BT_MESH_MODEL_VND_MSG_CID_FORCE) &&
    ccc4:	1c41      	adds	r1, r0, #1
    ccc6:	d002      	beq.n	ccce <bt_mesh_model_recv+0xda>
		     cid != models[i].vnd.company) {
    ccc8:	8833      	ldrh	r3, [r6, #0]
		     cid != UINT32_MAX &&
    ccca:	4298      	cmp	r0, r3
    cccc:	d104      	bne.n	ccd8 <bt_mesh_model_recv+0xe4>
		for (op = (*model)->op; op->func; op++) {
    ccce:	f8d6 b014 	ldr.w	fp, [r6, #20]
    ccd2:	f8db 1008 	ldr.w	r1, [fp, #8]
    ccd6:	b909      	cbnz	r1, ccdc <bt_mesh_model_recv+0xe8>
	for (i = 0U; i < count; i++) {
    ccd8:	3620      	adds	r6, #32
    ccda:	e7ee      	b.n	ccba <bt_mesh_model_recv+0xc6>
			if (op->opcode == opcode) {
    ccdc:	f8db 1000 	ldr.w	r1, [fp]
    cce0:	428f      	cmp	r7, r1
    cce2:	d02d      	beq.n	cd40 <bt_mesh_model_recv+0x14c>
		for (op = (*model)->op; op->func; op++) {
    cce4:	f10b 0b0c 	add.w	fp, fp, #12
    cce8:	e7f3      	b.n	ccd2 <bt_mesh_model_recv+0xde>
	} else if (BT_MESH_ADDR_IS_GROUP(dst) || BT_MESH_ADDR_IS_VIRTUAL(dst)) {
    ccea:	f481 4200 	eor.w	r2, r1, #32768	; 0x8000
    ccee:	f5b2 4ffe 	cmp.w	r2, #32512	; 0x7f00
    ccf2:	d806      	bhi.n	cd02 <bt_mesh_model_recv+0x10e>
		return !!bt_mesh_model_find_group(&mod, dst);
    ccf4:	a803      	add	r0, sp, #12
    ccf6:	f7ff ff69 	bl	cbcc <bt_mesh_model_find_group>
    ccfa:	3800      	subs	r0, #0
    ccfc:	bf18      	it	ne
    ccfe:	2001      	movne	r0, #1
    cd00:	e033      	b.n	cd6a <bt_mesh_model_recv+0x176>
	return mod->elem_idx == 0;
    cd02:	7930      	ldrb	r0, [r6, #4]
    cd04:	fab0 f080 	clz	r0, r0
    cd08:	0940      	lsrs	r0, r0, #5
    cd0a:	e02e      	b.n	cd6a <bt_mesh_model_recv+0x176>
		} else if ((op->len < 0) && (buf->len != (size_t)(-op->len))) {
    cd0c:	42d1      	cmn	r1, r2
    cd0e:	d003      	beq.n	cd18 <bt_mesh_model_recv+0x124>
			BT_ERR("Invalid message size for OpCode 0x%08x",
    cd10:	4824      	ldr	r0, [pc, #144]	; (cda4 <bt_mesh_model_recv+0x1b0>)
    cd12:	462a      	mov	r2, r5
    cd14:	4639      	mov	r1, r7
    cd16:	e034      	b.n	cd82 <bt_mesh_model_recv+0x18e>
	state->offset = net_buf_simple_headroom(buf);
    cd18:	4620      	mov	r0, r4
    cd1a:	f011 f802 	bl	1dd22 <net_buf_simple_headroom>
	state->len = buf->len;
    cd1e:	88a3      	ldrh	r3, [r4, #4]
    cd20:	9301      	str	r3, [sp, #4]
	state->offset = net_buf_simple_headroom(buf);
    cd22:	4681      	mov	r9, r0
		(void)op->func(model, &rx->ctx, buf);
    cd24:	f8db 3008 	ldr.w	r3, [fp, #8]
    cd28:	4622      	mov	r2, r4
    cd2a:	f108 0104 	add.w	r1, r8, #4
    cd2e:	4630      	mov	r0, r6
    cd30:	4798      	blx	r3
	buf->data = buf->__buf + state->offset;
    cd32:	68a0      	ldr	r0, [r4, #8]
	buf->len = state->len;
    cd34:	9b01      	ldr	r3, [sp, #4]
    cd36:	80a3      	strh	r3, [r4, #4]
	buf->data = buf->__buf + state->offset;
    cd38:	fa10 f089 	uxtah	r0, r0, r9
    cd3c:	6020      	str	r0, [r4, #0]
	buf->len = state->len;
    cd3e:	e7be      	b.n	ccbe <bt_mesh_model_recv+0xca>
		if (!bt_mesh_model_has_key(model, rx->ctx.app_idx)) {
    cd40:	f8b8 1006 	ldrh.w	r1, [r8, #6]
    cd44:	4630      	mov	r0, r6
    cd46:	f00f fb0f 	bl	1c368 <bt_mesh_model_has_key>
    cd4a:	2800      	cmp	r0, #0
    cd4c:	d0b7      	beq.n	ccbe <bt_mesh_model_recv+0xca>
	if (BT_MESH_ADDR_IS_UNICAST(dst)) {
    cd4e:	f9b8 200a 	ldrsh.w	r2, [r8, #10]
		if (!model_has_dst(model, rx->ctx.recv_dst)) {
    cd52:	f8b8 100a 	ldrh.w	r1, [r8, #10]
    cd56:	9603      	str	r6, [sp, #12]
	if (BT_MESH_ADDR_IS_UNICAST(dst)) {
    cd58:	2a00      	cmp	r2, #0
    cd5a:	ddc6      	ble.n	ccea <bt_mesh_model_recv+0xf6>
		return (dev_comp->elem[mod->elem_idx].addr == dst);
    cd5c:	7932      	ldrb	r2, [r6, #4]
    cd5e:	0112      	lsls	r2, r2, #4
    cd60:	f839 0002 	ldrh.w	r0, [r9, r2]
    cd64:	1a43      	subs	r3, r0, r1
    cd66:	4258      	negs	r0, r3
    cd68:	4158      	adcs	r0, r3
		if (!model_has_dst(model, rx->ctx.recv_dst)) {
    cd6a:	2800      	cmp	r0, #0
    cd6c:	d0a7      	beq.n	ccbe <bt_mesh_model_recv+0xca>
		if ((op->len >= 0) && (buf->len < (size_t)op->len)) {
    cd6e:	f8db 2004 	ldr.w	r2, [fp, #4]
    cd72:	88a1      	ldrh	r1, [r4, #4]
    cd74:	2a00      	cmp	r2, #0
    cd76:	dbc9      	blt.n	cd0c <bt_mesh_model_recv+0x118>
    cd78:	428a      	cmp	r2, r1
    cd7a:	d9cd      	bls.n	cd18 <bt_mesh_model_recv+0x124>
			BT_ERR("Too short message for OpCode 0x%08x", opcode);
    cd7c:	480a      	ldr	r0, [pc, #40]	; (cda8 <bt_mesh_model_recv+0x1b4>)
    cd7e:	462a      	mov	r2, r5
    cd80:	4639      	mov	r1, r7
			BT_ERR("Invalid message size for OpCode 0x%08x",
    cd82:	f00c fb6b 	bl	1945c <log_1>
			continue;
    cd86:	e79a      	b.n	ccbe <bt_mesh_model_recv+0xca>
    cd88:	0001f03c 	.word	0x0001f03c
    cd8c:	0001ef2c 	.word	0x0001ef2c
    cd90:	00022029 	.word	0x00022029
    cd94:	00022087 	.word	0x00022087
    cd98:	20001bd8 	.word	0x20001bd8
    cd9c:	0002203d 	.word	0x0002203d
    cda0:	00022062 	.word	0x00022062
    cda4:	000220c3 	.word	0x000220c3
    cda8:	0002209f 	.word	0x0002209f

0000cdac <bt_mesh_model_settings_commit>:
	}
}

void bt_mesh_model_settings_commit(void)
{
	bt_mesh_model_foreach(commit_mod, NULL);
    cdac:	4801      	ldr	r0, [pc, #4]	; (cdb4 <bt_mesh_model_settings_commit+0x8>)
    cdae:	2100      	movs	r1, #0
    cdb0:	f7ff bcd8 	b.w	c764 <bt_mesh_model_foreach>
    cdb4:	0001c2fd 	.word	0x0001c2fd

0000cdb8 <app_key_evt>:
	mod_unbind(mod, *app_idx, true);
}

static void app_key_evt(uint16_t app_idx, uint16_t net_idx,
			enum bt_mesh_key_evt evt)
{
    cdb8:	b507      	push	{r0, r1, r2, lr}
	if (evt == BT_MESH_KEY_DELETED) {
    cdba:	2a01      	cmp	r2, #1
{
    cdbc:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (evt == BT_MESH_KEY_DELETED) {
    cdc0:	d104      	bne.n	cdcc <app_key_evt+0x14>
		bt_mesh_model_foreach(&mod_app_key_del, &app_idx);
    cdc2:	4804      	ldr	r0, [pc, #16]	; (cdd4 <app_key_evt+0x1c>)
    cdc4:	f10d 0106 	add.w	r1, sp, #6
    cdc8:	f7ff fccc 	bl	c764 <bt_mesh_model_foreach>
	}
}
    cdcc:	b003      	add	sp, #12
    cdce:	f85d fb04 	ldr.w	pc, [sp], #4
    cdd2:	bf00      	nop
    cdd4:	0001c50d 	.word	0x0001c50d

0000cdd8 <bt_mesh_adv_update>:
	z_impl_k_queue_cancel_wait(queue);
    cdd8:	4801      	ldr	r0, [pc, #4]	; (cde0 <bt_mesh_adv_update+0x8>)
    cdda:	f011 bb18 	b.w	1e40e <z_impl_k_queue_cancel_wait>
    cdde:	bf00      	nop
    cde0:	20000bc8 	.word	0x20000bc8

0000cde4 <bt_mesh_adv_enable>:
			0, K_FOREVER);
	k_thread_name_set(&adv_thread_data, "BT Mesh adv");
}

int bt_mesh_adv_enable(void)
{
    cde4:	b508      	push	{r3, lr}
	z_impl_k_thread_start(thread);
    cde6:	4802      	ldr	r0, [pc, #8]	; (cdf0 <bt_mesh_adv_enable+0xc>)
    cde8:	f011 fa84 	bl	1e2f4 <z_impl_k_thread_start>
	k_thread_start(&adv_thread_data);
	return 0;
}
    cdec:	2000      	movs	r0, #0
    cdee:	bd08      	pop	{r3, pc}
    cdf0:	200013c0 	.word	0x200013c0

0000cdf4 <mesh_commit>:

	return 0;
}

static int mesh_commit(void)
{
    cdf4:	b508      	push	{r3, lr}
	if (!bt_mesh_subnet_next(NULL)) {
    cdf6:	2000      	movs	r0, #0
    cdf8:	f7fd fe5a 	bl	aab0 <bt_mesh_subnet_next>
    cdfc:	b1a8      	cbz	r0, ce2a <mesh_commit+0x36>
		/* Nothing to do since we're not yet provisioned */
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT)) {
		bt_mesh_proxy_prov_disable(true);
    cdfe:	2001      	movs	r0, #1
    ce00:	f001 f950 	bl	e0a4 <bt_mesh_proxy_prov_disable>
	}

	bt_mesh_net_settings_commit();
    ce04:	f7fd fc50 	bl	a6a8 <bt_mesh_net_settings_commit>
	bt_mesh_model_settings_commit();
    ce08:	f7ff ffd0 	bl	cdac <bt_mesh_model_settings_commit>
    ce0c:	f3bf 8f5b 	dmb	ish
    ce10:	4b07      	ldr	r3, [pc, #28]	; (ce30 <mesh_commit+0x3c>)
    ce12:	e853 2f00 	ldrex	r2, [r3]
    ce16:	f042 0201 	orr.w	r2, r2, #1
    ce1a:	e843 2100 	strex	r1, r2, [r3]
    ce1e:	2900      	cmp	r1, #0
    ce20:	d1f7      	bne.n	ce12 <mesh_commit+0x1e>
    ce22:	f3bf 8f5b 	dmb	ish

	atomic_set_bit(bt_mesh.flags, BT_MESH_VALID);

	bt_mesh_start();
    ce26:	f7fc faad 	bl	9384 <bt_mesh_start>

	return 0;
}
    ce2a:	2000      	movs	r0, #0
    ce2c:	bd08      	pop	{r3, pc}
    ce2e:	bf00      	nop
    ce30:	200011e0 	.word	0x200011e0

0000ce34 <bt_mesh_settings_set>:
{
    ce34:	b538      	push	{r3, r4, r5, lr}
    ce36:	4604      	mov	r4, r0
    ce38:	4608      	mov	r0, r1
    ce3a:	4611      	mov	r1, r2
	len = read_cb(cb_arg, out, read_len);
    ce3c:	461a      	mov	r2, r3
{
    ce3e:	461d      	mov	r5, r3
	len = read_cb(cb_arg, out, read_len);
    ce40:	47a0      	blx	r4
	if (len < 0) {
    ce42:	1e04      	subs	r4, r0, #0
    ce44:	da0c      	bge.n	ce60 <bt_mesh_settings_set+0x2c>
    ce46:	4a10      	ldr	r2, [pc, #64]	; (ce88 <bt_mesh_settings_set+0x54>)
    ce48:	4b10      	ldr	r3, [pc, #64]	; (ce8c <bt_mesh_settings_set+0x58>)
		BT_ERR("Failed to read value (err %zd)", len);
    ce4a:	4811      	ldr	r0, [pc, #68]	; (ce90 <bt_mesh_settings_set+0x5c>)
    ce4c:	1ad2      	subs	r2, r2, r3
    ce4e:	08d2      	lsrs	r2, r2, #3
    ce50:	0192      	lsls	r2, r2, #6
    ce52:	f042 0201 	orr.w	r2, r2, #1
    ce56:	4621      	mov	r1, r4
    ce58:	f00c fb00 	bl	1945c <log_1>
}
    ce5c:	4620      	mov	r0, r4
    ce5e:	bd38      	pop	{r3, r4, r5, pc}
	if (len != read_len) {
    ce60:	42ac      	cmp	r4, r5
    ce62:	d00e      	beq.n	ce82 <bt_mesh_settings_set+0x4e>
    ce64:	4b09      	ldr	r3, [pc, #36]	; (ce8c <bt_mesh_settings_set+0x58>)
    ce66:	4908      	ldr	r1, [pc, #32]	; (ce88 <bt_mesh_settings_set+0x54>)
		BT_ERR("Unexpected value length (%zd != %zu)", len, read_len);
    ce68:	480a      	ldr	r0, [pc, #40]	; (ce94 <bt_mesh_settings_set+0x60>)
    ce6a:	1ac9      	subs	r1, r1, r3
    ce6c:	08c9      	lsrs	r1, r1, #3
    ce6e:	0189      	lsls	r1, r1, #6
    ce70:	f041 0301 	orr.w	r3, r1, #1
    ce74:	462a      	mov	r2, r5
    ce76:	4621      	mov	r1, r4
    ce78:	f00c fb04 	bl	19484 <log_2>
		return -EINVAL;
    ce7c:	f06f 0415 	mvn.w	r4, #21
    ce80:	e7ec      	b.n	ce5c <bt_mesh_settings_set+0x28>
	return 0;
    ce82:	2400      	movs	r4, #0
    ce84:	e7ea      	b.n	ce5c <bt_mesh_settings_set+0x28>
    ce86:	bf00      	nop
    ce88:	0001f0ec 	.word	0x0001f0ec
    ce8c:	0001ef2c 	.word	0x0001ef2c
    ce90:	00021fb8 	.word	0x00021fb8
    ce94:	0002214f 	.word	0x0002214f

0000ce98 <bt_mesh_settings_store_schedule>:
			      BIT(BT_MESH_SETTINGS_CFG_PENDING)      |      \
			      BIT(BT_MESH_SETTINGS_MOD_PENDING)      |      \
			      BIT(BT_MESH_SETTINGS_VA_PENDING))

void bt_mesh_settings_store_schedule(enum bt_mesh_settings_flag flag)
{
    ce98:	b570      	push	{r4, r5, r6, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    ce9a:	4b2b      	ldr	r3, [pc, #172]	; (cf48 <bt_mesh_settings_store_schedule+0xb0>)
    ce9c:	f3bf 8f5b 	dmb	ish
    cea0:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    cea2:	2101      	movs	r1, #1
    cea4:	f000 001f 	and.w	r0, r0, #31
    cea8:	fa01 f000 	lsl.w	r0, r1, r0
    ceac:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    ceb0:	e852 1f00 	ldrex	r1, [r2]
    ceb4:	4301      	orrs	r1, r0
    ceb6:	e842 1400 	strex	r4, r1, [r2]
    ceba:	2c00      	cmp	r4, #0
    cebc:	d1f8      	bne.n	ceb0 <bt_mesh_settings_store_schedule+0x18>
    cebe:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cec2:	f3bf 8f5b 	dmb	ish
    cec6:	681a      	ldr	r2, [r3, #0]
    cec8:	f3bf 8f5b 	dmb	ish
	uint32_t timeout_ms, remaining_ms;

	atomic_set_bit(pending_flags, flag);

	if (atomic_get(pending_flags) & NO_WAIT_PENDING_BITS) {
    cecc:	f412 6f87 	tst.w	r2, #1080	; 0x438
    ced0:	d133      	bne.n	cf3a <bt_mesh_settings_store_schedule+0xa2>
    ced2:	f3bf 8f5b 	dmb	ish
    ced6:	681a      	ldr	r2, [r3, #0]
    ced8:	f3bf 8f5b 	dmb	ish
		timeout_ms = 0;
	} else if (CONFIG_BT_MESH_RPL_STORE_TIMEOUT >= 0 &&
    cedc:	07d2      	lsls	r2, r2, #31
    cede:	d421      	bmi.n	cf24 <bt_mesh_settings_store_schedule+0x8c>
		   atomic_test_bit(pending_flags, BT_MESH_SETTINGS_RPL_PENDING) &&
		   !(atomic_get(pending_flags) & GENERIC_PENDING_BITS)) {
		timeout_ms = CONFIG_BT_MESH_RPL_STORE_TIMEOUT * MSEC_PER_SEC;
	} else {
		timeout_ms = CONFIG_BT_MESH_STORE_TIMEOUT * MSEC_PER_SEC;
    cee0:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
    cee4:	4819      	ldr	r0, [pc, #100]	; (cf4c <bt_mesh_settings_store_schedule+0xb4>)
    cee6:	f011 fd2b 	bl	1e940 <z_timeout_remaining>
			return (t * to_hz + off) / from_hz;
    ceea:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    ceee:	4604      	mov	r4, r0
    cef0:	2100      	movs	r1, #0
    cef2:	f240 30e7 	movw	r0, #999	; 0x3e7
    cef6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    cefa:	2300      	movs	r3, #0
    cefc:	fbe5 0106 	umlal	r0, r1, r5, r6
    cf00:	f7f3 f93e 	bl	180 <__aeabi_uldivmod>
    cf04:	4602      	mov	r2, r0
			return (uint32_t)((t * to_hz + off) / from_hz);
    cf06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    cf0a:	fba4 4000 	umull	r4, r0, r4, r0
    cf0e:	0be4      	lsrs	r4, r4, #15
    cf10:	ea44 4440 	orr.w	r4, r4, r0, lsl #17

	/* If the new deadline is sooner, override any existing
	 * deadline; otherwise schedule without changing any existing
	 * deadline.
	 */
	if (timeout_ms < remaining_ms) {
    cf14:	42a5      	cmp	r5, r4
		k_work_reschedule(&pending_store, K_MSEC(timeout_ms));
    cf16:	480e      	ldr	r0, [pc, #56]	; (cf50 <bt_mesh_settings_store_schedule+0xb8>)
			return (t * to_hz + off) / from_hz;
    cf18:	460b      	mov	r3, r1
	if (timeout_ms < remaining_ms) {
    cf1a:	d210      	bcs.n	cf3e <bt_mesh_settings_store_schedule+0xa6>
	} else {
		k_work_schedule(&pending_store, K_MSEC(timeout_ms));
	}
}
    cf1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_reschedule(&pending_store, K_MSEC(timeout_ms));
    cf20:	f00a bfa2 	b.w	17e68 <k_work_reschedule>
    cf24:	f3bf 8f5b 	dmb	ish
    cf28:	681a      	ldr	r2, [r3, #0]
    cf2a:	f3bf 8f5b 	dmb	ish
		   atomic_test_bit(pending_flags, BT_MESH_SETTINGS_RPL_PENDING) &&
    cf2e:	f240 33c6 	movw	r3, #966	; 0x3c6
    cf32:	421a      	tst	r2, r3
    cf34:	d1d4      	bne.n	cee0 <bt_mesh_settings_store_schedule+0x48>
		timeout_ms = CONFIG_BT_MESH_RPL_STORE_TIMEOUT * MSEC_PER_SEC;
    cf36:	4d07      	ldr	r5, [pc, #28]	; (cf54 <bt_mesh_settings_store_schedule+0xbc>)
    cf38:	e7d4      	b.n	cee4 <bt_mesh_settings_store_schedule+0x4c>
		timeout_ms = 0;
    cf3a:	2500      	movs	r5, #0
    cf3c:	e7d2      	b.n	cee4 <bt_mesh_settings_store_schedule+0x4c>
}
    cf3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_schedule(&pending_store, K_MSEC(timeout_ms));
    cf42:	f00a bf5d 	b.w	17e00 <k_work_schedule>
    cf46:	bf00      	nop
    cf48:	20001bdc 	.word	0x20001bdc
    cf4c:	20001450 	.word	0x20001450
    cf50:	20001440 	.word	0x20001440
    cf54:	000927c0 	.word	0x000927c0

0000cf58 <bt_mesh_prov_get>:
}

const struct bt_mesh_prov *bt_mesh_prov_get(void)
{
	return bt_mesh_prov;
}
    cf58:	4b01      	ldr	r3, [pc, #4]	; (cf60 <bt_mesh_prov_get+0x8>)
    cf5a:	6818      	ldr	r0, [r3, #0]
    cf5c:	4770      	bx	lr
    cf5e:	bf00      	nop
    cf60:	20001be0 	.word	0x20001be0

0000cf64 <bt_mesh_prov_complete>:
	return &prov_bearer_cb;
}

void bt_mesh_prov_complete(uint16_t net_idx, uint16_t addr)
{
	if (bt_mesh_prov->complete) {
    cf64:	4b02      	ldr	r3, [pc, #8]	; (cf70 <bt_mesh_prov_complete+0xc>)
    cf66:	681b      	ldr	r3, [r3, #0]
    cf68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    cf6a:	b103      	cbz	r3, cf6e <bt_mesh_prov_complete+0xa>
		bt_mesh_prov->complete(net_idx, addr);
    cf6c:	4718      	bx	r3
	}
}
    cf6e:	4770      	bx	lr
    cf70:	20001be0 	.word	0x20001be0

0000cf74 <prov_failed>:
{
	return atomic_test_bit(link.flags, ADV_ACK_PENDING);
}

static void prov_failed(uint8_t err)
{
    cf74:	b510      	push	{r4, lr}
	BT_DBG("%u", err);
	link.cb->error(&pb_adv, link.cb_data, err);
    cf76:	4c06      	ldr	r4, [pc, #24]	; (cf90 <prov_failed+0x1c>)
    cf78:	68a3      	ldr	r3, [r4, #8]
    cf7a:	68e1      	ldr	r1, [r4, #12]
    cf7c:	689b      	ldr	r3, [r3, #8]
{
    cf7e:	4602      	mov	r2, r0
	link.cb->error(&pb_adv, link.cb_data, err);
    cf80:	4804      	ldr	r0, [pc, #16]	; (cf94 <prov_failed+0x20>)
    cf82:	4798      	blx	r3
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    cf84:	1d20      	adds	r0, r4, #4
    cf86:	2108      	movs	r1, #8
	atomic_set_bit(link.flags, ADV_LINK_INVALID);
}
    cf88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cf8c:	f00f bac3 	b.w	1c516 <atomic_or>
    cf90:	20000150 	.word	0x20000150
    cf94:	0001f708 	.word	0x0001f708

0000cf98 <send_reliable>:
/*******************************************************************************
 * TX
 ******************************************************************************/

static void send_reliable(void)
{
    cf98:	b570      	push	{r4, r5, r6, lr}
    cf9a:	4d0c      	ldr	r5, [pc, #48]	; (cfcc <send_reliable+0x34>)
	int i;

	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
    cf9c:	2400      	movs	r4, #0
		struct net_buf *buf = link.tx.buf[i];
    cf9e:	f855 0b04 	ldr.w	r0, [r5], #4

		if (!buf) {
    cfa2:	b150      	cbz	r0, cfba <send_reliable+0x22>
			break;
		}

		if (BT_MESH_ADV(buf)->busy) {
    cfa4:	6943      	ldr	r3, [r0, #20]
    cfa6:	7a1a      	ldrb	r2, [r3, #8]
    cfa8:	f012 0208 	ands.w	r2, r2, #8
    cfac:	d102      	bne.n	cfb4 <send_reliable+0x1c>
			continue;
		}

		BT_DBG("%u bytes: %s", buf->len, bt_hex(buf->data, buf->len));

		bt_mesh_adv_send(buf, NULL, NULL);
    cfae:	4611      	mov	r1, r2
    cfb0:	f7fc fc0c 	bl	97cc <bt_mesh_adv_send>
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
    cfb4:	3401      	adds	r4, #1
    cfb6:	2c03      	cmp	r4, #3
    cfb8:	d1f1      	bne.n	cf9e <send_reliable+0x6>
	}

	k_work_reschedule(&link.tx.retransmit, RETRANSMIT_TIMEOUT);
}
    cfba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&link.tx.retransmit, RETRANSMIT_TIMEOUT);
    cfbe:	4804      	ldr	r0, [pc, #16]	; (cfd0 <send_reliable+0x38>)
    cfc0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    cfc4:	2300      	movs	r3, #0
    cfc6:	f00a bf4f 	b.w	17e68 <k_work_reschedule>
    cfca:	bf00      	nop
    cfcc:	20000174 	.word	0x20000174
    cfd0:	20000188 	.word	0x20000188

0000cfd4 <free_segments>:
{
    cfd4:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
    cfd6:	2400      	movs	r4, #0
    cfd8:	4d08      	ldr	r5, [pc, #32]	; (cffc <free_segments+0x28>)
		link.tx.buf[i] = NULL;
    cfda:	4626      	mov	r6, r4
		struct net_buf *buf = link.tx.buf[i];
    cfdc:	f855 0b04 	ldr.w	r0, [r5], #4
		if (!buf) {
    cfe0:	b158      	cbz	r0, cffa <free_segments+0x26>
		BT_MESH_ADV(buf)->busy = 0U;
    cfe2:	6943      	ldr	r3, [r0, #20]
		link.tx.buf[i] = NULL;
    cfe4:	f845 6c04 	str.w	r6, [r5, #-4]
		BT_MESH_ADV(buf)->busy = 0U;
    cfe8:	7a1a      	ldrb	r2, [r3, #8]
    cfea:	f366 02c3 	bfi	r2, r6, #3, #1
    cfee:	721a      	strb	r2, [r3, #8]
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
    cff0:	3401      	adds	r4, #1
		net_buf_unref(buf);
    cff2:	f008 fbd9 	bl	157a8 <net_buf_unref>
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
    cff6:	2c03      	cmp	r4, #3
    cff8:	d1f0      	bne.n	cfdc <free_segments+0x8>
}
    cffa:	bd70      	pop	{r4, r5, r6, pc}
    cffc:	20000174 	.word	0x20000174

0000d000 <prov_clear_tx>:
{
    d000:	b508      	push	{r3, lr}
	(void)k_work_cancel_delayable(&link.tx.retransmit);
    d002:	4803      	ldr	r0, [pc, #12]	; (d010 <prov_clear_tx+0x10>)
    d004:	f011 fb3a 	bl	1e67c <k_work_cancel_delayable>
}
    d008:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	free_segments();
    d00c:	f7ff bfe2 	b.w	cfd4 <free_segments>
    d010:	20000188 	.word	0x20000188

0000d014 <bearer_ctl_send_unacked>:

	return 0;
}

static int bearer_ctl_send_unacked(struct net_buf *buf)
{
    d014:	b510      	push	{r4, lr}
	if (!buf) {
    d016:	4604      	mov	r4, r0
    d018:	b188      	cbz	r0, d03e <bearer_ctl_send_unacked+0x2a>
		return -ENOMEM;
	}

	prov_clear_tx();
    d01a:	f7ff fff1 	bl	d000 <prov_clear_tx>
	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
    d01e:	2300      	movs	r3, #0
    d020:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
    d024:	4807      	ldr	r0, [pc, #28]	; (d044 <bearer_ctl_send_unacked+0x30>)
    d026:	f00a ff1f 	bl	17e68 <k_work_reschedule>

	bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
    d02a:	4907      	ldr	r1, [pc, #28]	; (d048 <bearer_ctl_send_unacked+0x34>)
    d02c:	2200      	movs	r2, #0
    d02e:	4620      	mov	r0, r4
    d030:	f7fc fbcc 	bl	97cc <bt_mesh_adv_send>
	net_buf_unref(buf);
    d034:	4620      	mov	r0, r4
    d036:	f008 fbb7 	bl	157a8 <net_buf_unref>

	return 0;
    d03a:	2000      	movs	r0, #0
}
    d03c:	bd10      	pop	{r4, pc}
		return -ENOMEM;
    d03e:	f06f 000b 	mvn.w	r0, #11
    d042:	e7fb      	b.n	d03c <bearer_ctl_send_unacked+0x28>
    d044:	200001b8 	.word	0x200001b8
    d048:	200004e8 	.word	0x200004e8

0000d04c <adv_buf_create>:
{
    d04c:	b510      	push	{r4, lr}
	buf = bt_mesh_adv_create(BT_MESH_ADV_PROV,
    d04e:	f040 0108 	orr.w	r1, r0, #8
    d052:	f243 3234 	movw	r2, #13108	; 0x3334
    d056:	2300      	movs	r3, #0
    d058:	2000      	movs	r0, #0
    d05a:	f7fc fba7 	bl	97ac <bt_mesh_adv_create>
	if (!buf) {
    d05e:	4604      	mov	r4, r0
    d060:	b948      	cbnz	r0, d076 <adv_buf_create+0x2a>
    d062:	4906      	ldr	r1, [pc, #24]	; (d07c <adv_buf_create+0x30>)
    d064:	4b06      	ldr	r3, [pc, #24]	; (d080 <adv_buf_create+0x34>)
		BT_ERR("Out of provisioning buffers");
    d066:	4807      	ldr	r0, [pc, #28]	; (d084 <adv_buf_create+0x38>)
    d068:	1ac9      	subs	r1, r1, r3
    d06a:	08c9      	lsrs	r1, r1, #3
    d06c:	0189      	lsls	r1, r1, #6
    d06e:	f041 0101 	orr.w	r1, r1, #1
    d072:	f00c f9e6 	bl	19442 <log_0>
}
    d076:	4620      	mov	r0, r4
    d078:	bd10      	pop	{r4, pc}
    d07a:	bf00      	nop
    d07c:	0001f0bc 	.word	0x0001f0bc
    d080:	0001ef2c 	.word	0x0001ef2c
    d084:	000221ae 	.word	0x000221ae

0000d088 <atomic_get.constprop.0>:
    d088:	4b03      	ldr	r3, [pc, #12]	; (d098 <atomic_get.constprop.0+0x10>)
    d08a:	f3bf 8f5b 	dmb	ish
    d08e:	6858      	ldr	r0, [r3, #4]
    d090:	f3bf 8f5b 	dmb	ish
}
    d094:	4770      	bx	lr
    d096:	bf00      	nop
    d098:	20000150 	.word	0x20000150

0000d09c <prov_link_accept>:

	return bearer_ctl_send(ctl_buf_create(LINK_OPEN, uuid, 16, RETRANSMITS_RELIABLE));
}

static int prov_link_accept(const struct prov_bearer_cb *cb, void *cb_data)
{
    d09c:	b570      	push	{r4, r5, r6, lr}
    d09e:	4606      	mov	r6, r0
    d0a0:	460d      	mov	r5, r1
	int err;

	err = bt_mesh_adv_enable();
    d0a2:	f7ff fe9f 	bl	cde4 <bt_mesh_adv_enable>
	if (err) {
    d0a6:	4604      	mov	r4, r0
    d0a8:	b158      	cbz	r0, d0c2 <prov_link_accept+0x26>
    d0aa:	4910      	ldr	r1, [pc, #64]	; (d0ec <prov_link_accept+0x50>)
    d0ac:	4b10      	ldr	r3, [pc, #64]	; (d0f0 <prov_link_accept+0x54>)
		BT_ERR("Failed enabling advertiser");
    d0ae:	4811      	ldr	r0, [pc, #68]	; (d0f4 <prov_link_accept+0x58>)
    d0b0:	1ac9      	subs	r1, r1, r3
    d0b2:	08c9      	lsrs	r1, r1, #3
    d0b4:	0189      	lsls	r1, r1, #6
    d0b6:	f041 0101 	orr.w	r1, r1, #1
    d0ba:	f00c f9c2 	bl	19442 <log_0>
	bt_mesh_scan_enable();
	/* Enable unprovisioned beacon sending */
	bt_mesh_beacon_enable();

	return 0;
}
    d0be:	4620      	mov	r0, r4
    d0c0:	bd70      	pop	{r4, r5, r6, pc}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    d0c2:	f7ff ffe1 	bl	d088 <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
    d0c6:	07c3      	lsls	r3, r0, #31
    d0c8:	d40c      	bmi.n	d0e4 <prov_link_accept+0x48>
	link.rx.id = XACT_ID_MAX;
    d0ca:	4b0b      	ldr	r3, [pc, #44]	; (d0f8 <prov_link_accept+0x5c>)
    d0cc:	227f      	movs	r2, #127	; 0x7f
    d0ce:	741a      	strb	r2, [r3, #16]
	link.tx.id = XACT_ID_NVAL;
    d0d0:	22ff      	movs	r2, #255	; 0xff
	link.cb_data = cb_data;
    d0d2:	e9c3 6502 	strd	r6, r5, [r3, #8]
	link.tx.id = XACT_ID_NVAL;
    d0d6:	f883 2020 	strb.w	r2, [r3, #32]
	bt_mesh_scan_enable();
    d0da:	f7fc fb8d 	bl	97f8 <bt_mesh_scan_enable>
	bt_mesh_beacon_enable();
    d0de:	f7fc fd6b 	bl	9bb8 <bt_mesh_beacon_enable>
	return 0;
    d0e2:	e7ec      	b.n	d0be <prov_link_accept+0x22>
		return -EBUSY;
    d0e4:	f06f 040f 	mvn.w	r4, #15
    d0e8:	e7e9      	b.n	d0be <prov_link_accept+0x22>
    d0ea:	bf00      	nop
    d0ec:	0001f0bc 	.word	0x0001f0bc
    d0f0:	0001ef2c 	.word	0x0001ef2c
    d0f4:	00021160 	.word	0x00021160
    d0f8:	20000150 	.word	0x20000150

0000d0fc <gen_prov_ack>:
{
    d0fc:	b510      	push	{r4, lr}
	if (!link.tx.buf[0]) {
    d0fe:	4c0b      	ldr	r4, [pc, #44]	; (d12c <gen_prov_ack+0x30>)
    d100:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d102:	b18b      	cbz	r3, d128 <gen_prov_ack+0x2c>
	if (rx->xact_id == link.tx.id) {
    d104:	7902      	ldrb	r2, [r0, #4]
    d106:	f894 3020 	ldrb.w	r3, [r4, #32]
    d10a:	429a      	cmp	r2, r3
    d10c:	d10c      	bne.n	d128 <gen_prov_ack+0x2c>
    d10e:	f7ff ffbb 	bl	d088 <atomic_get.constprop.0>
		if (!atomic_test_bit(link.flags, ADV_LINK_CLOSING)) {
    d112:	0743      	lsls	r3, r0, #29
    d114:	d401      	bmi.n	d11a <gen_prov_ack+0x1e>
			prov_clear_tx();
    d116:	f7ff ff73 	bl	d000 <prov_clear_tx>
		if (link.tx.cb) {
    d11a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    d11c:	b123      	cbz	r3, d128 <gen_prov_ack+0x2c>
			link.tx.cb(0, link.tx.cb_data);
    d11e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    d120:	2000      	movs	r0, #0
}
    d122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			link.tx.cb(0, link.tx.cb_data);
    d126:	4718      	bx	r3
}
    d128:	bd10      	pop	{r4, pc}
    d12a:	bf00      	nop
    d12c:	20000150 	.word	0x20000150

0000d130 <reset_adv_link>:
{
    d130:	b510      	push	{r4, lr}
	(void)k_work_cancel_delayable(&link.prot_timer);
    d132:	4c18      	ldr	r4, [pc, #96]	; (d194 <reset_adv_link+0x64>)
	prov_clear_tx();
    d134:	f7ff ff64 	bl	d000 <prov_clear_tx>
	(void)k_work_cancel_delayable(&link.prot_timer);
    d138:	f104 0068 	add.w	r0, r4, #104	; 0x68
    d13c:	f011 fa9e 	bl	1e67c <k_work_cancel_delayable>
    d140:	f7ff ffa2 	bl	d088 <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, ADV_PROVISIONER)) {
    d144:	0683      	lsls	r3, r0, #26
    d146:	f3c0 1240 	ubfx	r2, r0, #5, #1
    d14a:	d510      	bpl.n	d16e <reset_adv_link+0x3e>
		(void)memset(&link, 0, offsetof(struct pb_adv, tx.retransmit));
    d14c:	2238      	movs	r2, #56	; 0x38
    d14e:	2100      	movs	r1, #0
    d150:	4620      	mov	r0, r4
    d152:	f00d f89f 	bl	1a294 <memset>
		link.rx.id = XACT_ID_NVAL;
    d156:	23ff      	movs	r3, #255	; 0xff
    d158:	7423      	strb	r3, [r4, #16]
	link.tx.pending_ack = XACT_ID_NVAL;
    d15a:	23ff      	movs	r3, #255	; 0xff
    d15c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	link.rx.buf = &rx_buf;
    d160:	4b0d      	ldr	r3, [pc, #52]	; (d198 <reset_adv_link+0x68>)
    d162:	6163      	str	r3, [r4, #20]
	buf->len  = 0U;
    d164:	2200      	movs	r2, #0
    d166:	809a      	strh	r2, [r3, #4]
	buf->data = buf->__buf;
    d168:	689a      	ldr	r2, [r3, #8]
    d16a:	601a      	str	r2, [r3, #0]
}
    d16c:	bd10      	pop	{r4, pc}
		link.id = 0;
    d16e:	4623      	mov	r3, r4
    d170:	f843 2b04 	str.w	r2, [r3], #4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    d174:	f3bf 8f5b 	dmb	ish
    d178:	e853 1f00 	ldrex	r1, [r3]
    d17c:	e843 2000 	strex	r0, r2, [r3]
    d180:	2800      	cmp	r0, #0
    d182:	d1f9      	bne.n	d178 <reset_adv_link+0x48>
    d184:	f3bf 8f5b 	dmb	ish
		link.rx.id = XACT_ID_MAX;
    d188:	237f      	movs	r3, #127	; 0x7f
    d18a:	7423      	strb	r3, [r4, #16]
		link.tx.id = XACT_ID_NVAL;
    d18c:	23ff      	movs	r3, #255	; 0xff
    d18e:	f884 3020 	strb.w	r3, [r4, #32]
    d192:	e7e2      	b.n	d15a <reset_adv_link+0x2a>
    d194:	20000150 	.word	0x20000150
    d198:	200004f0 	.word	0x200004f0

0000d19c <close_link>:
{
    d19c:	b570      	push	{r4, r5, r6, lr}
	const struct prov_bearer_cb *cb = link.cb;
    d19e:	4b06      	ldr	r3, [pc, #24]	; (d1b8 <close_link+0x1c>)
	void *cb_data = link.cb_data;
    d1a0:	e9d3 6502 	ldrd	r6, r5, [r3, #8]
{
    d1a4:	4604      	mov	r4, r0
	reset_adv_link();
    d1a6:	f7ff ffc3 	bl	d130 <reset_adv_link>
	cb->link_closed(&pb_adv, cb_data, reason);
    d1aa:	6873      	ldr	r3, [r6, #4]
    d1ac:	4803      	ldr	r0, [pc, #12]	; (d1bc <close_link+0x20>)
    d1ae:	4622      	mov	r2, r4
    d1b0:	4629      	mov	r1, r5
}
    d1b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb->link_closed(&pb_adv, cb_data, reason);
    d1b6:	4718      	bx	r3
    d1b8:	20000150 	.word	0x20000150
    d1bc:	0001f708 	.word	0x0001f708

0000d1c0 <ctl_buf_create>:
{
    d1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d1c4:	4605      	mov	r5, r0
	buf = adv_buf_create(retransmits);
    d1c6:	4618      	mov	r0, r3
{
    d1c8:	460f      	mov	r7, r1
    d1ca:	4690      	mov	r8, r2
	buf = adv_buf_create(retransmits);
    d1cc:	f7ff ff3e 	bl	d04c <adv_buf_create>
	if (!buf) {
    d1d0:	4604      	mov	r4, r0
    d1d2:	b1b0      	cbz	r0, d202 <ctl_buf_create+0x42>
	net_buf_add_be32(buf, link.id);
    d1d4:	4b0c      	ldr	r3, [pc, #48]	; (d208 <ctl_buf_create+0x48>)
	net_buf_simple_add_be32(&buf->b, val);
    d1d6:	f100 0608 	add.w	r6, r0, #8
    d1da:	6819      	ldr	r1, [r3, #0]
    d1dc:	4630      	mov	r0, r6
	net_buf_add_u8(buf, GPC_CTL(op));
    d1de:	00ad      	lsls	r5, r5, #2
    d1e0:	f010 fd34 	bl	1dc4c <net_buf_simple_add_be32>
    d1e4:	f045 0503 	orr.w	r5, r5, #3
	net_buf_add_u8(buf, 0x00);
    d1e8:	2100      	movs	r1, #0
    d1ea:	4620      	mov	r0, r4
    d1ec:	f00f f9a2 	bl	1c534 <net_buf_add_u8.isra.0>
	net_buf_add_u8(buf, GPC_CTL(op));
    d1f0:	b2e9      	uxtb	r1, r5
    d1f2:	4620      	mov	r0, r4
    d1f4:	f00f f99e 	bl	1c534 <net_buf_add_u8.isra.0>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    d1f8:	4642      	mov	r2, r8
    d1fa:	4639      	mov	r1, r7
    d1fc:	4630      	mov	r0, r6
    d1fe:	f010 fd0a 	bl	1dc16 <net_buf_simple_add_mem>
}
    d202:	4620      	mov	r0, r4
    d204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d208:	20000150 	.word	0x20000150

0000d20c <gen_prov_ctl>:
{
    d20c:	b570      	push	{r4, r5, r6, lr}
	switch (BEARER_CTL(rx->gpc)) {
    d20e:	7944      	ldrb	r4, [r0, #5]
    d210:	08a4      	lsrs	r4, r4, #2
    d212:	2c01      	cmp	r4, #1
{
    d214:	4605      	mov	r5, r0
    d216:	460a      	mov	r2, r1
	switch (BEARER_CTL(rx->gpc)) {
    d218:	d050      	beq.n	d2bc <gen_prov_ctl+0xb0>
    d21a:	2c02      	cmp	r4, #2
    d21c:	d063      	beq.n	d2e6 <gen_prov_ctl+0xda>
    d21e:	2c00      	cmp	r4, #0
    d220:	d16f      	bne.n	d302 <gen_prov_ctl+0xf6>
	if (buf->len < 16) {
    d222:	8889      	ldrh	r1, [r1, #4]
    d224:	290f      	cmp	r1, #15
    d226:	d80b      	bhi.n	d240 <gen_prov_ctl+0x34>
    d228:	4a3b      	ldr	r2, [pc, #236]	; (d318 <gen_prov_ctl+0x10c>)
    d22a:	4b3c      	ldr	r3, [pc, #240]	; (d31c <gen_prov_ctl+0x110>)
		BT_ERR("Too short bearer open message (len %u)", buf->len);
    d22c:	483c      	ldr	r0, [pc, #240]	; (d320 <gen_prov_ctl+0x114>)
    d22e:	1ad2      	subs	r2, r2, r3
    d230:	08d2      	lsrs	r2, r2, #3
    d232:	0192      	lsls	r2, r2, #6
    d234:	f042 0201 	orr.w	r2, r2, #1
}
    d238:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unknown bearer opcode: 0x%02x", BEARER_CTL(rx->gpc));
    d23c:	f00c b90e 	b.w	1945c <log_1>
    d240:	f7ff ff22 	bl	d088 <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
    d244:	07c6      	lsls	r6, r0, #31
    d246:	d50e      	bpl.n	d266 <gen_prov_ctl+0x5a>
		if (link.id != rx->link_id) {
    d248:	4b36      	ldr	r3, [pc, #216]	; (d324 <gen_prov_ctl+0x118>)
    d24a:	681a      	ldr	r2, [r3, #0]
    d24c:	682b      	ldr	r3, [r5, #0]
    d24e:	429a      	cmp	r2, r3
    d250:	d161      	bne.n	d316 <gen_prov_ctl+0x10a>
		(void)bearer_ctl_send_unacked(ctl_buf_create(LINK_ACK, NULL, 0, RETRANSMITS_ACK));
    d252:	4622      	mov	r2, r4
    d254:	4621      	mov	r1, r4
    d256:	2302      	movs	r3, #2
    d258:	2001      	movs	r0, #1
    d25a:	f7ff ffb1 	bl	d1c0 <ctl_buf_create>
}
    d25e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		(void)bearer_ctl_send_unacked(ctl_buf_create(LINK_ACK, NULL, 0, RETRANSMITS_ACK));
    d262:	f7ff bed7 	b.w	d014 <bearer_ctl_send_unacked>
	if (memcmp(buf->data, bt_mesh_prov_get()->uuid, 16)) {
    d266:	6814      	ldr	r4, [r2, #0]
    d268:	f7ff fe76 	bl	cf58 <bt_mesh_prov_get>
    d26c:	2210      	movs	r2, #16
    d26e:	6801      	ldr	r1, [r0, #0]
    d270:	4620      	mov	r0, r4
    d272:	f00c fff3 	bl	1a25c <memcmp>
    d276:	4604      	mov	r4, r0
    d278:	2800      	cmp	r0, #0
    d27a:	d14c      	bne.n	d316 <gen_prov_ctl+0x10a>
	link.id = rx->link_id;
    d27c:	4e29      	ldr	r6, [pc, #164]	; (d324 <gen_prov_ctl+0x118>)
    d27e:	682b      	ldr	r3, [r5, #0]
    d280:	4630      	mov	r0, r6
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    d282:	2101      	movs	r1, #1
    d284:	f840 3b04 	str.w	r3, [r0], #4
    d288:	f00f f945 	bl	1c516 <atomic_or>
	net_buf_simple_reset(link.rx.buf);
    d28c:	6973      	ldr	r3, [r6, #20]
	buf->data = buf->__buf;
    d28e:	689a      	ldr	r2, [r3, #8]
    d290:	601a      	str	r2, [r3, #0]
	buf->len  = 0U;
    d292:	809c      	strh	r4, [r3, #4]
	err = bearer_ctl_send_unacked(ctl_buf_create(LINK_ACK, NULL, 0, RETRANSMITS_ACK));
    d294:	4622      	mov	r2, r4
    d296:	2302      	movs	r3, #2
    d298:	4621      	mov	r1, r4
    d29a:	2001      	movs	r0, #1
    d29c:	f7ff ff90 	bl	d1c0 <ctl_buf_create>
    d2a0:	f7ff feb8 	bl	d014 <bearer_ctl_send_unacked>
	if (err) {
    d2a4:	b118      	cbz	r0, d2ae <gen_prov_ctl+0xa2>
}
    d2a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		reset_adv_link();
    d2aa:	f7ff bf41 	b.w	d130 <reset_adv_link>
	link.cb->link_opened(&pb_adv, link.cb_data);
    d2ae:	68b3      	ldr	r3, [r6, #8]
    d2b0:	68f1      	ldr	r1, [r6, #12]
    d2b2:	681b      	ldr	r3, [r3, #0]
		link.cb->link_opened(&pb_adv, link.cb_data);
    d2b4:	481c      	ldr	r0, [pc, #112]	; (d328 <gen_prov_ctl+0x11c>)
}
    d2b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		link.cb->link_opened(&pb_adv, link.cb_data);
    d2ba:	4718      	bx	r3
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    d2bc:	f7ff fee4 	bl	d088 <atomic_get.constprop.0>
		if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
    d2c0:	07c0      	lsls	r0, r0, #31
    d2c2:	d528      	bpl.n	d316 <gen_prov_ctl+0x10a>
    d2c4:	f7ff fee0 	bl	d088 <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, ADV_PROVISIONER)) {
    d2c8:	0681      	lsls	r1, r0, #26
    d2ca:	d524      	bpl.n	d316 <gen_prov_ctl+0x10a>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    d2cc:	4c15      	ldr	r4, [pc, #84]	; (d324 <gen_prov_ctl+0x118>)
    d2ce:	2102      	movs	r1, #2
    d2d0:	1d20      	adds	r0, r4, #4
    d2d2:	f00f f920 	bl	1c516 <atomic_or>
		if (atomic_test_and_set_bit(link.flags, ADV_LINK_ACK_RECVD)) {
    d2d6:	0782      	lsls	r2, r0, #30
    d2d8:	d41d      	bmi.n	d316 <gen_prov_ctl+0x10a>
		prov_clear_tx();
    d2da:	f7ff fe91 	bl	d000 <prov_clear_tx>
		link.cb->link_opened(&pb_adv, link.cb_data);
    d2de:	68a3      	ldr	r3, [r4, #8]
    d2e0:	68e1      	ldr	r1, [r4, #12]
    d2e2:	681b      	ldr	r3, [r3, #0]
    d2e4:	e7e6      	b.n	d2b4 <gen_prov_ctl+0xa8>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    d2e6:	f7ff fecf 	bl	d088 <atomic_get.constprop.0>
		if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
    d2ea:	07c3      	lsls	r3, r0, #31
    d2ec:	d513      	bpl.n	d316 <gen_prov_ctl+0x10a>
	if (buf->len != 1) {
    d2ee:	888b      	ldrh	r3, [r1, #4]
    d2f0:	2b01      	cmp	r3, #1
    d2f2:	d110      	bne.n	d316 <gen_prov_ctl+0x10a>
	close_link(net_buf_simple_pull_u8(buf));
    d2f4:	4608      	mov	r0, r1
    d2f6:	f010 fcf1 	bl	1dcdc <net_buf_simple_pull_u8>
}
    d2fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	close_link(net_buf_simple_pull_u8(buf));
    d2fe:	f7ff bf4d 	b.w	d19c <close_link>
    d302:	4a05      	ldr	r2, [pc, #20]	; (d318 <gen_prov_ctl+0x10c>)
    d304:	4b05      	ldr	r3, [pc, #20]	; (d31c <gen_prov_ctl+0x110>)
		BT_ERR("Unknown bearer opcode: 0x%02x", BEARER_CTL(rx->gpc));
    d306:	4809      	ldr	r0, [pc, #36]	; (d32c <gen_prov_ctl+0x120>)
    d308:	1ad2      	subs	r2, r2, r3
    d30a:	08d2      	lsrs	r2, r2, #3
    d30c:	0192      	lsls	r2, r2, #6
    d30e:	f042 0201 	orr.w	r2, r2, #1
    d312:	4621      	mov	r1, r4
    d314:	e790      	b.n	d238 <gen_prov_ctl+0x2c>
}
    d316:	bd70      	pop	{r4, r5, r6, pc}
    d318:	0001f0bc 	.word	0x0001f0bc
    d31c:	0001ef2c 	.word	0x0001ef2c
    d320:	000221ca 	.word	0x000221ca
    d324:	20000150 	.word	0x20000150
    d328:	0001f708 	.word	0x0001f708
    d32c:	000221f1 	.word	0x000221f1

0000d330 <prov_link_close>:

static void prov_link_close(enum prov_bearer_link_status status)
{
    d330:	b507      	push	{r0, r1, r2, lr}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    d332:	2104      	movs	r1, #4
    d334:	f88d 0007 	strb.w	r0, [sp, #7]
    d338:	4808      	ldr	r0, [pc, #32]	; (d35c <prov_link_close+0x2c>)
    d33a:	f00f f8ec 	bl	1c516 <atomic_or>
	if (atomic_test_and_set_bit(link.flags, ADV_LINK_CLOSING)) {
    d33e:	0743      	lsls	r3, r0, #29
    d340:	d408      	bmi.n	d354 <prov_link_close+0x24>
		return;
	}

	/* Ignore errors, the link will time out eventually if this doesn't get sent */
	bearer_ctl_send_unacked(ctl_buf_create(LINK_CLOSE, &status, 1, RETRANSMITS_LINK_CLOSE));
    d342:	2302      	movs	r3, #2
    d344:	2201      	movs	r2, #1
    d346:	f10d 0107 	add.w	r1, sp, #7
    d34a:	4618      	mov	r0, r3
    d34c:	f7ff ff38 	bl	d1c0 <ctl_buf_create>
    d350:	f7ff fe60 	bl	d014 <bearer_ctl_send_unacked>
}
    d354:	b003      	add	sp, #12
    d356:	f85d fb04 	ldr.w	pc, [sp], #4
    d35a:	bf00      	nop
    d35c:	20000154 	.word	0x20000154

0000d360 <gen_prov_ack_send>:
{
    d360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d362:	4e1e      	ldr	r6, [pc, #120]	; (d3dc <gen_prov_ack_send+0x7c>)
    d364:	2110      	movs	r1, #16
    d366:	4605      	mov	r5, r0
    d368:	1d30      	adds	r0, r6, #4
    d36a:	f00f f8d4 	bl	1c516 <atomic_or>
	if (pending && link.tx.pending_ack == xact_id) {
    d36e:	ea10 0701 	ands.w	r7, r0, r1
    d372:	d003      	beq.n	d37c <gen_prov_ack_send+0x1c>
    d374:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
    d378:	42ab      	cmp	r3, r5
    d37a:	d011      	beq.n	d3a0 <gen_prov_ack_send+0x40>
	buf = adv_buf_create(RETRANSMITS_ACK);
    d37c:	2002      	movs	r0, #2
    d37e:	f7ff fe65 	bl	d04c <adv_buf_create>
	if (!buf) {
    d382:	4604      	mov	r4, r0
    d384:	b968      	cbnz	r0, d3a2 <gen_prov_ack_send+0x42>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d386:	4b16      	ldr	r3, [pc, #88]	; (d3e0 <gen_prov_ack_send+0x80>)
    d388:	f3bf 8f5b 	dmb	ish
    d38c:	e853 2f00 	ldrex	r2, [r3]
    d390:	f022 0210 	bic.w	r2, r2, #16
    d394:	e843 2100 	strex	r1, r2, [r3]
    d398:	2900      	cmp	r1, #0
    d39a:	d1f7      	bne.n	d38c <gen_prov_ack_send+0x2c>
    d39c:	f3bf 8f5b 	dmb	ish
}
    d3a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (pending) {
    d3a2:	b9cf      	cbnz	r7, d3d8 <gen_prov_ack_send+0x78>
		complete = &cb;
    d3a4:	4f0f      	ldr	r7, [pc, #60]	; (d3e4 <gen_prov_ack_send+0x84>)
		link.tx.pending_ack = xact_id;
    d3a6:	f886 5021 	strb.w	r5, [r6, #33]	; 0x21
	net_buf_simple_add_be32(&buf->b, val);
    d3aa:	6831      	ldr	r1, [r6, #0]
    d3ac:	f104 0008 	add.w	r0, r4, #8
    d3b0:	f010 fc4c 	bl	1dc4c <net_buf_simple_add_be32>
	net_buf_add_u8(buf, xact_id);
    d3b4:	4629      	mov	r1, r5
    d3b6:	4620      	mov	r0, r4
    d3b8:	f00f f8bc 	bl	1c534 <net_buf_add_u8.isra.0>
	net_buf_add_u8(buf, GPC_ACK);
    d3bc:	4620      	mov	r0, r4
    d3be:	2101      	movs	r1, #1
    d3c0:	f00f f8b8 	bl	1c534 <net_buf_add_u8.isra.0>
	bt_mesh_adv_send(buf, complete, NULL);
    d3c4:	4620      	mov	r0, r4
    d3c6:	4639      	mov	r1, r7
    d3c8:	2200      	movs	r2, #0
    d3ca:	f7fc f9ff 	bl	97cc <bt_mesh_adv_send>
	net_buf_unref(buf);
    d3ce:	4620      	mov	r0, r4
}
    d3d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	net_buf_unref(buf);
    d3d4:	f008 b9e8 	b.w	157a8 <net_buf_unref>
		complete = NULL;
    d3d8:	2700      	movs	r7, #0
    d3da:	e7e6      	b.n	d3aa <gen_prov_ack_send+0x4a>
    d3dc:	20000150 	.word	0x20000150
    d3e0:	20000154 	.word	0x20000154
    d3e4:	0001f6e0 	.word	0x0001f6e0

0000d3e8 <prov_msg_recv>:
{
    d3e8:	b510      	push	{r4, lr}
	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
    d3ea:	4c1d      	ldr	r4, [pc, #116]	; (d460 <prov_msg_recv+0x78>)
    d3ec:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
    d3f0:	2300      	movs	r3, #0
    d3f2:	f104 0068 	add.w	r0, r4, #104	; 0x68
    d3f6:	f00a fd37 	bl	17e68 <k_work_reschedule>
	if (!bt_mesh_fcs_check(link.rx.buf, link.rx.fcs)) {
    d3fa:	7ce1      	ldrb	r1, [r4, #19]
    d3fc:	6960      	ldr	r0, [r4, #20]
    d3fe:	f7ff f99b 	bl	c738 <bt_mesh_fcs_check>
    d402:	b958      	cbnz	r0, d41c <prov_msg_recv+0x34>
    d404:	4917      	ldr	r1, [pc, #92]	; (d464 <prov_msg_recv+0x7c>)
    d406:	4b18      	ldr	r3, [pc, #96]	; (d468 <prov_msg_recv+0x80>)
		BT_ERR("Incorrect FCS");
    d408:	4818      	ldr	r0, [pc, #96]	; (d46c <prov_msg_recv+0x84>)
    d40a:	1ac9      	subs	r1, r1, r3
    d40c:	08c9      	lsrs	r1, r1, #3
    d40e:	0189      	lsls	r1, r1, #6
}
    d410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Incorrect FCS");
    d414:	f041 0101 	orr.w	r1, r1, #1
    d418:	f00c b813 	b.w	19442 <log_0>
	gen_prov_ack_send(link.rx.id);
    d41c:	7c20      	ldrb	r0, [r4, #16]
    d41e:	f7ff ff9f 	bl	d360 <gen_prov_ack_send>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    d422:	f7ff fe31 	bl	d088 <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, ADV_LINK_INVALID)) {
    d426:	0703      	lsls	r3, r0, #28
    d428:	d511      	bpl.n	d44e <prov_msg_recv+0x66>
    d42a:	4b0f      	ldr	r3, [pc, #60]	; (d468 <prov_msg_recv+0x80>)
    d42c:	4a0d      	ldr	r2, [pc, #52]	; (d464 <prov_msg_recv+0x7c>)
		BT_WARN("Unexpected msg 0x%02x on invalidated link",
    d42e:	4810      	ldr	r0, [pc, #64]	; (d470 <prov_msg_recv+0x88>)
    d430:	1ad2      	subs	r2, r2, r3
    d432:	6963      	ldr	r3, [r4, #20]
    d434:	08d2      	lsrs	r2, r2, #3
    d436:	681b      	ldr	r3, [r3, #0]
    d438:	0192      	lsls	r2, r2, #6
    d43a:	7819      	ldrb	r1, [r3, #0]
    d43c:	f042 0202 	orr.w	r2, r2, #2
    d440:	f00c f80c 	bl	1945c <log_1>
}
    d444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		prov_failed(PROV_ERR_UNEXP_PDU);
    d448:	2003      	movs	r0, #3
    d44a:	f7ff bd93 	b.w	cf74 <prov_failed>
	link.cb->recv(&pb_adv, link.cb_data, link.rx.buf);
    d44e:	68a3      	ldr	r3, [r4, #8]
    d450:	6962      	ldr	r2, [r4, #20]
    d452:	68e1      	ldr	r1, [r4, #12]
    d454:	68db      	ldr	r3, [r3, #12]
    d456:	4807      	ldr	r0, [pc, #28]	; (d474 <prov_msg_recv+0x8c>)
}
    d458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	link.cb->recv(&pb_adv, link.cb_data, link.rx.buf);
    d45c:	4718      	bx	r3
    d45e:	bf00      	nop
    d460:	20000150 	.word	0x20000150
    d464:	0001f0bc 	.word	0x0001f0bc
    d468:	0001ef2c 	.word	0x0001ef2c
    d46c:	0002220f 	.word	0x0002220f
    d470:	0002221d 	.word	0x0002221d
    d474:	0001f708 	.word	0x0001f708

0000d478 <gen_prov_cont>:
{
    d478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!link.rx.seg && link.rx.id == rx->xact_id) {
    d47c:	4c44      	ldr	r4, [pc, #272]	; (d590 <gen_prov_cont+0x118>)
	uint8_t seg = CONT_SEG_INDEX(rx->gpc);
    d47e:	7947      	ldrb	r7, [r0, #5]
	if (!link.rx.seg && link.rx.id == rx->xact_id) {
    d480:	f894 c011 	ldrb.w	ip, [r4, #17]
    d484:	7c22      	ldrb	r2, [r4, #16]
{
    d486:	460d      	mov	r5, r1
    d488:	4606      	mov	r6, r0
	if (!link.rx.seg && link.rx.id == rx->xact_id) {
    d48a:	7901      	ldrb	r1, [r0, #4]
    d48c:	f1bc 0f00 	cmp.w	ip, #0
    d490:	d134      	bne.n	d4fc <gen_prov_cont+0x84>
    d492:	4291      	cmp	r1, r2
    d494:	d108      	bne.n	d4a8 <gen_prov_cont+0x30>
    d496:	f7ff fdf7 	bl	d088 <atomic_get.constprop.0>
		if (!ack_pending()) {
    d49a:	06c0      	lsls	r0, r0, #27
    d49c:	d475      	bmi.n	d58a <gen_prov_cont+0x112>
			gen_prov_ack_send(rx->xact_id);
    d49e:	7930      	ldrb	r0, [r6, #4]
}
    d4a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			gen_prov_ack_send(rx->xact_id);
    d4a4:	f7ff bf5c 	b.w	d360 <gen_prov_ack_send>
	return (((id + 1) & XACT_ID_MAX) | (id & (XACT_ID_MAX+1)));
    d4a8:	b253      	sxtb	r3, r2
    d4aa:	1c58      	adds	r0, r3, #1
    d4ac:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    d4b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
	if (!link.rx.seg &&
    d4b4:	4303      	orrs	r3, r0
    d4b6:	4299      	cmp	r1, r3
    d4b8:	d122      	bne.n	d500 <gen_prov_cont+0x88>
		net_buf_simple_reset(link.rx.buf);
    d4ba:	6963      	ldr	r3, [r4, #20]
		link.rx.id = rx->xact_id;
    d4bc:	7421      	strb	r1, [r4, #16]
	buf->data = buf->__buf;
    d4be:	689a      	ldr	r2, [r3, #8]
	buf->len  = 0U;
    d4c0:	f8a3 c004 	strh.w	ip, [r3, #4]
	buf->data = buf->__buf;
    d4c4:	601a      	str	r2, [r3, #0]
		link.rx.seg = SEG_NVAL;
    d4c6:	23ff      	movs	r3, #255	; 0xff
    d4c8:	7463      	strb	r3, [r4, #17]
		link.rx.last_seg = SEG_NVAL;
    d4ca:	74a3      	strb	r3, [r4, #18]
		prov_clear_tx();
    d4cc:	f7ff fd98 	bl	d000 <prov_clear_tx>
	if (seg > link.rx.last_seg) {
    d4d0:	7ca3      	ldrb	r3, [r4, #18]
    d4d2:	ebb3 0f97 	cmp.w	r3, r7, lsr #2
	uint8_t seg = CONT_SEG_INDEX(rx->gpc);
    d4d6:	ea4f 0697 	mov.w	r6, r7, lsr #2
	if (seg > link.rx.last_seg) {
    d4da:	d21d      	bcs.n	d518 <gen_prov_cont+0xa0>
    d4dc:	4a2d      	ldr	r2, [pc, #180]	; (d594 <gen_prov_cont+0x11c>)
    d4de:	4b2e      	ldr	r3, [pc, #184]	; (d598 <gen_prov_cont+0x120>)
		BT_ERR("Invalid segment index %u", seg);
    d4e0:	482e      	ldr	r0, [pc, #184]	; (d59c <gen_prov_cont+0x124>)
    d4e2:	1ad2      	subs	r2, r2, r3
    d4e4:	08d2      	lsrs	r2, r2, #3
    d4e6:	0192      	lsls	r2, r2, #6
    d4e8:	f042 0201 	orr.w	r2, r2, #1
    d4ec:	4631      	mov	r1, r6
    d4ee:	f00b ffb5 	bl	1945c <log_1>
}
    d4f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			prov_failed(PROV_ERR_NVAL_FMT);
    d4f6:	2002      	movs	r0, #2
    d4f8:	f7ff bd3c 	b.w	cf74 <prov_failed>
	} else if (rx->xact_id != link.rx.id) {
    d4fc:	4291      	cmp	r1, r2
    d4fe:	d0e7      	beq.n	d4d0 <gen_prov_cont+0x58>
    d500:	4825      	ldr	r0, [pc, #148]	; (d598 <gen_prov_cont+0x120>)
    d502:	4b24      	ldr	r3, [pc, #144]	; (d594 <gen_prov_cont+0x11c>)
    d504:	1a1b      	subs	r3, r3, r0
    d506:	08db      	lsrs	r3, r3, #3
		BT_WARN("Data for unknown transaction (0x%x != 0x%x)",
    d508:	019b      	lsls	r3, r3, #6
}
    d50a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("Data for unknown transaction (0x%x != 0x%x)",
    d50e:	4824      	ldr	r0, [pc, #144]	; (d5a0 <gen_prov_cont+0x128>)
    d510:	f043 0302 	orr.w	r3, r3, #2
    d514:	f00b bfb6 	b.w	19484 <log_2>
	if (!(link.rx.seg & BIT(seg))) {
    d518:	7c63      	ldrb	r3, [r4, #17]
    d51a:	40f3      	lsrs	r3, r6
    d51c:	07d9      	lsls	r1, r3, #31
    d51e:	d534      	bpl.n	d58a <gen_prov_cont+0x112>
	memcpy(XACT_SEG_DATA(seg), buf->data, buf->len);
    d520:	6962      	ldr	r2, [r4, #20]
    d522:	6829      	ldr	r1, [r5, #0]
    d524:	2017      	movs	r0, #23
    d526:	1e73      	subs	r3, r6, #1
    d528:	4343      	muls	r3, r0
    d52a:	6810      	ldr	r0, [r2, #0]
    d52c:	88aa      	ldrh	r2, [r5, #4]
    d52e:	3314      	adds	r3, #20
    d530:	4418      	add	r0, r3
    d532:	f00c fea4 	bl	1a27e <memcpy>
	XACT_SEG_RECV(seg);
    d536:	2001      	movs	r0, #1
    d538:	fa00 f306 	lsl.w	r3, r0, r6
    d53c:	7c60      	ldrb	r0, [r4, #17]
    d53e:	ea20 0003 	bic.w	r0, r0, r3
	if (seg == link.rx.last_seg && !(link.rx.seg & BIT(0))) {
    d542:	7ca3      	ldrb	r3, [r4, #18]
	XACT_SEG_RECV(seg);
    d544:	7460      	strb	r0, [r4, #17]
	if (seg == link.rx.last_seg && !(link.rx.seg & BIT(0))) {
    d546:	42b3      	cmp	r3, r6
    d548:	d11a      	bne.n	d580 <gen_prov_cont+0x108>
    d54a:	07c2      	lsls	r2, r0, #31
    d54c:	d41d      	bmi.n	d58a <gen_prov_cont+0x112>
		expect_len = (link.rx.buf->len - 20U -
    d54e:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
    d552:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    d556:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    d55a:	6962      	ldr	r2, [r4, #20]
    d55c:	8892      	ldrh	r2, [r2, #4]
    d55e:	3303      	adds	r3, #3
    d560:	4413      	add	r3, r2
		if (expect_len != buf->len) {
    d562:	88aa      	ldrh	r2, [r5, #4]
		expect_len = (link.rx.buf->len - 20U -
    d564:	b2d9      	uxtb	r1, r3
		if (expect_len != buf->len) {
    d566:	4291      	cmp	r1, r2
    d568:	d00a      	beq.n	d580 <gen_prov_cont+0x108>
    d56a:	480b      	ldr	r0, [pc, #44]	; (d598 <gen_prov_cont+0x120>)
    d56c:	4b09      	ldr	r3, [pc, #36]	; (d594 <gen_prov_cont+0x11c>)
    d56e:	1a1b      	subs	r3, r3, r0
    d570:	08db      	lsrs	r3, r3, #3
			BT_ERR("Incorrect last seg len: %u != %u", expect_len,
    d572:	019b      	lsls	r3, r3, #6
    d574:	480b      	ldr	r0, [pc, #44]	; (d5a4 <gen_prov_cont+0x12c>)
    d576:	f043 0301 	orr.w	r3, r3, #1
    d57a:	f00b ff83 	bl	19484 <log_2>
    d57e:	e7b8      	b.n	d4f2 <gen_prov_cont+0x7a>
	if (!link.rx.seg) {
    d580:	b918      	cbnz	r0, d58a <gen_prov_cont+0x112>
}
    d582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		prov_msg_recv();
    d586:	f7ff bf2f 	b.w	d3e8 <prov_msg_recv>
}
    d58a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d58e:	bf00      	nop
    d590:	20000150 	.word	0x20000150
    d594:	0001f0bc 	.word	0x0001f0bc
    d598:	0001ef2c 	.word	0x0001ef2c
    d59c:	00022273 	.word	0x00022273
    d5a0:	00022247 	.word	0x00022247
    d5a4:	0002228c 	.word	0x0002228c

0000d5a8 <gen_prov_start>:
{
    d5a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (rx->xact_id == link.rx.id) {
    d5ac:	4c4e      	ldr	r4, [pc, #312]	; (d6e8 <gen_prov_start+0x140>)
{
    d5ae:	460d      	mov	r5, r1
	if (rx->xact_id == link.rx.id) {
    d5b0:	7c23      	ldrb	r3, [r4, #16]
    d5b2:	7901      	ldrb	r1, [r0, #4]
    d5b4:	4299      	cmp	r1, r3
{
    d5b6:	4606      	mov	r6, r0
	if (rx->xact_id == link.rx.id) {
    d5b8:	d10e      	bne.n	d5d8 <gen_prov_start+0x30>
		if (!link.rx.seg) {
    d5ba:	7c63      	ldrb	r3, [r4, #17]
    d5bc:	b943      	cbnz	r3, d5d0 <gen_prov_start+0x28>
    d5be:	f7ff fd63 	bl	d088 <atomic_get.constprop.0>
			if (!ack_pending()) {
    d5c2:	06c1      	lsls	r1, r0, #27
    d5c4:	d406      	bmi.n	d5d4 <gen_prov_start+0x2c>
				gen_prov_ack_send(rx->xact_id);
    d5c6:	7930      	ldrb	r0, [r6, #4]
}
    d5c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				gen_prov_ack_send(rx->xact_id);
    d5cc:	f7ff bec8 	b.w	d360 <gen_prov_ack_send>
		if (!(link.rx.seg & BIT(0))) {
    d5d0:	07da      	lsls	r2, r3, #31
    d5d2:	d416      	bmi.n	d602 <gen_prov_start+0x5a>
}
    d5d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (((id + 1) & XACT_ID_MAX) | (id & (XACT_ID_MAX+1)));
    d5d8:	b25b      	sxtb	r3, r3
    d5da:	1c5a      	adds	r2, r3, #1
    d5dc:	f002 007f 	and.w	r0, r2, #127	; 0x7f
    d5e0:	f003 0280 	and.w	r2, r3, #128	; 0x80
    d5e4:	4302      	orrs	r2, r0
	} else if (rx->xact_id != next_transaction_id(link.rx.id)) {
    d5e6:	4291      	cmp	r1, r2
    d5e8:	d00b      	beq.n	d602 <gen_prov_start+0x5a>
    d5ea:	4840      	ldr	r0, [pc, #256]	; (d6ec <gen_prov_start+0x144>)
    d5ec:	4b40      	ldr	r3, [pc, #256]	; (d6f0 <gen_prov_start+0x148>)
    d5ee:	1a1b      	subs	r3, r3, r0
    d5f0:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unexpected xact 0x%x, expected 0x%x", rx->xact_id,
    d5f2:	019b      	lsls	r3, r3, #6
}
    d5f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("Unexpected xact 0x%x, expected 0x%x", rx->xact_id,
    d5f8:	483e      	ldr	r0, [pc, #248]	; (d6f4 <gen_prov_start+0x14c>)
    d5fa:	f043 0302 	orr.w	r3, r3, #2
    d5fe:	f00b bf41 	b.w	19484 <log_2>
	net_buf_simple_reset(link.rx.buf);
    d602:	6967      	ldr	r7, [r4, #20]
	buf->len  = 0U;
    d604:	2300      	movs	r3, #0
    d606:	80bb      	strh	r3, [r7, #4]
	buf->data = buf->__buf;
    d608:	68bb      	ldr	r3, [r7, #8]
    d60a:	603b      	str	r3, [r7, #0]
	link.rx.buf->len = net_buf_simple_pull_be16(buf);
    d60c:	4628      	mov	r0, r5
    d60e:	f010 fb75 	bl	1dcfc <net_buf_simple_pull_be16>
    d612:	80b8      	strh	r0, [r7, #4]
	link.rx.id = rx->xact_id;
    d614:	7933      	ldrb	r3, [r6, #4]
    d616:	7423      	strb	r3, [r4, #16]
	link.rx.fcs = net_buf_simple_pull_u8(buf);
    d618:	4628      	mov	r0, r5
    d61a:	f010 fb5f 	bl	1dcdc <net_buf_simple_pull_u8>
	if (link.rx.buf->len < 1) {
    d61e:	6963      	ldr	r3, [r4, #20]
	link.rx.fcs = net_buf_simple_pull_u8(buf);
    d620:	74e0      	strb	r0, [r4, #19]
	if (link.rx.buf->len < 1) {
    d622:	8899      	ldrh	r1, [r3, #4]
    d624:	b951      	cbnz	r1, d63c <gen_prov_start+0x94>
    d626:	4932      	ldr	r1, [pc, #200]	; (d6f0 <gen_prov_start+0x148>)
    d628:	4b30      	ldr	r3, [pc, #192]	; (d6ec <gen_prov_start+0x144>)
		BT_ERR("Ignoring zero-length provisioning PDU");
    d62a:	4833      	ldr	r0, [pc, #204]	; (d6f8 <gen_prov_start+0x150>)
    d62c:	1ac9      	subs	r1, r1, r3
    d62e:	08c9      	lsrs	r1, r1, #3
    d630:	0189      	lsls	r1, r1, #6
    d632:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Too small total length for multi-segment PDU");
    d636:	f00b ff04 	bl	19442 <log_0>
		prov_failed(PROV_ERR_NVAL_FMT);
    d63a:	e00c      	b.n	d656 <gen_prov_start+0xae>
	if (link.rx.buf->len > link.rx.buf->size) {
    d63c:	88db      	ldrh	r3, [r3, #6]
    d63e:	428b      	cmp	r3, r1
    d640:	d20e      	bcs.n	d660 <gen_prov_start+0xb8>
    d642:	4a2b      	ldr	r2, [pc, #172]	; (d6f0 <gen_prov_start+0x148>)
    d644:	4b29      	ldr	r3, [pc, #164]	; (d6ec <gen_prov_start+0x144>)
		BT_ERR("Too large provisioning PDU (%u bytes)",
    d646:	482d      	ldr	r0, [pc, #180]	; (d6fc <gen_prov_start+0x154>)
    d648:	1ad2      	subs	r2, r2, r3
    d64a:	08d2      	lsrs	r2, r2, #3
    d64c:	0192      	lsls	r2, r2, #6
    d64e:	f042 0201 	orr.w	r2, r2, #1
    d652:	f00b ff03 	bl	1945c <log_1>
}
    d656:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		prov_failed(PROV_ERR_NVAL_FMT);
    d65a:	2002      	movs	r0, #2
    d65c:	f7ff bc8a 	b.w	cf74 <prov_failed>
	if (START_LAST_SEG(rx->gpc) > 0 && link.rx.buf->len <= 20U) {
    d660:	7973      	ldrb	r3, [r6, #5]
    d662:	089b      	lsrs	r3, r3, #2
    d664:	d00a      	beq.n	d67c <gen_prov_start+0xd4>
    d666:	2914      	cmp	r1, #20
    d668:	d808      	bhi.n	d67c <gen_prov_start+0xd4>
    d66a:	4921      	ldr	r1, [pc, #132]	; (d6f0 <gen_prov_start+0x148>)
    d66c:	4b1f      	ldr	r3, [pc, #124]	; (d6ec <gen_prov_start+0x144>)
		BT_ERR("Too small total length for multi-segment PDU");
    d66e:	4824      	ldr	r0, [pc, #144]	; (d700 <gen_prov_start+0x158>)
    d670:	1ac9      	subs	r1, r1, r3
    d672:	08c9      	lsrs	r1, r1, #3
    d674:	0189      	lsls	r1, r1, #6
    d676:	f041 0101 	orr.w	r1, r1, #1
    d67a:	e7dc      	b.n	d636 <gen_prov_start+0x8e>
	prov_clear_tx();
    d67c:	f7ff fcc0 	bl	d000 <prov_clear_tx>
	link.rx.last_seg = START_LAST_SEG(rx->gpc);
    d680:	7972      	ldrb	r2, [r6, #5]
	if ((link.rx.seg & BIT(0)) &&
    d682:	7c61      	ldrb	r1, [r4, #17]
	link.rx.last_seg = START_LAST_SEG(rx->gpc);
    d684:	0892      	lsrs	r2, r2, #2
	if ((link.rx.seg & BIT(0)) &&
    d686:	07cb      	lsls	r3, r1, #31
	link.rx.last_seg = START_LAST_SEG(rx->gpc);
    d688:	74a2      	strb	r2, [r4, #18]
	if ((link.rx.seg & BIT(0)) &&
    d68a:	d513      	bpl.n	d6b4 <gen_prov_start+0x10c>
	    (find_msb_set((~link.rx.seg) & SEG_NVAL) - 1 > link.rx.last_seg)) {
    d68c:	43cb      	mvns	r3, r1
	if (op == 0) {
    d68e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    d692:	d005      	beq.n	d6a0 <gen_prov_start+0xf8>
	return 32 - __builtin_clz(op);
    d694:	fab3 f383 	clz	r3, r3
    d698:	f1c3 031f 	rsb	r3, r3, #31
	if ((link.rx.seg & BIT(0)) &&
    d69c:	4293      	cmp	r3, r2
    d69e:	d90c      	bls.n	d6ba <gen_prov_start+0x112>
    d6a0:	4a13      	ldr	r2, [pc, #76]	; (d6f0 <gen_prov_start+0x148>)
    d6a2:	4b12      	ldr	r3, [pc, #72]	; (d6ec <gen_prov_start+0x144>)
		BT_ERR("Invalid segment index %u", seg);
    d6a4:	4817      	ldr	r0, [pc, #92]	; (d704 <gen_prov_start+0x15c>)
    d6a6:	1ad2      	subs	r2, r2, r3
    d6a8:	08d2      	lsrs	r2, r2, #3
    d6aa:	0192      	lsls	r2, r2, #6
    d6ac:	f042 0201 	orr.w	r2, r2, #1
    d6b0:	21ff      	movs	r1, #255	; 0xff
    d6b2:	e7ce      	b.n	d652 <gen_prov_start+0xaa>
	uint8_t seg = SEG_NVAL;
    d6b4:	2900      	cmp	r1, #0
    d6b6:	bf08      	it	eq
    d6b8:	21ff      	moveq	r1, #255	; 0xff
	link.rx.seg = seg & ((1 << (START_LAST_SEG(rx->gpc) + 1)) - 1);
    d6ba:	3201      	adds	r2, #1
    d6bc:	2301      	movs	r3, #1
    d6be:	4093      	lsls	r3, r2
    d6c0:	3b01      	subs	r3, #1
    d6c2:	400b      	ands	r3, r1
    d6c4:	7463      	strb	r3, [r4, #17]
	memcpy(link.rx.buf->data, buf->data, buf->len);
    d6c6:	6963      	ldr	r3, [r4, #20]
    d6c8:	88aa      	ldrh	r2, [r5, #4]
    d6ca:	6818      	ldr	r0, [r3, #0]
    d6cc:	6829      	ldr	r1, [r5, #0]
    d6ce:	f00c fdd6 	bl	1a27e <memcpy>
	XACT_SEG_RECV(0);
    d6d2:	7c63      	ldrb	r3, [r4, #17]
    d6d4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    d6d8:	7463      	strb	r3, [r4, #17]
	if (!link.rx.seg) {
    d6da:	2b00      	cmp	r3, #0
    d6dc:	f47f af7a 	bne.w	d5d4 <gen_prov_start+0x2c>
}
    d6e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		prov_msg_recv();
    d6e4:	f7ff be80 	b.w	d3e8 <prov_msg_recv>
    d6e8:	20000150 	.word	0x20000150
    d6ec:	0001ef2c 	.word	0x0001ef2c
    d6f0:	0001f0bc 	.word	0x0001f0bc
    d6f4:	000222ad 	.word	0x000222ad
    d6f8:	000222d1 	.word	0x000222d1
    d6fc:	000222f7 	.word	0x000222f7
    d700:	0002231d 	.word	0x0002231d
    d704:	00022273 	.word	0x00022273

0000d708 <prov_send_adv>:
{
    d708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
    d70c:	4d58      	ldr	r5, [pc, #352]	; (d870 <prov_send_adv+0x168>)
{
    d70e:	460f      	mov	r7, r1
    d710:	4604      	mov	r4, r0
    d712:	4616      	mov	r6, r2
	prov_clear_tx();
    d714:	f7ff fc74 	bl	d000 <prov_clear_tx>
	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
    d718:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
    d71c:	2300      	movs	r3, #0
    d71e:	f105 0068 	add.w	r0, r5, #104	; 0x68
    d722:	f00a fba1 	bl	17e68 <k_work_reschedule>
	start = adv_buf_create(RETRANSMITS_RELIABLE);
    d726:	2000      	movs	r0, #0
    d728:	f7ff fc90 	bl	d04c <adv_buf_create>
	if (!start) {
    d72c:	4681      	mov	r9, r0
    d72e:	2800      	cmp	r0, #0
    d730:	d076      	beq.n	d820 <prov_send_adv+0x118>
	return (((id + 1) & XACT_ID_MAX) | (id & (XACT_ID_MAX+1)));
    d732:	f995 2020 	ldrsb.w	r2, [r5, #32]
	net_buf_simple_add_be32(&buf->b, val);
    d736:	6829      	ldr	r1, [r5, #0]
    d738:	1c53      	adds	r3, r2, #1
    d73a:	f100 0808 	add.w	r8, r0, #8
    d73e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    d742:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    d746:	4313      	orrs	r3, r2
    d748:	4640      	mov	r0, r8
	link.tx.id = next_transaction_id(link.tx.id);
    d74a:	f885 3020 	strb.w	r3, [r5, #32]
    d74e:	f010 fa7d 	bl	1dc4c <net_buf_simple_add_be32>
	net_buf_add_u8(start, link.tx.id);
    d752:	f895 1020 	ldrb.w	r1, [r5, #32]
    d756:	4648      	mov	r0, r9
    d758:	f00e feec 	bl	1c534 <net_buf_add_u8.isra.0>
	if (len <= START_PAYLOAD_MAX) {
    d75c:	7922      	ldrb	r2, [r4, #4]
	net_buf_add_u8(start, GPC_START(last_seg(msg->len)));
    d75e:	88a3      	ldrh	r3, [r4, #4]
	if (len <= START_PAYLOAD_MAX) {
    d760:	2a14      	cmp	r2, #20
	len -= START_PAYLOAD_MAX;
    d762:	bf81      	itttt	hi
    d764:	3b14      	subhi	r3, #20
	return 1 + (len / CONT_PAYLOAD_MAX);
    d766:	b2db      	uxtbhi	r3, r3
    d768:	2117      	movhi	r1, #23
    d76a:	fbb3 f3f1 	udivhi	r3, r3, r1
    d76e:	bf86      	itte	hi
    d770:	3301      	addhi	r3, #1
    d772:	b2db      	uxtbhi	r3, r3
		return 0;
    d774:	2300      	movls	r3, #0
	net_buf_add_u8(start, GPC_START(last_seg(msg->len)));
    d776:	009b      	lsls	r3, r3, #2
    d778:	f003 01fc 	and.w	r1, r3, #252	; 0xfc
    d77c:	4648      	mov	r0, r9
    d77e:	f00e fed9 	bl	1c534 <net_buf_add_u8.isra.0>
	net_buf_simple_add_be16(&buf->b, val);
    d782:	88a1      	ldrh	r1, [r4, #4]
    d784:	4640      	mov	r0, r8
    d786:	f010 fa57 	bl	1dc38 <net_buf_simple_add_be16>
	net_buf_add_u8(start, bt_mesh_fcs_calc(msg->data, msg->len));
    d78a:	7921      	ldrb	r1, [r4, #4]
    d78c:	6820      	ldr	r0, [r4, #0]
    d78e:	f7fe ffc3 	bl	c718 <bt_mesh_fcs_calc>
    d792:	4601      	mov	r1, r0
    d794:	4648      	mov	r0, r9
    d796:	f00e fecd 	bl	1c534 <net_buf_add_u8.isra.0>
	link.tx.buf[0] = start;
    d79a:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
	link.tx.cb_data = cb_data;
    d79e:	e9c5 760c 	strd	r7, r6, [r5, #48]	; 0x30
	return z_impl_k_uptime_ticks();
    d7a2:	f011 f90b 	bl	1e9bc <z_impl_k_uptime_ticks>
	seg_len = MIN(msg->len, START_PAYLOAD_MAX);
    d7a6:	88a6      	ldrh	r6, [r4, #4]
    d7a8:	f8df 90c8 	ldr.w	r9, [pc, #200]	; d874 <prov_send_adv+0x16c>
    d7ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d7b0:	fba0 0302 	umull	r0, r3, r0, r2
    d7b4:	fb02 3101 	mla	r1, r2, r1, r3
	net_buf_add_mem(start, msg->data, seg_len);
    d7b8:	2e14      	cmp	r6, #20
    d7ba:	ea4f 30d0 	mov.w	r0, r0, lsr #15
    d7be:	bf28      	it	cs
    d7c0:	2614      	movcs	r6, #20
    d7c2:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    d7c6:	0bc9      	lsrs	r1, r1, #15
	link.tx.start = k_uptime_get();
    d7c8:	e9c5 0106 	strd	r0, r1, [r5, #24]
	return net_buf_simple_add_mem(&buf->b, mem, len);
    d7cc:	4632      	mov	r2, r6
    d7ce:	6821      	ldr	r1, [r4, #0]
    d7d0:	4640      	mov	r0, r8
    d7d2:	f010 fa20 	bl	1dc16 <net_buf_simple_add_mem>
	net_buf_simple_pull(msg, seg_len);
    d7d6:	4631      	mov	r1, r6
    d7d8:	4620      	mov	r0, r4
    d7da:	f010 fa6f 	bl	1dcbc <net_buf_simple_pull>
	for (seg_id = 1U; msg->len > 0; seg_id++) {
    d7de:	2700      	movs	r7, #0
    d7e0:	88a6      	ldrh	r6, [r4, #4]
    d7e2:	b91e      	cbnz	r6, d7ec <prov_send_adv+0xe4>
	send_reliable();
    d7e4:	f7ff fbd8 	bl	cf98 <send_reliable>
	return 0;
    d7e8:	4630      	mov	r0, r6
    d7ea:	e00f      	b.n	d80c <prov_send_adv+0x104>
		if (seg_id >= ARRAY_SIZE(link.tx.buf)) {
    d7ec:	2f08      	cmp	r7, #8
    d7ee:	d10f      	bne.n	d810 <prov_send_adv+0x108>
    d7f0:	4b21      	ldr	r3, [pc, #132]	; (d878 <prov_send_adv+0x170>)
    d7f2:	4922      	ldr	r1, [pc, #136]	; (d87c <prov_send_adv+0x174>)
			BT_ERR("Too big message");
    d7f4:	4822      	ldr	r0, [pc, #136]	; (d880 <prov_send_adv+0x178>)
    d7f6:	1ac9      	subs	r1, r1, r3
    d7f8:	08c9      	lsrs	r1, r1, #3
    d7fa:	0189      	lsls	r1, r1, #6
    d7fc:	f041 0101 	orr.w	r1, r1, #1
    d800:	f00b fe1f 	bl	19442 <log_0>
			free_segments();
    d804:	f7ff fbe6 	bl	cfd4 <free_segments>
			return -E2BIG;
    d808:	f06f 0006 	mvn.w	r0, #6
}
    d80c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf = adv_buf_create(RETRANSMITS_RELIABLE);
    d810:	2000      	movs	r0, #0
    d812:	f7ff fc1b 	bl	d04c <adv_buf_create>
		if (!buf) {
    d816:	3704      	adds	r7, #4
    d818:	4606      	mov	r6, r0
    d81a:	b920      	cbnz	r0, d826 <prov_send_adv+0x11e>
			free_segments();
    d81c:	f7ff fbda 	bl	cfd4 <free_segments>
		return -ENOBUFS;
    d820:	f06f 0068 	mvn.w	r0, #104	; 0x68
    d824:	e7f2      	b.n	d80c <prov_send_adv+0x104>
		seg_len = MIN(msg->len, CONT_PAYLOAD_MAX);
    d826:	f8b4 8004 	ldrh.w	r8, [r4, #4]
		link.tx.buf[seg_id] = buf;
    d82a:	f849 0b04 	str.w	r0, [r9], #4
	net_buf_simple_add_be32(&buf->b, val);
    d82e:	f100 0a08 	add.w	sl, r0, #8
		seg_len = MIN(msg->len, CONT_PAYLOAD_MAX);
    d832:	f1b8 0f17 	cmp.w	r8, #23
    d836:	6829      	ldr	r1, [r5, #0]
    d838:	4650      	mov	r0, sl
    d83a:	bf28      	it	cs
    d83c:	f04f 0817 	movcs.w	r8, #23
    d840:	f010 fa04 	bl	1dc4c <net_buf_simple_add_be32>
		net_buf_add_u8(buf, link.tx.id);
    d844:	f895 1020 	ldrb.w	r1, [r5, #32]
    d848:	4630      	mov	r0, r6
    d84a:	f00e fe73 	bl	1c534 <net_buf_add_u8.isra.0>
		net_buf_add_u8(buf, GPC_CONT(seg_id));
    d84e:	f047 0102 	orr.w	r1, r7, #2
    d852:	4630      	mov	r0, r6
    d854:	b2c9      	uxtb	r1, r1
    d856:	f00e fe6d 	bl	1c534 <net_buf_add_u8.isra.0>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    d85a:	6821      	ldr	r1, [r4, #0]
    d85c:	4642      	mov	r2, r8
    d85e:	4650      	mov	r0, sl
    d860:	f010 f9d9 	bl	1dc16 <net_buf_simple_add_mem>
		net_buf_simple_pull(msg, seg_len);
    d864:	4641      	mov	r1, r8
    d866:	4620      	mov	r0, r4
    d868:	f010 fa28 	bl	1dcbc <net_buf_simple_pull>
	for (seg_id = 1U; msg->len > 0; seg_id++) {
    d86c:	e7b8      	b.n	d7e0 <prov_send_adv+0xd8>
    d86e:	bf00      	nop
    d870:	20000150 	.word	0x20000150
    d874:	20000178 	.word	0x20000178
    d878:	0001ef2c 	.word	0x0001ef2c
    d87c:	0001f0bc 	.word	0x0001f0bc
    d880:	0002234a 	.word	0x0002234a

0000d884 <prov_link_open>:
{
    d884:	b570      	push	{r4, r5, r6, lr}
    d886:	4606      	mov	r6, r0
	err = bt_mesh_adv_enable();
    d888:	f7ff faac 	bl	cde4 <bt_mesh_adv_enable>
	if (err) {
    d88c:	4604      	mov	r4, r0
    d88e:	b158      	cbz	r0, d8a8 <prov_link_open+0x24>
    d890:	4928      	ldr	r1, [pc, #160]	; (d934 <prov_link_open+0xb0>)
    d892:	4b29      	ldr	r3, [pc, #164]	; (d938 <prov_link_open+0xb4>)
		BT_ERR("Failed enabling advertiser");
    d894:	4829      	ldr	r0, [pc, #164]	; (d93c <prov_link_open+0xb8>)
    d896:	1ac9      	subs	r1, r1, r3
    d898:	08c9      	lsrs	r1, r1, #3
    d89a:	0189      	lsls	r1, r1, #6
    d89c:	f041 0101 	orr.w	r1, r1, #1
    d8a0:	f00b fdcf 	bl	19442 <log_0>
}
    d8a4:	4620      	mov	r0, r4
    d8a6:	bd70      	pop	{r4, r5, r6, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    d8a8:	4d25      	ldr	r5, [pc, #148]	; (d940 <prov_link_open+0xbc>)
    d8aa:	2101      	movs	r1, #1
    d8ac:	1d28      	adds	r0, r5, #4
    d8ae:	f00e fe32 	bl	1c516 <atomic_or>
	if (atomic_test_and_set_bit(link.flags, ADV_LINK_ACTIVE)) {
    d8b2:	ea10 0401 	ands.w	r4, r0, r1
    d8b6:	d13a      	bne.n	d92e <prov_link_open+0xaa>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    d8b8:	2120      	movs	r1, #32
    d8ba:	1d28      	adds	r0, r5, #4
    d8bc:	f00e fe2b 	bl	1c516 <atomic_or>
	bt_rand(&link.id, sizeof(link.id));
    d8c0:	2104      	movs	r1, #4
    d8c2:	4628      	mov	r0, r5
    d8c4:	f00f facb 	bl	1ce5e <bt_rand>
	link.tx.id = XACT_ID_MAX;
    d8c8:	237f      	movs	r3, #127	; 0x7f
    d8ca:	f885 3020 	strb.w	r3, [r5, #32]
	link.rx.id = XACT_ID_NVAL;
    d8ce:	23ff      	movs	r3, #255	; 0xff
    d8d0:	742b      	strb	r3, [r5, #16]
	link.cb = cb;
    d8d2:	9b04      	ldr	r3, [sp, #16]
    d8d4:	60ab      	str	r3, [r5, #8]
	link.cb_data = cb_data;
    d8d6:	9b05      	ldr	r3, [sp, #20]
    d8d8:	60eb      	str	r3, [r5, #12]
	net_buf_simple_reset(link.rx.buf);
    d8da:	696b      	ldr	r3, [r5, #20]
	buf->data = buf->__buf;
    d8dc:	689a      	ldr	r2, [r3, #8]
    d8de:	601a      	str	r2, [r3, #0]
	buf->len  = 0U;
    d8e0:	809c      	strh	r4, [r3, #4]
	return bearer_ctl_send(ctl_buf_create(LINK_OPEN, uuid, 16, RETRANSMITS_RELIABLE));
    d8e2:	4631      	mov	r1, r6
    d8e4:	4623      	mov	r3, r4
    d8e6:	2210      	movs	r2, #16
    d8e8:	4620      	mov	r0, r4
    d8ea:	f7ff fc69 	bl	d1c0 <ctl_buf_create>
	if (!buf) {
    d8ee:	4606      	mov	r6, r0
    d8f0:	b1d0      	cbz	r0, d928 <prov_link_open+0xa4>
	prov_clear_tx();
    d8f2:	f7ff fb85 	bl	d000 <prov_clear_tx>
	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
    d8f6:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
    d8fa:	2300      	movs	r3, #0
    d8fc:	f105 0068 	add.w	r0, r5, #104	; 0x68
    d900:	f00a fab2 	bl	17e68 <k_work_reschedule>
    d904:	f011 f85a 	bl	1e9bc <z_impl_k_uptime_ticks>
    d908:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d90c:	fba0 3002 	umull	r3, r0, r0, r2
    d910:	fb02 0101 	mla	r1, r2, r1, r0
    d914:	0bdb      	lsrs	r3, r3, #15
    d916:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    d91a:	0bc9      	lsrs	r1, r1, #15
	link.tx.start = k_uptime_get();
    d91c:	e9c5 3106 	strd	r3, r1, [r5, #24]
	link.tx.buf[0] = buf;
    d920:	626e      	str	r6, [r5, #36]	; 0x24
	send_reliable();
    d922:	f7ff fb39 	bl	cf98 <send_reliable>
	return 0;
    d926:	e7bd      	b.n	d8a4 <prov_link_open+0x20>
		return -ENOMEM;
    d928:	f06f 040b 	mvn.w	r4, #11
	return bearer_ctl_send(ctl_buf_create(LINK_OPEN, uuid, 16, RETRANSMITS_RELIABLE));
    d92c:	e7ba      	b.n	d8a4 <prov_link_open+0x20>
		return -EBUSY;
    d92e:	f06f 040f 	mvn.w	r4, #15
    d932:	e7b7      	b.n	d8a4 <prov_link_open+0x20>
    d934:	0001f0bc 	.word	0x0001f0bc
    d938:	0001ef2c 	.word	0x0001ef2c
    d93c:	00021160 	.word	0x00021160
    d940:	20000150 	.word	0x20000150

0000d944 <buf_sent>:
    d944:	4b09      	ldr	r3, [pc, #36]	; (d96c <buf_sent+0x28>)
    d946:	f3bf 8f5b 	dmb	ish
    d94a:	e853 2f00 	ldrex	r2, [r3]
    d94e:	f022 0104 	bic.w	r1, r2, #4
    d952:	e843 1000 	strex	r0, r1, [r3]
    d956:	2800      	cmp	r0, #0
    d958:	d1f7      	bne.n	d94a <buf_sent+0x6>
    d95a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(link.flags, ADV_LINK_CLOSING)) {
    d95e:	0753      	lsls	r3, r2, #29
    d960:	d502      	bpl.n	d968 <buf_sent+0x24>
		close_link(PROV_BEARER_LINK_STATUS_SUCCESS);
    d962:	2000      	movs	r0, #0
    d964:	f7ff bc1a 	b.w	d19c <close_link>
}
    d968:	4770      	bx	lr
    d96a:	bf00      	nop
    d96c:	20000154 	.word	0x20000154

0000d970 <ack_complete>:
    d970:	4b06      	ldr	r3, [pc, #24]	; (d98c <ack_complete+0x1c>)
    d972:	f3bf 8f5b 	dmb	ish
    d976:	e853 2f00 	ldrex	r2, [r3]
    d97a:	f022 0210 	bic.w	r2, r2, #16
    d97e:	e843 2100 	strex	r1, r2, [r3]
    d982:	2900      	cmp	r1, #0
    d984:	d1f7      	bne.n	d976 <ack_complete+0x6>
    d986:	f3bf 8f5b 	dmb	ish
}
    d98a:	4770      	bx	lr
    d98c:	20000154 	.word	0x20000154

0000d990 <bt_mesh_pb_adv_recv>:
{
    d990:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!link.cb) {
    d992:	4d2b      	ldr	r5, [pc, #172]	; (da40 <bt_mesh_pb_adv_recv+0xb0>)
    d994:	68ab      	ldr	r3, [r5, #8]
{
    d996:	4604      	mov	r4, r0
	if (!link.cb) {
    d998:	2b00      	cmp	r3, #0
    d99a:	d039      	beq.n	da10 <bt_mesh_pb_adv_recv+0x80>
	if (buf->len < 6) {
    d99c:	8881      	ldrh	r1, [r0, #4]
    d99e:	2905      	cmp	r1, #5
    d9a0:	d80c      	bhi.n	d9bc <bt_mesh_pb_adv_recv+0x2c>
    d9a2:	4b28      	ldr	r3, [pc, #160]	; (da44 <bt_mesh_pb_adv_recv+0xb4>)
    d9a4:	4a28      	ldr	r2, [pc, #160]	; (da48 <bt_mesh_pb_adv_recv+0xb8>)
		BT_WARN("Too short provisioning packet (len %u)", buf->len);
    d9a6:	4829      	ldr	r0, [pc, #164]	; (da4c <bt_mesh_pb_adv_recv+0xbc>)
    d9a8:	1ad2      	subs	r2, r2, r3
    d9aa:	08d2      	lsrs	r2, r2, #3
    d9ac:	0192      	lsls	r2, r2, #6
    d9ae:	f042 0202 	orr.w	r2, r2, #2
}
    d9b2:	b003      	add	sp, #12
    d9b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		BT_WARN("Too short provisioning packet (len %u)", buf->len);
    d9b8:	f00b bd50 	b.w	1945c <log_1>
	rx.link_id = net_buf_simple_pull_be32(buf);
    d9bc:	f010 f9a8 	bl	1dd10 <net_buf_simple_pull_be32>
    d9c0:	9000      	str	r0, [sp, #0]
	rx.xact_id = net_buf_simple_pull_u8(buf);
    d9c2:	4620      	mov	r0, r4
    d9c4:	f010 f98a 	bl	1dcdc <net_buf_simple_pull_u8>
    d9c8:	f88d 0004 	strb.w	r0, [sp, #4]
	rx.gpc = net_buf_simple_pull_u8(buf);
    d9cc:	4620      	mov	r0, r4
    d9ce:	f010 f985 	bl	1dcdc <net_buf_simple_pull_u8>
    d9d2:	f88d 0005 	strb.w	r0, [sp, #5]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    d9d6:	f7ff fb57 	bl	d088 <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, ADV_LINK_ACTIVE) && link.id != rx.link_id) {
    d9da:	07c3      	lsls	r3, r0, #31
    d9dc:	d503      	bpl.n	d9e6 <bt_mesh_pb_adv_recv+0x56>
    d9de:	682a      	ldr	r2, [r5, #0]
    d9e0:	9b00      	ldr	r3, [sp, #0]
    d9e2:	429a      	cmp	r2, r3
    d9e4:	d114      	bne.n	da10 <bt_mesh_pb_adv_recv+0x80>
	if (buf->len < gen_prov[GPCF(rx->gpc)].min_len) {
    d9e6:	f89d 1005 	ldrb.w	r1, [sp, #5]
    d9ea:	4a19      	ldr	r2, [pc, #100]	; (da50 <bt_mesh_pb_adv_recv+0xc0>)
    d9ec:	88a0      	ldrh	r0, [r4, #4]
    d9ee:	f001 0103 	and.w	r1, r1, #3
    d9f2:	eb02 03c1 	add.w	r3, r2, r1, lsl #3
    d9f6:	795b      	ldrb	r3, [r3, #5]
    d9f8:	4298      	cmp	r0, r3
    d9fa:	d20b      	bcs.n	da14 <bt_mesh_pb_adv_recv+0x84>
    d9fc:	4a12      	ldr	r2, [pc, #72]	; (da48 <bt_mesh_pb_adv_recv+0xb8>)
    d9fe:	4b11      	ldr	r3, [pc, #68]	; (da44 <bt_mesh_pb_adv_recv+0xb4>)
		BT_ERR("Too short GPC message type %u", GPCF(rx->gpc));
    da00:	4814      	ldr	r0, [pc, #80]	; (da54 <bt_mesh_pb_adv_recv+0xc4>)
    da02:	1ad2      	subs	r2, r2, r3
    da04:	08d2      	lsrs	r2, r2, #3
    da06:	0192      	lsls	r2, r2, #6
    da08:	f042 0201 	orr.w	r2, r2, #1
    da0c:	f00b fd26 	bl	1945c <log_1>
}
    da10:	b003      	add	sp, #12
    da12:	bd30      	pop	{r4, r5, pc}
    da14:	f7ff fb38 	bl	d088 <atomic_get.constprop.0>
	if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE) &&
    da18:	f010 0f01 	tst.w	r0, #1
    da1c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    da20:	d106      	bne.n	da30 <bt_mesh_pb_adv_recv+0xa0>
	    gen_prov[GPCF(rx->gpc)].require_link) {
    da22:	f003 0103 	and.w	r1, r3, #3
    da26:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
	if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE) &&
    da2a:	7909      	ldrb	r1, [r1, #4]
    da2c:	2900      	cmp	r1, #0
    da2e:	d1ef      	bne.n	da10 <bt_mesh_pb_adv_recv+0x80>
	gen_prov[GPCF(rx->gpc)].func(rx, buf);
    da30:	f003 0303 	and.w	r3, r3, #3
    da34:	4621      	mov	r1, r4
    da36:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    da3a:	4668      	mov	r0, sp
    da3c:	4798      	blx	r3
    da3e:	e7e7      	b.n	da10 <bt_mesh_pb_adv_recv+0x80>
    da40:	20000150 	.word	0x20000150
    da44:	0001ef2c 	.word	0x0001ef2c
    da48:	0001f0bc 	.word	0x0001f0bc
    da4c:	0002235a 	.word	0x0002235a
    da50:	0001f6e8 	.word	0x0001f6e8
    da54:	00022381 	.word	0x00022381

0000da58 <buf_send_end>:
	return 0;
}

static void buf_send_end(struct bt_conn *conn, void *user_data)
{
	if (link.comp.cb) {
    da58:	4a03      	ldr	r2, [pc, #12]	; (da68 <buf_send_end+0x10>)
    da5a:	68d3      	ldr	r3, [r2, #12]
    da5c:	b113      	cbz	r3, da64 <buf_send_end+0xc>
		link.comp.cb(0, link.comp.cb_data);
    da5e:	6911      	ldr	r1, [r2, #16]
    da60:	2000      	movs	r0, #0
    da62:	4718      	bx	r3
	}
}
    da64:	4770      	bx	lr
    da66:	bf00      	nop
    da68:	20001470 	.word	0x20001470

0000da6c <reset_state>:
{
    da6c:	b510      	push	{r4, lr}
	if (link.conn) {
    da6e:	4c07      	ldr	r4, [pc, #28]	; (da8c <reset_state+0x20>)
    da70:	6820      	ldr	r0, [r4, #0]
    da72:	b118      	cbz	r0, da7c <reset_state+0x10>
		bt_conn_unref(link.conn);
    da74:	f00d f833 	bl	1aade <bt_conn_unref>
		link.conn = NULL;
    da78:	2300      	movs	r3, #0
    da7a:	6023      	str	r3, [r4, #0]
	(void)k_work_cancel_delayable(&link.prot_timer);
    da7c:	4804      	ldr	r0, [pc, #16]	; (da90 <reset_state+0x24>)
    da7e:	f010 fdfd 	bl	1e67c <k_work_cancel_delayable>
	link.rx_buf = bt_mesh_proxy_get_buf();
    da82:	f000 fae1 	bl	e048 <bt_mesh_proxy_get_buf>
    da86:	6160      	str	r0, [r4, #20]
}
    da88:	bd10      	pop	{r4, pc}
    da8a:	bf00      	nop
    da8c:	20001470 	.word	0x20001470
    da90:	20001488 	.word	0x20001488

0000da94 <link_closed>:
{
    da94:	b570      	push	{r4, r5, r6, lr}
	const struct prov_bearer_cb *cb = link.cb;
    da96:	4b06      	ldr	r3, [pc, #24]	; (dab0 <link_closed+0x1c>)
	void *cb_data = link.cb_data;
    da98:	e9d3 6501 	ldrd	r6, r5, [r3, #4]
{
    da9c:	4604      	mov	r4, r0
	reset_state();
    da9e:	f7ff ffe5 	bl	da6c <reset_state>
	cb->link_closed(&pb_gatt, cb_data, status);
    daa2:	6873      	ldr	r3, [r6, #4]
    daa4:	4803      	ldr	r0, [pc, #12]	; (dab4 <link_closed+0x20>)
    daa6:	4622      	mov	r2, r4
    daa8:	4629      	mov	r1, r5
}
    daaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb->link_closed(&pb_gatt, cb_data, status);
    daae:	4718      	bx	r3
    dab0:	20001470 	.word	0x20001470
    dab4:	0001f720 	.word	0x0001f720

0000dab8 <buf_send>:

static int buf_send(struct net_buf_simple *buf, prov_bearer_send_complete_t cb,
		    void *cb_data)
{
    dab8:	b570      	push	{r4, r5, r6, lr}
	if (!link.conn) {
    daba:	4c0c      	ldr	r4, [pc, #48]	; (daec <buf_send+0x34>)
    dabc:	6823      	ldr	r3, [r4, #0]
{
    dabe:	4605      	mov	r5, r0
	if (!link.conn) {
    dac0:	b183      	cbz	r3, dae4 <buf_send+0x2c>
		return -ENOTCONN;
	}

	link.comp.cb = cb;
	link.comp.cb_data = cb_data;
    dac2:	e9c4 1203 	strd	r1, r2, [r4, #12]

	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
    dac6:	2300      	movs	r3, #0
    dac8:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
    dacc:	f104 0018 	add.w	r0, r4, #24
    dad0:	f00a f9ca 	bl	17e68 <k_work_reschedule>

	return bt_mesh_pb_gatt_send(link.conn, buf, buf_send_end, NULL);
    dad4:	6820      	ldr	r0, [r4, #0]
    dad6:	4a06      	ldr	r2, [pc, #24]	; (daf0 <buf_send+0x38>)
    dad8:	4629      	mov	r1, r5
    dada:	2300      	movs	r3, #0
}
    dadc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_mesh_pb_gatt_send(link.conn, buf, buf_send_end, NULL);
    dae0:	f000 bb0e 	b.w	e100 <bt_mesh_pb_gatt_send>
}
    dae4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    dae8:	bd70      	pop	{r4, r5, r6, pc}
    daea:	bf00      	nop
    daec:	20001470 	.word	0x20001470
    daf0:	0000da59 	.word	0x0000da59

0000daf4 <link_accept>:
{
    daf4:	b538      	push	{r3, r4, r5, lr}
    daf6:	460c      	mov	r4, r1
    daf8:	4605      	mov	r5, r0
	(void)bt_mesh_proxy_prov_enable();
    dafa:	f000 faaf 	bl	e05c <bt_mesh_proxy_prov_enable>
	bt_mesh_adv_update();
    dafe:	f7ff f96b 	bl	cdd8 <bt_mesh_adv_update>
	link.cb = cb;
    db02:	4b02      	ldr	r3, [pc, #8]	; (db0c <link_accept+0x18>)
}
    db04:	2000      	movs	r0, #0
	link.cb_data = cb_data;
    db06:	e9c3 5401 	strd	r5, r4, [r3, #4]
}
    db0a:	bd38      	pop	{r3, r4, r5, pc}
    db0c:	20001470 	.word	0x20001470

0000db10 <bt_mesh_pb_gatt_recv>:
{
    db10:	b538      	push	{r3, r4, r5, lr}
	if (link.conn != conn || !link.cb) {
    db12:	4c19      	ldr	r4, [pc, #100]	; (db78 <bt_mesh_pb_gatt_recv+0x68>)
    db14:	6823      	ldr	r3, [r4, #0]
    db16:	4283      	cmp	r3, r0
{
    db18:	460d      	mov	r5, r1
	if (link.conn != conn || !link.cb) {
    db1a:	d101      	bne.n	db20 <bt_mesh_pb_gatt_recv+0x10>
    db1c:	6863      	ldr	r3, [r4, #4]
    db1e:	b963      	cbnz	r3, db3a <bt_mesh_pb_gatt_recv+0x2a>
    db20:	4b16      	ldr	r3, [pc, #88]	; (db7c <bt_mesh_pb_gatt_recv+0x6c>)
    db22:	4917      	ldr	r1, [pc, #92]	; (db80 <bt_mesh_pb_gatt_recv+0x70>)
		BT_WARN("Data for unexpected connection");
    db24:	4817      	ldr	r0, [pc, #92]	; (db84 <bt_mesh_pb_gatt_recv+0x74>)
    db26:	1ac9      	subs	r1, r1, r3
    db28:	08c9      	lsrs	r1, r1, #3
    db2a:	0189      	lsls	r1, r1, #6
    db2c:	f041 0102 	orr.w	r1, r1, #2
    db30:	f00b fc87 	bl	19442 <log_0>
		return -ENOTCONN;
    db34:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
    db38:	bd38      	pop	{r3, r4, r5, pc}
	if (buf->len < 1) {
    db3a:	8889      	ldrh	r1, [r1, #4]
    db3c:	b961      	cbnz	r1, db58 <bt_mesh_pb_gatt_recv+0x48>
    db3e:	4b0f      	ldr	r3, [pc, #60]	; (db7c <bt_mesh_pb_gatt_recv+0x6c>)
    db40:	4a0f      	ldr	r2, [pc, #60]	; (db80 <bt_mesh_pb_gatt_recv+0x70>)
		BT_WARN("Too short provisioning packet (len %u)", buf->len);
    db42:	4811      	ldr	r0, [pc, #68]	; (db88 <bt_mesh_pb_gatt_recv+0x78>)
    db44:	1ad2      	subs	r2, r2, r3
    db46:	08d2      	lsrs	r2, r2, #3
    db48:	0192      	lsls	r2, r2, #6
    db4a:	f042 0202 	orr.w	r2, r2, #2
    db4e:	f00b fc85 	bl	1945c <log_1>
		return -EINVAL;
    db52:	f06f 0015 	mvn.w	r0, #21
    db56:	e7ef      	b.n	db38 <bt_mesh_pb_gatt_recv+0x28>
	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
    db58:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
    db5c:	2300      	movs	r3, #0
    db5e:	f104 0018 	add.w	r0, r4, #24
    db62:	f00a f981 	bl	17e68 <k_work_reschedule>
	link.cb->recv(&pb_gatt, link.cb_data, buf);
    db66:	6863      	ldr	r3, [r4, #4]
    db68:	4808      	ldr	r0, [pc, #32]	; (db8c <bt_mesh_pb_gatt_recv+0x7c>)
    db6a:	68db      	ldr	r3, [r3, #12]
    db6c:	68a1      	ldr	r1, [r4, #8]
    db6e:	462a      	mov	r2, r5
    db70:	4798      	blx	r3
	return 0;
    db72:	2000      	movs	r0, #0
    db74:	e7e0      	b.n	db38 <bt_mesh_pb_gatt_recv+0x28>
    db76:	bf00      	nop
    db78:	20001470 	.word	0x20001470
    db7c:	0001ef2c 	.word	0x0001ef2c
    db80:	0001f0c4 	.word	0x0001f0c4
    db84:	000223ae 	.word	0x000223ae
    db88:	0002235a 	.word	0x0002235a
    db8c:	0001f720 	.word	0x0001f720

0000db90 <bt_mesh_pb_gatt_open>:
{
    db90:	b538      	push	{r3, r4, r5, lr}
	if (link.conn) {
    db92:	4d0c      	ldr	r5, [pc, #48]	; (dbc4 <bt_mesh_pb_gatt_open+0x34>)
    db94:	682c      	ldr	r4, [r5, #0]
    db96:	b98c      	cbnz	r4, dbbc <bt_mesh_pb_gatt_open+0x2c>
	link.conn = bt_conn_ref(conn);
    db98:	f00c ff86 	bl	1aaa8 <bt_conn_ref>
    db9c:	4603      	mov	r3, r0
    db9e:	4628      	mov	r0, r5
	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
    dba0:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
	link.conn = bt_conn_ref(conn);
    dba4:	f840 3b18 	str.w	r3, [r0], #24
	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
    dba8:	2300      	movs	r3, #0
    dbaa:	f00a f95d 	bl	17e68 <k_work_reschedule>
	link.cb->link_opened(&pb_gatt, link.cb_data);
    dbae:	686b      	ldr	r3, [r5, #4]
    dbb0:	4805      	ldr	r0, [pc, #20]	; (dbc8 <bt_mesh_pb_gatt_open+0x38>)
    dbb2:	681b      	ldr	r3, [r3, #0]
    dbb4:	68a9      	ldr	r1, [r5, #8]
    dbb6:	4798      	blx	r3
	return 0;
    dbb8:	4620      	mov	r0, r4
}
    dbba:	bd38      	pop	{r3, r4, r5, pc}
		return -EBUSY;
    dbbc:	f06f 000f 	mvn.w	r0, #15
    dbc0:	e7fb      	b.n	dbba <bt_mesh_pb_gatt_open+0x2a>
    dbc2:	bf00      	nop
    dbc4:	20001470 	.word	0x20001470
    dbc8:	0001f720 	.word	0x0001f720

0000dbcc <bt_mesh_pb_gatt_close>:
{
    dbcc:	b508      	push	{r3, lr}
	if (link.conn != conn) {
    dbce:	4b06      	ldr	r3, [pc, #24]	; (dbe8 <bt_mesh_pb_gatt_close+0x1c>)
    dbd0:	681b      	ldr	r3, [r3, #0]
    dbd2:	4283      	cmp	r3, r0
    dbd4:	d104      	bne.n	dbe0 <bt_mesh_pb_gatt_close+0x14>
	link_closed(PROV_BEARER_LINK_STATUS_SUCCESS);
    dbd6:	2000      	movs	r0, #0
    dbd8:	f7ff ff5c 	bl	da94 <link_closed>
	return 0;
    dbdc:	2000      	movs	r0, #0
}
    dbde:	bd08      	pop	{r3, pc}
		return -ENOTCONN;
    dbe0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    dbe4:	e7fb      	b.n	dbde <bt_mesh_pb_gatt_close+0x12>
    dbe6:	bf00      	nop
    dbe8:	20001470 	.word	0x20001470

0000dbec <find_client>:
static struct bt_mesh_proxy_client *find_client(struct bt_conn *conn)
{
	int i;

	for (i = 0; i < ARRAY_SIZE(clients); i++) {
		if (clients[i].cli.conn == conn) {
    dbec:	4b03      	ldr	r3, [pc, #12]	; (dbfc <find_client+0x10>)
    dbee:	681a      	ldr	r2, [r3, #0]
			return &clients[i];
		}
	}

	return NULL;
}
    dbf0:	4282      	cmp	r2, r0
    dbf2:	bf0c      	ite	eq
    dbf4:	4618      	moveq	r0, r3
    dbf6:	2000      	movne	r0, #0
    dbf8:	4770      	bx	lr
    dbfa:	bf00      	nop
    dbfc:	200001e8 	.word	0x200001e8

0000dc00 <proxy_send_beacons>:
{
	struct bt_mesh_proxy_client *client;

	client = CONTAINER_OF(work, struct bt_mesh_proxy_client, send_beacons);

	(void)bt_mesh_subnet_find(send_beacon_cb, client);
    dc00:	f1a0 0158 	sub.w	r1, r0, #88	; 0x58
    dc04:	4801      	ldr	r0, [pc, #4]	; (dc0c <proxy_send_beacons+0xc>)
    dc06:	f7fc bf13 	b.w	aa30 <bt_mesh_subnet_find>
    dc0a:	bf00      	nop
    dc0c:	0001c581 	.word	0x0001c581

0000dc10 <send_filter_status>:
{
    dc10:	b570      	push	{r4, r5, r6, lr}
	struct bt_mesh_net_tx tx = {
    dc12:	f851 3b04 	ldr.w	r3, [r1], #4
{
    dc16:	b086      	sub	sp, #24
	struct bt_mesh_net_tx tx = {
    dc18:	2600      	movs	r6, #0
{
    dc1a:	4614      	mov	r4, r2
    dc1c:	4605      	mov	r5, r0
	struct bt_mesh_net_tx tx = {
    dc1e:	e9cd 3103 	strd	r3, r1, [sp, #12]
    dc22:	9605      	str	r6, [sp, #20]
		.src = bt_mesh_primary_addr(),
    dc24:	f7fe ff6c 	bl	cb00 <bt_mesh_primary_addr>
	tx.ctx->addr = BT_MESH_ADDR_UNASSIGNED;
    dc28:	9b04      	ldr	r3, [sp, #16]
	struct bt_mesh_net_tx tx = {
    dc2a:	f8ad 0014 	strh.w	r0, [sp, #20]
	tx.ctx->addr = BT_MESH_ADDR_UNASSIGNED;
    dc2e:	809e      	strh	r6, [r3, #4]
	buf->data = buf->__buf;
    dc30:	68a3      	ldr	r3, [r4, #8]
    dc32:	6023      	str	r3, [r4, #0]
	net_buf_simple_reserve(buf, 10);
    dc34:	210a      	movs	r1, #10
    dc36:	4620      	mov	r0, r4
	buf->len  = 0U;
    dc38:	80a6      	strh	r6, [r4, #4]
    dc3a:	f00f ff86 	bl	1db4a <net_buf_simple_reserve>
	net_buf_simple_add_u8(buf, CFG_FILTER_STATUS);
    dc3e:	2103      	movs	r1, #3
    dc40:	4620      	mov	r0, r4
    dc42:	f00f fff1 	bl	1dc28 <net_buf_simple_add_u8>
	if (client->filter_type == ACCEPT) {
    dc46:	f895 3056 	ldrb.w	r3, [r5, #86]	; 0x56
    dc4a:	2b01      	cmp	r3, #1
		net_buf_simple_add_u8(buf, 0x00);
    dc4c:	bf0c      	ite	eq
    dc4e:	4631      	moveq	r1, r6
		net_buf_simple_add_u8(buf, 0x01);
    dc50:	2101      	movne	r1, #1
    dc52:	4620      	mov	r0, r4
    dc54:	f00f ffe8 	bl	1dc28 <net_buf_simple_add_u8>
		if (client->filter[i] != BT_MESH_ADDR_UNASSIGNED) {
    dc58:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
    dc5c:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
	for (filter_size = 0U, i = 0; i < ARRAY_SIZE(client->filter); i++) {
    dc60:	3900      	subs	r1, #0
    dc62:	bf18      	it	ne
    dc64:	2101      	movne	r1, #1
		if (client->filter[i] != BT_MESH_ADDR_UNASSIGNED) {
    dc66:	b103      	cbz	r3, dc6a <send_filter_status+0x5a>
			filter_size++;
    dc68:	3101      	adds	r1, #1
		if (client->filter[i] != BT_MESH_ADDR_UNASSIGNED) {
    dc6a:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
    dc6e:	b10b      	cbz	r3, dc74 <send_filter_status+0x64>
			filter_size++;
    dc70:	3101      	adds	r1, #1
    dc72:	b289      	uxth	r1, r1
	net_buf_simple_add_be16(buf, filter_size);
    dc74:	4620      	mov	r0, r4
    dc76:	f00f ffdf 	bl	1dc38 <net_buf_simple_add_be16>
	err = bt_mesh_net_encode(&tx, buf, true);
    dc7a:	2201      	movs	r2, #1
    dc7c:	4621      	mov	r1, r4
    dc7e:	a803      	add	r0, sp, #12
    dc80:	f7fc fa3c 	bl	a0fc <bt_mesh_net_encode>
	if (err) {
    dc84:	4603      	mov	r3, r0
    dc86:	b160      	cbz	r0, dca2 <send_filter_status+0x92>
    dc88:	490f      	ldr	r1, [pc, #60]	; (dcc8 <send_filter_status+0xb8>)
    dc8a:	4a10      	ldr	r2, [pc, #64]	; (dccc <send_filter_status+0xbc>)
    dc8c:	1a52      	subs	r2, r2, r1
    dc8e:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Encoding Proxy cfg message failed (err %d)", err);
    dc90:	0192      	lsls	r2, r2, #6
    dc92:	4601      	mov	r1, r0
    dc94:	480e      	ldr	r0, [pc, #56]	; (dcd0 <send_filter_status+0xc0>)
    dc96:	f042 0201 	orr.w	r2, r2, #1
		BT_ERR("Failed to send proxy cfg message (err %d)", err);
    dc9a:	f00b fbdf 	bl	1945c <log_1>
}
    dc9e:	b006      	add	sp, #24
    dca0:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_mesh_proxy_msg_send(&client->cli, BT_MESH_PROXY_CONFIG,
    dca2:	9000      	str	r0, [sp, #0]
    dca4:	2102      	movs	r1, #2
    dca6:	4622      	mov	r2, r4
    dca8:	4628      	mov	r0, r5
    dcaa:	f00e fcd8 	bl	1c65e <bt_mesh_proxy_msg_send>
	if (err) {
    dcae:	4601      	mov	r1, r0
    dcb0:	2800      	cmp	r0, #0
    dcb2:	d0f4      	beq.n	dc9e <send_filter_status+0x8e>
    dcb4:	4a05      	ldr	r2, [pc, #20]	; (dccc <send_filter_status+0xbc>)
    dcb6:	4b04      	ldr	r3, [pc, #16]	; (dcc8 <send_filter_status+0xb8>)
		BT_ERR("Failed to send proxy cfg message (err %d)", err);
    dcb8:	4806      	ldr	r0, [pc, #24]	; (dcd4 <send_filter_status+0xc4>)
    dcba:	1ad2      	subs	r2, r2, r3
    dcbc:	08d2      	lsrs	r2, r2, #3
    dcbe:	0192      	lsls	r2, r2, #6
    dcc0:	f042 0201 	orr.w	r2, r2, #1
    dcc4:	e7e9      	b.n	dc9a <send_filter_status+0x8a>
    dcc6:	bf00      	nop
    dcc8:	0001ef2c 	.word	0x0001ef2c
    dccc:	0001f084 	.word	0x0001f084
    dcd0:	000223dd 	.word	0x000223dd
    dcd4:	00022408 	.word	0x00022408

0000dcd8 <proxy_send>:
#endif /* CONFIG_BT_MESH_PB_GATT */

static int proxy_send(struct bt_conn *conn,
		      const void *data, uint16_t len,
		      bt_gatt_complete_func_t end, void *user_data)
{
    dcd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dcdc:	461d      	mov	r5, r3
	const struct bt_gatt_attr *attr = NULL;

	BT_DBG("%u bytes: %s", len, bt_hex(data, len));

#if defined(CONFIG_BT_MESH_GATT_PROXY)
	if (gatt_svc == MESH_GATT_PROXY) {
    dcde:	4b12      	ldr	r3, [pc, #72]	; (dd28 <proxy_send+0x50>)
    dce0:	781b      	ldrb	r3, [r3, #0]
    dce2:	2b02      	cmp	r3, #2
{
    dce4:	b086      	sub	sp, #24
    dce6:	4604      	mov	r4, r0
    dce8:	460f      	mov	r7, r1
    dcea:	4616      	mov	r6, r2
	if (gatt_svc == MESH_GATT_PROXY) {
    dcec:	d016      	beq.n	dd1c <proxy_send+0x44>
		attr = &proxy_attrs[3];
	}
#endif /* CONFIG_BT_MESH_GATT_PROXY */
#if defined(CONFIG_BT_MESH_PB_GATT)
	if (gatt_svc == MESH_GATT_PROV) {
    dcee:	2b01      	cmp	r3, #1
    dcf0:	d117      	bne.n	dd22 <proxy_send+0x4a>
		attr = &prov_attrs[3];
    dcf2:	f8df 8038 	ldr.w	r8, [pc, #56]	; dd2c <proxy_send+0x54>

	if (!attr) {
		return -ENOENT;
	}

	struct bt_gatt_notify_params params = {
    dcf6:	2100      	movs	r1, #0
    dcf8:	2210      	movs	r2, #16
    dcfa:	4668      	mov	r0, sp
    dcfc:	f00c faca 	bl	1a294 <memset>
    dd00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dd02:	f8ad 600c 	strh.w	r6, [sp, #12]
		.attr = attr,
		.user_data = user_data,
		.func = end,
	};

	return bt_gatt_notify_cb(conn, &params);
    dd06:	4669      	mov	r1, sp
    dd08:	4620      	mov	r0, r4
	struct bt_gatt_notify_params params = {
    dd0a:	e9cd 8701 	strd	r8, r7, [sp, #4]
    dd0e:	9504      	str	r5, [sp, #16]
    dd10:	9305      	str	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
    dd12:	f7fa ffdd 	bl	8cd0 <bt_gatt_notify_cb>
}
    dd16:	b006      	add	sp, #24
    dd18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = &proxy_attrs[3];
    dd1c:	f8df 8010 	ldr.w	r8, [pc, #16]	; dd30 <proxy_send+0x58>
    dd20:	e7e9      	b.n	dcf6 <proxy_send+0x1e>
		return -ENOENT;
    dd22:	f06f 0001 	mvn.w	r0, #1
    dd26:	e7f6      	b.n	dd16 <proxy_send+0x3e>
    dd28:	20002fc1 	.word	0x20002fc1
    dd2c:	20000558 	.word	0x20000558
    dd30:	200005f4 	.word	0x200005f4

0000dd34 <gatt_recv>:
{
    dd34:	b538      	push	{r3, r4, r5, lr}
    dd36:	460c      	mov	r4, r1
    dd38:	461d      	mov	r5, r3
    dd3a:	4611      	mov	r1, r2
	struct bt_mesh_proxy_client *client = find_client(conn);
    dd3c:	f7ff ff56 	bl	dbec <find_client>
	if (!client) {
    dd40:	b340      	cbz	r0, dd94 <gatt_recv+0x60>
	if (len < 1) {
    dd42:	b965      	cbnz	r5, dd5e <gatt_recv+0x2a>
    dd44:	4915      	ldr	r1, [pc, #84]	; (dd9c <gatt_recv+0x68>)
    dd46:	4b16      	ldr	r3, [pc, #88]	; (dda0 <gatt_recv+0x6c>)
		BT_WARN("Too small Proxy PDU");
    dd48:	4816      	ldr	r0, [pc, #88]	; (dda4 <gatt_recv+0x70>)
    dd4a:	1ac9      	subs	r1, r1, r3
    dd4c:	08c9      	lsrs	r1, r1, #3
    dd4e:	0189      	lsls	r1, r1, #6
    dd50:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("Proxy PDU type doesn't match GATT service");
    dd54:	f00b fb75 	bl	19442 <log_0>
		return -EINVAL;
    dd58:	f06f 0015 	mvn.w	r0, #21
}
    dd5c:	bd38      	pop	{r3, r4, r5, pc}
	if (ATTR_IS_PROV(attr) != (PDU_TYPE(data) == BT_MESH_PROXY_PROV)) {
    dd5e:	68e3      	ldr	r3, [r4, #12]
    dd60:	780c      	ldrb	r4, [r1, #0]
    dd62:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    dd66:	3b00      	subs	r3, #0
    dd68:	f1a4 0203 	sub.w	r2, r4, #3
    dd6c:	bf18      	it	ne
    dd6e:	2301      	movne	r3, #1
    dd70:	4254      	negs	r4, r2
    dd72:	4154      	adcs	r4, r2
    dd74:	42a3      	cmp	r3, r4
    dd76:	d008      	beq.n	dd8a <gatt_recv+0x56>
    dd78:	4908      	ldr	r1, [pc, #32]	; (dd9c <gatt_recv+0x68>)
    dd7a:	4b09      	ldr	r3, [pc, #36]	; (dda0 <gatt_recv+0x6c>)
		BT_WARN("Proxy PDU type doesn't match GATT service");
    dd7c:	480a      	ldr	r0, [pc, #40]	; (dda8 <gatt_recv+0x74>)
    dd7e:	1ac9      	subs	r1, r1, r3
    dd80:	08c9      	lsrs	r1, r1, #3
    dd82:	0189      	lsls	r1, r1, #6
    dd84:	f041 0102 	orr.w	r1, r1, #2
    dd88:	e7e4      	b.n	dd54 <gatt_recv+0x20>
	return bt_mesh_proxy_msg_recv(&client->cli, buf, len);
    dd8a:	462a      	mov	r2, r5
}
    dd8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_mesh_proxy_msg_recv(&client->cli, buf, len);
    dd90:	f000 ba6c 	b.w	e26c <bt_mesh_proxy_msg_recv>
		return -ENOTCONN;
    dd94:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    dd98:	e7e0      	b.n	dd5c <gatt_recv+0x28>
    dd9a:	bf00      	nop
    dd9c:	0001f084 	.word	0x0001f084
    dda0:	0001ef2c 	.word	0x0001ef2c
    dda4:	00022432 	.word	0x00022432
    dda8:	00022446 	.word	0x00022446

0000ddac <prov_ccc_write.part.0>:
static ssize_t prov_ccc_write(struct bt_conn *conn,
    ddac:	b508      	push	{r3, lr}
    ddae:	4a07      	ldr	r2, [pc, #28]	; (ddcc <prov_ccc_write.part.0+0x20>)
    ddb0:	4b07      	ldr	r3, [pc, #28]	; (ddd0 <prov_ccc_write.part.0+0x24>)
    ddb2:	1ad2      	subs	r2, r2, r3
    ddb4:	08d2      	lsrs	r2, r2, #3
		BT_WARN("Client wrote 0x%04x instead enabling notify", value);
    ddb6:	0192      	lsls	r2, r2, #6
static ssize_t prov_ccc_write(struct bt_conn *conn,
    ddb8:	4601      	mov	r1, r0
		BT_WARN("Client wrote 0x%04x instead enabling notify", value);
    ddba:	f042 0202 	orr.w	r2, r2, #2
    ddbe:	4805      	ldr	r0, [pc, #20]	; (ddd4 <prov_ccc_write.part.0+0x28>)
    ddc0:	f00b fb4c 	bl	1945c <log_1>
}
    ddc4:	f06f 0012 	mvn.w	r0, #18
    ddc8:	bd08      	pop	{r3, pc}
    ddca:	bf00      	nop
    ddcc:	0001f084 	.word	0x0001f084
    ddd0:	0001ef2c 	.word	0x0001ef2c
    ddd4:	00022470 	.word	0x00022470

0000ddd8 <bt_mesh_proxy_beacon_send>:
	if (!sub) {
    ddd8:	4601      	mov	r1, r0
    ddda:	b920      	cbnz	r0, dde6 <bt_mesh_proxy_beacon_send+0xe>
		bt_mesh_subnet_foreach(bt_mesh_proxy_beacon_send);
    dddc:	4804      	ldr	r0, [pc, #16]	; (ddf0 <bt_mesh_proxy_beacon_send+0x18>)
    ddde:	f7fc be4b 	b.w	aa78 <bt_mesh_subnet_foreach>
			beacon_send(&clients[i], sub);
    dde2:	f00e bbb2 	b.w	1c54a <beacon_send>
		if (clients[i].cli.conn) {
    dde6:	4803      	ldr	r0, [pc, #12]	; (ddf4 <bt_mesh_proxy_beacon_send+0x1c>)
    dde8:	6803      	ldr	r3, [r0, #0]
    ddea:	2b00      	cmp	r3, #0
    ddec:	d1f9      	bne.n	dde2 <bt_mesh_proxy_beacon_send+0xa>
}
    ddee:	4770      	bx	lr
    ddf0:	0000ddd9 	.word	0x0000ddd9
    ddf4:	200001e8 	.word	0x200001e8

0000ddf8 <subnet_evt>:
	if (evt == BT_MESH_KEY_DELETED) {
    ddf8:	2901      	cmp	r1, #1
    ddfa:	d106      	bne.n	de0a <subnet_evt+0x12>
		if (sub == beacon_sub) {
    ddfc:	4a04      	ldr	r2, [pc, #16]	; (de10 <subnet_evt+0x18>)
    ddfe:	6811      	ldr	r1, [r2, #0]
    de00:	4288      	cmp	r0, r1
    de02:	d104      	bne.n	de0e <subnet_evt+0x16>
			beacon_sub = NULL;
    de04:	2300      	movs	r3, #0
    de06:	6013      	str	r3, [r2, #0]
    de08:	4770      	bx	lr
		bt_mesh_proxy_beacon_send(sub);
    de0a:	f7ff bfe5 	b.w	ddd8 <bt_mesh_proxy_beacon_send>
}
    de0e:	4770      	bx	lr
    de10:	20001be4 	.word	0x20001be4

0000de14 <proxy_filter_recv>:
{
    de14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    de16:	4615      	mov	r5, r2
	client = find_client(conn);
    de18:	f7ff fee8 	bl	dbec <find_client>
{
    de1c:	460f      	mov	r7, r1
	if (!client) {
    de1e:	4604      	mov	r4, r0
    de20:	2800      	cmp	r0, #0
    de22:	d062      	beq.n	deea <proxy_filter_recv+0xd6>
	opcode = net_buf_simple_pull_u8(buf);
    de24:	4628      	mov	r0, r5
    de26:	f00f ff59 	bl	1dcdc <net_buf_simple_pull_u8>
	switch (opcode) {
    de2a:	2801      	cmp	r0, #1
	opcode = net_buf_simple_pull_u8(buf);
    de2c:	4606      	mov	r6, r0
	switch (opcode) {
    de2e:	d040      	beq.n	deb2 <proxy_filter_recv+0x9e>
    de30:	2802      	cmp	r0, #2
    de32:	d049      	beq.n	dec8 <proxy_filter_recv+0xb4>
    de34:	2800      	cmp	r0, #0
    de36:	d14b      	bne.n	ded0 <proxy_filter_recv+0xbc>
	if (buf->len < 1) {
    de38:	88ab      	ldrh	r3, [r5, #4]
    de3a:	b983      	cbnz	r3, de5e <proxy_filter_recv+0x4a>
    de3c:	492b      	ldr	r1, [pc, #172]	; (deec <proxy_filter_recv+0xd8>)
    de3e:	4b2c      	ldr	r3, [pc, #176]	; (def0 <proxy_filter_recv+0xdc>)
		BT_WARN("Too short Filter Set message");
    de40:	482c      	ldr	r0, [pc, #176]	; (def4 <proxy_filter_recv+0xe0>)
    de42:	1ac9      	subs	r1, r1, r3
    de44:	08c9      	lsrs	r1, r1, #3
    de46:	0189      	lsls	r1, r1, #6
    de48:	f041 0102 	orr.w	r1, r1, #2
    de4c:	f00b faf9 	bl	19442 <log_0>
		send_filter_status(client, rx, buf);
    de50:	462a      	mov	r2, r5
    de52:	4639      	mov	r1, r7
    de54:	4620      	mov	r0, r4
}
    de56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		send_filter_status(client, rx, buf);
    de5a:	f7ff bed9 	b.w	dc10 <send_filter_status>
	type = net_buf_simple_pull_u8(buf);
    de5e:	4628      	mov	r0, r5
    de60:	f00f ff3c 	bl	1dcdc <net_buf_simple_pull_u8>
	switch (type) {
    de64:	4601      	mov	r1, r0
    de66:	b160      	cbz	r0, de82 <proxy_filter_recv+0x6e>
    de68:	2801      	cmp	r0, #1
    de6a:	d013      	beq.n	de94 <proxy_filter_recv+0x80>
    de6c:	4b20      	ldr	r3, [pc, #128]	; (def0 <proxy_filter_recv+0xdc>)
    de6e:	4a1f      	ldr	r2, [pc, #124]	; (deec <proxy_filter_recv+0xd8>)
		BT_WARN("Prohibited Filter Type 0x%02x", type);
    de70:	4821      	ldr	r0, [pc, #132]	; (def8 <proxy_filter_recv+0xe4>)
    de72:	1ad2      	subs	r2, r2, r3
    de74:	08d2      	lsrs	r2, r2, #3
    de76:	0192      	lsls	r2, r2, #6
    de78:	f042 0202 	orr.w	r2, r2, #2
    de7c:	f00b faee 	bl	1945c <log_1>
		return -EINVAL;
    de80:	e7e6      	b.n	de50 <proxy_filter_recv+0x3c>
		(void)memset(client->filter, 0, sizeof(client->filter));
    de82:	2206      	movs	r2, #6
    de84:	f104 0050 	add.w	r0, r4, #80	; 0x50
    de88:	f00c fa04 	bl	1a294 <memset>
		client->filter_type = ACCEPT;
    de8c:	2301      	movs	r3, #1
		client->filter_type = REJECT;
    de8e:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
		break;
    de92:	e7dd      	b.n	de50 <proxy_filter_recv+0x3c>
		(void)memset(client->filter, 0, sizeof(client->filter));
    de94:	2206      	movs	r2, #6
    de96:	4631      	mov	r1, r6
    de98:	f104 0050 	add.w	r0, r4, #80	; 0x50
    de9c:	f00c f9fa 	bl	1a294 <memset>
		client->filter_type = REJECT;
    dea0:	2302      	movs	r3, #2
    dea2:	e7f4      	b.n	de8e <proxy_filter_recv+0x7a>
			addr = net_buf_simple_pull_be16(buf);
    dea4:	4628      	mov	r0, r5
    dea6:	f00f ff29 	bl	1dcfc <net_buf_simple_pull_be16>
    deaa:	4601      	mov	r1, r0
			filter_add(client, addr);
    deac:	4620      	mov	r0, r4
    deae:	f00e fb6f 	bl	1c590 <filter_add>
		while (buf->len >= 2) {
    deb2:	88ab      	ldrh	r3, [r5, #4]
    deb4:	2b01      	cmp	r3, #1
    deb6:	d8f5      	bhi.n	dea4 <proxy_filter_recv+0x90>
    deb8:	e7ca      	b.n	de50 <proxy_filter_recv+0x3c>
			addr = net_buf_simple_pull_be16(buf);
    deba:	4628      	mov	r0, r5
    debc:	f00f ff1e 	bl	1dcfc <net_buf_simple_pull_be16>
    dec0:	4601      	mov	r1, r0
			filter_remove(client, addr);
    dec2:	4620      	mov	r0, r4
    dec4:	f00e fb7c 	bl	1c5c0 <filter_remove>
		while (buf->len >= 2) {
    dec8:	88ab      	ldrh	r3, [r5, #4]
    deca:	2b01      	cmp	r3, #1
    decc:	d8f5      	bhi.n	deba <proxy_filter_recv+0xa6>
    dece:	e7bf      	b.n	de50 <proxy_filter_recv+0x3c>
    ded0:	4b07      	ldr	r3, [pc, #28]	; (def0 <proxy_filter_recv+0xdc>)
    ded2:	4a06      	ldr	r2, [pc, #24]	; (deec <proxy_filter_recv+0xd8>)
    ded4:	1ad2      	subs	r2, r2, r3
    ded6:	08d2      	lsrs	r2, r2, #3
		BT_WARN("Unhandled configuration OpCode 0x%02x", opcode);
    ded8:	0192      	lsls	r2, r2, #6
    deda:	4601      	mov	r1, r0
}
    dedc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_WARN("Unhandled configuration OpCode 0x%02x", opcode);
    dee0:	4806      	ldr	r0, [pc, #24]	; (defc <proxy_filter_recv+0xe8>)
    dee2:	f042 0202 	orr.w	r2, r2, #2
    dee6:	f00b bab9 	b.w	1945c <log_1>
}
    deea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    deec:	0001f084 	.word	0x0001f084
    def0:	0001ef2c 	.word	0x0001ef2c
    def4:	0002249c 	.word	0x0002249c
    def8:	000224b9 	.word	0x000224b9
    defc:	000224d7 	.word	0x000224d7

0000df00 <bt_mesh_proxy_gatt_enable>:
{
    df00:	b538      	push	{r3, r4, r5, lr}
	if (gatt_svc == MESH_GATT_PROXY) {
    df02:	4d0c      	ldr	r5, [pc, #48]	; (df34 <bt_mesh_proxy_gatt_enable+0x34>)
    df04:	782c      	ldrb	r4, [r5, #0]
    df06:	2c02      	cmp	r4, #2
    df08:	d00d      	beq.n	df26 <bt_mesh_proxy_gatt_enable+0x26>
	if (gatt_svc != MESH_GATT_NONE) {
    df0a:	b97c      	cbnz	r4, df2c <bt_mesh_proxy_gatt_enable+0x2c>
	(void)bt_gatt_service_register(&proxy_svc);
    df0c:	480a      	ldr	r0, [pc, #40]	; (df38 <bt_mesh_proxy_gatt_enable+0x38>)
    df0e:	f7fa fc01 	bl	8714 <bt_gatt_service_register>
	gatt_svc = MESH_GATT_PROXY;
    df12:	2302      	movs	r3, #2
    df14:	702b      	strb	r3, [r5, #0]
		if (clients[i].cli.conn) {
    df16:	4b09      	ldr	r3, [pc, #36]	; (df3c <bt_mesh_proxy_gatt_enable+0x3c>)
    df18:	6818      	ldr	r0, [r3, #0]
    df1a:	b118      	cbz	r0, df24 <bt_mesh_proxy_gatt_enable+0x24>
			clients[i].filter_type = ACCEPT;
    df1c:	2201      	movs	r2, #1
    df1e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	return 0;
    df22:	4620      	mov	r0, r4
}
    df24:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
    df26:	f06f 0077 	mvn.w	r0, #119	; 0x77
    df2a:	e7fb      	b.n	df24 <bt_mesh_proxy_gatt_enable+0x24>
		return -EBUSY;
    df2c:	f06f 000f 	mvn.w	r0, #15
    df30:	e7f8      	b.n	df24 <bt_mesh_proxy_gatt_enable+0x24>
    df32:	bf00      	nop
    df34:	20002fc1 	.word	0x20002fc1
    df38:	20000648 	.word	0x20000648
    df3c:	200001e8 	.word	0x200001e8

0000df40 <bt_mesh_proxy_relay>:
{
    df40:	b570      	push	{r4, r5, r6, lr}
    df42:	b08e      	sub	sp, #56	; 0x38
		NET_BUF_SIMPLE_DEFINE(msg, 32);
    df44:	ab06      	add	r3, sp, #24
    df46:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    df4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    df4e:	9303      	str	r3, [sp, #12]
		if (!client->cli.conn) {
    df50:	4b37      	ldr	r3, [pc, #220]	; (e030 <bt_mesh_proxy_relay+0xf0>)
    df52:	681a      	ldr	r2, [r3, #0]
{
    df54:	4604      	mov	r4, r0
		if (!client->cli.conn) {
    df56:	b17a      	cbz	r2, df78 <bt_mesh_proxy_relay+0x38>
	if (client->filter_type == REJECT) {
    df58:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
    df5c:	2a02      	cmp	r2, #2
    df5e:	d10d      	bne.n	df7c <bt_mesh_proxy_relay+0x3c>
			if (client->filter[i] == addr) {
    df60:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
    df64:	428a      	cmp	r2, r1
    df66:	d007      	beq.n	df78 <bt_mesh_proxy_relay+0x38>
    df68:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
    df6c:	428a      	cmp	r2, r1
    df6e:	d003      	beq.n	df78 <bt_mesh_proxy_relay+0x38>
    df70:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
    df74:	428b      	cmp	r3, r1
    df76:	d113      	bne.n	dfa0 <bt_mesh_proxy_relay+0x60>
	bool relayed = false;
    df78:	2000      	movs	r0, #0
    df7a:	e053      	b.n	e024 <bt_mesh_proxy_relay+0xe4>
	if (addr == BT_MESH_ADDR_ALL_NODES) {
    df7c:	f64f 70ff 	movw	r0, #65535	; 0xffff
    df80:	4281      	cmp	r1, r0
    df82:	d042      	beq.n	e00a <bt_mesh_proxy_relay+0xca>
	if (client->filter_type == ACCEPT) {
    df84:	2a01      	cmp	r2, #1
    df86:	d1f7      	bne.n	df78 <bt_mesh_proxy_relay+0x38>
			if (client->filter[i] == addr) {
    df88:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
    df8c:	428a      	cmp	r2, r1
    df8e:	d007      	beq.n	dfa0 <bt_mesh_proxy_relay+0x60>
    df90:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
    df94:	428a      	cmp	r2, r1
    df96:	d003      	beq.n	dfa0 <bt_mesh_proxy_relay+0x60>
    df98:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
    df9c:	428b      	cmp	r3, r1
    df9e:	d1eb      	bne.n	df78 <bt_mesh_proxy_relay+0x38>
		net_buf_simple_reserve(&msg, 1);
    dfa0:	2101      	movs	r1, #1
    dfa2:	a803      	add	r0, sp, #12
    dfa4:	f00f fdd1 	bl	1db4a <net_buf_simple_reserve>
		net_buf_simple_add_mem(&msg, buf->data, buf->len);
    dfa8:	89a2      	ldrh	r2, [r4, #12]
    dfaa:	68a1      	ldr	r1, [r4, #8]
    dfac:	a803      	add	r0, sp, #12
    dfae:	f00f fe32 	bl	1dc16 <net_buf_simple_add_mem>
					     &msg, buf_send_end, net_buf_ref(buf));
    dfb2:	4620      	mov	r0, r4
    dfb4:	f00f fdf7 	bl	1dba6 <net_buf_ref>
		err = bt_mesh_proxy_msg_send(&client->cli, BT_MESH_PROXY_NET_PDU,
    dfb8:	4b1e      	ldr	r3, [pc, #120]	; (e034 <bt_mesh_proxy_relay+0xf4>)
    dfba:	9000      	str	r0, [sp, #0]
    dfbc:	aa03      	add	r2, sp, #12
    dfbe:	481c      	ldr	r0, [pc, #112]	; (e030 <bt_mesh_proxy_relay+0xf0>)
    dfc0:	2100      	movs	r1, #0
    dfc2:	f00e fb4c 	bl	1c65e <bt_mesh_proxy_msg_send>
		bt_mesh_adv_send_start(0, err, BT_MESH_ADV(buf));
    dfc6:	6966      	ldr	r6, [r4, #20]
		      const struct bt_data *sd, size_t sd_len);

static inline void bt_mesh_adv_send_start(uint16_t duration, int err,
					  struct bt_mesh_adv *adv)
{
	if (!adv->started) {
    dfc8:	7a33      	ldrb	r3, [r6, #8]
		err = bt_mesh_proxy_msg_send(&client->cli, BT_MESH_PROXY_NET_PDU,
    dfca:	4605      	mov	r5, r0
    dfcc:	f013 0004 	ands.w	r0, r3, #4
    dfd0:	d12a      	bne.n	e028 <bt_mesh_proxy_relay+0xe8>
		adv->started = 1;
    dfd2:	f043 0304 	orr.w	r3, r3, #4
    dfd6:	7233      	strb	r3, [r6, #8]

		if (adv->cb && adv->cb->start) {
    dfd8:	6833      	ldr	r3, [r6, #0]
    dfda:	b123      	cbz	r3, dfe6 <bt_mesh_proxy_relay+0xa6>
    dfdc:	681b      	ldr	r3, [r3, #0]
    dfde:	b113      	cbz	r3, dfe6 <bt_mesh_proxy_relay+0xa6>
			adv->cb->start(duration, err, adv->cb_data);
    dfe0:	6872      	ldr	r2, [r6, #4]
    dfe2:	4629      	mov	r1, r5
    dfe4:	4798      	blx	r3
		}

		if (err) {
    dfe6:	b1e5      	cbz	r5, e022 <bt_mesh_proxy_relay+0xe2>
			adv->cb = NULL;
    dfe8:	2300      	movs	r3, #0
    dfea:	6033      	str	r3, [r6, #0]
    dfec:	4b12      	ldr	r3, [pc, #72]	; (e038 <bt_mesh_proxy_relay+0xf8>)
    dfee:	4a13      	ldr	r2, [pc, #76]	; (e03c <bt_mesh_proxy_relay+0xfc>)
			BT_ERR("Failed to send proxy message (err %d)", err);
    dff0:	4813      	ldr	r0, [pc, #76]	; (e040 <bt_mesh_proxy_relay+0x100>)
    dff2:	1ad2      	subs	r2, r2, r3
    dff4:	08d2      	lsrs	r2, r2, #3
    dff6:	0192      	lsls	r2, r2, #6
    dff8:	f042 0201 	orr.w	r2, r2, #1
    dffc:	4629      	mov	r1, r5
    dffe:	f00b fa2d 	bl	1945c <log_1>
			net_buf_unref(buf);
    e002:	4620      	mov	r0, r4
    e004:	f007 fbd0 	bl	157a8 <net_buf_unref>
			continue;
    e008:	e7b6      	b.n	df78 <bt_mesh_proxy_relay+0x38>
		if (client->filter_type == PROV) {
    e00a:	2a03      	cmp	r2, #3
    e00c:	d1c8      	bne.n	dfa0 <bt_mesh_proxy_relay+0x60>
    e00e:	490b      	ldr	r1, [pc, #44]	; (e03c <bt_mesh_proxy_relay+0xfc>)
    e010:	4b09      	ldr	r3, [pc, #36]	; (e038 <bt_mesh_proxy_relay+0xf8>)
			BT_ERR("Invalid PDU type for Proxy Client");
    e012:	480c      	ldr	r0, [pc, #48]	; (e044 <bt_mesh_proxy_relay+0x104>)
    e014:	1ac9      	subs	r1, r1, r3
    e016:	08c9      	lsrs	r1, r1, #3
    e018:	0189      	lsls	r1, r1, #6
    e01a:	f041 0101 	orr.w	r1, r1, #1
    e01e:	f00b fa10 	bl	19442 <log_0>
		relayed = true;
    e022:	2001      	movs	r0, #1
}
    e024:	b00e      	add	sp, #56	; 0x38
    e026:	bd70      	pop	{r4, r5, r6, pc}
		if (err) {
    e028:	2d00      	cmp	r5, #0
    e02a:	d0fa      	beq.n	e022 <bt_mesh_proxy_relay+0xe2>
    e02c:	e7de      	b.n	dfec <bt_mesh_proxy_relay+0xac>
    e02e:	bf00      	nop
    e030:	200001e8 	.word	0x200001e8
    e034:	0001c58b 	.word	0x0001c58b
    e038:	0001ef2c 	.word	0x0001ef2c
    e03c:	0001f084 	.word	0x0001f084
    e040:	0002251f 	.word	0x0002251f
    e044:	000224fd 	.word	0x000224fd

0000e048 <bt_mesh_proxy_get_buf>:
    e048:	4803      	ldr	r0, [pc, #12]	; (e058 <bt_mesh_proxy_get_buf+0x10>)
    e04a:	2300      	movs	r3, #0
    e04c:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	buf->data = buf->__buf;
    e050:	6c83      	ldr	r3, [r0, #72]	; 0x48
    e052:	f840 3f40 	str.w	r3, [r0, #64]!
}
    e056:	4770      	bx	lr
    e058:	200001e8 	.word	0x200001e8

0000e05c <bt_mesh_proxy_prov_enable>:
{
    e05c:	b538      	push	{r3, r4, r5, lr}
	if (gatt_svc == MESH_GATT_PROV) {
    e05e:	4d0d      	ldr	r5, [pc, #52]	; (e094 <bt_mesh_proxy_prov_enable+0x38>)
    e060:	782c      	ldrb	r4, [r5, #0]
    e062:	2c01      	cmp	r4, #1
    e064:	d00f      	beq.n	e086 <bt_mesh_proxy_prov_enable+0x2a>
	if (gatt_svc != MESH_GATT_NONE) {
    e066:	b98c      	cbnz	r4, e08c <bt_mesh_proxy_prov_enable+0x30>
	(void)bt_gatt_service_register(&prov_svc);
    e068:	480b      	ldr	r0, [pc, #44]	; (e098 <bt_mesh_proxy_prov_enable+0x3c>)
    e06a:	f7fa fb53 	bl	8714 <bt_gatt_service_register>
	prov_fast_adv = true;
    e06e:	4a0b      	ldr	r2, [pc, #44]	; (e09c <bt_mesh_proxy_prov_enable+0x40>)
	gatt_svc = MESH_GATT_PROV;
    e070:	2301      	movs	r3, #1
    e072:	702b      	strb	r3, [r5, #0]
	prov_fast_adv = true;
    e074:	7013      	strb	r3, [r2, #0]
		if (clients[i].cli.conn) {
    e076:	4b0a      	ldr	r3, [pc, #40]	; (e0a0 <bt_mesh_proxy_prov_enable+0x44>)
    e078:	6818      	ldr	r0, [r3, #0]
    e07a:	b118      	cbz	r0, e084 <bt_mesh_proxy_prov_enable+0x28>
			clients[i].filter_type = PROV;
    e07c:	2203      	movs	r2, #3
    e07e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	return 0;
    e082:	4620      	mov	r0, r4
}
    e084:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
    e086:	f06f 0077 	mvn.w	r0, #119	; 0x77
    e08a:	e7fb      	b.n	e084 <bt_mesh_proxy_prov_enable+0x28>
		return -EBUSY;
    e08c:	f06f 000f 	mvn.w	r0, #15
    e090:	e7f8      	b.n	e084 <bt_mesh_proxy_prov_enable+0x28>
    e092:	bf00      	nop
    e094:	20002fc1 	.word	0x20002fc1
    e098:	200005ac 	.word	0x200005ac
    e09c:	20002fc2 	.word	0x20002fc2
    e0a0:	200001e8 	.word	0x200001e8

0000e0a4 <bt_mesh_proxy_prov_disable>:
{
    e0a4:	b538      	push	{r3, r4, r5, lr}
	if (gatt_svc == MESH_GATT_NONE) {
    e0a6:	4d13      	ldr	r5, [pc, #76]	; (e0f4 <bt_mesh_proxy_prov_disable+0x50>)
    e0a8:	782b      	ldrb	r3, [r5, #0]
{
    e0aa:	4604      	mov	r4, r0
	if (gatt_svc == MESH_GATT_NONE) {
    e0ac:	b1db      	cbz	r3, e0e6 <bt_mesh_proxy_prov_disable+0x42>
	if (gatt_svc != MESH_GATT_PROV) {
    e0ae:	2b01      	cmp	r3, #1
    e0b0:	d11c      	bne.n	e0ec <bt_mesh_proxy_prov_disable+0x48>
	bt_gatt_service_unregister(&prov_svc);
    e0b2:	4811      	ldr	r0, [pc, #68]	; (e0f8 <bt_mesh_proxy_prov_disable+0x54>)
    e0b4:	f7fb f834 	bl	9120 <bt_gatt_service_unregister>
	gatt_svc = MESH_GATT_NONE;
    e0b8:	2300      	movs	r3, #0
    e0ba:	702b      	strb	r3, [r5, #0]
		if (!client->cli.conn || client->filter_type != PROV) {
    e0bc:	4d0f      	ldr	r5, [pc, #60]	; (e0fc <bt_mesh_proxy_prov_disable+0x58>)
    e0be:	6828      	ldr	r0, [r5, #0]
    e0c0:	b118      	cbz	r0, e0ca <bt_mesh_proxy_prov_disable+0x26>
    e0c2:	f895 3056 	ldrb.w	r3, [r5, #86]	; 0x56
    e0c6:	2b03      	cmp	r3, #3
    e0c8:	d003      	beq.n	e0d2 <bt_mesh_proxy_prov_disable+0x2e>
	bt_mesh_adv_update();
    e0ca:	f7fe fe85 	bl	cdd8 <bt_mesh_adv_update>
	return 0;
    e0ce:	2000      	movs	r0, #0
}
    e0d0:	bd38      	pop	{r3, r4, r5, pc}
		if (disconnect) {
    e0d2:	b11c      	cbz	r4, e0dc <bt_mesh_proxy_prov_disable+0x38>
			bt_conn_disconnect(client->cli.conn,
    e0d4:	2113      	movs	r1, #19
    e0d6:	f00c fd47 	bl	1ab68 <bt_conn_disconnect>
    e0da:	e7f6      	b.n	e0ca <bt_mesh_proxy_prov_disable+0x26>
			bt_mesh_pb_gatt_close(client->cli.conn);
    e0dc:	f7ff fd76 	bl	dbcc <bt_mesh_pb_gatt_close>
			client->filter_type = NONE;
    e0e0:	f885 4056 	strb.w	r4, [r5, #86]	; 0x56
    e0e4:	e7f1      	b.n	e0ca <bt_mesh_proxy_prov_disable+0x26>
		return -EALREADY;
    e0e6:	f06f 0077 	mvn.w	r0, #119	; 0x77
    e0ea:	e7f1      	b.n	e0d0 <bt_mesh_proxy_prov_disable+0x2c>
		return -EBUSY;
    e0ec:	f06f 000f 	mvn.w	r0, #15
    e0f0:	e7ee      	b.n	e0d0 <bt_mesh_proxy_prov_disable+0x2c>
    e0f2:	bf00      	nop
    e0f4:	20002fc1 	.word	0x20002fc1
    e0f8:	200005ac 	.word	0x200005ac
    e0fc:	200001e8 	.word	0x200001e8

0000e100 <bt_mesh_pb_gatt_send>:
{
    e100:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e102:	460d      	mov	r5, r1
    e104:	4616      	mov	r6, r2
    e106:	461f      	mov	r7, r3
	struct bt_mesh_proxy_client *client = find_client(conn);
    e108:	f7ff fd70 	bl	dbec <find_client>
	if (!client) {
    e10c:	b968      	cbnz	r0, e12a <bt_mesh_pb_gatt_send+0x2a>
    e10e:	4b12      	ldr	r3, [pc, #72]	; (e158 <bt_mesh_pb_gatt_send+0x58>)
    e110:	4912      	ldr	r1, [pc, #72]	; (e15c <bt_mesh_pb_gatt_send+0x5c>)
		BT_ERR("No Proxy Client found");
    e112:	4813      	ldr	r0, [pc, #76]	; (e160 <bt_mesh_pb_gatt_send+0x60>)
    e114:	1ac9      	subs	r1, r1, r3
    e116:	08c9      	lsrs	r1, r1, #3
    e118:	0189      	lsls	r1, r1, #6
    e11a:	f041 0101 	orr.w	r1, r1, #1
    e11e:	f00b f990 	bl	19442 <log_0>
		return -ENOTCONN;
    e122:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
    e126:	b003      	add	sp, #12
    e128:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (client->filter_type != PROV) {
    e12a:	f890 1056 	ldrb.w	r1, [r0, #86]	; 0x56
    e12e:	2903      	cmp	r1, #3
    e130:	d00c      	beq.n	e14c <bt_mesh_pb_gatt_send+0x4c>
    e132:	4b09      	ldr	r3, [pc, #36]	; (e158 <bt_mesh_pb_gatt_send+0x58>)
    e134:	4909      	ldr	r1, [pc, #36]	; (e15c <bt_mesh_pb_gatt_send+0x5c>)
		BT_ERR("Invalid PDU type for Proxy Client");
    e136:	480b      	ldr	r0, [pc, #44]	; (e164 <bt_mesh_pb_gatt_send+0x64>)
    e138:	1ac9      	subs	r1, r1, r3
    e13a:	08c9      	lsrs	r1, r1, #3
    e13c:	0189      	lsls	r1, r1, #6
    e13e:	f041 0101 	orr.w	r1, r1, #1
    e142:	f00b f97e 	bl	19442 <log_0>
		return -EINVAL;
    e146:	f06f 0015 	mvn.w	r0, #21
    e14a:	e7ec      	b.n	e126 <bt_mesh_pb_gatt_send+0x26>
	return bt_mesh_proxy_msg_send(&client->cli, BT_MESH_PROXY_PROV, buf, end, user_data);
    e14c:	9700      	str	r7, [sp, #0]
    e14e:	4633      	mov	r3, r6
    e150:	462a      	mov	r2, r5
    e152:	f00e fa84 	bl	1c65e <bt_mesh_proxy_msg_send>
    e156:	e7e6      	b.n	e126 <bt_mesh_pb_gatt_send+0x26>
    e158:	0001ef2c 	.word	0x0001ef2c
    e15c:	0001f084 	.word	0x0001f084
    e160:	00022545 	.word	0x00022545
    e164:	000224fd 	.word	0x000224fd

0000e168 <proxy_complete_pdu>:
	role->cb.recv(role->conn, &rx, &buf);
}
#endif

static void proxy_complete_pdu(struct bt_mesh_proxy_role *role)
{
    e168:	b510      	push	{r4, lr}
	switch (role->msg_type) {
    e16a:	7901      	ldrb	r1, [r0, #4]
{
    e16c:	b094      	sub	sp, #80	; 0x50
    e16e:	4604      	mov	r4, r0
	switch (role->msg_type) {
    e170:	2903      	cmp	r1, #3
    e172:	d866      	bhi.n	e242 <proxy_complete_pdu+0xda>
    e174:	e8df f001 	tbb	[pc, r1]
    e178:	5f120e02 	.word	0x5f120e02
#if defined(CONFIG_BT_MESH_PROXY)
	case BT_MESH_PROXY_NET_PDU:
		BT_DBG("Mesh Network PDU");
		bt_mesh_net_recv(&role->buf, 0, BT_MESH_NET_IF_PROXY);
    e17c:	2202      	movs	r2, #2
    e17e:	2100      	movs	r1, #0
    e180:	3040      	adds	r0, #64	; 0x40
    e182:	f7fc f965 	bl	a450 <bt_mesh_net_recv>
	buf->len  = 0U;
    e186:	2300      	movs	r3, #0
    e188:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	buf->data = buf->__buf;
    e18c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    e18e:	6423      	str	r3, [r4, #64]	; 0x40
		BT_WARN("Unhandled Message Type 0x%02x", role->msg_type);
		break;
	}

	net_buf_simple_reset(&role->buf);
}
    e190:	b014      	add	sp, #80	; 0x50
    e192:	bd10      	pop	{r4, pc}
		bt_mesh_beacon_recv(&role->buf);
    e194:	3040      	adds	r0, #64	; 0x40
    e196:	f7fb fc25 	bl	99e4 <bt_mesh_beacon_recv>
		break;
    e19a:	e7f4      	b.n	e186 <proxy_complete_pdu+0x1e>
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_NET_MAX_PDU_LEN);
    e19c:	ab0c      	add	r3, sp, #48	; 0x30
    e19e:	f44f 12e8 	mov.w	r2, #1900544	; 0x1d0000
    e1a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    e1a6:	9303      	str	r3, [sp, #12]
	err = bt_mesh_net_decode(&role->buf, BT_MESH_NET_IF_PROXY_CFG,
    e1a8:	2103      	movs	r1, #3
    e1aa:	ab03      	add	r3, sp, #12
    e1ac:	aa06      	add	r2, sp, #24
    e1ae:	3040      	adds	r0, #64	; 0x40
    e1b0:	f7fc f884 	bl	a2bc <bt_mesh_net_decode>
	if (err) {
    e1b4:	4601      	mov	r1, r0
    e1b6:	b150      	cbz	r0, e1ce <proxy_complete_pdu+0x66>
    e1b8:	4a26      	ldr	r2, [pc, #152]	; (e254 <proxy_complete_pdu+0xec>)
    e1ba:	4b27      	ldr	r3, [pc, #156]	; (e258 <proxy_complete_pdu+0xf0>)
		BT_ERR("Failed to decode Proxy Configuration (err %d)", err);
    e1bc:	4827      	ldr	r0, [pc, #156]	; (e25c <proxy_complete_pdu+0xf4>)
    e1be:	1ad2      	subs	r2, r2, r3
    e1c0:	08d2      	lsrs	r2, r2, #3
    e1c2:	0192      	lsls	r2, r2, #6
    e1c4:	f042 0201 	orr.w	r2, r2, #1
		BT_WARN("Unhandled Message Type 0x%02x", role->msg_type);
    e1c8:	f00b f948 	bl	1945c <log_1>
    e1cc:	e7db      	b.n	e186 <proxy_complete_pdu+0x1e>
	rx.local_match = 1U;
    e1ce:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
	if (bt_mesh_rpl_check(&rx, NULL)) {
    e1d2:	a806      	add	r0, sp, #24
	rx.local_match = 1U;
    e1d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e1d8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	if (bt_mesh_rpl_check(&rx, NULL)) {
    e1dc:	f7fd ffcc 	bl	c178 <bt_mesh_rpl_check>
    e1e0:	b188      	cbz	r0, e206 <proxy_complete_pdu+0x9e>
    e1e2:	4a1d      	ldr	r2, [pc, #116]	; (e258 <proxy_complete_pdu+0xf0>)
    e1e4:	4b1b      	ldr	r3, [pc, #108]	; (e254 <proxy_complete_pdu+0xec>)
		BT_WARN("Replay: src 0x%04x dst 0x%04x seq 0x%06x",
    e1e6:	f8bd 1020 	ldrh.w	r1, [sp, #32]
    e1ea:	481d      	ldr	r0, [pc, #116]	; (e260 <proxy_complete_pdu+0xf8>)
    e1ec:	1a9b      	subs	r3, r3, r2
    e1ee:	08db      	lsrs	r3, r3, #3
    e1f0:	019b      	lsls	r3, r3, #6
    e1f2:	f043 0302 	orr.w	r3, r3, #2
    e1f6:	f8ad 3000 	strh.w	r3, [sp]
    e1fa:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
    e1fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e200:	f00b f959 	bl	194b6 <log_3>
		return;
    e204:	e7bf      	b.n	e186 <proxy_complete_pdu+0x1e>
	net_buf_simple_pull(&buf, BT_MESH_NET_HDR_LEN);
    e206:	2109      	movs	r1, #9
    e208:	a803      	add	r0, sp, #12
    e20a:	f00f fd57 	bl	1dcbc <net_buf_simple_pull>
	if (buf.len < 1) {
    e20e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    e212:	b953      	cbnz	r3, e22a <proxy_complete_pdu+0xc2>
    e214:	4b10      	ldr	r3, [pc, #64]	; (e258 <proxy_complete_pdu+0xf0>)
    e216:	490f      	ldr	r1, [pc, #60]	; (e254 <proxy_complete_pdu+0xec>)
		BT_WARN("Too short proxy configuration PDU");
    e218:	4812      	ldr	r0, [pc, #72]	; (e264 <proxy_complete_pdu+0xfc>)
    e21a:	1ac9      	subs	r1, r1, r3
    e21c:	08c9      	lsrs	r1, r1, #3
    e21e:	0189      	lsls	r1, r1, #6
    e220:	f041 0102 	orr.w	r1, r1, #2
    e224:	f00b f90d 	bl	19442 <log_0>
		return;
    e228:	e7ad      	b.n	e186 <proxy_complete_pdu+0x1e>
	role->cb.recv(role->conn, &rx, &buf);
    e22a:	68e3      	ldr	r3, [r4, #12]
    e22c:	6820      	ldr	r0, [r4, #0]
    e22e:	aa03      	add	r2, sp, #12
    e230:	a906      	add	r1, sp, #24
    e232:	4798      	blx	r3
    e234:	e7a7      	b.n	e186 <proxy_complete_pdu+0x1e>
		bt_mesh_pb_gatt_recv(role->conn, &role->buf);
    e236:	f100 0140 	add.w	r1, r0, #64	; 0x40
    e23a:	6800      	ldr	r0, [r0, #0]
    e23c:	f7ff fc68 	bl	db10 <bt_mesh_pb_gatt_recv>
		break;
    e240:	e7a1      	b.n	e186 <proxy_complete_pdu+0x1e>
    e242:	4a04      	ldr	r2, [pc, #16]	; (e254 <proxy_complete_pdu+0xec>)
    e244:	4b04      	ldr	r3, [pc, #16]	; (e258 <proxy_complete_pdu+0xf0>)
		BT_WARN("Unhandled Message Type 0x%02x", role->msg_type);
    e246:	4808      	ldr	r0, [pc, #32]	; (e268 <proxy_complete_pdu+0x100>)
    e248:	1ad2      	subs	r2, r2, r3
    e24a:	08d2      	lsrs	r2, r2, #3
    e24c:	0192      	lsls	r2, r2, #6
    e24e:	f042 0202 	orr.w	r2, r2, #2
    e252:	e7b9      	b.n	e1c8 <proxy_complete_pdu+0x60>
    e254:	0001f0dc 	.word	0x0001f0dc
    e258:	0001ef2c 	.word	0x0001ef2c
    e25c:	00022568 	.word	0x00022568
    e260:	00021aa2 	.word	0x00021aa2
    e264:	00022596 	.word	0x00022596
    e268:	000225b8 	.word	0x000225b8

0000e26c <bt_mesh_proxy_msg_recv>:

ssize_t bt_mesh_proxy_msg_recv(struct bt_mesh_proxy_role *role,
			       const void *buf, uint16_t len)
{
    e26c:	b570      	push	{r4, r5, r6, lr}
	const uint8_t *data = buf;

	switch (PDU_SAR(data)) {
    e26e:	780b      	ldrb	r3, [r1, #0]
{
    e270:	4616      	mov	r6, r2
	switch (PDU_SAR(data)) {
    e272:	099a      	lsrs	r2, r3, #6
    e274:	2a02      	cmp	r2, #2
{
    e276:	460d      	mov	r5, r1
    e278:	4604      	mov	r4, r0
	case SAR_COMPLETE:
		if (role->buf.len) {
    e27a:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
	switch (PDU_SAR(data)) {
    e27e:	d039      	beq.n	e2f4 <bt_mesh_proxy_msg_recv+0x88>
    e280:	2a03      	cmp	r2, #3
    e282:	d058      	beq.n	e336 <bt_mesh_proxy_msg_recv+0xca>
    e284:	2a01      	cmp	r2, #1
    e286:	d018      	beq.n	e2ba <bt_mesh_proxy_msg_recv+0x4e>
		if (role->buf.len) {
    e288:	b161      	cbz	r1, e2a4 <bt_mesh_proxy_msg_recv+0x38>
    e28a:	4939      	ldr	r1, [pc, #228]	; (e370 <bt_mesh_proxy_msg_recv+0x104>)
    e28c:	4b39      	ldr	r3, [pc, #228]	; (e374 <bt_mesh_proxy_msg_recv+0x108>)
			BT_WARN("Complete PDU while a pending incomplete one");
    e28e:	483a      	ldr	r0, [pc, #232]	; (e378 <bt_mesh_proxy_msg_recv+0x10c>)
    e290:	1ac9      	subs	r1, r1, r3
    e292:	08c9      	lsrs	r1, r1, #3
    e294:	0189      	lsls	r1, r1, #6
    e296:	f041 0102 	orr.w	r1, r1, #2
			BT_WARN("Last SAR PDU with no prior data");
			return -EINVAL;
		}

		if (role->msg_type != PDU_TYPE(data)) {
			BT_WARN("Unexpected message type in last SAR PDU");
    e29a:	f00b f8d2 	bl	19442 <log_0>
			return -EINVAL;
    e29e:	f06f 0015 	mvn.w	r0, #21
		proxy_complete_pdu(role);
		break;
	}

	return len;
}
    e2a2:	bd70      	pop	{r4, r5, r6, pc}
		role->msg_type = PDU_TYPE(data);
    e2a4:	7103      	strb	r3, [r0, #4]
		net_buf_simple_add_mem(&role->buf, data + 1, len - 1);
    e2a6:	1e72      	subs	r2, r6, #1
    e2a8:	1c69      	adds	r1, r5, #1
    e2aa:	f104 0040 	add.w	r0, r4, #64	; 0x40
    e2ae:	f00f fcb2 	bl	1dc16 <net_buf_simple_add_mem>
		proxy_complete_pdu(role);
    e2b2:	4620      	mov	r0, r4
    e2b4:	f7ff ff58 	bl	e168 <proxy_complete_pdu>
		break;
    e2b8:	e01a      	b.n	e2f0 <bt_mesh_proxy_msg_recv+0x84>
		if (role->buf.len) {
    e2ba:	b141      	cbz	r1, e2ce <bt_mesh_proxy_msg_recv+0x62>
    e2bc:	492c      	ldr	r1, [pc, #176]	; (e370 <bt_mesh_proxy_msg_recv+0x104>)
    e2be:	4b2d      	ldr	r3, [pc, #180]	; (e374 <bt_mesh_proxy_msg_recv+0x108>)
			BT_WARN("First PDU while a pending incomplete one");
    e2c0:	482e      	ldr	r0, [pc, #184]	; (e37c <bt_mesh_proxy_msg_recv+0x110>)
    e2c2:	1ac9      	subs	r1, r1, r3
    e2c4:	08c9      	lsrs	r1, r1, #3
    e2c6:	0189      	lsls	r1, r1, #6
    e2c8:	f041 0102 	orr.w	r1, r1, #2
    e2cc:	e7e5      	b.n	e29a <bt_mesh_proxy_msg_recv+0x2e>
		k_work_reschedule(&role->sar_timer, PROXY_SAR_TIMEOUT);
    e2ce:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
    e2d2:	2300      	movs	r3, #0
    e2d4:	3010      	adds	r0, #16
    e2d6:	f009 fdc7 	bl	17e68 <k_work_reschedule>
		role->msg_type = PDU_TYPE(data);
    e2da:	4629      	mov	r1, r5
		net_buf_simple_add_mem(&role->buf, data + 1, len - 1);
    e2dc:	1e72      	subs	r2, r6, #1
		role->msg_type = PDU_TYPE(data);
    e2de:	f811 3b01 	ldrb.w	r3, [r1], #1
    e2e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    e2e6:	7123      	strb	r3, [r4, #4]
		net_buf_simple_add_mem(&role->buf, data + 1, len - 1);
    e2e8:	f104 0040 	add.w	r0, r4, #64	; 0x40
    e2ec:	f00f fc93 	bl	1dc16 <net_buf_simple_add_mem>
	return len;
    e2f0:	4630      	mov	r0, r6
    e2f2:	e7d6      	b.n	e2a2 <bt_mesh_proxy_msg_recv+0x36>
		if (!role->buf.len) {
    e2f4:	b941      	cbnz	r1, e308 <bt_mesh_proxy_msg_recv+0x9c>
    e2f6:	491e      	ldr	r1, [pc, #120]	; (e370 <bt_mesh_proxy_msg_recv+0x104>)
    e2f8:	4b1e      	ldr	r3, [pc, #120]	; (e374 <bt_mesh_proxy_msg_recv+0x108>)
			BT_WARN("Continuation with no prior data");
    e2fa:	4821      	ldr	r0, [pc, #132]	; (e380 <bt_mesh_proxy_msg_recv+0x114>)
    e2fc:	1ac9      	subs	r1, r1, r3
    e2fe:	08c9      	lsrs	r1, r1, #3
    e300:	0189      	lsls	r1, r1, #6
    e302:	f041 0102 	orr.w	r1, r1, #2
    e306:	e7c8      	b.n	e29a <bt_mesh_proxy_msg_recv+0x2e>
		if (role->msg_type != PDU_TYPE(data)) {
    e308:	7902      	ldrb	r2, [r0, #4]
    e30a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    e30e:	429a      	cmp	r2, r3
    e310:	d008      	beq.n	e324 <bt_mesh_proxy_msg_recv+0xb8>
    e312:	4917      	ldr	r1, [pc, #92]	; (e370 <bt_mesh_proxy_msg_recv+0x104>)
    e314:	4b17      	ldr	r3, [pc, #92]	; (e374 <bt_mesh_proxy_msg_recv+0x108>)
			BT_WARN("Unexpected message type in continuation");
    e316:	481b      	ldr	r0, [pc, #108]	; (e384 <bt_mesh_proxy_msg_recv+0x118>)
    e318:	1ac9      	subs	r1, r1, r3
    e31a:	08c9      	lsrs	r1, r1, #3
    e31c:	0189      	lsls	r1, r1, #6
    e31e:	f041 0102 	orr.w	r1, r1, #2
    e322:	e7ba      	b.n	e29a <bt_mesh_proxy_msg_recv+0x2e>
		k_work_reschedule(&role->sar_timer, PROXY_SAR_TIMEOUT);
    e324:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
    e328:	2300      	movs	r3, #0
    e32a:	3010      	adds	r0, #16
    e32c:	f009 fd9c 	bl	17e68 <k_work_reschedule>
		net_buf_simple_add_mem(&role->buf, data + 1, len - 1);
    e330:	1e72      	subs	r2, r6, #1
    e332:	1c69      	adds	r1, r5, #1
    e334:	e7d8      	b.n	e2e8 <bt_mesh_proxy_msg_recv+0x7c>
		if (!role->buf.len) {
    e336:	b941      	cbnz	r1, e34a <bt_mesh_proxy_msg_recv+0xde>
    e338:	490d      	ldr	r1, [pc, #52]	; (e370 <bt_mesh_proxy_msg_recv+0x104>)
    e33a:	4b0e      	ldr	r3, [pc, #56]	; (e374 <bt_mesh_proxy_msg_recv+0x108>)
			BT_WARN("Last SAR PDU with no prior data");
    e33c:	4812      	ldr	r0, [pc, #72]	; (e388 <bt_mesh_proxy_msg_recv+0x11c>)
    e33e:	1ac9      	subs	r1, r1, r3
    e340:	08c9      	lsrs	r1, r1, #3
    e342:	0189      	lsls	r1, r1, #6
    e344:	f041 0102 	orr.w	r1, r1, #2
    e348:	e7a7      	b.n	e29a <bt_mesh_proxy_msg_recv+0x2e>
		if (role->msg_type != PDU_TYPE(data)) {
    e34a:	7902      	ldrb	r2, [r0, #4]
    e34c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    e350:	429a      	cmp	r2, r3
    e352:	d008      	beq.n	e366 <bt_mesh_proxy_msg_recv+0xfa>
    e354:	4906      	ldr	r1, [pc, #24]	; (e370 <bt_mesh_proxy_msg_recv+0x104>)
    e356:	4b07      	ldr	r3, [pc, #28]	; (e374 <bt_mesh_proxy_msg_recv+0x108>)
			BT_WARN("Unexpected message type in last SAR PDU");
    e358:	480c      	ldr	r0, [pc, #48]	; (e38c <bt_mesh_proxy_msg_recv+0x120>)
    e35a:	1ac9      	subs	r1, r1, r3
    e35c:	08c9      	lsrs	r1, r1, #3
    e35e:	0189      	lsls	r1, r1, #6
    e360:	f041 0102 	orr.w	r1, r1, #2
    e364:	e799      	b.n	e29a <bt_mesh_proxy_msg_recv+0x2e>
		(void)k_work_cancel_delayable(&role->sar_timer);
    e366:	3010      	adds	r0, #16
    e368:	f010 f988 	bl	1e67c <k_work_cancel_delayable>
    e36c:	e79b      	b.n	e2a6 <bt_mesh_proxy_msg_recv+0x3a>
    e36e:	bf00      	nop
    e370:	0001f0dc 	.word	0x0001f0dc
    e374:	0001ef2c 	.word	0x0001ef2c
    e378:	000225d6 	.word	0x000225d6
    e37c:	00022602 	.word	0x00022602
    e380:	0002262b 	.word	0x0002262b
    e384:	0002264b 	.word	0x0002264b
    e388:	00022673 	.word	0x00022673
    e38c:	00022693 	.word	0x00022693

0000e390 <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
    e390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    e394:	4f11      	ldr	r7, [pc, #68]	; (e3dc <mayfly_init+0x4c>)
    e396:	f8df a048 	ldr.w	sl, [pc, #72]	; e3e0 <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    e39a:	2404      	movs	r4, #4
	while (callee_id--) {
    e39c:	3c01      	subs	r4, #1
    e39e:	b2e4      	uxtb	r4, r4
    e3a0:	2cff      	cmp	r4, #255	; 0xff
    e3a2:	d018      	beq.n	e3d6 <mayfly_init+0x46>
    e3a4:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    e3a8:	ea4f 0984 	mov.w	r9, r4, lsl #2
    e3ac:	0136      	lsls	r6, r6, #4
		caller_id = MAYFLY_CALLER_COUNT;
    e3ae:	2504      	movs	r5, #4
    e3b0:	f04f 080c 	mov.w	r8, #12
    e3b4:	e00a      	b.n	e3cc <mayfly_init+0x3c>
			memq_init(&mfl[callee_id][caller_id],
    e3b6:	fb18 6105 	smlabb	r1, r8, r5, r6
    e3ba:	1d0a      	adds	r2, r1, #4
    e3bc:	eb05 0009 	add.w	r0, r5, r9
    e3c0:	443a      	add	r2, r7
    e3c2:	4439      	add	r1, r7
    e3c4:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
    e3c8:	f00e fa1a 	bl	1c800 <memq_init>
		while (caller_id--) {
    e3cc:	3d01      	subs	r5, #1
    e3ce:	b2ed      	uxtb	r5, r5
    e3d0:	2dff      	cmp	r5, #255	; 0xff
    e3d2:	d1f0      	bne.n	e3b6 <mayfly_init+0x26>
    e3d4:	e7e2      	b.n	e39c <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    e3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e3da:	bf00      	nop
    e3dc:	20001c68 	.word	0x20001c68
    e3e0:	20001be8 	.word	0x20001be8

0000e3e4 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
    e3e4:	b4f0      	push	{r4, r5, r6, r7}
    e3e6:	4b14      	ldr	r3, [pc, #80]	; (e438 <mayfly_enable+0x54>)
    e3e8:	4607      	mov	r7, r0
    e3ea:	460e      	mov	r6, r1
    e3ec:	f04f 0c0c 	mov.w	ip, #12
    e3f0:	2430      	movs	r4, #48	; 0x30
	if (enable) {
    e3f2:	b17a      	cbz	r2, e414 <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
    e3f4:	fb04 f501 	mul.w	r5, r4, r1
    e3f8:	fb0c 5500 	mla	r5, ip, r0, r5
    e3fc:	442b      	add	r3, r5
    e3fe:	7a59      	ldrb	r1, [r3, #9]
    e400:	7a18      	ldrb	r0, [r3, #8]
    e402:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    e404:	bf04      	itt	eq
    e406:	3101      	addeq	r1, #1
    e408:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    e40a:	4638      	mov	r0, r7
    e40c:	4631      	mov	r1, r6

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
    e40e:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    e410:	f007 b81a 	b.w	15448 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    e414:	434c      	muls	r4, r1
    e416:	fb0c 4400 	mla	r4, ip, r0, r4
    e41a:	4423      	add	r3, r4
    e41c:	7a9c      	ldrb	r4, [r3, #10]
    e41e:	7ada      	ldrb	r2, [r3, #11]
    e420:	42a2      	cmp	r2, r4
    e422:	d107      	bne.n	e434 <mayfly_enable+0x50>
			mft[callee_id][caller_id].disable_req++;
    e424:	3201      	adds	r2, #1
    e426:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
    e428:	4b04      	ldr	r3, [pc, #16]	; (e43c <mayfly_enable+0x58>)
    e42a:	2201      	movs	r2, #1
    e42c:	545a      	strb	r2, [r3, r1]
}
    e42e:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    e430:	f007 b84a 	b.w	154c8 <mayfly_pend>
}
    e434:	bcf0      	pop	{r4, r5, r6, r7}
    e436:	4770      	bx	lr
    e438:	20001c68 	.word	0x20001c68
    e43c:	20002fc3 	.word	0x20002fc3

0000e440 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
    e440:	b570      	push	{r4, r5, r6, lr}
    e442:	4606      	mov	r6, r0
    e444:	460d      	mov	r5, r1
    e446:	461c      	mov	r4, r3
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    e448:	b1a2      	cbz	r2, e474 <mayfly_enqueue+0x34>
    e44a:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    e44c:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    e44e:	7820      	ldrb	r0, [r4, #0]
    e450:	1a80      	subs	r0, r0, r2
	if (state != 0U) {
    e452:	f010 0003 	ands.w	r0, r0, #3
    e456:	d02c      	beq.n	e4b2 <mayfly_enqueue+0x72>
		if (chain) {
    e458:	b31b      	cbz	r3, e4a2 <mayfly_enqueue+0x62>
			if (state != 1U) {
    e45a:	2801      	cmp	r0, #1
    e45c:	d028      	beq.n	e4b0 <mayfly_enqueue+0x70>
				/* mark as ready in queue */
				m->_req = ack + 1;
    e45e:	3201      	adds	r2, #1
    e460:	b2d2      	uxtb	r2, r2
    e462:	7022      	strb	r2, [r4, #0]
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
    e464:	4b1c      	ldr	r3, [pc, #112]	; (e4d8 <mayfly_enqueue+0x98>)
    e466:	2201      	movs	r2, #1
    e468:	555a      	strb	r2, [r3, r5]

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    e46a:	4629      	mov	r1, r5
    e46c:	4630      	mov	r0, r6
    e46e:	f007 f82b 	bl	154c8 <mayfly_pend>
    e472:	e01c      	b.n	e4ae <mayfly_enqueue+0x6e>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    e474:	f00f fa8f 	bl	1d996 <mayfly_prio_is_equal>
    e478:	2800      	cmp	r0, #0
    e47a:	d0e6      	beq.n	e44a <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    e47c:	4629      	mov	r1, r5
    e47e:	4630      	mov	r0, r6
    e480:	f007 f802 	bl	15488 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    e484:	2800      	cmp	r0, #0
    e486:	d0e0      	beq.n	e44a <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    e488:	2330      	movs	r3, #48	; 0x30
    e48a:	220c      	movs	r2, #12
    e48c:	436b      	muls	r3, r5
    e48e:	fb02 3306 	mla	r3, r2, r6, r3
    e492:	4a12      	ldr	r2, [pc, #72]	; (e4dc <mayfly_enqueue+0x9c>)
    e494:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    e496:	7a93      	ldrb	r3, [r2, #10]
    e498:	7ad2      	ldrb	r2, [r2, #11]
    e49a:	1a9b      	subs	r3, r3, r2
    e49c:	bf18      	it	ne
    e49e:	2301      	movne	r3, #1
    e4a0:	e7d4      	b.n	e44c <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    e4a2:	3202      	adds	r2, #2
    e4a4:	b2d2      	uxtb	r2, r2
    e4a6:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    e4a8:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    e4ac:	4798      	blx	r3

	return 0;
    e4ae:	2000      	movs	r0, #0
}
    e4b0:	bd70      	pop	{r4, r5, r6, pc}
	if (!chain) {
    e4b2:	2b00      	cmp	r3, #0
    e4b4:	d0f8      	beq.n	e4a8 <mayfly_enqueue+0x68>
	m->_req = ack + 1;
    e4b6:	3201      	adds	r2, #1
    e4b8:	b2d2      	uxtb	r2, r2
    e4ba:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    e4bc:	2304      	movs	r3, #4
    e4be:	2230      	movs	r2, #48	; 0x30
    e4c0:	fb12 3205 	smlabb	r2, r2, r5, r3
    e4c4:	230c      	movs	r3, #12
    e4c6:	fb13 2306 	smlabb	r3, r3, r6, r2
    e4ca:	4a04      	ldr	r2, [pc, #16]	; (e4dc <mayfly_enqueue+0x9c>)
    e4cc:	6860      	ldr	r0, [r4, #4]
    e4ce:	441a      	add	r2, r3
    e4d0:	4621      	mov	r1, r4
    e4d2:	f00e f9a3 	bl	1c81c <memq_enqueue>
    e4d6:	e7c5      	b.n	e464 <mayfly_enqueue+0x24>
    e4d8:	20002fc3 	.word	0x20002fc3
    e4dc:	20001c68 	.word	0x20001c68

0000e4e0 <mayfly_run>:
		}
	}
}

void mayfly_run(uint8_t callee_id)
{
    e4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
    e4e4:	4b55      	ldr	r3, [pc, #340]	; (e63c <mayfly_run+0x15c>)
    e4e6:	5c1a      	ldrb	r2, [r3, r0]
{
    e4e8:	b089      	sub	sp, #36	; 0x24
    e4ea:	4604      	mov	r4, r0
	if (!mfp[callee_id]) {
    e4ec:	2a00      	cmp	r2, #0
    e4ee:	f000 809e 	beq.w	e62e <mayfly_run+0x14e>
		return;
	}
	mfp[callee_id] = 0U;
    e4f2:	f04f 0800 	mov.w	r8, #0
    e4f6:	f803 8000 	strb.w	r8, [r3, r0]

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
    e4fa:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    e4fe:	011b      	lsls	r3, r3, #4
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    e500:	4e4f      	ldr	r6, [pc, #316]	; (e640 <mayfly_run+0x160>)
    e502:	9304      	str	r3, [sp, #16]
    e504:	2504      	movs	r5, #4
    e506:	233c      	movs	r3, #60	; 0x3c
    e508:	fb13 5300 	smlabb	r3, r3, r0, r5
    e50c:	18f3      	adds	r3, r6, r3
    e50e:	9303      	str	r3, [sp, #12]
	uint8_t disable = 0U;
    e510:	46c3      	mov	fp, r8
	while (caller_id--) {
    e512:	3d01      	subs	r5, #1
    e514:	b2ed      	uxtb	r5, r5
    e516:	2dff      	cmp	r5, #255	; 0xff
    e518:	d10f      	bne.n	e53a <mayfly_run+0x5a>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    e51a:	f1bb 0f00 	cmp.w	fp, #0
    e51e:	f000 8086 	beq.w	e62e <mayfly_run+0x14e>
    e522:	f1b8 0f00 	cmp.w	r8, #0
    e526:	f040 8082 	bne.w	e62e <mayfly_run+0x14e>
		mayfly_enable_cb(callee_id, callee_id, 0);
    e52a:	4642      	mov	r2, r8
    e52c:	4621      	mov	r1, r4
    e52e:	4620      	mov	r0, r4
	}
}
    e530:	b009      	add	sp, #36	; 0x24
    e532:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		mayfly_enable_cb(callee_id, callee_id, 0);
    e536:	f006 bf87 	b.w	15448 <mayfly_enable_cb>
		struct mayfly *m = 0;
    e53a:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    e53c:	f04f 090c 	mov.w	r9, #12
		struct mayfly *m = 0;
    e540:	9307      	str	r3, [sp, #28]
		link = memq_peek(mft[callee_id][caller_id].head,
    e542:	fb09 fa05 	mul.w	sl, r9, r5
    e546:	2330      	movs	r3, #48	; 0x30
    e548:	fb03 a304 	mla	r3, r3, r4, sl
    e54c:	18f1      	adds	r1, r6, r3
    e54e:	58f0      	ldr	r0, [r6, r3]
    e550:	6849      	ldr	r1, [r1, #4]
    e552:	aa07      	add	r2, sp, #28
    e554:	f00e f969 	bl	1c82a <memq_peek>
		memq_dequeue(mft[callee_id][caller_id].tail,
    e558:	9b04      	ldr	r3, [sp, #16]
    e55a:	fb19 3905 	smlabb	r9, r9, r5, r3
    e55e:	eb06 0309 	add.w	r3, r6, r9
		link = memq_peek(mft[callee_id][caller_id].head,
    e562:	4607      	mov	r7, r0
		memq_dequeue(mft[callee_id][caller_id].tail,
    e564:	9302      	str	r3, [sp, #8]
		while (link) {
    e566:	2f00      	cmp	r7, #0
    e568:	d043      	beq.n	e5f2 <mayfly_run+0x112>
			state = (m->_req - m->_ack) & 0x03;
    e56a:	9b07      	ldr	r3, [sp, #28]
    e56c:	f893 9000 	ldrb.w	r9, [r3]
    e570:	785a      	ldrb	r2, [r3, #1]
    e572:	eba9 0902 	sub.w	r9, r9, r2
    e576:	f009 0903 	and.w	r9, r9, #3
			if (state == 1U) {
    e57a:	f1b9 0f01 	cmp.w	r9, #1
    e57e:	d104      	bne.n	e58a <mayfly_run+0xaa>
				m->_ack--;
    e580:	3a01      	subs	r2, #1
    e582:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    e584:	e9d3 0202 	ldrd	r0, r2, [r3, #8]
    e588:	4790      	blx	r2
			dequeue(callee_id, caller_id, link, m);
    e58a:	9b07      	ldr	r3, [sp, #28]
	if (((req - m->_ack) & 0x03) != 1U) {
    e58c:	9305      	str	r3, [sp, #20]
	req = m->_req;
    e58e:	781a      	ldrb	r2, [r3, #0]
    e590:	b2d1      	uxtb	r1, r2
    e592:	9101      	str	r1, [sp, #4]
	if (((req - m->_ack) & 0x03) != 1U) {
    e594:	7859      	ldrb	r1, [r3, #1]
    e596:	1a52      	subs	r2, r2, r1
    e598:	f002 0203 	and.w	r2, r2, #3
    e59c:	2a01      	cmp	r2, #1
    e59e:	d019      	beq.n	e5d4 <mayfly_run+0xf4>
		memq_dequeue(mft[callee_id][caller_id].tail,
    e5a0:	2030      	movs	r0, #48	; 0x30
    e5a2:	fb00 a004 	mla	r0, r0, r4, sl
    e5a6:	4430      	add	r0, r6
    e5a8:	9902      	ldr	r1, [sp, #8]
    e5aa:	6840      	ldr	r0, [r0, #4]
    e5ac:	2200      	movs	r2, #0
    e5ae:	f00e f944 	bl	1c83a <memq_dequeue>
		m->_link = link;
    e5b2:	9b05      	ldr	r3, [sp, #20]
		m->_ack = req;
    e5b4:	9a01      	ldr	r2, [sp, #4]
		ack = m->_ack;
    e5b6:	7859      	ldrb	r1, [r3, #1]
		m->_ack = req;
    e5b8:	705a      	strb	r2, [r3, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    e5ba:	781a      	ldrb	r2, [r3, #0]
		m->_link = link;
    e5bc:	605f      	str	r7, [r3, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
    e5be:	1a52      	subs	r2, r2, r1
    e5c0:	f002 0203 	and.w	r2, r2, #3
    e5c4:	2a01      	cmp	r2, #1
    e5c6:	d105      	bne.n	e5d4 <mayfly_run+0xf4>
			m->_ack = ack;
    e5c8:	7059      	strb	r1, [r3, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    e5ca:	9a03      	ldr	r2, [sp, #12]
    e5cc:	4619      	mov	r1, r3
    e5ce:	4638      	mov	r0, r7
    e5d0:	f00e f924 	bl	1c81c <memq_enqueue>
			link = memq_peek(mft[callee_id][caller_id].head,
    e5d4:	2330      	movs	r3, #48	; 0x30
    e5d6:	fb03 a304 	mla	r3, r3, r4, sl
    e5da:	18f1      	adds	r1, r6, r3
    e5dc:	58f0      	ldr	r0, [r6, r3]
    e5de:	6849      	ldr	r1, [r1, #4]
    e5e0:	aa07      	add	r2, sp, #28
    e5e2:	f00e f922 	bl	1c82a <memq_peek>
			if (state == 1U) {
    e5e6:	f1b9 0f01 	cmp.w	r9, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    e5ea:	4607      	mov	r7, r0
			if (state == 1U) {
    e5ec:	d1bb      	bne.n	e566 <mayfly_run+0x86>
				if (caller_id || link) {
    e5ee:	b9bd      	cbnz	r5, e620 <mayfly_run+0x140>
    e5f0:	b9b0      	cbnz	r0, e620 <mayfly_run+0x140>
		if (mft[callee_id][caller_id].disable_req !=
    e5f2:	2230      	movs	r2, #48	; 0x30
    e5f4:	210c      	movs	r1, #12
    e5f6:	4362      	muls	r2, r4
    e5f8:	fb01 2205 	mla	r2, r1, r5, r2
    e5fc:	4432      	add	r2, r6
    e5fe:	7a93      	ldrb	r3, [r2, #10]
    e600:	7ad0      	ldrb	r0, [r2, #11]
    e602:	4298      	cmp	r0, r3
    e604:	d116      	bne.n	e634 <mayfly_run+0x154>
		if (mft[callee_id][caller_id].enable_req !=
    e606:	2330      	movs	r3, #48	; 0x30
    e608:	4363      	muls	r3, r4
    e60a:	fb01 3305 	mla	r3, r1, r5, r3
    e60e:	4433      	add	r3, r6
    e610:	7a1a      	ldrb	r2, [r3, #8]
    e612:	7a59      	ldrb	r1, [r3, #9]
    e614:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    e616:	bf1c      	itt	ne
    e618:	725a      	strbne	r2, [r3, #9]
			enable = 1U;
    e61a:	f04f 0801 	movne.w	r8, #1
    e61e:	e778      	b.n	e512 <mayfly_run+0x32>
					mfp[callee_id] = 1U;
    e620:	4b06      	ldr	r3, [pc, #24]	; (e63c <mayfly_run+0x15c>)
    e622:	2201      	movs	r2, #1
    e624:	551a      	strb	r2, [r3, r4]
					mayfly_pend(callee_id, callee_id);
    e626:	4621      	mov	r1, r4
    e628:	4620      	mov	r0, r4
    e62a:	f006 ff4d 	bl	154c8 <mayfly_pend>
}
    e62e:	b009      	add	sp, #36	; 0x24
    e630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mft[callee_id][caller_id].disable_ack =
    e634:	72d3      	strb	r3, [r2, #11]
			disable = 1U;
    e636:	f04f 0b01 	mov.w	fp, #1
    e63a:	e7e4      	b.n	e606 <mayfly_run+0x126>
    e63c:	20002fc3 	.word	0x20002fc3
    e640:	20001c68 	.word	0x20001c68

0000e644 <ticker_job>:
 * @param param Pointer to ticker instance
 *
 * @internal
 */
void ticker_job(void *param)
{
    e644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t flag_compare_update;

	DEBUG_TICKER_JOB(1);

	/* Defer job, as worker is running */
	if (instance->worker_trigger) {
    e648:	7fc3      	ldrb	r3, [r0, #31]
{
    e64a:	b08b      	sub	sp, #44	; 0x2c
    e64c:	4604      	mov	r4, r0
	if (instance->worker_trigger) {
    e64e:	2b00      	cmp	r3, #0
    e650:	f040 83bf 	bne.w	edd2 <ticker_job+0x78e>
		DEBUG_TICKER_JOB(0);
		return;
	}

	/* Defer job, as job is already running */
	if (instance->job_guard) {
    e654:	7f82      	ldrb	r2, [r0, #30]
    e656:	b14a      	cbz	r2, e66c <ticker_job+0x28>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_JOB, 1,
    e658:	6a45      	ldr	r5, [r0, #36]	; 0x24
    e65a:	4603      	mov	r3, r0
    e65c:	2201      	movs	r2, #1
    e65e:	2104      	movs	r1, #4
	/* Permit worker to run */
	instance->job_guard = 0U;

	/* trigger worker if deferred */
	if (instance->worker_trigger) {
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    e660:	2004      	movs	r0, #4
    e662:	46ac      	mov	ip, r5
				   instance);
	}

	DEBUG_TICKER_JOB(0);
}
    e664:	b00b      	add	sp, #44	; 0x2c
    e666:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    e66a:	4760      	bx	ip
	ticks_previous = instance->ticks_current;
    e66c:	6943      	ldr	r3, [r0, #20]
    e66e:	9304      	str	r3, [sp, #16]
	instance->job_guard = 1U;
    e670:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    e672:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1U;
    e674:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    e676:	7ac0      	ldrb	r0, [r0, #11]
    e678:	4298      	cmp	r0, r3
    e67a:	d057      	beq.n	e72c <ticker_job+0xe8>
	uint8_t idx = *ticks_elapsed_index + 1;
    e67c:	440b      	add	r3, r1
    e67e:	b2db      	uxtb	r3, r3
		idx = 0U;
    e680:	2b02      	cmp	r3, #2
    e682:	bf08      	it	eq
    e684:	2300      	moveq	r3, #0
	*ticks_elapsed_index = idx;
    e686:	72a3      	strb	r3, [r4, #10]
		ticks_elapsed =
    e688:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		flag_elapsed = 1U;
    e68c:	9101      	str	r1, [sp, #4]
		ticks_elapsed =
    e68e:	68db      	ldr	r3, [r3, #12]
    e690:	9300      	str	r3, [sp, #0]
		instance->ticks_current += ticks_elapsed;
    e692:	9a00      	ldr	r2, [sp, #0]
    e694:	9b04      	ldr	r3, [sp, #16]
    e696:	4413      	add	r3, r2
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
    e698:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    e69c:	6163      	str	r3, [r4, #20]
	ticker_id_old_head = instance->ticker_id_head;
    e69e:	7f63      	ldrb	r3, [r4, #29]
    e6a0:	9303      	str	r3, [sp, #12]
	node = &instance->nodes[0];
    e6a2:	6823      	ldr	r3, [r4, #0]
    e6a4:	9302      	str	r3, [sp, #8]
	users = &instance->users[0];
    e6a6:	6863      	ldr	r3, [r4, #4]
    e6a8:	9308      	str	r3, [sp, #32]
	while (count_user--) {
    e6aa:	7a63      	ldrb	r3, [r4, #9]
    e6ac:	3b01      	subs	r3, #1
    e6ae:	fa5f fb83 	uxtb.w	fp, r3
	pending = 0U;
    e6b2:	2300      	movs	r3, #0
    e6b4:	9305      	str	r3, [sp, #20]
	insert_head = TICKER_NULL;
    e6b6:	f04f 09ff 	mov.w	r9, #255	; 0xff
	while (count_user--) {
    e6ba:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    e6be:	d138      	bne.n	e732 <ticker_job+0xee>
	if (instance->ticker_id_head != ticker_id_old_head) {
    e6c0:	7f63      	ldrb	r3, [r4, #29]
		flag_compare_update = 1U;
    e6c2:	9a03      	ldr	r2, [sp, #12]
    e6c4:	1a9b      	subs	r3, r3, r2
    e6c6:	bf18      	it	ne
    e6c8:	2301      	movne	r3, #1
    e6ca:	9302      	str	r3, [sp, #8]
	if (flag_elapsed) {
    e6cc:	9b01      	ldr	r3, [sp, #4]
    e6ce:	2b00      	cmp	r3, #0
    e6d0:	f000 8225 	beq.w	eb1e <ticker_job+0x4da>
	ticks_now = cntr_cnt_get();
    e6d4:	f006 fb10 	bl	14cf8 <cntr_cnt_get>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    e6d8:	9b04      	ldr	r3, [sp, #16]
	while (instance->ticker_id_head != TICKER_NULL) {
    e6da:	9f00      	ldr	r7, [sp, #0]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    e6dc:	eba0 0b03 	sub.w	fp, r0, r3
	node = &instance->nodes[0];
    e6e0:	6823      	ldr	r3, [r4, #0]
    e6e2:	9306      	str	r3, [sp, #24]
	ticks_expired = 0U;
    e6e4:	2300      	movs	r3, #0
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    e6e6:	f02b 4b7f 	bic.w	fp, fp, #4278190080	; 0xff000000
	ticks_expired = 0U;
    e6ea:	9307      	str	r3, [sp, #28]
	while (instance->ticker_id_head != TICKER_NULL) {
    e6ec:	7f66      	ldrb	r6, [r4, #29]
    e6ee:	2eff      	cmp	r6, #255	; 0xff
    e6f0:	d00d      	beq.n	e70e <ticker_job+0xca>
		ticker = &node[id_expired];
    e6f2:	b235      	sxth	r5, r6
    e6f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    e6f8:	012b      	lsls	r3, r5, #4
    e6fa:	9308      	str	r3, [sp, #32]
    e6fc:	9b06      	ldr	r3, [sp, #24]
    e6fe:	eb03 1505 	add.w	r5, r3, r5, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
    e702:	68ab      	ldr	r3, [r5, #8]
		if (ticks_elapsed < ticks_to_expire) {
    e704:	42bb      	cmp	r3, r7
    e706:	f240 80c8 	bls.w	e89a <ticker_job+0x256>
			ticker->ticks_to_expire -= ticks_elapsed;
    e70a:	1bdb      	subs	r3, r3, r7
    e70c:	60ab      	str	r3, [r5, #8]
			flag_compare_update = 1U;
    e70e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
    e712:	9903      	ldr	r1, [sp, #12]
		ticker_job_list_insert(instance, insert_head);
    e714:	4620      	mov	r0, r4
			flag_compare_update = 1U;
    e716:	42b1      	cmp	r1, r6
    e718:	bf18      	it	ne
    e71a:	4613      	movne	r3, r2
		ticker_job_list_insert(instance, insert_head);
    e71c:	4649      	mov	r1, r9
			flag_compare_update = 1U;
    e71e:	9302      	str	r3, [sp, #8]
		ticker_job_list_insert(instance, insert_head);
    e720:	f00e f900 	bl	1c924 <ticker_job_list_insert>
	nodes = &instance->nodes[0];
    e724:	6825      	ldr	r5, [r4, #0]
	uint8_t  rescheduled = 0U;
    e726:	2300      	movs	r3, #0
		ticker_id_head = instance->ticker_id_head;
    e728:	7f67      	ldrb	r7, [r4, #29]
		while (ticker_id_head != TICKER_NULL) {
    e72a:	e16c      	b.n	ea06 <ticker_job+0x3c2>
		flag_elapsed = 0U;
    e72c:	9201      	str	r2, [sp, #4]
		ticks_elapsed = 0U;
    e72e:	9200      	str	r2, [sp, #0]
    e730:	e7b5      	b.n	e69e <ticker_job+0x5a>
		user = &users[count_user];
    e732:	9b08      	ldr	r3, [sp, #32]
    e734:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
		user_ops = &user->user_op[0];
    e738:	f8d8 3004 	ldr.w	r3, [r8, #4]
    e73c:	9306      	str	r3, [sp, #24]
		while (user->middle != user->last) {
    e73e:	f898 1003 	ldrb.w	r1, [r8, #3]
			user_op = &user_ops[user->middle];
    e742:	2034      	movs	r0, #52	; 0x34
		while (user->middle != user->last) {
    e744:	f898 7002 	ldrb.w	r7, [r8, #2]
    e748:	428f      	cmp	r7, r1
    e74a:	f000 82dc 	beq.w	ed06 <ticker_job+0x6c2>
			user_op = &user_ops[user->middle];
    e74e:	9b06      	ldr	r3, [sp, #24]
			if (middle == user->count_user_op) {
    e750:	f898 5000 	ldrb.w	r5, [r8]
			user_op = &user_ops[user->middle];
    e754:	fb17 f200 	smulbb	r2, r7, r0
    e758:	189e      	adds	r6, r3, r2
			middle = user->middle + 1;
    e75a:	1c7b      	adds	r3, r7, #1
    e75c:	b2db      	uxtb	r3, r3
				middle = 0U;
    e75e:	429d      	cmp	r5, r3
    e760:	bf08      	it	eq
    e762:	2300      	moveq	r3, #0
			user->middle = middle;
    e764:	f888 3002 	strb.w	r3, [r8, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    e768:	9b06      	ldr	r3, [sp, #24]
    e76a:	5c9a      	ldrb	r2, [r3, r2]
    e76c:	2a04      	cmp	r2, #4
    e76e:	d9e9      	bls.n	e744 <ticker_job+0x100>
			ticker = &node[user_op->id];
    e770:	7871      	ldrb	r1, [r6, #1]
    e772:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    e776:	012b      	lsls	r3, r5, #4
    e778:	9309      	str	r3, [sp, #36]	; 0x24
    e77a:	9b02      	ldr	r3, [sp, #8]
    e77c:	eb03 1505 	add.w	r5, r3, r5, lsl #4
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    e780:	2a08      	cmp	r2, #8
			state = (ticker->req - ticker->ack) & 0xff;
    e782:	786b      	ldrb	r3, [r5, #1]
    e784:	78a8      	ldrb	r0, [r5, #2]
    e786:	eba3 0300 	sub.w	r3, r3, r0
    e78a:	b2db      	uxtb	r3, r3
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    e78c:	d818      	bhi.n	e7c0 <ticker_job+0x17c>
    e78e:	b1bb      	cbz	r3, e7c0 <ticker_job+0x17c>
			    (state == 0U) ||
    e790:	2a05      	cmp	r2, #5
    e792:	f040 82ab 	bne.w	ecec <ticker_job+0x6a8>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
    e796:	6872      	ldr	r2, [r6, #4]
    e798:	2a00      	cmp	r2, #0
    e79a:	f040 82b9 	bne.w	ed10 <ticker_job+0x6cc>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
    e79e:	68b2      	ldr	r2, [r6, #8]
    e7a0:	2a00      	cmp	r2, #0
    e7a2:	f040 82b5 	bne.w	ed10 <ticker_job+0x6cc>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
    e7a6:	68f2      	ldr	r2, [r6, #12]
    e7a8:	2a00      	cmp	r2, #0
    e7aa:	f040 82b1 	bne.w	ed10 <ticker_job+0x6cc>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
    e7ae:	6932      	ldr	r2, [r6, #16]
    e7b0:	2a00      	cmp	r2, #0
    e7b2:	f040 82ad 	bne.w	ed10 <ticker_job+0x6cc>
			     (user_op->params.update.lazy == 0U) &&
    e7b6:	6972      	ldr	r2, [r6, #20]
    e7b8:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    e7bc:	f040 82a8 	bne.w	ed10 <ticker_job+0x6cc>
				ticker_job_op_cb(user_op,
    e7c0:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    e7c2:	4630      	mov	r0, r6
    e7c4:	f00e f8a4 	bl	1c910 <ticker_job_op_cb>
}
    e7c8:	e7b9      	b.n	e73e <ticker_job+0xfa>
	if ((ticker->remainder_current >= BIT(31)) ||
    e7ca:	6a69      	ldr	r1, [r5, #36]	; 0x24
    e7cc:	4f92      	ldr	r7, [pc, #584]	; (ea18 <ticker_job+0x3d4>)
    e7ce:	f8df a24c 	ldr.w	sl, [pc, #588]	; ea1c <ticker_job+0x3d8>
    e7d2:	19cf      	adds	r7, r1, r7
    e7d4:	4557      	cmp	r7, sl
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
    e7d6:	bf81      	itttt	hi
    e7d8:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    e7dc:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    e7e0:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
    e7e4:	6269      	strhi	r1, [r5, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    e7e6:	e9d5 1708 	ldrd	r1, r7, [r5, #32]
		decrement++;
    e7ea:	bf8c      	ite	hi
    e7ec:	f04f 0a01 	movhi.w	sl, #1
	uint8_t decrement = 0U;
    e7f0:	f04f 0a00 	movls.w	sl, #0
	ticker->remainder_current -= ticker->remainder_periodic;
    e7f4:	1a79      	subs	r1, r7, r1
			ticks_to_expire -= ticker->ticks_periodic +
    e7f6:	4482      	add	sl, r0
			ticker->lazy_current--;
    e7f8:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
    e7fc:	6269      	str	r1, [r5, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    e7fe:	eba3 030a 	sub.w	r3, r3, sl
			ticker->lazy_current--;
    e802:	f8a5 e01e 	strh.w	lr, [r5, #30]
    e806:	e2a9      	b.n	ed5c <ticker_job+0x718>
	ticker->remainder_current += ticker->remainder_periodic;
    e808:	e9d5 1708 	ldrd	r1, r7, [r5, #32]
    e80c:	4439      	add	r1, r7
	if ((ticker->remainder_current < BIT(31)) &&
    e80e:	4f82      	ldr	r7, [pc, #520]	; (ea18 <ticker_job+0x3d4>)
    e810:	f8df a208 	ldr.w	sl, [pc, #520]	; ea1c <ticker_job+0x3d8>
    e814:	19cf      	adds	r7, r1, r7
    e816:	4557      	cmp	r7, sl
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    e818:	bf9d      	ittte	ls
    e81a:	f1a1 71e8 	subls.w	r1, r1, #30408704	; 0x1d00000
    e81e:	f5a1 31d4 	subls.w	r1, r1, #108544	; 0x1a800
    e822:	f5a1 71a5 	subls.w	r1, r1, #330	; 0x14a
	ticker->remainder_current += ticker->remainder_periodic;
    e826:	6269      	strhi	r1, [r5, #36]	; 0x24
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    e828:	bf96      	itet	ls
    e82a:	6269      	strls	r1, [r5, #36]	; 0x24
	return 0;
    e82c:	2100      	movhi	r1, #0
		return 1;
    e82e:	2101      	movls	r1, #1
			ticks_to_expire += ticker->ticks_periodic +
    e830:	4401      	add	r1, r0
			ticker->lazy_current++;
    e832:	f10e 0e01 	add.w	lr, lr, #1
			ticks_to_expire += ticker->ticks_periodic +
    e836:	440b      	add	r3, r1
			ticker->lazy_current++;
    e838:	f8a5 e01e 	strh.w	lr, [r5, #30]
    e83c:	e295      	b.n	ed6a <ticker_job+0x726>
		if (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS) {
    e83e:	2a06      	cmp	r2, #6
    e840:	d005      	beq.n	e84e <ticker_job+0x20a>
			ticker->ticks_to_expire = ticker_dequeue(instance,
    e842:	4620      	mov	r0, r4
    e844:	f00e f81b 	bl	1c87e <ticker_dequeue>
			ticker->req = ticker->ack;
    e848:	78ab      	ldrb	r3, [r5, #2]
			ticker->ticks_to_expire = ticker_dequeue(instance,
    e84a:	60a8      	str	r0, [r5, #8]
			ticker->req = ticker->ack;
    e84c:	706b      	strb	r3, [r5, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    e84e:	7f22      	ldrb	r2, [r4, #28]
    e850:	7873      	ldrb	r3, [r6, #1]
    e852:	429a      	cmp	r2, r3
    e854:	f040 82bb 	bne.w	edce <ticker_job+0x78a>
			instance->ticker_id_slot_previous = TICKER_NULL;
    e858:	23ff      	movs	r3, #255	; 0xff
    e85a:	7723      	strb	r3, [r4, #28]
			if ((user_op->op == TICKER_USER_OP_TYPE_YIELD_ABS) ||
    e85c:	7833      	ldrb	r3, [r6, #0]
    e85e:	2b06      	cmp	r3, #6
    e860:	d001      	beq.n	e866 <ticker_job+0x222>
    e862:	2b08      	cmp	r3, #8
    e864:	d10d      	bne.n	e882 <ticker_job+0x23e>
				ticks_at_yield =
    e866:	6870      	ldr	r0, [r6, #4]
			ticks_current = instance->ticks_current;
    e868:	6963      	ldr	r3, [r4, #20]
			if (!((ticks_at_yield - ticks_current) &
    e86a:	1ac2      	subs	r2, r0, r3
    e86c:	0211      	lsls	r1, r2, #8
    e86e:	d40b      	bmi.n	e888 <ticker_job+0x244>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    e870:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
    e874:	9a00      	ldr	r2, [sp, #0]
    e876:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
    e878:	69a2      	ldr	r2, [r4, #24]
    e87a:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
    e87c:	bf88      	it	hi
    e87e:	61a3      	strhi	r3, [r4, #24]
    e880:	e2a5      	b.n	edce <ticker_job+0x78a>
				ticks_at_yield = cntr_cnt_get();
    e882:	f006 fa39 	bl	14cf8 <cntr_cnt_get>
    e886:	e7ef      	b.n	e868 <ticker_job+0x224>
				if (ticks_elapsed > ticks_used) {
    e888:	9a00      	ldr	r2, [sp, #0]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    e88a:	1a1b      	subs	r3, r3, r0
    e88c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
    e890:	429a      	cmp	r2, r3
					ticks_used = ticks_elapsed -
    e892:	bf8c      	ite	hi
    e894:	1ad3      	subhi	r3, r2, r3
					ticks_used = 0;
    e896:	2300      	movls	r3, #0
    e898:	e7ee      	b.n	e878 <ticker_job+0x234>
		ticks_expired += ticks_to_expire;
    e89a:	9a07      	ldr	r2, [sp, #28]
		skip_collision = (ticker->lazy_current != 0U);
    e89c:	f8b5 c01e 	ldrh.w	ip, [r5, #30]
		ticks_expired += ticks_to_expire;
    e8a0:	441a      	add	r2, r3
    e8a2:	9207      	str	r2, [sp, #28]
		if (instance->ticks_slot_previous > ticks_to_expire) {
    e8a4:	69a2      	ldr	r2, [r4, #24]
    e8a6:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
    e8a8:	eba7 0703 	sub.w	r7, r7, r3
		ticks_latency -= ticks_to_expire;
    e8ac:	ebab 0b03 	sub.w	fp, fp, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    e8b0:	bf25      	ittet	cs
    e8b2:	23ff      	movcs	r3, #255	; 0xff
    e8b4:	7723      	strbcs	r3, [r4, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
    e8b6:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
    e8b8:	2300      	movcs	r3, #0
    e8ba:	61a3      	str	r3, [r4, #24]
		state = (ticker->req - ticker->ack) & 0xff;
    e8bc:	78a9      	ldrb	r1, [r5, #2]
    e8be:	786b      	ldrb	r3, [r5, #1]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    e8c0:	69a8      	ldr	r0, [r5, #24]
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
    e8c2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
		state = (ticker->req - ticker->ack) & 0xff;
    e8c4:	1a5b      	subs	r3, r3, r1
    e8c6:	b2db      	uxtb	r3, r3
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    e8c8:	b160      	cbz	r0, e8e4 <ticker_job+0x2a0>
    e8ca:	2b02      	cmp	r3, #2
    e8cc:	d10a      	bne.n	e8e4 <ticker_job+0x2a0>
    e8ce:	f1bc 0f00 	cmp.w	ip, #0
    e8d2:	d107      	bne.n	e8e4 <ticker_job+0x2a0>
    e8d4:	b122      	cbz	r2, e8e0 <ticker_job+0x29c>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
    e8d6:	f892 e008 	ldrb.w	lr, [r2, #8]
    e8da:	f1be 0f01 	cmp.w	lr, #1
    e8de:	d001      	beq.n	e8e4 <ticker_job+0x2a0>
			instance->ticker_id_slot_previous = id_expired;
    e8e0:	7726      	strb	r6, [r4, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    e8e2:	61a0      	str	r0, [r4, #24]
		ticker->ticks_to_expire = 0U;
    e8e4:	2000      	movs	r0, #0
    e8e6:	60a8      	str	r0, [r5, #8]
		instance->ticker_id_head = ticker->next;
    e8e8:	f8dd e020 	ldr.w	lr, [sp, #32]
    e8ec:	9806      	ldr	r0, [sp, #24]
    e8ee:	f810 000e 	ldrb.w	r0, [r0, lr]
    e8f2:	7760      	strb	r0, [r4, #29]
		if ((ticker->ticks_periodic != 0U) ||
    e8f4:	f8d5 e004 	ldr.w	lr, [r5, #4]
    e8f8:	f1be 0f00 	cmp.w	lr, #0
    e8fc:	d119      	bne.n	e932 <ticker_job+0x2ee>
    e8fe:	2a00      	cmp	r2, #0
    e900:	d064      	beq.n	e9cc <ticker_job+0x388>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
    e902:	7a10      	ldrb	r0, [r2, #8]
    e904:	2801      	cmp	r0, #1
    e906:	d161      	bne.n	e9cc <ticker_job+0x388>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
    e908:	7a13      	ldrb	r3, [r2, #8]
    e90a:	2b01      	cmp	r3, #1
    e90c:	d113      	bne.n	e936 <ticker_job+0x2f2>
				ticker->ticks_to_expire = ticks_elapsed;
    e90e:	60af      	str	r7, [r5, #8]
				ticker->req = ticker->ack;
    e910:	7069      	strb	r1, [r5, #1]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    e912:	9b04      	ldr	r3, [sp, #16]
    e914:	9a07      	ldr	r2, [sp, #28]
    e916:	6961      	ldr	r1, [r4, #20]
    e918:	189a      	adds	r2, r3, r2
    e91a:	4628      	mov	r0, r5
    e91c:	f00d ffda 	bl	1c8d4 <ticks_to_expire_prep>
			ticker->next = *insert_head;
    e920:	9b06      	ldr	r3, [sp, #24]
    e922:	9a08      	ldr	r2, [sp, #32]
    e924:	f803 9002 	strb.w	r9, [r3, r2]
			ticker->req++;
    e928:	786b      	ldrb	r3, [r5, #1]
    e92a:	3301      	adds	r3, #1
    e92c:	706b      	strb	r3, [r5, #1]
			ticker->req = ticker->ack;
    e92e:	46b1      	mov	r9, r6
    e930:	e6dc      	b.n	e6ec <ticker_job+0xa8>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
    e932:	2a00      	cmp	r2, #0
    e934:	d1e8      	bne.n	e908 <ticker_job+0x2c4>
				if (!ticker->lazy_current) {
    e936:	f1bc 0f00 	cmp.w	ip, #0
    e93a:	d125      	bne.n	e988 <ticker_job+0x344>
					lazy_periodic = ticker->lazy_periodic;
    e93c:	8bab      	ldrh	r3, [r5, #28]
				while (count--) {
    e93e:	4698      	mov	r8, r3
				ticks_to_expire = 0U;
    e940:	2000      	movs	r0, #0
	ticker->remainder_current += ticker->remainder_periodic;
    e942:	e9d5 1208 	ldrd	r1, r2, [r5, #32]
    e946:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    e948:	4933      	ldr	r1, [pc, #204]	; (ea18 <ticker_job+0x3d4>)
    e94a:	f8df a0d0 	ldr.w	sl, [pc, #208]	; ea1c <ticker_job+0x3d8>
    e94e:	1851      	adds	r1, r2, r1
    e950:	4551      	cmp	r1, sl
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    e952:	bf9f      	itttt	ls
    e954:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
    e958:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
    e95c:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
    e960:	626a      	strls	r2, [r5, #36]	; 0x24
		return 1;
    e962:	bf92      	itee	ls
    e964:	9a01      	ldrls	r2, [sp, #4]
	ticker->remainder_current += ticker->remainder_periodic;
    e966:	626a      	strhi	r2, [r5, #36]	; 0x24
	return 0;
    e968:	2200      	movhi	r2, #0
					ticks_to_expire +=
    e96a:	4472      	add	r2, lr
				while (count--) {
    e96c:	f1b8 0801 	subs.w	r8, r8, #1
					ticks_to_expire +=
    e970:	4410      	add	r0, r2
				while (count--) {
    e972:	d2e6      	bcs.n	e942 <ticker_job+0x2fe>
				} else if (!ticker->must_expire) {
    e974:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    e978:	b332      	cbz	r2, e9c8 <ticker_job+0x384>
				lazy = 0U;
    e97a:	2200      	movs	r2, #0
				ticker->lazy_current += (lazy_periodic + lazy);
    e97c:	4413      	add	r3, r2
    e97e:	449c      	add	ip, r3
				ticker->ticks_to_expire = ticks_to_expire;
    e980:	60a8      	str	r0, [r5, #8]
				ticker->lazy_current += (lazy_periodic + lazy);
    e982:	f8a5 c01e 	strh.w	ip, [r5, #30]
    e986:	e7c4      	b.n	e912 <ticker_job+0x2ce>
					ticker->req = ticker->ack;
    e988:	7069      	strb	r1, [r5, #1]
					lazy_periodic = 0U;
    e98a:	2300      	movs	r3, #0
    e98c:	e7d7      	b.n	e93e <ticker_job+0x2fa>
	ticker->remainder_current += ticker->remainder_periodic;
    e98e:	e9d5 1208 	ldrd	r1, r2, [r5, #32]
    e992:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    e994:	4920      	ldr	r1, [pc, #128]	; (ea18 <ticker_job+0x3d4>)
    e996:	f8df a084 	ldr.w	sl, [pc, #132]	; ea1c <ticker_job+0x3d8>
    e99a:	1851      	adds	r1, r2, r1
    e99c:	4551      	cmp	r1, sl
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    e99e:	bf9f      	itttt	ls
    e9a0:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
    e9a4:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
    e9a8:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
    e9ac:	626a      	strls	r2, [r5, #36]	; 0x24
		return 1;
    e9ae:	bf92      	itee	ls
    e9b0:	9a01      	ldrls	r2, [sp, #4]
	ticker->remainder_current += ticker->remainder_periodic;
    e9b2:	626a      	strhi	r2, [r5, #36]	; 0x24
	return 0;
    e9b4:	2200      	movhi	r2, #0
						ticks_to_expire +=
    e9b6:	4472      	add	r2, lr
    e9b8:	4410      	add	r0, r2
						lazy++;
    e9ba:	f108 0801 	add.w	r8, r8, #1
					while (ticks_to_expire <
    e9be:	4583      	cmp	fp, r0
    e9c0:	fa1f f288 	uxth.w	r2, r8
    e9c4:	d8e3      	bhi.n	e98e <ticker_job+0x34a>
    e9c6:	e7d9      	b.n	e97c <ticker_job+0x338>
    e9c8:	4690      	mov	r8, r2
    e9ca:	e7f8      	b.n	e9be <ticker_job+0x37a>
			if (state && ((state == 1U) || skip_collision) &&
    e9cc:	b14b      	cbz	r3, e9e2 <ticker_job+0x39e>
    e9ce:	2b01      	cmp	r3, #1
    e9d0:	d002      	beq.n	e9d8 <ticker_job+0x394>
    e9d2:	f1bc 0f00 	cmp.w	ip, #0
    e9d6:	d004      	beq.n	e9e2 <ticker_job+0x39e>
			    ticker->fp_op_func) {
    e9d8:	6a2b      	ldr	r3, [r5, #32]
			if (state && ((state == 1U) || skip_collision) &&
    e9da:	b113      	cbz	r3, e9e2 <ticker_job+0x39e>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
    e9dc:	6a69      	ldr	r1, [r5, #36]	; 0x24
    e9de:	2001      	movs	r0, #1
    e9e0:	4798      	blx	r3
			ticker->req = ticker->ack;
    e9e2:	78ab      	ldrb	r3, [r5, #2]
    e9e4:	706b      	strb	r3, [r5, #1]
    e9e6:	464e      	mov	r6, r9
    e9e8:	e7a1      	b.n	e92e <ticker_job+0x2ea>
			ticker = &nodes[ticker_id_head];
    e9ea:	eb07 0247 	add.w	r2, r7, r7, lsl #1
    e9ee:	0111      	lsls	r1, r2, #4
    e9f0:	eb05 1202 	add.w	r2, r5, r2, lsl #4
			ext_data = ticker->ext_data;
    e9f4:	f815 e001 	ldrb.w	lr, [r5, r1]
    e9f8:	6a96      	ldr	r6, [r2, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
    e9fa:	b11e      	cbz	r6, ea04 <ticker_job+0x3c0>
    e9fc:	7a31      	ldrb	r1, [r6, #8]
    e9fe:	2901      	cmp	r1, #1
    ea00:	f000 816e 	beq.w	ece0 <ticker_job+0x69c>
			ticker_id_head = ticker->next;
    ea04:	4677      	mov	r7, lr
		while (ticker_id_head != TICKER_NULL) {
    ea06:	2fff      	cmp	r7, #255	; 0xff
    ea08:	d1ef      	bne.n	e9ea <ticker_job+0x3a6>
			flag_compare_update = 1U;
    ea0a:	2b00      	cmp	r3, #0
    ea0c:	9a02      	ldr	r2, [sp, #8]
    ea0e:	bf18      	it	ne
    ea10:	461a      	movne	r2, r3
    ea12:	9202      	str	r2, [sp, #8]
    ea14:	e087      	b.n	eb26 <ticker_job+0x4e2>
    ea16:	bf00      	nop
    ea18:	ff172b5a 	.word	0xff172b5a
    ea1c:	7f172b59 	.word	0x7f172b59
			instance->ticks_slot_previous > ticks_elapsed) {
    ea20:	69a0      	ldr	r0, [r4, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    ea22:	9b00      	ldr	r3, [sp, #0]
    ea24:	4283      	cmp	r3, r0
    ea26:	f080 815f 	bcs.w	ece8 <ticker_job+0x6a4>
			window_start_ticks = instance->ticks_slot_previous -
    ea2a:	1ac3      	subs	r3, r0, r3
		window_start_ticks = 0U;
    ea2c:	9301      	str	r3, [sp, #4]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    ea2e:	e9d6 3a00 	ldrd	r3, sl, [r6]
    ea32:	459a      	cmp	sl, r3
    ea34:	d25b      	bcs.n	eaee <ticker_job+0x4aa>
			ticks_slot_window = ext_data->ticks_slot_window -
    ea36:	f04f 0c00 	mov.w	ip, #0
    ea3a:	eba3 0b0a 	sub.w	fp, r3, sl
		ticker_id_iter = nodes[ticker_id_head].next;
    ea3e:	4671      	mov	r1, lr
			ticks_slot_window = ext_data->ticks_slot_window -
    ea40:	4663      	mov	r3, ip
		while (ticker_id_iter != TICKER_NULL &&
    ea42:	29ff      	cmp	r1, #255	; 0xff
    ea44:	d006      	beq.n	ea54 <ticker_job+0x410>
		       ticks_start_offset + ticker->ticks_slot <=
    ea46:	f8d2 8018 	ldr.w	r8, [r2, #24]
    ea4a:	eb0c 0008 	add.w	r0, ip, r8
		while (ticker_id_iter != TICKER_NULL &&
    ea4e:	4583      	cmp	fp, r0
		       ticks_start_offset + ticker->ticks_slot <=
    ea50:	9006      	str	r0, [sp, #24]
		while (ticker_id_iter != TICKER_NULL &&
    ea52:	d21c      	bcs.n	ea8e <ticker_job+0x44a>
		ticker->ext_data->ticks_drift += ticks_to_expire -
    ea54:	6891      	ldr	r1, [r2, #8]
    ea56:	ebaa 0101 	sub.w	r1, sl, r1
    ea5a:	4419      	add	r1, r3
    ea5c:	6071      	str	r1, [r6, #4]
		ticker->ticks_to_expire = ticks_to_expire;
    ea5e:	6093      	str	r3, [r2, #8]
		ticker_id_iter = nodes[ticker_id_head].next;
    ea60:	4671      	mov	r1, lr
		ticker_id_prev = TICKER_NULL;
    ea62:	23ff      	movs	r3, #255	; 0xff
		while (ticker_id_iter != TICKER_NULL) {
    ea64:	29ff      	cmp	r1, #255	; 0xff
    ea66:	d047      	beq.n	eaf8 <ticker_job+0x4b4>
			node = &nodes[ticker_id_iter];
    ea68:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    ea6c:	ea4f 1900 	mov.w	r9, r0, lsl #4
    ea70:	eb05 1000 	add.w	r0, r5, r0, lsl #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
    ea74:	f8d2 8008 	ldr.w	r8, [r2, #8]
    ea78:	f8d0 c008 	ldr.w	ip, [r0, #8]
    ea7c:	45e0      	cmp	r8, ip
    ea7e:	d938      	bls.n	eaf2 <ticker_job+0x4ae>
				ticker->ticks_to_expire -=
    ea80:	eba8 030c 	sub.w	r3, r8, ip
    ea84:	6093      	str	r3, [r2, #8]
			ticker_id_iter = node->next;
    ea86:	460b      	mov	r3, r1
    ea88:	f815 1009 	ldrb.w	r1, [r5, r9]
    ea8c:	e7ea      	b.n	ea64 <ticker_job+0x420>
			node = &nodes[ticker_id_iter];
    ea8e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    ea92:	0108      	lsls	r0, r1, #4
    ea94:	eb05 1101 	add.w	r1, r5, r1, lsl #4
    ea98:	9004      	str	r0, [sp, #16]
			if (node->ext_data &&
    ea9a:	f8d1 9028 	ldr.w	r9, [r1, #40]	; 0x28
    ea9e:	f1b9 0f00 	cmp.w	r9, #0
    eaa2:	d007      	beq.n	eab4 <ticker_job+0x470>
    eaa4:	f899 9008 	ldrb.w	r9, [r9, #8]
    eaa8:	f1b9 0f01 	cmp.w	r9, #1
    eaac:	d102      	bne.n	eab4 <ticker_job+0x470>
				ticker_id_iter = node->next;
    eaae:	4601      	mov	r1, r0
			ticker_id_iter = node->next;
    eab0:	5c69      	ldrb	r1, [r5, r1]
    eab2:	e7c6      	b.n	ea42 <ticker_job+0x3fe>
			if (node->ticks_to_expire >
    eab4:	f8d1 9008 	ldr.w	r9, [r1, #8]
    eab8:	f1b9 0f04 	cmp.w	r9, #4
    eabc:	d90e      	bls.n	eadc <ticker_job+0x498>
					MIN(ticks_slot_window,
    eabe:	f1ac 0304 	sub.w	r3, ip, #4
    eac2:	444b      	add	r3, r9
				window_end_ticks =
    eac4:	455b      	cmp	r3, fp
			if (window_end_ticks > ticks_start_offset +
    eac6:	9806      	ldr	r0, [sp, #24]
				window_end_ticks =
    eac8:	bf28      	it	cs
    eaca:	465b      	movcs	r3, fp
			if (window_end_ticks > ticks_start_offset +
    eacc:	4283      	cmp	r3, r0
    eace:	d905      	bls.n	eadc <ticker_job+0x498>
			if (ticks_to_expire != 0U &&
    ead0:	ebb3 0308 	subs.w	r3, r3, r8
    ead4:	d002      	beq.n	eadc <ticker_job+0x498>
    ead6:	9801      	ldr	r0, [sp, #4]
    ead8:	4283      	cmp	r3, r0
    eada:	d2bb      	bcs.n	ea54 <ticker_job+0x410>
			window_start_ticks  = node->ticks_to_expire +
    eadc:	6988      	ldr	r0, [r1, #24]
			ticker_id_iter = node->next;
    eade:	9904      	ldr	r1, [sp, #16]
			window_start_ticks  = node->ticks_to_expire +
    eae0:	eb00 0309 	add.w	r3, r0, r9
    eae4:	9301      	str	r3, [sp, #4]
			ticks_start_offset += node->ticks_to_expire;
    eae6:	44cc      	add	ip, r9
			ticks_to_expire     = ticks_slot_window -
    eae8:	ebab 0308 	sub.w	r3, fp, r8
			ticker_id_iter = node->next;
    eaec:	e7e0      	b.n	eab0 <ticker_job+0x46c>
    eaee:	2300      	movs	r3, #0
    eaf0:	e7b0      	b.n	ea54 <ticker_job+0x410>
				node->ticks_to_expire -=
    eaf2:	ebac 0108 	sub.w	r1, ip, r8
    eaf6:	6081      	str	r1, [r0, #8]
		if (ticker_id_prev != TICKER_NULL) {
    eaf8:	2bff      	cmp	r3, #255	; 0xff
    eafa:	d008      	beq.n	eb0e <ticker_job+0x4ca>
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    eafc:	b21b      	sxth	r3, r3
    eafe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    eb02:	011b      	lsls	r3, r3, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
    eb04:	f884 e01d 	strb.w	lr, [r4, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    eb08:	5ce9      	ldrb	r1, [r5, r3]
    eb0a:	7011      	strb	r1, [r2, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
    eb0c:	54ef      	strb	r7, [r5, r3]
		ticker->lazy_current--;
    eb0e:	8bd3      	ldrh	r3, [r2, #30]
    eb10:	3b01      	subs	r3, #1
    eb12:	83d3      	strh	r3, [r2, #30]
		ext_data->reschedule_state =
    eb14:	f04f 0302 	mov.w	r3, #2
    eb18:	7233      	strb	r3, [r6, #8]
		rescheduled  = 1U;
    eb1a:	2301      	movs	r3, #1
    eb1c:	e604      	b.n	e728 <ticker_job+0xe4>
		ticker_job_list_insert(instance, insert_head);
    eb1e:	4649      	mov	r1, r9
    eb20:	4620      	mov	r0, r4
    eb22:	f00d feff 	bl	1c924 <ticker_job_list_insert>
	if (instance->ticker_id_head != ticker_id_old_head) {
    eb26:	7f63      	ldrb	r3, [r4, #29]
    eb28:	9a03      	ldr	r2, [sp, #12]
    eb2a:	4293      	cmp	r3, r2
	if (!pending) {
    eb2c:	9b05      	ldr	r3, [sp, #20]
	if (instance->ticker_id_head != ticker_id_old_head) {
    eb2e:	f040 80d1 	bne.w	ecd4 <ticker_job+0x690>
	if (!pending) {
    eb32:	b93b      	cbnz	r3, eb44 <ticker_job+0x500>
	users = &instance->users[0];
    eb34:	7a65      	ldrb	r5, [r4, #9]
    eb36:	6863      	ldr	r3, [r4, #4]
    eb38:	9300      	str	r3, [sp, #0]
	while (count_user--) {
    eb3a:	3d01      	subs	r5, #1
    eb3c:	b2ed      	uxtb	r5, r5
		uop->status = TICKER_STATUS_SUCCESS;
    eb3e:	2700      	movs	r7, #0
	while (count_user--) {
    eb40:	2dff      	cmp	r5, #255	; 0xff
    eb42:	d116      	bne.n	eb72 <ticker_job+0x52e>
	if (flag_compare_update) {
    eb44:	9b02      	ldr	r3, [sp, #8]
    eb46:	b14b      	cbz	r3, eb5c <ticker_job+0x518>
	if (instance->ticker_id_head == TICKER_NULL) {
    eb48:	7f63      	ldrb	r3, [r4, #29]
    eb4a:	2bff      	cmp	r3, #255	; 0xff
    eb4c:	d179      	bne.n	ec42 <ticker_job+0x5fe>
		if (cntr_stop() == 0) {
    eb4e:	f006 f8ad 	bl	14cac <cntr_stop>
    eb52:	b918      	cbnz	r0, eb5c <ticker_job+0x518>
			instance->ticks_slot_previous = 0U;
    eb54:	61a0      	str	r0, [r4, #24]
			instance->ticks_current = cntr_cnt_get();
    eb56:	f006 f8cf 	bl	14cf8 <cntr_cnt_get>
    eb5a:	6160      	str	r0, [r4, #20]
	instance->job_guard = 0U;
    eb5c:	2300      	movs	r3, #0
    eb5e:	77a3      	strb	r3, [r4, #30]
	if (instance->worker_trigger) {
    eb60:	7fe3      	ldrb	r3, [r4, #31]
    eb62:	2b00      	cmp	r3, #0
    eb64:	f000 8135 	beq.w	edd2 <ticker_job+0x78e>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    eb68:	6a65      	ldr	r5, [r4, #36]	; 0x24
    eb6a:	4623      	mov	r3, r4
    eb6c:	2201      	movs	r2, #1
    eb6e:	2103      	movs	r1, #3
    eb70:	e576      	b.n	e660 <ticker_job+0x1c>
		user = &users[count_user];
    eb72:	9b00      	ldr	r3, [sp, #0]
    eb74:	eb03 06c5 	add.w	r6, r3, r5, lsl #3
		user_op = &user->user_op[0];
    eb78:	f8d6 8004 	ldr.w	r8, [r6, #4]
		while (user->first != user->last) {
    eb7c:	7873      	ldrb	r3, [r6, #1]
    eb7e:	78f2      	ldrb	r2, [r6, #3]
    eb80:	429a      	cmp	r2, r3
    eb82:	d102      	bne.n	eb8a <ticker_job+0x546>
    eb84:	3d01      	subs	r5, #1
    eb86:	b2ed      	uxtb	r5, r5
    eb88:	e7da      	b.n	eb40 <ticker_job+0x4fc>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    eb8a:	2234      	movs	r2, #52	; 0x34
    eb8c:	fb13 f202 	smulbb	r2, r3, r2
    eb90:	eb08 0302 	add.w	r3, r8, r2
	switch (uop->op) {
    eb94:	f818 2002 	ldrb.w	r2, [r8, r2]
    eb98:	2a02      	cmp	r2, #2
    eb9a:	d012      	beq.n	ebc2 <ticker_job+0x57e>
    eb9c:	2a03      	cmp	r2, #3
    eb9e:	d040      	beq.n	ec22 <ticker_job+0x5de>
    eba0:	2a01      	cmp	r2, #1
    eba2:	d105      	bne.n	ebb0 <ticker_job+0x56c>
			uop->status = TICKER_STATUS_SUCCESS;
    eba4:	629f      	str	r7, [r3, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
    eba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	if (fp_op_func) {
    eba8:	b112      	cbz	r2, ebb0 <ticker_job+0x56c>
		fp_op_func(uop->status, uop->op_context);
    ebaa:	6b19      	ldr	r1, [r3, #48]	; 0x30
    ebac:	6a98      	ldr	r0, [r3, #40]	; 0x28
    ebae:	4790      	blx	r2
			first = user->first + 1;
    ebb0:	7873      	ldrb	r3, [r6, #1]
			if (first == user->count_user_op) {
    ebb2:	7832      	ldrb	r2, [r6, #0]
			first = user->first + 1;
    ebb4:	3301      	adds	r3, #1
    ebb6:	b2db      	uxtb	r3, r3
				first = 0U;
    ebb8:	429a      	cmp	r2, r3
    ebba:	bf08      	it	eq
    ebbc:	2300      	moveq	r3, #0
			user->first = first;
    ebbe:	7073      	strb	r3, [r6, #1]
    ebc0:	e7dc      	b.n	eb7c <ticker_job+0x538>
		ticker_by_next_slot_get(instance,
    ebc2:	e9d3 9001 	ldrd	r9, r0, [r3, #4]
	_ticker_id_head = *ticker_id_head;
    ebc6:	f899 2000 	ldrb.w	r2, [r9]
		ticker_by_next_slot_get(instance,
    ebca:	f8d3 e00c 	ldr.w	lr, [r3, #12]
	node = instance->nodes;
    ebce:	f8d4 c000 	ldr.w	ip, [r4]
	    (*ticks_current != instance->ticks_current)) {
    ebd2:	6961      	ldr	r1, [r4, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
    ebd4:	2aff      	cmp	r2, #255	; 0xff
    ebd6:	d003      	beq.n	ebe0 <ticker_job+0x59c>
    ebd8:	f8d0 a000 	ldr.w	sl, [r0]
    ebdc:	458a      	cmp	sl, r1
    ebde:	d009      	beq.n	ebf4 <ticker_job+0x5b0>
		_ticker_id_head = instance->ticker_id_head;
    ebe0:	7f62      	ldrb	r2, [r4, #29]
		*ticks_current = instance->ticks_current;
    ebe2:	6001      	str	r1, [r0, #0]
		_ticks_to_expire = 0U;
    ebe4:	2000      	movs	r0, #0
	while (_ticker_id_head != TICKER_NULL) {
    ebe6:	2aff      	cmp	r2, #255	; 0xff
    ebe8:	d10c      	bne.n	ec04 <ticker_job+0x5c0>
	*ticker_id_head = _ticker_id_head;
    ebea:	f889 2000 	strb.w	r2, [r9]
	*ticks_to_expire = _ticks_to_expire;
    ebee:	f8ce 0000 	str.w	r0, [lr]
}
    ebf2:	e7d7      	b.n	eba4 <ticker_job+0x560>
		ticker = &node[_ticker_id_head];
    ebf4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    ebf8:	0112      	lsls	r2, r2, #4
	_ticks_to_expire = *ticks_to_expire;
    ebfa:	f8de 0000 	ldr.w	r0, [lr]
		_ticker_id_head = ticker->next;
    ebfe:	f81c 2002 	ldrb.w	r2, [ip, r2]
    ec02:	e7f0      	b.n	ebe6 <ticker_job+0x5a2>
		ticker = &node[_ticker_id_head];
    ec04:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    ec08:	ea4f 1b01 	mov.w	fp, r1, lsl #4
    ec0c:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
		_ticks_to_expire += ticker->ticks_to_expire;
    ec10:	f8d1 a008 	ldr.w	sl, [r1, #8]
			if (ticker->ticks_slot) {
    ec14:	6989      	ldr	r1, [r1, #24]
		_ticks_to_expire += ticker->ticks_to_expire;
    ec16:	4450      	add	r0, sl
			if (ticker->ticks_slot) {
    ec18:	2900      	cmp	r1, #0
    ec1a:	d1e6      	bne.n	ebea <ticker_job+0x5a6>
		_ticker_id_head = ticker->next;
    ec1c:	f81c 200b 	ldrb.w	r2, [ip, fp]
    ec20:	e7e1      	b.n	ebe6 <ticker_job+0x5a2>
		if (uop->id < instance->count_node) {
    ec22:	785a      	ldrb	r2, [r3, #1]
    ec24:	7a21      	ldrb	r1, [r4, #8]
    ec26:	4291      	cmp	r1, r2
    ec28:	d908      	bls.n	ec3c <ticker_job+0x5f8>
			node[uop->id].priority =
    ec2a:	6821      	ldr	r1, [r4, #0]
    ec2c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    ec30:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    ec34:	7919      	ldrb	r1, [r3, #4]
    ec36:	f882 102d 	strb.w	r1, [r2, #45]	; 0x2d
    ec3a:	e7b3      	b.n	eba4 <ticker_job+0x560>
			uop->status = TICKER_STATUS_FAILURE;
    ec3c:	2201      	movs	r2, #1
    ec3e:	629a      	str	r2, [r3, #40]	; 0x28
    ec40:	e7b1      	b.n	eba6 <ticker_job+0x562>
	if (ticker_id_old_head == TICKER_NULL) {
    ec42:	9b03      	ldr	r3, [sp, #12]
    ec44:	2bff      	cmp	r3, #255	; 0xff
    ec46:	d106      	bne.n	ec56 <ticker_job+0x612>
		ticks_current = cntr_cnt_get();
    ec48:	f006 f856 	bl	14cf8 <cntr_cnt_get>
    ec4c:	4605      	mov	r5, r0
		if (cntr_start() == 0) {
    ec4e:	f006 f81f 	bl	14c90 <cntr_start>
    ec52:	b900      	cbnz	r0, ec56 <ticker_job+0x612>
			instance->ticks_current = ticks_current;
    ec54:	6165      	str	r5, [r4, #20]
	ticker = &instance->nodes[instance->ticker_id_head];
    ec56:	7f63      	ldrb	r3, [r4, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    ec58:	6822      	ldr	r2, [r4, #0]
		LL_ASSERT(i);
    ec5a:	f8df 817c 	ldr.w	r8, [pc, #380]	; edd8 <ticker_job+0x794>
    ec5e:	f8df 917c 	ldr.w	r9, [pc, #380]	; eddc <ticker_job+0x798>
    ec62:	f8df a17c 	ldr.w	sl, [pc, #380]	; ede0 <ticker_job+0x79c>
	ticker = &instance->nodes[instance->ticker_id_head];
    ec66:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
    ec6a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	i = 10U;
    ec6e:	260a      	movs	r6, #10
	ticks_to_expire = ticker->ticks_to_expire;
    ec70:	689f      	ldr	r7, [r3, #8]
		ctr = cntr_cnt_get();
    ec72:	f006 f841 	bl	14cf8 <cntr_cnt_get>
		cc = instance->ticks_current;
    ec76:	6965      	ldr	r5, [r4, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    ec78:	1b43      	subs	r3, r0, r5
    ec7a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    ec7e:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
    ec80:	42bb      	cmp	r3, r7
    ec82:	bf2c      	ite	cs
    ec84:	18ed      	addcs	r5, r5, r3
    ec86:	19ed      	addcc	r5, r5, r7
		cc &= HAL_TICKER_CNTR_MASK;
    ec88:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
		instance->trigger_set_cb(cc);
    ec8c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		ctr = cntr_cnt_get();
    ec8e:	4683      	mov	fp, r0
		instance->trigger_set_cb(cc);
    ec90:	4628      	mov	r0, r5
    ec92:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    ec94:	f006 f830 	bl	14cf8 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    ec98:	eba0 030b 	sub.w	r3, r0, fp
    ec9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    eca0:	eba5 050b 	sub.w	r5, r5, fp
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    eca4:	3303      	adds	r3, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    eca6:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
		  ticker_ticks_diff_get(cc, ctr));
    ecaa:	42ab      	cmp	r3, r5
		i--;
    ecac:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
		  ticker_ticks_diff_get(cc, ctr));
    ecb0:	f67f af54 	bls.w	eb5c <ticker_job+0x518>
		LL_ASSERT(i);
    ecb4:	2e00      	cmp	r6, #0
    ecb6:	d1dc      	bne.n	ec72 <ticker_job+0x62e>
    ecb8:	f640 133e 	movw	r3, #2366	; 0x93e
    ecbc:	4642      	mov	r2, r8
    ecbe:	4649      	mov	r1, r9
    ecc0:	4650      	mov	r0, sl
    ecc2:	f009 ff7f 	bl	18bc4 <printk>
    ecc6:	4040      	eors	r0, r0
    ecc8:	f380 8811 	msr	BASEPRI, r0
    eccc:	f04f 0003 	mov.w	r0, #3
    ecd0:	df02      	svc	2
    ecd2:	e7ce      	b.n	ec72 <ticker_job+0x62e>
	if (!pending) {
    ecd4:	2b00      	cmp	r3, #0
    ecd6:	f47f af37 	bne.w	eb48 <ticker_job+0x504>
		flag_compare_update = 1U;
    ecda:	2301      	movs	r3, #1
    ecdc:	9302      	str	r3, [sp, #8]
    ecde:	e729      	b.n	eb34 <ticker_job+0x4f0>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    ece0:	7f23      	ldrb	r3, [r4, #28]
    ece2:	2bff      	cmp	r3, #255	; 0xff
    ece4:	f47f ae9c 	bne.w	ea20 <ticker_job+0x3dc>
		window_start_ticks = 0U;
    ece8:	2300      	movs	r3, #0
    ecea:	e69f      	b.n	ea2c <ticker_job+0x3e8>
			if (state == 1U) {
    ecec:	2b01      	cmp	r3, #1
    ecee:	f43f ada6 	beq.w	e83e <ticker_job+0x1fa>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    ecf2:	2104      	movs	r1, #4
    ecf4:	4623      	mov	r3, r4
    ecf6:	6a65      	ldr	r5, [r4, #36]	; 0x24
    ecf8:	2201      	movs	r2, #1
    ecfa:	4608      	mov	r0, r1
    ecfc:	47a8      	blx	r5
				pending = 1U;
    ecfe:	2301      	movs	r3, #1
				user->middle = prev;
    ed00:	f888 7002 	strb.w	r7, [r8, #2]
				pending = 1U;
    ed04:	9305      	str	r3, [sp, #20]
    ed06:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
    ed0a:	fa5f fb83 	uxtb.w	fp, r3
    ed0e:	e4d4      	b.n	e6ba <ticker_job+0x76>
			if (state == 1U) {
    ed10:	2b01      	cmp	r3, #1
    ed12:	d1ee      	bne.n	ecf2 <ticker_job+0x6ae>
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    ed14:	4620      	mov	r0, r4
    ed16:	f00d fdb2 	bl	1c87e <ticker_dequeue>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    ed1a:	6963      	ldr	r3, [r4, #20]
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    ed1c:	60a8      	str	r0, [r5, #8]
    ed1e:	4607      	mov	r7, r0
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    ed20:	9307      	str	r3, [sp, #28]
	ticks_now = cntr_cnt_get();
    ed22:	f005 ffe9 	bl	14cf8 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    ed26:	9b07      	ldr	r3, [sp, #28]
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    ed28:	9900      	ldr	r1, [sp, #0]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    ed2a:	1ac3      	subs	r3, r0, r3
    ed2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    ed30:	440b      	add	r3, r1
	if (ticks_to_expire > ticks_elapsed) {
    ed32:	429f      	cmp	r7, r3
		ticker->ticks_to_expire_minus += ticks_elapsed -
    ed34:	bf98      	it	ls
    ed36:	6969      	ldrls	r1, [r5, #20]
	ticks_now = cntr_cnt_get();
    ed38:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
    ed3a:	bf98      	it	ls
    ed3c:	1bc9      	subls	r1, r1, r7
	if ((ticker->ticks_periodic != 0U) &&
    ed3e:	6868      	ldr	r0, [r5, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    ed40:	bf9b      	ittet	ls
    ed42:	185b      	addls	r3, r3, r1
    ed44:	616b      	strls	r3, [r5, #20]
		ticks_to_expire -= ticks_elapsed;
    ed46:	1afb      	subhi	r3, r7, r3
		ticks_to_expire = 0U;
    ed48:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0U) &&
    ed4a:	b1a8      	cbz	r0, ed78 <ticker_job+0x734>
	    (user_op->params.update.lazy != 0U)) {
    ed4c:	8ab1      	ldrh	r1, [r6, #20]
	if ((ticker->ticks_periodic != 0U) &&
    ed4e:	b199      	cbz	r1, ed78 <ticker_job+0x734>
		user_op->params.update.lazy--;
    ed50:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
    ed54:	fa1f fc8c 	uxth.w	ip, ip
    ed58:	f8a6 c014 	strh.w	ip, [r6, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    ed5c:	4298      	cmp	r0, r3
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    ed5e:	f8b5 e01e 	ldrh.w	lr, [r5, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    ed62:	d202      	bcs.n	ed6a <ticker_job+0x726>
    ed64:	45f4      	cmp	ip, lr
    ed66:	f4ff ad30 	bcc.w	e7ca <ticker_job+0x186>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    ed6a:	f8b5 e01e 	ldrh.w	lr, [r5, #30]
    ed6e:	45f4      	cmp	ip, lr
    ed70:	f63f ad4a 	bhi.w	e808 <ticker_job+0x1c4>
		ticker->lazy_periodic = user_op->params.update.lazy;
    ed74:	f8a5 c01c 	strh.w	ip, [r5, #28]
				  user_op->params.update.ticks_drift_plus;
    ed78:	6871      	ldr	r1, [r6, #4]
				user_op->params.update.ticks_drift_minus;
    ed7a:	68b0      	ldr	r0, [r6, #8]
	struct ticker_ext *ext_data = ticker->ext_data;
    ed7c:	6aaf      	ldr	r7, [r5, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
    ed7e:	440b      	add	r3, r1
    ed80:	60ab      	str	r3, [r5, #8]
	ticker->ticks_to_expire_minus +=
    ed82:	696b      	ldr	r3, [r5, #20]
    ed84:	4403      	add	r3, r0
    ed86:	616b      	str	r3, [r5, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
    ed88:	b11f      	cbz	r7, ed92 <ticker_job+0x74e>
    ed8a:	683b      	ldr	r3, [r7, #0]
    ed8c:	b10b      	cbz	r3, ed92 <ticker_job+0x74e>
			user_op->params.update.ticks_drift_plus -
    ed8e:	1a09      	subs	r1, r1, r0
		ext_data->ticks_drift =
    ed90:	6079      	str	r1, [r7, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    ed92:	9907      	ldr	r1, [sp, #28]
    ed94:	4628      	mov	r0, r5
    ed96:	f00d fd9d 	bl	1c8d4 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    ed9a:	68f2      	ldr	r2, [r6, #12]
    ed9c:	69ab      	ldr	r3, [r5, #24]
    ed9e:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    eda0:	6932      	ldr	r2, [r6, #16]
    eda2:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    eda4:	bf8c      	ite	hi
    eda6:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
    eda8:	2300      	movls	r3, #0
    edaa:	61ab      	str	r3, [r5, #24]
	if (user_op->params.update.force != 0U) {
    edac:	7db3      	ldrb	r3, [r6, #22]
    edae:	b103      	cbz	r3, edb2 <ticker_job+0x76e>
		ticker->force = user_op->params.update.force;
    edb0:	70eb      	strb	r3, [r5, #3]
	if (user_op->params.update.must_expire) {
    edb2:	7df3      	ldrb	r3, [r6, #23]
    edb4:	b113      	cbz	r3, edbc <ticker_job+0x778>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
    edb6:	3b01      	subs	r3, #1
    edb8:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
	ticker->next = *insert_head;
    edbc:	9b02      	ldr	r3, [sp, #8]
    edbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
    edc0:	f803 9002 	strb.w	r9, [r3, r2]
		ticker->req++;
    edc4:	786b      	ldrb	r3, [r5, #1]
	*insert_head = user_op->id;
    edc6:	f896 9001 	ldrb.w	r9, [r6, #1]
		ticker->req++;
    edca:	3301      	adds	r3, #1
    edcc:	706b      	strb	r3, [r5, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    edce:	2100      	movs	r1, #0
    edd0:	e4f7      	b.n	e7c2 <ticker_job+0x17e>
}
    edd2:	b00b      	add	sp, #44	; 0x2c
    edd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    edd8:	000226d9 	.word	0x000226d9
    eddc:	00022903 	.word	0x00022903
    ede0:	00020429 	.word	0x00020429

0000ede4 <ticker_init>:
{
    ede4:	b5f0      	push	{r4, r5, r6, r7, lr}
    ede6:	9f05      	ldr	r7, [sp, #20]
    ede8:	f89d 5018 	ldrb.w	r5, [sp, #24]
    edec:	f8dd c01c 	ldr.w	ip, [sp, #28]
	if (instance_index >= TICKER_INSTANCE_MAX) {
    edf0:	b108      	cbz	r0, edf6 <ticker_init+0x12>
		return TICKER_STATUS_FAILURE;
    edf2:	2001      	movs	r0, #1
}
    edf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	instance->count_node = count_node;
    edf6:	4c18      	ldr	r4, [pc, #96]	; (ee58 <ticker_init+0x74>)
    edf8:	7221      	strb	r1, [r4, #8]
	instance->nodes = node;
    edfa:	6022      	str	r2, [r4, #0]
	while (count_node--) {
    edfc:	3901      	subs	r1, #1
    edfe:	b2c9      	uxtb	r1, r1
    ee00:	29ff      	cmp	r1, #255	; 0xff
    ee02:	d116      	bne.n	ee32 <ticker_init+0x4e>
	instance->count_user = count_user;
    ee04:	7263      	strb	r3, [r4, #9]
	instance->users = user;
    ee06:	6067      	str	r7, [r4, #4]
		user_op_ += users[count_user].count_user_op;
    ee08:	2234      	movs	r2, #52	; 0x34
	while (count_user--) {
    ee0a:	3b01      	subs	r3, #1
    ee0c:	b2db      	uxtb	r3, r3
    ee0e:	2bff      	cmp	r3, #255	; 0xff
    ee10:	d116      	bne.n	ee40 <ticker_init+0x5c>
	if (count_op) {
    ee12:	2d00      	cmp	r5, #0
    ee14:	d1ed      	bne.n	edf2 <ticker_init+0xe>
	instance->caller_id_get_cb = caller_id_get_cb;
    ee16:	9b08      	ldr	r3, [sp, #32]
    ee18:	6223      	str	r3, [r4, #32]
	instance->sched_cb = sched_cb;
    ee1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ee1c:	6263      	str	r3, [r4, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    ee1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ee20:	62a3      	str	r3, [r4, #40]	; 0x28
	instance->ticker_id_slot_previous = TICKER_NULL;
    ee22:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->ticks_slot_previous = 0U;
    ee26:	e9c4 5505 	strd	r5, r5, [r4, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
    ee2a:	83a3      	strh	r3, [r4, #28]
	instance->ticks_elapsed_first = 0U;
    ee2c:	8165      	strh	r5, [r4, #10]
	return TICKER_STATUS_SUCCESS;
    ee2e:	4628      	mov	r0, r5
    ee30:	e7e0      	b.n	edf4 <ticker_init+0x10>
		instance->nodes[count_node].priority = 0;
    ee32:	eb01 0641 	add.w	r6, r1, r1, lsl #1
    ee36:	eb02 1606 	add.w	r6, r2, r6, lsl #4
    ee3a:	f886 002d 	strb.w	r0, [r6, #45]	; 0x2d
    ee3e:	e7dd      	b.n	edfc <ticker_init+0x18>
		users[count_user].user_op = user_op_;
    ee40:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    ee44:	f8c1 c004 	str.w	ip, [r1, #4]
		user_op_ += users[count_user].count_user_op;
    ee48:	f817 0033 	ldrb.w	r0, [r7, r3, lsl #3]
		count_op -= users[count_user].count_user_op;
    ee4c:	1a2d      	subs	r5, r5, r0
		user_op_ += users[count_user].count_user_op;
    ee4e:	fb00 cc02 	mla	ip, r0, r2, ip
		count_op -= users[count_user].count_user_op;
    ee52:	b2ed      	uxtb	r5, r5
    ee54:	e7d9      	b.n	ee0a <ticker_init+0x26>
    ee56:	bf00      	nop
    ee58:	20001d28 	.word	0x20001d28

0000ee5c <ticker_is_initialized>:
	return !!(_instance[instance_index].count_node);
    ee5c:	4b04      	ldr	r3, [pc, #16]	; (ee70 <ticker_is_initialized+0x14>)
    ee5e:	222c      	movs	r2, #44	; 0x2c
    ee60:	fb02 3300 	mla	r3, r2, r0, r3
    ee64:	7a18      	ldrb	r0, [r3, #8]
}
    ee66:	3800      	subs	r0, #0
    ee68:	bf18      	it	ne
    ee6a:	2001      	movne	r0, #1
    ee6c:	4770      	bx	lr
    ee6e:	bf00      	nop
    ee70:	20001d28 	.word	0x20001d28

0000ee74 <ticker_trigger>:
	if (instance->sched_cb) {
    ee74:	4b07      	ldr	r3, [pc, #28]	; (ee94 <ticker_trigger+0x20>)
    ee76:	222c      	movs	r2, #44	; 0x2c
    ee78:	fb02 3100 	mla	r1, r2, r0, r3
{
    ee7c:	b410      	push	{r4}
	if (instance->sched_cb) {
    ee7e:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    ee80:	b134      	cbz	r4, ee90 <ticker_trigger+0x1c>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    ee82:	460b      	mov	r3, r1
    ee84:	46a4      	mov	ip, r4
    ee86:	2201      	movs	r2, #1
}
    ee88:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    ee8a:	2103      	movs	r1, #3
    ee8c:	2002      	movs	r0, #2
    ee8e:	4760      	bx	ip
}
    ee90:	bc10      	pop	{r4}
    ee92:	4770      	bx	lr
    ee94:	20001d28 	.word	0x20001d28

0000ee98 <ticker_start_ext>:
{
    ee98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ee9c:	4606      	mov	r6, r0
    ee9e:	4608      	mov	r0, r1
    eea0:	4611      	mov	r1, r2
    eea2:	461a      	mov	r2, r3
	struct ticker_instance *instance = &_instance[instance_index];
    eea4:	4b22      	ldr	r3, [pc, #136]	; (ef30 <ticker_start_ext+0x98>)
    eea6:	242c      	movs	r4, #44	; 0x2c
    eea8:	fb06 3904 	mla	r9, r6, r4, r3
	user = &instance->users[user_id];
    eeac:	f8d9 3004 	ldr.w	r3, [r9, #4]
    eeb0:	eb03 0cc0 	add.w	ip, r3, r0, lsl #3
	if (last >= user->count_user_op) {
    eeb4:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
	last = user->last + 1;
    eeb8:	f89c 7003 	ldrb.w	r7, [ip, #3]
    eebc:	1c7d      	adds	r5, r7, #1
    eebe:	b2ed      	uxtb	r5, r5
		last = 0U;
    eec0:	42ab      	cmp	r3, r5
    eec2:	bf98      	it	ls
    eec4:	2500      	movls	r5, #0
	if (last == user->first) {
    eec6:	f89c 3001 	ldrb.w	r3, [ip, #1]
    eeca:	42ab      	cmp	r3, r5
    eecc:	d02e      	beq.n	ef2c <ticker_start_ext+0x94>
	user_op = &user->user_op[user->last];
    eece:	2334      	movs	r3, #52	; 0x34
    eed0:	fb17 f703 	smulbb	r7, r7, r3
    eed4:	f8dc 3004 	ldr.w	r3, [ip, #4]
	user_op->op = TICKER_USER_OP_TYPE_START;
    eed8:	f04f 0804 	mov.w	r8, #4
	user_op = &user->user_op[user->last];
    eedc:	19dc      	adds	r4, r3, r7
	user_op->op = TICKER_USER_OP_TYPE_START;
    eede:	f803 8007 	strb.w	r8, [r3, r7]
	user_op->params.start.ticks_first = ticks_first;
    eee2:	9b08      	ldr	r3, [sp, #32]
    eee4:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    eee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    eee8:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    eeea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    eeec:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    eeee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    eef0:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    eef2:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    eef6:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.ext_data = ext_data;
    eef8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    eefa:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    eefc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    eefe:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    ef00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ef02:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    ef04:	2302      	movs	r3, #2
    ef06:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->fp_op_func = fp_op_func;
    ef08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ef0a:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
    ef0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    ef0e:	7061      	strb	r1, [r4, #1]
	user_op->params.start.ticks_at_start = ticks_anchor;
    ef10:	6062      	str	r2, [r4, #4]
	user_op->op_context = op_context;
    ef12:	6323      	str	r3, [r4, #48]	; 0x30
	user->last = last;
    ef14:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    ef18:	e9d9 3508 	ldrd	r3, r5, [r9, #32]
    ef1c:	4798      	blx	r3
    ef1e:	464b      	mov	r3, r9
    ef20:	2200      	movs	r2, #0
    ef22:	4641      	mov	r1, r8
    ef24:	47a8      	blx	r5
	return user_op->status;
    ef26:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    ef28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
    ef2c:	2001      	movs	r0, #1
    ef2e:	e7fb      	b.n	ef28 <ticker_start_ext+0x90>
    ef30:	20001d28 	.word	0x20001d28

0000ef34 <ticker_update_ext>:
{
    ef34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    ef38:	4c23      	ldr	r4, [pc, #140]	; (efc8 <ticker_update_ext+0x94>)
{
    ef3a:	4606      	mov	r6, r0
    ef3c:	4608      	mov	r0, r1
    ef3e:	4611      	mov	r1, r2
	struct ticker_instance *instance = &_instance[instance_index];
    ef40:	222c      	movs	r2, #44	; 0x2c
    ef42:	fb06 4802 	mla	r8, r6, r2, r4
	user = &instance->users[user_id];
    ef46:	f8d8 4004 	ldr.w	r4, [r8, #4]
    ef4a:	eb04 0cc0 	add.w	ip, r4, r0, lsl #3
	if (last >= user->count_user_op) {
    ef4e:	f814 2030 	ldrb.w	r2, [r4, r0, lsl #3]
	last = user->last + 1;
    ef52:	f89c 7003 	ldrb.w	r7, [ip, #3]
    ef56:	1c7d      	adds	r5, r7, #1
    ef58:	b2ed      	uxtb	r5, r5
		last = 0U;
    ef5a:	42aa      	cmp	r2, r5
    ef5c:	bf98      	it	ls
    ef5e:	2500      	movls	r5, #0
	if (last == user->first) {
    ef60:	f89c 2001 	ldrb.w	r2, [ip, #1]
    ef64:	42aa      	cmp	r2, r5
    ef66:	d02c      	beq.n	efc2 <ticker_update_ext+0x8e>
	user_op = &user->user_op[user->last];
    ef68:	2234      	movs	r2, #52	; 0x34
    ef6a:	fb17 f702 	smulbb	r7, r7, r2
    ef6e:	f8dc 2004 	ldr.w	r2, [ip, #4]
    ef72:	19d4      	adds	r4, r2, r7
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    ef74:	f04f 0e05 	mov.w	lr, #5
    ef78:	f802 e007 	strb.w	lr, [r2, r7]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    ef7c:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    ef7e:	9b06      	ldr	r3, [sp, #24]
    ef80:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    ef82:	9b07      	ldr	r3, [sp, #28]
    ef84:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    ef86:	9b08      	ldr	r3, [sp, #32]
    ef88:	6123      	str	r3, [r4, #16]
	user_op->params.update.lazy = lazy;
    ef8a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    ef8e:	82a3      	strh	r3, [r4, #20]
	user_op->params.update.force = force;
    ef90:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    ef94:	75a3      	strb	r3, [r4, #22]
	user_op->params.update.must_expire = must_expire;
    ef96:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    ef9a:	75e3      	strb	r3, [r4, #23]
	user_op->status = TICKER_STATUS_BUSY;
    ef9c:	2302      	movs	r3, #2
    ef9e:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->fp_op_func = fp_op_func;
    efa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    efa2:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
    efa4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	user_op->id = ticker_id;
    efa6:	7061      	strb	r1, [r4, #1]
	user_op->op_context = op_context;
    efa8:	6323      	str	r3, [r4, #48]	; 0x30
	user->last = last;
    efaa:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    efae:	e9d8 3508 	ldrd	r3, r5, [r8, #32]
    efb2:	4798      	blx	r3
    efb4:	4643      	mov	r3, r8
    efb6:	2200      	movs	r2, #0
    efb8:	2104      	movs	r1, #4
    efba:	47a8      	blx	r5
	return user_op->status;
    efbc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    efbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    efc2:	2001      	movs	r0, #1
    efc4:	e7fb      	b.n	efbe <ticker_update_ext+0x8a>
    efc6:	bf00      	nop
    efc8:	20001d28 	.word	0x20001d28

0000efcc <ticker_stop>:
{
    efcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    efd0:	4c1a      	ldr	r4, [pc, #104]	; (f03c <ticker_stop+0x70>)
{
    efd2:	4605      	mov	r5, r0
    efd4:	4608      	mov	r0, r1
    efd6:	4611      	mov	r1, r2
	struct ticker_instance *instance = &_instance[instance_index];
    efd8:	222c      	movs	r2, #44	; 0x2c
    efda:	fb05 4902 	mla	r9, r5, r2, r4
	user = &instance->users[user_id];
    efde:	f8d9 2004 	ldr.w	r2, [r9, #4]
    efe2:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
	if (last >= user->count_user_op) {
    efe6:	f812 2030 	ldrb.w	r2, [r2, r0, lsl #3]
	last = user->last + 1;
    efea:	78fe      	ldrb	r6, [r7, #3]
    efec:	1c74      	adds	r4, r6, #1
    efee:	b2e4      	uxtb	r4, r4
		last = 0U;
    eff0:	42a2      	cmp	r2, r4
    eff2:	bf98      	it	ls
    eff4:	2400      	movls	r4, #0
	if (last == user->first) {
    eff6:	787a      	ldrb	r2, [r7, #1]
    eff8:	42a2      	cmp	r2, r4
    effa:	d01d      	beq.n	f038 <ticker_stop+0x6c>
	user_op = &user->user_op[user->last];
    effc:	2234      	movs	r2, #52	; 0x34
    effe:	fb16 f602 	smulbb	r6, r6, r2
    f002:	687a      	ldr	r2, [r7, #4]
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    f004:	f04f 0c07 	mov.w	ip, #7
    f008:	f802 c006 	strb.w	ip, [r2, r6]
	user_op = &user->user_op[user->last];
    f00c:	eb02 0806 	add.w	r8, r2, r6
	user_op->status = TICKER_STATUS_BUSY;
    f010:	2202      	movs	r2, #2
	user_op->fp_op_func = fp_op_func;
    f012:	e9c8 230a 	strd	r2, r3, [r8, #40]	; 0x28
	user_op->op_context = op_context;
    f016:	9b08      	ldr	r3, [sp, #32]
	user_op->id = ticker_id;
    f018:	f888 1001 	strb.w	r1, [r8, #1]
	user_op->op_context = op_context;
    f01c:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
	user->last = last;
    f020:	70fc      	strb	r4, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    f022:	e9d9 3408 	ldrd	r3, r4, [r9, #32]
    f026:	4798      	blx	r3
    f028:	464b      	mov	r3, r9
    f02a:	2200      	movs	r2, #0
    f02c:	2104      	movs	r1, #4
    f02e:	47a0      	blx	r4
	return user_op->status;
    f030:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
}
    f034:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
    f038:	2001      	movs	r0, #1
    f03a:	e7fb      	b.n	f034 <ticker_stop+0x68>
    f03c:	20001d28 	.word	0x20001d28

0000f040 <ll_addr_set>:

static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
    f040:	b570      	push	{r4, r5, r6, lr}
    f042:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
    f044:	2000      	movs	r0, #0
{
    f046:	460d      	mov	r5, r1
		if (ull_adv_is_enabled(0)) {
    f048:	f00d ff7c 	bl	1cf44 <ull_adv_is_enabled>
    f04c:	b110      	cbz	r0, f054 <ll_addr_set+0x14>
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
			return BT_HCI_ERR_CMD_DISALLOWED;
    f04e:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
    f050:	4620      	mov	r0, r4
    f052:	bd70      	pop	{r4, r5, r6, pc}
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
    f054:	f00e f86b 	bl	1d12e <ull_scan_is_enabled>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
    f058:	f010 0606 	ands.w	r6, r0, #6
    f05c:	d1f7      	bne.n	f04e <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    f05e:	2206      	movs	r2, #6
    f060:	4629      	mov	r1, r5
	if (addr_type) {
    f062:	b124      	cbz	r4, f06e <ll_addr_set+0x2e>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    f064:	4804      	ldr	r0, [pc, #16]	; (f078 <ll_addr_set+0x38>)
    f066:	f00b f90a 	bl	1a27e <memcpy>
	return 0;
    f06a:	4634      	mov	r4, r6
    f06c:	e7f0      	b.n	f050 <ll_addr_set+0x10>
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    f06e:	4803      	ldr	r0, [pc, #12]	; (f07c <ll_addr_set+0x3c>)
    f070:	f00b f905 	bl	1a27e <memcpy>
    f074:	e7ec      	b.n	f050 <ll_addr_set+0x10>
    f076:	bf00      	nop
    f078:	20002fcd 	.word	0x20002fcd
    f07c:	20002fc7 	.word	0x20002fc7

0000f080 <ll_addr_get>:

uint8_t *ll_addr_get(uint8_t addr_type)
{
	if (addr_type > BT_ADDR_LE_RANDOM) {
    f080:	2801      	cmp	r0, #1
{
    f082:	4602      	mov	r2, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
    f084:	d805      	bhi.n	f092 <ll_addr_get+0x12>
		return NULL;
	}

	if (addr_type) {
		return rnd_addr;
    f086:	4b04      	ldr	r3, [pc, #16]	; (f098 <ll_addr_get+0x18>)
    f088:	4804      	ldr	r0, [pc, #16]	; (f09c <ll_addr_get+0x1c>)
    f08a:	2a00      	cmp	r2, #0
    f08c:	bf08      	it	eq
    f08e:	4618      	moveq	r0, r3
    f090:	4770      	bx	lr
		return NULL;
    f092:	2000      	movs	r0, #0
	}

	return pub_addr;
}
    f094:	4770      	bx	lr
    f096:	bf00      	nop
    f098:	20002fc7 	.word	0x20002fc7
    f09c:	20002fcd 	.word	0x20002fcd

0000f0a0 <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
    f0a0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    f0a2:	4802      	ldr	r0, [pc, #8]	; (f0ac <hci_driver_init+0xc>)
    f0a4:	f7f5 ffa4 	bl	4ff0 <bt_hci_driver_register>

	return 0;
}
    f0a8:	2000      	movs	r0, #0
    f0aa:	bd08      	pop	{r3, pc}
    f0ac:	0001f738 	.word	0x0001f738

0000f0b0 <hci_driver_send>:
	if (!buf->len) {
    f0b0:	8983      	ldrh	r3, [r0, #12]
{
    f0b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f0b4:	4605      	mov	r5, r0
	if (!buf->len) {
    f0b6:	b973      	cbnz	r3, f0d6 <hci_driver_send+0x26>
    f0b8:	4920      	ldr	r1, [pc, #128]	; (f13c <hci_driver_send+0x8c>)
    f0ba:	4b21      	ldr	r3, [pc, #132]	; (f140 <hci_driver_send+0x90>)
		BT_ERR("Empty HCI packet");
    f0bc:	4821      	ldr	r0, [pc, #132]	; (f144 <hci_driver_send+0x94>)
    f0be:	1ac9      	subs	r1, r1, r3
    f0c0:	08c9      	lsrs	r1, r1, #3
    f0c2:	0189      	lsls	r1, r1, #6
    f0c4:	f041 0101 	orr.w	r1, r1, #1
    f0c8:	f00a f9bb 	bl	19442 <log_0>
		return -EINVAL;
    f0cc:	f06f 0415 	mvn.w	r4, #21
}
    f0d0:	4620      	mov	r0, r4
    f0d2:	b003      	add	sp, #12
    f0d4:	bd30      	pop	{r4, r5, pc}
    f0d6:	7d01      	ldrb	r1, [r0, #20]
	switch (type) {
    f0d8:	b181      	cbz	r1, f0fc <hci_driver_send+0x4c>
    f0da:	2902      	cmp	r1, #2
    f0dc:	d122      	bne.n	f124 <hci_driver_send+0x74>
	err = hci_acl_handle(buf, &evt);
    f0de:	a901      	add	r1, sp, #4
    f0e0:	f000 fcae 	bl	fa40 <hci_acl_handle>
    f0e4:	4604      	mov	r4, r0
	if (evt) {
    f0e6:	9801      	ldr	r0, [sp, #4]
    f0e8:	b108      	cbz	r0, f0ee <hci_driver_send+0x3e>
		bt_recv_prio(evt);
    f0ea:	f7f5 ff63 	bl	4fb4 <bt_recv_prio>
	if (!err) {
    f0ee:	2c00      	cmp	r4, #0
    f0f0:	d1ee      	bne.n	f0d0 <hci_driver_send+0x20>
		net_buf_unref(buf);
    f0f2:	4628      	mov	r0, r5
    f0f4:	f006 fb58 	bl	157a8 <net_buf_unref>
    f0f8:	2400      	movs	r4, #0
    f0fa:	e7e9      	b.n	f0d0 <hci_driver_send+0x20>
	struct node_rx_pdu *node_rx = NULL;
    f0fc:	9101      	str	r1, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    f0fe:	a901      	add	r1, sp, #4
    f100:	f000 fa1c 	bl	f53c <hci_cmd_handle>
	if (evt) {
    f104:	2800      	cmp	r0, #0
    f106:	d0f4      	beq.n	f0f2 <hci_driver_send+0x42>
		bt_recv_prio(evt);
    f108:	f7f5 ff54 	bl	4fb4 <bt_recv_prio>
		if (node_rx) {
    f10c:	9c01      	ldr	r4, [sp, #4]
    f10e:	2c00      	cmp	r4, #0
    f110:	d0ef      	beq.n	f0f2 <hci_driver_send+0x42>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    f112:	4620      	mov	r0, r4
    f114:	f000 fef6 	bl	ff04 <hci_get_class>
    f118:	7160      	strb	r0, [r4, #5]
			k_fifo_put(&recv_fifo, node_rx);
    f11a:	9901      	ldr	r1, [sp, #4]
    f11c:	480a      	ldr	r0, [pc, #40]	; (f148 <hci_driver_send+0x98>)
    f11e:	f00f f996 	bl	1e44e <k_queue_append>
	if (!err) {
    f122:	e7e6      	b.n	f0f2 <hci_driver_send+0x42>
    f124:	4b06      	ldr	r3, [pc, #24]	; (f140 <hci_driver_send+0x90>)
    f126:	4a05      	ldr	r2, [pc, #20]	; (f13c <hci_driver_send+0x8c>)
		BT_ERR("Unknown HCI type %u", type);
    f128:	4808      	ldr	r0, [pc, #32]	; (f14c <hci_driver_send+0x9c>)
    f12a:	1ad2      	subs	r2, r2, r3
    f12c:	08d2      	lsrs	r2, r2, #3
    f12e:	0192      	lsls	r2, r2, #6
    f130:	f042 0201 	orr.w	r2, r2, #1
    f134:	f00a f992 	bl	1945c <log_1>
    f138:	e7c8      	b.n	f0cc <hci_driver_send+0x1c>
    f13a:	bf00      	nop
    f13c:	0001ef84 	.word	0x0001ef84
    f140:	0001ef2c 	.word	0x0001ef2c
    f144:	00022727 	.word	0x00022727
    f148:	20000bf8 	.word	0x20000bf8
    f14c:	00022738 	.word	0x00022738

0000f150 <recv_thread>:
{
    f150:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
    f152:	4e2f      	ldr	r6, [pc, #188]	; (f210 <recv_thread+0xc0>)
	struct net_buf *buf = NULL;
    f154:	2700      	movs	r7, #0
    f156:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f15a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f15e:	4630      	mov	r0, r6
    f160:	f008 fc46 	bl	179f0 <z_impl_k_queue_get>
		if (node_rx && !buf) {
    f164:	2800      	cmp	r0, #0
    f166:	d0f6      	beq.n	f156 <recv_thread+0x6>
	uint8_t class = node_rx->hdr.user_meta;
    f168:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
    f16a:	9001      	str	r0, [sp, #4]
	switch (class) {
    f16c:	2b04      	cmp	r3, #4
    f16e:	d826      	bhi.n	f1be <recv_thread+0x6e>
    f170:	b33b      	cbz	r3, f1c2 <recv_thread+0x72>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    f172:	2b02      	cmp	r3, #2
    f174:	d134      	bne.n	f1e0 <recv_thread+0x90>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
    f176:	2200      	movs	r2, #0
    f178:	2300      	movs	r3, #0
    f17a:	2101      	movs	r1, #1
    f17c:	2000      	movs	r0, #0
    f17e:	f7f5 f83f 	bl	4200 <bt_buf_get_evt>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    f182:	4604      	mov	r4, r0
		if (buf) {
    f184:	b118      	cbz	r0, f18e <recv_thread+0x3e>
			hci_evt_encode(node_rx, buf);
    f186:	4601      	mov	r1, r0
    f188:	9801      	ldr	r0, [sp, #4]
    f18a:	f000 fd59 	bl	fc40 <hci_evt_encode>
	node_rx->hdr.next = NULL;
    f18e:	9b01      	ldr	r3, [sp, #4]
	ll_rx_mem_release((void **)&node_rx);
    f190:	a801      	add	r0, sp, #4
	node_rx->hdr.next = NULL;
    f192:	601f      	str	r7, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    f194:	f001 fb4c 	bl	10830 <ll_rx_mem_release>
		while (buf) {
    f198:	2c00      	cmp	r4, #0
    f19a:	d0dc      	beq.n	f156 <recv_thread+0x6>
			frag = net_buf_ref(buf);
    f19c:	4620      	mov	r0, r4
    f19e:	f00e fd02 	bl	1dba6 <net_buf_ref>
			buf = net_buf_frag_del(NULL, buf);
    f1a2:	4621      	mov	r1, r4
			frag = net_buf_ref(buf);
    f1a4:	4605      	mov	r5, r0
			buf = net_buf_frag_del(NULL, buf);
    f1a6:	2000      	movs	r0, #0
    f1a8:	f00e fd23 	bl	1dbf2 <net_buf_frag_del>
			if (frag->len) {
    f1ac:	89ab      	ldrh	r3, [r5, #12]
			buf = net_buf_frag_del(NULL, buf);
    f1ae:	4604      	mov	r4, r0
				bt_recv(frag);
    f1b0:	4628      	mov	r0, r5
			if (frag->len) {
    f1b2:	b353      	cbz	r3, f20a <recv_thread+0xba>
				bt_recv(frag);
    f1b4:	f7f5 fe5a 	bl	4e6c <bt_recv>
	z_impl_k_yield();
    f1b8:	f009 f8aa 	bl	18310 <z_impl_k_yield>
}
    f1bc:	e7ec      	b.n	f198 <recv_thread+0x48>
	switch (class) {
    f1be:	2b05      	cmp	r3, #5
    f1c0:	d016      	beq.n	f1f0 <recv_thread+0xa0>
		LL_ASSERT(0);
    f1c2:	4a14      	ldr	r2, [pc, #80]	; (f214 <recv_thread+0xc4>)
    f1c4:	4914      	ldr	r1, [pc, #80]	; (f218 <recv_thread+0xc8>)
    f1c6:	4815      	ldr	r0, [pc, #84]	; (f21c <recv_thread+0xcc>)
    f1c8:	f240 1347 	movw	r3, #327	; 0x147
    f1cc:	f009 fcfa 	bl	18bc4 <printk>
    f1d0:	4040      	eors	r0, r0
    f1d2:	f380 8811 	msr	BASEPRI, r0
    f1d6:	f04f 0003 	mov.w	r0, #3
    f1da:	df02      	svc	2
	struct net_buf *buf = NULL;
    f1dc:	2400      	movs	r4, #0
		break;
    f1de:	e7d6      	b.n	f18e <recv_thread+0x3e>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    f1e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f1e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f1e8:	2001      	movs	r0, #1
    f1ea:	f7f4 ffdf 	bl	41ac <bt_buf_get_rx>
    f1ee:	e7c8      	b.n	f182 <recv_thread+0x32>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    f1f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f1f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f1f8:	2003      	movs	r0, #3
    f1fa:	f7f4 ffd7 	bl	41ac <bt_buf_get_rx>
    f1fe:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    f200:	4601      	mov	r1, r0
    f202:	9801      	ldr	r0, [sp, #4]
    f204:	f000 fce2 	bl	fbcc <hci_acl_encode>
		break;
    f208:	e7c1      	b.n	f18e <recv_thread+0x3e>
				net_buf_unref(frag);
    f20a:	f006 facd 	bl	157a8 <net_buf_unref>
    f20e:	e7d3      	b.n	f1b8 <recv_thread+0x68>
    f210:	20000bf8 	.word	0x20000bf8
    f214:	0002274c 	.word	0x0002274c
    f218:	000218fc 	.word	0x000218fc
    f21c:	00020429 	.word	0x00020429

0000f220 <prio_recv_thread>:
{
    f220:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
    f224:	4e2a      	ldr	r6, [pc, #168]	; (f2d0 <__kernel_ram_size+0x48>)
				k_fifo_put(&recv_fifo, node_rx);
    f226:	4f2b      	ldr	r7, [pc, #172]	; (f2d4 <__kernel_ram_size+0x4c>)
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    f228:	f10d 0102 	add.w	r1, sp, #2
    f22c:	a801      	add	r0, sp, #4
    f22e:	f001 f9fd 	bl	1062c <ll_rx_get>
    f232:	4604      	mov	r4, r0
    f234:	bb80      	cbnz	r0, f298 <__kernel_ram_size+0x10>
		if (node_rx) {
    f236:	9b01      	ldr	r3, [sp, #4]
    f238:	2b00      	cmp	r3, #0
    f23a:	d041      	beq.n	f2c0 <__kernel_ram_size+0x38>
			ll_rx_dequeue();
    f23c:	f001 fa50 	bl	106e0 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    f240:	9d01      	ldr	r5, [sp, #4]
    f242:	4628      	mov	r0, r5
    f244:	f000 fe5e 	bl	ff04 <hci_get_class>
    f248:	7168      	strb	r0, [r5, #5]
			buf = process_prio_evt(node_rx, &evt_flags);
    f24a:	9d01      	ldr	r5, [sp, #4]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
    f24c:	796b      	ldrb	r3, [r5, #5]
    f24e:	2b03      	cmp	r3, #3
    f250:	d11d      	bne.n	f28e <__kernel_ram_size+0x6>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
    f252:	792b      	ldrb	r3, [r5, #4]
    f254:	2b17      	cmp	r3, #23
    f256:	d11a      	bne.n	f28e <__kernel_ram_size+0x6>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    f258:	4621      	mov	r1, r4
    f25a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f25e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f262:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
    f264:	f8b5 8006 	ldrh.w	r8, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    f268:	f7f4 ffca 	bl	4200 <bt_buf_get_evt>
			hci_disconn_complete_encode(pdu_data, handle, buf);
    f26c:	4641      	mov	r1, r8
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    f26e:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
    f270:	4602      	mov	r2, r0
    f272:	f105 001c 	add.w	r0, r5, #28
    f276:	f000 fc83 	bl	fb80 <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
    f27a:	4640      	mov	r0, r8
    f27c:	f000 fc9e 	bl	fbbc <hci_disconn_complete_process>
			if (buf) {
    f280:	b12c      	cbz	r4, f28e <__kernel_ram_size+0x6>
				bt_recv_prio(buf);
    f282:	4620      	mov	r0, r4
    f284:	f7f5 fe96 	bl	4fb4 <bt_recv_prio>
					net_buf_unref(buf);
    f288:	4620      	mov	r0, r4
    f28a:	f006 fa8d 	bl	157a8 <net_buf_unref>
				k_fifo_put(&recv_fifo, node_rx);
    f28e:	9901      	ldr	r1, [sp, #4]
    f290:	4638      	mov	r0, r7
    f292:	f00f f8dc 	bl	1e44e <k_queue_append>
			continue;
    f296:	e7c7      	b.n	f228 <prio_recv_thread+0x8>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    f298:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f29c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f2a0:	2100      	movs	r1, #0
    f2a2:	2013      	movs	r0, #19
    f2a4:	f7f4 ffac 	bl	4200 <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    f2a8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    f2ac:	4605      	mov	r5, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    f2ae:	4622      	mov	r2, r4
    f2b0:	f00d fdbe 	bl	1ce30 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    f2b4:	4628      	mov	r0, r5
    f2b6:	f7f5 fe7d 	bl	4fb4 <bt_recv_prio>
	z_impl_k_yield();
    f2ba:	f009 f829 	bl	18310 <z_impl_k_yield>
    f2be:	e7b3      	b.n	f228 <prio_recv_thread+0x8>
	return z_impl_k_sem_take(sem, timeout);
    f2c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f2c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f2c8:	4630      	mov	r0, r6
    f2ca:	f008 fbeb 	bl	17aa4 <z_impl_k_sem_take>
		BT_DBG("sem taken");
    f2ce:	e7ab      	b.n	f228 <prio_recv_thread+0x8>
    f2d0:	20000bb0 	.word	0x20000bb0
    f2d4:	20000bf8 	.word	0x20000bf8

0000f2d8 <hci_driver_open>:
{
    f2d8:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
    f2da:	4820      	ldr	r0, [pc, #128]	; (f35c <hci_driver_open+0x84>)
{
    f2dc:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
    f2de:	f001 f89d 	bl	1041c <ll_init>
	if (err) {
    f2e2:	4604      	mov	r4, r0
    f2e4:	b168      	cbz	r0, f302 <hci_driver_open+0x2a>
    f2e6:	4a1e      	ldr	r2, [pc, #120]	; (f360 <hci_driver_open+0x88>)
    f2e8:	4b1e      	ldr	r3, [pc, #120]	; (f364 <hci_driver_open+0x8c>)
    f2ea:	1ad2      	subs	r2, r2, r3
    f2ec:	08d2      	lsrs	r2, r2, #3
		BT_ERR("LL initialization failed: %d", err);
    f2ee:	0192      	lsls	r2, r2, #6
    f2f0:	4601      	mov	r1, r0
    f2f2:	f042 0201 	orr.w	r2, r2, #1
    f2f6:	481c      	ldr	r0, [pc, #112]	; (f368 <hci_driver_open+0x90>)
    f2f8:	f00a f8b0 	bl	1945c <log_1>
}
    f2fc:	4620      	mov	r0, r4
    f2fe:	b008      	add	sp, #32
    f300:	bdd0      	pop	{r4, r6, r7, pc}
	hci_init(NULL);
    f302:	f000 fe15 	bl	ff30 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
    f306:	2600      	movs	r6, #0
    f308:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    f30a:	f06f 0309 	mvn.w	r3, #9
    f30e:	e9cd 4302 	strd	r4, r3, [sp, #8]
    f312:	e9cd 6706 	strd	r6, r7, [sp, #24]
    f316:	e9cd 4400 	strd	r4, r4, [sp]
    f31a:	4b14      	ldr	r3, [pc, #80]	; (f36c <hci_driver_open+0x94>)
    f31c:	4914      	ldr	r1, [pc, #80]	; (f370 <hci_driver_open+0x98>)
    f31e:	9404      	str	r4, [sp, #16]
    f320:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    f324:	4813      	ldr	r0, [pc, #76]	; (f374 <hci_driver_open+0x9c>)
    f326:	f008 fa0b 	bl	17740 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    f32a:	4913      	ldr	r1, [pc, #76]	; (f378 <hci_driver_open+0xa0>)
    f32c:	4811      	ldr	r0, [pc, #68]	; (f374 <hci_driver_open+0x9c>)
    f32e:	f00e ffdc 	bl	1e2ea <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    f332:	f06f 0307 	mvn.w	r3, #7
    f336:	e9cd 4302 	strd	r4, r3, [sp, #8]
    f33a:	e9cd 6706 	strd	r6, r7, [sp, #24]
    f33e:	e9cd 4400 	strd	r4, r4, [sp]
    f342:	4b0e      	ldr	r3, [pc, #56]	; (f37c <hci_driver_open+0xa4>)
    f344:	490e      	ldr	r1, [pc, #56]	; (f380 <hci_driver_open+0xa8>)
    f346:	9404      	str	r4, [sp, #16]
    f348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    f34c:	480d      	ldr	r0, [pc, #52]	; (f384 <hci_driver_open+0xac>)
    f34e:	f008 f9f7 	bl	17740 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    f352:	490d      	ldr	r1, [pc, #52]	; (f388 <hci_driver_open+0xb0>)
    f354:	480b      	ldr	r0, [pc, #44]	; (f384 <hci_driver_open+0xac>)
    f356:	f00e ffc8 	bl	1e2ea <z_impl_k_thread_name_set>
	return 0;
    f35a:	e7cf      	b.n	f2fc <hci_driver_open+0x24>
    f35c:	20000bb0 	.word	0x20000bb0
    f360:	0001ef84 	.word	0x0001ef84
    f364:	0001ef2c 	.word	0x0001ef2c
    f368:	0002278c 	.word	0x0002278c
    f36c:	0000f221 	.word	0x0000f221
    f370:	20003760 	.word	0x20003760
    f374:	200014b8 	.word	0x200014b8
    f378:	000227a9 	.word	0x000227a9
    f37c:	0000f151 	.word	0x0000f151
    f380:	20003940 	.word	0x20003940
    f384:	20001538 	.word	0x20001538
    f388:	000227b3 	.word	0x000227b3

0000f38c <cmd_complete_status>:
{
	return bt_hci_cmd_status_create(_opcode, status);
}

static struct net_buf *cmd_complete_status(uint8_t status)
{
    f38c:	b538      	push	{r3, r4, r5, lr}
	struct net_buf *buf;
	struct bt_hci_evt_cc_status *ccst;

	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    f38e:	4b07      	ldr	r3, [pc, #28]	; (f3ac <cmd_complete_status+0x20>)
{
    f390:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    f392:	2101      	movs	r1, #1
    f394:	8818      	ldrh	r0, [r3, #0]
    f396:	f00b fab9 	bl	1a90c <bt_hci_cmd_complete_create>
	return net_buf_simple_add(&buf->b, len);
    f39a:	2101      	movs	r1, #1
    f39c:	4604      	mov	r4, r0
    f39e:	3008      	adds	r0, #8
    f3a0:	f00e fc33 	bl	1dc0a <net_buf_simple_add>
	ccst = net_buf_add(buf, sizeof(*ccst));
	ccst->status = status;
    f3a4:	7005      	strb	r5, [r0, #0]

	return buf;
}
    f3a6:	4620      	mov	r0, r4
    f3a8:	bd38      	pop	{r3, r4, r5, pc}
    f3aa:	bf00      	nop
    f3ac:	20002e68 	.word	0x20002e68

0000f3b0 <cmd_status>:
	return bt_hci_cmd_status_create(_opcode, status);
    f3b0:	4b02      	ldr	r3, [pc, #8]	; (f3bc <cmd_status+0xc>)
{
    f3b2:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    f3b4:	8818      	ldrh	r0, [r3, #0]
    f3b6:	f00b babb 	b.w	1a930 <bt_hci_cmd_status_create>
    f3ba:	bf00      	nop
    f3bc:	20002e68 	.word	0x20002e68

0000f3c0 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
    f3c0:	b570      	push	{r4, r5, r6, lr}
    f3c2:	4604      	mov	r4, r0
    f3c4:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    f3c6:	4b0f      	ldr	r3, [pc, #60]	; (f404 <le_remote_feat_complete+0x44>)
    f3c8:	685b      	ldr	r3, [r3, #4]
{
    f3ca:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    f3cc:	009a      	lsls	r2, r3, #2
{
    f3ce:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    f3d0:	d517      	bpl.n	f402 <le_remote_feat_complete+0x42>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    f3d2:	4b0d      	ldr	r3, [pc, #52]	; (f408 <le_remote_feat_complete+0x48>)
    f3d4:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    f3d6:	071b      	lsls	r3, r3, #28
    f3d8:	d513      	bpl.n	f402 <le_remote_feat_complete+0x42>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    f3da:	220b      	movs	r2, #11
    f3dc:	2104      	movs	r1, #4
    f3de:	f00d fd0b 	bl	1cdf8 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    f3e2:	2208      	movs	r2, #8
	sep->status = status;
    f3e4:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    f3e6:	f8a0 6001 	strh.w	r6, [r0, #1]
	if (!status) {
    f3ea:	3003      	adds	r0, #3
    f3ec:	b924      	cbnz	r4, f3f8 <le_remote_feat_complete+0x38>
		memcpy(&sep->features[0],
    f3ee:	1d29      	adds	r1, r5, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    f3f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(&sep->features[0],
    f3f4:	f00a bf43 	b.w	1a27e <memcpy>
}
    f3f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
    f3fc:	2100      	movs	r1, #0
    f3fe:	f00a bf49 	b.w	1a294 <memset>
}
    f402:	bd70      	pop	{r4, r5, r6, pc}
    f404:	20000250 	.word	0x20000250
    f408:	20000258 	.word	0x20000258

0000f40c <hci_cmd_complete>:
{
    f40c:	b538      	push	{r3, r4, r5, lr}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    f40e:	4b06      	ldr	r3, [pc, #24]	; (f428 <hci_cmd_complete+0x1c>)
{
    f410:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    f412:	8818      	ldrh	r0, [r3, #0]
{
    f414:	460c      	mov	r4, r1
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    f416:	f00b fa79 	bl	1a90c <bt_hci_cmd_complete_create>
    f41a:	4621      	mov	r1, r4
    f41c:	6028      	str	r0, [r5, #0]
}
    f41e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f422:	3008      	adds	r0, #8
    f424:	f00e bbf1 	b.w	1dc0a <net_buf_simple_add>
    f428:	20002e68 	.word	0x20002e68

0000f42c <hci_vendor_cmd_handle_common>:
{
    f42c:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (ocf) {
    f42e:	3801      	subs	r0, #1
{
    f430:	b087      	sub	sp, #28
    f432:	4614      	mov	r4, r2
	switch (ocf) {
    f434:	2809      	cmp	r0, #9
    f436:	d87c      	bhi.n	f532 <hci_vendor_cmd_handle_common+0x106>
    f438:	e8df f000 	tbb	[pc, r0]
    f43c:	7b321b05 	.word	0x7b321b05
    f440:	3e7b597b 	.word	0x3e7b597b
    f444:	6f62      	.short	0x6f62
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f446:	210d      	movs	r1, #13
    f448:	4610      	mov	r0, r2
    f44a:	f7ff ffdf 	bl	f40c <hci_cmd_complete>
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    f44e:	2302      	movs	r3, #2
	rp->status = 0x00;
    f450:	2100      	movs	r1, #0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    f452:	7043      	strb	r3, [r0, #1]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
    f454:	70c3      	strb	r3, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    f456:	7183      	strb	r3, [r0, #6]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    f458:	2307      	movs	r3, #7
	rp->status = 0x00;
    f45a:	7001      	strb	r1, [r0, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    f45c:	7081      	strb	r1, [r0, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
    f45e:	7101      	strb	r1, [r0, #4]
	rp->fw_variant = 0U;
    f460:	7141      	strb	r1, [r0, #5]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    f462:	71c3      	strb	r3, [r0, #7]
    f464:	7201      	strb	r1, [r0, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
    f466:	7241      	strb	r1, [r0, #9]
    f468:	7281      	strb	r1, [r0, #10]
    f46a:	72c1      	strb	r1, [r0, #11]
    f46c:	7301      	strb	r1, [r0, #12]
	return 0;
    f46e:	2400      	movs	r4, #0
}
    f470:	e013      	b.n	f49a <hci_vendor_cmd_handle_common+0x6e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f472:	2141      	movs	r1, #65	; 0x41
    f474:	4610      	mov	r0, r2
    f476:	f7ff ffc9 	bl	f40c <hci_cmd_complete>
	rp->status = 0x00;
    f47a:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f47c:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    f47e:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    f480:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    f484:	4621      	mov	r1, r4
    f486:	f00a ff05 	bl	1a294 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    f48a:	786b      	ldrb	r3, [r5, #1]
    f48c:	f063 0358 	orn	r3, r3, #88	; 0x58
    f490:	706b      	strb	r3, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    f492:	78ab      	ldrb	r3, [r5, #2]
    f494:	f043 0303 	orr.w	r3, r3, #3
    f498:	70ab      	strb	r3, [r5, #2]
}
    f49a:	4620      	mov	r0, r4
    f49c:	b007      	add	sp, #28
    f49e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f4a0:	2109      	movs	r1, #9
    f4a2:	4610      	mov	r0, r2
    f4a4:	f7ff ffb2 	bl	f40c <hci_cmd_complete>
	rp->status = 0x00;
    f4a8:	2400      	movs	r4, #0
    f4aa:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    f4ae:	2208      	movs	r2, #8
    f4b0:	4621      	mov	r1, r4
    f4b2:	f00a feef 	bl	1a294 <memset>
}
    f4b6:	e7f0      	b.n	f49a <hci_vendor_cmd_handle_common+0x6e>
	const char build_info[] = HCI_VS_BUILD_INFO;
    f4b8:	4b1f      	ldr	r3, [pc, #124]	; (f538 <hci_vendor_cmd_handle_common+0x10c>)
    f4ba:	aa01      	add	r2, sp, #4
    f4bc:	f103 0710 	add.w	r7, r3, #16
    f4c0:	4616      	mov	r6, r2
    f4c2:	6818      	ldr	r0, [r3, #0]
    f4c4:	6859      	ldr	r1, [r3, #4]
    f4c6:	4615      	mov	r5, r2
    f4c8:	c503      	stmia	r5!, {r0, r1}
    f4ca:	3308      	adds	r3, #8
    f4cc:	42bb      	cmp	r3, r7
    f4ce:	462a      	mov	r2, r5
    f4d0:	d1f7      	bne.n	f4c2 <hci_vendor_cmd_handle_common+0x96>
    f4d2:	781b      	ldrb	r3, [r3, #0]
    f4d4:	702b      	strb	r3, [r5, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    f4d6:	2112      	movs	r1, #18
    f4d8:	4620      	mov	r0, r4
    f4da:	f7ff ff97 	bl	f40c <hci_cmd_complete>
	rp->status = 0x00;
    f4de:	2400      	movs	r4, #0
    f4e0:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    f4e4:	2211      	movs	r2, #17
    f4e6:	4631      	mov	r1, r6
    f4e8:	f00a fec9 	bl	1a27e <memcpy>
}
    f4ec:	e7d5      	b.n	f49a <hci_vendor_cmd_handle_common+0x6e>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    f4ee:	6889      	ldr	r1, [r1, #8]
    f4f0:	2000      	movs	r0, #0
    f4f2:	f7ff fda5 	bl	f040 <ll_addr_set>
	*evt = cmd_complete_status(0x00);
    f4f6:	2000      	movs	r0, #0
    f4f8:	f7ff ff48 	bl	f38c <cmd_complete_status>
    f4fc:	6020      	str	r0, [r4, #0]
    f4fe:	e7b6      	b.n	f46e <hci_vendor_cmd_handle_common+0x42>
	rp = hci_cmd_complete(evt, sizeof(*rp) +
    f500:	2118      	movs	r1, #24
    f502:	4610      	mov	r0, r2
    f504:	f7ff ff82 	bl	f40c <hci_cmd_complete>
	rp->status = 0x00;
    f508:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp) +
    f50a:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    f50c:	2101      	movs	r1, #1
	rp->status = 0x00;
    f50e:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    f512:	f00e fa5e 	bl	1d9d2 <hci_vendor_read_static_addr>
    f516:	7068      	strb	r0, [r5, #1]
}
    f518:	e7bf      	b.n	f49a <hci_vendor_cmd_handle_common+0x6e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f51a:	2121      	movs	r1, #33	; 0x21
    f51c:	4610      	mov	r0, r2
    f51e:	f7ff ff75 	bl	f40c <hci_cmd_complete>
	rp->status = 0x00;
    f522:	4601      	mov	r1, r0
    f524:	2400      	movs	r4, #0
    f526:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
    f52a:	3001      	adds	r0, #1
    f52c:	f00e faa7 	bl	1da7e <hci_vendor_read_key_hierarchy_roots>
}
    f530:	e7b3      	b.n	f49a <hci_vendor_cmd_handle_common+0x6e>
	switch (ocf) {
    f532:	f06f 0415 	mvn.w	r4, #21
    f536:	e7b0      	b.n	f49a <hci_vendor_cmd_handle_common+0x6e>
    f538:	000227d7 	.word	0x000227d7

0000f53c <hci_cmd_handle>:
{
    f53c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    f53e:	8983      	ldrh	r3, [r0, #12]
{
    f540:	b08b      	sub	sp, #44	; 0x2c
	struct net_buf *evt = NULL;
    f542:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
    f544:	2b02      	cmp	r3, #2
{
    f546:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
    f548:	9505      	str	r5, [sp, #20]
	if (cmd->len < sizeof(*chdr)) {
    f54a:	d80c      	bhi.n	f566 <hci_cmd_handle+0x2a>
    f54c:	49be      	ldr	r1, [pc, #760]	; (f848 <hci_cmd_handle+0x30c>)
    f54e:	4bbf      	ldr	r3, [pc, #764]	; (f84c <hci_cmd_handle+0x310>)
		BT_ERR("No HCI Command header");
    f550:	48bf      	ldr	r0, [pc, #764]	; (f850 <hci_cmd_handle+0x314>)
    f552:	1ac9      	subs	r1, r1, r3
    f554:	08c9      	lsrs	r1, r1, #3
    f556:	0189      	lsls	r1, r1, #6
    f558:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid HCI CMD packet length");
    f55c:	f009 ff71 	bl	19442 <log_0>
		return NULL;
    f560:	4628      	mov	r0, r5
}
    f562:	b00b      	add	sp, #44	; 0x2c
    f564:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    f566:	2103      	movs	r1, #3
    f568:	3008      	adds	r0, #8
    f56a:	f00e fbaf 	bl	1dccc <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
    f56e:	89a2      	ldrh	r2, [r4, #12]
    f570:	7883      	ldrb	r3, [r0, #2]
    f572:	429a      	cmp	r2, r3
    f574:	d208      	bcs.n	f588 <hci_cmd_handle+0x4c>
    f576:	49b4      	ldr	r1, [pc, #720]	; (f848 <hci_cmd_handle+0x30c>)
    f578:	4bb4      	ldr	r3, [pc, #720]	; (f84c <hci_cmd_handle+0x310>)
		BT_ERR("Invalid HCI CMD packet length");
    f57a:	48b6      	ldr	r0, [pc, #728]	; (f854 <hci_cmd_handle+0x318>)
    f57c:	1ac9      	subs	r1, r1, r3
    f57e:	08c9      	lsrs	r1, r1, #3
    f580:	0189      	lsls	r1, r1, #6
    f582:	f041 0101 	orr.w	r1, r1, #1
    f586:	e7e9      	b.n	f55c <hci_cmd_handle+0x20>
	_opcode = sys_le16_to_cpu(chdr->opcode);
    f588:	8803      	ldrh	r3, [r0, #0]
    f58a:	4ab3      	ldr	r2, [pc, #716]	; (f858 <hci_cmd_handle+0x31c>)
	ocf = BT_OCF(_opcode);
    f58c:	f3c3 0009 	ubfx	r0, r3, #0, #10
	_opcode = sys_le16_to_cpu(chdr->opcode);
    f590:	8013      	strh	r3, [r2, #0]
	switch (BT_OGF(_opcode)) {
    f592:	f3c3 2385 	ubfx	r3, r3, #10, #6
    f596:	2b08      	cmp	r3, #8
    f598:	d80d      	bhi.n	f5b6 <hci_cmd_handle+0x7a>
    f59a:	b17b      	cbz	r3, f5bc <hci_cmd_handle+0x80>
    f59c:	3b01      	subs	r3, #1
    f59e:	2b07      	cmp	r3, #7
    f5a0:	d80c      	bhi.n	f5bc <hci_cmd_handle+0x80>
    f5a2:	e8df f013 	tbh	[pc, r3, lsl #1]
    f5a6:	000d      	.short	0x000d
    f5a8:	001e000b 	.word	0x001e000b
    f5ac:	000b005d 	.word	0x000b005d
    f5b0:	000b000b 	.word	0x000b000b
    f5b4:	00e3      	.short	0x00e3
    f5b6:	2b3f      	cmp	r3, #63	; 0x3f
    f5b8:	f000 823a 	beq.w	fa30 <hci_cmd_handle+0x4f4>
		evt = cmd_status(BT_HCI_ERR_UNKNOWN_CMD);
    f5bc:	2001      	movs	r0, #1
    f5be:	e00d      	b.n	f5dc <hci_cmd_handle+0xa0>
	switch (ocf) {
    f5c0:	2806      	cmp	r0, #6
    f5c2:	d006      	beq.n	f5d2 <hci_cmd_handle+0x96>
    f5c4:	281d      	cmp	r0, #29
    f5c6:	d1f9      	bne.n	f5bc <hci_cmd_handle+0x80>
	handle = sys_le16_to_cpu(cmd->handle);
    f5c8:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    f5ca:	8818      	ldrh	r0, [r3, #0]
    f5cc:	f00d feda 	bl	1d384 <ll_version_ind_send>
	*evt = cmd_status(status);
    f5d0:	e004      	b.n	f5dc <hci_cmd_handle+0xa0>
		disconnect(cmd, evt);
    f5d2:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    f5d4:	7899      	ldrb	r1, [r3, #2]
    f5d6:	8818      	ldrh	r0, [r3, #0]
    f5d8:	f002 fb74 	bl	11cc4 <ll_terminate_ind_send>
		evt = cmd_status(BT_HCI_ERR_UNKNOWN_CMD);
    f5dc:	f7ff fee8 	bl	f3b0 <cmd_status>
    f5e0:	e022      	b.n	f628 <hci_cmd_handle+0xec>
	switch (ocf) {
    f5e2:	282d      	cmp	r0, #45	; 0x2d
    f5e4:	d029      	beq.n	f63a <hci_cmd_handle+0xfe>
    f5e6:	d81a      	bhi.n	f61e <hci_cmd_handle+0xe2>
    f5e8:	2801      	cmp	r0, #1
    f5ea:	d01f      	beq.n	f62c <hci_cmd_handle+0xf0>
    f5ec:	2803      	cmp	r0, #3
    f5ee:	d1e5      	bne.n	f5bc <hci_cmd_handle+0x80>
	event_mask = DEFAULT_EVENT_MASK;
    f5f0:	4b9a      	ldr	r3, [pc, #616]	; (f85c <hci_cmd_handle+0x320>)
    f5f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f5f6:	f641 71ff 	movw	r1, #8191	; 0x1fff
    f5fa:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    f5fe:	4b98      	ldr	r3, [pc, #608]	; (f860 <hci_cmd_handle+0x324>)
    f600:	201f      	movs	r0, #31
    f602:	2100      	movs	r1, #0
    f604:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    f608:	f000 ff78 	bl	104fc <ll_reset>
		*evt = cmd_complete_status(0x00);
    f60c:	2000      	movs	r0, #0
    f60e:	f7ff febd 	bl	f38c <cmd_complete_status>
	conn_count = 0U;
    f612:	4b94      	ldr	r3, [pc, #592]	; (f864 <hci_cmd_handle+0x328>)
		*evt = cmd_complete_status(0x00);
    f614:	9005      	str	r0, [sp, #20]
	conn_count = 0U;
    f616:	2200      	movs	r2, #0
    f618:	601a      	str	r2, [r3, #0]
	return evt;
    f61a:	9805      	ldr	r0, [sp, #20]
    f61c:	e7a1      	b.n	f562 <hci_cmd_handle+0x26>
	switch (ocf) {
    f61e:	2863      	cmp	r0, #99	; 0x63
    f620:	d1cc      	bne.n	f5bc <hci_cmd_handle+0x80>
	*evt = cmd_complete_status(0x00);
    f622:	2000      	movs	r0, #0
	*evt = cmd_complete_status(status);
    f624:	f7ff feb2 	bl	f38c <cmd_complete_status>
		evt = cmd_status(BT_HCI_ERR_UNKNOWN_CMD);
    f628:	9005      	str	r0, [sp, #20]
    f62a:	e7f6      	b.n	f61a <hci_cmd_handle+0xde>
	event_mask = sys_get_le64(cmd->events);
    f62c:	68a0      	ldr	r0, [r4, #8]
    f62e:	f00d fbfb 	bl	1ce28 <sys_get_le64>
    f632:	4b8a      	ldr	r3, [pc, #552]	; (f85c <hci_cmd_handle+0x320>)
	le_event_mask = sys_get_le64(cmd->events);
    f634:	e9c3 0100 	strd	r0, r1, [r3]
    f638:	e7f3      	b.n	f622 <hci_cmd_handle+0xe6>
		read_tx_power_level(cmd, evt);
    f63a:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f63c:	2104      	movs	r1, #4
    f63e:	a805      	add	r0, sp, #20
	handle = sys_le16_to_cpu(cmd->handle);
    f640:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    f642:	789f      	ldrb	r7, [r3, #2]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f644:	f7ff fee2 	bl	f40c <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    f648:	b2ae      	uxth	r6, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f64a:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
    f64c:	1cc3      	adds	r3, r0, #3
    f64e:	463a      	mov	r2, r7
    f650:	4631      	mov	r1, r6
    f652:	2002      	movs	r0, #2
    f654:	f00d fbbd 	bl	1cdd2 <ll_tx_pwr_lvl_get>
	rp->status = status;
    f658:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    f65a:	f8a4 5001 	strh.w	r5, [r4, #1]
	if (err == -EINVAL) {
    f65e:	e7dc      	b.n	f61a <hci_cmd_handle+0xde>
	switch (ocf) {
    f660:	3801      	subs	r0, #1
    f662:	2808      	cmp	r0, #8
    f664:	d8aa      	bhi.n	f5bc <hci_cmd_handle+0x80>
    f666:	a301      	add	r3, pc, #4	; (adr r3, f66c <hci_cmd_handle+0x130>)
    f668:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
    f66c:	0000f691 	.word	0x0000f691
    f670:	0000f6bb 	.word	0x0000f6bb
    f674:	0000f73b 	.word	0x0000f73b
    f678:	0000f5bd 	.word	0x0000f5bd
    f67c:	0000f5bd 	.word	0x0000f5bd
    f680:	0000f5bd 	.word	0x0000f5bd
    f684:	0000f5bd 	.word	0x0000f5bd
    f688:	0000f5bd 	.word	0x0000f5bd
    f68c:	0000f757 	.word	0x0000f757
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f690:	2109      	movs	r1, #9
    f692:	a805      	add	r0, sp, #20
    f694:	f7ff feba 	bl	f40c <hci_cmd_complete>
	rp->status = 0x00;
    f698:	2300      	movs	r3, #0
    f69a:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    f69c:	7083      	strb	r3, [r0, #2]
    f69e:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    f6a0:	f06f 030e 	mvn.w	r3, #14
	rp->hci_version = LL_VERSION_NUMBER;
    f6a4:	220c      	movs	r2, #12
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    f6a6:	7143      	strb	r3, [r0, #5]
    f6a8:	2305      	movs	r3, #5
    f6aa:	7183      	strb	r3, [r0, #6]
	rp->hci_version = LL_VERSION_NUMBER;
    f6ac:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = LL_VERSION_NUMBER;
    f6ae:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
    f6b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	dst[0] = val;
    f6b4:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
    f6b6:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
    f6b8:	e7af      	b.n	f61a <hci_cmd_handle+0xde>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f6ba:	2141      	movs	r1, #65	; 0x41
    f6bc:	a805      	add	r0, sp, #20
    f6be:	f7ff fea5 	bl	f40c <hci_cmd_complete>
	rp->status = 0x00;
    f6c2:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f6c4:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    f6c6:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    f6c8:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    f6cc:	f00a fde2 	bl	1a294 <memset>
	rp->commands[5] |= BIT(6) | BIT(7);
    f6d0:	79a3      	ldrb	r3, [r4, #6]
	rp->commands[26] |= BIT(6) | BIT(7);
    f6d2:	7ee2      	ldrb	r2, [r4, #27]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    f6d4:	7ea1      	ldrb	r1, [r4, #26]
	rp->commands[28] |= BIT(3);
    f6d6:	7f60      	ldrb	r0, [r4, #29]
	rp->commands[5] |= BIT(6) | BIT(7);
    f6d8:	f063 033f 	orn	r3, r3, #63	; 0x3f
    f6dc:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    f6de:	7ae3      	ldrb	r3, [r4, #11]
    f6e0:	f043 0304 	orr.w	r3, r3, #4
    f6e4:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    f6e6:	7be3      	ldrb	r3, [r4, #15]
    f6e8:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    f6ec:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    f6ee:	7c23      	ldrb	r3, [r4, #16]
    f6f0:	f043 0302 	orr.w	r3, r3, #2
    f6f4:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    f6f6:	7de3      	ldrb	r3, [r4, #23]
    f6f8:	f043 0304 	orr.w	r3, r3, #4
    f6fc:	75e3      	strb	r3, [r4, #23]
	rp->commands[27] |= BIT(0) | BIT(1);
    f6fe:	7f23      	ldrb	r3, [r4, #28]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    f700:	f063 0308 	orn	r3, r3, #8
    f704:	7723      	strb	r3, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
    f706:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[26] |= BIT(2) | BIT(3);
    f70a:	f062 0230 	orn	r2, r2, #48	; 0x30
	rp->commands[33] |= BIT(4) | BIT(5);
    f70e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
	rp->commands[26] |= BIT(2) | BIT(3);
    f712:	76e2      	strb	r2, [r4, #27]
	rp->commands[33] |= BIT(4) | BIT(5);
    f714:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[0] |= BIT(5);
    f718:	7862      	ldrb	r2, [r4, #1]
	rp->commands[38] |= BIT(7);
    f71a:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[28] |= BIT(3);
    f71e:	f040 0008 	orr.w	r0, r0, #8
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    f722:	f061 0108 	orn	r1, r1, #8
	rp->commands[0] |= BIT(5);
    f726:	f042 0220 	orr.w	r2, r2, #32
	rp->commands[38] |= BIT(7);
    f72a:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[28] |= BIT(3);
    f72e:	7760      	strb	r0, [r4, #29]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    f730:	76a1      	strb	r1, [r4, #26]
	rp->commands[0] |= BIT(5);
    f732:	7062      	strb	r2, [r4, #1]
	rp->commands[38] |= BIT(7);
    f734:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	if (err == -EINVAL) {
    f738:	e76f      	b.n	f61a <hci_cmd_handle+0xde>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f73a:	2109      	movs	r1, #9
    f73c:	a805      	add	r0, sp, #20
    f73e:	f7ff fe65 	bl	f40c <hci_cmd_complete>
	rp->status = 0x00;
    f742:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f744:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    f746:	2208      	movs	r2, #8
	rp->status = 0x00;
    f748:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    f74c:	f00a fda2 	bl	1a294 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    f750:	2360      	movs	r3, #96	; 0x60
    f752:	7163      	strb	r3, [r4, #5]
	if (err == -EINVAL) {
    f754:	e761      	b.n	f61a <hci_cmd_handle+0xde>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f756:	2107      	movs	r1, #7
    f758:	a805      	add	r0, sp, #20
    f75a:	f7ff fe57 	bl	f40c <hci_cmd_complete>
    f75e:	4601      	mov	r1, r0
	rp->status = 0x00;
    f760:	2000      	movs	r0, #0
    f762:	f801 0b01 	strb.w	r0, [r1], #1
	(void)ll_addr_read(0, &rp->bdaddr.val[0]);
    f766:	f00d fb27 	bl	1cdb8 <ll_addr_read>
	if (err == -EINVAL) {
    f76a:	e756      	b.n	f61a <hci_cmd_handle+0xde>
	switch (ocf) {
    f76c:	2821      	cmp	r0, #33	; 0x21
    f76e:	d84b      	bhi.n	f808 <hci_cmd_handle+0x2cc>
    f770:	2800      	cmp	r0, #0
    f772:	f43f af23 	beq.w	f5bc <hci_cmd_handle+0x80>
    f776:	3801      	subs	r0, #1
    f778:	2820      	cmp	r0, #32
    f77a:	f63f af1f 	bhi.w	f5bc <hci_cmd_handle+0x80>
    f77e:	a301      	add	r3, pc, #4	; (adr r3, f784 <hci_cmd_handle+0x248>)
    f780:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
    f784:	0000f827 	.word	0x0000f827
    f788:	0000f831 	.word	0x0000f831
    f78c:	0000f869 	.word	0x0000f869
    f790:	0000f5bd 	.word	0x0000f5bd
    f794:	0000f8a5 	.word	0x0000f8a5
    f798:	0000f93d 	.word	0x0000f93d
    f79c:	0000f959 	.word	0x0000f959
    f7a0:	0000f969 	.word	0x0000f969
    f7a4:	0000f975 	.word	0x0000f975
    f7a8:	0000f981 	.word	0x0000f981
    f7ac:	0000f98b 	.word	0x0000f98b
    f7b0:	0000f9a3 	.word	0x0000f9a3
    f7b4:	0000f5bd 	.word	0x0000f5bd
    f7b8:	0000f5bd 	.word	0x0000f5bd
    f7bc:	0000f8af 	.word	0x0000f8af
    f7c0:	0000f8c5 	.word	0x0000f8c5
    f7c4:	0000f8cb 	.word	0x0000f8cb
    f7c8:	0000f8d3 	.word	0x0000f8d3
    f7cc:	0000f9d7 	.word	0x0000f9d7
    f7d0:	0000f5bd 	.word	0x0000f5bd
    f7d4:	0000f9b3 	.word	0x0000f9b3
    f7d8:	0000f9cd 	.word	0x0000f9cd
    f7dc:	0000f8db 	.word	0x0000f8db
    f7e0:	0000f901 	.word	0x0000f901
    f7e4:	0000f5bd 	.word	0x0000f5bd
    f7e8:	0000f5bd 	.word	0x0000f5bd
    f7ec:	0000f5bd 	.word	0x0000f5bd
    f7f0:	0000f917 	.word	0x0000f917
    f7f4:	0000f5bd 	.word	0x0000f5bd
    f7f8:	0000f5bd 	.word	0x0000f5bd
    f7fc:	0000f5bd 	.word	0x0000f5bd
    f800:	0000f9f3 	.word	0x0000f9f3
    f804:	0000fa21 	.word	0x0000fa21
    f808:	284b      	cmp	r0, #75	; 0x4b
    f80a:	f47f aed7 	bne.w	f5bc <hci_cmd_handle+0x80>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f80e:	2103      	movs	r1, #3
    f810:	a805      	add	r0, sp, #20
    f812:	f7ff fdfb 	bl	f40c <hci_cmd_complete>
	rp->status = 0x00;
    f816:	4601      	mov	r1, r0
    f818:	2300      	movs	r3, #0
    f81a:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    f81e:	3001      	adds	r0, #1
    f820:	f00d fae6 	bl	1cdf0 <ll_tx_pwr_get>
	if (err == -EINVAL) {
    f824:	e6f9      	b.n	f61a <hci_cmd_handle+0xde>
	le_event_mask = sys_get_le64(cmd->events);
    f826:	68a0      	ldr	r0, [r4, #8]
    f828:	f00d fafe 	bl	1ce28 <sys_get_le64>
    f82c:	4b0c      	ldr	r3, [pc, #48]	; (f860 <hci_cmd_handle+0x324>)
    f82e:	e701      	b.n	f634 <hci_cmd_handle+0xf8>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f830:	2104      	movs	r1, #4
    f832:	a805      	add	r0, sp, #20
    f834:	f7ff fdea 	bl	f40c <hci_cmd_complete>
	rp->status = 0x00;
    f838:	2300      	movs	r3, #0
    f83a:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_TX_SIZE);
    f83c:	221b      	movs	r2, #27
    f83e:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
    f840:	2304      	movs	r3, #4
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_TX_SIZE);
    f842:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
    f844:	70c3      	strb	r3, [r0, #3]
	if (err == -EINVAL) {
    f846:	e6e8      	b.n	f61a <hci_cmd_handle+0xde>
    f848:	0001ef7c 	.word	0x0001ef7c
    f84c:	0001ef2c 	.word	0x0001ef2c
    f850:	000227e8 	.word	0x000227e8
    f854:	000227fe 	.word	0x000227fe
    f858:	20002e68 	.word	0x20002e68
    f85c:	20000250 	.word	0x20000250
    f860:	20000258 	.word	0x20000258
    f864:	20001d54 	.word	0x20001d54
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f868:	2109      	movs	r1, #9
    f86a:	a805      	add	r0, sp, #20
    f86c:	f7ff fdce 	bl	f40c <hci_cmd_complete>
	rp->status = 0x00;
    f870:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f872:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    f874:	2208      	movs	r2, #8
	rp->status = 0x00;
    f876:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    f87a:	f00a fd0b 	bl	1a294 <memset>
	sys_put_le64(ll_feat_get(), rp->features);
    f87e:	f00d faf5 	bl	1ce6c <ll_feat_get>
    f882:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    f886:	7060      	strb	r0, [r4, #1]
	dst[1] = val >> 8;
    f888:	70a3      	strb	r3, [r4, #2]
	sys_put_le16(val >> 16, &dst[2]);
    f88a:	0c00      	lsrs	r0, r0, #16
	dst[1] = val >> 8;
    f88c:	f3c1 2307 	ubfx	r3, r1, #8, #8
	dst[0] = val;
    f890:	7161      	strb	r1, [r4, #5]
	sys_put_le16(val >> 16, &dst[2]);
    f892:	0c09      	lsrs	r1, r1, #16
	dst[0] = val;
    f894:	70e0      	strb	r0, [r4, #3]
    f896:	71e1      	strb	r1, [r4, #7]
	dst[1] = val >> 8;
    f898:	0a00      	lsrs	r0, r0, #8
    f89a:	0a09      	lsrs	r1, r1, #8
    f89c:	7120      	strb	r0, [r4, #4]
    f89e:	71a3      	strb	r3, [r4, #6]
    f8a0:	7221      	strb	r1, [r4, #8]
	if (err == -EINVAL) {
    f8a2:	e6ba      	b.n	f61a <hci_cmd_handle+0xde>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    f8a4:	68a1      	ldr	r1, [r4, #8]
    f8a6:	2001      	movs	r0, #1
    f8a8:	f7ff fbca 	bl	f040 <ll_addr_set>
	*evt = cmd_complete_status(status);
    f8ac:	e6ba      	b.n	f624 <hci_cmd_handle+0xe8>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f8ae:	2102      	movs	r1, #2
    f8b0:	a805      	add	r0, sp, #20
    f8b2:	f7ff fdab 	bl	f40c <hci_cmd_complete>
	rp->status = 0x00;
    f8b6:	2300      	movs	r3, #0
    f8b8:	7003      	strb	r3, [r0, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f8ba:	4604      	mov	r4, r0
	rp->fal_size = ll_fal_size_get();
    f8bc:	f00d fdc1 	bl	1d442 <ll_fal_size_get>
    f8c0:	7060      	strb	r0, [r4, #1]
	if (err == -EINVAL) {
    f8c2:	e6aa      	b.n	f61a <hci_cmd_handle+0xde>
	status = ll_fal_clear();
    f8c4:	f003 fa70 	bl	12da8 <ll_fal_clear>
	*evt = cmd_complete_status(status);
    f8c8:	e6ac      	b.n	f624 <hci_cmd_handle+0xe8>
	status = ll_fal_add(&cmd->addr);
    f8ca:	68a0      	ldr	r0, [r4, #8]
    f8cc:	f003 fa82 	bl	12dd4 <ll_fal_add>
	*evt = cmd_complete_status(status);
    f8d0:	e6a8      	b.n	f624 <hci_cmd_handle+0xe8>
	status = ll_fal_remove(&cmd->addr);
    f8d2:	68a0      	ldr	r0, [r4, #8]
    f8d4:	f003 fab8 	bl	12e48 <ll_fal_remove>
	*evt = cmd_complete_status(status);
    f8d8:	e6a4      	b.n	f624 <hci_cmd_handle+0xe8>
		le_encrypt(cmd, evt);
    f8da:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    f8dc:	aa06      	add	r2, sp, #24
    f8de:	2300      	movs	r3, #0
    f8e0:	f100 0110 	add.w	r1, r0, #16
    f8e4:	f00e f809 	bl	1d8fa <ecb_encrypt>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f8e8:	2111      	movs	r1, #17
    f8ea:	a805      	add	r0, sp, #20
    f8ec:	f7ff fd8e 	bl	f40c <hci_cmd_complete>
	rp->status = 0x00;
    f8f0:	2300      	movs	r3, #0
    f8f2:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    f8f6:	2210      	movs	r2, #16
    f8f8:	a906      	add	r1, sp, #24
    f8fa:	f00a fcc0 	bl	1a27e <memcpy>
	if (err == -EINVAL) {
    f8fe:	e68c      	b.n	f61a <hci_cmd_handle+0xde>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f900:	2109      	movs	r1, #9
    f902:	a805      	add	r0, sp, #20
    f904:	f7ff fd82 	bl	f40c <hci_cmd_complete>
	rp->status = 0x00;
    f908:	2300      	movs	r3, #0
    f90a:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
    f90e:	2108      	movs	r1, #8
    f910:	f003 fd32 	bl	13378 <lll_csrand_get>
	if (err == -EINVAL) {
    f914:	e681      	b.n	f61a <hci_cmd_handle+0xde>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f916:	2109      	movs	r1, #9
    f918:	a805      	add	r0, sp, #20
    f91a:	f7ff fd77 	bl	f40c <hci_cmd_complete>
	dst[0] = val;
    f91e:	22bf      	movs	r2, #191	; 0xbf
    f920:	7042      	strb	r2, [r0, #1]
	dst[1] = val >> 8;
    f922:	22ff      	movs	r2, #255	; 0xff
    f924:	7082      	strb	r2, [r0, #2]
	dst[0] = val;
    f926:	2230      	movs	r2, #48	; 0x30
    f928:	70c2      	strb	r2, [r0, #3]
	dst[1] = val >> 8;
    f92a:	22ec      	movs	r2, #236	; 0xec
    f92c:	7102      	strb	r2, [r0, #4]
	dst[0] = val;
    f92e:	22c0      	movs	r2, #192	; 0xc0
	rp->status = 0x00;
    f930:	2300      	movs	r3, #0
    f932:	7142      	strb	r2, [r0, #5]
	dst[1] = val >> 8;
    f934:	2201      	movs	r2, #1
    f936:	7003      	strb	r3, [r0, #0]
    f938:	7182      	strb	r2, [r0, #6]
    f93a:	e6bb      	b.n	f6b4 <hci_cmd_handle+0x178>
		le_set_adv_param(cmd, evt);
    f93c:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
    f93e:	7ba5      	ldrb	r5, [r4, #14]
    f940:	79a3      	ldrb	r3, [r4, #6]
    f942:	7962      	ldrb	r2, [r4, #5]
    f944:	7921      	ldrb	r1, [r4, #4]
    f946:	8820      	ldrh	r0, [r4, #0]
    f948:	9502      	str	r5, [sp, #8]
    f94a:	7b65      	ldrb	r5, [r4, #13]
    f94c:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
    f94e:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
    f950:	9400      	str	r4, [sp, #0]
    f952:	f001 fd41 	bl	113d8 <ll_adv_params_set>
	*evt = cmd_complete_status(status);
    f956:	e665      	b.n	f624 <hci_cmd_handle+0xe8>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f958:	2102      	movs	r1, #2
    f95a:	a805      	add	r0, sp, #20
    f95c:	f7ff fd56 	bl	f40c <hci_cmd_complete>
	rp->status = 0x00;
    f960:	2300      	movs	r3, #0
    f962:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
    f964:	7043      	strb	r3, [r0, #1]
	if (err == -EINVAL) {
    f966:	e658      	b.n	f61a <hci_cmd_handle+0xde>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
    f968:	68a1      	ldr	r1, [r4, #8]
    f96a:	f811 0b01 	ldrb.w	r0, [r1], #1
    f96e:	f001 fec3 	bl	116f8 <ll_adv_data_set>
	*evt = cmd_complete_status(status);
    f972:	e657      	b.n	f624 <hci_cmd_handle+0xe8>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
    f974:	68a1      	ldr	r1, [r4, #8]
    f976:	f811 0b01 	ldrb.w	r0, [r1], #1
    f97a:	f001 fec5 	bl	11708 <ll_adv_scan_rsp_set>
	*evt = cmd_complete_status(status);
    f97e:	e651      	b.n	f624 <hci_cmd_handle+0xe8>
	status = ll_adv_enable(cmd->enable);
    f980:	68a3      	ldr	r3, [r4, #8]
    f982:	7818      	ldrb	r0, [r3, #0]
    f984:	f7f0 fdd0 	bl	528 <ll_adv_enable>
	*evt = cmd_complete_status(status);
    f988:	e64c      	b.n	f624 <hci_cmd_handle+0xe8>
		le_set_scan_param(cmd, evt);
    f98a:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    f98c:	7963      	ldrb	r3, [r4, #5]
    f98e:	f8b4 2003 	ldrh.w	r2, [r4, #3]
    f992:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    f996:	7820      	ldrb	r0, [r4, #0]
    f998:	79a4      	ldrb	r4, [r4, #6]
    f99a:	9400      	str	r4, [sp, #0]
    f99c:	f7f1 f840 	bl	a20 <ll_scan_params_set>
	*evt = cmd_complete_status(status);
    f9a0:	e640      	b.n	f624 <hci_cmd_handle+0xe8>
	status = ll_scan_enable(cmd->enable);
    f9a2:	68a3      	ldr	r3, [r4, #8]
    f9a4:	7818      	ldrb	r0, [r3, #0]
    f9a6:	f00d fba2 	bl	1d0ee <ll_scan_enable>
		status = BT_HCI_ERR_SUCCESS;
    f9aa:	280c      	cmp	r0, #12
	*evt = cmd_complete_status(status);
    f9ac:	bf08      	it	eq
    f9ae:	2000      	moveq	r0, #0
    f9b0:	e638      	b.n	f624 <hci_cmd_handle+0xe8>
	handle = sys_le16_to_cpu(cmd->handle);
    f9b2:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f9b4:	2108      	movs	r1, #8
    f9b6:	a805      	add	r0, sp, #20
	handle = sys_le16_to_cpu(cmd->handle);
    f9b8:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f9ba:	f7ff fd27 	bl	f40c <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    f9be:	b2ae      	uxth	r6, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f9c0:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    f9c2:	1cc1      	adds	r1, r0, #3
    f9c4:	4630      	mov	r0, r6
    f9c6:	f00d fcab 	bl	1d320 <ll_chm_get>
    f9ca:	e645      	b.n	f658 <hci_cmd_handle+0x11c>
	handle = sys_le16_to_cpu(cmd->handle);
    f9cc:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
    f9ce:	8818      	ldrh	r0, [r3, #0]
    f9d0:	f00d fcbd 	bl	1d34e <ll_feature_req_send>
	*evt = cmd_status(status);
    f9d4:	e602      	b.n	f5dc <hci_cmd_handle+0xa0>
		le_conn_update(cmd, evt);
    f9d6:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
    f9d8:	8911      	ldrh	r1, [r2, #8]
    f9da:	8853      	ldrh	r3, [r2, #2]
    f9dc:	8810      	ldrh	r0, [r2, #0]
    f9de:	9102      	str	r1, [sp, #8]
    f9e0:	88d1      	ldrh	r1, [r2, #6]
    f9e2:	9101      	str	r1, [sp, #4]
    f9e4:	8892      	ldrh	r2, [r2, #4]
    f9e6:	9200      	str	r2, [sp, #0]
    f9e8:	2200      	movs	r2, #0
    f9ea:	4611      	mov	r1, r2
    f9ec:	f00d fc13 	bl	1d216 <ll_conn_update>
	*evt = cmd_status(status);
    f9f0:	e5f4      	b.n	f5dc <hci_cmd_handle+0xa0>
		le_conn_param_req_reply(cmd, evt);
    f9f2:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    f9f4:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    f9f6:	8815      	ldrh	r5, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    f9f8:	8853      	ldrh	r3, [r2, #2]
    f9fa:	9102      	str	r1, [sp, #8]
    f9fc:	88d1      	ldrh	r1, [r2, #6]
    f9fe:	9101      	str	r1, [sp, #4]
    fa00:	8892      	ldrh	r2, [r2, #4]
    fa02:	9200      	str	r2, [sp, #0]
    fa04:	2200      	movs	r2, #0
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
    fa06:	2102      	movs	r1, #2
    fa08:	b2a8      	uxth	r0, r5
    fa0a:	f00d fc04 	bl	1d216 <ll_conn_update>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    fa0e:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
    fa10:	4604      	mov	r4, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    fa12:	a805      	add	r0, sp, #20
    fa14:	f7ff fcfa 	bl	f40c <hci_cmd_complete>
	rp->status = status;
    fa18:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    fa1a:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (err == -EINVAL) {
    fa1e:	e5fc      	b.n	f61a <hci_cmd_handle+0xde>
		le_conn_param_req_neg_reply(cmd, evt);
    fa20:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    fa22:	881d      	ldrh	r5, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
    fa24:	789a      	ldrb	r2, [r3, #2]
    fa26:	2300      	movs	r3, #0
    fa28:	e9cd 3301 	strd	r3, r3, [sp, #4]
    fa2c:	9300      	str	r3, [sp, #0]
    fa2e:	e7ea      	b.n	fa06 <hci_cmd_handle+0x4ca>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
    fa30:	aa05      	add	r2, sp, #20
    fa32:	4621      	mov	r1, r4
    fa34:	f7ff fcfa 	bl	f42c <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
    fa38:	3016      	adds	r0, #22
    fa3a:	f43f adbf 	beq.w	f5bc <hci_cmd_handle+0x80>
    fa3e:	e5ec      	b.n	f61a <hci_cmd_handle+0xde>

0000fa40 <hci_acl_handle>:
{
    fa40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
    fa44:	2300      	movs	r3, #0
    fa46:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    fa48:	8983      	ldrh	r3, [r0, #12]
    fa4a:	2b03      	cmp	r3, #3
{
    fa4c:	4605      	mov	r5, r0
    fa4e:	460e      	mov	r6, r1
	if (buf->len < sizeof(*acl)) {
    fa50:	d80c      	bhi.n	fa6c <hci_acl_handle+0x2c>
    fa52:	4943      	ldr	r1, [pc, #268]	; (fb60 <hci_acl_handle+0x120>)
    fa54:	4b43      	ldr	r3, [pc, #268]	; (fb64 <hci_acl_handle+0x124>)
		BT_ERR("No HCI ACL header");
    fa56:	4844      	ldr	r0, [pc, #272]	; (fb68 <hci_acl_handle+0x128>)
    fa58:	1ac9      	subs	r1, r1, r3
    fa5a:	08c9      	lsrs	r1, r1, #3
    fa5c:	0189      	lsls	r1, r1, #6
    fa5e:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid HCI ACL packet length");
    fa62:	f009 fcee 	bl	19442 <log_0>
		return -EINVAL;
    fa66:	f06f 0015 	mvn.w	r0, #21
    fa6a:	e033      	b.n	fad4 <hci_acl_handle+0x94>
    fa6c:	2104      	movs	r1, #4
    fa6e:	3008      	adds	r0, #8
    fa70:	f00e f92c 	bl	1dccc <net_buf_simple_pull_mem>
	if (buf->len < len) {
    fa74:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
    fa76:	8847      	ldrh	r7, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
    fa78:	f8b0 9000 	ldrh.w	r9, [r0]
	if (buf->len < len) {
    fa7c:	42bb      	cmp	r3, r7
    fa7e:	d208      	bcs.n	fa92 <hci_acl_handle+0x52>
    fa80:	4937      	ldr	r1, [pc, #220]	; (fb60 <hci_acl_handle+0x120>)
    fa82:	4b38      	ldr	r3, [pc, #224]	; (fb64 <hci_acl_handle+0x124>)
		BT_ERR("Invalid HCI ACL packet length");
    fa84:	4839      	ldr	r0, [pc, #228]	; (fb6c <hci_acl_handle+0x12c>)
    fa86:	1ac9      	subs	r1, r1, r3
    fa88:	08c9      	lsrs	r1, r1, #3
    fa8a:	0189      	lsls	r1, r1, #6
    fa8c:	f041 0101 	orr.w	r1, r1, #1
    fa90:	e7e7      	b.n	fa62 <hci_acl_handle+0x22>
	if (len > CONFIG_BT_BUF_ACL_TX_SIZE) {
    fa92:	2f1b      	cmp	r7, #27
    fa94:	d908      	bls.n	faa8 <hci_acl_handle+0x68>
    fa96:	4932      	ldr	r1, [pc, #200]	; (fb60 <hci_acl_handle+0x120>)
    fa98:	4b32      	ldr	r3, [pc, #200]	; (fb64 <hci_acl_handle+0x124>)
		BT_ERR("Invalid HCI ACL Data length");
    fa9a:	4835      	ldr	r0, [pc, #212]	; (fb70 <hci_acl_handle+0x130>)
    fa9c:	1ac9      	subs	r1, r1, r3
    fa9e:	08c9      	lsrs	r1, r1, #3
    faa0:	0189      	lsls	r1, r1, #6
    faa2:	f041 0101 	orr.w	r1, r1, #1
    faa6:	e7dc      	b.n	fa62 <hci_acl_handle+0x22>
	node_tx = ll_tx_mem_acquire();
    faa8:	f002 f8c6 	bl	11c38 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    faac:	ea4f 3819 	mov.w	r8, r9, lsr #12
	if (!node_tx) {
    fab0:	4604      	mov	r4, r0
    fab2:	bb40      	cbnz	r0, fb06 <hci_acl_handle+0xc6>
    fab4:	492b      	ldr	r1, [pc, #172]	; (fb64 <hci_acl_handle+0x124>)
    fab6:	4b2a      	ldr	r3, [pc, #168]	; (fb60 <hci_acl_handle+0x120>)
		BT_ERR("Tx Buffer Overflow");
    fab8:	482e      	ldr	r0, [pc, #184]	; (fb74 <hci_acl_handle+0x134>)
    faba:	1a5b      	subs	r3, r3, r1
    fabc:	08db      	lsrs	r3, r3, #3
    fabe:	019b      	lsls	r3, r3, #6
    fac0:	f043 0101 	orr.w	r1, r3, #1
    fac4:	f009 fcbd 	bl	19442 <log_0>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    fac8:	4b2b      	ldr	r3, [pc, #172]	; (fb78 <hci_acl_handle+0x138>)
    faca:	681b      	ldr	r3, [r3, #0]
    facc:	019b      	lsls	r3, r3, #6
    face:	d403      	bmi.n	fad8 <hci_acl_handle+0x98>
		return -ENOBUFS;
    fad0:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    fad4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    fad8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    fadc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fae0:	2001      	movs	r0, #1
    fae2:	f7f4 fb63 	bl	41ac <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
    fae6:	2102      	movs	r1, #2
    fae8:	6030      	str	r0, [r6, #0]
    faea:	3008      	adds	r0, #8
    faec:	f00e f88d 	bl	1dc0a <net_buf_simple_add>
	hdr->len = len;
    faf0:	2401      	movs	r4, #1
	hdr->evt = evt;
    faf2:	231a      	movs	r3, #26
    faf4:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    faf6:	7044      	strb	r4, [r0, #1]
    faf8:	6830      	ldr	r0, [r6, #0]
    fafa:	4621      	mov	r1, r4
    fafc:	3008      	adds	r0, #8
    fafe:	f00e f884 	bl	1dc0a <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    fb02:	7004      	strb	r4, [r0, #0]
    fb04:	e7e4      	b.n	fad0 <hci_acl_handle+0x90>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
    fb06:	ea5f 0398 	movs.w	r3, r8, lsr #2
    fb0a:	d1ac      	bne.n	fa66 <hci_acl_handle+0x26>
	switch (bt_acl_flags_pb(flags)) {
    fb0c:	f1b8 0f00 	cmp.w	r8, #0
    fb10:	d006      	beq.n	fb20 <hci_acl_handle+0xe0>
    fb12:	f1b8 0f01 	cmp.w	r8, #1
    fb16:	d1a6      	bne.n	fa66 <hci_acl_handle+0x26>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    fb18:	7903      	ldrb	r3, [r0, #4]
    fb1a:	f368 0301 	bfi	r3, r8, #0, #2
    fb1e:	e003      	b.n	fb28 <hci_acl_handle+0xe8>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    fb20:	7903      	ldrb	r3, [r0, #4]
    fb22:	2202      	movs	r2, #2
    fb24:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data->len = len;
    fb28:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    fb2a:	68a9      	ldr	r1, [r5, #8]
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    fb2c:	7123      	strb	r3, [r4, #4]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    fb2e:	463a      	mov	r2, r7
    fb30:	1de0      	adds	r0, r4, #7
    fb32:	f00a fba4 	bl	1a27e <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    fb36:	4621      	mov	r1, r4
    fb38:	f3c9 000b 	ubfx	r0, r9, #0, #12
    fb3c:	f002 f888 	bl	11c50 <ll_tx_mem_enqueue>
    fb40:	2800      	cmp	r0, #0
    fb42:	d0c7      	beq.n	fad4 <hci_acl_handle+0x94>
    fb44:	4b07      	ldr	r3, [pc, #28]	; (fb64 <hci_acl_handle+0x124>)
    fb46:	4906      	ldr	r1, [pc, #24]	; (fb60 <hci_acl_handle+0x120>)
		BT_ERR("Invalid Tx Enqueue");
    fb48:	480c      	ldr	r0, [pc, #48]	; (fb7c <hci_acl_handle+0x13c>)
    fb4a:	1ac9      	subs	r1, r1, r3
    fb4c:	08c9      	lsrs	r1, r1, #3
    fb4e:	0189      	lsls	r1, r1, #6
    fb50:	f041 0101 	orr.w	r1, r1, #1
    fb54:	f009 fc75 	bl	19442 <log_0>
		ll_tx_mem_release(node_tx);
    fb58:	4620      	mov	r0, r4
    fb5a:	f002 f873 	bl	11c44 <ll_tx_mem_release>
		return -EINVAL;
    fb5e:	e782      	b.n	fa66 <hci_acl_handle+0x26>
    fb60:	0001ef7c 	.word	0x0001ef7c
    fb64:	0001ef2c 	.word	0x0001ef2c
    fb68:	0002281c 	.word	0x0002281c
    fb6c:	0002282e 	.word	0x0002282e
    fb70:	0002284c 	.word	0x0002284c
    fb74:	00022868 	.word	0x00022868
    fb78:	20000250 	.word	0x20000250
    fb7c:	0002287b 	.word	0x0002287b

0000fb80 <hci_disconn_complete_encode>:
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    fb80:	4b0d      	ldr	r3, [pc, #52]	; (fbb8 <hci_disconn_complete_encode+0x38>)
    fb82:	681b      	ldr	r3, [r3, #0]
    fb84:	06db      	lsls	r3, r3, #27
{
    fb86:	b570      	push	{r4, r5, r6, lr}
    fb88:	4605      	mov	r5, r0
    fb8a:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    fb8c:	d512      	bpl.n	fbb4 <hci_disconn_complete_encode+0x34>
    fb8e:	f102 0408 	add.w	r4, r2, #8
    fb92:	2102      	movs	r1, #2
    fb94:	4620      	mov	r0, r4
    fb96:	f00e f838 	bl	1dc0a <net_buf_simple_add>
	hdr->evt = evt;
    fb9a:	2305      	movs	r3, #5
	hdr->len = len;
    fb9c:	2104      	movs	r1, #4
	hdr->evt = evt;
    fb9e:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    fba0:	7041      	strb	r1, [r0, #1]
    fba2:	4620      	mov	r0, r4
    fba4:	f00e f831 	bl	1dc0a <net_buf_simple_add>
	ep->status = 0x00;
    fba8:	2300      	movs	r3, #0
    fbaa:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    fbac:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
    fbb0:	782b      	ldrb	r3, [r5, #0]
    fbb2:	70c3      	strb	r3, [r0, #3]
}
    fbb4:	bd70      	pop	{r4, r5, r6, pc}
    fbb6:	bf00      	nop
    fbb8:	20000250 	.word	0x20000250

0000fbbc <hci_disconn_complete_process>:
	conn_count--;
    fbbc:	4a02      	ldr	r2, [pc, #8]	; (fbc8 <hci_disconn_complete_process+0xc>)
    fbbe:	6813      	ldr	r3, [r2, #0]
    fbc0:	3b01      	subs	r3, #1
    fbc2:	6013      	str	r3, [r2, #0]
}
    fbc4:	4770      	bx	lr
    fbc6:	bf00      	nop
    fbc8:	20001d54 	.word	0x20001d54

0000fbcc <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    fbcc:	7f03      	ldrb	r3, [r0, #28]
    fbce:	f003 0303 	and.w	r3, r3, #3
    fbd2:	3b01      	subs	r3, #1
    fbd4:	2b01      	cmp	r3, #1
{
    fbd6:	b570      	push	{r4, r5, r6, lr}
    fbd8:	4604      	mov	r4, r0
	switch (pdu_data->ll_id) {
    fbda:	d81c      	bhi.n	fc16 <hci_acl_encode+0x4a>
    fbdc:	f101 0508 	add.w	r5, r1, #8
	handle = node_rx->hdr.handle;
    fbe0:	88c6      	ldrh	r6, [r0, #6]
    fbe2:	2104      	movs	r1, #4
    fbe4:	4628      	mov	r0, r5
    fbe6:	f00e f810 	bl	1dc0a <net_buf_simple_add>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    fbea:	7f23      	ldrb	r3, [r4, #28]
    fbec:	f003 0303 	and.w	r3, r3, #3
    fbf0:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    fbf2:	bf0c      	ite	eq
    fbf4:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    fbf8:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
    fbfc:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
    fbfe:	7f61      	ldrb	r1, [r4, #29]
    fc00:	8041      	strh	r1, [r0, #2]
    fc02:	4628      	mov	r0, r5
    fc04:	f00e f801 	bl	1dc0a <net_buf_simple_add>
		data = (void *)net_buf_add(buf, pdu_data->len);
		memcpy(data, pdu_data->lldata, pdu_data->len);
    fc08:	7f62      	ldrb	r2, [r4, #29]
    fc0a:	f104 011f 	add.w	r1, r4, #31

	default:
		LL_ASSERT(0);
		break;
	}
}
    fc0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
    fc12:	f00a bb34 	b.w	1a27e <memcpy>
		LL_ASSERT(0);
    fc16:	4a07      	ldr	r2, [pc, #28]	; (fc34 <hci_acl_encode+0x68>)
    fc18:	4907      	ldr	r1, [pc, #28]	; (fc38 <hci_acl_encode+0x6c>)
    fc1a:	4808      	ldr	r0, [pc, #32]	; (fc3c <hci_acl_encode+0x70>)
    fc1c:	f641 1389 	movw	r3, #6537	; 0x1989
    fc20:	f008 ffd0 	bl	18bc4 <printk>
    fc24:	4040      	eors	r0, r0
    fc26:	f380 8811 	msr	BASEPRI, r0
    fc2a:	f04f 0003 	mov.w	r0, #3
    fc2e:	df02      	svc	2
}
    fc30:	bd70      	pop	{r4, r5, r6, pc}
    fc32:	bf00      	nop
    fc34:	0002288e 	.word	0x0002288e
    fc38:	000218fc 	.word	0x000218fc
    fc3c:	00020429 	.word	0x00020429

0000fc40 <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
    fc40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fc44:	4604      	mov	r4, r0
    fc46:	b086      	sub	sp, #24
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    fc48:	7925      	ldrb	r5, [r4, #4]
	handle = node_rx->hdr.handle;
    fc4a:	88e6      	ldrh	r6, [r4, #6]
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    fc4c:	2d03      	cmp	r5, #3
{
    fc4e:	4688      	mov	r8, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
    fc50:	f100 001c 	add.w	r0, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    fc54:	f000 80f5 	beq.w	fe42 <hci_evt_encode+0x202>
	switch (node_rx->hdr.type) {
    fc58:	2d17      	cmp	r5, #23
    fc5a:	f000 80eb 	beq.w	fe34 <hci_evt_encode+0x1f4>
    fc5e:	d812      	bhi.n	fc86 <hci_evt_encode+0x46>
    fc60:	2d05      	cmp	r5, #5
    fc62:	d02d      	beq.n	fcc0 <hci_evt_encode+0x80>
    fc64:	2d16      	cmp	r5, #22
    fc66:	f000 80ae 	beq.w	fdc6 <hci_evt_encode+0x186>
		LL_ASSERT(0);
    fc6a:	f641 0394 	movw	r3, #6292	; 0x1894
		LL_ASSERT(0);
    fc6e:	4a9a      	ldr	r2, [pc, #616]	; (fed8 <hci_evt_encode+0x298>)
    fc70:	499a      	ldr	r1, [pc, #616]	; (fedc <hci_evt_encode+0x29c>)
    fc72:	489b      	ldr	r0, [pc, #620]	; (fee0 <hci_evt_encode+0x2a0>)
    fc74:	f008 ffa6 	bl	18bc4 <printk>
    fc78:	4040      	eors	r0, r0
    fc7a:	f380 8811 	msr	BASEPRI, r0
    fc7e:	f04f 0003 	mov.w	r0, #3
    fc82:	df02      	svc	2
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    fc84:	e067      	b.n	fd56 <hci_evt_encode+0x116>
	switch (node_rx->hdr.type) {
    fc86:	2d18      	cmp	r5, #24
    fc88:	d1ef      	bne.n	fc6a <hci_evt_encode+0x2a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    fc8a:	4b96      	ldr	r3, [pc, #600]	; (fee4 <hci_evt_encode+0x2a4>)
    fc8c:	685b      	ldr	r3, [r3, #4]
    fc8e:	0098      	lsls	r0, r3, #2
    fc90:	d561      	bpl.n	fd56 <hci_evt_encode+0x116>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    fc92:	4b95      	ldr	r3, [pc, #596]	; (fee8 <hci_evt_encode+0x2a8>)
    fc94:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    fc96:	0759      	lsls	r1, r3, #29
    fc98:	d55d      	bpl.n	fd56 <hci_evt_encode+0x116>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    fc9a:	2209      	movs	r2, #9
    fc9c:	2103      	movs	r1, #3
    fc9e:	4640      	mov	r0, r8
    fca0:	f00d f8aa 	bl	1cdf8 <meta_evt>
	sep->status = cu->status;
    fca4:	7f23      	ldrb	r3, [r4, #28]
    fca6:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
    fca8:	8be3      	ldrh	r3, [r4, #30]
    fcaa:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
    fcae:	8c23      	ldrh	r3, [r4, #32]
    fcb0:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
    fcb4:	8c63      	ldrh	r3, [r4, #34]	; 0x22
	sep->handle = sys_cpu_to_le16(handle);
    fcb6:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
    fcba:	f8a0 3007 	strh.w	r3, [r0, #7]
    fcbe:	e04a      	b.n	fd56 <hci_evt_encode+0x116>
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    fcc0:	4b8a      	ldr	r3, [pc, #552]	; (feec <hci_evt_encode+0x2ac>)
	rssi = -(node_rx->hdr.rx_ftr.rssi);
    fcc2:	7e27      	ldrb	r7, [r4, #24]
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    fcc4:	6818      	ldr	r0, [r3, #0]
    fcc6:	889a      	ldrh	r2, [r3, #4]
    fcc8:	799b      	ldrb	r3, [r3, #6]
    fcca:	f88d 3016 	strb.w	r3, [sp, #22]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    fcce:	4b85      	ldr	r3, [pc, #532]	; (fee4 <hci_evt_encode+0x2a4>)
	direct = node_rx->hdr.rx_ftr.direct;
    fcd0:	7e65      	ldrb	r5, [r4, #25]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    fcd2:	685b      	ldr	r3, [r3, #4]
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    fcd4:	9004      	str	r0, [sp, #16]
	rssi = -(node_rx->hdr.rx_ftr.rssi);
    fcd6:	427f      	negs	r7, r7
	if (direct) {
    fcd8:	f015 0501 	ands.w	r5, r5, #1
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    fcdc:	f8ad 2014 	strh.w	r2, [sp, #20]
	rssi = -(node_rx->hdr.rx_ftr.rssi);
    fce0:	b27f      	sxtb	r7, r7
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    fce2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
	if (direct) {
    fce6:	d039      	beq.n	fd5c <hci_evt_encode+0x11c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    fce8:	2b00      	cmp	r3, #0
    fcea:	d034      	beq.n	fd56 <hci_evt_encode+0x116>
	    !(le_event_mask & BT_EVT_MASK_LE_DIRECT_ADV_REPORT)) {
    fcec:	4b7e      	ldr	r3, [pc, #504]	; (fee8 <hci_evt_encode+0x2a8>)
    fcee:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    fcf0:	055a      	lsls	r2, r3, #21
    fcf2:	d530      	bpl.n	fd56 <hci_evt_encode+0x116>
	LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    fcf4:	7f23      	ldrb	r3, [r4, #28]
    fcf6:	f003 030f 	and.w	r3, r3, #15
    fcfa:	2b01      	cmp	r3, #1
    fcfc:	d00c      	beq.n	fd18 <hci_evt_encode+0xd8>
    fcfe:	4a76      	ldr	r2, [pc, #472]	; (fed8 <hci_evt_encode+0x298>)
    fd00:	497b      	ldr	r1, [pc, #492]	; (fef0 <hci_evt_encode+0x2b0>)
    fd02:	4877      	ldr	r0, [pc, #476]	; (fee0 <hci_evt_encode+0x2a0>)
    fd04:	f241 2327 	movw	r3, #4647	; 0x1227
    fd08:	f008 ff5c 	bl	18bc4 <printk>
    fd0c:	4040      	eors	r0, r0
    fd0e:	f380 8811 	msr	BASEPRI, r0
    fd12:	f04f 0003 	mov.w	r0, #3
    fd16:	df02      	svc	2
	drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    fd18:	2211      	movs	r2, #17
    fd1a:	210b      	movs	r1, #11
    fd1c:	4640      	mov	r0, r8
    fd1e:	f00d f86b 	bl	1cdf8 <meta_evt>
	drp->num_reports = 1U;
    fd22:	2301      	movs	r3, #1
    fd24:	7003      	strb	r3, [r0, #0]
	dir_info->evt_type = BT_HCI_ADV_DIRECT_IND;
    fd26:	7043      	strb	r3, [r0, #1]
		dir_info->addr.type = adv->tx_addr;
    fd28:	7f23      	ldrb	r3, [r4, #28]
    fd2a:	f3c3 1380 	ubfx	r3, r3, #6, #1
	drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    fd2e:	4605      	mov	r5, r0
		dir_info->addr.type = adv->tx_addr;
    fd30:	7083      	strb	r3, [r0, #2]
		memcpy(&dir_info->addr.a.val[0], &adv->direct_ind.adv_addr[0],
    fd32:	2206      	movs	r2, #6
    fd34:	f104 011e 	add.w	r1, r4, #30
    fd38:	3003      	adds	r0, #3
    fd3a:	f00a faa0 	bl	1a27e <memcpy>
	dir_info->dir_addr.type = adv->rx_addr;
    fd3e:	7f23      	ldrb	r3, [r4, #28]
    fd40:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    fd44:	726b      	strb	r3, [r5, #9]
	memcpy(&dir_info->dir_addr.a.val[0],
    fd46:	2206      	movs	r2, #6
    fd48:	f104 0124 	add.w	r1, r4, #36	; 0x24
    fd4c:	f105 000a 	add.w	r0, r5, #10
    fd50:	f00a fa95 	bl	1a27e <memcpy>
	dir_info->rssi = rssi;
    fd54:	742f      	strb	r7, [r5, #16]
}
    fd56:	b006      	add	sp, #24
    fd58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    fd5c:	2b00      	cmp	r3, #0
    fd5e:	d0fa      	beq.n	fd56 <hci_evt_encode+0x116>
	    !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
    fd60:	4b61      	ldr	r3, [pc, #388]	; (fee8 <hci_evt_encode+0x2a8>)
    fd62:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    fd64:	079b      	lsls	r3, r3, #30
    fd66:	d5f6      	bpl.n	fd56 <hci_evt_encode+0x116>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    fd68:	7f23      	ldrb	r3, [r4, #28]
    fd6a:	f003 030f 	and.w	r3, r3, #15
    fd6e:	2b01      	cmp	r3, #1
		data_len = (adv->len - BDADDR_SIZE);
    fd70:	bf1e      	ittt	ne
    fd72:	7f65      	ldrbne	r5, [r4, #29]
    fd74:	3d06      	subne	r5, #6
    fd76:	b2ed      	uxtbne	r5, r5
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    fd78:	f105 020b 	add.w	r2, r5, #11
    fd7c:	b2d2      	uxtb	r2, r2
    fd7e:	2102      	movs	r1, #2
    fd80:	4640      	mov	r0, r8
    fd82:	f00d f839 	bl	1cdf8 <meta_evt>
	sep->num_reports = 1U;
    fd86:	2301      	movs	r3, #1
    fd88:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    fd8a:	7f23      	ldrb	r3, [r4, #28]
    fd8c:	f003 030f 	and.w	r3, r3, #15
    fd90:	3318      	adds	r3, #24
    fd92:	446b      	add	r3, sp
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    fd94:	4606      	mov	r6, r0
	adv_info->evt_type = c_adv_type[adv->type];
    fd96:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    fd9a:	7043      	strb	r3, [r0, #1]
		adv_info->addr.type = adv->tx_addr;
    fd9c:	7f23      	ldrb	r3, [r4, #28]
    fd9e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    fda2:	7083      	strb	r3, [r0, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    fda4:	2206      	movs	r2, #6
    fda6:	f104 011e 	add.w	r1, r4, #30
    fdaa:	3003      	adds	r0, #3
    fdac:	f00a fa67 	bl	1a27e <memcpy>
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    fdb0:	360a      	adds	r6, #10
	adv_info->length = data_len;
    fdb2:	f806 5c01 	strb.w	r5, [r6, #-1]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    fdb6:	462a      	mov	r2, r5
    fdb8:	f104 0124 	add.w	r1, r4, #36	; 0x24
    fdbc:	4630      	mov	r0, r6
    fdbe:	f00a fa5e 	bl	1a27e <memcpy>
	*prssi = rssi;
    fdc2:	5577      	strb	r7, [r6, r5]
    fdc4:	e7c7      	b.n	fd56 <hci_evt_encode+0x116>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    fdc6:	4b47      	ldr	r3, [pc, #284]	; (fee4 <hci_evt_encode+0x2a4>)
    fdc8:	685b      	ldr	r3, [r3, #4]
    fdca:	009f      	lsls	r7, r3, #2
    fdcc:	d5c3      	bpl.n	fd56 <hci_evt_encode+0x116>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    fdce:	4b46      	ldr	r3, [pc, #280]	; (fee8 <hci_evt_encode+0x2a8>)
    fdd0:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    fdd2:	07dd      	lsls	r5, r3, #31
    fdd4:	d5bf      	bpl.n	fd56 <hci_evt_encode+0x116>
	uint8_t status = cc->status;
    fdd6:	7f27      	ldrb	r7, [r4, #28]
	if (!status) {
    fdd8:	b91f      	cbnz	r7, fde2 <hci_evt_encode+0x1a2>
		conn_count++;
    fdda:	4a46      	ldr	r2, [pc, #280]	; (fef4 <hci_evt_encode+0x2b4>)
    fddc:	6813      	ldr	r3, [r2, #0]
    fdde:	3301      	adds	r3, #1
    fde0:	6013      	str	r3, [r2, #0]
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    fde2:	2212      	movs	r2, #18
    fde4:	2101      	movs	r1, #1
    fde6:	4640      	mov	r0, r8
    fde8:	f00d f806 	bl	1cdf8 <meta_evt>
    fdec:	4605      	mov	r5, r0
	if (status) {
    fdee:	b12f      	cbz	r7, fdfc <hci_evt_encode+0x1bc>
		(void)memset(lecc, 0x00, sizeof(*lecc));
    fdf0:	2212      	movs	r2, #18
    fdf2:	2100      	movs	r1, #0
    fdf4:	f00a fa4e 	bl	1a294 <memset>
		lecc->status = status;
    fdf8:	702f      	strb	r7, [r5, #0]
		return;
    fdfa:	e7ac      	b.n	fd56 <hci_evt_encode+0x116>
	lecc->status = 0x00;
    fdfc:	7007      	strb	r7, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    fdfe:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = cc->role;
    fe02:	7f63      	ldrb	r3, [r4, #29]
    fe04:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
    fe06:	7fa3      	ldrb	r3, [r4, #30]
    fe08:	f003 0301 	and.w	r3, r3, #1
    fe0c:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &cc->peer_addr[0], BDADDR_SIZE);
    fe0e:	2206      	movs	r2, #6
    fe10:	f104 011f 	add.w	r1, r4, #31
    fe14:	3005      	adds	r0, #5
    fe16:	f00a fa32 	bl	1a27e <memcpy>
	lecc->interval = sys_cpu_to_le16(cc->interval);
    fe1a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    fe1c:	f8a5 300b 	strh.w	r3, [r5, #11]
	lecc->latency = sys_cpu_to_le16(cc->latency);
    fe20:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    fe22:	f8a5 300d 	strh.w	r3, [r5, #13]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    fe26:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    fe28:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = cc->sca;
    fe2c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    fe30:	746b      	strb	r3, [r5, #17]
    fe32:	e790      	b.n	fd56 <hci_evt_encode+0x116>
		hci_disconn_complete_encode(pdu_data, handle, buf);
    fe34:	460a      	mov	r2, r1
    fe36:	4631      	mov	r1, r6
}
    fe38:	b006      	add	sp, #24
    fe3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		hci_disconn_complete_encode(pdu_data, handle, buf);
    fe3e:	f7ff be9f 	b.w	fb80 <hci_disconn_complete_encode>
	switch (pdu_data->llctrl.opcode) {
    fe42:	7fe3      	ldrb	r3, [r4, #31]
    fe44:	2b09      	cmp	r3, #9
    fe46:	d00c      	beq.n	fe62 <hci_evt_encode+0x222>
    fe48:	2b0f      	cmp	r3, #15
    fe4a:	d013      	beq.n	fe74 <hci_evt_encode+0x234>
    fe4c:	2b07      	cmp	r3, #7
    fe4e:	d13f      	bne.n	fed0 <hci_evt_encode+0x290>
		le_unknown_rsp(pdu_data, handle, buf);
    fe50:	f894 1020 	ldrb.w	r1, [r4, #32]
	switch (pdu_data->llctrl.unknown_rsp.type) {
    fe54:	290e      	cmp	r1, #14
    fe56:	d12e      	bne.n	feb6 <hci_evt_encode+0x276>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    fe58:	4643      	mov	r3, r8
    fe5a:	4632      	mov	r2, r6
    fe5c:	2100      	movs	r1, #0
    fe5e:	201a      	movs	r0, #26
    fe60:	e003      	b.n	fe6a <hci_evt_encode+0x22a>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    fe62:	460b      	mov	r3, r1
    fe64:	4632      	mov	r2, r6
    fe66:	4601      	mov	r1, r0
    fe68:	2000      	movs	r0, #0
}
    fe6a:	b006      	add	sp, #24
    fe6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    fe70:	f7ff baa6 	b.w	f3c0 <le_remote_feat_complete>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    fe74:	4b1b      	ldr	r3, [pc, #108]	; (fee4 <hci_evt_encode+0x2a4>)
    fe76:	685b      	ldr	r3, [r3, #4]
    fe78:	009a      	lsls	r2, r3, #2
    fe7a:	d503      	bpl.n	fe84 <hci_evt_encode+0x244>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    fe7c:	4b1a      	ldr	r3, [pc, #104]	; (fee8 <hci_evt_encode+0x2a8>)
    fe7e:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    fe80:	069b      	lsls	r3, r3, #26
    fe82:	d409      	bmi.n	fe98 <hci_evt_encode+0x258>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
    fe84:	2300      	movs	r3, #0
    fe86:	e9cd 3301 	strd	r3, r3, [sp, #4]
    fe8a:	9300      	str	r3, [sp, #0]
    fe8c:	221a      	movs	r2, #26
    fe8e:	2102      	movs	r1, #2
    fe90:	4630      	mov	r0, r6
    fe92:	f00d f9c0 	bl	1d216 <ll_conn_update>
		return;
    fe96:	e75e      	b.n	fd56 <hci_evt_encode+0x116>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    fe98:	220a      	movs	r2, #10
    fe9a:	2106      	movs	r1, #6
    fe9c:	4640      	mov	r0, r8
    fe9e:	f00c ffab 	bl	1cdf8 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    fea2:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    fea4:	8c23      	ldrh	r3, [r4, #32]
    fea6:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    fea8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    feaa:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    feac:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    feae:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    feb0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    feb2:	8103      	strh	r3, [r0, #8]
    feb4:	e74f      	b.n	fd56 <hci_evt_encode+0x116>
    feb6:	4b10      	ldr	r3, [pc, #64]	; (fef8 <hci_evt_encode+0x2b8>)
    feb8:	4a10      	ldr	r2, [pc, #64]	; (fefc <hci_evt_encode+0x2bc>)
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    feba:	4811      	ldr	r0, [pc, #68]	; (ff00 <hci_evt_encode+0x2c0>)
    febc:	1ad2      	subs	r2, r2, r3
    febe:	08d2      	lsrs	r2, r2, #3
    fec0:	0192      	lsls	r2, r2, #6
    fec2:	f042 0202 	orr.w	r2, r2, #2
}
    fec6:	b006      	add	sp, #24
    fec8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    fecc:	f009 bac6 	b.w	1945c <log_1>
		LL_ASSERT(0);
    fed0:	f641 135d 	movw	r3, #6493	; 0x195d
    fed4:	e6cb      	b.n	fc6e <hci_evt_encode+0x2e>
    fed6:	bf00      	nop
    fed8:	0002288e 	.word	0x0002288e
    fedc:	000218fc 	.word	0x000218fc
    fee0:	00020429 	.word	0x00020429
    fee4:	20000250 	.word	0x20000250
    fee8:	20000258 	.word	0x20000258
    feec:	0001f237 	.word	0x0001f237
    fef0:	000228c7 	.word	0x000228c7
    fef4:	20001d54 	.word	0x20001d54
    fef8:	0001ef2c 	.word	0x0001ef2c
    fefc:	0001ef7c 	.word	0x0001ef7c
    ff00:	000228ec 	.word	0x000228ec

0000ff04 <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    ff04:	7903      	ldrb	r3, [r0, #4]
    ff06:	2b03      	cmp	r3, #3
    ff08:	d006      	beq.n	ff18 <hci_get_class+0x14>

		switch (node_rx->hdr.type) {
    ff0a:	3b05      	subs	r3, #5
    ff0c:	b2db      	uxtb	r3, r3
    ff0e:	2b13      	cmp	r3, #19
    ff10:	d80a      	bhi.n	ff28 <hci_get_class+0x24>
    ff12:	4a06      	ldr	r2, [pc, #24]	; (ff2c <hci_get_class+0x28>)
    ff14:	5cd0      	ldrb	r0, [r2, r3]
    ff16:	4770      	bx	lr
		default:
			return HCI_CLASS_NONE;
		}

#if defined(CONFIG_BT_CONN)
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    ff18:	7f03      	ldrb	r3, [r0, #28]
    ff1a:	f003 0303 	and.w	r3, r3, #3
		return HCI_CLASS_EVT_LLCP;
	} else {
		return HCI_CLASS_ACL_DATA;
    ff1e:	2b03      	cmp	r3, #3
    ff20:	bf0c      	ite	eq
    ff22:	2004      	moveq	r0, #4
    ff24:	2005      	movne	r0, #5
    ff26:	4770      	bx	lr
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    ff28:	2000      	movs	r0, #0
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
    ff2a:	4770      	bx	lr
    ff2c:	00022905 	.word	0x00022905

0000ff30 <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
    ff30:	4b07      	ldr	r3, [pc, #28]	; (ff50 <hci_init+0x20>)
    ff32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ff36:	f641 71ff 	movw	r1, #8191	; 0x1fff
    ff3a:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    ff3e:	4b05      	ldr	r3, [pc, #20]	; (ff54 <hci_init+0x24>)
    ff40:	201f      	movs	r0, #31
    ff42:	2100      	movs	r1, #0
    ff44:	e9c3 0100 	strd	r0, r1, [r3]
	conn_count = 0U;
    ff48:	4b03      	ldr	r3, [pc, #12]	; (ff58 <hci_init+0x28>)
    ff4a:	2200      	movs	r2, #0
    ff4c:	601a      	str	r2, [r3, #0]
{
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
    ff4e:	4770      	bx	lr
    ff50:	20000250 	.word	0x20000250
    ff54:	20000258 	.word	0x20000258
    ff58:	20001d54 	.word	0x20001d54

0000ff5c <ll_rx_link_inc_quota>:
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    ff5c:	2801      	cmp	r0, #1
{
    ff5e:	b538      	push	{r3, r4, r5, lr}
    ff60:	4d0b      	ldr	r5, [pc, #44]	; (ff90 <ll_rx_link_inc_quota+0x34>)
    ff62:	4604      	mov	r4, r0
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    ff64:	d10f      	bne.n	ff86 <ll_rx_link_inc_quota+0x2a>
    ff66:	782b      	ldrb	r3, [r5, #0]
    ff68:	2b09      	cmp	r3, #9
    ff6a:	d90c      	bls.n	ff86 <ll_rx_link_inc_quota+0x2a>
    ff6c:	4a09      	ldr	r2, [pc, #36]	; (ff94 <ll_rx_link_inc_quota+0x38>)
    ff6e:	490a      	ldr	r1, [pc, #40]	; (ff98 <ll_rx_link_inc_quota+0x3c>)
    ff70:	480a      	ldr	r0, [pc, #40]	; (ff9c <ll_rx_link_inc_quota+0x40>)
    ff72:	f240 539c 	movw	r3, #1436	; 0x59c
    ff76:	f008 fe25 	bl	18bc4 <printk>
    ff7a:	4040      	eors	r0, r0
    ff7c:	f380 8811 	msr	BASEPRI, r0
    ff80:	f04f 0003 	mov.w	r0, #3
    ff84:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
    ff86:	7828      	ldrb	r0, [r5, #0]
    ff88:	4404      	add	r4, r0
    ff8a:	702c      	strb	r4, [r5, #0]
}
    ff8c:	bd38      	pop	{r3, r4, r5, pc}
    ff8e:	bf00      	nop
    ff90:	20001e90 	.word	0x20001e90
    ff94:	00022938 	.word	0x00022938
    ff98:	00022973 	.word	0x00022973
    ff9c:	00020429 	.word	0x00020429

0000ffa0 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
    ffa0:	b510      	push	{r4, lr}
    ffa2:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
    ffa4:	f00d fa65 	bl	1d472 <lll_reset>
	LL_ASSERT(!err);
    ffa8:	b160      	cbz	r0, ffc4 <perform_lll_reset+0x24>
    ffaa:	4a21      	ldr	r2, [pc, #132]	; (10030 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x31>)
    ffac:	4921      	ldr	r1, [pc, #132]	; (10034 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x35>)
    ffae:	4822      	ldr	r0, [pc, #136]	; (10038 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x39>)
    ffb0:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
    ffb4:	f008 fe06 	bl	18bc4 <printk>
    ffb8:	4040      	eors	r0, r0
    ffba:	f380 8811 	msr	BASEPRI, r0
    ffbe:	f04f 0003 	mov.w	r0, #3
    ffc2:	df02      	svc	2

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
    ffc4:	f00d fab2 	bl	1d52c <lll_adv_reset>
	LL_ASSERT(!err);
    ffc8:	b160      	cbz	r0, ffe4 <perform_lll_reset+0x44>
    ffca:	4a19      	ldr	r2, [pc, #100]	; (10030 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x31>)
    ffcc:	4919      	ldr	r1, [pc, #100]	; (10034 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x35>)
    ffce:	481a      	ldr	r0, [pc, #104]	; (10038 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x39>)
    ffd0:	f240 73c5 	movw	r3, #1989	; 0x7c5
    ffd4:	f008 fdf6 	bl	18bc4 <printk>
    ffd8:	4040      	eors	r0, r0
    ffda:	f380 8811 	msr	BASEPRI, r0
    ffde:	f04f 0003 	mov.w	r0, #3
    ffe2:	df02      	svc	2
#endif /* CONFIG_BT_BROADCASTER */

#if defined(CONFIG_BT_OBSERVER)
	/* Reset scan state */
	err = lll_scan_reset();
    ffe4:	f00d fbfa 	bl	1d7dc <lll_scan_reset>
	LL_ASSERT(!err);
    ffe8:	b160      	cbz	r0, 10004 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5>
    ffea:	4a11      	ldr	r2, [pc, #68]	; (10030 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x31>)
    ffec:	4911      	ldr	r1, [pc, #68]	; (10034 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x35>)
    ffee:	4812      	ldr	r0, [pc, #72]	; (10038 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x39>)
    fff0:	f240 73cb 	movw	r3, #1995	; 0x7cb
    fff4:	f008 fde6 	bl	18bc4 <printk>
    fff8:	4040      	eors	r0, r0
    fffa:	f380 8811 	msr	BASEPRI, r0
    fffe:	f04f 0003 	mov.w	r0, #3
   10002:	df02      	svc	2
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
   10004:	f00d fbf6 	bl	1d7f4 <lll_conn_reset>
	LL_ASSERT(!err);
   10008:	b160      	cbz	r0, 10024 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x25>
   1000a:	4a09      	ldr	r2, [pc, #36]	; (10030 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x31>)
   1000c:	4909      	ldr	r1, [pc, #36]	; (10034 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x35>)
   1000e:	480a      	ldr	r0, [pc, #40]	; (10038 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x39>)
   10010:	f240 73d1 	movw	r3, #2001	; 0x7d1
   10014:	f008 fdd6 	bl	18bc4 <printk>
   10018:	4040      	eors	r0, r0
   1001a:	f380 8811 	msr	BASEPRI, r0
   1001e:	f04f 0003 	mov.w	r0, #3
   10022:	df02      	svc	2
	z_impl_k_sem_give(sem);
   10024:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
   10026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1002a:	f007 bd15 	b.w	17a58 <z_impl_k_sem_give>
   1002e:	bf00      	nop
   10030:	00022938 	.word	0x00022938
   10034:	000229ad 	.word	0x000229ad
   10038:	00020429 	.word	0x00020429

0001003c <ull_done>:
}
#endif /* CONFIG_BT_CONN */

#if !defined(CONFIG_BT_CTLR_LOW_LAT_ULL)
static void ull_done(void *param)
{
   1003c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	memq_link_t *link;
	struct node_rx_hdr *done;

	do {
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   10040:	4f35      	ldr	r7, [pc, #212]	; (10118 <ull_done+0xdc>)
	if (!MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   10042:	4d36      	ldr	r5, [pc, #216]	; (1011c <ull_done+0xe0>)
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   10044:	e9d7 0100 	ldrd	r0, r1, [r7]
   10048:	aa01      	add	r2, sp, #4
   1004a:	f00c fbee 	bl	1c82a <memq_peek>
				 (void **)&done);

		if (link) {
   1004e:	4680      	mov	r8, r0
   10050:	2800      	cmp	r0, #0
   10052:	d05e      	beq.n	10112 <ull_done+0xd6>
			/* Process done event */
			(void)memq_dequeue(memq_ull_done.tail,
   10054:	6878      	ldr	r0, [r7, #4]
   10056:	2200      	movs	r2, #0
   10058:	4639      	mov	r1, r7
   1005a:	f00c fbee 	bl	1c83a <memq_dequeue>
					   &memq_ull_done.head, NULL);
			rx_demux_event_done(link, done);
   1005e:	9e01      	ldr	r6, [sp, #4]
	struct node_rx_event_done *done = (void *)rx;
	struct ull_hdr *ull_hdr;
	void *release;

	/* Decrement prepare reference if ULL will not resume */
	ull_hdr = done->param;
   10060:	69f4      	ldr	r4, [r6, #28]
	if (ull_hdr) {
   10062:	b194      	cbz	r4, 1008a <ull_done+0x4e>
	return hdr->ref;
   10064:	7823      	ldrb	r3, [r4, #0]
		LL_ASSERT(ull_ref_get(ull_hdr));
   10066:	b963      	cbnz	r3, 10082 <ull_done+0x46>
   10068:	4a2d      	ldr	r2, [pc, #180]	; (10120 <ull_done+0xe4>)
   1006a:	492e      	ldr	r1, [pc, #184]	; (10124 <ull_done+0xe8>)
   1006c:	482e      	ldr	r0, [pc, #184]	; (10128 <ull_done+0xec>)
   1006e:	f640 13f3 	movw	r3, #2547	; 0x9f3
   10072:	f008 fda7 	bl	18bc4 <printk>
   10076:	4040      	eors	r0, r0
   10078:	f380 8811 	msr	BASEPRI, r0
   1007c:	f04f 0003 	mov.w	r0, #3
   10080:	df02      	svc	2
	return hdr->ref--;
   10082:	7823      	ldrb	r3, [r4, #0]
   10084:	3b01      	subs	r3, #1
   10086:	b2db      	uxtb	r3, r3
   10088:	7023      	strb	r3, [r4, #0]
		ull_ref_dec(ull_hdr);
	}

	/* Process role dependent event done */
	switch (done->extra.type) {
   1008a:	f896 3020 	ldrb.w	r3, [r6, #32]
   1008e:	b123      	cbz	r3, 1009a <ull_done+0x5e>
   10090:	2b01      	cmp	r3, #1
   10092:	d127      	bne.n	100e4 <ull_done+0xa8>
#if defined(CONFIG_BT_CONN)
	case EVENT_DONE_EXTRA_TYPE_CONN:
		ull_conn_done(done);
   10094:	4630      	mov	r0, r6
   10096:	f002 fb8b 	bl	127b0 <ull_conn_done>
		LL_ASSERT(0);
		break;
	}

	/* release done */
	done->extra.type = 0U;
   1009a:	2300      	movs	r3, #0
   1009c:	f886 3020 	strb.w	r3, [r6, #32]
 */
static inline bool mfifo_enqueue_idx_get(uint8_t count, uint8_t first, uint8_t last,
					 uint8_t *idx)
{
	/* Non-destructive: Advance write-index modulo 'count' */
	last = last + 1;
   100a0:	78eb      	ldrb	r3, [r5, #3]
	if (last == count) {
   100a2:	7869      	ldrb	r1, [r5, #1]
	if (!MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   100a4:	78aa      	ldrb	r2, [r5, #2]
	last = last + 1;
   100a6:	3301      	adds	r3, #1
   100a8:	b2db      	uxtb	r3, r3
		last = 0U;
   100aa:	4299      	cmp	r1, r3
   100ac:	bf08      	it	eq
   100ae:	2300      	moveq	r3, #0
	 * We want to maintain the invariant of emptiness defined by
	 * first == last, but we just advanced a copy of the write-index before
	 * and may have wrapped. So if first == last the queue is full and we
	 * can not continue
	 */
	if (last == first) {
   100b0:	429a      	cmp	r2, r3
   100b2:	d125      	bne.n	10100 <ull_done+0xc4>
	release = done_release(link, done);
	LL_ASSERT(release == done);
   100b4:	4a1a      	ldr	r2, [pc, #104]	; (10120 <ull_done+0xe4>)
   100b6:	491d      	ldr	r1, [pc, #116]	; (1012c <ull_done+0xf0>)
   100b8:	481b      	ldr	r0, [pc, #108]	; (10128 <ull_done+0xec>)
   100ba:	f640 2339 	movw	r3, #2617	; 0xa39
   100be:	f008 fd81 	bl	18bc4 <printk>
   100c2:	4040      	eors	r0, r0
   100c4:	f380 8811 	msr	BASEPRI, r0
   100c8:	f04f 0003 	mov.w	r0, #3
   100cc:	df02      	svc	2
	/* LLL done synchronized */
	lll_done_sync();
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL_DONE */

	/* If disable initiated, signal the semaphore */
	if (ull_hdr && !ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
   100ce:	2c00      	cmp	r4, #0
   100d0:	d0b8      	beq.n	10044 <ull_done+0x8>
	return hdr->ref;
   100d2:	7823      	ldrb	r3, [r4, #0]
   100d4:	2b00      	cmp	r3, #0
   100d6:	d1b5      	bne.n	10044 <ull_done+0x8>
   100d8:	6963      	ldr	r3, [r4, #20]
   100da:	2b00      	cmp	r3, #0
   100dc:	d0b2      	beq.n	10044 <ull_done+0x8>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
   100de:	69a0      	ldr	r0, [r4, #24]
   100e0:	4798      	blx	r3
   100e2:	e7af      	b.n	10044 <ull_done+0x8>
		LL_ASSERT(0);
   100e4:	4a0e      	ldr	r2, [pc, #56]	; (10120 <ull_done+0xe4>)
   100e6:	4912      	ldr	r1, [pc, #72]	; (10130 <ull_done+0xf4>)
   100e8:	480f      	ldr	r0, [pc, #60]	; (10128 <ull_done+0xec>)
   100ea:	f640 2332 	movw	r3, #2610	; 0xa32
   100ee:	f008 fd69 	bl	18bc4 <printk>
   100f2:	4040      	eors	r0, r0
   100f4:	f380 8811 	msr	BASEPRI, r0
   100f8:	f04f 0003 	mov.w	r0, #3
   100fc:	df02      	svc	2
		break;
   100fe:	e7cc      	b.n	1009a <ull_done+0x5e>
	done->hdr.link = link;
   10100:	f8c6 8000 	str.w	r8, [r6]
 */
static inline void mfifo_by_idx_enqueue(uint8_t *fifo, uint8_t size, uint8_t idx,
					void *mem, uint8_t *last)
{
	/* API 2: fifo is array of void-ptrs */
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   10104:	78e9      	ldrb	r1, [r5, #3]
   10106:	782a      	ldrb	r2, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   10108:	fb01 5202 	mla	r2, r1, r2, r5
   1010c:	6056      	str	r6, [r2, #4]

	cpu_dmb(); /* Ensure data accesses are synchronized */
	*last = idx; /* Commit: Update write index */
   1010e:	70eb      	strb	r3, [r5, #3]
	LL_ASSERT(release == done);
   10110:	e7dd      	b.n	100ce <ull_done+0x92>
}
   10112:	b002      	add	sp, #8
   10114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10118:	20002244 	.word	0x20002244
   1011c:	20000654 	.word	0x20000654
   10120:	00022938 	.word	0x00022938
   10124:	000229b2 	.word	0x000229b2
   10128:	00020429 	.word	0x00020429
   1012c:	000229c7 	.word	0x000229c7
   10130:	000218fc 	.word	0x000218fc

00010134 <rx_alloc>:
{
   10134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > mem_link_rx.quota_pdu) {
   10138:	4e34      	ldr	r6, [pc, #208]	; (1020c <rx_alloc+0xd8>)
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1013a:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 10210 <rx_alloc+0xdc>
   1013e:	46b0      	mov	r8, r6
   10140:	f818 7b04 	ldrb.w	r7, [r8], #4
   10144:	4287      	cmp	r7, r0
   10146:	bf28      	it	cs
   10148:	4607      	movcs	r7, r0
   1014a:	2f00      	cmp	r7, #0
   1014c:	d05b      	beq.n	10206 <rx_alloc+0xd2>
	last = last + 1;
   1014e:	f899 4003 	ldrb.w	r4, [r9, #3]
	if (last == count) {
   10152:	f899 2001 	ldrb.w	r2, [r9, #1]
   10156:	f899 3002 	ldrb.w	r3, [r9, #2]
	last = last + 1;
   1015a:	3401      	adds	r4, #1
   1015c:	b2e4      	uxtb	r4, r4
		last = 0U;
   1015e:	42a2      	cmp	r2, r4
   10160:	bf08      	it	eq
   10162:	2400      	moveq	r4, #0
	if (last == first) {
   10164:	42a3      	cmp	r3, r4
   10166:	d148      	bne.n	101fa <rx_alloc+0xc6>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   10168:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 10214 <rx_alloc+0xe0>
		link = mem_acquire(&mem_link_rx.free);
   1016c:	4f2a      	ldr	r7, [pc, #168]	; (10218 <rx_alloc+0xe4>)
	while (mem_link_rx.quota_pdu &&
   1016e:	7833      	ldrb	r3, [r6, #0]
   10170:	2b00      	cmp	r3, #0
   10172:	d048      	beq.n	10206 <rx_alloc+0xd2>
	last = last + 1;
   10174:	f898 4003 	ldrb.w	r4, [r8, #3]
	if (last == count) {
   10178:	f898 2001 	ldrb.w	r2, [r8, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   1017c:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
   10180:	3401      	adds	r4, #1
   10182:	b2e4      	uxtb	r4, r4
		last = 0U;
   10184:	42a2      	cmp	r2, r4
   10186:	bf08      	it	eq
   10188:	2400      	moveq	r4, #0
	if (last == first) {
   1018a:	429c      	cmp	r4, r3
   1018c:	d03b      	beq.n	10206 <rx_alloc+0xd2>
		link = mem_acquire(&mem_link_rx.free);
   1018e:	4638      	mov	r0, r7
   10190:	f00c fae6 	bl	1c760 <mem_acquire>
		if (!link) {
   10194:	4605      	mov	r5, r0
   10196:	2800      	cmp	r0, #0
   10198:	d035      	beq.n	10206 <rx_alloc+0xd2>
		rx = mem_acquire(&mem_pdu_rx.free);
   1019a:	4820      	ldr	r0, [pc, #128]	; (1021c <rx_alloc+0xe8>)
   1019c:	f00c fae0 	bl	1c760 <mem_acquire>
		if (!rx) {
   101a0:	b1a0      	cbz	r0, 101cc <rx_alloc+0x98>
		link->mem = NULL;
   101a2:	2300      	movs	r3, #0
   101a4:	606b      	str	r3, [r5, #4]
		rx->link = link;
   101a6:	6005      	str	r5, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   101a8:	f898 2003 	ldrb.w	r2, [r8, #3]
   101ac:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   101b0:	fb02 8303 	mla	r3, r2, r3, r8
   101b4:	6058      	str	r0, [r3, #4]
		ll_rx_link_inc_quota(-1);
   101b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	*last = idx; /* Commit: Update write index */
   101ba:	f888 4003 	strb.w	r4, [r8, #3]
   101be:	f7ff fecd 	bl	ff5c <ll_rx_link_inc_quota>
   101c2:	e7d4      	b.n	1016e <rx_alloc+0x3a>
		rx = mem_acquire(&mem_pdu_rx.free);
   101c4:	4815      	ldr	r0, [pc, #84]	; (1021c <rx_alloc+0xe8>)
   101c6:	f00c facb 	bl	1c760 <mem_acquire>
		if (!rx) {
   101ca:	b928      	cbnz	r0, 101d8 <rx_alloc+0xa4>
			mem_release(link, &mem_link_rx.free);
   101cc:	4628      	mov	r0, r5
   101ce:	4912      	ldr	r1, [pc, #72]	; (10218 <rx_alloc+0xe4>)
}
   101d0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &mem_link_rx.free);
   101d4:	f00c badd 	b.w	1c792 <mem_release>
		rx->link = link;
   101d8:	6005      	str	r5, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   101da:	f899 2003 	ldrb.w	r2, [r9, #3]
   101de:	f899 3000 	ldrb.w	r3, [r9]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   101e2:	fb02 9303 	mla	r3, r2, r3, r9
   101e6:	6058      	str	r0, [r3, #4]
		ll_rx_link_inc_quota(-1);
   101e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		max--;
   101ec:	3f01      	subs	r7, #1
	*last = idx; /* Commit: Update write index */
   101ee:	f889 4003 	strb.w	r4, [r9, #3]
   101f2:	b2ff      	uxtb	r7, r7
		ll_rx_link_inc_quota(-1);
   101f4:	f7ff feb2 	bl	ff5c <ll_rx_link_inc_quota>
		max--;
   101f8:	e7a7      	b.n	1014a <rx_alloc+0x16>
		link = mem_acquire(&mem_link_rx.free);
   101fa:	4640      	mov	r0, r8
   101fc:	f00c fab0 	bl	1c760 <mem_acquire>
		if (!link) {
   10200:	4605      	mov	r5, r0
   10202:	2800      	cmp	r0, #0
   10204:	d1de      	bne.n	101c4 <rx_alloc+0x90>
}
   10206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1020a:	bf00      	nop
   1020c:	20001e90 	.word	0x20001e90
   10210:	20000678 	.word	0x20000678
   10214:	2000066c 	.word	0x2000066c
   10218:	20001e94 	.word	0x20001e94
   1021c:	20001f08 	.word	0x20001f08

00010220 <init_reset>:
{
   10220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   10222:	4b43      	ldr	r3, [pc, #268]	; (10330 <init_reset+0x110>)
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   10224:	4f43      	ldr	r7, [pc, #268]	; (10334 <init_reset+0x114>)
		link = mem_acquire(&mem_link_done.free);
   10226:	4e44      	ldr	r6, [pc, #272]	; (10338 <init_reset+0x118>)
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   10228:	2204      	movs	r2, #4
   1022a:	1898      	adds	r0, r3, r2
   1022c:	2134      	movs	r1, #52	; 0x34
   1022e:	f00c fa6f 	bl	1c710 <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX +
   10232:	4b41      	ldr	r3, [pc, #260]	; (10338 <init_reset+0x118>)
   10234:	2205      	movs	r2, #5
   10236:	2108      	movs	r1, #8
   10238:	1d18      	adds	r0, r3, #4
   1023a:	f00c fa69 	bl	1c710 <mem_init>
	last = last + 1;
   1023e:	78fc      	ldrb	r4, [r7, #3]
	if (last == count) {
   10240:	787a      	ldrb	r2, [r7, #1]
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   10242:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
   10244:	3401      	adds	r4, #1
   10246:	b2e4      	uxtb	r4, r4
		last = 0U;
   10248:	42a2      	cmp	r2, r4
   1024a:	bf08      	it	eq
   1024c:	2400      	moveq	r4, #0
	if (last == first) {
   1024e:	429c      	cmp	r4, r3
   10250:	d00d      	beq.n	1026e <init_reset+0x4e>
		link = mem_acquire(&mem_link_done.free);
   10252:	4630      	mov	r0, r6
   10254:	f00c fa84 	bl	1c760 <mem_acquire>
		if (!link) {
   10258:	4605      	mov	r5, r0
   1025a:	b140      	cbz	r0, 1026e <init_reset+0x4e>
		rx = mem_acquire(&mem_done.free);
   1025c:	4834      	ldr	r0, [pc, #208]	; (10330 <init_reset+0x110>)
   1025e:	f00c fa7f 	bl	1c760 <mem_acquire>
		if (!rx) {
   10262:	2800      	cmp	r0, #0
   10264:	d15c      	bne.n	10320 <init_reset+0x100>
			mem_release(link, &mem_link_done.free);
   10266:	4934      	ldr	r1, [pc, #208]	; (10338 <init_reset+0x118>)
   10268:	4628      	mov	r0, r5
   1026a:	f00c fa92 	bl	1c792 <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   1026e:	4b33      	ldr	r3, [pc, #204]	; (1033c <init_reset+0x11c>)
   10270:	220c      	movs	r2, #12
   10272:	1d18      	adds	r0, r3, #4
   10274:	2144      	movs	r1, #68	; 0x44
   10276:	f00c fa4b 	bl	1c710 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   1027a:	4b31      	ldr	r3, [pc, #196]	; (10340 <init_reset+0x120>)
   1027c:	220e      	movs	r2, #14
   1027e:	1d18      	adds	r0, r3, #4
   10280:	2108      	movs	r1, #8
   10282:	f00c fa45 	bl	1c710 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   10286:	482e      	ldr	r0, [pc, #184]	; (10340 <init_reset+0x120>)
   10288:	f00c fa6a 	bl	1c760 <mem_acquire>
	LL_ASSERT(link);
   1028c:	4604      	mov	r4, r0
   1028e:	b960      	cbnz	r0, 102aa <init_reset+0x8a>
   10290:	4a2c      	ldr	r2, [pc, #176]	; (10344 <init_reset+0x124>)
   10292:	492d      	ldr	r1, [pc, #180]	; (10348 <init_reset+0x128>)
   10294:	482d      	ldr	r0, [pc, #180]	; (1034c <init_reset+0x12c>)
   10296:	f240 739e 	movw	r3, #1950	; 0x79e
   1029a:	f008 fc93 	bl	18bc4 <printk>
   1029e:	4040      	eors	r0, r0
   102a0:	f380 8811 	msr	BASEPRI, r0
   102a4:	f04f 0003 	mov.w	r0, #3
   102a8:	df02      	svc	2
	MEMQ_INIT(ull_rx, link);
   102aa:	4a29      	ldr	r2, [pc, #164]	; (10350 <init_reset+0x130>)
   102ac:	4620      	mov	r0, r4
   102ae:	1f11      	subs	r1, r2, #4
   102b0:	f00c faa6 	bl	1c800 <memq_init>
	link = mem_acquire(&mem_link_done.free);
   102b4:	4820      	ldr	r0, [pc, #128]	; (10338 <init_reset+0x118>)
   102b6:	f00c fa53 	bl	1c760 <mem_acquire>
	LL_ASSERT(link);
   102ba:	4604      	mov	r4, r0
   102bc:	b960      	cbnz	r0, 102d8 <init_reset+0xb8>
   102be:	4a21      	ldr	r2, [pc, #132]	; (10344 <init_reset+0x124>)
   102c0:	4921      	ldr	r1, [pc, #132]	; (10348 <init_reset+0x128>)
   102c2:	4822      	ldr	r0, [pc, #136]	; (1034c <init_reset+0x12c>)
   102c4:	f240 73a6 	movw	r3, #1958	; 0x7a6
   102c8:	f008 fc7c 	bl	18bc4 <printk>
   102cc:	4040      	eors	r0, r0
   102ce:	f380 8811 	msr	BASEPRI, r0
   102d2:	f04f 0003 	mov.w	r0, #3
   102d6:	df02      	svc	2
	MEMQ_INIT(ull_done, link);
   102d8:	4a1e      	ldr	r2, [pc, #120]	; (10354 <init_reset+0x134>)
   102da:	4620      	mov	r0, r4
   102dc:	1f11      	subs	r1, r2, #4
   102de:	f00c fa8f 	bl	1c800 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   102e2:	4817      	ldr	r0, [pc, #92]	; (10340 <init_reset+0x120>)
   102e4:	f00c fa3c 	bl	1c760 <mem_acquire>
	LL_ASSERT(link);
   102e8:	4604      	mov	r4, r0
   102ea:	b960      	cbnz	r0, 10306 <init_reset+0xe6>
   102ec:	4a15      	ldr	r2, [pc, #84]	; (10344 <init_reset+0x124>)
   102ee:	4916      	ldr	r1, [pc, #88]	; (10348 <init_reset+0x128>)
   102f0:	4816      	ldr	r0, [pc, #88]	; (1034c <init_reset+0x12c>)
   102f2:	f240 73ae 	movw	r3, #1966	; 0x7ae
   102f6:	f008 fc65 	bl	18bc4 <printk>
   102fa:	4040      	eors	r0, r0
   102fc:	f380 8811 	msr	BASEPRI, r0
   10300:	f04f 0003 	mov.w	r0, #3
   10304:	df02      	svc	2
	MEMQ_INIT(ll_rx, link);
   10306:	4a14      	ldr	r2, [pc, #80]	; (10358 <init_reset+0x138>)
   10308:	4620      	mov	r0, r4
   1030a:	1f11      	subs	r1, r2, #4
   1030c:	f00c fa78 	bl	1c800 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   10310:	4b12      	ldr	r3, [pc, #72]	; (1035c <init_reset+0x13c>)
   10312:	220a      	movs	r2, #10
	rx_alloc(UINT8_MAX);
   10314:	20ff      	movs	r0, #255	; 0xff
	mem_link_rx.quota_pdu = RX_CNT;
   10316:	701a      	strb	r2, [r3, #0]
	rx_alloc(UINT8_MAX);
   10318:	f7ff ff0c 	bl	10134 <rx_alloc>
}
   1031c:	2000      	movs	r0, #0
   1031e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rx->link = link;
   10320:	6005      	str	r5, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   10322:	78fa      	ldrb	r2, [r7, #3]
   10324:	783b      	ldrb	r3, [r7, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   10326:	fb02 7303 	mla	r3, r2, r3, r7
   1032a:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
   1032c:	70fc      	strb	r4, [r7, #3]
}
   1032e:	e786      	b.n	1023e <init_reset+0x1e>
   10330:	20001d90 	.word	0x20001d90
   10334:	20000654 	.word	0x20000654
   10338:	20001e64 	.word	0x20001e64
   1033c:	20001f08 	.word	0x20001f08
   10340:	20001e94 	.word	0x20001e94
   10344:	00022938 	.word	0x00022938
   10348:	00022242 	.word	0x00022242
   1034c:	00020429 	.word	0x00020429
   10350:	20002250 	.word	0x20002250
   10354:	20002248 	.word	0x20002248
   10358:	20002240 	.word	0x20002240
   1035c:	20001e90 	.word	0x20001e90

00010360 <tx_cmplt_get>:
{
   10360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10364:	460c      	mov	r4, r1
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   10366:	4f28      	ldr	r7, [pc, #160]	; (10408 <tx_cmplt_get+0xa8>)
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
   10368:	7823      	ldrb	r3, [r4, #0]
   1036a:	7879      	ldrb	r1, [r7, #1]
   1036c:	428b      	cmp	r3, r1
   1036e:	bf28      	it	cs
   10370:	78bb      	ldrbcs	r3, [r7, #2]
{
   10372:	4680      	mov	r8, r0
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   10374:	7838      	ldrb	r0, [r7, #0]
		*idx = first;
   10376:	bf28      	it	cs
   10378:	7023      	strbcs	r3, [r4, #0]
	}

	if (*idx == last) {
   1037a:	7823      	ldrb	r3, [r4, #0]
   1037c:	429a      	cmp	r2, r3
{
   1037e:	4691      	mov	r9, r2
   10380:	d103      	bne.n	1038a <tx_cmplt_get+0x2a>
		return 0;
   10382:	2500      	movs	r5, #0
}
   10384:	4628      	mov	r0, r5
   10386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return NULL;
	}

	i = *idx + 1;
   1038a:	1c5a      	adds	r2, r3, #1
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
   1038c:	4e1f      	ldr	r6, [pc, #124]	; (1040c <tx_cmplt_get+0xac>)
	i = *idx + 1;
   1038e:	b2d2      	uxtb	r2, r2
		i = 0U;
   10390:	4291      	cmp	r1, r2
   10392:	bf08      	it	eq
   10394:	2200      	moveq	r2, #0
	p = (void *)(fifo + (*idx) * size);
   10396:	fb13 f300 	smulbb	r3, r3, r0

	*idx = i;
   1039a:	7022      	strb	r2, [r4, #0]
	if (!tx) {
   1039c:	18f2      	adds	r2, r6, r3
   1039e:	d0f0      	beq.n	10382 <tx_cmplt_get+0x22>
	*handle = tx->handle;
   103a0:	5af3      	ldrh	r3, [r6, r3]
   103a2:	f8a8 3000 	strh.w	r3, [r8]
	cmplt = 0U;
   103a6:	2500      	movs	r5, #0
		node_tx = tx->node;
   103a8:	6850      	ldr	r0, [r2, #4]
		if (!node_tx || (node_tx == (void *)1) ||
   103aa:	2801      	cmp	r0, #1
		    (((uint32_t)node_tx & ~3) &&
   103ac:	f020 0103 	bic.w	r1, r0, #3
		if (!node_tx || (node_tx == (void *)1) ||
   103b0:	d906      	bls.n	103c0 <tx_cmplt_get+0x60>
   103b2:	b331      	cbz	r1, 10402 <tx_cmplt_get+0xa2>
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
   103b4:	7903      	ldrb	r3, [r0, #4]
   103b6:	f003 0303 	and.w	r3, r3, #3
		    (((uint32_t)node_tx & ~3) &&
   103ba:	3b01      	subs	r3, #1
   103bc:	2b01      	cmp	r3, #1
   103be:	d820      	bhi.n	10402 <tx_cmplt_get+0xa2>
			cmplt++;
   103c0:	3501      	adds	r5, #1
   103c2:	b2ed      	uxtb	r5, r5
			tx->node = (void *)1;
   103c4:	2301      	movs	r3, #1
   103c6:	6053      	str	r3, [r2, #4]
		if (((uint32_t)node_tx & ~3)) {
   103c8:	b109      	cbz	r1, 103ce <tx_cmplt_get+0x6e>
			ll_tx_mem_release(node_tx);
   103ca:	f001 fc3b 	bl	11c44 <ll_tx_mem_release>
	if (*idx >= count) {
   103ce:	7823      	ldrb	r3, [r4, #0]
		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   103d0:	787a      	ldrb	r2, [r7, #1]
   103d2:	7838      	ldrb	r0, [r7, #0]
   103d4:	4293      	cmp	r3, r2
   103d6:	bf24      	itt	cs
   103d8:	78bb      	ldrbcs	r3, [r7, #2]
		*idx = first;
   103da:	7023      	strbcs	r3, [r4, #0]
	if (*idx == last) {
   103dc:	7823      	ldrb	r3, [r4, #0]
   103de:	4599      	cmp	r9, r3
   103e0:	d0d0      	beq.n	10384 <tx_cmplt_get+0x24>
	i = *idx + 1;
   103e2:	1c59      	adds	r1, r3, #1
   103e4:	b2c9      	uxtb	r1, r1
	p = (void *)(fifo + (*idx) * size);
   103e6:	fb13 f300 	smulbb	r3, r3, r0
		i = 0U;
   103ea:	428a      	cmp	r2, r1
   103ec:	bf08      	it	eq
   103ee:	2100      	moveq	r1, #0
	} while (tx && tx->handle == *handle);
   103f0:	18f2      	adds	r2, r6, r3
	*idx = i;
   103f2:	7021      	strb	r1, [r4, #0]
   103f4:	d0c6      	beq.n	10384 <tx_cmplt_get+0x24>
   103f6:	5af1      	ldrh	r1, [r6, r3]
   103f8:	f8b8 3000 	ldrh.w	r3, [r8]
   103fc:	4299      	cmp	r1, r3
   103fe:	d0d3      	beq.n	103a8 <tx_cmplt_get+0x48>
   10400:	e7c0      	b.n	10384 <tx_cmplt_get+0x24>
			tx->node = (void *)2;
   10402:	2302      	movs	r3, #2
   10404:	e7df      	b.n	103c6 <tx_cmplt_get+0x66>
   10406:	bf00      	nop
   10408:	200007a8 	.word	0x200007a8
   1040c:	200007ac 	.word	0x200007ac

00010410 <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
   10410:	6008      	str	r0, [r1, #0]
   10412:	4801      	ldr	r0, [pc, #4]	; (10418 <ull_ticker_status_give+0x8>)
   10414:	f007 bb20 	b.w	17a58 <z_impl_k_sem_give>
   10418:	20002258 	.word	0x20002258

0001041c <ll_init>:
{
   1041c:	b510      	push	{r4, lr}
	sem_recv = sem_rx;
   1041e:	4b2c      	ldr	r3, [pc, #176]	; (104d0 <ll_init+0xb4>)
{
   10420:	b086      	sub	sp, #24
	sem_recv = sem_rx;
   10422:	6018      	str	r0, [r3, #0]
	cntr_init();
   10424:	f004 fc26 	bl	14c74 <cntr_init>
	mayfly_init();
   10428:	f7fd ffb2 	bl	e390 <mayfly_init>
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   1042c:	4a29      	ldr	r2, [pc, #164]	; (104d4 <ll_init+0xb8>)
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   1042e:	2105      	movs	r1, #5
   10430:	7211      	strb	r1, [r2, #8]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   10432:	2102      	movs	r1, #2
   10434:	7411      	strb	r1, [r2, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_THREAD_OPS;
   10436:	7611      	strb	r1, [r2, #24]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   10438:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   1043a:	4927      	ldr	r1, [pc, #156]	; (104d8 <ll_init+0xbc>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   1043c:	7013      	strb	r3, [r2, #0]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   1043e:	9105      	str	r1, [sp, #20]
   10440:	4926      	ldr	r1, [pc, #152]	; (104dc <ll_init+0xc0>)
   10442:	9104      	str	r1, [sp, #16]
   10444:	4926      	ldr	r1, [pc, #152]	; (104e0 <ll_init+0xc4>)
   10446:	9103      	str	r1, [sp, #12]
   10448:	4926      	ldr	r1, [pc, #152]	; (104e4 <ll_init+0xc8>)
   1044a:	9102      	str	r1, [sp, #8]
   1044c:	210d      	movs	r1, #13
   1044e:	e9cd 2100 	strd	r2, r1, [sp]
   10452:	2000      	movs	r0, #0
   10454:	4a24      	ldr	r2, [pc, #144]	; (104e8 <ll_init+0xcc>)
   10456:	2108      	movs	r1, #8
   10458:	f7fe fcc4 	bl	ede4 <ticker_init>
	LL_ASSERT(!err);
   1045c:	b160      	cbz	r0, 10478 <ll_init+0x5c>
   1045e:	4a23      	ldr	r2, [pc, #140]	; (104ec <ll_init+0xd0>)
   10460:	4923      	ldr	r1, [pc, #140]	; (104f0 <ll_init+0xd4>)
   10462:	4824      	ldr	r0, [pc, #144]	; (104f4 <ll_init+0xd8>)
   10464:	f44f 7300 	mov.w	r3, #512	; 0x200
   10468:	f008 fbac 	bl	18bc4 <printk>
   1046c:	4040      	eors	r0, r0
   1046e:	f380 8811 	msr	BASEPRI, r0
   10472:	f04f 0003 	mov.w	r0, #3
   10476:	df02      	svc	2
	return z_impl_k_sem_init(sem, initial_count, limit);
   10478:	2201      	movs	r2, #1
   1047a:	2100      	movs	r1, #0
   1047c:	481e      	ldr	r0, [pc, #120]	; (104f8 <ll_init+0xdc>)
   1047e:	f00e f837 	bl	1e4f0 <z_impl_k_sem_init>
	err = lll_init();
   10482:	f002 ff45 	bl	13310 <lll_init>
	if (err) {
   10486:	4604      	mov	r4, r0
   10488:	b9f0      	cbnz	r0, 104c8 <ll_init+0xac>
	err = init_reset();
   1048a:	f7ff fec9 	bl	10220 <init_reset>
	if (err) {
   1048e:	4604      	mov	r4, r0
   10490:	b9d0      	cbnz	r0, 104c8 <ll_init+0xac>
	err = lll_adv_init();
   10492:	f003 fa8d 	bl	139b0 <lll_adv_init>
	if (err) {
   10496:	4604      	mov	r4, r0
   10498:	b9b0      	cbnz	r0, 104c8 <ll_init+0xac>
	err = ull_adv_init();
   1049a:	f00c fd4c 	bl	1cf36 <ull_adv_init>
	if (err) {
   1049e:	4604      	mov	r4, r0
   104a0:	b990      	cbnz	r0, 104c8 <ll_init+0xac>
	err = lll_scan_init();
   104a2:	f00d f999 	bl	1d7d8 <lll_scan_init>
	if (err) {
   104a6:	4604      	mov	r4, r0
   104a8:	b970      	cbnz	r0, 104c8 <ll_init+0xac>
	err = ull_scan_init();
   104aa:	f00c fe05 	bl	1d0b8 <ull_scan_init>
	if (err) {
   104ae:	4604      	mov	r4, r0
   104b0:	b950      	cbnz	r0, 104c8 <ll_init+0xac>
	err = lll_conn_init();
   104b2:	f00d f995 	bl	1d7e0 <lll_conn_init>
	if (err) {
   104b6:	4604      	mov	r4, r0
   104b8:	b930      	cbnz	r0, 104c8 <ll_init+0xac>
	err = ull_conn_init();
   104ba:	f00c ff7e 	bl	1d3ba <ull_conn_init>
	if (err) {
   104be:	4604      	mov	r4, r0
   104c0:	b910      	cbnz	r0, 104c8 <ll_init+0xac>
		ull_filter_reset(true);
   104c2:	2001      	movs	r0, #1
   104c4:	f002 fd08 	bl	12ed8 <ull_filter_reset>
}
   104c8:	4620      	mov	r0, r4
   104ca:	b006      	add	sp, #24
   104cc:	bd10      	pop	{r4, pc}
   104ce:	bf00      	nop
   104d0:	20002254 	.word	0x20002254
   104d4:	20002694 	.word	0x20002694
   104d8:	0001d9b9 	.word	0x0001d9b9
   104dc:	0001556d 	.word	0x0001556d
   104e0:	00015515 	.word	0x00015515
   104e4:	200023f0 	.word	0x200023f0
   104e8:	20002270 	.word	0x20002270
   104ec:	00022938 	.word	0x00022938
   104f0:	000229ad 	.word	0x000229ad
   104f4:	00020429 	.word	0x00020429
   104f8:	20002258 	.word	0x20002258

000104fc <ll_reset>:
{
   104fc:	b510      	push	{r4, lr}
   104fe:	b086      	sub	sp, #24
	err = ull_adv_reset();
   10500:	f00c fd1b 	bl	1cf3a <ull_adv_reset>
	LL_ASSERT(!err);
   10504:	b160      	cbz	r0, 10520 <ll_reset+0x24>
   10506:	4a3f      	ldr	r2, [pc, #252]	; (10604 <ll_reset+0x108>)
   10508:	493f      	ldr	r1, [pc, #252]	; (10608 <ll_reset+0x10c>)
   1050a:	4840      	ldr	r0, [pc, #256]	; (1060c <ll_reset+0x110>)
   1050c:	f44f 7328 	mov.w	r3, #672	; 0x2a0
   10510:	f008 fb58 	bl	18bc4 <printk>
   10514:	4040      	eors	r0, r0
   10516:	f380 8811 	msr	BASEPRI, r0
   1051a:	f04f 0003 	mov.w	r0, #3
   1051e:	df02      	svc	2
	err = ull_scan_reset();
   10520:	f00c fde0 	bl	1d0e4 <ull_scan_reset>
	LL_ASSERT(!err);
   10524:	b160      	cbz	r0, 10540 <ll_reset+0x44>
   10526:	4a37      	ldr	r2, [pc, #220]	; (10604 <ll_reset+0x108>)
   10528:	4937      	ldr	r1, [pc, #220]	; (10608 <ll_reset+0x10c>)
   1052a:	4838      	ldr	r0, [pc, #224]	; (1060c <ll_reset+0x110>)
   1052c:	f240 23a6 	movw	r3, #678	; 0x2a6
   10530:	f008 fb48 	bl	18bc4 <printk>
   10534:	4040      	eors	r0, r0
   10536:	f380 8811 	msr	BASEPRI, r0
   1053a:	f04f 0003 	mov.w	r0, #3
   1053e:	df02      	svc	2
	err = ull_conn_reset();
   10540:	f001 fbf0 	bl	11d24 <ull_conn_reset>
	LL_ASSERT(!err);
   10544:	b160      	cbz	r0, 10560 <ll_reset+0x64>
   10546:	4a2f      	ldr	r2, [pc, #188]	; (10604 <ll_reset+0x108>)
   10548:	492f      	ldr	r1, [pc, #188]	; (10608 <ll_reset+0x10c>)
   1054a:	4830      	ldr	r0, [pc, #192]	; (1060c <ll_reset+0x110>)
   1054c:	f240 23d1 	movw	r3, #721	; 0x2d1
   10550:	f008 fb38 	bl	18bc4 <printk>
   10554:	4040      	eors	r0, r0
   10556:	f380 8811 	msr	BASEPRI, r0
   1055a:	f04f 0003 	mov.w	r0, #3
   1055e:	df02      	svc	2
	MFIFO_INIT(tx_ack);
   10560:	4b2b      	ldr	r3, [pc, #172]	; (10610 <ll_reset+0x114>)
   10562:	2400      	movs	r4, #0
   10564:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
   10566:	4620      	mov	r0, r4
   10568:	f002 fcb6 	bl	12ed8 <ull_filter_reset>
	MFIFO_INIT(prep);
   1056c:	4b29      	ldr	r3, [pc, #164]	; (10614 <ll_reset+0x118>)
   1056e:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(done);
   10570:	4b29      	ldr	r3, [pc, #164]	; (10618 <ll_reset+0x11c>)
   10572:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(pdu_rx_free);
   10574:	4b29      	ldr	r3, [pc, #164]	; (1061c <ll_reset+0x120>)
   10576:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(ll_pdu_rx_free);
   10578:	4b29      	ldr	r3, [pc, #164]	; (10620 <ll_reset+0x124>)
   1057a:	805c      	strh	r4, [r3, #2]
   1057c:	2201      	movs	r2, #1
   1057e:	4621      	mov	r1, r4
   10580:	4668      	mov	r0, sp
   10582:	f00d ffb5 	bl	1e4f0 <z_impl_k_sem_init>
		mfy.param = &sem;
   10586:	4b27      	ldr	r3, [pc, #156]	; (10624 <ll_reset+0x128>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   10588:	4622      	mov	r2, r4
   1058a:	4621      	mov	r1, r4
   1058c:	2003      	movs	r0, #3
		mfy.param = &sem;
   1058e:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   10592:	f7fd ff55 	bl	e440 <mayfly_enqueue>
		LL_ASSERT(!retval);
   10596:	b160      	cbz	r0, 105b2 <ll_reset+0xb6>
   10598:	4a1a      	ldr	r2, [pc, #104]	; (10604 <ll_reset+0x108>)
   1059a:	4923      	ldr	r1, [pc, #140]	; (10628 <ll_reset+0x12c>)
   1059c:	481b      	ldr	r0, [pc, #108]	; (1060c <ll_reset+0x110>)
   1059e:	f240 3303 	movw	r3, #771	; 0x303
   105a2:	f008 fb0f 	bl	18bc4 <printk>
   105a6:	4040      	eors	r0, r0
   105a8:	f380 8811 	msr	BASEPRI, r0
   105ac:	f04f 0003 	mov.w	r0, #3
   105b0:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   105b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   105b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   105ba:	4668      	mov	r0, sp
   105bc:	f007 fa72 	bl	17aa4 <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
   105c0:	f000 ffc8 	bl	11554 <ull_adv_reset_finalize>
	LL_ASSERT(!err);
   105c4:	b160      	cbz	r0, 105e0 <ll_reset+0xe4>
   105c6:	4a0f      	ldr	r2, [pc, #60]	; (10604 <ll_reset+0x108>)
   105c8:	490f      	ldr	r1, [pc, #60]	; (10608 <ll_reset+0x10c>)
   105ca:	4810      	ldr	r0, [pc, #64]	; (1060c <ll_reset+0x110>)
   105cc:	f44f 7344 	mov.w	r3, #784	; 0x310
   105d0:	f008 faf8 	bl	18bc4 <printk>
   105d4:	4040      	eors	r0, r0
   105d6:	f380 8811 	msr	BASEPRI, r0
   105da:	f04f 0003 	mov.w	r0, #3
   105de:	df02      	svc	2
	err = init_reset();
   105e0:	f7ff fe1e 	bl	10220 <init_reset>
	LL_ASSERT(!err);
   105e4:	b160      	cbz	r0, 10600 <ll_reset+0x104>
   105e6:	4a07      	ldr	r2, [pc, #28]	; (10604 <ll_reset+0x108>)
   105e8:	4907      	ldr	r1, [pc, #28]	; (10608 <ll_reset+0x10c>)
   105ea:	4808      	ldr	r0, [pc, #32]	; (1060c <ll_reset+0x110>)
   105ec:	f240 3315 	movw	r3, #789	; 0x315
   105f0:	f008 fae8 	bl	18bc4 <printk>
   105f4:	4040      	eors	r0, r0
   105f6:	f380 8811 	msr	BASEPRI, r0
   105fa:	f04f 0003 	mov.w	r0, #3
   105fe:	df02      	svc	2
}
   10600:	b006      	add	sp, #24
   10602:	bd10      	pop	{r4, pc}
   10604:	00022938 	.word	0x00022938
   10608:	000229ad 	.word	0x000229ad
   1060c:	00020429 	.word	0x00020429
   10610:	200007a8 	.word	0x200007a8
   10614:	200006a4 	.word	0x200006a4
   10618:	20000654 	.word	0x20000654
   1061c:	20000678 	.word	0x20000678
   10620:	2000066c 	.word	0x2000066c
   10624:	200007e4 	.word	0x200007e4
   10628:	000229d7 	.word	0x000229d7

0001062c <ll_rx_get>:
{
   1062c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   10630:	4f26      	ldr	r7, [pc, #152]	; (106cc <ll_rx_get+0xa0>)
   10632:	f8df 809c 	ldr.w	r8, [pc, #156]	; 106d0 <ll_rx_get+0xa4>
{
   10636:	4605      	mov	r5, r0
   10638:	460c      	mov	r4, r1
	*node_rx = NULL;
   1063a:	2300      	movs	r3, #0
   1063c:	602b      	str	r3, [r5, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   1063e:	e9d7 0100 	ldrd	r0, r1, [r7]
   10642:	aa01      	add	r2, sp, #4
   10644:	f00c f8f1 	bl	1c82a <memq_peek>
	if (link) {
   10648:	4606      	mov	r6, r0
   1064a:	2800      	cmp	r0, #0
   1064c:	d036      	beq.n	106bc <ll_rx_get+0x90>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   1064e:	9b01      	ldr	r3, [sp, #4]
   10650:	4920      	ldr	r1, [pc, #128]	; (106d4 <ll_rx_get+0xa8>)
   10652:	781a      	ldrb	r2, [r3, #0]
   10654:	4620      	mov	r0, r4
   10656:	f7ff fe83 	bl	10360 <tx_cmplt_get>
		if (!cmplt) {
   1065a:	bb60      	cbnz	r0, 106b6 <ll_rx_get+0x8a>
			f = mfifo_tx_ack.f;
   1065c:	f898 3002 	ldrb.w	r3, [r8, #2]
   10660:	f88d 3001 	strb.w	r3, [sp, #1]
				cmplt_curr = tx_cmplt_get(&h, &f,
   10664:	f898 2003 	ldrb.w	r2, [r8, #3]
   10668:	4681      	mov	r9, r0
   1066a:	f10d 0101 	add.w	r1, sp, #1
   1066e:	f10d 0002 	add.w	r0, sp, #2
   10672:	f7ff fe75 	bl	10360 <tx_cmplt_get>
			} while ((cmplt_prev != 0U) ||
   10676:	ea49 0200 	orr.w	r2, r9, r0
   1067a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   1067e:	d1f1      	bne.n	10664 <ll_rx_get+0x38>
			} else if (rx->type == NODE_RX_TYPE_RELEASE) {
   10680:	9b01      	ldr	r3, [sp, #4]
   10682:	f893 9004 	ldrb.w	r9, [r3, #4]
   10686:	f1b9 0f01 	cmp.w	r9, #1
   1068a:	d112      	bne.n	106b2 <ll_rx_get+0x86>
				(void)memq_dequeue(memq_ll_rx.tail,
   1068c:	4639      	mov	r1, r7
   1068e:	6878      	ldr	r0, [r7, #4]
   10690:	f00c f8d3 	bl	1c83a <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
   10694:	4910      	ldr	r1, [pc, #64]	; (106d8 <ll_rx_get+0xac>)
   10696:	4630      	mov	r0, r6
   10698:	f00c f87b 	bl	1c792 <mem_release>
				ll_rx_link_inc_quota(1);
   1069c:	4648      	mov	r0, r9
   1069e:	f7ff fc5d 	bl	ff5c <ll_rx_link_inc_quota>
				mem_release(rx, &mem_pdu_rx.free);
   106a2:	9801      	ldr	r0, [sp, #4]
   106a4:	490d      	ldr	r1, [pc, #52]	; (106dc <ll_rx_get+0xb0>)
   106a6:	f00c f874 	bl	1c792 <mem_release>
				rx_alloc(1);
   106aa:	4648      	mov	r0, r9
   106ac:	f7ff fd42 	bl	10134 <rx_alloc>
				goto ll_rx_get_again;
   106b0:	e7c3      	b.n	1063a <ll_rx_get+0xe>
			*node_rx = rx;
   106b2:	602b      	str	r3, [r5, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   106b4:	4610      	mov	r0, r2
}
   106b6:	b003      	add	sp, #12
   106b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
   106bc:	f898 2003 	ldrb.w	r2, [r8, #3]
   106c0:	4904      	ldr	r1, [pc, #16]	; (106d4 <ll_rx_get+0xa8>)
   106c2:	4620      	mov	r0, r4
   106c4:	f7ff fe4c 	bl	10360 <tx_cmplt_get>
   106c8:	e7f5      	b.n	106b6 <ll_rx_get+0x8a>
   106ca:	bf00      	nop
   106cc:	2000223c 	.word	0x2000223c
   106d0:	200007a8 	.word	0x200007a8
   106d4:	200007aa 	.word	0x200007aa
   106d8:	20001e94 	.word	0x20001e94
   106dc:	20001f08 	.word	0x20001f08

000106e0 <ll_rx_dequeue>:
{
   106e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   106e2:	4948      	ldr	r1, [pc, #288]	; (10804 <ll_rx_dequeue+0x124>)
	struct node_rx_hdr *rx = NULL;
   106e4:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   106e6:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
   106e8:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   106ea:	aa01      	add	r2, sp, #4
   106ec:	f00c f8a5 	bl	1c83a <memq_dequeue>
	LL_ASSERT(link);
   106f0:	4604      	mov	r4, r0
   106f2:	b960      	cbnz	r0, 1070e <ll_rx_dequeue+0x2e>
   106f4:	4a44      	ldr	r2, [pc, #272]	; (10808 <ll_rx_dequeue+0x128>)
   106f6:	4945      	ldr	r1, [pc, #276]	; (1080c <ll_rx_dequeue+0x12c>)
   106f8:	4845      	ldr	r0, [pc, #276]	; (10810 <ll_rx_dequeue+0x130>)
   106fa:	f240 338f 	movw	r3, #911	; 0x38f
   106fe:	f008 fa61 	bl	18bc4 <printk>
   10702:	4040      	eors	r0, r0
   10704:	f380 8811 	msr	BASEPRI, r0
   10708:	f04f 0003 	mov.w	r0, #3
   1070c:	df02      	svc	2
	mem_release(link, &mem_link_rx.free);
   1070e:	4941      	ldr	r1, [pc, #260]	; (10814 <ll_rx_dequeue+0x134>)
   10710:	4620      	mov	r0, r4
   10712:	f00c f83e 	bl	1c792 <mem_release>
	switch (rx->type) {
   10716:	9b01      	ldr	r3, [sp, #4]
   10718:	7919      	ldrb	r1, [r3, #4]
   1071a:	291b      	cmp	r1, #27
   1071c:	d86f      	bhi.n	107fe <ll_rx_dequeue+0x11e>
   1071e:	483e      	ldr	r0, [pc, #248]	; (10818 <ll_rx_dequeue+0x138>)
   10720:	2201      	movs	r2, #1
   10722:	408a      	lsls	r2, r1
   10724:	4202      	tst	r2, r0
   10726:	d15a      	bne.n	107de <ll_rx_dequeue+0xfe>
   10728:	0252      	lsls	r2, r2, #9
   1072a:	d568      	bpl.n	107fe <ll_rx_dequeue+0x11e>
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   1072c:	7f1a      	ldrb	r2, [r3, #28]
   1072e:	2a3c      	cmp	r2, #60	; 0x3c
   10730:	d002      	beq.n	10738 <ll_rx_dequeue+0x58>
   10732:	7f59      	ldrb	r1, [r3, #29]
   10734:	2900      	cmp	r1, #0
   10736:	d04d      	beq.n	107d4 <ll_rx_dequeue+0xf4>
			lll = ftr->param;
   10738:	689e      	ldr	r6, [r3, #8]
			if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   1073a:	2a3c      	cmp	r2, #60	; 0x3c
			adv = HDR_LLL2ULL(lll);
   1073c:	6835      	ldr	r5, [r6, #0]
			if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   1073e:	d140      	bne.n	107c2 <ll_rx_dequeue+0xe2>
				conn_lll = lll->conn;
   10740:	6874      	ldr	r4, [r6, #4]
				LL_ASSERT(conn_lll);
   10742:	b964      	cbnz	r4, 1075e <ll_rx_dequeue+0x7e>
   10744:	4a30      	ldr	r2, [pc, #192]	; (10808 <ll_rx_dequeue+0x128>)
   10746:	4935      	ldr	r1, [pc, #212]	; (1081c <ll_rx_dequeue+0x13c>)
   10748:	4831      	ldr	r0, [pc, #196]	; (10810 <ll_rx_dequeue+0x130>)
   1074a:	f240 4305 	movw	r3, #1029	; 0x405
   1074e:	f008 fa39 	bl	18bc4 <printk>
   10752:	4040      	eors	r0, r0
   10754:	f380 8811 	msr	BASEPRI, r0
   10758:	f04f 0003 	mov.w	r0, #3
   1075c:	df02      	svc	2
				lll->conn = NULL;
   1075e:	2300      	movs	r3, #0
   10760:	6073      	str	r3, [r6, #4]
				LL_ASSERT(!conn_lll->link_tx_free);
   10762:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   10764:	b163      	cbz	r3, 10780 <ll_rx_dequeue+0xa0>
   10766:	4a28      	ldr	r2, [pc, #160]	; (10808 <ll_rx_dequeue+0x128>)
   10768:	492d      	ldr	r1, [pc, #180]	; (10820 <ll_rx_dequeue+0x140>)
   1076a:	4829      	ldr	r0, [pc, #164]	; (10810 <ll_rx_dequeue+0x130>)
   1076c:	f44f 6381 	mov.w	r3, #1032	; 0x408
   10770:	f008 fa28 	bl	18bc4 <printk>
   10774:	4040      	eors	r0, r0
   10776:	f380 8811 	msr	BASEPRI, r0
   1077a:	f04f 0003 	mov.w	r0, #3
   1077e:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
   10780:	f104 0140 	add.w	r1, r4, #64	; 0x40
   10784:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   10788:	f00c f83d 	bl	1c806 <memq_deinit>
				LL_ASSERT(link);
   1078c:	4606      	mov	r6, r0
   1078e:	b960      	cbnz	r0, 107aa <ll_rx_dequeue+0xca>
   10790:	4a1d      	ldr	r2, [pc, #116]	; (10808 <ll_rx_dequeue+0x128>)
   10792:	491e      	ldr	r1, [pc, #120]	; (1080c <ll_rx_dequeue+0x12c>)
   10794:	481e      	ldr	r0, [pc, #120]	; (10810 <ll_rx_dequeue+0x130>)
   10796:	f240 430b 	movw	r3, #1035	; 0x40b
   1079a:	f008 fa13 	bl	18bc4 <printk>
   1079e:	4040      	eors	r0, r0
   107a0:	f380 8811 	msr	BASEPRI, r0
   107a4:	f04f 0003 	mov.w	r0, #3
   107a8:	df02      	svc	2
				ll_conn_release(conn);
   107aa:	6820      	ldr	r0, [r4, #0]
				conn_lll->link_tx_free = link;
   107ac:	64e6      	str	r6, [r4, #76]	; 0x4c
				ll_conn_release(conn);
   107ae:	f001 f9bf 	bl	11b30 <ll_conn_release>
			adv->is_enabled = 0U;
   107b2:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
   107b6:	f36f 0300 	bfc	r3, #0, #1
   107ba:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
}
   107be:	b002      	add	sp, #8
   107c0:	bd70      	pop	{r4, r5, r6, pc}
				if (adv->node_rx_cc_free) {
   107c2:	6e68      	ldr	r0, [r5, #100]	; 0x64
   107c4:	2800      	cmp	r0, #0
   107c6:	d0f4      	beq.n	107b2 <ll_rx_dequeue+0xd2>
					adv->node_rx_cc_free = NULL;
   107c8:	2300      	movs	r3, #0
					mem_release(rx_free, &mem_pdu_rx.free);
   107ca:	4916      	ldr	r1, [pc, #88]	; (10824 <ll_rx_dequeue+0x144>)
					adv->node_rx_cc_free = NULL;
   107cc:	666b      	str	r3, [r5, #100]	; 0x64
					mem_release(rx_free, &mem_pdu_rx.free);
   107ce:	f00b ffe0 	bl	1c792 <mem_release>
   107d2:	e7ee      	b.n	107b2 <ll_rx_dequeue+0xd2>
			LL_ASSERT(0);
   107d4:	f240 4342 	movw	r3, #1090	; 0x442
		LL_ASSERT(0);
   107d8:	4a0b      	ldr	r2, [pc, #44]	; (10808 <ll_rx_dequeue+0x128>)
   107da:	4913      	ldr	r1, [pc, #76]	; (10828 <ll_rx_dequeue+0x148>)
   107dc:	e005      	b.n	107ea <ll_rx_dequeue+0x10a>
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   107de:	2900      	cmp	r1, #0
   107e0:	d1ed      	bne.n	107be <ll_rx_dequeue+0xde>
   107e2:	4a09      	ldr	r2, [pc, #36]	; (10808 <ll_rx_dequeue+0x128>)
   107e4:	4911      	ldr	r1, [pc, #68]	; (1082c <ll_rx_dequeue+0x14c>)
   107e6:	f240 43a7 	movw	r3, #1191	; 0x4a7
		LL_ASSERT(0);
   107ea:	4809      	ldr	r0, [pc, #36]	; (10810 <ll_rx_dequeue+0x130>)
   107ec:	f008 f9ea 	bl	18bc4 <printk>
   107f0:	4040      	eors	r0, r0
   107f2:	f380 8811 	msr	BASEPRI, r0
   107f6:	f04f 0003 	mov.w	r0, #3
   107fa:	df02      	svc	2
}
   107fc:	e7df      	b.n	107be <ll_rx_dequeue+0xde>
		LL_ASSERT(0);
   107fe:	f240 43ab 	movw	r3, #1195	; 0x4ab
   10802:	e7e9      	b.n	107d8 <ll_rx_dequeue+0xf8>
   10804:	2000223c 	.word	0x2000223c
   10808:	00022938 	.word	0x00022938
   1080c:	00022242 	.word	0x00022242
   10810:	00020429 	.word	0x00020429
   10814:	20001e94 	.word	0x20001e94
   10818:	0b800029 	.word	0x0b800029
   1081c:	000229df 	.word	0x000229df
   10820:	000229e8 	.word	0x000229e8
   10824:	20001f08 	.word	0x20001f08
   10828:	000218fc 	.word	0x000218fc
   1082c:	00022a00 	.word	0x00022a00

00010830 <ll_rx_mem_release>:
{
   10830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = *node_rx;
   10834:	6804      	ldr	r4, [r0, #0]
			LL_ASSERT(0);
   10836:	4d49      	ldr	r5, [pc, #292]	; (1095c <ll_rx_mem_release+0x12c>)
   10838:	f8df 8124 	ldr.w	r8, [pc, #292]	; 10960 <ll_rx_mem_release+0x130>
   1083c:	4e49      	ldr	r6, [pc, #292]	; (10964 <ll_rx_mem_release+0x134>)
{
   1083e:	4607      	mov	r7, r0
	while (rx) {
   10840:	b92c      	cbnz	r4, 1084e <ll_rx_mem_release+0x1e>
	*node_rx = rx;
   10842:	603c      	str	r4, [r7, #0]
	rx_alloc(UINT8_MAX);
   10844:	20ff      	movs	r0, #255	; 0xff
}
   10846:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx_alloc(UINT8_MAX);
   1084a:	f7ff bc73 	b.w	10134 <rx_alloc>
		switch (rx_free->type) {
   1084e:	7923      	ldrb	r3, [r4, #4]
		rx = rx->next;
   10850:	f8d4 9000 	ldr.w	r9, [r4]
		switch (rx_free->type) {
   10854:	2b05      	cmp	r3, #5
   10856:	d813      	bhi.n	10880 <ll_rx_mem_release+0x50>
   10858:	2201      	movs	r2, #1
   1085a:	fa02 f303 	lsl.w	r3, r2, r3
   1085e:	f013 0f29 	tst.w	r3, #41	; 0x29
   10862:	d13a      	bne.n	108da <ll_rx_mem_release+0xaa>
			LL_ASSERT(0);
   10864:	f44f 63b2 	mov.w	r3, #1424	; 0x590
   10868:	462a      	mov	r2, r5
   1086a:	4641      	mov	r1, r8
   1086c:	4630      	mov	r0, r6
   1086e:	f008 f9a9 	bl	18bc4 <printk>
   10872:	4040      	eors	r0, r0
   10874:	f380 8811 	msr	BASEPRI, r0
   10878:	f04f 0003 	mov.w	r0, #3
   1087c:	df02      	svc	2
			break;
   1087e:	e01c      	b.n	108ba <ll_rx_mem_release+0x8a>
		switch (rx_free->type) {
   10880:	3b16      	subs	r3, #22
   10882:	b2da      	uxtb	r2, r3
   10884:	2a05      	cmp	r2, #5
   10886:	d8ed      	bhi.n	10864 <ll_rx_mem_release+0x34>
   10888:	2b05      	cmp	r3, #5
   1088a:	d8eb      	bhi.n	10864 <ll_rx_mem_release+0x34>
   1088c:	a201      	add	r2, pc, #4	; (adr r2, 10894 <ll_rx_mem_release+0x64>)
   1088e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10892:	bf00      	nop
   10894:	000108ad 	.word	0x000108ad
   10898:	00010901 	.word	0x00010901
   1089c:	000108db 	.word	0x000108db
   108a0:	000108db 	.word	0x000108db
   108a4:	00010865 	.word	0x00010865
   108a8:	000108db 	.word	0x000108db
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   108ac:	7f23      	ldrb	r3, [r4, #28]
   108ae:	2b3c      	cmp	r3, #60	; 0x3c
   108b0:	d105      	bne.n	108be <ll_rx_mem_release+0x8e>
			mem_release(rx_free, &mem_pdu_rx.free);
   108b2:	492d      	ldr	r1, [pc, #180]	; (10968 <ll_rx_mem_release+0x138>)
   108b4:	4620      	mov	r0, r4
   108b6:	f00b ff6c 	bl	1c792 <mem_release>
{
   108ba:	464c      	mov	r4, r9
   108bc:	e7c0      	b.n	10840 <ll_rx_mem_release+0x10>
				LL_ASSERT(!cc->status);
   108be:	b163      	cbz	r3, 108da <ll_rx_mem_release+0xaa>
   108c0:	492a      	ldr	r1, [pc, #168]	; (1096c <ll_rx_mem_release+0x13c>)
   108c2:	f240 5301 	movw	r3, #1281	; 0x501
   108c6:	462a      	mov	r2, r5
   108c8:	4630      	mov	r0, r6
   108ca:	f008 f97b 	bl	18bc4 <printk>
   108ce:	4040      	eors	r0, r0
   108d0:	f380 8811 	msr	BASEPRI, r0
   108d4:	f04f 0003 	mov.w	r0, #3
   108d8:	df02      	svc	2
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   108da:	7923      	ldrb	r3, [r4, #4]
   108dc:	b963      	cbnz	r3, 108f8 <ll_rx_mem_release+0xc8>
   108de:	4924      	ldr	r1, [pc, #144]	; (10970 <ll_rx_mem_release+0x140>)
   108e0:	f240 5353 	movw	r3, #1363	; 0x553
   108e4:	462a      	mov	r2, r5
   108e6:	4630      	mov	r0, r6
   108e8:	f008 f96c 	bl	18bc4 <printk>
   108ec:	4040      	eors	r0, r0
   108ee:	f380 8811 	msr	BASEPRI, r0
   108f2:	f04f 0003 	mov.w	r0, #3
   108f6:	df02      	svc	2
			ll_rx_link_inc_quota(1);
   108f8:	2001      	movs	r0, #1
   108fa:	f7ff fb2f 	bl	ff5c <ll_rx_link_inc_quota>
   108fe:	e7d8      	b.n	108b2 <ll_rx_mem_release+0x82>
			conn = ll_conn_get(rx_free->handle);
   10900:	88e0      	ldrh	r0, [r4, #6]
   10902:	f001 f991 	bl	11c28 <ll_conn_get>
			LL_ASSERT(!conn->lll.link_tx_free);
   10906:	6e83      	ldr	r3, [r0, #104]	; 0x68
			conn = ll_conn_get(rx_free->handle);
   10908:	4604      	mov	r4, r0
			LL_ASSERT(!conn->lll.link_tx_free);
   1090a:	b163      	cbz	r3, 10926 <ll_rx_mem_release+0xf6>
   1090c:	4919      	ldr	r1, [pc, #100]	; (10974 <ll_rx_mem_release+0x144>)
   1090e:	f240 5383 	movw	r3, #1411	; 0x583
   10912:	462a      	mov	r2, r5
   10914:	4630      	mov	r0, r6
   10916:	f008 f955 	bl	18bc4 <printk>
   1091a:	4040      	eors	r0, r0
   1091c:	f380 8811 	msr	BASEPRI, r0
   10920:	f04f 0003 	mov.w	r0, #3
   10924:	df02      	svc	2
			link = memq_deinit(&conn->lll.memq_tx.head,
   10926:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   1092a:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1092e:	f00b ff6a 	bl	1c806 <memq_deinit>
			LL_ASSERT(link);
   10932:	4682      	mov	sl, r0
   10934:	b960      	cbnz	r0, 10950 <ll_rx_mem_release+0x120>
   10936:	4910      	ldr	r1, [pc, #64]	; (10978 <ll_rx_mem_release+0x148>)
   10938:	f240 5386 	movw	r3, #1414	; 0x586
   1093c:	462a      	mov	r2, r5
   1093e:	4630      	mov	r0, r6
   10940:	f008 f940 	bl	18bc4 <printk>
   10944:	4040      	eors	r0, r0
   10946:	f380 8811 	msr	BASEPRI, r0
   1094a:	f04f 0003 	mov.w	r0, #3
   1094e:	df02      	svc	2
			conn->lll.link_tx_free = link;
   10950:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
			ll_conn_release(conn);
   10954:	4620      	mov	r0, r4
   10956:	f001 f8eb 	bl	11b30 <ll_conn_release>
		break;
   1095a:	e7ae      	b.n	108ba <ll_rx_mem_release+0x8a>
   1095c:	00022938 	.word	0x00022938
   10960:	000218fc 	.word	0x000218fc
   10964:	00020429 	.word	0x00020429
   10968:	20001f08 	.word	0x20001f08
   1096c:	00022a1e 	.word	0x00022a1e
   10970:	00022a2a 	.word	0x00022a2a
   10974:	00022a4d 	.word	0x00022a4d
   10978:	00022242 	.word	0x00022242

0001097c <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
   1097c:	4801      	ldr	r0, [pc, #4]	; (10984 <ll_rx_link_alloc+0x8>)
   1097e:	f00b beef 	b.w	1c760 <mem_acquire>
   10982:	bf00      	nop
   10984:	20001e94 	.word	0x20001e94

00010988 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
   10988:	4901      	ldr	r1, [pc, #4]	; (10990 <ll_rx_link_release+0x8>)
   1098a:	f00b bf02 	b.w	1c792 <mem_release>
   1098e:	bf00      	nop
   10990:	20001e94 	.word	0x20001e94

00010994 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
   10994:	4801      	ldr	r0, [pc, #4]	; (1099c <ll_rx_alloc+0x8>)
   10996:	f00b bee3 	b.w	1c760 <mem_acquire>
   1099a:	bf00      	nop
   1099c:	20001f08 	.word	0x20001f08

000109a0 <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
   109a0:	4901      	ldr	r1, [pc, #4]	; (109a8 <ll_rx_release+0x8>)
   109a2:	f00b bef6 	b.w	1c792 <mem_release>
   109a6:	bf00      	nop
   109a8:	20001f08 	.word	0x20001f08

000109ac <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
   109ac:	4b02      	ldr	r3, [pc, #8]	; (109b8 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   109ae:	4a03      	ldr	r2, [pc, #12]	; (109bc <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   109b0:	78db      	ldrb	r3, [r3, #3]
   109b2:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   109b4:	f00b bf32 	b.w	1c81c <memq_enqueue>
   109b8:	200007a8 	.word	0x200007a8
   109bc:	20002240 	.word	0x20002240

000109c0 <ll_rx_sched>:
	k_sem_give(sem_recv);
   109c0:	4b01      	ldr	r3, [pc, #4]	; (109c8 <ll_rx_sched+0x8>)
   109c2:	6818      	ldr	r0, [r3, #0]
	z_impl_k_sem_give(sem);
   109c4:	f007 b848 	b.w	17a58 <z_impl_k_sem_give>
   109c8:	20002254 	.word	0x20002254

000109cc <rx_demux>:
{
   109cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   109ce:	4c3c      	ldr	r4, [pc, #240]	; (10ac0 <rx_demux+0xf4>)
		LL_ASSERT(0);
   109d0:	4e3c      	ldr	r6, [pc, #240]	; (10ac4 <rx_demux+0xf8>)
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   109d2:	e9d4 0100 	ldrd	r0, r1, [r4]
   109d6:	aa01      	add	r2, sp, #4
   109d8:	f00b ff27 	bl	1c82a <memq_peek>
		if (link) {
   109dc:	4605      	mov	r5, r0
   109de:	2800      	cmp	r0, #0
   109e0:	d05d      	beq.n	10a9e <rx_demux+0xd2>
			LL_ASSERT(rx);
   109e2:	9b01      	ldr	r3, [sp, #4]
   109e4:	b963      	cbnz	r3, 10a00 <rx_demux+0x34>
   109e6:	4938      	ldr	r1, [pc, #224]	; (10ac8 <rx_demux+0xfc>)
   109e8:	4838      	ldr	r0, [pc, #224]	; (10acc <rx_demux+0x100>)
   109ea:	f640 0379 	movw	r3, #2169	; 0x879
   109ee:	4632      	mov	r2, r6
   109f0:	f008 f8e8 	bl	18bc4 <printk>
   109f4:	4040      	eors	r0, r0
   109f6:	f380 8811 	msr	BASEPRI, r0
   109fa:	f04f 0003 	mov.w	r0, #3
   109fe:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   10a00:	9b01      	ldr	r3, [sp, #4]
   10a02:	aa02      	add	r2, sp, #8
   10a04:	7818      	ldrb	r0, [r3, #0]
   10a06:	f10d 0102 	add.w	r1, sp, #2
   10a0a:	f002 f825 	bl	12a58 <ull_conn_ack_by_last_peek>
			if (link_tx) {
   10a0e:	4602      	mov	r2, r0
   10a10:	9801      	ldr	r0, [sp, #4]
   10a12:	b132      	cbz	r2, 10a22 <rx_demux+0x56>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
   10a14:	9b02      	ldr	r3, [sp, #8]
   10a16:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   10a1a:	7800      	ldrb	r0, [r0, #0]
				rx_demux_conn_tx_ack(ack_last, handle,
   10a1c:	f00c fa2b 	bl	1ce76 <rx_demux_conn_tx_ack>
	} while (link);
   10a20:	e7d7      	b.n	109d2 <rx_demux+0x6>
				nack = rx_demux_rx(link, rx);
   10a22:	9003      	str	r0, [sp, #12]
	switch (rx->type) {
   10a24:	7903      	ldrb	r3, [r0, #4]
   10a26:	2b05      	cmp	r3, #5
   10a28:	d016      	beq.n	10a58 <rx_demux+0x8c>
   10a2a:	d811      	bhi.n	10a50 <rx_demux+0x84>
   10a2c:	2b01      	cmp	r3, #1
   10a2e:	d013      	beq.n	10a58 <rx_demux+0x8c>
   10a30:	2b03      	cmp	r3, #3
   10a32:	d021      	beq.n	10a78 <rx_demux+0xac>
		LL_ASSERT(0);
   10a34:	4926      	ldr	r1, [pc, #152]	; (10ad0 <rx_demux+0x104>)
   10a36:	4825      	ldr	r0, [pc, #148]	; (10acc <rx_demux+0x100>)
   10a38:	f44f 631e 	mov.w	r3, #2528	; 0x9e0
   10a3c:	4632      	mov	r2, r6
   10a3e:	f008 f8c1 	bl	18bc4 <printk>
   10a42:	4040      	eors	r0, r0
   10a44:	f380 8811 	msr	BASEPRI, r0
   10a48:	f04f 0003 	mov.w	r0, #3
   10a4c:	df02      	svc	2
			if (nack) {
   10a4e:	e7c0      	b.n	109d2 <rx_demux+0x6>
	switch (rx->type) {
   10a50:	2b16      	cmp	r3, #22
   10a52:	d008      	beq.n	10a66 <rx_demux+0x9a>
   10a54:	2b17      	cmp	r3, #23
   10a56:	d1ed      	bne.n	10a34 <rx_demux+0x68>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   10a58:	4621      	mov	r1, r4
   10a5a:	6860      	ldr	r0, [r4, #4]
   10a5c:	2200      	movs	r2, #0
   10a5e:	f00b feec 	bl	1c83a <memq_dequeue>
		ll_rx_put(link, rx);
   10a62:	9903      	ldr	r1, [sp, #12]
   10a64:	e015      	b.n	10a92 <rx_demux+0xc6>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   10a66:	4621      	mov	r1, r4
   10a68:	6860      	ldr	r0, [r4, #4]
   10a6a:	f00b fee6 	bl	1c83a <memq_dequeue>
		ull_conn_setup(link, rx);
   10a6e:	9903      	ldr	r1, [sp, #12]
   10a70:	4628      	mov	r0, r5
   10a72:	f001 f98d 	bl	11d90 <ull_conn_setup>
			if (nack) {
   10a76:	e7ac      	b.n	109d2 <rx_demux+0x6>
		nack = ull_conn_rx(link, (void *)&rx);
   10a78:	a903      	add	r1, sp, #12
   10a7a:	4628      	mov	r0, r5
   10a7c:	f001 f9b0 	bl	11de0 <ull_conn_rx>
		if (nack) {
   10a80:	4602      	mov	r2, r0
   10a82:	b9d0      	cbnz	r0, 10aba <rx_demux+0xee>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   10a84:	4621      	mov	r1, r4
   10a86:	6860      	ldr	r0, [r4, #4]
   10a88:	f00b fed7 	bl	1c83a <memq_dequeue>
		if (rx) {
   10a8c:	9903      	ldr	r1, [sp, #12]
   10a8e:	2900      	cmp	r1, #0
   10a90:	d09f      	beq.n	109d2 <rx_demux+0x6>
		ll_rx_put(link, rx);
   10a92:	4628      	mov	r0, r5
   10a94:	f7ff ff8a 	bl	109ac <ll_rx_put>
		ll_rx_sched();
   10a98:	f7ff ff92 	bl	109c0 <ll_rx_sched>
			if (nack) {
   10a9c:	e799      	b.n	109d2 <rx_demux+0x6>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
   10a9e:	aa03      	add	r2, sp, #12
   10aa0:	a902      	add	r1, sp, #8
   10aa2:	f10d 0002 	add.w	r0, sp, #2
   10aa6:	f001 ffbf 	bl	12a28 <ull_conn_ack_peek>
			if (link) {
   10aaa:	4602      	mov	r2, r0
   10aac:	b128      	cbz	r0, 10aba <rx_demux+0xee>
				rx_demux_conn_tx_ack(ack_last, handle,
   10aae:	9b03      	ldr	r3, [sp, #12]
   10ab0:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   10ab4:	f89d 0002 	ldrb.w	r0, [sp, #2]
   10ab8:	e7b0      	b.n	10a1c <rx_demux+0x50>
}
   10aba:	b004      	add	sp, #16
   10abc:	bd70      	pop	{r4, r5, r6, pc}
   10abe:	bf00      	nop
   10ac0:	2000224c 	.word	0x2000224c
   10ac4:	00022938 	.word	0x00022938
   10ac8:	000230db 	.word	0x000230db
   10acc:	00020429 	.word	0x00020429
   10ad0:	000218fc 	.word	0x000218fc

00010ad4 <ll_pdu_rx_alloc_peek>:
{
   10ad4:	b510      	push	{r4, lr}
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   10ad6:	4a0a      	ldr	r2, [pc, #40]	; (10b00 <ll_pdu_rx_alloc_peek+0x2c>)
   10ad8:	7891      	ldrb	r1, [r2, #2]
   10ada:	78d4      	ldrb	r4, [r2, #3]
   10adc:	7853      	ldrb	r3, [r2, #1]
	if (last >= first) {
   10ade:	42a1      	cmp	r1, r4
		return count - first + last;
   10ae0:	bf8a      	itet	hi
   10ae2:	1a5b      	subhi	r3, r3, r1
		return last - first;
   10ae4:	1a63      	subls	r3, r4, r1
		return count - first + last;
   10ae6:	191b      	addhi	r3, r3, r4
   10ae8:	b2db      	uxtb	r3, r3
   10aea:	4298      	cmp	r0, r3
   10aec:	d806      	bhi.n	10afc <ll_pdu_rx_alloc_peek+0x28>
	if (first == last) {
   10aee:	42a1      	cmp	r1, r4
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   10af0:	7813      	ldrb	r3, [r2, #0]
   10af2:	d003      	beq.n	10afc <ll_pdu_rx_alloc_peek+0x28>
	return *((void **)(fifo + first * size));
   10af4:	fb01 2203 	mla	r2, r1, r3, r2
   10af8:	6850      	ldr	r0, [r2, #4]
}
   10afa:	bd10      	pop	{r4, pc}
		return NULL;
   10afc:	2000      	movs	r0, #0
   10afe:	e7fc      	b.n	10afa <ll_pdu_rx_alloc_peek+0x26>
   10b00:	2000066c 	.word	0x2000066c

00010b04 <ll_pdu_rx_alloc>:
{
   10b04:	b510      	push	{r4, lr}
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   10b06:	4a09      	ldr	r2, [pc, #36]	; (10b2c <ll_pdu_rx_alloc+0x28>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
   10b08:	7893      	ldrb	r3, [r2, #2]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
   10b0a:	78d0      	ldrb	r0, [r2, #3]
   10b0c:	7811      	ldrb	r1, [r2, #0]
   10b0e:	7854      	ldrb	r4, [r2, #1]
   10b10:	4298      	cmp	r0, r3
   10b12:	d009      	beq.n	10b28 <ll_pdu_rx_alloc+0x24>
	}

	/* Obtain address of head buffer.
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));
   10b14:	fb03 2101 	mla	r1, r3, r1, r2

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
   10b18:	3301      	adds	r3, #1
   10b1a:	b2db      	uxtb	r3, r3
	if (_first == count) {
		_first = 0U;
   10b1c:	429c      	cmp	r4, r3
   10b1e:	bf08      	it	eq
   10b20:	2300      	moveq	r3, #0
	mem = *((void **)(fifo + _first * size));
   10b22:	6848      	ldr	r0, [r1, #4]
	}

	*first = _first; /* Write back read-index */
   10b24:	7093      	strb	r3, [r2, #2]
}
   10b26:	bd10      	pop	{r4, pc}
		return NULL;
   10b28:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   10b2a:	e7fc      	b.n	10b26 <ll_pdu_rx_alloc+0x22>
   10b2c:	2000066c 	.word	0x2000066c

00010b30 <ll_tx_ack_put>:
{
   10b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
   10b32:	4a12      	ldr	r2, [pc, #72]	; (10b7c <ll_tx_ack_put+0x4c>)
   10b34:	78d4      	ldrb	r4, [r2, #3]
	if (last == count) {
   10b36:	7857      	ldrb	r7, [r2, #1]
   10b38:	7895      	ldrb	r5, [r2, #2]
   10b3a:	7816      	ldrb	r6, [r2, #0]
	last = last + 1;
   10b3c:	1c63      	adds	r3, r4, #1
   10b3e:	b2db      	uxtb	r3, r3
		last = 0U;
   10b40:	429f      	cmp	r7, r3
   10b42:	bf08      	it	eq
   10b44:	2300      	moveq	r3, #0
	if (last == first) {
   10b46:	429d      	cmp	r5, r3
   10b48:	d004      	beq.n	10b54 <ll_tx_ack_put+0x24>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   10b4a:	1d15      	adds	r5, r2, #4
   10b4c:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(tx);
   10b50:	192e      	adds	r6, r5, r4
   10b52:	d10f      	bne.n	10b74 <ll_tx_ack_put+0x44>
   10b54:	4a0a      	ldr	r2, [pc, #40]	; (10b80 <ll_tx_ack_put+0x50>)
   10b56:	490b      	ldr	r1, [pc, #44]	; (10b84 <ll_tx_ack_put+0x54>)
   10b58:	480b      	ldr	r0, [pc, #44]	; (10b88 <ll_tx_ack_put+0x58>)
   10b5a:	f240 53e4 	movw	r3, #1508	; 0x5e4
   10b5e:	f008 f831 	bl	18bc4 <printk>
   10b62:	4040      	eors	r0, r0
   10b64:	f380 8811 	msr	BASEPRI, r0
   10b68:	f04f 0003 	mov.w	r0, #3
   10b6c:	df02      	svc	2
	tx->handle = handle;
   10b6e:	2300      	movs	r3, #0
   10b70:	801b      	strh	r3, [r3, #0]
   10b72:	deff      	udf	#255	; 0xff
   10b74:	5328      	strh	r0, [r5, r4]
	tx->node = node_tx;
   10b76:	6071      	str	r1, [r6, #4]
	*last = idx; /* Commit: Update write index */
   10b78:	70d3      	strb	r3, [r2, #3]
}
   10b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10b7c:	200007a8 	.word	0x200007a8
   10b80:	00022938 	.word	0x00022938
   10b84:	00022d41 	.word	0x00022d41
   10b88:	00020429 	.word	0x00020429

00010b8c <ll_radio_state_abort>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   10b8c:	2200      	movs	r2, #0
{
   10b8e:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   10b90:	4611      	mov	r1, r2
   10b92:	4b09      	ldr	r3, [pc, #36]	; (10bb8 <ll_radio_state_abort+0x2c>)
   10b94:	2001      	movs	r0, #1
   10b96:	f7fd fc53 	bl	e440 <mayfly_enqueue>
	LL_ASSERT(!ret);
   10b9a:	b160      	cbz	r0, 10bb6 <ll_radio_state_abort+0x2a>
   10b9c:	4a07      	ldr	r2, [pc, #28]	; (10bbc <ll_radio_state_abort+0x30>)
   10b9e:	4908      	ldr	r1, [pc, #32]	; (10bc0 <ll_radio_state_abort+0x34>)
   10ba0:	4808      	ldr	r0, [pc, #32]	; (10bc4 <ll_radio_state_abort+0x38>)
   10ba2:	f240 53fc 	movw	r3, #1532	; 0x5fc
   10ba6:	f008 f80d 	bl	18bc4 <printk>
   10baa:	4040      	eors	r0, r0
   10bac:	f380 8811 	msr	BASEPRI, r0
   10bb0:	f04f 0003 	mov.w	r0, #3
   10bb4:	df02      	svc	2
}
   10bb6:	bd08      	pop	{r3, pc}
   10bb8:	20000824 	.word	0x20000824
   10bbc:	00022938 	.word	0x00022938
   10bc0:	00022a65 	.word	0x00022a65
   10bc4:	00020429 	.word	0x00020429

00010bc8 <ull_ticker_status_take>:
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   10bc8:	f030 0302 	bics.w	r3, r0, #2
{
   10bcc:	b510      	push	{r4, lr}
   10bce:	460c      	mov	r4, r1
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   10bd0:	d00f      	beq.n	10bf2 <ull_ticker_status_take+0x2a>
   10bd2:	680b      	ldr	r3, [r1, #0]
   10bd4:	2b02      	cmp	r3, #2
   10bd6:	d10c      	bne.n	10bf2 <ull_ticker_status_take+0x2a>
   10bd8:	4a0a      	ldr	r2, [pc, #40]	; (10c04 <ull_ticker_status_take+0x3c>)
   10bda:	490b      	ldr	r1, [pc, #44]	; (10c08 <ull_ticker_status_take+0x40>)
   10bdc:	480b      	ldr	r0, [pc, #44]	; (10c0c <ull_ticker_status_take+0x44>)
   10bde:	f44f 63c3 	mov.w	r3, #1560	; 0x618
   10be2:	f007 ffef 	bl	18bc4 <printk>
   10be6:	4040      	eors	r0, r0
   10be8:	f380 8811 	msr	BASEPRI, r0
   10bec:	f04f 0003 	mov.w	r0, #3
   10bf0:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   10bf2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10bf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10bfa:	4805      	ldr	r0, [pc, #20]	; (10c10 <ull_ticker_status_take+0x48>)
   10bfc:	f006 ff52 	bl	17aa4 <z_impl_k_sem_take>
	return *ret_cb;
   10c00:	6820      	ldr	r0, [r4, #0]
}
   10c02:	bd10      	pop	{r4, pc}
   10c04:	00022938 	.word	0x00022938
   10c08:	00022a6a 	.word	0x00022a6a
   10c0c:	00020429 	.word	0x00020429
   10c10:	20002258 	.word	0x20002258

00010c14 <ull_disable_mark>:
	if (!*m) {
   10c14:	4b02      	ldr	r3, [pc, #8]	; (10c20 <ull_disable_mark+0xc>)
   10c16:	681a      	ldr	r2, [r3, #0]
   10c18:	b902      	cbnz	r2, 10c1c <ull_disable_mark+0x8>
		*m = param;
   10c1a:	6018      	str	r0, [r3, #0]
}
   10c1c:	6818      	ldr	r0, [r3, #0]
   10c1e:	4770      	bx	lr
   10c20:	20001d88 	.word	0x20001d88

00010c24 <ull_disable_unmark>:
	if (*m && *m == param) {
   10c24:	4a05      	ldr	r2, [pc, #20]	; (10c3c <ull_disable_unmark+0x18>)
{
   10c26:	4603      	mov	r3, r0
	if (*m && *m == param) {
   10c28:	6810      	ldr	r0, [r2, #0]
   10c2a:	b130      	cbz	r0, 10c3a <ull_disable_unmark+0x16>
   10c2c:	4283      	cmp	r3, r0
   10c2e:	f04f 0300 	mov.w	r3, #0
   10c32:	d101      	bne.n	10c38 <ull_disable_unmark+0x14>
		*m = NULL;
   10c34:	6013      	str	r3, [r2, #0]
		return param;
   10c36:	4770      	bx	lr
	return NULL;
   10c38:	4618      	mov	r0, r3
}
   10c3a:	4770      	bx	lr
   10c3c:	20001d88 	.word	0x20001d88

00010c40 <ull_disable_mark_get>:
}
   10c40:	4b01      	ldr	r3, [pc, #4]	; (10c48 <ull_disable_mark_get+0x8>)
   10c42:	6818      	ldr	r0, [r3, #0]
   10c44:	4770      	bx	lr
   10c46:	bf00      	nop
   10c48:	20001d88 	.word	0x20001d88

00010c4c <ull_update_mark>:
	if (!*m) {
   10c4c:	4b02      	ldr	r3, [pc, #8]	; (10c58 <ull_update_mark+0xc>)
   10c4e:	681a      	ldr	r2, [r3, #0]
   10c50:	b902      	cbnz	r2, 10c54 <ull_update_mark+0x8>
		*m = param;
   10c52:	6018      	str	r0, [r3, #0]
}
   10c54:	6818      	ldr	r0, [r3, #0]
   10c56:	4770      	bx	lr
   10c58:	20001d8c 	.word	0x20001d8c

00010c5c <ull_update_unmark>:
	if (*m && *m == param) {
   10c5c:	4a05      	ldr	r2, [pc, #20]	; (10c74 <ull_update_unmark+0x18>)
{
   10c5e:	4603      	mov	r3, r0
	if (*m && *m == param) {
   10c60:	6810      	ldr	r0, [r2, #0]
   10c62:	b130      	cbz	r0, 10c72 <ull_update_unmark+0x16>
   10c64:	4283      	cmp	r3, r0
   10c66:	f04f 0300 	mov.w	r3, #0
   10c6a:	d101      	bne.n	10c70 <ull_update_unmark+0x14>
		*m = NULL;
   10c6c:	6013      	str	r3, [r2, #0]
		return param;
   10c6e:	4770      	bx	lr
	return NULL;
   10c70:	4618      	mov	r0, r3
}
   10c72:	4770      	bx	lr
   10c74:	20001d8c 	.word	0x20001d8c

00010c78 <ull_update_mark_get>:
}
   10c78:	4b01      	ldr	r3, [pc, #4]	; (10c80 <ull_update_mark_get+0x8>)
   10c7a:	6818      	ldr	r0, [r3, #0]
   10c7c:	4770      	bx	lr
   10c7e:	bf00      	nop
   10c80:	20001d8c 	.word	0x20001d8c

00010c84 <ull_disable>:
{
   10c84:	b530      	push	{r4, r5, lr}
	hdr = HDR_LLL2ULL(lll);
   10c86:	6804      	ldr	r4, [r0, #0]
{
   10c88:	b087      	sub	sp, #28
   10c8a:	4605      	mov	r5, r0
	if (!hdr || !ull_ref_get(hdr)) {
   10c8c:	b914      	cbnz	r4, 10c94 <ull_disable+0x10>
		return 0;
   10c8e:	2000      	movs	r0, #0
}
   10c90:	b007      	add	sp, #28
   10c92:	bd30      	pop	{r4, r5, pc}
   10c94:	7823      	ldrb	r3, [r4, #0]
	if (!hdr || !ull_ref_get(hdr)) {
   10c96:	2b00      	cmp	r3, #0
   10c98:	d0f9      	beq.n	10c8e <ull_disable+0xa>
	return z_impl_k_sem_init(sem, initial_count, limit);
   10c9a:	2201      	movs	r2, #1
   10c9c:	2100      	movs	r1, #0
   10c9e:	4668      	mov	r0, sp
   10ca0:	f00d fc26 	bl	1e4f0 <z_impl_k_sem_init>
	hdr->disabled_cb = disabled_cb;
   10ca4:	4b11      	ldr	r3, [pc, #68]	; (10cec <ull_disable+0x68>)
   10ca6:	6163      	str	r3, [r4, #20]
   10ca8:	7823      	ldrb	r3, [r4, #0]
	hdr->disabled_param = &sem;
   10caa:	f8c4 d018 	str.w	sp, [r4, #24]
	if (!ull_ref_get(hdr)) {
   10cae:	2b00      	cmp	r3, #0
   10cb0:	d0ed      	beq.n	10c8e <ull_disable+0xa>
	mfy.param = lll;
   10cb2:	4b0f      	ldr	r3, [pc, #60]	; (10cf0 <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   10cb4:	2200      	movs	r2, #0
   10cb6:	4611      	mov	r1, r2
   10cb8:	2003      	movs	r0, #3
	mfy.param = lll;
   10cba:	609d      	str	r5, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   10cbc:	f7fd fbc0 	bl	e440 <mayfly_enqueue>
	LL_ASSERT(!ret);
   10cc0:	b160      	cbz	r0, 10cdc <ull_disable+0x58>
   10cc2:	4a0c      	ldr	r2, [pc, #48]	; (10cf4 <ull_disable+0x70>)
   10cc4:	490c      	ldr	r1, [pc, #48]	; (10cf8 <ull_disable+0x74>)
   10cc6:	480d      	ldr	r0, [pc, #52]	; (10cfc <ull_disable+0x78>)
   10cc8:	f240 6393 	movw	r3, #1683	; 0x693
   10ccc:	f007 ff7a 	bl	18bc4 <printk>
   10cd0:	4040      	eors	r0, r0
   10cd2:	f380 8811 	msr	BASEPRI, r0
   10cd6:	f04f 0003 	mov.w	r0, #3
   10cda:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   10cdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10ce0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10ce4:	4668      	mov	r0, sp
   10ce6:	f006 fedd 	bl	17aa4 <z_impl_k_sem_take>
	return k_sem_take(&sem, K_FOREVER);
   10cea:	e7d1      	b.n	10c90 <ull_disable+0xc>
   10cec:	0001ce73 	.word	0x0001ce73
   10cf0:	20000814 	.word	0x20000814
   10cf4:	00022938 	.word	0x00022938
   10cf8:	00022a65 	.word	0x00022a65
   10cfc:	00020429 	.word	0x00020429

00010d00 <ull_ticker_stop_with_mark>:
{
   10d00:	b5f0      	push	{r4, r5, r6, r7, lr}
   10d02:	4606      	mov	r6, r0
   10d04:	b085      	sub	sp, #20
	mark = ull_disable_mark(param);
   10d06:	4608      	mov	r0, r1
{
   10d08:	4615      	mov	r5, r2
	mark = ull_disable_mark(param);
   10d0a:	f7ff ff83 	bl	10c14 <ull_disable_mark>
	if (mark != param) {
   10d0e:	4281      	cmp	r1, r0
{
   10d10:	460c      	mov	r4, r1
	if (mark != param) {
   10d12:	d121      	bne.n	10d58 <ull_ticker_stop_with_mark+0x58>
	ret_cb = TICKER_STATUS_BUSY;
   10d14:	2302      	movs	r3, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   10d16:	af03      	add	r7, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
   10d18:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   10d1a:	2103      	movs	r1, #3
   10d1c:	4b11      	ldr	r3, [pc, #68]	; (10d64 <ull_ticker_stop_with_mark+0x64>)
   10d1e:	9700      	str	r7, [sp, #0]
   10d20:	4632      	mov	r2, r6
   10d22:	2000      	movs	r0, #0
   10d24:	f7fe f952 	bl	efcc <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   10d28:	4639      	mov	r1, r7
   10d2a:	f7ff ff4d 	bl	10bc8 <ull_ticker_status_take>
	if (ret) {
   10d2e:	b148      	cbz	r0, 10d44 <ull_ticker_stop_with_mark+0x44>
		mark = ull_disable_unmark(param);
   10d30:	4620      	mov	r0, r4
   10d32:	f7ff ff77 	bl	10c24 <ull_disable_unmark>
		if (mark != param) {
   10d36:	4284      	cmp	r4, r0
   10d38:	d10e      	bne.n	10d58 <ull_ticker_stop_with_mark+0x58>
		return -EALREADY;
   10d3a:	f06f 0177 	mvn.w	r1, #119	; 0x77
}
   10d3e:	4608      	mov	r0, r1
   10d40:	b005      	add	sp, #20
   10d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = ull_disable(lll_disable);
   10d44:	4628      	mov	r0, r5
   10d46:	f7ff ff9d 	bl	10c84 <ull_disable>
	if (ret) {
   10d4a:	4601      	mov	r1, r0
   10d4c:	b938      	cbnz	r0, 10d5e <ull_ticker_stop_with_mark+0x5e>
	mark = ull_disable_unmark(param);
   10d4e:	4620      	mov	r0, r4
   10d50:	f7ff ff68 	bl	10c24 <ull_disable_unmark>
	if (mark != param) {
   10d54:	4284      	cmp	r4, r0
   10d56:	d0f2      	beq.n	10d3e <ull_ticker_stop_with_mark+0x3e>
		return -ENOLCK;
   10d58:	f06f 012d 	mvn.w	r1, #45	; 0x2d
   10d5c:	e7ef      	b.n	10d3e <ull_ticker_stop_with_mark+0x3e>
		return -EBUSY;
   10d5e:	f06f 010f 	mvn.w	r1, #15
   10d62:	e7ec      	b.n	10d3e <ull_ticker_stop_with_mark+0x3e>
   10d64:	00010411 	.word	0x00010411

00010d68 <ull_pdu_rx_alloc_peek>:
{
   10d68:	b510      	push	{r4, lr}
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   10d6a:	4a0a      	ldr	r2, [pc, #40]	; (10d94 <ull_pdu_rx_alloc_peek+0x2c>)
   10d6c:	7891      	ldrb	r1, [r2, #2]
   10d6e:	78d4      	ldrb	r4, [r2, #3]
   10d70:	7853      	ldrb	r3, [r2, #1]
	if (last >= first) {
   10d72:	42a1      	cmp	r1, r4
		return count - first + last;
   10d74:	bf8a      	itet	hi
   10d76:	1a5b      	subhi	r3, r3, r1
		return last - first;
   10d78:	1a63      	subls	r3, r4, r1
		return count - first + last;
   10d7a:	191b      	addhi	r3, r3, r4
   10d7c:	b2db      	uxtb	r3, r3
   10d7e:	4298      	cmp	r0, r3
   10d80:	d806      	bhi.n	10d90 <ull_pdu_rx_alloc_peek+0x28>
	if (first == last) {
   10d82:	42a1      	cmp	r1, r4
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   10d84:	7813      	ldrb	r3, [r2, #0]
   10d86:	d003      	beq.n	10d90 <ull_pdu_rx_alloc_peek+0x28>
	return *((void **)(fifo + first * size));
   10d88:	fb01 2203 	mla	r2, r1, r3, r2
   10d8c:	6850      	ldr	r0, [r2, #4]
}
   10d8e:	bd10      	pop	{r4, pc}
		return NULL;
   10d90:	2000      	movs	r0, #0
   10d92:	e7fc      	b.n	10d8e <ull_pdu_rx_alloc_peek+0x26>
   10d94:	20000678 	.word	0x20000678

00010d98 <ull_pdu_rx_alloc>:
{
   10d98:	b510      	push	{r4, lr}
	return MFIFO_DEQUEUE(pdu_rx_free);
   10d9a:	4a09      	ldr	r2, [pc, #36]	; (10dc0 <ull_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   10d9c:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   10d9e:	78d0      	ldrb	r0, [r2, #3]
   10da0:	7811      	ldrb	r1, [r2, #0]
   10da2:	7854      	ldrb	r4, [r2, #1]
   10da4:	4298      	cmp	r0, r3
   10da6:	d009      	beq.n	10dbc <ull_pdu_rx_alloc+0x24>
	mem = *((void **)(fifo + _first * size));
   10da8:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   10dac:	3301      	adds	r3, #1
   10dae:	b2db      	uxtb	r3, r3
		_first = 0U;
   10db0:	429c      	cmp	r4, r3
   10db2:	bf08      	it	eq
   10db4:	2300      	moveq	r3, #0
	mem = *((void **)(fifo + _first * size));
   10db6:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   10db8:	7093      	strb	r3, [r2, #2]
}
   10dba:	bd10      	pop	{r4, pc}
		return NULL;
   10dbc:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(pdu_rx_free);
   10dbe:	e7fc      	b.n	10dba <ull_pdu_rx_alloc+0x22>
   10dc0:	20000678 	.word	0x20000678

00010dc4 <ull_rx_put>:
{
   10dc4:	b538      	push	{r3, r4, r5, lr}
   10dc6:	460c      	mov	r4, r1
   10dc8:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   10dca:	f001 fe27 	bl	12a1c <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   10dce:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   10dd0:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   10dd2:	4a03      	ldr	r2, [pc, #12]	; (10de0 <ull_rx_put+0x1c>)
   10dd4:	4628      	mov	r0, r5
}
   10dd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   10dda:	f00b bd1f 	b.w	1c81c <memq_enqueue>
   10dde:	bf00      	nop
   10de0:	20002250 	.word	0x20002250

00010de4 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   10de4:	2201      	movs	r2, #1
   10de6:	4b02      	ldr	r3, [pc, #8]	; (10df0 <ull_rx_sched+0xc>)
   10de8:	4611      	mov	r1, r2
   10dea:	2000      	movs	r0, #0
   10dec:	f7fd bb28 	b.w	e440 <mayfly_enqueue>
   10df0:	20000804 	.word	0x20000804

00010df4 <ull_rx_put_done>:
	memq_enqueue(link, done, &memq_ull_done.tail);
   10df4:	4a01      	ldr	r2, [pc, #4]	; (10dfc <ull_rx_put_done+0x8>)
   10df6:	f00b bd11 	b.w	1c81c <memq_enqueue>
   10dfa:	bf00      	nop
   10dfc:	20002248 	.word	0x20002248

00010e00 <ull_rx_sched_done>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   10e00:	2201      	movs	r2, #1
   10e02:	4b02      	ldr	r3, [pc, #8]	; (10e0c <ull_rx_sched_done+0xc>)
   10e04:	4611      	mov	r1, r2
   10e06:	2000      	movs	r0, #0
   10e08:	f7fd bb1a 	b.w	e440 <mayfly_enqueue>
   10e0c:	200007f4 	.word	0x200007f4

00010e10 <ull_prepare_enqueue>:
{
   10e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   10e14:	4e14      	ldr	r6, [pc, #80]	; (10e68 <ull_prepare_enqueue+0x58>)
{
   10e16:	4699      	mov	r9, r3
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   10e18:	78f3      	ldrb	r3, [r6, #3]
	if (last == count) {
   10e1a:	7874      	ldrb	r4, [r6, #1]
	last = last + 1;
   10e1c:	1c5d      	adds	r5, r3, #1
{
   10e1e:	4680      	mov	r8, r0
   10e20:	b2ed      	uxtb	r5, r5
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   10e22:	78b0      	ldrb	r0, [r6, #2]
		last = 0U;
   10e24:	42ac      	cmp	r4, r5
   10e26:	bf08      	it	eq
   10e28:	2500      	moveq	r5, #0
	if (last == first) {
   10e2a:	42a8      	cmp	r0, r5
{
   10e2c:	460f      	mov	r7, r1
   10e2e:	4611      	mov	r1, r2
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   10e30:	7832      	ldrb	r2, [r6, #0]
   10e32:	d017      	beq.n	10e64 <ull_prepare_enqueue+0x54>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   10e34:	1d34      	adds	r4, r6, #4
   10e36:	fb03 4402 	mla	r4, r3, r2, r4
	if (!e) {
   10e3a:	b184      	cbz	r4, 10e5e <ull_prepare_enqueue+0x4e>
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
   10e3c:	2210      	movs	r2, #16
   10e3e:	4620      	mov	r0, r4
   10e40:	f009 fa1d 	bl	1a27e <memcpy>
	e->is_resume = is_resume;
   10e44:	7f23      	ldrb	r3, [r4, #28]
   10e46:	f89d 2020 	ldrb.w	r2, [sp, #32]
	e->abort_cb = abort_cb;
   10e4a:	61a7      	str	r7, [r4, #24]
	e->is_resume = is_resume;
   10e4c:	f002 0201 	and.w	r2, r2, #1
   10e50:	f023 0303 	bic.w	r3, r3, #3
   10e54:	4313      	orrs	r3, r2
	e->is_abort_cb = is_abort_cb;
   10e56:	e9c4 9804 	strd	r9, r8, [r4, #16]
	e->is_resume = is_resume;
   10e5a:	7723      	strb	r3, [r4, #28]
	*last = idx; /* Commit: Update write index */
   10e5c:	70f5      	strb	r5, [r6, #3]
}
   10e5e:	4620      	mov	r0, r4
   10e60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return NULL;
   10e64:	2400      	movs	r4, #0
   10e66:	e7fa      	b.n	10e5e <ull_prepare_enqueue+0x4e>
   10e68:	200006a4 	.word	0x200006a4

00010e6c <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
   10e6c:	4b05      	ldr	r3, [pc, #20]	; (10e84 <ull_prepare_dequeue_get+0x18>)
   10e6e:	7898      	ldrb	r0, [r3, #2]
	if (first == last) {
   10e70:	78d9      	ldrb	r1, [r3, #3]
   10e72:	781a      	ldrb	r2, [r3, #0]
   10e74:	4281      	cmp	r1, r0
	return (void *)(fifo + first * size);
   10e76:	bf1a      	itte	ne
   10e78:	3304      	addne	r3, #4
   10e7a:	fb00 3002 	mlane	r0, r0, r2, r3
		return NULL;
   10e7e:	2000      	moveq	r0, #0
}
   10e80:	4770      	bx	lr
   10e82:	bf00      	nop
   10e84:	200006a4 	.word	0x200006a4

00010e88 <ull_prepare_dequeue_iter>:
{
   10e88:	b530      	push	{r4, r5, lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   10e8a:	4a0c      	ldr	r2, [pc, #48]	; (10ebc <ull_prepare_dequeue_iter+0x34>)
{
   10e8c:	4603      	mov	r3, r0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   10e8e:	7854      	ldrb	r4, [r2, #1]
	if (*idx >= count) {
   10e90:	7819      	ldrb	r1, [r3, #0]
   10e92:	78d0      	ldrb	r0, [r2, #3]
   10e94:	7815      	ldrb	r5, [r2, #0]
   10e96:	42a1      	cmp	r1, r4
   10e98:	bf24      	itt	cs
   10e9a:	7892      	ldrbcs	r2, [r2, #2]
		*idx = first;
   10e9c:	701a      	strbcs	r2, [r3, #0]
	if (*idx == last) {
   10e9e:	7819      	ldrb	r1, [r3, #0]
   10ea0:	4288      	cmp	r0, r1
   10ea2:	d009      	beq.n	10eb8 <ull_prepare_dequeue_iter+0x30>
	i = *idx + 1;
   10ea4:	1c4a      	adds	r2, r1, #1
	p = (void *)(fifo + (*idx) * size);
   10ea6:	4806      	ldr	r0, [pc, #24]	; (10ec0 <ull_prepare_dequeue_iter+0x38>)
	i = *idx + 1;
   10ea8:	b2d2      	uxtb	r2, r2
		i = 0U;
   10eaa:	4294      	cmp	r4, r2
   10eac:	bf08      	it	eq
   10eae:	2200      	moveq	r2, #0
	p = (void *)(fifo + (*idx) * size);
   10eb0:	fb01 0005 	mla	r0, r1, r5, r0
	*idx = i;
   10eb4:	701a      	strb	r2, [r3, #0]
}
   10eb6:	bd30      	pop	{r4, r5, pc}
		return NULL;
   10eb8:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   10eba:	e7fc      	b.n	10eb6 <ull_prepare_dequeue_iter+0x2e>
   10ebc:	200006a4 	.word	0x200006a4
   10ec0:	200006a8 	.word	0x200006a8

00010ec4 <ull_prepare_dequeue>:
{
   10ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10ec8:	4605      	mov	r5, r0
	next = ull_prepare_dequeue_get();
   10eca:	f7ff ffcf 	bl	10e6c <ull_prepare_dequeue_get>
			mfy.param = next;
   10ece:	4f1c      	ldr	r7, [pc, #112]	; (10f40 <ull_prepare_dequeue+0x7c>)
		MFIFO_DEQUEUE(prep);
   10ed0:	4c1c      	ldr	r4, [pc, #112]	; (10f44 <ull_prepare_dequeue+0x80>)
	while (next) {
   10ed2:	2800      	cmp	r0, #0
   10ed4:	d031      	beq.n	10f3a <ull_prepare_dequeue+0x76>
		uint8_t is_aborted = next->is_aborted;
   10ed6:	7f03      	ldrb	r3, [r0, #28]
		if (!is_aborted) {
   10ed8:	079a      	lsls	r2, r3, #30
		uint8_t is_aborted = next->is_aborted;
   10eda:	f3c3 0640 	ubfx	r6, r3, #1, #1
		uint8_t is_resume = next->is_resume;
   10ede:	f003 0801 	and.w	r8, r3, #1
		if (!is_aborted) {
   10ee2:	d414      	bmi.n	10f0e <ull_prepare_dequeue+0x4a>
			mfy.param = next;
   10ee4:	60b8      	str	r0, [r7, #8]
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
   10ee6:	4b16      	ldr	r3, [pc, #88]	; (10f40 <ull_prepare_dequeue+0x7c>)
   10ee8:	4632      	mov	r2, r6
   10eea:	4631      	mov	r1, r6
   10eec:	4628      	mov	r0, r5
   10eee:	f7fd faa7 	bl	e440 <mayfly_enqueue>
			LL_ASSERT(!ret);
   10ef2:	b160      	cbz	r0, 10f0e <ull_prepare_dequeue+0x4a>
   10ef4:	4a14      	ldr	r2, [pc, #80]	; (10f48 <ull_prepare_dequeue+0x84>)
   10ef6:	4915      	ldr	r1, [pc, #84]	; (10f4c <ull_prepare_dequeue+0x88>)
   10ef8:	4815      	ldr	r0, [pc, #84]	; (10f50 <ull_prepare_dequeue+0x8c>)
   10efa:	f240 730a 	movw	r3, #1802	; 0x70a
   10efe:	f007 fe61 	bl	18bc4 <printk>
   10f02:	4040      	eors	r0, r0
   10f04:	f380 8811 	msr	BASEPRI, r0
   10f08:	f04f 0003 	mov.w	r0, #3
   10f0c:	df02      	svc	2
	uint8_t _first = *first; /* Copy read-index */
   10f0e:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   10f10:	78e1      	ldrb	r1, [r4, #3]
		MFIFO_DEQUEUE(prep);
   10f12:	7862      	ldrb	r2, [r4, #1]
   10f14:	4299      	cmp	r1, r3
   10f16:	d005      	beq.n	10f24 <ull_prepare_dequeue+0x60>
	_first += 1U;
   10f18:	3301      	adds	r3, #1
   10f1a:	b2db      	uxtb	r3, r3
		_first = 0U;
   10f1c:	429a      	cmp	r2, r3
   10f1e:	bf08      	it	eq
   10f20:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   10f22:	70a3      	strb	r3, [r4, #2]
		next = ull_prepare_dequeue_get();
   10f24:	f7ff ffa2 	bl	10e6c <ull_prepare_dequeue_get>
		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   10f28:	b138      	cbz	r0, 10f3a <ull_prepare_dequeue+0x76>
   10f2a:	2e00      	cmp	r6, #0
   10f2c:	d1d1      	bne.n	10ed2 <ull_prepare_dequeue+0xe>
   10f2e:	f1b8 0f00 	cmp.w	r8, #0
   10f32:	d002      	beq.n	10f3a <ull_prepare_dequeue+0x76>
   10f34:	7f03      	ldrb	r3, [r0, #28]
   10f36:	07db      	lsls	r3, r3, #31
   10f38:	d5cb      	bpl.n	10ed2 <ull_prepare_dequeue+0xe>
}
   10f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10f3e:	bf00      	nop
   10f40:	200007d4 	.word	0x200007d4
   10f44:	200006a4 	.word	0x200006a4
   10f48:	00022938 	.word	0x00022938
   10f4c:	00022a65 	.word	0x00022a65
   10f50:	00020429 	.word	0x00020429

00010f54 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
   10f54:	4b06      	ldr	r3, [pc, #24]	; (10f70 <ull_event_done_extra_get+0x1c>)
   10f56:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
   10f58:	78d8      	ldrb	r0, [r3, #3]
   10f5a:	7819      	ldrb	r1, [r3, #0]
   10f5c:	4290      	cmp	r0, r2
   10f5e:	d005      	beq.n	10f6c <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
   10f60:	fb02 3301 	mla	r3, r2, r1, r3
   10f64:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
   10f66:	b110      	cbz	r0, 10f6e <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
   10f68:	3020      	adds	r0, #32
   10f6a:	4770      	bx	lr
		return NULL;
   10f6c:	2000      	movs	r0, #0
}
   10f6e:	4770      	bx	lr
   10f70:	20000654 	.word	0x20000654

00010f74 <ull_event_done>:
{
   10f74:	b538      	push	{r3, r4, r5, lr}
	evdone = MFIFO_DEQUEUE(done);
   10f76:	4a10      	ldr	r2, [pc, #64]	; (10fb8 <ull_event_done+0x44>)
	uint8_t _first = *first; /* Copy read-index */
   10f78:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   10f7a:	78d4      	ldrb	r4, [r2, #3]
   10f7c:	7855      	ldrb	r5, [r2, #1]
   10f7e:	429c      	cmp	r4, r3
{
   10f80:	4601      	mov	r1, r0
	evdone = MFIFO_DEQUEUE(done);
   10f82:	7810      	ldrb	r0, [r2, #0]
   10f84:	d016      	beq.n	10fb4 <ull_event_done+0x40>
	mem = *((void **)(fifo + _first * size));
   10f86:	fb03 2000 	mla	r0, r3, r0, r2
	_first += 1U;
   10f8a:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   10f8c:	6844      	ldr	r4, [r0, #4]
	_first += 1U;
   10f8e:	b2db      	uxtb	r3, r3
		_first = 0U;
   10f90:	429d      	cmp	r5, r3
   10f92:	bf08      	it	eq
   10f94:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   10f96:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
   10f98:	b154      	cbz	r4, 10fb0 <ull_event_done+0x3c>
	evdone->hdr.link = NULL;
   10f9a:	2300      	movs	r3, #0
	link = evdone->hdr.link;
   10f9c:	6820      	ldr	r0, [r4, #0]
	evdone->hdr.link = NULL;
   10f9e:	6023      	str	r3, [r4, #0]
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   10fa0:	2302      	movs	r3, #2
   10fa2:	7123      	strb	r3, [r4, #4]
	evdone->param = param;
   10fa4:	61e1      	str	r1, [r4, #28]
	ull_rx_put_done(link, evdone);
   10fa6:	4621      	mov	r1, r4
   10fa8:	f7ff ff24 	bl	10df4 <ull_rx_put_done>
	ull_rx_sched_done();
   10fac:	f7ff ff28 	bl	10e00 <ull_rx_sched_done>
}
   10fb0:	4620      	mov	r0, r4
   10fb2:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   10fb4:	2400      	movs	r4, #0
   10fb6:	e7fb      	b.n	10fb0 <ull_event_done+0x3c>
   10fb8:	20000654 	.word	0x20000654

00010fbc <lll_resume>:
	return lll_prepare_resolve(is_abort_cb, abort_cb, prepare_cb,
				   prepare_param, 0, 0);
}

void lll_resume(void *param)
{
   10fbc:	b507      	push	{r0, r1, r2, lr}
	struct lll_event *next;
	int ret;

	next = param;
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   10fbe:	2201      	movs	r2, #1
   10fc0:	9201      	str	r2, [sp, #4]
				  next->prepare_cb, &next->prepare_param,
				  next->is_resume, 1);
   10fc2:	7f02      	ldrb	r2, [r0, #28]
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   10fc4:	f002 0201 	and.w	r2, r2, #1
   10fc8:	9200      	str	r2, [sp, #0]
   10fca:	6902      	ldr	r2, [r0, #16]
{
   10fcc:	4603      	mov	r3, r0
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   10fce:	e9d0 0105 	ldrd	r0, r1, [r0, #20]
   10fd2:	f002 fb09 	bl	135e8 <lll_prepare_resolve>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   10fd6:	b168      	cbz	r0, 10ff4 <lll_resume+0x38>
   10fd8:	3077      	adds	r0, #119	; 0x77
   10fda:	d00b      	beq.n	10ff4 <lll_resume+0x38>
   10fdc:	4a07      	ldr	r2, [pc, #28]	; (10ffc <lll_resume+0x40>)
   10fde:	4908      	ldr	r1, [pc, #32]	; (11000 <lll_resume+0x44>)
   10fe0:	4808      	ldr	r0, [pc, #32]	; (11004 <lll_resume+0x48>)
   10fe2:	234f      	movs	r3, #79	; 0x4f
   10fe4:	f007 fdee 	bl	18bc4 <printk>
   10fe8:	4040      	eors	r0, r0
   10fea:	f380 8811 	msr	BASEPRI, r0
   10fee:	f04f 0003 	mov.w	r0, #3
   10ff2:	df02      	svc	2
}
   10ff4:	b003      	add	sp, #12
   10ff6:	f85d fb04 	ldr.w	pc, [sp], #4
   10ffa:	bf00      	nop
   10ffc:	00022a93 	.word	0x00022a93
   11000:	00022ad5 	.word	0x00022ad5
   11004:	00020429 	.word	0x00020429

00011008 <ticker_stop_cb>:
{
   11008:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1100a:	9d07      	ldr	r5, [sp, #28]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   1100c:	4c16      	ldr	r4, [pc, #88]	; (11068 <ticker_stop_cb+0x60>)
   1100e:	226c      	movs	r2, #108	; 0x6c
   11010:	1b2c      	subs	r4, r5, r4
   11012:	fbb4 f4f2 	udiv	r4, r4, r2
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   11016:	b2e3      	uxtb	r3, r4
   11018:	b163      	cbz	r3, 11034 <ticker_stop_cb+0x2c>
   1101a:	4a14      	ldr	r2, [pc, #80]	; (1106c <ticker_stop_cb+0x64>)
   1101c:	4914      	ldr	r1, [pc, #80]	; (11070 <ticker_stop_cb+0x68>)
   1101e:	4815      	ldr	r0, [pc, #84]	; (11074 <ticker_stop_cb+0x6c>)
   11020:	f640 038f 	movw	r3, #2191	; 0x88f
   11024:	f007 fdce 	bl	18bc4 <printk>
   11028:	4040      	eors	r0, r0
   1102a:	f380 8811 	msr	BASEPRI, r0
   1102e:	f04f 0003 	mov.w	r0, #3
   11032:	df02      	svc	2
			  TICKER_ID_ADV_BASE + handle,
   11034:	1ca2      	adds	r2, r4, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   11036:	4b10      	ldr	r3, [pc, #64]	; (11078 <ticker_stop_cb+0x70>)
   11038:	9500      	str	r5, [sp, #0]
   1103a:	b2d2      	uxtb	r2, r2
   1103c:	2101      	movs	r1, #1
   1103e:	2000      	movs	r0, #0
   11040:	f7fd ffc4 	bl	efcc <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   11044:	f030 0302 	bics.w	r3, r0, #2
   11048:	d00c      	beq.n	11064 <ticker_stop_cb+0x5c>
   1104a:	4a08      	ldr	r2, [pc, #32]	; (1106c <ticker_stop_cb+0x64>)
   1104c:	490b      	ldr	r1, [pc, #44]	; (1107c <ticker_stop_cb+0x74>)
   1104e:	4809      	ldr	r0, [pc, #36]	; (11074 <ticker_stop_cb+0x6c>)
   11050:	f640 0394 	movw	r3, #2196	; 0x894
   11054:	f007 fdb6 	bl	18bc4 <printk>
   11058:	4040      	eors	r0, r0
   1105a:	f380 8811 	msr	BASEPRI, r0
   1105e:	f04f 0003 	mov.w	r0, #3
   11062:	df02      	svc	2
}
   11064:	b003      	add	sp, #12
   11066:	bd30      	pop	{r4, r5, pc}
   11068:	200026cc 	.word	0x200026cc
   1106c:	00022afc 	.word	0x00022afc
   11070:	00022b3b 	.word	0x00022b3b
   11074:	00020429 	.word	0x00020429
   11078:	00011185 	.word	0x00011185
   1107c:	00022b46 	.word	0x00022b46

00011080 <disabled_cb>:
{
   11080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	adv = ((struct lll_hdr *)param)->parent;
   11082:	6805      	ldr	r5, [r0, #0]
	LL_ASSERT(adv->link_cc_free);
   11084:	6e2b      	ldr	r3, [r5, #96]	; 0x60
{
   11086:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
   11088:	b963      	cbnz	r3, 110a4 <disabled_cb+0x24>
   1108a:	4a1b      	ldr	r2, [pc, #108]	; (110f8 <disabled_cb+0x78>)
   1108c:	491b      	ldr	r1, [pc, #108]	; (110fc <disabled_cb+0x7c>)
   1108e:	481c      	ldr	r0, [pc, #112]	; (11100 <disabled_cb+0x80>)
   11090:	f640 03dc 	movw	r3, #2268	; 0x8dc
   11094:	f007 fd96 	bl	18bc4 <printk>
   11098:	4040      	eors	r0, r0
   1109a:	f380 8811 	msr	BASEPRI, r0
   1109e:	f04f 0003 	mov.w	r0, #3
   110a2:	df02      	svc	2
	adv->link_cc_free = NULL;
   110a4:	2300      	movs	r3, #0
	link = adv->link_cc_free;
   110a6:	6e2f      	ldr	r7, [r5, #96]	; 0x60
	adv->link_cc_free = NULL;
   110a8:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
   110aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   110ac:	b963      	cbnz	r3, 110c8 <disabled_cb+0x48>
   110ae:	4a12      	ldr	r2, [pc, #72]	; (110f8 <disabled_cb+0x78>)
   110b0:	4914      	ldr	r1, [pc, #80]	; (11104 <disabled_cb+0x84>)
   110b2:	4813      	ldr	r0, [pc, #76]	; (11100 <disabled_cb+0x80>)
   110b4:	f44f 630e 	mov.w	r3, #2272	; 0x8e0
   110b8:	f007 fd84 	bl	18bc4 <printk>
   110bc:	4040      	eors	r0, r0
   110be:	f380 8811 	msr	BASEPRI, r0
   110c2:	f04f 0003 	mov.w	r0, #3
   110c6:	df02      	svc	2
	rx = adv->node_rx_cc_free;
   110c8:	6e6c      	ldr	r4, [r5, #100]	; 0x64
	adv->node_rx_cc_free = NULL;
   110ca:	2100      	movs	r1, #0
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   110cc:	2316      	movs	r3, #22
	adv->node_rx_cc_free = NULL;
   110ce:	6669      	str	r1, [r5, #100]	; 0x64
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   110d0:	7123      	strb	r3, [r4, #4]
	rx->hdr.handle = 0xffff;
   110d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   110d6:	80e3      	strh	r3, [r4, #6]
	memset(cc, 0x00, sizeof(struct node_rx_cc));
   110d8:	2212      	movs	r2, #18
   110da:	f104 001c 	add.w	r0, r4, #28
   110de:	f009 f8d9 	bl	1a294 <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   110e2:	233c      	movs	r3, #60	; 0x3c
   110e4:	7723      	strb	r3, [r4, #28]
	rx->hdr.rx_ftr.param = param;
   110e6:	60a6      	str	r6, [r4, #8]
	ll_rx_put(link, rx);
   110e8:	4621      	mov	r1, r4
   110ea:	4638      	mov	r0, r7
   110ec:	f7ff fc5e 	bl	109ac <ll_rx_put>
}
   110f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
   110f4:	f7ff bc64 	b.w	109c0 <ll_rx_sched>
   110f8:	00022afc 	.word	0x00022afc
   110fc:	00022b5f 	.word	0x00022b5f
   11100:	00020429 	.word	0x00020429
   11104:	00022b71 	.word	0x00022b71

00011108 <conn_release>:
{
   11108:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
   1110a:	6a05      	ldr	r5, [r0, #32]
	LL_ASSERT(!lll->link_tx_free);
   1110c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
{
   1110e:	4604      	mov	r4, r0
	LL_ASSERT(!lll->link_tx_free);
   11110:	b163      	cbz	r3, 1112c <conn_release+0x24>
   11112:	4a18      	ldr	r2, [pc, #96]	; (11174 <conn_release+0x6c>)
   11114:	4918      	ldr	r1, [pc, #96]	; (11178 <conn_release+0x70>)
   11116:	4819      	ldr	r0, [pc, #100]	; (1117c <conn_release+0x74>)
   11118:	f640 130a 	movw	r3, #2314	; 0x90a
   1111c:	f007 fd52 	bl	18bc4 <printk>
   11120:	4040      	eors	r0, r0
   11122:	f380 8811 	msr	BASEPRI, r0
   11126:	f04f 0003 	mov.w	r0, #3
   1112a:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   1112c:	f105 0140 	add.w	r1, r5, #64	; 0x40
   11130:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   11134:	f00b fb67 	bl	1c806 <memq_deinit>
	LL_ASSERT(link);
   11138:	4606      	mov	r6, r0
   1113a:	b960      	cbnz	r0, 11156 <conn_release+0x4e>
   1113c:	4a0d      	ldr	r2, [pc, #52]	; (11174 <conn_release+0x6c>)
   1113e:	4910      	ldr	r1, [pc, #64]	; (11180 <conn_release+0x78>)
   11140:	480e      	ldr	r0, [pc, #56]	; (1117c <conn_release+0x74>)
   11142:	f640 130c 	movw	r3, #2316	; 0x90c
   11146:	f007 fd3d 	bl	18bc4 <printk>
   1114a:	4040      	eors	r0, r0
   1114c:	f380 8811 	msr	BASEPRI, r0
   11150:	f04f 0003 	mov.w	r0, #3
   11154:	df02      	svc	2
	ll_conn_release(lll->hdr.parent);
   11156:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
   11158:	64ee      	str	r6, [r5, #76]	; 0x4c
	adv->lll.conn = NULL;
   1115a:	2500      	movs	r5, #0
	ll_conn_release(lll->hdr.parent);
   1115c:	f000 fce8 	bl	11b30 <ll_conn_release>
	ll_rx_release(adv->node_rx_cc_free);
   11160:	6e60      	ldr	r0, [r4, #100]	; 0x64
	adv->lll.conn = NULL;
   11162:	6225      	str	r5, [r4, #32]
	ll_rx_release(adv->node_rx_cc_free);
   11164:	f7ff fc1c 	bl	109a0 <ll_rx_release>
	ll_rx_link_release(adv->link_cc_free);
   11168:	6e20      	ldr	r0, [r4, #96]	; 0x60
	adv->node_rx_cc_free = NULL;
   1116a:	6665      	str	r5, [r4, #100]	; 0x64
	ll_rx_link_release(adv->link_cc_free);
   1116c:	f7ff fc0c 	bl	10988 <ll_rx_link_release>
	adv->link_cc_free = NULL;
   11170:	6625      	str	r5, [r4, #96]	; 0x60
}
   11172:	bd70      	pop	{r4, r5, r6, pc}
   11174:	00022afc 	.word	0x00022afc
   11178:	00022b86 	.word	0x00022b86
   1117c:	00020429 	.word	0x00020429
   11180:	00022242 	.word	0x00022242

00011184 <ticker_stop_op_cb>:
{
   11184:	b508      	push	{r3, lr}
	if (status != TICKER_STATUS_SUCCESS) {
   11186:	4602      	mov	r2, r0
   11188:	b998      	cbnz	r0, 111b2 <ticker_stop_op_cb+0x2e>
	mfy.param = param;
   1118a:	4b0a      	ldr	r3, [pc, #40]	; (111b4 <ticker_stop_op_cb+0x30>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   1118c:	2002      	movs	r0, #2
	mfy.param = param;
   1118e:	6099      	str	r1, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   11190:	2101      	movs	r1, #1
   11192:	f7fd f955 	bl	e440 <mayfly_enqueue>
	LL_ASSERT(!ret);
   11196:	b160      	cbz	r0, 111b2 <ticker_stop_op_cb+0x2e>
   11198:	4a07      	ldr	r2, [pc, #28]	; (111b8 <ticker_stop_op_cb+0x34>)
   1119a:	4908      	ldr	r1, [pc, #32]	; (111bc <ticker_stop_op_cb+0x38>)
   1119c:	4808      	ldr	r0, [pc, #32]	; (111c0 <ticker_stop_op_cb+0x3c>)
   1119e:	f44f 630b 	mov.w	r3, #2224	; 0x8b0
   111a2:	f007 fd0f 	bl	18bc4 <printk>
   111a6:	4040      	eors	r0, r0
   111a8:	f380 8811 	msr	BASEPRI, r0
   111ac:	f04f 0003 	mov.w	r0, #3
   111b0:	df02      	svc	2
}
   111b2:	bd08      	pop	{r3, pc}
   111b4:	20000854 	.word	0x20000854
   111b8:	00022afc 	.word	0x00022afc
   111bc:	00022a65 	.word	0x00022a65
   111c0:	00020429 	.word	0x00020429

000111c4 <adv_disable>:
{
   111c4:	b538      	push	{r3, r4, r5, lr}
   111c6:	4604      	mov	r4, r0
   111c8:	f810 3b1c 	ldrb.w	r3, [r0], #28
	if (ull_ref_get(hdr)) {
   111cc:	b34b      	cbz	r3, 11222 <adv_disable+0x5e>
		mfy.param = &adv->lll;
   111ce:	4d17      	ldr	r5, [pc, #92]	; (1122c <adv_disable+0x68>)
		LL_ASSERT(!hdr->disabled_cb);
   111d0:	6963      	ldr	r3, [r4, #20]
		mfy.param = &adv->lll;
   111d2:	60a8      	str	r0, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
   111d4:	b163      	cbz	r3, 111f0 <adv_disable+0x2c>
   111d6:	4a16      	ldr	r2, [pc, #88]	; (11230 <adv_disable+0x6c>)
   111d8:	4916      	ldr	r1, [pc, #88]	; (11234 <adv_disable+0x70>)
   111da:	4817      	ldr	r0, [pc, #92]	; (11238 <adv_disable+0x74>)
   111dc:	f640 03c5 	movw	r3, #2245	; 0x8c5
   111e0:	f007 fcf0 	bl	18bc4 <printk>
   111e4:	4040      	eors	r0, r0
   111e6:	f380 8811 	msr	BASEPRI, r0
   111ea:	f04f 0003 	mov.w	r0, #3
   111ee:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   111f0:	68ab      	ldr	r3, [r5, #8]
   111f2:	61a3      	str	r3, [r4, #24]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   111f4:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   111f6:	4b11      	ldr	r3, [pc, #68]	; (1123c <adv_disable+0x78>)
   111f8:	6163      	str	r3, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   111fa:	4611      	mov	r1, r2
   111fc:	4b0b      	ldr	r3, [pc, #44]	; (1122c <adv_disable+0x68>)
   111fe:	2001      	movs	r0, #1
   11200:	f7fd f91e 	bl	e440 <mayfly_enqueue>
		LL_ASSERT(!ret);
   11204:	b160      	cbz	r0, 11220 <adv_disable+0x5c>
   11206:	4a0a      	ldr	r2, [pc, #40]	; (11230 <adv_disable+0x6c>)
   11208:	490d      	ldr	r1, [pc, #52]	; (11240 <adv_disable+0x7c>)
   1120a:	480b      	ldr	r0, [pc, #44]	; (11238 <adv_disable+0x74>)
   1120c:	f640 03cc 	movw	r3, #2252	; 0x8cc
   11210:	f007 fcd8 	bl	18bc4 <printk>
   11214:	4040      	eors	r0, r0
   11216:	f380 8811 	msr	BASEPRI, r0
   1121a:	f04f 0003 	mov.w	r0, #3
   1121e:	df02      	svc	2
}
   11220:	bd38      	pop	{r3, r4, r5, pc}
   11222:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&adv->lll);
   11226:	f7ff bf2b 	b.w	11080 <disabled_cb>
   1122a:	bf00      	nop
   1122c:	20000844 	.word	0x20000844
   11230:	00022afc 	.word	0x00022afc
   11234:	00022b99 	.word	0x00022b99
   11238:	00020429 	.word	0x00020429
   1123c:	00011081 	.word	0x00011081
   11240:	00022a65 	.word	0x00022a65

00011244 <ticker_update_op_cb>:
{
   11244:	b510      	push	{r4, lr}
   11246:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   11248:	b180      	cbz	r0, 1126c <ticker_update_op_cb+0x28>
   1124a:	f7ff fcf9 	bl	10c40 <ull_disable_mark_get>
   1124e:	4284      	cmp	r4, r0
   11250:	d00c      	beq.n	1126c <ticker_update_op_cb+0x28>
   11252:	4a07      	ldr	r2, [pc, #28]	; (11270 <ticker_update_op_cb+0x2c>)
   11254:	4907      	ldr	r1, [pc, #28]	; (11274 <ticker_update_op_cb+0x30>)
   11256:	4808      	ldr	r0, [pc, #32]	; (11278 <ticker_update_op_cb+0x34>)
   11258:	f640 0381 	movw	r3, #2177	; 0x881
   1125c:	f007 fcb2 	bl	18bc4 <printk>
   11260:	4040      	eors	r0, r0
   11262:	f380 8811 	msr	BASEPRI, r0
   11266:	f04f 0003 	mov.w	r0, #3
   1126a:	df02      	svc	2
}
   1126c:	bd10      	pop	{r4, pc}
   1126e:	bf00      	nop
   11270:	00022afc 	.word	0x00022afc
   11274:	00022bab 	.word	0x00022bab
   11278:	00020429 	.word	0x00020429

0001127c <init_reset>:
{
   1127c:	b510      	push	{r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   1127e:	4c13      	ldr	r4, [pc, #76]	; (112cc <init_reset+0x50>)
   11280:	f104 0028 	add.w	r0, r4, #40	; 0x28
   11284:	f002 fbac 	bl	139e0 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   11288:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1128c:	f002 fba8 	bl	139e0 <lll_adv_data_init>
	pdu->len = BDADDR_SIZE;
}

static void init_set(struct ll_adv_set *adv)
{
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   11290:	f44f 6300 	mov.w	r3, #2048	; 0x800
   11294:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
#if defined(CONFIG_BT_CTLR_PRIVACY)
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
#endif /* CONFIG_BT_CTLR_PRIVACY */
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   11298:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   1129a:	f423 7343 	bic.w	r3, r3, #780	; 0x30c
   1129e:	f023 0302 	bic.w	r3, r3, #2
   112a2:	f043 030e 	orr.w	r3, r3, #14
   112a6:	84a3      	strh	r3, [r4, #36]	; 0x24
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   112a8:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   112ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	pdu->len = BDADDR_SIZE;
   112b0:	2206      	movs	r2, #6
   112b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	pdu->type = pdu_type;
   112b4:	2000      	movs	r0, #0
	pdu->len = BDADDR_SIZE;
   112b6:	705a      	strb	r2, [r3, #1]
	pdu->type = pdu_type;
   112b8:	7018      	strb	r0, [r3, #0]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   112ba:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   112be:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   112c2:	2104      	movs	r1, #4
   112c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	pdu->len = BDADDR_SIZE;
   112c6:	705a      	strb	r2, [r3, #1]
	pdu->type = pdu_type;
   112c8:	7019      	strb	r1, [r3, #0]
}
   112ca:	bd10      	pop	{r4, pc}
   112cc:	200026cc 	.word	0x200026cc

000112d0 <ticker_cb>:
{
   112d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   112d2:	461c      	mov	r4, r3
   112d4:	b08b      	sub	sp, #44	; 0x2c
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   112d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   112da:	429c      	cmp	r4, r3
{
   112dc:	9d11      	ldr	r5, [sp, #68]	; 0x44
   112de:	4607      	mov	r7, r0
   112e0:	4616      	mov	r6, r2
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   112e2:	d030      	beq.n	11346 <ticker_cb+0x76>
	return ++hdr->ref;
   112e4:	7829      	ldrb	r1, [r5, #0]
   112e6:	3101      	adds	r1, #1
   112e8:	b2c9      	uxtb	r1, r1
   112ea:	7029      	strb	r1, [r5, #0]
		LL_ASSERT(ref);
   112ec:	b961      	cbnz	r1, 11308 <ticker_cb+0x38>
   112ee:	4a31      	ldr	r2, [pc, #196]	; (113b4 <ticker_cb+0xe4>)
   112f0:	4931      	ldr	r1, [pc, #196]	; (113b8 <ticker_cb+0xe8>)
   112f2:	4832      	ldr	r0, [pc, #200]	; (113bc <ticker_cb+0xec>)
   112f4:	f640 0347 	movw	r3, #2119	; 0x847
   112f8:	f007 fc64 	bl	18bc4 <printk>
   112fc:	4040      	eors	r0, r0
   112fe:	f380 8811 	msr	BASEPRI, r0
   11302:	f04f 0003 	mov.w	r0, #3
   11306:	df02      	svc	2
		p.ticks_at_expire = ticks_at_expire;
   11308:	492d      	ldr	r1, [pc, #180]	; (113c0 <ticker_cb+0xf0>)
		p.force = force;
   1130a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1130e:	728b      	strb	r3, [r1, #10]
	lll = &adv->lll;
   11310:	f105 031c 	add.w	r3, r5, #28
		p.param = lll;
   11314:	60cb      	str	r3, [r1, #12]
		mfy.param = &p;
   11316:	4b2b      	ldr	r3, [pc, #172]	; (113c4 <ticker_cb+0xf4>)
		p.lazy = lazy;
   11318:	810c      	strh	r4, [r1, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   1131a:	2200      	movs	r2, #0
		p.remainder = remainder;
   1131c:	e9c1 7600 	strd	r7, r6, [r1]
		mfy.param = &p;
   11320:	6099      	str	r1, [r3, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   11322:	2001      	movs	r0, #1
   11324:	4611      	mov	r1, r2
   11326:	f7fd f88b 	bl	e440 <mayfly_enqueue>
		LL_ASSERT(!ret);
   1132a:	b160      	cbz	r0, 11346 <ticker_cb+0x76>
   1132c:	4a21      	ldr	r2, [pc, #132]	; (113b4 <ticker_cb+0xe4>)
   1132e:	4926      	ldr	r1, [pc, #152]	; (113c8 <ticker_cb+0xf8>)
   11330:	4822      	ldr	r0, [pc, #136]	; (113bc <ticker_cb+0xec>)
   11332:	f640 0354 	movw	r3, #2132	; 0x854
   11336:	f007 fc45 	bl	18bc4 <printk>
   1133a:	4040      	eors	r0, r0
   1133c:	f380 8811 	msr	BASEPRI, r0
   11340:	f04f 0003 	mov.w	r0, #3
   11344:	df02      	svc	2
	if (!lll->is_hdcd)
   11346:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
   1134a:	f014 0401 	ands.w	r4, r4, #1
   1134e:	d12f      	bne.n	113b0 <ticker_cb+0xe0>
	lll_rand_isr_get(&random_delay, sizeof(random_delay));
   11350:	2104      	movs	r1, #4
   11352:	a809      	add	r0, sp, #36	; 0x24
   11354:	f00c f88b 	bl	1d46e <lll_rand_isr_get>
	random_delay %= ticks_delay_window;
   11358:	9b09      	ldr	r3, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1135a:	9506      	str	r5, [sp, #24]
	random_delay %= ticks_delay_window;
   1135c:	f240 1247 	movw	r2, #327	; 0x147
   11360:	fbb3 f1f2 	udiv	r1, r3, r2
   11364:	fb02 3311 	mls	r3, r2, r1, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   11368:	4a18      	ldr	r2, [pc, #96]	; (113cc <ticker_cb+0xfc>)
   1136a:	216c      	movs	r1, #108	; 0x6c
   1136c:	1aaa      	subs	r2, r5, r2
   1136e:	fbb2 f2f1 	udiv	r2, r2, r1
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   11372:	4917      	ldr	r1, [pc, #92]	; (113d0 <ticker_cb+0x100>)
			    TICKER_ID_ADV_BASE + ull_adv_handle_get(adv),
   11374:	3202      	adds	r2, #2
	random_delay += (ticks_delay_window_offset + 1);
   11376:	3301      	adds	r3, #1
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   11378:	e9cd 4104 	strd	r4, r1, [sp, #16]
   1137c:	e9cd 4402 	strd	r4, r4, [sp, #8]
   11380:	e9cd 4400 	strd	r4, r4, [sp]
   11384:	b2d2      	uxtb	r2, r2
   11386:	2101      	movs	r1, #1
   11388:	4620      	mov	r0, r4
	random_delay += (ticks_delay_window_offset + 1);
   1138a:	9309      	str	r3, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1138c:	f00b fcf6 	bl	1cd7c <ticker_update>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   11390:	f030 0302 	bics.w	r3, r0, #2
   11394:	d00c      	beq.n	113b0 <ticker_cb+0xe0>
   11396:	4a07      	ldr	r2, [pc, #28]	; (113b4 <ticker_cb+0xe4>)
   11398:	490e      	ldr	r1, [pc, #56]	; (113d4 <ticker_cb+0x104>)
   1139a:	4808      	ldr	r0, [pc, #32]	; (113bc <ticker_cb+0xec>)
   1139c:	f240 63fa 	movw	r3, #1786	; 0x6fa
   113a0:	f007 fc10 	bl	18bc4 <printk>
   113a4:	4040      	eors	r0, r0
   113a6:	f380 8811 	msr	BASEPRI, r0
   113aa:	f04f 0003 	mov.w	r0, #3
   113ae:	df02      	svc	2
}
   113b0:	b00b      	add	sp, #44	; 0x2c
   113b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   113b4:	00022afc 	.word	0x00022afc
   113b8:	00022bda 	.word	0x00022bda
   113bc:	00020429 	.word	0x00020429
   113c0:	20002744 	.word	0x20002744
   113c4:	20000834 	.word	0x20000834
   113c8:	00022a65 	.word	0x00022a65
   113cc:	200026cc 	.word	0x200026cc
   113d0:	00011245 	.word	0x00011245
   113d4:	00022b46 	.word	0x00022b46

000113d8 <ll_adv_params_set>:
{
   113d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!adv || adv->is_enabled) {
   113dc:	4d57      	ldr	r5, [pc, #348]	; (1153c <ll_adv_params_set+0x164>)
{
   113de:	4698      	mov	r8, r3
	if (!adv || adv->is_enabled) {
   113e0:	f895 606a 	ldrb.w	r6, [r5, #106]	; 0x6a
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   113e4:	4b56      	ldr	r3, [pc, #344]	; (11540 <ll_adv_params_set+0x168>)
{
   113e6:	4604      	mov	r4, r0
	if (!adv || adv->is_enabled) {
   113e8:	f016 0601 	ands.w	r6, r6, #1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   113ec:	6818      	ldr	r0, [r3, #0]
   113ee:	791b      	ldrb	r3, [r3, #4]
   113f0:	9000      	str	r0, [sp, #0]
{
   113f2:	4617      	mov	r7, r2
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   113f4:	f88d 3004 	strb.w	r3, [sp, #4]
	if (!adv || adv->is_enabled) {
   113f8:	f040 809e 	bne.w	11538 <ll_adv_params_set+0x160>
		adv->interval = 0;
   113fc:	2901      	cmp	r1, #1
   113fe:	bf08      	it	eq
   11400:	2400      	moveq	r4, #0
   11402:	f8a5 4068 	strh.w	r4, [r5, #104]	; 0x68
	adv->lll.chan_map = chan_map;
   11406:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
   1140a:	f004 0303 	and.w	r3, r4, #3
   1140e:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
   11412:	f004 0407 	and.w	r4, r4, #7
   11416:	0064      	lsls	r4, r4, #1
   11418:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
   1141c:	8cab      	ldrh	r3, [r5, #36]	; 0x24
   1141e:	f423 7343 	bic.w	r3, r3, #780	; 0x30c
   11422:	f023 0302 	bic.w	r3, r3, #2
   11426:	431c      	orrs	r4, r3
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   11428:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
   1142c:	84ac      	strh	r4, [r5, #36]	; 0x24
   1142e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   11432:	ea4f 1a87 	mov.w	sl, r7, lsl #6
   11436:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	pdu->type = pdu_adv_type[adv_type];
   11438:	f101 0308 	add.w	r3, r1, #8
   1143c:	eb0d 0103 	add.w	r1, sp, r3
	pdu_type_prev = pdu->type;
   11440:	7822      	ldrb	r2, [r4, #0]
	pdu->type = pdu_adv_type[adv_type];
   11442:	f811 3c08 	ldrb.w	r3, [r1, #-8]
	pdu_type_prev = pdu->type;
   11446:	f002 090f 	and.w	r9, r2, #15
	pdu->type = pdu_adv_type[adv_type];
   1144a:	f003 030f 	and.w	r3, r3, #15
   1144e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
   11452:	4313      	orrs	r3, r2
   11454:	7023      	strb	r3, [r4, #0]
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   11456:	f003 030f 	and.w	r3, r3, #15
   1145a:	2b01      	cmp	r3, #1
   1145c:	d137      	bne.n	114ce <ll_adv_params_set+0xf6>
	    (pdu_type_prev != PDU_ADV_TYPE_DIRECT_IND) &&
   1145e:	f1b9 0f01 	cmp.w	r9, #1
   11462:	f104 0b08 	add.w	fp, r4, #8
   11466:	d003      	beq.n	11470 <ll_adv_params_set+0x98>
		if (pdu->len == 0U) {
   11468:	7863      	ldrb	r3, [r4, #1]
   1146a:	b99b      	cbnz	r3, 11494 <ll_adv_params_set+0xbc>
			adv->ad_data_backup.len = 0U;
   1146c:	f885 6040 	strb.w	r6, [r5, #64]	; 0x40
		pdu->tx_addr = own_addr_type & 0x1;
   11470:	f00a 0340 	and.w	r3, sl, #64	; 0x40
   11474:	ea43 18c8 	orr.w	r8, r3, r8, lsl #7
   11478:	7823      	ldrb	r3, [r4, #0]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   1147a:	990c      	ldr	r1, [sp, #48]	; 0x30
		pdu->tx_addr = own_addr_type & 0x1;
   1147c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   11480:	ea48 0803 	orr.w	r8, r8, r3
   11484:	f884 8000 	strb.w	r8, [r4]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   11488:	2206      	movs	r2, #6
   1148a:	4658      	mov	r0, fp
   1148c:	f008 fef7 	bl	1a27e <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   11490:	230c      	movs	r3, #12
   11492:	e027      	b.n	114e4 <ll_adv_params_set+0x10c>
			LL_ASSERT(pdu->len >=
   11494:	2b05      	cmp	r3, #5
   11496:	d80c      	bhi.n	114b2 <ll_adv_params_set+0xda>
   11498:	4a2a      	ldr	r2, [pc, #168]	; (11544 <ll_adv_params_set+0x16c>)
   1149a:	492b      	ldr	r1, [pc, #172]	; (11548 <ll_adv_params_set+0x170>)
   1149c:	482b      	ldr	r0, [pc, #172]	; (1154c <ll_adv_params_set+0x174>)
   1149e:	f240 1393 	movw	r3, #403	; 0x193
   114a2:	f007 fb8f 	bl	18bc4 <printk>
   114a6:	4040      	eors	r0, r0
   114a8:	f380 8811 	msr	BASEPRI, r0
   114ac:	f04f 0003 	mov.w	r0, #3
   114b0:	df02      	svc	2
			adv->ad_data_backup.len = pdu->len -
   114b2:	7862      	ldrb	r2, [r4, #1]
			memcpy(adv->ad_data_backup.data, pdu->adv_ind.data,
   114b4:	4826      	ldr	r0, [pc, #152]	; (11550 <ll_adv_params_set+0x178>)
			adv->ad_data_backup.len = pdu->len -
   114b6:	3a06      	subs	r2, #6
   114b8:	b2d2      	uxtb	r2, r2
   114ba:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
			memcpy(adv->ad_data_backup.data, pdu->adv_ind.data,
   114be:	4659      	mov	r1, fp
   114c0:	f008 fedd 	bl	1a27e <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   114c4:	7823      	ldrb	r3, [r4, #0]
   114c6:	f003 030f 	and.w	r3, r3, #15
   114ca:	2b01      	cmp	r3, #1
   114cc:	d0d0      	beq.n	11470 <ll_adv_params_set+0x98>
	} else if (pdu->len == 0) {
   114ce:	7862      	ldrb	r2, [r4, #1]
		pdu->tx_addr = own_addr_type & 0x1;
   114d0:	f007 0701 	and.w	r7, r7, #1
	} else if (pdu->len == 0) {
   114d4:	b942      	cbnz	r2, 114e8 <ll_adv_params_set+0x110>
		pdu->tx_addr = own_addr_type & 0x1;
   114d6:	7823      	ldrb	r3, [r4, #0]
   114d8:	f367 1386 	bfi	r3, r7, #6, #1
		pdu->rx_addr = 0;
   114dc:	f362 13c7 	bfi	r3, r2, #7, #1
   114e0:	7023      	strb	r3, [r4, #0]
		pdu->len = BDADDR_SIZE;
   114e2:	2306      	movs	r3, #6
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   114e4:	7063      	strb	r3, [r4, #1]
   114e6:	e013      	b.n	11510 <ll_adv_params_set+0x138>
		if (((pdu_type_prev == PDU_ADV_TYPE_DIRECT_IND) ||
   114e8:	f1b9 0f01 	cmp.w	r9, #1
   114ec:	d10a      	bne.n	11504 <ll_adv_params_set+0x12c>
			memcpy(pdu->adv_ind.data, adv->ad_data_backup.data,
   114ee:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
   114f2:	4917      	ldr	r1, [pc, #92]	; (11550 <ll_adv_params_set+0x178>)
   114f4:	f104 0008 	add.w	r0, r4, #8
   114f8:	f008 fec1 	bl	1a27e <memcpy>
			pdu->len = offsetof(struct pdu_adv_adv_ind, data) +
   114fc:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   11500:	3306      	adds	r3, #6
   11502:	7063      	strb	r3, [r4, #1]
		pdu->tx_addr = own_addr_type & 0x1;
   11504:	7823      	ldrb	r3, [r4, #0]
   11506:	f367 1386 	bfi	r3, r7, #6, #1
		pdu->rx_addr = 0;
   1150a:	f36f 13c7 	bfc	r3, #7, #1
   1150e:	7023      	strb	r3, [r4, #0]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   11510:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
   11514:	eb05 0583 	add.w	r5, r5, r3, lsl #2
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   11518:	f00a 0a40 	and.w	sl, sl, #64	; 0x40
   1151c:	6bab      	ldr	r3, [r5, #56]	; 0x38
		if (pdu->len == 0) {
   1151e:	785a      	ldrb	r2, [r3, #1]
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   11520:	f04a 0a04 	orr.w	sl, sl, #4
   11524:	f883 a000 	strb.w	sl, [r3]
		if (pdu->len == 0) {
   11528:	b912      	cbnz	r2, 11530 <ll_adv_params_set+0x158>
			pdu->len = BDADDR_SIZE;
   1152a:	2106      	movs	r1, #6
   1152c:	7059      	strb	r1, [r3, #1]
	return 0;
   1152e:	4616      	mov	r6, r2
}
   11530:	4630      	mov	r0, r6
   11532:	b003      	add	sp, #12
   11534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   11538:	260c      	movs	r6, #12
   1153a:	e7f9      	b.n	11530 <ll_adv_params_set+0x158>
   1153c:	200026cc 	.word	0x200026cc
   11540:	0001f23e 	.word	0x0001f23e
   11544:	00022afc 	.word	0x00022afc
   11548:	00022bde 	.word	0x00022bde
   1154c:	00020429 	.word	0x00020429
   11550:	2000270d 	.word	0x2000270d

00011554 <ull_adv_reset_finalize>:
{
   11554:	b510      	push	{r4, lr}
		lll_adv_data_reset(&lll->adv_data);
   11556:	4c06      	ldr	r4, [pc, #24]	; (11570 <ull_adv_reset_finalize+0x1c>)
   11558:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1155c:	f00b ffe8 	bl	1d530 <lll_adv_data_reset>
		lll_adv_data_reset(&lll->scan_rsp);
   11560:	f104 0034 	add.w	r0, r4, #52	; 0x34
   11564:	f00b ffe4 	bl	1d530 <lll_adv_data_reset>
}
   11568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = init_reset();
   1156c:	f7ff be86 	b.w	1127c <init_reset>
   11570:	200026cc 	.word	0x200026cc

00011574 <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   11574:	4b03      	ldr	r3, [pc, #12]	; (11584 <ull_adv_handle_get+0x10>)
   11576:	1ac0      	subs	r0, r0, r3
   11578:	236c      	movs	r3, #108	; 0x6c
   1157a:	fbb0 f0f3 	udiv	r0, r0, r3
}
   1157e:	b280      	uxth	r0, r0
   11580:	4770      	bx	lr
   11582:	bf00      	nop
   11584:	200026cc 	.word	0x200026cc

00011588 <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   11588:	6800      	ldr	r0, [r0, #0]
   1158a:	4b03      	ldr	r3, [pc, #12]	; (11598 <ull_adv_lll_handle_get+0x10>)
   1158c:	1ac0      	subs	r0, r0, r3
   1158e:	236c      	movs	r3, #108	; 0x6c
   11590:	fbb0 f0f3 	udiv	r0, r0, r3
}
   11594:	b280      	uxth	r0, r0
   11596:	4770      	bx	lr
   11598:	200026cc 	.word	0x200026cc

0001159c <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   1159c:	b938      	cbnz	r0, 115ae <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
   1159e:	4805      	ldr	r0, [pc, #20]	; (115b4 <ull_adv_is_enabled_get+0x18>)
   115a0:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
	return &ll_adv[handle];
   115a4:	f013 0f01 	tst.w	r3, #1
   115a8:	bf08      	it	eq
   115aa:	2000      	moveq	r0, #0
   115ac:	4770      	bx	lr
		return NULL;
   115ae:	2000      	movs	r0, #0
}
   115b0:	4770      	bx	lr
   115b2:	bf00      	nop
   115b4:	200026cc 	.word	0x200026cc

000115b8 <disable.constprop.0>:
static inline uint8_t disable(uint8_t handle)
   115b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	adv = ull_adv_is_enabled_get(handle);
   115ba:	2000      	movs	r0, #0
   115bc:	f7ff ffee 	bl	1159c <ull_adv_is_enabled_get>
	if (!adv) {
   115c0:	4604      	mov	r4, r0
   115c2:	2800      	cmp	r0, #0
   115c4:	d037      	beq.n	11636 <disable.constprop.0+0x7e>
	if (adv->lll.conn) {
   115c6:	6a03      	ldr	r3, [r0, #32]
   115c8:	bb4b      	cbnz	r3, 1161e <disable.constprop.0+0x66>
	mark = ull_disable_mark(adv);
   115ca:	4620      	mov	r0, r4
   115cc:	f7ff fb22 	bl	10c14 <ull_disable_mark>
	LL_ASSERT(mark == adv);
   115d0:	4284      	cmp	r4, r0
   115d2:	d132      	bne.n	1163a <disable.constprop.0+0x82>
	if (adv->lll.is_hdcd) {
   115d4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   115d8:	07db      	lsls	r3, r3, #31
   115da:	d53c      	bpl.n	11656 <disable.constprop.0+0x9e>
		ret_cb = TICKER_STATUS_BUSY;
   115dc:	2302      	movs	r3, #2
   115de:	9303      	str	r3, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   115e0:	ab03      	add	r3, sp, #12
   115e2:	9300      	str	r3, [sp, #0]
   115e4:	2103      	movs	r1, #3
   115e6:	4b3f      	ldr	r3, [pc, #252]	; (116e4 <disable.constprop.0+0x12c>)
   115e8:	2201      	movs	r2, #1
   115ea:	2000      	movs	r0, #0
   115ec:	f7fd fcee 	bl	efcc <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
   115f0:	a903      	add	r1, sp, #12
   115f2:	f7ff fae9 	bl	10bc8 <ull_ticker_status_take>
		if (ret) {
   115f6:	b370      	cbz	r0, 11656 <disable.constprop.0+0x9e>
			mark = ull_disable_unmark(adv);
   115f8:	4620      	mov	r0, r4
   115fa:	f7ff fb13 	bl	10c24 <ull_disable_unmark>
			LL_ASSERT(mark == adv);
   115fe:	4284      	cmp	r4, r0
   11600:	d018      	beq.n	11634 <disable.constprop.0+0x7c>
   11602:	f640 13ca 	movw	r3, #2506	; 0x9ca
		LL_ASSERT(mark == adv);
   11606:	4a38      	ldr	r2, [pc, #224]	; (116e8 <disable.constprop.0+0x130>)
   11608:	4938      	ldr	r1, [pc, #224]	; (116ec <disable.constprop.0+0x134>)
   1160a:	4839      	ldr	r0, [pc, #228]	; (116f0 <disable.constprop.0+0x138>)
   1160c:	f007 fada 	bl	18bc4 <printk>
   11610:	4040      	eors	r0, r0
   11612:	f380 8811 	msr	BASEPRI, r0
   11616:	f04f 0003 	mov.w	r0, #3
   1161a:	df02      	svc	2
   1161c:	e00a      	b.n	11634 <disable.constprop.0+0x7c>
		adv->lll.conn->periph.cancelled = 1U;
   1161e:	f893 2020 	ldrb.w	r2, [r3, #32]
   11622:	f042 0202 	orr.w	r2, r2, #2
   11626:	f883 2020 	strb.w	r2, [r3, #32]
		if (unlikely(adv->lll.conn->periph.initiated)) {
   1162a:	6a03      	ldr	r3, [r0, #32]
   1162c:	f893 3020 	ldrb.w	r3, [r3, #32]
   11630:	07da      	lsls	r2, r3, #31
   11632:	d5ca      	bpl.n	115ca <disable.constprop.0+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11634:	200c      	movs	r0, #12
}
   11636:	b004      	add	sp, #16
   11638:	bd10      	pop	{r4, pc}
	LL_ASSERT(mark == adv);
   1163a:	4a2b      	ldr	r2, [pc, #172]	; (116e8 <disable.constprop.0+0x130>)
   1163c:	492b      	ldr	r1, [pc, #172]	; (116ec <disable.constprop.0+0x134>)
   1163e:	482c      	ldr	r0, [pc, #176]	; (116f0 <disable.constprop.0+0x138>)
   11640:	f640 13bf 	movw	r3, #2495	; 0x9bf
   11644:	f007 fabe 	bl	18bc4 <printk>
   11648:	4040      	eors	r0, r0
   1164a:	f380 8811 	msr	BASEPRI, r0
   1164e:	f04f 0003 	mov.w	r0, #3
   11652:	df02      	svc	2
   11654:	e7be      	b.n	115d4 <disable.constprop.0+0x1c>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   11656:	ab03      	add	r3, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
   11658:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   1165a:	9300      	str	r3, [sp, #0]
   1165c:	2103      	movs	r1, #3
   1165e:	4b21      	ldr	r3, [pc, #132]	; (116e4 <disable.constprop.0+0x12c>)
	ret_cb = TICKER_STATUS_BUSY;
   11660:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   11662:	2000      	movs	r0, #0
   11664:	f7fd fcb2 	bl	efcc <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   11668:	a903      	add	r1, sp, #12
   1166a:	f7ff faad 	bl	10bc8 <ull_ticker_status_take>
	if (ret) {
   1166e:	b138      	cbz	r0, 11680 <disable.constprop.0+0xc8>
		mark = ull_disable_unmark(adv);
   11670:	4620      	mov	r0, r4
   11672:	f7ff fad7 	bl	10c24 <ull_disable_unmark>
		LL_ASSERT(mark == adv);
   11676:	4284      	cmp	r4, r0
   11678:	d0dc      	beq.n	11634 <disable.constprop.0+0x7c>
   1167a:	f640 13d8 	movw	r3, #2520	; 0x9d8
   1167e:	e7c2      	b.n	11606 <disable.constprop.0+0x4e>
	ret = ull_disable(&adv->lll);
   11680:	f104 001c 	add.w	r0, r4, #28
   11684:	f7ff fafe 	bl	10c84 <ull_disable>
	LL_ASSERT(!ret);
   11688:	b160      	cbz	r0, 116a4 <disable.constprop.0+0xec>
   1168a:	4a17      	ldr	r2, [pc, #92]	; (116e8 <disable.constprop.0+0x130>)
   1168c:	4919      	ldr	r1, [pc, #100]	; (116f4 <disable.constprop.0+0x13c>)
   1168e:	4818      	ldr	r0, [pc, #96]	; (116f0 <disable.constprop.0+0x138>)
   11690:	f640 13de 	movw	r3, #2526	; 0x9de
   11694:	f007 fa96 	bl	18bc4 <printk>
   11698:	4040      	eors	r0, r0
   1169a:	f380 8811 	msr	BASEPRI, r0
   1169e:	f04f 0003 	mov.w	r0, #3
   116a2:	df02      	svc	2
	mark = ull_disable_unmark(adv);
   116a4:	4620      	mov	r0, r4
   116a6:	f7ff fabd 	bl	10c24 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   116aa:	4284      	cmp	r4, r0
   116ac:	d00c      	beq.n	116c8 <disable.constprop.0+0x110>
   116ae:	4a0e      	ldr	r2, [pc, #56]	; (116e8 <disable.constprop.0+0x130>)
   116b0:	490e      	ldr	r1, [pc, #56]	; (116ec <disable.constprop.0+0x134>)
   116b2:	480f      	ldr	r0, [pc, #60]	; (116f0 <disable.constprop.0+0x138>)
   116b4:	f640 13e1 	movw	r3, #2529	; 0x9e1
   116b8:	f007 fa84 	bl	18bc4 <printk>
   116bc:	4040      	eors	r0, r0
   116be:	f380 8811 	msr	BASEPRI, r0
   116c2:	f04f 0003 	mov.w	r0, #3
   116c6:	df02      	svc	2
	if (adv->lll.conn) {
   116c8:	6a23      	ldr	r3, [r4, #32]
   116ca:	b113      	cbz	r3, 116d2 <disable.constprop.0+0x11a>
		conn_release(adv);
   116cc:	4620      	mov	r0, r4
   116ce:	f7ff fd1b 	bl	11108 <conn_release>
	adv->is_enabled = 0U;
   116d2:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   116d6:	f36f 0300 	bfc	r3, #0, #1
   116da:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
	return 0;
   116de:	2000      	movs	r0, #0
   116e0:	e7a9      	b.n	11636 <disable.constprop.0+0x7e>
   116e2:	bf00      	nop
   116e4:	00010411 	.word	0x00010411
   116e8:	00022afc 	.word	0x00022afc
   116ec:	00022c1c 	.word	0x00022c1c
   116f0:	00020429 	.word	0x00020429
   116f4:	00022a65 	.word	0x00022a65

000116f8 <ll_adv_data_set>:
{
   116f8:	460a      	mov	r2, r1
	return ull_adv_data_set(adv, len, data);
   116fa:	4601      	mov	r1, r0
   116fc:	4801      	ldr	r0, [pc, #4]	; (11704 <ll_adv_data_set+0xc>)
   116fe:	f00b bc40 	b.w	1cf82 <ull_adv_data_set>
   11702:	bf00      	nop
   11704:	200026cc 	.word	0x200026cc

00011708 <ll_adv_scan_rsp_set>:
{
   11708:	460a      	mov	r2, r1
	return ull_scan_rsp_set(adv, len, data);
   1170a:	4601      	mov	r1, r0
   1170c:	4801      	ldr	r0, [pc, #4]	; (11714 <ll_adv_scan_rsp_set+0xc>)
   1170e:	f00b bc8b 	b.w	1d028 <ull_scan_rsp_set>
   11712:	bf00      	nop
   11714:	200026cc 	.word	0x200026cc

00011718 <ticker_cb>:
}

static void ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
		      uint32_t remainder, uint16_t lazy, uint8_t force,
		      void *param)
{
   11718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1171a:	461d      	mov	r5, r3
   1171c:	9b07      	ldr	r3, [sp, #28]
	uint8_t ref;

	DEBUG_RADIO_PREPARE_O(1);

	scan = param;
	lll = &scan->lll;
   1171e:	461c      	mov	r4, r3
{
   11720:	4607      	mov	r7, r0
   11722:	f814 1b1c 	ldrb.w	r1, [r4], #28
   11726:	3101      	adds	r1, #1
   11728:	b2c9      	uxtb	r1, r1
   1172a:	4616      	mov	r6, r2
   1172c:	7019      	strb	r1, [r3, #0]

	/* Increment prepare reference count */
	ref = ull_ref_inc(&scan->ull);
	LL_ASSERT(ref);
   1172e:	b961      	cbnz	r1, 1174a <ticker_cb+0x32>
   11730:	4a15      	ldr	r2, [pc, #84]	; (11788 <ticker_cb+0x70>)
   11732:	4916      	ldr	r1, [pc, #88]	; (1178c <ticker_cb+0x74>)
   11734:	4816      	ldr	r0, [pc, #88]	; (11790 <ticker_cb+0x78>)
   11736:	f240 23ab 	movw	r3, #683	; 0x2ab
   1173a:	f007 fa43 	bl	18bc4 <printk>
   1173e:	4040      	eors	r0, r0
   11740:	f380 8811 	msr	BASEPRI, r0
   11744:	f04f 0003 	mov.w	r0, #3
   11748:	df02      	svc	2

	/* Append timing parameters */
	p.ticks_at_expire = ticks_at_expire;
   1174a:	4912      	ldr	r1, [pc, #72]	; (11794 <ticker_cb+0x7c>)
	p.remainder = remainder;
	p.lazy = lazy;
	p.param = lll;
	p.force = force;
   1174c:	f89d 3018 	ldrb.w	r3, [sp, #24]
   11750:	728b      	strb	r3, [r1, #10]
	mfy.param = &p;
   11752:	4b11      	ldr	r3, [pc, #68]	; (11798 <ticker_cb+0x80>)
	p.lazy = lazy;
   11754:	810d      	strh	r5, [r1, #8]

	/* Kick LLL prepare */
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   11756:	2200      	movs	r2, #0
	p.remainder = remainder;
   11758:	e9c1 7600 	strd	r7, r6, [r1]
	p.param = lll;
   1175c:	60cc      	str	r4, [r1, #12]
	mfy.param = &p;
   1175e:	6099      	str	r1, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   11760:	2001      	movs	r0, #1
   11762:	4611      	mov	r1, r2
   11764:	f7fc fe6c 	bl	e440 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   11768:	b160      	cbz	r0, 11784 <ticker_cb+0x6c>
   1176a:	4a07      	ldr	r2, [pc, #28]	; (11788 <ticker_cb+0x70>)
   1176c:	490b      	ldr	r1, [pc, #44]	; (1179c <ticker_cb+0x84>)
   1176e:	4808      	ldr	r0, [pc, #32]	; (11790 <ticker_cb+0x78>)
   11770:	f44f 732e 	mov.w	r3, #696	; 0x2b8
   11774:	f007 fa26 	bl	18bc4 <printk>
   11778:	4040      	eors	r0, r0
   1177a:	f380 8811 	msr	BASEPRI, r0
   1177e:	f04f 0003 	mov.w	r0, #3
   11782:	df02      	svc	2
			  (ret == TICKER_STATUS_BUSY));
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	DEBUG_RADIO_PREPARE_O(1);
}
   11784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11786:	bf00      	nop
   11788:	00022c38 	.word	0x00022c38
   1178c:	00022bda 	.word	0x00022bda
   11790:	00020429 	.word	0x00020429
   11794:	20002790 	.word	0x20002790
   11798:	20000864 	.word	0x20000864
   1179c:	00022a65 	.word	0x00022a65

000117a0 <ull_scan_disable>:
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
   117a0:	3004      	adds	r0, #4
{
   117a2:	b508      	push	{r3, lr}
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
   117a4:	f101 021c 	add.w	r2, r1, #28
   117a8:	b2c0      	uxtb	r0, r0
   117aa:	f7ff faa9 	bl	10d00 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   117ae:	b178      	cbz	r0, 117d0 <ull_scan_disable+0x30>
   117b0:	3078      	adds	r0, #120	; 0x78
   117b2:	d00c      	beq.n	117ce <ull_scan_disable+0x2e>
   117b4:	4a07      	ldr	r2, [pc, #28]	; (117d4 <ull_scan_disable+0x34>)
   117b6:	4908      	ldr	r1, [pc, #32]	; (117d8 <ull_scan_disable+0x38>)
   117b8:	4808      	ldr	r0, [pc, #32]	; (117dc <ull_scan_disable+0x3c>)
   117ba:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
   117be:	f007 fa01 	bl	18bc4 <printk>
   117c2:	4040      	eors	r0, r0
   117c4:	f380 8811 	msr	BASEPRI, r0
   117c8:	f04f 0003 	mov.w	r0, #3
   117cc:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
   117ce:	200c      	movs	r0, #12
}
   117d0:	bd08      	pop	{r3, pc}
   117d2:	bf00      	nop
   117d4:	00022c38 	.word	0x00022c38
   117d8:	00022c78 	.word	0x00022c78
   117dc:	00020429 	.word	0x00020429

000117e0 <ull_scan_lll_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   117e0:	6800      	ldr	r0, [r0, #0]
   117e2:	4b03      	ldr	r3, [pc, #12]	; (117f0 <ull_scan_lll_handle_get+0x10>)
   117e4:	1ac0      	subs	r0, r0, r3
   117e6:	2334      	movs	r3, #52	; 0x34
   117e8:	fbb0 f0f3 	udiv	r0, r0, r3
}
   117ec:	b2c0      	uxtb	r0, r0
   117ee:	4770      	bx	lr
   117f0:	2000275c 	.word	0x2000275c

000117f4 <ull_scan_is_enabled_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
   117f4:	b938      	cbnz	r0, 11806 <ull_scan_is_enabled_get+0x12>
	if (!scan || !scan->is_enabled) {
   117f6:	4805      	ldr	r0, [pc, #20]	; (1180c <ull_scan_is_enabled_get+0x18>)
   117f8:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
	return &ll_scan[handle];
   117fc:	f013 0f01 	tst.w	r3, #1
   11800:	bf08      	it	eq
   11802:	2000      	moveq	r0, #0
   11804:	4770      	bx	lr
		return NULL;
   11806:	2000      	movs	r0, #0
}
   11808:	4770      	bx	lr
   1180a:	bf00      	nop
   1180c:	2000275c 	.word	0x2000275c

00011810 <ull_scan_is_disabled_get>:
	if (!scan || scan->is_enabled) {
   11810:	4a04      	ldr	r2, [pc, #16]	; (11824 <ull_scan_is_disabled_get+0x14>)
   11812:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
   11816:	f003 0301 	and.w	r3, r3, #1
		return NULL;
   1181a:	4303      	orrs	r3, r0
}
   1181c:	bf0c      	ite	eq
   1181e:	4610      	moveq	r0, r2
   11820:	2000      	movne	r0, #0
   11822:	4770      	bx	lr
   11824:	2000275c 	.word	0x2000275c

00011828 <cpr_active_check_and_set>:
	if (!conn_upd_curr) {
   11828:	4b02      	ldr	r3, [pc, #8]	; (11834 <cpr_active_check_and_set+0xc>)
   1182a:	681a      	ldr	r2, [r3, #0]
   1182c:	b902      	cbnz	r2, 11830 <cpr_active_check_and_set+0x8>
		conn_upd_curr = conn;
   1182e:	6018      	str	r0, [r3, #0]
}
   11830:	4770      	bx	lr
   11832:	bf00      	nop
   11834:	200027a4 	.word	0x200027a4

00011838 <ctrl_tx_rsp_mem_acquire>:
{
   11838:	b538      	push	{r3, r4, r5, lr}
	if (conn->common.txn_lock) {
   1183a:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
   1183e:	079b      	lsls	r3, r3, #30
{
   11840:	4604      	mov	r4, r0
   11842:	4615      	mov	r5, r2
	if (conn->common.txn_lock) {
   11844:	d504      	bpl.n	11850 <ctrl_tx_rsp_mem_acquire+0x18>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   11846:	2301      	movs	r3, #1
		*err = 0U;
   11848:	2000      	movs	r0, #0
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1184a:	710b      	strb	r3, [r1, #4]
		*err = 0U;
   1184c:	6010      	str	r0, [r2, #0]
}
   1184e:	bd38      	pop	{r3, r4, r5, pc}
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   11850:	4807      	ldr	r0, [pc, #28]	; (11870 <ctrl_tx_rsp_mem_acquire+0x38>)
   11852:	f00a ff85 	bl	1c760 <mem_acquire>
	if (!tx) {
   11856:	b918      	cbnz	r0, 11860 <ctrl_tx_rsp_mem_acquire+0x28>
		*err = -ENOBUFS;
   11858:	f06f 0368 	mvn.w	r3, #104	; 0x68
   1185c:	602b      	str	r3, [r5, #0]
		return NULL;
   1185e:	e7f6      	b.n	1184e <ctrl_tx_rsp_mem_acquire+0x16>
	conn->common.txn_lock = 1U;
   11860:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   11864:	f043 0302 	orr.w	r3, r3, #2
   11868:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
	return tx;
   1186c:	e7ef      	b.n	1184e <ctrl_tx_rsp_mem_acquire+0x16>
   1186e:	bf00      	nop
   11870:	2000285c 	.word	0x2000285c

00011874 <init_reset>:
{
   11874:	b508      	push	{r3, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   11876:	480d      	ldr	r0, [pc, #52]	; (118ac <init_reset+0x38>)
   11878:	4b0d      	ldr	r3, [pc, #52]	; (118b0 <init_reset+0x3c>)
   1187a:	2201      	movs	r2, #1
   1187c:	f44f 719c 	mov.w	r1, #312	; 0x138
   11880:	f00a ff46 	bl	1c710 <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_BUF_ACL_TX_COUNT,
   11884:	4b0b      	ldr	r3, [pc, #44]	; (118b4 <init_reset+0x40>)
   11886:	2204      	movs	r2, #4
   11888:	1898      	adds	r0, r3, r2
   1188a:	2124      	movs	r1, #36	; 0x24
   1188c:	f00a ff40 	bl	1c710 <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   11890:	4b09      	ldr	r3, [pc, #36]	; (118b8 <init_reset+0x44>)
   11892:	2204      	movs	r2, #4
   11894:	1898      	adds	r0, r3, r2
   11896:	212c      	movs	r1, #44	; 0x2c
   11898:	f00a ff3a 	bl	1c710 <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   1189c:	4b07      	ldr	r3, [pc, #28]	; (118bc <init_reset+0x48>)
   1189e:	2208      	movs	r2, #8
   118a0:	1d18      	adds	r0, r3, #4
   118a2:	4611      	mov	r1, r2
   118a4:	f00a ff34 	bl	1c710 <mem_init>
}
   118a8:	2000      	movs	r0, #0
   118aa:	bd08      	pop	{r3, pc}
   118ac:	200015b8 	.word	0x200015b8
   118b0:	200027a0 	.word	0x200027a0
   118b4:	200027c8 	.word	0x200027c8
   118b8:	2000285c 	.word	0x2000285c
   118bc:	20002910 	.word	0x20002910

000118c0 <ticker_stop_op_cb>:
{
   118c0:	b510      	push	{r4, lr}
   118c2:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   118c4:	b160      	cbz	r0, 118e0 <ticker_stop_op_cb+0x20>
   118c6:	4a11      	ldr	r2, [pc, #68]	; (1190c <ticker_stop_op_cb+0x4c>)
   118c8:	4911      	ldr	r1, [pc, #68]	; (11910 <ticker_stop_op_cb+0x50>)
   118ca:	4812      	ldr	r0, [pc, #72]	; (11914 <ticker_stop_op_cb+0x54>)
   118cc:	f640 0316 	movw	r3, #2070	; 0x816
   118d0:	f007 f978 	bl	18bc4 <printk>
   118d4:	4040      	eors	r0, r0
   118d6:	f380 8811 	msr	BASEPRI, r0
   118da:	f04f 0003 	mov.w	r0, #3
   118de:	df02      	svc	2
	mfy.param = param;
   118e0:	4b0d      	ldr	r3, [pc, #52]	; (11918 <ticker_stop_op_cb+0x58>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   118e2:	2200      	movs	r2, #0
   118e4:	2101      	movs	r1, #1
   118e6:	2002      	movs	r0, #2
	mfy.param = param;
   118e8:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   118ea:	f7fc fda9 	bl	e440 <mayfly_enqueue>
	LL_ASSERT(!ret);
   118ee:	b160      	cbz	r0, 1190a <ticker_stop_op_cb+0x4a>
   118f0:	4a06      	ldr	r2, [pc, #24]	; (1190c <ticker_stop_op_cb+0x4c>)
   118f2:	490a      	ldr	r1, [pc, #40]	; (1191c <ticker_stop_op_cb+0x5c>)
   118f4:	4807      	ldr	r0, [pc, #28]	; (11914 <ticker_stop_op_cb+0x54>)
   118f6:	f640 031c 	movw	r3, #2076	; 0x81c
   118fa:	f007 f963 	bl	18bc4 <printk>
   118fe:	4040      	eors	r0, r0
   11900:	f380 8811 	msr	BASEPRI, r0
   11904:	f04f 0003 	mov.w	r0, #3
   11908:	df02      	svc	2
}
   1190a:	bd10      	pop	{r4, pc}
   1190c:	00022ca1 	.word	0x00022ca1
   11910:	00022e7a 	.word	0x00022e7a
   11914:	00020429 	.word	0x00020429
   11918:	2000090c 	.word	0x2000090c
   1191c:	00022a65 	.word	0x00022a65

00011920 <disabled_cb>:
{
   11920:	b508      	push	{r3, lr}
	mfy.param = param;
   11922:	4b0b      	ldr	r3, [pc, #44]	; (11950 <disabled_cb+0x30>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   11924:	2200      	movs	r2, #0
	mfy.param = param;
   11926:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   11928:	4611      	mov	r1, r2
   1192a:	2001      	movs	r0, #1
   1192c:	f7fc fd88 	bl	e440 <mayfly_enqueue>
	LL_ASSERT(!ret);
   11930:	b160      	cbz	r0, 1194c <disabled_cb+0x2c>
   11932:	4a08      	ldr	r2, [pc, #32]	; (11954 <disabled_cb+0x34>)
   11934:	4908      	ldr	r1, [pc, #32]	; (11958 <disabled_cb+0x38>)
   11936:	4809      	ldr	r0, [pc, #36]	; (1195c <disabled_cb+0x3c>)
   11938:	f640 0348 	movw	r3, #2120	; 0x848
   1193c:	f007 f942 	bl	18bc4 <printk>
   11940:	4040      	eors	r0, r0
   11942:	f380 8811 	msr	BASEPRI, r0
   11946:	f04f 0003 	mov.w	r0, #3
   1194a:	df02      	svc	2
}
   1194c:	bd08      	pop	{r3, pc}
   1194e:	bf00      	nop
   11950:	200008ec 	.word	0x200008ec
   11954:	00022ca1 	.word	0x00022ca1
   11958:	00022a65 	.word	0x00022a65
   1195c:	00020429 	.word	0x00020429

00011960 <conn_disable>:
{
   11960:	b538      	push	{r3, r4, r5, lr}
   11962:	4604      	mov	r4, r0
	return hdr->ref;
   11964:	f810 3b1c 	ldrb.w	r3, [r0], #28
	if (ull_ref_get(hdr)) {
   11968:	b34b      	cbz	r3, 119be <conn_disable+0x5e>
		mfy.param = &conn->lll;
   1196a:	4d17      	ldr	r5, [pc, #92]	; (119c8 <conn_disable+0x68>)
		LL_ASSERT(!hdr->disabled_cb);
   1196c:	6963      	ldr	r3, [r4, #20]
		mfy.param = &conn->lll;
   1196e:	60a8      	str	r0, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
   11970:	b163      	cbz	r3, 1198c <conn_disable+0x2c>
   11972:	4a16      	ldr	r2, [pc, #88]	; (119cc <conn_disable+0x6c>)
   11974:	4916      	ldr	r1, [pc, #88]	; (119d0 <conn_disable+0x70>)
   11976:	4817      	ldr	r0, [pc, #92]	; (119d4 <conn_disable+0x74>)
   11978:	f640 0331 	movw	r3, #2097	; 0x831
   1197c:	f007 f922 	bl	18bc4 <printk>
   11980:	4040      	eors	r0, r0
   11982:	f380 8811 	msr	BASEPRI, r0
   11986:	f04f 0003 	mov.w	r0, #3
   1198a:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   1198c:	68ab      	ldr	r3, [r5, #8]
   1198e:	61a3      	str	r3, [r4, #24]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   11990:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   11992:	4b11      	ldr	r3, [pc, #68]	; (119d8 <conn_disable+0x78>)
   11994:	6163      	str	r3, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   11996:	4611      	mov	r1, r2
   11998:	4b0b      	ldr	r3, [pc, #44]	; (119c8 <conn_disable+0x68>)
   1199a:	2001      	movs	r0, #1
   1199c:	f7fc fd50 	bl	e440 <mayfly_enqueue>
		LL_ASSERT(!ret);
   119a0:	b160      	cbz	r0, 119bc <conn_disable+0x5c>
   119a2:	4a0a      	ldr	r2, [pc, #40]	; (119cc <conn_disable+0x6c>)
   119a4:	490d      	ldr	r1, [pc, #52]	; (119dc <conn_disable+0x7c>)
   119a6:	480b      	ldr	r0, [pc, #44]	; (119d4 <conn_disable+0x74>)
   119a8:	f640 0338 	movw	r3, #2104	; 0x838
   119ac:	f007 f90a 	bl	18bc4 <printk>
   119b0:	4040      	eors	r0, r0
   119b2:	f380 8811 	msr	BASEPRI, r0
   119b6:	f04f 0003 	mov.w	r0, #3
   119ba:	df02      	svc	2
}
   119bc:	bd38      	pop	{r3, r4, r5, pc}
   119be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&conn->lll);
   119c2:	f7ff bfad 	b.w	11920 <disabled_cb>
   119c6:	bf00      	nop
   119c8:	200008fc 	.word	0x200008fc
   119cc:	00022ca1 	.word	0x00022ca1
   119d0:	00022b99 	.word	0x00022b99
   119d4:	00020429 	.word	0x00020429
   119d8:	00011921 	.word	0x00011921
   119dc:	00022a65 	.word	0x00022a65

000119e0 <conn_setup_adv_scan_disabled_cb>:
{
   119e0:	b508      	push	{r3, lr}
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   119e2:	6883      	ldr	r3, [r0, #8]
   119e4:	685a      	ldr	r2, [r3, #4]
	switch (lll->role) {
   119e6:	7f53      	ldrb	r3, [r2, #29]
   119e8:	09db      	lsrs	r3, r3, #7
{
   119ea:	4601      	mov	r1, r0
	switch (lll->role) {
   119ec:	d004      	beq.n	119f8 <conn_setup_adv_scan_disabled_cb+0x18>
}
   119ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		ull_periph_setup(rx, ftr, lll);
   119f2:	3108      	adds	r1, #8
   119f4:	f7ef bd20 	b.w	1438 <ull_periph_setup>
		LL_ASSERT(0);
   119f8:	4a06      	ldr	r2, [pc, #24]	; (11a14 <conn_setup_adv_scan_disabled_cb+0x34>)
   119fa:	4907      	ldr	r1, [pc, #28]	; (11a18 <conn_setup_adv_scan_disabled_cb+0x38>)
   119fc:	4807      	ldr	r0, [pc, #28]	; (11a1c <conn_setup_adv_scan_disabled_cb+0x3c>)
   119fe:	f240 7391 	movw	r3, #1937	; 0x791
   11a02:	f007 f8df 	bl	18bc4 <printk>
   11a06:	4040      	eors	r0, r0
   11a08:	f380 8811 	msr	BASEPRI, r0
   11a0c:	f04f 0003 	mov.w	r0, #3
   11a10:	df02      	svc	2
}
   11a12:	bd08      	pop	{r3, pc}
   11a14:	00022ca1 	.word	0x00022ca1
   11a18:	000218fc 	.word	0x000218fc
   11a1c:	00020429 	.word	0x00020429

00011a20 <ticker_start_conn_op_cb>:
{
   11a20:	b510      	push	{r4, lr}
   11a22:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   11a24:	b160      	cbz	r0, 11a40 <ticker_start_conn_op_cb+0x20>
   11a26:	4a10      	ldr	r2, [pc, #64]	; (11a68 <ticker_start_conn_op_cb+0x48>)
   11a28:	4910      	ldr	r1, [pc, #64]	; (11a6c <ticker_start_conn_op_cb+0x4c>)
   11a2a:	4811      	ldr	r0, [pc, #68]	; (11a70 <ticker_start_conn_op_cb+0x50>)
   11a2c:	f44f 63ee 	mov.w	r3, #1904	; 0x770
   11a30:	f007 f8c8 	bl	18bc4 <printk>
   11a34:	4040      	eors	r0, r0
   11a36:	f380 8811 	msr	BASEPRI, r0
   11a3a:	f04f 0003 	mov.w	r0, #3
   11a3e:	df02      	svc	2
	p = ull_update_unmark(param);
   11a40:	4620      	mov	r0, r4
   11a42:	f7ff f90b 	bl	10c5c <ull_update_unmark>
	LL_ASSERT(p == param);
   11a46:	4284      	cmp	r4, r0
   11a48:	d00c      	beq.n	11a64 <ticker_start_conn_op_cb+0x44>
   11a4a:	4a07      	ldr	r2, [pc, #28]	; (11a68 <ticker_start_conn_op_cb+0x48>)
   11a4c:	4909      	ldr	r1, [pc, #36]	; (11a74 <ticker_start_conn_op_cb+0x54>)
   11a4e:	4808      	ldr	r0, [pc, #32]	; (11a70 <ticker_start_conn_op_cb+0x50>)
   11a50:	f240 7373 	movw	r3, #1907	; 0x773
   11a54:	f007 f8b6 	bl	18bc4 <printk>
   11a58:	4040      	eors	r0, r0
   11a5a:	f380 8811 	msr	BASEPRI, r0
   11a5e:	f04f 0003 	mov.w	r0, #3
   11a62:	df02      	svc	2
}
   11a64:	bd10      	pop	{r4, pc}
   11a66:	bf00      	nop
   11a68:	00022ca1 	.word	0x00022ca1
   11a6c:	00022e7a 	.word	0x00022e7a
   11a70:	00020429 	.word	0x00020429
   11a74:	00022ce1 	.word	0x00022ce1

00011a78 <ticker_stop_conn_op_cb>:
{
   11a78:	b510      	push	{r4, lr}
   11a7a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   11a7c:	b160      	cbz	r0, 11a98 <ticker_stop_conn_op_cb+0x20>
   11a7e:	4a10      	ldr	r2, [pc, #64]	; (11ac0 <ticker_stop_conn_op_cb+0x48>)
   11a80:	4910      	ldr	r1, [pc, #64]	; (11ac4 <ticker_stop_conn_op_cb+0x4c>)
   11a82:	4811      	ldr	r0, [pc, #68]	; (11ac8 <ticker_stop_conn_op_cb+0x50>)
   11a84:	f240 7366 	movw	r3, #1894	; 0x766
   11a88:	f007 f89c 	bl	18bc4 <printk>
   11a8c:	4040      	eors	r0, r0
   11a8e:	f380 8811 	msr	BASEPRI, r0
   11a92:	f04f 0003 	mov.w	r0, #3
   11a96:	df02      	svc	2
	p = ull_update_mark(param);
   11a98:	4620      	mov	r0, r4
   11a9a:	f7ff f8d7 	bl	10c4c <ull_update_mark>
	LL_ASSERT(p == param);
   11a9e:	4284      	cmp	r4, r0
   11aa0:	d00c      	beq.n	11abc <ticker_stop_conn_op_cb+0x44>
   11aa2:	4a07      	ldr	r2, [pc, #28]	; (11ac0 <ticker_stop_conn_op_cb+0x48>)
   11aa4:	4909      	ldr	r1, [pc, #36]	; (11acc <ticker_stop_conn_op_cb+0x54>)
   11aa6:	4808      	ldr	r0, [pc, #32]	; (11ac8 <ticker_stop_conn_op_cb+0x50>)
   11aa8:	f240 7369 	movw	r3, #1897	; 0x769
   11aac:	f007 f88a 	bl	18bc4 <printk>
   11ab0:	4040      	eors	r0, r0
   11ab2:	f380 8811 	msr	BASEPRI, r0
   11ab6:	f04f 0003 	mov.w	r0, #3
   11aba:	df02      	svc	2
}
   11abc:	bd10      	pop	{r4, pc}
   11abe:	bf00      	nop
   11ac0:	00022ca1 	.word	0x00022ca1
   11ac4:	00022e7a 	.word	0x00022e7a
   11ac8:	00020429 	.word	0x00020429
   11acc:	00022ce1 	.word	0x00022ce1

00011ad0 <ticker_update_conn_op_cb>:
{
   11ad0:	b510      	push	{r4, lr}
   11ad2:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   11ad4:	b1a0      	cbz	r0, 11b00 <ticker_update_conn_op_cb+0x30>
   11ad6:	f7ff f8cf 	bl	10c78 <ull_update_mark_get>
   11ada:	4284      	cmp	r4, r0
   11adc:	d010      	beq.n	11b00 <ticker_update_conn_op_cb+0x30>
   11ade:	f7ff f8af 	bl	10c40 <ull_disable_mark_get>
   11ae2:	4284      	cmp	r4, r0
   11ae4:	d00c      	beq.n	11b00 <ticker_update_conn_op_cb+0x30>
   11ae6:	4a07      	ldr	r2, [pc, #28]	; (11b04 <ticker_update_conn_op_cb+0x34>)
   11ae8:	4907      	ldr	r1, [pc, #28]	; (11b08 <ticker_update_conn_op_cb+0x38>)
   11aea:	4808      	ldr	r0, [pc, #32]	; (11b0c <ticker_update_conn_op_cb+0x3c>)
   11aec:	f240 735d 	movw	r3, #1885	; 0x75d
   11af0:	f007 f868 	bl	18bc4 <printk>
   11af4:	4040      	eors	r0, r0
   11af6:	f380 8811 	msr	BASEPRI, r0
   11afa:	f04f 0003 	mov.w	r0, #3
   11afe:	df02      	svc	2
}
   11b00:	bd10      	pop	{r4, pc}
   11b02:	bf00      	nop
   11b04:	00022ca1 	.word	0x00022ca1
   11b08:	00022cec 	.word	0x00022cec
   11b0c:	00020429 	.word	0x00020429

00011b10 <feat_get>:
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   11b10:	6803      	ldr	r3, [r0, #0]
   11b12:	6841      	ldr	r1, [r0, #4]

	feat = sys_get_le64(features) | ~LL_FEAT_BIT_MASK_VALID;
	feat &= LL_FEAT_BIT_MASK;

	return feat;
}
   11b14:	4802      	ldr	r0, [pc, #8]	; (11b20 <feat_get+0x10>)
   11b16:	f001 010f 	and.w	r1, r1, #15
   11b1a:	4318      	orrs	r0, r3
   11b1c:	4770      	bx	lr
   11b1e:	bf00      	nop
   11b20:	087830d0 	.word	0x087830d0

00011b24 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   11b24:	4801      	ldr	r0, [pc, #4]	; (11b2c <ll_conn_acquire+0x8>)
   11b26:	f00a be1b 	b.w	1c760 <mem_acquire>
   11b2a:	bf00      	nop
   11b2c:	200027a0 	.word	0x200027a0

00011b30 <ll_conn_release>:
	mem_release(conn, &conn_free);
   11b30:	4901      	ldr	r1, [pc, #4]	; (11b38 <ll_conn_release+0x8>)
   11b32:	f00a be2e 	b.w	1c792 <mem_release>
   11b36:	bf00      	nop
   11b38:	200027a0 	.word	0x200027a0

00011b3c <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   11b3c:	4902      	ldr	r1, [pc, #8]	; (11b48 <ll_conn_handle_get+0xc>)
   11b3e:	f44f 729c 	mov.w	r2, #312	; 0x138
   11b42:	f00a be3e 	b.w	1c7c2 <mem_index_get>
   11b46:	bf00      	nop
   11b48:	200015b8 	.word	0x200015b8

00011b4c <tx_lll_flush>:
{
   11b4c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	conn = HDR_LLL2ULL(lll);
   11b50:	6804      	ldr	r4, [r0, #0]
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   11b52:	4e30      	ldr	r6, [pc, #192]	; (11c14 <tx_lll_flush+0xc8>)
{
   11b54:	4605      	mov	r5, r0
	handle = ll_conn_handle_get(conn);
   11b56:	4620      	mov	r0, r4
   11b58:	f7ff fff0 	bl	11b3c <ll_conn_handle_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   11b5c:	f105 083c 	add.w	r8, r5, #60	; 0x3c
	lll_conn_flush(handle, lll);
   11b60:	4629      	mov	r1, r5
   11b62:	f00b fe49 	bl	1d7f8 <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   11b66:	6c28      	ldr	r0, [r5, #64]	; 0x40
   11b68:	aa01      	add	r2, sp, #4
   11b6a:	4641      	mov	r1, r8
   11b6c:	f00a fe65 	bl	1c83a <memq_dequeue>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   11b70:	1d37      	adds	r7, r6, #4
	while (link) {
   11b72:	b9f0      	cbnz	r0, 11bb2 <tx_lll_flush+0x66>
	LL_ASSERT(rx->hdr.link);
   11b74:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
	rx = (void *)&conn->llcp_terminate.node_rx;
   11b78:	f104 05d4 	add.w	r5, r4, #212	; 0xd4
	LL_ASSERT(rx->hdr.link);
   11b7c:	b963      	cbnz	r3, 11b98 <tx_lll_flush+0x4c>
   11b7e:	4a26      	ldr	r2, [pc, #152]	; (11c18 <tx_lll_flush+0xcc>)
   11b80:	4926      	ldr	r1, [pc, #152]	; (11c1c <tx_lll_flush+0xd0>)
   11b82:	4827      	ldr	r0, [pc, #156]	; (11c20 <tx_lll_flush+0xd4>)
   11b84:	f640 0376 	movw	r3, #2166	; 0x876
   11b88:	f007 f81c 	bl	18bc4 <printk>
   11b8c:	4040      	eors	r0, r0
   11b8e:	f380 8811 	msr	BASEPRI, r0
   11b92:	f04f 0003 	mov.w	r0, #3
   11b96:	df02      	svc	2
	rx->hdr.link = NULL;
   11b98:	2300      	movs	r3, #0
	link = rx->hdr.link;
   11b9a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
	rx->hdr.link = NULL;
   11b9e:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
	ull_rx_put(link, rx);
   11ba2:	4629      	mov	r1, r5
   11ba4:	f7ff f90e 	bl	10dc4 <ull_rx_put>
	ull_rx_sched();
   11ba8:	f7ff f91c 	bl	10de4 <ull_rx_sched>
}
   11bac:	b002      	add	sp, #8
   11bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   11bb2:	78f3      	ldrb	r3, [r6, #3]
	if (last == count) {
   11bb4:	f896 e001 	ldrb.w	lr, [r6, #1]
   11bb8:	f896 c002 	ldrb.w	ip, [r6, #2]
   11bbc:	7832      	ldrb	r2, [r6, #0]
	last = last + 1;
   11bbe:	1c59      	adds	r1, r3, #1
   11bc0:	b2c9      	uxtb	r1, r1
		last = 0U;
   11bc2:	458e      	cmp	lr, r1
   11bc4:	bf08      	it	eq
   11bc6:	2100      	moveq	r1, #0
	if (last == first) {
   11bc8:	458c      	cmp	ip, r1
   11bca:	d003      	beq.n	11bd4 <tx_lll_flush+0x88>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   11bcc:	fb13 f302 	smulbb	r3, r3, r2
		LL_ASSERT(lll_tx);
   11bd0:	18fa      	adds	r2, r7, r3
   11bd2:	d10f      	bne.n	11bf4 <tx_lll_flush+0xa8>
   11bd4:	4a10      	ldr	r2, [pc, #64]	; (11c18 <tx_lll_flush+0xcc>)
   11bd6:	4913      	ldr	r1, [pc, #76]	; (11c24 <tx_lll_flush+0xd8>)
   11bd8:	4811      	ldr	r0, [pc, #68]	; (11c20 <tx_lll_flush+0xd4>)
   11bda:	f640 0362 	movw	r3, #2146	; 0x862
   11bde:	f006 fff1 	bl	18bc4 <printk>
   11be2:	4040      	eors	r0, r0
   11be4:	f380 8811 	msr	BASEPRI, r0
   11be8:	f04f 0003 	mov.w	r0, #3
   11bec:	df02      	svc	2
		lll_tx->handle = LLL_HANDLE_INVALID;
   11bee:	2300      	movs	r3, #0
   11bf0:	801b      	strh	r3, [r3, #0]
   11bf2:	deff      	udf	#255	; 0xff
   11bf4:	f64f 7cff 	movw	ip, #65535	; 0xffff
   11bf8:	f827 c003 	strh.w	ip, [r7, r3]
		lll_tx->node = tx;
   11bfc:	9b01      	ldr	r3, [sp, #4]
   11bfe:	6053      	str	r3, [r2, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   11c00:	681a      	ldr	r2, [r3, #0]
   11c02:	6002      	str	r2, [r0, #0]
		tx->next = link;
   11c04:	6018      	str	r0, [r3, #0]
	*last = idx; /* Commit: Update write index */
   11c06:	70f1      	strb	r1, [r6, #3]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   11c08:	6c28      	ldr	r0, [r5, #64]	; 0x40
   11c0a:	aa01      	add	r2, sp, #4
   11c0c:	4641      	mov	r1, r8
   11c0e:	f00a fe14 	bl	1c83a <memq_dequeue>
   11c12:	e7ae      	b.n	11b72 <tx_lll_flush+0x26>
   11c14:	20000874 	.word	0x20000874
   11c18:	00022ca1 	.word	0x00022ca1
   11c1c:	00022d71 	.word	0x00022d71
   11c20:	00020429 	.word	0x00020429
   11c24:	00022d3d 	.word	0x00022d3d

00011c28 <ll_conn_get>:
{
   11c28:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   11c2a:	f44f 719c 	mov.w	r1, #312	; 0x138
   11c2e:	4801      	ldr	r0, [pc, #4]	; (11c34 <ll_conn_get+0xc>)
   11c30:	f00a bdc4 	b.w	1c7bc <mem_get>
   11c34:	200015b8 	.word	0x200015b8

00011c38 <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   11c38:	4801      	ldr	r0, [pc, #4]	; (11c40 <ll_tx_mem_acquire+0x8>)
   11c3a:	f00a bd91 	b.w	1c760 <mem_acquire>
   11c3e:	bf00      	nop
   11c40:	200027c8 	.word	0x200027c8

00011c44 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   11c44:	4901      	ldr	r1, [pc, #4]	; (11c4c <ll_tx_mem_release+0x8>)
   11c46:	f00a bda4 	b.w	1c792 <mem_release>
   11c4a:	bf00      	nop
   11c4c:	200027c8 	.word	0x200027c8

00011c50 <ll_tx_mem_enqueue>:
{
   11c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11c52:	4606      	mov	r6, r0
   11c54:	460f      	mov	r7, r1
	conn = ll_connected_get(handle);
   11c56:	f00b fad6 	bl	1d206 <ll_connected_get>
	if (!conn) {
   11c5a:	4604      	mov	r4, r0
   11c5c:	b338      	cbz	r0, 11cae <ll_tx_mem_enqueue+0x5e>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   11c5e:	4a17      	ldr	r2, [pc, #92]	; (11cbc <ll_tx_mem_enqueue+0x6c>)
   11c60:	78d5      	ldrb	r5, [r2, #3]
	if (last == count) {
   11c62:	f892 c001 	ldrb.w	ip, [r2, #1]
   11c66:	7891      	ldrb	r1, [r2, #2]
   11c68:	7810      	ldrb	r0, [r2, #0]
	last = last + 1;
   11c6a:	1c6b      	adds	r3, r5, #1
   11c6c:	b2db      	uxtb	r3, r3
		last = 0U;
   11c6e:	459c      	cmp	ip, r3
   11c70:	bf08      	it	eq
   11c72:	2300      	moveq	r3, #0
	if (last == first) {
   11c74:	4299      	cmp	r1, r3
   11c76:	d01d      	beq.n	11cb4 <ll_tx_mem_enqueue+0x64>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   11c78:	1d11      	adds	r1, r2, #4
   11c7a:	fb15 f500 	smulbb	r5, r5, r0
	if (!lll_tx) {
   11c7e:	1948      	adds	r0, r1, r5
   11c80:	d018      	beq.n	11cb4 <ll_tx_mem_enqueue+0x64>
	lll_tx->handle = handle;
   11c82:	534e      	strh	r6, [r1, r5]
	lll_tx->node = tx;
   11c84:	6047      	str	r7, [r0, #4]
	*last = idx; /* Commit: Update write index */
   11c86:	70d3      	strb	r3, [r2, #3]
   11c88:	7823      	ldrb	r3, [r4, #0]
	if (ull_ref_get(&conn->ull)) {
   11c8a:	b133      	cbz	r3, 11c9a <ll_tx_mem_enqueue+0x4a>
		mfy.param = conn;
   11c8c:	4b0c      	ldr	r3, [pc, #48]	; (11cc0 <ll_tx_mem_enqueue+0x70>)
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   11c8e:	2200      	movs	r2, #0
   11c90:	2101      	movs	r1, #1
   11c92:	2003      	movs	r0, #3
		mfy.param = conn;
   11c94:	609c      	str	r4, [r3, #8]
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   11c96:	f7fc fbd3 	bl	e440 <mayfly_enqueue>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   11c9a:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   11c9e:	2b00      	cmp	r3, #0
   11ca0:	da03      	bge.n	11caa <ll_tx_mem_enqueue+0x5a>
		ull_periph_latency_cancel(conn, handle);
   11ca2:	4631      	mov	r1, r6
   11ca4:	4620      	mov	r0, r4
   11ca6:	f001 f847 	bl	12d38 <ull_periph_latency_cancel>
	return 0;
   11caa:	2000      	movs	r0, #0
   11cac:	e001      	b.n	11cb2 <ll_tx_mem_enqueue+0x62>
		return -EINVAL;
   11cae:	f06f 0015 	mvn.w	r0, #21
}
   11cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   11cb4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   11cb8:	e7fb      	b.n	11cb2 <ll_tx_mem_enqueue+0x62>
   11cba:	bf00      	nop
   11cbc:	200008c0 	.word	0x200008c0
   11cc0:	2000091c 	.word	0x2000091c

00011cc4 <ll_terminate_ind_send>:
{
   11cc4:	b538      	push	{r3, r4, r5, lr}
   11cc6:	4605      	mov	r5, r0
   11cc8:	460c      	mov	r4, r1
	conn = ll_connected_get(handle);
   11cca:	f00b fa9c 	bl	1d206 <ll_connected_get>
	if (!conn) {
   11cce:	b310      	cbz	r0, 11d16 <ll_terminate_ind_send+0x52>
	if (conn->llcp_terminate.req != conn->llcp_terminate.ack) {
   11cd0:	f890 30d0 	ldrb.w	r3, [r0, #208]	; 0xd0
   11cd4:	f890 20d1 	ldrb.w	r2, [r0, #209]	; 0xd1
   11cd8:	429a      	cmp	r2, r3
   11cda:	d11e      	bne.n	11d1a <ll_terminate_ind_send+0x56>
	switch (reason) {
   11cdc:	2c1a      	cmp	r4, #26
   11cde:	d808      	bhi.n	11cf2 <ll_terminate_ind_send+0x2e>
   11ce0:	2c04      	cmp	r4, #4
   11ce2:	d904      	bls.n	11cee <ll_terminate_ind_send+0x2a>
   11ce4:	490e      	ldr	r1, [pc, #56]	; (11d20 <ll_terminate_ind_send+0x5c>)
   11ce6:	2201      	movs	r2, #1
   11ce8:	40a2      	lsls	r2, r4
   11cea:	420a      	tst	r2, r1
   11cec:	d105      	bne.n	11cfa <ll_terminate_ind_send+0x36>
   11cee:	2012      	movs	r0, #18
   11cf0:	e012      	b.n	11d18 <ll_terminate_ind_send+0x54>
   11cf2:	2c29      	cmp	r4, #41	; 0x29
   11cf4:	d001      	beq.n	11cfa <ll_terminate_ind_send+0x36>
   11cf6:	2c3b      	cmp	r4, #59	; 0x3b
   11cf8:	d1f9      	bne.n	11cee <ll_terminate_ind_send+0x2a>
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
   11cfa:	3301      	adds	r3, #1
   11cfc:	f880 30d0 	strb.w	r3, [r0, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   11d00:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	conn->llcp_terminate.reason_own = reason;
   11d04:	f880 40d2 	strb.w	r4, [r0, #210]	; 0xd2
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   11d08:	2b00      	cmp	r3, #0
   11d0a:	da02      	bge.n	11d12 <ll_terminate_ind_send+0x4e>
		ull_periph_latency_cancel(conn, handle);
   11d0c:	4629      	mov	r1, r5
   11d0e:	f001 f813 	bl	12d38 <ull_periph_latency_cancel>
	return 0;
   11d12:	2000      	movs	r0, #0
   11d14:	e000      	b.n	11d18 <ll_terminate_ind_send+0x54>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   11d16:	2002      	movs	r0, #2
}
   11d18:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   11d1a:	200c      	movs	r0, #12
   11d1c:	e7fc      	b.n	11d18 <ll_terminate_ind_send+0x54>
   11d1e:	bf00      	nop
   11d20:	04380020 	.word	0x04380020

00011d24 <ull_conn_reset>:
{
   11d24:	b510      	push	{r4, lr}
	conn = ll_conn_get(handle);
   11d26:	2000      	movs	r0, #0
   11d28:	f7ff ff7e 	bl	11c28 <ll_conn_get>
   11d2c:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
   11d2e:	f100 021c 	add.w	r2, r0, #28
   11d32:	4601      	mov	r1, r0
   11d34:	2005      	movs	r0, #5
   11d36:	f7fe ffe3 	bl	10d00 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   11d3a:	b170      	cbz	r0, 11d5a <ull_conn_reset+0x36>
   11d3c:	3078      	adds	r0, #120	; 0x78
   11d3e:	d00c      	beq.n	11d5a <ull_conn_reset+0x36>
   11d40:	4a0d      	ldr	r2, [pc, #52]	; (11d78 <ull_conn_reset+0x54>)
   11d42:	490e      	ldr	r1, [pc, #56]	; (11d7c <ull_conn_reset+0x58>)
   11d44:	480e      	ldr	r0, [pc, #56]	; (11d80 <ull_conn_reset+0x5c>)
   11d46:	f240 739f 	movw	r3, #1951	; 0x79f
   11d4a:	f006 ff3b 	bl	18bc4 <printk>
   11d4e:	4040      	eors	r0, r0
   11d50:	f380 8811 	msr	BASEPRI, r0
   11d54:	f04f 0003 	mov.w	r0, #3
   11d58:	df02      	svc	2
	MFIFO_INIT(conn_tx);
   11d5a:	4a0a      	ldr	r2, [pc, #40]	; (11d84 <ull_conn_reset+0x60>)
	conn->lll.handle = LLL_HANDLE_INVALID;
   11d5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11d60:	8523      	strh	r3, [r4, #40]	; 0x28
	conn->lll.link_tx_free = NULL;
   11d62:	2300      	movs	r3, #0
	MFIFO_INIT(conn_tx);
   11d64:	8053      	strh	r3, [r2, #2]
	MFIFO_INIT(conn_ack);
   11d66:	4a08      	ldr	r2, [pc, #32]	; (11d88 <ull_conn_reset+0x64>)
	conn->lll.link_tx_free = NULL;
   11d68:	66a3      	str	r3, [r4, #104]	; 0x68
	MFIFO_INIT(conn_ack);
   11d6a:	8053      	strh	r3, [r2, #2]
	conn_upd_curr = NULL;
   11d6c:	4a07      	ldr	r2, [pc, #28]	; (11d8c <ull_conn_reset+0x68>)
}
   11d6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	conn_upd_curr = NULL;
   11d72:	6013      	str	r3, [r2, #0]
	err = init_reset();
   11d74:	f7ff bd7e 	b.w	11874 <init_reset>
   11d78:	00022ca1 	.word	0x00022ca1
   11d7c:	00022c78 	.word	0x00022c78
   11d80:	00020429 	.word	0x00020429
   11d84:	200008c0 	.word	0x200008c0
   11d88:	20000874 	.word	0x20000874
   11d8c:	200027a4 	.word	0x200027a4

00011d90 <ull_conn_setup>:
{
   11d90:	b538      	push	{r3, r4, r5, lr}
	hdr = HDR_LLL2ULL(ftr->param);
   11d92:	688b      	ldr	r3, [r1, #8]
	rx->link = rx_link;
   11d94:	6008      	str	r0, [r1, #0]
	hdr = HDR_LLL2ULL(ftr->param);
   11d96:	681d      	ldr	r5, [r3, #0]
   11d98:	782b      	ldrb	r3, [r5, #0]
{
   11d9a:	460c      	mov	r4, r1
	if (ull_ref_get(hdr)) {
   11d9c:	b193      	cbz	r3, 11dc4 <ull_conn_setup+0x34>
		LL_ASSERT(!hdr->disabled_cb);
   11d9e:	696b      	ldr	r3, [r5, #20]
   11da0:	b163      	cbz	r3, 11dbc <ull_conn_setup+0x2c>
   11da2:	4a0b      	ldr	r2, [pc, #44]	; (11dd0 <ull_conn_setup+0x40>)
   11da4:	490b      	ldr	r1, [pc, #44]	; (11dd4 <ull_conn_setup+0x44>)
   11da6:	480c      	ldr	r0, [pc, #48]	; (11dd8 <ull_conn_setup+0x48>)
   11da8:	f240 3372 	movw	r3, #882	; 0x372
   11dac:	f006 ff0a 	bl	18bc4 <printk>
   11db0:	4040      	eors	r0, r0
   11db2:	f380 8811 	msr	BASEPRI, r0
   11db6:	f04f 0003 	mov.w	r0, #3
   11dba:	df02      	svc	2
		hdr->disabled_cb = conn_setup_adv_scan_disabled_cb;
   11dbc:	4b07      	ldr	r3, [pc, #28]	; (11ddc <ull_conn_setup+0x4c>)
		hdr->disabled_param = rx;
   11dbe:	61ac      	str	r4, [r5, #24]
		hdr->disabled_cb = conn_setup_adv_scan_disabled_cb;
   11dc0:	616b      	str	r3, [r5, #20]
}
   11dc2:	bd38      	pop	{r3, r4, r5, pc}
   11dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		conn_setup_adv_scan_disabled_cb(rx);
   11dc8:	4608      	mov	r0, r1
   11dca:	f7ff be09 	b.w	119e0 <conn_setup_adv_scan_disabled_cb>
   11dce:	bf00      	nop
   11dd0:	00022ca1 	.word	0x00022ca1
   11dd4:	00022b99 	.word	0x00022b99
   11dd8:	00020429 	.word	0x00020429
   11ddc:	000119e1 	.word	0x000119e1

00011de0 <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
   11de0:	680b      	ldr	r3, [r1, #0]
{
   11de2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   11de6:	4607      	mov	r7, r0
	conn = ll_connected_get((*rx)->hdr.handle);
   11de8:	88d8      	ldrh	r0, [r3, #6]
{
   11dea:	460e      	mov	r6, r1
	conn = ll_connected_get((*rx)->hdr.handle);
   11dec:	f00b fa0b 	bl	1d206 <ll_connected_get>
	if (!conn) {
   11df0:	6835      	ldr	r5, [r6, #0]
   11df2:	4604      	mov	r4, r0
   11df4:	b910      	cbnz	r0, 11dfc <ull_conn_rx+0x1c>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   11df6:	2301      	movs	r3, #1
   11df8:	712b      	strb	r3, [r5, #4]
	return 0;
   11dfa:	e007      	b.n	11e0c <ull_conn_rx+0x2c>
	switch (pdu_rx->ll_id) {
   11dfc:	7f28      	ldrb	r0, [r5, #28]
   11dfe:	f000 0003 	and.w	r0, r0, #3
   11e02:	2803      	cmp	r0, #3
   11e04:	d004      	beq.n	11e10 <ull_conn_rx+0x30>
   11e06:	2800      	cmp	r0, #0
   11e08:	f000 83a6 	beq.w	12558 <ull_conn_rx+0x778>
   11e0c:	2000      	movs	r0, #0
   11e0e:	e149      	b.n	120a4 <ull_conn_rx+0x2c4>
			  struct pdu_data *pdu_rx, struct ll_conn *conn)
{
	int nack = 0;
	uint8_t opcode;

	opcode = pdu_rx->llctrl.opcode;
   11e10:	f895 801f 	ldrb.w	r8, [r5, #31]

		return 0;
	}
#endif /* CONFIG_BT_CTLR_LE_ENC */

	switch (opcode) {
   11e14:	f1b8 0f11 	cmp.w	r8, #17
   11e18:	f200 83b4 	bhi.w	12584 <ull_conn_rx+0x7a4>
   11e1c:	e8df f018 	tbh	[pc, r8, lsl #1]
   11e20:	00830012 	.word	0x00830012
   11e24:	03b200b3 	.word	0x03b200b3
   11e28:	03b203b2 	.word	0x03b203b2
   11e2c:	033a03b2 	.word	0x033a03b2
   11e30:	011500bc 	.word	0x011500bc
   11e34:	03b203b2 	.word	0x03b203b2
   11e38:	03b20145 	.word	0x03b20145
   11e3c:	019603b2 	.word	0x019603b2
   11e40:	02e203b2 	.word	0x02e203b2
#if defined(CONFIG_BT_PERIPHERAL)
	case PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND:
	{
		uint8_t err;

		if (!conn->lll.role ||
   11e44:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   11e48:	2b00      	cmp	r3, #0
   11e4a:	f280 839b 	bge.w	12584 <ull_conn_rx+0x7a4>
   11e4e:	7f6b      	ldrb	r3, [r5, #29]
   11e50:	2b0c      	cmp	r3, #12
   11e52:	f040 8397 	bne.w	12584 <ull_conn_rx+0x7a4>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   11e56:	f8b5 1029 	ldrh.w	r1, [r5, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   11e5a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   11e5c:	1acb      	subs	r3, r1, r3
   11e5e:	041b      	lsls	r3, r3, #16
   11e60:	d503      	bpl.n	11e6a <ull_conn_rx+0x8a>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   11e62:	2301      	movs	r3, #1
   11e64:	712b      	strb	r3, [r5, #4]
		err = BT_HCI_ERR_INSTANT_PASSED;
   11e66:	2328      	movs	r3, #40	; 0x28
   11e68:	e00b      	b.n	11e82 <ull_conn_rx+0xa2>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   11e6a:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   11e6e:	f894 2089 	ldrb.w	r2, [r4, #137]	; 0x89
   11e72:	1a9b      	subs	r3, r3, r2
   11e74:	f003 0303 	and.w	r3, r3, #3
   11e78:	2b02      	cmp	r3, #2
   11e7a:	d105      	bne.n	11e88 <ull_conn_rx+0xa8>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   11e7c:	2301      	movs	r3, #1
   11e7e:	712b      	strb	r3, [r5, #4]
		err = BT_HCI_ERR_DIFF_TRANS_COLLISION;
   11e80:	232a      	movs	r3, #42	; 0x2a
			goto ull_conn_rx_unknown_rsp_send;
		}

		err = chan_map_upd_recv(conn, *rx, pdu_rx);
		if (err) {
			conn->llcp_terminate.reason_final = err;
   11e82:	f884 30d3 	strb.w	r3, [r4, #211]	; 0xd3
   11e86:	e7c1      	b.n	11e0c <ull_conn_rx+0x2c>
	cpr_active_check_and_set(conn);
   11e88:	4620      	mov	r0, r4
   11e8a:	f7ff fccd 	bl	11828 <cpr_active_check_and_set>
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   11e8e:	f895 3020 	ldrb.w	r3, [r5, #32]
   11e92:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) *
   11e96:	f8b5 3021 	ldrh.w	r3, [r5, #33]	; 0x21
   11e9a:	f240 42e2 	movw	r2, #1250	; 0x4e2
   11e9e:	4353      	muls	r3, r2
	conn->llcp_cu.win_offset_us =
   11ea0:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   11ea4:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
   11ea8:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   11eac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp_cu.interval =
   11eb0:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
   11eb4:	f895 2026 	ldrb.w	r2, [r5, #38]	; 0x26
   11eb8:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   11ebc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp_cu.latency =
   11ec0:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   11ec4:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
   11ec8:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
	conn->llcp.conn_upd.instant = instant;
   11ecc:	f8a4 108c 	strh.w	r1, [r4, #140]	; 0x8c
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   11ed0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp_cu.timeout =
   11ed4:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   11ed8:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
   11edc:	f023 030f 	bic.w	r3, r3, #15
   11ee0:	f043 0308 	orr.w	r3, r3, #8
   11ee4:	f884 309e 	strb.w	r3, [r4, #158]	; 0x9e
	conn->llcp_cu.ack--;
   11ee8:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
   11eec:	3b01      	subs	r3, #1
   11eee:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
	link->mem = conn->llcp_rx;
   11ef2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   11ef6:	607b      	str	r3, [r7, #4]
	(*rx)->hdr.link = link;
   11ef8:	6833      	ldr	r3, [r6, #0]
   11efa:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   11efc:	6833      	ldr	r3, [r6, #0]
   11efe:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*rx = NULL;
   11f02:	2300      	movs	r3, #0
   11f04:	6033      	str	r3, [r6, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   11f06:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
   11f0a:	f894 30f5 	ldrb.w	r3, [r4, #245]	; 0xf5
   11f0e:	4293      	cmp	r3, r2
   11f10:	d007      	beq.n	11f22 <ull_conn_rx+0x142>
	    ((conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) ||
   11f12:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   11f16:	f003 030e 	and.w	r3, r3, #14
   11f1a:	2b04      	cmp	r3, #4
   11f1c:	d101      	bne.n	11f22 <ull_conn_rx+0x142>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   11f1e:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
				break;
			}
		}

		/* Procedure complete */
		conn->procedure_expire = 0U;
   11f22:	2000      	movs	r0, #0
   11f24:	e0bc      	b.n	120a0 <ull_conn_rx+0x2c0>
		if (!conn->lll.role ||
   11f26:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   11f2a:	2b00      	cmp	r3, #0
   11f2c:	f280 832a 	bge.w	12584 <ull_conn_rx+0x7a4>
   11f30:	7f6b      	ldrb	r3, [r5, #29]
   11f32:	2b08      	cmp	r3, #8
   11f34:	f040 8326 	bne.w	12584 <ull_conn_rx+0x7a4>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   11f38:	f8b5 6025 	ldrh.w	r6, [r5, #37]	; 0x25
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   11f3c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   11f3e:	1af3      	subs	r3, r6, r3
   11f40:	0418      	lsls	r0, r3, #16
   11f42:	d48e      	bmi.n	11e62 <ull_conn_rx+0x82>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   11f44:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   11f48:	f894 2089 	ldrb.w	r2, [r4, #137]	; 0x89
   11f4c:	1a9b      	subs	r3, r3, r2
   11f4e:	f003 0303 	and.w	r3, r3, #3
   11f52:	2b02      	cmp	r3, #2
   11f54:	d092      	beq.n	11e7c <ull_conn_rx+0x9c>
	memcpy(&conn->llcp.chan_map.chm[0], &pdu->llctrl.chan_map_ind.chm[0],
   11f56:	2205      	movs	r2, #5
   11f58:	f105 0120 	add.w	r1, r5, #32
   11f5c:	f104 008d 	add.w	r0, r4, #141	; 0x8d
   11f60:	f008 f98d 	bl	1a27e <memcpy>
	conn->llcp.chan_map.initiate = 0U;
   11f64:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
	conn->llcp.chan_map.instant = instant;
   11f68:	f8a4 6092 	strh.w	r6, [r4, #146]	; 0x92
	conn->llcp.chan_map.initiate = 0U;
   11f6c:	f36f 0300 	bfc	r3, #0, #1
   11f70:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
	conn->llcp_type = LLCP_CHAN_MAP;
   11f74:	2302      	movs	r3, #2
   11f76:	f884 308a 	strb.w	r3, [r4, #138]	; 0x8a
	conn->llcp_ack -= 2U;
   11f7a:	f894 3089 	ldrb.w	r3, [r4, #137]	; 0x89
   11f7e:	3b02      	subs	r3, #2
   11f80:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   11f84:	e737      	b.n	11df6 <ull_conn_rx+0x16>
		if (PDU_DATA_LLCTRL_LEN(terminate_ind) != pdu_rx->len) {
   11f86:	7f6b      	ldrb	r3, [r5, #29]
   11f88:	2b02      	cmp	r3, #2
   11f8a:	f040 82fb 	bne.w	12584 <ull_conn_rx+0x7a4>
	conn->llcp_terminate.reason_final =
   11f8e:	f895 3020 	ldrb.w	r3, [r5, #32]
   11f92:	f884 30d3 	strb.w	r3, [r4, #211]	; 0xd3
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   11f96:	e72e      	b.n	11df6 <ull_conn_rx+0x16>
		if (!conn->lll.role ||
   11f98:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   11f9c:	2b00      	cmp	r3, #0
   11f9e:	f280 82f1 	bge.w	12584 <ull_conn_rx+0x7a4>
   11fa2:	f895 901d 	ldrb.w	r9, [r5, #29]
   11fa6:	f1b9 0f09 	cmp.w	r9, #9
   11faa:	f040 82eb 	bne.w	12584 <ull_conn_rx+0x7a4>
	tx = ctrl_tx_rsp_mem_acquire(conn, rx, &err);
   11fae:	aa01      	add	r2, sp, #4
   11fb0:	4629      	mov	r1, r5
   11fb2:	4620      	mov	r0, r4
   11fb4:	f7ff fc40 	bl	11838 <ctrl_tx_rsp_mem_acquire>
	if (!tx) {
   11fb8:	4606      	mov	r6, r0
   11fba:	b908      	cbnz	r0, 11fc0 <ull_conn_rx+0x1e0>
		return err;
   11fbc:	9801      	ldr	r0, [sp, #4]
   11fbe:	e071      	b.n	120a4 <ull_conn_rx+0x2c4>
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   11fc0:	f105 0720 	add.w	r7, r5, #32
   11fc4:	4638      	mov	r0, r7
   11fc6:	f7ff fda3 	bl	11b10 <feat_get>
   11fca:	e9d4 232e 	ldrd	r2, r3, [r4, #184]	; 0xb8
   11fce:	4002      	ands	r2, r0
   11fd0:	400b      	ands	r3, r1
   11fd2:	e9c4 232e 	strd	r2, r3, [r4, #184]	; 0xb8
		feat_land_octet0(feat_get(&req->features[0]), ll_feat_get());
   11fd6:	4638      	mov	r0, r7
   11fd8:	f7ff fd9a 	bl	11b10 <feat_get>
   11fdc:	4607      	mov	r7, r0
   11fde:	4688      	mov	r8, r1
   11fe0:	f00a ff44 	bl	1ce6c <ll_feat_get>
	conn->common.fex_valid = 1U;
   11fe4:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
	feat_result = feat_to_keep & feat_octet0;
   11fe8:	4038      	ands	r0, r7
	conn->common.fex_valid = 1U;
   11fea:	f043 0301 	orr.w	r3, r3, #1
   11fee:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
	feat_result &= 0xFF;
   11ff2:	f000 00ff 	and.w	r0, r0, #255	; 0xff
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   11ff6:	7933      	ldrb	r3, [r6, #4]
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   11ff8:	f027 07ff 	bic.w	r7, r7, #255	; 0xff
   11ffc:	f008 010f 	and.w	r1, r8, #15
   12000:	4307      	orrs	r7, r0
	conn->llcp_feature.features_peer =
   12002:	e9c4 7130 	strd	r7, r1, [r4, #192]	; 0xc0
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   12006:	f043 0303 	orr.w	r3, r3, #3
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   1200a:	f106 0708 	add.w	r7, r6, #8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1200e:	7133      	strb	r3, [r6, #4]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   12010:	2208      	movs	r2, #8
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   12012:	f886 9005 	strb.w	r9, [r6, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   12016:	f886 9007 	strb.w	r9, [r6, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   1201a:	2100      	movs	r1, #0
   1201c:	4638      	mov	r0, r7
   1201e:	f008 f939 	bl	1a294 <memset>
	feat = feat_land_octet0(ll_feat_get(),
   12022:	f00a ff23 	bl	1ce6c <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   12026:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   1202a:	4003      	ands	r3, r0
	feat_result &= 0xFF;
   1202c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   12030:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
	sys_put_le64(feat, pdu_tx->llctrl.feature_rsp.features);
   12034:	4318      	orrs	r0, r3
   12036:	463a      	mov	r2, r7
   12038:	f001 010f 	and.w	r1, r1, #15
   1203c:	f00b f88f 	bl	1d15e <sys_put_le64>
	ctrl_tx_sec_enqueue(conn, tx);
   12040:	4631      	mov	r1, r6
   12042:	4620      	mov	r0, r4
   12044:	f00b f89c 	bl	1d180 <ctrl_tx_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   12048:	e6d5      	b.n	11df6 <ull_conn_rx+0x16>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_PER_INIT_FEAT_XCHG) &&
   1204a:	7f6b      	ldrb	r3, [r5, #29]
   1204c:	2b09      	cmp	r3, #9
   1204e:	f040 8299 	bne.w	12584 <ull_conn_rx+0x7a4>
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   12052:	3520      	adds	r5, #32
   12054:	4628      	mov	r0, r5
   12056:	f7ff fd5b 	bl	11b10 <feat_get>
   1205a:	e9d4 232e 	ldrd	r2, r3, [r4, #184]	; 0xb8
   1205e:	400b      	ands	r3, r1
   12060:	4002      	ands	r2, r0
   12062:	e9c4 232e 	strd	r2, r3, [r4, #184]	; 0xb8
		feat_land_octet0(feat_get(&rsp->features[0]), ll_feat_get());
   12066:	4628      	mov	r0, r5
   12068:	f7ff fd52 	bl	11b10 <feat_get>
   1206c:	4605      	mov	r5, r0
   1206e:	460e      	mov	r6, r1
   12070:	f00a fefc 	bl	1ce6c <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   12074:	ea05 0300 	and.w	r3, r5, r0
	feat_result &= 0xFF;
   12078:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1207c:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
   12080:	431d      	orrs	r5, r3
	conn->common.fex_valid = 1U;
   12082:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   12086:	f006 060f 	and.w	r6, r6, #15
	conn->common.fex_valid = 1U;
   1208a:	f043 0301 	orr.w	r3, r3, #1
	conn->llcp_feature.features_peer =
   1208e:	e9c4 5630 	strd	r5, r6, [r4, #192]	; 0xc0
	conn->common.fex_valid = 1U;
   12092:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
	conn->llcp_feature.ack = conn->llcp_feature.req;
   12096:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
   1209a:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
	feat_result &= 0xFF;
   1209e:	2000      	movs	r0, #0
	conn->procedure_expire = 0U;
   120a0:	f8a4 0078 	strh.w	r0, [r4, #120]	; 0x78
}
   120a4:	b003      	add	sp, #12
   120a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (PDU_DATA_LLCTRL_LEN(version_ind) != pdu_rx->len) {
   120aa:	7f6e      	ldrb	r6, [r5, #29]
   120ac:	2e06      	cmp	r6, #6
   120ae:	f040 8269 	bne.w	12584 <ull_conn_rx+0x7a4>
	if (!conn->llcp_version.tx) {
   120b2:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
   120b6:	07d9      	lsls	r1, r3, #31
   120b8:	d43d      	bmi.n	12136 <ull_conn_rx+0x356>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   120ba:	48c8      	ldr	r0, [pc, #800]	; (123dc <ull_conn_rx+0x5fc>)
   120bc:	f00a fb50 	bl	1c760 <mem_acquire>
		if (!tx) {
   120c0:	4601      	mov	r1, r0
   120c2:	2800      	cmp	r0, #0
   120c4:	f000 8275 	beq.w	125b2 <ull_conn_rx+0x7d2>
		conn->llcp_version.tx = 1U;
   120c8:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
   120cc:	f043 0301 	orr.w	r3, r3, #1
   120d0:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   120d4:	7903      	ldrb	r3, [r0, #4]
		pdu_tx->len =
   120d6:	7146      	strb	r6, [r0, #5]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   120d8:	f043 0303 	orr.w	r3, r3, #3
   120dc:	7103      	strb	r3, [r0, #4]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   120de:	230c      	movs	r3, #12
   120e0:	71c3      	strb	r3, [r0, #7]
		v->version_number = LL_VERSION_NUMBER;
   120e2:	7203      	strb	r3, [r0, #8]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   120e4:	f06f 030e 	mvn.w	r3, #14
   120e8:	7243      	strb	r3, [r0, #9]
   120ea:	2305      	movs	r3, #5
   120ec:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =
   120ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   120f2:	72c3      	strb	r3, [r0, #11]
   120f4:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, tx);
   120f6:	4620      	mov	r0, r4
   120f8:	f00b f842 	bl	1d180 <ctrl_tx_enqueue>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   120fc:	2301      	movs	r3, #1
   120fe:	712b      	strb	r3, [r5, #4]
	conn->llcp_version.version_number = v->version_number;
   12100:	f895 3020 	ldrb.w	r3, [r5, #32]
   12104:	f884 30cb 	strb.w	r3, [r4, #203]	; 0xcb
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   12108:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
   1210c:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   12110:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   12114:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		sys_le16_to_cpu(v->sub_version_number);
   12118:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   1211c:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
   12120:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp_version.sub_version_number =
   12124:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
	conn->llcp_version.rx = 1U;
   12128:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
   1212c:	f043 0302 	orr.w	r3, r3, #2
   12130:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
	return 0;
   12134:	e66a      	b.n	11e0c <ull_conn_rx+0x2c>
	} else if (!conn->llcp_version.rx) {
   12136:	f013 0302 	ands.w	r3, r3, #2
   1213a:	f47f ae5c 	bne.w	11df6 <ull_conn_rx+0x16>
		conn->llcp_version.ack = conn->llcp_version.req;
   1213e:	f894 20c8 	ldrb.w	r2, [r4, #200]	; 0xc8
   12142:	f884 20c9 	strb.w	r2, [r4, #201]	; 0xc9
		conn->procedure_expire = 0U;
   12146:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
   1214a:	e7d9      	b.n	12100 <ull_conn_rx+0x320>
		if (PDU_DATA_LLCTRL_LEN(conn_param_req) != pdu_rx->len) {
   1214c:	7f6b      	ldrb	r3, [r5, #29]
   1214e:	2b18      	cmp	r3, #24
   12150:	f040 8218 	bne.w	12584 <ull_conn_rx+0x7a4>
	return conn_upd_curr && (conn_upd_curr != conn);
   12154:	4ba2      	ldr	r3, [pc, #648]	; (123e0 <ull_conn_rx+0x600>)
   12156:	681b      	ldr	r3, [r3, #0]
   12158:	b14b      	cbz	r3, 1216e <ull_conn_rx+0x38e>
		if (cpr_active_is_set(conn)) {
   1215a:	429c      	cmp	r4, r3
   1215c:	d007      	beq.n	1216e <ull_conn_rx+0x38e>
			nack = reject_ext_ind_send(conn, *rx,
   1215e:	2220      	movs	r2, #32
				nack = reject_ext_ind_send(conn, *rx,
   12160:	4629      	mov	r1, r5
   12162:	4620      	mov	r0, r4
}
   12164:	b003      	add	sp, #12
   12166:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
				nack = reject_ext_ind_send(conn, *rx,
   1216a:	f00b b82e 	b.w	1d1ca <reject_ext_ind_send.constprop.0>
		if (!conn->lll.role) {
   1216e:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
					conn->llcp_conn_param.ack) &&
   12172:	f894 10f5 	ldrb.w	r1, [r4, #245]	; 0xf5
			if ((conn->llcp_conn_param.req !=
   12176:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
		if (!conn->lll.role) {
   1217a:	2a00      	cmp	r2, #0
   1217c:	f2c0 80a9 	blt.w	122d2 <ull_conn_rx+0x4f2>
			if ((conn->llcp_conn_param.req !=
   12180:	428b      	cmp	r3, r1
   12182:	d00a      	beq.n	1219a <ull_conn_rx+0x3ba>
			    ((conn->llcp_conn_param.state ==
   12184:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
					conn->llcp_conn_param.ack) &&
   12188:	f013 0f0b 	tst.w	r3, #11
   1218c:	d003      	beq.n	12196 <ull_conn_rx+0x3b6>
			      LLCP_CPR_STATE_RSP_WAIT) ||
   1218e:	f003 030f 	and.w	r3, r3, #15
   12192:	2b06      	cmp	r3, #6
   12194:	d101      	bne.n	1219a <ull_conn_rx+0x3ba>
				nack = reject_ext_ind_send(conn, *rx,
   12196:	2223      	movs	r2, #35	; 0x23
   12198:	e7e2      	b.n	12160 <ull_conn_rx+0x380>
			} else if (((conn->llcp_req - conn->llcp_ack) &
   1219a:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   1219e:	f894 2089 	ldrb.w	r2, [r4, #137]	; 0x89
   121a2:	1a9b      	subs	r3, r3, r2
   121a4:	f003 0303 	and.w	r3, r3, #3
   121a8:	2b02      	cmp	r3, #2
   121aa:	d101      	bne.n	121b0 <ull_conn_rx+0x3d0>
				nack = reject_ext_ind_send(conn, *rx,
   121ac:	222a      	movs	r2, #42	; 0x2a
   121ae:	e7d7      	b.n	12160 <ull_conn_rx+0x380>
				uint16_t interval_min =
   121b0:	f8b5 8020 	ldrh.w	r8, [r5, #32]
   121b4:	fa1f f388 	uxth.w	r3, r8
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   121b8:	2b05      	cmp	r3, #5
   121ba:	d922      	bls.n	12202 <ull_conn_rx+0x422>
				uint16_t interval_max =
   121bc:	f8b5 e022 	ldrh.w	lr, [r5, #34]	; 0x22
   121c0:	fa1f f08e 	uxth.w	r0, lr
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   121c4:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
   121c8:	d81b      	bhi.n	12202 <ull_conn_rx+0x422>
				    (interval_max > 3200) ||
   121ca:	4283      	cmp	r3, r0
   121cc:	d819      	bhi.n	12202 <ull_conn_rx+0x422>
				uint16_t latency =
   121ce:	f8b5 c024 	ldrh.w	ip, [r5, #36]	; 0x24
   121d2:	fa1f f68c 	uxth.w	r6, ip
				    (interval_min > interval_max) ||
   121d6:	f5b6 7ffa 	cmp.w	r6, #500	; 0x1f4
   121da:	d212      	bcs.n	12202 <ull_conn_rx+0x422>
				uint16_t timeout =
   121dc:	8cef      	ldrh	r7, [r5, #38]	; 0x26
   121de:	b2bb      	uxth	r3, r7
				    (latency > 499) ||
   121e0:	f1a3 020a 	sub.w	r2, r3, #10
   121e4:	b292      	uxth	r2, r2
   121e6:	f640 4976 	movw	r9, #3190	; 0xc76
   121ea:	454a      	cmp	r2, r9
   121ec:	d809      	bhi.n	12202 <ull_conn_rx+0x422>
				     ((latency + 1) * interval_max)) ||
   121ee:	1c72      	adds	r2, r6, #1
   121f0:	b292      	uxth	r2, r2
   121f2:	4342      	muls	r2, r0
				    (timeout > 3200) ||
   121f4:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   121f8:	d203      	bcs.n	12202 <ull_conn_rx+0x422>
					cpr->preferred_periodicity;
   121fa:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
				     ((latency + 1) * interval_max)) ||
   121fe:	4290      	cmp	r0, r2
   12200:	d201      	bcs.n	12206 <ull_conn_rx+0x426>
				nack = reject_ext_ind_send(conn, *rx,
   12202:	221e      	movs	r2, #30
   12204:	e7ac      	b.n	12160 <ull_conn_rx+0x380>
				conn->llcp_conn_param.interval_min =
   12206:	f8a4 80f8 	strh.w	r8, [r4, #248]	; 0xf8
				conn->llcp_conn_param.interval_max =
   1220a:	f8a4 e0fa 	strh.w	lr, [r4, #250]	; 0xfa
				conn->llcp_conn_param.latency =	latency;
   1220e:	f8a4 c0fc 	strh.w	ip, [r4, #252]	; 0xfc
				conn->llcp_conn_param.timeout =	timeout;
   12212:	f8a4 70fe 	strh.w	r7, [r4, #254]	; 0xfe
				conn->llcp_conn_param.preferred_periodicity =
   12216:	f884 2100 	strb.w	r2, [r4, #256]	; 0x100
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   1221a:	f895 702a 	ldrb.w	r7, [r5, #42]	; 0x2a
   1221e:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
   12222:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   12226:	f8a4 2102 	strh.w	r2, [r4, #258]	; 0x102
					sys_le16_to_cpu(cpr->offset0);
   1222a:	f895 702c 	ldrb.w	r7, [r5, #44]	; 0x2c
   1222e:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
   12232:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
				conn->llcp_conn_param.offset0 =
   12236:	f8a4 2104 	strh.w	r2, [r4, #260]	; 0x104
					sys_le16_to_cpu(cpr->offset1);
   1223a:	f895 702e 	ldrb.w	r7, [r5, #46]	; 0x2e
   1223e:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
   12242:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
				conn->llcp_conn_param.offset1 =
   12246:	f8a4 2106 	strh.w	r2, [r4, #262]	; 0x106
					sys_le16_to_cpu(cpr->offset2);
   1224a:	f895 7030 	ldrb.w	r7, [r5, #48]	; 0x30
   1224e:	f895 202f 	ldrb.w	r2, [r5, #47]	; 0x2f
   12252:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
				conn->llcp_conn_param.offset2 =
   12256:	f8a4 2108 	strh.w	r2, [r4, #264]	; 0x108
					sys_le16_to_cpu(cpr->offset3);
   1225a:	f895 7032 	ldrb.w	r7, [r5, #50]	; 0x32
   1225e:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
   12262:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
				conn->llcp_conn_param.offset3 =
   12266:	f8a4 210a 	strh.w	r2, [r4, #266]	; 0x10a
					sys_le16_to_cpu(cpr->offset4);
   1226a:	f895 7034 	ldrb.w	r7, [r5, #52]	; 0x34
   1226e:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
   12272:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
				conn->llcp_conn_param.offset4 =
   12276:	f8a4 210c 	strh.w	r2, [r4, #268]	; 0x10c
					sys_le16_to_cpu(cpr->offset5);
   1227a:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
   1227e:	f895 7036 	ldrb.w	r7, [r5, #54]	; 0x36
   12282:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
				conn->llcp_conn_param.offset5 =
   12286:	f8a4 210e 	strh.w	r2, [r4, #270]	; 0x10e
				     lll->interval) ||
   1228a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
				if ((conn->llcp_conn_param.interval_max !=
   1228c:	4290      	cmp	r0, r2
			if ((conn->llcp_conn_param.interval_max !=
   1228e:	d112      	bne.n	122b6 <ull_conn_rx+0x4d6>
			     lll->interval) ||
   12290:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
   12292:	42b0      	cmp	r0, r6
   12294:	d10f      	bne.n	122b6 <ull_conn_rx+0x4d6>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   12296:	f240 40e2 	movw	r0, #1250	; 0x4e2
   1229a:	4342      	muls	r2, r0
   1229c:	f242 7010 	movw	r0, #10000	; 0x2710
   122a0:	fb00 2303 	mla	r3, r0, r3, r2
   122a4:	3b01      	subs	r3, #1
   122a6:	fbb3 f3f2 	udiv	r3, r3, r2
			    (conn->llcp_conn_param.latency != lll->latency) ||
   122aa:	f8b4 2072 	ldrh.w	r2, [r4, #114]	; 0x72
   122ae:	b29b      	uxth	r3, r3
   122b0:	429a      	cmp	r2, r3
   122b2:	f000 8088 	beq.w	123c6 <ull_conn_rx+0x5e6>
				conn->llcp_conn_param.state =
   122b6:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   122ba:	2203      	movs	r2, #3
   122bc:	f362 0303 	bfi	r3, r2, #0, #4
   122c0:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
			conn->llcp_conn_param.ack--;
   122c4:	3901      	subs	r1, #1
   122c6:	f884 10f5 	strb.w	r1, [r4, #245]	; 0xf5
			cpr_active_check_and_set(conn);
   122ca:	4620      	mov	r0, r4
   122cc:	f7ff faac 	bl	11828 <cpr_active_check_and_set>
   122d0:	e59c      	b.n	11e0c <ull_conn_rx+0x2c>
		} else if ((conn->llcp_conn_param.req ==
   122d2:	428b      	cmp	r3, r1
   122d4:	d005      	beq.n	122e2 <ull_conn_rx+0x502>
			    conn->llcp_conn_param.ack) ||
   122d6:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   122da:	f013 0f0b 	tst.w	r3, #11
   122de:	f47f ad8a 	bne.w	11df6 <ull_conn_rx+0x16>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   122e2:	f8b5 8020 	ldrh.w	r8, [r5, #32]
   122e6:	fa1f f388 	uxth.w	r3, r8
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   122ea:	2b05      	cmp	r3, #5
   122ec:	d989      	bls.n	12202 <ull_conn_rx+0x422>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   122ee:	f8b5 e022 	ldrh.w	lr, [r5, #34]	; 0x22
   122f2:	fa1f f28e 	uxth.w	r2, lr
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   122f6:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   122fa:	d882      	bhi.n	12202 <ull_conn_rx+0x422>
			    (interval_max > 3200) ||
   122fc:	4293      	cmp	r3, r2
   122fe:	d880      	bhi.n	12202 <ull_conn_rx+0x422>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   12300:	f8b5 c024 	ldrh.w	ip, [r5, #36]	; 0x24
   12304:	fa1f f68c 	uxth.w	r6, ip
			    (interval_min > interval_max) ||
   12308:	f5b6 7ffa 	cmp.w	r6, #500	; 0x1f4
   1230c:	f4bf af79 	bcs.w	12202 <ull_conn_rx+0x422>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   12310:	8cef      	ldrh	r7, [r5, #38]	; 0x26
   12312:	b2bb      	uxth	r3, r7
			    (latency > 499) ||
   12314:	f1a3 000a 	sub.w	r0, r3, #10
   12318:	b280      	uxth	r0, r0
   1231a:	f640 4976 	movw	r9, #3190	; 0xc76
   1231e:	4548      	cmp	r0, r9
   12320:	f63f af6f 	bhi.w	12202 <ull_conn_rx+0x422>
			     ((latency + 1) * interval_max)) ||
   12324:	1c70      	adds	r0, r6, #1
   12326:	b280      	uxth	r0, r0
   12328:	4350      	muls	r0, r2
			    (timeout < 10) || (timeout > 3200) ||
   1232a:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
   1232e:	f4bf af68 	bcs.w	12202 <ull_conn_rx+0x422>
				cpr->preferred_periodicity;
   12332:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
			     ((latency + 1) * interval_max)) ||
   12336:	4282      	cmp	r2, r0
   12338:	f4ff af63 	bcc.w	12202 <ull_conn_rx+0x422>
			conn->llcp_conn_param.interval_min = interval_min;
   1233c:	f8a4 80f8 	strh.w	r8, [r4, #248]	; 0xf8
			conn->llcp_conn_param.interval_max = interval_max;
   12340:	f8a4 e0fa 	strh.w	lr, [r4, #250]	; 0xfa
			conn->llcp_conn_param.latency =	latency;
   12344:	f8a4 c0fc 	strh.w	ip, [r4, #252]	; 0xfc
			conn->llcp_conn_param.timeout =	timeout;
   12348:	f8a4 70fe 	strh.w	r7, [r4, #254]	; 0xfe
			conn->llcp_conn_param.preferred_periodicity =
   1234c:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   12350:	f895 702a 	ldrb.w	r7, [r5, #42]	; 0x2a
   12354:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
   12358:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   1235c:	f8a4 0102 	strh.w	r0, [r4, #258]	; 0x102
				sys_le16_to_cpu(cpr->offset0);
   12360:	f895 702c 	ldrb.w	r7, [r5, #44]	; 0x2c
   12364:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
   12368:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
			conn->llcp_conn_param.offset0 =
   1236c:	f8a4 0104 	strh.w	r0, [r4, #260]	; 0x104
				sys_le16_to_cpu(cpr->offset1);
   12370:	f895 702e 	ldrb.w	r7, [r5, #46]	; 0x2e
   12374:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
   12378:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
			conn->llcp_conn_param.offset1 =
   1237c:	f8a4 0106 	strh.w	r0, [r4, #262]	; 0x106
				sys_le16_to_cpu(cpr->offset2);
   12380:	f895 7030 	ldrb.w	r7, [r5, #48]	; 0x30
   12384:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
   12388:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
			conn->llcp_conn_param.offset2 =
   1238c:	f8a4 0108 	strh.w	r0, [r4, #264]	; 0x108
				sys_le16_to_cpu(cpr->offset3);
   12390:	f895 7032 	ldrb.w	r7, [r5, #50]	; 0x32
   12394:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
   12398:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
			conn->llcp_conn_param.offset3 =
   1239c:	f8a4 010a 	strh.w	r0, [r4, #266]	; 0x10a
				sys_le16_to_cpu(cpr->offset4);
   123a0:	f895 7034 	ldrb.w	r7, [r5, #52]	; 0x34
   123a4:	f895 0033 	ldrb.w	r0, [r5, #51]	; 0x33
   123a8:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
			conn->llcp_conn_param.offset4 =
   123ac:	f8a4 010c 	strh.w	r0, [r4, #268]	; 0x10c
				sys_le16_to_cpu(cpr->offset5);
   123b0:	f895 0035 	ldrb.w	r0, [r5, #53]	; 0x35
   123b4:	f895 7036 	ldrb.w	r7, [r5, #54]	; 0x36
   123b8:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
			conn->llcp_conn_param.offset5 =
   123bc:	f8a4 010e 	strh.w	r0, [r4, #270]	; 0x10e
			     lll->interval) ||
   123c0:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
			if ((conn->llcp_conn_param.interval_max !=
   123c2:	4282      	cmp	r2, r0
   123c4:	e763      	b.n	1228e <ull_conn_rx+0x4ae>
				conn->llcp_conn_param.state =
   123c6:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
   123ca:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   123ce:	f043 0301 	orr.w	r3, r3, #1
   123d2:	f8a4 30f6 	strh.w	r3, [r4, #246]	; 0xf6
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   123d6:	2301      	movs	r3, #1
   123d8:	712b      	strb	r3, [r5, #4]
   123da:	e773      	b.n	122c4 <ull_conn_rx+0x4e4>
   123dc:	2000285c 	.word	0x2000285c
   123e0:	200027a4 	.word	0x200027a4
		if (PDU_DATA_LLCTRL_LEN(reject_ext_ind) != pdu_rx->len) {
   123e4:	7f6b      	ldrb	r3, [r5, #29]
   123e6:	2b03      	cmp	r3, #3
   123e8:	f040 80cc 	bne.w	12584 <ull_conn_rx+0x7a4>
	switch (rej_ext_ind->reject_opcode) {
   123ec:	f895 3020 	ldrb.w	r3, [r5, #32]
   123f0:	2b0f      	cmp	r3, #15
   123f2:	f47f ad00 	bne.w	11df6 <ull_conn_rx+0x16>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   123f6:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
   123fa:	f894 30f5 	ldrb.w	r3, [r4, #245]	; 0xf5
   123fe:	4293      	cmp	r3, r2
   12400:	f43f acf9 	beq.w	11df6 <ull_conn_rx+0x16>
	if (!lll->role && (rej_ext_ind->error_code ==
   12404:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
   12408:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   1240c:	2900      	cmp	r1, #0
   1240e:	f2c0 80d3 	blt.w	125b8 <ull_conn_rx+0x7d8>
   12412:	2b1a      	cmp	r3, #26
   12414:	f040 80d6 	bne.w	125c4 <ull_conn_rx+0x7e4>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   12418:	f894 209c 	ldrb.w	r2, [r4, #156]	; 0x9c
   1241c:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
   12420:	429a      	cmp	r2, r3
   12422:	d00c      	beq.n	1243e <ull_conn_rx+0x65e>
   12424:	4a78      	ldr	r2, [pc, #480]	; (12608 <ull_conn_rx+0x828>)
   12426:	4979      	ldr	r1, [pc, #484]	; (1260c <ull_conn_rx+0x82c>)
   12428:	4879      	ldr	r0, [pc, #484]	; (12610 <ull_conn_rx+0x830>)
   1242a:	f241 3309 	movw	r3, #4873	; 0x1309
   1242e:	f006 fbc9 	bl	18bc4 <printk>
   12432:	4040      	eors	r0, r0
   12434:	f380 8811 	msr	BASEPRI, r0
   12438:	f04f 0003 	mov.w	r0, #3
   1243c:	df02      	svc	2
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1243e:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   12442:	2206      	movs	r2, #6
   12444:	f362 0303 	bfi	r3, r2, #0, #4
		conn->llcp_cu.win_size = 1U;
   12448:	2201      	movs	r2, #1
   1244a:	f884 20ac 	strb.w	r2, [r4, #172]	; 0xac
		conn->llcp_cu.win_offset_us = 0U;
   1244e:	2200      	movs	r2, #0
   12450:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   12454:	f8b4 20fa 	ldrh.w	r2, [r4, #250]	; 0xfa
   12458:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   1245c:	f8b4 20fc 	ldrh.w	r2, [r4, #252]	; 0xfc
   12460:	f8a4 20a2 	strh.w	r2, [r4, #162]	; 0xa2
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   12464:	f8b4 20fe 	ldrh.w	r2, [r4, #254]	; 0xfe
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   12468:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   1246c:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   12470:	f3c3 1300 	ubfx	r3, r3, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   12474:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
   12478:	00db      	lsls	r3, r3, #3
   1247a:	f043 0301 	orr.w	r3, r3, #1
   1247e:	f022 020f 	bic.w	r2, r2, #15
   12482:	4313      	orrs	r3, r2
   12484:	f884 309e 	strb.w	r3, [r4, #158]	; 0x9e
		conn->llcp_cu.ack--;
   12488:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
   1248c:	3b01      	subs	r3, #1
   1248e:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
	if (err) {
   12492:	e4b0      	b.n	11df6 <ull_conn_rx+0x16>
		if (PDU_DATA_LLCTRL_LEN(unknown_rsp) != pdu_rx->len) {
   12494:	7f6b      	ldrb	r3, [r5, #29]
   12496:	2b02      	cmp	r3, #2
   12498:	d174      	bne.n	12584 <ull_conn_rx+0x7a4>
			    conn->llcp_conn_param.req) &&
   1249a:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
		} else if ((conn->llcp_conn_param.ack !=
   1249e:	f894 30f5 	ldrb.w	r3, [r4, #245]	; 0xf5
   124a2:	4293      	cmp	r3, r2
   124a4:	f43f ad3d 	beq.w	11f22 <ull_conn_rx+0x142>
			    conn->llcp_conn_param.req) &&
   124a8:	f895 3020 	ldrb.w	r3, [r5, #32]
   124ac:	2b0f      	cmp	r3, #15
   124ae:	f47f ad38 	bne.w	11f22 <ull_conn_rx+0x142>
			conn->llcp_conn_param.disabled = 1U;
   124b2:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   124b6:	f043 0320 	orr.w	r3, r3, #32
   124ba:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
			if (!conn->lll.role) {
   124be:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   124c2:	2b00      	cmp	r3, #0
   124c4:	db3e      	blt.n	12544 <ull_conn_rx+0x764>
				LL_ASSERT(conn->llcp_cu.req ==
   124c6:	f894 209c 	ldrb.w	r2, [r4, #156]	; 0x9c
   124ca:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
   124ce:	429a      	cmp	r2, r3
   124d0:	d00c      	beq.n	124ec <ull_conn_rx+0x70c>
   124d2:	4a4d      	ldr	r2, [pc, #308]	; (12608 <ull_conn_rx+0x828>)
   124d4:	494d      	ldr	r1, [pc, #308]	; (1260c <ull_conn_rx+0x82c>)
   124d6:	484e      	ldr	r0, [pc, #312]	; (12610 <ull_conn_rx+0x830>)
   124d8:	f641 2331 	movw	r3, #6705	; 0x1a31
   124dc:	f006 fb72 	bl	18bc4 <printk>
   124e0:	4040      	eors	r0, r0
   124e2:	f380 8811 	msr	BASEPRI, r0
   124e6:	f04f 0003 	mov.w	r0, #3
   124ea:	df02      	svc	2
				conn->llcp_conn_param.state =
   124ec:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   124f0:	2206      	movs	r2, #6
   124f2:	f362 0303 	bfi	r3, r2, #0, #4
				conn->llcp_cu.interval =
   124f6:	f8b4 20fa 	ldrh.w	r2, [r4, #250]	; 0xfa
   124fa:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
				conn->llcp_cu.latency =
   124fe:	f8b4 20fc 	ldrh.w	r2, [r4, #252]	; 0xfc
   12502:	f8a4 20a2 	strh.w	r2, [r4, #162]	; 0xa2
				conn->llcp_cu.timeout =
   12506:	f8b4 20fe 	ldrh.w	r2, [r4, #254]	; 0xfe
				conn->llcp_conn_param.state =
   1250a:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
				conn->llcp_cu.timeout =
   1250e:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   12512:	f3c3 1300 	ubfx	r3, r3, #4, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   12516:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
				conn->llcp_cu.win_size = 1U;
   1251a:	2101      	movs	r1, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1251c:	00db      	lsls	r3, r3, #3
   1251e:	430b      	orrs	r3, r1
   12520:	f022 020f 	bic.w	r2, r2, #15
   12524:	4313      	orrs	r3, r2
   12526:	f884 309e 	strb.w	r3, [r4, #158]	; 0x9e
				conn->llcp_cu.ack--;
   1252a:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
				conn->llcp_cu.win_size = 1U;
   1252e:	f884 10ac 	strb.w	r1, [r4, #172]	; 0xac
				conn->llcp_cu.ack--;
   12532:	3b01      	subs	r3, #1
   12534:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   12538:	6833      	ldr	r3, [r6, #0]
				conn->llcp_cu.win_offset_us = 0U;
   1253a:	2000      	movs	r0, #0
   1253c:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   12540:	7119      	strb	r1, [r3, #4]
				break;
   12542:	e5af      	b.n	120a4 <ull_conn_rx+0x2c4>
			if (!conn->llcp_conn_param.cmd) {
   12544:	f894 00f6 	ldrb.w	r0, [r4, #246]	; 0xf6
	conn_upd_curr = NULL;
   12548:	4b32      	ldr	r3, [pc, #200]	; (12614 <ull_conn_rx+0x834>)
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1254a:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
	conn_upd_curr = NULL;
   1254e:	2100      	movs	r1, #0
			if (!conn->llcp_conn_param.cmd) {
   12550:	f010 0010 	ands.w	r0, r0, #16
	conn_upd_curr = NULL;
   12554:	6019      	str	r1, [r3, #0]
			if (!conn->llcp_conn_param.cmd) {
   12556:	d102      	bne.n	1255e <ull_conn_rx+0x77e>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   12558:	2301      	movs	r3, #1
   1255a:	712b      	strb	r3, [r5, #4]
		break;
   1255c:	e5a2      	b.n	120a4 <ull_conn_rx+0x2c4>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1255e:	2318      	movs	r3, #24
   12560:	712b      	strb	r3, [r5, #4]
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   12562:	231a      	movs	r3, #26
   12564:	772b      	strb	r3, [r5, #28]
			cu->latency = lll->latency;
   12566:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			cu->interval = lll->interval;
   12568:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
			cu->latency = lll->latency;
   1256a:	842b      	strh	r3, [r5, #32]
			cu->timeout = conn->supervision_reload *
   1256c:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
			cu->interval = lll->interval;
   12570:	83ea      	strh	r2, [r5, #30]
			cu->timeout = conn->supervision_reload *
   12572:	4353      	muls	r3, r2
				      lll->interval * 125U / 1000;
   12574:	227d      	movs	r2, #125	; 0x7d
   12576:	4353      	muls	r3, r2
   12578:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1257c:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   12580:	846b      	strh	r3, [r5, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
   12582:	e4ce      	b.n	11f22 <ull_conn_rx+0x142>
	tx = ctrl_tx_rsp_mem_acquire(conn, rx, &err);
   12584:	4629      	mov	r1, r5
   12586:	aa01      	add	r2, sp, #4
   12588:	4620      	mov	r0, r4
   1258a:	f7ff f955 	bl	11838 <ctrl_tx_rsp_mem_acquire>
	if (!tx) {
   1258e:	4601      	mov	r1, r0
   12590:	2800      	cmp	r0, #0
   12592:	f43f ad13 	beq.w	11fbc <ull_conn_rx+0x1dc>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   12596:	7903      	ldrb	r3, [r0, #4]
	pdu->llctrl.unknown_rsp.type = type;
   12598:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1259c:	f043 0303 	orr.w	r3, r3, #3
   125a0:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   125a2:	2302      	movs	r3, #2
   125a4:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   125a6:	2307      	movs	r3, #7
   125a8:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, tx);
   125aa:	4620      	mov	r0, r4
   125ac:	f00a fde8 	bl	1d180 <ctrl_tx_enqueue>
   125b0:	e421      	b.n	11df6 <ull_conn_rx+0x16>
			return -ENOBUFS;
   125b2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   125b6:	e575      	b.n	120a4 <ull_conn_rx+0x2c4>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   125b8:	2b23      	cmp	r3, #35	; 0x23
   125ba:	d003      	beq.n	125c4 <ull_conn_rx+0x7e4>
			conn->periph.ticks_to_offset =
   125bc:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
   125c0:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   125c4:	f894 10f6 	ldrb.w	r1, [r4, #246]	; 0xf6
   125c8:	f001 000f 	and.w	r0, r1, #15
   125cc:	2804      	cmp	r0, #4
   125ce:	d106      	bne.n	125de <ull_conn_rx+0x7fe>
	conn_upd_curr = NULL;
   125d0:	4e10      	ldr	r6, [pc, #64]	; (12614 <ull_conn_rx+0x834>)
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   125d2:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
	conn_upd_curr = NULL;
   125d6:	2000      	movs	r0, #0
   125d8:	6030      	str	r0, [r6, #0]
		conn->procedure_expire = 0U;
   125da:	f8a4 0078 	strh.w	r0, [r4, #120]	; 0x78
	if (!conn->llcp_conn_param.cmd) {
   125de:	06ca      	lsls	r2, r1, #27
   125e0:	f57f ac09 	bpl.w	11df6 <ull_conn_rx+0x16>
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   125e4:	2218      	movs	r2, #24
   125e6:	712a      	strb	r2, [r5, #4]
	cu->status = rej_ext_ind->error_code;
   125e8:	772b      	strb	r3, [r5, #28]
	cu->latency = lll->latency;
   125ea:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
	cu->interval = lll->interval;
   125ec:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
	cu->latency = lll->latency;
   125ee:	842b      	strh	r3, [r5, #32]
	cu->timeout = conn->supervision_reload *
   125f0:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
	cu->interval = lll->interval;
   125f4:	83ea      	strh	r2, [r5, #30]
	cu->timeout = conn->supervision_reload *
   125f6:	4353      	muls	r3, r2
		      lll->interval * 125U / 1000;
   125f8:	227d      	movs	r2, #125	; 0x7d
   125fa:	4353      	muls	r3, r2
   125fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12600:	fbb3 f3f2 	udiv	r3, r3, r2
	cu->timeout = conn->supervision_reload *
   12604:	846b      	strh	r3, [r5, #34]	; 0x22
	if (err) {
   12606:	e401      	b.n	11e0c <ull_conn_rx+0x2c>
   12608:	00022ca1 	.word	0x00022ca1
   1260c:	00022d44 	.word	0x00022d44
   12610:	00020429 	.word	0x00020429
   12614:	200027a4 	.word	0x200027a4

00012618 <ull_conn_tx_demux>:
{
   12618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   1261a:	4c1f      	ldr	r4, [pc, #124]	; (12698 <ull_conn_tx_demux+0x80>)
{
   1261c:	4605      	mov	r5, r0
	return (void *)(fifo + first * size);
   1261e:	1d26      	adds	r6, r4, #4
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   12620:	78a3      	ldrb	r3, [r4, #2]
	if (first == last) {
   12622:	78e1      	ldrb	r1, [r4, #3]
   12624:	7822      	ldrb	r2, [r4, #0]
   12626:	4299      	cmp	r1, r3
   12628:	d02b      	beq.n	12682 <ull_conn_tx_demux+0x6a>
	return (void *)(fifo + first * size);
   1262a:	fb13 f302 	smulbb	r3, r3, r2
		if (!lll_tx) {
   1262e:	18f7      	adds	r7, r6, r3
   12630:	d027      	beq.n	12682 <ull_conn_tx_demux+0x6a>
		conn = ll_connected_get(lll_tx->handle);
   12632:	5af0      	ldrh	r0, [r6, r3]
   12634:	f00a fde7 	bl	1d206 <ll_connected_get>
		if (conn) {
   12638:	6879      	ldr	r1, [r7, #4]
   1263a:	b318      	cbz	r0, 12684 <ull_conn_tx_demux+0x6c>
			tx->next = NULL;
   1263c:	2300      	movs	r3, #0
   1263e:	600b      	str	r3, [r1, #0]
			if (!conn->tx_data) {
   12640:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   12644:	b943      	cbnz	r3, 12658 <ull_conn_tx_demux+0x40>
				if (!conn->tx_head) {
   12646:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
				conn->tx_data = tx;
   1264a:	f8c0 1128 	str.w	r1, [r0, #296]	; 0x128
				if (!conn->tx_head) {
   1264e:	b91b      	cbnz	r3, 12658 <ull_conn_tx_demux+0x40>
					conn->tx_head = tx;
   12650:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
					conn->tx_data_last = NULL;
   12654:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
			if (conn->tx_data_last) {
   12658:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
   1265c:	b103      	cbz	r3, 12660 <ull_conn_tx_demux+0x48>
				conn->tx_data_last->next = tx;
   1265e:	6019      	str	r1, [r3, #0]
			conn->tx_data_last = tx;
   12660:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
	uint8_t _first = *first; /* Copy read-index */
   12664:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   12666:	78e1      	ldrb	r1, [r4, #3]
		MFIFO_DEQUEUE(conn_tx);
   12668:	7862      	ldrb	r2, [r4, #1]
   1266a:	4299      	cmp	r1, r3
   1266c:	d005      	beq.n	1267a <ull_conn_tx_demux+0x62>
	_first += 1U;
   1266e:	3301      	adds	r3, #1
   12670:	b2db      	uxtb	r3, r3
		_first = 0U;
   12672:	429a      	cmp	r2, r3
   12674:	bf08      	it	eq
   12676:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   12678:	70a3      	strb	r3, [r4, #2]
	} while (--count);
   1267a:	3d01      	subs	r5, #1
   1267c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   12680:	d1ce      	bne.n	12620 <ull_conn_tx_demux+0x8>
}
   12682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			p->ll_id = PDU_DATA_LLID_RESV;
   12684:	790b      	ldrb	r3, [r1, #4]
   12686:	f360 0301 	bfi	r3, r0, #0, #2
   1268a:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
   1268c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   12690:	f7fe fa4e 	bl	10b30 <ll_tx_ack_put>
   12694:	e7e6      	b.n	12664 <ull_conn_tx_demux+0x4c>
   12696:	bf00      	nop
   12698:	200008c0 	.word	0x200008c0

0001269c <conn_cleanup>:
	if (conn == conn_upd_curr) {
   1269c:	4b3d      	ldr	r3, [pc, #244]	; (12794 <conn_cleanup+0xf8>)
{
   1269e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (conn == conn_upd_curr) {
   126a2:	681a      	ldr	r2, [r3, #0]
	*((uint8_t *)rx->pdu) = reason;
   126a4:	f880 10f0 	strb.w	r1, [r0, #240]	; 0xf0
	if (conn == conn_upd_curr) {
   126a8:	4290      	cmp	r0, r2
		conn_upd_curr = NULL;
   126aa:	bf04      	itt	eq
   126ac:	2200      	moveq	r2, #0
   126ae:	601a      	streq	r2, [r3, #0]
	rx->hdr.handle = conn->lll.handle;
   126b0:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   126b2:	f8a0 30da 	strh.w	r3, [r0, #218]	; 0xda
	rx = conn->llcp_rx;
   126b6:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   126ba:	2317      	movs	r3, #23
{
   126bc:	4604      	mov	r4, r0
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   126be:	f880 30d8 	strb.w	r3, [r0, #216]	; 0xd8
		hdr->type = NODE_RX_TYPE_RELEASE;
   126c2:	2501      	movs	r5, #1
	while (rx) {
   126c4:	bb49      	cbnz	r1, 1271a <conn_cleanup+0x7e>
		link = mem_acquire(&mem_link_tx.free);
   126c6:	4f34      	ldr	r7, [pc, #208]	; (12798 <conn_cleanup+0xfc>)
		LL_ASSERT(link);
   126c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 1279c <conn_cleanup+0x100>
   126cc:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 127a0 <conn_cleanup+0x104>
	while (conn->tx_head) {
   126d0:	f8d4 511c 	ldr.w	r5, [r4, #284]	; 0x11c
   126d4:	bb45      	cbnz	r5, 12728 <conn_cleanup+0x8c>
				    TICKER_ID_CONN_BASE + lll->handle,
   126d6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   126d8:	4b32      	ldr	r3, [pc, #200]	; (127a4 <conn_cleanup+0x108>)
   126da:	9400      	str	r4, [sp, #0]
				    TICKER_ID_CONN_BASE + lll->handle,
   126dc:	3205      	adds	r2, #5
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   126de:	b2d2      	uxtb	r2, r2
   126e0:	2101      	movs	r1, #1
   126e2:	4628      	mov	r0, r5
   126e4:	f7fc fc72 	bl	efcc <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   126e8:	f030 0302 	bics.w	r3, r0, #2
   126ec:	d00c      	beq.n	12708 <conn_cleanup+0x6c>
   126ee:	4a2b      	ldr	r2, [pc, #172]	; (1279c <conn_cleanup+0x100>)
   126f0:	492d      	ldr	r1, [pc, #180]	; (127a8 <conn_cleanup+0x10c>)
   126f2:	482e      	ldr	r0, [pc, #184]	; (127ac <conn_cleanup+0x110>)
   126f4:	f240 73d3 	movw	r3, #2003	; 0x7d3
   126f8:	f006 fa64 	bl	18bc4 <printk>
   126fc:	4040      	eors	r0, r0
   126fe:	f380 8811 	msr	BASEPRI, r0
   12702:	f04f 0003 	mov.w	r0, #3
   12706:	df02      	svc	2
	lll->handle = LLL_HANDLE_INVALID;
   12708:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   1270c:	20ff      	movs	r0, #255	; 0xff
	lll->handle = LLL_HANDLE_INVALID;
   1270e:	8523      	strh	r3, [r4, #40]	; 0x28
}
   12710:	b003      	add	sp, #12
   12712:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	ull_conn_tx_demux(UINT8_MAX);
   12716:	f7ff bf7f 	b.w	12618 <ull_conn_tx_demux>
		rx = hdr->link->mem;
   1271a:	6808      	ldr	r0, [r1, #0]
   1271c:	6846      	ldr	r6, [r0, #4]
		hdr->type = NODE_RX_TYPE_RELEASE;
   1271e:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   12720:	f7fe f944 	bl	109ac <ll_rx_put>
		rx = hdr->link->mem;
   12724:	4631      	mov	r1, r6
   12726:	e7cd      	b.n	126c4 <conn_cleanup+0x28>
	if (conn->tx_head == conn->tx_ctrl) {
   12728:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
		conn->tx_head = conn->tx_head->next;
   1272c:	682b      	ldr	r3, [r5, #0]
	if (conn->tx_head == conn->tx_ctrl) {
   1272e:	4295      	cmp	r5, r2
   12730:	d124      	bne.n	1277c <conn_cleanup+0xe0>
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   12732:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
		conn->tx_head = conn->tx_head->next;
   12736:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   1273a:	4295      	cmp	r5, r2
			conn->tx_ctrl = NULL;
   1273c:	bf06      	itte	eq
   1273e:	2300      	moveq	r3, #0
			conn->tx_ctrl_last = NULL;
   12740:	e9c4 3348 	strdeq	r3, r3, [r4, #288]	; 0x120
			conn->tx_ctrl = conn->tx_head;
   12744:	f8c4 3120 	strne.w	r3, [r4, #288]	; 0x120
		tx->next = tx;
   12748:	602d      	str	r5, [r5, #0]
		link = mem_acquire(&mem_link_tx.free);
   1274a:	4638      	mov	r0, r7
   1274c:	f00a f808 	bl	1c760 <mem_acquire>
		LL_ASSERT(link);
   12750:	4606      	mov	r6, r0
   12752:	b960      	cbnz	r0, 1276e <conn_cleanup+0xd2>
   12754:	4815      	ldr	r0, [pc, #84]	; (127ac <conn_cleanup+0x110>)
   12756:	f640 030a 	movw	r3, #2058	; 0x80a
   1275a:	4642      	mov	r2, r8
   1275c:	4649      	mov	r1, r9
   1275e:	f006 fa31 	bl	18bc4 <printk>
   12762:	4040      	eors	r0, r0
   12764:	f380 8811 	msr	BASEPRI, r0
   12768:	f04f 0003 	mov.w	r0, #3
   1276c:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   1276e:	f104 025c 	add.w	r2, r4, #92	; 0x5c
   12772:	4629      	mov	r1, r5
   12774:	4630      	mov	r0, r6
   12776:	f00a f851 	bl	1c81c <memq_enqueue>
   1277a:	e7a9      	b.n	126d0 <conn_cleanup+0x34>
		if (conn->tx_head == conn->tx_data) {
   1277c:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
		conn->tx_head = conn->tx_head->next;
   12780:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
		if (conn->tx_head == conn->tx_data) {
   12784:	4295      	cmp	r5, r2
			conn->tx_data = conn->tx_data->next;
   12786:	bf08      	it	eq
   12788:	f8c4 3128 	streq.w	r3, [r4, #296]	; 0x128
		tx->next = NULL;
   1278c:	2300      	movs	r3, #0
   1278e:	602b      	str	r3, [r5, #0]
   12790:	e7db      	b.n	1274a <conn_cleanup+0xae>
   12792:	bf00      	nop
   12794:	200027a4 	.word	0x200027a4
   12798:	20002910 	.word	0x20002910
   1279c:	00022ca1 	.word	0x00022ca1
   127a0:	00022242 	.word	0x00022242
   127a4:	000118c1 	.word	0x000118c1
   127a8:	00022d7e 	.word	0x00022d7e
   127ac:	00020429 	.word	0x00020429

000127b0 <ull_conn_done>:
{
   127b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	conn = CONTAINER_OF(done->param, struct ll_conn, ull);
   127b4:	69c4      	ldr	r4, [r0, #28]
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   127b6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   127b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   127bc:	429a      	cmp	r2, r3
{
   127be:	b08a      	sub	sp, #40	; 0x28
   127c0:	4680      	mov	r8, r0
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   127c2:	f000 80ba 	beq.w	1293a <ull_conn_done+0x18a>
	reason_final = conn->llcp_terminate.reason_final;
   127c6:	f894 50d3 	ldrb.w	r5, [r4, #211]	; 0xd3
	if (reason_final && (
   127ca:	b135      	cbz	r5, 127da <ull_conn_done+0x2a>
		conn_cleanup(conn, reason_final);
   127cc:	4629      	mov	r1, r5
   127ce:	4620      	mov	r0, r4
}
   127d0:	b00a      	add	sp, #40	; 0x28
   127d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		conn_cleanup(conn, reason_final);
   127d6:	f7ff bf61 	b.w	1269c <conn_cleanup>
	latency_event = lll->latency_event;
   127da:	8e27      	ldrh	r7, [r4, #48]	; 0x30
	if (done->extra.trx_cnt) {
   127dc:	8c83      	ldrh	r3, [r0, #36]	; 0x24
	elapsed_event = latency_event + 1;
   127de:	1c7e      	adds	r6, r7, #1
	ticks_drift_minus = 0U;
   127e0:	e9cd 5508 	strd	r5, r5, [sp, #32]
	elapsed_event = latency_event + 1;
   127e4:	b2b6      	uxth	r6, r6
	if (done->extra.trx_cnt) {
   127e6:	b17b      	cbz	r3, 12808 <ull_conn_done+0x58>
		} else if (lll->role) {
   127e8:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   127ec:	2b00      	cmp	r3, #0
   127ee:	da08      	bge.n	12802 <ull_conn_done+0x52>
			ull_drift_ticks_get(done, &ticks_drift_plus,
   127f0:	aa08      	add	r2, sp, #32
   127f2:	a909      	add	r1, sp, #36	; 0x24
   127f4:	f7ed fe5c 	bl	4b0 <ull_drift_ticks_get>
			if (!conn->tx_head) {
   127f8:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   127fc:	b163      	cbz	r3, 12818 <ull_conn_done+0x68>
				lll->latency_event = 0;
   127fe:	2300      	movs	r3, #0
				lll->latency_event = lll->latency;
   12800:	8623      	strh	r3, [r4, #48]	; 0x30
		conn->connect_expire = 0U;
   12802:	2300      	movs	r3, #0
   12804:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
	if (done->extra.crc_valid) {
   12808:	f898 3026 	ldrb.w	r3, [r8, #38]	; 0x26
   1280c:	07db      	lsls	r3, r3, #31
   1280e:	d517      	bpl.n	12840 <ull_conn_done+0x90>
		conn->supervision_expire = 0U;
   12810:	2300      	movs	r3, #0
			conn->supervision_expire = conn->supervision_reload;
   12812:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
   12816:	e01c      	b.n	12852 <ull_conn_done+0xa2>
				ull_conn_tx_demux(UINT8_MAX);
   12818:	20ff      	movs	r0, #255	; 0xff
   1281a:	f7ff fefd 	bl	12618 <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   1281e:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   12822:	2b00      	cmp	r3, #0
   12824:	d1eb      	bne.n	127fe <ull_conn_done+0x4e>
   12826:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
   1282a:	462a      	mov	r2, r5
   1282c:	f009 fffd 	bl	1c82a <memq_peek>
   12830:	2800      	cmp	r0, #0
   12832:	d1e4      	bne.n	127fe <ull_conn_done+0x4e>
			} else if (lll->periph.latency_enabled) {
   12834:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   12838:	075a      	lsls	r2, r3, #29
   1283a:	d5e2      	bpl.n	12802 <ull_conn_done+0x52>
				lll->latency_event = lll->latency;
   1283c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   1283e:	e7df      	b.n	12800 <ull_conn_done+0x50>
	else if (conn->connect_expire) {
   12840:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
   12844:	2b00      	cmp	r3, #0
   12846:	d07b      	beq.n	12940 <ull_conn_done+0x190>
		if (conn->connect_expire > elapsed_event) {
   12848:	42b3      	cmp	r3, r6
   1284a:	d972      	bls.n	12932 <ull_conn_done+0x182>
			conn->connect_expire -= elapsed_event;
   1284c:	1b9b      	subs	r3, r3, r6
   1284e:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
	if (conn->supervision_expire) {
   12852:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
   12856:	b1e3      	cbz	r3, 12892 <ull_conn_done+0xe2>
		if (conn->supervision_expire > elapsed_event) {
   12858:	42b3      	cmp	r3, r6
   1285a:	d978      	bls.n	1294e <ull_conn_done+0x19e>
			conn->supervision_expire -= elapsed_event;
   1285c:	1b9b      	subs	r3, r3, r6
   1285e:	b29b      	uxth	r3, r3
			lll->latency_event = 0U;
   12860:	2200      	movs	r2, #0
			if (conn->supervision_expire <= 6U) {
   12862:	2b06      	cmp	r3, #6
			conn->supervision_expire -= elapsed_event;
   12864:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
			lll->latency_event = 0U;
   12868:	8622      	strh	r2, [r4, #48]	; 0x30
			if (conn->supervision_expire <= 6U) {
   1286a:	d972      	bls.n	12952 <ull_conn_done+0x1a2>
			else if (lll->role) {
   1286c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   12870:	4293      	cmp	r3, r2
   12872:	da0e      	bge.n	12892 <ull_conn_done+0xe2>
				if (latency_event) {
   12874:	2f00      	cmp	r7, #0
   12876:	d16c      	bne.n	12952 <ull_conn_done+0x1a2>
					force = conn->periph.force & 0x01;
   12878:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
					conn->periph.force >>= 1U;
   1287c:	085a      	lsrs	r2, r3, #1
					if (force) {
   1287e:	f013 0301 	ands.w	r3, r3, #1
						conn->periph.force |= BIT(31);
   12882:	bf17      	itett	ne
   12884:	f042 4200 	orrne.w	r2, r2, #2147483648	; 0x80000000
					conn->periph.force >>= 1U;
   12888:	f8c4 2080 	streq.w	r2, [r4, #128]	; 0x80
						conn->periph.force |= BIT(31);
   1288c:	f8c4 2080 	strne.w	r2, [r4, #128]	; 0x80
					force = conn->periph.force & 0x01;
   12890:	461d      	movne	r5, r3
	if (conn->procedure_expire != 0U) {
   12892:	f8b4 3078 	ldrh.w	r3, [r4, #120]	; 0x78
   12896:	b123      	cbz	r3, 128a2 <ull_conn_done+0xf2>
		if (conn->procedure_expire > elapsed_event) {
   12898:	42b3      	cmp	r3, r6
   1289a:	d95c      	bls.n	12956 <ull_conn_done+0x1a6>
			conn->procedure_expire -= elapsed_event;
   1289c:	1b9b      	subs	r3, r3, r6
   1289e:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   128a2:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   128a6:	f894 2089 	ldrb.w	r2, [r4, #137]	; 0x89
   128aa:	1a9b      	subs	r3, r3, r2
   128ac:	f003 0303 	and.w	r3, r3, #3
   128b0:	2b02      	cmp	r3, #2
   128b2:	d104      	bne.n	128be <ull_conn_done+0x10e>
	     ((conn->llcp_type == LLCP_CONN_UPD) ||
   128b4:	f894 308a 	ldrb.w	r3, [r4, #138]	; 0x8a
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   128b8:	3b01      	subs	r3, #1
   128ba:	2b01      	cmp	r3, #1
   128bc:	d905      	bls.n	128ca <ull_conn_done+0x11a>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   128be:	f894 209c 	ldrb.w	r2, [r4, #156]	; 0x9c
   128c2:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
   128c6:	429a      	cmp	r2, r3
   128c8:	d001      	beq.n	128ce <ull_conn_done+0x11e>
		lll->latency_event = 0U;
   128ca:	2300      	movs	r3, #0
   128cc:	8623      	strh	r3, [r4, #48]	; 0x30
	if ((force) || (latency_event != lll->latency_event)) {
   128ce:	8e21      	ldrh	r1, [r4, #48]	; 0x30
   128d0:	b90d      	cbnz	r5, 128d6 <ull_conn_done+0x126>
   128d2:	428f      	cmp	r7, r1
   128d4:	d041      	beq.n	1295a <ull_conn_done+0x1aa>
		lazy = lll->latency_event + 1U;
   128d6:	3101      	adds	r1, #1
   128d8:	b289      	uxth	r1, r1
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   128da:	e9dd 7308 	ldrd	r7, r3, [sp, #32]
   128de:	ea53 0207 	orrs.w	r2, r3, r7
   128e2:	d101      	bne.n	128e8 <ull_conn_done+0x138>
   128e4:	b901      	cbnz	r1, 128e8 <ull_conn_done+0x138>
   128e6:	b345      	cbz	r5, 1293a <ull_conn_done+0x18a>
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   128e8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   128ea:	481d      	ldr	r0, [pc, #116]	; (12960 <ull_conn_done+0x1b0>)
		struct ll_conn *conn = lll->hdr.parent;
   128ec:	69e6      	ldr	r6, [r4, #28]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   128ee:	9606      	str	r6, [sp, #24]
   128f0:	e9cd 5004 	strd	r5, r0, [sp, #16]
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   128f4:	3205      	adds	r2, #5
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   128f6:	2000      	movs	r0, #0
   128f8:	9103      	str	r1, [sp, #12]
   128fa:	e9cd 0001 	strd	r0, r0, [sp, #4]
   128fe:	9700      	str	r7, [sp, #0]
   12900:	b2d2      	uxtb	r2, r2
   12902:	2101      	movs	r1, #1
   12904:	f00a fa3a 	bl	1cd7c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   12908:	f030 0302 	bics.w	r3, r0, #2
   1290c:	d015      	beq.n	1293a <ull_conn_done+0x18a>
   1290e:	f7fe f997 	bl	10c40 <ull_disable_mark_get>
   12912:	4286      	cmp	r6, r0
   12914:	d011      	beq.n	1293a <ull_conn_done+0x18a>
   12916:	4a13      	ldr	r2, [pc, #76]	; (12964 <ull_conn_done+0x1b4>)
   12918:	4913      	ldr	r1, [pc, #76]	; (12968 <ull_conn_done+0x1b8>)
   1291a:	4814      	ldr	r0, [pc, #80]	; (1296c <ull_conn_done+0x1bc>)
   1291c:	f240 53ef 	movw	r3, #1519	; 0x5ef
   12920:	f006 f950 	bl	18bc4 <printk>
   12924:	4040      	eors	r0, r0
   12926:	f380 8811 	msr	BASEPRI, r0
   1292a:	f04f 0003 	mov.w	r0, #3
   1292e:	df02      	svc	2
   12930:	e003      	b.n	1293a <ull_conn_done+0x18a>
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
   12932:	213e      	movs	r1, #62	; 0x3e
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
   12934:	4620      	mov	r0, r4
   12936:	f7ff feb1 	bl	1269c <conn_cleanup>
}
   1293a:	b00a      	add	sp, #40	; 0x28
   1293c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!conn->supervision_expire) {
   12940:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
   12944:	2b00      	cmp	r3, #0
   12946:	d184      	bne.n	12852 <ull_conn_done+0xa2>
			conn->supervision_expire = conn->supervision_reload;
   12948:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
   1294c:	e761      	b.n	12812 <ull_conn_done+0x62>
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
   1294e:	2108      	movs	r1, #8
   12950:	e7f0      	b.n	12934 <ull_conn_done+0x184>
				force = 1U;
   12952:	2501      	movs	r5, #1
   12954:	e79d      	b.n	12892 <ull_conn_done+0xe2>
			conn_cleanup(conn, BT_HCI_ERR_LL_RESP_TIMEOUT);
   12956:	2122      	movs	r1, #34	; 0x22
   12958:	e7ec      	b.n	12934 <ull_conn_done+0x184>
	lazy = 0U;
   1295a:	4629      	mov	r1, r5
   1295c:	e7bd      	b.n	128da <ull_conn_done+0x12a>
   1295e:	bf00      	nop
   12960:	00011ad1 	.word	0x00011ad1
   12964:	00022ca1 	.word	0x00022ca1
   12968:	00022dab 	.word	0x00022dab
   1296c:	00020429 	.word	0x00020429

00012970 <ull_conn_tx_lll_enqueue>:
{
   12970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   12974:	f8df 8088 	ldr.w	r8, [pc, #136]	; 12a00 <ull_conn_tx_lll_enqueue+0x90>
		LL_ASSERT(link);
   12978:	f8df 9088 	ldr.w	r9, [pc, #136]	; 12a04 <ull_conn_tx_lll_enqueue+0x94>
   1297c:	f8df a088 	ldr.w	sl, [pc, #136]	; 12a08 <ull_conn_tx_lll_enqueue+0x98>
{
   12980:	4604      	mov	r4, r0
   12982:	460e      	mov	r6, r1
	while (conn->tx_head &&
   12984:	f8d4 511c 	ldr.w	r5, [r4, #284]	; 0x11c
   12988:	b105      	cbz	r5, 1298c <ull_conn_tx_lll_enqueue+0x1c>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   1298a:	b90e      	cbnz	r6, 12990 <ull_conn_tx_lll_enqueue+0x20>
}
   1298c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (conn->tx_head == conn->tx_ctrl) {
   12990:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
		conn->tx_head = conn->tx_head->next;
   12994:	682b      	ldr	r3, [r5, #0]
	if (conn->tx_head == conn->tx_ctrl) {
   12996:	4295      	cmp	r5, r2
   12998:	d126      	bne.n	129e8 <ull_conn_tx_lll_enqueue+0x78>
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   1299a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
		conn->tx_head = conn->tx_head->next;
   1299e:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   129a2:	4295      	cmp	r5, r2
			conn->tx_ctrl = NULL;
   129a4:	bf06      	itte	eq
   129a6:	2300      	moveq	r3, #0
			conn->tx_ctrl_last = NULL;
   129a8:	e9c4 3348 	strdeq	r3, r3, [r4, #288]	; 0x120
			conn->tx_ctrl = conn->tx_head;
   129ac:	f8c4 3120 	strne.w	r3, [r4, #288]	; 0x120
		tx->next = tx;
   129b0:	602d      	str	r5, [r5, #0]
		link = mem_acquire(&mem_link_tx.free);
   129b2:	4640      	mov	r0, r8
   129b4:	f009 fed4 	bl	1c760 <mem_acquire>
		LL_ASSERT(link);
   129b8:	4607      	mov	r7, r0
   129ba:	b960      	cbnz	r0, 129d6 <ull_conn_tx_lll_enqueue+0x66>
   129bc:	4813      	ldr	r0, [pc, #76]	; (12a0c <ull_conn_tx_lll_enqueue+0x9c>)
   129be:	f240 6343 	movw	r3, #1603	; 0x643
   129c2:	464a      	mov	r2, r9
   129c4:	4651      	mov	r1, sl
   129c6:	f006 f8fd 	bl	18bc4 <printk>
   129ca:	4040      	eors	r0, r0
   129cc:	f380 8811 	msr	BASEPRI, r0
   129d0:	f04f 0003 	mov.w	r0, #3
   129d4:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   129d6:	f104 025c 	add.w	r2, r4, #92	; 0x5c
   129da:	4629      	mov	r1, r5
   129dc:	4638      	mov	r0, r7
   129de:	3e01      	subs	r6, #1
   129e0:	f009 ff1c 	bl	1c81c <memq_enqueue>
   129e4:	b2f6      	uxtb	r6, r6
   129e6:	e7cd      	b.n	12984 <ull_conn_tx_lll_enqueue+0x14>
		if (conn->tx_head == conn->tx_data) {
   129e8:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
		conn->tx_head = conn->tx_head->next;
   129ec:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
		if (conn->tx_head == conn->tx_data) {
   129f0:	4295      	cmp	r5, r2
			conn->tx_data = conn->tx_data->next;
   129f2:	bf08      	it	eq
   129f4:	f8c4 3128 	streq.w	r3, [r4, #296]	; 0x128
		tx->next = NULL;
   129f8:	2300      	movs	r3, #0
   129fa:	602b      	str	r3, [r5, #0]
   129fc:	e7d9      	b.n	129b2 <ull_conn_tx_lll_enqueue+0x42>
   129fe:	bf00      	nop
   12a00:	20002910 	.word	0x20002910
   12a04:	00022ca1 	.word	0x00022ca1
   12a08:	00022242 	.word	0x00022242
   12a0c:	00020429 	.word	0x00020429

00012a10 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   12a10:	4901      	ldr	r1, [pc, #4]	; (12a18 <ull_conn_link_tx_release+0x8>)
   12a12:	f009 bebe 	b.w	1c792 <mem_release>
   12a16:	bf00      	nop
   12a18:	20002910 	.word	0x20002910

00012a1c <ull_conn_ack_last_idx_get>:
}
   12a1c:	4b01      	ldr	r3, [pc, #4]	; (12a24 <ull_conn_ack_last_idx_get+0x8>)
   12a1e:	78d8      	ldrb	r0, [r3, #3]
   12a20:	4770      	bx	lr
   12a22:	bf00      	nop
   12a24:	20000874 	.word	0x20000874

00012a28 <ull_conn_ack_peek>:
{
   12a28:	b570      	push	{r4, r5, r6, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   12a2a:	4b0a      	ldr	r3, [pc, #40]	; (12a54 <ull_conn_ack_peek+0x2c>)
   12a2c:	789c      	ldrb	r4, [r3, #2]
   12a2e:	78de      	ldrb	r6, [r3, #3]
	if (first == last) {
   12a30:	42b4      	cmp	r4, r6
{
   12a32:	4605      	mov	r5, r0
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   12a34:	7818      	ldrb	r0, [r3, #0]
   12a36:	d00b      	beq.n	12a50 <ull_conn_ack_peek+0x28>
	return (void *)(fifo + first * size);
   12a38:	3304      	adds	r3, #4
   12a3a:	fb14 f400 	smulbb	r4, r4, r0
	if (!lll_tx) {
   12a3e:	1918      	adds	r0, r3, r4
   12a40:	d005      	beq.n	12a4e <ull_conn_ack_peek+0x26>
	*ack_last = mfifo_conn_ack.l;
   12a42:	702e      	strb	r6, [r5, #0]
	*handle = lll_tx->handle;
   12a44:	5b1b      	ldrh	r3, [r3, r4]
   12a46:	800b      	strh	r3, [r1, #0]
	*tx = lll_tx->node;
   12a48:	6843      	ldr	r3, [r0, #4]
   12a4a:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   12a4c:	6818      	ldr	r0, [r3, #0]
}
   12a4e:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   12a50:	2000      	movs	r0, #0
   12a52:	e7fc      	b.n	12a4e <ull_conn_ack_peek+0x26>
   12a54:	20000874 	.word	0x20000874

00012a58 <ull_conn_ack_by_last_peek>:
{
   12a58:	b530      	push	{r4, r5, lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   12a5a:	4b09      	ldr	r3, [pc, #36]	; (12a80 <ull_conn_ack_by_last_peek+0x28>)
   12a5c:	789c      	ldrb	r4, [r3, #2]
   12a5e:	781d      	ldrb	r5, [r3, #0]
	if (first == last) {
   12a60:	4284      	cmp	r4, r0
   12a62:	d00a      	beq.n	12a7a <ull_conn_ack_by_last_peek+0x22>
	return (void *)(fifo + first * size);
   12a64:	3304      	adds	r3, #4
   12a66:	fb14 f405 	smulbb	r4, r4, r5
	if (!lll_tx) {
   12a6a:	1918      	adds	r0, r3, r4
   12a6c:	d004      	beq.n	12a78 <ull_conn_ack_by_last_peek+0x20>
	*handle = lll_tx->handle;
   12a6e:	5b1b      	ldrh	r3, [r3, r4]
   12a70:	800b      	strh	r3, [r1, #0]
	*tx = lll_tx->node;
   12a72:	6843      	ldr	r3, [r0, #4]
   12a74:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   12a76:	6818      	ldr	r0, [r3, #0]
}
   12a78:	bd30      	pop	{r4, r5, pc}
		return NULL;
   12a7a:	2000      	movs	r0, #0
   12a7c:	e7fc      	b.n	12a78 <ull_conn_ack_by_last_peek+0x20>
   12a7e:	bf00      	nop
   12a80:	20000874 	.word	0x20000874

00012a84 <ull_conn_ack_dequeue>:
{
   12a84:	b510      	push	{r4, lr}
	return MFIFO_DEQUEUE(conn_ack);
   12a86:	4a09      	ldr	r2, [pc, #36]	; (12aac <ull_conn_ack_dequeue+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   12a88:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   12a8a:	78d0      	ldrb	r0, [r2, #3]
   12a8c:	7811      	ldrb	r1, [r2, #0]
   12a8e:	7854      	ldrb	r4, [r2, #1]
   12a90:	4298      	cmp	r0, r3
   12a92:	d009      	beq.n	12aa8 <ull_conn_ack_dequeue+0x24>
	mem = *((void **)(fifo + _first * size));
   12a94:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   12a98:	3301      	adds	r3, #1
   12a9a:	b2db      	uxtb	r3, r3
		_first = 0U;
   12a9c:	429c      	cmp	r4, r3
   12a9e:	bf08      	it	eq
   12aa0:	2300      	moveq	r3, #0
	mem = *((void **)(fifo + _first * size));
   12aa2:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   12aa4:	7093      	strb	r3, [r2, #2]
}
   12aa6:	bd10      	pop	{r4, pc}
		return NULL;
   12aa8:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(conn_ack);
   12aaa:	e7fc      	b.n	12aa6 <ull_conn_ack_dequeue+0x22>
   12aac:	20000874 	.word	0x20000874

00012ab0 <ull_conn_lll_ack_enqueue>:
{
   12ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   12ab2:	4a12      	ldr	r2, [pc, #72]	; (12afc <ull_conn_lll_ack_enqueue+0x4c>)
   12ab4:	78d4      	ldrb	r4, [r2, #3]
	if (last == count) {
   12ab6:	7857      	ldrb	r7, [r2, #1]
   12ab8:	7895      	ldrb	r5, [r2, #2]
   12aba:	7816      	ldrb	r6, [r2, #0]
	last = last + 1;
   12abc:	1c63      	adds	r3, r4, #1
   12abe:	b2db      	uxtb	r3, r3
		last = 0U;
   12ac0:	429f      	cmp	r7, r3
   12ac2:	bf08      	it	eq
   12ac4:	2300      	moveq	r3, #0
	if (last == first) {
   12ac6:	429d      	cmp	r5, r3
   12ac8:	d004      	beq.n	12ad4 <ull_conn_lll_ack_enqueue+0x24>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   12aca:	1d15      	adds	r5, r2, #4
   12acc:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(lll_tx);
   12ad0:	192e      	adds	r6, r5, r4
   12ad2:	d10f      	bne.n	12af4 <ull_conn_lll_ack_enqueue+0x44>
   12ad4:	4a0a      	ldr	r2, [pc, #40]	; (12b00 <ull_conn_lll_ack_enqueue+0x50>)
   12ad6:	490b      	ldr	r1, [pc, #44]	; (12b04 <ull_conn_lll_ack_enqueue+0x54>)
   12ad8:	480b      	ldr	r0, [pc, #44]	; (12b08 <ull_conn_lll_ack_enqueue+0x58>)
   12ada:	f240 6381 	movw	r3, #1665	; 0x681
   12ade:	f006 f871 	bl	18bc4 <printk>
   12ae2:	4040      	eors	r0, r0
   12ae4:	f380 8811 	msr	BASEPRI, r0
   12ae8:	f04f 0003 	mov.w	r0, #3
   12aec:	df02      	svc	2
	lll_tx->handle = handle;
   12aee:	2300      	movs	r3, #0
   12af0:	801b      	strh	r3, [r3, #0]
   12af2:	deff      	udf	#255	; 0xff
   12af4:	5328      	strh	r0, [r5, r4]
	lll_tx->node = tx;
   12af6:	6071      	str	r1, [r6, #4]
	*last = idx; /* Commit: Update write index */
   12af8:	70d3      	strb	r3, [r2, #3]
}
   12afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12afc:	20000874 	.word	0x20000874
   12b00:	00022ca1 	.word	0x00022ca1
   12b04:	00022d3d 	.word	0x00022d3d
   12b08:	00020429 	.word	0x00020429

00012b0c <ull_conn_tx_ack>:
{
   12b0c:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(pdu_tx->len);
   12b0e:	7953      	ldrb	r3, [r2, #5]
{
   12b10:	4605      	mov	r5, r0
   12b12:	460e      	mov	r6, r1
   12b14:	4614      	mov	r4, r2
	LL_ASSERT(pdu_tx->len);
   12b16:	b963      	cbnz	r3, 12b32 <ull_conn_tx_ack+0x26>
   12b18:	4a2c      	ldr	r2, [pc, #176]	; (12bcc <ull_conn_tx_ack+0xc0>)
   12b1a:	492d      	ldr	r1, [pc, #180]	; (12bd0 <ull_conn_tx_ack+0xc4>)
   12b1c:	482d      	ldr	r0, [pc, #180]	; (12bd4 <ull_conn_tx_ack+0xc8>)
   12b1e:	f240 638e 	movw	r3, #1678	; 0x68e
   12b22:	f006 f84f 	bl	18bc4 <printk>
   12b26:	4040      	eors	r0, r0
   12b28:	f380 8811 	msr	BASEPRI, r0
   12b2c:	f04f 0003 	mov.w	r0, #3
   12b30:	df02      	svc	2
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   12b32:	7923      	ldrb	r3, [r4, #4]
   12b34:	f003 0203 	and.w	r2, r3, #3
   12b38:	2a03      	cmp	r2, #3
   12b3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12b3e:	d13e      	bne.n	12bbe <ull_conn_tx_ack+0xb2>
		if (handle != LLL_HANDLE_INVALID) {
   12b40:	4295      	cmp	r5, r2
   12b42:	d008      	beq.n	12b56 <ull_conn_tx_ack+0x4a>
			struct ll_conn *conn = ll_conn_get(handle);
   12b44:	4628      	mov	r0, r5
   12b46:	f7ff f86f 	bl	11c28 <ll_conn_get>
	switch (pdu_tx->llctrl.opcode) {
   12b4a:	79e3      	ldrb	r3, [r4, #7]
   12b4c:	2b07      	cmp	r3, #7
   12b4e:	d00f      	beq.n	12b70 <ull_conn_tx_ack+0x64>
   12b50:	d80a      	bhi.n	12b68 <ull_conn_tx_ack+0x5c>
   12b52:	2b02      	cmp	r3, #2
   12b54:	d013      	beq.n	12b7e <ull_conn_tx_ack+0x72>
		if (link->next == (void *)tx) {
   12b56:	6833      	ldr	r3, [r6, #0]
   12b58:	42a3      	cmp	r3, r4
   12b5a:	d11c      	bne.n	12b96 <ull_conn_tx_ack+0x8a>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   12b5c:	4620      	mov	r0, r4
   12b5e:	491e      	ldr	r1, [pc, #120]	; (12bd8 <ull_conn_tx_ack+0xcc>)
}
   12b60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
   12b64:	f009 be15 	b.w	1c792 <mem_release>
	switch (pdu_tx->llctrl.opcode) {
   12b68:	2b09      	cmp	r3, #9
   12b6a:	d001      	beq.n	12b70 <ull_conn_tx_ack+0x64>
   12b6c:	2b13      	cmp	r3, #19
   12b6e:	d1f2      	bne.n	12b56 <ull_conn_tx_ack+0x4a>
		conn->common.txn_lock = 0U;
   12b70:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
   12b74:	f36f 0341 	bfc	r3, #1, #1
   12b78:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
		break;
   12b7c:	e7eb      	b.n	12b56 <ull_conn_tx_ack+0x4a>
		if (pdu_tx->llctrl.terminate_ind.error_code ==
   12b7e:	7a23      	ldrb	r3, [r4, #8]
			conn->llcp_terminate.reason_final =
   12b80:	2b13      	cmp	r3, #19
   12b82:	bf08      	it	eq
   12b84:	2316      	moveq	r3, #22
   12b86:	f880 30d3 	strb.w	r3, [r0, #211]	; 0xd3
		conn->llcp_terminate.ack--;
   12b8a:	f890 30d1 	ldrb.w	r3, [r0, #209]	; 0xd1
   12b8e:	3b01      	subs	r3, #1
   12b90:	f880 30d1 	strb.w	r3, [r0, #209]	; 0xd1
	break;
   12b94:	e7df      	b.n	12b56 <ull_conn_tx_ack+0x4a>
			LL_ASSERT(!link->next);
   12b96:	b163      	cbz	r3, 12bb2 <ull_conn_tx_ack+0xa6>
   12b98:	4a0c      	ldr	r2, [pc, #48]	; (12bcc <ull_conn_tx_ack+0xc0>)
   12b9a:	4910      	ldr	r1, [pc, #64]	; (12bdc <ull_conn_tx_ack+0xd0>)
   12b9c:	480d      	ldr	r0, [pc, #52]	; (12bd4 <ull_conn_tx_ack+0xc8>)
   12b9e:	f240 63a1 	movw	r3, #1697	; 0x6a1
   12ba2:	f006 f80f 	bl	18bc4 <printk>
   12ba6:	4040      	eors	r0, r0
   12ba8:	f380 8811 	msr	BASEPRI, r0
   12bac:	f04f 0003 	mov.w	r0, #3
   12bb0:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   12bb2:	4621      	mov	r1, r4
   12bb4:	4628      	mov	r0, r5
}
   12bb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
   12bba:	f7fd bfb9 	b.w	10b30 <ll_tx_ack_put>
	} else if (handle == LLL_HANDLE_INVALID) {
   12bbe:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   12bc0:	bf04      	itt	eq
   12bc2:	f36f 0301 	bfceq	r3, #0, #2
   12bc6:	7123      	strbeq	r3, [r4, #4]
   12bc8:	e7f3      	b.n	12bb2 <ull_conn_tx_ack+0xa6>
   12bca:	bf00      	nop
   12bcc:	00022ca1 	.word	0x00022ca1
   12bd0:	00022e04 	.word	0x00022e04
   12bd4:	00020429 	.word	0x00020429
   12bd8:	2000285c 	.word	0x2000285c
   12bdc:	00022e10 	.word	0x00022e10

00012be0 <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param)
{
   12be0:	b510      	push	{r4, lr}
   12be2:	460c      	mov	r4, r1
	struct ll_conn *conn = param;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   12be4:	b160      	cbz	r0, 12c00 <ticker_update_latency_cancel_op_cb+0x20>
   12be6:	4a0a      	ldr	r2, [pc, #40]	; (12c10 <ticker_update_latency_cancel_op_cb+0x30>)
   12be8:	490a      	ldr	r1, [pc, #40]	; (12c14 <ticker_update_latency_cancel_op_cb+0x34>)
   12bea:	480b      	ldr	r0, [pc, #44]	; (12c18 <ticker_update_latency_cancel_op_cb+0x38>)
   12bec:	f240 237e 	movw	r3, #638	; 0x27e
   12bf0:	f005 ffe8 	bl	18bc4 <printk>
   12bf4:	4040      	eors	r0, r0
   12bf6:	f380 8811 	msr	BASEPRI, r0
   12bfa:	f04f 0003 	mov.w	r0, #3
   12bfe:	df02      	svc	2

	conn->periph.latency_cancel = 0U;
   12c00:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   12c04:	f36f 0382 	bfc	r3, #2, #1
   12c08:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
}
   12c0c:	bd10      	pop	{r4, pc}
   12c0e:	bf00      	nop
   12c10:	00022e2d 	.word	0x00022e2d
   12c14:	00022e73 	.word	0x00022e73
   12c18:	00020429 	.word	0x00020429

00012c1c <ticker_op_cb>:
{
   12c1c:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   12c1e:	b160      	cbz	r0, 12c3a <ticker_op_cb+0x1e>
   12c20:	4a06      	ldr	r2, [pc, #24]	; (12c3c <ticker_op_cb+0x20>)
   12c22:	4907      	ldr	r1, [pc, #28]	; (12c40 <ticker_op_cb+0x24>)
   12c24:	4807      	ldr	r0, [pc, #28]	; (12c44 <ticker_op_cb+0x28>)
   12c26:	f240 2376 	movw	r3, #630	; 0x276
   12c2a:	f005 ffcb 	bl	18bc4 <printk>
   12c2e:	4040      	eors	r0, r0
   12c30:	f380 8811 	msr	BASEPRI, r0
   12c34:	f04f 0003 	mov.w	r0, #3
   12c38:	df02      	svc	2
}
   12c3a:	bd08      	pop	{r3, pc}
   12c3c:	00022e2d 	.word	0x00022e2d
   12c40:	00022e7a 	.word	0x00022e7a
   12c44:	00020429 	.word	0x00020429

00012c48 <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   12c48:	2801      	cmp	r0, #1
{
   12c4a:	b510      	push	{r4, lr}
   12c4c:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   12c4e:	d110      	bne.n	12c72 <ticker_op_stop_adv_cb+0x2a>
   12c50:	f7fd fff6 	bl	10c40 <ull_disable_mark_get>
   12c54:	4284      	cmp	r4, r0
   12c56:	d00c      	beq.n	12c72 <ticker_op_stop_adv_cb+0x2a>
   12c58:	4a06      	ldr	r2, [pc, #24]	; (12c74 <ticker_op_stop_adv_cb+0x2c>)
   12c5a:	4907      	ldr	r1, [pc, #28]	; (12c78 <ticker_op_stop_adv_cb+0x30>)
   12c5c:	4807      	ldr	r0, [pc, #28]	; (12c7c <ticker_op_stop_adv_cb+0x34>)
   12c5e:	f240 236e 	movw	r3, #622	; 0x26e
   12c62:	f005 ffaf 	bl	18bc4 <printk>
   12c66:	4040      	eors	r0, r0
   12c68:	f380 8811 	msr	BASEPRI, r0
   12c6c:	f04f 0003 	mov.w	r0, #3
   12c70:	df02      	svc	2
}
   12c72:	bd10      	pop	{r4, pc}
   12c74:	00022e2d 	.word	0x00022e2d
   12c78:	00022e86 	.word	0x00022e86
   12c7c:	00020429 	.word	0x00020429

00012c80 <ull_periph_ticker_cb>:
{
   12c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12c84:	9c09      	ldr	r4, [sp, #36]	; 0x24
   12c86:	f89d 9020 	ldrb.w	r9, [sp, #32]
   12c8a:	4690      	mov	r8, r2
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   12c8c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
{
   12c8e:	461e      	mov	r6, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   12c90:	f64f 73ff 	movw	r3, #65535	; 0xffff
   12c94:	429a      	cmp	r2, r3
{
   12c96:	4607      	mov	r7, r0
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   12c98:	d03f      	beq.n	12d1a <ull_periph_ticker_cb+0x9a>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   12c9a:	4601      	mov	r1, r0
   12c9c:	4632      	mov	r2, r6
   12c9e:	4620      	mov	r0, r4
   12ca0:	f7ed fef6 	bl	a90 <ull_conn_llcp>
		if (ret) {
   12ca4:	2800      	cmp	r0, #0
   12ca6:	d138      	bne.n	12d1a <ull_periph_ticker_cb+0x9a>
	return ++hdr->ref;
   12ca8:	7825      	ldrb	r5, [r4, #0]
   12caa:	3501      	adds	r5, #1
   12cac:	b2ed      	uxtb	r5, r5
   12cae:	7025      	strb	r5, [r4, #0]
	LL_ASSERT(ref);
   12cb0:	b965      	cbnz	r5, 12ccc <ull_periph_ticker_cb+0x4c>
   12cb2:	4a1b      	ldr	r2, [pc, #108]	; (12d20 <ull_periph_ticker_cb+0xa0>)
   12cb4:	491b      	ldr	r1, [pc, #108]	; (12d24 <ull_periph_ticker_cb+0xa4>)
   12cb6:	481c      	ldr	r0, [pc, #112]	; (12d28 <ull_periph_ticker_cb+0xa8>)
   12cb8:	f44f 7300 	mov.w	r3, #512	; 0x200
   12cbc:	f005 ff82 	bl	18bc4 <printk>
   12cc0:	4040      	eors	r0, r0
   12cc2:	f380 8811 	msr	BASEPRI, r0
   12cc6:	f04f 0003 	mov.w	r0, #3
   12cca:	df02      	svc	2
	p.ticks_at_expire = ticks_at_expire;
   12ccc:	4d17      	ldr	r5, [pc, #92]	; (12d2c <ull_periph_ticker_cb+0xac>)
	p.param = &conn->lll;
   12cce:	f104 031c 	add.w	r3, r4, #28
   12cd2:	60eb      	str	r3, [r5, #12]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   12cd4:	2200      	movs	r2, #0
	mfy.param = &p;
   12cd6:	4b16      	ldr	r3, [pc, #88]	; (12d30 <ull_periph_ticker_cb+0xb0>)
	p.lazy = lazy;
   12cd8:	812e      	strh	r6, [r5, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   12cda:	4611      	mov	r1, r2
   12cdc:	2001      	movs	r0, #1
	p.remainder = remainder;
   12cde:	e9c5 7800 	strd	r7, r8, [r5]
	p.force = force;
   12ce2:	f885 900a 	strb.w	r9, [r5, #10]
	mfy.param = &p;
   12ce6:	609d      	str	r5, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   12ce8:	f7fb fbaa 	bl	e440 <mayfly_enqueue>
	LL_ASSERT(!err);
   12cec:	b160      	cbz	r0, 12d08 <ull_periph_ticker_cb+0x88>
   12cee:	4a0c      	ldr	r2, [pc, #48]	; (12d20 <ull_periph_ticker_cb+0xa0>)
   12cf0:	4910      	ldr	r1, [pc, #64]	; (12d34 <ull_periph_ticker_cb+0xb4>)
   12cf2:	480d      	ldr	r0, [pc, #52]	; (12d28 <ull_periph_ticker_cb+0xa8>)
   12cf4:	f240 230d 	movw	r3, #525	; 0x20d
   12cf8:	f005 ff64 	bl	18bc4 <printk>
   12cfc:	4040      	eors	r0, r0
   12cfe:	f380 8811 	msr	BASEPRI, r0
   12d02:	f04f 0003 	mov.w	r0, #3
   12d06:	df02      	svc	2
	ull_conn_tx_demux(UINT8_MAX);
   12d08:	20ff      	movs	r0, #255	; 0xff
   12d0a:	f7ff fc85 	bl	12618 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   12d0e:	4620      	mov	r0, r4
   12d10:	21ff      	movs	r1, #255	; 0xff
}
   12d12:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   12d16:	f7ff be2b 	b.w	12970 <ull_conn_tx_lll_enqueue>
}
   12d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12d1e:	bf00      	nop
   12d20:	00022e2d 	.word	0x00022e2d
   12d24:	00022bda 	.word	0x00022bda
   12d28:	00020429 	.word	0x00020429
   12d2c:	2000295c 	.word	0x2000295c
   12d30:	2000092c 	.word	0x2000092c
   12d34:	000229ad 	.word	0x000229ad

00012d38 <ull_periph_latency_cancel>:
{
   12d38:	b500      	push	{lr}
	if (conn->lll.latency_event && !conn->periph.latency_cancel) {
   12d3a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
{
   12d3c:	b089      	sub	sp, #36	; 0x24
	if (conn->lll.latency_event && !conn->periph.latency_cancel) {
   12d3e:	b33b      	cbz	r3, 12d90 <ull_periph_latency_cancel+0x58>
   12d40:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
   12d44:	f012 0304 	ands.w	r3, r2, #4
   12d48:	d122      	bne.n	12d90 <ull_periph_latency_cancel+0x58>
		conn->periph.latency_cancel = 1U;
   12d4a:	f042 0204 	orr.w	r2, r2, #4
   12d4e:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
				      (TICKER_ID_CONN_BASE + handle),
   12d52:	1d4a      	adds	r2, r1, #5
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   12d54:	4910      	ldr	r1, [pc, #64]	; (12d98 <ull_periph_latency_cancel+0x60>)
   12d56:	9006      	str	r0, [sp, #24]
   12d58:	e9cd 3104 	strd	r3, r1, [sp, #16]
   12d5c:	2101      	movs	r1, #1
   12d5e:	e9cd 3102 	strd	r3, r1, [sp, #8]
   12d62:	e9cd 3300 	strd	r3, r3, [sp]
   12d66:	4618      	mov	r0, r3
   12d68:	b2d2      	uxtb	r2, r2
   12d6a:	2103      	movs	r1, #3
   12d6c:	f00a f806 	bl	1cd7c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   12d70:	f030 0302 	bics.w	r3, r0, #2
   12d74:	d00c      	beq.n	12d90 <ull_periph_latency_cancel+0x58>
   12d76:	4a09      	ldr	r2, [pc, #36]	; (12d9c <ull_periph_latency_cancel+0x64>)
   12d78:	4909      	ldr	r1, [pc, #36]	; (12da0 <ull_periph_latency_cancel+0x68>)
   12d7a:	480a      	ldr	r0, [pc, #40]	; (12da4 <ull_periph_latency_cancel+0x6c>)
   12d7c:	f44f 73e3 	mov.w	r3, #454	; 0x1c6
   12d80:	f005 ff20 	bl	18bc4 <printk>
   12d84:	4040      	eors	r0, r0
   12d86:	f380 8811 	msr	BASEPRI, r0
   12d8a:	f04f 0003 	mov.w	r0, #3
   12d8e:	df02      	svc	2
}
   12d90:	b009      	add	sp, #36	; 0x24
   12d92:	f85d fb04 	ldr.w	pc, [sp], #4
   12d96:	bf00      	nop
   12d98:	00012be1 	.word	0x00012be1
   12d9c:	00022e2d 	.word	0x00022e2d
   12da0:	00022d7e 	.word	0x00022d7e
   12da4:	00020429 	.word	0x00020429

00012da8 <ll_fal_clear>:
{
	return FAL_SIZE;
}

uint8_t ll_fal_clear(void)
{
   12da8:	b508      	push	{r3, lr}
#if defined(CONFIG_BT_BROADCASTER)
	if (ull_adv_filter_pol_get(0)) {
   12daa:	2000      	movs	r0, #0
   12dac:	f00a f8d1 	bl	1cf52 <ull_adv_filter_pol_get>
   12db0:	b108      	cbz	r0, 12db6 <ll_fal_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   12db2:	200c      	movs	r0, #12
#endif /* CONFIG_BT_CTLR_PRIVACY */

	fal_anon = 0U;

	return 0;
}
   12db4:	bd08      	pop	{r3, pc}
	if (ull_scan_filter_pol_get(0) & 0x1) {
   12db6:	f00a f9c9 	bl	1d14c <ull_scan_filter_pol_get>
   12dba:	f010 0001 	ands.w	r0, r0, #1
   12dbe:	d1f8      	bne.n	12db2 <ll_fal_clear+0xa>
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   12dc0:	4b02      	ldr	r3, [pc, #8]	; (12dcc <ll_fal_clear+0x24>)
   12dc2:	7018      	strb	r0, [r3, #0]
	filter->addr_type_bitmask = 0;
   12dc4:	7058      	strb	r0, [r3, #1]
	fal_anon = 0U;
   12dc6:	4b02      	ldr	r3, [pc, #8]	; (12dd0 <ll_fal_clear+0x28>)
   12dc8:	7018      	strb	r0, [r3, #0]
	return 0;
   12dca:	e7f3      	b.n	12db4 <ll_fal_clear+0xc>
   12dcc:	20002fd4 	.word	0x20002fd4
   12dd0:	20002fd3 	.word	0x20002fd3

00012dd4 <ll_fal_add>:
{
   12dd4:	b570      	push	{r4, r5, r6, lr}
   12dd6:	4604      	mov	r4, r0
	if (ull_adv_filter_pol_get(0)) {
   12dd8:	2000      	movs	r0, #0
   12dda:	f00a f8ba 	bl	1cf52 <ull_adv_filter_pol_get>
   12dde:	b108      	cbz	r0, 12de4 <ll_fal_add+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   12de0:	200c      	movs	r0, #12
}
   12de2:	bd70      	pop	{r4, r5, r6, pc}
	if (ull_scan_filter_pol_get(0) & 0x1) {
   12de4:	f00a f9b2 	bl	1d14c <ull_scan_filter_pol_get>
   12de8:	f010 0001 	ands.w	r0, r0, #1
   12dec:	d1f8      	bne.n	12de0 <ll_fal_add+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
   12dee:	7823      	ldrb	r3, [r4, #0]
   12df0:	2bff      	cmp	r3, #255	; 0xff
   12df2:	d103      	bne.n	12dfc <ll_fal_add+0x28>
		fal_anon = 1U;
   12df4:	4b12      	ldr	r3, [pc, #72]	; (12e40 <ll_fal_add+0x6c>)
   12df6:	2201      	movs	r2, #1
   12df8:	701a      	strb	r2, [r3, #0]
		return 0;
   12dfa:	e7f2      	b.n	12de2 <ll_fal_add+0xe>
	if (filter->enable_bitmask == LLL_FILTER_BITMASK_ALL) {
   12dfc:	4d11      	ldr	r5, [pc, #68]	; (12e44 <ll_fal_add+0x70>)
   12dfe:	782a      	ldrb	r2, [r5, #0]
   12e00:	2aff      	cmp	r2, #255	; 0xff
	return filter_add(&fal_filter, addr->type, addr->a.val);
   12e02:	f104 0101 	add.w	r1, r4, #1
	if (filter->enable_bitmask == LLL_FILTER_BITMASK_ALL) {
   12e06:	d018      	beq.n	12e3a <ll_fal_add+0x66>
	     (filter->enable_bitmask & BIT(index));
   12e08:	fa22 f400 	lsr.w	r4, r2, r0
	for (index = 0;
   12e0c:	f014 0401 	ands.w	r4, r4, #1
   12e10:	d111      	bne.n	12e36 <ll_fal_add+0x62>
	filter->enable_bitmask |= BIT(index);
   12e12:	2601      	movs	r6, #1
   12e14:	4086      	lsls	r6, r0
   12e16:	4332      	orrs	r2, r6
   12e18:	702a      	strb	r2, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   12e1a:	f003 0301 	and.w	r3, r3, #1
   12e1e:	786a      	ldrb	r2, [r5, #1]
   12e20:	4083      	lsls	r3, r0
   12e22:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   12e24:	2206      	movs	r2, #6
   12e26:	fb02 5000 	mla	r0, r2, r0, r5
   12e2a:	3002      	adds	r0, #2
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   12e2c:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   12e2e:	f007 fa26 	bl	1a27e <memcpy>
	return filter_add(&fal_filter, addr->type, addr->a.val);
   12e32:	b2e0      	uxtb	r0, r4
   12e34:	e7d5      	b.n	12de2 <ll_fal_add+0xe>
	     index++) {
   12e36:	3001      	adds	r0, #1
   12e38:	e7e6      	b.n	12e08 <ll_fal_add+0x34>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   12e3a:	2407      	movs	r4, #7
   12e3c:	e7f9      	b.n	12e32 <ll_fal_add+0x5e>
   12e3e:	bf00      	nop
   12e40:	20002fd3 	.word	0x20002fd3
   12e44:	20002fd4 	.word	0x20002fd4

00012e48 <ll_fal_remove>:
{
   12e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12e4c:	4607      	mov	r7, r0
	if (ull_adv_filter_pol_get(0)) {
   12e4e:	2000      	movs	r0, #0
   12e50:	f00a f87f 	bl	1cf52 <ull_adv_filter_pol_get>
   12e54:	b110      	cbz	r0, 12e5c <ll_fal_remove+0x14>
		return BT_HCI_ERR_CMD_DISALLOWED;
   12e56:	200c      	movs	r0, #12
}
   12e58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ull_scan_filter_pol_get(0) & 0x1) {
   12e5c:	f00a f976 	bl	1d14c <ull_scan_filter_pol_get>
   12e60:	f010 0401 	ands.w	r4, r0, #1
   12e64:	d1f7      	bne.n	12e56 <ll_fal_remove+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
   12e66:	f897 8000 	ldrb.w	r8, [r7]
   12e6a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   12e6e:	d103      	bne.n	12e78 <ll_fal_remove+0x30>
		fal_anon = 0U;
   12e70:	4b17      	ldr	r3, [pc, #92]	; (12ed0 <ll_fal_remove+0x88>)
		return 0;
   12e72:	4620      	mov	r0, r4
		fal_anon = 0U;
   12e74:	701c      	strb	r4, [r3, #0]
		return 0;
   12e76:	e7ef      	b.n	12e58 <ll_fal_remove+0x10>
	if (!filter->enable_bitmask) {
   12e78:	4d16      	ldr	r5, [pc, #88]	; (12ed4 <ll_fal_remove+0x8c>)
   12e7a:	782b      	ldrb	r3, [r5, #0]
	return filter_remove(&fal_filter, addr->type, addr->a.val);
   12e7c:	3701      	adds	r7, #1
	if (!filter->enable_bitmask) {
   12e7e:	b123      	cbz	r3, 12e8a <ll_fal_remove+0x42>
   12e80:	f105 092c 	add.w	r9, r5, #44	; 0x2c
	index = FAL_SIZE;
   12e84:	2608      	movs	r6, #8
	while (index--) {
   12e86:	3e01      	subs	r6, #1
   12e88:	d202      	bcs.n	12e90 <ll_fal_remove+0x48>
		return BT_HCI_ERR_INVALID_PARAM;
   12e8a:	2412      	movs	r4, #18
	return filter_remove(&fal_filter, addr->type, addr->a.val);
   12e8c:	b2e0      	uxtb	r0, r4
   12e8e:	e7e3      	b.n	12e58 <ll_fal_remove+0x10>
		if ((filter->enable_bitmask & BIT(index)) &&
   12e90:	782b      	ldrb	r3, [r5, #0]
   12e92:	40f3      	lsrs	r3, r6
   12e94:	07da      	lsls	r2, r3, #31
   12e96:	d517      	bpl.n	12ec8 <ll_fal_remove+0x80>
		    (((filter->addr_type_bitmask >> index) & 0x01) ==
   12e98:	786b      	ldrb	r3, [r5, #1]
   12e9a:	4133      	asrs	r3, r6
   12e9c:	ea83 0308 	eor.w	r3, r3, r8
		if ((filter->enable_bitmask & BIT(index)) &&
   12ea0:	07db      	lsls	r3, r3, #31
   12ea2:	d411      	bmi.n	12ec8 <ll_fal_remove+0x80>
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
   12ea4:	2206      	movs	r2, #6
   12ea6:	4639      	mov	r1, r7
   12ea8:	4648      	mov	r0, r9
   12eaa:	f007 f9d7 	bl	1a25c <memcmp>
		     (addr_type & 0x01)) &&
   12eae:	b958      	cbnz	r0, 12ec8 <ll_fal_remove+0x80>
			filter->enable_bitmask &= ~BIT(index);
   12eb0:	2301      	movs	r3, #1
   12eb2:	fa03 f606 	lsl.w	r6, r3, r6
   12eb6:	782b      	ldrb	r3, [r5, #0]
   12eb8:	ea23 0306 	bic.w	r3, r3, r6
   12ebc:	702b      	strb	r3, [r5, #0]
			filter->addr_type_bitmask &= ~BIT(index);
   12ebe:	786b      	ldrb	r3, [r5, #1]
   12ec0:	ea23 0606 	bic.w	r6, r3, r6
   12ec4:	706e      	strb	r6, [r5, #1]
			return 0;
   12ec6:	e7e1      	b.n	12e8c <ll_fal_remove+0x44>
   12ec8:	f1a9 0906 	sub.w	r9, r9, #6
   12ecc:	e7db      	b.n	12e86 <ll_fal_remove+0x3e>
   12ece:	bf00      	nop
   12ed0:	20002fd3 	.word	0x20002fd3
   12ed4:	20002fd4 	.word	0x20002fd4

00012ed8 <ull_filter_reset>:
	fal_anon = 0U;
   12ed8:	4a03      	ldr	r2, [pc, #12]	; (12ee8 <ull_filter_reset+0x10>)
   12eda:	2300      	movs	r3, #0
   12edc:	7013      	strb	r3, [r2, #0]
	filter->enable_bitmask = 0;
   12ede:	4a03      	ldr	r2, [pc, #12]	; (12eec <ull_filter_reset+0x14>)
   12ee0:	7013      	strb	r3, [r2, #0]
	filter->addr_type_bitmask = 0;
   12ee2:	7053      	strb	r3, [r2, #1]
}
   12ee4:	4770      	bx	lr
   12ee6:	bf00      	nop
   12ee8:	20002fd3 	.word	0x20002fd3
   12eec:	20002fd4 	.word	0x20002fd4

00012ef0 <ull_filter_lll_get>:
{
   12ef0:	b508      	push	{r3, lr}
	LL_ASSERT(filter);
   12ef2:	b960      	cbnz	r0, 12f0e <ull_filter_lll_get+0x1e>
   12ef4:	4a07      	ldr	r2, [pc, #28]	; (12f14 <ull_filter_lll_get+0x24>)
   12ef6:	4908      	ldr	r1, [pc, #32]	; (12f18 <ull_filter_lll_get+0x28>)
   12ef8:	4808      	ldr	r0, [pc, #32]	; (12f1c <ull_filter_lll_get+0x2c>)
   12efa:	f240 23e3 	movw	r3, #739	; 0x2e3
   12efe:	f005 fe61 	bl	18bc4 <printk>
   12f02:	4040      	eors	r0, r0
   12f04:	f380 8811 	msr	BASEPRI, r0
   12f08:	f04f 0003 	mov.w	r0, #3
   12f0c:	df02      	svc	2
}
   12f0e:	4804      	ldr	r0, [pc, #16]	; (12f20 <ull_filter_lll_get+0x30>)
   12f10:	bd08      	pop	{r3, pc}
   12f12:	bf00      	nop
   12f14:	00022ed9 	.word	0x00022ed9
   12f18:	00022f27 	.word	0x00022f27
   12f1c:	00020429 	.word	0x00020429
   12f20:	20002fd4 	.word	0x20002fd4

00012f24 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   12f24:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	lll_prof_enter_ull_high();

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   12f26:	4b08      	ldr	r3, [pc, #32]	; (12f48 <rtc0_nrf5_isr+0x24>)
   12f28:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   12f2c:	b122      	cbz	r2, 12f38 <rtc0_nrf5_isr+0x14>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   12f2e:	2000      	movs	r0, #0
   12f30:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140

		ticker_trigger(0);
   12f34:	f7fb ff9e 	bl	ee74 <ticker_trigger>
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   12f38:	2001      	movs	r0, #1
   12f3a:	f7fb fad1 	bl	e4e0 <mayfly_run>

	lll_prof_exit_ull_low();
#endif

	DEBUG_TICKER_ISR(0);
}
   12f3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   12f42:	2002      	movs	r0, #2
   12f44:	f7fb bacc 	b.w	e4e0 <mayfly_run>
   12f48:	4000b000 	.word	0x4000b000

00012f4c <ticker_stop_op_cb>:
static uint8_t preempt_stop_ack;
static uint8_t preempt_req;
static uint8_t volatile preempt_ack;

static void ticker_stop_op_cb(uint32_t status, void *param)
{
   12f4c:	b510      	push	{r4, lr}
	ARG_UNUSED(param);
	ARG_UNUSED(status);

	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   12f4e:	4b0d      	ldr	r3, [pc, #52]	; (12f84 <ticker_stop_op_cb+0x38>)
   12f50:	4c0d      	ldr	r4, [pc, #52]	; (12f88 <ticker_stop_op_cb+0x3c>)
   12f52:	781b      	ldrb	r3, [r3, #0]
   12f54:	7822      	ldrb	r2, [r4, #0]
   12f56:	429a      	cmp	r2, r3
   12f58:	d10c      	bne.n	12f74 <ticker_stop_op_cb+0x28>
   12f5a:	4a0c      	ldr	r2, [pc, #48]	; (12f8c <ticker_stop_op_cb+0x40>)
   12f5c:	490c      	ldr	r1, [pc, #48]	; (12f90 <ticker_stop_op_cb+0x44>)
   12f5e:	480d      	ldr	r0, [pc, #52]	; (12f94 <ticker_stop_op_cb+0x48>)
   12f60:	f240 23f6 	movw	r3, #758	; 0x2f6
   12f64:	f005 fe2e 	bl	18bc4 <printk>
   12f68:	4040      	eors	r0, r0
   12f6a:	f380 8811 	msr	BASEPRI, r0
   12f6e:	f04f 0003 	mov.w	r0, #3
   12f72:	df02      	svc	2
	preempt_stop_ack++;
   12f74:	7823      	ldrb	r3, [r4, #0]
   12f76:	3301      	adds	r3, #1
   12f78:	7023      	strb	r3, [r4, #0]

	preempt_req = preempt_ack;
   12f7a:	4b07      	ldr	r3, [pc, #28]	; (12f98 <ticker_stop_op_cb+0x4c>)
   12f7c:	781a      	ldrb	r2, [r3, #0]
   12f7e:	4b07      	ldr	r3, [pc, #28]	; (12f9c <ticker_stop_op_cb+0x50>)
   12f80:	701a      	strb	r2, [r3, #0]
}
   12f82:	bd10      	pop	{r4, pc}
   12f84:	2000300b 	.word	0x2000300b
   12f88:	2000300a 	.word	0x2000300a
   12f8c:	00022f2e 	.word	0x00022f2e
   12f90:	00022f74 	.word	0x00022f74
   12f94:	00020429 	.word	0x00020429
   12f98:	20003006 	.word	0x20003006
   12f9c:	20003007 	.word	0x20003007

00012fa0 <ticker_start_op_cb>:

static void ticker_start_op_cb(uint32_t status, void *param)
{
   12fa0:	b510      	push	{r4, lr}
	ARG_UNUSED(param);
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   12fa2:	b160      	cbz	r0, 12fbe <ticker_start_op_cb+0x1e>
   12fa4:	4a1c      	ldr	r2, [pc, #112]	; (13018 <ticker_start_op_cb+0x78>)
   12fa6:	491d      	ldr	r1, [pc, #116]	; (1301c <ticker_start_op_cb+0x7c>)
   12fa8:	481d      	ldr	r0, [pc, #116]	; (13020 <ticker_start_op_cb+0x80>)
   12faa:	f240 23ff 	movw	r3, #767	; 0x2ff
   12fae:	f005 fe09 	bl	18bc4 <printk>
   12fb2:	4040      	eors	r0, r0
   12fb4:	f380 8811 	msr	BASEPRI, r0
   12fb8:	f04f 0003 	mov.w	r0, #3
   12fbc:	df02      	svc	2

	LL_ASSERT(preempt_start_req != preempt_start_ack);
   12fbe:	4b19      	ldr	r3, [pc, #100]	; (13024 <ticker_start_op_cb+0x84>)
   12fc0:	4c19      	ldr	r4, [pc, #100]	; (13028 <ticker_start_op_cb+0x88>)
   12fc2:	781b      	ldrb	r3, [r3, #0]
   12fc4:	7822      	ldrb	r2, [r4, #0]
   12fc6:	429a      	cmp	r2, r3
   12fc8:	d10c      	bne.n	12fe4 <ticker_start_op_cb+0x44>
   12fca:	4a13      	ldr	r2, [pc, #76]	; (13018 <ticker_start_op_cb+0x78>)
   12fcc:	4917      	ldr	r1, [pc, #92]	; (1302c <ticker_start_op_cb+0x8c>)
   12fce:	4814      	ldr	r0, [pc, #80]	; (13020 <ticker_start_op_cb+0x80>)
   12fd0:	f240 3301 	movw	r3, #769	; 0x301
   12fd4:	f005 fdf6 	bl	18bc4 <printk>
   12fd8:	4040      	eors	r0, r0
   12fda:	f380 8811 	msr	BASEPRI, r0
   12fde:	f04f 0003 	mov.w	r0, #3
   12fe2:	df02      	svc	2
	preempt_start_ack++;
   12fe4:	7823      	ldrb	r3, [r4, #0]
   12fe6:	3301      	adds	r3, #1
   12fe8:	7023      	strb	r3, [r4, #0]

	LL_ASSERT(preempt_req == preempt_ack);
   12fea:	4b11      	ldr	r3, [pc, #68]	; (13030 <ticker_start_op_cb+0x90>)
   12fec:	4c11      	ldr	r4, [pc, #68]	; (13034 <ticker_start_op_cb+0x94>)
   12fee:	781b      	ldrb	r3, [r3, #0]
   12ff0:	7822      	ldrb	r2, [r4, #0]
   12ff2:	429a      	cmp	r2, r3
   12ff4:	d00c      	beq.n	13010 <ticker_start_op_cb+0x70>
   12ff6:	4a08      	ldr	r2, [pc, #32]	; (13018 <ticker_start_op_cb+0x78>)
   12ff8:	490f      	ldr	r1, [pc, #60]	; (13038 <ticker_start_op_cb+0x98>)
   12ffa:	4809      	ldr	r0, [pc, #36]	; (13020 <ticker_start_op_cb+0x80>)
   12ffc:	f44f 7341 	mov.w	r3, #772	; 0x304
   13000:	f005 fde0 	bl	18bc4 <printk>
   13004:	4040      	eors	r0, r0
   13006:	f380 8811 	msr	BASEPRI, r0
   1300a:	f04f 0003 	mov.w	r0, #3
   1300e:	df02      	svc	2
	preempt_req++;
   13010:	7823      	ldrb	r3, [r4, #0]
   13012:	3301      	adds	r3, #1
   13014:	7023      	strb	r3, [r4, #0]
}
   13016:	bd10      	pop	{r4, pc}
   13018:	00022f2e 	.word	0x00022f2e
   1301c:	00022e7a 	.word	0x00022e7a
   13020:	00020429 	.word	0x00020429
   13024:	20003009 	.word	0x20003009
   13028:	20003008 	.word	0x20003008
   1302c:	00022f99 	.word	0x00022f99
   13030:	20003006 	.word	0x20003006
   13034:	20003007 	.word	0x20003007
   13038:	00022fc0 	.word	0x00022fc0

0001303c <preempt_ticker_cb>:
}

static void preempt_ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
			      uint32_t remainder, uint16_t lazy, uint8_t force,
			      void *param)
{
   1303c:	b510      	push	{r4, lr}
	static memq_link_t link;
	static struct mayfly mfy = {0, 0, &link, NULL, preempt};
	uint32_t ret;

	LL_ASSERT(preempt_ack != preempt_req);
   1303e:	4a17      	ldr	r2, [pc, #92]	; (1309c <preempt_ticker_cb+0x60>)
   13040:	4c17      	ldr	r4, [pc, #92]	; (130a0 <preempt_ticker_cb+0x64>)
   13042:	7812      	ldrb	r2, [r2, #0]
   13044:	7823      	ldrb	r3, [r4, #0]
   13046:	429a      	cmp	r2, r3
   13048:	d10c      	bne.n	13064 <preempt_ticker_cb+0x28>
   1304a:	4a16      	ldr	r2, [pc, #88]	; (130a4 <preempt_ticker_cb+0x68>)
   1304c:	4916      	ldr	r1, [pc, #88]	; (130a8 <preempt_ticker_cb+0x6c>)
   1304e:	4817      	ldr	r0, [pc, #92]	; (130ac <preempt_ticker_cb+0x70>)
   13050:	f240 3365 	movw	r3, #869	; 0x365
   13054:	f005 fdb6 	bl	18bc4 <printk>
   13058:	4040      	eors	r0, r0
   1305a:	f380 8811 	msr	BASEPRI, r0
   1305e:	f04f 0003 	mov.w	r0, #3
   13062:	df02      	svc	2
	preempt_ack++;
   13064:	7823      	ldrb	r3, [r4, #0]

	mfy.param = param;
   13066:	9a03      	ldr	r2, [sp, #12]
	preempt_ack++;
   13068:	3301      	adds	r3, #1
   1306a:	b2db      	uxtb	r3, r3
   1306c:	7023      	strb	r3, [r4, #0]
	mfy.param = param;
   1306e:	4b10      	ldr	r3, [pc, #64]	; (130b0 <preempt_ticker_cb+0x74>)
   13070:	609a      	str	r2, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   13072:	2200      	movs	r2, #0
   13074:	4611      	mov	r1, r2
   13076:	2001      	movs	r0, #1
   13078:	f7fb f9e2 	bl	e440 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   1307c:	b160      	cbz	r0, 13098 <preempt_ticker_cb+0x5c>
   1307e:	4a09      	ldr	r2, [pc, #36]	; (130a4 <preempt_ticker_cb+0x68>)
   13080:	490c      	ldr	r1, [pc, #48]	; (130b4 <preempt_ticker_cb+0x78>)
   13082:	480a      	ldr	r0, [pc, #40]	; (130ac <preempt_ticker_cb+0x70>)
   13084:	f240 336b 	movw	r3, #875	; 0x36b
   13088:	f005 fd9c 	bl	18bc4 <printk>
   1308c:	4040      	eors	r0, r0
   1308e:	f380 8811 	msr	BASEPRI, r0
   13092:	f04f 0003 	mov.w	r0, #3
   13096:	df02      	svc	2
}
   13098:	bd10      	pop	{r4, pc}
   1309a:	bf00      	nop
   1309c:	20003007 	.word	0x20003007
   130a0:	20003006 	.word	0x20003006
   130a4:	00022f2e 	.word	0x00022f2e
   130a8:	00022fdb 	.word	0x00022fdb
   130ac:	00020429 	.word	0x00020429
   130b0:	2000093c 	.word	0x2000093c
   130b4:	00022a65 	.word	0x00022a65

000130b8 <preempt_ticker_stop>:
{
   130b8:	b513      	push	{r0, r1, r4, lr}
	if ((preempt_stop_req != preempt_stop_ack) ||
   130ba:	4a17      	ldr	r2, [pc, #92]	; (13118 <preempt_ticker_stop+0x60>)
   130bc:	4917      	ldr	r1, [pc, #92]	; (1311c <preempt_ticker_stop+0x64>)
   130be:	7813      	ldrb	r3, [r2, #0]
   130c0:	7809      	ldrb	r1, [r1, #0]
   130c2:	4299      	cmp	r1, r3
   130c4:	d003      	beq.n	130ce <preempt_ticker_stop+0x16>
		return TICKER_STATUS_SUCCESS;
   130c6:	2400      	movs	r4, #0
}
   130c8:	4620      	mov	r0, r4
   130ca:	b002      	add	sp, #8
   130cc:	bd10      	pop	{r4, pc}
	    (preempt_req == preempt_ack)) {
   130ce:	4b14      	ldr	r3, [pc, #80]	; (13120 <preempt_ticker_stop+0x68>)
   130d0:	4914      	ldr	r1, [pc, #80]	; (13124 <preempt_ticker_stop+0x6c>)
   130d2:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_stop_req != preempt_stop_ack) ||
   130d4:	7809      	ldrb	r1, [r1, #0]
   130d6:	4299      	cmp	r1, r3
   130d8:	d0f5      	beq.n	130c6 <preempt_ticker_stop+0xe>
	preempt_stop_req++;
   130da:	7813      	ldrb	r3, [r2, #0]
   130dc:	3301      	adds	r3, #1
   130de:	b2db      	uxtb	r3, r3
   130e0:	7013      	strb	r3, [r2, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   130e2:	2200      	movs	r2, #0
   130e4:	4b10      	ldr	r3, [pc, #64]	; (13128 <preempt_ticker_stop+0x70>)
   130e6:	9200      	str	r2, [sp, #0]
   130e8:	4611      	mov	r1, r2
   130ea:	4610      	mov	r0, r2
   130ec:	f7fb ff6e 	bl	efcc <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   130f0:	4604      	mov	r4, r0
   130f2:	2800      	cmp	r0, #0
   130f4:	d0e7      	beq.n	130c6 <preempt_ticker_stop+0xe>
   130f6:	2802      	cmp	r0, #2
   130f8:	d0e6      	beq.n	130c8 <preempt_ticker_stop+0x10>
   130fa:	4a0c      	ldr	r2, [pc, #48]	; (1312c <preempt_ticker_stop+0x74>)
   130fc:	490c      	ldr	r1, [pc, #48]	; (13130 <preempt_ticker_stop+0x78>)
   130fe:	480d      	ldr	r0, [pc, #52]	; (13134 <preempt_ticker_stop+0x7c>)
   13100:	f240 3357 	movw	r3, #855	; 0x357
   13104:	f005 fd5e 	bl	18bc4 <printk>
   13108:	4040      	eors	r0, r0
   1310a:	f380 8811 	msr	BASEPRI, r0
   1310e:	f04f 0003 	mov.w	r0, #3
   13112:	df02      	svc	2
   13114:	e7d8      	b.n	130c8 <preempt_ticker_stop+0x10>
   13116:	bf00      	nop
   13118:	2000300b 	.word	0x2000300b
   1311c:	2000300a 	.word	0x2000300a
   13120:	20003006 	.word	0x20003006
   13124:	20003007 	.word	0x20003007
   13128:	00012f4d 	.word	0x00012f4d
   1312c:	00022f2e 	.word	0x00022f2e
   13130:	00022b46 	.word	0x00022b46
   13134:	00020429 	.word	0x00020429

00013138 <preempt_ticker_start>:
	ull = HDR_LLL2ULL(p->param);
   13138:	68cb      	ldr	r3, [r1, #12]
   1313a:	681b      	ldr	r3, [r3, #0]
{
   1313c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	preempt_anchor = p->ticks_at_expire;
   13140:	f8d1 8000 	ldr.w	r8, [r1]
	preempt_to = MAX(ull->ticks_active_to_start,
   13144:	68de      	ldr	r6, [r3, #12]
	if ((preempt_start_req != preempt_start_ack) ||
   13146:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 131ec <preempt_ticker_start+0xb4>
{
   1314a:	460d      	mov	r5, r1
	preempt_to = MAX(ull->ticks_active_to_start,
   1314c:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   13150:	4291      	cmp	r1, r2
   13152:	bf2c      	ite	cs
   13154:	ebc6 0601 	rsbcs	r6, r6, r1
   13158:	ebc6 0602 	rsbcc	r6, r6, r2
	if ((preempt_start_req != preempt_start_ack) ||
   1315c:	4a24      	ldr	r2, [pc, #144]	; (131f0 <preempt_ticker_start+0xb8>)
   1315e:	f899 3000 	ldrb.w	r3, [r9]
   13162:	7812      	ldrb	r2, [r2, #0]
   13164:	429a      	cmp	r2, r3
{
   13166:	b08a      	sub	sp, #40	; 0x28
   13168:	4604      	mov	r4, r0
	ticks_at_preempt_new = preempt_anchor + preempt_to;
   1316a:	eb08 0706 	add.w	r7, r8, r6
	if ((preempt_start_req != preempt_start_ack) ||
   1316e:	d105      	bne.n	1317c <preempt_ticker_start+0x44>
	    (preempt_req != preempt_ack)) {
   13170:	4b20      	ldr	r3, [pc, #128]	; (131f4 <preempt_ticker_start+0xbc>)
   13172:	4a21      	ldr	r2, [pc, #132]	; (131f8 <preempt_ticker_start+0xc0>)
   13174:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   13176:	7812      	ldrb	r2, [r2, #0]
   13178:	429a      	cmp	r2, r3
   1317a:	d018      	beq.n	131ae <preempt_ticker_start+0x76>
		if (!prev || prev->is_aborted ||
   1317c:	2c00      	cmp	r4, #0
   1317e:	d032      	beq.n	131e6 <preempt_ticker_start+0xae>
   13180:	7f23      	ldrb	r3, [r4, #28]
   13182:	079b      	lsls	r3, r3, #30
   13184:	d42f      	bmi.n	131e6 <preempt_ticker_start+0xae>
		diff = ticks_at_preempt_new - ticks_at_preempt;
   13186:	f8df a074 	ldr.w	sl, [pc, #116]	; 131fc <preempt_ticker_start+0xc4>
   1318a:	f8da 2000 	ldr.w	r2, [sl]
   1318e:	1aba      	subs	r2, r7, r2
		if (!prev || prev->is_aborted ||
   13190:	f412 0000 	ands.w	r0, r2, #8388608	; 0x800000
   13194:	d024      	beq.n	131e0 <preempt_ticker_start+0xa8>
		preempt_ticker_stop();
   13196:	f7ff ff8f 	bl	130b8 <preempt_ticker_stop>
		prev->is_aborted = 1U;
   1319a:	7f23      	ldrb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   1319c:	68e1      	ldr	r1, [r4, #12]
		ticks_at_preempt = ticks_at_preempt_new;
   1319e:	f8ca 7000 	str.w	r7, [sl]
		prev->is_aborted = 1U;
   131a2:	f043 0302 	orr.w	r3, r3, #2
   131a6:	7723      	strb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   131a8:	4620      	mov	r0, r4
   131aa:	69a3      	ldr	r3, [r4, #24]
   131ac:	4798      	blx	r3
	preempt_start_req++;
   131ae:	f899 2000 	ldrb.w	r2, [r9]
	ticks_at_preempt = ticks_at_preempt_new;
   131b2:	4b12      	ldr	r3, [pc, #72]	; (131fc <preempt_ticker_start+0xc4>)
	preempt_start_req++;
   131b4:	3201      	adds	r2, #1
	ticks_at_preempt = ticks_at_preempt_new;
   131b6:	601f      	str	r7, [r3, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   131b8:	4b11      	ldr	r3, [pc, #68]	; (13200 <preempt_ticker_start+0xc8>)
   131ba:	9508      	str	r5, [sp, #32]
	preempt_start_req++;
   131bc:	b2d2      	uxtb	r2, r2
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   131be:	e9cd 5306 	strd	r5, r3, [sp, #24]
	preempt_start_req++;
   131c2:	f889 2000 	strb.w	r2, [r9]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   131c6:	4b0f      	ldr	r3, [pc, #60]	; (13204 <preempt_ticker_start+0xcc>)
   131c8:	9305      	str	r3, [sp, #20]
   131ca:	2200      	movs	r2, #0
   131cc:	e9cd 2203 	strd	r2, r2, [sp, #12]
   131d0:	e9cd 2201 	strd	r2, r2, [sp, #4]
   131d4:	9600      	str	r6, [sp, #0]
   131d6:	4643      	mov	r3, r8
   131d8:	4611      	mov	r1, r2
   131da:	4610      	mov	r0, r2
   131dc:	f009 fdb3 	bl	1cd46 <ticker_start>
}
   131e0:	b00a      	add	sp, #40	; 0x28
   131e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return TICKER_STATUS_SUCCESS;
   131e6:	2000      	movs	r0, #0
   131e8:	e7fa      	b.n	131e0 <preempt_ticker_start+0xa8>
   131ea:	bf00      	nop
   131ec:	20003009 	.word	0x20003009
   131f0:	20003008 	.word	0x20003008
   131f4:	20003006 	.word	0x20003006
   131f8:	20003007 	.word	0x20003007
   131fc:	20002984 	.word	0x20002984
   13200:	00012fa1 	.word	0x00012fa1
   13204:	0001303d 	.word	0x0001303d

00013208 <preempt>:

static void preempt(void *param)
{
   13208:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	uint8_t idx;
	int err;

	/* No event to abort */
	if (!event.curr.abort_cb || !event.curr.param) {
   1320a:	4c3b      	ldr	r4, [pc, #236]	; (132f8 <preempt+0xf0>)
   1320c:	68a3      	ldr	r3, [r4, #8]
{
   1320e:	b089      	sub	sp, #36	; 0x24
   13210:	4605      	mov	r5, r0
	if (!event.curr.abort_cb || !event.curr.param) {
   13212:	2b00      	cmp	r3, #0
   13214:	d034      	beq.n	13280 <preempt+0x78>
   13216:	6823      	ldr	r3, [r4, #0]
   13218:	2b00      	cmp	r3, #0
   1321a:	d031      	beq.n	13280 <preempt+0x78>
		return;
	}

	/* Check if any prepare in pipeline */
	idx = UINT8_MAX;
   1321c:	23ff      	movs	r3, #255	; 0xff
   1321e:	f88d 300a 	strb.w	r3, [sp, #10]
		return;
	}

	/* Find a prepare that is ready and not a resume */
	while (next && (next->is_aborted || next->is_resume)) {
		next = ull_prepare_dequeue_iter(&idx);
   13222:	f10d 000a 	add.w	r0, sp, #10
   13226:	f7fd fe2f 	bl	10e88 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   1322a:	4601      	mov	r1, r0
   1322c:	b340      	cbz	r0, 13280 <preempt+0x78>
   1322e:	7f06      	ldrb	r6, [r0, #28]
   13230:	f016 0603 	ands.w	r6, r6, #3
   13234:	d1f5      	bne.n	13222 <preempt+0x1a>
	if (!next) {
		return;
	}

	/* Preemptor not in pipeline */
	if (next != param) {
   13236:	4285      	cmp	r5, r0
   13238:	d013      	beq.n	13262 <preempt+0x5a>
		uint32_t ret;

		/* Start the preempt timeout */
		ret = preempt_ticker_start(NULL, next);
   1323a:	4630      	mov	r0, r6
   1323c:	f7ff ff7c 	bl	13138 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   13240:	f030 0302 	bics.w	r3, r0, #2
   13244:	d01c      	beq.n	13280 <preempt+0x78>
   13246:	4a2d      	ldr	r2, [pc, #180]	; (132fc <preempt+0xf4>)
   13248:	492d      	ldr	r1, [pc, #180]	; (13300 <preempt+0xf8>)
   1324a:	f240 3391 	movw	r3, #913	; 0x391

		/* Enqueue as resume event */
		iter = resume_enqueue(resume_cb);
		LL_ASSERT(iter);
	} else {
		LL_ASSERT(err == -ECANCELED);
   1324e:	482d      	ldr	r0, [pc, #180]	; (13304 <preempt+0xfc>)
   13250:	f005 fcb8 	bl	18bc4 <printk>
   13254:	4040      	eors	r0, r0
   13256:	f380 8811 	msr	BASEPRI, r0
   1325a:	f04f 0003 	mov.w	r0, #3
   1325e:	df02      	svc	2
   13260:	e00e      	b.n	13280 <preempt+0x78>
	err = event.curr.is_abort_cb(next->prepare_param.param,
   13262:	6863      	ldr	r3, [r4, #4]
   13264:	6821      	ldr	r1, [r4, #0]
   13266:	68e8      	ldr	r0, [r5, #12]
   13268:	aa03      	add	r2, sp, #12
   1326a:	4798      	blx	r3
	if (!err) {
   1326c:	4607      	mov	r7, r0
   1326e:	b948      	cbnz	r0, 13284 <preempt+0x7c>
		next->is_aborted = 1;
   13270:	7f2b      	ldrb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   13272:	68e9      	ldr	r1, [r5, #12]
		next->is_aborted = 1;
   13274:	f043 0302 	orr.w	r3, r3, #2
   13278:	772b      	strb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1327a:	4628      	mov	r0, r5
   1327c:	69ab      	ldr	r3, [r5, #24]
   1327e:	4798      	blx	r3
	}
}
   13280:	b009      	add	sp, #36	; 0x24
   13282:	bdf0      	pop	{r4, r5, r6, r7, pc}
	event.curr.abort_cb(NULL, event.curr.param);
   13284:	68a3      	ldr	r3, [r4, #8]
   13286:	6821      	ldr	r1, [r4, #0]
   13288:	4630      	mov	r0, r6
   1328a:	4798      	blx	r3
	if (err == -EAGAIN) {
   1328c:	f117 0f0b 	cmn.w	r7, #11
   13290:	d12b      	bne.n	132ea <preempt+0xe2>
		iter_idx = UINT8_MAX;
   13292:	25ff      	movs	r5, #255	; 0xff
				iter_idx = UINT8_MAX;
   13294:	f88d 500b 	strb.w	r5, [sp, #11]
			iter = ull_prepare_dequeue_iter(&iter_idx);
   13298:	f10d 000b 	add.w	r0, sp, #11
   1329c:	f7fd fdf4 	bl	10e88 <ull_prepare_dequeue_iter>
		while (iter) {
   132a0:	b9a0      	cbnz	r0, 132cc <preempt+0xc4>
	prepare_param.param = event.curr.param;
   132a2:	6823      	ldr	r3, [r4, #0]
   132a4:	9307      	str	r3, [sp, #28]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   132a6:	2301      	movs	r3, #1
	struct lll_prepare_param prepare_param = {0};
   132a8:	e9cd 0004 	strd	r0, r0, [sp, #16]
   132ac:	9006      	str	r0, [sp, #24]
	event.curr.param = NULL;
   132ae:	6020      	str	r0, [r4, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   132b0:	9300      	str	r3, [sp, #0]
   132b2:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
   132b6:	9b03      	ldr	r3, [sp, #12]
   132b8:	aa04      	add	r2, sp, #16
   132ba:	f7fd fda9 	bl	10e10 <ull_prepare_enqueue>
		LL_ASSERT(iter);
   132be:	2800      	cmp	r0, #0
   132c0:	d1de      	bne.n	13280 <preempt+0x78>
   132c2:	4a0e      	ldr	r2, [pc, #56]	; (132fc <preempt+0xf4>)
   132c4:	4910      	ldr	r1, [pc, #64]	; (13308 <preempt+0x100>)
   132c6:	f44f 7371 	mov.w	r3, #964	; 0x3c4
   132ca:	e7c0      	b.n	1324e <preempt+0x46>
			if (!iter->is_aborted &&
   132cc:	7f03      	ldrb	r3, [r0, #28]
   132ce:	0799      	lsls	r1, r3, #30
   132d0:	d4e2      	bmi.n	13298 <preempt+0x90>
			    (event.curr.param == iter->prepare_param.param) &&
   132d2:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   132d4:	6821      	ldr	r1, [r4, #0]
   132d6:	4291      	cmp	r1, r2
   132d8:	d1de      	bne.n	13298 <preempt+0x90>
			    (event.curr.param == iter->prepare_param.param) &&
   132da:	07da      	lsls	r2, r3, #31
   132dc:	d5dc      	bpl.n	13298 <preempt+0x90>
				iter->is_aborted = 1;
   132de:	f043 0302 	orr.w	r3, r3, #2
   132e2:	7703      	strb	r3, [r0, #28]
				iter->abort_cb(&iter->prepare_param,
   132e4:	6983      	ldr	r3, [r0, #24]
   132e6:	4798      	blx	r3
   132e8:	e7d4      	b.n	13294 <preempt+0x8c>
		LL_ASSERT(err == -ECANCELED);
   132ea:	378c      	adds	r7, #140	; 0x8c
   132ec:	d0c8      	beq.n	13280 <preempt+0x78>
   132ee:	4a03      	ldr	r2, [pc, #12]	; (132fc <preempt+0xf4>)
   132f0:	4906      	ldr	r1, [pc, #24]	; (1330c <preempt+0x104>)
   132f2:	f240 33c6 	movw	r3, #966	; 0x3c6
   132f6:	e7aa      	b.n	1324e <preempt+0x46>
   132f8:	20002970 	.word	0x20002970
   132fc:	00022f2e 	.word	0x00022f2e
   13300:	00022b46 	.word	0x00022b46
   13304:	00020429 	.word	0x00020429
   13308:	00022ff6 	.word	0x00022ff6
   1330c:	00022ffb 	.word	0x00022ffb

00013310 <lll_init>:
{
   13310:	b510      	push	{r4, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   13312:	4816      	ldr	r0, [pc, #88]	; (1336c <lll_init+0x5c>)
   13314:	f004 f816 	bl	17344 <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   13318:	4b15      	ldr	r3, [pc, #84]	; (13370 <lll_init+0x60>)
   1331a:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   1331c:	b310      	cbz	r0, 13364 <lll_init+0x54>
	event.curr.abort_cb = NULL;
   1331e:	4b15      	ldr	r3, [pc, #84]	; (13374 <lll_init+0x64>)
   13320:	2400      	movs	r4, #0
   13322:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   13324:	f000 fa2e 	bl	13784 <lll_clock_init>
	if (err < 0) {
   13328:	2800      	cmp	r0, #0
   1332a:	db1a      	blt.n	13362 <lll_init+0x52>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   1332c:	4622      	mov	r2, r4
   1332e:	4621      	mov	r1, r4
   13330:	2001      	movs	r0, #1
   13332:	f7f0 f84d 	bl	33d0 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   13336:	4622      	mov	r2, r4
   13338:	2101      	movs	r1, #1
   1333a:	200b      	movs	r0, #11
   1333c:	f7f0 f848 	bl	33d0 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   13340:	4622      	mov	r2, r4
   13342:	4621      	mov	r1, r4
   13344:	2018      	movs	r0, #24
   13346:	f7f0 f843 	bl	33d0 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   1334a:	2001      	movs	r0, #1
   1334c:	f7f0 f80e 	bl	336c <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   13350:	200b      	movs	r0, #11
   13352:	f7f0 f80b 	bl	336c <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   13356:	2018      	movs	r0, #24
   13358:	f7f0 f808 	bl	336c <arch_irq_enable>
	radio_setup();
   1335c:	f00a faee 	bl	1d93c <radio_setup>
	return 0;
   13360:	4620      	mov	r0, r4
}
   13362:	bd10      	pop	{r4, pc}
		return -ENODEV;
   13364:	f06f 0012 	mvn.w	r0, #18
   13368:	e7fb      	b.n	13362 <lll_init+0x52>
   1336a:	bf00      	nop
   1336c:	00023007 	.word	0x00023007
   13370:	2000296c 	.word	0x2000296c
   13374:	20002970 	.word	0x20002970

00013378 <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   13378:	4a05      	ldr	r2, [pc, #20]	; (13390 <lll_csrand_get+0x18>)
{
   1337a:	b410      	push	{r4}
   1337c:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   1337e:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   13380:	6882      	ldr	r2, [r0, #8]
   13382:	6814      	ldr	r4, [r2, #0]
   13384:	b28a      	uxth	r2, r1
   13386:	4619      	mov	r1, r3
   13388:	4623      	mov	r3, r4
}
   1338a:	bc10      	pop	{r4}
   1338c:	4718      	bx	r3
   1338e:	bf00      	nop
   13390:	2000296c 	.word	0x2000296c

00013394 <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   13394:	4b08      	ldr	r3, [pc, #32]	; (133b8 <lll_csrand_isr_get+0x24>)
{
   13396:	b430      	push	{r4, r5}
   13398:	4604      	mov	r4, r0
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   1339a:	6818      	ldr	r0, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1339c:	6883      	ldr	r3, [r0, #8]
   1339e:	685d      	ldr	r5, [r3, #4]
   133a0:	b28a      	uxth	r2, r1
   133a2:	b125      	cbz	r5, 133ae <lll_csrand_isr_get+0x1a>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   133a4:	4621      	mov	r1, r4
   133a6:	46ac      	mov	ip, r5
   133a8:	2300      	movs	r3, #0
}
   133aa:	bc30      	pop	{r4, r5}
   133ac:	4760      	bx	ip
   133ae:	f06f 0085 	mvn.w	r0, #133	; 0x85
   133b2:	bc30      	pop	{r4, r5}
   133b4:	4770      	bx	lr
   133b6:	bf00      	nop
   133b8:	2000296c 	.word	0x2000296c

000133bc <lll_disable>:
{
   133bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   133be:	4b19      	ldr	r3, [pc, #100]	; (13424 <lll_disable+0x68>)
	if (!param || (param == event.curr.param)) {
   133c0:	4604      	mov	r4, r0
   133c2:	b110      	cbz	r0, 133ca <lll_disable+0xe>
   133c4:	681a      	ldr	r2, [r3, #0]
   133c6:	4282      	cmp	r2, r0
   133c8:	d105      	bne.n	133d6 <lll_disable+0x1a>
		if (event.curr.abort_cb && event.curr.param) {
   133ca:	689a      	ldr	r2, [r3, #8]
   133cc:	b16a      	cbz	r2, 133ea <lll_disable+0x2e>
   133ce:	6819      	ldr	r1, [r3, #0]
   133d0:	b159      	cbz	r1, 133ea <lll_disable+0x2e>
			event.curr.abort_cb(NULL, event.curr.param);
   133d2:	2000      	movs	r0, #0
   133d4:	4790      	blx	r2
		idx = UINT8_MAX;
   133d6:	25ff      	movs	r5, #255	; 0xff
				idx = UINT8_MAX;
   133d8:	f88d 5007 	strb.w	r5, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
   133dc:	f10d 0007 	add.w	r0, sp, #7
   133e0:	f7fd fd52 	bl	10e88 <ull_prepare_dequeue_iter>
		while (next) {
   133e4:	b980      	cbnz	r0, 13408 <lll_disable+0x4c>
}
   133e6:	b003      	add	sp, #12
   133e8:	bd30      	pop	{r4, r5, pc}
			LL_ASSERT(!param);
   133ea:	2c00      	cmp	r4, #0
   133ec:	d0f3      	beq.n	133d6 <lll_disable+0x1a>
   133ee:	4a0e      	ldr	r2, [pc, #56]	; (13428 <lll_disable+0x6c>)
   133f0:	490e      	ldr	r1, [pc, #56]	; (1342c <lll_disable+0x70>)
   133f2:	480f      	ldr	r0, [pc, #60]	; (13430 <lll_disable+0x74>)
   133f4:	23fd      	movs	r3, #253	; 0xfd
   133f6:	f005 fbe5 	bl	18bc4 <printk>
   133fa:	4040      	eors	r0, r0
   133fc:	f380 8811 	msr	BASEPRI, r0
   13400:	f04f 0003 	mov.w	r0, #3
   13404:	df02      	svc	2
   13406:	e7e6      	b.n	133d6 <lll_disable+0x1a>
			if (!next->is_aborted &&
   13408:	7f03      	ldrb	r3, [r0, #28]
   1340a:	079b      	lsls	r3, r3, #30
   1340c:	d4e6      	bmi.n	133dc <lll_disable+0x20>
			    (!param || (param == next->prepare_param.param))) {
   1340e:	68c1      	ldr	r1, [r0, #12]
			if (!next->is_aborted &&
   13410:	b10c      	cbz	r4, 13416 <lll_disable+0x5a>
			    (!param || (param == next->prepare_param.param))) {
   13412:	428c      	cmp	r4, r1
   13414:	d1e2      	bne.n	133dc <lll_disable+0x20>
				next->is_aborted = 1;
   13416:	7f03      	ldrb	r3, [r0, #28]
   13418:	f043 0302 	orr.w	r3, r3, #2
   1341c:	7703      	strb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   1341e:	6983      	ldr	r3, [r0, #24]
   13420:	4798      	blx	r3
   13422:	e7d9      	b.n	133d8 <lll_disable+0x1c>
   13424:	20002970 	.word	0x20002970
   13428:	00022f2e 	.word	0x00022f2e
   1342c:	0002300b 	.word	0x0002300b
   13430:	00020429 	.word	0x00020429

00013434 <lll_done>:
{
   13434:	b538      	push	{r3, r4, r5, lr}
   13436:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   13438:	f7fd fd18 	bl	10e6c <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   1343c:	b17c      	cbz	r4, 1345e <lll_done+0x2a>
   1343e:	b960      	cbnz	r0, 1345a <lll_done+0x26>
   13440:	4a1d      	ldr	r2, [pc, #116]	; (134b8 <lll_done+0x84>)
   13442:	491e      	ldr	r1, [pc, #120]	; (134bc <lll_done+0x88>)
   13444:	481e      	ldr	r0, [pc, #120]	; (134c0 <lll_done+0x8c>)
   13446:	f240 1337 	movw	r3, #311	; 0x137
   1344a:	f005 fbbb 	bl	18bc4 <printk>
   1344e:	4040      	eors	r0, r0
   13450:	f380 8811 	msr	BASEPRI, r0
   13454:	f04f 0003 	mov.w	r0, #3
   13458:	df02      	svc	2
			ull = HDR_LLL2ULL(param);
   1345a:	6824      	ldr	r4, [r4, #0]
   1345c:	e015      	b.n	1348a <lll_done+0x56>
		LL_ASSERT(event.curr.abort_cb);
   1345e:	4d19      	ldr	r5, [pc, #100]	; (134c4 <lll_done+0x90>)
   13460:	68ab      	ldr	r3, [r5, #8]
   13462:	b963      	cbnz	r3, 1347e <lll_done+0x4a>
   13464:	4a14      	ldr	r2, [pc, #80]	; (134b8 <lll_done+0x84>)
   13466:	4918      	ldr	r1, [pc, #96]	; (134c8 <lll_done+0x94>)
   13468:	4815      	ldr	r0, [pc, #84]	; (134c0 <lll_done+0x8c>)
   1346a:	f240 133d 	movw	r3, #317	; 0x13d
   1346e:	f005 fba9 	bl	18bc4 <printk>
   13472:	4040      	eors	r0, r0
   13474:	f380 8811 	msr	BASEPRI, r0
   13478:	f04f 0003 	mov.w	r0, #3
   1347c:	df02      	svc	2
		param = event.curr.param;
   1347e:	682c      	ldr	r4, [r5, #0]
		event.curr.abort_cb = NULL;
   13480:	2300      	movs	r3, #0
   13482:	60ab      	str	r3, [r5, #8]
		event.curr.param = NULL;
   13484:	602b      	str	r3, [r5, #0]
		if (param) {
   13486:	2c00      	cmp	r4, #0
   13488:	d1e7      	bne.n	1345a <lll_done+0x26>
	ull_prepare_dequeue(TICKER_USER_ID_LLL);
   1348a:	2000      	movs	r0, #0
   1348c:	f7fd fd1a 	bl	10ec4 <ull_prepare_dequeue>
	evdone = ull_event_done(ull);
   13490:	4620      	mov	r0, r4
   13492:	f7fd fd6f 	bl	10f74 <ull_event_done>
	LL_ASSERT(evdone);
   13496:	b960      	cbnz	r0, 134b2 <lll_done+0x7e>
   13498:	4a07      	ldr	r2, [pc, #28]	; (134b8 <lll_done+0x84>)
   1349a:	490c      	ldr	r1, [pc, #48]	; (134cc <lll_done+0x98>)
   1349c:	4808      	ldr	r0, [pc, #32]	; (134c0 <lll_done+0x8c>)
   1349e:	f240 136d 	movw	r3, #365	; 0x16d
   134a2:	f005 fb8f 	bl	18bc4 <printk>
   134a6:	4040      	eors	r0, r0
   134a8:	f380 8811 	msr	BASEPRI, r0
   134ac:	f04f 0003 	mov.w	r0, #3
   134b0:	df02      	svc	2
}
   134b2:	2000      	movs	r0, #0
   134b4:	bd38      	pop	{r3, r4, r5, pc}
   134b6:	bf00      	nop
   134b8:	00022f2e 	.word	0x00022f2e
   134bc:	00023012 	.word	0x00023012
   134c0:	00020429 	.word	0x00020429
   134c4:	20002970 	.word	0x20002970
   134c8:	00023021 	.word	0x00023021
   134cc:	00023035 	.word	0x00023035

000134d0 <lll_is_done>:
	return !event.curr.abort_cb;
   134d0:	4b02      	ldr	r3, [pc, #8]	; (134dc <lll_is_done+0xc>)
   134d2:	6898      	ldr	r0, [r3, #8]
}
   134d4:	fab0 f080 	clz	r0, r0
   134d8:	0940      	lsrs	r0, r0, #5
   134da:	4770      	bx	lr
   134dc:	20002970 	.word	0x20002970

000134e0 <lll_chan_set>:
	switch (chan) {
   134e0:	2826      	cmp	r0, #38	; 0x26
{
   134e2:	b510      	push	{r4, lr}
   134e4:	4604      	mov	r4, r0
	switch (chan) {
   134e6:	d00b      	beq.n	13500 <lll_chan_set+0x20>
   134e8:	2827      	cmp	r0, #39	; 0x27
   134ea:	d00b      	beq.n	13504 <lll_chan_set+0x24>
   134ec:	2825      	cmp	r0, #37	; 0x25
   134ee:	d10b      	bne.n	13508 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   134f0:	2002      	movs	r0, #2
		radio_freq_chan_set(26);
   134f2:	f001 fcb1 	bl	14e58 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   134f6:	4620      	mov	r0, r4
}
   134f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   134fc:	f001 bcb2 	b.w	14e64 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   13500:	201a      	movs	r0, #26
   13502:	e7f6      	b.n	134f2 <lll_chan_set+0x12>
		radio_freq_chan_set(80);
   13504:	2050      	movs	r0, #80	; 0x50
   13506:	e7f4      	b.n	134f2 <lll_chan_set+0x12>
		if (chan < 11) {
   13508:	280a      	cmp	r0, #10
   1350a:	d802      	bhi.n	13512 <lll_chan_set+0x32>
			radio_freq_chan_set(4 + (chan * 2U));
   1350c:	3002      	adds	r0, #2
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   1350e:	0040      	lsls	r0, r0, #1
   13510:	e7ef      	b.n	134f2 <lll_chan_set+0x12>
		} else if (chan < 40) {
   13512:	2827      	cmp	r0, #39	; 0x27
   13514:	d801      	bhi.n	1351a <lll_chan_set+0x3a>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   13516:	3003      	adds	r0, #3
   13518:	e7f9      	b.n	1350e <lll_chan_set+0x2e>
			LL_ASSERT(0);
   1351a:	4a07      	ldr	r2, [pc, #28]	; (13538 <lll_chan_set+0x58>)
   1351c:	4907      	ldr	r1, [pc, #28]	; (1353c <lll_chan_set+0x5c>)
   1351e:	4808      	ldr	r0, [pc, #32]	; (13540 <lll_chan_set+0x60>)
   13520:	f240 13d9 	movw	r3, #473	; 0x1d9
   13524:	f005 fb4e 	bl	18bc4 <printk>
   13528:	4040      	eors	r0, r0
   1352a:	f380 8811 	msr	BASEPRI, r0
   1352e:	f04f 0003 	mov.w	r0, #3
   13532:	df02      	svc	2
   13534:	e7df      	b.n	134f6 <lll_chan_set+0x16>
   13536:	bf00      	nop
   13538:	00022f2e 	.word	0x00022f2e
   1353c:	000218fc 	.word	0x000218fc
   13540:	00020429 	.word	0x00020429

00013544 <lll_isr_cleanup>:
{
   13544:	b508      	push	{r3, lr}
   13546:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   13548:	480f      	ldr	r0, [pc, #60]	; (13588 <lll_isr_cleanup+0x44>)
   1354a:	f001 fc2b 	bl	14da4 <radio_isr_set>
	if (!radio_is_idle()) {
   1354e:	f001 fd29 	bl	14fa4 <radio_is_idle>
   13552:	b908      	cbnz	r0, 13558 <lll_isr_cleanup+0x14>
		radio_disable();
   13554:	f001 fcf4 	bl	14f40 <radio_disable>
	radio_tmr_stop();
   13558:	f001 fef2 	bl	15340 <radio_tmr_stop>
	err = lll_hfclock_off();
   1355c:	f000 f954 	bl	13808 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   13560:	2800      	cmp	r0, #0
   13562:	da0c      	bge.n	1357e <lll_isr_cleanup+0x3a>
   13564:	4a09      	ldr	r2, [pc, #36]	; (1358c <lll_isr_cleanup+0x48>)
   13566:	490a      	ldr	r1, [pc, #40]	; (13590 <lll_isr_cleanup+0x4c>)
   13568:	480a      	ldr	r0, [pc, #40]	; (13594 <lll_isr_cleanup+0x50>)
   1356a:	f44f 730f 	mov.w	r3, #572	; 0x23c
   1356e:	f005 fb29 	bl	18bc4 <printk>
   13572:	4040      	eors	r0, r0
   13574:	f380 8811 	msr	BASEPRI, r0
   13578:	f04f 0003 	mov.w	r0, #3
   1357c:	df02      	svc	2
}
   1357e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   13582:	2000      	movs	r0, #0
   13584:	f7ff bf56 	b.w	13434 <lll_done>
   13588:	0001d44d 	.word	0x0001d44d
   1358c:	00022f2e 	.word	0x00022f2e
   13590:	0002303c 	.word	0x0002303c
   13594:	00020429 	.word	0x00020429

00013598 <lll_isr_early_abort>:
{
   13598:	b508      	push	{r3, lr}
   1359a:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   1359c:	480e      	ldr	r0, [pc, #56]	; (135d8 <lll_isr_early_abort+0x40>)
   1359e:	f001 fc01 	bl	14da4 <radio_isr_set>
	if (!radio_is_idle()) {
   135a2:	f001 fcff 	bl	14fa4 <radio_is_idle>
   135a6:	b908      	cbnz	r0, 135ac <lll_isr_early_abort+0x14>
		radio_disable();
   135a8:	f001 fcca 	bl	14f40 <radio_disable>
	err = lll_hfclock_off();
   135ac:	f000 f92c 	bl	13808 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   135b0:	2800      	cmp	r0, #0
   135b2:	da0c      	bge.n	135ce <lll_isr_early_abort+0x36>
   135b4:	4a09      	ldr	r2, [pc, #36]	; (135dc <lll_isr_early_abort+0x44>)
   135b6:	490a      	ldr	r1, [pc, #40]	; (135e0 <lll_isr_early_abort+0x48>)
   135b8:	480a      	ldr	r0, [pc, #40]	; (135e4 <lll_isr_early_abort+0x4c>)
   135ba:	f240 234b 	movw	r3, #587	; 0x24b
   135be:	f005 fb01 	bl	18bc4 <printk>
   135c2:	4040      	eors	r0, r0
   135c4:	f380 8811 	msr	BASEPRI, r0
   135c8:	f04f 0003 	mov.w	r0, #3
   135cc:	df02      	svc	2
}
   135ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   135d2:	2000      	movs	r0, #0
   135d4:	f7ff bf2e 	b.w	13434 <lll_done>
   135d8:	0001d44d 	.word	0x0001d44d
   135dc:	00022f2e 	.word	0x00022f2e
   135e0:	0002303c 	.word	0x0002303c
   135e4:	00020429 	.word	0x00020429

000135e8 <lll_prepare_resolve>:
{
   135e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   135ec:	461d      	mov	r5, r3
   135ee:	f89d a030 	ldrb.w	sl, [sp, #48]	; 0x30
	idx = UINT8_MAX;
   135f2:	23ff      	movs	r3, #255	; 0xff
{
   135f4:	4681      	mov	r9, r0
   135f6:	4688      	mov	r8, r1
   135f8:	4616      	mov	r6, r2
	idx = UINT8_MAX;
   135fa:	f88d 300f 	strb.w	r3, [sp, #15]
		p = ull_prepare_dequeue_iter(&idx);
   135fe:	f10d 000f 	add.w	r0, sp, #15
   13602:	f7fd fc41 	bl	10e88 <ull_prepare_dequeue_iter>
   13606:	4604      	mov	r4, r0
	while (p && (p->is_aborted || p->is_resume)) {
   13608:	b110      	cbz	r0, 13610 <lll_prepare_resolve+0x28>
   1360a:	7f03      	ldrb	r3, [r0, #28]
   1360c:	079b      	lsls	r3, r3, #30
   1360e:	d1f6      	bne.n	135fe <lll_prepare_resolve+0x16>
	    event.curr.abort_cb ||
   13610:	4f41      	ldr	r7, [pc, #260]	; (13718 <lll_prepare_resolve+0x130>)
	if ((!is_dequeue && !is_done_sync()) ||
   13612:	68bb      	ldr	r3, [r7, #8]
   13614:	b923      	cbnz	r3, 13620 <lll_prepare_resolve+0x38>
	    event.curr.abort_cb ||
   13616:	2c00      	cmp	r4, #0
   13618:	d046      	beq.n	136a8 <lll_prepare_resolve+0xc0>
	    (p && is_resume)) {
   1361a:	f1ba 0f00 	cmp.w	sl, #0
   1361e:	d034      	beq.n	1368a <lll_prepare_resolve+0xa2>
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   13620:	462a      	mov	r2, r5
   13622:	f8cd a000 	str.w	sl, [sp]
   13626:	4633      	mov	r3, r6
   13628:	4641      	mov	r1, r8
   1362a:	4648      	mov	r0, r9
   1362c:	f7fd fbf0 	bl	10e10 <ull_prepare_enqueue>
		LL_ASSERT(next);
   13630:	4605      	mov	r5, r0
   13632:	b960      	cbnz	r0, 1364e <lll_prepare_resolve+0x66>
   13634:	4a39      	ldr	r2, [pc, #228]	; (1371c <lll_prepare_resolve+0x134>)
   13636:	493a      	ldr	r1, [pc, #232]	; (13720 <lll_prepare_resolve+0x138>)
   13638:	483a      	ldr	r0, [pc, #232]	; (13724 <lll_prepare_resolve+0x13c>)
   1363a:	f240 2386 	movw	r3, #646	; 0x286
   1363e:	f005 fac1 	bl	18bc4 <printk>
   13642:	4040      	eors	r0, r0
   13644:	f380 8811 	msr	BASEPRI, r0
   13648:	f04f 0003 	mov.w	r0, #3
   1364c:	df02      	svc	2
		if (is_resume) {
   1364e:	f1ba 0f00 	cmp.w	sl, #0
   13652:	d005      	beq.n	13660 <lll_prepare_resolve+0x78>
		return -EINPROGRESS;
   13654:	f06f 0476 	mvn.w	r4, #118	; 0x76
}
   13658:	4620      	mov	r0, r4
   1365a:	b004      	add	sp, #16
   1365c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ret  = preempt_ticker_start(p, next);
   13660:	4629      	mov	r1, r5
   13662:	4620      	mov	r0, r4
   13664:	f7ff fd68 	bl	13138 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   13668:	f030 0302 	bics.w	r3, r0, #2
   1366c:	d0f2      	beq.n	13654 <lll_prepare_resolve+0x6c>
   1366e:	4a2b      	ldr	r2, [pc, #172]	; (1371c <lll_prepare_resolve+0x134>)
   13670:	492d      	ldr	r1, [pc, #180]	; (13728 <lll_prepare_resolve+0x140>)
   13672:	482c      	ldr	r0, [pc, #176]	; (13724 <lll_prepare_resolve+0x13c>)
   13674:	f240 2391 	movw	r3, #657	; 0x291
   13678:	f005 faa4 	bl	18bc4 <printk>
   1367c:	4040      	eors	r0, r0
   1367e:	f380 8811 	msr	BASEPRI, r0
   13682:	f04f 0003 	mov.w	r0, #3
   13686:	df02      	svc	2
   13688:	e7e4      	b.n	13654 <lll_prepare_resolve+0x6c>
	LL_ASSERT(!p || &p->prepare_param == prepare_param);
   1368a:	42ac      	cmp	r4, r5
   1368c:	d00c      	beq.n	136a8 <lll_prepare_resolve+0xc0>
   1368e:	4a23      	ldr	r2, [pc, #140]	; (1371c <lll_prepare_resolve+0x134>)
   13690:	4926      	ldr	r1, [pc, #152]	; (1372c <lll_prepare_resolve+0x144>)
   13692:	4824      	ldr	r0, [pc, #144]	; (13724 <lll_prepare_resolve+0x13c>)
   13694:	f240 23b7 	movw	r3, #695	; 0x2b7
   13698:	f005 fa94 	bl	18bc4 <printk>
   1369c:	4040      	eors	r0, r0
   1369e:	f380 8811 	msr	BASEPRI, r0
   136a2:	f04f 0003 	mov.w	r0, #3
   136a6:	df02      	svc	2
	event.curr.param = prepare_param->param;
   136a8:	68eb      	ldr	r3, [r5, #12]
	event.curr.abort_cb = abort_cb;
   136aa:	f8c7 8008 	str.w	r8, [r7, #8]
	event.curr.is_abort_cb = is_abort_cb;
   136ae:	e9c7 3900 	strd	r3, r9, [r7]
	err = prepare_cb(prepare_param);
   136b2:	4628      	mov	r0, r5
   136b4:	47b0      	blx	r6
   136b6:	4604      	mov	r4, r0
	ret = preempt_ticker_stop();
   136b8:	f7ff fcfe 	bl	130b8 <preempt_ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   136bc:	f030 0302 	bics.w	r3, r0, #2
   136c0:	d00c      	beq.n	136dc <lll_prepare_resolve+0xf4>
   136c2:	4a16      	ldr	r2, [pc, #88]	; (1371c <lll_prepare_resolve+0x134>)
   136c4:	4918      	ldr	r1, [pc, #96]	; (13728 <lll_prepare_resolve+0x140>)
   136c6:	4817      	ldr	r0, [pc, #92]	; (13724 <lll_prepare_resolve+0x13c>)
   136c8:	f44f 7331 	mov.w	r3, #708	; 0x2c4
   136cc:	f005 fa7a 	bl	18bc4 <printk>
   136d0:	4040      	eors	r0, r0
   136d2:	f380 8811 	msr	BASEPRI, r0
   136d6:	f04f 0003 	mov.w	r0, #3
   136da:	df02      	svc	2
		p = ull_prepare_dequeue_iter(&idx);
   136dc:	f10d 000f 	add.w	r0, sp, #15
   136e0:	f7fd fbd2 	bl	10e88 <ull_prepare_dequeue_iter>
		if (!p) {
   136e4:	4601      	mov	r1, r0
   136e6:	2800      	cmp	r0, #0
   136e8:	d0b6      	beq.n	13658 <lll_prepare_resolve+0x70>
	} while (p->is_aborted || p->is_resume);
   136ea:	7f00      	ldrb	r0, [r0, #28]
   136ec:	f010 0003 	ands.w	r0, r0, #3
   136f0:	d1f4      	bne.n	136dc <lll_prepare_resolve+0xf4>
	ret = preempt_ticker_start(NULL, p);
   136f2:	f7ff fd21 	bl	13138 <preempt_ticker_start>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   136f6:	f030 0302 	bics.w	r3, r0, #2
   136fa:	d0ad      	beq.n	13658 <lll_prepare_resolve+0x70>
   136fc:	4a07      	ldr	r2, [pc, #28]	; (1371c <lll_prepare_resolve+0x134>)
   136fe:	490a      	ldr	r1, [pc, #40]	; (13728 <lll_prepare_resolve+0x140>)
   13700:	4808      	ldr	r0, [pc, #32]	; (13724 <lll_prepare_resolve+0x13c>)
   13702:	f240 23d1 	movw	r3, #721	; 0x2d1
   13706:	f005 fa5d 	bl	18bc4 <printk>
   1370a:	4040      	eors	r0, r0
   1370c:	f380 8811 	msr	BASEPRI, r0
   13710:	f04f 0003 	mov.w	r0, #3
   13714:	df02      	svc	2
   13716:	e79f      	b.n	13658 <lll_prepare_resolve+0x70>
   13718:	20002970 	.word	0x20002970
   1371c:	00022f2e 	.word	0x00022f2e
   13720:	0002301c 	.word	0x0002301c
   13724:	00020429 	.word	0x00020429
   13728:	00022b46 	.word	0x00022b46
   1372c:	00023045 	.word	0x00023045

00013730 <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   13730:	b570      	push	{r4, r5, r6, lr}
   13732:	4606      	mov	r6, r0
   13734:	b08a      	sub	sp, #40	; 0x28
   13736:	460d      	mov	r5, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   13738:	2201      	movs	r2, #1
   1373a:	2100      	movs	r1, #0
   1373c:	a804      	add	r0, sp, #16
   1373e:	f00a fed7 	bl	1e4f0 <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   13742:	4b0f      	ldr	r3, [pc, #60]	; (13780 <blocking_on+0x50>)
   13744:	9301      	str	r3, [sp, #4]
   13746:	2400      	movs	r4, #0
   13748:	2303      	movs	r3, #3
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   1374a:	4669      	mov	r1, sp
   1374c:	4630      	mov	r0, r6
   1374e:	9403      	str	r4, [sp, #12]
   13750:	9302      	str	r3, [sp, #8]
   13752:	f005 fab3 	bl	18cbc <onoff_request>
	if (err < 0) {
   13756:	2800      	cmp	r0, #0
   13758:	db10      	blt.n	1377c <blocking_on+0x4c>
   1375a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1375e:	4621      	mov	r1, r4
   13760:	f240 30e7 	movw	r0, #999	; 0x3e7
   13764:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13768:	2300      	movs	r3, #0
   1376a:	fbe5 0106 	umlal	r0, r1, r5, r6
   1376e:	f7ec fd07 	bl	180 <__aeabi_uldivmod>
   13772:	4602      	mov	r2, r0
   13774:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   13776:	a804      	add	r0, sp, #16
   13778:	f004 f994 	bl	17aa4 <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   1377c:	b00a      	add	sp, #40	; 0x28
   1377e:	bd70      	pop	{r4, r5, r6, pc}
   13780:	0001d50b 	.word	0x0001d50b

00013784 <lll_clock_init>:

int lll_clock_init(void)
{
   13784:	b508      	push	{r3, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   13786:	2001      	movs	r0, #1
   13788:	f002 f94c 	bl	15a24 <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   1378c:	4904      	ldr	r1, [pc, #16]	; (137a0 <lll_clock_init+0x1c>)
   1378e:	2300      	movs	r3, #0
   13790:	604b      	str	r3, [r1, #4]
   13792:	60cb      	str	r3, [r1, #12]
   13794:	2301      	movs	r3, #1
   13796:	608b      	str	r3, [r1, #8]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   13798:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return onoff_request(mgr, &lf_cli);
   1379c:	f005 ba8e 	b.w	18cbc <onoff_request>
   137a0:	2000298c 	.word	0x2000298c

000137a4 <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   137a4:	4b0c      	ldr	r3, [pc, #48]	; (137d8 <lll_clock_wait+0x34>)
   137a6:	781a      	ldrb	r2, [r3, #0]
{
   137a8:	b510      	push	{r4, lr}
	if (done) {
   137aa:	b10a      	cbz	r2, 137b0 <lll_clock_wait+0xc>
		return 0;
   137ac:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   137ae:	bd10      	pop	{r4, pc}
	done = true;
   137b0:	2001      	movs	r0, #1
   137b2:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   137b4:	f002 f936 	bl	15a24 <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   137b8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   137bc:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   137be:	f7ff ffb7 	bl	13730 <blocking_on>
	if (err) {
   137c2:	2800      	cmp	r0, #0
   137c4:	d1f3      	bne.n	137ae <lll_clock_wait+0xa>
	err = onoff_release(mgr);
   137c6:	4620      	mov	r0, r4
   137c8:	f005 fac1 	bl	18d4e <onoff_release>
	if (err != ONOFF_STATE_ON) {
   137cc:	2802      	cmp	r0, #2
   137ce:	d0ed      	beq.n	137ac <lll_clock_wait+0x8>
		return -EIO;
   137d0:	f06f 0004 	mvn.w	r0, #4
   137d4:	e7eb      	b.n	137ae <lll_clock_wait+0xa>
   137d6:	bf00      	nop
   137d8:	2000300c 	.word	0x2000300c

000137dc <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   137dc:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   137de:	4b09      	ldr	r3, [pc, #36]	; (13804 <lll_hfclock_on+0x28>)
   137e0:	f3bf 8f5b 	dmb	ish
   137e4:	e853 2f00 	ldrex	r2, [r3]
   137e8:	1c51      	adds	r1, r2, #1
   137ea:	e843 1000 	strex	r0, r1, [r3]
   137ee:	2800      	cmp	r0, #0
   137f0:	d1f8      	bne.n	137e4 <lll_hfclock_on+0x8>
   137f2:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   137f6:	2a00      	cmp	r2, #0
   137f8:	dc01      	bgt.n	137fe <lll_hfclock_on+0x22>
		return 0;
	}

	z_nrf_clock_bt_ctlr_hf_request();
   137fa:	f002 f91b 	bl	15a34 <z_nrf_clock_bt_ctlr_hf_request>
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   137fe:	2000      	movs	r0, #0
   13800:	bd08      	pop	{r3, pc}
   13802:	bf00      	nop
   13804:	20002988 	.word	0x20002988

00013808 <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   13808:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   1380a:	4b0c      	ldr	r3, [pc, #48]	; (1383c <lll_hfclock_off+0x34>)
   1380c:	681a      	ldr	r2, [r3, #0]
   1380e:	2a00      	cmp	r2, #0
   13810:	dd10      	ble.n	13834 <lll_hfclock_off+0x2c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   13812:	f3bf 8f5b 	dmb	ish
   13816:	e853 2f00 	ldrex	r2, [r3]
   1381a:	1e51      	subs	r1, r2, #1
   1381c:	e843 1000 	strex	r0, r1, [r3]
   13820:	2800      	cmp	r0, #0
   13822:	d1f8      	bne.n	13816 <lll_hfclock_off+0xe>
   13824:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   13828:	2a01      	cmp	r2, #1
   1382a:	dc01      	bgt.n	13830 <lll_hfclock_off+0x28>
		return 0;
	}

	z_nrf_clock_bt_ctlr_hf_release();
   1382c:	f002 f918 	bl	15a60 <z_nrf_clock_bt_ctlr_hf_release>
		return 0;
   13830:	2000      	movs	r0, #0
   13832:	e001      	b.n	13838 <lll_hfclock_off+0x30>
		return -EALREADY;
   13834:	f06f 0077 	mvn.w	r0, #119	; 0x77
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   13838:	bd08      	pop	{r3, pc}
   1383a:	bf00      	nop
   1383c:	20002988 	.word	0x20002988

00013840 <lll_clock_ppm_get>:
}

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
}
   13840:	4b01      	ldr	r3, [pc, #4]	; (13848 <lll_clock_ppm_get+0x8>)
   13842:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   13846:	4770      	bx	lr
   13848:	0001f848 	.word	0x0001f848

0001384c <isr_tx>:

	lll_done(param);
}

static void isr_tx(void *param)
{
   1384c:	b538      	push	{r3, r4, r5, lr}
   1384e:	4605      	mov	r5, r0
		lll_prof_latency_capture();
		node_rx_prof = lll_prof_reserve();
	}

	/* Clear radio tx status and events */
	lll_isr_tx_status_reset();
   13850:	f009 fe35 	bl	1d4be <lll_isr_tx_status_reset>

	/* setup tIFS switching */
	radio_tmr_tifs_set(EVENT_IFS_US);
   13854:	2096      	movs	r0, #150	; 0x96
   13856:	f001 fcdd 	bl	15214 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, phy_flags);
   1385a:	2300      	movs	r3, #0
   1385c:	4618      	mov	r0, r3
   1385e:	461a      	mov	r2, r3
   13860:	4619      	mov	r1, r3
   13862:	f001 fc47 	bl	150f4 <radio_switch_complete_and_tx>

	/* setup Rx buffer */
	node_rx = ull_pdu_rx_alloc_peek(1);
   13866:	2001      	movs	r0, #1
   13868:	f7fd fa7e 	bl	10d68 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1386c:	4604      	mov	r4, r0
   1386e:	b960      	cbnz	r0, 1388a <isr_tx+0x3e>
   13870:	4a1c      	ldr	r2, [pc, #112]	; (138e4 <isr_tx+0x98>)
   13872:	491d      	ldr	r1, [pc, #116]	; (138e8 <isr_tx+0x9c>)
   13874:	481d      	ldr	r0, [pc, #116]	; (138ec <isr_tx+0xa0>)
   13876:	f240 432a 	movw	r3, #1066	; 0x42a
   1387a:	f005 f9a3 	bl	18bc4 <printk>
   1387e:	4040      	eors	r0, r0
   13880:	f380 8811 	msr	BASEPRI, r0
   13884:	f04f 0003 	mov.w	r0, #3
   13888:	df02      	svc	2
	radio_pkt_rx_set(node_rx->pdu);
   1388a:	f104 001c 	add.w	r0, r4, #28
   1388e:	f001 fb3f 	bl	14f10 <radio_pkt_rx_set>

	/* assert if radio packet ptr is not set and radio started rx */
	LL_ASSERT(!radio_is_ready());
   13892:	f001 fb73 	bl	14f7c <radio_is_ready>
   13896:	b160      	cbz	r0, 138b2 <isr_tx+0x66>
   13898:	4a12      	ldr	r2, [pc, #72]	; (138e4 <isr_tx+0x98>)
   1389a:	4915      	ldr	r1, [pc, #84]	; (138f0 <isr_tx+0xa4>)
   1389c:	4813      	ldr	r0, [pc, #76]	; (138ec <isr_tx+0xa0>)
   1389e:	f240 432e 	movw	r3, #1070	; 0x42e
   138a2:	f005 f98f 	bl	18bc4 <printk>
   138a6:	4040      	eors	r0, r0
   138a8:	f380 8811 	msr	BASEPRI, r0
   138ac:	f04f 0003 	mov.w	r0, #3
   138b0:	df02      	svc	2

	if (IS_ENABLED(CONFIG_BT_CTLR_PROFILE_ISR)) {
		lll_prof_cputime_capture();
	}

	radio_isr_set(isr_rx, param);
   138b2:	4629      	mov	r1, r5
   138b4:	480f      	ldr	r0, [pc, #60]	; (138f4 <isr_tx+0xa8>)
   138b6:	f001 fa75 	bl	14da4 <radio_isr_set>
		radio_ar_configure(count, irks, 0);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	/* +/- 2us active clock jitter, +1 us hcto compensation */
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   138ba:	f001 fd93 	bl	153e4 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   138be:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   138c0:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   138c2:	4608      	mov	r0, r1
   138c4:	f00a f860 	bl	1d988 <radio_rx_chain_delay_get>
	hcto += addr_us_get(phy_p);
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   138c8:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   138ca:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   138cc:	4608      	mov	r0, r1
   138ce:	f00a f857 	bl	1d980 <radio_tx_chain_delay_get>
   138d2:	442c      	add	r4, r5
   138d4:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   138d6:	1a20      	subs	r0, r4, r0
   138d8:	f001 fd3e 	bl	15358 <radio_tmr_hcto_configure>
		/* NOTE: as scratch packet is used to receive, it is safe to
		 * generate profile event using rx nodes.
		 */
		lll_prof_reserve_send(node_rx_prof);
	}
}
   138dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_tmr_end_capture();
   138e0:	f001 bd72 	b.w	153c8 <radio_tmr_end_capture>
   138e4:	0002308c 	.word	0x0002308c
   138e8:	000230d6 	.word	0x000230d6
   138ec:	00020429 	.word	0x00020429
   138f0:	000230de 	.word	0x000230de
   138f4:	00013db9 	.word	0x00013db9

000138f8 <is_abort_cb>:
	if (next != curr) {
   138f8:	4281      	cmp	r1, r0
{
   138fa:	b508      	push	{r3, lr}
	if (next != curr) {
   138fc:	d018      	beq.n	13930 <is_abort_cb+0x38>
		} else if (lll->is_hdcd) {
   138fe:	7a0b      	ldrb	r3, [r1, #8]
   13900:	07db      	lsls	r3, r3, #31
   13902:	d522      	bpl.n	1394a <is_abort_cb+0x52>
			*resume_cb = resume_prepare_cb;
   13904:	4b12      	ldr	r3, [pc, #72]	; (13950 <is_abort_cb+0x58>)
   13906:	6013      	str	r3, [r2, #0]
			err = lll_hfclock_on();
   13908:	f7ff ff68 	bl	137dc <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   1390c:	2800      	cmp	r0, #0
   1390e:	da0c      	bge.n	1392a <is_abort_cb+0x32>
   13910:	4a10      	ldr	r2, [pc, #64]	; (13954 <is_abort_cb+0x5c>)
   13912:	4911      	ldr	r1, [pc, #68]	; (13958 <is_abort_cb+0x60>)
   13914:	4811      	ldr	r0, [pc, #68]	; (1395c <is_abort_cb+0x64>)
   13916:	f240 33e3 	movw	r3, #995	; 0x3e3
   1391a:	f005 f953 	bl	18bc4 <printk>
   1391e:	4040      	eors	r0, r0
   13920:	f380 8811 	msr	BASEPRI, r0
   13924:	f04f 0003 	mov.w	r0, #3
   13928:	df02      	svc	2
   1392a:	f06f 000a 	mvn.w	r0, #10
   1392e:	e00b      	b.n	13948 <is_abort_cb+0x50>
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   13930:	7b0b      	ldrb	r3, [r1, #12]
   13932:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   13936:	690b      	ldr	r3, [r1, #16]
   13938:	781b      	ldrb	r3, [r3, #0]
   1393a:	f003 030f 	and.w	r3, r3, #15
		return 0;
   1393e:	2b01      	cmp	r3, #1
   13940:	bf14      	ite	ne
   13942:	f06f 008b 	mvnne.w	r0, #139	; 0x8b
   13946:	2000      	moveq	r0, #0
}
   13948:	bd08      	pop	{r3, pc}
			return -ECANCELED;
   1394a:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1394e:	e7fb      	b.n	13948 <is_abort_cb+0x50>
   13950:	0001d5c1 	.word	0x0001d5c1
   13954:	0002308c 	.word	0x0002308c
   13958:	0002303c 	.word	0x0002303c
   1395c:	00020429 	.word	0x00020429

00013960 <abort_cb>:
{
   13960:	b510      	push	{r4, lr}
   13962:	460c      	mov	r4, r1
	if (!prepare_param) {
   13964:	b930      	cbnz	r0, 13974 <abort_cb+0x14>
		radio_isr_set(isr_abort, param);
   13966:	480e      	ldr	r0, [pc, #56]	; (139a0 <abort_cb+0x40>)
   13968:	f001 fa1c 	bl	14da4 <radio_isr_set>
}
   1396c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   13970:	f001 bae6 	b.w	14f40 <radio_disable>
	err = lll_hfclock_off();
   13974:	f7ff ff48 	bl	13808 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   13978:	2800      	cmp	r0, #0
   1397a:	da0c      	bge.n	13996 <abort_cb+0x36>
   1397c:	4a09      	ldr	r2, [pc, #36]	; (139a4 <abort_cb+0x44>)
   1397e:	490a      	ldr	r1, [pc, #40]	; (139a8 <abort_cb+0x48>)
   13980:	480a      	ldr	r0, [pc, #40]	; (139ac <abort_cb+0x4c>)
   13982:	f240 4309 	movw	r3, #1033	; 0x409
   13986:	f005 f91d 	bl	18bc4 <printk>
   1398a:	4040      	eors	r0, r0
   1398c:	f380 8811 	msr	BASEPRI, r0
   13990:	f04f 0003 	mov.w	r0, #3
   13994:	df02      	svc	2
	lll_done(param);
   13996:	4620      	mov	r0, r4
}
   13998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1399c:	f7ff bd4a 	b.w	13434 <lll_done>
   139a0:	0001d517 	.word	0x0001d517
   139a4:	0002308c 	.word	0x0002308c
   139a8:	0002303c 	.word	0x0002303c
   139ac:	00020429 	.word	0x00020429

000139b0 <lll_adv_init>:
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   139b0:	4b08      	ldr	r3, [pc, #32]	; (139d4 <lll_adv_init+0x24>)
   139b2:	2204      	movs	r2, #4
{
   139b4:	b510      	push	{r4, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   139b6:	1898      	adds	r0, r3, r2
   139b8:	2128      	movs	r1, #40	; 0x28
   139ba:	f008 fea9 	bl	1c710 <mem_init>
	MFIFO_INIT(pdu_free);
   139be:	4b06      	ldr	r3, [pc, #24]	; (139d8 <lll_adv_init+0x28>)
   139c0:	2400      	movs	r4, #0
   139c2:	805c      	strh	r4, [r3, #2]
	return z_impl_k_sem_init(sem, initial_count, limit);
   139c4:	2202      	movs	r2, #2
   139c6:	4621      	mov	r1, r4
   139c8:	4804      	ldr	r0, [pc, #16]	; (139dc <lll_adv_init+0x2c>)
   139ca:	f00a fd91 	bl	1e4f0 <z_impl_k_sem_init>
}
   139ce:	4620      	mov	r0, r4
   139d0:	bd10      	pop	{r4, pc}
   139d2:	bf00      	nop
   139d4:	2000299c 	.word	0x2000299c
   139d8:	2000094c 	.word	0x2000094c
   139dc:	20002a40 	.word	0x20002a40

000139e0 <lll_adv_data_init>:
{
   139e0:	b510      	push	{r4, lr}
   139e2:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   139e4:	4805      	ldr	r0, [pc, #20]	; (139fc <lll_adv_data_init+0x1c>)
   139e6:	f008 febb 	bl	1c760 <mem_acquire>
	if (!p) {
   139ea:	4603      	mov	r3, r0
   139ec:	b118      	cbz	r0, 139f6 <lll_adv_data_init+0x16>
	p->len = 0U;
   139ee:	2000      	movs	r0, #0
   139f0:	7058      	strb	r0, [r3, #1]
	pdu->pdu[0] = (void *)p;
   139f2:	6063      	str	r3, [r4, #4]
}
   139f4:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   139f6:	f06f 000b 	mvn.w	r0, #11
   139fa:	e7fb      	b.n	139f4 <lll_adv_data_init+0x14>
   139fc:	2000299c 	.word	0x2000299c

00013a00 <lll_adv_pdu_alloc_pdu_adv>:
{
   13a00:	b538      	push	{r3, r4, r5, lr}
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   13a02:	4c33      	ldr	r4, [pc, #204]	; (13ad0 <lll_adv_pdu_alloc_pdu_adv+0xd0>)
   13a04:	78a2      	ldrb	r2, [r4, #2]
	if (first == last) {
   13a06:	78e1      	ldrb	r1, [r4, #3]
   13a08:	7823      	ldrb	r3, [r4, #0]
   13a0a:	4291      	cmp	r1, r2
   13a0c:	d023      	beq.n	13a56 <lll_adv_pdu_alloc_pdu_adv+0x56>
	return *((void **)(fifo + first * size));
   13a0e:	fb02 4303 	mla	r3, r2, r3, r4
   13a12:	685d      	ldr	r5, [r3, #4]
	if (p) {
   13a14:	b1fd      	cbz	r5, 13a56 <lll_adv_pdu_alloc_pdu_adv+0x56>
	return z_impl_k_sem_take(sem, timeout);
   13a16:	482f      	ldr	r0, [pc, #188]	; (13ad4 <lll_adv_pdu_alloc_pdu_adv+0xd4>)
   13a18:	2200      	movs	r2, #0
   13a1a:	2300      	movs	r3, #0
   13a1c:	f004 f842 	bl	17aa4 <z_impl_k_sem_take>
		LL_ASSERT(!err);
   13a20:	b160      	cbz	r0, 13a3c <lll_adv_pdu_alloc_pdu_adv+0x3c>
   13a22:	4a2d      	ldr	r2, [pc, #180]	; (13ad8 <lll_adv_pdu_alloc_pdu_adv+0xd8>)
   13a24:	492d      	ldr	r1, [pc, #180]	; (13adc <lll_adv_pdu_alloc_pdu_adv+0xdc>)
   13a26:	482e      	ldr	r0, [pc, #184]	; (13ae0 <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   13a28:	f240 137f 	movw	r3, #383	; 0x17f
   13a2c:	f005 f8ca 	bl	18bc4 <printk>
   13a30:	4040      	eors	r0, r0
   13a32:	f380 8811 	msr	BASEPRI, r0
   13a36:	f04f 0003 	mov.w	r0, #3
   13a3a:	df02      	svc	2
	uint8_t _first = *first; /* Copy read-index */
   13a3c:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   13a3e:	78e1      	ldrb	r1, [r4, #3]
		MFIFO_DEQUEUE(pdu_free);
   13a40:	7862      	ldrb	r2, [r4, #1]
   13a42:	4299      	cmp	r1, r3
   13a44:	d005      	beq.n	13a52 <lll_adv_pdu_alloc_pdu_adv+0x52>
	_first += 1U;
   13a46:	3301      	adds	r3, #1
   13a48:	b2db      	uxtb	r3, r3
		_first = 0U;
   13a4a:	429a      	cmp	r2, r3
   13a4c:	bf08      	it	eq
   13a4e:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   13a50:	70a3      	strb	r3, [r4, #2]
}
   13a52:	4628      	mov	r0, r5
   13a54:	bd38      	pop	{r3, r4, r5, pc}
	p = mem_acquire(&mem_pdu.free);
   13a56:	4823      	ldr	r0, [pc, #140]	; (13ae4 <lll_adv_pdu_alloc_pdu_adv+0xe4>)
   13a58:	f008 fe82 	bl	1c760 <mem_acquire>
	if (p) {
   13a5c:	4605      	mov	r5, r0
   13a5e:	2800      	cmp	r0, #0
   13a60:	d1f7      	bne.n	13a52 <lll_adv_pdu_alloc_pdu_adv+0x52>
   13a62:	481c      	ldr	r0, [pc, #112]	; (13ad4 <lll_adv_pdu_alloc_pdu_adv+0xd4>)
   13a64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13a68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13a6c:	f004 f81a 	bl	17aa4 <z_impl_k_sem_take>
	LL_ASSERT(!err);
   13a70:	b160      	cbz	r0, 13a8c <lll_adv_pdu_alloc_pdu_adv+0x8c>
   13a72:	4a19      	ldr	r2, [pc, #100]	; (13ad8 <lll_adv_pdu_alloc_pdu_adv+0xd8>)
   13a74:	4919      	ldr	r1, [pc, #100]	; (13adc <lll_adv_pdu_alloc_pdu_adv+0xdc>)
   13a76:	481a      	ldr	r0, [pc, #104]	; (13ae0 <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   13a78:	f44f 73c9 	mov.w	r3, #402	; 0x192
   13a7c:	f005 f8a2 	bl	18bc4 <printk>
   13a80:	4040      	eors	r0, r0
   13a82:	f380 8811 	msr	BASEPRI, r0
   13a86:	f04f 0003 	mov.w	r0, #3
   13a8a:	df02      	svc	2
	uint8_t _first = *first; /* Copy read-index */
   13a8c:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   13a8e:	78e0      	ldrb	r0, [r4, #3]
	p = MFIFO_DEQUEUE(pdu_free);
   13a90:	7822      	ldrb	r2, [r4, #0]
   13a92:	7861      	ldrb	r1, [r4, #1]
   13a94:	4298      	cmp	r0, r3
   13a96:	d10d      	bne.n	13ab4 <lll_adv_pdu_alloc_pdu_adv+0xb4>
	LL_ASSERT(p);
   13a98:	4a0f      	ldr	r2, [pc, #60]	; (13ad8 <lll_adv_pdu_alloc_pdu_adv+0xd8>)
   13a9a:	4913      	ldr	r1, [pc, #76]	; (13ae8 <lll_adv_pdu_alloc_pdu_adv+0xe8>)
   13a9c:	4810      	ldr	r0, [pc, #64]	; (13ae0 <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   13a9e:	f240 1395 	movw	r3, #405	; 0x195
   13aa2:	f005 f88f 	bl	18bc4 <printk>
   13aa6:	4040      	eors	r0, r0
   13aa8:	f380 8811 	msr	BASEPRI, r0
   13aac:	f04f 0003 	mov.w	r0, #3
   13ab0:	df02      	svc	2
   13ab2:	e7ce      	b.n	13a52 <lll_adv_pdu_alloc_pdu_adv+0x52>
	mem = *((void **)(fifo + _first * size));
   13ab4:	fb03 4202 	mla	r2, r3, r2, r4
	_first += 1U;
   13ab8:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   13aba:	6852      	ldr	r2, [r2, #4]
	_first += 1U;
   13abc:	b2db      	uxtb	r3, r3
		_first = 0U;
   13abe:	4299      	cmp	r1, r3
   13ac0:	bf08      	it	eq
   13ac2:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   13ac4:	70a3      	strb	r3, [r4, #2]
   13ac6:	2a00      	cmp	r2, #0
   13ac8:	d0e6      	beq.n	13a98 <lll_adv_pdu_alloc_pdu_adv+0x98>
   13aca:	4615      	mov	r5, r2
   13acc:	e7c1      	b.n	13a52 <lll_adv_pdu_alloc_pdu_adv+0x52>
   13ace:	bf00      	nop
   13ad0:	2000094c 	.word	0x2000094c
   13ad4:	20002a40 	.word	0x20002a40
   13ad8:	0002308c 	.word	0x0002308c
   13adc:	000229ad 	.word	0x000229ad
   13ae0:	00020429 	.word	0x00020429
   13ae4:	2000299c 	.word	0x2000299c
   13ae8:	000203b7 	.word	0x000203b7

00013aec <lll_adv_pdu_latest_get>:
{
   13aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	first = pdu->first;
   13aee:	7803      	ldrb	r3, [r0, #0]
	if (first != pdu->last) {
   13af0:	7842      	ldrb	r2, [r0, #1]
   13af2:	429a      	cmp	r2, r3
{
   13af4:	4605      	mov	r5, r0
   13af6:	460e      	mov	r6, r1
	first = pdu->first;
   13af8:	b2dc      	uxtb	r4, r3
	if (first != pdu->last) {
   13afa:	d021      	beq.n	13b40 <lll_adv_pdu_latest_get+0x54>
			if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   13afc:	4a13      	ldr	r2, [pc, #76]	; (13b4c <lll_adv_pdu_latest_get+0x60>)
   13afe:	78d0      	ldrb	r0, [r2, #3]
	if (last == count) {
   13b00:	7857      	ldrb	r7, [r2, #1]
   13b02:	7891      	ldrb	r1, [r2, #2]
	last = last + 1;
   13b04:	1c43      	adds	r3, r0, #1
   13b06:	b2db      	uxtb	r3, r3
		last = 0U;
   13b08:	429f      	cmp	r7, r3
   13b0a:	bf08      	it	eq
   13b0c:	2300      	moveq	r3, #0
	if (last == first) {
   13b0e:	4299      	cmp	r1, r3
   13b10:	d01a      	beq.n	13b48 <lll_adv_pdu_latest_get+0x5c>
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   13b12:	f892 c000 	ldrb.w	ip, [r2]
   13b16:	eb05 0784 	add.w	r7, r5, r4, lsl #2
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   13b1a:	fb0c 2000 	mla	r0, ip, r0, r2
		p = pdu->pdu[pdu_idx];
   13b1e:	6879      	ldr	r1, [r7, #4]
   13b20:	6041      	str	r1, [r0, #4]
	*last = idx; /* Commit: Update write index */
   13b22:	70d3      	strb	r3, [r2, #3]
		first += 1U;
   13b24:	3401      	adds	r4, #1
   13b26:	b2e4      	uxtb	r4, r4
	z_impl_k_sem_give(sem);
   13b28:	4809      	ldr	r0, [pc, #36]	; (13b50 <lll_adv_pdu_latest_get+0x64>)
   13b2a:	f003 ff95 	bl	17a58 <z_impl_k_sem_give>
			first = 0U;
   13b2e:	2c02      	cmp	r4, #2
		*is_modified = 1U;
   13b30:	f04f 0301 	mov.w	r3, #1
			first = 0U;
   13b34:	bf08      	it	eq
   13b36:	2400      	moveq	r4, #0
		pdu->first = first;
   13b38:	702c      	strb	r4, [r5, #0]
		*is_modified = 1U;
   13b3a:	7033      	strb	r3, [r6, #0]
		pdu->pdu[pdu_idx] = NULL;
   13b3c:	2300      	movs	r3, #0
   13b3e:	607b      	str	r3, [r7, #4]
	return (void *)pdu->pdu[first];
   13b40:	eb05 0484 	add.w	r4, r5, r4, lsl #2
   13b44:	6860      	ldr	r0, [r4, #4]
}
   13b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return NULL;
   13b48:	2000      	movs	r0, #0
   13b4a:	e7fc      	b.n	13b46 <lll_adv_pdu_latest_get+0x5a>
   13b4c:	2000094c 	.word	0x2000094c
   13b50:	20002a40 	.word	0x20002a40

00013b54 <chan_prepare.isra.0>:
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   13b54:	7a03      	ldrb	r3, [r0, #8]
	return __builtin_ffs(op);
   13b56:	f3c3 1302 	ubfx	r3, r3, #4, #3
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   13b5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13b5c:	2b00      	cmp	r3, #0
   13b5e:	4604      	mov	r4, r0
   13b60:	fa93 f0a3 	rbit	r0, r3
   13b64:	fab0 f080 	clz	r0, r0
   13b68:	bf08      	it	eq
   13b6a:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
	LL_ASSERT(chan);
   13b6e:	1c45      	adds	r5, r0, #1
   13b70:	d10c      	bne.n	13b8c <chan_prepare.isra.0+0x38>
   13b72:	4a30      	ldr	r2, [pc, #192]	; (13c34 <chan_prepare.isra.0+0xe0>)
   13b74:	4930      	ldr	r1, [pc, #192]	; (13c38 <chan_prepare.isra.0+0xe4>)
   13b76:	4831      	ldr	r0, [pc, #196]	; (13c3c <chan_prepare.isra.0+0xe8>)
   13b78:	f44f 63a4 	mov.w	r3, #1312	; 0x520
   13b7c:	f005 f822 	bl	18bc4 <printk>
   13b80:	4040      	eors	r0, r0
   13b82:	f380 8811 	msr	BASEPRI, r0
   13b86:	f04f 0003 	mov.w	r0, #3
   13b8a:	df02      	svc	2

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   13b8c:	7a23      	ldrb	r3, [r4, #8]
   13b8e:	f3c3 1202 	ubfx	r2, r3, #4, #3
   13b92:	1e51      	subs	r1, r2, #1
   13b94:	400a      	ands	r2, r1
   13b96:	f362 1306 	bfi	r3, r2, #4, #3

	lll_chan_set(36 + chan);
   13b9a:	f105 0024 	add.w	r0, r5, #36	; 0x24
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   13b9e:	7223      	strb	r3, [r4, #8]
	lll_chan_set(36 + chan);
   13ba0:	f7ff fc9e 	bl	134e0 <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   13ba4:	2300      	movs	r3, #0
#endif /* CONFIG_BT_CTLR_ADV_EXT_PDU_EXTRA_DATA_MEMORY */

static inline struct pdu_adv *lll_adv_data_latest_get(struct lll_adv *lll,
						      uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   13ba6:	f10d 0107 	add.w	r1, sp, #7
   13baa:	f104 000c 	add.w	r0, r4, #12
   13bae:	f88d 3007 	strb.w	r3, [sp, #7]
   13bb2:	f7ff ff9b 	bl	13aec <lll_adv_pdu_latest_get>
	pdu = lll_adv_data_latest_get(lll, &upd);
	LL_ASSERT(pdu);
   13bb6:	4605      	mov	r5, r0
   13bb8:	b960      	cbnz	r0, 13bd4 <chan_prepare.isra.0+0x80>
   13bba:	4a1e      	ldr	r2, [pc, #120]	; (13c34 <chan_prepare.isra.0+0xe0>)
   13bbc:	4920      	ldr	r1, [pc, #128]	; (13c40 <chan_prepare.isra.0+0xec>)
   13bbe:	481f      	ldr	r0, [pc, #124]	; (13c3c <chan_prepare.isra.0+0xe8>)
   13bc0:	f240 5329 	movw	r3, #1321	; 0x529
   13bc4:	f004 fffe 	bl	18bc4 <printk>
   13bc8:	4040      	eors	r0, r0
   13bca:	f380 8811 	msr	BASEPRI, r0
   13bce:	f04f 0003 	mov.w	r0, #3
   13bd2:	df02      	svc	2

	radio_pkt_tx_set(pdu);
   13bd4:	4628      	mov	r0, r5
   13bd6:	f001 f9a1 	bl	14f1c <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   13bda:	782b      	ldrb	r3, [r5, #0]
   13bdc:	f003 030f 	and.w	r3, r3, #15
   13be0:	2b02      	cmp	r3, #2
   13be2:	d01f      	beq.n	13c24 <chan_prepare.isra.0+0xd0>
}

static inline struct pdu_adv *lll_adv_scan_rsp_latest_get(struct lll_adv *lll,
							  uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   13be4:	f10d 0107 	add.w	r1, sp, #7
   13be8:	f104 0018 	add.w	r0, r4, #24
   13bec:	f7ff ff7e 	bl	13aec <lll_adv_pdu_latest_get>
	    (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		struct pdu_adv *scan_pdu;

		scan_pdu = lll_adv_scan_rsp_latest_get(lll, &upd);
		LL_ASSERT(scan_pdu);
   13bf0:	b960      	cbnz	r0, 13c0c <chan_prepare.isra.0+0xb8>
   13bf2:	4a10      	ldr	r2, [pc, #64]	; (13c34 <chan_prepare.isra.0+0xe0>)
   13bf4:	4913      	ldr	r1, [pc, #76]	; (13c44 <chan_prepare.isra.0+0xf0>)
   13bf6:	4811      	ldr	r0, [pc, #68]	; (13c3c <chan_prepare.isra.0+0xe8>)
   13bf8:	f240 5333 	movw	r3, #1331	; 0x533
   13bfc:	f004 ffe2 	bl	18bc4 <printk>
   13c00:	4040      	eors	r0, r0
   13c02:	f380 8811 	msr	BASEPRI, r0
   13c06:	f04f 0003 	mov.w	r0, #3
   13c0a:	df02      	svc	2
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   13c0c:	480e      	ldr	r0, [pc, #56]	; (13c48 <chan_prepare.isra.0+0xf4>)
   13c0e:	4621      	mov	r1, r4
   13c10:	f001 f8c8 	bl	14da4 <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   13c14:	2096      	movs	r0, #150	; 0x96
   13c16:	f001 fafd 	bl	15214 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   13c1a:	2000      	movs	r0, #0
   13c1c:	f001 fa58 	bl	150d0 <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   13c20:	b003      	add	sp, #12
   13c22:	bd30      	pop	{r4, r5, pc}
		radio_isr_set(isr_done, lll);
   13c24:	4809      	ldr	r0, [pc, #36]	; (13c4c <chan_prepare.isra.0+0xf8>)
   13c26:	4621      	mov	r1, r4
   13c28:	f001 f8bc 	bl	14da4 <radio_isr_set>
		radio_switch_complete_and_disable();
   13c2c:	f001 fa74 	bl	15118 <radio_switch_complete_and_disable>
	return pdu;
   13c30:	e7f6      	b.n	13c20 <chan_prepare.isra.0+0xcc>
   13c32:	bf00      	nop
   13c34:	0002308c 	.word	0x0002308c
   13c38:	00022ed4 	.word	0x00022ed4
   13c3c:	00020429 	.word	0x00020429
   13c40:	000230f5 	.word	0x000230f5
   13c44:	000230f0 	.word	0x000230f0
   13c48:	0001384d 	.word	0x0001384d
   13c4c:	0001d571 	.word	0x0001d571

00013c50 <prepare_cb>:
{
   13c50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	lll = p->param;
   13c52:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->conn &&
   13c54:	6863      	ldr	r3, [r4, #4]
{
   13c56:	4605      	mov	r5, r0
	if (unlikely(lll->conn &&
   13c58:	b163      	cbz	r3, 13c74 <prepare_cb+0x24>
   13c5a:	f893 3020 	ldrb.w	r3, [r3, #32]
   13c5e:	079a      	lsls	r2, r3, #30
   13c60:	d008      	beq.n	13c74 <prepare_cb+0x24>
		radio_isr_set(lll_isr_early_abort, lll);
   13c62:	4831      	ldr	r0, [pc, #196]	; (13d28 <prepare_cb+0xd8>)
   13c64:	4621      	mov	r1, r4
		radio_isr_set(isr_abort, lll);
   13c66:	f001 f89d 	bl	14da4 <radio_isr_set>
		radio_disable();
   13c6a:	f001 f969 	bl	14f40 <radio_disable>
}
   13c6e:	2000      	movs	r0, #0
   13c70:	b003      	add	sp, #12
   13c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
	radio_reset();
   13c74:	f001 f8b6 	bl	14de4 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   13c78:	2000      	movs	r0, #0
   13c7a:	f001 f8e7 	bl	14e4c <radio_tx_power_set>
	radio_phy_set(0, 0);
   13c7e:	2100      	movs	r1, #0
   13c80:	4608      	mov	r0, r1
   13c82:	f001 f8d3 	bl	14e2c <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_LEG_PAYLOAD_SIZE_MAX, 0);
   13c86:	2200      	movs	r2, #0
   13c88:	2125      	movs	r1, #37	; 0x25
   13c8a:	2008      	movs	r0, #8
   13c8c:	f001 f914 	bl	14eb8 <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   13c90:	4b26      	ldr	r3, [pc, #152]	; (13d2c <prepare_cb+0xdc>)
   13c92:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   13c94:	a801      	add	r0, sp, #4
   13c96:	f001 f8f7 	bl	14e88 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   13c9a:	4925      	ldr	r1, [pc, #148]	; (13d30 <prepare_cb+0xe0>)
   13c9c:	f240 605b 	movw	r0, #1627	; 0x65b
   13ca0:	f001 f98a 	bl	14fb8 <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   13ca4:	7a23      	ldrb	r3, [r4, #8]
   13ca6:	f3c3 0242 	ubfx	r2, r3, #1, #3
   13caa:	f362 1306 	bfi	r3, r2, #4, #3
   13cae:	7223      	strb	r3, [r4, #8]
	pdu = chan_prepare(lll);
   13cb0:	4620      	mov	r0, r4
   13cb2:	f7ff ff4f 	bl	13b54 <chan_prepare.isra.0>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER_ACCEPT_LIST) && lll->filter_policy) {
   13cb6:	7a63      	ldrb	r3, [r4, #9]
   13cb8:	079b      	lsls	r3, r3, #30
   13cba:	d007      	beq.n	13ccc <prepare_cb+0x7c>
		struct lll_filter *fal = ull_filter_lll_get(true);
   13cbc:	2001      	movs	r0, #1
   13cbe:	f7ff f917 	bl	12ef0 <ull_filter_lll_get>
		radio_filter_configure(fal->enable_bitmask,
   13cc2:	7841      	ldrb	r1, [r0, #1]
   13cc4:	1c82      	adds	r2, r0, #2
   13cc6:	7800      	ldrb	r0, [r0, #0]
   13cc8:	f001 fa56 	bl	15178 <radio_filter_configure>
	ull = HDR_LLL2ULL(lll);
   13ccc:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   13cce:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   13cd0:	4638      	mov	r0, r7
   13cd2:	f009 fbd5 	bl	1d480 <lll_event_offset_get>
   13cd6:	4406      	add	r6, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   13cd8:	686a      	ldr	r2, [r5, #4]
   13cda:	f106 0109 	add.w	r1, r6, #9
   13cde:	2001      	movs	r0, #1
   13ce0:	f001 faa4 	bl	1522c <radio_tmr_start>
	radio_tmr_end_capture();
   13ce4:	f001 fb70 	bl	153c8 <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   13ce8:	4620      	mov	r0, r4
   13cea:	f7fd fc4d 	bl	11588 <ull_adv_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_ADV_BASE +
   13cee:	1c81      	adds	r1, r0, #2
   13cf0:	4632      	mov	r2, r6
   13cf2:	b2c9      	uxtb	r1, r1
   13cf4:	4638      	mov	r0, r7
   13cf6:	f009 fbd1 	bl	1d49c <lll_preempt_calc>
   13cfa:	b110      	cbz	r0, 13d02 <prepare_cb+0xb2>
		radio_isr_set(isr_abort, lll);
   13cfc:	480d      	ldr	r0, [pc, #52]	; (13d34 <prepare_cb+0xe4>)
   13cfe:	4621      	mov	r1, r4
   13d00:	e7b1      	b.n	13c66 <prepare_cb+0x16>
		ret = lll_prepare_done(lll);
   13d02:	4620      	mov	r0, r4
   13d04:	f009 fbb7 	bl	1d476 <lll_prepare_done>
		LL_ASSERT(!ret);
   13d08:	2800      	cmp	r0, #0
   13d0a:	d0b0      	beq.n	13c6e <prepare_cb+0x1e>
   13d0c:	4a0a      	ldr	r2, [pc, #40]	; (13d38 <prepare_cb+0xe8>)
   13d0e:	490b      	ldr	r1, [pc, #44]	; (13d3c <prepare_cb+0xec>)
   13d10:	480b      	ldr	r0, [pc, #44]	; (13d40 <prepare_cb+0xf0>)
   13d12:	f240 33ba 	movw	r3, #954	; 0x3ba
   13d16:	f004 ff55 	bl	18bc4 <printk>
   13d1a:	4040      	eors	r0, r0
   13d1c:	f380 8811 	msr	BASEPRI, r0
   13d20:	f04f 0003 	mov.w	r0, #3
   13d24:	df02      	svc	2
   13d26:	e7a2      	b.n	13c6e <prepare_cb+0x1e>
   13d28:	00013599 	.word	0x00013599
   13d2c:	8e89bed6 	.word	0x8e89bed6
   13d30:	00555555 	.word	0x00555555
   13d34:	0001d517 	.word	0x0001d517
   13d38:	0002308c 	.word	0x0002308c
   13d3c:	00022a65 	.word	0x00022a65
   13d40:	00020429 	.word	0x00020429

00013d44 <lll_adv_prepare>:
{
   13d44:	b513      	push	{r0, r1, r4, lr}
   13d46:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   13d48:	f7ff fd48 	bl	137dc <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   13d4c:	2800      	cmp	r0, #0
   13d4e:	da0c      	bge.n	13d6a <lll_adv_prepare+0x26>
   13d50:	4a12      	ldr	r2, [pc, #72]	; (13d9c <lll_adv_prepare+0x58>)
   13d52:	4913      	ldr	r1, [pc, #76]	; (13da0 <lll_adv_prepare+0x5c>)
   13d54:	4813      	ldr	r0, [pc, #76]	; (13da4 <lll_adv_prepare+0x60>)
   13d56:	f240 2385 	movw	r3, #645	; 0x285
   13d5a:	f004 ff33 	bl	18bc4 <printk>
   13d5e:	4040      	eors	r0, r0
   13d60:	f380 8811 	msr	BASEPRI, r0
   13d64:	f04f 0003 	mov.w	r0, #3
   13d68:	df02      	svc	2
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   13d6a:	4a0f      	ldr	r2, [pc, #60]	; (13da8 <lll_adv_prepare+0x64>)
   13d6c:	490f      	ldr	r1, [pc, #60]	; (13dac <lll_adv_prepare+0x68>)
   13d6e:	4810      	ldr	r0, [pc, #64]	; (13db0 <lll_adv_prepare+0x6c>)
   13d70:	9400      	str	r4, [sp, #0]
   13d72:	2300      	movs	r3, #0
   13d74:	f009 f8a2 	bl	1cebc <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   13d78:	b170      	cbz	r0, 13d98 <lll_adv_prepare+0x54>
   13d7a:	3077      	adds	r0, #119	; 0x77
   13d7c:	d00c      	beq.n	13d98 <lll_adv_prepare+0x54>
   13d7e:	4a07      	ldr	r2, [pc, #28]	; (13d9c <lll_adv_prepare+0x58>)
   13d80:	490c      	ldr	r1, [pc, #48]	; (13db4 <lll_adv_prepare+0x70>)
   13d82:	4808      	ldr	r0, [pc, #32]	; (13da4 <lll_adv_prepare+0x60>)
   13d84:	f44f 7322 	mov.w	r3, #648	; 0x288
   13d88:	f004 ff1c 	bl	18bc4 <printk>
   13d8c:	4040      	eors	r0, r0
   13d8e:	f380 8811 	msr	BASEPRI, r0
   13d92:	f04f 0003 	mov.w	r0, #3
   13d96:	df02      	svc	2
}
   13d98:	b002      	add	sp, #8
   13d9a:	bd10      	pop	{r4, pc}
   13d9c:	0002308c 	.word	0x0002308c
   13da0:	0002303c 	.word	0x0002303c
   13da4:	00020429 	.word	0x00020429
   13da8:	00013c51 	.word	0x00013c51
   13dac:	00013961 	.word	0x00013961
   13db0:	000138f9 	.word	0x000138f9
   13db4:	000230f9 	.word	0x000230f9

00013db8 <isr_rx>:
{
   13db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13dbc:	b087      	sub	sp, #28
   13dbe:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   13dc0:	f001 f8e6 	bl	14f90 <radio_is_done>
	if (trx_done) {
   13dc4:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
   13dc8:	d074      	beq.n	13eb4 <isr_rx+0xfc>
		crc_ok = radio_crc_is_valid();
   13dca:	f001 f901 	bl	14fd0 <radio_crc_is_valid>
   13dce:	b2c6      	uxtb	r6, r0
		devmatch_ok = radio_filter_has_match();
   13dd0:	f001 fa00 	bl	151d4 <radio_filter_has_match>
   13dd4:	fa5f f880 	uxtb.w	r8, r0
		devmatch_id = radio_filter_match_get();
   13dd8:	f001 fa06 	bl	151e8 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   13ddc:	f001 fb20 	bl	15420 <radio_ar_has_match>
		irkmatch_id = radio_ar_match_get();
   13de0:	f001 fb06 	bl	153f0 <radio_ar_match_get>
		rssi_ready = radio_rssi_is_ready();
   13de4:	f001 f9be 	bl	15164 <radio_rssi_is_ready>
	lll_isr_status_reset();
   13de8:	f009 fb79 	bl	1d4de <lll_isr_status_reset>
	if (!trx_done) {
   13dec:	2d00      	cmp	r5, #0
   13dee:	f000 80bf 	beq.w	13f70 <isr_rx+0x1b8>
	if (crc_ok) {
   13df2:	2e00      	cmp	r6, #0
   13df4:	f000 80bc 	beq.w	13f70 <isr_rx+0x1b8>
#if defined(CONFIG_BT_CTLR_PRIVACY)
	/* An IRK match implies address resolution enabled */
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
				    FILTER_IDX_NONE;
#else
	uint8_t rl_idx = FILTER_IDX_NONE;
   13df8:	23ff      	movs	r3, #255	; 0xff
#endif /* CONFIG_BT_CTLR_PRIVACY */

	node_rx = ull_pdu_rx_alloc_peek(1);
   13dfa:	2001      	movs	r0, #1
	uint8_t rl_idx = FILTER_IDX_NONE;
   13dfc:	f88d 3017 	strb.w	r3, [sp, #23]
	node_rx = ull_pdu_rx_alloc_peek(1);
   13e00:	f7fc ffb2 	bl	10d68 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   13e04:	4605      	mov	r5, r0
   13e06:	b960      	cbnz	r0, 13e22 <isr_rx+0x6a>
   13e08:	4a5e      	ldr	r2, [pc, #376]	; (13f84 <isr_rx+0x1cc>)
   13e0a:	495f      	ldr	r1, [pc, #380]	; (13f88 <isr_rx+0x1d0>)
   13e0c:	485f      	ldr	r0, [pc, #380]	; (13f8c <isr_rx+0x1d4>)
   13e0e:	f240 5363 	movw	r3, #1379	; 0x563
   13e12:	f004 fed7 	bl	18bc4 <printk>
   13e16:	4040      	eors	r0, r0
   13e18:	f380 8811 	msr	BASEPRI, r0
   13e1c:	f04f 0003 	mov.w	r0, #3
   13e20:	df02      	svc	2
   13e22:	7b23      	ldrb	r3, [r4, #12]
   13e24:	eb04 0383 	add.w	r3, r4, r3, lsl #2

	pdu_rx = (void *)node_rx->pdu;
   13e28:	f105 0a1c 	add.w	sl, r5, #28
   13e2c:	691e      	ldr	r6, [r3, #16]
	pdu_adv = lll_adv_data_curr_get(lll);

	addr = pdu_adv->adv_ind.addr;
   13e2e:	46b1      	mov	r9, r6
	tx_addr = pdu_adv->tx_addr;
   13e30:	f819 7b02 	ldrb.w	r7, [r9], #2

	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   13e34:	f007 030f 	and.w	r3, r7, #15
   13e38:	2b01      	cmp	r3, #1
	} else {
		tgt_addr = NULL;
	}
	rx_addr = pdu_adv->rx_addr;

	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   13e3a:	7f2b      	ldrb	r3, [r5, #28]
   13e3c:	f003 030f 	and.w	r3, r3, #15
		tgt_addr = pdu_adv->direct_ind.tgt_addr;
   13e40:	bf0c      	ite	eq
   13e42:	3608      	addeq	r6, #8
		tgt_addr = NULL;
   13e44:	2600      	movne	r6, #0
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   13e46:	2b03      	cmp	r3, #3
	tx_addr = pdu_adv->tx_addr;
   13e48:	f3c7 1b80 	ubfx	fp, r7, #6, #1
	rx_addr = pdu_adv->rx_addr;
   13e4c:	ea4f 17d7 	mov.w	r7, r7, lsr #7
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   13e50:	d133      	bne.n	13eba <isr_rx+0x102>
   13e52:	7f6b      	ldrb	r3, [r5, #29]
   13e54:	2b0c      	cmp	r3, #12
   13e56:	f040 808b 	bne.w	13f70 <isr_rx+0x1b8>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   13e5a:	2e00      	cmp	r6, #0
   13e5c:	f040 8088 	bne.w	13f70 <isr_rx+0x1b8>
	    (tgt_addr == NULL) &&
	    lll_adv_scan_req_check(lll, pdu_rx, tx_addr, addr, devmatch_ok,
   13e60:	f10d 0317 	add.w	r3, sp, #23
   13e64:	e9cd 8300 	strd	r8, r3, [sp]
   13e68:	465a      	mov	r2, fp
   13e6a:	464b      	mov	r3, r9
   13e6c:	4651      	mov	r1, sl
   13e6e:	4620      	mov	r0, r4
   13e70:	f009 fbba 	bl	1d5e8 <lll_adv_scan_req_check>
	    (tgt_addr == NULL) &&
   13e74:	b308      	cbz	r0, 13eba <isr_rx+0x102>
				    &rl_idx)) {
		radio_isr_set(isr_done, lll);
   13e76:	4621      	mov	r1, r4
   13e78:	4845      	ldr	r0, [pc, #276]	; (13f90 <isr_rx+0x1d8>)
   13e7a:	f000 ff93 	bl	14da4 <radio_isr_set>
		radio_switch_complete_and_disable();
   13e7e:	f001 f94b 	bl	15118 <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   13e82:	7e20      	ldrb	r0, [r4, #24]
   13e84:	eb04 0480 	add.w	r4, r4, r0, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   13e88:	69e0      	ldr	r0, [r4, #28]
   13e8a:	f001 f847 	bl	14f1c <radio_pkt_tx_set>

		/* assert if radio packet ptr is not set and radio started tx */
		LL_ASSERT(!radio_is_ready());
   13e8e:	f001 f875 	bl	14f7c <radio_is_ready>
   13e92:	b160      	cbz	r0, 13eae <isr_rx+0xf6>
   13e94:	4a3b      	ldr	r2, [pc, #236]	; (13f84 <isr_rx+0x1cc>)
   13e96:	493f      	ldr	r1, [pc, #252]	; (13f94 <isr_rx+0x1dc>)
   13e98:	483c      	ldr	r0, [pc, #240]	; (13f8c <isr_rx+0x1d4>)
   13e9a:	f240 537c 	movw	r3, #1404	; 0x57c
   13e9e:	f004 fe91 	bl	18bc4 <printk>
   13ea2:	4040      	eors	r0, r0
   13ea4:	f380 8811 	msr	BASEPRI, r0
   13ea8:	f04f 0003 	mov.w	r0, #3
   13eac:	df02      	svc	2
}
   13eae:	b007      	add	sp, #28
   13eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0U;
   13eb4:	462e      	mov	r6, r5
   13eb6:	46a8      	mov	r8, r5
   13eb8:	e796      	b.n	13de8 <isr_rx+0x30>
	 *       Under this race, peer central would get failed to establish
	 *       connection as the disconnect reason. This is an acceptable
	 *       outcome to keep the thread mode implementation simple when
	 *       disabling connectable advertising.
	 */
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   13eba:	7f2b      	ldrb	r3, [r5, #28]
   13ebc:	f003 030f 	and.w	r3, r3, #15
   13ec0:	2b05      	cmp	r3, #5
   13ec2:	d155      	bne.n	13f70 <isr_rx+0x1b8>
   13ec4:	7f6b      	ldrb	r3, [r5, #29]
   13ec6:	2b22      	cmp	r3, #34	; 0x22
   13ec8:	d152      	bne.n	13f70 <isr_rx+0x1b8>
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
		   lll->conn && !lll->conn->periph.cancelled &&
   13eca:	6863      	ldr	r3, [r4, #4]
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   13ecc:	2b00      	cmp	r3, #0
   13ece:	d04f      	beq.n	13f70 <isr_rx+0x1b8>
		   lll->conn && !lll->conn->periph.cancelled &&
   13ed0:	f893 3020 	ldrb.w	r3, [r3, #32]
   13ed4:	079b      	lsls	r3, r3, #30
   13ed6:	d44b      	bmi.n	13f70 <isr_rx+0x1b8>
		   lll_adv_connect_ind_check(lll, pdu_rx, tx_addr, addr,
   13ed8:	f10d 0317 	add.w	r3, sp, #23
   13edc:	e9cd 8302 	strd	r8, r3, [sp, #8]
   13ee0:	e9cd 7600 	strd	r7, r6, [sp]
   13ee4:	464b      	mov	r3, r9
   13ee6:	465a      	mov	r2, fp
   13ee8:	4651      	mov	r1, sl
   13eea:	4620      	mov	r0, r4
   13eec:	f009 fb94 	bl	1d618 <lll_adv_connect_ind_check>
		   lll->conn && !lll->conn->periph.cancelled &&
   13ef0:	2800      	cmp	r0, #0
   13ef2:	d03d      	beq.n	13f70 <isr_rx+0x1b8>
		struct node_rx_pdu *rx;

		if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
			rx = ull_pdu_rx_alloc_peek(4);
		} else {
			rx = ull_pdu_rx_alloc_peek(3);
   13ef4:	2003      	movs	r0, #3
   13ef6:	f7fc ff37 	bl	10d68 <ull_pdu_rx_alloc_peek>
		}

		if (!rx) {
   13efa:	2800      	cmp	r0, #0
   13efc:	d038      	beq.n	13f70 <isr_rx+0x1b8>
			return -ENOBUFS;
		}

		radio_isr_set(isr_abort, lll);
   13efe:	4826      	ldr	r0, [pc, #152]	; (13f98 <isr_rx+0x1e0>)
   13f00:	4621      	mov	r1, r4
   13f02:	f000 ff4f 	bl	14da4 <radio_isr_set>
		radio_disable();
   13f06:	f001 f81b 	bl	14f40 <radio_disable>

		/* assert if radio started tx */
		LL_ASSERT(!radio_is_ready());
   13f0a:	f001 f837 	bl	14f7c <radio_is_ready>
   13f0e:	b160      	cbz	r0, 13f2a <isr_rx+0x172>
   13f10:	4a1c      	ldr	r2, [pc, #112]	; (13f84 <isr_rx+0x1cc>)
   13f12:	4920      	ldr	r1, [pc, #128]	; (13f94 <isr_rx+0x1dc>)
   13f14:	481d      	ldr	r0, [pc, #116]	; (13f8c <isr_rx+0x1d4>)
   13f16:	f240 53c3 	movw	r3, #1475	; 0x5c3
   13f1a:	f004 fe53 	bl	18bc4 <printk>
   13f1e:	4040      	eors	r0, r0
   13f20:	f380 8811 	msr	BASEPRI, r0
   13f24:	f04f 0003 	mov.w	r0, #3
   13f28:	df02      	svc	2
			lll->conn->rssi_latest =  radio_rssi_get();
		}
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

		/* Stop further LLL radio events */
		lll->conn->periph.initiated = 1;
   13f2a:	6862      	ldr	r2, [r4, #4]
   13f2c:	f892 3020 	ldrb.w	r3, [r2, #32]
   13f30:	f043 0301 	orr.w	r3, r3, #1
   13f34:	f882 3020 	strb.w	r3, [r2, #32]

		rx = ull_pdu_rx_alloc();
   13f38:	f7fc ff2e 	bl	10d98 <ull_pdu_rx_alloc>

		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   13f3c:	2316      	movs	r3, #22
   13f3e:	7103      	strb	r3, [r0, #4]
		rx->hdr.handle = 0xffff;
   13f40:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13f44:	80c3      	strh	r3, [r0, #6]

		ftr = &(rx->hdr.rx_ftr);
		ftr->param = lll;
   13f46:	6084      	str	r4, [r0, #8]
		rx = ull_pdu_rx_alloc();
   13f48:	4605      	mov	r5, r0
		ftr->ticks_anchor = radio_tmr_start_get();
   13f4a:	f001 f9f3 	bl	15334 <radio_tmr_start_get>
   13f4e:	6128      	str	r0, [r5, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   13f50:	f001 fa42 	bl	153d8 <radio_tmr_end_get>
				    radio_rx_chain_delay_get(0, 0);
   13f54:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   13f56:	4604      	mov	r4, r0
				    radio_rx_chain_delay_get(0, 0);
   13f58:	4608      	mov	r0, r1
   13f5a:	f009 fd15 	bl	1d988 <radio_rx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   13f5e:	1a24      	subs	r4, r4, r0

		if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
			ftr->extra = ull_pdu_rx_alloc();
		}

		ull_rx_put(rx->hdr.link, rx);
   13f60:	4629      	mov	r1, r5
   13f62:	6828      	ldr	r0, [r5, #0]
		ftr->radio_end_us = radio_tmr_end_get() -
   13f64:	616c      	str	r4, [r5, #20]
		ull_rx_put(rx->hdr.link, rx);
   13f66:	f7fc ff2d 	bl	10dc4 <ull_rx_put>
		ull_rx_sched();
   13f6a:	f7fc ff3b 	bl	10de4 <ull_rx_sched>
		if (!err) {
   13f6e:	e79e      	b.n	13eae <isr_rx+0xf6>
	radio_isr_set(isr_done, param);
   13f70:	4807      	ldr	r0, [pc, #28]	; (13f90 <isr_rx+0x1d8>)
   13f72:	4621      	mov	r1, r4
   13f74:	f000 ff16 	bl	14da4 <radio_isr_set>
}
   13f78:	b007      	add	sp, #28
   13f7a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	radio_disable();
   13f7e:	f000 bfdf 	b.w	14f40 <radio_disable>
   13f82:	bf00      	nop
   13f84:	0002308c 	.word	0x0002308c
   13f88:	000230d6 	.word	0x000230d6
   13f8c:	00020429 	.word	0x00020429
   13f90:	0001d571 	.word	0x0001d571
   13f94:	000230de 	.word	0x000230de
   13f98:	0001d517 	.word	0x0001d517

00013f9c <ticker_stop_cb>:
	lll_done(param);
}

static void ticker_stop_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
			   uint32_t remainder, uint16_t lazy, uint8_t force, void *param)
{
   13f9c:	b508      	push	{r3, lr}
	radio_isr_set(isr_done_cleanup, param);
   13f9e:	9903      	ldr	r1, [sp, #12]
   13fa0:	4803      	ldr	r0, [pc, #12]	; (13fb0 <ticker_stop_cb+0x14>)
   13fa2:	f000 feff 	bl	14da4 <radio_isr_set>
	radio_disable();
}
   13fa6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_disable();
   13faa:	f000 bfc9 	b.w	14f40 <radio_disable>
   13fae:	bf00      	nop
   13fb0:	0001d695 	.word	0x0001d695

00013fb4 <common_prepare_cb>:
{
   13fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	lll = p->param;
   13fb8:	68c4      	ldr	r4, [r0, #12]
	lll->state = 0U;
   13fba:	7923      	ldrb	r3, [r4, #4]
   13fbc:	f36f 0300 	bfc	r3, #0, #1
{
   13fc0:	b08c      	sub	sp, #48	; 0x30
	lll->state = 0U;
   13fc2:	7123      	strb	r3, [r4, #4]
{
   13fc4:	460d      	mov	r5, r1
   13fc6:	4607      	mov	r7, r0
	radio_reset();
   13fc8:	f000 ff0c 	bl	14de4 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   13fcc:	2000      	movs	r0, #0
   13fce:	f000 ff3d 	bl	14e4c <radio_tx_power_set>
	radio_phy_set(0, 0);
   13fd2:	2100      	movs	r1, #0
   13fd4:	4608      	mov	r0, r1
   13fd6:	f000 ff29 	bl	14e2c <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_LEG_PAYLOAD_SIZE_MAX, 0);
   13fda:	2200      	movs	r2, #0
   13fdc:	2125      	movs	r1, #37	; 0x25
   13fde:	2008      	movs	r0, #8
   13fe0:	f000 ff6a 	bl	14eb8 <radio_pkt_configure>
	node_rx = ull_pdu_rx_alloc_peek(1);
   13fe4:	2001      	movs	r0, #1
   13fe6:	f7fc febf 	bl	10d68 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   13fea:	4606      	mov	r6, r0
   13fec:	b960      	cbnz	r0, 14008 <common_prepare_cb+0x54>
   13fee:	4a4e      	ldr	r2, [pc, #312]	; (14128 <common_prepare_cb+0x174>)
   13ff0:	494e      	ldr	r1, [pc, #312]	; (1412c <common_prepare_cb+0x178>)
   13ff2:	484f      	ldr	r0, [pc, #316]	; (14130 <common_prepare_cb+0x17c>)
   13ff4:	f44f 73b6 	mov.w	r3, #364	; 0x16c
   13ff8:	f004 fde4 	bl	18bc4 <printk>
   13ffc:	4040      	eors	r0, r0
   13ffe:	f380 8811 	msr	BASEPRI, r0
   14002:	f04f 0003 	mov.w	r0, #3
   14006:	df02      	svc	2
	radio_pkt_rx_set(node_rx->pdu);
   14008:	f106 001c 	add.w	r0, r6, #28
   1400c:	f000 ff80 	bl	14f10 <radio_pkt_rx_set>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   14010:	4b48      	ldr	r3, [pc, #288]	; (14134 <common_prepare_cb+0x180>)
   14012:	930b      	str	r3, [sp, #44]	; 0x2c
	radio_aa_set((uint8_t *)&aa);
   14014:	a80b      	add	r0, sp, #44	; 0x2c
   14016:	f000 ff37 	bl	14e88 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1401a:	4947      	ldr	r1, [pc, #284]	; (14138 <common_prepare_cb+0x184>)
   1401c:	f240 605b 	movw	r0, #1627	; 0x65b
   14020:	f000 ffca 	bl	14fb8 <radio_crc_configure>
	lll_chan_set(37 + lll->chan);
   14024:	7920      	ldrb	r0, [r4, #4]
   14026:	f3c0 0041 	ubfx	r0, r0, #1, #2
   1402a:	3025      	adds	r0, #37	; 0x25
   1402c:	f7ff fa58 	bl	134e0 <lll_chan_set>
	radio_isr_set(isr_rx, lll);
   14030:	4842      	ldr	r0, [pc, #264]	; (1413c <common_prepare_cb+0x188>)
   14032:	4621      	mov	r1, r4
   14034:	f000 feb6 	bl	14da4 <radio_isr_set>
	} else if (lll->type ||
   14038:	7923      	ldrb	r3, [r4, #4]
   1403a:	069b      	lsls	r3, r3, #26
   1403c:	d539      	bpl.n	140b2 <common_prepare_cb+0xfe>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1403e:	2096      	movs	r0, #150	; 0x96
   14040:	f001 f8e8 	bl	15214 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   14044:	2300      	movs	r3, #0
   14046:	461a      	mov	r2, r3
   14048:	4619      	mov	r1, r3
   1404a:	4618      	mov	r0, r3
   1404c:	f001 f852 	bl	150f4 <radio_switch_complete_and_tx>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER_ACCEPT_LIST) && lll->filter_policy) {
   14050:	7923      	ldrb	r3, [r4, #4]
   14052:	f013 0f18 	tst.w	r3, #24
   14056:	d007      	beq.n	14068 <common_prepare_cb+0xb4>
		struct lll_filter *fal = ull_filter_lll_get(true);
   14058:	2001      	movs	r0, #1
   1405a:	f7fe ff49 	bl	12ef0 <ull_filter_lll_get>
		radio_filter_configure(fal->enable_bitmask,
   1405e:	7841      	ldrb	r1, [r0, #1]
   14060:	1c82      	adds	r2, r0, #2
   14062:	7800      	ldrb	r0, [r0, #0]
   14064:	f001 f888 	bl	15178 <radio_filter_configure>
	ull = HDR_LLL2ULL(lll);
   14068:	f8d4 8000 	ldr.w	r8, [r4]
	ticks_at_event = p->ticks_at_expire;
   1406c:	683e      	ldr	r6, [r7, #0]
	ticks_at_event += lll_event_offset_get(ull);
   1406e:	4640      	mov	r0, r8
   14070:	f009 fa06 	bl	1d480 <lll_event_offset_get>
   14074:	4406      	add	r6, r0
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   14076:	687a      	ldr	r2, [r7, #4]
   14078:	f106 0109 	add.w	r1, r6, #9
   1407c:	2000      	movs	r0, #0
   1407e:	f001 f8d5 	bl	1522c <radio_tmr_start>
	radio_tmr_end_capture();
   14082:	f001 f9a1 	bl	153c8 <radio_tmr_end_capture>
	radio_rssi_measure();
   14086:	f001 f855 	bl	15134 <radio_rssi_measure>
				   ull_scan_lll_handle_get(lll)),
   1408a:	4620      	mov	r0, r4
   1408c:	f7fd fba8 	bl	117e0 <ull_scan_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_SCAN_BASE +
   14090:	1d01      	adds	r1, r0, #4
   14092:	4632      	mov	r2, r6
   14094:	b2c9      	uxtb	r1, r1
   14096:	4640      	mov	r0, r8
   14098:	f009 fa00 	bl	1d49c <lll_preempt_calc>
   1409c:	b160      	cbz	r0, 140b8 <common_prepare_cb+0x104>
		radio_isr_set(isr_abort, lll);
   1409e:	4828      	ldr	r0, [pc, #160]	; (14140 <common_prepare_cb+0x18c>)
   140a0:	4621      	mov	r1, r4
   140a2:	f000 fe7f 	bl	14da4 <radio_isr_set>
		radio_disable();
   140a6:	f000 ff4b 	bl	14f40 <radio_disable>
}
   140aa:	2000      	movs	r0, #0
   140ac:	b00c      	add	sp, #48	; 0x30
   140ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		radio_switch_complete_and_disable();
   140b2:	f001 f831 	bl	15118 <radio_switch_complete_and_disable>
   140b6:	e7cb      	b.n	14050 <common_prepare_cb+0x9c>
		if (!is_resume && lll->ticks_window) {
   140b8:	bb1d      	cbnz	r5, 14102 <common_prepare_cb+0x14e>
   140ba:	6923      	ldr	r3, [r4, #16]
   140bc:	b30b      	cbz	r3, 14102 <common_prepare_cb+0x14e>
			ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   140be:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
   140c2:	9208      	str	r2, [sp, #32]
   140c4:	4a1f      	ldr	r2, [pc, #124]	; (14144 <common_prepare_cb+0x190>)
   140c6:	e9cd 4206 	strd	r4, r2, [sp, #24]
   140ca:	4a1f      	ldr	r2, [pc, #124]	; (14148 <common_prepare_cb+0x194>)
   140cc:	e9cd 3500 	strd	r3, r5, [sp]
   140d0:	e9cd 5204 	strd	r5, r2, [sp, #16]
   140d4:	4633      	mov	r3, r6
   140d6:	e9cd 5502 	strd	r5, r5, [sp, #8]
   140da:	2203      	movs	r2, #3
   140dc:	4629      	mov	r1, r5
   140de:	f008 fe32 	bl	1cd46 <ticker_start>
			LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   140e2:	f030 0302 	bics.w	r3, r0, #2
   140e6:	d00c      	beq.n	14102 <common_prepare_cb+0x14e>
   140e8:	4a0f      	ldr	r2, [pc, #60]	; (14128 <common_prepare_cb+0x174>)
   140ea:	4918      	ldr	r1, [pc, #96]	; (1414c <common_prepare_cb+0x198>)
   140ec:	4810      	ldr	r0, [pc, #64]	; (14130 <common_prepare_cb+0x17c>)
   140ee:	f240 13d7 	movw	r3, #471	; 0x1d7
   140f2:	f004 fd67 	bl	18bc4 <printk>
   140f6:	4040      	eors	r0, r0
   140f8:	f380 8811 	msr	BASEPRI, r0
   140fc:	f04f 0003 	mov.w	r0, #3
   14100:	df02      	svc	2
		ret = lll_prepare_done(lll);
   14102:	4620      	mov	r0, r4
   14104:	f009 f9b7 	bl	1d476 <lll_prepare_done>
		LL_ASSERT(!ret);
   14108:	2800      	cmp	r0, #0
   1410a:	d0ce      	beq.n	140aa <common_prepare_cb+0xf6>
   1410c:	4a06      	ldr	r2, [pc, #24]	; (14128 <common_prepare_cb+0x174>)
   1410e:	4910      	ldr	r1, [pc, #64]	; (14150 <common_prepare_cb+0x19c>)
   14110:	4807      	ldr	r0, [pc, #28]	; (14130 <common_prepare_cb+0x17c>)
   14112:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
   14116:	f004 fd55 	bl	18bc4 <printk>
   1411a:	4040      	eors	r0, r0
   1411c:	f380 8811 	msr	BASEPRI, r0
   14120:	f04f 0003 	mov.w	r0, #3
   14124:	df02      	svc	2
   14126:	e7c0      	b.n	140aa <common_prepare_cb+0xf6>
   14128:	0002311d 	.word	0x0002311d
   1412c:	000230d6 	.word	0x000230d6
   14130:	00020429 	.word	0x00020429
   14134:	8e89bed6 	.word	0x8e89bed6
   14138:	00555555 	.word	0x00555555
   1413c:	00014349 	.word	0x00014349
   14140:	0001d793 	.word	0x0001d793
   14144:	0001426d 	.word	0x0001426d
   14148:	00013f9d 	.word	0x00013f9d
   1414c:	00022b46 	.word	0x00022b46
   14150:	00022a65 	.word	0x00022a65

00014154 <isr_common_done>:

	radio_isr_set(isr_rx, param);
}

static void isr_common_done(void *param)
{
   14154:	b538      	push	{r3, r4, r5, lr}
   14156:	4604      	mov	r4, r0
	struct node_rx_pdu *node_rx;
	struct lll_scan *lll;

	/* Clear radio status and events */
	lll_isr_status_reset();
   14158:	f009 f9c1 	bl	1d4de <lll_isr_status_reset>

	/* Reset scanning state */
	lll = param;
	lll->state = 0U;
   1415c:	7923      	ldrb	r3, [r4, #4]
   1415e:	f36f 0300 	bfc	r3, #0, #1
   14162:	7123      	strb	r3, [r4, #4]
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	/* setup tIFS switching */
	if (0) {
		/* TODO: Add Rx-Rx switch usecase improvement in the future */
	} else if (lll->type ||
   14164:	069b      	lsls	r3, r3, #26
   14166:	d526      	bpl.n	141b6 <isr_common_done+0x62>
#if defined(CONFIG_BT_CENTRAL)
		   lll->conn) {
#else /* !CONFIG_BT_CENTRAL */
		   0) {
#endif /* !CONFIG_BT_CENTRAL */
		radio_tmr_tifs_set(EVENT_IFS_US);
   14168:	2096      	movs	r0, #150	; 0x96
   1416a:	f001 f853 	bl	15214 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   1416e:	2300      	movs	r3, #0
   14170:	461a      	mov	r2, r3
   14172:	4619      	mov	r1, r3
   14174:	4618      	mov	r0, r3
   14176:	f000 ffbd 	bl	150f4 <radio_switch_complete_and_tx>
	} else {
		radio_switch_complete_and_disable();
	}

	node_rx = ull_pdu_rx_alloc_peek(1);
   1417a:	2001      	movs	r0, #1
   1417c:	f7fc fdf4 	bl	10d68 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   14180:	4605      	mov	r5, r0
   14182:	b960      	cbnz	r0, 1419e <isr_common_done+0x4a>
   14184:	4a0d      	ldr	r2, [pc, #52]	; (141bc <isr_common_done+0x68>)
   14186:	490e      	ldr	r1, [pc, #56]	; (141c0 <isr_common_done+0x6c>)
   14188:	480e      	ldr	r0, [pc, #56]	; (141c4 <isr_common_done+0x70>)
   1418a:	f44f 7346 	mov.w	r3, #792	; 0x318
   1418e:	f004 fd19 	bl	18bc4 <printk>
   14192:	4040      	eors	r0, r0
   14194:	f380 8811 	msr	BASEPRI, r0
   14198:	f04f 0003 	mov.w	r0, #3
   1419c:	df02      	svc	2
	radio_pkt_rx_set(node_rx->pdu);
   1419e:	f105 001c 	add.w	r0, r5, #28
   141a2:	f000 feb5 	bl	14f10 <radio_pkt_rx_set>
		radio_ar_configure(count, irks, 0);
#endif
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	radio_rssi_measure();
   141a6:	f000 ffc5 	bl	15134 <radio_rssi_measure>

	radio_isr_set(isr_rx, param);
   141aa:	4621      	mov	r1, r4
   141ac:	4806      	ldr	r0, [pc, #24]	; (141c8 <isr_common_done+0x74>)
}
   141ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(isr_rx, param);
   141b2:	f000 bdf7 	b.w	14da4 <radio_isr_set>
		radio_switch_complete_and_disable();
   141b6:	f000 ffaf 	bl	15118 <radio_switch_complete_and_disable>
   141ba:	e7de      	b.n	1417a <isr_common_done+0x26>
   141bc:	0002311d 	.word	0x0002311d
   141c0:	000230d6 	.word	0x000230d6
   141c4:	00020429 	.word	0x00020429
   141c8:	00014349 	.word	0x00014349

000141cc <isr_tx>:
{
   141cc:	b570      	push	{r4, r5, r6, lr}
   141ce:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   141d0:	f009 f975 	bl	1d4be <lll_isr_tx_status_reset>
	radio_switch_complete_and_disable();
   141d4:	f000 ffa0 	bl	15118 <radio_switch_complete_and_disable>
	node_rx = ull_pdu_rx_alloc_peek(1);
   141d8:	2001      	movs	r0, #1
   141da:	f7fc fdc5 	bl	10d68 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   141de:	4604      	mov	r4, r0
   141e0:	b960      	cbnz	r0, 141fc <isr_tx+0x30>
   141e2:	4a1d      	ldr	r2, [pc, #116]	; (14258 <isr_tx+0x8c>)
   141e4:	491d      	ldr	r1, [pc, #116]	; (1425c <isr_tx+0x90>)
   141e6:	481e      	ldr	r0, [pc, #120]	; (14260 <isr_tx+0x94>)
   141e8:	f240 23d2 	movw	r3, #722	; 0x2d2
   141ec:	f004 fcea 	bl	18bc4 <printk>
   141f0:	4040      	eors	r0, r0
   141f2:	f380 8811 	msr	BASEPRI, r0
   141f6:	f04f 0003 	mov.w	r0, #3
   141fa:	df02      	svc	2
	radio_pkt_rx_set(node_rx->pdu);
   141fc:	f104 001c 	add.w	r0, r4, #28
   14200:	f000 fe86 	bl	14f10 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   14204:	f000 feba 	bl	14f7c <radio_is_ready>
   14208:	b160      	cbz	r0, 14224 <isr_tx+0x58>
   1420a:	4a13      	ldr	r2, [pc, #76]	; (14258 <isr_tx+0x8c>)
   1420c:	4915      	ldr	r1, [pc, #84]	; (14264 <isr_tx+0x98>)
   1420e:	4814      	ldr	r0, [pc, #80]	; (14260 <isr_tx+0x94>)
   14210:	f240 23d6 	movw	r3, #726	; 0x2d6
   14214:	f004 fcd6 	bl	18bc4 <printk>
   14218:	4040      	eors	r0, r0
   1421a:	f380 8811 	msr	BASEPRI, r0
   1421e:	f04f 0003 	mov.w	r0, #3
   14222:	df02      	svc	2
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   14224:	f001 f8de 	bl	153e4 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   14228:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1422a:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   1422c:	4608      	mov	r0, r1
   1422e:	f009 fbab 	bl	1d988 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   14232:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   14234:	4606      	mov	r6, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   14236:	4608      	mov	r0, r1
   14238:	f009 fba2 	bl	1d980 <radio_tx_chain_delay_get>
   1423c:	4434      	add	r4, r6
   1423e:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   14240:	1a20      	subs	r0, r4, r0
   14242:	f001 f889 	bl	15358 <radio_tmr_hcto_configure>
	radio_rssi_measure();
   14246:	f000 ff75 	bl	15134 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   1424a:	4629      	mov	r1, r5
   1424c:	4806      	ldr	r0, [pc, #24]	; (14268 <isr_tx+0x9c>)
}
   1424e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	radio_isr_set(isr_rx, param);
   14252:	f000 bda7 	b.w	14da4 <radio_isr_set>
   14256:	bf00      	nop
   14258:	0002311d 	.word	0x0002311d
   1425c:	000230d6 	.word	0x000230d6
   14260:	00020429 	.word	0x00020429
   14264:	000230de 	.word	0x000230de
   14268:	00014349 	.word	0x00014349

0001426c <ticker_op_start_cb>:
{
   1426c:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1426e:	b160      	cbz	r0, 1428a <ticker_op_start_cb+0x1e>
   14270:	4a06      	ldr	r2, [pc, #24]	; (1428c <ticker_op_start_cb+0x20>)
   14272:	4907      	ldr	r1, [pc, #28]	; (14290 <ticker_op_start_cb+0x24>)
   14274:	4807      	ldr	r0, [pc, #28]	; (14294 <ticker_op_start_cb+0x28>)
   14276:	f44f 7318 	mov.w	r3, #608	; 0x260
   1427a:	f004 fca3 	bl	18bc4 <printk>
   1427e:	4040      	eors	r0, r0
   14280:	f380 8811 	msr	BASEPRI, r0
   14284:	f04f 0003 	mov.w	r0, #3
   14288:	df02      	svc	2
}
   1428a:	bd08      	pop	{r3, pc}
   1428c:	0002311d 	.word	0x0002311d
   14290:	00022e7a 	.word	0x00022e7a
   14294:	00020429 	.word	0x00020429

00014298 <is_abort_cb>:
	if (next != curr) {
   14298:	4281      	cmp	r1, r0
{
   1429a:	b508      	push	{r3, lr}
	if (next != curr) {
   1429c:	d017      	beq.n	142ce <is_abort_cb+0x36>
			if (!lll->ticks_window) {
   1429e:	690b      	ldr	r3, [r1, #16]
   142a0:	b9e3      	cbnz	r3, 142dc <is_abort_cb+0x44>
				*resume_cb = resume_prepare_cb;
   142a2:	4b10      	ldr	r3, [pc, #64]	; (142e4 <is_abort_cb+0x4c>)
   142a4:	6013      	str	r3, [r2, #0]
				err = lll_hfclock_on();
   142a6:	f7ff fa99 	bl	137dc <lll_hfclock_on>
				LL_ASSERT(err >= 0);
   142aa:	2800      	cmp	r0, #0
   142ac:	da0c      	bge.n	142c8 <is_abort_cb+0x30>
   142ae:	4a0e      	ldr	r2, [pc, #56]	; (142e8 <is_abort_cb+0x50>)
   142b0:	490e      	ldr	r1, [pc, #56]	; (142ec <is_abort_cb+0x54>)
   142b2:	480f      	ldr	r0, [pc, #60]	; (142f0 <is_abort_cb+0x58>)
   142b4:	f240 230e 	movw	r3, #526	; 0x20e
   142b8:	f004 fc84 	bl	18bc4 <printk>
   142bc:	4040      	eors	r0, r0
   142be:	f380 8811 	msr	BASEPRI, r0
   142c2:	f04f 0003 	mov.w	r0, #3
   142c6:	df02      	svc	2
				return -EAGAIN;
   142c8:	f06f 000a 	mvn.w	r0, #10
   142cc:	e005      	b.n	142da <is_abort_cb+0x42>
		radio_isr_set(isr_window, lll);
   142ce:	4809      	ldr	r0, [pc, #36]	; (142f4 <is_abort_cb+0x5c>)
   142d0:	f000 fd68 	bl	14da4 <radio_isr_set>
	radio_disable();
   142d4:	f000 fe34 	bl	14f40 <radio_disable>
   142d8:	2000      	movs	r0, #0
}
   142da:	bd08      	pop	{r3, pc}
			return -ECANCELED;
   142dc:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   142e0:	e7fb      	b.n	142da <is_abort_cb+0x42>
   142e2:	bf00      	nop
   142e4:	0001d71f 	.word	0x0001d71f
   142e8:	0002311d 	.word	0x0002311d
   142ec:	0002303c 	.word	0x0002303c
   142f0:	00020429 	.word	0x00020429
   142f4:	0001d6e3 	.word	0x0001d6e3

000142f8 <abort_cb>:
{
   142f8:	b510      	push	{r4, lr}
   142fa:	460c      	mov	r4, r1
	if (!prepare_param) {
   142fc:	b930      	cbnz	r0, 1430c <abort_cb+0x14>
			radio_isr_set(isr_abort, param);
   142fe:	480e      	ldr	r0, [pc, #56]	; (14338 <abort_cb+0x40>)
   14300:	f000 fd50 	bl	14da4 <radio_isr_set>
}
   14304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			radio_disable();
   14308:	f000 be1a 	b.w	14f40 <radio_disable>
	err = lll_hfclock_off();
   1430c:	f7ff fa7c 	bl	13808 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   14310:	2800      	cmp	r0, #0
   14312:	da0c      	bge.n	1432e <abort_cb+0x36>
   14314:	4a09      	ldr	r2, [pc, #36]	; (1433c <abort_cb+0x44>)
   14316:	490a      	ldr	r1, [pc, #40]	; (14340 <abort_cb+0x48>)
   14318:	480a      	ldr	r0, [pc, #40]	; (14344 <abort_cb+0x4c>)
   1431a:	f44f 7314 	mov.w	r3, #592	; 0x250
   1431e:	f004 fc51 	bl	18bc4 <printk>
   14322:	4040      	eors	r0, r0
   14324:	f380 8811 	msr	BASEPRI, r0
   14328:	f04f 0003 	mov.w	r0, #3
   1432c:	df02      	svc	2
	lll_done(param);
   1432e:	4620      	mov	r0, r4
}
   14330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   14334:	f7ff b87e 	b.w	13434 <lll_done>
   14338:	0001d793 	.word	0x0001d793
   1433c:	0002311d 	.word	0x0002311d
   14340:	0002303c 	.word	0x0002303c
   14344:	00020429 	.word	0x00020429

00014348 <isr_rx>:
{
   14348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1434c:	4605      	mov	r5, r0
	trx_done = radio_is_done();
   1434e:	f000 fe1f 	bl	14f90 <radio_is_done>
	if (trx_done) {
   14352:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
   14356:	f000 8089 	beq.w	1446c <isr_rx+0x124>
		crc_ok = radio_crc_is_valid();
   1435a:	f000 fe39 	bl	14fd0 <radio_crc_is_valid>
   1435e:	fa5f f880 	uxtb.w	r8, r0
		devmatch_ok = radio_filter_has_match();
   14362:	f000 ff37 	bl	151d4 <radio_filter_has_match>
   14366:	b2c7      	uxtb	r7, r0
		devmatch_id = radio_filter_match_get();
   14368:	f000 ff3e 	bl	151e8 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   1436c:	f001 f858 	bl	15420 <radio_ar_has_match>
		irkmatch_id = radio_ar_match_get();
   14370:	f001 f83e 	bl	153f0 <radio_ar_match_get>
		rssi_ready = radio_rssi_is_ready();
   14374:	f000 fef6 	bl	15164 <radio_rssi_is_ready>
   14378:	b2c6      	uxtb	r6, r0
		phy_flags_rx = radio_phy_flags_rx_get();
   1437a:	f009 fb0a 	bl	1d992 <radio_phy_flags_rx_get>
	lll_isr_status_reset();
   1437e:	f009 f8ae 	bl	1d4de <lll_isr_status_reset>
	if (!trx_done) {
   14382:	2c00      	cmp	r4, #0
   14384:	f000 808d 	beq.w	144a2 <isr_rx+0x15a>
	node_rx = ull_pdu_rx_alloc_peek(1);
   14388:	2001      	movs	r0, #1
   1438a:	f7fc fced 	bl	10d68 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1438e:	4604      	mov	r4, r0
   14390:	b960      	cbnz	r0, 143ac <isr_rx+0x64>
   14392:	4a65      	ldr	r2, [pc, #404]	; (14528 <isr_rx+0x1e0>)
   14394:	4965      	ldr	r1, [pc, #404]	; (1452c <isr_rx+0x1e4>)
   14396:	4866      	ldr	r0, [pc, #408]	; (14530 <isr_rx+0x1e8>)
   14398:	f240 2391 	movw	r3, #657	; 0x291
   1439c:	f004 fc12 	bl	18bc4 <printk>
   143a0:	4040      	eors	r0, r0
   143a2:	f380 8811 	msr	BASEPRI, r0
   143a6:	f04f 0003 	mov.w	r0, #3
   143aa:	df02      	svc	2
	if (crc_ok && isr_rx_scan_check(lll, irkmatch_ok, devmatch_ok,
   143ac:	f1b8 0f00 	cmp.w	r8, #0
   143b0:	d077      	beq.n	144a2 <isr_rx+0x15a>
		 (!devmatch_ok || ull_filter_lll_rl_idx_allowed(irkmatch_ok,
								rl_idx))) ||
		(((lll->filter_policy & 0x01) != 0) &&
		 (devmatch_ok || ull_filter_lll_irk_in_fal(rl_idx)));
#else
	return ((lll->filter_policy & 0x01) == 0U) ||
   143b2:	792a      	ldrb	r2, [r5, #4]
   143b4:	0713      	lsls	r3, r2, #28
   143b6:	d501      	bpl.n	143bc <isr_rx+0x74>
	if (crc_ok && isr_rx_scan_check(lll, irkmatch_ok, devmatch_ok,
   143b8:	2f00      	cmp	r7, #0
   143ba:	d072      	beq.n	144a2 <isr_rx+0x15a>

		return 0;
#endif /* CONFIG_BT_CENTRAL */

	/* Active scanner */
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   143bc:	7f23      	ldrb	r3, [r4, #28]
   143be:	f013 010f 	ands.w	r1, r3, #15
   143c2:	d002      	beq.n	143ca <isr_rx+0x82>
   143c4:	2906      	cmp	r1, #6
   143c6:	f040 80ad 	bne.w	14524 <isr_rx+0x1dc>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   143ca:	7f60      	ldrb	r0, [r4, #29]
   143cc:	2825      	cmp	r0, #37	; 0x25
   143ce:	d851      	bhi.n	14474 <isr_rx+0x12c>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind)) &&
		   lll->type &&
   143d0:	0690      	lsls	r0, r2, #26
   143d2:	d54f      	bpl.n	14474 <isr_rx+0x12c>
		bt_addr_t *lrpa;
#endif /* CONFIG_BT_CTLR_PRIVACY */
		int err;

		/* setup tIFS switching */
		radio_tmr_tifs_set(EVENT_IFS_US);
   143d4:	2096      	movs	r0, #150	; 0x96
   143d6:	f000 ff1d 	bl	15214 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   143da:	2000      	movs	r0, #0
   143dc:	f000 fe78 	bl	150d0 <radio_switch_complete_and_rx>

		/* save the adv packet */
		err = isr_rx_scan_report(lll, rssi_ready, phy_flags_rx,
   143e0:	2100      	movs	r1, #0
   143e2:	4630      	mov	r0, r6
   143e4:	f009 f9b0 	bl	1d748 <isr_rx_scan_report.constprop.0>
					 irkmatch_ok ? rl_idx : FILTER_IDX_NONE,
					 false);
		if (err) {
   143e8:	2800      	cmp	r0, #0
   143ea:	d15a      	bne.n	144a2 <isr_rx+0x15a>
			return err;
		}

		/* prepare the scan request packet */
		pdu_tx = (void *)radio_pkt_scratch_get();
   143ec:	f000 fdfe 	bl	14fec <radio_pkt_scratch_get>
			       BDADDR_SIZE);
		} else {
#else
		if (1) {
#endif /* CONFIG_BT_CTLR_PRIVACY */
			pdu_tx->tx_addr = lll->init_addr_type;
   143f0:	792b      	ldrb	r3, [r5, #4]
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
   143f2:	7f22      	ldrb	r2, [r4, #28]
			pdu_tx->tx_addr = lll->init_addr_type;
   143f4:	f3c3 1380 	ubfx	r3, r3, #6, #1
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   143f8:	019b      	lsls	r3, r3, #6
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
   143fa:	f3c2 1280 	ubfx	r2, r2, #6, #1
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   143fe:	f043 0303 	orr.w	r3, r3, #3
   14402:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   14406:	7802      	ldrb	r2, [r0, #0]
   14408:	f002 0230 	and.w	r2, r2, #48	; 0x30
   1440c:	4313      	orrs	r3, r2
   1440e:	7003      	strb	r3, [r0, #0]
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
   14410:	230c      	movs	r3, #12
   14412:	7043      	strb	r3, [r0, #1]
		pdu_tx = (void *)radio_pkt_scratch_get();
   14414:	4606      	mov	r6, r0
			memcpy(&pdu_tx->scan_req.scan_addr[0],
   14416:	2206      	movs	r2, #6
   14418:	1d69      	adds	r1, r5, #5
   1441a:	3002      	adds	r0, #2
   1441c:	f005 ff2f 	bl	1a27e <memcpy>
			       &lll->init_addr[0], BDADDR_SIZE);
		}
		memcpy(&pdu_tx->scan_req.adv_addr[0],
   14420:	2206      	movs	r2, #6
   14422:	f104 011e 	add.w	r1, r4, #30
   14426:	f106 0008 	add.w	r0, r6, #8
   1442a:	f005 ff28 	bl	1a27e <memcpy>
		       &pdu_adv_rx->adv_ind.addr[0], BDADDR_SIZE);

		radio_pkt_tx_set(pdu_tx);
   1442e:	4630      	mov	r0, r6
   14430:	f000 fd74 	bl	14f1c <radio_pkt_tx_set>

		/* assert if radio packet ptr is not set and radio started tx */
		LL_ASSERT(!radio_is_ready());
   14434:	f000 fda2 	bl	14f7c <radio_is_ready>
   14438:	b160      	cbz	r0, 14454 <isr_rx+0x10c>
   1443a:	4a3b      	ldr	r2, [pc, #236]	; (14528 <isr_rx+0x1e0>)
   1443c:	493d      	ldr	r1, [pc, #244]	; (14534 <isr_rx+0x1ec>)
   1443e:	483c      	ldr	r0, [pc, #240]	; (14530 <isr_rx+0x1e8>)
   14440:	f240 43d2 	movw	r3, #1234	; 0x4d2
   14444:	f004 fbbe 	bl	18bc4 <printk>
   14448:	4040      	eors	r0, r0
   1444a:	f380 8811 	msr	BASEPRI, r0
   1444e:	f04f 0003 	mov.w	r0, #3
   14452:	df02      	svc	2
			lll_prof_cputime_capture();

		}

		/* capture end of Tx-ed PDU, used to calculate HCTO. */
		radio_tmr_end_capture();
   14454:	f000 ffb8 	bl	153c8 <radio_tmr_end_capture>
					 radio_rx_chain_delay_get(0, 0) -
					 CONFIG_BT_CTLR_GPIO_PA_OFFSET);
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN */

		/* switch scanner state to active */
		lll->state = 1U;
   14458:	792b      	ldrb	r3, [r5, #4]
		if (pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) {
			lll->is_adv_ind = 1U;
		}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

		radio_isr_set(isr_tx, lll);
   1445a:	4837      	ldr	r0, [pc, #220]	; (14538 <isr_rx+0x1f0>)
		lll->state = 1U;
   1445c:	f043 0301 	orr.w	r3, r3, #1
   14460:	712b      	strb	r3, [r5, #4]
		radio_isr_set(isr_tx, lll);
   14462:	4629      	mov	r1, r5
}
   14464:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		radio_isr_set(isr_tx, lll);
   14468:	f000 bc9c 	b.w	14da4 <radio_isr_set>
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready =
   1446c:	46a0      	mov	r8, r4
   1446e:	4626      	mov	r6, r4
   14470:	4627      	mov	r7, r4
   14472:	e784      	b.n	1437e <isr_rx+0x36>

		return 0;
	}
	/* Passive scanner or scan responses */
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   14474:	f013 0f0d 	tst.w	r3, #13
   14478:	d001      	beq.n	1447e <isr_rx+0x136>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   1447a:	2906      	cmp	r1, #6
   1447c:	d10a      	bne.n	14494 <isr_rx+0x14c>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   1447e:	7f60      	ldrb	r0, [r4, #29]
   14480:	2825      	cmp	r0, #37	; 0x25
   14482:	d807      	bhi.n	14494 <isr_rx+0x14c>
	bool dir_report = false;
   14484:	2700      	movs	r7, #0
						       pdu_adv_rx, rl_idx)) ||
#endif /* CONFIG_BT_CTLR_ADV_EXT */
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
		   (lll->state != 0U) &&
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
   14486:	7f63      	ldrb	r3, [r4, #29]
   14488:	b15b      	cbz	r3, 144a2 <isr_rx+0x15a>
		   1) {
#endif /* !CONFIG_BT_CENTRAL */
		uint32_t err;

		/* save the scan response packet */
		err = isr_rx_scan_report(lll, rssi_ready, phy_flags_rx,
   1448a:	4639      	mov	r1, r7
   1448c:	4630      	mov	r0, r6
   1448e:	f009 f95b 	bl	1d748 <isr_rx_scan_report.constprop.0>
					 irkmatch_ok ? rl_idx :
						       FILTER_IDX_NONE,
					 dir_report);
		if (err) {
   14492:	e006      	b.n	144a2 <isr_rx+0x15a>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
   14494:	2901      	cmp	r1, #1
   14496:	d00c      	beq.n	144b2 <isr_rx+0x16a>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   14498:	7f23      	ldrb	r3, [r4, #28]
					rl_idx, &dir_report))) ||
   1449a:	f003 030f 	and.w	r3, r3, #15
   1449e:	2b04      	cmp	r3, #4
   144a0:	d028      	beq.n	144f4 <isr_rx+0x1ac>
	radio_isr_set(isr_done, lll);
   144a2:	4629      	mov	r1, r5
   144a4:	4825      	ldr	r0, [pc, #148]	; (1453c <isr_rx+0x1f4>)
   144a6:	f000 fc7d 	bl	14da4 <radio_isr_set>
}
   144aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	radio_disable();
   144ae:	f000 bd47 	b.w	14f40 <radio_disable>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
   144b2:	7f61      	ldrb	r1, [r4, #29]
   144b4:	290c      	cmp	r1, #12
   144b6:	d1f4      	bne.n	144a2 <isr_rx+0x15a>
		return false;
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	return (((lll->init_addr_type == addr_type) &&
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   144b8:	f3c2 1280 	ubfx	r2, r2, #6, #1
   144bc:	ebb2 1fd3 	cmp.w	r2, r3, lsr #7
		    isr_scan_tgta_check(lll, false, pdu_adv_rx->rx_addr,
   144c0:	ea4f 17d3 	mov.w	r7, r3, lsr #7
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   144c4:	d00d      	beq.n	144e2 <isr_rx+0x19a>

static inline bool isr_scan_tgta_rpa_check(struct lll_scan *lll,
					   uint8_t addr_type, uint8_t *addr,
					   bool *dir_report)
{
	if (((lll->filter_policy & 0x02) != 0U) && (addr_type != 0) &&
   144c6:	792b      	ldrb	r3, [r5, #4]
   144c8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
   144cc:	079a      	lsls	r2, r3, #30
   144ce:	d5e3      	bpl.n	14498 <isr_rx+0x150>
   144d0:	2f00      	cmp	r7, #0
   144d2:	d0e1      	beq.n	14498 <isr_rx+0x150>
   144d4:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   144d8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   144dc:	2b40      	cmp	r3, #64	; 0x40
   144de:	d1db      	bne.n	14498 <isr_rx+0x150>
   144e0:	e7d1      	b.n	14486 <isr_rx+0x13e>
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   144e2:	2206      	movs	r2, #6
   144e4:	f104 0124 	add.w	r1, r4, #36	; 0x24
   144e8:	1d68      	adds	r0, r5, #5
   144ea:	f005 feb7 	bl	1a25c <memcmp>
	return (((lll->init_addr_type == addr_type) &&
   144ee:	2800      	cmp	r0, #0
   144f0:	d0c8      	beq.n	14484 <isr_rx+0x13c>
   144f2:	e7e8      	b.n	144c6 <isr_rx+0x17e>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   144f4:	7f63      	ldrb	r3, [r4, #29]
   144f6:	2b25      	cmp	r3, #37	; 0x25
   144f8:	d8d3      	bhi.n	144a2 <isr_rx+0x15a>
		   (lll->state != 0U) &&
   144fa:	792b      	ldrb	r3, [r5, #4]
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
   144fc:	07db      	lsls	r3, r3, #31
   144fe:	d5d0      	bpl.n	144a2 <isr_rx+0x15a>
	return false;
}

static inline bool isr_scan_rsp_adva_matches(struct pdu_adv *srsp)
{
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
   14500:	f000 fd74 	bl	14fec <radio_pkt_scratch_get>

	return ((sreq->rx_addr == srsp->tx_addr) &&
   14504:	7f23      	ldrb	r3, [r4, #28]
   14506:	7802      	ldrb	r2, [r0, #0]
   14508:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1450c:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   14510:	d1c7      	bne.n	144a2 <isr_rx+0x15a>
		(memcmp(&sreq->scan_req.adv_addr[0],
   14512:	2206      	movs	r2, #6
   14514:	f104 011e 	add.w	r1, r4, #30
   14518:	3008      	adds	r0, #8
   1451a:	f005 fe9f 	bl	1a25c <memcmp>
		   (lll->state != 0U) &&
   1451e:	2800      	cmp	r0, #0
   14520:	d0b0      	beq.n	14484 <isr_rx+0x13c>
   14522:	e7be      	b.n	144a2 <isr_rx+0x15a>
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   14524:	2902      	cmp	r1, #2
   14526:	e7a9      	b.n	1447c <isr_rx+0x134>
   14528:	0002311d 	.word	0x0002311d
   1452c:	000230d6 	.word	0x000230d6
   14530:	00020429 	.word	0x00020429
   14534:	000230de 	.word	0x000230de
   14538:	000141cd 	.word	0x000141cd
   1453c:	0001d6d1 	.word	0x0001d6d1

00014540 <lll_scan_prepare>:
{
   14540:	b513      	push	{r0, r1, r4, lr}
   14542:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   14544:	f7ff f94a 	bl	137dc <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   14548:	2800      	cmp	r0, #0
   1454a:	da0b      	bge.n	14564 <lll_scan_prepare+0x24>
   1454c:	4a11      	ldr	r2, [pc, #68]	; (14594 <lll_scan_prepare+0x54>)
   1454e:	4912      	ldr	r1, [pc, #72]	; (14598 <lll_scan_prepare+0x58>)
   14550:	4812      	ldr	r0, [pc, #72]	; (1459c <lll_scan_prepare+0x5c>)
   14552:	237a      	movs	r3, #122	; 0x7a
   14554:	f004 fb36 	bl	18bc4 <printk>
   14558:	4040      	eors	r0, r0
   1455a:	f380 8811 	msr	BASEPRI, r0
   1455e:	f04f 0003 	mov.w	r0, #3
   14562:	df02      	svc	2
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   14564:	4a0e      	ldr	r2, [pc, #56]	; (145a0 <lll_scan_prepare+0x60>)
   14566:	490f      	ldr	r1, [pc, #60]	; (145a4 <lll_scan_prepare+0x64>)
   14568:	480f      	ldr	r0, [pc, #60]	; (145a8 <lll_scan_prepare+0x68>)
   1456a:	9400      	str	r4, [sp, #0]
   1456c:	2300      	movs	r3, #0
   1456e:	f008 fca5 	bl	1cebc <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   14572:	b168      	cbz	r0, 14590 <lll_scan_prepare+0x50>
   14574:	3077      	adds	r0, #119	; 0x77
   14576:	d00b      	beq.n	14590 <lll_scan_prepare+0x50>
   14578:	4a06      	ldr	r2, [pc, #24]	; (14594 <lll_scan_prepare+0x54>)
   1457a:	490c      	ldr	r1, [pc, #48]	; (145ac <lll_scan_prepare+0x6c>)
   1457c:	4807      	ldr	r0, [pc, #28]	; (1459c <lll_scan_prepare+0x5c>)
   1457e:	237d      	movs	r3, #125	; 0x7d
   14580:	f004 fb20 	bl	18bc4 <printk>
   14584:	4040      	eors	r0, r0
   14586:	f380 8811 	msr	BASEPRI, r0
   1458a:	f04f 0003 	mov.w	r0, #3
   1458e:	df02      	svc	2
}
   14590:	b002      	add	sp, #8
   14592:	bd10      	pop	{r4, pc}
   14594:	0002311d 	.word	0x0002311d
   14598:	0002303c 	.word	0x0002303c
   1459c:	00020429 	.word	0x00020429
   145a0:	0001d68f 	.word	0x0001d68f
   145a4:	000142f9 	.word	0x000142f9
   145a8:	00014299 	.word	0x00014299
   145ac:	000230f9 	.word	0x000230f9

000145b0 <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   145b0:	b570      	push	{r4, r5, r6, lr}
   145b2:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   145b4:	f008 ff93 	bl	1d4de <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   145b8:	f7fc fccc 	bl	10f54 <ull_event_done_extra_get>
	LL_ASSERT(e);
   145bc:	4604      	mov	r4, r0
   145be:	b960      	cbnz	r0, 145da <isr_done+0x2a>
   145c0:	4a17      	ldr	r2, [pc, #92]	; (14620 <isr_done+0x70>)
   145c2:	4918      	ldr	r1, [pc, #96]	; (14624 <isr_done+0x74>)
   145c4:	4818      	ldr	r0, [pc, #96]	; (14628 <isr_done+0x78>)
   145c6:	f240 237b 	movw	r3, #635	; 0x27b
   145ca:	f004 fafb 	bl	18bc4 <printk>
   145ce:	4040      	eors	r0, r0
   145d0:	f380 8811 	msr	BASEPRI, r0
   145d4:	f04f 0003 	mov.w	r0, #3
   145d8:	df02      	svc	2

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   145da:	2301      	movs	r3, #1
	e->trx_cnt = trx_cnt;
	e->crc_valid = crc_valid;
   145dc:	4913      	ldr	r1, [pc, #76]	; (1462c <isr_done+0x7c>)
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   145de:	7023      	strb	r3, [r4, #0]
	e->trx_cnt = trx_cnt;
   145e0:	4b13      	ldr	r3, [pc, #76]	; (14630 <isr_done+0x80>)
	e->crc_valid = crc_valid;
   145e2:	79a2      	ldrb	r2, [r4, #6]
   145e4:	7809      	ldrb	r1, [r1, #0]
	e->trx_cnt = trx_cnt;
   145e6:	881b      	ldrh	r3, [r3, #0]
   145e8:	80a3      	strh	r3, [r4, #4]
	e->crc_valid = crc_valid;
   145ea:	f361 0200 	bfi	r2, r1, #0, #1
   145ee:	71a2      	strb	r2, [r4, #6]
#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   145f0:	b18b      	cbz	r3, 14616 <isr_done+0x66>
		struct lll_conn *lll = param;

		if (lll->role) {
   145f2:	f995 301d 	ldrsb.w	r3, [r5, #29]
   145f6:	2b00      	cmp	r3, #0
   145f8:	da0d      	bge.n	14616 <isr_done+0x66>
			preamble_to_addr_us =
				addr_us_get(0);
#endif /* !CONFIG_BT_CTLR_PHY */

			e->drift.start_to_address_actual_us =
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   145fa:	f000 fed9 	bl	153b0 <radio_tmr_aa_restore>
   145fe:	4606      	mov	r6, r0
   14600:	f000 fedc 	bl	153bc <radio_tmr_ready_get>
			e->drift.window_widening_event_us =
   14604:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   14606:	60e3      	str	r3, [r4, #12]
				lll->periph.window_widening_event_us;
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   14608:	2328      	movs	r3, #40	; 0x28
   1460a:	6123      	str	r3, [r4, #16]
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   1460c:	1a36      	subs	r6, r6, r0

			/* Reset window widening, as anchor point sync-ed */
			lll->periph.window_widening_event_us = 0;
   1460e:	2300      	movs	r3, #0
			e->drift.start_to_address_actual_us =
   14610:	60a6      	str	r6, [r4, #8]
			lll->periph.window_widening_event_us = 0;
   14612:	632b      	str	r3, [r5, #48]	; 0x30
			lll->periph.window_size_event_us = 0;
   14614:	63ab      	str	r3, [r5, #56]	; 0x38
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   14616:	4628      	mov	r0, r5
}
   14618:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	lll_isr_cleanup(param);
   1461c:	f7fe bf92 	b.w	13544 <lll_isr_cleanup>
   14620:	00023179 	.word	0x00023179
   14624:	000221ac 	.word	0x000221ac
   14628:	00020429 	.word	0x00020429
   1462c:	2000300e 	.word	0x2000300e
   14630:	20002e6a 	.word	0x20002e6a

00014634 <lll_conn_prepare_reset>:
	trx_cnt = 0U;
   14634:	4a03      	ldr	r2, [pc, #12]	; (14644 <lll_conn_prepare_reset+0x10>)
   14636:	2300      	movs	r3, #0
   14638:	8013      	strh	r3, [r2, #0]
	crc_valid = 0U;
   1463a:	4a03      	ldr	r2, [pc, #12]	; (14648 <lll_conn_prepare_reset+0x14>)
   1463c:	7013      	strb	r3, [r2, #0]
	crc_expire = 0U;
   1463e:	4a03      	ldr	r2, [pc, #12]	; (1464c <lll_conn_prepare_reset+0x18>)
   14640:	7013      	strb	r3, [r2, #0]
}
   14642:	4770      	bx	lr
   14644:	20002e6a 	.word	0x20002e6a
   14648:	2000300e 	.word	0x2000300e
   1464c:	2000300d 	.word	0x2000300d

00014650 <lll_conn_abort_cb>:
{
   14650:	b538      	push	{r3, r4, r5, lr}
   14652:	460d      	mov	r5, r1
	if (!prepare_param) {
   14654:	4604      	mov	r4, r0
   14656:	b930      	cbnz	r0, 14666 <lll_conn_abort_cb+0x16>
		radio_isr_set(isr_done, param);
   14658:	4810      	ldr	r0, [pc, #64]	; (1469c <lll_conn_abort_cb+0x4c>)
   1465a:	f000 fba3 	bl	14da4 <radio_isr_set>
}
   1465e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_disable();
   14662:	f000 bc6d 	b.w	14f40 <radio_disable>
	err = lll_hfclock_off();
   14666:	f7ff f8cf 	bl	13808 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1466a:	2800      	cmp	r0, #0
   1466c:	da0b      	bge.n	14686 <lll_conn_abort_cb+0x36>
   1466e:	4a0c      	ldr	r2, [pc, #48]	; (146a0 <lll_conn_abort_cb+0x50>)
   14670:	490c      	ldr	r1, [pc, #48]	; (146a4 <lll_conn_abort_cb+0x54>)
   14672:	480d      	ldr	r0, [pc, #52]	; (146a8 <lll_conn_abort_cb+0x58>)
   14674:	239f      	movs	r3, #159	; 0x9f
   14676:	f004 faa5 	bl	18bc4 <printk>
   1467a:	4040      	eors	r0, r0
   1467c:	f380 8811 	msr	BASEPRI, r0
   14680:	f04f 0003 	mov.w	r0, #3
   14684:	df02      	svc	2
	lll = prepare_param->param;
   14686:	68e2      	ldr	r2, [r4, #12]
	lll->latency_prepare += (prepare_param->lazy + 1);
   14688:	8921      	ldrh	r1, [r4, #8]
   1468a:	8a53      	ldrh	r3, [r2, #18]
   1468c:	440b      	add	r3, r1
   1468e:	3301      	adds	r3, #1
   14690:	8253      	strh	r3, [r2, #18]
	lll_done(param);
   14692:	4628      	mov	r0, r5
}
   14694:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_done(param);
   14698:	f7fe becc 	b.w	13434 <lll_done>
   1469c:	000145b1 	.word	0x000145b1
   146a0:	00023179 	.word	0x00023179
   146a4:	0002303c 	.word	0x0002303c
   146a8:	00020429 	.word	0x00020429

000146ac <lll_conn_rx_pkt_set>:
{
   146ac:	b510      	push	{r4, lr}
	node_rx = ull_pdu_rx_alloc_peek(1);
   146ae:	2001      	movs	r0, #1
   146b0:	f7fc fb5a 	bl	10d68 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   146b4:	4604      	mov	r4, r0
   146b6:	b960      	cbnz	r0, 146d2 <lll_conn_rx_pkt_set+0x26>
   146b8:	4a0d      	ldr	r2, [pc, #52]	; (146f0 <lll_conn_rx_pkt_set+0x44>)
   146ba:	490e      	ldr	r1, [pc, #56]	; (146f4 <lll_conn_rx_pkt_set+0x48>)
   146bc:	480e      	ldr	r0, [pc, #56]	; (146f8 <lll_conn_rx_pkt_set+0x4c>)
   146be:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   146c2:	f004 fa7f 	bl	18bc4 <printk>
   146c6:	4040      	eors	r0, r0
   146c8:	f380 8811 	msr	BASEPRI, r0
   146cc:	f04f 0003 	mov.w	r0, #3
   146d0:	df02      	svc	2
	radio_phy_set(phy, 0);
   146d2:	2100      	movs	r1, #0
   146d4:	4608      	mov	r0, r1
   146d6:	f000 fba9 	bl	14e2c <radio_phy_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   146da:	2008      	movs	r0, #8
   146dc:	2201      	movs	r2, #1
   146de:	211b      	movs	r1, #27
   146e0:	f000 fbea 	bl	14eb8 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   146e4:	f104 001c 	add.w	r0, r4, #28
}
   146e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_pkt_rx_set(node_rx->pdu);
   146ec:	f000 bc10 	b.w	14f10 <radio_pkt_rx_set>
   146f0:	00023179 	.word	0x00023179
   146f4:	000230d6 	.word	0x000230d6
   146f8:	00020429 	.word	0x00020429

000146fc <lll_conn_isr_tx>:
{
   146fc:	b570      	push	{r4, r5, r6, lr}
   146fe:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   14700:	f008 fedd 	bl	1d4be <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   14704:	2096      	movs	r0, #150	; 0x96
   14706:	f000 fd85 	bl	15214 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1470a:	2300      	movs	r3, #0
   1470c:	4618      	mov	r0, r3
   1470e:	461a      	mov	r2, r3
   14710:	4619      	mov	r1, r3
   14712:	f000 fcef 	bl	150f4 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   14716:	4628      	mov	r0, r5
   14718:	f7ff ffc8 	bl	146ac <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1471c:	f000 fc2e 	bl	14f7c <radio_is_ready>
   14720:	b160      	cbz	r0, 1473c <lll_conn_isr_tx+0x40>
   14722:	4a12      	ldr	r2, [pc, #72]	; (1476c <lll_conn_isr_tx+0x70>)
   14724:	4912      	ldr	r1, [pc, #72]	; (14770 <lll_conn_isr_tx+0x74>)
   14726:	4813      	ldr	r0, [pc, #76]	; (14774 <lll_conn_isr_tx+0x78>)
   14728:	f44f 73d6 	mov.w	r3, #428	; 0x1ac
   1472c:	f004 fa4a 	bl	18bc4 <printk>
   14730:	4040      	eors	r0, r0
   14732:	f380 8811 	msr	BASEPRI, r0
   14736:	f04f 0003 	mov.w	r0, #3
   1473a:	df02      	svc	2
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 +
   1473c:	f000 fe52 	bl	153e4 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   14740:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 +
   14742:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   14744:	4608      	mov	r0, r1
   14746:	f009 f91f 	bl	1d988 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   1474a:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   1474c:	4606      	mov	r6, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   1474e:	4608      	mov	r0, r1
   14750:	f009 f916 	bl	1d980 <radio_tx_chain_delay_get>
   14754:	4434      	add	r4, r6
   14756:	34cb      	adds	r4, #203	; 0xcb
	radio_tmr_hcto_configure(hcto);
   14758:	1a20      	subs	r0, r4, r0
   1475a:	f000 fdfd 	bl	15358 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   1475e:	4629      	mov	r1, r5
   14760:	4805      	ldr	r0, [pc, #20]	; (14778 <lll_conn_isr_tx+0x7c>)
}
   14762:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   14766:	f000 bb1d 	b.w	14da4 <radio_isr_set>
   1476a:	bf00      	nop
   1476c:	00023179 	.word	0x00023179
   14770:	000230de 	.word	0x000230de
   14774:	00020429 	.word	0x00020429
   14778:	0001477d 	.word	0x0001477d

0001477c <lll_conn_isr_rx>:
{
   1477c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   14780:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   14782:	f000 fc05 	bl	14f90 <radio_is_done>
	if (trx_done) {
   14786:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
   1478a:	d010      	beq.n	147ae <lll_conn_isr_rx+0x32>
		crc_ok = radio_crc_is_valid();
   1478c:	f000 fc20 	bl	14fd0 <radio_crc_is_valid>
   14790:	b2c7      	uxtb	r7, r0
		rssi_ready = radio_rssi_is_ready();
   14792:	f000 fce7 	bl	15164 <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   14796:	f008 fe99 	bl	1d4cc <lll_isr_rx_status_reset>
	if (!trx_done) {
   1479a:	b955      	cbnz	r5, 147b2 <lll_conn_isr_rx+0x36>
		radio_isr_set(isr_done, param);
   1479c:	489e      	ldr	r0, [pc, #632]	; (14a18 <lll_conn_isr_rx+0x29c>)
   1479e:	4621      	mov	r1, r4
   147a0:	f000 fb00 	bl	14da4 <radio_isr_set>
}
   147a4:	b002      	add	sp, #8
   147a6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		radio_disable();
   147aa:	f000 bbc9 	b.w	14f40 <radio_disable>
		crc_ok = rssi_ready = 0U;
   147ae:	462f      	mov	r7, r5
   147b0:	e7f1      	b.n	14796 <lll_conn_isr_rx+0x1a>
	trx_cnt++;
   147b2:	4a9a      	ldr	r2, [pc, #616]	; (14a1c <lll_conn_isr_rx+0x2a0>)
   147b4:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   147b6:	2001      	movs	r0, #1
	trx_cnt++;
   147b8:	3301      	adds	r3, #1
   147ba:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   147bc:	f7fc fad4 	bl	10d68 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   147c0:	4606      	mov	r6, r0
   147c2:	b958      	cbnz	r0, 147dc <lll_conn_isr_rx+0x60>
   147c4:	4a96      	ldr	r2, [pc, #600]	; (14a20 <lll_conn_isr_rx+0x2a4>)
   147c6:	4997      	ldr	r1, [pc, #604]	; (14a24 <lll_conn_isr_rx+0x2a8>)
   147c8:	4897      	ldr	r0, [pc, #604]	; (14a28 <lll_conn_isr_rx+0x2ac>)
   147ca:	23d8      	movs	r3, #216	; 0xd8
   147cc:	f004 f9fa 	bl	18bc4 <printk>
   147d0:	4040      	eors	r0, r0
   147d2:	f380 8811 	msr	BASEPRI, r0
   147d6:	f04f 0003 	mov.w	r0, #3
   147da:	df02      	svc	2
	if (crc_ok) {
   147dc:	f8df 824c 	ldr.w	r8, [pc, #588]	; 14a2c <lll_conn_isr_rx+0x2b0>
   147e0:	2f00      	cmp	r7, #0
   147e2:	f000 80fa 	beq.w	149da <lll_conn_isr_rx+0x25e>
#elif !defined(HAL_RADIO_PDU_LEN_MAX)
#error "Undefined HAL_RADIO_PDU_LEN_MAX."
#endif

	/* Ack for tx-ed data */
	if (pdu_data_rx->nesn != lll->sn) {
   147e6:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
   147ea:	7f31      	ldrb	r1, [r6, #28]
   147ec:	f003 0201 	and.w	r2, r3, #1
   147f0:	f3c1 0180 	ubfx	r1, r1, #2, #1
   147f4:	4291      	cmp	r1, r2
   147f6:	f000 80ab 	beq.w	14950 <lll_conn_isr_rx+0x1d4>
		struct pdu_data *pdu_data_tx;
		struct node_tx *tx;
		memq_link_t *link;

		/* Increment sequence number */
		lll->sn++;
   147fa:	f082 0201 	eor.w	r2, r2, #1
   147fe:	f362 0300 	bfi	r3, r2, #0, #1
   14802:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52

#if defined(CONFIG_BT_PERIPHERAL)
		/* First ack (and redundantly any other ack) enable use of
		 * peripheral latency.
		 */
		if (lll->role) {
   14806:	f994 301d 	ldrsb.w	r3, [r4, #29]
   1480a:	2b00      	cmp	r3, #0
			lll->periph.latency_enabled = 1;
   1480c:	bfbe      	ittt	lt
   1480e:	f894 3020 	ldrblt.w	r3, [r4, #32]
   14812:	f043 0304 	orrlt.w	r3, r3, #4
   14816:	f884 3020 	strblt.w	r3, [r4, #32]
		}
#endif /* CONFIG_BT_PERIPHERAL */

		FORCE_MD_CNT_DEC();

		if (!lll->empty) {
   1481a:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
   1481e:	f013 0504 	ands.w	r5, r3, #4
   14822:	f040 808f 	bne.w	14944 <lll_conn_isr_rx+0x1c8>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   14826:	e9d4 010f 	ldrd	r0, r1, [r4, #60]	; 0x3c
   1482a:	aa01      	add	r2, sp, #4
   1482c:	f007 fffd 	bl	1c82a <memq_peek>
			}

			link = NULL;
		}

		if (link) {
   14830:	4681      	mov	r9, r0
   14832:	2800      	cmp	r0, #0
   14834:	f040 808f 	bne.w	14956 <lll_conn_isr_rx+0x1da>
			}
		}
	}

	/* process received data */
	if ((pdu_data_rx->sn == lll->nesn) &&
   14838:	7f32      	ldrb	r2, [r6, #28]
   1483a:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
   1483e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   14842:	f3c3 0340 	ubfx	r3, r3, #1, #1
   14846:	429a      	cmp	r2, r3
   14848:	f000 80b3 	beq.w	149b2 <lll_conn_isr_rx+0x236>
	is_rx_enqueue = 0U;
   1484c:	f04f 0a00 	mov.w	sl, #0
		crc_valid = 1U;
   14850:	4b77      	ldr	r3, [pc, #476]	; (14a30 <lll_conn_isr_rx+0x2b4>)
		crc_expire = 0U;
   14852:	2500      	movs	r5, #0
		crc_valid = 1U;
   14854:	2201      	movs	r2, #1
		crc_expire = 0U;
   14856:	f888 5000 	strb.w	r5, [r8]
		crc_valid = 1U;
   1485a:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1485c:	a901      	add	r1, sp, #4
   1485e:	4620      	mov	r0, r4
   14860:	f008 ffdb 	bl	1d81a <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   14864:	2d00      	cmp	r5, #0
   14866:	f040 80cb 	bne.w	14a00 <lll_conn_isr_rx+0x284>
   1486a:	b157      	cbz	r7, 14882 <lll_conn_isr_rx+0x106>
   1486c:	7f33      	ldrb	r3, [r6, #28]
   1486e:	06d9      	lsls	r1, r3, #27
   14870:	d407      	bmi.n	14882 <lll_conn_isr_rx+0x106>
			      (pdu_data_tx->md == 0) &&
   14872:	9b01      	ldr	r3, [sp, #4]
   14874:	781a      	ldrb	r2, [r3, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   14876:	06d2      	lsls	r2, r2, #27
   14878:	d403      	bmi.n	14882 <lll_conn_isr_rx+0x106>
			      (pdu_data_tx->md == 0) &&
   1487a:	785b      	ldrb	r3, [r3, #1]
   1487c:	2b00      	cmp	r3, #0
   1487e:	f000 80bf 	beq.w	14a00 <lll_conn_isr_rx+0x284>
		radio_tmr_tifs_set(EVENT_IFS_US);
   14882:	2096      	movs	r0, #150	; 0x96
   14884:	f000 fcc6 	bl	15214 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   14888:	2000      	movs	r0, #0
   1488a:	f000 fc21 	bl	150d0 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   1488e:	4869      	ldr	r0, [pc, #420]	; (14a34 <lll_conn_isr_rx+0x2b8>)
   14890:	4621      	mov	r1, r4
   14892:	f000 fa87 	bl	14da4 <radio_isr_set>
		radio_tmr_end_capture();
   14896:	f000 fd97 	bl	153c8 <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   1489a:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
   1489e:	9901      	ldr	r1, [sp, #4]
   148a0:	f3c3 0200 	ubfx	r2, r3, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   148a4:	f3c3 0340 	ubfx	r3, r3, #1, #1
   148a8:	009b      	lsls	r3, r3, #2
   148aa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   148ae:	780a      	ldrb	r2, [r1, #0]
   148b0:	f022 020c 	bic.w	r2, r2, #12
   148b4:	4313      	orrs	r3, r2
   148b6:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   148b8:	4620      	mov	r0, r4
   148ba:	f008 ff9e 	bl	1d7fa <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   148be:	f000 fb5d 	bl	14f7c <radio_is_ready>
   148c2:	b160      	cbz	r0, 148de <lll_conn_isr_rx+0x162>
   148c4:	4a56      	ldr	r2, [pc, #344]	; (14a20 <lll_conn_isr_rx+0x2a4>)
   148c6:	495c      	ldr	r1, [pc, #368]	; (14a38 <lll_conn_isr_rx+0x2bc>)
   148c8:	4857      	ldr	r0, [pc, #348]	; (14a28 <lll_conn_isr_rx+0x2ac>)
   148ca:	f44f 73a2 	mov.w	r3, #324	; 0x144
   148ce:	f004 f979 	bl	18bc4 <printk>
   148d2:	4040      	eors	r0, r0
   148d4:	f380 8811 	msr	BASEPRI, r0
   148d8:	f04f 0003 	mov.w	r0, #3
   148dc:	df02      	svc	2
	if (!radio_tmr_aa_restore()) {
   148de:	f000 fd67 	bl	153b0 <radio_tmr_aa_restore>
   148e2:	b918      	cbnz	r0, 148ec <lll_conn_isr_rx+0x170>
		radio_tmr_aa_save(radio_tmr_aa_get());
   148e4:	f000 fd58 	bl	15398 <radio_tmr_aa_get>
   148e8:	f000 fd5c 	bl	153a4 <radio_tmr_aa_save>
	if (tx_release) {
   148ec:	f1b9 0f00 	cmp.w	r9, #0
   148f0:	f000 808d 	beq.w	14a0e <lll_conn_isr_rx+0x292>
		LL_ASSERT(lll->handle != 0xFFFF);
   148f4:	89a2      	ldrh	r2, [r4, #12]
   148f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   148fa:	429a      	cmp	r2, r3
   148fc:	d10c      	bne.n	14918 <lll_conn_isr_rx+0x19c>
   148fe:	4a48      	ldr	r2, [pc, #288]	; (14a20 <lll_conn_isr_rx+0x2a4>)
   14900:	494e      	ldr	r1, [pc, #312]	; (14a3c <lll_conn_isr_rx+0x2c0>)
   14902:	4849      	ldr	r0, [pc, #292]	; (14a28 <lll_conn_isr_rx+0x2ac>)
   14904:	f240 1353 	movw	r3, #339	; 0x153
   14908:	f004 f95c 	bl	18bc4 <printk>
   1490c:	4040      	eors	r0, r0
   1490e:	f380 8811 	msr	BASEPRI, r0
   14912:	f04f 0003 	mov.w	r0, #3
   14916:	df02      	svc	2
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   14918:	89a0      	ldrh	r0, [r4, #12]
   1491a:	4649      	mov	r1, r9
   1491c:	f7fe f8c8 	bl	12ab0 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   14920:	f1ba 0f00 	cmp.w	sl, #0
   14924:	d009      	beq.n	1493a <lll_conn_isr_rx+0x1be>
		ull_pdu_rx_alloc();
   14926:	f7fc fa37 	bl	10d98 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1492a:	2303      	movs	r3, #3
   1492c:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   1492e:	89a3      	ldrh	r3, [r4, #12]
		ull_rx_put(node_rx->hdr.link, node_rx);
   14930:	6830      	ldr	r0, [r6, #0]
		node_rx->hdr.handle = lll->handle;
   14932:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   14934:	4631      	mov	r1, r6
   14936:	f7fc fa45 	bl	10dc4 <ull_rx_put>
		ull_rx_sched();
   1493a:	f7fc fa53 	bl	10de4 <ull_rx_sched>
}
   1493e:	b002      	add	sp, #8
   14940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			lll->empty = 0;
   14944:	f36f 0382 	bfc	r3, #2, #1
   14948:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
			pdu_data_tx = (void *)radio_pkt_empty_get();
   1494c:	f000 fb4a 	bl	14fe4 <radio_pkt_empty_get>
	tx_release = NULL;
   14950:	f04f 0900 	mov.w	r9, #0
   14954:	e770      	b.n	14838 <lll_conn_isr_rx+0xbc>
					       lll->packet_tx_head_offset);
   14956:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
			pdu_data_tx_len = pdu_data_tx->len;
   1495a:	9a01      	ldr	r2, [sp, #4]
   1495c:	441a      	add	r2, r3
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   1495e:	7952      	ldrb	r2, [r2, #5]
   14960:	4413      	add	r3, r2
			if (offset < lll->packet_tx_head_len) {
   14962:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   14966:	b2db      	uxtb	r3, r3
			if (offset < lll->packet_tx_head_len) {
   14968:	4293      	cmp	r3, r2
   1496a:	d202      	bcs.n	14972 <lll_conn_isr_rx+0x1f6>
				lll->packet_tx_head_offset = offset;
   1496c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
   14970:	e7ee      	b.n	14950 <lll_conn_isr_rx+0x1d4>
			} else if (offset == lll->packet_tx_head_len) {
   14972:	d110      	bne.n	14996 <lll_conn_isr_rx+0x21a>
				memq_dequeue(lll->memq_tx.tail,
   14974:	462a      	mov	r2, r5
   14976:	6c20      	ldr	r0, [r4, #64]	; 0x40
				lll->packet_tx_head_len = 0;
   14978:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
				memq_dequeue(lll->memq_tx.tail,
   1497c:	f104 013c 	add.w	r1, r4, #60	; 0x3c
   14980:	f007 ff5b 	bl	1c83a <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   14984:	9b01      	ldr	r3, [sp, #4]
   14986:	681a      	ldr	r2, [r3, #0]
   14988:	f8c9 2000 	str.w	r2, [r9]
				tx->next = link;
   1498c:	f8c3 9000 	str.w	r9, [r3]
				*tx_release = tx;
   14990:	f8dd 9004 	ldr.w	r9, [sp, #4]
				FORCE_MD_CNT_SET();
   14994:	e750      	b.n	14838 <lll_conn_isr_rx+0xbc>
				LL_ASSERT(0);
   14996:	4a22      	ldr	r2, [pc, #136]	; (14a20 <lll_conn_isr_rx+0x2a4>)
   14998:	4929      	ldr	r1, [pc, #164]	; (14a40 <lll_conn_isr_rx+0x2c4>)
   1499a:	4823      	ldr	r0, [pc, #140]	; (14a28 <lll_conn_isr_rx+0x2ac>)
   1499c:	f240 3307 	movw	r3, #775	; 0x307
   149a0:	f004 f910 	bl	18bc4 <printk>
   149a4:	4040      	eors	r0, r0
   149a6:	f380 8811 	msr	BASEPRI, r0
   149aa:	f04f 0003 	mov.w	r0, #3
   149ae:	df02      	svc	2
   149b0:	e7ce      	b.n	14950 <lll_conn_isr_rx+0x1d4>
	    /* check so that we will NEVER use the rx buffer reserved for empty
	     * packet and internal control enqueue
	     */
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   149b2:	2003      	movs	r0, #3
   149b4:	f7fc f9d8 	bl	10d68 <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   149b8:	2800      	cmp	r0, #0
   149ba:	f43f af47 	beq.w	1484c <lll_conn_isr_rx+0xd0>
		/* Increment next expected serial number */
		lll->nesn++;
   149be:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
   149c2:	f083 0302 	eor.w	r3, r3, #2
   149c6:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52

		if (pdu_data_rx->len != 0) {
   149ca:	f896 a01d 	ldrb.w	sl, [r6, #29]
	is_rx_enqueue = 0U;
   149ce:	f1ba 0a00 	subs.w	sl, sl, #0
   149d2:	bf18      	it	ne
   149d4:	f04f 0a01 	movne.w	sl, #1
   149d8:	e73a      	b.n	14850 <lll_conn_isr_rx+0xd4>
		if (crc_expire == 0U) {
   149da:	f898 3000 	ldrb.w	r3, [r8]
   149de:	b913      	cbnz	r3, 149e6 <lll_conn_isr_rx+0x26a>
			crc_expire = 2U;
   149e0:	2302      	movs	r3, #2
   149e2:	f888 3000 	strb.w	r3, [r8]
		crc_expire--;
   149e6:	f898 5000 	ldrb.w	r5, [r8]
   149ea:	3d01      	subs	r5, #1
   149ec:	b2ed      	uxtb	r5, r5
   149ee:	f888 5000 	strb.w	r5, [r8]
	is_rx_enqueue = 0U;
   149f2:	f04f 0a00 	mov.w	sl, #0
		is_done = (crc_expire == 0U);
   149f6:	fab5 f585 	clz	r5, r5
   149fa:	096d      	lsrs	r5, r5, #5
	tx_release = NULL;
   149fc:	46d1      	mov	r9, sl
   149fe:	e72d      	b.n	1485c <lll_conn_isr_rx+0xe0>
		radio_isr_set(isr_done, param);
   14a00:	4805      	ldr	r0, [pc, #20]	; (14a18 <lll_conn_isr_rx+0x29c>)
   14a02:	4621      	mov	r1, r4
   14a04:	f000 f9ce 	bl	14da4 <radio_isr_set>
			radio_switch_complete_and_disable();
   14a08:	f000 fb86 	bl	15118 <radio_switch_complete_and_disable>
   14a0c:	e745      	b.n	1489a <lll_conn_isr_rx+0x11e>
	if (is_rx_enqueue) {
   14a0e:	f1ba 0f00 	cmp.w	sl, #0
   14a12:	d094      	beq.n	1493e <lll_conn_isr_rx+0x1c2>
   14a14:	e787      	b.n	14926 <lll_conn_isr_rx+0x1aa>
   14a16:	bf00      	nop
   14a18:	000145b1 	.word	0x000145b1
   14a1c:	20002e6a 	.word	0x20002e6a
   14a20:	00023179 	.word	0x00023179
   14a24:	000230d6 	.word	0x000230d6
   14a28:	00020429 	.word	0x00020429
   14a2c:	2000300d 	.word	0x2000300d
   14a30:	2000300e 	.word	0x2000300e
   14a34:	000146fd 	.word	0x000146fd
   14a38:	000230de 	.word	0x000230de
   14a3c:	000231c4 	.word	0x000231c4
   14a40:	000218fc 	.word	0x000218fc

00014a44 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   14a44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t remainder;
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
   14a48:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   14a4a:	89a2      	ldrh	r2, [r4, #12]
   14a4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14a50:	429a      	cmp	r2, r3
{
   14a52:	4606      	mov	r6, r0
	if (unlikely(lll->handle == 0xFFFF)) {
   14a54:	d109      	bne.n	14a6a <prepare_cb+0x26>
		radio_isr_set(lll_isr_early_abort, lll);
   14a56:	485e      	ldr	r0, [pc, #376]	; (14bd0 <prepare_cb+0x18c>)
   14a58:	4621      	mov	r1, r4
#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   14a5a:	f000 f9a3 	bl	14da4 <radio_isr_set>
		radio_disable();
   14a5e:	f000 fa6f 	bl	14f40 <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   14a62:	2000      	movs	r0, #0
   14a64:	b002      	add	sp, #8
   14a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	lll_conn_prepare_reset();
   14a6a:	f7ff fde3 	bl	14634 <lll_conn_prepare_reset>
	lll->latency_event = lll->latency_prepare + p->lazy;
   14a6e:	8933      	ldrh	r3, [r6, #8]
   14a70:	8a62      	ldrh	r2, [r4, #18]
   14a72:	441a      	add	r2, r3
	event_counter = lll->event_counter + lll->latency_event;
   14a74:	8ae3      	ldrh	r3, [r4, #22]
	lll->latency_event = lll->latency_prepare + p->lazy;
   14a76:	b292      	uxth	r2, r2
	event_counter = lll->event_counter + lll->latency_event;
   14a78:	4413      	add	r3, r2
	lll->event_counter = (event_counter + 1);
   14a7a:	3301      	adds	r3, #1
   14a7c:	82e3      	strh	r3, [r4, #22]
	if (lll->data_chan_sel) {
   14a7e:	7f63      	ldrb	r3, [r4, #29]
	lll->latency_event = lll->latency_prepare + p->lazy;
   14a80:	82a2      	strh	r2, [r4, #20]
	lll->latency_prepare = 0;
   14a82:	2500      	movs	r5, #0
	if (lll->data_chan_sel) {
   14a84:	0659      	lsls	r1, r3, #25
	lll->latency_prepare = 0;
   14a86:	8265      	strh	r5, [r4, #18]
	if (lll->data_chan_sel) {
   14a88:	f140 8082 	bpl.w	14b90 <prepare_cb+0x14c>
		LL_ASSERT(0);
   14a8c:	4a51      	ldr	r2, [pc, #324]	; (14bd4 <prepare_cb+0x190>)
   14a8e:	4952      	ldr	r1, [pc, #328]	; (14bd8 <prepare_cb+0x194>)
   14a90:	4852      	ldr	r0, [pc, #328]	; (14bdc <prepare_cb+0x198>)
   14a92:	238f      	movs	r3, #143	; 0x8f
   14a94:	f004 f896 	bl	18bc4 <printk>
   14a98:	4040      	eors	r0, r0
   14a9a:	f380 8811 	msr	BASEPRI, r0
   14a9e:	f04f 0003 	mov.w	r0, #3
   14aa2:	df02      	svc	2
	lll->periph.window_widening_event_us +=
   14aa4:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	; 0x2c
	    lll->periph.window_widening_max_us) {
   14aa8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	lll->periph.window_widening_event_us +=
   14aaa:	4413      	add	r3, r2
		lll->periph.window_widening_event_us =
   14aac:	4299      	cmp	r1, r3
   14aae:	bf94      	ite	ls
   14ab0:	6321      	strls	r1, [r4, #48]	; 0x30
   14ab2:	6323      	strhi	r3, [r4, #48]	; 0x30
	lll->periph.window_size_event_us +=
   14ab4:	e9d4 130d 	ldrd	r1, r3, [r4, #52]	; 0x34
	lll->periph.window_widening_prepare_us = 0;
   14ab8:	2200      	movs	r2, #0
	lll->periph.window_size_event_us +=
   14aba:	440b      	add	r3, r1
	lll->periph.window_size_prepare_us = 0;
   14abc:	e9c4 230d 	strd	r2, r3, [r4, #52]	; 0x34
	lll->periph.window_widening_prepare_us = 0;
   14ac0:	62e2      	str	r2, [r4, #44]	; 0x2c
	if (!lll->empty) {
   14ac2:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
   14ac6:	f012 0204 	ands.w	r2, r2, #4
   14aca:	d10a      	bne.n	14ae2 <prepare_cb+0x9e>
		link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, NULL);
   14acc:	e9d4 010f 	ldrd	r0, r1, [r4, #60]	; 0x3c
   14ad0:	f007 feab 	bl	1c82a <memq_peek>
		if (!link) {
   14ad4:	b928      	cbnz	r0, 14ae2 <prepare_cb+0x9e>
			lll->empty = 1U;
   14ad6:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
   14ada:	f043 0304 	orr.w	r3, r3, #4
   14ade:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
	radio_reset();
   14ae2:	f000 f97f 	bl	14de4 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   14ae6:	2000      	movs	r0, #0
   14ae8:	f000 f9b0 	bl	14e4c <radio_tx_power_set>
	lll_conn_rx_pkt_set(lll);
   14aec:	4620      	mov	r0, r4
   14aee:	f7ff fddd 	bl	146ac <lll_conn_rx_pkt_set>
	radio_aa_set(lll->access_addr);
   14af2:	1d20      	adds	r0, r4, #4
   14af4:	f000 f9c8 	bl	14e88 <radio_aa_set>
			     ((uint32_t)lll->crc_init[1] << 8) |
   14af8:	7a63      	ldrb	r3, [r4, #9]
			    (((uint32_t)lll->crc_init[2] << 16) |
   14afa:	7aa1      	ldrb	r1, [r4, #10]
			     ((uint32_t)lll->crc_init[1] << 8) |
   14afc:	021b      	lsls	r3, r3, #8
			    (((uint32_t)lll->crc_init[2] << 16) |
   14afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((uint32_t)lll->crc_init[0])));
   14b02:	7a21      	ldrb	r1, [r4, #8]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   14b04:	f240 605b 	movw	r0, #1627	; 0x65b
   14b08:	4319      	orrs	r1, r3
   14b0a:	f000 fa55 	bl	14fb8 <radio_crc_configure>
	lll_chan_set(data_chan_use);
   14b0e:	4628      	mov	r0, r5
   14b10:	f7fe fce6 	bl	134e0 <lll_chan_set>
	radio_isr_set(lll_conn_isr_rx, lll);
   14b14:	4621      	mov	r1, r4
   14b16:	4832      	ldr	r0, [pc, #200]	; (14be0 <prepare_cb+0x19c>)
   14b18:	f000 f944 	bl	14da4 <radio_isr_set>
	radio_tmr_tifs_set(EVENT_IFS_US);
   14b1c:	2096      	movs	r0, #150	; 0x96
   14b1e:	f000 fb79 	bl	15214 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   14b22:	2300      	movs	r3, #0
   14b24:	461a      	mov	r2, r3
   14b26:	4619      	mov	r1, r3
   14b28:	4618      	mov	r0, r3
   14b2a:	f000 fae3 	bl	150f4 <radio_switch_complete_and_tx>
	ull = HDR_LLL2ULL(lll);
   14b2e:	f8d4 8000 	ldr.w	r8, [r4]
	ticks_at_event = p->ticks_at_expire;
   14b32:	6837      	ldr	r7, [r6, #0]
	ticks_at_event += lll_event_offset_get(ull);
   14b34:	4640      	mov	r0, r8
   14b36:	f008 fca3 	bl	1d480 <lll_event_offset_get>
   14b3a:	4407      	add	r7, r0
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   14b3c:	6872      	ldr	r2, [r6, #4]
   14b3e:	f107 0109 	add.w	r1, r7, #9
   14b42:	2000      	movs	r0, #0
   14b44:	f000 fb72 	bl	1522c <radio_tmr_start>
   14b48:	4605      	mov	r5, r0
	radio_tmr_aa_capture();
   14b4a:	f000 fc11 	bl	15370 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   14b4e:	2000      	movs	r0, #0
   14b50:	f000 fc28 	bl	153a4 <radio_tmr_aa_save>
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   14b54:	6b26      	ldr	r6, [r4, #48]	; 0x30
   14b56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	hcto += radio_rx_ready_delay_get(0, 0);
   14b58:	2100      	movs	r1, #0
   14b5a:	eb03 0346 	add.w	r3, r3, r6, lsl #1
   14b5e:	4608      	mov	r0, r1
   14b60:	f103 0688 	add.w	r6, r3, #136	; 0x88
   14b64:	f008 ff0e 	bl	1d984 <radio_rx_ready_delay_get>
	hcto += addr_us_get(0);
   14b68:	4435      	add	r5, r6
	hcto += radio_rx_chain_delay_get(0, 0);
   14b6a:	2100      	movs	r1, #0
	hcto += addr_us_get(0);
   14b6c:	4405      	add	r5, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   14b6e:	4608      	mov	r0, r1
   14b70:	f008 ff0a 	bl	1d988 <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   14b74:	4428      	add	r0, r5
   14b76:	f000 fbef 	bl	15358 <radio_tmr_hcto_configure>
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
   14b7a:	89a1      	ldrh	r1, [r4, #12]
   14b7c:	3105      	adds	r1, #5
   14b7e:	463a      	mov	r2, r7
   14b80:	b2c9      	uxtb	r1, r1
   14b82:	4640      	mov	r0, r8
   14b84:	f008 fc8a 	bl	1d49c <lll_preempt_calc>
   14b88:	b170      	cbz	r0, 14ba8 <prepare_cb+0x164>
		radio_isr_set(lll_isr_abort, lll);
   14b8a:	4816      	ldr	r0, [pc, #88]	; (14be4 <prepare_cb+0x1a0>)
   14b8c:	4621      	mov	r1, r4
   14b8e:	e764      	b.n	14a5a <prepare_cb+0x16>
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   14b90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   14b94:	7fa1      	ldrb	r1, [r4, #30]
   14b96:	9300      	str	r3, [sp, #0]
   14b98:	f104 001f 	add.w	r0, r4, #31
   14b9c:	f104 0318 	add.w	r3, r4, #24
   14ba0:	f008 fc1a 	bl	1d3d8 <lll_chan_sel_1>
   14ba4:	4605      	mov	r5, r0
   14ba6:	e77d      	b.n	14aa4 <prepare_cb+0x60>
		ret = lll_prepare_done(lll);
   14ba8:	4620      	mov	r0, r4
   14baa:	f008 fc64 	bl	1d476 <lll_prepare_done>
		LL_ASSERT(!ret);
   14bae:	2800      	cmp	r0, #0
   14bb0:	f43f af57 	beq.w	14a62 <prepare_cb+0x1e>
   14bb4:	4a07      	ldr	r2, [pc, #28]	; (14bd4 <prepare_cb+0x190>)
   14bb6:	490c      	ldr	r1, [pc, #48]	; (14be8 <prepare_cb+0x1a4>)
   14bb8:	4808      	ldr	r0, [pc, #32]	; (14bdc <prepare_cb+0x198>)
   14bba:	f240 1319 	movw	r3, #281	; 0x119
   14bbe:	f004 f801 	bl	18bc4 <printk>
   14bc2:	4040      	eors	r0, r0
   14bc4:	f380 8811 	msr	BASEPRI, r0
   14bc8:	f04f 0003 	mov.w	r0, #3
   14bcc:	df02      	svc	2
   14bce:	e748      	b.n	14a62 <prepare_cb+0x1e>
   14bd0:	00013599 	.word	0x00013599
   14bd4:	000231eb 	.word	0x000231eb
   14bd8:	000218fc 	.word	0x000218fc
   14bdc:	00020429 	.word	0x00020429
   14be0:	0001477d 	.word	0x0001477d
   14be4:	0001d4f9 	.word	0x0001d4f9
   14be8:	00022a65 	.word	0x00022a65

00014bec <lll_periph_prepare>:
{
   14bec:	b513      	push	{r0, r1, r4, lr}
   14bee:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   14bf0:	f7fe fdf4 	bl	137dc <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   14bf4:	2800      	cmp	r0, #0
   14bf6:	da0b      	bge.n	14c10 <lll_periph_prepare+0x24>
   14bf8:	4a17      	ldr	r2, [pc, #92]	; (14c58 <lll_periph_prepare+0x6c>)
   14bfa:	4918      	ldr	r1, [pc, #96]	; (14c5c <lll_periph_prepare+0x70>)
   14bfc:	4818      	ldr	r0, [pc, #96]	; (14c60 <lll_periph_prepare+0x74>)
   14bfe:	2347      	movs	r3, #71	; 0x47
   14c00:	f003 ffe0 	bl	18bc4 <printk>
   14c04:	4040      	eors	r0, r0
   14c06:	f380 8811 	msr	BASEPRI, r0
   14c0a:	f04f 0003 	mov.w	r0, #3
   14c0e:	df02      	svc	2
	lll = p->param;
   14c10:	68e2      	ldr	r2, [r4, #12]
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   14c12:	8921      	ldrh	r1, [r4, #8]
   14c14:	6a53      	ldr	r3, [r2, #36]	; 0x24
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   14c16:	4813      	ldr	r0, [pc, #76]	; (14c64 <lll_periph_prepare+0x78>)
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   14c18:	fb01 3303 	mla	r3, r1, r3, r3
	lll->periph.window_widening_prepare_us +=
   14c1c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   14c1e:	440b      	add	r3, r1
	    lll->periph.window_widening_max_us) {
   14c20:	6a91      	ldr	r1, [r2, #40]	; 0x28
		lll->periph.window_widening_prepare_us =
   14c22:	4299      	cmp	r1, r3
   14c24:	bf94      	ite	ls
   14c26:	62d1      	strls	r1, [r2, #44]	; 0x2c
   14c28:	62d3      	strhi	r3, [r2, #44]	; 0x2c
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   14c2a:	4a0f      	ldr	r2, [pc, #60]	; (14c68 <lll_periph_prepare+0x7c>)
   14c2c:	490f      	ldr	r1, [pc, #60]	; (14c6c <lll_periph_prepare+0x80>)
   14c2e:	9400      	str	r4, [sp, #0]
   14c30:	2300      	movs	r3, #0
   14c32:	f008 f943 	bl	1cebc <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   14c36:	b168      	cbz	r0, 14c54 <lll_periph_prepare+0x68>
   14c38:	3077      	adds	r0, #119	; 0x77
   14c3a:	d00b      	beq.n	14c54 <lll_periph_prepare+0x68>
   14c3c:	4a06      	ldr	r2, [pc, #24]	; (14c58 <lll_periph_prepare+0x6c>)
   14c3e:	490c      	ldr	r1, [pc, #48]	; (14c70 <lll_periph_prepare+0x84>)
   14c40:	4807      	ldr	r0, [pc, #28]	; (14c60 <lll_periph_prepare+0x74>)
   14c42:	2358      	movs	r3, #88	; 0x58
   14c44:	f003 ffbe 	bl	18bc4 <printk>
   14c48:	4040      	eors	r0, r0
   14c4a:	f380 8811 	msr	BASEPRI, r0
   14c4e:	f04f 0003 	mov.w	r0, #3
   14c52:	df02      	svc	2
}
   14c54:	b002      	add	sp, #8
   14c56:	bd10      	pop	{r4, pc}
   14c58:	000231eb 	.word	0x000231eb
   14c5c:	0002303c 	.word	0x0002303c
   14c60:	00020429 	.word	0x00020429
   14c64:	0001d47b 	.word	0x0001d47b
   14c68:	00014a45 	.word	0x00014a45
   14c6c:	00014651 	.word	0x00014651
   14c70:	000230f9 	.word	0x000230f9

00014c74 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   14c74:	4b05      	ldr	r3, [pc, #20]	; (14c8c <cntr_init+0x18>)
   14c76:	2200      	movs	r2, #0
   14c78:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   14c7c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   14c80:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   14c84:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   14c88:	4770      	bx	lr
   14c8a:	bf00      	nop
   14c8c:	4000b000 	.word	0x4000b000

00014c90 <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   14c90:	4a04      	ldr	r2, [pc, #16]	; (14ca4 <cntr_start+0x14>)
   14c92:	7813      	ldrb	r3, [r2, #0]
   14c94:	1c59      	adds	r1, r3, #1
   14c96:	7011      	strb	r1, [r2, #0]
   14c98:	2001      	movs	r0, #1
   14c9a:	b913      	cbnz	r3, 14ca2 <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   14c9c:	4a02      	ldr	r2, [pc, #8]	; (14ca8 <cntr_start+0x18>)
   14c9e:	6010      	str	r0, [r2, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   14ca0:	4618      	mov	r0, r3
}
   14ca2:	4770      	bx	lr
   14ca4:	2000300f 	.word	0x2000300f
   14ca8:	4000b000 	.word	0x4000b000

00014cac <cntr_stop>:

uint32_t cntr_stop(void)
{
   14cac:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   14cae:	4c0d      	ldr	r4, [pc, #52]	; (14ce4 <cntr_stop+0x38>)
   14cb0:	7823      	ldrb	r3, [r4, #0]
   14cb2:	b95b      	cbnz	r3, 14ccc <cntr_stop+0x20>
   14cb4:	4a0c      	ldr	r2, [pc, #48]	; (14ce8 <cntr_stop+0x3c>)
   14cb6:	490d      	ldr	r1, [pc, #52]	; (14cec <cntr_stop+0x40>)
   14cb8:	480d      	ldr	r0, [pc, #52]	; (14cf0 <cntr_stop+0x44>)
   14cba:	232d      	movs	r3, #45	; 0x2d
   14cbc:	f003 ff82 	bl	18bc4 <printk>
   14cc0:	4040      	eors	r0, r0
   14cc2:	f380 8811 	msr	BASEPRI, r0
   14cc6:	f04f 0003 	mov.w	r0, #3
   14cca:	df02      	svc	2

	if (--_refcount) {
   14ccc:	7820      	ldrb	r0, [r4, #0]
   14cce:	3801      	subs	r0, #1
   14cd0:	b2c0      	uxtb	r0, r0
   14cd2:	7020      	strb	r0, [r4, #0]
   14cd4:	2301      	movs	r3, #1
   14cd6:	b910      	cbnz	r0, 14cde <cntr_stop+0x32>
   14cd8:	4a06      	ldr	r2, [pc, #24]	; (14cf4 <cntr_stop+0x48>)
   14cda:	6053      	str	r3, [r2, #4]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   14cdc:	bd10      	pop	{r4, pc}
		return 1;
   14cde:	4618      	mov	r0, r3
   14ce0:	e7fc      	b.n	14cdc <cntr_stop+0x30>
   14ce2:	bf00      	nop
   14ce4:	2000300f 	.word	0x2000300f
   14ce8:	0002324f 	.word	0x0002324f
   14cec:	0002329b 	.word	0x0002329b
   14cf0:	00020429 	.word	0x00020429
   14cf4:	4000b000 	.word	0x4000b000

00014cf8 <cntr_cnt_get>:
     return p_reg->COUNTER;
   14cf8:	4b01      	ldr	r3, [pc, #4]	; (14d00 <cntr_cnt_get+0x8>)
   14cfa:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   14cfe:	4770      	bx	lr
   14d00:	4000b000 	.word	0x4000b000

00014d04 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   14d04:	4b02      	ldr	r3, [pc, #8]	; (14d10 <cntr_cmp_set+0xc>)
   14d06:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   14d0a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   14d0e:	4770      	bx	lr
   14d10:	4000b000 	.word	0x4000b000

00014d14 <do_ecb>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14d14:	4b10      	ldr	r3, [pc, #64]	; (14d58 <do_ecb+0x44>)
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   14d16:	b530      	push	{r4, r5, lr}
   14d18:	2201      	movs	r2, #1
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   14d1a:	2400      	movs	r4, #0
   14d1c:	605a      	str	r2, [r3, #4]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   14d1e:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   14d22:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   14d26:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
   14d2a:	601a      	str	r2, [r3, #0]
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   14d2c:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
   14d30:	b931      	cbnz	r1, 14d40 <do_ecb+0x2c>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   14d32:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   14d36:	b919      	cbnz	r1, 14d40 <do_ecb+0x2c>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   14d38:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   14d3c:	2900      	cmp	r1, #0
   14d3e:	d1f5      	bne.n	14d2c <do_ecb+0x18>
   14d40:	605a      	str	r2, [r3, #4]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   14d42:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
   14d46:	2900      	cmp	r1, #0
   14d48:	d1e8      	bne.n	14d1c <do_ecb+0x8>
   14d4a:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504
   14d4e:	2d00      	cmp	r5, #0
   14d50:	d0e4      	beq.n	14d1c <do_ecb+0x8>

	NRF_ECB->ECBDATAPTR = 0;
   14d52:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
}
   14d56:	bd30      	pop	{r4, r5, pc}
   14d58:	4000e000 	.word	0x4000e000

00014d5c <hal_radio_enable_on_tick_ppi_config_and_enable>:
static inline void hal_radio_enable_on_tick_ppi_config_and_enable(uint8_t trx)
{
	/* No need to configure anything for the pre-programmed channels.
	 * Just enable and disable them accordingly.
	 */
	nrf_ppi_channels_disable(
   14d5c:	2800      	cmp	r0, #0
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   14d5e:	4b08      	ldr	r3, [pc, #32]	; (14d80 <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
   14d60:	bf14      	ite	ne
   14d62:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
   14d66:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
   14d6a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
		NRF_PPI,
		trx ? BIT(HAL_RADIO_ENABLE_RX_ON_TICK_PPI)
		    : BIT(HAL_RADIO_ENABLE_TX_ON_TICK_PPI));
	nrf_ppi_channels_enable(
   14d6e:	bf14      	ite	ne
   14d70:	f44f 1280 	movne.w	r2, #1048576	; 0x100000
   14d74:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    p_reg->CHENSET = mask;
   14d78:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		NRF_PPI,
		trx ? BIT(HAL_RADIO_ENABLE_TX_ON_TICK_PPI)
		    : BIT(HAL_RADIO_ENABLE_RX_ON_TICK_PPI));
}
   14d7c:	4770      	bx	lr
   14d7e:	bf00      	nop
   14d80:	4001f000 	.word	0x4001f000

00014d84 <isr_radio>:
}
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

uint32_t radio_has_disabled(void)
{
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   14d84:	4b04      	ldr	r3, [pc, #16]	; (14d98 <isr_radio+0x14>)
   14d86:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   14d8a:	b123      	cbz	r3, 14d96 <isr_radio+0x12>
		isr_cb(isr_cb_param);
   14d8c:	4b03      	ldr	r3, [pc, #12]	; (14d9c <isr_radio+0x18>)
   14d8e:	4a04      	ldr	r2, [pc, #16]	; (14da0 <isr_radio+0x1c>)
   14d90:	681b      	ldr	r3, [r3, #0]
   14d92:	6810      	ldr	r0, [r2, #0]
   14d94:	4718      	bx	r3
}
   14d96:	4770      	bx	lr
   14d98:	40001000 	.word	0x40001000
   14d9c:	20002b60 	.word	0x20002b60
   14da0:	20002b64 	.word	0x20002b64

00014da4 <radio_isr_set>:
{
   14da4:	b538      	push	{r3, r4, r5, lr}
   14da6:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   14da8:	2001      	movs	r0, #1
{
   14daa:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   14dac:	f7ee faee 	bl	338c <arch_irq_disable>
	isr_cb_param = param;
   14db0:	4b08      	ldr	r3, [pc, #32]	; (14dd4 <radio_isr_set+0x30>)
   14db2:	601d      	str	r5, [r3, #0]
	isr_cb = cb;
   14db4:	4b08      	ldr	r3, [pc, #32]	; (14dd8 <radio_isr_set+0x34>)
   14db6:	601c      	str	r4, [r3, #0]
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   14db8:	4b08      	ldr	r3, [pc, #32]	; (14ddc <radio_isr_set+0x38>)
   14dba:	2210      	movs	r2, #16
   14dbc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14dc0:	4b07      	ldr	r3, [pc, #28]	; (14de0 <radio_isr_set+0x3c>)
   14dc2:	2202      	movs	r2, #2
   14dc4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   14dc8:	2001      	movs	r0, #1
}
   14dca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   14dce:	f7ee bacd 	b.w	336c <arch_irq_enable>
   14dd2:	bf00      	nop
   14dd4:	20002b64 	.word	0x20002b64
   14dd8:	20002b60 	.word	0x20002b60
   14ddc:	40001000 	.word	0x40001000
   14de0:	e000e100 	.word	0xe000e100

00014de4 <radio_reset>:
{
   14de4:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
   14de6:	2001      	movs	r0, #1
   14de8:	f7ee fad0 	bl	338c <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (radio_power ? RADIO_POWER_POWER_Enabled : RADIO_POWER_POWER_Disabled)
   14dec:	4a0d      	ldr	r2, [pc, #52]	; (14e24 <radio_reset+0x40>)
   14dee:	2300      	movs	r3, #0
   14df0:	f8c2 3ffc 	str.w	r3, [r2, #4092]	; 0xffc
   14df4:	2301      	movs	r3, #1
   14df6:	f8c2 3ffc 	str.w	r3, [r2, #4092]	; 0xffc
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

static inline void hal_radio_reset(void)
{
	/* Anomalies 102, 106 and 107 */
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   14dfa:	f8d2 3774 	ldr.w	r3, [r2, #1908]	; 0x774
					 0xfffffffe) | 0x01000000;
   14dfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   14e02:	f023 0301 	bic.w	r3, r3, #1
   14e06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   14e0a:	f8c2 3774 	str.w	r3, [r2, #1908]	; 0x774
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   14e0e:	4b06      	ldr	r3, [pc, #24]	; (14e28 <radio_reset+0x44>)
   14e10:	f44f 5290 	mov.w	r2, #4608	; 0x1200
   14e14:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   14e18:	f44f 5210 	mov.w	r2, #9216	; 0x2400
   14e1c:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
   14e20:	bd08      	pop	{r3, pc}
   14e22:	bf00      	nop
   14e24:	40001000 	.word	0x40001000
   14e28:	4001f000 	.word	0x4001f000

00014e2c <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   14e2c:	4b06      	ldr	r3, [pc, #24]	; (14e48 <radio_phy_set+0x1c>)
	default:
		mode = RADIO_MODE_MODE_Ble_1Mbit;
		break;

	case BIT(1):
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   14e2e:	2802      	cmp	r0, #2
   14e30:	bf14      	ite	ne
   14e32:	2203      	movne	r2, #3
   14e34:	2204      	moveq	r2, #4
   14e36:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   14e3a:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   14e3e:	f042 0201 	orr.w	r2, r2, #1
   14e42:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   14e46:	4770      	bx	lr
   14e48:	40001000 	.word	0x40001000

00014e4c <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   14e4c:	4b01      	ldr	r3, [pc, #4]	; (14e54 <radio_tx_power_set+0x8>)
   14e4e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   14e52:	4770      	bx	lr
   14e54:	40001000 	.word	0x40001000

00014e58 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   14e58:	4b01      	ldr	r3, [pc, #4]	; (14e60 <radio_freq_chan_set+0x8>)
   14e5a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   14e5e:	4770      	bx	lr
   14e60:	40001000 	.word	0x40001000

00014e64 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   14e64:	4b07      	ldr	r3, [pc, #28]	; (14e84 <radio_whiten_iv_set+0x20>)
   14e66:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   14e6a:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   14e6e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   14e72:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   14e76:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   14e7a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   14e7e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   14e82:	4770      	bx	lr
   14e84:	40001000 	.word	0x40001000

00014e88 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   14e88:	4a0a      	ldr	r2, [pc, #40]	; (14eb4 <radio_aa_set+0x2c>)
   14e8a:	2300      	movs	r3, #0
   14e8c:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   14e90:	2301      	movs	r3, #1
   14e92:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   14e96:	78c3      	ldrb	r3, [r0, #3]
   14e98:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   14e9c:	7843      	ldrb	r3, [r0, #1]
   14e9e:	7881      	ldrb	r1, [r0, #2]
   14ea0:	041b      	lsls	r3, r3, #16
   14ea2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   14ea6:	7801      	ldrb	r1, [r0, #0]
   14ea8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   14eac:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   14eb0:	4770      	bx	lr
   14eb2:	bf00      	nop
   14eb4:	40001000 	.word	0x40001000

00014eb8 <radio_pkt_configure>:
	switch (phy) {
   14eb8:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   14ebc:	2b02      	cmp	r3, #2
{
   14ebe:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   14ec0:	bf14      	ite	ne
   14ec2:	2400      	movne	r4, #0
   14ec4:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
	if (dc) {
   14ec8:	07d3      	lsls	r3, r2, #31
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   14eca:	f1c0 0308 	rsb	r3, r0, #8
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   14ece:	bf48      	it	mi
   14ed0:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   14ed4:	041b      	lsls	r3, r3, #16
			   ((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   14ed6:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   14eda:	4320      	orrs	r0, r4
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   14edc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   14ee0:	4a09      	ldr	r2, [pc, #36]	; (14f08 <radio_pkt_configure+0x50>)
			    RADIO_PCNF0_S1LEN_Msk) |
   14ee2:	4303      	orrs	r3, r0
   14ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   14ee8:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   14eec:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   14ef0:	4b06      	ldr	r3, [pc, #24]	; (14f0c <radio_pkt_configure+0x54>)
   14ef2:	4003      	ands	r3, r0
   14ef4:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((uint32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   14ef8:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   14efc:	4319      	orrs	r1, r3
   14efe:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   14f02:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   14f06:	bd10      	pop	{r4, pc}
   14f08:	40001000 	.word	0x40001000
   14f0c:	fef80000 	.word	0xfef80000

00014f10 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   14f10:	4b01      	ldr	r3, [pc, #4]	; (14f18 <radio_pkt_rx_set+0x8>)
   14f12:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   14f16:	4770      	bx	lr
   14f18:	40001000 	.word	0x40001000

00014f1c <radio_pkt_tx_set>:
   14f1c:	4b01      	ldr	r3, [pc, #4]	; (14f24 <radio_pkt_tx_set+0x8>)
   14f1e:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   14f22:	4770      	bx	lr
   14f24:	40001000 	.word	0x40001000

00014f28 <radio_rx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14f28:	4b01      	ldr	r3, [pc, #4]	; (14f30 <radio_rx_enable+0x8>)
   14f2a:	2201      	movs	r2, #1
   14f2c:	605a      	str	r2, [r3, #4]
}
   14f2e:	4770      	bx	lr
   14f30:	40001000 	.word	0x40001000

00014f34 <radio_tx_enable>:
   14f34:	4b01      	ldr	r3, [pc, #4]	; (14f3c <radio_tx_enable+0x8>)
   14f36:	2201      	movs	r2, #1
   14f38:	601a      	str	r2, [r3, #0]
}
   14f3a:	4770      	bx	lr
   14f3c:	40001000 	.word	0x40001000

00014f40 <radio_disable>:
    p_reg->CHENCLR = mask;
   14f40:	4a07      	ldr	r2, [pc, #28]	; (14f60 <radio_disable+0x20>)
   14f42:	f44f 6310 	mov.w	r3, #2304	; 0x900
   14f46:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   14f4a:	2301      	movs	r3, #1
   14f4c:	6053      	str	r3, [r2, #4]
   14f4e:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   14f50:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
   14f54:	2100      	movs	r1, #0
   14f56:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
   14f5a:	6113      	str	r3, [r2, #16]
}
   14f5c:	4770      	bx	lr
   14f5e:	bf00      	nop
   14f60:	4001f000 	.word	0x4001f000

00014f64 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   14f64:	4b04      	ldr	r3, [pc, #16]	; (14f78 <radio_status_reset+0x14>)
   14f66:	2200      	movs	r2, #0
   14f68:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   14f6c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   14f70:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   14f74:	4770      	bx	lr
   14f76:	bf00      	nop
   14f78:	40001000 	.word	0x40001000

00014f7c <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   14f7c:	4b03      	ldr	r3, [pc, #12]	; (14f8c <radio_is_ready+0x10>)
   14f7e:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   14f82:	3800      	subs	r0, #0
   14f84:	bf18      	it	ne
   14f86:	2001      	movne	r0, #1
   14f88:	4770      	bx	lr
   14f8a:	bf00      	nop
   14f8c:	40001000 	.word	0x40001000

00014f90 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   14f90:	4b03      	ldr	r3, [pc, #12]	; (14fa0 <radio_is_done+0x10>)
   14f92:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   14f96:	3800      	subs	r0, #0
   14f98:	bf18      	it	ne
   14f9a:	2001      	movne	r0, #1
   14f9c:	4770      	bx	lr
   14f9e:	bf00      	nop
   14fa0:	40001000 	.word	0x40001000

00014fa4 <radio_is_idle>:
}

uint32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
   14fa4:	4b03      	ldr	r3, [pc, #12]	; (14fb4 <radio_is_idle+0x10>)
   14fa6:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   14faa:	fab0 f080 	clz	r0, r0
   14fae:	0940      	lsrs	r0, r0, #5
   14fb0:	4770      	bx	lr
   14fb2:	bf00      	nop
   14fb4:	40001000 	.word	0x40001000

00014fb8 <radio_crc_configure>:

void radio_crc_configure(uint32_t polynomial, uint32_t iv)
{
	NRF_RADIO->CRCCNF =
   14fb8:	4b04      	ldr	r3, [pc, #16]	; (14fcc <radio_crc_configure+0x14>)
   14fba:	f240 1203 	movw	r2, #259	; 0x103
   14fbe:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
   14fc2:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   14fc6:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   14fca:	4770      	bx	lr
   14fcc:	40001000 	.word	0x40001000

00014fd0 <radio_crc_is_valid>:

uint32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
   14fd0:	4b03      	ldr	r3, [pc, #12]	; (14fe0 <radio_crc_is_valid+0x10>)
   14fd2:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   14fd6:	3800      	subs	r0, #0
   14fd8:	bf18      	it	ne
   14fda:	2001      	movne	r0, #1
   14fdc:	4770      	bx	lr
   14fde:	bf00      	nop
   14fe0:	40001000 	.word	0x40001000

00014fe4 <radio_pkt_empty_get>:
				       PDU_AC_LL_SIZE_MAX)];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
   14fe4:	4800      	ldr	r0, [pc, #0]	; (14fe8 <radio_pkt_empty_get+0x4>)
   14fe6:	4770      	bx	lr
   14fe8:	20002a58 	.word	0x20002a58

00014fec <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
   14fec:	4800      	ldr	r0, [pc, #0]	; (14ff0 <radio_pkt_scratch_get+0x4>)
   14fee:	4770      	bx	lr
   14ff0:	20002a5c 	.word	0x20002a5c

00014ff4 <sw_switch>:

static uint8_t sw_tifs_toggle;

void sw_switch(uint8_t dir_curr, uint8_t dir_next, uint8_t phy_curr, uint8_t flags_curr,
	       uint8_t phy_next, uint8_t flags_next)
{
   14ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   14ff6:	4d30      	ldr	r5, [pc, #192]	; (150b8 <sw_switch+0xc4>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   14ff8:	4f30      	ldr	r7, [pc, #192]	; (150bc <sw_switch+0xc8>)
   14ffa:	782e      	ldrb	r6, [r5, #0]
   14ffc:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 150c0 <sw_switch+0xcc>
{
   15000:	f89d c014 	ldrb.w	ip, [sp, #20]
   15004:	f8c7 e568 	str.w	lr, [r7, #1384]	; 0x568
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   15008:	00f3      	lsls	r3, r6, #3
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1500a:	f106 040c 	add.w	r4, r6, #12
   1500e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   15012:	b2e4      	uxtb	r4, r4
   15014:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   15018:	00e4      	lsls	r4, r4, #3
   1501a:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
	nrf_ppi_event_endpoint_setup(
   1501e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   15022:	4b28      	ldr	r3, [pc, #160]	; (150c4 <sw_switch+0xd0>)
   15024:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   15028:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   1502c:	00b7      	lsls	r7, r6, #2
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1502e:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510

	/* NOTE: As constants are passed to dir_curr and dir_next, the
	 *       compiler should optimize out the redundant code path
	 *       during the optimization.
	 */
	if (dir_next) {
   15032:	2900      	cmp	r1, #0
   15034:	d03a      	beq.n	150ac <sw_switch+0xb8>
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_2M_NS;
   15036:	f24a 035a 	movw	r3, #41050	; 0xa05a
		/* TX */

		/* Calculate delay with respect to current and next PHY.
		 */
		if (dir_curr) {
   1503a:	b330      	cbz	r0, 1508a <sw_switch+0x96>
   1503c:	f649 4240 	movw	r2, #40000	; 0x9c40
   15040:	f1bc 0f02 	cmp.w	ip, #2
   15044:	bf08      	it	eq
   15046:	4613      	moveq	r3, r2
			delay = HAL_RADIO_NS2US_ROUND(
   15048:	f203 13f5 	addw	r3, r3, #501	; 0x1f5
			hal_radio_b2b_txen_on_sw_switch(ppi);
		} else {
			/* If RX PHY is LE Coded, calculate for S8 coding.
			 * Assumption being, S8 has higher delay.
			 */
			delay = HAL_RADIO_NS2US_ROUND(
   1504c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15050:	fbb3 f3f2 	udiv	r3, r3, r2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   15054:	4a1c      	ldr	r2, [pc, #112]	; (150c8 <sw_switch+0xd4>)
   15056:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		}
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   1505a:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
   1505e:	f502 4210 	add.w	r2, r2, #36864	; 0x9000
   15062:	f8d2 1540 	ldr.w	r1, [r2, #1344]	; 0x540
   15066:	4299      	cmp	r1, r3
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   15068:	bf8a      	itet	hi
   1506a:	f8d2 1540 	ldrhi.w	r1, [r2, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   1506e:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   15070:	1acb      	subhi	r3, r1, r3
   15072:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    p_reg->CHENSET = mask;
   15076:	4b11      	ldr	r3, [pc, #68]	; (150bc <sw_switch+0xc8>)
   15078:	f44f 6210 	mov.w	r2, #2304	; 0x900
   1507c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
#if !defined(CONFIG_SOC_SERIES_NRF53X)
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
#endif /* !CONFIG_SOC_SERIES_NRF53X */
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER || CONFIG_SOC_SERIES_NRF53X */

	sw_tifs_toggle += 1U;
   15080:	1c73      	adds	r3, r6, #1
	sw_tifs_toggle &= 1U;
   15082:	f003 0301 	and.w	r3, r3, #1
   15086:	702b      	strb	r3, [r5, #0]
}
   15088:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1508a:	f649 4140 	movw	r1, #40000	; 0x9c40
   1508e:	f1bc 0f02 	cmp.w	ip, #2
   15092:	bf08      	it	eq
   15094:	460b      	moveq	r3, r1
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_2M_NS;
   15096:	f241 504a 	movw	r0, #5450	; 0x154a
   1509a:	f242 41b8 	movw	r1, #9400	; 0x24b8
   1509e:	2a02      	cmp	r2, #2
   150a0:	bf08      	it	eq
   150a2:	4601      	moveq	r1, r0
			delay = HAL_RADIO_NS2US_ROUND(
   150a4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
   150a8:	440b      	add	r3, r1
   150aa:	e7cf      	b.n	1504c <sw_switch+0x58>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   150ac:	4b07      	ldr	r3, [pc, #28]	; (150cc <sw_switch+0xd8>)
   150ae:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
   150b2:	232d      	movs	r3, #45	; 0x2d
}
   150b4:	e7d1      	b.n	1505a <sw_switch+0x66>
   150b6:	bf00      	nop
   150b8:	20003010 	.word	0x20003010
   150bc:	4001f000 	.word	0x4001f000
   150c0:	4000110c 	.word	0x4000110c
   150c4:	40009140 	.word	0x40009140
   150c8:	40001000 	.word	0x40001000
   150cc:	40001004 	.word	0x40001004

000150d0 <radio_switch_complete_and_rx>:
#endif /* CONFIG_BT_CTLR_TIFS_HW */

void radio_switch_complete_and_rx(uint8_t phy_rx)
{
   150d0:	b507      	push	{r0, r1, r2, lr}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   150d2:	4b07      	ldr	r3, [pc, #28]	; (150f0 <radio_switch_complete_and_rx+0x20>)
   150d4:	2203      	movs	r2, #3
   150d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* NOTE: As Tx chain delays are negligible constant values (~1 us)
	 *	 across nRF5x radios, sw_switch assumes the 1M chain delay for
	 *       calculations.
	 */
	sw_switch(SW_SWITCH_TX, SW_SWITCH_RX, SW_SWITCH_PHY_1M, SW_SWITCH_FLAGS_DONTCARE, phy_rx,
   150da:	2300      	movs	r3, #0
   150dc:	e9cd 0300 	strd	r0, r3, [sp]
   150e0:	461a      	mov	r2, r3
   150e2:	4619      	mov	r1, r3
   150e4:	2001      	movs	r0, #1
   150e6:	f7ff ff85 	bl	14ff4 <sw_switch>
		  SW_SWITCH_FLAGS_DONTCARE);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   150ea:	b003      	add	sp, #12
   150ec:	f85d fb04 	ldr.w	pc, [sp], #4
   150f0:	40001000 	.word	0x40001000

000150f4 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(uint8_t phy_rx, uint8_t flags_rx,
				  uint8_t phy_tx, uint8_t flags_tx)
{
   150f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   150f6:	4c07      	ldr	r4, [pc, #28]	; (15114 <radio_switch_complete_and_tx+0x20>)
   150f8:	2503      	movs	r5, #3
   150fa:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;

	sw_switch(SW_SWITCH_RX, SW_SWITCH_TX, phy_rx, flags_rx, phy_tx, flags_tx);
   150fe:	e9cd 2300 	strd	r2, r3, [sp]
   15102:	460b      	mov	r3, r1
   15104:	4602      	mov	r2, r0
   15106:	2101      	movs	r1, #1
   15108:	2000      	movs	r0, #0
   1510a:	f7ff ff73 	bl	14ff4 <sw_switch>
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1510e:	b003      	add	sp, #12
   15110:	bd30      	pop	{r4, r5, pc}
   15112:	bf00      	nop
   15114:	40001000 	.word	0x40001000

00015118 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   15118:	4b05      	ldr	r3, [pc, #20]	; (15130 <radio_switch_complete_and_disable+0x18>)
   1511a:	2203      	movs	r2, #3
   1511c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->CHENCLR = mask;
   15120:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   15124:	f44f 6210 	mov.w	r2, #2304	; 0x900
   15128:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1512c:	4770      	bx	lr
   1512e:	bf00      	nop
   15130:	40001000 	.word	0x40001000

00015134 <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_PHY_CODED */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   15134:	4a03      	ldr	r2, [pc, #12]	; (15144 <radio_rssi_measure+0x10>)
   15136:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1513a:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   1513e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
   15142:	4770      	bx	lr
   15144:	40001000 	.word	0x40001000

00015148 <radio_rssi_get>:

uint32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   15148:	4b01      	ldr	r3, [pc, #4]	; (15150 <radio_rssi_get+0x8>)
   1514a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   1514e:	4770      	bx	lr
   15150:	40001000 	.word	0x40001000

00015154 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   15154:	4b02      	ldr	r3, [pc, #8]	; (15160 <radio_rssi_status_reset+0xc>)
   15156:	2200      	movs	r2, #0
   15158:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   1515c:	4770      	bx	lr
   1515e:	bf00      	nop
   15160:	40001000 	.word	0x40001000

00015164 <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   15164:	4b03      	ldr	r3, [pc, #12]	; (15174 <radio_rssi_is_ready+0x10>)
   15166:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   1516a:	3800      	subs	r0, #0
   1516c:	bf18      	it	ne
   1516e:	2001      	movne	r0, #1
   15170:	4770      	bx	lr
   15172:	bf00      	nop
   15174:	40001000 	.word	0x40001000

00015178 <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   15178:	b5f0      	push	{r4, r5, r6, r7, lr}
   1517a:	2400      	movs	r4, #0
   1517c:	2706      	movs	r7, #6
   1517e:	fb07 f304 	mul.w	r3, r7, r4
   15182:	18d5      	adds	r5, r2, r3
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   15184:	58d6      	ldr	r6, [r2, r3]
   15186:	00a3      	lsls	r3, r4, #2
   15188:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1518c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	for (index = 0U; index < 8; index++) {
   15190:	3401      	adds	r4, #1
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   15192:	f8c3 6600 	str.w	r6, [r3, #1536]	; 0x600
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   15196:	88ad      	ldrh	r5, [r5, #4]
   15198:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   1519c:	2c08      	cmp	r4, #8
   1519e:	d1ee      	bne.n	1517e <radio_filter_configure+0x6>
		bdaddr += 6;
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   151a0:	4b02      	ldr	r3, [pc, #8]	; (151ac <radio_filter_configure+0x34>)
   151a2:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   151a6:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   151aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   151ac:	40001000 	.word	0x40001000

000151b0 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   151b0:	4a03      	ldr	r2, [pc, #12]	; (151c0 <radio_filter_disable+0x10>)
   151b2:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   151b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   151ba:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   151be:	4770      	bx	lr
   151c0:	40001000 	.word	0x40001000

000151c4 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   151c4:	4b02      	ldr	r3, [pc, #8]	; (151d0 <radio_filter_status_reset+0xc>)
   151c6:	2200      	movs	r2, #0
   151c8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   151cc:	4770      	bx	lr
   151ce:	bf00      	nop
   151d0:	40001000 	.word	0x40001000

000151d4 <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   151d4:	4b03      	ldr	r3, [pc, #12]	; (151e4 <radio_filter_has_match+0x10>)
   151d6:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   151da:	3800      	subs	r0, #0
   151dc:	bf18      	it	ne
   151de:	2001      	movne	r0, #1
   151e0:	4770      	bx	lr
   151e2:	bf00      	nop
   151e4:	40001000 	.word	0x40001000

000151e8 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   151e8:	4b01      	ldr	r3, [pc, #4]	; (151f0 <radio_filter_match_get+0x8>)
   151ea:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   151ee:	4770      	bx	lr
   151f0:	40001000 	.word	0x40001000

000151f4 <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   151f4:	4b05      	ldr	r3, [pc, #20]	; (1520c <radio_tmr_status_reset+0x18>)
   151f6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   151fa:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
   151fe:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   15202:	4a03      	ldr	r2, [pc, #12]	; (15210 <radio_tmr_status_reset+0x1c>)
   15204:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			BIT(HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI) |
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   15208:	4770      	bx	lr
   1520a:	bf00      	nop
   1520c:	4000b000 	.word	0x4000b000
   15210:	0e7000c0 	.word	0x0e7000c0

00015214 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   15214:	4b03      	ldr	r3, [pc, #12]	; (15224 <radio_tmr_tifs_set+0x10>)
   15216:	4a04      	ldr	r2, [pc, #16]	; (15228 <radio_tmr_tifs_set+0x14>)
   15218:	781b      	ldrb	r3, [r3, #0]
   1521a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   1521e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   15222:	4770      	bx	lr
   15224:	20003010 	.word	0x20003010
   15228:	40009000 	.word	0x40009000

0001522c <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   1522c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1522e:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   15232:	4c2f      	ldr	r4, [pc, #188]	; (152f0 <radio_tmr_start+0xc4>)
   15234:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   15238:	42a3      	cmp	r3, r4
		ticks_start--;
		remainder += 30517578UL;
   1523a:	bf88      	it	hi
   1523c:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15240:	4b2c      	ldr	r3, [pc, #176]	; (152f4 <radio_tmr_start+0xc8>)
	}
	remainder /= 1000000UL;
   15242:	4c2d      	ldr	r4, [pc, #180]	; (152f8 <radio_tmr_start+0xcc>)
		remainder += 30517578UL;
   15244:	bf84      	itt	hi
   15246:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
   1524a:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
   1524e:	f04f 0501 	mov.w	r5, #1

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   15252:	f04f 0600 	mov.w	r6, #0
	remainder /= 1000000UL;
   15256:	fbb2 f4f4 	udiv	r4, r2, r4
	EVENT_TIMER->PRESCALER = 4;
   1525a:	f04f 0704 	mov.w	r7, #4
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1525e:	f04f 0202 	mov.w	r2, #2
   15262:	60dd      	str	r5, [r3, #12]
	EVENT_TIMER->MODE = 0;
   15264:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	EVENT_TIMER->PRESCALER = 4;
   15268:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1526c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
   15270:	4a22      	ldr	r2, [pc, #136]	; (152fc <radio_tmr_start+0xd0>)
    p_reg->CC[cc_channel] = cc_value;
   15272:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
		ticks_start--;
   15276:	bf88      	it	hi
   15278:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
   1527c:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   15280:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   15284:	f8c2 1344 	str.w	r1, [r2, #836]	; 0x344
    p_reg->CH[(uint32_t) channel].EEP = eep;
   15288:	491d      	ldr	r1, [pc, #116]	; (15300 <radio_tmr_start+0xd4>)
   1528a:	f502 72a4 	add.w	r2, r2, #328	; 0x148
   1528e:	f8c1 2540 	str.w	r2, [r1, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   15292:	f8c1 3544 	str.w	r3, [r1, #1348]	; 0x544
    p_reg->CHENSET = mask;
   15296:	2340      	movs	r3, #64	; 0x40
   15298:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
	nrf_rtc_event_enable(NRF_RTC0, RTC_EVTENSET_COMPARE2_Msk);

	hal_event_timer_start_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_EVENT_TIMER_START_PPI));

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   1529c:	f7ff fd5e 	bl	14d5c <hal_radio_enable_on_tick_ppi_config_and_enable>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   152a0:	4b18      	ldr	r3, [pc, #96]	; (15304 <radio_tmr_start+0xd8>)
   152a2:	60dd      	str	r5, [r3, #12]
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   152a4:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   152a8:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   152ac:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
   152b0:	601d      	str	r5, [r3, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   152b2:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
   152b6:	3b74      	subs	r3, #116	; 0x74
   152b8:	f8c1 3550 	str.w	r3, [r1, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   152bc:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
   152c0:	f8c1 3554 	str.w	r3, [r1, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   152c4:	f503 739a 	add.w	r3, r3, #308	; 0x134
   152c8:	f8c1 3558 	str.w	r3, [r1, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   152cc:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   152d0:	33c4      	adds	r3, #196	; 0xc4
   152d2:	f8c1 355c 	str.w	r3, [r1, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   152d6:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
   152da:	3bc0      	subs	r3, #192	; 0xc0
   152dc:	f8c1 3560 	str.w	r3, [r1, #1376]	; 0x560
    p_reg->CH[(uint32_t) channel].TEP = tep;
   152e0:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   152e4:	33c8      	adds	r3, #200	; 0xc8
   152e6:	f8c1 3564 	str.w	r3, [r1, #1380]	; 0x564
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   152ea:	4620      	mov	r0, r4
   152ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   152ee:	bf00      	nop
   152f0:	7ff0bdbf 	.word	0x7ff0bdbf
   152f4:	40008000 	.word	0x40008000
   152f8:	000f4240 	.word	0x000f4240
   152fc:	4000b000 	.word	0x4000b000
   15300:	4001f000 	.word	0x4001f000
   15304:	40009000 	.word	0x40009000

00015308 <radio_tmr_start_now>:
#endif /* CONFIG_SOC_SERIES_NRF53X */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

uint32_t radio_tmr_start_now(uint8_t trx)
{
   15308:	b510      	push	{r4, lr}
	uint32_t now, start;

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   1530a:	f7ff fd27 	bl	14d5c <hal_radio_enable_on_tick_ppi_config_and_enable>
   1530e:	4b08      	ldr	r3, [pc, #32]	; (15330 <radio_tmr_start_now+0x28>)
   15310:	2401      	movs	r4, #1
   15312:	645c      	str	r4, [r3, #68]	; 0x44
#endif /* CONFIG_SOC_SERIES_NRF53X */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	/* Capture the current time */
	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CAPTURE1);
	now = EVENT_TIMER->CC[1];
   15314:	f8d3 2544 	ldr.w	r2, [r3, #1348]	; 0x544
	start = now;
   15318:	4611      	mov	r1, r2

	/* Setup PPI while determining the latency in doing so */
	do {
		/* Set start to be, now plus the determined latency */
		start = (now << 1) - start;
   1531a:	ebc1 0142 	rsb	r1, r1, r2, lsl #1

		/* Setup compare event with min. 1 us offset */
		nrf_timer_cc_set(EVENT_TIMER, 0, start + 1);
   1531e:	1c48      	adds	r0, r1, #1
    p_reg->CC[cc_channel] = cc_value;
   15320:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15324:	645c      	str	r4, [r3, #68]	; 0x44

		/* Capture the current time */
		nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CAPTURE1);

		now = EVENT_TIMER->CC[1];
   15326:	f8d3 2544 	ldr.w	r2, [r3, #1348]	; 0x544
	} while (now > start);
   1532a:	4291      	cmp	r1, r2
   1532c:	d3f5      	bcc.n	1531a <radio_tmr_start_now+0x12>

	return start + 1;
}
   1532e:	bd10      	pop	{r4, pc}
   15330:	40008000 	.word	0x40008000

00015334 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   15334:	4b01      	ldr	r3, [pc, #4]	; (1533c <radio_tmr_start_get+0x8>)
   15336:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   1533a:	4770      	bx	lr
   1533c:	4000b000 	.word	0x4000b000

00015340 <radio_tmr_stop>:
   15340:	4a04      	ldr	r2, [pc, #16]	; (15354 <radio_tmr_stop+0x14>)
   15342:	2301      	movs	r3, #1
   15344:	6053      	str	r3, [r2, #4]
   15346:	6113      	str	r3, [r2, #16]
   15348:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   1534c:	6053      	str	r3, [r2, #4]
   1534e:	6113      	str	r3, [r2, #16]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   15350:	4770      	bx	lr
   15352:	bf00      	nop
   15354:	40008000 	.word	0x40008000

00015358 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   15358:	4b04      	ldr	r3, [pc, #16]	; (1536c <radio_tmr_hcto_configure+0x14>)
   1535a:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->CHENSET = mask;
   1535e:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
   15362:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   15366:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   1536a:	4770      	bx	lr
   1536c:	40008000 	.word	0x40008000

00015370 <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   15370:	4b06      	ldr	r3, [pc, #24]	; (1538c <radio_tmr_aa_capture+0x1c>)
   15372:	4a07      	ldr	r2, [pc, #28]	; (15390 <radio_tmr_aa_capture+0x20>)
   15374:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   15378:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   1537c:	3240      	adds	r2, #64	; 0x40
   1537e:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    p_reg->CHENSET = mask;
   15382:	4a04      	ldr	r2, [pc, #16]	; (15394 <radio_tmr_aa_capture+0x24>)
   15384:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   15388:	4770      	bx	lr
   1538a:	bf00      	nop
   1538c:	4001f000 	.word	0x4001f000
   15390:	40001100 	.word	0x40001100
   15394:	04000080 	.word	0x04000080

00015398 <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   15398:	4b01      	ldr	r3, [pc, #4]	; (153a0 <radio_tmr_aa_get+0x8>)
   1539a:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   1539e:	4770      	bx	lr
   153a0:	40008000 	.word	0x40008000

000153a4 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   153a4:	4b01      	ldr	r3, [pc, #4]	; (153ac <radio_tmr_aa_save+0x8>)
   153a6:	6018      	str	r0, [r3, #0]
}
   153a8:	4770      	bx	lr
   153aa:	bf00      	nop
   153ac:	20002b68 	.word	0x20002b68

000153b0 <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
   153b0:	4b01      	ldr	r3, [pc, #4]	; (153b8 <radio_tmr_aa_restore+0x8>)
   153b2:	6818      	ldr	r0, [r3, #0]
   153b4:	4770      	bx	lr
   153b6:	bf00      	nop
   153b8:	20002b68 	.word	0x20002b68

000153bc <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   153bc:	4b01      	ldr	r3, [pc, #4]	; (153c4 <radio_tmr_ready_get+0x8>)
   153be:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   153c2:	4770      	bx	lr
   153c4:	40008000 	.word	0x40008000

000153c8 <radio_tmr_end_capture>:
   153c8:	4b02      	ldr	r3, [pc, #8]	; (153d4 <radio_tmr_end_capture+0xc>)
   153ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   153ce:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 */
#if defined(CONFIG_BT_CTLR_TIFS_HW) || !defined(CONFIG_SOC_SERIES_NRF53X)
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
#endif /* CONFIG_BT_CTLR_TIFS_HW || !CONFIG_SOC_SERIES_NRF53X */
}
   153d2:	4770      	bx	lr
   153d4:	4001f000 	.word	0x4001f000

000153d8 <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   153d8:	4b01      	ldr	r3, [pc, #4]	; (153e0 <radio_tmr_end_get+0x8>)
   153da:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   153de:	4770      	bx	lr
   153e0:	40008000 	.word	0x40008000

000153e4 <radio_tmr_tifs_base_get>:
   153e4:	4b01      	ldr	r3, [pc, #4]	; (153ec <radio_tmr_tifs_base_get+0x8>)
   153e6:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   153ea:	4770      	bx	lr
   153ec:	40008000 	.word	0x40008000

000153f0 <radio_ar_match_get>:
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   153f0:	4b01      	ldr	r3, [pc, #4]	; (153f8 <radio_ar_match_get+0x8>)
   153f2:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   153f6:	4770      	bx	lr
   153f8:	4000f000 	.word	0x4000f000

000153fc <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   153fc:	4a06      	ldr	r2, [pc, #24]	; (15418 <radio_ar_status_reset+0x1c>)
   153fe:	2300      	movs	r3, #0
   15400:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   15404:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   15408:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    p_reg->CHENCLR = mask;
   1540c:	4b03      	ldr	r3, [pc, #12]	; (1541c <radio_ar_status_reset+0x20>)
   1540e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   15412:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   15416:	4770      	bx	lr
   15418:	40001000 	.word	0x40001000
   1541c:	4001f000 	.word	0x4001f000

00015420 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   15420:	4b08      	ldr	r3, [pc, #32]	; (15444 <radio_ar_has_match+0x24>)
   15422:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   15426:	b160      	cbz	r0, 15442 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   15428:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   1542c:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   15430:	b138      	cbz	r0, 15442 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   15432:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   15436:	b120      	cbz	r0, 15442 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   15438:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   1543c:	fab0 f080 	clz	r0, r0
   15440:	0940      	lsrs	r0, r0, #5
}
   15442:	4770      	bx	lr
   15444:	40001000 	.word	0x40001000

00015448 <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   15448:	2902      	cmp	r1, #2
{
   1544a:	b510      	push	{r4, lr}
   1544c:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1544e:	d00b      	beq.n	15468 <mayfly_enable_cb+0x20>
   15450:	4a0a      	ldr	r2, [pc, #40]	; (1547c <mayfly_enable_cb+0x34>)
   15452:	490b      	ldr	r1, [pc, #44]	; (15480 <mayfly_enable_cb+0x38>)
   15454:	480b      	ldr	r0, [pc, #44]	; (15484 <mayfly_enable_cb+0x3c>)
   15456:	231e      	movs	r3, #30
   15458:	f003 fbb4 	bl	18bc4 <printk>
   1545c:	4040      	eors	r0, r0
   1545e:	f380 8811 	msr	BASEPRI, r0
   15462:	f04f 0003 	mov.w	r0, #3
   15466:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   15468:	200b      	movs	r0, #11
	if (enable) {
   1546a:	b11c      	cbz	r4, 15474 <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   1546c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   15470:	f7ed bf7c 	b.w	336c <arch_irq_enable>
}
   15474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   15478:	f7ed bf88 	b.w	338c <arch_irq_disable>
   1547c:	000232c6 	.word	0x000232c6
   15480:	00023314 	.word	0x00023314
   15484:	00020429 	.word	0x00020429

00015488 <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
   15488:	b508      	push	{r3, lr}
	(void)caller_id;

	switch (callee_id) {
   1548a:	b181      	cbz	r1, 154ae <mayfly_is_enabled+0x26>
   1548c:	3901      	subs	r1, #1
   1548e:	2901      	cmp	r1, #1
   15490:	d912      	bls.n	154b8 <mayfly_is_enabled+0x30>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   15492:	4a0a      	ldr	r2, [pc, #40]	; (154bc <mayfly_is_enabled+0x34>)
   15494:	490a      	ldr	r1, [pc, #40]	; (154c0 <mayfly_is_enabled+0x38>)
   15496:	480b      	ldr	r0, [pc, #44]	; (154c4 <mayfly_is_enabled+0x3c>)
   15498:	2336      	movs	r3, #54	; 0x36
   1549a:	f003 fb93 	bl	18bc4 <printk>
   1549e:	4040      	eors	r0, r0
   154a0:	f380 8811 	msr	BASEPRI, r0
   154a4:	f04f 0003 	mov.w	r0, #3
   154a8:	df02      	svc	2
		break;
	}

	return 0;
}
   154aa:	2000      	movs	r0, #0
   154ac:	bd08      	pop	{r3, pc}
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   154ae:	2018      	movs	r0, #24
}
   154b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   154b4:	f7ed bf7e 	b.w	33b4 <arch_irq_is_enabled>
   154b8:	200b      	movs	r0, #11
   154ba:	e7f9      	b.n	154b0 <mayfly_is_enabled+0x28>
   154bc:	000232c6 	.word	0x000232c6
   154c0:	000218fc 	.word	0x000218fc
   154c4:	00020429 	.word	0x00020429

000154c8 <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   154c8:	2901      	cmp	r1, #1
{
   154ca:	b508      	push	{r3, lr}
	switch (callee_id) {
   154cc:	d008      	beq.n	154e0 <mayfly_pend+0x18>
   154ce:	2902      	cmp	r1, #2
   154d0:	d006      	beq.n	154e0 <mayfly_pend+0x18>
   154d2:	b949      	cbnz	r1, 154e8 <mayfly_pend+0x20>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   154d4:	4b0b      	ldr	r3, [pc, #44]	; (15504 <mayfly_pend+0x3c>)
   154d6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   154da:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	default:
		LL_ASSERT(0);
		break;
	}
}
   154de:	bd08      	pop	{r3, pc}
   154e0:	4b08      	ldr	r3, [pc, #32]	; (15504 <mayfly_pend+0x3c>)
   154e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   154e6:	e7f8      	b.n	154da <mayfly_pend+0x12>
		LL_ASSERT(0);
   154e8:	4a07      	ldr	r2, [pc, #28]	; (15508 <mayfly_pend+0x40>)
   154ea:	4908      	ldr	r1, [pc, #32]	; (1550c <mayfly_pend+0x44>)
   154ec:	4808      	ldr	r0, [pc, #32]	; (15510 <mayfly_pend+0x48>)
   154ee:	2367      	movs	r3, #103	; 0x67
   154f0:	f003 fb68 	bl	18bc4 <printk>
   154f4:	4040      	eors	r0, r0
   154f6:	f380 8811 	msr	BASEPRI, r0
   154fa:	f04f 0003 	mov.w	r0, #3
   154fe:	df02      	svc	2
}
   15500:	e7ed      	b.n	154de <mayfly_pend+0x16>
   15502:	bf00      	nop
   15504:	e000e100 	.word	0xe000e100
   15508:	000232c6 	.word	0x000232c6
   1550c:	000218fc 	.word	0x000218fc
   15510:	00020429 	.word	0x00020429

00015514 <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   15514:	2803      	cmp	r0, #3
{
   15516:	b510      	push	{r4, lr}
   15518:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1551a:	d90b      	bls.n	15534 <hal_ticker_instance0_caller_id_get+0x20>
   1551c:	4a0e      	ldr	r2, [pc, #56]	; (15558 <hal_ticker_instance0_caller_id_get+0x44>)
   1551e:	490f      	ldr	r1, [pc, #60]	; (1555c <hal_ticker_instance0_caller_id_get+0x48>)
   15520:	480f      	ldr	r0, [pc, #60]	; (15560 <hal_ticker_instance0_caller_id_get+0x4c>)
   15522:	232b      	movs	r3, #43	; 0x2b
   15524:	f003 fb4e 	bl	18bc4 <printk>
   15528:	4040      	eors	r0, r0
   1552a:	f380 8811 	msr	BASEPRI, r0
   1552e:	f04f 0003 	mov.w	r0, #3
   15532:	df02      	svc	2

	caller_id = caller_id_lut[user_id];
   15534:	4b0b      	ldr	r3, [pc, #44]	; (15564 <hal_ticker_instance0_caller_id_get+0x50>)
   15536:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   15538:	b95c      	cbnz	r4, 15552 <hal_ticker_instance0_caller_id_get+0x3e>
   1553a:	4a07      	ldr	r2, [pc, #28]	; (15558 <hal_ticker_instance0_caller_id_get+0x44>)
   1553c:	490a      	ldr	r1, [pc, #40]	; (15568 <hal_ticker_instance0_caller_id_get+0x54>)
   1553e:	4808      	ldr	r0, [pc, #32]	; (15560 <hal_ticker_instance0_caller_id_get+0x4c>)
   15540:	232e      	movs	r3, #46	; 0x2e
   15542:	f003 fb3f 	bl	18bc4 <printk>
   15546:	4040      	eors	r0, r0
   15548:	f380 8811 	msr	BASEPRI, r0
   1554c:	f04f 0003 	mov.w	r0, #3
   15550:	df02      	svc	2

	return caller_id;
}
   15552:	4620      	mov	r0, r4
   15554:	bd10      	pop	{r4, pc}
   15556:	bf00      	nop
   15558:	00023336 	.word	0x00023336
   1555c:	00023384 	.word	0x00023384
   15560:	00020429 	.word	0x00020429
   15564:	000233c6 	.word	0x000233c6
   15568:	000233a4 	.word	0x000233a4

0001556c <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   1556c:	3801      	subs	r0, #1
{
   1556e:	b510      	push	{r4, lr}
   15570:	461c      	mov	r4, r3
	switch (caller_id) {
   15572:	2804      	cmp	r0, #4
   15574:	d845      	bhi.n	15602 <hal_ticker_instance0_sched+0x96>
   15576:	e8df f000 	tbb	[pc, r0]
   1557a:	1a03      	.short	0x1a03
   1557c:	2c23      	.short	0x2c23
   1557e:	3b          	.byte	0x3b
   1557f:	00          	.byte	0x00
	case TICKER_CALL_ID_ISR:
		switch (callee_id) {
   15580:	2904      	cmp	r1, #4
   15582:	d107      	bne.n	15594 <hal_ticker_instance0_sched+0x28>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;
   15584:	4b20      	ldr	r3, [pc, #128]	; (15608 <hal_ticker_instance0_sched+0x9c>)

			/* TODO: scheduler lock, if preemptive threads used */
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   15586:	2102      	movs	r1, #2
			m.param = instance;
   15588:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1558a:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
   1558c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   15590:	f7f8 bf56 	b.w	e440 <mayfly_enqueue>
			LL_ASSERT(0);
   15594:	234e      	movs	r3, #78	; 0x4e
		LL_ASSERT(0);
   15596:	4a1d      	ldr	r2, [pc, #116]	; (1560c <hal_ticker_instance0_sched+0xa0>)
   15598:	491d      	ldr	r1, [pc, #116]	; (15610 <hal_ticker_instance0_sched+0xa4>)
   1559a:	481e      	ldr	r0, [pc, #120]	; (15614 <hal_ticker_instance0_sched+0xa8>)
   1559c:	f003 fb12 	bl	18bc4 <printk>
   155a0:	4040      	eors	r0, r0
   155a2:	f380 8811 	msr	BASEPRI, r0
   155a6:	f04f 0003 	mov.w	r0, #3
   155aa:	df02      	svc	2
}
   155ac:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   155ae:	2903      	cmp	r1, #3
   155b0:	d104      	bne.n	155bc <hal_ticker_instance0_sched+0x50>
			m.param = instance;
   155b2:	4b19      	ldr	r3, [pc, #100]	; (15618 <hal_ticker_instance0_sched+0xac>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   155b4:	2101      	movs	r1, #1
			m.param = instance;
   155b6:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   155b8:	4608      	mov	r0, r1
   155ba:	e7e7      	b.n	1558c <hal_ticker_instance0_sched+0x20>
			LL_ASSERT(0);
   155bc:	2365      	movs	r3, #101	; 0x65
   155be:	e7ea      	b.n	15596 <hal_ticker_instance0_sched+0x2a>
		switch (callee_id) {
   155c0:	2904      	cmp	r1, #4
   155c2:	d104      	bne.n	155ce <hal_ticker_instance0_sched+0x62>
			m.param = instance;
   155c4:	4b15      	ldr	r3, [pc, #84]	; (1561c <hal_ticker_instance0_sched+0xb0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   155c6:	2102      	movs	r1, #2
			m.param = instance;
   155c8:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   155ca:	2001      	movs	r0, #1
   155cc:	e7de      	b.n	1558c <hal_ticker_instance0_sched+0x20>
			LL_ASSERT(0);
   155ce:	237c      	movs	r3, #124	; 0x7c
   155d0:	e7e1      	b.n	15596 <hal_ticker_instance0_sched+0x2a>
		switch (callee_id) {
   155d2:	2903      	cmp	r1, #3
   155d4:	d003      	beq.n	155de <hal_ticker_instance0_sched+0x72>
   155d6:	2904      	cmp	r1, #4
   155d8:	d006      	beq.n	155e8 <hal_ticker_instance0_sched+0x7c>
			LL_ASSERT(0);
   155da:	23a2      	movs	r3, #162	; 0xa2
   155dc:	e7db      	b.n	15596 <hal_ticker_instance0_sched+0x2a>
			m.param = instance;
   155de:	4b10      	ldr	r3, [pc, #64]	; (15620 <hal_ticker_instance0_sched+0xb4>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   155e0:	2101      	movs	r1, #1
			m.param = instance;
   155e2:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   155e4:	2002      	movs	r0, #2
   155e6:	e7d1      	b.n	1558c <hal_ticker_instance0_sched+0x20>
			m.param = instance;
   155e8:	4b0e      	ldr	r3, [pc, #56]	; (15624 <hal_ticker_instance0_sched+0xb8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   155ea:	2102      	movs	r1, #2
			m.param = instance;
   155ec:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   155ee:	e7e3      	b.n	155b8 <hal_ticker_instance0_sched+0x4c>
		switch (callee_id) {
   155f0:	2904      	cmp	r1, #4
   155f2:	d104      	bne.n	155fe <hal_ticker_instance0_sched+0x92>
			m.param = instance;
   155f4:	4b0c      	ldr	r3, [pc, #48]	; (15628 <hal_ticker_instance0_sched+0xbc>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   155f6:	2102      	movs	r1, #2
			m.param = instance;
   155f8:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   155fa:	2003      	movs	r0, #3
   155fc:	e7c6      	b.n	1558c <hal_ticker_instance0_sched+0x20>
			LL_ASSERT(0);
   155fe:	23ba      	movs	r3, #186	; 0xba
   15600:	e7c9      	b.n	15596 <hal_ticker_instance0_sched+0x2a>
		LL_ASSERT(0);
   15602:	23c0      	movs	r3, #192	; 0xc0
   15604:	e7c7      	b.n	15596 <hal_ticker_instance0_sched+0x2a>
   15606:	bf00      	nop
   15608:	2000096c 	.word	0x2000096c
   1560c:	00023336 	.word	0x00023336
   15610:	000218fc 	.word	0x000218fc
   15614:	00020429 	.word	0x00020429
   15618:	2000095c 	.word	0x2000095c
   1561c:	200009ac 	.word	0x200009ac
   15620:	2000099c 	.word	0x2000099c
   15624:	2000098c 	.word	0x2000098c
   15628:	2000097c 	.word	0x2000097c

0001562c <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1562c:	4b02      	ldr	r3, [pc, #8]	; (15638 <net_buf_pool_get+0xc>)
   1562e:	2228      	movs	r2, #40	; 0x28
   15630:	fb02 3000 	mla	r0, r2, r0, r3
   15634:	4770      	bx	lr
   15636:	bf00      	nop
   15638:	20000c10 	.word	0x20000c10

0001563c <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1563c:	7982      	ldrb	r2, [r0, #6]

	return buf - pool->__bufs;
   1563e:	4b05      	ldr	r3, [pc, #20]	; (15654 <net_buf_id+0x18>)
   15640:	2128      	movs	r1, #40	; 0x28
   15642:	fb01 3302 	mla	r3, r1, r2, r3
   15646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15648:	1ac0      	subs	r0, r0, r3
}
   1564a:	4b03      	ldr	r3, [pc, #12]	; (15658 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   1564c:	10c0      	asrs	r0, r0, #3
}
   1564e:	4358      	muls	r0, r3
   15650:	4770      	bx	lr
   15652:	bf00      	nop
   15654:	20000c10 	.word	0x20000c10
   15658:	aaaaaaab 	.word	0xaaaaaaab

0001565c <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1565c:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1565e:	4b0a      	ldr	r3, [pc, #40]	; (15688 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   15660:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   15662:	2428      	movs	r4, #40	; 0x28
   15664:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   15668:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1566a:	6a1b      	ldr	r3, [r3, #32]
   1566c:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1566e:	6823      	ldr	r3, [r4, #0]
   15670:	429a      	cmp	r2, r3
   15672:	bf94      	ite	ls
   15674:	600a      	strls	r2, [r1, #0]
   15676:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   15678:	f7ff ffe0 	bl	1563c <net_buf_id>
   1567c:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   15680:	fb02 3000 	mla	r0, r2, r0, r3
   15684:	bd10      	pop	{r4, pc}
   15686:	bf00      	nop
   15688:	20000c10 	.word	0x20000c10

0001568c <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1568c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15690:	4605      	mov	r5, r0
   15692:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   15694:	4610      	mov	r0, r2
   15696:	4619      	mov	r1, r3
{
   15698:	4691      	mov	r9, r2
   1569a:	4698      	mov	r8, r3
   1569c:	4617      	mov	r7, r2
   1569e:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   156a0:	f009 f992 	bl	1e9c8 <sys_clock_timeout_end_calc>
   156a4:	4682      	mov	sl, r0
   156a6:	468b      	mov	fp, r1
	__asm__ volatile(
   156a8:	f04f 0320 	mov.w	r3, #32
   156ac:	f3ef 8111 	mrs	r1, BASEPRI
   156b0:	f383 8812 	msr	BASEPRI_MAX, r3
   156b4:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   156b8:	8b6b      	ldrh	r3, [r5, #26]
   156ba:	2b00      	cmp	r3, #0
   156bc:	d055      	beq.n	1576a <net_buf_alloc_len+0xde>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   156be:	8b2a      	ldrh	r2, [r5, #24]
   156c0:	429a      	cmp	r2, r3
   156c2:	d93e      	bls.n	15742 <net_buf_alloc_len+0xb6>
   156c4:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   156c6:	2200      	movs	r2, #0
   156c8:	2300      	movs	r3, #0
   156ca:	4628      	mov	r0, r5
   156cc:	f002 f990 	bl	179f0 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   156d0:	9900      	ldr	r1, [sp, #0]
   156d2:	4604      	mov	r4, r0
   156d4:	2800      	cmp	r0, #0
   156d6:	d034      	beq.n	15742 <net_buf_alloc_len+0xb6>
	__asm__ volatile(
   156d8:	f381 8811 	msr	BASEPRI, r1
   156dc:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   156e0:	9b01      	ldr	r3, [sp, #4]
   156e2:	2b00      	cmp	r3, #0
   156e4:	d051      	beq.n	1578a <net_buf_alloc_len+0xfe>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   156e6:	ea58 0309 	orrs.w	r3, r8, r9
   156ea:	d00f      	beq.n	1570c <net_buf_alloc_len+0x80>
   156ec:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   156f0:	bf08      	it	eq
   156f2:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
   156f6:	d009      	beq.n	1570c <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   156f8:	f003 f888 	bl	1880c <sys_clock_tick_get>
   156fc:	ebba 0700 	subs.w	r7, sl, r0
   15700:	eb6b 0601 	sbc.w	r6, fp, r1
   15704:	2e00      	cmp	r6, #0
   15706:	bfbc      	itt	lt
   15708:	2700      	movlt	r7, #0
   1570a:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1570c:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1570e:	f8df 8090 	ldr.w	r8, [pc, #144]	; 157a0 <net_buf_alloc_len+0x114>
   15712:	2228      	movs	r2, #40	; 0x28
   15714:	fb02 8303 	mla	r3, r2, r3, r8
   15718:	a901      	add	r1, sp, #4
   1571a:	6a1b      	ldr	r3, [r3, #32]
   1571c:	681b      	ldr	r3, [r3, #0]
   1571e:	463a      	mov	r2, r7
   15720:	681d      	ldr	r5, [r3, #0]
   15722:	4620      	mov	r0, r4
   15724:	4633      	mov	r3, r6
   15726:	47a8      	blx	r5
   15728:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1572a:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1572c:	bb70      	cbnz	r0, 1578c <net_buf_alloc_len+0x100>
	k_lifo_put(&pool->free, buf);
   1572e:	79a0      	ldrb	r0, [r4, #6]
   15730:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   15734:	4621      	mov	r1, r4
   15736:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   1573a:	f008 fe93 	bl	1e464 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1573e:	462c      	mov	r4, r5
}
   15740:	e01f      	b.n	15782 <net_buf_alloc_len+0xf6>
		uninit_count = pool->uninit_count--;
   15742:	8b6b      	ldrh	r3, [r5, #26]
   15744:	1e5a      	subs	r2, r3, #1
   15746:	836a      	strh	r2, [r5, #26]
   15748:	f381 8811 	msr	BASEPRI, r1
   1574c:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   15750:	8b2c      	ldrh	r4, [r5, #24]
   15752:	1ae3      	subs	r3, r4, r3
   15754:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   15756:	2018      	movs	r0, #24
   15758:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   1575c:	4810      	ldr	r0, [pc, #64]	; (157a0 <net_buf_alloc_len+0x114>)
   1575e:	4b11      	ldr	r3, [pc, #68]	; (157a4 <net_buf_alloc_len+0x118>)
   15760:	1a2d      	subs	r5, r5, r0
   15762:	10ed      	asrs	r5, r5, #3
   15764:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   15766:	71a5      	strb	r5, [r4, #6]
		goto success;
   15768:	e7ba      	b.n	156e0 <net_buf_alloc_len+0x54>
   1576a:	f381 8811 	msr	BASEPRI, r1
   1576e:	f3bf 8f6f 	isb	sy
   15772:	464a      	mov	r2, r9
   15774:	4643      	mov	r3, r8
   15776:	4628      	mov	r0, r5
   15778:	f002 f93a 	bl	179f0 <z_impl_k_queue_get>
	if (!buf) {
   1577c:	4604      	mov	r4, r0
   1577e:	2800      	cmp	r0, #0
   15780:	d1ae      	bne.n	156e0 <net_buf_alloc_len+0x54>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   15782:	4620      	mov	r0, r4
   15784:	b003      	add	sp, #12
   15786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   1578a:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   1578c:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1578e:	2201      	movs	r2, #1
	buf->frags = NULL;
   15790:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   15792:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   15794:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   15796:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   15798:	6923      	ldr	r3, [r4, #16]
   1579a:	81e2      	strh	r2, [r4, #14]
   1579c:	60a3      	str	r3, [r4, #8]
	return buf;
   1579e:	e7f0      	b.n	15782 <net_buf_alloc_len+0xf6>
   157a0:	20000c10 	.word	0x20000c10
   157a4:	cccccccd 	.word	0xcccccccd

000157a8 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   157a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   157ac:	4d17      	ldr	r5, [pc, #92]	; (1580c <net_buf_unref+0x64>)
   157ae:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   157b0:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   157b2:	2728      	movs	r7, #40	; 0x28
	while (buf) {
   157b4:	b90c      	cbnz	r4, 157ba <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   157b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   157ba:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   157bc:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   157c0:	3b01      	subs	r3, #1
   157c2:	b2db      	uxtb	r3, r3
   157c4:	7123      	strb	r3, [r4, #4]
   157c6:	2b00      	cmp	r3, #0
   157c8:	d1f5      	bne.n	157b6 <net_buf_unref+0xe>
		if (buf->__buf) {
   157ca:	6921      	ldr	r1, [r4, #16]
   157cc:	b159      	cbz	r1, 157e6 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   157ce:	7963      	ldrb	r3, [r4, #5]
   157d0:	079b      	lsls	r3, r3, #30
   157d2:	d407      	bmi.n	157e4 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   157d4:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   157d6:	fb07 5303 	mla	r3, r7, r3, r5
   157da:	4620      	mov	r0, r4
   157dc:	6a1b      	ldr	r3, [r3, #32]
   157de:	681b      	ldr	r3, [r3, #0]
   157e0:	689b      	ldr	r3, [r3, #8]
   157e2:	4798      	blx	r3
			buf->__buf = NULL;
   157e4:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   157e6:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   157e8:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   157ea:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   157ee:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   157f0:	69db      	ldr	r3, [r3, #28]
   157f2:	b11b      	cbz	r3, 157fc <net_buf_unref+0x54>
			pool->destroy(buf);
   157f4:	4620      	mov	r0, r4
   157f6:	4798      	blx	r3
{
   157f8:	4644      	mov	r4, r8
   157fa:	e7db      	b.n	157b4 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   157fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   15800:	4621      	mov	r1, r4
   15802:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   15806:	f008 fe2d 	bl	1e464 <k_queue_prepend>
}
   1580a:	e7f5      	b.n	157f8 <net_buf_unref+0x50>
   1580c:	20000c10 	.word	0x20000c10

00015810 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   15810:	4b08      	ldr	r3, [pc, #32]	; (15834 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   15812:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   15814:	1ac3      	subs	r3, r0, r3
{
   15816:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   15818:	4907      	ldr	r1, [pc, #28]	; (15838 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   1581a:	109b      	asrs	r3, r3, #2
{
   1581c:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1581e:	4359      	muls	r1, r3
   15820:	4806      	ldr	r0, [pc, #24]	; (1583c <onoff_stop+0x2c>)
   15822:	2240      	movs	r2, #64	; 0x40
   15824:	f008 faa5 	bl	1dd72 <stop>
	notify(mgr, res);
   15828:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1582a:	4601      	mov	r1, r0
	notify(mgr, res);
   1582c:	4620      	mov	r0, r4
}
   1582e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   15832:	4718      	bx	r3
   15834:	20002bac 	.word	0x20002bac
   15838:	b6db6db7 	.word	0xb6db6db7
   1583c:	0001ebcc 	.word	0x0001ebcc

00015840 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   15840:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   15842:	4c0c      	ldr	r4, [pc, #48]	; (15874 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   15844:	4a0c      	ldr	r2, [pc, #48]	; (15878 <onoff_start+0x38>)
   15846:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   15848:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1584a:	9300      	str	r3, [sp, #0]
{
   1584c:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1584e:	460b      	mov	r3, r1
   15850:	490a      	ldr	r1, [pc, #40]	; (1587c <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   15852:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   15854:	4361      	muls	r1, r4
{
   15856:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   15858:	4809      	ldr	r0, [pc, #36]	; (15880 <onoff_start+0x40>)
   1585a:	f008 fab7 	bl	1ddcc <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1585e:	1e01      	subs	r1, r0, #0
   15860:	da05      	bge.n	1586e <onoff_start+0x2e>
		notify(mgr, err);
   15862:	4630      	mov	r0, r6
   15864:	462b      	mov	r3, r5
	}
}
   15866:	b002      	add	sp, #8
   15868:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   1586c:	4718      	bx	r3
}
   1586e:	b002      	add	sp, #8
   15870:	bd70      	pop	{r4, r5, r6, pc}
   15872:	bf00      	nop
   15874:	20002bac 	.word	0x20002bac
   15878:	0001de3b 	.word	0x0001de3b
   1587c:	b6db6db7 	.word	0xb6db6db7
   15880:	0001ebcc 	.word	0x0001ebcc

00015884 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   15884:	2200      	movs	r2, #0
{
   15886:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   15888:	2101      	movs	r1, #1
{
   1588a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1588c:	4610      	mov	r0, r2
   1588e:	f7ed fd9f 	bl	33d0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   15892:	2000      	movs	r0, #0
   15894:	f7ed fd6a 	bl	336c <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   15898:	480f      	ldr	r0, [pc, #60]	; (158d8 <clk_init+0x54>)
   1589a:	f001 fae9 	bl	16e70 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1589e:	4b0f      	ldr	r3, [pc, #60]	; (158dc <clk_init+0x58>)
   158a0:	4298      	cmp	r0, r3
   158a2:	d115      	bne.n	158d0 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   158a4:	f008 fbf0 	bl	1e088 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   158a8:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   158aa:	490d      	ldr	r1, [pc, #52]	; (158e0 <clk_init+0x5c>)
   158ac:	4630      	mov	r0, r6
   158ae:	f003 f9f2 	bl	18c96 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   158b2:	2800      	cmp	r0, #0
   158b4:	db0b      	blt.n	158ce <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
   158b6:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   158b8:	4909      	ldr	r1, [pc, #36]	; (158e0 <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   158ba:	2501      	movs	r5, #1
   158bc:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
   158be:	f104 001c 	add.w	r0, r4, #28
   158c2:	f003 f9e8 	bl	18c96 <onoff_manager_init>
		if (err < 0) {
   158c6:	2800      	cmp	r0, #0
   158c8:	db01      	blt.n	158ce <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   158ca:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   158cc:	2000      	movs	r0, #0
}
   158ce:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   158d0:	f06f 0004 	mvn.w	r0, #4
   158d4:	e7fb      	b.n	158ce <clk_init+0x4a>
   158d6:	bf00      	nop
   158d8:	00015919 	.word	0x00015919
   158dc:	0bad0000 	.word	0x0bad0000
   158e0:	0001f788 	.word	0x0001f788

000158e4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   158e4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   158e6:	230c      	movs	r3, #12
   158e8:	4809      	ldr	r0, [pc, #36]	; (15910 <clkstarted_handle.constprop.0+0x2c>)
   158ea:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   158ec:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   158ee:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   158f0:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   158f4:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   158f6:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   158f8:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   158fa:	4418      	add	r0, r3
   158fc:	f008 fa26 	bl	1dd4c <set_on_state>
	if (callback) {
   15900:	b12d      	cbz	r5, 1590e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   15902:	4632      	mov	r2, r6
   15904:	462b      	mov	r3, r5
   15906:	4803      	ldr	r0, [pc, #12]	; (15914 <clkstarted_handle.constprop.0+0x30>)
}
   15908:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1590c:	4718      	bx	r3
}
   1590e:	bd70      	pop	{r4, r5, r6, pc}
   15910:	20002bac 	.word	0x20002bac
   15914:	0001ebcc 	.word	0x0001ebcc

00015918 <clock_event_handler>:
	switch (event) {
   15918:	b110      	cbz	r0, 15920 <clock_event_handler+0x8>
   1591a:	2801      	cmp	r0, #1
   1591c:	d004      	beq.n	15928 <clock_event_handler+0x10>
   1591e:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   15920:	4b03      	ldr	r3, [pc, #12]	; (15930 <clock_event_handler+0x18>)
   15922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   15924:	075b      	lsls	r3, r3, #29
   15926:	d101      	bne.n	1592c <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   15928:	f7ff bfdc 	b.w	158e4 <clkstarted_handle.constprop.0>
}
   1592c:	4770      	bx	lr
   1592e:	bf00      	nop
   15930:	20002bac 	.word	0x20002bac

00015934 <generic_hfclk_start>:
{
   15934:	b508      	push	{r3, lr}
	__asm__ volatile(
   15936:	f04f 0320 	mov.w	r3, #32
   1593a:	f3ef 8111 	mrs	r1, BASEPRI
   1593e:	f383 8812 	msr	BASEPRI_MAX, r3
   15942:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   15946:	4a12      	ldr	r2, [pc, #72]	; (15990 <generic_hfclk_start+0x5c>)
   15948:	6813      	ldr	r3, [r2, #0]
   1594a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   1594e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   15952:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   15954:	d00c      	beq.n	15970 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   15956:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1595a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1595e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   15962:	f013 0301 	ands.w	r3, r3, #1
   15966:	d003      	beq.n	15970 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   15968:	480a      	ldr	r0, [pc, #40]	; (15994 <generic_hfclk_start+0x60>)
   1596a:	f008 f9ef 	bl	1dd4c <set_on_state>
			already_started = true;
   1596e:	2301      	movs	r3, #1
	__asm__ volatile(
   15970:	f381 8811 	msr	BASEPRI, r1
   15974:	f3bf 8f6f 	isb	sy
	if (already_started) {
   15978:	b123      	cbz	r3, 15984 <generic_hfclk_start+0x50>
}
   1597a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1597e:	2000      	movs	r0, #0
   15980:	f7ff bfb0 	b.w	158e4 <clkstarted_handle.constprop.0>
}
   15984:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   15988:	2001      	movs	r0, #1
   1598a:	f001 ba81 	b.w	16e90 <nrfx_clock_start>
   1598e:	bf00      	nop
   15990:	20002bfc 	.word	0x20002bfc
   15994:	20002bec 	.word	0x20002bec

00015998 <api_blocking_start>:
{
   15998:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1599a:	2200      	movs	r2, #0
   1599c:	2301      	movs	r3, #1
   1599e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   159a2:	ab04      	add	r3, sp, #16
   159a4:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   159a8:	4a09      	ldr	r2, [pc, #36]	; (159d0 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   159aa:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   159ae:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   159b0:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   159b4:	f008 fa3a 	bl	1de2c <api_start>
	if (err < 0) {
   159b8:	2800      	cmp	r0, #0
   159ba:	db05      	blt.n	159c8 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   159bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   159c0:	2300      	movs	r3, #0
   159c2:	4668      	mov	r0, sp
   159c4:	f002 f86e 	bl	17aa4 <z_impl_k_sem_take>
}
   159c8:	b007      	add	sp, #28
   159ca:	f85d fb04 	ldr.w	pc, [sp], #4
   159ce:	bf00      	nop
   159d0:	0001de53 	.word	0x0001de53

000159d4 <lfclk_start>:
{
   159d4:	b510      	push	{r4, lr}
	if (!once) {
   159d6:	4c07      	ldr	r4, [pc, #28]	; (159f4 <lfclk_start+0x20>)
   159d8:	7823      	ldrb	r3, [r4, #0]
   159da:	b92b      	cbnz	r3, 159e8 <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
   159dc:	f44f 70a5 	mov.w	r0, #330	; 0x14a
   159e0:	f008 ffee 	bl	1e9c0 <z_impl_k_busy_wait>
		once = true;
   159e4:	2301      	movs	r3, #1
   159e6:	7023      	strb	r3, [r4, #0]
}
   159e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   159ec:	2000      	movs	r0, #0
   159ee:	f001 ba4f 	b.w	16e90 <nrfx_clock_start>
   159f2:	bf00      	nop
   159f4:	20003011 	.word	0x20003011

000159f8 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   159f8:	4b09      	ldr	r3, [pc, #36]	; (15a20 <generic_hfclk_stop+0x28>)
   159fa:	f3bf 8f5b 	dmb	ish
   159fe:	e853 2f00 	ldrex	r2, [r3]
   15a02:	f022 0102 	bic.w	r1, r2, #2
   15a06:	e843 1000 	strex	r0, r1, [r3]
   15a0a:	2800      	cmp	r0, #0
   15a0c:	d1f7      	bne.n	159fe <generic_hfclk_stop+0x6>
   15a0e:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   15a12:	07d3      	lsls	r3, r2, #31
   15a14:	d402      	bmi.n	15a1c <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   15a16:	2001      	movs	r0, #1
   15a18:	f001 ba82 	b.w	16f20 <nrfx_clock_stop>
}
   15a1c:	4770      	bx	lr
   15a1e:	bf00      	nop
   15a20:	20002bfc 	.word	0x20002bfc

00015a24 <z_nrf_clock_control_get_onoff>:
}
   15a24:	4a02      	ldr	r2, [pc, #8]	; (15a30 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
   15a26:	b2c3      	uxtb	r3, r0
}
   15a28:	201c      	movs	r0, #28
   15a2a:	fb03 2000 	mla	r0, r3, r0, r2
   15a2e:	4770      	bx	lr
   15a30:	20002bac 	.word	0x20002bac

00015a34 <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15a34:	4b09      	ldr	r3, [pc, #36]	; (15a5c <z_nrf_clock_bt_ctlr_hf_request+0x28>)
   15a36:	f3bf 8f5b 	dmb	ish
   15a3a:	e853 2f00 	ldrex	r2, [r3]
   15a3e:	f042 0101 	orr.w	r1, r2, #1
   15a42:	e843 1000 	strex	r0, r1, [r3]
   15a46:	2800      	cmp	r0, #0
   15a48:	d1f7      	bne.n	15a3a <z_nrf_clock_bt_ctlr_hf_request+0x6>
   15a4a:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
   15a4e:	0793      	lsls	r3, r2, #30
   15a50:	d402      	bmi.n	15a58 <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   15a52:	2001      	movs	r0, #1
   15a54:	f001 ba1c 	b.w	16e90 <nrfx_clock_start>
}
   15a58:	4770      	bx	lr
   15a5a:	bf00      	nop
   15a5c:	20002bfc 	.word	0x20002bfc

00015a60 <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15a60:	4b09      	ldr	r3, [pc, #36]	; (15a88 <z_nrf_clock_bt_ctlr_hf_release+0x28>)
   15a62:	f3bf 8f5b 	dmb	ish
   15a66:	e853 2f00 	ldrex	r2, [r3]
   15a6a:	f022 0101 	bic.w	r1, r2, #1
   15a6e:	e843 1000 	strex	r0, r1, [r3]
   15a72:	2800      	cmp	r0, #0
   15a74:	d1f7      	bne.n	15a66 <z_nrf_clock_bt_ctlr_hf_release+0x6>
   15a76:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
   15a7a:	0793      	lsls	r3, r2, #30
   15a7c:	d402      	bmi.n	15a84 <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   15a7e:	2001      	movs	r0, #1
   15a80:	f001 ba4e 	b.w	16f20 <nrfx_clock_stop>
}
   15a84:	4770      	bx	lr
   15a86:	bf00      	nop
   15a88:	20002bfc 	.word	0x20002bfc

00015a8c <z_nrf_clock_control_lf_on>:
{
   15a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   15a90:	4939      	ldr	r1, [pc, #228]	; (15b78 <z_nrf_clock_control_lf_on+0xec>)
   15a92:	f3bf 8f5b 	dmb	ish
   15a96:	4607      	mov	r7, r0
   15a98:	2201      	movs	r2, #1
   15a9a:	e851 3f00 	ldrex	r3, [r1]
   15a9e:	e841 2000 	strex	r0, r2, [r1]
   15aa2:	2800      	cmp	r0, #0
   15aa4:	d1f9      	bne.n	15a9a <z_nrf_clock_control_lf_on+0xe>
   15aa6:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   15aaa:	b933      	cbnz	r3, 15aba <z_nrf_clock_control_lf_on+0x2e>
   15aac:	4933      	ldr	r1, [pc, #204]	; (15b7c <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
   15aae:	4834      	ldr	r0, [pc, #208]	; (15b80 <z_nrf_clock_control_lf_on+0xf4>)
   15ab0:	604b      	str	r3, [r1, #4]
   15ab2:	60cb      	str	r3, [r1, #12]
   15ab4:	608a      	str	r2, [r1, #8]
   15ab6:	f003 f901 	bl	18cbc <onoff_request>
	switch (start_mode) {
   15aba:	1e7b      	subs	r3, r7, #1
   15abc:	2b01      	cmp	r3, #1
   15abe:	d82f      	bhi.n	15b20 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   15ac0:	2f01      	cmp	r7, #1
   15ac2:	d107      	bne.n	15ad4 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   15ac4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   15ac8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   15acc:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   15ad0:	2b01      	cmp	r3, #1
   15ad2:	d025      	beq.n	15b20 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   15ad4:	f008 fc03 	bl	1e2de <k_is_in_isr>
   15ad8:	4604      	mov	r4, r0
   15ada:	b918      	cbnz	r0, 15ae4 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
   15adc:	4b29      	ldr	r3, [pc, #164]	; (15b84 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
   15ade:	781b      	ldrb	r3, [r3, #0]
   15ae0:	2b00      	cmp	r3, #0
   15ae2:	d141      	bne.n	15b68 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
   15ae4:	f04f 0320 	mov.w	r3, #32
   15ae8:	f3ef 8611 	mrs	r6, BASEPRI
   15aec:	f383 8812 	msr	BASEPRI_MAX, r3
   15af0:	f3bf 8f6f 	isb	sy
   15af4:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15af6:	f8df 8090 	ldr.w	r8, [pc, #144]	; 15b88 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   15afa:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   15afe:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   15b02:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   15b06:	03d2      	lsls	r2, r2, #15
   15b08:	d50c      	bpl.n	15b24 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   15b0a:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   15b0e:	2b01      	cmp	r3, #1
   15b10:	d001      	beq.n	15b16 <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   15b12:	2f01      	cmp	r7, #1
   15b14:	d106      	bne.n	15b24 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
   15b16:	b30c      	cbz	r4, 15b5c <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
   15b18:	f386 8811 	msr	BASEPRI, r6
   15b1c:	f3bf 8f6f 	isb	sy
}
   15b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   15b24:	b1ac      	cbz	r4, 15b52 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   15b26:	4630      	mov	r0, r6
   15b28:	f7ed fbde 	bl	32e8 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   15b2c:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   15b30:	2b00      	cmp	r3, #0
   15b32:	d1e4      	bne.n	15afe <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   15b34:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   15b38:	2a00      	cmp	r2, #0
   15b3a:	d0e0      	beq.n	15afe <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15b3c:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   15b40:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   15b44:	2301      	movs	r3, #1
   15b46:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
   15b4a:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15b4e:	60ab      	str	r3, [r5, #8]
}
   15b50:	e7d5      	b.n	15afe <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
   15b52:	2100      	movs	r1, #0
   15b54:	2021      	movs	r0, #33	; 0x21
   15b56:	f002 fc63 	bl	18420 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   15b5a:	e7e7      	b.n	15b2c <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
   15b5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   15b60:	2202      	movs	r2, #2
   15b62:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   15b66:	e7db      	b.n	15b20 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
   15b68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   15b6c:	2202      	movs	r2, #2
   15b6e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   15b72:	4606      	mov	r6, r0
}
   15b74:	e7bf      	b.n	15af6 <z_nrf_clock_control_lf_on+0x6a>
   15b76:	bf00      	nop
   15b78:	20002c00 	.word	0x20002c00
   15b7c:	20002b9c 	.word	0x20002b9c
   15b80:	20002bc8 	.word	0x20002bc8
   15b84:	20003424 	.word	0x20003424
   15b88:	e000e100 	.word	0xe000e100

00015b8c <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
   15b8c:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
   15b8e:	4c04      	ldr	r4, [pc, #16]	; (15ba0 <rtt_console_init+0x14>)
   15b90:	4620      	mov	r0, r4
   15b92:	f7ec f811 	bl	1bb8 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
   15b96:	4620      	mov	r0, r4
   15b98:	f7ee f892 	bl	3cc0 <__stdout_hook_install>

	return 0;
}
   15b9c:	2000      	movs	r0, #0
   15b9e:	bd10      	pop	{r4, pc}
   15ba0:	00015ba5 	.word	0x00015ba5

00015ba4 <rtt_console_out>:
{
   15ba4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   15ba8:	f8df 805c 	ldr.w	r8, [pc, #92]	; 15c08 <rtt_console_out+0x64>
   15bac:	4e17      	ldr	r6, [pc, #92]	; (15c0c <rtt_console_out+0x68>)
	char c = (char)character;
   15bae:	f88d 0007 	strb.w	r0, [sp, #7]
{
   15bb2:	4604      	mov	r4, r0
	char c = (char)character;
   15bb4:	2503      	movs	r5, #3
   15bb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15bba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15bbe:	4640      	mov	r0, r8
   15bc0:	f001 fe5c 	bl	1787c <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
   15bc4:	2201      	movs	r2, #1
   15bc6:	f10d 0107 	add.w	r1, sp, #7
   15bca:	2000      	movs	r0, #0
   15bcc:	f001 fb60 	bl	17290 <SEGGER_RTT_WriteNoLock>
   15bd0:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
   15bd2:	4640      	mov	r0, r8
   15bd4:	f001 feca 	bl	1796c <z_impl_k_mutex_unlock>
		if (cnt) {
   15bd8:	b12f      	cbz	r7, 15be6 <rtt_console_out+0x42>
			host_present = true;
   15bda:	2301      	movs	r3, #1
   15bdc:	7033      	strb	r3, [r6, #0]
}
   15bde:	4620      	mov	r0, r4
   15be0:	b002      	add	sp, #8
   15be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
   15be6:	7833      	ldrb	r3, [r6, #0]
   15be8:	2b00      	cmp	r3, #0
   15bea:	d0f8      	beq.n	15bde <rtt_console_out+0x3a>
			if (max_cnt) {
   15bec:	3d01      	subs	r5, #1
   15bee:	d008      	beq.n	15c02 <rtt_console_out+0x5e>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
   15bf0:	f008 fb75 	bl	1e2de <k_is_in_isr>
   15bf4:	2800      	cmp	r0, #0
   15bf6:	d1de      	bne.n	15bb6 <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
   15bf8:	2100      	movs	r1, #0
   15bfa:	2042      	movs	r0, #66	; 0x42
   15bfc:	f002 fc10 	bl	18420 <z_impl_k_sleep>
   15c00:	e7d9      	b.n	15bb6 <rtt_console_out+0x12>
				host_present = false;
   15c02:	7035      	strb	r5, [r6, #0]
   15c04:	e7eb      	b.n	15bde <rtt_console_out+0x3a>
   15c06:	bf00      	nop
   15c08:	20000b58 	.word	0x20000b58
   15c0c:	20003012 	.word	0x20003012

00015c10 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   15c10:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   15c12:	4b09      	ldr	r3, [pc, #36]	; (15c38 <gpio_nrfx_init+0x28>)
   15c14:	781a      	ldrb	r2, [r3, #0]
   15c16:	b96a      	cbnz	r2, 15c34 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   15c18:	2101      	movs	r1, #1
   15c1a:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   15c1c:	2006      	movs	r0, #6
   15c1e:	2105      	movs	r1, #5
   15c20:	f7ed fbd6 	bl	33d0 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   15c24:	2006      	movs	r0, #6
   15c26:	f7ed fba1 	bl	336c <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   15c2a:	4b04      	ldr	r3, [pc, #16]	; (15c3c <gpio_nrfx_init+0x2c>)
   15c2c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   15c30:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   15c34:	2000      	movs	r0, #0
   15c36:	bd08      	pop	{r3, pc}
   15c38:	20003013 	.word	0x20003013
   15c3c:	40006000 	.word	0x40006000

00015c40 <gpio_nrfx_pin_interrupt_configure>:
{
   15c40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15c42:	4617      	mov	r7, r2
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   15c44:	6842      	ldr	r2, [r0, #4]
	return port->data;
   15c46:	6906      	ldr	r6, [r0, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   15c48:	7a12      	ldrb	r2, [r2, #8]
   15c4a:	f001 041f 	and.w	r4, r1, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   15c4e:	f5b7 3fa0 	cmp.w	r7, #81920	; 0x14000
{
   15c52:	460d      	mov	r5, r1
   15c54:	ea44 1442 	orr.w	r4, r4, r2, lsl #5
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   15c58:	d10c      	bne.n	15c74 <gpio_nrfx_pin_interrupt_configure+0x34>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   15c5a:	f004 021f 	and.w	r2, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   15c5e:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   15c62:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   15c66:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   15c6a:	07d0      	lsls	r0, r2, #31
   15c6c:	d507      	bpl.n	15c7e <gpio_nrfx_pin_interrupt_configure+0x3e>
		return -ENOTSUP;
   15c6e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   15c72:	e09a      	b.n	15daa <gpio_nrfx_pin_interrupt_configure+0x16a>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   15c74:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
   15c78:	68f1      	ldr	r1, [r6, #12]
   15c7a:	f000 8098 	beq.w	15dae <gpio_nrfx_pin_interrupt_configure+0x16e>
   15c7e:	68f2      	ldr	r2, [r6, #12]
   15c80:	2101      	movs	r1, #1
   15c82:	40a9      	lsls	r1, r5
   15c84:	4311      	orrs	r1, r2
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   15c86:	6972      	ldr	r2, [r6, #20]
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   15c88:	60f1      	str	r1, [r6, #12]
   15c8a:	2101      	movs	r1, #1
   15c8c:	40a9      	lsls	r1, r5
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   15c8e:	f5b7 3fa0 	cmp.w	r7, #81920	; 0x14000
   15c92:	bf0c      	ite	eq
   15c94:	430a      	orreq	r2, r1
   15c96:	438a      	bicne	r2, r1
   15c98:	6172      	str	r2, [r6, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   15c9a:	69b2      	ldr	r2, [r6, #24]
   15c9c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   15ca0:	bf0c      	ite	eq
   15ca2:	430a      	orreq	r2, r1
   15ca4:	438a      	bicne	r2, r1
   15ca6:	61b2      	str	r2, [r6, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   15ca8:	6932      	ldr	r2, [r6, #16]
   15caa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   15cae:	bf0c      	ite	eq
   15cb0:	4311      	orreq	r1, r2
   15cb2:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   15cb6:	4a4a      	ldr	r2, [pc, #296]	; (15de0 <gpio_nrfx_pin_interrupt_configure+0x1a0>)
   15cb8:	6131      	str	r1, [r6, #16]
   15cba:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   15cbe:	2000      	movs	r0, #0
   15cc0:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   15cc2:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   15cc6:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   15cca:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   15cce:	428c      	cmp	r4, r1
   15cd0:	d172      	bne.n	15db8 <gpio_nrfx_pin_interrupt_configure+0x178>
		    && (intenset & BIT(i))) {
   15cd2:	fa23 f100 	lsr.w	r1, r3, r0
   15cd6:	07c9      	lsls	r1, r1, #31
   15cd8:	d56e      	bpl.n	15db8 <gpio_nrfx_pin_interrupt_configure+0x178>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   15cda:	0083      	lsls	r3, r0, #2
   15cdc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   15ce0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   15ce4:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   15ce8:	f021 0101 	bic.w	r1, r1, #1
   15cec:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   15cf0:	2301      	movs	r3, #1
   15cf2:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   15cf4:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   15cf8:	b2c0      	uxtb	r0, r0
   15cfa:	f001 f981 	bl	17000 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   15cfe:	4620      	mov	r0, r4
   15d00:	2100      	movs	r1, #0
   15d02:	f008 f8a9 	bl	1de58 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   15d06:	68f0      	ldr	r0, [r6, #12]
   15d08:	40e8      	lsrs	r0, r5
   15d0a:	f010 0001 	ands.w	r0, r0, #1
   15d0e:	d04c      	beq.n	15daa <gpio_nrfx_pin_interrupt_configure+0x16a>
		if (data->trig_edge & BIT(pin)) {
   15d10:	6970      	ldr	r0, [r6, #20]
   15d12:	40e8      	lsrs	r0, r5
   15d14:	f010 0201 	ands.w	r2, r0, #1
   15d18:	d055      	beq.n	15dc6 <gpio_nrfx_pin_interrupt_configure+0x186>
				if (data->double_edge & BIT(pin)) {
   15d1a:	69b3      	ldr	r3, [r6, #24]
   15d1c:	40eb      	lsrs	r3, r5
   15d1e:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   15d20:	bf5f      	itttt	pl
   15d22:	6931      	ldrpl	r1, [r6, #16]
   15d24:	fa21 f505 	lsrpl.w	r5, r1, r5
   15d28:	f005 0501 	andpl.w	r5, r5, #1
   15d2c:	f1c5 0502 	rsbpl	r5, r5, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   15d30:	f10d 0007 	add.w	r0, sp, #7
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   15d34:	bf54      	ite	pl
   15d36:	b2ed      	uxtbpl	r5, r5
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
   15d38:	2503      	movmi	r5, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   15d3a:	f001 f981 	bl	17040 <nrfx_gpiote_channel_alloc>
   15d3e:	4b29      	ldr	r3, [pc, #164]	; (15de4 <gpio_nrfx_pin_interrupt_configure+0x1a4>)
   15d40:	4298      	cmp	r0, r3
   15d42:	d13d      	bne.n	15dc0 <gpio_nrfx_pin_interrupt_configure+0x180>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   15d44:	f89d 2007 	ldrb.w	r2, [sp, #7]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   15d48:	0093      	lsls	r3, r2, #2
   15d4a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   15d4e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   15d52:	0224      	lsls	r4, r4, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   15d54:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   15d58:	f421 3147 	bic.w	r1, r1, #203776	; 0x31c00
   15d5c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
   15d60:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   15d64:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   15d68:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
   15d6c:	430c      	orrs	r4, r1
   15d6e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   15d72:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   15d76:	0093      	lsls	r3, r2, #2
   15d78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   15d7c:	f503 43c2 	add.w	r3, r3, #24832	; 0x6100
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15d80:	2000      	movs	r0, #0
   15d82:	6018      	str	r0, [r3, #0]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
   15d84:	f89d 1007 	ldrb.w	r1, [sp, #7]
   15d88:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   15d8a:	008b      	lsls	r3, r1, #2
   15d8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   15d90:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   15d94:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   15d98:	f042 0201 	orr.w	r2, r2, #1
   15d9c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
   15da0:	4a0f      	ldr	r2, [pc, #60]	; (15de0 <gpio_nrfx_pin_interrupt_configure+0x1a0>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   15da2:	2301      	movs	r3, #1
   15da4:	408b      	lsls	r3, r1
   15da6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   15daa:	b003      	add	sp, #12
   15dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   15dae:	2201      	movs	r2, #1
   15db0:	40aa      	lsls	r2, r5
   15db2:	ea21 0102 	bic.w	r1, r1, r2
   15db6:	e766      	b.n	15c86 <gpio_nrfx_pin_interrupt_configure+0x46>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   15db8:	3001      	adds	r0, #1
   15dba:	2808      	cmp	r0, #8
   15dbc:	d181      	bne.n	15cc2 <gpio_nrfx_pin_interrupt_configure+0x82>
   15dbe:	e79e      	b.n	15cfe <gpio_nrfx_pin_interrupt_configure+0xbe>
		return -ENODEV;
   15dc0:	f06f 0012 	mvn.w	r0, #18
   15dc4:	e7f1      	b.n	15daa <gpio_nrfx_pin_interrupt_configure+0x16a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   15dc6:	6931      	ldr	r1, [r6, #16]
   15dc8:	40e9      	lsrs	r1, r5
   15dca:	f001 0101 	and.w	r1, r1, #1
   15dce:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   15dd2:	4620      	mov	r0, r4
   15dd4:	b2c9      	uxtb	r1, r1
   15dd6:	f008 f83f 	bl	1de58 <nrf_gpio_cfg_sense_set>
	int res = 0;
   15dda:	4610      	mov	r0, r2
   15ddc:	e7e5      	b.n	15daa <gpio_nrfx_pin_interrupt_configure+0x16a>
   15dde:	bf00      	nop
   15de0:	40006000 	.word	0x40006000
   15de4:	0bad0000 	.word	0x0bad0000

00015de8 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15de8:	4b2a      	ldr	r3, [pc, #168]	; (15e94 <gpio_nrfx_config+0xac>)
{
   15dea:	b570      	push	{r4, r5, r6, lr}
	return port->config;
   15dec:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15dee:	482a      	ldr	r0, [pc, #168]	; (15e98 <gpio_nrfx_config+0xb0>)
   15df0:	4013      	ands	r3, r2
   15df2:	4283      	cmp	r3, r0
   15df4:	d03e      	beq.n	15e74 <gpio_nrfx_config+0x8c>
   15df6:	d80d      	bhi.n	15e14 <gpio_nrfx_config+0x2c>
   15df8:	2b06      	cmp	r3, #6
   15dfa:	d015      	beq.n	15e28 <gpio_nrfx_config+0x40>
   15dfc:	d805      	bhi.n	15e0a <gpio_nrfx_config+0x22>
   15dfe:	b19b      	cbz	r3, 15e28 <gpio_nrfx_config+0x40>
   15e00:	2b02      	cmp	r3, #2
   15e02:	d039      	beq.n	15e78 <gpio_nrfx_config+0x90>
   15e04:	f06f 0015 	mvn.w	r0, #21
   15e08:	e033      	b.n	15e72 <gpio_nrfx_config+0x8a>
   15e0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   15e0e:	d1f9      	bne.n	15e04 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   15e10:	2301      	movs	r3, #1
   15e12:	e009      	b.n	15e28 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15e14:	4821      	ldr	r0, [pc, #132]	; (15e9c <gpio_nrfx_config+0xb4>)
   15e16:	4283      	cmp	r3, r0
   15e18:	d030      	beq.n	15e7c <gpio_nrfx_config+0x94>
   15e1a:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   15e1e:	d02f      	beq.n	15e80 <gpio_nrfx_config+0x98>
   15e20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   15e24:	d1ee      	bne.n	15e04 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   15e26:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   15e28:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
   15e2a:	bf54      	ite	pl
   15e2c:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   15e30:	2503      	movmi	r5, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   15e32:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   15e36:	f412 7f00 	tst.w	r2, #512	; 0x200
	dir = ((flags & GPIO_OUTPUT) != 0)
   15e3a:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   15e3e:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   15e42:	d007      	beq.n	15e54 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   15e44:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   15e48:	6876      	ldr	r6, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   15e4a:	d01b      	beq.n	15e84 <gpio_nrfx_config+0x9c>
			nrf_gpio_port_out_set(reg, BIT(pin));
   15e4c:	2201      	movs	r2, #1
   15e4e:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   15e50:	f8c6 2508 	str.w	r2, [r6, #1288]	; 0x508
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   15e54:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
    *p_pin = pin_number & 0x1F;
   15e58:	f001 011f 	and.w	r1, r1, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   15e5c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   15e60:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
   15e64:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   15e68:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   15e6c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
   15e70:	2000      	movs	r0, #0
}
   15e72:	bd70      	pop	{r4, r5, r6, pc}
		drive = NRF_GPIO_PIN_H0D1;
   15e74:	2307      	movs	r3, #7
   15e76:	e7d7      	b.n	15e28 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   15e78:	2304      	movs	r3, #4
   15e7a:	e7d5      	b.n	15e28 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   15e7c:	2305      	movs	r3, #5
   15e7e:	e7d3      	b.n	15e28 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   15e80:	2303      	movs	r3, #3
   15e82:	e7d1      	b.n	15e28 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   15e84:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   15e86:	bf42      	ittt	mi
   15e88:	2201      	movmi	r2, #1
   15e8a:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   15e8c:	f8c6 250c 	strmi.w	r2, [r6, #1292]	; 0x50c
}
   15e90:	e7e0      	b.n	15e54 <gpio_nrfx_config+0x6c>
   15e92:	bf00      	nop
   15e94:	00f00006 	.word	0x00f00006
   15e98:	00100006 	.word	0x00100006
   15e9c:	00400002 	.word	0x00400002

00015ea0 <gpiote_event_handler>:
{
   15ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15ea4:	4b41      	ldr	r3, [pc, #260]	; (15fac <gpiote_event_handler+0x10c>)
   15ea6:	f8d3 517c 	ldr.w	r5, [r3, #380]	; 0x17c
	if (port_event) {
   15eaa:	2d00      	cmp	r5, #0
   15eac:	d059      	beq.n	15f62 <gpiote_event_handler+0xc2>
	uint32_t out = data->pin_int_en;
   15eae:	4b40      	ldr	r3, [pc, #256]	; (15fb0 <gpiote_event_handler+0x110>)
    return p_reg->IN;
   15eb0:	f04f 49a0 	mov.w	r9, #1342177280	; 0x50000000
	out &= ~data->trig_edge & ~data->double_edge;
   15eb4:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
	uint32_t out = data->pin_int_en;
   15eb8:	68df      	ldr	r7, [r3, #12]
   15eba:	f8d9 4510 	ldr.w	r4, [r9, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   15ebe:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
   15ec0:	430a      	orrs	r2, r1
   15ec2:	ea27 0702 	bic.w	r7, r7, r2
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   15ec6:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
   15ec8:	ea27 0404 	bic.w	r4, r7, r4
	uint32_t check_pins = level_pins;
   15ecc:	463a      	mov	r2, r7
	uint32_t bit = 1U << pin;
   15ece:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   15ed0:	f04f 0800 	mov.w	r8, #0
	while (check_pins) {
   15ed4:	bb82      	cbnz	r2, 15f38 <gpiote_event_handler+0x98>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15ed6:	4b35      	ldr	r3, [pc, #212]	; (15fac <gpiote_event_handler+0x10c>)
   15ed8:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   15edc:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   15ee0:	4a34      	ldr	r2, [pc, #208]	; (15fb4 <gpiote_event_handler+0x114>)
    return p_reg->INTENSET & mask;
   15ee2:	4832      	ldr	r0, [pc, #200]	; (15fac <gpiote_event_handler+0x10c>)
   15ee4:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   15ee6:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15ee8:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   15eea:	f8d0 1304 	ldr.w	r1, [r0, #772]	; 0x304
   15eee:	fa06 fc03 	lsl.w	ip, r6, r3
   15ef2:	ea1c 0f01 	tst.w	ip, r1
   15ef6:	d00c      	beq.n	15f12 <gpiote_event_handler+0x72>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15ef8:	6811      	ldr	r1, [r2, #0]
   15efa:	b151      	cbz	r1, 15f12 <gpiote_event_handler+0x72>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   15efc:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   15f00:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15f04:	6017      	str	r7, [r2, #0]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   15f06:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   15f0a:	fa06 f101 	lsl.w	r1, r6, r1
   15f0e:	430c      	orrs	r4, r1
   15f10:	6811      	ldr	r1, [r2, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   15f12:	3301      	adds	r3, #1
   15f14:	2b08      	cmp	r3, #8
   15f16:	f102 0204 	add.w	r2, r2, #4
   15f1a:	d1e6      	bne.n	15eea <gpiote_event_handler+0x4a>
	if (fired_triggers[0]) {
   15f1c:	bb1c      	cbnz	r4, 15f66 <gpiote_event_handler+0xc6>
	if (port_event) {
   15f1e:	b14d      	cbz	r5, 15f34 <gpiote_event_handler+0x94>
	uint32_t out = data->pin_int_en;
   15f20:	4e23      	ldr	r6, [pc, #140]	; (15fb0 <gpiote_event_handler+0x110>)
	out &= ~data->trig_edge & ~data->double_edge;
   15f22:	e9d6 3105 	ldrd	r3, r1, [r6, #20]
	uint32_t out = data->pin_int_en;
   15f26:	68f2      	ldr	r2, [r6, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   15f28:	430b      	orrs	r3, r1
   15f2a:	ea22 0203 	bic.w	r2, r2, r3
	uint32_t bit = 1U << pin;
   15f2e:	2401      	movs	r4, #1
	uint32_t pin = 0U;
   15f30:	2500      	movs	r5, #0
	while (level_pins) {
   15f32:	bb4a      	cbnz	r2, 15f88 <gpiote_event_handler+0xe8>
}
   15f34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (check_pins & bit) {
   15f38:	4216      	tst	r6, r2
   15f3a:	d00e      	beq.n	15f5a <gpiote_event_handler+0xba>
			if (!(level_pins & bit)) {
   15f3c:	423e      	tst	r6, r7
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   15f3e:	f008 001f 	and.w	r0, r8, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   15f42:	bf08      	it	eq
   15f44:	f500 73e0 	addeq.w	r3, r0, #448	; 0x1c0
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   15f48:	f04f 0100 	mov.w	r1, #0
   15f4c:	bf08      	it	eq
   15f4e:	f859 3023 	ldreq.w	r3, [r9, r3, lsl #2]
   15f52:	f007 ff81 	bl	1de58 <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
   15f56:	ea22 0206 	bic.w	r2, r2, r6
		++pin;
   15f5a:	f108 0801 	add.w	r8, r8, #1
		bit <<= 1;
   15f5e:	0076      	lsls	r6, r6, #1
   15f60:	e7b8      	b.n	15ed4 <gpiote_event_handler+0x34>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   15f62:	462c      	mov	r4, r5
   15f64:	e7bc      	b.n	15ee0 <gpiote_event_handler+0x40>
	gpio_fire_callbacks(list, port, pins);
   15f66:	4b12      	ldr	r3, [pc, #72]	; (15fb0 <gpiote_event_handler+0x110>)
   15f68:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   15f6a:	2900      	cmp	r1, #0
   15f6c:	d0d7      	beq.n	15f1e <gpiote_event_handler+0x7e>
	return node->next;
   15f6e:	680e      	ldr	r6, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   15f70:	4f11      	ldr	r7, [pc, #68]	; (15fb8 <gpiote_event_handler+0x118>)
		if (cb->pin_mask & pins) {
   15f72:	688a      	ldr	r2, [r1, #8]
   15f74:	4022      	ands	r2, r4
   15f76:	d002      	beq.n	15f7e <gpiote_event_handler+0xde>
			cb->handler(port, cb, cb->pin_mask & pins);
   15f78:	684b      	ldr	r3, [r1, #4]
   15f7a:	4638      	mov	r0, r7
   15f7c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   15f7e:	2e00      	cmp	r6, #0
   15f80:	d0cd      	beq.n	15f1e <gpiote_event_handler+0x7e>
   15f82:	4631      	mov	r1, r6
   15f84:	6836      	ldr	r6, [r6, #0]
   15f86:	e7f4      	b.n	15f72 <gpiote_event_handler+0xd2>
		if (level_pins & bit) {
   15f88:	4214      	tst	r4, r2
   15f8a:	d00c      	beq.n	15fa6 <gpiote_event_handler+0x106>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   15f8c:	6931      	ldr	r1, [r6, #16]
   15f8e:	40e9      	lsrs	r1, r5
   15f90:	f001 0101 	and.w	r1, r1, #1
   15f94:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   15f98:	b2c9      	uxtb	r1, r1
   15f9a:	f005 001f 	and.w	r0, r5, #31
   15f9e:	f007 ff5b 	bl	1de58 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   15fa2:	ea22 0204 	bic.w	r2, r2, r4
		++pin;
   15fa6:	3501      	adds	r5, #1
		bit <<= 1;
   15fa8:	0064      	lsls	r4, r4, #1
   15faa:	e7c2      	b.n	15f32 <gpiote_event_handler+0x92>
   15fac:	40006000 	.word	0x40006000
   15fb0:	20002c04 	.word	0x20002c04
   15fb4:	40006100 	.word	0x40006100
   15fb8:	0001ec2c 	.word	0x0001ec2c

00015fbc <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   15fbc:	4b02      	ldr	r3, [pc, #8]	; (15fc8 <flash_nrf_pages_layout+0xc>)
   15fbe:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   15fc0:	2301      	movs	r3, #1
   15fc2:	6013      	str	r3, [r2, #0]
}
   15fc4:	4770      	bx	lr
   15fc6:	bf00      	nop
   15fc8:	20002c20 	.word	0x20002c20

00015fcc <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   15fcc:	4800      	ldr	r0, [pc, #0]	; (15fd0 <flash_nrf_get_parameters+0x4>)
   15fce:	4770      	bx	lr
   15fd0:	0001f7dc 	.word	0x0001f7dc

00015fd4 <flash_nrf_read>:
{
   15fd4:	b570      	push	{r4, r5, r6, lr}
   15fd6:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   15fd8:	4628      	mov	r0, r5
   15fda:	4619      	mov	r1, r3
{
   15fdc:	4616      	mov	r6, r2
   15fde:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   15fe0:	f007 ff99 	bl	1df16 <is_regular_addr_valid>
   15fe4:	b970      	cbnz	r0, 16004 <flash_nrf_read+0x30>
   15fe6:	4a0c      	ldr	r2, [pc, #48]	; (16018 <flash_nrf_read+0x44>)
   15fe8:	4b0c      	ldr	r3, [pc, #48]	; (1601c <flash_nrf_read+0x48>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   15fea:	480d      	ldr	r0, [pc, #52]	; (16020 <flash_nrf_read+0x4c>)
   15fec:	1a9b      	subs	r3, r3, r2
   15fee:	08db      	lsrs	r3, r3, #3
   15ff0:	019b      	lsls	r3, r3, #6
   15ff2:	f043 0301 	orr.w	r3, r3, #1
   15ff6:	4622      	mov	r2, r4
   15ff8:	4629      	mov	r1, r5
   15ffa:	f003 fa43 	bl	19484 <log_2>
		return -EINVAL;
   15ffe:	f06f 0015 	mvn.w	r0, #21
}
   16002:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
   16004:	b134      	cbz	r4, 16014 <flash_nrf_read+0x40>
	memcpy(data, (void *)addr, len);
   16006:	4622      	mov	r2, r4
   16008:	4629      	mov	r1, r5
   1600a:	4630      	mov	r0, r6
   1600c:	f004 f937 	bl	1a27e <memcpy>
	return 0;
   16010:	2000      	movs	r0, #0
   16012:	e7f6      	b.n	16002 <flash_nrf_read+0x2e>
		return 0;
   16014:	4620      	mov	r0, r4
   16016:	e7f4      	b.n	16002 <flash_nrf_read+0x2e>
   16018:	0001ef2c 	.word	0x0001ef2c
   1601c:	0001f11c 	.word	0x0001f11c
   16020:	000233f9 	.word	0x000233f9

00016024 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   16024:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   16026:	2201      	movs	r2, #1
   16028:	4611      	mov	r1, r2
   1602a:	4807      	ldr	r0, [pc, #28]	; (16048 <nrf_flash_init+0x24>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1602c:	4c07      	ldr	r4, [pc, #28]	; (1604c <nrf_flash_init+0x28>)
   1602e:	f008 fa5f 	bl	1e4f0 <z_impl_k_sem_init>
	nrf_flash_sync_init();
   16032:	f000 f981 	bl	16338 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   16036:	f008 f83b 	bl	1e0b0 <nrfx_nvmc_flash_page_count_get>
   1603a:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1603c:	f008 f834 	bl	1e0a8 <nrfx_nvmc_flash_page_size_get>
   16040:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   16042:	2000      	movs	r0, #0
   16044:	bd10      	pop	{r4, pc}
   16046:	bf00      	nop
   16048:	20002c28 	.word	0x20002c28
   1604c:	20002c20 	.word	0x20002c20

00016050 <flash_nrf_erase>:
{
   16050:	b5f0      	push	{r4, r5, r6, r7, lr}
   16052:	b087      	sub	sp, #28
   16054:	460e      	mov	r6, r1
   16056:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   16058:	f008 f826 	bl	1e0a8 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   1605c:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1605e:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   16060:	4630      	mov	r0, r6
   16062:	f007 ff58 	bl	1df16 <is_regular_addr_valid>
   16066:	b388      	cbz	r0, 160cc <flash_nrf_erase+0x7c>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   16068:	fbb6 f3f7 	udiv	r3, r6, r7
   1606c:	fb07 6313 	mls	r3, r7, r3, r6
   16070:	b923      	cbnz	r3, 1607c <flash_nrf_erase+0x2c>
   16072:	fbb5 f4f7 	udiv	r4, r5, r7
   16076:	fb07 5414 	mls	r4, r7, r4, r5
   1607a:	b184      	cbz	r4, 1609e <flash_nrf_erase+0x4e>
   1607c:	4a25      	ldr	r2, [pc, #148]	; (16114 <flash_nrf_erase+0xc4>)
   1607e:	4b26      	ldr	r3, [pc, #152]	; (16118 <flash_nrf_erase+0xc8>)
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   16080:	4826      	ldr	r0, [pc, #152]	; (1611c <flash_nrf_erase+0xcc>)
   16082:	1a9b      	subs	r3, r3, r2
   16084:	08db      	lsrs	r3, r3, #3
   16086:	019b      	lsls	r3, r3, #6
   16088:	f043 0301 	orr.w	r3, r3, #1
   1608c:	462a      	mov	r2, r5
   1608e:	4631      	mov	r1, r6
		LOG_ERR("invalid address: 0x%08lx:%zu",
   16090:	f003 f9f8 	bl	19484 <log_2>
		return -EINVAL;
   16094:	f06f 0415 	mvn.w	r4, #21
}
   16098:	4620      	mov	r0, r4
   1609a:	b007      	add	sp, #28
   1609c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!n_pages) {
   1609e:	42bd      	cmp	r5, r7
   160a0:	d3fa      	bcc.n	16098 <flash_nrf_erase+0x48>
	return z_impl_k_sem_take(sem, timeout);
   160a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   160a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   160aa:	481d      	ldr	r0, [pc, #116]	; (16120 <flash_nrf_erase+0xd0>)
   160ac:	f001 fcfa 	bl	17aa4 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   160b0:	f007 ff68 	bl	1df84 <nrf_flash_sync_is_required>
   160b4:	ab02      	add	r3, sp, #8
   160b6:	4601      	mov	r1, r0
   160b8:	b998      	cbnz	r0, 160e2 <flash_nrf_erase+0x92>
	return FLASH_OP_DONE;
}

static int erase(uint32_t addr, uint32_t size)
{
	struct flash_context context = {
   160ba:	2210      	movs	r2, #16
   160bc:	4618      	mov	r0, r3
   160be:	f004 f8e9 	bl	1a294 <memset>
   160c2:	e9cd 6503 	strd	r6, r5, [sp, #12]
#if defined(CONFIG_SOC_FLASH_NRF_PARTIAL_ERASE)
		.flash_addr_next = addr
#endif
	};

	return	erase_op(&context);
   160c6:	f007 ff39 	bl	1df3c <erase_op>
   160ca:	e01d      	b.n	16108 <flash_nrf_erase+0xb8>
   160cc:	4a11      	ldr	r2, [pc, #68]	; (16114 <flash_nrf_erase+0xc4>)
   160ce:	4b12      	ldr	r3, [pc, #72]	; (16118 <flash_nrf_erase+0xc8>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   160d0:	4814      	ldr	r0, [pc, #80]	; (16124 <flash_nrf_erase+0xd4>)
   160d2:	1a9b      	subs	r3, r3, r2
   160d4:	08db      	lsrs	r3, r3, #3
   160d6:	019b      	lsls	r3, r3, #6
   160d8:	f043 0301 	orr.w	r3, r3, #1
   160dc:	462a      	mov	r2, r5
   160de:	4631      	mov	r1, r6
   160e0:	e7d6      	b.n	16090 <flash_nrf_erase+0x40>
	struct flash_context context = {
   160e2:	2210      	movs	r2, #16
   160e4:	4621      	mov	r1, r4
   160e6:	4618      	mov	r0, r3
   160e8:	f004 f8d4 	bl	1a294 <memset>
   160ec:	2201      	movs	r2, #1
   160ee:	f88d 2014 	strb.w	r2, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   160f2:	4a0d      	ldr	r2, [pc, #52]	; (16128 <flash_nrf_erase+0xd8>)
   160f4:	e9cd 2000 	strd	r2, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   160f8:	480c      	ldr	r0, [pc, #48]	; (1612c <flash_nrf_erase+0xdc>)
	struct flash_context context = {
   160fa:	e9cd 6503 	strd	r6, r5, [sp, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   160fe:	f000 f925 	bl	1634c <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   16102:	4668      	mov	r0, sp
   16104:	f7eb fb28 	bl	1758 <nrf_flash_sync_exe>
	return	erase_op(&context);
   16108:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1610a:	4805      	ldr	r0, [pc, #20]	; (16120 <flash_nrf_erase+0xd0>)
   1610c:	f001 fca4 	bl	17a58 <z_impl_k_sem_give>
}
   16110:	e7c2      	b.n	16098 <flash_nrf_erase+0x48>
   16112:	bf00      	nop
   16114:	0001ef2c 	.word	0x0001ef2c
   16118:	0001f11c 	.word	0x0001f11c
   1611c:	00023416 	.word	0x00023416
   16120:	20002c28 	.word	0x20002c28
   16124:	000233f9 	.word	0x000233f9
   16128:	0001df3d 	.word	0x0001df3d
   1612c:	00015e64 	.word	0x00015e64

00016130 <write_op>:
{
   16130:	b538      	push	{r3, r4, r5, lr}
	if (w_ctx->enable_time_limit) {
   16132:	7b03      	ldrb	r3, [r0, #12]
{
   16134:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   16136:	b10b      	cbz	r3, 1613c <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   16138:	f000 f910 	bl	1635c <nrf_flash_sync_get_timestamp_begin>
{
   1613c:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   1613e:	68a3      	ldr	r3, [r4, #8]
   16140:	2b03      	cmp	r3, #3
   16142:	d806      	bhi.n	16152 <write_op+0x22>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   16144:	4a12      	ldr	r2, [pc, #72]	; (16190 <write_op+0x60>)
   16146:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1614a:	07db      	lsls	r3, r3, #31
   1614c:	d5fb      	bpl.n	16146 <write_op+0x16>
	return FLASH_OP_DONE;
   1614e:	2000      	movs	r0, #0
}
   16150:	bd38      	pop	{r3, r4, r5, pc}
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   16152:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   16154:	6860      	ldr	r0, [r4, #4]
   16156:	6819      	ldr	r1, [r3, #0]
   16158:	f000 ffd6 	bl	17108 <nrfx_nvmc_word_write>
	w_ctx->flash_addr += shift;
   1615c:	6863      	ldr	r3, [r4, #4]
   1615e:	3304      	adds	r3, #4
   16160:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   16162:	6823      	ldr	r3, [r4, #0]
   16164:	3304      	adds	r3, #4
   16166:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   16168:	68a3      	ldr	r3, [r4, #8]
   1616a:	3b04      	subs	r3, #4
   1616c:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   1616e:	7b23      	ldrb	r3, [r4, #12]
		i++;
   16170:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   16172:	2b00      	cmp	r3, #0
   16174:	d0e3      	beq.n	1613e <write_op+0xe>
			if (nrf_flash_sync_check_time_limit(i)) {
   16176:	4628      	mov	r0, r5
   16178:	f7eb fb6a 	bl	1850 <nrf_flash_sync_check_time_limit>
   1617c:	2800      	cmp	r0, #0
   1617e:	d0de      	beq.n	1613e <write_op+0xe>
   16180:	4a03      	ldr	r2, [pc, #12]	; (16190 <write_op+0x60>)
   16182:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   16186:	07d9      	lsls	r1, r3, #31
   16188:	d5fb      	bpl.n	16182 <write_op+0x52>
				return FLASH_OP_ONGOING;
   1618a:	2001      	movs	r0, #1
   1618c:	e7e0      	b.n	16150 <write_op+0x20>
   1618e:	bf00      	nop
   16190:	4001e000 	.word	0x4001e000

00016194 <flash_nrf_write>:
{
   16194:	b570      	push	{r4, r5, r6, lr}
   16196:	460d      	mov	r5, r1
   16198:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   1619a:	4619      	mov	r1, r3
   1619c:	4628      	mov	r0, r5
{
   1619e:	4616      	mov	r6, r2
   161a0:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   161a2:	f007 feb8 	bl	1df16 <is_regular_addr_valid>
   161a6:	b980      	cbnz	r0, 161ca <flash_nrf_write+0x36>
   161a8:	4a23      	ldr	r2, [pc, #140]	; (16238 <flash_nrf_write+0xa4>)
   161aa:	4b24      	ldr	r3, [pc, #144]	; (1623c <flash_nrf_write+0xa8>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   161ac:	4824      	ldr	r0, [pc, #144]	; (16240 <flash_nrf_write+0xac>)
   161ae:	1a9b      	subs	r3, r3, r2
   161b0:	08db      	lsrs	r3, r3, #3
   161b2:	019b      	lsls	r3, r3, #6
   161b4:	f043 0301 	orr.w	r3, r3, #1
   161b8:	4622      	mov	r2, r4
   161ba:	4629      	mov	r1, r5
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   161bc:	f003 f962 	bl	19484 <log_2>
		return -EINVAL;
   161c0:	f06f 0415 	mvn.w	r4, #21
}
   161c4:	4620      	mov	r0, r4
   161c6:	b006      	add	sp, #24
   161c8:	bd70      	pop	{r4, r5, r6, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   161ca:	ea44 0305 	orr.w	r3, r4, r5
   161ce:	079b      	lsls	r3, r3, #30
   161d0:	d00a      	beq.n	161e8 <flash_nrf_write+0x54>
   161d2:	4a19      	ldr	r2, [pc, #100]	; (16238 <flash_nrf_write+0xa4>)
   161d4:	4b19      	ldr	r3, [pc, #100]	; (1623c <flash_nrf_write+0xa8>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   161d6:	481b      	ldr	r0, [pc, #108]	; (16244 <flash_nrf_write+0xb0>)
   161d8:	1a9b      	subs	r3, r3, r2
   161da:	08db      	lsrs	r3, r3, #3
   161dc:	019b      	lsls	r3, r3, #6
   161de:	f043 0301 	orr.w	r3, r3, #1
   161e2:	4622      	mov	r2, r4
   161e4:	4629      	mov	r1, r5
   161e6:	e7e9      	b.n	161bc <flash_nrf_write+0x28>
	if (!len) {
   161e8:	2c00      	cmp	r4, #0
   161ea:	d0eb      	beq.n	161c4 <flash_nrf_write+0x30>
	return z_impl_k_sem_take(sem, timeout);
   161ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   161f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   161f4:	4814      	ldr	r0, [pc, #80]	; (16248 <flash_nrf_write+0xb4>)
   161f6:	f001 fc55 	bl	17aa4 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   161fa:	f007 fec3 	bl	1df84 <nrf_flash_sync_is_required>
   161fe:	4603      	mov	r3, r0
	struct flash_context context = {
   16200:	e9cd 6502 	strd	r6, r5, [sp, #8]
   16204:	a802      	add	r0, sp, #8
   16206:	9404      	str	r4, [sp, #16]
	if (nrf_flash_sync_is_required()) {
   16208:	b18b      	cbz	r3, 1622e <flash_nrf_write+0x9a>
	struct flash_context context = {
   1620a:	2301      	movs	r3, #1
   1620c:	f88d 3014 	strb.w	r3, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   16210:	4b0e      	ldr	r3, [pc, #56]	; (1624c <flash_nrf_write+0xb8>)
   16212:	e9cd 3000 	strd	r3, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   16216:	f641 504c 	movw	r0, #7500	; 0x1d4c
   1621a:	f000 f897 	bl	1634c <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1621e:	4668      	mov	r0, sp
   16220:	f7eb fa9a 	bl	1758 <nrf_flash_sync_exe>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
		.enable_time_limit = 0 /* disable time limit */
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	};

	return write_op(&context);
   16224:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   16226:	4808      	ldr	r0, [pc, #32]	; (16248 <flash_nrf_write+0xb4>)
   16228:	f001 fc16 	bl	17a58 <z_impl_k_sem_give>
}
   1622c:	e7ca      	b.n	161c4 <flash_nrf_write+0x30>
	struct flash_context context = {
   1622e:	f88d 3014 	strb.w	r3, [sp, #20]
	return write_op(&context);
   16232:	f7ff ff7d 	bl	16130 <write_op>
   16236:	e7f5      	b.n	16224 <flash_nrf_write+0x90>
   16238:	0001ef2c 	.word	0x0001ef2c
   1623c:	0001f11c 	.word	0x0001f11c
   16240:	000233f9 	.word	0x000233f9
   16244:	00023435 	.word	0x00023435
   16248:	20002c28 	.word	0x20002c28
   1624c:	00016131 	.word	0x00016131

00016250 <time_slot_callback_work>:
{
   16250:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   16252:	9b07      	ldr	r3, [sp, #28]
	rc = op_desc->handler(op_desc->context);
   16254:	e9d3 2000 	ldrd	r2, r0, [r3]
   16258:	4790      	blx	r2
	if (rc != FLASH_OP_ONGOING) {
   1625a:	2801      	cmp	r0, #1
	rc = op_desc->handler(op_desc->context);
   1625c:	4604      	mov	r4, r0
	if (rc != FLASH_OP_ONGOING) {
   1625e:	d013      	beq.n	16288 <time_slot_callback_work+0x38>
		ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   16260:	f10d 010f 	add.w	r1, sp, #15
   16264:	f10d 000e 	add.w	r0, sp, #14
   16268:	f006 fe23 	bl	1ceb2 <ll_timeslice_ticker_id_get>
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   1626c:	2300      	movs	r3, #0
   1626e:	9300      	str	r3, [sp, #0]
   16270:	4619      	mov	r1, r3
   16272:	f89d 200f 	ldrb.w	r2, [sp, #15]
   16276:	f89d 000e 	ldrb.w	r0, [sp, #14]
   1627a:	f7f8 fea7 	bl	efcc <ticker_stop>
		_ticker_sync_context.result = (rc == FLASH_OP_DONE) ? 0 : rc;
   1627e:	4b03      	ldr	r3, [pc, #12]	; (1628c <time_slot_callback_work+0x3c>)
   16280:	60dc      	str	r4, [r3, #12]
	z_impl_k_sem_give(sem);
   16282:	4803      	ldr	r0, [pc, #12]	; (16290 <time_slot_callback_work+0x40>)
   16284:	f001 fbe8 	bl	17a58 <z_impl_k_sem_give>
}
   16288:	b004      	add	sp, #16
   1628a:	bd10      	pop	{r4, pc}
   1628c:	20002c40 	.word	0x20002c40
   16290:	20002c50 	.word	0x20002c50

00016294 <time_slot_delay>:
{
   16294:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16298:	b08d      	sub	sp, #52	; 0x34
   1629a:	4606      	mov	r6, r0
   1629c:	460f      	mov	r7, r1
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   1629e:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   162a2:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
{
   162a6:	4690      	mov	r8, r2
   162a8:	4699      	mov	r9, r3
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   162aa:	f006 fe02 	bl	1ceb2 <ll_timeslice_ticker_id_get>
			   (ticker_id + 1), /* ticker_id */
   162ae:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
	err = ticker_start(instance_index, /* Radio instance ticker */
   162b2:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   162b6:	9700      	str	r7, [sp, #0]
   162b8:	2400      	movs	r4, #0
			   (ticker_id + 1), /* ticker_id */
   162ba:	3501      	adds	r5, #1
	err = ticker_start(instance_index, /* Radio instance ticker */
   162bc:	4633      	mov	r3, r6
   162be:	e9cd 4407 	strd	r4, r4, [sp, #28]
   162c2:	e9cd 8905 	strd	r8, r9, [sp, #20]
   162c6:	e9cd 4403 	strd	r4, r4, [sp, #12]
   162ca:	e9cd 4401 	strd	r4, r4, [sp, #4]
   162ce:	b2ea      	uxtb	r2, r5
   162d0:	2101      	movs	r1, #1
   162d2:	f006 fd38 	bl	1cd46 <ticker_start>
	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
   162d6:	f030 0302 	bics.w	r3, r0, #2
   162da:	d00d      	beq.n	162f8 <time_slot_delay+0x64>
		_ticker_sync_context.result = 0;
   162dc:	4b08      	ldr	r3, [pc, #32]	; (16300 <time_slot_delay+0x6c>)
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   162de:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
		_ticker_sync_context.result = 0;
   162e2:	60dc      	str	r4, [r3, #12]
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   162e4:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   162e8:	9400      	str	r4, [sp, #0]
   162ea:	4623      	mov	r3, r4
   162ec:	4621      	mov	r1, r4
   162ee:	f7f8 fe6d 	bl	efcc <ticker_stop>
   162f2:	4804      	ldr	r0, [pc, #16]	; (16304 <time_slot_delay+0x70>)
   162f4:	f001 fbb0 	bl	17a58 <z_impl_k_sem_give>
}
   162f8:	b00d      	add	sp, #52	; 0x34
   162fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   162fe:	bf00      	nop
   16300:	20002c40 	.word	0x20002c40
   16304:	20002c50 	.word	0x20002c50

00016308 <time_slot_callback_prepare>:
	time_slot_delay(ticks_at_expire,
   16308:	9b01      	ldr	r3, [sp, #4]
   1630a:	4a02      	ldr	r2, [pc, #8]	; (16314 <time_slot_callback_prepare+0xc>)
   1630c:	2131      	movs	r1, #49	; 0x31
   1630e:	f7ff bfc1 	b.w	16294 <time_slot_delay>
   16312:	bf00      	nop
   16314:	00016319 	.word	0x00016319

00016318 <time_slot_callback_abort>:
{
   16318:	b570      	push	{r4, r5, r6, lr}
   1631a:	9d05      	ldr	r5, [sp, #20]
   1631c:	4604      	mov	r4, r0
	ll_radio_state_abort();
   1631e:	f7fa fc35 	bl	10b8c <ll_radio_state_abort>
	time_slot_delay(ticks_at_expire,
   16322:	462b      	mov	r3, r5
   16324:	4620      	mov	r0, r4
   16326:	4a03      	ldr	r2, [pc, #12]	; (16334 <time_slot_callback_abort+0x1c>)
}
   16328:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	time_slot_delay(ticks_at_expire,
   1632c:	2106      	movs	r1, #6
   1632e:	f7ff bfb1 	b.w	16294 <time_slot_delay>
   16332:	bf00      	nop
   16334:	00016251 	.word	0x00016251

00016338 <nrf_flash_sync_init>:
{
   16338:	b508      	push	{r3, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1633a:	2201      	movs	r2, #1
   1633c:	2100      	movs	r1, #0
   1633e:	4802      	ldr	r0, [pc, #8]	; (16348 <nrf_flash_sync_init+0x10>)
   16340:	f008 f8d6 	bl	1e4f0 <z_impl_k_sem_init>
}
   16344:	2000      	movs	r0, #0
   16346:	bd08      	pop	{r3, pc}
   16348:	20002c50 	.word	0x20002c50

0001634c <nrf_flash_sync_set_context>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
   1634c:	4b02      	ldr	r3, [pc, #8]	; (16358 <nrf_flash_sync_set_context+0xc>)
   1634e:	f2a0 62a4 	subw	r2, r0, #1700	; 0x6a4
	_ticker_sync_context.slot = duration;
   16352:	e9c3 2000 	strd	r2, r0, [r3]
}
   16356:	4770      	bx	lr
   16358:	20002c40 	.word	0x20002c40

0001635c <nrf_flash_sync_get_timestamp_begin>:
{
   1635c:	b508      	push	{r3, lr}
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
   1635e:	f006 fd25 	bl	1cdac <ticker_ticks_now_get>
   16362:	4b01      	ldr	r3, [pc, #4]	; (16368 <nrf_flash_sync_get_timestamp_begin+0xc>)
   16364:	6098      	str	r0, [r3, #8]
}
   16366:	bd08      	pop	{r3, pc}
   16368:	20002c40 	.word	0x20002c40

0001636c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   1636c:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   1636e:	794b      	ldrb	r3, [r1, #5]
   16370:	2b01      	cmp	r3, #1
   16372:	d124      	bne.n	163be <uarte_nrfx_configure+0x52>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   16374:	798b      	ldrb	r3, [r1, #6]
   16376:	2b03      	cmp	r3, #3
   16378:	d121      	bne.n	163be <uarte_nrfx_configure+0x52>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1637a:	79cc      	ldrb	r4, [r1, #7]
   1637c:	b12c      	cbz	r4, 1638a <uarte_nrfx_configure+0x1e>
   1637e:	2c01      	cmp	r4, #1
   16380:	d11d      	bne.n	163be <uarte_nrfx_configure+0x52>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
   16382:	6843      	ldr	r3, [r0, #4]
   16384:	685b      	ldr	r3, [r3, #4]
   16386:	079b      	lsls	r3, r3, #30
   16388:	d019      	beq.n	163be <uarte_nrfx_configure+0x52>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1638a:	790a      	ldrb	r2, [r1, #4]
   1638c:	b112      	cbz	r2, 16394 <uarte_nrfx_configure+0x28>
   1638e:	2a02      	cmp	r2, #2
   16390:	d115      	bne.n	163be <uarte_nrfx_configure+0x52>
   16392:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   16394:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   16396:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   16398:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1639c:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   1639e:	d062      	beq.n	16466 <uarte_nrfx_configure+0xfa>
   163a0:	d82b      	bhi.n	163fa <uarte_nrfx_configure+0x8e>
   163a2:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   163a6:	d061      	beq.n	1646c <uarte_nrfx_configure+0x100>
   163a8:	d814      	bhi.n	163d4 <uarte_nrfx_configure+0x68>
   163aa:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   163ae:	d05f      	beq.n	16470 <uarte_nrfx_configure+0x104>
   163b0:	d808      	bhi.n	163c4 <uarte_nrfx_configure+0x58>
   163b2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   163b6:	d05e      	beq.n	16476 <uarte_nrfx_configure+0x10a>
   163b8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   163bc:	d05e      	beq.n	1647c <uarte_nrfx_configure+0x110>
   163be:	f06f 0085 	mvn.w	r0, #133	; 0x85
   163c2:	e04f      	b.n	16464 <uarte_nrfx_configure+0xf8>
   163c4:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   163c8:	d05b      	beq.n	16482 <uarte_nrfx_configure+0x116>
   163ca:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   163ce:	d1f6      	bne.n	163be <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   163d0:	4b36      	ldr	r3, [pc, #216]	; (164ac <uarte_nrfx_configure+0x140>)
   163d2:	e03c      	b.n	1644e <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   163d4:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   163d8:	d056      	beq.n	16488 <uarte_nrfx_configure+0x11c>
   163da:	d807      	bhi.n	163ec <uarte_nrfx_configure+0x80>
   163dc:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   163e0:	d054      	beq.n	1648c <uarte_nrfx_configure+0x120>
   163e2:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   163e6:	d1ea      	bne.n	163be <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   163e8:	4b31      	ldr	r3, [pc, #196]	; (164b0 <uarte_nrfx_configure+0x144>)
   163ea:	e030      	b.n	1644e <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   163ec:	f647 2612 	movw	r6, #31250	; 0x7a12
   163f0:	42b3      	cmp	r3, r6
   163f2:	d1e4      	bne.n	163be <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   163f4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   163f8:	e029      	b.n	1644e <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   163fa:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   163fe:	d047      	beq.n	16490 <uarte_nrfx_configure+0x124>
   16400:	d813      	bhi.n	1642a <uarte_nrfx_configure+0xbe>
   16402:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   16406:	d046      	beq.n	16496 <uarte_nrfx_configure+0x12a>
   16408:	d809      	bhi.n	1641e <uarte_nrfx_configure+0xb2>
   1640a:	f64d 26c0 	movw	r6, #56000	; 0xdac0
   1640e:	42b3      	cmp	r3, r6
   16410:	d043      	beq.n	1649a <uarte_nrfx_configure+0x12e>
   16412:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   16416:	d1d2      	bne.n	163be <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   16418:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1641c:	e017      	b.n	1644e <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   1641e:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   16422:	d1cc      	bne.n	163be <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   16424:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   16428:	e011      	b.n	1644e <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   1642a:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1642e:	d037      	beq.n	164a0 <uarte_nrfx_configure+0x134>
   16430:	d808      	bhi.n	16444 <uarte_nrfx_configure+0xd8>
   16432:	4e20      	ldr	r6, [pc, #128]	; (164b4 <uarte_nrfx_configure+0x148>)
   16434:	42b3      	cmp	r3, r6
   16436:	d036      	beq.n	164a6 <uarte_nrfx_configure+0x13a>
   16438:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1643c:	d1bf      	bne.n	163be <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1643e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   16442:	e004      	b.n	1644e <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   16444:	4e1c      	ldr	r6, [pc, #112]	; (164b8 <uarte_nrfx_configure+0x14c>)
   16446:	42b3      	cmp	r3, r6
   16448:	d1b9      	bne.n	163be <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1644a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1644e:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   16452:	6903      	ldr	r3, [r0, #16]
   16454:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   16456:	4322      	orrs	r2, r4
   16458:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1645a:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   1645e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   16462:	2000      	movs	r0, #0
}
   16464:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   16466:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1646a:	e7f0      	b.n	1644e <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1646c:	4b13      	ldr	r3, [pc, #76]	; (164bc <uarte_nrfx_configure+0x150>)
   1646e:	e7ee      	b.n	1644e <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   16470:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   16474:	e7eb      	b.n	1644e <uarte_nrfx_configure+0xe2>
		nrf_baudrate = 0x00014000;
   16476:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1647a:	e7e8      	b.n	1644e <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   1647c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   16480:	e7e5      	b.n	1644e <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   16482:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   16486:	e7e2      	b.n	1644e <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   16488:	4b0d      	ldr	r3, [pc, #52]	; (164c0 <uarte_nrfx_configure+0x154>)
   1648a:	e7e0      	b.n	1644e <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1648c:	4b0d      	ldr	r3, [pc, #52]	; (164c4 <uarte_nrfx_configure+0x158>)
   1648e:	e7de      	b.n	1644e <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   16490:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   16494:	e7db      	b.n	1644e <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   16496:	4b0c      	ldr	r3, [pc, #48]	; (164c8 <uarte_nrfx_configure+0x15c>)
   16498:	e7d9      	b.n	1644e <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1649a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1649e:	e7d6      	b.n	1644e <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   164a0:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   164a4:	e7d3      	b.n	1644e <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   164a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   164aa:	e7d0      	b.n	1644e <uarte_nrfx_configure+0xe2>
   164ac:	0013b000 	.word	0x0013b000
   164b0:	004ea000 	.word	0x004ea000
   164b4:	0003d090 	.word	0x0003d090
   164b8:	000f4240 	.word	0x000f4240
   164bc:	00275000 	.word	0x00275000
   164c0:	0075c000 	.word	0x0075c000
   164c4:	003af000 	.word	0x003af000
   164c8:	013a9000 	.word	0x013a9000

000164cc <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   164cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return dev->data;
   164ce:	6906      	ldr	r6, [r0, #16]
{
   164d0:	4605      	mov	r5, r0
   164d2:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   164d4:	f007 ff03 	bl	1e2de <k_is_in_isr>
   164d8:	b910      	cbnz	r0, 164e0 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   164da:	4b2c      	ldr	r3, [pc, #176]	; (1658c <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
   164dc:	781b      	ldrb	r3, [r3, #0]
   164de:	b983      	cbnz	r3, 16502 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   164e0:	f04f 0320 	mov.w	r3, #32
   164e4:	f3ef 8411 	mrs	r4, BASEPRI
   164e8:	f383 8812 	msr	BASEPRI_MAX, r3
   164ec:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   164f0:	6868      	ldr	r0, [r5, #4]
   164f2:	f007 fd6c 	bl	1dfce <is_tx_ready.isra.0>
   164f6:	bb28      	cbnz	r0, 16544 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
   164f8:	f384 8811 	msr	BASEPRI, r4
   164fc:	f3bf 8f6f 	isb	sy
}
   16500:	e7ee      	b.n	164e0 <uarte_nrfx_poll_out+0x14>
{
   16502:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   16504:	6868      	ldr	r0, [r5, #4]
   16506:	f007 fd62 	bl	1dfce <is_tx_ready.isra.0>
   1650a:	b970      	cbnz	r0, 1652a <uarte_nrfx_poll_out+0x5e>
   1650c:	2001      	movs	r0, #1
   1650e:	f007 fdb9 	bl	1e084 <nrfx_busy_wait>
   16512:	3c01      	subs	r4, #1
   16514:	d1f6      	bne.n	16504 <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
   16516:	2100      	movs	r1, #0
   16518:	2021      	movs	r0, #33	; 0x21
   1651a:	f001 ff81 	bl	18420 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1651e:	e7f0      	b.n	16502 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   16520:	f384 8811 	msr	BASEPRI, r4
   16524:	f3bf 8f6f 	isb	sy
}
   16528:	e7f5      	b.n	16516 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   1652a:	f04f 0320 	mov.w	r3, #32
   1652e:	f3ef 8411 	mrs	r4, BASEPRI
   16532:	f383 8812 	msr	BASEPRI_MAX, r3
   16536:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1653a:	6868      	ldr	r0, [r5, #4]
   1653c:	f007 fd47 	bl	1dfce <is_tx_ready.isra.0>
   16540:	2800      	cmp	r0, #0
   16542:	d0ed      	beq.n	16520 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
   16544:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
   16548:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
   1654a:	680b      	ldr	r3, [r1, #0]
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   1654c:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1654e:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   16552:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16556:	2200      	movs	r2, #0
   16558:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1655c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   16560:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   16564:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   16568:	684a      	ldr	r2, [r1, #4]
   1656a:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1656c:	bf41      	itttt	mi
   1656e:	2208      	movmi	r2, #8
   16570:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   16574:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   16578:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1657c:	2201      	movs	r2, #1
   1657e:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   16580:	f384 8811 	msr	BASEPRI, r4
   16584:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   16588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1658a:	bf00      	nop
   1658c:	20003424 	.word	0x20003424

00016590 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   16590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16592:	2200      	movs	r2, #0
   16594:	4607      	mov	r7, r0
   16596:	2101      	movs	r1, #1
   16598:	2002      	movs	r0, #2
   1659a:	f7ec ff19 	bl	33d0 <z_arm_irq_priority_set>
   1659e:	2002      	movs	r0, #2
   165a0:	f7ec fee4 	bl	336c <arch_irq_enable>
	return dev->config;
   165a4:	687d      	ldr	r5, [r7, #4]
	return dev->data;
   165a6:	693e      	ldr	r6, [r7, #16]
	return config->uarte_regs;
   165a8:	682c      	ldr	r4, [r5, #0]
	nrf_gpio_pin_write(cfg->pseltxd, 1);
   165aa:	f8d5 c008 	ldr.w	ip, [r5, #8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   165ae:	2300      	movs	r3, #0
   165b0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->OUTSET = set_mask;
   165b4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    *p_pin = pin_number & 0x1F;
   165b8:	f00c 031f 	and.w	r3, ip, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   165bc:	2201      	movs	r2, #1
   165be:	409a      	lsls	r2, r3
    reg->PIN_CNF[pin_number] = cnf;
   165c0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
	data->dev = dev;
   165c4:	6037      	str	r7, [r6, #0]
    p_reg->OUTSET = set_mask;
   165c6:	f8c1 2508 	str.w	r2, [r1, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
   165ca:	2203      	movs	r2, #3
   165cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (cfg->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   165d0:	68ea      	ldr	r2, [r5, #12]
   165d2:	1c50      	adds	r0, r2, #1
   165d4:	d007      	beq.n	165e6 <uarte_0_init+0x56>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   165d6:	7e28      	ldrb	r0, [r5, #24]
    *p_pin = pin_number & 0x1F;
   165d8:	f002 031f 	and.w	r3, r2, #31
    reg->PIN_CNF[pin_number] = cnf;
   165dc:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   165e0:	0080      	lsls	r0, r0, #2
    reg->PIN_CNF[pin_number] = cnf;
   165e2:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
   165e6:	f8c4 c50c 	str.w	ip, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   165ea:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
	if (cfg->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   165ee:	692a      	ldr	r2, [r5, #16]
   165f0:	1c53      	adds	r3, r2, #1
   165f2:	d009      	beq.n	16608 <uarte_0_init+0x78>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   165f4:	7e69      	ldrb	r1, [r5, #25]
    *p_pin = pin_number & 0x1F;
   165f6:	f002 031f 	and.w	r3, r2, #31
    reg->PIN_CNF[pin_number] = cnf;
   165fa:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   165fe:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   16602:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
   16604:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	if (cfg->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   16608:	6969      	ldr	r1, [r5, #20]
   1660a:	1c48      	adds	r0, r1, #1
   1660c:	d00c      	beq.n	16628 <uarte_0_init+0x98>
    *p_pin = pin_number & 0x1F;
   1660e:	f001 031f 	and.w	r3, r1, #31
    p_reg->OUTSET = set_mask;
   16612:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   16616:	2001      	movs	r0, #1
   16618:	4098      	lsls	r0, r3
    reg->PIN_CNF[pin_number] = cnf;
   1661a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    p_reg->OUTSET = set_mask;
   1661e:	f8cc 0508 	str.w	r0, [ip, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
   16622:	2003      	movs	r0, #3
   16624:	f84c 0023 	str.w	r0, [ip, r3, lsl #2]
    p_reg->PSEL.RTS = pselrts;
   16628:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1662c:	4638      	mov	r0, r7
    p_reg->PSEL.CTS = pselcts;
   1662e:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
   16632:	1d31      	adds	r1, r6, #4
   16634:	f7ff fe9a 	bl	1636c <uarte_nrfx_configure>
	if (err) {
   16638:	4607      	mov	r7, r0
   1663a:	b9a8      	cbnz	r0, 16668 <uarte_0_init+0xd8>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1663c:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1663e:	0719      	lsls	r1, r3, #28
   16640:	d527      	bpl.n	16692 <uarte_0_init+0x102>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   16642:	f106 0012 	add.w	r0, r6, #18
   16646:	f000 fd6d 	bl	17124 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1664a:	4b27      	ldr	r3, [pc, #156]	; (166e8 <uarte_0_init+0x158>)
   1664c:	4298      	cmp	r0, r3
   1664e:	d00d      	beq.n	1666c <uarte_0_init+0xdc>
   16650:	4b26      	ldr	r3, [pc, #152]	; (166ec <uarte_0_init+0x15c>)
   16652:	4927      	ldr	r1, [pc, #156]	; (166f0 <uarte_0_init+0x160>)
		LOG_ERR("Failed to allocate PPI Channel");
   16654:	4827      	ldr	r0, [pc, #156]	; (166f4 <uarte_0_init+0x164>)
   16656:	1ac9      	subs	r1, r1, r3
   16658:	08c9      	lsrs	r1, r1, #3
   1665a:	0189      	lsls	r1, r1, #6
   1665c:	f041 0101 	orr.w	r1, r1, #1
   16660:	f002 feef 	bl	19442 <log_0>
		return -EIO;
   16664:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
   16668:	4638      	mov	r0, r7
   1666a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   1666c:	7cb0      	ldrb	r0, [r6, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1666e:	00c3      	lsls	r3, r0, #3
   16670:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   16674:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   16678:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1667c:	f504 7190 	add.w	r1, r4, #288	; 0x120
    p_reg->CH[(uint32_t) channel].EEP = eep;
   16680:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   16684:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   16688:	4a1b      	ldr	r2, [pc, #108]	; (166f8 <uarte_0_init+0x168>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1668a:	2301      	movs	r3, #1
   1668c:	4083      	lsls	r3, r0
   1668e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   16692:	2308      	movs	r3, #8
   16694:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (cfg->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   16698:	68eb      	ldr	r3, [r5, #12]
   1669a:	3301      	adds	r3, #1
   1669c:	d00c      	beq.n	166b8 <uarte_0_init+0x128>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1669e:	2300      	movs	r3, #0
   166a0:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   166a4:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   166a8:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   166ac:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   166b0:	2301      	movs	r3, #1
   166b2:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   166b6:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   166b8:	686b      	ldr	r3, [r5, #4]
   166ba:	071a      	lsls	r2, r3, #28
    p_reg->INTENSET = mask;
   166bc:	bf5c      	itt	pl
   166be:	f44f 7280 	movpl.w	r2, #256	; 0x100
   166c2:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   166c6:	06db      	lsls	r3, r3, #27
   166c8:	bf44      	itt	mi
   166ca:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   166ce:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   166d2:	3610      	adds	r6, #16
    p_reg->TXD.MAXCNT = length;
   166d4:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   166d6:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   166da:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   166de:	2301      	movs	r3, #1
   166e0:	60a3      	str	r3, [r4, #8]
   166e2:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   166e4:	e7c0      	b.n	16668 <uarte_0_init+0xd8>
   166e6:	bf00      	nop
   166e8:	0bad0000 	.word	0x0bad0000
   166ec:	0001ef2c 	.word	0x0001ef2c
   166f0:	0001f164 	.word	0x0001f164
   166f4:	00023470 	.word	0x00023470
   166f8:	4001f000 	.word	0x4001f000

000166fc <random_byte_get>:
	__asm__ volatile(
   166fc:	f04f 0320 	mov.w	r3, #32
   16700:	f3ef 8211 	mrs	r2, BASEPRI
   16704:	f383 8812 	msr	BASEPRI_MAX, r3
   16708:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1670c:	4b09      	ldr	r3, [pc, #36]	; (16734 <random_byte_get+0x38>)
   1670e:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   16712:	b161      	cbz	r1, 1672e <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   16714:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   16716:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1671a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   1671e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   16722:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   16724:	f382 8811 	msr	BASEPRI, r2
   16728:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1672c:	4770      	bx	lr
	int retval = -EAGAIN;
   1672e:	f06f 000a 	mvn.w	r0, #10
   16732:	e7f7      	b.n	16724 <random_byte_get+0x28>
   16734:	4000d000 	.word	0x4000d000

00016738 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   16738:	b5f0      	push	{r4, r5, r6, r7, lr}
   1673a:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   1673c:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   1673e:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   16740:	f04f 0020 	mov.w	r0, #32
   16744:	f3ef 8e11 	mrs	lr, BASEPRI
   16748:	f380 8812 	msr	BASEPRI_MAX, r0
   1674c:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   16750:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   16752:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
   16756:	1ba4      	subs	r4, r4, r6
   16758:	403c      	ands	r4, r7
	if (available < len) {
   1675a:	42a2      	cmp	r2, r4
		len = available;
   1675c:	bf88      	it	hi
   1675e:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   16760:	18b0      	adds	r0, r6, r2
   16762:	4038      	ands	r0, r7
	first = rngp->first_alloc;
   16764:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   16766:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
   16768:	f38e 8811 	msr	BASEPRI, lr
   1676c:	f3bf 8f6f 	isb	sy
   16770:	1888      	adds	r0, r1, r2
	uint8_t *dst   = buf;
   16772:	460a      	mov	r2, r1
	irq_unlock(key);

	while (likely(len--)) {
   16774:	4290      	cmp	r0, r2
   16776:	d119      	bne.n	167ac <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   16778:	4566      	cmp	r6, ip
   1677a:	d10d      	bne.n	16798 <rng_pool_get+0x60>
	__asm__ volatile(
   1677c:	f04f 0520 	mov.w	r5, #32
   16780:	f3ef 8011 	mrs	r0, BASEPRI
   16784:	f385 8812 	msr	BASEPRI_MAX, r5
   16788:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1678c:	781d      	ldrb	r5, [r3, #0]
   1678e:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   16790:	f380 8811 	msr	BASEPRI, r0
   16794:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   16798:	1a52      	subs	r2, r2, r1
	available = available - len;
	if (available <= rngp->threshold) {
   1679a:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   1679c:	b290      	uxth	r0, r2
	available = available - len;
   1679e:	1a22      	subs	r2, r4, r0
	if (available <= rngp->threshold) {
   167a0:	4293      	cmp	r3, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   167a2:	bf22      	ittt	cs
   167a4:	4b06      	ldrcs	r3, [pc, #24]	; (167c0 <rng_pool_get+0x88>)
   167a6:	2201      	movcs	r2, #1
   167a8:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   167aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   167ac:	eb03 0e05 	add.w	lr, r3, r5
		first = (first + 1) & mask;
   167b0:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   167b2:	f89e e005 	ldrb.w	lr, [lr, #5]
   167b6:	f802 eb01 	strb.w	lr, [r2], #1
		first = (first + 1) & mask;
   167ba:	403d      	ands	r5, r7
   167bc:	e7da      	b.n	16774 <rng_pool_get+0x3c>
   167be:	bf00      	nop
   167c0:	4000d000 	.word	0x4000d000

000167c4 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   167c4:	43db      	mvns	r3, r3
{
   167c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   167ca:	f013 0501 	ands.w	r5, r3, #1
{
   167ce:	460e      	mov	r6, r1
   167d0:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   167d2:	d004      	beq.n	167de <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   167d4:	4821      	ldr	r0, [pc, #132]	; (1685c <entropy_nrf5_get_entropy_isr+0x98>)
   167d6:	f7ff ffaf 	bl	16738 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   167da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   167de:	b3a2      	cbz	r2, 1684a <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   167e0:	f04f 0320 	mov.w	r3, #32
   167e4:	f3ef 8811 	mrs	r8, BASEPRI
   167e8:	f383 8812 	msr	BASEPRI_MAX, r3
   167ec:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   167f0:	200d      	movs	r0, #13
   167f2:	f7ec fddf 	bl	33b4 <arch_irq_is_enabled>
   167f6:	4607      	mov	r7, r0
		irq_disable(IRQN);
   167f8:	200d      	movs	r0, #13
   167fa:	f7ec fdc7 	bl	338c <arch_irq_disable>
	__asm__ volatile(
   167fe:	f388 8811 	msr	BASEPRI, r8
   16802:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   16806:	f8df 8058 	ldr.w	r8, [pc, #88]	; 16860 <entropy_nrf5_get_entropy_isr+0x9c>
   1680a:	f8df 9058 	ldr.w	r9, [pc, #88]	; 16864 <entropy_nrf5_get_entropy_isr+0xa0>
   1680e:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   16812:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   16816:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1681a:	2301      	movs	r3, #1
   1681c:	f8c8 3000 	str.w	r3, [r8]
   16820:	4625      	mov	r5, r4
   16822:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   16826:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   1682a:	b183      	cbz	r3, 1684e <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   1682c:	f7ff ff66 	bl	166fc <random_byte_get>
			if (byte < 0) {
   16830:	1e03      	subs	r3, r0, #0
   16832:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   16836:	dbf6      	blt.n	16826 <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   16838:	3d01      	subs	r5, #1
   1683a:	b2ad      	uxth	r5, r5
   1683c:	5573      	strb	r3, [r6, r5]
		} while (len);
   1683e:	2d00      	cmp	r5, #0
   16840:	d1f1      	bne.n	16826 <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   16842:	b117      	cbz	r7, 1684a <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   16844:	200d      	movs	r0, #13
   16846:	f7ec fd91 	bl	336c <arch_irq_enable>
	return cnt;
   1684a:	4620      	mov	r0, r4
   1684c:	e7c5      	b.n	167da <entropy_nrf5_get_entropy_isr+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
   1684e:	f3bf 8f4f 	dsb	sy
				__WFE();
   16852:	bf20      	wfe
				__SEV();
   16854:	bf40      	sev
				__WFE();
   16856:	bf20      	wfe
   16858:	e7e5      	b.n	16826 <entropy_nrf5_get_entropy_isr+0x62>
   1685a:	bf00      	nop
   1685c:	20002c98 	.word	0x20002c98
   16860:	4000d000 	.word	0x4000d000
   16864:	e000e100 	.word	0xe000e100

00016868 <entropy_nrf5_get_entropy>:
{
   16868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   1686c:	4f13      	ldr	r7, [pc, #76]	; (168bc <entropy_nrf5_get_entropy+0x54>)
   1686e:	460d      	mov	r5, r1
   16870:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   16872:	f107 0845 	add.w	r8, r7, #69	; 0x45
   16876:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   1687a:	b914      	cbnz	r4, 16882 <entropy_nrf5_get_entropy+0x1a>
}
   1687c:	4620      	mov	r0, r4
   1687e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   16882:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16886:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1688a:	4638      	mov	r0, r7
   1688c:	f001 f90a 	bl	17aa4 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   16890:	4622      	mov	r2, r4
   16892:	4629      	mov	r1, r5
   16894:	4640      	mov	r0, r8
   16896:	f7ff ff4f 	bl	16738 <rng_pool_get>
   1689a:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   1689c:	4638      	mov	r0, r7
   1689e:	f001 f8db 	bl	17a58 <z_impl_k_sem_give>
		if (bytes == 0U) {
   168a2:	b93e      	cbnz	r6, 168b4 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   168a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   168a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   168ac:	4648      	mov	r0, r9
   168ae:	f001 f8f9 	bl	17aa4 <z_impl_k_sem_take>
			continue;
   168b2:	e7e2      	b.n	1687a <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   168b4:	1ba4      	subs	r4, r4, r6
   168b6:	b2a4      	uxth	r4, r4
		buf += bytes;
   168b8:	4435      	add	r5, r6
   168ba:	e7de      	b.n	1687a <entropy_nrf5_get_entropy+0x12>
   168bc:	20002c68 	.word	0x20002c68

000168c0 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   168c0:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   168c2:	4c19      	ldr	r4, [pc, #100]	; (16928 <entropy_nrf5_init+0x68>)
   168c4:	2201      	movs	r2, #1
   168c6:	4611      	mov	r1, r2
   168c8:	4620      	mov	r0, r4
   168ca:	f007 fe11 	bl	1e4f0 <z_impl_k_sem_init>
   168ce:	2201      	movs	r2, #1
   168d0:	2100      	movs	r1, #0
   168d2:	f104 0018 	add.w	r0, r4, #24
   168d6:	f007 fe0b 	bl	1e4f0 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   168da:	f240 4307 	movw	r3, #1031	; 0x407
   168de:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   168e2:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   168e6:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   168e8:	230c      	movs	r3, #12
   168ea:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   168ee:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   168f0:	4b0e      	ldr	r3, [pc, #56]	; (1692c <entropy_nrf5_init+0x6c>)
   168f2:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   168f6:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   168fa:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   168fe:	f042 0201 	orr.w	r2, r2, #1
   16902:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   16906:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   16908:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   1690c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   16910:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   16914:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   16916:	6019      	str	r1, [r3, #0]
   16918:	200d      	movs	r0, #13
   1691a:	f7ec fd59 	bl	33d0 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1691e:	200d      	movs	r0, #13
   16920:	f7ec fd24 	bl	336c <arch_irq_enable>

	return 0;
}
   16924:	4628      	mov	r0, r5
   16926:	bd38      	pop	{r3, r4, r5, pc}
   16928:	20002c68 	.word	0x20002c68
   1692c:	4000d000 	.word	0x4000d000

00016930 <isr>:
{
   16930:	b510      	push	{r4, lr}
	byte = random_byte_get();
   16932:	f7ff fee3 	bl	166fc <random_byte_get>
	if (byte < 0) {
   16936:	2800      	cmp	r0, #0
   16938:	db20      	blt.n	1697c <isr+0x4c>
	uint8_t last  = rngp->last;
   1693a:	4b17      	ldr	r3, [pc, #92]	; (16998 <isr+0x68>)
   1693c:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   16940:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   16944:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   16948:	1a51      	subs	r1, r2, r1
   1694a:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1694e:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   16950:	d10d      	bne.n	1696e <isr+0x3e>
	uint8_t last  = rngp->last;
   16952:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   16956:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1695a:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1695e:	1a51      	subs	r1, r2, r1
   16960:	ea34 0101 	bics.w	r1, r4, r1
   16964:	d10b      	bne.n	1697e <isr+0x4e>
   16966:	4b0d      	ldr	r3, [pc, #52]	; (1699c <isr+0x6c>)
   16968:	2201      	movs	r2, #1
   1696a:	605a      	str	r2, [r3, #4]
}
   1696c:	e00e      	b.n	1698c <isr+0x5c>
	rngp->buffer[last] = byte;
   1696e:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   16970:	3201      	adds	r2, #1
   16972:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   16974:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   16978:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   1697c:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1697e:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   16980:	3201      	adds	r2, #1
   16982:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   16984:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   16988:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1698c:	4804      	ldr	r0, [pc, #16]	; (169a0 <isr+0x70>)
}
   1698e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16992:	f001 b861 	b.w	17a58 <z_impl_k_sem_give>
   16996:	bf00      	nop
   16998:	20002c68 	.word	0x20002c68
   1699c:	4000d000 	.word	0x4000d000
   169a0:	20002c80 	.word	0x20002c80

000169a4 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
   169a4:	4a04      	ldr	r2, [pc, #16]	; (169b8 <sys_clock_timeout_handler+0x14>)
   169a6:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   169a8:	1ac8      	subs	r0, r1, r3
   169aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   169ae:	4403      	add	r3, r0
   169b0:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   169b2:	f001 becf 	b.w	18754 <sys_clock_announce>
   169b6:	bf00      	nop
   169b8:	20002cc8 	.word	0x20002cc8

000169bc <set_absolute_alarm>:
{
   169bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   169c0:	0086      	lsls	r6, r0, #2
   169c2:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   169c6:	f100 0450 	add.w	r4, r0, #80	; 0x50
   169ca:	f506 3688 	add.w	r6, r6, #69632	; 0x11000
   169ce:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   169d0:	b2a4      	uxth	r4, r4
   169d2:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   169d6:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return p_reg->CC[ch];
   169da:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
   169de:	f8df 806c 	ldr.w	r8, [pc, #108]	; 16a4c <set_absolute_alarm+0x90>
	uint32_t cc_val = abs_val & COUNTER_MAX;
   169e2:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   169e6:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   169ea:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
   169ec:	f8d8 9504 	ldr.w	r9, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   169f0:	eba3 0309 	sub.w	r3, r3, r9
   169f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   169f8:	f029 427f 	bic.w	r2, r9, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   169fc:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
   169fe:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
   16a02:	d102      	bne.n	16a0a <set_absolute_alarm+0x4e>
	z_impl_k_busy_wait(usec_to_wait);
   16a04:	2013      	movs	r0, #19
   16a06:	f007 ffdb 	bl	1e9c0 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   16a0a:	f109 0202 	add.w	r2, r9, #2
	return (a - b) & COUNTER_MAX;
   16a0e:	1aab      	subs	r3, r5, r2
   16a10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
   16a14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   16a18:	bf88      	it	hi
   16a1a:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   16a1c:	2300      	movs	r3, #0
   16a1e:	6023      	str	r3, [r4, #0]
   16a20:	6823      	ldr	r3, [r4, #0]
    p_reg->EVTENSET = mask;
   16a22:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   16a26:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   16a2a:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
   16a2e:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   16a32:	4599      	cmp	r9, r3
   16a34:	d006      	beq.n	16a44 <set_absolute_alarm+0x88>
	return (a - b) & COUNTER_MAX;
   16a36:	1aeb      	subs	r3, r5, r3
   16a38:	3b02      	subs	r3, #2
   16a3a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   16a3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   16a42:	d801      	bhi.n	16a48 <set_absolute_alarm+0x8c>
}
   16a44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		prev_cc = cc_val;
   16a48:	462b      	mov	r3, r5
   16a4a:	e7cf      	b.n	169ec <set_absolute_alarm+0x30>
   16a4c:	40011000 	.word	0x40011000

00016a50 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   16a50:	b570      	push	{r4, r5, r6, lr}
   16a52:	4d15      	ldr	r5, [pc, #84]	; (16aa8 <rtc_nrf_isr+0x58>)
    return p_reg->INTENSET & mask;
   16a54:	4c15      	ldr	r4, [pc, #84]	; (16aac <rtc_nrf_isr+0x5c>)
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   16a56:	2600      	movs	r6, #0
   16a58:	682b      	ldr	r3, [r5, #0]
   16a5a:	2000      	movs	r0, #0
   16a5c:	b106      	cbz	r6, 16a60 <rtc_nrf_isr+0x10>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
   16a5e:	bd70      	pop	{r4, r5, r6, pc}
   16a60:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
   16a64:	03d2      	lsls	r2, r2, #15
   16a66:	d5fa      	bpl.n	16a5e <rtc_nrf_isr+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16a68:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
   16a6c:	2a00      	cmp	r2, #0
   16a6e:	d0f6      	beq.n	16a5e <rtc_nrf_isr+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   16a70:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
   16a74:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    p_reg->EVTENCLR = mask;
   16a78:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   16a7c:	f8c4 2348 	str.w	r2, [r4, #840]	; 0x348
    return p_reg->CC[ch];
   16a80:	f8d4 1540 	ldr.w	r1, [r4, #1344]	; 0x540
     return p_reg->COUNTER;
   16a84:	f8d4 6504 	ldr.w	r6, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   16a88:	1a72      	subs	r2, r6, r1
   16a8a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
				cc_val = now;
   16a8e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   16a92:	bf88      	it	hi
   16a94:	4631      	movhi	r1, r6
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   16a96:	2601      	movs	r6, #1
			if (handler) {
   16a98:	b11b      	cbz	r3, 16aa2 <rtc_nrf_isr+0x52>
				handler(chan, cc_val,
   16a9a:	686a      	ldr	r2, [r5, #4]
   16a9c:	6028      	str	r0, [r5, #0]
   16a9e:	4798      	blx	r3
   16aa0:	e7da      	b.n	16a58 <rtc_nrf_isr+0x8>
   16aa2:	602b      	str	r3, [r5, #0]
}
   16aa4:	e7db      	b.n	16a5e <rtc_nrf_isr+0xe>
   16aa6:	bf00      	nop
   16aa8:	20002cbc 	.word	0x20002cbc
   16aac:	40011000 	.word	0x40011000

00016ab0 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
   16ab0:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
   16ab2:	4c0f      	ldr	r4, [pc, #60]	; (16af0 <sys_clock_driver_init+0x40>)
   16ab4:	2500      	movs	r5, #0
    p_reg->INTENSET = mask;
   16ab6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
   16aba:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    p_reg->INTENSET = mask;
   16abe:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   16ac2:	4b0c      	ldr	r3, [pc, #48]	; (16af4 <sys_clock_driver_init+0x44>)
   16ac4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   16ac8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   16acc:	2101      	movs	r1, #1
   16ace:	462a      	mov	r2, r5
   16ad0:	2011      	movs	r0, #17
   16ad2:	f7ec fc7d 	bl	33d0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   16ad6:	2011      	movs	r0, #17
   16ad8:	f7ec fc48 	bl	336c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   16adc:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   16ade:	4a06      	ldr	r2, [pc, #24]	; (16af8 <sys_clock_driver_init+0x48>)
   16ae0:	60a3      	str	r3, [r4, #8]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
   16ae2:	2002      	movs	r0, #2
   16ae4:	6023      	str	r3, [r4, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
   16ae6:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
   16ae8:	f7fe ffd0 	bl	15a8c <z_nrf_clock_control_lf_on>

	return 0;
}
   16aec:	4628      	mov	r0, r5
   16aee:	bd38      	pop	{r3, r4, r5, pc}
   16af0:	40011000 	.word	0x40011000
   16af4:	e000e100 	.word	0xe000e100
   16af8:	20002cc4 	.word	0x20002cc4

00016afc <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   16afc:	4a13      	ldr	r2, [pc, #76]	; (16b4c <sys_clock_set_timeout+0x50>)
   16afe:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   16b02:	bf14      	ite	ne
   16b04:	4603      	movne	r3, r0
   16b06:	4613      	moveq	r3, r2
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   16b08:	3b01      	subs	r3, #1
   16b0a:	2b00      	cmp	r3, #0
   16b0c:	dd1c      	ble.n	16b48 <sys_clock_set_timeout+0x4c>
   16b0e:	4293      	cmp	r3, r2
   16b10:	bfa8      	it	ge
   16b12:	4613      	movge	r3, r2
     return p_reg->COUNTER;
   16b14:	4a0e      	ldr	r2, [pc, #56]	; (16b50 <sys_clock_set_timeout+0x54>)
   16b16:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
   16b1a:	4a0e      	ldr	r2, [pc, #56]	; (16b54 <sys_clock_set_timeout+0x58>)
   16b1c:	6811      	ldr	r1, [r2, #0]
	return (a - b) & COUNTER_MAX;
   16b1e:	1a40      	subs	r0, r0, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
   16b20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
   16b24:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
		ticks = 0;
   16b28:	bf18      	it	ne
   16b2a:	2300      	movne	r3, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   16b2c:	3201      	adds	r2, #1
   16b2e:	4413      	add	r3, r2
	cc_data[chan].callback = handler;
   16b30:	4a09      	ldr	r2, [pc, #36]	; (16b58 <sys_clock_set_timeout+0x5c>)
   16b32:	480a      	ldr	r0, [pc, #40]	; (16b5c <sys_clock_set_timeout+0x60>)
   16b34:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
   16b36:	2000      	movs	r0, #0
   16b38:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
   16b3a:	4a04      	ldr	r2, [pc, #16]	; (16b4c <sys_clock_set_timeout+0x50>)
   16b3c:	4293      	cmp	r3, r2
   16b3e:	bf94      	ite	ls
   16b40:	18c9      	addls	r1, r1, r3
   16b42:	1889      	addhi	r1, r1, r2
   16b44:	f7ff bf3a 	b.w	169bc <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   16b48:	2300      	movs	r3, #0
   16b4a:	e7e3      	b.n	16b14 <sys_clock_set_timeout+0x18>
   16b4c:	007fffff 	.word	0x007fffff
   16b50:	40011000 	.word	0x40011000
   16b54:	20002cc8 	.word	0x20002cc8
   16b58:	20002cbc 	.word	0x20002cbc
   16b5c:	000169a5 	.word	0x000169a5

00016b60 <sys_clock_elapsed>:
   16b60:	4b04      	ldr	r3, [pc, #16]	; (16b74 <sys_clock_elapsed+0x14>)
   16b62:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
{
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return counter_sub(counter(), last_count) / CYC_PER_TICK;
   16b66:	4b04      	ldr	r3, [pc, #16]	; (16b78 <sys_clock_elapsed+0x18>)
	return (a - b) & COUNTER_MAX;
   16b68:	681b      	ldr	r3, [r3, #0]
   16b6a:	1ac0      	subs	r0, r0, r3
}
   16b6c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   16b70:	4770      	bx	lr
   16b72:	bf00      	nop
   16b74:	40011000 	.word	0x40011000
   16b78:	20002cc8 	.word	0x20002cc8

00016b7c <sys_clock_cycle_get_32>:
	__asm__ volatile(
   16b7c:	f04f 0320 	mov.w	r3, #32
   16b80:	f3ef 8211 	mrs	r2, BASEPRI
   16b84:	f383 8812 	msr	BASEPRI_MAX, r3
   16b88:	f3bf 8f6f 	isb	sy

uint32_t sys_clock_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   16b8c:	4906      	ldr	r1, [pc, #24]	; (16ba8 <sys_clock_cycle_get_32+0x2c>)
   16b8e:	4b07      	ldr	r3, [pc, #28]	; (16bac <sys_clock_cycle_get_32+0x30>)
   16b90:	6808      	ldr	r0, [r1, #0]
   16b92:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
   16b96:	f382 8811 	msr	BASEPRI, r2
   16b9a:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
   16b9e:	1a1b      	subs	r3, r3, r0
   16ba0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
   16ba4:	4418      	add	r0, r3
   16ba6:	4770      	bx	lr
   16ba8:	20002cc8 	.word	0x20002cc8
   16bac:	40011000 	.word	0x40011000

00016bb0 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   16bb0:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   16bb4:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   16bb8:	2a06      	cmp	r2, #6
   16bba:	d109      	bne.n	16bd0 <nrf52_errata_16+0x20>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   16bbc:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   16bc0:	f3c3 1303 	ubfx	r3, r3, #4, #4
   16bc4:	3b03      	subs	r3, #3
   16bc6:	2b04      	cmp	r3, #4
   16bc8:	d802      	bhi.n	16bd0 <nrf52_errata_16+0x20>
   16bca:	4a02      	ldr	r2, [pc, #8]	; (16bd4 <nrf52_errata_16+0x24>)
   16bcc:	5cd0      	ldrb	r0, [r2, r3]
   16bce:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   16bd0:	2000      	movs	r0, #0
    #endif
}
   16bd2:	4770      	bx	lr
   16bd4:	000234bf 	.word	0x000234bf

00016bd8 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   16bd8:	4a02      	ldr	r2, [pc, #8]	; (16be4 <nvmc_wait+0xc>)
   16bda:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   16bde:	2b00      	cmp	r3, #0
   16be0:	d0fb      	beq.n	16bda <nvmc_wait+0x2>
}
   16be2:	4770      	bx	lr
   16be4:	4001e000 	.word	0x4001e000

00016be8 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   16be8:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
   16bea:	f007 fa3c 	bl	1e066 <nrf52_errata_108>
   16bee:	b140      	cbz	r0, 16c02 <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   16bf0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   16bf4:	4a90      	ldr	r2, [pc, #576]	; (16e38 <SystemInit+0x250>)
   16bf6:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
   16bfa:	f3c3 2304 	ubfx	r3, r3, #8, #5
   16bfe:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
   16c02:	f7ff ffd5 	bl	16bb0 <nrf52_errata_16>
   16c06:	b110      	cbz	r0, 16c0e <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   16c08:	4b8c      	ldr	r3, [pc, #560]	; (16e3c <SystemInit+0x254>)
   16c0a:	4a8d      	ldr	r2, [pc, #564]	; (16e40 <SystemInit+0x258>)
   16c0c:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
   16c0e:	f007 fa2a 	bl	1e066 <nrf52_errata_108>
   16c12:	b148      	cbz	r0, 16c28 <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   16c14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   16c18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   16c1c:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
   16c20:	f3c3 3342 	ubfx	r3, r3, #13, #3
   16c24:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
   16c28:	f7ff ffc2 	bl	16bb0 <nrf52_errata_16>
   16c2c:	b130      	cbz	r0, 16c3c <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   16c2e:	4a85      	ldr	r2, [pc, #532]	; (16e44 <SystemInit+0x25c>)
   16c30:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
   16c34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   16c38:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   16c3c:	f007 fa13 	bl	1e066 <nrf52_errata_108>
   16c40:	b140      	cbz	r0, 16c54 <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
   16c42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   16c46:	2200      	movs	r2, #0
   16c48:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   16c4c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   16c50:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
   16c54:	f7ff ffac 	bl	16bb0 <nrf52_errata_16>
   16c58:	b120      	cbz	r0, 16c64 <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
   16c5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   16c5e:	2203      	movs	r2, #3
   16c60:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
   16c64:	f7ff ffa4 	bl	16bb0 <nrf52_errata_16>
   16c68:	b160      	cbz	r0, 16c84 <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
   16c6a:	4b77      	ldr	r3, [pc, #476]	; (16e48 <SystemInit+0x260>)
   16c6c:	2205      	movs	r2, #5
   16c6e:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
   16c72:	2201      	movs	r2, #1
   16c74:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
   16c78:	2200      	movs	r2, #0
   16c7a:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
   16c7e:	223f      	movs	r2, #63	; 0x3f
   16c80:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   16c84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   16c88:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   16c8c:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   16c8e:	bf09      	itett	eq
   16c90:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   16c94:	f8d3 3134 	ldrne.w	r3, [r3, #308]	; 0x134
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   16c98:	f893 2fe0 	ldrbeq.w	r2, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   16c9c:	f8d3 3fe8 	ldreq.w	r3, [r3, #4072]	; 0xfe8
   16ca0:	bf08      	it	eq
   16ca2:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   16ca6:	2a06      	cmp	r2, #6
   16ca8:	d14d      	bne.n	16d46 <SystemInit+0x15e>
            {
                switch(var2)
   16caa:	3b03      	subs	r3, #3
   16cac:	2b04      	cmp	r3, #4
   16cae:	d803      	bhi.n	16cb8 <SystemInit+0xd0>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   16cb0:	4a66      	ldr	r2, [pc, #408]	; (16e4c <SystemInit+0x264>)
   16cb2:	5cd3      	ldrb	r3, [r2, r3]
   16cb4:	2b00      	cmp	r3, #0
   16cb6:	d046      	beq.n	16d46 <SystemInit+0x15e>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   16cb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   16cbc:	4b64      	ldr	r3, [pc, #400]	; (16e50 <SystemInit+0x268>)
   16cbe:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   16cc2:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   16cc6:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   16cca:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   16cce:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   16cd2:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   16cd6:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   16cda:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   16cde:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   16ce2:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   16ce6:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   16cea:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   16cee:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   16cf2:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   16cf6:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   16cfa:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   16cfe:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   16d02:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   16d06:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   16d0a:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   16d0e:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   16d12:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   16d16:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   16d1a:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   16d1e:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   16d22:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   16d26:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   16d2a:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   16d2e:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   16d32:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   16d36:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   16d3a:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   16d3e:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   16d42:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
   16d46:	f007 f98e 	bl	1e066 <nrf52_errata_108>
   16d4a:	b148      	cbz	r0, 16d60 <SystemInit+0x178>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   16d4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   16d50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   16d54:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   16d58:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   16d5c:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   16d60:	f007 f981 	bl	1e066 <nrf52_errata_108>
   16d64:	b148      	cbz	r0, 16d7a <SystemInit+0x192>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   16d66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   16d6a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   16d6e:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   16d70:	bf44      	itt	mi
   16d72:	f06f 0201 	mvnmi.w	r2, #1
   16d76:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   16d7a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   16d7e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   16d82:	2a06      	cmp	r2, #6
   16d84:	d126      	bne.n	16dd4 <SystemInit+0x1ec>
            {
                switch(var2)
   16d86:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   16d8a:	3b03      	subs	r3, #3
   16d8c:	2b04      	cmp	r3, #4
   16d8e:	d802      	bhi.n	16d96 <SystemInit+0x1ae>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
   16d90:	4a30      	ldr	r2, [pc, #192]	; (16e54 <SystemInit+0x26c>)
   16d92:	5cd3      	ldrb	r3, [r2, r3]
   16d94:	b163      	cbz	r3, 16db0 <SystemInit+0x1c8>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   16d96:	4a30      	ldr	r2, [pc, #192]	; (16e58 <SystemInit+0x270>)
   16d98:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
   16d9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   16da0:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   16da4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   16da8:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   16dac:	2b06      	cmp	r3, #6
   16dae:	d111      	bne.n	16dd4 <SystemInit+0x1ec>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   16db0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   16db4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   16db8:	3b03      	subs	r3, #3
   16dba:	2b04      	cmp	r3, #4
   16dbc:	d802      	bhi.n	16dc4 <SystemInit+0x1dc>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
   16dbe:	4a27      	ldr	r2, [pc, #156]	; (16e5c <SystemInit+0x274>)
   16dc0:	5cd3      	ldrb	r3, [r2, r3]
   16dc2:	b13b      	cbz	r3, 16dd4 <SystemInit+0x1ec>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   16dc4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   16dc8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   16dcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   16dd0:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   16dd4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   16dd8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   16ddc:	2a00      	cmp	r2, #0
   16dde:	db03      	blt.n	16de8 <SystemInit+0x200>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   16de0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   16de4:	2b00      	cmp	r3, #0
   16de6:	da22      	bge.n	16e2e <SystemInit+0x246>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   16de8:	491d      	ldr	r1, [pc, #116]	; (16e60 <SystemInit+0x278>)
   16dea:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   16dec:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   16df0:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   16df4:	2415      	movs	r4, #21
    nvmc_wait();
   16df6:	f7ff feef 	bl	16bd8 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   16dfa:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   16dfe:	f7ff feeb 	bl	16bd8 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   16e02:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   16e06:	f7ff fee7 	bl	16bd8 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   16e0a:	2300      	movs	r3, #0
   16e0c:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   16e10:	f7ff fee2 	bl	16bd8 <nvmc_wait>
   16e14:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   16e18:	490a      	ldr	r1, [pc, #40]	; (16e44 <SystemInit+0x25c>)
   16e1a:	4b12      	ldr	r3, [pc, #72]	; (16e64 <SystemInit+0x27c>)
   16e1c:	68ca      	ldr	r2, [r1, #12]
   16e1e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   16e22:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   16e24:	60cb      	str	r3, [r1, #12]
   16e26:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   16e2a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   16e2c:	e7fd      	b.n	16e2a <SystemInit+0x242>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   16e2e:	4b0e      	ldr	r3, [pc, #56]	; (16e68 <SystemInit+0x280>)
   16e30:	4a0e      	ldr	r2, [pc, #56]	; (16e6c <SystemInit+0x284>)
   16e32:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   16e34:	bd10      	pop	{r4, pc}
   16e36:	bf00      	nop
   16e38:	40013000 	.word	0x40013000
   16e3c:	4007c000 	.word	0x4007c000
   16e40:	baadf00d 	.word	0xbaadf00d
   16e44:	e000ed00 	.word	0xe000ed00
   16e48:	40005000 	.word	0x40005000
   16e4c:	000234b0 	.word	0x000234b0
   16e50:	4000c000 	.word	0x4000c000
   16e54:	000234b5 	.word	0x000234b5
   16e58:	40001000 	.word	0x40001000
   16e5c:	000234ba 	.word	0x000234ba
   16e60:	4001e000 	.word	0x4001e000
   16e64:	05fa0004 	.word	0x05fa0004
   16e68:	200009d0 	.word	0x200009d0
   16e6c:	03d09000 	.word	0x03d09000

00016e70 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   16e70:	4b04      	ldr	r3, [pc, #16]	; (16e84 <nrfx_clock_init+0x14>)
   16e72:	791a      	ldrb	r2, [r3, #4]
   16e74:	b922      	cbnz	r2, 16e80 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   16e76:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   16e78:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   16e7a:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   16e7c:	4802      	ldr	r0, [pc, #8]	; (16e88 <nrfx_clock_init+0x18>)
   16e7e:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   16e80:	4802      	ldr	r0, [pc, #8]	; (16e8c <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   16e82:	4770      	bx	lr
   16e84:	20002ccc 	.word	0x20002ccc
   16e88:	0bad0000 	.word	0x0bad0000
   16e8c:	0bad000c 	.word	0x0bad000c

00016e90 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   16e90:	b530      	push	{r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   16e92:	b110      	cbz	r0, 16e9a <nrfx_clock_start+0xa>
   16e94:	2801      	cmp	r0, #1
   16e96:	d034      	beq.n	16f02 <nrfx_clock_start+0x72>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   16e98:	bd30      	pop	{r4, r5, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   16e9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   16e9e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   16ea2:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   16ea6:	03c9      	lsls	r1, r1, #15
   16ea8:	d529      	bpl.n	16efe <nrfx_clock_start+0x6e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   16eaa:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   16eae:	2a01      	cmp	r2, #1
   16eb0:	d125      	bne.n	16efe <nrfx_clock_start+0x6e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   16eb2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16eb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   16eba:	2200      	movs	r2, #0
   16ebc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   16ec0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   16ec4:	2202      	movs	r2, #2
   16ec6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    core_debug = CoreDebug->DEMCR;
   16eca:	4a13      	ldr	r2, [pc, #76]	; (16f18 <nrfx_clock_start+0x88>)
   16ecc:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
   16ed0:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
   16ed4:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    dwt_ctrl = DWT->CTRL;
   16ed8:	4b10      	ldr	r3, [pc, #64]	; (16f1c <nrfx_clock_start+0x8c>)
   16eda:	681c      	ldr	r4, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
   16edc:	f044 0101 	orr.w	r1, r4, #1
   16ee0:	6019      	str	r1, [r3, #0]
    cyccnt_inital = DWT->CYCCNT;
   16ee2:	685d      	ldr	r5, [r3, #4]
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
   16ee4:	6859      	ldr	r1, [r3, #4]
   16ee6:	1b49      	subs	r1, r1, r5
   16ee8:	f5b1 5f0a 	cmp.w	r1, #8832	; 0x2280
   16eec:	d3fa      	bcc.n	16ee4 <nrfx_clock_start+0x54>
    DWT->CTRL = dwt_ctrl;
   16eee:	601c      	str	r4, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16ef0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    CoreDebug->DEMCR = core_debug;
   16ef4:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
   16ef8:	2201      	movs	r2, #1
   16efa:	609a      	str	r2, [r3, #8]
}
   16efc:	e7cc      	b.n	16e98 <nrfx_clock_start+0x8>
    p_reg->LFCLKSRC = (uint32_t)(source);
   16efe:	2200      	movs	r2, #0
   16f00:	e7d7      	b.n	16eb2 <nrfx_clock_start+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16f02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   16f06:	2200      	movs	r2, #0
   16f08:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   16f0c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   16f10:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16f14:	6018      	str	r0, [r3, #0]
}
   16f16:	e7bf      	b.n	16e98 <nrfx_clock_start+0x8>
   16f18:	e000ed00 	.word	0xe000ed00
   16f1c:	e0001000 	.word	0xe0001000

00016f20 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   16f20:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   16f22:	b110      	cbz	r0, 16f2a <nrfx_clock_stop+0xa>
   16f24:	2801      	cmp	r0, #1
   16f26:	d017      	beq.n	16f58 <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   16f28:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   16f2a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   16f2e:	2302      	movs	r3, #2
   16f30:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16f34:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   16f38:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16f3c:	2301      	movs	r3, #1
   16f3e:	60e3      	str	r3, [r4, #12]
   16f40:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   16f44:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   16f48:	03db      	lsls	r3, r3, #15
   16f4a:	d5ed      	bpl.n	16f28 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   16f4c:	2001      	movs	r0, #1
   16f4e:	f007 f899 	bl	1e084 <nrfx_busy_wait>
   16f52:	3d01      	subs	r5, #1
   16f54:	d1f6      	bne.n	16f44 <nrfx_clock_stop+0x24>
   16f56:	e7e7      	b.n	16f28 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
   16f58:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16f5c:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   16f5e:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16f62:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   16f66:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16f6a:	6060      	str	r0, [r4, #4]
   16f6c:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   16f70:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   16f74:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
   16f78:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   16f7a:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   16f7e:	d505      	bpl.n	16f8c <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   16f80:	b123      	cbz	r3, 16f8c <nrfx_clock_stop+0x6c>
   16f82:	2001      	movs	r0, #1
   16f84:	f007 f87e 	bl	1e084 <nrfx_busy_wait>
   16f88:	3d01      	subs	r5, #1
   16f8a:	d1f1      	bne.n	16f70 <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
   16f8c:	4b01      	ldr	r3, [pc, #4]	; (16f94 <nrfx_clock_stop+0x74>)
   16f8e:	2200      	movs	r2, #0
   16f90:	715a      	strb	r2, [r3, #5]
   16f92:	e7c9      	b.n	16f28 <nrfx_clock_stop+0x8>
   16f94:	20002ccc 	.word	0x20002ccc

00016f98 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   16f98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   16f9c:	b510      	push	{r4, lr}
   16f9e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   16fa2:	b16a      	cbz	r2, 16fc0 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16fa4:	2200      	movs	r2, #0
   16fa6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   16faa:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   16fae:	2201      	movs	r2, #1
   16fb0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   16fb4:	4b11      	ldr	r3, [pc, #68]	; (16ffc <nrfx_power_clock_irq_handler+0x64>)
   16fb6:	7958      	ldrb	r0, [r3, #5]
   16fb8:	b910      	cbnz	r0, 16fc0 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
   16fba:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   16fbc:	681b      	ldr	r3, [r3, #0]
   16fbe:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   16fc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   16fc4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   16fc8:	b172      	cbz	r2, 16fe8 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16fca:	2200      	movs	r2, #0
   16fcc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   16fd0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   16fd4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   16fd8:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   16fdc:	0792      	lsls	r2, r2, #30
   16fde:	d104      	bne.n	16fea <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
   16fe0:	2201      	movs	r2, #1
   16fe2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16fe6:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   16fe8:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   16fea:	2202      	movs	r2, #2
   16fec:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   16ff0:	4b02      	ldr	r3, [pc, #8]	; (16ffc <nrfx_power_clock_irq_handler+0x64>)
}
   16ff2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   16ff6:	681b      	ldr	r3, [r3, #0]
   16ff8:	2001      	movs	r0, #1
   16ffa:	4718      	bx	r3
   16ffc:	20002ccc 	.word	0x20002ccc

00017000 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   17000:	2301      	movs	r3, #1
   17002:	fa03 f000 	lsl.w	r0, r3, r0
   17006:	b2c3      	uxtb	r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   17008:	b193      	cbz	r3, 17030 <nrfx_gpiote_channel_free+0x30>
	__asm__ volatile(
   1700a:	f04f 0320 	mov.w	r3, #32
   1700e:	f3ef 8111 	mrs	r1, BASEPRI
   17012:	f383 8812 	msr	BASEPRI_MAX, r3
   17016:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   1701a:	4a06      	ldr	r2, [pc, #24]	; (17034 <nrfx_gpiote_channel_free+0x34>)
   1701c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   1701e:	ea23 0000 	bic.w	r0, r3, r0
   17022:	64d0      	str	r0, [r2, #76]	; 0x4c
	__asm__ volatile(
   17024:	f381 8811 	msr	BASEPRI, r1
   17028:	f3bf 8f6f 	isb	sy
   1702c:	4802      	ldr	r0, [pc, #8]	; (17038 <nrfx_gpiote_channel_free+0x38>)
   1702e:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   17030:	4802      	ldr	r0, [pc, #8]	; (1703c <nrfx_gpiote_channel_free+0x3c>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   17032:	4770      	bx	lr
   17034:	20002cd4 	.word	0x20002cd4
   17038:	0bad0000 	.word	0x0bad0000
   1703c:	0bad0004 	.word	0x0bad0004

00017040 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   17040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17044:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   17046:	f8df e05c 	ldr.w	lr, [pc, #92]	; 170a4 <nrfx_gpiote_channel_alloc+0x64>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   1704a:	4817      	ldr	r0, [pc, #92]	; (170a8 <nrfx_gpiote_channel_alloc+0x68>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   1704c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 170ac <nrfx_gpiote_channel_alloc+0x6c>
{
   17050:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   17052:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
   17054:	2601      	movs	r6, #1
   17056:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   17058:	f04f 0120 	mov.w	r1, #32
   1705c:	f3ef 8c11 	mrs	ip, BASEPRI
   17060:	f381 8812 	msr	BASEPRI_MAX, r1
   17064:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   17068:	fa22 f103 	lsr.w	r1, r2, r3
   1706c:	07c9      	lsls	r1, r1, #31
   1706e:	d50a      	bpl.n	17086 <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   17070:	f8de 104c 	ldr.w	r1, [lr, #76]	; 0x4c
   17074:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   17078:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
   1707a:	bf01      	itttt	eq
   1707c:	4339      	orreq	r1, r7
   1707e:	f8ce 104c 	streq.w	r1, [lr, #76]	; 0x4c
            err_code = NRFX_SUCCESS;
   17082:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
   17084:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   17086:	f38c 8811 	msr	BASEPRI, ip
   1708a:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   1708e:	4540      	cmp	r0, r8
   17090:	d005      	beq.n	1709e <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   17092:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   17096:	439a      	bics	r2, r3
   17098:	f104 0401 	add.w	r4, r4, #1
   1709c:	d1db      	bne.n	17056 <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1709e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   170a2:	bf00      	nop
   170a4:	20002cd4 	.word	0x20002cd4
   170a8:	0bad0002 	.word	0x0bad0002
   170ac:	0bad0000 	.word	0x0bad0000

000170b0 <nvmc_word_write>:
   170b0:	4a04      	ldr	r2, [pc, #16]	; (170c4 <nvmc_word_write+0x14>)
   170b2:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   170b6:	07db      	lsls	r3, r3, #31
   170b8:	d5fb      	bpl.n	170b2 <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   170ba:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   170bc:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   170c0:	4770      	bx	lr
   170c2:	bf00      	nop
   170c4:	4001e000 	.word	0x4001e000

000170c8 <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   170c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   170cc:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   170ce:	fbb0 f3f2 	udiv	r3, r0, r2
   170d2:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   170d6:	b973      	cbnz	r3, 170f6 <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   170d8:	4b08      	ldr	r3, [pc, #32]	; (170fc <nrfx_nvmc_page_erase+0x34>)
   170da:	2202      	movs	r2, #2
   170dc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   170e0:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   170e4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   170e8:	07d2      	lsls	r2, r2, #31
   170ea:	d5fb      	bpl.n	170e4 <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
   170ec:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   170ee:	4804      	ldr	r0, [pc, #16]	; (17100 <nrfx_nvmc_page_erase+0x38>)
   170f0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   170f4:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   170f6:	4803      	ldr	r0, [pc, #12]	; (17104 <nrfx_nvmc_page_erase+0x3c>)
}
   170f8:	4770      	bx	lr
   170fa:	bf00      	nop
   170fc:	4001e000 	.word	0x4001e000
   17100:	0bad0000 	.word	0x0bad0000
   17104:	0bad000a 	.word	0x0bad000a

00017108 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   17108:	b510      	push	{r4, lr}
   1710a:	4c05      	ldr	r4, [pc, #20]	; (17120 <nrfx_nvmc_word_write+0x18>)
   1710c:	2301      	movs	r3, #1
   1710e:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   17112:	f7ff ffcd 	bl	170b0 <nvmc_word_write>
   17116:	2300      	movs	r3, #0
   17118:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
   1711c:	bd10      	pop	{r4, pc}
   1711e:	bf00      	nop
   17120:	4001e000 	.word	0x4001e000

00017124 <nrfx_ppi_channel_alloc>:


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   17124:	4b18      	ldr	r3, [pc, #96]	; (17188 <nrfx_ppi_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
            *p_channel = channel;
            err_code   = NRFX_SUCCESS;
   17126:	f8df c064 	ldr.w	ip, [pc, #100]	; 1718c <nrfx_ppi_channel_alloc+0x68>
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1712a:	681b      	ldr	r3, [r3, #0]
{
   1712c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   17130:	43db      	mvns	r3, r3
{
   17132:	4605      	mov	r5, r0
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   17134:	4f16      	ldr	r7, [pc, #88]	; (17190 <nrfx_ppi_channel_alloc+0x6c>)
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   17136:	4817      	ldr	r0, [pc, #92]	; (17194 <nrfx_ppi_channel_alloc+0x70>)
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   17138:	f3c3 0313 	ubfx	r3, r3, #0, #20
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   1713c:	2400      	movs	r4, #0
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
   1713e:	f04f 0e01 	mov.w	lr, #1
   17142:	b2e6      	uxtb	r6, r4
   17144:	b90b      	cbnz	r3, 1714a <nrfx_ppi_channel_alloc+0x26>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   17146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1714a:	f04f 0220 	mov.w	r2, #32
   1714e:	f3ef 8811 	mrs	r8, BASEPRI
   17152:	f382 8812 	msr	BASEPRI_MAX, r2
   17156:	f3bf 8f6f 	isb	sy
   1715a:	fa0e f206 	lsl.w	r2, lr, r6
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   1715e:	421a      	tst	r2, r3
   17160:	d006      	beq.n	17170 <nrfx_ppi_channel_alloc+0x4c>
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   17162:	6839      	ldr	r1, [r7, #0]
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   17164:	420a      	tst	r2, r1
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
   17166:	bf01      	itttt	eq
   17168:	4311      	orreq	r1, r2
   1716a:	6039      	streq	r1, [r7, #0]
            *p_channel = channel;
   1716c:	702e      	strbeq	r6, [r5, #0]
            err_code   = NRFX_SUCCESS;
   1716e:	4660      	moveq	r0, ip
	__asm__ volatile(
   17170:	f388 8811 	msr	BASEPRI, r8
   17174:	f3bf 8f6f 	isb	sy
        if (err_code == NRFX_SUCCESS)
   17178:	4560      	cmp	r0, ip
   1717a:	f104 0401 	add.w	r4, r4, #1
   1717e:	d0e2      	beq.n	17146 <nrfx_ppi_channel_alloc+0x22>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
   17180:	ea23 0302 	bic.w	r3, r3, r2
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   17184:	e7dd      	b.n	17142 <nrfx_ppi_channel_alloc+0x1e>
   17186:	bf00      	nop
   17188:	0001f74c 	.word	0x0001f74c
   1718c:	0bad0000 	.word	0x0bad0000
   17190:	20002d24 	.word	0x20002d24
   17194:	0bad0002 	.word	0x0bad0002

00017198 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   17198:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1719a:	4c11      	ldr	r4, [pc, #68]	; (171e0 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   1719c:	4a11      	ldr	r2, [pc, #68]	; (171e4 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   1719e:	4912      	ldr	r1, [pc, #72]	; (171e8 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   171a0:	2303      	movs	r3, #3
   171a2:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   171a4:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   171a6:	4b11      	ldr	r3, [pc, #68]	; (171ec <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
   171a8:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   171aa:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   171ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
   171b0:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   171b2:	2300      	movs	r3, #0
   171b4:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   171b6:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   171b8:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   171ba:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   171bc:	4a0c      	ldr	r2, [pc, #48]	; (171f0 <_DoInit+0x58>)
   171be:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   171c0:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   171c2:	2210      	movs	r2, #16
   171c4:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   171c6:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   171c8:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   171ca:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   171cc:	f002 fffd 	bl	1a1ca <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   171d0:	4908      	ldr	r1, [pc, #32]	; (171f4 <_DoInit+0x5c>)
   171d2:	4620      	mov	r0, r4
   171d4:	f002 fff9 	bl	1a1ca <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   171d8:	2320      	movs	r3, #32
   171da:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   171dc:	bd10      	pop	{r4, pc}
   171de:	bf00      	nop
   171e0:	20002d28 	.word	0x20002d28
   171e4:	000234c4 	.word	0x000234c4
   171e8:	000234cd 	.word	0x000234cd
   171ec:	20003024 	.word	0x20003024
   171f0:	20003014 	.word	0x20003014
   171f4:	000234d1 	.word	0x000234d1

000171f8 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   171f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   171fc:	4f23      	ldr	r7, [pc, #140]	; (1728c <SEGGER_RTT_WriteSkipNoLock+0x94>)
   171fe:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   17202:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   17204:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   17208:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
   1720a:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   1720c:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1720e:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   17210:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   17212:	d834      	bhi.n	1727e <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   17214:	f8d2 a020 	ldr.w	sl, [r2, #32]
   17218:	ebaa 0905 	sub.w	r9, sl, r5
   1721c:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
   17220:	4294      	cmp	r4, r2
   17222:	d811      	bhi.n	17248 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   17224:	f04f 0918 	mov.w	r9, #24
   17228:	fb06 9309 	mla	r3, r6, r9, r9
   1722c:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
   1722e:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   17230:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
   17232:	4641      	mov	r1, r8
   17234:	4428      	add	r0, r5
   17236:	f003 f822 	bl	1a27e <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   1723a:	fb09 7606 	mla	r6, r9, r6, r7
   1723e:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   17240:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
   17242:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   17244:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   17248:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   1724a:	429c      	cmp	r4, r3
   1724c:	d81b      	bhi.n	17286 <SEGGER_RTT_WriteSkipNoLock+0x8e>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1724e:	fb00 bb0b 	mla	fp, r0, fp, fp
   17252:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   17254:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   17256:	f8db 0004 	ldr.w	r0, [fp, #4]
   1725a:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   1725c:	4428      	add	r0, r5
   1725e:	f003 f80e 	bl	1a27e <memcpy>
      if (NumBytes) {
   17262:	ebb4 040a 	subs.w	r4, r4, sl
   17266:	d006      	beq.n	17276 <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy((void*)pDst, pData + Rem, NumBytes);
   17268:	f8db 0004 	ldr.w	r0, [fp, #4]
   1726c:	4622      	mov	r2, r4
   1726e:	eb08 0109 	add.w	r1, r8, r9
   17272:	f003 f804 	bl	1a27e <memcpy>
      pRing->WrOff = NumBytes;
   17276:	2018      	movs	r0, #24
   17278:	fb00 7606 	mla	r6, r0, r6, r7
   1727c:	e7e0      	b.n	17240 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
   1727e:	3b01      	subs	r3, #1
   17280:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   17282:	42a3      	cmp	r3, r4
   17284:	d2ce      	bcs.n	17224 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   17286:	2000      	movs	r0, #0
   17288:	e7dc      	b.n	17244 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   1728a:	bf00      	nop
   1728c:	20002d28 	.word	0x20002d28

00017290 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   17290:	b570      	push	{r4, r5, r6, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   17292:	4b16      	ldr	r3, [pc, #88]	; (172ec <SEGGER_RTT_WriteNoLock+0x5c>)
   17294:	2418      	movs	r4, #24
   17296:	fb00 4504 	mla	r5, r0, r4, r4
   1729a:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   1729c:	fb04 3300 	mla	r3, r4, r0, r3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   172a0:	4616      	mov	r6, r2
  switch (pRing->Flags) {
   172a2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   172a4:	2c01      	cmp	r4, #1
   172a6:	d00e      	beq.n	172c6 <SEGGER_RTT_WriteNoLock+0x36>
   172a8:	2c02      	cmp	r4, #2
   172aa:	d018      	beq.n	172de <SEGGER_RTT_WriteNoLock+0x4e>
   172ac:	b9e4      	cbnz	r4, 172e8 <SEGGER_RTT_WriteNoLock+0x58>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
   172ae:	4628      	mov	r0, r5
   172b0:	f006 ff02 	bl	1e0b8 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
   172b4:	4286      	cmp	r6, r0
   172b6:	d804      	bhi.n	172c2 <SEGGER_RTT_WriteNoLock+0x32>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
   172b8:	4632      	mov	r2, r6
   172ba:	4628      	mov	r0, r5
   172bc:	f006 ff05 	bl	1e0ca <_WriteNoCheck>
   172c0:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
   172c2:	4620      	mov	r0, r4
   172c4:	bd70      	pop	{r4, r5, r6, pc}
    Avail = _GetAvailWriteSpace(pRing);
   172c6:	4628      	mov	r0, r5
   172c8:	f006 fef6 	bl	1e0b8 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
   172cc:	4286      	cmp	r6, r0
   172ce:	4634      	mov	r4, r6
   172d0:	bf28      	it	cs
   172d2:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
   172d4:	4622      	mov	r2, r4
   172d6:	4628      	mov	r0, r5
   172d8:	f006 fef7 	bl	1e0ca <_WriteNoCheck>
    break;
   172dc:	e7f1      	b.n	172c2 <SEGGER_RTT_WriteNoLock+0x32>
    Status = _WriteBlocking(pRing, pData, NumBytes);
   172de:	4628      	mov	r0, r5
}
   172e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
   172e4:	f006 bf0d 	b.w	1e102 <_WriteBlocking>
  switch (pRing->Flags) {
   172e8:	2400      	movs	r4, #0
  return Status;
   172ea:	e7ea      	b.n	172c2 <SEGGER_RTT_WriteNoLock+0x32>
   172ec:	20002d28 	.word	0x20002d28

000172f0 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   172f0:	4b03      	ldr	r3, [pc, #12]	; (17300 <SEGGER_RTT_HasDataUp+0x10>)
   172f2:	2218      	movs	r2, #24
   172f4:	fb02 3300 	mla	r3, r2, r0, r3
   172f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   172fa:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   172fc:	1a80      	subs	r0, r0, r2
   172fe:	4770      	bx	lr
   17300:	20002d28 	.word	0x20002d28

00017304 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   17304:	4b0e      	ldr	r3, [pc, #56]	; (17340 <z_sys_init_run_level+0x3c>)
{
   17306:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   17308:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1730c:	3001      	adds	r0, #1
   1730e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   17312:	42a6      	cmp	r6, r4
   17314:	d800      	bhi.n	17318 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   17316:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   17318:	e9d4 3500 	ldrd	r3, r5, [r4]
   1731c:	4628      	mov	r0, r5
   1731e:	4798      	blx	r3
		if (dev != NULL) {
   17320:	b165      	cbz	r5, 1733c <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   17322:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   17324:	b130      	cbz	r0, 17334 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   17326:	2800      	cmp	r0, #0
   17328:	bfb8      	it	lt
   1732a:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   1732c:	28ff      	cmp	r0, #255	; 0xff
   1732e:	bfa8      	it	ge
   17330:	20ff      	movge	r0, #255	; 0xff
   17332:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   17334:	785a      	ldrb	r2, [r3, #1]
   17336:	f042 0201 	orr.w	r2, r2, #1
   1733a:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1733c:	3408      	adds	r4, #8
   1733e:	e7e8      	b.n	17312 <z_sys_init_run_level+0xe>
   17340:	0001f81c 	.word	0x0001f81c

00017344 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   17344:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   17346:	4605      	mov	r5, r0
   17348:	b910      	cbnz	r0, 17350 <z_impl_device_get_binding+0xc>
		return NULL;
   1734a:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   1734c:	4620      	mov	r0, r4
   1734e:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   17350:	7803      	ldrb	r3, [r0, #0]
   17352:	2b00      	cmp	r3, #0
   17354:	d0f9      	beq.n	1734a <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   17356:	4c0e      	ldr	r4, [pc, #56]	; (17390 <z_impl_device_get_binding+0x4c>)
   17358:	4e0e      	ldr	r6, [pc, #56]	; (17394 <z_impl_device_get_binding+0x50>)
   1735a:	42b4      	cmp	r4, r6
   1735c:	d108      	bne.n	17370 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   1735e:	4c0c      	ldr	r4, [pc, #48]	; (17390 <z_impl_device_get_binding+0x4c>)
   17360:	42b4      	cmp	r4, r6
   17362:	d0f2      	beq.n	1734a <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   17364:	4620      	mov	r0, r4
   17366:	f006 fefd 	bl	1e164 <z_device_ready>
   1736a:	b950      	cbnz	r0, 17382 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   1736c:	3418      	adds	r4, #24
   1736e:	e7f7      	b.n	17360 <z_impl_device_get_binding+0x1c>
		if (z_device_ready(dev) && (dev->name == name)) {
   17370:	4620      	mov	r0, r4
   17372:	f006 fef7 	bl	1e164 <z_device_ready>
   17376:	b110      	cbz	r0, 1737e <z_impl_device_get_binding+0x3a>
   17378:	6823      	ldr	r3, [r4, #0]
   1737a:	42ab      	cmp	r3, r5
   1737c:	d0e6      	beq.n	1734c <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   1737e:	3418      	adds	r4, #24
   17380:	e7eb      	b.n	1735a <z_impl_device_get_binding+0x16>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   17382:	6821      	ldr	r1, [r4, #0]
   17384:	4628      	mov	r0, r5
   17386:	f002 ff4c 	bl	1a222 <strcmp>
   1738a:	2800      	cmp	r0, #0
   1738c:	d1ee      	bne.n	1736c <z_impl_device_get_binding+0x28>
   1738e:	e7dd      	b.n	1734c <z_impl_device_get_binding+0x8>
   17390:	0001ebcc 	.word	0x0001ebcc
   17394:	0001ec5c 	.word	0x0001ec5c

00017398 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   17398:	4b01      	ldr	r3, [pc, #4]	; (173a0 <z_impl_z_errno+0x8>)
   1739a:	6898      	ldr	r0, [r3, #8]
}
   1739c:	3064      	adds	r0, #100	; 0x64
   1739e:	4770      	bx	lr
   173a0:	20002dd0 	.word	0x20002dd0

000173a4 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   173a4:	b510      	push	{r4, lr}
   173a6:	4604      	mov	r4, r0
	z_impl_log_panic();
   173a8:	f7eb fb16 	bl	29d8 <z_impl_log_panic>
   173ac:	4b06      	ldr	r3, [pc, #24]	; (173c8 <k_sys_fatal_error_handler+0x24>)
   173ae:	4907      	ldr	r1, [pc, #28]	; (173cc <k_sys_fatal_error_handler+0x28>)
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
   173b0:	4807      	ldr	r0, [pc, #28]	; (173d0 <k_sys_fatal_error_handler+0x2c>)
   173b2:	1ac9      	subs	r1, r1, r3
   173b4:	08c9      	lsrs	r1, r1, #3
   173b6:	0189      	lsls	r1, r1, #6
   173b8:	f041 0101 	orr.w	r1, r1, #1
   173bc:	f002 f841 	bl	19442 <log_0>
	arch_system_halt(reason);
   173c0:	4620      	mov	r0, r4
   173c2:	f006 fed9 	bl	1e178 <arch_system_halt>
   173c6:	bf00      	nop
   173c8:	0001ef2c 	.word	0x0001ef2c
   173cc:	0001f144 	.word	0x0001f144
   173d0:	000234d8 	.word	0x000234d8

000173d4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   173d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   173d8:	4606      	mov	r6, r0
   173da:	460f      	mov	r7, r1
	__asm__ volatile(
   173dc:	f04f 0320 	mov.w	r3, #32
   173e0:	f3ef 8811 	mrs	r8, BASEPRI
   173e4:	f383 8812 	msr	BASEPRI_MAX, r3
   173e8:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   173ec:	f001 f832 	bl	18454 <z_impl_z_current_get>
   173f0:	4c1f      	ldr	r4, [pc, #124]	; (17470 <z_fatal_error+0x9c>)
   173f2:	4b20      	ldr	r3, [pc, #128]	; (17474 <z_fatal_error+0xa0>)
   173f4:	1ae4      	subs	r4, r4, r3
   173f6:	2e04      	cmp	r6, #4
   173f8:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   173fc:	bf96      	itet	ls
   173fe:	4a1e      	ldrls	r2, [pc, #120]	; (17478 <z_fatal_error+0xa4>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   17400:	4a1e      	ldrhi	r2, [pc, #120]	; (1747c <z_fatal_error+0xa8>)
   17402:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
   17406:	01a4      	lsls	r4, r4, #6
   17408:	f044 0301 	orr.w	r3, r4, #1
   1740c:	4605      	mov	r5, r0
   1740e:	f8ad 3000 	strh.w	r3, [sp]
   17412:	481b      	ldr	r0, [pc, #108]	; (17480 <z_fatal_error+0xac>)
   17414:	2300      	movs	r3, #0
   17416:	4631      	mov	r1, r6
   17418:	f002 f84d 	bl	194b6 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1741c:	b147      	cbz	r7, 17430 <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1741e:	69fb      	ldr	r3, [r7, #28]
   17420:	f3c3 0308 	ubfx	r3, r3, #0, #9
   17424:	b123      	cbz	r3, 17430 <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
   17426:	4817      	ldr	r0, [pc, #92]	; (17484 <z_fatal_error+0xb0>)
   17428:	f044 0101 	orr.w	r1, r4, #1
   1742c:	f002 f809 	bl	19442 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   17430:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   17434:	b12d      	cbz	r5, 17442 <z_fatal_error+0x6e>
   17436:	4628      	mov	r0, r5
   17438:	f006 ff5a 	bl	1e2f0 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1743c:	b108      	cbz	r0, 17442 <z_fatal_error+0x6e>
   1743e:	7803      	ldrb	r3, [r0, #0]
   17440:	b903      	cbnz	r3, 17444 <z_fatal_error+0x70>
		thread_name = "unknown";
   17442:	4811      	ldr	r0, [pc, #68]	; (17488 <z_fatal_error+0xb4>)
   17444:	f7eb f95a 	bl	26fc <z_log_strdup>
	LOG_ERR("Current thread: %p (%s)", thread,
   17448:	4623      	mov	r3, r4
   1744a:	4602      	mov	r2, r0
   1744c:	4629      	mov	r1, r5
   1744e:	480f      	ldr	r0, [pc, #60]	; (1748c <z_fatal_error+0xb8>)
   17450:	f002 f818 	bl	19484 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   17454:	4639      	mov	r1, r7
   17456:	4630      	mov	r0, r6
   17458:	f7ff ffa4 	bl	173a4 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1745c:	f388 8811 	msr	BASEPRI, r8
   17460:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   17464:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   17466:	b002      	add	sp, #8
   17468:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1746c:	f7ec bb32 	b.w	3ad4 <z_impl_k_thread_abort>
   17470:	0001f144 	.word	0x0001f144
   17474:	0001ef2c 	.word	0x0001ef2c
   17478:	0001f834 	.word	0x0001f834
   1747c:	000234e7 	.word	0x000234e7
   17480:	000234f5 	.word	0x000234f5
   17484:	0002351d 	.word	0x0002351d
   17488:	00020280 	.word	0x00020280
   1748c:	0002353e 	.word	0x0002353e

00017490 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   17490:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   17492:	2300      	movs	r3, #0
{
   17494:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
   17496:	2201      	movs	r2, #1
   17498:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1749c:	220f      	movs	r2, #15
   1749e:	e9cd 3202 	strd	r3, r2, [sp, #8]
   174a2:	9301      	str	r3, [sp, #4]
	struct k_thread *thread = &z_idle_threads[i];
   174a4:	4c0c      	ldr	r4, [pc, #48]	; (174d8 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   174a6:	4b0d      	ldr	r3, [pc, #52]	; (174dc <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
   174a8:	490d      	ldr	r1, [pc, #52]	; (174e0 <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   174aa:	2218      	movs	r2, #24
	struct k_thread *thread = &z_idle_threads[i];
   174ac:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   174b0:	fb02 3300 	mla	r3, r2, r0, r3
	z_setup_new_thread(thread, stack,
   174b4:	f44f 75b0 	mov.w	r5, #352	; 0x160
   174b8:	9300      	str	r3, [sp, #0]
   174ba:	fb05 1100 	mla	r1, r5, r0, r1
   174be:	4b09      	ldr	r3, [pc, #36]	; (174e4 <init_idle_thread+0x54>)
   174c0:	f44f 72a0 	mov.w	r2, #320	; 0x140
   174c4:	4620      	mov	r0, r4
   174c6:	f000 f909 	bl	176dc <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   174ca:	7b63      	ldrb	r3, [r4, #13]
   174cc:	f023 0304 	bic.w	r3, r3, #4
   174d0:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   174d2:	b007      	add	sp, #28
   174d4:	bd30      	pop	{r4, r5, pc}
   174d6:	bf00      	nop
   174d8:	200016f0 	.word	0x200016f0
   174dc:	20002dd0 	.word	0x20002dd0
   174e0:	20004d80 	.word	0x20004d80
   174e4:	00017851 	.word	0x00017851

000174e8 <bg_thread_main>:
{
   174e8:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   174ea:	4b0a      	ldr	r3, [pc, #40]	; (17514 <bg_thread_main+0x2c>)
   174ec:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   174ee:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   174f0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   174f2:	f7ff ff07 	bl	17304 <z_sys_init_run_level>
	boot_banner();
   174f6:	f001 fa73 	bl	189e0 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   174fa:	2003      	movs	r0, #3
   174fc:	f7ff ff02 	bl	17304 <z_sys_init_run_level>
	z_init_static_threads();
   17500:	f000 f94a 	bl	17798 <z_init_static_threads>
	main();
   17504:	f7ea f9d6 	bl	18b4 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   17508:	4a03      	ldr	r2, [pc, #12]	; (17518 <bg_thread_main+0x30>)
   1750a:	7b13      	ldrb	r3, [r2, #12]
   1750c:	f023 0301 	bic.w	r3, r3, #1
   17510:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   17512:	bd08      	pop	{r3, pc}
   17514:	20003424 	.word	0x20003424
   17518:	20001770 	.word	0x20001770

0001751c <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1751c:	4802      	ldr	r0, [pc, #8]	; (17528 <z_bss_zero+0xc>)
   1751e:	4a03      	ldr	r2, [pc, #12]	; (1752c <z_bss_zero+0x10>)
   17520:	2100      	movs	r1, #0
   17522:	1a12      	subs	r2, r2, r0
   17524:	f002 beb6 	b.w	1a294 <memset>
   17528:	20000d78 	.word	0x20000d78
   1752c:	20003428 	.word	0x20003428

00017530 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   17530:	b580      	push	{r7, lr}
   17532:	b0a6      	sub	sp, #152	; 0x98
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   17534:	f7eb f830 	bl	2598 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   17538:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 175f8 <z_cstart+0xc8>
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1753c:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   17540:	4d2e      	ldr	r5, [pc, #184]	; (175fc <z_cstart+0xcc>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   17542:	4e2f      	ldr	r6, [pc, #188]	; (17600 <z_cstart+0xd0>)
   17544:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   17546:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 17604 <z_cstart+0xd4>
   1754a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1754e:	2400      	movs	r4, #0
   17550:	616b      	str	r3, [r5, #20]
   17552:	23e0      	movs	r3, #224	; 0xe0
   17554:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   17558:	77ec      	strb	r4, [r5, #31]
   1755a:	762c      	strb	r4, [r5, #24]
   1755c:	766c      	strb	r4, [r5, #25]
   1755e:	76ac      	strb	r4, [r5, #26]
   17560:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   17564:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   17566:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1756a:	626b      	str	r3, [r5, #36]	; 0x24
   1756c:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   17570:	f7ec fa7a 	bl	3a68 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   17574:	f7eb fea4 	bl	32c0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   17578:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1757c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1757e:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   17580:	f7ec fb6e 	bl	3c60 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   17584:	f7ec fab8 	bl	3af8 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   17588:	f240 1301 	movw	r3, #257	; 0x101
   1758c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   17590:	ab06      	add	r3, sp, #24
   17592:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   17594:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   17598:	f006 fde3 	bl	1e162 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1759c:	4620      	mov	r0, r4
   1759e:	f7ff feb1 	bl	17304 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   175a2:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   175a4:	4d18      	ldr	r5, [pc, #96]	; (17608 <z_cstart+0xd8>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   175a6:	f7ff fead 	bl	17304 <z_sys_init_run_level>
	z_sched_init();
   175aa:	f000 fea5 	bl	182f8 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   175ae:	4b17      	ldr	r3, [pc, #92]	; (1760c <z_cstart+0xdc>)
   175b0:	9305      	str	r3, [sp, #20]
   175b2:	2301      	movs	r3, #1
   175b4:	4916      	ldr	r1, [pc, #88]	; (17610 <z_cstart+0xe0>)
   175b6:	9400      	str	r4, [sp, #0]
   175b8:	e9cd 4303 	strd	r4, r3, [sp, #12]
   175bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
   175c0:	464b      	mov	r3, r9
   175c2:	e9cd 4401 	strd	r4, r4, [sp, #4]
   175c6:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   175c8:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   175ca:	f000 f887 	bl	176dc <z_setup_new_thread>
   175ce:	7b6a      	ldrb	r2, [r5, #13]
   175d0:	4607      	mov	r7, r0
   175d2:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   175d6:	4628      	mov	r0, r5
   175d8:	736a      	strb	r2, [r5, #13]
   175da:	f007 f8e5 	bl	1e7a8 <z_ready_thread>
		init_idle_thread(i);
   175de:	4620      	mov	r0, r4
   175e0:	f7ff ff56 	bl	17490 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   175e4:	4b0b      	ldr	r3, [pc, #44]	; (17614 <z_cstart+0xe4>)
   175e6:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   175e8:	464a      	mov	r2, r9
   175ea:	4639      	mov	r1, r7
   175ec:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
   175ee:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
   175f0:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   175f4:	f7eb ffc0 	bl	3578 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   175f8:	20005700 	.word	0x20005700
   175fc:	e000ed00 	.word	0xe000ed00
   17600:	20002dd0 	.word	0x20002dd0
   17604:	000174e9 	.word	0x000174e9
   17608:	20001770 	.word	0x20001770
   1760c:	00021183 	.word	0x00021183
   17610:	20004960 	.word	0x20004960
   17614:	200016f0 	.word	0x200016f0

00017618 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   17618:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1761a:	4c06      	ldr	r4, [pc, #24]	; (17634 <statics_init+0x1c>)
   1761c:	4d06      	ldr	r5, [pc, #24]	; (17638 <statics_init+0x20>)
   1761e:	42ac      	cmp	r4, r5
   17620:	d301      	bcc.n	17626 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   17622:	2000      	movs	r0, #0
   17624:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   17626:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1762a:	4620      	mov	r0, r4
   1762c:	f006 fdad 	bl	1e18a <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   17630:	3414      	adds	r4, #20
   17632:	e7f4      	b.n	1761e <statics_init+0x6>
   17634:	20000b58 	.word	0x20000b58
   17638:	20000b58 	.word	0x20000b58

0001763c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1763c:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1763e:	4b0e      	ldr	r3, [pc, #56]	; (17678 <init_mem_slab_module+0x3c>)
   17640:	4c0e      	ldr	r4, [pc, #56]	; (1767c <init_mem_slab_module+0x40>)
   17642:	42a3      	cmp	r3, r4
   17644:	d301      	bcc.n	1764a <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   17646:	2000      	movs	r0, #0
	return rc;
}
   17648:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1764a:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1764e:	ea41 0200 	orr.w	r2, r1, r0
   17652:	f012 0203 	ands.w	r2, r2, #3
   17656:	d10b      	bne.n	17670 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   17658:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1765a:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1765c:	42aa      	cmp	r2, r5
   1765e:	d101      	bne.n	17664 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   17660:	331c      	adds	r3, #28
   17662:	e7ee      	b.n	17642 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   17664:	695e      	ldr	r6, [r3, #20]
   17666:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   17668:	3201      	adds	r2, #1
		slab->free_list = p;
   1766a:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1766c:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1766e:	e7f5      	b.n	1765c <init_mem_slab_module+0x20>
	return rc;
   17670:	f06f 0015 	mvn.w	r0, #21
   17674:	e7e8      	b.n	17648 <init_mem_slab_module+0xc>
   17676:	bf00      	nop
   17678:	20000ae8 	.word	0x20000ae8
   1767c:	20000b58 	.word	0x20000b58

00017680 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   17680:	b537      	push	{r0, r1, r2, r4, r5, lr}
   17682:	460c      	mov	r4, r1
	__asm__ volatile(
   17684:	f04f 0520 	mov.w	r5, #32
   17688:	f3ef 8111 	mrs	r1, BASEPRI
   1768c:	f385 8812 	msr	BASEPRI_MAX, r5
   17690:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   17694:	6945      	ldr	r5, [r0, #20]
   17696:	b15d      	cbz	r5, 176b0 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   17698:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1769a:	682b      	ldr	r3, [r5, #0]
   1769c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1769e:	6983      	ldr	r3, [r0, #24]
   176a0:	3301      	adds	r3, #1
   176a2:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   176a4:	2000      	movs	r0, #0
	__asm__ volatile(
   176a6:	f381 8811 	msr	BASEPRI, r1
   176aa:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   176ae:	e011      	b.n	176d4 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   176b0:	ea52 0c03 	orrs.w	ip, r2, r3
   176b4:	d103      	bne.n	176be <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   176b6:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   176b8:	f06f 000b 	mvn.w	r0, #11
   176bc:	e7f3      	b.n	176a6 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   176be:	e9cd 2300 	strd	r2, r3, [sp]
   176c2:	4602      	mov	r2, r0
   176c4:	3008      	adds	r0, #8
   176c6:	f000 fd6d 	bl	181a4 <z_pend_curr>
		if (result == 0) {
   176ca:	b918      	cbnz	r0, 176d4 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   176cc:	4b02      	ldr	r3, [pc, #8]	; (176d8 <k_mem_slab_alloc+0x58>)
   176ce:	689b      	ldr	r3, [r3, #8]
   176d0:	695b      	ldr	r3, [r3, #20]
   176d2:	6023      	str	r3, [r4, #0]
}
   176d4:	b003      	add	sp, #12
   176d6:	bd30      	pop	{r4, r5, pc}
   176d8:	20002dd0 	.word	0x20002dd0

000176dc <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   176dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   176e0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   176e2:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   176e4:	2604      	movs	r6, #4
   176e6:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   176e8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   176ea:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   176ec:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   176f0:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   176f2:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   176f4:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   176f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   176fa:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   176fc:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   17700:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   17702:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   17706:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   1770a:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   1770c:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   1770e:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   17710:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   17714:	9202      	str	r2, [sp, #8]
   17716:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   17718:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   1771a:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1771c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1771e:	9200      	str	r2, [sp, #0]
   17720:	4642      	mov	r2, r8
{
   17722:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   17724:	f7eb fef6 	bl	3514 <arch_new_thread>
	if (!_current) {
   17728:	4b04      	ldr	r3, [pc, #16]	; (1773c <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   1772a:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   1772c:	689b      	ldr	r3, [r3, #8]
   1772e:	b103      	cbz	r3, 17732 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   17730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   17732:	6763      	str	r3, [r4, #116]	; 0x74
}
   17734:	4640      	mov	r0, r8
   17736:	b004      	add	sp, #16
   17738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1773c:	20002dd0 	.word	0x20002dd0

00017740 <z_impl_k_thread_create>:
{
   17740:	b5f0      	push	{r4, r5, r6, r7, lr}
   17742:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   17744:	2700      	movs	r7, #0
   17746:	9705      	str	r7, [sp, #20]
   17748:	9f10      	ldr	r7, [sp, #64]	; 0x40
   1774a:	9704      	str	r7, [sp, #16]
   1774c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   1774e:	9703      	str	r7, [sp, #12]
   17750:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   17752:	9702      	str	r7, [sp, #8]
{
   17754:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   17758:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   1775a:	9701      	str	r7, [sp, #4]
   1775c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   1775e:	9700      	str	r7, [sp, #0]
{
   17760:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   17762:	f7ff ffbb 	bl	176dc <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   17766:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   1776a:	bf08      	it	eq
   1776c:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   17770:	d005      	beq.n	1777e <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   17772:	ea55 0306 	orrs.w	r3, r5, r6
   17776:	d105      	bne.n	17784 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   17778:	4620      	mov	r0, r4
   1777a:	f000 fcb7 	bl	180ec <z_sched_start>
}
   1777e:	4620      	mov	r0, r4
   17780:	b007      	add	sp, #28
   17782:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   17784:	4903      	ldr	r1, [pc, #12]	; (17794 <z_impl_k_thread_create+0x54>)
   17786:	4632      	mov	r2, r6
   17788:	462b      	mov	r3, r5
   1778a:	f104 0018 	add.w	r0, r4, #24
   1778e:	f000 ff67 	bl	18660 <z_add_timeout>
   17792:	e7f4      	b.n	1777e <z_impl_k_thread_create+0x3e>
   17794:	0001e7c9 	.word	0x0001e7c9

00017798 <z_init_static_threads>:
{
   17798:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1779c:	4c29      	ldr	r4, [pc, #164]	; (17844 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   1779e:	4d2a      	ldr	r5, [pc, #168]	; (17848 <z_init_static_threads+0xb0>)
{
   177a0:	b087      	sub	sp, #28
   177a2:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   177a4:	42ae      	cmp	r6, r5
   177a6:	f104 0430 	add.w	r4, r4, #48	; 0x30
   177aa:	d30f      	bcc.n	177cc <z_init_static_threads+0x34>
	k_sched_lock();
   177ac:	f000 fbba 	bl	17f24 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   177b0:	4c24      	ldr	r4, [pc, #144]	; (17844 <z_init_static_threads+0xac>)
   177b2:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1784c <z_init_static_threads+0xb4>
   177b6:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   177ba:	f240 37e7 	movw	r7, #999	; 0x3e7
   177be:	42ac      	cmp	r4, r5
   177c0:	d320      	bcc.n	17804 <z_init_static_threads+0x6c>
}
   177c2:	b007      	add	sp, #28
   177c4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   177c8:	f000 bd7a 	b.w	182c0 <k_sched_unlock>
		z_setup_new_thread(
   177cc:	f854 3c04 	ldr.w	r3, [r4, #-4]
   177d0:	9305      	str	r3, [sp, #20]
   177d2:	f854 3c10 	ldr.w	r3, [r4, #-16]
   177d6:	9304      	str	r3, [sp, #16]
   177d8:	f854 3c14 	ldr.w	r3, [r4, #-20]
   177dc:	9303      	str	r3, [sp, #12]
   177de:	f854 3c18 	ldr.w	r3, [r4, #-24]
   177e2:	9302      	str	r3, [sp, #8]
   177e4:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   177e8:	9301      	str	r3, [sp, #4]
   177ea:	f854 3c20 	ldr.w	r3, [r4, #-32]
   177ee:	9300      	str	r3, [sp, #0]
   177f0:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   177f4:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   177f8:	f7ff ff70 	bl	176dc <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   177fc:	f854 3c30 	ldr.w	r3, [r4, #-48]
   17800:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   17802:	e7ce      	b.n	177a2 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   17804:	6a63      	ldr	r3, [r4, #36]	; 0x24
   17806:	1c5a      	adds	r2, r3, #1
   17808:	d00d      	beq.n	17826 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   1780a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1780e:	2100      	movs	r1, #0
   17810:	4638      	mov	r0, r7
   17812:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   17816:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   1781a:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1781e:	d104      	bne.n	1782a <z_init_static_threads+0x92>
	z_sched_start(thread);
   17820:	4640      	mov	r0, r8
   17822:	f000 fc63 	bl	180ec <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   17826:	3430      	adds	r4, #48	; 0x30
   17828:	e7c9      	b.n	177be <z_init_static_threads+0x26>
   1782a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1782e:	2300      	movs	r3, #0
   17830:	f7e8 fca6 	bl	180 <__aeabi_uldivmod>
   17834:	4602      	mov	r2, r0
   17836:	460b      	mov	r3, r1
   17838:	f108 0018 	add.w	r0, r8, #24
   1783c:	4649      	mov	r1, r9
   1783e:	f000 ff0f 	bl	18660 <z_add_timeout>
   17842:	e7f0      	b.n	17826 <z_init_static_threads+0x8e>
   17844:	20000ae8 	.word	0x20000ae8
   17848:	20000ae8 	.word	0x20000ae8
   1784c:	0001e7c9 	.word	0x0001e7c9

00017850 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   17850:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   17852:	4c09      	ldr	r4, [pc, #36]	; (17878 <idle+0x28>)
	__asm__ volatile(
   17854:	f04f 0220 	mov.w	r2, #32
   17858:	f3ef 8311 	mrs	r3, BASEPRI
   1785c:	f382 8812 	msr	BASEPRI_MAX, r2
   17860:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   17864:	f007 f87c 	bl	1e960 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
   17868:	61a0      	str	r0, [r4, #24]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
   1786a:	f7eb fc87 	bl	317c <pm_system_suspend>
   1786e:	2800      	cmp	r0, #0
   17870:	d1f0      	bne.n	17854 <idle+0x4>
	arch_cpu_idle();
   17872:	f7eb fd2b 	bl	32cc <arch_cpu_idle>
}
   17876:	e7ed      	b.n	17854 <idle+0x4>
   17878:	20002dd0 	.word	0x20002dd0

0001787c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1787c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   17880:	4604      	mov	r4, r0
   17882:	4617      	mov	r7, r2
   17884:	461e      	mov	r6, r3
   17886:	f04f 0320 	mov.w	r3, #32
   1788a:	f3ef 8811 	mrs	r8, BASEPRI
   1788e:	f383 8812 	msr	BASEPRI_MAX, r3
   17892:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   17896:	68c3      	ldr	r3, [r0, #12]
   17898:	4a32      	ldr	r2, [pc, #200]	; (17964 <z_impl_k_mutex_lock+0xe8>)
   1789a:	b16b      	cbz	r3, 178b8 <z_impl_k_mutex_lock+0x3c>
   1789c:	6880      	ldr	r0, [r0, #8]
   1789e:	6891      	ldr	r1, [r2, #8]
   178a0:	4288      	cmp	r0, r1
   178a2:	d019      	beq.n	178d8 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   178a4:	ea57 0306 	orrs.w	r3, r7, r6
   178a8:	d118      	bne.n	178dc <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   178aa:	f388 8811 	msr	BASEPRI, r8
   178ae:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   178b2:	f06f 000f 	mvn.w	r0, #15
   178b6:	e00c      	b.n	178d2 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   178b8:	6891      	ldr	r1, [r2, #8]
   178ba:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   178be:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   178c0:	3301      	adds	r3, #1
   178c2:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   178c4:	6893      	ldr	r3, [r2, #8]
   178c6:	60a3      	str	r3, [r4, #8]
   178c8:	f388 8811 	msr	BASEPRI, r8
   178cc:	f3bf 8f6f 	isb	sy
		return 0;
   178d0:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   178d2:	b002      	add	sp, #8
   178d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   178d8:	6921      	ldr	r1, [r4, #16]
   178da:	e7f0      	b.n	178be <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   178dc:	f991 100e 	ldrsb.w	r1, [r1, #14]
   178e0:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   178e4:	4299      	cmp	r1, r3
   178e6:	bfa8      	it	ge
   178e8:	4619      	movge	r1, r3
   178ea:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   178ee:	4291      	cmp	r1, r2
   178f0:	bfb8      	it	lt
   178f2:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   178f4:	428b      	cmp	r3, r1
   178f6:	dd2e      	ble.n	17956 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   178f8:	f006 fd05 	bl	1e306 <adjust_owner_prio.isra.0>
   178fc:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   178fe:	e9cd 7600 	strd	r7, r6, [sp]
   17902:	4819      	ldr	r0, [pc, #100]	; (17968 <z_impl_k_mutex_lock+0xec>)
   17904:	4622      	mov	r2, r4
   17906:	4641      	mov	r1, r8
   17908:	f000 fc4c 	bl	181a4 <z_pend_curr>
	if (got_mutex == 0) {
   1790c:	2800      	cmp	r0, #0
   1790e:	d0e0      	beq.n	178d2 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   17910:	f04f 0320 	mov.w	r3, #32
   17914:	f3ef 8611 	mrs	r6, BASEPRI
   17918:	f383 8812 	msr	BASEPRI_MAX, r3
   1791c:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   17920:	6823      	ldr	r3, [r4, #0]
   17922:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17924:	429c      	cmp	r4, r3
   17926:	d00a      	beq.n	1793e <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   17928:	b14b      	cbz	r3, 1793e <z_impl_k_mutex_lock+0xc2>
   1792a:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1792e:	4299      	cmp	r1, r3
   17930:	bfa8      	it	ge
   17932:	4619      	movge	r1, r3
   17934:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   17938:	4299      	cmp	r1, r3
   1793a:	bfb8      	it	lt
   1793c:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1793e:	68a0      	ldr	r0, [r4, #8]
   17940:	f006 fce1 	bl	1e306 <adjust_owner_prio.isra.0>
   17944:	b900      	cbnz	r0, 17948 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
   17946:	b145      	cbz	r5, 1795a <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   17948:	4807      	ldr	r0, [pc, #28]	; (17968 <z_impl_k_mutex_lock+0xec>)
   1794a:	4631      	mov	r1, r6
   1794c:	f000 fad8 	bl	17f00 <z_reschedule>
	return -EAGAIN;
   17950:	f06f 000a 	mvn.w	r0, #10
   17954:	e7bd      	b.n	178d2 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   17956:	2500      	movs	r5, #0
   17958:	e7d1      	b.n	178fe <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
   1795a:	f386 8811 	msr	BASEPRI, r6
   1795e:	f3bf 8f6f 	isb	sy
   17962:	e7f5      	b.n	17950 <z_impl_k_mutex_lock+0xd4>
   17964:	20002dd0 	.word	0x20002dd0
   17968:	20003425 	.word	0x20003425

0001796c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1796c:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   1796e:	6883      	ldr	r3, [r0, #8]
{
   17970:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   17972:	2b00      	cmp	r3, #0
   17974:	d032      	beq.n	179dc <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   17976:	4a1c      	ldr	r2, [pc, #112]	; (179e8 <z_impl_k_mutex_unlock+0x7c>)
   17978:	6892      	ldr	r2, [r2, #8]
   1797a:	4293      	cmp	r3, r2
   1797c:	d131      	bne.n	179e2 <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   1797e:	7bda      	ldrb	r2, [r3, #15]
   17980:	3a01      	subs	r2, #1
   17982:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   17984:	68c3      	ldr	r3, [r0, #12]
   17986:	2b01      	cmp	r3, #1
   17988:	d905      	bls.n	17996 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1798a:	3b01      	subs	r3, #1
   1798c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   1798e:	f000 fc97 	bl	182c0 <k_sched_unlock>

	return 0;
   17992:	2000      	movs	r0, #0
}
   17994:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   17996:	f04f 0320 	mov.w	r3, #32
   1799a:	f3ef 8511 	mrs	r5, BASEPRI
   1799e:	f383 8812 	msr	BASEPRI_MAX, r3
   179a2:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   179a6:	6901      	ldr	r1, [r0, #16]
   179a8:	6880      	ldr	r0, [r0, #8]
   179aa:	f006 fcac 	bl	1e306 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   179ae:	4620      	mov	r0, r4
   179b0:	f006 ff6b 	bl	1e88a <z_unpend_first_thread>
	mutex->owner = new_owner;
   179b4:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   179b6:	b158      	cbz	r0, 179d0 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
   179b8:	f990 200e 	ldrsb.w	r2, [r0, #14]
   179bc:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   179be:	2200      	movs	r2, #0
   179c0:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   179c2:	f006 fef1 	bl	1e7a8 <z_ready_thread>
		z_reschedule(&lock, key);
   179c6:	4809      	ldr	r0, [pc, #36]	; (179ec <z_impl_k_mutex_unlock+0x80>)
   179c8:	4629      	mov	r1, r5
   179ca:	f000 fa99 	bl	17f00 <z_reschedule>
   179ce:	e7de      	b.n	1798e <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   179d0:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   179d2:	f385 8811 	msr	BASEPRI, r5
   179d6:	f3bf 8f6f 	isb	sy
   179da:	e7d8      	b.n	1798e <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   179dc:	f06f 0015 	mvn.w	r0, #21
   179e0:	e7d8      	b.n	17994 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   179e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   179e6:	e7d5      	b.n	17994 <z_impl_k_mutex_unlock+0x28>
   179e8:	20002dd0 	.word	0x20002dd0
   179ec:	20003425 	.word	0x20003425

000179f0 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   179f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   179f2:	4611      	mov	r1, r2
	__asm__ volatile(
   179f4:	f04f 0220 	mov.w	r2, #32
   179f8:	f3ef 8511 	mrs	r5, BASEPRI
   179fc:	f382 8812 	msr	BASEPRI_MAX, r2
   17a00:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   17a04:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   17a06:	b19c      	cbz	r4, 17a30 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   17a08:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   17a0a:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   17a0c:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   17a10:	4294      	cmp	r4, r2
	list->head = node;
   17a12:	6003      	str	r3, [r0, #0]
	list->tail = node;
   17a14:	bf08      	it	eq
   17a16:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   17a18:	2101      	movs	r1, #1
   17a1a:	4620      	mov	r0, r4
   17a1c:	f006 fcdf 	bl	1e3de <z_queue_node_peek>
   17a20:	4604      	mov	r4, r0
	__asm__ volatile(
   17a22:	f385 8811 	msr	BASEPRI, r5
   17a26:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   17a2a:	4620      	mov	r0, r4
   17a2c:	b003      	add	sp, #12
   17a2e:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   17a30:	ea51 0203 	orrs.w	r2, r1, r3
   17a34:	d0f5      	beq.n	17a22 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   17a36:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   17a3a:	e9cd 1300 	strd	r1, r3, [sp]
   17a3e:	4610      	mov	r0, r2
   17a40:	4629      	mov	r1, r5
   17a42:	f000 fbaf 	bl	181a4 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   17a46:	2800      	cmp	r0, #0
   17a48:	d1ef      	bne.n	17a2a <z_impl_k_queue_get+0x3a>
   17a4a:	4b02      	ldr	r3, [pc, #8]	; (17a54 <z_impl_k_queue_get+0x64>)
   17a4c:	689b      	ldr	r3, [r3, #8]
   17a4e:	695c      	ldr	r4, [r3, #20]
   17a50:	e7eb      	b.n	17a2a <z_impl_k_queue_get+0x3a>
   17a52:	bf00      	nop
   17a54:	20002dd0 	.word	0x20002dd0

00017a58 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   17a58:	b538      	push	{r3, r4, r5, lr}
   17a5a:	4604      	mov	r4, r0
	__asm__ volatile(
   17a5c:	f04f 0320 	mov.w	r3, #32
   17a60:	f3ef 8511 	mrs	r5, BASEPRI
   17a64:	f383 8812 	msr	BASEPRI_MAX, r3
   17a68:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   17a6c:	f006 ff0d 	bl	1e88a <z_unpend_first_thread>

	if (thread != NULL) {
   17a70:	b148      	cbz	r0, 17a86 <z_impl_k_sem_give+0x2e>
   17a72:	2200      	movs	r2, #0
   17a74:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   17a76:	f006 fe97 	bl	1e7a8 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   17a7a:	4629      	mov	r1, r5
   17a7c:	4808      	ldr	r0, [pc, #32]	; (17aa0 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   17a7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   17a82:	f000 ba3d 	b.w	17f00 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   17a86:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   17a8a:	429a      	cmp	r2, r3
   17a8c:	bf18      	it	ne
   17a8e:	3301      	addne	r3, #1
   17a90:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   17a92:	2102      	movs	r1, #2
   17a94:	f104 0010 	add.w	r0, r4, #16
   17a98:	f007 f844 	bl	1eb24 <z_handle_obj_poll_events>
}
   17a9c:	e7ed      	b.n	17a7a <z_impl_k_sem_give+0x22>
   17a9e:	bf00      	nop
   17aa0:	20003425 	.word	0x20003425

00017aa4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   17aa4:	b513      	push	{r0, r1, r4, lr}
   17aa6:	f04f 0420 	mov.w	r4, #32
   17aaa:	f3ef 8111 	mrs	r1, BASEPRI
   17aae:	f384 8812 	msr	BASEPRI_MAX, r4
   17ab2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   17ab6:	6884      	ldr	r4, [r0, #8]
   17ab8:	b144      	cbz	r4, 17acc <z_impl_k_sem_take+0x28>
		sem->count--;
   17aba:	3c01      	subs	r4, #1
   17abc:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   17abe:	f381 8811 	msr	BASEPRI, r1
   17ac2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   17ac6:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   17ac8:	b002      	add	sp, #8
   17aca:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   17acc:	ea52 0403 	orrs.w	r4, r2, r3
   17ad0:	d106      	bne.n	17ae0 <z_impl_k_sem_take+0x3c>
   17ad2:	f381 8811 	msr	BASEPRI, r1
   17ad6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   17ada:	f06f 000f 	mvn.w	r0, #15
   17ade:	e7f3      	b.n	17ac8 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   17ae0:	e9cd 2300 	strd	r2, r3, [sp]
   17ae4:	4602      	mov	r2, r0
   17ae6:	4802      	ldr	r0, [pc, #8]	; (17af0 <z_impl_k_sem_take+0x4c>)
   17ae8:	f000 fb5c 	bl	181a4 <z_pend_curr>
	return ret;
   17aec:	e7ec      	b.n	17ac8 <z_impl_k_sem_take+0x24>
   17aee:	bf00      	nop
   17af0:	20003425 	.word	0x20003425

00017af4 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   17af4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   17af6:	4b09      	ldr	r3, [pc, #36]	; (17b1c <k_sys_work_q_init+0x28>)
   17af8:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   17afa:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   17afc:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   17afe:	9300      	str	r3, [sp, #0]
   17b00:	4907      	ldr	r1, [pc, #28]	; (17b20 <k_sys_work_q_init+0x2c>)
   17b02:	4808      	ldr	r0, [pc, #32]	; (17b24 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   17b04:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   17b08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17b0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   17b10:	f000 f914 	bl	17d3c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   17b14:	4620      	mov	r0, r4
   17b16:	b004      	add	sp, #16
   17b18:	bd10      	pop	{r4, pc}
   17b1a:	bf00      	nop
   17b1c:	000235a3 	.word	0x000235a3
   17b20:	20005700 	.word	0x20005700
   17b24:	200017f0 	.word	0x200017f0

00017b28 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   17b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   17b2c:	4e47      	ldr	r6, [pc, #284]	; (17c4c <work_queue_main+0x124>)
   17b2e:	b085      	sub	sp, #20
   17b30:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   17b32:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   17b36:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
   17b3a:	f04f 0320 	mov.w	r3, #32
   17b3e:	f3ef 8711 	mrs	r7, BASEPRI
   17b42:	f383 8812 	msr	BASEPRI_MAX, r3
   17b46:	f3bf 8f6f 	isb	sy
   17b4a:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   17b4e:	b98d      	cbnz	r5, 17b74 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   17b50:	2102      	movs	r1, #2
   17b52:	f104 0098 	add.w	r0, r4, #152	; 0x98
   17b56:	f006 fcdb 	bl	1e510 <flag_test_and_clear>
   17b5a:	2800      	cmp	r0, #0
   17b5c:	d135      	bne.n	17bca <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   17b5e:	2300      	movs	r3, #0
   17b60:	e9cd 8900 	strd	r8, r9, [sp]
   17b64:	9302      	str	r3, [sp, #8]
   17b66:	f104 0288 	add.w	r2, r4, #136	; 0x88
   17b6a:	4639      	mov	r1, r7
   17b6c:	4838      	ldr	r0, [pc, #224]	; (17c50 <work_queue_main+0x128>)
   17b6e:	f000 fcd9 	bl	18524 <z_sched_wait>
			continue;
   17b72:	e7e2      	b.n	17b3a <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17b74:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   17b78:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   17b7a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17b7e:	4295      	cmp	r5, r2
   17b80:	d101      	bne.n	17b86 <work_queue_main+0x5e>
	list->tail = node;
   17b82:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   17b86:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   17b8a:	f043 0302 	orr.w	r3, r3, #2
   17b8e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   17b92:	68eb      	ldr	r3, [r5, #12]
   17b94:	f023 0304 	bic.w	r3, r3, #4
   17b98:	f043 0301 	orr.w	r3, r3, #1
   17b9c:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   17b9e:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   17ba0:	f387 8811 	msr	BASEPRI, r7
   17ba4:	f3bf 8f6f 	isb	sy

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
			handler(work);
   17ba8:	4628      	mov	r0, r5
   17baa:	4798      	blx	r3
	__asm__ volatile(
   17bac:	f04f 0320 	mov.w	r3, #32
   17bb0:	f3ef 8b11 	mrs	fp, BASEPRI
   17bb4:	f383 8812 	msr	BASEPRI_MAX, r3
   17bb8:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   17bbc:	68eb      	ldr	r3, [r5, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   17bbe:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   17bc0:	f023 0201 	bic.w	r2, r3, #1
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   17bc4:	d40b      	bmi.n	17bde <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
   17bc6:	60ea      	str	r2, [r5, #12]
   17bc8:	e00e      	b.n	17be8 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   17bca:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   17bce:	2200      	movs	r2, #0
   17bd0:	2101      	movs	r1, #1
   17bd2:	4628      	mov	r0, r5
   17bd4:	f006 fe81 	bl	1e8da <z_sched_wake>
   17bd8:	2800      	cmp	r0, #0
   17bda:	d1f8      	bne.n	17bce <work_queue_main+0xa6>
   17bdc:	e7bf      	b.n	17b5e <work_queue_main+0x36>
	return list->head;
   17bde:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   17be0:	f023 0303 	bic.w	r3, r3, #3
   17be4:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   17be6:	b970      	cbnz	r0, 17c06 <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
   17be8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   17bec:	f023 0302 	bic.w	r3, r3, #2
   17bf0:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   17bf4:	f38b 8811 	msr	BASEPRI, fp
   17bf8:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
   17bfc:	05d8      	lsls	r0, r3, #23
   17bfe:	d49c      	bmi.n	17b3a <work_queue_main+0x12>
	z_impl_k_yield();
   17c00:	f000 fb86 	bl	18310 <z_impl_k_yield>
}
   17c04:	e799      	b.n	17b3a <work_queue_main+0x12>
	return node->next;
   17c06:	2700      	movs	r7, #0
   17c08:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   17c0c:	463b      	mov	r3, r7
		if (wc->work == work) {
   17c0e:	6842      	ldr	r2, [r0, #4]
   17c10:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   17c12:	4601      	mov	r1, r0
		if (wc->work == work) {
   17c14:	d10c      	bne.n	17c30 <work_queue_main+0x108>
	return node->next;
   17c16:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   17c18:	b997      	cbnz	r7, 17c40 <work_queue_main+0x118>
   17c1a:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   17c1c:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   17c1e:	4282      	cmp	r2, r0
   17c20:	d100      	bne.n	17c24 <work_queue_main+0xfc>
	list->tail = node;
   17c22:	6071      	str	r1, [r6, #4]
	parent->next = child;
   17c24:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   17c28:	f7ff ff16 	bl	17a58 <z_impl_k_sem_give>
}
   17c2c:	4639      	mov	r1, r7
   17c2e:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   17c30:	f1ba 0f00 	cmp.w	sl, #0
   17c34:	d0d8      	beq.n	17be8 <work_queue_main+0xc0>
	return node->next;
   17c36:	4650      	mov	r0, sl
   17c38:	460f      	mov	r7, r1
   17c3a:	f8da a000 	ldr.w	sl, [sl]
   17c3e:	e7e6      	b.n	17c0e <work_queue_main+0xe6>
	return list->tail;
   17c40:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
   17c42:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   17c44:	4290      	cmp	r0, r2
	list->tail = node;
   17c46:	bf08      	it	eq
   17c48:	6077      	streq	r7, [r6, #4]
}
   17c4a:	e7eb      	b.n	17c24 <work_queue_main+0xfc>
   17c4c:	20002df8 	.word	0x20002df8
   17c50:	20003425 	.word	0x20003425

00017c54 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   17c54:	68c3      	ldr	r3, [r0, #12]
{
   17c56:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   17c58:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   17c5c:	079b      	lsls	r3, r3, #30
{
   17c5e:	4605      	mov	r5, r0
   17c60:	460c      	mov	r4, r1
	if (ret) {
   17c62:	d50d      	bpl.n	17c80 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   17c64:	2201      	movs	r2, #1
   17c66:	2100      	movs	r1, #0
   17c68:	f104 0008 	add.w	r0, r4, #8
   17c6c:	f006 fc40 	bl	1e4f0 <z_impl_k_sem_init>
	parent->next = child;
   17c70:	2300      	movs	r3, #0
   17c72:	6023      	str	r3, [r4, #0]
	return list->tail;
   17c74:	4b05      	ldr	r3, [pc, #20]	; (17c8c <cancel_sync_locked+0x38>)
	canceler->work = work;
   17c76:	6065      	str	r5, [r4, #4]
   17c78:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   17c7a:	b91a      	cbnz	r2, 17c84 <cancel_sync_locked+0x30>
	list->head = node;
   17c7c:	e9c3 4400 	strd	r4, r4, [r3]
}
   17c80:	4630      	mov	r0, r6
   17c82:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   17c84:	6014      	str	r4, [r2, #0]
	list->tail = node;
   17c86:	605c      	str	r4, [r3, #4]
}
   17c88:	e7fa      	b.n	17c80 <cancel_sync_locked+0x2c>
   17c8a:	bf00      	nop
   17c8c:	20002df8 	.word	0x20002df8

00017c90 <submit_to_queue_locked>:
{
   17c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   17c92:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   17c94:	079a      	lsls	r2, r3, #30
{
   17c96:	4604      	mov	r4, r0
   17c98:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   17c9a:	f3c3 0540 	ubfx	r5, r3, #1, #1
   17c9e:	d41f      	bmi.n	17ce0 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   17ca0:	075f      	lsls	r7, r3, #29
   17ca2:	d41f      	bmi.n	17ce4 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   17ca4:	680a      	ldr	r2, [r1, #0]
   17ca6:	b90a      	cbnz	r2, 17cac <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   17ca8:	6882      	ldr	r2, [r0, #8]
   17caa:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   17cac:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   17cae:	bf44      	itt	mi
   17cb0:	68a3      	ldrmi	r3, [r4, #8]
   17cb2:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   17cb4:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   17cb6:	bf4c      	ite	mi
   17cb8:	2502      	movmi	r5, #2
		ret = 1;
   17cba:	2501      	movpl	r5, #1
	if (queue == NULL) {
   17cbc:	b37f      	cbz	r7, 17d1e <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   17cbe:	4b1b      	ldr	r3, [pc, #108]	; (17d2c <submit_to_queue_locked+0x9c>)
   17cc0:	689b      	ldr	r3, [r3, #8]
   17cc2:	42bb      	cmp	r3, r7
   17cc4:	d111      	bne.n	17cea <submit_to_queue_locked+0x5a>
   17cc6:	f006 fb0a 	bl	1e2de <k_is_in_isr>
   17cca:	f080 0001 	eor.w	r0, r0, #1
   17cce:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   17cd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   17cd4:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   17cd6:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   17cda:	d523      	bpl.n	17d24 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   17cdc:	b13a      	cbz	r2, 17cee <submit_to_queue_locked+0x5e>
   17cde:	b940      	cbnz	r0, 17cf2 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   17ce0:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   17ce4:	2300      	movs	r3, #0
   17ce6:	6033      	str	r3, [r6, #0]
	return ret;
   17ce8:	e013      	b.n	17d12 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   17cea:	2000      	movs	r0, #0
   17cec:	e7f0      	b.n	17cd0 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   17cee:	071b      	lsls	r3, r3, #28
   17cf0:	d4f6      	bmi.n	17ce0 <submit_to_queue_locked+0x50>
	parent->next = child;
   17cf2:	2300      	movs	r3, #0
   17cf4:	6023      	str	r3, [r4, #0]
	return list->tail;
   17cf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   17cfa:	b963      	cbnz	r3, 17d16 <submit_to_queue_locked+0x86>
	list->head = node;
   17cfc:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   17d00:	4638      	mov	r0, r7
   17d02:	f006 fc1e 	bl	1e542 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   17d06:	68e3      	ldr	r3, [r4, #12]
   17d08:	f043 0304 	orr.w	r3, r3, #4
   17d0c:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   17d0e:	6833      	ldr	r3, [r6, #0]
   17d10:	60a3      	str	r3, [r4, #8]
}
   17d12:	4628      	mov	r0, r5
   17d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   17d16:	601c      	str	r4, [r3, #0]
	list->tail = node;
   17d18:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   17d1c:	e7f0      	b.n	17d00 <submit_to_queue_locked+0x70>
		return -EINVAL;
   17d1e:	f06f 0515 	mvn.w	r5, #21
   17d22:	e7df      	b.n	17ce4 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   17d24:	f06f 0512 	mvn.w	r5, #18
   17d28:	e7dc      	b.n	17ce4 <submit_to_queue_locked+0x54>
   17d2a:	bf00      	nop
   17d2c:	20002dd0 	.word	0x20002dd0

00017d30 <k_work_submit>:
{
   17d30:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   17d32:	4801      	ldr	r0, [pc, #4]	; (17d38 <k_work_submit+0x8>)
   17d34:	f006 bc65 	b.w	1e602 <k_work_submit_to_queue>
   17d38:	200017f0 	.word	0x200017f0

00017d3c <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   17d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   17d3e:	b089      	sub	sp, #36	; 0x24
   17d40:	4604      	mov	r4, r0
	list->head = NULL;
   17d42:	2000      	movs	r0, #0
	list->tail = NULL;
   17d44:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   17d48:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   17d4a:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   17d4e:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   17d52:	f104 0090 	add.w	r0, r4, #144	; 0x90
   17d56:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   17d5a:	b31d      	cbz	r5, 17da4 <k_work_queue_start+0x68>
   17d5c:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   17d5e:	2800      	cmp	r0, #0
   17d60:	f240 1001 	movw	r0, #257	; 0x101
   17d64:	bf08      	it	eq
   17d66:	2001      	moveq	r0, #1
	*flagp = flags;
   17d68:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   17d6c:	2000      	movs	r0, #0
   17d6e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   17d72:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   17d76:	e9cd 3003 	strd	r3, r0, [sp, #12]
   17d7a:	e9cd 0001 	strd	r0, r0, [sp, #4]
   17d7e:	e9cd 6706 	strd	r6, r7, [sp, #24]
   17d82:	4b09      	ldr	r3, [pc, #36]	; (17da8 <k_work_queue_start+0x6c>)
   17d84:	9400      	str	r4, [sp, #0]
   17d86:	4620      	mov	r0, r4
   17d88:	f7ff fcda 	bl	17740 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   17d8c:	b125      	cbz	r5, 17d98 <k_work_queue_start+0x5c>
   17d8e:	6829      	ldr	r1, [r5, #0]
   17d90:	b111      	cbz	r1, 17d98 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   17d92:	4620      	mov	r0, r4
   17d94:	f006 faa9 	bl	1e2ea <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   17d98:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   17d9a:	b009      	add	sp, #36	; 0x24
   17d9c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   17da0:	f006 baa8 	b.w	1e2f4 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   17da4:	2001      	movs	r0, #1
   17da6:	e7df      	b.n	17d68 <k_work_queue_start+0x2c>
   17da8:	00017b29 	.word	0x00017b29

00017dac <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   17dac:	b513      	push	{r0, r1, r4, lr}
   17dae:	9001      	str	r0, [sp, #4]
   17db0:	4608      	mov	r0, r1
	__asm__ volatile(
   17db2:	f04f 0120 	mov.w	r1, #32
   17db6:	f3ef 8411 	mrs	r4, BASEPRI
   17dba:	f381 8812 	msr	BASEPRI_MAX, r1
   17dbe:	f3bf 8f6f 	isb	sy
	return *flagp;
   17dc2:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   17dc4:	f011 0f0e 	tst.w	r1, #14
   17dc8:	d116      	bne.n	17df8 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   17dca:	ea53 0c02 	orrs.w	ip, r3, r2
   17dce:	d108      	bne.n	17de2 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   17dd0:	a901      	add	r1, sp, #4
   17dd2:	f7ff ff5d 	bl	17c90 <submit_to_queue_locked>
	__asm__ volatile(
   17dd6:	f384 8811 	msr	BASEPRI, r4
   17dda:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   17dde:	b002      	add	sp, #8
   17de0:	bd10      	pop	{r4, pc}
	*flagp |= BIT(bit);
   17de2:	f041 0108 	orr.w	r1, r1, #8
   17de6:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   17de8:	9901      	ldr	r1, [sp, #4]
   17dea:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   17dec:	3010      	adds	r0, #16
   17dee:	4903      	ldr	r1, [pc, #12]	; (17dfc <k_work_schedule_for_queue+0x50>)
   17df0:	f000 fc36 	bl	18660 <z_add_timeout>
	return ret;
   17df4:	2001      	movs	r0, #1
   17df6:	e7ee      	b.n	17dd6 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   17df8:	2000      	movs	r0, #0
   17dfa:	e7ec      	b.n	17dd6 <k_work_schedule_for_queue+0x2a>
   17dfc:	0001e5b3 	.word	0x0001e5b3

00017e00 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   17e00:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   17e02:	4801      	ldr	r0, [pc, #4]	; (17e08 <k_work_schedule+0x8>)
   17e04:	f7ff bfd2 	b.w	17dac <k_work_schedule_for_queue>
   17e08:	200017f0 	.word	0x200017f0

00017e0c <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   17e0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17e0e:	460c      	mov	r4, r1
   17e10:	9001      	str	r0, [sp, #4]
   17e12:	4616      	mov	r6, r2
   17e14:	461d      	mov	r5, r3
	__asm__ volatile(
   17e16:	f04f 0320 	mov.w	r3, #32
   17e1a:	f3ef 8711 	mrs	r7, BASEPRI
   17e1e:	f383 8812 	msr	BASEPRI_MAX, r3
   17e22:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   17e26:	4608      	mov	r0, r1
   17e28:	f006 fb7d 	bl	1e526 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   17e2c:	ea55 0306 	orrs.w	r3, r5, r6
   17e30:	d109      	bne.n	17e46 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   17e32:	a901      	add	r1, sp, #4
   17e34:	4620      	mov	r0, r4
   17e36:	f7ff ff2b 	bl	17c90 <submit_to_queue_locked>
	__asm__ volatile(
   17e3a:	f387 8811 	msr	BASEPRI, r7
   17e3e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   17e42:	b003      	add	sp, #12
   17e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   17e46:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   17e48:	4906      	ldr	r1, [pc, #24]	; (17e64 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   17e4a:	f043 0308 	orr.w	r3, r3, #8
   17e4e:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   17e50:	9b01      	ldr	r3, [sp, #4]
   17e52:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   17e54:	f104 0010 	add.w	r0, r4, #16
   17e58:	4632      	mov	r2, r6
   17e5a:	462b      	mov	r3, r5
   17e5c:	f000 fc00 	bl	18660 <z_add_timeout>
	return ret;
   17e60:	2001      	movs	r0, #1
   17e62:	e7ea      	b.n	17e3a <k_work_reschedule_for_queue+0x2e>
   17e64:	0001e5b3 	.word	0x0001e5b3

00017e68 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   17e68:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   17e6a:	4801      	ldr	r0, [pc, #4]	; (17e70 <k_work_reschedule+0x8>)
   17e6c:	f7ff bfce 	b.w	17e0c <k_work_reschedule_for_queue>
   17e70:	200017f0 	.word	0x200017f0

00017e74 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   17e74:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   17e76:	4c08      	ldr	r4, [pc, #32]	; (17e98 <z_reset_time_slice+0x24>)
   17e78:	6823      	ldr	r3, [r4, #0]
   17e7a:	b15b      	cbz	r3, 17e94 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   17e7c:	f7fe fe70 	bl	16b60 <sys_clock_elapsed>
   17e80:	4603      	mov	r3, r0
   17e82:	6820      	ldr	r0, [r4, #0]
   17e84:	4a05      	ldr	r2, [pc, #20]	; (17e9c <z_reset_time_slice+0x28>)
   17e86:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   17e88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   17e8c:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   17e8e:	2100      	movs	r1, #0
   17e90:	f006 bd76 	b.w	1e980 <z_set_timeout_expiry>
}
   17e94:	bd10      	pop	{r4, pc}
   17e96:	bf00      	nop
   17e98:	20002e08 	.word	0x20002e08
   17e9c:	20002dd0 	.word	0x20002dd0

00017ea0 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   17ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17ea2:	4604      	mov	r4, r0
   17ea4:	460d      	mov	r5, r1
	__asm__ volatile(
   17ea6:	f04f 0320 	mov.w	r3, #32
   17eaa:	f3ef 8611 	mrs	r6, BASEPRI
   17eae:	f383 8812 	msr	BASEPRI_MAX, r3
   17eb2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   17eb6:	4b0f      	ldr	r3, [pc, #60]	; (17ef4 <k_sched_time_slice_set+0x54>)
   17eb8:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   17eba:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   17ebe:	f240 30e7 	movw	r0, #999	; 0x3e7
   17ec2:	6119      	str	r1, [r3, #16]
   17ec4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17ec8:	2300      	movs	r3, #0
   17eca:	fbe4 0107 	umlal	r0, r1, r4, r7
   17ece:	f7e8 f957 	bl	180 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   17ed2:	2c00      	cmp	r4, #0
   17ed4:	4b08      	ldr	r3, [pc, #32]	; (17ef8 <k_sched_time_slice_set+0x58>)
   17ed6:	dc09      	bgt.n	17eec <k_sched_time_slice_set+0x4c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   17ed8:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   17eda:	4b08      	ldr	r3, [pc, #32]	; (17efc <k_sched_time_slice_set+0x5c>)
   17edc:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   17ede:	f7ff ffc9 	bl	17e74 <z_reset_time_slice>
	__asm__ volatile(
   17ee2:	f386 8811 	msr	BASEPRI, r6
   17ee6:	f3bf 8f6f 	isb	sy
	}
}
   17eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   17eec:	2802      	cmp	r0, #2
   17eee:	bfb8      	it	lt
   17ef0:	2002      	movlt	r0, #2
   17ef2:	e7f1      	b.n	17ed8 <k_sched_time_slice_set+0x38>
   17ef4:	20002dd0 	.word	0x20002dd0
   17ef8:	20002e08 	.word	0x20002e08
   17efc:	20002e04 	.word	0x20002e04

00017f00 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   17f00:	b949      	cbnz	r1, 17f16 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   17f02:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   17f06:	b930      	cbnz	r0, 17f16 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   17f08:	4b05      	ldr	r3, [pc, #20]	; (17f20 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   17f0a:	69da      	ldr	r2, [r3, #28]
   17f0c:	689b      	ldr	r3, [r3, #8]
   17f0e:	429a      	cmp	r2, r3
   17f10:	d001      	beq.n	17f16 <z_reschedule+0x16>
	ret = arch_swap(key);
   17f12:	f7eb baab 	b.w	346c <arch_swap>
   17f16:	f381 8811 	msr	BASEPRI, r1
   17f1a:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   17f1e:	4770      	bx	lr
   17f20:	20002dd0 	.word	0x20002dd0

00017f24 <k_sched_lock>:
	__asm__ volatile(
   17f24:	f04f 0320 	mov.w	r3, #32
   17f28:	f3ef 8111 	mrs	r1, BASEPRI
   17f2c:	f383 8812 	msr	BASEPRI_MAX, r3
   17f30:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   17f34:	4b04      	ldr	r3, [pc, #16]	; (17f48 <k_sched_lock+0x24>)
   17f36:	689a      	ldr	r2, [r3, #8]
   17f38:	7bd3      	ldrb	r3, [r2, #15]
   17f3a:	3b01      	subs	r3, #1
   17f3c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   17f3e:	f381 8811 	msr	BASEPRI, r1
   17f42:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   17f46:	4770      	bx	lr
   17f48:	20002dd0 	.word	0x20002dd0

00017f4c <update_cache>:
{
   17f4c:	b538      	push	{r3, r4, r5, lr}
   17f4e:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
   17f50:	480c      	ldr	r0, [pc, #48]	; (17f84 <update_cache+0x38>)
   17f52:	4d0d      	ldr	r5, [pc, #52]	; (17f88 <update_cache+0x3c>)
   17f54:	f006 fc22 	bl	1e79c <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   17f58:	4604      	mov	r4, r0
   17f5a:	b900      	cbnz	r0, 17f5e <update_cache+0x12>
   17f5c:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   17f5e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   17f60:	b94a      	cbnz	r2, 17f76 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   17f62:	7b5a      	ldrb	r2, [r3, #13]
   17f64:	06d2      	lsls	r2, r2, #27
   17f66:	d106      	bne.n	17f76 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   17f68:	69a2      	ldr	r2, [r4, #24]
   17f6a:	b922      	cbnz	r2, 17f76 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   17f6c:	89da      	ldrh	r2, [r3, #14]
   17f6e:	2a7f      	cmp	r2, #127	; 0x7f
   17f70:	d901      	bls.n	17f76 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   17f72:	61eb      	str	r3, [r5, #28]
}
   17f74:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   17f76:	429c      	cmp	r4, r3
   17f78:	d001      	beq.n	17f7e <update_cache+0x32>
			z_reset_time_slice();
   17f7a:	f7ff ff7b 	bl	17e74 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   17f7e:	61ec      	str	r4, [r5, #28]
}
   17f80:	e7f8      	b.n	17f74 <update_cache+0x28>
   17f82:	bf00      	nop
   17f84:	20002df0 	.word	0x20002df0
   17f88:	20002dd0 	.word	0x20002dd0

00017f8c <move_thread_to_end_of_prio_q>:
{
   17f8c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   17f8e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   17f92:	7b43      	ldrb	r3, [r0, #13]
   17f94:	2a00      	cmp	r2, #0
{
   17f96:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   17f98:	da04      	bge.n	17fa4 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   17f9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   17f9e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   17fa0:	f006 fbb0 	bl	1e704 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   17fa4:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   17fa6:	4a15      	ldr	r2, [pc, #84]	; (17ffc <move_thread_to_end_of_prio_q+0x70>)
   17fa8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   17fac:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   17fae:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17fb2:	f102 0520 	add.w	r5, r2, #32
   17fb6:	42ab      	cmp	r3, r5
   17fb8:	d01b      	beq.n	17ff2 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17fba:	b1d3      	cbz	r3, 17ff2 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
   17fbc:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   17fc0:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   17fc4:	4286      	cmp	r6, r0
   17fc6:	d00f      	beq.n	17fe8 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
   17fc8:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   17fca:	2800      	cmp	r0, #0
   17fcc:	dd0c      	ble.n	17fe8 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   17fce:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   17fd0:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   17fd4:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   17fd6:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   17fd8:	6890      	ldr	r0, [r2, #8]
   17fda:	1a43      	subs	r3, r0, r1
   17fdc:	4258      	negs	r0, r3
}
   17fde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   17fe2:	4158      	adcs	r0, r3
   17fe4:	f7ff bfb2 	b.w	17f4c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   17fe8:	42a3      	cmp	r3, r4
   17fea:	d002      	beq.n	17ff2 <move_thread_to_end_of_prio_q+0x66>
   17fec:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17fee:	2b00      	cmp	r3, #0
   17ff0:	d1e6      	bne.n	17fc0 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
   17ff2:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
   17ff6:	6021      	str	r1, [r4, #0]
	list->tail = node;
   17ff8:	6251      	str	r1, [r2, #36]	; 0x24
}
   17ffa:	e7ed      	b.n	17fd8 <move_thread_to_end_of_prio_q+0x4c>
   17ffc:	20002dd0 	.word	0x20002dd0

00018000 <z_time_slice>:
{
   18000:	b538      	push	{r3, r4, r5, lr}
   18002:	4601      	mov	r1, r0
	__asm__ volatile(
   18004:	f04f 0320 	mov.w	r3, #32
   18008:	f3ef 8411 	mrs	r4, BASEPRI
   1800c:	f383 8812 	msr	BASEPRI_MAX, r3
   18010:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   18014:	4b15      	ldr	r3, [pc, #84]	; (1806c <z_time_slice+0x6c>)
   18016:	4a16      	ldr	r2, [pc, #88]	; (18070 <z_time_slice+0x70>)
   18018:	6898      	ldr	r0, [r3, #8]
   1801a:	6815      	ldr	r5, [r2, #0]
   1801c:	42a8      	cmp	r0, r5
   1801e:	d106      	bne.n	1802e <z_time_slice+0x2e>
			z_reset_time_slice();
   18020:	f7ff ff28 	bl	17e74 <z_reset_time_slice>
	__asm__ volatile(
   18024:	f384 8811 	msr	BASEPRI, r4
   18028:	f3bf 8f6f 	isb	sy
}
   1802c:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   1802e:	2500      	movs	r5, #0
   18030:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   18032:	4a10      	ldr	r2, [pc, #64]	; (18074 <z_time_slice+0x74>)
   18034:	6812      	ldr	r2, [r2, #0]
   18036:	b1ba      	cbz	r2, 18068 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   18038:	89c2      	ldrh	r2, [r0, #14]
   1803a:	2a7f      	cmp	r2, #127	; 0x7f
   1803c:	d814      	bhi.n	18068 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
   1803e:	7b42      	ldrb	r2, [r0, #13]
   18040:	06d2      	lsls	r2, r2, #27
   18042:	d111      	bne.n	18068 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   18044:	4a0c      	ldr	r2, [pc, #48]	; (18078 <z_time_slice+0x78>)
   18046:	f990 500e 	ldrsb.w	r5, [r0, #14]
   1804a:	6812      	ldr	r2, [r2, #0]
   1804c:	4295      	cmp	r5, r2
   1804e:	db0b      	blt.n	18068 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   18050:	4a0a      	ldr	r2, [pc, #40]	; (1807c <z_time_slice+0x7c>)
   18052:	4290      	cmp	r0, r2
   18054:	d008      	beq.n	18068 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
   18056:	691a      	ldr	r2, [r3, #16]
   18058:	428a      	cmp	r2, r1
   1805a:	dc02      	bgt.n	18062 <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
   1805c:	f7ff ff96 	bl	17f8c <move_thread_to_end_of_prio_q>
   18060:	e7de      	b.n	18020 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
   18062:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
   18064:	611a      	str	r2, [r3, #16]
   18066:	e7dd      	b.n	18024 <z_time_slice+0x24>
   18068:	2200      	movs	r2, #0
   1806a:	e7fb      	b.n	18064 <z_time_slice+0x64>
   1806c:	20002dd0 	.word	0x20002dd0
   18070:	20002e00 	.word	0x20002e00
   18074:	20002e08 	.word	0x20002e08
   18078:	20002e04 	.word	0x20002e04
   1807c:	200016f0 	.word	0x200016f0

00018080 <ready_thread>:
{
   18080:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   18082:	f990 200d 	ldrsb.w	r2, [r0, #13]
   18086:	7b43      	ldrb	r3, [r0, #13]
   18088:	2a00      	cmp	r2, #0
   1808a:	db2a      	blt.n	180e2 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1808c:	06da      	lsls	r2, r3, #27
   1808e:	d128      	bne.n	180e2 <ready_thread+0x62>
   18090:	6982      	ldr	r2, [r0, #24]
   18092:	bb32      	cbnz	r2, 180e2 <ready_thread+0x62>
	return list->head == list;
   18094:	4a14      	ldr	r2, [pc, #80]	; (180e8 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
   18096:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1809a:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
   1809c:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   180a0:	f102 0520 	add.w	r5, r2, #32
   180a4:	42ab      	cmp	r3, r5
   180a6:	d017      	beq.n	180d8 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   180a8:	b1b3      	cbz	r3, 180d8 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
   180aa:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   180ae:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   180b2:	428e      	cmp	r6, r1
   180b4:	d00b      	beq.n	180ce <ready_thread+0x4e>
		return b2 - b1;
   180b6:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   180b8:	2900      	cmp	r1, #0
   180ba:	dd08      	ble.n	180ce <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
   180bc:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   180be:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   180c2:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   180c4:	6058      	str	r0, [r3, #4]
}
   180c6:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   180c8:	2000      	movs	r0, #0
   180ca:	f7ff bf3f 	b.w	17f4c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   180ce:	42a3      	cmp	r3, r4
   180d0:	d002      	beq.n	180d8 <ready_thread+0x58>
   180d2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   180d4:	2b00      	cmp	r3, #0
   180d6:	d1ea      	bne.n	180ae <ready_thread+0x2e>
	node->prev = tail;
   180d8:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
   180dc:	6020      	str	r0, [r4, #0]
	list->tail = node;
   180de:	6250      	str	r0, [r2, #36]	; 0x24
}
   180e0:	e7f1      	b.n	180c6 <ready_thread+0x46>
}
   180e2:	bc70      	pop	{r4, r5, r6}
   180e4:	4770      	bx	lr
   180e6:	bf00      	nop
   180e8:	20002dd0 	.word	0x20002dd0

000180ec <z_sched_start>:
{
   180ec:	b510      	push	{r4, lr}
	__asm__ volatile(
   180ee:	f04f 0220 	mov.w	r2, #32
   180f2:	f3ef 8411 	mrs	r4, BASEPRI
   180f6:	f382 8812 	msr	BASEPRI_MAX, r2
   180fa:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   180fe:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   18100:	0751      	lsls	r1, r2, #29
   18102:	d404      	bmi.n	1810e <z_sched_start+0x22>
	__asm__ volatile(
   18104:	f384 8811 	msr	BASEPRI, r4
   18108:	f3bf 8f6f 	isb	sy
}
   1810c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1810e:	f022 0204 	bic.w	r2, r2, #4
   18112:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   18114:	f7ff ffb4 	bl	18080 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   18118:	4621      	mov	r1, r4
   1811a:	4802      	ldr	r0, [pc, #8]	; (18124 <z_sched_start+0x38>)
}
   1811c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   18120:	f7ff beee 	b.w	17f00 <z_reschedule>
   18124:	20003425 	.word	0x20003425

00018128 <unready_thread>:
{
   18128:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1812a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   1812e:	7b43      	ldrb	r3, [r0, #13]
   18130:	2a00      	cmp	r2, #0
{
   18132:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   18134:	da04      	bge.n	18140 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   18136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1813a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1813c:	f006 fae2 	bl	1e704 <sys_dlist_remove>
	update_cache(thread == _current);
   18140:	4b04      	ldr	r3, [pc, #16]	; (18154 <unready_thread+0x2c>)
   18142:	6898      	ldr	r0, [r3, #8]
   18144:	1a43      	subs	r3, r0, r1
   18146:	4258      	negs	r0, r3
   18148:	4158      	adcs	r0, r3
}
   1814a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1814e:	f7ff befd 	b.w	17f4c <update_cache>
   18152:	bf00      	nop
   18154:	20002dd0 	.word	0x20002dd0

00018158 <pend>:
{
   18158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1815c:	4606      	mov	r6, r0
   1815e:	4615      	mov	r5, r2
   18160:	461c      	mov	r4, r3
	__asm__ volatile(
   18162:	f04f 0320 	mov.w	r3, #32
   18166:	f3ef 8711 	mrs	r7, BASEPRI
   1816a:	f383 8812 	msr	BASEPRI_MAX, r3
   1816e:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   18172:	f006 fb4b 	bl	1e80c <add_to_waitq_locked>
	__asm__ volatile(
   18176:	f387 8811 	msr	BASEPRI, r7
   1817a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1817e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   18182:	bf08      	it	eq
   18184:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   18188:	d008      	beq.n	1819c <pend+0x44>
   1818a:	462a      	mov	r2, r5
   1818c:	4623      	mov	r3, r4
   1818e:	f106 0018 	add.w	r0, r6, #24
   18192:	4903      	ldr	r1, [pc, #12]	; (181a0 <pend+0x48>)
}
   18194:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   18198:	f000 ba62 	b.w	18660 <z_add_timeout>
   1819c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   181a0:	0001e7c9 	.word	0x0001e7c9

000181a4 <z_pend_curr>:
{
   181a4:	b510      	push	{r4, lr}
	pending_current = _current;
   181a6:	4b07      	ldr	r3, [pc, #28]	; (181c4 <z_pend_curr+0x20>)
   181a8:	6898      	ldr	r0, [r3, #8]
   181aa:	4b07      	ldr	r3, [pc, #28]	; (181c8 <z_pend_curr+0x24>)
{
   181ac:	460c      	mov	r4, r1
	pending_current = _current;
   181ae:	6018      	str	r0, [r3, #0]
{
   181b0:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   181b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   181b6:	f7ff ffcf 	bl	18158 <pend>
   181ba:	4620      	mov	r0, r4
}
   181bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   181c0:	f7eb b954 	b.w	346c <arch_swap>
   181c4:	20002dd0 	.word	0x20002dd0
   181c8:	20002e00 	.word	0x20002e00

000181cc <z_set_prio>:
{
   181cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   181ce:	4604      	mov	r4, r0
	__asm__ volatile(
   181d0:	f04f 0320 	mov.w	r3, #32
   181d4:	f3ef 8611 	mrs	r6, BASEPRI
   181d8:	f383 8812 	msr	BASEPRI_MAX, r3
   181dc:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   181e0:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   181e2:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   181e4:	b249      	sxtb	r1, r1
   181e6:	d133      	bne.n	18250 <z_set_prio+0x84>
		if (need_sched) {
   181e8:	6982      	ldr	r2, [r0, #24]
   181ea:	bb8a      	cbnz	r2, 18250 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   181ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   181f0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   181f2:	f006 fa87 	bl	1e704 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   181f6:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   181f8:	4a17      	ldr	r2, [pc, #92]	; (18258 <z_set_prio+0x8c>)
				thread->base.prio = prio;
   181fa:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   181fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   18200:	7343      	strb	r3, [r0, #13]
   18202:	4610      	mov	r0, r2
   18204:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18208:	4283      	cmp	r3, r0
   1820a:	d01b      	beq.n	18244 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1820c:	b1d3      	cbz	r3, 18244 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
   1820e:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
   18210:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   18214:	42a9      	cmp	r1, r5
   18216:	d010      	beq.n	1823a <z_set_prio+0x6e>
		return b2 - b1;
   18218:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   1821a:	2d00      	cmp	r5, #0
   1821c:	dd0d      	ble.n	1823a <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
   1821e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   18220:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   18224:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   18226:	605c      	str	r4, [r3, #4]
			update_cache(1);
   18228:	2001      	movs	r0, #1
   1822a:	f7ff fe8f 	bl	17f4c <update_cache>
   1822e:	2001      	movs	r0, #1
	__asm__ volatile(
   18230:	f386 8811 	msr	BASEPRI, r6
   18234:	f3bf 8f6f 	isb	sy
}
   18238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1823a:	42bb      	cmp	r3, r7
   1823c:	d002      	beq.n	18244 <z_set_prio+0x78>
   1823e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18240:	2b00      	cmp	r3, #0
   18242:	d1e5      	bne.n	18210 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
   18244:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
   18246:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
   1824a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1824c:	6254      	str	r4, [r2, #36]	; 0x24
}
   1824e:	e7eb      	b.n	18228 <z_set_prio+0x5c>
			thread->base.prio = prio;
   18250:	73a1      	strb	r1, [r4, #14]
   18252:	2000      	movs	r0, #0
   18254:	e7ec      	b.n	18230 <z_set_prio+0x64>
   18256:	bf00      	nop
   18258:	20002dd0 	.word	0x20002dd0

0001825c <z_impl_k_thread_suspend>:
{
   1825c:	b570      	push	{r4, r5, r6, lr}
   1825e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   18260:	3018      	adds	r0, #24
   18262:	f006 fb57 	bl	1e914 <z_abort_timeout>
	__asm__ volatile(
   18266:	f04f 0320 	mov.w	r3, #32
   1826a:	f3ef 8611 	mrs	r6, BASEPRI
   1826e:	f383 8812 	msr	BASEPRI_MAX, r3
   18272:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   18276:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   1827a:	7b63      	ldrb	r3, [r4, #13]
   1827c:	2a00      	cmp	r2, #0
   1827e:	da05      	bge.n	1828c <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   18280:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   18284:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   18286:	4620      	mov	r0, r4
   18288:	f006 fa3c 	bl	1e704 <sys_dlist_remove>
		update_cache(thread == _current);
   1828c:	4d0b      	ldr	r5, [pc, #44]	; (182bc <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1828e:	7b63      	ldrb	r3, [r4, #13]
   18290:	68a8      	ldr	r0, [r5, #8]
   18292:	f043 0310 	orr.w	r3, r3, #16
   18296:	7363      	strb	r3, [r4, #13]
   18298:	1b03      	subs	r3, r0, r4
   1829a:	4258      	negs	r0, r3
   1829c:	4158      	adcs	r0, r3
   1829e:	f7ff fe55 	bl	17f4c <update_cache>
	__asm__ volatile(
   182a2:	f386 8811 	msr	BASEPRI, r6
   182a6:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   182aa:	68ab      	ldr	r3, [r5, #8]
   182ac:	42a3      	cmp	r3, r4
   182ae:	d103      	bne.n	182b8 <z_impl_k_thread_suspend+0x5c>
}
   182b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   182b4:	f006 ba68 	b.w	1e788 <z_reschedule_unlocked>
}
   182b8:	bd70      	pop	{r4, r5, r6, pc}
   182ba:	bf00      	nop
   182bc:	20002dd0 	.word	0x20002dd0

000182c0 <k_sched_unlock>:
{
   182c0:	b510      	push	{r4, lr}
	__asm__ volatile(
   182c2:	f04f 0320 	mov.w	r3, #32
   182c6:	f3ef 8411 	mrs	r4, BASEPRI
   182ca:	f383 8812 	msr	BASEPRI_MAX, r3
   182ce:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   182d2:	4b08      	ldr	r3, [pc, #32]	; (182f4 <k_sched_unlock+0x34>)
   182d4:	689a      	ldr	r2, [r3, #8]
   182d6:	7bd3      	ldrb	r3, [r2, #15]
   182d8:	3301      	adds	r3, #1
   182da:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   182dc:	2000      	movs	r0, #0
   182de:	f7ff fe35 	bl	17f4c <update_cache>
	__asm__ volatile(
   182e2:	f384 8811 	msr	BASEPRI, r4
   182e6:	f3bf 8f6f 	isb	sy
}
   182ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   182ee:	f006 ba4b 	b.w	1e788 <z_reschedule_unlocked>
   182f2:	bf00      	nop
   182f4:	20002dd0 	.word	0x20002dd0

000182f8 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   182f8:	4b04      	ldr	r3, [pc, #16]	; (1830c <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   182fa:	2100      	movs	r1, #0
   182fc:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   18300:	e9c3 2208 	strd	r2, r2, [r3, #32]
   18304:	4608      	mov	r0, r1
   18306:	f7ff bdcb 	b.w	17ea0 <k_sched_time_slice_set>
   1830a:	bf00      	nop
   1830c:	20002dd0 	.word	0x20002dd0

00018310 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   18310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   18312:	f04f 0320 	mov.w	r3, #32
   18316:	f3ef 8511 	mrs	r5, BASEPRI
   1831a:	f383 8812 	msr	BASEPRI_MAX, r3
   1831e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(&_kernel.ready_q.runq,
   18322:	491a      	ldr	r1, [pc, #104]	; (1838c <z_impl_k_yield+0x7c>)
   18324:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   18326:	7b43      	ldrb	r3, [r0, #13]
   18328:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1832c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1832e:	f006 f9e9 	bl	1e704 <sys_dlist_remove>
			       _current);
	}
	queue_thread(&_kernel.ready_q.runq, _current);
   18332:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   18334:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   18336:	4608      	mov	r0, r1
   18338:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1833c:	735a      	strb	r2, [r3, #13]
   1833e:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18342:	4282      	cmp	r2, r0
   18344:	d01c      	beq.n	18380 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18346:	b1da      	cbz	r2, 18380 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
   18348:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
   1834a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   1834e:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
   18352:	42a6      	cmp	r6, r4
   18354:	d00f      	beq.n	18376 <z_impl_k_yield+0x66>
		return b2 - b1;
   18356:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   18358:	2c00      	cmp	r4, #0
   1835a:	dd0c      	ble.n	18376 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
   1835c:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1835e:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   18362:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   18364:	6053      	str	r3, [r2, #4]
	update_cache(1);
   18366:	2001      	movs	r0, #1
   18368:	f7ff fdf0 	bl	17f4c <update_cache>
   1836c:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   1836e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   18372:	f7eb b87b 	b.w	346c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   18376:	42ba      	cmp	r2, r7
   18378:	d002      	beq.n	18380 <z_impl_k_yield+0x70>
   1837a:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1837c:	2a00      	cmp	r2, #0
   1837e:	d1e6      	bne.n	1834e <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
   18380:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
   18382:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
   18386:	6013      	str	r3, [r2, #0]
	list->tail = node;
   18388:	624b      	str	r3, [r1, #36]	; 0x24
}
   1838a:	e7ec      	b.n	18366 <z_impl_k_yield+0x56>
   1838c:	20002dd0 	.word	0x20002dd0

00018390 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   18390:	ea50 0301 	orrs.w	r3, r0, r1
{
   18394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18398:	4605      	mov	r5, r0
   1839a:	460e      	mov	r6, r1
	if (ticks == 0) {
   1839c:	d103      	bne.n	183a6 <z_tick_sleep+0x16>
	z_impl_k_yield();
   1839e:	f7ff ffb7 	bl	18310 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   183a2:	2000      	movs	r0, #0
   183a4:	e033      	b.n	1840e <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   183a6:	f06f 0401 	mvn.w	r4, #1
   183aa:	1a24      	subs	r4, r4, r0
   183ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   183b0:	eb63 0301 	sbc.w	r3, r3, r1
   183b4:	2c01      	cmp	r4, #1
   183b6:	f173 0300 	sbcs.w	r3, r3, #0
   183ba:	da02      	bge.n	183c2 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   183bc:	f006 fafa 	bl	1e9b4 <sys_clock_tick_get_32>
   183c0:	1944      	adds	r4, r0, r5
   183c2:	f04f 0320 	mov.w	r3, #32
   183c6:	f3ef 8811 	mrs	r8, BASEPRI
   183ca:	f383 8812 	msr	BASEPRI_MAX, r3
   183ce:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   183d2:	4f10      	ldr	r7, [pc, #64]	; (18414 <z_tick_sleep+0x84>)
   183d4:	4b10      	ldr	r3, [pc, #64]	; (18418 <z_tick_sleep+0x88>)
   183d6:	68b8      	ldr	r0, [r7, #8]
   183d8:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   183da:	f7ff fea5 	bl	18128 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   183de:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   183e0:	490e      	ldr	r1, [pc, #56]	; (1841c <z_tick_sleep+0x8c>)
   183e2:	462a      	mov	r2, r5
   183e4:	4633      	mov	r3, r6
   183e6:	3018      	adds	r0, #24
   183e8:	f000 f93a 	bl	18660 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   183ec:	68ba      	ldr	r2, [r7, #8]
   183ee:	7b53      	ldrb	r3, [r2, #13]
   183f0:	f043 0310 	orr.w	r3, r3, #16
   183f4:	7353      	strb	r3, [r2, #13]
   183f6:	4640      	mov	r0, r8
   183f8:	f7eb f838 	bl	346c <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   183fc:	f006 fada 	bl	1e9b4 <sys_clock_tick_get_32>
   18400:	1a20      	subs	r0, r4, r0
   18402:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   18406:	2801      	cmp	r0, #1
   18408:	f173 0300 	sbcs.w	r3, r3, #0
   1840c:	dbc9      	blt.n	183a2 <z_tick_sleep+0x12>
}
   1840e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18412:	bf00      	nop
   18414:	20002dd0 	.word	0x20002dd0
   18418:	20002e00 	.word	0x20002e00
   1841c:	0001e7c9 	.word	0x0001e7c9

00018420 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   18420:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   18424:	bf08      	it	eq
   18426:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1842a:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1842c:	d106      	bne.n	1843c <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1842e:	4b08      	ldr	r3, [pc, #32]	; (18450 <z_impl_k_sleep+0x30>)
   18430:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   18432:	f7ff ff13 	bl	1825c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   18436:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   1843a:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   1843c:	f7ff ffa8 	bl	18390 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   18440:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   18444:	fb80 0303 	smull	r0, r3, r0, r3
   18448:	0bc0      	lsrs	r0, r0, #15
   1844a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   1844e:	e7f4      	b.n	1843a <z_impl_k_sleep+0x1a>
   18450:	20002dd0 	.word	0x20002dd0

00018454 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   18454:	4b01      	ldr	r3, [pc, #4]	; (1845c <z_impl_z_current_get+0x8>)
   18456:	6898      	ldr	r0, [r3, #8]
   18458:	4770      	bx	lr
   1845a:	bf00      	nop
   1845c:	20002dd0 	.word	0x20002dd0

00018460 <z_impl_k_is_preempt_thread>:
   18460:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   18464:	b93b      	cbnz	r3, 18476 <z_impl_k_is_preempt_thread+0x16>
   18466:	4b05      	ldr	r3, [pc, #20]	; (1847c <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   18468:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
   1846a:	89d8      	ldrh	r0, [r3, #14]
   1846c:	287f      	cmp	r0, #127	; 0x7f
   1846e:	bf8c      	ite	hi
   18470:	2000      	movhi	r0, #0
   18472:	2001      	movls	r0, #1
   18474:	4770      	bx	lr
   18476:	2000      	movs	r0, #0
}
   18478:	4770      	bx	lr
   1847a:	bf00      	nop
   1847c:	20002dd0 	.word	0x20002dd0

00018480 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   18480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18484:	4604      	mov	r4, r0
   18486:	f04f 0320 	mov.w	r3, #32
   1848a:	f3ef 8611 	mrs	r6, BASEPRI
   1848e:	f383 8812 	msr	BASEPRI_MAX, r3
   18492:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   18496:	7b43      	ldrb	r3, [r0, #13]
   18498:	071a      	lsls	r2, r3, #28
   1849a:	d505      	bpl.n	184a8 <z_thread_abort+0x28>
	__asm__ volatile(
   1849c:	f386 8811 	msr	BASEPRI, r6
   184a0:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   184a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   184a8:	f023 0220 	bic.w	r2, r3, #32
   184ac:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   184b0:	09d2      	lsrs	r2, r2, #7
   184b2:	d120      	bne.n	184f6 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   184b4:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   184b6:	68a3      	ldr	r3, [r4, #8]
   184b8:	b113      	cbz	r3, 184c0 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   184ba:	4620      	mov	r0, r4
   184bc:	f006 f92a 	bl	1e714 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   184c0:	f104 0018 	add.w	r0, r4, #24
   184c4:	f006 fa26 	bl	1e914 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   184c8:	f104 0758 	add.w	r7, r4, #88	; 0x58
   184cc:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   184d0:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   184d2:	42bd      	cmp	r5, r7
   184d4:	d000      	beq.n	184d8 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   184d6:	b9b5      	cbnz	r5, 18506 <z_thread_abort+0x86>
		update_cache(1);
   184d8:	2001      	movs	r0, #1
   184da:	f7ff fd37 	bl	17f4c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   184de:	4b10      	ldr	r3, [pc, #64]	; (18520 <z_thread_abort+0xa0>)
   184e0:	689b      	ldr	r3, [r3, #8]
   184e2:	42a3      	cmp	r3, r4
   184e4:	d1da      	bne.n	1849c <z_thread_abort+0x1c>
   184e6:	f3ef 8305 	mrs	r3, IPSR
   184ea:	2b00      	cmp	r3, #0
   184ec:	d1d6      	bne.n	1849c <z_thread_abort+0x1c>
   184ee:	4630      	mov	r0, r6
   184f0:	f7ea ffbc 	bl	346c <arch_swap>
	return ret;
   184f4:	e7d2      	b.n	1849c <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   184f6:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   184fa:	f043 0308 	orr.w	r3, r3, #8
   184fe:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   18500:	f006 f900 	bl	1e704 <sys_dlist_remove>
}
   18504:	e7d7      	b.n	184b6 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   18506:	4628      	mov	r0, r5
   18508:	f006 f904 	bl	1e714 <unpend_thread_no_timeout>
   1850c:	f105 0018 	add.w	r0, r5, #24
   18510:	f006 fa00 	bl	1e914 <z_abort_timeout>
   18514:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   18518:	4628      	mov	r0, r5
   1851a:	f7ff fdb1 	bl	18080 <ready_thread>
   1851e:	e7d7      	b.n	184d0 <z_thread_abort+0x50>
   18520:	20002dd0 	.word	0x20002dd0

00018524 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   18524:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   18526:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   1852a:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1852c:	e9cd 6700 	strd	r6, r7, [sp]
   18530:	f7ff fe38 	bl	181a4 <z_pend_curr>

	if (data != NULL) {
   18534:	b11c      	cbz	r4, 1853e <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   18536:	4b03      	ldr	r3, [pc, #12]	; (18544 <z_sched_wait+0x20>)
   18538:	689b      	ldr	r3, [r3, #8]
   1853a:	695b      	ldr	r3, [r3, #20]
   1853c:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1853e:	b002      	add	sp, #8
   18540:	bdd0      	pop	{r4, r6, r7, pc}
   18542:	bf00      	nop
   18544:	20002dd0 	.word	0x20002dd0

00018548 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   18548:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
   1854a:	4806      	ldr	r0, [pc, #24]	; (18564 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   1854c:	4a06      	ldr	r2, [pc, #24]	; (18568 <z_data_copy+0x20>)
   1854e:	4907      	ldr	r1, [pc, #28]	; (1856c <z_data_copy+0x24>)
   18550:	1a12      	subs	r2, r2, r0
   18552:	f001 fe94 	bl	1a27e <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   18556:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
   1855a:	4a05      	ldr	r2, [pc, #20]	; (18570 <z_data_copy+0x28>)
   1855c:	4905      	ldr	r1, [pc, #20]	; (18574 <z_data_copy+0x2c>)
   1855e:	4806      	ldr	r0, [pc, #24]	; (18578 <z_data_copy+0x30>)
   18560:	f001 be8d 	b.w	1a27e <memcpy>
   18564:	20000000 	.word	0x20000000
   18568:	20000d78 	.word	0x20000d78
   1856c:	000235f4 	.word	0x000235f4
   18570:	00000000 	.word	0x00000000
   18574:	000235f4 	.word	0x000235f4
   18578:	20000000 	.word	0x20000000

0001857c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1857c:	4b03      	ldr	r3, [pc, #12]	; (1858c <elapsed+0x10>)
   1857e:	681b      	ldr	r3, [r3, #0]
   18580:	b90b      	cbnz	r3, 18586 <elapsed+0xa>
   18582:	f7fe baed 	b.w	16b60 <sys_clock_elapsed>
}
   18586:	2000      	movs	r0, #0
   18588:	4770      	bx	lr
   1858a:	bf00      	nop
   1858c:	20002e0c 	.word	0x20002e0c

00018590 <next_timeout>:
	return list->head == list;
   18590:	4b11      	ldr	r3, [pc, #68]	; (185d8 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
   18592:	b510      	push	{r4, lr}
   18594:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18596:	429c      	cmp	r4, r3
   18598:	bf08      	it	eq
   1859a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1859c:	f7ff ffee 	bl	1857c <elapsed>
   185a0:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
   185a2:	b16c      	cbz	r4, 185c0 <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   185a4:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
   185a8:	1ac0      	subs	r0, r0, r3
   185aa:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   185ae:	2801      	cmp	r0, #1
   185b0:	f173 0200 	sbcs.w	r2, r3, #0
   185b4:	db0d      	blt.n	185d2 <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   185b6:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   185ba:	f173 0300 	sbcs.w	r3, r3, #0
   185be:	db01      	blt.n	185c4 <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
   185c0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   185c4:	4b05      	ldr	r3, [pc, #20]	; (185dc <next_timeout+0x4c>)
   185c6:	691b      	ldr	r3, [r3, #16]
   185c8:	b113      	cbz	r3, 185d0 <next_timeout+0x40>
   185ca:	4298      	cmp	r0, r3
   185cc:	bfa8      	it	ge
   185ce:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   185d0:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   185d2:	2000      	movs	r0, #0
   185d4:	e7f6      	b.n	185c4 <next_timeout+0x34>
   185d6:	bf00      	nop
   185d8:	200009d4 	.word	0x200009d4
   185dc:	20002dd0 	.word	0x20002dd0

000185e0 <remove_timeout>:
{
   185e0:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   185e2:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   185e4:	b168      	cbz	r0, 18602 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   185e6:	4a0a      	ldr	r2, [pc, #40]	; (18610 <remove_timeout+0x30>)
   185e8:	6852      	ldr	r2, [r2, #4]
   185ea:	4290      	cmp	r0, r2
   185ec:	d009      	beq.n	18602 <remove_timeout+0x22>
	if (next(t) != NULL) {
   185ee:	b143      	cbz	r3, 18602 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   185f0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   185f4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   185f8:	1912      	adds	r2, r2, r4
   185fa:	eb41 0105 	adc.w	r1, r1, r5
   185fe:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   18602:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   18604:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   18606:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   18608:	2300      	movs	r3, #0
	node->prev = NULL;
   1860a:	e9c0 3300 	strd	r3, r3, [r0]
}
   1860e:	bd30      	pop	{r4, r5, pc}
   18610:	200009d4 	.word	0x200009d4

00018614 <timeout_rem>:
	return ret;
}

/* must be locked */
static k_ticks_t timeout_rem(const struct _timeout *timeout)
{
   18614:	b570      	push	{r4, r5, r6, lr}
	k_ticks_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   18616:	6804      	ldr	r4, [r0, #0]
   18618:	b1e4      	cbz	r4, 18654 <timeout_rem+0x40>
	return list->head == list;
   1861a:	4a10      	ldr	r2, [pc, #64]	; (1865c <timeout_rem+0x48>)
   1861c:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1861e:	4293      	cmp	r3, r2
   18620:	d015      	beq.n	1864e <timeout_rem+0x3a>
	return (node == list->tail) ? NULL : node->next;
   18622:	2400      	movs	r4, #0
   18624:	6851      	ldr	r1, [r2, #4]
   18626:	4625      	mov	r5, r4
		return 0;
	}

	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   18628:	b933      	cbnz	r3, 18638 <timeout_rem+0x24>
		if (timeout == t) {
			break;
		}
	}

	return ticks - elapsed();
   1862a:	f7ff ffa7 	bl	1857c <elapsed>
   1862e:	4601      	mov	r1, r0
   18630:	1a20      	subs	r0, r4, r0
   18632:	eb65 71e1 	sbc.w	r1, r5, r1, asr #31
}
   18636:	bd70      	pop	{r4, r5, r6, pc}
		ticks += t->dticks;
   18638:	e9d3 2604 	ldrd	r2, r6, [r3, #16]
   1863c:	18a4      	adds	r4, r4, r2
   1863e:	eb45 0506 	adc.w	r5, r5, r6
		if (timeout == t) {
   18642:	4283      	cmp	r3, r0
   18644:	d0f1      	beq.n	1862a <timeout_rem+0x16>
   18646:	428b      	cmp	r3, r1
   18648:	d0ef      	beq.n	1862a <timeout_rem+0x16>
   1864a:	681b      	ldr	r3, [r3, #0]
   1864c:	e7ec      	b.n	18628 <timeout_rem+0x14>
   1864e:	2400      	movs	r4, #0
   18650:	4625      	mov	r5, r4
   18652:	e7ea      	b.n	1862a <timeout_rem+0x16>
		return 0;
   18654:	4620      	mov	r0, r4
   18656:	4621      	mov	r1, r4
   18658:	e7ed      	b.n	18636 <timeout_rem+0x22>
   1865a:	bf00      	nop
   1865c:	200009d4 	.word	0x200009d4

00018660 <z_add_timeout>:
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   18660:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   18664:	bf08      	it	eq
   18666:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   1866a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1866c:	4604      	mov	r4, r0
   1866e:	461f      	mov	r7, r3
   18670:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   18672:	d067      	beq.n	18744 <z_add_timeout+0xe4>
	to->fn = fn;
   18674:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   18676:	f04f 0320 	mov.w	r3, #32
   1867a:	f3ef 8611 	mrs	r6, BASEPRI
   1867e:	f383 8812 	msr	BASEPRI_MAX, r3
   18682:	f3bf 8f6f 	isb	sy
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   18686:	f06f 0201 	mvn.w	r2, #1
   1868a:	1b53      	subs	r3, r2, r5
   1868c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   18690:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   18694:	2b00      	cmp	r3, #0
   18696:	db1b      	blt.n	186d0 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   18698:	4b2b      	ldr	r3, [pc, #172]	; (18748 <z_add_timeout+0xe8>)
   1869a:	e9d3 1300 	ldrd	r1, r3, [r3]
   1869e:	1a52      	subs	r2, r2, r1
   186a0:	eb6c 0303 	sbc.w	r3, ip, r3
   186a4:	1b55      	subs	r5, r2, r5
			to->dticks = MAX(1, ticks);
   186a6:	eb63 0307 	sbc.w	r3, r3, r7
   186aa:	2d01      	cmp	r5, #1
   186ac:	f173 0200 	sbcs.w	r2, r3, #0
   186b0:	bfbc      	itt	lt
   186b2:	2501      	movlt	r5, #1
   186b4:	2300      	movlt	r3, #0
   186b6:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
   186ba:	4824      	ldr	r0, [pc, #144]	; (1874c <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
   186bc:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   186c0:	4283      	cmp	r3, r0
   186c2:	d118      	bne.n	186f6 <z_add_timeout+0x96>
	node->prev = tail;
   186c4:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
   186c8:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   186cc:	6044      	str	r4, [r0, #4]
}
   186ce:	e026      	b.n	1871e <z_add_timeout+0xbe>
			to->dticks = timeout.ticks + 1 + elapsed();
   186d0:	f7ff ff54 	bl	1857c <elapsed>
   186d4:	3501      	adds	r5, #1
   186d6:	f147 0700 	adc.w	r7, r7, #0
   186da:	182d      	adds	r5, r5, r0
   186dc:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
   186e0:	e9c4 5704 	strd	r5, r7, [r4, #16]
   186e4:	e7e9      	b.n	186ba <z_add_timeout+0x5a>
			to->dticks -= t->dticks;
   186e6:	1a52      	subs	r2, r2, r1
   186e8:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   186ec:	459c      	cmp	ip, r3
   186ee:	e9c4 2504 	strd	r2, r5, [r4, #16]
   186f2:	d0e7      	beq.n	186c4 <z_add_timeout+0x64>
   186f4:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   186f6:	2b00      	cmp	r3, #0
   186f8:	d0e4      	beq.n	186c4 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
   186fa:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
   186fe:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
   18702:	428a      	cmp	r2, r1
   18704:	eb75 0e07 	sbcs.w	lr, r5, r7
   18708:	daed      	bge.n	186e6 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
   1870a:	1a8a      	subs	r2, r1, r2
   1870c:	eb67 0505 	sbc.w	r5, r7, r5
   18710:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   18714:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   18716:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1871a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1871c:	605c      	str	r4, [r3, #4]
	return list->head == list;
   1871e:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18720:	4283      	cmp	r3, r0
   18722:	d00b      	beq.n	1873c <z_add_timeout+0xdc>
		if (to == first()) {
   18724:	429c      	cmp	r4, r3
   18726:	d109      	bne.n	1873c <z_add_timeout+0xdc>
			int32_t next_time = next_timeout();
   18728:	f7ff ff32 	bl	18590 <next_timeout>
			if (next_time == 0 ||
   1872c:	b118      	cbz	r0, 18736 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
   1872e:	4b08      	ldr	r3, [pc, #32]	; (18750 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
   18730:	691b      	ldr	r3, [r3, #16]
   18732:	4283      	cmp	r3, r0
   18734:	d002      	beq.n	1873c <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
   18736:	2100      	movs	r1, #0
   18738:	f7fe f9e0 	bl	16afc <sys_clock_set_timeout>
	__asm__ volatile(
   1873c:	f386 8811 	msr	BASEPRI, r6
   18740:	f3bf 8f6f 	isb	sy
}
   18744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18746:	bf00      	nop
   18748:	20001890 	.word	0x20001890
   1874c:	200009d4 	.word	0x200009d4
   18750:	20002dd0 	.word	0x20002dd0

00018754 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   18754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18758:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1875a:	f7ff fc51 	bl	18000 <z_time_slice>
	__asm__ volatile(
   1875e:	f04f 0320 	mov.w	r3, #32
   18762:	f3ef 8411 	mrs	r4, BASEPRI
   18766:	f383 8812 	msr	BASEPRI_MAX, r3
   1876a:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1876e:	4e24      	ldr	r6, [pc, #144]	; (18800 <sys_clock_announce+0xac>)
	return list->head == list;
   18770:	f8df 8090 	ldr.w	r8, [pc, #144]	; 18804 <sys_clock_announce+0xb0>
   18774:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   18776:	4d24      	ldr	r5, [pc, #144]	; (18808 <sys_clock_announce+0xb4>)
   18778:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1877c:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1877e:	4540      	cmp	r0, r8
		curr_tick += dt;
   18780:	e9d5 1e00 	ldrd	r1, lr, [r5]
   18784:	ea4f 77e2 	mov.w	r7, r2, asr #31
   18788:	d00b      	beq.n	187a2 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1878a:	b150      	cbz	r0, 187a2 <sys_clock_announce+0x4e>
   1878c:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
   18790:	429a      	cmp	r2, r3
   18792:	eb77 090c 	sbcs.w	r9, r7, ip
   18796:	da16      	bge.n	187c6 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   18798:	1a9b      	subs	r3, r3, r2
   1879a:	eb6c 0c07 	sbc.w	ip, ip, r7
   1879e:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   187a2:	1852      	adds	r2, r2, r1
   187a4:	eb4e 0707 	adc.w	r7, lr, r7
   187a8:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
   187ac:	2500      	movs	r5, #0
   187ae:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
   187b0:	f7ff feee 	bl	18590 <next_timeout>
   187b4:	4629      	mov	r1, r5
   187b6:	f7fe f9a1 	bl	16afc <sys_clock_set_timeout>
	__asm__ volatile(
   187ba:	f384 8811 	msr	BASEPRI, r4
   187be:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   187c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   187c6:	1859      	adds	r1, r3, r1
   187c8:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
   187cc:	1ad3      	subs	r3, r2, r3
   187ce:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   187d0:	2200      	movs	r2, #0
   187d2:	2300      	movs	r3, #0
   187d4:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
   187d8:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
   187dc:	f7ff ff00 	bl	185e0 <remove_timeout>
   187e0:	f384 8811 	msr	BASEPRI, r4
   187e4:	f3bf 8f6f 	isb	sy
		t->fn(t);
   187e8:	6883      	ldr	r3, [r0, #8]
   187ea:	4798      	blx	r3
	__asm__ volatile(
   187ec:	f04f 0320 	mov.w	r3, #32
   187f0:	f3ef 8411 	mrs	r4, BASEPRI
   187f4:	f383 8812 	msr	BASEPRI_MAX, r3
   187f8:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   187fc:	e7bc      	b.n	18778 <sys_clock_announce+0x24>
   187fe:	bf00      	nop
   18800:	20002e0c 	.word	0x20002e0c
   18804:	200009d4 	.word	0x200009d4
   18808:	20001890 	.word	0x20001890

0001880c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1880c:	b510      	push	{r4, lr}
   1880e:	f04f 0320 	mov.w	r3, #32
   18812:	f3ef 8411 	mrs	r4, BASEPRI
   18816:	f383 8812 	msr	BASEPRI_MAX, r3
   1881a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   1881e:	f7fe f99f 	bl	16b60 <sys_clock_elapsed>
   18822:	4a05      	ldr	r2, [pc, #20]	; (18838 <sys_clock_tick_get+0x2c>)
   18824:	e9d2 3100 	ldrd	r3, r1, [r2]
   18828:	18c0      	adds	r0, r0, r3
   1882a:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
   1882e:	f384 8811 	msr	BASEPRI, r4
   18832:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   18836:	bd10      	pop	{r4, pc}
   18838:	20001890 	.word	0x20001890

0001883c <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1883c:	b570      	push	{r4, r5, r6, lr}
   1883e:	4604      	mov	r4, r0
	__asm__ volatile(
   18840:	f04f 0320 	mov.w	r3, #32
   18844:	f3ef 8611 	mrs	r6, BASEPRI
   18848:	f383 8812 	msr	BASEPRI_MAX, r3
   1884c:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   18850:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   18854:	3301      	adds	r3, #1
   18856:	f142 0200 	adc.w	r2, r2, #0
   1885a:	2b02      	cmp	r3, #2
   1885c:	f172 0300 	sbcs.w	r3, r2, #0
   18860:	d304      	bcc.n	1886c <z_timer_expiration_handler+0x30>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   18862:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   18866:	4911      	ldr	r1, [pc, #68]	; (188ac <z_timer_expiration_handler+0x70>)
   18868:	f7ff fefa 	bl	18660 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1886c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1886e:	3301      	adds	r3, #1
   18870:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   18872:	6a23      	ldr	r3, [r4, #32]
   18874:	b10b      	cbz	r3, 1887a <z_timer_expiration_handler+0x3e>
		timer->expiry_fn(timer);
   18876:	4620      	mov	r0, r4
   18878:	4798      	blx	r3
	return list->head == list;
   1887a:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1887e:	42a5      	cmp	r5, r4
   18880:	d000      	beq.n	18884 <z_timer_expiration_handler+0x48>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   18882:	b925      	cbnz	r5, 1888e <z_timer_expiration_handler+0x52>
	__asm__ volatile(
   18884:	f386 8811 	msr	BASEPRI, r6
   18888:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   1888c:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   1888e:	4628      	mov	r0, r5
   18890:	f005 ff4a 	bl	1e728 <z_unpend_thread_no_timeout>
   18894:	2300      	movs	r3, #0
   18896:	67eb      	str	r3, [r5, #124]	; 0x7c
   18898:	f386 8811 	msr	BASEPRI, r6
   1889c:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   188a0:	4628      	mov	r0, r5
}
   188a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   188a6:	f005 bf7f 	b.w	1e7a8 <z_ready_thread>
   188aa:	bf00      	nop
   188ac:	0001883d 	.word	0x0001883d

000188b0 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   188b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   188b4:	4611      	mov	r1, r2
   188b6:	4605      	mov	r5, r0
   188b8:	4618      	mov	r0, r3
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   188ba:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   188be:	bf08      	it	eq
   188c0:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
{
   188c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   188c8:	4688      	mov	r8, r1
   188ca:	4607      	mov	r7, r0
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   188cc:	d03c      	beq.n	18948 <z_impl_k_timer_start+0x98>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   188ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   188d2:	bf08      	it	eq
   188d4:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   188d8:	4614      	mov	r4, r2
   188da:	461e      	mov	r6, r3
   188dc:	d013      	beq.n	18906 <z_impl_k_timer_start+0x56>
   188de:	431a      	orrs	r2, r3
   188e0:	d011      	beq.n	18906 <z_impl_k_timer_start+0x56>
	    Z_TICK_ABS(period.ticks) < 0) {
   188e2:	f06f 0201 	mvn.w	r2, #1
   188e6:	1b12      	subs	r2, r2, r4
   188e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   188ec:	eb62 0203 	sbc.w	r2, r2, r3
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   188f0:	2a00      	cmp	r2, #0
   188f2:	da08      	bge.n	18906 <z_impl_k_timer_start+0x56>
		period.ticks = MAX(period.ticks - 1, 1);
   188f4:	3c01      	subs	r4, #1
   188f6:	f163 0600 	sbc.w	r6, r3, #0
   188fa:	2c01      	cmp	r4, #1
   188fc:	f176 0300 	sbcs.w	r3, r6, #0
   18900:	bfbc      	itt	lt
   18902:	2401      	movlt	r4, #1
   18904:	2600      	movlt	r6, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   18906:	f06f 0301 	mvn.w	r3, #1
   1890a:	1a5b      	subs	r3, r3, r1
   1890c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18910:	eb63 0300 	sbc.w	r3, r3, r0
   18914:	2b00      	cmp	r3, #0
   18916:	da08      	bge.n	1892a <z_impl_k_timer_start+0x7a>
		duration.ticks = MAX(duration.ticks - 1, 0);
   18918:	1e4a      	subs	r2, r1, #1
   1891a:	f160 0700 	sbc.w	r7, r0, #0
   1891e:	2f00      	cmp	r7, #0
   18920:	4690      	mov	r8, r2
   18922:	bfbc      	itt	lt
   18924:	f04f 0800 	movlt.w	r8, #0
   18928:	4647      	movlt	r7, r8
	}

	(void)z_abort_timeout(&timer->timeout);
   1892a:	4628      	mov	r0, r5
   1892c:	f005 fff2 	bl	1e914 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   18930:	2300      	movs	r3, #0
   18932:	632b      	str	r3, [r5, #48]	; 0x30
	timer->period = period;
   18934:	e9c5 460a 	strd	r4, r6, [r5, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   18938:	4642      	mov	r2, r8
   1893a:	463b      	mov	r3, r7
   1893c:	4628      	mov	r0, r5
   1893e:	4903      	ldr	r1, [pc, #12]	; (1894c <z_impl_k_timer_start+0x9c>)
		     duration);
}
   18940:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   18944:	f7ff be8c 	b.w	18660 <z_add_timeout>
}
   18948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1894c:	0001883d 	.word	0x0001883d

00018950 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   18950:	b538      	push	{r3, r4, r5, lr}
   18952:	4603      	mov	r3, r0
	__asm__ volatile(
   18954:	f04f 0220 	mov.w	r2, #32
   18958:	f3ef 8511 	mrs	r5, BASEPRI
   1895c:	f382 8812 	msr	BASEPRI_MAX, r2
   18960:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   18964:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   18966:	2101      	movs	r1, #1
   18968:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1896a:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1896c:	4283      	cmp	r3, r0
   1896e:	d106      	bne.n	1897e <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   18970:	f385 8811 	msr	BASEPRI, r5
   18974:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   18978:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   1897a:	4620      	mov	r0, r4
   1897c:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   1897e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   18982:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   18984:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   18986:	2300      	movs	r3, #0
	node->prev = NULL;
   18988:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1898c:	f006 f870 	bl	1ea70 <signal_poll_event>
	z_reschedule(&lock, key);
   18990:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   18992:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   18994:	4801      	ldr	r0, [pc, #4]	; (1899c <z_impl_k_poll_signal_raise+0x4c>)
   18996:	f7ff fab3 	bl	17f00 <z_reschedule>
	return rc;
   1899a:	e7ee      	b.n	1897a <z_impl_k_poll_signal_raise+0x2a>
   1899c:	20003425 	.word	0x20003425

000189a0 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   189a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   189a2:	4606      	mov	r6, r0
   189a4:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   189a6:	f005 fc9a 	bl	1e2de <k_is_in_isr>
   189aa:	b978      	cbnz	r0, 189cc <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   189ac:	4b0b      	ldr	r3, [pc, #44]	; (189dc <z_thread_aligned_alloc+0x3c>)
   189ae:	689b      	ldr	r3, [r3, #8]
   189b0:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   189b2:	b17c      	cbz	r4, 189d4 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   189b4:	1d2a      	adds	r2, r5, #4
   189b6:	d209      	bcs.n	189cc <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   189b8:	2000      	movs	r0, #0
   189ba:	2100      	movs	r1, #0
   189bc:	e9cd 0100 	strd	r0, r1, [sp]
   189c0:	f046 0104 	orr.w	r1, r6, #4
   189c4:	4620      	mov	r0, r4
   189c6:	f005 fbe8 	bl	1e19a <k_heap_aligned_alloc>
	if (mem == NULL) {
   189ca:	b908      	cbnz	r0, 189d0 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   189cc:	2400      	movs	r4, #0
	}

	return ret;
   189ce:	e001      	b.n	189d4 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   189d0:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   189d2:	1d04      	adds	r4, r0, #4
}
   189d4:	4620      	mov	r0, r4
   189d6:	b002      	add	sp, #8
   189d8:	bd70      	pop	{r4, r5, r6, pc}
   189da:	bf00      	nop
   189dc:	20002dd0 	.word	0x20002dd0

000189e0 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   189e0:	4a02      	ldr	r2, [pc, #8]	; (189ec <boot_banner+0xc>)
   189e2:	4903      	ldr	r1, [pc, #12]	; (189f0 <boot_banner+0x10>)
   189e4:	4803      	ldr	r0, [pc, #12]	; (189f4 <boot_banner+0x14>)
   189e6:	f000 b8ed 	b.w	18bc4 <printk>
   189ea:	bf00      	nop
   189ec:	00021df5 	.word	0x00021df5
   189f0:	000235ac 	.word	0x000235ac
   189f4:	000235ca 	.word	0x000235ca

000189f8 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   189f8:	4770      	bx	lr

000189fa <bl_gear>:
   189fa:	2000      	movs	r0, #0
   189fc:	4770      	bx	lr

000189fe <bl_core>:
   189fe:	2000      	movs	r0, #0
   18a00:	4770      	bx	lr

00018a02 <bl_down>:
   18a02:	2000      	movs	r0, #0
   18a04:	4770      	bx	lr

00018a06 <bl_ms>:
  {
   18a06:	b508      	push	{r3, lr}
    BL_us us = bl_us();
   18a08:	f7e8 ffb4 	bl	1974 <bl_us>
    return us/1000;
   18a0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18a10:	2300      	movs	r3, #0
   18a12:	f7e7 fb65 	bl	e0 <__aeabi_ldivmod>
  }
   18a16:	bd08      	pop	{r3, pc}

00018a18 <bl_sleep>:
  {
   18a18:	b538      	push	{r3, r4, r5, lr}
   18a1a:	2100      	movs	r1, #0
	return k_sleep(Z_TIMEOUT_MS(ms));
   18a1c:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
   18a20:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   18a24:	f240 30e7 	movw	r0, #999	; 0x3e7
   18a28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18a2c:	2300      	movs	r3, #0
   18a2e:	fbc4 0105 	smlal	r0, r1, r4, r5
   18a32:	f7e7 fba5 	bl	180 <__aeabi_uldivmod>
  }
   18a36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_impl_k_sleep(timeout);
   18a3a:	f7ff bcf1 	b.w	18420 <z_impl_k_sleep>

00018a3e <bl_sys>:
  {
   18a3e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   18a40:	460b      	mov	r3, r1
    BL_ob o = {CL_SYS,op,0,cb};
   18a42:	2100      	movs	r1, #0
   18a44:	e9cd 0101 	strd	r0, r1, [sp, #4]
    return module(&o,0);
   18a48:	4668      	mov	r0, sp
    BL_ob o = {CL_SYS,op,0,cb};
   18a4a:	f88d 1000 	strb.w	r1, [sp]
   18a4e:	9203      	str	r2, [sp, #12]
    return module(&o,0);
   18a50:	4798      	blx	r3
  }
   18a52:	b005      	add	sp, #20
   18a54:	f85d fb04 	ldr.w	pc, [sp], #4

00018a58 <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   18a58:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   18a5a:	2364      	movs	r3, #100	; 0x64
{
   18a5c:	4604      	mov	r4, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   18a5e:	2504      	movs	r5, #4
	uint8_t num_digits = 0;
   18a60:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   18a62:	f04f 0c0a 	mov.w	ip, #10
	while (buflen > 0 && divisor > 0) {
   18a66:	b111      	cbz	r1, 18a6e <u8_to_dec+0x16>
   18a68:	3d01      	subs	r5, #1
   18a6a:	d101      	bne.n	18a70 <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   18a6c:	7025      	strb	r5, [r4, #0]
	}

	return num_digits;
}
   18a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   18a70:	429a      	cmp	r2, r3
		digit = value / divisor;
   18a72:	fbb2 f7f3 	udiv	r7, r2, r3
   18a76:	b2fe      	uxtb	r6, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   18a78:	d202      	bcs.n	18a80 <u8_to_dec+0x28>
   18a7a:	2b01      	cmp	r3, #1
   18a7c:	d000      	beq.n	18a80 <u8_to_dec+0x28>
   18a7e:	b130      	cbz	r0, 18a8e <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   18a80:	3630      	adds	r6, #48	; 0x30
			buflen--;
   18a82:	3901      	subs	r1, #1
			num_digits++;
   18a84:	3001      	adds	r0, #1
			*buf = (char)digit + '0';
   18a86:	f804 6b01 	strb.w	r6, [r4], #1
			buflen--;
   18a8a:	b2c9      	uxtb	r1, r1
			num_digits++;
   18a8c:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   18a8e:	fb03 2217 	mls	r2, r3, r7, r2
   18a92:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   18a94:	fbb3 f3fc 	udiv	r3, r3, ip
   18a98:	e7e5      	b.n	18a66 <u8_to_dec+0xe>

00018a9a <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   18a9a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   18a9e:	b2da      	uxtb	r2, r3
   18aa0:	2a09      	cmp	r2, #9
   18aa2:	d802      	bhi.n	18aaa <char2hex+0x10>
		*x = c - '0';
   18aa4:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   18aa6:	2000      	movs	r0, #0
   18aa8:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   18aaa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   18aae:	2b05      	cmp	r3, #5
   18ab0:	d802      	bhi.n	18ab8 <char2hex+0x1e>
		*x = c - 'a' + 10;
   18ab2:	3857      	subs	r0, #87	; 0x57
   18ab4:	7008      	strb	r0, [r1, #0]
   18ab6:	e7f6      	b.n	18aa6 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   18ab8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   18abc:	2b05      	cmp	r3, #5
   18abe:	d801      	bhi.n	18ac4 <char2hex+0x2a>
		*x = c - 'A' + 10;
   18ac0:	3837      	subs	r0, #55	; 0x37
   18ac2:	e7f7      	b.n	18ab4 <char2hex+0x1a>
		return -EINVAL;
   18ac4:	f06f 0015 	mvn.w	r0, #21
}
   18ac8:	4770      	bx	lr

00018aca <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   18aca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   18ace:	4614      	mov	r4, r2
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   18ad0:	f001 0201 	and.w	r2, r1, #1
   18ad4:	eb02 0651 	add.w	r6, r2, r1, lsr #1
   18ad8:	429e      	cmp	r6, r3
{
   18ada:	4605      	mov	r5, r0
	if (buflen < hexlen / 2 + hexlen % 2) {
   18adc:	ea4f 0751 	mov.w	r7, r1, lsr #1
   18ae0:	d904      	bls.n	18aec <hex2bin+0x22>
		return 0;
   18ae2:	2600      	movs	r6, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   18ae4:	4630      	mov	r0, r6
   18ae6:	b002      	add	sp, #8
   18ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (hexlen % 2) {
   18aec:	b15a      	cbz	r2, 18b06 <hex2bin+0x3c>
		if (char2hex(hex[0], &dec) < 0) {
   18aee:	7800      	ldrb	r0, [r0, #0]
   18af0:	f10d 0107 	add.w	r1, sp, #7
   18af4:	f7ff ffd1 	bl	18a9a <char2hex>
   18af8:	2800      	cmp	r0, #0
   18afa:	dbf2      	blt.n	18ae2 <hex2bin+0x18>
		buf[0] = dec;
   18afc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   18b00:	f804 3b01 	strb.w	r3, [r4], #1
		hex++;
   18b04:	3501      	adds	r5, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   18b06:	3501      	adds	r5, #1
   18b08:	4427      	add	r7, r4
   18b0a:	42bc      	cmp	r4, r7
   18b0c:	d0ea      	beq.n	18ae4 <hex2bin+0x1a>
		if (char2hex(hex[2 * i], &dec) < 0) {
   18b0e:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   18b12:	f10d 0107 	add.w	r1, sp, #7
   18b16:	f7ff ffc0 	bl	18a9a <char2hex>
   18b1a:	2800      	cmp	r0, #0
   18b1c:	dbe1      	blt.n	18ae2 <hex2bin+0x18>
		buf[i] = dec << 4;
   18b1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   18b22:	011b      	lsls	r3, r3, #4
   18b24:	7023      	strb	r3, [r4, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   18b26:	f815 0b02 	ldrb.w	r0, [r5], #2
   18b2a:	f7ff ffb6 	bl	18a9a <char2hex>
   18b2e:	2800      	cmp	r0, #0
   18b30:	dbd7      	blt.n	18ae2 <hex2bin+0x18>
		buf[i] += dec;
   18b32:	7823      	ldrb	r3, [r4, #0]
   18b34:	f89d 2007 	ldrb.w	r2, [sp, #7]
   18b38:	4413      	add	r3, r2
   18b3a:	f804 3b01 	strb.w	r3, [r4], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   18b3e:	e7e4      	b.n	18b0a <hex2bin+0x40>

00018b40 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   18b40:	4603      	mov	r3, r0
   18b42:	b140      	cbz	r0, 18b56 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   18b44:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   18b46:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   18b4a:	2a02      	cmp	r2, #2
   18b4c:	d006      	beq.n	18b5c <sys_notify_validate+0x1c>
   18b4e:	2a03      	cmp	r2, #3
   18b50:	d004      	beq.n	18b5c <sys_notify_validate+0x1c>
   18b52:	2a01      	cmp	r2, #1
   18b54:	d005      	beq.n	18b62 <sys_notify_validate+0x22>
		return -EINVAL;
   18b56:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   18b5a:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   18b5c:	681a      	ldr	r2, [r3, #0]
   18b5e:	2a00      	cmp	r2, #0
   18b60:	d0f9      	beq.n	18b56 <sys_notify_validate+0x16>
		notify->result = 0;
   18b62:	2000      	movs	r0, #0
   18b64:	6098      	str	r0, [r3, #8]
   18b66:	4770      	bx	lr

00018b68 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   18b68:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   18b6a:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   18b6e:	2a02      	cmp	r2, #2
{
   18b70:	b510      	push	{r4, lr}
   18b72:	4603      	mov	r3, r0
	notify->result = res;
   18b74:	6081      	str	r1, [r0, #8]
	switch (method) {
   18b76:	d00a      	beq.n	18b8e <sys_notify_finalize+0x26>
   18b78:	2a03      	cmp	r2, #3
   18b7a:	d10b      	bne.n	18b94 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   18b7c:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   18b7e:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   18b80:	2200      	movs	r2, #0
   18b82:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   18b84:	b108      	cbz	r0, 18b8a <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   18b86:	f7ff fee3 	bl	18950 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   18b8a:	4620      	mov	r0, r4
   18b8c:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   18b8e:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   18b90:	2400      	movs	r4, #0
		break;
   18b92:	e7f5      	b.n	18b80 <sys_notify_finalize+0x18>
	switch (method) {
   18b94:	2400      	movs	r4, #0
   18b96:	4620      	mov	r0, r4
   18b98:	e7f2      	b.n	18b80 <sys_notify_finalize+0x18>

00018b9a <arch_printk_char_out>:
}
   18b9a:	2000      	movs	r0, #0
   18b9c:	4770      	bx	lr

00018b9e <str_out>:
{
   18b9e:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   18ba0:	688a      	ldr	r2, [r1, #8]
   18ba2:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   18ba4:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   18ba6:	b114      	cbz	r4, 18bae <str_out+0x10>
   18ba8:	684b      	ldr	r3, [r1, #4]
   18baa:	4293      	cmp	r3, r2
   18bac:	dc01      	bgt.n	18bb2 <str_out+0x14>
		ctx->count++;
   18bae:	608d      	str	r5, [r1, #8]
}
   18bb0:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   18bb2:	3b01      	subs	r3, #1
   18bb4:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   18bb6:	bf08      	it	eq
   18bb8:	2200      	moveq	r2, #0
   18bba:	608d      	str	r5, [r1, #8]
   18bbc:	bf0c      	ite	eq
   18bbe:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   18bc0:	54a0      	strbne	r0, [r4, r2]
   18bc2:	e7f5      	b.n	18bb0 <str_out+0x12>

00018bc4 <printk>:
{
   18bc4:	b40f      	push	{r0, r1, r2, r3}
   18bc6:	b507      	push	{r0, r1, r2, lr}
   18bc8:	a904      	add	r1, sp, #16
   18bca:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   18bce:	9101      	str	r1, [sp, #4]
	z_log_printk(fmt, ap);
   18bd0:	f000 fc98 	bl	19504 <z_log_printk>
}
   18bd4:	b003      	add	sp, #12
   18bd6:	f85d eb04 	ldr.w	lr, [sp], #4
   18bda:	b004      	add	sp, #16
   18bdc:	4770      	bx	lr

00018bde <snprintk>:
{
   18bde:	b40c      	push	{r2, r3}
   18be0:	b507      	push	{r0, r1, r2, lr}
   18be2:	ab04      	add	r3, sp, #16
   18be4:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   18be8:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   18bea:	f7e8 ffeb 	bl	1bc4 <vsnprintk>
}
   18bee:	b003      	add	sp, #12
   18bf0:	f85d eb04 	ldr.w	lr, [sp], #4
   18bf4:	b002      	add	sp, #8
   18bf6:	4770      	bx	lr

00018bf8 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   18bf8:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   18bfa:	f013 0307 	ands.w	r3, r3, #7
   18bfe:	d105      	bne.n	18c0c <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   18c00:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   18c02:	2b00      	cmp	r3, #0
   18c04:	bf0c      	ite	eq
   18c06:	2000      	moveq	r0, #0
   18c08:	2003      	movne	r0, #3
   18c0a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   18c0c:	2b02      	cmp	r3, #2
   18c0e:	d105      	bne.n	18c1c <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   18c10:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
   18c12:	2b00      	cmp	r3, #0
   18c14:	bf14      	ite	ne
   18c16:	2000      	movne	r0, #0
   18c18:	2004      	moveq	r0, #4
   18c1a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   18c1c:	2b01      	cmp	r3, #1
   18c1e:	d105      	bne.n	18c2c <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   18c20:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   18c22:	2b00      	cmp	r3, #0
   18c24:	bf0c      	ite	eq
   18c26:	2000      	moveq	r0, #0
   18c28:	2005      	movne	r0, #5
   18c2a:	4770      	bx	lr
	int evt = EVT_NOP;
   18c2c:	2000      	movs	r0, #0
}
   18c2e:	4770      	bx	lr

00018c30 <notify_one>:
{
   18c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18c34:	460d      	mov	r5, r1
   18c36:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   18c38:	4619      	mov	r1, r3
   18c3a:	1d28      	adds	r0, r5, #4
{
   18c3c:	4690      	mov	r8, r2
   18c3e:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   18c40:	f7ff ff92 	bl	18b68 <sys_notify_finalize>
	if (cb) {
   18c44:	4604      	mov	r4, r0
   18c46:	b138      	cbz	r0, 18c58 <notify_one+0x28>
		cb(mgr, cli, state, res);
   18c48:	4633      	mov	r3, r6
   18c4a:	4642      	mov	r2, r8
   18c4c:	4629      	mov	r1, r5
   18c4e:	4638      	mov	r0, r7
   18c50:	46a4      	mov	ip, r4
}
   18c52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   18c56:	4760      	bx	ip
}
   18c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00018c5c <transition_complete>:
{
   18c5c:	b410      	push	{r4}
	__asm__ volatile(
   18c5e:	f04f 0420 	mov.w	r4, #32
   18c62:	f3ef 8211 	mrs	r2, BASEPRI
   18c66:	f384 8812 	msr	BASEPRI_MAX, r4
   18c6a:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   18c6e:	6141      	str	r1, [r0, #20]
}
   18c70:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   18c72:	2101      	movs	r1, #1
   18c74:	f7e8 bfba 	b.w	1bec <process_event>

00018c78 <validate_args>:
{
   18c78:	b510      	push	{r4, lr}
   18c7a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   18c7c:	b140      	cbz	r0, 18c90 <validate_args+0x18>
   18c7e:	b139      	cbz	r1, 18c90 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   18c80:	1d08      	adds	r0, r1, #4
   18c82:	f7ff ff5d 	bl	18b40 <sys_notify_validate>
	if ((rv == 0)
   18c86:	b928      	cbnz	r0, 18c94 <validate_args+0x1c>
	    && ((cli->notify.flags
   18c88:	68a3      	ldr	r3, [r4, #8]
   18c8a:	f033 0303 	bics.w	r3, r3, #3
   18c8e:	d001      	beq.n	18c94 <validate_args+0x1c>
		rv = -EINVAL;
   18c90:	f06f 0015 	mvn.w	r0, #21
}
   18c94:	bd10      	pop	{r4, pc}

00018c96 <onoff_manager_init>:
{
   18c96:	b538      	push	{r3, r4, r5, lr}
   18c98:	460c      	mov	r4, r1
	if ((mgr == NULL)
   18c9a:	4605      	mov	r5, r0
   18c9c:	b158      	cbz	r0, 18cb6 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   18c9e:	b151      	cbz	r1, 18cb6 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   18ca0:	680b      	ldr	r3, [r1, #0]
   18ca2:	b143      	cbz	r3, 18cb6 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   18ca4:	684b      	ldr	r3, [r1, #4]
   18ca6:	b133      	cbz	r3, 18cb6 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   18ca8:	221c      	movs	r2, #28
   18caa:	2100      	movs	r1, #0
   18cac:	f001 faf2 	bl	1a294 <memset>
   18cb0:	612c      	str	r4, [r5, #16]
	return 0;
   18cb2:	2000      	movs	r0, #0
}
   18cb4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   18cb6:	f06f 0015 	mvn.w	r0, #21
   18cba:	e7fb      	b.n	18cb4 <onoff_manager_init+0x1e>

00018cbc <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   18cbc:	b570      	push	{r4, r5, r6, lr}
   18cbe:	4604      	mov	r4, r0
   18cc0:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   18cc2:	f7ff ffd9 	bl	18c78 <validate_args>

	if (rv < 0) {
   18cc6:	1e05      	subs	r5, r0, #0
   18cc8:	db31      	blt.n	18d2e <onoff_request+0x72>
   18cca:	f04f 0320 	mov.w	r3, #32
   18cce:	f3ef 8111 	mrs	r1, BASEPRI
   18cd2:	f383 8812 	msr	BASEPRI_MAX, r3
   18cd6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   18cda:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   18cdc:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   18cde:	f64f 75ff 	movw	r5, #65535	; 0xffff
   18ce2:	42ab      	cmp	r3, r5
   18ce4:	f000 0207 	and.w	r2, r0, #7
   18ce8:	d02e      	beq.n	18d48 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   18cea:	2a02      	cmp	r2, #2
   18cec:	d10e      	bne.n	18d0c <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   18cee:	3301      	adds	r3, #1
   18cf0:	8363      	strh	r3, [r4, #26]
	rv = state;
   18cf2:	4615      	mov	r5, r2
		notify = true;
   18cf4:	2301      	movs	r3, #1
	__asm__ volatile(
   18cf6:	f381 8811 	msr	BASEPRI, r1
   18cfa:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   18cfe:	b1b3      	cbz	r3, 18d2e <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   18d00:	2300      	movs	r3, #0
   18d02:	4631      	mov	r1, r6
   18d04:	4620      	mov	r0, r4
   18d06:	f7ff ff93 	bl	18c30 <notify_one>
   18d0a:	e010      	b.n	18d2e <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   18d0c:	0783      	lsls	r3, r0, #30
   18d0e:	d001      	beq.n	18d14 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   18d10:	2a06      	cmp	r2, #6
   18d12:	d10e      	bne.n	18d32 <onoff_request+0x76>
	parent->next = child;
   18d14:	2300      	movs	r3, #0
   18d16:	6033      	str	r3, [r6, #0]
	return list->tail;
   18d18:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   18d1a:	b993      	cbnz	r3, 18d42 <onoff_request+0x86>
	list->head = node;
   18d1c:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   18d20:	4615      	mov	r5, r2
   18d22:	b962      	cbnz	r2, 18d3e <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   18d24:	460a      	mov	r2, r1
   18d26:	4620      	mov	r0, r4
   18d28:	2102      	movs	r1, #2
   18d2a:	f7e8 ff5f 	bl	1bec <process_event>
		}
	}

	return rv;
}
   18d2e:	4628      	mov	r0, r5
   18d30:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   18d32:	2a05      	cmp	r2, #5
   18d34:	bf0c      	ite	eq
   18d36:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   18d3a:	f06f 0504 	mvnne.w	r5, #4
   18d3e:	2300      	movs	r3, #0
   18d40:	e7d9      	b.n	18cf6 <onoff_request+0x3a>
	parent->next = child;
   18d42:	601e      	str	r6, [r3, #0]
	list->tail = node;
   18d44:	6066      	str	r6, [r4, #4]
}
   18d46:	e7eb      	b.n	18d20 <onoff_request+0x64>
		rv = -EAGAIN;
   18d48:	f06f 050a 	mvn.w	r5, #10
   18d4c:	e7f7      	b.n	18d3e <onoff_request+0x82>

00018d4e <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   18d4e:	b510      	push	{r4, lr}
	__asm__ volatile(
   18d50:	f04f 0320 	mov.w	r3, #32
   18d54:	f3ef 8211 	mrs	r2, BASEPRI
   18d58:	f383 8812 	msr	BASEPRI_MAX, r3
   18d5c:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   18d60:	8b04      	ldrh	r4, [r0, #24]
   18d62:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   18d66:	2c02      	cmp	r4, #2
   18d68:	d00a      	beq.n	18d80 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   18d6a:	2c01      	cmp	r4, #1
   18d6c:	bf0c      	ite	eq
   18d6e:	f06f 0004 	mvneq.w	r0, #4
   18d72:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   18d76:	f382 8811 	msr	BASEPRI, r2
   18d7a:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   18d7e:	e008      	b.n	18d92 <onoff_release+0x44>
	mgr->refs -= 1U;
   18d80:	8b43      	ldrh	r3, [r0, #26]
   18d82:	3b01      	subs	r3, #1
   18d84:	b29b      	uxth	r3, r3
   18d86:	8343      	strh	r3, [r0, #26]
	if (stop) {
   18d88:	b923      	cbnz	r3, 18d94 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   18d8a:	4621      	mov	r1, r4
   18d8c:	f7e8 ff2e 	bl	1bec <process_event>
	int rv = state;
   18d90:	4620      	mov	r0, r4
}
   18d92:	bd10      	pop	{r4, pc}
	int rv = state;
   18d94:	4620      	mov	r0, r4
   18d96:	e7ee      	b.n	18d76 <onoff_release+0x28>

00018d98 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   18d98:	4604      	mov	r4, r0
   18d9a:	b508      	push	{r3, lr}
   18d9c:	4608      	mov	r0, r1
   18d9e:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   18da0:	461a      	mov	r2, r3
   18da2:	47a0      	blx	r4
	return z_impl_z_current_get();
   18da4:	f7ff fb56 	bl	18454 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   18da8:	f7ea fe94 	bl	3ad4 <z_impl_k_thread_abort>

00018dac <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   18dac:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   18dae:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   18db2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   18db6:	bf2c      	ite	cs
   18db8:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   18dbc:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   18dc0:	4770      	bx	lr

00018dc2 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   18dc2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   18dc6:	6880      	ldr	r0, [r0, #8]
   18dc8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   18dcc:	bf2c      	ite	cs
   18dce:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   18dd2:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   18dd6:	4770      	bx	lr

00018dd8 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
   18dd8:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   18dda:	2201      	movs	r2, #1
   18ddc:	f7ff ffe6 	bl	18dac <chunk_field>
}
   18de0:	40d0      	lsrs	r0, r2
   18de2:	bd08      	pop	{r3, pc}

00018de4 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   18de4:	6883      	ldr	r3, [r0, #8]
   18de6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   18dea:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   18dee:	d308      	bcc.n	18e02 <set_chunk_used+0x1e>
		if (used) {
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   18df0:	684b      	ldr	r3, [r1, #4]
		if (used) {
   18df2:	b11a      	cbz	r2, 18dfc <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   18df4:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   18df8:	604b      	str	r3, [r1, #4]
   18dfa:	4770      	bx	lr
   18dfc:	f023 0301 	bic.w	r3, r3, #1
   18e00:	e7fa      	b.n	18df8 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   18e02:	884b      	ldrh	r3, [r1, #2]
		if (used) {
   18e04:	b11a      	cbz	r2, 18e0e <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   18e06:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   18e0a:	804b      	strh	r3, [r1, #2]
		}
	}
}
   18e0c:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   18e0e:	f023 0301 	bic.w	r3, r3, #1
   18e12:	e7fa      	b.n	18e0a <set_chunk_used+0x26>

00018e14 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   18e14:	0053      	lsls	r3, r2, #1
   18e16:	2201      	movs	r2, #1
   18e18:	f7ff bfd3 	b.w	18dc2 <chunk_set>

00018e1c <bucket_idx.isra.0>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   18e1c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   18e20:	bf2c      	ite	cs
   18e22:	2008      	movcs	r0, #8
   18e24:	2004      	movcc	r0, #4
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   18e26:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   18e28:	3008      	adds	r0, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   18e2a:	eba1 00d0 	sub.w	r0, r1, r0, lsr #3
	return 31 - __builtin_clz(usable_sz);
   18e2e:	fab0 f080 	clz	r0, r0
}
   18e32:	f1c0 001f 	rsb	r0, r0, #31
   18e36:	4770      	bx	lr

00018e38 <free_list_remove_bidx>:

	return ret;
}

static void free_list_remove_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   18e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18e3c:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   18e3e:	2203      	movs	r2, #3
   18e40:	460e      	mov	r6, r1
   18e42:	4604      	mov	r4, r0
   18e44:	f7ff ffb2 	bl	18dac <chunk_field>

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & (1 << bidx));

	if (next_free_chunk(h, c) == c) {
   18e48:	4286      	cmp	r6, r0
   18e4a:	4605      	mov	r5, r0
   18e4c:	f107 0804 	add.w	r8, r7, #4
   18e50:	d10b      	bne.n	18e6a <free_list_remove_bidx+0x32>
		/* this is the last chunk */
		h->avail_buckets &= ~(1 << bidx);
   18e52:	2301      	movs	r3, #1
   18e54:	fa03 f707 	lsl.w	r7, r3, r7
   18e58:	68e3      	ldr	r3, [r4, #12]
   18e5a:	ea23 0307 	bic.w	r3, r3, r7
   18e5e:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   18e60:	2300      	movs	r3, #0
   18e62:	f844 3028 	str.w	r3, [r4, r8, lsl #2]

		b->next = second;
		set_next_free_chunk(h, first, second);
		set_prev_free_chunk(h, second, first);
	}
}
   18e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   18e6a:	4631      	mov	r1, r6
   18e6c:	2202      	movs	r2, #2
   18e6e:	4620      	mov	r0, r4
   18e70:	f7ff ff9c 	bl	18dac <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   18e74:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   18e76:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   18e78:	4601      	mov	r1, r0
		b->next = second;
   18e7a:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   18e7e:	4620      	mov	r0, r4
   18e80:	2203      	movs	r2, #3
   18e82:	f7ff ff9e 	bl	18dc2 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   18e86:	4633      	mov	r3, r6
   18e88:	4629      	mov	r1, r5
   18e8a:	4620      	mov	r0, r4
   18e8c:	2202      	movs	r2, #2
}
   18e8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   18e92:	f7ff bf96 	b.w	18dc2 <chunk_set>

00018e96 <free_list_remove>:

static void free_list_remove(struct z_heap *h, chunkid_t c)
{
   18e96:	b570      	push	{r4, r5, r6, lr}
	return big_heap_chunks(h->end_chunk);
   18e98:	6886      	ldr	r6, [r0, #8]
   18e9a:	460d      	mov	r5, r1
   18e9c:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   18e9e:	f7ff ff9b 	bl	18dd8 <chunk_size>
   18ea2:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   18ea6:	4601      	mov	r1, r0
   18ea8:	d301      	bcc.n	18eae <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   18eaa:	2801      	cmp	r0, #1
   18eac:	d009      	beq.n	18ec2 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   18eae:	4630      	mov	r0, r6
   18eb0:	f7ff ffb4 	bl	18e1c <bucket_idx.isra.0>
		free_list_remove_bidx(h, c, bidx);
   18eb4:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   18eb6:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   18eb8:	4620      	mov	r0, r4
	}
}
   18eba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		free_list_remove_bidx(h, c, bidx);
   18ebe:	f7ff bfbb 	b.w	18e38 <free_list_remove_bidx>
}
   18ec2:	bd70      	pop	{r4, r5, r6, pc}

00018ec4 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   18ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18ec8:	4605      	mov	r5, r0
	int bi = bucket_idx(h, sz);
   18eca:	6880      	ldr	r0, [r0, #8]
{
   18ecc:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   18ece:	f7ff ffa5 	bl	18e1c <bucket_idx.isra.0>
   18ed2:	eb05 0a80 	add.w	sl, r5, r0, lsl #2
   18ed6:	4606      	mov	r6, r0
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   18ed8:	f8da 9010 	ldr.w	r9, [sl, #16]
   18edc:	f1b9 0f00 	cmp.w	r9, #0
   18ee0:	d01b      	beq.n	18f1a <alloc_chunk+0x56>
   18ee2:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   18ee4:	f8da 4010 	ldr.w	r4, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   18ee8:	4628      	mov	r0, r5
   18eea:	4621      	mov	r1, r4
   18eec:	f7ff ff74 	bl	18dd8 <chunk_size>
   18ef0:	4540      	cmp	r0, r8
   18ef2:	d307      	bcc.n	18f04 <alloc_chunk+0x40>
				free_list_remove_bidx(h, c, bi);
   18ef4:	4632      	mov	r2, r6

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   18ef6:	4621      	mov	r1, r4
   18ef8:	4628      	mov	r0, r5
   18efa:	f7ff ff9d 	bl	18e38 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   18efe:	4620      	mov	r0, r4
   18f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return chunk_field(h, c, FREE_NEXT);
   18f04:	2203      	movs	r2, #3
   18f06:	4621      	mov	r1, r4
   18f08:	4628      	mov	r0, r5
   18f0a:	f7ff ff4f 	bl	18dac <chunk_field>
		} while (--i && b->next != first);
   18f0e:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   18f10:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   18f14:	d001      	beq.n	18f1a <alloc_chunk+0x56>
   18f16:	4581      	cmp	r9, r0
   18f18:	d1e4      	bne.n	18ee4 <alloc_chunk+0x20>
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   18f1a:	68e9      	ldr	r1, [r5, #12]
   18f1c:	3601      	adds	r6, #1
   18f1e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   18f22:	40b4      	lsls	r4, r6
	if (bmask != 0U) {
   18f24:	400c      	ands	r4, r1
   18f26:	d0ea      	beq.n	18efe <alloc_chunk+0x3a>
		int minbucket = __builtin_ctz(bmask);
   18f28:	fa94 f2a4 	rbit	r2, r4
   18f2c:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   18f30:	1d13      	adds	r3, r2, #4
   18f32:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
   18f36:	e7de      	b.n	18ef6 <alloc_chunk+0x32>

00018f38 <split_chunks>:
{
   18f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18f3c:	4614      	mov	r4, r2
   18f3e:	4605      	mov	r5, r0
   18f40:	460e      	mov	r6, r1
	chunksz_t sz0 = chunk_size(h, lc);
   18f42:	f7ff ff49 	bl	18dd8 <chunk_size>
	chunksz_t lsz = rc - lc;
   18f46:	eba4 0806 	sub.w	r8, r4, r6
	chunksz_t rsz = sz0 - lsz;
   18f4a:	1b37      	subs	r7, r6, r4
   18f4c:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   18f4e:	4642      	mov	r2, r8
   18f50:	4631      	mov	r1, r6
   18f52:	4628      	mov	r0, r5
   18f54:	f7ff ff5e 	bl	18e14 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   18f58:	463a      	mov	r2, r7
   18f5a:	4621      	mov	r1, r4
   18f5c:	4628      	mov	r0, r5
   18f5e:	f7ff ff59 	bl	18e14 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   18f62:	4643      	mov	r3, r8
   18f64:	2200      	movs	r2, #0
   18f66:	4621      	mov	r1, r4
   18f68:	4628      	mov	r0, r5
   18f6a:	f7ff ff2a 	bl	18dc2 <chunk_set>
	return c + chunk_size(h, c);
   18f6e:	4621      	mov	r1, r4
   18f70:	4628      	mov	r0, r5
   18f72:	f7ff ff31 	bl	18dd8 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   18f76:	463b      	mov	r3, r7
   18f78:	1821      	adds	r1, r4, r0
   18f7a:	2200      	movs	r2, #0
   18f7c:	4628      	mov	r0, r5
}
   18f7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   18f82:	f7ff bf1e 	b.w	18dc2 <chunk_set>

00018f86 <merge_chunks>:
{
   18f86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18f8a:	4616      	mov	r6, r2
   18f8c:	4604      	mov	r4, r0
   18f8e:	460f      	mov	r7, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   18f90:	f7ff ff22 	bl	18dd8 <chunk_size>
   18f94:	4631      	mov	r1, r6
   18f96:	4605      	mov	r5, r0
   18f98:	4620      	mov	r0, r4
   18f9a:	f7ff ff1d 	bl	18dd8 <chunk_size>
   18f9e:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
   18fa0:	462a      	mov	r2, r5
   18fa2:	4639      	mov	r1, r7
   18fa4:	4620      	mov	r0, r4
   18fa6:	f7ff ff35 	bl	18e14 <set_chunk_size>
	return c + chunk_size(h, c);
   18faa:	4631      	mov	r1, r6
   18fac:	4620      	mov	r0, r4
   18fae:	f7ff ff13 	bl	18dd8 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   18fb2:	462b      	mov	r3, r5
   18fb4:	1831      	adds	r1, r6, r0
   18fb6:	2200      	movs	r2, #0
   18fb8:	4620      	mov	r0, r4
}
   18fba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   18fbe:	f7ff bf00 	b.w	18dc2 <chunk_set>

00018fc2 <free_list_add>:
{
   18fc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return big_heap_chunks(h->end_chunk);
   18fc6:	6886      	ldr	r6, [r0, #8]
   18fc8:	460d      	mov	r5, r1
   18fca:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   18fcc:	f7ff ff04 	bl	18dd8 <chunk_size>
   18fd0:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   18fd4:	4601      	mov	r1, r0
   18fd6:	d301      	bcc.n	18fdc <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   18fd8:	2801      	cmp	r0, #1
   18fda:	d033      	beq.n	19044 <free_list_add+0x82>
		int bidx = bucket_idx(h, chunk_size(h, c));
   18fdc:	4630      	mov	r0, r6
   18fde:	f7ff ff1d 	bl	18e1c <bucket_idx.isra.0>
	if (b->next == 0U) {
   18fe2:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   18fe6:	6916      	ldr	r6, [r2, #16]
   18fe8:	b99e      	cbnz	r6, 19012 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   18fea:	2301      	movs	r3, #1
   18fec:	fa03 f000 	lsl.w	r0, r3, r0
   18ff0:	68e3      	ldr	r3, [r4, #12]
   18ff2:	4303      	orrs	r3, r0
   18ff4:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   18ff6:	4629      	mov	r1, r5
		b->next = c;
   18ff8:	6115      	str	r5, [r2, #16]
   18ffa:	462b      	mov	r3, r5
   18ffc:	2202      	movs	r2, #2
   18ffe:	4620      	mov	r0, r4
   19000:	f7ff fedf 	bl	18dc2 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   19004:	2203      	movs	r2, #3
   19006:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   19008:	4620      	mov	r0, r4
}
   1900a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1900e:	f7ff bed8 	b.w	18dc2 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   19012:	2202      	movs	r2, #2
   19014:	4631      	mov	r1, r6
   19016:	4620      	mov	r0, r4
   19018:	f7ff fec8 	bl	18dac <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   1901c:	4629      	mov	r1, r5
   1901e:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   19020:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   19022:	4620      	mov	r0, r4
   19024:	f7ff fecd 	bl	18dc2 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   19028:	2203      	movs	r2, #3
   1902a:	4633      	mov	r3, r6
   1902c:	4629      	mov	r1, r5
   1902e:	4620      	mov	r0, r4
   19030:	f7ff fec7 	bl	18dc2 <chunk_set>
   19034:	4639      	mov	r1, r7
   19036:	462b      	mov	r3, r5
   19038:	4620      	mov	r0, r4
   1903a:	f7ff fec2 	bl	18dc2 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1903e:	2202      	movs	r2, #2
   19040:	4631      	mov	r1, r6
   19042:	e7e1      	b.n	19008 <free_list_add+0x46>
   19044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019048 <free_chunk>:
{
   19048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1904a:	460c      	mov	r4, r1
   1904c:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1904e:	f7ff fec3 	bl	18dd8 <chunk_size>
   19052:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   19054:	2201      	movs	r2, #1
   19056:	4631      	mov	r1, r6
   19058:	4628      	mov	r0, r5
   1905a:	f7ff fea7 	bl	18dac <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   1905e:	07c3      	lsls	r3, r0, #31
   19060:	d40c      	bmi.n	1907c <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   19062:	4631      	mov	r1, r6
   19064:	4628      	mov	r0, r5
   19066:	f7ff ff16 	bl	18e96 <free_list_remove>
	return c + chunk_size(h, c);
   1906a:	4621      	mov	r1, r4
   1906c:	4628      	mov	r0, r5
   1906e:	f7ff feb3 	bl	18dd8 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   19072:	4621      	mov	r1, r4
   19074:	1822      	adds	r2, r4, r0
   19076:	4628      	mov	r0, r5
   19078:	f7ff ff85 	bl	18f86 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   1907c:	2200      	movs	r2, #0
   1907e:	4621      	mov	r1, r4
   19080:	4628      	mov	r0, r5
   19082:	f7ff fe93 	bl	18dac <chunk_field>
   19086:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   19088:	2201      	movs	r2, #1
   1908a:	4639      	mov	r1, r7
   1908c:	4628      	mov	r0, r5
   1908e:	f7ff fe8d 	bl	18dac <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   19092:	ea10 0602 	ands.w	r6, r0, r2
   19096:	d113      	bne.n	190c0 <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   19098:	4639      	mov	r1, r7
   1909a:	4628      	mov	r0, r5
   1909c:	f7ff fefb 	bl	18e96 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   190a0:	4621      	mov	r1, r4
   190a2:	4632      	mov	r2, r6
   190a4:	4628      	mov	r0, r5
   190a6:	f7ff fe81 	bl	18dac <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   190aa:	4622      	mov	r2, r4
   190ac:	1a21      	subs	r1, r4, r0
   190ae:	4628      	mov	r0, r5
   190b0:	f7ff ff69 	bl	18f86 <merge_chunks>
   190b4:	4621      	mov	r1, r4
   190b6:	4632      	mov	r2, r6
   190b8:	4628      	mov	r0, r5
   190ba:	f7ff fe77 	bl	18dac <chunk_field>
   190be:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   190c0:	4621      	mov	r1, r4
   190c2:	4628      	mov	r0, r5
}
   190c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   190c8:	f7ff bf7b 	b.w	18fc2 <free_list_add>

000190cc <sys_heap_free>:
{
   190cc:	b510      	push	{r4, lr}
	if (mem == NULL) {
   190ce:	b191      	cbz	r1, 190f6 <sys_heap_free+0x2a>
   190d0:	6800      	ldr	r0, [r0, #0]
	return big_heap(h) ? 8 : 4;
   190d2:	6883      	ldr	r3, [r0, #8]
   190d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   190d8:	bf2c      	ite	cs
   190da:	2408      	movcs	r4, #8
   190dc:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   190de:	1b0c      	subs	r4, r1, r4
   190e0:	1a24      	subs	r4, r4, r0
   190e2:	08e4      	lsrs	r4, r4, #3
	set_chunk_used(h, c, false);
   190e4:	4621      	mov	r1, r4
   190e6:	2200      	movs	r2, #0
   190e8:	f7ff fe7c 	bl	18de4 <set_chunk_used>
	free_chunk(h, c);
   190ec:	4621      	mov	r1, r4
}
   190ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	free_chunk(h, c);
   190f2:	f7ff bfa9 	b.w	19048 <free_chunk>
}
   190f6:	bd10      	pop	{r4, pc}

000190f8 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   190f8:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   190fa:	6806      	ldr	r6, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   190fc:	b909      	cbnz	r1, 19102 <sys_heap_alloc+0xa>
		return NULL;
   190fe:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   19100:	bd70      	pop	{r4, r5, r6, pc}
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   19102:	68b3      	ldr	r3, [r6, #8]
	if (bytes == 0U || size_too_big(h, bytes)) {
   19104:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   19108:	d9f9      	bls.n	190fe <sys_heap_alloc+0x6>
	return big_heap(h) ? 8 : 4;
   1910a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1910e:	bf2c      	ite	cs
   19110:	2208      	movcs	r2, #8
   19112:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   19114:	1dcc      	adds	r4, r1, #7
   19116:	4414      	add	r4, r2
   19118:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1911a:	4621      	mov	r1, r4
   1911c:	4630      	mov	r0, r6
   1911e:	f7ff fed1 	bl	18ec4 <alloc_chunk>
	if (c == 0U) {
   19122:	4605      	mov	r5, r0
   19124:	2800      	cmp	r0, #0
   19126:	d0ea      	beq.n	190fe <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   19128:	4601      	mov	r1, r0
   1912a:	4630      	mov	r0, r6
   1912c:	f7ff fe54 	bl	18dd8 <chunk_size>
   19130:	42a0      	cmp	r0, r4
   19132:	d909      	bls.n	19148 <sys_heap_alloc+0x50>
		split_chunks(h, c, c + chunk_sz);
   19134:	442c      	add	r4, r5
   19136:	4629      	mov	r1, r5
   19138:	4630      	mov	r0, r6
   1913a:	4622      	mov	r2, r4
   1913c:	f7ff fefc 	bl	18f38 <split_chunks>
		free_list_add(h, c + chunk_sz);
   19140:	4621      	mov	r1, r4
   19142:	4630      	mov	r0, r6
   19144:	f7ff ff3d 	bl	18fc2 <free_list_add>
	set_chunk_used(h, c, true);
   19148:	4629      	mov	r1, r5
   1914a:	4630      	mov	r0, r6
   1914c:	2201      	movs	r2, #1
   1914e:	f7ff fe49 	bl	18de4 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   19152:	68b3      	ldr	r3, [r6, #8]
   19154:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   19158:	bf2c      	ite	cs
   1915a:	2308      	movcs	r3, #8
   1915c:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1915e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   19162:	4428      	add	r0, r5
	return chunk_mem(h, c);
   19164:	e7cc      	b.n	19100 <sys_heap_alloc+0x8>

00019166 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   19166:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;
   1916a:	6806      	ldr	r6, [r0, #0]
{
   1916c:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   1916e:	424a      	negs	r2, r1
   19170:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   19174:	ea31 0202 	bics.w	r2, r1, r2
	return big_heap_chunks(h->end_chunk);
   19178:	68b5      	ldr	r5, [r6, #8]
{
   1917a:	460b      	mov	r3, r1
	if (align != rew) {
   1917c:	d00f      	beq.n	1919e <sys_heap_aligned_alloc+0x38>
	return big_heap(h) ? 8 : 4;
   1917e:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   19182:	bf34      	ite	cc
   19184:	2104      	movcc	r1, #4
   19186:	2108      	movcs	r1, #8
   19188:	42b9      	cmp	r1, r7
   1918a:	460a      	mov	r2, r1
   1918c:	46b9      	mov	r9, r7
   1918e:	bf28      	it	cs
   19190:	463a      	movcs	r2, r7
		align -= rew;
   19192:	1bdf      	subs	r7, r3, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   19194:	b994      	cbnz	r4, 191bc <sys_heap_aligned_alloc+0x56>
		return NULL;
   19196:	2500      	movs	r5, #0
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   19198:	4628      	mov	r0, r5
   1919a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1919e:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   191a2:	bf34      	ite	cc
   191a4:	2204      	movcc	r2, #4
   191a6:	2208      	movcs	r2, #8
		if (align <= chunk_header_bytes(h)) {
   191a8:	4291      	cmp	r1, r2
   191aa:	d804      	bhi.n	191b6 <sys_heap_aligned_alloc+0x50>
			return sys_heap_alloc(heap, bytes);
   191ac:	4621      	mov	r1, r4
}
   191ae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   191b2:	f7ff bfa1 	b.w	190f8 <sys_heap_alloc>
		rew = 0;
   191b6:	f04f 0900 	mov.w	r9, #0
   191ba:	e7eb      	b.n	19194 <sys_heap_aligned_alloc+0x2e>
	if (bytes == 0 || size_too_big(h, bytes)) {
   191bc:	ebb5 0fd4 	cmp.w	r5, r4, lsr #3
   191c0:	d9e9      	bls.n	19196 <sys_heap_aligned_alloc+0x30>
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   191c2:	1de1      	adds	r1, r4, #7
   191c4:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   191c8:	4439      	add	r1, r7
   191ca:	bf2c      	ite	cs
   191cc:	2308      	movcs	r3, #8
   191ce:	2304      	movcc	r3, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   191d0:	1a89      	subs	r1, r1, r2
   191d2:	4419      	add	r1, r3
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   191d4:	08c9      	lsrs	r1, r1, #3
   191d6:	4630      	mov	r0, r6
   191d8:	f7ff fe74 	bl	18ec4 <alloc_chunk>
	if (c0 == 0) {
   191dc:	4680      	mov	r8, r0
   191de:	2800      	cmp	r0, #0
   191e0:	d0d9      	beq.n	19196 <sys_heap_aligned_alloc+0x30>
	return big_heap(h) ? 8 : 4;
   191e2:	68b3      	ldr	r3, [r6, #8]
   191e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   191e8:	bf2c      	ite	cs
   191ea:	2308      	movcs	r3, #8
   191ec:	2304      	movcc	r3, #4
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   191ee:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
   191f2:	441d      	add	r5, r3
   191f4:	1e7a      	subs	r2, r7, #1
   191f6:	4435      	add	r5, r6
   191f8:	427f      	negs	r7, r7
   191fa:	4415      	add	r5, r2
   191fc:	403d      	ands	r5, r7
   191fe:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   19202:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   19204:	1aeb      	subs	r3, r5, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   19206:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   19208:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1920a:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1920e:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   19210:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   19214:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   19218:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   1921c:	d208      	bcs.n	19230 <sys_heap_aligned_alloc+0xca>
		split_chunks(h, c0, c);
   1921e:	4601      	mov	r1, r0
   19220:	463a      	mov	r2, r7
   19222:	4630      	mov	r0, r6
   19224:	f7ff fe88 	bl	18f38 <split_chunks>
		free_list_add(h, c0);
   19228:	4641      	mov	r1, r8
   1922a:	4630      	mov	r0, r6
   1922c:	f7ff fec9 	bl	18fc2 <free_list_add>
	return c + chunk_size(h, c);
   19230:	4639      	mov	r1, r7
   19232:	4630      	mov	r0, r6
   19234:	f7ff fdd0 	bl	18dd8 <chunk_size>
   19238:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1923a:	4284      	cmp	r4, r0
   1923c:	d208      	bcs.n	19250 <sys_heap_aligned_alloc+0xea>
		split_chunks(h, c, c_end);
   1923e:	4639      	mov	r1, r7
   19240:	4630      	mov	r0, r6
   19242:	4622      	mov	r2, r4
   19244:	f7ff fe78 	bl	18f38 <split_chunks>
		free_list_add(h, c_end);
   19248:	4621      	mov	r1, r4
   1924a:	4630      	mov	r0, r6
   1924c:	f7ff feb9 	bl	18fc2 <free_list_add>
	set_chunk_used(h, c, true);
   19250:	2201      	movs	r2, #1
   19252:	4639      	mov	r1, r7
   19254:	4630      	mov	r0, r6
   19256:	f7ff fdc5 	bl	18de4 <set_chunk_used>
	return mem;
   1925a:	e79d      	b.n	19198 <sys_heap_aligned_alloc+0x32>

0001925c <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   1925c:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   19260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19262:	bf2c      	ite	cs
   19264:	2408      	movcs	r4, #8
   19266:	2404      	movcc	r4, #4
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   19268:	1b14      	subs	r4, r2, r4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1926a:	1dce      	adds	r6, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1926c:	440c      	add	r4, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1926e:	f026 0607 	bic.w	r6, r6, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   19272:	f024 0407 	bic.w	r4, r4, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   19276:	1ba4      	subs	r4, r4, r6
   19278:	08e4      	lsrs	r4, r4, #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   1927a:	2300      	movs	r3, #0
	heap->heap = h;
   1927c:	6006      	str	r6, [r0, #0]

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1927e:	4621      	mov	r1, r4
	h->end_chunk = heap_sz;
   19280:	60b4      	str	r4, [r6, #8]
	h->avail_buckets = 0;
   19282:	60f3      	str	r3, [r6, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   19284:	4620      	mov	r0, r4
   19286:	f7ff fdc9 	bl	18e1c <bucket_idx.isra.0>
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1928a:	0085      	lsls	r5, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1928c:	351b      	adds	r5, #27
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1928e:	1c41      	adds	r1, r0, #1
   19290:	08ed      	lsrs	r5, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   19292:	f106 0210 	add.w	r2, r6, #16
		h->buckets[i].next = 0;
   19296:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
   19298:	428b      	cmp	r3, r1
   1929a:	db2e      	blt.n	192fa <sys_heap_init+0x9e>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   1929c:	462a      	mov	r2, r5
   1929e:	4630      	mov	r0, r6
   192a0:	2100      	movs	r1, #0
   192a2:	f7ff fdb7 	bl	18e14 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   192a6:	2300      	movs	r3, #0
   192a8:	461a      	mov	r2, r3
   192aa:	4619      	mov	r1, r3
   192ac:	4630      	mov	r0, r6
   192ae:	f7ff fd88 	bl	18dc2 <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   192b2:	1b67      	subs	r7, r4, r5
	set_chunk_used(h, 0, true);
   192b4:	4619      	mov	r1, r3
   192b6:	4630      	mov	r0, r6
   192b8:	2201      	movs	r2, #1
   192ba:	f7ff fd93 	bl	18de4 <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   192be:	463a      	mov	r2, r7
   192c0:	4629      	mov	r1, r5
   192c2:	f7ff fda7 	bl	18e14 <set_chunk_size>
   192c6:	462b      	mov	r3, r5
   192c8:	2200      	movs	r2, #0
   192ca:	4629      	mov	r1, r5
   192cc:	4630      	mov	r0, r6
   192ce:	f7ff fd78 	bl	18dc2 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
   192d2:	4621      	mov	r1, r4
   192d4:	4630      	mov	r0, r6
   192d6:	f7ff fd9d 	bl	18e14 <set_chunk_size>
   192da:	463b      	mov	r3, r7
   192dc:	4621      	mov	r1, r4
   192de:	4630      	mov	r0, r6
   192e0:	2200      	movs	r2, #0
   192e2:	f7ff fd6e 	bl	18dc2 <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
   192e6:	4621      	mov	r1, r4
   192e8:	4630      	mov	r0, r6
   192ea:	2201      	movs	r2, #1
   192ec:	f7ff fd7a 	bl	18de4 <set_chunk_used>

	free_list_add(h, chunk0_size);
   192f0:	4629      	mov	r1, r5
}
   192f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   192f6:	f7ff be64 	b.w	18fc2 <free_list_add>
		h->buckets[i].next = 0;
   192fa:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   192fe:	3301      	adds	r3, #1
   19300:	e7ca      	b.n	19298 <sys_heap_init+0x3c>

00019302 <encode_uint>:
{
   19302:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19306:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   19308:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   1930a:	2b6f      	cmp	r3, #111	; 0x6f
{
   1930c:	4680      	mov	r8, r0
   1930e:	460f      	mov	r7, r1
   19310:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   19312:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   19316:	d029      	beq.n	1936c <encode_uint+0x6a>
   19318:	d824      	bhi.n	19364 <encode_uint+0x62>
		return 16;
   1931a:	2b58      	cmp	r3, #88	; 0x58
   1931c:	bf14      	ite	ne
   1931e:	260a      	movne	r6, #10
   19320:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   19322:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   19326:	4632      	mov	r2, r6
   19328:	2300      	movs	r3, #0
   1932a:	4640      	mov	r0, r8
   1932c:	4639      	mov	r1, r7
   1932e:	f7e6 ff27 	bl	180 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   19332:	2a09      	cmp	r2, #9
   19334:	b2d4      	uxtb	r4, r2
   19336:	d81e      	bhi.n	19376 <encode_uint+0x74>
   19338:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   1933a:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1933c:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   1933e:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   19342:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   19346:	d301      	bcc.n	1934c <encode_uint+0x4a>
   19348:	45d1      	cmp	r9, sl
   1934a:	d811      	bhi.n	19370 <encode_uint+0x6e>
	if (conv->flag_hash) {
   1934c:	782b      	ldrb	r3, [r5, #0]
   1934e:	069b      	lsls	r3, r3, #26
   19350:	d505      	bpl.n	1935e <encode_uint+0x5c>
		if (radix == 8) {
   19352:	2e08      	cmp	r6, #8
   19354:	d115      	bne.n	19382 <encode_uint+0x80>
			conv->altform_0 = true;
   19356:	78ab      	ldrb	r3, [r5, #2]
   19358:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   1935c:	70ab      	strb	r3, [r5, #2]
}
   1935e:	4648      	mov	r0, r9
   19360:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   19364:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   19368:	2b70      	cmp	r3, #112	; 0x70
   1936a:	e7d7      	b.n	1931c <encode_uint+0x1a>
	switch (specifier) {
   1936c:	2608      	movs	r6, #8
   1936e:	e7d8      	b.n	19322 <encode_uint+0x20>
		value /= radix;
   19370:	4680      	mov	r8, r0
   19372:	460f      	mov	r7, r1
   19374:	e7d7      	b.n	19326 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   19376:	f1bb 0f19 	cmp.w	fp, #25
   1937a:	bf94      	ite	ls
   1937c:	3437      	addls	r4, #55	; 0x37
   1937e:	3457      	addhi	r4, #87	; 0x57
   19380:	e7db      	b.n	1933a <encode_uint+0x38>
		} else if (radix == 16) {
   19382:	2e10      	cmp	r6, #16
   19384:	d1eb      	bne.n	1935e <encode_uint+0x5c>
			conv->altform_0c = true;
   19386:	78ab      	ldrb	r3, [r5, #2]
   19388:	f043 0310 	orr.w	r3, r3, #16
   1938c:	e7e6      	b.n	1935c <encode_uint+0x5a>

0001938e <outs>:
{
   1938e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19392:	4607      	mov	r7, r0
   19394:	4688      	mov	r8, r1
   19396:	4615      	mov	r5, r2
   19398:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1939a:	4614      	mov	r4, r2
   1939c:	42b4      	cmp	r4, r6
   1939e:	eba4 0005 	sub.w	r0, r4, r5
   193a2:	d302      	bcc.n	193aa <outs+0x1c>
   193a4:	b93e      	cbnz	r6, 193b6 <outs+0x28>
   193a6:	7823      	ldrb	r3, [r4, #0]
   193a8:	b12b      	cbz	r3, 193b6 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   193aa:	f814 0b01 	ldrb.w	r0, [r4], #1
   193ae:	4641      	mov	r1, r8
   193b0:	47b8      	blx	r7
		if (rc < 0) {
   193b2:	2800      	cmp	r0, #0
   193b4:	daf2      	bge.n	1939c <outs+0xe>
}
   193b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000193ba <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   193ba:	4770      	bx	lr

000193bc <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   193bc:	2300      	movs	r3, #0
	list->head = NULL;
   193be:	e9c0 3300 	strd	r3, r3, [r0]
}
   193c2:	4770      	bx	lr

000193c4 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   193c4:	6803      	ldr	r3, [r0, #0]
   193c6:	b923      	cbnz	r3, 193d2 <log_list_add_tail+0xe>
		list->head = msg;
   193c8:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   193ca:	2300      	movs	r3, #0
	list->tail = msg;
   193cc:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   193ce:	600b      	str	r3, [r1, #0]
}
   193d0:	4770      	bx	lr
		list->tail->next = msg;
   193d2:	6843      	ldr	r3, [r0, #4]
   193d4:	6019      	str	r1, [r3, #0]
   193d6:	e7f8      	b.n	193ca <log_list_add_tail+0x6>

000193d8 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   193d8:	6800      	ldr	r0, [r0, #0]
   193da:	4770      	bx	lr

000193dc <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   193dc:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   193de:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   193e0:	b108      	cbz	r0, 193e6 <log_list_head_get+0xa>
		list->head = list->head->next;
   193e2:	6802      	ldr	r2, [r0, #0]
   193e4:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   193e6:	4770      	bx	lr

000193e8 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   193e8:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   193ea:	f7e9 fb71 	bl	2ad0 <log_msg_chunk_alloc>

	if (msg != NULL) {
   193ee:	b118      	cbz	r0, 193f8 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   193f0:	2301      	movs	r3, #1
   193f2:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   193f4:	2300      	movs	r3, #0
   193f6:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   193f8:	bd08      	pop	{r3, pc}

000193fa <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   193fa:	f7fd bbbf 	b.w	16b7c <sys_clock_cycle_get_32>

000193fe <dummy_timestamp>:
   193fe:	2000      	movs	r0, #0
   19400:	4770      	bx	lr

00019402 <z_log_get_s_mask>:
{
   19402:	b5f0      	push	{r4, r5, r6, r7, lr}
   19404:	4605      	mov	r5, r0
	uint32_t mask = 0U;
   19406:	2000      	movs	r0, #0
	uint32_t arg = 0U;
   19408:	4603      	mov	r3, r0
	bool arm = false;
   1940a:	4602      	mov	r2, r0
				mask |= BIT(arg);
   1940c:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
   1940e:	f815 4b01 	ldrb.w	r4, [r5], #1
   19412:	b10c      	cbz	r4, 19418 <z_log_get_s_mask+0x16>
   19414:	428b      	cmp	r3, r1
   19416:	d300      	bcc.n	1941a <z_log_get_s_mask+0x18>
}
   19418:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   1941a:	2c25      	cmp	r4, #37	; 0x25
   1941c:	d102      	bne.n	19424 <z_log_get_s_mask+0x22>
			arm = !arm;
   1941e:	f082 0201 	eor.w	r2, r2, #1
   19422:	e7f4      	b.n	1940e <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   19424:	2a00      	cmp	r2, #0
   19426:	d0f2      	beq.n	1940e <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   19428:	f044 0620 	orr.w	r6, r4, #32
   1942c:	3e61      	subs	r6, #97	; 0x61
   1942e:	2e19      	cmp	r6, #25
   19430:	d8ed      	bhi.n	1940e <z_log_get_s_mask+0xc>
			if (curr == 's') {
   19432:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   19434:	bf04      	itt	eq
   19436:	fa07 f203 	lsleq.w	r2, r7, r3
   1943a:	4310      	orreq	r0, r2
			arg++;
   1943c:	3301      	adds	r3, #1
			arm = false;
   1943e:	2200      	movs	r2, #0
   19440:	e7e5      	b.n	1940e <z_log_get_s_mask+0xc>

00019442 <log_0>:
{
   19442:	b538      	push	{r3, r4, r5, lr}
   19444:	4605      	mov	r5, r0
   19446:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   19448:	f7ff ffce 	bl	193e8 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1944c:	b128      	cbz	r0, 1945a <log_0+0x18>
		msg->str = str;
   1944e:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   19450:	4621      	mov	r1, r4
}
   19452:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   19456:	f7e9 ba5d 	b.w	2914 <msg_finalize>
}
   1945a:	bd38      	pop	{r3, r4, r5, pc}

0001945c <log_1>:
{
   1945c:	b570      	push	{r4, r5, r6, lr}
   1945e:	4606      	mov	r6, r0
   19460:	460d      	mov	r5, r1
   19462:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   19464:	f7ff ffc0 	bl	193e8 <z_log_msg_std_alloc>

	if (msg != NULL) {
   19468:	b158      	cbz	r0, 19482 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   1946a:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   1946c:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   1946e:	2101      	movs	r1, #1
   19470:	f361 1207 	bfi	r2, r1, #4, #4
   19474:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   19476:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
   19478:	4621      	mov	r1, r4
}
   1947a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   1947e:	f7e9 ba49 	b.w	2914 <msg_finalize>
}
   19482:	bd70      	pop	{r4, r5, r6, pc}

00019484 <log_2>:
{
   19484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19488:	4680      	mov	r8, r0
   1948a:	460f      	mov	r7, r1
   1948c:	4616      	mov	r6, r2
   1948e:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   19490:	f7ff ffaa 	bl	193e8 <z_log_msg_std_alloc>

	if (msg != NULL) {
   19494:	b168      	cbz	r0, 194b2 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   19496:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   19498:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   1949c:	2202      	movs	r2, #2
   1949e:	f362 1307 	bfi	r3, r2, #4, #4
   194a2:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   194a4:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
   194a8:	4629      	mov	r1, r5
}
   194aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   194ae:	f7e9 ba31 	b.w	2914 <msg_finalize>
}
   194b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000194b6 <log_3>:
{
   194b6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   194ba:	4680      	mov	r8, r0
   194bc:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   194c0:	460f      	mov	r7, r1
   194c2:	4616      	mov	r6, r2
   194c4:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   194c6:	f7ff ff8f 	bl	193e8 <z_log_msg_std_alloc>

	if (msg != NULL) {
   194ca:	b170      	cbz	r0, 194ea <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   194cc:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   194ce:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   194d2:	2203      	movs	r2, #3
   194d4:	f362 1307 	bfi	r3, r2, #4, #4
   194d8:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   194da:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
   194de:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
   194e0:	4649      	mov	r1, r9
}
   194e2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   194e6:	f7e9 ba15 	b.w	2914 <msg_finalize>
}
   194ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000194ee <log_n>:
{
   194ee:	b510      	push	{r4, lr}
   194f0:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   194f2:	f000 f8b9 	bl	19668 <log_msg_create_n>
		if (msg == NULL) {
   194f6:	b120      	cbz	r0, 19502 <log_n+0x14>
		msg_finalize(msg, src_level);
   194f8:	4621      	mov	r1, r4
}
   194fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   194fe:	f7e9 ba09 	b.w	2914 <msg_finalize>
}
   19502:	bd10      	pop	{r4, pc}

00019504 <z_log_printk>:
{
   19504:	b500      	push	{lr}
   19506:	b0a3      	sub	sp, #140	; 0x8c
   19508:	4602      	mov	r2, r0
   1950a:	460b      	mov	r3, r1
			length = vsnprintk(str, sizeof(str), fmt, ap);
   1950c:	a801      	add	r0, sp, #4
   1950e:	2181      	movs	r1, #129	; 0x81
   19510:	f7e8 fb58 	bl	1bc4 <vsnprintk>
			msg = log_msg_hexdump_create(NULL, str, length);
   19514:	2881      	cmp	r0, #129	; 0x81
   19516:	4602      	mov	r2, r0
   19518:	a901      	add	r1, sp, #4
   1951a:	bf28      	it	cs
   1951c:	2281      	movcs	r2, #129	; 0x81
   1951e:	2000      	movs	r0, #0
   19520:	f000 f8fe 	bl	19720 <log_msg_hexdump_create>
			if (msg == NULL) {
   19524:	b118      	cbz	r0, 1952e <z_log_printk+0x2a>
			msg_finalize(msg, src_level_union.structure);
   19526:	f04f 0100 	mov.w	r1, #0
   1952a:	f7e9 f9f3 	bl	2914 <msg_finalize>
}
   1952e:	b023      	add	sp, #140	; 0x8c
   19530:	f85d fb04 	ldr.w	pc, [sp], #4

00019534 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   19534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19538:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1953a:	8903      	ldrh	r3, [r0, #8]
{
   1953c:	f89d 7020 	ldrb.w	r7, [sp, #32]
   19540:	460e      	mov	r6, r1
   19542:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   19544:	f3c3 028d 	ubfx	r2, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   19548:	42a2      	cmp	r2, r4
   1954a:	d803      	bhi.n	19554 <log_msg_hexdump_data_op+0x20>
		*length = 0;
   1954c:	2300      	movs	r3, #0
   1954e:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   19550:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   19554:	680b      	ldr	r3, [r1, #0]
   19556:	4423      	add	r3, r4
   19558:	4293      	cmp	r3, r2
		*length = available_len - offset;
   1955a:	bf84      	itt	hi
   1955c:	1b13      	subhi	r3, r2, r4
   1955e:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   19560:	2a0c      	cmp	r2, #12
	req_len = *length;
   19562:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   19566:	d92a      	bls.n	195be <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   19568:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   1956a:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   1956e:	d82d      	bhi.n	195cc <log_msg_hexdump_data_op+0x98>
		head_data = msg->payload.ext.data.bytes;
   19570:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   19572:	2208      	movs	r2, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   19574:	454a      	cmp	r2, r9
   19576:	bf28      	it	cs
   19578:	464a      	movcs	r2, r9
   1957a:	4615      	mov	r5, r2
			(void)memcpy(&head_data[offset], data, cpy_len);
   1957c:	4420      	add	r0, r4
		if (put_op) {
   1957e:	b317      	cbz	r7, 195c6 <log_msg_hexdump_data_op+0x92>
			(void)memcpy(&head_data[offset], data, cpy_len);
   19580:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   19582:	f000 fe7c 	bl	1a27e <memcpy>
		req_len -= cpy_len;
   19586:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   1958a:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   1958c:	f1b9 0f00 	cmp.w	r9, #0
   19590:	d0de      	beq.n	19550 <log_msg_hexdump_data_op+0x1c>
   19592:	f1b8 0f00 	cmp.w	r8, #0
   19596:	d0db      	beq.n	19550 <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   19598:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1959c:	454d      	cmp	r5, r9
   1959e:	bf28      	it	cs
   195a0:	464d      	movcs	r5, r9
			(void)memcpy(&cont->payload.bytes[offset],
   195a2:	1d20      	adds	r0, r4, #4
   195a4:	4440      	add	r0, r8
   195a6:	462a      	mov	r2, r5
		if (put_op) {
   195a8:	b1bf      	cbz	r7, 195da <log_msg_hexdump_data_op+0xa6>
			(void)memcpy(&cont->payload.bytes[offset],
   195aa:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   195ac:	f000 fe67 	bl	1a27e <memcpy>
		req_len -= cpy_len;
   195b0:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   195b4:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
   195b8:	442e      	add	r6, r5
		offset = 0;
   195ba:	2400      	movs	r4, #0
   195bc:	e7e6      	b.n	1958c <log_msg_hexdump_data_op+0x58>
		head_data = msg->payload.single.bytes;
   195be:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   195c0:	f04f 0800 	mov.w	r8, #0
   195c4:	e7d6      	b.n	19574 <log_msg_hexdump_data_op+0x40>
			(void)memcpy(data, &head_data[offset], cpy_len);
   195c6:	4601      	mov	r1, r0
   195c8:	4630      	mov	r0, r6
   195ca:	e7da      	b.n	19582 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   195cc:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   195ce:	2c1b      	cmp	r4, #27
   195d0:	d9dc      	bls.n	1958c <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   195d2:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   195d6:	3c1c      	subs	r4, #28
   195d8:	e7f9      	b.n	195ce <log_msg_hexdump_data_op+0x9a>
			(void)memcpy(data, &cont->payload.bytes[offset],
   195da:	4601      	mov	r1, r0
   195dc:	4630      	mov	r0, r6
   195de:	e7e5      	b.n	195ac <log_msg_hexdump_data_op+0x78>

000195e0 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   195e0:	3004      	adds	r0, #4
   195e2:	f3bf 8f5b 	dmb	ish
   195e6:	e850 3f00 	ldrex	r3, [r0]
   195ea:	3301      	adds	r3, #1
   195ec:	e840 3200 	strex	r2, r3, [r0]
   195f0:	2a00      	cmp	r2, #0
   195f2:	d1f8      	bne.n	195e6 <log_msg_get+0x6>
   195f4:	f3bf 8f5b 	dmb	ish
}
   195f8:	4770      	bx	lr

000195fa <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   195fa:	7a40      	ldrb	r0, [r0, #9]
}
   195fc:	0900      	lsrs	r0, r0, #4
   195fe:	4770      	bx	lr

00019600 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   19600:	7a43      	ldrb	r3, [r0, #9]
   19602:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   19606:	ea4f 1213 	mov.w	r2, r3, lsr #4
   1960a:	d216      	bcs.n	1963a <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1960c:	2a03      	cmp	r2, #3
   1960e:	d803      	bhi.n	19618 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   19610:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   19614:	6940      	ldr	r0, [r0, #20]
   19616:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   19618:	2901      	cmp	r1, #1
   1961a:	d803      	bhi.n	19624 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   1961c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   19620:	6980      	ldr	r0, [r0, #24]
   19622:	4770      	bx	lr
	cont = msg->payload.ext.next;
   19624:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   19626:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   19628:	2906      	cmp	r1, #6
   1962a:	d803      	bhi.n	19634 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   1962c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   19630:	6848      	ldr	r0, [r1, #4]
   19632:	4770      	bx	lr
		cont = cont->next;
   19634:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   19636:	3907      	subs	r1, #7
		cont = cont->next;
   19638:	e7f6      	b.n	19628 <log_msg_arg_get+0x28>
		return 0;
   1963a:	2000      	movs	r0, #0
}
   1963c:	4770      	bx	lr

0001963e <log_msg_put>:
{
   1963e:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   19640:	1d02      	adds	r2, r0, #4
   19642:	f3bf 8f5b 	dmb	ish
   19646:	e852 1f00 	ldrex	r1, [r2]
   1964a:	3901      	subs	r1, #1
   1964c:	e842 1c00 	strex	ip, r1, [r2]
   19650:	f1bc 0f00 	cmp.w	ip, #0
   19654:	d1f7      	bne.n	19646 <log_msg_put+0x8>
   19656:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   1965a:	685b      	ldr	r3, [r3, #4]
   1965c:	b90b      	cbnz	r3, 19662 <log_msg_put+0x24>
		msg_free(msg);
   1965e:	f7e9 ba4b 	b.w	2af8 <msg_free>
}
   19662:	4770      	bx	lr

00019664 <log_msg_str_get>:
}
   19664:	6900      	ldr	r0, [r0, #16]
   19666:	4770      	bx	lr

00019668 <log_msg_create_n>:
{
   19668:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1966c:	4680      	mov	r8, r0
   1966e:	460f      	mov	r7, r1
   19670:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   19672:	f7e9 fa2d 	bl	2ad0 <log_msg_chunk_alloc>
	if (msg != NULL) {
   19676:	4604      	mov	r4, r0
   19678:	b358      	cbz	r0, 196d2 <log_msg_create_n+0x6a>
		msg->hdr.ref_cnt = 1;
   1967a:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   1967c:	f04f 0a00 	mov.w	sl, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   19680:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   19682:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   19684:	f8a0 a008 	strh.w	sl, [r0, #8]
   19688:	d90c      	bls.n	196a4 <log_msg_create_n+0x3c>
	msg->hdr.params.generic.ext = 1;
   1968a:	7a03      	ldrb	r3, [r0, #8]
	*next = NULL;
   1968c:	f8c0 a014 	str.w	sl, [r0, #20]
	msg->hdr.params.generic.ext = 1;
   19690:	f043 0302 	orr.w	r3, r3, #2
   19694:	7203      	strb	r3, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   19696:	f1a5 0902 	sub.w	r9, r5, #2
	next = &msg->payload.ext.next;
   1969a:	f100 0b14 	add.w	fp, r0, #20
	while (n > 0) {
   1969e:	f1b9 0f00 	cmp.w	r9, #0
   196a2:	dc0e      	bgt.n	196c2 <log_msg_create_n+0x5a>
		msg->hdr.params.std.nargs = nargs;
   196a4:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
   196a6:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   196aa:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   196ae:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   196b0:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   196b2:	d819      	bhi.n	196e8 <log_msg_create_n+0x80>
		(void)memcpy(msg->payload.single.args, args,
   196b4:	00aa      	lsls	r2, r5, #2
   196b6:	4639      	mov	r1, r7
   196b8:	f104 0014 	add.w	r0, r4, #20
   196bc:	f000 fddf 	bl	1a27e <memcpy>
	while (nargs != 0U) {
   196c0:	e007      	b.n	196d2 <log_msg_create_n+0x6a>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   196c2:	f7e9 fa05 	bl	2ad0 <log_msg_chunk_alloc>
		if (cont == NULL) {
   196c6:	4606      	mov	r6, r0
   196c8:	b930      	cbnz	r0, 196d8 <log_msg_create_n+0x70>
			msg_free(msg);
   196ca:	4620      	mov	r0, r4
   196cc:	f7e9 fa14 	bl	2af8 <msg_free>
			return NULL;
   196d0:	4634      	mov	r4, r6
}
   196d2:	4620      	mov	r0, r4
   196d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   196d8:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   196dc:	f1a9 0907 	sub.w	r9, r9, #7
   196e0:	f8c0 a000 	str.w	sl, [r0]
		next = &cont->next;
   196e4:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   196e6:	e7da      	b.n	1969e <log_msg_create_n+0x36>
		(void)memcpy(msg->payload.ext.data.args, args,
   196e8:	4639      	mov	r1, r7
   196ea:	2208      	movs	r2, #8
   196ec:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   196f0:	f8d4 8014 	ldr.w	r8, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   196f4:	f000 fdc3 	bl	1a27e <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   196f8:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   196fa:	3708      	adds	r7, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   196fc:	2d07      	cmp	r5, #7
   196fe:	462e      	mov	r6, r5
   19700:	bf28      	it	cs
   19702:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   19704:	ea4f 0986 	mov.w	r9, r6, lsl #2
   19708:	4639      	mov	r1, r7
   1970a:	f108 0004 	add.w	r0, r8, #4
   1970e:	464a      	mov	r2, r9
   19710:	f000 fdb5 	bl	1a27e <memcpy>
	while (nargs != 0U) {
   19714:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   19716:	f8d8 8000 	ldr.w	r8, [r8]
		args += cpy_args;
   1971a:	444f      	add	r7, r9
	while (nargs != 0U) {
   1971c:	d1ee      	bne.n	196fc <log_msg_create_n+0x94>
   1971e:	e7d8      	b.n	196d2 <log_msg_create_n+0x6a>

00019720 <log_msg_hexdump_create>:
{
   19720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   19724:	f643 75ff 	movw	r5, #16383	; 0x3fff
   19728:	4295      	cmp	r5, r2
{
   1972a:	4680      	mov	r8, r0
   1972c:	460e      	mov	r6, r1
   1972e:	4617      	mov	r7, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   19730:	bf28      	it	cs
   19732:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
   19734:	f7e9 f9cc 	bl	2ad0 <log_msg_chunk_alloc>
	if (msg == NULL) {
   19738:	4604      	mov	r4, r0
   1973a:	b388      	cbz	r0, 197a0 <log_msg_hexdump_create+0x80>
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   1973c:	8902      	ldrh	r2, [r0, #8]
	msg->str = str;
   1973e:	f8c0 8010 	str.w	r8, [r0, #16]
	msg->hdr.ref_cnt = 1;
   19742:	2301      	movs	r3, #1
   19744:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   19746:	00ab      	lsls	r3, r5, #2
   19748:	f043 0301 	orr.w	r3, r3, #1
   1974c:	f002 0202 	and.w	r2, r2, #2
   19750:	4313      	orrs	r3, r2
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   19752:	2f0c      	cmp	r7, #12
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   19754:	8103      	strh	r3, [r0, #8]
		(void)memcpy(msg->payload.single.bytes, data, length);
   19756:	f100 0814 	add.w	r8, r0, #20
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1975a:	d918      	bls.n	1978e <log_msg_hexdump_create+0x6e>
		(void)memcpy(msg->payload.ext.data.bytes,
   1975c:	4631      	mov	r1, r6
   1975e:	2208      	movs	r2, #8
   19760:	3018      	adds	r0, #24
   19762:	f000 fd8c 	bl	1a27e <memcpy>
		msg->hdr.params.generic.ext = 1;
   19766:	7a23      	ldrb	r3, [r4, #8]
		msg->payload.ext.next = NULL;
   19768:	f04f 0900 	mov.w	r9, #0
		msg->hdr.params.generic.ext = 1;
   1976c:	f043 0302 	orr.w	r3, r3, #2
		msg->payload.ext.next = NULL;
   19770:	f8c4 9014 	str.w	r9, [r4, #20]
		msg->hdr.params.generic.ext = 1;
   19774:	7223      	strb	r3, [r4, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   19776:	3608      	adds	r6, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   19778:	3d08      	subs	r5, #8
	while (length > 0) {
   1977a:	b18d      	cbz	r5, 197a0 <log_msg_hexdump_create+0x80>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1977c:	f7e9 f9a8 	bl	2ad0 <log_msg_chunk_alloc>
		if (cont == NULL) {
   19780:	4607      	mov	r7, r0
   19782:	b980      	cbnz	r0, 197a6 <log_msg_hexdump_create+0x86>
			msg_free(msg);
   19784:	4620      	mov	r0, r4
   19786:	f7e9 f9b7 	bl	2af8 <msg_free>
			return NULL;
   1978a:	463c      	mov	r4, r7
   1978c:	e008      	b.n	197a0 <log_msg_hexdump_create+0x80>
		(void)memcpy(msg->payload.single.bytes, data, length);
   1978e:	462a      	mov	r2, r5
   19790:	4631      	mov	r1, r6
   19792:	4640      	mov	r0, r8
   19794:	f000 fd73 	bl	1a27e <memcpy>
		msg->hdr.params.generic.ext = 0;
   19798:	7a23      	ldrb	r3, [r4, #8]
   1979a:	f36f 0341 	bfc	r3, #1, #1
   1979e:	7223      	strb	r3, [r4, #8]
}
   197a0:	4620      	mov	r0, r4
   197a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
   197a6:	2d1c      	cmp	r5, #28
   197a8:	462f      	mov	r7, r5
   197aa:	bf28      	it	cs
   197ac:	271c      	movcs	r7, #28
		*prev_cont = cont;
   197ae:	f8c8 0000 	str.w	r0, [r8]
		(void)memcpy(cont->payload.bytes, data, chunk_length);
   197b2:	4631      	mov	r1, r6
		cont->next = NULL;
   197b4:	f8c0 9000 	str.w	r9, [r0]
		prev_cont = &cont->next;
   197b8:	4680      	mov	r8, r0
		(void)memcpy(cont->payload.bytes, data, chunk_length);
   197ba:	463a      	mov	r2, r7
   197bc:	3004      	adds	r0, #4
   197be:	f000 fd5e 	bl	1a27e <memcpy>
		data += chunk_length;
   197c2:	443e      	add	r6, r7
		length -= chunk_length;
   197c4:	1bed      	subs	r5, r5, r7
   197c6:	e7d8      	b.n	1977a <log_msg_hexdump_create+0x5a>

000197c8 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   197c8:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   197ca:	2400      	movs	r4, #0
   197cc:	9400      	str	r4, [sp, #0]
   197ce:	f7ff feb1 	bl	19534 <log_msg_hexdump_data_op>
}
   197d2:	b002      	add	sp, #8
   197d4:	bd10      	pop	{r4, pc}

000197d6 <buffer_write>:
{
   197d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   197d8:	4606      	mov	r6, r0
   197da:	460d      	mov	r5, r1
   197dc:	4614      	mov	r4, r2
   197de:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   197e0:	4621      	mov	r1, r4
   197e2:	4628      	mov	r0, r5
   197e4:	463a      	mov	r2, r7
   197e6:	47b0      	blx	r6
	} while (len != 0);
   197e8:	1a24      	subs	r4, r4, r0
		buf += processed;
   197ea:	4405      	add	r5, r0
	} while (len != 0);
   197ec:	d1f8      	bne.n	197e0 <buffer_write+0xa>
}
   197ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000197f0 <std_print>:
{
   197f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   197f4:	b08e      	sub	sp, #56	; 0x38
   197f6:	af0e      	add	r7, sp, #56	; 0x38
   197f8:	4680      	mov	r8, r0
   197fa:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   197fc:	f7ff ff32 	bl	19664 <log_msg_str_get>
   19800:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   19802:	4640      	mov	r0, r8
   19804:	f7ff fef9 	bl	195fa <log_msg_nargs_get>
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   19808:	0083      	lsls	r3, r0, #2
   1980a:	3307      	adds	r3, #7
   1980c:	f023 0307 	bic.w	r3, r3, #7
   19810:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
   19814:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   19816:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   19818:	f04f 0900 	mov.w	r9, #0
   1981c:	45d1      	cmp	r9, sl
   1981e:	d116      	bne.n	1984e <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   19820:	4640      	mov	r0, r8
   19822:	f7ff feea 	bl	195fa <log_msg_nargs_get>
   19826:	280f      	cmp	r0, #15
   19828:	d81e      	bhi.n	19868 <std_print+0x78>
   1982a:	e8df f010 	tbh	[pc, r0, lsl #1]
   1982e:	0019      	.short	0x0019
   19830:	00260020 	.word	0x00260020
   19834:	0036002d 	.word	0x0036002d
   19838:	004e0041 	.word	0x004e0041
   1983c:	006e005d 	.word	0x006e005d
   19840:	00960081 	.word	0x00960081
   19844:	00c600ad 	.word	0x00c600ad
   19848:	00fe00e1 	.word	0x00fe00e1
   1984c:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
   1984e:	4649      	mov	r1, r9
   19850:	4640      	mov	r0, r8
   19852:	f7ff fed5 	bl	19600 <log_msg_arg_get>
   19856:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   1985a:	f109 0901 	add.w	r9, r9, #1
   1985e:	e7dd      	b.n	1981c <std_print+0x2c>
		print_formatted(output, str);
   19860:	4631      	mov	r1, r6
   19862:	4628      	mov	r0, r5
   19864:	f7e9 f986 	bl	2b74 <print_formatted>
}
   19868:	46bd      	mov	sp, r7
   1986a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   1986e:	6822      	ldr	r2, [r4, #0]
   19870:	4631      	mov	r1, r6
   19872:	4628      	mov	r0, r5
   19874:	f7e9 f97e 	bl	2b74 <print_formatted>
		break;
   19878:	e7f6      	b.n	19868 <std_print+0x78>
		print_formatted(output, str, args[0], args[1]);
   1987a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1987e:	4631      	mov	r1, r6
   19880:	4628      	mov	r0, r5
   19882:	f7e9 f977 	bl	2b74 <print_formatted>
		break;
   19886:	e7ef      	b.n	19868 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2]);
   19888:	68a3      	ldr	r3, [r4, #8]
   1988a:	9300      	str	r3, [sp, #0]
   1988c:	e9d4 2300 	ldrd	r2, r3, [r4]
   19890:	4631      	mov	r1, r6
   19892:	4628      	mov	r0, r5
   19894:	f7e9 f96e 	bl	2b74 <print_formatted>
		break;
   19898:	e7e6      	b.n	19868 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1989a:	68e3      	ldr	r3, [r4, #12]
   1989c:	9301      	str	r3, [sp, #4]
   1989e:	68a3      	ldr	r3, [r4, #8]
   198a0:	9300      	str	r3, [sp, #0]
   198a2:	e9d4 2300 	ldrd	r2, r3, [r4]
   198a6:	4631      	mov	r1, r6
   198a8:	4628      	mov	r0, r5
   198aa:	f7e9 f963 	bl	2b74 <print_formatted>
		break;
   198ae:	e7db      	b.n	19868 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   198b0:	6923      	ldr	r3, [r4, #16]
   198b2:	9302      	str	r3, [sp, #8]
   198b4:	68e3      	ldr	r3, [r4, #12]
   198b6:	9301      	str	r3, [sp, #4]
   198b8:	68a3      	ldr	r3, [r4, #8]
   198ba:	9300      	str	r3, [sp, #0]
   198bc:	e9d4 2300 	ldrd	r2, r3, [r4]
   198c0:	4631      	mov	r1, r6
   198c2:	4628      	mov	r0, r5
   198c4:	f7e9 f956 	bl	2b74 <print_formatted>
		break;
   198c8:	e7ce      	b.n	19868 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   198ca:	6963      	ldr	r3, [r4, #20]
   198cc:	9303      	str	r3, [sp, #12]
   198ce:	6923      	ldr	r3, [r4, #16]
   198d0:	9302      	str	r3, [sp, #8]
   198d2:	68e3      	ldr	r3, [r4, #12]
   198d4:	9301      	str	r3, [sp, #4]
   198d6:	68a3      	ldr	r3, [r4, #8]
   198d8:	9300      	str	r3, [sp, #0]
   198da:	e9d4 2300 	ldrd	r2, r3, [r4]
   198de:	4631      	mov	r1, r6
   198e0:	4628      	mov	r0, r5
   198e2:	f7e9 f947 	bl	2b74 <print_formatted>
		break;
   198e6:	e7bf      	b.n	19868 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   198e8:	69a3      	ldr	r3, [r4, #24]
   198ea:	9304      	str	r3, [sp, #16]
   198ec:	6963      	ldr	r3, [r4, #20]
   198ee:	9303      	str	r3, [sp, #12]
   198f0:	6923      	ldr	r3, [r4, #16]
   198f2:	9302      	str	r3, [sp, #8]
   198f4:	68e3      	ldr	r3, [r4, #12]
   198f6:	9301      	str	r3, [sp, #4]
   198f8:	68a3      	ldr	r3, [r4, #8]
   198fa:	9300      	str	r3, [sp, #0]
   198fc:	e9d4 2300 	ldrd	r2, r3, [r4]
   19900:	4631      	mov	r1, r6
   19902:	4628      	mov	r0, r5
   19904:	f7e9 f936 	bl	2b74 <print_formatted>
		break;
   19908:	e7ae      	b.n	19868 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1990a:	69e3      	ldr	r3, [r4, #28]
   1990c:	9305      	str	r3, [sp, #20]
   1990e:	69a3      	ldr	r3, [r4, #24]
   19910:	9304      	str	r3, [sp, #16]
   19912:	6963      	ldr	r3, [r4, #20]
   19914:	9303      	str	r3, [sp, #12]
   19916:	6923      	ldr	r3, [r4, #16]
   19918:	9302      	str	r3, [sp, #8]
   1991a:	68e3      	ldr	r3, [r4, #12]
   1991c:	9301      	str	r3, [sp, #4]
   1991e:	68a3      	ldr	r3, [r4, #8]
   19920:	9300      	str	r3, [sp, #0]
   19922:	e9d4 2300 	ldrd	r2, r3, [r4]
   19926:	4631      	mov	r1, r6
   19928:	4628      	mov	r0, r5
   1992a:	f7e9 f923 	bl	2b74 <print_formatted>
		break;
   1992e:	e79b      	b.n	19868 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   19930:	6a23      	ldr	r3, [r4, #32]
   19932:	9306      	str	r3, [sp, #24]
   19934:	69e3      	ldr	r3, [r4, #28]
   19936:	9305      	str	r3, [sp, #20]
   19938:	69a3      	ldr	r3, [r4, #24]
   1993a:	9304      	str	r3, [sp, #16]
   1993c:	6963      	ldr	r3, [r4, #20]
   1993e:	9303      	str	r3, [sp, #12]
   19940:	6923      	ldr	r3, [r4, #16]
   19942:	9302      	str	r3, [sp, #8]
   19944:	68e3      	ldr	r3, [r4, #12]
   19946:	9301      	str	r3, [sp, #4]
   19948:	68a3      	ldr	r3, [r4, #8]
   1994a:	9300      	str	r3, [sp, #0]
   1994c:	e9d4 2300 	ldrd	r2, r3, [r4]
   19950:	4631      	mov	r1, r6
   19952:	4628      	mov	r0, r5
   19954:	f7e9 f90e 	bl	2b74 <print_formatted>
		break;
   19958:	e786      	b.n	19868 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1995a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1995c:	9307      	str	r3, [sp, #28]
   1995e:	6a23      	ldr	r3, [r4, #32]
   19960:	9306      	str	r3, [sp, #24]
   19962:	69e3      	ldr	r3, [r4, #28]
   19964:	9305      	str	r3, [sp, #20]
   19966:	69a3      	ldr	r3, [r4, #24]
   19968:	9304      	str	r3, [sp, #16]
   1996a:	6963      	ldr	r3, [r4, #20]
   1996c:	9303      	str	r3, [sp, #12]
   1996e:	6923      	ldr	r3, [r4, #16]
   19970:	9302      	str	r3, [sp, #8]
   19972:	68e3      	ldr	r3, [r4, #12]
   19974:	9301      	str	r3, [sp, #4]
   19976:	68a3      	ldr	r3, [r4, #8]
   19978:	9300      	str	r3, [sp, #0]
   1997a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1997e:	4631      	mov	r1, r6
   19980:	4628      	mov	r0, r5
   19982:	f7e9 f8f7 	bl	2b74 <print_formatted>
		break;
   19986:	e76f      	b.n	19868 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   19988:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1998a:	9308      	str	r3, [sp, #32]
   1998c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1998e:	9307      	str	r3, [sp, #28]
   19990:	6a23      	ldr	r3, [r4, #32]
   19992:	9306      	str	r3, [sp, #24]
   19994:	69e3      	ldr	r3, [r4, #28]
   19996:	9305      	str	r3, [sp, #20]
   19998:	69a3      	ldr	r3, [r4, #24]
   1999a:	9304      	str	r3, [sp, #16]
   1999c:	6963      	ldr	r3, [r4, #20]
   1999e:	9303      	str	r3, [sp, #12]
   199a0:	6923      	ldr	r3, [r4, #16]
   199a2:	9302      	str	r3, [sp, #8]
   199a4:	68e3      	ldr	r3, [r4, #12]
   199a6:	9301      	str	r3, [sp, #4]
   199a8:	68a3      	ldr	r3, [r4, #8]
   199aa:	9300      	str	r3, [sp, #0]
   199ac:	e9d4 2300 	ldrd	r2, r3, [r4]
   199b0:	4631      	mov	r1, r6
   199b2:	4628      	mov	r0, r5
   199b4:	f7e9 f8de 	bl	2b74 <print_formatted>
		break;
   199b8:	e756      	b.n	19868 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   199ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   199bc:	9309      	str	r3, [sp, #36]	; 0x24
   199be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   199c0:	9308      	str	r3, [sp, #32]
   199c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   199c4:	9307      	str	r3, [sp, #28]
   199c6:	6a23      	ldr	r3, [r4, #32]
   199c8:	9306      	str	r3, [sp, #24]
   199ca:	69e3      	ldr	r3, [r4, #28]
   199cc:	9305      	str	r3, [sp, #20]
   199ce:	69a3      	ldr	r3, [r4, #24]
   199d0:	9304      	str	r3, [sp, #16]
   199d2:	6963      	ldr	r3, [r4, #20]
   199d4:	9303      	str	r3, [sp, #12]
   199d6:	6923      	ldr	r3, [r4, #16]
   199d8:	9302      	str	r3, [sp, #8]
   199da:	68e3      	ldr	r3, [r4, #12]
   199dc:	9301      	str	r3, [sp, #4]
   199de:	68a3      	ldr	r3, [r4, #8]
   199e0:	9300      	str	r3, [sp, #0]
   199e2:	e9d4 2300 	ldrd	r2, r3, [r4]
   199e6:	4631      	mov	r1, r6
   199e8:	4628      	mov	r0, r5
   199ea:	f7e9 f8c3 	bl	2b74 <print_formatted>
		break;
   199ee:	e73b      	b.n	19868 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   199f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   199f2:	930a      	str	r3, [sp, #40]	; 0x28
   199f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   199f6:	9309      	str	r3, [sp, #36]	; 0x24
   199f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   199fa:	9308      	str	r3, [sp, #32]
   199fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   199fe:	9307      	str	r3, [sp, #28]
   19a00:	6a23      	ldr	r3, [r4, #32]
   19a02:	9306      	str	r3, [sp, #24]
   19a04:	69e3      	ldr	r3, [r4, #28]
   19a06:	9305      	str	r3, [sp, #20]
   19a08:	69a3      	ldr	r3, [r4, #24]
   19a0a:	9304      	str	r3, [sp, #16]
   19a0c:	6963      	ldr	r3, [r4, #20]
   19a0e:	9303      	str	r3, [sp, #12]
   19a10:	6923      	ldr	r3, [r4, #16]
   19a12:	9302      	str	r3, [sp, #8]
   19a14:	68e3      	ldr	r3, [r4, #12]
   19a16:	9301      	str	r3, [sp, #4]
   19a18:	68a3      	ldr	r3, [r4, #8]
   19a1a:	9300      	str	r3, [sp, #0]
   19a1c:	e9d4 2300 	ldrd	r2, r3, [r4]
   19a20:	4631      	mov	r1, r6
   19a22:	4628      	mov	r0, r5
   19a24:	f7e9 f8a6 	bl	2b74 <print_formatted>
		break;
   19a28:	e71e      	b.n	19868 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   19a2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   19a2c:	930b      	str	r3, [sp, #44]	; 0x2c
   19a2e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   19a30:	930a      	str	r3, [sp, #40]	; 0x28
   19a32:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   19a34:	9309      	str	r3, [sp, #36]	; 0x24
   19a36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   19a38:	9308      	str	r3, [sp, #32]
   19a3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19a3c:	9307      	str	r3, [sp, #28]
   19a3e:	6a23      	ldr	r3, [r4, #32]
   19a40:	9306      	str	r3, [sp, #24]
   19a42:	69e3      	ldr	r3, [r4, #28]
   19a44:	9305      	str	r3, [sp, #20]
   19a46:	69a3      	ldr	r3, [r4, #24]
   19a48:	9304      	str	r3, [sp, #16]
   19a4a:	6963      	ldr	r3, [r4, #20]
   19a4c:	9303      	str	r3, [sp, #12]
   19a4e:	6923      	ldr	r3, [r4, #16]
   19a50:	9302      	str	r3, [sp, #8]
   19a52:	68e3      	ldr	r3, [r4, #12]
   19a54:	9301      	str	r3, [sp, #4]
   19a56:	68a3      	ldr	r3, [r4, #8]
   19a58:	9300      	str	r3, [sp, #0]
   19a5a:	e9d4 2300 	ldrd	r2, r3, [r4]
   19a5e:	4631      	mov	r1, r6
   19a60:	4628      	mov	r0, r5
   19a62:	f7e9 f887 	bl	2b74 <print_formatted>
		break;
   19a66:	e6ff      	b.n	19868 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   19a68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   19a6a:	930c      	str	r3, [sp, #48]	; 0x30
   19a6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   19a6e:	930b      	str	r3, [sp, #44]	; 0x2c
   19a70:	6b23      	ldr	r3, [r4, #48]	; 0x30
   19a72:	930a      	str	r3, [sp, #40]	; 0x28
   19a74:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   19a76:	9309      	str	r3, [sp, #36]	; 0x24
   19a78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   19a7a:	9308      	str	r3, [sp, #32]
   19a7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19a7e:	9307      	str	r3, [sp, #28]
   19a80:	6a23      	ldr	r3, [r4, #32]
   19a82:	9306      	str	r3, [sp, #24]
   19a84:	69e3      	ldr	r3, [r4, #28]
   19a86:	9305      	str	r3, [sp, #20]
   19a88:	69a3      	ldr	r3, [r4, #24]
   19a8a:	9304      	str	r3, [sp, #16]
   19a8c:	6963      	ldr	r3, [r4, #20]
   19a8e:	9303      	str	r3, [sp, #12]
   19a90:	6923      	ldr	r3, [r4, #16]
   19a92:	9302      	str	r3, [sp, #8]
   19a94:	68e3      	ldr	r3, [r4, #12]
   19a96:	9301      	str	r3, [sp, #4]
   19a98:	68a3      	ldr	r3, [r4, #8]
   19a9a:	9300      	str	r3, [sp, #0]
   19a9c:	e9d4 2300 	ldrd	r2, r3, [r4]
   19aa0:	4631      	mov	r1, r6
   19aa2:	4628      	mov	r0, r5
   19aa4:	f7e9 f866 	bl	2b74 <print_formatted>
}
   19aa8:	e6de      	b.n	19868 <std_print+0x78>

00019aaa <log_output_flush>:
		     output->control_block->offset,
   19aaa:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   19aac:	6881      	ldr	r1, [r0, #8]
{
   19aae:	b510      	push	{r4, lr}
   19ab0:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   19ab2:	e9d2 2300 	ldrd	r2, r3, [r2]
   19ab6:	6800      	ldr	r0, [r0, #0]
   19ab8:	f7ff fe8d 	bl	197d6 <buffer_write>
	output->control_block->offset = 0;
   19abc:	6863      	ldr	r3, [r4, #4]
   19abe:	2200      	movs	r2, #0
   19ac0:	601a      	str	r2, [r3, #0]
}
   19ac2:	bd10      	pop	{r4, pc}

00019ac4 <out_func>:
{
   19ac4:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   19ac6:	684b      	ldr	r3, [r1, #4]
   19ac8:	681a      	ldr	r2, [r3, #0]
   19aca:	68cb      	ldr	r3, [r1, #12]
   19acc:	429a      	cmp	r2, r3
{
   19ace:	4605      	mov	r5, r0
   19ad0:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   19ad2:	d102      	bne.n	19ada <out_func+0x16>
		log_output_flush(out_ctx);
   19ad4:	4608      	mov	r0, r1
   19ad6:	f7ff ffe8 	bl	19aaa <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   19ada:	6863      	ldr	r3, [r4, #4]
   19adc:	f3bf 8f5b 	dmb	ish
   19ae0:	e853 2f00 	ldrex	r2, [r3]
   19ae4:	1c51      	adds	r1, r2, #1
   19ae6:	e843 1000 	strex	r0, r1, [r3]
   19aea:	2800      	cmp	r0, #0
   19aec:	d1f8      	bne.n	19ae0 <out_func+0x1c>
   19aee:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   19af2:	68a3      	ldr	r3, [r4, #8]
   19af4:	549d      	strb	r5, [r3, r2]
}
   19af6:	2000      	movs	r0, #0
   19af8:	bd38      	pop	{r3, r4, r5, pc}

00019afa <settings_delete>:

int settings_delete(const char *name)
{
	return settings_save_one(name, NULL, 0);
   19afa:	2200      	movs	r2, #0
   19afc:	4611      	mov	r1, r2
   19afe:	f7e9 baaf 	b.w	3060 <settings_save_one>

00019b02 <settings_name_steq>:
	return rc;
}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

int settings_name_steq(const char *name, const char *key, const char **next)
{
   19b02:	4603      	mov	r3, r0
   19b04:	b530      	push	{r4, r5, lr}
   19b06:	4608      	mov	r0, r1
	if (next) {
   19b08:	b10a      	cbz	r2, 19b0e <settings_name_steq+0xc>
		*next = NULL;
   19b0a:	2100      	movs	r1, #0
   19b0c:	6011      	str	r1, [r2, #0]
	}

	if ((!name) || (!key)) {
   19b0e:	b163      	cbz	r3, 19b2a <settings_name_steq+0x28>
   19b10:	b190      	cbz	r0, 19b38 <settings_name_steq+0x36>
   19b12:	1e41      	subs	r1, r0, #1
   19b14:	4618      	mov	r0, r3
	/* name might come from flash directly, in flash the name would end
	 * with '=' or '\0' depending how storage is done. Flash reading is
	 * limited to what can be read
	 */

	while ((*key != '\0') && (*key == *name) &&
   19b16:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   19b1a:	4604      	mov	r4, r0
   19b1c:	f810 3b01 	ldrb.w	r3, [r0], #1
   19b20:	b15d      	cbz	r5, 19b3a <settings_name_steq+0x38>
   19b22:	429d      	cmp	r5, r3
   19b24:	d101      	bne.n	19b2a <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   19b26:	2d3d      	cmp	r5, #61	; 0x3d
   19b28:	d1f5      	bne.n	19b16 <settings_name_steq+0x14>

	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
		return 1;
	}

	return 0;
   19b2a:	2000      	movs	r0, #0
   19b2c:	e004      	b.n	19b38 <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   19b2e:	2b3d      	cmp	r3, #61	; 0x3d
   19b30:	d008      	beq.n	19b44 <settings_name_steq+0x42>
   19b32:	fab3 f083 	clz	r0, r3
   19b36:	0940      	lsrs	r0, r0, #5
}
   19b38:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   19b3a:	2b2f      	cmp	r3, #47	; 0x2f
   19b3c:	d1f7      	bne.n	19b2e <settings_name_steq+0x2c>
		if (next) {
   19b3e:	b10a      	cbz	r2, 19b44 <settings_name_steq+0x42>
			*next = name + 1;
   19b40:	3401      	adds	r4, #1
   19b42:	6014      	str	r4, [r2, #0]
		return 1;
   19b44:	2001      	movs	r0, #1
   19b46:	e7f7      	b.n	19b38 <settings_name_steq+0x36>

00019b48 <settings_name_next>:

int settings_name_next(const char *name, const char **next)
{
   19b48:	b530      	push	{r4, r5, lr}
   19b4a:	4603      	mov	r3, r0
	int rc = 0;

	if (next) {
   19b4c:	b109      	cbz	r1, 19b52 <settings_name_next+0xa>
		*next = NULL;
   19b4e:	2200      	movs	r2, #0
   19b50:	600a      	str	r2, [r1, #0]
	}

	if (!name) {
   19b52:	b16b      	cbz	r3, 19b70 <settings_name_next+0x28>
   19b54:	461a      	mov	r2, r3
   19b56:	4614      	mov	r4, r2
   19b58:	1ad0      	subs	r0, r2, r3

	/* name might come from flash directly, in flash the name would end
	 * with '=' or '\0' depending how storage is done. Flash reading is
	 * limited to what can be read
	 */
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   19b5a:	f812 5b01 	ldrb.w	r5, [r2], #1
   19b5e:	b135      	cbz	r5, 19b6e <settings_name_next+0x26>
   19b60:	2d3d      	cmp	r5, #61	; 0x3d
   19b62:	d004      	beq.n	19b6e <settings_name_next+0x26>
   19b64:	2d2f      	cmp	r5, #47	; 0x2f
   19b66:	d1f6      	bne.n	19b56 <settings_name_next+0xe>
		rc++;
		name++;
	}

	if (*name == SETTINGS_NAME_SEPARATOR) {
		if (next) {
   19b68:	b109      	cbz	r1, 19b6e <settings_name_next+0x26>
			*next = name + 1;
   19b6a:	3401      	adds	r4, #1
   19b6c:	600c      	str	r4, [r1, #0]
		}
		return rc;
	}

	return rc;
}
   19b6e:	bd30      	pop	{r4, r5, pc}
		return 0;
   19b70:	4618      	mov	r0, r3
   19b72:	e7fc      	b.n	19b6e <settings_name_next+0x26>

00019b74 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   19b74:	2200      	movs	r2, #0
   19b76:	e9c0 2200 	strd	r2, r2, [r0]
   19b7a:	6082      	str	r2, [r0, #8]
}
   19b7c:	4770      	bx	lr

00019b7e <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   19b7e:	b538      	push	{r3, r4, r5, lr}
   19b80:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   19b82:	42ab      	cmp	r3, r5
{
   19b84:	4611      	mov	r1, r2
   19b86:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   19b88:	d804      	bhi.n	19b94 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   19b8a:	461a      	mov	r2, r3
   19b8c:	f000 fb77 	bl	1a27e <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   19b90:	4620      	mov	r0, r4
   19b92:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   19b94:	2400      	movs	r4, #0
   19b96:	e7fb      	b.n	19b90 <_copy+0x12>

00019b98 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   19b98:	f000 bb7c 	b.w	1a294 <memset>

00019b9c <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   19b9c:	09c3      	lsrs	r3, r0, #7
   19b9e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   19ba2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   19ba6:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   19baa:	b2c0      	uxtb	r0, r0
   19bac:	4770      	bx	lr

00019bae <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   19bae:	78cb      	ldrb	r3, [r1, #3]
   19bb0:	7802      	ldrb	r2, [r0, #0]
   19bb2:	4053      	eors	r3, r2
   19bb4:	7003      	strb	r3, [r0, #0]
   19bb6:	884b      	ldrh	r3, [r1, #2]
   19bb8:	7842      	ldrb	r2, [r0, #1]
   19bba:	4053      	eors	r3, r2
   19bbc:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   19bbe:	680a      	ldr	r2, [r1, #0]
   19bc0:	7883      	ldrb	r3, [r0, #2]
   19bc2:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   19bc6:	7083      	strb	r3, [r0, #2]
   19bc8:	680a      	ldr	r2, [r1, #0]
   19bca:	78c3      	ldrb	r3, [r0, #3]
   19bcc:	4053      	eors	r3, r2
   19bce:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   19bd0:	79cb      	ldrb	r3, [r1, #7]
   19bd2:	7902      	ldrb	r2, [r0, #4]
   19bd4:	4053      	eors	r3, r2
   19bd6:	7103      	strb	r3, [r0, #4]
   19bd8:	88cb      	ldrh	r3, [r1, #6]
   19bda:	7942      	ldrb	r2, [r0, #5]
   19bdc:	4053      	eors	r3, r2
   19bde:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   19be0:	684a      	ldr	r2, [r1, #4]
   19be2:	7983      	ldrb	r3, [r0, #6]
   19be4:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   19be8:	7183      	strb	r3, [r0, #6]
   19bea:	684a      	ldr	r2, [r1, #4]
   19bec:	79c3      	ldrb	r3, [r0, #7]
   19bee:	4053      	eors	r3, r2
   19bf0:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   19bf2:	7acb      	ldrb	r3, [r1, #11]
   19bf4:	7a02      	ldrb	r2, [r0, #8]
   19bf6:	4053      	eors	r3, r2
   19bf8:	7203      	strb	r3, [r0, #8]
   19bfa:	7a42      	ldrb	r2, [r0, #9]
   19bfc:	894b      	ldrh	r3, [r1, #10]
   19bfe:	4053      	eors	r3, r2
   19c00:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   19c02:	688a      	ldr	r2, [r1, #8]
   19c04:	7a83      	ldrb	r3, [r0, #10]
   19c06:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   19c0a:	7283      	strb	r3, [r0, #10]
   19c0c:	688a      	ldr	r2, [r1, #8]
   19c0e:	7ac3      	ldrb	r3, [r0, #11]
   19c10:	4053      	eors	r3, r2
   19c12:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   19c14:	7bcb      	ldrb	r3, [r1, #15]
   19c16:	7b02      	ldrb	r2, [r0, #12]
   19c18:	4053      	eors	r3, r2
   19c1a:	7303      	strb	r3, [r0, #12]
   19c1c:	89cb      	ldrh	r3, [r1, #14]
   19c1e:	7b42      	ldrb	r2, [r0, #13]
   19c20:	4053      	eors	r3, r2
   19c22:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   19c24:	68ca      	ldr	r2, [r1, #12]
   19c26:	7b83      	ldrb	r3, [r0, #14]
   19c28:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   19c2c:	7383      	strb	r3, [r0, #14]
   19c2e:	68ca      	ldr	r2, [r1, #12]
   19c30:	7bc3      	ldrb	r3, [r0, #15]
   19c32:	4053      	eors	r3, r2
   19c34:	73c3      	strb	r3, [r0, #15]
}
   19c36:	4770      	bx	lr

00019c38 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   19c38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   19c3a:	7802      	ldrb	r2, [r0, #0]
   19c3c:	f88d 2000 	strb.w	r2, [sp]
   19c40:	7942      	ldrb	r2, [r0, #5]
   19c42:	f88d 2001 	strb.w	r2, [sp, #1]
   19c46:	7a82      	ldrb	r2, [r0, #10]
   19c48:	f88d 2002 	strb.w	r2, [sp, #2]
   19c4c:	7bc2      	ldrb	r2, [r0, #15]
   19c4e:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   19c52:	7902      	ldrb	r2, [r0, #4]
   19c54:	f88d 2004 	strb.w	r2, [sp, #4]
   19c58:	7a42      	ldrb	r2, [r0, #9]
   19c5a:	f88d 2005 	strb.w	r2, [sp, #5]
   19c5e:	7b82      	ldrb	r2, [r0, #14]
   19c60:	f88d 2006 	strb.w	r2, [sp, #6]
   19c64:	78c2      	ldrb	r2, [r0, #3]
   19c66:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   19c6a:	7a02      	ldrb	r2, [r0, #8]
   19c6c:	f88d 2008 	strb.w	r2, [sp, #8]
   19c70:	7b42      	ldrb	r2, [r0, #13]
   19c72:	f88d 2009 	strb.w	r2, [sp, #9]
   19c76:	7882      	ldrb	r2, [r0, #2]
   19c78:	f88d 200a 	strb.w	r2, [sp, #10]
   19c7c:	79c2      	ldrb	r2, [r0, #7]
   19c7e:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   19c82:	7b02      	ldrb	r2, [r0, #12]
   19c84:	f88d 200c 	strb.w	r2, [sp, #12]
   19c88:	7842      	ldrb	r2, [r0, #1]
   19c8a:	7ac3      	ldrb	r3, [r0, #11]
   19c8c:	f88d 200d 	strb.w	r2, [sp, #13]
   19c90:	7982      	ldrb	r2, [r0, #6]
   19c92:	f88d 200e 	strb.w	r2, [sp, #14]
   19c96:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   19c9a:	2310      	movs	r3, #16
   19c9c:	466a      	mov	r2, sp
   19c9e:	4619      	mov	r1, r3
   19ca0:	f7ff ff6d 	bl	19b7e <_copy>
}
   19ca4:	b005      	add	sp, #20
   19ca6:	f85d fb04 	ldr.w	pc, [sp], #4

00019caa <mult_row_column>:
{
   19caa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19cac:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   19cae:	7808      	ldrb	r0, [r1, #0]
{
   19cb0:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   19cb2:	f7ff ff73 	bl	19b9c <_double_byte>
   19cb6:	4605      	mov	r5, r0
   19cb8:	7860      	ldrb	r0, [r4, #1]
   19cba:	f7ff ff6f 	bl	19b9c <_double_byte>
   19cbe:	78a2      	ldrb	r2, [r4, #2]
   19cc0:	7863      	ldrb	r3, [r4, #1]
   19cc2:	4053      	eors	r3, r2
   19cc4:	78e2      	ldrb	r2, [r4, #3]
   19cc6:	4053      	eors	r3, r2
   19cc8:	405d      	eors	r5, r3
   19cca:	4045      	eors	r5, r0
   19ccc:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   19cce:	7860      	ldrb	r0, [r4, #1]
   19cd0:	7827      	ldrb	r7, [r4, #0]
   19cd2:	f7ff ff63 	bl	19b9c <_double_byte>
   19cd6:	4605      	mov	r5, r0
   19cd8:	78a0      	ldrb	r0, [r4, #2]
   19cda:	f7ff ff5f 	bl	19b9c <_double_byte>
   19cde:	78a3      	ldrb	r3, [r4, #2]
   19ce0:	405f      	eors	r7, r3
   19ce2:	78e3      	ldrb	r3, [r4, #3]
   19ce4:	405f      	eors	r7, r3
   19ce6:	407d      	eors	r5, r7
   19ce8:	4045      	eors	r5, r0
   19cea:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   19cec:	78a0      	ldrb	r0, [r4, #2]
   19cee:	7865      	ldrb	r5, [r4, #1]
   19cf0:	7827      	ldrb	r7, [r4, #0]
   19cf2:	f7ff ff53 	bl	19b9c <_double_byte>
   19cf6:	406f      	eors	r7, r5
   19cf8:	4605      	mov	r5, r0
   19cfa:	78e0      	ldrb	r0, [r4, #3]
   19cfc:	f7ff ff4e 	bl	19b9c <_double_byte>
   19d00:	78e3      	ldrb	r3, [r4, #3]
   19d02:	405f      	eors	r7, r3
   19d04:	407d      	eors	r5, r7
   19d06:	4045      	eors	r5, r0
   19d08:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   19d0a:	7820      	ldrb	r0, [r4, #0]
   19d0c:	f7ff ff46 	bl	19b9c <_double_byte>
   19d10:	7863      	ldrb	r3, [r4, #1]
   19d12:	7825      	ldrb	r5, [r4, #0]
   19d14:	405d      	eors	r5, r3
   19d16:	78a3      	ldrb	r3, [r4, #2]
   19d18:	405d      	eors	r5, r3
   19d1a:	4045      	eors	r5, r0
   19d1c:	78e0      	ldrb	r0, [r4, #3]
   19d1e:	f7ff ff3d 	bl	19b9c <_double_byte>
   19d22:	b2ed      	uxtb	r5, r5
   19d24:	4045      	eors	r5, r0
   19d26:	70f5      	strb	r5, [r6, #3]
}
   19d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00019d2a <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   19d2a:	b570      	push	{r4, r5, r6, lr}
   19d2c:	4614      	mov	r4, r2
   19d2e:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   19d30:	4605      	mov	r5, r0
   19d32:	2800      	cmp	r0, #0
   19d34:	d049      	beq.n	19dca <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   19d36:	2900      	cmp	r1, #0
   19d38:	d049      	beq.n	19dce <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   19d3a:	2a00      	cmp	r2, #0
   19d3c:	d049      	beq.n	19dd2 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   19d3e:	2310      	movs	r3, #16
   19d40:	460a      	mov	r2, r1
   19d42:	4668      	mov	r0, sp
   19d44:	4619      	mov	r1, r3
   19d46:	f7ff ff1a 	bl	19b7e <_copy>
	add_round_key(state, s->words);
   19d4a:	4621      	mov	r1, r4
   19d4c:	4668      	mov	r0, sp
   19d4e:	f7ff ff2e 	bl	19bae <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   19d52:	3410      	adds	r4, #16
   19d54:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   19d58:	4668      	mov	r0, sp
   19d5a:	f7e9 fa53 	bl	3204 <sub_bytes>
		shift_rows(state);
   19d5e:	4668      	mov	r0, sp
   19d60:	f7ff ff6a 	bl	19c38 <shift_rows>
	mult_row_column(t, s);
   19d64:	4669      	mov	r1, sp
   19d66:	a804      	add	r0, sp, #16
   19d68:	f7ff ff9f 	bl	19caa <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   19d6c:	a901      	add	r1, sp, #4
   19d6e:	a805      	add	r0, sp, #20
   19d70:	f7ff ff9b 	bl	19caa <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   19d74:	a902      	add	r1, sp, #8
   19d76:	a806      	add	r0, sp, #24
   19d78:	f7ff ff97 	bl	19caa <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   19d7c:	a903      	add	r1, sp, #12
   19d7e:	a807      	add	r0, sp, #28
   19d80:	f7ff ff93 	bl	19caa <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   19d84:	2310      	movs	r3, #16
   19d86:	4619      	mov	r1, r3
   19d88:	eb0d 0203 	add.w	r2, sp, r3
   19d8c:	4668      	mov	r0, sp
   19d8e:	f7ff fef6 	bl	19b7e <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   19d92:	4621      	mov	r1, r4
   19d94:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   19d96:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   19d98:	f7ff ff09 	bl	19bae <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   19d9c:	42a6      	cmp	r6, r4
   19d9e:	d1db      	bne.n	19d58 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   19da0:	f7e9 fa30 	bl	3204 <sub_bytes>
	shift_rows(state);
   19da4:	4668      	mov	r0, sp
   19da6:	f7ff ff47 	bl	19c38 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   19daa:	4631      	mov	r1, r6
   19dac:	4668      	mov	r0, sp
   19dae:	f7ff fefe 	bl	19bae <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   19db2:	2310      	movs	r3, #16
   19db4:	4619      	mov	r1, r3
   19db6:	466a      	mov	r2, sp
   19db8:	4628      	mov	r0, r5
   19dba:	f7ff fee0 	bl	19b7e <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   19dbe:	4668      	mov	r0, sp
   19dc0:	2210      	movs	r2, #16
   19dc2:	2100      	movs	r1, #0
   19dc4:	f7ff fee8 	bl	19b98 <_set>

	return TC_CRYPTO_SUCCESS;
   19dc8:	2001      	movs	r0, #1
}
   19dca:	b008      	add	sp, #32
   19dcc:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   19dce:	4608      	mov	r0, r1
   19dd0:	e7fb      	b.n	19dca <tc_aes_encrypt+0xa0>
   19dd2:	4610      	mov	r0, r2
   19dd4:	e7f9      	b.n	19dca <tc_aes_encrypt+0xa0>

00019dd6 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   19dd6:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   19dd8:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   19dda:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   19ddc:	f912 3b10 	ldrsb.w	r3, [r2], #16
   19de0:	2b00      	cmp	r3, #0
   19de2:	bfb4      	ite	lt
   19de4:	2387      	movlt	r3, #135	; 0x87
   19de6:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   19de8:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   19dec:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   19df0:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   19df2:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   19df6:	d002      	beq.n	19dfe <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   19df8:	7813      	ldrb	r3, [r2, #0]
   19dfa:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   19dfc:	e7f4      	b.n	19de8 <gf_double+0x12>
	}
}
   19dfe:	bd10      	pop	{r4, pc}

00019e00 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   19e00:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   19e02:	b120      	cbz	r0, 19e0e <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   19e04:	2258      	movs	r2, #88	; 0x58
   19e06:	2100      	movs	r1, #0
   19e08:	f7ff fec6 	bl	19b98 <_set>
   19e0c:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   19e0e:	bd08      	pop	{r3, pc}

00019e10 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   19e10:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   19e12:	4604      	mov	r4, r0
   19e14:	b188      	cbz	r0, 19e3a <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   19e16:	2210      	movs	r2, #16
   19e18:	2100      	movs	r1, #0
   19e1a:	f7ff febd 	bl	19b98 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   19e1e:	2210      	movs	r2, #16
   19e20:	f104 0030 	add.w	r0, r4, #48	; 0x30
   19e24:	2100      	movs	r1, #0
   19e26:	f7ff feb7 	bl	19b98 <_set>
	s->leftover_offset = 0;
   19e2a:	2300      	movs	r3, #0
   19e2c:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   19e2e:	2200      	movs	r2, #0
   19e30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   19e34:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   19e38:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   19e3a:	bd10      	pop	{r4, pc}

00019e3c <tc_cmac_setup>:
{
   19e3c:	b570      	push	{r4, r5, r6, lr}
   19e3e:	460d      	mov	r5, r1
   19e40:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   19e42:	4604      	mov	r4, r0
   19e44:	b310      	cbz	r0, 19e8c <tc_cmac_setup+0x50>
   19e46:	b311      	cbz	r1, 19e8e <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   19e48:	2258      	movs	r2, #88	; 0x58
   19e4a:	2100      	movs	r1, #0
   19e4c:	f7ff fea4 	bl	19b98 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   19e50:	4629      	mov	r1, r5
	s->sched = sched;
   19e52:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   19e54:	4630      	mov	r0, r6
   19e56:	f7e9 f9e1 	bl	321c <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   19e5a:	2210      	movs	r2, #16
   19e5c:	2100      	movs	r1, #0
   19e5e:	4620      	mov	r0, r4
   19e60:	f7ff fe9a 	bl	19b98 <_set>
	gf_double (s->K1, s->iv);
   19e64:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   19e68:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   19e6a:	4621      	mov	r1, r4
   19e6c:	4620      	mov	r0, r4
   19e6e:	f7ff ff5c 	bl	19d2a <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   19e72:	4621      	mov	r1, r4
   19e74:	4628      	mov	r0, r5
   19e76:	f7ff ffae 	bl	19dd6 <gf_double>
	gf_double (s->K2, s->K1);
   19e7a:	4629      	mov	r1, r5
   19e7c:	f104 0020 	add.w	r0, r4, #32
   19e80:	f7ff ffa9 	bl	19dd6 <gf_double>
	tc_cmac_init(s);
   19e84:	4620      	mov	r0, r4
   19e86:	f7ff ffc3 	bl	19e10 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   19e8a:	2001      	movs	r0, #1
}
   19e8c:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   19e8e:	4608      	mov	r0, r1
   19e90:	e7fc      	b.n	19e8c <tc_cmac_setup+0x50>

00019e92 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   19e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19e96:	460d      	mov	r5, r1
   19e98:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   19e9a:	4604      	mov	r4, r0
   19e9c:	2800      	cmp	r0, #0
   19e9e:	d061      	beq.n	19f64 <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   19ea0:	b912      	cbnz	r2, 19ea8 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   19ea2:	2001      	movs	r0, #1
}
   19ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   19ea8:	2900      	cmp	r1, #0
   19eaa:	d05b      	beq.n	19f64 <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   19eac:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   19eb0:	ea53 0102 	orrs.w	r1, r3, r2
   19eb4:	d056      	beq.n	19f64 <tc_cmac_update+0xd2>
	s->countdown--;
   19eb6:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   19eb8:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   19ebc:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   19ec0:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   19ec4:	f1b8 0f00 	cmp.w	r8, #0
   19ec8:	d02a      	beq.n	19f20 <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   19eca:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   19ece:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   19ed2:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   19ed4:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   19ed6:	d208      	bcs.n	19eea <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   19ed8:	462a      	mov	r2, r5
   19eda:	4633      	mov	r3, r6
   19edc:	4631      	mov	r1, r6
   19ede:	f7ff fe4e 	bl	19b7e <_copy>
			s->leftover_offset += data_length;
   19ee2:	6c62      	ldr	r2, [r4, #68]	; 0x44
   19ee4:	4432      	add	r2, r6
   19ee6:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   19ee8:	e7db      	b.n	19ea2 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   19eea:	463b      	mov	r3, r7
   19eec:	462a      	mov	r2, r5
   19eee:	4639      	mov	r1, r7
   19ef0:	f7ff fe45 	bl	19b7e <_copy>
		data_length -= remaining_space;
   19ef4:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   19ef6:	2300      	movs	r3, #0
   19ef8:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   19efa:	4446      	add	r6, r8
		data += remaining_space;
   19efc:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   19efe:	1e63      	subs	r3, r4, #1
   19f00:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   19f04:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   19f08:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   19f0c:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   19f0e:	ea82 0200 	eor.w	r2, r2, r0
   19f12:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   19f14:	d1f6      	bne.n	19f04 <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   19f16:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   19f18:	4621      	mov	r1, r4
   19f1a:	4620      	mov	r0, r4
   19f1c:	f7ff ff05 	bl	19d2a <tc_aes_encrypt>
   19f20:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   19f24:	2e10      	cmp	r6, #16
   19f26:	d80a      	bhi.n	19f3e <tc_cmac_update+0xac>
	if (data_length > 0) {
   19f28:	2e00      	cmp	r6, #0
   19f2a:	d0ba      	beq.n	19ea2 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   19f2c:	4633      	mov	r3, r6
   19f2e:	462a      	mov	r2, r5
   19f30:	4631      	mov	r1, r6
   19f32:	f104 0030 	add.w	r0, r4, #48	; 0x30
   19f36:	f7ff fe22 	bl	19b7e <_copy>
		s->leftover_offset = data_length;
   19f3a:	6466      	str	r6, [r4, #68]	; 0x44
   19f3c:	e7b1      	b.n	19ea2 <tc_cmac_update+0x10>
   19f3e:	1e63      	subs	r3, r4, #1
   19f40:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   19f42:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   19f46:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   19f4a:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   19f4c:	ea82 0200 	eor.w	r2, r2, r0
   19f50:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   19f52:	d1f6      	bne.n	19f42 <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   19f54:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   19f56:	4621      	mov	r1, r4
   19f58:	4620      	mov	r0, r4
   19f5a:	f7ff fee6 	bl	19d2a <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   19f5e:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   19f60:	3e10      	subs	r6, #16
   19f62:	e7df      	b.n	19f24 <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   19f64:	2000      	movs	r0, #0
   19f66:	e79d      	b.n	19ea4 <tc_cmac_update+0x12>

00019f68 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   19f68:	b570      	push	{r4, r5, r6, lr}
   19f6a:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   19f6c:	4605      	mov	r5, r0
   19f6e:	b1e8      	cbz	r0, 19fac <tc_cmac_final+0x44>
   19f70:	b369      	cbz	r1, 19fce <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   19f72:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   19f74:	2a10      	cmp	r2, #16
   19f76:	d11a      	bne.n	19fae <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   19f78:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   19f7a:	1e63      	subs	r3, r4, #1
   19f7c:	3901      	subs	r1, #1
   19f7e:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   19f82:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   19f86:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   19f8a:	4072      	eors	r2, r6
   19f8c:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   19f90:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   19f92:	ea82 0206 	eor.w	r2, r2, r6
   19f96:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   19f98:	d1f3      	bne.n	19f82 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   19f9a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   19f9c:	4621      	mov	r1, r4
   19f9e:	4628      	mov	r0, r5
   19fa0:	f7ff fec3 	bl	19d2a <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   19fa4:	4620      	mov	r0, r4
   19fa6:	f7ff ff2b 	bl	19e00 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   19faa:	2001      	movs	r0, #1
}
   19fac:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   19fae:	f102 0030 	add.w	r0, r2, #48	; 0x30
   19fb2:	2100      	movs	r1, #0
   19fb4:	f1c2 0210 	rsb	r2, r2, #16
   19fb8:	4420      	add	r0, r4
   19fba:	f7ff fded 	bl	19b98 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   19fbe:	6c63      	ldr	r3, [r4, #68]	; 0x44
   19fc0:	4423      	add	r3, r4
   19fc2:	2280      	movs	r2, #128	; 0x80
   19fc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   19fc8:	f104 0120 	add.w	r1, r4, #32
   19fcc:	e7d5      	b.n	19f7a <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   19fce:	4608      	mov	r0, r1
   19fd0:	e7ec      	b.n	19fac <tc_cmac_final+0x44>

00019fd2 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   19fd2:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   19fd4:	6800      	ldr	r0, [r0, #0]
   19fd6:	f7e9 b991 	b.w	32fc <z_arm_fatal_error>

00019fda <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   19fda:	2100      	movs	r1, #0
   19fdc:	2001      	movs	r0, #1
   19fde:	f7e9 b98d 	b.w	32fc <z_arm_fatal_error>

00019fe2 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   19fe2:	b508      	push	{r3, lr}
	handler();
   19fe4:	f7e9 fa1a 	bl	341c <z_SysNmiOnReset>
	z_arm_int_exit();
}
   19fe8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   19fec:	f7e9 bafa 	b.w	35e4 <z_arm_exc_exit>

00019ff0 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   19ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19ff4:	4684      	mov	ip, r0
   19ff6:	4688      	mov	r8, r1
	register const char *s = nptr;
   19ff8:	4604      	mov	r4, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   19ffa:	4621      	mov	r1, r4
   19ffc:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1a000:	2b20      	cmp	r3, #32
   1a002:	d0fa      	beq.n	19ffa <strtol+0xa>
   1a004:	f1a3 0009 	sub.w	r0, r3, #9
   1a008:	2804      	cmp	r0, #4
   1a00a:	d9f6      	bls.n	19ffa <strtol+0xa>
	} while (isspace(c));
	if (c == '-') {
   1a00c:	2b2d      	cmp	r3, #45	; 0x2d
   1a00e:	d12d      	bne.n	1a06c <strtol+0x7c>
		neg = 1;
		c = *s++;
   1a010:	784b      	ldrb	r3, [r1, #1]
   1a012:	1c8c      	adds	r4, r1, #2
		neg = 1;
   1a014:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   1a016:	2a00      	cmp	r2, #0
   1a018:	d05a      	beq.n	1a0d0 <strtol+0xe0>
   1a01a:	2a10      	cmp	r2, #16
   1a01c:	d109      	bne.n	1a032 <strtol+0x42>
   1a01e:	2b30      	cmp	r3, #48	; 0x30
   1a020:	d107      	bne.n	1a032 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   1a022:	7823      	ldrb	r3, [r4, #0]
   1a024:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1a028:	2b58      	cmp	r3, #88	; 0x58
   1a02a:	d14c      	bne.n	1a0c6 <strtol+0xd6>
		c = s[1];
   1a02c:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   1a02e:	2210      	movs	r2, #16
		s += 2;
   1a030:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   1a032:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   1a036:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   1a038:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
   1a03a:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   1a03e:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   1a040:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1a044:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1a048:	2d09      	cmp	r5, #9
   1a04a:	d815      	bhi.n	1a078 <strtol+0x88>
			c -= '0';
   1a04c:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   1a04e:	429a      	cmp	r2, r3
   1a050:	dd22      	ble.n	1a098 <strtol+0xa8>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   1a052:	1c75      	adds	r5, r6, #1
   1a054:	d007      	beq.n	1a066 <strtol+0x76>
   1a056:	4570      	cmp	r0, lr
   1a058:	d81b      	bhi.n	1a092 <strtol+0xa2>
   1a05a:	d101      	bne.n	1a060 <strtol+0x70>
   1a05c:	454b      	cmp	r3, r9
   1a05e:	dc18      	bgt.n	1a092 <strtol+0xa2>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   1a060:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   1a064:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
   1a066:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1a06a:	e7eb      	b.n	1a044 <strtol+0x54>
	} else if (c == '+') {
   1a06c:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   1a06e:	bf04      	itt	eq
   1a070:	784b      	ldrbeq	r3, [r1, #1]
   1a072:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   1a074:	2100      	movs	r1, #0
   1a076:	e7ce      	b.n	1a016 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1a078:	f043 0520 	orr.w	r5, r3, #32
   1a07c:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   1a07e:	2d19      	cmp	r5, #25
   1a080:	d80a      	bhi.n	1a098 <strtol+0xa8>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1a082:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1a086:	2d1a      	cmp	r5, #26
   1a088:	bf34      	ite	cc
   1a08a:	2537      	movcc	r5, #55	; 0x37
   1a08c:	2557      	movcs	r5, #87	; 0x57
   1a08e:	1b5b      	subs	r3, r3, r5
   1a090:	e7dd      	b.n	1a04e <strtol+0x5e>
			any = -1;
   1a092:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1a096:	e7e6      	b.n	1a066 <strtol+0x76>
		}
	}

	if (any < 0) {
   1a098:	1c73      	adds	r3, r6, #1
   1a09a:	d109      	bne.n	1a0b0 <strtol+0xc0>
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   1a09c:	f7fd f97c 	bl	17398 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   1a0a0:	2322      	movs	r3, #34	; 0x22
   1a0a2:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   1a0a4:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   1a0a6:	f1b8 0f00 	cmp.w	r8, #0
   1a0aa:	d107      	bne.n	1a0bc <strtol+0xcc>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1a0ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   1a0b0:	b101      	cbz	r1, 1a0b4 <strtol+0xc4>
		acc = -acc;
   1a0b2:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1a0b4:	f1b8 0f00 	cmp.w	r8, #0
   1a0b8:	d0f8      	beq.n	1a0ac <strtol+0xbc>
		*endptr = (char *)(any ? s - 1 : nptr);
   1a0ba:	b10e      	cbz	r6, 1a0c0 <strtol+0xd0>
   1a0bc:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   1a0c0:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   1a0c4:	e7f2      	b.n	1a0ac <strtol+0xbc>
	if (base == 0) {
   1a0c6:	2330      	movs	r3, #48	; 0x30
   1a0c8:	2a00      	cmp	r2, #0
   1a0ca:	d1b2      	bne.n	1a032 <strtol+0x42>
		base = c == '0' ? 8 : 10;
   1a0cc:	2208      	movs	r2, #8
   1a0ce:	e7b0      	b.n	1a032 <strtol+0x42>
	if ((base == 0 || base == 16) &&
   1a0d0:	2b30      	cmp	r3, #48	; 0x30
   1a0d2:	d0a6      	beq.n	1a022 <strtol+0x32>
		base = c == '0' ? 8 : 10;
   1a0d4:	220a      	movs	r2, #10
   1a0d6:	e7ac      	b.n	1a032 <strtol+0x42>

0001a0d8 <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   1a0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a0dc:	4607      	mov	r7, r0
   1a0de:	4688      	mov	r8, r1
	register const char *s = nptr;
   1a0e0:	4604      	mov	r4, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   1a0e2:	4621      	mov	r1, r4
   1a0e4:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1a0e8:	2b20      	cmp	r3, #32
   1a0ea:	d0fa      	beq.n	1a0e2 <strtoul+0xa>
   1a0ec:	f1a3 0009 	sub.w	r0, r3, #9
   1a0f0:	2804      	cmp	r0, #4
   1a0f2:	d9f6      	bls.n	1a0e2 <strtoul+0xa>
	} while (isspace(c));
	if (c == '-') {
   1a0f4:	2b2d      	cmp	r3, #45	; 0x2d
   1a0f6:	d12f      	bne.n	1a158 <strtoul+0x80>
		neg = 1;
		c = *s++;
   1a0f8:	784b      	ldrb	r3, [r1, #1]
   1a0fa:	1c8c      	adds	r4, r1, #2
		neg = 1;
   1a0fc:	f04f 0c01 	mov.w	ip, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   1a100:	2a00      	cmp	r2, #0
   1a102:	d05e      	beq.n	1a1c2 <strtoul+0xea>
   1a104:	2a10      	cmp	r2, #16
   1a106:	d109      	bne.n	1a11c <strtoul+0x44>
   1a108:	2b30      	cmp	r3, #48	; 0x30
   1a10a:	d107      	bne.n	1a11c <strtoul+0x44>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   1a10c:	7823      	ldrb	r3, [r4, #0]
   1a10e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1a112:	2b58      	cmp	r3, #88	; 0x58
   1a114:	d150      	bne.n	1a1b8 <strtoul+0xe0>
		c = s[1];
   1a116:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   1a118:	2210      	movs	r2, #16
		s += 2;
   1a11a:	3402      	adds	r4, #2

	if (base == 0) {
		base = c == '0' ? 8 : 10;
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   1a11c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   1a120:	2600      	movs	r6, #0
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   1a122:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   1a126:	fb02 fe01 	mul.w	lr, r2, r1
   1a12a:	ea6f 0e0e 	mvn.w	lr, lr
	for (acc = 0, any = 0;; c = *s++) {
   1a12e:	4630      	mov	r0, r6
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1a130:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1a134:	2d09      	cmp	r5, #9
   1a136:	d816      	bhi.n	1a166 <strtoul+0x8e>
			c -= '0';
   1a138:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   1a13a:	429a      	cmp	r2, r3
   1a13c:	dd23      	ble.n	1a186 <strtoul+0xae>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   1a13e:	2e00      	cmp	r6, #0
   1a140:	db1e      	blt.n	1a180 <strtoul+0xa8>
   1a142:	4288      	cmp	r0, r1
   1a144:	d81c      	bhi.n	1a180 <strtoul+0xa8>
   1a146:	d101      	bne.n	1a14c <strtoul+0x74>
   1a148:	4573      	cmp	r3, lr
   1a14a:	dc19      	bgt.n	1a180 <strtoul+0xa8>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   1a14c:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   1a150:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
   1a152:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1a156:	e7eb      	b.n	1a130 <strtoul+0x58>
	} else if (c == '+') {
   1a158:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   1a15a:	bf04      	itt	eq
   1a15c:	784b      	ldrbeq	r3, [r1, #1]
   1a15e:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   1a160:	f04f 0c00 	mov.w	ip, #0
   1a164:	e7cc      	b.n	1a100 <strtoul+0x28>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1a166:	f043 0520 	orr.w	r5, r3, #32
   1a16a:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   1a16c:	2d19      	cmp	r5, #25
   1a16e:	d80a      	bhi.n	1a186 <strtoul+0xae>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1a170:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1a174:	2d1a      	cmp	r5, #26
   1a176:	bf34      	ite	cc
   1a178:	2537      	movcc	r5, #55	; 0x37
   1a17a:	2557      	movcs	r5, #87	; 0x57
   1a17c:	1b5b      	subs	r3, r3, r5
   1a17e:	e7dc      	b.n	1a13a <strtoul+0x62>
			any = -1;
   1a180:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1a184:	e7e5      	b.n	1a152 <strtoul+0x7a>
		}
	}
	if (any < 0) {
   1a186:	2e00      	cmp	r6, #0
   1a188:	da0a      	bge.n	1a1a0 <strtoul+0xc8>
   1a18a:	f7fd f905 	bl	17398 <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   1a18e:	2322      	movs	r3, #34	; 0x22
   1a190:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   1a192:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   1a196:	f1b8 0f00 	cmp.w	r8, #0
   1a19a:	d109      	bne.n	1a1b0 <strtoul+0xd8>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1a19c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   1a1a0:	f1bc 0f00 	cmp.w	ip, #0
   1a1a4:	d000      	beq.n	1a1a8 <strtoul+0xd0>
		acc = -acc;
   1a1a6:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1a1a8:	f1b8 0f00 	cmp.w	r8, #0
   1a1ac:	d0f6      	beq.n	1a19c <strtoul+0xc4>
		*endptr = (char *)(any ? s - 1 : nptr);
   1a1ae:	b106      	cbz	r6, 1a1b2 <strtoul+0xda>
   1a1b0:	1e67      	subs	r7, r4, #1
   1a1b2:	f8c8 7000 	str.w	r7, [r8]
	return acc;
   1a1b6:	e7f1      	b.n	1a19c <strtoul+0xc4>
	if (base == 0) {
   1a1b8:	2330      	movs	r3, #48	; 0x30
   1a1ba:	2a00      	cmp	r2, #0
   1a1bc:	d1ae      	bne.n	1a11c <strtoul+0x44>
		base = c == '0' ? 8 : 10;
   1a1be:	2208      	movs	r2, #8
   1a1c0:	e7ac      	b.n	1a11c <strtoul+0x44>
	if ((base == 0 || base == 16) &&
   1a1c2:	2b30      	cmp	r3, #48	; 0x30
   1a1c4:	d0a2      	beq.n	1a10c <strtoul+0x34>
		base = c == '0' ? 8 : 10;
   1a1c6:	220a      	movs	r2, #10
   1a1c8:	e7a8      	b.n	1a11c <strtoul+0x44>

0001a1ca <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1a1ca:	3901      	subs	r1, #1
   1a1cc:	4603      	mov	r3, r0
   1a1ce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1a1d2:	b90a      	cbnz	r2, 1a1d8 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1a1d4:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1a1d6:	4770      	bx	lr
		*d = *s;
   1a1d8:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1a1dc:	e7f7      	b.n	1a1ce <strcpy+0x4>

0001a1de <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   1a1de:	b570      	push	{r4, r5, r6, lr}
   1a1e0:	4605      	mov	r5, r0
   1a1e2:	462b      	mov	r3, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1a1e4:	b142      	cbz	r2, 1a1f8 <strncpy+0x1a>
   1a1e6:	f811 4b01 	ldrb.w	r4, [r1], #1
		*d = *s;
		s++;
		d++;
		n--;
   1a1ea:	1e56      	subs	r6, r2, #1
	while ((n > 0) && *s != '\0') {
   1a1ec:	b92c      	cbnz	r4, 1a1fa <strncpy+0x1c>
   1a1ee:	442a      	add	r2, r5
	}

	while (n > 0) {
		*d = '\0';
   1a1f0:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
   1a1f4:	429a      	cmp	r2, r3
   1a1f6:	d1fb      	bne.n	1a1f0 <strncpy+0x12>
		d++;
		n--;
	}

	return dest;
}
   1a1f8:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   1a1fa:	f805 4b01 	strb.w	r4, [r5], #1
		n--;
   1a1fe:	4632      	mov	r2, r6
   1a200:	e7ef      	b.n	1a1e2 <strncpy+0x4>

0001a202 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1a202:	4603      	mov	r3, r0
	size_t n = 0;
   1a204:	2000      	movs	r0, #0

	while (*s != '\0') {
   1a206:	5c1a      	ldrb	r2, [r3, r0]
   1a208:	b902      	cbnz	r2, 1a20c <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1a20a:	4770      	bx	lr
		n++;
   1a20c:	3001      	adds	r0, #1
   1a20e:	e7fa      	b.n	1a206 <strlen+0x4>

0001a210 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   1a210:	4603      	mov	r3, r0
	size_t n = 0;
   1a212:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   1a214:	5c1a      	ldrb	r2, [r3, r0]
   1a216:	b10a      	cbz	r2, 1a21c <strnlen+0xc>
   1a218:	4288      	cmp	r0, r1
   1a21a:	d100      	bne.n	1a21e <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   1a21c:	4770      	bx	lr
		n++;
   1a21e:	3001      	adds	r0, #1
   1a220:	e7f8      	b.n	1a214 <strnlen+0x4>

0001a222 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1a222:	1e43      	subs	r3, r0, #1
   1a224:	3901      	subs	r1, #1
   1a226:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1a22a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1a22e:	4282      	cmp	r2, r0
   1a230:	d101      	bne.n	1a236 <strcmp+0x14>
   1a232:	2a00      	cmp	r2, #0
   1a234:	d1f7      	bne.n	1a226 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1a236:	1a10      	subs	r0, r2, r0
   1a238:	4770      	bx	lr

0001a23a <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   1a23a:	b510      	push	{r4, lr}
   1a23c:	3901      	subs	r1, #1
   1a23e:	4402      	add	r2, r0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1a240:	4282      	cmp	r2, r0
   1a242:	d009      	beq.n	1a258 <strncmp+0x1e>
   1a244:	7803      	ldrb	r3, [r0, #0]
   1a246:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1a24a:	42a3      	cmp	r3, r4
   1a24c:	d100      	bne.n	1a250 <strncmp+0x16>
   1a24e:	b90b      	cbnz	r3, 1a254 <strncmp+0x1a>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   1a250:	1b18      	subs	r0, r3, r4
   1a252:	e002      	b.n	1a25a <strncmp+0x20>
		s1++;
   1a254:	3001      	adds	r0, #1
		n--;
   1a256:	e7f3      	b.n	1a240 <strncmp+0x6>
	return (n == 0) ? 0 : (*s1 - *s2);
   1a258:	2000      	movs	r0, #0
}
   1a25a:	bd10      	pop	{r4, pc}

0001a25c <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1a25c:	b510      	push	{r4, lr}
   1a25e:	4603      	mov	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1a260:	b15a      	cbz	r2, 1a27a <memcmp+0x1e>
   1a262:	3901      	subs	r1, #1
   1a264:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1a266:	f813 0b01 	ldrb.w	r0, [r3], #1
   1a26a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1a26e:	42a3      	cmp	r3, r4
   1a270:	d001      	beq.n	1a276 <memcmp+0x1a>
   1a272:	4290      	cmp	r0, r2
   1a274:	d0f7      	beq.n	1a266 <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1a276:	1a80      	subs	r0, r0, r2
}
   1a278:	bd10      	pop	{r4, pc}
		return 0;
   1a27a:	4610      	mov	r0, r2
   1a27c:	e7fc      	b.n	1a278 <memcmp+0x1c>

0001a27e <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1a27e:	b510      	push	{r4, lr}
   1a280:	1e43      	subs	r3, r0, #1
   1a282:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   1a284:	4291      	cmp	r1, r2
   1a286:	d100      	bne.n	1a28a <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1a288:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   1a28a:	f811 4b01 	ldrb.w	r4, [r1], #1
   1a28e:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1a292:	e7f7      	b.n	1a284 <memcpy+0x6>

0001a294 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   1a294:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   1a296:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   1a298:	4603      	mov	r3, r0
	while (n > 0) {
   1a29a:	4293      	cmp	r3, r2
   1a29c:	d100      	bne.n	1a2a0 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1a29e:	4770      	bx	lr
		*(d_byte++) = c_byte;
   1a2a0:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1a2a4:	e7f9      	b.n	1a29a <memset+0x6>

0001a2a6 <_stdout_hook_default>:
}
   1a2a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a2aa:	4770      	bx	lr

0001a2ac <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   1a2ac:	b084      	sub	sp, #16
   1a2ae:	ab04      	add	r3, sp, #16
   1a2b0:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   1a2b4:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1a2b8:	2b06      	cmp	r3, #6
   1a2ba:	d108      	bne.n	1a2ce <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   1a2bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1a2c0:	2201      	movs	r2, #1
   1a2c2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1a2c6:	f3bf 8f4f 	dsb	sy
        __WFE();
   1a2ca:	bf20      	wfe
    while (true)
   1a2cc:	e7fd      	b.n	1a2ca <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   1a2ce:	b004      	add	sp, #16
   1a2d0:	4770      	bx	lr

0001a2d2 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   1a2d2:	b084      	sub	sp, #16
   1a2d4:	ab04      	add	r3, sp, #16
   1a2d6:	e903 0007 	stmdb	r3, {r0, r1, r2}
   1a2da:	2300      	movs	r3, #0
   1a2dc:	f383 8811 	msr	BASEPRI, r3
   1a2e0:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1a2e4:	b004      	add	sp, #16
   1a2e6:	4770      	bx	lr

0001a2e8 <send_cmd_status>:
{
   1a2e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   1a2ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   1a2f0:	4606      	mov	r6, r0
   1a2f2:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   1a2f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a2f8:	2100      	movs	r1, #0
   1a2fa:	200f      	movs	r0, #15
   1a2fc:	f7e9 ff80 	bl	4200 <bt_buf_get_evt>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1a300:	2701      	movs	r7, #1
	return net_buf_simple_add(&buf->b, len);
   1a302:	f100 0808 	add.w	r8, r0, #8
   1a306:	4604      	mov	r4, r0
   1a308:	7507      	strb	r7, [r0, #20]
   1a30a:	2102      	movs	r1, #2
   1a30c:	4640      	mov	r0, r8
   1a30e:	f003 fc7c 	bl	1dc0a <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1a312:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   1a314:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1a316:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   1a318:	7041      	strb	r1, [r0, #1]
   1a31a:	4640      	mov	r0, r8
   1a31c:	f003 fc75 	bl	1dc0a <net_buf_simple_add>
	evt->ncmd = 1U;
   1a320:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   1a322:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   1a324:	8046      	strh	r6, [r0, #2]
		bt_recv_prio(buf);
   1a326:	4620      	mov	r0, r4
}
   1a328:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv_prio(buf);
   1a32c:	f7ea be42 	b.w	4fb4 <bt_recv_prio>

0001a330 <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   1a330:	f101 0320 	add.w	r3, r1, #32
   1a334:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   1a336:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1a33a:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   1a33e:	428b      	cmp	r3, r1
   1a340:	d1f9      	bne.n	1a336 <sys_memcpy_swap.constprop.0+0x6>
}
   1a342:	4770      	bx	lr

0001a344 <bt_hci_ecc_supported_commands>:
void bt_hci_ecc_supported_commands(uint8_t *supported_commands)
{
	/* LE Read Local P-256 Public Key */
	supported_commands[34] |= BIT(1);
	/* LE Generate DH Key v1 */
	supported_commands[34] |= BIT(2);
   1a344:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   1a348:	f043 0306 	orr.w	r3, r3, #6
   1a34c:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	/* LE Generate DH Key v2 */
	supported_commands[41] |= BIT(2);
   1a350:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   1a354:	f043 0304 	orr.w	r3, r3, #4
   1a358:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
}
   1a35c:	4770      	bx	lr

0001a35e <bt_settings_decode_key>:
{
   1a35e:	b570      	push	{r4, r5, r6, lr}
   1a360:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   1a362:	2100      	movs	r1, #0
{
   1a364:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   1a366:	f7ff fbef 	bl	19b48 <settings_name_next>
   1a36a:	280d      	cmp	r0, #13
   1a36c:	d118      	bne.n	1a3a0 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   1a36e:	7b23      	ldrb	r3, [r4, #12]
   1a370:	2b30      	cmp	r3, #48	; 0x30
   1a372:	d111      	bne.n	1a398 <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   1a374:	2300      	movs	r3, #0
   1a376:	702b      	strb	r3, [r5, #0]
   1a378:	f104 060c 	add.w	r6, r4, #12
   1a37c:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   1a37e:	462a      	mov	r2, r5
   1a380:	4620      	mov	r0, r4
   1a382:	2301      	movs	r3, #1
   1a384:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   1a386:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   1a388:	f7fe fb9f 	bl	18aca <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   1a38c:	42b4      	cmp	r4, r6
   1a38e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   1a392:	d1f4      	bne.n	1a37e <bt_settings_decode_key+0x20>
	return 0;
   1a394:	2000      	movs	r0, #0
}
   1a396:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   1a398:	2b31      	cmp	r3, #49	; 0x31
   1a39a:	d101      	bne.n	1a3a0 <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   1a39c:	2301      	movs	r3, #1
   1a39e:	e7ea      	b.n	1a376 <bt_settings_decode_key+0x18>
		return -EINVAL;
   1a3a0:	f06f 0015 	mvn.w	r0, #21
   1a3a4:	e7f7      	b.n	1a396 <bt_settings_decode_key+0x38>

0001a3a6 <xor16>:
#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_HCI_CORE)
#define LOG_MODULE_NAME bt_aes_ccm
#include "common/log.h"

static inline void xor16(uint8_t *dst, const uint8_t *a, const uint8_t *b)
{
   1a3a6:	b510      	push	{r4, lr}
	dst[0] = a[0] ^ b[0];
   1a3a8:	780b      	ldrb	r3, [r1, #0]
   1a3aa:	7814      	ldrb	r4, [r2, #0]
   1a3ac:	4063      	eors	r3, r4
   1a3ae:	7003      	strb	r3, [r0, #0]
	dst[1] = a[1] ^ b[1];
   1a3b0:	7854      	ldrb	r4, [r2, #1]
   1a3b2:	784b      	ldrb	r3, [r1, #1]
   1a3b4:	4063      	eors	r3, r4
   1a3b6:	7043      	strb	r3, [r0, #1]
	dst[2] = a[2] ^ b[2];
   1a3b8:	7894      	ldrb	r4, [r2, #2]
   1a3ba:	788b      	ldrb	r3, [r1, #2]
   1a3bc:	4063      	eors	r3, r4
   1a3be:	7083      	strb	r3, [r0, #2]
	dst[3] = a[3] ^ b[3];
   1a3c0:	78d4      	ldrb	r4, [r2, #3]
   1a3c2:	78cb      	ldrb	r3, [r1, #3]
   1a3c4:	4063      	eors	r3, r4
   1a3c6:	70c3      	strb	r3, [r0, #3]
	dst[4] = a[4] ^ b[4];
   1a3c8:	7914      	ldrb	r4, [r2, #4]
   1a3ca:	790b      	ldrb	r3, [r1, #4]
   1a3cc:	4063      	eors	r3, r4
   1a3ce:	7103      	strb	r3, [r0, #4]
	dst[5] = a[5] ^ b[5];
   1a3d0:	7954      	ldrb	r4, [r2, #5]
   1a3d2:	794b      	ldrb	r3, [r1, #5]
   1a3d4:	4063      	eors	r3, r4
   1a3d6:	7143      	strb	r3, [r0, #5]
	dst[6] = a[6] ^ b[6];
   1a3d8:	7994      	ldrb	r4, [r2, #6]
   1a3da:	798b      	ldrb	r3, [r1, #6]
   1a3dc:	4063      	eors	r3, r4
   1a3de:	7183      	strb	r3, [r0, #6]
	dst[7] = a[7] ^ b[7];
   1a3e0:	79d4      	ldrb	r4, [r2, #7]
   1a3e2:	79cb      	ldrb	r3, [r1, #7]
   1a3e4:	4063      	eors	r3, r4
   1a3e6:	71c3      	strb	r3, [r0, #7]
	dst[8] = a[8] ^ b[8];
   1a3e8:	7a14      	ldrb	r4, [r2, #8]
   1a3ea:	7a0b      	ldrb	r3, [r1, #8]
   1a3ec:	4063      	eors	r3, r4
   1a3ee:	7203      	strb	r3, [r0, #8]
	dst[9] = a[9] ^ b[9];
   1a3f0:	7a54      	ldrb	r4, [r2, #9]
   1a3f2:	7a4b      	ldrb	r3, [r1, #9]
   1a3f4:	4063      	eors	r3, r4
   1a3f6:	7243      	strb	r3, [r0, #9]
	dst[10] = a[10] ^ b[10];
   1a3f8:	7a8b      	ldrb	r3, [r1, #10]
   1a3fa:	7a94      	ldrb	r4, [r2, #10]
   1a3fc:	4063      	eors	r3, r4
   1a3fe:	7283      	strb	r3, [r0, #10]
	dst[11] = a[11] ^ b[11];
   1a400:	7ad4      	ldrb	r4, [r2, #11]
   1a402:	7acb      	ldrb	r3, [r1, #11]
   1a404:	4063      	eors	r3, r4
   1a406:	72c3      	strb	r3, [r0, #11]
	dst[12] = a[12] ^ b[12];
   1a408:	7b14      	ldrb	r4, [r2, #12]
   1a40a:	7b0b      	ldrb	r3, [r1, #12]
   1a40c:	4063      	eors	r3, r4
   1a40e:	7303      	strb	r3, [r0, #12]
	dst[13] = a[13] ^ b[13];
   1a410:	7b54      	ldrb	r4, [r2, #13]
   1a412:	7b4b      	ldrb	r3, [r1, #13]
   1a414:	4063      	eors	r3, r4
   1a416:	7343      	strb	r3, [r0, #13]
	dst[14] = a[14] ^ b[14];
   1a418:	7b94      	ldrb	r4, [r2, #14]
   1a41a:	7b8b      	ldrb	r3, [r1, #14]
   1a41c:	4063      	eors	r3, r4
   1a41e:	7383      	strb	r3, [r0, #14]
	dst[15] = a[15] ^ b[15];
   1a420:	7bcb      	ldrb	r3, [r1, #15]
   1a422:	7bd2      	ldrb	r2, [r2, #15]
   1a424:	4053      	eors	r3, r2
   1a426:	73c3      	strb	r3, [r0, #15]
}
   1a428:	bd10      	pop	{r4, pc}

0001a42a <ccm_crypt.isra.0>:
	}

	return 0;
}

static int ccm_crypt(const uint8_t key[16], const uint8_t nonce[13],
   1a42a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a42e:	b08b      	sub	sp, #44	; 0x2c
   1a430:	4607      	mov	r7, r0
   1a432:	9d14      	ldr	r5, [sp, #80]	; 0x50
   1a434:	4690      	mov	r8, r2
	uint16_t last_blk, blk_cnt;
	size_t i, j;
	int err;

	last_blk = msg_len % 16;
	blk_cnt = (msg_len + 15) / 16;
   1a436:	f105 060f 	add.w	r6, r5, #15
	if (!last_blk) {
		last_blk = 16U;
	}

	a_i[0] = 0x01;
   1a43a:	2401      	movs	r4, #1
		last_blk = 16U;
   1a43c:	f015 050f 	ands.w	r5, r5, #15
	memcpy(&a_i[1], nonce, 13);
   1a440:	f04f 020d 	mov.w	r2, #13
   1a444:	f10d 0009 	add.w	r0, sp, #9
static int ccm_crypt(const uint8_t key[16], const uint8_t nonce[13],
   1a448:	4699      	mov	r9, r3
	blk_cnt = (msg_len + 15) / 16;
   1a44a:	ea4f 1616 	mov.w	r6, r6, lsr #4
		last_blk = 16U;
   1a44e:	bf08      	it	eq
   1a450:	2510      	moveq	r5, #16
	a_i[0] = 0x01;
   1a452:	f88d 4008 	strb.w	r4, [sp, #8]
	memcpy(&a_i[1], nonce, 13);
   1a456:	f7ff ff12 	bl	1a27e <memcpy>

	for (j = 0; j < blk_cnt; j++) {
   1a45a:	b2b6      	uxth	r6, r6
   1a45c:	f04f 0b00 	mov.w	fp, #0
		if (err) {
			return err;
		}

		/* Encrypted = Payload[0-15] ^ C_1 */
		if (j < blk_cnt - 1) {
   1a460:	f106 3aff 	add.w	sl, r6, #4294967295	; 0xffffffff
	for (j = 0; j < blk_cnt; j++) {
   1a464:	1e63      	subs	r3, r4, #1
   1a466:	429e      	cmp	r6, r3
   1a468:	d802      	bhi.n	1a470 <ccm_crypt.isra.0+0x46>
					in_msg[(j * 16) + i] ^ s_i[i];
			}
		}
	}
	return 0;
}
   1a46a:	b00b      	add	sp, #44	; 0x2c
   1a46c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	dst[0] = val >> 8;
   1a470:	f3c4 2207 	ubfx	r2, r4, #8, #8
   1a474:	f88d 2016 	strb.w	r2, [sp, #22]
		err = bt_encrypt_be(key, a_i, s_i);
   1a478:	a902      	add	r1, sp, #8
   1a47a:	aa06      	add	r2, sp, #24
   1a47c:	4638      	mov	r0, r7
   1a47e:	9301      	str	r3, [sp, #4]
	dst[1] = val;
   1a480:	f88d 4017 	strb.w	r4, [sp, #23]
   1a484:	f002 fced 	bl	1ce62 <bt_encrypt_be>
		if (err) {
   1a488:	4601      	mov	r1, r0
   1a48a:	2800      	cmp	r0, #0
   1a48c:	d1ed      	bne.n	1a46a <ccm_crypt.isra.0+0x40>
		if (j < blk_cnt - 1) {
   1a48e:	9b01      	ldr	r3, [sp, #4]
   1a490:	459a      	cmp	sl, r3
   1a492:	eb08 020b 	add.w	r2, r8, fp
   1a496:	eb09 000b 	add.w	r0, r9, fp
   1a49a:	d906      	bls.n	1a4aa <ccm_crypt.isra.0+0x80>
			xor16(&out_msg[j * 16], s_i, &in_msg[j * 16]);
   1a49c:	a906      	add	r1, sp, #24
   1a49e:	f7ff ff82 	bl	1a3a6 <xor16>
	for (j = 0; j < blk_cnt; j++) {
   1a4a2:	3401      	adds	r4, #1
   1a4a4:	f10b 0b10 	add.w	fp, fp, #16
   1a4a8:	e7dc      	b.n	1a464 <ccm_crypt.isra.0+0x3a>
   1a4aa:	f10d 0c18 	add.w	ip, sp, #24
					in_msg[(j * 16) + i] ^ s_i[i];
   1a4ae:	f812 3b01 	ldrb.w	r3, [r2], #1
   1a4b2:	f81c eb01 	ldrb.w	lr, [ip], #1
			for (i = 0; i < last_blk; i++) {
   1a4b6:	3101      	adds	r1, #1
				out_msg[(j * 16) + i] =
   1a4b8:	ea83 030e 	eor.w	r3, r3, lr
			for (i = 0; i < last_blk; i++) {
   1a4bc:	42a9      	cmp	r1, r5
				out_msg[(j * 16) + i] =
   1a4be:	f800 3b01 	strb.w	r3, [r0], #1
			for (i = 0; i < last_blk; i++) {
   1a4c2:	d3f4      	bcc.n	1a4ae <ccm_crypt.isra.0+0x84>
   1a4c4:	e7ed      	b.n	1a4a2 <ccm_crypt.isra.0+0x78>

0001a4c6 <ccm_auth.isra.0>:
static int ccm_auth(const uint8_t key[16], uint8_t nonce[13],
   1a4c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		last_blk = 16U;
   1a4ca:	f013 090f 	ands.w	r9, r3, #15
static int ccm_auth(const uint8_t key[16], uint8_t nonce[13],
   1a4ce:	b08d      	sub	sp, #52	; 0x34
   1a4d0:	461f      	mov	r7, r3
	b[0] = 0x01;
   1a4d2:	f04f 0301 	mov.w	r3, #1
static int ccm_auth(const uint8_t key[16], uint8_t nonce[13],
   1a4d6:	4680      	mov	r8, r0
   1a4d8:	4616      	mov	r6, r2
	memcpy(b + 1, nonce, 13);
   1a4da:	eb0d 0003 	add.w	r0, sp, r3
   1a4de:	f04f 020d 	mov.w	r2, #13
   1a4e2:	46ea      	mov	sl, sp
		last_blk = 16U;
   1a4e4:	bf08      	it	eq
   1a4e6:	f04f 0910 	moveq.w	r9, #16
	b[0] = 0x01;
   1a4ea:	f88d 3000 	strb.w	r3, [sp]
static int ccm_auth(const uint8_t key[16], uint8_t nonce[13],
   1a4ee:	9c17      	ldr	r4, [sp, #92]	; 0x5c
	memcpy(b + 1, nonce, 13);
   1a4f0:	f7ff fec5 	bl	1a27e <memcpy>
	dst[0] = val >> 8;
   1a4f4:	2300      	movs	r3, #0
	err = bt_encrypt_be(key, b, s0);
   1a4f6:	aa08      	add	r2, sp, #32
   1a4f8:	4651      	mov	r1, sl
   1a4fa:	4640      	mov	r0, r8
   1a4fc:	f88d 300e 	strb.w	r3, [sp, #14]
	dst[1] = val;
   1a500:	f88d 300f 	strb.w	r3, [sp, #15]
   1a504:	f002 fcad 	bl	1ce62 <bt_encrypt_be>
	if (err) {
   1a508:	2800      	cmp	r0, #0
   1a50a:	f040 809a 	bne.w	1a642 <ccm_auth.isra.0+0x17c>
	b[0] = (((mic_size - 2) / 2) << 3) | ((!!aad_len) << 6) | 0x01;
   1a50e:	9b19      	ldr	r3, [sp, #100]	; 0x64
	dst[0] = val >> 8;
   1a510:	f88d 000e 	strb.w	r0, [sp, #14]
   1a514:	3b02      	subs	r3, #2
   1a516:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   1a51a:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1a51e:	bf14      	ite	ne
   1a520:	2240      	movne	r2, #64	; 0x40
   1a522:	2200      	moveq	r2, #0
   1a524:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
   1a528:	4313      	orrs	r3, r2
   1a52a:	f043 0301 	orr.w	r3, r3, #1
	err = bt_encrypt_be(key, b, X0);
   1a52e:	aa04      	add	r2, sp, #16
   1a530:	4651      	mov	r1, sl
   1a532:	4640      	mov	r0, r8
	b[0] = (((mic_size - 2) / 2) << 3) | ((!!aad_len) << 6) | 0x01;
   1a534:	f88d 3000 	strb.w	r3, [sp]
	dst[1] = val;
   1a538:	f88d 700f 	strb.w	r7, [sp, #15]
	err = bt_encrypt_be(key, b, X0);
   1a53c:	f002 fc91 	bl	1ce62 <bt_encrypt_be>
	if (err) {
   1a540:	4683      	mov	fp, r0
   1a542:	bbb0      	cbnz	r0, 1a5b2 <ccm_auth.isra.0+0xec>
	if (aad_len) {
   1a544:	b3ac      	cbz	r4, 1a5b2 <ccm_auth.isra.0+0xec>
			b[i] = X0[i] ^ b[i];
   1a546:	f89d 3010 	ldrb.w	r3, [sp, #16]
   1a54a:	f88d 3000 	strb.w	r3, [sp]
   1a54e:	f89d 3011 	ldrb.w	r3, [sp, #17]
   1a552:	4063      	eors	r3, r4
		aad_len += sizeof(uint16_t);
   1a554:	3402      	adds	r4, #2
			b[i] = X0[i] ^ b[i];
   1a556:	f88d 3001 	strb.w	r3, [sp, #1]
		aad_len += sizeof(uint16_t);
   1a55a:	b2e4      	uxtb	r4, r4
		while (aad_len > 16) {
   1a55c:	2502      	movs	r5, #2
				b[i] = X0[i] ^ aad[j];
   1a55e:	4651      	mov	r1, sl
   1a560:	aa04      	add	r2, sp, #16
		while (aad_len > 16) {
   1a562:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1a564:	2c10      	cmp	r4, #16
   1a566:	445b      	add	r3, fp
   1a568:	d80a      	bhi.n	1a580 <ccm_auth.isra.0+0xba>
   1a56a:	aa04      	add	r2, sp, #16
		for (; i < aad_len; i++, j++) {
   1a56c:	42a5      	cmp	r5, r4
   1a56e:	4621      	mov	r1, r4
   1a570:	db38      	blt.n	1a5e4 <ccm_auth.isra.0+0x11e>
		for (i = aad_len; i < 16; i++) {
   1a572:	290f      	cmp	r1, #15
   1a574:	dd3e      	ble.n	1a5f4 <ccm_auth.isra.0+0x12e>
		err = bt_encrypt_be(key, b, X0);
   1a576:	4669      	mov	r1, sp
   1a578:	4640      	mov	r0, r8
   1a57a:	f002 fc72 	bl	1ce62 <bt_encrypt_be>
		if (err) {
   1a57e:	e018      	b.n	1a5b2 <ccm_auth.isra.0+0xec>
		while (aad_len > 16) {
   1a580:	4628      	mov	r0, r5
				b[i] = X0[i] ^ aad[j];
   1a582:	f810 e002 	ldrb.w	lr, [r0, r2]
   1a586:	f813 cb01 	ldrb.w	ip, [r3], #1
   1a58a:	ea8c 0c0e 	eor.w	ip, ip, lr
   1a58e:	f800 c001 	strb.w	ip, [r0, r1]
				i++, j++;
   1a592:	3001      	adds	r0, #1
			} while (i < 16);
   1a594:	2810      	cmp	r0, #16
   1a596:	d1f4      	bne.n	1a582 <ccm_auth.isra.0+0xbc>
			err = bt_encrypt_be(key, b, X0);
   1a598:	4640      	mov	r0, r8
   1a59a:	f002 fc62 	bl	1ce62 <bt_encrypt_be>
				i++, j++;
   1a59e:	f1c5 0510 	rsb	r5, r5, #16
   1a5a2:	3c10      	subs	r4, #16
   1a5a4:	44ab      	add	fp, r5
			aad_len -= 16;
   1a5a6:	b2e4      	uxtb	r4, r4
			if (err) {
   1a5a8:	4605      	mov	r5, r0
   1a5aa:	4669      	mov	r1, sp
   1a5ac:	aa04      	add	r2, sp, #16
   1a5ae:	2800      	cmp	r0, #0
   1a5b0:	d0d7      	beq.n	1a562 <ccm_auth.isra.0+0x9c>
	blk_cnt = (msg_len + 15) / 16;
   1a5b2:	370f      	adds	r7, #15
			memcpy(&b[i], &Xn[i], 16 - i);
   1a5b4:	ab04      	add	r3, sp, #16
   1a5b6:	4635      	mov	r5, r6
	blk_cnt = (msg_len + 15) / 16;
   1a5b8:	2400      	movs	r4, #0
	for (j = 0; j < blk_cnt; j++) {
   1a5ba:	f3c7 170f 	ubfx	r7, r7, #4, #16
			memcpy(&b[i], &Xn[i], 16 - i);
   1a5be:	eb03 0609 	add.w	r6, r3, r9
	for (j = 0; j < blk_cnt; j++) {
   1a5c2:	42bc      	cmp	r4, r7
   1a5c4:	db1b      	blt.n	1a5fe <ccm_auth.isra.0+0x138>
   1a5c6:	e9dd 2118 	ldrd	r2, r1, [sp, #96]	; 0x60
   1a5ca:	ac08      	add	r4, sp, #32
   1a5cc:	ab04      	add	r3, sp, #16
   1a5ce:	1851      	adds	r1, r2, r1
	for (i = 0; i < mic_size; i++) {
   1a5d0:	4291      	cmp	r1, r2
   1a5d2:	d036      	beq.n	1a642 <ccm_auth.isra.0+0x17c>
		mic[i] = s0[i] ^ Xn[i];
   1a5d4:	f814 0b01 	ldrb.w	r0, [r4], #1
   1a5d8:	f813 5b01 	ldrb.w	r5, [r3], #1
   1a5dc:	4068      	eors	r0, r5
   1a5de:	f802 0b01 	strb.w	r0, [r2], #1
	for (i = 0; i < mic_size; i++) {
   1a5e2:	e7f5      	b.n	1a5d0 <ccm_auth.isra.0+0x10a>
			b[i] = X0[i] ^ aad[j];
   1a5e4:	5d50      	ldrb	r0, [r2, r5]
   1a5e6:	f813 1b01 	ldrb.w	r1, [r3], #1
   1a5ea:	4041      	eors	r1, r0
   1a5ec:	f80d 1005 	strb.w	r1, [sp, r5]
		for (; i < aad_len; i++, j++) {
   1a5f0:	3501      	adds	r5, #1
   1a5f2:	e7bb      	b.n	1a56c <ccm_auth.isra.0+0xa6>
			b[i] = X0[i];
   1a5f4:	5c53      	ldrb	r3, [r2, r1]
   1a5f6:	f80d 3001 	strb.w	r3, [sp, r1]
		for (i = aad_len; i < 16; i++) {
   1a5fa:	3101      	adds	r1, #1
   1a5fc:	e7b9      	b.n	1a572 <ccm_auth.isra.0+0xac>
		if (j + 1 == blk_cnt) {
   1a5fe:	3401      	adds	r4, #1
   1a600:	42bc      	cmp	r4, r7
   1a602:	d121      	bne.n	1a648 <ccm_auth.isra.0+0x182>
   1a604:	f10d 0c10 	add.w	ip, sp, #16
   1a608:	466b      	mov	r3, sp
   1a60a:	4628      	mov	r0, r5
			for (i = 0; i < last_blk; i++) {
   1a60c:	2200      	movs	r2, #0
				b[i] = Xn[i] ^ cleartext_msg[(j * 16) + i];
   1a60e:	f81c 1b01 	ldrb.w	r1, [ip], #1
   1a612:	f810 eb01 	ldrb.w	lr, [r0], #1
			for (i = 0; i < last_blk; i++) {
   1a616:	3201      	adds	r2, #1
				b[i] = Xn[i] ^ cleartext_msg[(j * 16) + i];
   1a618:	ea81 010e 	eor.w	r1, r1, lr
			for (i = 0; i < last_blk; i++) {
   1a61c:	454a      	cmp	r2, r9
				b[i] = Xn[i] ^ cleartext_msg[(j * 16) + i];
   1a61e:	f803 1b01 	strb.w	r1, [r3], #1
			for (i = 0; i < last_blk; i++) {
   1a622:	dbf4      	blt.n	1a60e <ccm_auth.isra.0+0x148>
			memcpy(&b[i], &Xn[i], 16 - i);
   1a624:	f1c9 0210 	rsb	r2, r9, #16
   1a628:	4631      	mov	r1, r6
   1a62a:	eb0d 0009 	add.w	r0, sp, r9
   1a62e:	f7ff fe26 	bl	1a27e <memcpy>
		err = bt_encrypt_be(key, b, Xn);
   1a632:	aa04      	add	r2, sp, #16
   1a634:	4651      	mov	r1, sl
   1a636:	4640      	mov	r0, r8
   1a638:	f002 fc13 	bl	1ce62 <bt_encrypt_be>
		if (err) {
   1a63c:	3510      	adds	r5, #16
   1a63e:	2800      	cmp	r0, #0
   1a640:	d0bf      	beq.n	1a5c2 <ccm_auth.isra.0+0xfc>
}
   1a642:	b00d      	add	sp, #52	; 0x34
   1a644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xor16(b, Xn, &cleartext_msg[j * 16]);
   1a648:	462a      	mov	r2, r5
   1a64a:	a904      	add	r1, sp, #16
   1a64c:	4668      	mov	r0, sp
   1a64e:	f7ff feaa 	bl	1a3a6 <xor16>
   1a652:	e7ee      	b.n	1a632 <ccm_auth.isra.0+0x16c>

0001a654 <bt_ccm_decrypt>:

int bt_ccm_decrypt(const uint8_t key[16], uint8_t nonce[13],
		   const uint8_t *enc_data, size_t len, const uint8_t *aad,
		   size_t aad_len, uint8_t *plaintext, size_t mic_size)
{
   1a654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a658:	b089      	sub	sp, #36	; 0x24
   1a65a:	e9dd ba13 	ldrd	fp, sl, [sp, #76]	; 0x4c
	uint8_t mic[16];

	if (aad_len >= 0xff00 || mic_size > sizeof(mic)) {
   1a65e:	f5bb 4f7f 	cmp.w	fp, #65280	; 0xff00
{
   1a662:	9e15      	ldr	r6, [sp, #84]	; 0x54
   1a664:	4607      	mov	r7, r0
   1a666:	4688      	mov	r8, r1
   1a668:	4615      	mov	r5, r2
   1a66a:	461c      	mov	r4, r3
	if (aad_len >= 0xff00 || mic_size > sizeof(mic)) {
   1a66c:	d21e      	bcs.n	1a6ac <bt_ccm_decrypt+0x58>
   1a66e:	2e10      	cmp	r6, #16
   1a670:	d81c      	bhi.n	1a6ac <bt_ccm_decrypt+0x58>
		return -EINVAL;
	}

	ccm_crypt(key, nonce, enc_data, plaintext, len);
   1a672:	9300      	str	r3, [sp, #0]
   1a674:	4653      	mov	r3, sl
   1a676:	f7ff fed8 	bl	1a42a <ccm_crypt.isra.0>

	ccm_auth(key, nonce, plaintext, len, aad, aad_len, mic, mic_size);
   1a67a:	f10d 0910 	add.w	r9, sp, #16
   1a67e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1a680:	9300      	str	r3, [sp, #0]
   1a682:	4652      	mov	r2, sl
   1a684:	4623      	mov	r3, r4
   1a686:	4641      	mov	r1, r8
   1a688:	4638      	mov	r0, r7
   1a68a:	e9cd b901 	strd	fp, r9, [sp, #4]
   1a68e:	9603      	str	r6, [sp, #12]
   1a690:	f7ff ff19 	bl	1a4c6 <ccm_auth.isra.0>

	if (memcmp(mic, enc_data + len, mic_size)) {
   1a694:	4632      	mov	r2, r6
   1a696:	1929      	adds	r1, r5, r4
   1a698:	4648      	mov	r0, r9
   1a69a:	f7ff fddf 	bl	1a25c <memcmp>
		return -EBADMSG;
   1a69e:	2800      	cmp	r0, #0
   1a6a0:	bf18      	it	ne
   1a6a2:	f06f 004c 	mvnne.w	r0, #76	; 0x4c
	}

	return 0;
}
   1a6a6:	b009      	add	sp, #36	; 0x24
   1a6a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EINVAL;
   1a6ac:	f06f 0015 	mvn.w	r0, #21
   1a6b0:	e7f9      	b.n	1a6a6 <bt_ccm_decrypt+0x52>

0001a6b2 <bt_ccm_encrypt>:

int bt_ccm_encrypt(const uint8_t key[16], uint8_t nonce[13],
		   const uint8_t *plaintext, size_t len, const uint8_t *aad,
		   size_t aad_len, uint8_t *enc_data, size_t mic_size)
{
   1a6b2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1a6b6:	4617      	mov	r7, r2
   1a6b8:	e9dd 280b 	ldrd	r2, r8, [sp, #44]	; 0x2c
	BT_DBG("nonce %s", bt_hex(nonce, 13));
	BT_DBG("msg (len %zu) %s", len, bt_hex(plaintext, len));
	BT_DBG("aad_len %zu mic_size %zu", aad_len, mic_size);

	/* Unsupported AAD size */
	if (aad_len >= 0xff00 || mic_size > 16) {
   1a6bc:	f5b2 4f7f 	cmp.w	r2, #65280	; 0xff00
{
   1a6c0:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
   1a6c4:	4605      	mov	r5, r0
   1a6c6:	460e      	mov	r6, r1
   1a6c8:	461c      	mov	r4, r3
	uint8_t *mic = enc_data + len;
   1a6ca:	eb08 0e03 	add.w	lr, r8, r3
	if (aad_len >= 0xff00 || mic_size > 16) {
   1a6ce:	d215      	bcs.n	1a6fc <bt_ccm_encrypt+0x4a>
   1a6d0:	f1bc 0f10 	cmp.w	ip, #16
   1a6d4:	d812      	bhi.n	1a6fc <bt_ccm_encrypt+0x4a>
		return -EINVAL;
	}

	ccm_auth(key, nonce, enc_data, len, aad, aad_len, mic, mic_size);
   1a6d6:	9201      	str	r2, [sp, #4]
   1a6d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1a6da:	9200      	str	r2, [sp, #0]
   1a6dc:	e9cd ec02 	strd	lr, ip, [sp, #8]
   1a6e0:	4642      	mov	r2, r8
   1a6e2:	f7ff fef0 	bl	1a4c6 <ccm_auth.isra.0>

	ccm_crypt(key, nonce, plaintext, enc_data, len);
   1a6e6:	4628      	mov	r0, r5
   1a6e8:	9400      	str	r4, [sp, #0]
   1a6ea:	4643      	mov	r3, r8
   1a6ec:	463a      	mov	r2, r7
   1a6ee:	4631      	mov	r1, r6
   1a6f0:	f7ff fe9b 	bl	1a42a <ccm_crypt.isra.0>

	return 0;
   1a6f4:	2000      	movs	r0, #0
}
   1a6f6:	b004      	add	sp, #16
   1a6f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
   1a6fc:	f06f 0015 	mvn.w	r0, #21
   1a700:	e7f9      	b.n	1a6f6 <bt_ccm_encrypt+0x44>

0001a702 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1a702:	b510      	push	{r4, lr}
   1a704:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1a706:	7801      	ldrb	r1, [r0, #0]
   1a708:	7822      	ldrb	r2, [r4, #0]
   1a70a:	428a      	cmp	r2, r1
{
   1a70c:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1a70e:	d00f      	beq.n	1a730 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   1a710:	4669      	mov	r1, sp
   1a712:	f7e9 fd15 	bl	4140 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1a716:	a905      	add	r1, sp, #20
   1a718:	4620      	mov	r0, r4
   1a71a:	f7e9 fd11 	bl	4140 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1a71e:	2210      	movs	r2, #16
   1a720:	f10d 0115 	add.w	r1, sp, #21
   1a724:	f10d 0001 	add.w	r0, sp, #1
   1a728:	f7ff fd98 	bl	1a25c <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   1a72c:	b00a      	add	sp, #40	; 0x28
   1a72e:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   1a730:	2a01      	cmp	r2, #1
   1a732:	d006      	beq.n	1a742 <bt_uuid_cmp+0x40>
   1a734:	2a02      	cmp	r2, #2
   1a736:	d007      	beq.n	1a748 <bt_uuid_cmp+0x46>
   1a738:	b972      	cbnz	r2, 1a758 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1a73a:	8840      	ldrh	r0, [r0, #2]
   1a73c:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1a73e:	1ac0      	subs	r0, r0, r3
   1a740:	e7f4      	b.n	1a72c <bt_uuid_cmp+0x2a>
   1a742:	6840      	ldr	r0, [r0, #4]
   1a744:	6863      	ldr	r3, [r4, #4]
   1a746:	e7fa      	b.n	1a73e <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1a748:	2210      	movs	r2, #16
   1a74a:	1c61      	adds	r1, r4, #1
   1a74c:	3001      	adds	r0, #1
}
   1a74e:	b00a      	add	sp, #40	; 0x28
   1a750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1a754:	f7ff bd82 	b.w	1a25c <memcmp>
	switch (u1->type) {
   1a758:	f06f 0015 	mvn.w	r0, #21
   1a75c:	e7e6      	b.n	1a72c <bt_uuid_cmp+0x2a>

0001a75e <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1a75e:	2a04      	cmp	r2, #4
{
   1a760:	b510      	push	{r4, lr}
	switch (data_len) {
   1a762:	d00a      	beq.n	1a77a <bt_uuid_create+0x1c>
   1a764:	2a10      	cmp	r2, #16
   1a766:	d00d      	beq.n	1a784 <bt_uuid_create+0x26>
   1a768:	2a02      	cmp	r2, #2
   1a76a:	f04f 0300 	mov.w	r3, #0
   1a76e:	d10f      	bne.n	1a790 <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   1a770:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   1a772:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1a774:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1a776:	2001      	movs	r0, #1
}
   1a778:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   1a77a:	2301      	movs	r3, #1
   1a77c:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1a77e:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1a780:	6042      	str	r2, [r0, #4]
		break;
   1a782:	e7f8      	b.n	1a776 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   1a784:	2302      	movs	r3, #2
   1a786:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   1a78a:	f7ff fd78 	bl	1a27e <memcpy>
		break;
   1a78e:	e7f2      	b.n	1a776 <bt_uuid_create+0x18>
	switch (data_len) {
   1a790:	4618      	mov	r0, r3
   1a792:	e7f1      	b.n	1a778 <bt_uuid_create+0x1a>

0001a794 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   1a794:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   1a796:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1a798:	2106      	movs	r1, #6
{
   1a79a:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1a79c:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1a7a0:	f002 fb5d 	bl	1ce5e <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1a7a4:	b918      	cbnz	r0, 1a7ae <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   1a7a6:	79a3      	ldrb	r3, [r4, #6]
   1a7a8:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1a7ac:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   1a7ae:	bd10      	pop	{r4, pc}

0001a7b0 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1a7b0:	280f      	cmp	r0, #15
   1a7b2:	d806      	bhi.n	1a7c2 <bt_hci_evt_get_flags+0x12>
   1a7b4:	280d      	cmp	r0, #13
   1a7b6:	d80b      	bhi.n	1a7d0 <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   1a7b8:	2805      	cmp	r0, #5
   1a7ba:	bf14      	ite	ne
   1a7bc:	2002      	movne	r0, #2
   1a7be:	2003      	moveq	r0, #3
   1a7c0:	4770      	bx	lr
	switch (evt) {
   1a7c2:	2813      	cmp	r0, #19
   1a7c4:	d004      	beq.n	1a7d0 <bt_hci_evt_get_flags+0x20>
   1a7c6:	281a      	cmp	r0, #26
   1a7c8:	bf14      	ite	ne
   1a7ca:	2002      	movne	r0, #2
   1a7cc:	2001      	moveq	r0, #1
   1a7ce:	4770      	bx	lr
   1a7d0:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   1a7d2:	4770      	bx	lr

0001a7d4 <atomic_or>:
{
   1a7d4:	4603      	mov	r3, r0
}
   1a7d6:	f3bf 8f5b 	dmb	ish
   1a7da:	e853 0f00 	ldrex	r0, [r3]
   1a7de:	ea40 0201 	orr.w	r2, r0, r1
   1a7e2:	e843 2c00 	strex	ip, r2, [r3]
   1a7e6:	f1bc 0f00 	cmp.w	ip, #0
   1a7ea:	d1f6      	bne.n	1a7da <atomic_or+0x6>
   1a7ec:	f3bf 8f5b 	dmb	ish
   1a7f0:	4770      	bx	lr

0001a7f2 <bt_hci_disconnect>:
{
   1a7f2:	b570      	push	{r4, r5, r6, lr}
   1a7f4:	4606      	mov	r6, r0
   1a7f6:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1a7f8:	f240 4006 	movw	r0, #1030	; 0x406
   1a7fc:	2103      	movs	r1, #3
   1a7fe:	f7e9 fffd 	bl	47fc <bt_hci_cmd_create>
	if (!buf) {
   1a802:	4604      	mov	r4, r0
   1a804:	b168      	cbz	r0, 1a822 <bt_hci_disconnect+0x30>
   1a806:	2103      	movs	r1, #3
   1a808:	3008      	adds	r0, #8
   1a80a:	f003 f9fe 	bl	1dc0a <net_buf_simple_add>
	disconn->reason = reason;
   1a80e:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   1a810:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1a812:	4621      	mov	r1, r4
   1a814:	2200      	movs	r2, #0
}
   1a816:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1a81a:	f240 4006 	movw	r0, #1030	; 0x406
   1a81e:	f7ea b945 	b.w	4aac <bt_hci_cmd_send_sync>
}
   1a822:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1a826:	bd70      	pop	{r4, r5, r6, pc}

0001a828 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   1a828:	6880      	ldr	r0, [r0, #8]
   1a82a:	f7ea b9b9 	b.w	4ba0 <bt_hci_le_enh_conn_complete>

0001a82e <le_legacy_conn_complete>:
{
   1a82e:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1a830:	6881      	ldr	r1, [r0, #8]
{
   1a832:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   1a834:	780b      	ldrb	r3, [r1, #0]
   1a836:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   1a83a:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   1a83e:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   1a842:	78cb      	ldrb	r3, [r1, #3]
   1a844:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   1a848:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1a84c:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   1a850:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   1a854:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   1a858:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   1a85c:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   1a860:	7c4b      	ldrb	r3, [r1, #17]
   1a862:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   1a866:	2207      	movs	r2, #7
   1a868:	3104      	adds	r1, #4
   1a86a:	a803      	add	r0, sp, #12
   1a86c:	f7ff fd07 	bl	1a27e <memcpy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1a870:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   1a872:	4669      	mov	r1, sp
   1a874:	2206      	movs	r2, #6
   1a876:	f10d 0013 	add.w	r0, sp, #19
   1a87a:	9400      	str	r4, [sp, #0]
   1a87c:	f8ad 4004 	strh.w	r4, [sp, #4]
   1a880:	f7ff fcfd 	bl	1a27e <memcpy>
   1a884:	2206      	movs	r2, #6
   1a886:	4669      	mov	r1, sp
   1a888:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   1a88c:	9400      	str	r4, [sp, #0]
   1a88e:	f8ad 4004 	strh.w	r4, [sp, #4]
   1a892:	f7ff fcf4 	bl	1a27e <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   1a896:	a802      	add	r0, sp, #8
   1a898:	f7ea f982 	bl	4ba0 <bt_hci_le_enh_conn_complete>
}
   1a89c:	b00a      	add	sp, #40	; 0x28
   1a89e:	bd10      	pop	{r4, pc}

0001a8a0 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   1a8a0:	8803      	ldrh	r3, [r0, #0]
   1a8a2:	8842      	ldrh	r2, [r0, #2]
   1a8a4:	4293      	cmp	r3, r2
{
   1a8a6:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1a8a8:	d819      	bhi.n	1a8de <bt_le_conn_params_valid+0x3e>
   1a8aa:	2b05      	cmp	r3, #5
   1a8ac:	d917      	bls.n	1a8de <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1a8ae:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   1a8b2:	d814      	bhi.n	1a8de <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   1a8b4:	8883      	ldrh	r3, [r0, #4]
   1a8b6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1a8ba:	d210      	bcs.n	1a8de <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1a8bc:	88c0      	ldrh	r0, [r0, #6]
   1a8be:	f1a0 010a 	sub.w	r1, r0, #10
   1a8c2:	b289      	uxth	r1, r1
   1a8c4:	f640 4476 	movw	r4, #3190	; 0xc76
   1a8c8:	42a1      	cmp	r1, r4
   1a8ca:	d808      	bhi.n	1a8de <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   1a8cc:	3301      	adds	r3, #1
   1a8ce:	b29b      	uxth	r3, r3
   1a8d0:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   1a8d2:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   1a8d6:	bf34      	ite	cc
   1a8d8:	2001      	movcc	r0, #1
   1a8da:	2000      	movcs	r0, #0
}
   1a8dc:	bd10      	pop	{r4, pc}
		return false;
   1a8de:	2000      	movs	r0, #0
   1a8e0:	e7fc      	b.n	1a8dc <bt_le_conn_params_valid+0x3c>

0001a8e2 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   1a8e2:	2000      	movs	r0, #0
   1a8e4:	4770      	bx	lr

0001a8e6 <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   1a8e6:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   1a8e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   1a8ec:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   1a8ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a8f2:	2100      	movs	r1, #0
{
   1a8f4:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   1a8f6:	f7e9 fc83 	bl	4200 <bt_buf_get_evt>
   1a8fa:	2102      	movs	r1, #2
   1a8fc:	4604      	mov	r4, r0
   1a8fe:	3008      	adds	r0, #8
   1a900:	f003 f983 	bl	1dc0a <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   1a904:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   1a906:	7045      	strb	r5, [r0, #1]

	return buf;
}
   1a908:	4620      	mov	r0, r4
   1a90a:	bd70      	pop	{r4, r5, r6, pc}

0001a90c <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   1a90c:	3103      	adds	r1, #3
{
   1a90e:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   1a910:	b2c9      	uxtb	r1, r1
{
   1a912:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   1a914:	200e      	movs	r0, #14
   1a916:	f7ff ffe6 	bl	1a8e6 <bt_hci_evt_create>
   1a91a:	2103      	movs	r1, #3
   1a91c:	4604      	mov	r4, r0
   1a91e:	3008      	adds	r0, #8
   1a920:	f003 f973 	bl	1dc0a <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   1a924:	2301      	movs	r3, #1
   1a926:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   1a928:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   1a92c:	4620      	mov	r0, r4
   1a92e:	bd38      	pop	{r3, r4, r5, pc}

0001a930 <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   1a930:	b570      	push	{r4, r5, r6, lr}
   1a932:	4605      	mov	r5, r0
   1a934:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   1a936:	200f      	movs	r0, #15
   1a938:	2104      	movs	r1, #4
   1a93a:	f7ff ffd4 	bl	1a8e6 <bt_hci_evt_create>
   1a93e:	2104      	movs	r1, #4
   1a940:	4604      	mov	r4, r0
   1a942:	3008      	adds	r0, #8
   1a944:	f003 f961 	bl	1dc0a <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   1a948:	2201      	movs	r2, #1
	cs->status = status;
   1a94a:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   1a94c:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   1a94e:	8045      	strh	r5, [r0, #2]

	return buf;
}
   1a950:	4620      	mov	r0, r4
   1a952:	bd70      	pop	{r4, r5, r6, pc}

0001a954 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a954:	f3bf 8f5b 	dmb	ish
   1a958:	6800      	ldr	r0, [r0, #0]
   1a95a:	f3bf 8f5b 	dmb	ish
}
   1a95e:	4770      	bx	lr

0001a960 <is_adv_using_rand_addr>:
{
   1a960:	b508      	push	{r3, lr}
	adv = bt_le_adv_lookup_legacy();
   1a962:	f7eb f843 	bl	59ec <bt_le_adv_lookup_legacy>
	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
   1a966:	b120      	cbz	r0, 1a972 <is_adv_using_rand_addr+0x12>
   1a968:	3010      	adds	r0, #16
   1a96a:	f7ff fff3 	bl	1a954 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1a96e:	f3c0 1080 	ubfx	r0, r0, #6, #1
}
   1a972:	bd08      	pop	{r3, pc}

0001a974 <bt_lookup_id_addr>:
}
   1a974:	4608      	mov	r0, r1
   1a976:	4770      	bx	lr

0001a978 <bt_id_set_private_addr>:
{
   1a978:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1a97a:	2106      	movs	r1, #6
   1a97c:	4668      	mov	r0, sp
   1a97e:	f002 fa6e 	bl	1ce5e <bt_rand>
	if (err) {
   1a982:	b940      	cbnz	r0, 1a996 <bt_id_set_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   1a984:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   1a988:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1a98a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1a98e:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   1a992:	f7ea fe0d 	bl	55b0 <set_random_address>
}
   1a996:	b003      	add	sp, #12
   1a998:	f85d fb04 	ldr.w	pc, [sp], #4

0001a99c <bt_id_scan_random_addr_check>:
{
   1a99c:	b508      	push	{r3, lr}
	adv = bt_le_adv_lookup_legacy();
   1a99e:	f7eb f825 	bl	59ec <bt_le_adv_lookup_legacy>
	if (!adv) {
   1a9a2:	b110      	cbz	r0, 1a9aa <bt_id_scan_random_addr_check+0xe>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1a9a4:	3010      	adds	r0, #16
   1a9a6:	f7ff ffd5 	bl	1a954 <atomic_get>
}
   1a9aa:	2001      	movs	r0, #1
   1a9ac:	bd08      	pop	{r3, pc}

0001a9ae <bt_id_init>:
#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
}
   1a9ae:	2000      	movs	r0, #0
   1a9b0:	4770      	bx	lr

0001a9b2 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a9b2:	f3bf 8f5b 	dmb	ish
   1a9b6:	6800      	ldr	r0, [r0, #0]
   1a9b8:	f3bf 8f5b 	dmb	ish
}
   1a9bc:	4770      	bx	lr

0001a9be <atomic_and>:
{
   1a9be:	4603      	mov	r3, r0
}
   1a9c0:	f3bf 8f5b 	dmb	ish
   1a9c4:	e853 0f00 	ldrex	r0, [r3]
   1a9c8:	ea00 0201 	and.w	r2, r0, r1
   1a9cc:	e843 2c00 	strex	ip, r2, [r3]
   1a9d0:	f1bc 0f00 	cmp.w	ip, #0
   1a9d4:	d1f6      	bne.n	1a9c4 <atomic_and+0x6>
   1a9d6:	f3bf 8f5b 	dmb	ish
   1a9da:	4770      	bx	lr

0001a9dc <bt_le_adv_set_enable_legacy>:
{
   1a9dc:	b570      	push	{r4, r5, r6, lr}
   1a9de:	4606      	mov	r6, r0
   1a9e0:	b086      	sub	sp, #24
   1a9e2:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   1a9e4:	f242 000a 	movw	r0, #8202	; 0x200a
   1a9e8:	2101      	movs	r1, #1
   1a9ea:	f7e9 ff07 	bl	47fc <bt_hci_cmd_create>
	if (!buf) {
   1a9ee:	4604      	mov	r4, r0
   1a9f0:	b1b0      	cbz	r0, 1aa20 <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   1a9f2:	3008      	adds	r0, #8
	if (enable) {
   1a9f4:	b195      	cbz	r5, 1aa1c <bt_le_adv_set_enable_legacy+0x40>
   1a9f6:	2101      	movs	r1, #1
   1a9f8:	f003 f916 	bl	1dc28 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   1a9fc:	f106 0210 	add.w	r2, r6, #16
   1aa00:	a903      	add	r1, sp, #12
   1aa02:	4620      	mov	r0, r4
   1aa04:	9500      	str	r5, [sp, #0]
   1aa06:	2306      	movs	r3, #6
   1aa08:	f7e9 fee6 	bl	47d8 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   1aa0c:	2200      	movs	r2, #0
   1aa0e:	4621      	mov	r1, r4
   1aa10:	f242 000a 	movw	r0, #8202	; 0x200a
   1aa14:	f7ea f84a 	bl	4aac <bt_hci_cmd_send_sync>
}
   1aa18:	b006      	add	sp, #24
   1aa1a:	bd70      	pop	{r4, r5, r6, pc}
   1aa1c:	4629      	mov	r1, r5
   1aa1e:	e7eb      	b.n	1a9f8 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   1aa20:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1aa24:	e7f8      	b.n	1aa18 <bt_le_adv_set_enable_legacy+0x3c>

0001aa26 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   1aa26:	3018      	adds	r0, #24
   1aa28:	f003 be28 	b.w	1e67c <k_work_cancel_delayable>

0001aa2c <atomic_and>:
{
   1aa2c:	4603      	mov	r3, r0
}
   1aa2e:	f3bf 8f5b 	dmb	ish
   1aa32:	e853 0f00 	ldrex	r0, [r3]
   1aa36:	ea00 0201 	and.w	r2, r0, r1
   1aa3a:	e843 2c00 	strex	ip, r2, [r3]
   1aa3e:	f1bc 0f00 	cmp.w	ip, #0
   1aa42:	d1f6      	bne.n	1aa32 <atomic_and+0x6>
   1aa44:	f3bf 8f5b 	dmb	ish
   1aa48:	4770      	bx	lr

0001aa4a <tx_notify>:
{
   1aa4a:	b570      	push	{r4, r5, r6, lr}
   1aa4c:	4604      	mov	r4, r0
	__asm__ volatile(
   1aa4e:	f04f 0220 	mov.w	r2, #32
   1aa52:	f3ef 8311 	mrs	r3, BASEPRI
   1aa56:	f382 8812 	msr	BASEPRI_MAX, r2
   1aa5a:	f3bf 8f6f 	isb	sy
	return list->head;
   1aa5e:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   1aa60:	b920      	cbnz	r0, 1aa6c <tx_notify+0x22>
	__asm__ volatile(
   1aa62:	f383 8811 	msr	BASEPRI, r3
   1aa66:	f3bf 8f6f 	isb	sy
}
   1aa6a:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1aa6c:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   1aa6e:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1aa70:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1aa72:	4288      	cmp	r0, r1
	list->tail = node;
   1aa74:	bf08      	it	eq
   1aa76:	6262      	streq	r2, [r4, #36]	; 0x24
   1aa78:	f383 8811 	msr	BASEPRI, r3
   1aa7c:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   1aa80:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   1aa84:	f7eb fa2e 	bl	5ee4 <tx_free>
		cb(conn, user_data);
   1aa88:	4631      	mov	r1, r6
   1aa8a:	4620      	mov	r0, r4
   1aa8c:	47a8      	blx	r5
	while (1) {
   1aa8e:	e7de      	b.n	1aa4e <tx_notify+0x4>

0001aa90 <tx_complete_work>:
	tx_notify(conn);
   1aa90:	3828      	subs	r0, #40	; 0x28
   1aa92:	f7ff bfda 	b.w	1aa4a <tx_notify>

0001aa96 <bt_conn_reset_rx_state>:
{
   1aa96:	b510      	push	{r4, lr}
   1aa98:	4604      	mov	r4, r0
	if (!conn->rx) {
   1aa9a:	6900      	ldr	r0, [r0, #16]
   1aa9c:	b118      	cbz	r0, 1aaa6 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1aa9e:	f7fa fe83 	bl	157a8 <net_buf_unref>
	conn->rx = NULL;
   1aaa2:	2300      	movs	r3, #0
   1aaa4:	6123      	str	r3, [r4, #16]
}
   1aaa6:	bd10      	pop	{r4, pc}

0001aaa8 <bt_conn_ref>:
{
   1aaa8:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   1aaaa:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1aaae:	f3bf 8f5b 	dmb	ish
   1aab2:	6813      	ldr	r3, [r2, #0]
   1aab4:	f3bf 8f5b 	dmb	ish
		if (!old) {
   1aab8:	b17b      	cbz	r3, 1aada <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1aaba:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1aabe:	1c59      	adds	r1, r3, #1
   1aac0:	e852 4f00 	ldrex	r4, [r2]
   1aac4:	429c      	cmp	r4, r3
   1aac6:	d104      	bne.n	1aad2 <bt_conn_ref+0x2a>
   1aac8:	e842 1c00 	strex	ip, r1, [r2]
   1aacc:	f1bc 0f00 	cmp.w	ip, #0
   1aad0:	d1f6      	bne.n	1aac0 <bt_conn_ref+0x18>
   1aad2:	f3bf 8f5b 	dmb	ish
   1aad6:	d1ea      	bne.n	1aaae <bt_conn_ref+0x6>
}
   1aad8:	bd10      	pop	{r4, pc}
			return NULL;
   1aada:	4618      	mov	r0, r3
   1aadc:	e7fc      	b.n	1aad8 <bt_conn_ref+0x30>

0001aade <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   1aade:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1aae2:	f3bf 8f5b 	dmb	ish
   1aae6:	e853 2f00 	ldrex	r2, [r3]
   1aaea:	3a01      	subs	r2, #1
   1aaec:	e843 2100 	strex	r1, r2, [r3]
   1aaf0:	2900      	cmp	r1, #0
   1aaf2:	d1f8      	bne.n	1aae6 <bt_conn_unref+0x8>
   1aaf4:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   1aaf8:	7883      	ldrb	r3, [r0, #2]
   1aafa:	2b01      	cmp	r3, #1
   1aafc:	d108      	bne.n	1ab10 <bt_conn_unref+0x32>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1aafe:	f3bf 8f5b 	dmb	ish
   1ab02:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   1ab06:	f3bf 8f5b 	dmb	ish
   1ab0a:	b90b      	cbnz	r3, 1ab10 <bt_conn_unref+0x32>
		bt_le_adv_resume();
   1ab0c:	f7ea bf72 	b.w	59f4 <bt_le_adv_resume>
}
   1ab10:	4770      	bx	lr

0001ab12 <conn_lookup_handle>:
{
   1ab12:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ab16:	4607      	mov	r7, r0
   1ab18:	460e      	mov	r6, r1
   1ab1a:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   1ab1c:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1ab1e:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   1ab22:	42b4      	cmp	r4, r6
   1ab24:	d103      	bne.n	1ab2e <conn_lookup_handle+0x1c>
	return NULL;
   1ab26:	2300      	movs	r3, #0
}
   1ab28:	4618      	mov	r0, r3
   1ab2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1ab2e:	fb09 7004 	mla	r0, r9, r4, r7
   1ab32:	f7ff ffb9 	bl	1aaa8 <bt_conn_ref>
   1ab36:	4603      	mov	r3, r0
		if (!conn) {
   1ab38:	b158      	cbz	r0, 1ab52 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   1ab3a:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   1ab3c:	2d01      	cmp	r5, #1
   1ab3e:	d002      	beq.n	1ab46 <conn_lookup_handle+0x34>
   1ab40:	3d07      	subs	r5, #7
   1ab42:	2d01      	cmp	r5, #1
   1ab44:	d803      	bhi.n	1ab4e <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   1ab46:	881a      	ldrh	r2, [r3, #0]
   1ab48:	4542      	cmp	r2, r8
   1ab4a:	d0ed      	beq.n	1ab28 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   1ab4c:	4618      	mov	r0, r3
   1ab4e:	f7ff ffc6 	bl	1aade <bt_conn_unref>
	for (i = 0; i < size; i++) {
   1ab52:	3401      	adds	r4, #1
   1ab54:	e7e5      	b.n	1ab22 <conn_lookup_handle+0x10>

0001ab56 <bt_conn_connected>:
{
   1ab56:	b510      	push	{r4, lr}
   1ab58:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   1ab5a:	f7eb fe5d 	bl	6818 <bt_l2cap_connected>
	notify_connected(conn);
   1ab5e:	4620      	mov	r0, r4
}
   1ab60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   1ab64:	f7eb b9c8 	b.w	5ef8 <notify_connected>

0001ab68 <bt_conn_disconnect>:
{
   1ab68:	b538      	push	{r3, r4, r5, lr}
	switch (conn->state) {
   1ab6a:	7a83      	ldrb	r3, [r0, #10]
   1ab6c:	3b02      	subs	r3, #2
{
   1ab6e:	4604      	mov	r4, r0
	switch (conn->state) {
   1ab70:	2b06      	cmp	r3, #6
   1ab72:	d805      	bhi.n	1ab80 <bt_conn_disconnect+0x18>
   1ab74:	e8df f003 	tbb	[pc, r3]
   1ab78:	04040408 	.word	0x04040408
   1ab7c:	0e0c      	.short	0x0e0c
   1ab7e:	0c          	.byte	0x0c
   1ab7f:	00          	.byte	0x00
   1ab80:	f06f 057f 	mvn.w	r5, #127	; 0x7f
}
   1ab84:	4628      	mov	r0, r5
   1ab86:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
   1ab88:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1ab8a:	2100      	movs	r1, #0
   1ab8c:	f7eb fb02 	bl	6194 <bt_conn_set_state>
		return 0;
   1ab90:	2500      	movs	r5, #0
   1ab92:	e7f7      	b.n	1ab84 <bt_conn_disconnect+0x1c>
	err = bt_hci_disconnect(conn->handle, reason);
   1ab94:	8800      	ldrh	r0, [r0, #0]
   1ab96:	f7ff fe2c 	bl	1a7f2 <bt_hci_disconnect>
	if (err) {
   1ab9a:	4605      	mov	r5, r0
   1ab9c:	2800      	cmp	r0, #0
   1ab9e:	d1f1      	bne.n	1ab84 <bt_conn_disconnect+0x1c>
	if (conn->state == BT_CONN_CONNECTED) {
   1aba0:	7aa3      	ldrb	r3, [r4, #10]
   1aba2:	2b07      	cmp	r3, #7
   1aba4:	d1ee      	bne.n	1ab84 <bt_conn_disconnect+0x1c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   1aba6:	2108      	movs	r1, #8
   1aba8:	4620      	mov	r0, r4
   1abaa:	f7eb faf3 	bl	6194 <bt_conn_set_state>
   1abae:	e7e9      	b.n	1ab84 <bt_conn_disconnect+0x1c>

0001abb0 <bt_conn_get_security>:
}
   1abb0:	2001      	movs	r0, #1
   1abb2:	4770      	bx	lr

0001abb4 <bt_conn_is_peer_addr_le>:
{
   1abb4:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1abb6:	7a03      	ldrb	r3, [r0, #8]
   1abb8:	428b      	cmp	r3, r1
{
   1abba:	4604      	mov	r4, r0
   1abbc:	4615      	mov	r5, r2
	if (id != conn->id) {
   1abbe:	d115      	bne.n	1abec <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1abc0:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1abc4:	2207      	movs	r2, #7
   1abc6:	4628      	mov	r0, r5
   1abc8:	f7ff fb48 	bl	1a25c <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   1abcc:	b180      	cbz	r0, 1abf0 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1abce:	78e3      	ldrb	r3, [r4, #3]
   1abd0:	2207      	movs	r2, #7
   1abd2:	b943      	cbnz	r3, 1abe6 <bt_conn_is_peer_addr_le+0x32>
   1abd4:	f104 0196 	add.w	r1, r4, #150	; 0x96
   1abd8:	4628      	mov	r0, r5
   1abda:	f7ff fb3f 	bl	1a25c <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   1abde:	fab0 f080 	clz	r0, r0
   1abe2:	0940      	lsrs	r0, r0, #5
}
   1abe4:	bd38      	pop	{r3, r4, r5, pc}
   1abe6:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1abea:	e7f5      	b.n	1abd8 <bt_conn_is_peer_addr_le+0x24>
		return false;
   1abec:	2000      	movs	r0, #0
   1abee:	e7f9      	b.n	1abe4 <bt_conn_is_peer_addr_le+0x30>
		return true;
   1abf0:	2001      	movs	r0, #1
   1abf2:	e7f7      	b.n	1abe4 <bt_conn_is_peer_addr_le+0x30>

0001abf4 <bt_conn_le_conn_update>:
{
   1abf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1abf6:	4607      	mov	r7, r0
   1abf8:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1abfa:	f242 0013 	movw	r0, #8211	; 0x2013
   1abfe:	210e      	movs	r1, #14
   1ac00:	f7e9 fdfc 	bl	47fc <bt_hci_cmd_create>
	if (!buf) {
   1ac04:	4606      	mov	r6, r0
   1ac06:	b1d0      	cbz	r0, 1ac3e <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1ac08:	210e      	movs	r1, #14
   1ac0a:	3008      	adds	r0, #8
   1ac0c:	f002 fffd 	bl	1dc0a <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1ac10:	220e      	movs	r2, #14
   1ac12:	4604      	mov	r4, r0
   1ac14:	2100      	movs	r1, #0
   1ac16:	f7ff fb3d 	bl	1a294 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1ac1a:	883b      	ldrh	r3, [r7, #0]
   1ac1c:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1ac1e:	882b      	ldrh	r3, [r5, #0]
   1ac20:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1ac22:	886b      	ldrh	r3, [r5, #2]
   1ac24:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1ac26:	88ab      	ldrh	r3, [r5, #4]
   1ac28:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1ac2a:	88eb      	ldrh	r3, [r5, #6]
   1ac2c:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1ac2e:	4631      	mov	r1, r6
   1ac30:	2200      	movs	r2, #0
}
   1ac32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1ac36:	f242 0013 	movw	r0, #8211	; 0x2013
   1ac3a:	f7e9 bf37 	b.w	4aac <bt_hci_cmd_send_sync>
}
   1ac3e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1ac42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ac44 <l2cap_connected>:
}
   1ac44:	4770      	bx	lr

0001ac46 <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   1ac46:	3010      	adds	r0, #16
   1ac48:	f003 bd18 	b.w	1e67c <k_work_cancel_delayable>

0001ac4c <bt_l2cap_chan_remove>:
	return list->head;
   1ac4c:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1ac4e:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1ac50:	b17b      	cbz	r3, 1ac72 <bt_l2cap_chan_remove+0x26>
   1ac52:	3b08      	subs	r3, #8
   1ac54:	2200      	movs	r2, #0
   1ac56:	b163      	cbz	r3, 1ac72 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   1ac58:	428b      	cmp	r3, r1
			sys_slist_remove(&conn->channels, prev, &chan->node);
   1ac5a:	f103 0408 	add.w	r4, r3, #8
		if (chan == ch) {
   1ac5e:	d10e      	bne.n	1ac7e <bt_l2cap_chan_remove+0x32>
	return node->next;
   1ac60:	6899      	ldr	r1, [r3, #8]
	return list->tail;
   1ac62:	6d45      	ldr	r5, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   1ac64:	b932      	cbnz	r2, 1ac74 <bt_l2cap_chan_remove+0x28>
   1ac66:	42ac      	cmp	r4, r5
	list->head = node;
   1ac68:	6501      	str	r1, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   1ac6a:	d100      	bne.n	1ac6e <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   1ac6c:	6541      	str	r1, [r0, #84]	; 0x54
	parent->next = child;
   1ac6e:	2200      	movs	r2, #0
   1ac70:	609a      	str	r2, [r3, #8]
}
   1ac72:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_REMOVE(slist, snode)
   1ac74:	42ac      	cmp	r4, r5
	parent->next = child;
   1ac76:	6011      	str	r1, [r2, #0]
	list->tail = node;
   1ac78:	bf08      	it	eq
   1ac7a:	6542      	streq	r2, [r0, #84]	; 0x54
}
   1ac7c:	e7f7      	b.n	1ac6e <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ac7e:	2c00      	cmp	r4, #0
   1ac80:	d0f7      	beq.n	1ac72 <bt_l2cap_chan_remove+0x26>
	return node->next;
   1ac82:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1ac84:	2b00      	cmp	r3, #0
   1ac86:	d0f4      	beq.n	1ac72 <bt_l2cap_chan_remove+0x26>
   1ac88:	3b08      	subs	r3, #8
   1ac8a:	4622      	mov	r2, r4
   1ac8c:	e7e3      	b.n	1ac56 <bt_l2cap_chan_remove+0xa>

0001ac8e <bt_l2cap_chan_del>:
{
   1ac8e:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   1ac90:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   1ac94:	4604      	mov	r4, r0
	if (!chan->conn) {
   1ac96:	b123      	cbz	r3, 1aca2 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1ac98:	686b      	ldr	r3, [r5, #4]
   1ac9a:	b103      	cbz	r3, 1ac9e <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1ac9c:	4798      	blx	r3
	chan->conn = NULL;
   1ac9e:	2300      	movs	r3, #0
   1aca0:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1aca2:	68e3      	ldr	r3, [r4, #12]
   1aca4:	b10b      	cbz	r3, 1acaa <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1aca6:	4620      	mov	r0, r4
   1aca8:	4798      	blx	r3
	if (ops->released) {
   1acaa:	69eb      	ldr	r3, [r5, #28]
   1acac:	b11b      	cbz	r3, 1acb6 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   1acae:	4620      	mov	r0, r4
}
   1acb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1acb4:	4718      	bx	r3
}
   1acb6:	bd70      	pop	{r4, r5, r6, pc}

0001acb8 <bt_l2cap_disconnected>:
	return list->head;
   1acb8:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1acba:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1acbc:	b18b      	cbz	r3, 1ace2 <bt_l2cap_disconnected+0x2a>
   1acbe:	f1b3 0008 	subs.w	r0, r3, #8
   1acc2:	d00e      	beq.n	1ace2 <bt_l2cap_disconnected+0x2a>
	return node->next;
   1acc4:	681c      	ldr	r4, [r3, #0]
   1acc6:	b104      	cbz	r4, 1acca <bt_l2cap_disconnected+0x12>
   1acc8:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1acca:	f7ff ffe0 	bl	1ac8e <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1acce:	b144      	cbz	r4, 1ace2 <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1acd0:	f114 0308 	adds.w	r3, r4, #8
   1acd4:	d002      	beq.n	1acdc <bt_l2cap_disconnected+0x24>
	return node->next;
   1acd6:	68a3      	ldr	r3, [r4, #8]
   1acd8:	b103      	cbz	r3, 1acdc <bt_l2cap_disconnected+0x24>
   1acda:	3b08      	subs	r3, #8
{
   1acdc:	4620      	mov	r0, r4
   1acde:	461c      	mov	r4, r3
   1ace0:	e7f3      	b.n	1acca <bt_l2cap_disconnected+0x12>
}
   1ace2:	bd10      	pop	{r4, pc}

0001ace4 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1ace4:	3104      	adds	r1, #4
   1ace6:	f7eb bb47 	b.w	6378 <bt_conn_create_pdu_timeout>

0001acea <bt_l2cap_send_cb>:
{
   1acea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1acee:	4614      	mov	r4, r2
   1acf0:	4605      	mov	r5, r0
   1acf2:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   1acf4:	f102 0008 	add.w	r0, r2, #8
   1acf8:	2104      	movs	r1, #4
   1acfa:	461e      	mov	r6, r3
   1acfc:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1ad00:	f002 ffaf 	bl	1dc62 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1ad04:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   1ad06:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1ad08:	3a04      	subs	r2, #4
   1ad0a:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1ad0c:	4643      	mov	r3, r8
   1ad0e:	4632      	mov	r2, r6
   1ad10:	4621      	mov	r1, r4
   1ad12:	4628      	mov	r0, r5
}
   1ad14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1ad18:	f7eb b9d0 	b.w	60bc <bt_conn_send_cb>

0001ad1c <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   1ad1c:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1ad1e:	b160      	cbz	r0, 1ad3a <bt_l2cap_le_lookup_tx_cid+0x1e>
   1ad20:	3808      	subs	r0, #8
   1ad22:	b900      	cbnz	r0, 1ad26 <bt_l2cap_le_lookup_tx_cid+0xa>
   1ad24:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1ad26:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
   1ad2a:	428b      	cmp	r3, r1
   1ad2c:	d005      	beq.n	1ad3a <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ad2e:	f110 0308 	adds.w	r3, r0, #8
   1ad32:	d001      	beq.n	1ad38 <bt_l2cap_le_lookup_tx_cid+0x1c>
	return node->next;
   1ad34:	6880      	ldr	r0, [r0, #8]
   1ad36:	e7f2      	b.n	1ad1e <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   1ad38:	4618      	mov	r0, r3
}
   1ad3a:	4770      	bx	lr

0001ad3c <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   1ad3c:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1ad3e:	b160      	cbz	r0, 1ad5a <bt_l2cap_le_lookup_rx_cid+0x1e>
   1ad40:	3808      	subs	r0, #8
   1ad42:	b900      	cbnz	r0, 1ad46 <bt_l2cap_le_lookup_rx_cid+0xa>
   1ad44:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1ad46:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   1ad4a:	428b      	cmp	r3, r1
   1ad4c:	d005      	beq.n	1ad5a <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ad4e:	f110 0308 	adds.w	r3, r0, #8
   1ad52:	d001      	beq.n	1ad58 <bt_l2cap_le_lookup_rx_cid+0x1c>
	return node->next;
   1ad54:	6880      	ldr	r0, [r0, #8]
   1ad56:	e7f2      	b.n	1ad3e <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   1ad58:	4618      	mov	r0, r3
}
   1ad5a:	4770      	bx	lr

0001ad5c <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   1ad5c:	4770      	bx	lr

0001ad5e <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1ad5e:	4603      	mov	r3, r0
	return list->head;
   1ad60:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1ad62:	b128      	cbz	r0, 1ad70 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ad64:	6859      	ldr	r1, [r3, #4]
	return node->next;
   1ad66:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1ad68:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ad6a:	4288      	cmp	r0, r1
	list->tail = node;
   1ad6c:	bf08      	it	eq
   1ad6e:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1ad70:	4770      	bx	lr

0001ad72 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1ad72:	4603      	mov	r3, r0
	size_t bytes = 0;
   1ad74:	2000      	movs	r0, #0

	while (buf) {
   1ad76:	b903      	cbnz	r3, 1ad7a <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1ad78:	4770      	bx	lr
		bytes += buf->len;
   1ad7a:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1ad7c:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1ad7e:	4410      	add	r0, r2
		buf = buf->frags;
   1ad80:	e7f9      	b.n	1ad76 <net_buf_frags_len+0x4>

0001ad82 <att_sent>:
	if (chan->ops->sent) {
   1ad82:	684b      	ldr	r3, [r1, #4]
   1ad84:	695b      	ldr	r3, [r3, #20]
{
   1ad86:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   1ad88:	b103      	cbz	r3, 1ad8c <att_sent+0xa>
		chan->ops->sent(chan);
   1ad8a:	4718      	bx	r3
}
   1ad8c:	4770      	bx	lr

0001ad8e <attr_read_type_cb>:
{
   1ad8e:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1ad90:	68d4      	ldr	r4, [r2, #12]
   1ad92:	7823      	ldrb	r3, [r4, #0]
   1ad94:	3102      	adds	r1, #2
   1ad96:	b913      	cbnz	r3, 1ad9e <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1ad98:	7021      	strb	r1, [r4, #0]
	return true;
   1ad9a:	2001      	movs	r0, #1
   1ad9c:	e006      	b.n	1adac <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1ad9e:	428b      	cmp	r3, r1
   1ada0:	d0fb      	beq.n	1ad9a <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   1ada2:	8983      	ldrh	r3, [r0, #12]
   1ada4:	3b02      	subs	r3, #2
   1ada6:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   1ada8:	2000      	movs	r0, #0
   1adaa:	6110      	str	r0, [r2, #16]
}
   1adac:	bd10      	pop	{r4, pc}

0001adae <att_op_get_type>:
	switch (op) {
   1adae:	281e      	cmp	r0, #30
   1adb0:	d816      	bhi.n	1ade0 <att_op_get_type+0x32>
   1adb2:	b308      	cbz	r0, 1adf8 <att_op_get_type+0x4a>
   1adb4:	1e43      	subs	r3, r0, #1
   1adb6:	2b1d      	cmp	r3, #29
   1adb8:	d81e      	bhi.n	1adf8 <att_op_get_type+0x4a>
   1adba:	e8df f003 	tbb	[pc, r3]
   1adbe:	2317      	.short	0x2317
   1adc0:	23172317 	.word	0x23172317
   1adc4:	23172317 	.word	0x23172317
   1adc8:	23172317 	.word	0x23172317
   1adcc:	23172317 	.word	0x23172317
   1add0:	231d1d17 	.word	0x231d1d17
   1add4:	1d172317 	.word	0x1d172317
   1add8:	0f1b1d19 	.word	0x0f1b1d19
   1addc:	2004      	movs	r0, #4
   1adde:	4770      	bx	lr
   1ade0:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1ade4:	2b52      	cmp	r3, #82	; 0x52
   1ade6:	d107      	bne.n	1adf8 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   1ade8:	2000      	movs	r0, #0
}
   1adea:	4770      	bx	lr
		return ATT_RESPONSE;
   1adec:	2002      	movs	r0, #2
   1adee:	4770      	bx	lr
		return ATT_NOTIFICATION;
   1adf0:	2003      	movs	r0, #3
   1adf2:	4770      	bx	lr
		return ATT_INDICATION;
   1adf4:	2005      	movs	r0, #5
   1adf6:	4770      	bx	lr
		return ATT_COMMAND;
   1adf8:	f010 0f40 	tst.w	r0, #64	; 0x40
   1adfc:	bf0c      	ite	eq
   1adfe:	2006      	moveq	r0, #6
   1ae00:	2000      	movne	r0, #0
   1ae02:	4770      	bx	lr
		return ATT_REQUEST;
   1ae04:	2001      	movs	r0, #1
   1ae06:	4770      	bx	lr

0001ae08 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   1ae08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1ae0a:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1ae0e:	2300      	movs	r3, #0
   1ae10:	9300      	str	r3, [sp, #0]
   1ae12:	461a      	mov	r2, r3
   1ae14:	f7ed fb6c 	bl	84f0 <bt_gatt_foreach_attr_type>
				  user_data);
}
   1ae18:	b005      	add	sp, #20
   1ae1a:	f85d fb04 	ldr.w	pc, [sp], #4

0001ae1e <find_info_cb>:
{
   1ae1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1ae20:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   1ae22:	6817      	ldr	r7, [r2, #0]
{
   1ae24:	4605      	mov	r5, r0
   1ae26:	460e      	mov	r6, r1
   1ae28:	4614      	mov	r4, r2
	if (!data->rsp) {
   1ae2a:	b963      	cbnz	r3, 1ae46 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   1ae2c:	6850      	ldr	r0, [r2, #4]
   1ae2e:	2101      	movs	r1, #1
   1ae30:	3008      	adds	r0, #8
   1ae32:	f002 feea 	bl	1dc0a <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1ae36:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1ae38:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1ae3a:	781b      	ldrb	r3, [r3, #0]
   1ae3c:	2b00      	cmp	r3, #0
   1ae3e:	bf0c      	ite	eq
   1ae40:	2301      	moveq	r3, #1
   1ae42:	2302      	movne	r3, #2
   1ae44:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1ae46:	68a3      	ldr	r3, [r4, #8]
   1ae48:	781b      	ldrb	r3, [r3, #0]
   1ae4a:	2b01      	cmp	r3, #1
   1ae4c:	d003      	beq.n	1ae56 <find_info_cb+0x38>
   1ae4e:	2b02      	cmp	r3, #2
   1ae50:	d019      	beq.n	1ae86 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   1ae52:	2000      	movs	r0, #0
   1ae54:	e016      	b.n	1ae84 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1ae56:	682b      	ldr	r3, [r5, #0]
   1ae58:	781b      	ldrb	r3, [r3, #0]
   1ae5a:	2b00      	cmp	r3, #0
   1ae5c:	d1f9      	bne.n	1ae52 <find_info_cb+0x34>
   1ae5e:	6860      	ldr	r0, [r4, #4]
   1ae60:	2104      	movs	r1, #4
   1ae62:	3008      	adds	r0, #8
   1ae64:	f002 fed1 	bl	1dc0a <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1ae68:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1ae6a:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1ae6c:	885b      	ldrh	r3, [r3, #2]
   1ae6e:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1ae70:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   1ae72:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   1ae74:	899b      	ldrh	r3, [r3, #12]
   1ae76:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   1ae7a:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1ae7c:	2804      	cmp	r0, #4
   1ae7e:	bf94      	ite	ls
   1ae80:	2000      	movls	r0, #0
   1ae82:	2001      	movhi	r0, #1
}
   1ae84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1ae86:	682b      	ldr	r3, [r5, #0]
   1ae88:	781b      	ldrb	r3, [r3, #0]
   1ae8a:	2b02      	cmp	r3, #2
   1ae8c:	d1e1      	bne.n	1ae52 <find_info_cb+0x34>
   1ae8e:	6860      	ldr	r0, [r4, #4]
   1ae90:	2112      	movs	r1, #18
   1ae92:	3008      	adds	r0, #8
   1ae94:	f002 feb9 	bl	1dc0a <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1ae98:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1ae9a:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1ae9c:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   1ae9e:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1aea2:	3101      	adds	r1, #1
   1aea4:	f7ff f9eb 	bl	1a27e <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   1aea8:	6863      	ldr	r3, [r4, #4]
   1aeaa:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   1aeae:	899b      	ldrh	r3, [r3, #12]
   1aeb0:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1aeb2:	2812      	cmp	r0, #18
   1aeb4:	e7e3      	b.n	1ae7e <find_info_cb+0x60>

0001aeb6 <att_chan_mtu_updated>:
{
   1aeb6:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   1aeb8:	6806      	ldr	r6, [r0, #0]
	return list->head;
   1aeba:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1aebc:	b30b      	cbz	r3, 1af02 <att_chan_mtu_updated+0x4c>
   1aebe:	f5b3 74a2 	subs.w	r4, r3, #324	; 0x144
   1aec2:	d01d      	beq.n	1af00 <att_chan_mtu_updated+0x4a>
	return node->next;
   1aec4:	681a      	ldr	r2, [r3, #0]
   1aec6:	b10a      	cbz	r2, 1aecc <att_chan_mtu_updated+0x16>
   1aec8:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
{
   1aecc:	2300      	movs	r3, #0
   1aece:	4619      	mov	r1, r3
		if (chan == updated_chan) {
   1aed0:	42a0      	cmp	r0, r4
   1aed2:	d009      	beq.n	1aee8 <att_chan_mtu_updated+0x32>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   1aed4:	f8b4 508a 	ldrh.w	r5, [r4, #138]	; 0x8a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   1aed8:	f8b4 407a 	ldrh.w	r4, [r4, #122]	; 0x7a
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   1aedc:	42a9      	cmp	r1, r5
   1aede:	bf38      	it	cc
   1aee0:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   1aee2:	42a3      	cmp	r3, r4
   1aee4:	bf38      	it	cc
   1aee6:	4623      	movcc	r3, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1aee8:	b162      	cbz	r2, 1af04 <att_chan_mtu_updated+0x4e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1aeea:	f512 75a2 	adds.w	r5, r2, #324	; 0x144
   1aeee:	d004      	beq.n	1aefa <att_chan_mtu_updated+0x44>
	return node->next;
   1aef0:	f8d2 5144 	ldr.w	r5, [r2, #324]	; 0x144
   1aef4:	b10d      	cbz	r5, 1aefa <att_chan_mtu_updated+0x44>
   1aef6:	f5a5 75a2 	sub.w	r5, r5, #324	; 0x144
{
   1aefa:	4614      	mov	r4, r2
   1aefc:	462a      	mov	r2, r5
   1aefe:	e7e7      	b.n	1aed0 <att_chan_mtu_updated+0x1a>
   1af00:	4623      	mov	r3, r4
   1af02:	4619      	mov	r1, r3
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   1af04:	f8b0 408a 	ldrh.w	r4, [r0, #138]	; 0x8a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   1af08:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   1af0c:	428c      	cmp	r4, r1
   1af0e:	d801      	bhi.n	1af14 <att_chan_mtu_updated+0x5e>
   1af10:	429a      	cmp	r2, r3
   1af12:	d909      	bls.n	1af28 <att_chan_mtu_updated+0x72>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1af14:	429a      	cmp	r2, r3
   1af16:	bf38      	it	cc
   1af18:	461a      	movcc	r2, r3
   1af1a:	42a1      	cmp	r1, r4
   1af1c:	6830      	ldr	r0, [r6, #0]
   1af1e:	bf38      	it	cc
   1af20:	4621      	movcc	r1, r4
}
   1af22:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1af24:	f7ee b872 	b.w	900c <bt_gatt_att_max_mtu_changed>
}
   1af28:	bc70      	pop	{r4, r5, r6}
   1af2a:	4770      	bx	lr

0001af2c <attr_read_group_cb>:
	if (!data->rsp->len) {
   1af2c:	68d0      	ldr	r0, [r2, #12]
   1af2e:	7803      	ldrb	r3, [r0, #0]
   1af30:	3104      	adds	r1, #4
   1af32:	b913      	cbnz	r3, 1af3a <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1af34:	7001      	strb	r1, [r0, #0]
	return true;
   1af36:	2001      	movs	r0, #1
}
   1af38:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1af3a:	428b      	cmp	r3, r1
   1af3c:	d0fb      	beq.n	1af36 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   1af3e:	6891      	ldr	r1, [r2, #8]
   1af40:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   1af42:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1af44:	3b04      	subs	r3, #4
   1af46:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   1af48:	6110      	str	r0, [r2, #16]
		return false;
   1af4a:	4770      	bx	lr

0001af4c <chan_req_sent>:
	if (chan->req) {
   1af4c:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   1af50:	b133      	cbz	r3, 1af60 <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   1af52:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1af56:	2300      	movs	r3, #0
   1af58:	f500 7088 	add.w	r0, r0, #272	; 0x110
   1af5c:	f7fc bf84 	b.w	17e68 <k_work_reschedule>
}
   1af60:	4770      	bx	lr

0001af62 <write_cb>:
{
   1af62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1af64:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1af66:	4601      	mov	r1, r0
{
   1af68:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1af6a:	222a      	movs	r2, #42	; 0x2a
   1af6c:	6820      	ldr	r0, [r4, #0]
   1af6e:	f000 fd88 	bl	1ba82 <bt_gatt_check_perm>
   1af72:	4605      	mov	r5, r0
   1af74:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1af76:	bb00      	cbnz	r0, 1afba <write_cb+0x58>
	if (!data->req) {
   1af78:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   1af7a:	68b7      	ldr	r7, [r6, #8]
   1af7c:	68e2      	ldr	r2, [r4, #12]
   1af7e:	6820      	ldr	r0, [r4, #0]
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1af80:	2b00      	cmp	r3, #0
   1af82:	bf14      	ite	ne
   1af84:	2300      	movne	r3, #0
   1af86:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1af88:	9301      	str	r3, [sp, #4]
   1af8a:	8a63      	ldrh	r3, [r4, #18]
   1af8c:	9300      	str	r3, [sp, #0]
   1af8e:	4631      	mov	r1, r6
   1af90:	8a23      	ldrh	r3, [r4, #16]
   1af92:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   1af94:	1e03      	subs	r3, r0, #0
   1af96:	db05      	blt.n	1afa4 <write_cb+0x42>
   1af98:	8a22      	ldrh	r2, [r4, #16]
   1af9a:	4293      	cmp	r3, r2
   1af9c:	d10b      	bne.n	1afb6 <write_cb+0x54>
	data->err = 0U;
   1af9e:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1afa0:	2501      	movs	r5, #1
   1afa2:	e005      	b.n	1afb0 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   1afa4:	f113 0fff 	cmn.w	r3, #255	; 0xff
   1afa8:	d305      	bcc.n	1afb6 <write_cb+0x54>
		return -err;
   1afaa:	425b      	negs	r3, r3
   1afac:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   1afae:	7523      	strb	r3, [r4, #20]
}
   1afb0:	4628      	mov	r0, r5
   1afb2:	b003      	add	sp, #12
   1afb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   1afb6:	230e      	movs	r3, #14
   1afb8:	e7f9      	b.n	1afae <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   1afba:	2500      	movs	r5, #0
   1afbc:	e7f8      	b.n	1afb0 <write_cb+0x4e>

0001afbe <chan_req_send>:
{
   1afbe:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1afc0:	688e      	ldr	r6, [r1, #8]
{
   1afc2:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1afc4:	4630      	mov	r0, r6
   1afc6:	f7ff fed4 	bl	1ad72 <net_buf_frags_len>
   1afca:	f8b5 308a 	ldrh.w	r3, [r5, #138]	; 0x8a
   1afce:	4283      	cmp	r3, r0
{
   1afd0:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1afd2:	d30a      	bcc.n	1afea <chan_req_send+0x2c>
	req->buf = NULL;
   1afd4:	2200      	movs	r2, #0
	chan->req = req;
   1afd6:	f8c5 10f4 	str.w	r1, [r5, #244]	; 0xf4
	err = chan_send(chan, buf, NULL);
   1afda:	4628      	mov	r0, r5
	req->buf = NULL;
   1afdc:	608a      	str	r2, [r1, #8]
	err = chan_send(chan, buf, NULL);
   1afde:	4631      	mov	r1, r6
   1afe0:	f7eb fe6e 	bl	6cc0 <chan_send>
	if (err) {
   1afe4:	b100      	cbz	r0, 1afe8 <chan_req_send+0x2a>
		req->buf = buf;
   1afe6:	60a6      	str	r6, [r4, #8]
}
   1afe8:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   1afea:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1afee:	e7fb      	b.n	1afe8 <chan_req_send+0x2a>

0001aff0 <process_queue>:
{
   1aff0:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   1aff2:	2200      	movs	r2, #0
{
   1aff4:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   1aff6:	2300      	movs	r3, #0
   1aff8:	4608      	mov	r0, r1
{
   1affa:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   1affc:	f002 fd85 	bl	1db0a <net_buf_get>
	if (buf) {
   1b000:	4605      	mov	r5, r0
   1b002:	b160      	cbz	r0, 1b01e <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   1b004:	4601      	mov	r1, r0
   1b006:	2200      	movs	r2, #0
   1b008:	4620      	mov	r0, r4
   1b00a:	f7eb fe59 	bl	6cc0 <chan_send>
		if (err) {
   1b00e:	4604      	mov	r4, r0
   1b010:	b118      	cbz	r0, 1b01a <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   1b012:	4629      	mov	r1, r5
   1b014:	4630      	mov	r0, r6
   1b016:	f003 fa25 	bl	1e464 <k_queue_prepend>
}
   1b01a:	4620      	mov	r0, r4
   1b01c:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1b01e:	f06f 0401 	mvn.w	r4, #1
   1b022:	e7fa      	b.n	1b01a <process_queue+0x2a>

0001b024 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b024:	b510      	push	{r4, lr}
	return list->head;
   1b026:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b028:	2200      	movs	r2, #0
   1b02a:	b153      	cbz	r3, 1b042 <sys_slist_find_and_remove.isra.0+0x1e>
   1b02c:	428b      	cmp	r3, r1
   1b02e:	d10e      	bne.n	1b04e <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   1b030:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   1b032:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   1b034:	b932      	cbnz	r2, 1b044 <sys_slist_find_and_remove.isra.0+0x20>
   1b036:	42a1      	cmp	r1, r4
	list->head = node;
   1b038:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b03a:	d100      	bne.n	1b03e <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   1b03c:	6043      	str	r3, [r0, #4]
	parent->next = child;
   1b03e:	2300      	movs	r3, #0
   1b040:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b042:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   1b044:	42a1      	cmp	r1, r4
	parent->next = child;
   1b046:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1b048:	bf08      	it	eq
   1b04a:	6042      	streq	r2, [r0, #4]
}
   1b04c:	e7f7      	b.n	1b03e <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   1b04e:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b050:	681b      	ldr	r3, [r3, #0]
   1b052:	e7ea      	b.n	1b02a <sys_slist_find_and_remove.isra.0+0x6>

0001b054 <att_chan_read>:
{
   1b054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b058:	4680      	mov	r8, r0
   1b05a:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1b05c:	4610      	mov	r0, r2
{
   1b05e:	4699      	mov	r9, r3
   1b060:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1b062:	f7ff fe86 	bl	1ad72 <net_buf_frags_len>
   1b066:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   1b06a:	4283      	cmp	r3, r0
{
   1b06c:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1b06e:	d97a      	bls.n	1b166 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1b070:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1b074:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1b076:	4630      	mov	r0, r6
   1b078:	f002 fd99 	bl	1dbae <net_buf_frag_last>
	size_t len, total = 0;
   1b07c:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1b080:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1b082:	4630      	mov	r0, r6
   1b084:	f7ff fe75 	bl	1ad72 <net_buf_frags_len>
   1b088:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   1b08c:	f105 0708 	add.w	r7, r5, #8
   1b090:	1a24      	subs	r4, r4, r0
   1b092:	4638      	mov	r0, r7
   1b094:	f002 fe49 	bl	1dd2a <net_buf_simple_tailroom>
   1b098:	4284      	cmp	r4, r0
   1b09a:	d211      	bcs.n	1b0c0 <att_chan_read+0x6c>
   1b09c:	4630      	mov	r0, r6
   1b09e:	f7ff fe68 	bl	1ad72 <net_buf_frags_len>
   1b0a2:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   1b0a6:	1a24      	subs	r4, r4, r0
		if (!len) {
   1b0a8:	bb34      	cbnz	r4, 1b0f8 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1b0aa:	79b0      	ldrb	r0, [r6, #6]
   1b0ac:	f7fa fabe 	bl	1562c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1b0b0:	2200      	movs	r2, #0
   1b0b2:	2300      	movs	r3, #0
   1b0b4:	f002 fd24 	bl	1db00 <net_buf_alloc_fixed>
			if (!frag) {
   1b0b8:	4605      	mov	r5, r0
   1b0ba:	b930      	cbnz	r0, 1b0ca <att_chan_read+0x76>
	return total;
   1b0bc:	4657      	mov	r7, sl
   1b0be:	e02c      	b.n	1b11a <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   1b0c0:	4638      	mov	r0, r7
   1b0c2:	f002 fe32 	bl	1dd2a <net_buf_simple_tailroom>
   1b0c6:	4604      	mov	r4, r0
   1b0c8:	e7ee      	b.n	1b0a8 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1b0ca:	4601      	mov	r1, r0
   1b0cc:	4630      	mov	r0, r6
   1b0ce:	f002 fd7f 	bl	1dbd0 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1b0d2:	4630      	mov	r0, r6
   1b0d4:	f7ff fe4d 	bl	1ad72 <net_buf_frags_len>
   1b0d8:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   1b0dc:	f105 0708 	add.w	r7, r5, #8
   1b0e0:	1a24      	subs	r4, r4, r0
   1b0e2:	4638      	mov	r0, r7
   1b0e4:	f002 fe21 	bl	1dd2a <net_buf_simple_tailroom>
   1b0e8:	4284      	cmp	r4, r0
   1b0ea:	d21a      	bcs.n	1b122 <att_chan_read+0xce>
   1b0ec:	4630      	mov	r0, r6
   1b0ee:	f7ff fe40 	bl	1ad72 <net_buf_frags_len>
   1b0f2:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   1b0f6:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1b0f8:	68a9      	ldr	r1, [r5, #8]
   1b0fa:	89aa      	ldrh	r2, [r5, #12]
   1b0fc:	f8db 7004 	ldr.w	r7, [fp, #4]
   1b100:	9803      	ldr	r0, [sp, #12]
   1b102:	f8cd 9000 	str.w	r9, [sp]
   1b106:	440a      	add	r2, r1
   1b108:	b2a3      	uxth	r3, r4
   1b10a:	4659      	mov	r1, fp
   1b10c:	47b8      	blx	r7
		if (read < 0) {
   1b10e:	1e07      	subs	r7, r0, #0
   1b110:	da0c      	bge.n	1b12c <att_chan_read+0xd8>
				return total;
   1b112:	f1ba 0f00 	cmp.w	sl, #0
   1b116:	bf18      	it	ne
   1b118:	4657      	movne	r7, sl
}
   1b11a:	4638      	mov	r0, r7
   1b11c:	b005      	add	sp, #20
   1b11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b122:	4638      	mov	r0, r7
   1b124:	f002 fe01 	bl	1dd2a <net_buf_simple_tailroom>
   1b128:	4604      	mov	r4, r0
   1b12a:	e7e5      	b.n	1b0f8 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1b12c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b12e:	b993      	cbnz	r3, 1b156 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   1b130:	4639      	mov	r1, r7
   1b132:	f105 0008 	add.w	r0, r5, #8
   1b136:	f002 fd68 	bl	1dc0a <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1b13a:	4630      	mov	r0, r6
   1b13c:	f7ff fe19 	bl	1ad72 <net_buf_frags_len>
   1b140:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
		offset += read;
   1b144:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1b146:	4283      	cmp	r3, r0
		total += read;
   1b148:	44ba      	add	sl, r7
		offset += read;
   1b14a:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1b14e:	d9b5      	bls.n	1b0bc <att_chan_read+0x68>
   1b150:	42a7      	cmp	r7, r4
   1b152:	d096      	beq.n	1b082 <att_chan_read+0x2e>
   1b154:	e7b2      	b.n	1b0bc <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1b156:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1b158:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b15a:	4639      	mov	r1, r7
   1b15c:	4628      	mov	r0, r5
   1b15e:	4798      	blx	r3
   1b160:	2800      	cmp	r0, #0
   1b162:	d1e5      	bne.n	1b130 <att_chan_read+0xdc>
   1b164:	e7aa      	b.n	1b0bc <att_chan_read+0x68>
		return 0;
   1b166:	2700      	movs	r7, #0
   1b168:	e7d7      	b.n	1b11a <att_chan_read+0xc6>

0001b16a <chan_cfm_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b16a:	30f0      	adds	r0, #240	; 0xf0
   1b16c:	f3bf 8f5b 	dmb	ish
   1b170:	e850 3f00 	ldrex	r3, [r0]
   1b174:	f023 0302 	bic.w	r3, r3, #2
   1b178:	e840 3200 	strex	r2, r3, [r0]
   1b17c:	2a00      	cmp	r2, #0
   1b17e:	d1f7      	bne.n	1b170 <chan_cfm_sent+0x6>
   1b180:	f3bf 8f5b 	dmb	ish
}
   1b184:	4770      	bx	lr

0001b186 <chan_rsp_sent>:
   1b186:	30f0      	adds	r0, #240	; 0xf0
   1b188:	f3bf 8f5b 	dmb	ish
   1b18c:	e850 3f00 	ldrex	r3, [r0]
   1b190:	f023 0301 	bic.w	r3, r3, #1
   1b194:	e840 3200 	strex	r2, r3, [r0]
   1b198:	2a00      	cmp	r2, #0
   1b19a:	d1f7      	bne.n	1b18c <chan_rsp_sent+0x6>
   1b19c:	f3bf 8f5b 	dmb	ish
}
   1b1a0:	4770      	bx	lr

0001b1a2 <read_cb>:
{
   1b1a2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   1b1a6:	f8d2 8000 	ldr.w	r8, [r2]
{
   1b1aa:	4606      	mov	r6, r0
	data->err = 0x00;
   1b1ac:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   1b1ae:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   1b1b2:	7317      	strb	r7, [r2, #12]
{
   1b1b4:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1b1b6:	4631      	mov	r1, r6
   1b1b8:	2215      	movs	r2, #21
   1b1ba:	f000 fc62 	bl	1ba82 <bt_gatt_check_perm>
   1b1be:	4604      	mov	r4, r0
   1b1c0:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   1b1c2:	b9a0      	cbnz	r0, 1b1ee <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1b1c4:	e9cd 0000 	strd	r0, r0, [sp]
   1b1c8:	88ab      	ldrh	r3, [r5, #4]
   1b1ca:	68aa      	ldr	r2, [r5, #8]
   1b1cc:	4631      	mov	r1, r6
   1b1ce:	4640      	mov	r0, r8
   1b1d0:	f7ff ff40 	bl	1b054 <att_chan_read>
	if (ret < 0) {
   1b1d4:	1e03      	subs	r3, r0, #0
   1b1d6:	da0c      	bge.n	1b1f2 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   1b1d8:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   1b1dc:	bf26      	itte	cs
   1b1de:	425b      	negcs	r3, r3
   1b1e0:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   1b1e2:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   1b1e4:	732b      	strb	r3, [r5, #12]
}
   1b1e6:	4620      	mov	r0, r4
   1b1e8:	b002      	add	sp, #8
   1b1ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   1b1ee:	463c      	mov	r4, r7
   1b1f0:	e7f9      	b.n	1b1e6 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   1b1f2:	2401      	movs	r4, #1
   1b1f4:	e7f7      	b.n	1b1e6 <read_cb+0x44>

0001b1f6 <bt_att_sent>:
{
   1b1f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   1b1f8:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
	struct bt_att *att = chan->att;
   1b1fc:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   1b200:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1b202:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   1b206:	b10b      	cbz	r3, 1b20c <bt_att_sent+0x16>
		chan->sent(chan);
   1b208:	4638      	mov	r0, r7
   1b20a:	4798      	blx	r3
   1b20c:	f3bf 8f5b 	dmb	ish
   1b210:	f105 03e8 	add.w	r3, r5, #232	; 0xe8
   1b214:	e853 2f00 	ldrex	r2, [r3]
   1b218:	f022 0210 	bic.w	r2, r2, #16
   1b21c:	e843 2100 	strex	r1, r2, [r3]
   1b220:	2900      	cmp	r1, #0
   1b222:	d1f7      	bne.n	1b214 <bt_att_sent+0x1e>
   1b224:	f3bf 8f5b 	dmb	ish
	if (!att) {
   1b228:	b30c      	cbz	r4, 1b26e <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1b22a:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   1b22e:	b98b      	cbnz	r3, 1b254 <bt_att_sent+0x5e>
   1b230:	6863      	ldr	r3, [r4, #4]
   1b232:	b17b      	cbz	r3, 1b254 <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1b234:	1d20      	adds	r0, r4, #4
   1b236:	f7ff fd92 	bl	1ad5e <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1b23a:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1b23c:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1b23e:	4638      	mov	r0, r7
   1b240:	f7ff febd 	bl	1afbe <chan_req_send>
   1b244:	2800      	cmp	r0, #0
   1b246:	da12      	bge.n	1b26e <bt_att_sent+0x78>
	parent->next = child;
   1b248:	6863      	ldr	r3, [r4, #4]
   1b24a:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1b24c:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   1b24e:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   1b250:	b903      	cbnz	r3, 1b254 <bt_att_sent+0x5e>
	list->tail = node;
   1b252:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   1b254:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   1b258:	4638      	mov	r0, r7
   1b25a:	f7ff fec9 	bl	1aff0 <process_queue>
	if (!err) {
   1b25e:	b130      	cbz	r0, 1b26e <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   1b260:	f104 010c 	add.w	r1, r4, #12
   1b264:	4638      	mov	r0, r7
}
   1b266:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   1b26a:	f7ff bec1 	b.w	1aff0 <process_queue>
}
   1b26e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b270 <att_req_send_process>:
{
   1b270:	b570      	push	{r4, r5, r6, lr}
   1b272:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   1b274:	3004      	adds	r0, #4
   1b276:	f7ff fd72 	bl	1ad5e <sys_slist_get>
	if (!node) {
   1b27a:	4606      	mov	r6, r0
   1b27c:	b1c0      	cbz	r0, 1b2b0 <att_req_send_process+0x40>
	return list->head;
   1b27e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b280:	b153      	cbz	r3, 1b298 <att_req_send_process+0x28>
   1b282:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   1b286:	d007      	beq.n	1b298 <att_req_send_process+0x28>
	return node->next;
   1b288:	681c      	ldr	r4, [r3, #0]
   1b28a:	b10c      	cbz	r4, 1b290 <att_req_send_process+0x20>
   1b28c:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
		if (!chan->req) {
   1b290:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   1b294:	b13b      	cbz	r3, 1b2a6 <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b296:	b964      	cbnz	r4, 1b2b2 <att_req_send_process+0x42>
	parent->next = child;
   1b298:	686b      	ldr	r3, [r5, #4]
   1b29a:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1b29c:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   1b29e:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1b2a0:	b933      	cbnz	r3, 1b2b0 <att_req_send_process+0x40>
	list->tail = node;
   1b2a2:	60ae      	str	r6, [r5, #8]
}
   1b2a4:	e004      	b.n	1b2b0 <att_req_send_process+0x40>
	return chan_req_send(chan, req);
   1b2a6:	4631      	mov	r1, r6
   1b2a8:	f7ff fe89 	bl	1afbe <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1b2ac:	2800      	cmp	r0, #0
   1b2ae:	dbf2      	blt.n	1b296 <att_req_send_process+0x26>
}
   1b2b0:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b2b2:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   1b2b6:	d004      	beq.n	1b2c2 <att_req_send_process+0x52>
	return node->next;
   1b2b8:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b2bc:	b10b      	cbz	r3, 1b2c2 <att_req_send_process+0x52>
   1b2be:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   1b2c2:	4620      	mov	r0, r4
   1b2c4:	461c      	mov	r4, r3
   1b2c6:	e7e3      	b.n	1b290 <att_req_send_process+0x20>

0001b2c8 <bt_att_status>:
{
   1b2c8:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b2ca:	f3bf 8f5b 	dmb	ish
   1b2ce:	680b      	ldr	r3, [r1, #0]
   1b2d0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1b2d4:	07db      	lsls	r3, r3, #31
{
   1b2d6:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1b2d8:	d519      	bpl.n	1b30e <bt_att_status+0x46>
	if (!chan->att) {
   1b2da:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1b2de:	b1b0      	cbz	r0, 1b30e <bt_att_status+0x46>
	if (chan->req) {
   1b2e0:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   1b2e4:	b99b      	cbnz	r3, 1b30e <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   1b2e6:	3004      	adds	r0, #4
   1b2e8:	f7ff fd39 	bl	1ad5e <sys_slist_get>
	if (!node) {
   1b2ec:	4604      	mov	r4, r0
   1b2ee:	b170      	cbz	r0, 1b30e <bt_att_status+0x46>
	return chan_req_send(chan, req);
   1b2f0:	4601      	mov	r1, r0
   1b2f2:	f1a5 0008 	sub.w	r0, r5, #8
   1b2f6:	f7ff fe62 	bl	1afbe <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1b2fa:	2800      	cmp	r0, #0
   1b2fc:	da07      	bge.n	1b30e <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   1b2fe:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   1b302:	685a      	ldr	r2, [r3, #4]
   1b304:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1b306:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1b308:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1b30a:	b902      	cbnz	r2, 1b30e <bt_att_status+0x46>
	list->tail = node;
   1b30c:	609c      	str	r4, [r3, #8]
}
   1b30e:	bd38      	pop	{r3, r4, r5, pc}

0001b310 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1b310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b314:	4688      	mov	r8, r1
   1b316:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1b318:	2101      	movs	r1, #1
   1b31a:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1b31c:	4605      	mov	r5, r0
   1b31e:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1b320:	f7eb fed6 	bl	70d0 <bt_att_chan_create_pdu>
	if (!buf) {
   1b324:	4604      	mov	r4, r0
   1b326:	b170      	cbz	r0, 1b346 <send_err_rsp.part.0+0x36>
   1b328:	2104      	movs	r1, #4
   1b32a:	3008      	adds	r0, #8
   1b32c:	f002 fc6d 	bl	1dc0a <net_buf_simple_add>
	rsp->request = req;
   1b330:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   1b334:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   1b336:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1b33a:	4621      	mov	r1, r4
   1b33c:	4628      	mov	r0, r5
}
   1b33e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1b342:	f7eb bd2b 	b.w	6d9c <bt_att_chan_send_rsp.constprop.0>
}
   1b346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b34a <att_write_cmd>:
{
   1b34a:	b530      	push	{r4, r5, lr}
   1b34c:	460c      	mov	r4, r1
   1b34e:	b085      	sub	sp, #20
   1b350:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1b352:	f101 0008 	add.w	r0, r1, #8
   1b356:	f002 fcc9 	bl	1dcec <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1b35a:	89a2      	ldrh	r2, [r4, #12]
   1b35c:	9202      	str	r2, [sp, #8]
   1b35e:	68a2      	ldr	r2, [r4, #8]
   1b360:	9201      	str	r2, [sp, #4]
   1b362:	2200      	movs	r2, #0
   1b364:	4603      	mov	r3, r0
   1b366:	9200      	str	r2, [sp, #0]
   1b368:	4611      	mov	r1, r2
   1b36a:	4628      	mov	r0, r5
   1b36c:	f7eb ffa4 	bl	72b8 <att_write_rsp>
}
   1b370:	b005      	add	sp, #20
   1b372:	bd30      	pop	{r4, r5, pc}

0001b374 <att_write_req>:
{
   1b374:	b530      	push	{r4, r5, lr}
   1b376:	460c      	mov	r4, r1
   1b378:	b085      	sub	sp, #20
   1b37a:	4605      	mov	r5, r0
   1b37c:	f101 0008 	add.w	r0, r1, #8
   1b380:	f002 fcb4 	bl	1dcec <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1b384:	89a2      	ldrh	r2, [r4, #12]
   1b386:	9202      	str	r2, [sp, #8]
   1b388:	68a2      	ldr	r2, [r4, #8]
   1b38a:	9201      	str	r2, [sp, #4]
   1b38c:	2200      	movs	r2, #0
   1b38e:	4603      	mov	r3, r0
   1b390:	9200      	str	r2, [sp, #0]
   1b392:	2112      	movs	r1, #18
   1b394:	2213      	movs	r2, #19
   1b396:	4628      	mov	r0, r5
   1b398:	f7eb ff8e 	bl	72b8 <att_write_rsp>
}
   1b39c:	b005      	add	sp, #20
   1b39e:	bd30      	pop	{r4, r5, pc}

0001b3a0 <att_exec_write_req>:
{
   1b3a0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return att_exec_write_rsp(chan, req->flags);
   1b3a4:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = chan->chan.chan.conn;
   1b3a6:	6887      	ldr	r7, [r0, #8]
	return att_exec_write_rsp(chan, req->flags);
   1b3a8:	f893 8000 	ldrb.w	r8, [r3]
{
   1b3ac:	4606      	mov	r6, r0
	uint8_t err = 0U;
   1b3ae:	2400      	movs	r4, #0
	while ((buf = net_buf_get(&chan->att->prep_queue, K_NO_WAIT))) {
   1b3b0:	6830      	ldr	r0, [r6, #0]
   1b3b2:	2200      	movs	r2, #0
   1b3b4:	2300      	movs	r3, #0
   1b3b6:	3024      	adds	r0, #36	; 0x24
   1b3b8:	f002 fba7 	bl	1db0a <net_buf_get>
   1b3bc:	4605      	mov	r5, r0
   1b3be:	b970      	cbnz	r0, 1b3de <att_exec_write_req+0x3e>
	if (err) {
   1b3c0:	bb4c      	cbnz	r4, 1b416 <att_exec_write_req+0x76>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_EXEC_WRITE_RSP, 0);
   1b3c2:	2119      	movs	r1, #25
   1b3c4:	4622      	mov	r2, r4
   1b3c6:	4638      	mov	r0, r7
   1b3c8:	f7eb ffda 	bl	7380 <bt_att_create_pdu>
	if (!buf) {
   1b3cc:	4601      	mov	r1, r0
   1b3ce:	b320      	cbz	r0, 1b41a <att_exec_write_req+0x7a>
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1b3d0:	4630      	mov	r0, r6
   1b3d2:	f7eb fce3 	bl	6d9c <bt_att_chan_send_rsp.constprop.0>
}
   1b3d6:	4620      	mov	r0, r4
   1b3d8:	b004      	add	sp, #16
   1b3da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!err && flags == BT_ATT_FLAG_EXEC) {
   1b3de:	b9b4      	cbnz	r4, 1b40e <att_exec_write_req+0x6e>
   1b3e0:	f1b8 0f01 	cmp.w	r8, #1
   1b3e4:	d113      	bne.n	1b40e <att_exec_write_req+0x6e>
			err = att_write_rsp(chan, BT_ATT_OP_EXEC_WRITE_REQ, 0,
   1b3e6:	89aa      	ldrh	r2, [r5, #12]
   1b3e8:	8aab      	ldrh	r3, [r5, #20]
   1b3ea:	9202      	str	r2, [sp, #8]
   1b3ec:	68aa      	ldr	r2, [r5, #8]
   1b3ee:	9201      	str	r2, [sp, #4]
   1b3f0:	8aea      	ldrh	r2, [r5, #22]
   1b3f2:	9200      	str	r2, [sp, #0]
   1b3f4:	2118      	movs	r1, #24
   1b3f6:	4622      	mov	r2, r4
   1b3f8:	4630      	mov	r0, r6
   1b3fa:	f7eb ff5d 	bl	72b8 <att_write_rsp>
			if (err) {
   1b3fe:	4604      	mov	r4, r0
   1b400:	b128      	cbz	r0, 1b40e <att_exec_write_req+0x6e>
	if (!req) {
   1b402:	4603      	mov	r3, r0
   1b404:	8aaa      	ldrh	r2, [r5, #20]
   1b406:	2118      	movs	r1, #24
   1b408:	4630      	mov	r0, r6
   1b40a:	f7ff ff81 	bl	1b310 <send_err_rsp.part.0>
		net_buf_unref(buf);
   1b40e:	4628      	mov	r0, r5
   1b410:	f7fa f9ca 	bl	157a8 <net_buf_unref>
   1b414:	e7cc      	b.n	1b3b0 <att_exec_write_req+0x10>
		return 0;
   1b416:	4604      	mov	r4, r0
   1b418:	e7dd      	b.n	1b3d6 <att_exec_write_req+0x36>
		return BT_ATT_ERR_UNLIKELY;
   1b41a:	240e      	movs	r4, #14
   1b41c:	e7db      	b.n	1b3d6 <att_exec_write_req+0x36>

0001b41e <att_read_blob_req>:
{
   1b41e:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1b420:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1b422:	8813      	ldrh	r3, [r2, #0]
   1b424:	8852      	ldrh	r2, [r2, #2]
   1b426:	9200      	str	r2, [sp, #0]
   1b428:	210c      	movs	r1, #12
   1b42a:	220d      	movs	r2, #13
   1b42c:	f7ec f91a 	bl	7664 <att_read_rsp>
}
   1b430:	b003      	add	sp, #12
   1b432:	f85d fb04 	ldr.w	pc, [sp], #4

0001b436 <att_read_req>:
{
   1b436:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   1b438:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1b43a:	2200      	movs	r2, #0
   1b43c:	881b      	ldrh	r3, [r3, #0]
   1b43e:	9200      	str	r2, [sp, #0]
   1b440:	210a      	movs	r1, #10
   1b442:	220b      	movs	r2, #11
   1b444:	f7ec f90e 	bl	7664 <att_read_rsp>
}
   1b448:	b003      	add	sp, #12
   1b44a:	f85d fb04 	ldr.w	pc, [sp], #4

0001b44e <att_mtu_req>:
{
   1b44e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   1b450:	6803      	ldr	r3, [r0, #0]
{
   1b452:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   1b454:	6818      	ldr	r0, [r3, #0]
   1b456:	f3bf 8f5b 	dmb	ish
   1b45a:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   1b45e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1b462:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   1b466:	071b      	lsls	r3, r3, #28
   1b468:	d420      	bmi.n	1b4ac <att_mtu_req+0x5e>
	mtu_client = sys_le16_to_cpu(req->mtu);
   1b46a:	688b      	ldr	r3, [r1, #8]
   1b46c:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   1b46e:	2e16      	cmp	r6, #22
   1b470:	d91e      	bls.n	1b4b0 <att_mtu_req+0x62>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   1b472:	2202      	movs	r2, #2
   1b474:	2103      	movs	r1, #3
   1b476:	f7eb ff83 	bl	7380 <bt_att_create_pdu>
	if (!pdu) {
   1b47a:	4607      	mov	r7, r0
   1b47c:	b1d0      	cbz	r0, 1b4b4 <att_mtu_req+0x66>
	return net_buf_simple_add(&buf->b, len);
   1b47e:	2102      	movs	r1, #2
   1b480:	3008      	adds	r0, #8
   1b482:	f002 fbc2 	bl	1dc0a <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1b486:	2345      	movs	r3, #69	; 0x45
   1b488:	7003      	strb	r3, [r0, #0]
   1b48a:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   1b48c:	4639      	mov	r1, r7
   1b48e:	4620      	mov	r0, r4
   1b490:	f7eb fc84 	bl	6d9c <bt_att_chan_send_rsp.constprop.0>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1b494:	2e45      	cmp	r6, #69	; 0x45
   1b496:	bf28      	it	cs
   1b498:	2645      	movcs	r6, #69	; 0x45
	att_chan_mtu_updated(chan);
   1b49a:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1b49c:	f8a4 607a 	strh.w	r6, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1b4a0:	f8a4 608a 	strh.w	r6, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   1b4a4:	f7ff fd07 	bl	1aeb6 <att_chan_mtu_updated>
	return 0;
   1b4a8:	4628      	mov	r0, r5
}
   1b4aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   1b4ac:	2006      	movs	r0, #6
   1b4ae:	e7fc      	b.n	1b4aa <att_mtu_req+0x5c>
		return BT_ATT_ERR_INVALID_PDU;
   1b4b0:	2004      	movs	r0, #4
   1b4b2:	e7fa      	b.n	1b4aa <att_mtu_req+0x5c>
		return BT_ATT_ERR_UNLIKELY;
   1b4b4:	200e      	movs	r0, #14
   1b4b6:	e7f8      	b.n	1b4aa <att_mtu_req+0x5c>

0001b4b8 <bt_att_init>:
	bt_gatt_init();
   1b4b8:	f7ec bfa0 	b.w	83fc <bt_gatt_init>

0001b4bc <bt_att_get_mtu>:
{
   1b4bc:	b508      	push	{r3, lr}
	att = att_get(conn);
   1b4be:	f7eb fb01 	bl	6ac4 <att_get>
	if (!att) {
   1b4c2:	b1d8      	cbz	r0, 1b4fc <bt_att_get_mtu+0x40>
	return list->head;
   1b4c4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b4c6:	b1c8      	cbz	r0, 1b4fc <bt_att_get_mtu+0x40>
   1b4c8:	f5b0 71a2 	subs.w	r1, r0, #324	; 0x144
   1b4cc:	d015      	beq.n	1b4fa <bt_att_get_mtu+0x3e>
	return node->next;
   1b4ce:	6803      	ldr	r3, [r0, #0]
   1b4d0:	b10b      	cbz	r3, 1b4d6 <bt_att_get_mtu+0x1a>
   1b4d2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   1b4d6:	2000      	movs	r0, #0
		if (chan->chan.tx.mtu > mtu) {
   1b4d8:	f8b1 208a 	ldrh.w	r2, [r1, #138]	; 0x8a
   1b4dc:	4290      	cmp	r0, r2
   1b4de:	bf38      	it	cc
   1b4e0:	4610      	movcc	r0, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b4e2:	b15b      	cbz	r3, 1b4fc <bt_att_get_mtu+0x40>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b4e4:	f513 72a2 	adds.w	r2, r3, #324	; 0x144
   1b4e8:	d004      	beq.n	1b4f4 <bt_att_get_mtu+0x38>
	return node->next;
   1b4ea:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
   1b4ee:	b10a      	cbz	r2, 1b4f4 <bt_att_get_mtu+0x38>
   1b4f0:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
{
   1b4f4:	4619      	mov	r1, r3
   1b4f6:	4613      	mov	r3, r2
   1b4f8:	e7ee      	b.n	1b4d8 <bt_att_get_mtu+0x1c>
		return 0;
   1b4fa:	4608      	mov	r0, r1
}
   1b4fc:	bd08      	pop	{r3, pc}

0001b4fe <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1b4fe:	898a      	ldrh	r2, [r1, #12]
   1b500:	6889      	ldr	r1, [r1, #8]
   1b502:	2300      	movs	r3, #0
   1b504:	f7ec ba20 	b.w	7948 <att_handle_rsp>

0001b508 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   1b508:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1b50c:	4607      	mov	r7, r0
   1b50e:	460d      	mov	r5, r1
   1b510:	4616      	mov	r6, r2
   1b512:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   1b514:	f7eb fad6 	bl	6ac4 <att_get>
	if (!att) {
   1b518:	4604      	mov	r4, r0
   1b51a:	b938      	cbnz	r0, 1b52c <bt_att_send+0x24>
		net_buf_unref(buf);
   1b51c:	4628      	mov	r0, r5
   1b51e:	f7fa f943 	bl	157a8 <net_buf_unref>
		return -ENOTCONN;
   1b522:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   1b526:	b002      	add	sp, #8
   1b528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   1b52c:	b146      	cbz	r6, 1b540 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   1b52e:	f8cd 8000 	str.w	r8, [sp]
   1b532:	4633      	mov	r3, r6
   1b534:	462a      	mov	r2, r5
   1b536:	2104      	movs	r1, #4
   1b538:	4638      	mov	r0, r7
   1b53a:	f7ff fbd6 	bl	1acea <bt_l2cap_send_cb>
   1b53e:	e7f2      	b.n	1b526 <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
   1b540:	f100 060c 	add.w	r6, r0, #12
   1b544:	4629      	mov	r1, r5
   1b546:	4630      	mov	r0, r6
   1b548:	f002 fb20 	bl	1db8c <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   1b54c:	2200      	movs	r2, #0
   1b54e:	2300      	movs	r3, #0
   1b550:	4630      	mov	r0, r6
   1b552:	f002 fada 	bl	1db0a <net_buf_get>
	if (!buf) {
   1b556:	4605      	mov	r5, r0
   1b558:	b908      	cbnz	r0, 1b55e <bt_att_send+0x56>
	return 0;
   1b55a:	2000      	movs	r0, #0
   1b55c:	e7e3      	b.n	1b526 <bt_att_send+0x1e>
	return list->head;
   1b55e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b560:	b1c3      	cbz	r3, 1b594 <bt_att_send+0x8c>
   1b562:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   1b566:	d015      	beq.n	1b594 <bt_att_send+0x8c>
	return node->next;
   1b568:	681c      	ldr	r4, [r3, #0]
   1b56a:	b10c      	cbz	r4, 1b570 <bt_att_send+0x68>
   1b56c:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
	return chan_send(chan, buf, cb);
   1b570:	2200      	movs	r2, #0
   1b572:	4629      	mov	r1, r5
   1b574:	f7eb fba4 	bl	6cc0 <chan_send>
		if (err >= 0) {
   1b578:	2800      	cmp	r0, #0
   1b57a:	daee      	bge.n	1b55a <bt_att_send+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b57c:	b154      	cbz	r4, 1b594 <bt_att_send+0x8c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b57e:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   1b582:	d004      	beq.n	1b58e <bt_att_send+0x86>
	return node->next;
   1b584:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   1b588:	b10b      	cbz	r3, 1b58e <bt_att_send+0x86>
   1b58a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   1b58e:	4620      	mov	r0, r4
   1b590:	461c      	mov	r4, r3
   1b592:	e7ed      	b.n	1b570 <bt_att_send+0x68>
		k_queue_prepend(&att->tx_queue._queue, buf);
   1b594:	4629      	mov	r1, r5
   1b596:	4630      	mov	r0, r6
   1b598:	f002 ff64 	bl	1e464 <k_queue_prepend>
   1b59c:	e7dd      	b.n	1b55a <bt_att_send+0x52>

0001b59e <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1b59e:	b510      	push	{r4, lr}
   1b5a0:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   1b5a2:	f7eb fa8f 	bl	6ac4 <att_get>
	if (!att) {
   1b5a6:	b160      	cbz	r0, 1b5c2 <bt_att_req_send+0x24>
	parent->next = child;
   1b5a8:	2300      	movs	r3, #0
   1b5aa:	6023      	str	r3, [r4, #0]
	return list->tail;
   1b5ac:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   1b5ae:	b92b      	cbnz	r3, 1b5bc <bt_att_req_send+0x1e>
	list->head = node;
   1b5b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   1b5b4:	f7ff fe5c 	bl	1b270 <att_req_send_process>

	return 0;
   1b5b8:	2000      	movs	r0, #0
}
   1b5ba:	bd10      	pop	{r4, pc}
	parent->next = child;
   1b5bc:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1b5be:	6084      	str	r4, [r0, #8]
}
   1b5c0:	e7f8      	b.n	1b5b4 <bt_att_req_send+0x16>
		return -ENOTCONN;
   1b5c2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1b5c6:	e7f8      	b.n	1b5ba <bt_att_req_send+0x1c>

0001b5c8 <found_attr>:
	*found = attr;
   1b5c8:	6010      	str	r0, [r2, #0]
}
   1b5ca:	2000      	movs	r0, #0
   1b5cc:	4770      	bx	lr

0001b5ce <gatt_ccc_changed>:
{
   1b5ce:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   1b5d0:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   1b5d2:	895a      	ldrh	r2, [r3, #10]
   1b5d4:	428a      	cmp	r2, r1
   1b5d6:	d003      	beq.n	1b5e0 <gatt_ccc_changed+0x12>
		ccc->value = value;
   1b5d8:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   1b5da:	68db      	ldr	r3, [r3, #12]
   1b5dc:	b103      	cbz	r3, 1b5e0 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   1b5de:	4718      	bx	r3
}
   1b5e0:	4770      	bx	lr

0001b5e2 <gatt_indicate_rsp>:
{
   1b5e2:	b510      	push	{r4, lr}
   1b5e4:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   1b5e6:	68a3      	ldr	r3, [r4, #8]
{
   1b5e8:	460a      	mov	r2, r1
	if (params->func) {
   1b5ea:	b10b      	cbz	r3, 1b5f0 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   1b5ec:	4621      	mov	r1, r4
   1b5ee:	4798      	blx	r3
	params->_ref--;
   1b5f0:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1b5f2:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   1b5f4:	3b01      	subs	r3, #1
   1b5f6:	b2db      	uxtb	r3, r3
   1b5f8:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1b5fa:	b122      	cbz	r2, 1b606 <gatt_indicate_rsp+0x24>
   1b5fc:	b91b      	cbnz	r3, 1b606 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   1b5fe:	4620      	mov	r0, r4
}
   1b600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   1b604:	4710      	bx	r2
}
   1b606:	bd10      	pop	{r4, pc}

0001b608 <match_uuid>:
	data->attr = attr;
   1b608:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1b60a:	8091      	strh	r1, [r2, #4]
}
   1b60c:	2000      	movs	r0, #0
   1b60e:	4770      	bx	lr

0001b610 <ccc_set_cb>:
}
   1b610:	2000      	movs	r0, #0
   1b612:	4770      	bx	lr

0001b614 <atomic_get>:
   1b614:	f3bf 8f5b 	dmb	ish
   1b618:	6800      	ldr	r0, [r0, #0]
   1b61a:	f3bf 8f5b 	dmb	ish
}
   1b61e:	4770      	bx	lr

0001b620 <gen_hash_m>:
{
   1b620:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1b622:	6807      	ldr	r7, [r0, #0]
   1b624:	783d      	ldrb	r5, [r7, #0]
{
   1b626:	b089      	sub	sp, #36	; 0x24
   1b628:	4606      	mov	r6, r0
   1b62a:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1b62c:	b10d      	cbz	r5, 1b632 <gen_hash_m+0x12>
	switch (u16->val) {
   1b62e:	2501      	movs	r5, #1
   1b630:	e014      	b.n	1b65c <gen_hash_m+0x3c>
   1b632:	887b      	ldrh	r3, [r7, #2]
   1b634:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1b638:	d004      	beq.n	1b644 <gen_hash_m+0x24>
   1b63a:	d812      	bhi.n	1b662 <gen_hash_m+0x42>
   1b63c:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1b640:	2b03      	cmp	r3, #3
   1b642:	d8f4      	bhi.n	1b62e <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1b644:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1b648:	2202      	movs	r2, #2
   1b64a:	f10d 010e 	add.w	r1, sp, #14
   1b64e:	4620      	mov	r0, r4
   1b650:	f7fe fc1f 	bl	19e92 <tc_cmac_update>
   1b654:	b9e0      	cbnz	r0, 1b690 <gen_hash_m+0x70>
			state->err = -EINVAL;
   1b656:	f06f 0315 	mvn.w	r3, #21
   1b65a:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1b65c:	4628      	mov	r0, r5
   1b65e:	b009      	add	sp, #36	; 0x24
   1b660:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   1b662:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1b666:	33ff      	adds	r3, #255	; 0xff
   1b668:	b29b      	uxth	r3, r3
   1b66a:	2b04      	cmp	r3, #4
   1b66c:	d8df      	bhi.n	1b62e <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1b66e:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1b672:	2202      	movs	r2, #2
   1b674:	f10d 010e 	add.w	r1, sp, #14
   1b678:	4620      	mov	r0, r4
   1b67a:	f7fe fc0a 	bl	19e92 <tc_cmac_update>
   1b67e:	2800      	cmp	r0, #0
   1b680:	d0e9      	beq.n	1b656 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   1b682:	887b      	ldrh	r3, [r7, #2]
   1b684:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1b688:	2202      	movs	r2, #2
   1b68a:	f10d 010e 	add.w	r1, sp, #14
   1b68e:	e017      	b.n	1b6c0 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   1b690:	887b      	ldrh	r3, [r7, #2]
   1b692:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1b696:	2202      	movs	r2, #2
   1b698:	f10d 010e 	add.w	r1, sp, #14
   1b69c:	4620      	mov	r0, r4
   1b69e:	f7fe fbf8 	bl	19e92 <tc_cmac_update>
   1b6a2:	2800      	cmp	r0, #0
   1b6a4:	d0d7      	beq.n	1b656 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1b6a6:	2000      	movs	r0, #0
   1b6a8:	2310      	movs	r3, #16
   1b6aa:	eb0d 0203 	add.w	r2, sp, r3
   1b6ae:	6877      	ldr	r7, [r6, #4]
   1b6b0:	9000      	str	r0, [sp, #0]
   1b6b2:	4631      	mov	r1, r6
   1b6b4:	47b8      	blx	r7
		if (len < 0) {
   1b6b6:	1e02      	subs	r2, r0, #0
   1b6b8:	da01      	bge.n	1b6be <gen_hash_m+0x9e>
			state->err = len;
   1b6ba:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1b6bc:	e7ce      	b.n	1b65c <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   1b6be:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1b6c0:	4620      	mov	r0, r4
   1b6c2:	f7fe fbe6 	bl	19e92 <tc_cmac_update>
   1b6c6:	2800      	cmp	r0, #0
   1b6c8:	d1b1      	bne.n	1b62e <gen_hash_m+0xe>
   1b6ca:	e7c4      	b.n	1b656 <gen_hash_m+0x36>

0001b6cc <atomic_or>:
{
   1b6cc:	4603      	mov	r3, r0
}
   1b6ce:	f3bf 8f5b 	dmb	ish
   1b6d2:	e853 0f00 	ldrex	r0, [r3]
   1b6d6:	ea40 0201 	orr.w	r2, r0, r1
   1b6da:	e843 2c00 	strex	ip, r2, [r3]
   1b6de:	f1bc 0f00 	cmp.w	ip, #0
   1b6e2:	d1f6      	bne.n	1b6d2 <atomic_or+0x6>
   1b6e4:	f3bf 8f5b 	dmb	ish
   1b6e8:	4770      	bx	lr

0001b6ea <bt_addr_le_cmp>:
   1b6ea:	2207      	movs	r2, #7
   1b6ec:	f7fe bdb6 	b.w	1a25c <memcmp>

0001b6f0 <sc_restore_rsp>:
{
   1b6f0:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   1b6f2:	f7ec fa2b 	bl	7b4c <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1b6f6:	b140      	cbz	r0, 1b70a <sc_restore_rsp+0x1a>
   1b6f8:	7a03      	ldrb	r3, [r0, #8]
   1b6fa:	07db      	lsls	r3, r3, #31
   1b6fc:	d505      	bpl.n	1b70a <sc_restore_rsp+0x1a>
}
   1b6fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b702:	2101      	movs	r1, #1
   1b704:	300c      	adds	r0, #12
   1b706:	f7ff bfe1 	b.w	1b6cc <atomic_or>
   1b70a:	bd08      	pop	{r3, pc}

0001b70c <find_ccc_cfg>:
{
   1b70c:	b513      	push	{r0, r1, r4, lr}
						    &cfg->peer)) {
   1b70e:	1c4a      	adds	r2, r1, #1
{
   1b710:	460c      	mov	r4, r1
		if (conn) {
   1b712:	b140      	cbz	r0, 1b726 <find_ccc_cfg+0x1a>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1b714:	7809      	ldrb	r1, [r1, #0]
   1b716:	f7ff fa4d 	bl	1abb4 <bt_conn_is_peer_addr_le>
	return NULL;
   1b71a:	2800      	cmp	r0, #0
   1b71c:	bf08      	it	eq
   1b71e:	2400      	moveq	r4, #0
}
   1b720:	4620      	mov	r0, r4
   1b722:	b002      	add	sp, #8
   1b724:	bd10      	pop	{r4, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1b726:	9000      	str	r0, [sp, #0]
   1b728:	4669      	mov	r1, sp
   1b72a:	f8cd 0003 	str.w	r0, [sp, #3]
   1b72e:	4610      	mov	r0, r2
   1b730:	f7ff ffdb 	bl	1b6ea <bt_addr_le_cmp>
	return NULL;
   1b734:	2800      	cmp	r0, #0
   1b736:	bf18      	it	ne
   1b738:	2400      	movne	r4, #0
   1b73a:	e7f1      	b.n	1b720 <find_ccc_cfg+0x14>

0001b73c <ccc_find_cfg>:
{
   1b73c:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   1b73e:	7803      	ldrb	r3, [r0, #0]
   1b740:	4293      	cmp	r3, r2
{
   1b742:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   1b744:	d001      	beq.n	1b74a <ccc_find_cfg+0xe>
	return NULL;
   1b746:	2000      	movs	r0, #0
}
   1b748:	bd10      	pop	{r4, pc}
		    !bt_addr_le_cmp(&ccc->cfg[i].peer, addr)) {
   1b74a:	3001      	adds	r0, #1
   1b74c:	f7ff ffcd 	bl	1b6ea <bt_addr_le_cmp>
		if (id == ccc->cfg[i].id &&
   1b750:	2800      	cmp	r0, #0
   1b752:	d1f8      	bne.n	1b746 <ccc_find_cfg+0xa>
			return &ccc->cfg[i];
   1b754:	4620      	mov	r0, r4
   1b756:	e7f7      	b.n	1b748 <ccc_find_cfg+0xc>

0001b758 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1b758:	2207      	movs	r2, #7
   1b75a:	f7fe bd90 	b.w	1a27e <memcpy>

0001b75e <clear_ccc_cfg>:
{
   1b75e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1b760:	2500      	movs	r5, #0
{
   1b762:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1b764:	4669      	mov	r1, sp
   1b766:	3001      	adds	r0, #1
   1b768:	9500      	str	r5, [sp, #0]
   1b76a:	f8cd 5003 	str.w	r5, [sp, #3]
   1b76e:	f7ff fff3 	bl	1b758 <bt_addr_le_copy>
	cfg->id = 0U;
   1b772:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1b774:	8125      	strh	r5, [r4, #8]
}
   1b776:	b003      	add	sp, #12
   1b778:	bd30      	pop	{r4, r5, pc}

0001b77a <atomic_and>:
{
   1b77a:	4603      	mov	r3, r0
}
   1b77c:	f3bf 8f5b 	dmb	ish
   1b780:	e853 0f00 	ldrex	r0, [r3]
   1b784:	ea00 0201 	and.w	r2, r0, r1
   1b788:	e843 2c00 	strex	ip, r2, [r3]
   1b78c:	f1bc 0f00 	cmp.w	ip, #0
   1b790:	d1f6      	bne.n	1b780 <atomic_and+0x6>
   1b792:	f3bf 8f5b 	dmb	ish
   1b796:	4770      	bx	lr

0001b798 <gatt_foreach_iter>:
{
   1b798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (handle > end_handle) {
   1b79a:	4299      	cmp	r1, r3
{
   1b79c:	4604      	mov	r4, r0
   1b79e:	9e08      	ldr	r6, [sp, #32]
   1b7a0:	e9dd 0706 	ldrd	r0, r7, [sp, #24]
   1b7a4:	460d      	mov	r5, r1
	if (handle > end_handle) {
   1b7a6:	d810      	bhi.n	1b7ca <gatt_foreach_iter+0x32>
	if (handle < start_handle) {
   1b7a8:	4291      	cmp	r1, r2
   1b7aa:	d201      	bcs.n	1b7b0 <gatt_foreach_iter+0x18>
		return BT_GATT_ITER_CONTINUE;
   1b7ac:	2001      	movs	r0, #1
}
   1b7ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1b7b0:	b968      	cbnz	r0, 1b7ce <gatt_foreach_iter+0x36>
	if (attr_data && attr_data != attr->user_data) {
   1b7b2:	b997      	cbnz	r7, 1b7da <gatt_foreach_iter+0x42>
	*num_matches -= 1;
   1b7b4:	8833      	ldrh	r3, [r6, #0]
	result = func(attr, handle, user_data);
   1b7b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	*num_matches -= 1;
   1b7b8:	3b01      	subs	r3, #1
   1b7ba:	8033      	strh	r3, [r6, #0]
	result = func(attr, handle, user_data);
   1b7bc:	4629      	mov	r1, r5
   1b7be:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b7c0:	4620      	mov	r0, r4
   1b7c2:	4798      	blx	r3
	if (!*num_matches) {
   1b7c4:	8833      	ldrh	r3, [r6, #0]
   1b7c6:	2b00      	cmp	r3, #0
   1b7c8:	d1f1      	bne.n	1b7ae <gatt_foreach_iter+0x16>
		return BT_GATT_ITER_STOP;
   1b7ca:	2000      	movs	r0, #0
   1b7cc:	e7ef      	b.n	1b7ae <gatt_foreach_iter+0x16>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1b7ce:	6821      	ldr	r1, [r4, #0]
   1b7d0:	f7fe ff97 	bl	1a702 <bt_uuid_cmp>
   1b7d4:	2800      	cmp	r0, #0
   1b7d6:	d0ec      	beq.n	1b7b2 <gatt_foreach_iter+0x1a>
   1b7d8:	e7e8      	b.n	1b7ac <gatt_foreach_iter+0x14>
	if (attr_data && attr_data != attr->user_data) {
   1b7da:	68e3      	ldr	r3, [r4, #12]
   1b7dc:	429f      	cmp	r7, r3
   1b7de:	d1e5      	bne.n	1b7ac <gatt_foreach_iter+0x14>
   1b7e0:	e7e8      	b.n	1b7b4 <gatt_foreach_iter+0x1c>

0001b7e2 <clear_cf_cfg>:
{
   1b7e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b7e4:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1b7e6:	2500      	movs	r5, #0
   1b7e8:	4669      	mov	r1, sp
   1b7ea:	3001      	adds	r0, #1
   1b7ec:	9500      	str	r5, [sp, #0]
   1b7ee:	f8cd 5003 	str.w	r5, [sp, #3]
   1b7f2:	f7ff ffb1 	bl	1b758 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1b7f6:	f104 0008 	add.w	r0, r4, #8
   1b7fa:	2201      	movs	r2, #1
   1b7fc:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1b7fe:	340c      	adds	r4, #12
   1b800:	f7fe fd48 	bl	1a294 <memset>
   1b804:	f3bf 8f5b 	dmb	ish
   1b808:	e854 3f00 	ldrex	r3, [r4]
   1b80c:	e844 5200 	strex	r2, r5, [r4]
   1b810:	2a00      	cmp	r2, #0
   1b812:	d1f9      	bne.n	1b808 <clear_cf_cfg+0x26>
   1b814:	f3bf 8f5b 	dmb	ish
}
   1b818:	b003      	add	sp, #12
   1b81a:	bd30      	pop	{r4, r5, pc}

0001b81c <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   1b81c:	2a02      	cmp	r2, #2
{
   1b81e:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1b820:	d108      	bne.n	1b834 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1b822:	2300      	movs	r3, #0
   1b824:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1b828:	461a      	mov	r2, r3
   1b82a:	7a00      	ldrb	r0, [r0, #8]
   1b82c:	f7ec fa4e 	bl	7ccc <sc_save>
}
   1b830:	2002      	movs	r0, #2
   1b832:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   1b834:	f7ec fcb2 	bl	819c <sc_clear>
   1b838:	e7fa      	b.n	1b830 <sc_ccc_cfg_write+0x14>

0001b83a <read_ppcp>:
{
   1b83a:	b513      	push	{r0, r1, r4, lr}
   1b83c:	4610      	mov	r0, r2
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   1b83e:	2218      	movs	r2, #24
{
   1b840:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   1b844:	f8ad 2000 	strh.w	r2, [sp]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   1b848:	2228      	movs	r2, #40	; 0x28
   1b84a:	f8ad 2002 	strh.w	r2, [sp, #2]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   1b84e:	2200      	movs	r2, #0
   1b850:	f8ad 2004 	strh.w	r2, [sp, #4]
	if (offset > value_len) {
   1b854:	2908      	cmp	r1, #8
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   1b856:	f04f 022a 	mov.w	r2, #42	; 0x2a
   1b85a:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1b85e:	d80b      	bhi.n	1b878 <read_ppcp+0x3e>
	len = MIN(buf_len, value_len - offset);
   1b860:	f1c1 0408 	rsb	r4, r1, #8
   1b864:	429c      	cmp	r4, r3
   1b866:	bfa8      	it	ge
   1b868:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1b86a:	4622      	mov	r2, r4
   1b86c:	4469      	add	r1, sp
   1b86e:	f7fe fd06 	bl	1a27e <memcpy>
}
   1b872:	4620      	mov	r0, r4
   1b874:	b002      	add	sp, #8
   1b876:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b878:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   1b87c:	e7f9      	b.n	1b872 <read_ppcp+0x38>

0001b87e <read_appearance>:
{
   1b87e:	b513      	push	{r0, r1, r4, lr}
   1b880:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1b884:	4610      	mov	r0, r2
	if (offset > value_len) {
   1b886:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1b888:	f04f 0200 	mov.w	r2, #0
   1b88c:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1b890:	d80d      	bhi.n	1b8ae <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   1b892:	f1c1 0402 	rsb	r4, r1, #2
   1b896:	429c      	cmp	r4, r3
   1b898:	bfa8      	it	ge
   1b89a:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1b89c:	f10d 0306 	add.w	r3, sp, #6
   1b8a0:	4622      	mov	r2, r4
   1b8a2:	4419      	add	r1, r3
   1b8a4:	f7fe fceb 	bl	1a27e <memcpy>
}
   1b8a8:	4620      	mov	r0, r4
   1b8aa:	b002      	add	sp, #8
   1b8ac:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b8ae:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1b8b2:	e7f9      	b.n	1b8a8 <read_appearance+0x2a>

0001b8b4 <read_name>:
{
   1b8b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b8b8:	4698      	mov	r8, r3
   1b8ba:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1b8be:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   1b8c0:	f7e9 fe58 	bl	5574 <bt_get_name>
   1b8c4:	4607      	mov	r7, r0
				 strlen(name));
   1b8c6:	f7fe fc9c 	bl	1a202 <strlen>
	if (offset > value_len) {
   1b8ca:	b283      	uxth	r3, r0
   1b8cc:	42b3      	cmp	r3, r6
   1b8ce:	d30c      	bcc.n	1b8ea <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   1b8d0:	1b9c      	subs	r4, r3, r6
   1b8d2:	4544      	cmp	r4, r8
   1b8d4:	bfa8      	it	ge
   1b8d6:	4644      	movge	r4, r8
   1b8d8:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1b8da:	4622      	mov	r2, r4
   1b8dc:	19b9      	adds	r1, r7, r6
   1b8de:	4628      	mov	r0, r5
   1b8e0:	f7fe fccd 	bl	1a27e <memcpy>
}
   1b8e4:	4620      	mov	r0, r4
   1b8e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b8ea:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1b8ee:	e7f9      	b.n	1b8e4 <read_name+0x30>

0001b8f0 <cf_read>:
{
   1b8f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b8f2:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   1b8f4:	2300      	movs	r3, #0
{
   1b8f6:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   1b8fa:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1b8fe:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   1b900:	f7ec f924 	bl	7b4c <find_cf_cfg>
	if (cfg) {
   1b904:	b128      	cbz	r0, 1b912 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   1b906:	f100 0108 	add.w	r1, r0, #8
   1b90a:	2201      	movs	r2, #1
   1b90c:	a801      	add	r0, sp, #4
   1b90e:	f7fe fcb6 	bl	1a27e <memcpy>
	if (offset > value_len) {
   1b912:	2e01      	cmp	r6, #1
   1b914:	d80d      	bhi.n	1b932 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   1b916:	f1c6 0401 	rsb	r4, r6, #1
   1b91a:	42bc      	cmp	r4, r7
   1b91c:	bfa8      	it	ge
   1b91e:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1b920:	ab01      	add	r3, sp, #4
   1b922:	4622      	mov	r2, r4
   1b924:	1999      	adds	r1, r3, r6
   1b926:	4628      	mov	r0, r5
   1b928:	f7fe fca9 	bl	1a27e <memcpy>
}
   1b92c:	4620      	mov	r0, r4
   1b92e:	b003      	add	sp, #12
   1b930:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b932:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1b936:	e7f9      	b.n	1b92c <cf_read+0x3c>

0001b938 <bt_gatt_attr_read_service>:
{
   1b938:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   1b93a:	68c9      	ldr	r1, [r1, #12]
{
   1b93c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   1b940:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   1b942:	780b      	ldrb	r3, [r1, #0]
{
   1b944:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   1b946:	b993      	cbnz	r3, 1b96e <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1b948:	884b      	ldrh	r3, [r1, #2]
   1b94a:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   1b94e:	2d02      	cmp	r5, #2
   1b950:	d819      	bhi.n	1b986 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1b952:	f1c5 0202 	rsb	r2, r5, #2
   1b956:	4294      	cmp	r4, r2
   1b958:	bfa8      	it	ge
   1b95a:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1b95c:	f10d 0306 	add.w	r3, sp, #6
   1b960:	4622      	mov	r2, r4
   1b962:	1959      	adds	r1, r3, r5
   1b964:	f7fe fc8b 	bl	1a27e <memcpy>
}
   1b968:	4620      	mov	r0, r4
   1b96a:	b003      	add	sp, #12
   1b96c:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   1b96e:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   1b970:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   1b974:	d807      	bhi.n	1b986 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1b976:	f1c5 0210 	rsb	r2, r5, #16
   1b97a:	4294      	cmp	r4, r2
   1b97c:	bfa8      	it	ge
   1b97e:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1b980:	4622      	mov	r2, r4
   1b982:	4429      	add	r1, r5
   1b984:	e7ee      	b.n	1b964 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b986:	f06f 0406 	mvn.w	r4, #6
   1b98a:	e7ed      	b.n	1b968 <bt_gatt_attr_read_service+0x30>

0001b98c <bt_gatt_attr_read_ccc>:
{
   1b98c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   1b98e:	68c9      	ldr	r1, [r1, #12]
{
   1b990:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   1b994:	4615      	mov	r5, r2
   1b996:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   1b998:	f7ff feb8 	bl	1b70c <find_ccc_cfg>
	if (cfg) {
   1b99c:	b100      	cbz	r0, 1b9a0 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   1b99e:	8900      	ldrh	r0, [r0, #8]
   1b9a0:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   1b9a4:	2e02      	cmp	r6, #2
   1b9a6:	d80e      	bhi.n	1b9c6 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   1b9a8:	f1c6 0402 	rsb	r4, r6, #2
   1b9ac:	42bc      	cmp	r4, r7
   1b9ae:	bfa8      	it	ge
   1b9b0:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1b9b2:	f10d 0306 	add.w	r3, sp, #6
   1b9b6:	4622      	mov	r2, r4
   1b9b8:	1999      	adds	r1, r3, r6
   1b9ba:	4628      	mov	r0, r5
   1b9bc:	f7fe fc5f 	bl	1a27e <memcpy>
}
   1b9c0:	4620      	mov	r0, r4
   1b9c2:	b003      	add	sp, #12
   1b9c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b9c6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1b9ca:	e7f9      	b.n	1b9c0 <bt_gatt_attr_read_ccc+0x34>

0001b9cc <bt_gatt_attr_value_handle>:
{
   1b9cc:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1b9ce:	4604      	mov	r4, r0
   1b9d0:	b910      	cbnz	r0, 1b9d8 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   1b9d2:	2000      	movs	r0, #0
}
   1b9d4:	b002      	add	sp, #8
   1b9d6:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1b9d8:	2300      	movs	r3, #0
   1b9da:	f88d 3004 	strb.w	r3, [sp, #4]
   1b9de:	6800      	ldr	r0, [r0, #0]
   1b9e0:	f642 0303 	movw	r3, #10243	; 0x2803
   1b9e4:	a901      	add	r1, sp, #4
   1b9e6:	f8ad 3006 	strh.w	r3, [sp, #6]
   1b9ea:	f7fe fe8a 	bl	1a702 <bt_uuid_cmp>
   1b9ee:	2800      	cmp	r0, #0
   1b9f0:	d1ef      	bne.n	1b9d2 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   1b9f2:	68e3      	ldr	r3, [r4, #12]
   1b9f4:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   1b9f6:	2800      	cmp	r0, #0
   1b9f8:	d1ec      	bne.n	1b9d4 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   1b9fa:	4620      	mov	r0, r4
   1b9fc:	f7ec fd48 	bl	8490 <bt_gatt_attr_get_handle>
   1ba00:	3001      	adds	r0, #1
   1ba02:	b280      	uxth	r0, r0
	return handle;
   1ba04:	e7e6      	b.n	1b9d4 <bt_gatt_attr_value_handle+0x8>

0001ba06 <bt_gatt_attr_read_chrc>:
{
   1ba06:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1ba08:	68cf      	ldr	r7, [r1, #12]
{
   1ba0a:	b087      	sub	sp, #28
   1ba0c:	4608      	mov	r0, r1
   1ba0e:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   1ba10:	79bb      	ldrb	r3, [r7, #6]
   1ba12:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1ba16:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   1ba1a:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1ba1c:	f7ff ffd6 	bl	1b9cc <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1ba20:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1ba22:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1ba26:	780b      	ldrb	r3, [r1, #0]
   1ba28:	b99b      	cbnz	r3, 1ba52 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1ba2a:	884b      	ldrh	r3, [r1, #2]
   1ba2c:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   1ba30:	2105      	movs	r1, #5
	if (offset > value_len) {
   1ba32:	42b1      	cmp	r1, r6
   1ba34:	d315      	bcc.n	1ba62 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   1ba36:	1b89      	subs	r1, r1, r6
   1ba38:	42a1      	cmp	r1, r4
   1ba3a:	bfa8      	it	ge
   1ba3c:	4621      	movge	r1, r4
   1ba3e:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   1ba40:	ab01      	add	r3, sp, #4
   1ba42:	4622      	mov	r2, r4
   1ba44:	1999      	adds	r1, r3, r6
   1ba46:	4628      	mov	r0, r5
   1ba48:	f7fe fc19 	bl	1a27e <memcpy>
}
   1ba4c:	4620      	mov	r0, r4
   1ba4e:	b007      	add	sp, #28
   1ba50:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1ba52:	3101      	adds	r1, #1
   1ba54:	2210      	movs	r2, #16
   1ba56:	f10d 0007 	add.w	r0, sp, #7
   1ba5a:	f7fe fc10 	bl	1a27e <memcpy>
		value_len += 16U;
   1ba5e:	2113      	movs	r1, #19
   1ba60:	e7e7      	b.n	1ba32 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ba62:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1ba66:	e7f1      	b.n	1ba4c <bt_gatt_attr_read_chrc+0x46>

0001ba68 <bt_gatt_foreach_attr>:
{
   1ba68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1ba6a:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1ba6e:	2300      	movs	r3, #0
   1ba70:	9300      	str	r3, [sp, #0]
   1ba72:	461a      	mov	r2, r3
   1ba74:	f7ec fd3c 	bl	84f0 <bt_gatt_foreach_attr_type>
}
   1ba78:	b005      	add	sp, #20
   1ba7a:	f85d fb04 	ldr.w	pc, [sp], #4

0001ba7e <bt_gatt_get_mtu>:
	return bt_att_get_mtu(conn);
   1ba7e:	f7ff bd1d 	b.w	1b4bc <bt_att_get_mtu>

0001ba82 <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   1ba82:	07d3      	lsls	r3, r2, #31
{
   1ba84:	b510      	push	{r4, lr}
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1ba86:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1ba88:	d504      	bpl.n	1ba94 <bt_gatt_check_perm+0x12>
   1ba8a:	f014 0f15 	tst.w	r4, #21
   1ba8e:	d017      	beq.n	1bac0 <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1ba90:	684b      	ldr	r3, [r1, #4]
   1ba92:	b1ab      	cbz	r3, 1bac0 <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1ba94:	0793      	lsls	r3, r2, #30
   1ba96:	d504      	bpl.n	1baa2 <bt_gatt_check_perm+0x20>
   1ba98:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   1ba9c:	d012      	beq.n	1bac4 <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1ba9e:	688b      	ldr	r3, [r1, #8]
   1baa0:	b183      	cbz	r3, 1bac4 <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   1baa2:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1baa4:	f014 0f30 	tst.w	r4, #48	; 0x30
   1baa8:	d104      	bne.n	1bab4 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   1baaa:	f014 000c 	ands.w	r0, r4, #12
   1baae:	bf18      	it	ne
   1bab0:	200f      	movne	r0, #15
}
   1bab2:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1bab4:	f7ff f87c 	bl	1abb0 <bt_conn_get_security>
   1bab8:	2802      	cmp	r0, #2
   1baba:	d8f6      	bhi.n	1baaa <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   1babc:	2005      	movs	r0, #5
   1babe:	e7f8      	b.n	1bab2 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1bac0:	2002      	movs	r0, #2
   1bac2:	e7f6      	b.n	1bab2 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1bac4:	2003      	movs	r0, #3
   1bac6:	e7f4      	b.n	1bab2 <bt_gatt_check_perm+0x30>

0001bac8 <bt_gatt_change_aware>:
{
   1bac8:	b538      	push	{r3, r4, r5, lr}
   1baca:	460d      	mov	r5, r1
	cfg = find_cf_cfg(conn);
   1bacc:	f7ec f83e 	bl	7b4c <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1bad0:	b910      	cbnz	r0, 1bad8 <bt_gatt_change_aware+0x10>
		return true;
   1bad2:	2501      	movs	r5, #1
}
   1bad4:	4628      	mov	r0, r5
   1bad6:	bd38      	pop	{r3, r4, r5, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1bad8:	7a03      	ldrb	r3, [r0, #8]
   1bada:	07d9      	lsls	r1, r3, #31
   1badc:	d5f9      	bpl.n	1bad2 <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1bade:	f100 040c 	add.w	r4, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1bae2:	4620      	mov	r0, r4
   1bae4:	f7ff fd96 	bl	1b614 <atomic_get>
   1bae8:	07c2      	lsls	r2, r0, #31
   1baea:	d4f2      	bmi.n	1bad2 <bt_gatt_change_aware+0xa>
	if (!req) {
   1baec:	2d00      	cmp	r5, #0
   1baee:	d0f1      	beq.n	1bad4 <bt_gatt_change_aware+0xc>
   1baf0:	4620      	mov	r0, r4
   1baf2:	f7ff fd8f 	bl	1b614 <atomic_get>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   1baf6:	0783      	lsls	r3, r0, #30
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1baf8:	f3c0 0540 	ubfx	r5, r0, #1, #1
   1bafc:	d509      	bpl.n	1bb12 <bt_gatt_change_aware+0x4a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1bafe:	f06f 0102 	mvn.w	r1, #2
   1bb02:	4620      	mov	r0, r4
   1bb04:	f7ff fe39 	bl	1b77a <atomic_and>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1bb08:	2101      	movs	r1, #1
   1bb0a:	4620      	mov	r0, r4
   1bb0c:	f7ff fdde 	bl	1b6cc <atomic_or>
}
   1bb10:	e7e0      	b.n	1bad4 <bt_gatt_change_aware+0xc>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1bb12:	2102      	movs	r1, #2
   1bb14:	e7f9      	b.n	1bb0a <bt_gatt_change_aware+0x42>

0001bb16 <bt_smp_recv>:
{
   1bb16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   1bb18:	2100      	movs	r1, #0
   1bb1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1bb1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	struct bt_conn *conn = chan->conn;
   1bb22:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   1bb24:	4608      	mov	r0, r1
   1bb26:	f7ff f8dd 	bl	1ace4 <bt_l2cap_create_pdu_timeout>
   1bb2a:	f100 0608 	add.w	r6, r0, #8
   1bb2e:	4604      	mov	r4, r0
   1bb30:	2101      	movs	r1, #1
   1bb32:	4630      	mov	r0, r6
   1bb34:	f002 f869 	bl	1dc0a <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   1bb38:	2505      	movs	r5, #5
   1bb3a:	7005      	strb	r5, [r0, #0]
   1bb3c:	2101      	movs	r1, #1
   1bb3e:	4630      	mov	r0, r6
   1bb40:	f002 f863 	bl	1dc0a <net_buf_simple_add>
   1bb44:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   1bb46:	7005      	strb	r5, [r0, #0]
   1bb48:	4622      	mov	r2, r4
   1bb4a:	9300      	str	r3, [sp, #0]
   1bb4c:	2106      	movs	r1, #6
   1bb4e:	4638      	mov	r0, r7
   1bb50:	f7ff f8cb 	bl	1acea <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   1bb54:	b110      	cbz	r0, 1bb5c <bt_smp_recv+0x46>
		net_buf_unref(buf);
   1bb56:	4620      	mov	r0, r4
   1bb58:	f7f9 fe26 	bl	157a8 <net_buf_unref>
}
   1bb5c:	2000      	movs	r0, #0
   1bb5e:	b003      	add	sp, #12
   1bb60:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001bb62 <bt_smp_sign>:
   1bb62:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1bb66:	4770      	bx	lr

0001bb68 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   1bb68:	2000      	movs	r0, #0
   1bb6a:	4770      	bx	lr

0001bb6c <model_start>:
	if (mod->cb && mod->cb->start) {
   1bb6c:	6983      	ldr	r3, [r0, #24]
   1bb6e:	b113      	cbz	r3, 1bb76 <model_start+0xa>
   1bb70:	685b      	ldr	r3, [r3, #4]
   1bb72:	b103      	cbz	r3, 1bb76 <model_start+0xa>
		mod->cb->start(mod);
   1bb74:	4718      	bx	r3
}
   1bb76:	4770      	bx	lr

0001bb78 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1bb78:	f3bf 8f5b 	dmb	ish
   1bb7c:	6800      	ldr	r0, [r0, #0]
   1bb7e:	f3bf 8f5b 	dmb	ish
}
   1bb82:	4770      	bx	lr

0001bb84 <bt_mesh_friend_get>:
}
   1bb84:	2002      	movs	r0, #2
   1bb86:	4770      	bx	lr

0001bb88 <bt_mesh_fixed_group_match>:
{
   1bb88:	b508      	push	{r3, lr}
	switch (addr) {
   1bb8a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   1bb8e:	4298      	cmp	r0, r3
   1bb90:	d00d      	beq.n	1bbae <bt_mesh_fixed_group_match+0x26>
   1bb92:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1bb96:	4298      	cmp	r0, r3
   1bb98:	d00c      	beq.n	1bbb4 <bt_mesh_fixed_group_match+0x2c>
   1bb9a:	f64f 73fc 	movw	r3, #65532	; 0xfffc
   1bb9e:	4298      	cmp	r0, r3
   1bba0:	d10a      	bne.n	1bbb8 <bt_mesh_fixed_group_match+0x30>
		return (bt_mesh_gatt_proxy_get() == BT_MESH_FEATURE_ENABLED);
   1bba2:	f7ed fc99 	bl	94d8 <bt_mesh_gatt_proxy_get>
		return (bt_mesh_relay_get() == BT_MESH_FEATURE_ENABLED);
   1bba6:	1e43      	subs	r3, r0, #1
   1bba8:	4258      	negs	r0, r3
   1bbaa:	4158      	adcs	r0, r3
}
   1bbac:	bd08      	pop	{r3, pc}
		return (bt_mesh_relay_get() == BT_MESH_FEATURE_ENABLED);
   1bbae:	f7ed fd45 	bl	963c <bt_mesh_relay_get>
   1bbb2:	e7f8      	b.n	1bba6 <bt_mesh_fixed_group_match+0x1e>
		return true;
   1bbb4:	2001      	movs	r0, #1
   1bbb6:	e7f9      	b.n	1bbac <bt_mesh_fixed_group_match+0x24>
	switch (addr) {
   1bbb8:	2000      	movs	r0, #0
   1bbba:	e7f7      	b.n	1bbac <bt_mesh_fixed_group_match+0x24>

0001bbbc <adv_buf_destroy>:
{
   1bbbc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_mesh_adv adv = *BT_MESH_ADV(buf);
   1bbbe:	6943      	ldr	r3, [r0, #20]
{
   1bbc0:	4604      	mov	r4, r0
	struct bt_mesh_adv adv = *BT_MESH_ADV(buf);
   1bbc2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1bbc6:	ab04      	add	r3, sp, #16
   1bbc8:	e903 0007 	stmdb	r3, {r0, r1, r2}
   1bbcc:	4605      	mov	r5, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1bbce:	79a0      	ldrb	r0, [r4, #6]
   1bbd0:	460e      	mov	r6, r1
   1bbd2:	f7f9 fd2b 	bl	1562c <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   1bbd6:	4621      	mov	r1, r4
   1bbd8:	f002 fc44 	bl	1e464 <k_queue_prepend>
}

static inline void bt_mesh_adv_send_end(
	int err, struct bt_mesh_adv const *adv)
{
	if (adv->started && adv->cb && adv->cb->end) {
   1bbdc:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1bbe0:	075b      	lsls	r3, r3, #29
   1bbe2:	d508      	bpl.n	1bbf6 <adv_buf_destroy+0x3a>
   1bbe4:	b13d      	cbz	r5, 1bbf6 <adv_buf_destroy+0x3a>
   1bbe6:	686b      	ldr	r3, [r5, #4]
   1bbe8:	b12b      	cbz	r3, 1bbf6 <adv_buf_destroy+0x3a>
		adv->cb->end(err, adv->cb_data);
   1bbea:	4631      	mov	r1, r6
   1bbec:	2000      	movs	r0, #0
}
   1bbee:	b004      	add	sp, #16
   1bbf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1bbf4:	4718      	bx	r3
   1bbf6:	b004      	add	sp, #16
   1bbf8:	bd70      	pop	{r4, r5, r6, pc}

0001bbfa <cache_check>:
{
   1bbfa:	b508      	push	{r3, lr}
	return !memcmp(sub->beacon_cache, beacon_data, 21);
   1bbfc:	2215      	movs	r2, #21
   1bbfe:	3006      	adds	r0, #6
   1bc00:	f7fe fb2c 	bl	1a25c <memcmp>
}
   1bc04:	fab0 f080 	clz	r0, r0
   1bc08:	0940      	lsrs	r0, r0, #5
   1bc0a:	bd08      	pop	{r3, pc}

0001bc0c <subnet_evt>:
	if (evt != BT_MESH_KEY_DELETED) {
   1bc0c:	2901      	cmp	r1, #1
   1bc0e:	d001      	beq.n	1bc14 <subnet_evt+0x8>
		bt_mesh_beacon_update(sub);
   1bc10:	f7ed be96 	b.w	9940 <bt_mesh_beacon_update>
}
   1bc14:	4770      	bx	lr

0001bc16 <subnet_beacon_enable>:
	sub->beacons_last = 0U;
   1bc16:	2200      	movs	r2, #0
   1bc18:	8082      	strh	r2, [r0, #4]
	bt_mesh_beacon_update(sub);
   1bc1a:	f7ed be91 	b.w	9940 <bt_mesh_beacon_update>

0001bc1e <sys_get_be24>:
	return ((uint32_t)src[0] << 16) | sys_get_be16(&src[1]);
   1bc1e:	f8b0 3001 	ldrh.w	r3, [r0, #1]
   1bc22:	7802      	ldrb	r2, [r0, #0]
   1bc24:	ba5b      	rev16	r3, r3
   1bc26:	b29b      	uxth	r3, r3
}
   1bc28:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
   1bc2c:	4770      	bx	lr

0001bc2e <net_encrypt>:
{
   1bc2e:	b570      	push	{r4, r5, r6, lr}
   1bc30:	460d      	mov	r5, r1
   1bc32:	4604      	mov	r4, r0
	err = bt_mesh_net_encrypt(cred->enc, buf, iv_index, proxy);
   1bc34:	4601      	mov	r1, r0
   1bc36:	1c68      	adds	r0, r5, #1
{
   1bc38:	4616      	mov	r6, r2
	err = bt_mesh_net_encrypt(cred->enc, buf, iv_index, proxy);
   1bc3a:	f000 fa65 	bl	1c108 <bt_mesh_net_encrypt>
	if (err) {
   1bc3e:	b938      	cbnz	r0, 1bc50 <net_encrypt+0x22>
	return bt_mesh_net_obfuscate(buf->data, iv_index, cred->privacy);
   1bc40:	6820      	ldr	r0, [r4, #0]
   1bc42:	f105 0211 	add.w	r2, r5, #17
   1bc46:	4631      	mov	r1, r6
}
   1bc48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_mesh_net_obfuscate(buf->data, iv_index, cred->privacy);
   1bc4c:	f7f0 bd30 	b.w	c6b0 <bt_mesh_net_obfuscate>
}
   1bc50:	bd70      	pop	{r4, r5, r6, pc}

0001bc52 <bt_mesh_subnet_store>:
	update_subnet_settings(net_idx, true);
   1bc52:	2101      	movs	r1, #1
   1bc54:	f7ee be62 	b.w	a91c <update_subnet_settings>

0001bc58 <key_refresh>:
{
   1bc58:	b538      	push	{r3, r4, r5, lr}
   1bc5a:	4604      	mov	r4, r0
	switch (new_phase) {
   1bc5c:	2903      	cmp	r1, #3
   1bc5e:	d809      	bhi.n	1bc74 <key_refresh+0x1c>
   1bc60:	e8df f001 	tbb	[pc, r1]
   1bc64:	110d0213 	.word	0x110d0213
		sub->kr_phase = new_phase;
   1bc68:	2301      	movs	r3, #1
   1bc6a:	7783      	strb	r3, [r0, #30]
		subnet_evt(sub, BT_MESH_KEY_UPDATED);
   1bc6c:	2102      	movs	r1, #2
		subnet_evt(sub, BT_MESH_KEY_REVOKED);
   1bc6e:	4620      	mov	r0, r4
   1bc70:	f7ee fd2a 	bl	a6c8 <subnet_evt>
		bt_mesh_subnet_store(sub->net_idx);
   1bc74:	8ba0      	ldrh	r0, [r4, #28]
}
   1bc76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_mesh_subnet_store(sub->net_idx);
   1bc7a:	f7ff bfea 	b.w	1bc52 <bt_mesh_subnet_store>
		sub->kr_phase = new_phase;
   1bc7e:	2302      	movs	r3, #2
   1bc80:	7783      	strb	r3, [r0, #30]
		subnet_evt(sub, BT_MESH_KEY_SWAPPED);
   1bc82:	2103      	movs	r1, #3
   1bc84:	e7f3      	b.n	1bc6e <key_refresh+0x16>
		if (sub->kr_phase == BT_MESH_KR_NORMAL) {
   1bc86:	7f83      	ldrb	r3, [r0, #30]
   1bc88:	b163      	cbz	r3, 1bca4 <key_refresh+0x4c>
		sub->kr_phase = BT_MESH_KR_NORMAL;
   1bc8a:	2500      	movs	r5, #0
		memcpy(&sub->keys[0], &sub->keys[1], sizeof(sub->keys[0]));
   1bc8c:	f104 0186 	add.w	r1, r4, #134	; 0x86
		sub->kr_phase = BT_MESH_KR_NORMAL;
   1bc90:	77a5      	strb	r5, [r4, #30]
		memcpy(&sub->keys[0], &sub->keys[1], sizeof(sub->keys[0]));
   1bc92:	225a      	movs	r2, #90	; 0x5a
   1bc94:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1bc98:	f7fe faf1 	bl	1a27e <memcpy>
		sub->keys[1].valid = 0U;
   1bc9c:	f884 5086 	strb.w	r5, [r4, #134]	; 0x86
		subnet_evt(sub, BT_MESH_KEY_REVOKED);
   1bca0:	2104      	movs	r1, #4
   1bca2:	e7e4      	b.n	1bc6e <key_refresh+0x16>
}
   1bca4:	bd38      	pop	{r3, r4, r5, pc}

0001bca6 <bt_mesh_kr_update>:
	if (!new_key) {
   1bca6:	b16a      	cbz	r2, 1bcc4 <bt_mesh_kr_update+0x1e>
	if (sub->kr_phase == BT_MESH_KR_PHASE_1) {
   1bca8:	7f83      	ldrb	r3, [r0, #30]
   1bcaa:	2b01      	cmp	r3, #1
   1bcac:	d105      	bne.n	1bcba <bt_mesh_kr_update+0x14>
		key_refresh(sub, (kr_flag ? BT_MESH_KR_PHASE_2 :
   1bcae:	2900      	cmp	r1, #0
   1bcb0:	bf14      	ite	ne
   1bcb2:	2102      	movne	r1, #2
   1bcb4:	2103      	moveq	r1, #3
		key_refresh(sub, BT_MESH_KR_PHASE_3);
   1bcb6:	f7ff bfcf 	b.w	1bc58 <key_refresh>
	} else if (sub->kr_phase == BT_MESH_KR_PHASE_2 && !kr_flag) {
   1bcba:	2b02      	cmp	r3, #2
   1bcbc:	d102      	bne.n	1bcc4 <bt_mesh_kr_update+0x1e>
   1bcbe:	b909      	cbnz	r1, 1bcc4 <bt_mesh_kr_update+0x1e>
		key_refresh(sub, BT_MESH_KR_PHASE_3);
   1bcc0:	2103      	movs	r1, #3
   1bcc2:	e7f8      	b.n	1bcb6 <bt_mesh_kr_update+0x10>
}
   1bcc4:	4770      	bx	lr

0001bcc6 <bt_mesh_subnet_set>:
{
   1bcc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bcca:	4606      	mov	r6, r0
   1bccc:	4688      	mov	r8, r1
   1bcce:	4617      	mov	r7, r2
   1bcd0:	461d      	mov	r5, r3
	sub = subnet_alloc(net_idx);
   1bcd2:	f7ee fd0b 	bl	a6ec <subnet_alloc>
	if (!sub) {
   1bcd6:	4604      	mov	r4, r0
   1bcd8:	b300      	cbz	r0, 1bd1c <bt_mesh_subnet_set+0x56>
	if (sub->net_idx == net_idx) {
   1bcda:	8b83      	ldrh	r3, [r0, #28]
   1bcdc:	42b3      	cmp	r3, r6
   1bcde:	d020      	beq.n	1bd22 <bt_mesh_subnet_set+0x5c>
		if (!keys[i]) {
   1bce0:	b957      	cbnz	r7, 1bcf8 <bt_mesh_subnet_set+0x32>
   1bce2:	b99d      	cbnz	r5, 1bd0c <bt_mesh_subnet_set+0x46>
		sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
   1bce4:	2500      	movs	r5, #0
	bt_mesh_beacon_update(sub);
   1bce6:	4620      	mov	r0, r4
	sub->net_idx = net_idx;
   1bce8:	83a6      	strh	r6, [r4, #28]
	sub->kr_phase = kr_phase;
   1bcea:	f884 801e 	strb.w	r8, [r4, #30]
		sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
   1bcee:	77e5      	strb	r5, [r4, #31]
	bt_mesh_beacon_update(sub);
   1bcf0:	f7ed fe26 	bl	9940 <bt_mesh_beacon_update>
	return 0;
   1bcf4:	4628      	mov	r0, r5
   1bcf6:	e007      	b.n	1bd08 <bt_mesh_subnet_set+0x42>
		if (net_keys_create(&sub->keys[i], keys[i])) {
   1bcf8:	4639      	mov	r1, r7
   1bcfa:	302c      	adds	r0, #44	; 0x2c
   1bcfc:	f7ee fd38 	bl	a770 <net_keys_create>
   1bd00:	2800      	cmp	r0, #0
   1bd02:	d0ee      	beq.n	1bce2 <bt_mesh_subnet_set+0x1c>
			return -EIO;
   1bd04:	f06f 0004 	mvn.w	r0, #4
}
   1bd08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (net_keys_create(&sub->keys[i], keys[i])) {
   1bd0c:	4629      	mov	r1, r5
   1bd0e:	f104 0086 	add.w	r0, r4, #134	; 0x86
   1bd12:	f7ee fd2d 	bl	a770 <net_keys_create>
   1bd16:	2800      	cmp	r0, #0
   1bd18:	d0e4      	beq.n	1bce4 <bt_mesh_subnet_set+0x1e>
   1bd1a:	e7f3      	b.n	1bd04 <bt_mesh_subnet_set+0x3e>
		return -ENOMEM;
   1bd1c:	f06f 000b 	mvn.w	r0, #11
   1bd20:	e7f2      	b.n	1bd08 <bt_mesh_subnet_set+0x42>
		return -EALREADY;
   1bd22:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1bd26:	e7ef      	b.n	1bd08 <bt_mesh_subnet_set+0x42>

0001bd28 <app_key_del>:
{
   1bd28:	b510      	push	{r4, lr}
		update_app_key_settings(app->app_idx, false);
   1bd2a:	2100      	movs	r1, #0
{
   1bd2c:	4604      	mov	r4, r0
		update_app_key_settings(app->app_idx, false);
   1bd2e:	8840      	ldrh	r0, [r0, #2]
   1bd30:	f7ee ffd0 	bl	acd4 <update_app_key_settings>
	app_key_evt(app, BT_MESH_KEY_DELETED);
   1bd34:	4620      	mov	r0, r4
   1bd36:	2101      	movs	r1, #1
   1bd38:	f7ee ff2a 	bl	ab90 <app_key_evt>
	app->net_idx = BT_MESH_KEY_UNUSED;
   1bd3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1bd40:	8023      	strh	r3, [r4, #0]
	app->app_idx = BT_MESH_KEY_UNUSED;
   1bd42:	8063      	strh	r3, [r4, #2]
	(void)memset(app->keys, 0, sizeof(app->keys));
   1bd44:	1d60      	adds	r0, r4, #5
   1bd46:	2222      	movs	r2, #34	; 0x22
}
   1bd48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)memset(app->keys, 0, sizeof(app->keys));
   1bd4c:	2100      	movs	r1, #0
   1bd4e:	f7fe baa1 	b.w	1a294 <memset>

0001bd52 <bt_mesh_app_key_set>:
{
   1bd52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bd56:	4607      	mov	r7, r0
   1bd58:	4688      	mov	r8, r1
   1bd5a:	4616      	mov	r6, r2
   1bd5c:	461d      	mov	r5, r3
	app = app_key_alloc(app_idx);
   1bd5e:	f7ee ff2b 	bl	abb8 <app_key_alloc>
	if (!app) {
   1bd62:	4604      	mov	r4, r0
   1bd64:	b348      	cbz	r0, 1bdba <bt_mesh_app_key_set+0x68>
	if (app->app_idx == app_idx) {
   1bd66:	8843      	ldrh	r3, [r0, #2]
   1bd68:	42bb      	cmp	r3, r7
   1bd6a:	d029      	beq.n	1bdc0 <bt_mesh_app_key_set+0x6e>
	memcpy(app->keys[0].val, old_key, 16);
   1bd6c:	4631      	mov	r1, r6
   1bd6e:	2210      	movs	r2, #16
   1bd70:	3006      	adds	r0, #6
   1bd72:	f7fe fa84 	bl	1a27e <memcpy>
			const uint8_t net_id[16], uint32_t iv_index,
			uint8_t auth[8]);

static inline int bt_mesh_app_id(const uint8_t app_key[16], uint8_t app_id[1])
{
	return bt_mesh_k4(app_key, app_id);
   1bd76:	4630      	mov	r0, r6
   1bd78:	1d61      	adds	r1, r4, #5
   1bd7a:	f7f0 fc5b 	bl	c634 <bt_mesh_k4>
	if (bt_mesh_app_id(old_key, &app->keys[0].id)) {
   1bd7e:	4606      	mov	r6, r0
   1bd80:	b120      	cbz	r0, 1bd8c <bt_mesh_app_key_set+0x3a>
		return -EIO;
   1bd82:	f06f 0604 	mvn.w	r6, #4
}
   1bd86:	4630      	mov	r0, r6
   1bd88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (new_key) {
   1bd8c:	b93d      	cbnz	r5, 1bd9e <bt_mesh_app_key_set+0x4c>
	app->updated = !!new_key;
   1bd8e:	3d00      	subs	r5, #0
   1bd90:	bf18      	it	ne
   1bd92:	2501      	movne	r5, #1
	app->net_idx = net_idx;
   1bd94:	f8a4 8000 	strh.w	r8, [r4]
	app->app_idx = app_idx;
   1bd98:	8067      	strh	r7, [r4, #2]
	app->updated = !!new_key;
   1bd9a:	7125      	strb	r5, [r4, #4]
	return 0;
   1bd9c:	e7f3      	b.n	1bd86 <bt_mesh_app_key_set+0x34>
		memcpy(app->keys[1].val, new_key, 16);
   1bd9e:	4629      	mov	r1, r5
   1bda0:	2210      	movs	r2, #16
   1bda2:	f104 0017 	add.w	r0, r4, #23
   1bda6:	f7fe fa6a 	bl	1a27e <memcpy>
   1bdaa:	f104 0116 	add.w	r1, r4, #22
   1bdae:	4628      	mov	r0, r5
   1bdb0:	f7f0 fc40 	bl	c634 <bt_mesh_k4>
		if (bt_mesh_app_id(new_key, &app->keys[1].id)) {
   1bdb4:	2800      	cmp	r0, #0
   1bdb6:	d0ea      	beq.n	1bd8e <bt_mesh_app_key_set+0x3c>
   1bdb8:	e7e3      	b.n	1bd82 <bt_mesh_app_key_set+0x30>
		return -ENOMEM;
   1bdba:	f06f 060b 	mvn.w	r6, #11
   1bdbe:	e7e2      	b.n	1bd86 <bt_mesh_app_key_set+0x34>
		return 0;
   1bdc0:	2600      	movs	r6, #0
   1bdc2:	e7e0      	b.n	1bd86 <bt_mesh_app_key_set+0x34>

0001bdc4 <seg_rx_assemble>:
{
   1bdc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf->data = buf->__buf;
   1bdc8:	688b      	ldr	r3, [r1, #8]
   1bdca:	600b      	str	r3, [r1, #0]
	buf->len  = 0U;
   1bdcc:	2500      	movs	r5, #0
   1bdce:	4606      	mov	r6, r0
   1bdd0:	460c      	mov	r4, r1
   1bdd2:	4617      	mov	r7, r2
   1bdd4:	808d      	strh	r5, [r1, #4]
	for (i = 0; i <= rx->seg_n; i++) {
   1bdd6:	f100 0804 	add.w	r8, r0, #4
				       MIN(seg_len(rx->ctl),
   1bdda:	7ff3      	ldrb	r3, [r6, #31]
		net_buf_simple_add_mem(buf, rx->seg[i],
   1bddc:	f858 1b04 	ldr.w	r1, [r8], #4
		return BT_MESH_APP_SEG_SDU_MAX;
   1bde0:	f013 0f20 	tst.w	r3, #32
				       MIN(seg_len(rx->ctl),
   1bde4:	8bb3      	ldrh	r3, [r6, #28]
		return BT_MESH_APP_SEG_SDU_MAX;
   1bde6:	bf14      	ite	ne
   1bde8:	2208      	movne	r2, #8
   1bdea:	220c      	moveq	r2, #12
				       MIN(seg_len(rx->ctl),
   1bdec:	fb05 3312 	mls	r3, r5, r2, r3
		net_buf_simple_add_mem(buf, rx->seg[i],
   1bdf0:	429a      	cmp	r2, r3
   1bdf2:	bfa8      	it	ge
   1bdf4:	461a      	movge	r2, r3
   1bdf6:	4620      	mov	r0, r4
   1bdf8:	f001 ff0d 	bl	1dc16 <net_buf_simple_add_mem>
	for (i = 0; i <= rx->seg_n; i++) {
   1bdfc:	7ff3      	ldrb	r3, [r6, #31]
   1bdfe:	3501      	adds	r5, #1
   1be00:	461a      	mov	r2, r3
   1be02:	f003 031f 	and.w	r3, r3, #31
   1be06:	42ab      	cmp	r3, r5
   1be08:	dae7      	bge.n	1bdda <seg_rx_assemble+0x16>
	if (!rx->ctl) {
   1be0a:	0693      	lsls	r3, r2, #26
   1be0c:	d407      	bmi.n	1be1e <seg_rx_assemble+0x5a>
		buf->len -= APP_MIC_LEN(aszmic);
   1be0e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
   1be12:	2f00      	cmp	r7, #0
   1be14:	bf14      	ite	ne
   1be16:	2208      	movne	r2, #8
   1be18:	2204      	moveq	r2, #4
   1be1a:	1a9b      	subs	r3, r3, r2
   1be1c:	80a3      	strh	r3, [r4, #4]
}
   1be1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001be22 <ack_timeout>:
{
   1be22:	b538      	push	{r3, r4, r5, lr}
	if (rx->ttl == BT_MESH_TTL_DEFAULT) {
   1be24:	f890 4020 	ldrb.w	r4, [r0, #32]
   1be28:	2cff      	cmp	r4, #255	; 0xff
{
   1be2a:	4605      	mov	r5, r0
	if (rx->ttl == BT_MESH_TTL_DEFAULT) {
   1be2c:	d102      	bne.n	1be34 <ack_timeout+0x12>
		ttl = bt_mesh_default_ttl_get();
   1be2e:	f7ed fb7b 	bl	9528 <bt_mesh_default_ttl_get>
   1be32:	4604      	mov	r4, r0
	to += ((rx->seg_n + 1) - popcount(rx->block)) * 100U;
   1be34:	6a68      	ldr	r0, [r5, #36]	; 0x24
   1be36:	f7e4 f9bb 	bl	1b0 <__popcountsi2>
   1be3a:	7feb      	ldrb	r3, [r5, #31]
   1be3c:	f003 031f 	and.w	r3, r3, #31
   1be40:	1a18      	subs	r0, r3, r0
   1be42:	2364      	movs	r3, #100	; 0x64
   1be44:	fb00 3303 	mla	r3, r0, r3, r3
	to = 150 + (ttl * 50U);
   1be48:	2296      	movs	r2, #150	; 0x96
   1be4a:	2032      	movs	r0, #50	; 0x32
   1be4c:	fb10 2004 	smlabb	r0, r0, r4, r2
	to += ((rx->seg_n + 1) - popcount(rx->block)) * 100U;
   1be50:	4418      	add	r0, r3
}
   1be52:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
   1be56:	bfb8      	it	lt
   1be58:	f44f 70c8 	movlt.w	r0, #400	; 0x190
   1be5c:	bd38      	pop	{r3, r4, r5, pc}

0001be5e <sdu_try_decrypt>:
	if (ctx->seg) {
   1be5e:	69d0      	ldr	r0, [r2, #28]
{
   1be60:	b570      	push	{r4, r5, r6, lr}
   1be62:	460d      	mov	r5, r1
   1be64:	4614      	mov	r4, r2
	if (ctx->seg) {
   1be66:	b118      	cbz	r0, 1be70 <sdu_try_decrypt+0x12>
		seg_rx_assemble(ctx->seg, ctx->buf, ctx->crypto.aszmic);
   1be68:	7852      	ldrb	r2, [r2, #1]
   1be6a:	6961      	ldr	r1, [r4, #20]
   1be6c:	f7ff ffaa 	bl	1bdc4 <seg_rx_assemble>
	net_buf_simple_reset(ctx->sdu);
   1be70:	69a3      	ldr	r3, [r4, #24]
   1be72:	2200      	movs	r2, #0
   1be74:	809a      	strh	r2, [r3, #4]
	buf->data = buf->__buf;
   1be76:	689a      	ldr	r2, [r3, #8]
   1be78:	601a      	str	r2, [r3, #0]
	return bt_mesh_app_decrypt(key, &ctx->crypto, ctx->buf, ctx->sdu);
   1be7a:	4621      	mov	r1, r4
   1be7c:	6962      	ldr	r2, [r4, #20]
   1be7e:	4628      	mov	r0, r5
}
   1be80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_mesh_app_decrypt(key, &ctx->crypto, ctx->buf, ctx->sdu);
   1be84:	f000 b9d4 	b.w	1c230 <bt_mesh_app_decrypt>

0001be88 <schedule_retransmit>:
{
   1be88:	b510      	push	{r4, lr}
	if (!tx->nack_count) {
   1be8a:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
   1be8e:	b38b      	cbz	r3, 1bef4 <schedule_retransmit+0x6c>
	if (--tx->seg_pending || tx->sending) {
   1be90:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   1be94:	3b01      	subs	r3, #1
   1be96:	b2db      	uxtb	r3, r3
   1be98:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
   1be9c:	bb53      	cbnz	r3, 1bef4 <schedule_retransmit+0x6c>
   1be9e:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
   1bea2:	06db      	lsls	r3, r3, #27
   1bea4:	d426      	bmi.n	1bef4 <schedule_retransmit+0x6c>
	k_work_reschedule(&tx->retransmit,
   1bea6:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
   1beaa:	f100 0440 	add.w	r4, r0, #64	; 0x40
   1beae:	b131      	cbz	r1, 1bebe <schedule_retransmit+0x36>
   1beb0:	2200      	movs	r2, #0
   1beb2:	4613      	mov	r3, r2
   1beb4:	4620      	mov	r0, r4
}
   1beb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_reschedule(&tx->retransmit,
   1beba:	f7fb bfd5 	b.w	17e68 <k_work_reschedule>
			  K_MSEC(SEG_RETRANSMIT_TIMEOUT(tx)));
   1bebe:	f9b0 302a 	ldrsh.w	r3, [r0, #42]	; 0x2a
   1bec2:	2b00      	cmp	r3, #0
   1bec4:	bfc8      	it	gt
   1bec6:	f890 2034 	ldrbgt.w	r2, [r0, #52]	; 0x34
   1beca:	f04f 0332 	mov.w	r3, #50	; 0x32
   1bece:	bfc5      	ittet	gt
   1bed0:	f44f 70c8 	movgt.w	r0, #400	; 0x190
   1bed4:	fb03 0002 	mlagt	r0, r3, r2, r0
   1bed8:	4618      	movle	r0, r3
   1beda:	2100      	movgt	r1, #0
   1bedc:	03c0      	lsls	r0, r0, #15
   1bede:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bee2:	2300      	movs	r3, #0
   1bee4:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   1bee8:	03c9      	lsls	r1, r1, #15
   1beea:	f7e4 f949 	bl	180 <__aeabi_uldivmod>
   1beee:	4602      	mov	r2, r0
   1bef0:	460b      	mov	r3, r1
   1bef2:	e7df      	b.n	1beb4 <schedule_retransmit+0x2c>
}
   1bef4:	bd10      	pop	{r4, pc}

0001bef6 <seg_sent>:
	schedule_retransmit(tx);
   1bef6:	4608      	mov	r0, r1
   1bef8:	f7ff bfc6 	b.w	1be88 <schedule_retransmit>

0001befc <seg_send_start>:
{
   1befc:	b538      	push	{r3, r4, r5, lr}
	if (!tx->started && tx->cb && tx->cb->start) {
   1befe:	f892 3036 	ldrb.w	r3, [r2, #54]	; 0x36
   1bf02:	071b      	lsls	r3, r3, #28
{
   1bf04:	460d      	mov	r5, r1
   1bf06:	4614      	mov	r4, r2
	if (!tx->started && tx->cb && tx->cb->start) {
   1bf08:	d40b      	bmi.n	1bf22 <seg_send_start+0x26>
   1bf0a:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1bf0c:	b14b      	cbz	r3, 1bf22 <seg_send_start+0x26>
   1bf0e:	681b      	ldr	r3, [r3, #0]
   1bf10:	b13b      	cbz	r3, 1bf22 <seg_send_start+0x26>
		tx->cb->start(duration, err, tx->cb_data);
   1bf12:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
   1bf14:	4798      	blx	r3
		tx->started = 1U;
   1bf16:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
   1bf1a:	f043 0308 	orr.w	r3, r3, #8
   1bf1e:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	if (err) {
   1bf22:	b125      	cbz	r5, 1bf2e <seg_send_start+0x32>
		schedule_retransmit(tx);
   1bf24:	4620      	mov	r0, r4
}
   1bf26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		schedule_retransmit(tx);
   1bf2a:	f7ff bfad 	b.w	1be88 <schedule_retransmit>
}
   1bf2e:	bd38      	pop	{r3, r4, r5, pc}

0001bf30 <send_ack.isra.0>:
static int send_ack(struct bt_mesh_subnet *sub, uint16_t src, uint16_t dst,
   1bf30:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bf32:	b08b      	sub	sp, #44	; 0x2c
	struct bt_mesh_msg_ctx ctx = {
   1bf34:	8b87      	ldrh	r7, [r0, #28]
static int send_ack(struct bt_mesh_subnet *sub, uint16_t src, uint16_t dst,
   1bf36:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
	struct bt_mesh_msg_ctx ctx = {
   1bf3a:	f8ad 7010 	strh.w	r7, [sp, #16]
static int send_ack(struct bt_mesh_subnet *sub, uint16_t src, uint16_t dst,
   1bf3e:	460d      	mov	r5, r1
	struct bt_mesh_msg_ctx ctx = {
   1bf40:	f64f 77ff 	movw	r7, #65535	; 0xffff
   1bf44:	2100      	movs	r1, #0
   1bf46:	f88d 301b 	strb.w	r3, [sp, #27]
	struct bt_mesh_net_tx tx = {
   1bf4a:	ab04      	add	r3, sp, #16
static int send_ack(struct bt_mesh_subnet *sub, uint16_t src, uint16_t dst,
   1bf4c:	9e11      	ldr	r6, [sp, #68]	; 0x44
	struct bt_mesh_msg_ctx ctx = {
   1bf4e:	f8cd 1016 	str.w	r1, [sp, #22]
   1bf52:	f88d 101a 	strb.w	r1, [sp, #26]
   1bf56:	f8ad 7012 	strh.w	r7, [sp, #18]
   1bf5a:	f8ad 2014 	strh.w	r2, [sp, #20]
	struct bt_mesh_net_tx tx = {
   1bf5e:	9109      	str	r1, [sp, #36]	; 0x24
   1bf60:	9007      	str	r0, [sp, #28]
   1bf62:	9308      	str	r3, [sp, #32]
   1bf64:	b36c      	cbz	r4, 1bfc2 <send_ack.isra.0+0x92>
		.src = obo ? bt_mesh_primary_addr() : src,
   1bf66:	f7f0 fdcb 	bl	cb00 <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
   1bf6a:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
		.xmit = bt_mesh_net_transmit_get(),
   1bf6e:	f7ed faf7 	bl	9560 <bt_mesh_net_transmit_get>
	if (!BT_MESH_ADDR_IS_UNICAST(src)) {
   1bf72:	b22d      	sxth	r5, r5
   1bf74:	2d00      	cmp	r5, #0
	struct bt_mesh_net_tx tx = {
   1bf76:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
	if (!BT_MESH_ADDR_IS_UNICAST(src)) {
   1bf7a:	dd20      	ble.n	1bfbe <send_ack.isra.0+0x8e>
	uint16_t seq_zero = *seq_auth & TRANS_SEQ_ZERO_MASK;
   1bf7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
	dst[1] = val;
   1bf7e:	f88d 600d 	strb.w	r6, [sp, #13]
   1bf82:	881b      	ldrh	r3, [r3, #0]
	sys_put_be16(((seq_zero << 2) & 0x7ffc) | (obo << 15), buf);
   1bf84:	03e4      	lsls	r4, r4, #15
   1bf86:	f3c3 030c 	ubfx	r3, r3, #0, #13
   1bf8a:	ea44 0483 	orr.w	r4, r4, r3, lsl #2
	dst[0] = val >> 8;
   1bf8e:	f3c4 2307 	ubfx	r3, r4, #8, #8
   1bf92:	f88d 3008 	strb.w	r3, [sp, #8]
	sys_put_be16(val >> 16, dst);
   1bf96:	0c33      	lsrs	r3, r6, #16
	dst[0] = val >> 8;
   1bf98:	0e32      	lsrs	r2, r6, #24
	dst[1] = val;
   1bf9a:	f88d 300b 	strb.w	r3, [sp, #11]
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_ACK, buf, sizeof(buf),
   1bf9e:	2100      	movs	r1, #0
	dst[0] = val >> 8;
   1bfa0:	f3c6 2307 	ubfx	r3, r6, #8, #8
   1bfa4:	f88d 200a 	strb.w	r2, [sp, #10]
   1bfa8:	f88d 300c 	strb.w	r3, [sp, #12]
   1bfac:	e9cd 1100 	strd	r1, r1, [sp]
   1bfb0:	2306      	movs	r3, #6
   1bfb2:	aa02      	add	r2, sp, #8
   1bfb4:	a807      	add	r0, sp, #28
	dst[1] = val;
   1bfb6:	f88d 4009 	strb.w	r4, [sp, #9]
   1bfba:	f7ef fbd5 	bl	b768 <bt_mesh_ctl_send>
}
   1bfbe:	b00b      	add	sp, #44	; 0x2c
   1bfc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct bt_mesh_net_tx tx = {
   1bfc2:	4628      	mov	r0, r5
   1bfc4:	e7d1      	b.n	1bf6a <send_ack.isra.0+0x3a>

0001bfc6 <bt_mesh_rpl_update>:
	if (rpl->old_iv && !rx->old_iv) {
   1bfc6:	f990 3001 	ldrsb.w	r3, [r0, #1]
   1bfca:	2b00      	cmp	r3, #0
   1bfcc:	da07      	bge.n	1bfde <bt_mesh_rpl_update+0x18>
   1bfce:	7d0b      	ldrb	r3, [r1, #20]
   1bfd0:	f013 0301 	ands.w	r3, r3, #1
		rpl->seg = 0;
   1bfd4:	bf02      	ittt	eq
   1bfd6:	6842      	ldreq	r2, [r0, #4]
   1bfd8:	f363 221f 	bfieq	r2, r3, #8, #24
   1bfdc:	6042      	streq	r2, [r0, #4]
	rpl->seq = rx->seq;
   1bfde:	8a0a      	ldrh	r2, [r1, #16]
	rpl->src = rx->ctx.addr;
   1bfe0:	890b      	ldrh	r3, [r1, #8]
	rpl->seq = rx->seq;
   1bfe2:	8042      	strh	r2, [r0, #2]
   1bfe4:	7c8a      	ldrb	r2, [r1, #18]
   1bfe6:	7102      	strb	r2, [r0, #4]
	rpl->old_iv = rx->old_iv;
   1bfe8:	7d0a      	ldrb	r2, [r1, #20]
	rpl->src = rx->ctx.addr;
   1bfea:	f3c3 030e 	ubfx	r3, r3, #0, #15
   1bfee:	f002 0201 	and.w	r2, r2, #1
   1bff2:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
   1bff6:	8003      	strh	r3, [r0, #0]
		schedule_rpl_store(rpl, false);
   1bff8:	f7f0 b8a0 	b.w	c13c <schedule_rpl_store.constprop.0>

0001bffc <bt_mesh_rpl_clear>:
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_RPL_PENDING);
   1bffc:	2000      	movs	r0, #0
   1bffe:	f7f0 bf4b 	b.w	ce98 <bt_mesh_settings_store_schedule>

0001c002 <sys_put_be32>:
	sys_put_be16(val >> 16, dst);
   1c002:	0c03      	lsrs	r3, r0, #16
	dst[0] = val >> 8;
   1c004:	0e02      	lsrs	r2, r0, #24
	dst[1] = val;
   1c006:	704b      	strb	r3, [r1, #1]
	dst[0] = val >> 8;
   1c008:	f3c0 2307 	ubfx	r3, r0, #8, #8
   1c00c:	700a      	strb	r2, [r1, #0]
   1c00e:	708b      	strb	r3, [r1, #2]
	dst[1] = val;
   1c010:	70c8      	strb	r0, [r1, #3]
}
   1c012:	4770      	bx	lr

0001c014 <create_app_nonce>:
{
   1c014:	b538      	push	{r3, r4, r5, lr}
	if (ctx->dev_key) {
   1c016:	780b      	ldrb	r3, [r1, #0]
{
   1c018:	460c      	mov	r4, r1
		nonce[0] = 0x01;
   1c01a:	2b00      	cmp	r3, #0
   1c01c:	4601      	mov	r1, r0
   1c01e:	bf14      	ite	ne
   1c020:	2302      	movne	r3, #2
   1c022:	2301      	moveq	r3, #1
   1c024:	f801 3b01 	strb.w	r3, [r1], #1
{
   1c028:	4605      	mov	r5, r0
	sys_put_be32((ctx->seq_num | ((uint32_t)ctx->aszmic << 31)), &nonce[1]);
   1c02a:	68a3      	ldr	r3, [r4, #8]
   1c02c:	7860      	ldrb	r0, [r4, #1]
   1c02e:	ea43 70c0 	orr.w	r0, r3, r0, lsl #31
   1c032:	f7ff ffe6 	bl	1c002 <sys_put_be32>
	sys_put_be16(ctx->src, &nonce[5]);
   1c036:	8863      	ldrh	r3, [r4, #2]
	dst[1] = val;
   1c038:	71ab      	strb	r3, [r5, #6]
	dst[0] = val >> 8;
   1c03a:	0a1a      	lsrs	r2, r3, #8
   1c03c:	716a      	strb	r2, [r5, #5]
	sys_put_be16(ctx->dst, &nonce[7]);
   1c03e:	88a3      	ldrh	r3, [r4, #4]
	dst[1] = val;
   1c040:	722b      	strb	r3, [r5, #8]
	dst[0] = val >> 8;
   1c042:	0a1a      	lsrs	r2, r3, #8
   1c044:	71ea      	strb	r2, [r5, #7]
	sys_put_be32(ctx->iv_index, &nonce[9]);
   1c046:	68e0      	ldr	r0, [r4, #12]
   1c048:	f105 0109 	add.w	r1, r5, #9
}
   1c04c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	sys_put_be32(ctx->iv_index, &nonce[9]);
   1c050:	f7ff bfd7 	b.w	1c002 <sys_put_be32>

0001c054 <bt_mesh_aes_cmac>:
{
   1c054:	b570      	push	{r4, r5, r6, lr}
   1c056:	b0c2      	sub	sp, #264	; 0x108
   1c058:	460d      	mov	r5, r1
   1c05a:	4614      	mov	r4, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   1c05c:	4601      	mov	r1, r0
   1c05e:	aa16      	add	r2, sp, #88	; 0x58
   1c060:	4668      	mov	r0, sp
{
   1c062:	461e      	mov	r6, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   1c064:	f7fd feea 	bl	19e3c <tc_cmac_setup>
   1c068:	b130      	cbz	r0, 1c078 <bt_mesh_aes_cmac+0x24>
   1c06a:	3508      	adds	r5, #8
	for (; sg_len; sg_len--, sg++) {
   1c06c:	b944      	cbnz	r4, 1c080 <bt_mesh_aes_cmac+0x2c>
	if (tc_cmac_final(mac, &state) == TC_CRYPTO_FAIL) {
   1c06e:	4669      	mov	r1, sp
   1c070:	4630      	mov	r0, r6
   1c072:	f7fd ff79 	bl	19f68 <tc_cmac_final>
   1c076:	b968      	cbnz	r0, 1c094 <bt_mesh_aes_cmac+0x40>
		return -EIO;
   1c078:	f06f 0004 	mvn.w	r0, #4
}
   1c07c:	b042      	add	sp, #264	; 0x108
   1c07e:	bd70      	pop	{r4, r5, r6, pc}
		if (tc_cmac_update(&state, sg->data,
   1c080:	e955 1202 	ldrd	r1, r2, [r5, #-8]
   1c084:	4668      	mov	r0, sp
   1c086:	f7fd ff04 	bl	19e92 <tc_cmac_update>
   1c08a:	3508      	adds	r5, #8
   1c08c:	2800      	cmp	r0, #0
   1c08e:	d0f3      	beq.n	1c078 <bt_mesh_aes_cmac+0x24>
	for (; sg_len; sg_len--, sg++) {
   1c090:	3c01      	subs	r4, #1
   1c092:	e7eb      	b.n	1c06c <bt_mesh_aes_cmac+0x18>
	return 0;
   1c094:	4620      	mov	r0, r4
   1c096:	e7f1      	b.n	1c07c <bt_mesh_aes_cmac+0x28>

0001c098 <bt_mesh_aes_cmac_one>:
{
   1c098:	b507      	push	{r0, r1, r2, lr}
	struct bt_mesh_sg sg = { m, len };
   1c09a:	e9cd 1200 	strd	r1, r2, [sp]
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
   1c09e:	2201      	movs	r2, #1
   1c0a0:	4669      	mov	r1, sp
   1c0a2:	f7ff ffd7 	bl	1c054 <bt_mesh_aes_cmac>
}
   1c0a6:	b003      	add	sp, #12
   1c0a8:	f85d fb04 	ldr.w	pc, [sp], #4

0001c0ac <bt_mesh_s1>:
{
   1c0ac:	b530      	push	{r4, r5, lr}
	const uint8_t zero[16] = { 0 };
   1c0ae:	2200      	movs	r2, #0
{
   1c0b0:	b085      	sub	sp, #20
   1c0b2:	460d      	mov	r5, r1
	const uint8_t zero[16] = { 0 };
   1c0b4:	e9cd 2200 	strd	r2, r2, [sp]
   1c0b8:	e9cd 2202 	strd	r2, r2, [sp, #8]
{
   1c0bc:	4604      	mov	r4, r0
	return bt_mesh_aes_cmac_one(zero, m, strlen(m), salt);
   1c0be:	f7fe f8a0 	bl	1a202 <strlen>
   1c0c2:	462b      	mov	r3, r5
   1c0c4:	4602      	mov	r2, r0
   1c0c6:	4621      	mov	r1, r4
   1c0c8:	4668      	mov	r0, sp
   1c0ca:	f7ff ffe5 	bl	1c098 <bt_mesh_aes_cmac_one>
}
   1c0ce:	3800      	subs	r0, #0
   1c0d0:	bf18      	it	ne
   1c0d2:	2001      	movne	r0, #1
   1c0d4:	b005      	add	sp, #20
   1c0d6:	bd30      	pop	{r4, r5, pc}

0001c0d8 <bt_mesh_k1>:
{
   1c0d8:	b570      	push	{r4, r5, r6, lr}
   1c0da:	9d04      	ldr	r5, [sp, #16]
   1c0dc:	4606      	mov	r6, r0
   1c0de:	461c      	mov	r4, r3
   1c0e0:	4610      	mov	r0, r2
	err = bt_mesh_aes_cmac_one(salt, ikm, ikm_len, okm);
   1c0e2:	462b      	mov	r3, r5
   1c0e4:	460a      	mov	r2, r1
   1c0e6:	4631      	mov	r1, r6
   1c0e8:	f7ff ffd6 	bl	1c098 <bt_mesh_aes_cmac_one>
	if (err < 0) {
   1c0ec:	2800      	cmp	r0, #0
   1c0ee:	db0a      	blt.n	1c106 <bt_mesh_k1+0x2e>
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
   1c0f0:	4620      	mov	r0, r4
   1c0f2:	f7fe f886 	bl	1a202 <strlen>
   1c0f6:	462b      	mov	r3, r5
   1c0f8:	4602      	mov	r2, r0
   1c0fa:	4621      	mov	r1, r4
   1c0fc:	4628      	mov	r0, r5
}
   1c0fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
   1c102:	f7ff bfc9 	b.w	1c098 <bt_mesh_aes_cmac_one>
}
   1c106:	bd70      	pop	{r4, r5, r6, pc}

0001c108 <bt_mesh_net_encrypt>:
{
   1c108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   1c10c:	680c      	ldr	r4, [r1, #0]
{
   1c10e:	4607      	mov	r7, r0
   1c110:	4610      	mov	r0, r2
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   1c112:	f994 2001 	ldrsb.w	r2, [r4, #1]
   1c116:	f894 9001 	ldrb.w	r9, [r4, #1]
	nonce[2] = pdu[2];
   1c11a:	f894 8002 	ldrb.w	r8, [r4, #2]
	nonce[3] = pdu[3];
   1c11e:	f894 e003 	ldrb.w	lr, [r4, #3]
	nonce[4] = pdu[4];
   1c122:	f894 c004 	ldrb.w	ip, [r4, #4]
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   1c126:	2a00      	cmp	r2, #0
{
   1c128:	460d      	mov	r5, r1
	nonce[6] = pdu[6];
   1c12a:	79a2      	ldrb	r2, [r4, #6]
	nonce[5] = pdu[5];
   1c12c:	7961      	ldrb	r1, [r4, #5]
{
   1c12e:	b089      	sub	sp, #36	; 0x24
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   1c130:	bfb4      	ite	lt
   1c132:	2608      	movlt	r6, #8
   1c134:	2604      	movge	r6, #4
	if (IS_ENABLED(CONFIG_BT_MESH_PROXY) && proxy) {
   1c136:	b373      	cbz	r3, 1c196 <bt_mesh_net_encrypt+0x8e>
	nonce[0] = 0x03;
   1c138:	2303      	movs	r3, #3
   1c13a:	f88d 3010 	strb.w	r3, [sp, #16]
	nonce[1] = 0x00;
   1c13e:	2300      	movs	r3, #0
   1c140:	f88d 3011 	strb.w	r3, [sp, #17]
	nonce[5] = pdu[5];
   1c144:	f88d 1015 	strb.w	r1, [sp, #21]
	sys_put_be32(iv_index, &nonce[9]);
   1c148:	f10d 0119 	add.w	r1, sp, #25
	nonce[3] = pdu[3];
   1c14c:	f88d e013 	strb.w	lr, [sp, #19]
	nonce[4] = pdu[4];
   1c150:	f88d c014 	strb.w	ip, [sp, #20]
	nonce[6] = pdu[6];
   1c154:	f88d 2016 	strb.w	r2, [sp, #22]
	nonce[7] = 0U;
   1c158:	f88d 3017 	strb.w	r3, [sp, #23]
	nonce[8] = 0U;
   1c15c:	f88d 3018 	strb.w	r3, [sp, #24]
	nonce[2] = pdu[2];
   1c160:	f88d 8012 	strb.w	r8, [sp, #18]
	sys_put_be32(iv_index, &nonce[9]);
   1c164:	f7ff ff4d 	bl	1c002 <sys_put_be32>
	err = bt_ccm_encrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   1c168:	682a      	ldr	r2, [r5, #0]
   1c16a:	88ab      	ldrh	r3, [r5, #4]
   1c16c:	3207      	adds	r2, #7
   1c16e:	2100      	movs	r1, #0
   1c170:	e9cd 1100 	strd	r1, r1, [sp]
   1c174:	e9cd 2602 	strd	r2, r6, [sp, #8]
   1c178:	3b07      	subs	r3, #7
   1c17a:	a904      	add	r1, sp, #16
   1c17c:	4638      	mov	r0, r7
   1c17e:	f7fe fa98 	bl	1a6b2 <bt_ccm_encrypt>
	if (!err) {
   1c182:	4604      	mov	r4, r0
   1c184:	b918      	cbnz	r0, 1c18e <bt_mesh_net_encrypt+0x86>
		net_buf_simple_add(buf, mic_len);
   1c186:	4631      	mov	r1, r6
   1c188:	4628      	mov	r0, r5
   1c18a:	f001 fd3e 	bl	1dc0a <net_buf_simple_add>
}
   1c18e:	4620      	mov	r0, r4
   1c190:	b009      	add	sp, #36	; 0x24
   1c192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nonce[0] = 0x00;
   1c196:	f88d 3010 	strb.w	r3, [sp, #16]
	nonce[1] = pdu[1];
   1c19a:	f88d 9011 	strb.w	r9, [sp, #17]
   1c19e:	e7d1      	b.n	1c144 <bt_mesh_net_encrypt+0x3c>

0001c1a0 <bt_mesh_net_decrypt>:
{
   1c1a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   1c1a4:	680c      	ldr	r4, [r1, #0]
{
   1c1a6:	4606      	mov	r6, r0
   1c1a8:	4610      	mov	r0, r2
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   1c1aa:	f994 2001 	ldrsb.w	r2, [r4, #1]
   1c1ae:	f894 9001 	ldrb.w	r9, [r4, #1]
	nonce[2] = pdu[2];
   1c1b2:	f894 8002 	ldrb.w	r8, [r4, #2]
	nonce[3] = pdu[3];
   1c1b6:	f894 e003 	ldrb.w	lr, [r4, #3]
	nonce[4] = pdu[4];
   1c1ba:	f894 c004 	ldrb.w	ip, [r4, #4]
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   1c1be:	2a00      	cmp	r2, #0
{
   1c1c0:	460d      	mov	r5, r1
	nonce[6] = pdu[6];
   1c1c2:	79a2      	ldrb	r2, [r4, #6]
	nonce[5] = pdu[5];
   1c1c4:	7961      	ldrb	r1, [r4, #5]
{
   1c1c6:	b089      	sub	sp, #36	; 0x24
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   1c1c8:	bfb4      	ite	lt
   1c1ca:	2708      	movlt	r7, #8
   1c1cc:	2704      	movge	r7, #4
	if (IS_ENABLED(CONFIG_BT_MESH_PROXY) && proxy) {
   1c1ce:	b353      	cbz	r3, 1c226 <bt_mesh_net_decrypt+0x86>
	nonce[0] = 0x03;
   1c1d0:	2303      	movs	r3, #3
   1c1d2:	f88d 3010 	strb.w	r3, [sp, #16]
	nonce[1] = 0x00;
   1c1d6:	2300      	movs	r3, #0
   1c1d8:	f88d 3011 	strb.w	r3, [sp, #17]
	nonce[5] = pdu[5];
   1c1dc:	f88d 1015 	strb.w	r1, [sp, #21]
	sys_put_be32(iv_index, &nonce[9]);
   1c1e0:	f10d 0119 	add.w	r1, sp, #25
	nonce[3] = pdu[3];
   1c1e4:	f88d e013 	strb.w	lr, [sp, #19]
	nonce[4] = pdu[4];
   1c1e8:	f88d c014 	strb.w	ip, [sp, #20]
	nonce[6] = pdu[6];
   1c1ec:	f88d 2016 	strb.w	r2, [sp, #22]
	nonce[7] = 0U;
   1c1f0:	f88d 3017 	strb.w	r3, [sp, #23]
	nonce[8] = 0U;
   1c1f4:	f88d 3018 	strb.w	r3, [sp, #24]
	nonce[2] = pdu[2];
   1c1f8:	f88d 8012 	strb.w	r8, [sp, #18]
	sys_put_be32(iv_index, &nonce[9]);
   1c1fc:	f7ff ff01 	bl	1c002 <sys_put_be32>
	buf->len -= mic_len;
   1c200:	88ab      	ldrh	r3, [r5, #4]
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   1c202:	682a      	ldr	r2, [r5, #0]
	buf->len -= mic_len;
   1c204:	1bdb      	subs	r3, r3, r7
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   1c206:	3207      	adds	r2, #7
	buf->len -= mic_len;
   1c208:	b29b      	uxth	r3, r3
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   1c20a:	2100      	movs	r1, #0
   1c20c:	e9cd 1100 	strd	r1, r1, [sp]
	buf->len -= mic_len;
   1c210:	80ab      	strh	r3, [r5, #4]
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   1c212:	e9cd 2702 	strd	r2, r7, [sp, #8]
   1c216:	3b07      	subs	r3, #7
   1c218:	a904      	add	r1, sp, #16
   1c21a:	4630      	mov	r0, r6
   1c21c:	f7fe fa1a 	bl	1a654 <bt_ccm_decrypt>
}
   1c220:	b009      	add	sp, #36	; 0x24
   1c222:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nonce[0] = 0x00;
   1c226:	f88d 3010 	strb.w	r3, [sp, #16]
	nonce[1] = pdu[1];
   1c22a:	f88d 9011 	strb.w	r9, [sp, #17]
   1c22e:	e7d5      	b.n	1c1dc <bt_mesh_net_decrypt+0x3c>

0001c230 <bt_mesh_app_decrypt>:
{
   1c230:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c232:	460d      	mov	r5, r1
   1c234:	b089      	sub	sp, #36	; 0x24
   1c236:	4607      	mov	r7, r0
	create_app_nonce(nonce, ctx);
   1c238:	a804      	add	r0, sp, #16
{
   1c23a:	4614      	mov	r4, r2
   1c23c:	461e      	mov	r6, r3
	create_app_nonce(nonce, ctx);
   1c23e:	f7ff fee9 	bl	1c014 <create_app_nonce>
	err = bt_ccm_decrypt(key, nonce, buf->data, buf->len, ctx->ad,
   1c242:	692b      	ldr	r3, [r5, #16]
   1c244:	7868      	ldrb	r0, [r5, #1]
   1c246:	6831      	ldr	r1, [r6, #0]
   1c248:	2b00      	cmp	r3, #0
   1c24a:	bf14      	ite	ne
   1c24c:	2210      	movne	r2, #16
   1c24e:	2200      	moveq	r2, #0
   1c250:	2800      	cmp	r0, #0
   1c252:	bf14      	ite	ne
   1c254:	2008      	movne	r0, #8
   1c256:	2004      	moveq	r0, #4
   1c258:	e9cd 1002 	strd	r1, r0, [sp, #8]
   1c25c:	e9cd 3200 	strd	r3, r2, [sp]
   1c260:	a904      	add	r1, sp, #16
   1c262:	88a3      	ldrh	r3, [r4, #4]
   1c264:	6822      	ldr	r2, [r4, #0]
   1c266:	4638      	mov	r0, r7
   1c268:	f7fe f9f4 	bl	1a654 <bt_ccm_decrypt>
	if (!err) {
   1c26c:	4605      	mov	r5, r0
   1c26e:	b918      	cbnz	r0, 1c278 <bt_mesh_app_decrypt+0x48>
		net_buf_simple_add(out, buf->len);
   1c270:	88a1      	ldrh	r1, [r4, #4]
   1c272:	4630      	mov	r0, r6
   1c274:	f001 fcc9 	bl	1dc0a <net_buf_simple_add>
}
   1c278:	4628      	mov	r0, r5
   1c27a:	b009      	add	sp, #36	; 0x24
   1c27c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001c27e <bt_mesh_beacon_auth>:
}

int bt_mesh_beacon_auth(const uint8_t beacon_key[16], uint8_t flags,
			const uint8_t net_id[8], uint32_t iv_index,
			uint8_t auth[8])
{
   1c27e:	b530      	push	{r4, r5, lr}
   1c280:	b089      	sub	sp, #36	; 0x24
   1c282:	4604      	mov	r4, r0
   1c284:	4608      	mov	r0, r1
   1c286:	461d      	mov	r5, r3
   1c288:	4611      	mov	r1, r2

	BT_DBG("BeaconKey %s", bt_hex(beacon_key, 16));
	BT_DBG("NetId %s", bt_hex(net_id, 8));
	BT_DBG("IV Index 0x%08x", iv_index);

	msg[0] = flags;
   1c28a:	f88d 0000 	strb.w	r0, [sp]
	memcpy(&msg[1], net_id, 8);
   1c28e:	2208      	movs	r2, #8
   1c290:	f10d 0001 	add.w	r0, sp, #1
   1c294:	f7fd fff3 	bl	1a27e <memcpy>
	sys_put_be32(iv_index, &msg[9]);
   1c298:	f10d 0109 	add.w	r1, sp, #9
   1c29c:	4628      	mov	r0, r5
   1c29e:	f7ff feb0 	bl	1c002 <sys_put_be32>

	BT_DBG("BeaconMsg %s", bt_hex(msg, sizeof(msg)));

	err = bt_mesh_aes_cmac_one(beacon_key, msg, sizeof(msg), tmp);
   1c2a2:	4620      	mov	r0, r4
   1c2a4:	ab04      	add	r3, sp, #16
   1c2a6:	220d      	movs	r2, #13
   1c2a8:	4669      	mov	r1, sp
   1c2aa:	f7ff fef5 	bl	1c098 <bt_mesh_aes_cmac_one>
	if (!err) {
   1c2ae:	4604      	mov	r4, r0
   1c2b0:	b920      	cbnz	r0, 1c2bc <bt_mesh_beacon_auth+0x3e>
		memcpy(auth, tmp, 8);
   1c2b2:	980c      	ldr	r0, [sp, #48]	; 0x30
   1c2b4:	2208      	movs	r2, #8
   1c2b6:	a904      	add	r1, sp, #16
   1c2b8:	f7fd ffe1 	bl	1a27e <memcpy>
	}

	return err;
}
   1c2bc:	4620      	mov	r0, r4
   1c2be:	b009      	add	sp, #36	; 0x24
   1c2c0:	bd30      	pop	{r4, r5, pc}

0001c2c2 <find_group_mod_visitor>:
	if (mod->elem_idx != ctx->mod->elem_idx) {
   1c2c2:	684b      	ldr	r3, [r1, #4]
   1c2c4:	7902      	ldrb	r2, [r0, #4]
   1c2c6:	791b      	ldrb	r3, [r3, #4]
   1c2c8:	429a      	cmp	r2, r3
   1c2ca:	d001      	beq.n	1c2d0 <find_group_mod_visitor+0xe>
	return BT_MESH_WALK_CONTINUE;
   1c2cc:	2001      	movs	r0, #1
   1c2ce:	4770      	bx	lr
	ctx->entry = model_group_get(mod, ctx->addr);
   1c2d0:	890b      	ldrh	r3, [r1, #8]
		if (mod->groups[i] == addr) {
   1c2d2:	8a02      	ldrh	r2, [r0, #16]
   1c2d4:	429a      	cmp	r2, r3
   1c2d6:	d005      	beq.n	1c2e4 <find_group_mod_visitor+0x22>
   1c2d8:	8a42      	ldrh	r2, [r0, #18]
   1c2da:	429a      	cmp	r2, r3
   1c2dc:	d00c      	beq.n	1c2f8 <find_group_mod_visitor+0x36>
	ctx->entry = model_group_get(mod, ctx->addr);
   1c2de:	2300      	movs	r3, #0
   1c2e0:	600b      	str	r3, [r1, #0]
   1c2e2:	e7f3      	b.n	1c2cc <find_group_mod_visitor+0xa>
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
   1c2e4:	2300      	movs	r3, #0
			return &mod->groups[i];
   1c2e6:	3308      	adds	r3, #8
   1c2e8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
	ctx->entry = model_group_get(mod, ctx->addr);
   1c2ec:	600b      	str	r3, [r1, #0]
	if (ctx->entry) {
   1c2ee:	2b00      	cmp	r3, #0
   1c2f0:	d0ec      	beq.n	1c2cc <find_group_mod_visitor+0xa>
		ctx->mod = mod;
   1c2f2:	6048      	str	r0, [r1, #4]
		return BT_MESH_WALK_STOP;
   1c2f4:	2000      	movs	r0, #0
}
   1c2f6:	4770      	bx	lr
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
   1c2f8:	2301      	movs	r3, #1
   1c2fa:	e7f4      	b.n	1c2e6 <find_group_mod_visitor+0x24>

0001c2fc <commit_mod>:
{
   1c2fc:	b570      	push	{r4, r5, r6, lr}
	if (mod->pub && mod->pub->update &&
   1c2fe:	6885      	ldr	r5, [r0, #8]
   1c300:	b1dd      	cbz	r5, 1c33a <commit_mod+0x3e>
   1c302:	696b      	ldr	r3, [r5, #20]
   1c304:	b1cb      	cbz	r3, 1c33a <commit_mod+0x3e>
   1c306:	88ab      	ldrh	r3, [r5, #4]
   1c308:	b1bb      	cbz	r3, 1c33a <commit_mod+0x3e>
		int32_t ms = bt_mesh_model_pub_period_get(mod);
   1c30a:	f7f0 fa65 	bl	c7d8 <bt_mesh_model_pub_period_get>
		if (ms > 0) {
   1c30e:	1e04      	subs	r4, r0, #0
   1c310:	dd13      	ble.n	1c33a <commit_mod+0x3e>
   1c312:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1c316:	f240 30e7 	movw	r0, #999	; 0x3e7
   1c31a:	2100      	movs	r1, #0
   1c31c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c320:	2300      	movs	r3, #0
   1c322:	fbc4 0106 	smlal	r0, r1, r4, r6
   1c326:	f7e3 ff2b 	bl	180 <__aeabi_uldivmod>
   1c32a:	4602      	mov	r2, r0
   1c32c:	460b      	mov	r3, r1
			k_work_schedule(&mod->pub->timer, K_MSEC(ms));
   1c32e:	f105 0018 	add.w	r0, r5, #24
}
   1c332:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&mod->pub->timer, K_MSEC(ms));
   1c336:	f7fb bd63 	b.w	17e00 <k_work_schedule>
}
   1c33a:	bd70      	pop	{r4, r5, r6, pc}

0001c33c <sig_mod_set>:
{
   1c33c:	b507      	push	{r0, r1, r2, lr}
	return mod_set(false, name, len_rd, read_cb, cb_arg);
   1c33e:	9300      	str	r3, [sp, #0]
   1c340:	4613      	mov	r3, r2
   1c342:	460a      	mov	r2, r1
   1c344:	4601      	mov	r1, r0
   1c346:	2000      	movs	r0, #0
   1c348:	f7f0 fab0 	bl	c8ac <mod_set>
}
   1c34c:	b003      	add	sp, #12
   1c34e:	f85d fb04 	ldr.w	pc, [sp], #4

0001c352 <vnd_mod_set>:
{
   1c352:	b507      	push	{r0, r1, r2, lr}
	return mod_set(true, name, len_rd, read_cb, cb_arg);
   1c354:	9300      	str	r3, [sp, #0]
   1c356:	4613      	mov	r3, r2
   1c358:	460a      	mov	r2, r1
   1c35a:	4601      	mov	r1, r0
   1c35c:	2001      	movs	r0, #1
   1c35e:	f7f0 faa5 	bl	c8ac <mod_set>
}
   1c362:	b003      	add	sp, #12
   1c364:	f85d fb04 	ldr.w	pc, [sp], #4

0001c368 <bt_mesh_model_has_key>:
		if (mod->keys[i] == key ||
   1c368:	8983      	ldrh	r3, [r0, #12]
   1c36a:	4299      	cmp	r1, r3
   1c36c:	d015      	beq.n	1c39a <bt_mesh_model_has_key+0x32>
   1c36e:	f64f 72fc 	movw	r2, #65532	; 0xfffc
   1c372:	4293      	cmp	r3, r2
   1c374:	d103      	bne.n	1c37e <bt_mesh_model_has_key+0x16>
		     BT_MESH_IS_DEV_KEY(key))) {
   1c376:	1ccb      	adds	r3, r1, #3
		    (mod->keys[i] == BT_MESH_KEY_DEV_ANY &&
   1c378:	b29b      	uxth	r3, r3
   1c37a:	2b01      	cmp	r3, #1
   1c37c:	d90d      	bls.n	1c39a <bt_mesh_model_has_key+0x32>
		if (mod->keys[i] == key ||
   1c37e:	89c3      	ldrh	r3, [r0, #14]
   1c380:	4299      	cmp	r1, r3
   1c382:	d00a      	beq.n	1c39a <bt_mesh_model_has_key+0x32>
   1c384:	f64f 72fc 	movw	r2, #65532	; 0xfffc
   1c388:	4293      	cmp	r3, r2
   1c38a:	d108      	bne.n	1c39e <bt_mesh_model_has_key+0x36>
		     BT_MESH_IS_DEV_KEY(key))) {
   1c38c:	1cc8      	adds	r0, r1, #3
		    (mod->keys[i] == BT_MESH_KEY_DEV_ANY &&
   1c38e:	b280      	uxth	r0, r0
   1c390:	2801      	cmp	r0, #1
   1c392:	bf8c      	ite	hi
   1c394:	2000      	movhi	r0, #0
   1c396:	2001      	movls	r0, #1
   1c398:	4770      	bx	lr
			return true;
   1c39a:	2001      	movs	r0, #1
   1c39c:	4770      	bx	lr
	return false;
   1c39e:	2000      	movs	r0, #0
}
   1c3a0:	4770      	bx	lr

0001c3a2 <bt_mesh_model_extensions_walk>:
{
   1c3a2:	460b      	mov	r3, r1
	(void)cb(model, user_data);
   1c3a4:	4611      	mov	r1, r2
   1c3a6:	4718      	bx	r3

0001c3a8 <bt_mesh_model_bind_store>:
	mod->flags |= BT_MESH_MOD_BIND_PENDING;
   1c3a8:	88c3      	ldrh	r3, [r0, #6]
   1c3aa:	f043 0301 	orr.w	r3, r3, #1
   1c3ae:	80c3      	strh	r3, [r0, #6]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_MOD_PENDING);
   1c3b0:	2008      	movs	r0, #8
   1c3b2:	f7f0 bd71 	b.w	ce98 <bt_mesh_settings_store_schedule>

0001c3b6 <bt_mesh_model_pub_store>:
	mod->flags |= BT_MESH_MOD_PUB_PENDING;
   1c3b6:	88c3      	ldrh	r3, [r0, #6]
   1c3b8:	f043 0304 	orr.w	r3, r3, #4
   1c3bc:	80c3      	strh	r3, [r0, #6]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_MOD_PENDING);
   1c3be:	2008      	movs	r0, #8
   1c3c0:	f7f0 bd6a 	b.w	ce98 <bt_mesh_settings_store_schedule>

0001c3c4 <_mod_pub_set.constprop.0>:
static uint8_t _mod_pub_set(struct bt_mesh_model *model, uint16_t pub_addr,
   1c3c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c3c8:	4604      	mov	r4, r0
	if (!model->pub) {
   1c3ca:	6880      	ldr	r0, [r0, #8]
static uint8_t _mod_pub_set(struct bt_mesh_model *model, uint16_t pub_addr,
   1c3cc:	f89d 701c 	ldrb.w	r7, [sp, #28]
   1c3d0:	460e      	mov	r6, r1
   1c3d2:	4690      	mov	r8, r2
   1c3d4:	461d      	mov	r5, r3
	if (!model->pub) {
   1c3d6:	2800      	cmp	r0, #0
   1c3d8:	d065      	beq.n	1c4a6 <_mod_pub_set.constprop.0+0xe2>
	if (!IS_ENABLED(CONFIG_BT_MESH_LOW_POWER) && cred_flag) {
   1c3da:	2b00      	cmp	r3, #0
   1c3dc:	d161      	bne.n	1c4a2 <_mod_pub_set.constprop.0+0xde>
	if (!model->pub->update && period) {
   1c3de:	6942      	ldr	r2, [r0, #20]
   1c3e0:	b90a      	cbnz	r2, 1c3e6 <_mod_pub_set.constprop.0+0x22>
   1c3e2:	2f00      	cmp	r7, #0
   1c3e4:	d15f      	bne.n	1c4a6 <_mod_pub_set.constprop.0+0xe2>
	if (pub_addr == BT_MESH_ADDR_UNASSIGNED) {
   1c3e6:	b99e      	cbnz	r6, 1c410 <_mod_pub_set.constprop.0+0x4c>
		if (model->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
   1c3e8:	8883      	ldrh	r3, [r0, #4]
   1c3ea:	b173      	cbz	r3, 1c40a <_mod_pub_set.constprop.0+0x46>
		model->pub->addr = BT_MESH_ADDR_UNASSIGNED;
   1c3ec:	6843      	ldr	r3, [r0, #4]
   1c3ee:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   1c3f2:	6043      	str	r3, [r0, #4]
		model->pub->ttl = 0U;
   1c3f4:	6883      	ldr	r3, [r0, #8]
   1c3f6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
   1c3fa:	6083      	str	r3, [r0, #8]
		if (model->pub->update) {
   1c3fc:	b112      	cbz	r2, 1c404 <_mod_pub_set.constprop.0+0x40>
			(void)k_work_cancel_delayable(&model->pub->timer);
   1c3fe:	3018      	adds	r0, #24
   1c400:	f002 f93c 	bl	1e67c <k_work_cancel_delayable>
			bt_mesh_model_pub_store(model);
   1c404:	4620      	mov	r0, r4
   1c406:	f7ff ffd6 	bl	1c3b6 <bt_mesh_model_pub_store>
}
   1c40a:	4628      	mov	r0, r5
   1c40c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_mesh_app_key_exists(app_idx) || !bt_mesh_model_has_key(model, app_idx)) {
   1c410:	4640      	mov	r0, r8
   1c412:	f7ee fd35 	bl	ae80 <bt_mesh_app_key_exists>
   1c416:	b908      	cbnz	r0, 1c41c <_mod_pub_set.constprop.0+0x58>
		return STATUS_INVALID_APPKEY;
   1c418:	2503      	movs	r5, #3
   1c41a:	e7f6      	b.n	1c40a <_mod_pub_set.constprop.0+0x46>
	if (!bt_mesh_app_key_exists(app_idx) || !bt_mesh_model_has_key(model, app_idx)) {
   1c41c:	4641      	mov	r1, r8
   1c41e:	4620      	mov	r0, r4
   1c420:	f7ff ffa2 	bl	1c368 <bt_mesh_model_has_key>
   1c424:	2800      	cmp	r0, #0
   1c426:	d0f7      	beq.n	1c418 <_mod_pub_set.constprop.0+0x54>
	if (BT_MESH_ADDR_IS_VIRTUAL(model->pub->addr)) {
   1c428:	68a3      	ldr	r3, [r4, #8]
   1c42a:	8898      	ldrh	r0, [r3, #4]
   1c42c:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
   1c430:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   1c434:	d205      	bcs.n	1c442 <_mod_pub_set.constprop.0+0x7e>
		uint8_t *uuid = bt_mesh_va_label_get(model->pub->addr);
   1c436:	f7ef fa2f 	bl	b898 <bt_mesh_va_label_get>
		if (uuid) {
   1c43a:	b110      	cbz	r0, 1c442 <_mod_pub_set.constprop.0+0x7e>
			bt_mesh_va_del(uuid, NULL);
   1c43c:	2100      	movs	r1, #0
   1c43e:	f7ef f9ef 	bl	b820 <bt_mesh_va_del>
	model->pub->addr = pub_addr;
   1c442:	68a3      	ldr	r3, [r4, #8]
	model->pub->ttl = ttl;
   1c444:	f89d 2018 	ldrb.w	r2, [sp, #24]
	model->pub->addr = pub_addr;
   1c448:	809e      	strh	r6, [r3, #4]
	model->pub->key = app_idx;
   1c44a:	88de      	ldrh	r6, [r3, #6]
	model->pub->ttl = ttl;
   1c44c:	721a      	strb	r2, [r3, #8]
	model->pub->key = app_idx;
   1c44e:	f426 56ff 	bic.w	r6, r6, #8160	; 0x1fe0
   1c452:	f026 061f 	bic.w	r6, r6, #31
   1c456:	f3c8 080c 	ubfx	r8, r8, #0, #13
	model->pub->retransmit = retransmit;
   1c45a:	f89d 2020 	ldrb.w	r2, [sp, #32]
	model->pub->period = period;
   1c45e:	729f      	strb	r7, [r3, #10]
	model->pub->key = app_idx;
   1c460:	ea46 0608 	orr.w	r6, r6, r8
   1c464:	80de      	strh	r6, [r3, #6]
	model->pub->retransmit = retransmit;
   1c466:	725a      	strb	r2, [r3, #9]
	if (model->pub->update) {
   1c468:	695b      	ldr	r3, [r3, #20]
   1c46a:	2b00      	cmp	r3, #0
   1c46c:	d0ca      	beq.n	1c404 <_mod_pub_set.constprop.0+0x40>
		period_ms = bt_mesh_model_pub_period_get(model);
   1c46e:	4620      	mov	r0, r4
   1c470:	f7f0 f9b2 	bl	c7d8 <bt_mesh_model_pub_period_get>
		if (period_ms > 0) {
   1c474:	1e06      	subs	r6, r0, #0
   1c476:	68a0      	ldr	r0, [r4, #8]
   1c478:	ddc1      	ble.n	1c3fe <_mod_pub_set.constprop.0+0x3a>
			k_work_reschedule(&model->pub->timer,
   1c47a:	f100 0718 	add.w	r7, r0, #24
   1c47e:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   1c482:	f240 30e7 	movw	r0, #999	; 0x3e7
   1c486:	2100      	movs	r1, #0
   1c488:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c48c:	2300      	movs	r3, #0
   1c48e:	fbc6 010c 	smlal	r0, r1, r6, ip
   1c492:	f7e3 fe75 	bl	180 <__aeabi_uldivmod>
   1c496:	4602      	mov	r2, r0
   1c498:	460b      	mov	r3, r1
   1c49a:	4638      	mov	r0, r7
   1c49c:	f7fb fce4 	bl	17e68 <k_work_reschedule>
   1c4a0:	e7b0      	b.n	1c404 <_mod_pub_set.constprop.0+0x40>
		return STATUS_FEAT_NOT_SUPP;
   1c4a2:	250a      	movs	r5, #10
   1c4a4:	e7b1      	b.n	1c40a <_mod_pub_set.constprop.0+0x46>
		return STATUS_NVAL_PUB_PARAM;
   1c4a6:	2507      	movs	r5, #7
   1c4a8:	e7af      	b.n	1c40a <_mod_pub_set.constprop.0+0x46>

0001c4aa <mod_unbind.constprop.0>:
static uint8_t mod_unbind(struct bt_mesh_model *model, uint16_t key_idx, bool store)
   1c4aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c4ae:	4604      	mov	r4, r0
   1c4b0:	b085      	sub	sp, #20
	if (!bt_mesh_app_key_exists(key_idx)) {
   1c4b2:	4608      	mov	r0, r1
static uint8_t mod_unbind(struct bt_mesh_model *model, uint16_t key_idx, bool store)
   1c4b4:	460d      	mov	r5, r1
	if (!bt_mesh_app_key_exists(key_idx)) {
   1c4b6:	f7ee fce3 	bl	ae80 <bt_mesh_app_key_exists>
   1c4ba:	b328      	cbz	r0, 1c508 <mod_unbind.constprop.0+0x5e>
   1c4bc:	f104 060c 	add.w	r6, r4, #12
   1c4c0:	f104 0810 	add.w	r8, r4, #16
		model->keys[i] = BT_MESH_KEY_UNUSED;
   1c4c4:	f64f 79ff 	movw	r9, #65535	; 0xffff
			_mod_pub_set(model, BT_MESH_ADDR_UNASSIGNED,
   1c4c8:	2700      	movs	r7, #0
		if (model->keys[i] != key_idx) {
   1c4ca:	f836 3b02 	ldrh.w	r3, [r6], #2
   1c4ce:	429d      	cmp	r5, r3
   1c4d0:	d114      	bne.n	1c4fc <mod_unbind.constprop.0+0x52>
		model->keys[i] = BT_MESH_KEY_UNUSED;
   1c4d2:	f826 9c02 	strh.w	r9, [r6, #-2]
			bt_mesh_model_bind_store(model);
   1c4d6:	4620      	mov	r0, r4
   1c4d8:	f7ff ff66 	bl	1c3a8 <bt_mesh_model_bind_store>
		if (model->pub && model->pub->key == key_idx) {
   1c4dc:	68a3      	ldr	r3, [r4, #8]
   1c4de:	b16b      	cbz	r3, 1c4fc <mod_unbind.constprop.0+0x52>
   1c4e0:	88db      	ldrh	r3, [r3, #6]
   1c4e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
   1c4e6:	42ab      	cmp	r3, r5
   1c4e8:	d108      	bne.n	1c4fc <mod_unbind.constprop.0+0x52>
			_mod_pub_set(model, BT_MESH_ADDR_UNASSIGNED,
   1c4ea:	2300      	movs	r3, #0
   1c4ec:	e9cd 7701 	strd	r7, r7, [sp, #4]
   1c4f0:	9700      	str	r7, [sp, #0]
   1c4f2:	461a      	mov	r2, r3
   1c4f4:	4619      	mov	r1, r3
   1c4f6:	4620      	mov	r0, r4
   1c4f8:	f7ff ff64 	bl	1c3c4 <_mod_pub_set.constprop.0>
	for (i = 0; i < ARRAY_SIZE(model->keys); i++) {
   1c4fc:	4546      	cmp	r6, r8
   1c4fe:	d1e4      	bne.n	1c4ca <mod_unbind.constprop.0+0x20>
   1c500:	2000      	movs	r0, #0
}
   1c502:	b005      	add	sp, #20
   1c504:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return STATUS_INVALID_APPKEY;
   1c508:	2003      	movs	r0, #3
   1c50a:	e7fa      	b.n	1c502 <mod_unbind.constprop.0+0x58>

0001c50c <mod_app_key_del>:
	mod_unbind(mod, *app_idx, true);
   1c50c:	9b00      	ldr	r3, [sp, #0]
   1c50e:	8819      	ldrh	r1, [r3, #0]
   1c510:	f7ff bfcb 	b.w	1c4aa <mod_unbind.constprop.0>

0001c514 <bt_mesh_adv_buf_ready>:
}
   1c514:	4770      	bx	lr

0001c516 <atomic_or>:
{
   1c516:	4603      	mov	r3, r0
}
   1c518:	f3bf 8f5b 	dmb	ish
   1c51c:	e853 0f00 	ldrex	r0, [r3]
   1c520:	ea40 0201 	orr.w	r2, r0, r1
   1c524:	e843 2c00 	strex	ip, r2, [r3]
   1c528:	f1bc 0f00 	cmp.w	ip, #0
   1c52c:	d1f6      	bne.n	1c51c <atomic_or+0x6>
   1c52e:	f3bf 8f5b 	dmb	ish
   1c532:	4770      	bx	lr

0001c534 <net_buf_add_u8.isra.0>:
	return net_buf_simple_add_u8(&buf->b, val);
   1c534:	3008      	adds	r0, #8
   1c536:	f001 bb77 	b.w	1dc28 <net_buf_simple_add_u8>

0001c53a <buf_start>:
{
   1c53a:	4608      	mov	r0, r1
   1c53c:	4611      	mov	r1, r2
	if (err) {
   1c53e:	b108      	cbz	r0, 1c544 <buf_start+0xa>
		buf_sent(err, user_data);
   1c540:	f7f1 ba00 	b.w	d944 <buf_sent>
}
   1c544:	4770      	bx	lr

0001c546 <clear_tx>:

static void clear_tx(void)
{
	/* No action */
}
   1c546:	4770      	bx	lr

0001c548 <proxy_ccc_changed>:
}
   1c548:	4770      	bx	lr

0001c54a <beacon_send>:
{
   1c54a:	b530      	push	{r4, r5, lr}
   1c54c:	b08d      	sub	sp, #52	; 0x34
	NET_BUF_SIMPLE_DEFINE(buf, 23);
   1c54e:	ab06      	add	r3, sp, #24
   1c550:	f44f 12b8 	mov.w	r2, #1507328	; 0x170000
{
   1c554:	4604      	mov	r4, r0
   1c556:	460d      	mov	r5, r1
	net_buf_simple_reserve(&buf, 1);
   1c558:	a803      	add	r0, sp, #12
   1c55a:	2101      	movs	r1, #1
	NET_BUF_SIMPLE_DEFINE(buf, 23);
   1c55c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1c560:	9303      	str	r3, [sp, #12]
	net_buf_simple_reserve(&buf, 1);
   1c562:	f001 faf2 	bl	1db4a <net_buf_simple_reserve>
	bt_mesh_beacon_create(sub, &buf);
   1c566:	a903      	add	r1, sp, #12
   1c568:	4628      	mov	r0, r5
   1c56a:	f7ed f9bf 	bl	98ec <bt_mesh_beacon_create>
	return bt_mesh_proxy_msg_send(&client->cli, BT_MESH_PROXY_BEACON,
   1c56e:	2300      	movs	r3, #0
   1c570:	9300      	str	r3, [sp, #0]
   1c572:	aa03      	add	r2, sp, #12
   1c574:	2101      	movs	r1, #1
   1c576:	4620      	mov	r0, r4
   1c578:	f000 f871 	bl	1c65e <bt_mesh_proxy_msg_send>
}
   1c57c:	b00d      	add	sp, #52	; 0x34
   1c57e:	bd30      	pop	{r4, r5, pc}

0001c580 <send_beacon_cb>:
{
   1c580:	460b      	mov	r3, r1
	return beacon_send(client, sub);
   1c582:	4601      	mov	r1, r0
   1c584:	4618      	mov	r0, r3
   1c586:	f7ff bfe0 	b.w	1c54a <beacon_send>

0001c58a <buf_send_end>:
	net_buf_unref(buf);
   1c58a:	4608      	mov	r0, r1
   1c58c:	f7f9 b90c 	b.w	157a8 <net_buf_unref>

0001c590 <filter_add>:
{
   1c590:	b510      	push	{r4, lr}
	if (addr == BT_MESH_ADDR_UNASSIGNED) {
   1c592:	b191      	cbz	r1, 1c5ba <filter_add+0x2a>
		if (client->filter[i] == addr) {
   1c594:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
   1c598:	4299      	cmp	r1, r3
   1c59a:	d00e      	beq.n	1c5ba <filter_add+0x2a>
   1c59c:	f8b0 4052 	ldrh.w	r4, [r0, #82]	; 0x52
   1c5a0:	42a1      	cmp	r1, r4
   1c5a2:	d00a      	beq.n	1c5ba <filter_add+0x2a>
   1c5a4:	f8b0 2054 	ldrh.w	r2, [r0, #84]	; 0x54
   1c5a8:	4291      	cmp	r1, r2
   1c5aa:	d006      	beq.n	1c5ba <filter_add+0x2a>
		if (client->filter[i] == BT_MESH_ADDR_UNASSIGNED) {
   1c5ac:	b113      	cbz	r3, 1c5b4 <filter_add+0x24>
   1c5ae:	b12c      	cbz	r4, 1c5bc <filter_add+0x2c>
   1c5b0:	b91a      	cbnz	r2, 1c5ba <filter_add+0x2a>
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   1c5b2:	2302      	movs	r3, #2
			client->filter[i] = addr;
   1c5b4:	3328      	adds	r3, #40	; 0x28
   1c5b6:	f820 1013 	strh.w	r1, [r0, r3, lsl #1]
}
   1c5ba:	bd10      	pop	{r4, pc}
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   1c5bc:	2301      	movs	r3, #1
   1c5be:	e7f9      	b.n	1c5b4 <filter_add+0x24>

0001c5c0 <filter_remove>:
	if (addr == BT_MESH_ADDR_UNASSIGNED) {
   1c5c0:	b181      	cbz	r1, 1c5e4 <filter_remove+0x24>
		if (client->filter[i] == addr) {
   1c5c2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
   1c5c6:	428b      	cmp	r3, r1
   1c5c8:	d00d      	beq.n	1c5e6 <filter_remove+0x26>
   1c5ca:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
   1c5ce:	428b      	cmp	r3, r1
   1c5d0:	d00b      	beq.n	1c5ea <filter_remove+0x2a>
   1c5d2:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   1c5d6:	428b      	cmp	r3, r1
   1c5d8:	d104      	bne.n	1c5e4 <filter_remove+0x24>
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   1c5da:	2302      	movs	r3, #2
			client->filter[i] = BT_MESH_ADDR_UNASSIGNED;
   1c5dc:	3328      	adds	r3, #40	; 0x28
   1c5de:	2200      	movs	r2, #0
   1c5e0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
}
   1c5e4:	4770      	bx	lr
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   1c5e6:	2300      	movs	r3, #0
   1c5e8:	e7f8      	b.n	1c5dc <filter_remove+0x1c>
   1c5ea:	2301      	movs	r3, #1
   1c5ec:	e7f6      	b.n	1c5dc <filter_remove+0x1c>

0001c5ee <prov_ccc_write>:
	if (value != BT_GATT_CCC_NOTIFY) {
   1c5ee:	2a01      	cmp	r2, #1
{
   1c5f0:	b508      	push	{r3, lr}
   1c5f2:	4601      	mov	r1, r0
	if (value != BT_GATT_CCC_NOTIFY) {
   1c5f4:	d004      	beq.n	1c600 <prov_ccc_write+0x12>
}
   1c5f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1c5fa:	4610      	mov	r0, r2
   1c5fc:	f7f1 bbd6 	b.w	ddac <prov_ccc_write.part.0>
	client = find_client(conn);
   1c600:	f7f1 faf4 	bl	dbec <find_client>
	if (client->filter_type == NONE) {
   1c604:	f890 3056 	ldrb.w	r3, [r0, #86]	; 0x56
   1c608:	b92b      	cbnz	r3, 1c616 <prov_ccc_write+0x28>
		client->filter_type = PROV;
   1c60a:	2303      	movs	r3, #3
   1c60c:	f880 3056 	strb.w	r3, [r0, #86]	; 0x56
		bt_mesh_pb_gatt_open(conn);
   1c610:	4608      	mov	r0, r1
   1c612:	f7f1 fabd 	bl	db90 <bt_mesh_pb_gatt_open>
}
   1c616:	2002      	movs	r0, #2
   1c618:	bd08      	pop	{r3, pc}

0001c61a <proxy_ccc_write>:
	if (value != BT_GATT_CCC_NOTIFY) {
   1c61a:	2a01      	cmp	r2, #1
{
   1c61c:	b508      	push	{r3, lr}
   1c61e:	4611      	mov	r1, r2
	if (value != BT_GATT_CCC_NOTIFY) {
   1c620:	d004      	beq.n	1c62c <proxy_ccc_write+0x12>
}
   1c622:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1c626:	4610      	mov	r0, r2
   1c628:	f7f1 bbc0 	b.w	ddac <prov_ccc_write.part.0>
	client = find_client(conn);
   1c62c:	f7f1 fade 	bl	dbec <find_client>
	if (client->filter_type == NONE) {
   1c630:	f890 3056 	ldrb.w	r3, [r0, #86]	; 0x56
   1c634:	b923      	cbnz	r3, 1c640 <proxy_ccc_write+0x26>
		client->filter_type = ACCEPT;
   1c636:	f880 1056 	strb.w	r1, [r0, #86]	; 0x56
		k_work_submit(&client->send_beacons);
   1c63a:	3058      	adds	r0, #88	; 0x58
   1c63c:	f7fb fb78 	bl	17d30 <k_work_submit>
}
   1c640:	2002      	movs	r0, #2
   1c642:	bd08      	pop	{r3, pc}

0001c644 <prov_ccc_changed>:
   1c644:	4770      	bx	lr

0001c646 <bt_mesh_proxy_addr_add>:
{
   1c646:	4603      	mov	r3, r0
	struct bt_mesh_proxy_client *client =
   1c648:	3840      	subs	r0, #64	; 0x40
	if (client->filter_type == ACCEPT) {
   1c64a:	7d9b      	ldrb	r3, [r3, #22]
   1c64c:	2b01      	cmp	r3, #1
   1c64e:	d101      	bne.n	1c654 <bt_mesh_proxy_addr_add+0xe>
		filter_add(client, addr);
   1c650:	f7ff bf9e 	b.w	1c590 <filter_add>
	} else if (client->filter_type == REJECT) {
   1c654:	2b02      	cmp	r3, #2
   1c656:	d101      	bne.n	1c65c <bt_mesh_proxy_addr_add+0x16>
		filter_remove(client, addr);
   1c658:	f7ff bfb2 	b.w	1c5c0 <filter_remove>
}
   1c65c:	4770      	bx	lr

0001c65e <bt_mesh_proxy_msg_send>:

int bt_mesh_proxy_msg_send(struct bt_mesh_proxy_role *role, uint8_t type,
			   struct net_buf_simple *msg,
			   bt_gatt_complete_func_t end, void *user_data)
{
   1c65e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int err;
	uint16_t mtu;
	struct bt_conn *conn = role->conn;
   1c662:	f8d0 9000 	ldr.w	r9, [r0]
{
   1c666:	b085      	sub	sp, #20
   1c668:	4606      	mov	r6, r0
   1c66a:	469a      	mov	sl, r3

	BT_DBG("conn %p type 0x%02x len %u: %s", (void *)conn, type, msg->len,
	       bt_hex(msg->data, msg->len));

	/* ATT_MTU - OpCode (1 byte) - Handle (2 bytes) */
	mtu = bt_gatt_get_mtu(conn) - 3;
   1c66c:	4648      	mov	r0, r9
{
   1c66e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1c670:	9303      	str	r3, [sp, #12]
   1c672:	4688      	mov	r8, r1
   1c674:	4614      	mov	r4, r2
	mtu = bt_gatt_get_mtu(conn) - 3;
   1c676:	f7ff fa02 	bl	1ba7e <bt_gatt_get_mtu>
	if (mtu > msg->len) {
   1c67a:	88a3      	ldrh	r3, [r4, #4]
	mtu = bt_gatt_get_mtu(conn) - 3;
   1c67c:	1ec5      	subs	r5, r0, #3
   1c67e:	b2ad      	uxth	r5, r5
	if (mtu > msg->len) {
   1c680:	42ab      	cmp	r3, r5
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_COMPLETE, type));
   1c682:	f008 0b3f 	and.w	fp, r8, #63	; 0x3f
	if (mtu > msg->len) {
   1c686:	d20f      	bcs.n	1c6a8 <bt_mesh_proxy_msg_send+0x4a>
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_COMPLETE, type));
   1c688:	4659      	mov	r1, fp

	net_buf_simple_pull(msg, mtu);

	while (msg->len) {
		if (msg->len + 1 < mtu) {
			net_buf_simple_push_u8(msg, PDU_HDR(SAR_LAST, type));
   1c68a:	4620      	mov	r0, r4
   1c68c:	f001 fafd 	bl	1dc8a <net_buf_simple_push_u8>
			err = role->cb.send(conn, msg->data, msg->len, end, user_data);
   1c690:	68b5      	ldr	r5, [r6, #8]
   1c692:	9b03      	ldr	r3, [sp, #12]
   1c694:	88a2      	ldrh	r2, [r4, #4]
   1c696:	6821      	ldr	r1, [r4, #0]
   1c698:	930e      	str	r3, [sp, #56]	; 0x38
   1c69a:	4648      	mov	r0, r9
   1c69c:	4653      	mov	r3, sl
   1c69e:	46ac      	mov	ip, r5

		net_buf_simple_pull(msg, mtu);
	}

	return 0;
}
   1c6a0:	b005      	add	sp, #20
   1c6a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			err = role->cb.send(conn, msg->data, msg->len, end, user_data);
   1c6a6:	4760      	bx	ip
	net_buf_simple_push_u8(msg, PDU_HDR(SAR_FIRST, type));
   1c6a8:	f04b 0140 	orr.w	r1, fp, #64	; 0x40
   1c6ac:	4620      	mov	r0, r4
   1c6ae:	f001 faec 	bl	1dc8a <net_buf_simple_push_u8>
	err = role->cb.send(conn, msg->data, mtu, NULL, NULL);
   1c6b2:	2300      	movs	r3, #0
   1c6b4:	68b7      	ldr	r7, [r6, #8]
   1c6b6:	6821      	ldr	r1, [r4, #0]
   1c6b8:	9300      	str	r3, [sp, #0]
   1c6ba:	462a      	mov	r2, r5
   1c6bc:	4648      	mov	r0, r9
   1c6be:	47b8      	blx	r7
	if (err) {
   1c6c0:	4607      	mov	r7, r0
   1c6c2:	b938      	cbnz	r0, 1c6d4 <bt_mesh_proxy_msg_send+0x76>
	net_buf_simple_pull(msg, mtu);
   1c6c4:	4629      	mov	r1, r5
   1c6c6:	4620      	mov	r0, r4
   1c6c8:	f001 faf8 	bl	1dcbc <net_buf_simple_pull>
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_CONT, type));
   1c6cc:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
	while (msg->len) {
   1c6d0:	88a3      	ldrh	r3, [r4, #4]
   1c6d2:	b91b      	cbnz	r3, 1c6dc <bt_mesh_proxy_msg_send+0x7e>
}
   1c6d4:	4638      	mov	r0, r7
   1c6d6:	b005      	add	sp, #20
   1c6d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (msg->len + 1 < mtu) {
   1c6dc:	3301      	adds	r3, #1
   1c6de:	42ab      	cmp	r3, r5
   1c6e0:	da02      	bge.n	1c6e8 <bt_mesh_proxy_msg_send+0x8a>
			net_buf_simple_push_u8(msg, PDU_HDR(SAR_LAST, type));
   1c6e2:	f048 01c0 	orr.w	r1, r8, #192	; 0xc0
   1c6e6:	e7d0      	b.n	1c68a <bt_mesh_proxy_msg_send+0x2c>
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_CONT, type));
   1c6e8:	4659      	mov	r1, fp
   1c6ea:	4620      	mov	r0, r4
   1c6ec:	f001 facd 	bl	1dc8a <net_buf_simple_push_u8>
		err = role->cb.send(conn, msg->data, mtu, NULL, NULL);
   1c6f0:	2300      	movs	r3, #0
   1c6f2:	6821      	ldr	r1, [r4, #0]
   1c6f4:	f8d6 c008 	ldr.w	ip, [r6, #8]
   1c6f8:	9300      	str	r3, [sp, #0]
   1c6fa:	462a      	mov	r2, r5
   1c6fc:	4648      	mov	r0, r9
   1c6fe:	47e0      	blx	ip
		if (err) {
   1c700:	b920      	cbnz	r0, 1c70c <bt_mesh_proxy_msg_send+0xae>
		net_buf_simple_pull(msg, mtu);
   1c702:	4629      	mov	r1, r5
   1c704:	4620      	mov	r0, r4
   1c706:	f001 fad9 	bl	1dcbc <net_buf_simple_pull>
   1c70a:	e7e1      	b.n	1c6d0 <bt_mesh_proxy_msg_send+0x72>
   1c70c:	4607      	mov	r7, r0
   1c70e:	e7e1      	b.n	1c6d4 <bt_mesh_proxy_msg_send+0x76>

0001c710 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
   1c710:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
   1c712:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   1c714:	1dc3      	adds	r3, r0, #7
{
   1c716:	4605      	mov	r5, r0
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   1c718:	f023 0303 	bic.w	r3, r3, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   1c71c:	1e50      	subs	r0, r2, #1
{
   1c71e:	460e      	mov	r6, r1
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   1c720:	b280      	uxth	r0, r0
{
   1c722:	4614      	mov	r4, r2
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   1c724:	801a      	strh	r2, [r3, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   1c726:	2100      	movs	r1, #0
   1c728:	2204      	movs	r2, #4
   1c72a:	fb06 5000 	mla	r0, r6, r0, r5
   1c72e:	f7fd fdb1 	bl	1a294 <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
   1c732:	3c02      	subs	r4, #2
   1c734:	b2a4      	uxth	r4, r4
   1c736:	f64f 77ff 	movw	r7, #65535	; 0xffff
   1c73a:	42bc      	cmp	r4, r7
   1c73c:	d101      	bne.n	1c742 <mem_init+0x32>
		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
   1c73e:	b003      	add	sp, #12
   1c740:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
   1c742:	1c63      	adds	r3, r4, #1
   1c744:	b29b      	uxth	r3, r3
   1c746:	4373      	muls	r3, r6
		next = (uint32_t)((uint8_t *) mem_pool +
   1c748:	18ea      	adds	r2, r5, r3
   1c74a:	9201      	str	r2, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   1c74c:	1b98      	subs	r0, r3, r6
   1c74e:	2204      	movs	r2, #4
   1c750:	eb0d 0102 	add.w	r1, sp, r2
   1c754:	4428      	add	r0, r5
   1c756:	3c01      	subs	r4, #1
   1c758:	f7fd fd91 	bl	1a27e <memcpy>
   1c75c:	b2a4      	uxth	r4, r4
   1c75e:	e7ec      	b.n	1c73a <mem_init+0x2a>

0001c760 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
   1c760:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
   1c762:	6804      	ldr	r4, [r0, #0]
{
   1c764:	4605      	mov	r5, r0
	if (*mem_head) {
   1c766:	b18c      	cbz	r4, 1c78c <mem_acquire+0x2c>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   1c768:	1de3      	adds	r3, r4, #7
   1c76a:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
   1c76e:	2204      	movs	r2, #4
   1c770:	4621      	mov	r1, r4
   1c772:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   1c776:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
   1c778:	f7fd fd81 	bl	1a27e <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
   1c77c:	9b01      	ldr	r3, [sp, #4]
   1c77e:	b123      	cbz	r3, 1c78a <mem_acquire+0x2a>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   1c780:	1dda      	adds	r2, r3, #7
   1c782:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
   1c786:	3e01      	subs	r6, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   1c788:	8016      	strh	r6, [r2, #0]
				free_count;
		}

		*mem_head = head;
   1c78a:	602b      	str	r3, [r5, #0]
		return mem;
	}

	return NULL;
}
   1c78c:	4620      	mov	r0, r4
   1c78e:	b002      	add	sp, #8
   1c790:	bd70      	pop	{r4, r5, r6, pc}

0001c792 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
   1c792:	b570      	push	{r4, r5, r6, lr}
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
   1c794:	680c      	ldr	r4, [r1, #0]
{
   1c796:	4606      	mov	r6, r0
   1c798:	460d      	mov	r5, r1
	if (*mem_head) {
   1c79a:	b11c      	cbz	r4, 1c7a4 <mem_release+0x12>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   1c79c:	1de3      	adds	r3, r4, #7
   1c79e:	f023 0303 	bic.w	r3, r3, #3
   1c7a2:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
   1c7a4:	2204      	movs	r2, #4
   1c7a6:	4629      	mov	r1, r5
   1c7a8:	4630      	mov	r0, r6
   1c7aa:	f7fd fd68 	bl	1a27e <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
   1c7ae:	1df2      	adds	r2, r6, #7
   1c7b0:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
   1c7b4:	1c63      	adds	r3, r4, #1
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
   1c7b6:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
   1c7b8:	602e      	str	r6, [r5, #0]
}
   1c7ba:	bd70      	pop	{r4, r5, r6, pc}

0001c7bc <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
   1c7bc:	fb02 0001 	mla	r0, r2, r1, r0
   1c7c0:	4770      	bx	lr

0001c7c2 <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
   1c7c2:	1a40      	subs	r0, r0, r1
   1c7c4:	b280      	uxth	r0, r0
}
   1c7c6:	fbb0 f0f2 	udiv	r0, r0, r2
   1c7ca:	4770      	bx	lr

0001c7cc <mem_rcopy>:
/**
 * @brief  Copy bytes in reverse
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
   1c7cc:	b510      	push	{r4, lr}
	src += len;
   1c7ce:	4411      	add	r1, r2
	while (len--) {
   1c7d0:	3801      	subs	r0, #1
   1c7d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c7d6:	3a01      	subs	r2, #1
   1c7d8:	b292      	uxth	r2, r2
   1c7da:	429a      	cmp	r2, r3
   1c7dc:	d100      	bne.n	1c7e0 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
   1c7de:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
   1c7e0:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   1c7e4:	f800 4f01 	strb.w	r4, [r0, #1]!
   1c7e8:	e7f5      	b.n	1c7d6 <mem_rcopy+0xa>

0001c7ea <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
   1c7ea:	4401      	add	r1, r0
   1c7ec:	4288      	cmp	r0, r1
   1c7ee:	d101      	bne.n	1c7f4 <mem_nz+0xa>
		if (*src++) {
			return 1;
		}
	}

	return 0;
   1c7f0:	2000      	movs	r0, #0
   1c7f2:	4770      	bx	lr
		if (*src++) {
   1c7f4:	f810 3b01 	ldrb.w	r3, [r0], #1
   1c7f8:	2b00      	cmp	r3, #0
   1c7fa:	d0f7      	beq.n	1c7ec <mem_nz+0x2>
			return 1;
   1c7fc:	2001      	movs	r0, #1
}
   1c7fe:	4770      	bx	lr

0001c800 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
   1c800:	6010      	str	r0, [r2, #0]
   1c802:	6008      	str	r0, [r1, #0]

	return link;
}
   1c804:	4770      	bx	lr

0001c806 <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
   1c806:	680a      	ldr	r2, [r1, #0]
{
   1c808:	4603      	mov	r3, r0
	if (*head != *tail) {
   1c80a:	6800      	ldr	r0, [r0, #0]
   1c80c:	4290      	cmp	r0, r2
   1c80e:	f04f 0200 	mov.w	r2, #0
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
   1c812:	bf0a      	itet	eq
   1c814:	600a      	streq	r2, [r1, #0]
		return NULL;
   1c816:	4610      	movne	r0, r2
	*head = *tail = NULL;
   1c818:	601a      	streq	r2, [r3, #0]

	return old_head;
}
   1c81a:	4770      	bx	lr

0001c81c <memq_enqueue>:
 * @param mem[in]      The memory payload to be enqueued. Pointed to by old tail
 * @param tail[in,out] Tail of queue. Will be updated to point to link
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
   1c81c:	b510      	push	{r4, lr}
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
   1c81e:	6814      	ldr	r4, [r2, #0]
   1c820:	6020      	str	r0, [r4, #0]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
   1c822:	6814      	ldr	r4, [r2, #0]
   1c824:	6061      	str	r1, [r4, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	cpu_dmb(); /* Ensure data accesses are synchronized */
	*tail = link; /* Commit: enqueue of memq node */
   1c826:	6010      	str	r0, [r2, #0]

	return link;
}
   1c828:	bd10      	pop	{r4, pc}

0001c82a <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
   1c82a:	4288      	cmp	r0, r1
   1c82c:	d003      	beq.n	1c836 <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
   1c82e:	b11a      	cbz	r2, 1c838 <memq_peek+0xe>
		*mem = head->mem;
   1c830:	6843      	ldr	r3, [r0, #4]
   1c832:	6013      	str	r3, [r2, #0]
   1c834:	4770      	bx	lr
		return NULL;
   1c836:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
   1c838:	4770      	bx	lr

0001c83a <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
   1c83a:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
   1c83c:	4283      	cmp	r3, r0
   1c83e:	d009      	beq.n	1c854 <memq_dequeue+0x1a>
	if (mem) {
   1c840:	b122      	cbz	r2, 1c84c <memq_dequeue+0x12>
		*mem = head->mem;
   1c842:	6858      	ldr	r0, [r3, #4]
   1c844:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
   1c846:	681a      	ldr	r2, [r3, #0]
   1c848:	600a      	str	r2, [r1, #0]

	return old_head;
   1c84a:	e001      	b.n	1c850 <memq_dequeue+0x16>
	if (old_head == NULL) {
   1c84c:	2b00      	cmp	r3, #0
   1c84e:	d1fa      	bne.n	1c846 <memq_dequeue+0xc>
}
   1c850:	4618      	mov	r0, r3
   1c852:	4770      	bx	lr
		return NULL; /* queue is empty */
   1c854:	2300      	movs	r3, #0
   1c856:	e7fb      	b.n	1c850 <memq_dequeue+0x16>

0001c858 <util_ones_count_get>:
 * @param octets_len Must not be bigger than 255/8 = 31 bytes
 *
 * @return popcnt of 'octets'
 */
uint8_t util_ones_count_get(uint8_t *octets, uint8_t octets_len)
{
   1c858:	b510      	push	{r4, lr}
   1c85a:	1e42      	subs	r2, r0, #1
	uint8_t one_count = 0U;
   1c85c:	2000      	movs	r0, #0

	while (octets_len--) {
   1c85e:	3901      	subs	r1, #1
   1c860:	b2c9      	uxtb	r1, r1
   1c862:	29ff      	cmp	r1, #255	; 0xff
   1c864:	d100      	bne.n	1c868 <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
   1c866:	bd10      	pop	{r4, pc}
		bite = *octets;
   1c868:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
   1c86c:	2b00      	cmp	r3, #0
   1c86e:	d0f6      	beq.n	1c85e <util_ones_count_get+0x6>
			bite &= (bite - 1);
   1c870:	b25b      	sxtb	r3, r3
   1c872:	1e5c      	subs	r4, r3, #1
   1c874:	4023      	ands	r3, r4
			one_count++;
   1c876:	3001      	adds	r0, #1
			bite &= (bite - 1);
   1c878:	b2db      	uxtb	r3, r3
			one_count++;
   1c87a:	b2c0      	uxtb	r0, r0
   1c87c:	e7f6      	b.n	1c86c <util_ones_count_get+0x14>

0001c87e <ticker_dequeue>:
{
   1c87e:	b5f0      	push	{r4, r5, r6, r7, lr}
	previous = instance->ticker_id_head;
   1c880:	7f42      	ldrb	r2, [r0, #29]
	node = &instance->nodes[0];
   1c882:	6806      	ldr	r6, [r0, #0]
{
   1c884:	4605      	mov	r5, r0
   1c886:	468c      	mov	ip, r1
	previous = instance->ticker_id_head;
   1c888:	4613      	mov	r3, r2
	total = 0U;
   1c88a:	2000      	movs	r0, #0
	while (current != TICKER_NULL) {
   1c88c:	2aff      	cmp	r2, #255	; 0xff
   1c88e:	d101      	bne.n	1c894 <ticker_dequeue+0x16>
		return 0;
   1c890:	2000      	movs	r0, #0
}
   1c892:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
   1c894:	eb02 0442 	add.w	r4, r2, r2, lsl #1
   1c898:	0127      	lsls	r7, r4, #4
   1c89a:	eb06 1404 	add.w	r4, r6, r4, lsl #4
		if (current == id) {
   1c89e:	4562      	cmp	r2, ip
		total += ticker_current->ticks_to_expire;
   1c8a0:	68a1      	ldr	r1, [r4, #8]
		current = ticker_current->next;
   1c8a2:	5df7      	ldrb	r7, [r6, r7]
		total += ticker_current->ticks_to_expire;
   1c8a4:	4408      	add	r0, r1
		if (current == id) {
   1c8a6:	d002      	beq.n	1c8ae <ticker_dequeue+0x30>
   1c8a8:	4613      	mov	r3, r2
		current = ticker_current->next;
   1c8aa:	463a      	mov	r2, r7
   1c8ac:	e7ee      	b.n	1c88c <ticker_dequeue+0xe>
	if (previous == current) {
   1c8ae:	4293      	cmp	r3, r2
   1c8b0:	d100      	bne.n	1c8b4 <ticker_dequeue+0x36>
		instance->ticker_id_head = ticker_current->next;
   1c8b2:	776f      	strb	r7, [r5, #29]
	node[previous].next = ticker_current->next;
   1c8b4:	b21b      	sxth	r3, r3
   1c8b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1c8ba:	011b      	lsls	r3, r3, #4
   1c8bc:	54f7      	strb	r7, [r6, r3]
	if (ticker_current->next != TICKER_NULL) {
   1c8be:	7823      	ldrb	r3, [r4, #0]
   1c8c0:	2bff      	cmp	r3, #255	; 0xff
   1c8c2:	d0e6      	beq.n	1c892 <ticker_dequeue+0x14>
		node[ticker_current->next].ticks_to_expire += timeout;
   1c8c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1c8c8:	eb06 1303 	add.w	r3, r6, r3, lsl #4
   1c8cc:	689a      	ldr	r2, [r3, #8]
   1c8ce:	440a      	add	r2, r1
   1c8d0:	609a      	str	r2, [r3, #8]
	return (total + timeout);
   1c8d2:	e7de      	b.n	1c892 <ticker_dequeue+0x14>

0001c8d4 <ticks_to_expire_prep>:
{
   1c8d4:	b530      	push	{r4, r5, lr}
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   1c8d6:	1a55      	subs	r5, r2, r1
   1c8d8:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
   1c8dc:	6883      	ldr	r3, [r0, #8]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   1c8de:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   1c8e0:	d109      	bne.n	1c8f6 <ticks_to_expire_prep+0x22>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1c8e2:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   1c8e6:	442b      	add	r3, r5
	if (ticks_to_expire > ticks_to_expire_minus) {
   1c8e8:	42a3      	cmp	r3, r4
   1c8ea:	d90e      	bls.n	1c90a <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
   1c8ec:	1b1b      	subs	r3, r3, r4
		ticks_to_expire_minus = 0U;
   1c8ee:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
   1c8f0:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   1c8f2:	6144      	str	r4, [r0, #20]
}
   1c8f4:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1c8f6:	1a8a      	subs	r2, r1, r2
   1c8f8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   1c8fc:	4293      	cmp	r3, r2
   1c8fe:	d901      	bls.n	1c904 <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
   1c900:	1a9b      	subs	r3, r3, r2
   1c902:	e7f1      	b.n	1c8e8 <ticks_to_expire_prep+0x14>
			ticks_to_expire_minus +=
   1c904:	4414      	add	r4, r2
   1c906:	1ae4      	subs	r4, r4, r3
			ticks_to_expire = 0U;
   1c908:	2300      	movs	r3, #0
		ticks_to_expire_minus -= ticks_to_expire;
   1c90a:	1ae4      	subs	r4, r4, r3
		ticks_to_expire = 0U;
   1c90c:	2300      	movs	r3, #0
   1c90e:	e7ef      	b.n	1c8f0 <ticks_to_expire_prep+0x1c>

0001c910 <ticker_job_op_cb>:
{
   1c910:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   1c912:	2200      	movs	r2, #0
   1c914:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
   1c916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	user_op->status = status;
   1c918:	6299      	str	r1, [r3, #40]	; 0x28
{
   1c91a:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
   1c91c:	b10a      	cbz	r2, 1c922 <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   1c91e:	6b19      	ldr	r1, [r3, #48]	; 0x30
   1c920:	4710      	bx	r2
}
   1c922:	4770      	bx	lr

0001c924 <ticker_job_list_insert>:
{
   1c924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c928:	b089      	sub	sp, #36	; 0x24
	node = &instance->nodes[0];
   1c92a:	6803      	ldr	r3, [r0, #0]
   1c92c:	9303      	str	r3, [sp, #12]
	users = &instance->users[0];
   1c92e:	6843      	ldr	r3, [r0, #4]
   1c930:	9305      	str	r3, [sp, #20]
	while (count_user--) {
   1c932:	7a43      	ldrb	r3, [r0, #9]
{
   1c934:	4606      	mov	r6, r0
   1c936:	4688      	mov	r8, r1
   1c938:	3b01      	subs	r3, #1
   1c93a:	fa5f fa83 	uxtb.w	sl, r3
	while (count_user--) {
   1c93e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   1c942:	d102      	bne.n	1c94a <ticker_job_list_insert+0x26>
}
   1c944:	b009      	add	sp, #36	; 0x24
   1c946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		user = &users[count_user];
   1c94a:	9b05      	ldr	r3, [sp, #20]
   1c94c:	eb03 0bca 	add.w	fp, r3, sl, lsl #3
		user_ops = (void *)&user->user_op[0];
   1c950:	f8db 3004 	ldr.w	r3, [fp, #4]
		user_ops_first = user->first;
   1c954:	f89b 7001 	ldrb.w	r7, [fp, #1]
		user_ops = (void *)&user->user_op[0];
   1c958:	9304      	str	r3, [sp, #16]
		while ((insert_head != TICKER_NULL) ||
   1c95a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1c95e:	d076      	beq.n	1ca4e <ticker_job_list_insert+0x12a>
				ticker = &node[id_insert];
   1c960:	eb08 0448 	add.w	r4, r8, r8, lsl #1
   1c964:	9a03      	ldr	r2, [sp, #12]
   1c966:	f8cd 8008 	str.w	r8, [sp, #8]
   1c96a:	0123      	lsls	r3, r4, #4
				user_op = NULL;
   1c96c:	2500      	movs	r5, #0
				insert_head = ticker->next;
   1c96e:	f812 8003 	ldrb.w	r8, [r2, r3]
				ticker = &node[id_insert];
   1c972:	eb02 1404 	add.w	r4, r2, r4, lsl #4
	ticker->next = TICKER_NULL;
   1c976:	23ff      	movs	r3, #255	; 0xff
   1c978:	7023      	strb	r3, [r4, #0]
	ticker_new = &node[id];
   1c97a:	f9bd c008 	ldrsh.w	ip, [sp, #8]
	node = &instance->nodes[0];
   1c97e:	6830      	ldr	r0, [r6, #0]
	ticker_new = &node[id];
   1c980:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   1c984:	ea4f 120c 	mov.w	r2, ip, lsl #4
   1c988:	eb00 1c0c 	add.w	ip, r0, ip, lsl #4
   1c98c:	9206      	str	r2, [sp, #24]
	ticks_to_expire = ticker_new->ticks_to_expire;
   1c98e:	f8dc 2008 	ldr.w	r2, [ip, #8]
   1c992:	9201      	str	r2, [sp, #4]
	current = instance->ticker_id_head;
   1c994:	7f72      	ldrb	r2, [r6, #29]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   1c996:	2aff      	cmp	r2, #255	; 0xff
   1c998:	d00c      	beq.n	1c9b4 <ticker_job_list_insert+0x90>
		(ticker_current = &node[current])->ticks_to_expire))) {
   1c99a:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
   1c99e:	ea4f 110e 	mov.w	r1, lr, lsl #4
   1c9a2:	eb00 1e0e 	add.w	lr, r0, lr, lsl #4
   1c9a6:	9107      	str	r1, [sp, #28]
		(ticks_to_expire_current =
   1c9a8:	f8de 9008 	ldr.w	r9, [lr, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   1c9ac:	9901      	ldr	r1, [sp, #4]
   1c9ae:	4549      	cmp	r1, r9
   1c9b0:	f080 8085 	bcs.w	1cabe <ticker_job_list_insert+0x19a>
	if (previous == TICKER_NULL) {
   1c9b4:	2bff      	cmp	r3, #255	; 0xff
		node[previous].next = id;
   1c9b6:	bf18      	it	ne
   1c9b8:	b21b      	sxthne	r3, r3
	ticker_new->ticks_to_expire = ticks_to_expire;
   1c9ba:	9901      	ldr	r1, [sp, #4]
   1c9bc:	f8cc 1008 	str.w	r1, [ip, #8]
		node[previous].next = id;
   1c9c0:	bf18      	it	ne
   1c9c2:	eb03 0343 	addne.w	r3, r3, r3, lsl #1
	ticker_new->next = current;
   1c9c6:	9906      	ldr	r1, [sp, #24]
		instance->ticker_id_head = id;
   1c9c8:	bf08      	it	eq
   1c9ca:	9b02      	ldreq	r3, [sp, #8]
	ticker_new->next = current;
   1c9cc:	5442      	strb	r2, [r0, r1]
		node[previous].next = id;
   1c9ce:	bf1d      	ittte	ne
   1c9d0:	011b      	lslne	r3, r3, #4
   1c9d2:	9902      	ldrne	r1, [sp, #8]
   1c9d4:	54c1      	strbne	r1, [r0, r3]
		instance->ticker_id_head = id;
   1c9d6:	7773      	strbeq	r3, [r6, #29]
	if (current != TICKER_NULL) {
   1c9d8:	2aff      	cmp	r2, #255	; 0xff
   1c9da:	d007      	beq.n	1c9ec <ticker_job_list_insert+0xc8>
		node[current].ticks_to_expire -= ticks_to_expire;
   1c9dc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1c9e0:	eb00 1202 	add.w	r2, r0, r2, lsl #4
   1c9e4:	9901      	ldr	r1, [sp, #4]
   1c9e6:	6893      	ldr	r3, [r2, #8]
   1c9e8:	1a5b      	subs	r3, r3, r1
   1c9ea:	6093      	str	r3, [r2, #8]
	ticker->req = ticker->ack + 1;
   1c9ec:	78a3      	ldrb	r3, [r4, #2]
   1c9ee:	3301      	adds	r3, #1
   1c9f0:	7063      	strb	r3, [r4, #1]
			if (user_op) {
   1c9f2:	2d00      	cmp	r5, #0
   1c9f4:	d0b1      	beq.n	1c95a <ticker_job_list_insert+0x36>
				ticker_job_op_cb(user_op, status);
   1c9f6:	2100      	movs	r1, #0
   1c9f8:	4628      	mov	r0, r5
   1c9fa:	f7ff ff89 	bl	1c910 <ticker_job_op_cb>
				if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   1c9fe:	6863      	ldr	r3, [r4, #4]
   1ca00:	2b00      	cmp	r3, #0
   1ca02:	d1aa      	bne.n	1c95a <ticker_job_list_insert+0x36>
					ticker->fp_op_func =
   1ca04:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1ca06:	6223      	str	r3, [r4, #32]
					ticker->op_context =
   1ca08:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   1ca0a:	6263      	str	r3, [r4, #36]	; 0x24
   1ca0c:	e7a5      	b.n	1c95a <ticker_job_list_insert+0x36>
				user_op = &user_ops[user_ops_first];
   1ca0e:	9a04      	ldr	r2, [sp, #16]
   1ca10:	2334      	movs	r3, #52	; 0x34
   1ca12:	fb17 f303 	smulbb	r3, r7, r3
   1ca16:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
   1ca18:	3701      	adds	r7, #1
				if (first == user->count_user_op) {
   1ca1a:	f89b 2000 	ldrb.w	r2, [fp]
				first = user_ops_first + 1;
   1ca1e:	b2ff      	uxtb	r7, r7
					first = 0U;
   1ca20:	42ba      	cmp	r2, r7
   1ca22:	bf08      	it	eq
   1ca24:	2700      	moveq	r7, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   1ca26:	9a04      	ldr	r2, [sp, #16]
   1ca28:	5cd3      	ldrb	r3, [r2, r3]
   1ca2a:	2b04      	cmp	r3, #4
   1ca2c:	d10f      	bne.n	1ca4e <ticker_job_list_insert+0x12a>
				id_insert = user_op->id;
   1ca2e:	786b      	ldrb	r3, [r5, #1]
   1ca30:	9302      	str	r3, [sp, #8]
				ticker = &node[id_insert];
   1ca32:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   1ca36:	9b03      	ldr	r3, [sp, #12]
   1ca38:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				if (((ticker->req -
   1ca3c:	7863      	ldrb	r3, [r4, #1]
				      ticker->ack) & 0xff) != 0U) {
   1ca3e:	78a2      	ldrb	r2, [r4, #2]
				if (((ticker->req -
   1ca40:	1a9b      	subs	r3, r3, r2
				      ticker->ack) & 0xff) != 0U) {
   1ca42:	b2db      	uxtb	r3, r3
				if (((ticker->req -
   1ca44:	b153      	cbz	r3, 1ca5c <ticker_job_list_insert+0x138>
					ticker_job_op_cb(user_op,
   1ca46:	2101      	movs	r1, #1
   1ca48:	4628      	mov	r0, r5
   1ca4a:	f7ff ff61 	bl	1c910 <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
   1ca4e:	f89b 3002 	ldrb.w	r3, [fp, #2]
   1ca52:	42bb      	cmp	r3, r7
   1ca54:	d1db      	bne.n	1ca0e <ticker_job_list_insert+0xea>
   1ca56:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   1ca5a:	e76e      	b.n	1c93a <ticker_job_list_insert+0x16>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   1ca5c:	8aab      	ldrh	r3, [r5, #20]
				ticker_job_op_start(ticker, user_op,
   1ca5e:	6971      	ldr	r1, [r6, #20]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   1ca60:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   1ca64:	4293      	cmp	r3, r2
   1ca66:	d006      	beq.n	1ca76 <ticker_job_list_insert+0x152>
		ticker->must_expire =
   1ca68:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1ca6c:	1a98      	subs	r0, r3, r2
   1ca6e:	4242      	negs	r2, r0
   1ca70:	4142      	adcs	r2, r0
   1ca72:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
   1ca76:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1ca78:	62a2      	str	r2, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   1ca7a:	68ea      	ldr	r2, [r5, #12]
   1ca7c:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   1ca7e:	692a      	ldr	r2, [r5, #16]
   1ca80:	6222      	str	r2, [r4, #32]
	ticker->lazy_periodic =
   1ca82:	f64f 72fd 	movw	r2, #65533	; 0xfffd
   1ca86:	4293      	cmp	r3, r2
   1ca88:	bf88      	it	hi
   1ca8a:	2300      	movhi	r3, #0
   1ca8c:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
   1ca8e:	69ab      	ldr	r3, [r5, #24]
   1ca90:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
   1ca92:	69eb      	ldr	r3, [r5, #28]
   1ca94:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
   1ca96:	6a2b      	ldr	r3, [r5, #32]
   1ca98:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0U;
   1ca9a:	f04f 0900 	mov.w	r9, #0
	ticker->ticks_to_expire = start->ticks_first;
   1ca9e:	68ab      	ldr	r3, [r5, #8]
   1caa0:	60a3      	str	r3, [r4, #8]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   1caa2:	686a      	ldr	r2, [r5, #4]
	ticker->ticks_to_expire_minus = 0U;
   1caa4:	f8c4 9014 	str.w	r9, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   1caa8:	4620      	mov	r0, r4
   1caaa:	f7ff ff13 	bl	1c8d4 <ticks_to_expire_prep>
	ticker->force = 1U;
   1caae:	f04f 0301 	mov.w	r3, #1
	ticker->remainder_current = 0U;
   1cab2:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   1cab6:	f8a4 901e 	strh.w	r9, [r4, #30]
	ticker->force = 1U;
   1caba:	70e3      	strb	r3, [r4, #3]
}
   1cabc:	e75b      	b.n	1c976 <ticker_job_list_insert+0x52>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
   1cabe:	9901      	ldr	r1, [sp, #4]
   1cac0:	ebb1 0109 	subs.w	r1, r1, r9
   1cac4:	9101      	str	r1, [sp, #4]
   1cac6:	d105      	bne.n	1cad4 <ticker_job_list_insert+0x1b0>
   1cac8:	f8bc 101e 	ldrh.w	r1, [ip, #30]
   1cacc:	f8be e01e 	ldrh.w	lr, [lr, #30]
   1cad0:	4571      	cmp	r1, lr
   1cad2:	d803      	bhi.n	1cadc <ticker_job_list_insert+0x1b8>
		current = ticker_current->next;
   1cad4:	4613      	mov	r3, r2
   1cad6:	9a07      	ldr	r2, [sp, #28]
   1cad8:	5c82      	ldrb	r2, [r0, r2]
   1cada:	e75c      	b.n	1c996 <ticker_job_list_insert+0x72>
   1cadc:	f8cd 9004 	str.w	r9, [sp, #4]
   1cae0:	e768      	b.n	1c9b4 <ticker_job_list_insert+0x90>

0001cae2 <ticker_worker>:
{
   1cae2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   1cae6:	7f86      	ldrb	r6, [r0, #30]
	instance->worker_trigger = 1U;
   1cae8:	2301      	movs	r3, #1
{
   1caea:	b08d      	sub	sp, #52	; 0x34
   1caec:	4605      	mov	r5, r0
	instance->worker_trigger = 1U;
   1caee:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
   1caf0:	b91e      	cbnz	r6, 1cafa <ticker_worker+0x18>
	if (instance->ticker_id_head == TICKER_NULL) {
   1caf2:	7f43      	ldrb	r3, [r0, #29]
   1caf4:	2bff      	cmp	r3, #255	; 0xff
   1caf6:	d103      	bne.n	1cb00 <ticker_worker+0x1e>
		instance->worker_trigger = 0U;
   1caf8:	77c6      	strb	r6, [r0, #31]
}
   1cafa:	b00d      	add	sp, #52	; 0x34
   1cafc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   1cb00:	f7f8 f8fa 	bl	14cf8 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1cb04:	696b      	ldr	r3, [r5, #20]
	ticker_id_head = instance->ticker_id_head;
   1cb06:	7f6f      	ldrb	r7, [r5, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1cb08:	1ac0      	subs	r0, r0, r3
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   1cb0a:	7f2b      	ldrb	r3, [r5, #28]
   1cb0c:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1cb0e:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   1cb12:	d004      	beq.n	1cb1e <ticker_worker+0x3c>
		if (instance->ticks_slot_previous > ticks_elapsed) {
   1cb14:	69ae      	ldr	r6, [r5, #24]
	uint8_t slot_reserved = 0;
   1cb16:	455e      	cmp	r6, fp
   1cb18:	bf94      	ite	ls
   1cb1a:	2600      	movls	r6, #0
   1cb1c:	2601      	movhi	r6, #1
	node = &instance->nodes[0];
   1cb1e:	f8d5 9000 	ldr.w	r9, [r5]
	ticks_expired = 0U;
   1cb22:	f04f 0800 	mov.w	r8, #0
	while (ticker_id_head != TICKER_NULL) {
   1cb26:	2fff      	cmp	r7, #255	; 0xff
   1cb28:	d11a      	bne.n	1cb60 <ticker_worker+0x7e>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   1cb2a:	7aea      	ldrb	r2, [r5, #11]
   1cb2c:	7aab      	ldrb	r3, [r5, #10]
   1cb2e:	4293      	cmp	r3, r2
   1cb30:	d105      	bne.n	1cb3e <ticker_worker+0x5c>
	uint8_t idx = *ticks_elapsed_index + 1;
   1cb32:	3301      	adds	r3, #1
   1cb34:	b2db      	uxtb	r3, r3
		idx = 0U;
   1cb36:	2b02      	cmp	r3, #2
   1cb38:	bf08      	it	eq
   1cb3a:	2300      	moveq	r3, #0
	*ticks_elapsed_index = idx;
   1cb3c:	72eb      	strb	r3, [r5, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   1cb3e:	7aeb      	ldrb	r3, [r5, #11]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1cb40:	6a6c      	ldr	r4, [r5, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   1cb42:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1cb46:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   1cb48:	f8c3 800c 	str.w	r8, [r3, #12]
	instance->worker_trigger = 0U;
   1cb4c:	2300      	movs	r3, #0
   1cb4e:	77eb      	strb	r3, [r5, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1cb50:	2104      	movs	r1, #4
   1cb52:	462b      	mov	r3, r5
   1cb54:	2003      	movs	r0, #3
   1cb56:	46a4      	mov	ip, r4
}
   1cb58:	b00d      	add	sp, #52	; 0x34
   1cb5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1cb5e:	4760      	bx	ip
		ticker = &node[ticker_id_head];
   1cb60:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   1cb64:	eb09 1407 	add.w	r4, r9, r7, lsl #4
   1cb68:	013a      	lsls	r2, r7, #4
		ticks_to_expire = ticker->ticks_to_expire;
   1cb6a:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   1cb6c:	459b      	cmp	fp, r3
   1cb6e:	d3dc      	bcc.n	1cb2a <ticker_worker+0x48>
		ticks_elapsed -= ticks_to_expire;
   1cb70:	ebab 0b03 	sub.w	fp, fp, r3
		ticks_expired += ticks_to_expire;
   1cb74:	4498      	add	r8, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   1cb76:	78a3      	ldrb	r3, [r4, #2]
   1cb78:	9303      	str	r3, [sp, #12]
		ticker_id_head = ticker->next;
   1cb7a:	f819 7002 	ldrb.w	r7, [r9, r2]
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   1cb7e:	7863      	ldrb	r3, [r4, #1]
   1cb80:	9a03      	ldr	r2, [sp, #12]
   1cb82:	1a9b      	subs	r3, r3, r2
   1cb84:	b2db      	uxtb	r3, r3
   1cb86:	2b01      	cmp	r3, #1
   1cb88:	d1cd      	bne.n	1cb26 <ticker_worker+0x44>
		if (ticker->ticks_slot != 0U &&
   1cb8a:	69a3      	ldr	r3, [r4, #24]
   1cb8c:	9304      	str	r3, [sp, #16]
   1cb8e:	2b00      	cmp	r3, #0
   1cb90:	d034      	beq.n	1cbfc <ticker_worker+0x11a>
   1cb92:	2e00      	cmp	r6, #0
   1cb94:	f040 80a8 	bne.w	1cce8 <ticker_worker+0x206>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   1cb98:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
   1cb9c:	9305      	str	r3, [sp, #20]
   1cb9e:	3380      	adds	r3, #128	; 0x80
   1cba0:	d02c      	beq.n	1cbfc <ticker_worker+0x11a>
   1cba2:	2fff      	cmp	r7, #255	; 0xff
   1cba4:	d02a      	beq.n	1cbfc <ticker_worker+0x11a>
		int32_t lazy_current = ticker->lazy_current;
   1cba6:	8be3      	ldrh	r3, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
   1cba8:	8ba2      	ldrh	r2, [r4, #28]
		uint32_t current_age = ticker->ticks_periodic +
   1cbaa:	6861      	ldr	r1, [r4, #4]
		if (lazy_current >= ticker->lazy_periodic) {
   1cbac:	4293      	cmp	r3, r2
			lazy_current -= ticker->lazy_periodic;
   1cbae:	bf28      	it	cs
   1cbb0:	1a9b      	subcs	r3, r3, r2
		uint32_t current_age = ticker->ticks_periodic +
   1cbb2:	fb03 1201 	mla	r2, r3, r1, r1
   1cbb6:	9209      	str	r2, [sp, #36]	; 0x24
		uint32_t acc_ticks_to_expire = 0U;
   1cbb8:	2200      	movs	r2, #0
   1cbba:	9206      	str	r2, [sp, #24]
				(lazy_current - ticker->priority);
   1cbbc:	9a05      	ldr	r2, [sp, #20]
   1cbbe:	1a9b      	subs	r3, r3, r2
		uint32_t current_age = ticker->ticks_periodic +
   1cbc0:	46ba      	mov	sl, r7
				(lazy_current - ticker->priority);
   1cbc2:	930b      	str	r3, [sp, #44]	; 0x2c
			struct ticker_node *ticker_next = &nodes[id_head];
   1cbc4:	fa0f fa8a 	sxth.w	sl, sl
   1cbc8:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
   1cbcc:	ea4f 130a 	mov.w	r3, sl, lsl #4
   1cbd0:	eb09 1a0a 	add.w	sl, r9, sl, lsl #4
   1cbd4:	9308      	str	r3, [sp, #32]
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   1cbd6:	f8da c008 	ldr.w	ip, [sl, #8]
   1cbda:	9b06      	ldr	r3, [sp, #24]
   1cbdc:	4463      	add	r3, ip
   1cbde:	9306      	str	r3, [sp, #24]
			if (acc_ticks_to_expire > ticker->ticks_slot) {
   1cbe0:	9a06      	ldr	r2, [sp, #24]
   1cbe2:	9b04      	ldr	r3, [sp, #16]
   1cbe4:	4293      	cmp	r3, r2
   1cbe6:	d309      	bcc.n	1cbfc <ticker_worker+0x11a>
			if (ticker_next->ticks_slot == 0U) {
   1cbe8:	f8da 3018 	ldr.w	r3, [sl, #24]
   1cbec:	2b00      	cmp	r3, #0
   1cbee:	d13a      	bne.n	1cc66 <ticker_worker+0x184>
			id_head = ticker_next->next;
   1cbf0:	9b08      	ldr	r3, [sp, #32]
   1cbf2:	f819 a003 	ldrb.w	sl, [r9, r3]
		while (id_head != TICKER_NULL) {
   1cbf6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   1cbfa:	d1e3      	bne.n	1cbc4 <ticker_worker+0xe2>
		must_expire_skip = 0U;
   1cbfc:	f04f 0a00 	mov.w	sl, #0
		if (ticker->ext_data) {
   1cc00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1cc02:	2b00      	cmp	r3, #0
   1cc04:	f000 809a 	beq.w	1cd3c <ticker_worker+0x25a>
			ticker->ext_data->ticks_drift = 0U;
   1cc08:	2200      	movs	r2, #0
			ticks_drift = ticker->ext_data->ticks_drift;
   1cc0a:	6859      	ldr	r1, [r3, #4]
			ticker->ext_data->reschedule_state =
   1cc0c:	721a      	strb	r2, [r3, #8]
			ticker->ext_data->ticks_drift = 0U;
   1cc0e:	605a      	str	r2, [r3, #4]
		ticker->ack--;
   1cc10:	9b03      	ldr	r3, [sp, #12]
   1cc12:	3b01      	subs	r3, #1
   1cc14:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
   1cc16:	68e3      	ldr	r3, [r4, #12]
   1cc18:	469e      	mov	lr, r3
   1cc1a:	2b00      	cmp	r3, #0
   1cc1c:	d083      	beq.n	1cb26 <ticker_worker+0x44>
					   ticks_expired -
   1cc1e:	6960      	ldr	r0, [r4, #20]
   1cc20:	696b      	ldr	r3, [r5, #20]
			ticker->timeout_func(ticks_at_expire,
   1cc22:	6a62      	ldr	r2, [r4, #36]	; 0x24
					   ticks_expired -
   1cc24:	eba8 0000 	sub.w	r0, r8, r0
   1cc28:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   1cc2a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   1cc2e:	f1ba 0f00 	cmp.w	sl, #0
   1cc32:	f040 8085 	bne.w	1cd40 <ticker_worker+0x25e>
   1cc36:	8be3      	ldrh	r3, [r4, #30]
   1cc38:	f8d4 c010 	ldr.w	ip, [r4, #16]
   1cc3c:	f8cd c004 	str.w	ip, [sp, #4]
   1cc40:	f894 c003 	ldrb.w	ip, [r4, #3]
   1cc44:	f8cd c000 	str.w	ip, [sp]
   1cc48:	46f4      	mov	ip, lr
   1cc4a:	47e0      	blx	ip
			if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   1cc4c:	f1ba 0f00 	cmp.w	sl, #0
   1cc50:	f47f af69 	bne.w	1cb26 <ticker_worker+0x44>
				if (ticker->ticks_slot != 0U) {
   1cc54:	69a3      	ldr	r3, [r4, #24]
				ticker->lazy_current = 0U;
   1cc56:	f8a4 a01e 	strh.w	sl, [r4, #30]
					slot_reserved = 1U;
   1cc5a:	2b00      	cmp	r3, #0
				ticker->force = 0U;
   1cc5c:	f884 a003 	strb.w	sl, [r4, #3]
					slot_reserved = 1U;
   1cc60:	bf18      	it	ne
   1cc62:	2601      	movne	r6, #1
   1cc64:	e75f      	b.n	1cb26 <ticker_worker+0x44>
			int32_t lazy_next = ticker_next->lazy_current;
   1cc66:	f8ba 201e 	ldrh.w	r2, [sl, #30]
				ticker_next->lazy_periodic > lazy_next;
   1cc6a:	f8ba 001c 	ldrh.w	r0, [sl, #28]
				ticker_next->priority;
   1cc6e:	f99a e02d 	ldrsb.w	lr, [sl, #45]	; 0x2d
   1cc72:	f8cd e01c 	str.w	lr, [sp, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   1cc76:	f8da e004 	ldr.w	lr, [sl, #4]
			if (!lazy_next_periodic_skip) {
   1cc7a:	4282      	cmp	r2, r0
			int32_t lazy_next = ticker_next->lazy_current;
   1cc7c:	4613      	mov	r3, r2
				lazy_next -= ticker_next->lazy_periodic;
   1cc7e:	bf28      	it	cs
   1cc80:	1a13      	subcs	r3, r2, r0
					  0U :
   1cc82:	f1be 0f00 	cmp.w	lr, #0
   1cc86:	d04d      	beq.n	1cd24 <ticker_worker+0x242>
   1cc88:	ebae 0c0c 	sub.w	ip, lr, ip
				(ticker->ticks_periodic == 0U) ||
   1cc8c:	2900      	cmp	r1, #0
   1cc8e:	d04b      	beq.n	1cd28 <ticker_worker+0x246>
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   1cc90:	fb0e cc03 	mla	ip, lr, r3, ip
				(ticker->ticks_periodic == 0U) ||
   1cc94:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
   1cc98:	45e6      	cmp	lr, ip
   1cc9a:	bf8c      	ite	hi
   1cc9c:	f04f 0e01 	movhi.w	lr, #1
   1cca0:	f04f 0e00 	movls.w	lr, #0
					(ticker->ticks_periodic != 0U) &&
   1cca4:	bf34      	ite	cc
   1cca6:	f04f 0c01 	movcc.w	ip, #1
   1ccaa:	f04f 0c00 	movcs.w	ip, #0
			uint8_t next_force = (ticker_next->force > ticker->force);
   1ccae:	f89a a003 	ldrb.w	sl, [sl, #3]
   1ccb2:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
			if (!lazy_next_periodic_skip &&
   1ccb6:	4282      	cmp	r2, r0
			uint8_t next_force = (ticker_next->force > ticker->force);
   1ccb8:	f894 a003 	ldrb.w	sl, [r4, #3]
			if (!lazy_next_periodic_skip &&
   1ccbc:	d398      	bcc.n	1cbf0 <ticker_worker+0x10e>
   1ccbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1ccc0:	4552      	cmp	r2, sl
   1ccc2:	d811      	bhi.n	1cce8 <ticker_worker+0x206>
			    (next_force ||
   1ccc4:	9a07      	ldr	r2, [sp, #28]
   1ccc6:	f112 0f80 	cmn.w	r2, #128	; 0x80
   1ccca:	d00d      	beq.n	1cce8 <ticker_worker+0x206>
				(lazy_next - ticker_next->priority) >
   1cccc:	1a9b      	subs	r3, r3, r2
			     next_is_critical ||
   1ccce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1ccd0:	4293      	cmp	r3, r2
   1ccd2:	dd02      	ble.n	1ccda <ticker_worker+0x1f8>
			     (next_has_priority && !current_is_older) ||
   1ccd4:	f1be 0f00 	cmp.w	lr, #0
   1ccd8:	d006      	beq.n	1cce8 <ticker_worker+0x206>
   1ccda:	9b05      	ldr	r3, [sp, #20]
   1ccdc:	9a07      	ldr	r2, [sp, #28]
   1ccde:	4293      	cmp	r3, r2
   1cce0:	d186      	bne.n	1cbf0 <ticker_worker+0x10e>
			     (equal_priority && next_is_older))) {
   1cce2:	f1bc 0f00 	cmp.w	ip, #0
   1cce6:	d083      	beq.n	1cbf0 <ticker_worker+0x10e>
			struct ticker_ext *ext_data = ticker->ext_data;
   1cce8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		int32_t lazy_current = ticker->lazy_current;
   1ccea:	8be2      	ldrh	r2, [r4, #30]
			if (ext_data &&
   1ccec:	b14b      	cbz	r3, 1cd02 <ticker_worker+0x220>
   1ccee:	6819      	ldr	r1, [r3, #0]
   1ccf0:	b1f1      	cbz	r1, 1cd30 <ticker_worker+0x24e>
			    ext_data->ticks_slot_window != 0U &&
   1ccf2:	7a19      	ldrb	r1, [r3, #8]
   1ccf4:	b9e1      	cbnz	r1, 1cd30 <ticker_worker+0x24e>
			    TICKER_RESCHEDULE_STATE_NONE &&
   1ccf6:	8ba1      	ldrh	r1, [r4, #28]
   1ccf8:	4291      	cmp	r1, r2
   1ccfa:	d819      	bhi.n	1cd30 <ticker_worker+0x24e>
				ext_data->reschedule_state =
   1ccfc:	f04f 0101 	mov.w	r1, #1
				ext_data->reschedule_state =
   1cd00:	7219      	strb	r1, [r3, #8]
			ticker->lazy_current++;
   1cd02:	3201      	adds	r2, #1
			if ((ticker->must_expire == 0U) ||
   1cd04:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
			ticker->lazy_current++;
   1cd08:	b292      	uxth	r2, r2
   1cd0a:	83e2      	strh	r2, [r4, #30]
			if ((ticker->must_expire == 0U) ||
   1cd0c:	b131      	cbz	r1, 1cd1c <ticker_worker+0x23a>
   1cd0e:	8ba1      	ldrh	r1, [r4, #28]
   1cd10:	4291      	cmp	r1, r2
   1cd12:	d203      	bcs.n	1cd1c <ticker_worker+0x23a>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
   1cd14:	b17b      	cbz	r3, 1cd36 <ticker_worker+0x254>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
   1cd16:	7a1b      	ldrb	r3, [r3, #8]
   1cd18:	2b01      	cmp	r3, #1
   1cd1a:	d10c      	bne.n	1cd36 <ticker_worker+0x254>
				ticker->ack--;
   1cd1c:	9b03      	ldr	r3, [sp, #12]
   1cd1e:	3b01      	subs	r3, #1
   1cd20:	70a3      	strb	r3, [r4, #2]
				continue;
   1cd22:	e700      	b.n	1cb26 <ticker_worker+0x44>
					  0U :
   1cd24:	46f4      	mov	ip, lr
   1cd26:	e7b1      	b.n	1cc8c <ticker_worker+0x1aa>
				(ticker->ticks_periodic == 0U) ||
   1cd28:	f04f 0e01 	mov.w	lr, #1
					(ticker->ticks_periodic != 0U) &&
   1cd2c:	468c      	mov	ip, r1
   1cd2e:	e7be      	b.n	1ccae <ticker_worker+0x1cc>
				ext_data->reschedule_state =
   1cd30:	f04f 0100 	mov.w	r1, #0
   1cd34:	e7e4      	b.n	1cd00 <ticker_worker+0x21e>
			must_expire_skip = 1U;
   1cd36:	f04f 0a01 	mov.w	sl, #1
   1cd3a:	e761      	b.n	1cc00 <ticker_worker+0x11e>
			ticks_drift = 0U;
   1cd3c:	4619      	mov	r1, r3
   1cd3e:	e767      	b.n	1cc10 <ticker_worker+0x12e>
			ticker->timeout_func(ticks_at_expire,
   1cd40:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1cd44:	e778      	b.n	1cc38 <ticker_worker+0x156>

0001cd46 <ticker_start>:
{
   1cd46:	b510      	push	{r4, lr}
   1cd48:	b08a      	sub	sp, #40	; 0x28
	return ticker_start_ext(instance_index, user_id, ticker_id,
   1cd4a:	2400      	movs	r4, #0
   1cd4c:	9409      	str	r4, [sp, #36]	; 0x24
   1cd4e:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1cd50:	9408      	str	r4, [sp, #32]
   1cd52:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   1cd54:	9407      	str	r4, [sp, #28]
   1cd56:	9c12      	ldr	r4, [sp, #72]	; 0x48
   1cd58:	9406      	str	r4, [sp, #24]
   1cd5a:	9c11      	ldr	r4, [sp, #68]	; 0x44
   1cd5c:	9405      	str	r4, [sp, #20]
   1cd5e:	9c10      	ldr	r4, [sp, #64]	; 0x40
   1cd60:	9404      	str	r4, [sp, #16]
   1cd62:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
   1cd66:	9403      	str	r4, [sp, #12]
   1cd68:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   1cd6a:	9402      	str	r4, [sp, #8]
   1cd6c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   1cd6e:	9401      	str	r4, [sp, #4]
   1cd70:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1cd72:	9400      	str	r4, [sp, #0]
   1cd74:	f7f2 f890 	bl	ee98 <ticker_start_ext>
}
   1cd78:	b00a      	add	sp, #40	; 0x28
   1cd7a:	bd10      	pop	{r4, pc}

0001cd7c <ticker_update>:
{
   1cd7c:	b510      	push	{r4, lr}
   1cd7e:	b088      	sub	sp, #32
	return ticker_update_ext(instance_index, user_id, ticker_id,
   1cd80:	2400      	movs	r4, #0
   1cd82:	9407      	str	r4, [sp, #28]
   1cd84:	9c10      	ldr	r4, [sp, #64]	; 0x40
   1cd86:	9406      	str	r4, [sp, #24]
   1cd88:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   1cd8a:	9405      	str	r4, [sp, #20]
   1cd8c:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
   1cd90:	9404      	str	r4, [sp, #16]
   1cd92:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
   1cd96:	9403      	str	r4, [sp, #12]
   1cd98:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1cd9a:	9402      	str	r4, [sp, #8]
   1cd9c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1cd9e:	9401      	str	r4, [sp, #4]
   1cda0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1cda2:	9400      	str	r4, [sp, #0]
   1cda4:	f7f2 f8c6 	bl	ef34 <ticker_update_ext>
}
   1cda8:	b008      	add	sp, #32
   1cdaa:	bd10      	pop	{r4, pc}

0001cdac <ticker_ticks_now_get>:
	return cntr_cnt_get();
   1cdac:	f7f7 bfa4 	b.w	14cf8 <cntr_cnt_get>

0001cdb0 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1cdb0:	1a40      	subs	r0, r0, r1
}
   1cdb2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1cdb6:	4770      	bx	lr

0001cdb8 <ll_addr_read>:

uint8_t *ll_addr_read(uint8_t addr_type, uint8_t *const bdaddr)
{
   1cdb8:	b538      	push	{r3, r4, r5, lr}
	uint8_t *addr;

	addr = ll_addr_get(addr_type);
   1cdba:	f7f2 f961 	bl	f080 <ll_addr_get>
{
   1cdbe:	460d      	mov	r5, r1
	if (addr) {
   1cdc0:	4604      	mov	r4, r0
   1cdc2:	b120      	cbz	r0, 1cdce <ll_addr_read+0x16>
		memcpy(bdaddr, addr, BDADDR_SIZE);
   1cdc4:	4601      	mov	r1, r0
   1cdc6:	2206      	movs	r2, #6
   1cdc8:	4628      	mov	r0, r5
   1cdca:	f7fd fa58 	bl	1a27e <memcpy>
	}

	return addr;
}
   1cdce:	4620      	mov	r0, r4
   1cdd0:	bd38      	pop	{r3, r4, r5, pc}

0001cdd2 <ll_tx_pwr_lvl_get>:

#include "ll.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
   1cdd2:	b538      	push	{r3, r4, r5, lr}
   1cdd4:	4604      	mov	r4, r0
	switch (handle_type) {
   1cdd6:	2c02      	cmp	r4, #2
{
   1cdd8:	4608      	mov	r0, r1
   1cdda:	461d      	mov	r5, r3
	switch (handle_type) {
   1cddc:	d106      	bne.n	1cdec <ll_tx_pwr_lvl_get+0x1a>
#endif /* CONFIG_BT_OBSERVER && CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL*/
#if defined(CONFIG_BT_CONN)
		case (BT_HCI_VS_LL_HANDLE_TYPE_CONN): {
			struct ll_conn *conn;

			conn = ll_connected_get(handle);
   1cdde:	f000 fa12 	bl	1d206 <ll_connected_get>
			if (!conn) {
   1cde2:	b108      	cbz	r0, 1cde8 <ll_tx_pwr_lvl_get+0x16>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
				/* Level desired is maximum available */
				*tx_pwr_lvl = lll_radio_tx_pwr_max_get();
#else  /* !CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
				/* Return default if not multiple TXP */
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   1cde4:	2400      	movs	r4, #0
   1cde6:	702c      	strb	r4, [r5, #0]
			return BT_HCI_ERR_UNKNOWN_CMD;
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
   1cde8:	4620      	mov	r0, r4
   1cdea:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_UNKNOWN_CMD;
   1cdec:	2401      	movs	r4, #1
   1cdee:	e7fb      	b.n	1cde8 <ll_tx_pwr_lvl_get+0x16>

0001cdf0 <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
   1cdf0:	2300      	movs	r3, #0
   1cdf2:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   1cdf4:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
   1cdf6:	4770      	bx	lr

0001cdf8 <meta_evt>:
{
   1cdf8:	b570      	push	{r4, r5, r6, lr}
	return net_buf_simple_add(&buf->b, len);
   1cdfa:	f100 0408 	add.w	r4, r0, #8
   1cdfe:	460e      	mov	r6, r1
   1ce00:	4620      	mov	r0, r4
   1ce02:	2102      	movs	r1, #2
   1ce04:	4615      	mov	r5, r2
   1ce06:	f000 ff00 	bl	1dc0a <net_buf_simple_add>
	hdr->evt = evt;
   1ce0a:	233e      	movs	r3, #62	; 0x3e
   1ce0c:	7003      	strb	r3, [r0, #0]
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   1ce0e:	1c6b      	adds	r3, r5, #1
	hdr->len = len;
   1ce10:	7043      	strb	r3, [r0, #1]
   1ce12:	2101      	movs	r1, #1
   1ce14:	4620      	mov	r0, r4
   1ce16:	f000 fef8 	bl	1dc0a <net_buf_simple_add>
	me->subevent = subevt;
   1ce1a:	7006      	strb	r6, [r0, #0]
   1ce1c:	4629      	mov	r1, r5
   1ce1e:	4620      	mov	r0, r4
}
   1ce20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1ce24:	f000 bef1 	b.w	1dc0a <net_buf_simple_add>

0001ce28 <sys_get_le64>:
{
   1ce28:	4603      	mov	r3, r0
}
   1ce2a:	6800      	ldr	r0, [r0, #0]
   1ce2c:	6859      	ldr	r1, [r3, #4]
   1ce2e:	4770      	bx	lr

0001ce30 <hci_num_cmplt_encode>:
{
   1ce30:	b570      	push	{r4, r5, r6, lr}
   1ce32:	f100 0408 	add.w	r4, r0, #8
   1ce36:	460e      	mov	r6, r1
   1ce38:	4620      	mov	r0, r4
   1ce3a:	2102      	movs	r1, #2
   1ce3c:	4615      	mov	r5, r2
   1ce3e:	f000 fee4 	bl	1dc0a <net_buf_simple_add>
	hdr->evt = evt;
   1ce42:	2313      	movs	r3, #19
	hdr->len = len;
   1ce44:	2105      	movs	r1, #5
	hdr->evt = evt;
   1ce46:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1ce48:	7041      	strb	r1, [r0, #1]
   1ce4a:	4620      	mov	r0, r4
   1ce4c:	f000 fedd 	bl	1dc0a <net_buf_simple_add>
	ep->num_handles = num_handles;
   1ce50:	2301      	movs	r3, #1
   1ce52:	7003      	strb	r3, [r0, #0]
	hc->handle = sys_cpu_to_le16(handle);
   1ce54:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   1ce58:	f8a0 5003 	strh.w	r5, [r0, #3]
}
   1ce5c:	bd70      	pop	{r4, r5, r6, pc}

0001ce5e <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
   1ce5e:	f7f6 ba8b 	b.w	13378 <lll_csrand_get>

0001ce62 <bt_encrypt_be>:
	return 0;
}

int bt_encrypt_be(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   1ce62:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt_be(key, plaintext, enc_data);
   1ce64:	f000 fd30 	bl	1d8c8 <ecb_encrypt_be>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   1ce68:	2000      	movs	r0, #0
   1ce6a:	bd08      	pop	{r3, pc}

0001ce6c <ll_feat_get>:

#else /* !CONFIG_BT_CTLR_SET_HOST_FEATURE */
uint64_t ll_feat_get(void)
{
	return LL_FEAT;
}
   1ce6c:	208e      	movs	r0, #142	; 0x8e
   1ce6e:	2100      	movs	r1, #0
   1ce70:	4770      	bx	lr

0001ce72 <disabled_cb>:
	z_impl_k_sem_give(sem);
   1ce72:	f7fa bdf1 	b.w	17a58 <z_impl_k_sem_give>

0001ce76 <rx_demux_conn_tx_ack>:
{
   1ce76:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1ce78:	4605      	mov	r5, r0
   1ce7a:	4614      	mov	r4, r2
   1ce7c:	9300      	str	r3, [sp, #0]
   1ce7e:	f8ad 1006 	strh.w	r1, [sp, #6]
		ull_conn_ack_dequeue();
   1ce82:	f7f5 fdff 	bl	12a84 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   1ce86:	4621      	mov	r1, r4
   1ce88:	9a00      	ldr	r2, [sp, #0]
   1ce8a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   1ce8e:	f7f5 fe3d 	bl	12b0c <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   1ce92:	4620      	mov	r0, r4
   1ce94:	f7f5 fdbc 	bl	12a10 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   1ce98:	466a      	mov	r2, sp
   1ce9a:	f10d 0106 	add.w	r1, sp, #6
   1ce9e:	4628      	mov	r0, r5
   1cea0:	f7f5 fdda 	bl	12a58 <ull_conn_ack_by_last_peek>
	} while (link);
   1cea4:	4604      	mov	r4, r0
   1cea6:	2800      	cmp	r0, #0
   1cea8:	d1eb      	bne.n	1ce82 <rx_demux_conn_tx_ack+0xc>
			ll_rx_sched();
   1ceaa:	f7f3 fd89 	bl	109c0 <ll_rx_sched>
}
   1ceae:	b003      	add	sp, #12
   1ceb0:	bd30      	pop	{r4, r5, pc}

0001ceb2 <ll_timeslice_ticker_id_get>:
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   1ceb2:	2300      	movs	r3, #0
   1ceb4:	7003      	strb	r3, [r0, #0]
	*ticker_id = (TICKER_NODES - FLASH_TICKER_NODES);
   1ceb6:	2306      	movs	r3, #6
   1ceb8:	700b      	strb	r3, [r1, #0]
}
   1ceba:	4770      	bx	lr

0001cebc <lll_prepare>:
{
   1cebc:	b507      	push	{r0, r1, r2, lr}
	return lll_prepare_resolve(is_abort_cb, abort_cb, prepare_cb,
   1cebe:	2300      	movs	r3, #0
   1cec0:	e9cd 3300 	strd	r3, r3, [sp]
   1cec4:	9b04      	ldr	r3, [sp, #16]
   1cec6:	f7f6 fb8f 	bl	135e8 <lll_prepare_resolve>
}
   1ceca:	b003      	add	sp, #12
   1cecc:	f85d fb04 	ldr.w	pc, [sp], #4

0001ced0 <adv_time_get.constprop.0.isra.0>:
static uint16_t adv_time_get(struct pdu_adv *pdu, struct pdu_adv *pdu_scan,
   1ced0:	b530      	push	{r4, r5, lr}
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   1ced2:	7804      	ldrb	r4, [r0, #0]
   1ced4:	f004 040f 	and.w	r4, r4, #15
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
   1ced8:	1e53      	subs	r3, r2, #1
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   1ceda:	2c02      	cmp	r4, #2
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
   1cedc:	b29d      	uxth	r5, r3
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   1cede:	d10d      	bne.n	1cefc <adv_time_get.constprop.0.isra.0+0x2c>
			adv_size += pdu->len;
   1cee0:	7841      	ldrb	r1, [r0, #1]
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
   1cee2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   1cee6:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   1ceea:	3110      	adds	r1, #16
   1ceec:	0058      	lsls	r0, r3, #1
   1ceee:	00c9      	lsls	r1, r1, #3
   1cef0:	f500 70c8 	add.w	r0, r0, #400	; 0x190
   1cef4:	fb01 0002 	mla	r0, r1, r2, r0
			time_us += (BYTES2US(adv_size, PHY_1M) +
   1cef8:	b280      	uxth	r0, r0
}
   1cefa:	bd30      	pop	{r4, r5, pc}
			if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1cefc:	2c01      	cmp	r4, #1
   1cefe:	d016      	beq.n	1cf2e <adv_time_get.constprop.0.isra.0+0x5e>
			BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
   1cf00:	3110      	adds	r1, #16
		const uint16_t scan_rsp_us =
   1cf02:	00c9      	lsls	r1, r1, #3
			} else if (pdu->type == PDU_ADV_TYPE_ADV_IND) {
   1cf04:	b96c      	cbnz	r4, 1cf22 <adv_time_get.constprop.0.isra.0+0x52>
				adv_size += pdu->len;
   1cf06:	7840      	ldrb	r0, [r0, #1]
				time_us += scan_req_us + EVENT_IFS_MAX_US +
   1cf08:	f501 7136 	add.w	r1, r1, #728	; 0x2d8
				adv_size += pdu->len;
   1cf0c:	3010      	adds	r0, #16
				   BYTES2US(adv_size, PHY_1M) + EVENT_IFS_MAX_US;
   1cf0e:	00c3      	lsls	r3, r0, #3
				    EVENT_IFS_MAX_US + rx_to_us +
   1cf10:	f503 73b3 	add.w	r3, r3, #358	; 0x166
   1cf14:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
   1cf18:	3098      	adds	r0, #152	; 0x98
				    rxtx_turn_us) * (adv_chn_cnt - 1) +
   1cf1a:	fb13 f305 	smulbb	r3, r3, r5
			time_us += (BYTES2US(adv_size, PHY_1M) +
   1cf1e:	4418      	add	r0, r3
   1cf20:	e7ea      	b.n	1cef8 <adv_time_get.constprop.0.isra.0+0x28>
			} else if (pdu->type == PDU_ADV_TYPE_SCAN_IND) {
   1cf22:	2c06      	cmp	r4, #6
   1cf24:	d0ef      	beq.n	1cf06 <adv_time_get.constprop.0.isra.0+0x36>
		uint16_t adv_size =
   1cf26:	2010      	movs	r0, #16
	uint16_t time_us = EVENT_OVERHEAD_START_US + EVENT_OVERHEAD_END_US;
   1cf28:	f44f 71c8 	mov.w	r1, #400	; 0x190
   1cf2c:	e7ef      	b.n	1cf0e <adv_time_get.constprop.0.isra.0+0x3e>
				adv_size += TARGETA_SIZE;
   1cf2e:	2016      	movs	r0, #22
				time_us += conn_ind_us;
   1cf30:	f44f 713c 	mov.w	r1, #752	; 0x2f0
   1cf34:	e7eb      	b.n	1cf0e <adv_time_get.constprop.0.isra.0+0x3e>

0001cf36 <ull_adv_init>:
	err = init_reset();
   1cf36:	f7f4 b9a1 	b.w	1127c <init_reset>

0001cf3a <ull_adv_reset>:
{
   1cf3a:	b508      	push	{r3, lr}
		(void)disable(handle);
   1cf3c:	f7f4 fb3c 	bl	115b8 <disable.constprop.0>
}
   1cf40:	2000      	movs	r0, #0
   1cf42:	bd08      	pop	{r3, pc}

0001cf44 <ull_adv_is_enabled>:
{
   1cf44:	b508      	push	{r3, lr}
	adv = ull_adv_is_enabled_get(handle);
   1cf46:	f7f4 fb29 	bl	1159c <ull_adv_is_enabled_get>
}
   1cf4a:	3800      	subs	r0, #0
   1cf4c:	bf18      	it	ne
   1cf4e:	2001      	movne	r0, #1
   1cf50:	bd08      	pop	{r3, pc}

0001cf52 <ull_adv_filter_pol_get>:
{
   1cf52:	b508      	push	{r3, lr}
	adv = ull_adv_is_enabled_get(handle);
   1cf54:	f7f4 fb22 	bl	1159c <ull_adv_is_enabled_get>
	if (!adv) {
   1cf58:	b118      	cbz	r0, 1cf62 <ull_adv_filter_pol_get+0x10>
	return adv->lll.filter_policy;
   1cf5a:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
   1cf5e:	f000 0003 	and.w	r0, r0, #3
}
   1cf62:	bd08      	pop	{r3, pc}

0001cf64 <ull_adv_pdu_update_addrs>:
{
   1cf64:	b510      	push	{r4, lr}
			own_id_addr = ll_addr_get(pdu->tx_addr);
   1cf66:	460c      	mov	r4, r1
   1cf68:	f814 0b02 	ldrb.w	r0, [r4], #2
   1cf6c:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1cf70:	f7f2 f886 	bl	f080 <ll_addr_get>
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
   1cf74:	2206      	movs	r2, #6
			own_id_addr = ll_addr_get(pdu->tx_addr);
   1cf76:	4601      	mov	r1, r0
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
   1cf78:	4620      	mov	r0, r4
   1cf7a:	f7fd f980 	bl	1a27e <memcpy>
}
   1cf7e:	4620      	mov	r0, r4
   1cf80:	bd10      	pop	{r4, pc}

0001cf82 <ull_adv_data_set>:
	if (len > PDU_AC_DATA_SIZE_MAX) {
   1cf82:	291f      	cmp	r1, #31
{
   1cf84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1cf88:	4604      	mov	r4, r0
   1cf8a:	460d      	mov	r5, r1
   1cf8c:	4690      	mov	r8, r2
	if (len > PDU_AC_DATA_SIZE_MAX) {
   1cf8e:	d849      	bhi.n	1d024 <ull_adv_data_set+0xa2>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1cf90:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   1cf94:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1cf98:	6adf      	ldr	r7, [r3, #44]	; 0x2c
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   1cf9a:	783b      	ldrb	r3, [r7, #0]
   1cf9c:	f003 030f 	and.w	r3, r3, #15
   1cfa0:	2b01      	cmp	r3, #1
   1cfa2:	d10a      	bne.n	1cfba <ull_adv_data_set+0x38>
		adv->ad_data_backup.len = len;
   1cfa4:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
		memcpy(adv->ad_data_backup.data, data, adv->ad_data_backup.len);
   1cfa8:	460a      	mov	r2, r1
   1cfaa:	3041      	adds	r0, #65	; 0x41
   1cfac:	4641      	mov	r1, r8
   1cfae:	f7fd f966 	bl	1a27e <memcpy>
	return 0;
   1cfb2:	2000      	movs	r0, #0
}
   1cfb4:	b002      	add	sp, #8
   1cfb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   1cfba:	f10d 0107 	add.w	r1, sp, #7
   1cfbe:	3028      	adds	r0, #40	; 0x28
   1cfc0:	f000 fabc 	bl	1d53c <lll_adv_pdu_alloc>
	pdu->tx_addr = prev->tx_addr;
   1cfc4:	4639      	mov	r1, r7
   1cfc6:	4606      	mov	r6, r0
   1cfc8:	f811 2b02 	ldrb.w	r2, [r1], #2
   1cfcc:	f3c2 1080 	ubfx	r0, r2, #6, #1
	pdu->type = prev->type;
   1cfd0:	f3c2 0303 	ubfx	r3, r2, #0, #4
   1cfd4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
   1cfd8:	f002 0280 	and.w	r2, r2, #128	; 0x80
   1cfdc:	4630      	mov	r0, r6
   1cfde:	4313      	orrs	r3, r2
   1cfe0:	f800 3b02 	strb.w	r3, [r0], #2
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   1cfe4:	2206      	movs	r2, #6
   1cfe6:	f7fd f94a 	bl	1a27e <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
   1cfea:	462a      	mov	r2, r5
   1cfec:	4641      	mov	r1, r8
   1cfee:	f106 0008 	add.w	r0, r6, #8
	pdu->len = BDADDR_SIZE + len;
   1cff2:	3506      	adds	r5, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
   1cff4:	f7fd f943 	bl	1a27e <memcpy>
	pdu->len = BDADDR_SIZE + len;
   1cff8:	7075      	strb	r5, [r6, #1]
	if (adv->is_enabled) {
   1cffa:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   1cffe:	07db      	lsls	r3, r3, #31
   1d000:	d404      	bmi.n	1d00c <ull_adv_data_set+0x8a>
	pdu->last = idx;
   1d002:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1d006:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
   1d00a:	e7d2      	b.n	1cfb2 <ull_adv_data_set+0x30>
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   1d00c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   1d010:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		err = ull_adv_time_update(adv, pdu, pdu_scan);
   1d014:	4631      	mov	r1, r6
   1d016:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1d018:	4620      	mov	r0, r4
   1d01a:	f7e3 fc1d 	bl	858 <ull_adv_time_update>
		if (err) {
   1d01e:	2800      	cmp	r0, #0
   1d020:	d0ef      	beq.n	1d002 <ull_adv_data_set+0x80>
   1d022:	e7c7      	b.n	1cfb4 <ull_adv_data_set+0x32>
		return BT_HCI_ERR_INVALID_PARAM;
   1d024:	2012      	movs	r0, #18
   1d026:	e7c5      	b.n	1cfb4 <ull_adv_data_set+0x32>

0001d028 <ull_scan_rsp_set>:
	if (len > PDU_AC_DATA_SIZE_MAX) {
   1d028:	291f      	cmp	r1, #31
{
   1d02a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1d02e:	4604      	mov	r4, r0
   1d030:	460e      	mov	r6, r1
   1d032:	4617      	mov	r7, r2
	if (len > PDU_AC_DATA_SIZE_MAX) {
   1d034:	d83e      	bhi.n	1d0b4 <ull_scan_rsp_set+0x8c>
   1d036:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   1d03a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   1d03e:	f10d 0107 	add.w	r1, sp, #7
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   1d042:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   1d046:	3034      	adds	r0, #52	; 0x34
   1d048:	f000 fa78 	bl	1d53c <lll_adv_pdu_alloc>
	pdu->tx_addr = prev->tx_addr;
   1d04c:	4641      	mov	r1, r8
   1d04e:	4605      	mov	r5, r0
   1d050:	f811 3b02 	ldrb.w	r3, [r1], #2
   1d054:	f3c3 1380 	ubfx	r3, r3, #6, #1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1d058:	019b      	lsls	r3, r3, #6
   1d05a:	f043 0304 	orr.w	r3, r3, #4
   1d05e:	7003      	strb	r3, [r0, #0]
	pdu->len = BDADDR_SIZE + len;
   1d060:	1db3      	adds	r3, r6, #6
   1d062:	7043      	strb	r3, [r0, #1]
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   1d064:	2206      	movs	r2, #6
   1d066:	3002      	adds	r0, #2
   1d068:	f7fd f909 	bl	1a27e <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   1d06c:	4632      	mov	r2, r6
   1d06e:	4639      	mov	r1, r7
   1d070:	f105 0008 	add.w	r0, r5, #8
   1d074:	f7fd f903 	bl	1a27e <memcpy>
	if (adv->is_enabled) {
   1d078:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   1d07c:	07db      	lsls	r3, r3, #31
   1d07e:	d407      	bmi.n	1d090 <ull_scan_rsp_set+0x68>
	pdu->last = idx;
   1d080:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1d084:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	return 0;
   1d088:	2000      	movs	r0, #0
}
   1d08a:	b002      	add	sp, #8
   1d08c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1d090:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1d094:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   1d098:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
		if ((pdu_adv_scan->type == PDU_ADV_TYPE_ADV_IND) ||
   1d09a:	780b      	ldrb	r3, [r1, #0]
   1d09c:	f013 030f 	ands.w	r3, r3, #15
   1d0a0:	d001      	beq.n	1d0a6 <ull_scan_rsp_set+0x7e>
   1d0a2:	2b06      	cmp	r3, #6
   1d0a4:	d1ec      	bne.n	1d080 <ull_scan_rsp_set+0x58>
			err = ull_adv_time_update(adv, pdu_adv_scan, pdu);
   1d0a6:	462a      	mov	r2, r5
   1d0a8:	4620      	mov	r0, r4
   1d0aa:	f7e3 fbd5 	bl	858 <ull_adv_time_update>
			if (err) {
   1d0ae:	2800      	cmp	r0, #0
   1d0b0:	d0e6      	beq.n	1d080 <ull_scan_rsp_set+0x58>
   1d0b2:	e7ea      	b.n	1d08a <ull_scan_rsp_set+0x62>
		return BT_HCI_ERR_INVALID_PARAM;
   1d0b4:	2012      	movs	r0, #18
   1d0b6:	e7e8      	b.n	1d08a <ull_scan_rsp_set+0x62>

0001d0b8 <ull_scan_init>:
}
   1d0b8:	2000      	movs	r0, #0
   1d0ba:	4770      	bx	lr

0001d0bc <disable.constprop.0>:
	ll_rx_put(rx_hdr->link, rx_hdr);
	ll_rx_sched();
}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

static uint8_t disable(uint8_t handle)
   1d0bc:	b510      	push	{r4, lr}
{
	struct ll_scan_set *scan;
	uint8_t ret;

	scan = ull_scan_is_enabled_get(handle);
   1d0be:	2000      	movs	r0, #0
   1d0c0:	f7f4 fb98 	bl	117f4 <ull_scan_is_enabled_get>
	if (!scan) {
   1d0c4:	4604      	mov	r4, r0
   1d0c6:	b158      	cbz	r0, 1d0e0 <disable.constprop.0+0x24>
	if (scan->lll.conn) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}
#endif

	ret = ull_scan_disable(handle, scan);
   1d0c8:	4601      	mov	r1, r0
   1d0ca:	2000      	movs	r0, #0
   1d0cc:	f7f4 fb68 	bl	117a0 <ull_scan_disable>
	if (ret) {
   1d0d0:	b928      	cbnz	r0, 1d0de <disable.constprop.0+0x22>
		return ret;
	}

	scan->is_enabled = 0U;
   1d0d2:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   1d0d6:	f360 0300 	bfi	r3, r0, #0, #1
   1d0da:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		ull_filter_adv_scan_state_cb(0);
	}
#endif

	return 0;
}
   1d0de:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1d0e0:	200c      	movs	r0, #12
   1d0e2:	e7fc      	b.n	1d0de <disable.constprop.0+0x22>

0001d0e4 <ull_scan_reset>:
{
   1d0e4:	b508      	push	{r3, lr}
		(void)disable(handle);
   1d0e6:	f7ff ffe9 	bl	1d0bc <disable.constprop.0>
}
   1d0ea:	2000      	movs	r0, #0
   1d0ec:	bd08      	pop	{r3, pc}

0001d0ee <ll_scan_enable>:
{
   1d0ee:	b510      	push	{r4, lr}
	if (!enable) {
   1d0f0:	b918      	cbnz	r0, 1d0fa <ll_scan_enable+0xc>
}
   1d0f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = disable(SCAN_HANDLE_1M);
   1d0f6:	f7ff bfe1 	b.w	1d0bc <disable.constprop.0>
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
   1d0fa:	2000      	movs	r0, #0
   1d0fc:	f7f4 fb88 	bl	11810 <ull_scan_is_disabled_get>
	if (!scan) {
   1d100:	4604      	mov	r4, r0
   1d102:	b190      	cbz	r0, 1d12a <ll_scan_enable+0x3c>
	    (!is_coded_phy && (scan->own_addr_type & 0x1))) {
   1d104:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
   1d108:	079b      	lsls	r3, r3, #30
   1d10a:	d404      	bmi.n	1d116 <ll_scan_enable+0x28>
		err = ull_scan_enable(scan);
   1d10c:	4620      	mov	r0, r4
}
   1d10e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = ull_scan_enable(scan);
   1d112:	f7e3 bbf9 	b.w	908 <ull_scan_enable>
		if (!mem_nz(ll_addr_get(BT_ADDR_LE_RANDOM), BDADDR_SIZE)) {
   1d116:	2001      	movs	r0, #1
   1d118:	f7f1 ffb2 	bl	f080 <ll_addr_get>
   1d11c:	2106      	movs	r1, #6
   1d11e:	f7ff fb64 	bl	1c7ea <mem_nz>
   1d122:	2800      	cmp	r0, #0
   1d124:	d1f2      	bne.n	1d10c <ll_scan_enable+0x1e>
			return BT_HCI_ERR_INVALID_PARAM;
   1d126:	2012      	movs	r0, #18
}
   1d128:	bd10      	pop	{r4, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   1d12a:	200c      	movs	r0, #12
   1d12c:	e7fc      	b.n	1d128 <ll_scan_enable+0x3a>

0001d12e <ull_scan_is_enabled>:
{
   1d12e:	b508      	push	{r3, lr}
	scan = ull_scan_is_enabled_get(handle);
   1d130:	f7f4 fb60 	bl	117f4 <ull_scan_is_enabled_get>
	if (!scan) {
   1d134:	b148      	cbz	r0, 1d14a <ull_scan_is_enabled+0x1c>
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
   1d136:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
   1d13a:	f890 0020 	ldrb.w	r0, [r0, #32]
   1d13e:	f003 0301 	and.w	r3, r3, #1
   1d142:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1d146:	fa03 f000 	lsl.w	r0, r3, r0
}
   1d14a:	bd08      	pop	{r3, pc}

0001d14c <ull_scan_filter_pol_get>:
{
   1d14c:	b508      	push	{r3, lr}
	scan = ull_scan_is_enabled_get(handle);
   1d14e:	f7f4 fb51 	bl	117f4 <ull_scan_is_enabled_get>
	if (!scan) {
   1d152:	b118      	cbz	r0, 1d15c <ull_scan_filter_pol_get+0x10>
	return scan->lll.filter_policy;
   1d154:	f890 0020 	ldrb.w	r0, [r0, #32]
   1d158:	f3c0 00c1 	ubfx	r0, r0, #3, #2
}
   1d15c:	bd08      	pop	{r3, pc}

0001d15e <sys_put_le64>:
	dst[1] = val >> 8;
   1d15e:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   1d162:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   1d164:	7053      	strb	r3, [r2, #1]
	sys_put_le16(val >> 16, &dst[2]);
   1d166:	0c00      	lsrs	r0, r0, #16
	dst[1] = val >> 8;
   1d168:	f3c1 2307 	ubfx	r3, r1, #8, #8
	dst[0] = val;
   1d16c:	7111      	strb	r1, [r2, #4]
	sys_put_le16(val >> 16, &dst[2]);
   1d16e:	0c09      	lsrs	r1, r1, #16
	dst[0] = val;
   1d170:	7090      	strb	r0, [r2, #2]
   1d172:	7191      	strb	r1, [r2, #6]
	dst[1] = val >> 8;
   1d174:	0a00      	lsrs	r0, r0, #8
   1d176:	0a09      	lsrs	r1, r1, #8
   1d178:	70d0      	strb	r0, [r2, #3]
   1d17a:	7153      	strb	r3, [r2, #5]
   1d17c:	71d1      	strb	r1, [r2, #7]
}
   1d17e:	4770      	bx	lr

0001d180 <ctrl_tx_enqueue>:
		if (!conn->tx_ctrl) {
   1d180:	e9d0 3247 	ldrd	r3, r2, [r0, #284]	; 0x11c
{
   1d184:	b510      	push	{r4, lr}
	if (
   1d186:	b18b      	cbz	r3, 1d1ac <ctrl_tx_enqueue+0x2c>
		if (conn->tx_head == conn->tx_data) {
   1d188:	f8d0 4128 	ldr.w	r4, [r0, #296]	; 0x128
   1d18c:	42a3      	cmp	r3, r4
			conn->tx_data = conn->tx_data->next;
   1d18e:	bf04      	itt	eq
   1d190:	681c      	ldreq	r4, [r3, #0]
   1d192:	f8c0 4128 	streq.w	r4, [r0, #296]	; 0x128
		if (!conn->tx_ctrl) {
   1d196:	b992      	cbnz	r2, 1d1be <ctrl_tx_enqueue+0x3e>
			tx->next = conn->tx_head->next;
   1d198:	681a      	ldr	r2, [r3, #0]
   1d19a:	600a      	str	r2, [r1, #0]
			conn->tx_head->next = tx;
   1d19c:	6019      	str	r1, [r3, #0]
				conn->tx_ctrl = tx;
   1d19e:	f8c0 1120 	str.w	r1, [r0, #288]	; 0x120
	if (!tx->next) {
   1d1a2:	680b      	ldr	r3, [r1, #0]
	conn->tx_ctrl_last = tx;
   1d1a4:	f8c0 1124 	str.w	r1, [r0, #292]	; 0x124
	if (!tx->next) {
   1d1a8:	b133      	cbz	r3, 1d1b8 <ctrl_tx_enqueue+0x38>
}
   1d1aa:	bd10      	pop	{r4, pc}
		if (!conn->tx_ctrl) {
   1d1ac:	b93a      	cbnz	r2, 1d1be <ctrl_tx_enqueue+0x3e>
			tx->next = conn->tx_head;
   1d1ae:	600a      	str	r2, [r1, #0]
				conn->tx_ctrl = tx;
   1d1b0:	e9c0 1147 	strd	r1, r1, [r0, #284]	; 0x11c
				conn->tx_ctrl_last = tx;
   1d1b4:	f8c0 1124 	str.w	r1, [r0, #292]	; 0x124
		conn->tx_data_last = tx;
   1d1b8:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
}
   1d1bc:	e7f5      	b.n	1d1aa <ctrl_tx_enqueue+0x2a>
	tx->next = conn->tx_ctrl_last->next;
   1d1be:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
   1d1c2:	681a      	ldr	r2, [r3, #0]
   1d1c4:	600a      	str	r2, [r1, #0]
	conn->tx_ctrl_last->next = tx;
   1d1c6:	6019      	str	r1, [r3, #0]
   1d1c8:	e7eb      	b.n	1d1a2 <ctrl_tx_enqueue+0x22>

0001d1ca <reject_ext_ind_send.constprop.0>:
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   1d1ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1d1cc:	4616      	mov	r6, r2
	tx = ctrl_tx_rsp_mem_acquire(conn, rx, &err);
   1d1ce:	aa01      	add	r2, sp, #4
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   1d1d0:	460c      	mov	r4, r1
   1d1d2:	4605      	mov	r5, r0
	tx = ctrl_tx_rsp_mem_acquire(conn, rx, &err);
   1d1d4:	f7f4 fb30 	bl	11838 <ctrl_tx_rsp_mem_acquire>
	if (!tx) {
   1d1d8:	4601      	mov	r1, r0
   1d1da:	b910      	cbnz	r0, 1d1e2 <reject_ext_ind_send.constprop.0+0x18>
		return err;
   1d1dc:	9801      	ldr	r0, [sp, #4]
}
   1d1de:	b002      	add	sp, #8
   1d1e0:	bd70      	pop	{r4, r5, r6, pc}
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1d1e2:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   1d1e4:	7246      	strb	r6, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1d1e6:	f043 0303 	orr.w	r3, r3, #3
   1d1ea:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   1d1ec:	2303      	movs	r3, #3
   1d1ee:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   1d1f0:	2311      	movs	r3, #17
   1d1f2:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   1d1f4:	230f      	movs	r3, #15
   1d1f6:	7203      	strb	r3, [r0, #8]
	ctrl_tx_enqueue(conn, tx);
   1d1f8:	4628      	mov	r0, r5
   1d1fa:	f7ff ffc1 	bl	1d180 <ctrl_tx_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1d1fe:	2301      	movs	r3, #1
   1d200:	7123      	strb	r3, [r4, #4]
	return 0;
   1d202:	2000      	movs	r0, #0
   1d204:	e7eb      	b.n	1d1de <reject_ext_ind_send.constprop.0+0x14>

0001d206 <ll_connected_get>:
{
   1d206:	b508      	push	{r3, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   1d208:	b918      	cbnz	r0, 1d212 <ll_connected_get+0xc>
	conn = ll_conn_get(handle);
   1d20a:	f7f4 fd0d 	bl	11c28 <ll_conn_get>
	if (conn->lll.handle != handle) {
   1d20e:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   1d210:	b103      	cbz	r3, 1d214 <ll_connected_get+0xe>
		return NULL;
   1d212:	2000      	movs	r0, #0
}
   1d214:	bd08      	pop	{r3, pc}

0001d216 <ll_conn_update>:
{
   1d216:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d21a:	4605      	mov	r5, r0
   1d21c:	f8bd a020 	ldrh.w	sl, [sp, #32]
   1d220:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
   1d224:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
   1d228:	460c      	mov	r4, r1
   1d22a:	4617      	mov	r7, r2
   1d22c:	461e      	mov	r6, r3
	conn = ll_connected_get(handle);
   1d22e:	f7ff ffea 	bl	1d206 <ll_connected_get>
	if (!conn) {
   1d232:	2800      	cmp	r0, #0
   1d234:	d06e      	beq.n	1d314 <ll_conn_update+0xfe>
	if (!cmd) {
   1d236:	bb84      	cbnz	r4, 1d29a <ll_conn_update+0x84>
		if (!conn->llcp_conn_param.disabled &&
   1d238:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   1d23c:	069a      	lsls	r2, r3, #26
   1d23e:	d408      	bmi.n	1d252 <ll_conn_update+0x3c>
		    (!conn->common.fex_valid ||
   1d240:	f890 107c 	ldrb.w	r1, [r0, #124]	; 0x7c
		if (!conn->llcp_conn_param.disabled &&
   1d244:	f011 0101 	ands.w	r1, r1, #1
   1d248:	d045      	beq.n	1d2d6 <ll_conn_update+0xc0>
		     (conn->llcp_feature.features_conn &
   1d24a:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
		    (!conn->common.fex_valid ||
   1d24e:	079b      	lsls	r3, r3, #30
   1d250:	d424      	bmi.n	1d29c <ll_conn_update+0x86>
		} else if (conn->lll.role) {
   1d252:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   1d256:	2b00      	cmp	r3, #0
   1d258:	db5e      	blt.n	1d318 <ll_conn_update+0x102>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   1d25a:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
   1d25e:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
   1d262:	429a      	cmp	r2, r3
   1d264:	d15a      	bne.n	1d31c <ll_conn_update+0x106>
		conn->llcp_cu.win_size = 1U;
   1d266:	2301      	movs	r3, #1
   1d268:	f880 30ac 	strb.w	r3, [r0, #172]	; 0xac
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1d26c:	f890 309e 	ldrb.w	r3, [r0, #158]	; 0x9e
		conn->llcp_cu.interval = interval_max;
   1d270:	f8a0 a0a0 	strh.w	sl, [r0, #160]	; 0xa0
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1d274:	f023 030f 	bic.w	r3, r3, #15
		conn->llcp_cu.win_offset_us = 0U;
   1d278:	2400      	movs	r4, #0
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1d27a:	f043 0309 	orr.w	r3, r3, #9
		conn->llcp_cu.req++;
   1d27e:	3201      	adds	r2, #1
		conn->llcp_cu.win_offset_us = 0U;
   1d280:	f8c0 40a8 	str.w	r4, [r0, #168]	; 0xa8
		conn->llcp_cu.latency = latency;
   1d284:	f8a0 90a2 	strh.w	r9, [r0, #162]	; 0xa2
		conn->llcp_cu.timeout = timeout;
   1d288:	f8a0 80a4 	strh.w	r8, [r0, #164]	; 0xa4
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1d28c:	f880 309e 	strb.w	r3, [r0, #158]	; 0x9e
		conn->llcp_cu.req++;
   1d290:	f880 209c 	strb.w	r2, [r0, #156]	; 0x9c
}
   1d294:	4620      	mov	r0, r4
   1d296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d29a:	4621      	mov	r1, r4
		cmd--;
   1d29c:	1e4c      	subs	r4, r1, #1
		if (cmd) {
   1d29e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
			if ((conn->llcp_conn_param.req ==
   1d2a2:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
			     conn->llcp_conn_param.ack) ||
   1d2a6:	f890 20f5 	ldrb.w	r2, [r0, #245]	; 0xf5
		if (cmd) {
   1d2aa:	d016      	beq.n	1d2da <ll_conn_update+0xc4>
			if ((conn->llcp_conn_param.req ==
   1d2ac:	4293      	cmp	r3, r2
   1d2ae:	d035      	beq.n	1d31c <ll_conn_update+0x106>
			    (conn->llcp_conn_param.state !=
   1d2b0:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
			     conn->llcp_conn_param.ack) ||
   1d2b4:	f003 020f 	and.w	r2, r3, #15
   1d2b8:	2a03      	cmp	r2, #3
   1d2ba:	d12f      	bne.n	1d31c <ll_conn_update+0x106>
			conn->llcp_conn_param.state = cmd;
   1d2bc:	f004 040f 	and.w	r4, r4, #15
   1d2c0:	f044 0410 	orr.w	r4, r4, #16
   1d2c4:	f023 031f 	bic.w	r3, r3, #31
   1d2c8:	431c      	orrs	r4, r3
   1d2ca:	f880 40f6 	strb.w	r4, [r0, #246]	; 0xf6
			conn->llcp_conn_param.status = status;
   1d2ce:	f880 70f7 	strb.w	r7, [r0, #247]	; 0xf7
	return 0;
   1d2d2:	2400      	movs	r4, #0
   1d2d4:	e7de      	b.n	1d294 <ll_conn_update+0x7e>
			cmd++;
   1d2d6:	2101      	movs	r1, #1
   1d2d8:	e7e0      	b.n	1d29c <ll_conn_update+0x86>
			if (conn->llcp_conn_param.req !=
   1d2da:	4293      	cmp	r3, r2
   1d2dc:	d11e      	bne.n	1d31c <ll_conn_update+0x106>
			conn->llcp_conn_param.state = cmd;
   1d2de:	f8b0 20f6 	ldrh.w	r2, [r0, #246]	; 0xf6
			conn->llcp_conn_param.interval_min = interval_min;
   1d2e2:	f8a0 60f8 	strh.w	r6, [r0, #248]	; 0xf8
			conn->llcp_conn_param.req++;
   1d2e6:	3301      	adds	r3, #1
   1d2e8:	f880 30f4 	strb.w	r3, [r0, #244]	; 0xf4
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1d2ec:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
			conn->llcp_conn_param.interval_max = interval_max;
   1d2f0:	f8a0 a0fa 	strh.w	sl, [r0, #250]	; 0xfa
			conn->llcp_conn_param.state = cmd;
   1d2f4:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
   1d2f8:	f042 0210 	orr.w	r2, r2, #16
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1d2fc:	2b00      	cmp	r3, #0
			conn->llcp_conn_param.latency = latency;
   1d2fe:	f8a0 90fc 	strh.w	r9, [r0, #252]	; 0xfc
			conn->llcp_conn_param.timeout = timeout;
   1d302:	f8a0 80fe 	strh.w	r8, [r0, #254]	; 0xfe
			conn->llcp_conn_param.state = cmd;
   1d306:	f8a0 20f6 	strh.w	r2, [r0, #246]	; 0xf6
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1d30a:	dac3      	bge.n	1d294 <ll_conn_update+0x7e>
				ull_periph_latency_cancel(conn, handle);
   1d30c:	4629      	mov	r1, r5
   1d30e:	f7f5 fd13 	bl	12d38 <ull_periph_latency_cancel>
   1d312:	e7bf      	b.n	1d294 <ll_conn_update+0x7e>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1d314:	2402      	movs	r4, #2
   1d316:	e7bd      	b.n	1d294 <ll_conn_update+0x7e>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   1d318:	241a      	movs	r4, #26
   1d31a:	e7bb      	b.n	1d294 <ll_conn_update+0x7e>
			return BT_HCI_ERR_CMD_DISALLOWED;
   1d31c:	240c      	movs	r4, #12
   1d31e:	e7b9      	b.n	1d294 <ll_conn_update+0x7e>

0001d320 <ll_chm_get>:
{
   1d320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d322:	460d      	mov	r5, r1
	conn = ll_connected_get(handle);
   1d324:	f7ff ff6f 	bl	1d206 <ll_connected_get>
	if (!conn) {
   1d328:	4604      	mov	r4, r0
   1d32a:	b170      	cbz	r0, 1d34a <ll_chm_get+0x2a>
		conn->chm_updated = 0U;
   1d32c:	2700      	movs	r7, #0
		memcpy(chm, conn->lll.data_chan_map,
   1d32e:	f100 0634 	add.w	r6, r0, #52	; 0x34
		conn->chm_updated = 0U;
   1d332:	f884 7130 	strb.w	r7, [r4, #304]	; 0x130
		memcpy(chm, conn->lll.data_chan_map,
   1d336:	2205      	movs	r2, #5
   1d338:	4631      	mov	r1, r6
   1d33a:	4628      	mov	r0, r5
   1d33c:	f7fc ff9f 	bl	1a27e <memcpy>
	} while (conn->chm_updated);
   1d340:	f894 0130 	ldrb.w	r0, [r4, #304]	; 0x130
   1d344:	2800      	cmp	r0, #0
   1d346:	d1f4      	bne.n	1d332 <ll_chm_get+0x12>
}
   1d348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1d34a:	2002      	movs	r0, #2
   1d34c:	e7fc      	b.n	1d348 <ll_chm_get+0x28>

0001d34e <ll_feature_req_send>:
{
   1d34e:	b510      	push	{r4, lr}
   1d350:	4604      	mov	r4, r0
	conn = ll_connected_get(handle);
   1d352:	f7ff ff58 	bl	1d206 <ll_connected_get>
	if (!conn) {
   1d356:	b188      	cbz	r0, 1d37c <ll_feature_req_send+0x2e>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   1d358:	f890 10b0 	ldrb.w	r1, [r0, #176]	; 0xb0
   1d35c:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
   1d360:	428a      	cmp	r2, r1
   1d362:	d10d      	bne.n	1d380 <ll_feature_req_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1d364:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	conn->llcp_feature.req++;
   1d368:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1d36a:	2b00      	cmp	r3, #0
	conn->llcp_feature.req++;
   1d36c:	f880 20b0 	strb.w	r2, [r0, #176]	; 0xb0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1d370:	da02      	bge.n	1d378 <ll_feature_req_send+0x2a>
		ull_periph_latency_cancel(conn, handle);
   1d372:	4621      	mov	r1, r4
   1d374:	f7f5 fce0 	bl	12d38 <ull_periph_latency_cancel>
	return 0;
   1d378:	2000      	movs	r0, #0
   1d37a:	e000      	b.n	1d37e <ll_feature_req_send+0x30>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1d37c:	2002      	movs	r0, #2
}
   1d37e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1d380:	200c      	movs	r0, #12
   1d382:	e7fc      	b.n	1d37e <ll_feature_req_send+0x30>

0001d384 <ll_version_ind_send>:
{
   1d384:	b510      	push	{r4, lr}
   1d386:	4604      	mov	r4, r0
	conn = ll_connected_get(handle);
   1d388:	f7ff ff3d 	bl	1d206 <ll_connected_get>
	if (!conn) {
   1d38c:	b188      	cbz	r0, 1d3b2 <ll_version_ind_send+0x2e>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   1d38e:	f890 10c8 	ldrb.w	r1, [r0, #200]	; 0xc8
   1d392:	f890 20c9 	ldrb.w	r2, [r0, #201]	; 0xc9
   1d396:	428a      	cmp	r2, r1
   1d398:	d10d      	bne.n	1d3b6 <ll_version_ind_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1d39a:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	conn->llcp_version.req++;
   1d39e:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1d3a0:	2b00      	cmp	r3, #0
	conn->llcp_version.req++;
   1d3a2:	f880 20c8 	strb.w	r2, [r0, #200]	; 0xc8
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1d3a6:	da02      	bge.n	1d3ae <ll_version_ind_send+0x2a>
		ull_periph_latency_cancel(conn, handle);
   1d3a8:	4621      	mov	r1, r4
   1d3aa:	f7f5 fcc5 	bl	12d38 <ull_periph_latency_cancel>
	return 0;
   1d3ae:	2000      	movs	r0, #0
   1d3b0:	e000      	b.n	1d3b4 <ll_version_ind_send+0x30>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1d3b2:	2002      	movs	r0, #2
}
   1d3b4:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1d3b6:	200c      	movs	r0, #12
   1d3b8:	e7fc      	b.n	1d3b4 <ll_version_ind_send+0x30>

0001d3ba <ull_conn_init>:
	err = init_reset();
   1d3ba:	f7f4 ba5b 	b.w	11874 <init_reset>

0001d3be <tx_demux>:
{
   1d3be:	b510      	push	{r4, lr}
   1d3c0:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   1d3c2:	2001      	movs	r0, #1
   1d3c4:	f7f5 f928 	bl	12618 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   1d3c8:	4620      	mov	r0, r4
   1d3ca:	2101      	movs	r1, #1
}
   1d3cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   1d3d0:	f7f5 bace 	b.w	12970 <ull_conn_tx_lll_enqueue>

0001d3d4 <ull_conn_lll_max_tx_octets_get>:
}
   1d3d4:	201b      	movs	r0, #27
   1d3d6:	4770      	bx	lr

0001d3d8 <lll_chan_sel_1>:
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.2
 * Channel Selection algorithm #1
 */
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   1d3d8:	b530      	push	{r4, r5, lr}
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   1d3da:	fb02 1101 	mla	r1, r2, r1, r1
   1d3de:	7802      	ldrb	r2, [r0, #0]
{
   1d3e0:	f89d 500c 	ldrb.w	r5, [sp, #12]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   1d3e4:	4411      	add	r1, r2
   1d3e6:	2225      	movs	r2, #37	; 0x25
{
   1d3e8:	4604      	mov	r4, r0
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   1d3ea:	fbb1 f0f2 	udiv	r0, r1, r2
   1d3ee:	fb02 1110 	mls	r1, r2, r0, r1
   1d3f2:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1d3f4:	08c2      	lsrs	r2, r0, #3
	*chan_use = chan_next;
   1d3f6:	7020      	strb	r0, [r4, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1d3f8:	5c9c      	ldrb	r4, [r3, r2]
   1d3fa:	f001 0107 	and.w	r1, r1, #7
   1d3fe:	fa44 f101 	asr.w	r1, r4, r1
   1d402:	f011 0101 	ands.w	r1, r1, #1
   1d406:	d109      	bne.n	1d41c <lll_chan_sel_1+0x44>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   1d408:	fbb0 f2f5 	udiv	r2, r0, r5
   1d40c:	fb05 0212 	mls	r2, r5, r2, r0
   1d410:	1e5c      	subs	r4, r3, #1
   1d412:	b2d2      	uxtb	r2, r2
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   1d414:	3304      	adds	r3, #4
	chan_next = 0U;
   1d416:	4608      	mov	r0, r1
	while (byte_count--) {
   1d418:	42a3      	cmp	r3, r4
   1d41a:	d100      	bne.n	1d41e <lll_chan_sel_1+0x46>
}
   1d41c:	bd30      	pop	{r4, r5, pc}
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   1d41e:	f100 0108 	add.w	r1, r0, #8
   1d422:	f814 5f01 	ldrb.w	r5, [r4, #1]!
		bit_count = 8U;
		while (bit_count--) {
   1d426:	b2c9      	uxtb	r1, r1
   1d428:	4288      	cmp	r0, r1
   1d42a:	d0f5      	beq.n	1d418 <lll_chan_sel_1+0x40>
			if (bite & 0x01) {
   1d42c:	f015 0f01 	tst.w	r5, #1
   1d430:	d003      	beq.n	1d43a <lll_chan_sel_1+0x62>
				if (chan_index == 0U) {
   1d432:	2a00      	cmp	r2, #0
   1d434:	d0f2      	beq.n	1d41c <lll_chan_sel_1+0x44>
					break;
				}
				chan_index--;
   1d436:	3a01      	subs	r2, #1
   1d438:	b2d2      	uxtb	r2, r2
			}
			chan_next++;
   1d43a:	3001      	adds	r0, #1
   1d43c:	b2c0      	uxtb	r0, r0
			bite >>= 1;
   1d43e:	086d      	lsrs	r5, r5, #1
   1d440:	e7f2      	b.n	1d428 <lll_chan_sel_1+0x50>

0001d442 <ll_fal_size_get>:
}
   1d442:	2008      	movs	r0, #8
   1d444:	4770      	bx	lr

0001d446 <swi_lll_nrf5_isr>:
	mayfly_run(TICKER_USER_ID_LLL);
   1d446:	2000      	movs	r0, #0
   1d448:	f7f1 b84a 	b.w	e4e0 <mayfly_run>

0001d44c <isr_race>:
	radio_status_reset();
   1d44c:	f7f7 bd8a 	b.w	14f64 <radio_status_reset>

0001d450 <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1d450:	4668      	mov	r0, sp
   1d452:	f020 0107 	bic.w	r1, r0, #7
   1d456:	468d      	mov	sp, r1
   1d458:	b501      	push	{r0, lr}
	isr_radio();
   1d45a:	f7f7 fc93 	bl	14d84 <isr_radio>
	ISR_DIRECT_PM();
   1d45e:	f7e5 ffcf 	bl	3400 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   1d462:	f7e6 f8bf 	bl	35e4 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1d466:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1d46a:	4685      	mov	sp, r0
   1d46c:	4770      	bx	lr

0001d46e <lll_rand_isr_get>:
   1d46e:	f7f5 bf91 	b.w	13394 <lll_csrand_isr_get>

0001d472 <lll_reset>:
}
   1d472:	2000      	movs	r0, #0
   1d474:	4770      	bx	lr

0001d476 <lll_prepare_done>:
}
   1d476:	2000      	movs	r0, #0
   1d478:	4770      	bx	lr

0001d47a <lll_is_abort_cb>:
}
   1d47a:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1d47e:	4770      	bx	lr

0001d480 <lll_event_offset_get>:
{
   1d480:	4603      	mov	r3, r0
		return MAX(ull->ticks_active_to_start,
   1d482:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
	} else if (ull->ticks_prepare_to_start & XON_BITMASK) {
   1d486:	2a00      	cmp	r2, #0
   1d488:	da04      	bge.n	1d494 <lll_event_offset_get+0x14>
		return MAX(ull->ticks_active_to_start,
   1d48a:	68db      	ldr	r3, [r3, #12]
   1d48c:	4298      	cmp	r0, r3
   1d48e:	bf38      	it	cc
   1d490:	4618      	movcc	r0, r3
   1d492:	4770      	bx	lr
		return MAX(ull->ticks_active_to_start,
   1d494:	4290      	cmp	r0, r2
   1d496:	bf38      	it	cc
   1d498:	4610      	movcc	r0, r2
}
   1d49a:	4770      	bx	lr

0001d49c <lll_preempt_calc>:
{
   1d49c:	b510      	push	{r4, lr}
   1d49e:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   1d4a0:	f7ff fc84 	bl	1cdac <ticker_ticks_now_get>
	diff = ticks_now - ticks_at_event;
   1d4a4:	1b00      	subs	r0, r0, r4
	if (diff & BIT(HAL_TICKER_CNTR_MSBIT)) {
   1d4a6:	0203      	lsls	r3, r0, #8
   1d4a8:	d405      	bmi.n	1d4b6 <lll_preempt_calc+0x1a>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   1d4aa:	3003      	adds	r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) {
   1d4ac:	2809      	cmp	r0, #9
   1d4ae:	bf94      	ite	ls
   1d4b0:	2000      	movls	r0, #0
   1d4b2:	2001      	movhi	r0, #1
}
   1d4b4:	bd10      	pop	{r4, pc}
		return 0;
   1d4b6:	2000      	movs	r0, #0
   1d4b8:	e7fc      	b.n	1d4b4 <lll_preempt_calc+0x18>

0001d4ba <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   1d4ba:	f000 ba63 	b.w	1d984 <radio_rx_ready_delay_get>

0001d4be <lll_isr_tx_status_reset>:
{
   1d4be:	b508      	push	{r3, lr}
	radio_status_reset();
   1d4c0:	f7f7 fd50 	bl	14f64 <radio_status_reset>
}
   1d4c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   1d4c8:	f7f7 be94 	b.w	151f4 <radio_tmr_status_reset>

0001d4cc <lll_isr_rx_status_reset>:
{
   1d4cc:	b508      	push	{r3, lr}
	radio_status_reset();
   1d4ce:	f7f7 fd49 	bl	14f64 <radio_status_reset>
	radio_tmr_status_reset();
   1d4d2:	f7f7 fe8f 	bl	151f4 <radio_tmr_status_reset>
}
   1d4d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   1d4da:	f7f7 be3b 	b.w	15154 <radio_rssi_status_reset>

0001d4de <lll_isr_status_reset>:
{
   1d4de:	b508      	push	{r3, lr}
	radio_status_reset();
   1d4e0:	f7f7 fd40 	bl	14f64 <radio_status_reset>
	radio_tmr_status_reset();
   1d4e4:	f7f7 fe86 	bl	151f4 <radio_tmr_status_reset>
	radio_filter_status_reset();
   1d4e8:	f7f7 fe6c 	bl	151c4 <radio_filter_status_reset>
	radio_ar_status_reset();
   1d4ec:	f7f7 ff86 	bl	153fc <radio_ar_status_reset>
}
   1d4f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   1d4f4:	f7f7 be2e 	b.w	15154 <radio_rssi_status_reset>

0001d4f8 <lll_isr_abort>:
{
   1d4f8:	b510      	push	{r4, lr}
   1d4fa:	4604      	mov	r4, r0
	lll_isr_status_reset();
   1d4fc:	f7ff ffef 	bl	1d4de <lll_isr_status_reset>
	lll_isr_cleanup(param);
   1d500:	4620      	mov	r0, r4
}
   1d502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1d506:	f7f6 b81d 	b.w	13544 <lll_isr_cleanup>

0001d50a <clock_ready>:
   1d50a:	f101 0010 	add.w	r0, r1, #16
   1d50e:	f7fa baa3 	b.w	17a58 <z_impl_k_sem_give>

0001d512 <lll_clock_ppm_local_get>:
}
   1d512:	2032      	movs	r0, #50	; 0x32
   1d514:	4770      	bx	lr

0001d516 <isr_abort>:
{
   1d516:	b510      	push	{r4, lr}
   1d518:	4604      	mov	r4, r0
	lll_isr_status_reset();
   1d51a:	f7ff ffe0 	bl	1d4de <lll_isr_status_reset>
	radio_filter_disable();
   1d51e:	f7f7 fe47 	bl	151b0 <radio_filter_disable>
	lll_isr_cleanup(param);
   1d522:	4620      	mov	r0, r4
}
   1d524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1d528:	f7f6 b80c 	b.w	13544 <lll_isr_cleanup>

0001d52c <lll_adv_reset>:
   1d52c:	f7f6 ba40 	b.w	139b0 <lll_adv_init>

0001d530 <lll_adv_data_reset>:
{
   1d530:	4603      	mov	r3, r0
	pdu->first = 0U;
   1d532:	2000      	movs	r0, #0
   1d534:	7018      	strb	r0, [r3, #0]
	pdu->last = 0U;
   1d536:	7058      	strb	r0, [r3, #1]
	pdu->pdu[1] = NULL;
   1d538:	6098      	str	r0, [r3, #8]
}
   1d53a:	4770      	bx	lr

0001d53c <lll_adv_pdu_alloc>:
{
   1d53c:	b510      	push	{r4, lr}
	first = pdu->first;
   1d53e:	7804      	ldrb	r4, [r0, #0]
	last = pdu->last;
   1d540:	7843      	ldrb	r3, [r0, #1]
	if (first == last) {
   1d542:	429c      	cmp	r4, r3
	first = pdu->first;
   1d544:	b2e2      	uxtb	r2, r4
	if (first == last) {
   1d546:	d10d      	bne.n	1d564 <lll_adv_pdu_alloc+0x28>
		last++;
   1d548:	3301      	adds	r3, #1
   1d54a:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   1d54c:	2b02      	cmp	r3, #2
   1d54e:	d100      	bne.n	1d552 <lll_adv_pdu_alloc+0x16>
			last = 0U;
   1d550:	2300      	movs	r3, #0
	*idx = last;
   1d552:	eb00 0483 	add.w	r4, r0, r3, lsl #2
   1d556:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   1d558:	6860      	ldr	r0, [r4, #4]
	if (p) {
   1d55a:	b910      	cbnz	r0, 1d562 <lll_adv_pdu_alloc+0x26>
	p = lll_adv_pdu_alloc_pdu_adv();
   1d55c:	f7f6 fa50 	bl	13a00 <lll_adv_pdu_alloc_pdu_adv>
	pdu->pdu[last] = (void *)p;
   1d560:	6060      	str	r0, [r4, #4]
}
   1d562:	bd10      	pop	{r4, pc}
		pdu->last = first;
   1d564:	7042      	strb	r2, [r0, #1]
		first_latest = pdu->first;
   1d566:	7804      	ldrb	r4, [r0, #0]
		if (first_latest != first) {
   1d568:	42a2      	cmp	r2, r4
   1d56a:	d0f2      	beq.n	1d552 <lll_adv_pdu_alloc+0x16>
			pdu->last = last;
   1d56c:	7043      	strb	r3, [r0, #1]
			last++;
   1d56e:	e7eb      	b.n	1d548 <lll_adv_pdu_alloc+0xc>

0001d570 <isr_done>:
{
   1d570:	b510      	push	{r4, lr}
   1d572:	4604      	mov	r4, r0
	lll_isr_status_reset();
   1d574:	f7ff ffb3 	bl	1d4de <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   1d578:	7a23      	ldrb	r3, [r4, #8]
   1d57a:	f003 0271 	and.w	r2, r3, #113	; 0x71
   1d57e:	2a01      	cmp	r2, #1
		lll->chan_map_curr = lll->chan_map;
   1d580:	bf02      	ittt	eq
   1d582:	f3c3 0242 	ubfxeq	r2, r3, #1, #3
   1d586:	f362 1306 	bfieq	r3, r2, #4, #3
   1d58a:	7223      	strbeq	r3, [r4, #8]
	if (lll->chan_map_curr &&
   1d58c:	7a23      	ldrb	r3, [r4, #8]
   1d58e:	f013 0f70 	tst.w	r3, #112	; 0x70
   1d592:	d00e      	beq.n	1d5b2 <isr_done+0x42>
	    (!lll->conn || !lll->conn->periph.cancelled) &&
   1d594:	6863      	ldr	r3, [r4, #4]
   1d596:	b11b      	cbz	r3, 1d5a0 <isr_done+0x30>
   1d598:	f893 3020 	ldrb.w	r3, [r3, #32]
   1d59c:	079b      	lsls	r3, r3, #30
   1d59e:	d408      	bmi.n	1d5b2 <isr_done+0x42>
		pdu = chan_prepare(lll);
   1d5a0:	4620      	mov	r0, r4
   1d5a2:	f7f6 fad7 	bl	13b54 <chan_prepare.isra.0>
		radio_tx_enable();
   1d5a6:	f7f7 fcc5 	bl	14f34 <radio_tx_enable>
}
   1d5aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   1d5ae:	f7f7 bf0b 	b.w	153c8 <radio_tmr_end_capture>
	radio_filter_disable();
   1d5b2:	f7f7 fdfd 	bl	151b0 <radio_filter_disable>
	lll_isr_cleanup(param);
   1d5b6:	4620      	mov	r0, r4
}
   1d5b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1d5bc:	f7f5 bfc2 	b.w	13544 <lll_isr_cleanup>

0001d5c0 <resume_prepare_cb>:
	ull = HDR_LLL2ULL(p->param);
   1d5c0:	68c3      	ldr	r3, [r0, #12]
{
   1d5c2:	b570      	push	{r4, r5, r6, lr}
   1d5c4:	4604      	mov	r4, r0
	ull = HDR_LLL2ULL(p->param);
   1d5c6:	681e      	ldr	r6, [r3, #0]
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   1d5c8:	f7ff fbf0 	bl	1cdac <ticker_ticks_now_get>
   1d5cc:	4605      	mov	r5, r0
   1d5ce:	4630      	mov	r0, r6
   1d5d0:	f7ff ff56 	bl	1d480 <lll_event_offset_get>
	p->remainder = 0;
   1d5d4:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   1d5d6:	1a2d      	subs	r5, r5, r0
   1d5d8:	6025      	str	r5, [r4, #0]
	p->remainder = 0;
   1d5da:	6063      	str	r3, [r4, #4]
	p->lazy = 0;
   1d5dc:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   1d5de:	4620      	mov	r0, r4
}
   1d5e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   1d5e4:	f7f6 bb34 	b.w	13c50 <prepare_cb>

0001d5e8 <lll_adv_scan_req_check>:
{
   1d5e8:	b510      	push	{r4, lr}
	return (((lll->filter_policy & 0x01) == 0U) || devmatch_ok) &&
   1d5ea:	7a40      	ldrb	r0, [r0, #9]
{
   1d5ec:	f89d 4008 	ldrb.w	r4, [sp, #8]
	return (((lll->filter_policy & 0x01) == 0U) || devmatch_ok) &&
   1d5f0:	07c0      	lsls	r0, r0, #31
   1d5f2:	d500      	bpl.n	1d5f6 <lll_adv_scan_req_check+0xe>
   1d5f4:	b174      	cbz	r4, 1d614 <lll_adv_scan_req_check+0x2c>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   1d5f6:	7808      	ldrb	r0, [r1, #0]
   1d5f8:	ebb2 1fd0 	cmp.w	r2, r0, lsr #7
   1d5fc:	d108      	bne.n	1d610 <lll_adv_scan_req_check+0x28>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   1d5fe:	2206      	movs	r2, #6
   1d600:	3108      	adds	r1, #8
   1d602:	4618      	mov	r0, r3
   1d604:	f7fc fe2a 	bl	1a25c <memcmp>
	return (tx_addr == sr->rx_addr) &&
   1d608:	fab0 f080 	clz	r0, r0
   1d60c:	0940      	lsrs	r0, r0, #5
}
   1d60e:	bd10      	pop	{r4, pc}
	return (tx_addr == sr->rx_addr) &&
   1d610:	2000      	movs	r0, #0
   1d612:	e7fc      	b.n	1d60e <lll_adv_scan_req_check+0x26>
	return (((lll->filter_policy & 0x01) == 0U) || devmatch_ok) &&
   1d614:	4620      	mov	r0, r4
   1d616:	e7fa      	b.n	1d60e <lll_adv_scan_req_check+0x26>

0001d618 <lll_adv_connect_ind_check>:
{
   1d618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d61a:	9f07      	ldr	r7, [sp, #28]
   1d61c:	f89d 4020 	ldrb.w	r4, [sp, #32]
   1d620:	4606      	mov	r6, r0
   1d622:	460d      	mov	r5, r1
   1d624:	4618      	mov	r0, r3
	if (tgt_addr) {
   1d626:	b1ef      	cbz	r7, 1d664 <lll_adv_connect_ind_check+0x4c>
}

static inline bool isr_rx_ci_adva_check(uint8_t tx_addr, uint8_t *addr,
					struct pdu_adv *ci)
{
	return (tx_addr == ci->rx_addr) &&
   1d628:	780b      	ldrb	r3, [r1, #0]
   1d62a:	ebb2 1fd3 	cmp.w	r2, r3, lsr #7
   1d62e:	d003      	beq.n	1d638 <lll_adv_connect_ind_check+0x20>
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   1d630:	2000      	movs	r0, #0
   1d632:	f000 0001 	and.w	r0, r0, #1
}
   1d636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   1d638:	2206      	movs	r2, #6
   1d63a:	3108      	adds	r1, #8
   1d63c:	f7fc fe0e 	bl	1a25c <memcmp>
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   1d640:	2800      	cmp	r0, #0
   1d642:	d1f5      	bne.n	1d630 <lll_adv_connect_ind_check+0x18>
	return (rx_addr == ci->tx_addr) &&
   1d644:	782b      	ldrb	r3, [r5, #0]
   1d646:	f89d 2018 	ldrb.w	r2, [sp, #24]
   1d64a:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1d64e:	4293      	cmp	r3, r2
   1d650:	d1ef      	bne.n	1d632 <lll_adv_connect_ind_check+0x1a>
	       !memcmp(tgt_addr, ci->connect_ind.init_addr, BDADDR_SIZE);
   1d652:	2206      	movs	r2, #6
   1d654:	1ca9      	adds	r1, r5, #2
   1d656:	4638      	mov	r0, r7
   1d658:	f7fc fe00 	bl	1a25c <memcmp>
	return (rx_addr == ci->tx_addr) &&
   1d65c:	fab0 f080 	clz	r0, r0
   1d660:	0940      	lsrs	r0, r0, #5
   1d662:	e7e6      	b.n	1d632 <lll_adv_connect_ind_check+0x1a>
	return (((lll->filter_policy & 0x02) == 0) ||
   1d664:	7a73      	ldrb	r3, [r6, #9]
		(devmatch_ok)) &&
   1d666:	079b      	lsls	r3, r3, #30
   1d668:	d500      	bpl.n	1d66c <lll_adv_connect_ind_check+0x54>
	return (((lll->filter_policy & 0x02) == 0) ||
   1d66a:	b174      	cbz	r4, 1d68a <lll_adv_connect_ind_check+0x72>
	return (tx_addr == ci->rx_addr) &&
   1d66c:	782b      	ldrb	r3, [r5, #0]
   1d66e:	ebb2 1fd3 	cmp.w	r2, r3, lsr #7
   1d672:	d108      	bne.n	1d686 <lll_adv_connect_ind_check+0x6e>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   1d674:	2206      	movs	r2, #6
   1d676:	f105 0108 	add.w	r1, r5, #8
   1d67a:	f7fc fdef 	bl	1a25c <memcmp>
	return (tx_addr == ci->rx_addr) &&
   1d67e:	fab0 f080 	clz	r0, r0
   1d682:	0940      	lsrs	r0, r0, #5
   1d684:	e7d7      	b.n	1d636 <lll_adv_connect_ind_check+0x1e>
   1d686:	2000      	movs	r0, #0
   1d688:	e7d5      	b.n	1d636 <lll_adv_connect_ind_check+0x1e>
		(devmatch_ok)) &&
   1d68a:	4620      	mov	r0, r4
   1d68c:	e7d3      	b.n	1d636 <lll_adv_connect_ind_check+0x1e>

0001d68e <prepare_cb>:
	return common_prepare_cb(p, false);
   1d68e:	2100      	movs	r1, #0
   1d690:	f7f6 bc90 	b.w	13fb4 <common_prepare_cb>

0001d694 <isr_done_cleanup>:
{
   1d694:	b538      	push	{r3, r4, r5, lr}
   1d696:	4604      	mov	r4, r0
	lll_isr_status_reset();
   1d698:	f7ff ff21 	bl	1d4de <lll_isr_status_reset>
	if (lll_is_done(param)) {
   1d69c:	4620      	mov	r0, r4
   1d69e:	f7f5 ff17 	bl	134d0 <lll_is_done>
   1d6a2:	4605      	mov	r5, r0
   1d6a4:	b998      	cbnz	r0, 1d6ce <isr_done_cleanup+0x3a>
	radio_filter_disable();
   1d6a6:	f7f7 fd83 	bl	151b0 <radio_filter_disable>
	if (++lll->chan == 3U) {
   1d6aa:	7923      	ldrb	r3, [r4, #4]
   1d6ac:	f3c3 0241 	ubfx	r2, r3, #1, #2
   1d6b0:	3201      	adds	r2, #1
   1d6b2:	f002 0203 	and.w	r2, r2, #3
   1d6b6:	2a03      	cmp	r2, #3
   1d6b8:	bf14      	ite	ne
   1d6ba:	f362 0342 	bfine	r3, r2, #1, #2
		lll->chan = 0U;
   1d6be:	f365 0342 	bfieq	r3, r5, #1, #2
   1d6c2:	7123      	strb	r3, [r4, #4]
	lll_isr_cleanup(param);
   1d6c4:	4620      	mov	r0, r4
}
   1d6c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_isr_cleanup(param);
   1d6ca:	f7f5 bf3b 	b.w	13544 <lll_isr_cleanup>
}
   1d6ce:	bd38      	pop	{r3, r4, r5, pc}

0001d6d0 <isr_done>:
{
   1d6d0:	b508      	push	{r3, lr}
	isr_common_done(param);
   1d6d2:	f7f6 fd3f 	bl	14154 <isr_common_done>
	radio_rx_enable();
   1d6d6:	f7f7 fc27 	bl	14f28 <radio_rx_enable>
}
   1d6da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_end_capture();
   1d6de:	f7f7 be73 	b.w	153c8 <radio_tmr_end_capture>

0001d6e2 <isr_window>:
{
   1d6e2:	b510      	push	{r4, lr}
   1d6e4:	4604      	mov	r4, r0
	isr_common_done(param);
   1d6e6:	f7f6 fd35 	bl	14154 <isr_common_done>
	if (++lll->chan == 3U) {
   1d6ea:	7923      	ldrb	r3, [r4, #4]
   1d6ec:	f3c3 0241 	ubfx	r2, r3, #1, #2
   1d6f0:	3201      	adds	r2, #1
   1d6f2:	f002 0203 	and.w	r2, r2, #3
   1d6f6:	2a03      	cmp	r2, #3
   1d6f8:	bf14      	ite	ne
   1d6fa:	f362 0342 	bfine	r3, r2, #1, #2
		lll->chan = 0U;
   1d6fe:	f36f 0342 	bfceq	r3, #1, #2
   1d702:	7123      	strb	r3, [r4, #4]
	lll_chan_set(37 + lll->chan);
   1d704:	7920      	ldrb	r0, [r4, #4]
   1d706:	f3c0 0041 	ubfx	r0, r0, #1, #2
   1d70a:	3025      	adds	r0, #37	; 0x25
   1d70c:	f7f5 fee8 	bl	134e0 <lll_chan_set>
	remainder_us = radio_tmr_start_now(0);
   1d710:	2000      	movs	r0, #0
   1d712:	f7f7 fdf9 	bl	15308 <radio_tmr_start_now>
}
   1d716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_tmr_end_capture();
   1d71a:	f7f7 be55 	b.w	153c8 <radio_tmr_end_capture>

0001d71e <resume_prepare_cb>:
	ull = HDR_LLL2ULL(p->param);
   1d71e:	68c3      	ldr	r3, [r0, #12]
{
   1d720:	b570      	push	{r4, r5, r6, lr}
   1d722:	4604      	mov	r4, r0
	ull = HDR_LLL2ULL(p->param);
   1d724:	681e      	ldr	r6, [r3, #0]
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   1d726:	f7ff fb41 	bl	1cdac <ticker_ticks_now_get>
   1d72a:	4605      	mov	r5, r0
   1d72c:	4630      	mov	r0, r6
   1d72e:	f7ff fea7 	bl	1d480 <lll_event_offset_get>
	p->remainder = 0;
   1d732:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   1d734:	1a2d      	subs	r5, r5, r0
   1d736:	6025      	str	r5, [r4, #0]
	p->remainder = 0;
   1d738:	6063      	str	r3, [r4, #4]
	p->lazy = 0;
   1d73a:	8123      	strh	r3, [r4, #8]
	return common_prepare_cb(p, true);
   1d73c:	4620      	mov	r0, r4
   1d73e:	2101      	movs	r1, #1
}
   1d740:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return common_prepare_cb(p, true);
   1d744:	f7f6 bc36 	b.w	13fb4 <common_prepare_cb>

0001d748 <isr_rx_scan_report.constprop.0>:
			&srsp->scan_rsp.addr[0], BDADDR_SIZE) == 0));
}

static int isr_rx_scan_report(struct lll_scan *lll, uint8_t rssi_ready,
   1d748:	b570      	push	{r4, r5, r6, lr}
   1d74a:	4606      	mov	r6, r0
			      bool dir_report)
{
	struct node_rx_pdu *node_rx;
	int err = 0;

	node_rx = ull_pdu_rx_alloc_peek(3);
   1d74c:	2003      	movs	r0, #3
static int isr_rx_scan_report(struct lll_scan *lll, uint8_t rssi_ready,
   1d74e:	460d      	mov	r5, r1
	node_rx = ull_pdu_rx_alloc_peek(3);
   1d750:	f7f3 fb0a 	bl	10d68 <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
   1d754:	4604      	mov	r4, r0
   1d756:	b1c8      	cbz	r0, 1d78c <isr_rx_scan_report.constprop.0+0x44>
		return -ENOBUFS;
	}
	ull_pdu_rx_alloc();
   1d758:	f7f3 fb1e 	bl	10d98 <ull_pdu_rx_alloc>

	/* Prepare the report (adv or scan resp) */
	node_rx->hdr.handle = 0xffff;
   1d75c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1d760:	80e3      	strh	r3, [r4, #6]
			}
			break;
		}
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   1d762:	2305      	movs	r3, #5
   1d764:	7123      	strb	r3, [r4, #4]
	}

	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   1d766:	b17e      	cbz	r6, 1d788 <isr_rx_scan_report.constprop.0+0x40>
   1d768:	f7f7 fcee 	bl	15148 <radio_rssi_get>
   1d76c:	b2c0      	uxtb	r0, r0
	/* save the resolving list index. */
	node_rx->hdr.rx_ftr.rl_idx = rl_idx;
#endif /* CONFIG_BT_CTLR_PRIVACY */
#if defined(CONFIG_BT_CTLR_EXT_SCAN_FP)
	/* save the directed adv report flag */
	node_rx->hdr.rx_ftr.direct = dir_report;
   1d76e:	7e63      	ldrb	r3, [r4, #25]
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   1d770:	7620      	strb	r0, [r4, #24]
	node_rx->hdr.rx_ftr.direct = dir_report;
   1d772:	f365 0300 	bfi	r3, r5, #0, #1
		node_rx->hdr.rx_ftr.chan = _radio.scanner.chan - 1;
		node_rx->hdr.rx_ftr.ticks_anchor = _radio.ticks_anchor;
	}
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */

	ull_rx_put(node_rx->hdr.link, node_rx);
   1d776:	6820      	ldr	r0, [r4, #0]
	node_rx->hdr.rx_ftr.direct = dir_report;
   1d778:	7663      	strb	r3, [r4, #25]
	ull_rx_put(node_rx->hdr.link, node_rx);
   1d77a:	4621      	mov	r1, r4
   1d77c:	f7f3 fb22 	bl	10dc4 <ull_rx_put>
	ull_rx_sched();
   1d780:	f7f3 fb30 	bl	10de4 <ull_rx_sched>

	return err;
   1d784:	2000      	movs	r0, #0
}
   1d786:	bd70      	pop	{r4, r5, r6, pc}
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   1d788:	207f      	movs	r0, #127	; 0x7f
   1d78a:	e7f0      	b.n	1d76e <isr_rx_scan_report.constprop.0+0x26>
		return -ENOBUFS;
   1d78c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1d790:	e7f9      	b.n	1d786 <isr_rx_scan_report.constprop.0+0x3e>

0001d792 <isr_abort>:
{
   1d792:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d794:	4604      	mov	r4, r0
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   1d796:	2500      	movs	r5, #0
	lll_isr_status_reset();
   1d798:	f7ff fea1 	bl	1d4de <lll_isr_status_reset>
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   1d79c:	462b      	mov	r3, r5
   1d79e:	2203      	movs	r2, #3
   1d7a0:	4629      	mov	r1, r5
   1d7a2:	9500      	str	r5, [sp, #0]
   1d7a4:	4628      	mov	r0, r5
   1d7a6:	f7f1 fc11 	bl	efcc <ticker_stop>
	radio_disable();
   1d7aa:	f7f7 fbc9 	bl	14f40 <radio_disable>
	radio_filter_disable();
   1d7ae:	f7f7 fcff 	bl	151b0 <radio_filter_disable>
	if (++lll->chan == 3U) {
   1d7b2:	7922      	ldrb	r2, [r4, #4]
   1d7b4:	f3c2 0041 	ubfx	r0, r2, #1, #2
   1d7b8:	3001      	adds	r0, #1
   1d7ba:	f000 0003 	and.w	r0, r0, #3
   1d7be:	2803      	cmp	r0, #3
   1d7c0:	bf14      	ite	ne
   1d7c2:	f360 0242 	bfine	r2, r0, #1, #2
		lll->chan = 0U;
   1d7c6:	f365 0242 	bfieq	r2, r5, #1, #2
	lll_isr_cleanup(param);
   1d7ca:	4620      	mov	r0, r4
		lll->chan = 0U;
   1d7cc:	7122      	strb	r2, [r4, #4]
}
   1d7ce:	b003      	add	sp, #12
   1d7d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	lll_isr_cleanup(param);
   1d7d4:	f7f5 beb6 	b.w	13544 <lll_isr_cleanup>

0001d7d8 <lll_scan_init>:
}
   1d7d8:	2000      	movs	r0, #0
   1d7da:	4770      	bx	lr

0001d7dc <lll_scan_reset>:
   1d7dc:	2000      	movs	r0, #0
   1d7de:	4770      	bx	lr

0001d7e0 <lll_conn_init>:
{
   1d7e0:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   1d7e2:	f7f7 fbff 	bl	14fe4 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1d7e6:	7803      	ldrb	r3, [r0, #0]
   1d7e8:	2201      	movs	r2, #1
   1d7ea:	f362 0301 	bfi	r3, r2, #0, #2
   1d7ee:	7003      	strb	r3, [r0, #0]
}
   1d7f0:	2000      	movs	r0, #0
   1d7f2:	bd08      	pop	{r3, pc}

0001d7f4 <lll_conn_reset>:
}
   1d7f4:	2000      	movs	r0, #0
   1d7f6:	4770      	bx	lr

0001d7f8 <lll_conn_flush>:
}
   1d7f8:	4770      	bx	lr

0001d7fa <lll_conn_tx_pkt_set>:
{
   1d7fa:	b510      	push	{r4, lr}
   1d7fc:	460c      	mov	r4, r1
	radio_phy_set(phy, flags);
   1d7fe:	2100      	movs	r1, #0
   1d800:	4608      	mov	r0, r1
   1d802:	f7f7 fb13 	bl	14e2c <radio_phy_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   1d806:	2008      	movs	r0, #8
   1d808:	2201      	movs	r2, #1
   1d80a:	211b      	movs	r1, #27
   1d80c:	f7f7 fb54 	bl	14eb8 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   1d810:	4620      	mov	r0, r4
}
   1d812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_pkt_tx_set(pdu_data_tx);
   1d816:	f7f7 bb81 	b.w	14f1c <radio_pkt_tx_set>

0001d81a <lll_conn_pdu_tx_prep>:
{
   1d81a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1d81e:	4604      	mov	r4, r0
   1d820:	4688      	mov	r8, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1d822:	aa01      	add	r2, sp, #4
   1d824:	e9d0 010f 	ldrd	r0, r1, [r0, #60]	; 0x3c
   1d828:	f7fe ffff 	bl	1c82a <memq_peek>
	if (lll->empty || !link) {
   1d82c:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
   1d830:	075b      	lsls	r3, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1d832:	4681      	mov	r9, r0
	if (lll->empty || !link) {
   1d834:	d400      	bmi.n	1d838 <lll_conn_pdu_tx_prep+0x1e>
   1d836:	b9b8      	cbnz	r0, 1d868 <lll_conn_pdu_tx_prep+0x4e>
		lll->empty = 1U;
   1d838:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
   1d83c:	f043 0304 	orr.w	r3, r3, #4
   1d840:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
		p = (void *)radio_pkt_empty_get();
   1d844:	f7f7 fbce 	bl	14fe4 <radio_pkt_empty_get>
   1d848:	7803      	ldrb	r3, [r0, #0]
   1d84a:	4605      	mov	r5, r0
		if (link || FORCE_MD_CNT_GET()) {
   1d84c:	f1b9 0f00 	cmp.w	r9, #0
   1d850:	d007      	beq.n	1d862 <lll_conn_pdu_tx_prep+0x48>
			p->md = 1U;
   1d852:	f043 0310 	orr.w	r3, r3, #16
			p->md = 0U;
   1d856:	702b      	strb	r3, [r5, #0]
	*pdu_data_tx = p;
   1d858:	f8c8 5000 	str.w	r5, [r8]
}
   1d85c:	b003      	add	sp, #12
   1d85e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			p->md = 0U;
   1d862:	f369 1304 	bfi	r3, r9, #4, #1
   1d866:	e7f6      	b.n	1d856 <lll_conn_pdu_tx_prep+0x3c>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1d868:	9f01      	ldr	r7, [sp, #4]
   1d86a:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
		if (!lll->packet_tx_head_len) {
   1d86e:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1d872:	3704      	adds	r7, #4
   1d874:	19bd      	adds	r5, r7, r6
		if (!lll->packet_tx_head_len) {
   1d876:	b913      	cbnz	r3, 1d87e <lll_conn_pdu_tx_prep+0x64>
			lll->packet_tx_head_len = p->len;
   1d878:	786b      	ldrb	r3, [r5, #1]
   1d87a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
		if (lll->packet_tx_head_offset) {
   1d87e:	b126      	cbz	r6, 1d88a <lll_conn_pdu_tx_prep+0x70>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1d880:	5dbb      	ldrb	r3, [r7, r6]
   1d882:	2201      	movs	r2, #1
   1d884:	f362 0301 	bfi	r3, r2, #0, #2
   1d888:	55bb      	strb	r3, [r7, r6]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   1d88a:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   1d88e:	1b9b      	subs	r3, r3, r6
   1d890:	706b      	strb	r3, [r5, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   1d892:	4620      	mov	r0, r4
   1d894:	f7ff fd9e 	bl	1d3d4 <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   1d898:	786b      	ldrb	r3, [r5, #1]
   1d89a:	4283      	cmp	r3, r0
   1d89c:	d90b      	bls.n	1d8b6 <lll_conn_pdu_tx_prep+0x9c>
			p->len = max_tx_octets;
   1d89e:	7068      	strb	r0, [r5, #1]
			p->md = 1U;
   1d8a0:	5dbb      	ldrb	r3, [r7, r6]
			p->md = 1U;
   1d8a2:	f043 0310 	orr.w	r3, r3, #16
			p->md = 0U;
   1d8a6:	55bb      	strb	r3, [r7, r6]
		p->rfu = 0U;
   1d8a8:	5dbb      	ldrb	r3, [r7, r6]
   1d8aa:	f36f 1347 	bfc	r3, #5, #3
   1d8ae:	55bb      	strb	r3, [r7, r6]
		p->resv = 0U;
   1d8b0:	2300      	movs	r3, #0
   1d8b2:	70ab      	strb	r3, [r5, #2]
   1d8b4:	e7d0      	b.n	1d858 <lll_conn_pdu_tx_prep+0x3e>
		} else if ((link->next != lll->memq_tx.tail) ||
   1d8b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1d8b8:	f8d9 2000 	ldr.w	r2, [r9]
   1d8bc:	429a      	cmp	r2, r3
   1d8be:	5dbb      	ldrb	r3, [r7, r6]
   1d8c0:	d1ef      	bne.n	1d8a2 <lll_conn_pdu_tx_prep+0x88>
			p->md = 0U;
   1d8c2:	f36f 1304 	bfc	r3, #4, #1
   1d8c6:	e7ee      	b.n	1d8a6 <lll_conn_pdu_tx_prep+0x8c>

0001d8c8 <ecb_encrypt_be>:

void ecb_encrypt_be(uint8_t const *const key_be, uint8_t const *const clear_text_be,
		    uint8_t * const cipher_text_be)
{
   1d8c8:	b530      	push	{r4, r5, lr}
   1d8ca:	b08d      	sub	sp, #52	; 0x34
   1d8cc:	460d      	mov	r5, r1
   1d8ce:	4614      	mov	r4, r2
	struct ecb_param ecb;

	memcpy(&ecb.key[0], key_be, sizeof(ecb.key));
   1d8d0:	4601      	mov	r1, r0
   1d8d2:	2210      	movs	r2, #16
   1d8d4:	4668      	mov	r0, sp
   1d8d6:	f7fc fcd2 	bl	1a27e <memcpy>
	memcpy(&ecb.clear_text[0], clear_text_be, sizeof(ecb.clear_text));
   1d8da:	2210      	movs	r2, #16
   1d8dc:	4629      	mov	r1, r5
   1d8de:	eb0d 0002 	add.w	r0, sp, r2
   1d8e2:	f7fc fccc 	bl	1a27e <memcpy>

	do_ecb(&ecb);
   1d8e6:	4668      	mov	r0, sp
   1d8e8:	f7f7 fa14 	bl	14d14 <do_ecb>

	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
   1d8ec:	2210      	movs	r2, #16
   1d8ee:	a908      	add	r1, sp, #32
   1d8f0:	4620      	mov	r0, r4
   1d8f2:	f7fc fcc4 	bl	1a27e <memcpy>
}
   1d8f6:	b00d      	add	sp, #52	; 0x34
   1d8f8:	bd30      	pop	{r4, r5, pc}

0001d8fa <ecb_encrypt>:

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   1d8fa:	b570      	push	{r4, r5, r6, lr}
   1d8fc:	b08c      	sub	sp, #48	; 0x30
   1d8fe:	460e      	mov	r6, r1
   1d900:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1d902:	4601      	mov	r1, r0
   1d904:	2210      	movs	r2, #16
   1d906:	4668      	mov	r0, sp
{
   1d908:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1d90a:	f7fe ff5f 	bl	1c7cc <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   1d90e:	2210      	movs	r2, #16
   1d910:	eb0d 0002 	add.w	r0, sp, r2
   1d914:	4631      	mov	r1, r6
   1d916:	f7fe ff59 	bl	1c7cc <mem_rcopy>

	do_ecb(&ecb);
   1d91a:	4668      	mov	r0, sp
   1d91c:	f7f7 f9fa 	bl	14d14 <do_ecb>

	if (cipher_text_le) {
   1d920:	b125      	cbz	r5, 1d92c <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   1d922:	2210      	movs	r2, #16
   1d924:	a908      	add	r1, sp, #32
   1d926:	4628      	mov	r0, r5
   1d928:	f7fe ff50 	bl	1c7cc <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   1d92c:	b124      	cbz	r4, 1d938 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   1d92e:	2210      	movs	r2, #16
   1d930:	a908      	add	r1, sp, #32
   1d932:	4620      	mov	r0, r4
   1d934:	f7fc fca3 	bl	1a27e <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   1d938:	b00c      	add	sp, #48	; 0x30
   1d93a:	bd70      	pop	{r4, r5, r6, pc}

0001d93c <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1d93c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d940:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1d944:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1d946:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   1d94a:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1d94e:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   1d952:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   1d956:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   1d95a:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   1d95e:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   1d962:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   1d966:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   1d96a:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   1d96e:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   1d972:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   1d976:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   1d97a:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   1d97e:	4770      	bx	lr

0001d980 <radio_tx_chain_delay_get>:
}
   1d980:	2001      	movs	r0, #1
   1d982:	4770      	bx	lr

0001d984 <radio_rx_ready_delay_get>:
}
   1d984:	2029      	movs	r0, #41	; 0x29
   1d986:	4770      	bx	lr

0001d988 <radio_rx_chain_delay_get>:
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_2M_US;
   1d988:	2802      	cmp	r0, #2
}
   1d98a:	bf14      	ite	ne
   1d98c:	200a      	movne	r0, #10
   1d98e:	2006      	moveq	r0, #6
   1d990:	4770      	bx	lr

0001d992 <radio_phy_flags_rx_get>:
}
   1d992:	2000      	movs	r0, #0
   1d994:	4770      	bx	lr

0001d996 <mayfly_prio_is_equal>:
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1d996:	4288      	cmp	r0, r1
   1d998:	d00a      	beq.n	1d9b0 <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
   1d99a:	2801      	cmp	r0, #1
   1d99c:	d104      	bne.n	1d9a8 <mayfly_prio_is_equal+0x12>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   1d99e:	2902      	cmp	r1, #2
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   1d9a0:	bf14      	ite	ne
   1d9a2:	2000      	movne	r0, #0
   1d9a4:	2001      	moveq	r0, #1
   1d9a6:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1d9a8:	2802      	cmp	r0, #2
   1d9aa:	d103      	bne.n	1d9b4 <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   1d9ac:	2901      	cmp	r1, #1
   1d9ae:	e7f7      	b.n	1d9a0 <mayfly_prio_is_equal+0xa>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1d9b0:	2001      	movs	r0, #1
   1d9b2:	4770      	bx	lr
   1d9b4:	2000      	movs	r0, #0
}
   1d9b6:	4770      	bx	lr

0001d9b8 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   1d9b8:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   1d9ba:	2000      	movs	r0, #0
   1d9bc:	f7f7 b9a2 	b.w	14d04 <cntr_cmp_set>

0001d9c0 <sys_put_le32>:
	dst[1] = val >> 8;
   1d9c0:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   1d9c4:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
   1d9c6:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
   1d9c8:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
   1d9ca:	0a00      	lsrs	r0, r0, #8
   1d9cc:	704b      	strb	r3, [r1, #1]
   1d9ce:	70c8      	strb	r0, [r1, #3]
}
   1d9d0:	4770      	bx	lr

0001d9d2 <hci_vendor_read_static_addr>:
				 uint8_t size)
{
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1d9d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
{
   1d9d6:	b510      	push	{r4, lr}
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1d9d8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   1d9dc:	3201      	adds	r2, #1
{
   1d9de:	4604      	mov	r4, r0
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1d9e0:	d106      	bne.n	1d9f0 <hci_vendor_read_static_addr+0x1e>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1d9e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1d9e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1d9ea:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1d9ec:	4293      	cmp	r3, r2
   1d9ee:	d044      	beq.n	1da7a <hci_vendor_read_static_addr+0xa8>
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   1d9f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1d9f4:	f8d2 00a0 	ldr.w	r0, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1d9f8:	f010 0001 	ands.w	r0, r0, #1
   1d9fc:	d036      	beq.n	1da6c <hci_vendor_read_static_addr+0x9a>
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   1d9fe:	4621      	mov	r1, r4
   1da00:	f8d2 00a4 	ldr.w	r0, [r2, #164]	; 0xa4
   1da04:	f7ff ffdc 	bl	1d9c0 <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   1da08:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   1da0c:	7123      	strb	r3, [r4, #4]
	dst[1] = val >> 8;
   1da0e:	f3c3 2307 	ubfx	r3, r3, #8, #8

		/* The FICR value is a just a random number, with no knowledge
		 * of the Bluetooth Specification requirements for random
		 * static addresses.
		 */
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   1da12:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1da16:	7163      	strb	r3, [r4, #5]

		/* If no public address is provided and a static address is
		 * available, then it is recommended to return an identity root
		 * key (if available) from this command.
		 */
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1da18:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
   1da1c:	3101      	adds	r1, #1
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   1da1e:	f104 0306 	add.w	r3, r4, #6
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1da22:	d024      	beq.n	1da6e <hci_vendor_read_static_addr+0x9c>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1da24:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1da28:	3101      	adds	r1, #1
   1da2a:	d020      	beq.n	1da6e <hci_vendor_read_static_addr+0x9c>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1da2c:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1da30:	3101      	adds	r1, #1
   1da32:	d01c      	beq.n	1da6e <hci_vendor_read_static_addr+0x9c>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   1da34:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1da38:	3101      	adds	r1, #1
   1da3a:	d018      	beq.n	1da6e <hci_vendor_read_static_addr+0x9c>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   1da3c:	4619      	mov	r1, r3
   1da3e:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
   1da42:	f7ff ffbd 	bl	1d9c0 <sys_put_le32>
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   1da46:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
   1da4a:	f104 010a 	add.w	r1, r4, #10
   1da4e:	f7ff ffb7 	bl	1d9c0 <sys_put_le32>
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   1da52:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
   1da56:	f104 010e 	add.w	r1, r4, #14
   1da5a:	f7ff ffb1 	bl	1d9c0 <sys_put_le32>
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   1da5e:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
   1da62:	f104 0112 	add.w	r1, r4, #18
   1da66:	f7ff ffab 	bl	1d9c0 <sys_put_le32>
		} else {
			/* Mark IR as invalid */
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
		}

		return 1;
   1da6a:	2001      	movs	r0, #1
	}

	return 0;
}
   1da6c:	bd10      	pop	{r4, pc}
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   1da6e:	2210      	movs	r2, #16
   1da70:	2100      	movs	r1, #0
   1da72:	4618      	mov	r0, r3
   1da74:	f7fc fc0e 	bl	1a294 <memset>
   1da78:	e7f7      	b.n	1da6a <hci_vendor_read_static_addr+0x98>
	return 0;
   1da7a:	2000      	movs	r0, #0
   1da7c:	e7f6      	b.n	1da6c <hci_vendor_read_static_addr+0x9a>

0001da7e <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   1da7e:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   1da80:	2210      	movs	r2, #16
{
   1da82:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   1da84:	2100      	movs	r1, #0
   1da86:	f7fc fc05 	bl	1a294 <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1da8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1da8e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   1da92:	3301      	adds	r3, #1
   1da94:	d023      	beq.n	1dade <hci_vendor_read_key_hierarchy_roots+0x60>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1da96:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1da9a:	3301      	adds	r3, #1
   1da9c:	d01f      	beq.n	1dade <hci_vendor_read_key_hierarchy_roots+0x60>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1da9e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1daa2:	3301      	adds	r3, #1
   1daa4:	d01b      	beq.n	1dade <hci_vendor_read_key_hierarchy_roots+0x60>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   1daa6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1daaa:	3301      	adds	r3, #1
   1daac:	d017      	beq.n	1dade <hci_vendor_read_key_hierarchy_roots+0x60>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   1daae:	4621      	mov	r1, r4
   1dab0:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
   1dab4:	f7ff ff84 	bl	1d9c0 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   1dab8:	1d21      	adds	r1, r4, #4
   1daba:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
   1dabe:	f7ff ff7f 	bl	1d9c0 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   1dac2:	f104 0108 	add.w	r1, r4, #8
   1dac6:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
   1daca:	f7ff ff79 	bl	1d9c0 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   1dace:	f104 010c 	add.w	r1, r4, #12
   1dad2:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   1dad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   1dada:	f7ff bf71 	b.w	1d9c0 <sys_put_le32>
		(void)memset(er, 0x00, 16);
   1dade:	4620      	mov	r0, r4
   1dae0:	2210      	movs	r2, #16
}
   1dae2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   1dae6:	2100      	movs	r1, #0
   1dae8:	f7fc bbd4 	b.w	1a294 <memset>

0001daec <sys_put_be32>:
	sys_put_be16(val >> 16, dst);
   1daec:	0c03      	lsrs	r3, r0, #16
	dst[0] = val >> 8;
   1daee:	0e02      	lsrs	r2, r0, #24
	dst[1] = val;
   1daf0:	704b      	strb	r3, [r1, #1]
	dst[0] = val >> 8;
   1daf2:	f3c0 2307 	ubfx	r3, r0, #8, #8
   1daf6:	700a      	strb	r2, [r1, #0]
   1daf8:	708b      	strb	r3, [r1, #2]
	dst[1] = val;
   1dafa:	70c8      	strb	r0, [r1, #3]
}
   1dafc:	4770      	bx	lr

0001dafe <fixed_data_unref>:
}
   1dafe:	4770      	bx	lr

0001db00 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1db00:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1db02:	6849      	ldr	r1, [r1, #4]
   1db04:	6809      	ldr	r1, [r1, #0]
   1db06:	f7f7 bdc1 	b.w	1568c <net_buf_alloc_len>

0001db0a <net_buf_get>:
{
   1db0a:	b570      	push	{r4, r5, r6, lr}
   1db0c:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   1db0e:	f7f9 ff6f 	bl	179f0 <z_impl_k_queue_get>
	if (!buf) {
   1db12:	4605      	mov	r5, r0
   1db14:	b128      	cbz	r0, 1db22 <net_buf_get+0x18>
   1db16:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1db18:	7963      	ldrb	r3, [r4, #5]
   1db1a:	f013 0301 	ands.w	r3, r3, #1
   1db1e:	d102      	bne.n	1db26 <net_buf_get+0x1c>
	frag->frags = NULL;
   1db20:	6023      	str	r3, [r4, #0]
}
   1db22:	4628      	mov	r0, r5
   1db24:	bd70      	pop	{r4, r5, r6, pc}
   1db26:	2300      	movs	r3, #0
   1db28:	2200      	movs	r2, #0
   1db2a:	4630      	mov	r0, r6
   1db2c:	f7f9 ff60 	bl	179f0 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   1db30:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1db32:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   1db34:	f023 0301 	bic.w	r3, r3, #1
   1db38:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1db3a:	4604      	mov	r4, r0
   1db3c:	e7ec      	b.n	1db18 <net_buf_get+0xe>

0001db3e <net_buf_simple_init_with_data>:
	buf->size  = size;
   1db3e:	b292      	uxth	r2, r2
	buf->__buf = data;
   1db40:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   1db42:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   1db44:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   1db46:	8082      	strh	r2, [r0, #4]
}
   1db48:	4770      	bx	lr

0001db4a <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   1db4a:	6883      	ldr	r3, [r0, #8]
   1db4c:	440b      	add	r3, r1
   1db4e:	6003      	str	r3, [r0, #0]
}
   1db50:	4770      	bx	lr

0001db52 <net_buf_slist_put>:
{
   1db52:	b510      	push	{r4, lr}
	for (tail = buf; tail->frags; tail = tail->frags) {
   1db54:	460b      	mov	r3, r1
   1db56:	681c      	ldr	r4, [r3, #0]
   1db58:	b984      	cbnz	r4, 1db7c <net_buf_slist_put+0x2a>
	__asm__ volatile(
   1db5a:	f04f 0220 	mov.w	r2, #32
   1db5e:	f3ef 8411 	mrs	r4, BASEPRI
   1db62:	f382 8812 	msr	BASEPRI_MAX, r2
   1db66:	f3bf 8f6f 	isb	sy
	return list->tail;
   1db6a:	6842      	ldr	r2, [r0, #4]
Z_GENLIST_APPEND_LIST(slist, snode)
   1db6c:	b962      	cbnz	r2, 1db88 <net_buf_slist_put+0x36>
	list->head = node;
   1db6e:	6001      	str	r1, [r0, #0]
	list->tail = node;
   1db70:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   1db72:	f384 8811 	msr	BASEPRI, r4
   1db76:	f3bf 8f6f 	isb	sy
}
   1db7a:	bd10      	pop	{r4, pc}
		tail->flags |= NET_BUF_FRAGS;
   1db7c:	795a      	ldrb	r2, [r3, #5]
   1db7e:	f042 0201 	orr.w	r2, r2, #1
   1db82:	715a      	strb	r2, [r3, #5]
   1db84:	4623      	mov	r3, r4
   1db86:	e7e6      	b.n	1db56 <net_buf_slist_put+0x4>
	parent->next = child;
   1db88:	6011      	str	r1, [r2, #0]
}
   1db8a:	e7f1      	b.n	1db70 <net_buf_slist_put+0x1e>

0001db8c <net_buf_put>:
{
   1db8c:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   1db8e:	460a      	mov	r2, r1
   1db90:	6814      	ldr	r4, [r2, #0]
   1db92:	b914      	cbnz	r4, 1db9a <net_buf_put+0xe>
}
   1db94:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   1db96:	f000 bc6f 	b.w	1e478 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1db9a:	7953      	ldrb	r3, [r2, #5]
   1db9c:	f043 0301 	orr.w	r3, r3, #1
   1dba0:	7153      	strb	r3, [r2, #5]
   1dba2:	4622      	mov	r2, r4
   1dba4:	e7f4      	b.n	1db90 <net_buf_put+0x4>

0001dba6 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1dba6:	7902      	ldrb	r2, [r0, #4]
   1dba8:	3201      	adds	r2, #1
   1dbaa:	7102      	strb	r2, [r0, #4]
	return buf;
}
   1dbac:	4770      	bx	lr

0001dbae <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1dbae:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   1dbb0:	4618      	mov	r0, r3
   1dbb2:	681b      	ldr	r3, [r3, #0]
   1dbb4:	2b00      	cmp	r3, #0
   1dbb6:	d1fb      	bne.n	1dbb0 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   1dbb8:	4770      	bx	lr

0001dbba <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   1dbba:	6802      	ldr	r2, [r0, #0]
{
   1dbbc:	b510      	push	{r4, lr}
	if (parent->frags) {
   1dbbe:	b12a      	cbz	r2, 1dbcc <net_buf_frag_insert+0x12>
   1dbc0:	460b      	mov	r3, r1
	while (buf->frags) {
   1dbc2:	461c      	mov	r4, r3
   1dbc4:	681b      	ldr	r3, [r3, #0]
   1dbc6:	2b00      	cmp	r3, #0
   1dbc8:	d1fb      	bne.n	1dbc2 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   1dbca:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1dbcc:	6001      	str	r1, [r0, #0]
}
   1dbce:	bd10      	pop	{r4, pc}

0001dbd0 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1dbd0:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   1dbd2:	4604      	mov	r4, r0
   1dbd4:	b920      	cbnz	r0, 1dbe0 <net_buf_frag_add+0x10>
	buf->ref++;
   1dbd6:	790b      	ldrb	r3, [r1, #4]
   1dbd8:	3301      	adds	r3, #1
   1dbda:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   1dbdc:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1dbde:	bd10      	pop	{r4, pc}
   1dbe0:	4603      	mov	r3, r0
	while (buf->frags) {
   1dbe2:	4618      	mov	r0, r3
   1dbe4:	681b      	ldr	r3, [r3, #0]
   1dbe6:	2b00      	cmp	r3, #0
   1dbe8:	d1fb      	bne.n	1dbe2 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1dbea:	f7ff ffe6 	bl	1dbba <net_buf_frag_insert>
   1dbee:	4620      	mov	r0, r4
   1dbf0:	e7f5      	b.n	1dbde <net_buf_frag_add+0xe>

0001dbf2 <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   1dbf2:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	__ASSERT_NO_MSG(frag);

	if (parent) {
   1dbf4:	b108      	cbz	r0, 1dbfa <net_buf_frag_del+0x8>
		__ASSERT_NO_MSG(parent->frags);
		__ASSERT_NO_MSG(parent->frags == frag);
		parent->frags = frag->frags;
   1dbf6:	680b      	ldr	r3, [r1, #0]
   1dbf8:	6003      	str	r3, [r0, #0]
	}

	next_frag = frag->frags;
   1dbfa:	680c      	ldr	r4, [r1, #0]

	frag->frags = NULL;
   1dbfc:	2300      	movs	r3, #0

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   1dbfe:	4608      	mov	r0, r1
	frag->frags = NULL;
   1dc00:	600b      	str	r3, [r1, #0]
	net_buf_unref(frag);
   1dc02:	f7f7 fdd1 	bl	157a8 <net_buf_unref>
#endif

	return next_frag;
}
   1dc06:	4620      	mov	r0, r4
   1dc08:	bd10      	pop	{r4, pc}

0001dc0a <net_buf_simple_add>:
	return buf->data + buf->len;
   1dc0a:	8883      	ldrh	r3, [r0, #4]
   1dc0c:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1dc0e:	4419      	add	r1, r3
   1dc10:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1dc12:	18d0      	adds	r0, r2, r3
   1dc14:	4770      	bx	lr

0001dc16 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1dc16:	b430      	push	{r4, r5}
   1dc18:	8884      	ldrh	r4, [r0, #4]
   1dc1a:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   1dc1c:	18a3      	adds	r3, r4, r2
   1dc1e:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1dc20:	1928      	adds	r0, r5, r4
}
   1dc22:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1dc24:	f7fc bb2b 	b.w	1a27e <memcpy>

0001dc28 <net_buf_simple_add_u8>:
   1dc28:	8883      	ldrh	r3, [r0, #4]
   1dc2a:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   1dc2c:	b510      	push	{r4, lr}
	buf->len += len;
   1dc2e:	1c5c      	adds	r4, r3, #1
   1dc30:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   1dc32:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   1dc34:	18d0      	adds	r0, r2, r3
   1dc36:	bd10      	pop	{r4, pc}

0001dc38 <net_buf_simple_add_be16>:
   1dc38:	8883      	ldrh	r3, [r0, #4]
   1dc3a:	6802      	ldr	r2, [r0, #0]

	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
}

void net_buf_simple_add_be16(struct net_buf_simple *buf, uint16_t val)
{
   1dc3c:	b530      	push	{r4, r5, lr}
	buf->len += len;
   1dc3e:	1c9d      	adds	r5, r3, #2
   1dc40:	8085      	strh	r5, [r0, #4]
   1dc42:	18d4      	adds	r4, r2, r3
	dst[0] = val >> 8;
   1dc44:	0a08      	lsrs	r0, r1, #8
   1dc46:	54d0      	strb	r0, [r2, r3]
	dst[1] = val;
   1dc48:	7061      	strb	r1, [r4, #1]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_be16(val, net_buf_simple_add(buf, sizeof(val)));
}
   1dc4a:	bd30      	pop	{r4, r5, pc}

0001dc4c <net_buf_simple_add_be32>:

	sys_put_le32(val, net_buf_simple_add(buf, sizeof(val)));
}

void net_buf_simple_add_be32(struct net_buf_simple *buf, uint32_t val)
{
   1dc4c:	4603      	mov	r3, r0
   1dc4e:	4608      	mov	r0, r1
   1dc50:	889a      	ldrh	r2, [r3, #4]
   1dc52:	6819      	ldr	r1, [r3, #0]
   1dc54:	b410      	push	{r4}
	buf->len += len;
   1dc56:	1d14      	adds	r4, r2, #4
   1dc58:	809c      	strh	r4, [r3, #4]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_be32(val, net_buf_simple_add(buf, sizeof(val)));
   1dc5a:	4411      	add	r1, r2
}
   1dc5c:	bc10      	pop	{r4}
	sys_put_be32(val, net_buf_simple_add(buf, sizeof(val)));
   1dc5e:	f7ff bf45 	b.w	1daec <sys_put_be32>

0001dc62 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1dc62:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1dc64:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   1dc66:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   1dc68:	1a40      	subs	r0, r0, r1
	buf->len += len;
   1dc6a:	4411      	add	r1, r2
	buf->data -= len;
   1dc6c:	6018      	str	r0, [r3, #0]
	buf->len += len;
   1dc6e:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   1dc70:	4770      	bx	lr

0001dc72 <net_buf_simple_push_be16>:
	buf->data -= len;
   1dc72:	6803      	ldr	r3, [r0, #0]
   1dc74:	1e9a      	subs	r2, r3, #2
   1dc76:	6002      	str	r2, [r0, #0]
	buf->len += len;
   1dc78:	8882      	ldrh	r2, [r0, #4]
   1dc7a:	3202      	adds	r2, #2
   1dc7c:	8082      	strh	r2, [r0, #4]
	dst[0] = val >> 8;
   1dc7e:	0a0a      	lsrs	r2, r1, #8
   1dc80:	f803 2c02 	strb.w	r2, [r3, #-2]
	dst[1] = val;
   1dc84:	f803 1c01 	strb.w	r1, [r3, #-1]
void net_buf_simple_push_be16(struct net_buf_simple *buf, uint16_t val)
{
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_be16(val, net_buf_simple_push(buf, sizeof(val)));
}
   1dc88:	4770      	bx	lr

0001dc8a <net_buf_simple_push_u8>:
	buf->data -= len;
   1dc8a:	6802      	ldr	r2, [r0, #0]
   1dc8c:	1e53      	subs	r3, r2, #1
   1dc8e:	6003      	str	r3, [r0, #0]
	buf->len += len;
   1dc90:	8883      	ldrh	r3, [r0, #4]
   1dc92:	3301      	adds	r3, #1
   1dc94:	8083      	strh	r3, [r0, #4]

void net_buf_simple_push_u8(struct net_buf_simple *buf, uint8_t val)
{
	uint8_t *data = net_buf_simple_push(buf, 1);

	*data = val;
   1dc96:	f802 1c01 	strb.w	r1, [r2, #-1]
}
   1dc9a:	4770      	bx	lr

0001dc9c <net_buf_simple_push_be24>:
	buf->data -= len;
   1dc9c:	6803      	ldr	r3, [r0, #0]
   1dc9e:	1eda      	subs	r2, r3, #3
   1dca0:	6002      	str	r2, [r0, #0]
	buf->len += len;
   1dca2:	8882      	ldrh	r2, [r0, #4]
   1dca4:	3203      	adds	r2, #3
   1dca6:	8082      	strh	r2, [r0, #4]
	dst[0] = val >> 16;
   1dca8:	0c0a      	lsrs	r2, r1, #16
   1dcaa:	f803 2c03 	strb.w	r2, [r3, #-3]
	dst[0] = val >> 8;
   1dcae:	f3c1 2207 	ubfx	r2, r1, #8, #8
   1dcb2:	f803 2c02 	strb.w	r2, [r3, #-2]
	dst[1] = val;
   1dcb6:	f803 1c01 	strb.w	r1, [r3, #-1]
void net_buf_simple_push_be24(struct net_buf_simple *buf, uint32_t val)
{
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_be24(val, net_buf_simple_push(buf, 3));
}
   1dcba:	4770      	bx	lr

0001dcbc <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1dcbc:	8882      	ldrh	r2, [r0, #4]
   1dcbe:	1a52      	subs	r2, r2, r1
{
   1dcc0:	4603      	mov	r3, r0
	buf->len -= len;
   1dcc2:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1dcc4:	6800      	ldr	r0, [r0, #0]
   1dcc6:	4408      	add	r0, r1
   1dcc8:	6018      	str	r0, [r3, #0]
}
   1dcca:	4770      	bx	lr

0001dccc <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   1dccc:	4603      	mov	r3, r0
	void *data = buf->data;
   1dcce:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1dcd0:	889a      	ldrh	r2, [r3, #4]
   1dcd2:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1dcd4:	4401      	add	r1, r0
	buf->len -= len;
   1dcd6:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1dcd8:	6019      	str	r1, [r3, #0]

	return data;
}
   1dcda:	4770      	bx	lr

0001dcdc <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   1dcdc:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   1dcde:	6803      	ldr	r3, [r0, #0]
   1dce0:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1dce2:	2101      	movs	r1, #1
   1dce4:	f7ff ffea 	bl	1dcbc <net_buf_simple_pull>

	return val;
}
   1dce8:	4620      	mov	r0, r4
   1dcea:	bd10      	pop	{r4, pc}

0001dcec <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   1dcec:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   1dcee:	6803      	ldr	r3, [r0, #0]
   1dcf0:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1dcf2:	2102      	movs	r1, #2
   1dcf4:	f7ff ffe2 	bl	1dcbc <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   1dcf8:	4620      	mov	r0, r4
   1dcfa:	bd10      	pop	{r4, pc}

0001dcfc <net_buf_simple_pull_be16>:

uint16_t net_buf_simple_pull_be16(struct net_buf_simple *buf)
{
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   1dcfc:	6803      	ldr	r3, [r0, #0]
{
   1dcfe:	b510      	push	{r4, lr}
   1dd00:	881c      	ldrh	r4, [r3, #0]
   1dd02:	ba64      	rev16	r4, r4
   1dd04:	b2a4      	uxth	r4, r4
	net_buf_simple_pull(buf, sizeof(val));
   1dd06:	2102      	movs	r1, #2
   1dd08:	f7ff ffd8 	bl	1dcbc <net_buf_simple_pull>

	return sys_be16_to_cpu(val);
}
   1dd0c:	4620      	mov	r0, r4
   1dd0e:	bd10      	pop	{r4, pc}

0001dd10 <net_buf_simple_pull_be32>:

	return sys_le32_to_cpu(val);
}

uint32_t net_buf_simple_pull_be32(struct net_buf_simple *buf)
{
   1dd10:	b510      	push	{r4, lr}
   1dd12:	6803      	ldr	r3, [r0, #0]
   1dd14:	681c      	ldr	r4, [r3, #0]
	uint32_t val;

	val = UNALIGNED_GET((uint32_t *)buf->data);
	net_buf_simple_pull(buf, sizeof(val));
   1dd16:	2104      	movs	r1, #4
   1dd18:	ba24      	rev	r4, r4
   1dd1a:	f7ff ffcf 	bl	1dcbc <net_buf_simple_pull>

	return sys_be32_to_cpu(val);
}
   1dd1e:	4620      	mov	r0, r4
   1dd20:	bd10      	pop	{r4, pc}

0001dd22 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1dd22:	6802      	ldr	r2, [r0, #0]
   1dd24:	6880      	ldr	r0, [r0, #8]
}
   1dd26:	1a10      	subs	r0, r2, r0
   1dd28:	4770      	bx	lr

0001dd2a <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1dd2a:	8883      	ldrh	r3, [r0, #4]
   1dd2c:	88c2      	ldrh	r2, [r0, #6]
   1dd2e:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   1dd30:	6803      	ldr	r3, [r0, #0]
   1dd32:	6880      	ldr	r0, [r0, #8]
   1dd34:	1a18      	subs	r0, r3, r0
}
   1dd36:	1a10      	subs	r0, r2, r0
   1dd38:	4770      	bx	lr

0001dd3a <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1dd3a:	6903      	ldr	r3, [r0, #16]
   1dd3c:	b2c9      	uxtb	r1, r1
   1dd3e:	220c      	movs	r2, #12
   1dd40:	fb01 3302 	mla	r3, r1, r2, r3
   1dd44:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   1dd46:	f000 0007 	and.w	r0, r0, #7
   1dd4a:	4770      	bx	lr

0001dd4c <set_on_state>:
	__asm__ volatile(
   1dd4c:	f04f 0320 	mov.w	r3, #32
   1dd50:	f3ef 8211 	mrs	r2, BASEPRI
   1dd54:	f383 8812 	msr	BASEPRI_MAX, r3
   1dd58:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1dd5c:	6803      	ldr	r3, [r0, #0]
   1dd5e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1dd62:	f043 0302 	orr.w	r3, r3, #2
   1dd66:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1dd68:	f382 8811 	msr	BASEPRI, r2
   1dd6c:	f3bf 8f6f 	isb	sy
}
   1dd70:	4770      	bx	lr

0001dd72 <stop>:
{
   1dd72:	4603      	mov	r3, r0
   1dd74:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   1dd76:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   1dd78:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1dd7a:	f04f 0420 	mov.w	r4, #32
   1dd7e:	f3ef 8611 	mrs	r6, BASEPRI
   1dd82:	f384 8812 	msr	BASEPRI_MAX, r4
   1dd86:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1dd8a:	250c      	movs	r5, #12
   1dd8c:	fb05 0401 	mla	r4, r5, r1, r0
   1dd90:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1dd92:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   1dd96:	d001      	beq.n	1dd9c <stop+0x2a>
   1dd98:	42a2      	cmp	r2, r4
   1dd9a:	d111      	bne.n	1ddc0 <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1dd9c:	fb05 0001 	mla	r0, r5, r1, r0
   1dda0:	2201      	movs	r2, #1
   1dda2:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
   1dda4:	2000      	movs	r0, #0
	__asm__ volatile(
   1dda6:	f386 8811 	msr	BASEPRI, r6
   1ddaa:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   1ddae:	b930      	cbnz	r0, 1ddbe <stop+0x4c>
	get_sub_config(dev, type)->stop();
   1ddb0:	685b      	ldr	r3, [r3, #4]
   1ddb2:	220c      	movs	r2, #12
   1ddb4:	fb02 3101 	mla	r1, r2, r1, r3
   1ddb8:	684b      	ldr	r3, [r1, #4]
   1ddba:	4798      	blx	r3
	return 0;
   1ddbc:	2000      	movs	r0, #0
}
   1ddbe:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   1ddc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ddc4:	e7ef      	b.n	1dda6 <stop+0x34>

0001ddc6 <api_stop>:
	return stop(dev, subsys, CTX_API);
   1ddc6:	2280      	movs	r2, #128	; 0x80
   1ddc8:	f7ff bfd3 	b.w	1dd72 <stop>

0001ddcc <async_start>:
{
   1ddcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ddce:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   1ddd0:	6904      	ldr	r4, [r0, #16]
{
   1ddd2:	4605      	mov	r5, r0
   1ddd4:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1ddd6:	f04f 0020 	mov.w	r0, #32
   1ddda:	f3ef 8c11 	mrs	ip, BASEPRI
   1ddde:	f380 8812 	msr	BASEPRI_MAX, r0
   1dde2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1dde6:	260c      	movs	r6, #12
   1dde8:	fb06 4601 	mla	r6, r6, r1, r4
   1ddec:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1ddee:	f000 0e07 	and.w	lr, r0, #7
   1ddf2:	f1be 0f01 	cmp.w	lr, #1
   1ddf6:	d110      	bne.n	1de1a <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1ddf8:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
   1ddfa:	2600      	movs	r6, #0
	__asm__ volatile(
   1ddfc:	f38c 8811 	msr	BASEPRI, ip
   1de00:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   1de04:	b93e      	cbnz	r6, 1de16 <async_start+0x4a>
	subdata->cb = cb;
   1de06:	200c      	movs	r0, #12
   1de08:	4341      	muls	r1, r0
   1de0a:	440c      	add	r4, r1
	subdata->user_data = user_data;
   1de0c:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   1de10:	686b      	ldr	r3, [r5, #4]
   1de12:	585b      	ldr	r3, [r3, r1]
   1de14:	4798      	blx	r3
}
   1de16:	4630      	mov	r0, r6
   1de18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1de1a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   1de1e:	4287      	cmp	r7, r0
   1de20:	bf14      	ite	ne
   1de22:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
   1de26:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   1de2a:	e7e7      	b.n	1ddfc <async_start+0x30>

0001de2c <api_start>:
{
   1de2c:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1de2e:	2480      	movs	r4, #128	; 0x80
   1de30:	9400      	str	r4, [sp, #0]
   1de32:	f7ff ffcb 	bl	1ddcc <async_start>
}
   1de36:	b002      	add	sp, #8
   1de38:	bd10      	pop	{r4, pc}

0001de3a <onoff_started_callback>:
	return &data->mgr[type];
   1de3a:	6900      	ldr	r0, [r0, #16]
{
   1de3c:	b410      	push	{r4}
	return &data->mgr[type];
   1de3e:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1de40:	241c      	movs	r4, #28
   1de42:	fb03 0004 	mla	r0, r3, r4, r0
   1de46:	2100      	movs	r1, #0
}
   1de48:	bc10      	pop	{r4}
	notify(mgr, 0);
   1de4a:	4710      	bx	r2

0001de4c <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1de4c:	2000      	movs	r0, #0
   1de4e:	f7f9 b867 	b.w	16f20 <nrfx_clock_stop>

0001de52 <blocking_start_callback>:
{
   1de52:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1de54:	f7f9 be00 	b.w	17a58 <z_impl_k_sem_give>

0001de58 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   1de58:	f000 001f 	and.w	r0, r0, #31
   1de5c:	0080      	lsls	r0, r0, #2
   1de5e:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1de62:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
   1de66:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1de6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1de6e:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
   1de72:	4770      	bx	lr

0001de74 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1de74:	6843      	ldr	r3, [r0, #4]
   1de76:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1de78:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   1de7c:	600b      	str	r3, [r1, #0]
}
   1de7e:	2000      	movs	r0, #0
   1de80:	4770      	bx	lr

0001de82 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1de82:	6843      	ldr	r3, [r0, #4]
   1de84:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1de86:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1de8a:	4042      	eors	r2, r0
   1de8c:	400a      	ands	r2, r1
   1de8e:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1de90:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1de94:	2000      	movs	r0, #0
   1de96:	4770      	bx	lr

0001de98 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1de98:	6843      	ldr	r3, [r0, #4]
   1de9a:	685b      	ldr	r3, [r3, #4]
}
   1de9c:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   1de9e:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1dea2:	4770      	bx	lr

0001dea4 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1dea4:	6843      	ldr	r3, [r0, #4]
   1dea6:	685b      	ldr	r3, [r3, #4]
}
   1dea8:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1deaa:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   1deae:	4770      	bx	lr

0001deb0 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1deb0:	6843      	ldr	r3, [r0, #4]
   1deb2:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1deb4:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   1deb8:	404b      	eors	r3, r1
    p_reg->OUT = value;
   1deba:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   1debe:	2000      	movs	r0, #0
   1dec0:	4770      	bx	lr

0001dec2 <gpio_nrfx_manage_callback>:
	return port->data;
   1dec2:	6903      	ldr	r3, [r0, #16]
	return list->head;
   1dec4:	6858      	ldr	r0, [r3, #4]
{
   1dec6:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   1dec8:	b158      	cbz	r0, 1dee2 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1deca:	2400      	movs	r4, #0
   1decc:	4281      	cmp	r1, r0
   1dece:	d112      	bne.n	1def6 <gpio_nrfx_manage_callback+0x34>
	return node->next;
   1ded0:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   1ded2:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   1ded4:	b954      	cbnz	r4, 1deec <gpio_nrfx_manage_callback+0x2a>
   1ded6:	428d      	cmp	r5, r1
	list->head = node;
   1ded8:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1deda:	d100      	bne.n	1dede <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   1dedc:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1dede:	2000      	movs	r0, #0
   1dee0:	6008      	str	r0, [r1, #0]
	if (set) {
   1dee2:	b96a      	cbnz	r2, 1df00 <gpio_nrfx_manage_callback+0x3e>
	return 0;
   1dee4:	2000      	movs	r0, #0
}
   1dee6:	bd30      	pop	{r4, r5, pc}
   1dee8:	4628      	mov	r0, r5
   1deea:	e7ef      	b.n	1decc <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   1deec:	428d      	cmp	r5, r1
	parent->next = child;
   1deee:	6020      	str	r0, [r4, #0]
	list->tail = node;
   1def0:	bf08      	it	eq
   1def2:	609c      	streq	r4, [r3, #8]
}
   1def4:	e7f3      	b.n	1dede <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   1def6:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1def8:	4604      	mov	r4, r0
   1defa:	2d00      	cmp	r5, #0
   1defc:	d1f4      	bne.n	1dee8 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   1defe:	b13a      	cbz	r2, 1df10 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
   1df00:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   1df02:	685a      	ldr	r2, [r3, #4]
   1df04:	600a      	str	r2, [r1, #0]
	list->head = node;
   1df06:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1df08:	2800      	cmp	r0, #0
   1df0a:	d1eb      	bne.n	1dee4 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   1df0c:	6099      	str	r1, [r3, #8]
}
   1df0e:	e7ea      	b.n	1dee6 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   1df10:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1df14:	e7e7      	b.n	1dee6 <gpio_nrfx_manage_callback+0x24>

0001df16 <is_regular_addr_valid>:
{
   1df16:	b538      	push	{r3, r4, r5, lr}
   1df18:	4604      	mov	r4, r0
   1df1a:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   1df1c:	f000 f8be 	bl	1e09c <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   1df20:	4284      	cmp	r4, r0
   1df22:	d209      	bcs.n	1df38 <is_regular_addr_valid+0x22>
   1df24:	2c00      	cmp	r4, #0
   1df26:	db07      	blt.n	1df38 <is_regular_addr_valid+0x22>
	    addr < 0 ||
   1df28:	42a8      	cmp	r0, r5
   1df2a:	d305      	bcc.n	1df38 <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   1df2c:	442c      	add	r4, r5
	    len > flash_size ||
   1df2e:	4284      	cmp	r4, r0
   1df30:	bf8c      	ite	hi
   1df32:	2000      	movhi	r0, #0
   1df34:	2001      	movls	r0, #1
}
   1df36:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1df38:	2000      	movs	r0, #0
   1df3a:	e7fc      	b.n	1df36 <is_regular_addr_valid+0x20>

0001df3c <erase_op>:
{
   1df3c:	b570      	push	{r4, r5, r6, lr}
   1df3e:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1df40:	f000 f8b2 	bl	1e0a8 <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   1df44:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1df46:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   1df48:	b10b      	cbz	r3, 1df4e <erase_op+0x12>
		nrf_flash_sync_get_timestamp_begin();
   1df4a:	f7f8 fa07 	bl	1635c <nrf_flash_sync_get_timestamp_begin>
{
   1df4e:	2600      	movs	r6, #0
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   1df50:	6860      	ldr	r0, [r4, #4]
   1df52:	f7f9 f8b9 	bl	170c8 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   1df56:	68a3      	ldr	r3, [r4, #8]
   1df58:	1b5b      	subs	r3, r3, r5
   1df5a:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   1df5c:	6863      	ldr	r3, [r4, #4]
   1df5e:	442b      	add	r3, r5
   1df60:	6063      	str	r3, [r4, #4]
		if (e_ctx->enable_time_limit) {
   1df62:	7b23      	ldrb	r3, [r4, #12]
		i++;
   1df64:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   1df66:	b93b      	cbnz	r3, 1df78 <erase_op+0x3c>
	} while (e_ctx->len > 0);
   1df68:	68a3      	ldr	r3, [r4, #8]
   1df6a:	2b00      	cmp	r3, #0
   1df6c:	d1f0      	bne.n	1df50 <erase_op+0x14>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   1df6e:	68a0      	ldr	r0, [r4, #8]
}
   1df70:	3800      	subs	r0, #0
   1df72:	bf18      	it	ne
   1df74:	2001      	movne	r0, #1
   1df76:	bd70      	pop	{r4, r5, r6, pc}
			if (nrf_flash_sync_check_time_limit(i)) {
   1df78:	4630      	mov	r0, r6
   1df7a:	f7e3 fc69 	bl	1850 <nrf_flash_sync_check_time_limit>
   1df7e:	2800      	cmp	r0, #0
   1df80:	d0f2      	beq.n	1df68 <erase_op+0x2c>
   1df82:	e7f4      	b.n	1df6e <erase_op+0x32>

0001df84 <nrf_flash_sync_is_required>:
	return ticker_is_initialized(0);
   1df84:	2000      	movs	r0, #0
   1df86:	f7f0 bf69 	b.w	ee5c <ticker_is_initialized>

0001df8a <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   1df8a:	6902      	ldr	r2, [r0, #16]
{
   1df8c:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1df8e:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1df92:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1df96:	2000      	movs	r0, #0
   1df98:	4770      	bx	lr

0001df9a <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1df9a:	6843      	ldr	r3, [r0, #4]
   1df9c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1df9e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1dfa2:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1dfa6:	4770      	bx	lr

0001dfa8 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1dfa8:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   1dfaa:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   1dfac:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dfae:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1dfb2:	b148      	cbz	r0, 1dfc8 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   1dfb4:	7c52      	ldrb	r2, [r2, #17]
   1dfb6:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dfb8:	2000      	movs	r0, #0
   1dfba:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1dfbe:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dfc2:	2201      	movs	r2, #1
   1dfc4:	601a      	str	r2, [r3, #0]
	return 0;
   1dfc6:	4770      	bx	lr
		return -1;
   1dfc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1dfcc:	4770      	bx	lr

0001dfce <is_tx_ready.isra.0>:
	return config->uarte_regs;
   1dfce:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   1dfd0:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dfd2:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1dfd6:	b940      	cbnz	r0, 1dfea <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   1dfd8:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1dfda:	071b      	lsls	r3, r3, #28
   1dfdc:	d406      	bmi.n	1dfec <is_tx_ready.isra.0+0x1e>
   1dfde:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   1dfe2:	3800      	subs	r0, #0
   1dfe4:	bf18      	it	ne
   1dfe6:	2001      	movne	r0, #1
   1dfe8:	4770      	bx	lr
   1dfea:	2001      	movs	r0, #1
}
   1dfec:	4770      	bx	lr

0001dfee <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   1dfee:	6843      	ldr	r3, [r0, #4]
   1dff0:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   1dff2:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1dff6:	05d1      	lsls	r1, r2, #23
   1dff8:	d518      	bpl.n	1e02c <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dffa:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   1dffe:	b1aa      	cbz	r2, 1e02c <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   1e000:	f04f 0120 	mov.w	r1, #32
   1e004:	f3ef 8211 	mrs	r2, BASEPRI
   1e008:	f381 8812 	msr	BASEPRI_MAX, r1
   1e00c:	f3bf 8f6f 	isb	sy
   1e010:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1e014:	b131      	cbz	r1, 1e024 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e016:	2100      	movs	r1, #0
   1e018:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1e01c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e020:	2101      	movs	r1, #1
   1e022:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1e024:	f382 8811 	msr	BASEPRI, r2
   1e028:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1e02c:	6842      	ldr	r2, [r0, #4]
   1e02e:	6852      	ldr	r2, [r2, #4]
   1e030:	06d2      	lsls	r2, r2, #27
   1e032:	d515      	bpl.n	1e060 <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
   1e034:	f04f 0120 	mov.w	r1, #32
   1e038:	f3ef 8211 	mrs	r2, BASEPRI
   1e03c:	f381 8812 	msr	BASEPRI_MAX, r1
   1e040:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e044:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1e048:	b111      	cbz	r1, 1e050 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1e04a:	2100      	movs	r1, #0
   1e04c:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   1e050:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1e054:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   1e058:	f382 8811 	msr	BASEPRI, r2
   1e05c:	f3bf 8f6f 	isb	sy
}
   1e060:	4770      	bx	lr

0001e062 <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   1e062:	4770      	bx	lr

0001e064 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1e064:	4770      	bx	lr

0001e066 <nrf52_errata_108>:
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1e066:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e06a:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   1e06e:	1c42      	adds	r2, r0, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1e070:	bf04      	itt	eq
   1e072:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
   1e076:	f893 0fe0 	ldrbeq.w	r0, [r3, #4064]	; 0xfe0
}
   1e07a:	1f83      	subs	r3, r0, #6
   1e07c:	4258      	negs	r0, r3
   1e07e:	4158      	adcs	r0, r3
   1e080:	4770      	bx	lr

0001e082 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1e082:	4700      	bx	r0

0001e084 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1e084:	f000 bc9c 	b.w	1e9c0 <z_impl_k_busy_wait>

0001e088 <nrfx_clock_enable>:
{
   1e088:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1e08a:	2000      	movs	r0, #0
   1e08c:	f7e5 f992 	bl	33b4 <arch_irq_is_enabled>
   1e090:	b918      	cbnz	r0, 1e09a <nrfx_clock_enable+0x12>
}
   1e092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1e096:	f7e5 b969 	b.w	336c <arch_irq_enable>
   1e09a:	bd08      	pop	{r3, pc}

0001e09c <nrfx_nvmc_flash_size_get>:
   1e09c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e0a0:	691a      	ldr	r2, [r3, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   1e0a2:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   1e0a4:	4350      	muls	r0, r2
   1e0a6:	4770      	bx	lr

0001e0a8 <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   1e0a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e0ac:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   1e0ae:	4770      	bx	lr

0001e0b0 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   1e0b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e0b4:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   1e0b6:	4770      	bx	lr

0001e0b8 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   1e0b8:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   1e0ba:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   1e0bc:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1e0be:	bf9c      	itt	ls
   1e0c0:	6880      	ldrls	r0, [r0, #8]
   1e0c2:	181b      	addls	r3, r3, r0
    r = RdOff - WrOff - 1u;
   1e0c4:	3b01      	subs	r3, #1
   1e0c6:	1a98      	subs	r0, r3, r2
}
   1e0c8:	4770      	bx	lr

0001e0ca <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1e0ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   1e0ce:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1e0d2:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   1e0d4:	eba9 0804 	sub.w	r8, r9, r4
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1e0d8:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
   1e0da:	4590      	cmp	r8, r2
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1e0dc:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1e0de:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
   1e0e0:	4414      	add	r4, r2
  if (Rem > NumBytes) {
   1e0e2:	d904      	bls.n	1e0ee <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   1e0e4:	f7fc f8cb 	bl	1a27e <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   1e0e8:	60ec      	str	r4, [r5, #12]
}
   1e0ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   1e0ee:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
   1e0f0:	eba4 0409 	sub.w	r4, r4, r9
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   1e0f4:	f7fc f8c3 	bl	1a27e <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   1e0f8:	6868      	ldr	r0, [r5, #4]
   1e0fa:	4622      	mov	r2, r4
   1e0fc:	eb07 0108 	add.w	r1, r7, r8
   1e100:	e7f0      	b.n	1e0e4 <_WriteNoCheck+0x1a>

0001e102 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   1e102:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
   1e106:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   1e108:	4606      	mov	r6, r0
   1e10a:	4689      	mov	r9, r1
   1e10c:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   1e10e:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   1e112:	6934      	ldr	r4, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1e114:	68b3      	ldr	r3, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1e116:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
   1e118:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1e11a:	bf28      	it	cs
   1e11c:	18e4      	addcs	r4, r4, r3
   1e11e:	3c01      	subs	r4, #1
   1e120:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   1e122:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   1e124:	42bc      	cmp	r4, r7
   1e126:	bf28      	it	cs
   1e128:	463c      	movcs	r4, r7
   1e12a:	4294      	cmp	r4, r2
   1e12c:	bf28      	it	cs
   1e12e:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
   1e130:	4649      	mov	r1, r9
   1e132:	4428      	add	r0, r5
   1e134:	4622      	mov	r2, r4
   1e136:	f7fc f8a2 	bl	1a27e <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   1e13a:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   1e13c:	4425      	add	r5, r4
      WrOff = 0u;
   1e13e:	42ab      	cmp	r3, r5
   1e140:	bf08      	it	eq
   1e142:	2500      	moveq	r5, #0
  } while (NumBytes);
   1e144:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   1e146:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   1e148:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   1e14a:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   1e14c:	d1e1      	bne.n	1e112 <_WriteBlocking+0x10>
}
   1e14e:	4640      	mov	r0, r8
   1e150:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001e154 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   1e154:	f7f9 b820 	b.w	17198 <_DoInit>

0001e158 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   1e158:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1e15a:	f7ff fffb 	bl	1e154 <SEGGER_RTT_Init>

	return 0;
}
   1e15e:	2000      	movs	r0, #0
   1e160:	bd08      	pop	{r3, pc}

0001e162 <z_device_state_init>:
}
   1e162:	4770      	bx	lr

0001e164 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1e164:	b138      	cbz	r0, 1e176 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1e166:	68c3      	ldr	r3, [r0, #12]
   1e168:	8818      	ldrh	r0, [r3, #0]
   1e16a:	f3c0 0008 	ubfx	r0, r0, #0, #9
   1e16e:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   1e172:	4258      	negs	r0, r3
   1e174:	4158      	adcs	r0, r3
}
   1e176:	4770      	bx	lr

0001e178 <arch_system_halt>:
	__asm__ volatile(
   1e178:	f04f 0220 	mov.w	r2, #32
   1e17c:	f3ef 8311 	mrs	r3, BASEPRI
   1e180:	f382 8812 	msr	BASEPRI_MAX, r2
   1e184:	f3bf 8f6f 	isb	sy
	for (;;) {
   1e188:	e7fe      	b.n	1e188 <arch_system_halt+0x10>

0001e18a <k_heap_init>:
{
   1e18a:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   1e18c:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1e190:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1e194:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1e196:	f7fb b861 	b.w	1925c <sys_heap_init>

0001e19a <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1e19a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e19e:	b085      	sub	sp, #20
   1e1a0:	4606      	mov	r6, r0
   1e1a2:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1e1a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   1e1a8:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1e1aa:	f000 fc0d 	bl	1e9c8 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1e1ae:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1e1b2:	4605      	mov	r5, r0
   1e1b4:	460f      	mov	r7, r1
   1e1b6:	f04f 0320 	mov.w	r3, #32
   1e1ba:	f3ef 8411 	mrs	r4, BASEPRI
   1e1be:	f383 8812 	msr	BASEPRI_MAX, r3
   1e1c2:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1e1c6:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   1e1ca:	464a      	mov	r2, r9
   1e1cc:	4641      	mov	r1, r8
   1e1ce:	4630      	mov	r0, r6
   1e1d0:	f7fa ffc9 	bl	19166 <sys_heap_aligned_alloc>
   1e1d4:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   1e1d6:	f7fa fb19 	bl	1880c <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   1e1da:	9b03      	ldr	r3, [sp, #12]
   1e1dc:	b13b      	cbz	r3, 1e1ee <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   1e1de:	f384 8811 	msr	BASEPRI, r4
   1e1e2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1e1e6:	4618      	mov	r0, r3
   1e1e8:	b005      	add	sp, #20
   1e1ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   1e1ee:	1a28      	subs	r0, r5, r0
   1e1f0:	eb67 0101 	sbc.w	r1, r7, r1
   1e1f4:	2801      	cmp	r0, #1
   1e1f6:	f171 0200 	sbcs.w	r2, r1, #0
   1e1fa:	dbf0      	blt.n	1e1de <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1e1fc:	e9cd 0100 	strd	r0, r1, [sp]
   1e200:	465a      	mov	r2, fp
   1e202:	4621      	mov	r1, r4
   1e204:	4650      	mov	r0, sl
   1e206:	f7f9 ffcd 	bl	181a4 <z_pend_curr>
	__asm__ volatile(
   1e20a:	f04f 0320 	mov.w	r3, #32
   1e20e:	f3ef 8411 	mrs	r4, BASEPRI
   1e212:	f383 8812 	msr	BASEPRI_MAX, r3
   1e216:	f3bf 8f6f 	isb	sy
   1e21a:	e7d6      	b.n	1e1ca <k_heap_aligned_alloc+0x30>

0001e21c <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   1e21c:	b538      	push	{r3, r4, r5, lr}
   1e21e:	4604      	mov	r4, r0
   1e220:	f04f 0320 	mov.w	r3, #32
   1e224:	f3ef 8511 	mrs	r5, BASEPRI
   1e228:	f383 8812 	msr	BASEPRI_MAX, r3
   1e22c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   1e230:	f7fa ff4c 	bl	190cc <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   1e234:	f104 000c 	add.w	r0, r4, #12
   1e238:	f000 fb3f 	bl	1e8ba <z_unpend_all>
   1e23c:	b130      	cbz	r0, 1e24c <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   1e23e:	4629      	mov	r1, r5
   1e240:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1e244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   1e248:	f7f9 be5a 	b.w	17f00 <z_reschedule>
	__asm__ volatile(
   1e24c:	f385 8811 	msr	BASEPRI, r5
   1e250:	f3bf 8f6f 	isb	sy
}
   1e254:	bd38      	pop	{r3, r4, r5, pc}

0001e256 <k_mem_slab_init>:
{
   1e256:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   1e258:	2400      	movs	r4, #0
   1e25a:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1e25c:	ea41 0402 	orr.w	r4, r1, r2
   1e260:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   1e264:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   1e268:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1e26a:	d10c      	bne.n	1e286 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   1e26c:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1e26e:	42a3      	cmp	r3, r4
   1e270:	d103      	bne.n	1e27a <k_mem_slab_init+0x24>
   1e272:	e9c0 0000 	strd	r0, r0, [r0]
}
   1e276:	2000      	movs	r0, #0
}
   1e278:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   1e27a:	6945      	ldr	r5, [r0, #20]
   1e27c:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1e27e:	3401      	adds	r4, #1
		slab->free_list = p;
   1e280:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   1e282:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   1e284:	e7f3      	b.n	1e26e <k_mem_slab_init+0x18>
		return -EINVAL;
   1e286:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1e28a:	e7f5      	b.n	1e278 <k_mem_slab_init+0x22>

0001e28c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1e28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e28e:	4604      	mov	r4, r0
   1e290:	460d      	mov	r5, r1
	__asm__ volatile(
   1e292:	f04f 0320 	mov.w	r3, #32
   1e296:	f3ef 8611 	mrs	r6, BASEPRI
   1e29a:	f383 8812 	msr	BASEPRI_MAX, r3
   1e29e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   1e2a2:	6947      	ldr	r7, [r0, #20]
   1e2a4:	b977      	cbnz	r7, 1e2c4 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1e2a6:	f000 faf0 	bl	1e88a <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1e2aa:	b158      	cbz	r0, 1e2c4 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1e2ac:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1e2ae:	6142      	str	r2, [r0, #20]
   1e2b0:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   1e2b2:	f000 fa79 	bl	1e7a8 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   1e2b6:	4631      	mov	r1, r6
   1e2b8:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   1e2bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   1e2c0:	f7f9 be1e 	b.w	17f00 <z_reschedule>
	**(char ***) mem = slab->free_list;
   1e2c4:	682b      	ldr	r3, [r5, #0]
   1e2c6:	6962      	ldr	r2, [r4, #20]
   1e2c8:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1e2ca:	682b      	ldr	r3, [r5, #0]
   1e2cc:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   1e2ce:	69a3      	ldr	r3, [r4, #24]
   1e2d0:	3b01      	subs	r3, #1
   1e2d2:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1e2d4:	f386 8811 	msr	BASEPRI, r6
   1e2d8:	f3bf 8f6f 	isb	sy
}
   1e2dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e2de <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1e2de:	f3ef 8005 	mrs	r0, IPSR
}
   1e2e2:	3800      	subs	r0, #0
   1e2e4:	bf18      	it	ne
   1e2e6:	2001      	movne	r0, #1
   1e2e8:	4770      	bx	lr

0001e2ea <z_impl_k_thread_name_set>:
}
   1e2ea:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1e2ee:	4770      	bx	lr

0001e2f0 <k_thread_name_get>:
}
   1e2f0:	2000      	movs	r0, #0
   1e2f2:	4770      	bx	lr

0001e2f4 <z_impl_k_thread_start>:
	z_sched_start(thread);
   1e2f4:	f7f9 befa 	b.w	180ec <z_sched_start>

0001e2f8 <z_pm_save_idle_exit>:
{
   1e2f8:	b508      	push	{r3, lr}
	pm_system_resume();
   1e2fa:	f7e4 ff19 	bl	3130 <pm_system_resume>
}
   1e2fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   1e302:	f7ff beaf 	b.w	1e064 <sys_clock_idle_exit>

0001e306 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   1e306:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1e30a:	428b      	cmp	r3, r1
   1e30c:	d001      	beq.n	1e312 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   1e30e:	f7f9 bf5d 	b.w	181cc <z_set_prio>
}
   1e312:	2000      	movs	r0, #0
   1e314:	4770      	bx	lr

0001e316 <queue_insert>:
{
   1e316:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e31a:	4699      	mov	r9, r3
   1e31c:	4604      	mov	r4, r0
   1e31e:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1e322:	460d      	mov	r5, r1
   1e324:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1e326:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1e32a:	f04f 0220 	mov.w	r2, #32
   1e32e:	f3ef 8711 	mrs	r7, BASEPRI
   1e332:	f382 8812 	msr	BASEPRI_MAX, r2
   1e336:	f3bf 8f6f 	isb	sy
	if (is_append) {
   1e33a:	b103      	cbz	r3, 1e33e <queue_insert+0x28>
	return list->tail;
   1e33c:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1e33e:	4630      	mov	r0, r6
   1e340:	f000 faa3 	bl	1e88a <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   1e344:	b158      	cbz	r0, 1e35e <queue_insert+0x48>
   1e346:	2400      	movs	r4, #0
   1e348:	67c4      	str	r4, [r0, #124]	; 0x7c
   1e34a:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   1e34e:	f000 fa2b 	bl	1e7a8 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   1e352:	4630      	mov	r0, r6
   1e354:	4639      	mov	r1, r7
   1e356:	f7f9 fdd3 	bl	17f00 <z_reschedule>
	return 0;
   1e35a:	2000      	movs	r0, #0
   1e35c:	e00c      	b.n	1e378 <queue_insert+0x62>
	if (alloc) {
   1e35e:	f1b9 0f00 	cmp.w	r9, #0
   1e362:	d01b      	beq.n	1e39c <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   1e364:	2108      	movs	r1, #8
   1e366:	f7fa fb1b 	bl	189a0 <z_thread_aligned_alloc>
		if (anode == NULL) {
   1e36a:	b938      	cbnz	r0, 1e37c <queue_insert+0x66>
	__asm__ volatile(
   1e36c:	f387 8811 	msr	BASEPRI, r7
   1e370:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1e374:	f06f 000b 	mvn.w	r0, #11
}
   1e378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   1e37c:	2301      	movs	r3, #1
		anode->data = data;
   1e37e:	f8c0 8004 	str.w	r8, [r0, #4]
   1e382:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1e384:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e386:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   1e38a:	b95d      	cbnz	r5, 1e3a4 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e38c:	6823      	ldr	r3, [r4, #0]
   1e38e:	4313      	orrs	r3, r2
   1e390:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1e392:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   1e394:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1e396:	b973      	cbnz	r3, 1e3b6 <queue_insert+0xa0>
	list->tail = node;
   1e398:	6060      	str	r0, [r4, #4]
}
   1e39a:	e00c      	b.n	1e3b6 <queue_insert+0xa0>
	node->next_and_flags = flags;
   1e39c:	f8c8 9000 	str.w	r9, [r8]
}
   1e3a0:	4640      	mov	r0, r8
   1e3a2:	e7ef      	b.n	1e384 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e3a4:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1e3a6:	f033 0303 	bics.w	r3, r3, #3
   1e3aa:	d110      	bne.n	1e3ce <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e3ac:	6002      	str	r2, [r0, #0]
	return list->tail;
   1e3ae:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   1e3b0:	b93a      	cbnz	r2, 1e3c2 <queue_insert+0xac>
	list->head = node;
   1e3b2:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1e3b6:	2104      	movs	r1, #4
   1e3b8:	f104 0010 	add.w	r0, r4, #16
   1e3bc:	f000 fbb2 	bl	1eb24 <z_handle_obj_poll_events>
   1e3c0:	e7c7      	b.n	1e352 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1e3c2:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e3c4:	f003 0303 	and.w	r3, r3, #3
   1e3c8:	4303      	orrs	r3, r0
   1e3ca:	6013      	str	r3, [r2, #0]
   1e3cc:	e7e4      	b.n	1e398 <queue_insert+0x82>
   1e3ce:	4313      	orrs	r3, r2
   1e3d0:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1e3d2:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e3d4:	f003 0303 	and.w	r3, r3, #3
   1e3d8:	4303      	orrs	r3, r0
   1e3da:	602b      	str	r3, [r5, #0]
}
   1e3dc:	e7eb      	b.n	1e3b6 <queue_insert+0xa0>

0001e3de <z_queue_node_peek>:
{
   1e3de:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1e3e0:	4604      	mov	r4, r0
   1e3e2:	b130      	cbz	r0, 1e3f2 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1e3e4:	6802      	ldr	r2, [r0, #0]
   1e3e6:	0793      	lsls	r3, r2, #30
   1e3e8:	d003      	beq.n	1e3f2 <z_queue_node_peek+0x14>
		ret = anode->data;
   1e3ea:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1e3ec:	b109      	cbz	r1, 1e3f2 <z_queue_node_peek+0x14>
			k_free(anode);
   1e3ee:	f000 fba7 	bl	1eb40 <k_free>
}
   1e3f2:	4620      	mov	r0, r4
   1e3f4:	bd10      	pop	{r4, pc}

0001e3f6 <z_impl_k_queue_init>:
	list->head = NULL;
   1e3f6:	2300      	movs	r3, #0
	list->tail = NULL;
   1e3f8:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   1e3fc:	f100 0308 	add.w	r3, r0, #8
   1e400:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   1e404:	f100 0310 	add.w	r3, r0, #16
   1e408:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   1e40c:	4770      	bx	lr

0001e40e <z_impl_k_queue_cancel_wait>:
{
   1e40e:	b570      	push	{r4, r5, r6, lr}
   1e410:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1e412:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1e416:	f04f 0320 	mov.w	r3, #32
   1e41a:	f3ef 8611 	mrs	r6, BASEPRI
   1e41e:	f383 8812 	msr	BASEPRI_MAX, r3
   1e422:	f3bf 8f6f 	isb	sy
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1e426:	4628      	mov	r0, r5
   1e428:	f000 fa2f 	bl	1e88a <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   1e42c:	b120      	cbz	r0, 1e438 <z_impl_k_queue_cancel_wait+0x2a>
   1e42e:	2200      	movs	r2, #0
   1e430:	67c2      	str	r2, [r0, #124]	; 0x7c
	thread->base.swap_data = data;
   1e432:	6142      	str	r2, [r0, #20]
	z_ready_thread(thread);
   1e434:	f000 f9b8 	bl	1e7a8 <z_ready_thread>
	z_handle_obj_poll_events(&queue->poll_events, state);
   1e438:	f104 0010 	add.w	r0, r4, #16
   1e43c:	2108      	movs	r1, #8
   1e43e:	f000 fb71 	bl	1eb24 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1e442:	4631      	mov	r1, r6
   1e444:	4628      	mov	r0, r5
}
   1e446:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&queue->lock, key);
   1e44a:	f7f9 bd59 	b.w	17f00 <z_reschedule>

0001e44e <k_queue_append>:
{
   1e44e:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   1e450:	2301      	movs	r3, #1
   1e452:	9300      	str	r3, [sp, #0]
   1e454:	2300      	movs	r3, #0
{
   1e456:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   1e458:	4619      	mov	r1, r3
   1e45a:	f7ff ff5c 	bl	1e316 <queue_insert>
}
   1e45e:	b003      	add	sp, #12
   1e460:	f85d fb04 	ldr.w	pc, [sp], #4

0001e464 <k_queue_prepend>:
{
   1e464:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   1e466:	2300      	movs	r3, #0
{
   1e468:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   1e46a:	9300      	str	r3, [sp, #0]
   1e46c:	4619      	mov	r1, r3
   1e46e:	f7ff ff52 	bl	1e316 <queue_insert>
}
   1e472:	b003      	add	sp, #12
   1e474:	f85d fb04 	ldr.w	pc, [sp], #4

0001e478 <k_queue_append_list>:
{
   1e478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e47c:	4605      	mov	r5, r0
   1e47e:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   1e480:	460c      	mov	r4, r1
   1e482:	b391      	cbz	r1, 1e4ea <k_queue_append_list+0x72>
   1e484:	b38a      	cbz	r2, 1e4ea <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1e486:	f100 0708 	add.w	r7, r0, #8
   1e48a:	f04f 0320 	mov.w	r3, #32
   1e48e:	f3ef 8811 	mrs	r8, BASEPRI
   1e492:	f383 8812 	msr	BASEPRI_MAX, r3
   1e496:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   1e49a:	4638      	mov	r0, r7
   1e49c:	f000 f9f5 	bl	1e88a <z_unpend_first_thread>
   1e4a0:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   1e4a4:	b920      	cbnz	r0, 1e4b0 <k_queue_append_list+0x38>
	return list->tail;
   1e4a6:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1e4a8:	b9ca      	cbnz	r2, 1e4de <k_queue_append_list+0x66>
	list->head = node;
   1e4aa:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1e4ac:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1e4ae:	e00a      	b.n	1e4c6 <k_queue_append_list+0x4e>
   1e4b0:	6144      	str	r4, [r0, #20]
   1e4b2:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   1e4b6:	f000 f977 	bl	1e7a8 <z_ready_thread>
		head = *(void **)head;
   1e4ba:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   1e4bc:	4638      	mov	r0, r7
   1e4be:	f000 f9e4 	bl	1e88a <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   1e4c2:	2c00      	cmp	r4, #0
   1e4c4:	d1ee      	bne.n	1e4a4 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   1e4c6:	2104      	movs	r1, #4
   1e4c8:	f105 0010 	add.w	r0, r5, #16
   1e4cc:	f000 fb2a 	bl	1eb24 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1e4d0:	4638      	mov	r0, r7
   1e4d2:	4641      	mov	r1, r8
   1e4d4:	f7f9 fd14 	bl	17f00 <z_reschedule>
	return 0;
   1e4d8:	2000      	movs	r0, #0
}
   1e4da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1e4de:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e4e0:	f003 0303 	and.w	r3, r3, #3
   1e4e4:	431c      	orrs	r4, r3
   1e4e6:	6014      	str	r4, [r2, #0]
}
   1e4e8:	e7e0      	b.n	1e4ac <k_queue_append_list+0x34>
		return -EINVAL;
   1e4ea:	f06f 0015 	mvn.w	r0, #21
   1e4ee:	e7f4      	b.n	1e4da <k_queue_append_list+0x62>

0001e4f0 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   1e4f0:	b15a      	cbz	r2, 1e50a <z_impl_k_sem_init+0x1a>
   1e4f2:	428a      	cmp	r2, r1
   1e4f4:	d309      	bcc.n	1e50a <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1e4f6:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1e4fa:	e9c0 1202 	strd	r1, r2, [r0, #8]
   1e4fe:	e9c0 0000 	strd	r0, r0, [r0]
   1e502:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1e506:	2000      	movs	r0, #0
   1e508:	4770      	bx	lr
		return -EINVAL;
   1e50a:	f06f 0015 	mvn.w	r0, #21
}
   1e50e:	4770      	bx	lr

0001e510 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   1e510:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   1e512:	2301      	movs	r3, #1
   1e514:	408b      	lsls	r3, r1
   1e516:	ea22 0303 	bic.w	r3, r2, r3
   1e51a:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   1e51c:	fa22 f001 	lsr.w	r0, r2, r1
}
   1e520:	f000 0001 	and.w	r0, r0, #1
   1e524:	4770      	bx	lr

0001e526 <unschedule_locked>:
{
   1e526:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1e528:	2103      	movs	r1, #3
{
   1e52a:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1e52c:	300c      	adds	r0, #12
   1e52e:	f7ff ffef 	bl	1e510 <flag_test_and_clear>
   1e532:	4604      	mov	r4, r0
   1e534:	b118      	cbz	r0, 1e53e <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   1e536:	f105 0010 	add.w	r0, r5, #16
   1e53a:	f000 f9eb 	bl	1e914 <z_abort_timeout>
}
   1e53e:	4620      	mov	r0, r4
   1e540:	bd38      	pop	{r3, r4, r5, pc}

0001e542 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   1e542:	b120      	cbz	r0, 1e54e <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1e544:	2200      	movs	r2, #0
   1e546:	4611      	mov	r1, r2
   1e548:	3088      	adds	r0, #136	; 0x88
   1e54a:	f000 b9c6 	b.w	1e8da <z_sched_wake>
}
   1e54e:	4770      	bx	lr

0001e550 <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   1e550:	68c3      	ldr	r3, [r0, #12]
{
   1e552:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1e554:	f3c3 0540 	ubfx	r5, r3, #1, #1
   1e558:	079b      	lsls	r3, r3, #30
{
   1e55a:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1e55c:	d416      	bmi.n	1e58c <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   1e55e:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   1e560:	2102      	movs	r1, #2
   1e562:	300c      	adds	r0, #12
   1e564:	f7ff ffd4 	bl	1e510 <flag_test_and_clear>
   1e568:	b180      	cbz	r0, 1e58c <cancel_async_locked+0x3c>
	return list->head;
   1e56a:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e56e:	b16a      	cbz	r2, 1e58c <cancel_async_locked+0x3c>
   1e570:	4294      	cmp	r4, r2
   1e572:	d11b      	bne.n	1e5ac <cancel_async_locked+0x5c>
	return node->next;
   1e574:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   1e576:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
Z_GENLIST_REMOVE(slist, snode)
   1e57a:	b98d      	cbnz	r5, 1e5a0 <cancel_async_locked+0x50>
   1e57c:	428c      	cmp	r4, r1
	list->head = node;
   1e57e:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   1e582:	d101      	bne.n	1e588 <cancel_async_locked+0x38>
	list->tail = node;
   1e584:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
	parent->next = child;
   1e588:	2300      	movs	r3, #0
   1e58a:	6023      	str	r3, [r4, #0]
	return *flagp;
   1e58c:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   1e58e:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   1e592:	bf1e      	ittt	ne
   1e594:	f043 0302 	orrne.w	r3, r3, #2
   1e598:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   1e59a:	f003 000f 	andne.w	r0, r3, #15
}
   1e59e:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   1e5a0:	428c      	cmp	r4, r1
	parent->next = child;
   1e5a2:	602a      	str	r2, [r5, #0]
	list->tail = node;
   1e5a4:	bf08      	it	eq
   1e5a6:	f8c6 5084 	streq.w	r5, [r6, #132]	; 0x84
}
   1e5aa:	e7ed      	b.n	1e588 <cancel_async_locked+0x38>
	return node->next;
   1e5ac:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e5ae:	6812      	ldr	r2, [r2, #0]
   1e5b0:	e7dd      	b.n	1e56e <cancel_async_locked+0x1e>

0001e5b2 <work_timeout>:
{
   1e5b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1e5b4:	4604      	mov	r4, r0
   1e5b6:	f04f 0320 	mov.w	r3, #32
   1e5ba:	f3ef 8511 	mrs	r5, BASEPRI
   1e5be:	f383 8812 	msr	BASEPRI_MAX, r3
   1e5c2:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   1e5c6:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1e5c8:	f1a0 0610 	sub.w	r6, r0, #16
   1e5cc:	2103      	movs	r1, #3
   1e5ce:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   1e5d0:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1e5d2:	f7ff ff9d 	bl	1e510 <flag_test_and_clear>
   1e5d6:	b128      	cbz	r0, 1e5e4 <work_timeout+0x32>
		queue = dw->queue;
   1e5d8:	69a3      	ldr	r3, [r4, #24]
   1e5da:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   1e5dc:	a901      	add	r1, sp, #4
   1e5de:	4630      	mov	r0, r6
   1e5e0:	f7f9 fb56 	bl	17c90 <submit_to_queue_locked>
	__asm__ volatile(
   1e5e4:	f385 8811 	msr	BASEPRI, r5
   1e5e8:	f3bf 8f6f 	isb	sy
}
   1e5ec:	b002      	add	sp, #8
   1e5ee:	bd70      	pop	{r4, r5, r6, pc}

0001e5f0 <k_work_init>:
{
   1e5f0:	b538      	push	{r3, r4, r5, lr}
   1e5f2:	4604      	mov	r4, r0
   1e5f4:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1e5f6:	2210      	movs	r2, #16
   1e5f8:	2100      	movs	r1, #0
   1e5fa:	f7fb fe4b 	bl	1a294 <memset>
   1e5fe:	6065      	str	r5, [r4, #4]
}
   1e600:	bd38      	pop	{r3, r4, r5, pc}

0001e602 <k_work_submit_to_queue>:
{
   1e602:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1e604:	9001      	str	r0, [sp, #4]
   1e606:	4608      	mov	r0, r1
	__asm__ volatile(
   1e608:	f04f 0320 	mov.w	r3, #32
   1e60c:	f3ef 8511 	mrs	r5, BASEPRI
   1e610:	f383 8812 	msr	BASEPRI_MAX, r3
   1e614:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   1e618:	a901      	add	r1, sp, #4
   1e61a:	f7f9 fb39 	bl	17c90 <submit_to_queue_locked>
   1e61e:	4604      	mov	r4, r0
	__asm__ volatile(
   1e620:	f385 8811 	msr	BASEPRI, r5
   1e624:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   1e628:	2800      	cmp	r0, #0
   1e62a:	dd04      	ble.n	1e636 <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   1e62c:	f7f9 ff18 	bl	18460 <z_impl_k_is_preempt_thread>
   1e630:	b108      	cbz	r0, 1e636 <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   1e632:	f7f9 fe6d 	bl	18310 <z_impl_k_yield>
}
   1e636:	4620      	mov	r0, r4
   1e638:	b003      	add	sp, #12
   1e63a:	bd30      	pop	{r4, r5, pc}

0001e63c <k_work_init_delayable>:
{
   1e63c:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   1e63e:	2230      	movs	r2, #48	; 0x30
{
   1e640:	4604      	mov	r4, r0
   1e642:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   1e644:	2100      	movs	r1, #0
   1e646:	f7fb fe25 	bl	1a294 <memset>
   1e64a:	f44f 7380 	mov.w	r3, #256	; 0x100
   1e64e:	6065      	str	r5, [r4, #4]
   1e650:	60e3      	str	r3, [r4, #12]
}
   1e652:	bd38      	pop	{r3, r4, r5, pc}

0001e654 <k_work_delayable_busy_get>:
	__asm__ volatile(
   1e654:	f04f 0220 	mov.w	r2, #32
   1e658:	f3ef 8311 	mrs	r3, BASEPRI
   1e65c:	f382 8812 	msr	BASEPRI_MAX, r2
   1e660:	f3bf 8f6f 	isb	sy
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e664:	f3bf 8f5b 	dmb	ish
   1e668:	68c0      	ldr	r0, [r0, #12]
   1e66a:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
   1e66e:	f383 8811 	msr	BASEPRI, r3
   1e672:	f3bf 8f6f 	isb	sy
}
   1e676:	f000 000f 	and.w	r0, r0, #15
   1e67a:	4770      	bx	lr

0001e67c <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   1e67c:	b538      	push	{r3, r4, r5, lr}
   1e67e:	4604      	mov	r4, r0
	__asm__ volatile(
   1e680:	f04f 0320 	mov.w	r3, #32
   1e684:	f3ef 8511 	mrs	r5, BASEPRI
   1e688:	f383 8812 	msr	BASEPRI_MAX, r3
   1e68c:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   1e690:	f7ff ff49 	bl	1e526 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1e694:	4620      	mov	r0, r4
   1e696:	f7ff ff5b 	bl	1e550 <cancel_async_locked>
	__asm__ volatile(
   1e69a:	f385 8811 	msr	BASEPRI, r5
   1e69e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   1e6a2:	bd38      	pop	{r3, r4, r5, pc}

0001e6a4 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   1e6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e6a6:	4604      	mov	r4, r0
   1e6a8:	460d      	mov	r5, r1
	__asm__ volatile(
   1e6aa:	f04f 0320 	mov.w	r3, #32
   1e6ae:	f3ef 8711 	mrs	r7, BASEPRI
   1e6b2:	f383 8812 	msr	BASEPRI_MAX, r3
   1e6b6:	f3bf 8f6f 	isb	sy
   1e6ba:	f3bf 8f5b 	dmb	ish
   1e6be:	68c3      	ldr	r3, [r0, #12]
   1e6c0:	f3bf 8f5b 	dmb	ish
	return atomic_get(&dwork->work.flags) & K_WORK_MASK;
   1e6c4:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   1e6c8:	2b00      	cmp	r3, #0
   1e6ca:	bf14      	ite	ne
   1e6cc:	2601      	movne	r6, #1
   1e6ce:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   1e6d0:	d009      	beq.n	1e6e6 <k_work_cancel_delayable_sync+0x42>
	(void)unschedule_locked(dwork);
   1e6d2:	f7ff ff28 	bl	1e526 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1e6d6:	4620      	mov	r0, r4
   1e6d8:	f7ff ff3a 	bl	1e550 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   1e6dc:	4629      	mov	r1, r5
   1e6de:	4620      	mov	r0, r4
   1e6e0:	f7f9 fab8 	bl	17c54 <cancel_sync_locked>
   1e6e4:	4603      	mov	r3, r0
	__asm__ volatile(
   1e6e6:	f387 8811 	msr	BASEPRI, r7
   1e6ea:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   1e6ee:	b13b      	cbz	r3, 1e700 <k_work_cancel_delayable_sync+0x5c>
	return z_impl_k_sem_take(sem, timeout);
   1e6f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e6f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e6f8:	f105 0008 	add.w	r0, r5, #8
   1e6fc:	f7f9 f9d2 	bl	17aa4 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   1e700:	4630      	mov	r0, r6
   1e702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e704 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   1e704:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1e708:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1e70a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1e70c:	2300      	movs	r3, #0
	node->prev = NULL;
   1e70e:	e9c0 3300 	strd	r3, r3, [r0]
}
   1e712:	4770      	bx	lr

0001e714 <unpend_thread_no_timeout>:
{
   1e714:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   1e716:	f7ff fff5 	bl	1e704 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1e71a:	7b43      	ldrb	r3, [r0, #13]
   1e71c:	f023 0302 	bic.w	r3, r3, #2
   1e720:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   1e722:	2300      	movs	r3, #0
   1e724:	6083      	str	r3, [r0, #8]
}
   1e726:	bd08      	pop	{r3, pc}

0001e728 <z_unpend_thread_no_timeout>:
{
   1e728:	b508      	push	{r3, lr}
	__asm__ volatile(
   1e72a:	f04f 0320 	mov.w	r3, #32
   1e72e:	f3ef 8111 	mrs	r1, BASEPRI
   1e732:	f383 8812 	msr	BASEPRI_MAX, r3
   1e736:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1e73a:	f7ff ffeb 	bl	1e714 <unpend_thread_no_timeout>
	__asm__ volatile(
   1e73e:	f381 8811 	msr	BASEPRI, r1
   1e742:	f3bf 8f6f 	isb	sy
}
   1e746:	bd08      	pop	{r3, pc}

0001e748 <z_unpend_thread>:
{
   1e748:	b510      	push	{r4, lr}
	__asm__ volatile(
   1e74a:	f04f 0320 	mov.w	r3, #32
   1e74e:	f3ef 8411 	mrs	r4, BASEPRI
   1e752:	f383 8812 	msr	BASEPRI_MAX, r3
   1e756:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1e75a:	f7ff ffdb 	bl	1e714 <unpend_thread_no_timeout>
	__asm__ volatile(
   1e75e:	f384 8811 	msr	BASEPRI, r4
   1e762:	f3bf 8f6f 	isb	sy
}
   1e766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e76a:	3018      	adds	r0, #24
   1e76c:	f000 b8d2 	b.w	1e914 <z_abort_timeout>

0001e770 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1e770:	4603      	mov	r3, r0
   1e772:	b920      	cbnz	r0, 1e77e <z_reschedule_irqlock+0xe>
   1e774:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   1e778:	b90a      	cbnz	r2, 1e77e <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   1e77a:	f7e4 be77 	b.w	346c <arch_swap>
   1e77e:	f383 8811 	msr	BASEPRI, r3
   1e782:	f3bf 8f6f 	isb	sy
}
   1e786:	4770      	bx	lr

0001e788 <z_reschedule_unlocked>:
	__asm__ volatile(
   1e788:	f04f 0320 	mov.w	r3, #32
   1e78c:	f3ef 8011 	mrs	r0, BASEPRI
   1e790:	f383 8812 	msr	BASEPRI_MAX, r3
   1e794:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1e798:	f7ff bfea 	b.w	1e770 <z_reschedule_irqlock>

0001e79c <z_priq_dumb_best>:
{
   1e79c:	4603      	mov	r3, r0
	return list->head == list;
   1e79e:	6800      	ldr	r0, [r0, #0]
}
   1e7a0:	4283      	cmp	r3, r0
   1e7a2:	bf08      	it	eq
   1e7a4:	2000      	moveq	r0, #0
   1e7a6:	4770      	bx	lr

0001e7a8 <z_ready_thread>:
{
   1e7a8:	b510      	push	{r4, lr}
   1e7aa:	f04f 0320 	mov.w	r3, #32
   1e7ae:	f3ef 8411 	mrs	r4, BASEPRI
   1e7b2:	f383 8812 	msr	BASEPRI_MAX, r3
   1e7b6:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   1e7ba:	f7f9 fc61 	bl	18080 <ready_thread>
	__asm__ volatile(
   1e7be:	f384 8811 	msr	BASEPRI, r4
   1e7c2:	f3bf 8f6f 	isb	sy
}
   1e7c6:	bd10      	pop	{r4, pc}

0001e7c8 <z_thread_timeout>:
{
   1e7c8:	b510      	push	{r4, lr}
   1e7ca:	4601      	mov	r1, r0
	__asm__ volatile(
   1e7cc:	f04f 0320 	mov.w	r3, #32
   1e7d0:	f3ef 8411 	mrs	r4, BASEPRI
   1e7d4:	f383 8812 	msr	BASEPRI_MAX, r3
   1e7d8:	f3bf 8f6f 	isb	sy
		if (!killed) {
   1e7dc:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   1e7e0:	f013 0f28 	tst.w	r3, #40	; 0x28
   1e7e4:	d10d      	bne.n	1e802 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   1e7e6:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   1e7ea:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   1e7ec:	b10b      	cbz	r3, 1e7f2 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   1e7ee:	f7ff ff91 	bl	1e714 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1e7f2:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   1e7f6:	f023 0314 	bic.w	r3, r3, #20
   1e7fa:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   1e7fe:	f7f9 fc3f 	bl	18080 <ready_thread>
	__asm__ volatile(
   1e802:	f384 8811 	msr	BASEPRI, r4
   1e806:	f3bf 8f6f 	isb	sy
}
   1e80a:	bd10      	pop	{r4, pc}

0001e80c <add_to_waitq_locked>:
{
   1e80c:	b538      	push	{r3, r4, r5, lr}
   1e80e:	4604      	mov	r4, r0
   1e810:	460d      	mov	r5, r1
	unready_thread(thread);
   1e812:	f7f9 fc89 	bl	18128 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1e816:	7b63      	ldrb	r3, [r4, #13]
   1e818:	f043 0302 	orr.w	r3, r3, #2
   1e81c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1e81e:	b195      	cbz	r5, 1e846 <add_to_waitq_locked+0x3a>
   1e820:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   1e822:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e824:	429d      	cmp	r5, r3
   1e826:	d015      	beq.n	1e854 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1e828:	b1a3      	cbz	r3, 1e854 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
   1e82a:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1e82e:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   1e832:	4291      	cmp	r1, r2
   1e834:	d008      	beq.n	1e848 <add_to_waitq_locked+0x3c>
		return b2 - b1;
   1e836:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   1e838:	2a00      	cmp	r2, #0
   1e83a:	dd05      	ble.n	1e848 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
   1e83c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1e83e:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1e842:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1e844:	605c      	str	r4, [r3, #4]
}
   1e846:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   1e848:	686a      	ldr	r2, [r5, #4]
   1e84a:	4293      	cmp	r3, r2
   1e84c:	d002      	beq.n	1e854 <add_to_waitq_locked+0x48>
   1e84e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1e850:	2b00      	cmp	r3, #0
   1e852:	d1ec      	bne.n	1e82e <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   1e854:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   1e856:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   1e85a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1e85c:	606c      	str	r4, [r5, #4]
}
   1e85e:	e7f2      	b.n	1e846 <add_to_waitq_locked+0x3a>

0001e860 <z_unpend1_no_timeout>:
{
   1e860:	b510      	push	{r4, lr}
	__asm__ volatile(
   1e862:	f04f 0320 	mov.w	r3, #32
   1e866:	f3ef 8411 	mrs	r4, BASEPRI
   1e86a:	f383 8812 	msr	BASEPRI_MAX, r3
   1e86e:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   1e872:	f7ff ff93 	bl	1e79c <z_priq_dumb_best>
		if (thread != NULL) {
   1e876:	4601      	mov	r1, r0
   1e878:	b108      	cbz	r0, 1e87e <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   1e87a:	f7ff ff4b 	bl	1e714 <unpend_thread_no_timeout>
	__asm__ volatile(
   1e87e:	f384 8811 	msr	BASEPRI, r4
   1e882:	f3bf 8f6f 	isb	sy
}
   1e886:	4608      	mov	r0, r1
   1e888:	bd10      	pop	{r4, pc}

0001e88a <z_unpend_first_thread>:
{
   1e88a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1e88c:	f04f 0320 	mov.w	r3, #32
   1e890:	f3ef 8511 	mrs	r5, BASEPRI
   1e894:	f383 8812 	msr	BASEPRI_MAX, r3
   1e898:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   1e89c:	f7ff ff7e 	bl	1e79c <z_priq_dumb_best>
		if (thread != NULL) {
   1e8a0:	4604      	mov	r4, r0
   1e8a2:	b120      	cbz	r0, 1e8ae <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   1e8a4:	f7ff ff36 	bl	1e714 <unpend_thread_no_timeout>
   1e8a8:	3018      	adds	r0, #24
   1e8aa:	f000 f833 	bl	1e914 <z_abort_timeout>
	__asm__ volatile(
   1e8ae:	f385 8811 	msr	BASEPRI, r5
   1e8b2:	f3bf 8f6f 	isb	sy
}
   1e8b6:	4620      	mov	r0, r4
   1e8b8:	bd38      	pop	{r3, r4, r5, pc}

0001e8ba <z_unpend_all>:
{
   1e8ba:	b538      	push	{r3, r4, r5, lr}
   1e8bc:	4605      	mov	r5, r0
	int need_sched = 0;
   1e8be:	2000      	movs	r0, #0
	return list->head == list;
   1e8c0:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e8c2:	42a5      	cmp	r5, r4
   1e8c4:	d000      	beq.n	1e8c8 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1e8c6:	b904      	cbnz	r4, 1e8ca <z_unpend_all+0x10>
}
   1e8c8:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   1e8ca:	4620      	mov	r0, r4
   1e8cc:	f7ff ff3c 	bl	1e748 <z_unpend_thread>
		z_ready_thread(thread);
   1e8d0:	4620      	mov	r0, r4
   1e8d2:	f7ff ff69 	bl	1e7a8 <z_ready_thread>
		need_sched = 1;
   1e8d6:	2001      	movs	r0, #1
   1e8d8:	e7f2      	b.n	1e8c0 <z_unpend_all+0x6>

0001e8da <z_sched_wake>:
{
   1e8da:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1e8dc:	f04f 0320 	mov.w	r3, #32
   1e8e0:	f3ef 8511 	mrs	r5, BASEPRI
   1e8e4:	f383 8812 	msr	BASEPRI_MAX, r3
   1e8e8:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   1e8ec:	f7ff ff56 	bl	1e79c <z_priq_dumb_best>
		if (thread != NULL) {
   1e8f0:	4604      	mov	r4, r0
   1e8f2:	b150      	cbz	r0, 1e90a <z_sched_wake+0x30>
   1e8f4:	67c1      	str	r1, [r0, #124]	; 0x7c
   1e8f6:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   1e8f8:	f7ff ff0c 	bl	1e714 <unpend_thread_no_timeout>
   1e8fc:	3018      	adds	r0, #24
   1e8fe:	f000 f809 	bl	1e914 <z_abort_timeout>
			ready_thread(thread);
   1e902:	4620      	mov	r0, r4
   1e904:	f7f9 fbbc 	bl	18080 <ready_thread>
			ret = true;
   1e908:	2001      	movs	r0, #1
	__asm__ volatile(
   1e90a:	f385 8811 	msr	BASEPRI, r5
   1e90e:	f3bf 8f6f 	isb	sy
}
   1e912:	bd38      	pop	{r3, r4, r5, pc}

0001e914 <z_abort_timeout>:
{
   1e914:	b510      	push	{r4, lr}
	__asm__ volatile(
   1e916:	f04f 0220 	mov.w	r2, #32
   1e91a:	f3ef 8411 	mrs	r4, BASEPRI
   1e91e:	f382 8812 	msr	BASEPRI_MAX, r2
   1e922:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1e926:	6803      	ldr	r3, [r0, #0]
   1e928:	b13b      	cbz	r3, 1e93a <z_abort_timeout+0x26>
			remove_timeout(to);
   1e92a:	f7f9 fe59 	bl	185e0 <remove_timeout>
			ret = 0;
   1e92e:	2000      	movs	r0, #0
	__asm__ volatile(
   1e930:	f384 8811 	msr	BASEPRI, r4
   1e934:	f3bf 8f6f 	isb	sy
}
   1e938:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1e93a:	f06f 0015 	mvn.w	r0, #21
   1e93e:	e7f7      	b.n	1e930 <z_abort_timeout+0x1c>

0001e940 <z_timeout_remaining>:
{
   1e940:	b510      	push	{r4, lr}
	__asm__ volatile(
   1e942:	f04f 0320 	mov.w	r3, #32
   1e946:	f3ef 8411 	mrs	r4, BASEPRI
   1e94a:	f383 8812 	msr	BASEPRI_MAX, r3
   1e94e:	f3bf 8f6f 	isb	sy
		ticks = timeout_rem(timeout);
   1e952:	f7f9 fe5f 	bl	18614 <timeout_rem>
	__asm__ volatile(
   1e956:	f384 8811 	msr	BASEPRI, r4
   1e95a:	f3bf 8f6f 	isb	sy
}
   1e95e:	bd10      	pop	{r4, pc}

0001e960 <z_get_next_timeout_expiry>:
{
   1e960:	b510      	push	{r4, lr}
	__asm__ volatile(
   1e962:	f04f 0320 	mov.w	r3, #32
   1e966:	f3ef 8411 	mrs	r4, BASEPRI
   1e96a:	f383 8812 	msr	BASEPRI_MAX, r3
   1e96e:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   1e972:	f7f9 fe0d 	bl	18590 <next_timeout>
	__asm__ volatile(
   1e976:	f384 8811 	msr	BASEPRI, r4
   1e97a:	f3bf 8f6f 	isb	sy
}
   1e97e:	bd10      	pop	{r4, pc}

0001e980 <z_set_timeout_expiry>:
{
   1e980:	b570      	push	{r4, r5, r6, lr}
   1e982:	4604      	mov	r4, r0
   1e984:	460d      	mov	r5, r1
	__asm__ volatile(
   1e986:	f04f 0320 	mov.w	r3, #32
   1e98a:	f3ef 8611 	mrs	r6, BASEPRI
   1e98e:	f383 8812 	msr	BASEPRI_MAX, r3
   1e992:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   1e996:	f7f9 fdfb 	bl	18590 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1e99a:	2801      	cmp	r0, #1
   1e99c:	dd05      	ble.n	1e9aa <z_set_timeout_expiry+0x2a>
   1e99e:	42a0      	cmp	r0, r4
   1e9a0:	db03      	blt.n	1e9aa <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   1e9a2:	4629      	mov	r1, r5
   1e9a4:	4620      	mov	r0, r4
   1e9a6:	f7f8 f8a9 	bl	16afc <sys_clock_set_timeout>
	__asm__ volatile(
   1e9aa:	f386 8811 	msr	BASEPRI, r6
   1e9ae:	f3bf 8f6f 	isb	sy
}
   1e9b2:	bd70      	pop	{r4, r5, r6, pc}

0001e9b4 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   1e9b4:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   1e9b6:	f7f9 ff29 	bl	1880c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1e9ba:	bd08      	pop	{r3, pc}

0001e9bc <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   1e9bc:	f7f9 bf26 	b.w	1880c <sys_clock_tick_get>

0001e9c0 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   1e9c0:	b108      	cbz	r0, 1e9c6 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   1e9c2:	f7e5 b99b 	b.w	3cfc <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   1e9c6:	4770      	bx	lr

0001e9c8 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1e9c8:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1e9cc:	bf08      	it	eq
   1e9ce:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1e9d2:	b538      	push	{r3, r4, r5, lr}
   1e9d4:	4605      	mov	r5, r0
   1e9d6:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1e9d8:	d01d      	beq.n	1ea16 <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1e9da:	ea51 0300 	orrs.w	r3, r1, r0
   1e9de:	d103      	bne.n	1e9e8 <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   1e9e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   1e9e4:	f7f9 bf12 	b.w	1880c <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1e9e8:	f06f 0301 	mvn.w	r3, #1
   1e9ec:	1a18      	subs	r0, r3, r0
   1e9ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e9f2:	eb63 0101 	sbc.w	r1, r3, r1
   1e9f6:	2900      	cmp	r1, #0
   1e9f8:	da0c      	bge.n	1ea14 <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
   1e9fa:	f7f9 ff07 	bl	1880c <sys_clock_tick_get>
   1e9fe:	2d01      	cmp	r5, #1
   1ea00:	4622      	mov	r2, r4
   1ea02:	f174 0400 	sbcs.w	r4, r4, #0
   1ea06:	462b      	mov	r3, r5
   1ea08:	bfbc      	itt	lt
   1ea0a:	2301      	movlt	r3, #1
   1ea0c:	2200      	movlt	r2, #0
   1ea0e:	1818      	adds	r0, r3, r0
   1ea10:	eb41 0102 	adc.w	r1, r1, r2
}
   1ea14:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   1ea16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ea1a:	4601      	mov	r1, r0
   1ea1c:	e7fa      	b.n	1ea14 <sys_clock_timeout_end_calc+0x4c>

0001ea1e <k_timer_init>:
	timer->status = 0U;
   1ea1e:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   1ea20:	e9c0 1208 	strd	r1, r2, [r0, #32]
   1ea24:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   1ea28:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   1ea2c:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   1ea30:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   1ea32:	6343      	str	r3, [r0, #52]	; 0x34
}
   1ea34:	4770      	bx	lr

0001ea36 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   1ea36:	b510      	push	{r4, lr}
   1ea38:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   1ea3a:	f7ff ff6b 	bl	1e914 <z_abort_timeout>

	if (inactive) {
   1ea3e:	b9b0      	cbnz	r0, 1ea6e <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   1ea40:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ea42:	b10b      	cbz	r3, 1ea48 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   1ea44:	4620      	mov	r0, r4
   1ea46:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   1ea48:	f104 0018 	add.w	r0, r4, #24
   1ea4c:	f7ff ff08 	bl	1e860 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   1ea50:	b168      	cbz	r0, 1ea6e <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   1ea52:	f7ff fea9 	bl	1e7a8 <z_ready_thread>
	__asm__ volatile(
   1ea56:	f04f 0320 	mov.w	r3, #32
   1ea5a:	f3ef 8011 	mrs	r0, BASEPRI
   1ea5e:	f383 8812 	msr	BASEPRI_MAX, r3
   1ea62:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   1ea66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   1ea6a:	f7ff be81 	b.w	1e770 <z_reschedule_irqlock>
   1ea6e:	bd10      	pop	{r4, pc}

0001ea70 <signal_poll_event>:
{
   1ea70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   1ea74:	6884      	ldr	r4, [r0, #8]
{
   1ea76:	4605      	mov	r5, r0
   1ea78:	460e      	mov	r6, r1
	if (poller != NULL) {
   1ea7a:	b144      	cbz	r4, 1ea8e <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   1ea7c:	7863      	ldrb	r3, [r4, #1]
   1ea7e:	2b01      	cmp	r3, #1
   1ea80:	d136      	bne.n	1eaf0 <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
   1ea82:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1ea86:	f013 0302 	ands.w	r3, r3, #2
   1ea8a:	d10a      	bne.n	1eaa2 <signal_poll_event+0x32>
		poller->is_polling = false;
   1ea8c:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   1ea8e:	68eb      	ldr	r3, [r5, #12]
   1ea90:	f3c3 3145 	ubfx	r1, r3, #13, #6
   1ea94:	430e      	orrs	r6, r1
	event->poller = NULL;
   1ea96:	2000      	movs	r0, #0
	event->state |= state;
   1ea98:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   1ea9c:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   1ea9e:	60eb      	str	r3, [r5, #12]
	return retcode;
   1eaa0:	e00b      	b.n	1eaba <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   1eaa2:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   1eaa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1eaaa:	bf08      	it	eq
   1eaac:	f112 0f02 	cmneq.w	r2, #2
   1eab0:	d105      	bne.n	1eabe <signal_poll_event+0x4e>
		poller->is_polling = false;
   1eab2:	2300      	movs	r3, #0
   1eab4:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   1eab6:	f06f 000a 	mvn.w	r0, #10
}
   1eaba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1eabe:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   1eac2:	4640      	mov	r0, r8
   1eac4:	f7ff fe40 	bl	1e748 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1eac8:	2e08      	cmp	r6, #8
   1eaca:	bf0c      	ite	eq
   1eacc:	f06f 0303 	mvneq.w	r3, #3
   1ead0:	2300      	movne	r3, #0
   1ead2:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1ead4:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1ead8:	06db      	lsls	r3, r3, #27
   1eada:	d102      	bne.n	1eae2 <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
   1eadc:	f854 7c48 	ldr.w	r7, [r4, #-72]
   1eae0:	b10f      	cbz	r7, 1eae6 <signal_poll_event+0x76>
		poller->is_polling = false;
   1eae2:	2300      	movs	r3, #0
   1eae4:	e7d2      	b.n	1ea8c <signal_poll_event+0x1c>
	z_ready_thread(thread);
   1eae6:	4640      	mov	r0, r8
   1eae8:	f7ff fe5e 	bl	1e7a8 <z_ready_thread>
		poller->is_polling = false;
   1eaec:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   1eaee:	e7ce      	b.n	1ea8e <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   1eaf0:	2b02      	cmp	r3, #2
   1eaf2:	d1f6      	bne.n	1eae2 <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1eaf4:	7823      	ldrb	r3, [r4, #0]
   1eaf6:	2b00      	cmp	r3, #0
   1eaf8:	d0c9      	beq.n	1ea8e <signal_poll_event+0x1e>
   1eafa:	f854 7c04 	ldr.w	r7, [r4, #-4]
   1eafe:	2f00      	cmp	r7, #0
   1eb00:	d0f4      	beq.n	1eaec <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   1eb02:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   1eb06:	f1a4 0914 	sub.w	r9, r4, #20
   1eb0a:	f104 0014 	add.w	r0, r4, #20
   1eb0e:	f7ff ff01 	bl	1e914 <z_abort_timeout>
		twork->poll_result = 0;
   1eb12:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   1eb16:	4649      	mov	r1, r9
   1eb18:	4638      	mov	r0, r7
   1eb1a:	f7ff fd72 	bl	1e602 <k_work_submit_to_queue>
		poller->is_polling = false;
   1eb1e:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   1eb22:	e7b4      	b.n	1ea8e <signal_poll_event+0x1e>

0001eb24 <z_handle_obj_poll_events>:
{
   1eb24:	4603      	mov	r3, r0
	return list->head == list;
   1eb26:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1eb28:	4283      	cmp	r3, r0
   1eb2a:	d008      	beq.n	1eb3e <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   1eb2c:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1eb30:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1eb32:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1eb34:	2300      	movs	r3, #0
	node->prev = NULL;
   1eb36:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   1eb3a:	f7ff bf99 	b.w	1ea70 <signal_poll_event>
}
   1eb3e:	4770      	bx	lr

0001eb40 <k_free>:
	if (ptr != NULL) {
   1eb40:	b120      	cbz	r0, 1eb4c <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   1eb42:	1f01      	subs	r1, r0, #4
   1eb44:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1eb48:	f7ff bb68 	b.w	1e21c <k_heap_free>
}
   1eb4c:	4770      	bx	lr
	...

0001eb50 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   1eb50:	f7f8 b84a 	b.w	16be8 <SystemInit>
