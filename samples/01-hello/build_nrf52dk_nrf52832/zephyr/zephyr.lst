
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
	}
	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
   0:	20004b80 	.word	0x20004b80
   4:	00003879 	.word	0x00003879
   8:	000199fb 	.word	0x000199fb

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
   c:	000038cd 	.word	0x000038cd
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_init(mutex);
  10:	000038cd 	.word	0x000038cd
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
  14:	000038cd 	.word	0x000038cd
  18:	000038cd 	.word	0x000038cd
	...

	fs->flash_device = device_get_binding(dev_name);
	if (!fs->flash_device) {
		LOG_ERR("No valid flash device found");
  2c:	000037d5 	.word	0x000037d5
  30:	000038cd 	.word	0x000038cd
		return -ENXIO;
  34:	00000000 	.word	0x00000000
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
  38:	00003781 	.word	0x00003781
  3c:	0001963d 	.word	0x0001963d

00000040 <_irq_vector_table>:
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
  40:	00003839 0001cb0f 00003839 00003839     98......98..98..
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
  50:	00003839 00003839 00003839 00003839     98..98..98..98..
		return -EINVAL;
  60:	00003839 00003839 00003839 00003839     98..98..98..98..
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
  70:	00003839 00003839 00003839 00003839     98..98..98..98..
		LOG_ERR("Unsupported write block size");
  80:	00003839 00003839 00003839 00003839     98..98..98..98..
  90:	00003839 00003839 00003839 00003839     98..98..98..98..
		LOG_ERR("Unable to get page info");
  a0:	00003839 00003839 00003839 00003839     98..98..98..98..
	if (!fs->sector_size || fs->sector_size % info.size) {
  b0:	00003839 00003839 00003839 00003839     98..98..98..98..
		LOG_ERR("Invalid sector size");
  c0:	00003839 00003839 00003839 00003839     98..98..98..98..
  d0:	00003839 00003839 00003839              98..98..98..

Disassembly of section text:

000000e0 <__aeabi_uldivmod>:
	uint8_t erase_value = fs->flash_parameters->erase_value;
      e0:	b953      	cbnz	r3, f8 <__aeabi_uldivmod+0x18>
      e2:	b94a      	cbnz	r2, f8 <__aeabi_uldivmod+0x18>
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
      e4:	2900      	cmp	r1, #0
      e6:	bf08      	it	eq
      e8:	2800      	cmpeq	r0, #0
      ea:	bf1c      	itt	ne
      ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
      f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
      f4:	f000 b980 	b.w	3f8 <__aeabi_idiv0>
      f8:	f1ad 0c08 	sub.w	ip, sp, #8
      fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
	for (i = 0; i < fs->sector_count; i++) {
     100:	f000 f81a 	bl	138 <__udivmoddi4>
     104:	f8dd e004 	ldr.w	lr, [sp, #4]
	if (closed_sectors == fs->sector_count) {
     108:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     10c:	b004      	add	sp, #16
     10e:	4770      	bx	lr

00000110 <__popcountsi2>:
	if (i == fs->sector_count) {
     110:	0843      	lsrs	r3, r0, #1
     112:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
     116:	1ac0      	subs	r0, r0, r3
     118:	0883      	lsrs	r3, r0, #2
     11a:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
     11e:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     122:	4418      	add	r0, r3
		if (!rc) {
     124:	eb00 1010 	add.w	r0, r0, r0, lsr #4
			nvs_sector_advance(fs, &addr);
     128:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     12c:	eb00 2000 	add.w	r0, r0, r0, lsl #8
	rc = nvs_recover_last_ate(fs, &addr);
     130:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     134:	0e00      	lsrs	r0, r0, #24
	if (rc) {
     136:	4770      	bx	lr

00000138 <__udivmoddi4>:
     138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	fs->data_wra = addr & ADDR_SECT_MASK;
     13c:	9e08      	ldr	r6, [sp, #32]
	fs->ate_wra = addr;
     13e:	460d      	mov	r5, r1
	fs->data_wra = addr & ADDR_SECT_MASK;
     140:	4604      	mov	r4, r0
     142:	468e      	mov	lr, r1
	while (fs->ate_wra >= fs->data_wra) {
     144:	2b00      	cmp	r3, #0
     146:	f040 8082 	bne.w	24e <CONFIG_FLASH_SIZE+0x4e>
     14a:	428a      	cmp	r2, r1
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
     14c:	4617      	mov	r7, r2
     14e:	d946      	bls.n	1de <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x1e>
     150:	fab2 f282 	clz	r2, r2
     154:	b14a      	cbz	r2, 16a <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x20>
		if (rc) {
     156:	f1c2 0120 	rsb	r1, r2, #32
     15a:	fa05 f302 	lsl.w	r3, r5, r2
		if (data8[i] != value) {
     15e:	fa20 f101 	lsr.w	r1, r0, r1
     162:	4097      	lsls	r7, r2
     164:	ea41 0e03 	orr.w	lr, r1, r3
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
     168:	4094      	lsls	r4, r2
     16a:	ea4f 4817 	mov.w	r8, r7, lsr #16
	addr = fs->ate_wra & ADDR_SECT_MASK;
     16e:	0c23      	lsrs	r3, r4, #16
	nvs_sector_advance(fs, &addr);
     170:	fbbe fcf8 	udiv	ip, lr, r8
     174:	b2b9      	uxth	r1, r7
	addr = fs->ate_wra & ADDR_SECT_MASK;
     176:	fb08 ee1c 	mls	lr, r8, ip, lr
	nvs_sector_advance(fs, &addr);
     17a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
     17e:	fb0c f001 	mul.w	r0, ip, r1
     182:	4298      	cmp	r0, r3
     184:	d90a      	bls.n	19c <CONFIG_BT_MESH_TX_SEG_RETRANS_TIMEOUT_UNICAST+0xc>
     186:	18fb      	adds	r3, r7, r3
	if (rc < 0) {
     188:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
     18c:	f080 8116 	bcs.w	3bc <CONFIG_BT_MESH_ADV_STACK_SIZE+0xbc>
     190:	4298      	cmp	r0, r3
	if (rc) {
     192:	f240 8113 	bls.w	3bc <CONFIG_BT_MESH_ADV_STACK_SIZE+0xbc>
     196:	f1ac 0c02 	sub.w	ip, ip, #2
	fs->ready = true;
     19a:	443b      	add	r3, r7
     19c:	1a1b      	subs	r3, r3, r0
     19e:	b2a4      	uxth	r4, r4
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
     1a0:	fbb3 f0f8 	udiv	r0, r3, r8
     1a4:	fb08 3310 	mls	r3, r8, r0, r3
     1a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1ac:	fb00 f101 	mul.w	r1, r0, r1
     1b0:	42a1      	cmp	r1, r4
     1b2:	d909      	bls.n	1c8 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x8>
     1b4:	193c      	adds	r4, r7, r4
	LOG_INF("alloc wra: %d, %x",
     1b6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     1ba:	f080 8101 	bcs.w	3c0 <CONFIG_BT_MESH_ADV_STACK_SIZE+0xc0>
     1be:	42a1      	cmp	r1, r4
     1c0:	f240 80fe 	bls.w	3c0 <CONFIG_BT_MESH_ADV_STACK_SIZE+0xc0>
	LOG_INF("data wra: %d, %x",
     1c4:	3802      	subs	r0, #2
     1c6:	443c      	add	r4, r7
     1c8:	1a64      	subs	r4, r4, r1
     1ca:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1ce:	2100      	movs	r1, #0
     1d0:	b11e      	cbz	r6, 1da <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x1a>
	return 0;
     1d2:	40d4      	lsrs	r4, r2
		       (uint16_t)(fs->sector_size - ate_size);
     1d4:	2300      	movs	r3, #0
		addr = (i << ADDR_SECT_SHIFT) +
     1d6:	e9c6 4300 	strd	r4, r3, [r6]
		       (uint16_t)(fs->sector_size - ate_size);
     1da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		addr = (i << ADDR_SECT_SHIFT) +
     1de:	b902      	cbnz	r2, 1e2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x22>
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
     1e0:	deff      	udf	#255	; 0xff
     1e2:	fab2 f282 	clz	r2, r2
		addr = (i << ADDR_SECT_SHIFT) +
     1e6:	2a00      	cmp	r2, #0
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
     1e8:	d14f      	bne.n	28a <CONFIG_BT_HCI_TX_STACK_SIZE+0xa>
     1ea:	1bcb      	subs	r3, r1, r7
		if (rc) {
     1ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
			nvs_sector_advance(fs, &addr);
     1f0:	fa1f f887 	uxth.w	r8, r7
     1f4:	2101      	movs	r1, #1
			closed_sectors++;
     1f6:	fbb3 fcfe 	udiv	ip, r3, lr
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
     1fa:	0c25      	lsrs	r5, r4, #16
     1fc:	fb0e 331c 	mls	r3, lr, ip, r3
			closed_sectors++;
     200:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
     204:	fb08 f30c 	mul.w	r3, r8, ip
			if (!rc) {
     208:	42ab      	cmp	r3, r5
     20a:	d907      	bls.n	21c <CONFIG_FLASH_SIZE+0x1c>
	for (i = 0; i < fs->sector_count; i++) {
     20c:	197d      	adds	r5, r7, r5
     20e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
     212:	d202      	bcs.n	21a <CONFIG_FLASH_SIZE+0x1a>
				rc = -ESPIPE;
     214:	42ab      	cmp	r3, r5
     216:	f200 80e7 	bhi.w	3e8 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS>
	if (rc) {
     21a:	4684      	mov	ip, r0
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
     21c:	1aed      	subs	r5, r5, r3
     21e:	b2a3      	uxth	r3, r4
     220:	fbb5 f0fe 	udiv	r0, r5, lr
		if (rc) {
     224:	fb0e 5510 	mls	r5, lr, r0, r5
     228:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
     22c:	fb08 f800 	mul.w	r8, r8, r0
     230:	45a0      	cmp	r8, r4
     232:	d907      	bls.n	244 <CONFIG_FLASH_SIZE+0x44>
     234:	193c      	adds	r4, r7, r4
     236:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
     23a:	d202      	bcs.n	242 <CONFIG_FLASH_SIZE+0x42>
		rc = nvs_gc(fs);
     23c:	45a0      	cmp	r8, r4
     23e:	f200 80d7 	bhi.w	3f0 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x8>
     242:	4618      	mov	r0, r3
		goto end;
     244:	eba4 0408 	sub.w	r4, r4, r8
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
     248:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     24c:	e7c0      	b.n	1d0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x10>
     24e:	428b      	cmp	r3, r1
		if (rc < 0) {
     250:	d908      	bls.n	264 <CONFIG_BT_MESH_RPL_STORE_TIMEOUT+0xc>
     252:	2e00      	cmp	r6, #0
		if (!rc) {
     254:	f000 80af 	beq.w	3b6 <CONFIG_BT_MESH_ADV_STACK_SIZE+0xb6>
		fs->data_wra += fs->flash_parameters->write_block_size;
     258:	2100      	movs	r1, #0
     25a:	e9c6 0500 	strd	r0, r5, [r6]
     25e:	4608      	mov	r0, r1
	while (fs->ate_wra > fs->data_wra) {
     260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     264:	fab3 f183 	clz	r1, r3
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
     268:	2900      	cmp	r1, #0
     26a:	d14b      	bne.n	304 <CONFIG_BT_MESH_ADV_STACK_SIZE+0x4>
     26c:	42ab      	cmp	r3, r5
     26e:	d302      	bcc.n	276 <CONFIG_BT_MESH_RPL_STORE_TIMEOUT+0x1e>
     270:	4282      	cmp	r2, r0
     272:	f200 80b7 	bhi.w	3e4 <CONFIG_BT_MESH_ADV_STACK_SIZE+0xe4>
     276:	1a84      	subs	r4, r0, r2
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
     278:	eb65 0303 	sbc.w	r3, r5, r3
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
     27c:	2001      	movs	r0, #1
     27e:	469e      	mov	lr, r3
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
     280:	2e00      	cmp	r6, #0
     282:	d0aa      	beq.n	1da <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x1a>
     284:	e9c6 4e00 	strd	r4, lr, [r6]
		if (rc) {
     288:	e7a7      	b.n	1da <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x1a>
     28a:	f1c2 0c20 	rsb	ip, r2, #32
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
     28e:	fa01 f302 	lsl.w	r3, r1, r2
     292:	4097      	lsls	r7, r2
     294:	fa20 f00c 	lsr.w	r0, r0, ip
		rc = -EDEADLK;
     298:	ea4f 4e17 	mov.w	lr, r7, lsr #16
		if (nvs_ate_valid(fs, &last_ate)) {
     29c:	fa21 fc0c 	lsr.w	ip, r1, ip
     2a0:	4318      	orrs	r0, r3
     2a2:	fbbc f1fe 	udiv	r1, ip, lr
     2a6:	0c05      	lsrs	r5, r0, #16
			fs->data_wra = addr & ADDR_SECT_MASK;
     2a8:	fb0e cc11 	mls	ip, lr, r1, ip
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
     2ac:	fa1f f887 	uxth.w	r8, r7
     2b0:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
			fs->data_wra = addr & ADDR_SECT_MASK;
     2b4:	fb01 f308 	mul.w	r3, r1, r8
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
     2b8:	42ab      	cmp	r3, r5
     2ba:	fa04 f402 	lsl.w	r4, r4, r2
     2be:	d909      	bls.n	2d4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x54>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
     2c0:	197d      	adds	r5, r7, r5
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
     2c2:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
		fs->ate_wra -= ate_size;
     2c6:	f080 808b 	bcs.w	3e0 <CONFIG_BT_MESH_ADV_STACK_SIZE+0xe0>
     2ca:	42ab      	cmp	r3, r5
     2cc:	f240 8088 	bls.w	3e0 <CONFIG_BT_MESH_ADV_STACK_SIZE+0xe0>
     2d0:	3902      	subs	r1, #2
     2d2:	443d      	add	r5, r7
     2d4:	1aeb      	subs	r3, r5, r3
     2d6:	b285      	uxth	r5, r0
     2d8:	fbb3 f0fe 	udiv	r0, r3, lr
     2dc:	fb0e 3310 	mls	r3, lr, r0, r3
     2e0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2e4:	fb00 f308 	mul.w	r3, r0, r8
     2e8:	42ab      	cmp	r3, r5
     2ea:	d907      	bls.n	2fc <CONFIG_BT_HCI_TX_STACK_SIZE+0x7c>
     2ec:	197d      	adds	r5, r7, r5
     2ee:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     2f2:	d271      	bcs.n	3d8 <CONFIG_BT_MESH_ADV_STACK_SIZE+0xd8>
     2f4:	42ab      	cmp	r3, r5
     2f6:	d96f      	bls.n	3d8 <CONFIG_BT_MESH_ADV_STACK_SIZE+0xd8>
     2f8:	3802      	subs	r0, #2
     2fa:	443d      	add	r5, r7
     2fc:	1aeb      	subs	r3, r5, r3
     2fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     302:	e778      	b.n	1f6 <CONFIG_BT_MESH_PB_ADV_RETRANS_TIMEOUT+0x2>
     304:	f1c1 0c20 	rsb	ip, r1, #32
     308:	408b      	lsls	r3, r1
     30a:	fa22 f70c 	lsr.w	r7, r2, ip
     30e:	431f      	orrs	r7, r3
     310:	fa20 f40c 	lsr.w	r4, r0, ip
     314:	fa05 f301 	lsl.w	r3, r5, r1
     318:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     31c:	fa25 f50c 	lsr.w	r5, r5, ip
     320:	431c      	orrs	r4, r3
     322:	0c23      	lsrs	r3, r4, #16
     324:	fbb5 f9fe 	udiv	r9, r5, lr
     328:	fa1f f887 	uxth.w	r8, r7
     32c:	fb0e 5519 	mls	r5, lr, r9, r5
     330:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     334:	fb09 fa08 	mul.w	sl, r9, r8
     338:	45aa      	cmp	sl, r5
     33a:	fa02 f201 	lsl.w	r2, r2, r1
     33e:	fa00 f301 	lsl.w	r3, r0, r1
     342:	d908      	bls.n	356 <CONFIG_BT_MESH_ADV_STACK_SIZE+0x56>
     344:	197d      	adds	r5, r7, r5
     346:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     34a:	d247      	bcs.n	3dc <CONFIG_BT_MESH_ADV_STACK_SIZE+0xdc>
     34c:	45aa      	cmp	sl, r5
     34e:	d945      	bls.n	3dc <CONFIG_BT_MESH_ADV_STACK_SIZE+0xdc>
     350:	f1a9 0902 	sub.w	r9, r9, #2
     354:	443d      	add	r5, r7
     356:	eba5 050a 	sub.w	r5, r5, sl
     35a:	b2a4      	uxth	r4, r4
     35c:	fbb5 f0fe 	udiv	r0, r5, lr
     360:	fb0e 5510 	mls	r5, lr, r0, r5
     364:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     368:	fb00 f808 	mul.w	r8, r0, r8
     36c:	45a0      	cmp	r8, r4
     36e:	d907      	bls.n	380 <CONFIG_BT_MESH_ADV_STACK_SIZE+0x80>
     370:	193c      	adds	r4, r7, r4
     372:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     376:	d22d      	bcs.n	3d4 <CONFIG_BT_MESH_ADV_STACK_SIZE+0xd4>
     378:	45a0      	cmp	r8, r4
     37a:	d92b      	bls.n	3d4 <CONFIG_BT_MESH_ADV_STACK_SIZE+0xd4>
     37c:	3802      	subs	r0, #2
     37e:	443c      	add	r4, r7
     380:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     384:	eba4 0408 	sub.w	r4, r4, r8
     388:	fba0 8902 	umull	r8, r9, r0, r2
     38c:	454c      	cmp	r4, r9
     38e:	46c6      	mov	lr, r8
     390:	464d      	mov	r5, r9
     392:	d319      	bcc.n	3c8 <CONFIG_BT_MESH_ADV_STACK_SIZE+0xc8>
     394:	d016      	beq.n	3c4 <CONFIG_BT_MESH_ADV_STACK_SIZE+0xc4>
     396:	b15e      	cbz	r6, 3b0 <CONFIG_BT_MESH_ADV_STACK_SIZE+0xb0>
     398:	ebb3 020e 	subs.w	r2, r3, lr
     39c:	eb64 0405 	sbc.w	r4, r4, r5
     3a0:	fa04 fc0c 	lsl.w	ip, r4, ip
     3a4:	40ca      	lsrs	r2, r1
     3a6:	ea4c 0202 	orr.w	r2, ip, r2
     3aa:	40cc      	lsrs	r4, r1
     3ac:	e9c6 2400 	strd	r2, r4, [r6]
     3b0:	2100      	movs	r1, #0
     3b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3b6:	4631      	mov	r1, r6
     3b8:	4630      	mov	r0, r6
     3ba:	e70e      	b.n	1da <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x1a>
     3bc:	46ac      	mov	ip, r5
     3be:	e6ed      	b.n	19c <CONFIG_BT_MESH_TX_SEG_RETRANS_TIMEOUT_UNICAST+0xc>
     3c0:	4618      	mov	r0, r3
     3c2:	e701      	b.n	1c8 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x8>
     3c4:	4543      	cmp	r3, r8
     3c6:	d2e6      	bcs.n	396 <CONFIG_BT_MESH_ADV_STACK_SIZE+0x96>
     3c8:	ebb8 0e02 	subs.w	lr, r8, r2
     3cc:	eb69 0507 	sbc.w	r5, r9, r7
     3d0:	3801      	subs	r0, #1
     3d2:	e7e0      	b.n	396 <CONFIG_BT_MESH_ADV_STACK_SIZE+0x96>
     3d4:	4628      	mov	r0, r5
     3d6:	e7d3      	b.n	380 <CONFIG_BT_MESH_ADV_STACK_SIZE+0x80>
     3d8:	4660      	mov	r0, ip
     3da:	e78f      	b.n	2fc <CONFIG_BT_HCI_TX_STACK_SIZE+0x7c>
     3dc:	4681      	mov	r9, r0
     3de:	e7ba      	b.n	356 <CONFIG_BT_MESH_ADV_STACK_SIZE+0x56>
     3e0:	4661      	mov	r1, ip
     3e2:	e777      	b.n	2d4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x54>
     3e4:	4608      	mov	r0, r1
     3e6:	e74b      	b.n	280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     3e8:	f1ac 0c02 	sub.w	ip, ip, #2
     3ec:	443d      	add	r5, r7
     3ee:	e715      	b.n	21c <CONFIG_FLASH_SIZE+0x1c>
     3f0:	3802      	subs	r0, #2
     3f2:	443c      	add	r4, r7
     3f4:	e726      	b.n	244 <CONFIG_FLASH_SIZE+0x44>
     3f6:	bf00      	nop

000003f8 <__aeabi_idiv0>:
     3f8:	4770      	bx	lr
     3fa:	bf00      	nop
     3fc:	0000      	movs	r0, r0
	...

00000400 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
     400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     404:	4688      	mov	r8, r1
	uint32_t window_widening_event_us;
	uint32_t preamble_to_addr_us;

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
     406:	e9d0 910a 	ldrd	r9, r1, [r0, #40]	; 0x28
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
     40a:	6b05      	ldr	r5, [r0, #48]	; 0x30
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
     40c:	4f16      	ldr	r7, [pc, #88]	; (468 <CONFIG_LOG_BUFFER_SIZE+0x68>)
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
     40e:	194c      	adds	r4, r1, r5
	start_to_address_expected_us = EVENT_JITTER_US +
     410:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
     412:	45a1      	cmp	r9, r4
{
     414:	4616      	mov	r6, r2
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
     416:	a312      	add	r3, pc, #72	; (adr r3, 460 <CONFIG_LOG_BUFFER_SIZE+0x60>)
     418:	e9d3 2300 	ldrd	r2, r3, [r3]
	if (start_to_address_actual_us <= start_to_address_expected_us) {
     41c:	d815      	bhi.n	44a <ull_drift_ticks_get+0x4a>
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
     41e:	fba1 0107 	umull	r0, r1, r1, r7
     422:	f7ff fe5d 	bl	e0 <__aeabi_uldivmod>
     426:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
     42a:	f8c8 0000 	str.w	r0, [r8]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
     42e:	eba4 0009 	sub.w	r0, r4, r9
					       start_to_address_actual_us));
	} else {
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
     432:	a30b      	add	r3, pc, #44	; (adr r3, 460 <CONFIG_LOG_BUFFER_SIZE+0x60>)
     434:	e9d3 2300 	ldrd	r2, r3, [r3]
     438:	fba0 0107 	umull	r0, r1, r0, r7
     43c:	f7ff fe50 	bl	e0 <__aeabi_uldivmod>
     440:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
     444:	6030      	str	r0, [r6, #0]
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
     446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
     44a:	fba9 0107 	umull	r0, r1, r9, r7
     44e:	f7ff fe47 	bl	e0 <__aeabi_uldivmod>
     452:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
     456:	f8c8 0000 	str.w	r0, [r8]
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
     45a:	f105 0030 	add.w	r0, r5, #48	; 0x30
     45e:	e7e8      	b.n	432 <ull_drift_ticks_get+0x32>
     460:	1afd498d 	.word	0x1afd498d
     464:	00000007 	.word	0x00000007
     468:	3b9aca00 	.word	0x3b9aca00
     46c:	00000000 	.word	0x00000000

00000470 <ll_adv_enable>:
	uint8_t aux_is_started = 0U;
	uint32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
uint8_t ll_adv_enable(uint8_t enable)
{
     470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     474:	b08f      	sub	sp, #60	; 0x3c
	struct pdu_adv *pdu_adv;
	struct ll_adv_set *adv;
	struct lll_adv *lll;
	uint32_t ret;

	if (!enable) {
     476:	b930      	cbnz	r0, 486 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x12>
		return disable(handle);
     478:	f011 f972 	bl	11760 <disable.constprop.0>
     47c:	4607      	mov	r7, r0
		conn_release(adv);
	}
#endif /* CONFIG_BT_PERIPHERAL */

	return BT_HCI_ERR_CMD_DISALLOWED;
}
     47e:	4638      	mov	r0, r7
     480:	b00f      	add	sp, #60	; 0x3c
     482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
     486:	4bcc      	ldr	r3, [pc, #816]	; (7b8 <CONFIG_BT_COMPANY_ID+0x1c7>)
     488:	f893 704a 	ldrb.w	r7, [r3, #74]	; 0x4a
     48c:	f017 0701 	ands.w	r7, r7, #1
     490:	461e      	mov	r6, r3
     492:	d001      	beq.n	498 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x24>
	return BT_HCI_ERR_CMD_DISALLOWED;
     494:	270c      	movs	r7, #12
     496:	e7f2      	b.n	47e <CONFIG_BT_HCI_ECC_STACK_SIZE+0xa>
	lll_adv_pdu_enqueue(&lll->adv_data, idx);
}

static inline struct pdu_adv *lll_adv_data_peek(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     498:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
     49c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
     4a0:	f8d2 802c 	ldr.w	r8, [r2, #44]	; 0x2c
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     4a4:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
     4a8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     4ac:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
	if (pdu_adv_to_update) {
     4b0:	f1b8 0f00 	cmp.w	r8, #0
     4b4:	d009      	beq.n	4ca <CONFIG_BT_HCI_ECC_STACK_SIZE+0x56>
	adv_addr = adva_update(adv, pdu);
     4b6:	4640      	mov	r0, r8
     4b8:	f01c f8c0 	bl	1c63c <adva_update.isra.0>
		if (pdu_adv_to_update->tx_addr &&
     4bc:	f898 3000 	ldrb.w	r3, [r8]
     4c0:	065a      	lsls	r2, r3, #25
     4c2:	d418      	bmi.n	4f6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe>
	adv_addr = adva_update(adv, pdu);
     4c4:	4648      	mov	r0, r9
     4c6:	f01c f8b9 	bl	1c63c <adva_update.isra.0>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
     4ca:	f898 3000 	ldrb.w	r3, [r8]
     4ce:	f013 0f0e 	tst.w	r3, #14
     4d2:	f040 809d 	bne.w	610 <CONFIG_BT_COMPANY_ID+0x1f>
		if (lll->conn) {
     4d6:	6a33      	ldr	r3, [r6, #32]
     4d8:	2b00      	cmp	r3, #0
     4da:	d1db      	bne.n	494 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x20>
		link = ll_rx_link_alloc();
     4dc:	f010 fb80 	bl	10be0 <ll_rx_link_alloc>
		if (!link) {
     4e0:	4682      	mov	sl, r0
     4e2:	b130      	cbz	r0, 4f2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa>
		node_rx = ll_rx_alloc();
     4e4:	f010 fb88 	bl	10bf8 <ll_rx_alloc>
		if (!node_rx) {
     4e8:	4683      	mov	fp, r0
     4ea:	b958      	cbnz	r0, 504 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c>
			ll_rx_link_release(link);
     4ec:	4650      	mov	r0, sl
     4ee:	f010 fb7d 	bl	10bec <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
     4f2:	2707      	movs	r7, #7
     4f4:	e7c3      	b.n	47e <CONFIG_BT_HCI_ECC_STACK_SIZE+0xa>
		    !mem_nz((void *)adv_addr, BDADDR_SIZE)) {
     4f6:	2106      	movs	r1, #6
     4f8:	f01b fd70 	bl	1bfdc <mem_nz>
		if (pdu_adv_to_update->tx_addr &&
     4fc:	2800      	cmp	r0, #0
     4fe:	d1e1      	bne.n	4c4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x50>
			return BT_HCI_ERR_INVALID_PARAM;
     500:	2712      	movs	r7, #18
     502:	e7bc      	b.n	47e <CONFIG_BT_HCI_ECC_STACK_SIZE+0xa>
		conn = ll_conn_acquire();
     504:	f011 fb9e 	bl	11c44 <ll_conn_acquire>
		if (!conn) {
     508:	4604      	mov	r4, r0
     50a:	b918      	cbnz	r0, 514 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2c>
			ll_rx_release(node_rx);
     50c:	4658      	mov	r0, fp
     50e:	f010 fb79 	bl	10c04 <ll_rx_release>
     512:	e7eb      	b.n	4ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4>
		conn_lll->handle = 0xFFFF;
     514:	f64f 72ff 	movw	r2, #65535	; 0xffff
     518:	8502      	strh	r2, [r0, #40]	; 0x28
		if (!conn_lll->link_tx_free) {
     51a:	6e82      	ldr	r2, [r0, #104]	; 0x68
		conn_lll = &conn->lll;
     51c:	f100 031c 	add.w	r3, r0, #28
		if (!conn_lll->link_tx_free) {
     520:	b912      	cbnz	r2, 528 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x40>
			conn_lll->link_tx_free = &conn_lll->link_tx;
     522:	f100 0260 	add.w	r2, r0, #96	; 0x60
     526:	6682      	str	r2, [r0, #104]	; 0x68
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
     528:	f104 025c 	add.w	r2, r4, #92	; 0x5c
     52c:	f104 0158 	add.w	r1, r4, #88	; 0x58
     530:	6ea0      	ldr	r0, [r4, #104]	; 0x68
     532:	930b      	str	r3, [sp, #44]	; 0x2c
     534:	f01b fd5d 	bl	1bff2 <memq_init>
		conn_lll->sn = 0;
     538:	f894 206e 	ldrb.w	r2, [r4, #110]	; 0x6e
     53c:	f022 0207 	bic.w	r2, r2, #7
     540:	f884 206e 	strb.w	r2, [r4, #110]	; 0x6e
		conn_lll->data_chan_sel = 0;
     544:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
     548:	f002 023f 	and.w	r2, r2, #63	; 0x3f
     54c:	f062 027f 	orn	r2, r2, #127	; 0x7f
     550:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
		conn_lll->slave.initiated = 0;
     554:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
     558:	f022 0207 	bic.w	r2, r2, #7
     55c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
		conn->connect_expire = 6;
     560:	2206      	movs	r2, #6
     562:	f8a4 2070 	strh.w	r2, [r4, #112]	; 0x70
		conn->common.fex_valid = 0;
     566:	f894 207c 	ldrb.w	r2, [r4, #124]	; 0x7c
		conn_lll->link_tx_free = NULL;
     56a:	2500      	movs	r5, #0
		conn->common.fex_valid = 0;
     56c:	f022 0207 	bic.w	r2, r2, #7
     570:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
		conn_lll->slave.window_widening_event_us = 0;
     574:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
		conn_lll->link_tx_free = NULL;
     578:	66a5      	str	r5, [r4, #104]	; 0x68
		conn_lll->packet_tx_head_len = 0;
     57a:	f8a4 506c 	strh.w	r5, [r4, #108]	; 0x6c
		conn_lll->latency_prepare = 0;
     57e:	85e5      	strh	r5, [r4, #46]	; 0x2e
		conn_lll->latency_event = 0;
     580:	6325      	str	r5, [r4, #48]	; 0x30
		conn_lll->data_chan_use = 0;
     582:	f884 503b 	strb.w	r5, [r4, #59]	; 0x3b
		conn_lll->slave.window_size_prepare_us = 0;
     586:	6525      	str	r5, [r4, #80]	; 0x50
		conn->supervision_expire = 0;
     588:	f8a4 5074 	strh.w	r5, [r4, #116]	; 0x74
		conn->procedure_expire = 0;
     58c:	f8a4 5078 	strh.w	r5, [r4, #120]	; 0x78
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
     590:	f8a4 5088 	strh.w	r5, [r4, #136]	; 0x88
     594:	f884 508a 	strb.w	r5, [r4, #138]	; 0x8a
		conn->llcp_rx = NULL;
     598:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
     59c:	f8a4 509c 	strh.w	r5, [r4, #156]	; 0x9c
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
     5a0:	f8a4 50b0 	strh.w	r5, [r4, #176]	; 0xb0
		conn->llcp_feature.features_conn = ll_feat_get();
     5a4:	f01c f818 	bl	1c5d8 <ll_feat_get>
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     5a8:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
		lll->conn = conn_lll;
     5ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     5ae:	6233      	str	r3, [r6, #32]
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     5b0:	f022 0203 	bic.w	r2, r2, #3
     5b4:	f884 20ca 	strb.w	r2, [r4, #202]	; 0xca
		conn->llcp_conn_param.disabled = 0;
     5b8:	f894 20f6 	ldrb.w	r2, [r4, #246]	; 0xf6
		conn->llcp_version.req = conn->llcp_version.ack = 0;
     5bc:	f8a4 50c8 	strh.w	r5, [r4, #200]	; 0xc8
		conn->llcp_feature.features_conn = ll_feat_get();
     5c0:	e9c4 012e 	strd	r0, r1, [r4, #184]	; 0xb8
		conn->llcp_conn_param.disabled = 0;
     5c4:	f365 1204 	bfi	r2, r5, #4, #1
		conn->llcp_feature.features_peer = 0;
     5c8:	2000      	movs	r0, #0
     5ca:	2100      	movs	r1, #0
		adv->node_rx_cc_free = node_rx;
     5cc:	e9c6 ab10 	strd	sl, fp, [r6, #64]	; 0x40
		conn->llcp_feature.features_peer = 0;
     5d0:	e9c4 0130 	strd	r0, r1, [r4, #192]	; 0xc0
		conn->tx_data = conn->tx_data_last = 0;
     5d4:	e9c4 554a 	strd	r5, r5, [r4, #296]	; 0x128
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
     5d8:	e9c4 5548 	strd	r5, r5, [r4, #288]	; 0x120
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->ref = 0U;
	hdr->disabled_cb = hdr->disabled_param = NULL;
     5dc:	e9c4 5505 	strd	r5, r5, [r4, #20]
		conn->llcp_terminate.req = conn->llcp_terminate.ack = 0;
     5e0:	f8a4 50d0 	strh.w	r5, [r4, #208]	; 0xd0
		conn->llcp_terminate.reason_final = 0;
     5e4:	f884 50d3 	strb.w	r5, [r4, #211]	; 0xd3
		conn->llcp_terminate.node_rx.hdr.link = link;
     5e8:	f8c4 a0d4 	str.w	sl, [r4, #212]	; 0xd4
		conn->llcp_conn_param.req = 0;
     5ec:	f8a4 50f4 	strh.w	r5, [r4, #244]	; 0xf4
		conn->llcp_conn_param.disabled = 0;
     5f0:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
		conn->slave.ticks_to_offset = 0;
     5f4:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
     5f8:	f8c4 511c 	str.w	r5, [r4, #284]	; 0x11c
	hdr->ref = 0U;
     5fc:	7025      	strb	r5, [r4, #0]

static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
     5fe:	61e4      	str	r4, [r4, #28]
		err = lll_clock_wait();
     600:	f013 f8ce 	bl	137a0 <lll_clock_wait>
		if (err) {
     604:	b120      	cbz	r0, 610 <CONFIG_BT_COMPANY_ID+0x1f>
			conn_release(adv);
     606:	486c      	ldr	r0, [pc, #432]	; (7b8 <CONFIG_BT_COMPANY_ID+0x1c7>)
     608:	f010 fefa 	bl	11400 <conn_release>
			return BT_HCI_ERR_HW_FAILURE;
     60c:	2703      	movs	r7, #3
     60e:	e736      	b.n	47e <CONFIG_BT_HCI_ECC_STACK_SIZE+0xa>
	uint8_t ch_map = lll->chan_map;
     610:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     614:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
     616:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     61a:	f10d 0033 	add.w	r0, sp, #51	; 0x33
	uint8_t ch_map = lll->chan_map;
     61e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     622:	f01b fd12 	bl	1c04a <util_ones_count_get>
	if (adv_chn_cnt == 0) {
     626:	2800      	cmp	r0, #0
     628:	f000 80b9 	beq.w	79e <CONFIG_BT_COMPANY_ID+0x1ad>
		if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
     62c:	f898 1000 	ldrb.w	r1, [r8]
     630:	f001 010f 	and.w	r1, r1, #15
     634:	2902      	cmp	r1, #2
     636:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
     63a:	d16f      	bne.n	71c <CONFIG_BT_COMPANY_ID+0x12b>
			adv_size += pdu_adv->len;
     63c:	f898 3001 	ldrb.w	r3, [r8, #1]
     640:	3310      	adds	r3, #16
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
     642:	00db      	lsls	r3, r3, #3
     644:	4358      	muls	r0, r3
     646:	f500 70aa 	add.w	r0, r0, #340	; 0x154
     64a:	2364      	movs	r3, #100	; 0x64
     64c:	fb03 0002 	mla	r0, r3, r2, r0
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     650:	495a      	ldr	r1, [pc, #360]	; (7bc <CONFIG_BT_COMPANY_ID+0x1cb>)
     652:	61f6      	str	r6, [r6, #28]
     654:	2400      	movs	r4, #0
	adv->ull.ticks_prepare_to_start =
     656:	2331      	movs	r3, #49	; 0x31
	adv->ull.ticks_preempt_to_start =
     658:	e9c6 3402 	strd	r3, r4, [r6, #8]
	hdr->disabled_cb = hdr->disabled_param = NULL;
     65c:	e9c6 4405 	strd	r4, r4, [r6, #20]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     660:	a353      	add	r3, pc, #332	; (adr r3, 7b0 <CONFIG_BT_COMPANY_ID+0x1bf>)
     662:	e9d3 2300 	ldrd	r2, r3, [r3]
	hdr->ref = 0U;
     666:	7034      	strb	r4, [r6, #0]
	adv->ull.ticks_active_to_start = 0;
     668:	6074      	str	r4, [r6, #4]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     66a:	fba0 0101 	umull	r0, r1, r0, r1
     66e:	f7ff fd37 	bl	e0 <__aeabi_uldivmod>
     672:	6130      	str	r0, [r6, #16]
	uint16_t interval = adv->interval;
     674:	f8b6 9048 	ldrh.w	r9, [r6, #72]	; 0x48
	ticks_anchor = ticker_ticks_now_get();
     678:	f01b ff5b 	bl	1c532 <ticker_ticks_now_get>
     67c:	4605      	mov	r5, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
     67e:	f1b9 0f00 	cmp.w	r9, #0
     682:	d106      	bne.n	692 <CONFIG_BT_COMPANY_ID+0xa1>
     684:	f898 4000 	ldrb.w	r4, [r8]
     688:	f004 040f 	and.w	r4, r4, #15
     68c:	1e63      	subs	r3, r4, #1
     68e:	425c      	negs	r4, r3
     690:	415c      	adcs	r4, r3
     692:	f896 8024 	ldrb.w	r8, [r6, #36]	; 0x24
     696:	6933      	ldr	r3, [r6, #16]
     698:	f8df b134 	ldr.w	fp, [pc, #308]	; 7d0 <CONFIG_BT_COMPANY_ID+0x1df>
     69c:	4a48      	ldr	r2, [pc, #288]	; (7c0 <CONFIG_BT_COMPANY_ID+0x1cf>)
     69e:	f364 0800 	bfi	r8, r4, #0, #1
     6a2:	f886 8024 	strb.w	r8, [r6, #36]	; 0x24
	if (lll->is_hdcd) {
     6a6:	f04f 0a02 	mov.w	sl, #2
     6aa:	f018 0801 	ands.w	r8, r8, #1
     6ae:	ac0d      	add	r4, sp, #52	; 0x34
		ret_cb = TICKER_STATUS_BUSY;
     6b0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
	if (lll->is_hdcd) {
     6b4:	d051      	beq.n	75a <CONFIG_BT_COMPANY_ID+0x169>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     6b6:	2000      	movs	r0, #0
     6b8:	e9cd 2605 	strd	r2, r6, [sp, #20]
     6bc:	e9cd 0300 	strd	r0, r3, [sp]
     6c0:	9304      	str	r3, [sp, #16]
     6c2:	2103      	movs	r1, #3
     6c4:	e9cd b407 	strd	fp, r4, [sp, #28]
     6c8:	e9cd 0002 	strd	r0, r0, [sp, #8]
     6cc:	462b      	mov	r3, r5
     6ce:	4652      	mov	r2, sl
     6d0:	f01b fefc 	bl	1c4cc <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
     6d4:	4621      	mov	r1, r4
     6d6:	f010 fbab 	bl	10e30 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
     6da:	2800      	cmp	r0, #0
     6dc:	d15f      	bne.n	79e <CONFIG_BT_COMPANY_ID+0x1ad>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     6de:	4a39      	ldr	r2, [pc, #228]	; (7c4 <CONFIG_BT_COMPANY_ID+0x1d3>)
     6e0:	9606      	str	r6, [sp, #24]
     6e2:	f24a 33d8 	movw	r3, #41944	; 0xa3d8
     6e6:	e9cd 0204 	strd	r0, r2, [sp, #16]
     6ea:	9300      	str	r3, [sp, #0]
     6ec:	e9cd b407 	strd	fp, r4, [sp, #28]
     6f0:	e9cd 0002 	strd	r0, r0, [sp, #8]
     6f4:	9001      	str	r0, [sp, #4]
     6f6:	462b      	mov	r3, r5
     6f8:	2201      	movs	r2, #1
     6fa:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
     6fc:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     700:	f01b fee4 	bl	1c4cc <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
     704:	4621      	mov	r1, r4
     706:	f010 fb93 	bl	10e30 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
     70a:	2800      	cmp	r0, #0
     70c:	d147      	bne.n	79e <CONFIG_BT_COMPANY_ID+0x1ad>
	adv->is_enabled = 1;
     70e:	f896 304a 	ldrb.w	r3, [r6, #74]	; 0x4a
     712:	f043 0301 	orr.w	r3, r3, #1
     716:	f886 304a 	strb.w	r3, [r6, #74]	; 0x4a
	return 0;
     71a:	e6b0      	b.n	47e <CONFIG_BT_HCI_ECC_STACK_SIZE+0xa>
			if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
     71c:	2901      	cmp	r1, #1
     71e:	d018      	beq.n	752 <CONFIG_BT_COMPANY_ID+0x161>
					BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
     720:	f899 3001 	ldrb.w	r3, [r9, #1]
     724:	3310      	adds	r3, #16
		const uint16_t scan_rsp_us =
     726:	00db      	lsls	r3, r3, #3
			} else if (pdu_adv->type == PDU_ADV_TYPE_ADV_IND) {
     728:	b969      	cbnz	r1, 746 <CONFIG_BT_COMPANY_ID+0x155>
				adv_size += pdu_adv->len;
     72a:	f898 0001 	ldrb.w	r0, [r8, #1]
				slot_us += scan_req_us + EVENT_IFS_MAX_US +
     72e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
				adv_size += pdu_adv->len;
     732:	3010      	adds	r0, #16
			slot_us += (BYTES2US(adv_size, phy) + EVENT_IFS_MAX_US
     734:	00c1      	lsls	r1, r0, #3
     736:	3398      	adds	r3, #152	; 0x98
     738:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
				  + rx_to_us + rxtx_turn_us) * (adv_chn_cnt-1)
     73c:	f501 709a 	add.w	r0, r1, #308	; 0x134
			slot_us += (BYTES2US(adv_size, phy) + EVENT_IFS_MAX_US
     740:	fb02 3000 	mla	r0, r2, r0, r3
     744:	e784      	b.n	650 <CONFIG_BT_COMPANY_ID+0x5f>
			} else if (pdu_adv->type == PDU_ADV_TYPE_SCAN_IND) {
     746:	2906      	cmp	r1, #6
     748:	d0ef      	beq.n	72a <CONFIG_BT_COMPANY_ID+0x139>
		uint32_t adv_size		= PDU_OVERHEAD_SIZE(phy) +
     74a:	2010      	movs	r0, #16
	uint32_t slot_us = EVENT_OVERHEAD_START_US + EVENT_OVERHEAD_END_US;
     74c:	f44f 73aa 	mov.w	r3, #340	; 0x154
     750:	e7f0      	b.n	734 <CONFIG_BT_COMPANY_ID+0x143>
				adv_size += TARGETA_SIZE;
     752:	2016      	movs	r0, #22
				slot_us += conn_ind_us;
     754:	f44f 732d 	mov.w	r3, #692	; 0x2b4
     758:	e7ec      	b.n	734 <CONFIG_BT_COMPANY_ID+0x143>
		ll_adv_ticker_ext[handle].ticks_slot_window =
     75a:	491b      	ldr	r1, [pc, #108]	; (7c8 <CONFIG_BT_COMPANY_ID+0x1d7>)
			ULL_ADV_RANDOM_DELAY + ticks_slot;
     75c:	f203 1047 	addw	r0, r3, #327	; 0x147
		ll_adv_ticker_ext[handle].ticks_slot_window =
     760:	6008      	str	r0, [r1, #0]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     762:	481a      	ldr	r0, [pc, #104]	; (7cc <CONFIG_BT_COMPANY_ID+0x1db>)
		ret = ticker_start_ext(
     764:	e9cd 3204 	strd	r3, r2, [sp, #16]
     768:	f64f 73ff 	movw	r3, #65535	; 0xffff
     76c:	e9cd 4108 	strd	r4, r1, [sp, #32]
     770:	e9cd 8302 	strd	r8, r3, [sp, #8]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     774:	fba9 0100 	umull	r0, r1, r9, r0
     778:	2391      	movs	r3, #145	; 0x91
     77a:	fb03 1109 	mla	r1, r3, r9, r1
     77e:	a30c      	add	r3, pc, #48	; (adr r3, 7b0 <CONFIG_BT_COMPANY_ID+0x1bf>)
     780:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret = ticker_start_ext(
     784:	e9cd 6b06 	strd	r6, fp, [sp, #24]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     788:	f7ff fcaa 	bl	e0 <__aeabi_uldivmod>
		ret = ticker_start_ext(
     78c:	462b      	mov	r3, r5
     78e:	e9cd 8000 	strd	r8, r0, [sp]
     792:	4652      	mov	r2, sl
     794:	2103      	movs	r1, #3
     796:	4640      	mov	r0, r8
     798:	f00e fc64 	bl	f064 <ticker_start_ext>
     79c:	e7b2      	b.n	704 <CONFIG_BT_COMPANY_ID+0x113>
	if (adv->lll.conn) {
     79e:	6a33      	ldr	r3, [r6, #32]
     7a0:	2b00      	cmp	r3, #0
     7a2:	f43f ae77 	beq.w	494 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x20>
		conn_release(adv);
     7a6:	4804      	ldr	r0, [pc, #16]	; (7b8 <CONFIG_BT_COMPANY_ID+0x1c7>)
     7a8:	f010 fe2a 	bl	11400 <conn_release>
     7ac:	e672      	b.n	494 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x20>
     7ae:	bf00      	nop
     7b0:	1afd498d 	.word	0x1afd498d
     7b4:	00000007 	.word	0x00000007
     7b8:	20002760 	.word	0x20002760
     7bc:	3b9aca00 	.word	0x3b9aca00
     7c0:	000112f5 	.word	0x000112f5
     7c4:	00011555 	.word	0x00011555
     7c8:	200027ac 	.word	0x200027ac
     7cc:	84e72a00 	.word	0x84e72a00
     7d0:	000105c1 	.word	0x000105c1
     7d4:	00000000 	.word	0x00000000

000007d8 <ull_scan_enable>:
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
						   SCAN_INT_UNIT_US);
}

uint8_t ull_scan_enable(struct ll_scan_set *scan)
{
     7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     7dc:	4604      	mov	r4, r0
	uint32_t volatile ret_cb;
	uint32_t ticks_interval;
	uint32_t ticks_anchor;
	uint32_t ret;

	lll->init_addr_type = scan->own_addr_type;
     7de:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
     7e2:	f894 3020 	ldrb.w	r3, [r4, #32]
	lll->is_stop = 0U;

	ull_hdr_init(&scan->ull);
	lll_hdr_init(lll, scan);

	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
     7e6:	4f3e      	ldr	r7, [pc, #248]	; (8e0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xe0>)
	lll->init_addr_type = scan->own_addr_type;
     7e8:	f3c0 0040 	ubfx	r0, r0, #1, #1
     7ec:	f360 1386 	bfi	r3, r0, #6, #1
{
     7f0:	b08d      	sub	sp, #52	; 0x34
	lll->init_addr_type = scan->own_addr_type;
     7f2:	f884 3020 	strb.w	r3, [r4, #32]
	ll_addr_get(lll->init_addr_type, lll->init_addr);
     7f6:	f104 0121 	add.w	r1, r4, #33	; 0x21
     7fa:	f00e fd07 	bl	f20c <ll_addr_get>
	lll->chan = 0U;
     7fe:	f894 3020 	ldrb.w	r3, [r4, #32]
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
     802:	f8b4 8028 	ldrh.w	r8, [r4, #40]	; 0x28
     806:	61e4      	str	r4, [r4, #28]
	lll->chan = 0U;
     808:	f003 0379 	and.w	r3, r3, #121	; 0x79
     80c:	2500      	movs	r5, #0
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
     80e:	fba8 0107 	umull	r0, r1, r8, r7
	lll->chan = 0U;
     812:	f884 3020 	strb.w	r3, [r4, #32]
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
     816:	2391      	movs	r3, #145	; 0x91
     818:	fb03 1108 	mla	r1, r3, r8, r1
	hdr->disabled_cb = hdr->disabled_param = NULL;
     81c:	e9c4 5505 	strd	r5, r5, [r4, #20]
     820:	a32d      	add	r3, pc, #180	; (adr r3, 8d8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xd8>)
     822:	e9d3 2300 	ldrd	r2, r3, [r3]
	hdr->ref = 0U;
     826:	7025      	strb	r5, [r4, #0]
     828:	f7ff fc5a 	bl	e0 <__aeabi_uldivmod>
						SCAN_INT_UNIT_US);

	/* TODO: active_to_start feature port */
	scan->ull.ticks_active_to_start = 0U;
	scan->ull.ticks_prepare_to_start =
     82c:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US);
	scan->ull.ticks_preempt_to_start =
     82e:	e9c4 3502 	strd	r3, r5, [r4, #8]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_PREEMPT_MIN_US);
	if ((lll->ticks_window +
     832:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	scan->ull.ticks_active_to_start = 0U;
     834:	6065      	str	r5, [r4, #4]
	if ((lll->ticks_window +
     836:	3309      	adds	r3, #9
	     HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) <
	    (ticks_interval -
     838:	f1a0 0231 	sub.w	r2, r0, #49	; 0x31
	if ((lll->ticks_window +
     83c:	4293      	cmp	r3, r2
	     HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US))) {
		scan->ull.ticks_slot =
     83e:	bf32      	itee	cc
     840:	6123      	strcc	r3, [r4, #16]
			(lll->ticks_window +
			 HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US));
	} else {
		if (IS_ENABLED(CONFIG_BT_CTLR_SCAN_UNRESERVED)) {
			scan->ull.ticks_slot = 0U;
     842:	6125      	strcs	r5, [r4, #16]
		} else {
			scan->ull.ticks_slot = ticks_interval -
				HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US);
		}

		lll->ticks_window = 0U;
     844:	62e5      	strcs	r5, [r4, #44]	; 0x2c
	return &ll_scan[handle];
}

uint8_t ull_scan_handle_get(struct ll_scan_set *scan)
{
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
     846:	4d27      	ldr	r5, [pc, #156]	; (8e4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xe4>)
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
     848:	4606      	mov	r6, r0
	ticks_anchor = ticker_ticks_now_get();
     84a:	f01b fe72 	bl	1c532 <ticker_ticks_now_get>
	ret_cb = TICKER_STATUS_BUSY;
     84e:	2302      	movs	r3, #2
     850:	930b      	str	r3, [sp, #44]	; 0x2c
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
     852:	1b65      	subs	r5, r4, r5
     854:	2334      	movs	r3, #52	; 0x34
     856:	fbb5 f5f3 	udiv	r5, r5, r3
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     85a:	4b23      	ldr	r3, [pc, #140]	; (8e8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xe8>)
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
     85c:	f8b4 b028 	ldrh.w	fp, [r4, #40]	; 0x28
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     860:	e9cd 4306 	strd	r4, r3, [sp, #24]
     864:	4b21      	ldr	r3, [pc, #132]	; (8ec <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xec>)
     866:	9305      	str	r3, [sp, #20]
     868:	46ba      	mov	sl, r7
     86a:	6923      	ldr	r3, [r4, #16]
     86c:	9304      	str	r3, [sp, #16]
	ticks_anchor = ticker_ticks_now_get();
     86e:	4607      	mov	r7, r0
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
     870:	2391      	movs	r3, #145	; 0x91
     872:	fbab 010a 	umull	r0, r1, fp, sl
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     876:	f04f 0800 	mov.w	r8, #0
     87a:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
     87e:	fb03 110b 	mla	r1, r3, fp, r1
     882:	a315      	add	r3, pc, #84	; (adr r3, 8d8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xd8>)
     884:	e9d3 2300 	ldrd	r2, r3, [r3]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     888:	f8cd 9020 	str.w	r9, [sp, #32]
     88c:	f8cd 800c 	str.w	r8, [sp, #12]
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
     890:	f7ff fc26 	bl	e0 <__aeabi_uldivmod>
     894:	4610      	mov	r0, r2
     896:	4619      	mov	r1, r3
     898:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     89c:	2300      	movs	r3, #0
     89e:	f7ff fc1f 	bl	e0 <__aeabi_uldivmod>
			   TICKER_USER_ID_THREAD, TICKER_ID_SCAN_BASE + handle,
     8a2:	3504      	adds	r5, #4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     8a4:	b2ed      	uxtb	r5, r5
     8a6:	e9cd 6001 	strd	r6, r0, [sp, #4]
     8aa:	2103      	movs	r1, #3
     8ac:	f8cd 8000 	str.w	r8, [sp]
     8b0:	463b      	mov	r3, r7
     8b2:	462a      	mov	r2, r5
     8b4:	4640      	mov	r0, r8
     8b6:	f01b fe09 	bl	1c4cc <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
     8ba:	4649      	mov	r1, r9
     8bc:	f010 fab8 	bl	10e30 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
     8c0:	b940      	cbnz	r0, 8d4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xd4>
	scan->is_enabled = 1U;
     8c2:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
     8c6:	f043 0301 	orr.w	r3, r3, #1
     8ca:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
     8ce:	b00d      	add	sp, #52	; 0x34
     8d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
     8d4:	200c      	movs	r0, #12
     8d6:	e7fa      	b.n	8ce <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xce>
     8d8:	1afd498d 	.word	0x1afd498d
     8dc:	00000007 	.word	0x00000007
     8e0:	84e72a00 	.word	0x84e72a00
     8e4:	200027d0 	.word	0x200027d0
     8e8:	000105c1 	.word	0x000105c1
     8ec:	000118c1 	.word	0x000118c1

000008f0 <ll_scan_params_set>:
{
     8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8f2:	4604      	mov	r4, r0
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
     8f4:	2000      	movs	r0, #0
{
     8f6:	4616      	mov	r6, r2
     8f8:	461f      	mov	r7, r3
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
     8fa:	f011 f85d 	bl	119b8 <ull_scan_is_disabled_get>
	if (!scan) {
     8fe:	4605      	mov	r5, r0
     900:	b320      	cbz	r0, 94c <ll_scan_params_set+0x5c>
	scan->own_addr_type = own_addr_type;
     902:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
	lll->interval = interval;
     906:	8501      	strh	r1, [r0, #40]	; 0x28
	scan->own_addr_type = own_addr_type;
     908:	f367 0342 	bfi	r3, r7, #1, #2
     90c:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
	lll->filter_policy = filter_policy;
     910:	f89d 3018 	ldrb.w	r3, [sp, #24]
     914:	0164      	lsls	r4, r4, #5
     916:	00db      	lsls	r3, r3, #3
     918:	f003 0318 	and.w	r3, r3, #24
     91c:	f004 0420 	and.w	r4, r4, #32
     920:	431c      	orrs	r4, r3
     922:	f890 3020 	ldrb.w	r3, [r0, #32]
     926:	f023 0338 	bic.w	r3, r3, #56	; 0x38
     92a:	431c      	orrs	r4, r3
     92c:	f880 4020 	strb.w	r4, [r0, #32]
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
     930:	4809      	ldr	r0, [pc, #36]	; (958 <ll_scan_params_set+0x68>)
     932:	2391      	movs	r3, #145	; 0x91
     934:	fba6 0100 	umull	r0, r1, r6, r0
     938:	fb03 1106 	mla	r1, r3, r6, r1
     93c:	a304      	add	r3, pc, #16	; (adr r3, 950 <ll_scan_params_set+0x60>)
     93e:	e9d3 2300 	ldrd	r2, r3, [r3]
     942:	f7ff fbcd 	bl	e0 <__aeabi_uldivmod>
     946:	62e8      	str	r0, [r5, #44]	; 0x2c
	return 0;
     948:	2000      	movs	r0, #0
}
     94a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
     94c:	200c      	movs	r0, #12
     94e:	e7fc      	b.n	94a <ll_scan_params_set+0x5a>
     950:	1afd498d 	.word	0x1afd498d
     954:	00000007 	.word	0x00000007
     958:	84e72a00 	.word	0x84e72a00
     95c:	00000000 	.word	0x00000000

00000960 <ull_conn_llcp>:

	return 0;
}

int ull_conn_llcp(struct ll_conn *conn, uint32_t ticks_at_expire, uint16_t lazy)
{
     960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     964:	4690      	mov	r8, r2
	/* Check if no other procedure with instant is requested and not in
	 * Encryption setup.
	 */
	if ((conn->llcp_ack == conn->llcp_req) &&
     966:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
     96a:	f890 2089 	ldrb.w	r2, [r0, #137]	; 0x89
     96e:	4293      	cmp	r3, r2
{
     970:	b08d      	sub	sp, #52	; 0x34
     972:	4604      	mov	r4, r0
     974:	460e      	mov	r6, r1
	if ((conn->llcp_ack == conn->llcp_req) &&
     976:	d10b      	bne.n	990 <ull_conn_llcp+0x30>
#endif /* !CONFIG_BT_CTLR_LE_ENC */

		/* TODO: Optimize the checks below, maybe have common flag */

		/* check if connection update procedure is requested */
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
     978:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
     97c:	f890 109c 	ldrb.w	r1, [r0, #156]	; 0x9c
     980:	4291      	cmp	r1, r2
     982:	d025      	beq.n	9d0 <ull_conn_llcp+0x70>
			/* switch to LLCP_CONN_UPD state machine */
			conn->llcp_type = LLCP_CONN_UPD;
     984:	2201      	movs	r2, #1
			conn->llcp_ack -= 2U;
     986:	3b02      	subs	r3, #2
			conn->llcp_type = LLCP_CONN_UPD;
     988:	f880 208a 	strb.w	r2, [r0, #138]	; 0x8a
			conn->llcp_ack -= 2U;
     98c:	f880 3089 	strb.w	r3, [r0, #137]	; 0x89
	}

	/* Check if procedures with instant or encryption setup is requested or
	 * active.
	 */
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
     990:	f894 1088 	ldrb.w	r1, [r4, #136]	; 0x88
     994:	f894 3089 	ldrb.w	r3, [r4, #137]	; 0x89
     998:	1acb      	subs	r3, r1, r3
     99a:	f003 0303 	and.w	r3, r3, #3
     99e:	2b02      	cmp	r3, #2
     9a0:	f040 826b 	bne.w	e7a <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x2c2>
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
		}

		/* Process procedures with instants or encryption setup */
		/* FIXME: Make LE Ping cacheable */
		switch (conn->llcp_type) {
     9a4:	f894 308a 	ldrb.w	r3, [r4, #138]	; 0x8a
     9a8:	2b01      	cmp	r3, #1
     9aa:	f000 8214 	beq.w	dd6 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x21e>
     9ae:	2b02      	cmp	r3, #2
     9b0:	f000 8426 	beq.w	1200 <CONFIG_BT_RX_STACK_SIZE+0x200>
		}
		break;
#endif /* CONFIG_BT_CTLR_PHY */

		default:
			LL_ASSERT(0);
     9b4:	4acd      	ldr	r2, [pc, #820]	; (cec <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x134>)
     9b6:	49ce      	ldr	r1, [pc, #824]	; (cf0 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x138>)
     9b8:	48ce      	ldr	r0, [pc, #824]	; (cf4 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x13c>)
     9ba:	f240 432b 	movw	r3, #1067	; 0x42b
     9be:	f017 fdd3 	bl	18568 <printk>
     9c2:	4040      	eors	r0, r0
     9c4:	f380 8811 	msr	BASEPRI, r0
     9c8:	f04f 0003 	mov.w	r0, #3
     9cc:	df02      	svc	2
			break;
     9ce:	e254      	b.n	e7a <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x2c2>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
     9d0:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
     9d4:	f890 10b0 	ldrb.w	r1, [r0, #176]	; 0xb0
     9d8:	428b      	cmp	r3, r1
     9da:	d05b      	beq.n	a94 <ull_conn_llcp+0x134>
static inline void event_fex_prep(struct ll_conn *conn)
{
	struct node_tx *tx;

	/* If waiting for response, do nothing */
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
     9dc:	1a5b      	subs	r3, r3, r1
     9de:	07d8      	lsls	r0, r3, #31
     9e0:	d5d6      	bpl.n	990 <ull_conn_llcp+0x30>
		return;
	}

	if (conn->common.fex_valid) {
     9e2:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
     9e6:	f011 0901 	ands.w	r9, r1, #1
     9ea:	d026      	beq.n	a3a <ull_conn_llcp+0xda>
		struct node_rx_pdu *rx;
		struct pdu_data *pdu;

		/* get a rx node for ULL->LL */
		rx = ll_pdu_rx_alloc();
     9ec:	f010 f9be 	bl	10d6c <ll_pdu_rx_alloc>
		if (!rx) {
     9f0:	4605      	mov	r5, r0
     9f2:	2800      	cmp	r0, #0
     9f4:	d0cc      	beq.n	990 <ull_conn_llcp+0x30>
			return;
		}

		/* procedure request acked */
		conn->llcp_feature.ack = conn->llcp_feature.req;
     9f6:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
     9fa:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1

		/* prepare feature rsp structure */
		rx->hdr.handle = conn->lll.handle;
     9fe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     a00:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
     a02:	2303      	movs	r3, #3
     a04:	7103      	strb	r3, [r0, #4]
		pdu = (void *)rx->pdu;
		pdu->ll_id = PDU_DATA_LLID_CTRL;
     a06:	7f03      	ldrb	r3, [r0, #28]
     a08:	f043 0303 	orr.w	r3, r3, #3
     a0c:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
			   sizeof(struct pdu_data_llctrl_feature_rsp);
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
     a0e:	f100 0720 	add.w	r7, r0, #32
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
     a12:	2309      	movs	r3, #9
     a14:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
     a16:	77c3      	strb	r3, [r0, #31]
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
     a18:	2208      	movs	r2, #8
     a1a:	2100      	movs	r1, #0
     a1c:	4638      	mov	r0, r7
     a1e:	f019 f8ec 	bl	19bfa <memset>
			sizeof(pdu->llctrl.feature_rsp.features));
		sys_put_le64(conn->llcp_feature.features_peer,
     a22:	e9d4 0130 	ldrd	r0, r1, [r4, #192]	; 0xc0
     a26:	463a      	mov	r2, r7
     a28:	f01b fef0 	bl	1c80c <sys_put_le64>
			     pdu->llctrl.feature_req.features);

		/* enqueue feature rsp structure into rx queue */
		ll_rx_put(rx->hdr.link, rx);
     a2c:	4629      	mov	r1, r5
			sys_cpu_to_le16(conn->llcp_version.company_id);
		pdu->llctrl.version_ind.sub_version_number =
			sys_cpu_to_le16(conn->llcp_version.sub_version_number);

		/* enqueue version ind structure into rx queue */
		ll_rx_put(rx->hdr.link, rx);
     a2e:	6808      	ldr	r0, [r1, #0]
     a30:	f010 f8ee 	bl	10c10 <ll_rx_put>
		ll_rx_sched();
     a34:	f010 f8f6 	bl	10c24 <ll_rx_sched>
     a38:	e7aa      	b.n	990 <ull_conn_llcp+0x30>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
     a3a:	48af      	ldr	r0, [pc, #700]	; (cf8 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x140>)
     a3c:	f01b fa89 	bl	1bf52 <mem_acquire>
	if (tx) {
     a40:	4605      	mov	r5, r0
     a42:	2800      	cmp	r0, #0
     a44:	d0a4      	beq.n	990 <ull_conn_llcp+0x30>
		conn->llcp_feature.ack--;
     a46:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
     a4a:	3b01      	subs	r3, #1
     a4c:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
		pdu->ll_id = PDU_DATA_LLID_CTRL;
     a50:	7903      	ldrb	r3, [r0, #4]
     a52:	f043 0303 	orr.w	r3, r3, #3
     a56:	7103      	strb	r3, [r0, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
     a58:	2309      	movs	r3, #9
     a5a:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
     a5c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
     a60:	2b00      	cmp	r3, #0
     a62:	bfac      	ite	ge
     a64:	2308      	movge	r3, #8
     a66:	230e      	movlt	r3, #14
		(void)memset(&pdu->llctrl.feature_req.features[0],
     a68:	f100 0708 	add.w	r7, r0, #8
		pdu->llctrl.opcode = !conn->lll.role ?
     a6c:	71c3      	strb	r3, [r0, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
     a6e:	2208      	movs	r2, #8
     a70:	4649      	mov	r1, r9
     a72:	4638      	mov	r0, r7
     a74:	f019 f8c1 	bl	19bfa <memset>
		sys_put_le64(conn->llcp_feature.features_conn,
     a78:	e9d4 012e 	ldrd	r0, r1, [r4, #184]	; 0xb8
     a7c:	463a      	mov	r2, r7
     a7e:	f01b fec5 	bl	1c80c <sys_put_le64>
		ctrl_tx_enqueue(conn, tx);
     a82:	4629      	mov	r1, r5
			ctrl_tx_enqueue(conn, tx);
     a84:	4620      	mov	r0, r4
     a86:	f01b fed6 	bl	1c836 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->procedure_reload;
     a8a:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
     a8e:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
     a92:	e77d      	b.n	990 <ull_conn_llcp+0x30>
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
     a94:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
     a98:	f890 10c8 	ldrb.w	r1, [r0, #200]	; 0xc8
     a9c:	428b      	cmp	r3, r1
     a9e:	d060      	beq.n	b62 <ull_conn_llcp+0x202>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
     aa0:	1a5b      	subs	r3, r3, r1
     aa2:	07d9      	lsls	r1, r3, #31
     aa4:	f57f af74 	bpl.w	990 <ull_conn_llcp+0x30>
	if (conn->llcp_version.tx == 0U) {
     aa8:	f890 30ca 	ldrb.w	r3, [r0, #202]	; 0xca
     aac:	07da      	lsls	r2, r3, #31
     aae:	d425      	bmi.n	afc <ull_conn_llcp+0x19c>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
     ab0:	4891      	ldr	r0, [pc, #580]	; (cf8 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x140>)
     ab2:	f01b fa4e 	bl	1bf52 <mem_acquire>
		if (tx) {
     ab6:	4601      	mov	r1, r0
     ab8:	2800      	cmp	r0, #0
     aba:	f43f af69 	beq.w	990 <ull_conn_llcp+0x30>
			conn->llcp_version.ack--;
     abe:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
     ac2:	3b01      	subs	r3, #1
     ac4:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
			conn->llcp_version.tx = 1U;
     ac8:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
     acc:	f043 0301 	orr.w	r3, r3, #1
     ad0:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
			pdu->ll_id = PDU_DATA_LLID_CTRL;
     ad4:	7903      	ldrb	r3, [r0, #4]
     ad6:	f043 0303 	orr.w	r3, r3, #3
     ada:	7103      	strb	r3, [r0, #4]
			pdu->len =
     adc:	2306      	movs	r3, #6
     ade:	7143      	strb	r3, [r0, #5]
			pdu->llctrl.opcode =
     ae0:	230c      	movs	r3, #12
     ae2:	71c3      	strb	r3, [r0, #7]
			pdu->llctrl.version_ind.version_number =
     ae4:	230b      	movs	r3, #11
     ae6:	7203      	strb	r3, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
     ae8:	f06f 030e 	mvn.w	r3, #14
     aec:	7243      	strb	r3, [r0, #9]
     aee:	2305      	movs	r3, #5
     af0:	7283      	strb	r3, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
     af2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     af6:	72c3      	strb	r3, [r0, #11]
     af8:	7303      	strb	r3, [r0, #12]
     afa:	e7c3      	b.n	a84 <ull_conn_llcp+0x124>
	} else if (conn->llcp_version.rx) {
     afc:	079f      	lsls	r7, r3, #30
     afe:	d522      	bpl.n	b46 <ull_conn_llcp+0x1e6>
		rx = ll_pdu_rx_alloc();
     b00:	f010 f934 	bl	10d6c <ll_pdu_rx_alloc>
		if (!rx) {
     b04:	4601      	mov	r1, r0
     b06:	2800      	cmp	r0, #0
     b08:	f43f af42 	beq.w	990 <ull_conn_llcp+0x30>
		conn->llcp_version.ack = conn->llcp_version.req;
     b0c:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
     b10:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
		rx->hdr.handle = conn->lll.handle;
     b14:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     b16:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
     b18:	2303      	movs	r3, #3
     b1a:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
     b1c:	7f03      	ldrb	r3, [r0, #28]
     b1e:	f043 0303 	orr.w	r3, r3, #3
     b22:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
     b24:	2306      	movs	r3, #6
     b26:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
     b28:	230c      	movs	r3, #12
     b2a:	77c3      	strb	r3, [r0, #31]
		pdu->llctrl.version_ind.version_number =
     b2c:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
     b30:	f880 3020 	strb.w	r3, [r0, #32]
		pdu->llctrl.version_ind.company_id =
     b34:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
     b38:	f8a0 3021 	strh.w	r3, [r0, #33]	; 0x21
		pdu->llctrl.version_ind.sub_version_number =
     b3c:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
     b40:	f8a0 3023 	strh.w	r3, [r0, #35]	; 0x23
     b44:	e773      	b.n	a2e <ull_conn_llcp+0xce>
	} else {
		/* tx-ed but no rx, and new request placed */
		LL_ASSERT(0);
     b46:	f640 439e 	movw	r3, #3230	; 0xc9e
	}
	break;
#endif /* CONFIG_BT_CTLR_SCHED_ADVANCED */

	default:
		LL_ASSERT(0);
     b4a:	4a68      	ldr	r2, [pc, #416]	; (cec <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x134>)
     b4c:	4968      	ldr	r1, [pc, #416]	; (cf0 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x138>)
     b4e:	4869      	ldr	r0, [pc, #420]	; (cf4 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x13c>)
     b50:	f017 fd0a 	bl	18568 <printk>
     b54:	4040      	eors	r0, r0
     b56:	f380 8811 	msr	BASEPRI, r0
     b5a:	f04f 0003 	mov.w	r0, #3
     b5e:	df02      	svc	2
		break;
     b60:	e716      	b.n	990 <ull_conn_llcp+0x30>
		} else if (conn->llcp_conn_param.ack !=
     b62:	f890 10f5 	ldrb.w	r1, [r0, #245]	; 0xf5
     b66:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
     b6a:	4299      	cmp	r1, r3
     b6c:	f43f af10 	beq.w	990 <ull_conn_llcp+0x30>
	conn_upd = conn_upd_curr;
     b70:	4d62      	ldr	r5, [pc, #392]	; (cfc <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x144>)
     b72:	682b      	ldr	r3, [r5, #0]
	if (conn_upd && (conn_upd != conn)) {
     b74:	b113      	cbz	r3, b7c <ull_conn_llcp+0x21c>
     b76:	4298      	cmp	r0, r3
     b78:	f47f af0a 	bne.w	990 <ull_conn_llcp+0x30>
	switch (conn->llcp_conn_param.state) {
     b7c:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
     b80:	f003 0307 	and.w	r3, r3, #7
     b84:	2b05      	cmp	r3, #5
     b86:	f200 8123 	bhi.w	dd0 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x218>
     b8a:	a101      	add	r1, pc, #4	; (adr r1, b90 <ull_conn_llcp+0x230>)
     b8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
     b90:	00000ba9 	.word	0x00000ba9
     b94:	00000c2d 	.word	0x00000c2d
     b98:	00000d87 	.word	0x00000d87
     b9c:	00000991 	.word	0x00000991
     ba0:	00000991 	.word	0x00000991
     ba4:	00000991 	.word	0x00000991
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
     ba8:	4853      	ldr	r0, [pc, #332]	; (cf8 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x140>)
			event_counter = lll->event_counter +
     baa:	8e67      	ldrh	r7, [r4, #50]	; 0x32
					lll->latency_prepare + lazy;
     bac:	f8b4 902e 	ldrh.w	r9, [r4, #46]	; 0x2e
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
     bb0:	f01b f9cf 	bl	1bf52 <mem_acquire>
	if (!tx) {
     bb4:	4601      	mov	r1, r0
     bb6:	2800      	cmp	r0, #0
     bb8:	f43f aeea 	beq.w	990 <ull_conn_llcp+0x30>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     bbc:	7903      	ldrb	r3, [r0, #4]
	conn_upd_curr = conn;
     bbe:	602c      	str	r4, [r5, #0]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     bc0:	f043 0303 	orr.w	r3, r3, #3
     bc4:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
     bc6:	2318      	movs	r3, #24
     bc8:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
     bca:	230f      	movs	r3, #15
     bcc:	71c3      	strb	r3, [r0, #7]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
     bce:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
     bd2:	8103      	strh	r3, [r0, #8]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
     bd4:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	; 0xfa
     bd8:	8143      	strh	r3, [r0, #10]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
     bda:	f8b4 30fc 	ldrh.w	r3, [r4, #252]	; 0xfc
     bde:	8183      	strh	r3, [r0, #12]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
     be0:	f8b4 30fe 	ldrh.w	r3, [r4, #254]	; 0xfe
     be4:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0U;
     be6:	2300      	movs	r3, #0
     be8:	7403      	strb	r3, [r0, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
     bea:	74c3      	strb	r3, [r0, #19]
     bec:	7503      	strb	r3, [r0, #20]
			event_counter = lll->event_counter +
     bee:	444f      	add	r7, r9
	p->offset1 = sys_cpu_to_le16(0xffff);
     bf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     bf4:	7543      	strb	r3, [r0, #21]
     bf6:	7583      	strb	r3, [r0, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
     bf8:	75c3      	strb	r3, [r0, #23]
     bfa:	7603      	strb	r3, [r0, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
     bfc:	7643      	strb	r3, [r0, #25]
     bfe:	7683      	strb	r3, [r0, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
     c00:	76c3      	strb	r3, [r0, #27]
     c02:	7703      	strb	r3, [r0, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
     c04:	7743      	strb	r3, [r0, #29]
     c06:	7783      	strb	r3, [r0, #30]
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
     c08:	4447      	add	r7, r8
	conn->procedure_expire = conn->procedure_reload;
     c0a:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
     c0e:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
     c12:	f8a0 7011 	strh.w	r7, [r0, #17]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
     c16:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
     c1a:	2204      	movs	r2, #4
     c1c:	f362 0302 	bfi	r3, r2, #0, #3
     c20:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
	ctrl_tx_enqueue(conn, tx);
     c24:	4620      	mov	r0, r4
     c26:	f01b fe06 	bl	1c836 <ctrl_tx_enqueue>
     c2a:	e6b1      	b.n	990 <ull_conn_llcp+0x30>
	if (conn->llcp_conn_param.status) {
     c2c:	f894 70f7 	ldrb.w	r7, [r4, #247]	; 0xf7
     c30:	b1ef      	cbz	r7, c6e <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0xb6>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
     c32:	4831      	ldr	r0, [pc, #196]	; (cf8 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x140>)
     c34:	f01b f98d 	bl	1bf52 <mem_acquire>
		if (!tx) {
     c38:	4601      	mov	r1, r0
     c3a:	2800      	cmp	r0, #0
     c3c:	f43f aea8 	beq.w	990 <ull_conn_llcp+0x30>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
     c40:	7903      	ldrb	r3, [r0, #4]
     c42:	f043 0303 	orr.w	r3, r3, #3
     c46:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
     c48:	2311      	movs	r3, #17
     c4a:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
     c4c:	2303      	movs	r3, #3
     c4e:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
     c50:	230f      	movs	r3, #15
     c52:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
     c54:	f894 30f7 	ldrb.w	r3, [r4, #247]	; 0xf7
     c58:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, tx);
     c5a:	4620      	mov	r0, r4
     c5c:	f01b fdeb 	bl	1c836 <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
     c60:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
     c64:	f884 30f5 	strb.w	r3, [r4, #245]	; 0xf5
	conn_upd_curr = NULL;
     c68:	2300      	movs	r3, #0
     c6a:	602b      	str	r3, [r5, #0]
		return;
     c6c:	e690      	b.n	990 <ull_conn_llcp+0x30>
	if (!conn->lll.role) {
     c6e:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
     c72:	2b00      	cmp	r3, #0
     c74:	db44      	blt.n	d00 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x148>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
     c76:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
		preferred_periodicity = conn->llcp_conn_param.preferred_periodicity;
     c7a:	f894 0100 	ldrb.w	r0, [r4, #256]	; 0x100
		conn->llcp_cu.win_offset_us = 0U;
     c7e:	f8c4 70a8 	str.w	r7, [r4, #168]	; 0xa8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
     c82:	2105      	movs	r1, #5
     c84:	f361 0302 	bfi	r3, r1, #0, #3
     c88:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		conn->llcp_cu.win_size = 1U;
     c8c:	2301      	movs	r3, #1
		interval_max = conn->llcp_conn_param.interval_max;
     c8e:	f8b4 10fa 	ldrh.w	r1, [r4, #250]	; 0xfa
		conn->llcp_cu.win_size = 1U;
     c92:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
		if (preferred_periodicity) {
     c96:	b328      	cbz	r0, ce4 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x12c>
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
     c98:	fbb1 f3f0 	udiv	r3, r1, r0
     c9c:	fb13 f300 	smulbb	r3, r3, r0
			if (conn->llcp_cu.interval < conn->llcp_conn_param.interval_min) {
     ca0:	f8b4 00f8 	ldrh.w	r0, [r4, #248]	; 0xf8
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
     ca4:	b29b      	uxth	r3, r3
				conn->llcp_cu.interval = interval_max;
     ca6:	4298      	cmp	r0, r3
     ca8:	bf88      	it	hi
     caa:	460b      	movhi	r3, r1
     cac:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
     cb0:	f8b4 30fc 	ldrh.w	r3, [r4, #252]	; 0xfc
     cb4:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
     cb8:	f8b4 30fe 	ldrh.w	r3, [r4, #254]	; 0xfe
     cbc:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
     cc0:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
     cc4:	f894 109e 	ldrb.w	r1, [r4, #158]	; 0x9e
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
     cc8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
     ccc:	00db      	lsls	r3, r3, #3
     cce:	f043 0302 	orr.w	r3, r3, #2
     cd2:	f021 010f 	bic.w	r1, r1, #15
     cd6:	430b      	orrs	r3, r1
		conn->llcp_cu.ack--;
     cd8:	3a01      	subs	r2, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
     cda:	f884 309e 	strb.w	r3, [r4, #158]	; 0x9e
		conn->llcp_cu.ack--;
     cde:	f884 209d 	strb.w	r2, [r4, #157]	; 0x9d
		return;
     ce2:	e655      	b.n	990 <ull_conn_llcp+0x30>
			conn->llcp_cu.interval = interval_max;
     ce4:	f8a4 10a0 	strh.w	r1, [r4, #160]	; 0xa0
     ce8:	e7e2      	b.n	cb0 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0xf8>
     cea:	bf00      	nop
     cec:	00021eb9 	.word	0x00021eb9
     cf0:	00020b9a 	.word	0x00020b9a
     cf4:	0001f734 	.word	0x0001f734
     cf8:	200028c8 	.word	0x200028c8
     cfc:	20002818 	.word	0x20002818
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
     d00:	4864      	ldr	r0, [pc, #400]	; (e94 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x2dc>)
     d02:	f01b f926 	bl	1bf52 <mem_acquire>
	if (!tx) {
     d06:	4601      	mov	r1, r0
     d08:	2800      	cmp	r0, #0
     d0a:	f43f ae41 	beq.w	990 <ull_conn_llcp+0x30>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
     d0e:	7903      	ldrb	r3, [r0, #4]
     d10:	f043 0303 	orr.w	r3, r3, #3
     d14:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
     d16:	2318      	movs	r3, #24
     d18:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
     d1a:	2310      	movs	r3, #16
     d1c:	71c3      	strb	r3, [r0, #7]
	rsp->interval_min =
     d1e:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
     d22:	8103      	strh	r3, [r0, #8]
	rsp->interval_max =
     d24:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	; 0xfa
     d28:	8143      	strh	r3, [r0, #10]
	rsp->latency =
     d2a:	f8b4 30fc 	ldrh.w	r3, [r4, #252]	; 0xfc
     d2e:	8183      	strh	r3, [r0, #12]
	rsp->timeout =
     d30:	f8b4 30fe 	ldrh.w	r3, [r4, #254]	; 0xfe
     d34:	81c3      	strh	r3, [r0, #14]
	rsp->preferred_periodicity =
     d36:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
     d3a:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
     d3c:	f8b4 3102 	ldrh.w	r3, [r4, #258]	; 0x102
     d40:	f8a0 3011 	strh.w	r3, [r0, #17]
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
     d44:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
     d48:	f8a0 3013 	strh.w	r3, [r0, #19]
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
     d4c:	f8b4 3106 	ldrh.w	r3, [r4, #262]	; 0x106
     d50:	f8a0 3015 	strh.w	r3, [r0, #21]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
     d54:	f8b4 3108 	ldrh.w	r3, [r4, #264]	; 0x108
     d58:	f8a0 3017 	strh.w	r3, [r0, #23]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
     d5c:	f8b4 310a 	ldrh.w	r3, [r4, #266]	; 0x10a
     d60:	f8a0 3019 	strh.w	r3, [r0, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
     d64:	f8b4 310c 	ldrh.w	r3, [r4, #268]	; 0x10c
     d68:	f8a0 301b 	strh.w	r3, [r0, #27]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
     d6c:	f8b4 310e 	ldrh.w	r3, [r4, #270]	; 0x10e
     d70:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, tx);
     d74:	4620      	mov	r0, r4
     d76:	f01b fd5e 	bl	1c836 <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
     d7a:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
     d7e:	f884 30f5 	strb.w	r3, [r4, #245]	; 0xf5
	conn_upd_curr = NULL;
     d82:	602f      	str	r7, [r5, #0]
}
     d84:	e604      	b.n	990 <ull_conn_llcp+0x30>
	rx = ll_pdu_rx_alloc();
     d86:	f00f fff1 	bl	10d6c <ll_pdu_rx_alloc>
	if (!rx) {
     d8a:	4601      	mov	r1, r0
     d8c:	2800      	cmp	r0, #0
     d8e:	f43f adff 	beq.w	990 <ull_conn_llcp+0x30>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
     d92:	f894 20f6 	ldrb.w	r2, [r4, #246]	; 0xf6
     d96:	2303      	movs	r3, #3
     d98:	f363 0202 	bfi	r2, r3, #0, #3
     d9c:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
	rx->hdr.handle = conn->lll.handle;
     da0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
     da2:	7103      	strb	r3, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
     da4:	7f03      	ldrb	r3, [r0, #28]
	rx->hdr.handle = conn->lll.handle;
     da6:	80c2      	strh	r2, [r0, #6]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
     da8:	f043 0303 	orr.w	r3, r3, #3
     dac:	7703      	strb	r3, [r0, #28]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
     dae:	2318      	movs	r3, #24
     db0:	7743      	strb	r3, [r0, #29]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
     db2:	230f      	movs	r3, #15
     db4:	77c3      	strb	r3, [r0, #31]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
     db6:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
     dba:	8403      	strh	r3, [r0, #32]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
     dbc:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	; 0xfa
     dc0:	8443      	strh	r3, [r0, #34]	; 0x22
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
     dc2:	f8b4 30fc 	ldrh.w	r3, [r4, #252]	; 0xfc
     dc6:	8483      	strh	r3, [r0, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
     dc8:	f8b4 30fe 	ldrh.w	r3, [r4, #254]	; 0xfe
     dcc:	84c3      	strh	r3, [r0, #38]	; 0x26
	ll_rx_put(rx->hdr.link, rx);
     dce:	e62e      	b.n	a2e <ull_conn_llcp+0xce>
		LL_ASSERT(0);
     dd0:	f640 53d1 	movw	r3, #3537	; 0xdd1
     dd4:	e6b9      	b.n	b4a <ull_conn_llcp+0x1ea>
	conn_upd = conn_upd_curr;
     dd6:	4b30      	ldr	r3, [pc, #192]	; (e98 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x2e0>)
	if (!conn_upd) {
     dd8:	681a      	ldr	r2, [r3, #0]
     dda:	b902      	cbnz	r2, dde <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x226>
		conn_upd_curr = conn;
     ddc:	601c      	str	r4, [r3, #0]
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
     dde:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
     de0:	8e67      	ldrh	r7, [r4, #50]	; 0x32
     de2:	4417      	add	r7, r2
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
     de4:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
     de8:	4447      	add	r7, r8
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
     dea:	f012 0007 	ands.w	r0, r2, #7
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
     dee:	b2bf      	uxth	r7, r7
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
     df0:	d054      	beq.n	e9c <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x2e4>
		rx = ll_pdu_rx_alloc_peek(1);
     df2:	2001      	movs	r0, #1
     df4:	f00f ffa2 	bl	10d3c <ll_pdu_rx_alloc_peek>
		if (!rx) {
     df8:	4606      	mov	r6, r0
     dfa:	2800      	cmp	r0, #0
     dfc:	d03d      	beq.n	e7a <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x2c2>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
     dfe:	4825      	ldr	r0, [pc, #148]	; (e94 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x2dc>)
     e00:	f01b f8a7 	bl	1bf52 <mem_acquire>
		if (!tx) {
     e04:	4605      	mov	r5, r0
     e06:	b3c0      	cbz	r0, e7a <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x2c2>
		(void)ll_pdu_rx_alloc();
     e08:	f00f ffb0 	bl	10d6c <ll_pdu_rx_alloc>
		rx->hdr.link->mem = conn->llcp_rx;
     e0c:	6833      	ldr	r3, [r6, #0]
     e0e:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
     e12:	605a      	str	r2, [r3, #4]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     e14:	792b      	ldrb	r3, [r5, #4]
		conn->llcp_rx = rx;
     e16:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     e1a:	f043 0303 	orr.w	r3, r3, #3
     e1e:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
     e20:	2200      	movs	r2, #0
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
     e22:	230c      	movs	r3, #12
     e24:	716b      	strb	r3, [r5, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
     e26:	71ea      	strb	r2, [r5, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
     e28:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
     e2c:	722b      	strb	r3, [r5, #8]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
     e2e:	f240 41e2 	movw	r1, #1250	; 0x4e2
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
     e32:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
     e36:	fbb3 f3f1 	udiv	r3, r3, r1
     e3a:	f8a5 3009 	strh.w	r3, [r5, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
     e3e:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
     e42:	f8a5 300b 	strh.w	r3, [r5, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
     e46:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
     e4a:	f8a5 300d 	strh.w	r3, [r5, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
     e4e:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
     e52:	f8a5 300f 	strh.w	r3, [r5, #15]
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
     e56:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
     e5a:	f362 0302 	bfi	r3, r2, #0, #3
     e5e:	f884 309e 	strb.w	r3, [r4, #158]	; 0x9e
		conn->llcp.conn_upd.instant = event_counter +
     e62:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
     e64:	441f      	add	r7, r3
					      conn->lll.latency + 6;
     e66:	3706      	adds	r7, #6
     e68:	b2bf      	uxth	r7, r7
		conn->llcp.conn_upd.instant = event_counter +
     e6a:	f8a4 708c 	strh.w	r7, [r4, #140]	; 0x8c
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
     e6e:	f8a5 7011 	strh.w	r7, [r5, #17]
			ctrl_tx_enqueue(conn, tx);
     e72:	4629      	mov	r1, r5
     e74:	4620      	mov	r0, r4
     e76:	f01b fcde 	bl	1c836 <ctrl_tx_enqueue>
	if (((conn->llcp_terminate.req - conn->llcp_terminate.ack) & 0xFF) ==
     e7a:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
     e7e:	f894 20d1 	ldrb.w	r2, [r4, #209]	; 0xd1
     e82:	1a9b      	subs	r3, r3, r2
     e84:	b2db      	uxtb	r3, r3
     e86:	2b01      	cmp	r3, #1
     e88:	f000 820a 	beq.w	12a0 <CONFIG_BT_RX_STACK_SIZE+0x2a0>
	return 0;
     e8c:	2000      	movs	r0, #0
}
     e8e:	b00d      	add	sp, #52	; 0x34
     e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e94:	200028c8 	.word	0x200028c8
     e98:	20002818 	.word	0x20002818
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
     e9c:	f8b4 908c 	ldrh.w	r9, [r4, #140]	; 0x8c
     ea0:	eba7 0209 	sub.w	r2, r7, r9
	} else if (instant_latency <= 0x7FFF) {
     ea4:	0415      	lsls	r5, r2, #16
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
     ea6:	fa1f fb82 	uxth.w	fp, r2
	} else if (instant_latency <= 0x7FFF) {
     eaa:	d4e6      	bmi.n	e7a <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x2c2>
		conn->llcp_cu.ack = conn->llcp_cu.req;
     eac:	f894 209c 	ldrb.w	r2, [r4, #156]	; 0x9c
			conn->llcp_ack = conn->llcp_req;
     eb0:	f884 1089 	strb.w	r1, [r4, #137]	; 0x89
		conn->llcp_cu.ack = conn->llcp_cu.req;
     eb4:	f884 209d 	strb.w	r2, [r4, #157]	; 0x9d
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     eb8:	f894 10f4 	ldrb.w	r1, [r4, #244]	; 0xf4
     ebc:	f894 20f5 	ldrb.w	r2, [r4, #245]	; 0xf5
     ec0:	428a      	cmp	r2, r1
     ec2:	d009      	beq.n	ed8 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x320>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
     ec4:	f894 20f6 	ldrb.w	r2, [r4, #246]	; 0xf6
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     ec8:	f002 0207 	and.w	r2, r2, #7
     ecc:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
     ece:	bf04      	itt	eq
     ed0:	f884 10f5 	strbeq.w	r1, [r4, #245]	; 0xf5
			conn->procedure_expire = 0U;
     ed4:	f8a4 0078 	strheq.w	r0, [r4, #120]	; 0x78
		if (conn_upd_curr == conn) {
     ed8:	681a      	ldr	r2, [r3, #0]
		rx = conn->llcp_rx;
     eda:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
		if (conn_upd_curr == conn) {
     ede:	4294      	cmp	r4, r2
	conn_upd_curr = NULL;
     ee0:	bf04      	itt	eq
     ee2:	2200      	moveq	r2, #0
     ee4:	601a      	streq	r2, [r3, #0]
		LL_ASSERT(rx && rx->hdr.link);
     ee6:	b10d      	cbz	r5, eec <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x334>
     ee8:	682b      	ldr	r3, [r5, #0]
     eea:	b963      	cbnz	r3, f06 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x34e>
     eec:	4ab8      	ldr	r2, [pc, #736]	; (11d0 <CONFIG_BT_RX_STACK_SIZE+0x1d0>)
     eee:	49b9      	ldr	r1, [pc, #740]	; (11d4 <CONFIG_BT_RX_STACK_SIZE+0x1d4>)
     ef0:	48b9      	ldr	r0, [pc, #740]	; (11d8 <CONFIG_BT_RX_STACK_SIZE+0x1d8>)
     ef2:	f640 2325 	movw	r3, #2597	; 0xa25
     ef6:	f017 fb37 	bl	18568 <printk>
     efa:	4040      	eors	r0, r0
     efc:	f380 8811 	msr	BASEPRI, r0
     f00:	f04f 0003 	mov.w	r0, #3
     f04:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
     f06:	6828      	ldr	r0, [r5, #0]
		if ((conn->llcp_cu.interval != lll->interval) ||
     f08:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
		conn->llcp_rx = rx->hdr.link->mem;
     f0c:	6843      	ldr	r3, [r0, #4]
     f0e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
		if ((conn->llcp_cu.interval != lll->interval) ||
     f12:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
     f14:	f8b4 c0a2 	ldrh.w	ip, [r4, #162]	; 0xa2
     f18:	f8b4 10a4 	ldrh.w	r1, [r4, #164]	; 0xa4
     f1c:	429a      	cmp	r2, r3
     f1e:	d113      	bne.n	f48 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x390>
     f20:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
     f22:	4563      	cmp	r3, ip
     f24:	d110      	bne.n	f48 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x390>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
     f26:	f240 43e2 	movw	r3, #1250	; 0x4e2
     f2a:	fb03 fe02 	mul.w	lr, r3, r2
     f2e:	f242 7310 	movw	r3, #10000	; 0x2710
     f32:	fb03 e301 	mla	r3, r3, r1, lr
     f36:	3b01      	subs	r3, #1
     f38:	fbb3 f3fe 	udiv	r3, r3, lr
		    (conn->llcp_cu.latency != lll->latency) ||
     f3c:	f8b4 e072 	ldrh.w	lr, [r4, #114]	; 0x72
     f40:	b29b      	uxth	r3, r3
     f42:	459e      	cmp	lr, r3
     f44:	f000 811e 	beq.w	1184 <CONFIG_BT_RX_STACK_SIZE+0x184>
			rx->hdr.handle = lll->handle;
     f48:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     f4a:	80eb      	strh	r3, [r5, #6]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
     f4c:	2316      	movs	r3, #22
     f4e:	712b      	strb	r3, [r5, #4]
			cu->status = 0x00;
     f50:	2300      	movs	r3, #0
     f52:	772b      	strb	r3, [r5, #28]
			cu->interval = conn->llcp_cu.interval;
     f54:	83ea      	strh	r2, [r5, #30]
			cu->latency = conn->llcp_cu.latency;
     f56:	f8a5 c020 	strh.w	ip, [r5, #32]
			cu->timeout = conn->llcp_cu.timeout;
     f5a:	8469      	strh	r1, [r5, #34]	; 0x22
		ll_rx_put(rx->hdr.link, rx);
     f5c:	4629      	mov	r1, r5
     f5e:	f00f fe57 	bl	10c10 <ll_rx_put>
		ll_rx_sched();
     f62:	f00f fe5f 	bl	10c24 <ll_rx_sched>
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
     f66:	68a3      	ldr	r3, [r4, #8]
     f68:	2b00      	cmp	r3, #0
     f6a:	da09      	bge.n	f80 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x3c8>
			uint32_t ticks_prepare_to_start =
     f6c:	68e1      	ldr	r1, [r4, #12]
     f6e:	6860      	ldr	r0, [r4, #4]
			conn->ull.ticks_prepare_to_start &= ~XON_BITMASK;
     f70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->ull.ticks_prepare_to_start -
     f74:	4281      	cmp	r1, r0
     f76:	bf2c      	ite	cs
     f78:	1876      	addcs	r6, r6, r1
     f7a:	1836      	addcc	r6, r6, r0
			conn->ull.ticks_prepare_to_start &= ~XON_BITMASK;
     f7c:	60a3      	str	r3, [r4, #8]
			ticks_at_expire -= (conn->ull.ticks_prepare_to_start -
     f7e:	1af6      	subs	r6, r6, r3
		conn_interval_old = instant_latency * lll->interval;
     f80:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
		latency = conn_interval_old / conn->llcp_cu.interval;
     f82:	f8b4 50a0 	ldrh.w	r5, [r4, #160]	; 0xa0
     f86:	f8df a274 	ldr.w	sl, [pc, #628]	; 11fc <CONFIG_BT_RX_STACK_SIZE+0x1fc>
		conn_interval_old = instant_latency * lll->interval;
     f8a:	fb13 f30b 	smulbb	r3, r3, fp
     f8e:	b29b      	uxth	r3, r3
		latency = conn_interval_old / conn->llcp_cu.interval;
     f90:	fbb3 f1f5 	udiv	r1, r3, r5
     f94:	b28a      	uxth	r2, r1
     f96:	920b      	str	r2, [sp, #44]	; 0x2c
		conn_interval_new = latency * conn->llcp_cu.interval;
     f98:	fb15 f201 	smulbb	r2, r5, r1
     f9c:	b292      	uxth	r2, r2
		if (conn_interval_new > conn_interval_old) {
     f9e:	4293      	cmp	r3, r2
     fa0:	f240 40e2 	movw	r0, #1250	; 0x4e2
     fa4:	f080 80f1 	bcs.w	118a <CONFIG_BT_RX_STACK_SIZE+0x18a>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
     fa8:	1ad3      	subs	r3, r2, r3
     faa:	4358      	muls	r0, r3
     fac:	fba0 010a 	umull	r0, r1, r0, sl
     fb0:	a385      	add	r3, pc, #532	; (adr r3, 11c8 <CONFIG_BT_RX_STACK_SIZE+0x1c8>)
     fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
     fb6:	f7ff f893 	bl	e0 <__aeabi_uldivmod>
     fba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     fbe:	4406      	add	r6, r0
		lll->latency_prepare -= (instant_latency - latency);
     fc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		lll->latency_prepare += lazy;
     fc2:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
		lll->latency_prepare -= (instant_latency - latency);
     fc4:	eba9 0707 	sub.w	r7, r9, r7
     fc8:	441f      	add	r7, r3
		} else if (lll->role) {
     fca:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		lll->latency_prepare += lazy;
     fce:	4490      	add	r8, r2
		lll->latency_prepare -= (instant_latency - latency);
     fd0:	4447      	add	r7, r8
		} else if (lll->role) {
     fd2:	2b00      	cmp	r3, #0
		conn_interval_us = conn->llcp_cu.interval *
     fd4:	f240 48e2 	movw	r8, #1250	; 0x4e2
		lll->latency_prepare -= (instant_latency - latency);
     fd8:	85e7      	strh	r7, [r4, #46]	; 0x2e
		conn_interval_us = conn->llcp_cu.interval *
     fda:	fb08 f505 	mul.w	r5, r8, r5
		} else if (lll->role) {
     fde:	f280 80e1 	bge.w	11a4 <CONFIG_BT_RX_STACK_SIZE+0x1a4>
			lll->slave.window_widening_prepare_us -=
     fe2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
				lll->slave.window_widening_periodic_us *
     fe4:	6c23      	ldr	r3, [r4, #64]	; 0x40
			lll->slave.window_widening_prepare_us -=
     fe6:	fb03 231b 	mls	r3, r3, fp, r2
     fea:	64a3      	str	r3, [r4, #72]	; 0x48
				(((lll_clock_ppm_local_get() +
     fec:	f01b fdf0 	bl	1cbd0 <lll_clock_ppm_local_get>
     ff0:	4607      	mov	r7, r0
				   lll_clock_ppm_get(conn->slave.sca)) *
     ff2:	f894 007c 	ldrb.w	r0, [r4, #124]	; 0x7c
     ff6:	f3c0 00c2 	ubfx	r0, r0, #3, #3
     ffa:	f012 fc1f 	bl	1383c <lll_clock_ppm_get>
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
     ffe:	f894 20ac 	ldrb.w	r2, [r4, #172]	; 0xac
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    1002:	4b76      	ldr	r3, [pc, #472]	; (11dc <CONFIG_BT_RX_STACK_SIZE+0x1dc>)
				(((lll_clock_ppm_local_get() +
    1004:	4407      	add	r7, r0
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    1006:	fb08 f202 	mul.w	r2, r8, r2
				lll->slave.window_widening_periodic_us *
    100a:	980b      	ldr	r0, [sp, #44]	; 0x2c
			lll->slave.window_size_prepare_us =
    100c:	6522      	str	r2, [r4, #80]	; 0x50
				   lll_clock_ppm_get(conn->slave.sca)) *
    100e:	436f      	muls	r7, r5
			conn->slave.ticks_to_offset = 0U;
    1010:	2200      	movs	r2, #0
    1012:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    1016:	f507 2774 	add.w	r7, r7, #999424	; 0xf4000
			lll->slave.window_widening_prepare_us +=
    101a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    101c:	f207 273f 	addw	r7, r7, #575	; 0x23f
    1020:	fbb7 f7f3 	udiv	r7, r7, r3
				(conn_interval_us >> 1) - EVENT_IFS_US;
    1024:	086b      	lsrs	r3, r5, #1
				lll->slave.window_widening_periodic_us *
    1026:	4378      	muls	r0, r7
				(conn_interval_us >> 1) - EVENT_IFS_US;
    1028:	3b96      	subs	r3, #150	; 0x96
			lll->slave.window_widening_prepare_us +=
    102a:	4402      	add	r2, r0
			lll->slave.window_widening_max_us =
    102c:	6463      	str	r3, [r4, #68]	; 0x44
			lll->slave.window_widening_prepare_us +=
    102e:	429a      	cmp	r2, r3
    1030:	bf94      	ite	ls
    1032:	64a2      	strls	r2, [r4, #72]	; 0x48
    1034:	64a3      	strhi	r3, [r4, #72]	; 0x48
			lll->slave.window_widening_periodic_us =
    1036:	6427      	str	r7, [r4, #64]	; 0x40
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1038:	a363      	add	r3, pc, #396	; (adr r3, 11c8 <CONFIG_BT_RX_STACK_SIZE+0x1c8>)
    103a:	e9d3 2300 	ldrd	r2, r3, [r3]
    103e:	fba0 010a 	umull	r0, r1, r0, sl
    1042:	f7ff f84d 	bl	e0 <__aeabi_uldivmod>
    1046:	1a36      	subs	r6, r6, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1048:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
    104c:	fbb0 f0f8 	udiv	r0, r0, r8
    1050:	fb08 f000 	mul.w	r0, r8, r0
    1054:	a35c      	add	r3, pc, #368	; (adr r3, 11c8 <CONFIG_BT_RX_STACK_SIZE+0x1c8>)
    1056:	e9d3 2300 	ldrd	r2, r3, [r3]
    105a:	fba0 010a 	umull	r0, r1, r0, sl
    105e:	f7ff f83f 	bl	e0 <__aeabi_uldivmod>
    1062:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    1066:	930b      	str	r3, [sp, #44]	; 0x2c
			periodic_us -= lll->slave.window_widening_periodic_us;
    1068:	eba5 0907 	sub.w	r9, r5, r7
		lll->interval = conn->llcp_cu.interval;
    106c:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
    1070:	8563      	strh	r3, [r4, #42]	; 0x2a
		lll->latency = conn->llcp_cu.latency;
    1072:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
    1076:	85a3      	strh	r3, [r4, #44]	; 0x2c
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1078:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
    107c:	f242 7210 	movw	r2, #10000	; 0x2710
    1080:	fb02 5303 	mla	r3, r2, r3, r5
    1084:	3b01      	subs	r3, #1
    1086:	fbb3 f3f5 	udiv	r3, r3, r5
    108a:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    108e:	4b54      	ldr	r3, [pc, #336]	; (11e0 <CONFIG_BT_RX_STACK_SIZE+0x1e0>)
    1090:	442b      	add	r3, r5
    1092:	fbb3 f5f5 	udiv	r5, r3, r5
		if (conn->llcp_cu.cmd) {
    1096:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    109a:	f8a4 5076 	strh.w	r5, [r4, #118]	; 0x76
		if (conn->llcp_cu.cmd) {
    109e:	071a      	lsls	r2, r3, #28
			conn->supervision_expire = 0U;
    10a0:	bf44      	itt	mi
    10a2:	2300      	movmi	r3, #0
    10a4:	f8a4 3074 	strhmi.w	r3, [r4, #116]	; 0x74
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    10a8:	2102      	movs	r1, #2
    10aa:	2001      	movs	r0, #1
    10ac:	f014 f9c8 	bl	15440 <mayfly_is_enabled>
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    10b0:	2200      	movs	r2, #0
    10b2:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    10b4:	4607      	mov	r7, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    10b6:	2001      	movs	r0, #1
    10b8:	f00d fa68 	bl	e58c <mayfly_enable>
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    10bc:	4620      	mov	r0, r4
    10be:	f010 fdcd 	bl	11c5c <ll_conn_handle_get>
    10c2:	1d45      	adds	r5, r0, #5
    10c4:	b2ed      	uxtb	r5, r5
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
    10c6:	4b47      	ldr	r3, [pc, #284]	; (11e4 <CONFIG_BT_RX_STACK_SIZE+0x1e4>)
    10c8:	9400      	str	r4, [sp, #0]
    10ca:	462a      	mov	r2, r5
    10cc:	2101      	movs	r1, #1
    10ce:	2000      	movs	r0, #0
    10d0:	f00e f862 	bl	f198 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    10d4:	f030 0302 	bics.w	r3, r0, #2
    10d8:	d00c      	beq.n	10f4 <CONFIG_BT_RX_STACK_SIZE+0xf4>
    10da:	4a3d      	ldr	r2, [pc, #244]	; (11d0 <CONFIG_BT_RX_STACK_SIZE+0x1d0>)
    10dc:	4942      	ldr	r1, [pc, #264]	; (11e8 <CONFIG_BT_RX_STACK_SIZE+0x1e8>)
    10de:	483e      	ldr	r0, [pc, #248]	; (11d8 <CONFIG_BT_RX_STACK_SIZE+0x1d8>)
    10e0:	f44f 632d 	mov.w	r3, #2768	; 0xad0
    10e4:	f017 fa40 	bl	18568 <printk>
    10e8:	4040      	eors	r0, r0
    10ea:	f380 8811 	msr	BASEPRI, r0
    10ee:	f04f 0003 	mov.w	r0, #3
    10f2:	df02      	svc	2
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    10f4:	fba9 ab0a 	umull	sl, fp, r9, sl
    10f8:	a333      	add	r3, pc, #204	; (adr r3, 11c8 <CONFIG_BT_RX_STACK_SIZE+0x1c8>)
    10fa:	e9d3 2300 	ldrd	r2, r3, [r3]
    10fe:	4650      	mov	r0, sl
    1100:	4659      	mov	r1, fp
    1102:	f7fe ffed 	bl	e0 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1106:	4b39      	ldr	r3, [pc, #228]	; (11ec <CONFIG_BT_RX_STACK_SIZE+0x1ec>)
    1108:	9408      	str	r4, [sp, #32]
    110a:	e9cd 4306 	strd	r4, r3, [sp, #24]
    110e:	4b38      	ldr	r3, [pc, #224]	; (11f0 <CONFIG_BT_RX_STACK_SIZE+0x1f0>)
    1110:	9305      	str	r3, [sp, #20]
    1112:	6923      	ldr	r3, [r4, #16]
    1114:	9304      	str	r3, [sp, #16]
    1116:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    111a:	9303      	str	r3, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
    111c:	4b35      	ldr	r3, [pc, #212]	; (11f4 <CONFIG_BT_RX_STACK_SIZE+0x1f4>)
    111e:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
    1122:	fba4 8903 	umull	r8, r9, r4, r3
    1126:	2307      	movs	r3, #7
    1128:	ebba 0008 	subs.w	r0, sl, r8
    112c:	fb03 9904 	mla	r9, r3, r4, r9
    1130:	eb6b 0109 	sbc.w	r1, fp, r9
    1134:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1138:	2300      	movs	r3, #0
    113a:	f7fe ffd1 	bl	e0 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    113e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1140:	9300      	str	r3, [sp, #0]
    1142:	e9cd 4001 	strd	r4, r0, [sp, #4]
    1146:	4633      	mov	r3, r6
    1148:	462a      	mov	r2, r5
    114a:	2101      	movs	r1, #1
    114c:	2000      	movs	r0, #0
    114e:	f01b f9bd 	bl	1c4cc <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1152:	f030 0302 	bics.w	r3, r0, #2
    1156:	d00c      	beq.n	1172 <CONFIG_BT_RX_STACK_SIZE+0x172>
    1158:	4a1d      	ldr	r2, [pc, #116]	; (11d0 <CONFIG_BT_RX_STACK_SIZE+0x1d0>)
    115a:	4923      	ldr	r1, [pc, #140]	; (11e8 <CONFIG_BT_RX_STACK_SIZE+0x1e8>)
    115c:	481e      	ldr	r0, [pc, #120]	; (11d8 <CONFIG_BT_RX_STACK_SIZE+0x1d8>)
    115e:	f640 23ea 	movw	r3, #2794	; 0xaea
    1162:	f017 fa01 	bl	18568 <printk>
    1166:	4040      	eors	r0, r0
    1168:	f380 8811 	msr	BASEPRI, r0
    116c:	f04f 0003 	mov.w	r0, #3
    1170:	df02      	svc	2
		if (mayfly_was_enabled) {
    1172:	b127      	cbz	r7, 117e <CONFIG_BT_RX_STACK_SIZE+0x17e>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    1174:	2201      	movs	r2, #1
    1176:	2102      	movs	r1, #2
    1178:	4610      	mov	r0, r2
    117a:	f00d fa07 	bl	e58c <mayfly_enable>
				return -ECANCELED;
    117e:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    1182:	e684      	b.n	e8e <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x2d6>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    1184:	2301      	movs	r3, #1
    1186:	712b      	strb	r3, [r5, #4]
    1188:	e6e8      	b.n	f5c <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x3a4>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    118a:	fb05 3111 	mls	r1, r5, r1, r3
    118e:	b289      	uxth	r1, r1
    1190:	4348      	muls	r0, r1
    1192:	a30d      	add	r3, pc, #52	; (adr r3, 11c8 <CONFIG_BT_RX_STACK_SIZE+0x1c8>)
    1194:	e9d3 2300 	ldrd	r2, r3, [r3]
    1198:	fba0 010a 	umull	r0, r1, r0, sl
    119c:	f7fe ffa0 	bl	e0 <__aeabi_uldivmod>
    11a0:	1a36      	subs	r6, r6, r0
    11a2:	e70d      	b.n	fc0 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x408>
			LL_ASSERT(0);
    11a4:	4a0a      	ldr	r2, [pc, #40]	; (11d0 <CONFIG_BT_RX_STACK_SIZE+0x1d0>)
    11a6:	4914      	ldr	r1, [pc, #80]	; (11f8 <CONFIG_BT_RX_STACK_SIZE+0x1f8>)
    11a8:	480b      	ldr	r0, [pc, #44]	; (11d8 <CONFIG_BT_RX_STACK_SIZE+0x1d8>)
    11aa:	f640 23a1 	movw	r3, #2721	; 0xaa1
    11ae:	f017 f9db 	bl	18568 <printk>
    11b2:	4040      	eors	r0, r0
    11b4:	f380 8811 	msr	BASEPRI, r0
    11b8:	f04f 0003 	mov.w	r0, #3
    11bc:	df02      	svc	2
		uint32_t ticks_win_offset = 0;
    11be:	2300      	movs	r3, #0
		periodic_us = conn_interval_us;
    11c0:	46a9      	mov	r9, r5
		uint32_t ticks_win_offset = 0;
    11c2:	930b      	str	r3, [sp, #44]	; 0x2c
    11c4:	e752      	b.n	106c <CONFIG_BT_RX_STACK_SIZE+0x6c>
    11c6:	bf00      	nop
    11c8:	1afd498d 	.word	0x1afd498d
    11cc:	00000007 	.word	0x00000007
    11d0:	00021eb9 	.word	0x00021eb9
    11d4:	00021f99 	.word	0x00021f99
    11d8:	0001f734 	.word	0x0001f734
    11dc:	000f4240 	.word	0x000f4240
    11e0:	026259ff 	.word	0x026259ff
    11e4:	00011bad 	.word	0x00011bad
    11e8:	00021fac 	.word	0x00021fac
    11ec:	00011b55 	.word	0x00011b55
    11f0:	00012e59 	.word	0x00012e59
    11f4:	1afd498d 	.word	0x1afd498d
    11f8:	00020b9a 	.word	0x00020b9a
    11fc:	3b9aca00 	.word	0x3b9aca00
			event_counter = lll->event_counter +
    1200:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    1202:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    1204:	441a      	add	r2, r3
	if (conn->llcp.chan_map.initiate) {
    1206:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
					lll->latency_prepare + lazy;
    120a:	4490      	add	r8, r2
	if (conn->llcp.chan_map.initiate) {
    120c:	07db      	lsls	r3, r3, #31
			event_counter = lll->event_counter +
    120e:	fa1f f888 	uxth.w	r8, r8
	if (conn->llcp.chan_map.initiate) {
    1212:	d525      	bpl.n	1260 <CONFIG_BT_RX_STACK_SIZE+0x260>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1214:	4836      	ldr	r0, [pc, #216]	; (12f0 <CONFIG_BT_RX_STACK_SIZE+0x2f0>)
    1216:	f01a fe9c 	bl	1bf52 <mem_acquire>
		if (tx) {
    121a:	4605      	mov	r5, r0
    121c:	2800      	cmp	r0, #0
    121e:	f43f ae2c 	beq.w	e7a <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x2c2>
			conn->llcp.chan_map.initiate = 0U;
    1222:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
    1226:	f36f 0300 	bfc	r3, #0, #1
    122a:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
			conn->llcp.chan_map.instant = event_counter +
    122e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1230:	4498      	add	r8, r3
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1232:	7903      	ldrb	r3, [r0, #4]
						      conn->lll.latency + 6;
    1234:	f108 0806 	add.w	r8, r8, #6
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1238:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp.chan_map.instant = event_counter +
    123c:	f8a4 8092 	strh.w	r8, [r4, #146]	; 0x92
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1240:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    1242:	2308      	movs	r3, #8
    1244:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    1246:	2301      	movs	r3, #1
    1248:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    124a:	2205      	movs	r2, #5
    124c:	f104 018d 	add.w	r1, r4, #141	; 0x8d
    1250:	3008      	adds	r0, #8
    1252:	f018 fca7 	bl	19ba4 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    1256:	f8b4 3092 	ldrh.w	r3, [r4, #146]	; 0x92
    125a:	f8a5 300d 	strh.w	r3, [r5, #13]
    125e:	e608      	b.n	e72 <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x2ba>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    1260:	f8b4 3092 	ldrh.w	r3, [r4, #146]	; 0x92
    1264:	eba8 0803 	sub.w	r8, r8, r3
    1268:	f418 4f00 	tst.w	r8, #32768	; 0x8000
    126c:	f47f ae05 	bne.w	e7a <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x2c2>
		memcpy(&lll->data_chan_map[0],
    1270:	f104 0534 	add.w	r5, r4, #52	; 0x34
			conn->llcp_ack = conn->llcp_req;
    1274:	f884 1089 	strb.w	r1, [r4, #137]	; 0x89
		memcpy(&lll->data_chan_map[0],
    1278:	2205      	movs	r2, #5
    127a:	f104 018d 	add.w	r1, r4, #141	; 0x8d
    127e:	4628      	mov	r0, r5
    1280:	f018 fc90 	bl	19ba4 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
    1284:	2105      	movs	r1, #5
    1286:	4628      	mov	r0, r5
    1288:	f01a fedf 	bl	1c04a <util_ones_count_get>
		lll->data_chan_count =
    128c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    1290:	f360 0305 	bfi	r3, r0, #0, #6
    1294:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
    1298:	2301      	movs	r3, #1
    129a:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
    129e:	e5ec      	b.n	e7a <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x2c2>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    12a0:	4813      	ldr	r0, [pc, #76]	; (12f0 <CONFIG_BT_RX_STACK_SIZE+0x2f0>)
    12a2:	f01a fe56 	bl	1bf52 <mem_acquire>
		if (tx) {
    12a6:	4601      	mov	r1, r0
    12a8:	b188      	cbz	r0, 12ce <CONFIG_BT_RX_STACK_SIZE+0x2ce>
			conn->llcp_terminate.ack--;
    12aa:	f894 30d1 	ldrb.w	r3, [r4, #209]	; 0xd1
    12ae:	3b01      	subs	r3, #1
    12b0:	f884 30d1 	strb.w	r3, [r4, #209]	; 0xd1
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    12b4:	7903      	ldrb	r3, [r0, #4]
    12b6:	f043 0303 	orr.w	r3, r3, #3
    12ba:	7103      	strb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
    12bc:	2302      	movs	r3, #2
    12be:	7143      	strb	r3, [r0, #5]
			pdu_tx->llctrl.opcode =
    12c0:	71c3      	strb	r3, [r0, #7]
			pdu_tx->llctrl.terminate_ind.error_code =
    12c2:	f894 30d2 	ldrb.w	r3, [r4, #210]	; 0xd2
    12c6:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, tx);
    12c8:	4620      	mov	r0, r4
    12ca:	f01b fab4 	bl	1c836 <ctrl_tx_enqueue>
		if (!conn->procedure_expire) {
    12ce:	f8b4 0078 	ldrh.w	r0, [r4, #120]	; 0x78
    12d2:	2800      	cmp	r0, #0
    12d4:	f47f adda 	bne.w	e8c <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x2d4>
			conn->procedure_expire = conn->supervision_reload;
    12d8:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
			if (conn->procedure_expire <= 1U) {
    12dc:	2b01      	cmp	r3, #1
    12de:	d902      	bls.n	12e6 <CONFIG_BT_RX_STACK_SIZE+0x2e6>
			conn->procedure_expire = conn->supervision_reload;
    12e0:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
    12e4:	e5d2      	b.n	e8c <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x2d4>
				conn->procedure_expire++;
    12e6:	3301      	adds	r3, #1
    12e8:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
    12ec:	e5cf      	b.n	e8e <CONFIG_BT_MESH_MOD_ACKD_TIMEOUT_BASE+0x2d6>
    12ee:	bf00      	nop
    12f0:	200028c8 	.word	0x200028c8
    12f4:	00000000 	.word	0x00000000

000012f8 <ull_slave_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param);

void ull_slave_setup(memq_link_t *link, struct node_rx_hdr *rx,
		     struct node_rx_ftr *ftr, struct lll_conn *lll)
{
    12f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    12fc:	461d      	mov	r5, r3
	struct ll_conn *conn;
	uint16_t win_offset;
	uint16_t timeout;
	uint8_t chan_sel;

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    12fe:	6813      	ldr	r3, [r2, #0]
	conn = lll->hdr.parent;
    1300:	462f      	mov	r7, r5
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    1302:	f8d3 a000 	ldr.w	sl, [r3]

	/* Populate the slave context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;

	peer_addr_type = pdu_adv->tx_addr;
    1306:	7f0b      	ldrb	r3, [r1, #28]
	conn = lll->hdr.parent;
    1308:	f857 6b08 	ldr.w	r6, [r7], #8
{
    130c:	b093      	sub	sp, #76	; 0x4c
    130e:	460c      	mov	r4, r1
	peer_addr_type = pdu_adv->tx_addr;
    1310:	f3c3 1380 	ubfx	r3, r3, #6, #1
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    1314:	311e      	adds	r1, #30
{
    1316:	4683      	mov	fp, r0
    1318:	4691      	mov	r9, r2
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    131a:	a810      	add	r0, sp, #64	; 0x40
    131c:	2206      	movs	r2, #6
	peer_addr_type = pdu_adv->tx_addr;
    131e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    1322:	f018 fc3f 	bl	19ba4 <memcpy>
		peer_addr_type += 2;
	} else {
#else /* CONFIG_BT_CTLR_PRIVACY */
	if (1) {
#endif /* CONFIG_BT_CTLR_PRIVACY */
		memcpy(peer_id_addr, peer_addr, BDADDR_SIZE);
    1326:	2206      	movs	r2, #6
    1328:	a910      	add	r1, sp, #64	; 0x40
    132a:	a80e      	add	r0, sp, #56	; 0x38
    132c:	f018 fc3a 	bl	19ba4 <memcpy>
	memcpy(conn->peer_addr, peer_id_addr, sizeof(conn->peer_addr));
	conn->own_addr_type = own_addr_type;
	memcpy(conn->own_addr, own_addr, sizeof(conn->own_addr));
#endif /* CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN */

	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    1330:	2203      	movs	r2, #3
    1332:	f104 012e 	add.w	r1, r4, #46	; 0x2e
    1336:	4638      	mov	r0, r7
    1338:	f018 fc34 	bl	19ba4 <memcpy>
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    133c:	1d2b      	adds	r3, r5, #4
    133e:	4618      	mov	r0, r3
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    1340:	f105 0718 	add.w	r7, r5, #24
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    1344:	2204      	movs	r2, #4
    1346:	f104 012a 	add.w	r1, r4, #42	; 0x2a
    134a:	930a      	str	r3, [sp, #40]	; 0x28
    134c:	f018 fc2a 	bl	19ba4 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    1350:	2205      	movs	r2, #5
    1352:	f104 013a 	add.w	r1, r4, #58	; 0x3a
    1356:	4638      	mov	r0, r7
    1358:	f018 fc24 	bl	19ba4 <memcpy>
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    135c:	2105      	movs	r1, #5
    135e:	4638      	mov	r0, r7
    1360:	f01a fe73 	bl	1c04a <util_ones_count_get>
    1364:	7f6a      	ldrb	r2, [r5, #29]
    1366:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    136a:	f360 0205 	bfi	r2, r0, #0, #6
    136e:	776a      	strb	r2, [r5, #29]
			       sizeof(lll->data_chan_map));
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    1370:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
    1374:	f3c2 0104 	ubfx	r1, r2, #0, #5
    1378:	77a9      	strb	r1, [r5, #30]
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    137a:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    137c:	81e9      	strh	r1, [r5, #14]
	if ((lll->data_chan_count < 2) || (lll->data_chan_hop < 5) ||
    137e:	2801      	cmp	r0, #1
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    1380:	f002 021f 	and.w	r2, r2, #31
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    1384:	b28f      	uxth	r7, r1
	if ((lll->data_chan_count < 2) || (lll->data_chan_hop < 5) ||
    1386:	d906      	bls.n	1396 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe>
    1388:	321b      	adds	r2, #27
    138a:	f002 021f 	and.w	r2, r2, #31
    138e:	2a0b      	cmp	r2, #11
    1390:	d801      	bhi.n	1396 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe>
	    (lll->data_chan_hop > 16) || !lll->interval) {
    1392:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1394:	b987      	cbnz	r7, 13b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x30>
		lll->slave.initiated = 0U;
    1396:	f895 3020 	ldrb.w	r3, [r5, #32]
    139a:	f36f 0300 	bfc	r3, #0, #1
    139e:	f885 3020 	strb.w	r3, [r5, #32]

		/* Mark for buffer for release */
		rx->type = NODE_RX_TYPE_RELEASE;
    13a2:	2301      	movs	r3, #1
    13a4:	7123      	strb	r3, [r4, #4]
			/* Mark for buffer for release */
			rx->type = NODE_RX_TYPE_RELEASE;
		}

		/* Enqueue connection or CSA event to be release */
		ll_rx_put(link, rx);
    13a6:	4621      	mov	r1, r4
    13a8:	4658      	mov	r0, fp
    13aa:	f00f fc31 	bl	10c10 <ll_rx_put>
		ll_rx_sched();
    13ae:	f00f fc39 	bl	10c24 <ll_rx_sched>
	/* enable ticker job, irrespective of disabled in this function so
	 * first connection event can be scheduled as soon as possible.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
#endif
}
    13b2:	b013      	add	sp, #76	; 0x4c
    13b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	((struct lll_adv *)ftr->param)->conn = NULL;
    13b8:	f8d9 2000 	ldr.w	r2, [r9]
    13bc:	930d      	str	r3, [sp, #52]	; 0x34
    13be:	f04f 0800 	mov.w	r8, #0
    13c2:	f8c2 8004 	str.w	r8, [r2, #4]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    13c6:	f894 1037 	ldrb.w	r1, [r4, #55]	; 0x37
    13ca:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
    13ce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    13d2:	822a      	strh	r2, [r5, #16]
	conn->slave.sca = pdu_adv->connect_ind.sca;
    13d4:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
    13d8:	f896 107c 	ldrb.w	r1, [r6, #124]	; 0x7c
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    13dc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    13de:	930b      	str	r3, [sp, #44]	; 0x2c
	conn->slave.sca = pdu_adv->connect_ind.sca;
    13e0:	0952      	lsrs	r2, r2, #5
    13e2:	f362 01c5 	bfi	r1, r2, #3, #3
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    13e6:	f240 43e2 	movw	r3, #1250	; 0x4e2
	conn->slave.sca = pdu_adv->connect_ind.sca;
    13ea:	f886 107c 	strb.w	r1, [r6, #124]	; 0x7c
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    13ee:	435f      	muls	r7, r3
		(((lll_clock_ppm_local_get() +
    13f0:	f01b fbee 	bl	1cbd0 <lll_clock_ppm_local_get>
    13f4:	900a      	str	r0, [sp, #40]	; 0x28
		   lll_clock_ppm_get(conn->slave.sca)) *
    13f6:	f896 007c 	ldrb.w	r0, [r6, #124]	; 0x7c
    13fa:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    13fe:	f012 fa1d 	bl	1383c <lll_clock_ppm_get>
		(((lll_clock_ppm_local_get() +
    1402:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1404:	4410      	add	r0, r2
		   lll_clock_ppm_get(conn->slave.sca)) *
    1406:	4378      	muls	r0, r7
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    1408:	f500 2074 	add.w	r0, r0, #999424	; 0xf4000
    140c:	4a7a      	ldr	r2, [pc, #488]	; (15f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x270>)
    140e:	f200 203f 	addw	r0, r0, #575	; 0x23f
    1412:	fbb0 f0f2 	udiv	r0, r0, r2
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    1416:	087a      	lsrs	r2, r7, #1
    1418:	3a96      	subs	r2, #150	; 0x96
    141a:	62aa      	str	r2, [r5, #40]	; 0x28
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size *
    141c:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
	lll->slave.window_widening_periodic_us =
    1420:	6268      	str	r0, [r5, #36]	; 0x24
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size *
    1422:	f240 43e2 	movw	r3, #1250	; 0x4e2
    1426:	435a      	muls	r2, r3
    1428:	63aa      	str	r2, [r5, #56]	; 0x38
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    142a:	8f22      	ldrh	r2, [r4, #56]	; 0x38
    142c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    1430:	f242 7110 	movw	r1, #10000	; 0x2710
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    1434:	b292      	uxth	r2, r2
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    1436:	fb01 7202 	mla	r2, r1, r2, r7
	memcpy((void *)&conn->slave.force, &lll->access_addr[0],
    143a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    143c:	3a01      	subs	r2, #1
    143e:	fbb2 f2f7 	udiv	r2, r2, r7
    1442:	f8a6 2072 	strh.w	r2, [r6, #114]	; 0x72
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1446:	4a6d      	ldr	r2, [pc, #436]	; (15fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x274>)
	memcpy((void *)&conn->slave.force, &lll->access_addr[0],
    1448:	4619      	mov	r1, r3
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    144a:	443a      	add	r2, r7
	memcpy((void *)&conn->slave.force, &lll->access_addr[0],
    144c:	f106 0080 	add.w	r0, r6, #128	; 0x80
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1450:	fbb2 f2f7 	udiv	r2, r2, r7
    1454:	f8a6 2076 	strh.w	r2, [r6, #118]	; 0x76
	memcpy((void *)&conn->slave.force, &lll->access_addr[0],
    1458:	2204      	movs	r2, #4
    145a:	f018 fba3 	bl	19ba4 <memcpy>
	cc->peer_addr_type = peer_addr_type;
    145e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1462:	77a2      	strb	r2, [r4, #30]
	cc->status = 0U;
    1464:	f44f 7380 	mov.w	r3, #256	; 0x100
    1468:	83a3      	strh	r3, [r4, #28]
	memcpy(cc->peer_addr, peer_id_addr, BDADDR_SIZE);
    146a:	a90e      	add	r1, sp, #56	; 0x38
    146c:	2206      	movs	r2, #6
    146e:	f104 001f 	add.w	r0, r4, #31
    1472:	f018 fb97 	bl	19ba4 <memcpy>
	cc->interval = lll->interval;
    1476:	89eb      	ldrh	r3, [r5, #14]
    1478:	84e3      	strh	r3, [r4, #38]	; 0x26
	cc->latency = lll->latency;
    147a:	8a2b      	ldrh	r3, [r5, #16]
    147c:	8523      	strh	r3, [r4, #40]	; 0x28
	cc->sca = conn->slave.sca;
    147e:	f896 307c 	ldrb.w	r3, [r6, #124]	; 0x7c
	cc->timeout = timeout;
    1482:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
    1486:	8562      	strh	r2, [r4, #42]	; 0x2a
	cc->sca = conn->slave.sca;
    1488:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    148c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	lll->handle = ll_conn_handle_get(conn);
    1490:	4630      	mov	r0, r6
    1492:	f010 fbe3 	bl	11c5c <ll_conn_handle_get>
	ll_rx_put(link, rx);
    1496:	4621      	mov	r1, r4
	lll->handle = ll_conn_handle_get(conn);
    1498:	81a8      	strh	r0, [r5, #12]
	rx->handle = lll->handle;
    149a:	80e0      	strh	r0, [r4, #6]
	ll_rx_put(link, rx);
    149c:	4658      	mov	r0, fp
    149e:	f00f fbb7 	bl	10c10 <ll_rx_put>
	ll_rx_sched();
    14a2:	f00f fbbf 	bl	10c24 <ll_rx_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(0, 0);
    14a6:	4641      	mov	r1, r8
    14a8:	4640      	mov	r0, r8
    14aa:	f01b fb65 	bl	1cb78 <lll_radio_rx_ready_delay_get>
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    14ae:	4c54      	ldr	r4, [pc, #336]	; (1600 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x278>)
	conn->ull.ticks_active_to_start = 0U;
    14b0:	f8c6 8004 	str.w	r8, [r6, #4]
	ready_delay_us = lll_radio_rx_ready_delay_get(0, 0);
    14b4:	4683      	mov	fp, r0
	conn->ull.ticks_prepare_to_start =
    14b6:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    14b8:	f200 4052 	addw	r0, r0, #1106	; 0x452
	conn->ull.ticks_preempt_to_start =
    14bc:	e9c6 3802 	strd	r3, r8, [r6, #8]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    14c0:	fba0 0104 	umull	r0, r1, r0, r4
    14c4:	a34a      	add	r3, pc, #296	; (adr r3, 15f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x268>)
    14c6:	e9d3 2300 	ldrd	r2, r3, [r3]
    14ca:	f7fe fe09 	bl	e0 <__aeabi_uldivmod>
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    14ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    14d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    14d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn->ull.ticks_slot =
    14d6:	6130      	str	r0, [r6, #16]
	conn_offset_us = ftr->radio_end_us;
    14d8:	f8d9 000c 	ldr.w	r0, [r9, #12]
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    14dc:	1aff      	subs	r7, r7, r3
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    14de:	f240 43e2 	movw	r3, #1250	; 0x4e2
    14e2:	fb03 0002 	mla	r0, r3, r2, r0
	conn_offset_us -= EVENT_JITTER_US;
    14e6:	f200 3086 	addw	r0, r0, #902	; 0x386
	conn_offset_us -= ready_delay_us;
    14ea:	eba0 030b 	sub.w	r3, r0, fp
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    14ee:	4642      	mov	r2, r8
    14f0:	2102      	movs	r1, #2
    14f2:	2001      	movs	r0, #1
	conn_offset_us -= ready_delay_us;
    14f4:	930a      	str	r3, [sp, #40]	; 0x28
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    14f6:	f00d f849 	bl	e58c <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    14fa:	4650      	mov	r0, sl
    14fc:	f010 f90e 	bl	1171c <ull_adv_handle_get>
    1500:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    1502:	4b40      	ldr	r3, [pc, #256]	; (1604 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x27c>)
    1504:	f8cd a000 	str.w	sl, [sp]
    1508:	b2d2      	uxtb	r2, r2
    150a:	2101      	movs	r1, #1
    150c:	4640      	mov	r0, r8
    150e:	f00d fe43 	bl	f198 <ticker_stop>
	ticker_op_stop_adv_cb(ticker_status, adv);
    1512:	4651      	mov	r1, sl
    1514:	f011 fc84 	bl	12e20 <ticker_op_stop_adv_cb>
	if (adv->lll.is_hdcd) {
    1518:	f89a 3024 	ldrb.w	r3, [sl, #36]	; 0x24
    151c:	f013 0f01 	tst.w	r3, #1
    1520:	46a2      	mov	sl, r4
    1522:	d007      	beq.n	1534 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ac>
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    1524:	2201      	movs	r2, #1
    1526:	f8cd 8000 	str.w	r8, [sp]
    152a:	4643      	mov	r3, r8
    152c:	4611      	mov	r1, r2
    152e:	4640      	mov	r0, r8
    1530:	f00d fe32 	bl	f198 <ticker_stop>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1534:	4630      	mov	r0, r6
    1536:	f010 fb91 	bl	11c5c <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    153a:	fba7 450a 	umull	r4, r5, r7, sl
    153e:	a32c      	add	r3, pc, #176	; (adr r3, 15f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x268>)
    1540:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1544:	4680      	mov	r8, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    1546:	4629      	mov	r1, r5
    1548:	4620      	mov	r0, r4
    154a:	f7fe fdc9 	bl	e0 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    154e:	f8d9 3008 	ldr.w	r3, [r9, #8]
    1552:	f1a3 0931 	sub.w	r9, r3, #49	; 0x31
    1556:	f240 13a5 	movw	r3, #421	; 0x1a5
    155a:	9308      	str	r3, [sp, #32]
    155c:	4b2a      	ldr	r3, [pc, #168]	; (1608 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x280>)
    155e:	e9cd 6306 	strd	r6, r3, [sp, #24]
    1562:	4b2a      	ldr	r3, [pc, #168]	; (160c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x284>)
    1564:	9305      	str	r3, [sp, #20]
    1566:	6933      	ldr	r3, [r6, #16]
    1568:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    156a:	4b29      	ldr	r3, [pc, #164]	; (1610 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x288>)
    156c:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
    1570:	fba6 bc03 	umull	fp, ip, r6, r3
    1574:	2307      	movs	r3, #7
    1576:	fb03 cc06 	mla	ip, r3, r6, ip
    157a:	ebb4 000b 	subs.w	r0, r4, fp
    157e:	eb65 010c 	sbc.w	r1, r5, ip
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1582:	f108 0705 	add.w	r7, r8, #5
				     HAL_TICKER_REMAINDER(conn_interval_us),
    1586:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    158a:	f04f 0800 	mov.w	r8, #0
				     HAL_TICKER_REMAINDER(conn_interval_us),
    158e:	2300      	movs	r3, #0
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1590:	f8cd 800c 	str.w	r8, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    1594:	f7fe fda4 	bl	e0 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    1598:	990a      	ldr	r1, [sp, #40]	; 0x28
    159a:	a315      	add	r3, pc, #84	; (adr r3, 15f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x268>)
    159c:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    15a0:	e9cd 6001 	strd	r6, r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    15a4:	fba1 010a 	umull	r0, r1, r1, sl
    15a8:	f7fe fd9a 	bl	e0 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    15ac:	b2ff      	uxtb	r7, r7
    15ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    15b2:	9000      	str	r0, [sp, #0]
    15b4:	464b      	mov	r3, r9
    15b6:	463a      	mov	r2, r7
    15b8:	2101      	movs	r1, #1
    15ba:	4640      	mov	r0, r8
    15bc:	f01a ff86 	bl	1c4cc <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    15c0:	f030 0302 	bics.w	r3, r0, #2
    15c4:	d00c      	beq.n	15e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x258>
    15c6:	4a13      	ldr	r2, [pc, #76]	; (1614 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x28c>)
    15c8:	4913      	ldr	r1, [pc, #76]	; (1618 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x290>)
    15ca:	4814      	ldr	r0, [pc, #80]	; (161c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x294>)
    15cc:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
    15d0:	f016 ffca 	bl	18568 <printk>
    15d4:	4040      	eors	r0, r0
    15d6:	f380 8811 	msr	BASEPRI, r0
    15da:	f04f 0003 	mov.w	r0, #3
    15de:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    15e0:	2201      	movs	r2, #1
    15e2:	2102      	movs	r1, #2
    15e4:	4610      	mov	r0, r2
    15e6:	f00c ffd1 	bl	e58c <mayfly_enable>
    15ea:	e6e2      	b.n	13b2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2a>
    15ec:	f3af 8000 	nop.w
    15f0:	1afd498d 	.word	0x1afd498d
    15f4:	00000007 	.word	0x00000007
    15f8:	000f4240 	.word	0x000f4240
    15fc:	026259ff 	.word	0x026259ff
    1600:	3b9aca00 	.word	0x3b9aca00
    1604:	00012e21 	.word	0x00012e21
    1608:	00012df5 	.word	0x00012df5
    160c:	00012e59 	.word	0x00012e59
    1610:	1afd498d 	.word	0x1afd498d
    1614:	0002205b 	.word	0x0002205b
    1618:	00021fac 	.word	0x00021fac
    161c:	0001f734 	.word	0x0001f734

00001620 <nrf_flash_sync_exe>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
	_ticker_sync_context.slot = duration;
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
    1620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1624:	b08f      	sub	sp, #60	; 0x3c
	uint8_t instance_index;
	uint8_t ticker_id;
	int result;
	uint32_t err;

	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
    1626:	f10d 0137 	add.w	r1, sp, #55	; 0x37
			      /* (MAYFLY_CALL_ID_PROGRAM) */
			   ticker_id, /* flash ticker id */
			   ticker_ticks_now_get(), /* current tick */
			   0, /* first int. immediately */
			   /* period */
			   HAL_TICKER_US_TO_TICKS(
    162a:	4f35      	ldr	r7, [pc, #212]	; (1700 <nrf_flash_sync_exe+0xe0>)
{
    162c:	900b      	str	r0, [sp, #44]	; 0x2c
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
    162e:	f10d 0036 	add.w	r0, sp, #54	; 0x36
    1632:	f01a fff4 	bl	1c61e <ll_timeslice_ticker_id_get>
	err = ticker_start(instance_index,
    1636:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
			   HAL_TICKER_US_TO_TICKS(
    163a:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 1714 <nrf_flash_sync_exe+0xf4>
	err = ticker_start(instance_index,
    163e:	f89d a036 	ldrb.w	sl, [sp, #54]	; 0x36
    1642:	930a      	str	r3, [sp, #40]	; 0x28
    1644:	f01a ff75 	bl	1c532 <ticker_ticks_now_get>
			   HAL_TICKER_US_TO_TICKS(
    1648:	683c      	ldr	r4, [r7, #0]
    164a:	fba4 4509 	umull	r4, r5, r4, r9
    164e:	a32a      	add	r3, pc, #168	; (adr r3, 16f8 <nrf_flash_sync_exe+0xd8>)
    1650:	e9d3 2300 	ldrd	r2, r3, [r3]
	err = ticker_start(instance_index,
    1654:	4680      	mov	r8, r0
			   HAL_TICKER_US_TO_TICKS(
    1656:	4629      	mov	r1, r5
    1658:	4620      	mov	r0, r4
    165a:	f7fe fd41 	bl	e0 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
    165e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1660:	9306      	str	r3, [sp, #24]
			   HAL_TICKER_US_TO_TICKS(
    1662:	4683      	mov	fp, r0
				_ticker_sync_context.interval),
			   /* period remainder */
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
			   0, /* lazy, voluntary skips */
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    1664:	6878      	ldr	r0, [r7, #4]
	err = ticker_start(instance_index,
    1666:	4b27      	ldr	r3, [pc, #156]	; (1704 <nrf_flash_sync_exe+0xe4>)
    1668:	9305      	str	r3, [sp, #20]
    166a:	2600      	movs	r6, #0
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    166c:	a322      	add	r3, pc, #136	; (adr r3, 16f8 <nrf_flash_sync_exe+0xd8>)
    166e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1672:	fba0 0109 	umull	r0, r1, r0, r9
	err = ticker_start(instance_index,
    1676:	e9cd 6607 	strd	r6, r6, [sp, #28]
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    167a:	f7fe fd31 	bl	e0 <__aeabi_uldivmod>
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
    167e:	4b22      	ldr	r3, [pc, #136]	; (1708 <nrf_flash_sync_exe+0xe8>)
    1680:	f02b 497f 	bic.w	r9, fp, #4278190080	; 0xff000000
    1684:	fba9 bc03 	umull	fp, ip, r9, r3
	err = ticker_start(instance_index,
    1688:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
    168c:	2307      	movs	r3, #7
    168e:	fb03 cc09 	mla	ip, r3, r9, ip
	err = ticker_start(instance_index,
    1692:	e9cd 6003 	strd	r6, r0, [sp, #12]
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
    1696:	ebb4 000b 	subs.w	r0, r4, fp
    169a:	eb65 010c 	sbc.w	r1, r5, ip
    169e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    16a2:	2300      	movs	r3, #0
    16a4:	f7fe fd1c 	bl	e0 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
    16a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    16aa:	9600      	str	r6, [sp, #0]
    16ac:	e9cd 9001 	strd	r9, r0, [sp, #4]
    16b0:	4643      	mov	r3, r8
    16b2:	2103      	movs	r1, #3
    16b4:	4650      	mov	r0, sl
    16b6:	f01a ff09 	bl	1c4cc <ticker_start>
			   time_slot_callback_prepare,
			   op_desc,
			   NULL, /* no op callback */
			   NULL);

	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
    16ba:	f030 0402 	bics.w	r4, r0, #2
    16be:	d115      	bne.n	16ec <nrf_flash_sync_exe+0xcc>
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    16c0:	4a12      	ldr	r2, [pc, #72]	; (170c <nrf_flash_sync_exe+0xec>)
    16c2:	4813      	ldr	r0, [pc, #76]	; (1710 <nrf_flash_sync_exe+0xf0>)
    16c4:	2300      	movs	r3, #0
    16c6:	f015 fea7 	bl	17418 <z_impl_k_sem_take>
		result = -ECANCELED;
	} else if (k_sem_take(&sem_sync, K_MSEC(FLASH_TIMEOUT_MS)) != 0) {
    16ca:	b168      	cbz	r0, 16e8 <nrf_flash_sync_exe+0xc8>
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
    16cc:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
    16d0:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
    16d4:	9400      	str	r4, [sp, #0]
    16d6:	4623      	mov	r3, r4
    16d8:	2103      	movs	r1, #3
    16da:	f00d fd5d 	bl	f198 <ticker_stop>
		/* Stop any scheduled jobs */
		_ticker_stop(instance_index, 3, ticker_id);

		/* wait for operation's complete overrun*/
		result = -ETIMEDOUT;
    16de:	f06f 0073 	mvn.w	r0, #115	; 0x73
	} else {
		result = _ticker_sync_context.result;
	}

	return result;
}
    16e2:	b00f      	add	sp, #60	; 0x3c
    16e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		result = _ticker_sync_context.result;
    16e8:	68f8      	ldr	r0, [r7, #12]
    16ea:	e7fa      	b.n	16e2 <nrf_flash_sync_exe+0xc2>
		result = -ECANCELED;
    16ec:	f06f 008b 	mvn.w	r0, #139	; 0x8b
	return result;
    16f0:	e7f7      	b.n	16e2 <nrf_flash_sync_exe+0xc2>
    16f2:	bf00      	nop
    16f4:	f3af 8000 	nop.w
    16f8:	1afd498d 	.word	0x1afd498d
    16fc:	00000007 	.word	0x00000007
    1700:	20002c70 	.word	0x20002c70
    1704:	00015ebd 	.word	0x00015ebd
    1708:	1afd498d 	.word	0x1afd498d
    170c:	000b7b44 	.word	0x000b7b44
    1710:	20002c80 	.word	0x20002c80
    1714:	3b9aca00 	.word	0x3b9aca00

00001718 <nrf_flash_sync_check_time_limit>:
{
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
    1718:	b538      	push	{r3, r4, r5, lr}
	uint32_t ticks_diff;

	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
    171a:	4d0f      	ldr	r5, [pc, #60]	; (1758 <nrf_flash_sync_check_time_limit+0x40>)
{
    171c:	4604      	mov	r4, r0
	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
    171e:	f01a ff08 	bl	1c532 <ticker_ticks_now_get>
    1722:	68a9      	ldr	r1, [r5, #8]
    1724:	f01a ff07 	bl	1c536 <ticker_ticks_diff_get>
					   _ticker_sync_context.ticks_begin);
	if (ticks_diff + ticks_diff/iteration >
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
    1728:	490c      	ldr	r1, [pc, #48]	; (175c <nrf_flash_sync_check_time_limit+0x44>)
	if (ticks_diff + ticks_diff/iteration >
    172a:	fbb0 f4f4 	udiv	r4, r0, r4
    172e:	4404      	add	r4, r0
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
    1730:	6868      	ldr	r0, [r5, #4]
    1732:	a307      	add	r3, pc, #28	; (adr r3, 1750 <nrf_flash_sync_check_time_limit+0x38>)
    1734:	e9d3 2300 	ldrd	r2, r3, [r3]
    1738:	fba0 0101 	umull	r0, r1, r0, r1
    173c:	f7fe fcd0 	bl	e0 <__aeabi_uldivmod>
    1740:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return true;
	}

	return false;
}
    1744:	4284      	cmp	r4, r0
    1746:	bf94      	ite	ls
    1748:	2000      	movls	r0, #0
    174a:	2001      	movhi	r0, #1
    174c:	bd38      	pop	{r3, r4, r5, pc}
    174e:	bf00      	nop
    1750:	1afd498d 	.word	0x1afd498d
    1754:	00000007 	.word	0x00000007
    1758:	20002c70 	.word	0x20002c70
    175c:	3b9aca00 	.word	0x3b9aca00

00001760 <main>:

//#include "bluccino.h"

  void main(void)
  {
    bl_prt("hello, Bluccino!\n");
    1760:	4801      	ldr	r0, [pc, #4]	; (1768 <main+0x8>)
    1762:	f016 bf01 	b.w	18568 <printk>
    1766:	bf00      	nop
    1768:	0001ec78 	.word	0x0001ec78

0000176c <__printk_hook_install>:
 *
 * @return N/A
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
    176c:	4b01      	ldr	r3, [pc, #4]	; (1774 <__printk_hook_install+0x8>)
    176e:	6018      	str	r0, [r3, #0]
}
    1770:	4770      	bx	lr
    1772:	bf00      	nop
    1774:	20000228 	.word	0x20000228

00001778 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    1778:	b530      	push	{r4, r5, lr}
    177a:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    177c:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    1780:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    1782:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    1784:	a901      	add	r1, sp, #4
    1786:	4805      	ldr	r0, [pc, #20]	; (179c <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    1788:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    178a:	f000 f8ef 	bl	196c <cbvprintf>

	if (ctx.count < ctx.max) {
    178e:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    1792:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    1794:	bfb8      	it	lt
    1796:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    1798:	b005      	add	sp, #20
    179a:	bd30      	pop	{r4, r5, pc}
    179c:	00018543 	.word	0x00018543

000017a0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    17a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    17a4:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    17a8:	f019 0808 	ands.w	r8, r9, #8
{
    17ac:	4604      	mov	r4, r0
    17ae:	4693      	mov	fp, r2
	if (processing) {
    17b0:	d00d      	beq.n	17ce <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    17b2:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    17b4:	bf0c      	ite	eq
    17b6:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    17ba:	f049 0920 	orrne.w	r9, r9, #32
    17be:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    17c2:	f38b 8811 	msr	BASEPRI, fp
    17c6:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    17ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    17ce:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    17d2:	2902      	cmp	r1, #2
    17d4:	d107      	bne.n	17e6 <process_event+0x46>
			evt = process_recheck(mgr);
    17d6:	4620      	mov	r0, r4
    17d8:	f016 fee0 	bl	1859c <process_recheck>
		if (evt == EVT_NOP) {
    17dc:	2800      	cmp	r0, #0
    17de:	d0f0      	beq.n	17c2 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    17e0:	2801      	cmp	r0, #1
    17e2:	8b23      	ldrh	r3, [r4, #24]
    17e4:	d150      	bne.n	1888 <process_event+0xe8>
			res = mgr->last_res;
    17e6:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    17e8:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    17ea:	2f00      	cmp	r7, #0
    17ec:	da15      	bge.n	181a <process_event+0x7a>
		*clients = mgr->clients;
    17ee:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    17f0:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    17f4:	e9c4 8800 	strd	r8, r8, [r4]
    17f8:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    17fc:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    17fe:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1800:	8b21      	ldrh	r1, [r4, #24]
    1802:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1806:	45ca      	cmp	sl, r9
    1808:	d002      	beq.n	1810 <process_event+0x70>
		if (do_monitors
    180a:	68a3      	ldr	r3, [r4, #8]
    180c:	2b00      	cmp	r3, #0
    180e:	d15c      	bne.n	18ca <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
    1810:	b90d      	cbnz	r5, 1816 <process_event+0x76>
		    || (transit != NULL)) {
    1812:	2e00      	cmp	r6, #0
    1814:	d074      	beq.n	1900 <process_event+0x160>
    1816:	2300      	movs	r3, #0
    1818:	e058      	b.n	18cc <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    181a:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    181e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1820:	2a01      	cmp	r2, #1
    1822:	d820      	bhi.n	1866 <process_event+0xc6>
		*clients = mgr->clients;
    1824:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    1828:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    182a:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    182c:	b289      	uxth	r1, r1
	list->tail = NULL;
    182e:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1832:	d10c      	bne.n	184e <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1834:	2d00      	cmp	r5, #0
    1836:	462b      	mov	r3, r5
    1838:	bf38      	it	cc
    183a:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    183c:	b12b      	cbz	r3, 184a <process_event+0xaa>
				mgr->refs += 1U;
    183e:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1840:	681b      	ldr	r3, [r3, #0]
    1842:	3201      	adds	r2, #1
    1844:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1846:	2b00      	cmp	r3, #0
    1848:	d1f8      	bne.n	183c <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    184a:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    184e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1850:	4620      	mov	r0, r4
    1852:	f016 fea3 	bl	1859c <process_recheck>
    1856:	4606      	mov	r6, r0
    1858:	2800      	cmp	r0, #0
    185a:	d0d1      	beq.n	1800 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    185c:	8b23      	ldrh	r3, [r4, #24]
    185e:	f043 0320 	orr.w	r3, r3, #32
    1862:	8323      	strh	r3, [r4, #24]
    1864:	e7cb      	b.n	17fe <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1866:	2b04      	cmp	r3, #4
    1868:	d10c      	bne.n	1884 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    186a:	f021 0107 	bic.w	r1, r1, #7
    186e:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1870:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1872:	4620      	mov	r0, r4
    1874:	f016 fe92 	bl	1859c <process_recheck>
    1878:	4605      	mov	r5, r0
    187a:	2800      	cmp	r0, #0
    187c:	d0bf      	beq.n	17fe <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    187e:	f041 0120 	orr.w	r1, r1, #32
    1882:	8321      	strh	r1, [r4, #24]
    1884:	2500      	movs	r5, #0
    1886:	e7ba      	b.n	17fe <process_event+0x5e>
		} else if (evt == EVT_START) {
    1888:	2803      	cmp	r0, #3
    188a:	d109      	bne.n	18a0 <process_event+0x100>
			transit = mgr->transitions->start;
    188c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    188e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    1892:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1894:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    1898:	8323      	strh	r3, [r4, #24]
}
    189a:	2500      	movs	r5, #0
		res = 0;
    189c:	462f      	mov	r7, r5
    189e:	e7af      	b.n	1800 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    18a0:	2804      	cmp	r0, #4
    18a2:	d106      	bne.n	18b2 <process_event+0x112>
			transit = mgr->transitions->stop;
    18a4:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    18a6:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    18aa:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    18ac:	f043 0304 	orr.w	r3, r3, #4
    18b0:	e7f2      	b.n	1898 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
    18b2:	2805      	cmp	r0, #5
    18b4:	d106      	bne.n	18c4 <process_event+0x124>
			transit = mgr->transitions->reset;
    18b6:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    18b8:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    18bc:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    18be:	f043 0305 	orr.w	r3, r3, #5
    18c2:	e7e9      	b.n	1898 <process_event+0xf8>
    18c4:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    18c6:	462e      	mov	r6, r5
    18c8:	e7e8      	b.n	189c <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
    18ca:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    18cc:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    18d0:	8321      	strh	r1, [r4, #24]
    18d2:	f38b 8811 	msr	BASEPRI, fp
    18d6:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    18da:	bb03      	cbnz	r3, 191e <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
    18dc:	2d00      	cmp	r5, #0
    18de:	d133      	bne.n	1948 <process_event+0x1a8>
			if (transit != NULL) {
    18e0:	b116      	cbz	r6, 18e8 <process_event+0x148>
				transit(mgr, transition_complete);
    18e2:	4921      	ldr	r1, [pc, #132]	; (1968 <process_event+0x1c8>)
    18e4:	4620      	mov	r0, r4
    18e6:	47b0      	blx	r6
	__asm__ volatile(
    18e8:	f04f 0320 	mov.w	r3, #32
    18ec:	f3ef 8b11 	mrs	fp, BASEPRI
    18f0:	f383 8811 	msr	BASEPRI, r3
    18f4:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    18f8:	8b23      	ldrh	r3, [r4, #24]
    18fa:	f023 0308 	bic.w	r3, r3, #8
    18fe:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1900:	8b23      	ldrh	r3, [r4, #24]
    1902:	06da      	lsls	r2, r3, #27
    1904:	d528      	bpl.n	1958 <process_event+0x1b8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1906:	f023 0310 	bic.w	r3, r3, #16
    190a:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    190c:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    190e:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    1912:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    1916:	2900      	cmp	r1, #0
    1918:	f47f af5b 	bne.w	17d2 <process_event+0x32>
out:
    191c:	e751      	b.n	17c2 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    191e:	68a1      	ldr	r1, [r4, #8]
    1920:	2900      	cmp	r1, #0
    1922:	d0db      	beq.n	18dc <process_event+0x13c>
	return node->next;
    1924:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    1926:	f8d1 b004 	ldr.w	fp, [r1, #4]
    192a:	2b00      	cmp	r3, #0
    192c:	bf38      	it	cc
    192e:	2300      	movcc	r3, #0
    1930:	4699      	mov	r9, r3
    1932:	4652      	mov	r2, sl
    1934:	463b      	mov	r3, r7
    1936:	4620      	mov	r0, r4
    1938:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    193a:	f1b9 0f00 	cmp.w	r9, #0
    193e:	d0cd      	beq.n	18dc <process_event+0x13c>
    1940:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1944:	4649      	mov	r1, r9
    1946:	e7ee      	b.n	1926 <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    1948:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    194a:	463b      	mov	r3, r7
    194c:	4652      	mov	r2, sl
    194e:	4620      	mov	r0, r4
    1950:	682d      	ldr	r5, [r5, #0]
    1952:	f016 fe3f 	bl	185d4 <notify_one>
    1956:	e7c1      	b.n	18dc <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1958:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    195c:	bf1e      	ittt	ne
    195e:	f023 0320 	bicne.w	r3, r3, #32
    1962:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    1964:	2102      	movne	r1, #2
    1966:	e7d2      	b.n	190e <process_event+0x16e>
    1968:	00018601 	.word	0x00018601

0000196c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    196c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1970:	b091      	sub	sp, #68	; 0x44
    1972:	468b      	mov	fp, r1
    1974:	9002      	str	r0, [sp, #8]
    1976:	4692      	mov	sl, r2
    1978:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    197a:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    197c:	f89a 0000 	ldrb.w	r0, [sl]
    1980:	b908      	cbnz	r0, 1986 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    1982:	4628      	mov	r0, r5
    1984:	e35e      	b.n	2044 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x44>
		if (*fp != '%') {
    1986:	2825      	cmp	r0, #37	; 0x25
    1988:	f10a 0701 	add.w	r7, sl, #1
    198c:	d007      	beq.n	199e <cbvprintf+0x32>
			OUTC('%');
    198e:	9b02      	ldr	r3, [sp, #8]
    1990:	4659      	mov	r1, fp
    1992:	4798      	blx	r3
    1994:	2800      	cmp	r0, #0
    1996:	f2c0 8355 	blt.w	2044 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x44>
    199a:	3501      	adds	r5, #1
			break;
    199c:	e210      	b.n	1dc0 <cbvprintf+0x454>
		} state = {
    199e:	2218      	movs	r2, #24
    19a0:	2100      	movs	r1, #0
    19a2:	a80a      	add	r0, sp, #40	; 0x28
    19a4:	f018 f929 	bl	19bfa <memset>
	if (*sp == '%') {
    19a8:	f89a 3001 	ldrb.w	r3, [sl, #1]
    19ac:	2b25      	cmp	r3, #37	; 0x25
    19ae:	d078      	beq.n	1aa2 <cbvprintf+0x136>
    19b0:	2200      	movs	r2, #0
    19b2:	4694      	mov	ip, r2
    19b4:	4616      	mov	r6, r2
    19b6:	4696      	mov	lr, r2
    19b8:	4610      	mov	r0, r2
    19ba:	4639      	mov	r1, r7
		switch (*sp) {
    19bc:	f817 3b01 	ldrb.w	r3, [r7], #1
    19c0:	2b2b      	cmp	r3, #43	; 0x2b
    19c2:	f000 809d 	beq.w	1b00 <cbvprintf+0x194>
    19c6:	f200 8094 	bhi.w	1af2 <cbvprintf+0x186>
    19ca:	2b20      	cmp	r3, #32
    19cc:	f000 809b 	beq.w	1b06 <cbvprintf+0x19a>
    19d0:	2b23      	cmp	r3, #35	; 0x23
    19d2:	f000 809a 	beq.w	1b0a <cbvprintf+0x19e>
    19d6:	b128      	cbz	r0, 19e4 <cbvprintf+0x78>
    19d8:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    19dc:	f040 0004 	orr.w	r0, r0, #4
    19e0:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    19e4:	f1be 0f00 	cmp.w	lr, #0
    19e8:	d005      	beq.n	19f6 <cbvprintf+0x8a>
    19ea:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    19ee:	f040 0008 	orr.w	r0, r0, #8
    19f2:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    19f6:	b12e      	cbz	r6, 1a04 <cbvprintf+0x98>
    19f8:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    19fc:	f040 0010 	orr.w	r0, r0, #16
    1a00:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    1a04:	f1bc 0f00 	cmp.w	ip, #0
    1a08:	d005      	beq.n	1a16 <cbvprintf+0xaa>
    1a0a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    1a0e:	f040 0020 	orr.w	r0, r0, #32
    1a12:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    1a16:	b12a      	cbz	r2, 1a24 <cbvprintf+0xb8>
    1a18:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1a1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    1a20:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    1a24:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1a28:	f002 0044 	and.w	r0, r2, #68	; 0x44
    1a2c:	2844      	cmp	r0, #68	; 0x44
    1a2e:	d103      	bne.n	1a38 <cbvprintf+0xcc>
		conv->flag_zero = false;
    1a30:	f36f 1286 	bfc	r2, #6, #1
    1a34:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    1a38:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    1a3c:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    1a3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    1a42:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    1a46:	d17b      	bne.n	1b40 <cbvprintf+0x1d4>
		conv->width_star = true;
    1a48:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1a4c:	f042 0201 	orr.w	r2, r2, #1
    1a50:	1c4b      	adds	r3, r1, #1
    1a52:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    1a56:	781a      	ldrb	r2, [r3, #0]
    1a58:	2a2e      	cmp	r2, #46	; 0x2e
    1a5a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1a5e:	bf0c      	ite	eq
    1a60:	2101      	moveq	r1, #1
    1a62:	2100      	movne	r1, #0
    1a64:	f361 0241 	bfi	r2, r1, #1, #1
    1a68:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    1a6c:	d174      	bne.n	1b58 <cbvprintf+0x1ec>
	if (*sp == '*') {
    1a6e:	785a      	ldrb	r2, [r3, #1]
    1a70:	2a2a      	cmp	r2, #42	; 0x2a
    1a72:	d06a      	beq.n	1b4a <cbvprintf+0x1de>
    1a74:	3301      	adds	r3, #1
	size_t val = 0;
    1a76:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    1a78:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    1a7a:	4618      	mov	r0, r3
    1a7c:	f810 2b01 	ldrb.w	r2, [r0], #1
    1a80:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1a84:	2f09      	cmp	r7, #9
    1a86:	f240 808e 	bls.w	1ba6 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    1a8a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    1a8e:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    1a90:	f3c2 0040 	ubfx	r0, r2, #1, #1
    1a94:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    1a98:	f361 0241 	bfi	r2, r1, #1, #1
    1a9c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    1aa0:	e05a      	b.n	1b58 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    1aa2:	f10a 0702 	add.w	r7, sl, #2
    1aa6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    1aaa:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1aae:	07d9      	lsls	r1, r3, #31
    1ab0:	f140 8149 	bpl.w	1d46 <cbvprintf+0x3da>
			width = va_arg(ap, int);
    1ab4:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    1ab8:	f1b9 0f00 	cmp.w	r9, #0
    1abc:	da07      	bge.n	1ace <cbvprintf+0x162>
				conv->flag_dash = true;
    1abe:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1ac2:	f042 0204 	orr.w	r2, r2, #4
    1ac6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
    1aca:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
    1ace:	075a      	lsls	r2, r3, #29
    1ad0:	f140 8142 	bpl.w	1d58 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
    1ad4:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    1ad8:	f1b8 0f00 	cmp.w	r8, #0
    1adc:	f280 8141 	bge.w	1d62 <cbvprintf+0x3f6>
				conv->prec_present = false;
    1ae0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1ae4:	f36f 0341 	bfc	r3, #1, #1
    1ae8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    1aec:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    1af0:	e137      	b.n	1d62 <cbvprintf+0x3f6>
		switch (*sp) {
    1af2:	2b2d      	cmp	r3, #45	; 0x2d
    1af4:	d00c      	beq.n	1b10 <cbvprintf+0x1a4>
    1af6:	2b30      	cmp	r3, #48	; 0x30
    1af8:	f47f af6d 	bne.w	19d6 <cbvprintf+0x6a>
			conv->flag_zero = true;
    1afc:	2201      	movs	r2, #1
	} while (loop);
    1afe:	e75c      	b.n	19ba <cbvprintf+0x4e>
			conv->flag_plus = true;
    1b00:	f04f 0e01 	mov.w	lr, #1
    1b04:	e759      	b.n	19ba <cbvprintf+0x4e>
			conv->flag_space = true;
    1b06:	2601      	movs	r6, #1
    1b08:	e757      	b.n	19ba <cbvprintf+0x4e>
			conv->flag_hash = true;
    1b0a:	f04f 0c01 	mov.w	ip, #1
    1b0e:	e754      	b.n	19ba <cbvprintf+0x4e>
		switch (*sp) {
    1b10:	2001      	movs	r0, #1
    1b12:	e752      	b.n	19ba <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    1b14:	fb0c 0202 	mla	r2, ip, r2, r0
    1b18:	3a30      	subs	r2, #48	; 0x30
    1b1a:	4633      	mov	r3, r6
    1b1c:	461e      	mov	r6, r3
    1b1e:	f816 0b01 	ldrb.w	r0, [r6], #1
    1b22:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1b26:	2f09      	cmp	r7, #9
    1b28:	d9f4      	bls.n	1b14 <cbvprintf+0x1a8>
	if (sp != wp) {
    1b2a:	4299      	cmp	r1, r3
    1b2c:	d093      	beq.n	1a56 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    1b2e:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    1b32:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    1b34:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    1b36:	f362 0141 	bfi	r1, r2, #1, #1
    1b3a:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    1b3e:	e78a      	b.n	1a56 <cbvprintf+0xea>
    1b40:	460b      	mov	r3, r1
	size_t val = 0;
    1b42:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1b44:	f04f 0c0a 	mov.w	ip, #10
    1b48:	e7e8      	b.n	1b1c <cbvprintf+0x1b0>
		conv->prec_star = true;
    1b4a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1b4e:	f042 0204 	orr.w	r2, r2, #4
    1b52:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    1b56:	3302      	adds	r3, #2
	switch (*sp) {
    1b58:	461f      	mov	r7, r3
    1b5a:	f817 2b01 	ldrb.w	r2, [r7], #1
    1b5e:	2a6c      	cmp	r2, #108	; 0x6c
    1b60:	d041      	beq.n	1be6 <cbvprintf+0x27a>
    1b62:	d825      	bhi.n	1bb0 <cbvprintf+0x244>
    1b64:	2a68      	cmp	r2, #104	; 0x68
    1b66:	d02b      	beq.n	1bc0 <cbvprintf+0x254>
    1b68:	2a6a      	cmp	r2, #106	; 0x6a
    1b6a:	d046      	beq.n	1bfa <cbvprintf+0x28e>
    1b6c:	2a4c      	cmp	r2, #76	; 0x4c
    1b6e:	d04c      	beq.n	1c0a <cbvprintf+0x29e>
    1b70:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    1b72:	f817 2b01 	ldrb.w	r2, [r7], #1
    1b76:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1b7a:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    1b7e:	2a78      	cmp	r2, #120	; 0x78
    1b80:	f200 80d9 	bhi.w	1d36 <cbvprintf+0x3ca>
    1b84:	2a57      	cmp	r2, #87	; 0x57
    1b86:	d84d      	bhi.n	1c24 <cbvprintf+0x2b8>
    1b88:	2a41      	cmp	r2, #65	; 0x41
    1b8a:	d003      	beq.n	1b94 <cbvprintf+0x228>
    1b8c:	3a45      	subs	r2, #69	; 0x45
    1b8e:	2a02      	cmp	r2, #2
    1b90:	f200 80d1 	bhi.w	1d36 <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    1b94:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1b98:	2204      	movs	r2, #4
    1b9a:	f362 0302 	bfi	r3, r2, #0, #3
    1b9e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    1ba2:	2301      	movs	r3, #1
			break;
    1ba4:	e09e      	b.n	1ce4 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
    1ba6:	fb06 2101 	mla	r1, r6, r1, r2
    1baa:	3930      	subs	r1, #48	; 0x30
    1bac:	4603      	mov	r3, r0
    1bae:	e764      	b.n	1a7a <cbvprintf+0x10e>
	switch (*sp) {
    1bb0:	2a74      	cmp	r2, #116	; 0x74
    1bb2:	d026      	beq.n	1c02 <cbvprintf+0x296>
    1bb4:	2a7a      	cmp	r2, #122	; 0x7a
    1bb6:	d1db      	bne.n	1b70 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    1bb8:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1bbc:	2206      	movs	r2, #6
    1bbe:	e00d      	b.n	1bdc <cbvprintf+0x270>
		if (*++sp == 'h') {
    1bc0:	785a      	ldrb	r2, [r3, #1]
    1bc2:	2a68      	cmp	r2, #104	; 0x68
    1bc4:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1bc8:	d106      	bne.n	1bd8 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
    1bca:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    1bcc:	f361 02c6 	bfi	r2, r1, #3, #4
    1bd0:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    1bd4:	1c9f      	adds	r7, r3, #2
    1bd6:	e7cc      	b.n	1b72 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    1bd8:	4613      	mov	r3, r2
    1bda:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    1bdc:	f362 03c6 	bfi	r3, r2, #3, #4
    1be0:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    1be4:	e7c5      	b.n	1b72 <cbvprintf+0x206>
		if (*++sp == 'l') {
    1be6:	785a      	ldrb	r2, [r3, #1]
    1be8:	2a6c      	cmp	r2, #108	; 0x6c
    1bea:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1bee:	d101      	bne.n	1bf4 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
    1bf0:	2104      	movs	r1, #4
    1bf2:	e7eb      	b.n	1bcc <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
    1bf4:	4613      	mov	r3, r2
    1bf6:	2203      	movs	r2, #3
    1bf8:	e7f0      	b.n	1bdc <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
    1bfa:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1bfe:	2205      	movs	r2, #5
    1c00:	e7ec      	b.n	1bdc <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
    1c02:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1c06:	2207      	movs	r2, #7
    1c08:	e7e8      	b.n	1bdc <cbvprintf+0x270>
		conv->unsupported = true;
    1c0a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    1c0e:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    1c12:	f023 0302 	bic.w	r3, r3, #2
    1c16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1c1a:	f043 0302 	orr.w	r3, r3, #2
    1c1e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    1c22:	e7a6      	b.n	1b72 <cbvprintf+0x206>
    1c24:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    1c28:	2920      	cmp	r1, #32
    1c2a:	f200 8084 	bhi.w	1d36 <cbvprintf+0x3ca>
    1c2e:	a001      	add	r0, pc, #4	; (adr r0, 1c34 <cbvprintf+0x2c8>)
    1c30:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    1c34:	00001cf9 	.word	0x00001cf9
    1c38:	00001d37 	.word	0x00001d37
    1c3c:	00001d37 	.word	0x00001d37
    1c40:	00001d37 	.word	0x00001d37
    1c44:	00001d37 	.word	0x00001d37
    1c48:	00001d37 	.word	0x00001d37
    1c4c:	00001d37 	.word	0x00001d37
    1c50:	00001d37 	.word	0x00001d37
    1c54:	00001d37 	.word	0x00001d37
    1c58:	00001b95 	.word	0x00001b95
    1c5c:	00001d37 	.word	0x00001d37
    1c60:	00001cf9 	.word	0x00001cf9
    1c64:	00001cb9 	.word	0x00001cb9
    1c68:	00001b95 	.word	0x00001b95
    1c6c:	00001b95 	.word	0x00001b95
    1c70:	00001b95 	.word	0x00001b95
    1c74:	00001d37 	.word	0x00001d37
    1c78:	00001cb9 	.word	0x00001cb9
    1c7c:	00001d37 	.word	0x00001d37
    1c80:	00001d37 	.word	0x00001d37
    1c84:	00001d37 	.word	0x00001d37
    1c88:	00001d37 	.word	0x00001d37
    1c8c:	00001d01 	.word	0x00001d01
    1c90:	00001cf9 	.word	0x00001cf9
    1c94:	00001d1d 	.word	0x00001d1d
    1c98:	00001d37 	.word	0x00001d37
    1c9c:	00001d37 	.word	0x00001d37
    1ca0:	00001d1d 	.word	0x00001d1d
    1ca4:	00001d37 	.word	0x00001d37
    1ca8:	00001cf9 	.word	0x00001cf9
    1cac:	00001d37 	.word	0x00001d37
    1cb0:	00001d37 	.word	0x00001d37
    1cb4:	00001cf9 	.word	0x00001cf9
		conv->specifier_cat = SPECIFIER_SINT;
    1cb8:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    1cbc:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    1cbe:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    1cc2:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1cc6:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    1cc8:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    1ccc:	bf02      	ittt	eq
    1cce:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    1cd2:	f041 0101 	orreq.w	r1, r1, #1
    1cd6:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    1cda:	2a63      	cmp	r2, #99	; 0x63
    1cdc:	d131      	bne.n	1d42 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1cde:	3b00      	subs	r3, #0
    1ce0:	bf18      	it	ne
    1ce2:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    1ce4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1ce8:	f3c2 0140 	ubfx	r1, r2, #1, #1
    1cec:	430b      	orrs	r3, r1
    1cee:	f363 0241 	bfi	r2, r3, #1, #1
    1cf2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    1cf6:	e6d8      	b.n	1aaa <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    1cf8:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    1cfc:	2002      	movs	r0, #2
    1cfe:	e7de      	b.n	1cbe <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    1d00:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1d04:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1d08:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    1d0c:	2103      	movs	r1, #3
    1d0e:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1d12:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    1d14:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1d18:	4143      	adcs	r3, r0
    1d1a:	e7e3      	b.n	1ce4 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    1d1c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1d20:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    1d22:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    1d26:	f361 0202 	bfi	r2, r1, #0, #3
    1d2a:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    1d2e:	bf14      	ite	ne
    1d30:	2301      	movne	r3, #1
    1d32:	2300      	moveq	r3, #0
    1d34:	e7d6      	b.n	1ce4 <cbvprintf+0x378>
		conv->invalid = true;
    1d36:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    1d3a:	f043 0301 	orr.w	r3, r3, #1
    1d3e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    1d42:	2300      	movs	r3, #0
    1d44:	e7ce      	b.n	1ce4 <cbvprintf+0x378>
		} else if (conv->width_present) {
    1d46:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    1d4a:	2a00      	cmp	r2, #0
			width = conv->width_value;
    1d4c:	bfb4      	ite	lt
    1d4e:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
    1d52:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
    1d56:	e6ba      	b.n	1ace <cbvprintf+0x162>
		} else if (conv->prec_present) {
    1d58:	079b      	lsls	r3, r3, #30
    1d5a:	f57f aec7 	bpl.w	1aec <cbvprintf+0x180>
			precision = conv->prec_value;
    1d5e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    1d62:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    1d66:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    1d68:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    1d6c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    1d70:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    1d74:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    1d76:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    1d7a:	d136      	bne.n	1dea <cbvprintf+0x47e>
			switch (length_mod) {
    1d7c:	1ed3      	subs	r3, r2, #3
    1d7e:	2b04      	cmp	r3, #4
    1d80:	d820      	bhi.n	1dc4 <cbvprintf+0x458>
    1d82:	e8df f003 	tbb	[pc, r3]
    1d86:	0703      	.short	0x0703
    1d88:	1f07      	.short	0x1f07
    1d8a:	1f          	.byte	0x1f
    1d8b:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    1d8c:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
    1d90:	17c1      	asrs	r1, r0, #31
    1d92:	e004      	b.n	1d9e <cbvprintf+0x432>
					(sint_value_type)va_arg(ap, intmax_t);
    1d94:	3407      	adds	r4, #7
    1d96:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    1d9a:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
    1d9e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    1da2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    1da6:	f013 0603 	ands.w	r6, r3, #3
    1daa:	d054      	beq.n	1e56 <cbvprintf+0x4ea>
			OUTS(sp, fp);
    1dac:	9802      	ldr	r0, [sp, #8]
    1dae:	463b      	mov	r3, r7
    1db0:	4652      	mov	r2, sl
    1db2:	4659      	mov	r1, fp
    1db4:	f016 ffc3 	bl	18d3e <outs>
    1db8:	2800      	cmp	r0, #0
    1dba:	f2c0 8143 	blt.w	2044 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x44>
    1dbe:	4405      	add	r5, r0
			continue;
    1dc0:	46ba      	mov	sl, r7
    1dc2:	e5db      	b.n	197c <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1dc4:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
    1dc8:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1dca:	ea4f 71e0 	mov.w	r1, r0, asr #31
    1dce:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    1dd2:	d105      	bne.n	1de0 <cbvprintf+0x474>
				value->uint = (unsigned char)value->uint;
    1dd4:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    1dd8:	930a      	str	r3, [sp, #40]	; 0x28
    1dda:	2300      	movs	r3, #0
    1ddc:	930b      	str	r3, [sp, #44]	; 0x2c
    1dde:	e7e0      	b.n	1da2 <cbvprintf+0x436>
			} else if (length_mod == LENGTH_H) {
    1de0:	2a02      	cmp	r2, #2
    1de2:	d1de      	bne.n	1da2 <cbvprintf+0x436>
				value->sint = (short)value->sint;
    1de4:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
    1de8:	e7d2      	b.n	1d90 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
    1dea:	2b02      	cmp	r3, #2
    1dec:	d123      	bne.n	1e36 <cbvprintf+0x4ca>
			switch (length_mod) {
    1dee:	1ed3      	subs	r3, r2, #3
    1df0:	2b04      	cmp	r3, #4
    1df2:	d813      	bhi.n	1e1c <cbvprintf+0x4b0>
    1df4:	e8df f003 	tbb	[pc, r3]
    1df8:	120a0a03 	.word	0x120a0a03
    1dfc:	12          	.byte	0x12
    1dfd:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    1dfe:	6820      	ldr	r0, [r4, #0]
    1e00:	900a      	str	r0, [sp, #40]	; 0x28
    1e02:	2100      	movs	r1, #0
    1e04:	1d23      	adds	r3, r4, #4
    1e06:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    1e08:	461c      	mov	r4, r3
    1e0a:	e7ca      	b.n	1da2 <cbvprintf+0x436>
					(uint_value_type)va_arg(ap,
    1e0c:	3407      	adds	r4, #7
    1e0e:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
    1e12:	e8f3 0102 	ldrd	r0, r1, [r3], #8
    1e16:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
    1e1a:	e7f5      	b.n	1e08 <cbvprintf+0x49c>
					(uint_value_type)va_arg(ap, size_t);
    1e1c:	f854 3b04 	ldr.w	r3, [r4], #4
    1e20:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    1e22:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
    1e24:	f04f 0300 	mov.w	r3, #0
    1e28:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    1e2a:	d0d3      	beq.n	1dd4 <cbvprintf+0x468>
			} else if (length_mod == LENGTH_H) {
    1e2c:	2a02      	cmp	r2, #2
    1e2e:	d1b8      	bne.n	1da2 <cbvprintf+0x436>
				value->uint = (unsigned short)value->uint;
    1e30:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    1e34:	e7d0      	b.n	1dd8 <cbvprintf+0x46c>
		} else if (specifier_cat == SPECIFIER_FP) {
    1e36:	2b04      	cmp	r3, #4
    1e38:	d107      	bne.n	1e4a <cbvprintf+0x4de>
			if (length_mod == LENGTH_UPPER_L) {
    1e3a:	3407      	adds	r4, #7
    1e3c:	f024 0407 	bic.w	r4, r4, #7
    1e40:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
    1e44:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    1e48:	e7ab      	b.n	1da2 <cbvprintf+0x436>
		} else if (specifier_cat == SPECIFIER_PTR) {
    1e4a:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    1e4c:	bf04      	itt	eq
    1e4e:	f854 3b04 	ldreq.w	r3, [r4], #4
    1e52:	930a      	streq	r3, [sp, #40]	; 0x28
    1e54:	e7a5      	b.n	1da2 <cbvprintf+0x436>
		switch (conv->specifier) {
    1e56:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    1e5a:	2878      	cmp	r0, #120	; 0x78
    1e5c:	d8b0      	bhi.n	1dc0 <cbvprintf+0x454>
    1e5e:	2862      	cmp	r0, #98	; 0x62
    1e60:	d822      	bhi.n	1ea8 <cbvprintf+0x53c>
    1e62:	2825      	cmp	r0, #37	; 0x25
    1e64:	f43f ad93 	beq.w	198e <cbvprintf+0x22>
    1e68:	2858      	cmp	r0, #88	; 0x58
    1e6a:	d1a9      	bne.n	1dc0 <cbvprintf+0x454>
			bps = encode_uint(value->uint, conv, buf, bpe);
    1e6c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1e70:	9300      	str	r3, [sp, #0]
    1e72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    1e76:	ab04      	add	r3, sp, #16
    1e78:	aa0c      	add	r2, sp, #48	; 0x30
    1e7a:	f016 ff15 	bl	18ca8 <encode_uint>
    1e7e:	4682      	mov	sl, r0
			if (precision >= 0) {
    1e80:	f1b8 0f00 	cmp.w	r8, #0
    1e84:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    1e88:	db0c      	blt.n	1ea4 <cbvprintf+0x538>
				conv->flag_zero = false;
    1e8a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    1e8e:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    1e92:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    1e96:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    1e98:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    1e9c:	d902      	bls.n	1ea4 <cbvprintf+0x538>
					conv->pad0_value = precision - (int)len;
    1e9e:	eba8 0303 	sub.w	r3, r8, r3
    1ea2:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    1ea4:	4680      	mov	r8, r0
    1ea6:	e03d      	b.n	1f24 <cbvprintf+0x5b8>
    1ea8:	3863      	subs	r0, #99	; 0x63
    1eaa:	2815      	cmp	r0, #21
    1eac:	d888      	bhi.n	1dc0 <cbvprintf+0x454>
    1eae:	a101      	add	r1, pc, #4	; (adr r1, 1eb4 <cbvprintf+0x548>)
    1eb0:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
    1eb4:	00001f35 	.word	0x00001f35
    1eb8:	00001f99 	.word	0x00001f99
    1ebc:	00001dc1 	.word	0x00001dc1
    1ec0:	00001dc1 	.word	0x00001dc1
    1ec4:	00001dc1 	.word	0x00001dc1
    1ec8:	00001dc1 	.word	0x00001dc1
    1ecc:	00001f99 	.word	0x00001f99
    1ed0:	00001dc1 	.word	0x00001dc1
    1ed4:	00001dc1 	.word	0x00001dc1
    1ed8:	00001dc1 	.word	0x00001dc1
    1edc:	00001dc1 	.word	0x00001dc1
    1ee0:	00001ff7 	.word	0x00001ff7
    1ee4:	00001fc5 	.word	0x00001fc5
    1ee8:	00001fc9 	.word	0x00001fc9
    1eec:	00001dc1 	.word	0x00001dc1
    1ef0:	00001dc1 	.word	0x00001dc1
    1ef4:	00001f0d 	.word	0x00001f0d
    1ef8:	00001dc1 	.word	0x00001dc1
    1efc:	00001fc5 	.word	0x00001fc5
    1f00:	00001dc1 	.word	0x00001dc1
    1f04:	00001dc1 	.word	0x00001dc1
    1f08:	00001fc5 	.word	0x00001fc5
			if (precision >= 0) {
    1f0c:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    1f10:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    1f14:	db0a      	blt.n	1f2c <cbvprintf+0x5c0>
				len = strnlen(bps, precision);
    1f16:	4641      	mov	r1, r8
    1f18:	4650      	mov	r0, sl
    1f1a:	f017 fe0f 	bl	19b3c <strnlen>
			bpe = bps + len;
    1f1e:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    1f22:	2600      	movs	r6, #0
		if (bps == NULL) {
    1f24:	f1ba 0f00 	cmp.w	sl, #0
    1f28:	d10c      	bne.n	1f44 <cbvprintf+0x5d8>
    1f2a:	e749      	b.n	1dc0 <cbvprintf+0x454>
				len = strlen(bps);
    1f2c:	4650      	mov	r0, sl
    1f2e:	f017 fdfe 	bl	19b2e <strlen>
    1f32:	e7f4      	b.n	1f1e <cbvprintf+0x5b2>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1f34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1f36:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    1f3a:	2600      	movs	r6, #0
			bpe = buf + 1;
    1f3c:	f10d 0811 	add.w	r8, sp, #17
			bps = buf;
    1f40:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
    1f44:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    1f48:	b106      	cbz	r6, 1f4c <cbvprintf+0x5e0>
			nj_len += 1U;
    1f4a:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    1f4c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1f50:	06d0      	lsls	r0, r2, #27
    1f52:	d56b      	bpl.n	202c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2c>
			nj_len += 2U;
    1f54:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    1f56:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    1f58:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    1f5a:	bf48      	it	mi
    1f5c:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    1f5e:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    1f60:	bf48      	it	mi
    1f62:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    1f64:	f1b9 0f00 	cmp.w	r9, #0
    1f68:	dd79      	ble.n	205e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x5e>
			if (!conv->flag_dash) {
    1f6a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    1f6e:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    1f72:	f3c2 0380 	ubfx	r3, r2, #2, #1
    1f76:	9303      	str	r3, [sp, #12]
    1f78:	0753      	lsls	r3, r2, #29
    1f7a:	d470      	bmi.n	205e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x5e>
				if (conv->flag_zero) {
    1f7c:	0650      	lsls	r0, r2, #25
    1f7e:	d564      	bpl.n	204a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4a>
					if (sign != 0) {
    1f80:	b146      	cbz	r6, 1f94 <cbvprintf+0x628>
						OUTC(sign);
    1f82:	9b02      	ldr	r3, [sp, #8]
    1f84:	4659      	mov	r1, fp
    1f86:	4630      	mov	r0, r6
    1f88:	4798      	blx	r3
    1f8a:	2800      	cmp	r0, #0
    1f8c:	db5a      	blt.n	2044 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x44>
						sign = 0;
    1f8e:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    1f90:	3501      	adds	r5, #1
						sign = 0;
    1f92:	461e      	mov	r6, r3
					pad = '0';
    1f94:	2330      	movs	r3, #48	; 0x30
    1f96:	e059      	b.n	204c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4c>
			if (conv->flag_plus) {
    1f98:	071e      	lsls	r6, r3, #28
    1f9a:	d411      	bmi.n	1fc0 <cbvprintf+0x654>
				sign = ' ';
    1f9c:	f013 0610 	ands.w	r6, r3, #16
    1fa0:	bf18      	it	ne
    1fa2:	2620      	movne	r6, #32
			sint = value->sint;
    1fa4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    1fa8:	2a00      	cmp	r2, #0
    1faa:	f173 0100 	sbcs.w	r1, r3, #0
    1fae:	f6bf af5d 	bge.w	1e6c <cbvprintf+0x500>
				value->uint = (uint_value_type)-sint;
    1fb2:	4252      	negs	r2, r2
    1fb4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1fb8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    1fbc:	262d      	movs	r6, #45	; 0x2d
    1fbe:	e755      	b.n	1e6c <cbvprintf+0x500>
				sign = '+';
    1fc0:	262b      	movs	r6, #43	; 0x2b
    1fc2:	e7ef      	b.n	1fa4 <cbvprintf+0x638>
		switch (conv->specifier) {
    1fc4:	2600      	movs	r6, #0
    1fc6:	e751      	b.n	1e6c <cbvprintf+0x500>
			if (value->ptr != NULL) {
    1fc8:	980a      	ldr	r0, [sp, #40]	; 0x28
    1fca:	b348      	cbz	r0, 2020 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x20>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1fcc:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1fd0:	9300      	str	r3, [sp, #0]
    1fd2:	aa0c      	add	r2, sp, #48	; 0x30
    1fd4:	ab04      	add	r3, sp, #16
    1fd6:	2100      	movs	r1, #0
    1fd8:	f016 fe66 	bl	18ca8 <encode_uint>
				conv->altform_0c = true;
    1fdc:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    1fe0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1fe4:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1fe8:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1fec:	4682      	mov	sl, r0
				conv->altform_0c = true;
    1fee:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    1ff2:	2600      	movs	r6, #0
				goto prec_int_pad0;
    1ff4:	e744      	b.n	1e80 <cbvprintf+0x514>
				store_count(conv, value->ptr, count);
    1ff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    1ff8:	2a07      	cmp	r2, #7
    1ffa:	f63f aee1 	bhi.w	1dc0 <cbvprintf+0x454>
    1ffe:	e8df f002 	tbb	[pc, r2]
    2002:	040d      	.short	0x040d
    2004:	08080d06 	.word	0x08080d06
    2008:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    200a:	701d      	strb	r5, [r3, #0]
		break;
    200c:	e6d8      	b.n	1dc0 <cbvprintf+0x454>
		*(short *)dp = (short)count;
    200e:	801d      	strh	r5, [r3, #0]
		break;
    2010:	e6d6      	b.n	1dc0 <cbvprintf+0x454>
		*(intmax_t *)dp = (intmax_t)count;
    2012:	4628      	mov	r0, r5
    2014:	17e9      	asrs	r1, r5, #31
    2016:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    201a:	e6d1      	b.n	1dc0 <cbvprintf+0x454>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    201c:	601d      	str	r5, [r3, #0]
		break;
    201e:	e6cf      	b.n	1dc0 <cbvprintf+0x454>
			bpe = bps + 5;
    2020:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 20e8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xe8>
    2024:	4606      	mov	r6, r0
			bps = "(nil)";
    2026:	f1a8 0a05 	sub.w	sl, r8, #5
    202a:	e78b      	b.n	1f44 <cbvprintf+0x5d8>
		} else if (conv->altform_0) {
    202c:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    202e:	bf48      	it	mi
    2030:	3301      	addmi	r3, #1
    2032:	e790      	b.n	1f56 <cbvprintf+0x5ea>
					OUTC(pad);
    2034:	4618      	mov	r0, r3
    2036:	9303      	str	r3, [sp, #12]
    2038:	4659      	mov	r1, fp
    203a:	9b02      	ldr	r3, [sp, #8]
    203c:	4798      	blx	r3
    203e:	2800      	cmp	r0, #0
    2040:	9b03      	ldr	r3, [sp, #12]
    2042:	da04      	bge.n	204e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4e>
#undef OUTS
#undef OUTC
}
    2044:	b011      	add	sp, #68	; 0x44
    2046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    204a:	2320      	movs	r3, #32
    204c:	444d      	add	r5, r9
    204e:	464a      	mov	r2, r9
				while (width-- > 0) {
    2050:	2a00      	cmp	r2, #0
    2052:	eba5 0109 	sub.w	r1, r5, r9
    2056:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    205a:	dceb      	bgt.n	2034 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x34>
    205c:	460d      	mov	r5, r1
		if (sign != 0) {
    205e:	b136      	cbz	r6, 206e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x6e>
			OUTC(sign);
    2060:	9b02      	ldr	r3, [sp, #8]
    2062:	4659      	mov	r1, fp
    2064:	4630      	mov	r0, r6
    2066:	4798      	blx	r3
    2068:	2800      	cmp	r0, #0
    206a:	dbeb      	blt.n	2044 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x44>
    206c:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    206e:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    2072:	06d9      	lsls	r1, r3, #27
    2074:	d401      	bmi.n	207a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x7a>
    2076:	071a      	lsls	r2, r3, #28
    2078:	d506      	bpl.n	2088 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x88>
				OUTC('0');
    207a:	9b02      	ldr	r3, [sp, #8]
    207c:	4659      	mov	r1, fp
    207e:	2030      	movs	r0, #48	; 0x30
    2080:	4798      	blx	r3
    2082:	2800      	cmp	r0, #0
    2084:	dbde      	blt.n	2044 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x44>
    2086:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    2088:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    208c:	06db      	lsls	r3, r3, #27
    208e:	d507      	bpl.n	20a0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xa0>
				OUTC(conv->specifier);
    2090:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    2094:	9b02      	ldr	r3, [sp, #8]
    2096:	4659      	mov	r1, fp
    2098:	4798      	blx	r3
    209a:	2800      	cmp	r0, #0
    209c:	dbd2      	blt.n	2044 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x44>
    209e:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    20a0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    20a2:	442e      	add	r6, r5
    20a4:	1b73      	subs	r3, r6, r5
    20a6:	2b00      	cmp	r3, #0
    20a8:	dc16      	bgt.n	20d8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xd8>
			OUTS(bps, bpe);
    20aa:	9802      	ldr	r0, [sp, #8]
    20ac:	4643      	mov	r3, r8
    20ae:	4652      	mov	r2, sl
    20b0:	4659      	mov	r1, fp
    20b2:	f016 fe44 	bl	18d3e <outs>
    20b6:	2800      	cmp	r0, #0
    20b8:	dbc4      	blt.n	2044 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x44>
    20ba:	4405      	add	r5, r0
		while (width > 0) {
    20bc:	44a9      	add	r9, r5
    20be:	eba9 0305 	sub.w	r3, r9, r5
    20c2:	2b00      	cmp	r3, #0
    20c4:	f77f ae7c 	ble.w	1dc0 <cbvprintf+0x454>
			OUTC(' ');
    20c8:	9b02      	ldr	r3, [sp, #8]
    20ca:	4659      	mov	r1, fp
    20cc:	2020      	movs	r0, #32
    20ce:	4798      	blx	r3
    20d0:	2800      	cmp	r0, #0
    20d2:	dbb7      	blt.n	2044 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x44>
    20d4:	3501      	adds	r5, #1
			--width;
    20d6:	e7f2      	b.n	20be <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xbe>
				OUTC('0');
    20d8:	9b02      	ldr	r3, [sp, #8]
    20da:	4659      	mov	r1, fp
    20dc:	2030      	movs	r0, #48	; 0x30
    20de:	4798      	blx	r3
    20e0:	2800      	cmp	r0, #0
    20e2:	dbaf      	blt.n	2044 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x44>
    20e4:	3501      	adds	r5, #1
    20e6:	e7dd      	b.n	20a4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xa4>
    20e8:	0001ec8f 	.word	0x0001ec8f

000020ec <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    20ec:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    20ee:	4910      	ldr	r1, [pc, #64]	; (2130 <enable_logger+0x44>)
    20f0:	4810      	ldr	r0, [pc, #64]	; (2134 <enable_logger+0x48>)
{
    20f2:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    20f4:	2200      	movs	r2, #0
    20f6:	f01b ff48 	bl	1df8a <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    20fa:	4d0f      	ldr	r5, [pc, #60]	; (2138 <enable_logger+0x4c>)
    20fc:	490f      	ldr	r1, [pc, #60]	; (213c <enable_logger+0x50>)
    20fe:	2200      	movs	r2, #0
    2100:	2300      	movs	r3, #0
    2102:	e9cd 2306 	strd	r2, r3, [sp, #24]
    2106:	2400      	movs	r4, #0
    2108:	230e      	movs	r3, #14
    210a:	e9cd 3403 	strd	r3, r4, [sp, #12]
    210e:	e9cd 4401 	strd	r4, r4, [sp, #4]
    2112:	4b0b      	ldr	r3, [pc, #44]	; (2140 <enable_logger+0x54>)
    2114:	9400      	str	r4, [sp, #0]
    2116:	f44f 7240 	mov.w	r2, #768	; 0x300
    211a:	4628      	mov	r0, r5
    211c:	f014 ffc4 	bl	170a8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    2120:	4908      	ldr	r1, [pc, #32]	; (2144 <enable_logger+0x58>)
    2122:	4628      	mov	r0, r5
    2124:	f01b fba3 	bl	1d86e <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    2128:	4620      	mov	r0, r4
    212a:	b009      	add	sp, #36	; 0x24
    212c:	bd30      	pop	{r4, r5, pc}
    212e:	bf00      	nop
    2130:	00002149 	.word	0x00002149
    2134:	20000d88 	.word	0x20000d88
    2138:	20000dc0 	.word	0x20000dc0
    213c:	20003460 	.word	0x20003460
    2140:	0000258d 	.word	0x0000258d
    2144:	0001ec90 	.word	0x0001ec90

00002148 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    2148:	4801      	ldr	r0, [pc, #4]	; (2150 <log_process_thread_timer_expiry_fn+0x8>)
    214a:	f015 b93f 	b.w	173cc <z_impl_k_sem_give>
    214e:	bf00      	nop
    2150:	20000ba4 	.word	0x20000ba4

00002154 <log_core_init>:
{
    2154:	b510      	push	{r4, lr}
	panic_mode = false;
    2156:	4b0b      	ldr	r3, [pc, #44]	; (2184 <log_core_init+0x30>)
    2158:	2200      	movs	r2, #0
    215a:	701a      	strb	r2, [r3, #0]
		timestamp_func = default_get_timestamp;
    215c:	4b0a      	ldr	r3, [pc, #40]	; (2188 <log_core_init+0x34>)
    215e:	4a0b      	ldr	r2, [pc, #44]	; (218c <log_core_init+0x38>)
    2160:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    2162:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    2166:	f000 fcbd 	bl	2ae4 <log_output_timestamp_freq_set>
		log_msg_pool_init();
    216a:	f000 fa71 	bl	2650 <log_msg_pool_init>
		log_list_init(&list);
    216e:	4808      	ldr	r0, [pc, #32]	; (2190 <log_core_init+0x3c>)
    2170:	f016 fdfc 	bl	18d6c <log_list_init>
}
    2174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    2178:	4906      	ldr	r1, [pc, #24]	; (2194 <log_core_init+0x40>)
    217a:	4807      	ldr	r0, [pc, #28]	; (2198 <log_core_init+0x44>)
    217c:	2308      	movs	r3, #8
    217e:	2248      	movs	r2, #72	; 0x48
    2180:	f01b bb2b 	b.w	1d7da <k_mem_slab_init>
    2184:	20002e9d 	.word	0x20002e9d
    2188:	2000022c 	.word	0x2000022c
    218c:	00018dab 	.word	0x00018dab
    2190:	20001894 	.word	0x20001894
    2194:	20005e88 	.word	0x20005e88
    2198:	2000189c 	.word	0x2000189c

0000219c <get_msg>:
{
    219c:	b510      	push	{r4, lr}
    219e:	f04f 0320 	mov.w	r3, #32
    21a2:	f3ef 8411 	mrs	r4, BASEPRI
    21a6:	f383 8811 	msr	BASEPRI, r3
    21aa:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
    21ae:	4804      	ldr	r0, [pc, #16]	; (21c0 <get_msg+0x24>)
    21b0:	f016 fdec 	bl	18d8c <log_list_head_get>
	__asm__ volatile(
    21b4:	f384 8811 	msr	BASEPRI, r4
    21b8:	f3bf 8f6f 	isb	sy
}
    21bc:	bd10      	pop	{r4, pc}
    21be:	bf00      	nop
    21c0:	20001894 	.word	0x20001894

000021c4 <z_log_dropped>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    21c4:	4b06      	ldr	r3, [pc, #24]	; (21e0 <z_log_dropped+0x1c>)
    21c6:	f3bf 8f5b 	dmb	ish
    21ca:	e853 2f00 	ldrex	r2, [r3]
    21ce:	3201      	adds	r2, #1
    21d0:	e843 2100 	strex	r1, r2, [r3]
    21d4:	2900      	cmp	r1, #0
    21d6:	d1f8      	bne.n	21ca <z_log_dropped+0x6>
    21d8:	f3bf 8f5b 	dmb	ish
}
    21dc:	4770      	bx	lr
    21de:	bf00      	nop
    21e0:	2000188c 	.word	0x2000188c

000021e4 <z_log_dropped_read_and_clear>:
}
    21e4:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    21e6:	4b06      	ldr	r3, [pc, #24]	; (2200 <z_log_dropped_read_and_clear+0x1c>)
    21e8:	f3bf 8f5b 	dmb	ish
    21ec:	4602      	mov	r2, r0
    21ee:	e853 0f00 	ldrex	r0, [r3]
    21f2:	e843 2100 	strex	r1, r2, [r3]
    21f6:	2900      	cmp	r1, #0
    21f8:	d1f9      	bne.n	21ee <z_log_dropped_read_and_clear+0xa>
    21fa:	f3bf 8f5b 	dmb	ish
    21fe:	4770      	bx	lr
    2200:	2000188c 	.word	0x2000188c

00002204 <dropped_notify>:
{
    2204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    2206:	f7ff ffed 	bl	21e4 <z_log_dropped_read_and_clear>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    220a:	4c0a      	ldr	r4, [pc, #40]	; (2234 <dropped_notify+0x30>)
    220c:	4d0a      	ldr	r5, [pc, #40]	; (2238 <dropped_notify+0x34>)
    220e:	1b2d      	subs	r5, r5, r4
    2210:	4607      	mov	r7, r0
    2212:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    2214:	2600      	movs	r6, #0
    2216:	42ae      	cmp	r6, r5
    2218:	db00      	blt.n	221c <dropped_notify+0x18>
}
    221a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    221c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    221e:	795b      	ldrb	r3, [r3, #5]
    2220:	b12b      	cbz	r3, 222e <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
    2222:	6823      	ldr	r3, [r4, #0]
    2224:	691b      	ldr	r3, [r3, #16]
    2226:	b113      	cbz	r3, 222e <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
    2228:	4639      	mov	r1, r7
    222a:	4620      	mov	r0, r4
    222c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    222e:	3601      	adds	r6, #1
    2230:	3410      	adds	r4, #16
    2232:	e7f0      	b.n	2216 <dropped_notify+0x12>
    2234:	0001e650 	.word	0x0001e650
    2238:	0001e660 	.word	0x0001e660

0000223c <log_source_name_get>:
    223c:	4a04      	ldr	r2, [pc, #16]	; (2250 <log_source_name_get+0x14>)
    223e:	4b05      	ldr	r3, [pc, #20]	; (2254 <log_source_name_get+0x18>)
    2240:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    2242:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    2246:	bf34      	ite	cc
    2248:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    224c:	2000      	movcs	r0, #0
}
    224e:	4770      	bx	lr
    2250:	0001e408 	.word	0x0001e408
    2254:	0001e650 	.word	0x0001e650

00002258 <log_backend_enable>:
	id += backend - log_backend_get(0);
    2258:	4b09      	ldr	r3, [pc, #36]	; (2280 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
    225a:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    225c:	1ac3      	subs	r3, r0, r3
    225e:	111b      	asrs	r3, r3, #4
    2260:	3301      	adds	r3, #1
{
    2262:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
    2264:	7113      	strb	r3, [r2, #4]
	log_backend_activate(backend, ctx);
    2266:	6843      	ldr	r3, [r0, #4]
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    2268:	4c06      	ldr	r4, [pc, #24]	; (2284 <log_backend_enable+0x2c>)
	backend->cb->ctx = ctx;
    226a:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    226c:	2201      	movs	r2, #1
    226e:	715a      	strb	r2, [r3, #5]
    2270:	7822      	ldrb	r2, [r4, #0]
    2272:	b912      	cbnz	r2, 227a <log_backend_enable+0x22>
    2274:	4804      	ldr	r0, [pc, #16]	; (2288 <log_backend_enable+0x30>)
    2276:	f015 f8a9 	bl	173cc <z_impl_k_sem_give>
	backend_attached = true;
    227a:	2301      	movs	r3, #1
    227c:	7023      	strb	r3, [r4, #0]
}
    227e:	bd10      	pop	{r4, pc}
    2280:	0001e650 	.word	0x0001e650
    2284:	20002e9c 	.word	0x20002e9c
    2288:	20000ba4 	.word	0x20000ba4

0000228c <log_init>:
{
    228c:	b570      	push	{r4, r5, r6, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    228e:	4b12      	ldr	r3, [pc, #72]	; (22d8 <log_init+0x4c>)
    2290:	f3bf 8f5b 	dmb	ish
    2294:	e853 5f00 	ldrex	r5, [r3]
    2298:	1c6a      	adds	r2, r5, #1
    229a:	e843 2100 	strex	r1, r2, [r3]
    229e:	2900      	cmp	r1, #0
    22a0:	d1f8      	bne.n	2294 <log_init+0x8>
    22a2:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    22a6:	b92d      	cbnz	r5, 22b4 <log_init+0x28>
	return __log_backends_end - __log_backends_start;
    22a8:	4c0c      	ldr	r4, [pc, #48]	; (22dc <log_init+0x50>)
    22aa:	4e0d      	ldr	r6, [pc, #52]	; (22e0 <log_init+0x54>)
    22ac:	1b36      	subs	r6, r6, r4
    22ae:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    22b0:	42b5      	cmp	r5, r6
    22b2:	db00      	blt.n	22b6 <log_init+0x2a>
}
    22b4:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    22b6:	7b23      	ldrb	r3, [r4, #12]
    22b8:	b153      	cbz	r3, 22d0 <log_init+0x44>
			if (backend->api->init != NULL) {
    22ba:	6823      	ldr	r3, [r4, #0]
    22bc:	699b      	ldr	r3, [r3, #24]
    22be:	b10b      	cbz	r3, 22c4 <log_init+0x38>
				backend->api->init(backend);
    22c0:	4620      	mov	r0, r4
    22c2:	4798      	blx	r3
			log_backend_enable(backend,
    22c4:	6863      	ldr	r3, [r4, #4]
    22c6:	2204      	movs	r2, #4
    22c8:	6819      	ldr	r1, [r3, #0]
    22ca:	4620      	mov	r0, r4
    22cc:	f7ff ffc4 	bl	2258 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    22d0:	3501      	adds	r5, #1
    22d2:	3410      	adds	r4, #16
    22d4:	e7ec      	b.n	22b0 <log_init+0x24>
    22d6:	bf00      	nop
    22d8:	20001890 	.word	0x20001890
    22dc:	0001e650 	.word	0x0001e650
    22e0:	0001e660 	.word	0x0001e660

000022e4 <z_log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    22e4:	4b16      	ldr	r3, [pc, #88]	; (2340 <z_log_strdup+0x5c>)
    22e6:	4298      	cmp	r0, r3
{
    22e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    22ea:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    22ec:	d302      	bcc.n	22f4 <z_log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    22ee:	4b15      	ldr	r3, [pc, #84]	; (2344 <z_log_strdup+0x60>)
    22f0:	4298      	cmp	r0, r3
    22f2:	d320      	bcc.n	2336 <z_log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    22f4:	4814      	ldr	r0, [pc, #80]	; (2348 <z_log_strdup+0x64>)
    22f6:	2200      	movs	r2, #0
    22f8:	2300      	movs	r3, #0
    22fa:	a901      	add	r1, sp, #4
    22fc:	f014 fe72 	bl	16fe4 <k_mem_slab_alloc>
	if (err != 0) {
    2300:	4605      	mov	r5, r0
    2302:	b9d8      	cbnz	r0, 233c <z_log_strdup+0x58>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2304:	2201      	movs	r2, #1
    2306:	9b01      	ldr	r3, [sp, #4]
    2308:	f3bf 8f5b 	dmb	ish
    230c:	e853 1f00 	ldrex	r1, [r3]
    2310:	e843 2000 	strex	r0, r2, [r3]
    2314:	2800      	cmp	r0, #0
    2316:	d1f9      	bne.n	230c <z_log_strdup+0x28>
    2318:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    231c:	9801      	ldr	r0, [sp, #4]
    231e:	4621      	mov	r1, r4
    2320:	2241      	movs	r2, #65	; 0x41
    2322:	3004      	adds	r0, #4
    2324:	f017 fbf0 	bl	19b08 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    2328:	9c01      	ldr	r4, [sp, #4]
    232a:	237e      	movs	r3, #126	; 0x7e
    232c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    2330:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
	return dup->buf;
    2334:	3404      	adds	r4, #4
}
    2336:	4620      	mov	r0, r4
    2338:	b003      	add	sp, #12
    233a:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    233c:	4c03      	ldr	r4, [pc, #12]	; (234c <z_log_strdup+0x68>)
    233e:	e7fa      	b.n	2336 <z_log_strdup+0x52>
    2340:	0001e0c8 	.word	0x0001e0c8
    2344:	000227c4 	.word	0x000227c4
    2348:	2000189c 	.word	0x2000189c
    234c:	0001ec98 	.word	0x0001ec98

00002350 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    2350:	b150      	cbz	r0, 2368 <log_is_strdup+0x18>
    2352:	4b06      	ldr	r3, [pc, #24]	; (236c <log_is_strdup+0x1c>)
    2354:	4298      	cmp	r0, r3
    2356:	d306      	bcc.n	2366 <log_is_strdup+0x16>
    2358:	f503 7310 	add.w	r3, r3, #576	; 0x240
    235c:	4298      	cmp	r0, r3
    235e:	bf2c      	ite	cs
    2360:	2000      	movcs	r0, #0
    2362:	2001      	movcc	r0, #1
    2364:	4770      	bx	lr
    2366:	2000      	movs	r0, #0
}
    2368:	4770      	bx	lr
    236a:	bf00      	nop
    236c:	20005e88 	.word	0x20005e88

00002370 <z_impl_log_process>:
{
    2370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    2374:	4b46      	ldr	r3, [pc, #280]	; (2490 <z_impl_log_process+0x120>)
    2376:	781b      	ldrb	r3, [r3, #0]
{
    2378:	b085      	sub	sp, #20
    237a:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    237c:	b903      	cbnz	r3, 2380 <z_impl_log_process+0x10>
    237e:	b300      	cbz	r0, 23c2 <z_impl_log_process+0x52>
	msg = get_msg();
    2380:	f7ff ff0c 	bl	219c <get_msg>
	if (msg.msg) {
    2384:	4605      	mov	r5, r0
    2386:	b178      	cbz	r0, 23a8 <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    2388:	f3bf 8f5b 	dmb	ish
    238c:	4b41      	ldr	r3, [pc, #260]	; (2494 <z_impl_log_process+0x124>)
    238e:	e853 2f00 	ldrex	r2, [r3]
    2392:	3a01      	subs	r2, #1
    2394:	e843 2100 	strex	r1, r2, [r3]
    2398:	2900      	cmp	r1, #0
    239a:	d1f8      	bne.n	238e <z_impl_log_process+0x1e>
    239c:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
    23a0:	b19c      	cbz	r4, 23ca <z_impl_log_process+0x5a>
			log_msg_put(msg.msg);
    23a2:	4628      	mov	r0, r5
    23a4:	f016 fe23 	bl	18fee <log_msg_put>
	if (!bypass && z_log_dropped_pending()) {
    23a8:	b92c      	cbnz	r4, 23b6 <z_impl_log_process+0x46>
	return dropped_cnt > 0;
    23aa:	4b3b      	ldr	r3, [pc, #236]	; (2498 <z_impl_log_process+0x128>)
	if (!bypass && z_log_dropped_pending()) {
    23ac:	681b      	ldr	r3, [r3, #0]
    23ae:	2b00      	cmp	r3, #0
    23b0:	dd01      	ble.n	23b6 <z_impl_log_process+0x46>
		dropped_notify();
    23b2:	f7ff ff27 	bl	2204 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    23b6:	4839      	ldr	r0, [pc, #228]	; (249c <z_impl_log_process+0x12c>)
    23b8:	f016 fce6 	bl	18d88 <log_list_head_peek>
    23bc:	1e04      	subs	r4, r0, #0
    23be:	bf18      	it	ne
    23c0:	2401      	movne	r4, #1
}
    23c2:	4620      	mov	r0, r4
    23c4:	b005      	add	sp, #20
    23c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    23ca:	4b35      	ldr	r3, [pc, #212]	; (24a0 <z_impl_log_process+0x130>)
		if (!IS_ENABLED(CONFIG_LOG2) &&
    23cc:	781b      	ldrb	r3, [r3, #0]
    23ce:	b9cb      	cbnz	r3, 2404 <z_impl_log_process+0x94>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    23d0:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    23d2:	07db      	lsls	r3, r3, #31
    23d4:	d416      	bmi.n	2404 <z_impl_log_process+0x94>
	msg_str = log_msg_str_get(msg);
    23d6:	f016 fe1d 	bl	19014 <log_msg_str_get>
    23da:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    23dc:	4628      	mov	r0, r5
    23de:	f016 fde4 	bl	18faa <log_msg_nargs_get>
    23e2:	4601      	mov	r1, r0
    23e4:	4640      	mov	r0, r8
    23e6:	f016 fce4 	bl	18db2 <z_log_get_s_mask>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    23ea:	4f2e      	ldr	r7, [pc, #184]	; (24a4 <z_impl_log_process+0x134>)
    23ec:	4b2e      	ldr	r3, [pc, #184]	; (24a8 <z_impl_log_process+0x138>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    23ee:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 24c4 <z_impl_log_process+0x154>
    23f2:	1bdb      	subs	r3, r3, r7
    23f4:	08db      	lsrs	r3, r3, #3
    23f6:	9303      	str	r3, [sp, #12]
    23f8:	4b2c      	ldr	r3, [pc, #176]	; (24ac <z_impl_log_process+0x13c>)
    23fa:	1bdb      	subs	r3, r3, r7
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    23fc:	4606      	mov	r6, r0
    23fe:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
    2402:	b936      	cbnz	r6, 2412 <z_impl_log_process+0xa2>
    2404:	4e2a      	ldr	r6, [pc, #168]	; (24b0 <z_impl_log_process+0x140>)
    2406:	4f2b      	ldr	r7, [pc, #172]	; (24b4 <z_impl_log_process+0x144>)
    2408:	1bbf      	subs	r7, r7, r6
    240a:	113f      	asrs	r7, r7, #4
    240c:	f04f 0800 	mov.w	r8, #0
    2410:	e03a      	b.n	2488 <z_impl_log_process+0x118>
		idx = 31 - __builtin_clz(mask);
    2412:	fab6 f186 	clz	r1, r6
    2416:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    241a:	4649      	mov	r1, r9
    241c:	4628      	mov	r0, r5
    241e:	f016 fdc7 	bl	18fb0 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    2422:	4b25      	ldr	r3, [pc, #148]	; (24b8 <z_impl_log_process+0x148>)
    2424:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
    2426:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    2428:	d302      	bcc.n	2430 <z_impl_log_process+0xc0>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    242a:	4b24      	ldr	r3, [pc, #144]	; (24bc <z_impl_log_process+0x14c>)
    242c:	4298      	cmp	r0, r3
    242e:	d31a      	bcc.n	2466 <z_impl_log_process+0xf6>
    2430:	4608      	mov	r0, r1
    2432:	f7ff ff8d 	bl	2350 <log_is_strdup>
    2436:	4602      	mov	r2, r0
    2438:	b9a8      	cbnz	r0, 2466 <z_impl_log_process+0xf6>
    243a:	4b21      	ldr	r3, [pc, #132]	; (24c0 <z_impl_log_process+0x150>)
    243c:	4299      	cmp	r1, r3
    243e:	d012      	beq.n	2466 <z_impl_log_process+0xf6>
	return msg->hdr.ids.source_id;
    2440:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    2442:	9903      	ldr	r1, [sp, #12]
    2444:	f3c3 1389 	ubfx	r3, r3, #6, #10
    2448:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
    244a:	bf38      	it	cc
    244c:	f857 2033 	ldrcc.w	r2, [r7, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    2450:	ea4f 138a 	mov.w	r3, sl, lsl #6
    2454:	f043 0301 	orr.w	r3, r3, #1
    2458:	f8ad 3000 	strh.w	r3, [sp]
    245c:	4649      	mov	r1, r9
    245e:	4643      	mov	r3, r8
    2460:	4658      	mov	r0, fp
    2462:	f016 fd00 	bl	18e66 <log_3>
		mask &= ~BIT(idx);
    2466:	2101      	movs	r1, #1
    2468:	fa01 f109 	lsl.w	r1, r1, r9
    246c:	ea26 0601 	bic.w	r6, r6, r1
    2470:	e7c7      	b.n	2402 <z_impl_log_process+0x92>
	return backend->cb->active;
    2472:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    2474:	795b      	ldrb	r3, [r3, #5]
    2476:	b123      	cbz	r3, 2482 <z_impl_log_process+0x112>
	backend->api->put(backend, msg);
    2478:	6833      	ldr	r3, [r6, #0]
    247a:	4629      	mov	r1, r5
    247c:	685b      	ldr	r3, [r3, #4]
    247e:	4630      	mov	r0, r6
    2480:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    2482:	f108 0801 	add.w	r8, r8, #1
    2486:	3610      	adds	r6, #16
    2488:	45b8      	cmp	r8, r7
    248a:	dbf2      	blt.n	2472 <z_impl_log_process+0x102>
    248c:	e789      	b.n	23a2 <z_impl_log_process+0x32>
    248e:	bf00      	nop
    2490:	20002e9c 	.word	0x20002e9c
    2494:	20001888 	.word	0x20001888
    2498:	2000188c 	.word	0x2000188c
    249c:	20001894 	.word	0x20001894
    24a0:	20002e9d 	.word	0x20002e9d
    24a4:	0001e408 	.word	0x0001e408
    24a8:	0001e650 	.word	0x0001e650
    24ac:	0001e610 	.word	0x0001e610
    24b0:	0001e650 	.word	0x0001e650
    24b4:	0001e660 	.word	0x0001e660
    24b8:	0001e0c8 	.word	0x0001e0c8
    24bc:	000227c4 	.word	0x000227c4
    24c0:	0001ec98 	.word	0x0001ec98
    24c4:	0001ecb2 	.word	0x0001ecb2

000024c8 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    24c8:	4b29      	ldr	r3, [pc, #164]	; (2570 <msg_finalize+0xa8>)
{
    24ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
	msg->hdr.timestamp = timestamp_func();
    24cc:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    24ce:	8141      	strh	r1, [r0, #10]
{
    24d0:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    24d2:	4798      	blx	r3
    24d4:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    24d6:	f04f 0320 	mov.w	r3, #32
    24da:	f3ef 8511 	mrs	r5, BASEPRI
    24de:	f383 8811 	msr	BASEPRI, r3
    24e2:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    24e6:	4823      	ldr	r0, [pc, #140]	; (2574 <msg_finalize+0xac>)
    24e8:	4621      	mov	r1, r4
    24ea:	f016 fc43 	bl	18d74 <log_list_add_tail>
	__asm__ volatile(
    24ee:	f385 8811 	msr	BASEPRI, r5
    24f2:	f3bf 8f6f 	isb	sy
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    24f6:	f3bf 8f5b 	dmb	ish
    24fa:	4b1f      	ldr	r3, [pc, #124]	; (2578 <msg_finalize+0xb0>)
    24fc:	e853 2f00 	ldrex	r2, [r3]
    2500:	3201      	adds	r2, #1
    2502:	e843 2100 	strex	r1, r2, [r3]
    2506:	2900      	cmp	r1, #0
    2508:	d1f8      	bne.n	24fc <msg_finalize+0x34>
    250a:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    250e:	4a1b      	ldr	r2, [pc, #108]	; (257c <msg_finalize+0xb4>)
    2510:	7812      	ldrb	r2, [r2, #0]
    2512:	b182      	cbz	r2, 2536 <msg_finalize+0x6e>
	__asm__ volatile(
    2514:	f04f 0320 	mov.w	r3, #32
    2518:	f3ef 8411 	mrs	r4, BASEPRI
    251c:	f383 8811 	msr	BASEPRI, r3
    2520:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    2524:	2000      	movs	r0, #0
    2526:	f7ff ff23 	bl	2370 <z_impl_log_process>
	__asm__ volatile(
    252a:	f384 8811 	msr	BASEPRI, r4
    252e:	f3bf 8f6f 	isb	sy
}
    2532:	b003      	add	sp, #12
    2534:	bd30      	pop	{r4, r5, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    2536:	4a12      	ldr	r2, [pc, #72]	; (2580 <msg_finalize+0xb8>)
    2538:	681b      	ldr	r3, [r3, #0]
    253a:	6812      	ldr	r2, [r2, #0]
    253c:	2a00      	cmp	r2, #0
    253e:	d0f8      	beq.n	2532 <msg_finalize+0x6a>
    2540:	2b01      	cmp	r3, #1
    2542:	d10a      	bne.n	255a <msg_finalize+0x92>
	z_impl_k_timer_start(timer, duration, period);
    2544:	2200      	movs	r2, #0
    2546:	2300      	movs	r3, #0
    2548:	e9cd 2300 	strd	r2, r3, [sp]
    254c:	480d      	ldr	r0, [pc, #52]	; (2584 <msg_finalize+0xbc>)
    254e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2552:	2300      	movs	r3, #0
    2554:	f015 fe9e 	bl	18294 <z_impl_k_timer_start>
    2558:	e7eb      	b.n	2532 <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    255a:	2b0a      	cmp	r3, #10
    255c:	d1e9      	bne.n	2532 <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
    255e:	4809      	ldr	r0, [pc, #36]	; (2584 <msg_finalize+0xbc>)
    2560:	f01b fd1f 	bl	1dfa2 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    2564:	4808      	ldr	r0, [pc, #32]	; (2588 <msg_finalize+0xc0>)
}
    2566:	b003      	add	sp, #12
    2568:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    256c:	f014 bf2e 	b.w	173cc <z_impl_k_sem_give>
    2570:	2000022c 	.word	0x2000022c
    2574:	20001894 	.word	0x20001894
    2578:	20001888 	.word	0x20001888
    257c:	20002e9d 	.word	0x20002e9d
    2580:	200018b8 	.word	0x200018b8
    2584:	20000d88 	.word	0x20000d88
    2588:	20000ba4 	.word	0x20000ba4

0000258c <log_process_thread_func>:
{
    258c:	b510      	push	{r4, lr}
	log_init();
    258e:	f7ff fe7d 	bl	228c <log_init>
	return z_impl_k_current_get();
    2592:	f015 fc3f 	bl	17e14 <z_impl_k_current_get>
	proc_tid = process_tid;
    2596:	4b0c      	ldr	r3, [pc, #48]	; (25c8 <log_process_thread_func+0x3c>)
    2598:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    259a:	b130      	cbz	r0, 25aa <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    259c:	4b0b      	ldr	r3, [pc, #44]	; (25cc <log_process_thread_func+0x40>)
	    process_tid &&
    259e:	681b      	ldr	r3, [r3, #0]
    25a0:	2b09      	cmp	r3, #9
    25a2:	dd02      	ble.n	25aa <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    25a4:	480a      	ldr	r0, [pc, #40]	; (25d0 <log_process_thread_func+0x44>)
    25a6:	f014 ff11 	bl	173cc <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    25aa:	4c09      	ldr	r4, [pc, #36]	; (25d0 <log_process_thread_func+0x44>)
    25ac:	2000      	movs	r0, #0
    25ae:	f7ff fedf 	bl	2370 <z_impl_log_process>
		if (log_process(false) == false) {
    25b2:	2800      	cmp	r0, #0
    25b4:	d1fa      	bne.n	25ac <log_process_thread_func+0x20>
    25b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    25ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    25be:	4620      	mov	r0, r4
    25c0:	f014 ff2a 	bl	17418 <z_impl_k_sem_take>
    25c4:	e7f2      	b.n	25ac <log_process_thread_func+0x20>
    25c6:	bf00      	nop
    25c8:	200018b8 	.word	0x200018b8
    25cc:	20001888 	.word	0x20001888
    25d0:	20000ba4 	.word	0x20000ba4

000025d4 <z_impl_log_panic>:
{
    25d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    25d6:	4f0e      	ldr	r7, [pc, #56]	; (2610 <z_impl_log_panic+0x3c>)
    25d8:	783d      	ldrb	r5, [r7, #0]
    25da:	b975      	cbnz	r5, 25fa <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    25dc:	4c0d      	ldr	r4, [pc, #52]	; (2614 <z_impl_log_panic+0x40>)
    25de:	4e0e      	ldr	r6, [pc, #56]	; (2618 <z_impl_log_panic+0x44>)
	log_init();
    25e0:	f7ff fe54 	bl	228c <log_init>
    25e4:	1b36      	subs	r6, r6, r4
    25e6:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    25e8:	42b5      	cmp	r5, r6
    25ea:	db07      	blt.n	25fc <z_impl_log_panic+0x28>
    25ec:	2000      	movs	r0, #0
    25ee:	f7ff febf 	bl	2370 <z_impl_log_process>
		while (log_process(false) == true) {
    25f2:	2800      	cmp	r0, #0
    25f4:	d1fa      	bne.n	25ec <z_impl_log_panic+0x18>
	panic_mode = true;
    25f6:	2301      	movs	r3, #1
    25f8:	703b      	strb	r3, [r7, #0]
}
    25fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    25fc:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    25fe:	795b      	ldrb	r3, [r3, #5]
    2600:	b11b      	cbz	r3, 260a <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    2602:	6823      	ldr	r3, [r4, #0]
    2604:	4620      	mov	r0, r4
    2606:	695b      	ldr	r3, [r3, #20]
    2608:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    260a:	3501      	adds	r5, #1
    260c:	3410      	adds	r4, #16
    260e:	e7eb      	b.n	25e8 <z_impl_log_panic+0x14>
    2610:	20002e9d 	.word	0x20002e9d
    2614:	0001e650 	.word	0x0001e650
    2618:	0001e660 	.word	0x0001e660

0000261c <log_free>:
{
    261c:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    261e:	3804      	subs	r0, #4
    2620:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    2622:	f3bf 8f5b 	dmb	ish
    2626:	e850 3f00 	ldrex	r3, [r0]
    262a:	1e5a      	subs	r2, r3, #1
    262c:	e840 2100 	strex	r1, r2, [r0]
    2630:	2900      	cmp	r1, #0
    2632:	d1f8      	bne.n	2626 <log_free+0xa>
    2634:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    2638:	2b01      	cmp	r3, #1
    263a:	d103      	bne.n	2644 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    263c:	4803      	ldr	r0, [pc, #12]	; (264c <log_free+0x30>)
    263e:	a901      	add	r1, sp, #4
    2640:	f01b f8e6 	bl	1d810 <k_mem_slab_free>
}
    2644:	b003      	add	sp, #12
    2646:	f85d fb04 	ldr.w	pc, [sp], #4
    264a:	bf00      	nop
    264c:	2000189c 	.word	0x2000189c

00002650 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    2650:	2320      	movs	r3, #32
    2652:	4902      	ldr	r1, [pc, #8]	; (265c <log_msg_pool_init+0xc>)
    2654:	4802      	ldr	r0, [pc, #8]	; (2660 <log_msg_pool_init+0x10>)
    2656:	461a      	mov	r2, r3
    2658:	f01b b8bf 	b.w	1d7da <k_mem_slab_init>
    265c:	200060c8 	.word	0x200060c8
    2660:	200018bc 	.word	0x200018bc

00002664 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    2664:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
    2666:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    2668:	4d09      	ldr	r5, [pc, #36]	; (2690 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    266a:	9301      	str	r3, [sp, #4]
    266c:	2001      	movs	r0, #1
    266e:	f7ff fe7f 	bl	2370 <z_impl_log_process>
    2672:	4604      	mov	r4, r0
			z_log_dropped();
    2674:	f7ff fda6 	bl	21c4 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    2678:	2200      	movs	r2, #0
    267a:	2300      	movs	r3, #0
    267c:	a901      	add	r1, sp, #4
    267e:	4628      	mov	r0, r5
    2680:	f014 fcb0 	bl	16fe4 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    2684:	b108      	cbz	r0, 268a <log_msg_no_space_handle+0x26>
    2686:	2c00      	cmp	r4, #0
    2688:	d1f0      	bne.n	266c <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
    268a:	9801      	ldr	r0, [sp, #4]
    268c:	b003      	add	sp, #12
    268e:	bd30      	pop	{r4, r5, pc}
    2690:	200018bc 	.word	0x200018bc

00002694 <log_msg_chunk_alloc>:
{
    2694:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    2696:	2300      	movs	r3, #0
    2698:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    269a:	4807      	ldr	r0, [pc, #28]	; (26b8 <log_msg_chunk_alloc+0x24>)
    269c:	2200      	movs	r2, #0
    269e:	2300      	movs	r3, #0
    26a0:	a901      	add	r1, sp, #4
    26a2:	f014 fc9f 	bl	16fe4 <k_mem_slab_alloc>
	if (err != 0) {
    26a6:	b110      	cbz	r0, 26ae <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
    26a8:	f7ff ffdc 	bl	2664 <log_msg_no_space_handle>
    26ac:	9001      	str	r0, [sp, #4]
}
    26ae:	9801      	ldr	r0, [sp, #4]
    26b0:	b003      	add	sp, #12
    26b2:	f85d fb04 	ldr.w	pc, [sp], #4
    26b6:	bf00      	nop
    26b8:	200018bc 	.word	0x200018bc

000026bc <msg_free>:
{
    26bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    26be:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    26c0:	7a45      	ldrb	r5, [r0, #9]
{
    26c2:	b085      	sub	sp, #20
	return msg->hdr.params.std.nargs;
    26c4:	092d      	lsrs	r5, r5, #4
{
    26c6:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    26c8:	07d8      	lsls	r0, r3, #31
    26ca:	d41c      	bmi.n	2706 <msg_free+0x4a>
    26cc:	b1dd      	cbz	r5, 2706 <msg_free+0x4a>
		uint32_t smask = 0U;
    26ce:	2400      	movs	r4, #0
		for (i = 0U; i < nargs; i++) {
    26d0:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
    26d2:	9801      	ldr	r0, [sp, #4]
    26d4:	4631      	mov	r1, r6
    26d6:	f016 fc6b 	bl	18fb0 <log_msg_arg_get>
    26da:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    26dc:	f7ff fe38 	bl	2350 <log_is_strdup>
    26e0:	b170      	cbz	r0, 2700 <msg_free+0x44>
				if (smask == 0U) {
    26e2:	b934      	cbnz	r4, 26f2 <msg_free+0x36>
					smask = z_log_get_s_mask(
    26e4:	9b01      	ldr	r3, [sp, #4]
    26e6:	4629      	mov	r1, r5
    26e8:	6918      	ldr	r0, [r3, #16]
    26ea:	f016 fb62 	bl	18db2 <z_log_get_s_mask>
					if (smask == 0U) {
    26ee:	4604      	mov	r4, r0
    26f0:	b148      	cbz	r0, 2706 <msg_free+0x4a>
				if (smask & BIT(i)) {
    26f2:	fa24 f306 	lsr.w	r3, r4, r6
    26f6:	07d9      	lsls	r1, r3, #31
    26f8:	d502      	bpl.n	2700 <msg_free+0x44>
					log_free(buf);
    26fa:	4638      	mov	r0, r7
    26fc:	f7ff ff8e 	bl	261c <log_free>
		for (i = 0U; i < nargs; i++) {
    2700:	3601      	adds	r6, #1
    2702:	42ae      	cmp	r6, r5
    2704:	d3e5      	bcc.n	26d2 <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
    2706:	9b01      	ldr	r3, [sp, #4]
    2708:	7a1a      	ldrb	r2, [r3, #8]
    270a:	0792      	lsls	r2, r2, #30
    270c:	d504      	bpl.n	2718 <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
    270e:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    2710:	4c08      	ldr	r4, [pc, #32]	; (2734 <msg_free+0x78>)
    2712:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    2714:	9b03      	ldr	r3, [sp, #12]
    2716:	b92b      	cbnz	r3, 2724 <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    2718:	4806      	ldr	r0, [pc, #24]	; (2734 <msg_free+0x78>)
    271a:	a901      	add	r1, sp, #4
    271c:	f01b f878 	bl	1d810 <k_mem_slab_free>
}
    2720:	b005      	add	sp, #20
    2722:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
    2724:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    2726:	a903      	add	r1, sp, #12
    2728:	4620      	mov	r0, r4
    272a:	f01b f871 	bl	1d810 <k_mem_slab_free>
		cont = next;
    272e:	9503      	str	r5, [sp, #12]
    2730:	e7f0      	b.n	2714 <msg_free+0x58>
    2732:	bf00      	nop
    2734:	200018bc 	.word	0x200018bc

00002738 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    2738:	b40e      	push	{r1, r2, r3}
    273a:	b503      	push	{r0, r1, lr}
    273c:	ab03      	add	r3, sp, #12
    273e:	4601      	mov	r1, r0
    2740:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    2744:	4804      	ldr	r0, [pc, #16]	; (2758 <print_formatted+0x20>)
	va_start(args, fmt);
    2746:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    2748:	f7ff f910 	bl	196c <cbvprintf>
	va_end(args);

	return length;
}
    274c:	b002      	add	sp, #8
    274e:	f85d eb04 	ldr.w	lr, [sp], #4
    2752:	b003      	add	sp, #12
    2754:	4770      	bx	lr
    2756:	bf00      	nop
    2758:	00019463 	.word	0x00019463

0000275c <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    275c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2760:	b087      	sub	sp, #28
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    2762:	f011 0602 	ands.w	r6, r1, #2
{
    2766:	9205      	str	r2, [sp, #20]
    2768:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
    276c:	f9bd 9048 	ldrsh.w	r9, [sp, #72]	; 0x48
    2770:	4607      	mov	r7, r0
    2772:	461a      	mov	r2, r3
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    2774:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    2778:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    277c:	d006      	beq.n	278c <prefix_print+0x30>
	if (!format) {
    277e:	f011 0f44 	tst.w	r1, #68	; 0x44
    2782:	d138      	bne.n	27f6 <prefix_print+0x9a>
		length = print_formatted(output, "[%08lu] ", timestamp);
    2784:	4932      	ldr	r1, [pc, #200]	; (2850 <prefix_print+0xf4>)
    2786:	f7ff ffd7 	bl	2738 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    278a:	4606      	mov	r6, r0
	if (color) {
    278c:	f1ba 0f00 	cmp.w	sl, #0
    2790:	d00a      	beq.n	27a8 <prefix_print+0x4c>
		const char *log_color = start && (colors[level] != NULL) ?
    2792:	4b30      	ldr	r3, [pc, #192]	; (2854 <prefix_print+0xf8>)
		print_formatted(output, "%s", log_color);
    2794:	4930      	ldr	r1, [pc, #192]	; (2858 <prefix_print+0xfc>)
		const char *log_color = start && (colors[level] != NULL) ?
    2796:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
		print_formatted(output, "%s", log_color);
    279a:	4b30      	ldr	r3, [pc, #192]	; (285c <prefix_print+0x100>)
    279c:	4638      	mov	r0, r7
    279e:	2a00      	cmp	r2, #0
    27a0:	bf08      	it	eq
    27a2:	461a      	moveq	r2, r3
    27a4:	f7ff ffc8 	bl	2738 <print_formatted>
	if (level_on) {
    27a8:	b13d      	cbz	r5, 27ba <prefix_print+0x5e>
		total += print_formatted(output, "<%s> ", severity[level]);
    27aa:	4b2d      	ldr	r3, [pc, #180]	; (2860 <prefix_print+0x104>)
    27ac:	492d      	ldr	r1, [pc, #180]	; (2864 <prefix_print+0x108>)
    27ae:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
    27b2:	4638      	mov	r0, r7
    27b4:	f7ff ffc0 	bl	2738 <print_formatted>
    27b8:	4605      	mov	r5, r0
	if (source_id >= 0) {
    27ba:	f1b9 0f00 	cmp.w	r9, #0
    27be:	db16      	blt.n	27ee <prefix_print+0x92>
		total += print_formatted(output,
    27c0:	9b05      	ldr	r3, [sp, #20]
    27c2:	2b00      	cmp	r3, #0
    27c4:	d041      	beq.n	284a <prefix_print+0xee>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    27c6:	2301      	movs	r3, #1
    27c8:	fa03 f808 	lsl.w	r8, r3, r8
		total += print_formatted(output,
    27cc:	4b26      	ldr	r3, [pc, #152]	; (2868 <prefix_print+0x10c>)
    27ce:	4c27      	ldr	r4, [pc, #156]	; (286c <prefix_print+0x110>)
    27d0:	f018 0f10 	tst.w	r8, #16
    27d4:	bf18      	it	ne
    27d6:	461c      	movne	r4, r3
    27d8:	4649      	mov	r1, r9
    27da:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    27de:	f7ff fd2d 	bl	223c <log_source_name_get>
    27e2:	4621      	mov	r1, r4
    27e4:	4602      	mov	r2, r0
    27e6:	4638      	mov	r0, r7
    27e8:	f7ff ffa6 	bl	2738 <print_formatted>
    27ec:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    27ee:	19a8      	adds	r0, r5, r6
    27f0:	b007      	add	sp, #28
    27f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    27f6:	4b1e      	ldr	r3, [pc, #120]	; (2870 <prefix_print+0x114>)
    27f8:	6819      	ldr	r1, [r3, #0]
    27fa:	b321      	cbz	r1, 2846 <prefix_print+0xea>
		timestamp /= timestamp_div;
    27fc:	4b1d      	ldr	r3, [pc, #116]	; (2874 <prefix_print+0x118>)
    27fe:	f44f 6c61 	mov.w	ip, #3600	; 0xe10
    2802:	681b      	ldr	r3, [r3, #0]
    2804:	fbb2 f3f3 	udiv	r3, r2, r3
		ms = (remainder * 1000U) / freq;
    2808:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
		total_seconds = timestamp / freq;
    280c:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    2810:	fbb4 f2fc 	udiv	r2, r4, ip
    2814:	fb0c 4c12 	mls	ip, ip, r2, r4
		remainder = timestamp % freq;
    2818:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    281c:	4374      	muls	r4, r6
		mins = seconds / 60U;
    281e:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2822:	fbb4 fbf1 	udiv	fp, r4, r1
    2826:	fb01 441b 	mls	r4, r1, fp, r4
    282a:	4374      	muls	r4, r6
		mins = seconds / 60U;
    282c:	fbbc f3fe 	udiv	r3, ip, lr
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2830:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(output,
    2834:	e9cd b101 	strd	fp, r1, [sp, #4]
    2838:	fb0e c113 	mls	r1, lr, r3, ip
    283c:	9100      	str	r1, [sp, #0]
    283e:	490e      	ldr	r1, [pc, #56]	; (2878 <prefix_print+0x11c>)
    2840:	f7ff ff7a 	bl	2738 <print_formatted>
    2844:	e7a1      	b.n	278a <prefix_print+0x2e>
		length = 0;
    2846:	4608      	mov	r0, r1
    2848:	e79f      	b.n	278a <prefix_print+0x2e>
		total += print_formatted(output,
    284a:	4c08      	ldr	r4, [pc, #32]	; (286c <prefix_print+0x110>)
    284c:	e7c4      	b.n	27d8 <prefix_print+0x7c>
    284e:	bf00      	nop
    2850:	0001ed03 	.word	0x0001ed03
    2854:	0001e738 	.word	0x0001e738
    2858:	0001f954 	.word	0x0001f954
    285c:	0001ecf5 	.word	0x0001ecf5
    2860:	0001e74c 	.word	0x0001e74c
    2864:	0001ed28 	.word	0x0001ed28
    2868:	0001ecff 	.word	0x0001ecff
    286c:	0001ecfa 	.word	0x0001ecfa
    2870:	200018d8 	.word	0x200018d8
    2874:	200018dc 	.word	0x200018dc
    2878:	0001ed0c 	.word	0x0001ed0c

0000287c <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    287c:	b538      	push	{r3, r4, r5, lr}
    287e:	460c      	mov	r4, r1
	if (color) {
    2880:	07e1      	lsls	r1, r4, #31
{
    2882:	4605      	mov	r5, r0
	if (color) {
    2884:	d503      	bpl.n	288e <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    2886:	4a08      	ldr	r2, [pc, #32]	; (28a8 <postfix_print+0x2c>)
    2888:	4908      	ldr	r1, [pc, #32]	; (28ac <postfix_print+0x30>)
    288a:	f7ff ff55 	bl	2738 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    288e:	06e2      	lsls	r2, r4, #27
    2890:	d408      	bmi.n	28a4 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    2892:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    2894:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    2896:	bf4c      	ite	mi
    2898:	4905      	ldrmi	r1, [pc, #20]	; (28b0 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    289a:	4906      	ldrpl	r1, [pc, #24]	; (28b4 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    289c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    28a0:	f7ff bf4a 	b.w	2738 <print_formatted>
}
    28a4:	bd38      	pop	{r3, r4, r5, pc}
    28a6:	bf00      	nop
    28a8:	0001ecf5 	.word	0x0001ecf5
    28ac:	0001f954 	.word	0x0001f954
    28b0:	0001ed2f 	.word	0x0001ed2f
    28b4:	0001ed2e 	.word	0x0001ed2e

000028b8 <hexdump_line_print>:
{
    28b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    28bc:	461d      	mov	r5, r3
    28be:	9b08      	ldr	r3, [sp, #32]
    28c0:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    28c2:	06da      	lsls	r2, r3, #27
{
    28c4:	4604      	mov	r4, r0
    28c6:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    28c8:	d405      	bmi.n	28d6 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    28ca:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    28cc:	bf4c      	ite	mi
    28ce:	492a      	ldrmi	r1, [pc, #168]	; (2978 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    28d0:	492a      	ldrpl	r1, [pc, #168]	; (297c <hexdump_line_print+0xc4>)
    28d2:	f7ff ff31 	bl	2738 <print_formatted>
		print_formatted(output, " ");
    28d6:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 2984 <hexdump_line_print+0xcc>
{
    28da:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    28de:	45a8      	cmp	r8, r5
    28e0:	db2a      	blt.n	2938 <hexdump_line_print+0x80>
			print_formatted(output, "   ");
    28e2:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 2988 <hexdump_line_print+0xd0>
			print_formatted(output, "%02x ", data[i]);
    28e6:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 298c <hexdump_line_print+0xd4>
			print_formatted(output, " ");
    28ea:	f8df a098 	ldr.w	sl, [pc, #152]	; 2984 <hexdump_line_print+0xcc>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    28ee:	2500      	movs	r5, #0
		if (i < length) {
    28f0:	42bd      	cmp	r5, r7
    28f2:	d22f      	bcs.n	2954 <hexdump_line_print+0x9c>
			print_formatted(output, "%02x ", data[i]);
    28f4:	5d72      	ldrb	r2, [r6, r5]
    28f6:	4649      	mov	r1, r9
    28f8:	4620      	mov	r0, r4
    28fa:	f7ff ff1d 	bl	2738 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    28fe:	3501      	adds	r5, #1
    2900:	2d10      	cmp	r5, #16
    2902:	d120      	bne.n	2946 <hexdump_line_print+0x8e>
	print_formatted(output, "|");
    2904:	491e      	ldr	r1, [pc, #120]	; (2980 <hexdump_line_print+0xc8>)
			print_formatted(output, " ");
    2906:	f8df 807c 	ldr.w	r8, [pc, #124]	; 2984 <hexdump_line_print+0xcc>
			print_formatted(output, "%c",
    290a:	f8df 9084 	ldr.w	r9, [pc, #132]	; 2990 <hexdump_line_print+0xd8>
	print_formatted(output, "|");
    290e:	4620      	mov	r0, r4
    2910:	f7ff ff12 	bl	2738 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2914:	2500      	movs	r5, #0
		if (i < length) {
    2916:	42af      	cmp	r7, r5
    2918:	d928      	bls.n	296c <hexdump_line_print+0xb4>
			char c = (char)data[i];
    291a:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
    291c:	f1a2 0320 	sub.w	r3, r2, #32
    2920:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(output, "%c",
    2922:	bf28      	it	cs
    2924:	222e      	movcs	r2, #46	; 0x2e
    2926:	4649      	mov	r1, r9
    2928:	4620      	mov	r0, r4
    292a:	f7ff ff05 	bl	2738 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    292e:	3501      	adds	r5, #1
    2930:	2d10      	cmp	r5, #16
    2932:	d114      	bne.n	295e <hexdump_line_print+0xa6>
}
    2934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    2938:	4649      	mov	r1, r9
    293a:	4620      	mov	r0, r4
    293c:	f7ff fefc 	bl	2738 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    2940:	f108 0801 	add.w	r8, r8, #1
    2944:	e7cb      	b.n	28de <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    2946:	076a      	lsls	r2, r5, #29
    2948:	d1d2      	bne.n	28f0 <hexdump_line_print+0x38>
			print_formatted(output, " ");
    294a:	4651      	mov	r1, sl
    294c:	4620      	mov	r0, r4
    294e:	f7ff fef3 	bl	2738 <print_formatted>
    2952:	e7cd      	b.n	28f0 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
    2954:	4641      	mov	r1, r8
    2956:	4620      	mov	r0, r4
    2958:	f7ff feee 	bl	2738 <print_formatted>
    295c:	e7cf      	b.n	28fe <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    295e:	076b      	lsls	r3, r5, #29
    2960:	d1d9      	bne.n	2916 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    2962:	4641      	mov	r1, r8
    2964:	4620      	mov	r0, r4
    2966:	f7ff fee7 	bl	2738 <print_formatted>
    296a:	e7d4      	b.n	2916 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    296c:	4641      	mov	r1, r8
    296e:	4620      	mov	r0, r4
    2970:	f7ff fee2 	bl	2738 <print_formatted>
    2974:	e7db      	b.n	292e <hexdump_line_print+0x76>
    2976:	bf00      	nop
    2978:	0001ed2f 	.word	0x0001ed2f
    297c:	0001ed2e 	.word	0x0001ed2e
    2980:	0001ed3b 	.word	0x0001ed3b
    2984:	0001ed39 	.word	0x0001ed39
    2988:	0001ed37 	.word	0x0001ed37
    298c:	0001ed31 	.word	0x0001ed31
    2990:	0001ed3d 	.word	0x0001ed3d

00002994 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg,
			    uint32_t flags)
{
    2994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    2998:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(output, flags, std_msg, timestamp,
    299a:	f013 0807 	ands.w	r8, r3, #7
{
    299e:	4617      	mov	r7, r2
    29a0:	b08a      	sub	sp, #40	; 0x28
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    29a2:	7a0a      	ldrb	r2, [r1, #8]
    29a4:	4605      	mov	r5, r0
    29a6:	460e      	mov	r6, r1
			0 : prefix_print(output, flags, std_msg, timestamp,
    29a8:	d021      	beq.n	29ee <log_output_msg_process+0x5a>
	return msg->hdr.ids.source_id;
    29aa:	8949      	ldrh	r1, [r1, #10]
    29ac:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    29b0:	f3c1 1189 	ubfx	r1, r1, #6, #10
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    29b4:	43d2      	mvns	r2, r2
    29b6:	e9cd 8300 	strd	r8, r3, [sp]
    29ba:	9102      	str	r1, [sp, #8]
    29bc:	68f3      	ldr	r3, [r6, #12]
    29be:	f002 0201 	and.w	r2, r2, #1
    29c2:	4639      	mov	r1, r7
    29c4:	f7ff feca 	bl	275c <prefix_print>
    29c8:	4681      	mov	r9, r0
    29ca:	7a34      	ldrb	r4, [r6, #8]
    29cc:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    29ce:	f014 0401 	ands.w	r4, r4, #1
    29d2:	d00e      	beq.n	29f2 <log_output_msg_process+0x5e>
		std_print(msg, output);
    29d4:	4629      	mov	r1, r5
    29d6:	4630      	mov	r0, r6
    29d8:	f016 fbd9 	bl	1918e <std_print>
		raw_string_print(msg, output);
	} else {
		hexdump_print(msg, output, prefix_offset, flags);
	}

	if (!raw_string) {
    29dc:	f1b8 0f00 	cmp.w	r8, #0
    29e0:	d02b      	beq.n	2a3a <log_output_msg_process+0xa6>
		postfix_print(output, flags, level);
    29e2:	4642      	mov	r2, r8
    29e4:	4639      	mov	r1, r7
    29e6:	4628      	mov	r0, r5
    29e8:	f7ff ff48 	bl	287c <postfix_print>
    29ec:	e025      	b.n	2a3a <log_output_msg_process+0xa6>
			0 : prefix_print(output, flags, std_msg, timestamp,
    29ee:	46c1      	mov	r9, r8
    29f0:	e7eb      	b.n	29ca <log_output_msg_process+0x36>
	} else if (raw_string) {
    29f2:	f1b8 0f00 	cmp.w	r8, #0
    29f6:	d126      	bne.n	2a46 <log_output_msg_process+0xb2>
	size_t offset = 0;
    29f8:	4627      	mov	r7, r4
		length = output->size;
    29fa:	68eb      	ldr	r3, [r5, #12]
    29fc:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
    29fe:	aa06      	add	r2, sp, #24
    2a00:	463b      	mov	r3, r7
    2a02:	68a9      	ldr	r1, [r5, #8]
    2a04:	4630      	mov	r0, r6
    2a06:	f016 fbae 	bl	19166 <log_msg_hexdump_data_get>
		output->control_block->offset = length;
    2a0a:	9a06      	ldr	r2, [sp, #24]
    2a0c:	686b      	ldr	r3, [r5, #4]
    2a0e:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    2a10:	b13a      	cbz	r2, 2a22 <log_output_msg_process+0x8e>
			eol = (output->buf[length - 1] == '\n');
    2a12:	68ab      	ldr	r3, [r5, #8]
    2a14:	4413      	add	r3, r2
    2a16:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    2a1a:	f1a4 030a 	sub.w	r3, r4, #10
    2a1e:	425c      	negs	r4, r3
    2a20:	415c      	adcs	r4, r3
		log_output_flush(output);
    2a22:	4628      	mov	r0, r5
    2a24:	f016 fd10 	bl	19448 <log_output_flush>
		offset += length;
    2a28:	9b06      	ldr	r3, [sp, #24]
    2a2a:	441f      	add	r7, r3
	} while (length > 0);
    2a2c:	2b00      	cmp	r3, #0
    2a2e:	d1e4      	bne.n	29fa <log_output_msg_process+0x66>
	if (eol) {
    2a30:	b11c      	cbz	r4, 2a3a <log_output_msg_process+0xa6>
		print_formatted(output, "\r");
    2a32:	4914      	ldr	r1, [pc, #80]	; (2a84 <log_output_msg_process+0xf0>)
    2a34:	4628      	mov	r0, r5
    2a36:	f7ff fe7f 	bl	2738 <print_formatted>
	}

	log_output_flush(output);
    2a3a:	4628      	mov	r0, r5
    2a3c:	f016 fd04 	bl	19448 <log_output_flush>
}
    2a40:	b00a      	add	sp, #40	; 0x28
    2a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(output, "%s", log_msg_str_get(msg));
    2a46:	4630      	mov	r0, r6
    2a48:	f016 fae4 	bl	19014 <log_msg_str_get>
    2a4c:	490e      	ldr	r1, [pc, #56]	; (2a88 <log_output_msg_process+0xf4>)
    2a4e:	4602      	mov	r2, r0
    2a50:	4628      	mov	r0, r5
    2a52:	f7ff fe71 	bl	2738 <print_formatted>
		length = sizeof(buf);
    2a56:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    2a5a:	aa05      	add	r2, sp, #20
    2a5c:	4623      	mov	r3, r4
    2a5e:	a906      	add	r1, sp, #24
    2a60:	4630      	mov	r0, r6
		length = sizeof(buf);
    2a62:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    2a66:	f016 fb7e 	bl	19166 <log_msg_hexdump_data_get>
		if (length) {
    2a6a:	9a05      	ldr	r2, [sp, #20]
    2a6c:	2a00      	cmp	r2, #0
    2a6e:	d0b8      	beq.n	29e2 <log_output_msg_process+0x4e>
			hexdump_line_print(output, buf, length,
    2a70:	464b      	mov	r3, r9
    2a72:	9700      	str	r7, [sp, #0]
    2a74:	a906      	add	r1, sp, #24
    2a76:	4628      	mov	r0, r5
    2a78:	f7ff ff1e 	bl	28b8 <hexdump_line_print>
			offset += length;
    2a7c:	9b05      	ldr	r3, [sp, #20]
    2a7e:	441c      	add	r4, r3
		length = sizeof(buf);
    2a80:	e7eb      	b.n	2a5a <log_output_msg_process+0xc6>
    2a82:	bf00      	nop
    2a84:	0001ed40 	.word	0x0001ed40
    2a88:	0001f954 	.word	0x0001f954

00002a8c <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    2a8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    2a8e:	f242 730f 	movw	r3, #9999	; 0x270f
    2a92:	428b      	cmp	r3, r1
    2a94:	bf28      	it	cs
    2a96:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    2a98:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    2a9a:	4a0f      	ldr	r2, [pc, #60]	; (2ad8 <log_output_dropped_process+0x4c>)
{
    2a9c:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    2a9e:	2105      	movs	r1, #5
    2aa0:	4668      	mov	r0, sp
    2aa2:	f015 fd6e 	bl	18582 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    2aa6:	6863      	ldr	r3, [r4, #4]
    2aa8:	490c      	ldr	r1, [pc, #48]	; (2adc <log_output_dropped_process+0x50>)
    2aaa:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    2aac:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    2aae:	220b      	movs	r2, #11
    2ab0:	4628      	mov	r0, r5
    2ab2:	f016 fb5f 	bl	19174 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    2ab6:	6863      	ldr	r3, [r4, #4]
    2ab8:	4632      	mov	r2, r6
    2aba:	4669      	mov	r1, sp
    2abc:	4628      	mov	r0, r5
    2abe:	685b      	ldr	r3, [r3, #4]
    2ac0:	f016 fb58 	bl	19174 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    2ac4:	6863      	ldr	r3, [r4, #4]
    2ac6:	4906      	ldr	r1, [pc, #24]	; (2ae0 <log_output_dropped_process+0x54>)
    2ac8:	685b      	ldr	r3, [r3, #4]
    2aca:	221b      	movs	r2, #27
    2acc:	4628      	mov	r0, r5
    2ace:	f016 fb51 	bl	19174 <buffer_write>
		     output->control_block->ctx);
}
    2ad2:	b002      	add	sp, #8
    2ad4:	bd70      	pop	{r4, r5, r6, pc}
    2ad6:	bf00      	nop
    2ad8:	000219fc 	.word	0x000219fc
    2adc:	0001ed7a 	.word	0x0001ed7a
    2ae0:	0001ed5e 	.word	0x0001ed5e

00002ae4 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    2ae4:	4a08      	ldr	r2, [pc, #32]	; (2b08 <log_output_timestamp_freq_set+0x24>)
{
    2ae6:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    2ae8:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    2aea:	4c08      	ldr	r4, [pc, #32]	; (2b0c <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    2aec:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    2aee:	2100      	movs	r1, #0
    2af0:	42a0      	cmp	r0, r4
    2af2:	d804      	bhi.n	2afe <log_output_timestamp_freq_set+0x1a>
    2af4:	b101      	cbz	r1, 2af8 <log_output_timestamp_freq_set+0x14>
    2af6:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    2af8:	4b05      	ldr	r3, [pc, #20]	; (2b10 <log_output_timestamp_freq_set+0x2c>)
    2afa:	6018      	str	r0, [r3, #0]
}
    2afc:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    2afe:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    2b00:	005b      	lsls	r3, r3, #1
    2b02:	2101      	movs	r1, #1
    2b04:	e7f4      	b.n	2af0 <log_output_timestamp_freq_set+0xc>
    2b06:	bf00      	nop
    2b08:	200018dc 	.word	0x200018dc
    2b0c:	000f4240 	.word	0x000f4240
    2b10:	200018d8 	.word	0x200018d8

00002b14 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    2b14:	4b01      	ldr	r3, [pc, #4]	; (2b1c <log_backend_rtt_init+0x8>)
    2b16:	2201      	movs	r2, #1
    2b18:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    2b1a:	4770      	bx	lr
    2b1c:	20002eae 	.word	0x20002eae

00002b20 <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
    2b20:	4b02      	ldr	r3, [pc, #8]	; (2b2c <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    2b22:	4803      	ldr	r0, [pc, #12]	; (2b30 <panic+0x10>)
    2b24:	2201      	movs	r2, #1
    2b26:	701a      	strb	r2, [r3, #0]
    2b28:	f016 bc8e 	b.w	19448 <log_output_flush>
    2b2c:	20002eaf 	.word	0x20002eaf
    2b30:	0001e77c 	.word	0x0001e77c

00002b34 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    2b34:	4801      	ldr	r0, [pc, #4]	; (2b3c <dropped+0x8>)
    2b36:	f7ff bfa9 	b.w	2a8c <log_output_dropped_process>
    2b3a:	bf00      	nop
    2b3c:	0001e77c 	.word	0x0001e77c

00002b40 <put>:
{
    2b40:	b510      	push	{r4, lr}
	log_msg_get(msg);
    2b42:	4608      	mov	r0, r1
    2b44:	460c      	mov	r4, r1
    2b46:	f016 fa23 	bl	18f90 <log_msg_get>
	log_output_msg_process(output, msg, flags);
    2b4a:	4805      	ldr	r0, [pc, #20]	; (2b60 <put+0x20>)
    2b4c:	4621      	mov	r1, r4
    2b4e:	220f      	movs	r2, #15
    2b50:	f7ff ff20 	bl	2994 <log_output_msg_process>
	log_msg_put(msg);
    2b54:	4620      	mov	r0, r4
}
    2b56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2b5a:	f016 ba48 	b.w	18fee <log_msg_put>
    2b5e:	bf00      	nop
    2b60:	0001e77c 	.word	0x0001e77c

00002b64 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    2b64:	4b05      	ldr	r3, [pc, #20]	; (2b7c <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
    2b66:	781b      	ldrb	r3, [r3, #0]
    2b68:	b11b      	cbz	r3, 2b72 <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    2b6a:	f241 3088 	movw	r0, #5000	; 0x1388
    2b6e:	f01b b9df 	b.w	1df30 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    2b72:	20a4      	movs	r0, #164	; 0xa4
    2b74:	2100      	movs	r1, #0
    2b76:	f015 b92b 	b.w	17dd0 <z_impl_k_sleep>
    2b7a:	bf00      	nop
    2b7c:	20002eaf 	.word	0x20002eaf

00002b80 <data_out_block_mode>:
{
    2b80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    2b84:	f8df 9094 	ldr.w	r9, [pc, #148]	; 2c1c <data_out_block_mode+0x9c>
	return z_impl_k_mutex_lock(mutex, timeout);
    2b88:	f8df a094 	ldr.w	sl, [pc, #148]	; 2c20 <data_out_block_mode+0xa0>
{
    2b8c:	4680      	mov	r8, r0
    2b8e:	460f      	mov	r7, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    2b90:	2404      	movs	r4, #4
    2b92:	46cb      	mov	fp, r9
		if (!is_sync_mode()) {
    2b94:	f899 5000 	ldrb.w	r5, [r9]
    2b98:	b9cd      	cbnz	r5, 2bce <data_out_block_mode+0x4e>
    2b9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2b9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2ba2:	4650      	mov	r0, sl
    2ba4:	f014 fb20 	bl	171e8 <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    2ba8:	463a      	mov	r2, r7
    2baa:	4641      	mov	r1, r8
    2bac:	4628      	mov	r0, r5
    2bae:	f013 fffd 	bl	16bac <SEGGER_RTT_WriteSkipNoLock>
    2bb2:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
    2bb4:	4650      	mov	r0, sl
    2bb6:	f014 fb8f 	bl	172d8 <z_impl_k_mutex_unlock>
		if (ret) {
    2bba:	4d17      	ldr	r5, [pc, #92]	; (2c18 <data_out_block_mode+0x98>)
    2bbc:	b1fe      	cbz	r6, 2bfe <data_out_block_mode+0x7e>
	host_present = true;
    2bbe:	2301      	movs	r3, #1
    2bc0:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    2bc2:	f89b 3000 	ldrb.w	r3, [fp]
    2bc6:	b96b      	cbnz	r3, 2be4 <data_out_block_mode+0x64>
}
    2bc8:	4638      	mov	r0, r7
    2bca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    2bce:	463a      	mov	r2, r7
    2bd0:	4641      	mov	r1, r8
    2bd2:	2000      	movs	r0, #0
    2bd4:	f013 ffea 	bl	16bac <SEGGER_RTT_WriteSkipNoLock>
    2bd8:	4606      	mov	r6, r0
    2bda:	e7ee      	b.n	2bba <data_out_block_mode+0x3a>
	if (retry_cnt == 0) {
    2bdc:	b95c      	cbnz	r4, 2bf6 <data_out_block_mode+0x76>
		host_present = false;
    2bde:	702c      	strb	r4, [r5, #0]
    2be0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    2be4:	2000      	movs	r0, #0
    2be6:	f014 f861 	bl	16cac <SEGGER_RTT_HasDataUp>
    2bea:	2800      	cmp	r0, #0
    2bec:	d0ec      	beq.n	2bc8 <data_out_block_mode+0x48>
    2bee:	782b      	ldrb	r3, [r5, #0]
    2bf0:	2b00      	cmp	r3, #0
    2bf2:	d1f3      	bne.n	2bdc <data_out_block_mode+0x5c>
    2bf4:	e7e8      	b.n	2bc8 <data_out_block_mode+0x48>
			on_failed_write(retry_cnt--);
    2bf6:	3c01      	subs	r4, #1
    2bf8:	f7ff ffb4 	bl	2b64 <on_failed_write.part.0>
    2bfc:	e7f2      	b.n	2be4 <data_out_block_mode+0x64>
		} else if (host_present) {
    2bfe:	782b      	ldrb	r3, [r5, #0]
    2c00:	b113      	cbz	r3, 2c08 <data_out_block_mode+0x88>
	if (retry_cnt == 0) {
    2c02:	3c01      	subs	r4, #1
    2c04:	d104      	bne.n	2c10 <data_out_block_mode+0x90>
		host_present = false;
    2c06:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    2c08:	782b      	ldrb	r3, [r5, #0]
    2c0a:	2b00      	cmp	r3, #0
    2c0c:	d1c2      	bne.n	2b94 <data_out_block_mode+0x14>
    2c0e:	e7db      	b.n	2bc8 <data_out_block_mode+0x48>
    2c10:	f7ff ffa8 	bl	2b64 <on_failed_write.part.0>
    2c14:	e7f8      	b.n	2c08 <data_out_block_mode+0x88>
    2c16:	bf00      	nop
    2c18:	20002eae 	.word	0x20002eae
    2c1c:	20002eaf 	.word	0x20002eaf
    2c20:	20000b64 	.word	0x20000b64

00002c24 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
    2c24:	4b10      	ldr	r3, [pc, #64]	; (2c68 <settings_save_one+0x44>)
{
    2c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
    2c2a:	681c      	ldr	r4, [r3, #0]
{
    2c2c:	4605      	mov	r5, r0
    2c2e:	460e      	mov	r6, r1
    2c30:	4617      	mov	r7, r2
	if (!cs) {
    2c32:	b1ac      	cbz	r4, 2c60 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
    2c34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2c38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2c3c:	480b      	ldr	r0, [pc, #44]	; (2c6c <settings_save_one+0x48>)
    2c3e:	f014 fad3 	bl	171e8 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    2c42:	6863      	ldr	r3, [r4, #4]
    2c44:	4632      	mov	r2, r6
    2c46:	f8d3 8008 	ldr.w	r8, [r3, #8]
    2c4a:	4629      	mov	r1, r5
    2c4c:	463b      	mov	r3, r7
    2c4e:	4620      	mov	r0, r4
    2c50:	47c0      	blx	r8
    2c52:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    2c54:	4805      	ldr	r0, [pc, #20]	; (2c6c <settings_save_one+0x48>)
    2c56:	f014 fb3f 	bl	172d8 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
    2c5a:	4620      	mov	r0, r4
    2c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    2c60:	f06f 0401 	mvn.w	r4, #1
    2c64:	e7f9      	b.n	2c5a <settings_save_one+0x36>
    2c66:	bf00      	nop
    2c68:	200018fc 	.word	0x200018fc
    2c6c:	20000b78 	.word	0x20000b78

00002c70 <settings_load_subtree_direct>:
{
    2c70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
    2c72:	e9cd 0101 	strd	r0, r1, [sp, #4]
    2c76:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
    2c78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2c7c:	480c      	ldr	r0, [pc, #48]	; (2cb0 <settings_load_subtree_direct+0x40>)
    2c7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2c82:	f014 fab1 	bl	171e8 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    2c86:	4b0b      	ldr	r3, [pc, #44]	; (2cb4 <settings_load_subtree_direct+0x44>)
    2c88:	681c      	ldr	r4, [r3, #0]
    2c8a:	2c00      	cmp	r4, #0
    2c8c:	bf38      	it	cc
    2c8e:	2400      	movcc	r4, #0
    2c90:	b13c      	cbz	r4, 2ca2 <settings_load_subtree_direct+0x32>
		cs->cs_itf->csi_load(cs, &arg);
    2c92:	6863      	ldr	r3, [r4, #4]
    2c94:	4620      	mov	r0, r4
    2c96:	681b      	ldr	r3, [r3, #0]
    2c98:	a901      	add	r1, sp, #4
    2c9a:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2c9c:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    2c9e:	2c00      	cmp	r4, #0
    2ca0:	d1f6      	bne.n	2c90 <settings_load_subtree_direct+0x20>
	return z_impl_k_mutex_unlock(mutex);
    2ca2:	4803      	ldr	r0, [pc, #12]	; (2cb0 <settings_load_subtree_direct+0x40>)
    2ca4:	f014 fb18 	bl	172d8 <z_impl_k_mutex_unlock>
}
    2ca8:	2000      	movs	r0, #0
    2caa:	b004      	add	sp, #16
    2cac:	bd10      	pop	{r4, pc}
    2cae:	bf00      	nop
    2cb0:	20000b78 	.word	0x20000b78
    2cb4:	200018f4 	.word	0x200018f4

00002cb8 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    2cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2cba:	4605      	mov	r5, r0
	__asm__ volatile(
    2cbc:	f04f 0320 	mov.w	r3, #32
    2cc0:	f3ef 8611 	mrs	r6, BASEPRI
    2cc4:	f383 8811 	msr	BASEPRI, r3
    2cc8:	f3bf 8f6f 	isb	sy
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    2ccc:	4b0b      	ldr	r3, [pc, #44]	; (2cfc <pm_state_notify+0x44>)
    2cce:	681c      	ldr	r4, [r3, #0]
    2cd0:	2c00      	cmp	r4, #0
    2cd2:	bf38      	it	cc
    2cd4:	2400      	movcc	r4, #0
    2cd6:	b15c      	cbz	r4, 2cf0 <pm_state_notify+0x38>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
    2cd8:	4f09      	ldr	r7, [pc, #36]	; (2d00 <pm_state_notify+0x48>)
			callback = notifier->state_exit;
    2cda:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    2cde:	2d00      	cmp	r5, #0
    2ce0:	bf08      	it	eq
    2ce2:	4613      	moveq	r3, r2
		if (callback) {
    2ce4:	b10b      	cbz	r3, 2cea <pm_state_notify+0x32>
			callback(z_power_state.state);
    2ce6:	7838      	ldrb	r0, [r7, #0]
    2ce8:	4798      	blx	r3
    2cea:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    2cec:	2c00      	cmp	r4, #0
    2cee:	d1f4      	bne.n	2cda <pm_state_notify+0x22>
	__asm__ volatile(
    2cf0:	f386 8811 	msr	BASEPRI, r6
    2cf4:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    2cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2cfa:	bf00      	nop
    2cfc:	20001900 	.word	0x20001900
    2d00:	20001908 	.word	0x20001908

00002d04 <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    2d04:	4b08      	ldr	r3, [pc, #32]	; (2d28 <pm_system_resume+0x24>)
{
    2d06:	b510      	push	{r4, lr}
	if (!post_ops_done) {
    2d08:	681c      	ldr	r4, [r3, #0]
    2d0a:	b95c      	cbnz	r4, 2d24 <pm_system_resume+0x20>
		post_ops_done = 1;
    2d0c:	2201      	movs	r2, #1
    2d0e:	601a      	str	r2, [r3, #0]
		pm_power_state_exit_post_ops(z_power_state);
    2d10:	4b06      	ldr	r3, [pc, #24]	; (2d2c <pm_system_resume+0x28>)
    2d12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    2d16:	f016 ffab 	bl	19c70 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    2d1a:	4620      	mov	r0, r4
	}
}
    2d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pm_state_notify(false);
    2d20:	f7ff bfca 	b.w	2cb8 <pm_state_notify>
}
    2d24:	bd10      	pop	{r4, pc}
    2d26:	bf00      	nop
    2d28:	20000230 	.word	0x20000230
    2d2c:	20001908 	.word	0x20001908

00002d30 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
    2d30:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d32:	b085      	sub	sp, #20
	z_power_state = pm_policy_next_state(ticks);
    2d34:	466e      	mov	r6, sp
    2d36:	4601      	mov	r1, r0
{
    2d38:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
    2d3a:	4630      	mov	r0, r6
    2d3c:	f016 fbe9 	bl	19512 <pm_policy_next_state>
    2d40:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    2d44:	4c14      	ldr	r4, [pc, #80]	; (2d98 <pm_system_suspend+0x68>)
    2d46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    2d4a:	7820      	ldrb	r0, [r4, #0]
    2d4c:	b308      	cbz	r0, 2d92 <pm_system_suspend+0x62>
		LOG_DBG("No PM operations done.");
		return z_power_state.state;
	}
	post_ops_done = 0;
    2d4e:	4b13      	ldr	r3, [pc, #76]	; (2d9c <pm_system_suspend+0x6c>)
    2d50:	2100      	movs	r1, #0
    2d52:	6019      	str	r1, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
    2d54:	1c6b      	adds	r3, r5, #1
    2d56:	d00e      	beq.n	2d76 <pm_system_suspend+0x46>
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    2d58:	4811      	ldr	r0, [pc, #68]	; (2da0 <pm_system_suspend+0x70>)
    2d5a:	4617      	mov	r7, r2
    2d5c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    2d60:	2100      	movs	r1, #0
    2d62:	4a10      	ldr	r2, [pc, #64]	; (2da4 <pm_system_suspend+0x74>)
    2d64:	2300      	movs	r3, #0
    2d66:	fbe6 0107 	umlal	r0, r1, r6, r7
    2d6a:	f7fd f9b9 	bl	e0 <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    2d6e:	2101      	movs	r1, #1
    2d70:	1a28      	subs	r0, r5, r0
    2d72:	f01b f8bd 	bl	1def0 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    2d76:	f014 fd9d 	bl	178b4 <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
    2d7a:	2001      	movs	r0, #1
    2d7c:	f7ff ff9c 	bl	2cb8 <pm_state_notify>
	pm_power_state_set(z_power_state);
    2d80:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    2d84:	f016 ff61 	bl	19c4a <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
    2d88:	f7ff ffbc 	bl	2d04 <pm_system_resume>
	k_sched_unlock();
    2d8c:	f014 fe84 	bl	17a98 <k_sched_unlock>

	return z_power_state.state;
    2d90:	7820      	ldrb	r0, [r4, #0]
}
    2d92:	b005      	add	sp, #20
    2d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d96:	bf00      	nop
    2d98:	20001908 	.word	0x20001908
    2d9c:	20000230 	.word	0x20000230
    2da0:	000f423f 	.word	0x000f423f
    2da4:	000f4240 	.word	0x000f4240

00002da8 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    2da8:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    2daa:	4c04      	ldr	r4, [pc, #16]	; (2dbc <rtt_console_init+0x14>)
    2dac:	4620      	mov	r0, r4
    2dae:	f7fe fcdd 	bl	176c <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    2db2:	4620      	mov	r0, r4
    2db4:	f001 f8fc 	bl	3fb0 <__stdout_hook_install>

	return 0;
}
    2db8:	2000      	movs	r0, #0
    2dba:	bd10      	pop	{r4, pc}
    2dbc:	00002dc1 	.word	0x00002dc1

00002dc0 <rtt_console_out>:
{
    2dc0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
    2dc4:	f8df 8060 	ldr.w	r8, [pc, #96]	; 2e28 <rtt_console_out+0x68>
    2dc8:	4e16      	ldr	r6, [pc, #88]	; (2e24 <rtt_console_out+0x64>)
	char c = (char)character;
    2dca:	f88d 0007 	strb.w	r0, [sp, #7]
{
    2dce:	4604      	mov	r4, r0
	char c = (char)character;
    2dd0:	2503      	movs	r5, #3
    2dd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2dd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2dda:	4640      	mov	r0, r8
    2ddc:	f014 fa04 	bl	171e8 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    2de0:	2201      	movs	r2, #1
    2de2:	f10d 0107 	add.w	r1, sp, #7
    2de6:	2000      	movs	r0, #0
    2de8:	f013 ff2c 	bl	16c44 <SEGGER_RTT_WriteNoLock>
    2dec:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
    2dee:	4640      	mov	r0, r8
    2df0:	f014 fa72 	bl	172d8 <z_impl_k_mutex_unlock>
		if (cnt) {
    2df4:	b12f      	cbz	r7, 2e02 <rtt_console_out+0x42>
			host_present = true;
    2df6:	2301      	movs	r3, #1
    2df8:	7033      	strb	r3, [r6, #0]
}
    2dfa:	4620      	mov	r0, r4
    2dfc:	b002      	add	sp, #8
    2dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
    2e02:	7833      	ldrb	r3, [r6, #0]
    2e04:	2b00      	cmp	r3, #0
    2e06:	d0f8      	beq.n	2dfa <rtt_console_out+0x3a>
			if (max_cnt) {
    2e08:	3d01      	subs	r5, #1
    2e0a:	d008      	beq.n	2e1e <rtt_console_out+0x5e>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
    2e0c:	f01a fd29 	bl	1d862 <k_is_in_isr>
    2e10:	2800      	cmp	r0, #0
    2e12:	d1de      	bne.n	2dd2 <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
    2e14:	2100      	movs	r1, #0
    2e16:	2042      	movs	r0, #66	; 0x42
    2e18:	f014 ffda 	bl	17dd0 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
    2e1c:	e7d9      	b.n	2dd2 <rtt_console_out+0x12>
				host_present = false;
    2e1e:	7035      	strb	r5, [r6, #0]
    2e20:	e7eb      	b.n	2dfa <rtt_console_out+0x3a>
    2e22:	bf00      	nop
    2e24:	20002eb0 	.word	0x20002eb0
    2e28:	20000b64 	.word	0x20000b64

00002e2c <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2e2c:	b570      	push	{r4, r5, r6, lr}
    2e2e:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
    2e30:	480d      	ldr	r0, [pc, #52]	; (2e68 <onoff_stop+0x3c>)
    2e32:	1a23      	subs	r3, r4, r0
    2e34:	109a      	asrs	r2, r3, #2
    2e36:	4b0d      	ldr	r3, [pc, #52]	; (2e6c <onoff_stop+0x40>)
    2e38:	4353      	muls	r3, r2
    2e3a:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
    2e3c:	250c      	movs	r5, #12
    2e3e:	435d      	muls	r5, r3
    2e40:	f105 0340 	add.w	r3, r5, #64	; 0x40
{
    2e44:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
    2e46:	4418      	add	r0, r3
    2e48:	2140      	movs	r1, #64	; 0x40
    2e4a:	f016 fb70 	bl	1952e <set_off_state>
	if (err < 0) {
    2e4e:	1e01      	subs	r1, r0, #0
    2e50:	db04      	blt.n	2e5c <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    2e52:	4b07      	ldr	r3, [pc, #28]	; (2e70 <onoff_stop+0x44>)
    2e54:	442b      	add	r3, r5
    2e56:	685b      	ldr	r3, [r3, #4]
    2e58:	4798      	blx	r3
	return 0;
    2e5a:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    2e5c:	4620      	mov	r0, r4
    2e5e:	4633      	mov	r3, r6
}
    2e60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    2e64:	4718      	bx	r3
    2e66:	bf00      	nop
    2e68:	20001928 	.word	0x20001928
    2e6c:	b6db6db7 	.word	0xb6db6db7
    2e70:	0001e7a0 	.word	0x0001e7a0

00002e74 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    2e78:	4c0f      	ldr	r4, [pc, #60]	; (2eb8 <onoff_start+0x44>)
    2e7a:	4d10      	ldr	r5, [pc, #64]	; (2ebc <onoff_start+0x48>)
    2e7c:	1b03      	subs	r3, r0, r4
    2e7e:	109b      	asrs	r3, r3, #2
    2e80:	435d      	muls	r5, r3
    2e82:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
    2e84:	250c      	movs	r5, #12
    2e86:	435d      	muls	r5, r3
{
    2e88:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
    2e8a:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
    2e8e:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    2e90:	4420      	add	r0, r4
    2e92:	2140      	movs	r1, #64	; 0x40
    2e94:	f016 fb64 	bl	19560 <set_starting_state>
	if (err < 0) {
    2e98:	1e01      	subs	r1, r0, #0
    2e9a:	db08      	blt.n	2eae <onoff_start+0x3a>
	subdata->cb = cb;
    2e9c:	4b08      	ldr	r3, [pc, #32]	; (2ec0 <onoff_start+0x4c>)
    2e9e:	442c      	add	r4, r5
	subdata->user_data = user_data;
    2ea0:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    2ea4:	4b07      	ldr	r3, [pc, #28]	; (2ec4 <onoff_start+0x50>)
    2ea6:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    2ea8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    2eac:	4718      	bx	r3
		notify(mgr, err);
    2eae:	4638      	mov	r0, r7
    2eb0:	4633      	mov	r3, r6
}
    2eb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    2eb6:	4718      	bx	r3
    2eb8:	20001928 	.word	0x20001928
    2ebc:	b6db6db7 	.word	0xb6db6db7
    2ec0:	000195c3 	.word	0x000195c3
    2ec4:	0001e7a0 	.word	0x0001e7a0

00002ec8 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2ec8:	2200      	movs	r2, #0
{
    2eca:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2ecc:	2101      	movs	r1, #1
{
    2ece:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2ed0:	4610      	mov	r0, r2
    2ed2:	f000 fb8f 	bl	35f4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    2ed6:	2000      	movs	r0, #0
    2ed8:	f000 fb5a 	bl	3590 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    2edc:	480f      	ldr	r0, [pc, #60]	; (2f1c <clk_init+0x54>)
    2ede:	f013 fc99 	bl	16814 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    2ee2:	4b0f      	ldr	r3, [pc, #60]	; (2f20 <clk_init+0x58>)
    2ee4:	4298      	cmp	r0, r3
    2ee6:	d115      	bne.n	2f14 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    2ee8:	f01a fb8f 	bl	1d60a <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    2eec:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    2eee:	490d      	ldr	r1, [pc, #52]	; (2f24 <clk_init+0x5c>)
    2ef0:	4630      	mov	r0, r6
    2ef2:	f015 fba2 	bl	1863a <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    2ef6:	2800      	cmp	r0, #0
    2ef8:	db0b      	blt.n	2f12 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2efa:	2501      	movs	r5, #1
    2efc:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
    2efe:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2f00:	4908      	ldr	r1, [pc, #32]	; (2f24 <clk_init+0x5c>)
    2f02:	f104 001c 	add.w	r0, r4, #28
    2f06:	f015 fb98 	bl	1863a <onoff_manager_init>
		if (err < 0) {
    2f0a:	2800      	cmp	r0, #0
    2f0c:	db01      	blt.n	2f12 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2f0e:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    2f10:	2000      	movs	r0, #0
}
    2f12:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    2f14:	f06f 0004 	mvn.w	r0, #4
    2f18:	e7fb      	b.n	2f12 <clk_init+0x4a>
    2f1a:	bf00      	nop
    2f1c:	00002f5d 	.word	0x00002f5d
    2f20:	0bad0000 	.word	0x0bad0000
    2f24:	0001e7b8 	.word	0x0001e7b8

00002f28 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    2f28:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    2f2a:	230c      	movs	r3, #12
    2f2c:	4809      	ldr	r0, [pc, #36]	; (2f54 <clkstarted_handle.constprop.0+0x2c>)
    2f2e:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    2f30:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    2f32:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    2f34:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    2f38:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    2f3a:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    2f3c:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    2f3e:	4418      	add	r0, r3
    2f40:	f016 fb2c 	bl	1959c <set_on_state>
	if (callback) {
    2f44:	b12d      	cbz	r5, 2f52 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    2f46:	4632      	mov	r2, r6
    2f48:	462b      	mov	r3, r5
    2f4a:	4803      	ldr	r0, [pc, #12]	; (2f58 <clkstarted_handle.constprop.0+0x30>)
}
    2f4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    2f50:	4718      	bx	r3
}
    2f52:	bd70      	pop	{r4, r5, r6, pc}
    2f54:	20001928 	.word	0x20001928
    2f58:	20000a64 	.word	0x20000a64

00002f5c <clock_event_handler>:
	switch (event) {
    2f5c:	b110      	cbz	r0, 2f64 <clock_event_handler+0x8>
    2f5e:	2801      	cmp	r0, #1
    2f60:	d004      	beq.n	2f6c <clock_event_handler+0x10>
    2f62:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    2f64:	4b03      	ldr	r3, [pc, #12]	; (2f74 <clock_event_handler+0x18>)
    2f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2f68:	075b      	lsls	r3, r3, #29
    2f6a:	d101      	bne.n	2f70 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2f6c:	f7ff bfdc 	b.w	2f28 <clkstarted_handle.constprop.0>
}
    2f70:	4770      	bx	lr
    2f72:	bf00      	nop
    2f74:	20001928 	.word	0x20001928

00002f78 <generic_hfclk_start>:
{
    2f78:	b508      	push	{r3, lr}
	__asm__ volatile(
    2f7a:	f04f 0320 	mov.w	r3, #32
    2f7e:	f3ef 8111 	mrs	r1, BASEPRI
    2f82:	f383 8811 	msr	BASEPRI, r3
    2f86:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    2f8a:	4a12      	ldr	r2, [pc, #72]	; (2fd4 <generic_hfclk_start+0x5c>)
    2f8c:	6813      	ldr	r3, [r2, #0]
    2f8e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    2f92:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    2f96:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    2f98:	d00c      	beq.n	2fb4 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2f9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2f9e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2fa2:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    2fa6:	f013 0301 	ands.w	r3, r3, #1
    2faa:	d003      	beq.n	2fb4 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    2fac:	480a      	ldr	r0, [pc, #40]	; (2fd8 <generic_hfclk_start+0x60>)
    2fae:	f016 faf5 	bl	1959c <set_on_state>
			already_started = true;
    2fb2:	2301      	movs	r3, #1
	__asm__ volatile(
    2fb4:	f381 8811 	msr	BASEPRI, r1
    2fb8:	f3bf 8f6f 	isb	sy
	if (already_started) {
    2fbc:	b123      	cbz	r3, 2fc8 <generic_hfclk_start+0x50>
}
    2fbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    2fc2:	2000      	movs	r0, #0
    2fc4:	f7ff bfb0 	b.w	2f28 <clkstarted_handle.constprop.0>
}
    2fc8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    2fcc:	2001      	movs	r0, #1
    2fce:	f013 bc31 	b.w	16834 <nrfx_clock_start>
    2fd2:	bf00      	nop
    2fd4:	20001978 	.word	0x20001978
    2fd8:	20001968 	.word	0x20001968

00002fdc <lfclk_start>:
{
    2fdc:	b510      	push	{r4, lr}
	if (!once) {
    2fde:	4c07      	ldr	r4, [pc, #28]	; (2ffc <lfclk_start+0x20>)
    2fe0:	7823      	ldrb	r3, [r4, #0]
    2fe2:	b92b      	cbnz	r3, 2ff0 <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
    2fe4:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    2fe8:	f01a ffa2 	bl	1df30 <z_impl_k_busy_wait>
		once = true;
    2fec:	2301      	movs	r3, #1
    2fee:	7023      	strb	r3, [r4, #0]
}
    2ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    2ff4:	2000      	movs	r0, #0
    2ff6:	f013 bc1d 	b.w	16834 <nrfx_clock_start>
    2ffa:	bf00      	nop
    2ffc:	20002eb1 	.word	0x20002eb1

00003000 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3000:	4b09      	ldr	r3, [pc, #36]	; (3028 <generic_hfclk_stop+0x28>)
    3002:	f3bf 8f5b 	dmb	ish
    3006:	e853 2f00 	ldrex	r2, [r3]
    300a:	f022 0102 	bic.w	r1, r2, #2
    300e:	e843 1000 	strex	r0, r1, [r3]
    3012:	2800      	cmp	r0, #0
    3014:	d1f7      	bne.n	3006 <generic_hfclk_stop+0x6>
    3016:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    301a:	07d3      	lsls	r3, r2, #31
    301c:	d402      	bmi.n	3024 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    301e:	2001      	movs	r0, #1
    3020:	f013 bc54 	b.w	168cc <nrfx_clock_stop>
}
    3024:	4770      	bx	lr
    3026:	bf00      	nop
    3028:	20001978 	.word	0x20001978

0000302c <api_blocking_start>:
{
    302c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    302e:	2200      	movs	r2, #0
    3030:	2301      	movs	r3, #1
    3032:	e9cd 2302 	strd	r2, r3, [sp, #8]
    3036:	ab04      	add	r3, sp, #16
    3038:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    303c:	4a09      	ldr	r2, [pc, #36]	; (3064 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    303e:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3042:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3044:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3048:	f016 fade 	bl	19608 <api_start>
	if (err < 0) {
    304c:	2800      	cmp	r0, #0
    304e:	db05      	blt.n	305c <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    3050:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3054:	2300      	movs	r3, #0
    3056:	4668      	mov	r0, sp
    3058:	f014 f9de 	bl	17418 <z_impl_k_sem_take>
}
    305c:	b007      	add	sp, #28
    305e:	f85d fb04 	ldr.w	pc, [sp], #4
    3062:	bf00      	nop
    3064:	000195db 	.word	0x000195db

00003068 <z_nrf_clock_control_get_onoff>:
}
    3068:	4a02      	ldr	r2, [pc, #8]	; (3074 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    306a:	b2c3      	uxtb	r3, r0
}
    306c:	201c      	movs	r0, #28
    306e:	fb03 2000 	mla	r0, r3, r0, r2
    3072:	4770      	bx	lr
    3074:	20001928 	.word	0x20001928

00003078 <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3078:	4b09      	ldr	r3, [pc, #36]	; (30a0 <z_nrf_clock_bt_ctlr_hf_request+0x28>)
    307a:	f3bf 8f5b 	dmb	ish
    307e:	e853 2f00 	ldrex	r2, [r3]
    3082:	f042 0101 	orr.w	r1, r2, #1
    3086:	e843 1000 	strex	r0, r1, [r3]
    308a:	2800      	cmp	r0, #0
    308c:	d1f7      	bne.n	307e <z_nrf_clock_bt_ctlr_hf_request+0x6>
    308e:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
    3092:	0793      	lsls	r3, r2, #30
    3094:	d402      	bmi.n	309c <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    3096:	2001      	movs	r0, #1
    3098:	f013 bbcc 	b.w	16834 <nrfx_clock_start>
}
    309c:	4770      	bx	lr
    309e:	bf00      	nop
    30a0:	20001978 	.word	0x20001978

000030a4 <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    30a4:	4b09      	ldr	r3, [pc, #36]	; (30cc <z_nrf_clock_bt_ctlr_hf_release+0x28>)
    30a6:	f3bf 8f5b 	dmb	ish
    30aa:	e853 2f00 	ldrex	r2, [r3]
    30ae:	f022 0101 	bic.w	r1, r2, #1
    30b2:	e843 1000 	strex	r0, r1, [r3]
    30b6:	2800      	cmp	r0, #0
    30b8:	d1f7      	bne.n	30aa <z_nrf_clock_bt_ctlr_hf_release+0x6>
    30ba:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
    30be:	0793      	lsls	r3, r2, #30
    30c0:	d402      	bmi.n	30c8 <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    30c2:	2001      	movs	r0, #1
    30c4:	f013 bc02 	b.w	168cc <nrfx_clock_stop>
}
    30c8:	4770      	bx	lr
    30ca:	bf00      	nop
    30cc:	20001978 	.word	0x20001978

000030d0 <z_nrf_clock_control_lf_on>:
{
    30d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    30d4:	493a      	ldr	r1, [pc, #232]	; (31c0 <z_nrf_clock_control_lf_on+0xf0>)
    30d6:	f3bf 8f5b 	dmb	ish
    30da:	4606      	mov	r6, r0
    30dc:	2201      	movs	r2, #1
    30de:	e851 3f00 	ldrex	r3, [r1]
    30e2:	e841 2000 	strex	r0, r2, [r1]
    30e6:	2800      	cmp	r0, #0
    30e8:	d1f9      	bne.n	30de <z_nrf_clock_control_lf_on+0xe>
    30ea:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    30ee:	b933      	cbnz	r3, 30fe <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    30f0:	4934      	ldr	r1, [pc, #208]	; (31c4 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
    30f2:	4835      	ldr	r0, [pc, #212]	; (31c8 <z_nrf_clock_control_lf_on+0xf8>)
    30f4:	604b      	str	r3, [r1, #4]
    30f6:	60cb      	str	r3, [r1, #12]
    30f8:	608a      	str	r2, [r1, #8]
    30fa:	f015 fab1 	bl	18660 <onoff_request>
	switch (start_mode) {
    30fe:	1e73      	subs	r3, r6, #1
    3100:	2b01      	cmp	r3, #1
    3102:	d832      	bhi.n	316a <z_nrf_clock_control_lf_on+0x9a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    3104:	2e01      	cmp	r6, #1
    3106:	d107      	bne.n	3118 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    3108:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    310c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    3110:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    3114:	2b01      	cmp	r3, #1
    3116:	d028      	beq.n	316a <z_nrf_clock_control_lf_on+0x9a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3118:	f01a fba3 	bl	1d862 <k_is_in_isr>
    311c:	4604      	mov	r4, r0
    311e:	b918      	cbnz	r0, 3128 <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    3120:	4b2a      	ldr	r3, [pc, #168]	; (31cc <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
    3122:	781b      	ldrb	r3, [r3, #0]
    3124:	2b00      	cmp	r3, #0
    3126:	d144      	bne.n	31b2 <z_nrf_clock_control_lf_on+0xe2>
	__asm__ volatile(
    3128:	f04f 0320 	mov.w	r3, #32
    312c:	f3ef 8511 	mrs	r5, BASEPRI
    3130:	f383 8811 	msr	BASEPRI, r3
    3134:	f3bf 8f6f 	isb	sy
    3138:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    313a:	4f25      	ldr	r7, [pc, #148]	; (31d0 <z_nrf_clock_control_lf_on+0x100>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    313c:	f8df 8094 	ldr.w	r8, [pc, #148]	; 31d4 <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3140:	f8df 9094 	ldr.w	r9, [pc, #148]	; 31d8 <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3144:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3148:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    314c:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    3150:	03d2      	lsls	r2, r2, #15
    3152:	d50c      	bpl.n	316e <z_nrf_clock_control_lf_on+0x9e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    3154:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    3158:	2b01      	cmp	r3, #1
    315a:	d001      	beq.n	3160 <z_nrf_clock_control_lf_on+0x90>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    315c:	2e01      	cmp	r6, #1
    315e:	d106      	bne.n	316e <z_nrf_clock_control_lf_on+0x9e>
	if (isr_mode) {
    3160:	b30c      	cbz	r4, 31a6 <z_nrf_clock_control_lf_on+0xd6>
	__asm__ volatile(
    3162:	f385 8811 	msr	BASEPRI, r5
    3166:	f3bf 8f6f 	isb	sy
}
    316a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    316e:	b1ac      	cbz	r4, 319c <z_nrf_clock_control_lf_on+0xcc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    3170:	4628      	mov	r0, r5
    3172:	f000 fb53 	bl	381c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    3176:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    317a:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    317e:	2b00      	cmp	r3, #0
    3180:	d1e0      	bne.n	3144 <z_nrf_clock_control_lf_on+0x74>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3182:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    3184:	2900      	cmp	r1, #0
    3186:	d0dd      	beq.n	3144 <z_nrf_clock_control_lf_on+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3188:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    318a:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    318c:	2301      	movs	r3, #1
    318e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    3192:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3196:	f8c9 3000 	str.w	r3, [r9]
}
    319a:	e7d3      	b.n	3144 <z_nrf_clock_control_lf_on+0x74>
	return z_impl_k_sleep(timeout);
    319c:	2100      	movs	r1, #0
    319e:	2021      	movs	r0, #33	; 0x21
    31a0:	f014 fe16 	bl	17dd0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    31a4:	e7e7      	b.n	3176 <z_nrf_clock_control_lf_on+0xa6>
    p_reg->INTENSET = mask;
    31a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    31aa:	2202      	movs	r2, #2
    31ac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    31b0:	e7db      	b.n	316a <z_nrf_clock_control_lf_on+0x9a>
    p_reg->INTENCLR = mask;
    31b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    31b6:	2202      	movs	r2, #2
    31b8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    31bc:	4605      	mov	r5, r0
}
    31be:	e7bc      	b.n	313a <z_nrf_clock_control_lf_on+0x6a>
    31c0:	2000197c 	.word	0x2000197c
    31c4:	20001918 	.word	0x20001918
    31c8:	20001944 	.word	0x20001944
    31cc:	2000344e 	.word	0x2000344e
    31d0:	40000104 	.word	0x40000104
    31d4:	e000e100 	.word	0xe000e100
    31d8:	40000008 	.word	0x40000008

000031dc <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    31dc:	4a04      	ldr	r2, [pc, #16]	; (31f0 <sys_clock_timeout_handler+0x14>)
    31de:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    31e0:	1ac8      	subs	r0, r1, r3
    31e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    31e6:	4403      	add	r3, r0
    31e8:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    31ea:	f014 bfa5 	b.w	18138 <sys_clock_announce>
    31ee:	bf00      	nop
    31f0:	20001990 	.word	0x20001990

000031f4 <set_absolute_alarm>:
{
    31f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    31f8:	0086      	lsls	r6, r0, #2
    31fa:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    31fe:	f100 0450 	add.w	r4, r0, #80	; 0x50
    3202:	f506 3688 	add.w	r6, r6, #69632	; 0x11000
    3206:	00a4      	lsls	r4, r4, #2
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    3208:	f8df 807c 	ldr.w	r8, [pc, #124]	; 3288 <set_absolute_alarm+0x94>
    return p_reg->CC[ch];
    320c:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3210:	b2a4      	uxth	r4, r4
    3212:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3216:	f44f 3780 	mov.w	r7, #65536	; 0x10000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    321a:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    321e:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3222:	4087      	lsls	r7, r0
    3224:	46c1      	mov	r9, r8
     return p_reg->COUNTER;
    3226:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    322a:	eba3 030a 	sub.w	r3, r3, sl
    322e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3232:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    3236:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    3238:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    323c:	d102      	bne.n	3244 <set_absolute_alarm+0x50>
	z_impl_k_busy_wait(usec_to_wait);
    323e:	2013      	movs	r0, #19
    3240:	f01a fe76 	bl	1df30 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    3244:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
    3248:	1aab      	subs	r3, r5, r2
    324a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    324e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    3252:	bf88      	it	hi
    3254:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3256:	2300      	movs	r3, #0
    3258:	6023      	str	r3, [r4, #0]
    325a:	6823      	ldr	r3, [r4, #0]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    325c:	f8c9 7344 	str.w	r7, [r9, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3260:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    3264:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    3268:	f8d9 3504 	ldr.w	r3, [r9, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    326c:	459a      	cmp	sl, r3
    326e:	d006      	beq.n	327e <set_absolute_alarm+0x8a>
	return (a - b) & COUNTER_MAX;
    3270:	1aeb      	subs	r3, r5, r3
    3272:	3b02      	subs	r3, #2
    3274:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    3278:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    327c:	d801      	bhi.n	3282 <set_absolute_alarm+0x8e>
}
    327e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
    3282:	462b      	mov	r3, r5
    3284:	e7cf      	b.n	3226 <set_absolute_alarm+0x32>
    3286:	bf00      	nop
    3288:	40011000 	.word	0x40011000

0000328c <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    328c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return p_reg->INTENSET & mask;
    328e:	4e10      	ldr	r6, [pc, #64]	; (32d0 <rtc_nrf_isr+0x44>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3290:	4f10      	ldr	r7, [pc, #64]	; (32d4 <rtc_nrf_isr+0x48>)
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    3292:	2500      	movs	r5, #0
    3294:	4b10      	ldr	r3, [pc, #64]	; (32d8 <rtc_nrf_isr+0x4c>)
    3296:	2000      	movs	r0, #0
    3298:	681c      	ldr	r4, [r3, #0]
    329a:	461a      	mov	r2, r3
    329c:	b105      	cbz	r5, 32a0 <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    329e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return p_reg->INTENSET & mask;
    32a0:	f8d6 1304 	ldr.w	r1, [r6, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    32a4:	03c9      	lsls	r1, r1, #15
    32a6:	d5fa      	bpl.n	329e <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    32a8:	6839      	ldr	r1, [r7, #0]
    32aa:	2900      	cmp	r1, #0
    32ac:	d0f7      	beq.n	329e <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    32ae:	603d      	str	r5, [r7, #0]
    32b0:	6839      	ldr	r1, [r7, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    32b2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    32b6:	f8c6 1348 	str.w	r1, [r6, #840]	; 0x348
    return p_reg->CC[ch];
    32ba:	f8d6 1540 	ldr.w	r1, [r6, #1344]	; 0x540
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    32be:	2501      	movs	r5, #1
			if (handler) {
    32c0:	b11c      	cbz	r4, 32ca <rtc_nrf_isr+0x3e>
				handler(chan, cc_val,
    32c2:	685a      	ldr	r2, [r3, #4]
    32c4:	6018      	str	r0, [r3, #0]
    32c6:	47a0      	blx	r4
    32c8:	e7e4      	b.n	3294 <rtc_nrf_isr+0x8>
    32ca:	6014      	str	r4, [r2, #0]
}
    32cc:	e7e7      	b.n	329e <rtc_nrf_isr+0x12>
    32ce:	bf00      	nop
    32d0:	40011000 	.word	0x40011000
    32d4:	40011140 	.word	0x40011140
    32d8:	20001984 	.word	0x20001984

000032dc <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    32dc:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    32de:	4d10      	ldr	r5, [pc, #64]	; (3320 <sys_clock_driver_init+0x44>)
    32e0:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    32e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    32e6:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
    32ea:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    32ee:	4b0d      	ldr	r3, [pc, #52]	; (3324 <sys_clock_driver_init+0x48>)
    32f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    32f4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    32f8:	2101      	movs	r1, #1
    32fa:	4622      	mov	r2, r4
    32fc:	2011      	movs	r0, #17
    32fe:	f000 f979 	bl	35f4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    3302:	2011      	movs	r0, #17
    3304:	f000 f944 	bl	3590 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    3308:	4a07      	ldr	r2, [pc, #28]	; (3328 <sys_clock_driver_init+0x4c>)
    330a:	2301      	movs	r3, #1
    330c:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    330e:	4a07      	ldr	r2, [pc, #28]	; (332c <sys_clock_driver_init+0x50>)
    3310:	602b      	str	r3, [r5, #0]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    3312:	2002      	movs	r0, #2
	int_mask = BIT_MASK(CHAN_COUNT);
    3314:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    3316:	f7ff fedb 	bl	30d0 <z_nrf_clock_control_lf_on>

	return 0;
}
    331a:	4620      	mov	r0, r4
    331c:	bd38      	pop	{r3, r4, r5, pc}
    331e:	bf00      	nop
    3320:	40011000 	.word	0x40011000
    3324:	e000e100 	.word	0xe000e100
    3328:	40011008 	.word	0x40011008
    332c:	2000198c 	.word	0x2000198c

00003330 <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3330:	4b13      	ldr	r3, [pc, #76]	; (3380 <sys_clock_set_timeout+0x50>)
    3332:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    3336:	bf08      	it	eq
    3338:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    333a:	3801      	subs	r0, #1
    333c:	2800      	cmp	r0, #0
    333e:	dd1c      	ble.n	337a <sys_clock_set_timeout+0x4a>
    3340:	4298      	cmp	r0, r3
    3342:	bfa8      	it	ge
    3344:	4618      	movge	r0, r3
     return p_reg->COUNTER;
    3346:	4b0f      	ldr	r3, [pc, #60]	; (3384 <sys_clock_set_timeout+0x54>)
    3348:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    334c:	4b0e      	ldr	r3, [pc, #56]	; (3388 <sys_clock_set_timeout+0x58>)
    334e:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    3350:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    3352:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    3356:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
		ticks = 0;
    335a:	bf18      	it	ne
    335c:	2000      	movne	r0, #0
	cc_data[chan].callback = handler;
    335e:	4a0b      	ldr	r2, [pc, #44]	; (338c <sys_clock_set_timeout+0x5c>)
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    3360:	3301      	adds	r3, #1
    3362:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
    3364:	480a      	ldr	r0, [pc, #40]	; (3390 <sys_clock_set_timeout+0x60>)
    3366:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    3368:	2000      	movs	r0, #0
    336a:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    336c:	4a04      	ldr	r2, [pc, #16]	; (3380 <sys_clock_set_timeout+0x50>)
    336e:	4293      	cmp	r3, r2
    3370:	bf94      	ite	ls
    3372:	18c9      	addls	r1, r1, r3
    3374:	1889      	addhi	r1, r1, r2
    3376:	f7ff bf3d 	b.w	31f4 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    337a:	2000      	movs	r0, #0
    337c:	e7e3      	b.n	3346 <sys_clock_set_timeout+0x16>
    337e:	bf00      	nop
    3380:	007fffff 	.word	0x007fffff
    3384:	40011000 	.word	0x40011000
    3388:	20001990 	.word	0x20001990
    338c:	20001984 	.word	0x20001984
    3390:	000031dd 	.word	0x000031dd

00003394 <sys_clock_elapsed>:
    3394:	4b04      	ldr	r3, [pc, #16]	; (33a8 <sys_clock_elapsed+0x14>)
    3396:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
{
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return counter_sub(counter(), last_count) / CYC_PER_TICK;
    339a:	4b04      	ldr	r3, [pc, #16]	; (33ac <sys_clock_elapsed+0x18>)
	return (a - b) & COUNTER_MAX;
    339c:	681b      	ldr	r3, [r3, #0]
    339e:	1ac0      	subs	r0, r0, r3
}
    33a0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    33a4:	4770      	bx	lr
    33a6:	bf00      	nop
    33a8:	40011000 	.word	0x40011000
    33ac:	20001990 	.word	0x20001990

000033b0 <sys_clock_cycle_get_32>:
	__asm__ volatile(
    33b0:	f04f 0320 	mov.w	r3, #32
    33b4:	f3ef 8211 	mrs	r2, BASEPRI
    33b8:	f383 8811 	msr	BASEPRI, r3
    33bc:	f3bf 8f6f 	isb	sy

uint32_t sys_clock_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
    33c0:	4906      	ldr	r1, [pc, #24]	; (33dc <sys_clock_cycle_get_32+0x2c>)
    33c2:	4b07      	ldr	r3, [pc, #28]	; (33e0 <sys_clock_cycle_get_32+0x30>)
    33c4:	6808      	ldr	r0, [r1, #0]
    33c6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    33ca:	f382 8811 	msr	BASEPRI, r2
    33ce:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    33d2:	1a1b      	subs	r3, r3, r0
    33d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    33d8:	4418      	add	r0, r3
    33da:	4770      	bx	lr
    33dc:	20001990 	.word	0x20001990
    33e0:	40011000 	.word	0x40011000

000033e4 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    33e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    33e6:	4e26      	ldr	r6, [pc, #152]	; (3480 <tc_aes128_set_encrypt_key+0x9c>)
{
    33e8:	4607      	mov	r7, r0
    33ea:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    33ec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    33ee:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    33f0:	ad01      	add	r5, sp, #4
    33f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    33f4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    33f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    33f8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    33fc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
    3400:	4638      	mov	r0, r7
    3402:	2f00      	cmp	r7, #0
    3404:	d038      	beq.n	3478 <tc_aes128_set_encrypt_key+0x94>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
    3406:	2c00      	cmp	r4, #0
    3408:	d038      	beq.n	347c <tc_aes128_set_encrypt_key+0x98>
    340a:	1f38      	subs	r0, r7, #4
    340c:	4621      	mov	r1, r4
    340e:	4602      	mov	r2, r0
    3410:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    3412:	784b      	ldrb	r3, [r1, #1]
    3414:	780d      	ldrb	r5, [r1, #0]
    3416:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    3418:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    341c:	78cd      	ldrb	r5, [r1, #3]
    341e:	432b      	orrs	r3, r5
    3420:	788d      	ldrb	r5, [r1, #2]
    3422:	3104      	adds	r1, #4
    3424:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    3428:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    342a:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    342e:	d1f0      	bne.n	3412 <tc_aes128_set_encrypt_key+0x2e>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
    3430:	4c14      	ldr	r4, [pc, #80]	; (3484 <tc_aes128_set_encrypt_key+0xa0>)
    3432:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    3434:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    3436:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    3438:	d116      	bne.n	3468 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    343a:	f3c3 4207 	ubfx	r2, r3, #16, #8
    343e:	5ca5      	ldrb	r5, [r4, r2]
    3440:	0e1a      	lsrs	r2, r3, #24
    3442:	5ca2      	ldrb	r2, [r4, r2]
    3444:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    3448:	f3c3 2507 	ubfx	r5, r3, #8, #8
    344c:	b2db      	uxtb	r3, r3
    344e:	5d65      	ldrb	r5, [r4, r5]
    3450:	5ce3      	ldrb	r3, [r4, r3]
    3452:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    3456:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    345a:	ad0c      	add	r5, sp, #48	; 0x30
    345c:	f021 0303 	bic.w	r3, r1, #3
    3460:	442b      	add	r3, r5
    3462:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    3466:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
    3468:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    346c:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    346e:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    3470:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    3472:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    3474:	d1de      	bne.n	3434 <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
    3476:	2001      	movs	r0, #1
}
    3478:	b00d      	add	sp, #52	; 0x34
    347a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    347c:	4620      	mov	r0, r4
    347e:	e7fb      	b.n	3478 <tc_aes128_set_encrypt_key+0x94>
    3480:	0001e6a0 	.word	0x0001e6a0
    3484:	0001edcd 	.word	0x0001edcd

00003488 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    3488:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    348c:	4615      	mov	r5, r2
    348e:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    3490:	4606      	mov	r6, r0
    3492:	2800      	cmp	r0, #0
    3494:	d058      	beq.n	3548 <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    3496:	2900      	cmp	r1, #0
    3498:	d059      	beq.n	354e <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    349a:	2a00      	cmp	r2, #0
    349c:	d059      	beq.n	3552 <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    349e:	2310      	movs	r3, #16
    34a0:	460a      	mov	r2, r1
    34a2:	4668      	mov	r0, sp
    34a4:	4619      	mov	r1, r3
    34a6:	f016 f8cb 	bl	19640 <_copy>
	add_round_key(state, s->words);
    34aa:	4629      	mov	r1, r5
    34ac:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
    34ae:	4c2a      	ldr	r4, [pc, #168]	; (3558 <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
    34b0:	f016 f8de 	bl	19670 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
    34b4:	f105 0710 	add.w	r7, r5, #16
    34b8:	46a1      	mov	r9, r4
    34ba:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
    34bc:	46e8      	mov	r8, sp
{
    34be:	466a      	mov	r2, sp
    34c0:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
    34c2:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    34c4:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
    34c6:	5c61      	ldrb	r1, [r4, r1]
    34c8:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    34cc:	d1f9      	bne.n	34c2 <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
    34ce:	4668      	mov	r0, sp
    34d0:	f016 f913 	bl	196fa <shift_rows>
	mult_row_column(t, s);
    34d4:	4669      	mov	r1, sp
    34d6:	a804      	add	r0, sp, #16
    34d8:	f016 f948 	bl	1976c <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    34dc:	a901      	add	r1, sp, #4
    34de:	a805      	add	r0, sp, #20
    34e0:	f016 f944 	bl	1976c <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
    34e4:	a902      	add	r1, sp, #8
    34e6:	a806      	add	r0, sp, #24
    34e8:	f016 f940 	bl	1976c <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
    34ec:	a903      	add	r1, sp, #12
    34ee:	a807      	add	r0, sp, #28
    34f0:	f016 f93c 	bl	1976c <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    34f4:	2310      	movs	r3, #16
    34f6:	4619      	mov	r1, r3
    34f8:	eb0d 0203 	add.w	r2, sp, r3
    34fc:	4668      	mov	r0, sp
    34fe:	f016 f89f 	bl	19640 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    3502:	4639      	mov	r1, r7
    3504:	4668      	mov	r0, sp
    3506:	3710      	adds	r7, #16
    3508:	f016 f8b2 	bl	19670 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
    350c:	42af      	cmp	r7, r5
    350e:	d1d5      	bne.n	34bc <tc_aes_encrypt+0x34>
    3510:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
    3512:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
    3516:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
    3518:	f819 3003 	ldrb.w	r3, [r9, r3]
    351c:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    3520:	d1f7      	bne.n	3512 <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
    3522:	4668      	mov	r0, sp
    3524:	f016 f8e9 	bl	196fa <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    3528:	4629      	mov	r1, r5
    352a:	4668      	mov	r0, sp
    352c:	f016 f8a0 	bl	19670 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    3530:	2310      	movs	r3, #16
    3532:	4619      	mov	r1, r3
    3534:	466a      	mov	r2, sp
    3536:	4630      	mov	r0, r6
    3538:	f016 f882 	bl	19640 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    353c:	4668      	mov	r0, sp
    353e:	2210      	movs	r2, #16
    3540:	4621      	mov	r1, r4
    3542:	f016 f88a 	bl	1965a <_set>

	return TC_CRYPTO_SUCCESS;
    3546:	2001      	movs	r0, #1
}
    3548:	b009      	add	sp, #36	; 0x24
    354a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
    354e:	4608      	mov	r0, r1
    3550:	e7fa      	b.n	3548 <tc_aes_encrypt+0xc0>
    3552:	4610      	mov	r0, r2
    3554:	e7f8      	b.n	3548 <tc_aes_encrypt+0xc0>
    3556:	bf00      	nop
    3558:	0001edcd 	.word	0x0001edcd

0000355c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    355c:	4a09      	ldr	r2, [pc, #36]	; (3584 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    355e:	490a      	ldr	r1, [pc, #40]	; (3588 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    3560:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    3562:	6809      	ldr	r1, [r1, #0]
    3564:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3566:	4909      	ldr	r1, [pc, #36]	; (358c <arch_swap+0x30>)
	_current->arch.basepri = key;
    3568:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    356a:	684b      	ldr	r3, [r1, #4]
    356c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3570:	604b      	str	r3, [r1, #4]
    3572:	2300      	movs	r3, #0
    3574:	f383 8811 	msr	BASEPRI, r3
    3578:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    357c:	6893      	ldr	r3, [r2, #8]
}
    357e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    3580:	4770      	bx	lr
    3582:	bf00      	nop
    3584:	20002df8 	.word	0x20002df8
    3588:	0001ec50 	.word	0x0001ec50
    358c:	e000ed00 	.word	0xe000ed00

00003590 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    3590:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    3592:	2b00      	cmp	r3, #0
    3594:	db08      	blt.n	35a8 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3596:	2201      	movs	r2, #1
    3598:	f000 001f 	and.w	r0, r0, #31
    359c:	fa02 f000 	lsl.w	r0, r2, r0
    35a0:	095b      	lsrs	r3, r3, #5
    35a2:	4a02      	ldr	r2, [pc, #8]	; (35ac <arch_irq_enable+0x1c>)
    35a4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    35a8:	4770      	bx	lr
    35aa:	bf00      	nop
    35ac:	e000e100 	.word	0xe000e100

000035b0 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    35b0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    35b2:	2b00      	cmp	r3, #0
    35b4:	db0d      	blt.n	35d2 <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    35b6:	2201      	movs	r2, #1
    35b8:	095b      	lsrs	r3, r3, #5
    35ba:	f000 001f 	and.w	r0, r0, #31
    35be:	fa02 f000 	lsl.w	r0, r2, r0
    35c2:	3320      	adds	r3, #32
    35c4:	4a03      	ldr	r2, [pc, #12]	; (35d4 <arch_irq_disable+0x24>)
    35c6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    35ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    35ce:	f3bf 8f6f 	isb	sy
}
    35d2:	4770      	bx	lr
    35d4:	e000e100 	.word	0xe000e100

000035d8 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    35d8:	4b05      	ldr	r3, [pc, #20]	; (35f0 <arch_irq_is_enabled+0x18>)
    35da:	0942      	lsrs	r2, r0, #5
    35dc:	f000 001f 	and.w	r0, r0, #31
    35e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    35e4:	2301      	movs	r3, #1
    35e6:	fa03 f000 	lsl.w	r0, r3, r0
}
    35ea:	4010      	ands	r0, r2
    35ec:	4770      	bx	lr
    35ee:	bf00      	nop
    35f0:	e000e100 	.word	0xe000e100

000035f4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    35f4:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    35f6:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    35f8:	bfa8      	it	ge
    35fa:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    35fe:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3602:	bfb8      	it	lt
    3604:	4b06      	ldrlt	r3, [pc, #24]	; (3620 <z_arm_irq_priority_set+0x2c>)
    3606:	ea4f 1141 	mov.w	r1, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    360a:	bfac      	ite	ge
    360c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3610:	f000 000f 	andlt.w	r0, r0, #15
    3614:	b2c9      	uxtb	r1, r1
    3616:	bfb4      	ite	lt
    3618:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    361a:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    361e:	4770      	bx	lr
    3620:	e000ed14 	.word	0xe000ed14

00003624 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    3624:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    3626:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    3628:	4b04      	ldr	r3, [pc, #16]	; (363c <_arch_isr_direct_pm+0x18>)
    362a:	6a18      	ldr	r0, [r3, #32]
    362c:	b118      	cbz	r0, 3636 <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    362e:	2200      	movs	r2, #0
    3630:	621a      	str	r2, [r3, #32]
		z_pm_save_idle_exit(idle_val);
    3632:	f01a f923 	bl	1d87c <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    3636:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    3638:	bd08      	pop	{r3, pc}
    363a:	bf00      	nop
    363c:	20002df8 	.word	0x20002df8

00003640 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    3640:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    3644:	9b00      	ldr	r3, [sp, #0]
    3646:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    364a:	490a      	ldr	r1, [pc, #40]	; (3674 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    364c:	9b01      	ldr	r3, [sp, #4]
    364e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    3652:	9b02      	ldr	r3, [sp, #8]
    3654:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    3658:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    365c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3660:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    3664:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    3668:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    366a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    366c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    366e:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    3670:	4770      	bx	lr
    3672:	bf00      	nop
    3674:	0001873d 	.word	0x0001873d

00003678 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    3678:	4a0b      	ldr	r2, [pc, #44]	; (36a8 <z_check_thread_stack_fail+0x30>)
{
    367a:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    367c:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    367e:	b190      	cbz	r0, 36a6 <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    3680:	f113 0f16 	cmn.w	r3, #22
    3684:	6e80      	ldr	r0, [r0, #104]	; 0x68
    3686:	d005      	beq.n	3694 <z_check_thread_stack_fail+0x1c>
    3688:	f1a0 0220 	sub.w	r2, r0, #32
    368c:	429a      	cmp	r2, r3
    368e:	d806      	bhi.n	369e <z_check_thread_stack_fail+0x26>
    3690:	4283      	cmp	r3, r0
    3692:	d204      	bcs.n	369e <z_check_thread_stack_fail+0x26>
    3694:	4281      	cmp	r1, r0
    3696:	bf2c      	ite	cs
    3698:	2100      	movcs	r1, #0
    369a:	2101      	movcc	r1, #1
    369c:	e000      	b.n	36a0 <z_check_thread_stack_fail+0x28>
    369e:	2100      	movs	r1, #0
    36a0:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    36a2:	bf08      	it	eq
    36a4:	2000      	moveq	r0, #0
}
    36a6:	4770      	bx	lr
    36a8:	20002df8 	.word	0x20002df8

000036ac <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    36ac:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    36ae:	4b09      	ldr	r3, [pc, #36]	; (36d4 <arch_switch_to_main_thread+0x28>)
    36b0:	6098      	str	r0, [r3, #8]
{
    36b2:	460d      	mov	r5, r1
    36b4:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    36b6:	f000 fbaf 	bl	3e18 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    36ba:	4620      	mov	r0, r4
    36bc:	f385 8809 	msr	PSP, r5
    36c0:	2100      	movs	r1, #0
    36c2:	b663      	cpsie	if
    36c4:	f381 8811 	msr	BASEPRI, r1
    36c8:	f3bf 8f6f 	isb	sy
    36cc:	2200      	movs	r2, #0
    36ce:	2300      	movs	r3, #0
    36d0:	f015 f834 	bl	1873c <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    36d4:	20002df8 	.word	0x20002df8

000036d8 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    36d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    36da:	4606      	mov	r6, r0

	if (esf != NULL) {
    36dc:	460c      	mov	r4, r1
    36de:	b301      	cbz	r1, 3722 <z_arm_fatal_error+0x4a>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    36e0:	4b13      	ldr	r3, [pc, #76]	; (3730 <z_arm_fatal_error+0x58>)
    36e2:	4d14      	ldr	r5, [pc, #80]	; (3734 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    36e4:	4814      	ldr	r0, [pc, #80]	; (3738 <z_arm_fatal_error+0x60>)
    36e6:	1aed      	subs	r5, r5, r3
    36e8:	08ed      	lsrs	r5, r5, #3
    36ea:	01ad      	lsls	r5, r5, #6
    36ec:	f045 0501 	orr.w	r5, r5, #1
    36f0:	f8ad 5000 	strh.w	r5, [sp]
    36f4:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    36f8:	6809      	ldr	r1, [r1, #0]
    36fa:	f015 fbb4 	bl	18e66 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    36fe:	f8ad 5000 	strh.w	r5, [sp]
    3702:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    3706:	68e1      	ldr	r1, [r4, #12]
    3708:	480c      	ldr	r0, [pc, #48]	; (373c <z_arm_fatal_error+0x64>)
    370a:	f015 fbac 	bl	18e66 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    370e:	69e1      	ldr	r1, [r4, #28]
    3710:	480b      	ldr	r0, [pc, #44]	; (3740 <z_arm_fatal_error+0x68>)
    3712:	462a      	mov	r2, r5
    3714:	f015 fb7a 	bl	18e0c <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    3718:	69a1      	ldr	r1, [r4, #24]
    371a:	480a      	ldr	r0, [pc, #40]	; (3744 <z_arm_fatal_error+0x6c>)
    371c:	462a      	mov	r2, r5
    371e:	f015 fb75 	bl	18e0c <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    3722:	4621      	mov	r1, r4
    3724:	4630      	mov	r0, r6
}
    3726:	b002      	add	sp, #8
    3728:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    372c:	f013 bb1a 	b.w	16d64 <z_fatal_error>
    3730:	0001e408 	.word	0x0001e408
    3734:	0001e628 	.word	0x0001e628
    3738:	0001eecd 	.word	0x0001eecd
    373c:	0001eefc 	.word	0x0001eefc
    3740:	0001ef2b 	.word	0x0001ef2b
    3744:	0001ef3a 	.word	0x0001ef3a

00003748 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3748:	4a0b      	ldr	r2, [pc, #44]	; (3778 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    374a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    374c:	4b0b      	ldr	r3, [pc, #44]	; (377c <z_arm_prep_c+0x34>)
    374e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    3752:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    3754:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3758:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    375c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3760:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    3764:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    3768:	f013 fb5a 	bl	16e20 <z_bss_zero>
	z_data_copy();
    376c:	f014 fbcc 	bl	17f08 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    3770:	f000 fb28 	bl	3dc4 <z_arm_interrupt_init>
	z_cstart();
    3774:	f013 fb78 	bl	16e68 <z_cstart>
    3778:	00000000 	.word	0x00000000
    377c:	e000ed00 	.word	0xe000ed00

00003780 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    3780:	4912      	ldr	r1, [pc, #72]	; (37cc <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    3782:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    3784:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    3788:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    378a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    378e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3792:	2020      	movs	r0, #32
    msr BASEPRI, r0
    3794:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    3798:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    379c:	4f0c      	ldr	r7, [pc, #48]	; (37d0 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    379e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    37a2:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    37a4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    37a6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    37a8:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    37aa:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    37ac:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    37ae:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    37b2:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    37b4:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    37b6:	f000 fb2f 	bl	3e18 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    37ba:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    37be:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    37c2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    37c6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    37ca:	4770      	bx	lr
    ldr r1, =_kernel
    37cc:	20002df8 	.word	0x20002df8
    ldr v4, =_SCS_ICSR
    37d0:	e000ed04 	.word	0xe000ed04

000037d4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    37d4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    37d8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    37da:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    37de:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    37e2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    37e4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    37e8:	2902      	cmp	r1, #2
    beq _oops
    37ea:	d0ff      	beq.n	37ec <_oops>

000037ec <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    37ec:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    37ee:	f016 f900 	bl	199f2 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    37f2:	bd01      	pop	{r0, pc}

000037f4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    37f4:	4901      	ldr	r1, [pc, #4]	; (37fc <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    37f6:	2210      	movs	r2, #16
	str	r2, [r1]
    37f8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    37fa:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    37fc:	e000ed10 	.word	0xe000ed10

00003800 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    3800:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    3802:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    3804:	f380 8811 	msr	BASEPRI, r0
	isb
    3808:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    380c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    3810:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    3812:	b662      	cpsie	i
	isb
    3814:	f3bf 8f6f 	isb	sy

	bx	lr
    3818:	4770      	bx	lr
    381a:	bf00      	nop

0000381c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    381c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    381e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    3820:	f381 8811 	msr	BASEPRI, r1

	wfe
    3824:	bf20      	wfe

	msr	BASEPRI, r0
    3826:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    382a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    382c:	4770      	bx	lr
    382e:	bf00      	nop

00003830 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    3830:	bf30      	wfi
    b z_SysNmiOnReset
    3832:	f7ff bffd 	b.w	3830 <z_SysNmiOnReset>
    3836:	bf00      	nop

00003838 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    3838:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    383a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    383c:	4a0b      	ldr	r2, [pc, #44]	; (386c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    383e:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    3840:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    3842:	bf1e      	ittt	ne
	movne	r1, #0
    3844:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    3846:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
    3848:	f01a f818 	blne	1d87c <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    384c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    384e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    3852:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    3856:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    385a:	4905      	ldr	r1, [pc, #20]	; (3870 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    385c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    385e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    3860:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    3862:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    3866:	4903      	ldr	r1, [pc, #12]	; (3874 <_isr_wrapper+0x3c>)
	bx r1
    3868:	4708      	bx	r1
    386a:	0000      	.short	0x0000
	ldr r2, =_kernel
    386c:	20002df8 	.word	0x20002df8
	ldr r1, =_sw_isr_table
    3870:	0001e138 	.word	0x0001e138
	ldr r1, =z_arm_int_exit
    3874:	000038e1 	.word	0x000038e1

00003878 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    3878:	2000      	movs	r0, #0
    msr CONTROL, r0
    387a:	f380 8814 	msr	CONTROL, r0
    isb
    387e:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    3882:	f016 f9e0 	bl	19c46 <z_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    3886:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    3888:	490d      	ldr	r1, [pc, #52]	; (38c0 <__start+0x48>)
    str r0, [r1]
    388a:	6008      	str	r0, [r1, #0]
    dsb
    388c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    3890:	480c      	ldr	r0, [pc, #48]	; (38c4 <__start+0x4c>)
    msr msp, r0
    3892:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    3896:	f000 fa63 	bl	3d60 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    389a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    389c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    38a0:	4809      	ldr	r0, [pc, #36]	; (38c8 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    38a2:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    38a6:	1840      	adds	r0, r0, r1
    msr PSP, r0
    38a8:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    38ac:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    38b0:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    38b2:	4308      	orrs	r0, r1
    msr CONTROL, r0
    38b4:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    38b8:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    38bc:	f7ff ff44 	bl	3748 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    38c0:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    38c4:	20004b80 	.word	0x20004b80
    ldr r0, =z_interrupt_stacks
    38c8:	20004d00 	.word	0x20004d00

000038cc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    38cc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    38d0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    38d4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    38d6:	4672      	mov	r2, lr
	bl z_arm_fault
    38d8:	f000 f95c 	bl	3b94 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    38dc:	bd01      	pop	{r0, pc}
    38de:	bf00      	nop

000038e0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    38e0:	4b04      	ldr	r3, [pc, #16]	; (38f4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    38e2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    38e4:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    38e6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    38e8:	d003      	beq.n	38f2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    38ea:	4903      	ldr	r1, [pc, #12]	; (38f8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    38ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    38f0:	600a      	str	r2, [r1, #0]

000038f2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    38f2:	4770      	bx	lr
	ldr r3, =_kernel
    38f4:	20002df8 	.word	0x20002df8
	ldr r1, =_SCS_ICSR
    38f8:	e000ed04 	.word	0xe000ed04

000038fc <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    38fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3900:	4b35      	ldr	r3, [pc, #212]	; (39d8 <mem_manage_fault+0xdc>)
    3902:	4c36      	ldr	r4, [pc, #216]	; (39dc <mem_manage_fault+0xe0>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3904:	4d36      	ldr	r5, [pc, #216]	; (39e0 <mem_manage_fault+0xe4>)
    3906:	1ae4      	subs	r4, r4, r3
    3908:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    390a:	01a4      	lsls	r4, r4, #6
    390c:	f044 0901 	orr.w	r9, r4, #1
{
    3910:	4607      	mov	r7, r0
    3912:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    3914:	4833      	ldr	r0, [pc, #204]	; (39e4 <mem_manage_fault+0xe8>)
    3916:	4649      	mov	r1, r9
{
    3918:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    391a:	f015 fa6a 	bl	18df2 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    391e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    3920:	06d3      	lsls	r3, r2, #27
    3922:	d503      	bpl.n	392c <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Stacking error (context area might be"
    3924:	4830      	ldr	r0, [pc, #192]	; (39e8 <mem_manage_fault+0xec>)
    3926:	4649      	mov	r1, r9
    3928:	f015 fa63 	bl	18df2 <log_0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    392c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    392e:	0718      	lsls	r0, r3, #28
    3930:	d504      	bpl.n	393c <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Unstacking error");
    3932:	482e      	ldr	r0, [pc, #184]	; (39ec <mem_manage_fault+0xf0>)
    3934:	f044 0101 	orr.w	r1, r4, #1
    3938:	f015 fa5b 	bl	18df2 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    393c:	4d28      	ldr	r5, [pc, #160]	; (39e0 <mem_manage_fault+0xe4>)
    393e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3940:	0799      	lsls	r1, r3, #30
    3942:	d423      	bmi.n	398c <mem_manage_fault+0x90>
	uint32_t mmfar = -EINVAL;
    3944:	f06f 0915 	mvn.w	r9, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    3948:	4d25      	ldr	r5, [pc, #148]	; (39e0 <mem_manage_fault+0xe4>)
    394a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    394c:	07d3      	lsls	r3, r2, #31
    394e:	d504      	bpl.n	395a <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Instruction Access Violation");
    3950:	4827      	ldr	r0, [pc, #156]	; (39f0 <mem_manage_fault+0xf4>)
    3952:	f044 0101 	orr.w	r1, r4, #1
    3956:	f015 fa4c 	bl	18df2 <log_0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    395a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    395c:	0698      	lsls	r0, r3, #26
    395e:	d504      	bpl.n	396a <mem_manage_fault+0x6e>
		PR_FAULT_INFO(
    3960:	4824      	ldr	r0, [pc, #144]	; (39f4 <mem_manage_fault+0xf8>)
    3962:	f044 0101 	orr.w	r1, r4, #1
    3966:	f015 fa44 	bl	18df2 <log_0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    396a:	4b1d      	ldr	r3, [pc, #116]	; (39e0 <mem_manage_fault+0xe4>)
    396c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    396e:	06d1      	lsls	r1, r2, #27
    3970:	d424      	bmi.n	39bc <mem_manage_fault+0xc0>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    3972:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3974:	0792      	lsls	r2, r2, #30
    3976:	d421      	bmi.n	39bc <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    3978:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    397a:	4a19      	ldr	r2, [pc, #100]	; (39e0 <mem_manage_fault+0xe4>)
    397c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    397e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    3982:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    3984:	2300      	movs	r3, #0
    3986:	7033      	strb	r3, [r6, #0]

	return reason;
}
    3988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
    398c:	f044 0a01 	orr.w	sl, r4, #1
    3990:	4819      	ldr	r0, [pc, #100]	; (39f8 <mem_manage_fault+0xfc>)
    3992:	4651      	mov	r1, sl
    3994:	f015 fa2d 	bl	18df2 <log_0>
		uint32_t temp = SCB->MMFAR;
    3998:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    399c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    399e:	061a      	lsls	r2, r3, #24
    39a0:	d5d0      	bpl.n	3944 <mem_manage_fault+0x48>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    39a2:	4816      	ldr	r0, [pc, #88]	; (39fc <mem_manage_fault+0x100>)
    39a4:	4652      	mov	r2, sl
    39a6:	4649      	mov	r1, r9
    39a8:	f015 fa30 	bl	18e0c <log_1>
			if (from_hard_fault != 0) {
    39ac:	f1b8 0f00 	cmp.w	r8, #0
    39b0:	d0ca      	beq.n	3948 <mem_manage_fault+0x4c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    39b2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    39b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    39b8:	62ab      	str	r3, [r5, #40]	; 0x28
    39ba:	e7c5      	b.n	3948 <mem_manage_fault+0x4c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    39bc:	685b      	ldr	r3, [r3, #4]
    39be:	051b      	lsls	r3, r3, #20
    39c0:	d5da      	bpl.n	3978 <mem_manage_fault+0x7c>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    39c2:	4639      	mov	r1, r7
    39c4:	4648      	mov	r0, r9
    39c6:	f7ff fe57 	bl	3678 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    39ca:	2800      	cmp	r0, #0
    39cc:	d0d4      	beq.n	3978 <mem_manage_fault+0x7c>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    39ce:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    39d2:	2002      	movs	r0, #2
    39d4:	e7d1      	b.n	397a <mem_manage_fault+0x7e>
    39d6:	bf00      	nop
    39d8:	0001e408 	.word	0x0001e408
    39dc:	0001e628 	.word	0x0001e628
    39e0:	e000ed00 	.word	0xe000ed00
    39e4:	0001ef68 	.word	0x0001ef68
    39e8:	0001ef7e 	.word	0x0001ef7e
    39ec:	0001efb1 	.word	0x0001efb1
    39f0:	0001eff2 	.word	0x0001eff2
    39f4:	0001f011 	.word	0x0001f011
    39f8:	0001efc4 	.word	0x0001efc4
    39fc:	0001efdc 	.word	0x0001efdc

00003a00 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    3a00:	b570      	push	{r4, r5, r6, lr}
    3a02:	4b23      	ldr	r3, [pc, #140]	; (3a90 <usage_fault.isra.0+0x90>)
    3a04:	4c23      	ldr	r4, [pc, #140]	; (3a94 <usage_fault.isra.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3a06:	4d24      	ldr	r5, [pc, #144]	; (3a98 <usage_fault.isra.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    3a08:	4824      	ldr	r0, [pc, #144]	; (3a9c <usage_fault.isra.0+0x9c>)
    3a0a:	1ae4      	subs	r4, r4, r3
    3a0c:	08e4      	lsrs	r4, r4, #3
    3a0e:	01a4      	lsls	r4, r4, #6
    3a10:	f044 0601 	orr.w	r6, r4, #1
    3a14:	4631      	mov	r1, r6
    3a16:	f015 f9ec 	bl	18df2 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3a1a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    3a1c:	0193      	lsls	r3, r2, #6
    3a1e:	d503      	bpl.n	3a28 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    3a20:	481f      	ldr	r0, [pc, #124]	; (3aa0 <usage_fault.isra.0+0xa0>)
    3a22:	4631      	mov	r1, r6
    3a24:	f015 f9e5 	bl	18df2 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    3a28:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3a2a:	01dd      	lsls	r5, r3, #7
    3a2c:	d504      	bpl.n	3a38 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    3a2e:	481d      	ldr	r0, [pc, #116]	; (3aa4 <usage_fault.isra.0+0xa4>)
    3a30:	f044 0101 	orr.w	r1, r4, #1
    3a34:	f015 f9dd 	bl	18df2 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    3a38:	4d17      	ldr	r5, [pc, #92]	; (3a98 <usage_fault.isra.0+0x98>)
    3a3a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    3a3c:	0310      	lsls	r0, r2, #12
    3a3e:	d504      	bpl.n	3a4a <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    3a40:	4819      	ldr	r0, [pc, #100]	; (3aa8 <usage_fault.isra.0+0xa8>)
    3a42:	f044 0101 	orr.w	r1, r4, #1
    3a46:	f015 f9d4 	bl	18df2 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    3a4a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3a4c:	0359      	lsls	r1, r3, #13
    3a4e:	d504      	bpl.n	3a5a <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    3a50:	4816      	ldr	r0, [pc, #88]	; (3aac <usage_fault.isra.0+0xac>)
    3a52:	f044 0101 	orr.w	r1, r4, #1
    3a56:	f015 f9cc 	bl	18df2 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    3a5a:	4d0f      	ldr	r5, [pc, #60]	; (3a98 <usage_fault.isra.0+0x98>)
    3a5c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    3a5e:	0392      	lsls	r2, r2, #14
    3a60:	d504      	bpl.n	3a6c <usage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    3a62:	4813      	ldr	r0, [pc, #76]	; (3ab0 <usage_fault.isra.0+0xb0>)
    3a64:	f044 0101 	orr.w	r1, r4, #1
    3a68:	f015 f9c3 	bl	18df2 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    3a6c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3a6e:	03db      	lsls	r3, r3, #15
    3a70:	d504      	bpl.n	3a7c <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    3a72:	4810      	ldr	r0, [pc, #64]	; (3ab4 <usage_fault.isra.0+0xb4>)
    3a74:	f044 0101 	orr.w	r1, r4, #1
    3a78:	f015 f9bb 	bl	18df2 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3a7c:	4a06      	ldr	r2, [pc, #24]	; (3a98 <usage_fault.isra.0+0x98>)
    3a7e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3a80:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    3a84:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    3a88:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    3a8a:	2000      	movs	r0, #0
    3a8c:	bd70      	pop	{r4, r5, r6, pc}
    3a8e:	bf00      	nop
    3a90:	0001e408 	.word	0x0001e408
    3a94:	0001e628 	.word	0x0001e628
    3a98:	e000ed00 	.word	0xe000ed00
    3a9c:	0001f040 	.word	0x0001f040
    3aa0:	0001f058 	.word	0x0001f058
    3aa4:	0001f06b 	.word	0x0001f06b
    3aa8:	0001f085 	.word	0x0001f085
    3aac:	0001f0a3 	.word	0x0001f0a3
    3ab0:	0001f0c8 	.word	0x0001f0c8
    3ab4:	0001f0e2 	.word	0x0001f0e2

00003ab8 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    3ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3abc:	4b2a      	ldr	r3, [pc, #168]	; (3b68 <bus_fault.isra.0+0xb0>)
    3abe:	4c2b      	ldr	r4, [pc, #172]	; (3b6c <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    3ac0:	4d2b      	ldr	r5, [pc, #172]	; (3b70 <bus_fault.isra.0+0xb8>)
    3ac2:	1ae4      	subs	r4, r4, r3
    3ac4:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    3ac6:	01a4      	lsls	r4, r4, #6
    3ac8:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    3acc:	4607      	mov	r7, r0
    3ace:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    3ad0:	4828      	ldr	r0, [pc, #160]	; (3b74 <bus_fault.isra.0+0xbc>)
    3ad2:	4641      	mov	r1, r8
    3ad4:	f015 f98d 	bl	18df2 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    3ad8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    3ada:	04d1      	lsls	r1, r2, #19
    3adc:	d503      	bpl.n	3ae6 <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
    3ade:	4826      	ldr	r0, [pc, #152]	; (3b78 <bus_fault.isra.0+0xc0>)
    3ae0:	4641      	mov	r1, r8
    3ae2:	f015 f986 	bl	18df2 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    3ae6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3ae8:	051a      	lsls	r2, r3, #20
    3aea:	d504      	bpl.n	3af6 <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    3aec:	4823      	ldr	r0, [pc, #140]	; (3b7c <bus_fault.isra.0+0xc4>)
    3aee:	f044 0101 	orr.w	r1, r4, #1
    3af2:	f015 f97e 	bl	18df2 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    3af6:	4d1e      	ldr	r5, [pc, #120]	; (3b70 <bus_fault.isra.0+0xb8>)
    3af8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3afa:	059b      	lsls	r3, r3, #22
    3afc:	d512      	bpl.n	3b24 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
    3afe:	f044 0801 	orr.w	r8, r4, #1
    3b02:	481f      	ldr	r0, [pc, #124]	; (3b80 <bus_fault.isra.0+0xc8>)
    3b04:	4641      	mov	r1, r8
    3b06:	f015 f974 	bl	18df2 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    3b0a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    3b0c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3b0e:	0418      	lsls	r0, r3, #16
    3b10:	d508      	bpl.n	3b24 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    3b12:	481c      	ldr	r0, [pc, #112]	; (3b84 <bus_fault.isra.0+0xcc>)
    3b14:	4642      	mov	r2, r8
    3b16:	f015 f979 	bl	18e0c <log_1>
			if (from_hard_fault != 0) {
    3b1a:	b11f      	cbz	r7, 3b24 <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    3b1c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3b1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    3b22:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    3b24:	4d12      	ldr	r5, [pc, #72]	; (3b70 <bus_fault.isra.0+0xb8>)
    3b26:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3b28:	0559      	lsls	r1, r3, #21
    3b2a:	d504      	bpl.n	3b36 <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
    3b2c:	4816      	ldr	r0, [pc, #88]	; (3b88 <bus_fault.isra.0+0xd0>)
    3b2e:	f044 0101 	orr.w	r1, r4, #1
    3b32:	f015 f95e 	bl	18df2 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    3b36:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3b38:	05da      	lsls	r2, r3, #23
    3b3a:	d50d      	bpl.n	3b58 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
    3b3c:	4813      	ldr	r0, [pc, #76]	; (3b8c <bus_fault.isra.0+0xd4>)
    3b3e:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    3b42:	f015 f956 	bl	18df2 <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3b46:	4a0a      	ldr	r2, [pc, #40]	; (3b70 <bus_fault.isra.0+0xb8>)
    3b48:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3b4a:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3b4c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    3b50:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3b52:	7030      	strb	r0, [r6, #0]
}
    3b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    3b58:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3b5a:	049b      	lsls	r3, r3, #18
    3b5c:	d5f3      	bpl.n	3b46 <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    3b5e:	480c      	ldr	r0, [pc, #48]	; (3b90 <bus_fault.isra.0+0xd8>)
    3b60:	f044 0101 	orr.w	r1, r4, #1
    3b64:	e7ed      	b.n	3b42 <bus_fault.isra.0+0x8a>
    3b66:	bf00      	nop
    3b68:	0001e408 	.word	0x0001e408
    3b6c:	0001e628 	.word	0x0001e628
    3b70:	e000ed00 	.word	0xe000ed00
    3b74:	0001f10d 	.word	0x0001f10d
    3b78:	0001f123 	.word	0x0001f123
    3b7c:	0001efb1 	.word	0x0001efb1
    3b80:	0001f134 	.word	0x0001f134
    3b84:	0001f14d 	.word	0x0001f14d
    3b88:	0001f162 	.word	0x0001f162
    3b8c:	0001f17d 	.word	0x0001f17d
    3b90:	0001f011 	.word	0x0001f011

00003b94 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    3b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3b98:	4b57      	ldr	r3, [pc, #348]	; (3cf8 <z_arm_fault+0x164>)
    3b9a:	685e      	ldr	r6, [r3, #4]
{
    3b9c:	b08a      	sub	sp, #40	; 0x28
    3b9e:	460f      	mov	r7, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3ba0:	f3c6 0408 	ubfx	r4, r6, #0, #9
    3ba4:	2500      	movs	r5, #0
    3ba6:	f385 8811 	msr	BASEPRI, r5
    3baa:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    3bae:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    3bb2:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    3bb6:	d10d      	bne.n	3bd4 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    3bb8:	f002 030c 	and.w	r3, r2, #12
    3bbc:	2b08      	cmp	r3, #8
    3bbe:	d10b      	bne.n	3bd8 <z_arm_fault+0x44>
    3bc0:	494e      	ldr	r1, [pc, #312]	; (3cfc <z_arm_fault+0x168>)
    3bc2:	4b4f      	ldr	r3, [pc, #316]	; (3d00 <z_arm_fault+0x16c>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    3bc4:	484f      	ldr	r0, [pc, #316]	; (3d04 <z_arm_fault+0x170>)
    3bc6:	1ac9      	subs	r1, r1, r3
    3bc8:	08c9      	lsrs	r1, r1, #3
    3bca:	0189      	lsls	r1, r1, #6
    3bcc:	f041 0101 	orr.w	r1, r1, #1
    3bd0:	f015 f90f 	bl	18df2 <log_0>
		return NULL;
    3bd4:	462f      	mov	r7, r5
    3bd6:	e003      	b.n	3be0 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    3bd8:	0712      	lsls	r2, r2, #28
    3bda:	d401      	bmi.n	3be0 <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
    3bdc:	4607      	mov	r7, r0
			*nested_exc = true;
    3bde:	2501      	movs	r5, #1
	*recoverable = false;
    3be0:	2300      	movs	r3, #0
    3be2:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    3be6:	1ee3      	subs	r3, r4, #3
    3be8:	2b09      	cmp	r3, #9
    3bea:	d86b      	bhi.n	3cc4 <z_arm_fault+0x130>
    3bec:	e8df f003 	tbb	[pc, r3]
    3bf0:	3d5d5905 	.word	0x3d5d5905
    3bf4:	6a6a6a6a 	.word	0x6a6a6a6a
    3bf8:	616a      	.short	0x616a
    3bfa:	4b41      	ldr	r3, [pc, #260]	; (3d00 <z_arm_fault+0x16c>)
    3bfc:	4e3f      	ldr	r6, [pc, #252]	; (3cfc <z_arm_fault+0x168>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    3bfe:	4842      	ldr	r0, [pc, #264]	; (3d08 <z_arm_fault+0x174>)
    3c00:	1af6      	subs	r6, r6, r3
    3c02:	08f6      	lsrs	r6, r6, #3
    3c04:	01b6      	lsls	r6, r6, #6
    3c06:	f046 0601 	orr.w	r6, r6, #1
    3c0a:	4631      	mov	r1, r6
    3c0c:	f015 f8f1 	bl	18df2 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3c10:	4b39      	ldr	r3, [pc, #228]	; (3cf8 <z_arm_fault+0x164>)
    3c12:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
    3c14:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3c18:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    3c1c:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3c20:	d005      	beq.n	3c2e <z_arm_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
    3c22:	483a      	ldr	r0, [pc, #232]	; (3d0c <z_arm_fault+0x178>)
    3c24:	4631      	mov	r1, r6
	PR_FAULT_INFO(
    3c26:	f015 f8e4 	bl	18df2 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    3c2a:	2400      	movs	r4, #0
}
    3c2c:	e020      	b.n	3c70 <z_arm_fault+0xdc>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    3c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3c30:	005b      	lsls	r3, r3, #1
    3c32:	d51d      	bpl.n	3c70 <z_arm_fault+0xdc>
		PR_EXC("  Fault escalation (see below)");
    3c34:	4836      	ldr	r0, [pc, #216]	; (3d10 <z_arm_fault+0x17c>)
    3c36:	4631      	mov	r1, r6
    3c38:	f015 f8db 	bl	18df2 <log_0>
		if (SCB_MMFSR != 0) {
    3c3c:	4b35      	ldr	r3, [pc, #212]	; (3d14 <z_arm_fault+0x180>)
    3c3e:	781b      	ldrb	r3, [r3, #0]
    3c40:	b133      	cbz	r3, 3c50 <z_arm_fault+0xbc>
			reason = mem_manage_fault(esf, 1, recoverable);
    3c42:	f10d 0207 	add.w	r2, sp, #7
    3c46:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    3c48:	4638      	mov	r0, r7
    3c4a:	f7ff fe57 	bl	38fc <mem_manage_fault>
    3c4e:	e00e      	b.n	3c6e <z_arm_fault+0xda>
		} else if (SCB_BFSR != 0) {
    3c50:	4b31      	ldr	r3, [pc, #196]	; (3d18 <z_arm_fault+0x184>)
    3c52:	781b      	ldrb	r3, [r3, #0]
    3c54:	b12b      	cbz	r3, 3c62 <z_arm_fault+0xce>
			reason = bus_fault(esf, 1, recoverable);
    3c56:	f10d 0107 	add.w	r1, sp, #7
    3c5a:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    3c5c:	f7ff ff2c 	bl	3ab8 <bus_fault.isra.0>
    3c60:	e005      	b.n	3c6e <z_arm_fault+0xda>
		} else if (SCB_UFSR != 0) {
    3c62:	4b2e      	ldr	r3, [pc, #184]	; (3d1c <z_arm_fault+0x188>)
    3c64:	881b      	ldrh	r3, [r3, #0]
    3c66:	b29b      	uxth	r3, r3
    3c68:	b113      	cbz	r3, 3c70 <z_arm_fault+0xdc>
			reason = usage_fault(esf);
    3c6a:	f7ff fec9 	bl	3a00 <usage_fault.isra.0>
    3c6e:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    3c70:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3c74:	b993      	cbnz	r3, 3c9c <z_arm_fault+0x108>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    3c76:	2220      	movs	r2, #32
    3c78:	4639      	mov	r1, r7
    3c7a:	a802      	add	r0, sp, #8
    3c7c:	f015 ff92 	bl	19ba4 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    3c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3c82:	b39d      	cbz	r5, 3cec <z_arm_fault+0x158>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    3c84:	f3c3 0208 	ubfx	r2, r3, #0, #9
    3c88:	b922      	cbnz	r2, 3c94 <z_arm_fault+0x100>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    3c8a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    3c8e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3c92:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    3c94:	a902      	add	r1, sp, #8
    3c96:	4620      	mov	r0, r4
    3c98:	f7ff fd1e 	bl	36d8 <z_arm_fatal_error>
}
    3c9c:	b00a      	add	sp, #40	; 0x28
    3c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    3ca2:	f10d 0207 	add.w	r2, sp, #7
    3ca6:	2100      	movs	r1, #0
    3ca8:	e7ce      	b.n	3c48 <z_arm_fault+0xb4>
		reason = bus_fault(esf, 0, recoverable);
    3caa:	f10d 0107 	add.w	r1, sp, #7
    3cae:	2000      	movs	r0, #0
    3cb0:	e7d4      	b.n	3c5c <z_arm_fault+0xc8>
    3cb2:	4912      	ldr	r1, [pc, #72]	; (3cfc <z_arm_fault+0x168>)
    3cb4:	4b12      	ldr	r3, [pc, #72]	; (3d00 <z_arm_fault+0x16c>)
	PR_FAULT_INFO(
    3cb6:	481a      	ldr	r0, [pc, #104]	; (3d20 <z_arm_fault+0x18c>)
    3cb8:	1ac9      	subs	r1, r1, r3
    3cba:	08c9      	lsrs	r1, r1, #3
    3cbc:	0189      	lsls	r1, r1, #6
    3cbe:	f041 0101 	orr.w	r1, r1, #1
    3cc2:	e7b0      	b.n	3c26 <z_arm_fault+0x92>
    3cc4:	4a0e      	ldr	r2, [pc, #56]	; (3d00 <z_arm_fault+0x16c>)
    3cc6:	4b0d      	ldr	r3, [pc, #52]	; (3cfc <z_arm_fault+0x168>)
	PR_FAULT_INFO("***** %s %d) *****",
    3cc8:	4816      	ldr	r0, [pc, #88]	; (3d24 <z_arm_fault+0x190>)
    3cca:	4917      	ldr	r1, [pc, #92]	; (3d28 <z_arm_fault+0x194>)
    3ccc:	1a9b      	subs	r3, r3, r2
    3cce:	08db      	lsrs	r3, r3, #3
    3cd0:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
    3cd4:	ea4f 1383 	mov.w	r3, r3, lsl #6
    3cd8:	bf18      	it	ne
    3cda:	4601      	movne	r1, r0
    3cdc:	f043 0301 	orr.w	r3, r3, #1
    3ce0:	4812      	ldr	r0, [pc, #72]	; (3d2c <z_arm_fault+0x198>)
    3ce2:	f1a4 0210 	sub.w	r2, r4, #16
    3ce6:	f015 f8a5 	bl	18e34 <log_2>
    3cea:	e79e      	b.n	3c2a <z_arm_fault+0x96>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3cec:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    3cf0:	f023 0301 	bic.w	r3, r3, #1
    3cf4:	e7cd      	b.n	3c92 <z_arm_fault+0xfe>
    3cf6:	bf00      	nop
    3cf8:	e000ed00 	.word	0xe000ed00
    3cfc:	0001e628 	.word	0x0001e628
    3d00:	0001e408 	.word	0x0001e408
    3d04:	0001f195 	.word	0x0001f195
    3d08:	0001f1c0 	.word	0x0001f1c0
    3d0c:	0001f1d7 	.word	0x0001f1d7
    3d10:	0001f1f8 	.word	0x0001f1f8
    3d14:	e000ed28 	.word	0xe000ed28
    3d18:	e000ed29 	.word	0xe000ed29
    3d1c:	e000ed2a 	.word	0xe000ed2a
    3d20:	0001f217 	.word	0x0001f217
    3d24:	0001f250 	.word	0x0001f250
    3d28:	0001f23b 	.word	0x0001f23b
    3d2c:	0001f269 	.word	0x0001f269

00003d30 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    3d30:	4a02      	ldr	r2, [pc, #8]	; (3d3c <z_arm_fault_init+0xc>)
    3d32:	6953      	ldr	r3, [r2, #20]
    3d34:	f043 0310 	orr.w	r3, r3, #16
    3d38:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    3d3a:	4770      	bx	lr
    3d3c:	e000ed00 	.word	0xe000ed00

00003d40 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    3d40:	4a06      	ldr	r2, [pc, #24]	; (3d5c <z_arm_clear_arm_mpu_config+0x1c>)
    3d42:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
    3d44:	2300      	movs	r3, #0
	int num_regions =
    3d46:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    3d4a:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    3d4c:	428b      	cmp	r3, r1
    3d4e:	d100      	bne.n	3d52 <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    3d50:	4770      	bx	lr
  MPU->RNR = rnr;
    3d52:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    3d54:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    3d56:	3301      	adds	r3, #1
    3d58:	e7f8      	b.n	3d4c <z_arm_clear_arm_mpu_config+0xc>
    3d5a:	bf00      	nop
    3d5c:	e000ed90 	.word	0xe000ed90

00003d60 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    3d60:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    3d62:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    3d64:	2300      	movs	r3, #0
    3d66:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    3d6a:	f7ff ffe9 	bl	3d40 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    3d6e:	4b14      	ldr	r3, [pc, #80]	; (3dc0 <z_arm_init_arch_hw_at_boot+0x60>)
    3d70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3d74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    3d78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    3d7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    3d80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    3d84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    3d88:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    3d8c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    3d90:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    3d94:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3d98:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    3d9c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    3da0:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    3da4:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    3da8:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    3dac:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    3db0:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    3db4:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    3db6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3dba:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    3dbe:	bd08      	pop	{r3, pc}
    3dc0:	e000e100 	.word	0xe000e100

00003dc4 <z_arm_interrupt_init>:
    3dc4:	4804      	ldr	r0, [pc, #16]	; (3dd8 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    3dc6:	2300      	movs	r3, #0
    3dc8:	2120      	movs	r1, #32
    3dca:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    3dcc:	3301      	adds	r3, #1
    3dce:	2b27      	cmp	r3, #39	; 0x27
    3dd0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    3dd4:	d1f9      	bne.n	3dca <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    3dd6:	4770      	bx	lr
    3dd8:	e000e100 	.word	0xe000e100

00003ddc <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    3ddc:	4b06      	ldr	r3, [pc, #24]	; (3df8 <z_impl_k_thread_abort+0x1c>)
    3dde:	689b      	ldr	r3, [r3, #8]
    3de0:	4283      	cmp	r3, r0
    3de2:	d107      	bne.n	3df4 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3de4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    3de8:	b123      	cbz	r3, 3df4 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3dea:	4a04      	ldr	r2, [pc, #16]	; (3dfc <z_impl_k_thread_abort+0x20>)
    3dec:	6853      	ldr	r3, [r2, #4]
    3dee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3df2:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    3df4:	f014 b824 	b.w	17e40 <z_thread_abort>
    3df8:	20002df8 	.word	0x20002df8
    3dfc:	e000ed00 	.word	0xe000ed00

00003e00 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    3e00:	4b02      	ldr	r3, [pc, #8]	; (3e0c <z_arm_configure_static_mpu_regions+0xc>)
    3e02:	4a03      	ldr	r2, [pc, #12]	; (3e10 <z_arm_configure_static_mpu_regions+0x10>)
    3e04:	4803      	ldr	r0, [pc, #12]	; (3e14 <z_arm_configure_static_mpu_regions+0x14>)
    3e06:	2101      	movs	r1, #1
    3e08:	f000 b884 	b.w	3f14 <arm_core_mpu_configure_static_mpu_regions>
    3e0c:	20010000 	.word	0x20010000
    3e10:	20000000 	.word	0x20000000
    3e14:	0001e7c4 	.word	0x0001e7c4

00003e18 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    3e18:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    3e1a:	4b05      	ldr	r3, [pc, #20]	; (3e30 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    3e1c:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    3e1e:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    3e20:	4a04      	ldr	r2, [pc, #16]	; (3e34 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    3e22:	2120      	movs	r1, #32
    3e24:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    3e28:	4618      	mov	r0, r3
    3e2a:	2101      	movs	r1, #1
    3e2c:	f000 b87c 	b.w	3f28 <arm_core_mpu_configure_dynamic_mpu_regions>
    3e30:	20001994 	.word	0x20001994
    3e34:	150b0000 	.word	0x150b0000

00003e38 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    3e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    3e3a:	4f28      	ldr	r7, [pc, #160]	; (3edc <mpu_configure_regions+0xa4>)
    3e3c:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    3e3e:	2100      	movs	r1, #0
    3e40:	42b1      	cmp	r1, r6
    3e42:	da14      	bge.n	3e6e <mpu_configure_regions+0x36>
		if (regions[i].size == 0U) {
    3e44:	6844      	ldr	r4, [r0, #4]
    3e46:	2c00      	cmp	r4, #0
    3e48:	d045      	beq.n	3ed6 <mpu_configure_regions+0x9e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    3e4a:	b1c3      	cbz	r3, 3e7e <mpu_configure_regions+0x46>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    3e4c:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    3e50:	ea14 0f0c 	tst.w	r4, ip
    3e54:	d00d      	beq.n	3e72 <mpu_configure_regions+0x3a>
    3e56:	4a22      	ldr	r2, [pc, #136]	; (3ee0 <mpu_configure_regions+0xa8>)
    3e58:	4b22      	ldr	r3, [pc, #136]	; (3ee4 <mpu_configure_regions+0xac>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    3e5a:	4823      	ldr	r0, [pc, #140]	; (3ee8 <mpu_configure_regions+0xb0>)
    3e5c:	1ad2      	subs	r2, r2, r3
    3e5e:	08d2      	lsrs	r2, r2, #3
    3e60:	0192      	lsls	r2, r2, #6
    3e62:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    3e66:	f014 ffd1 	bl	18e0c <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    3e6a:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    3e6e:	4610      	mov	r0, r2
    3e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    3e72:	2c1f      	cmp	r4, #31
    3e74:	d9ef      	bls.n	3e56 <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    3e76:	6805      	ldr	r5, [r0, #0]
		&&
    3e78:	ea1c 0f05 	tst.w	ip, r5
    3e7c:	d1eb      	bne.n	3e56 <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    3e7e:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    3e80:	b2d5      	uxtb	r5, r2
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    3e82:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
    3e86:	6802      	ldr	r2, [r0, #0]
    3e88:	d916      	bls.n	3eb8 <mpu_configure_regions+0x80>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    3e8a:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    3e8e:	d815      	bhi.n	3ebc <mpu_configure_regions+0x84>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    3e90:	3c01      	subs	r4, #1
    3e92:	fab4 f484 	clz	r4, r4
    3e96:	f1c4 041f 	rsb	r4, r4, #31
    3e9a:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    3e9c:	2d07      	cmp	r5, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    3e9e:	ea4c 0404 	orr.w	r4, ip, r4
    3ea2:	d90d      	bls.n	3ec0 <mpu_configure_regions+0x88>
    3ea4:	4a0e      	ldr	r2, [pc, #56]	; (3ee0 <mpu_configure_regions+0xa8>)
    3ea6:	4b0f      	ldr	r3, [pc, #60]	; (3ee4 <mpu_configure_regions+0xac>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    3ea8:	4810      	ldr	r0, [pc, #64]	; (3eec <mpu_configure_regions+0xb4>)
    3eaa:	1ad2      	subs	r2, r2, r3
    3eac:	08d2      	lsrs	r2, r2, #3
    3eae:	0192      	lsls	r2, r2, #6
    3eb0:	f042 0201 	orr.w	r2, r2, #1
    3eb4:	4629      	mov	r1, r5
    3eb6:	e7d6      	b.n	3e66 <mpu_configure_regions+0x2e>
		return REGION_32B;
    3eb8:	2408      	movs	r4, #8
    3eba:	e7ef      	b.n	3e9c <mpu_configure_regions+0x64>
		return REGION_4G;
    3ebc:	243e      	movs	r4, #62	; 0x3e
    3ebe:	e7ed      	b.n	3e9c <mpu_configure_regions+0x64>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3ec0:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    3ec4:	432a      	orrs	r2, r5
    3ec6:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3eca:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    3ece:	60bd      	str	r5, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3ed0:	60fa      	str	r2, [r7, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3ed2:	613c      	str	r4, [r7, #16]
		reg_index++;
    3ed4:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
    3ed6:	3101      	adds	r1, #1
    3ed8:	300c      	adds	r0, #12
    3eda:	e7b1      	b.n	3e40 <mpu_configure_regions+0x8>
    3edc:	e000ed90 	.word	0xe000ed90
    3ee0:	0001e618 	.word	0x0001e618
    3ee4:	0001e408 	.word	0x0001e408
    3ee8:	0001f280 	.word	0x0001f280
    3eec:	0001f2a3 	.word	0x0001f2a3

00003ef0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    3ef0:	4b03      	ldr	r3, [pc, #12]	; (3f00 <arm_core_mpu_enable+0x10>)
    3ef2:	2205      	movs	r2, #5
    3ef4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    3ef6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3efa:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    3efe:	4770      	bx	lr
    3f00:	e000ed90 	.word	0xe000ed90

00003f04 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    3f04:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    3f08:	4b01      	ldr	r3, [pc, #4]	; (3f10 <arm_core_mpu_disable+0xc>)
    3f0a:	2200      	movs	r2, #0
    3f0c:	605a      	str	r2, [r3, #4]
}
    3f0e:	4770      	bx	lr
    3f10:	e000ed90 	.word	0xe000ed90

00003f14 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    3f14:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    3f16:	4c03      	ldr	r4, [pc, #12]	; (3f24 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    3f18:	2301      	movs	r3, #1
    3f1a:	7822      	ldrb	r2, [r4, #0]
    3f1c:	f7ff ff8c 	bl	3e38 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    3f20:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    3f22:	bd10      	pop	{r4, pc}
    3f24:	20002eb2 	.word	0x20002eb2

00003f28 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    3f28:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    3f2a:	4a08      	ldr	r2, [pc, #32]	; (3f4c <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
    3f2c:	2300      	movs	r3, #0
    3f2e:	7812      	ldrb	r2, [r2, #0]
    3f30:	f7ff ff82 	bl	3e38 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    3f34:	f110 0f16 	cmn.w	r0, #22
    3f38:	d003      	beq.n	3f42 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
    3f3a:	4b05      	ldr	r3, [pc, #20]	; (3f50 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
    3f3c:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    3f3e:	2807      	cmp	r0, #7
    3f40:	dd00      	ble.n	3f44 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    3f42:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    3f44:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    3f46:	611a      	str	r2, [r3, #16]
    3f48:	3001      	adds	r0, #1
    3f4a:	e7f8      	b.n	3f3e <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    3f4c:	20002eb2 	.word	0x20002eb2
    3f50:	e000ed90 	.word	0xe000ed90

00003f54 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    3f54:	4913      	ldr	r1, [pc, #76]	; (3fa4 <z_arm_mpu_init+0x50>)
    3f56:	6808      	ldr	r0, [r1, #0]
    3f58:	2808      	cmp	r0, #8
{
    3f5a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    3f5c:	d81e      	bhi.n	3f9c <z_arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    3f5e:	f7ff ffd1 	bl	3f04 <arm_core_mpu_disable>
	MPU->RNR = index;
    3f62:	4c11      	ldr	r4, [pc, #68]	; (3fa8 <z_arm_mpu_init+0x54>)
    3f64:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3f66:	2200      	movs	r2, #0
    3f68:	4290      	cmp	r0, r2
    3f6a:	f101 010c 	add.w	r1, r1, #12
    3f6e:	d105      	bne.n	3f7c <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    3f70:	4b0e      	ldr	r3, [pc, #56]	; (3fac <z_arm_mpu_init+0x58>)
    3f72:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    3f74:	f7ff ffbc 	bl	3ef0 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    3f78:	2000      	movs	r0, #0
}
    3f7a:	bd10      	pop	{r4, pc}
    3f7c:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3f7e:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    3f82:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    3f86:	4313      	orrs	r3, r2
    3f88:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3f8c:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3f8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
    3f92:	f043 0301 	orr.w	r3, r3, #1
    3f96:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3f98:	3201      	adds	r2, #1
    3f9a:	e7e5      	b.n	3f68 <z_arm_mpu_init+0x14>
		return -1;
    3f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3fa0:	e7eb      	b.n	3f7a <z_arm_mpu_init+0x26>
    3fa2:	bf00      	nop
    3fa4:	0001e7d0 	.word	0x0001e7d0
    3fa8:	e000ed90 	.word	0xe000ed90
    3fac:	20002eb2 	.word	0x20002eb2

00003fb0 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    3fb0:	4b01      	ldr	r3, [pc, #4]	; (3fb8 <__stdout_hook_install+0x8>)
    3fb2:	6018      	str	r0, [r3, #0]
}
    3fb4:	4770      	bx	lr
    3fb6:	bf00      	nop
    3fb8:	20000234 	.word	0x20000234

00003fbc <nordicsemi_nrf52_init>:
	__asm__ volatile(
    3fbc:	f04f 0320 	mov.w	r3, #32
    3fc0:	f3ef 8211 	mrs	r2, BASEPRI
    3fc4:	f383 8811 	msr	BASEPRI, r3
    3fc8:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    3fcc:	4906      	ldr	r1, [pc, #24]	; (3fe8 <nordicsemi_nrf52_init+0x2c>)
    3fce:	2301      	movs	r3, #1
    3fd0:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    3fd4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    3fd8:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    3fdc:	f382 8811 	msr	BASEPRI, r2
    3fe0:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    3fe4:	2000      	movs	r0, #0
    3fe6:	4770      	bx	lr
    3fe8:	4001e000 	.word	0x4001e000

00003fec <sys_arch_reboot>:
    *p_gpregret = val;
    3fec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3ff0:	b2c0      	uxtb	r0, r0
    3ff2:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    3ff6:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3ffa:	4905      	ldr	r1, [pc, #20]	; (4010 <sys_arch_reboot+0x24>)
    3ffc:	4b05      	ldr	r3, [pc, #20]	; (4014 <sys_arch_reboot+0x28>)
    3ffe:	68ca      	ldr	r2, [r1, #12]
    4000:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4004:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4006:	60cb      	str	r3, [r1, #12]
    4008:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    400c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    400e:	e7fd      	b.n	400c <sys_arch_reboot+0x20>
    4010:	e000ed00 	.word	0xe000ed00
    4014:	05fa0004 	.word	0x05fa0004

00004018 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    4018:	b120      	cbz	r0, 4024 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    401a:	4b03      	ldr	r3, [pc, #12]	; (4028 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    401c:	0180      	lsls	r0, r0, #6
    401e:	f043 0301 	orr.w	r3, r3, #1
    4022:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    4024:	4770      	bx	lr
    4026:	bf00      	nop
    4028:	0001e730 	.word	0x0001e730

0000402c <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    402c:	4b0e      	ldr	r3, [pc, #56]	; (4068 <bt_hex_real+0x3c>)
    402e:	2940      	cmp	r1, #64	; 0x40
{
    4030:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
    4032:	bf28      	it	cs
    4034:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    4036:	4c0d      	ldr	r4, [pc, #52]	; (406c <bt_hex_real+0x40>)
    4038:	1846      	adds	r6, r0, r1
    403a:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
    403c:	42b0      	cmp	r0, r6
    403e:	f103 0302 	add.w	r3, r3, #2
    4042:	d104      	bne.n	404e <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    4044:	2300      	movs	r3, #0
    4046:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    404a:	4807      	ldr	r0, [pc, #28]	; (4068 <bt_hex_real+0x3c>)
    404c:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    404e:	7802      	ldrb	r2, [r0, #0]
    4050:	0912      	lsrs	r2, r2, #4
    4052:	5ca2      	ldrb	r2, [r4, r2]
    4054:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    4058:	f810 2b01 	ldrb.w	r2, [r0], #1
    405c:	f002 020f 	and.w	r2, r2, #15
    4060:	5ca2      	ldrb	r2, [r4, r2]
    4062:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    4066:	e7e9      	b.n	403c <bt_hex_real+0x10>
    4068:	20002eb3 	.word	0x20002eb3
    406c:	0001f321 	.word	0x0001f321

00004070 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    4070:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    4072:	7803      	ldrb	r3, [r0, #0]
    4074:	b08b      	sub	sp, #44	; 0x2c
    4076:	4604      	mov	r4, r0
    4078:	ad07      	add	r5, sp, #28
    407a:	2b03      	cmp	r3, #3
    407c:	d821      	bhi.n	40c2 <bt_addr_le_str_real+0x52>
    407e:	e8df f003 	tbb	[pc, r3]
    4082:	1a02      	.short	0x1a02
    4084:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    4086:	4912      	ldr	r1, [pc, #72]	; (40d0 <bt_addr_le_str_real+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    4088:	4628      	mov	r0, r5
    408a:	f015 fd33 	bl	19af4 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    408e:	7863      	ldrb	r3, [r4, #1]
    4090:	9304      	str	r3, [sp, #16]
    4092:	78a3      	ldrb	r3, [r4, #2]
    4094:	9303      	str	r3, [sp, #12]
    4096:	78e3      	ldrb	r3, [r4, #3]
    4098:	9302      	str	r3, [sp, #8]
    409a:	7923      	ldrb	r3, [r4, #4]
    409c:	9301      	str	r3, [sp, #4]
    409e:	7963      	ldrb	r3, [r4, #5]
    40a0:	9300      	str	r3, [sp, #0]
    40a2:	4a0c      	ldr	r2, [pc, #48]	; (40d4 <bt_addr_le_str_real+0x64>)
    40a4:	79a3      	ldrb	r3, [r4, #6]
    40a6:	9505      	str	r5, [sp, #20]
    40a8:	211e      	movs	r1, #30
    40aa:	480b      	ldr	r0, [pc, #44]	; (40d8 <bt_addr_le_str_real+0x68>)
    40ac:	f014 fa69 	bl	18582 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    40b0:	4809      	ldr	r0, [pc, #36]	; (40d8 <bt_addr_le_str_real+0x68>)
    40b2:	b00b      	add	sp, #44	; 0x2c
    40b4:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    40b6:	4909      	ldr	r1, [pc, #36]	; (40dc <bt_addr_le_str_real+0x6c>)
    40b8:	e7e6      	b.n	4088 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    40ba:	4909      	ldr	r1, [pc, #36]	; (40e0 <bt_addr_le_str_real+0x70>)
    40bc:	e7e4      	b.n	4088 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    40be:	4909      	ldr	r1, [pc, #36]	; (40e4 <bt_addr_le_str_real+0x74>)
    40c0:	e7e2      	b.n	4088 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    40c2:	4a09      	ldr	r2, [pc, #36]	; (40e8 <bt_addr_le_str_real+0x78>)
    40c4:	210a      	movs	r1, #10
    40c6:	4628      	mov	r0, r5
    40c8:	f014 fa5b 	bl	18582 <snprintk>
		break;
    40cc:	e7df      	b.n	408e <bt_addr_le_str_real+0x1e>
    40ce:	bf00      	nop
    40d0:	0001f2dc 	.word	0x0001f2dc
    40d4:	0001f2fe 	.word	0x0001f2fe
    40d8:	20002f34 	.word	0x20002f34
    40dc:	0001f2e3 	.word	0x0001f2e3
    40e0:	0001f2ea 	.word	0x0001f2ea
    40e4:	0001f2f4 	.word	0x0001f2f4
    40e8:	0002151d 	.word	0x0002151d

000040ec <le_gen_dhkey>:
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
}

static uint8_t le_gen_dhkey(uint8_t *key, uint8_t key_type)
{
    40ec:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    40ee:	4c21      	ldr	r4, [pc, #132]	; (4174 <le_gen_dhkey+0x88>)
    40f0:	f3bf 8f5b 	dmb	ish
    40f4:	6823      	ldr	r3, [r4, #0]
    40f6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    40fa:	07da      	lsls	r2, r3, #31
{
    40fc:	4606      	mov	r6, r0
    40fe:	460d      	mov	r5, r1
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    4100:	d501      	bpl.n	4106 <le_gen_dhkey+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
    4102:	200c      	movs	r0, #12
			  key_type == BT_HCI_LE_KEY_TYPE_DEBUG);

	k_sem_give(&cmd_sem);

	return BT_HCI_ERR_SUCCESS;
}
    4104:	bd70      	pop	{r4, r5, r6, pc}
	if (key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
    4106:	2901      	cmp	r1, #1
    4108:	d831      	bhi.n	416e <le_gen_dhkey+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    410a:	f3bf 8f5b 	dmb	ish
    410e:	e854 3f00 	ldrex	r3, [r4]
    4112:	f043 0202 	orr.w	r2, r3, #2
    4116:	e844 2100 	strex	r1, r2, [r4]
    411a:	2900      	cmp	r1, #0
    411c:	d1f7      	bne.n	410e <le_gen_dhkey+0x22>
    411e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
    4122:	079b      	lsls	r3, r3, #30
    4124:	d4ed      	bmi.n	4102 <le_gen_dhkey+0x16>
	sys_memcpy_swap(ecc.public_key_be, key, 32);
    4126:	4814      	ldr	r0, [pc, #80]	; (4178 <le_gen_dhkey+0x8c>)
    4128:	4631      	mov	r1, r6
    412a:	f015 fdd0 	bl	19cce <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.public_key_be[32], &key[32], 32);
    412e:	4813      	ldr	r0, [pc, #76]	; (417c <le_gen_dhkey+0x90>)
    4130:	f106 0120 	add.w	r1, r6, #32
    4134:	f015 fdcb 	bl	19cce <sys_memcpy_swap.constprop.0>
    4138:	f3bf 8f5b 	dmb	ish
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
    413c:	b175      	cbz	r5, 415c <le_gen_dhkey+0x70>
    413e:	e854 3f00 	ldrex	r3, [r4]
    4142:	f043 0304 	orr.w	r3, r3, #4
    4146:	e844 3200 	strex	r2, r3, [r4]
    414a:	2a00      	cmp	r2, #0
    414c:	d1f7      	bne.n	413e <le_gen_dhkey+0x52>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    414e:	f3bf 8f5b 	dmb	ish
	z_impl_k_sem_give(sem);
    4152:	480b      	ldr	r0, [pc, #44]	; (4180 <le_gen_dhkey+0x94>)
    4154:	f013 f93a 	bl	173cc <z_impl_k_sem_give>
    4158:	2000      	movs	r0, #0
    415a:	e7d3      	b.n	4104 <le_gen_dhkey+0x18>
    415c:	e854 3f00 	ldrex	r3, [r4]
    4160:	f023 0304 	bic.w	r3, r3, #4
    4164:	e844 3200 	strex	r2, r3, [r4]
    4168:	2a00      	cmp	r2, #0
    416a:	d0f0      	beq.n	414e <le_gen_dhkey+0x62>
    416c:	e7f6      	b.n	415c <le_gen_dhkey+0x70>
		return BT_HCI_ERR_INVALID_PARAM;
    416e:	2012      	movs	r0, #18
    4170:	e7c8      	b.n	4104 <le_gen_dhkey+0x18>
    4172:	bf00      	nop
    4174:	200019a0 	.word	0x200019a0
    4178:	20002f72 	.word	0x20002f72
    417c:	20002f92 	.word	0x20002f92
    4180:	20000b8c 	.word	0x20000b8c

00004184 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
    4184:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    4186:	7d06      	ldrb	r6, [r0, #20]
    4188:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
    418a:	b976      	cbnz	r6, 41aa <bt_hci_ecc_send+0x26>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
    418c:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
    418e:	881d      	ldrh	r5, [r3, #0]
    4190:	f242 0226 	movw	r2, #8230	; 0x2026
    4194:	4295      	cmp	r5, r2
    4196:	d045      	beq.n	4224 <bt_hci_ecc_send+0xa0>
    4198:	d80f      	bhi.n	41ba <bt_hci_ecc_send+0x36>
    419a:	f242 0201 	movw	r2, #8193	; 0x2001
    419e:	4295      	cmp	r5, r2
    41a0:	d04f      	beq.n	4242 <bt_hci_ecc_send+0xbe>
    41a2:	f242 0325 	movw	r3, #8229	; 0x2025
    41a6:	429d      	cmp	r5, r3
    41a8:	d013      	beq.n	41d2 <bt_hci_ecc_send+0x4e>
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
    41aa:	4b2a      	ldr	r3, [pc, #168]	; (4254 <bt_hci_ecc_send+0xd0>)
    41ac:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    41b0:	4620      	mov	r0, r4
    41b2:	691b      	ldr	r3, [r3, #16]
}
    41b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
    41b8:	4718      	bx	r3
		switch (sys_le16_to_cpu(chdr->opcode)) {
    41ba:	f242 035e 	movw	r3, #8286	; 0x205e
    41be:	429d      	cmp	r5, r3
    41c0:	d1f3      	bne.n	41aa <bt_hci_ecc_send+0x26>
 *
 * @return New beginning of the buffer data.
 */
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull(&buf->b, len);
    41c2:	2103      	movs	r1, #3
    41c4:	3008      	adds	r0, #8
    41c6:	f019 f8d7 	bl	1d378 <net_buf_simple_pull>
	cmd = (void *)buf->data;
    41ca:	68a0      	ldr	r0, [r4, #8]
	status = le_gen_dhkey(cmd->key, cmd->key_type);
    41cc:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    41d0:	e02e      	b.n	4230 <bt_hci_ecc_send+0xac>
    41d2:	2103      	movs	r1, #3
    41d4:	3008      	adds	r0, #8
    41d6:	f019 f8cf 	bl	1d378 <net_buf_simple_pull>
	net_buf_unref(buf);
    41da:	4620      	mov	r0, r4
    41dc:	f011 fabe 	bl	1575c <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    41e0:	f3bf 8f5b 	dmb	ish
    41e4:	4b1c      	ldr	r3, [pc, #112]	; (4258 <bt_hci_ecc_send+0xd4>)
    41e6:	681a      	ldr	r2, [r3, #0]
    41e8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
    41ec:	0792      	lsls	r2, r2, #30
    41ee:	d507      	bpl.n	4200 <bt_hci_ecc_send+0x7c>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    41f0:	260c      	movs	r6, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
    41f2:	4631      	mov	r1, r6
    41f4:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
    41f8:	f015 fd45 	bl	19c86 <send_cmd_status>
}
    41fc:	2000      	movs	r0, #0
    41fe:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4200:	f3bf 8f5b 	dmb	ish
    4204:	e853 2f00 	ldrex	r2, [r3]
    4208:	f042 0101 	orr.w	r1, r2, #1
    420c:	e843 1000 	strex	r0, r1, [r3]
    4210:	2800      	cmp	r0, #0
    4212:	d1f7      	bne.n	4204 <bt_hci_ecc_send+0x80>
    4214:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
    4218:	07d3      	lsls	r3, r2, #31
    421a:	d4e9      	bmi.n	41f0 <bt_hci_ecc_send+0x6c>
    421c:	480f      	ldr	r0, [pc, #60]	; (425c <bt_hci_ecc_send+0xd8>)
    421e:	f013 f8d5 	bl	173cc <z_impl_k_sem_give>
}
    4222:	e7e6      	b.n	41f2 <bt_hci_ecc_send+0x6e>
    4224:	2103      	movs	r1, #3
    4226:	3008      	adds	r0, #8
    4228:	f019 f8a6 	bl	1d378 <net_buf_simple_pull>
	status = le_gen_dhkey(cmd->key, BT_HCI_LE_KEY_TYPE_GENERATED);
    422c:	68a0      	ldr	r0, [r4, #8]
    422e:	4631      	mov	r1, r6
	status = le_gen_dhkey(cmd->key, cmd->key_type);
    4230:	f7ff ff5c 	bl	40ec <le_gen_dhkey>
    4234:	4606      	mov	r6, r0
	net_buf_unref(buf);
    4236:	4620      	mov	r0, r4
    4238:	f011 fa90 	bl	1575c <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
    423c:	4631      	mov	r1, r6
    423e:	4628      	mov	r0, r5
    4240:	e7da      	b.n	41f8 <bt_hci_ecc_send+0x74>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
    4242:	78da      	ldrb	r2, [r3, #3]
    4244:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    4248:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
    424a:	791a      	ldrb	r2, [r3, #4]
    424c:	f022 0201 	bic.w	r2, r2, #1
    4250:	711a      	strb	r2, [r3, #4]
}
    4252:	e7aa      	b.n	41aa <bt_hci_ecc_send+0x26>
    4254:	20000000 	.word	0x20000000
    4258:	200019a0 	.word	0x200019a0
    425c:	20000b8c 	.word	0x20000b8c

00004260 <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
    4260:	b510      	push	{r4, lr}
    4262:	4b0d      	ldr	r3, [pc, #52]	; (4298 <save_id+0x38>)
    4264:	4c0d      	ldr	r4, [pc, #52]	; (429c <save_id+0x3c>)
	int err;
	BT_INFO("Saving ID");
    4266:	480e      	ldr	r0, [pc, #56]	; (42a0 <save_id+0x40>)
    4268:	1ae4      	subs	r4, r4, r3
    426a:	08e4      	lsrs	r4, r4, #3
    426c:	01a4      	lsls	r4, r4, #6
    426e:	f044 0103 	orr.w	r1, r4, #3
    4272:	f014 fdbe 	bl	18df2 <log_0>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
    4276:	490b      	ldr	r1, [pc, #44]	; (42a4 <save_id+0x44>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
    4278:	480b      	ldr	r0, [pc, #44]	; (42a8 <save_id+0x48>)
    427a:	79ca      	ldrb	r2, [r1, #7]
    427c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    4280:	f7fe fcd0 	bl	2c24 <settings_save_one>
	if (err) {
    4284:	4601      	mov	r1, r0
    4286:	b130      	cbz	r0, 4296 <save_id+0x36>
		BT_ERR("Failed to save ID (err %d)", err);
    4288:	f044 0201 	orr.w	r2, r4, #1
    428c:	4807      	ldr	r0, [pc, #28]	; (42ac <save_id+0x4c>)
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		BT_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
    428e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Failed to save ID (err %d)", err);
    4292:	f014 bdbb 	b.w	18e0c <log_1>
}
    4296:	bd10      	pop	{r4, pc}
    4298:	0001e408 	.word	0x0001e408
    429c:	0001e5e0 	.word	0x0001e5e0
    42a0:	0001f33d 	.word	0x0001f33d
    42a4:	20000000 	.word	0x20000000
    42a8:	0001f347 	.word	0x0001f347
    42ac:	0001f34d 	.word	0x0001f34d

000042b0 <set>:
{
    42b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    42b2:	4616      	mov	r6, r2
    42b4:	461f      	mov	r7, r3
	if (!name) {
    42b6:	4604      	mov	r4, r0
    42b8:	b960      	cbnz	r0, 42d4 <set+0x24>
    42ba:	4925      	ldr	r1, [pc, #148]	; (4350 <set+0xa0>)
    42bc:	4b25      	ldr	r3, [pc, #148]	; (4354 <set+0xa4>)
		BT_ERR("Insufficient number of arguments");
    42be:	4826      	ldr	r0, [pc, #152]	; (4358 <set+0xa8>)
    42c0:	1ac9      	subs	r1, r1, r3
    42c2:	08c9      	lsrs	r1, r1, #3
    42c4:	0189      	lsls	r1, r1, #6
    42c6:	f041 0101 	orr.w	r1, r1, #1
    42ca:	f014 fd92 	bl	18df2 <log_0>
	return -ENOENT;
    42ce:	f06f 0401 	mvn.w	r4, #1
    42d2:	e01c      	b.n	430e <set+0x5e>
	len = settings_name_next(name, &next);
    42d4:	a901      	add	r1, sp, #4
    42d6:	f015 f906 	bl	194e6 <settings_name_next>
	if (!strncmp(name, "id", len)) {
    42da:	4920      	ldr	r1, [pc, #128]	; (435c <set+0xac>)
	len = settings_name_next(name, &next);
    42dc:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
    42de:	4620      	mov	r0, r4
    42e0:	f015 fc41 	bl	19b66 <strncmp>
    42e4:	4604      	mov	r4, r0
    42e6:	2800      	cmp	r0, #0
    42e8:	d1f1      	bne.n	42ce <set+0x1e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    42ea:	f3bf 8f5b 	dmb	ish
    42ee:	4d1c      	ldr	r5, [pc, #112]	; (4360 <set+0xb0>)
    42f0:	682b      	ldr	r3, [r5, #0]
    42f2:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
    42f6:	075b      	lsls	r3, r3, #29
    42f8:	d50c      	bpl.n	4314 <set+0x64>
    42fa:	4915      	ldr	r1, [pc, #84]	; (4350 <set+0xa0>)
    42fc:	4b15      	ldr	r3, [pc, #84]	; (4354 <set+0xa4>)
			BT_WARN("Ignoring identities stored in flash");
    42fe:	4819      	ldr	r0, [pc, #100]	; (4364 <set+0xb4>)
    4300:	1ac9      	subs	r1, r1, r3
    4302:	08c9      	lsrs	r1, r1, #3
    4304:	0189      	lsls	r1, r1, #6
    4306:	f041 0102 	orr.w	r1, r1, #2
    430a:	f014 fd72 	bl	18df2 <log_0>
}
    430e:	4620      	mov	r0, r4
    4310:	b003      	add	sp, #12
    4312:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
    4314:	3d98      	subs	r5, #152	; 0x98
    4316:	2207      	movs	r2, #7
    4318:	4629      	mov	r1, r5
    431a:	4638      	mov	r0, r7
    431c:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
    431e:	2806      	cmp	r0, #6
    4320:	d810      	bhi.n	4344 <set+0x94>
    4322:	4b0c      	ldr	r3, [pc, #48]	; (4354 <set+0xa4>)
    4324:	490a      	ldr	r1, [pc, #40]	; (4350 <set+0xa0>)
				BT_ERR("Invalid length ID address in storage");
    4326:	4810      	ldr	r0, [pc, #64]	; (4368 <set+0xb8>)
    4328:	1ac9      	subs	r1, r1, r3
    432a:	08c9      	lsrs	r1, r1, #3
    432c:	0189      	lsls	r1, r1, #6
    432e:	f041 0101 	orr.w	r1, r1, #1
    4332:	f014 fd5e 	bl	18df2 <log_0>
			(void)memset(bt_dev.id_addr, 0,
    4336:	2207      	movs	r2, #7
    4338:	4621      	mov	r1, r4
    433a:	4628      	mov	r0, r5
    433c:	f015 fc5d 	bl	19bfa <memset>
			bt_dev.id_count = 0U;
    4340:	71ec      	strb	r4, [r5, #7]
    4342:	e7e4      	b.n	430e <set+0x5e>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
    4344:	2307      	movs	r3, #7
    4346:	fbb0 f0f3 	udiv	r0, r0, r3
    434a:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
    434c:	e7df      	b.n	430e <set+0x5e>
    434e:	bf00      	nop
    4350:	0001e5e0 	.word	0x0001e5e0
    4354:	0001e408 	.word	0x0001e408
    4358:	0001f368 	.word	0x0001f368
    435c:	0001f2f1 	.word	0x0001f2f1
    4360:	20000098 	.word	0x20000098
    4364:	0001f389 	.word	0x0001f389
    4368:	0001f3ad 	.word	0x0001f3ad

0000436c <bt_settings_encode_key>:
{
    436c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4370:	b088      	sub	sp, #32
    4372:	799c      	ldrb	r4, [r3, #6]
    4374:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    4378:	795d      	ldrb	r5, [r3, #5]
    437a:	791e      	ldrb	r6, [r3, #4]
    437c:	78df      	ldrb	r7, [r3, #3]
    437e:	f893 c002 	ldrb.w	ip, [r3, #2]
    4382:	f893 e001 	ldrb.w	lr, [r3, #1]
    4386:	781b      	ldrb	r3, [r3, #0]
	if (key) {
    4388:	f1b8 0f00 	cmp.w	r8, #0
    438c:	d00e      	beq.n	43ac <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
    438e:	e9cd 3806 	strd	r3, r8, [sp, #24]
    4392:	e9cd ce04 	strd	ip, lr, [sp, #16]
    4396:	4613      	mov	r3, r2
    4398:	e9cd 6702 	strd	r6, r7, [sp, #8]
    439c:	e9cd 4500 	strd	r4, r5, [sp]
    43a0:	4a08      	ldr	r2, [pc, #32]	; (43c4 <bt_settings_encode_key+0x58>)
    43a2:	f014 f8ee 	bl	18582 <snprintk>
}
    43a6:	b008      	add	sp, #32
    43a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
    43ac:	e9cd e305 	strd	lr, r3, [sp, #20]
    43b0:	e9cd 7c03 	strd	r7, ip, [sp, #12]
    43b4:	4613      	mov	r3, r2
    43b6:	e9cd 5601 	strd	r5, r6, [sp, #4]
    43ba:	4a03      	ldr	r2, [pc, #12]	; (43c8 <bt_settings_encode_key+0x5c>)
    43bc:	9400      	str	r4, [sp, #0]
    43be:	f014 f8e0 	bl	18582 <snprintk>
}
    43c2:	e7f0      	b.n	43a6 <bt_settings_encode_key+0x3a>
    43c4:	0001f3d2 	.word	0x0001f3d2
    43c8:	0001f3f6 	.word	0x0001f3f6

000043cc <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
    43cc:	4801      	ldr	r0, [pc, #4]	; (43d4 <bt_settings_save_id+0x8>)
    43ce:	f013 b973 	b.w	176b8 <k_work_submit>
    43d2:	bf00      	nop
    43d4:	20000238 	.word	0x20000238

000043d8 <commit>:
}

static int commit(void)
{
    43d8:	b538      	push	{r3, r4, r5, lr}
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
    43da:	4c1a      	ldr	r4, [pc, #104]	; (4444 <commit+0x6c>)
    43dc:	79e3      	ldrb	r3, [r4, #7]
    43de:	b99b      	cbnz	r3, 4408 <commit+0x30>
		bt_setup_public_id_addr();
    43e0:	f001 fb5c 	bl	5a9c <bt_setup_public_id_addr>
	}

	if (!bt_dev.id_count) {
    43e4:	79e3      	ldrb	r3, [r4, #7]
    43e6:	b97b      	cbnz	r3, 4408 <commit+0x30>
		int err;

		err = bt_setup_random_id_addr();
    43e8:	f001 fbc2 	bl	5b70 <bt_setup_random_id_addr>
		if (err) {
    43ec:	4604      	mov	r4, r0
    43ee:	b158      	cbz	r0, 4408 <commit+0x30>
    43f0:	4915      	ldr	r1, [pc, #84]	; (4448 <commit+0x70>)
    43f2:	4b16      	ldr	r3, [pc, #88]	; (444c <commit+0x74>)
			BT_ERR("Unable to setup an identity address");
    43f4:	4816      	ldr	r0, [pc, #88]	; (4450 <commit+0x78>)
    43f6:	1ac9      	subs	r1, r1, r3
    43f8:	08c9      	lsrs	r1, r1, #3
    43fa:	0189      	lsls	r1, r1, #6
    43fc:	f041 0101 	orr.w	r1, r1, #1
    4400:	f014 fcf7 	bl	18df2 <log_0>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
    4404:	4620      	mov	r0, r4
    4406:	bd38      	pop	{r3, r4, r5, pc}
    4408:	4d12      	ldr	r5, [pc, #72]	; (4454 <commit+0x7c>)
    440a:	f3bf 8f5b 	dmb	ish
    440e:	682b      	ldr	r3, [r5, #0]
    4410:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    4414:	079b      	lsls	r3, r3, #30
    4416:	d401      	bmi.n	441c <commit+0x44>
		bt_finalize_init();
    4418:	f000 ff76 	bl	5308 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    441c:	f3bf 8f5b 	dmb	ish
    4420:	e855 4f00 	ldrex	r4, [r5]
    4424:	f424 4380 	bic.w	r3, r4, #16384	; 0x4000
    4428:	e845 3200 	strex	r2, r3, [r5]
    442c:	2a00      	cmp	r2, #0
    442e:	d1f7      	bne.n	4420 <commit+0x48>
    4430:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
    4434:	f414 4480 	ands.w	r4, r4, #16384	; 0x4000
    4438:	d0e4      	beq.n	4404 <commit+0x2c>
		bt_settings_save_id();
    443a:	f7ff ffc7 	bl	43cc <bt_settings_save_id>
	return 0;
    443e:	2400      	movs	r4, #0
    4440:	e7e0      	b.n	4404 <commit+0x2c>
    4442:	bf00      	nop
    4444:	20000000 	.word	0x20000000
    4448:	0001e5e0 	.word	0x0001e5e0
    444c:	0001e408 	.word	0x0001e408
    4450:	0001f417 	.word	0x0001f417
    4454:	20000098 	.word	0x20000098

00004458 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    4458:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    445a:	7802      	ldrb	r2, [r0, #0]
    445c:	2a01      	cmp	r2, #1
{
    445e:	4604      	mov	r4, r0
    4460:	460b      	mov	r3, r1
	switch (src->type) {
    4462:	d016      	beq.n	4492 <uuid_to_uuid128+0x3a>
    4464:	2a02      	cmp	r2, #2
    4466:	d02c      	beq.n	44c2 <uuid_to_uuid128+0x6a>
    4468:	b98a      	cbnz	r2, 448e <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    446a:	4a19      	ldr	r2, [pc, #100]	; (44d0 <uuid_to_uuid128+0x78>)
    446c:	460d      	mov	r5, r1
    446e:	f102 0710 	add.w	r7, r2, #16
    4472:	6810      	ldr	r0, [r2, #0]
    4474:	6851      	ldr	r1, [r2, #4]
    4476:	462e      	mov	r6, r5
    4478:	c603      	stmia	r6!, {r0, r1}
    447a:	3208      	adds	r2, #8
    447c:	42ba      	cmp	r2, r7
    447e:	4635      	mov	r5, r6
    4480:	d1f7      	bne.n	4472 <uuid_to_uuid128+0x1a>
    4482:	7812      	ldrb	r2, [r2, #0]
    4484:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    4486:	8862      	ldrh	r2, [r4, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    4488:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    448a:	0a12      	lsrs	r2, r2, #8
    448c:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    448e:	bcf0      	pop	{r4, r5, r6, r7}
    4490:	4770      	bx	lr
		*dst = uuid128_base;
    4492:	4a0f      	ldr	r2, [pc, #60]	; (44d0 <uuid_to_uuid128+0x78>)
    4494:	460d      	mov	r5, r1
    4496:	f102 0710 	add.w	r7, r2, #16
    449a:	6810      	ldr	r0, [r2, #0]
    449c:	6851      	ldr	r1, [r2, #4]
    449e:	462e      	mov	r6, r5
    44a0:	c603      	stmia	r6!, {r0, r1}
    44a2:	3208      	adds	r2, #8
    44a4:	42ba      	cmp	r2, r7
    44a6:	4635      	mov	r5, r6
    44a8:	d1f7      	bne.n	449a <uuid_to_uuid128+0x42>
    44aa:	7812      	ldrb	r2, [r2, #0]
    44ac:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    44ae:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    44b0:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    44b2:	f3c2 2107 	ubfx	r1, r2, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    44b6:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    44b8:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    44ba:	0a12      	lsrs	r2, r2, #8
    44bc:	7399      	strb	r1, [r3, #14]
    44be:	741a      	strb	r2, [r3, #16]
}
    44c0:	e7e5      	b.n	448e <uuid_to_uuid128+0x36>
		memcpy(dst, src, sizeof(*dst));
    44c2:	4601      	mov	r1, r0
}
    44c4:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    44c6:	2211      	movs	r2, #17
    44c8:	4618      	mov	r0, r3
    44ca:	f015 bb6b 	b.w	19ba4 <memcpy>
    44ce:	bf00      	nop
    44d0:	0001f455 	.word	0x0001f455

000044d4 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    44d4:	b538      	push	{r3, r4, r5, lr}
    44d6:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
    44d8:	4805      	ldr	r0, [pc, #20]	; (44f0 <bt_buf_get_rx+0x1c>)
    44da:	f018 fe6b 	bl	1d1b4 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    44de:	4604      	mov	r4, r0
    44e0:	b120      	cbz	r0, 44ec <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
    44e2:	2100      	movs	r1, #0
    44e4:	3008      	adds	r0, #8
    44e6:	f018 fe8a 	bl	1d1fe <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    44ea:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    44ec:	4620      	mov	r0, r4
    44ee:	bd38      	pop	{r3, r4, r5, pc}
    44f0:	20000ce4 	.word	0x20000ce4

000044f4 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    44f4:	b570      	push	{r4, r5, r6, lr}
    44f6:	4602      	mov	r2, r0
    44f8:	460b      	mov	r3, r1
	__asm__ volatile(
    44fa:	f04f 0120 	mov.w	r1, #32
    44fe:	f3ef 8511 	mrs	r5, BASEPRI
    4502:	f381 8811 	msr	BASEPRI, r1
    4506:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    450a:	480c      	ldr	r0, [pc, #48]	; (453c <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
    450c:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
    450e:	f8d0 4100 	ldr.w	r4, [r0, #256]	; 0x100
	bt_dev.sent_cmd = NULL;
    4512:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
	__asm__ volatile(
    4516:	f385 8811 	msr	BASEPRI, r5
    451a:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    451e:	b924      	cbnz	r4, 452a <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    4520:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    4524:	2001      	movs	r0, #1
    4526:	f7ff bfd5 	b.w	44d4 <bt_buf_get_rx>
    452a:	2301      	movs	r3, #1
    452c:	f104 0008 	add.w	r0, r4, #8
    4530:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
    4532:	81a1      	strh	r1, [r4, #12]
    4534:	f018 fe63 	bl	1d1fe <net_buf_simple_reserve>
}
    4538:	4620      	mov	r0, r4
    453a:	bd70      	pop	{r4, r5, r6, pc}
    453c:	20000000 	.word	0x20000000

00004540 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    4540:	b570      	push	{r4, r5, r6, lr}
    4542:	4604      	mov	r4, r0
	switch (evt) {
    4544:	2c0f      	cmp	r4, #15
{
    4546:	460d      	mov	r5, r1
    4548:	4610      	mov	r0, r2
    454a:	4619      	mov	r1, r3
	switch (evt) {
    454c:	d805      	bhi.n	455a <bt_buf_get_evt+0x1a>
    454e:	2c0d      	cmp	r4, #13
    4550:	d912      	bls.n	4578 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    4552:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    4556:	f7ff bfcd 	b.w	44f4 <bt_buf_get_cmd_complete>
	switch (evt) {
    455a:	2c13      	cmp	r4, #19
    455c:	d10c      	bne.n	4578 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    455e:	480b      	ldr	r0, [pc, #44]	; (458c <bt_buf_get_evt+0x4c>)
    4560:	f018 fe28 	bl	1d1b4 <net_buf_alloc_fixed>
			if (buf) {
    4564:	4604      	mov	r4, r0
    4566:	b128      	cbz	r0, 4574 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
    4568:	2100      	movs	r1, #0
    456a:	3008      	adds	r0, #8
    456c:	f018 fe47 	bl	1d1fe <net_buf_simple_reserve>
    4570:	2301      	movs	r3, #1
    4572:	7523      	strb	r3, [r4, #20]
}
    4574:	4620      	mov	r0, r4
    4576:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
    4578:	4602      	mov	r2, r0
    457a:	460b      	mov	r3, r1
		if (discardable) {
    457c:	b10d      	cbz	r5, 4582 <bt_buf_get_evt+0x42>
    457e:	4804      	ldr	r0, [pc, #16]	; (4590 <bt_buf_get_evt+0x50>)
    4580:	e7ee      	b.n	4560 <bt_buf_get_evt+0x20>
}
    4582:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    4586:	2001      	movs	r0, #1
    4588:	f7ff bfa4 	b.w	44d4 <bt_buf_get_rx>
    458c:	20000d34 	.word	0x20000d34
    4590:	20000c6c 	.word	0x20000c6c

00004594 <ver_str>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(uint8_t ver)
{
    4594:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    4596:	4d0b      	ldr	r5, [pc, #44]	; (45c4 <ver_str+0x30>)
{
    4598:	4606      	mov	r6, r0
	const char * const str[] = {
    459a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    459c:	b08c      	sub	sp, #48	; 0x30
	const char * const str[] = {
    459e:	466c      	mov	r4, sp
    45a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    45a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    45a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    45a6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    45aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0", "5.1", "5.2"
	};

	if (ver < ARRAY_SIZE(str)) {
    45ae:	2e0b      	cmp	r6, #11
		return str[ver];
    45b0:	bf9b      	ittet	ls
    45b2:	ab0c      	addls	r3, sp, #48	; 0x30
    45b4:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
    45b8:	4803      	ldrhi	r0, [pc, #12]	; (45c8 <ver_str+0x34>)
		return str[ver];
    45ba:	f856 0c30 	ldrls.w	r0, [r6, #-48]
}
    45be:	b00c      	add	sp, #48	; 0x30
    45c0:	bd70      	pop	{r4, r5, r6, pc}
    45c2:	bf00      	nop
    45c4:	0001e6cc 	.word	0x0001e6cc
    45c8:	0001f558 	.word	0x0001f558

000045cc <hci_data_buf_overflow>:
    45cc:	4905      	ldr	r1, [pc, #20]	; (45e4 <hci_data_buf_overflow+0x18>)
    45ce:	4a06      	ldr	r2, [pc, #24]	; (45e8 <hci_data_buf_overflow+0x1c>)
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
    45d0:	6883      	ldr	r3, [r0, #8]
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    45d2:	4806      	ldr	r0, [pc, #24]	; (45ec <hci_data_buf_overflow+0x20>)
    45d4:	1a52      	subs	r2, r2, r1
    45d6:	08d2      	lsrs	r2, r2, #3
    45d8:	0192      	lsls	r2, r2, #6
    45da:	7819      	ldrb	r1, [r3, #0]
    45dc:	f042 0202 	orr.w	r2, r2, #2
    45e0:	f014 bc14 	b.w	18e0c <log_1>
    45e4:	0001e408 	.word	0x0001e408
    45e8:	0001e4f8 	.word	0x0001e4f8
    45ec:	0001f560 	.word	0x0001f560

000045f0 <hci_disconn_complete_prio>:
{
    45f0:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    45f2:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
    45f4:	781a      	ldrb	r2, [r3, #0]
    45f6:	b972      	cbnz	r2, 4616 <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    45f8:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    45fc:	4620      	mov	r0, r4
    45fe:	f001 ff5b 	bl	64b8 <bt_conn_lookup_handle>
	if (!conn) {
    4602:	4605      	mov	r5, r0
    4604:	b940      	cbnz	r0, 4618 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
    4606:	4b08      	ldr	r3, [pc, #32]	; (4628 <hci_disconn_complete_prio+0x38>)
    4608:	881a      	ldrh	r2, [r3, #0]
    460a:	b922      	cbnz	r2, 4616 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
    460c:	ea6f 5004 	mvn.w	r0, r4, lsl #20
    4610:	ea6f 5010 	mvn.w	r0, r0, lsr #20
    4614:	8018      	strh	r0, [r3, #0]
}
    4616:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    4618:	2101      	movs	r1, #1
    461a:	f001 ff59 	bl	64d0 <bt_conn_set_state>
	bt_conn_unref(conn);
    461e:	4628      	mov	r0, r5
}
    4620:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    4624:	f015 bf7f 	b.w	1a526 <bt_conn_unref>
    4628:	20002e40 	.word	0x20002e40

0000462c <hci_disconn_complete>:
{
    462c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    462e:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    4630:	7835      	ldrb	r5, [r6, #0]
    4632:	b9f5      	cbnz	r5, 4672 <hci_disconn_complete+0x46>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    4634:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    4638:	4638      	mov	r0, r7
    463a:	f001 ff3d 	bl	64b8 <bt_conn_lookup_handle>
	if (!conn) {
    463e:	4604      	mov	r4, r0
    4640:	b960      	cbnz	r0, 465c <hci_disconn_complete+0x30>
    4642:	4b0c      	ldr	r3, [pc, #48]	; (4674 <hci_disconn_complete+0x48>)
    4644:	4a0c      	ldr	r2, [pc, #48]	; (4678 <hci_disconn_complete+0x4c>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    4646:	480d      	ldr	r0, [pc, #52]	; (467c <hci_disconn_complete+0x50>)
    4648:	1ad2      	subs	r2, r2, r3
    464a:	08d2      	lsrs	r2, r2, #3
    464c:	0192      	lsls	r2, r2, #6
    464e:	4639      	mov	r1, r7
    4650:	f042 0201 	orr.w	r2, r2, #1
}
    4654:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    4658:	f014 bbd8 	b.w	18e0c <log_1>
	conn->err = evt->reason;
    465c:	78f3      	ldrb	r3, [r6, #3]
    465e:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4660:	4629      	mov	r1, r5
    4662:	f001 ff35 	bl	64d0 <bt_conn_set_state>
	conn->handle = 0U;
    4666:	8025      	strh	r5, [r4, #0]
		bt_conn_unref(conn);
    4668:	4620      	mov	r0, r4
}
    466a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    466e:	f015 bf5a 	b.w	1a526 <bt_conn_unref>
}
    4672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4674:	0001e408 	.word	0x0001e408
    4678:	0001e4f8 	.word	0x0001e4f8
    467c:	0001f588 	.word	0x0001f588

00004680 <hci_hardware_error>:
{
    4680:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    4682:	2101      	movs	r1, #1
    4684:	3008      	adds	r0, #8
    4686:	f018 fe7f 	bl	1d388 <net_buf_simple_pull_mem>
    468a:	4b06      	ldr	r3, [pc, #24]	; (46a4 <hci_hardware_error+0x24>)
    468c:	4a06      	ldr	r2, [pc, #24]	; (46a8 <hci_hardware_error+0x28>)
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    468e:	7801      	ldrb	r1, [r0, #0]
    4690:	4806      	ldr	r0, [pc, #24]	; (46ac <hci_hardware_error+0x2c>)
    4692:	1ad2      	subs	r2, r2, r3
    4694:	08d2      	lsrs	r2, r2, #3
    4696:	0192      	lsls	r2, r2, #6
}
    4698:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    469c:	f042 0201 	orr.w	r2, r2, #1
    46a0:	f014 bbb4 	b.w	18e0c <log_1>
    46a4:	0001e408 	.word	0x0001e408
    46a8:	0001e4f8 	.word	0x0001e4f8
    46ac:	0001f5ae 	.word	0x0001f5ae

000046b0 <hci_vendor_event>:
{
    46b0:	b510      	push	{r4, lr}
    46b2:	4a0a      	ldr	r2, [pc, #40]	; (46dc <hci_vendor_event+0x2c>)
    46b4:	4c0a      	ldr	r4, [pc, #40]	; (46e0 <hci_vendor_event+0x30>)
		BT_WARN("Unhandled vendor-specific event: %s",
    46b6:	8981      	ldrh	r1, [r0, #12]
    46b8:	6880      	ldr	r0, [r0, #8]
    46ba:	1aa4      	subs	r4, r4, r2
    46bc:	f7ff fcb6 	bl	402c <bt_hex_real>
{
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
    46c0:	f7fd fe10 	bl	22e4 <z_log_strdup>
    46c4:	08e4      	lsrs	r4, r4, #3
    46c6:	01a4      	lsls	r4, r4, #6
    46c8:	f044 0402 	orr.w	r4, r4, #2
    46cc:	4601      	mov	r1, r0
    46ce:	4622      	mov	r2, r4
    46d0:	4804      	ldr	r0, [pc, #16]	; (46e4 <hci_vendor_event+0x34>)
}
    46d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    46d6:	f014 bb99 	b.w	18e0c <log_1>
    46da:	bf00      	nop
    46dc:	0001e408 	.word	0x0001e408
    46e0:	0001e4f8 	.word	0x0001e4f8
    46e4:	0001f5d0 	.word	0x0001f5d0

000046e8 <le_conn_update_complete>:
{
    46e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    46ea:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    46ec:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    46f0:	4630      	mov	r0, r6
    46f2:	f001 fee1 	bl	64b8 <bt_conn_lookup_handle>
	if (!conn) {
    46f6:	4604      	mov	r4, r0
    46f8:	b960      	cbnz	r0, 4714 <le_conn_update_complete+0x2c>
    46fa:	4a1f      	ldr	r2, [pc, #124]	; (4778 <le_conn_update_complete+0x90>)
    46fc:	4b1f      	ldr	r3, [pc, #124]	; (477c <le_conn_update_complete+0x94>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    46fe:	4820      	ldr	r0, [pc, #128]	; (4780 <le_conn_update_complete+0x98>)
    4700:	1ad2      	subs	r2, r2, r3
    4702:	08d2      	lsrs	r2, r2, #3
    4704:	0192      	lsls	r2, r2, #6
    4706:	f042 0201 	orr.w	r2, r2, #1
    470a:	4631      	mov	r1, r6
    470c:	f014 fb7e 	bl	18e0c <log_1>
}
    4710:	b002      	add	sp, #8
    4712:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
    4714:	782b      	ldrb	r3, [r5, #0]
    4716:	b9bb      	cbnz	r3, 4748 <le_conn_update_complete+0x60>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    4718:	792a      	ldrb	r2, [r5, #4]
    471a:	78eb      	ldrb	r3, [r5, #3]
    471c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4720:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    4724:	79aa      	ldrb	r2, [r5, #6]
    4726:	796b      	ldrb	r3, [r5, #5]
    4728:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    472c:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    4730:	79eb      	ldrb	r3, [r5, #7]
    4732:	7a2a      	ldrb	r2, [r5, #8]
    4734:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4738:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    473c:	f001 fd4e 	bl	61dc <notify_le_param_updated>
	bt_conn_unref(conn);
    4740:	4620      	mov	r0, r4
    4742:	f015 fef0 	bl	1a526 <bt_conn_unref>
    4746:	e7e3      	b.n	4710 <le_conn_update_complete+0x28>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    4748:	2b1a      	cmp	r3, #26
    474a:	d1f9      	bne.n	4740 <le_conn_update_complete+0x58>
    474c:	78c3      	ldrb	r3, [r0, #3]
    474e:	2b01      	cmp	r3, #1
    4750:	d1f6      	bne.n	4740 <le_conn_update_complete+0x58>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    4752:	f44f 6180 	mov.w	r1, #1024	; 0x400
    4756:	3004      	adds	r0, #4
    4758:	f015 fd13 	bl	1a182 <atomic_or>
		   conn->role == BT_HCI_ROLE_SLAVE &&
    475c:	0543      	lsls	r3, r0, #21
    475e:	d4ef      	bmi.n	4740 <le_conn_update_complete+0x58>
		param.interval_min = conn->le.interval_min;
    4760:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    4764:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
    4766:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
    4768:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    476c:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
    476e:	4620      	mov	r0, r4
    4770:	f002 fa36 	bl	6be0 <bt_l2cap_update_conn_param>
    4774:	e7e4      	b.n	4740 <le_conn_update_complete+0x58>
    4776:	bf00      	nop
    4778:	0001e4f8 	.word	0x0001e4f8
    477c:	0001e408 	.word	0x0001e408
    4780:	0001f5f4 	.word	0x0001f5f4

00004784 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    4784:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    4786:	4c0c      	ldr	r4, [pc, #48]	; (47b8 <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    4788:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    478a:	2205      	movs	r2, #5
    478c:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    4790:	f001 ffc6 	bl	6720 <bt_conn_lookup_state_le>
		if (!conn) {
    4794:	b970      	cbnz	r0, 47b4 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
    4796:	4b09      	ldr	r3, [pc, #36]	; (47bc <find_pending_connect.part.0+0x38>)
    4798:	6818      	ldr	r0, [r3, #0]
    479a:	889a      	ldrh	r2, [r3, #4]
    479c:	9000      	str	r0, [sp, #0]
    479e:	799b      	ldrb	r3, [r3, #6]
    47a0:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    47a4:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
						       BT_ADDR_LE_NONE,
    47a8:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    47ac:	2204      	movs	r2, #4
    47ae:	4669      	mov	r1, sp
    47b0:	f001 ffb6 	bl	6720 <bt_conn_lookup_state_le>
}
    47b4:	b002      	add	sp, #8
    47b6:	bd10      	pop	{r4, pc}
    47b8:	20000000 	.word	0x20000000
    47bc:	0001e6fc 	.word	0x0001e6fc

000047c0 <hci_cmd_done>:
{
    47c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    47c4:	4607      	mov	r7, r0
    47c6:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    47c8:	7990      	ldrb	r0, [r2, #6]
    47ca:	4e40      	ldr	r6, [pc, #256]	; (48cc <hci_cmd_done+0x10c>)
{
    47cc:	4688      	mov	r8, r1
    47ce:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    47d0:	f010 ff08 	bl	155e4 <net_buf_pool_get>
    47d4:	4286      	cmp	r6, r0
    47d6:	d016      	beq.n	4806 <hci_cmd_done+0x46>
    47d8:	4b3d      	ldr	r3, [pc, #244]	; (48d0 <hci_cmd_done+0x110>)
    47da:	4d3e      	ldr	r5, [pc, #248]	; (48d4 <hci_cmd_done+0x114>)
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    47dc:	79a0      	ldrb	r0, [r4, #6]
    47de:	9700      	str	r7, [sp, #0]
    47e0:	1aed      	subs	r5, r5, r3
    47e2:	08ed      	lsrs	r5, r5, #3
    47e4:	9001      	str	r0, [sp, #4]
    47e6:	f010 fefd 	bl	155e4 <net_buf_pool_get>
    47ea:	01ad      	lsls	r5, r5, #6
    47ec:	f045 0502 	orr.w	r5, r5, #2
    47f0:	e9cd 0602 	strd	r0, r6, [sp, #8]
    47f4:	462b      	mov	r3, r5
    47f6:	4838      	ldr	r0, [pc, #224]	; (48d8 <hci_cmd_done+0x118>)
    47f8:	2204      	movs	r2, #4
    47fa:	4669      	mov	r1, sp
    47fc:	f014 fb4f 	bl	18e9e <log_n>
}
    4800:	b005      	add	sp, #20
    4802:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
    4806:	4620      	mov	r0, r4
    4808:	f010 fef4 	bl	155f4 <net_buf_id>
    480c:	4d33      	ldr	r5, [pc, #204]	; (48dc <hci_cmd_done+0x11c>)
    480e:	f04f 090c 	mov.w	r9, #12
    4812:	fb09 5300 	mla	r3, r9, r0, r5
    4816:	885b      	ldrh	r3, [r3, #2]
    4818:	42bb      	cmp	r3, r7
    481a:	d011      	beq.n	4840 <hci_cmd_done+0x80>
    481c:	4b2c      	ldr	r3, [pc, #176]	; (48d0 <hci_cmd_done+0x110>)
    481e:	4e2d      	ldr	r6, [pc, #180]	; (48d4 <hci_cmd_done+0x114>)
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    4820:	4620      	mov	r0, r4
    4822:	1af6      	subs	r6, r6, r3
    4824:	f010 fee6 	bl	155f4 <net_buf_id>
    4828:	08f6      	lsrs	r6, r6, #3
    482a:	fb09 5000 	mla	r0, r9, r0, r5
    482e:	01b6      	lsls	r6, r6, #6
    4830:	f046 0602 	orr.w	r6, r6, #2
    4834:	8842      	ldrh	r2, [r0, #2]
    4836:	482a      	ldr	r0, [pc, #168]	; (48e0 <hci_cmd_done+0x120>)
    4838:	4633      	mov	r3, r6
    483a:	4639      	mov	r1, r7
    483c:	f014 fafa 	bl	18e34 <log_2>
	if (cmd(buf)->state && !status) {
    4840:	4620      	mov	r0, r4
    4842:	f010 fed7 	bl	155f4 <net_buf_id>
    4846:	260c      	movs	r6, #12
    4848:	fb06 5000 	mla	r0, r6, r0, r5
    484c:	6843      	ldr	r3, [r0, #4]
    484e:	b1ab      	cbz	r3, 487c <hci_cmd_done+0xbc>
    4850:	f1b8 0f00 	cmp.w	r8, #0
    4854:	d112      	bne.n	487c <hci_cmd_done+0xbc>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    4856:	4620      	mov	r0, r4
    4858:	f010 fecc 	bl	155f4 <net_buf_id>
    485c:	fb06 5000 	mla	r0, r6, r0, r5
	atomic_val_t mask = ATOMIC_MASK(bit);
    4860:	2101      	movs	r1, #1
    4862:	6842      	ldr	r2, [r0, #4]
    4864:	e9d2 3000 	ldrd	r3, r0, [r2]
	if (val) {
    4868:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
    486a:	f000 061f 	and.w	r6, r0, #31
    486e:	40b1      	lsls	r1, r6
	if (val) {
    4870:	0940      	lsrs	r0, r0, #5
    4872:	b1da      	cbz	r2, 48ac <hci_cmd_done+0xec>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    4874:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4878:	f015 fc83 	bl	1a182 <atomic_or>
	if (cmd(buf)->sync) {
    487c:	4620      	mov	r0, r4
    487e:	f010 feb9 	bl	155f4 <net_buf_id>
    4882:	260c      	movs	r6, #12
    4884:	fb06 5000 	mla	r0, r6, r0, r5
    4888:	6883      	ldr	r3, [r0, #8]
    488a:	2b00      	cmp	r3, #0
    488c:	d0b8      	beq.n	4800 <hci_cmd_done+0x40>
		cmd(buf)->status = status;
    488e:	4620      	mov	r0, r4
    4890:	f010 feb0 	bl	155f4 <net_buf_id>
    4894:	4370      	muls	r0, r6
    4896:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    489a:	4620      	mov	r0, r4
    489c:	f010 feaa 	bl	155f4 <net_buf_id>
    48a0:	fb06 5500 	mla	r5, r6, r0, r5
    48a4:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
    48a6:	f012 fd91 	bl	173cc <z_impl_k_sem_give>
}
    48aa:	e7a9      	b.n	4800 <hci_cmd_done+0x40>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    48ac:	43c9      	mvns	r1, r1
    48ae:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    48b2:	f3bf 8f5b 	dmb	ish
    48b6:	e853 2f00 	ldrex	r2, [r3]
    48ba:	400a      	ands	r2, r1
    48bc:	e843 2000 	strex	r0, r2, [r3]
    48c0:	2800      	cmp	r0, #0
    48c2:	d1f8      	bne.n	48b6 <hci_cmd_done+0xf6>
    48c4:	f3bf 8f5b 	dmb	ish
    48c8:	e7d8      	b.n	487c <hci_cmd_done+0xbc>
    48ca:	bf00      	nop
    48cc:	20000cbc 	.word	0x20000cbc
    48d0:	0001e408 	.word	0x0001e408
    48d4:	0001e4f8 	.word	0x0001e4f8
    48d8:	0001f618 	.word	0x0001f618
    48dc:	200019a4 	.word	0x200019a4
    48e0:	0001f64d 	.word	0x0001f64d

000048e4 <handle_event>:
{
    48e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    48e6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    48ea:	4605      	mov	r5, r0
    48ec:	4608      	mov	r0, r1
		if (handler->event != event) {
    48ee:	7811      	ldrb	r1, [r2, #0]
    48f0:	42a9      	cmp	r1, r5
    48f2:	d01a      	beq.n	492a <handle_event+0x46>
	for (i = 0; i < num_handlers; i++) {
    48f4:	3208      	adds	r2, #8
    48f6:	429a      	cmp	r2, r3
    48f8:	d1f9      	bne.n	48ee <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    48fa:	8986      	ldrh	r6, [r0, #12]
    48fc:	4b16      	ldr	r3, [pc, #88]	; (4958 <handle_event+0x74>)
    48fe:	4c17      	ldr	r4, [pc, #92]	; (495c <handle_event+0x78>)
    4900:	6880      	ldr	r0, [r0, #8]
    4902:	4631      	mov	r1, r6
    4904:	1ae4      	subs	r4, r4, r3
    4906:	f7ff fb91 	bl	402c <bt_hex_real>
    490a:	f7fd fceb 	bl	22e4 <z_log_strdup>
    490e:	08e4      	lsrs	r4, r4, #3
    4910:	01a4      	lsls	r4, r4, #6
    4912:	f044 0402 	orr.w	r4, r4, #2
    4916:	4603      	mov	r3, r0
    4918:	f8ad 4000 	strh.w	r4, [sp]
    491c:	4810      	ldr	r0, [pc, #64]	; (4960 <handle_event+0x7c>)
    491e:	4632      	mov	r2, r6
    4920:	4629      	mov	r1, r5
    4922:	f014 faa0 	bl	18e66 <log_3>
}
    4926:	b002      	add	sp, #8
    4928:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
    492a:	8981      	ldrh	r1, [r0, #12]
    492c:	7853      	ldrb	r3, [r2, #1]
    492e:	428b      	cmp	r3, r1
    4930:	d90d      	bls.n	494e <handle_event+0x6a>
    4932:	4a09      	ldr	r2, [pc, #36]	; (4958 <handle_event+0x74>)
    4934:	4b09      	ldr	r3, [pc, #36]	; (495c <handle_event+0x78>)
			BT_ERR("Too small (%u bytes) event 0x%02x",
    4936:	480b      	ldr	r0, [pc, #44]	; (4964 <handle_event+0x80>)
    4938:	1a9b      	subs	r3, r3, r2
    493a:	08db      	lsrs	r3, r3, #3
    493c:	019b      	lsls	r3, r3, #6
    493e:	f043 0301 	orr.w	r3, r3, #1
    4942:	462a      	mov	r2, r5
}
    4944:	b002      	add	sp, #8
    4946:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    494a:	f014 ba73 	b.w	18e34 <log_2>
		handler->handler(buf);
    494e:	6853      	ldr	r3, [r2, #4]
}
    4950:	b002      	add	sp, #8
    4952:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
    4956:	4718      	bx	r3
    4958:	0001e408 	.word	0x0001e408
    495c:	0001e4f8 	.word	0x0001e4f8
    4960:	0001f6a2 	.word	0x0001f6a2
    4964:	0001f680 	.word	0x0001f680

00004968 <hci_le_meta_event>:
{
    4968:	b510      	push	{r4, lr}
    496a:	2101      	movs	r1, #1
    496c:	4604      	mov	r4, r0
    496e:	3008      	adds	r0, #8
    4970:	f018 fd0a 	bl	1d388 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    4974:	4621      	mov	r1, r4
    4976:	4a03      	ldr	r2, [pc, #12]	; (4984 <hci_le_meta_event+0x1c>)
    4978:	7800      	ldrb	r0, [r0, #0]
}
    497a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    497e:	2308      	movs	r3, #8
    4980:	f7ff bfb0 	b.w	48e4 <handle_event>
    4984:	0001e820 	.word	0x0001e820

00004988 <hci_num_completed_packets>:
{
    4988:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    498c:	4d39      	ldr	r5, [pc, #228]	; (4a74 <hci_num_completed_packets+0xec>)
    498e:	4b3a      	ldr	r3, [pc, #232]	; (4a78 <hci_num_completed_packets+0xf0>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    4990:	f8d0 8008 	ldr.w	r8, [r0, #8]
				BT_ERR("packets count mismatch");
    4994:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 4a80 <hci_num_completed_packets+0xf8>
    4998:	1aed      	subs	r5, r5, r3
	for (i = 0; i < evt->num_handles; i++) {
    499a:	2600      	movs	r6, #0
    499c:	08ed      	lsrs	r5, r5, #3
			tx->pending_no_cb = 0U;
    499e:	46b1      	mov	r9, r6
	for (i = 0; i < evt->num_handles; i++) {
    49a0:	f898 3000 	ldrb.w	r3, [r8]
    49a4:	429e      	cmp	r6, r3
    49a6:	db01      	blt.n	49ac <hci_num_completed_packets+0x24>
}
    49a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    49ac:	eb08 0386 	add.w	r3, r8, r6, lsl #2
    49b0:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    49b4:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    49b8:	4658      	mov	r0, fp
    49ba:	f001 fd7d 	bl	64b8 <bt_conn_lookup_handle>
		if (!conn) {
    49be:	4604      	mov	r4, r0
    49c0:	b1d8      	cbz	r0, 49fa <hci_num_completed_packets+0x72>
			k_work_submit(&conn->tx_complete_work);
    49c2:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
    49c6:	2f00      	cmp	r7, #0
    49c8:	d033      	beq.n	4a32 <hci_num_completed_packets+0xaa>
	__asm__ volatile(
    49ca:	f04f 0320 	mov.w	r3, #32
    49ce:	f3ef 8211 	mrs	r2, BASEPRI
    49d2:	f383 8811 	msr	BASEPRI, r3
    49d6:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    49da:	69e3      	ldr	r3, [r4, #28]
    49dc:	b1b3      	cbz	r3, 4a0c <hci_num_completed_packets+0x84>
				conn->pending_no_cb--;
    49de:	3b01      	subs	r3, #1
    49e0:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    49e2:	f382 8811 	msr	BASEPRI, r2
    49e6:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    49ea:	4620      	mov	r0, r4
    49ec:	f001 fbf2 	bl	61d4 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
    49f0:	3f01      	subs	r7, #1
    49f2:	f012 fceb 	bl	173cc <z_impl_k_sem_give>
    49f6:	b2bf      	uxth	r7, r7
    49f8:	e7e5      	b.n	49c6 <hci_num_completed_packets+0x3e>
			BT_ERR("No connection for handle %u", handle);
    49fa:	01aa      	lsls	r2, r5, #6
    49fc:	481f      	ldr	r0, [pc, #124]	; (4a7c <hci_num_completed_packets+0xf4>)
    49fe:	f042 0201 	orr.w	r2, r2, #1
    4a02:	4659      	mov	r1, fp
    4a04:	f014 fa02 	bl	18e0c <log_1>
	for (i = 0; i < evt->num_handles; i++) {
    4a08:	3601      	adds	r6, #1
    4a0a:	e7c9      	b.n	49a0 <hci_num_completed_packets+0x18>
Z_GENLIST_IS_EMPTY(slist)
    4a0c:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    4a0e:	b12b      	cbz	r3, 4a1c <hci_num_completed_packets+0x94>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    4a10:	69a1      	ldr	r1, [r4, #24]
    4a12:	6818      	ldr	r0, [r3, #0]
	list->head = node;
    4a14:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    4a16:	428b      	cmp	r3, r1
	list->tail = node;
    4a18:	bf08      	it	eq
    4a1a:	61a0      	streq	r0, [r4, #24]
    4a1c:	f382 8811 	msr	BASEPRI, r2
    4a20:	f3bf 8f6f 	isb	sy
			if (!node) {
    4a24:	b94b      	cbnz	r3, 4a3a <hci_num_completed_packets+0xb2>
				BT_ERR("packets count mismatch");
    4a26:	01a9      	lsls	r1, r5, #6
    4a28:	f041 0101 	orr.w	r1, r1, #1
    4a2c:	4650      	mov	r0, sl
    4a2e:	f014 f9e0 	bl	18df2 <log_0>
		bt_conn_unref(conn);
    4a32:	4620      	mov	r0, r4
    4a34:	f015 fd77 	bl	1a526 <bt_conn_unref>
    4a38:	e7e6      	b.n	4a08 <hci_num_completed_packets+0x80>
	__asm__ volatile(
    4a3a:	f04f 0220 	mov.w	r2, #32
    4a3e:	f3ef 8111 	mrs	r1, BASEPRI
    4a42:	f382 8811 	msr	BASEPRI, r2
    4a46:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    4a4a:	68da      	ldr	r2, [r3, #12]
    4a4c:	61e2      	str	r2, [r4, #28]
	parent->next = child;
    4a4e:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
    4a52:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    4a54:	f8c3 900c 	str.w	r9, [r3, #12]
    4a58:	b94a      	cbnz	r2, 4a6e <hci_num_completed_packets+0xe6>
	list->head = node;
    4a5a:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    4a5e:	f381 8811 	msr	BASEPRI, r1
    4a62:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
    4a66:	4658      	mov	r0, fp
    4a68:	f012 fe26 	bl	176b8 <k_work_submit>
    4a6c:	e7bd      	b.n	49ea <hci_num_completed_packets+0x62>
	parent->next = child;
    4a6e:	6013      	str	r3, [r2, #0]
	list->tail = node;
    4a70:	6263      	str	r3, [r4, #36]	; 0x24
}
    4a72:	e7f4      	b.n	4a5e <hci_num_completed_packets+0xd6>
    4a74:	0001e4f8 	.word	0x0001e4f8
    4a78:	0001e408 	.word	0x0001e408
    4a7c:	0001f6c4 	.word	0x0001f6c4
    4a80:	0001f6e0 	.word	0x0001f6e0

00004a84 <hci_cmd_status>:
{
    4a84:	b538      	push	{r3, r4, r5, lr}
    4a86:	2104      	movs	r1, #4
    4a88:	4604      	mov	r4, r0
    4a8a:	3008      	adds	r0, #8
    4a8c:	f018 fc7c 	bl	1d388 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    4a90:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    4a92:	7801      	ldrb	r1, [r0, #0]
    4a94:	8840      	ldrh	r0, [r0, #2]
    4a96:	4622      	mov	r2, r4
    4a98:	f7ff fe92 	bl	47c0 <hci_cmd_done>
	if (ncmd) {
    4a9c:	b125      	cbz	r5, 4aa8 <hci_cmd_status+0x24>
    4a9e:	4803      	ldr	r0, [pc, #12]	; (4aac <hci_cmd_status+0x28>)
}
    4aa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4aa4:	f012 bc92 	b.w	173cc <z_impl_k_sem_give>
    4aa8:	bd38      	pop	{r3, r4, r5, pc}
    4aaa:	bf00      	nop
    4aac:	200000e8 	.word	0x200000e8

00004ab0 <hci_cmd_complete>:
{
    4ab0:	b538      	push	{r3, r4, r5, lr}
    4ab2:	2103      	movs	r1, #3
    4ab4:	4604      	mov	r4, r0
    4ab6:	3008      	adds	r0, #8
    4ab8:	f018 fc66 	bl	1d388 <net_buf_simple_pull_mem>
	status = buf->data[0];
    4abc:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    4abe:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    4ac0:	7819      	ldrb	r1, [r3, #0]
    4ac2:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    4ac6:	4622      	mov	r2, r4
    4ac8:	f7ff fe7a 	bl	47c0 <hci_cmd_done>
	if (ncmd) {
    4acc:	b125      	cbz	r5, 4ad8 <hci_cmd_complete+0x28>
    4ace:	4803      	ldr	r0, [pc, #12]	; (4adc <hci_cmd_complete+0x2c>)
}
    4ad0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4ad4:	f012 bc7a 	b.w	173cc <z_impl_k_sem_give>
    4ad8:	bd38      	pop	{r3, r4, r5, pc}
    4ada:	bf00      	nop
    4adc:	200000e8 	.word	0x200000e8

00004ae0 <bt_hci_cmd_state_set_init>:
{
    4ae0:	b510      	push	{r4, lr}
	state->bit = bit;
    4ae2:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
    4ae6:	f89d 3008 	ldrb.w	r3, [sp, #8]
    4aea:	720b      	strb	r3, [r1, #8]
{
    4aec:	460c      	mov	r4, r1
	cmd(buf)->state = state;
    4aee:	f010 fd81 	bl	155f4 <net_buf_id>
    4af2:	4b03      	ldr	r3, [pc, #12]	; (4b00 <bt_hci_cmd_state_set_init+0x20>)
    4af4:	220c      	movs	r2, #12
    4af6:	fb02 3000 	mla	r0, r2, r0, r3
    4afa:	6044      	str	r4, [r0, #4]
}
    4afc:	bd10      	pop	{r4, pc}
    4afe:	bf00      	nop
    4b00:	200019a4 	.word	0x200019a4

00004b04 <bt_hci_cmd_create>:
{
    4b04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return net_buf_alloc_fixed(pool, timeout);
    4b08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4b0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4b10:	4605      	mov	r5, r0
    4b12:	4816      	ldr	r0, [pc, #88]	; (4b6c <bt_hci_cmd_create+0x68>)
	cmd(buf)->opcode = opcode;
    4b14:	f8df 8058 	ldr.w	r8, [pc, #88]	; 4b70 <bt_hci_cmd_create+0x6c>
{
    4b18:	460e      	mov	r6, r1
    4b1a:	f018 fb4b 	bl	1d1b4 <net_buf_alloc_fixed>
    4b1e:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    4b20:	f100 0b08 	add.w	fp, r0, #8
    4b24:	2100      	movs	r1, #0
    4b26:	2700      	movs	r7, #0
    4b28:	4658      	mov	r0, fp
    4b2a:	f018 fb68 	bl	1d1fe <net_buf_simple_reserve>
    4b2e:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    4b30:	4620      	mov	r0, r4
    4b32:	f010 fd5f 	bl	155f4 <net_buf_id>
    4b36:	f04f 0a0c 	mov.w	sl, #12
    4b3a:	fb0a 8000 	mla	r0, sl, r0, r8
    4b3e:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
    4b40:	4620      	mov	r0, r4
    4b42:	f010 fd57 	bl	155f4 <net_buf_id>
    4b46:	fb0a 8000 	mla	r0, sl, r0, r8
    4b4a:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
    4b4c:	4620      	mov	r0, r4
    4b4e:	f010 fd51 	bl	155f4 <net_buf_id>
    4b52:	fb0a 8000 	mla	r0, sl, r0, r8
	return net_buf_simple_add(&buf->b, len);
    4b56:	2103      	movs	r1, #3
    4b58:	6047      	str	r7, [r0, #4]
    4b5a:	4658      	mov	r0, fp
    4b5c:	f018 fbaf 	bl	1d2be <net_buf_simple_add>
	hdr->param_len = param_len;
    4b60:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    4b62:	8005      	strh	r5, [r0, #0]
}
    4b64:	4620      	mov	r0, r4
    4b66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4b6a:	bf00      	nop
    4b6c:	20000cbc 	.word	0x20000cbc
    4b70:	200019a4 	.word	0x200019a4

00004b74 <bt_hci_cmd_send>:
{
    4b74:	b538      	push	{r3, r4, r5, lr}
    4b76:	4605      	mov	r5, r0
	if (!buf) {
    4b78:	460c      	mov	r4, r1
    4b7a:	b919      	cbnz	r1, 4b84 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    4b7c:	f7ff ffc2 	bl	4b04 <bt_hci_cmd_create>
		if (!buf) {
    4b80:	4604      	mov	r4, r0
    4b82:	b1f0      	cbz	r0, 4bc2 <bt_hci_cmd_send+0x4e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    4b84:	f640 4335 	movw	r3, #3125	; 0xc35
    4b88:	429d      	cmp	r5, r3
    4b8a:	d114      	bne.n	4bb6 <bt_hci_cmd_send+0x42>
	BT_DBG("buf %p len %u type %u", buf, buf->len, bt_buf_get_type(buf));

	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
    4b8c:	4620      	mov	r0, r4
    4b8e:	f7ff faf9 	bl	4184 <bt_hci_ecc_send>
		if (err) {
    4b92:	4605      	mov	r5, r0
    4b94:	b168      	cbz	r0, 4bb2 <bt_hci_cmd_send+0x3e>
    4b96:	4b0c      	ldr	r3, [pc, #48]	; (4bc8 <bt_hci_cmd_send+0x54>)
    4b98:	4a0c      	ldr	r2, [pc, #48]	; (4bcc <bt_hci_cmd_send+0x58>)
    4b9a:	1ad2      	subs	r2, r2, r3
    4b9c:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Unable to send to driver (err %d)", err);
    4b9e:	0192      	lsls	r2, r2, #6
    4ba0:	4601      	mov	r1, r0
    4ba2:	f042 0201 	orr.w	r2, r2, #1
    4ba6:	480a      	ldr	r0, [pc, #40]	; (4bd0 <bt_hci_cmd_send+0x5c>)
    4ba8:	f014 f930 	bl	18e0c <log_1>
			net_buf_unref(buf);
    4bac:	4620      	mov	r0, r4
    4bae:	f010 fdd5 	bl	1575c <net_buf_unref>
}
    4bb2:	4628      	mov	r0, r5
    4bb4:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    4bb6:	4807      	ldr	r0, [pc, #28]	; (4bd4 <bt_hci_cmd_send+0x60>)
    4bb8:	4621      	mov	r1, r4
    4bba:	f018 fb41 	bl	1d240 <net_buf_put>
	return 0;
    4bbe:	2500      	movs	r5, #0
    4bc0:	e7f7      	b.n	4bb2 <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
    4bc2:	f06f 0568 	mvn.w	r5, #104	; 0x68
    4bc6:	e7f4      	b.n	4bb2 <bt_hci_cmd_send+0x3e>
    4bc8:	0001e408 	.word	0x0001e408
    4bcc:	0001e4f8 	.word	0x0001e4f8
    4bd0:	0001f76c 	.word	0x0001f76c
    4bd4:	20000104 	.word	0x20000104

00004bd8 <conn_auto_initiate>:
{
    4bd8:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    4bda:	7a83      	ldrb	r3, [r0, #10]
    4bdc:	2b07      	cmp	r3, #7
{
    4bde:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    4be0:	d121      	bne.n	4c26 <conn_auto_initiate+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4be2:	f3bf 8f5b 	dmb	ish
    4be6:	6843      	ldr	r3, [r0, #4]
    4be8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    4bec:	049a      	lsls	r2, r3, #18
    4bee:	d41a      	bmi.n	4c26 <conn_auto_initiate+0x4e>
    4bf0:	78c3      	ldrb	r3, [r0, #3]
    4bf2:	b123      	cbz	r3, 4bfe <conn_auto_initiate+0x26>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    4bf4:	4b0c      	ldr	r3, [pc, #48]	; (4c28 <conn_auto_initiate+0x50>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    4bf6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
    4bfa:	071b      	lsls	r3, r3, #28
    4bfc:	d513      	bpl.n	4c26 <conn_auto_initiate+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    4bfe:	2102      	movs	r1, #2
    4c00:	f242 0016 	movw	r0, #8214	; 0x2016
    4c04:	f7ff ff7e 	bl	4b04 <bt_hci_cmd_create>
	if (!buf) {
    4c08:	4605      	mov	r5, r0
    4c0a:	b160      	cbz	r0, 4c26 <conn_auto_initiate+0x4e>
    4c0c:	2102      	movs	r1, #2
    4c0e:	3008      	adds	r0, #8
    4c10:	f018 fb55 	bl	1d2be <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    4c14:	8823      	ldrh	r3, [r4, #0]
    4c16:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    4c18:	4629      	mov	r1, r5
    4c1a:	f242 0016 	movw	r0, #8214	; 0x2016
}
    4c1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    4c22:	f7ff bfa7 	b.w	4b74 <bt_hci_cmd_send>
}
    4c26:	bd38      	pop	{r3, r4, r5, pc}
    4c28:	20000000 	.word	0x20000000

00004c2c <le_remote_feat_complete>:
{
    4c2c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    4c2e:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    4c30:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    4c34:	4630      	mov	r0, r6
    4c36:	f001 fc3f 	bl	64b8 <bt_conn_lookup_handle>
	if (!conn) {
    4c3a:	4604      	mov	r4, r0
    4c3c:	b960      	cbnz	r0, 4c58 <le_remote_feat_complete+0x2c>
    4c3e:	4a10      	ldr	r2, [pc, #64]	; (4c80 <le_remote_feat_complete+0x54>)
    4c40:	4b10      	ldr	r3, [pc, #64]	; (4c84 <le_remote_feat_complete+0x58>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    4c42:	4811      	ldr	r0, [pc, #68]	; (4c88 <le_remote_feat_complete+0x5c>)
    4c44:	1ad2      	subs	r2, r2, r3
    4c46:	08d2      	lsrs	r2, r2, #3
    4c48:	0192      	lsls	r2, r2, #6
    4c4a:	4631      	mov	r1, r6
    4c4c:	f042 0201 	orr.w	r2, r2, #1
}
    4c50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    4c54:	f014 b8da 	b.w	18e0c <log_1>
	if (!evt->status) {
    4c58:	782b      	ldrb	r3, [r5, #0]
    4c5a:	b923      	cbnz	r3, 4c66 <le_remote_feat_complete+0x3a>
		memcpy(conn->le.features, evt->features,
    4c5c:	2208      	movs	r2, #8
    4c5e:	1ce9      	adds	r1, r5, #3
    4c60:	30ac      	adds	r0, #172	; 0xac
    4c62:	f014 ff9f 	bl	19ba4 <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    4c66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    4c6a:	1d20      	adds	r0, r4, #4
    4c6c:	f015 fa89 	bl	1a182 <atomic_or>
	conn_auto_initiate(conn);
    4c70:	4620      	mov	r0, r4
    4c72:	f7ff ffb1 	bl	4bd8 <conn_auto_initiate>
	bt_conn_unref(conn);
    4c76:	4620      	mov	r0, r4
}
    4c78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    4c7c:	f015 bc53 	b.w	1a526 <bt_conn_unref>
    4c80:	0001e4f8 	.word	0x0001e4f8
    4c84:	0001e408 	.word	0x0001e408
    4c88:	0001f5f4 	.word	0x0001f5f4

00004c8c <le_conn_param_neg_reply>:
{
    4c8c:	b570      	push	{r4, r5, r6, lr}
    4c8e:	4606      	mov	r6, r0
    4c90:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    4c92:	f242 0021 	movw	r0, #8225	; 0x2021
    4c96:	2103      	movs	r1, #3
    4c98:	f7ff ff34 	bl	4b04 <bt_hci_cmd_create>
	if (!buf) {
    4c9c:	4604      	mov	r4, r0
    4c9e:	b958      	cbnz	r0, 4cb8 <le_conn_param_neg_reply+0x2c>
    4ca0:	490c      	ldr	r1, [pc, #48]	; (4cd4 <le_conn_param_neg_reply+0x48>)
    4ca2:	4b0d      	ldr	r3, [pc, #52]	; (4cd8 <le_conn_param_neg_reply+0x4c>)
		BT_ERR("Unable to allocate buffer");
    4ca4:	480d      	ldr	r0, [pc, #52]	; (4cdc <le_conn_param_neg_reply+0x50>)
    4ca6:	1ac9      	subs	r1, r1, r3
    4ca8:	08c9      	lsrs	r1, r1, #3
    4caa:	0189      	lsls	r1, r1, #6
}
    4cac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    4cb0:	f041 0101 	orr.w	r1, r1, #1
    4cb4:	f014 b89d 	b.w	18df2 <log_0>
    4cb8:	2103      	movs	r1, #3
    4cba:	3008      	adds	r0, #8
    4cbc:	f018 faff 	bl	1d2be <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    4cc0:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    4cc2:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    4cc4:	4621      	mov	r1, r4
    4cc6:	f242 0021 	movw	r0, #8225	; 0x2021
}
    4cca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    4cce:	f7ff bf51 	b.w	4b74 <bt_hci_cmd_send>
    4cd2:	bf00      	nop
    4cd4:	0001e4f8 	.word	0x0001e4f8
    4cd8:	0001e408 	.word	0x0001e408
    4cdc:	0001f7af 	.word	0x0001f7af

00004ce0 <le_conn_param_req>:
{
    4ce0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    4ce2:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    4ce4:	78d9      	ldrb	r1, [r3, #3]
    4ce6:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    4ce8:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    4cea:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4cee:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    4cf2:	7959      	ldrb	r1, [r3, #5]
    4cf4:	791a      	ldrb	r2, [r3, #4]
    4cf6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4cfa:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    4cfe:	799a      	ldrb	r2, [r3, #6]
    4d00:	79d9      	ldrb	r1, [r3, #7]
    4d02:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4d06:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    4d0a:	7a1a      	ldrb	r2, [r3, #8]
    4d0c:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    4d0e:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    4d10:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    4d14:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
    4d16:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    4d1a:	f001 fbcd 	bl	64b8 <bt_conn_lookup_handle>
	if (!conn) {
    4d1e:	4606      	mov	r6, r0
    4d20:	b980      	cbnz	r0, 4d44 <le_conn_param_req+0x64>
    4d22:	4b20      	ldr	r3, [pc, #128]	; (4da4 <le_conn_param_req+0xc4>)
    4d24:	4a20      	ldr	r2, [pc, #128]	; (4da8 <le_conn_param_req+0xc8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    4d26:	4821      	ldr	r0, [pc, #132]	; (4dac <le_conn_param_req+0xcc>)
    4d28:	1ad2      	subs	r2, r2, r3
    4d2a:	08d2      	lsrs	r2, r2, #3
    4d2c:	0192      	lsls	r2, r2, #6
    4d2e:	4621      	mov	r1, r4
    4d30:	f042 0201 	orr.w	r2, r2, #1
    4d34:	f014 f86a 	bl	18e0c <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    4d38:	2102      	movs	r1, #2
    4d3a:	4620      	mov	r0, r4
    4d3c:	f7ff ffa6 	bl	4c8c <le_conn_param_neg_reply>
}
    4d40:	b003      	add	sp, #12
    4d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    4d44:	4669      	mov	r1, sp
    4d46:	f001 fa81 	bl	624c <le_param_req>
    4d4a:	b938      	cbnz	r0, 4d5c <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    4d4c:	211e      	movs	r1, #30
    4d4e:	4620      	mov	r0, r4
    4d50:	f7ff ff9c 	bl	4c8c <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    4d54:	4630      	mov	r0, r6
    4d56:	f015 fbe6 	bl	1a526 <bt_conn_unref>
    4d5a:	e7f1      	b.n	4d40 <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    4d5c:	210e      	movs	r1, #14
    4d5e:	f242 0020 	movw	r0, #8224	; 0x2020
    4d62:	f7ff fecf 	bl	4b04 <bt_hci_cmd_create>
	if (!buf) {
    4d66:	4605      	mov	r5, r0
    4d68:	2800      	cmp	r0, #0
    4d6a:	d0f3      	beq.n	4d54 <le_conn_param_req+0x74>
    4d6c:	210e      	movs	r1, #14
    4d6e:	3008      	adds	r0, #8
    4d70:	f018 faa5 	bl	1d2be <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
    4d74:	220e      	movs	r2, #14
    4d76:	4604      	mov	r4, r0
    4d78:	2100      	movs	r1, #0
    4d7a:	f014 ff3e 	bl	19bfa <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    4d7e:	f8bd 3000 	ldrh.w	r3, [sp]
    4d82:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    4d84:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    4d88:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    4d8a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    4d8e:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    4d90:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
    4d94:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    4d96:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    4d98:	4629      	mov	r1, r5
    4d9a:	f242 0020 	movw	r0, #8224	; 0x2020
    4d9e:	f7ff fee9 	bl	4b74 <bt_hci_cmd_send>
    4da2:	e7d7      	b.n	4d54 <le_conn_param_req+0x74>
    4da4:	0001e408 	.word	0x0001e408
    4da8:	0001e4f8 	.word	0x0001e4f8
    4dac:	0001f5f4 	.word	0x0001f5f4

00004db0 <bt_hci_cmd_send_sync>:
{
    4db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4db4:	4607      	mov	r7, r0
    4db6:	b086      	sub	sp, #24
    4db8:	4615      	mov	r5, r2
	if (!buf) {
    4dba:	460c      	mov	r4, r1
    4dbc:	b921      	cbnz	r1, 4dc8 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
    4dbe:	f7ff fea1 	bl	4b04 <bt_hci_cmd_create>
		if (!buf) {
    4dc2:	4604      	mov	r4, r0
    4dc4:	2800      	cmp	r0, #0
    4dc6:	d055      	beq.n	4e74 <bt_hci_cmd_send_sync+0xc4>
	return z_impl_k_sem_init(sem, initial_count, limit);
    4dc8:	2201      	movs	r2, #1
    4dca:	2100      	movs	r1, #0
    4dcc:	4668      	mov	r0, sp
    4dce:	f018 fe49 	bl	1da64 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    4dd2:	4620      	mov	r0, r4
    4dd4:	f010 fc0e 	bl	155f4 <net_buf_id>
    4dd8:	4e28      	ldr	r6, [pc, #160]	; (4e7c <bt_hci_cmd_send_sync+0xcc>)
    4dda:	230c      	movs	r3, #12
    4ddc:	fb03 6000 	mla	r0, r3, r0, r6
    4de0:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    4de4:	4620      	mov	r0, r4
    4de6:	f018 fa38 	bl	1d25a <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    4dea:	4825      	ldr	r0, [pc, #148]	; (4e80 <bt_hci_cmd_send_sync+0xd0>)
    4dec:	4621      	mov	r1, r4
    4dee:	f018 fa27 	bl	1d240 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    4df2:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    4df6:	2300      	movs	r3, #0
    4df8:	4668      	mov	r0, sp
    4dfa:	f012 fb0d 	bl	17418 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    4dfe:	4680      	mov	r8, r0
    4e00:	b180      	cbz	r0, 4e24 <bt_hci_cmd_send_sync+0x74>
    4e02:	4a20      	ldr	r2, [pc, #128]	; (4e84 <bt_hci_cmd_send_sync+0xd4>)
    4e04:	4920      	ldr	r1, [pc, #128]	; (4e88 <bt_hci_cmd_send_sync+0xd8>)
    4e06:	4821      	ldr	r0, [pc, #132]	; (4e8c <bt_hci_cmd_send_sync+0xdc>)
    4e08:	f240 1333 	movw	r3, #307	; 0x133
    4e0c:	f013 fbac 	bl	18568 <printk>
    4e10:	481f      	ldr	r0, [pc, #124]	; (4e90 <bt_hci_cmd_send_sync+0xe0>)
    4e12:	4641      	mov	r1, r8
    4e14:	f013 fba8 	bl	18568 <printk>
    4e18:	4040      	eors	r0, r0
    4e1a:	f380 8811 	msr	BASEPRI, r0
    4e1e:	f04f 0003 	mov.w	r0, #3
    4e22:	df02      	svc	2
	status = cmd(buf)->status;
    4e24:	4620      	mov	r0, r4
    4e26:	f010 fbe5 	bl	155f4 <net_buf_id>
    4e2a:	230c      	movs	r3, #12
    4e2c:	4343      	muls	r3, r0
    4e2e:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
    4e30:	b1be      	cbz	r6, 4e62 <bt_hci_cmd_send_sync+0xb2>
    4e32:	4a18      	ldr	r2, [pc, #96]	; (4e94 <bt_hci_cmd_send_sync+0xe4>)
    4e34:	4b18      	ldr	r3, [pc, #96]	; (4e98 <bt_hci_cmd_send_sync+0xe8>)
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    4e36:	4819      	ldr	r0, [pc, #100]	; (4e9c <bt_hci_cmd_send_sync+0xec>)
    4e38:	1a9b      	subs	r3, r3, r2
    4e3a:	08db      	lsrs	r3, r3, #3
    4e3c:	019b      	lsls	r3, r3, #6
    4e3e:	f043 0302 	orr.w	r3, r3, #2
    4e42:	4632      	mov	r2, r6
    4e44:	4639      	mov	r1, r7
    4e46:	f013 fff5 	bl	18e34 <log_2>
		net_buf_unref(buf);
    4e4a:	4620      	mov	r0, r4
    4e4c:	f010 fc86 	bl	1575c <net_buf_unref>
			return -EIO;
    4e50:	2e09      	cmp	r6, #9
    4e52:	bf0c      	ite	eq
    4e54:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
    4e58:	f06f 0004 	mvnne.w	r0, #4
}
    4e5c:	b006      	add	sp, #24
    4e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
    4e62:	b115      	cbz	r5, 4e6a <bt_hci_cmd_send_sync+0xba>
		*rsp = buf;
    4e64:	602c      	str	r4, [r5, #0]
	return 0;
    4e66:	4630      	mov	r0, r6
    4e68:	e7f8      	b.n	4e5c <bt_hci_cmd_send_sync+0xac>
		net_buf_unref(buf);
    4e6a:	4620      	mov	r0, r4
    4e6c:	f010 fc76 	bl	1575c <net_buf_unref>
	return 0;
    4e70:	4628      	mov	r0, r5
    4e72:	e7f3      	b.n	4e5c <bt_hci_cmd_send_sync+0xac>
			return -ENOBUFS;
    4e74:	f06f 0068 	mvn.w	r0, #104	; 0x68
    4e78:	e7f0      	b.n	4e5c <bt_hci_cmd_send_sync+0xac>
    4e7a:	bf00      	nop
    4e7c:	200019a4 	.word	0x200019a4
    4e80:	20000104 	.word	0x20000104
    4e84:	0001f6f7 	.word	0x0001f6f7
    4e88:	0001f72b 	.word	0x0001f72b
    4e8c:	0001f734 	.word	0x0001f734
    4e90:	0001f7c9 	.word	0x0001f7c9
    4e94:	0001e408 	.word	0x0001e408
    4e98:	0001e4f8 	.word	0x0001e4f8
    4e9c:	0001f7e9 	.word	0x0001f7e9

00004ea0 <bt_hci_le_enh_conn_complete>:
{
    4ea0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    4ea4:	f8b0 9001 	ldrh.w	r9, [r0, #1]
		if (disconnected_handles[i] == handle) {
    4ea8:	4a7c      	ldr	r2, [pc, #496]	; (509c <bt_hci_le_enh_conn_complete+0x1fc>)
	if (evt->status) {
    4eaa:	7804      	ldrb	r4, [r0, #0]
		if (disconnected_handles[i] == handle) {
    4eac:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
    4eae:	ea6f 5309 	mvn.w	r3, r9, lsl #20
    4eb2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
    4eb6:	b29b      	uxth	r3, r3
    4eb8:	4299      	cmp	r1, r3
    4eba:	f04f 0800 	mov.w	r8, #0
			disconnected_handles[i] = 0;
    4ebe:	bf08      	it	eq
    4ec0:	f8a2 8000 	strheq.w	r8, [r2]
{
    4ec4:	b085      	sub	sp, #20
    4ec6:	4605      	mov	r5, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    4ec8:	fa1f f789 	uxth.w	r7, r9
			return true;
    4ecc:	bf08      	it	eq
    4ece:	f04f 0801 	moveq.w	r8, #1
	if (evt->status) {
    4ed2:	b3b4      	cbz	r4, 4f42 <bt_hci_le_enh_conn_complete+0xa2>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    4ed4:	2c3c      	cmp	r4, #60	; 0x3c
    4ed6:	d128      	bne.n	4f2a <bt_hci_le_enh_conn_complete+0x8a>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    4ed8:	f000 fee4 	bl	5ca4 <bt_le_adv_lookup_legacy>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4edc:	f3bf 8f5b 	dmb	ish
    4ee0:	3010      	adds	r0, #16
    4ee2:	e850 3f00 	ldrex	r3, [r0]
    4ee6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    4eea:	e840 3200 	strex	r2, r3, [r0]
    4eee:	2a00      	cmp	r2, #0
    4ef0:	d1f7      	bne.n	4ee2 <bt_hci_le_enh_conn_complete+0x42>
    4ef2:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    4ef6:	2000      	movs	r0, #0
    4ef8:	f7ff fc44 	bl	4784 <find_pending_connect.part.0>
		if (!conn) {
    4efc:	4605      	mov	r5, r0
    4efe:	b960      	cbnz	r0, 4f1a <bt_hci_le_enh_conn_complete+0x7a>
    4f00:	4967      	ldr	r1, [pc, #412]	; (50a0 <bt_hci_le_enh_conn_complete+0x200>)
    4f02:	4b68      	ldr	r3, [pc, #416]	; (50a4 <bt_hci_le_enh_conn_complete+0x204>)
			BT_ERR("No pending slave connection");
    4f04:	4868      	ldr	r0, [pc, #416]	; (50a8 <bt_hci_le_enh_conn_complete+0x208>)
    4f06:	1ac9      	subs	r1, r1, r3
    4f08:	08c9      	lsrs	r1, r1, #3
    4f0a:	0189      	lsls	r1, r1, #6
    4f0c:	f041 0101 	orr.w	r1, r1, #1
    4f10:	f013 ff6f 	bl	18df2 <log_0>
}
    4f14:	b005      	add	sp, #20
    4f16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    4f1a:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4f1c:	2100      	movs	r1, #0
    4f1e:	f001 fad7 	bl	64d0 <bt_conn_set_state>
		bt_conn_unref(conn);
    4f22:	4628      	mov	r0, r5
	bt_conn_unref(conn);
    4f24:	f015 faff 	bl	1a526 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4f28:	e7f4      	b.n	4f14 <bt_hci_le_enh_conn_complete+0x74>
    4f2a:	4b5e      	ldr	r3, [pc, #376]	; (50a4 <bt_hci_le_enh_conn_complete+0x204>)
    4f2c:	4a5c      	ldr	r2, [pc, #368]	; (50a0 <bt_hci_le_enh_conn_complete+0x200>)
		BT_WARN("Unexpected status 0x%02x", evt->status);
    4f2e:	485f      	ldr	r0, [pc, #380]	; (50ac <bt_hci_le_enh_conn_complete+0x20c>)
    4f30:	1ad2      	subs	r2, r2, r3
    4f32:	08d2      	lsrs	r2, r2, #3
    4f34:	0192      	lsls	r2, r2, #6
    4f36:	f042 0202 	orr.w	r2, r2, #2
    4f3a:	4621      	mov	r1, r4
    4f3c:	f013 ff66 	bl	18e0c <log_1>
		return;
    4f40:	e7e8      	b.n	4f14 <bt_hci_le_enh_conn_complete+0x74>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    4f42:	7903      	ldrb	r3, [r0, #4]
    4f44:	3b02      	subs	r3, #2
    4f46:	2b01      	cmp	r3, #1
    4f48:	f100 0604 	add.w	r6, r0, #4
    4f4c:	d843      	bhi.n	4fd6 <bt_hci_le_enh_conn_complete+0x136>
	memcpy(dst, src, sizeof(*dst));
    4f4e:	2207      	movs	r2, #7
    4f50:	4631      	mov	r1, r6
    4f52:	a802      	add	r0, sp, #8
    4f54:	f014 fe26 	bl	19ba4 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    4f58:	f89d 3008 	ldrb.w	r3, [sp, #8]
	memcpy(dst, src, sizeof(*dst));
    4f5c:	2206      	movs	r2, #6
    4f5e:	3b02      	subs	r3, #2
    4f60:	f105 0111 	add.w	r1, r5, #17
    4f64:	f10d 0001 	add.w	r0, sp, #1
    4f68:	f88d 3008 	strb.w	r3, [sp, #8]
    4f6c:	f014 fe1a 	bl	19ba4 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    4f70:	2301      	movs	r3, #1
    4f72:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    4f76:	78eb      	ldrb	r3, [r5, #3]
    4f78:	2b01      	cmp	r3, #1
    4f7a:	d116      	bne.n	4faa <bt_hci_le_enh_conn_complete+0x10a>
    4f7c:	a802      	add	r0, sp, #8
    4f7e:	f7ff fc01 	bl	4784 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    4f82:	78eb      	ldrb	r3, [r5, #3]
    4f84:	2b01      	cmp	r3, #1
    4f86:	4604      	mov	r4, r0
    4f88:	d10e      	bne.n	4fa8 <bt_hci_le_enh_conn_complete+0x108>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    4f8a:	f000 fe8b 	bl	5ca4 <bt_le_adv_lookup_legacy>
    4f8e:	f3bf 8f5b 	dmb	ish
    4f92:	3010      	adds	r0, #16
    4f94:	e850 3f00 	ldrex	r3, [r0]
    4f98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    4f9c:	e840 3200 	strex	r2, r3, [r0]
    4fa0:	2a00      	cmp	r2, #0
    4fa2:	d1f7      	bne.n	4f94 <bt_hci_le_enh_conn_complete+0xf4>
    4fa4:	f3bf 8f5b 	dmb	ish
	if (!conn) {
    4fa8:	bb54      	cbnz	r4, 5000 <bt_hci_le_enh_conn_complete+0x160>
    4faa:	4a3e      	ldr	r2, [pc, #248]	; (50a4 <bt_hci_le_enh_conn_complete+0x204>)
    4fac:	4c3c      	ldr	r4, [pc, #240]	; (50a0 <bt_hci_le_enh_conn_complete+0x200>)
		BT_ERR("No pending conn for peer %s",
    4fae:	4630      	mov	r0, r6
    4fb0:	1aa4      	subs	r4, r4, r2
    4fb2:	f7ff f85d 	bl	4070 <bt_addr_le_str_real>
    4fb6:	f7fd f995 	bl	22e4 <z_log_strdup>
    4fba:	08e4      	lsrs	r4, r4, #3
    4fbc:	01a4      	lsls	r4, r4, #6
    4fbe:	f044 0401 	orr.w	r4, r4, #1
    4fc2:	4601      	mov	r1, r0
    4fc4:	4622      	mov	r2, r4
    4fc6:	483a      	ldr	r0, [pc, #232]	; (50b0 <bt_hci_le_enh_conn_complete+0x210>)
    4fc8:	f013 ff20 	bl	18e0c <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    4fcc:	211f      	movs	r1, #31
    4fce:	4638      	mov	r0, r7
    4fd0:	f015 f8e6 	bl	1a1a0 <bt_hci_disconnect>
		return;
    4fd4:	e79e      	b.n	4f14 <bt_hci_le_enh_conn_complete+0x74>
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
    4fd6:	78c3      	ldrb	r3, [r0, #3]
    4fd8:	2b01      	cmp	r3, #1
    4fda:	bf04      	itt	eq
    4fdc:	4b35      	ldreq	r3, [pc, #212]	; (50b4 <bt_hci_le_enh_conn_complete+0x214>)
    4fde:	f893 4033 	ldrbeq.w	r4, [r3, #51]	; 0x33
		bt_addr_le_copy(&id_addr,
    4fe2:	4631      	mov	r1, r6
    4fe4:	4620      	mov	r0, r4
    4fe6:	f015 f99b 	bl	1a320 <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
    4fea:	2207      	movs	r2, #7
    4fec:	4601      	mov	r1, r0
    4fee:	a802      	add	r0, sp, #8
    4ff0:	f014 fdd8 	bl	19ba4 <memcpy>
    4ff4:	2207      	movs	r2, #7
    4ff6:	4631      	mov	r1, r6
    4ff8:	4668      	mov	r0, sp
    4ffa:	f014 fdd3 	bl	19ba4 <memcpy>
}
    4ffe:	e7ba      	b.n	4f76 <bt_hci_le_enh_conn_complete+0xd6>
	conn->handle = handle;
    5000:	4620      	mov	r0, r4
	memcpy(dst, src, sizeof(*dst));
    5002:	2207      	movs	r2, #7
    5004:	f820 9b88 	strh.w	r9, [r0], #136
    5008:	a902      	add	r1, sp, #8
    500a:	f014 fdcb 	bl	19ba4 <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    500e:	7e2a      	ldrb	r2, [r5, #24]
    5010:	7deb      	ldrb	r3, [r5, #23]
    5012:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    5016:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    501a:	7eaa      	ldrb	r2, [r5, #26]
    501c:	7e6b      	ldrb	r3, [r5, #25]
    501e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    5022:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    5026:	7eeb      	ldrb	r3, [r5, #27]
    5028:	7f2a      	ldrb	r2, [r5, #28]
    502a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    502e:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
    5032:	78eb      	ldrb	r3, [r5, #3]
    5034:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
    5036:	2500      	movs	r5, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    5038:	2b01      	cmp	r3, #1
	conn->err = 0U;
    503a:	7265      	strb	r5, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    503c:	d11a      	bne.n	5074 <bt_hci_le_enh_conn_complete+0x1d4>
    503e:	2207      	movs	r2, #7
    5040:	4669      	mov	r1, sp
    5042:	f104 008f 	add.w	r0, r4, #143	; 0x8f
    5046:	f014 fdad 	bl	19ba4 <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    504a:	f000 fe2b 	bl	5ca4 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
    504e:	7a21      	ldrb	r1, [r4, #8]
    5050:	4e18      	ldr	r6, [pc, #96]	; (50b4 <bt_hci_le_enh_conn_complete+0x214>)
    5052:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    5056:	2207      	movs	r2, #7
    5058:	4431      	add	r1, r6
    505a:	f104 0096 	add.w	r0, r4, #150	; 0x96
    505e:	f014 fda1 	bl	19ba4 <memcpy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    5062:	f8d6 10ac 	ldr.w	r1, [r6, #172]	; 0xac
    5066:	462a      	mov	r2, r5
    5068:	f001 0340 	and.w	r3, r1, #64	; 0x40
    506c:	4313      	orrs	r3, r2
    506e:	d001      	beq.n	5074 <bt_hci_le_enh_conn_complete+0x1d4>
			bt_le_adv_resume();
    5070:	f000 fe1c 	bl	5cac <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    5074:	2107      	movs	r1, #7
    5076:	4620      	mov	r0, r4
    5078:	f001 fa2a 	bl	64d0 <bt_conn_set_state>
	if (is_disconnected) {
    507c:	f1b8 0f00 	cmp.w	r8, #0
    5080:	d003      	beq.n	508a <bt_hci_le_enh_conn_complete+0x1ea>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    5082:	2101      	movs	r1, #1
    5084:	4620      	mov	r0, r4
    5086:	f001 fa23 	bl	64d0 <bt_conn_set_state>
	bt_conn_connected(conn);
    508a:	4620      	mov	r0, r4
    508c:	f015 fa07 	bl	1a49e <bt_conn_connected>
	conn_auto_initiate(conn);
    5090:	4620      	mov	r0, r4
    5092:	f7ff fda1 	bl	4bd8 <conn_auto_initiate>
	bt_conn_unref(conn);
    5096:	4620      	mov	r0, r4
    5098:	e744      	b.n	4f24 <bt_hci_le_enh_conn_complete+0x84>
    509a:	bf00      	nop
    509c:	20002e40 	.word	0x20002e40
    50a0:	0001e4f8 	.word	0x0001e4f8
    50a4:	0001e408 	.word	0x0001e408
    50a8:	0001f805 	.word	0x0001f805
    50ac:	0001f821 	.word	0x0001f821
    50b0:	0001f83a 	.word	0x0001f83a
    50b4:	20000000 	.word	0x20000000

000050b8 <hci_event_prio>:

#endif /* CONFIG_BT_CONN */
};

void hci_event_prio(struct net_buf *buf)
{
    50b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    50bc:	4604      	mov	r4, r0
	struct net_buf_simple_state state;
	struct bt_hci_evt_hdr *hdr;
	uint8_t evt_flags;

	net_buf_simple_save(&buf->b, &state);
    50be:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    50c2:	4630      	mov	r0, r6
    50c4:	f018 f98c 	bl	1d3e0 <net_buf_simple_headroom>
	state->len = buf->len;
    50c8:	f8b4 800c 	ldrh.w	r8, [r4, #12]

	BT_ASSERT(buf->len >= sizeof(*hdr));
    50cc:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
    50d0:	4605      	mov	r5, r0
    50d2:	d80c      	bhi.n	50ee <hci_event_prio+0x36>
    50d4:	4a1c      	ldr	r2, [pc, #112]	; (5148 <hci_event_prio+0x90>)
    50d6:	491d      	ldr	r1, [pc, #116]	; (514c <hci_event_prio+0x94>)
    50d8:	481d      	ldr	r0, [pc, #116]	; (5150 <hci_event_prio+0x98>)
    50da:	f640 43dc 	movw	r3, #3292	; 0xcdc
    50de:	f013 fa43 	bl	18568 <printk>
    50e2:	4040      	eors	r0, r0
    50e4:	f380 8811 	msr	BASEPRI, r0
    50e8:	f04f 0003 	mov.w	r0, #3
    50ec:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    50ee:	2102      	movs	r1, #2
    50f0:	4630      	mov	r0, r6
    50f2:	f018 f949 	bl	1d388 <net_buf_simple_pull_mem>
    50f6:	4607      	mov	r7, r0

	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    50f8:	7800      	ldrb	r0, [r0, #0]
    50fa:	f015 f830 	bl	1a15e <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    50fe:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    5100:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    5102:	d40c      	bmi.n	511e <hci_event_prio+0x66>
    5104:	4a10      	ldr	r2, [pc, #64]	; (5148 <hci_event_prio+0x90>)
    5106:	4913      	ldr	r1, [pc, #76]	; (5154 <hci_event_prio+0x9c>)
    5108:	4811      	ldr	r0, [pc, #68]	; (5150 <hci_event_prio+0x98>)
    510a:	f44f 634e 	mov.w	r3, #3296	; 0xce0
    510e:	f013 fa2b 	bl	18568 <printk>
    5112:	4040      	eors	r0, r0
    5114:	f380 8811 	msr	BASEPRI, r0
    5118:	f04f 0003 	mov.w	r0, #3
    511c:	df02      	svc	2

	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    511e:	2305      	movs	r3, #5
    5120:	4a0d      	ldr	r2, [pc, #52]	; (5158 <hci_event_prio+0xa0>)
    5122:	7838      	ldrb	r0, [r7, #0]
    5124:	4621      	mov	r1, r4
    5126:	f7ff fbdd 	bl	48e4 <handle_event>

	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    512a:	07b3      	lsls	r3, r6, #30
    512c:	d507      	bpl.n	513e <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    512e:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    5130:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    5134:	fa10 f585 	uxtah	r5, r0, r5
    5138:	60a5      	str	r5, [r4, #8]
		net_buf_simple_restore(&buf->b, &state);
	} else {
		net_buf_unref(buf);
	}
}
    513a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    513e:	4620      	mov	r0, r4
}
    5140:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    5144:	f010 bb0a 	b.w	1575c <net_buf_unref>
    5148:	0001f6f7 	.word	0x0001f6f7
    514c:	0001f856 	.word	0x0001f856
    5150:	0001f734 	.word	0x0001f734
    5154:	0001f86f 	.word	0x0001f86f
    5158:	0001e8b0 	.word	0x0001e8b0

0000515c <bt_recv>:

int bt_recv(struct net_buf *buf)
{
    515c:	b570      	push	{r4, r5, r6, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    515e:	7d01      	ldrb	r1, [r0, #20]
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_DBG("buf %p len %u", buf, buf->len);

	switch (bt_buf_get_type(buf)) {
    5160:	2901      	cmp	r1, #1
{
    5162:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    5164:	d04b      	beq.n	51fe <bt_recv+0xa2>
    5166:	2903      	cmp	r1, #3
    5168:	d178      	bne.n	525c <bt_recv+0x100>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    516a:	8983      	ldrh	r3, [r0, #12]
    516c:	2b03      	cmp	r3, #3
    516e:	d80c      	bhi.n	518a <bt_recv+0x2e>
    5170:	4a42      	ldr	r2, [pc, #264]	; (527c <bt_recv+0x120>)
    5172:	4943      	ldr	r1, [pc, #268]	; (5280 <bt_recv+0x124>)
    5174:	4843      	ldr	r0, [pc, #268]	; (5284 <bt_recv+0x128>)
    5176:	f240 1379 	movw	r3, #377	; 0x179
    517a:	f013 f9f5 	bl	18568 <printk>
    517e:	4040      	eors	r0, r0
    5180:	f380 8811 	msr	BASEPRI, r0
    5184:	f04f 0003 	mov.w	r0, #3
    5188:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    518a:	2104      	movs	r1, #4
    518c:	f104 0008 	add.w	r0, r4, #8
    5190:	f018 f8fa 	bl	1d388 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    5194:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    5196:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    5198:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    519a:	23ff      	movs	r3, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
    519c:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    51a0:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
    51a2:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    51a4:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
    51a6:	d00d      	beq.n	51c4 <bt_recv+0x68>
    51a8:	4837      	ldr	r0, [pc, #220]	; (5288 <bt_recv+0x12c>)
    51aa:	4b38      	ldr	r3, [pc, #224]	; (528c <bt_recv+0x130>)
    51ac:	1a1b      	subs	r3, r3, r0
    51ae:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    51b0:	019b      	lsls	r3, r3, #6
    51b2:	4837      	ldr	r0, [pc, #220]	; (5290 <bt_recv+0x134>)
    51b4:	f043 0301 	orr.w	r3, r3, #1
    51b8:	f013 fe3c 	bl	18e34 <log_2>
	net_buf_unref(buf);
    51bc:	4620      	mov	r0, r4
    51be:	f010 facd 	bl	1575c <net_buf_unref>
    51c2:	e01a      	b.n	51fa <bt_recv+0x9e>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    51c4:	f001 f978 	bl	64b8 <bt_conn_lookup_handle>
	if (!conn) {
    51c8:	4605      	mov	r5, r0
    51ca:	b958      	cbnz	r0, 51e4 <bt_recv+0x88>
    51cc:	4b2e      	ldr	r3, [pc, #184]	; (5288 <bt_recv+0x12c>)
    51ce:	4a2f      	ldr	r2, [pc, #188]	; (528c <bt_recv+0x130>)
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    51d0:	8ae1      	ldrh	r1, [r4, #22]
    51d2:	4830      	ldr	r0, [pc, #192]	; (5294 <bt_recv+0x138>)
    51d4:	1ad2      	subs	r2, r2, r3
    51d6:	08d2      	lsrs	r2, r2, #3
    51d8:	0192      	lsls	r2, r2, #6
    51da:	f042 0201 	orr.w	r2, r2, #1
    51de:	f013 fe15 	bl	18e0c <log_1>
		net_buf_unref(buf);
    51e2:	e7eb      	b.n	51bc <bt_recv+0x60>
	acl(buf)->index = bt_conn_index(conn);
    51e4:	f001 fb60 	bl	68a8 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    51e8:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    51ea:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    51ec:	4621      	mov	r1, r4
    51ee:	4628      	mov	r0, r5
    51f0:	f001 f84c 	bl	628c <bt_conn_recv>
	bt_conn_unref(conn);
    51f4:	4628      	mov	r0, r5
    51f6:	f015 f996 	bl	1a526 <bt_conn_unref>

		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
			net_buf_put(&bt_dev.rx_queue, buf);
		}
#endif
		return 0;
    51fa:	2000      	movs	r0, #0
	default:
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
		return -EINVAL;
	}
}
    51fc:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    51fe:	8983      	ldrh	r3, [r0, #12]
    5200:	2b01      	cmp	r3, #1
    5202:	d80c      	bhi.n	521e <bt_recv+0xc2>
    5204:	4a1d      	ldr	r2, [pc, #116]	; (527c <bt_recv+0x120>)
    5206:	491e      	ldr	r1, [pc, #120]	; (5280 <bt_recv+0x124>)
    5208:	481e      	ldr	r0, [pc, #120]	; (5284 <bt_recv+0x128>)
    520a:	f640 03f9 	movw	r3, #2297	; 0x8f9
    520e:	f013 f9ab 	bl	18568 <printk>
    5212:	4040      	eors	r0, r0
    5214:	f380 8811 	msr	BASEPRI, r0
    5218:	f04f 0003 	mov.w	r0, #3
    521c:	df02      	svc	2
    521e:	2102      	movs	r1, #2
    5220:	f104 0008 	add.w	r0, r4, #8
    5224:	f018 f8b0 	bl	1d388 <net_buf_simple_pull_mem>
    5228:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    522a:	7800      	ldrb	r0, [r0, #0]
    522c:	f014 ff97 	bl	1a15e <bt_hci_evt_get_flags>
    5230:	0783      	lsls	r3, r0, #30
    5232:	d40c      	bmi.n	524e <bt_recv+0xf2>
    5234:	4a11      	ldr	r2, [pc, #68]	; (527c <bt_recv+0x120>)
    5236:	4918      	ldr	r1, [pc, #96]	; (5298 <bt_recv+0x13c>)
    5238:	4812      	ldr	r0, [pc, #72]	; (5284 <bt_recv+0x128>)
    523a:	f640 03fd 	movw	r3, #2301	; 0x8fd
    523e:	f013 f993 	bl	18568 <printk>
    5242:	4040      	eors	r0, r0
    5244:	f380 8811 	msr	BASEPRI, r0
    5248:	f04f 0003 	mov.w	r0, #3
    524c:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    524e:	4a13      	ldr	r2, [pc, #76]	; (529c <bt_recv+0x140>)
    5250:	7828      	ldrb	r0, [r5, #0]
    5252:	2304      	movs	r3, #4
    5254:	4621      	mov	r1, r4
    5256:	f7ff fb45 	bl	48e4 <handle_event>
    525a:	e7af      	b.n	51bc <bt_recv+0x60>
    525c:	4b0a      	ldr	r3, [pc, #40]	; (5288 <bt_recv+0x12c>)
    525e:	4a0b      	ldr	r2, [pc, #44]	; (528c <bt_recv+0x130>)
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    5260:	480f      	ldr	r0, [pc, #60]	; (52a0 <bt_recv+0x144>)
    5262:	1ad2      	subs	r2, r2, r3
    5264:	08d2      	lsrs	r2, r2, #3
    5266:	0192      	lsls	r2, r2, #6
    5268:	f042 0201 	orr.w	r2, r2, #1
    526c:	f013 fdce 	bl	18e0c <log_1>
		net_buf_unref(buf);
    5270:	4620      	mov	r0, r4
    5272:	f010 fa73 	bl	1575c <net_buf_unref>
		return -EINVAL;
    5276:	f06f 0015 	mvn.w	r0, #21
    527a:	e7bf      	b.n	51fc <bt_recv+0xa0>
    527c:	0001f6f7 	.word	0x0001f6f7
    5280:	0001f856 	.word	0x0001f856
    5284:	0001f734 	.word	0x0001f734
    5288:	0001e408 	.word	0x0001e408
    528c:	0001e4f8 	.word	0x0001e4f8
    5290:	0001f888 	.word	0x0001f888
    5294:	0001f8ac 	.word	0x0001f8ac
    5298:	0001f8ce 	.word	0x0001f8ce
    529c:	0001e880 	.word	0x0001e880
    52a0:	0001f8fc 	.word	0x0001f8fc

000052a4 <bt_recv_prio>:

#if defined(CONFIG_BT_RECV_IS_RX_THREAD)
int bt_recv_prio(struct net_buf *buf)
{
    52a4:	b510      	push	{r4, lr}
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    52a6:	7d03      	ldrb	r3, [r0, #20]
    52a8:	2b01      	cmp	r3, #1
{
    52aa:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    52ac:	d00c      	beq.n	52c8 <bt_recv_prio+0x24>
    52ae:	4a09      	ldr	r2, [pc, #36]	; (52d4 <bt_recv_prio+0x30>)
    52b0:	4909      	ldr	r1, [pc, #36]	; (52d8 <bt_recv_prio+0x34>)
    52b2:	480a      	ldr	r0, [pc, #40]	; (52dc <bt_recv_prio+0x38>)
    52b4:	f640 5323 	movw	r3, #3363	; 0xd23
    52b8:	f013 f956 	bl	18568 <printk>
    52bc:	4040      	eors	r0, r0
    52be:	f380 8811 	msr	BASEPRI, r0
    52c2:	f04f 0003 	mov.w	r0, #3
    52c6:	df02      	svc	2

	hci_event_prio(buf);
    52c8:	4620      	mov	r0, r4
    52ca:	f7ff fef5 	bl	50b8 <hci_event_prio>

	return 0;
}
    52ce:	2000      	movs	r0, #0
    52d0:	bd10      	pop	{r4, pc}
    52d2:	bf00      	nop
    52d4:	0001f6f7 	.word	0x0001f6f7
    52d8:	0001f910 	.word	0x0001f910
    52dc:	0001f734 	.word	0x0001f734

000052e0 <bt_hci_driver_register>:
#endif /* defined(CONFIG_BT_RECV_IS_RX_THREAD) */

int bt_hci_driver_register(const struct bt_hci_driver *drv)
{
	if (bt_dev.drv) {
    52e0:	4a08      	ldr	r2, [pc, #32]	; (5304 <bt_hci_driver_register+0x24>)
{
    52e2:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    52e4:	f8d2 011c 	ldr.w	r0, [r2, #284]	; 0x11c
    52e8:	b930      	cbnz	r0, 52f8 <bt_hci_driver_register+0x18>
		return -EALREADY;
	}

	if (!drv->open || !drv->send) {
    52ea:	68d9      	ldr	r1, [r3, #12]
    52ec:	b139      	cbz	r1, 52fe <bt_hci_driver_register+0x1e>
    52ee:	6919      	ldr	r1, [r3, #16]
    52f0:	b129      	cbz	r1, 52fe <bt_hci_driver_register+0x1e>
		return -EINVAL;
	}

	bt_dev.drv = drv;
    52f2:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
	BT_DBG("Registered %s", drv->name ? drv->name : "");

	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");

	return 0;
    52f6:	4770      	bx	lr
		return -EALREADY;
    52f8:	f06f 0077 	mvn.w	r0, #119	; 0x77
    52fc:	4770      	bx	lr
		return -EINVAL;
    52fe:	f06f 0015 	mvn.w	r0, #21
}
    5302:	4770      	bx	lr
    5304:	20000000 	.word	0x20000000

00005308 <bt_finalize_init>:

void bt_finalize_init(void)
{
    5308:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    530c:	4c2d      	ldr	r4, [pc, #180]	; (53c4 <bt_finalize_init+0xbc>)
    530e:	4d2e      	ldr	r5, [pc, #184]	; (53c8 <bt_finalize_init+0xc0>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    5310:	4e2e      	ldr	r6, [pc, #184]	; (53cc <bt_finalize_init+0xc4>)
		BT_INFO("Identity[%d]: %s",
    5312:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 53e4 <bt_finalize_init+0xdc>
{
    5316:	b087      	sub	sp, #28
    5318:	2102      	movs	r1, #2
    531a:	f104 0098 	add.w	r0, r4, #152	; 0x98
    531e:	f014 ff30 	bl	1a182 <atomic_or>
	atomic_set_bit(bt_dev.flags, BT_DEV_READY);

	if (IS_ENABLED(CONFIG_BT_OBSERVER)) {
		bt_le_scan_update(false);
    5322:	2000      	movs	r0, #0
    5324:	f000 fd3c 	bl	5da0 <bt_le_scan_update>
    5328:	4b29      	ldr	r3, [pc, #164]	; (53d0 <bt_finalize_init+0xc8>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    532a:	492a      	ldr	r1, [pc, #168]	; (53d4 <bt_finalize_init+0xcc>)
    532c:	1aed      	subs	r5, r5, r3
    532e:	79e3      	ldrb	r3, [r4, #7]
    5330:	4620      	mov	r0, r4
    5332:	2b01      	cmp	r3, #1
    5334:	bf88      	it	hi
    5336:	460e      	movhi	r6, r1
    5338:	f7fe fe9a 	bl	4070 <bt_addr_le_str_real>
    533c:	f7fc ffd2 	bl	22e4 <z_log_strdup>
    5340:	08ed      	lsrs	r5, r5, #3
    5342:	01ad      	lsls	r5, r5, #6
    5344:	f045 0703 	orr.w	r7, r5, #3
    5348:	4602      	mov	r2, r0
    534a:	4631      	mov	r1, r6
    534c:	4822      	ldr	r0, [pc, #136]	; (53d8 <bt_finalize_init+0xd0>)
    534e:	463b      	mov	r3, r7
    5350:	f013 fd70 	bl	18e34 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    5354:	46a0      	mov	r8, r4
    5356:	2601      	movs	r6, #1
    5358:	79e3      	ldrb	r3, [r4, #7]
    535a:	429e      	cmp	r6, r3
    535c:	f108 0807 	add.w	r8, r8, #7
    5360:	db22      	blt.n	53a8 <bt_finalize_init+0xa0>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    5362:	f894 6034 	ldrb.w	r6, [r4, #52]	; 0x34
    5366:	4630      	mov	r0, r6
    5368:	f7ff f914 	bl	4594 <ver_str>
    536c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    536e:	9304      	str	r3, [sp, #16]
    5370:	f045 0503 	orr.w	r5, r5, #3
    5374:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    5376:	9305      	str	r3, [sp, #20]
    5378:	e9cd 0602 	strd	r0, r6, [sp, #8]
    537c:	462b      	mov	r3, r5
    537e:	a902      	add	r1, sp, #8
    5380:	2204      	movs	r2, #4
    5382:	4816      	ldr	r0, [pc, #88]	; (53dc <bt_finalize_init+0xd4>)
    5384:	f013 fd8b 	bl	18e9e <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    5388:	f894 6035 	ldrb.w	r6, [r4, #53]	; 0x35
    538c:	4630      	mov	r0, r6
    538e:	f7ff f901 	bl	4594 <ver_str>
    5392:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    5394:	f8ad 5000 	strh.w	r5, [sp]
    5398:	4601      	mov	r1, r0
    539a:	4632      	mov	r2, r6
    539c:	4810      	ldr	r0, [pc, #64]	; (53e0 <bt_finalize_init+0xd8>)
    539e:	f013 fd62 	bl	18e66 <log_3>
	}

	bt_dev_show_info();
}
    53a2:	b007      	add	sp, #28
    53a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_INFO("Identity[%d]: %s",
    53a8:	4640      	mov	r0, r8
    53aa:	f7fe fe61 	bl	4070 <bt_addr_le_str_real>
    53ae:	f7fc ff99 	bl	22e4 <z_log_strdup>
    53b2:	4631      	mov	r1, r6
    53b4:	4602      	mov	r2, r0
    53b6:	463b      	mov	r3, r7
    53b8:	4648      	mov	r0, r9
    53ba:	f013 fd3b 	bl	18e34 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    53be:	3601      	adds	r6, #1
    53c0:	e7ca      	b.n	5358 <bt_finalize_init+0x50>
    53c2:	bf00      	nop
    53c4:	20000000 	.word	0x20000000
    53c8:	0001e4f8 	.word	0x0001e4f8
    53cc:	00021093 	.word	0x00021093
    53d0:	0001e408 	.word	0x0001e408
    53d4:	0001f933 	.word	0x0001f933
    53d8:	0001f937 	.word	0x0001f937
    53dc:	0001f957 	.word	0x0001f957
    53e0:	0001f995 	.word	0x0001f995
    53e4:	0001f946 	.word	0x0001f946

000053e8 <bt_init>:

static int bt_init(void)
{
    53e8:	b570      	push	{r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    53ea:	4dbb      	ldr	r5, [pc, #748]	; (56d8 <bt_init+0x2f0>)
    53ec:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
    53f0:	6899      	ldr	r1, [r3, #8]
    53f2:	f011 0101 	ands.w	r1, r1, #1
{
    53f6:	b086      	sub	sp, #24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    53f8:	d123      	bne.n	5442 <bt_init+0x5a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    53fa:	aa01      	add	r2, sp, #4
    53fc:	f640 4003 	movw	r0, #3075	; 0xc03
    5400:	f7ff fcd6 	bl	4db0 <bt_hci_cmd_send_sync>
		if (err) {
    5404:	4604      	mov	r4, r0
    5406:	2800      	cmp	r0, #0
    5408:	d175      	bne.n	54f6 <bt_init+0x10e>
		hci_reset_complete(rsp);
    540a:	9b01      	ldr	r3, [sp, #4]
	uint8_t status = buf->data[0];
    540c:	689b      	ldr	r3, [r3, #8]
	if (status) {
    540e:	781b      	ldrb	r3, [r3, #0]
    5410:	b9a3      	cbnz	r3, 543c <bt_init+0x54>
		bt_scan_reset();
    5412:	f000 fcbf 	bl	5d94 <bt_scan_reset>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5416:	f3bf 8f5b 	dmb	ish
    541a:	462b      	mov	r3, r5
    541c:	f853 2f98 	ldr.w	r2, [r3, #152]!
    5420:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    5424:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5428:	f3bf 8f5b 	dmb	ish
    542c:	e853 1f00 	ldrex	r1, [r3]
    5430:	e843 2000 	strex	r0, r2, [r3]
    5434:	2800      	cmp	r0, #0
    5436:	d1f9      	bne.n	542c <bt_init+0x44>
    5438:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    543c:	9801      	ldr	r0, [sp, #4]
    543e:	f010 f98d 	bl	1575c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    5442:	aa01      	add	r2, sp, #4
    5444:	2100      	movs	r1, #0
    5446:	f241 0003 	movw	r0, #4099	; 0x1003
    544a:	f7ff fcb1 	bl	4db0 <bt_hci_cmd_send_sync>
	if (err) {
    544e:	4604      	mov	r4, r0
    5450:	2800      	cmp	r0, #0
    5452:	d150      	bne.n	54f6 <bt_init+0x10e>
	read_local_features_complete(rsp);
    5454:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    5456:	48a1      	ldr	r0, [pc, #644]	; (56dc <bt_init+0x2f4>)
    5458:	6899      	ldr	r1, [r3, #8]
    545a:	2208      	movs	r2, #8
    545c:	3101      	adds	r1, #1
    545e:	f014 fba1 	bl	19ba4 <memcpy>
	net_buf_unref(rsp);
    5462:	9801      	ldr	r0, [sp, #4]
    5464:	f010 f97a 	bl	1575c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    5468:	4621      	mov	r1, r4
    546a:	aa01      	add	r2, sp, #4
    546c:	f241 0001 	movw	r0, #4097	; 0x1001
    5470:	f7ff fc9e 	bl	4db0 <bt_hci_cmd_send_sync>
	if (err) {
    5474:	4604      	mov	r4, r0
    5476:	2800      	cmp	r0, #0
    5478:	d13d      	bne.n	54f6 <bt_init+0x10e>
	read_local_ver_complete(rsp);
    547a:	9801      	ldr	r0, [sp, #4]
    547c:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    547e:	785a      	ldrb	r2, [r3, #1]
    5480:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    5484:	78d9      	ldrb	r1, [r3, #3]
    5486:	789a      	ldrb	r2, [r3, #2]
    5488:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    548c:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
    548e:	791a      	ldrb	r2, [r3, #4]
    5490:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    5494:	7a19      	ldrb	r1, [r3, #8]
    5496:	79da      	ldrb	r2, [r3, #7]
    5498:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    549c:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    549e:	795a      	ldrb	r2, [r3, #5]
    54a0:	799b      	ldrb	r3, [r3, #6]
    54a2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    54a6:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
    54a8:	f010 f958 	bl	1575c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    54ac:	4621      	mov	r1, r4
    54ae:	aa01      	add	r2, sp, #4
    54b0:	f241 0002 	movw	r0, #4098	; 0x1002
    54b4:	f7ff fc7c 	bl	4db0 <bt_hci_cmd_send_sync>
	if (err) {
    54b8:	4604      	mov	r4, r0
    54ba:	b9e0      	cbnz	r0, 54f6 <bt_init+0x10e>
	read_supported_commands_complete(rsp);
    54bc:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
    54be:	4888      	ldr	r0, [pc, #544]	; (56e0 <bt_init+0x2f8>)
    54c0:	6899      	ldr	r1, [r3, #8]
    54c2:	2240      	movs	r2, #64	; 0x40
    54c4:	3101      	adds	r1, #1
    54c6:	f014 fb6d 	bl	19ba4 <memcpy>
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
    54ca:	4885      	ldr	r0, [pc, #532]	; (56e0 <bt_init+0x2f8>)
    54cc:	f014 fc09 	bl	19ce2 <bt_hci_ecc_supported_commands>
	net_buf_unref(rsp);
    54d0:	9801      	ldr	r0, [sp, #4]
    54d2:	f010 f943 	bl	1575c <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    54d6:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    54da:	0658      	lsls	r0, r3, #25
    54dc:	d40e      	bmi.n	54fc <bt_init+0x114>
    54de:	4b81      	ldr	r3, [pc, #516]	; (56e4 <bt_init+0x2fc>)
    54e0:	4981      	ldr	r1, [pc, #516]	; (56e8 <bt_init+0x300>)
		BT_ERR("Non-LE capable controller detected!");
    54e2:	4882      	ldr	r0, [pc, #520]	; (56ec <bt_init+0x304>)
    54e4:	1ac9      	subs	r1, r1, r3
    54e6:	08c9      	lsrs	r1, r1, #3
    54e8:	0189      	lsls	r1, r1, #6
    54ea:	f041 0101 	orr.w	r1, r1, #1
    54ee:	f013 fc80 	bl	18df2 <log_0>
		return -ENODEV;
    54f2:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    54f6:	4620      	mov	r0, r4
    54f8:	b006      	add	sp, #24
    54fa:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    54fc:	4621      	mov	r1, r4
    54fe:	aa01      	add	r2, sp, #4
    5500:	f242 0003 	movw	r0, #8195	; 0x2003
    5504:	f7ff fc54 	bl	4db0 <bt_hci_cmd_send_sync>
	if (err) {
    5508:	4604      	mov	r4, r0
    550a:	2800      	cmp	r0, #0
    550c:	d1f3      	bne.n	54f6 <bt_init+0x10e>
	read_le_features_complete(rsp);
    550e:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    5510:	4877      	ldr	r0, [pc, #476]	; (56f0 <bt_init+0x308>)
    5512:	6899      	ldr	r1, [r3, #8]
    5514:	2208      	movs	r2, #8
    5516:	3101      	adds	r1, #1
    5518:	f014 fb44 	bl	19ba4 <memcpy>
	net_buf_unref(rsp);
    551c:	9801      	ldr	r0, [sp, #4]
    551e:	f010 f91d 	bl	1575c <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    5522:	4621      	mov	r1, r4
    5524:	aa01      	add	r2, sp, #4
    5526:	f242 0002 	movw	r0, #8194	; 0x2002
    552a:	f7ff fc41 	bl	4db0 <bt_hci_cmd_send_sync>
		if (err) {
    552e:	4604      	mov	r4, r0
    5530:	2800      	cmp	r0, #0
    5532:	d1e0      	bne.n	54f6 <bt_init+0x10e>
		le_read_buffer_size_complete(rsp);
    5534:	9b01      	ldr	r3, [sp, #4]
    5536:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    5538:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    553c:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
    5540:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
    5542:	b121      	cbz	r1, 554e <bt_init+0x166>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    5544:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
    5546:	486b      	ldr	r0, [pc, #428]	; (56f4 <bt_init+0x30c>)
    5548:	4611      	mov	r1, r2
    554a:	f018 fa8b 	bl	1da64 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    554e:	9801      	ldr	r0, [sp, #4]
    5550:	f010 f904 	bl	1575c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    5554:	f895 6040 	ldrb.w	r6, [r5, #64]	; 0x40
    5558:	f016 0620 	ands.w	r6, r6, #32
    555c:	f000 809f 	beq.w	569e <bt_init+0x2b6>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    5560:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    5564:	0719      	lsls	r1, r3, #28
    5566:	f100 80cb 	bmi.w	5700 <bt_init+0x318>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    556a:	2108      	movs	r1, #8
    556c:	f242 0001 	movw	r0, #8193	; 0x2001
    5570:	f7ff fac8 	bl	4b04 <bt_hci_cmd_create>
	if (!buf) {
    5574:	4604      	mov	r4, r0
    5576:	2800      	cmp	r0, #0
    5578:	f000 8098 	beq.w	56ac <bt_init+0x2c4>
	return net_buf_simple_add(&buf->b, len);
    557c:	2108      	movs	r1, #8
    557e:	4408      	add	r0, r1
    5580:	f017 fe9d 	bl	1d2be <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    5584:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    5588:	f895 2066 	ldrb.w	r2, [r5, #102]	; 0x66
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    558c:	f013 0f02 	tst.w	r3, #2
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    5590:	f002 0206 	and.w	r2, r2, #6
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    5594:	bf0c      	ite	eq
    5596:	230f      	moveq	r3, #15
    5598:	232f      	movne	r3, #47	; 0x2f
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    559a:	2a06      	cmp	r2, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    559c:	bf08      	it	eq
    559e:	f443 73c0 	orreq.w	r3, r3, #384	; 0x180
	dst[0] = val;
    55a2:	2200      	movs	r2, #0
    55a4:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    55a6:	0a1b      	lsrs	r3, r3, #8
    55a8:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    55aa:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    55ac:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    55ae:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    55b0:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    55b2:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    55b4:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    55b6:	4621      	mov	r1, r4
    55b8:	f242 0001 	movw	r0, #8193	; 0x2001
    55bc:	f7ff fbf8 	bl	4db0 <bt_hci_cmd_send_sync>
	if (err) {
    55c0:	4604      	mov	r4, r0
    55c2:	2800      	cmp	r0, #0
    55c4:	d197      	bne.n	54f6 <bt_init+0x10e>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    55c6:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    55ca:	069a      	lsls	r2, r3, #26
    55cc:	d41d      	bmi.n	560a <bt_init+0x222>
	if (bt_dev.le.acl_mtu) {
    55ce:	f8b5 10cc 	ldrh.w	r1, [r5, #204]	; 0xcc
    55d2:	b9d1      	cbnz	r1, 560a <bt_init+0x222>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    55d4:	aa01      	add	r2, sp, #4
    55d6:	f241 0005 	movw	r0, #4101	; 0x1005
    55da:	f7ff fbe9 	bl	4db0 <bt_hci_cmd_send_sync>
	if (err) {
    55de:	4604      	mov	r4, r0
    55e0:	2800      	cmp	r0, #0
    55e2:	d188      	bne.n	54f6 <bt_init+0x10e>
	if (bt_dev.le.acl_mtu) {
    55e4:	f8b5 30cc 	ldrh.w	r3, [r5, #204]	; 0xcc
    55e8:	b963      	cbnz	r3, 5604 <bt_init+0x21c>
	read_buffer_size_complete(rsp);
    55ea:	9b01      	ldr	r3, [sp, #4]
    55ec:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    55ee:	785a      	ldrb	r2, [r3, #1]
    55f0:	7899      	ldrb	r1, [r3, #2]
    55f2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    55f6:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    55fa:	889a      	ldrh	r2, [r3, #4]
    55fc:	483d      	ldr	r0, [pc, #244]	; (56f4 <bt_init+0x30c>)
    55fe:	4611      	mov	r1, r2
    5600:	f018 fa30 	bl	1da64 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    5604:	9801      	ldr	r0, [sp, #4]
    5606:	f010 f8a9 	bl	1575c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    560a:	2108      	movs	r1, #8
    560c:	f640 4001 	movw	r0, #3073	; 0xc01
    5610:	f7ff fa78 	bl	4b04 <bt_hci_cmd_create>
	if (!buf) {
    5614:	4604      	mov	r4, r0
    5616:	2800      	cmp	r0, #0
    5618:	d048      	beq.n	56ac <bt_init+0x2c4>
    561a:	2108      	movs	r1, #8
    561c:	4408      	add	r0, r1
    561e:	f017 fe4e 	bl	1d2be <net_buf_simple_add>
	dst[0] = val;
    5622:	2310      	movs	r3, #16
    5624:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    5626:	2388      	movs	r3, #136	; 0x88
    5628:	7043      	strb	r3, [r0, #1]
    562a:	2302      	movs	r3, #2
	dst[0] = val;
    562c:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    562e:	70c3      	strb	r3, [r0, #3]
    5630:	2320      	movs	r3, #32
	dst[0] = val;
    5632:	7082      	strb	r2, [r0, #2]
    5634:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    5636:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    5638:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    563a:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    563c:	4621      	mov	r1, r4
    563e:	f640 4001 	movw	r0, #3073	; 0xc01
    5642:	f7ff fbb5 	bl	4db0 <bt_hci_cmd_send_sync>
	if (err) {
    5646:	4604      	mov	r4, r0
    5648:	2800      	cmp	r0, #0
    564a:	f47f af54 	bne.w	54f6 <bt_init+0x10e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    564e:	4601      	mov	r1, r0
    5650:	466a      	mov	r2, sp
    5652:	f64f 4001 	movw	r0, #64513	; 0xfc01
    5656:	f7ff fbab 	bl	4db0 <bt_hci_cmd_send_sync>
	if (err) {
    565a:	4e23      	ldr	r6, [pc, #140]	; (56e8 <bt_init+0x300>)
    565c:	4b21      	ldr	r3, [pc, #132]	; (56e4 <bt_init+0x2fc>)
    565e:	1af6      	subs	r6, r6, r3
    5660:	08f6      	lsrs	r6, r6, #3
    5662:	01b6      	lsls	r6, r6, #6
    5664:	2800      	cmp	r0, #0
    5666:	d05f      	beq.n	5728 <bt_init+0x340>
		BT_WARN("Vendor HCI extensions not available");
    5668:	4823      	ldr	r0, [pc, #140]	; (56f8 <bt_init+0x310>)
    566a:	f046 0102 	orr.w	r1, r6, #2
			BT_WARN("Failed to read supported vendor features");
    566e:	f013 fbc0 	bl	18df2 <log_0>
	err = bt_id_init();
    5672:	f014 fe72 	bl	1a35a <bt_id_init>
	if (err) {
    5676:	4604      	mov	r4, r0
    5678:	2800      	cmp	r0, #0
    567a:	f47f af3c 	bne.w	54f6 <bt_init+0x10e>
		err = bt_conn_init();
    567e:	f001 f91f 	bl	68c0 <bt_conn_init>
		if (err) {
    5682:	4604      	mov	r4, r0
    5684:	2800      	cmp	r0, #0
    5686:	f47f af36 	bne.w	54f6 <bt_init+0x10e>
		if (!bt_dev.id_count) {
    568a:	79eb      	ldrb	r3, [r5, #7]
    568c:	2b00      	cmp	r3, #0
    568e:	f040 80b8 	bne.w	5802 <bt_init+0x41a>
			BT_INFO("No ID address. App must call settings_load()");
    5692:	481a      	ldr	r0, [pc, #104]	; (56fc <bt_init+0x314>)
    5694:	f046 0103 	orr.w	r1, r6, #3
    5698:	f013 fbab 	bl	18df2 <log_0>
			return 0;
    569c:	e72b      	b.n	54f6 <bt_init+0x10e>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    569e:	2102      	movs	r1, #2
    56a0:	f640 406d 	movw	r0, #3181	; 0xc6d
    56a4:	f7ff fa2e 	bl	4b04 <bt_hci_cmd_create>
		if (!buf) {
    56a8:	4604      	mov	r4, r0
    56aa:	b910      	cbnz	r0, 56b2 <bt_init+0x2ca>
		return -ENOBUFS;
    56ac:	f06f 0468 	mvn.w	r4, #104	; 0x68
    56b0:	e721      	b.n	54f6 <bt_init+0x10e>
    56b2:	2102      	movs	r1, #2
    56b4:	3008      	adds	r0, #8
    56b6:	f017 fe02 	bl	1d2be <net_buf_simple_add>
		cp_le->le = 0x01;
    56ba:	2301      	movs	r3, #1
    56bc:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    56be:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    56c0:	4621      	mov	r1, r4
    56c2:	4632      	mov	r2, r6
    56c4:	f640 406d 	movw	r0, #3181	; 0xc6d
    56c8:	f7ff fb72 	bl	4db0 <bt_hci_cmd_send_sync>
		if (err) {
    56cc:	4604      	mov	r4, r0
    56ce:	2800      	cmp	r0, #0
    56d0:	f43f af46 	beq.w	5560 <bt_init+0x178>
    56d4:	e70f      	b.n	54f6 <bt_init+0x10e>
    56d6:	bf00      	nop
    56d8:	20000000 	.word	0x20000000
    56dc:	2000003c 	.word	0x2000003c
    56e0:	20000044 	.word	0x20000044
    56e4:	0001e408 	.word	0x0001e408
    56e8:	0001e4f8 	.word	0x0001e4f8
    56ec:	0001f9bc 	.word	0x0001f9bc
    56f0:	200000a0 	.word	0x200000a0
    56f4:	200000d0 	.word	0x200000d0
    56f8:	0001f9e0 	.word	0x0001f9e0
    56fc:	0001fab4 	.word	0x0001fab4
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    5700:	aa01      	add	r2, sp, #4
    5702:	2100      	movs	r1, #0
    5704:	f242 001c 	movw	r0, #8220	; 0x201c
    5708:	f7ff fb52 	bl	4db0 <bt_hci_cmd_send_sync>
		if (err) {
    570c:	4604      	mov	r4, r0
    570e:	2800      	cmp	r0, #0
    5710:	f47f aef1 	bne.w	54f6 <bt_init+0x10e>
		le_read_supp_states_complete(rsp);
    5714:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    5716:	6883      	ldr	r3, [r0, #8]
    5718:	f853 2f01 	ldr.w	r2, [r3, #1]!
    571c:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    571e:	e9c5 232a 	strd	r2, r3, [r5, #168]	; 0xa8
		net_buf_unref(rsp);
    5722:	f010 f81b 	bl	1575c <net_buf_unref>
    5726:	e720      	b.n	556a <bt_init+0x182>
	rp.info = (void *)rsp->data;
    5728:	9b00      	ldr	r3, [sp, #0]
	BT_INFO("HW Platform: %s (0x%04x)",
    572a:	4839      	ldr	r0, [pc, #228]	; (5810 <bt_init+0x428>)
	rp.info = (void *)rsp->data;
    572c:	689c      	ldr	r4, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    572e:	f8b4 2001 	ldrh.w	r2, [r4, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
    5732:	2a03      	cmp	r2, #3
		return plat_str[platform];
    5734:	bf96      	itet	ls
    5736:	4937      	ldrls	r1, [pc, #220]	; (5814 <bt_init+0x42c>)
	return "unknown";
    5738:	4937      	ldrhi	r1, [pc, #220]	; (5818 <bt_init+0x430>)
		return plat_str[platform];
    573a:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    573e:	f046 0303 	orr.w	r3, r6, #3
    5742:	f013 fb77 	bl	18e34 <log_2>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    5746:	f8b4 1001 	ldrh.w	r1, [r4, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    574a:	f8b4 2003 	ldrh.w	r2, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    574e:	2902      	cmp	r1, #2
	BT_INFO("HW Variant: %s (0x%04x)",
    5750:	f046 0303 	orr.w	r3, r6, #3
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    5754:	d12e      	bne.n	57b4 <bt_init+0x3cc>
	if (variant < ARRAY_SIZE(nordic_str)) {
    5756:	2a03      	cmp	r2, #3
    5758:	d82c      	bhi.n	57b4 <bt_init+0x3cc>
		return nordic_str[variant];
    575a:	4930      	ldr	r1, [pc, #192]	; (581c <bt_init+0x434>)
    575c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    5760:	482f      	ldr	r0, [pc, #188]	; (5820 <bt_init+0x438>)
    5762:	f013 fb67 	bl	18e34 <log_2>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    5766:	7962      	ldrb	r2, [r4, #5]
    5768:	482e      	ldr	r0, [pc, #184]	; (5824 <bt_init+0x43c>)
	if (variant < ARRAY_SIZE(var_str)) {
    576a:	2a03      	cmp	r2, #3
		return var_str[variant];
    576c:	bf96      	itet	ls
    576e:	492e      	ldrls	r1, [pc, #184]	; (5828 <bt_init+0x440>)
	return "unknown";
    5770:	4929      	ldrhi	r1, [pc, #164]	; (5818 <bt_init+0x430>)
		return var_str[variant];
    5772:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    5776:	e9cd 1201 	strd	r1, r2, [sp, #4]
    577a:	79a2      	ldrb	r2, [r4, #6]
    577c:	9203      	str	r2, [sp, #12]
    577e:	f8b4 2007 	ldrh.w	r2, [r4, #7]
    5782:	9204      	str	r2, [sp, #16]
    5784:	f8d4 2009 	ldr.w	r2, [r4, #9]
    5788:	9205      	str	r2, [sp, #20]
    578a:	f046 0303 	orr.w	r3, r6, #3
    578e:	2205      	movs	r2, #5
    5790:	a901      	add	r1, sp, #4
    5792:	f013 fb84 	bl	18e9e <log_n>
	net_buf_unref(rsp);
    5796:	9800      	ldr	r0, [sp, #0]
    5798:	f00f ffe0 	bl	1575c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    579c:	466a      	mov	r2, sp
    579e:	2100      	movs	r1, #0
    57a0:	f64f 4002 	movw	r0, #64514	; 0xfc02
    57a4:	f7ff fb04 	bl	4db0 <bt_hci_cmd_send_sync>
	if (err) {
    57a8:	4604      	mov	r4, r0
    57aa:	b128      	cbz	r0, 57b8 <bt_init+0x3d0>
		BT_WARN("Failed to read supported vendor commands");
    57ac:	481f      	ldr	r0, [pc, #124]	; (582c <bt_init+0x444>)
    57ae:	f046 0102 	orr.w	r1, r6, #2
    57b2:	e75c      	b.n	566e <bt_init+0x286>
		return "unknown";
    57b4:	4918      	ldr	r1, [pc, #96]	; (5818 <bt_init+0x430>)
    57b6:	e7d3      	b.n	5760 <bt_init+0x378>
	rp.cmds = (void *)rsp->data;
    57b8:	9b00      	ldr	r3, [sp, #0]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    57ba:	481d      	ldr	r0, [pc, #116]	; (5830 <bt_init+0x448>)
    57bc:	6899      	ldr	r1, [r3, #8]
    57be:	2202      	movs	r2, #2
    57c0:	3101      	adds	r1, #1
    57c2:	f014 f9ef 	bl	19ba4 <memcpy>
	net_buf_unref(rsp);
    57c6:	9800      	ldr	r0, [sp, #0]
    57c8:	f00f ffc8 	bl	1575c <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    57cc:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
    57d0:	075b      	lsls	r3, r3, #29
    57d2:	f57f af4e 	bpl.w	5672 <bt_init+0x28a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    57d6:	466a      	mov	r2, sp
    57d8:	4621      	mov	r1, r4
    57da:	f64f 4003 	movw	r0, #64515	; 0xfc03
    57de:	f7ff fae7 	bl	4db0 <bt_hci_cmd_send_sync>
		if (err) {
    57e2:	b118      	cbz	r0, 57ec <bt_init+0x404>
			BT_WARN("Failed to read supported vendor features");
    57e4:	4813      	ldr	r0, [pc, #76]	; (5834 <bt_init+0x44c>)
    57e6:	f046 0102 	orr.w	r1, r6, #2
    57ea:	e740      	b.n	566e <bt_init+0x286>
		rp.feat = (void *)rsp->data;
    57ec:	9b00      	ldr	r3, [sp, #0]
		memcpy(bt_dev.vs_features, rp.feat->features,
    57ee:	4812      	ldr	r0, [pc, #72]	; (5838 <bt_init+0x450>)
    57f0:	6899      	ldr	r1, [r3, #8]
    57f2:	2201      	movs	r2, #1
    57f4:	4411      	add	r1, r2
    57f6:	f014 f9d5 	bl	19ba4 <memcpy>
		net_buf_unref(rsp);
    57fa:	9800      	ldr	r0, [sp, #0]
    57fc:	f00f ffae 	bl	1575c <net_buf_unref>
    5800:	e737      	b.n	5672 <bt_init+0x28a>
    5802:	2104      	movs	r1, #4
    5804:	480d      	ldr	r0, [pc, #52]	; (583c <bt_init+0x454>)
    5806:	f014 fcbc 	bl	1a182 <atomic_or>
	bt_finalize_init();
    580a:	f7ff fd7d 	bl	5308 <bt_finalize_init>
	return 0;
    580e:	e672      	b.n	54f6 <bt_init+0x10e>
    5810:	0001fa04 	.word	0x0001fa04
    5814:	0001e8a0 	.word	0x0001e8a0
    5818:	0001f558 	.word	0x0001f558
    581c:	0001e870 	.word	0x0001e870
    5820:	0001fa1d 	.word	0x0001fa1d
    5824:	0001fa35 	.word	0x0001fa35
    5828:	0001e8d8 	.word	0x0001e8d8
    582c:	0001fa62 	.word	0x0001fa62
    5830:	20000085 	.word	0x20000085
    5834:	0001fa8b 	.word	0x0001fa8b
    5838:	20000084 	.word	0x20000084
    583c:	20000098 	.word	0x20000098

00005840 <init_work>:

static void init_work(struct k_work *work)
{
    5840:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    5842:	f7ff fdd1 	bl	53e8 <bt_init>
	if (ready_cb) {
    5846:	4b03      	ldr	r3, [pc, #12]	; (5854 <init_work+0x14>)
    5848:	681b      	ldr	r3, [r3, #0]
    584a:	b113      	cbz	r3, 5852 <init_work+0x12>
		ready_cb(err);
	}
}
    584c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    5850:	4718      	bx	r3
}
    5852:	bd10      	pop	{r4, pc}
    5854:	200019d4 	.word	0x200019d4

00005858 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
    5858:	4800      	ldr	r0, [pc, #0]	; (585c <bt_get_name+0x4>)
    585a:	4770      	bx	lr
    585c:	0001fae1 	.word	0x0001fae1

00005860 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    5860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    5862:	4f0b      	ldr	r7, [pc, #44]	; (5890 <id_find+0x30>)
{
    5864:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    5866:	2500      	movs	r5, #0
    5868:	79fb      	ldrb	r3, [r7, #7]
    586a:	b2ec      	uxtb	r4, r5
    586c:	42a3      	cmp	r3, r4
    586e:	d802      	bhi.n	5876 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    5870:	f06f 0401 	mvn.w	r4, #1
    5874:	e009      	b.n	588a <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    5876:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
    587a:	2207      	movs	r2, #7
    587c:	4439      	add	r1, r7
    587e:	4630      	mov	r0, r6
    5880:	f014 f980 	bl	19b84 <memcmp>
    5884:	3501      	adds	r5, #1
    5886:	2800      	cmp	r0, #0
    5888:	d1ee      	bne.n	5868 <id_find+0x8>
}
    588a:	4620      	mov	r0, r4
    588c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    588e:	bf00      	nop
    5890:	20000000 	.word	0x20000000

00005894 <set_random_address>:
{
    5894:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
    5896:	4914      	ldr	r1, [pc, #80]	; (58e8 <set_random_address+0x54>)
    5898:	2206      	movs	r2, #6
    589a:	4605      	mov	r5, r0
    589c:	f014 f972 	bl	19b84 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    58a0:	4604      	mov	r4, r0
    58a2:	b1e0      	cbz	r0, 58de <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    58a4:	2106      	movs	r1, #6
    58a6:	f242 0005 	movw	r0, #8197	; 0x2005
    58aa:	f7ff f92b 	bl	4b04 <bt_hci_cmd_create>
	if (!buf) {
    58ae:	4604      	mov	r4, r0
    58b0:	b1b8      	cbz	r0, 58e2 <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    58b2:	2206      	movs	r2, #6
    58b4:	4629      	mov	r1, r5
    58b6:	3008      	adds	r0, #8
    58b8:	f017 fd07 	bl	1d2ca <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    58bc:	4621      	mov	r1, r4
    58be:	2200      	movs	r2, #0
    58c0:	f242 0005 	movw	r0, #8197	; 0x2005
    58c4:	f7ff fa74 	bl	4db0 <bt_hci_cmd_send_sync>
	if (err) {
    58c8:	4604      	mov	r4, r0
    58ca:	b940      	cbnz	r0, 58de <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
    58cc:	2206      	movs	r2, #6
    58ce:	4806      	ldr	r0, [pc, #24]	; (58e8 <set_random_address+0x54>)
    58d0:	4629      	mov	r1, r5
    58d2:	f014 f967 	bl	19ba4 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    58d6:	4b05      	ldr	r3, [pc, #20]	; (58ec <set_random_address+0x58>)
    58d8:	2201      	movs	r2, #1
    58da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
    58de:	4620      	mov	r0, r4
    58e0:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    58e2:	f06f 0468 	mvn.w	r4, #104	; 0x68
    58e6:	e7fa      	b.n	58de <set_random_address+0x4a>
    58e8:	2000002d 	.word	0x2000002d
    58ec:	20000000 	.word	0x20000000

000058f0 <id_create.isra.0>:

static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    58f0:	b530      	push	{r4, r5, lr}
    58f2:	4c19      	ldr	r4, [pc, #100]	; (5958 <id_create.isra.0+0x68>)
    58f4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    58f8:	b085      	sub	sp, #20
    58fa:	4404      	add	r4, r0
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    58fc:	460d      	mov	r5, r1
    58fe:	b1b9      	cbz	r1, 5930 <id_create.isra.0+0x40>
    5900:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    5902:	2207      	movs	r2, #7
    5904:	a902      	add	r1, sp, #8
    5906:	4628      	mov	r0, r5
    5908:	9302      	str	r3, [sp, #8]
    590a:	f8cd 300b 	str.w	r3, [sp, #11]
    590e:	f014 f939 	bl	19b84 <memcmp>
    5912:	b168      	cbz	r0, 5930 <id_create.isra.0+0x40>
	memcpy(dst, src, sizeof(*dst));
    5914:	2207      	movs	r2, #7
    5916:	4629      	mov	r1, r5
    5918:	4620      	mov	r0, r4
    591a:	f014 f943 	bl	19ba4 <memcpy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    591e:	480f      	ldr	r0, [pc, #60]	; (595c <id_create.isra.0+0x6c>)
    5920:	f014 fcee 	bl	1a300 <atomic_get>
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    5924:	0783      	lsls	r3, r0, #30
    5926:	d501      	bpl.n	592c <id_create.isra.0+0x3c>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
    5928:	f7fe fd50 	bl	43cc <bt_settings_save_id>
	}
}
    592c:	b005      	add	sp, #20
    592e:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
    5930:	4668      	mov	r0, sp
    5932:	f014 fc06 	bl	1a142 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    5936:	4668      	mov	r0, sp
    5938:	f7ff ff92 	bl	5860 <id_find>
    593c:	2800      	cmp	r0, #0
    593e:	daf7      	bge.n	5930 <id_create.isra.0+0x40>
    5940:	2207      	movs	r2, #7
    5942:	4669      	mov	r1, sp
    5944:	4620      	mov	r0, r4
    5946:	f014 f92d 	bl	19ba4 <memcpy>
		if (addr) {
    594a:	2d00      	cmp	r5, #0
    594c:	d0e7      	beq.n	591e <id_create.isra.0+0x2e>
    594e:	2207      	movs	r2, #7
    5950:	4621      	mov	r1, r4
    5952:	4628      	mov	r0, r5
    5954:	e7e1      	b.n	591a <id_create.isra.0+0x2a>
    5956:	bf00      	nop
    5958:	20000000 	.word	0x20000000
    595c:	20000098 	.word	0x20000098

00005960 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    5960:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5962:	460c      	mov	r4, r1
	int new_id;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    5964:	4605      	mov	r5, r0
    5966:	b918      	cbnz	r0, 5970 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    5968:	b34c      	cbz	r4, 59be <bt_id_create+0x5e>
		return -EINVAL;
    596a:	f06f 0415 	mvn.w	r4, #21
    596e:	e023      	b.n	59b8 <bt_id_create+0x58>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    5970:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    5972:	2207      	movs	r2, #7
    5974:	4669      	mov	r1, sp
    5976:	9300      	str	r3, [sp, #0]
    5978:	f8cd 3003 	str.w	r3, [sp, #3]
    597c:	f014 f902 	bl	19b84 <memcmp>
    5980:	2800      	cmp	r0, #0
    5982:	d0f1      	beq.n	5968 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    5984:	782b      	ldrb	r3, [r5, #0]
    5986:	2b01      	cmp	r3, #1
    5988:	d104      	bne.n	5994 <bt_id_create+0x34>
    598a:	79ab      	ldrb	r3, [r5, #6]
    598c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    5990:	2bc0      	cmp	r3, #192	; 0xc0
    5992:	d00a      	beq.n	59aa <bt_id_create+0x4a>
    5994:	4b1a      	ldr	r3, [pc, #104]	; (5a00 <bt_id_create+0xa0>)
    5996:	491b      	ldr	r1, [pc, #108]	; (5a04 <bt_id_create+0xa4>)
			BT_ERR("Only static random identity address supported");
    5998:	481b      	ldr	r0, [pc, #108]	; (5a08 <bt_id_create+0xa8>)
    599a:	1ac9      	subs	r1, r1, r3
    599c:	08c9      	lsrs	r1, r1, #3
    599e:	0189      	lsls	r1, r1, #6
    59a0:	f041 0101 	orr.w	r1, r1, #1
    59a4:	f013 fa25 	bl	18df2 <log_0>
			return -EINVAL;
    59a8:	e7df      	b.n	596a <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    59aa:	4628      	mov	r0, r5
    59ac:	f7ff ff58 	bl	5860 <id_find>
    59b0:	2800      	cmp	r0, #0
    59b2:	dbd9      	blt.n	5968 <bt_id_create+0x8>
			return -EALREADY;
    59b4:	f06f 0477 	mvn.w	r4, #119	; 0x77

	new_id = bt_dev.id_count++;
	id_create(new_id, addr, irk);

	return new_id;
}
    59b8:	4620      	mov	r0, r4
    59ba:	b002      	add	sp, #8
    59bc:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    59be:	4e13      	ldr	r6, [pc, #76]	; (5a0c <bt_id_create+0xac>)
    59c0:	79f3      	ldrb	r3, [r6, #7]
    59c2:	2b01      	cmp	r3, #1
    59c4:	d019      	beq.n	59fa <bt_id_create+0x9a>
    59c6:	f106 0098 	add.w	r0, r6, #152	; 0x98
    59ca:	f014 fc99 	bl	1a300 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    59ce:	07c3      	lsls	r3, r0, #31
    59d0:	d40b      	bmi.n	59ea <bt_id_create+0x8a>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
    59d2:	2d00      	cmp	r5, #0
    59d4:	d0c9      	beq.n	596a <bt_id_create+0xa>
    59d6:	2207      	movs	r2, #7
    59d8:	4669      	mov	r1, sp
    59da:	4628      	mov	r0, r5
    59dc:	9400      	str	r4, [sp, #0]
    59de:	f8cd 4003 	str.w	r4, [sp, #3]
    59e2:	f014 f8cf 	bl	19b84 <memcmp>
    59e6:	2800      	cmp	r0, #0
    59e8:	d0bf      	beq.n	596a <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
    59ea:	79f4      	ldrb	r4, [r6, #7]
	id_create(new_id, addr, irk);
    59ec:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
    59ee:	1c63      	adds	r3, r4, #1
	id_create(new_id, addr, irk);
    59f0:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    59f2:	71f3      	strb	r3, [r6, #7]
	id_create(new_id, addr, irk);
    59f4:	f7ff ff7c 	bl	58f0 <id_create.isra.0>
	return new_id;
    59f8:	e7de      	b.n	59b8 <bt_id_create+0x58>
		return -ENOMEM;
    59fa:	f06f 040b 	mvn.w	r4, #11
    59fe:	e7db      	b.n	59b8 <bt_id_create+0x58>
    5a00:	0001e408 	.word	0x0001e408
    5a04:	0001e508 	.word	0x0001e508
    5a08:	0001fae8 	.word	0x0001fae8
    5a0c:	20000000 	.word	0x20000000

00005a10 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
    5a10:	b570      	push	{r4, r5, r6, lr}
    5a12:	b086      	sub	sp, #24
    5a14:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    5a16:	aa01      	add	r2, sp, #4
    5a18:	2100      	movs	r1, #0
    5a1a:	f241 0009 	movw	r0, #4105	; 0x1009
    5a1e:	f7ff f9c7 	bl	4db0 <bt_hci_cmd_send_sync>
	if (err) {
    5a22:	4604      	mov	r4, r0
    5a24:	b160      	cbz	r0, 5a40 <bt_id_read_public_addr+0x30>
    5a26:	491a      	ldr	r1, [pc, #104]	; (5a90 <bt_id_read_public_addr+0x80>)
    5a28:	4b1a      	ldr	r3, [pc, #104]	; (5a94 <bt_id_read_public_addr+0x84>)
		BT_WARN("Failed to read public address");
    5a2a:	481b      	ldr	r0, [pc, #108]	; (5a98 <bt_id_read_public_addr+0x88>)
    5a2c:	1ac9      	subs	r1, r1, r3
    5a2e:	08c9      	lsrs	r1, r1, #3
    5a30:	0189      	lsls	r1, r1, #6
    5a32:	f041 0102 	orr.w	r1, r1, #2
    5a36:	f013 f9dc 	bl	18df2 <log_0>

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
		return 0U;
    5a3a:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
    5a3c:	b006      	add	sp, #24
    5a3e:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    5a40:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    5a42:	9002      	str	r0, [sp, #8]
    5a44:	689d      	ldr	r5, [r3, #8]
    5a46:	f8ad 000c 	strh.w	r0, [sp, #12]
    5a4a:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
    5a4c:	2206      	movs	r2, #6
    5a4e:	a902      	add	r1, sp, #8
    5a50:	4628      	mov	r0, r5
    5a52:	f014 f897 	bl	19b84 <memcmp>
    5a56:	b918      	cbnz	r0, 5a60 <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
    5a58:	9801      	ldr	r0, [sp, #4]
    5a5a:	f00f fe7f 	bl	1575c <net_buf_unref>
    5a5e:	e7ec      	b.n	5a3a <bt_id_read_public_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    5a60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5a64:	2206      	movs	r2, #6
    5a66:	a904      	add	r1, sp, #16
    5a68:	4628      	mov	r0, r5
    5a6a:	9304      	str	r3, [sp, #16]
    5a6c:	f8ad 3014 	strh.w	r3, [sp, #20]
    5a70:	f014 f888 	bl	19b84 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    5a74:	2800      	cmp	r0, #0
    5a76:	d0ef      	beq.n	5a58 <bt_id_read_public_addr+0x48>
	memcpy(dst, src, sizeof(*dst));
    5a78:	2206      	movs	r2, #6
    5a7a:	4629      	mov	r1, r5
    5a7c:	1c70      	adds	r0, r6, #1
    5a7e:	f014 f891 	bl	19ba4 <memcpy>
	net_buf_unref(rsp);
    5a82:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    5a84:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
    5a86:	f00f fe69 	bl	1575c <net_buf_unref>
	return 1U;
    5a8a:	2001      	movs	r0, #1
    5a8c:	e7d6      	b.n	5a3c <bt_id_read_public_addr+0x2c>
    5a8e:	bf00      	nop
    5a90:	0001e508 	.word	0x0001e508
    5a94:	0001e408 	.word	0x0001e408
    5a98:	0001fb16 	.word	0x0001fb16

00005a9c <bt_setup_public_id_addr>:

void bt_setup_public_id_addr(void)
{
    5a9c:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
    5a9e:	4668      	mov	r0, sp
    5aa0:	f7ff ffb6 	bl	5a10 <bt_id_read_public_addr>
    5aa4:	4b04      	ldr	r3, [pc, #16]	; (5ab8 <bt_setup_public_id_addr+0x1c>)
    5aa6:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
    5aa8:	b118      	cbz	r0, 5ab2 <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	id_create(BT_ID_DEFAULT, &addr, irk);
    5aaa:	4669      	mov	r1, sp
    5aac:	2000      	movs	r0, #0
    5aae:	f7ff ff1f 	bl	58f0 <id_create.isra.0>
}
    5ab2:	b003      	add	sp, #12
    5ab4:	f85d fb04 	ldr.w	pc, [sp], #4
    5ab8:	20000000 	.word	0x20000000

00005abc <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    5abc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    5ac0:	4b25      	ldr	r3, [pc, #148]	; (5b58 <bt_read_static_addr+0x9c>)
    5ac2:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
    5ac6:	f014 0401 	ands.w	r4, r4, #1
{
    5aca:	4607      	mov	r7, r0
    5acc:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    5ace:	d10a      	bne.n	5ae6 <bt_read_static_addr+0x2a>
    5ad0:	4922      	ldr	r1, [pc, #136]	; (5b5c <bt_read_static_addr+0xa0>)
    5ad2:	4b23      	ldr	r3, [pc, #140]	; (5b60 <bt_read_static_addr+0xa4>)
		BT_WARN("Read Static Addresses command not available");
    5ad4:	4823      	ldr	r0, [pc, #140]	; (5b64 <bt_read_static_addr+0xa8>)
    5ad6:	1ac9      	subs	r1, r1, r3
    5ad8:	08c9      	lsrs	r1, r1, #3
    5ada:	0189      	lsls	r1, r1, #6
    5adc:	f041 0102 	orr.w	r1, r1, #2
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
    5ae0:	f013 f987 	bl	18df2 <log_0>
    5ae4:	e012      	b.n	5b0c <bt_read_static_addr+0x50>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    5ae6:	aa01      	add	r2, sp, #4
    5ae8:	2100      	movs	r1, #0
    5aea:	f64f 4009 	movw	r0, #64521	; 0xfc09
    5aee:	f7ff f95f 	bl	4db0 <bt_hci_cmd_send_sync>
	if (err) {
    5af2:	4605      	mov	r5, r0
    5af4:	b170      	cbz	r0, 5b14 <bt_read_static_addr+0x58>
    5af6:	4b1a      	ldr	r3, [pc, #104]	; (5b60 <bt_read_static_addr+0xa4>)
    5af8:	4918      	ldr	r1, [pc, #96]	; (5b5c <bt_read_static_addr+0xa0>)
		BT_WARN("Failed to read static addresses");
    5afa:	481b      	ldr	r0, [pc, #108]	; (5b68 <bt_read_static_addr+0xac>)
    5afc:	1ac9      	subs	r1, r1, r3
    5afe:	08c9      	lsrs	r1, r1, #3
    5b00:	0189      	lsls	r1, r1, #6
    5b02:	f041 0102 	orr.w	r1, r1, #2
    5b06:	f013 f974 	bl	18df2 <log_0>
		return 0;
    5b0a:	2400      	movs	r4, #0
	}

	return cnt;
}
    5b0c:	4620      	mov	r0, r4
    5b0e:	b002      	add	sp, #8
    5b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rp = (void *)rsp->data;
    5b14:	9b01      	ldr	r3, [sp, #4]
    5b16:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    5b18:	785c      	ldrb	r4, [r3, #1]
    5b1a:	42b4      	cmp	r4, r6
    5b1c:	bf28      	it	cs
    5b1e:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    5b20:	f04f 0816 	mov.w	r8, #22
    5b24:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
    5b26:	42a5      	cmp	r5, r4
    5b28:	db0d      	blt.n	5b46 <bt_read_static_addr+0x8a>
	net_buf_unref(rsp);
    5b2a:	9801      	ldr	r0, [sp, #4]
    5b2c:	f00f fe16 	bl	1575c <net_buf_unref>
	if (!cnt) {
    5b30:	2c00      	cmp	r4, #0
    5b32:	d1eb      	bne.n	5b0c <bt_read_static_addr+0x50>
    5b34:	4909      	ldr	r1, [pc, #36]	; (5b5c <bt_read_static_addr+0xa0>)
    5b36:	4b0a      	ldr	r3, [pc, #40]	; (5b60 <bt_read_static_addr+0xa4>)
		BT_WARN("No static addresses stored in controller");
    5b38:	480c      	ldr	r0, [pc, #48]	; (5b6c <bt_read_static_addr+0xb0>)
    5b3a:	1ac9      	subs	r1, r1, r3
    5b3c:	08c9      	lsrs	r1, r1, #3
    5b3e:	0189      	lsls	r1, r1, #6
    5b40:	f041 0102 	orr.w	r1, r1, #2
    5b44:	e7cc      	b.n	5ae0 <bt_read_static_addr+0x24>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    5b46:	fb08 7005 	mla	r0, r8, r5, r7
    5b4a:	2216      	movs	r2, #22
    5b4c:	4631      	mov	r1, r6
    5b4e:	f014 f829 	bl	19ba4 <memcpy>
	for (i = 0; i < cnt; i++) {
    5b52:	3501      	adds	r5, #1
    5b54:	e7e7      	b.n	5b26 <bt_read_static_addr+0x6a>
    5b56:	bf00      	nop
    5b58:	20000000 	.word	0x20000000
    5b5c:	0001e508 	.word	0x0001e508
    5b60:	0001e408 	.word	0x0001e408
    5b64:	0001fb34 	.word	0x0001fb34
    5b68:	0001fb60 	.word	0x0001fb60
    5b6c:	0001fb80 	.word	0x0001fb80

00005b70 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    5b70:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    5b72:	4d14      	ldr	r5, [pc, #80]	; (5bc4 <bt_setup_random_id_addr+0x54>)
    5b74:	79ec      	ldrb	r4, [r5, #7]
{
    5b76:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    5b78:	b9f4      	cbnz	r4, 5bb8 <bt_setup_random_id_addr+0x48>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    5b7a:	2101      	movs	r1, #1
    5b7c:	a802      	add	r0, sp, #8
    5b7e:	f7ff ff9d 	bl	5abc <bt_read_static_addr>
    5b82:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
    5b84:	b1c0      	cbz	r0, 5bb8 <bt_setup_random_id_addr+0x48>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    5b86:	2716      	movs	r7, #22
    5b88:	e00f      	b.n	5baa <bt_setup_random_id_addr+0x3a>
    5b8a:	ab02      	add	r3, sp, #8
    5b8c:	fb07 3106 	mla	r1, r7, r6, r3
    5b90:	2206      	movs	r2, #6
    5b92:	f10d 0001 	add.w	r0, sp, #1
    5b96:	f014 f805 	bl	19ba4 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    5b9a:	2301      	movs	r3, #1

				id_create(i, &addr, irk);
    5b9c:	4669      	mov	r1, sp
    5b9e:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
    5ba0:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
    5ba4:	f7ff fea4 	bl	58f0 <id_create.isra.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    5ba8:	3401      	adds	r4, #1
    5baa:	79eb      	ldrb	r3, [r5, #7]
    5bac:	b2e6      	uxtb	r6, r4
    5bae:	42b3      	cmp	r3, r6
    5bb0:	d8eb      	bhi.n	5b8a <bt_setup_random_id_addr+0x1a>
			}

			return 0;
    5bb2:	2000      	movs	r0, #0
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
    5bb4:	b009      	add	sp, #36	; 0x24
    5bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
    5bb8:	2100      	movs	r1, #0
    5bba:	4608      	mov	r0, r1
    5bbc:	f7ff fed0 	bl	5960 <bt_id_create>
    5bc0:	e7f8      	b.n	5bb4 <bt_setup_random_id_addr+0x44>
    5bc2:	bf00      	nop
    5bc4:	20000000 	.word	0x20000000

00005bc8 <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
    5bc8:	b570      	push	{r4, r5, r6, lr}
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
    5bca:	4b10      	ldr	r3, [pc, #64]	; (5c0c <bt_id_set_scan_own_addr+0x44>)
    5bcc:	781b      	ldrb	r3, [r3, #0]
    5bce:	700b      	strb	r3, [r1, #0]
{
    5bd0:	4606      	mov	r6, r0
    5bd2:	460d      	mov	r5, r1
		/* Use NRPA unless identity has been explicitly requested
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
    5bd4:	f014 fb9a 	bl	1a30c <is_adv_using_rand_addr>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    5bd8:	b9a0      	cbnz	r0, 5c04 <bt_id_set_scan_own_addr+0x3c>
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
    5bda:	f014 fba3 	bl	1a324 <bt_id_set_private_addr>
			if (err) {
    5bde:	4604      	mov	r4, r0
    5be0:	b170      	cbz	r0, 5c00 <bt_id_set_scan_own_addr+0x38>
				if (active_scan || !is_adv_using_rand_addr()) {
    5be2:	b986      	cbnz	r6, 5c06 <bt_id_set_scan_own_addr+0x3e>
    5be4:	f014 fb92 	bl	1a30c <is_adv_using_rand_addr>
    5be8:	b168      	cbz	r0, 5c06 <bt_id_set_scan_own_addr+0x3e>
    5bea:	4a09      	ldr	r2, [pc, #36]	; (5c10 <bt_id_set_scan_own_addr+0x48>)
    5bec:	4b09      	ldr	r3, [pc, #36]	; (5c14 <bt_id_set_scan_own_addr+0x4c>)
					return err;
				}

				BT_WARN("Ignoring failure to set address for passive scan (%d)",
    5bee:	480a      	ldr	r0, [pc, #40]	; (5c18 <bt_id_set_scan_own_addr+0x50>)
    5bf0:	1ad2      	subs	r2, r2, r3
    5bf2:	08d2      	lsrs	r2, r2, #3
    5bf4:	0192      	lsls	r2, r2, #6
    5bf6:	f042 0202 	orr.w	r2, r2, #2
    5bfa:	4621      	mov	r1, r4
    5bfc:	f013 f906 	bl	18e0c <log_1>
					err);
			}

			*own_addr_type = BT_ADDR_LE_RANDOM;
    5c00:	2301      	movs	r3, #1
    5c02:	702b      	strb	r3, [r5, #0]
				return err;
			}
		}
	}

	return 0;
    5c04:	2400      	movs	r4, #0
}
    5c06:	4620      	mov	r0, r4
    5c08:	bd70      	pop	{r4, r5, r6, pc}
    5c0a:	bf00      	nop
    5c0c:	20000000 	.word	0x20000000
    5c10:	0001e508 	.word	0x0001e508
    5c14:	0001e408 	.word	0x0001e408
    5c18:	0001fba9 	.word	0x0001fba9

00005c1c <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    5c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
    5c1e:	4606      	mov	r6, r0
    5c20:	4b1e      	ldr	r3, [pc, #120]	; (5c9c <le_adv_start_add_conn+0x80>)
    5c22:	f816 2b09 	ldrb.w	r2, [r6], #9
    5c26:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
{
    5c2a:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    5c2c:	2300      	movs	r3, #0
{
    5c2e:	4605      	mov	r5, r0
	return memcmp(a, b, sizeof(*a));
    5c30:	2207      	movs	r2, #7
    5c32:	460f      	mov	r7, r1
    5c34:	4630      	mov	r0, r6
    5c36:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    5c38:	9300      	str	r3, [sp, #0]
    5c3a:	f8cd 3003 	str.w	r3, [sp, #3]
    5c3e:	f013 ffa1 	bl	19b84 <memcmp>
    5c42:	782a      	ldrb	r2, [r5, #0]
    5c44:	4604      	mov	r4, r0
    5c46:	b9a8      	cbnz	r0, 5c74 <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    5c48:	4b15      	ldr	r3, [pc, #84]	; (5ca0 <le_adv_start_add_conn+0x84>)
    5c4a:	6818      	ldr	r0, [r3, #0]
    5c4c:	8899      	ldrh	r1, [r3, #4]
    5c4e:	9002      	str	r0, [sp, #8]
    5c50:	799b      	ldrb	r3, [r3, #6]
    5c52:	f8ad 100c 	strh.w	r1, [sp, #12]
    5c56:	4610      	mov	r0, r2
    5c58:	a902      	add	r1, sp, #8
    5c5a:	f88d 300e 	strb.w	r3, [sp, #14]
    5c5e:	f000 fc03 	bl	6468 <bt_conn_add_le>
		if (!conn) {
    5c62:	4605      	mov	r5, r0
    5c64:	b1b8      	cbz	r0, 5c96 <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    5c66:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    5c68:	f000 fc32 	bl	64d0 <bt_conn_set_state>
	*out_conn = conn;
    5c6c:	603d      	str	r5, [r7, #0]
	return 0;
}
    5c6e:	4620      	mov	r0, r4
    5c70:	b005      	add	sp, #20
    5c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    5c74:	4631      	mov	r1, r6
    5c76:	4610      	mov	r0, r2
    5c78:	f000 fd2c 	bl	66d4 <bt_conn_exists_le>
    5c7c:	4604      	mov	r4, r0
    5c7e:	b938      	cbnz	r0, 5c90 <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    5c80:	7828      	ldrb	r0, [r5, #0]
    5c82:	4631      	mov	r1, r6
    5c84:	f000 fbf0 	bl	6468 <bt_conn_add_le>
	if (!conn) {
    5c88:	4605      	mov	r5, r0
    5c8a:	b120      	cbz	r0, 5c96 <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    5c8c:	2105      	movs	r1, #5
    5c8e:	e7eb      	b.n	5c68 <le_adv_start_add_conn+0x4c>
		return -EINVAL;
    5c90:	f06f 0415 	mvn.w	r4, #21
    5c94:	e7eb      	b.n	5c6e <le_adv_start_add_conn+0x52>
		return -ENOMEM;
    5c96:	f06f 040b 	mvn.w	r4, #11
    5c9a:	e7e8      	b.n	5c6e <le_adv_start_add_conn+0x52>
    5c9c:	20000000 	.word	0x20000000
    5ca0:	0001e70c 	.word	0x0001e70c

00005ca4 <bt_le_adv_lookup_legacy>:
}
    5ca4:	4800      	ldr	r0, [pc, #0]	; (5ca8 <bt_le_adv_lookup_legacy+0x4>)
    5ca6:	4770      	bx	lr
    5ca8:	20000018 	.word	0x20000018

00005cac <bt_le_adv_resume>:
	return 0;
}

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
    5cac:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5cae:	481e      	ldr	r0, [pc, #120]	; (5d28 <bt_le_adv_resume+0x7c>)
    5cb0:	4c1d      	ldr	r4, [pc, #116]	; (5d28 <bt_le_adv_resume+0x7c>)
    5cb2:	f014 fb54 	bl	1a35e <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    5cb6:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    5cba:	d032      	beq.n	5d22 <bt_le_adv_resume+0x76>
    5cbc:	4620      	mov	r0, r4
    5cbe:	f014 fb4e 	bl	1a35e <atomic_get>
    5cc2:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    5cc4:	f3c0 1580 	ubfx	r5, r0, #6, #1
    5cc8:	d42b      	bmi.n	5d22 <bt_le_adv_resume+0x76>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5cca:	4620      	mov	r0, r4
    5ccc:	f014 fb47 	bl	1a35e <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    5cd0:	05c3      	lsls	r3, r0, #23
    5cd2:	d526      	bpl.n	5d22 <bt_le_adv_resume+0x76>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
    5cd4:	a901      	add	r1, sp, #4
    5cd6:	f1a4 0010 	sub.w	r0, r4, #16
    5cda:	f7ff ff9f 	bl	5c1c <le_adv_start_add_conn>
	if (err) {
    5cde:	bb00      	cbnz	r0, 5d22 <bt_le_adv_resume+0x76>
	return bt_le_adv_set_enable_legacy(adv, enable);
    5ce0:	2101      	movs	r1, #1
    5ce2:	f1a4 0010 	sub.w	r0, r4, #16
    5ce6:	f014 fb4f 	bl	1a388 <bt_le_adv_set_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		bt_id_set_adv_private_addr(adv);
	}

	err = bt_le_adv_set_enable(adv, true);
	if (err) {
    5cea:	b150      	cbz	r0, 5d02 <bt_le_adv_resume+0x56>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5cec:	4629      	mov	r1, r5
    5cee:	9801      	ldr	r0, [sp, #4]
    5cf0:	f000 fbee 	bl	64d0 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5cf4:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    5cf8:	4620      	mov	r0, r4
    5cfa:	f014 fb36 	bl	1a36a <atomic_and>
	return (old & mask) != 0;
    5cfe:	f3c0 3500 	ubfx	r5, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
    5d02:	9801      	ldr	r0, [sp, #4]
    5d04:	f014 fc0f 	bl	1a526 <bt_conn_unref>
	if (persist_paused) {
    5d08:	b15d      	cbz	r5, 5d22 <bt_le_adv_resume+0x76>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5d0a:	f3bf 8f5b 	dmb	ish
    5d0e:	e854 3f00 	ldrex	r3, [r4]
    5d12:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    5d16:	e844 3200 	strex	r2, r3, [r4]
    5d1a:	2a00      	cmp	r2, #0
    5d1c:	d1f7      	bne.n	5d0e <bt_le_adv_resume+0x62>
    5d1e:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
    5d22:	b003      	add	sp, #12
    5d24:	bd30      	pop	{r4, r5, pc}
    5d26:	bf00      	nop
    5d28:	20000028 	.word	0x20000028

00005d2c <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
    5d2c:	b530      	push	{r4, r5, lr}
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    5d2e:	2102      	movs	r1, #2
{
    5d30:	b087      	sub	sp, #28
    5d32:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    5d34:	f242 000c 	movw	r0, #8204	; 0x200c
    5d38:	f7fe fee4 	bl	4b04 <bt_hci_cmd_create>
	if (!buf) {
    5d3c:	4605      	mov	r5, r0
    5d3e:	b318      	cbz	r0, 5d88 <bt_le_scan_set_enable_legacy+0x5c>
	return net_buf_simple_add(&buf->b, len);
    5d40:	2102      	movs	r1, #2
    5d42:	3008      	adds	r0, #8
    5d44:	f017 fabb 	bl	1d2be <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    5d48:	2c01      	cmp	r4, #1
    5d4a:	d11b      	bne.n	5d84 <bt_le_scan_set_enable_legacy+0x58>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5d4c:	f3bf 8f5b 	dmb	ish
    5d50:	4b0f      	ldr	r3, [pc, #60]	; (5d90 <bt_le_scan_set_enable_legacy+0x64>)
    5d52:	681b      	ldr	r3, [r3, #0]
    5d54:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    5d58:	f3c3 2300 	ubfx	r3, r3, #8, #1
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
						 BT_DEV_SCAN_FILTER_DUP);
	} else {
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    5d5c:	7043      	strb	r3, [r0, #1]
	}

	cp->enable = enable;

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
    5d5e:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
    5d60:	7004      	strb	r4, [r0, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
    5d62:	425c      	negs	r4, r3
    5d64:	415c      	adcs	r4, r3
    5d66:	4a0a      	ldr	r2, [pc, #40]	; (5d90 <bt_le_scan_set_enable_legacy+0x64>)
    5d68:	9400      	str	r4, [sp, #0]
    5d6a:	a903      	add	r1, sp, #12
    5d6c:	4628      	mov	r0, r5
    5d6e:	2305      	movs	r3, #5
    5d70:	f7fe feb6 	bl	4ae0 <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    5d74:	2200      	movs	r2, #0
    5d76:	4629      	mov	r1, r5
    5d78:	f242 000c 	movw	r0, #8204	; 0x200c
    5d7c:	f7ff f818 	bl	4db0 <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
    5d80:	b007      	add	sp, #28
    5d82:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    5d84:	2300      	movs	r3, #0
    5d86:	e7e9      	b.n	5d5c <bt_le_scan_set_enable_legacy+0x30>
		return -ENOBUFS;
    5d88:	f06f 0068 	mvn.w	r0, #104	; 0x68
    5d8c:	e7f8      	b.n	5d80 <bt_le_scan_set_enable_legacy+0x54>
    5d8e:	bf00      	nop
    5d90:	20000098 	.word	0x20000098

00005d94 <bt_scan_reset>:
	scan_dev_found_cb = NULL;
    5d94:	4b01      	ldr	r3, [pc, #4]	; (5d9c <bt_scan_reset+0x8>)
    5d96:	2200      	movs	r2, #0
    5d98:	601a      	str	r2, [r3, #0]
}
    5d9a:	4770      	bx	lr
    5d9c:	200019e0 	.word	0x200019e0

00005da0 <bt_le_scan_update>:
    5da0:	4b0a      	ldr	r3, [pc, #40]	; (5dcc <bt_le_scan_update+0x2c>)
    5da2:	f3bf 8f5b 	dmb	ish
    5da6:	681a      	ldr	r2, [r3, #0]
    5da8:	f3bf 8f5b 	dmb	ish
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    5dac:	f3c2 1080 	ubfx	r0, r2, #6, #1
    5db0:	0652      	lsls	r2, r2, #25
    5db2:	d408      	bmi.n	5dc6 <bt_le_scan_update+0x26>
    5db4:	f3bf 8f5b 	dmb	ish
    5db8:	681b      	ldr	r3, [r3, #0]
    5dba:	f3bf 8f5b 	dmb	ish
		return 0;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    5dbe:	069b      	lsls	r3, r3, #26
    5dc0:	d501      	bpl.n	5dc6 <bt_le_scan_update+0x26>
	return bt_le_scan_set_enable_legacy(enable);
    5dc2:	f7ff bfb3 	b.w	5d2c <bt_le_scan_set_enable_legacy>
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
    5dc6:	2000      	movs	r0, #0
    5dc8:	4770      	bx	lr
    5dca:	bf00      	nop
    5dcc:	20000098 	.word	0x20000098

00005dd0 <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
    5dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
    5dd4:	f100 0808 	add.w	r8, r0, #8
    5dd8:	b08b      	sub	sp, #44	; 0x2c
    5dda:	4604      	mov	r4, r0
    5ddc:	4640      	mov	r0, r8
    5dde:	f017 fadb 	bl	1d398 <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
    5de2:	f8df b178 	ldr.w	fp, [pc, #376]	; 5f5c <bt_hci_le_adv_report+0x18c>
    5de6:	4606      	mov	r6, r0
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	BT_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
    5de8:	b166      	cbz	r6, 5e04 <bt_hci_le_adv_report+0x34>
		struct bt_le_scan_recv_info adv_info;

		if (buf->len < sizeof(*evt)) {
    5dea:	89a3      	ldrh	r3, [r4, #12]
    5dec:	2b08      	cmp	r3, #8
    5dee:	d80c      	bhi.n	5e0a <bt_hci_le_adv_report+0x3a>
    5df0:	4954      	ldr	r1, [pc, #336]	; (5f44 <bt_hci_le_adv_report+0x174>)
    5df2:	4b55      	ldr	r3, [pc, #340]	; (5f48 <bt_hci_le_adv_report+0x178>)
			BT_ERR("Unexpected end of buffer");
    5df4:	4855      	ldr	r0, [pc, #340]	; (5f4c <bt_hci_le_adv_report+0x17c>)
    5df6:	1ac9      	subs	r1, r1, r3
    5df8:	08c9      	lsrs	r1, r1, #3
    5dfa:	0189      	lsls	r1, r1, #6
    5dfc:	f041 0101 	orr.w	r1, r1, #1
    5e00:	f012 fff7 	bl	18df2 <log_0>

		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
    5e04:	b00b      	add	sp, #44	; 0x2c
    5e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    5e0a:	2109      	movs	r1, #9
    5e0c:	4640      	mov	r0, r8
    5e0e:	f017 fabb 	bl	1d388 <net_buf_simple_pull_mem>
		adv_info.rssi = evt->data[evt->length];
    5e12:	f890 a008 	ldrb.w	sl, [r0, #8]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    5e16:	237f      	movs	r3, #127	; 0x7f
    5e18:	f88d 301e 	strb.w	r3, [sp, #30]
		adv_info.rssi = evt->data[evt->length];
    5e1c:	eb00 030a 	add.w	r3, r0, sl
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    5e20:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
    5e22:	7a5b      	ldrb	r3, [r3, #9]
    5e24:	f88d 301d 	strb.w	r3, [sp, #29]
		adv_info.sid = BT_GAP_SID_INVALID;
    5e28:	23ff      	movs	r3, #255	; 0xff
    5e2a:	f88d 301c 	strb.w	r3, [sp, #28]
		adv_info.interval = 0U;
    5e2e:	2300      	movs	r3, #0
    5e30:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    5e34:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
		adv_info.adv_type = evt->evt_type;
    5e38:	7802      	ldrb	r2, [r0, #0]
    5e3a:	f88d 201f 	strb.w	r2, [sp, #31]
    5e3e:	2a04      	cmp	r2, #4
    5e40:	bf9c      	itt	ls
    5e42:	4b43      	ldrls	r3, [pc, #268]	; (5f50 <bt_hci_le_adv_report+0x180>)
    5e44:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props(evt->evt_type);
    5e46:	f8ad 3020 	strh.w	r3, [sp, #32]
    5e4a:	4b42      	ldr	r3, [pc, #264]	; (5f54 <bt_hci_le_adv_report+0x184>)
    5e4c:	f3bf 8f5b 	dmb	ish
    5e50:	681b      	ldr	r3, [r3, #0]
    5e52:	f3bf 8f5b 	dmb	ish
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    5e56:	065a      	lsls	r2, r3, #25
    5e58:	4605      	mov	r5, r0
		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);
    5e5a:	f100 0101 	add.w	r1, r0, #1
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    5e5e:	d50b      	bpl.n	5e78 <bt_hci_le_adv_report+0xa8>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    5e60:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    5e64:	075b      	lsls	r3, r3, #29
    5e66:	d507      	bpl.n	5e78 <bt_hci_le_adv_report+0xa8>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
    5e68:	7a29      	ldrb	r1, [r5, #8]
	return net_buf_simple_pull(&buf->b, len);
    5e6a:	4640      	mov	r0, r8
    5e6c:	3101      	adds	r1, #1
    5e6e:	3e01      	subs	r6, #1
    5e70:	f017 fa82 	bl	1d378 <net_buf_simple_pull>
    5e74:	b2f6      	uxtb	r6, r6
    5e76:	e7b7      	b.n	5de8 <bt_hci_le_adv_report+0x18>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    5e78:	786b      	ldrb	r3, [r5, #1]
    5e7a:	1e9a      	subs	r2, r3, #2
    5e7c:	2a01      	cmp	r2, #1
    5e7e:	d84f      	bhi.n	5f20 <bt_hci_le_adv_report+0x150>
	memcpy(dst, src, sizeof(*dst));
    5e80:	2207      	movs	r2, #7
    5e82:	a802      	add	r0, sp, #8
    5e84:	f013 fe8e 	bl	19ba4 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    5e88:	f89d 3008 	ldrb.w	r3, [sp, #8]
    5e8c:	3b02      	subs	r3, #2
    5e8e:	f88d 3008 	strb.w	r3, [sp, #8]
	info->addr = &id_addr;
    5e92:	ab02      	add	r3, sp, #8
    5e94:	9306      	str	r3, [sp, #24]
	if (scan_dev_found_cb) {
    5e96:	f8db 3000 	ldr.w	r3, [fp]
    5e9a:	b1b3      	cbz	r3, 5eca <bt_hci_le_adv_report+0xfa>
	state->offset = net_buf_simple_headroom(buf);
    5e9c:	4640      	mov	r0, r8
    5e9e:	f017 fa9f 	bl	1d3e0 <net_buf_simple_headroom>
	state->len = buf->len;
    5ea2:	89a3      	ldrh	r3, [r4, #12]
    5ea4:	9300      	str	r3, [sp, #0]
	state->offset = net_buf_simple_headroom(buf);
    5ea6:	4681      	mov	r9, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    5ea8:	4643      	mov	r3, r8
    5eaa:	a802      	add	r0, sp, #8
    5eac:	f89d 201f 	ldrb.w	r2, [sp, #31]
    5eb0:	f99d 101d 	ldrsb.w	r1, [sp, #29]
    5eb4:	f8db 7000 	ldr.w	r7, [fp]
		buf->len = len;
    5eb8:	f8a4 a00c 	strh.w	sl, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    5ebc:	47b8      	blx	r7
	buf->data = buf->__buf + state->offset;
    5ebe:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    5ec0:	9b00      	ldr	r3, [sp, #0]
    5ec2:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
    5ec4:	fa10 f089 	uxtah	r0, r0, r9
    5ec8:	60a0      	str	r0, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    5eca:	4b23      	ldr	r3, [pc, #140]	; (5f58 <bt_hci_le_adv_report+0x188>)
    5ecc:	681b      	ldr	r3, [r3, #0]
    5ece:	2b00      	cmp	r3, #0
    5ed0:	d0ca      	beq.n	5e68 <bt_hci_le_adv_report+0x98>
    5ed2:	f1b3 0208 	subs.w	r2, r3, #8
    5ed6:	d0c7      	beq.n	5e68 <bt_hci_le_adv_report+0x98>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    5ed8:	681f      	ldr	r7, [r3, #0]
    5eda:	b107      	cbz	r7, 5ede <bt_hci_le_adv_report+0x10e>
    5edc:	3f08      	subs	r7, #8
		if (listener->recv) {
    5ede:	6813      	ldr	r3, [r2, #0]
    5ee0:	9201      	str	r2, [sp, #4]
    5ee2:	b193      	cbz	r3, 5f0a <bt_hci_le_adv_report+0x13a>
	state->offset = net_buf_simple_headroom(buf);
    5ee4:	4640      	mov	r0, r8
    5ee6:	f017 fa7b 	bl	1d3e0 <net_buf_simple_headroom>
			listener->recv(info, &buf->b);
    5eea:	9a01      	ldr	r2, [sp, #4]
	state->len = buf->len;
    5eec:	89a3      	ldrh	r3, [r4, #12]
    5eee:	6812      	ldr	r2, [r2, #0]
			buf->len = len;
    5ef0:	f8a4 a00c 	strh.w	sl, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    5ef4:	4681      	mov	r9, r0
			listener->recv(info, &buf->b);
    5ef6:	4641      	mov	r1, r8
    5ef8:	a806      	add	r0, sp, #24
	state->len = buf->len;
    5efa:	9300      	str	r3, [sp, #0]
    5efc:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
    5efe:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    5f00:	9b00      	ldr	r3, [sp, #0]
    5f02:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
    5f04:	fa10 f089 	uxtah	r0, r0, r9
    5f08:	60a0      	str	r0, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    5f0a:	2f00      	cmp	r7, #0
    5f0c:	d0ac      	beq.n	5e68 <bt_hci_le_adv_report+0x98>
Z_GENLIST_PEEK_NEXT(slist, snode)
    5f0e:	f117 0308 	adds.w	r3, r7, #8
    5f12:	d002      	beq.n	5f1a <bt_hci_le_adv_report+0x14a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    5f14:	68bb      	ldr	r3, [r7, #8]
    5f16:	b103      	cbz	r3, 5f1a <bt_hci_le_adv_report+0x14a>
    5f18:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
    5f1a:	463a      	mov	r2, r7
    5f1c:	461f      	mov	r7, r3
    5f1e:	e7de      	b.n	5ede <bt_hci_le_adv_report+0x10e>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    5f20:	2bff      	cmp	r3, #255	; 0xff
    5f22:	d109      	bne.n	5f38 <bt_hci_le_adv_report+0x168>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    5f24:	2300      	movs	r3, #0
    5f26:	9304      	str	r3, [sp, #16]
    5f28:	2207      	movs	r2, #7
    5f2a:	f8cd 3013 	str.w	r3, [sp, #19]
    5f2e:	a904      	add	r1, sp, #16
    5f30:	a802      	add	r0, sp, #8
    5f32:	f013 fe37 	bl	19ba4 <memcpy>
}
    5f36:	e7ac      	b.n	5e92 <bt_hci_le_adv_report+0xc2>
		bt_addr_le_copy(&id_addr,
    5f38:	2000      	movs	r0, #0
    5f3a:	f014 f9f1 	bl	1a320 <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
    5f3e:	2207      	movs	r2, #7
    5f40:	4601      	mov	r1, r0
    5f42:	e7f5      	b.n	5f30 <bt_hci_le_adv_report+0x160>
    5f44:	0001e5d8 	.word	0x0001e5d8
    5f48:	0001e408 	.word	0x0001e408
    5f4c:	0001fbec 	.word	0x0001fbec
    5f50:	0001fc0d 	.word	0x0001fc0d
    5f54:	20000098 	.word	0x20000098
    5f58:	200019d8 	.word	0x200019d8
    5f5c:	200019e0 	.word	0x200019e0

00005f60 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    5f60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5f64:	4d61      	ldr	r5, [pc, #388]	; (60ec <bt_le_scan_start+0x18c>)
    5f66:	f3bf 8f5b 	dmb	ish
    5f6a:	682b      	ldr	r3, [r5, #0]
    5f6c:	f3bf 8f5b 	dmb	ish
    5f70:	4606      	mov	r6, r0
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    5f72:	0798      	lsls	r0, r3, #30
{
    5f74:	460f      	mov	r7, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    5f76:	f140 80b6 	bpl.w	60e6 <bt_le_scan_start+0x186>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    5f7a:	7832      	ldrb	r2, [r6, #0]
    5f7c:	2a01      	cmp	r2, #1
    5f7e:	d905      	bls.n	5f8c <bt_le_scan_start+0x2c>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    5f80:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
    5f84:	4620      	mov	r0, r4
    5f86:	b003      	add	sp, #12
    5f88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
    5f8c:	6873      	ldr	r3, [r6, #4]
    5f8e:	f033 030f 	bics.w	r3, r3, #15
    5f92:	d1f5      	bne.n	5f80 <bt_le_scan_start+0x20>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    5f94:	8930      	ldrh	r0, [r6, #8]
    5f96:	1f03      	subs	r3, r0, #4
    5f98:	b29b      	uxth	r3, r3
    5f9a:	f643 74fc 	movw	r4, #16380	; 0x3ffc
    5f9e:	42a3      	cmp	r3, r4
    5fa0:	d8ee      	bhi.n	5f80 <bt_le_scan_start+0x20>
	if (param->window < 0x0004 || param->window > 0x4000) {
    5fa2:	8971      	ldrh	r1, [r6, #10]
    5fa4:	1f0b      	subs	r3, r1, #4
    5fa6:	b29b      	uxth	r3, r3
    5fa8:	42a3      	cmp	r3, r4
    5faa:	d8e9      	bhi.n	5f80 <bt_le_scan_start+0x20>
	if (param->window > param->interval) {
    5fac:	4288      	cmp	r0, r1
    5fae:	d3e7      	bcc.n	5f80 <bt_le_scan_start+0x20>
	if (param->type && !bt_id_scan_random_addr_check()) {
    5fb0:	b98a      	cbnz	r2, 5fd6 <bt_le_scan_start+0x76>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5fb2:	f3bf 8f5b 	dmb	ish
    5fb6:	e855 0f00 	ldrex	r0, [r5]
    5fba:	f040 0340 	orr.w	r3, r0, #64	; 0x40
    5fbe:	e845 3200 	strex	r2, r3, [r5]
    5fc2:	2a00      	cmp	r2, #0
    5fc4:	d1f7      	bne.n	5fb6 <bt_le_scan_start+0x56>
    5fc6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    5fca:	f010 0040 	ands.w	r0, r0, #64	; 0x40
    5fce:	d007      	beq.n	5fe0 <bt_le_scan_start+0x80>
		return -EALREADY;
    5fd0:	f06f 0477 	mvn.w	r4, #119	; 0x77
    5fd4:	e7d6      	b.n	5f84 <bt_le_scan_start+0x24>
	if (param->type && !bt_id_scan_random_addr_check()) {
    5fd6:	f014 f9b7 	bl	1a348 <bt_id_scan_random_addr_check>
    5fda:	2800      	cmp	r0, #0
    5fdc:	d1e9      	bne.n	5fb2 <bt_le_scan_start+0x52>
    5fde:	e7cf      	b.n	5f80 <bt_le_scan_start+0x20>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5fe0:	f3bf 8f5b 	dmb	ish
    5fe4:	682b      	ldr	r3, [r5, #0]
    5fe6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    5fea:	0699      	lsls	r1, r3, #26
    5fec:	d509      	bpl.n	6002 <bt_le_scan_start+0xa2>
	return bt_le_scan_set_enable_legacy(enable);
    5fee:	f7ff fe9d 	bl	5d2c <bt_le_scan_set_enable_legacy>
		if (err) {
    5ff2:	4604      	mov	r4, r0
    5ff4:	b128      	cbz	r0, 6002 <bt_le_scan_start+0xa2>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5ff6:	f06f 0140 	mvn.w	r1, #64	; 0x40
    5ffa:	483c      	ldr	r0, [pc, #240]	; (60ec <bt_le_scan_start+0x18c>)
    5ffc:	f014 f9e9 	bl	1a3d2 <atomic_and>
		return err;
    6000:	e7c0      	b.n	5f84 <bt_le_scan_start+0x24>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
    6002:	6873      	ldr	r3, [r6, #4]
	if (val) {
    6004:	07da      	lsls	r2, r3, #31
    6006:	d515      	bpl.n	6034 <bt_le_scan_start+0xd4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6008:	f3bf 8f5b 	dmb	ish
    600c:	e855 3f00 	ldrex	r3, [r5]
    6010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6014:	e845 3200 	strex	r2, r3, [r5]
    6018:	2a00      	cmp	r2, #0
    601a:	d1f7      	bne.n	600c <bt_le_scan_start+0xac>
    601c:	f3bf 8f5b 	dmb	ish
		if (param->timeout) {
    6020:	89b4      	ldrh	r4, [r6, #12]
    6022:	b16c      	cbz	r4, 6040 <bt_le_scan_start+0xe0>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    6024:	4831      	ldr	r0, [pc, #196]	; (60ec <bt_le_scan_start+0x18c>)
    6026:	f06f 0140 	mvn.w	r1, #64	; 0x40
    602a:	f014 f9d2 	bl	1a3d2 <atomic_and>
			return -ENOTSUP;
    602e:	f06f 0485 	mvn.w	r4, #133	; 0x85
    6032:	e7a7      	b.n	5f84 <bt_le_scan_start+0x24>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    6034:	f46f 7180 	mvn.w	r1, #256	; 0x100
    6038:	482c      	ldr	r0, [pc, #176]	; (60ec <bt_le_scan_start+0x18c>)
    603a:	f014 f9ca 	bl	1a3d2 <atomic_and>
    603e:	e7ef      	b.n	6020 <bt_le_scan_start+0xc0>
		err = start_le_scan_legacy(param->type, param->interval,
    6040:	f896 8000 	ldrb.w	r8, [r6]
    6044:	f8b6 9008 	ldrh.w	r9, [r6, #8]
    6048:	8976      	ldrh	r6, [r6, #10]
	(void)memset(&set_param, 0, sizeof(set_param));
    604a:	4621      	mov	r1, r4
    604c:	2207      	movs	r2, #7
    604e:	4668      	mov	r0, sp
    6050:	f013 fdd3 	bl	19bfa <memset>
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
    6054:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    6058:	4258      	negs	r0, r3
    605a:	f10d 0105 	add.w	r1, sp, #5
    605e:	4158      	adcs	r0, r3
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
    6060:	f88d 4006 	strb.w	r4, [sp, #6]
	set_param.scan_type = scan_type;
    6064:	f88d 8000 	strb.w	r8, [sp]
	set_param.interval = sys_cpu_to_le16(interval);
    6068:	f8ad 9001 	strh.w	r9, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
    606c:	f8ad 6003 	strh.w	r6, [sp, #3]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
    6070:	f7ff fdaa 	bl	5bc8 <bt_id_set_scan_own_addr>
	if (err) {
    6074:	4604      	mov	r4, r0
    6076:	2800      	cmp	r0, #0
    6078:	d1bd      	bne.n	5ff6 <bt_le_scan_start+0x96>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    607a:	2107      	movs	r1, #7
    607c:	f242 000b 	movw	r0, #8203	; 0x200b
    6080:	f7fe fd40 	bl	4b04 <bt_hci_cmd_create>
	if (!buf) {
    6084:	4606      	mov	r6, r0
    6086:	b358      	cbz	r0, 60e0 <bt_le_scan_start+0x180>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    6088:	2207      	movs	r2, #7
    608a:	4669      	mov	r1, sp
    608c:	3008      	adds	r0, #8
    608e:	f017 f91c 	bl	1d2ca <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
    6092:	4622      	mov	r2, r4
    6094:	4631      	mov	r1, r6
    6096:	f242 000b 	movw	r0, #8203	; 0x200b
    609a:	f7fe fe89 	bl	4db0 <bt_hci_cmd_send_sync>
	if (err) {
    609e:	4604      	mov	r4, r0
    60a0:	2800      	cmp	r0, #0
    60a2:	d1a8      	bne.n	5ff6 <bt_le_scan_start+0x96>
	return bt_le_scan_set_enable_legacy(enable);
    60a4:	2001      	movs	r0, #1
    60a6:	f7ff fe41 	bl	5d2c <bt_le_scan_set_enable_legacy>
	if (err) {
    60aa:	4604      	mov	r4, r0
    60ac:	2800      	cmp	r0, #0
    60ae:	d1a2      	bne.n	5ff6 <bt_le_scan_start+0x96>
	if (val) {
    60b0:	f1b8 0f01 	cmp.w	r8, #1
    60b4:	d10e      	bne.n	60d4 <bt_le_scan_start+0x174>
    60b6:	f3bf 8f5b 	dmb	ish
    60ba:	e855 3f00 	ldrex	r3, [r5]
    60be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    60c2:	e845 3200 	strex	r2, r3, [r5]
    60c6:	2a00      	cmp	r2, #0
    60c8:	d1f7      	bne.n	60ba <bt_le_scan_start+0x15a>
    60ca:	f3bf 8f5b 	dmb	ish
	scan_dev_found_cb = cb;
    60ce:	4b08      	ldr	r3, [pc, #32]	; (60f0 <bt_le_scan_start+0x190>)
    60d0:	601f      	str	r7, [r3, #0]
	return 0;
    60d2:	e757      	b.n	5f84 <bt_le_scan_start+0x24>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    60d4:	f06f 0180 	mvn.w	r1, #128	; 0x80
    60d8:	4804      	ldr	r0, [pc, #16]	; (60ec <bt_le_scan_start+0x18c>)
    60da:	f014 f97a 	bl	1a3d2 <atomic_and>
	if (err) {
    60de:	e7f6      	b.n	60ce <bt_le_scan_start+0x16e>
		return -ENOBUFS;
    60e0:	f06f 0468 	mvn.w	r4, #104	; 0x68
    60e4:	e787      	b.n	5ff6 <bt_le_scan_start+0x96>
		return -EAGAIN;
    60e6:	f06f 040a 	mvn.w	r4, #10
    60ea:	e74b      	b.n	5f84 <bt_le_scan_start+0x24>
    60ec:	20000098 	.word	0x20000098
    60f0:	200019e0 	.word	0x200019e0

000060f4 <bt_hci_evt_le_pkey_complete>:

	return 0;
}

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
    60f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    60f6:	4c1d      	ldr	r4, [pc, #116]	; (616c <bt_hci_evt_le_pkey_complete+0x78>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    60f8:	6886      	ldr	r6, [r0, #8]
    60fa:	f3bf 8f5b 	dmb	ish
    60fe:	e854 3f00 	ldrex	r3, [r4]
    6102:	f023 0310 	bic.w	r3, r3, #16
    6106:	e844 3200 	strex	r2, r3, [r4]
    610a:	2a00      	cmp	r2, #0
    610c:	d1f7      	bne.n	60fe <bt_hci_evt_le_pkey_complete+0xa>
    610e:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
    6112:	7833      	ldrb	r3, [r6, #0]
    6114:	b983      	cbnz	r3, 6138 <bt_hci_evt_le_pkey_complete+0x44>
		memcpy(pub_key, evt->key, 64);
    6116:	4816      	ldr	r0, [pc, #88]	; (6170 <bt_hci_evt_le_pkey_complete+0x7c>)
    6118:	2240      	movs	r2, #64	; 0x40
    611a:	1c71      	adds	r1, r6, #1
    611c:	f013 fd42 	bl	19ba4 <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6120:	f3bf 8f5b 	dmb	ish
    6124:	e854 3f00 	ldrex	r3, [r4]
    6128:	f043 0308 	orr.w	r3, r3, #8
    612c:	e844 3200 	strex	r2, r3, [r4]
    6130:	2a00      	cmp	r2, #0
    6132:	d1f7      	bne.n	6124 <bt_hci_evt_le_pkey_complete+0x30>
    6134:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    6138:	4d0e      	ldr	r5, [pc, #56]	; (6174 <bt_hci_evt_le_pkey_complete+0x80>)
    613a:	682c      	ldr	r4, [r5, #0]
    613c:	b91c      	cbnz	r4, 6146 <bt_hci_evt_le_pkey_complete+0x52>
	list->head = NULL;
    613e:	2300      	movs	r3, #0
	list->tail = NULL;
    6140:	e9c5 3300 	strd	r3, r3, [r5]
			cb->func(evt->status ? NULL : pub_key);
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
    6144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			cb->func(evt->status ? NULL : pub_key);
    6146:	4f0a      	ldr	r7, [pc, #40]	; (6170 <bt_hci_evt_le_pkey_complete+0x7c>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    6148:	3c04      	subs	r4, #4
    614a:	2c00      	cmp	r4, #0
    614c:	d0f7      	beq.n	613e <bt_hci_evt_le_pkey_complete+0x4a>
		if (cb->func) {
    614e:	6823      	ldr	r3, [r4, #0]
    6150:	b12b      	cbz	r3, 615e <bt_hci_evt_le_pkey_complete+0x6a>
			cb->func(evt->status ? NULL : pub_key);
    6152:	7832      	ldrb	r2, [r6, #0]
    6154:	2a00      	cmp	r2, #0
    6156:	bf0c      	ite	eq
    6158:	4638      	moveq	r0, r7
    615a:	2000      	movne	r0, #0
    615c:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    615e:	1d23      	adds	r3, r4, #4
    6160:	d0ed      	beq.n	613e <bt_hci_evt_le_pkey_complete+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    6162:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    6164:	2c00      	cmp	r4, #0
    6166:	d0ea      	beq.n	613e <bt_hci_evt_le_pkey_complete+0x4a>
    6168:	3c04      	subs	r4, #4
    616a:	e7ee      	b.n	614a <bt_hci_evt_le_pkey_complete+0x56>
    616c:	20000098 	.word	0x20000098
    6170:	20002fb2 	.word	0x20002fb2
    6174:	200019e8 	.word	0x200019e8

00006178 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
    6178:	4905      	ldr	r1, [pc, #20]	; (6190 <bt_hci_evt_le_dhkey_complete+0x18>)
    617a:	680b      	ldr	r3, [r1, #0]
    617c:	b133      	cbz	r3, 618c <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    617e:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
    6180:	2000      	movs	r0, #0
    6182:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
    6184:	7811      	ldrb	r1, [r2, #0]
    6186:	b901      	cbnz	r1, 618a <bt_hci_evt_le_dhkey_complete+0x12>
    6188:	1c50      	adds	r0, r2, #1
    618a:	4718      	bx	r3
	}
}
    618c:	4770      	bx	lr
    618e:	bf00      	nop
    6190:	200019e4 	.word	0x200019e4

00006194 <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    6194:	2300      	movs	r3, #0
	tx->user_data = NULL;
    6196:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
    619a:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
    619c:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    619e:	4801      	ldr	r0, [pc, #4]	; (61a4 <tx_free+0x10>)
    61a0:	f017 bc0f 	b.w	1d9c2 <k_queue_append>
    61a4:	20000bec 	.word	0x20000bec

000061a8 <notify_connected>:
{
    61a8:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    61aa:	4b09      	ldr	r3, [pc, #36]	; (61d0 <notify_connected+0x28>)
    61ac:	681d      	ldr	r5, [r3, #0]
{
    61ae:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    61b0:	7a61      	ldrb	r1, [r4, #9]
    61b2:	b92d      	cbnz	r5, 61c0 <notify_connected+0x18>
	if (!conn->err) {
    61b4:	b951      	cbnz	r1, 61cc <notify_connected+0x24>
		bt_gatt_connected(conn);
    61b6:	4620      	mov	r0, r4
}
    61b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
    61bc:	f002 bfde 	b.w	917c <bt_gatt_connected>
		if (cb->connected) {
    61c0:	682b      	ldr	r3, [r5, #0]
    61c2:	b10b      	cbz	r3, 61c8 <notify_connected+0x20>
			cb->connected(conn, conn->err);
    61c4:	4620      	mov	r0, r4
    61c6:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    61c8:	692d      	ldr	r5, [r5, #16]
    61ca:	e7f1      	b.n	61b0 <notify_connected+0x8>
}
    61cc:	bd38      	pop	{r3, r4, r5, pc}
    61ce:	bf00      	nop
    61d0:	200019f0 	.word	0x200019f0

000061d4 <bt_conn_get_pkts>:
}
    61d4:	4800      	ldr	r0, [pc, #0]	; (61d8 <bt_conn_get_pkts+0x4>)
    61d6:	4770      	bx	lr
    61d8:	200000d0 	.word	0x200000d0

000061dc <notify_le_param_updated>:
{
    61dc:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    61de:	f3bf 8f5b 	dmb	ish
    61e2:	6842      	ldr	r2, [r0, #4]
    61e4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    61e8:	0592      	lsls	r2, r2, #22
{
    61ea:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    61ec:	f100 0304 	add.w	r3, r0, #4
    61f0:	d519      	bpl.n	6226 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
    61f2:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    61f6:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
    61fa:	4291      	cmp	r1, r2
    61fc:	d813      	bhi.n	6226 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
    61fe:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
    6202:	4291      	cmp	r1, r2
    6204:	d30f      	bcc.n	6226 <notify_le_param_updated+0x4a>
	    conn->le.latency == conn->le.pending_latency &&
    6206:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
    620a:	4291      	cmp	r1, r2
    620c:	d10b      	bne.n	6226 <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    620e:	f3bf 8f5b 	dmb	ish
    6212:	e853 2f00 	ldrex	r2, [r3]
    6216:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    621a:	e843 2100 	strex	r1, r2, [r3]
    621e:	2900      	cmp	r1, #0
    6220:	d1f7      	bne.n	6212 <notify_le_param_updated+0x36>
    6222:	f3bf 8f5b 	dmb	ish
	for (cb = callback_list; cb; cb = cb->_next) {
    6226:	4b08      	ldr	r3, [pc, #32]	; (6248 <notify_le_param_updated+0x6c>)
    6228:	681d      	ldr	r5, [r3, #0]
    622a:	b905      	cbnz	r5, 622e <notify_le_param_updated+0x52>
}
    622c:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    622e:	68ee      	ldr	r6, [r5, #12]
    6230:	b13e      	cbz	r6, 6242 <notify_le_param_updated+0x66>
			cb->le_param_updated(conn, conn->le.interval,
    6232:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    6236:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    623a:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    623e:	4620      	mov	r0, r4
    6240:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    6242:	692d      	ldr	r5, [r5, #16]
    6244:	e7f1      	b.n	622a <notify_le_param_updated+0x4e>
    6246:	bf00      	nop
    6248:	200019f0 	.word	0x200019f0

0000624c <le_param_req>:
{
    624c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    624e:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    6250:	4608      	mov	r0, r1
{
    6252:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    6254:	f013 fffb 	bl	1a24e <bt_le_conn_params_valid>
    6258:	4604      	mov	r4, r0
    625a:	b910      	cbnz	r0, 6262 <le_param_req+0x16>
		return false;
    625c:	2400      	movs	r4, #0
}
    625e:	4620      	mov	r0, r4
    6260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    6262:	4b09      	ldr	r3, [pc, #36]	; (6288 <le_param_req+0x3c>)
    6264:	681e      	ldr	r6, [r3, #0]
    6266:	2e00      	cmp	r6, #0
    6268:	d0f9      	beq.n	625e <le_param_req+0x12>
		if (!cb->le_param_req) {
    626a:	68b3      	ldr	r3, [r6, #8]
    626c:	b90b      	cbnz	r3, 6272 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    626e:	6936      	ldr	r6, [r6, #16]
    6270:	e7f9      	b.n	6266 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    6272:	4629      	mov	r1, r5
    6274:	4638      	mov	r0, r7
    6276:	4798      	blx	r3
    6278:	2800      	cmp	r0, #0
    627a:	d0ef      	beq.n	625c <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    627c:	4628      	mov	r0, r5
    627e:	f013 ffe6 	bl	1a24e <bt_le_conn_params_valid>
    6282:	2800      	cmp	r0, #0
    6284:	d1f3      	bne.n	626e <le_param_req+0x22>
    6286:	e7e9      	b.n	625c <le_param_req+0x10>
    6288:	200019f0 	.word	0x200019f0

0000628c <bt_conn_recv>:
	net_buf_unref(conn->rx);
	conn->rx = NULL;
}

void bt_conn_recv(struct bt_conn *conn, struct net_buf *buf, uint8_t flags)
{
    628c:	b570      	push	{r4, r5, r6, lr}
    628e:	4616      	mov	r6, r2
    6290:	4604      	mov	r4, r0
    6292:	460d      	mov	r5, r1
	uint16_t acl_total_len;
	/* Make sure we notify any pending TX callbacks before processing
	 * new data for this connection.
	 */
	tx_notify(conn);
    6294:	f014 f8ac 	bl	1a3f0 <tx_notify>
		bt_iso_recv(conn, buf, flags);
		return;
	}

	/* Check packet boundary flags */
	switch (flags) {
    6298:	2e01      	cmp	r6, #1
    629a:	d02e      	beq.n	62fa <bt_conn_recv+0x6e>
    629c:	2e02      	cmp	r6, #2
    629e:	d15b      	bne.n	6358 <bt_conn_recv+0xcc>
	case BT_ACL_START:
		if (conn->rx) {
    62a0:	6923      	ldr	r3, [r4, #16]
    62a2:	b163      	cbz	r3, 62be <bt_conn_recv+0x32>
    62a4:	4b37      	ldr	r3, [pc, #220]	; (6384 <bt_conn_recv+0xf8>)
    62a6:	4938      	ldr	r1, [pc, #224]	; (6388 <bt_conn_recv+0xfc>)
			BT_ERR("Unexpected first L2CAP frame");
    62a8:	4838      	ldr	r0, [pc, #224]	; (638c <bt_conn_recv+0x100>)
    62aa:	1ac9      	subs	r1, r1, r3
    62ac:	08c9      	lsrs	r1, r1, #3
    62ae:	0189      	lsls	r1, r1, #6
    62b0:	f041 0101 	orr.w	r1, r1, #1
    62b4:	f012 fd9d 	bl	18df2 <log_0>
			bt_conn_reset_rx_state(conn);
    62b8:	4620      	mov	r0, r4
    62ba:	f014 f8e7 	bl	1a48c <bt_conn_reset_rx_state>

		BT_DBG("First, len %u final %u", buf->len,
		       (buf->len < sizeof(uint16_t)) ?
		       0 : sys_get_le16(buf->data));

		conn->rx = buf;
    62be:	6125      	str	r5, [r4, #16]
		bt_conn_reset_rx_state(conn);
		net_buf_unref(buf);
		return;
	}

	if (conn->rx->len < sizeof(uint16_t)) {
    62c0:	6923      	ldr	r3, [r4, #16]
    62c2:	8999      	ldrh	r1, [r3, #12]
    62c4:	2901      	cmp	r1, #1
    62c6:	d95b      	bls.n	6380 <bt_conn_recv+0xf4>
		 * length field.
		 */
		return;
	}

	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
    62c8:	6898      	ldr	r0, [r3, #8]
	return ((uint16_t)src[1] << 8) | src[0];
    62ca:	7845      	ldrb	r5, [r0, #1]
    62cc:	7802      	ldrb	r2, [r0, #0]
    62ce:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    62d2:	3204      	adds	r2, #4
    62d4:	b292      	uxth	r2, r2

	if (conn->rx->len < acl_total_len) {
    62d6:	4291      	cmp	r1, r2
    62d8:	d352      	bcc.n	6380 <bt_conn_recv+0xf4>
		/* L2CAP frame not complete. */
		return;
	}

	if (conn->rx->len > acl_total_len) {
    62da:	d949      	bls.n	6370 <bt_conn_recv+0xe4>
    62dc:	4829      	ldr	r0, [pc, #164]	; (6384 <bt_conn_recv+0xf8>)
    62de:	4b2a      	ldr	r3, [pc, #168]	; (6388 <bt_conn_recv+0xfc>)
    62e0:	1a1b      	subs	r3, r3, r0
    62e2:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL len mismatch (%u > %u)",
    62e4:	019b      	lsls	r3, r3, #6
    62e6:	482a      	ldr	r0, [pc, #168]	; (6390 <bt_conn_recv+0x104>)
    62e8:	f043 0301 	orr.w	r3, r3, #1
    62ec:	f012 fda2 	bl	18e34 <log_2>
		       conn->rx->len, acl_total_len);
		bt_conn_reset_rx_state(conn);
    62f0:	4620      	mov	r0, r4
	buf = conn->rx;
	conn->rx = NULL;

	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);
	bt_l2cap_recv(conn, buf);
}
    62f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
    62f6:	f014 b8c9 	b.w	1a48c <bt_conn_reset_rx_state>
		if (!conn->rx) {
    62fa:	6920      	ldr	r0, [r4, #16]
    62fc:	b968      	cbnz	r0, 631a <bt_conn_recv+0x8e>
    62fe:	4922      	ldr	r1, [pc, #136]	; (6388 <bt_conn_recv+0xfc>)
    6300:	4b20      	ldr	r3, [pc, #128]	; (6384 <bt_conn_recv+0xf8>)
			BT_ERR("Unexpected L2CAP continuation");
    6302:	4824      	ldr	r0, [pc, #144]	; (6394 <bt_conn_recv+0x108>)
    6304:	1ac9      	subs	r1, r1, r3
    6306:	08c9      	lsrs	r1, r1, #3
    6308:	0189      	lsls	r1, r1, #6
    630a:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Not enough buffer space for L2CAP data");
    630e:	f012 fd70 	bl	18df2 <log_0>
			bt_conn_reset_rx_state(conn);
    6312:	4620      	mov	r0, r4
    6314:	f014 f8ba 	bl	1a48c <bt_conn_reset_rx_state>
    6318:	e001      	b.n	631e <bt_conn_recv+0x92>
		if (!buf->len) {
    631a:	89ae      	ldrh	r6, [r5, #12]
    631c:	b926      	cbnz	r6, 6328 <bt_conn_recv+0x9c>
			net_buf_unref(buf);
    631e:	4628      	mov	r0, r5
}
    6320:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
    6324:	f00f ba1a 	b.w	1575c <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
    6328:	3008      	adds	r0, #8
    632a:	f017 f85d 	bl	1d3e8 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    632e:	4286      	cmp	r6, r0
    6330:	d908      	bls.n	6344 <bt_conn_recv+0xb8>
    6332:	4915      	ldr	r1, [pc, #84]	; (6388 <bt_conn_recv+0xfc>)
    6334:	4b13      	ldr	r3, [pc, #76]	; (6384 <bt_conn_recv+0xf8>)
			BT_ERR("Not enough buffer space for L2CAP data");
    6336:	4818      	ldr	r0, [pc, #96]	; (6398 <bt_conn_recv+0x10c>)
    6338:	1ac9      	subs	r1, r1, r3
    633a:	08c9      	lsrs	r1, r1, #3
    633c:	0189      	lsls	r1, r1, #6
    633e:	f041 0101 	orr.w	r1, r1, #1
    6342:	e7e4      	b.n	630e <bt_conn_recv+0x82>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    6344:	6920      	ldr	r0, [r4, #16]
    6346:	89aa      	ldrh	r2, [r5, #12]
    6348:	68a9      	ldr	r1, [r5, #8]
    634a:	3008      	adds	r0, #8
    634c:	f016 ffbd 	bl	1d2ca <net_buf_simple_add_mem>
		net_buf_unref(buf);
    6350:	4628      	mov	r0, r5
    6352:	f00f fa03 	bl	1575c <net_buf_unref>
		break;
    6356:	e7b3      	b.n	62c0 <bt_conn_recv+0x34>
    6358:	4a0a      	ldr	r2, [pc, #40]	; (6384 <bt_conn_recv+0xf8>)
    635a:	4b0b      	ldr	r3, [pc, #44]	; (6388 <bt_conn_recv+0xfc>)
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    635c:	480f      	ldr	r0, [pc, #60]	; (639c <bt_conn_recv+0x110>)
    635e:	1a9b      	subs	r3, r3, r2
    6360:	08db      	lsrs	r3, r3, #3
    6362:	019b      	lsls	r3, r3, #6
    6364:	f043 0201 	orr.w	r2, r3, #1
    6368:	4631      	mov	r1, r6
    636a:	f012 fd4f 	bl	18e0c <log_1>
		bt_conn_reset_rx_state(conn);
    636e:	e7d0      	b.n	6312 <bt_conn_recv+0x86>
	conn->rx = NULL;
    6370:	2200      	movs	r2, #0
    6372:	6122      	str	r2, [r4, #16]
	bt_l2cap_recv(conn, buf);
    6374:	4620      	mov	r0, r4
    6376:	4619      	mov	r1, r3
}
    6378:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    637c:	f000 bbf8 	b.w	6b70 <bt_l2cap_recv>
}
    6380:	bd70      	pop	{r4, r5, r6, pc}
    6382:	bf00      	nop
    6384:	0001e408 	.word	0x0001e408
    6388:	0001e428 	.word	0x0001e428
    638c:	0001fc19 	.word	0x0001fc19
    6390:	0001fc99 	.word	0x0001fc99
    6394:	0001fc36 	.word	0x0001fc36
    6398:	0001fc54 	.word	0x0001fc54
    639c:	0001fc7b 	.word	0x0001fc7b

000063a0 <bt_conn_send_cb>:
	return k_fifo_get(&free_tx, K_FOREVER);
}

int bt_conn_send_cb(struct bt_conn *conn, struct net_buf *buf,
		    bt_conn_tx_cb_t cb, void *user_data)
{
    63a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    63a4:	4698      	mov	r8, r3
	struct bt_conn_tx *tx;

	BT_DBG("conn handle %u buf len %u cb %p user_data %p", conn->handle,
	       buf->len, cb, user_data);

	if (conn->state != BT_CONN_CONNECTED) {
    63a6:	7a83      	ldrb	r3, [r0, #10]
    63a8:	2b07      	cmp	r3, #7
{
    63aa:	4605      	mov	r5, r0
    63ac:	460e      	mov	r6, r1
    63ae:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
    63b0:	d00c      	beq.n	63cc <bt_conn_send_cb+0x2c>
    63b2:	4926      	ldr	r1, [pc, #152]	; (644c <bt_conn_send_cb+0xac>)
    63b4:	4b26      	ldr	r3, [pc, #152]	; (6450 <bt_conn_send_cb+0xb0>)
		BT_ERR("not connected!");
    63b6:	4827      	ldr	r0, [pc, #156]	; (6454 <bt_conn_send_cb+0xb4>)
    63b8:	1ac9      	subs	r1, r1, r3
    63ba:	08c9      	lsrs	r1, r1, #3
    63bc:	0189      	lsls	r1, r1, #6
    63be:	f041 0101 	orr.w	r1, r1, #1
    63c2:	f012 fd16 	bl	18df2 <log_0>

		/* Verify that we're still connected after blocking */
		if (conn->state != BT_CONN_CONNECTED) {
			BT_WARN("Disconnected while allocating context");
			tx_free(tx);
			return -ENOTCONN;
    63c6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    63ca:	e01d      	b.n	6408 <bt_conn_send_cb+0x68>
	if (cb) {
    63cc:	2a00      	cmp	r2, #0
    63ce:	d03a      	beq.n	6446 <bt_conn_send_cb+0xa6>
	return z_impl_k_current_get();
    63d0:	f011 fd20 	bl	17e14 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    63d4:	4b20      	ldr	r3, [pc, #128]	; (6458 <bt_conn_send_cb+0xb8>)
    63d6:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    63d8:	4820      	ldr	r0, [pc, #128]	; (645c <bt_conn_send_cb+0xbc>)
    63da:	bf07      	ittee	eq
    63dc:	2200      	moveq	r2, #0
    63de:	2300      	moveq	r3, #0
    63e0:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    63e4:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    63e8:	f010 ffbc 	bl	17364 <z_impl_k_queue_get>
    63ec:	4604      	mov	r4, r0
		if (!tx) {
    63ee:	b968      	cbnz	r0, 640c <bt_conn_send_cb+0x6c>
    63f0:	4b17      	ldr	r3, [pc, #92]	; (6450 <bt_conn_send_cb+0xb0>)
    63f2:	4916      	ldr	r1, [pc, #88]	; (644c <bt_conn_send_cb+0xac>)
			BT_ERR("Unable to allocate TX context");
    63f4:	481a      	ldr	r0, [pc, #104]	; (6460 <bt_conn_send_cb+0xc0>)
    63f6:	1ac9      	subs	r1, r1, r3
    63f8:	08c9      	lsrs	r1, r1, #3
    63fa:	0189      	lsls	r1, r1, #6
    63fc:	f041 0101 	orr.w	r1, r1, #1
    6400:	f012 fcf7 	bl	18df2 <log_0>
			return -ENOBUFS;
    6404:	f06f 0068 	mvn.w	r0, #104	; 0x68
		tx_data(buf)->tx = NULL;
	}

	net_buf_put(&conn->tx_queue, buf);
	return 0;
}
    6408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    640c:	7aab      	ldrb	r3, [r5, #10]
    640e:	2b07      	cmp	r3, #7
    6410:	d00d      	beq.n	642e <bt_conn_send_cb+0x8e>
    6412:	4b0f      	ldr	r3, [pc, #60]	; (6450 <bt_conn_send_cb+0xb0>)
    6414:	490d      	ldr	r1, [pc, #52]	; (644c <bt_conn_send_cb+0xac>)
			BT_WARN("Disconnected while allocating context");
    6416:	4813      	ldr	r0, [pc, #76]	; (6464 <bt_conn_send_cb+0xc4>)
    6418:	1ac9      	subs	r1, r1, r3
    641a:	08c9      	lsrs	r1, r1, #3
    641c:	0189      	lsls	r1, r1, #6
    641e:	f041 0102 	orr.w	r1, r1, #2
    6422:	f012 fce6 	bl	18df2 <log_0>
			tx_free(tx);
    6426:	4620      	mov	r0, r4
    6428:	f7ff feb4 	bl	6194 <tx_free>
    642c:	e7cb      	b.n	63c6 <bt_conn_send_cb+0x26>
		tx->pending_no_cb = 0U;
    642e:	2300      	movs	r3, #0
		tx->user_data = user_data;
    6430:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    6434:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    6436:	6170      	str	r0, [r6, #20]
	net_buf_put(&conn->tx_queue, buf);
    6438:	f105 0038 	add.w	r0, r5, #56	; 0x38
    643c:	4631      	mov	r1, r6
    643e:	f016 feff 	bl	1d240 <net_buf_put>
	return 0;
    6442:	2000      	movs	r0, #0
    6444:	e7e0      	b.n	6408 <bt_conn_send_cb+0x68>
		tx_data(buf)->tx = NULL;
    6446:	614a      	str	r2, [r1, #20]
    6448:	e7f6      	b.n	6438 <bt_conn_send_cb+0x98>
    644a:	bf00      	nop
    644c:	0001e428 	.word	0x0001e428
    6450:	0001e408 	.word	0x0001e408
    6454:	0001fcb4 	.word	0x0001fcb4
    6458:	200017e0 	.word	0x200017e0
    645c:	20000bec 	.word	0x20000bec
    6460:	0001fcc3 	.word	0x0001fcc3
    6464:	0001fce1 	.word	0x0001fce1

00006468 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    6468:	b570      	push	{r4, r5, r6, lr}
    646a:	4606      	mov	r6, r0
    646c:	460d      	mov	r5, r1
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
    646e:	480e      	ldr	r0, [pc, #56]	; (64a8 <bt_conn_add_le+0x40>)
    6470:	2101      	movs	r1, #1
    6472:	f013 ffe3 	bl	1a43c <bt_conn_new>
	if (!conn) {
    6476:	4604      	mov	r4, r0
    6478:	b1a0      	cbz	r0, 64a4 <bt_conn_add_le+0x3c>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
    647a:	490c      	ldr	r1, [pc, #48]	; (64ac <bt_conn_add_le+0x44>)
    647c:	3058      	adds	r0, #88	; 0x58
    647e:	f017 fb8e 	bl	1db9e <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
    6482:	490b      	ldr	r1, [pc, #44]	; (64b0 <bt_conn_add_le+0x48>)
    6484:	f104 0028 	add.w	r0, r4, #40	; 0x28
    6488:	f017 fb63 	bl	1db52 <k_work_init>

	if (!conn) {
		return NULL;
	}

	conn->id = id;
    648c:	7226      	strb	r6, [r4, #8]
    648e:	2207      	movs	r2, #7
    6490:	4629      	mov	r1, r5
    6492:	f104 0088 	add.w	r0, r4, #136	; 0x88
    6496:	f013 fb85 	bl	19ba4 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    649a:	2301      	movs	r3, #1
    649c:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    649e:	4b05      	ldr	r3, [pc, #20]	; (64b4 <bt_conn_add_le+0x4c>)
    64a0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    64a4:	4620      	mov	r0, r4
    64a6:	bd70      	pop	{r4, r5, r6, pc}
    64a8:	20000e40 	.word	0x20000e40
    64ac:	000067c5 	.word	0x000067c5
    64b0:	0001a437 	.word	0x0001a437
    64b4:	00280018 	.word	0x00280018

000064b8 <bt_conn_lookup_handle>:
		break;
	}
}

struct bt_conn *bt_conn_lookup_handle(uint16_t handle)
{
    64b8:	4602      	mov	r2, r0
    64ba:	b508      	push	{r3, lr}
	struct bt_conn *conn;

	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    64bc:	2101      	movs	r1, #1
    64be:	4803      	ldr	r0, [pc, #12]	; (64cc <bt_conn_lookup_handle+0x14>)
    64c0:	f014 f848 	bl	1a554 <conn_lookup_handle>
		return conn;
	}
#endif

	return NULL;
}
    64c4:	2800      	cmp	r0, #0
    64c6:	bf38      	it	cc
    64c8:	2000      	movcc	r0, #0
    64ca:	bd08      	pop	{r3, pc}
    64cc:	20000e40 	.word	0x20000e40

000064d0 <bt_conn_set_state>:
{
    64d0:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
    64d2:	7a86      	ldrb	r6, [r0, #10]
    64d4:	428e      	cmp	r6, r1
{
    64d6:	4604      	mov	r4, r0
    64d8:	460d      	mov	r5, r1
	if (conn->state == state) {
    64da:	d112      	bne.n	6502 <bt_conn_set_state+0x32>
    64dc:	4b65      	ldr	r3, [pc, #404]	; (6674 <bt_conn_set_state+0x1a4>)
    64de:	4a66      	ldr	r2, [pc, #408]	; (6678 <bt_conn_set_state+0x1a8>)
		BT_WARN("no transition %s", state2str(state));
    64e0:	4866      	ldr	r0, [pc, #408]	; (667c <bt_conn_set_state+0x1ac>)
    64e2:	2e08      	cmp	r6, #8
    64e4:	eba2 0203 	sub.w	r2, r2, r3
    64e8:	bf96      	itet	ls
    64ea:	4b65      	ldrls	r3, [pc, #404]	; (6680 <bt_conn_set_state+0x1b0>)
    64ec:	4965      	ldrhi	r1, [pc, #404]	; (6684 <bt_conn_set_state+0x1b4>)
    64ee:	f853 1026 	ldrls.w	r1, [r3, r6, lsl #2]
    64f2:	08d2      	lsrs	r2, r2, #3
    64f4:	0192      	lsls	r2, r2, #6
    64f6:	f042 0202 	orr.w	r2, r2, #2
}
    64fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
    64fe:	f012 bc85 	b.w	18e0c <log_1>
	conn->state = state;
    6502:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
    6504:	b90e      	cbnz	r6, 650a <bt_conn_set_state+0x3a>
		bt_conn_ref(conn);
    6506:	f013 fff3 	bl	1a4f0 <bt_conn_ref>
	switch (conn->state) {
    650a:	7aa3      	ldrb	r3, [r4, #10]
    650c:	2b08      	cmp	r3, #8
    650e:	f200 80a6 	bhi.w	665e <bt_conn_set_state+0x18e>
    6512:	e8df f003 	tbb	[pc, r3]
    6516:	0537      	.short	0x0537
    6518:	aeaeaeae 	.word	0xaeaeaeae
    651c:	1cae      	.short	0x1cae
    651e:	ae          	.byte	0xae
    651f:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
    6520:	4d59      	ldr	r5, [pc, #356]	; (6688 <bt_conn_set_state+0x1b8>)
		tx->pending_no_cb = 0U;
    6522:	2600      	movs	r6, #0
	__asm__ volatile(
    6524:	f04f 0320 	mov.w	r3, #32
    6528:	f3ef 8211 	mrs	r2, BASEPRI
    652c:	f383 8811 	msr	BASEPRI, r3
    6530:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    6534:	69e3      	ldr	r3, [r4, #28]
    6536:	2b00      	cmp	r3, #0
    6538:	d072      	beq.n	6620 <bt_conn_set_state+0x150>
			conn->pending_no_cb--;
    653a:	3b01      	subs	r3, #1
    653c:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    653e:	f382 8811 	msr	BASEPRI, r2
    6542:	f3bf 8f6f 	isb	sy
    6546:	4628      	mov	r0, r5
    6548:	f010 ff40 	bl	173cc <z_impl_k_sem_give>
}
    654c:	e7ea      	b.n	6524 <bt_conn_set_state+0x54>
		if (conn->type == BT_CONN_TYPE_SCO) {
    654e:	78a3      	ldrb	r3, [r4, #2]
    6550:	2b04      	cmp	r3, #4
    6552:	f000 808e 	beq.w	6672 <bt_conn_set_state+0x1a2>
	z_impl_k_queue_init(queue);
    6556:	f104 0038 	add.w	r0, r4, #56	; 0x38
    655a:	f017 fa06 	bl	1d96a <z_impl_k_queue_init>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    655e:	484b      	ldr	r0, [pc, #300]	; (668c <bt_conn_set_state+0x1bc>)
    6560:	2100      	movs	r1, #0
    6562:	f011 fef7 	bl	18354 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    6566:	2300      	movs	r3, #0
	list->tail = NULL;
    6568:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    656c:	78e3      	ldrb	r3, [r4, #3]
    656e:	2b01      	cmp	r3, #1
    6570:	d17f      	bne.n	6672 <bt_conn_set_state+0x1a2>
			k_work_schedule(&conn->deferred_work,
    6572:	f104 0058 	add.w	r0, r4, #88	; 0x58
    6576:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
    657a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
    657e:	2300      	movs	r3, #0
    6580:	f011 b904 	b.w	1778c <k_work_schedule>
		if (conn->type == BT_CONN_TYPE_SCO) {
    6584:	78a3      	ldrb	r3, [r4, #2]
    6586:	2b04      	cmp	r3, #4
    6588:	d104      	bne.n	6594 <bt_conn_set_state+0xc4>
			bt_conn_unref(conn);
    658a:	4620      	mov	r0, r4
}
    658c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
    6590:	f013 bfc9 	b.w	1a526 <bt_conn_unref>
		switch (old_state) {
    6594:	2e08      	cmp	r6, #8
    6596:	d86c      	bhi.n	6672 <bt_conn_set_state+0x1a2>
    6598:	a301      	add	r3, pc, #4	; (adr r3, 65a0 <bt_conn_set_state+0xd0>)
    659a:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
    659e:	bf00      	nop
    65a0:	0000660d 	.word	0x0000660d
    65a4:	000065c5 	.word	0x000065c5
    65a8:	000065ff 	.word	0x000065ff
    65ac:	0000658b 	.word	0x0000658b
    65b0:	0000658b 	.word	0x0000658b
    65b4:	000065ff 	.word	0x000065ff
    65b8:	000065ff 	.word	0x000065ff
    65bc:	0000660d 	.word	0x0000660d
    65c0:	0000660d 	.word	0x0000660d
			tx_notify(conn);
    65c4:	4620      	mov	r0, r4
    65c6:	f013 ff13 	bl	1a3f0 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    65ca:	78a3      	ldrb	r3, [r4, #2]
    65cc:	2b01      	cmp	r3, #1
    65ce:	d103      	bne.n	65d8 <bt_conn_set_state+0x108>
				k_work_cancel_delayable(&conn->deferred_work);
    65d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
    65d4:	f017 fb03 	bl	1dbde <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    65d8:	f3bf 8f5b 	dmb	ish
    65dc:	3404      	adds	r4, #4
    65de:	e854 3f00 	ldrex	r3, [r4]
    65e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    65e6:	e844 3200 	strex	r2, r3, [r4]
    65ea:	2a00      	cmp	r2, #0
    65ec:	d1f7      	bne.n	65de <bt_conn_set_state+0x10e>
    65ee:	f3bf 8f5b 	dmb	ish
    65f2:	4826      	ldr	r0, [pc, #152]	; (668c <bt_conn_set_state+0x1bc>)
}
    65f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    65f8:	2100      	movs	r1, #0
    65fa:	f011 beab 	b.w	18354 <z_impl_k_poll_signal_raise>
			if (conn->err) {
    65fe:	7a63      	ldrb	r3, [r4, #9]
    6600:	2b00      	cmp	r3, #0
    6602:	d0c2      	beq.n	658a <bt_conn_set_state+0xba>
				notify_connected(conn);
    6604:	4620      	mov	r0, r4
    6606:	f7ff fdcf 	bl	61a8 <notify_connected>
    660a:	e7be      	b.n	658a <bt_conn_set_state+0xba>
    660c:	4a1a      	ldr	r2, [pc, #104]	; (6678 <bt_conn_set_state+0x1a8>)
    660e:	4b19      	ldr	r3, [pc, #100]	; (6674 <bt_conn_set_state+0x1a4>)
			BT_WARN("Invalid (%u) old state", state);
    6610:	481f      	ldr	r0, [pc, #124]	; (6690 <bt_conn_set_state+0x1c0>)
    6612:	1ad2      	subs	r2, r2, r3
    6614:	08d2      	lsrs	r2, r2, #3
    6616:	0192      	lsls	r2, r2, #6
    6618:	f042 0202 	orr.w	r2, r2, #2
    661c:	4629      	mov	r1, r5
    661e:	e76c      	b.n	64fa <bt_conn_set_state+0x2a>
Z_GENLIST_IS_EMPTY(slist)
    6620:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    6622:	b128      	cbz	r0, 6630 <bt_conn_set_state+0x160>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    6624:	69a1      	ldr	r1, [r4, #24]
    6626:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    6628:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    662a:	4288      	cmp	r0, r1
	list->tail = node;
    662c:	bf08      	it	eq
    662e:	61a3      	streq	r3, [r4, #24]
    6630:	f382 8811 	msr	BASEPRI, r2
    6634:	f3bf 8f6f 	isb	sy
		if (!node) {
    6638:	b1d8      	cbz	r0, 6672 <bt_conn_set_state+0x1a2>
	__asm__ volatile(
    663a:	f04f 0220 	mov.w	r2, #32
    663e:	f3ef 8311 	mrs	r3, BASEPRI
    6642:	f382 8811 	msr	BASEPRI, r2
    6646:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    664a:	68c2      	ldr	r2, [r0, #12]
    664c:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    664e:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    6650:	f383 8811 	msr	BASEPRI, r3
    6654:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    6658:	f7ff fd9c 	bl	6194 <tx_free>
    665c:	e773      	b.n	6546 <bt_conn_set_state+0x76>
    665e:	4a06      	ldr	r2, [pc, #24]	; (6678 <bt_conn_set_state+0x1a8>)
    6660:	4b04      	ldr	r3, [pc, #16]	; (6674 <bt_conn_set_state+0x1a4>)
		BT_WARN("no valid (%u) state was set", state);
    6662:	480c      	ldr	r0, [pc, #48]	; (6694 <bt_conn_set_state+0x1c4>)
    6664:	1ad2      	subs	r2, r2, r3
    6666:	08d2      	lsrs	r2, r2, #3
    6668:	0192      	lsls	r2, r2, #6
    666a:	f042 0202 	orr.w	r2, r2, #2
    666e:	4629      	mov	r1, r5
    6670:	e743      	b.n	64fa <bt_conn_set_state+0x2a>
}
    6672:	bd70      	pop	{r4, r5, r6, pc}
    6674:	0001e408 	.word	0x0001e408
    6678:	0001e428 	.word	0x0001e428
    667c:	0001fd11 	.word	0x0001fd11
    6680:	0001e8e8 	.word	0x0001e8e8
    6684:	0001fd07 	.word	0x0001fd07
    6688:	200000d0 	.word	0x200000d0
    668c:	20000248 	.word	0x20000248
    6690:	0001fd22 	.word	0x0001fd22
    6694:	0001fd39 	.word	0x0001fd39

00006698 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
    6698:	b570      	push	{r4, r5, r6, lr}
    669a:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    669c:	480c      	ldr	r0, [pc, #48]	; (66d0 <bt_conn_lookup_addr_le+0x38>)
{
    669e:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    66a0:	f013 ff26 	bl	1a4f0 <bt_conn_ref>

		if (!conn) {
    66a4:	4604      	mov	r4, r0
    66a6:	b128      	cbz	r0, 66b4 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    66a8:	7883      	ldrb	r3, [r0, #2]
    66aa:	2b01      	cmp	r3, #1
    66ac:	d004      	beq.n	66b8 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
    66ae:	f013 ff3a 	bl	1a526 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    66b2:	2400      	movs	r4, #0
}
    66b4:	4620      	mov	r0, r4
    66b6:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
    66b8:	4629      	mov	r1, r5
    66ba:	4632      	mov	r2, r6
    66bc:	f013 fef8 	bl	1a4b0 <bt_conn_is_peer_addr_le>
    66c0:	4605      	mov	r5, r0
    66c2:	2800      	cmp	r0, #0
    66c4:	d1f6      	bne.n	66b4 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
    66c6:	4620      	mov	r0, r4
    66c8:	f013 ff2d 	bl	1a526 <bt_conn_unref>
	return NULL;
    66cc:	462c      	mov	r4, r5
			continue;
    66ce:	e7f1      	b.n	66b4 <bt_conn_lookup_addr_le+0x1c>
    66d0:	20000e40 	.word	0x20000e40

000066d4 <bt_conn_exists_le>:
{
    66d4:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
    66d6:	f7ff ffdf 	bl	6698 <bt_conn_lookup_addr_le>
	if (conn) {
    66da:	4604      	mov	r4, r0
    66dc:	b1a0      	cbz	r0, 6708 <bt_conn_exists_le+0x34>
    66de:	4b0b      	ldr	r3, [pc, #44]	; (670c <bt_conn_exists_le+0x38>)
    66e0:	4a0b      	ldr	r2, [pc, #44]	; (6710 <bt_conn_exists_le+0x3c>)
    66e2:	1ad2      	subs	r2, r2, r3
		BT_WARN("Found valid connection in %s state",
    66e4:	7a83      	ldrb	r3, [r0, #10]
    66e6:	480b      	ldr	r0, [pc, #44]	; (6714 <bt_conn_exists_le+0x40>)
    66e8:	2b08      	cmp	r3, #8
    66ea:	bf96      	itet	ls
    66ec:	490a      	ldrls	r1, [pc, #40]	; (6718 <bt_conn_exists_le+0x44>)
    66ee:	490b      	ldrhi	r1, [pc, #44]	; (671c <bt_conn_exists_le+0x48>)
    66f0:	f851 1023 	ldrls.w	r1, [r1, r3, lsl #2]
    66f4:	08d2      	lsrs	r2, r2, #3
    66f6:	0192      	lsls	r2, r2, #6
    66f8:	f042 0202 	orr.w	r2, r2, #2
    66fc:	f012 fb86 	bl	18e0c <log_1>
		bt_conn_unref(conn);
    6700:	4620      	mov	r0, r4
    6702:	f013 ff10 	bl	1a526 <bt_conn_unref>
		return true;
    6706:	2001      	movs	r0, #1
}
    6708:	bd10      	pop	{r4, pc}
    670a:	bf00      	nop
    670c:	0001e408 	.word	0x0001e408
    6710:	0001e428 	.word	0x0001e428
    6714:	0001fd55 	.word	0x0001fd55
    6718:	0001e8e8 	.word	0x0001e8e8
    671c:	0001fd07 	.word	0x0001fd07

00006720 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    6720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6722:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    6724:	480e      	ldr	r0, [pc, #56]	; (6760 <bt_conn_lookup_state_le+0x40>)
{
    6726:	460e      	mov	r6, r1
    6728:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    672a:	f013 fee1 	bl	1a4f0 <bt_conn_ref>

		if (!conn) {
    672e:	4604      	mov	r4, r0
    6730:	b1a0      	cbz	r0, 675c <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    6732:	7883      	ldrb	r3, [r0, #2]
    6734:	2b01      	cmp	r3, #1
    6736:	d003      	beq.n	6740 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
    6738:	f013 fef5 	bl	1a526 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    673c:	2400      	movs	r4, #0
			continue;
    673e:	e00d      	b.n	675c <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
    6740:	b136      	cbz	r6, 6750 <bt_conn_lookup_state_le+0x30>
    6742:	4632      	mov	r2, r6
    6744:	4629      	mov	r1, r5
    6746:	f013 feb3 	bl	1a4b0 <bt_conn_is_peer_addr_le>
    674a:	b908      	cbnz	r0, 6750 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
    674c:	4620      	mov	r0, r4
    674e:	e7f3      	b.n	6738 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
    6750:	7aa3      	ldrb	r3, [r4, #10]
    6752:	42bb      	cmp	r3, r7
    6754:	d1fa      	bne.n	674c <bt_conn_lookup_state_le+0x2c>
    6756:	7a23      	ldrb	r3, [r4, #8]
    6758:	42ab      	cmp	r3, r5
    675a:	d1f7      	bne.n	674c <bt_conn_lookup_state_le+0x2c>
}
    675c:	4620      	mov	r0, r4
    675e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6760:	20000e40 	.word	0x20000e40

00006764 <send_conn_le_param_update>:
{
    6764:	b538      	push	{r3, r4, r5, lr}
    6766:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    6768:	4608      	mov	r0, r1
{
    676a:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    676c:	f013 fd6f 	bl	1a24e <bt_le_conn_params_valid>
    6770:	b318      	cbz	r0, 67ba <send_conn_le_param_update+0x56>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    6772:	4b13      	ldr	r3, [pc, #76]	; (67c0 <send_conn_le_param_update+0x5c>)
    6774:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
    6778:	0799      	lsls	r1, r3, #30
    677a:	d407      	bmi.n	678c <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
    677c:	78e3      	ldrb	r3, [r4, #3]
    677e:	b183      	cbz	r3, 67a2 <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
    6780:	4629      	mov	r1, r5
    6782:	4620      	mov	r0, r4
}
    6784:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    6788:	f000 ba2a 	b.w	6be0 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    678c:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    6790:	079a      	lsls	r2, r3, #30
    6792:	d5f3      	bpl.n	677c <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6794:	f3bf 8f5b 	dmb	ish
    6798:	6863      	ldr	r3, [r4, #4]
    679a:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    679e:	055b      	lsls	r3, r3, #21
    67a0:	d4ec      	bmi.n	677c <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    67a2:	4629      	mov	r1, r5
    67a4:	4620      	mov	r0, r4
    67a6:	f013 ff1b 	bl	1a5e0 <bt_conn_le_conn_update>
		if (rc == 0) {
    67aa:	b928      	cbnz	r0, 67b8 <send_conn_le_param_update+0x54>
			conn->le.pending_latency = param->latency;
    67ac:	88ab      	ldrh	r3, [r5, #4]
    67ae:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    67b2:	88eb      	ldrh	r3, [r5, #6]
    67b4:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    67b8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    67ba:	f06f 0015 	mvn.w	r0, #21
    67be:	e7fb      	b.n	67b8 <send_conn_le_param_update+0x54>
    67c0:	20000000 	.word	0x20000000

000067c4 <deferred_work>:
{
    67c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    67c6:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
    67ca:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
    67cc:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    67d0:	b993      	cbnz	r3, 67f8 <deferred_work+0x34>
		bt_l2cap_disconnected(conn);
    67d2:	4630      	mov	r0, r6
    67d4:	f013 ff67 	bl	1a6a6 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    67d8:	4b1f      	ldr	r3, [pc, #124]	; (6858 <deferred_work+0x94>)
    67da:	681d      	ldr	r5, [r3, #0]
    67dc:	b925      	cbnz	r5, 67e8 <deferred_work+0x24>
		bt_conn_unref(conn);
    67de:	4630      	mov	r0, r6
    67e0:	f013 fea1 	bl	1a526 <bt_conn_unref>
}
    67e4:	b002      	add	sp, #8
    67e6:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->disconnected) {
    67e8:	686b      	ldr	r3, [r5, #4]
    67ea:	b11b      	cbz	r3, 67f4 <deferred_work+0x30>
			cb->disconnected(conn, conn->err);
    67ec:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
    67f0:	4630      	mov	r0, r6
    67f2:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    67f4:	692d      	ldr	r5, [r5, #16]
    67f6:	e7f1      	b.n	67dc <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
    67f8:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    67fc:	2b01      	cmp	r3, #1
    67fe:	d1f1      	bne.n	67e4 <deferred_work+0x20>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6800:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
    6804:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
    6808:	e855 3f00 	ldrex	r3, [r5]
    680c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    6810:	e845 2100 	strex	r1, r2, [r5]
    6814:	2900      	cmp	r1, #0
    6816:	d1f7      	bne.n	6808 <deferred_work+0x44>
    6818:	f3bf 8f5b 	dmb	ish
    681c:	059b      	lsls	r3, r3, #22
    681e:	d514      	bpl.n	684a <deferred_work+0x86>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    6820:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    6822:	9300      	str	r3, [sp, #0]
    6824:	6d23      	ldr	r3, [r4, #80]	; 0x50
    6826:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
    6828:	4669      	mov	r1, sp
    682a:	4630      	mov	r0, r6
    682c:	f7ff ff9a 	bl	6764 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6830:	f3bf 8f5b 	dmb	ish
    6834:	e855 3f00 	ldrex	r3, [r5]
    6838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    683c:	e845 3200 	strex	r2, r3, [r5]
    6840:	2a00      	cmp	r2, #0
    6842:	d1f7      	bne.n	6834 <deferred_work+0x70>
    6844:	f3bf 8f5b 	dmb	ish
    6848:	e7cc      	b.n	67e4 <deferred_work+0x20>
		param = BT_LE_CONN_PARAM(
    684a:	4a04      	ldr	r2, [pc, #16]	; (685c <deferred_work+0x98>)
    684c:	6810      	ldr	r0, [r2, #0]
    684e:	6851      	ldr	r1, [r2, #4]
    6850:	466b      	mov	r3, sp
    6852:	c303      	stmia	r3!, {r0, r1}
    6854:	e7e8      	b.n	6828 <deferred_work+0x64>
    6856:	bf00      	nop
    6858:	200019f0 	.word	0x200019f0
    685c:	0001e704 	.word	0x0001e704

00006860 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
    6860:	b538      	push	{r3, r4, r5, lr}
    6862:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
    6864:	490c      	ldr	r1, [pc, #48]	; (6898 <bt_conn_create_pdu_timeout+0x38>)
    6866:	2800      	cmp	r0, #0
    6868:	bf08      	it	eq
    686a:	4608      	moveq	r0, r1
    686c:	f016 fca2 	bl	1d1b4 <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
    6870:	4604      	mov	r4, r0
    6872:	b958      	cbnz	r0, 688c <bt_conn_create_pdu_timeout+0x2c>
    6874:	4909      	ldr	r1, [pc, #36]	; (689c <bt_conn_create_pdu_timeout+0x3c>)
    6876:	4b0a      	ldr	r3, [pc, #40]	; (68a0 <bt_conn_create_pdu_timeout+0x40>)
		BT_WARN("Unable to allocate buffer within timeout");
    6878:	480a      	ldr	r0, [pc, #40]	; (68a4 <bt_conn_create_pdu_timeout+0x44>)
    687a:	1ac9      	subs	r1, r1, r3
    687c:	08c9      	lsrs	r1, r1, #3
    687e:	0189      	lsls	r1, r1, #6
    6880:	f041 0102 	orr.w	r1, r1, #2
    6884:	f012 fab5 	bl	18df2 <log_0>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
    6888:	4620      	mov	r0, r4
    688a:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_reserve(&buf->b, reserve);
    688c:	1d29      	adds	r1, r5, #4
    688e:	3008      	adds	r0, #8
    6890:	f016 fcb5 	bl	1d1fe <net_buf_simple_reserve>
	return buf;
    6894:	e7f8      	b.n	6888 <bt_conn_create_pdu_timeout+0x28>
    6896:	bf00      	nop
    6898:	20000c1c 	.word	0x20000c1c
    689c:	0001e428 	.word	0x0001e428
    68a0:	0001e408 	.word	0x0001e408
    68a4:	0001fd78 	.word	0x0001fd78

000068a8 <bt_conn_index>:
		__ASSERT(0 <= index && index < ARRAY_SIZE(sco_conns),
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
    68a8:	4b03      	ldr	r3, [pc, #12]	; (68b8 <bt_conn_index+0x10>)
    68aa:	1ac0      	subs	r0, r0, r3
    68ac:	4b03      	ldr	r3, [pc, #12]	; (68bc <bt_conn_index+0x14>)
    68ae:	1180      	asrs	r0, r0, #6
    68b0:	4358      	muls	r0, r3
			 "Invalid bt_conn pointer");
		break;
	}

	return (uint8_t)index;
}
    68b2:	b2c0      	uxtb	r0, r0
    68b4:	4770      	bx	lr
    68b6:	bf00      	nop
    68b8:	20000e40 	.word	0x20000e40
    68bc:	aaaaaaab 	.word	0xaaaaaaab

000068c0 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
    68c0:	b570      	push	{r4, r5, r6, lr}
    68c2:	4d0b      	ldr	r5, [pc, #44]	; (68f0 <bt_conn_init+0x30>)
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    68c4:	4e0b      	ldr	r6, [pc, #44]	; (68f4 <bt_conn_init+0x34>)
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    68c6:	2400      	movs	r4, #0
		k_fifo_put(&free_tx, &conn_tx[i]);
    68c8:	4629      	mov	r1, r5
    68ca:	4630      	mov	r0, r6
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    68cc:	3401      	adds	r4, #1
		k_fifo_put(&free_tx, &conn_tx[i]);
    68ce:	f017 f878 	bl	1d9c2 <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    68d2:	2c08      	cmp	r4, #8
    68d4:	f105 0510 	add.w	r5, r5, #16
    68d8:	d1f6      	bne.n	68c8 <bt_conn_init+0x8>
	}

	bt_att_init();
    68da:	f014 faa9 	bl	1ae30 <bt_att_init>

	err = bt_smp_init();
    68de:	f014 fdb8 	bl	1b452 <bt_smp_init>
	if (err) {
    68e2:	4604      	mov	r4, r0
    68e4:	b908      	cbnz	r0, 68ea <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
    68e6:	f013 ff30 	bl	1a74a <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
    68ea:	4620      	mov	r0, r4
    68ec:	bd70      	pop	{r4, r5, r6, pc}
    68ee:	bf00      	nop
    68f0:	200019f4 	.word	0x200019f4
    68f4:	20000bec 	.word	0x20000bec

000068f8 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    68f8:	4a0b      	ldr	r2, [pc, #44]	; (6928 <l2cap_accept+0x30>)
{
    68fa:	b508      	push	{r3, lr}
    68fc:	4603      	mov	r3, r0
		if (l2cap->chan.chan.conn) {
    68fe:	6810      	ldr	r0, [r2, #0]
    6900:	b918      	cbnz	r0, 690a <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    6902:	4b0a      	ldr	r3, [pc, #40]	; (692c <l2cap_accept+0x34>)
    6904:	6053      	str	r3, [r2, #4]
		*chan = &l2cap->chan.chan;
    6906:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    6908:	bd08      	pop	{r3, pc}
    690a:	4909      	ldr	r1, [pc, #36]	; (6930 <l2cap_accept+0x38>)
    690c:	4a09      	ldr	r2, [pc, #36]	; (6934 <l2cap_accept+0x3c>)
	BT_ERR("No available L2CAP context for conn %p", conn);
    690e:	480a      	ldr	r0, [pc, #40]	; (6938 <l2cap_accept+0x40>)
    6910:	1a52      	subs	r2, r2, r1
    6912:	08d2      	lsrs	r2, r2, #3
    6914:	0192      	lsls	r2, r2, #6
    6916:	f042 0201 	orr.w	r2, r2, #1
    691a:	4619      	mov	r1, r3
    691c:	f012 fa76 	bl	18e0c <log_1>
	return -ENOMEM;
    6920:	f06f 000b 	mvn.w	r0, #11
    6924:	e7f0      	b.n	6908 <l2cap_accept+0x10>
    6926:	bf00      	nop
    6928:	20000f00 	.word	0x20000f00
    692c:	0001e92c 	.word	0x0001e92c
    6930:	0001e408 	.word	0x0001e408
    6934:	0001e510 	.word	0x0001e510
    6938:	0001fdfe 	.word	0x0001fdfe

0000693c <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    693c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    693e:	4605      	mov	r5, r0
    6940:	460f      	mov	r7, r1
    6942:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
    6944:	2300      	movs	r3, #0
    6946:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    694a:	2104      	movs	r1, #4
    694c:	2000      	movs	r0, #0
    694e:	f7ff ff87 	bl	6860 <bt_conn_create_pdu_timeout>
	if (!buf) {
    6952:	4604      	mov	r4, r0
    6954:	b960      	cbnz	r0, 6970 <l2cap_create_le_sig_pdu.isra.0+0x34>
    6956:	4a0a      	ldr	r2, [pc, #40]	; (6980 <l2cap_create_le_sig_pdu.isra.0+0x44>)
    6958:	4b0a      	ldr	r3, [pc, #40]	; (6984 <l2cap_create_le_sig_pdu.isra.0+0x48>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
    695a:	480b      	ldr	r0, [pc, #44]	; (6988 <l2cap_create_le_sig_pdu.isra.0+0x4c>)
    695c:	1ad2      	subs	r2, r2, r3
    695e:	08d2      	lsrs	r2, r2, #3
    6960:	0192      	lsls	r2, r2, #6
    6962:	f042 0201 	orr.w	r2, r2, #1
    6966:	4629      	mov	r1, r5
    6968:	f012 fa50 	bl	18e0c <log_1>
}
    696c:	4620      	mov	r0, r4
    696e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
    6970:	2104      	movs	r1, #4
    6972:	3008      	adds	r0, #8
    6974:	f016 fca3 	bl	1d2be <net_buf_simple_add>
	hdr->code = code;
    6978:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
    697a:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    697c:	8046      	strh	r6, [r0, #2]
	return buf;
    697e:	e7f5      	b.n	696c <l2cap_create_le_sig_pdu.isra.0+0x30>
    6980:	0001e510 	.word	0x0001e510
    6984:	0001e408 	.word	0x0001e408
    6988:	0001fe25 	.word	0x0001fe25

0000698c <l2cap_rtx_timeout>:
{
    698c:	b538      	push	{r3, r4, r5, lr}
    698e:	4a0b      	ldr	r2, [pc, #44]	; (69bc <l2cap_rtx_timeout+0x30>)
    6990:	4b0b      	ldr	r3, [pc, #44]	; (69c0 <l2cap_rtx_timeout+0x34>)
	struct bt_conn *conn = chan->chan.conn;
    6992:	4604      	mov	r4, r0
    6994:	1ad2      	subs	r2, r2, r3
    6996:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
    699a:	480a      	ldr	r0, [pc, #40]	; (69c4 <l2cap_rtx_timeout+0x38>)
    699c:	08d2      	lsrs	r2, r2, #3
    699e:	0192      	lsls	r2, r2, #6
    69a0:	4621      	mov	r1, r4
    69a2:	f042 0201 	orr.w	r2, r2, #1
    69a6:	f012 fa31 	bl	18e0c <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
    69aa:	4628      	mov	r0, r5
    69ac:	4621      	mov	r1, r4
    69ae:	f013 fe43 	bl	1a638 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    69b2:	4620      	mov	r0, r4
}
    69b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    69b8:	f013 be60 	b.w	1a67c <bt_l2cap_chan_del>
    69bc:	0001e510 	.word	0x0001e510
    69c0:	0001e408 	.word	0x0001e408
    69c4:	0001fe4d 	.word	0x0001fe4d

000069c8 <bt_l2cap_connected>:
{
    69c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    69cc:	4e29      	ldr	r6, [pc, #164]	; (6a74 <bt_l2cap_connected+0xac>)
    69ce:	4f2a      	ldr	r7, [pc, #168]	; (6a78 <bt_l2cap_connected+0xb0>)
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
    69d0:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 6a7c <bt_l2cap_connected+0xb4>
{
    69d4:	4604      	mov	r4, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    69d6:	42be      	cmp	r6, r7
    69d8:	d302      	bcc.n	69e0 <bt_l2cap_connected+0x18>
}
    69da:	b003      	add	sp, #12
    69dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    69e0:	6873      	ldr	r3, [r6, #4]
    69e2:	a901      	add	r1, sp, #4
    69e4:	4620      	mov	r0, r4
    69e6:	4798      	blx	r3
    69e8:	2800      	cmp	r0, #0
    69ea:	db3d      	blt.n	6a68 <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
    69ec:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    69ee:	8833      	ldrh	r3, [r6, #0]
    69f0:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
    69f4:	f8a5 307c 	strh.w	r3, [r5, #124]	; 0x7c
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
    69f8:	4641      	mov	r1, r8
    69fa:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    69fe:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
    6a02:	f017 f8cc 	bl	1db9e <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    6a06:	f3bf 8f5b 	dmb	ish
    6a0a:	f105 0368 	add.w	r3, r5, #104	; 0x68
    6a0e:	2200      	movs	r2, #0
    6a10:	e853 1f00 	ldrex	r1, [r3]
    6a14:	e843 2000 	strex	r0, r2, [r3]
    6a18:	2800      	cmp	r0, #0
    6a1a:	d1f9      	bne.n	6a10 <bt_l2cap_connected+0x48>
    6a1c:	f3bf 8f5b 	dmb	ish
	parent->next = child;
    6a20:	60aa      	str	r2, [r5, #8]
Z_GENLIST_APPEND(slist, snode)
    6a22:	6d62      	ldr	r2, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
    6a24:	f105 0308 	add.w	r3, r5, #8
    6a28:	bb02      	cbnz	r2, 6a6c <bt_l2cap_connected+0xa4>
	list->head = node;
    6a2a:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (chan->ops->connected) {
    6a2e:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    6a30:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
    6a32:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    6a34:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    6a38:	681b      	ldr	r3, [r3, #0]
    6a3a:	b103      	cbz	r3, 6a3e <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
    6a3c:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6a3e:	9b01      	ldr	r3, [sp, #4]
    6a40:	f3bf 8f5b 	dmb	ish
    6a44:	3368      	adds	r3, #104	; 0x68
    6a46:	e853 2f00 	ldrex	r2, [r3]
    6a4a:	f042 0201 	orr.w	r2, r2, #1
    6a4e:	e843 2100 	strex	r1, r2, [r3]
    6a52:	2900      	cmp	r1, #0
    6a54:	d1f7      	bne.n	6a46 <bt_l2cap_connected+0x7e>
    6a56:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    6a5a:	9801      	ldr	r0, [sp, #4]
    6a5c:	6843      	ldr	r3, [r0, #4]
    6a5e:	699b      	ldr	r3, [r3, #24]
    6a60:	b113      	cbz	r3, 6a68 <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
    6a62:	f100 0168 	add.w	r1, r0, #104	; 0x68
    6a66:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    6a68:	360c      	adds	r6, #12
    6a6a:	e7b4      	b.n	69d6 <bt_l2cap_connected+0xe>
	parent->next = child;
    6a6c:	6013      	str	r3, [r2, #0]
	list->tail = node;
    6a6e:	6563      	str	r3, [r4, #84]	; 0x54
}
    6a70:	e7dd      	b.n	6a2e <bt_l2cap_connected+0x66>
    6a72:	bf00      	nop
    6a74:	0001e270 	.word	0x0001e270
    6a78:	0001e294 	.word	0x0001e294
    6a7c:	0000698d 	.word	0x0000698d

00006a80 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
    6a80:	898b      	ldrh	r3, [r1, #12]
    6a82:	2b03      	cmp	r3, #3
{
    6a84:	b573      	push	{r0, r1, r4, r5, r6, lr}
    6a86:	4606      	mov	r6, r0
    6a88:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    6a8a:	d80a      	bhi.n	6aa2 <l2cap_recv+0x22>
    6a8c:	4931      	ldr	r1, [pc, #196]	; (6b54 <l2cap_recv+0xd4>)
    6a8e:	4b32      	ldr	r3, [pc, #200]	; (6b58 <l2cap_recv+0xd8>)
		BT_ERR("Too small L2CAP signaling PDU");
    6a90:	4832      	ldr	r0, [pc, #200]	; (6b5c <l2cap_recv+0xdc>)
    6a92:	1ac9      	subs	r1, r1, r3
    6a94:	08c9      	lsrs	r1, r1, #3
    6a96:	0189      	lsls	r1, r1, #6
    6a98:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid ident value in L2CAP PDU");
    6a9c:	f012 f9a9 	bl	18df2 <log_0>
		return 0;
    6aa0:	e013      	b.n	6aca <l2cap_recv+0x4a>
	return net_buf_simple_pull_mem(&buf->b, len);
    6aa2:	2104      	movs	r1, #4
    6aa4:	f105 0008 	add.w	r0, r5, #8
    6aa8:	f016 fc6e 	bl	1d388 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    6aac:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    6aae:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
    6ab0:	428a      	cmp	r2, r1
    6ab2:	4604      	mov	r4, r0
    6ab4:	d00c      	beq.n	6ad0 <l2cap_recv+0x50>
    6ab6:	4828      	ldr	r0, [pc, #160]	; (6b58 <l2cap_recv+0xd8>)
    6ab8:	4b26      	ldr	r3, [pc, #152]	; (6b54 <l2cap_recv+0xd4>)
    6aba:	1a1b      	subs	r3, r3, r0
    6abc:	08db      	lsrs	r3, r3, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    6abe:	019b      	lsls	r3, r3, #6
    6ac0:	4827      	ldr	r0, [pc, #156]	; (6b60 <l2cap_recv+0xe0>)
    6ac2:	f043 0301 	orr.w	r3, r3, #1
    6ac6:	f012 f9b5 	bl	18e34 <log_2>
}
    6aca:	2000      	movs	r0, #0
    6acc:	b002      	add	sp, #8
    6ace:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
    6ad0:	7843      	ldrb	r3, [r0, #1]
    6ad2:	b943      	cbnz	r3, 6ae6 <l2cap_recv+0x66>
    6ad4:	491f      	ldr	r1, [pc, #124]	; (6b54 <l2cap_recv+0xd4>)
    6ad6:	4b20      	ldr	r3, [pc, #128]	; (6b58 <l2cap_recv+0xd8>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    6ad8:	4822      	ldr	r0, [pc, #136]	; (6b64 <l2cap_recv+0xe4>)
    6ada:	1ac9      	subs	r1, r1, r3
    6adc:	08c9      	lsrs	r1, r1, #3
    6ade:	0189      	lsls	r1, r1, #6
    6ae0:	f041 0101 	orr.w	r1, r1, #1
    6ae4:	e7da      	b.n	6a9c <l2cap_recv+0x1c>
	switch (hdr->code) {
    6ae6:	7801      	ldrb	r1, [r0, #0]
    6ae8:	2901      	cmp	r1, #1
    6aea:	d0ee      	beq.n	6aca <l2cap_recv+0x4a>
    6aec:	2913      	cmp	r1, #19
    6aee:	d10a      	bne.n	6b06 <l2cap_recv+0x86>
	if (buf->len < sizeof(*rsp)) {
    6af0:	2a01      	cmp	r2, #1
    6af2:	d8ea      	bhi.n	6aca <l2cap_recv+0x4a>
    6af4:	4917      	ldr	r1, [pc, #92]	; (6b54 <l2cap_recv+0xd4>)
    6af6:	4b18      	ldr	r3, [pc, #96]	; (6b58 <l2cap_recv+0xd8>)
		BT_ERR("Too small LE conn param rsp");
    6af8:	481b      	ldr	r0, [pc, #108]	; (6b68 <l2cap_recv+0xe8>)
    6afa:	1ac9      	subs	r1, r1, r3
    6afc:	08c9      	lsrs	r1, r1, #3
    6afe:	0189      	lsls	r1, r1, #6
    6b00:	f041 0101 	orr.w	r1, r1, #1
    6b04:	e7ca      	b.n	6a9c <l2cap_recv+0x1c>
    6b06:	4b14      	ldr	r3, [pc, #80]	; (6b58 <l2cap_recv+0xd8>)
    6b08:	4a12      	ldr	r2, [pc, #72]	; (6b54 <l2cap_recv+0xd4>)
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    6b0a:	4818      	ldr	r0, [pc, #96]	; (6b6c <l2cap_recv+0xec>)
    6b0c:	1ad2      	subs	r2, r2, r3
    6b0e:	08d2      	lsrs	r2, r2, #3
    6b10:	0192      	lsls	r2, r2, #6
    6b12:	f042 0202 	orr.w	r2, r2, #2
    6b16:	f012 f979 	bl	18e0c <log_1>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    6b1a:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
    6b1c:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    6b1e:	2202      	movs	r2, #2
    6b20:	2001      	movs	r0, #1
    6b22:	f7ff ff0b 	bl	693c <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    6b26:	4604      	mov	r4, r0
    6b28:	2800      	cmp	r0, #0
    6b2a:	d0ce      	beq.n	6aca <l2cap_recv+0x4a>
	return net_buf_simple_add(&buf->b, len);
    6b2c:	2102      	movs	r1, #2
    6b2e:	3008      	adds	r0, #8
    6b30:	f016 fbc5 	bl	1d2be <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    6b34:	2300      	movs	r3, #0
    6b36:	7003      	strb	r3, [r0, #0]
    6b38:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    6b3a:	4622      	mov	r2, r4
    6b3c:	9300      	str	r3, [sp, #0]
    6b3e:	2105      	movs	r1, #5
    6b40:	4628      	mov	r0, r5
    6b42:	f013 fdc9 	bl	1a6d8 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
    6b46:	2800      	cmp	r0, #0
    6b48:	d0bf      	beq.n	6aca <l2cap_recv+0x4a>
		net_buf_unref(buf);
    6b4a:	4620      	mov	r0, r4
    6b4c:	f00e fe06 	bl	1575c <net_buf_unref>
    6b50:	e7bb      	b.n	6aca <l2cap_recv+0x4a>
    6b52:	bf00      	nop
    6b54:	0001e510 	.word	0x0001e510
    6b58:	0001e408 	.word	0x0001e408
    6b5c:	0001fe5d 	.word	0x0001fe5d
    6b60:	0001fe7b 	.word	0x0001fe7b
    6b64:	0001fe9c 	.word	0x0001fe9c
    6b68:	0001febd 	.word	0x0001febd
    6b6c:	0001fed9 	.word	0x0001fed9

00006b70 <bt_l2cap_recv>:
{
    6b70:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
    6b72:	898b      	ldrh	r3, [r1, #12]
    6b74:	2b03      	cmp	r3, #3
{
    6b76:	4605      	mov	r5, r0
    6b78:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    6b7a:	d80e      	bhi.n	6b9a <bt_l2cap_recv+0x2a>
    6b7c:	4914      	ldr	r1, [pc, #80]	; (6bd0 <bt_l2cap_recv+0x60>)
    6b7e:	4b15      	ldr	r3, [pc, #84]	; (6bd4 <bt_l2cap_recv+0x64>)
		BT_ERR("Too small L2CAP PDU received");
    6b80:	4815      	ldr	r0, [pc, #84]	; (6bd8 <bt_l2cap_recv+0x68>)
    6b82:	1ac9      	subs	r1, r1, r3
    6b84:	08c9      	lsrs	r1, r1, #3
    6b86:	0189      	lsls	r1, r1, #6
    6b88:	f041 0101 	orr.w	r1, r1, #1
    6b8c:	f012 f931 	bl	18df2 <log_0>
	net_buf_unref(buf);
    6b90:	4620      	mov	r0, r4
}
    6b92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
    6b96:	f00e bde1 	b.w	1575c <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
    6b9a:	2104      	movs	r1, #4
    6b9c:	f104 0008 	add.w	r0, r4, #8
    6ba0:	f016 fbf2 	bl	1d388 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
    6ba4:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    6ba6:	4628      	mov	r0, r5
    6ba8:	f013 fdbf 	bl	1a72a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    6bac:	b950      	cbnz	r0, 6bc4 <bt_l2cap_recv+0x54>
    6bae:	4b09      	ldr	r3, [pc, #36]	; (6bd4 <bt_l2cap_recv+0x64>)
    6bb0:	4a07      	ldr	r2, [pc, #28]	; (6bd0 <bt_l2cap_recv+0x60>)
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
    6bb2:	480a      	ldr	r0, [pc, #40]	; (6bdc <bt_l2cap_recv+0x6c>)
    6bb4:	1ad2      	subs	r2, r2, r3
    6bb6:	08d2      	lsrs	r2, r2, #3
    6bb8:	0192      	lsls	r2, r2, #6
    6bba:	f042 0202 	orr.w	r2, r2, #2
    6bbe:	f012 f925 	bl	18e0c <log_1>
		net_buf_unref(buf);
    6bc2:	e7e5      	b.n	6b90 <bt_l2cap_recv+0x20>
	chan->ops->recv(chan, buf);
    6bc4:	6843      	ldr	r3, [r0, #4]
    6bc6:	4621      	mov	r1, r4
    6bc8:	691b      	ldr	r3, [r3, #16]
    6bca:	4798      	blx	r3
    6bcc:	e7e0      	b.n	6b90 <bt_l2cap_recv+0x20>
    6bce:	bf00      	nop
    6bd0:	0001e510 	.word	0x0001e510
    6bd4:	0001e408 	.word	0x0001e408
    6bd8:	0001fef7 	.word	0x0001fef7
    6bdc:	0001ff14 	.word	0x0001ff14

00006be0 <bt_l2cap_update_conn_param>:
{
    6be0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
    6be2:	4b17      	ldr	r3, [pc, #92]	; (6c40 <bt_l2cap_update_conn_param+0x60>)
    6be4:	781a      	ldrb	r2, [r3, #0]
    6be6:	3201      	adds	r2, #1
	if (!ident) {
    6be8:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    6bec:	bf08      	it	eq
    6bee:	2201      	moveq	r2, #1
    6bf0:	701a      	strb	r2, [r3, #0]
{
    6bf2:	4606      	mov	r6, r0
    6bf4:	460d      	mov	r5, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    6bf6:	2208      	movs	r2, #8
    6bf8:	7819      	ldrb	r1, [r3, #0]
    6bfa:	2012      	movs	r0, #18
    6bfc:	f7ff fe9e 	bl	693c <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    6c00:	4604      	mov	r4, r0
    6c02:	b1d0      	cbz	r0, 6c3a <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
    6c04:	2108      	movs	r1, #8
    6c06:	4408      	add	r0, r1
    6c08:	f016 fb59 	bl	1d2be <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    6c0c:	882b      	ldrh	r3, [r5, #0]
    6c0e:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    6c10:	886b      	ldrh	r3, [r5, #2]
    6c12:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    6c14:	88ab      	ldrh	r3, [r5, #4]
    6c16:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    6c18:	88eb      	ldrh	r3, [r5, #6]
    6c1a:	80c3      	strh	r3, [r0, #6]
    6c1c:	2300      	movs	r3, #0
    6c1e:	9300      	str	r3, [sp, #0]
    6c20:	4622      	mov	r2, r4
    6c22:	2105      	movs	r1, #5
    6c24:	4630      	mov	r0, r6
    6c26:	f013 fd57 	bl	1a6d8 <bt_l2cap_send_cb>
	if (err) {
    6c2a:	4605      	mov	r5, r0
    6c2c:	b110      	cbz	r0, 6c34 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
    6c2e:	4620      	mov	r0, r4
    6c30:	f00e fd94 	bl	1575c <net_buf_unref>
}
    6c34:	4628      	mov	r0, r5
    6c36:	b002      	add	sp, #8
    6c38:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    6c3a:	f06f 050b 	mvn.w	r5, #11
    6c3e:	e7f9      	b.n	6c34 <bt_l2cap_update_conn_param+0x54>
    6c40:	20002ff2 	.word	0x20002ff2

00006c44 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
    6c44:	4b02      	ldr	r3, [pc, #8]	; (6c50 <att_cfm_sent+0xc>)
    6c46:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
    6c4a:	f013 bdac 	b.w	1a7a6 <att_sent>
    6c4e:	bf00      	nop
    6c50:	0001a977 	.word	0x0001a977

00006c54 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
    6c54:	4b02      	ldr	r3, [pc, #8]	; (6c60 <att_rsp_sent+0xc>)
    6c56:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
    6c5a:	f013 bda4 	b.w	1a7a6 <att_sent>
    6c5e:	bf00      	nop
    6c60:	0001a993 	.word	0x0001a993

00006c64 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
    6c64:	4b02      	ldr	r3, [pc, #8]	; (6c70 <att_req_sent+0xc>)
    6c66:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
    6c6a:	f013 bd9c 	b.w	1a7a6 <att_sent>
    6c6e:	bf00      	nop
    6c70:	0001a961 	.word	0x0001a961

00006c74 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    6c74:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    6c76:	3808      	subs	r0, #8
    6c78:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    6c7a:	a901      	add	r1, sp, #4
    6c7c:	4802      	ldr	r0, [pc, #8]	; (6c88 <bt_att_released+0x14>)
    6c7e:	f016 fdc7 	bl	1d810 <k_mem_slab_free>
}
    6c82:	b003      	add	sp, #12
    6c84:	f85d fb04 	ldr.w	pc, [sp], #4
    6c88:	20000b10 	.word	0x20000b10

00006c8c <find_type_cb>:
{
    6c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
    6c90:	f8d2 9000 	ldr.w	r9, [r2]
{
    6c94:	b091      	sub	sp, #68	; 0x44
    6c96:	4607      	mov	r7, r0
    6c98:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    6c9a:	2500      	movs	r5, #0
    6c9c:	f642 0301 	movw	r3, #10241	; 0x2801
    6ca0:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
    6ca2:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    6ca6:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    6caa:	a90b      	add	r1, sp, #44	; 0x2c
{
    6cac:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    6cae:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    6cb2:	f013 f9f4 	bl	1a09e <bt_uuid_cmp>
    6cb6:	2800      	cmp	r0, #0
    6cb8:	d066      	beq.n	6d88 <find_type_cb+0xfc>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    6cba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    6cbe:	6838      	ldr	r0, [r7, #0]
    6cc0:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    6cc4:	a90b      	add	r1, sp, #44	; 0x2c
    6cc6:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    6cca:	f013 f9e8 	bl	1a09e <bt_uuid_cmp>
    6cce:	b138      	cbz	r0, 6ce0 <find_type_cb+0x54>
		if (data->group &&
    6cd0:	68a3      	ldr	r3, [r4, #8]
    6cd2:	b11b      	cbz	r3, 6cdc <find_type_cb+0x50>
    6cd4:	885a      	ldrh	r2, [r3, #2]
    6cd6:	42b2      	cmp	r2, r6
    6cd8:	d200      	bcs.n	6cdc <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
    6cda:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
    6cdc:	2001      	movs	r0, #1
    6cde:	e009      	b.n	6cf4 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
    6ce0:	6861      	ldr	r1, [r4, #4]
    6ce2:	4608      	mov	r0, r1
    6ce4:	f013 fd57 	bl	1a796 <net_buf_frags_len>
    6ce8:	f8b9 3086 	ldrh.w	r3, [r9, #134]	; 0x86
    6cec:	1a1b      	subs	r3, r3, r0
    6cee:	2b03      	cmp	r3, #3
    6cf0:	d803      	bhi.n	6cfa <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
    6cf2:	2000      	movs	r0, #0
}
    6cf4:	b011      	add	sp, #68	; 0x44
    6cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
    6cfa:	4608      	mov	r0, r1
    6cfc:	f016 fab1 	bl	1d262 <net_buf_frag_last>
    6d00:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
    6d02:	6860      	ldr	r0, [r4, #4]
    6d04:	f013 fd47 	bl	1a796 <net_buf_frags_len>
    6d08:	f8b9 a086 	ldrh.w	sl, [r9, #134]	; 0x86
	return net_buf_simple_tailroom(&buf->b);
    6d0c:	f105 0b08 	add.w	fp, r5, #8
    6d10:	ebaa 0a00 	sub.w	sl, sl, r0
    6d14:	4658      	mov	r0, fp
    6d16:	f016 fb67 	bl	1d3e8 <net_buf_simple_tailroom>
    6d1a:	4582      	cmp	sl, r0
    6d1c:	d237      	bcs.n	6d8e <find_type_cb+0x102>
    6d1e:	6860      	ldr	r0, [r4, #4]
    6d20:	f013 fd39 	bl	1a796 <net_buf_frags_len>
    6d24:	f8b9 3086 	ldrh.w	r3, [r9, #134]	; 0x86
    6d28:	1a18      	subs	r0, r3, r0
	if (!len) {
    6d2a:	b970      	cbnz	r0, 6d4a <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
    6d2c:	6863      	ldr	r3, [r4, #4]
    6d2e:	7998      	ldrb	r0, [r3, #6]
    6d30:	f00e fc58 	bl	155e4 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
    6d34:	2200      	movs	r2, #0
    6d36:	2300      	movs	r3, #0
    6d38:	f016 fa3c 	bl	1d1b4 <net_buf_alloc_fixed>
		if (!frag) {
    6d3c:	4605      	mov	r5, r0
    6d3e:	2800      	cmp	r0, #0
    6d40:	d0d7      	beq.n	6cf2 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
    6d42:	4601      	mov	r1, r0
    6d44:	6860      	ldr	r0, [r4, #4]
    6d46:	f016 fa9d 	bl	1d284 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    6d4a:	2300      	movs	r3, #0
    6d4c:	9300      	str	r3, [sp, #0]
    6d4e:	f8d7 9004 	ldr.w	r9, [r7, #4]
    6d52:	4639      	mov	r1, r7
    6d54:	2310      	movs	r3, #16
    6d56:	aa02      	add	r2, sp, #8
    6d58:	4640      	mov	r0, r8
    6d5a:	47c8      	blx	r9
	if (read < 0) {
    6d5c:	1e07      	subs	r7, r0, #0
    6d5e:	db13      	blt.n	6d88 <find_type_cb+0xfc>
	if (read != data->value_len) {
    6d60:	7c22      	ldrb	r2, [r4, #16]
    6d62:	68e0      	ldr	r0, [r4, #12]
    6d64:	42ba      	cmp	r2, r7
    6d66:	d037      	beq.n	6dd8 <find_type_cb+0x14c>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    6d68:	4601      	mov	r1, r0
    6d6a:	a80b      	add	r0, sp, #44	; 0x2c
    6d6c:	f013 f9c1 	bl	1a0f2 <bt_uuid_create>
    6d70:	b988      	cbnz	r0, 6d96 <find_type_cb+0x10a>
    6d72:	4a1b      	ldr	r2, [pc, #108]	; (6de0 <find_type_cb+0x154>)
    6d74:	4b1b      	ldr	r3, [pc, #108]	; (6de4 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %u", data->value_len);
    6d76:	7c21      	ldrb	r1, [r4, #16]
    6d78:	481b      	ldr	r0, [pc, #108]	; (6de8 <find_type_cb+0x15c>)
    6d7a:	1ad2      	subs	r2, r2, r3
    6d7c:	08d2      	lsrs	r2, r2, #3
    6d7e:	0192      	lsls	r2, r2, #6
    6d80:	f042 0202 	orr.w	r2, r2, #2
			BT_WARN("Unable to create UUID: size %d", read);
    6d84:	f012 f842 	bl	18e0c <log_1>
	data->group = NULL;
    6d88:	2300      	movs	r3, #0
    6d8a:	60a3      	str	r3, [r4, #8]
    6d8c:	e7a6      	b.n	6cdc <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
    6d8e:	4658      	mov	r0, fp
    6d90:	f016 fb2a 	bl	1d3e8 <net_buf_simple_tailroom>
    6d94:	e7c9      	b.n	6d2a <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
    6d96:	b2fa      	uxtb	r2, r7
    6d98:	a902      	add	r1, sp, #8
    6d9a:	a806      	add	r0, sp, #24
    6d9c:	f013 f9a9 	bl	1a0f2 <bt_uuid_create>
    6da0:	b948      	cbnz	r0, 6db6 <find_type_cb+0x12a>
    6da2:	4a0f      	ldr	r2, [pc, #60]	; (6de0 <find_type_cb+0x154>)
    6da4:	4b0f      	ldr	r3, [pc, #60]	; (6de4 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %d", read);
    6da6:	4811      	ldr	r0, [pc, #68]	; (6dec <find_type_cb+0x160>)
    6da8:	1ad2      	subs	r2, r2, r3
    6daa:	08d2      	lsrs	r2, r2, #3
    6dac:	0192      	lsls	r2, r2, #6
    6dae:	f042 0202 	orr.w	r2, r2, #2
    6db2:	4639      	mov	r1, r7
    6db4:	e7e6      	b.n	6d84 <find_type_cb+0xf8>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
    6db6:	a906      	add	r1, sp, #24
    6db8:	a80b      	add	r0, sp, #44	; 0x2c
    6dba:	f013 f970 	bl	1a09e <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
    6dbe:	2800      	cmp	r0, #0
    6dc0:	d1e2      	bne.n	6d88 <find_type_cb+0xfc>
	data->err = 0x00;
    6dc2:	2300      	movs	r3, #0
    6dc4:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
    6dc6:	2104      	movs	r1, #4
    6dc8:	f105 0008 	add.w	r0, r5, #8
    6dcc:	f016 fa77 	bl	1d2be <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
    6dd0:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    6dd2:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    6dd4:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
    6dd6:	e781      	b.n	6cdc <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
    6dd8:	a902      	add	r1, sp, #8
    6dda:	f012 fed3 	bl	19b84 <memcmp>
    6dde:	e7ee      	b.n	6dbe <find_type_cb+0x132>
    6de0:	0001e418 	.word	0x0001e418
    6de4:	0001e408 	.word	0x0001e408
    6de8:	0001ff50 	.word	0x0001ff50
    6dec:	0001ff6f 	.word	0x0001ff6f

00006df0 <chan_send>:
{
    6df0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    6df4:	688b      	ldr	r3, [r1, #8]
    6df6:	781b      	ldrb	r3, [r3, #0]
    6df8:	2bd2      	cmp	r3, #210	; 0xd2
{
    6dfa:	4606      	mov	r6, r0
    6dfc:	460c      	mov	r4, r1
    6dfe:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    6e00:	d116      	bne.n	6e30 <chan_send+0x40>
		err = bt_smp_sign(chan->att->conn, buf);
    6e02:	6803      	ldr	r3, [r0, #0]
    6e04:	6818      	ldr	r0, [r3, #0]
    6e06:	f014 fb21 	bl	1b44c <bt_smp_sign>
		if (err) {
    6e0a:	4605      	mov	r5, r0
    6e0c:	b180      	cbz	r0, 6e30 <chan_send+0x40>
    6e0e:	4b24      	ldr	r3, [pc, #144]	; (6ea0 <chan_send+0xb0>)
    6e10:	4924      	ldr	r1, [pc, #144]	; (6ea4 <chan_send+0xb4>)
			BT_ERR("Error signing data");
    6e12:	4825      	ldr	r0, [pc, #148]	; (6ea8 <chan_send+0xb8>)
    6e14:	1ac9      	subs	r1, r1, r3
    6e16:	08c9      	lsrs	r1, r1, #3
    6e18:	0189      	lsls	r1, r1, #6
    6e1a:	f041 0101 	orr.w	r1, r1, #1
    6e1e:	f011 ffe8 	bl	18df2 <log_0>
			net_buf_unref(buf);
    6e22:	4620      	mov	r0, r4
    6e24:	f00e fc9a 	bl	1575c <net_buf_unref>
}
    6e28:	4628      	mov	r0, r5
    6e2a:	b003      	add	sp, #12
    6e2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
    6e30:	f104 0008 	add.w	r0, r4, #8
    6e34:	f016 fad4 	bl	1d3e0 <net_buf_simple_headroom>
	state->len = buf->len;
    6e38:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    6e3c:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
    6e3e:	b957      	cbnz	r7, 6e56 <chan_send+0x66>
	switch (att_op_get_type(buf->data[0])) {
    6e40:	68a3      	ldr	r3, [r4, #8]
    6e42:	7818      	ldrb	r0, [r3, #0]
    6e44:	f013 fcc5 	bl	1a7d2 <att_op_get_type>
    6e48:	1e43      	subs	r3, r0, #1
    6e4a:	b2db      	uxtb	r3, r3
    6e4c:	2b04      	cmp	r3, #4
    6e4e:	bf9c      	itt	ls
    6e50:	4a16      	ldrls	r2, [pc, #88]	; (6eac <chan_send+0xbc>)
    6e52:	f852 7023 	ldrls.w	r7, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    6e56:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
    6e58:	f8c6 7140 	str.w	r7, [r6, #320]	; 0x140
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    6e5c:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
    6e5e:	4b14      	ldr	r3, [pc, #80]	; (6eb0 <chan_send+0xc0>)
    6e60:	429f      	cmp	r7, r3
    6e62:	d018      	beq.n	6e96 <chan_send+0xa6>
	} else if (cb == chan_cfm_sent) {
    6e64:	4b13      	ldr	r3, [pc, #76]	; (6eb4 <chan_send+0xc4>)
    6e66:	429f      	cmp	r7, r3
    6e68:	d017      	beq.n	6e9a <chan_send+0xaa>
		return att_sent;
    6e6a:	4913      	ldr	r1, [pc, #76]	; (6eb8 <chan_send+0xc8>)
    6e6c:	4b13      	ldr	r3, [pc, #76]	; (6ebc <chan_send+0xcc>)
    6e6e:	4a14      	ldr	r2, [pc, #80]	; (6ec0 <chan_send+0xd0>)
    6e70:	428f      	cmp	r7, r1
    6e72:	bf18      	it	ne
    6e74:	4613      	movne	r3, r2
			       &chan->chan.chan);
    6e76:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    6e78:	9600      	str	r6, [sp, #0]
    6e7a:	4622      	mov	r2, r4
    6e7c:	2104      	movs	r1, #4
    6e7e:	f013 fc2b 	bl	1a6d8 <bt_l2cap_send_cb>
	if (err) {
    6e82:	4605      	mov	r5, r0
    6e84:	2800      	cmp	r0, #0
    6e86:	d0cf      	beq.n	6e28 <chan_send+0x38>
	buf->data = buf->__buf + state->offset;
    6e88:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    6e8a:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
    6e8e:	fa10 f088 	uxtah	r0, r0, r8
    6e92:	60a0      	str	r0, [r4, #8]
}
    6e94:	e7c8      	b.n	6e28 <chan_send+0x38>
		return att_rsp_sent;
    6e96:	4b0b      	ldr	r3, [pc, #44]	; (6ec4 <chan_send+0xd4>)
    6e98:	e7ed      	b.n	6e76 <chan_send+0x86>
		return att_cfm_sent;
    6e9a:	4b0b      	ldr	r3, [pc, #44]	; (6ec8 <chan_send+0xd8>)
    6e9c:	e7eb      	b.n	6e76 <chan_send+0x86>
    6e9e:	bf00      	nop
    6ea0:	0001e408 	.word	0x0001e408
    6ea4:	0001e418 	.word	0x0001e418
    6ea8:	0001ff8e 	.word	0x0001ff8e
    6eac:	0001e94c 	.word	0x0001e94c
    6eb0:	0001a993 	.word	0x0001a993
    6eb4:	0001a977 	.word	0x0001a977
    6eb8:	0001a961 	.word	0x0001a961
    6ebc:	00006c65 	.word	0x00006c65
    6ec0:	0001a7a7 	.word	0x0001a7a7
    6ec4:	00006c55 	.word	0x00006c55
    6ec8:	00006c45 	.word	0x00006c45

00006ecc <att_get>:
{
    6ecc:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    6ece:	7a83      	ldrb	r3, [r0, #10]
    6ed0:	2b07      	cmp	r3, #7
    6ed2:	d00b      	beq.n	6eec <att_get+0x20>
    6ed4:	4918      	ldr	r1, [pc, #96]	; (6f38 <att_get+0x6c>)
    6ed6:	4b19      	ldr	r3, [pc, #100]	; (6f3c <att_get+0x70>)
		BT_WARN("Not connected");
    6ed8:	4819      	ldr	r0, [pc, #100]	; (6f40 <att_get+0x74>)
    6eda:	1ac9      	subs	r1, r1, r3
    6edc:	08c9      	lsrs	r1, r1, #3
    6ede:	0189      	lsls	r1, r1, #6
    6ee0:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("ATT channel flagged as disconnected");
    6ee4:	f011 ff85 	bl	18df2 <log_0>
		return NULL;
    6ee8:	2400      	movs	r4, #0
    6eea:	e00e      	b.n	6f0a <att_get+0x3e>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    6eec:	2104      	movs	r1, #4
    6eee:	f013 fc1c 	bl	1a72a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    6ef2:	4604      	mov	r4, r0
    6ef4:	b958      	cbnz	r0, 6f0e <att_get+0x42>
    6ef6:	4910      	ldr	r1, [pc, #64]	; (6f38 <att_get+0x6c>)
    6ef8:	4b10      	ldr	r3, [pc, #64]	; (6f3c <att_get+0x70>)
		BT_ERR("Unable to find ATT channel");
    6efa:	4812      	ldr	r0, [pc, #72]	; (6f44 <att_get+0x78>)
    6efc:	1ac9      	subs	r1, r1, r3
    6efe:	08c9      	lsrs	r1, r1, #3
    6f00:	0189      	lsls	r1, r1, #6
    6f02:	f041 0101 	orr.w	r1, r1, #1
    6f06:	f011 ff74 	bl	18df2 <log_0>
}
    6f0a:	4620      	mov	r0, r4
    6f0c:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6f0e:	f3bf 8f5b 	dmb	ish
    6f12:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
    6f16:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
    6f1a:	075b      	lsls	r3, r3, #29
    6f1c:	d508      	bpl.n	6f30 <att_get+0x64>
    6f1e:	4906      	ldr	r1, [pc, #24]	; (6f38 <att_get+0x6c>)
    6f20:	4b06      	ldr	r3, [pc, #24]	; (6f3c <att_get+0x70>)
		BT_WARN("ATT channel flagged as disconnected");
    6f22:	4809      	ldr	r0, [pc, #36]	; (6f48 <att_get+0x7c>)
    6f24:	1ac9      	subs	r1, r1, r3
    6f26:	08c9      	lsrs	r1, r1, #3
    6f28:	0189      	lsls	r1, r1, #6
    6f2a:	f041 0102 	orr.w	r1, r1, #2
    6f2e:	e7d9      	b.n	6ee4 <att_get+0x18>
	return att_chan->att;
    6f30:	f850 4c08 	ldr.w	r4, [r0, #-8]
    6f34:	e7e9      	b.n	6f0a <att_get+0x3e>
    6f36:	bf00      	nop
    6f38:	0001e418 	.word	0x0001e418
    6f3c:	0001e408 	.word	0x0001e408
    6f40:	0001ffa1 	.word	0x0001ffa1
    6f44:	0001ffaf 	.word	0x0001ffaf
    6f48:	0001ffca 	.word	0x0001ffca

00006f4c <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
    6f4c:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
    6f4e:	4a07      	ldr	r2, [pc, #28]	; (6f6c <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
    6f50:	4604      	mov	r4, r0
    6f52:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
    6f54:	f7ff ff4c 	bl	6df0 <chan_send>
	if (err) {
    6f58:	b130      	cbz	r0, 6f68 <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
    6f5a:	4629      	mov	r1, r5
    6f5c:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
}
    6f60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
    6f64:	f016 b96c 	b.w	1d240 <net_buf_put>
}
    6f68:	bd38      	pop	{r3, r4, r5, pc}
    6f6a:	bf00      	nop
    6f6c:	0001a993 	.word	0x0001a993

00006f70 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    6f70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    6f72:	2300      	movs	r3, #0
{
    6f74:	4606      	mov	r6, r0
    6f76:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    6f78:	4828      	ldr	r0, [pc, #160]	; (701c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c>)
    6f7a:	2200      	movs	r2, #0
    6f7c:	4669      	mov	r1, sp
    6f7e:	f010 f831 	bl	16fe4 <k_mem_slab_alloc>
    6f82:	4604      	mov	r4, r0
    6f84:	b178      	cbz	r0, 6fa6 <bt_att_accept+0x36>
    6f86:	4a26      	ldr	r2, [pc, #152]	; (7020 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20>)
    6f88:	4b26      	ldr	r3, [pc, #152]	; (7024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>)
		BT_ERR("No available ATT context for conn %p", conn);
    6f8a:	4827      	ldr	r0, [pc, #156]	; (7028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>)
    6f8c:	1ad2      	subs	r2, r2, r3
    6f8e:	08d2      	lsrs	r2, r2, #3
    6f90:	0192      	lsls	r2, r2, #6
    6f92:	f042 0201 	orr.w	r2, r2, #1
    6f96:	4631      	mov	r1, r6
		BT_ERR("No available ATT channel for conn %p", att->conn);
    6f98:	f011 ff38 	bl	18e0c <log_1>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
    6f9c:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
    6fa0:	4620      	mov	r0, r4
    6fa2:	b003      	add	sp, #12
    6fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
    6fa6:	4601      	mov	r1, r0
    6fa8:	2244      	movs	r2, #68	; 0x44
    6faa:	9800      	ldr	r0, [sp, #0]
    6fac:	f012 fe25 	bl	19bfa <memset>
	att->conn = conn;
    6fb0:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    6fb2:	481e      	ldr	r0, [pc, #120]	; (702c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c>)
	list->tail = NULL;
    6fb4:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
    6fb6:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
    6fba:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
    6fbe:	2200      	movs	r2, #0
    6fc0:	2300      	movs	r3, #0
    6fc2:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    6fc4:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    6fc6:	f010 f80d 	bl	16fe4 <k_mem_slab_alloc>
    6fca:	4604      	mov	r4, r0
    6fcc:	b148      	cbz	r0, 6fe2 <bt_att_accept+0x72>
    6fce:	4a14      	ldr	r2, [pc, #80]	; (7020 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20>)
    6fd0:	4b14      	ldr	r3, [pc, #80]	; (7024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
    6fd2:	6829      	ldr	r1, [r5, #0]
    6fd4:	4816      	ldr	r0, [pc, #88]	; (7030 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30>)
    6fd6:	1ad2      	subs	r2, r2, r3
    6fd8:	08d2      	lsrs	r2, r2, #3
    6fda:	0192      	lsls	r2, r2, #6
    6fdc:	f042 0201 	orr.w	r2, r2, #1
    6fe0:	e7da      	b.n	6f98 <bt_att_accept+0x28>
	(void)memset(chan, 0, sizeof(*chan));
    6fe2:	4601      	mov	r1, r0
    6fe4:	f44f 72a4 	mov.w	r2, #328	; 0x148
    6fe8:	9801      	ldr	r0, [sp, #4]
    6fea:	f012 fe06 	bl	19bfa <memset>
	chan->chan.chan.ops = &ops;
    6fee:	9801      	ldr	r0, [sp, #4]
    6ff0:	4b10      	ldr	r3, [pc, #64]	; (7034 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34>)
    6ff2:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
    6ff4:	30f8      	adds	r0, #248	; 0xf8
    6ff6:	f016 fcb8 	bl	1d96a <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    6ffa:	9b01      	ldr	r3, [sp, #4]
    6ffc:	f3bf 8f5b 	dmb	ish
    7000:	33f0      	adds	r3, #240	; 0xf0
    7002:	e853 2f00 	ldrex	r2, [r3]
    7006:	e843 4100 	strex	r1, r4, [r3]
    700a:	2900      	cmp	r1, #0
    700c:	d1f9      	bne.n	7002 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2>
    700e:	f3bf 8f5b 	dmb	ish
	chan->att = att;
    7012:	9b01      	ldr	r3, [sp, #4]
    7014:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
    7018:	603b      	str	r3, [r7, #0]
	return 0;
    701a:	e7c1      	b.n	6fa0 <bt_att_accept+0x30>
    701c:	20000af4 	.word	0x20000af4
    7020:	0001e418 	.word	0x0001e418
    7024:	0001e408 	.word	0x0001e408
    7028:	0001ffee 	.word	0x0001ffee
    702c:	20000b10 	.word	0x20000b10
    7030:	00020013 	.word	0x00020013
    7034:	20000258 	.word	0x20000258

00007038 <read_group_cb>:
{
    7038:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    703c:	4606      	mov	r6, r0
    703e:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    7040:	f04f 0800 	mov.w	r8, #0
    7044:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    7048:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
    704a:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    704c:	f88d 8008 	strb.w	r8, [sp, #8]
    7050:	a902      	add	r1, sp, #8
{
    7052:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    7054:	f8ad 300a 	strh.w	r3, [sp, #10]
    7058:	f013 f821 	bl	1a09e <bt_uuid_cmp>
    705c:	b1a0      	cbz	r0, 7088 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    705e:	f642 0301 	movw	r3, #10241	; 0x2801
    7062:	6830      	ldr	r0, [r6, #0]
    7064:	f88d 800c 	strb.w	r8, [sp, #12]
    7068:	a903      	add	r1, sp, #12
    706a:	f8ad 300e 	strh.w	r3, [sp, #14]
    706e:	f013 f816 	bl	1a09e <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    7072:	b148      	cbz	r0, 7088 <read_group_cb+0x50>
		if (data->group &&
    7074:	6923      	ldr	r3, [r4, #16]
    7076:	b11b      	cbz	r3, 7080 <read_group_cb+0x48>
    7078:	885a      	ldrh	r2, [r3, #2]
    707a:	42aa      	cmp	r2, r5
    707c:	d200      	bcs.n	7080 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
    707e:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    7080:	2001      	movs	r0, #1
}
    7082:	b004      	add	sp, #16
    7084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    7088:	6861      	ldr	r1, [r4, #4]
    708a:	6830      	ldr	r0, [r6, #0]
    708c:	f013 f807 	bl	1a09e <bt_uuid_cmp>
    7090:	b110      	cbz	r0, 7098 <read_group_cb+0x60>
		data->group = NULL;
    7092:	2300      	movs	r3, #0
    7094:	6123      	str	r3, [r4, #16]
    7096:	e7f3      	b.n	7080 <read_group_cb+0x48>
	if (data->rsp->len &&
    7098:	68e3      	ldr	r3, [r4, #12]
    709a:	68a0      	ldr	r0, [r4, #8]
    709c:	781a      	ldrb	r2, [r3, #0]
    709e:	b13a      	cbz	r2, 70b0 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    70a0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
    70a4:	8981      	ldrh	r1, [r0, #12]
    70a6:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    70a8:	4293      	cmp	r3, r2
    70aa:	da01      	bge.n	70b0 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
    70ac:	2000      	movs	r0, #0
    70ae:	e7e8      	b.n	7082 <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
    70b0:	2104      	movs	r1, #4
    70b2:	3008      	adds	r0, #8
    70b4:	f016 f903 	bl	1d2be <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    70b8:	4b09      	ldr	r3, [pc, #36]	; (70e0 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    70ba:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    70bc:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    70be:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    70c0:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    70c2:	4631      	mov	r1, r6
    70c4:	9300      	str	r3, [sp, #0]
    70c6:	9401      	str	r4, [sp, #4]
    70c8:	2300      	movs	r3, #0
    70ca:	4638      	mov	r0, r7
    70cc:	f013 fc6f 	bl	1a9ae <att_chan_read>
	if (read < 0) {
    70d0:	2800      	cmp	r0, #0
    70d2:	dbeb      	blt.n	70ac <read_group_cb+0x74>
	if (!data->group) {
    70d4:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    70d6:	3800      	subs	r0, #0
    70d8:	bf18      	it	ne
    70da:	2001      	movne	r0, #1
    70dc:	e7d1      	b.n	7082 <read_group_cb+0x4a>
    70de:	bf00      	nop
    70e0:	0001a8db 	.word	0x0001a8db

000070e4 <read_type_cb>:
{
    70e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
    70e8:	f8d2 8000 	ldr.w	r8, [r2]
{
    70ec:	4606      	mov	r6, r0
    70ee:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    70f0:	6800      	ldr	r0, [r0, #0]
    70f2:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
    70f4:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
    70f8:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    70fa:	f012 ffd0 	bl	1a09e <bt_uuid_cmp>
    70fe:	4607      	mov	r7, r0
    7100:	2800      	cmp	r0, #0
    7102:	d13e      	bne.n	7182 <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    7104:	4628      	mov	r0, r5
    7106:	2215      	movs	r2, #21
    7108:	4631      	mov	r1, r6
    710a:	f014 f92f 	bl	1b36c <bt_gatt_check_perm>
    710e:	4605      	mov	r5, r0
    7110:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    7112:	b148      	cbz	r0, 7128 <read_type_cb+0x44>
		if (data->rsp->len) {
    7114:	68e3      	ldr	r3, [r4, #12]
    7116:	781b      	ldrb	r3, [r3, #0]
    7118:	b923      	cbnz	r3, 7124 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
    711a:	2500      	movs	r5, #0
}
    711c:	4628      	mov	r0, r5
    711e:	b003      	add	sp, #12
    7120:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
    7124:	7527      	strb	r7, [r4, #20]
    7126:	e7f8      	b.n	711a <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    7128:	68a0      	ldr	r0, [r4, #8]
    712a:	f016 f89a 	bl	1d262 <net_buf_frag_last>
    712e:	2102      	movs	r1, #2
    7130:	3008      	adds	r0, #8
    7132:	f016 f8c4 	bl	1d2be <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    7136:	4b14      	ldr	r3, [pc, #80]	; (7188 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    7138:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    713a:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
    713c:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    7140:	4631      	mov	r1, r6
    7142:	9300      	str	r3, [sp, #0]
    7144:	9401      	str	r4, [sp, #4]
    7146:	462b      	mov	r3, r5
    7148:	4640      	mov	r0, r8
    714a:	f013 fc30 	bl	1a9ae <att_chan_read>
	if (read < 0) {
    714e:	2800      	cmp	r0, #0
    7150:	da07      	bge.n	7162 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
    7152:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    7156:	bf26      	itte	cs
    7158:	4240      	negcs	r0, r0
    715a:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    715c:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
    715e:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    7160:	e7dc      	b.n	711c <read_type_cb+0x38>
	if (!data->item) {
    7162:	6923      	ldr	r3, [r4, #16]
    7164:	2b00      	cmp	r3, #0
    7166:	d0d8      	beq.n	711a <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    7168:	68a0      	ldr	r0, [r4, #8]
    716a:	f013 fb14 	bl	1a796 <net_buf_frags_len>
    716e:	f8b8 5086 	ldrh.w	r5, [r8, #134]	; 0x86
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    7172:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    7174:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    7176:	7818      	ldrb	r0, [r3, #0]
    7178:	4285      	cmp	r5, r0
    717a:	bf94      	ite	ls
    717c:	2500      	movls	r5, #0
    717e:	2501      	movhi	r5, #1
    7180:	e7cc      	b.n	711c <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    7182:	2501      	movs	r5, #1
    7184:	e7ca      	b.n	711c <read_type_cb+0x38>
    7186:	bf00      	nop
    7188:	0001a7b3 	.word	0x0001a7b3

0000718c <bt_att_connected>:
{
    718c:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    718e:	2104      	movs	r1, #4
{
    7190:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    7192:	6800      	ldr	r0, [r0, #0]
    7194:	f013 fab9 	bl	1a70a <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
    7198:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
    719c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    719e:	b93b      	cbnz	r3, 71b0 <bt_att_connected+0x24>
    71a0:	f105 000c 	add.w	r0, r5, #12
    71a4:	f016 fbe1 	bl	1d96a <z_impl_k_queue_init>
    71a8:	f105 0024 	add.w	r0, r5, #36	; 0x24
    71ac:	f016 fbdd 	bl	1d96a <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
    71b0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
	parent->next = child;
    71b2:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
Z_GENLIST_PREPEND(slist, snode)
    71b6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
	sys_slist_prepend(&att->chans, &chan->node);
    71b8:	f504 739e 	add.w	r3, r4, #316	; 0x13c
	list->head = node;
    71bc:	63eb      	str	r3, [r5, #60]	; 0x3c
Z_GENLIST_PREPEND(slist, snode)
    71be:	b902      	cbnz	r2, 71c2 <bt_att_connected+0x36>
	list->tail = node;
    71c0:	642b      	str	r3, [r5, #64]	; 0x40
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    71c2:	f3bf 8f5b 	dmb	ish
    71c6:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
    71ca:	4908      	ldr	r1, [pc, #32]	; (71ec <bt_att_connected+0x60>)
    71cc:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
    71d0:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    71d2:	bf5e      	ittt	pl
    71d4:	2317      	movpl	r3, #23
    71d6:	f8a4 307e 	strhpl.w	r3, [r4, #126]	; 0x7e
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    71da:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
    71de:	f504 7084 	add.w	r0, r4, #264	; 0x108
}
    71e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
    71e6:	f016 bcda 	b.w	1db9e <k_work_init_delayable>
    71ea:	bf00      	nop
    71ec:	00007c39 	.word	0x00007c39

000071f0 <prep_write_cb>:
{
    71f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    71f4:	4614      	mov	r4, r2
    71f6:	4606      	mov	r6, r0
    71f8:	460f      	mov	r7, r1
	data->err = bt_gatt_check_perm(data->conn, attr,
    71fa:	222a      	movs	r2, #42	; 0x2a
    71fc:	4601      	mov	r1, r0
    71fe:	6820      	ldr	r0, [r4, #0]
    7200:	f014 f8b4 	bl	1b36c <bt_gatt_check_perm>
    7204:	4605      	mov	r5, r0
    7206:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    7208:	2800      	cmp	r0, #0
    720a:	d12e      	bne.n	726a <prep_write_cb+0x7a>
	if (!(attr->perm & BT_GATT_PERM_PREPARE_WRITE)) {
    720c:	7cb3      	ldrb	r3, [r6, #18]
    720e:	065b      	lsls	r3, r3, #25
    7210:	d516      	bpl.n	7240 <prep_write_cb+0x50>
	write = attr->write(data->conn, attr, data->value, data->len,
    7212:	2301      	movs	r3, #1
    7214:	9301      	str	r3, [sp, #4]
    7216:	89e3      	ldrh	r3, [r4, #14]
    7218:	9300      	str	r3, [sp, #0]
    721a:	f8d6 8008 	ldr.w	r8, [r6, #8]
    721e:	89a3      	ldrh	r3, [r4, #12]
    7220:	68a2      	ldr	r2, [r4, #8]
    7222:	6820      	ldr	r0, [r4, #0]
    7224:	4631      	mov	r1, r6
    7226:	47c0      	blx	r8
	if (write != 0) {
    7228:	b150      	cbz	r0, 7240 <prep_write_cb+0x50>
	if (err < 0 && err >= -0xff) {
    722a:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    722e:	bf26      	itte	cs
    7230:	4243      	negcs	r3, r0
    7232:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
    7234:	230e      	movcc	r3, #14
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
    7236:	7423      	strb	r3, [r4, #16]
}
    7238:	4628      	mov	r0, r5
    723a:	b002      	add	sp, #8
    723c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_alloc_fixed(pool, timeout);
    7240:	480b      	ldr	r0, [pc, #44]	; (7270 <prep_write_cb+0x80>)
    7242:	2200      	movs	r2, #0
    7244:	2300      	movs	r3, #0
    7246:	f015 ffb5 	bl	1d1b4 <net_buf_alloc_fixed>
	data->buf = net_buf_alloc(&prep_pool, K_NO_WAIT);
    724a:	6060      	str	r0, [r4, #4]
	if (!data->buf) {
    724c:	b908      	cbnz	r0, 7252 <prep_write_cb+0x62>
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
    724e:	2309      	movs	r3, #9
    7250:	e7f1      	b.n	7236 <prep_write_cb+0x46>
	attr_data->offset = data->offset;
    7252:	89e3      	ldrh	r3, [r4, #14]
    7254:	82c3      	strh	r3, [r0, #22]
	attr_data->handle = handle;
    7256:	8287      	strh	r7, [r0, #20]
	return net_buf_simple_add_mem(&buf->b, mem, len);
    7258:	89a2      	ldrh	r2, [r4, #12]
    725a:	68a1      	ldr	r1, [r4, #8]
    725c:	3008      	adds	r0, #8
    725e:	f016 f834 	bl	1d2ca <net_buf_simple_add_mem>
	data->err = 0U;
    7262:	2300      	movs	r3, #0
    7264:	7423      	strb	r3, [r4, #16]
	return BT_GATT_ITER_CONTINUE;
    7266:	2501      	movs	r5, #1
    7268:	e7e6      	b.n	7238 <prep_write_cb+0x48>
		return BT_GATT_ITER_STOP;
    726a:	2500      	movs	r5, #0
    726c:	e7e4      	b.n	7238 <prep_write_cb+0x48>
    726e:	bf00      	nop
    7270:	20000d5c 	.word	0x20000d5c

00007274 <bt_att_chan_create_pdu>:
{
    7274:	b538      	push	{r3, r4, r5, lr}
    7276:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    7278:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
    727c:	3201      	adds	r2, #1
    727e:	428a      	cmp	r2, r1
    7280:	d90c      	bls.n	729c <bt_att_chan_create_pdu+0x28>
    7282:	481a      	ldr	r0, [pc, #104]	; (72ec <bt_att_chan_create_pdu+0x78>)
    7284:	4b1a      	ldr	r3, [pc, #104]	; (72f0 <bt_att_chan_create_pdu+0x7c>)
    7286:	1a1b      	subs	r3, r3, r0
    7288:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    728a:	019b      	lsls	r3, r3, #6
    728c:	4819      	ldr	r0, [pc, #100]	; (72f4 <bt_att_chan_create_pdu+0x80>)
    728e:	f043 0302 	orr.w	r3, r3, #2
    7292:	f011 fdcf 	bl	18e34 <log_2>
		return NULL;
    7296:	2400      	movs	r4, #0
}
    7298:	4620      	mov	r0, r4
    729a:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
    729c:	4628      	mov	r0, r5
    729e:	f013 fa98 	bl	1a7d2 <att_op_get_type>
    72a2:	2802      	cmp	r0, #2
    72a4:	d001      	beq.n	72aa <bt_att_chan_create_pdu+0x36>
    72a6:	2804      	cmp	r0, #4
    72a8:	d114      	bne.n	72d4 <bt_att_chan_create_pdu+0x60>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
    72aa:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    72ae:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
    72b0:	2100      	movs	r1, #0
    72b2:	4608      	mov	r0, r1
    72b4:	f013 fa0d 	bl	1a6d2 <bt_l2cap_create_pdu_timeout>
    72b8:	4604      	mov	r4, r0
	if (!buf) {
    72ba:	b980      	cbnz	r0, 72de <bt_att_chan_create_pdu+0x6a>
    72bc:	4b0b      	ldr	r3, [pc, #44]	; (72ec <bt_att_chan_create_pdu+0x78>)
    72be:	4a0c      	ldr	r2, [pc, #48]	; (72f0 <bt_att_chan_create_pdu+0x7c>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
    72c0:	480d      	ldr	r0, [pc, #52]	; (72f8 <bt_att_chan_create_pdu+0x84>)
    72c2:	1ad2      	subs	r2, r2, r3
    72c4:	08d2      	lsrs	r2, r2, #3
    72c6:	0192      	lsls	r2, r2, #6
    72c8:	f042 0201 	orr.w	r2, r2, #1
    72cc:	4629      	mov	r1, r5
    72ce:	f011 fd9d 	bl	18e0c <log_1>
		return NULL;
    72d2:	e7e1      	b.n	7298 <bt_att_chan_create_pdu+0x24>
		buf = bt_l2cap_create_pdu(NULL, 0);
    72d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    72d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    72dc:	e7e8      	b.n	72b0 <bt_att_chan_create_pdu+0x3c>
	return net_buf_simple_add(&buf->b, len);
    72de:	2101      	movs	r1, #1
    72e0:	3008      	adds	r0, #8
    72e2:	f015 ffec 	bl	1d2be <net_buf_simple_add>
	hdr->code = op;
    72e6:	7005      	strb	r5, [r0, #0]
	return buf;
    72e8:	e7d6      	b.n	7298 <bt_att_chan_create_pdu+0x24>
    72ea:	bf00      	nop
    72ec:	0001e408 	.word	0x0001e408
    72f0:	0001e418 	.word	0x0001e418
    72f4:	00020038 	.word	0x00020038
    72f8:	0001fe25 	.word	0x0001fe25

000072fc <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
    72fc:	898b      	ldrh	r3, [r1, #12]
{
    72fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7302:	4604      	mov	r4, r0
    7304:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
    7306:	b963      	cbnz	r3, 7322 <bt_att_recv+0x26>
    7308:	494c      	ldr	r1, [pc, #304]	; (743c <bt_att_recv+0x140>)
    730a:	4b4d      	ldr	r3, [pc, #308]	; (7440 <bt_att_recv+0x144>)
		BT_ERR("Too small ATT PDU received");
    730c:	484d      	ldr	r0, [pc, #308]	; (7444 <bt_att_recv+0x148>)
    730e:	1ac9      	subs	r1, r1, r3
    7310:	08c9      	lsrs	r1, r1, #3
    7312:	0189      	lsls	r1, r1, #6
    7314:	f041 0101 	orr.w	r1, r1, #1
			BT_WARN("Ignoring unexpected indication");
    7318:	f011 fd6b 	bl	18df2 <log_0>
}
    731c:	2000      	movs	r0, #0
    731e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    7322:	2101      	movs	r1, #1
    7324:	f108 0008 	add.w	r0, r8, #8
    7328:	f016 f82e 	bl	1d388 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
    732c:	f854 3c08 	ldr.w	r3, [r4, #-8]
    7330:	4605      	mov	r5, r0
    7332:	2b00      	cmp	r3, #0
    7334:	d0f2      	beq.n	731c <bt_att_recv+0x20>
		if (hdr->code == handlers[i].op) {
    7336:	4a44      	ldr	r2, [pc, #272]	; (7448 <bt_att_recv+0x14c>)
    7338:	7801      	ldrb	r1, [r0, #0]
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    733a:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    733e:	2300      	movs	r3, #0
    7340:	4694      	mov	ip, r2
		if (hdr->code == handlers[i].op) {
    7342:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
    7346:	4288      	cmp	r0, r1
    7348:	d11d      	bne.n	7386 <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
    734a:	00d8      	lsls	r0, r3, #3
    734c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7350:	789f      	ldrb	r7, [r3, #2]
    7352:	2f01      	cmp	r7, #1
    7354:	d132      	bne.n	73bc <bt_att_recv+0xc0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7356:	f3bf 8f5b 	dmb	ish
    735a:	34e8      	adds	r4, #232	; 0xe8
    735c:	e854 3f00 	ldrex	r3, [r4]
    7360:	f043 0201 	orr.w	r2, r3, #1
    7364:	e844 2100 	strex	r1, r2, [r4]
    7368:	2900      	cmp	r1, #0
    736a:	d1f7      	bne.n	735c <bt_att_recv+0x60>
    736c:	f3bf 8f5b 	dmb	ish
    7370:	07da      	lsls	r2, r3, #31
    7372:	d53d      	bpl.n	73f0 <bt_att_recv+0xf4>
    7374:	4931      	ldr	r1, [pc, #196]	; (743c <bt_att_recv+0x140>)
    7376:	4b32      	ldr	r3, [pc, #200]	; (7440 <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected request");
    7378:	4834      	ldr	r0, [pc, #208]	; (744c <bt_att_recv+0x150>)
    737a:	1ac9      	subs	r1, r1, r3
    737c:	08c9      	lsrs	r1, r1, #3
    737e:	0189      	lsls	r1, r1, #6
    7380:	f041 0102 	orr.w	r1, r1, #2
    7384:	e7c8      	b.n	7318 <bt_att_recv+0x1c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    7386:	3301      	adds	r3, #1
    7388:	2b0d      	cmp	r3, #13
    738a:	d1da      	bne.n	7342 <bt_att_recv+0x46>
    738c:	4b2c      	ldr	r3, [pc, #176]	; (7440 <bt_att_recv+0x144>)
    738e:	4a2b      	ldr	r2, [pc, #172]	; (743c <bt_att_recv+0x140>)
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
    7390:	482f      	ldr	r0, [pc, #188]	; (7450 <bt_att_recv+0x154>)
    7392:	1ad2      	subs	r2, r2, r3
    7394:	08d2      	lsrs	r2, r2, #3
    7396:	0192      	lsls	r2, r2, #6
    7398:	f042 0202 	orr.w	r2, r2, #2
    739c:	f011 fd36 	bl	18e0c <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    73a0:	7829      	ldrb	r1, [r5, #0]
    73a2:	4608      	mov	r0, r1
    73a4:	f013 fa15 	bl	1a7d2 <att_op_get_type>
    73a8:	2800      	cmp	r0, #0
    73aa:	d0b7      	beq.n	731c <bt_att_recv+0x20>
	if (!req) {
    73ac:	2900      	cmp	r1, #0
    73ae:	d0b5      	beq.n	731c <bt_att_recv+0x20>
    73b0:	2306      	movs	r3, #6
    73b2:	2200      	movs	r2, #0
    73b4:	4630      	mov	r0, r6
    73b6:	f013 fc6a 	bl	1ac8e <send_err_rsp.part.0>
    73ba:	e7af      	b.n	731c <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
    73bc:	2f05      	cmp	r7, #5
    73be:	d117      	bne.n	73f0 <bt_att_recv+0xf4>
    73c0:	f3bf 8f5b 	dmb	ish
    73c4:	34e8      	adds	r4, #232	; 0xe8
    73c6:	e854 3f00 	ldrex	r3, [r4]
    73ca:	f043 0202 	orr.w	r2, r3, #2
    73ce:	e844 2100 	strex	r1, r2, [r4]
    73d2:	2900      	cmp	r1, #0
    73d4:	d1f7      	bne.n	73c6 <bt_att_recv+0xca>
    73d6:	f3bf 8f5b 	dmb	ish
    73da:	079b      	lsls	r3, r3, #30
    73dc:	d508      	bpl.n	73f0 <bt_att_recv+0xf4>
    73de:	4917      	ldr	r1, [pc, #92]	; (743c <bt_att_recv+0x140>)
    73e0:	4b17      	ldr	r3, [pc, #92]	; (7440 <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected indication");
    73e2:	481c      	ldr	r0, [pc, #112]	; (7454 <bt_att_recv+0x158>)
    73e4:	1ac9      	subs	r1, r1, r3
    73e6:	08c9      	lsrs	r1, r1, #3
    73e8:	0189      	lsls	r1, r1, #6
    73ea:	f041 0102 	orr.w	r1, r1, #2
    73ee:	e793      	b.n	7318 <bt_att_recv+0x1c>
	if (buf->len < handler->expect_len) {
    73f0:	eb0c 0300 	add.w	r3, ip, r0
    73f4:	f8b8 100c 	ldrh.w	r1, [r8, #12]
    73f8:	785a      	ldrb	r2, [r3, #1]
    73fa:	428a      	cmp	r2, r1
    73fc:	d90e      	bls.n	741c <bt_att_recv+0x120>
    73fe:	4a10      	ldr	r2, [pc, #64]	; (7440 <bt_att_recv+0x144>)
    7400:	4b0e      	ldr	r3, [pc, #56]	; (743c <bt_att_recv+0x140>)
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    7402:	4815      	ldr	r0, [pc, #84]	; (7458 <bt_att_recv+0x15c>)
    7404:	1a9b      	subs	r3, r3, r2
    7406:	08db      	lsrs	r3, r3, #3
    7408:	019b      	lsls	r3, r3, #6
    740a:	782a      	ldrb	r2, [r5, #0]
    740c:	f043 0301 	orr.w	r3, r3, #1
    7410:	f011 fd10 	bl	18e34 <log_2>
	if (handler->type == ATT_REQUEST && err) {
    7414:	2f01      	cmp	r7, #1
    7416:	d181      	bne.n	731c <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
    7418:	2304      	movs	r3, #4
    741a:	e00a      	b.n	7432 <bt_att_recv+0x136>
		err = handler->func(att_chan, buf);
    741c:	685b      	ldr	r3, [r3, #4]
    741e:	4641      	mov	r1, r8
    7420:	4630      	mov	r0, r6
    7422:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    7424:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
    7426:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    7428:	f47f af78 	bne.w	731c <bt_att_recv+0x20>
    742c:	2800      	cmp	r0, #0
    742e:	f43f af75 	beq.w	731c <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
    7432:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    7434:	2900      	cmp	r1, #0
    7436:	f43f af71 	beq.w	731c <bt_att_recv+0x20>
    743a:	e7ba      	b.n	73b2 <bt_att_recv+0xb6>
    743c:	0001e418 	.word	0x0001e418
    7440:	0001e408 	.word	0x0001e408
    7444:	0002005d 	.word	0x0002005d
    7448:	0001e960 	.word	0x0001e960
    744c:	00020078 	.word	0x00020078
    7450:	000200d2 	.word	0x000200d2
    7454:	00020094 	.word	0x00020094
    7458:	000200b3 	.word	0x000200b3

0000745c <att_write_rsp>:
{
    745c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7460:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    7462:	6803      	ldr	r3, [r0, #0]
    7464:	460e      	mov	r6, r1
    7466:	3900      	subs	r1, #0
{
    7468:	b086      	sub	sp, #24
    746a:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    746c:	bf18      	it	ne
    746e:	2101      	movne	r1, #1
    7470:	6818      	ldr	r0, [r3, #0]
{
    7472:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    7474:	f013 ff9d 	bl	1b3b2 <bt_gatt_change_aware>
    7478:	2800      	cmp	r0, #0
    747a:	d04d      	beq.n	7518 <att_write_rsp+0xbc>
	if (!handle) {
    747c:	2f00      	cmp	r7, #0
    747e:	d04d      	beq.n	751c <att_write_rsp+0xc0>
	(void)memset(&data, 0, sizeof(data));
    7480:	2218      	movs	r2, #24
    7482:	2100      	movs	r1, #0
    7484:	4668      	mov	r0, sp
    7486:	f012 fbb8 	bl	19bfa <memset>
	if (rsp) {
    748a:	f1b8 0f00 	cmp.w	r8, #0
    748e:	d126      	bne.n	74de <att_write_rsp+0x82>
	data.conn = chan->att->conn;
    7490:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    7492:	4a23      	ldr	r2, [pc, #140]	; (7520 <att_write_rsp+0xc4>)
	data.conn = chan->att->conn;
    7494:	681b      	ldr	r3, [r3, #0]
    7496:	9300      	str	r3, [sp, #0]
	data.offset = offset;
    7498:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    749c:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    74a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    74a2:	9303      	str	r3, [sp, #12]
	data.len = len;
    74a4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    74a8:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    74ac:	2301      	movs	r3, #1
    74ae:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    74b2:	4639      	mov	r1, r7
    74b4:	466b      	mov	r3, sp
    74b6:	4638      	mov	r0, r7
	data.req = req;
    74b8:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    74bc:	f013 f9b6 	bl	1a82c <bt_gatt_foreach_attr>
	if (data.err) {
    74c0:	f89d 4014 	ldrb.w	r4, [sp, #20]
    74c4:	b30c      	cbz	r4, 750a <att_write_rsp+0xae>
		if (rsp) {
    74c6:	f1b8 0f00 	cmp.w	r8, #0
    74ca:	d019      	beq.n	7500 <att_write_rsp+0xa4>
			net_buf_unref(data.buf);
    74cc:	9801      	ldr	r0, [sp, #4]
    74ce:	f00e f945 	bl	1575c <net_buf_unref>
	if (!req) {
    74d2:	b976      	cbnz	r6, 74f2 <att_write_rsp+0x96>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    74d4:	2400      	movs	r4, #0
}
    74d6:	4620      	mov	r0, r4
    74d8:	b006      	add	sp, #24
    74da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    74de:	2200      	movs	r2, #0
    74e0:	4641      	mov	r1, r8
    74e2:	4628      	mov	r0, r5
    74e4:	f7ff fec6 	bl	7274 <bt_att_chan_create_pdu>
    74e8:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    74ea:	2800      	cmp	r0, #0
    74ec:	d1d0      	bne.n	7490 <att_write_rsp+0x34>
			return BT_ATT_ERR_UNLIKELY;
    74ee:	240e      	movs	r4, #14
    74f0:	e7f1      	b.n	74d6 <att_write_rsp+0x7a>
    74f2:	f89d 3014 	ldrb.w	r3, [sp, #20]
    74f6:	463a      	mov	r2, r7
    74f8:	4631      	mov	r1, r6
    74fa:	4628      	mov	r0, r5
    74fc:	f013 fbc7 	bl	1ac8e <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    7500:	2e18      	cmp	r6, #24
    7502:	d1e7      	bne.n	74d4 <att_write_rsp+0x78>
    7504:	f89d 4014 	ldrb.w	r4, [sp, #20]
    7508:	e7e5      	b.n	74d6 <att_write_rsp+0x7a>
	if (data.buf) {
    750a:	9901      	ldr	r1, [sp, #4]
    750c:	2900      	cmp	r1, #0
    750e:	d0e1      	beq.n	74d4 <att_write_rsp+0x78>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    7510:	4628      	mov	r0, r5
    7512:	f7ff fd1b 	bl	6f4c <bt_att_chan_send_rsp.constprop.0>
    7516:	e7de      	b.n	74d6 <att_write_rsp+0x7a>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    7518:	2412      	movs	r4, #18
    751a:	e7dc      	b.n	74d6 <att_write_rsp+0x7a>
		return BT_ATT_ERR_INVALID_HANDLE;
    751c:	2401      	movs	r4, #1
    751e:	e7da      	b.n	74d6 <att_write_rsp+0x7a>
    7520:	0001ab65 	.word	0x0001ab65

00007524 <bt_att_create_pdu>:
{
    7524:	b570      	push	{r4, r5, r6, lr}
    7526:	460e      	mov	r6, r1
    7528:	4615      	mov	r5, r2
	att = att_get(conn);
    752a:	f7ff fccf 	bl	6ecc <att_get>
	if (!att) {
    752e:	b1c0      	cbz	r0, 7562 <bt_att_create_pdu+0x3e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    7530:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	return list->head;
    7532:	1c69      	adds	r1, r5, #1
    7534:	b15b      	cbz	r3, 754e <bt_att_create_pdu+0x2a>
    7536:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
    753a:	d008      	beq.n	754e <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    753c:	681b      	ldr	r3, [r3, #0]
    753e:	b10b      	cbz	r3, 7544 <bt_att_create_pdu+0x20>
    7540:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (len + sizeof(op) > chan->chan.tx.mtu) {
    7544:	f8b0 2086 	ldrh.w	r2, [r0, #134]	; 0x86
    7548:	4291      	cmp	r1, r2
    754a:	d90c      	bls.n	7566 <bt_att_create_pdu+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    754c:	b98b      	cbnz	r3, 7572 <bt_att_create_pdu+0x4e>
    754e:	4a0e      	ldr	r2, [pc, #56]	; (7588 <bt_att_create_pdu+0x64>)
    7550:	4b0e      	ldr	r3, [pc, #56]	; (758c <bt_att_create_pdu+0x68>)
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
    7552:	480f      	ldr	r0, [pc, #60]	; (7590 <bt_att_create_pdu+0x6c>)
    7554:	1ad2      	subs	r2, r2, r3
    7556:	08d2      	lsrs	r2, r2, #3
    7558:	0192      	lsls	r2, r2, #6
    755a:	f042 0202 	orr.w	r2, r2, #2
    755e:	f011 fc55 	bl	18e0c <log_1>
}
    7562:	2000      	movs	r0, #0
    7564:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
    7566:	462a      	mov	r2, r5
    7568:	4631      	mov	r1, r6
}
    756a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
    756e:	f7ff be81 	b.w	7274 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
    7572:	f513 74a2 	adds.w	r4, r3, #324	; 0x144
    7576:	d004      	beq.n	7582 <bt_att_create_pdu+0x5e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    7578:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    757c:	b10c      	cbz	r4, 7582 <bt_att_create_pdu+0x5e>
    757e:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
    7582:	4618      	mov	r0, r3
    7584:	4623      	mov	r3, r4
    7586:	e7dd      	b.n	7544 <bt_att_create_pdu+0x20>
    7588:	0001e418 	.word	0x0001e418
    758c:	0001e408 	.word	0x0001e408
    7590:	000200ec 	.word	0x000200ec

00007594 <att_prepare_write_req>:
{
    7594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7598:	460c      	mov	r4, r1
    759a:	b087      	sub	sp, #28
    759c:	4605      	mov	r5, r0
    759e:	2104      	movs	r1, #4
    75a0:	f104 0008 	add.w	r0, r4, #8
    75a4:	f015 fef0 	bl	1d388 <net_buf_simple_pull_mem>
	struct bt_conn *conn = chan->chan.chan.conn;
    75a8:	f8d5 b008 	ldr.w	fp, [r5, #8]
	handle = sys_le16_to_cpu(req->handle);
    75ac:	f8b0 a000 	ldrh.w	sl, [r0]
	offset = sys_le16_to_cpu(req->offset);
    75b0:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	return att_prep_write_rsp(chan, handle, offset, buf->data, buf->len);
    75b4:	f8d4 8008 	ldr.w	r8, [r4, #8]
    75b8:	89a7      	ldrh	r7, [r4, #12]
	if (!bt_gatt_change_aware(conn, true)) {
    75ba:	2101      	movs	r1, #1
    75bc:	4658      	mov	r0, fp
	handle = sys_le16_to_cpu(req->handle);
    75be:	fa1f f68a 	uxth.w	r6, sl
	if (!bt_gatt_change_aware(conn, true)) {
    75c2:	f013 fef6 	bl	1b3b2 <bt_gatt_change_aware>
    75c6:	2800      	cmp	r0, #0
    75c8:	d04a      	beq.n	7660 <att_prepare_write_req+0xcc>
	if (!handle) {
    75ca:	2e00      	cmp	r6, #0
    75cc:	d04a      	beq.n	7664 <att_prepare_write_req+0xd0>
	(void)memset(&data, 0, sizeof(data));
    75ce:	2214      	movs	r2, #20
    75d0:	2100      	movs	r1, #0
    75d2:	a801      	add	r0, sp, #4
    75d4:	f012 fb11 	bl	19bfa <memset>
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    75d8:	2301      	movs	r3, #1
    75da:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    75de:	4a23      	ldr	r2, [pc, #140]	; (766c <att_prepare_write_req+0xd8>)
	data.conn = conn;
    75e0:	f8cd b004 	str.w	fp, [sp, #4]
	data.len = len;
    75e4:	b2ff      	uxtb	r7, r7
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    75e6:	ab01      	add	r3, sp, #4
    75e8:	4631      	mov	r1, r6
    75ea:	4630      	mov	r0, r6
	data.offset = offset;
    75ec:	f8ad 9012 	strh.w	r9, [sp, #18]
	data.value = value;
    75f0:	f8cd 800c 	str.w	r8, [sp, #12]
	data.len = len;
    75f4:	f8ad 7010 	strh.w	r7, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    75f8:	f013 f918 	bl	1a82c <bt_gatt_foreach_attr>
	if (data.err) {
    75fc:	f89d 4014 	ldrb.w	r4, [sp, #20]
    7600:	b154      	cbz	r4, 7618 <att_prepare_write_req+0x84>
	if (!req) {
    7602:	4623      	mov	r3, r4
    7604:	4632      	mov	r2, r6
    7606:	2116      	movs	r1, #22
    7608:	4628      	mov	r0, r5
    760a:	f013 fb40 	bl	1ac8e <send_err_rsp.part.0>
		return 0;
    760e:	2400      	movs	r4, #0
}
    7610:	4620      	mov	r0, r4
    7612:	b007      	add	sp, #28
    7614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_buf_put(&chan->att->prep_queue, data.buf);
    7618:	6828      	ldr	r0, [r5, #0]
    761a:	9902      	ldr	r1, [sp, #8]
    761c:	3024      	adds	r0, #36	; 0x24
    761e:	f015 fe0f 	bl	1d240 <net_buf_put>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_PREPARE_WRITE_RSP, 0);
    7622:	4622      	mov	r2, r4
    7624:	2117      	movs	r1, #23
    7626:	4658      	mov	r0, fp
    7628:	f7ff ff7c 	bl	7524 <bt_att_create_pdu>
    762c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    762e:	b1d8      	cbz	r0, 7668 <att_prepare_write_req+0xd4>
	return net_buf_simple_add(&buf->b, len);
    7630:	2104      	movs	r1, #4
    7632:	3008      	adds	r0, #8
    7634:	f015 fe43 	bl	1d2be <net_buf_simple_add>
    7638:	4606      	mov	r6, r0
	rsp->handle = sys_cpu_to_le16(handle);
    763a:	f8a0 a000 	strh.w	sl, [r0]
	rsp->offset = sys_cpu_to_le16(offset);
    763e:	f8a0 9002 	strh.w	r9, [r0, #2]
    7642:	9802      	ldr	r0, [sp, #8]
    7644:	4639      	mov	r1, r7
    7646:	3008      	adds	r0, #8
    7648:	f015 fe39 	bl	1d2be <net_buf_simple_add>
	memcpy(rsp->value, value, len);
    764c:	4641      	mov	r1, r8
    764e:	463a      	mov	r2, r7
    7650:	1d30      	adds	r0, r6, #4
    7652:	f012 faa7 	bl	19ba4 <memcpy>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    7656:	9902      	ldr	r1, [sp, #8]
    7658:	4628      	mov	r0, r5
    765a:	f7ff fc77 	bl	6f4c <bt_att_chan_send_rsp.constprop.0>
	return 0;
    765e:	e7d7      	b.n	7610 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    7660:	2412      	movs	r4, #18
    7662:	e7d5      	b.n	7610 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_INVALID_HANDLE;
    7664:	2401      	movs	r4, #1
    7666:	e7d3      	b.n	7610 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_UNLIKELY;
    7668:	240e      	movs	r4, #14
    766a:	e7d1      	b.n	7610 <att_prepare_write_req+0x7c>
    766c:	000071f1 	.word	0x000071f1

00007670 <att_read_group_req>:
{
    7670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    7674:	7b0c      	ldrb	r4, [r1, #12]
    7676:	3c04      	subs	r4, #4
    7678:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    767a:	2c02      	cmp	r4, #2
{
    767c:	4605      	mov	r5, r0
    767e:	b08c      	sub	sp, #48	; 0x30
    7680:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    7682:	d001      	beq.n	7688 <att_read_group_req+0x18>
    7684:	2c10      	cmp	r4, #16
    7686:	d16e      	bne.n	7766 <att_read_group_req+0xf6>
	return net_buf_simple_pull_mem(&buf->b, len);
    7688:	2104      	movs	r1, #4
    768a:	3008      	adds	r0, #8
    768c:	f015 fe7c 	bl	1d388 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    7690:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    7694:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    7696:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    7698:	1d01      	adds	r1, r0, #4
    769a:	4622      	mov	r2, r4
    769c:	4640      	mov	r0, r8
    769e:	f012 fd28 	bl	1a0f2 <bt_uuid_create>
    76a2:	2800      	cmp	r0, #0
    76a4:	d061      	beq.n	776a <att_read_group_req+0xfa>
	if (!start || !end) {
    76a6:	2e00      	cmp	r6, #0
    76a8:	d03a      	beq.n	7720 <att_read_group_req+0xb0>
    76aa:	2400      	movs	r4, #0
    76ac:	2f00      	cmp	r7, #0
    76ae:	d036      	beq.n	771e <att_read_group_req+0xae>
	if (start > end) {
    76b0:	42b7      	cmp	r7, r6
    76b2:	d335      	bcc.n	7720 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    76b4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    76b8:	a901      	add	r1, sp, #4
    76ba:	4640      	mov	r0, r8
    76bc:	f88d 4004 	strb.w	r4, [sp, #4]
    76c0:	f8ad 3006 	strh.w	r3, [sp, #6]
    76c4:	f012 fceb 	bl	1a09e <bt_uuid_cmp>
    76c8:	2800      	cmp	r0, #0
    76ca:	d134      	bne.n	7736 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
    76cc:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    76ce:	2214      	movs	r2, #20
    76d0:	2100      	movs	r1, #0
    76d2:	a807      	add	r0, sp, #28
    76d4:	f012 fa91 	bl	19bfa <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    76d8:	2201      	movs	r2, #1
    76da:	2111      	movs	r1, #17
    76dc:	4620      	mov	r0, r4
    76de:	f7ff ff21 	bl	7524 <bt_att_create_pdu>
    76e2:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    76e4:	2800      	cmp	r0, #0
    76e6:	d040      	beq.n	776a <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
    76e8:	2101      	movs	r1, #1
    76ea:	3008      	adds	r0, #8
	data.uuid = uuid;
    76ec:	e9cd 5807 	strd	r5, r8, [sp, #28]
    76f0:	f015 fde5 	bl	1d2be <net_buf_simple_add>
	data.rsp->len = 0U;
    76f4:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    76f8:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    76fa:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    76fc:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    7700:	4a1b      	ldr	r2, [pc, #108]	; (7770 <att_read_group_req+0x100>)
	data.group = NULL;
    7702:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    7706:	4639      	mov	r1, r7
    7708:	4630      	mov	r0, r6
    770a:	f013 f88f 	bl	1a82c <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    770e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7710:	781c      	ldrb	r4, [r3, #0]
    7712:	bb1c      	cbnz	r4, 775c <att_read_group_req+0xec>
		net_buf_unref(data.buf);
    7714:	9809      	ldr	r0, [sp, #36]	; 0x24
    7716:	f00e f821 	bl	1575c <net_buf_unref>
	if (!req) {
    771a:	230a      	movs	r3, #10
    771c:	e018      	b.n	7750 <att_read_group_req+0xe0>
			*err = 0U;
    771e:	463e      	mov	r6, r7
	if (!req) {
    7720:	2301      	movs	r3, #1
    7722:	4632      	mov	r2, r6
    7724:	2110      	movs	r1, #16
    7726:	4628      	mov	r0, r5
    7728:	f013 fab1 	bl	1ac8e <send_err_rsp.part.0>
		return 0;
    772c:	2400      	movs	r4, #0
}
    772e:	4620      	mov	r0, r4
    7730:	b00c      	add	sp, #48	; 0x30
    7732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    7736:	f642 0301 	movw	r3, #10241	; 0x2801
    773a:	a907      	add	r1, sp, #28
    773c:	4640      	mov	r0, r8
    773e:	f88d 401c 	strb.w	r4, [sp, #28]
    7742:	f8ad 301e 	strh.w	r3, [sp, #30]
    7746:	f012 fcaa 	bl	1a09e <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    774a:	2800      	cmp	r0, #0
    774c:	d0be      	beq.n	76cc <att_read_group_req+0x5c>
	if (!req) {
    774e:	2310      	movs	r3, #16
    7750:	4632      	mov	r2, r6
    7752:	2110      	movs	r1, #16
    7754:	4628      	mov	r0, r5
    7756:	f013 fa9a 	bl	1ac8e <send_err_rsp.part.0>
		return 0;
    775a:	e7e8      	b.n	772e <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    775c:	9909      	ldr	r1, [sp, #36]	; 0x24
    775e:	4628      	mov	r0, r5
    7760:	f7ff fbf4 	bl	6f4c <bt_att_chan_send_rsp.constprop.0>
	return 0;
    7764:	e7e2      	b.n	772c <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
    7766:	2404      	movs	r4, #4
    7768:	e7e1      	b.n	772e <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
    776a:	240e      	movs	r4, #14
    776c:	e7df      	b.n	772e <att_read_group_req+0xbe>
    776e:	bf00      	nop
    7770:	00007039 	.word	0x00007039

00007774 <att_read_mult_req>:
{
    7774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    7778:	6886      	ldr	r6, [r0, #8]
{
    777a:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
    777c:	2210      	movs	r2, #16
{
    777e:	4604      	mov	r4, r0
    7780:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
    7782:	4668      	mov	r0, sp
    7784:	2100      	movs	r1, #0
    7786:	f012 fa38 	bl	19bfa <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    778a:	2200      	movs	r2, #0
    778c:	210f      	movs	r1, #15
    778e:	4630      	mov	r0, r6
    7790:	f7ff fec8 	bl	7524 <bt_att_create_pdu>
    7794:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    7796:	b358      	cbz	r0, 77f0 <att_read_mult_req+0x7c>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    7798:	f8df 9058 	ldr.w	r9, [pc, #88]	; 77f4 <att_read_mult_req+0x80>
	data.chan = chan;
    779c:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
    779e:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    77a2:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    77a6:	89ab      	ldrh	r3, [r5, #12]
    77a8:	2b01      	cmp	r3, #1
    77aa:	d804      	bhi.n	77b6 <att_read_mult_req+0x42>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    77ac:	9902      	ldr	r1, [sp, #8]
    77ae:	4620      	mov	r0, r4
    77b0:	f7ff fbcc 	bl	6f4c <bt_att_chan_send_rsp.constprop.0>
    77b4:	e018      	b.n	77e8 <att_read_mult_req+0x74>
    77b6:	4638      	mov	r0, r7
    77b8:	f015 fdf6 	bl	1d3a8 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    77bc:	466b      	mov	r3, sp
    77be:	464a      	mov	r2, r9
    77c0:	4601      	mov	r1, r0
    77c2:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    77c4:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    77c8:	f013 f830 	bl	1a82c <bt_gatt_foreach_attr>
		if (data.err) {
    77cc:	f89d 300c 	ldrb.w	r3, [sp, #12]
    77d0:	2b00      	cmp	r3, #0
    77d2:	d0e8      	beq.n	77a6 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    77d4:	9802      	ldr	r0, [sp, #8]
    77d6:	f00d ffc1 	bl	1575c <net_buf_unref>
	if (!req) {
    77da:	f89d 300c 	ldrb.w	r3, [sp, #12]
    77de:	4632      	mov	r2, r6
    77e0:	210e      	movs	r1, #14
    77e2:	4620      	mov	r0, r4
    77e4:	f013 fa53 	bl	1ac8e <send_err_rsp.part.0>
	return 0;
    77e8:	2000      	movs	r0, #0
}
    77ea:	b005      	add	sp, #20
    77ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    77f0:	200e      	movs	r0, #14
    77f2:	e7fa      	b.n	77ea <att_read_mult_req+0x76>
    77f4:	0001ac3b 	.word	0x0001ac3b

000077f8 <att_read_rsp>:
{
    77f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    77fc:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
    7800:	4605      	mov	r5, r0
    7802:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    7804:	4640      	mov	r0, r8
    7806:	2101      	movs	r1, #1
{
    7808:	4614      	mov	r4, r2
    780a:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    780c:	f013 fdd1 	bl	1b3b2 <bt_gatt_change_aware>
    7810:	b388      	cbz	r0, 7876 <att_read_rsp+0x7e>
	if (!handle) {
    7812:	b396      	cbz	r6, 787a <att_read_rsp+0x82>
	(void)memset(&data, 0, sizeof(data));
    7814:	2210      	movs	r2, #16
    7816:	2100      	movs	r1, #0
    7818:	4668      	mov	r0, sp
    781a:	f012 f9ee 	bl	19bfa <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    781e:	2200      	movs	r2, #0
    7820:	4621      	mov	r1, r4
    7822:	4640      	mov	r0, r8
    7824:	f7ff fe7e 	bl	7524 <bt_att_create_pdu>
    7828:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    782a:	b340      	cbz	r0, 787e <att_read_rsp+0x86>
	data.offset = offset;
    782c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    7830:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    7834:	2301      	movs	r3, #1
    7836:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    783a:	4a12      	ldr	r2, [pc, #72]	; (7884 <att_read_rsp+0x8c>)
	data.chan = chan;
    783c:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    783e:	466b      	mov	r3, sp
    7840:	4631      	mov	r1, r6
    7842:	4630      	mov	r0, r6
    7844:	f012 fff2 	bl	1a82c <bt_gatt_foreach_attr>
	if (data.err) {
    7848:	f89d 400c 	ldrb.w	r4, [sp, #12]
    784c:	b174      	cbz	r4, 786c <att_read_rsp+0x74>
		net_buf_unref(data.buf);
    784e:	9802      	ldr	r0, [sp, #8]
    7850:	f00d ff84 	bl	1575c <net_buf_unref>
	if (!req) {
    7854:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7858:	4632      	mov	r2, r6
    785a:	4639      	mov	r1, r7
    785c:	4628      	mov	r0, r5
    785e:	f013 fa16 	bl	1ac8e <send_err_rsp.part.0>
		return 0;
    7862:	2400      	movs	r4, #0
}
    7864:	4620      	mov	r0, r4
    7866:	b004      	add	sp, #16
    7868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    786c:	9902      	ldr	r1, [sp, #8]
    786e:	4628      	mov	r0, r5
    7870:	f7ff fb6c 	bl	6f4c <bt_att_chan_send_rsp.constprop.0>
	return 0;
    7874:	e7f6      	b.n	7864 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    7876:	2412      	movs	r4, #18
    7878:	e7f4      	b.n	7864 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
    787a:	2401      	movs	r4, #1
    787c:	e7f2      	b.n	7864 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    787e:	240e      	movs	r4, #14
    7880:	e7f0      	b.n	7864 <att_read_rsp+0x6c>
    7882:	bf00      	nop
    7884:	0001ac3b 	.word	0x0001ac3b

00007888 <att_read_type_req>:
{
    7888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    788c:	7b0c      	ldrb	r4, [r1, #12]
    788e:	3c04      	subs	r4, #4
    7890:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    7892:	2c02      	cmp	r4, #2
{
    7894:	4605      	mov	r5, r0
    7896:	b08c      	sub	sp, #48	; 0x30
    7898:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    789a:	d001      	beq.n	78a0 <att_read_type_req+0x18>
    789c:	2c10      	cmp	r4, #16
    789e:	d14f      	bne.n	7940 <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
    78a0:	2104      	movs	r1, #4
    78a2:	3008      	adds	r0, #8
    78a4:	f015 fd70 	bl	1d388 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    78a8:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    78ac:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    78ae:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    78b0:	1d01      	adds	r1, r0, #4
    78b2:	4622      	mov	r2, r4
    78b4:	4640      	mov	r0, r8
    78b6:	f012 fc1c 	bl	1a0f2 <bt_uuid_create>
    78ba:	b188      	cbz	r0, 78e0 <att_read_type_req+0x58>
	if (!start || !end) {
    78bc:	b19e      	cbz	r6, 78e6 <att_read_type_req+0x5e>
    78be:	b18f      	cbz	r7, 78e4 <att_read_type_req+0x5c>
	if (start > end) {
    78c0:	42be      	cmp	r6, r7
    78c2:	d810      	bhi.n	78e6 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    78c4:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    78c6:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    78c8:	2100      	movs	r1, #0
    78ca:	eb0d 0002 	add.w	r0, sp, r2
    78ce:	f012 f994 	bl	19bfa <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    78d2:	2201      	movs	r2, #1
    78d4:	2109      	movs	r1, #9
    78d6:	4620      	mov	r0, r4
    78d8:	f7ff fe24 	bl	7524 <bt_att_create_pdu>
    78dc:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    78de:	b968      	cbnz	r0, 78fc <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
    78e0:	240e      	movs	r4, #14
    78e2:	e007      	b.n	78f4 <att_read_type_req+0x6c>
			*err = 0U;
    78e4:	463e      	mov	r6, r7
	if (!req) {
    78e6:	2301      	movs	r3, #1
    78e8:	4632      	mov	r2, r6
    78ea:	2108      	movs	r1, #8
    78ec:	4628      	mov	r0, r5
    78ee:	f013 f9ce 	bl	1ac8e <send_err_rsp.part.0>
		return 0;
    78f2:	2400      	movs	r4, #0
}
    78f4:	4620      	mov	r0, r4
    78f6:	b00c      	add	sp, #48	; 0x30
    78f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    78fc:	2101      	movs	r1, #1
    78fe:	3008      	adds	r0, #8
	data.uuid = uuid;
    7900:	e9cd 5806 	strd	r5, r8, [sp, #24]
    7904:	f015 fcdb 	bl	1d2be <net_buf_simple_add>
	data.rsp->len = 0U;
    7908:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    790c:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    790e:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    7910:	4a0c      	ldr	r2, [pc, #48]	; (7944 <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
    7912:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    7916:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    7918:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    791c:	4630      	mov	r0, r6
    791e:	ab06      	add	r3, sp, #24
    7920:	f012 ff84 	bl	1a82c <bt_gatt_foreach_attr>
	if (data.err) {
    7924:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    7928:	b12c      	cbz	r4, 7936 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    792a:	9808      	ldr	r0, [sp, #32]
    792c:	f00d ff16 	bl	1575c <net_buf_unref>
	if (!req) {
    7930:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    7934:	e7d8      	b.n	78e8 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    7936:	9908      	ldr	r1, [sp, #32]
    7938:	4628      	mov	r0, r5
    793a:	f7ff fb07 	bl	6f4c <bt_att_chan_send_rsp.constprop.0>
	return 0;
    793e:	e7d9      	b.n	78f4 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
    7940:	2404      	movs	r4, #4
    7942:	e7d7      	b.n	78f4 <att_read_type_req+0x6c>
    7944:	000070e5 	.word	0x000070e5

00007948 <att_find_type_req>:
{
    7948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    794c:	4688      	mov	r8, r1
    794e:	b086      	sub	sp, #24
    7950:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
    7952:	2106      	movs	r1, #6
    7954:	f108 0008 	add.w	r0, r8, #8
    7958:	f015 fd16 	bl	1d388 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    795c:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
    795e:	b317      	cbz	r7, 79a6 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
    7960:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
    7964:	f1b9 0f00 	cmp.w	r9, #0
    7968:	d01c      	beq.n	79a4 <att_find_type_req+0x5c>
	if (start > end) {
    796a:	45b9      	cmp	r9, r7
    796c:	d31b      	bcc.n	79a6 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
    796e:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    7970:	f8ad 3002 	strh.w	r3, [sp, #2]
    7974:	2400      	movs	r4, #0
    7976:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    797a:	a901      	add	r1, sp, #4
    797c:	4668      	mov	r0, sp
	value = buf->data;
    797e:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    7982:	f88d 4000 	strb.w	r4, [sp]
    7986:	f88d 4004 	strb.w	r4, [sp, #4]
    798a:	f8ad 3006 	strh.w	r3, [sp, #6]
    798e:	f012 fb86 	bl	1a09e <bt_uuid_cmp>
    7992:	4606      	mov	r6, r0
    7994:	b190      	cbz	r0, 79bc <att_find_type_req+0x74>
	if (!req) {
    7996:	230a      	movs	r3, #10
    7998:	463a      	mov	r2, r7
    799a:	2106      	movs	r1, #6
    799c:	4628      	mov	r0, r5
    799e:	f013 f976 	bl	1ac8e <send_err_rsp.part.0>
		return 0;
    79a2:	e007      	b.n	79b4 <att_find_type_req+0x6c>
			*err = 0U;
    79a4:	464f      	mov	r7, r9
	if (!req) {
    79a6:	2301      	movs	r3, #1
    79a8:	463a      	mov	r2, r7
    79aa:	2106      	movs	r1, #6
    79ac:	4628      	mov	r0, r5
    79ae:	f013 f96e 	bl	1ac8e <send_err_rsp.part.0>
		return 0;
    79b2:	2400      	movs	r4, #0
}
    79b4:	4620      	mov	r0, r4
    79b6:	b006      	add	sp, #24
    79b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    79bc:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
    79c0:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    79c4:	4601      	mov	r1, r0
    79c6:	2214      	movs	r2, #20
    79c8:	a801      	add	r0, sp, #4
    79ca:	f012 f916 	bl	19bfa <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    79ce:	4632      	mov	r2, r6
    79d0:	2107      	movs	r1, #7
    79d2:	4640      	mov	r0, r8
    79d4:	f7ff fda6 	bl	7524 <bt_att_create_pdu>
    79d8:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    79da:	b1d8      	cbz	r0, 7a14 <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    79dc:	230a      	movs	r3, #10
    79de:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    79e2:	4a0d      	ldr	r2, [pc, #52]	; (7a18 <att_find_type_req+0xd0>)
	data.value_len = value_len;
    79e4:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    79e8:	ab01      	add	r3, sp, #4
    79ea:	4649      	mov	r1, r9
    79ec:	4638      	mov	r0, r7
	data.value = value;
    79ee:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
    79f2:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    79f4:	f012 ff1a 	bl	1a82c <bt_gatt_foreach_attr>
	if (data.err) {
    79f8:	f89d 4015 	ldrb.w	r4, [sp, #21]
    79fc:	b12c      	cbz	r4, 7a0a <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    79fe:	9802      	ldr	r0, [sp, #8]
    7a00:	f00d feac 	bl	1575c <net_buf_unref>
	if (!req) {
    7a04:	f89d 3015 	ldrb.w	r3, [sp, #21]
    7a08:	e7ce      	b.n	79a8 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    7a0a:	9902      	ldr	r1, [sp, #8]
    7a0c:	4628      	mov	r0, r5
    7a0e:	f7ff fa9d 	bl	6f4c <bt_att_chan_send_rsp.constprop.0>
	return 0;
    7a12:	e7cf      	b.n	79b4 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    7a14:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    7a16:	e7cd      	b.n	79b4 <att_find_type_req+0x6c>
    7a18:	00006c8d 	.word	0x00006c8d

00007a1c <att_find_info_req>:
{
    7a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    7a1e:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    7a20:	881e      	ldrh	r6, [r3, #0]
{
    7a22:	b085      	sub	sp, #20
    7a24:	4605      	mov	r5, r0
	if (!start || !end) {
    7a26:	b19e      	cbz	r6, 7a50 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    7a28:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    7a2a:	b184      	cbz	r4, 7a4e <att_find_info_req+0x32>
	if (start > end) {
    7a2c:	42a6      	cmp	r6, r4
    7a2e:	d80f      	bhi.n	7a50 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    7a30:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
    7a32:	2210      	movs	r2, #16
    7a34:	2100      	movs	r1, #0
    7a36:	4668      	mov	r0, sp
    7a38:	f012 f8df 	bl	19bfa <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    7a3c:	2200      	movs	r2, #0
    7a3e:	2105      	movs	r1, #5
    7a40:	4638      	mov	r0, r7
    7a42:	f7ff fd6f 	bl	7524 <bt_att_create_pdu>
    7a46:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    7a48:	b958      	cbnz	r0, 7a62 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    7a4a:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    7a4c:	e007      	b.n	7a5e <att_find_info_req+0x42>
			*err = 0U;
    7a4e:	4626      	mov	r6, r4
	if (!req) {
    7a50:	2301      	movs	r3, #1
    7a52:	4632      	mov	r2, r6
    7a54:	2104      	movs	r1, #4
    7a56:	4628      	mov	r0, r5
    7a58:	f013 f919 	bl	1ac8e <send_err_rsp.part.0>
	return 0;
    7a5c:	2000      	movs	r0, #0
}
    7a5e:	b005      	add	sp, #20
    7a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    7a62:	4621      	mov	r1, r4
    7a64:	4a08      	ldr	r2, [pc, #32]	; (7a88 <att_find_info_req+0x6c>)
	data.chan = chan;
    7a66:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    7a68:	466b      	mov	r3, sp
    7a6a:	4630      	mov	r0, r6
    7a6c:	f012 fede 	bl	1a82c <bt_gatt_foreach_attr>
	if (!data.rsp) {
    7a70:	9c02      	ldr	r4, [sp, #8]
    7a72:	b924      	cbnz	r4, 7a7e <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    7a74:	9801      	ldr	r0, [sp, #4]
    7a76:	f00d fe71 	bl	1575c <net_buf_unref>
	if (!req) {
    7a7a:	230a      	movs	r3, #10
    7a7c:	e7e9      	b.n	7a52 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    7a7e:	9901      	ldr	r1, [sp, #4]
    7a80:	4628      	mov	r0, r5
    7a82:	f7ff fa63 	bl	6f4c <bt_att_chan_send_rsp.constprop.0>
    7a86:	e7e9      	b.n	7a5c <att_find_info_req+0x40>
    7a88:	0001a843 	.word	0x0001a843

00007a8c <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    7a8c:	b513      	push	{r0, r1, r4, lr}
    7a8e:	4602      	mov	r2, r0
    7a90:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    7a92:	4808      	ldr	r0, [pc, #32]	; (7ab4 <bt_att_req_alloc+0x28>)
    7a94:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
    7a96:	2400      	movs	r4, #0
    7a98:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    7a9a:	f00f faa3 	bl	16fe4 <k_mem_slab_alloc>
    7a9e:	4601      	mov	r1, r0
    7aa0:	b930      	cbnz	r0, 7ab0 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
    7aa2:	9801      	ldr	r0, [sp, #4]
    7aa4:	2210      	movs	r2, #16
    7aa6:	f012 f8a8 	bl	19bfa <memset>

	return req;
    7aaa:	9801      	ldr	r0, [sp, #4]
}
    7aac:	b002      	add	sp, #8
    7aae:	bd10      	pop	{r4, pc}
		return NULL;
    7ab0:	4620      	mov	r0, r4
    7ab2:	e7fb      	b.n	7aac <bt_att_req_alloc+0x20>
    7ab4:	20000b2c 	.word	0x20000b2c

00007ab8 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    7ab8:	b507      	push	{r0, r1, r2, lr}
    7aba:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
    7abc:	6880      	ldr	r0, [r0, #8]
    7abe:	b120      	cbz	r0, 7aca <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
    7ac0:	f00d fe4c 	bl	1575c <net_buf_unref>
		req->buf = NULL;
    7ac4:	9b01      	ldr	r3, [sp, #4]
    7ac6:	2200      	movs	r2, #0
    7ac8:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
    7aca:	4803      	ldr	r0, [pc, #12]	; (7ad8 <bt_att_req_free+0x20>)
    7acc:	a901      	add	r1, sp, #4
    7ace:	f015 fe9f 	bl	1d810 <k_mem_slab_free>
}
    7ad2:	b003      	add	sp, #12
    7ad4:	f85d fb04 	ldr.w	pc, [sp], #4
    7ad8:	20000b2c 	.word	0x20000b2c

00007adc <att_handle_rsp>:
{
    7adc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7ae0:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
    7ae2:	f500 7088 	add.w	r0, r0, #272	; 0x110
{
    7ae6:	460f      	mov	r7, r1
    7ae8:	4690      	mov	r8, r2
    7aea:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
    7aec:	f016 f877 	bl	1dbde <k_work_cancel_delayable>
	if (!chan->req) {
    7af0:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
    7af4:	b9e5      	cbnz	r5, 7b30 <att_handle_rsp+0x54>
    7af6:	4919      	ldr	r1, [pc, #100]	; (7b5c <att_handle_rsp+0x80>)
    7af8:	4819      	ldr	r0, [pc, #100]	; (7b60 <att_handle_rsp+0x84>)
    7afa:	1a40      	subs	r0, r0, r1
    7afc:	08c0      	lsrs	r0, r0, #3
		BT_WARN("No pending ATT request");
    7afe:	0180      	lsls	r0, r0, #6
    7b00:	f040 0102 	orr.w	r1, r0, #2
    7b04:	4817      	ldr	r0, [pc, #92]	; (7b64 <att_handle_rsp+0x88>)
    7b06:	f011 f974 	bl	18df2 <log_0>
	bt_att_func_t func = NULL;
    7b0a:	46aa      	mov	sl, r5
	att_req_send_process(chan->att);
    7b0c:	6820      	ldr	r0, [r4, #0]
    7b0e:	f012 fffd 	bl	1ab0c <att_req_send_process>
	if (func) {
    7b12:	f1ba 0f00 	cmp.w	sl, #0
    7b16:	d007      	beq.n	7b28 <att_handle_rsp+0x4c>
		func(chan->att->conn, err, pdu, len, params);
    7b18:	6820      	ldr	r0, [r4, #0]
    7b1a:	f8cd 9000 	str.w	r9, [sp]
    7b1e:	6800      	ldr	r0, [r0, #0]
    7b20:	4643      	mov	r3, r8
    7b22:	463a      	mov	r2, r7
    7b24:	4631      	mov	r1, r6
    7b26:	47d0      	blx	sl
}
    7b28:	2000      	movs	r0, #0
    7b2a:	b003      	add	sp, #12
    7b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
    7b30:	4b0d      	ldr	r3, [pc, #52]	; (7b68 <att_handle_rsp+0x8c>)
    7b32:	429d      	cmp	r5, r3
    7b34:	f04f 0b00 	mov.w	fp, #0
    7b38:	d103      	bne.n	7b42 <att_handle_rsp+0x66>
		chan->req = NULL;
    7b3a:	f8c4 b0f4 	str.w	fp, [r4, #244]	; 0xf4
	bt_att_func_t func = NULL;
    7b3e:	46da      	mov	sl, fp
		goto process;
    7b40:	e7e4      	b.n	7b0c <att_handle_rsp+0x30>
	func = chan->req->func;
    7b42:	f8d5 a004 	ldr.w	sl, [r5, #4]
	chan->req->func = NULL;
    7b46:	f8c5 b004 	str.w	fp, [r5, #4]
	bt_att_req_free(chan->req);
    7b4a:	4628      	mov	r0, r5
	params = chan->req->user_data;
    7b4c:	f8d5 900c 	ldr.w	r9, [r5, #12]
	bt_att_req_free(chan->req);
    7b50:	f7ff ffb2 	bl	7ab8 <bt_att_req_free>
	chan->req = NULL;
    7b54:	f8c4 b0f4 	str.w	fp, [r4, #244]	; 0xf4
    7b58:	e7d8      	b.n	7b0c <att_handle_rsp+0x30>
    7b5a:	bf00      	nop
    7b5c:	0001e408 	.word	0x0001e408
    7b60:	0001e418 	.word	0x0001e418
    7b64:	00020107 	.word	0x00020107
    7b68:	20001a74 	.word	0x20001a74

00007b6c <bt_att_disconnected>:
{
    7b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
    7b6e:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
    7b72:	b085      	sub	sp, #20
    7b74:	4604      	mov	r4, r0
	if (!att_chan->att) {
    7b76:	2d00      	cmp	r5, #0
    7b78:	d037      	beq.n	7bea <bt_att_disconnected+0x7e>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
    7b7a:	f500 719e 	add.w	r1, r0, #316	; 0x13c
    7b7e:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    7b82:	f012 fded 	bl	1a760 <sys_slist_find_and_remove>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
    7b86:	f1a4 0608 	sub.w	r6, r4, #8
    7b8a:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
    7b8e:	2200      	movs	r2, #0
    7b90:	2300      	movs	r3, #0
    7b92:	4638      	mov	r0, r7
    7b94:	f015 fb13 	bl	1d1be <net_buf_get>
    7b98:	4602      	mov	r2, r0
    7b9a:	bb40      	cbnz	r0, 7bee <bt_att_disconnected+0x82>
	if (chan->req) {
    7b9c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
    7ba0:	b123      	cbz	r3, 7bac <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
    7ba2:	4601      	mov	r1, r0
    7ba4:	230e      	movs	r3, #14
    7ba6:	4630      	mov	r0, r6
    7ba8:	f7ff ff98 	bl	7adc <att_handle_rsp>
	chan->att = NULL;
    7bac:	2300      	movs	r3, #0
    7bae:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
    7bb2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    7bb4:	b9cb      	cbnz	r3, 7bea <bt_att_disconnected+0x7e>
	att_reset(att);
    7bb6:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->prep_queue, K_NO_WAIT))) {
    7bb8:	9803      	ldr	r0, [sp, #12]
    7bba:	2200      	movs	r2, #0
    7bbc:	2300      	movs	r3, #0
    7bbe:	3024      	adds	r0, #36	; 0x24
    7bc0:	f015 fafd 	bl	1d1be <net_buf_get>
    7bc4:	b9b0      	cbnz	r0, 7bf4 <bt_att_disconnected+0x88>
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    7bc6:	9803      	ldr	r0, [sp, #12]
    7bc8:	2200      	movs	r2, #0
    7bca:	2300      	movs	r3, #0
    7bcc:	300c      	adds	r0, #12
    7bce:	f015 faf6 	bl	1d1be <net_buf_get>
    7bd2:	b990      	cbnz	r0, 7bfa <bt_att_disconnected+0x8e>
	att->conn = NULL;
    7bd4:	9a03      	ldr	r2, [sp, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    7bd6:	6856      	ldr	r6, [r2, #4]
	att->conn = NULL;
    7bd8:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    7bda:	b98e      	cbnz	r6, 7c00 <bt_att_disconnected+0x94>
	k_mem_slab_free(&att_slab, (void **)&att);
    7bdc:	4815      	ldr	r0, [pc, #84]	; (7c34 <bt_att_disconnected+0xc8>)
    7bde:	a903      	add	r1, sp, #12
    7be0:	f015 fe16 	bl	1d810 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
    7be4:	6820      	ldr	r0, [r4, #0]
    7be6:	f001 fbed 	bl	93c4 <bt_gatt_disconnected>
}
    7bea:	b005      	add	sp, #20
    7bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
    7bee:	f00d fdb5 	bl	1575c <net_buf_unref>
    7bf2:	e7cc      	b.n	7b8e <bt_att_disconnected+0x22>
		net_buf_unref(buf);
    7bf4:	f00d fdb2 	bl	1575c <net_buf_unref>
    7bf8:	e7de      	b.n	7bb8 <bt_att_disconnected+0x4c>
		net_buf_unref(buf);
    7bfa:	f00d fdaf 	bl	1575c <net_buf_unref>
    7bfe:	e7e2      	b.n	7bc6 <bt_att_disconnected+0x5a>
	return node->next;
    7c00:	6835      	ldr	r5, [r6, #0]
    7c02:	2d00      	cmp	r5, #0
    7c04:	bf38      	it	cc
    7c06:	2500      	movcc	r5, #0
		if (req->func) {
    7c08:	6877      	ldr	r7, [r6, #4]
    7c0a:	b137      	cbz	r7, 7c1a <bt_att_disconnected+0xae>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
    7c0c:	68f3      	ldr	r3, [r6, #12]
    7c0e:	9300      	str	r3, [sp, #0]
    7c10:	2300      	movs	r3, #0
    7c12:	461a      	mov	r2, r3
    7c14:	210e      	movs	r1, #14
    7c16:	4618      	mov	r0, r3
    7c18:	47b8      	blx	r7
		bt_att_req_free(req);
    7c1a:	4630      	mov	r0, r6
    7c1c:	f7ff ff4c 	bl	7ab8 <bt_att_req_free>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    7c20:	2d00      	cmp	r5, #0
    7c22:	d0db      	beq.n	7bdc <bt_att_disconnected+0x70>
    7c24:	682b      	ldr	r3, [r5, #0]
    7c26:	2b00      	cmp	r3, #0
    7c28:	bf38      	it	cc
    7c2a:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    7c2c:	462e      	mov	r6, r5
    7c2e:	461d      	mov	r5, r3
    7c30:	e7ea      	b.n	7c08 <bt_att_disconnected+0x9c>
    7c32:	bf00      	nop
    7c34:	20000af4 	.word	0x20000af4

00007c38 <att_timeout>:
    7c38:	4b08      	ldr	r3, [pc, #32]	; (7c5c <att_timeout+0x24>)
    7c3a:	4909      	ldr	r1, [pc, #36]	; (7c60 <att_timeout+0x28>)
{
    7c3c:	b510      	push	{r4, lr}
    7c3e:	1ac9      	subs	r1, r1, r3
    7c40:	08c9      	lsrs	r1, r1, #3
	BT_ERR("ATT Timeout");
    7c42:	0189      	lsls	r1, r1, #6
{
    7c44:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    7c46:	f041 0101 	orr.w	r1, r1, #1
    7c4a:	4806      	ldr	r0, [pc, #24]	; (7c64 <att_timeout+0x2c>)
    7c4c:	f011 f8d1 	bl	18df2 <log_0>
	bt_att_disconnected(&chan->chan.chan);
    7c50:	f5a4 7084 	sub.w	r0, r4, #264	; 0x108
}
    7c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
    7c58:	f7ff bf88 	b.w	7b6c <bt_att_disconnected>
    7c5c:	0001e408 	.word	0x0001e408
    7c60:	0001e418 	.word	0x0001e418
    7c64:	0002011e 	.word	0x0002011e

00007c68 <db_hash_store>:

static void db_hash_store(void)
{
	int err;

	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
    7c68:	490a      	ldr	r1, [pc, #40]	; (7c94 <db_hash_store+0x2c>)
    7c6a:	480b      	ldr	r0, [pc, #44]	; (7c98 <db_hash_store+0x30>)
{
    7c6c:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
    7c6e:	2210      	movs	r2, #16
    7c70:	f7fa ffd8 	bl	2c24 <settings_save_one>
	if (err) {
    7c74:	4601      	mov	r1, r0
    7c76:	b158      	cbz	r0, 7c90 <db_hash_store+0x28>
    7c78:	4b08      	ldr	r3, [pc, #32]	; (7c9c <db_hash_store+0x34>)
    7c7a:	4a09      	ldr	r2, [pc, #36]	; (7ca0 <db_hash_store+0x38>)
		BT_ERR("Failed to save Database Hash (err %d)", err);
    7c7c:	4809      	ldr	r0, [pc, #36]	; (7ca4 <db_hash_store+0x3c>)
    7c7e:	1ad2      	subs	r2, r2, r3
    7c80:	08d2      	lsrs	r2, r2, #3
    7c82:	0192      	lsls	r2, r2, #6
	}

	BT_DBG("Database Hash stored");
}
    7c84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
    7c88:	f042 0201 	orr.w	r2, r2, #1
    7c8c:	f011 b8be 	b.w	18e0c <log_1>
}
    7c90:	bd08      	pop	{r3, pc}
    7c92:	bf00      	nop
    7c94:	20000fe8 	.word	0x20000fe8
    7c98:	00020131 	.word	0x00020131
    7c9c:	0001e408 	.word	0x0001e408
    7ca0:	0001e4f0 	.word	0x0001e4f0
    7ca4:	00020139 	.word	0x00020139

00007ca8 <db_hash_set>:

SETTINGS_STATIC_HANDLER_DEFINE(bt_cf, "bt/cf", NULL, cf_set, NULL, NULL);

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
    7ca8:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
    7caa:	490b      	ldr	r1, [pc, #44]	; (7cd8 <db_hash_set+0x30>)
{
    7cac:	4614      	mov	r4, r2
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
    7cae:	4618      	mov	r0, r3
    7cb0:	2210      	movs	r2, #16
    7cb2:	47a0      	blx	r4
	if (len < 0) {
    7cb4:	1e04      	subs	r4, r0, #0
    7cb6:	da0c      	bge.n	7cd2 <db_hash_set+0x2a>
    7cb8:	4a08      	ldr	r2, [pc, #32]	; (7cdc <db_hash_set+0x34>)
    7cba:	4b09      	ldr	r3, [pc, #36]	; (7ce0 <db_hash_set+0x38>)
		BT_ERR("Failed to decode value (err %zd)", len);
    7cbc:	4809      	ldr	r0, [pc, #36]	; (7ce4 <db_hash_set+0x3c>)
    7cbe:	1ad2      	subs	r2, r2, r3
    7cc0:	08d2      	lsrs	r2, r2, #3
    7cc2:	0192      	lsls	r2, r2, #6
    7cc4:	f042 0201 	orr.w	r2, r2, #1
    7cc8:	4621      	mov	r1, r4
    7cca:	f011 f89f 	bl	18e0c <log_1>

	BT_HEXDUMP_DBG(db_hash.stored_hash, sizeof(db_hash.stored_hash),
		       "Stored Hash: ");

	return 0;
}
    7cce:	4620      	mov	r0, r4
    7cd0:	bd10      	pop	{r4, pc}
	return 0;
    7cd2:	2400      	movs	r4, #0
    7cd4:	e7fb      	b.n	7cce <db_hash_set+0x26>
    7cd6:	bf00      	nop
    7cd8:	20000ff8 	.word	0x20000ff8
    7cdc:	0001e4f0 	.word	0x0001e4f0
    7ce0:	0001e408 	.word	0x0001e408
    7ce4:	0002015f 	.word	0x0002015f

00007ce8 <sc_store>:
{
    7ce8:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
    7cea:	4605      	mov	r5, r0
{
    7cec:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
    7cee:	f815 2b01 	ldrb.w	r2, [r5], #1
{
    7cf2:	4604      	mov	r4, r0
	if (cfg->id) {
    7cf4:	b1fa      	cbz	r2, 7d36 <sc_store+0x4e>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
    7cf6:	ae02      	add	r6, sp, #8
    7cf8:	2104      	movs	r1, #4
    7cfa:	4630      	mov	r0, r6
    7cfc:	f010 fb7f 	bl	183fe <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
    7d00:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
    7d02:	4a0e      	ldr	r2, [pc, #56]	; (7d3c <sc_store+0x54>)
    7d04:	462b      	mov	r3, r5
    7d06:	2124      	movs	r1, #36	; 0x24
    7d08:	a803      	add	r0, sp, #12
    7d0a:	f7fc fb2f 	bl	436c <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
    7d0e:	f104 0108 	add.w	r1, r4, #8
    7d12:	2204      	movs	r2, #4
    7d14:	a803      	add	r0, sp, #12
    7d16:	f7fa ff85 	bl	2c24 <settings_save_one>
	if (err) {
    7d1a:	4601      	mov	r1, r0
    7d1c:	b148      	cbz	r0, 7d32 <sc_store+0x4a>
    7d1e:	4a08      	ldr	r2, [pc, #32]	; (7d40 <sc_store+0x58>)
    7d20:	4b08      	ldr	r3, [pc, #32]	; (7d44 <sc_store+0x5c>)
		BT_ERR("failed to store SC (err %d)", err);
    7d22:	4809      	ldr	r0, [pc, #36]	; (7d48 <sc_store+0x60>)
    7d24:	1ad2      	subs	r2, r2, r3
    7d26:	08d2      	lsrs	r2, r2, #3
    7d28:	0192      	lsls	r2, r2, #6
    7d2a:	f042 0201 	orr.w	r2, r2, #1
    7d2e:	f011 f86d 	bl	18e0c <log_1>
}
    7d32:	b00c      	add	sp, #48	; 0x30
    7d34:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
    7d36:	9200      	str	r2, [sp, #0]
    7d38:	e7e3      	b.n	7d02 <sc_store+0x1a>
    7d3a:	bf00      	nop
    7d3c:	000203e1 	.word	0x000203e1
    7d40:	0001e4f0 	.word	0x0001e4f0
    7d44:	0001e408 	.word	0x0001e408
    7d48:	00020180 	.word	0x00020180

00007d4c <db_hash_commit>:

static int db_hash_commit(void)
{
    7d4c:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    7d4e:	2108      	movs	r1, #8
    7d50:	4804      	ldr	r0, [pc, #16]	; (7d64 <db_hash_commit+0x18>)
    7d52:	f013 f977 	bl	1b044 <atomic_or>
	atomic_set_bit(gatt_sc.flags, DB_HASH_LOAD);
	/* Reschedule work to calculate and compare against the Hash value
	 * loaded from flash.
	 */
	k_work_reschedule(&db_hash.work, K_NO_WAIT);
    7d56:	2200      	movs	r2, #0
    7d58:	2300      	movs	r3, #0
    7d5a:	4803      	ldr	r0, [pc, #12]	; (7d68 <db_hash_commit+0x1c>)
    7d5c:	f00f fd4a 	bl	177f4 <k_work_reschedule>

	return 0;
}
    7d60:	2000      	movs	r0, #0
    7d62:	bd08      	pop	{r3, pc}
    7d64:	200010b0 	.word	0x200010b0
    7d68:	20001008 	.word	0x20001008

00007d6c <bt_gatt_service_init.part.0>:
static void bt_gatt_service_init(void)
    7d6c:	4a08      	ldr	r2, [pc, #32]	; (7d90 <bt_gatt_service_init.part.0+0x24>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    7d6e:	4909      	ldr	r1, [pc, #36]	; (7d94 <bt_gatt_service_init.part.0+0x28>)
    7d70:	8813      	ldrh	r3, [r2, #0]
static void bt_gatt_service_init(void)
    7d72:	b510      	push	{r4, lr}
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    7d74:	4c08      	ldr	r4, [pc, #32]	; (7d98 <bt_gatt_service_init.part.0+0x2c>)
    7d76:	2000      	movs	r0, #0
    7d78:	42a1      	cmp	r1, r4
    7d7a:	d302      	bcc.n	7d82 <bt_gatt_service_init.part.0+0x16>
    7d7c:	b100      	cbz	r0, 7d80 <bt_gatt_service_init.part.0+0x14>
    7d7e:	8013      	strh	r3, [r2, #0]
}
    7d80:	bd10      	pop	{r4, pc}
		last_static_handle += svc->attr_count;
    7d82:	6848      	ldr	r0, [r1, #4]
    7d84:	4403      	add	r3, r0
    7d86:	b29b      	uxth	r3, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    7d88:	3108      	adds	r1, #8
    7d8a:	2001      	movs	r0, #1
    7d8c:	e7f4      	b.n	7d78 <bt_gatt_service_init.part.0+0xc>
    7d8e:	bf00      	nop
    7d90:	20002e42 	.word	0x20002e42
    7d94:	0001e294 	.word	0x0001e294
    7d98:	0001e2a4 	.word	0x0001e2a4

00007d9c <ccc_save>:
{
    7d9c:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    7d9e:	4b0c      	ldr	r3, [pc, #48]	; (7dd0 <ccc_save+0x34>)
{
    7da0:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    7da2:	6882      	ldr	r2, [r0, #8]
    7da4:	429a      	cmp	r2, r3
{
    7da6:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    7da8:	d10f      	bne.n	7dca <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
    7daa:	7922      	ldrb	r2, [r4, #4]
    7dac:	6821      	ldr	r1, [r4, #0]
    7dae:	68c0      	ldr	r0, [r0, #12]
    7db0:	f013 f994 	bl	1b0dc <ccc_find_cfg>
	if (!cfg) {
    7db4:	b148      	cbz	r0, 7dca <ccc_save+0x2e>
	save->store[save->count].handle = handle;
    7db6:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
    7dba:	8901      	ldrh	r1, [r0, #8]
    7dbc:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
    7dc0:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
    7dc2:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
    7dc4:	8151      	strh	r1, [r2, #10]
	save->count++;
    7dc6:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
    7dca:	2001      	movs	r0, #1
    7dcc:	bd38      	pop	{r3, r4, r5, pc}
    7dce:	bf00      	nop
    7dd0:	00008195 	.word	0x00008195

00007dd4 <ccc_load>:
{
    7dd4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    7dd6:	4b21      	ldr	r3, [pc, #132]	; (7e5c <ccc_load+0x88>)
{
    7dd8:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    7dda:	6882      	ldr	r2, [r0, #8]
    7ddc:	429a      	cmp	r2, r3
    7dde:	d002      	beq.n	7de6 <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
    7de0:	2001      	movs	r0, #1
}
    7de2:	b002      	add	sp, #8
    7de4:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
    7de6:	68a3      	ldr	r3, [r4, #8]
	ccc = attr->user_data;
    7de8:	68c6      	ldr	r6, [r0, #12]
	if (!load->entry) {
    7dea:	b94b      	cbnz	r3, 7e00 <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
    7dec:	7922      	ldrb	r2, [r4, #4]
    7dee:	6821      	ldr	r1, [r4, #0]
    7df0:	4630      	mov	r0, r6
    7df2:	f013 f973 	bl	1b0dc <ccc_find_cfg>
	if (!cfg) {
    7df6:	2800      	cmp	r0, #0
    7df8:	d0f2      	beq.n	7de0 <ccc_load+0xc>
	clear_ccc_cfg(cfg);
    7dfa:	f013 f935 	bl	1b068 <clear_ccc_cfg>
    7dfe:	e7ef      	b.n	7de0 <ccc_load+0xc>
	} else if (!load->count) {
    7e00:	68e0      	ldr	r0, [r4, #12]
    7e02:	2800      	cmp	r0, #0
    7e04:	d0ed      	beq.n	7de2 <ccc_load+0xe>
	if (load->entry->handle != handle) {
    7e06:	881b      	ldrh	r3, [r3, #0]
    7e08:	4299      	cmp	r1, r3
    7e0a:	d00a      	beq.n	7e22 <ccc_load+0x4e>
		if (load->entry->handle < handle) {
    7e0c:	d9e8      	bls.n	7de0 <ccc_load+0xc>
	load->count--;
    7e0e:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
    7e10:	68a3      	ldr	r3, [r4, #8]
	load->count--;
    7e12:	3801      	subs	r0, #1
	load->entry++;
    7e14:	3304      	adds	r3, #4
	load->count--;
    7e16:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    7e18:	3800      	subs	r0, #0
	load->entry++;
    7e1a:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    7e1c:	bf18      	it	ne
    7e1e:	2001      	movne	r0, #1
    7e20:	e7df      	b.n	7de2 <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
    7e22:	7922      	ldrb	r2, [r4, #4]
    7e24:	6821      	ldr	r1, [r4, #0]
    7e26:	4630      	mov	r0, r6
    7e28:	f013 f958 	bl	1b0dc <ccc_find_cfg>
	if (!cfg) {
    7e2c:	4605      	mov	r5, r0
    7e2e:	b980      	cbnz	r0, 7e52 <ccc_load+0x7e>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
    7e30:	9000      	str	r0, [sp, #0]
    7e32:	4602      	mov	r2, r0
    7e34:	f8cd 0003 	str.w	r0, [sp, #3]
    7e38:	4669      	mov	r1, sp
    7e3a:	4630      	mov	r0, r6
    7e3c:	f013 f94e 	bl	1b0dc <ccc_find_cfg>
		if (!cfg) {
    7e40:	4605      	mov	r5, r0
    7e42:	2800      	cmp	r0, #0
    7e44:	d0e3      	beq.n	7e0e <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
    7e46:	6821      	ldr	r1, [r4, #0]
    7e48:	3001      	adds	r0, #1
    7e4a:	f013 f90a 	bl	1b062 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
    7e4e:	7923      	ldrb	r3, [r4, #4]
    7e50:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
    7e52:	68a3      	ldr	r3, [r4, #8]
    7e54:	885b      	ldrh	r3, [r3, #2]
    7e56:	812b      	strh	r3, [r5, #8]
    7e58:	e7d9      	b.n	7e0e <ccc_load+0x3a>
    7e5a:	bf00      	nop
    7e5c:	00008195 	.word	0x00008195

00007e60 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
    7e60:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
    7e62:	6881      	ldr	r1, [r0, #8]
{
    7e64:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    7e66:	4a07      	ldr	r2, [pc, #28]	; (7e84 <remove_peer_from_attr+0x24>)
    7e68:	4291      	cmp	r1, r2
    7e6a:	d109      	bne.n	7e80 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
    7e6c:	791a      	ldrb	r2, [r3, #4]
    7e6e:	6819      	ldr	r1, [r3, #0]
    7e70:	68c0      	ldr	r0, [r0, #12]
    7e72:	f013 f933 	bl	1b0dc <ccc_find_cfg>
	if (cfg) {
    7e76:	b118      	cbz	r0, 7e80 <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
    7e78:	220a      	movs	r2, #10
    7e7a:	2100      	movs	r1, #0
    7e7c:	f011 febd 	bl	19bfa <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
    7e80:	2001      	movs	r0, #1
    7e82:	bd08      	pop	{r3, pc}
    7e84:	00008195 	.word	0x00008195

00007e88 <find_cf_cfg_by_addr>:
{
    7e88:	b510      	push	{r4, lr}
			if (id == cf_cfg[i].id &&
    7e8a:	4c07      	ldr	r4, [pc, #28]	; (7ea8 <find_cf_cfg_by_addr+0x20>)
    7e8c:	7822      	ldrb	r2, [r4, #0]
{
    7e8e:	4603      	mov	r3, r0
			if (id == cf_cfg[i].id &&
    7e90:	429a      	cmp	r2, r3
{
    7e92:	4608      	mov	r0, r1
			if (id == cf_cfg[i].id &&
    7e94:	d104      	bne.n	7ea0 <find_cf_cfg_by_addr+0x18>
	return memcmp(a, b, sizeof(*a));
    7e96:	2207      	movs	r2, #7
    7e98:	1c61      	adds	r1, r4, #1
    7e9a:	f011 fe73 	bl	19b84 <memcmp>
    7e9e:	b108      	cbz	r0, 7ea4 <find_cf_cfg_by_addr+0x1c>
	return NULL;
    7ea0:	2000      	movs	r0, #0
}
    7ea2:	bd10      	pop	{r4, pc}
				return &cf_cfg[i];
    7ea4:	4620      	mov	r0, r4
    7ea6:	e7fc      	b.n	7ea2 <find_cf_cfg_by_addr+0x1a>
    7ea8:	20001a84 	.word	0x20001a84

00007eac <find_sc_cfg>:
{
    7eac:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
    7eae:	4c06      	ldr	r4, [pc, #24]	; (7ec8 <find_sc_cfg+0x1c>)
    7eb0:	7823      	ldrb	r3, [r4, #0]
    7eb2:	4283      	cmp	r3, r0
    7eb4:	d104      	bne.n	7ec0 <find_sc_cfg+0x14>
    7eb6:	2207      	movs	r2, #7
    7eb8:	1c60      	adds	r0, r4, #1
    7eba:	f011 fe63 	bl	19b84 <memcmp>
    7ebe:	b108      	cbz	r0, 7ec4 <find_sc_cfg+0x18>
	return NULL;
    7ec0:	2000      	movs	r0, #0
}
    7ec2:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
    7ec4:	4620      	mov	r0, r4
    7ec6:	e7fc      	b.n	7ec2 <find_sc_cfg+0x16>
    7ec8:	20002e44 	.word	0x20002e44

00007ecc <sc_save>:
{
    7ecc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    7ed0:	4680      	mov	r8, r0
    7ed2:	460f      	mov	r7, r1
    7ed4:	4616      	mov	r6, r2
    7ed6:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
    7ed8:	f7ff ffe8 	bl	7eac <find_sc_cfg>
	if (!cfg) {
    7edc:	4604      	mov	r4, r0
    7ede:	b9c8      	cbnz	r0, 7f14 <sc_save+0x48>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    7ee0:	4669      	mov	r1, sp
    7ee2:	9000      	str	r0, [sp, #0]
    7ee4:	f8cd 0003 	str.w	r0, [sp, #3]
    7ee8:	f7ff ffe0 	bl	7eac <find_sc_cfg>
		if (!cfg) {
    7eec:	4604      	mov	r4, r0
    7eee:	b960      	cbnz	r0, 7f0a <sc_save+0x3e>
    7ef0:	4915      	ldr	r1, [pc, #84]	; (7f48 <sc_save+0x7c>)
    7ef2:	4b16      	ldr	r3, [pc, #88]	; (7f4c <sc_save+0x80>)
			BT_ERR("unable to save SC: no cfg left");
    7ef4:	4816      	ldr	r0, [pc, #88]	; (7f50 <sc_save+0x84>)
    7ef6:	1ac9      	subs	r1, r1, r3
    7ef8:	08c9      	lsrs	r1, r1, #3
    7efa:	0189      	lsls	r1, r1, #6
    7efc:	f041 0101 	orr.w	r1, r1, #1
    7f00:	f010 ff77 	bl	18df2 <log_0>
}
    7f04:	b002      	add	sp, #8
    7f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
    7f0a:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
    7f0e:	4639      	mov	r1, r7
    7f10:	f013 f8a7 	bl	1b062 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
    7f14:	8922      	ldrh	r2, [r4, #8]
    7f16:	8963      	ldrh	r3, [r4, #10]
    7f18:	b96a      	cbnz	r2, 7f36 <sc_save+0x6a>
    7f1a:	b973      	cbnz	r3, 7f3a <sc_save+0x6e>
		cfg->data.start = start;
    7f1c:	8126      	strh	r6, [r4, #8]
		*end = new_end;
    7f1e:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
    7f20:	4621      	mov	r1, r4
    7f22:	f811 0b01 	ldrb.w	r0, [r1], #1
    7f26:	f012 f9b2 	bl	1a28e <bt_addr_le_is_bonded>
    7f2a:	2800      	cmp	r0, #0
    7f2c:	d0ea      	beq.n	7f04 <sc_save+0x38>
		sc_store(cfg);
    7f2e:	4620      	mov	r0, r4
    7f30:	f7ff feda 	bl	7ce8 <sc_store>
    7f34:	e7e6      	b.n	7f04 <sc_save+0x38>
	if (new_start >= *start && new_end <= *end) {
    7f36:	4296      	cmp	r6, r2
    7f38:	d302      	bcc.n	7f40 <sc_save+0x74>
    7f3a:	429d      	cmp	r5, r3
    7f3c:	d8ef      	bhi.n	7f1e <sc_save+0x52>
    7f3e:	e7e1      	b.n	7f04 <sc_save+0x38>
	if (*end < new_end) {
    7f40:	429d      	cmp	r5, r3
		*start = new_start;
    7f42:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
    7f44:	d9ec      	bls.n	7f20 <sc_save+0x54>
    7f46:	e7ea      	b.n	7f1e <sc_save+0x52>
    7f48:	0001e4f0 	.word	0x0001e4f0
    7f4c:	0001e408 	.word	0x0001e408
    7f50:	0002019c 	.word	0x0002019c

00007f54 <sc_set>:
{
    7f54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7f58:	460e      	mov	r6, r1
    7f5a:	b087      	sub	sp, #28
    7f5c:	4690      	mov	r8, r2
    7f5e:	4699      	mov	r9, r3
	if (!name) {
    7f60:	4607      	mov	r7, r0
    7f62:	b978      	cbnz	r0, 7f84 <sc_set+0x30>
    7f64:	4937      	ldr	r1, [pc, #220]	; (8044 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x44>)
    7f66:	4b38      	ldr	r3, [pc, #224]	; (8048 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x48>)
		BT_ERR("Insufficient number of arguments");
    7f68:	4838      	ldr	r0, [pc, #224]	; (804c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4c>)
    7f6a:	1ac9      	subs	r1, r1, r3
    7f6c:	08c9      	lsrs	r1, r1, #3
    7f6e:	0189      	lsls	r1, r1, #6
    7f70:	f041 0101 	orr.w	r1, r1, #1
    7f74:	f010 ff3d 	bl	18df2 <log_0>
		return -EINVAL;
    7f78:	f06f 0515 	mvn.w	r5, #21
}
    7f7c:	4628      	mov	r0, r5
    7f7e:	b007      	add	sp, #28
    7f80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
    7f84:	a902      	add	r1, sp, #8
    7f86:	f011 feb9 	bl	19cfc <bt_settings_decode_key>
	if (err) {
    7f8a:	4605      	mov	r5, r0
    7f8c:	b178      	cbz	r0, 7fae <sc_set+0x5a>
    7f8e:	4a2e      	ldr	r2, [pc, #184]	; (8048 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x48>)
    7f90:	4c2c      	ldr	r4, [pc, #176]	; (8044 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x44>)
    7f92:	4638      	mov	r0, r7
    7f94:	1aa4      	subs	r4, r4, r2
    7f96:	08e4      	lsrs	r4, r4, #3
    7f98:	f7fa f9a4 	bl	22e4 <z_log_strdup>
		BT_ERR("Unable to decode address %s", log_strdup(name));
    7f9c:	01a4      	lsls	r4, r4, #6
    7f9e:	f044 0401 	orr.w	r4, r4, #1
    7fa2:	4601      	mov	r1, r0
    7fa4:	4622      	mov	r2, r4
    7fa6:	482a      	ldr	r0, [pc, #168]	; (8050 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x50>)
    7fa8:	f010 ff30 	bl	18e0c <log_1>
    7fac:	e7e4      	b.n	7f78 <sc_set+0x24>
	settings_name_next(name, &next);
    7fae:	a901      	add	r1, sp, #4
    7fb0:	4638      	mov	r0, r7
    7fb2:	f011 fa98 	bl	194e6 <settings_name_next>
	if (!next) {
    7fb6:	9801      	ldr	r0, [sp, #4]
    7fb8:	b308      	cbz	r0, 7ffe <sc_set+0xaa>
		id = strtol(next, NULL, 10);
    7fba:	220a      	movs	r2, #10
    7fbc:	4629      	mov	r1, r5
    7fbe:	f011 fd23 	bl	19a08 <strtol>
    7fc2:	b2c7      	uxtb	r7, r0
	cfg = find_sc_cfg(id, &addr);
    7fc4:	a902      	add	r1, sp, #8
    7fc6:	4638      	mov	r0, r7
    7fc8:	f7ff ff70 	bl	7eac <find_sc_cfg>
	if (!cfg && len_rd) {
    7fcc:	4604      	mov	r4, r0
    7fce:	bb88      	cbnz	r0, 8034 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x34>
    7fd0:	2e00      	cmp	r6, #0
    7fd2:	d0d3      	beq.n	7f7c <sc_set+0x28>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    7fd4:	a904      	add	r1, sp, #16
    7fd6:	9004      	str	r0, [sp, #16]
    7fd8:	f8cd 0013 	str.w	r0, [sp, #19]
    7fdc:	f7ff ff66 	bl	7eac <find_sc_cfg>
		if (!cfg) {
    7fe0:	4604      	mov	r4, r0
    7fe2:	b970      	cbnz	r0, 8002 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2>
    7fe4:	4b18      	ldr	r3, [pc, #96]	; (8048 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x48>)
    7fe6:	4917      	ldr	r1, [pc, #92]	; (8044 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x44>)
			BT_ERR("Unable to restore SC: no cfg left");
    7fe8:	481a      	ldr	r0, [pc, #104]	; (8054 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x54>)
    7fea:	1ac9      	subs	r1, r1, r3
    7fec:	08c9      	lsrs	r1, r1, #3
    7fee:	0189      	lsls	r1, r1, #6
    7ff0:	f041 0101 	orr.w	r1, r1, #1
    7ff4:	f010 fefd 	bl	18df2 <log_0>
			return -ENOMEM;
    7ff8:	f06f 050b 	mvn.w	r5, #11
    7ffc:	e7be      	b.n	7f7c <sc_set+0x28>
		id = BT_ID_DEFAULT;
    7ffe:	462f      	mov	r7, r5
    8000:	e7e0      	b.n	7fc4 <sc_set+0x70>
		cfg->id = id;
    8002:	f800 7b01 	strb.w	r7, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
    8006:	a902      	add	r1, sp, #8
    8008:	f013 f82b 	bl	1b062 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
    800c:	f104 0108 	add.w	r1, r4, #8
    8010:	2204      	movs	r2, #4
    8012:	4648      	mov	r0, r9
    8014:	47c0      	blx	r8
		if (len < 0) {
    8016:	1e04      	subs	r4, r0, #0
    8018:	dab0      	bge.n	7f7c <sc_set+0x28>
    801a:	4b0b      	ldr	r3, [pc, #44]	; (8048 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x48>)
    801c:	4a09      	ldr	r2, [pc, #36]	; (8044 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x44>)
			BT_ERR("Failed to decode value (err %zd)", len);
    801e:	480e      	ldr	r0, [pc, #56]	; (8058 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x58>)
    8020:	1ad2      	subs	r2, r2, r3
    8022:	08d2      	lsrs	r2, r2, #3
    8024:	0192      	lsls	r2, r2, #6
    8026:	f042 0201 	orr.w	r2, r2, #1
    802a:	4621      	mov	r1, r4
    802c:	f010 feee 	bl	18e0c <log_1>
			return len;
    8030:	4625      	mov	r5, r4
    8032:	e7a3      	b.n	7f7c <sc_set+0x28>
	if (len_rd) {
    8034:	2e00      	cmp	r6, #0
    8036:	d1e9      	bne.n	800c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc>
		memset(cfg, 0, sizeof(*cfg));
    8038:	220c      	movs	r2, #12
    803a:	4631      	mov	r1, r6
    803c:	f011 fddd 	bl	19bfa <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
    8040:	e79c      	b.n	7f7c <sc_set+0x28>
    8042:	bf00      	nop
    8044:	0001e4f0 	.word	0x0001e4f0
    8048:	0001e408 	.word	0x0001e408
    804c:	0001f368 	.word	0x0001f368
    8050:	000201bb 	.word	0x000201bb
    8054:	000201d7 	.word	0x000201d7
    8058:	0002015f 	.word	0x0002015f

0000805c <find_cf_cfg>:
{
    805c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    805e:	4d0d      	ldr	r5, [pc, #52]	; (8094 <find_cf_cfg+0x38>)
		if (!conn) {
    8060:	4604      	mov	r4, r0
    8062:	b968      	cbnz	r0, 8080 <find_cf_cfg+0x24>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    8064:	9000      	str	r0, [sp, #0]
    8066:	2207      	movs	r2, #7
    8068:	f8cd 0003 	str.w	r0, [sp, #3]
    806c:	4669      	mov	r1, sp
    806e:	1c68      	adds	r0, r5, #1
    8070:	f011 fd88 	bl	19b84 <memcmp>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    8074:	2800      	cmp	r0, #0
    8076:	bf08      	it	eq
    8078:	462c      	moveq	r4, r5
}
    807a:	4620      	mov	r0, r4
    807c:	b003      	add	sp, #12
    807e:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    8080:	462a      	mov	r2, r5
    8082:	f812 1b01 	ldrb.w	r1, [r2], #1
    8086:	f012 fa13 	bl	1a4b0 <bt_conn_is_peer_addr_le>
    808a:	2800      	cmp	r0, #0
	return NULL;
    808c:	bf14      	ite	ne
    808e:	462c      	movne	r4, r5
    8090:	2400      	moveq	r4, #0
    8092:	e7f2      	b.n	807a <find_cf_cfg+0x1e>
    8094:	20001a84 	.word	0x20001a84

00008098 <cf_set>:
{
    8098:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    809c:	4689      	mov	r9, r1
    809e:	b085      	sub	sp, #20
    80a0:	4617      	mov	r7, r2
    80a2:	4698      	mov	r8, r3
	if (!name) {
    80a4:	4605      	mov	r5, r0
    80a6:	b978      	cbnz	r0, 80c8 <cf_set+0x30>
    80a8:	4934      	ldr	r1, [pc, #208]	; (817c <cf_set+0xe4>)
    80aa:	4b35      	ldr	r3, [pc, #212]	; (8180 <cf_set+0xe8>)
		BT_ERR("Insufficient number of arguments");
    80ac:	4835      	ldr	r0, [pc, #212]	; (8184 <cf_set+0xec>)
    80ae:	1ac9      	subs	r1, r1, r3
    80b0:	08c9      	lsrs	r1, r1, #3
    80b2:	0189      	lsls	r1, r1, #6
    80b4:	f041 0101 	orr.w	r1, r1, #1
    80b8:	f010 fe9b 	bl	18df2 <log_0>
		return -EINVAL;
    80bc:	f06f 0415 	mvn.w	r4, #21
}
    80c0:	4620      	mov	r0, r4
    80c2:	b005      	add	sp, #20
    80c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
    80c8:	a902      	add	r1, sp, #8
    80ca:	f011 fe17 	bl	19cfc <bt_settings_decode_key>
	if (err) {
    80ce:	4604      	mov	r4, r0
    80d0:	b178      	cbz	r0, 80f2 <cf_set+0x5a>
    80d2:	4a2b      	ldr	r2, [pc, #172]	; (8180 <cf_set+0xe8>)
    80d4:	4c29      	ldr	r4, [pc, #164]	; (817c <cf_set+0xe4>)
    80d6:	4628      	mov	r0, r5
    80d8:	1aa4      	subs	r4, r4, r2
    80da:	08e4      	lsrs	r4, r4, #3
    80dc:	f7fa f902 	bl	22e4 <z_log_strdup>
		BT_ERR("Unable to decode address %s", log_strdup(name));
    80e0:	01a4      	lsls	r4, r4, #6
    80e2:	f044 0401 	orr.w	r4, r4, #1
    80e6:	4601      	mov	r1, r0
    80e8:	4622      	mov	r2, r4
    80ea:	4827      	ldr	r0, [pc, #156]	; (8188 <cf_set+0xf0>)
    80ec:	f010 fe8e 	bl	18e0c <log_1>
    80f0:	e7e4      	b.n	80bc <cf_set+0x24>
	settings_name_next(name, &next);
    80f2:	a901      	add	r1, sp, #4
    80f4:	4628      	mov	r0, r5
    80f6:	f011 f9f6 	bl	194e6 <settings_name_next>
	if (!next) {
    80fa:	9801      	ldr	r0, [sp, #4]
    80fc:	b1d8      	cbz	r0, 8136 <cf_set+0x9e>
		id = strtol(next, NULL, 10);
    80fe:	220a      	movs	r2, #10
    8100:	4621      	mov	r1, r4
    8102:	f011 fc81 	bl	19a08 <strtol>
    8106:	b2c6      	uxtb	r6, r0
	cfg = find_cf_cfg_by_addr(id, &addr);
    8108:	a902      	add	r1, sp, #8
    810a:	4630      	mov	r0, r6
    810c:	f7ff febc 	bl	7e88 <find_cf_cfg_by_addr>
	if (!cfg) {
    8110:	4605      	mov	r5, r0
    8112:	b9b8      	cbnz	r0, 8144 <cf_set+0xac>
		cfg = find_cf_cfg(NULL);
    8114:	f7ff ffa2 	bl	805c <find_cf_cfg>
		if (!cfg) {
    8118:	4605      	mov	r5, r0
    811a:	b970      	cbnz	r0, 813a <cf_set+0xa2>
    811c:	4b18      	ldr	r3, [pc, #96]	; (8180 <cf_set+0xe8>)
    811e:	4917      	ldr	r1, [pc, #92]	; (817c <cf_set+0xe4>)
			BT_ERR("Unable to restore CF: no cfg left");
    8120:	481a      	ldr	r0, [pc, #104]	; (818c <cf_set+0xf4>)
    8122:	1ac9      	subs	r1, r1, r3
    8124:	08c9      	lsrs	r1, r1, #3
    8126:	0189      	lsls	r1, r1, #6
    8128:	f041 0101 	orr.w	r1, r1, #1
    812c:	f010 fe61 	bl	18df2 <log_0>
			return -ENOMEM;
    8130:	f06f 040b 	mvn.w	r4, #11
    8134:	e7c4      	b.n	80c0 <cf_set+0x28>
		id = BT_ID_DEFAULT;
    8136:	4626      	mov	r6, r4
    8138:	e7e6      	b.n	8108 <cf_set+0x70>
		cfg->id = id;
    813a:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
    813e:	a902      	add	r1, sp, #8
    8140:	f012 ff8f 	bl	1b062 <bt_addr_le_copy>
	if (len_rd) {
    8144:	f1b9 0f00 	cmp.w	r9, #0
    8148:	d013      	beq.n	8172 <cf_set+0xda>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
    814a:	f105 0108 	add.w	r1, r5, #8
    814e:	2201      	movs	r2, #1
    8150:	4640      	mov	r0, r8
    8152:	47b8      	blx	r7
		if (len < 0) {
    8154:	1e05      	subs	r5, r0, #0
    8156:	dab3      	bge.n	80c0 <cf_set+0x28>
    8158:	4b09      	ldr	r3, [pc, #36]	; (8180 <cf_set+0xe8>)
    815a:	4a08      	ldr	r2, [pc, #32]	; (817c <cf_set+0xe4>)
			BT_ERR("Failed to decode value (err %zd)", len);
    815c:	480c      	ldr	r0, [pc, #48]	; (8190 <cf_set+0xf8>)
    815e:	1ad2      	subs	r2, r2, r3
    8160:	08d2      	lsrs	r2, r2, #3
    8162:	0192      	lsls	r2, r2, #6
    8164:	f042 0201 	orr.w	r2, r2, #1
    8168:	4629      	mov	r1, r5
    816a:	f010 fe4f 	bl	18e0c <log_1>
			return len;
    816e:	462c      	mov	r4, r5
    8170:	e7a6      	b.n	80c0 <cf_set+0x28>
		clear_cf_cfg(cfg);
    8172:	4628      	mov	r0, r5
    8174:	f012 ff95 	bl	1b0a2 <clear_cf_cfg>
    8178:	e7a2      	b.n	80c0 <cf_set+0x28>
    817a:	bf00      	nop
    817c:	0001e4f0 	.word	0x0001e4f0
    8180:	0001e408 	.word	0x0001e408
    8184:	0001f368 	.word	0x0001f368
    8188:	000201bb 	.word	0x000201bb
    818c:	000201f9 	.word	0x000201f9
    8190:	0002015f 	.word	0x0002015f

00008194 <bt_gatt_attr_write_ccc>:
{
    8194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8198:	461f      	mov	r7, r3
    819a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
    819e:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
    81a2:	4606      	mov	r6, r0
    81a4:	4688      	mov	r8, r1
	if (offset) {
    81a6:	2b00      	cmp	r3, #0
    81a8:	d14a      	bne.n	8240 <bt_gatt_attr_write_ccc+0xac>
	if (!len || len > sizeof(uint16_t)) {
    81aa:	1e7b      	subs	r3, r7, #1
    81ac:	2b01      	cmp	r3, #1
    81ae:	d84a      	bhi.n	8246 <bt_gatt_attr_write_ccc+0xb2>
	if (len < sizeof(uint16_t)) {
    81b0:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
    81b2:	7815      	ldrb	r5, [r2, #0]
    81b4:	bf18      	it	ne
    81b6:	7853      	ldrbne	r3, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
    81b8:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
    81ba:	bf0c      	ite	eq
    81bc:	b2ad      	uxtheq	r5, r5
    81be:	ea45 2503 	orrne.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
    81c2:	f012 ff9a 	bl	1b0fa <find_ccc_cfg>
	if (!cfg) {
    81c6:	4604      	mov	r4, r0
    81c8:	b9e0      	cbnz	r0, 8204 <bt_gatt_attr_write_ccc+0x70>
		if (!value) {
    81ca:	b915      	cbnz	r5, 81d2 <bt_gatt_attr_write_ccc+0x3e>
			return len;
    81cc:	4638      	mov	r0, r7
}
    81ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
    81d2:	4649      	mov	r1, r9
    81d4:	f012 ff91 	bl	1b0fa <find_ccc_cfg>
		if (!cfg) {
    81d8:	4604      	mov	r4, r0
    81da:	b960      	cbnz	r0, 81f6 <bt_gatt_attr_write_ccc+0x62>
    81dc:	4b1b      	ldr	r3, [pc, #108]	; (824c <bt_gatt_attr_write_ccc+0xb8>)
    81de:	491c      	ldr	r1, [pc, #112]	; (8250 <bt_gatt_attr_write_ccc+0xbc>)
			BT_WARN("No space to store CCC cfg");
    81e0:	481c      	ldr	r0, [pc, #112]	; (8254 <bt_gatt_attr_write_ccc+0xc0>)
    81e2:	1ac9      	subs	r1, r1, r3
    81e4:	08c9      	lsrs	r1, r1, #3
    81e6:	0189      	lsls	r1, r1, #6
    81e8:	f041 0102 	orr.w	r1, r1, #2
    81ec:	f010 fe01 	bl	18df2 <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    81f0:	f06f 0010 	mvn.w	r0, #16
    81f4:	e7eb      	b.n	81ce <bt_gatt_attr_write_ccc+0x3a>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    81f6:	f106 0188 	add.w	r1, r6, #136	; 0x88
    81fa:	3001      	adds	r0, #1
    81fc:	f012 ff31 	bl	1b062 <bt_addr_le_copy>
		cfg->id = conn->id;
    8200:	7a33      	ldrb	r3, [r6, #8]
    8202:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
    8204:	f8d9 3010 	ldr.w	r3, [r9, #16]
    8208:	b973      	cbnz	r3, 8228 <bt_gatt_attr_write_ccc+0x94>
	if (cfg->value != ccc->value) {
    820a:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
    820e:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
    8210:	42ab      	cmp	r3, r5
    8212:	d003      	beq.n	821c <bt_gatt_attr_write_ccc+0x88>
		gatt_ccc_changed(attr, ccc);
    8214:	4649      	mov	r1, r9
    8216:	4640      	mov	r0, r8
    8218:	f012 fe95 	bl	1af46 <gatt_ccc_changed>
	if (!value) {
    821c:	2d00      	cmp	r5, #0
    821e:	d1d5      	bne.n	81cc <bt_gatt_attr_write_ccc+0x38>
		clear_ccc_cfg(cfg);
    8220:	4620      	mov	r0, r4
    8222:	f012 ff21 	bl	1b068 <clear_ccc_cfg>
    8226:	e7d1      	b.n	81cc <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
    8228:	462a      	mov	r2, r5
    822a:	4641      	mov	r1, r8
    822c:	4630      	mov	r0, r6
    822e:	4798      	blx	r3
		if (write < 0) {
    8230:	2800      	cmp	r0, #0
    8232:	dbcc      	blt.n	81ce <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
    8234:	1e42      	subs	r2, r0, #1
    8236:	2a01      	cmp	r2, #1
    8238:	d9e7      	bls.n	820a <bt_gatt_attr_write_ccc+0x76>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
    823a:	f06f 000d 	mvn.w	r0, #13
    823e:	e7c6      	b.n	81ce <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    8240:	f06f 0006 	mvn.w	r0, #6
    8244:	e7c3      	b.n	81ce <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    8246:	f06f 000c 	mvn.w	r0, #12
    824a:	e7c0      	b.n	81ce <bt_gatt_attr_write_ccc+0x3a>
    824c:	0001e408 	.word	0x0001e408
    8250:	0001e4f0 	.word	0x0001e4f0
    8254:	0002021b 	.word	0x0002021b

00008258 <sc_commit.part.0>:
	k_work_reschedule(&gatt_sc.work, timeout);
    8258:	4802      	ldr	r0, [pc, #8]	; (8264 <sc_commit.part.0+0xc>)
    825a:	f44f 72a4 	mov.w	r2, #328	; 0x148
    825e:	2300      	movs	r3, #0
    8260:	f00f bac8 	b.w	177f4 <k_work_reschedule>
    8264:	20001080 	.word	0x20001080

00008268 <sc_commit>:
{
    8268:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    826a:	f06f 0102 	mvn.w	r1, #2
    826e:	4806      	ldr	r0, [pc, #24]	; (8288 <sc_commit+0x20>)
    8270:	f012 ff08 	bl	1b084 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8274:	4804      	ldr	r0, [pc, #16]	; (8288 <sc_commit+0x20>)
    8276:	f012 fe89 	bl	1af8c <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    827a:	07c3      	lsls	r3, r0, #31
    827c:	d501      	bpl.n	8282 <sc_commit+0x1a>
    827e:	f7ff ffeb 	bl	8258 <sc_commit.part.0>
}
    8282:	2000      	movs	r0, #0
    8284:	bd08      	pop	{r3, pc}
    8286:	bf00      	nop
    8288:	200010b0 	.word	0x200010b0

0000828c <cf_write>:
{
    828c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8290:	4698      	mov	r8, r3
    8292:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
    8296:	2b01      	cmp	r3, #1
{
    8298:	4606      	mov	r6, r0
    829a:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
    829c:	d83d      	bhi.n	831a <cf_write+0x8e>
	if (offset + len > sizeof(cfg->data)) {
    829e:	4443      	add	r3, r8
    82a0:	2b01      	cmp	r3, #1
    82a2:	4645      	mov	r5, r8
    82a4:	dc3c      	bgt.n	8320 <cf_write+0x94>
	cfg = find_cf_cfg(conn);
    82a6:	f7ff fed9 	bl	805c <find_cf_cfg>
	if (!cfg) {
    82aa:	4604      	mov	r4, r0
    82ac:	b990      	cbnz	r0, 82d4 <cf_write+0x48>
		cfg = find_cf_cfg(NULL);
    82ae:	f7ff fed5 	bl	805c <find_cf_cfg>
	if (!cfg) {
    82b2:	4604      	mov	r4, r0
    82b4:	b970      	cbnz	r0, 82d4 <cf_write+0x48>
    82b6:	4b1d      	ldr	r3, [pc, #116]	; (832c <cf_write+0xa0>)
    82b8:	491d      	ldr	r1, [pc, #116]	; (8330 <cf_write+0xa4>)
		BT_WARN("No space to store Client Supported Features");
    82ba:	481e      	ldr	r0, [pc, #120]	; (8334 <cf_write+0xa8>)
    82bc:	1ac9      	subs	r1, r1, r3
    82be:	08c9      	lsrs	r1, r1, #3
    82c0:	0189      	lsls	r1, r1, #6
    82c2:	f041 0102 	orr.w	r1, r1, #2
    82c6:	f010 fd94 	bl	18df2 <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    82ca:	f06f 0510 	mvn.w	r5, #16
}
    82ce:	4628      	mov	r0, r5
    82d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
    82d4:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
    82d6:	f1b8 0f00 	cmp.w	r8, #0
    82da:	d10c      	bne.n	82f6 <cf_write+0x6a>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    82dc:	f106 0188 	add.w	r1, r6, #136	; 0x88
    82e0:	1c60      	adds	r0, r4, #1
    82e2:	f012 febe 	bl	1b062 <bt_addr_le_copy>
	cfg->id = conn->id;
    82e6:	4620      	mov	r0, r4
    82e8:	7a33      	ldrb	r3, [r6, #8]
    82ea:	f800 3b0c 	strb.w	r3, [r0], #12
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    82ee:	2101      	movs	r1, #1
    82f0:	f012 fea8 	bl	1b044 <atomic_or>
}
    82f4:	e7eb      	b.n	82ce <cf_write+0x42>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
    82f6:	7a20      	ldrb	r0, [r4, #8]
    82f8:	fa20 f301 	lsr.w	r3, r0, r1
    82fc:	07da      	lsls	r2, r3, #31
    82fe:	d503      	bpl.n	8308 <cf_write+0x7c>
		    !(value[i / 8] & BIT(i % 8))) {
    8300:	783b      	ldrb	r3, [r7, #0]
    8302:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
    8304:	07db      	lsls	r3, r3, #31
    8306:	d50e      	bpl.n	8326 <cf_write+0x9a>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
    8308:	3101      	adds	r1, #1
    830a:	2903      	cmp	r1, #3
    830c:	d1e3      	bne.n	82d6 <cf_write+0x4a>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
    830e:	783b      	ldrb	r3, [r7, #0]
    8310:	f003 0307 	and.w	r3, r3, #7
    8314:	4318      	orrs	r0, r3
    8316:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
    8318:	e7e0      	b.n	82dc <cf_write+0x50>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    831a:	f06f 0506 	mvn.w	r5, #6
    831e:	e7d6      	b.n	82ce <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    8320:	f06f 050c 	mvn.w	r5, #12
    8324:	e7d3      	b.n	82ce <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    8326:	f06f 0512 	mvn.w	r5, #18
    832a:	e7d0      	b.n	82ce <cf_write+0x42>
    832c:	0001e408 	.word	0x0001e408
    8330:	0001e4f0 	.word	0x0001e4f0
    8334:	00020235 	.word	0x00020235

00008338 <db_changed>:
{
    8338:	b513      	push	{r0, r1, r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    833a:	f06f 0104 	mvn.w	r1, #4
    833e:	4812      	ldr	r0, [pc, #72]	; (8388 <db_changed+0x50>)
    8340:	4c12      	ldr	r4, [pc, #72]	; (838c <db_changed+0x54>)
    8342:	f012 fe9f 	bl	1b084 <atomic_and>
	k_work_reschedule(&db_hash.work, DB_HASH_TIMEOUT);
    8346:	f44f 72a4 	mov.w	r2, #328	; 0x148
    834a:	2300      	movs	r3, #0
    834c:	4810      	ldr	r0, [pc, #64]	; (8390 <db_changed+0x58>)
    834e:	f00f fa51 	bl	177f4 <k_work_reschedule>
		if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    8352:	2300      	movs	r3, #0
    8354:	2207      	movs	r2, #7
    8356:	4669      	mov	r1, sp
    8358:	1c60      	adds	r0, r4, #1
    835a:	9300      	str	r3, [sp, #0]
    835c:	f8cd 3003 	str.w	r3, [sp, #3]
    8360:	f011 fc10 	bl	19b84 <memcmp>
    8364:	b170      	cbz	r0, 8384 <db_changed+0x4c>
		if (CF_ROBUST_CACHING(cfg)) {
    8366:	7a23      	ldrb	r3, [r4, #8]
    8368:	07db      	lsls	r3, r3, #31
    836a:	d50b      	bpl.n	8384 <db_changed+0x4c>
    836c:	f06f 0102 	mvn.w	r1, #2
    8370:	f104 000c 	add.w	r0, r4, #12
    8374:	f012 fe86 	bl	1b084 <atomic_and>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    8378:	f06f 0101 	mvn.w	r1, #1
    837c:	f104 000c 	add.w	r0, r4, #12
    8380:	f012 fe80 	bl	1b084 <atomic_and>
}
    8384:	b002      	add	sp, #8
    8386:	bd10      	pop	{r4, pc}
    8388:	200010b0 	.word	0x200010b0
    838c:	20001a84 	.word	0x20001a84
    8390:	20001008 	.word	0x20001008

00008394 <read_ppcp>:
{
    8394:	b513      	push	{r0, r1, r4, lr}
    8396:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    839a:	4c0b      	ldr	r4, [pc, #44]	; (83c8 <read_ppcp+0x34>)
{
    839c:	4610      	mov	r0, r2
	if (offset > value_len) {
    839e:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    83a0:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
    83a4:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
    83a8:	d80b      	bhi.n	83c2 <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
    83aa:	f1c1 0408 	rsb	r4, r1, #8
    83ae:	429c      	cmp	r4, r3
    83b0:	bfa8      	it	ge
    83b2:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
    83b4:	4622      	mov	r2, r4
    83b6:	4469      	add	r1, sp
    83b8:	f011 fbf4 	bl	19ba4 <memcpy>
}
    83bc:	4620      	mov	r0, r4
    83be:	b002      	add	sp, #8
    83c0:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    83c2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
    83c6:	e7f9      	b.n	83bc <read_ppcp+0x28>
    83c8:	00280018 	.word	0x00280018

000083cc <sc_indicate_rsp>:
{
    83cc:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    83ce:	f06f 0102 	mvn.w	r1, #2
    83d2:	4604      	mov	r4, r0
    83d4:	480d      	ldr	r0, [pc, #52]	; (840c <sc_indicate_rsp+0x40>)
    83d6:	f012 fe55 	bl	1b084 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    83da:	480c      	ldr	r0, [pc, #48]	; (840c <sc_indicate_rsp+0x40>)
    83dc:	f012 fdd6 	bl	1af8c <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    83e0:	07c2      	lsls	r2, r0, #31
    83e2:	d504      	bpl.n	83ee <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
    83e4:	480a      	ldr	r0, [pc, #40]	; (8410 <sc_indicate_rsp+0x44>)
    83e6:	2200      	movs	r2, #0
    83e8:	2300      	movs	r3, #0
    83ea:	f00f fa03 	bl	177f4 <k_work_reschedule>
	cfg = find_cf_cfg(conn);
    83ee:	4620      	mov	r0, r4
    83f0:	f7ff fe34 	bl	805c <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    83f4:	b140      	cbz	r0, 8408 <sc_indicate_rsp+0x3c>
    83f6:	7a03      	ldrb	r3, [r0, #8]
    83f8:	07db      	lsls	r3, r3, #31
    83fa:	d505      	bpl.n	8408 <sc_indicate_rsp+0x3c>
}
    83fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    8400:	2101      	movs	r1, #1
    8402:	300c      	adds	r0, #12
    8404:	f012 be1e 	b.w	1b044 <atomic_or>
    8408:	bd10      	pop	{r4, pc}
    840a:	bf00      	nop
    840c:	200010b0 	.word	0x200010b0
    8410:	20001080 	.word	0x20001080

00008414 <bt_gatt_clear_sc>:
{
    8414:	b570      	push	{r4, r5, r6, lr}
    8416:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
    8418:	f7ff fd48 	bl	7eac <find_sc_cfg>
	if (!cfg) {
    841c:	4604      	mov	r4, r0
    841e:	b318      	cbz	r0, 8468 <bt_gatt_clear_sc+0x54>
		if (cfg->id) {
    8420:	4605      	mov	r5, r0
    8422:	f815 2b01 	ldrb.w	r2, [r5], #1
    8426:	b312      	cbz	r2, 846e <bt_gatt_clear_sc+0x5a>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
    8428:	ae02      	add	r6, sp, #8
    842a:	2104      	movs	r1, #4
    842c:	4630      	mov	r0, r6
    842e:	f00f ffe6 	bl	183fe <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
    8432:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
    8434:	2124      	movs	r1, #36	; 0x24
    8436:	4a0f      	ldr	r2, [pc, #60]	; (8474 <bt_gatt_clear_sc+0x60>)
    8438:	462b      	mov	r3, r5
    843a:	a803      	add	r0, sp, #12
    843c:	f7fb ff96 	bl	436c <bt_settings_encode_key>
		err = settings_delete(key);
    8440:	a803      	add	r0, sp, #12
    8442:	f011 f829 	bl	19498 <settings_delete>
		if (err) {
    8446:	4601      	mov	r1, r0
    8448:	b148      	cbz	r0, 845e <bt_gatt_clear_sc+0x4a>
    844a:	4a0b      	ldr	r2, [pc, #44]	; (8478 <bt_gatt_clear_sc+0x64>)
    844c:	4b0b      	ldr	r3, [pc, #44]	; (847c <bt_gatt_clear_sc+0x68>)
			BT_ERR("failed to delete SC (err %d)", err);
    844e:	480c      	ldr	r0, [pc, #48]	; (8480 <bt_gatt_clear_sc+0x6c>)
    8450:	1ad2      	subs	r2, r2, r3
    8452:	08d2      	lsrs	r2, r2, #3
    8454:	0192      	lsls	r2, r2, #6
    8456:	f042 0201 	orr.w	r2, r2, #1
    845a:	f010 fcd7 	bl	18e0c <log_1>
	memset(cfg, 0, sizeof(*cfg));
    845e:	220c      	movs	r2, #12
    8460:	2100      	movs	r1, #0
    8462:	4620      	mov	r0, r4
    8464:	f011 fbc9 	bl	19bfa <memset>
}
    8468:	2000      	movs	r0, #0
    846a:	b00c      	add	sp, #48	; 0x30
    846c:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
    846e:	9200      	str	r2, [sp, #0]
    8470:	e7e0      	b.n	8434 <bt_gatt_clear_sc+0x20>
    8472:	bf00      	nop
    8474:	000203e1 	.word	0x000203e1
    8478:	0001e4f0 	.word	0x0001e4f0
    847c:	0001e408 	.word	0x0001e408
    8480:	00020261 	.word	0x00020261

00008484 <sc_clear>:
{
    8484:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    8486:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
    848a:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    848c:	4631      	mov	r1, r6
    848e:	7a00      	ldrb	r0, [r0, #8]
    8490:	f011 fefd 	bl	1a28e <bt_addr_le_is_bonded>
    8494:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
    8496:	4631      	mov	r1, r6
    8498:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    849a:	b17d      	cbz	r5, 84bc <sc_clear+0x38>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
    849c:	f7ff ffba 	bl	8414 <bt_gatt_clear_sc>
		if (err) {
    84a0:	4601      	mov	r1, r0
    84a2:	b1a0      	cbz	r0, 84ce <sc_clear+0x4a>
    84a4:	4a0a      	ldr	r2, [pc, #40]	; (84d0 <sc_clear+0x4c>)
    84a6:	4b0b      	ldr	r3, [pc, #44]	; (84d4 <sc_clear+0x50>)
			BT_ERR("Failed to clear SC %d", err);
    84a8:	480b      	ldr	r0, [pc, #44]	; (84d8 <sc_clear+0x54>)
    84aa:	1ad2      	subs	r2, r2, r3
    84ac:	08d2      	lsrs	r2, r2, #3
    84ae:	0192      	lsls	r2, r2, #6
}
    84b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Failed to clear SC %d", err);
    84b4:	f042 0201 	orr.w	r2, r2, #1
    84b8:	f010 bca8 	b.w	18e0c <log_1>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
    84bc:	f7ff fcf6 	bl	7eac <find_sc_cfg>
		if (cfg) {
    84c0:	b128      	cbz	r0, 84ce <sc_clear+0x4a>
	memset(cfg, 0, sizeof(*cfg));
    84c2:	4629      	mov	r1, r5
    84c4:	220c      	movs	r2, #12
}
    84c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
    84ca:	f011 bb96 	b.w	19bfa <memset>
}
    84ce:	bd70      	pop	{r4, r5, r6, pc}
    84d0:	0001e4f0 	.word	0x0001e4f0
    84d4:	0001e408 	.word	0x0001e408
    84d8:	0002027e 	.word	0x0002027e

000084dc <disconnected_cb>:
{
    84dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    84e0:	4b1f      	ldr	r3, [pc, #124]	; (8560 <disconnected_cb+0x84>)
{
    84e2:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    84e4:	6882      	ldr	r2, [r0, #8]
    84e6:	429a      	cmp	r2, r3
{
    84e8:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    84ea:	d102      	bne.n	84f2 <disconnected_cb+0x16>
	ccc = attr->user_data;
    84ec:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
    84ee:	8963      	ldrh	r3, [r4, #10]
    84f0:	b9c3      	cbnz	r3, 8524 <disconnected_cb+0x48>
}
    84f2:	2001      	movs	r0, #1
    84f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    84f8:	f105 0888 	add.w	r8, r5, #136	; 0x88
    84fc:	7a28      	ldrb	r0, [r5, #8]
    84fe:	4641      	mov	r1, r8
    8500:	f011 fec5 	bl	1a28e <bt_addr_le_is_bonded>
    8504:	b948      	cbnz	r0, 851a <disconnected_cb+0x3e>
				if (ccc == &sc_ccc) {
    8506:	4b17      	ldr	r3, [pc, #92]	; (8564 <disconnected_cb+0x88>)
    8508:	429c      	cmp	r4, r3
    850a:	d102      	bne.n	8512 <disconnected_cb+0x36>
					sc_clear(conn);
    850c:	4628      	mov	r0, r5
    850e:	f7ff ffb9 	bl	8484 <sc_clear>
				clear_ccc_cfg(cfg);
    8512:	4620      	mov	r0, r4
    8514:	f012 fda8 	bl	1b068 <clear_ccc_cfg>
	if (!value_used) {
    8518:	e019      	b.n	854e <disconnected_cb+0x72>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    851a:	4641      	mov	r1, r8
    851c:	4638      	mov	r0, r7
    851e:	f012 fda0 	bl	1b062 <bt_addr_le_copy>
	if (!value_used) {
    8522:	e014      	b.n	854e <disconnected_cb+0x72>
		if (!cfg->value) {
    8524:	8923      	ldrh	r3, [r4, #8]
    8526:	b193      	cbz	r3, 854e <disconnected_cb+0x72>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    8528:	4627      	mov	r7, r4
    852a:	4628      	mov	r0, r5
    852c:	f817 1b01 	ldrb.w	r1, [r7], #1
    8530:	463a      	mov	r2, r7
    8532:	f011 ffbd 	bl	1a4b0 <bt_conn_is_peer_addr_le>
    8536:	2800      	cmp	r0, #0
    8538:	d1de      	bne.n	84f8 <disconnected_cb+0x1c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    853a:	7820      	ldrb	r0, [r4, #0]
    853c:	4639      	mov	r1, r7
    853e:	f7fe f8ab 	bl	6698 <bt_conn_lookup_addr_le>
			if (tmp) {
    8542:	b120      	cbz	r0, 854e <disconnected_cb+0x72>
				if (tmp->state == BT_CONN_CONNECTED) {
    8544:	7a85      	ldrb	r5, [r0, #10]
				bt_conn_unref(tmp);
    8546:	f011 ffee 	bl	1a526 <bt_conn_unref>
	if (!value_used) {
    854a:	2d07      	cmp	r5, #7
    854c:	d0d1      	beq.n	84f2 <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
    854e:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
    8550:	2100      	movs	r1, #0
    8552:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
    8554:	2b00      	cmp	r3, #0
    8556:	d0cc      	beq.n	84f2 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
    8558:	4630      	mov	r0, r6
    855a:	4798      	blx	r3
    855c:	e7c9      	b.n	84f2 <disconnected_cb+0x16>
    855e:	bf00      	nop
    8560:	00008195 	.word	0x00008195
    8564:	200002a8 	.word	0x200002a8

00008568 <sc_indicate>:
{
    8568:	b570      	push	{r4, r5, r6, lr}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    856a:	4e12      	ldr	r6, [pc, #72]	; (85b4 <sc_indicate+0x4c>)
    856c:	4605      	mov	r5, r0
    856e:	460c      	mov	r4, r1
    8570:	f106 0050 	add.w	r0, r6, #80	; 0x50
    8574:	2101      	movs	r1, #1
    8576:	f012 fd65 	bl	1b044 <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    857a:	f010 0f01 	tst.w	r0, #1
    857e:	4633      	mov	r3, r6
    8580:	d10a      	bne.n	8598 <sc_indicate+0x30>
		gatt_sc.start = start;
    8582:	8335      	strh	r5, [r6, #24]
		gatt_sc.end = end;
    8584:	8374      	strh	r4, [r6, #26]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8586:	480c      	ldr	r0, [pc, #48]	; (85b8 <sc_indicate+0x50>)
    8588:	f012 fd00 	bl	1af8c <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
    858c:	0783      	lsls	r3, r0, #30
    858e:	d40f      	bmi.n	85b0 <sc_indicate+0x48>
}
    8590:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8594:	f7ff be60 	b.w	8258 <sc_commit.part.0>
	if (new_start >= *start && new_end <= *end) {
    8598:	8b31      	ldrh	r1, [r6, #24]
    859a:	8b72      	ldrh	r2, [r6, #26]
    859c:	42a9      	cmp	r1, r5
    859e:	d803      	bhi.n	85a8 <sc_indicate+0x40>
    85a0:	4294      	cmp	r4, r2
    85a2:	d905      	bls.n	85b0 <sc_indicate+0x48>
		*end = new_end;
    85a4:	835c      	strh	r4, [r3, #26]
    85a6:	e7ee      	b.n	8586 <sc_indicate+0x1e>
	if (*end < new_end) {
    85a8:	4294      	cmp	r4, r2
		*start = new_start;
    85aa:	8335      	strh	r5, [r6, #24]
	if (*end < new_end) {
    85ac:	d9eb      	bls.n	8586 <sc_indicate+0x1e>
    85ae:	e7f9      	b.n	85a4 <sc_indicate+0x3c>
}
    85b0:	bd70      	pop	{r4, r5, r6, pc}
    85b2:	bf00      	nop
    85b4:	20001060 	.word	0x20001060
    85b8:	200010b0 	.word	0x200010b0

000085bc <bt_gatt_init>:
{
    85bc:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    85be:	4b1a      	ldr	r3, [pc, #104]	; (8628 <bt_gatt_init+0x6c>)
    85c0:	f3bf 8f5b 	dmb	ish
    85c4:	2201      	movs	r2, #1
    85c6:	e853 1f00 	ldrex	r1, [r3]
    85ca:	2900      	cmp	r1, #0
    85cc:	d103      	bne.n	85d6 <bt_gatt_init+0x1a>
    85ce:	e843 2000 	strex	r0, r2, [r3]
    85d2:	2800      	cmp	r0, #0
    85d4:	d1f7      	bne.n	85c6 <bt_gatt_init+0xa>
    85d6:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    85da:	d123      	bne.n	8624 <bt_gatt_init+0x68>
    85dc:	f3bf 8f5b 	dmb	ish
    85e0:	4b12      	ldr	r3, [pc, #72]	; (862c <bt_gatt_init+0x70>)
    85e2:	e853 1f00 	ldrex	r1, [r3]
    85e6:	2900      	cmp	r1, #0
    85e8:	d103      	bne.n	85f2 <bt_gatt_init+0x36>
    85ea:	e843 2000 	strex	r0, r2, [r3]
    85ee:	2800      	cmp	r0, #0
    85f0:	d1f7      	bne.n	85e2 <bt_gatt_init+0x26>
    85f2:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
    85f6:	d101      	bne.n	85fc <bt_gatt_init+0x40>
    85f8:	f7ff fbb8 	bl	7d6c <bt_gatt_service_init.part.0>
	k_work_init_delayable(&db_hash.work, db_hash_process);
    85fc:	490c      	ldr	r1, [pc, #48]	; (8630 <bt_gatt_init+0x74>)
    85fe:	480d      	ldr	r0, [pc, #52]	; (8634 <bt_gatt_init+0x78>)
    8600:	f015 facd 	bl	1db9e <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
    8604:	2300      	movs	r3, #0
    8606:	f44f 72a4 	mov.w	r2, #328	; 0x148
    860a:	480a      	ldr	r0, [pc, #40]	; (8634 <bt_gatt_init+0x78>)
    860c:	f00f f8be 	bl	1778c <k_work_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
    8610:	4909      	ldr	r1, [pc, #36]	; (8638 <bt_gatt_init+0x7c>)
    8612:	480a      	ldr	r0, [pc, #40]	; (863c <bt_gatt_init+0x80>)
    8614:	f015 fac3 	bl	1db9e <k_work_init_delayable>
}
    8618:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    861c:	4808      	ldr	r0, [pc, #32]	; (8640 <bt_gatt_init+0x84>)
    861e:	2102      	movs	r1, #2
    8620:	f012 bd10 	b.w	1b044 <atomic_or>
    8624:	bd08      	pop	{r3, pc}
    8626:	bf00      	nop
    8628:	20001a9c 	.word	0x20001a9c
    862c:	20001ab8 	.word	0x20001ab8
    8630:	000088a1 	.word	0x000088a1
    8634:	20001008 	.word	0x20001008
    8638:	00008da9 	.word	0x00008da9
    863c:	20001080 	.word	0x20001080
    8640:	200010b0 	.word	0x200010b0

00008644 <bt_gatt_attr_get_handle>:
{
    8644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
    8648:	4603      	mov	r3, r0
    864a:	b148      	cbz	r0, 8660 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
    864c:	8a00      	ldrh	r0, [r0, #16]
    864e:	b938      	cbnz	r0, 8660 <bt_gatt_attr_get_handle+0x1c>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    8650:	4912      	ldr	r1, [pc, #72]	; (869c <bt_gatt_attr_get_handle+0x58>)
    8652:	f8df e04c 	ldr.w	lr, [pc, #76]	; 86a0 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
    8656:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    8658:	f04f 0c14 	mov.w	ip, #20
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    865c:	4571      	cmp	r1, lr
    865e:	d301      	bcc.n	8664 <bt_gatt_attr_get_handle+0x20>
}
    8660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((attr < &static_svc->attrs[0]) ||
    8664:	e9d1 7600 	ldrd	r7, r6, [r1]
    8668:	42bb      	cmp	r3, r7
    866a:	d304      	bcc.n	8676 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    866c:	fb0c 7206 	mla	r2, ip, r6, r7
    8670:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
    8672:	4293      	cmp	r3, r2
    8674:	d90e      	bls.n	8694 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
    8676:	19a2      	adds	r2, r4, r6
    8678:	b292      	uxth	r2, r2
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    867a:	3108      	adds	r1, #8
    867c:	4614      	mov	r4, r2
    867e:	e7ed      	b.n	865c <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
    8680:	fb0c 7805 	mla	r8, ip, r5, r7
    8684:	4543      	cmp	r3, r8
    8686:	d007      	beq.n	8698 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    8688:	3501      	adds	r5, #1
    868a:	1962      	adds	r2, r4, r5
    868c:	42b5      	cmp	r5, r6
    868e:	b292      	uxth	r2, r2
    8690:	d1f6      	bne.n	8680 <bt_gatt_attr_get_handle+0x3c>
    8692:	e7f2      	b.n	867a <bt_gatt_attr_get_handle+0x36>
    8694:	2500      	movs	r5, #0
    8696:	e7f8      	b.n	868a <bt_gatt_attr_get_handle+0x46>
    8698:	4610      	mov	r0, r2
    869a:	e7e1      	b.n	8660 <bt_gatt_attr_get_handle+0x1c>
    869c:	0001e294 	.word	0x0001e294
    86a0:	0001e2a4 	.word	0x0001e2a4

000086a4 <bt_gatt_foreach_attr_type>:
{
    86a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    86a8:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
    86ac:	9100      	str	r1, [sp, #0]
    86ae:	4698      	mov	r8, r3
		num_matches = UINT16_MAX;
    86b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    86b4:	2c00      	cmp	r4, #0
    86b6:	bf08      	it	eq
    86b8:	461c      	moveq	r4, r3
	if (start_handle <= last_static_handle) {
    86ba:	4b4c      	ldr	r3, [pc, #304]	; (87ec <bt_gatt_foreach_attr_type+0x148>)
    86bc:	881b      	ldrh	r3, [r3, #0]
    86be:	4283      	cmp	r3, r0
{
    86c0:	4606      	mov	r6, r0
    86c2:	4617      	mov	r7, r2
	if (start_handle <= last_static_handle) {
    86c4:	d25d      	bcs.n	8782 <bt_gatt_foreach_attr_type+0xde>
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    86c6:	4b4a      	ldr	r3, [pc, #296]	; (87f0 <bt_gatt_foreach_attr_type+0x14c>)
    86c8:	681d      	ldr	r5, [r3, #0]
    86ca:	2d00      	cmp	r5, #0
    86cc:	d04f      	beq.n	876e <bt_gatt_foreach_attr_type+0xca>
    86ce:	3d08      	subs	r5, #8
    86d0:	2d00      	cmp	r5, #0
    86d2:	d04c      	beq.n	876e <bt_gatt_foreach_attr_type+0xca>
Z_GENLIST_PEEK_NEXT(slist, snode)
    86d4:	f115 0b08 	adds.w	fp, r5, #8
    86d8:	d00b      	beq.n	86f2 <bt_gatt_foreach_attr_type+0x4e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    86da:	68ab      	ldr	r3, [r5, #8]
		next = SYS_SLIST_PEEK_NEXT_CONTAINER(svc, node);
    86dc:	2b00      	cmp	r3, #0
    86de:	f000 8082 	beq.w	87e6 <bt_gatt_foreach_attr_type+0x142>
		if (next) {
    86e2:	f1b3 0908 	subs.w	r9, r3, #8
    86e6:	d006      	beq.n	86f6 <bt_gatt_foreach_attr_type+0x52>
			if (next->attrs[0].handle <= start_handle) {
    86e8:	f853 3c08 	ldr.w	r3, [r3, #-8]
    86ec:	8a1b      	ldrh	r3, [r3, #16]
    86ee:	42b3      	cmp	r3, r6
    86f0:	d907      	bls.n	8702 <bt_gatt_foreach_attr_type+0x5e>
    86f2:	f04f 0900 	mov.w	r9, #0
		for (i = 0; i < svc->attr_count; i++) {
    86f6:	686b      	ldr	r3, [r5, #4]
    86f8:	4599      	cmp	r9, r3
    86fa:	d348      	bcc.n	878e <bt_gatt_foreach_attr_type+0xea>
Z_GENLIST_PEEK_NEXT(slist, snode)
    86fc:	f1bb 0f00 	cmp.w	fp, #0
    8700:	d035      	beq.n	876e <bt_gatt_foreach_attr_type+0xca>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    8702:	68ad      	ldr	r5, [r5, #8]
    8704:	e7e1      	b.n	86ca <bt_gatt_foreach_attr_type+0x26>
			if (handle + static_svc->attr_count < start_handle) {
    8706:	f8d9 3004 	ldr.w	r3, [r9, #4]
    870a:	442b      	add	r3, r5
    870c:	42b3      	cmp	r3, r6
    870e:	d235      	bcs.n	877c <bt_gatt_foreach_attr_type+0xd8>
				handle += static_svc->attr_count;
    8710:	b29d      	uxth	r5, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    8712:	f109 0908 	add.w	r9, r9, #8
    8716:	4b37      	ldr	r3, [pc, #220]	; (87f4 <bt_gatt_foreach_attr_type+0x150>)
    8718:	4599      	cmp	r9, r3
    871a:	d3f4      	bcc.n	8706 <bt_gatt_foreach_attr_type+0x62>
    871c:	e7d3      	b.n	86c6 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    871e:	5889      	ldr	r1, [r1, r2]
    8720:	9301      	str	r3, [sp, #4]
    8722:	4638      	mov	r0, r7
    8724:	f011 fcbb 	bl	1a09e <bt_uuid_cmp>
    8728:	9b01      	ldr	r3, [sp, #4]
    872a:	b198      	cbz	r0, 8754 <bt_gatt_foreach_attr_type+0xb0>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    872c:	3501      	adds	r5, #1
    872e:	f10a 0a01 	add.w	sl, sl, #1
    8732:	b2ad      	uxth	r5, r5
    8734:	f8d9 3004 	ldr.w	r3, [r9, #4]
    8738:	4553      	cmp	r3, sl
    873a:	d9ea      	bls.n	8712 <bt_gatt_foreach_attr_type+0x6e>
	if (handle > end_handle) {
    873c:	9b00      	ldr	r3, [sp, #0]
    873e:	429d      	cmp	r5, r3
    8740:	d815      	bhi.n	876e <bt_gatt_foreach_attr_type+0xca>
	if (handle < start_handle) {
    8742:	42b5      	cmp	r5, r6
    8744:	d3f2      	bcc.n	872c <bt_gatt_foreach_attr_type+0x88>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    8746:	f8d9 1000 	ldr.w	r1, [r9]
    874a:	fb0b f20a 	mul.w	r2, fp, sl
    874e:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    8750:	2f00      	cmp	r7, #0
    8752:	d1e4      	bne.n	871e <bt_gatt_foreach_attr_type+0x7a>
	if (attr_data && attr_data != attr->user_data) {
    8754:	f1b8 0f00 	cmp.w	r8, #0
    8758:	d10c      	bne.n	8774 <bt_gatt_foreach_attr_type+0xd0>
	*num_matches -= 1;
    875a:	3c01      	subs	r4, #1
    875c:	b2a4      	uxth	r4, r4
	result = func(attr, handle, user_data);
    875e:	4618      	mov	r0, r3
    8760:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8762:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8764:	4629      	mov	r1, r5
    8766:	4798      	blx	r3
	if (!*num_matches) {
    8768:	b10c      	cbz	r4, 876e <bt_gatt_foreach_attr_type+0xca>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    876a:	2800      	cmp	r0, #0
    876c:	d1de      	bne.n	872c <bt_gatt_foreach_attr_type+0x88>
}
    876e:	b003      	add	sp, #12
    8770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr_data && attr_data != attr->user_data) {
    8774:	68da      	ldr	r2, [r3, #12]
    8776:	4590      	cmp	r8, r2
    8778:	d1d8      	bne.n	872c <bt_gatt_foreach_attr_type+0x88>
    877a:	e7ee      	b.n	875a <bt_gatt_foreach_attr_type+0xb6>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    877c:	f04f 0a00 	mov.w	sl, #0
    8780:	e7d8      	b.n	8734 <bt_gatt_foreach_attr_type+0x90>
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    8782:	f8df 9074 	ldr.w	r9, [pc, #116]	; 87f8 <bt_gatt_foreach_attr_type+0x154>
		uint16_t handle = 1;
    8786:	2501      	movs	r5, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
    8788:	f04f 0b14 	mov.w	fp, #20
    878c:	e7c3      	b.n	8716 <bt_gatt_foreach_attr_type+0x72>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    878e:	2314      	movs	r3, #20
    8790:	6829      	ldr	r1, [r5, #0]
	if (handle > end_handle) {
    8792:	9800      	ldr	r0, [sp, #0]
			struct bt_gatt_attr *attr = &svc->attrs[i];
    8794:	fb03 f209 	mul.w	r2, r3, r9
    8798:	eb01 0a02 	add.w	sl, r1, r2
			if (gatt_foreach_iter(attr, attr->handle,
    879c:	f8ba 3010 	ldrh.w	r3, [sl, #16]
	if (handle > end_handle) {
    87a0:	4298      	cmp	r0, r3
    87a2:	d3e4      	bcc.n	876e <bt_gatt_foreach_attr_type+0xca>
	if (handle < start_handle) {
    87a4:	429e      	cmp	r6, r3
    87a6:	d816      	bhi.n	87d6 <bt_gatt_foreach_attr_type+0x132>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    87a8:	b96f      	cbnz	r7, 87c6 <bt_gatt_foreach_attr_type+0x122>
	if (attr_data && attr_data != attr->user_data) {
    87aa:	f1b8 0f00 	cmp.w	r8, #0
    87ae:	d115      	bne.n	87dc <bt_gatt_foreach_attr_type+0x138>
	*num_matches -= 1;
    87b0:	3c01      	subs	r4, #1
    87b2:	b2a4      	uxth	r4, r4
	result = func(attr, handle, user_data);
    87b4:	4619      	mov	r1, r3
    87b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    87b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    87ba:	4650      	mov	r0, sl
    87bc:	4798      	blx	r3
	if (!*num_matches) {
    87be:	2c00      	cmp	r4, #0
    87c0:	d0d5      	beq.n	876e <bt_gatt_foreach_attr_type+0xca>
			if (gatt_foreach_iter(attr, attr->handle,
    87c2:	b940      	cbnz	r0, 87d6 <bt_gatt_foreach_attr_type+0x132>
    87c4:	e7d3      	b.n	876e <bt_gatt_foreach_attr_type+0xca>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    87c6:	5889      	ldr	r1, [r1, r2]
    87c8:	9301      	str	r3, [sp, #4]
    87ca:	4638      	mov	r0, r7
    87cc:	f011 fc67 	bl	1a09e <bt_uuid_cmp>
    87d0:	9b01      	ldr	r3, [sp, #4]
    87d2:	2800      	cmp	r0, #0
    87d4:	d0e9      	beq.n	87aa <bt_gatt_foreach_attr_type+0x106>
		for (i = 0; i < svc->attr_count; i++) {
    87d6:	f109 0901 	add.w	r9, r9, #1
    87da:	e78c      	b.n	86f6 <bt_gatt_foreach_attr_type+0x52>
	if (attr_data && attr_data != attr->user_data) {
    87dc:	f8da 200c 	ldr.w	r2, [sl, #12]
    87e0:	4590      	cmp	r8, r2
    87e2:	d1f8      	bne.n	87d6 <bt_gatt_foreach_attr_type+0x132>
    87e4:	e7e4      	b.n	87b0 <bt_gatt_foreach_attr_type+0x10c>
    87e6:	4699      	mov	r9, r3
    87e8:	e785      	b.n	86f6 <bt_gatt_foreach_attr_type+0x52>
    87ea:	bf00      	nop
    87ec:	20002e42 	.word	0x20002e42
    87f0:	20001a94 	.word	0x20001a94
    87f4:	0001e2a4 	.word	0x0001e2a4
    87f8:	0001e294 	.word	0x0001e294

000087fc <db_hash_gen>:
{
    87fc:	b530      	push	{r4, r5, lr}
    87fe:	b0c9      	sub	sp, #292	; 0x124
	uint8_t key[16] = {};
    8800:	2300      	movs	r3, #0
{
    8802:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    8804:	aa1c      	add	r2, sp, #112	; 0x70
    8806:	4669      	mov	r1, sp
    8808:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
    880a:	e9cd 3300 	strd	r3, r3, [sp]
    880e:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    8812:	f011 f81e 	bl	19852 <tc_cmac_setup>
    8816:	b958      	cbnz	r0, 8830 <db_hash_gen+0x34>
    8818:	491a      	ldr	r1, [pc, #104]	; (8884 <db_hash_gen+0x88>)
    881a:	4b1b      	ldr	r3, [pc, #108]	; (8888 <db_hash_gen+0x8c>)
		BT_ERR("Unable to setup AES CMAC");
    881c:	481b      	ldr	r0, [pc, #108]	; (888c <db_hash_gen+0x90>)
    881e:	1ac9      	subs	r1, r1, r3
    8820:	08c9      	lsrs	r1, r1, #3
    8822:	0189      	lsls	r1, r1, #6
    8824:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to calculate hash");
    8828:	f010 fae3 	bl	18df2 <log_0>
}
    882c:	b049      	add	sp, #292	; 0x124
    882e:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    8830:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8834:	2001      	movs	r0, #1
    8836:	4a16      	ldr	r2, [pc, #88]	; (8890 <db_hash_gen+0x94>)
    8838:	ab04      	add	r3, sp, #16
    883a:	f012 fd8a 	bl	1b352 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
    883e:	4815      	ldr	r0, [pc, #84]	; (8894 <db_hash_gen+0x98>)
    8840:	a904      	add	r1, sp, #16
    8842:	f011 f89d 	bl	19980 <tc_cmac_final>
    8846:	b940      	cbnz	r0, 885a <db_hash_gen+0x5e>
    8848:	490e      	ldr	r1, [pc, #56]	; (8884 <db_hash_gen+0x88>)
    884a:	4b0f      	ldr	r3, [pc, #60]	; (8888 <db_hash_gen+0x8c>)
		BT_ERR("Unable to calculate hash");
    884c:	4812      	ldr	r0, [pc, #72]	; (8898 <db_hash_gen+0x9c>)
    884e:	1ac9      	subs	r1, r1, r3
    8850:	08c9      	lsrs	r1, r1, #3
    8852:	0189      	lsls	r1, r1, #6
    8854:	f041 0101 	orr.w	r1, r1, #1
    8858:	e7e6      	b.n	8828 <db_hash_gen+0x2c>
    885a:	4b0e      	ldr	r3, [pc, #56]	; (8894 <db_hash_gen+0x98>)
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
    885c:	2208      	movs	r2, #8
    885e:	f103 010f 	add.w	r1, r3, #15
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
    8862:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    8864:	780d      	ldrb	r5, [r1, #0]
    8866:	f803 5b01 	strb.w	r5, [r3], #1
	for (i = 0; i < (length/2); i++) {
    886a:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
    886c:	f801 0901 	strb.w	r0, [r1], #-1
	for (i = 0; i < (length/2); i++) {
    8870:	d1f7      	bne.n	8862 <db_hash_gen+0x66>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
    8872:	b10c      	cbz	r4, 8878 <db_hash_gen+0x7c>
		db_hash_store();
    8874:	f7ff f9f8 	bl	7c68 <db_hash_store>
    8878:	2104      	movs	r1, #4
    887a:	4808      	ldr	r0, [pc, #32]	; (889c <db_hash_gen+0xa0>)
    887c:	f012 fbe2 	bl	1b044 <atomic_or>
    8880:	e7d4      	b.n	882c <db_hash_gen+0x30>
    8882:	bf00      	nop
    8884:	0001e4f0 	.word	0x0001e4f0
    8888:	0001e408 	.word	0x0001e408
    888c:	00020294 	.word	0x00020294
    8890:	0001af99 	.word	0x0001af99
    8894:	20000fe8 	.word	0x20000fe8
    8898:	000202ad 	.word	0x000202ad
    889c:	200010b0 	.word	0x200010b0

000088a0 <db_hash_process>:
{
    88a0:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    88a2:	4817      	ldr	r0, [pc, #92]	; (8900 <db_hash_process+0x60>)
    88a4:	f06f 0108 	mvn.w	r1, #8
    88a8:	f012 fbec 	bl	1b084 <atomic_and>
	if (atomic_test_and_clear_bit(gatt_sc.flags, DB_HASH_LOAD)) {
    88ac:	0702      	lsls	r2, r0, #28
    88ae:	d522      	bpl.n	88f6 <db_hash_process+0x56>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    88b0:	4813      	ldr	r0, [pc, #76]	; (8900 <db_hash_process+0x60>)
    88b2:	f012 fb6b 	bl	1af8c <atomic_get>
    88b6:	4603      	mov	r3, r0
		if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
    88b8:	075b      	lsls	r3, r3, #29
    88ba:	f3c0 0080 	ubfx	r0, r0, #2, #1
    88be:	d401      	bmi.n	88c4 <db_hash_process+0x24>
			db_hash_gen(false);
    88c0:	f7ff ff9c 	bl	87fc <db_hash_gen>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
    88c4:	490f      	ldr	r1, [pc, #60]	; (8904 <db_hash_process+0x64>)
    88c6:	2210      	movs	r2, #16
    88c8:	1888      	adds	r0, r1, r2
    88ca:	f011 f95b 	bl	19b84 <memcmp>
    88ce:	b948      	cbnz	r0, 88e4 <db_hash_process+0x44>
			k_work_cancel_delayable(&gatt_sc.work);
    88d0:	480d      	ldr	r0, [pc, #52]	; (8908 <db_hash_process+0x68>)
    88d2:	f015 f984 	bl	1dbde <k_work_cancel_delayable>
}
    88d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    88da:	4809      	ldr	r0, [pc, #36]	; (8900 <db_hash_process+0x60>)
    88dc:	f06f 0101 	mvn.w	r1, #1
    88e0:	f012 bbd0 	b.w	1b084 <atomic_and>
		sc_indicate(0x0001, 0xffff);
    88e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    88e8:	2001      	movs	r0, #1
    88ea:	f7ff fe3d 	bl	8568 <sc_indicate>
}
    88ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		db_hash_store();
    88f2:	f7ff b9b9 	b.w	7c68 <db_hash_store>
}
    88f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	db_hash_gen(true);
    88fa:	2001      	movs	r0, #1
    88fc:	f7ff bf7e 	b.w	87fc <db_hash_gen>
    8900:	200010b0 	.word	0x200010b0
    8904:	20000fe8 	.word	0x20000fe8
    8908:	20001080 	.word	0x20001080

0000890c <bt_gatt_service_register>:
{
    890c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8910:	4b6a      	ldr	r3, [pc, #424]	; (8abc <bt_gatt_service_register+0x1b0>)
    8912:	f3bf 8f5b 	dmb	ish
    8916:	4605      	mov	r5, r0
    8918:	2201      	movs	r2, #1
    891a:	e853 1f00 	ldrex	r1, [r3]
    891e:	2900      	cmp	r1, #0
    8920:	d103      	bne.n	892a <bt_gatt_service_register+0x1e>
    8922:	e843 2000 	strex	r0, r2, [r3]
    8926:	2800      	cmp	r0, #0
    8928:	d1f7      	bne.n	891a <bt_gatt_service_register+0xe>
    892a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
    892e:	d101      	bne.n	8934 <bt_gatt_service_register+0x28>
    8930:	f7ff fa1c 	bl	7d6c <bt_gatt_service_init.part.0>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    8934:	682b      	ldr	r3, [r5, #0]
    8936:	2400      	movs	r4, #0
    8938:	6818      	ldr	r0, [r3, #0]
    893a:	f88d 4000 	strb.w	r4, [sp]
    893e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    8942:	4669      	mov	r1, sp
    8944:	f8ad 3002 	strh.w	r3, [sp, #2]
    8948:	f011 fba9 	bl	1a09e <bt_uuid_cmp>
    894c:	b928      	cbnz	r0, 895a <bt_gatt_service_register+0x4e>
		return -EALREADY;
    894e:	f06f 0477 	mvn.w	r4, #119	; 0x77
}
    8952:	4620      	mov	r0, r4
    8954:	b003      	add	sp, #12
    8956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
    895a:	682b      	ldr	r3, [r5, #0]
    895c:	a901      	add	r1, sp, #4
    895e:	6818      	ldr	r0, [r3, #0]
    8960:	f88d 4004 	strb.w	r4, [sp, #4]
    8964:	f641 0301 	movw	r3, #6145	; 0x1801
    8968:	f8ad 3006 	strh.w	r3, [sp, #6]
    896c:	f011 fb97 	bl	1a09e <bt_uuid_cmp>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    8970:	2800      	cmp	r0, #0
    8972:	d0ec      	beq.n	894e <bt_gatt_service_register+0x42>
Z_GENLIST_IS_EMPTY(slist)
    8974:	4c52      	ldr	r4, [pc, #328]	; (8ac0 <bt_gatt_service_register+0x1b4>)
	k_sched_lock();
    8976:	f00e ff9d 	bl	178b4 <k_sched_lock>
	if (sys_slist_is_empty(&db)) {
    897a:	6826      	ldr	r6, [r4, #0]
	struct bt_gatt_attr *attrs = svc->attrs;
    897c:	f8d5 8000 	ldr.w	r8, [r5]
	uint16_t count = svc->attr_count;
    8980:	f8b5 9004 	ldrh.w	r9, [r5, #4]
	if (sys_slist_is_empty(&db)) {
    8984:	b936      	cbnz	r6, 8994 <bt_gatt_service_register+0x88>
		handle = last_static_handle;
    8986:	4b4f      	ldr	r3, [pc, #316]	; (8ac4 <bt_gatt_service_register+0x1b8>)
    8988:	881f      	ldrh	r7, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, found_attr, &attr);
    898a:	f8df b14c 	ldr.w	fp, [pc, #332]	; 8ad8 <bt_gatt_service_register+0x1cc>
	const struct bt_gatt_attr *attr = NULL;
    898e:	f04f 0a00 	mov.w	sl, #0
    8992:	e01a      	b.n	89ca <bt_gatt_service_register+0xbe>
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    8994:	6863      	ldr	r3, [r4, #4]
    8996:	2b00      	cmp	r3, #0
    8998:	f000 808d 	beq.w	8ab6 <bt_gatt_service_register+0x1aa>
	handle = last->attrs[last->attr_count - 1].handle;
    899c:	e953 3202 	ldrd	r3, r2, [r3, #-8]
    89a0:	2114      	movs	r1, #20
    89a2:	fb01 3302 	mla	r3, r1, r2, r3
    89a6:	f833 7c04 	ldrh.w	r7, [r3, #-4]
    89aa:	463e      	mov	r6, r7
    89ac:	e7ed      	b.n	898a <bt_gatt_service_register+0x7e>
		if (!attrs->handle) {
    89ae:	f8b8 1010 	ldrh.w	r1, [r8, #16]
    89b2:	bb39      	cbnz	r1, 8a04 <bt_gatt_service_register+0xf8>
			attrs->handle = ++handle;
    89b4:	1c79      	adds	r1, r7, #1
    89b6:	b289      	uxth	r1, r1
    89b8:	f8a8 1010 	strh.w	r1, [r8, #16]
	for (; attrs && count; attrs++, count--) {
    89bc:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    89c0:	f108 0814 	add.w	r8, r8, #20
    89c4:	fa1f f989 	uxth.w	r9, r9
    89c8:	460f      	mov	r7, r1
    89ca:	f1b8 0f00 	cmp.w	r8, #0
    89ce:	d002      	beq.n	89d6 <bt_gatt_service_register+0xca>
    89d0:	f1b9 0f00 	cmp.w	r9, #0
    89d4:	d1eb      	bne.n	89ae <bt_gatt_service_register+0xa2>
	if (last_handle == 0 || svc->attrs[0].handle > last_handle) {
    89d6:	b11e      	cbz	r6, 89e0 <bt_gatt_service_register+0xd4>
    89d8:	682b      	ldr	r3, [r5, #0]
    89da:	8a18      	ldrh	r0, [r3, #16]
    89dc:	4286      	cmp	r6, r0
    89de:	d22f      	bcs.n	8a40 <bt_gatt_service_register+0x134>
	parent->next = child;
    89e0:	2200      	movs	r2, #0
		sys_slist_append(&db, &svc->node);
    89e2:	f105 0308 	add.w	r3, r5, #8
    89e6:	60aa      	str	r2, [r5, #8]
Z_GENLIST_APPEND(slist, snode)
    89e8:	6862      	ldr	r2, [r4, #4]
    89ea:	2a00      	cmp	r2, #0
    89ec:	d146      	bne.n	8a7c <bt_gatt_service_register+0x170>
	list->head = node;
    89ee:	e9c4 3300 	strd	r3, r3, [r4]
	if (!atomic_get(&init)) {
    89f2:	4835      	ldr	r0, [pc, #212]	; (8ac8 <bt_gatt_service_register+0x1bc>)
    89f4:	f012 faca 	bl	1af8c <atomic_get>
    89f8:	4604      	mov	r4, r0
    89fa:	2800      	cmp	r0, #0
    89fc:	d14b      	bne.n	8a96 <bt_gatt_service_register+0x18a>
		k_sched_unlock();
    89fe:	f00f f84b 	bl	17a98 <k_sched_unlock>
		return 0;
    8a02:	e7a6      	b.n	8952 <bt_gatt_service_register+0x46>
		} else if (attrs->handle > handle) {
    8a04:	42b9      	cmp	r1, r7
    8a06:	d8d9      	bhi.n	89bc <bt_gatt_service_register+0xb0>
	bt_gatt_foreach_attr(handle, handle, found_attr, &attr);
    8a08:	ab01      	add	r3, sp, #4
    8a0a:	465a      	mov	r2, fp
    8a0c:	4608      	mov	r0, r1
	const struct bt_gatt_attr *attr = NULL;
    8a0e:	f8cd a004 	str.w	sl, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, found_attr, &attr);
    8a12:	f012 fc9e 	bl	1b352 <bt_gatt_foreach_attr>
	return attr;
    8a16:	9b01      	ldr	r3, [sp, #4]
		} else if (find_attr(attrs->handle)) {
    8a18:	b183      	cbz	r3, 8a3c <bt_gatt_service_register+0x130>
    8a1a:	4b2c      	ldr	r3, [pc, #176]	; (8acc <bt_gatt_service_register+0x1c0>)
    8a1c:	4a2c      	ldr	r2, [pc, #176]	; (8ad0 <bt_gatt_service_register+0x1c4>)
			BT_ERR("Unable to register handle 0x%04x",
    8a1e:	f8b8 1010 	ldrh.w	r1, [r8, #16]
    8a22:	482c      	ldr	r0, [pc, #176]	; (8ad4 <bt_gatt_service_register+0x1c8>)
    8a24:	1ad2      	subs	r2, r2, r3
    8a26:	08d2      	lsrs	r2, r2, #3
    8a28:	0192      	lsls	r2, r2, #6
    8a2a:	f042 0201 	orr.w	r2, r2, #1
    8a2e:	f010 f9ed 	bl	18e0c <log_1>
		return err;
    8a32:	f06f 0415 	mvn.w	r4, #21
		k_sched_unlock();
    8a36:	f00f f82f 	bl	17a98 <k_sched_unlock>
		return err;
    8a3a:	e78a      	b.n	8952 <bt_gatt_service_register+0x46>
    8a3c:	4639      	mov	r1, r7
    8a3e:	e7bd      	b.n	89bc <bt_gatt_service_register+0xb0>
	SYS_SLIST_FOR_EACH_CONTAINER(&db, tmp, node) {
    8a40:	6821      	ldr	r1, [r4, #0]
    8a42:	2900      	cmp	r1, #0
    8a44:	d0d5      	beq.n	89f2 <bt_gatt_service_register+0xe6>
    8a46:	f1a1 0308 	sub.w	r3, r1, #8
    8a4a:	2200      	movs	r2, #0
    8a4c:	2b00      	cmp	r3, #0
    8a4e:	d0d0      	beq.n	89f2 <bt_gatt_service_register+0xe6>
		if (tmp->attrs[0].handle > svc->attrs[0].handle) {
    8a50:	681e      	ldr	r6, [r3, #0]
    8a52:	8a36      	ldrh	r6, [r6, #16]
    8a54:	4286      	cmp	r6, r0
    8a56:	d914      	bls.n	8a82 <bt_gatt_service_register+0x176>
			if (prev) {
    8a58:	f105 0308 	add.w	r3, r5, #8
    8a5c:	b112      	cbz	r2, 8a64 <bt_gatt_service_register+0x158>
Z_GENLIST_INSERT(slist, snode)
    8a5e:	f112 0f08 	cmn.w	r2, #8
    8a62:	d105      	bne.n	8a70 <bt_gatt_service_register+0x164>
Z_GENLIST_PREPEND(slist, snode)
    8a64:	6862      	ldr	r2, [r4, #4]
	parent->next = child;
    8a66:	60a9      	str	r1, [r5, #8]
	list->head = node;
    8a68:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    8a6a:	2a00      	cmp	r2, #0
    8a6c:	d1c1      	bne.n	89f2 <bt_gatt_service_register+0xe6>
    8a6e:	e006      	b.n	8a7e <bt_gatt_service_register+0x172>
Z_GENLIST_INSERT(slist, snode)
    8a70:	6891      	ldr	r1, [r2, #8]
	parent->next = child;
    8a72:	60a9      	str	r1, [r5, #8]
Z_GENLIST_INSERT(slist, snode)
    8a74:	2900      	cmp	r1, #0
    8a76:	d0b7      	beq.n	89e8 <bt_gatt_service_register+0xdc>
	parent->next = child;
    8a78:	6093      	str	r3, [r2, #8]
	if (err < 0) {
    8a7a:	e7ba      	b.n	89f2 <bt_gatt_service_register+0xe6>
    8a7c:	6013      	str	r3, [r2, #0]
	list->tail = node;
    8a7e:	6063      	str	r3, [r4, #4]
    8a80:	e7b7      	b.n	89f2 <bt_gatt_service_register+0xe6>
Z_GENLIST_PEEK_NEXT(slist, snode)
    8a82:	f113 0f08 	cmn.w	r3, #8
    8a86:	d0b4      	beq.n	89f2 <bt_gatt_service_register+0xe6>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    8a88:	689e      	ldr	r6, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, tmp, node) {
    8a8a:	2e00      	cmp	r6, #0
    8a8c:	d0b1      	beq.n	89f2 <bt_gatt_service_register+0xe6>
    8a8e:	461a      	mov	r2, r3
    8a90:	f1a6 0308 	sub.w	r3, r6, #8
    8a94:	e7da      	b.n	8a4c <bt_gatt_service_register+0x140>
		    svc->attrs[svc->attr_count - 1].handle);
    8a96:	e9d5 2300 	ldrd	r2, r3, [r5]
	sc_indicate(svc->attrs[0].handle,
    8a9a:	2114      	movs	r1, #20
    8a9c:	fb01 2303 	mla	r3, r1, r3, r2
    8aa0:	8a10      	ldrh	r0, [r2, #16]
    8aa2:	f833 1c04 	ldrh.w	r1, [r3, #-4]
    8aa6:	f7ff fd5f 	bl	8568 <sc_indicate>
	return 0;
    8aaa:	2400      	movs	r4, #0
	db_changed();
    8aac:	f7ff fc44 	bl	8338 <db_changed>
	k_sched_unlock();
    8ab0:	f00e fff2 	bl	17a98 <k_sched_unlock>
	return 0;
    8ab4:	e74d      	b.n	8952 <bt_gatt_service_register+0x46>
	handle = last->attrs[last->attr_count - 1].handle;
    8ab6:	681b      	ldr	r3, [r3, #0]
    8ab8:	deff      	udf	#255	; 0xff
    8aba:	bf00      	nop
    8abc:	20001ab8 	.word	0x20001ab8
    8ac0:	20001a94 	.word	0x20001a94
    8ac4:	20002e42 	.word	0x20002e42
    8ac8:	20001a9c 	.word	0x20001a9c
    8acc:	0001e408 	.word	0x0001e408
    8ad0:	0001e4f0 	.word	0x0001e4f0
    8ad4:	000202c6 	.word	0x000202c6
    8ad8:	0001af41 	.word	0x0001af41

00008adc <ccc_set_direct>:
{
    8adc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8ae0:	b0b9      	sub	sp, #228	; 0xe4
    8ae2:	4688      	mov	r8, r1
    8ae4:	4614      	mov	r4, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
    8ae6:	4939      	ldr	r1, [pc, #228]	; (8bcc <ccc_set_direct+0xf0>)
    8ae8:	9840      	ldr	r0, [sp, #256]	; 0x100
    8aea:	466a      	mov	r2, sp
{
    8aec:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
    8aee:	f010 fcd7 	bl	194a0 <settings_name_steq>
    8af2:	b978      	cbnz	r0, 8b14 <ccc_set_direct+0x38>
    8af4:	4b36      	ldr	r3, [pc, #216]	; (8bd0 <ccc_set_direct+0xf4>)
    8af6:	4937      	ldr	r1, [pc, #220]	; (8bd4 <ccc_set_direct+0xf8>)
			BT_ERR("Invalid key");
    8af8:	4837      	ldr	r0, [pc, #220]	; (8bd8 <ccc_set_direct+0xfc>)
    8afa:	1ac9      	subs	r1, r1, r3
    8afc:	08c9      	lsrs	r1, r1, #3
    8afe:	0189      	lsls	r1, r1, #6
    8b00:	f041 0101 	orr.w	r1, r1, #1
    8b04:	f010 f975 	bl	18df2 <log_0>
			return -EINVAL;
    8b08:	f06f 0515 	mvn.w	r5, #21
}
    8b0c:	4628      	mov	r0, r5
    8b0e:	b039      	add	sp, #228	; 0xe4
    8b10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
    8b14:	9e00      	ldr	r6, [sp, #0]
		settings_name_next(name, &next);
    8b16:	a901      	add	r1, sp, #4
    8b18:	4630      	mov	r0, r6
    8b1a:	f010 fce4 	bl	194e6 <settings_name_next>
		if (!name) {
    8b1e:	b96e      	cbnz	r6, 8b3c <ccc_set_direct+0x60>
    8b20:	492c      	ldr	r1, [pc, #176]	; (8bd4 <ccc_set_direct+0xf8>)
    8b22:	4b2b      	ldr	r3, [pc, #172]	; (8bd0 <ccc_set_direct+0xf4>)
			BT_ERR("Insufficient number of arguments");
    8b24:	482d      	ldr	r0, [pc, #180]	; (8bdc <ccc_set_direct+0x100>)
    8b26:	1ac9      	subs	r1, r1, r3
    8b28:	08c9      	lsrs	r1, r1, #3
    8b2a:	0189      	lsls	r1, r1, #6
    8b2c:	f041 0101 	orr.w	r1, r1, #1
    8b30:	f010 f95f 	bl	18df2 <log_0>
			return -EINVAL;
    8b34:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
    8b38:	4625      	mov	r5, r4
    8b3a:	e7e7      	b.n	8b0c <ccc_set_direct+0x30>
		} else if (!next) {
    8b3c:	9801      	ldr	r0, [sp, #4]
    8b3e:	b9c8      	cbnz	r0, 8b74 <ccc_set_direct+0x98>
		err = bt_settings_decode_key(name, &addr);
    8b40:	f10d 0908 	add.w	r9, sp, #8
			load.addr_with_id.id = strtol(next, NULL, 10);
    8b44:	f88d 0014 	strb.w	r0, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
    8b48:	4649      	mov	r1, r9
    8b4a:	4630      	mov	r0, r6
    8b4c:	f011 f8d6 	bl	19cfc <bt_settings_decode_key>
		if (err) {
    8b50:	4605      	mov	r5, r0
    8b52:	b1a0      	cbz	r0, 8b7e <ccc_set_direct+0xa2>
    8b54:	4a1e      	ldr	r2, [pc, #120]	; (8bd0 <ccc_set_direct+0xf4>)
    8b56:	4c1f      	ldr	r4, [pc, #124]	; (8bd4 <ccc_set_direct+0xf8>)
    8b58:	4630      	mov	r0, r6
    8b5a:	1aa4      	subs	r4, r4, r2
    8b5c:	08e4      	lsrs	r4, r4, #3
    8b5e:	f7f9 fbc1 	bl	22e4 <z_log_strdup>
			BT_ERR("Unable to decode address %s", log_strdup(name));
    8b62:	01a4      	lsls	r4, r4, #6
    8b64:	f044 0401 	orr.w	r4, r4, #1
    8b68:	4601      	mov	r1, r0
    8b6a:	4622      	mov	r2, r4
    8b6c:	481c      	ldr	r0, [pc, #112]	; (8be0 <ccc_set_direct+0x104>)
    8b6e:	f010 f94d 	bl	18e0c <log_1>
    8b72:	e7df      	b.n	8b34 <ccc_set_direct+0x58>
			load.addr_with_id.id = strtol(next, NULL, 10);
    8b74:	220a      	movs	r2, #10
    8b76:	2100      	movs	r1, #0
    8b78:	f010 ff46 	bl	19a08 <strtol>
    8b7c:	e7e0      	b.n	8b40 <ccc_set_direct+0x64>
		load.addr_with_id.addr = &addr;
    8b7e:	f8cd 9010 	str.w	r9, [sp, #16]
		if (len_rd) {
    8b82:	f1b8 0f00 	cmp.w	r8, #0
    8b86:	d01d      	beq.n	8bc4 <ccc_set_direct+0xe8>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
    8b88:	ae08      	add	r6, sp, #32
    8b8a:	22c0      	movs	r2, #192	; 0xc0
    8b8c:	4631      	mov	r1, r6
    8b8e:	4638      	mov	r0, r7
    8b90:	47a0      	blx	r4
			if (len < 0) {
    8b92:	1e04      	subs	r4, r0, #0
    8b94:	da0b      	bge.n	8bae <ccc_set_direct+0xd2>
    8b96:	4b0e      	ldr	r3, [pc, #56]	; (8bd0 <ccc_set_direct+0xf4>)
    8b98:	4a0e      	ldr	r2, [pc, #56]	; (8bd4 <ccc_set_direct+0xf8>)
				BT_ERR("Failed to decode value (err %zd)", len);
    8b9a:	4812      	ldr	r0, [pc, #72]	; (8be4 <ccc_set_direct+0x108>)
    8b9c:	1ad2      	subs	r2, r2, r3
    8b9e:	08d2      	lsrs	r2, r2, #3
    8ba0:	0192      	lsls	r2, r2, #6
    8ba2:	f042 0201 	orr.w	r2, r2, #1
    8ba6:	4621      	mov	r1, r4
    8ba8:	f010 f930 	bl	18e0c <log_1>
				return len;
    8bac:	e7c4      	b.n	8b38 <ccc_set_direct+0x5c>
			load.count = len / sizeof(*ccc_store);
    8bae:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
    8bb0:	9606      	str	r6, [sp, #24]
			load.count = len / sizeof(*ccc_store);
    8bb2:	9407      	str	r4, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
    8bb4:	4a0c      	ldr	r2, [pc, #48]	; (8be8 <ccc_set_direct+0x10c>)
    8bb6:	ab04      	add	r3, sp, #16
    8bb8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8bbc:	2001      	movs	r0, #1
    8bbe:	f012 fbc8 	bl	1b352 <bt_gatt_foreach_attr>
	return 0;
    8bc2:	e7a3      	b.n	8b0c <ccc_set_direct+0x30>
			load.count = 0;
    8bc4:	e9cd 0006 	strd	r0, r0, [sp, #24]
    8bc8:	e7f4      	b.n	8bb4 <ccc_set_direct+0xd8>
    8bca:	bf00      	nop
    8bcc:	000202e7 	.word	0x000202e7
    8bd0:	0001e408 	.word	0x0001e408
    8bd4:	0001e4f0 	.word	0x0001e4f0
    8bd8:	000202ee 	.word	0x000202ee
    8bdc:	0001f368 	.word	0x0001f368
    8be0:	000201bb 	.word	0x000201bb
    8be4:	0002015f 	.word	0x0002015f
    8be8:	00007dd5 	.word	0x00007dd5

00008bec <gatt_indicate>:
{
    8bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8bf0:	4615      	mov	r5, r2
    8bf2:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
    8bf4:	2214      	movs	r2, #20
    8bf6:	6869      	ldr	r1, [r5, #4]
{
    8bf8:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
    8bfa:	f012 fbb7 	bl	1b36c <bt_gatt_check_perm>
    8bfe:	b170      	cbz	r0, 8c1e <gatt_indicate+0x32>
    8c00:	4b28      	ldr	r3, [pc, #160]	; (8ca4 <gatt_indicate+0xb8>)
    8c02:	4929      	ldr	r1, [pc, #164]	; (8ca8 <gatt_indicate+0xbc>)
		BT_WARN("Link is not encrypted");
    8c04:	4829      	ldr	r0, [pc, #164]	; (8cac <gatt_indicate+0xc0>)
    8c06:	1ac9      	subs	r1, r1, r3
    8c08:	08c9      	lsrs	r1, r1, #3
    8c0a:	0189      	lsls	r1, r1, #6
    8c0c:	f041 0102 	orr.w	r1, r1, #2
    8c10:	f010 f8ef 	bl	18df2 <log_0>
		return -EPERM;
    8c14:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
}
    8c18:	4628      	mov	r0, r5
    8c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    8c1e:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    8c22:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
    8c24:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    8c26:	f7fe ff31 	bl	7a8c <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
    8c2a:	3602      	adds	r6, #2
	if (!req) {
    8c2c:	4604      	mov	r4, r0
    8c2e:	b910      	cbnz	r0, 8c36 <gatt_indicate+0x4a>
		return -ENOMEM;
    8c30:	f06f 050b 	mvn.w	r5, #11
    8c34:	e7f0      	b.n	8c18 <gatt_indicate+0x2c>
	req->func = func;
    8c36:	4b1e      	ldr	r3, [pc, #120]	; (8cb0 <gatt_indicate+0xc4>)
    8c38:	6043      	str	r3, [r0, #4]
	req->user_data = params;
    8c3a:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
    8c3c:	4632      	mov	r2, r6
    8c3e:	211d      	movs	r1, #29
    8c40:	4640      	mov	r0, r8
    8c42:	f7fe fc6f 	bl	7524 <bt_att_create_pdu>
	if (!buf) {
    8c46:	4606      	mov	r6, r0
    8c48:	b968      	cbnz	r0, 8c66 <gatt_indicate+0x7a>
    8c4a:	4b16      	ldr	r3, [pc, #88]	; (8ca4 <gatt_indicate+0xb8>)
    8c4c:	4916      	ldr	r1, [pc, #88]	; (8ca8 <gatt_indicate+0xbc>)
		BT_WARN("No buffer available to send indication");
    8c4e:	4819      	ldr	r0, [pc, #100]	; (8cb4 <gatt_indicate+0xc8>)
    8c50:	1ac9      	subs	r1, r1, r3
    8c52:	08c9      	lsrs	r1, r1, #3
    8c54:	0189      	lsls	r1, r1, #6
    8c56:	f041 0102 	orr.w	r1, r1, #2
    8c5a:	f010 f8ca 	bl	18df2 <log_0>
		bt_att_req_free(req);
    8c5e:	4620      	mov	r0, r4
    8c60:	f7fe ff2a 	bl	7ab8 <bt_att_req_free>
    8c64:	e7e4      	b.n	8c30 <gatt_indicate+0x44>
	return net_buf_simple_add(&buf->b, len);
    8c66:	f100 0a08 	add.w	sl, r0, #8
    8c6a:	2102      	movs	r1, #2
    8c6c:	4650      	mov	r0, sl
    8c6e:	f014 fb26 	bl	1d2be <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    8c72:	4607      	mov	r7, r0
    8c74:	8aa9      	ldrh	r1, [r5, #20]
    8c76:	f827 9b02 	strh.w	r9, [r7], #2
    8c7a:	4650      	mov	r0, sl
    8c7c:	f014 fb1f 	bl	1d2be <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    8c80:	8aaa      	ldrh	r2, [r5, #20]
    8c82:	6929      	ldr	r1, [r5, #16]
    8c84:	4638      	mov	r0, r7
    8c86:	f010 ff8d 	bl	19ba4 <memcpy>
	req->buf = buf;
    8c8a:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
    8c8c:	4621      	mov	r1, r4
    8c8e:	4640      	mov	r0, r8
    8c90:	f012 f941 	bl	1af16 <bt_att_req_send>
	if (err) {
    8c94:	4605      	mov	r5, r0
    8c96:	2800      	cmp	r0, #0
    8c98:	d0be      	beq.n	8c18 <gatt_indicate+0x2c>
		bt_att_req_free(req);
    8c9a:	4620      	mov	r0, r4
    8c9c:	f7fe ff0c 	bl	7ab8 <bt_att_req_free>
    8ca0:	e7ba      	b.n	8c18 <gatt_indicate+0x2c>
    8ca2:	bf00      	nop
    8ca4:	0001e408 	.word	0x0001e408
    8ca8:	0001e4f0 	.word	0x0001e4f0
    8cac:	000202fa 	.word	0x000202fa
    8cb0:	0001af5b 	.word	0x0001af5b
    8cb4:	00020310 	.word	0x00020310

00008cb8 <bt_gatt_indicate>:
{
    8cb8:	b530      	push	{r4, r5, lr}
    8cba:	4604      	mov	r4, r0
    8cbc:	b08b      	sub	sp, #44	; 0x2c
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8cbe:	4837      	ldr	r0, [pc, #220]	; (8d9c <bt_gatt_indicate+0xe4>)
    8cc0:	460d      	mov	r5, r1
    8cc2:	f012 f963 	bl	1af8c <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    8cc6:	0782      	lsls	r2, r0, #30
    8cc8:	d561      	bpl.n	8d8e <bt_gatt_indicate+0xd6>
	data.attr = params->attr;
    8cca:	6848      	ldr	r0, [r1, #4]
    8ccc:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    8cce:	b114      	cbz	r4, 8cd6 <bt_gatt_indicate+0x1e>
    8cd0:	7aa3      	ldrb	r3, [r4, #10]
    8cd2:	2b07      	cmp	r3, #7
    8cd4:	d15e      	bne.n	8d94 <bt_gatt_indicate+0xdc>
	data.handle = bt_gatt_attr_get_handle(data.attr);
    8cd6:	f7ff fcb5 	bl	8644 <bt_gatt_attr_get_handle>
    8cda:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
    8cde:	b918      	cbnz	r0, 8ce8 <bt_gatt_indicate+0x30>
		return -ENOENT;
    8ce0:	f06f 0001 	mvn.w	r0, #1
}
    8ce4:	b00b      	add	sp, #44	; 0x2c
    8ce6:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
    8ce8:	682a      	ldr	r2, [r5, #0]
    8cea:	b9ba      	cbnz	r2, 8d1c <bt_gatt_indicate+0x64>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    8cec:	9b05      	ldr	r3, [sp, #20]
    8cee:	6818      	ldr	r0, [r3, #0]
    8cf0:	2300      	movs	r3, #0
    8cf2:	f88d 3010 	strb.w	r3, [sp, #16]
    8cf6:	a904      	add	r1, sp, #16
    8cf8:	f642 0303 	movw	r3, #10243	; 0x2803
    8cfc:	f8ad 3012 	strh.w	r3, [sp, #18]
    8d00:	f011 f9cd 	bl	1a09e <bt_uuid_cmp>
    8d04:	b1d0      	cbz	r0, 8d3c <bt_gatt_indicate+0x84>
	if (conn) {
    8d06:	f8bd 0018 	ldrh.w	r0, [sp, #24]
    8d0a:	b324      	cbz	r4, 8d56 <bt_gatt_indicate+0x9e>
		params->_ref = 1;
    8d0c:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
    8d0e:	4601      	mov	r1, r0
		params->_ref = 1;
    8d10:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
    8d12:	462a      	mov	r2, r5
    8d14:	4620      	mov	r0, r4
    8d16:	f7ff ff69 	bl	8bec <gatt_indicate>
    8d1a:	e7e3      	b.n	8ce4 <bt_gatt_indicate+0x2c>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    8d1c:	a905      	add	r1, sp, #20
    8d1e:	9102      	str	r1, [sp, #8]
    8d20:	491f      	ldr	r1, [pc, #124]	; (8da0 <bt_gatt_indicate+0xe8>)
    8d22:	9101      	str	r1, [sp, #4]
    8d24:	2101      	movs	r1, #1
	found->attr = NULL;
    8d26:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    8d28:	9100      	str	r1, [sp, #0]
    8d2a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    8d2e:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    8d30:	f7ff fcb8 	bl	86a4 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    8d34:	9b05      	ldr	r3, [sp, #20]
    8d36:	2b00      	cmp	r3, #0
    8d38:	d1d8      	bne.n	8cec <bt_gatt_indicate+0x34>
    8d3a:	e7d1      	b.n	8ce0 <bt_gatt_indicate+0x28>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    8d3c:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    8d3e:	68c3      	ldr	r3, [r0, #12]
    8d40:	799b      	ldrb	r3, [r3, #6]
    8d42:	069b      	lsls	r3, r3, #26
    8d44:	d402      	bmi.n	8d4c <bt_gatt_indicate+0x94>
			return -EINVAL;
    8d46:	f06f 0015 	mvn.w	r0, #21
    8d4a:	e7cb      	b.n	8ce4 <bt_gatt_indicate+0x2c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    8d4c:	f012 fab3 	bl	1b2b6 <bt_gatt_attr_value_handle>
    8d50:	f8ad 0018 	strh.w	r0, [sp, #24]
    8d54:	e7d7      	b.n	8d06 <bt_gatt_indicate+0x4e>
	data.err = -ENOTCONN;
    8d56:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    8d5a:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    8d5c:	2302      	movs	r3, #2
    8d5e:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    8d62:	f642 1302 	movw	r3, #10498	; 0x2902
    8d66:	f8ad 3012 	strh.w	r3, [sp, #18]
    8d6a:	ab05      	add	r3, sp, #20
    8d6c:	9302      	str	r3, [sp, #8]
    8d6e:	4b0d      	ldr	r3, [pc, #52]	; (8da4 <bt_gatt_indicate+0xec>)
    8d70:	9301      	str	r3, [sp, #4]
    8d72:	2301      	movs	r3, #1
    8d74:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
    8d76:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    8d78:	4623      	mov	r3, r4
    8d7a:	aa04      	add	r2, sp, #16
    8d7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    8d80:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    8d82:	f88d 4010 	strb.w	r4, [sp, #16]
    8d86:	f7ff fc8d 	bl	86a4 <bt_gatt_foreach_attr_type>
	return data.err;
    8d8a:	9807      	ldr	r0, [sp, #28]
    8d8c:	e7aa      	b.n	8ce4 <bt_gatt_indicate+0x2c>
		return -EAGAIN;
    8d8e:	f06f 000a 	mvn.w	r0, #10
    8d92:	e7a7      	b.n	8ce4 <bt_gatt_indicate+0x2c>
		return -ENOTCONN;
    8d94:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    8d98:	e7a4      	b.n	8ce4 <bt_gatt_indicate+0x2c>
    8d9a:	bf00      	nop
    8d9c:	20000098 	.word	0x20000098
    8da0:	0001af81 	.word	0x0001af81
    8da4:	00008f8d 	.word	0x00008f8d

00008da8 <sc_process>:
{
    8da8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    8daa:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
    8dae:	4604      	mov	r4, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
    8db0:	f850 3c08 	ldr.w	r3, [r0, #-8]
    8db4:	9301      	str	r3, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    8db6:	f1a0 0620 	sub.w	r6, r0, #32
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    8dba:	f06f 0101 	mvn.w	r1, #1
    8dbe:	4628      	mov	r0, r5
    8dc0:	f012 f960 	bl	1b084 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
    8dc4:	4b0d      	ldr	r3, [pc, #52]	; (8dfc <sc_process+0x54>)
    8dc6:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
    8dca:	4b0d      	ldr	r3, [pc, #52]	; (8e00 <sc_process+0x58>)
    8dcc:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
    8dd0:	ab01      	add	r3, sp, #4
	sc->start = 0U;
    8dd2:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
    8dd4:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
    8dd8:	2304      	movs	r3, #4
	sc->start = 0U;
    8dda:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
    8dde:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
    8de2:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    8de6:	4631      	mov	r1, r6
    8de8:	f7ff ff66 	bl	8cb8 <bt_gatt_indicate>
    8dec:	b918      	cbnz	r0, 8df6 <sc_process+0x4e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    8dee:	2102      	movs	r1, #2
    8df0:	4628      	mov	r0, r5
    8df2:	f012 f927 	bl	1b044 <atomic_or>
}
    8df6:	b002      	add	sp, #8
    8df8:	bd70      	pop	{r4, r5, r6, pc}
    8dfa:	bf00      	nop
    8dfc:	0001ea00 	.word	0x0001ea00
    8e00:	000083cd 	.word	0x000083cd

00008e04 <gatt_notify>:
{
    8e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8e08:	4614      	mov	r4, r2
    8e0a:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
    8e0c:	2214      	movs	r2, #20
    8e0e:	6861      	ldr	r1, [r4, #4]
{
    8e10:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
    8e12:	f012 faab 	bl	1b36c <bt_gatt_check_perm>
    8e16:	b168      	cbz	r0, 8e34 <gatt_notify+0x30>
    8e18:	4b1e      	ldr	r3, [pc, #120]	; (8e94 <gatt_notify+0x90>)
    8e1a:	491f      	ldr	r1, [pc, #124]	; (8e98 <gatt_notify+0x94>)
		BT_WARN("Link is not encrypted");
    8e1c:	481f      	ldr	r0, [pc, #124]	; (8e9c <gatt_notify+0x98>)
    8e1e:	1ac9      	subs	r1, r1, r3
    8e20:	08c9      	lsrs	r1, r1, #3
    8e22:	0189      	lsls	r1, r1, #6
    8e24:	f041 0102 	orr.w	r1, r1, #2
    8e28:	f00f ffe3 	bl	18df2 <log_0>
		return -EPERM;
    8e2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    8e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				sizeof(*nfy) + params->len);
    8e34:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    8e36:	211b      	movs	r1, #27
    8e38:	3202      	adds	r2, #2
    8e3a:	4638      	mov	r0, r7
    8e3c:	f7fe fb72 	bl	7524 <bt_att_create_pdu>
	if (!buf) {
    8e40:	4605      	mov	r5, r0
    8e42:	b960      	cbnz	r0, 8e5e <gatt_notify+0x5a>
    8e44:	4b13      	ldr	r3, [pc, #76]	; (8e94 <gatt_notify+0x90>)
    8e46:	4914      	ldr	r1, [pc, #80]	; (8e98 <gatt_notify+0x94>)
		BT_WARN("No buffer available to send notification");
    8e48:	4815      	ldr	r0, [pc, #84]	; (8ea0 <gatt_notify+0x9c>)
    8e4a:	1ac9      	subs	r1, r1, r3
    8e4c:	08c9      	lsrs	r1, r1, #3
    8e4e:	0189      	lsls	r1, r1, #6
    8e50:	f041 0102 	orr.w	r1, r1, #2
    8e54:	f00f ffcd 	bl	18df2 <log_0>
		return -ENOMEM;
    8e58:	f06f 000b 	mvn.w	r0, #11
    8e5c:	e7e8      	b.n	8e30 <gatt_notify+0x2c>
    8e5e:	f100 0908 	add.w	r9, r0, #8
    8e62:	2102      	movs	r1, #2
    8e64:	4648      	mov	r0, r9
    8e66:	f014 fa2a 	bl	1d2be <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    8e6a:	4606      	mov	r6, r0
    8e6c:	89a1      	ldrh	r1, [r4, #12]
    8e6e:	f826 8b02 	strh.w	r8, [r6], #2
    8e72:	4648      	mov	r0, r9
    8e74:	f014 fa23 	bl	1d2be <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
    8e78:	89a2      	ldrh	r2, [r4, #12]
    8e7a:	68a1      	ldr	r1, [r4, #8]
    8e7c:	4630      	mov	r0, r6
    8e7e:	f010 fe91 	bl	19ba4 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
    8e82:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    8e86:	4629      	mov	r1, r5
    8e88:	4638      	mov	r0, r7
}
    8e8a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
    8e8e:	f011 bff7 	b.w	1ae80 <bt_att_send>
    8e92:	bf00      	nop
    8e94:	0001e408 	.word	0x0001e408
    8e98:	0001e4f0 	.word	0x0001e4f0
    8e9c:	000202fa 	.word	0x000202fa
    8ea0:	00020337 	.word	0x00020337

00008ea4 <bt_gatt_notify_cb>:
{
    8ea4:	b530      	push	{r4, r5, lr}
    8ea6:	4604      	mov	r4, r0
    8ea8:	b08b      	sub	sp, #44	; 0x2c
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8eaa:	4835      	ldr	r0, [pc, #212]	; (8f80 <bt_gatt_notify_cb+0xdc>)
    8eac:	460d      	mov	r5, r1
    8eae:	f012 f86d 	bl	1af8c <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    8eb2:	0782      	lsls	r2, r0, #30
    8eb4:	d55d      	bpl.n	8f72 <bt_gatt_notify_cb+0xce>
	data.attr = params->attr;
    8eb6:	6848      	ldr	r0, [r1, #4]
    8eb8:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    8eba:	b114      	cbz	r4, 8ec2 <bt_gatt_notify_cb+0x1e>
    8ebc:	7aa3      	ldrb	r3, [r4, #10]
    8ebe:	2b07      	cmp	r3, #7
    8ec0:	d15a      	bne.n	8f78 <bt_gatt_notify_cb+0xd4>
	data.handle = bt_gatt_attr_get_handle(data.attr);
    8ec2:	f7ff fbbf 	bl	8644 <bt_gatt_attr_get_handle>
    8ec6:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
    8eca:	b918      	cbnz	r0, 8ed4 <bt_gatt_notify_cb+0x30>
		return -ENOENT;
    8ecc:	f06f 0001 	mvn.w	r0, #1
}
    8ed0:	b00b      	add	sp, #44	; 0x2c
    8ed2:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
    8ed4:	682a      	ldr	r2, [r5, #0]
    8ed6:	b9aa      	cbnz	r2, 8f04 <bt_gatt_notify_cb+0x60>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    8ed8:	9b05      	ldr	r3, [sp, #20]
    8eda:	6818      	ldr	r0, [r3, #0]
    8edc:	2300      	movs	r3, #0
    8ede:	f88d 3010 	strb.w	r3, [sp, #16]
    8ee2:	a904      	add	r1, sp, #16
    8ee4:	f642 0303 	movw	r3, #10243	; 0x2803
    8ee8:	f8ad 3012 	strh.w	r3, [sp, #18]
    8eec:	f011 f8d7 	bl	1a09e <bt_uuid_cmp>
    8ef0:	b1c0      	cbz	r0, 8f24 <bt_gatt_notify_cb+0x80>
	if (conn) {
    8ef2:	f8bd 0018 	ldrh.w	r0, [sp, #24]
    8ef6:	b314      	cbz	r4, 8f3e <bt_gatt_notify_cb+0x9a>
		return gatt_notify(conn, data.handle, params);
    8ef8:	4601      	mov	r1, r0
    8efa:	462a      	mov	r2, r5
    8efc:	4620      	mov	r0, r4
    8efe:	f7ff ff81 	bl	8e04 <gatt_notify>
    8f02:	e7e5      	b.n	8ed0 <bt_gatt_notify_cb+0x2c>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    8f04:	a905      	add	r1, sp, #20
    8f06:	9102      	str	r1, [sp, #8]
    8f08:	491e      	ldr	r1, [pc, #120]	; (8f84 <bt_gatt_notify_cb+0xe0>)
    8f0a:	9101      	str	r1, [sp, #4]
    8f0c:	2101      	movs	r1, #1
	found->attr = NULL;
    8f0e:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    8f10:	9100      	str	r1, [sp, #0]
    8f12:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    8f16:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    8f18:	f7ff fbc4 	bl	86a4 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    8f1c:	9b05      	ldr	r3, [sp, #20]
    8f1e:	2b00      	cmp	r3, #0
    8f20:	d1da      	bne.n	8ed8 <bt_gatt_notify_cb+0x34>
    8f22:	e7d3      	b.n	8ecc <bt_gatt_notify_cb+0x28>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    8f24:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
    8f26:	68c3      	ldr	r3, [r0, #12]
    8f28:	799b      	ldrb	r3, [r3, #6]
    8f2a:	06db      	lsls	r3, r3, #27
    8f2c:	d402      	bmi.n	8f34 <bt_gatt_notify_cb+0x90>
			return -EINVAL;
    8f2e:	f06f 0015 	mvn.w	r0, #21
    8f32:	e7cd      	b.n	8ed0 <bt_gatt_notify_cb+0x2c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    8f34:	f012 f9bf 	bl	1b2b6 <bt_gatt_attr_value_handle>
    8f38:	f8ad 0018 	strh.w	r0, [sp, #24]
    8f3c:	e7d9      	b.n	8ef2 <bt_gatt_notify_cb+0x4e>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    8f3e:	f642 1202 	movw	r2, #10498	; 0x2902
    8f42:	f8ad 2012 	strh.w	r2, [sp, #18]
    8f46:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
    8f48:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    8f4c:	9202      	str	r2, [sp, #8]
    8f4e:	4a0e      	ldr	r2, [pc, #56]	; (8f88 <bt_gatt_notify_cb+0xe4>)
	data.err = -ENOTCONN;
    8f50:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
    8f52:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    8f54:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
    8f58:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    8f5c:	aa04      	add	r2, sp, #16
    8f5e:	4623      	mov	r3, r4
    8f60:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
    8f64:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    8f66:	f88d 4010 	strb.w	r4, [sp, #16]
    8f6a:	f7ff fb9b 	bl	86a4 <bt_gatt_foreach_attr_type>
	return data.err;
    8f6e:	9807      	ldr	r0, [sp, #28]
    8f70:	e7ae      	b.n	8ed0 <bt_gatt_notify_cb+0x2c>
		return -EAGAIN;
    8f72:	f06f 000a 	mvn.w	r0, #10
    8f76:	e7ab      	b.n	8ed0 <bt_gatt_notify_cb+0x2c>
		return -ENOTCONN;
    8f78:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    8f7c:	e7a8      	b.n	8ed0 <bt_gatt_notify_cb+0x2c>
    8f7e:	bf00      	nop
    8f80:	20000098 	.word	0x20000098
    8f84:	0001af81 	.word	0x0001af81
    8f88:	00008f8d 	.word	0x00008f8d

00008f8c <notify_cb>:
{
    8f8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    8f8e:	4b37      	ldr	r3, [pc, #220]	; (906c <notify_cb+0xe0>)
{
    8f90:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    8f92:	6882      	ldr	r2, [r0, #8]
    8f94:	429a      	cmp	r2, r3
{
    8f96:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    8f98:	d12e      	bne.n	8ff8 <notify_cb+0x6c>
	ccc = attr->user_data;
    8f9a:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    8f9c:	4b34      	ldr	r3, [pc, #208]	; (9070 <notify_cb+0xe4>)
    8f9e:	429f      	cmp	r7, r3
    8fa0:	d11a      	bne.n	8fd8 <notify_cb+0x4c>
    8fa2:	4d34      	ldr	r5, [pc, #208]	; (9074 <notify_cb+0xe8>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    8fa4:	2300      	movs	r3, #0
    8fa6:	2207      	movs	r2, #7
    8fa8:	4669      	mov	r1, sp
    8faa:	1c68      	adds	r0, r5, #1
    8fac:	9300      	str	r3, [sp, #0]
    8fae:	f8cd 3003 	str.w	r3, [sp, #3]
    8fb2:	f010 fde7 	bl	19b84 <memcmp>
    8fb6:	b178      	cbz	r0, 8fd8 <notify_cb+0x4c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    8fb8:	4629      	mov	r1, r5
    8fba:	2207      	movs	r2, #7
    8fbc:	f811 0b01 	ldrb.w	r0, [r1], #1
    8fc0:	f7fd fbae 	bl	6720 <bt_conn_lookup_state_le>
			if (!conn) {
    8fc4:	b9e0      	cbnz	r0, 9000 <notify_cb+0x74>
				sc = (struct sc_data *)data->ind_params->data;
    8fc6:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
    8fc8:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
    8fca:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
    8fcc:	f811 0b01 	ldrb.w	r0, [r1], #1
    8fd0:	8853      	ldrh	r3, [r2, #2]
    8fd2:	8812      	ldrh	r2, [r2, #0]
    8fd4:	f7fe ff7a 	bl	7ecc <sc_save>
		if (cfg->value != data->type) {
    8fd8:	893a      	ldrh	r2, [r7, #8]
    8fda:	89a3      	ldrh	r3, [r4, #12]
    8fdc:	429a      	cmp	r2, r3
    8fde:	d10b      	bne.n	8ff8 <notify_cb+0x6c>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    8fe0:	4639      	mov	r1, r7
    8fe2:	f811 0b01 	ldrb.w	r0, [r1], #1
    8fe6:	f7fd fb57 	bl	6698 <bt_conn_lookup_addr_le>
		if (!conn) {
    8fea:	4605      	mov	r5, r0
    8fec:	b120      	cbz	r0, 8ff8 <notify_cb+0x6c>
		if (conn->state != BT_CONN_CONNECTED) {
    8fee:	7a83      	ldrb	r3, [r0, #10]
    8ff0:	2b07      	cmp	r3, #7
    8ff2:	d008      	beq.n	9006 <notify_cb+0x7a>
			bt_conn_unref(conn);
    8ff4:	f011 fa97 	bl	1a526 <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
    8ff8:	2701      	movs	r7, #1
}
    8ffa:	4638      	mov	r0, r7
    8ffc:	b003      	add	sp, #12
    8ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
    9000:	f011 fa91 	bl	1a526 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    9004:	e7e8      	b.n	8fd8 <notify_cb+0x4c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    9006:	697b      	ldr	r3, [r7, #20]
    9008:	b123      	cbz	r3, 9014 <notify_cb+0x88>
    900a:	4631      	mov	r1, r6
    900c:	4798      	blx	r3
    900e:	b908      	cbnz	r0, 9014 <notify_cb+0x88>
			bt_conn_unref(conn);
    9010:	4628      	mov	r0, r5
    9012:	e7ef      	b.n	8ff4 <notify_cb+0x68>
		if (bt_gatt_check_perm(conn, attr,
    9014:	2214      	movs	r2, #20
    9016:	4631      	mov	r1, r6
    9018:	4628      	mov	r0, r5
    901a:	f012 f9a7 	bl	1b36c <bt_gatt_check_perm>
    901e:	4607      	mov	r7, r0
    9020:	b150      	cbz	r0, 9038 <notify_cb+0xac>
    9022:	4b15      	ldr	r3, [pc, #84]	; (9078 <notify_cb+0xec>)
    9024:	4915      	ldr	r1, [pc, #84]	; (907c <notify_cb+0xf0>)
			BT_WARN("Link is not encrypted");
    9026:	4816      	ldr	r0, [pc, #88]	; (9080 <notify_cb+0xf4>)
    9028:	1ac9      	subs	r1, r1, r3
    902a:	08c9      	lsrs	r1, r1, #3
    902c:	0189      	lsls	r1, r1, #6
    902e:	f041 0102 	orr.w	r1, r1, #2
    9032:	f00f fede 	bl	18df2 <log_0>
			continue;
    9036:	e7df      	b.n	8ff8 <notify_cb+0x6c>
		if (data->type == BT_GATT_CCC_INDICATE) {
    9038:	89a3      	ldrh	r3, [r4, #12]
    903a:	88a1      	ldrh	r1, [r4, #4]
    903c:	6922      	ldr	r2, [r4, #16]
    903e:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
    9040:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
    9042:	d10f      	bne.n	9064 <notify_cb+0xd8>
			err = gatt_indicate(conn, data->handle,
    9044:	f7ff fdd2 	bl	8bec <gatt_indicate>
			if (err == 0) {
    9048:	4606      	mov	r6, r0
    904a:	b918      	cbnz	r0, 9054 <notify_cb+0xc8>
				data->ind_params->_ref++;
    904c:	6922      	ldr	r2, [r4, #16]
    904e:	7d93      	ldrb	r3, [r2, #22]
    9050:	3301      	adds	r3, #1
    9052:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
    9054:	4628      	mov	r0, r5
    9056:	f011 fa66 	bl	1a526 <bt_conn_unref>
		if (err < 0) {
    905a:	2e00      	cmp	r6, #0
    905c:	dbcd      	blt.n	8ffa <notify_cb+0x6e>
		data->err = 0;
    905e:	2300      	movs	r3, #0
    9060:	60a3      	str	r3, [r4, #8]
    9062:	e7c9      	b.n	8ff8 <notify_cb+0x6c>
			err = gatt_notify(conn, data->handle, data->nfy_params);
    9064:	f7ff fece 	bl	8e04 <gatt_notify>
    9068:	4606      	mov	r6, r0
    906a:	e7f3      	b.n	9054 <notify_cb+0xc8>
    906c:	00008195 	.word	0x00008195
    9070:	200002a8 	.word	0x200002a8
    9074:	20002e44 	.word	0x20002e44
    9078:	0001e408 	.word	0x0001e408
    907c:	0001e4f0 	.word	0x0001e4f0
    9080:	000202fa 	.word	0x000202fa

00009084 <update_ccc>:
{
    9084:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    9086:	4b34      	ldr	r3, [pc, #208]	; (9158 <update_ccc+0xd4>)
	struct bt_conn *conn = data->conn;
    9088:	6815      	ldr	r5, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
    908a:	6882      	ldr	r2, [r0, #8]
    908c:	429a      	cmp	r2, r3
{
    908e:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    9090:	d11b      	bne.n	90ca <update_ccc+0x46>
	ccc = attr->user_data;
    9092:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
    9094:	8933      	ldrh	r3, [r6, #8]
    9096:	b1c3      	cbz	r3, 90ca <update_ccc+0x46>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    9098:	4632      	mov	r2, r6
    909a:	4628      	mov	r0, r5
    909c:	f812 1b01 	ldrb.w	r1, [r2], #1
    90a0:	f011 fa06 	bl	1a4b0 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    90a4:	b188      	cbz	r0, 90ca <update_ccc+0x46>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    90a6:	222a      	movs	r2, #42	; 0x2a
    90a8:	4621      	mov	r1, r4
    90aa:	4628      	mov	r0, r5
    90ac:	f012 f95e 	bl	1b36c <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    90b0:	2803      	cmp	r0, #3
    90b2:	d10d      	bne.n	90d0 <update_ccc+0x4c>
    90b4:	4a29      	ldr	r2, [pc, #164]	; (915c <update_ccc+0xd8>)
    90b6:	4b2a      	ldr	r3, [pc, #168]	; (9160 <update_ccc+0xdc>)
				BT_WARN("CCC %p not writable", attr);
    90b8:	482a      	ldr	r0, [pc, #168]	; (9164 <update_ccc+0xe0>)
    90ba:	1ad2      	subs	r2, r2, r3
    90bc:	08d2      	lsrs	r2, r2, #3
    90be:	0192      	lsls	r2, r2, #6
    90c0:	f042 0202 	orr.w	r2, r2, #2
    90c4:	4621      	mov	r1, r4
    90c6:	f00f fea1 	bl	18e0c <log_1>
}
    90ca:	2001      	movs	r0, #1
    90cc:	b002      	add	sp, #8
    90ce:	bd70      	pop	{r4, r5, r6, pc}
		gatt_ccc_changed(attr, ccc);
    90d0:	4631      	mov	r1, r6
    90d2:	4620      	mov	r0, r4
    90d4:	f011 ff37 	bl	1af46 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    90d8:	4b23      	ldr	r3, [pc, #140]	; (9168 <update_ccc+0xe4>)
    90da:	429e      	cmp	r6, r3
    90dc:	d1f5      	bne.n	90ca <update_ccc+0x46>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    90de:	7a28      	ldrb	r0, [r5, #8]
    90e0:	f105 0188 	add.w	r1, r5, #136	; 0x88
    90e4:	f7fe fee2 	bl	7eac <find_sc_cfg>
	if (!cfg) {
    90e8:	4604      	mov	r4, r0
    90ea:	2800      	cmp	r0, #0
    90ec:	d0ed      	beq.n	90ca <update_ccc+0x46>
	if (!(cfg->data.start || cfg->data.end)) {
    90ee:	8902      	ldrh	r2, [r0, #8]
    90f0:	8943      	ldrh	r3, [r0, #10]
    90f2:	ea53 0102 	orrs.w	r1, r3, r2
    90f6:	d0e8      	beq.n	90ca <update_ccc+0x46>
	index = bt_conn_index(conn);
    90f8:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    90fa:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    90fe:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
    9102:	f7fd fbd1 	bl	68a8 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    9106:	4919      	ldr	r1, [pc, #100]	; (916c <update_ccc+0xe8>)
    9108:	4a19      	ldr	r2, [pc, #100]	; (9170 <update_ccc+0xec>)
    910a:	2318      	movs	r3, #24
    910c:	fb03 1300 	mla	r3, r3, r0, r1
    9110:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    9112:	4a18      	ldr	r2, [pc, #96]	; (9174 <update_ccc+0xf0>)
    9114:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    9116:	aa01      	add	r2, sp, #4
    9118:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
    911a:	2204      	movs	r2, #4
    911c:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    911e:	b203      	sxth	r3, r0
    9120:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    9124:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    9128:	4628      	mov	r0, r5
    912a:	f7ff fdc5 	bl	8cb8 <bt_gatt_indicate>
    912e:	b148      	cbz	r0, 9144 <update_ccc+0xc0>
    9130:	490a      	ldr	r1, [pc, #40]	; (915c <update_ccc+0xd8>)
    9132:	4b0b      	ldr	r3, [pc, #44]	; (9160 <update_ccc+0xdc>)
		BT_ERR("SC restore indication failed");
    9134:	4810      	ldr	r0, [pc, #64]	; (9178 <update_ccc+0xf4>)
    9136:	1ac9      	subs	r1, r1, r3
    9138:	08c9      	lsrs	r1, r1, #3
    913a:	0189      	lsls	r1, r1, #6
    913c:	f041 0101 	orr.w	r1, r1, #1
    9140:	f00f fe57 	bl	18df2 <log_0>
	memset(&cfg->data, 0, sizeof(cfg->data));
    9144:	2204      	movs	r2, #4
    9146:	2100      	movs	r1, #0
    9148:	f104 0008 	add.w	r0, r4, #8
    914c:	f010 fd55 	bl	19bfa <memset>
		sc_store(cfg);
    9150:	4620      	mov	r0, r4
    9152:	f7fe fdc9 	bl	7ce8 <sc_store>
    9156:	e7b8      	b.n	90ca <update_ccc+0x46>
    9158:	00008195 	.word	0x00008195
    915c:	0001e4f0 	.word	0x0001e4f0
    9160:	0001e408 	.word	0x0001e408
    9164:	00020360 	.word	0x00020360
    9168:	200002a8 	.word	0x200002a8
    916c:	20001aa0 	.word	0x20001aa0
    9170:	0001ea00 	.word	0x0001ea00
    9174:	0001b12f 	.word	0x0001b12f
    9178:	00020374 	.word	0x00020374

0000917c <bt_gatt_connected>:
{
    917c:	b530      	push	{r4, r5, lr}
    917e:	b08f      	sub	sp, #60	; 0x3c
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    9180:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
    9184:	4604      	mov	r4, r0
	data.conn = conn;
    9186:	9003      	str	r0, [sp, #12]
	data.sec = BT_SECURITY_L1;
    9188:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    918a:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
    918c:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    9190:	4629      	mov	r1, r5
    9192:	f011 f87c 	bl	1a28e <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
    9196:	b190      	cbz	r0, 91be <bt_gatt_connected+0x42>
		if (conn->id) {
    9198:	7a22      	ldrb	r2, [r4, #8]
    919a:	b1ca      	cbz	r2, 91d0 <bt_gatt_connected+0x54>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
    919c:	ac02      	add	r4, sp, #8
    919e:	2104      	movs	r1, #4
    91a0:	4620      	mov	r0, r4
    91a2:	f00f f92c 	bl	183fe <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
    91a6:	9400      	str	r4, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
    91a8:	4a0a      	ldr	r2, [pc, #40]	; (91d4 <bt_gatt_connected+0x58>)
    91aa:	2124      	movs	r1, #36	; 0x24
    91ac:	a805      	add	r0, sp, #20
    91ae:	462b      	mov	r3, r5
    91b0:	f7fb f8dc 	bl	436c <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
    91b4:	aa05      	add	r2, sp, #20
    91b6:	4908      	ldr	r1, [pc, #32]	; (91d8 <bt_gatt_connected+0x5c>)
    91b8:	4610      	mov	r0, r2
    91ba:	f7f9 fd59 	bl	2c70 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    91be:	4a07      	ldr	r2, [pc, #28]	; (91dc <bt_gatt_connected+0x60>)
    91c0:	ab03      	add	r3, sp, #12
    91c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    91c6:	2001      	movs	r0, #1
    91c8:	f012 f8c3 	bl	1b352 <bt_gatt_foreach_attr>
}
    91cc:	b00f      	add	sp, #60	; 0x3c
    91ce:	bd30      	pop	{r4, r5, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
    91d0:	9200      	str	r2, [sp, #0]
    91d2:	e7e9      	b.n	91a8 <bt_gatt_connected+0x2c>
    91d4:	000202ea 	.word	0x000202ea
    91d8:	00008add 	.word	0x00008add
    91dc:	00009085 	.word	0x00009085

000091e0 <db_hash_read>:
{
    91e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    91e2:	4914      	ldr	r1, [pc, #80]	; (9234 <db_hash_read+0x54>)
{
    91e4:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    91e8:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    91ea:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
    91ee:	461f      	mov	r7, r3
    91f0:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    91f2:	f014 fd08 	bl	1dc06 <k_work_cancel_delayable_sync>
    91f6:	4810      	ldr	r0, [pc, #64]	; (9238 <db_hash_read+0x58>)
    91f8:	f011 fec8 	bl	1af8c <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
    91fc:	0743      	lsls	r3, r0, #29
    91fe:	d402      	bmi.n	9206 <db_hash_read+0x26>
		db_hash_gen(true);
    9200:	2001      	movs	r0, #1
    9202:	f7ff fafb 	bl	87fc <db_hash_gen>
	bt_gatt_change_aware(conn, true);
    9206:	2101      	movs	r1, #1
    9208:	4620      	mov	r0, r4
    920a:	f012 f8d2 	bl	1b3b2 <bt_gatt_change_aware>
	if (offset > value_len) {
    920e:	2e10      	cmp	r6, #16
    9210:	d80c      	bhi.n	922c <db_hash_read+0x4c>
	len = MIN(buf_len, value_len - offset);
    9212:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
    9216:	4909      	ldr	r1, [pc, #36]	; (923c <db_hash_read+0x5c>)
	len = MIN(buf_len, value_len - offset);
    9218:	42bc      	cmp	r4, r7
    921a:	bfa8      	it	ge
    921c:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
    921e:	4622      	mov	r2, r4
    9220:	4431      	add	r1, r6
    9222:	4628      	mov	r0, r5
    9224:	f010 fcbe 	bl	19ba4 <memcpy>
}
    9228:	4620      	mov	r0, r4
    922a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    922c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
    9230:	e7fa      	b.n	9228 <db_hash_read+0x48>
    9232:	bf00      	nop
    9234:	20001038 	.word	0x20001038
    9238:	200010b0 	.word	0x200010b0
    923c:	20000fe8 	.word	0x20000fe8

00009240 <bt_gatt_store_ccc>:
{
    9240:	b570      	push	{r4, r5, r6, lr}
    9242:	b0c0      	sub	sp, #256	; 0x100
	save.count = 0;
    9244:	2300      	movs	r3, #0
{
    9246:	4604      	mov	r4, r0
    9248:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
    924a:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
    924c:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
    9250:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
    9252:	4a18      	ldr	r2, [pc, #96]	; (92b4 <bt_gatt_store_ccc+0x74>)
    9254:	ab0d      	add	r3, sp, #52	; 0x34
    9256:	f64f 71ff 	movw	r1, #65535	; 0xffff
    925a:	2001      	movs	r0, #1
    925c:	f012 f879 	bl	1b352 <bt_gatt_foreach_attr>
	if (id) {
    9260:	b31c      	cbz	r4, 92aa <bt_gatt_store_ccc+0x6a>
		u8_to_dec(id_str, sizeof(id_str), id);
    9262:	ae03      	add	r6, sp, #12
    9264:	4622      	mov	r2, r4
    9266:	2104      	movs	r1, #4
    9268:	4630      	mov	r0, r6
    926a:	f00f f8c8 	bl	183fe <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
    926e:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
    9270:	4a11      	ldr	r2, [pc, #68]	; (92b8 <bt_gatt_store_ccc+0x78>)
    9272:	462b      	mov	r3, r5
    9274:	2124      	movs	r1, #36	; 0x24
    9276:	a804      	add	r0, sp, #16
    9278:	f7fb f878 	bl	436c <bt_settings_encode_key>
	if (save.count) {
    927c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
    927e:	b1b2      	cbz	r2, 92ae <bt_gatt_store_ccc+0x6e>
		len = save.count * sizeof(*save.store);
    9280:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
    9282:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
    9284:	a804      	add	r0, sp, #16
    9286:	f7f9 fccd 	bl	2c24 <settings_save_one>
	if (err) {
    928a:	4604      	mov	r4, r0
    928c:	b150      	cbz	r0, 92a4 <bt_gatt_store_ccc+0x64>
    928e:	4a0b      	ldr	r2, [pc, #44]	; (92bc <bt_gatt_store_ccc+0x7c>)
    9290:	4b0b      	ldr	r3, [pc, #44]	; (92c0 <bt_gatt_store_ccc+0x80>)
    9292:	1ad2      	subs	r2, r2, r3
    9294:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Failed to store CCCs (err %d)", err);
    9296:	0192      	lsls	r2, r2, #6
    9298:	4601      	mov	r1, r0
    929a:	f042 0201 	orr.w	r2, r2, #1
    929e:	4809      	ldr	r0, [pc, #36]	; (92c4 <bt_gatt_store_ccc+0x84>)
    92a0:	f00f fdb4 	bl	18e0c <log_1>
}
    92a4:	4620      	mov	r0, r4
    92a6:	b040      	add	sp, #256	; 0x100
    92a8:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
    92aa:	9400      	str	r4, [sp, #0]
    92ac:	e7e0      	b.n	9270 <bt_gatt_store_ccc+0x30>
		str = NULL;
    92ae:	4611      	mov	r1, r2
    92b0:	e7e8      	b.n	9284 <bt_gatt_store_ccc+0x44>
    92b2:	bf00      	nop
    92b4:	00007d9d 	.word	0x00007d9d
    92b8:	000202ea 	.word	0x000202ea
    92bc:	0001e4f0 	.word	0x0001e4f0
    92c0:	0001e408 	.word	0x0001e408
    92c4:	00020391 	.word	0x00020391

000092c8 <bt_gatt_service_unregister>:
{
    92c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    92cc:	4604      	mov	r4, r0
	k_sched_lock();
    92ce:	f00e faf1 	bl	178b4 <k_sched_lock>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    92d2:	4b39      	ldr	r3, [pc, #228]	; (93b8 <bt_gatt_service_unregister+0xf0>)
    92d4:	681a      	ldr	r2, [r3, #0]
	if (!sys_slist_find_and_remove(&db, &svc->node)) {
    92d6:	f104 0008 	add.w	r0, r4, #8
    92da:	2100      	movs	r1, #0
    92dc:	b93a      	cbnz	r2, 92ee <bt_gatt_service_unregister+0x26>
		k_sched_unlock();
    92de:	f00e fbdb 	bl	17a98 <k_sched_unlock>
		return err;
    92e2:	f06f 0501 	mvn.w	r5, #1
}
    92e6:	4628      	mov	r0, r5
    92e8:	b003      	add	sp, #12
    92ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    92ee:	4290      	cmp	r0, r2
    92f0:	d120      	bne.n	9334 <bt_gatt_service_unregister+0x6c>
Z_GENLIST_REMOVE(slist, snode)
    92f2:	68a2      	ldr	r2, [r4, #8]
    92f4:	b9c1      	cbnz	r1, 9328 <bt_gatt_service_unregister+0x60>
    92f6:	6859      	ldr	r1, [r3, #4]
	list->head = node;
    92f8:	601a      	str	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    92fa:	4288      	cmp	r0, r1
    92fc:	d100      	bne.n	9300 <bt_gatt_service_unregister+0x38>
	list->tail = node;
    92fe:	605a      	str	r2, [r3, #4]
	parent->next = child;
    9300:	2500      	movs	r5, #0
		if (attr->write == bt_gatt_attr_write_ccc) {
    9302:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 93c0 <bt_gatt_service_unregister+0xf8>
    9306:	60a5      	str	r5, [r4, #8]
		struct bt_gatt_attr *attr = &svc->attrs[i];
    9308:	f04f 0814 	mov.w	r8, #20
	ccc->value = 0;
    930c:	462f      	mov	r7, r5
	for (uint16_t i = 0; i < svc->attr_count; i++) {
    930e:	6862      	ldr	r2, [r4, #4]
    9310:	b2ab      	uxth	r3, r5
    9312:	429a      	cmp	r2, r3
    9314:	d811      	bhi.n	933a <bt_gatt_service_unregister+0x72>
	if (!atomic_get(&init)) {
    9316:	4829      	ldr	r0, [pc, #164]	; (93bc <bt_gatt_service_unregister+0xf4>)
    9318:	f011 fe38 	bl	1af8c <atomic_get>
    931c:	4605      	mov	r5, r0
    931e:	2800      	cmp	r0, #0
    9320:	d139      	bne.n	9396 <bt_gatt_service_unregister+0xce>
		k_sched_unlock();
    9322:	f00e fbb9 	bl	17a98 <k_sched_unlock>
		return 0;
    9326:	e7de      	b.n	92e6 <bt_gatt_service_unregister+0x1e>
    9328:	600a      	str	r2, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    932a:	685a      	ldr	r2, [r3, #4]
    932c:	4290      	cmp	r0, r2
	list->tail = node;
    932e:	bf08      	it	eq
    9330:	6059      	streq	r1, [r3, #4]
}
    9332:	e7e5      	b.n	9300 <bt_gatt_service_unregister+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    9334:	4611      	mov	r1, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9336:	6812      	ldr	r2, [r2, #0]
    9338:	e7d0      	b.n	92dc <bt_gatt_service_unregister+0x14>
		struct bt_gatt_attr *attr = &svc->attrs[i];
    933a:	6822      	ldr	r2, [r4, #0]
    933c:	fb08 2303 	mla	r3, r8, r3, r2
		if (attr->write == bt_gatt_attr_write_ccc) {
    9340:	689a      	ldr	r2, [r3, #8]
    9342:	454a      	cmp	r2, r9
    9344:	d125      	bne.n	9392 <bt_gatt_service_unregister+0xca>
			gatt_unregister_ccc(attr->user_data);
    9346:	68de      	ldr	r6, [r3, #12]
		if (bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    9348:	9700      	str	r7, [sp, #0]
    934a:	f106 0a01 	add.w	sl, r6, #1
	ccc->value = 0;
    934e:	8177      	strh	r7, [r6, #10]
    9350:	2207      	movs	r2, #7
    9352:	4669      	mov	r1, sp
    9354:	4650      	mov	r0, sl
		if (bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    9356:	f8cd 7003 	str.w	r7, [sp, #3]
    935a:	f010 fc13 	bl	19b84 <memcmp>
    935e:	b1c0      	cbz	r0, 9392 <bt_gatt_service_unregister+0xca>
			conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    9360:	7830      	ldrb	r0, [r6, #0]
    9362:	4651      	mov	r1, sl
    9364:	f7fd f998 	bl	6698 <bt_conn_lookup_addr_le>
			if (conn) {
    9368:	b948      	cbnz	r0, 937e <bt_gatt_service_unregister+0xb6>
			    bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
    936a:	7830      	ldrb	r0, [r6, #0]
    936c:	4651      	mov	r1, sl
    936e:	f010 ff8e 	bl	1a28e <bt_addr_le_is_bonded>
			if (IS_ENABLED(CONFIG_BT_SETTINGS) && store &&
    9372:	b158      	cbz	r0, 938c <bt_gatt_service_unregister+0xc4>
				bt_gatt_store_ccc(cfg->id, &cfg->peer);
    9374:	7830      	ldrb	r0, [r6, #0]
    9376:	4651      	mov	r1, sl
    9378:	f7ff ff62 	bl	9240 <bt_gatt_store_ccc>
    937c:	e006      	b.n	938c <bt_gatt_service_unregister+0xc4>
				if (conn->state == BT_CONN_CONNECTED) {
    937e:	f890 b00a 	ldrb.w	fp, [r0, #10]
				bt_conn_unref(conn);
    9382:	f011 f8d0 	bl	1a526 <bt_conn_unref>
			if (IS_ENABLED(CONFIG_BT_SETTINGS) && store &&
    9386:	f1bb 0f07 	cmp.w	fp, #7
    938a:	d1ee      	bne.n	936a <bt_gatt_service_unregister+0xa2>
			clear_ccc_cfg(cfg);
    938c:	4630      	mov	r0, r6
    938e:	f011 fe6b 	bl	1b068 <clear_ccc_cfg>
	for (uint16_t i = 0; i < svc->attr_count; i++) {
    9392:	3501      	adds	r5, #1
    9394:	e7bb      	b.n	930e <bt_gatt_service_unregister+0x46>
		    svc->attrs[svc->attr_count - 1].handle);
    9396:	e9d4 2300 	ldrd	r2, r3, [r4]
	sc_indicate(svc->attrs[0].handle,
    939a:	2114      	movs	r1, #20
    939c:	fb01 2303 	mla	r3, r1, r3, r2
    93a0:	8a10      	ldrh	r0, [r2, #16]
    93a2:	f833 1c04 	ldrh.w	r1, [r3, #-4]
    93a6:	f7ff f8df 	bl	8568 <sc_indicate>
	return 0;
    93aa:	2500      	movs	r5, #0
	db_changed();
    93ac:	f7fe ffc4 	bl	8338 <db_changed>
	k_sched_unlock();
    93b0:	f00e fb72 	bl	17a98 <k_sched_unlock>
	return 0;
    93b4:	e797      	b.n	92e6 <bt_gatt_service_unregister+0x1e>
    93b6:	bf00      	nop
    93b8:	20001a94 	.word	0x20001a94
    93bc:	20001a9c 	.word	0x20001a9c
    93c0:	00008195 	.word	0x00008195

000093c4 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    93c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    93c6:	4604      	mov	r4, r0
    93c8:	b08d      	sub	sp, #52	; 0x34
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    93ca:	4603      	mov	r3, r0
    93cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    93d0:	2001      	movs	r0, #1
    93d2:	4a37      	ldr	r2, [pc, #220]	; (94b0 <bt_gatt_disconnected+0xec>)
		k_work_cancel_delayable(&gatt_ccc_store.work);
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    93d4:	f104 0588 	add.w	r5, r4, #136	; 0x88
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    93d8:	f011 ffbb 	bl	1b352 <bt_gatt_foreach_attr>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    93dc:	7a20      	ldrb	r0, [r4, #8]
    93de:	4629      	mov	r1, r5
    93e0:	f010 ff55 	bl	1a28e <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    93e4:	2800      	cmp	r0, #0
    93e6:	d035      	beq.n	9454 <bt_gatt_disconnected+0x90>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
    93e8:	4629      	mov	r1, r5
    93ea:	7a20      	ldrb	r0, [r4, #8]
    93ec:	f7ff ff28 	bl	9240 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
    93f0:	4620      	mov	r0, r4
    93f2:	f7fe fe33 	bl	805c <find_cf_cfg>
	if (!cfg) {
    93f6:	4606      	mov	r6, r0
    93f8:	2800      	cmp	r0, #0
    93fa:	d04a      	beq.n	9492 <bt_gatt_disconnected+0xce>
		if (conn->id) {
    93fc:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
    93fe:	3608      	adds	r6, #8
		if (conn->id) {
    9400:	2a00      	cmp	r2, #0
    9402:	d048      	beq.n	9496 <bt_gatt_disconnected+0xd2>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
    9404:	af02      	add	r7, sp, #8
    9406:	2104      	movs	r1, #4
    9408:	4638      	mov	r0, r7
    940a:	f00e fff8 	bl	183fe <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
    940e:	9700      	str	r7, [sp, #0]
    9410:	462b      	mov	r3, r5
    9412:	4a28      	ldr	r2, [pc, #160]	; (94b4 <bt_gatt_disconnected+0xf0>)
    9414:	2124      	movs	r1, #36	; 0x24
    9416:	a803      	add	r0, sp, #12
    9418:	f7fa ffa8 	bl	436c <bt_settings_encode_key>
	if (!cfg || !conn->id) {
    941c:	7a23      	ldrb	r3, [r4, #8]
    941e:	2701      	movs	r7, #1
    9420:	b93b      	cbnz	r3, 9432 <bt_gatt_disconnected+0x6e>
		bt_settings_encode_key(key, sizeof(key), "cf",
    9422:	2300      	movs	r3, #0
    9424:	9300      	str	r3, [sp, #0]
    9426:	4a23      	ldr	r2, [pc, #140]	; (94b4 <bt_gatt_disconnected+0xf0>)
    9428:	462b      	mov	r3, r5
    942a:	2124      	movs	r1, #36	; 0x24
    942c:	a803      	add	r0, sp, #12
    942e:	f7fa ff9d 	bl	436c <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
    9432:	4631      	mov	r1, r6
    9434:	463a      	mov	r2, r7
    9436:	a803      	add	r0, sp, #12
    9438:	f7f9 fbf4 	bl	2c24 <settings_save_one>
	if (err) {
    943c:	4601      	mov	r1, r0
    943e:	b148      	cbz	r0, 9454 <bt_gatt_disconnected+0x90>
    9440:	4a1d      	ldr	r2, [pc, #116]	; (94b8 <bt_gatt_disconnected+0xf4>)
    9442:	4b1e      	ldr	r3, [pc, #120]	; (94bc <bt_gatt_disconnected+0xf8>)
		BT_ERR("Failed to store Client Features (err %d)", err);
    9444:	481e      	ldr	r0, [pc, #120]	; (94c0 <bt_gatt_disconnected+0xfc>)
    9446:	1ad2      	subs	r2, r2, r3
    9448:	08d2      	lsrs	r2, r2, #3
    944a:	0192      	lsls	r2, r2, #6
    944c:	f042 0201 	orr.w	r2, r2, #1
    9450:	f00f fcdc 	bl	18e0c <log_1>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    9454:	7a20      	ldrb	r0, [r4, #8]
    9456:	4629      	mov	r1, r5
    9458:	f010 ff19 	bl	1a28e <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
    945c:	b150      	cbz	r0, 9474 <bt_gatt_disconnected+0xb0>
		struct addr_with_id addr_with_id = {
    945e:	7a23      	ldrb	r3, [r4, #8]
    9460:	f88d 3010 	strb.w	r3, [sp, #16]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
    9464:	4a17      	ldr	r2, [pc, #92]	; (94c4 <bt_gatt_disconnected+0x100>)
		struct addr_with_id addr_with_id = {
    9466:	9503      	str	r5, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
    9468:	ab03      	add	r3, sp, #12
    946a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    946e:	2001      	movs	r0, #1
    9470:	f011 ff6f 	bl	1b352 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
    9474:	4620      	mov	r0, r4
    9476:	f7fe fdf1 	bl	805c <find_cf_cfg>
	if (!cfg) {
    947a:	4606      	mov	r6, r0
    947c:	b138      	cbz	r0, 948e <bt_gatt_disconnected+0xca>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    947e:	7a20      	ldrb	r0, [r4, #8]
    9480:	4629      	mov	r1, r5
    9482:	f010 ff04 	bl	1a28e <bt_addr_le_is_bonded>
    9486:	b940      	cbnz	r0, 949a <bt_gatt_disconnected+0xd6>
		clear_cf_cfg(cfg);
    9488:	4630      	mov	r0, r6
    948a:	f011 fe0a 	bl	1b0a2 <clear_cf_cfg>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    948e:	b00d      	add	sp, #52	; 0x34
    9490:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = 0;
    9492:	4607      	mov	r7, r0
    9494:	e7c5      	b.n	9422 <bt_gatt_disconnected+0x5e>
    9496:	2701      	movs	r7, #1
    9498:	e7c3      	b.n	9422 <bt_gatt_disconnected+0x5e>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    949a:	4629      	mov	r1, r5
    949c:	1c70      	adds	r0, r6, #1
    949e:	f011 fde0 	bl	1b062 <bt_addr_le_copy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    94a2:	f06f 0102 	mvn.w	r1, #2
    94a6:	f106 000c 	add.w	r0, r6, #12
    94aa:	f011 fdeb 	bl	1b084 <atomic_and>
}
    94ae:	e7ee      	b.n	948e <bt_gatt_disconnected+0xca>
    94b0:	000084dd 	.word	0x000084dd
    94b4:	000203db 	.word	0x000203db
    94b8:	0001e4f0 	.word	0x0001e4f0
    94bc:	0001e408 	.word	0x0001e408
    94c0:	000203af 	.word	0x000203af
    94c4:	00007e61 	.word	0x00007e61

000094c8 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    94c8:	4a0b      	ldr	r2, [pc, #44]	; (94f8 <bt_smp_accept+0x30>)
{
    94ca:	b508      	push	{r3, lr}
    94cc:	4603      	mov	r3, r0
		if (smp->chan.conn) {
    94ce:	6810      	ldr	r0, [r2, #0]
    94d0:	b918      	cbnz	r0, 94da <bt_smp_accept+0x12>
			continue;
		}

		smp->chan.ops = &ops;
    94d2:	4b0a      	ldr	r3, [pc, #40]	; (94fc <bt_smp_accept+0x34>)
    94d4:	6053      	str	r3, [r2, #4]

		*chan = &smp->chan;
    94d6:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    94d8:	bd08      	pop	{r3, pc}
    94da:	4909      	ldr	r1, [pc, #36]	; (9500 <bt_smp_accept+0x38>)
    94dc:	4a09      	ldr	r2, [pc, #36]	; (9504 <bt_smp_accept+0x3c>)
	BT_ERR("No available SMP context for conn %p", conn);
    94de:	480a      	ldr	r0, [pc, #40]	; (9508 <bt_smp_accept+0x40>)
    94e0:	1a52      	subs	r2, r2, r1
    94e2:	08d2      	lsrs	r2, r2, #3
    94e4:	0192      	lsls	r2, r2, #6
    94e6:	f042 0201 	orr.w	r2, r2, #1
    94ea:	4619      	mov	r1, r3
    94ec:	f00f fc8e 	bl	18e0c <log_1>
	return -ENOMEM;
    94f0:	f06f 000b 	mvn.w	r0, #11
    94f4:	e7f0      	b.n	94d8 <bt_smp_accept+0x10>
    94f6:	bf00      	nop
    94f8:	200010b8 	.word	0x200010b8
    94fc:	0001eb04 	.word	0x0001eb04
    9500:	0001e408 	.word	0x0001e408
    9504:	0001e5e8 	.word	0x0001e5e8
    9508:	000203ec 	.word	0x000203ec

0000950c <bt_mesh_is_provisioned>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    950c:	4b04      	ldr	r3, [pc, #16]	; (9520 <bt_mesh_is_provisioned+0x14>)
    950e:	f3bf 8f5b 	dmb	ish
    9512:	6818      	ldr	r0, [r3, #0]
    9514:	f3bf 8f5b 	dmb	ish
}

bool bt_mesh_is_provisioned(void)
{
	return atomic_test_bit(bt_mesh.flags, BT_MESH_VALID);
}
    9518:	f000 0001 	and.w	r0, r0, #1
    951c:	4770      	bx	lr
    951e:	bf00      	nop
    9520:	200011d8 	.word	0x200011d8

00009524 <bt_mesh_start>:
		mod->cb->start(mod);
	}
}

int bt_mesh_start(void)
{
    9524:	b538      	push	{r3, r4, r5, lr}
	int err;

	err = bt_mesh_adv_enable();
    9526:	f003 fd1b 	bl	cf60 <bt_mesh_adv_enable>
	if (err) {
    952a:	4604      	mov	r4, r0
    952c:	b158      	cbz	r0, 9546 <bt_mesh_start+0x22>
    952e:	4917      	ldr	r1, [pc, #92]	; (958c <bt_mesh_start+0x68>)
    9530:	4b17      	ldr	r3, [pc, #92]	; (9590 <bt_mesh_start+0x6c>)
		BT_ERR("Failed enabling advertiser");
    9532:	4818      	ldr	r0, [pc, #96]	; (9594 <bt_mesh_start+0x70>)
    9534:	1ac9      	subs	r1, r1, r3
    9536:	08c9      	lsrs	r1, r1, #3
    9538:	0189      	lsls	r1, r1, #6
    953a:	f041 0101 	orr.w	r1, r1, #1
    953e:	f00f fc58 	bl	18df2 <log_0>
	bt_mesh_hb_start();

	bt_mesh_model_foreach(model_start, NULL);

	return 0;
}
    9542:	4620      	mov	r0, r4
    9544:	bd38      	pop	{r3, r4, r5, pc}
	if (bt_mesh_beacon_enabled()) {
    9546:	f000 f85d 	bl	9604 <bt_mesh_beacon_enabled>
    954a:	b1e0      	cbz	r0, 9586 <bt_mesh_start+0x62>
		bt_mesh_beacon_enable();
    954c:	f000 fc08 	bl	9d60 <bt_mesh_beacon_enable>
	    bt_mesh_gatt_proxy_get() != BT_MESH_GATT_PROXY_NOT_SUPPORTED) {
    9550:	f000 f89c 	bl	968c <bt_mesh_gatt_proxy_get>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    9554:	2802      	cmp	r0, #2
    9556:	d003      	beq.n	9560 <bt_mesh_start+0x3c>
		bt_mesh_proxy_gatt_enable();
    9558:	f004 ff5a 	bl	e410 <bt_mesh_proxy_gatt_enable>
		bt_mesh_adv_update();
    955c:	f003 fcfa 	bl	cf54 <bt_mesh_adv_update>
		bt_mesh_scan_enable();
    9560:	f000 fa24 	bl	99ac <bt_mesh_scan_enable>
		struct bt_mesh_subnet *sub = bt_mesh_subnet_next(NULL);
    9564:	2000      	movs	r0, #0
    9566:	f001 fb6f 	bl	ac48 <bt_mesh_subnet_next>
    956a:	4605      	mov	r5, r0
		uint16_t addr = bt_mesh_primary_addr();
    956c:	f003 fbb4 	bl	ccd8 <bt_mesh_primary_addr>
    9570:	4601      	mov	r1, r0
		bt_mesh_prov_complete(sub->net_idx, addr);
    9572:	8ba8      	ldrh	r0, [r5, #28]
    9574:	f003 fdb4 	bl	d0e0 <bt_mesh_prov_complete>
	bt_mesh_hb_start();
    9578:	f003 f8b8 	bl	c6ec <bt_mesh_hb_start>
	bt_mesh_model_foreach(model_start, NULL);
    957c:	4806      	ldr	r0, [pc, #24]	; (9598 <bt_mesh_start+0x74>)
    957e:	2100      	movs	r1, #0
    9580:	f003 f9e2 	bl	c948 <bt_mesh_model_foreach>
	return 0;
    9584:	e7dd      	b.n	9542 <bt_mesh_start+0x1e>
		bt_mesh_beacon_disable();
    9586:	f000 fbfd 	bl	9d84 <bt_mesh_beacon_disable>
    958a:	e7e1      	b.n	9550 <bt_mesh_start+0x2c>
    958c:	0001e570 	.word	0x0001e570
    9590:	0001e408 	.word	0x0001e408
    9594:	00020418 	.word	0x00020418
    9598:	0001b457 	.word	0x0001b457

0000959c <bt_mesh_beacon_set>:
	uint8_t frnd;
	uint8_t default_ttl;
};

void bt_mesh_beacon_set(bool beacon)
{
    959c:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    959e:	4b18      	ldr	r3, [pc, #96]	; (9600 <bt_mesh_beacon_set+0x64>)
    95a0:	4602      	mov	r2, r0
    95a2:	4618      	mov	r0, r3
    95a4:	f011 ff5d 	bl	1b462 <atomic_get>
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_BEACON) == beacon) {
    95a8:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    95ac:	4282      	cmp	r2, r0
    95ae:	d025      	beq.n	95fc <bt_mesh_beacon_set+0x60>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    95b0:	f3bf 8f5b 	dmb	ish
	if (val) {
    95b4:	b1aa      	cbz	r2, 95e2 <bt_mesh_beacon_set+0x46>
    95b6:	e853 2f00 	ldrex	r2, [r3]
    95ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    95be:	e843 2100 	strex	r1, r2, [r3]
    95c2:	2900      	cmp	r1, #0
    95c4:	d1f7      	bne.n	95b6 <bt_mesh_beacon_set+0x1a>
    95c6:	f3bf 8f5b 	dmb	ish
	}

	atomic_set_bit_to(bt_mesh.flags, BT_MESH_BEACON, beacon);

	if (beacon) {
		bt_mesh_beacon_enable();
    95ca:	f000 fbc9 	bl	9d60 <bt_mesh_beacon_enable>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    95ce:	480c      	ldr	r0, [pc, #48]	; (9600 <bt_mesh_beacon_set+0x64>)
    95d0:	f011 ff47 	bl	1b462 <atomic_get>
	} else {
		bt_mesh_beacon_disable();
	}

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    95d4:	07c3      	lsls	r3, r0, #31
    95d6:	d511      	bpl.n	95fc <bt_mesh_beacon_set+0x60>
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
	}
}
    95d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
    95dc:	2007      	movs	r0, #7
    95de:	f003 bd19 	b.w	d014 <bt_mesh_settings_store_schedule>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    95e2:	e853 2f00 	ldrex	r2, [r3]
    95e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    95ea:	e843 2100 	strex	r1, r2, [r3]
    95ee:	2900      	cmp	r1, #0
    95f0:	d1f7      	bne.n	95e2 <bt_mesh_beacon_set+0x46>
    95f2:	f3bf 8f5b 	dmb	ish
		bt_mesh_beacon_disable();
    95f6:	f000 fbc5 	bl	9d84 <bt_mesh_beacon_disable>
    95fa:	e7e8      	b.n	95ce <bt_mesh_beacon_set+0x32>
}
    95fc:	bd08      	pop	{r3, pc}
    95fe:	bf00      	nop
    9600:	200011d8 	.word	0x200011d8

00009604 <bt_mesh_beacon_enabled>:

bool bt_mesh_beacon_enabled(void)
{
    9604:	b508      	push	{r3, lr}
    9606:	4803      	ldr	r0, [pc, #12]	; (9614 <bt_mesh_beacon_enabled+0x10>)
    9608:	f011 ff2b 	bl	1b462 <atomic_get>
	return atomic_test_bit(bt_mesh.flags, BT_MESH_BEACON);
}
    960c:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    9610:	bd08      	pop	{r3, pc}
    9612:	bf00      	nop
    9614:	200011d8 	.word	0x200011d8

00009618 <bt_mesh_gatt_proxy_set>:

static int feature_set(int feature_flag, enum bt_mesh_feat_state state)
{
	if (state != BT_MESH_FEATURE_DISABLED &&
    9618:	2801      	cmp	r0, #1
		       BT_MESH_FEATURE_ENABLED :
		       BT_MESH_FEATURE_DISABLED;
}

int bt_mesh_gatt_proxy_set(enum bt_mesh_feat_state gatt_proxy)
{
    961a:	b508      	push	{r3, lr}
    961c:	4603      	mov	r3, r0
	if (state != BT_MESH_FEATURE_DISABLED &&
    961e:	d82d      	bhi.n	967c <bt_mesh_gatt_proxy_set+0x64>
    9620:	4a19      	ldr	r2, [pc, #100]	; (9688 <bt_mesh_gatt_proxy_set+0x70>)
    9622:	4610      	mov	r0, r2
    9624:	f011 ff1d 	bl	1b462 <atomic_get>
	    (state == BT_MESH_FEATURE_ENABLED)) {
    9628:	f003 0301 	and.w	r3, r3, #1
	if (atomic_test_bit(bt_mesh.flags, feature_flag) ==
    962c:	f3c0 2000 	ubfx	r0, r0, #8, #1
    9630:	4283      	cmp	r3, r0
    9632:	d026      	beq.n	9682 <bt_mesh_gatt_proxy_set+0x6a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9634:	f3bf 8f5b 	dmb	ish
	if (val) {
    9638:	b1bb      	cbz	r3, 966a <bt_mesh_gatt_proxy_set+0x52>
    963a:	e852 3f00 	ldrex	r3, [r2]
    963e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    9642:	e842 3100 	strex	r1, r3, [r2]
    9646:	2900      	cmp	r1, #0
    9648:	d1f7      	bne.n	963a <bt_mesh_gatt_proxy_set+0x22>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    964a:	f3bf 8f5b 	dmb	ish
	err = feature_set(BT_MESH_GATT_PROXY, gatt_proxy);
	if (err) {
		return err;
	}

	bt_mesh_hb_feature_changed(BT_MESH_FEAT_PROXY);
    964e:	2002      	movs	r0, #2
    9650:	f003 f840 	bl	c6d4 <bt_mesh_hb_feature_changed>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9654:	480c      	ldr	r0, [pc, #48]	; (9688 <bt_mesh_gatt_proxy_set+0x70>)
    9656:	f011 ff04 	bl	1b462 <atomic_get>

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    965a:	f010 0001 	ands.w	r0, r0, #1
    965e:	d003      	beq.n	9668 <bt_mesh_gatt_proxy_set+0x50>
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
    9660:	2007      	movs	r0, #7
    9662:	f003 fcd7 	bl	d014 <bt_mesh_settings_store_schedule>
    9666:	2000      	movs	r0, #0
	}

	return 0;
}
    9668:	bd08      	pop	{r3, pc}
    966a:	e852 3f00 	ldrex	r3, [r2]
    966e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    9672:	e842 3100 	strex	r1, r3, [r2]
    9676:	2900      	cmp	r1, #0
    9678:	d0e7      	beq.n	964a <bt_mesh_gatt_proxy_set+0x32>
    967a:	e7f6      	b.n	966a <bt_mesh_gatt_proxy_set+0x52>
		return -EINVAL;
    967c:	f06f 0015 	mvn.w	r0, #21
    9680:	e7f2      	b.n	9668 <bt_mesh_gatt_proxy_set+0x50>
		return -EALREADY;
    9682:	f06f 0077 	mvn.w	r0, #119	; 0x77
    9686:	e7ef      	b.n	9668 <bt_mesh_gatt_proxy_set+0x50>
    9688:	200011d8 	.word	0x200011d8

0000968c <bt_mesh_gatt_proxy_get>:

enum bt_mesh_feat_state bt_mesh_gatt_proxy_get(void)
{
    968c:	b508      	push	{r3, lr}
    968e:	4803      	ldr	r0, [pc, #12]	; (969c <bt_mesh_gatt_proxy_get+0x10>)
    9690:	f011 fee7 	bl	1b462 <atomic_get>
	if (!IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY)) {
		return BT_MESH_FEATURE_NOT_SUPPORTED;
	}

	return feature_get(BT_MESH_GATT_PROXY);
}
    9694:	f3c0 2000 	ubfx	r0, r0, #8, #1
    9698:	bd08      	pop	{r3, pc}
    969a:	bf00      	nop
    969c:	200011d8 	.word	0x200011d8

000096a0 <bt_mesh_default_ttl_set>:

int bt_mesh_default_ttl_set(uint8_t default_ttl)
{
	if (default_ttl == 1 || default_ttl > BT_MESH_TTL_MAX) {
    96a0:	2801      	cmp	r0, #1
{
    96a2:	b508      	push	{r3, lr}
	if (default_ttl == 1 || default_ttl > BT_MESH_TTL_MAX) {
    96a4:	d014      	beq.n	96d0 <bt_mesh_default_ttl_set+0x30>
    96a6:	0602      	lsls	r2, r0, #24
    96a8:	d412      	bmi.n	96d0 <bt_mesh_default_ttl_set+0x30>
		return -EINVAL;
	}

	if (default_ttl == bt_mesh.default_ttl) {
    96aa:	4b0b      	ldr	r3, [pc, #44]	; (96d8 <bt_mesh_default_ttl_set+0x38>)
    96ac:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
    96b0:	4282      	cmp	r2, r0
    96b2:	d101      	bne.n	96b8 <bt_mesh_default_ttl_set+0x18>

	bt_mesh.default_ttl = default_ttl;

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
    96b4:	2000      	movs	r0, #0
	}

	return 0;
}
    96b6:	bd08      	pop	{r3, pc}
	bt_mesh.default_ttl = default_ttl;
    96b8:	f883 0027 	strb.w	r0, [r3, #39]	; 0x27
    96bc:	f103 0008 	add.w	r0, r3, #8
    96c0:	f011 fecf 	bl	1b462 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    96c4:	07c3      	lsls	r3, r0, #31
    96c6:	d5f5      	bpl.n	96b4 <bt_mesh_default_ttl_set+0x14>
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
    96c8:	2007      	movs	r0, #7
    96ca:	f003 fca3 	bl	d014 <bt_mesh_settings_store_schedule>
    96ce:	e7f1      	b.n	96b4 <bt_mesh_default_ttl_set+0x14>
		return -EINVAL;
    96d0:	f06f 0015 	mvn.w	r0, #21
    96d4:	e7ef      	b.n	96b6 <bt_mesh_default_ttl_set+0x16>
    96d6:	bf00      	nop
    96d8:	200011d0 	.word	0x200011d0

000096dc <bt_mesh_default_ttl_get>:

uint8_t bt_mesh_default_ttl_get(void)
{
	return bt_mesh.default_ttl;
}
    96dc:	4b01      	ldr	r3, [pc, #4]	; (96e4 <bt_mesh_default_ttl_get+0x8>)
    96de:	f893 0027 	ldrb.w	r0, [r3, #39]	; 0x27
    96e2:	4770      	bx	lr
    96e4:	200011d0 	.word	0x200011d0

000096e8 <bt_mesh_net_transmit_set>:

	return feature_get(BT_MESH_FRIEND);
}

void bt_mesh_net_transmit_set(uint8_t xmit)
{
    96e8:	b508      	push	{r3, lr}
	if (bt_mesh.net_xmit == xmit) {
    96ea:	4b09      	ldr	r3, [pc, #36]	; (9710 <bt_mesh_net_transmit_set+0x28>)
    96ec:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
    96f0:	4282      	cmp	r2, r0
    96f2:	d00c      	beq.n	970e <bt_mesh_net_transmit_set+0x26>
		return;
	}

	bt_mesh.net_xmit = xmit;
    96f4:	f883 0025 	strb.w	r0, [r3, #37]	; 0x25
    96f8:	f103 0008 	add.w	r0, r3, #8
    96fc:	f011 feb1 	bl	1b462 <atomic_get>

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    9700:	07c3      	lsls	r3, r0, #31
    9702:	d504      	bpl.n	970e <bt_mesh_net_transmit_set+0x26>
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
	}
}
    9704:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
    9708:	2007      	movs	r0, #7
    970a:	f003 bc83 	b.w	d014 <bt_mesh_settings_store_schedule>
}
    970e:	bd08      	pop	{r3, pc}
    9710:	200011d0 	.word	0x200011d0

00009714 <bt_mesh_net_transmit_get>:

uint8_t bt_mesh_net_transmit_get(void)
{
	return bt_mesh.net_xmit;
}
    9714:	4b01      	ldr	r3, [pc, #4]	; (971c <bt_mesh_net_transmit_get+0x8>)
    9716:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
    971a:	4770      	bx	lr
    971c:	200011d0 	.word	0x200011d0

00009720 <bt_mesh_relay_set>:
	if (state != BT_MESH_FEATURE_DISABLED &&
    9720:	2801      	cmp	r0, #1

int bt_mesh_relay_set(enum bt_mesh_feat_state relay, uint8_t xmit)
{
    9722:	b508      	push	{r3, lr}
    9724:	4603      	mov	r3, r0
	if (state != BT_MESH_FEATURE_DISABLED &&
    9726:	d83a      	bhi.n	979e <bt_mesh_relay_set+0x7e>
    9728:	4a1e      	ldr	r2, [pc, #120]	; (97a4 <bt_mesh_relay_set+0x84>)
    972a:	4610      	mov	r0, r2
    972c:	f011 fe99 	bl	1b462 <atomic_get>
	if (atomic_test_bit(bt_mesh.flags, feature_flag) ==
    9730:	f3c0 1080 	ubfx	r0, r0, #6, #1
	    (state == BT_MESH_FEATURE_ENABLED)) {
    9734:	f003 0301 	and.w	r3, r3, #1
	if (atomic_test_bit(bt_mesh.flags, feature_flag) ==
    9738:	4283      	cmp	r3, r0
    973a:	f1a2 0008 	sub.w	r0, r2, #8
    973e:	d027      	beq.n	9790 <bt_mesh_relay_set+0x70>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9740:	f3bf 8f5b 	dmb	ish
	if (val) {
    9744:	b1d3      	cbz	r3, 977c <bt_mesh_relay_set+0x5c>
    9746:	e852 3f00 	ldrex	r3, [r2]
    974a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    974e:	e842 3c00 	strex	ip, r3, [r2]
    9752:	f1bc 0f00 	cmp.w	ip, #0
    9756:	d1f6      	bne.n	9746 <bt_mesh_relay_set+0x26>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9758:	f3bf 8f5b 	dmb	ish

	if (err == -EALREADY && bt_mesh.relay_xmit == xmit) {
		return -EALREADY;
	}

	bt_mesh.relay_xmit = xmit;
    975c:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
	bt_mesh_hb_feature_changed(BT_MESH_FEAT_RELAY);
    9760:	2001      	movs	r0, #1
    9762:	f002 ffb7 	bl	c6d4 <bt_mesh_hb_feature_changed>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9766:	480f      	ldr	r0, [pc, #60]	; (97a4 <bt_mesh_relay_set+0x84>)
    9768:	f011 fe7b 	bl	1b462 <atomic_get>

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    976c:	f010 0001 	ands.w	r0, r0, #1
    9770:	d003      	beq.n	977a <bt_mesh_relay_set+0x5a>
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
    9772:	2007      	movs	r0, #7
    9774:	f003 fc4e 	bl	d014 <bt_mesh_settings_store_schedule>
	}

	return 0;
    9778:	2000      	movs	r0, #0
}
    977a:	bd08      	pop	{r3, pc}
    977c:	e852 3f00 	ldrex	r3, [r2]
    9780:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    9784:	e842 3c00 	strex	ip, r3, [r2]
    9788:	f1bc 0f00 	cmp.w	ip, #0
    978c:	d0e4      	beq.n	9758 <bt_mesh_relay_set+0x38>
    978e:	e7f5      	b.n	977c <bt_mesh_relay_set+0x5c>
	if (err == -EALREADY && bt_mesh.relay_xmit == xmit) {
    9790:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
    9794:	428b      	cmp	r3, r1
    9796:	d1e1      	bne.n	975c <bt_mesh_relay_set+0x3c>
		return -EALREADY;
    9798:	f06f 0077 	mvn.w	r0, #119	; 0x77
    979c:	e7ed      	b.n	977a <bt_mesh_relay_set+0x5a>
		return err;
    979e:	f06f 0015 	mvn.w	r0, #21
    97a2:	e7ea      	b.n	977a <bt_mesh_relay_set+0x5a>
    97a4:	200011d8 	.word	0x200011d8

000097a8 <cfg_set>:
	}
}

static int cfg_set(const char *name, size_t len_rd,
		   settings_read_cb read_cb, void *cb_arg)
{
    97a8:	b513      	push	{r0, r1, r4, lr}
    97aa:	460c      	mov	r4, r1
    97ac:	4610      	mov	r0, r2
    97ae:	4619      	mov	r1, r3
	struct cfg_val cfg;
	int err;

	if (len_rd == 0) {
    97b0:	b17c      	cbz	r4, 97d2 <cfg_set+0x2a>
		BT_DBG("Cleared configuration state");
		return 0;
	}

	err = bt_mesh_settings_set(read_cb, cb_arg, &cfg, sizeof(cfg));
    97b2:	2307      	movs	r3, #7
    97b4:	466a      	mov	r2, sp
    97b6:	f003 fbfb 	bl	cfb0 <bt_mesh_settings_set>
	if (err) {
    97ba:	4604      	mov	r4, r0
    97bc:	b160      	cbz	r0, 97d8 <cfg_set+0x30>
    97be:	4913      	ldr	r1, [pc, #76]	; (980c <cfg_set+0x64>)
    97c0:	4b13      	ldr	r3, [pc, #76]	; (9810 <cfg_set+0x68>)
		BT_ERR("Failed to set \'cfg\'");
    97c2:	4814      	ldr	r0, [pc, #80]	; (9814 <cfg_set+0x6c>)
    97c4:	1ac9      	subs	r1, r1, r3
    97c6:	08c9      	lsrs	r1, r1, #3
    97c8:	0189      	lsls	r1, r1, #6
    97ca:	f041 0101 	orr.w	r1, r1, #1
    97ce:	f00f fb10 	bl	18df2 <log_0>
	bt_mesh_default_ttl_set(cfg.default_ttl);

	BT_DBG("Restored configuration state");

	return 0;
}
    97d2:	4620      	mov	r0, r4
    97d4:	b002      	add	sp, #8
    97d6:	bd10      	pop	{r4, pc}
	bt_mesh_net_transmit_set(cfg.net_transmit);
    97d8:	f89d 0000 	ldrb.w	r0, [sp]
    97dc:	f7ff ff84 	bl	96e8 <bt_mesh_net_transmit_set>
	bt_mesh_relay_set(cfg.relay, cfg.relay_retransmit);
    97e0:	f89d 1002 	ldrb.w	r1, [sp, #2]
    97e4:	f89d 0001 	ldrb.w	r0, [sp, #1]
    97e8:	f7ff ff9a 	bl	9720 <bt_mesh_relay_set>
	bt_mesh_beacon_set(cfg.beacon);
    97ec:	f89d 0003 	ldrb.w	r0, [sp, #3]
    97f0:	3800      	subs	r0, #0
    97f2:	bf18      	it	ne
    97f4:	2001      	movne	r0, #1
    97f6:	f7ff fed1 	bl	959c <bt_mesh_beacon_set>
	bt_mesh_gatt_proxy_set(cfg.gatt_proxy);
    97fa:	f89d 0004 	ldrb.w	r0, [sp, #4]
    97fe:	f7ff ff0b 	bl	9618 <bt_mesh_gatt_proxy_set>
	bt_mesh_default_ttl_set(cfg.default_ttl);
    9802:	f89d 0006 	ldrb.w	r0, [sp, #6]
    9806:	f7ff ff4b 	bl	96a0 <bt_mesh_default_ttl_set>
	return 0;
    980a:	e7e2      	b.n	97d2 <cfg_set+0x2a>
    980c:	0001e540 	.word	0x0001e540
    9810:	0001e408 	.word	0x0001e408
    9814:	00020440 	.word	0x00020440

00009818 <bt_mesh_relay_get>:
{
    9818:	b508      	push	{r3, lr}
    981a:	4803      	ldr	r0, [pc, #12]	; (9828 <bt_mesh_relay_get+0x10>)
    981c:	f011 fe21 	bl	1b462 <atomic_get>
}
    9820:	f3c0 1080 	ubfx	r0, r0, #6, #1
    9824:	bd08      	pop	{r3, pc}
    9826:	bf00      	nop
    9828:	200011d8 	.word	0x200011d8

0000982c <bt_mesh_relay_retransmit_get>:
}
    982c:	4b01      	ldr	r3, [pc, #4]	; (9834 <bt_mesh_relay_retransmit_get+0x8>)
    982e:	f893 0026 	ldrb.w	r0, [r3, #38]	; 0x26
    9832:	4770      	bx	lr
    9834:	200011d0 	.word	0x200011d0

00009838 <adv_alloc>:
static struct bt_mesh_adv adv_pool[CONFIG_BT_MESH_ADV_BUF_COUNT];

static struct bt_mesh_adv *adv_alloc(int id)
{
	return &adv_pool[id];
}
    9838:	4b02      	ldr	r3, [pc, #8]	; (9844 <adv_alloc+0xc>)
    983a:	220c      	movs	r2, #12
    983c:	fb02 3000 	mla	r0, r2, r0, r3
    9840:	4770      	bx	lr
    9842:	bf00      	nop
    9844:	20001abc 	.word	0x20001abc

00009848 <bt_mesh_scan_cb>:
}

static void bt_mesh_scan_cb(const bt_addr_le_t *addr, int8_t rssi,
			    uint8_t adv_type, struct net_buf_simple *buf)
{
	if (adv_type != BT_GAP_ADV_TYPE_ADV_NONCONN_IND) {
    9848:	2a03      	cmp	r2, #3
{
    984a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    984e:	460f      	mov	r7, r1
    9850:	461c      	mov	r4, r3
	if (adv_type != BT_GAP_ADV_TYPE_ADV_NONCONN_IND) {
    9852:	d025      	beq.n	98a0 <bt_mesh_scan_cb+0x58>
		}

		net_buf_simple_restore(buf, &state);
		net_buf_simple_pull(buf, len);
	}
}
    9854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	state->offset = net_buf_simple_headroom(buf);
    9858:	4620      	mov	r0, r4
    985a:	f013 fdc1 	bl	1d3e0 <net_buf_simple_headroom>
    985e:	4606      	mov	r6, r0
		type = net_buf_simple_pull_u8(buf);
    9860:	4620      	mov	r0, r4
	state->len = buf->len;
    9862:	f8b4 8004 	ldrh.w	r8, [r4, #4]
    9866:	f013 fd97 	bl	1d398 <net_buf_simple_pull_u8>
		buf->len = len - 1;
    986a:	1e6b      	subs	r3, r5, #1
		switch (type) {
    986c:	282a      	cmp	r0, #42	; 0x2a
		buf->len = len - 1;
    986e:	80a3      	strh	r3, [r4, #4]
		switch (type) {
    9870:	d007      	beq.n	9882 <bt_mesh_scan_cb+0x3a>
    9872:	282b      	cmp	r0, #43	; 0x2b
    9874:	d02d      	beq.n	98d2 <bt_mesh_scan_cb+0x8a>
    9876:	2829      	cmp	r0, #41	; 0x29
    9878:	d108      	bne.n	988c <bt_mesh_scan_cb+0x44>
			bt_mesh_pb_adv_recv(buf);
    987a:	4620      	mov	r0, r4
    987c:	f004 f968 	bl	db50 <bt_mesh_pb_adv_recv>
			break;
    9880:	e004      	b.n	988c <bt_mesh_scan_cb+0x44>
			bt_mesh_net_recv(buf, rssi, BT_MESH_NET_IF_ADV);
    9882:	2200      	movs	r2, #0
    9884:	4639      	mov	r1, r7
    9886:	4620      	mov	r0, r4
    9888:	f000 fea4 	bl	a5d4 <bt_mesh_net_recv>
	buf->data = buf->__buf + state->offset;
    988c:	68a0      	ldr	r0, [r4, #8]
	buf->len = state->len;
    988e:	f8a4 8004 	strh.w	r8, [r4, #4]
	buf->data = buf->__buf + state->offset;
    9892:	fa10 f686 	uxtah	r6, r0, r6
    9896:	6026      	str	r6, [r4, #0]
		net_buf_simple_pull(buf, len);
    9898:	4629      	mov	r1, r5
    989a:	4620      	mov	r0, r4
    989c:	f013 fd6c 	bl	1d378 <net_buf_simple_pull>
	while (buf->len > 1) {
    98a0:	88a3      	ldrh	r3, [r4, #4]
    98a2:	2b01      	cmp	r3, #1
    98a4:	d9d6      	bls.n	9854 <bt_mesh_scan_cb+0xc>
		len = net_buf_simple_pull_u8(buf);
    98a6:	4620      	mov	r0, r4
    98a8:	f013 fd76 	bl	1d398 <net_buf_simple_pull_u8>
		if (len == 0U) {
    98ac:	4605      	mov	r5, r0
    98ae:	2800      	cmp	r0, #0
    98b0:	d0d0      	beq.n	9854 <bt_mesh_scan_cb+0xc>
		if (len > buf->len) {
    98b2:	88a2      	ldrh	r2, [r4, #4]
    98b4:	b283      	uxth	r3, r0
    98b6:	429a      	cmp	r2, r3
    98b8:	d2ce      	bcs.n	9858 <bt_mesh_scan_cb+0x10>
    98ba:	4908      	ldr	r1, [pc, #32]	; (98dc <bt_mesh_scan_cb+0x94>)
    98bc:	4b08      	ldr	r3, [pc, #32]	; (98e0 <bt_mesh_scan_cb+0x98>)
			BT_WARN("AD malformed");
    98be:	4809      	ldr	r0, [pc, #36]	; (98e4 <bt_mesh_scan_cb+0x9c>)
    98c0:	1ac9      	subs	r1, r1, r3
    98c2:	08c9      	lsrs	r1, r1, #3
    98c4:	0189      	lsls	r1, r1, #6
}
    98c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			BT_WARN("AD malformed");
    98ca:	f041 0102 	orr.w	r1, r1, #2
    98ce:	f00f ba90 	b.w	18df2 <log_0>
			bt_mesh_beacon_recv(buf);
    98d2:	4620      	mov	r0, r4
    98d4:	f000 f960 	bl	9b98 <bt_mesh_beacon_recv>
			break;
    98d8:	e7d8      	b.n	988c <bt_mesh_scan_cb+0x44>
    98da:	bf00      	nop
    98dc:	0001e520 	.word	0x0001e520
    98e0:	0001e408 	.word	0x0001e408
    98e4:	000204ae 	.word	0x000204ae

000098e8 <bt_mesh_adv_create_from_pool>:
{
    98e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    98ec:	461e      	mov	r6, r3
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    98ee:	4b18      	ldr	r3, [pc, #96]	; (9950 <bt_mesh_adv_create_from_pool+0x68>)
    98f0:	f3bf 8f5b 	dmb	ish
    98f4:	681b      	ldr	r3, [r3, #0]
    98f6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_SUSPENDED)) {
    98fa:	f3c3 0840 	ubfx	r8, r3, #1, #1
    98fe:	079b      	lsls	r3, r3, #30
{
    9900:	460d      	mov	r5, r1
    9902:	4617      	mov	r7, r2
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_SUSPENDED)) {
    9904:	d50d      	bpl.n	9922 <bt_mesh_adv_create_from_pool+0x3a>
    9906:	4b13      	ldr	r3, [pc, #76]	; (9954 <bt_mesh_adv_create_from_pool+0x6c>)
    9908:	4913      	ldr	r1, [pc, #76]	; (9958 <bt_mesh_adv_create_from_pool+0x70>)
		BT_WARN("Refusing to allocate buffer while suspended");
    990a:	4814      	ldr	r0, [pc, #80]	; (995c <bt_mesh_adv_create_from_pool+0x74>)
    990c:	1ac9      	subs	r1, r1, r3
    990e:	08c9      	lsrs	r1, r1, #3
    9910:	0189      	lsls	r1, r1, #6
    9912:	f041 0102 	orr.w	r1, r1, #2
    9916:	f00f fa6c 	bl	18df2 <log_0>
		return NULL;
    991a:	2400      	movs	r4, #0
}
    991c:	4620      	mov	r0, r4
    991e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_alloc_fixed(pool, timeout);
    9922:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    9926:	f013 fc45 	bl	1d1b4 <net_buf_alloc_fixed>
	if (!buf) {
    992a:	4604      	mov	r4, r0
    992c:	2800      	cmp	r0, #0
    992e:	d0f5      	beq.n	991c <bt_mesh_adv_create_from_pool+0x34>
	adv = get_id(net_buf_id(buf));
    9930:	f00b fe60 	bl	155f4 <net_buf_id>
    9934:	47a8      	blx	r5
    9936:	4605      	mov	r5, r0
	BT_MESH_ADV(buf) = adv;
    9938:	6160      	str	r0, [r4, #20]
	(void)memset(adv, 0, sizeof(*adv));
    993a:	220c      	movs	r2, #12
    993c:	4641      	mov	r1, r8
    993e:	f010 f95c 	bl	19bfa <memset>
	adv->type         = type;
    9942:	7a2b      	ldrb	r3, [r5, #8]
	adv->xmit         = xmit;
    9944:	726e      	strb	r6, [r5, #9]
	adv->type         = type;
    9946:	f367 0301 	bfi	r3, r7, #0, #2
    994a:	722b      	strb	r3, [r5, #8]
	return buf;
    994c:	e7e6      	b.n	991c <bt_mesh_adv_create_from_pool+0x34>
    994e:	bf00      	nop
    9950:	200011d8 	.word	0x200011d8
    9954:	0001e408 	.word	0x0001e408
    9958:	0001e520 	.word	0x0001e520
    995c:	000204bb 	.word	0x000204bb

00009960 <bt_mesh_adv_create>:
{
    9960:	b507      	push	{r0, r1, r2, lr}
	return bt_mesh_adv_create_from_pool(&adv_buf_pool, adv_alloc, type,
    9962:	e9cd 2300 	strd	r2, r3, [sp]
    9966:	460b      	mov	r3, r1
    9968:	4602      	mov	r2, r0
    996a:	4903      	ldr	r1, [pc, #12]	; (9978 <bt_mesh_adv_create+0x18>)
    996c:	4803      	ldr	r0, [pc, #12]	; (997c <bt_mesh_adv_create+0x1c>)
    996e:	f7ff ffbb 	bl	98e8 <bt_mesh_adv_create_from_pool>
}
    9972:	b003      	add	sp, #12
    9974:	f85d fb04 	ldr.w	pc, [sp], #4
    9978:	00009839 	.word	0x00009839
    997c:	20000c44 	.word	0x20000c44

00009980 <bt_mesh_adv_send>:
{
    9980:	b510      	push	{r4, lr}
	BT_MESH_ADV(buf)->cb = cb;
    9982:	6944      	ldr	r4, [r0, #20]
	BT_MESH_ADV(buf)->cb_data = cb_data;
    9984:	e9c4 1200 	strd	r1, r2, [r4]
	BT_MESH_ADV(buf)->busy = 1U;
    9988:	6942      	ldr	r2, [r0, #20]
    998a:	7a13      	ldrb	r3, [r2, #8]
    998c:	f043 0304 	orr.w	r3, r3, #4
    9990:	7213      	strb	r3, [r2, #8]
	net_buf_put(&bt_mesh_adv_queue, net_buf_ref(buf));
    9992:	f013 fc62 	bl	1d25a <net_buf_ref>
    9996:	4601      	mov	r1, r0
    9998:	4803      	ldr	r0, [pc, #12]	; (99a8 <bt_mesh_adv_send+0x28>)
    999a:	f013 fc51 	bl	1d240 <net_buf_put>
}
    999e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_mesh_adv_buf_ready();
    99a2:	f012 ba0e 	b.w	1bdc2 <bt_mesh_adv_buf_ready>
    99a6:	bf00      	nop
    99a8:	20000bd4 	.word	0x20000bd4

000099ac <bt_mesh_scan_enable>:

int bt_mesh_scan_enable(void)
{
    99ac:	b510      	push	{r4, lr}
    99ae:	b086      	sub	sp, #24
	struct bt_le_scan_param scan_param = {
    99b0:	2214      	movs	r2, #20
    99b2:	2100      	movs	r1, #0
    99b4:	a801      	add	r0, sp, #4
    99b6:	f010 f920 	bl	19bfa <memset>
    99ba:	f04f 1330 	mov.w	r3, #3145776	; 0x300030
			.window     = MESH_SCAN_WINDOW };
	int err;

	BT_DBG("");

	err = bt_le_scan_start(&scan_param, bt_mesh_scan_cb);
    99be:	490d      	ldr	r1, [pc, #52]	; (99f4 <bt_mesh_scan_enable+0x48>)
	struct bt_le_scan_param scan_param = {
    99c0:	9303      	str	r3, [sp, #12]
	err = bt_le_scan_start(&scan_param, bt_mesh_scan_cb);
    99c2:	a801      	add	r0, sp, #4
    99c4:	f7fc facc 	bl	5f60 <bt_le_scan_start>
	if (err && err != -EALREADY) {
    99c8:	4604      	mov	r4, r0
    99ca:	b168      	cbz	r0, 99e8 <bt_mesh_scan_enable+0x3c>
    99cc:	f110 0f78 	cmn.w	r0, #120	; 0x78
    99d0:	d00d      	beq.n	99ee <bt_mesh_scan_enable+0x42>
    99d2:	4a09      	ldr	r2, [pc, #36]	; (99f8 <bt_mesh_scan_enable+0x4c>)
    99d4:	4b09      	ldr	r3, [pc, #36]	; (99fc <bt_mesh_scan_enable+0x50>)
    99d6:	1ad2      	subs	r2, r2, r3
    99d8:	08d2      	lsrs	r2, r2, #3
		BT_ERR("starting scan failed (err %d)", err);
    99da:	0192      	lsls	r2, r2, #6
    99dc:	4601      	mov	r1, r0
    99de:	f042 0201 	orr.w	r2, r2, #1
    99e2:	4807      	ldr	r0, [pc, #28]	; (9a00 <bt_mesh_scan_enable+0x54>)
    99e4:	f00f fa12 	bl	18e0c <log_1>
		return err;
	}

	return 0;
}
    99e8:	4620      	mov	r0, r4
    99ea:	b006      	add	sp, #24
    99ec:	bd10      	pop	{r4, pc}
	return 0;
    99ee:	2400      	movs	r4, #0
    99f0:	e7fa      	b.n	99e8 <bt_mesh_scan_enable+0x3c>
    99f2:	bf00      	nop
    99f4:	00009849 	.word	0x00009849
    99f8:	0001e520 	.word	0x0001e520
    99fc:	0001e408 	.word	0x0001e408
    9a00:	000204e7 	.word	0x000204e7

00009a04 <subnet_by_id>:

	return true;
}

static int subnet_by_id(struct bt_mesh_subnet *sub, void *cb_data)
{
    9a04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    9a08:	4c22      	ldr	r4, [pc, #136]	; (9a94 <subnet_by_id+0x90>)
    9a0a:	4b23      	ldr	r3, [pc, #140]	; (9a98 <subnet_by_id+0x94>)
		BT_WARN("Authentication Value %s != %s",
    9a0c:	f8df a08c 	ldr.w	sl, [pc, #140]	; 9a9c <subnet_by_id+0x98>
    9a10:	1ae4      	subs	r4, r4, r3
    9a12:	08e4      	lsrs	r4, r4, #3
    9a14:	01a4      	lsls	r4, r4, #6
{
    9a16:	460e      	mov	r6, r1
	struct beacon_params *params = cb_data;

	for (int i = 0; i < ARRAY_SIZE(sub->keys); i++) {
    9a18:	f100 055e 	add.w	r5, r0, #94	; 0x5e
    9a1c:	2700      	movs	r7, #0
		BT_WARN("Authentication Value %s != %s",
    9a1e:	f044 0402 	orr.w	r4, r4, #2
		if (sub->keys[i].valid && auth_match(&sub->keys[i], params)) {
    9a22:	f815 3c32 	ldrb.w	r3, [r5, #-50]
    9a26:	b34b      	cbz	r3, 9a7c <subnet_by_id+0x78>
	if (memcmp(params->net_id, keys->net_id, 8)) {
    9a28:	6830      	ldr	r0, [r6, #0]
    9a2a:	2208      	movs	r2, #8
    9a2c:	4629      	mov	r1, r5
    9a2e:	f010 f8a9 	bl	19b84 <memcmp>
    9a32:	bb18      	cbnz	r0, 9a7c <subnet_by_id+0x78>
	bt_mesh_beacon_auth(keys->beacon, params->flags, keys->net_id,
    9a34:	f10d 0908 	add.w	r9, sp, #8
    9a38:	7b31      	ldrb	r1, [r6, #12]
    9a3a:	68b3      	ldr	r3, [r6, #8]
    9a3c:	f8cd 9000 	str.w	r9, [sp]
    9a40:	462a      	mov	r2, r5
    9a42:	f105 0018 	add.w	r0, r5, #24
    9a46:	f012 f897 	bl	1bb78 <bt_mesh_beacon_auth>
	if (memcmp(params->auth, net_auth, 8)) {
    9a4a:	6870      	ldr	r0, [r6, #4]
    9a4c:	2208      	movs	r2, #8
    9a4e:	4649      	mov	r1, r9
    9a50:	f010 f898 	bl	19b84 <memcmp>
    9a54:	b1c0      	cbz	r0, 9a88 <subnet_by_id+0x84>
		BT_WARN("Authentication Value %s != %s",
    9a56:	2108      	movs	r1, #8
    9a58:	6870      	ldr	r0, [r6, #4]
    9a5a:	f7fa fae7 	bl	402c <bt_hex_real>
    9a5e:	f7f8 fc41 	bl	22e4 <z_log_strdup>
    9a62:	2108      	movs	r1, #8
    9a64:	4680      	mov	r8, r0
    9a66:	4648      	mov	r0, r9
    9a68:	f7fa fae0 	bl	402c <bt_hex_real>
    9a6c:	f7f8 fc3a 	bl	22e4 <z_log_strdup>
    9a70:	4623      	mov	r3, r4
    9a72:	4602      	mov	r2, r0
    9a74:	4641      	mov	r1, r8
    9a76:	4650      	mov	r0, sl
    9a78:	f00f f9dc 	bl	18e34 <log_2>
	for (int i = 0; i < ARRAY_SIZE(sub->keys); i++) {
    9a7c:	355a      	adds	r5, #90	; 0x5a
    9a7e:	b10f      	cbz	r7, 9a84 <subnet_by_id+0x80>
			params->new_key = (i > 0);
			return true;
		}
	}

	return false;
    9a80:	2000      	movs	r0, #0
    9a82:	e003      	b.n	9a8c <subnet_by_id+0x88>
    9a84:	2701      	movs	r7, #1
    9a86:	e7cc      	b.n	9a22 <subnet_by_id+0x1e>
			params->new_key = (i > 0);
    9a88:	7377      	strb	r7, [r6, #13]
			return true;
    9a8a:	2001      	movs	r0, #1
}
    9a8c:	b004      	add	sp, #16
    9a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9a92:	bf00      	nop
    9a94:	0001e538 	.word	0x0001e538
    9a98:	0001e408 	.word	0x0001e408
    9a9c:	00020511 	.word	0x00020511

00009aa0 <bt_mesh_beacon_create>:
{
    9aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9aa2:	460c      	mov	r4, r1
    9aa4:	4605      	mov	r5, r0
	uint8_t flags = bt_mesh_net_flags(sub);
    9aa6:	f000 ff9b 	bl	a9e0 <bt_mesh_net_flags>
	net_buf_simple_add_u8(buf, BEACON_TYPE_SECURE);
    9aaa:	2101      	movs	r1, #1
	uint8_t flags = bt_mesh_net_flags(sub);
    9aac:	4607      	mov	r7, r0
	net_buf_simple_add_u8(buf, BEACON_TYPE_SECURE);
    9aae:	4620      	mov	r0, r4
    9ab0:	f013 fc14 	bl	1d2dc <net_buf_simple_add_u8>
	keys = &sub->keys[SUBNET_KEY_TX_IDX(sub)];
    9ab4:	7fae      	ldrb	r6, [r5, #30]
    9ab6:	1eb3      	subs	r3, r6, #2
    9ab8:	425e      	negs	r6, r3
	net_buf_simple_add_u8(buf, flags);
    9aba:	4639      	mov	r1, r7
    9abc:	4620      	mov	r0, r4
	keys = &sub->keys[SUBNET_KEY_TX_IDX(sub)];
    9abe:	415e      	adcs	r6, r3
	net_buf_simple_add_u8(buf, flags);
    9ac0:	f013 fc0c 	bl	1d2dc <net_buf_simple_add_u8>
	net_buf_simple_add_mem(buf, keys->net_id, 8);
    9ac4:	215a      	movs	r1, #90	; 0x5a
    9ac6:	fb01 5106 	mla	r1, r1, r6, r5
    9aca:	2208      	movs	r2, #8
    9acc:	315e      	adds	r1, #94	; 0x5e
    9ace:	4620      	mov	r0, r4
    9ad0:	f013 fbfb 	bl	1d2ca <net_buf_simple_add_mem>
	net_buf_simple_add_be32(buf, bt_mesh.iv_index);
    9ad4:	4b06      	ldr	r3, [pc, #24]	; (9af0 <bt_mesh_beacon_create+0x50>)
    9ad6:	4620      	mov	r0, r4
    9ad8:	6819      	ldr	r1, [r3, #0]
    9ada:	f013 fc11 	bl	1d300 <net_buf_simple_add_be32>
	net_buf_simple_add_mem(buf, sub->auth, 8);
    9ade:	f105 0124 	add.w	r1, r5, #36	; 0x24
    9ae2:	4620      	mov	r0, r4
    9ae4:	2208      	movs	r2, #8
}
    9ae6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	net_buf_simple_add_mem(buf, sub->auth, 8);
    9aea:	f013 bbee 	b.w	1d2ca <net_buf_simple_add_mem>
    9aee:	bf00      	nop
    9af0:	200011d0 	.word	0x200011d0

00009af4 <bt_mesh_beacon_update>:
		break;
	}
}

void bt_mesh_beacon_update(struct bt_mesh_subnet *sub)
{
    9af4:	b513      	push	{r0, r1, r4, lr}
    9af6:	4604      	mov	r4, r0
	uint8_t flags = bt_mesh_net_flags(sub);
    9af8:	f000 ff72 	bl	a9e0 <bt_mesh_net_flags>
	struct bt_mesh_subnet_keys *keys;
	int err;

	keys = &sub->keys[SUBNET_KEY_TX_IDX(sub)];
    9afc:	7fa3      	ldrb	r3, [r4, #30]
    9afe:	3b02      	subs	r3, #2
    9b00:	425a      	negs	r2, r3
    9b02:	415a      	adcs	r2, r3
    9b04:	235a      	movs	r3, #90	; 0x5a
    9b06:	4353      	muls	r3, r2

	BT_DBG("NetIndex 0x%03x Using %s key", sub->net_idx,
	       SUBNET_KEY_TX_IDX(sub) ? "new" : "current");
	BT_DBG("flags 0x%02x, IVI 0x%08x", flags, bt_mesh.iv_index);

	err = bt_mesh_beacon_auth(keys->beacon, flags, keys->net_id,
    9b08:	f103 025e 	add.w	r2, r3, #94	; 0x5e
	uint8_t flags = bt_mesh_net_flags(sub);
    9b0c:	4601      	mov	r1, r0
	err = bt_mesh_beacon_auth(keys->beacon, flags, keys->net_id,
    9b0e:	f103 0076 	add.w	r0, r3, #118	; 0x76
				   bt_mesh.iv_index, sub->auth);
    9b12:	f104 0324 	add.w	r3, r4, #36	; 0x24
	err = bt_mesh_beacon_auth(keys->beacon, flags, keys->net_id,
    9b16:	9300      	str	r3, [sp, #0]
    9b18:	4b0b      	ldr	r3, [pc, #44]	; (9b48 <bt_mesh_beacon_update+0x54>)
    9b1a:	4422      	add	r2, r4
    9b1c:	681b      	ldr	r3, [r3, #0]
    9b1e:	4420      	add	r0, r4
    9b20:	f012 f82a 	bl	1bb78 <bt_mesh_beacon_auth>
	if (err) {
    9b24:	b168      	cbz	r0, 9b42 <bt_mesh_beacon_update+0x4e>
    9b26:	4b09      	ldr	r3, [pc, #36]	; (9b4c <bt_mesh_beacon_update+0x58>)
    9b28:	4a09      	ldr	r2, [pc, #36]	; (9b50 <bt_mesh_beacon_update+0x5c>)
		BT_ERR("Failed updating net beacon for 0x%03x", sub->net_idx);
    9b2a:	8ba1      	ldrh	r1, [r4, #28]
    9b2c:	4809      	ldr	r0, [pc, #36]	; (9b54 <bt_mesh_beacon_update+0x60>)
    9b2e:	1ad2      	subs	r2, r2, r3
    9b30:	08d2      	lsrs	r2, r2, #3
    9b32:	0192      	lsls	r2, r2, #6
    9b34:	f042 0201 	orr.w	r2, r2, #1
	}
}
    9b38:	b002      	add	sp, #8
    9b3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Failed updating net beacon for 0x%03x", sub->net_idx);
    9b3e:	f00f b965 	b.w	18e0c <log_1>
}
    9b42:	b002      	add	sp, #8
    9b44:	bd10      	pop	{r4, pc}
    9b46:	bf00      	nop
    9b48:	200011d0 	.word	0x200011d0
    9b4c:	0001e408 	.word	0x0001e408
    9b50:	0001e538 	.word	0x0001e538
    9b54:	0002052f 	.word	0x0002052f

00009b58 <bt_mesh_beacon_ivu_initiator>:
	if (val) {
    9b58:	4b0d      	ldr	r3, [pc, #52]	; (9b90 <bt_mesh_beacon_ivu_initiator+0x38>)
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9b5a:	f3bf 8f5b 	dmb	ish
    9b5e:	b170      	cbz	r0, 9b7e <bt_mesh_beacon_ivu_initiator+0x26>
    9b60:	e853 2f00 	ldrex	r2, [r3]
    9b64:	f042 0208 	orr.w	r2, r2, #8
    9b68:	e843 2100 	strex	r1, r2, [r3]
    9b6c:	2900      	cmp	r1, #0
    9b6e:	d1f7      	bne.n	9b60 <bt_mesh_beacon_ivu_initiator+0x8>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9b70:	f3bf 8f5b 	dmb	ish
	 * An alternative solution would be to check whether beacons are enabled
	 * here, and cancel if not. As the cancel operation may fail, we would
	 * still have to implement an early exit mechanism, so we might as well
	 * just use this every time.
	 */
	k_work_schedule(&beacon_timer, K_NO_WAIT);
    9b74:	4807      	ldr	r0, [pc, #28]	; (9b94 <bt_mesh_beacon_ivu_initiator+0x3c>)
    9b76:	2200      	movs	r2, #0
    9b78:	2300      	movs	r3, #0
    9b7a:	f00d be07 	b.w	1778c <k_work_schedule>
    9b7e:	e853 2f00 	ldrex	r2, [r3]
    9b82:	f022 0208 	bic.w	r2, r2, #8
    9b86:	e843 2100 	strex	r1, r2, [r3]
    9b8a:	2900      	cmp	r1, #0
    9b8c:	d0f0      	beq.n	9b70 <bt_mesh_beacon_ivu_initiator+0x18>
    9b8e:	e7f6      	b.n	9b7e <bt_mesh_beacon_ivu_initiator+0x26>
    9b90:	200011d8 	.word	0x200011d8
    9b94:	200011a0 	.word	0x200011a0

00009b98 <bt_mesh_beacon_recv>:
{
    9b98:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < 1) {
    9b9a:	8883      	ldrh	r3, [r0, #4]
{
    9b9c:	b085      	sub	sp, #20
    9b9e:	4604      	mov	r4, r0
	if (buf->len < 1) {
    9ba0:	b953      	cbnz	r3, 9bb8 <bt_mesh_beacon_recv+0x20>
    9ba2:	4964      	ldr	r1, [pc, #400]	; (9d34 <bt_mesh_beacon_recv+0x19c>)
    9ba4:	4b64      	ldr	r3, [pc, #400]	; (9d38 <bt_mesh_beacon_recv+0x1a0>)
		BT_ERR("Too short beacon");
    9ba6:	4865      	ldr	r0, [pc, #404]	; (9d3c <bt_mesh_beacon_recv+0x1a4>)
    9ba8:	1ac9      	subs	r1, r1, r3
    9baa:	08c9      	lsrs	r1, r1, #3
    9bac:	0189      	lsls	r1, r1, #6
    9bae:	f041 0101 	orr.w	r1, r1, #1
		BT_WARN("Ignoring Phase 2 KR Update secured using old key");
    9bb2:	f00f f91e 	bl	18df2 <log_0>
		return;
    9bb6:	e038      	b.n	9c2a <bt_mesh_beacon_recv+0x92>
	type = net_buf_simple_pull_u8(buf);
    9bb8:	f013 fbee 	bl	1d398 <net_buf_simple_pull_u8>
	switch (type) {
    9bbc:	4605      	mov	r5, r0
    9bbe:	b158      	cbz	r0, 9bd8 <bt_mesh_beacon_recv+0x40>
    9bc0:	2801      	cmp	r0, #1
    9bc2:	d034      	beq.n	9c2e <bt_mesh_beacon_recv+0x96>
    9bc4:	4a5b      	ldr	r2, [pc, #364]	; (9d34 <bt_mesh_beacon_recv+0x19c>)
    9bc6:	4b5c      	ldr	r3, [pc, #368]	; (9d38 <bt_mesh_beacon_recv+0x1a0>)
    9bc8:	1ad2      	subs	r2, r2, r3
    9bca:	08d2      	lsrs	r2, r2, #3
		BT_WARN("Unknown beacon type 0x%02x", type);
    9bcc:	0192      	lsls	r2, r2, #6
    9bce:	4601      	mov	r1, r0
    9bd0:	f042 0202 	orr.w	r2, r2, #2
    9bd4:	485a      	ldr	r0, [pc, #360]	; (9d40 <bt_mesh_beacon_recv+0x1a8>)
    9bd6:	e00c      	b.n	9bf2 <bt_mesh_beacon_recv+0x5a>
	if (buf->len != 18 && buf->len != 22) {
    9bd8:	88a1      	ldrh	r1, [r4, #4]
    9bda:	f021 0304 	bic.w	r3, r1, #4
    9bde:	2b12      	cmp	r3, #18
    9be0:	d00a      	beq.n	9bf8 <bt_mesh_beacon_recv+0x60>
    9be2:	4a54      	ldr	r2, [pc, #336]	; (9d34 <bt_mesh_beacon_recv+0x19c>)
    9be4:	4b54      	ldr	r3, [pc, #336]	; (9d38 <bt_mesh_beacon_recv+0x1a0>)
		BT_ERR("Invalid unprovisioned beacon length (%u)", buf->len);
    9be6:	4857      	ldr	r0, [pc, #348]	; (9d44 <bt_mesh_beacon_recv+0x1ac>)
    9be8:	1ad2      	subs	r2, r2, r3
    9bea:	08d2      	lsrs	r2, r2, #3
    9bec:	0192      	lsls	r2, r2, #6
    9bee:	f042 0201 	orr.w	r2, r2, #1
		BT_WARN("Unknown beacon type 0x%02x", type);
    9bf2:	f00f f90b 	bl	18e0c <log_1>
    9bf6:	e018      	b.n	9c2a <bt_mesh_beacon_recv+0x92>
	uuid = net_buf_simple_pull_mem(buf, 16);
    9bf8:	2110      	movs	r1, #16
    9bfa:	4620      	mov	r0, r4
    9bfc:	f013 fbc4 	bl	1d388 <net_buf_simple_pull_mem>
    9c00:	4606      	mov	r6, r0
	oob_info = net_buf_simple_pull_be16(buf);
    9c02:	4620      	mov	r0, r4
    9c04:	f013 fbd8 	bl	1d3b8 <net_buf_simple_pull_be16>
	if (buf->len == 4) {
    9c08:	88a3      	ldrh	r3, [r4, #4]
    9c0a:	2b04      	cmp	r3, #4
	oob_info = net_buf_simple_pull_be16(buf);
    9c0c:	4607      	mov	r7, r0
	if (buf->len == 4) {
    9c0e:	d104      	bne.n	9c1a <bt_mesh_beacon_recv+0x82>
		uri_hash_val = net_buf_simple_pull_be32(buf);
    9c10:	4620      	mov	r0, r4
    9c12:	f013 fbdc 	bl	1d3ce <net_buf_simple_pull_be32>
		uri_hash = &uri_hash_val;
    9c16:	466d      	mov	r5, sp
		uri_hash_val = net_buf_simple_pull_be32(buf);
    9c18:	9000      	str	r0, [sp, #0]
	prov = bt_mesh_prov_get();
    9c1a:	f003 fa5b 	bl	d0d4 <bt_mesh_prov_get>
	if (prov->unprovisioned_beacon) {
    9c1e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    9c20:	b11b      	cbz	r3, 9c2a <bt_mesh_beacon_recv+0x92>
		prov->unprovisioned_beacon(uuid,
    9c22:	462a      	mov	r2, r5
    9c24:	4639      	mov	r1, r7
    9c26:	4630      	mov	r0, r6
    9c28:	4798      	blx	r3
}
    9c2a:	b005      	add	sp, #20
    9c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (buf->len < 21) {
    9c2e:	88a1      	ldrh	r1, [r4, #4]
    9c30:	2914      	cmp	r1, #20
    9c32:	d808      	bhi.n	9c46 <bt_mesh_beacon_recv+0xae>
    9c34:	4a3f      	ldr	r2, [pc, #252]	; (9d34 <bt_mesh_beacon_recv+0x19c>)
    9c36:	4b40      	ldr	r3, [pc, #256]	; (9d38 <bt_mesh_beacon_recv+0x1a0>)
		BT_ERR("Too short secure beacon (len %u)", buf->len);
    9c38:	4843      	ldr	r0, [pc, #268]	; (9d48 <bt_mesh_beacon_recv+0x1b0>)
    9c3a:	1ad2      	subs	r2, r2, r3
    9c3c:	08d2      	lsrs	r2, r2, #3
    9c3e:	0192      	lsls	r2, r2, #6
    9c40:	f042 0201 	orr.w	r2, r2, #1
    9c44:	e7d5      	b.n	9bf2 <bt_mesh_beacon_recv+0x5a>
	sub = bt_mesh_subnet_find(cache_check, buf->data);
    9c46:	6821      	ldr	r1, [r4, #0]
    9c48:	4840      	ldr	r0, [pc, #256]	; (9d4c <bt_mesh_beacon_recv+0x1b4>)
    9c4a:	f000 ffbd 	bl	abc8 <bt_mesh_subnet_find>
	if (sub) {
    9c4e:	4605      	mov	r5, r0
    9c50:	2800      	cmp	r0, #0
    9c52:	d144      	bne.n	9cde <bt_mesh_beacon_recv+0x146>
	params.flags = net_buf_simple_pull_u8(buf);
    9c54:	4620      	mov	r0, r4
	data = buf->data;
    9c56:	6826      	ldr	r6, [r4, #0]
	params.flags = net_buf_simple_pull_u8(buf);
    9c58:	f013 fb9e 	bl	1d398 <net_buf_simple_pull_u8>
	params.net_id = net_buf_simple_pull_mem(buf, 8);
    9c5c:	2108      	movs	r1, #8
	params.flags = net_buf_simple_pull_u8(buf);
    9c5e:	f88d 000c 	strb.w	r0, [sp, #12]
	params.net_id = net_buf_simple_pull_mem(buf, 8);
    9c62:	4620      	mov	r0, r4
    9c64:	f013 fb90 	bl	1d388 <net_buf_simple_pull_mem>
    9c68:	9000      	str	r0, [sp, #0]
	params.iv_index = net_buf_simple_pull_be32(buf);
    9c6a:	4620      	mov	r0, r4
    9c6c:	f013 fbaf 	bl	1d3ce <net_buf_simple_pull_be32>
	params.auth = buf->data;
    9c70:	6823      	ldr	r3, [r4, #0]
	params.iv_index = net_buf_simple_pull_be32(buf);
    9c72:	9002      	str	r0, [sp, #8]
	sub = bt_mesh_subnet_find(subnet_by_id, &params);
    9c74:	4669      	mov	r1, sp
    9c76:	4836      	ldr	r0, [pc, #216]	; (9d50 <bt_mesh_beacon_recv+0x1b8>)
	params.auth = buf->data;
    9c78:	9301      	str	r3, [sp, #4]
	sub = bt_mesh_subnet_find(subnet_by_id, &params);
    9c7a:	f000 ffa5 	bl	abc8 <bt_mesh_subnet_find>
	if (!sub) {
    9c7e:	4605      	mov	r5, r0
    9c80:	2800      	cmp	r0, #0
    9c82:	d0d2      	beq.n	9c2a <bt_mesh_beacon_recv+0x92>
	if (sub->kr_phase == BT_MESH_KR_PHASE_2 && !params.new_key) {
    9c84:	7f83      	ldrb	r3, [r0, #30]
    9c86:	2b02      	cmp	r3, #2
    9c88:	d10b      	bne.n	9ca2 <bt_mesh_beacon_recv+0x10a>
    9c8a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9c8e:	b943      	cbnz	r3, 9ca2 <bt_mesh_beacon_recv+0x10a>
    9c90:	4928      	ldr	r1, [pc, #160]	; (9d34 <bt_mesh_beacon_recv+0x19c>)
    9c92:	4b29      	ldr	r3, [pc, #164]	; (9d38 <bt_mesh_beacon_recv+0x1a0>)
		BT_WARN("Ignoring Phase 2 KR Update secured using old key");
    9c94:	482f      	ldr	r0, [pc, #188]	; (9d54 <bt_mesh_beacon_recv+0x1bc>)
    9c96:	1ac9      	subs	r1, r1, r3
    9c98:	08c9      	lsrs	r1, r1, #3
    9c9a:	0189      	lsls	r1, r1, #6
    9c9c:	f041 0102 	orr.w	r1, r1, #2
    9ca0:	e787      	b.n	9bb2 <bt_mesh_beacon_recv+0x1a>
	memcpy(sub->beacon_cache, data, 21);
    9ca2:	2215      	movs	r2, #21
    9ca4:	4631      	mov	r1, r6
    9ca6:	1da8      	adds	r0, r5, #6
    9ca8:	f00f ff7c 	bl	19ba4 <memcpy>
	bt_mesh_kr_update(sub, BT_MESH_KEY_REFRESH(params.flags),
    9cac:	f89d 100c 	ldrb.w	r1, [sp, #12]
    9cb0:	f89d 200d 	ldrb.w	r2, [sp, #13]
    9cb4:	4628      	mov	r0, r5
    9cb6:	f001 0101 	and.w	r1, r1, #1
    9cba:	f011 fc5c 	bl	1b576 <bt_mesh_kr_update>
	if (bt_mesh_subnet_get(BT_MESH_KEY_PRIMARY) &&
    9cbe:	2000      	movs	r0, #0
    9cc0:	f000 fea0 	bl	aa04 <bt_mesh_subnet_get>
    9cc4:	b1a8      	cbz	r0, 9cf2 <bt_mesh_beacon_recv+0x15a>
    9cc6:	8bab      	ldrh	r3, [r5, #28]
    9cc8:	b19b      	cbz	r3, 9cf2 <bt_mesh_beacon_recv+0x15a>
    9cca:	491a      	ldr	r1, [pc, #104]	; (9d34 <bt_mesh_beacon_recv+0x19c>)
    9ccc:	4b1a      	ldr	r3, [pc, #104]	; (9d38 <bt_mesh_beacon_recv+0x1a0>)
		BT_WARN("Ignoring secure beacon on non-primary subnet");
    9cce:	4822      	ldr	r0, [pc, #136]	; (9d58 <bt_mesh_beacon_recv+0x1c0>)
    9cd0:	1ac9      	subs	r1, r1, r3
    9cd2:	08c9      	lsrs	r1, r1, #3
    9cd4:	0189      	lsls	r1, r1, #6
    9cd6:	f041 0102 	orr.w	r1, r1, #2
    9cda:	f00f f88a 	bl	18df2 <log_0>
	if (bt_mesh_beacon_enabled() &&
    9cde:	f7ff fc91 	bl	9604 <bt_mesh_beacon_enabled>
    9ce2:	2800      	cmp	r0, #0
    9ce4:	d0a1      	beq.n	9c2a <bt_mesh_beacon_recv+0x92>
	    sub->beacons_cur < 0xff) {
    9ce6:	796b      	ldrb	r3, [r5, #5]
	if (bt_mesh_beacon_enabled() &&
    9ce8:	2bff      	cmp	r3, #255	; 0xff
    9cea:	d09e      	beq.n	9c2a <bt_mesh_beacon_recv+0x92>
		sub->beacons_cur++;
    9cec:	3301      	adds	r3, #1
    9cee:	716b      	strb	r3, [r5, #5]
    9cf0:	e79b      	b.n	9c2a <bt_mesh_beacon_recv+0x92>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9cf2:	4b1a      	ldr	r3, [pc, #104]	; (9d5c <bt_mesh_beacon_recv+0x1c4>)
    9cf4:	f3bf 8f5b 	dmb	ish
    9cf8:	681a      	ldr	r2, [r3, #0]
    9cfa:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR) &&
    9cfe:	0712      	lsls	r2, r2, #28
    9d00:	d50f      	bpl.n	9d22 <bt_mesh_beacon_recv+0x18a>
    9d02:	f3bf 8f5b 	dmb	ish
    9d06:	681a      	ldr	r2, [r3, #0]
    9d08:	f3bf 8f5b 	dmb	ish
	     BT_MESH_IV_UPDATE(params.flags))) {
    9d0c:	f89d 300c 	ldrb.w	r3, [sp, #12]
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR) &&
    9d10:	f3c2 0280 	ubfx	r2, r2, #2, #1
	     BT_MESH_IV_UPDATE(params.flags))) {
    9d14:	f3c3 0340 	ubfx	r3, r3, #1, #1
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR) &&
    9d18:	429a      	cmp	r2, r3
    9d1a:	d102      	bne.n	9d22 <bt_mesh_beacon_recv+0x18a>
		bt_mesh_beacon_ivu_initiator(false);
    9d1c:	2000      	movs	r0, #0
    9d1e:	f7ff ff1b 	bl	9b58 <bt_mesh_beacon_ivu_initiator>
	bt_mesh_net_iv_update(params.iv_index, BT_MESH_IV_UPDATE(params.flags));
    9d22:	f89d 100c 	ldrb.w	r1, [sp, #12]
    9d26:	9802      	ldr	r0, [sp, #8]
    9d28:	f3c1 0140 	ubfx	r1, r1, #1, #1
    9d2c:	f000 f97a 	bl	a024 <bt_mesh_net_iv_update>
    9d30:	e7d5      	b.n	9cde <bt_mesh_beacon_recv+0x146>
    9d32:	bf00      	nop
    9d34:	0001e538 	.word	0x0001e538
    9d38:	0001e408 	.word	0x0001e408
    9d3c:	00020555 	.word	0x00020555
    9d40:	0002060e 	.word	0x0002060e
    9d44:	00020566 	.word	0x00020566
    9d48:	0002058f 	.word	0x0002058f
    9d4c:	0001b4a7 	.word	0x0001b4a7
    9d50:	00009a05 	.word	0x00009a05
    9d54:	000205b0 	.word	0x000205b0
    9d58:	000205e1 	.word	0x000205e1
    9d5c:	200011d8 	.word	0x200011d8

00009d60 <bt_mesh_beacon_enable>:

	bt_mesh_beacon_update(sub);
}

void bt_mesh_beacon_enable(void)
{
    9d60:	b510      	push	{r4, lr}
	if (bt_mesh_is_provisioned()) {
    9d62:	f7ff fbd3 	bl	950c <bt_mesh_is_provisioned>
    9d66:	b110      	cbz	r0, 9d6e <bt_mesh_beacon_enable+0xe>
		bt_mesh_subnet_foreach(subnet_beacon_enable);
    9d68:	4804      	ldr	r0, [pc, #16]	; (9d7c <bt_mesh_beacon_enable+0x1c>)
    9d6a:	f000 ff51 	bl	ac10 <bt_mesh_subnet_foreach>
	}

	k_work_reschedule(&beacon_timer, K_NO_WAIT);
}
    9d6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_reschedule(&beacon_timer, K_NO_WAIT);
    9d72:	4803      	ldr	r0, [pc, #12]	; (9d80 <bt_mesh_beacon_enable+0x20>)
    9d74:	2200      	movs	r2, #0
    9d76:	2300      	movs	r3, #0
    9d78:	f00d bd3c 	b.w	177f4 <k_work_reschedule>
    9d7c:	0001b4c3 	.word	0x0001b4c3
    9d80:	200011a0 	.word	0x200011a0

00009d84 <bt_mesh_beacon_disable>:
    9d84:	4b05      	ldr	r3, [pc, #20]	; (9d9c <bt_mesh_beacon_disable+0x18>)
    9d86:	f3bf 8f5b 	dmb	ish
    9d8a:	681b      	ldr	r3, [r3, #0]
    9d8c:	f3bf 8f5b 	dmb	ish

void bt_mesh_beacon_disable(void)
{
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR)) {
    9d90:	071b      	lsls	r3, r3, #28
    9d92:	d402      	bmi.n	9d9a <bt_mesh_beacon_disable+0x16>
		/* If this fails, we'll do an early exit in the work handler. */
		(void)k_work_cancel_delayable(&beacon_timer);
    9d94:	4802      	ldr	r0, [pc, #8]	; (9da0 <bt_mesh_beacon_disable+0x1c>)
    9d96:	f013 bf22 	b.w	1dbde <k_work_cancel_delayable>
	}
}
    9d9a:	4770      	bx	lr
    9d9c:	200011d8 	.word	0x200011d8
    9da0:	200011a0 	.word	0x200011a0

00009da4 <net_decrypt>:
}

static bool net_decrypt(struct bt_mesh_net_rx *rx, struct net_buf_simple *in,
			struct net_buf_simple *out,
			const struct bt_mesh_net_cred *cred)
{
    9da4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9da8:	461e      	mov	r6, r3
	bool proxy = (rx->net_if == BT_MESH_NET_IF_PROXY_CFG);

	if (NID(in->data) != cred->nid) {
    9daa:	680b      	ldr	r3, [r1, #0]
{
    9dac:	4614      	mov	r4, r2
	if (NID(in->data) != cred->nid) {
    9dae:	781a      	ldrb	r2, [r3, #0]
{
    9db0:	4605      	mov	r5, r0
	if (NID(in->data) != cred->nid) {
    9db2:	7830      	ldrb	r0, [r6, #0]
    9db4:	f002 037f 	and.w	r3, r2, #127	; 0x7f
    9db8:	4298      	cmp	r0, r3
    9dba:	d002      	beq.n	9dc2 <net_decrypt+0x1e>
		return false;
    9dbc:	2000      	movs	r0, #0

	BT_DBG("src 0x%04x", rx->ctx.addr);

	return bt_mesh_net_decrypt(cred->enc, out, BT_MESH_NET_IVI_RX(rx),
				   proxy) == 0;
}
    9dbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	rx->old_iv = (IVI(in->data) != (bt_mesh.iv_index & 0x01));
    9dc2:	4f30      	ldr	r7, [pc, #192]	; (9e84 <net_decrypt+0xe0>)
	bool proxy = (rx->net_if == BT_MESH_NET_IF_PROXY_CFG);
    9dc4:	f895 8014 	ldrb.w	r8, [r5, #20]
	rx->old_iv = (IVI(in->data) != (bt_mesh.iv_index & 0x01));
    9dc8:	683b      	ldr	r3, [r7, #0]
    9dca:	f003 0301 	and.w	r3, r3, #1
    9dce:	ea83 13d2 	eor.w	r3, r3, r2, lsr #7
    9dd2:	4642      	mov	r2, r8
    9dd4:	f363 0200 	bfi	r2, r3, #0, #1
	buf->len  = 0U;
    9dd8:	2300      	movs	r3, #0
    9dda:	752a      	strb	r2, [r5, #20]
    9ddc:	80a3      	strh	r3, [r4, #4]
	buf->data = buf->__buf;
    9dde:	68a3      	ldr	r3, [r4, #8]
    9de0:	6023      	str	r3, [r4, #0]
	net_buf_simple_add_mem(out, in->data, in->len);
    9de2:	888a      	ldrh	r2, [r1, #4]
    9de4:	6809      	ldr	r1, [r1, #0]
    9de6:	4620      	mov	r0, r4
    9de8:	f013 fa6f 	bl	1d2ca <net_buf_simple_add_mem>
	if (bt_mesh_net_obfuscate(out->data, BT_MESH_NET_IVI_RX(rx),
    9dec:	7d2b      	ldrb	r3, [r5, #20]
    9dee:	6839      	ldr	r1, [r7, #0]
    9df0:	6820      	ldr	r0, [r4, #0]
    9df2:	f003 0301 	and.w	r3, r3, #1
    9df6:	f106 0211 	add.w	r2, r6, #17
    9dfa:	1ac9      	subs	r1, r1, r3
    9dfc:	f002 fd4a 	bl	c894 <bt_mesh_net_obfuscate>
    9e00:	2800      	cmp	r0, #0
    9e02:	d1db      	bne.n	9dbc <net_decrypt+0x18>
	rx->ctx.addr = SRC(out->data);
    9e04:	6823      	ldr	r3, [r4, #0]
	return ((uint16_t)src[0] << 8) | src[1];
    9e06:	795a      	ldrb	r2, [r3, #5]
    9e08:	7998      	ldrb	r0, [r3, #6]
    9e0a:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
    9e0e:	b203      	sxth	r3, r0
	if (!BT_MESH_ADDR_IS_UNICAST(rx->ctx.addr)) {
    9e10:	2b00      	cmp	r3, #0
	rx->ctx.addr = SRC(out->data);
    9e12:	8128      	strh	r0, [r5, #8]
	if (!BT_MESH_ADDR_IS_UNICAST(rx->ctx.addr)) {
    9e14:	ddd2      	ble.n	9dbc <net_decrypt+0x18>
	if (bt_mesh_elem_find(rx->ctx.addr)) {
    9e16:	f002 ff65 	bl	cce4 <bt_mesh_elem_find>
    9e1a:	2800      	cmp	r0, #0
    9e1c:	d1ce      	bne.n	9dbc <net_decrypt+0x18>
	if (rx->net_if == BT_MESH_NET_IF_ADV && msg_cache_match(out)) {
    9e1e:	7d2d      	ldrb	r5, [r5, #20]
    9e20:	f015 0130 	ands.w	r1, r5, #48	; 0x30
    9e24:	d11c      	bne.n	9e60 <net_decrypt+0xbc>
		if (msg_cache[i].src == SRC(pdu->data) &&
    9e26:	6823      	ldr	r3, [r4, #0]
    9e28:	f8df b05c 	ldr.w	fp, [pc, #92]	; 9e88 <net_decrypt+0xe4>
    9e2c:	795a      	ldrb	r2, [r3, #5]
    9e2e:	f893 a006 	ldrb.w	sl, [r3, #6]
		    msg_cache[i].seq == (SEQ(pdu->data) & BIT_MASK(17))) {
    9e32:	f103 0902 	add.w	r9, r3, #2
		if (msg_cache[i].src == SRC(pdu->data) &&
    9e36:	ea4a 2a02 	orr.w	sl, sl, r2, lsl #8
    9e3a:	f83b 3021 	ldrh.w	r3, [fp, r1, lsl #2]
    9e3e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    9e42:	4553      	cmp	r3, sl
    9e44:	d109      	bne.n	9e5a <net_decrypt+0xb6>
		    msg_cache[i].seq == (SEQ(pdu->data) & BIT_MASK(17))) {
    9e46:	4648      	mov	r0, r9
    9e48:	f011 fb3f 	bl	1b4ca <sys_get_be24>
    9e4c:	f85b 3021 	ldr.w	r3, [fp, r1, lsl #2]
    9e50:	f3c0 0010 	ubfx	r0, r0, #0, #17
		if (msg_cache[i].src == SRC(pdu->data) &&
    9e54:	ebb0 3fd3 	cmp.w	r0, r3, lsr #15
    9e58:	d0b0      	beq.n	9dbc <net_decrypt+0x18>
	for (i = 0U; i < ARRAY_SIZE(msg_cache); i++) {
    9e5a:	3101      	adds	r1, #1
    9e5c:	290a      	cmp	r1, #10
    9e5e:	d1ec      	bne.n	9e3a <net_decrypt+0x96>
	bool proxy = (rx->net_if == BT_MESH_NET_IF_PROXY_CFG);
    9e60:	f008 0330 	and.w	r3, r8, #48	; 0x30
	return bt_mesh_net_decrypt(cred->enc, out, BT_MESH_NET_IVI_RX(rx),
    9e64:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    9e68:	683a      	ldr	r2, [r7, #0]
    9e6a:	424b      	negs	r3, r1
    9e6c:	f005 0501 	and.w	r5, r5, #1
    9e70:	414b      	adcs	r3, r1
    9e72:	1b52      	subs	r2, r2, r5
    9e74:	4621      	mov	r1, r4
    9e76:	1c70      	adds	r0, r6, #1
    9e78:	f011 fe07 	bl	1ba8a <bt_mesh_net_decrypt>
				   proxy) == 0;
    9e7c:	fab0 f080 	clz	r0, r0
    9e80:	0940      	lsrs	r0, r0, #5
    9e82:	e79c      	b.n	9dbe <net_decrypt+0x1a>
    9e84:	200011d0 	.word	0x200011d0
    9e88:	20001bd8 	.word	0x20001bd8

00009e8c <seq_set>:

BT_MESH_SETTINGS_DEFINE(iv, "IV", iv_set);

static int seq_set(const char *name, size_t len_rd, settings_read_cb read_cb,
		   void *cb_arg)
{
    9e8c:	b513      	push	{r0, r1, r4, lr}
    9e8e:	460c      	mov	r4, r1
    9e90:	4610      	mov	r0, r2
    9e92:	4619      	mov	r1, r3
	struct seq_val seq;
	int err;

	if (len_rd == 0) {
    9e94:	b924      	cbnz	r4, 9ea0 <seq_set+0x14>
		BT_DBG("val (null)");

		bt_mesh.seq = 0U;
    9e96:	4b13      	ldr	r3, [pc, #76]	; (9ee4 <seq_set+0x58>)
    9e98:	605c      	str	r4, [r3, #4]
	}

	BT_DBG("Sequence Number 0x%06x", bt_mesh.seq);

	return 0;
}
    9e9a:	4620      	mov	r0, r4
    9e9c:	b002      	add	sp, #8
    9e9e:	bd10      	pop	{r4, pc}
	err = bt_mesh_settings_set(read_cb, cb_arg, &seq, sizeof(seq));
    9ea0:	2303      	movs	r3, #3
    9ea2:	aa01      	add	r2, sp, #4
    9ea4:	f003 f884 	bl	cfb0 <bt_mesh_settings_set>
	if (err) {
    9ea8:	4604      	mov	r4, r0
    9eaa:	b150      	cbz	r0, 9ec2 <seq_set+0x36>
    9eac:	4b0e      	ldr	r3, [pc, #56]	; (9ee8 <seq_set+0x5c>)
    9eae:	490f      	ldr	r1, [pc, #60]	; (9eec <seq_set+0x60>)
		BT_ERR("Failed to set \'seq\'");
    9eb0:	480f      	ldr	r0, [pc, #60]	; (9ef0 <seq_set+0x64>)
    9eb2:	1ac9      	subs	r1, r1, r3
    9eb4:	08c9      	lsrs	r1, r1, #3
    9eb6:	0189      	lsls	r1, r1, #6
    9eb8:	f041 0101 	orr.w	r1, r1, #1
    9ebc:	f00e ff99 	bl	18df2 <log_0>
		return err;
    9ec0:	e7eb      	b.n	9e9a <seq_set+0xe>
	return ((uint16_t)src[1] << 8) | src[0];
    9ec2:	f89d 2005 	ldrb.w	r2, [sp, #5]
    9ec6:	f89d 3004 	ldrb.w	r3, [sp, #4]
	return ((uint32_t)src[2] << 16) | sys_get_le16(&src[0]);
    9eca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    9ece:	f89d 2006 	ldrb.w	r2, [sp, #6]
    9ed2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
		bt_mesh.seq += (CONFIG_BT_MESH_SEQ_STORE_RATE -
    9ed6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
		bt_mesh.seq--;
    9eda:	4a02      	ldr	r2, [pc, #8]	; (9ee4 <seq_set+0x58>)
    9edc:	337f      	adds	r3, #127	; 0x7f
    9ede:	6053      	str	r3, [r2, #4]
	return 0;
    9ee0:	e7db      	b.n	9e9a <seq_set+0xe>
    9ee2:	bf00      	nop
    9ee4:	200011d0 	.word	0x200011d0
    9ee8:	0001e408 	.word	0x0001e408
    9eec:	0001e588 	.word	0x0001e588
    9ef0:	00020638 	.word	0x00020638

00009ef4 <net_set>:
{
    9ef4:	b510      	push	{r4, lr}
    9ef6:	460c      	mov	r4, r1
    9ef8:	b086      	sub	sp, #24
    9efa:	4610      	mov	r0, r2
    9efc:	4619      	mov	r1, r3
	if (len_rd == 0) {
    9efe:	b94c      	cbnz	r4, 9f14 <net_set+0x20>
		bt_mesh_comp_unprovision();
    9f00:	f002 fee4 	bl	cccc <bt_mesh_comp_unprovision>
		(void)memset(bt_mesh.dev_key, 0, sizeof(bt_mesh.dev_key));
    9f04:	4811      	ldr	r0, [pc, #68]	; (9f4c <net_set+0x58>)
    9f06:	2210      	movs	r2, #16
    9f08:	4621      	mov	r1, r4
    9f0a:	f00f fe76 	bl	19bfa <memset>
}
    9f0e:	4620      	mov	r0, r4
    9f10:	b006      	add	sp, #24
    9f12:	bd10      	pop	{r4, pc}
	err = bt_mesh_settings_set(read_cb, cb_arg, &net, sizeof(net));
    9f14:	2312      	movs	r3, #18
    9f16:	aa01      	add	r2, sp, #4
    9f18:	f003 f84a 	bl	cfb0 <bt_mesh_settings_set>
	if (err) {
    9f1c:	4604      	mov	r4, r0
    9f1e:	b150      	cbz	r0, 9f36 <net_set+0x42>
    9f20:	4b0b      	ldr	r3, [pc, #44]	; (9f50 <net_set+0x5c>)
    9f22:	490c      	ldr	r1, [pc, #48]	; (9f54 <net_set+0x60>)
		BT_ERR("Failed to set \'net\'");
    9f24:	480c      	ldr	r0, [pc, #48]	; (9f58 <net_set+0x64>)
    9f26:	1ac9      	subs	r1, r1, r3
    9f28:	08c9      	lsrs	r1, r1, #3
    9f2a:	0189      	lsls	r1, r1, #6
    9f2c:	f041 0101 	orr.w	r1, r1, #1
    9f30:	f00e ff5f 	bl	18df2 <log_0>
		return err;
    9f34:	e7eb      	b.n	9f0e <net_set+0x1a>
	memcpy(bt_mesh.dev_key, net.dev_key, sizeof(bt_mesh.dev_key));
    9f36:	2210      	movs	r2, #16
    9f38:	f10d 0106 	add.w	r1, sp, #6
    9f3c:	4803      	ldr	r0, [pc, #12]	; (9f4c <net_set+0x58>)
    9f3e:	f00f fe31 	bl	19ba4 <memcpy>
	bt_mesh_comp_provision(net.primary_addr);
    9f42:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    9f46:	f002 feab 	bl	cca0 <bt_mesh_comp_provision>
	return 0;
    9f4a:	e7e0      	b.n	9f0e <net_set+0x1a>
    9f4c:	20001228 	.word	0x20001228
    9f50:	0001e408 	.word	0x0001e408
    9f54:	0001e588 	.word	0x0001e588
    9f58:	0002064c 	.word	0x0002064c

00009f5c <atomic_get.constprop.0>:
    9f5c:	4b03      	ldr	r3, [pc, #12]	; (9f6c <atomic_get.constprop.0+0x10>)
    9f5e:	f3bf 8f5b 	dmb	ish
    9f62:	6898      	ldr	r0, [r3, #8]
    9f64:	f3bf 8f5b 	dmb	ish
}
    9f68:	4770      	bx	lr
    9f6a:	bf00      	nop
    9f6c:	200011d0 	.word	0x200011d0

00009f70 <atomic_set_bit_to.constprop.0>:
    9f70:	4b0b      	ldr	r3, [pc, #44]	; (9fa0 <atomic_set_bit_to.constprop.0+0x30>)
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9f72:	f3bf 8f5b 	dmb	ish
    9f76:	b150      	cbz	r0, 9f8e <atomic_set_bit_to.constprop.0+0x1e>
    9f78:	e853 2f00 	ldrex	r2, [r3]
    9f7c:	f042 0204 	orr.w	r2, r2, #4
    9f80:	e843 2100 	strex	r1, r2, [r3]
    9f84:	2900      	cmp	r1, #0
    9f86:	d1f7      	bne.n	9f78 <atomic_set_bit_to.constprop.0+0x8>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9f88:	f3bf 8f5b 	dmb	ish
	}
}
    9f8c:	4770      	bx	lr
    9f8e:	e853 2f00 	ldrex	r2, [r3]
    9f92:	f022 0204 	bic.w	r2, r2, #4
    9f96:	e843 2100 	strex	r1, r2, [r3]
    9f9a:	2900      	cmp	r1, #0
    9f9c:	d0f4      	beq.n	9f88 <atomic_set_bit_to.constprop.0+0x18>
    9f9e:	e7f6      	b.n	9f8e <atomic_set_bit_to.constprop.0+0x1e>
    9fa0:	200011d8 	.word	0x200011d8

00009fa4 <iv_set>:
{
    9fa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    9fa6:	460c      	mov	r4, r1
    9fa8:	4610      	mov	r0, r2
    9faa:	4619      	mov	r1, r3
	if (len_rd == 0) {
    9fac:	b98c      	cbnz	r4, 9fd2 <iv_set+0x2e>
		bt_mesh.iv_index = 0U;
    9fae:	4b19      	ldr	r3, [pc, #100]	; (a014 <iv_set+0x70>)
    9fb0:	f843 4b08 	str.w	r4, [r3], #8
    9fb4:	f3bf 8f5b 	dmb	ish
    9fb8:	e853 2f00 	ldrex	r2, [r3]
    9fbc:	f022 0204 	bic.w	r2, r2, #4
    9fc0:	e843 2100 	strex	r1, r2, [r3]
    9fc4:	2900      	cmp	r1, #0
    9fc6:	d1f7      	bne.n	9fb8 <iv_set+0x14>
    9fc8:	f3bf 8f5b 	dmb	ish
}
    9fcc:	4620      	mov	r0, r4
    9fce:	b003      	add	sp, #12
    9fd0:	bd30      	pop	{r4, r5, pc}
	err = bt_mesh_settings_set(read_cb, cb_arg, &iv, sizeof(iv));
    9fd2:	2305      	movs	r3, #5
    9fd4:	466a      	mov	r2, sp
    9fd6:	f002 ffeb 	bl	cfb0 <bt_mesh_settings_set>
	if (err) {
    9fda:	4604      	mov	r4, r0
    9fdc:	b150      	cbz	r0, 9ff4 <iv_set+0x50>
    9fde:	4b0e      	ldr	r3, [pc, #56]	; (a018 <iv_set+0x74>)
    9fe0:	490e      	ldr	r1, [pc, #56]	; (a01c <iv_set+0x78>)
		BT_ERR("Failed to set \'iv\'");
    9fe2:	480f      	ldr	r0, [pc, #60]	; (a020 <iv_set+0x7c>)
    9fe4:	1ac9      	subs	r1, r1, r3
    9fe6:	08c9      	lsrs	r1, r1, #3
    9fe8:	0189      	lsls	r1, r1, #6
    9fea:	f041 0101 	orr.w	r1, r1, #1
    9fee:	f00e ff00 	bl	18df2 <log_0>
		return err;
    9ff2:	e7eb      	b.n	9fcc <iv_set+0x28>
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS, iv.iv_update);
    9ff4:	f89d 0004 	ldrb.w	r0, [sp, #4]
	bt_mesh.iv_index = iv.iv_index;
    9ff8:	4d06      	ldr	r5, [pc, #24]	; (a014 <iv_set+0x70>)
    9ffa:	9b00      	ldr	r3, [sp, #0]
    9ffc:	602b      	str	r3, [r5, #0]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS, iv.iv_update);
    9ffe:	f000 0001 	and.w	r0, r0, #1
    a002:	f7ff ffb5 	bl	9f70 <atomic_set_bit_to.constprop.0>
	bt_mesh.ivu_duration = iv.iv_duration;
    a006:	f89d 3004 	ldrb.w	r3, [sp, #4]
    a00a:	f3c3 0346 	ubfx	r3, r3, #1, #7
    a00e:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
	return 0;
    a012:	e7db      	b.n	9fcc <iv_set+0x28>
    a014:	200011d0 	.word	0x200011d0
    a018:	0001e408 	.word	0x0001e408
    a01c:	0001e588 	.word	0x0001e588
    a020:	00020660 	.word	0x00020660

0000a024 <bt_mesh_net_iv_update>:
{
    a024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a026:	4605      	mov	r5, r0
    a028:	460c      	mov	r4, r1
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    a02a:	f7ff ff97 	bl	9f5c <atomic_get.constprop.0>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    a02e:	4e4f      	ldr	r6, [pc, #316]	; (a16c <bt_mesh_net_iv_update+0x148>)
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    a030:	f010 0f04 	tst.w	r0, #4
		if (iv_index != bt_mesh.iv_index) {
    a034:	6832      	ldr	r2, [r6, #0]
    a036:	f3c0 0780 	ubfx	r7, r0, #2, #1
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    a03a:	d012      	beq.n	a062 <bt_mesh_net_iv_update+0x3e>
		if (iv_index != bt_mesh.iv_index) {
    a03c:	42aa      	cmp	r2, r5
    a03e:	d00b      	beq.n	a058 <bt_mesh_net_iv_update+0x34>
    a040:	494b      	ldr	r1, [pc, #300]	; (a170 <bt_mesh_net_iv_update+0x14c>)
    a042:	4b4c      	ldr	r3, [pc, #304]	; (a174 <bt_mesh_net_iv_update+0x150>)
			BT_WARN("IV Index mismatch: 0x%08x != 0x%08x",
    a044:	484c      	ldr	r0, [pc, #304]	; (a178 <bt_mesh_net_iv_update+0x154>)
    a046:	1a5b      	subs	r3, r3, r1
    a048:	08db      	lsrs	r3, r3, #3
    a04a:	019b      	lsls	r3, r3, #6
    a04c:	f043 0302 	orr.w	r3, r3, #2
    a050:	4629      	mov	r1, r5
			BT_ERR("IV Index out of sync: 0x%08x != 0x%08x",
    a052:	f00e feef 	bl	18e34 <log_2>
    a056:	e001      	b.n	a05c <bt_mesh_net_iv_update+0x38>
		if (iv_update) {
    a058:	2900      	cmp	r1, #0
    a05a:	d055      	beq.n	a108 <bt_mesh_net_iv_update+0xe4>
			return false;
    a05c:	2400      	movs	r4, #0
}
    a05e:	4620      	mov	r0, r4
    a060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (iv_index == bt_mesh.iv_index) {
    a062:	42aa      	cmp	r2, r5
    a064:	d07f      	beq.n	a166 <bt_mesh_net_iv_update+0x142>
		if (iv_index < bt_mesh.iv_index ||
    a066:	d803      	bhi.n	a070 <bt_mesh_net_iv_update+0x4c>
		    iv_index > bt_mesh.iv_index + 42) {
    a068:	f102 032a 	add.w	r3, r2, #42	; 0x2a
		if (iv_index < bt_mesh.iv_index ||
    a06c:	42ab      	cmp	r3, r5
    a06e:	d209      	bcs.n	a084 <bt_mesh_net_iv_update+0x60>
    a070:	493f      	ldr	r1, [pc, #252]	; (a170 <bt_mesh_net_iv_update+0x14c>)
    a072:	4b40      	ldr	r3, [pc, #256]	; (a174 <bt_mesh_net_iv_update+0x150>)
			BT_ERR("IV Index out of sync: 0x%08x != 0x%08x",
    a074:	4841      	ldr	r0, [pc, #260]	; (a17c <bt_mesh_net_iv_update+0x158>)
    a076:	1a5b      	subs	r3, r3, r1
    a078:	08db      	lsrs	r3, r3, #3
    a07a:	019b      	lsls	r3, r3, #6
    a07c:	f043 0301 	orr.w	r3, r3, #1
    a080:	4629      	mov	r1, r5
    a082:	e7e6      	b.n	a052 <bt_mesh_net_iv_update+0x2e>
		if (iv_index > bt_mesh.iv_index + 1) {
    a084:	3201      	adds	r2, #1
    a086:	42aa      	cmp	r2, r5
    a088:	d22f      	bcs.n	a0ea <bt_mesh_net_iv_update+0xc6>
    a08a:	4b39      	ldr	r3, [pc, #228]	; (a170 <bt_mesh_net_iv_update+0x14c>)
    a08c:	4939      	ldr	r1, [pc, #228]	; (a174 <bt_mesh_net_iv_update+0x150>)
			BT_WARN("Performing IV Index Recovery");
    a08e:	483c      	ldr	r0, [pc, #240]	; (a180 <bt_mesh_net_iv_update+0x15c>)
    a090:	1ac9      	subs	r1, r1, r3
    a092:	08c9      	lsrs	r1, r1, #3
    a094:	0189      	lsls	r1, r1, #6
    a096:	f041 0102 	orr.w	r1, r1, #2
    a09a:	f00e feaa 	bl	18df2 <log_0>
			bt_mesh_rpl_clear();
    a09e:	f011 fc1a 	bl	1b8d6 <bt_mesh_rpl_clear>
			bt_mesh.seq = 0U;
    a0a2:	e9c6 5700 	strd	r5, r7, [r6]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS, iv_update);
    a0a6:	4620      	mov	r0, r4
    a0a8:	f7ff ff62 	bl	9f70 <atomic_set_bit_to.constprop.0>
	bt_mesh.ivu_duration = 0U;
    a0ac:	2300      	movs	r3, #0
    a0ae:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
	if (iv_update) {
    a0b2:	2c00      	cmp	r4, #0
    a0b4:	d055      	beq.n	a162 <bt_mesh_net_iv_update+0x13e>
		bt_mesh.iv_index = iv_index;
    a0b6:	6035      	str	r5, [r6, #0]
		bt_mesh_rpl_reset();
    a0b8:	f002 f9a2 	bl	c400 <bt_mesh_rpl_reset>
	k_work_reschedule(&bt_mesh.ivu_timer, BT_MESH_IVU_TIMEOUT);
    a0bc:	4a31      	ldr	r2, [pc, #196]	; (a184 <bt_mesh_net_iv_update+0x160>)
    a0be:	4832      	ldr	r0, [pc, #200]	; (a188 <bt_mesh_net_iv_update+0x164>)
    a0c0:	2300      	movs	r3, #0
    a0c2:	f00d fb97 	bl	177f4 <k_work_reschedule>
	    bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED) {
    a0c6:	f7ff fae1 	bl	968c <bt_mesh_gatt_proxy_get>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    a0ca:	2801      	cmp	r0, #1
    a0cc:	d102      	bne.n	a0d4 <bt_mesh_net_iv_update+0xb0>
		bt_mesh_proxy_beacon_send(NULL);
    a0ce:	2000      	movs	r0, #0
    a0d0:	f003 fed0 	bl	de74 <bt_mesh_proxy_beacon_send>
	bt_mesh_subnet_foreach(bt_mesh_beacon_update);
    a0d4:	482d      	ldr	r0, [pc, #180]	; (a18c <bt_mesh_net_iv_update+0x168>)
    a0d6:	f000 fd9b 	bl	ac10 <bt_mesh_subnet_foreach>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_IV_PENDING);
    a0da:	2004      	movs	r0, #4
    a0dc:	f002 ff9a 	bl	d014 <bt_mesh_settings_store_schedule>
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_SEQ_PENDING);
    a0e0:	2005      	movs	r0, #5
    a0e2:	f002 ff97 	bl	d014 <bt_mesh_settings_store_schedule>
	return true;
    a0e6:	2401      	movs	r4, #1
    a0e8:	e7b9      	b.n	a05e <bt_mesh_net_iv_update+0x3a>
		if (iv_index == bt_mesh.iv_index + 1 && !iv_update) {
    a0ea:	d10b      	bne.n	a104 <bt_mesh_net_iv_update+0xe0>
    a0ec:	b961      	cbnz	r1, a108 <bt_mesh_net_iv_update+0xe4>
    a0ee:	4b20      	ldr	r3, [pc, #128]	; (a170 <bt_mesh_net_iv_update+0x14c>)
    a0f0:	4920      	ldr	r1, [pc, #128]	; (a174 <bt_mesh_net_iv_update+0x150>)
			BT_WARN("Ignoring new index in normal mode");
    a0f2:	4827      	ldr	r0, [pc, #156]	; (a190 <bt_mesh_net_iv_update+0x16c>)
    a0f4:	1ac9      	subs	r1, r1, r3
    a0f6:	08c9      	lsrs	r1, r1, #3
    a0f8:	0189      	lsls	r1, r1, #6
    a0fa:	f041 0102 	orr.w	r1, r1, #2
    a0fe:	f00e fe78 	bl	18df2 <log_0>
			return false;
    a102:	e7ac      	b.n	a05e <bt_mesh_net_iv_update+0x3a>
		if (!iv_update) {
    a104:	2900      	cmp	r1, #0
    a106:	d0aa      	beq.n	a05e <bt_mesh_net_iv_update+0x3a>
		if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
    a108:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
    a10c:	2b5f      	cmp	r3, #95	; 0x5f
    a10e:	d80a      	bhi.n	a126 <bt_mesh_net_iv_update+0x102>
    a110:	4b17      	ldr	r3, [pc, #92]	; (a170 <bt_mesh_net_iv_update+0x14c>)
    a112:	4918      	ldr	r1, [pc, #96]	; (a174 <bt_mesh_net_iv_update+0x150>)
			BT_WARN("IV Update before minimum duration");
    a114:	481f      	ldr	r0, [pc, #124]	; (a194 <bt_mesh_net_iv_update+0x170>)
    a116:	1ac9      	subs	r1, r1, r3
    a118:	08c9      	lsrs	r1, r1, #3
    a11a:	0189      	lsls	r1, r1, #6
    a11c:	f041 0102 	orr.w	r1, r1, #2
    a120:	f00e fe67 	bl	18df2 <log_0>
			return false;
    a124:	e79a      	b.n	a05c <bt_mesh_net_iv_update+0x38>
	if (!iv_update && bt_mesh_tx_in_progress()) {
    a126:	2c00      	cmp	r4, #0
    a128:	d1bd      	bne.n	a0a6 <bt_mesh_net_iv_update+0x82>
    a12a:	f001 fc0d 	bl	b948 <bt_mesh_tx_in_progress>
    a12e:	2800      	cmp	r0, #0
    a130:	d0b9      	beq.n	a0a6 <bt_mesh_net_iv_update+0x82>
    a132:	4b0f      	ldr	r3, [pc, #60]	; (a170 <bt_mesh_net_iv_update+0x14c>)
    a134:	490f      	ldr	r1, [pc, #60]	; (a174 <bt_mesh_net_iv_update+0x150>)
		BT_WARN("IV Update deferred because of pending transfer");
    a136:	4818      	ldr	r0, [pc, #96]	; (a198 <bt_mesh_net_iv_update+0x174>)
    a138:	1ac9      	subs	r1, r1, r3
    a13a:	08c9      	lsrs	r1, r1, #3
    a13c:	0189      	lsls	r1, r1, #6
    a13e:	f041 0102 	orr.w	r1, r1, #2
    a142:	f00e fe56 	bl	18df2 <log_0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a146:	f3bf 8f5b 	dmb	ish
    a14a:	4b14      	ldr	r3, [pc, #80]	; (a19c <bt_mesh_net_iv_update+0x178>)
    a14c:	e853 2f00 	ldrex	r2, [r3]
    a150:	f042 0220 	orr.w	r2, r2, #32
    a154:	e843 2100 	strex	r1, r2, [r3]
    a158:	2900      	cmp	r1, #0
    a15a:	d1f7      	bne.n	a14c <bt_mesh_net_iv_update+0x128>
    a15c:	f3bf 8f5b 	dmb	ish
    a160:	e77d      	b.n	a05e <bt_mesh_net_iv_update+0x3a>
		bt_mesh.seq = 0U;
    a162:	6074      	str	r4, [r6, #4]
    a164:	e7aa      	b.n	a0bc <bt_mesh_net_iv_update+0x98>
			return false;
    a166:	463c      	mov	r4, r7
    a168:	e779      	b.n	a05e <bt_mesh_net_iv_update+0x3a>
    a16a:	bf00      	nop
    a16c:	200011d0 	.word	0x200011d0
    a170:	0001e408 	.word	0x0001e408
    a174:	0001e588 	.word	0x0001e588
    a178:	00020673 	.word	0x00020673
    a17c:	00020697 	.word	0x00020697
    a180:	000206be 	.word	0x000206be
    a184:	a8c00000 	.word	0xa8c00000
    a188:	200011f8 	.word	0x200011f8
    a18c:	00009af5 	.word	0x00009af5
    a190:	000206db 	.word	0x000206db
    a194:	000206fd 	.word	0x000206fd
    a198:	0002071f 	.word	0x0002071f
    a19c:	200011d8 	.word	0x200011d8

0000a1a0 <bt_mesh_next_seq>:
{
    a1a0:	b538      	push	{r3, r4, r5, lr}
	uint32_t seq = bt_mesh.seq++;
    a1a2:	4c10      	ldr	r4, [pc, #64]	; (a1e4 <bt_mesh_next_seq+0x44>)
    a1a4:	6865      	ldr	r5, [r4, #4]
    a1a6:	1c6a      	adds	r2, r5, #1
    a1a8:	6062      	str	r2, [r4, #4]
	if (CONFIG_BT_MESH_SEQ_STORE_RATE > 1 &&
    a1aa:	0652      	lsls	r2, r2, #25
    a1ac:	d102      	bne.n	a1b4 <bt_mesh_next_seq+0x14>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_SEQ_PENDING);
    a1ae:	2005      	movs	r0, #5
    a1b0:	f002 ff30 	bl	d014 <bt_mesh_settings_store_schedule>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    a1b4:	f7ff fed2 	bl	9f5c <atomic_get.constprop.0>
    a1b8:	4603      	mov	r3, r0
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS) &&
    a1ba:	075b      	lsls	r3, r3, #29
    a1bc:	f3c0 0080 	ubfx	r0, r0, #2, #1
    a1c0:	d40e      	bmi.n	a1e0 <bt_mesh_next_seq+0x40>
    a1c2:	6862      	ldr	r2, [r4, #4]
    a1c4:	4b08      	ldr	r3, [pc, #32]	; (a1e8 <bt_mesh_next_seq+0x48>)
    a1c6:	429a      	cmp	r2, r3
    a1c8:	d90a      	bls.n	a1e0 <bt_mesh_next_seq+0x40>
	    bt_mesh_subnet_get(BT_MESH_KEY_PRIMARY)) {
    a1ca:	f000 fc1b 	bl	aa04 <bt_mesh_subnet_get>
	    bt_mesh.seq > IV_UPDATE_SEQ_LIMIT &&
    a1ce:	b138      	cbz	r0, a1e0 <bt_mesh_next_seq+0x40>
		bt_mesh_beacon_ivu_initiator(true);
    a1d0:	2001      	movs	r0, #1
    a1d2:	f7ff fcc1 	bl	9b58 <bt_mesh_beacon_ivu_initiator>
		bt_mesh_net_iv_update(bt_mesh.iv_index + 1, true);
    a1d6:	6820      	ldr	r0, [r4, #0]
    a1d8:	2101      	movs	r1, #1
    a1da:	4408      	add	r0, r1
    a1dc:	f7ff ff22 	bl	a024 <bt_mesh_net_iv_update>
}
    a1e0:	4628      	mov	r0, r5
    a1e2:	bd38      	pop	{r3, r4, r5, pc}
    a1e4:	200011d0 	.word	0x200011d0
    a1e8:	007a1200 	.word	0x007a1200

0000a1ec <net_header_encode>:
{
    a1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const bool ctl = (tx->ctx->app_idx == BT_MESH_KEY_UNUSED);
    a1ee:	6843      	ldr	r3, [r0, #4]
    a1f0:	885f      	ldrh	r7, [r3, #2]
	if (ctl && net_buf_simple_tailroom(buf) < 8) {
    a1f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a1f6:	429f      	cmp	r7, r3
{
    a1f8:	4605      	mov	r5, r0
    a1fa:	460e      	mov	r6, r1
    a1fc:	4614      	mov	r4, r2
	if (ctl && net_buf_simple_tailroom(buf) < 8) {
    a1fe:	d111      	bne.n	a224 <net_header_encode+0x38>
    a200:	4610      	mov	r0, r2
    a202:	f013 f8f1 	bl	1d3e8 <net_buf_simple_tailroom>
    a206:	2807      	cmp	r0, #7
    a208:	d80c      	bhi.n	a224 <net_header_encode+0x38>
    a20a:	4922      	ldr	r1, [pc, #136]	; (a294 <net_header_encode+0xa8>)
    a20c:	4b22      	ldr	r3, [pc, #136]	; (a298 <net_header_encode+0xac>)
		BT_ERR("Insufficient MIC space for CTL PDU");
    a20e:	4823      	ldr	r0, [pc, #140]	; (a29c <net_header_encode+0xb0>)
    a210:	1ac9      	subs	r1, r1, r3
    a212:	08c9      	lsrs	r1, r1, #3
    a214:	0189      	lsls	r1, r1, #6
    a216:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Insufficient MIC space for PDU");
    a21a:	f00e fdea 	bl	18df2 <log_0>
		return -EINVAL;
    a21e:	f06f 0015 	mvn.w	r0, #21
}
    a222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (net_buf_simple_tailroom(buf) < 4) {
    a224:	4620      	mov	r0, r4
    a226:	f013 f8df 	bl	1d3e8 <net_buf_simple_tailroom>
    a22a:	2803      	cmp	r0, #3
    a22c:	d808      	bhi.n	a240 <net_header_encode+0x54>
    a22e:	4919      	ldr	r1, [pc, #100]	; (a294 <net_header_encode+0xa8>)
    a230:	4b19      	ldr	r3, [pc, #100]	; (a298 <net_header_encode+0xac>)
		BT_ERR("Insufficient MIC space for PDU");
    a232:	481b      	ldr	r0, [pc, #108]	; (a2a0 <net_header_encode+0xb4>)
    a234:	1ac9      	subs	r1, r1, r3
    a236:	08c9      	lsrs	r1, r1, #3
    a238:	0189      	lsls	r1, r1, #6
    a23a:	f041 0101 	orr.w	r1, r1, #1
    a23e:	e7ec      	b.n	a21a <net_header_encode+0x2e>
	net_buf_simple_push_be16(buf, tx->ctx->addr);
    a240:	686b      	ldr	r3, [r5, #4]
    a242:	4620      	mov	r0, r4
    a244:	8899      	ldrh	r1, [r3, #4]
    a246:	f013 f872 	bl	1d32e <net_buf_simple_push_be16>
	net_buf_simple_push_be16(buf, tx->src);
    a24a:	8929      	ldrh	r1, [r5, #8]
    a24c:	4620      	mov	r0, r4
    a24e:	f013 f86e 	bl	1d32e <net_buf_simple_push_be16>
	net_buf_simple_push_be24(buf, bt_mesh_next_seq());
    a252:	f7ff ffa5 	bl	a1a0 <bt_mesh_next_seq>
    a256:	4601      	mov	r1, r0
    a258:	4620      	mov	r0, r4
    a25a:	f013 f87d 	bl	1d358 <net_buf_simple_push_be24>
	if (ctl) {
    a25e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a262:	429f      	cmp	r7, r3
    a264:	686b      	ldr	r3, [r5, #4]
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl | 0x80);
    a266:	7ad9      	ldrb	r1, [r3, #11]
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl);
    a268:	4620      	mov	r0, r4
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl | 0x80);
    a26a:	bf08      	it	eq
    a26c:	f041 0180 	orreq.w	r1, r1, #128	; 0x80
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl);
    a270:	f013 f869 	bl	1d346 <net_buf_simple_push_u8>
	net_buf_simple_push_u8(buf, (nid | (BT_MESH_NET_IVI_TX & 1) << 7));
    a274:	4b0b      	ldr	r3, [pc, #44]	; (a2a4 <net_header_encode+0xb8>)
    a276:	7819      	ldrb	r1, [r3, #0]
    a278:	f7ff fe70 	bl	9f5c <atomic_get.constprop.0>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    a27c:	f3c0 0080 	ubfx	r0, r0, #2, #1
    a280:	1a09      	subs	r1, r1, r0
    a282:	ea46 11c1 	orr.w	r1, r6, r1, lsl #7
    a286:	4620      	mov	r0, r4
    a288:	b2c9      	uxtb	r1, r1
    a28a:	f013 f85c 	bl	1d346 <net_buf_simple_push_u8>
	return 0;
    a28e:	2000      	movs	r0, #0
    a290:	e7c7      	b.n	a222 <net_header_encode+0x36>
    a292:	bf00      	nop
    a294:	0001e588 	.word	0x0001e588
    a298:	0001e408 	.word	0x0001e408
    a29c:	0002074e 	.word	0x0002074e
    a2a0:	00020771 	.word	0x00020771
    a2a4:	200011d0 	.word	0x200011d0

0000a2a8 <bt_mesh_net_encode>:
{
    a2a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	tx->friend_cred = 0U;
    a2ac:	7ac3      	ldrb	r3, [r0, #11]
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    a2ae:	6806      	ldr	r6, [r0, #0]
	tx->friend_cred = 0U;
    a2b0:	f36f 0300 	bfc	r3, #0, #1
    a2b4:	72c3      	strb	r3, [r0, #11]
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    a2b6:	7fb4      	ldrb	r4, [r6, #30]
    a2b8:	1ea3      	subs	r3, r4, #2
{
    a2ba:	460d      	mov	r5, r1
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    a2bc:	4259      	negs	r1, r3
    a2be:	4159      	adcs	r1, r3
	err = net_header_encode(tx, cred->nid, buf);
    a2c0:	245a      	movs	r4, #90	; 0x5a
    a2c2:	434c      	muls	r4, r1
    a2c4:	1933      	adds	r3, r6, r4
{
    a2c6:	4617      	mov	r7, r2
	err = net_header_encode(tx, cred->nid, buf);
    a2c8:	f893 103d 	ldrb.w	r1, [r3, #61]	; 0x3d
    a2cc:	462a      	mov	r2, r5
    a2ce:	f7ff ff8d 	bl	a1ec <net_header_encode>
	if (err) {
    a2d2:	b970      	cbnz	r0, a2f2 <bt_mesh_net_encode+0x4a>
	return net_encrypt(buf, cred, BT_MESH_NET_IVI_TX, proxy);
    a2d4:	4b08      	ldr	r3, [pc, #32]	; (a2f8 <bt_mesh_net_encode+0x50>)
    a2d6:	681a      	ldr	r2, [r3, #0]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    a2d8:	f7ff fe40 	bl	9f5c <atomic_get.constprop.0>
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    a2dc:	343d      	adds	r4, #61	; 0x3d
	return net_encrypt(buf, cred, BT_MESH_NET_IVI_TX, proxy);
    a2de:	f3c0 0080 	ubfx	r0, r0, #2, #1
    a2e2:	463b      	mov	r3, r7
    a2e4:	1a12      	subs	r2, r2, r0
    a2e6:	1931      	adds	r1, r6, r4
    a2e8:	4628      	mov	r0, r5
}
    a2ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return net_encrypt(buf, cred, BT_MESH_NET_IVI_TX, proxy);
    a2ee:	f011 b906 	b.w	1b4fe <net_encrypt>
}
    a2f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a2f6:	bf00      	nop
    a2f8:	200011d0 	.word	0x200011d0

0000a2fc <bt_mesh_net_send>:
{
    a2fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a300:	4698      	mov	r8, r3
	tx->friend_cred = 0U;
    a302:	7ac3      	ldrb	r3, [r0, #11]
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    a304:	f8d0 b000 	ldr.w	fp, [r0]
	tx->friend_cred = 0U;
    a308:	f36f 0300 	bfc	r3, #0, #1
    a30c:	72c3      	strb	r3, [r0, #11]
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    a30e:	f89b 901e 	ldrb.w	r9, [fp, #30]
    a312:	f1a9 0302 	sub.w	r3, r9, #2
    a316:	f1d3 0900 	rsbs	r9, r3, #0
    a31a:	eb49 0903 	adc.w	r9, r9, r3
	err = net_header_encode(tx, cred->nid, &buf->b);
    a31e:	235a      	movs	r3, #90	; 0x5a
    a320:	fb03 b309 	mla	r3, r3, r9, fp
    a324:	f101 0a08 	add.w	sl, r1, #8
{
    a328:	460e      	mov	r6, r1
    a32a:	4617      	mov	r7, r2
	err = net_header_encode(tx, cred->nid, &buf->b);
    a32c:	f893 103d 	ldrb.w	r1, [r3, #61]	; 0x3d
    a330:	4652      	mov	r2, sl
{
    a332:	4604      	mov	r4, r0
	err = net_header_encode(tx, cred->nid, &buf->b);
    a334:	f7ff ff5a 	bl	a1ec <net_header_encode>
	if (err) {
    a338:	4605      	mov	r5, r0
    a33a:	2800      	cmp	r0, #0
    a33c:	d16b      	bne.n	a416 <bt_mesh_net_send+0x11a>
	if (bt_mesh_fixed_group_match(tx->ctx->addr) ||
    a33e:	6863      	ldr	r3, [r4, #4]
    a340:	8898      	ldrh	r0, [r3, #4]
    a342:	f011 f896 	bl	1b472 <bt_mesh_fixed_group_match>
    a346:	2800      	cmp	r0, #0
    a348:	d043      	beq.n	a3d2 <bt_mesh_net_send+0xd6>
		err = loopback(tx, buf->data, buf->len);
    a34a:	89b3      	ldrh	r3, [r6, #12]
    a34c:	68b1      	ldr	r1, [r6, #8]
    a34e:	9300      	str	r3, [sp, #0]
	return net_buf_alloc_fixed(pool, timeout);
    a350:	4834      	ldr	r0, [pc, #208]	; (a424 <bt_mesh_net_send+0x128>)
    a352:	9101      	str	r1, [sp, #4]
    a354:	2300      	movs	r3, #0
    a356:	2200      	movs	r2, #0
    a358:	f012 ff2c 	bl	1d1b4 <net_buf_alloc_fixed>
	if (!buf) {
    a35c:	9901      	ldr	r1, [sp, #4]
    a35e:	4603      	mov	r3, r0
    a360:	2800      	cmp	r0, #0
    a362:	d143      	bne.n	a3ec <bt_mesh_net_send+0xf0>
    a364:	4b30      	ldr	r3, [pc, #192]	; (a428 <bt_mesh_net_send+0x12c>)
    a366:	4931      	ldr	r1, [pc, #196]	; (a42c <bt_mesh_net_send+0x130>)
		BT_WARN("Unable to allocate loopback");
    a368:	4831      	ldr	r0, [pc, #196]	; (a430 <bt_mesh_net_send+0x134>)
    a36a:	1ac9      	subs	r1, r1, r3
    a36c:	08c9      	lsrs	r1, r1, #3
    a36e:	0189      	lsls	r1, r1, #6
    a370:	f041 0102 	orr.w	r1, r1, #2
    a374:	f00e fd3d 	bl	18df2 <log_0>
		return -ENOMEM;
    a378:	f06f 050b 	mvn.w	r5, #11
		if (BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr) ||
    a37c:	6863      	ldr	r3, [r4, #4]
    a37e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
    a382:	2a00      	cmp	r2, #0
    a384:	dc42      	bgt.n	a40c <bt_mesh_net_send+0x110>
    a386:	7adb      	ldrb	r3, [r3, #11]
    a388:	2b01      	cmp	r3, #1
    a38a:	d03f      	beq.n	a40c <bt_mesh_net_send+0x110>
	err = net_encrypt(&buf->b, cred, BT_MESH_NET_IVI_TX, false);
    a38c:	4b29      	ldr	r3, [pc, #164]	; (a434 <bt_mesh_net_send+0x138>)
    a38e:	681d      	ldr	r5, [r3, #0]
    a390:	f7ff fde4 	bl	9f5c <atomic_get.constprop.0>
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    a394:	215a      	movs	r1, #90	; 0x5a
	err = net_encrypt(&buf->b, cred, BT_MESH_NET_IVI_TX, false);
    a396:	f3c0 0280 	ubfx	r2, r0, #2, #1
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    a39a:	fb01 b109 	mla	r1, r1, r9, fp
	err = net_encrypt(&buf->b, cred, BT_MESH_NET_IVI_TX, false);
    a39e:	1aaa      	subs	r2, r5, r2
    a3a0:	2300      	movs	r3, #0
    a3a2:	313d      	adds	r1, #61	; 0x3d
    a3a4:	4650      	mov	r0, sl
    a3a6:	f011 f8aa 	bl	1b4fe <net_encrypt>
	if (err) {
    a3aa:	4605      	mov	r5, r0
    a3ac:	2800      	cmp	r0, #0
    a3ae:	d132      	bne.n	a416 <bt_mesh_net_send+0x11a>
	    bt_mesh_proxy_relay(&buf->b, tx->ctx->addr) &&
    a3b0:	6863      	ldr	r3, [r4, #4]
    a3b2:	4650      	mov	r0, sl
    a3b4:	8899      	ldrh	r1, [r3, #4]
    a3b6:	f004 f883 	bl	e4c0 <bt_mesh_proxy_relay>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    a3ba:	b120      	cbz	r0, a3c6 <bt_mesh_net_send+0xca>
	    BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr)) {
    a3bc:	6863      	ldr	r3, [r4, #4]
	    bt_mesh_proxy_relay(&buf->b, tx->ctx->addr) &&
    a3be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    a3c2:	2b00      	cmp	r3, #0
    a3c4:	dc23      	bgt.n	a40e <bt_mesh_net_send+0x112>
	bt_mesh_adv_send(buf, cb, cb_data);
    a3c6:	4642      	mov	r2, r8
    a3c8:	4639      	mov	r1, r7
    a3ca:	4630      	mov	r0, r6
    a3cc:	f7ff fad8 	bl	9980 <bt_mesh_adv_send>
    a3d0:	e021      	b.n	a416 <bt_mesh_net_send+0x11a>
	    bt_mesh_elem_find(tx->ctx->addr)) {
    a3d2:	6863      	ldr	r3, [r4, #4]
    a3d4:	8898      	ldrh	r0, [r3, #4]
    a3d6:	f002 fc85 	bl	cce4 <bt_mesh_elem_find>
	if (bt_mesh_fixed_group_match(tx->ctx->addr) ||
    a3da:	2800      	cmp	r0, #0
    a3dc:	d1b5      	bne.n	a34a <bt_mesh_net_send+0x4e>
	if (tx->ctx->send_ttl == 1U) {
    a3de:	6863      	ldr	r3, [r4, #4]
    a3e0:	7adb      	ldrb	r3, [r3, #11]
    a3e2:	2b01      	cmp	r3, #1
    a3e4:	d1d2      	bne.n	a38c <bt_mesh_net_send+0x90>
		err = -EINVAL;
    a3e6:	f06f 0515 	mvn.w	r5, #21
    a3ea:	e014      	b.n	a416 <bt_mesh_net_send+0x11a>
	LOOPBACK_BUF_SUB(buf) = tx->sub;
    a3ec:	6822      	ldr	r2, [r4, #0]
    a3ee:	6142      	str	r2, [r0, #20]
	return net_buf_simple_add_mem(&buf->b, mem, len);
    a3f0:	9a00      	ldr	r2, [sp, #0]
    a3f2:	9300      	str	r3, [sp, #0]
    a3f4:	3008      	adds	r0, #8
    a3f6:	f012 ff68 	bl	1d2ca <net_buf_simple_add_mem>
	net_buf_slist_put(&bt_mesh.local_queue, buf);
    a3fa:	9b00      	ldr	r3, [sp, #0]
    a3fc:	480e      	ldr	r0, [pc, #56]	; (a438 <bt_mesh_net_send+0x13c>)
    a3fe:	4619      	mov	r1, r3
    a400:	f012 ff01 	bl	1d206 <net_buf_slist_put>
	k_work_submit(&bt_mesh.local_work);
    a404:	480d      	ldr	r0, [pc, #52]	; (a43c <bt_mesh_net_send+0x140>)
    a406:	f00d f957 	bl	176b8 <k_work_submit>
	return 0;
    a40a:	e7b7      	b.n	a37c <bt_mesh_net_send+0x80>
			if (!err) {
    a40c:	b91d      	cbnz	r5, a416 <bt_mesh_net_send+0x11a>
		send_cb_finalize(cb, cb_data);
    a40e:	4641      	mov	r1, r8
    a410:	4638      	mov	r0, r7
    a412:	f011 f862 	bl	1b4da <send_cb_finalize>
	net_buf_unref(buf);
    a416:	4630      	mov	r0, r6
    a418:	f00b f9a0 	bl	1575c <net_buf_unref>
}
    a41c:	4628      	mov	r0, r5
    a41e:	b003      	add	sp, #12
    a420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a424:	20000d0c 	.word	0x20000d0c
    a428:	0001e408 	.word	0x0001e408
    a42c:	0001e588 	.word	0x0001e588
    a430:	00020790 	.word	0x00020790
    a434:	200011d0 	.word	0x200011d0
    a438:	200011ec 	.word	0x200011ec
    a43c:	200011dc 	.word	0x200011dc

0000a440 <bt_mesh_net_decode>:
{
    a440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a444:	460f      	mov	r7, r1
	if (in->len < BT_MESH_NET_MIN_PDU_LEN) {
    a446:	8881      	ldrh	r1, [r0, #4]
    a448:	2911      	cmp	r1, #17
{
    a44a:	4606      	mov	r6, r0
    a44c:	4614      	mov	r4, r2
    a44e:	4698      	mov	r8, r3
	if (in->len < BT_MESH_NET_MIN_PDU_LEN) {
    a450:	d819      	bhi.n	a486 <bt_mesh_net_decode+0x46>
    a452:	4b55      	ldr	r3, [pc, #340]	; (a5a8 <bt_mesh_net_decode+0x168>)
    a454:	4c55      	ldr	r4, [pc, #340]	; (a5ac <bt_mesh_net_decode+0x16c>)
		BT_WARN("Dropping too short mesh packet (len %u)", in->len);
    a456:	4856      	ldr	r0, [pc, #344]	; (a5b0 <bt_mesh_net_decode+0x170>)
    a458:	1ae4      	subs	r4, r4, r3
    a45a:	08e4      	lsrs	r4, r4, #3
    a45c:	01a4      	lsls	r4, r4, #6
    a45e:	f044 0402 	orr.w	r4, r4, #2
    a462:	4622      	mov	r2, r4
    a464:	f00e fcd2 	bl	18e0c <log_1>
		BT_WARN("%s", bt_hex(in->data, in->len));
    a468:	88b1      	ldrh	r1, [r6, #4]
    a46a:	6830      	ldr	r0, [r6, #0]
    a46c:	f7f9 fdde 	bl	402c <bt_hex_real>
    a470:	f7f7 ff38 	bl	22e4 <z_log_strdup>
    a474:	4601      	mov	r1, r0
    a476:	484f      	ldr	r0, [pc, #316]	; (a5b4 <bt_mesh_net_decode+0x174>)
    a478:	4622      	mov	r2, r4
		BT_WARN("Dropping too long mesh packet (len %u)", in->len);
    a47a:	f00e fcc7 	bl	18e0c <log_1>
		return -EINVAL;
    a47e:	f06f 0015 	mvn.w	r0, #21
}
    a482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (in->len > BT_MESH_NET_MAX_PDU_LEN) {
    a486:	291d      	cmp	r1, #29
    a488:	d908      	bls.n	a49c <bt_mesh_net_decode+0x5c>
    a48a:	4a48      	ldr	r2, [pc, #288]	; (a5ac <bt_mesh_net_decode+0x16c>)
    a48c:	4b46      	ldr	r3, [pc, #280]	; (a5a8 <bt_mesh_net_decode+0x168>)
		BT_WARN("Dropping too long mesh packet (len %u)", in->len);
    a48e:	484a      	ldr	r0, [pc, #296]	; (a5b8 <bt_mesh_net_decode+0x178>)
    a490:	1ad2      	subs	r2, r2, r3
    a492:	08d2      	lsrs	r2, r2, #3
    a494:	0192      	lsls	r2, r2, #6
    a496:	f042 0202 	orr.w	r2, r2, #2
    a49a:	e7ee      	b.n	a47a <bt_mesh_net_decode+0x3a>
	if (net_if == BT_MESH_NET_IF_ADV && check_dup(in)) {
    a49c:	bb97      	cbnz	r7, a504 <bt_mesh_net_decode+0xc4>
	return buf->data + buf->len;
    a49e:	6805      	ldr	r5, [r0, #0]
    a4a0:	440d      	add	r5, r1
	return ((uint16_t)src[0] << 8) | src[1];
    a4a2:	f815 1c07 	ldrb.w	r1, [r5, #-7]
    a4a6:	f815 3c08 	ldrb.w	r3, [r5, #-8]
    a4aa:	f815 2c06 	ldrb.w	r2, [r5, #-6]
    a4ae:	f815 0c02 	ldrb.w	r0, [r5, #-2]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    a4b2:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
	return ((uint16_t)src[0] << 8) | src[1];
    a4b6:	f815 1c05 	ldrb.w	r1, [r5, #-5]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    a4ba:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    a4be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
	return ((uint16_t)src[0] << 8) | src[1];
    a4c2:	f815 2c04 	ldrb.w	r2, [r5, #-4]
    a4c6:	f815 3c03 	ldrb.w	r3, [r5, #-3]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    a4ca:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	return ((uint16_t)src[0] << 8) | src[1];
    a4ce:	f815 3c01 	ldrb.w	r3, [r5, #-1]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    a4d2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    a4d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    a4da:	4a38      	ldr	r2, [pc, #224]	; (a5bc <bt_mesh_net_decode+0x17c>)
	val = sys_get_be32(tail - 4) ^ sys_get_be32(tail - 8);
    a4dc:	4059      	eors	r1, r3
	for (i = 0; i < ARRAY_SIZE(dup_cache); i++) {
    a4de:	4615      	mov	r5, r2
    a4e0:	463b      	mov	r3, r7
		if (dup_cache[i] == val) {
    a4e2:	f852 0b04 	ldr.w	r0, [r2], #4
    a4e6:	4281      	cmp	r1, r0
    a4e8:	d0c9      	beq.n	a47e <bt_mesh_net_decode+0x3e>
	for (i = 0; i < ARRAY_SIZE(dup_cache); i++) {
    a4ea:	3301      	adds	r3, #1
    a4ec:	2b0a      	cmp	r3, #10
    a4ee:	d1f8      	bne.n	a4e2 <bt_mesh_net_decode+0xa2>
	dup_cache[dup_cache_next++] = val;
    a4f0:	4833      	ldr	r0, [pc, #204]	; (a5c0 <bt_mesh_net_decode+0x180>)
    a4f2:	6802      	ldr	r2, [r0, #0]
    a4f4:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
    a4f8:	3201      	adds	r2, #1
	dup_cache_next %= ARRAY_SIZE(dup_cache);
    a4fa:	fb92 f1f3 	sdiv	r1, r2, r3
    a4fe:	fb03 2311 	mls	r3, r3, r1, r2
    a502:	6003      	str	r3, [r0, #0]
	rx->net_if = net_if;
    a504:	7d23      	ldrb	r3, [r4, #20]
    a506:	f367 1305 	bfi	r3, r7, #4, #2
    a50a:	7523      	strb	r3, [r4, #20]
	if (!bt_mesh_net_cred_find(rx, in, out, net_decrypt)) {
    a50c:	4642      	mov	r2, r8
    a50e:	4b2d      	ldr	r3, [pc, #180]	; (a5c4 <bt_mesh_net_decode+0x184>)
    a510:	4631      	mov	r1, r6
    a512:	4620      	mov	r0, r4
    a514:	f000 fbb8 	bl	ac88 <bt_mesh_net_cred_find>
    a518:	2800      	cmp	r0, #0
    a51a:	d041      	beq.n	a5a0 <bt_mesh_net_decode+0x160>
	rx->ctx.recv_ttl = TTL(out->data);
    a51c:	f8d8 1000 	ldr.w	r1, [r8]
	rx->ctl = CTL(out->data);
    a520:	7d22      	ldrb	r2, [r4, #20]
	rx->ctx.app_idx = BT_MESH_KEY_UNUSED;
    a522:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a526:	80e3      	strh	r3, [r4, #6]
	rx->ctx.recv_ttl = TTL(out->data);
    a528:	784b      	ldrb	r3, [r1, #1]
    a52a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a52e:	7363      	strb	r3, [r4, #13]
	if (rx->ctx.recv_ttl == 0U) {
    a530:	3b00      	subs	r3, #0
    a532:	bf18      	it	ne
    a534:	2301      	movne	r3, #1
    a536:	425b      	negs	r3, r3
    a538:	73e3      	strb	r3, [r4, #15]
	rx->ctl = CTL(out->data);
    a53a:	784b      	ldrb	r3, [r1, #1]
    a53c:	09db      	lsrs	r3, r3, #7
    a53e:	f363 02c3 	bfi	r2, r3, #3, #1
    a542:	7522      	strb	r2, [r4, #20]
	rx->seq = SEQ(out->data);
    a544:	1c88      	adds	r0, r1, #2
    a546:	f010 ffc0 	bl	1b4ca <sys_get_be24>
    a54a:	6120      	str	r0, [r4, #16]
	return ((uint16_t)src[0] << 8) | src[1];
    a54c:	79ca      	ldrb	r2, [r1, #7]
    a54e:	7a0b      	ldrb	r3, [r1, #8]
	if (net_if != BT_MESH_NET_IF_PROXY_CFG &&
    a550:	2f03      	cmp	r7, #3
    a552:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rx->ctx.recv_dst = DST(out->data);
    a556:	8163      	strh	r3, [r4, #10]
	if (net_if != BT_MESH_NET_IF_PROXY_CFG &&
    a558:	d00d      	beq.n	a576 <bt_mesh_net_decode+0x136>
    a55a:	b963      	cbnz	r3, a576 <bt_mesh_net_decode+0x136>
    a55c:	4b12      	ldr	r3, [pc, #72]	; (a5a8 <bt_mesh_net_decode+0x168>)
    a55e:	4913      	ldr	r1, [pc, #76]	; (a5ac <bt_mesh_net_decode+0x16c>)
		BT_ERR("Destination address is unassigned; dropping packet");
    a560:	4819      	ldr	r0, [pc, #100]	; (a5c8 <bt_mesh_net_decode+0x188>)
    a562:	1ac9      	subs	r1, r1, r3
    a564:	08c9      	lsrs	r1, r1, #3
    a566:	0189      	lsls	r1, r1, #6
    a568:	f041 0101 	orr.w	r1, r1, #1
    a56c:	f00e fc41 	bl	18df2 <log_0>
		return -EBADMSG;
    a570:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    a574:	e785      	b.n	a482 <bt_mesh_net_decode+0x42>
	msg_cache[rx->msg_cache_idx].src = rx->ctx.addr;
    a576:	8922      	ldrh	r2, [r4, #8]
	rx->msg_cache_idx = msg_cache_next++;
    a578:	4914      	ldr	r1, [pc, #80]	; (a5cc <bt_mesh_net_decode+0x18c>)
	msg_cache[rx->msg_cache_idx].src = rx->ctx.addr;
    a57a:	f3c2 020e 	ubfx	r2, r2, #0, #15
	rx->msg_cache_idx = msg_cache_next++;
    a57e:	880b      	ldrh	r3, [r1, #0]
    a580:	82e3      	strh	r3, [r4, #22]
	msg_cache[rx->msg_cache_idx].src = rx->ctx.addr;
    a582:	ea42 30c0 	orr.w	r0, r2, r0, lsl #15
    a586:	4a12      	ldr	r2, [pc, #72]	; (a5d0 <bt_mesh_net_decode+0x190>)
    a588:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	rx->msg_cache_idx = msg_cache_next++;
    a58c:	3301      	adds	r3, #1
	msg_cache_next %= ARRAY_SIZE(msg_cache);
    a58e:	200a      	movs	r0, #10
    a590:	b29b      	uxth	r3, r3
    a592:	fbb3 f2f0 	udiv	r2, r3, r0
    a596:	fb00 3312 	mls	r3, r0, r2, r3
    a59a:	800b      	strh	r3, [r1, #0]
	return 0;
    a59c:	2000      	movs	r0, #0
}
    a59e:	e770      	b.n	a482 <bt_mesh_net_decode+0x42>
		return -ENOENT;
    a5a0:	f06f 0001 	mvn.w	r0, #1
    a5a4:	e76d      	b.n	a482 <bt_mesh_net_decode+0x42>
    a5a6:	bf00      	nop
    a5a8:	0001e408 	.word	0x0001e408
    a5ac:	0001e588 	.word	0x0001e588
    a5b0:	000207ac 	.word	0x000207ac
    a5b4:	0001f954 	.word	0x0001f954
    a5b8:	000207d4 	.word	0x000207d4
    a5bc:	20001bac 	.word	0x20001bac
    a5c0:	20001bd4 	.word	0x20001bd4
    a5c4:	00009da5 	.word	0x00009da5
    a5c8:	000207fb 	.word	0x000207fb
    a5cc:	20002e50 	.word	0x20002e50
    a5d0:	20001bd8 	.word	0x20001bd8

0000a5d4 <bt_mesh_net_recv>:
{
    a5d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    a5d6:	b093      	sub	sp, #76	; 0x4c
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_NET_MAX_PDU_LEN);
    a5d8:	ab0a      	add	r3, sp, #40	; 0x28
{
    a5da:	4616      	mov	r6, r2
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_NET_MAX_PDU_LEN);
    a5dc:	f44f 12e8 	mov.w	r2, #1900544	; 0x1d0000
    a5e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
{
    a5e4:	460c      	mov	r4, r1
    a5e6:	4605      	mov	r5, r0
	struct bt_mesh_net_rx rx = { .ctx.recv_rssi = rssi };
    a5e8:	2218      	movs	r2, #24
    a5ea:	2100      	movs	r1, #0
    a5ec:	a804      	add	r0, sp, #16
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_NET_MAX_PDU_LEN);
    a5ee:	9301      	str	r3, [sp, #4]
	struct bt_mesh_net_rx rx = { .ctx.recv_rssi = rssi };
    a5f0:	f00f fb03 	bl	19bfa <memset>
    a5f4:	f88d 401c 	strb.w	r4, [sp, #28]
	if (!bt_mesh_is_provisioned()) {
    a5f8:	f7fe ff88 	bl	950c <bt_mesh_is_provisioned>
    a5fc:	2800      	cmp	r0, #0
    a5fe:	f000 8081 	beq.w	a704 <bt_mesh_net_recv+0x130>
	if (bt_mesh_net_decode(data, net_if, &rx, &buf)) {
    a602:	ab01      	add	r3, sp, #4
    a604:	aa04      	add	r2, sp, #16
    a606:	4631      	mov	r1, r6
    a608:	4628      	mov	r0, r5
    a60a:	f7ff ff19 	bl	a440 <bt_mesh_net_decode>
    a60e:	2800      	cmp	r0, #0
    a610:	d178      	bne.n	a704 <bt_mesh_net_recv+0x130>
	state->offset = net_buf_simple_headroom(buf);
    a612:	a801      	add	r0, sp, #4
    a614:	f012 fee4 	bl	1d3e0 <net_buf_simple_headroom>
    a618:	4604      	mov	r4, r0
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    a61a:	f8bd 001a 	ldrh.w	r0, [sp, #26]
	state->len = buf->len;
    a61e:	f8bd 7008 	ldrh.w	r7, [sp, #8]
    a622:	f010 ff26 	bl	1b472 <bt_mesh_fixed_group_match>
    a626:	bb40      	cbnz	r0, a67a <bt_mesh_net_recv+0xa6>
			  bt_mesh_elem_find(rx.ctx.recv_dst));
    a628:	f8bd 001a 	ldrh.w	r0, [sp, #26]
    a62c:	f002 fb5a 	bl	cce4 <bt_mesh_elem_find>
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    a630:	3800      	subs	r0, #0
    a632:	bf18      	it	ne
    a634:	2001      	movne	r0, #1
    a636:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    a63a:	2e02      	cmp	r6, #2
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    a63c:	f360 1386 	bfi	r3, r0, #6, #1
    a640:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    a644:	d11b      	bne.n	a67e <bt_mesh_net_recv+0xaa>
		bt_mesh_proxy_addr_add(data, rx.ctx.addr);
    a646:	f8bd 1018 	ldrh.w	r1, [sp, #24]
    a64a:	4628      	mov	r0, r5
    a64c:	f011 fc3c 	bl	1bec8 <bt_mesh_proxy_addr_add>
		if (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_DISABLED &&
    a650:	f7ff f81c 	bl	968c <bt_mesh_gatt_proxy_get>
		    !rx.local_match) {
    a654:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    a658:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_DISABLED &&
    a65c:	4318      	orrs	r0, r3
    a65e:	f010 0fff 	tst.w	r0, #255	; 0xff
    a662:	d10c      	bne.n	a67e <bt_mesh_net_recv+0xaa>
    a664:	496c      	ldr	r1, [pc, #432]	; (a818 <bt_mesh_net_recv+0x244>)
    a666:	4b6d      	ldr	r3, [pc, #436]	; (a81c <bt_mesh_net_recv+0x248>)
			BT_INFO("Proxy is disabled; ignoring message");
    a668:	486d      	ldr	r0, [pc, #436]	; (a820 <bt_mesh_net_recv+0x24c>)
    a66a:	1ac9      	subs	r1, r1, r3
    a66c:	08c9      	lsrs	r1, r1, #3
    a66e:	0189      	lsls	r1, r1, #6
    a670:	f041 0103 	orr.w	r1, r1, #3
		BT_ERR("Out of relay buffers");
    a674:	f00e fbbd 	bl	18df2 <log_0>
		return;
    a678:	e044      	b.n	a704 <bt_mesh_net_recv+0x130>
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    a67a:	2001      	movs	r0, #1
    a67c:	e7db      	b.n	a636 <bt_mesh_net_recv+0x62>
	if (bt_mesh_trans_recv(&buf, &rx) == -EAGAIN) {
    a67e:	a904      	add	r1, sp, #16
    a680:	a801      	add	r0, sp, #4
    a682:	f001 fa79 	bl	bb78 <bt_mesh_trans_recv>
    a686:	300b      	adds	r0, #11
    a688:	d114      	bne.n	a6b4 <bt_mesh_net_recv+0xe0>
    a68a:	4b64      	ldr	r3, [pc, #400]	; (a81c <bt_mesh_net_recv+0x248>)
    a68c:	4962      	ldr	r1, [pc, #392]	; (a818 <bt_mesh_net_recv+0x244>)
		BT_WARN("Removing rejected message from Network Message Cache");
    a68e:	4865      	ldr	r0, [pc, #404]	; (a824 <bt_mesh_net_recv+0x250>)
    a690:	1ac9      	subs	r1, r1, r3
    a692:	08c9      	lsrs	r1, r1, #3
    a694:	0189      	lsls	r1, r1, #6
    a696:	f041 0102 	orr.w	r1, r1, #2
    a69a:	f00e fbaa 	bl	18df2 <log_0>
		msg_cache[rx.msg_cache_idx].src = BT_MESH_ADDR_UNASSIGNED;
    a69e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
    a6a2:	4a61      	ldr	r2, [pc, #388]	; (a828 <bt_mesh_net_recv+0x254>)
    a6a4:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
    a6a8:	f36f 010e 	bfc	r1, #0, #15
    a6ac:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		msg_cache_next = rx.msg_cache_idx;
    a6b0:	4a5e      	ldr	r2, [pc, #376]	; (a82c <bt_mesh_net_recv+0x258>)
    a6b2:	8013      	strh	r3, [r2, #0]
	if (!BT_MESH_ADDR_IS_UNICAST(rx.ctx.recv_dst) ||
    a6b4:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
    a6b8:	2b00      	cmp	r3, #0
    a6ba:	dd04      	ble.n	a6c6 <bt_mesh_net_recv+0xf2>
	    (!rx.local_match && !rx.friend_match)) {
    a6bc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	if (!BT_MESH_ADDR_IS_UNICAST(rx.ctx.recv_dst) ||
    a6c0:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    a6c4:	d11e      	bne.n	a704 <bt_mesh_net_recv+0x130>
	buf->data = buf->__buf + state->offset;
    a6c6:	9803      	ldr	r0, [sp, #12]
	if (rx->ctx.recv_ttl <= 1U) {
    a6c8:	f89d 301d 	ldrb.w	r3, [sp, #29]
	buf->len = state->len;
    a6cc:	f8ad 7008 	strh.w	r7, [sp, #8]
	buf->data = buf->__buf + state->offset;
    a6d0:	fa10 f484 	uxtah	r4, r0, r4
    a6d4:	2b01      	cmp	r3, #1
    a6d6:	9401      	str	r4, [sp, #4]
    a6d8:	d914      	bls.n	a704 <bt_mesh_net_recv+0x130>
	if (rx->net_if == BT_MESH_NET_IF_ADV &&
    a6da:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    a6de:	f013 0f34 	tst.w	r3, #52	; 0x34
    a6e2:	d108      	bne.n	a6f6 <bt_mesh_net_recv+0x122>
	    bt_mesh_relay_get() != BT_MESH_RELAY_ENABLED &&
    a6e4:	f7ff f898 	bl	9818 <bt_mesh_relay_get>
	    !rx->friend_cred &&
    a6e8:	2801      	cmp	r0, #1
    a6ea:	d107      	bne.n	a6fc <bt_mesh_net_recv+0x128>
	if (rx->net_if == BT_MESH_NET_IF_ADV && !rx->friend_cred) {
    a6ec:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    a6f0:	f013 0f34 	tst.w	r3, #52	; 0x34
    a6f4:	d008      	beq.n	a708 <bt_mesh_net_recv+0x134>
		transmit = bt_mesh_net_transmit_get();
    a6f6:	f7ff f80d 	bl	9714 <bt_mesh_net_transmit_get>
    a6fa:	e007      	b.n	a70c <bt_mesh_net_recv+0x138>
	    bt_mesh_gatt_proxy_get() != BT_MESH_GATT_PROXY_ENABLED) {
    a6fc:	f7fe ffc6 	bl	968c <bt_mesh_gatt_proxy_get>
	    bt_mesh_relay_get() != BT_MESH_RELAY_ENABLED &&
    a700:	2801      	cmp	r0, #1
    a702:	d0f3      	beq.n	a6ec <bt_mesh_net_recv+0x118>
}
    a704:	b013      	add	sp, #76	; 0x4c
    a706:	bdf0      	pop	{r4, r5, r6, r7, pc}
		transmit = bt_mesh_relay_retransmit_get();
    a708:	f7ff f890 	bl	982c <bt_mesh_relay_retransmit_get>
		transmit = bt_mesh_net_transmit_get();
    a70c:	4601      	mov	r1, r0
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, transmit, K_NO_WAIT);
    a70e:	2200      	movs	r2, #0
    a710:	2300      	movs	r3, #0
    a712:	2001      	movs	r0, #1
    a714:	f7ff f924 	bl	9960 <bt_mesh_adv_create>
	if (!buf) {
    a718:	4604      	mov	r4, r0
    a71a:	b940      	cbnz	r0, a72e <bt_mesh_net_recv+0x15a>
    a71c:	493e      	ldr	r1, [pc, #248]	; (a818 <bt_mesh_net_recv+0x244>)
    a71e:	4b3f      	ldr	r3, [pc, #252]	; (a81c <bt_mesh_net_recv+0x248>)
		BT_ERR("Out of relay buffers");
    a720:	4843      	ldr	r0, [pc, #268]	; (a830 <bt_mesh_net_recv+0x25c>)
    a722:	1ac9      	subs	r1, r1, r3
    a724:	08c9      	lsrs	r1, r1, #3
    a726:	0189      	lsls	r1, r1, #6
    a728:	f041 0101 	orr.w	r1, r1, #1
    a72c:	e7a2      	b.n	a674 <bt_mesh_net_recv+0xa0>
	sbuf->data[1] &= 0x80;
    a72e:	9a01      	ldr	r2, [sp, #4]
    a730:	7853      	ldrb	r3, [r2, #1]
    a732:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    a736:	7053      	strb	r3, [r2, #1]
	sbuf->data[1] |= rx->ctx.recv_ttl - 1U;
    a738:	9a01      	ldr	r2, [sp, #4]
    a73a:	f89d 301d 	ldrb.w	r3, [sp, #29]
    a73e:	7851      	ldrb	r1, [r2, #1]
    a740:	3b01      	subs	r3, #1
    a742:	430b      	orrs	r3, r1
    a744:	7053      	strb	r3, [r2, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
    a746:	f100 0508 	add.w	r5, r0, #8
    a74a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    a74e:	9901      	ldr	r1, [sp, #4]
    a750:	4628      	mov	r0, r5
    a752:	f012 fdba 	bl	1d2ca <net_buf_simple_add_mem>
	cred = &rx->sub->keys[SUBNET_KEY_TX_IDX(rx->sub)].msg;
    a756:	9b04      	ldr	r3, [sp, #16]
    a758:	7f9a      	ldrb	r2, [r3, #30]
    a75a:	1e90      	subs	r0, r2, #2
    a75c:	4241      	negs	r1, r0
    a75e:	4141      	adcs	r1, r0
    a760:	225a      	movs	r2, #90	; 0x5a
	if (rx->friend_cred) {
    a762:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
	cred = &rx->sub->keys[SUBNET_KEY_TX_IDX(rx->sub)].msg;
    a766:	434a      	muls	r2, r1
    a768:	f102 013d 	add.w	r1, r2, #61	; 0x3d
	if (rx->friend_cred) {
    a76c:	0746      	lsls	r6, r0, #29
	cred = &rx->sub->keys[SUBNET_KEY_TX_IDX(rx->sub)].msg;
    a76e:	4419      	add	r1, r3
	if (rx->friend_cred) {
    a770:	d50b      	bpl.n	a78a <bt_mesh_net_recv+0x1b6>
		buf->data[0] &= 0x80; /* Clear everything except IVI */
    a772:	68a6      	ldr	r6, [r4, #8]
    a774:	7830      	ldrb	r0, [r6, #0]
    a776:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
    a77a:	7030      	strb	r0, [r6, #0]
		buf->data[0] |= cred->nid;
    a77c:	68a0      	ldr	r0, [r4, #8]
    a77e:	4413      	add	r3, r2
    a780:	7802      	ldrb	r2, [r0, #0]
    a782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    a786:	4313      	orrs	r3, r2
    a788:	7003      	strb	r3, [r0, #0]
	if (net_encrypt(&buf->b, cred, BT_MESH_NET_IVI_RX(rx), false)) {
    a78a:	4b2a      	ldr	r3, [pc, #168]	; (a834 <bt_mesh_net_recv+0x260>)
    a78c:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
    a790:	6818      	ldr	r0, [r3, #0]
    a792:	f002 0201 	and.w	r2, r2, #1
    a796:	1a82      	subs	r2, r0, r2
    a798:	2300      	movs	r3, #0
    a79a:	4628      	mov	r0, r5
    a79c:	f010 feaf 	bl	1b4fe <net_encrypt>
    a7a0:	b168      	cbz	r0, a7be <bt_mesh_net_recv+0x1ea>
    a7a2:	491d      	ldr	r1, [pc, #116]	; (a818 <bt_mesh_net_recv+0x244>)
    a7a4:	4b1d      	ldr	r3, [pc, #116]	; (a81c <bt_mesh_net_recv+0x248>)
		BT_ERR("Re-encrypting failed");
    a7a6:	4824      	ldr	r0, [pc, #144]	; (a838 <bt_mesh_net_recv+0x264>)
    a7a8:	1ac9      	subs	r1, r1, r3
    a7aa:	08c9      	lsrs	r1, r1, #3
    a7ac:	0189      	lsls	r1, r1, #6
    a7ae:	f041 0101 	orr.w	r1, r1, #1
    a7b2:	f00e fb1e 	bl	18df2 <log_0>
	net_buf_unref(buf);
    a7b6:	4620      	mov	r0, r4
    a7b8:	f00a ffd0 	bl	1575c <net_buf_unref>
    a7bc:	e7a2      	b.n	a704 <bt_mesh_net_recv+0x130>
	    (rx->friend_cred ||
    a7be:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    a7c2:	0759      	lsls	r1, r3, #29
    a7c4:	d512      	bpl.n	a7ec <bt_mesh_net_recv+0x218>
		bt_mesh_proxy_relay(&buf->b, rx->ctx.recv_dst);
    a7c6:	f8bd 101a 	ldrh.w	r1, [sp, #26]
    a7ca:	4628      	mov	r0, r5
    a7cc:	f003 fe78 	bl	e4c0 <bt_mesh_proxy_relay>
	if (relay_to_adv(rx->net_if) || rx->friend_cred) {
    a7d0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	switch (net_if) {
    a7d4:	f013 0f30 	tst.w	r3, #48	; 0x30
	if (relay_to_adv(rx->net_if) || rx->friend_cred) {
    a7d8:	f3c3 1201 	ubfx	r2, r3, #4, #2
	switch (net_if) {
    a7dc:	d00b      	beq.n	a7f6 <bt_mesh_net_recv+0x222>
    a7de:	2a02      	cmp	r2, #2
    a7e0:	d016      	beq.n	a810 <bt_mesh_net_recv+0x23c>
	if (relay_to_adv(rx->net_if) || rx->friend_cred) {
    a7e2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    a7e6:	075b      	lsls	r3, r3, #29
    a7e8:	d40c      	bmi.n	a804 <bt_mesh_net_recv+0x230>
done:
    a7ea:	e7e4      	b.n	a7b6 <bt_mesh_net_recv+0x1e2>
	     bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED)) {
    a7ec:	f7fe ff4e 	bl	968c <bt_mesh_gatt_proxy_get>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    a7f0:	2801      	cmp	r0, #1
    a7f2:	d1ed      	bne.n	a7d0 <bt_mesh_net_recv+0x1fc>
    a7f4:	e7e7      	b.n	a7c6 <bt_mesh_net_recv+0x1f2>
		return (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED);
    a7f6:	f7ff f80f 	bl	9818 <bt_mesh_relay_get>
		return (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
    a7fa:	1e42      	subs	r2, r0, #1
    a7fc:	4250      	negs	r0, r2
    a7fe:	4150      	adcs	r0, r2
	if (relay_to_adv(rx->net_if) || rx->friend_cred) {
    a800:	2800      	cmp	r0, #0
    a802:	d0ee      	beq.n	a7e2 <bt_mesh_net_recv+0x20e>
		bt_mesh_adv_send(buf, NULL, NULL);
    a804:	2200      	movs	r2, #0
    a806:	4611      	mov	r1, r2
    a808:	4620      	mov	r0, r4
    a80a:	f7ff f8b9 	bl	9980 <bt_mesh_adv_send>
    a80e:	e7d2      	b.n	a7b6 <bt_mesh_net_recv+0x1e2>
		return (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
    a810:	f7fe ff3c 	bl	968c <bt_mesh_gatt_proxy_get>
    a814:	e7f1      	b.n	a7fa <bt_mesh_net_recv+0x226>
    a816:	bf00      	nop
    a818:	0001e588 	.word	0x0001e588
    a81c:	0001e408 	.word	0x0001e408
    a820:	0002082e 	.word	0x0002082e
    a824:	00020852 	.word	0x00020852
    a828:	20001bd8 	.word	0x20001bd8
    a82c:	20002e50 	.word	0x20002e50
    a830:	00020887 	.word	0x00020887
    a834:	200011d0 	.word	0x200011d0
    a838:	0002089c 	.word	0x0002089c

0000a83c <bt_mesh_net_settings_commit>:
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
}

void bt_mesh_net_settings_commit(void)
{
	if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
    a83c:	4805      	ldr	r0, [pc, #20]	; (a854 <bt_mesh_net_settings_commit+0x18>)
    a83e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    a842:	2b5f      	cmp	r3, #95	; 0x5f
    a844:	d804      	bhi.n	a850 <bt_mesh_net_settings_commit+0x14>
		k_work_reschedule(&bt_mesh.ivu_timer, BT_MESH_IVU_TIMEOUT);
    a846:	4a04      	ldr	r2, [pc, #16]	; (a858 <bt_mesh_net_settings_commit+0x1c>)
    a848:	2300      	movs	r3, #0
    a84a:	3028      	adds	r0, #40	; 0x28
    a84c:	f00c bfd2 	b.w	177f4 <k_work_reschedule>
	}
}
    a850:	4770      	bx	lr
    a852:	bf00      	nop
    a854:	200011d0 	.word	0x200011d0
    a858:	a8c00000 	.word	0xa8c00000

0000a85c <subnet_evt>:
		.net_idx = BT_MESH_KEY_UNUSED,
	},
};

static void subnet_evt(struct bt_mesh_subnet *sub, enum bt_mesh_key_evt evt)
{
    a85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Z_STRUCT_SECTION_FOREACH(bt_mesh_subnet_cb, cb) {
    a85e:	4c06      	ldr	r4, [pc, #24]	; (a878 <subnet_evt+0x1c>)
    a860:	4f06      	ldr	r7, [pc, #24]	; (a87c <subnet_evt+0x20>)
{
    a862:	4605      	mov	r5, r0
    a864:	460e      	mov	r6, r1
	Z_STRUCT_SECTION_FOREACH(bt_mesh_subnet_cb, cb) {
    a866:	42bc      	cmp	r4, r7
    a868:	d300      	bcc.n	a86c <subnet_evt+0x10>
		cb->evt_handler(sub, evt);
	}
}
    a86a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb->evt_handler(sub, evt);
    a86c:	f854 3b04 	ldr.w	r3, [r4], #4
    a870:	4631      	mov	r1, r6
    a872:	4628      	mov	r0, r5
    a874:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_mesh_subnet_cb, cb) {
    a876:	e7f6      	b.n	a866 <subnet_evt+0xa>
    a878:	0001e2a4 	.word	0x0001e2a4
    a87c:	0001e2b0 	.word	0x0001e2b0

0000a880 <subnet_alloc>:
{
	struct bt_mesh_subnet *sub = NULL;

	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
		/* Check for already existing subnet */
		if (subnets[i].net_idx == net_idx) {
    a880:	4a0e      	ldr	r2, [pc, #56]	; (a8bc <subnet_alloc+0x3c>)
    a882:	8b93      	ldrh	r3, [r2, #28]
    a884:	4298      	cmp	r0, r3
{
    a886:	b530      	push	{r4, r5, lr}
    a888:	4601      	mov	r1, r0
    a88a:	4615      	mov	r5, r2
		if (subnets[i].net_idx == net_idx) {
    a88c:	d00f      	beq.n	a8ae <subnet_alloc+0x2e>
			return &subnets[i];
		}

		if (!sub && subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    a88e:	f64f 74ff 	movw	r4, #65535	; 0xffff
			sub = &subnets[i];
    a892:	42a3      	cmp	r3, r4
    a894:	bf0c      	ite	eq
    a896:	4610      	moveq	r0, r2
    a898:	2000      	movne	r0, #0
		if (subnets[i].net_idx == net_idx) {
    a89a:	f8b2 30fc 	ldrh.w	r3, [r2, #252]	; 0xfc
    a89e:	4299      	cmp	r1, r3
    a8a0:	d00a      	beq.n	a8b8 <subnet_alloc+0x38>
		if (!sub && subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    a8a2:	b918      	cbnz	r0, a8ac <subnet_alloc+0x2c>
			sub = &subnets[i];
    a8a4:	32e0      	adds	r2, #224	; 0xe0
    a8a6:	42a3      	cmp	r3, r4
    a8a8:	bf08      	it	eq
    a8aa:	4610      	moveq	r0, r2
		}
	}

	return sub;
}
    a8ac:	bd30      	pop	{r4, r5, pc}
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
    a8ae:	2000      	movs	r0, #0
			return &subnets[i];
    a8b0:	23e0      	movs	r3, #224	; 0xe0
    a8b2:	fb03 5000 	mla	r0, r3, r0, r5
    a8b6:	e7f9      	b.n	a8ac <subnet_alloc+0x2c>
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
    a8b8:	2001      	movs	r0, #1
    a8ba:	e7f9      	b.n	a8b0 <subnet_alloc+0x30>
    a8bc:	200002c0 	.word	0x200002c0

0000a8c0 <clear_net_key>:
{
    a8c0:	b510      	push	{r4, lr}
    a8c2:	b086      	sub	sp, #24
	snprintk(path, sizeof(path), "bt/mesh/NetKey/%x", net_idx);
    a8c4:	4603      	mov	r3, r0
    a8c6:	4a0b      	ldr	r2, [pc, #44]	; (a8f4 <clear_net_key+0x34>)
{
    a8c8:	4604      	mov	r4, r0
	snprintk(path, sizeof(path), "bt/mesh/NetKey/%x", net_idx);
    a8ca:	2114      	movs	r1, #20
    a8cc:	a801      	add	r0, sp, #4
    a8ce:	f00d fe58 	bl	18582 <snprintk>
	err = settings_delete(path);
    a8d2:	a801      	add	r0, sp, #4
    a8d4:	f00e fde0 	bl	19498 <settings_delete>
	if (err) {
    a8d8:	b150      	cbz	r0, a8f0 <clear_net_key+0x30>
    a8da:	4a07      	ldr	r2, [pc, #28]	; (a8f8 <clear_net_key+0x38>)
    a8dc:	4b07      	ldr	r3, [pc, #28]	; (a8fc <clear_net_key+0x3c>)
		BT_ERR("Failed to clear NetKeyIndex 0x%03x", net_idx);
    a8de:	4808      	ldr	r0, [pc, #32]	; (a900 <clear_net_key+0x40>)
    a8e0:	1ad2      	subs	r2, r2, r3
    a8e2:	08d2      	lsrs	r2, r2, #3
    a8e4:	0192      	lsls	r2, r2, #6
    a8e6:	f042 0201 	orr.w	r2, r2, #1
    a8ea:	4621      	mov	r1, r4
    a8ec:	f00e fa8e 	bl	18e0c <log_1>
}
    a8f0:	b006      	add	sp, #24
    a8f2:	bd10      	pop	{r4, pc}
    a8f4:	0002095b 	.word	0x0002095b
    a8f8:	0001e590 	.word	0x0001e590
    a8fc:	0001e408 	.word	0x0001e408
    a900:	0002096d 	.word	0x0002096d

0000a904 <net_keys_create>:
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
}

static int net_keys_create(struct bt_mesh_subnet_keys *keys,
			   const uint8_t key[16])
{
    a904:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t p = 0;
    a906:	2300      	movs	r3, #0
    a908:	f88d 300f 	strb.w	r3, [sp, #15]
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
    a90c:	f100 0322 	add.w	r3, r0, #34	; 0x22
{
    a910:	460e      	mov	r6, r1
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
    a912:	9301      	str	r3, [sp, #4]
    a914:	f100 0312 	add.w	r3, r0, #18
    a918:	9300      	str	r3, [sp, #0]
{
    a91a:	4605      	mov	r5, r0
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
    a91c:	f100 0311 	add.w	r3, r0, #17
    a920:	2201      	movs	r2, #1
    a922:	f10d 010f 	add.w	r1, sp, #15
    a926:	4630      	mov	r0, r6
    a928:	f001 fef0 	bl	c70c <bt_mesh_k2>
	int err;

	err = msg_cred_create(&keys->msg, &p, 1, key);
	if (err) {
    a92c:	4604      	mov	r4, r0
    a92e:	b160      	cbz	r0, a94a <net_keys_create+0x46>
    a930:	4923      	ldr	r1, [pc, #140]	; (a9c0 <net_keys_create+0xbc>)
    a932:	4b24      	ldr	r3, [pc, #144]	; (a9c4 <net_keys_create+0xc0>)
		BT_ERR("Unable to generate NID, EncKey & PrivacyKey");
    a934:	4824      	ldr	r0, [pc, #144]	; (a9c8 <net_keys_create+0xc4>)
    a936:	1ac9      	subs	r1, r1, r3
    a938:	08c9      	lsrs	r1, r1, #3
    a93a:	0189      	lsls	r1, r1, #6
    a93c:	f041 0101 	orr.w	r1, r1, #1
	BT_DBG("IdentityKey %s", bt_hex(keys->identity, 16));
#endif /* GATT_PROXY */

	err = bt_mesh_beacon_key(key, keys->beacon);
	if (err) {
		BT_ERR("Unable to generate beacon key");
    a940:	f00e fa57 	bl	18df2 <log_0>
	BT_DBG("BeaconKey %s", bt_hex(keys->beacon, 16));

	keys->valid = 1U;

	return 0;
}
    a944:	4620      	mov	r0, r4
    a946:	b004      	add	sp, #16
    a948:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(keys->net, key, 16);
    a94a:	2210      	movs	r2, #16
    a94c:	4631      	mov	r1, r6
    a94e:	1c68      	adds	r0, r5, #1
    a950:	f00f f928 	bl	19ba4 <memcpy>
	err = bt_mesh_k3(key, keys->net_id);
    a954:	f105 0132 	add.w	r1, r5, #50	; 0x32
    a958:	4630      	mov	r0, r6
    a95a:	f001 ff2f 	bl	c7bc <bt_mesh_k3>
	if (err) {
    a95e:	4604      	mov	r4, r0
    a960:	b140      	cbz	r0, a974 <net_keys_create+0x70>
    a962:	4917      	ldr	r1, [pc, #92]	; (a9c0 <net_keys_create+0xbc>)
    a964:	4b17      	ldr	r3, [pc, #92]	; (a9c4 <net_keys_create+0xc0>)
		BT_ERR("Unable to generate Net ID");
    a966:	4819      	ldr	r0, [pc, #100]	; (a9cc <net_keys_create+0xc8>)
    a968:	1ac9      	subs	r1, r1, r3
    a96a:	08c9      	lsrs	r1, r1, #3
    a96c:	0189      	lsls	r1, r1, #6
    a96e:	f041 0101 	orr.w	r1, r1, #1
    a972:	e7e5      	b.n	a940 <net_keys_create+0x3c>
}

static inline int bt_mesh_identity_key(const uint8_t net_key[16],
				       uint8_t identity_key[16])
{
	return bt_mesh_id128(net_key, "nkik", identity_key);
    a974:	4916      	ldr	r1, [pc, #88]	; (a9d0 <net_keys_create+0xcc>)
    a976:	f105 023a 	add.w	r2, r5, #58	; 0x3a
    a97a:	4630      	mov	r0, r6
    a97c:	f001 ff74 	bl	c868 <bt_mesh_id128>
	if (err) {
    a980:	4604      	mov	r4, r0
    a982:	b140      	cbz	r0, a996 <net_keys_create+0x92>
    a984:	490e      	ldr	r1, [pc, #56]	; (a9c0 <net_keys_create+0xbc>)
    a986:	4b0f      	ldr	r3, [pc, #60]	; (a9c4 <net_keys_create+0xc0>)
		BT_ERR("Unable to generate IdentityKey");
    a988:	4812      	ldr	r0, [pc, #72]	; (a9d4 <net_keys_create+0xd0>)
    a98a:	1ac9      	subs	r1, r1, r3
    a98c:	08c9      	lsrs	r1, r1, #3
    a98e:	0189      	lsls	r1, r1, #6
    a990:	f041 0101 	orr.w	r1, r1, #1
    a994:	e7d4      	b.n	a940 <net_keys_create+0x3c>
}

static inline int bt_mesh_beacon_key(const uint8_t net_key[16],
				     uint8_t beacon_key[16])
{
	return bt_mesh_id128(net_key, "nkbk", beacon_key);
    a996:	4910      	ldr	r1, [pc, #64]	; (a9d8 <net_keys_create+0xd4>)
    a998:	f105 024a 	add.w	r2, r5, #74	; 0x4a
    a99c:	4630      	mov	r0, r6
    a99e:	f001 ff63 	bl	c868 <bt_mesh_id128>
	if (err) {
    a9a2:	4604      	mov	r4, r0
    a9a4:	b140      	cbz	r0, a9b8 <net_keys_create+0xb4>
    a9a6:	4906      	ldr	r1, [pc, #24]	; (a9c0 <net_keys_create+0xbc>)
    a9a8:	4b06      	ldr	r3, [pc, #24]	; (a9c4 <net_keys_create+0xc0>)
		BT_ERR("Unable to generate beacon key");
    a9aa:	480c      	ldr	r0, [pc, #48]	; (a9dc <net_keys_create+0xd8>)
    a9ac:	1ac9      	subs	r1, r1, r3
    a9ae:	08c9      	lsrs	r1, r1, #3
    a9b0:	0189      	lsls	r1, r1, #6
    a9b2:	f041 0101 	orr.w	r1, r1, #1
    a9b6:	e7c3      	b.n	a940 <net_keys_create+0x3c>
	keys->valid = 1U;
    a9b8:	2301      	movs	r3, #1
    a9ba:	702b      	strb	r3, [r5, #0]
	return 0;
    a9bc:	e7c2      	b.n	a944 <net_keys_create+0x40>
    a9be:	bf00      	nop
    a9c0:	0001e590 	.word	0x0001e590
    a9c4:	0001e408 	.word	0x0001e408
    a9c8:	00020990 	.word	0x00020990
    a9cc:	000209bc 	.word	0x000209bc
    a9d0:	000209d6 	.word	0x000209d6
    a9d4:	000209db 	.word	0x000209db
    a9d8:	000209fa 	.word	0x000209fa
    a9dc:	000209ff 	.word	0x000209ff

0000a9e0 <bt_mesh_net_flags>:
	if (sub && (sub->kr_phase == BT_MESH_KR_PHASE_2)) {
    a9e0:	b118      	cbz	r0, a9ea <bt_mesh_net_flags+0xa>
    a9e2:	7f80      	ldrb	r0, [r0, #30]
	uint8_t flags = 0x00;
    a9e4:	1e82      	subs	r2, r0, #2
    a9e6:	4250      	negs	r0, r2
    a9e8:	4150      	adcs	r0, r2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a9ea:	4b05      	ldr	r3, [pc, #20]	; (aa00 <bt_mesh_net_flags+0x20>)
    a9ec:	f3bf 8f5b 	dmb	ish
    a9f0:	681b      	ldr	r3, [r3, #0]
    a9f2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    a9f6:	075b      	lsls	r3, r3, #29
		flags |= BT_MESH_NET_FLAG_IVU;
    a9f8:	bf48      	it	mi
    a9fa:	f040 0002 	orrmi.w	r0, r0, #2
}
    a9fe:	4770      	bx	lr
    aa00:	200011d8 	.word	0x200011d8

0000aa04 <bt_mesh_subnet_get>:

	return count;
}

struct bt_mesh_subnet *bt_mesh_subnet_get(uint16_t net_idx)
{
    aa04:	4602      	mov	r2, r0
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
		struct bt_mesh_subnet *sub = &subnets[i];

		if (sub->net_idx == net_idx) {
    aa06:	4806      	ldr	r0, [pc, #24]	; (aa20 <bt_mesh_subnet_get+0x1c>)
    aa08:	8b83      	ldrh	r3, [r0, #28]
    aa0a:	4293      	cmp	r3, r2
    aa0c:	d007      	beq.n	aa1e <bt_mesh_subnet_get+0x1a>
    aa0e:	f8b0 10fc 	ldrh.w	r1, [r0, #252]	; 0xfc
		struct bt_mesh_subnet *sub = &subnets[i];
    aa12:	f100 03e0 	add.w	r3, r0, #224	; 0xe0
    aa16:	4291      	cmp	r1, r2
    aa18:	bf0c      	ite	eq
    aa1a:	4618      	moveq	r0, r3
    aa1c:	2000      	movne	r0, #0
			return sub;
		}
	}

	return NULL;
}
    aa1e:	4770      	bx	lr
    aa20:	200002c0 	.word	0x200002c0

0000aa24 <store_subnet>:
{
    aa24:	b530      	push	{r4, r5, lr}
    aa26:	b08f      	sub	sp, #60	; 0x3c
    aa28:	4605      	mov	r5, r0
	sub = bt_mesh_subnet_get(net_idx);
    aa2a:	f7ff ffeb 	bl	aa04 <bt_mesh_subnet_get>
	if (!sub) {
    aa2e:	4604      	mov	r4, r0
    aa30:	b960      	cbnz	r0, aa4c <store_subnet+0x28>
    aa32:	4a1b      	ldr	r2, [pc, #108]	; (aaa0 <store_subnet+0x7c>)
    aa34:	4b1b      	ldr	r3, [pc, #108]	; (aaa4 <store_subnet+0x80>)
		BT_WARN("NetKeyIndex 0x%03x not found", net_idx);
    aa36:	481c      	ldr	r0, [pc, #112]	; (aaa8 <store_subnet+0x84>)
    aa38:	1ad2      	subs	r2, r2, r3
    aa3a:	08d2      	lsrs	r2, r2, #3
    aa3c:	0192      	lsls	r2, r2, #6
    aa3e:	f042 0202 	orr.w	r2, r2, #2
    aa42:	4629      	mov	r1, r5
    aa44:	f00e f9e2 	bl	18e0c <log_1>
}
    aa48:	b00f      	add	sp, #60	; 0x3c
    aa4a:	bd30      	pop	{r4, r5, pc}
	snprintk(path, sizeof(path), "bt/mesh/NetKey/%x", net_idx);
    aa4c:	462b      	mov	r3, r5
    aa4e:	4a17      	ldr	r2, [pc, #92]	; (aaac <store_subnet+0x88>)
    aa50:	2114      	movs	r1, #20
    aa52:	4668      	mov	r0, sp
    aa54:	f00d fd95 	bl	18582 <snprintk>
	memcpy(&key.val[0], sub->keys[0].net, 16);
    aa58:	2210      	movs	r2, #16
    aa5a:	f104 012d 	add.w	r1, r4, #45	; 0x2d
    aa5e:	f10d 0015 	add.w	r0, sp, #21
    aa62:	f00f f89f 	bl	19ba4 <memcpy>
	memcpy(&key.val[1], sub->keys[1].net, 16);
    aa66:	2210      	movs	r2, #16
    aa68:	f104 0187 	add.w	r1, r4, #135	; 0x87
    aa6c:	f10d 0025 	add.w	r0, sp, #37	; 0x25
    aa70:	f00f f898 	bl	19ba4 <memcpy>
	key.kr_flag = 0U; /* Deprecated */
    aa74:	7fa3      	ldrb	r3, [r4, #30]
	err = settings_save_one(path, &key, sizeof(key));
    aa76:	2221      	movs	r2, #33	; 0x21
	key.kr_flag = 0U; /* Deprecated */
    aa78:	005b      	lsls	r3, r3, #1
	err = settings_save_one(path, &key, sizeof(key));
    aa7a:	a905      	add	r1, sp, #20
    aa7c:	4668      	mov	r0, sp
	key.kr_flag = 0U; /* Deprecated */
    aa7e:	f88d 3014 	strb.w	r3, [sp, #20]
	err = settings_save_one(path, &key, sizeof(key));
    aa82:	f7f8 f8cf 	bl	2c24 <settings_save_one>
	if (err) {
    aa86:	2800      	cmp	r0, #0
    aa88:	d0de      	beq.n	aa48 <store_subnet+0x24>
    aa8a:	4b06      	ldr	r3, [pc, #24]	; (aaa4 <store_subnet+0x80>)
    aa8c:	4904      	ldr	r1, [pc, #16]	; (aaa0 <store_subnet+0x7c>)
		BT_ERR("Failed to store NetKey value");
    aa8e:	4808      	ldr	r0, [pc, #32]	; (aab0 <store_subnet+0x8c>)
    aa90:	1ac9      	subs	r1, r1, r3
    aa92:	08c9      	lsrs	r1, r1, #3
    aa94:	0189      	lsls	r1, r1, #6
    aa96:	f041 0101 	orr.w	r1, r1, #1
    aa9a:	f00e f9aa 	bl	18df2 <log_0>
		BT_DBG("Stored NetKey value");
    aa9e:	e7d3      	b.n	aa48 <store_subnet+0x24>
    aaa0:	0001e590 	.word	0x0001e590
    aaa4:	0001e408 	.word	0x0001e408
    aaa8:	00020a1d 	.word	0x00020a1d
    aaac:	0002095b 	.word	0x0002095b
    aab0:	00020a3a 	.word	0x00020a3a

0000aab4 <update_subnet_settings>:
		if (!update->valid) {
    aab4:	4a20      	ldr	r2, [pc, #128]	; (ab38 <update_subnet_settings+0x84>)
    aab6:	7853      	ldrb	r3, [r2, #1]
    aab8:	f013 0310 	ands.w	r3, r3, #16
{
    aabc:	b470      	push	{r4, r5, r6}
	uint8_t clear = store ? 0U : 1U;
    aabe:	f081 0501 	eor.w	r5, r1, #1
		if (!update->valid) {
    aac2:	d018      	beq.n	aaf6 <update_subnet_settings+0x42>
		if (update->key_idx == key_idx) {
    aac4:	8814      	ldrh	r4, [r2, #0]
    aac6:	f3c4 040b 	ubfx	r4, r4, #0, #12
    aaca:	4284      	cmp	r4, r0
	*free_slot = NULL;
    aacc:	f04f 0400 	mov.w	r4, #0
		if (update->key_idx == key_idx) {
    aad0:	d113      	bne.n	aafa <update_subnet_settings+0x46>
		struct net_key_update *update = &net_key_updates[i];
    aad2:	4613      	mov	r3, r2
		if (!update->valid) {
    aad4:	78d6      	ldrb	r6, [r2, #3]
    aad6:	06f6      	lsls	r6, r6, #27
    aad8:	d51b      	bpl.n	ab12 <update_subnet_settings+0x5e>
		if (update->key_idx == key_idx) {
    aada:	8852      	ldrh	r2, [r2, #2]
    aadc:	f3c2 020b 	ubfx	r2, r2, #0, #12
    aae0:	4282      	cmp	r2, r0
    aae2:	d00c      	beq.n	aafe <update_subnet_settings+0x4a>
	if (update) {
    aae4:	b16b      	cbz	r3, ab02 <update_subnet_settings+0x4e>
		update->clear = clear;
    aae6:	785a      	ldrb	r2, [r3, #1]
    aae8:	f365 1245 	bfi	r2, r5, #5, #1
    aaec:	705a      	strb	r2, [r3, #1]
}
    aaee:	bc70      	pop	{r4, r5, r6}
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_NET_KEYS_PENDING);
    aaf0:	2001      	movs	r0, #1
    aaf2:	f002 ba8f 	b.w	d014 <bt_mesh_settings_store_schedule>
			*free_slot = update;
    aaf6:	4614      	mov	r4, r2
    aaf8:	e7ec      	b.n	aad4 <update_subnet_settings+0x20>
	match = NULL;
    aafa:	4623      	mov	r3, r4
    aafc:	e7ea      	b.n	aad4 <update_subnet_settings+0x20>
		struct net_key_update *update = &net_key_updates[i];
    aafe:	4b0f      	ldr	r3, [pc, #60]	; (ab3c <update_subnet_settings+0x88>)
    ab00:	e7f1      	b.n	aae6 <update_subnet_settings+0x32>
	if (!free_slot) {
    ab02:	b94c      	cbnz	r4, ab18 <update_subnet_settings+0x64>
		if (store) {
    ab04:	b111      	cbz	r1, ab0c <update_subnet_settings+0x58>
}
    ab06:	bc70      	pop	{r4, r5, r6}
			store_subnet(net_idx);
    ab08:	f7ff bf8c 	b.w	aa24 <store_subnet>
}
    ab0c:	bc70      	pop	{r4, r5, r6}
			clear_net_key(net_idx);
    ab0e:	f7ff bed7 	b.w	a8c0 <clear_net_key>
	if (update) {
    ab12:	2b00      	cmp	r3, #0
    ab14:	d1e7      	bne.n	aae6 <update_subnet_settings+0x32>
			*free_slot = update;
    ab16:	4c09      	ldr	r4, [pc, #36]	; (ab3c <update_subnet_settings+0x88>)
	free_slot->key_idx = net_idx;
    ab18:	8822      	ldrh	r2, [r4, #0]
    ab1a:	f3c0 030b 	ubfx	r3, r0, #0, #12
    ab1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    ab22:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    ab26:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
    ab2a:	f3c3 030d 	ubfx	r3, r3, #0, #14
    ab2e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
    ab32:	4313      	orrs	r3, r2
    ab34:	8023      	strh	r3, [r4, #0]
    ab36:	e7da      	b.n	aaee <update_subnet_settings+0x3a>
    ab38:	20002e52 	.word	0x20002e52
    ab3c:	20002e54 	.word	0x20002e54

0000ab40 <net_key_set>:
	return false;
}

static int net_key_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
    ab40:	b570      	push	{r4, r5, r6, lr}
    ab42:	4614      	mov	r4, r2
    ab44:	b08a      	sub	sp, #40	; 0x28
    ab46:	461e      	mov	r6, r3
	struct net_key_val key;
	int err;
	uint16_t net_idx;

	if (!name) {
    ab48:	b970      	cbnz	r0, ab68 <net_key_set+0x28>
    ab4a:	4b1b      	ldr	r3, [pc, #108]	; (abb8 <net_key_set+0x78>)
    ab4c:	491b      	ldr	r1, [pc, #108]	; (abbc <net_key_set+0x7c>)
		BT_ERR("Insufficient number of arguments");
    ab4e:	481c      	ldr	r0, [pc, #112]	; (abc0 <net_key_set+0x80>)
    ab50:	1ac9      	subs	r1, r1, r3
    ab52:	08c9      	lsrs	r1, r1, #3
    ab54:	0189      	lsls	r1, r1, #6
    ab56:	f041 0101 	orr.w	r1, r1, #1
    ab5a:	f00e f94a 	bl	18df2 <log_0>
		return -ENOENT;
    ab5e:	f06f 0401 	mvn.w	r4, #1
	BT_DBG("NetKeyIndex 0x%03x recovered from storage", net_idx);

	return bt_mesh_subnet_set(
		net_idx, key.kr_phase, key.val[0],
		(key.kr_phase != BT_MESH_KR_NORMAL) ? key.val[1] : NULL);
}
    ab62:	4620      	mov	r0, r4
    ab64:	b00a      	add	sp, #40	; 0x28
    ab66:	bd70      	pop	{r4, r5, r6, pc}
	net_idx = strtol(name, NULL, 16);
    ab68:	2210      	movs	r2, #16
    ab6a:	2100      	movs	r1, #0
    ab6c:	f00e ff4c 	bl	19a08 <strtol>
	err = bt_mesh_settings_set(read_cb, cb_arg, &key, sizeof(key));
    ab70:	2321      	movs	r3, #33	; 0x21
	net_idx = strtol(name, NULL, 16);
    ab72:	b285      	uxth	r5, r0
	err = bt_mesh_settings_set(read_cb, cb_arg, &key, sizeof(key));
    ab74:	aa01      	add	r2, sp, #4
    ab76:	4620      	mov	r0, r4
    ab78:	4631      	mov	r1, r6
    ab7a:	f002 fa19 	bl	cfb0 <bt_mesh_settings_set>
	if (err) {
    ab7e:	4604      	mov	r4, r0
    ab80:	b150      	cbz	r0, ab98 <net_key_set+0x58>
    ab82:	4b0d      	ldr	r3, [pc, #52]	; (abb8 <net_key_set+0x78>)
    ab84:	490d      	ldr	r1, [pc, #52]	; (abbc <net_key_set+0x7c>)
		BT_ERR("Failed to set \'net-key\'");
    ab86:	480f      	ldr	r0, [pc, #60]	; (abc4 <net_key_set+0x84>)
    ab88:	1ac9      	subs	r1, r1, r3
    ab8a:	08c9      	lsrs	r1, r1, #3
    ab8c:	0189      	lsls	r1, r1, #6
    ab8e:	f041 0101 	orr.w	r1, r1, #1
    ab92:	f00e f92e 	bl	18df2 <log_0>
		return err;
    ab96:	e7e4      	b.n	ab62 <net_key_set+0x22>
		net_idx, key.kr_phase, key.val[0],
    ab98:	f89d 3004 	ldrb.w	r3, [sp, #4]
	return bt_mesh_subnet_set(
    ab9c:	0859      	lsrs	r1, r3, #1
    ab9e:	f013 03fe 	ands.w	r3, r3, #254	; 0xfe
    aba2:	bf18      	it	ne
    aba4:	f10d 0315 	addne.w	r3, sp, #21
    aba8:	f10d 0205 	add.w	r2, sp, #5
    abac:	4628      	mov	r0, r5
    abae:	f010 fcf2 	bl	1b596 <bt_mesh_subnet_set>
    abb2:	4604      	mov	r4, r0
    abb4:	e7d5      	b.n	ab62 <net_key_set+0x22>
    abb6:	bf00      	nop
    abb8:	0001e408 	.word	0x0001e408
    abbc:	0001e590 	.word	0x0001e590
    abc0:	0001f368 	.word	0x0001f368
    abc4:	00020a57 	.word	0x00020a57

0000abc8 <bt_mesh_subnet_find>:
{
    abc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    abca:	4c0f      	ldr	r4, [pc, #60]	; (ac08 <bt_mesh_subnet_find+0x40>)
    abcc:	8ba2      	ldrh	r2, [r4, #28]
    abce:	f64f 73ff 	movw	r3, #65535	; 0xffff
    abd2:	429a      	cmp	r2, r3
{
    abd4:	4605      	mov	r5, r0
    abd6:	460e      	mov	r6, r1
    abd8:	4627      	mov	r7, r4
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    abda:	d003      	beq.n	abe4 <bt_mesh_subnet_find+0x1c>
		if (!cb || cb(&subnets[i], cb_data)) {
    abdc:	4620      	mov	r0, r4
    abde:	b14d      	cbz	r5, abf4 <bt_mesh_subnet_find+0x2c>
    abe0:	47a8      	blx	r5
    abe2:	b978      	cbnz	r0, ac04 <bt_mesh_subnet_find+0x3c>
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    abe4:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	; 0xfc
    abe8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    abec:	429a      	cmp	r2, r3
    abee:	d007      	beq.n	ac00 <bt_mesh_subnet_find+0x38>
		if (!cb || cb(&subnets[i], cb_data)) {
    abf0:	b90d      	cbnz	r5, abf6 <bt_mesh_subnet_find+0x2e>
    abf2:	4806      	ldr	r0, [pc, #24]	; (ac0c <bt_mesh_subnet_find+0x44>)
}
    abf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!cb || cb(&subnets[i], cb_data)) {
    abf6:	4805      	ldr	r0, [pc, #20]	; (ac0c <bt_mesh_subnet_find+0x44>)
    abf8:	4631      	mov	r1, r6
    abfa:	47a8      	blx	r5
    abfc:	2800      	cmp	r0, #0
    abfe:	d1f8      	bne.n	abf2 <bt_mesh_subnet_find+0x2a>
	return NULL;
    ac00:	2000      	movs	r0, #0
    ac02:	e7f7      	b.n	abf4 <bt_mesh_subnet_find+0x2c>
		if (!cb || cb(&subnets[i], cb_data)) {
    ac04:	4620      	mov	r0, r4
    ac06:	e7f5      	b.n	abf4 <bt_mesh_subnet_find+0x2c>
    ac08:	200002c0 	.word	0x200002c0
    ac0c:	200003a0 	.word	0x200003a0

0000ac10 <bt_mesh_subnet_foreach>:
{
    ac10:	b570      	push	{r4, r5, r6, lr}
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    ac12:	4c0b      	ldr	r4, [pc, #44]	; (ac40 <bt_mesh_subnet_foreach+0x30>)
    ac14:	8ba2      	ldrh	r2, [r4, #28]
    ac16:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ac1a:	429a      	cmp	r2, r3
{
    ac1c:	4606      	mov	r6, r0
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    ac1e:	d00d      	beq.n	ac3c <bt_mesh_subnet_foreach+0x2c>
		cb(&subnets[i]);
    ac20:	4620      	mov	r0, r4
    ac22:	47b0      	blx	r6
		count++;
    ac24:	2501      	movs	r5, #1
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    ac26:	f8b4 20fc 	ldrh.w	r2, [r4, #252]	; 0xfc
    ac2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ac2e:	429a      	cmp	r2, r3
    ac30:	d002      	beq.n	ac38 <bt_mesh_subnet_foreach+0x28>
		cb(&subnets[i]);
    ac32:	4804      	ldr	r0, [pc, #16]	; (ac44 <bt_mesh_subnet_foreach+0x34>)
    ac34:	47b0      	blx	r6
		count++;
    ac36:	3501      	adds	r5, #1
}
    ac38:	4628      	mov	r0, r5
    ac3a:	bd70      	pop	{r4, r5, r6, pc}
	size_t count = 0;
    ac3c:	2500      	movs	r5, #0
    ac3e:	e7f2      	b.n	ac26 <bt_mesh_subnet_foreach+0x16>
    ac40:	200002c0 	.word	0x200002c0
    ac44:	200003a0 	.word	0x200003a0

0000ac48 <bt_mesh_subnet_next>:
	if (sub) {
    ac48:	b1b8      	cbz	r0, ac7a <bt_mesh_subnet_next+0x32>
		if (sub == &subnets[ARRAY_SIZE(subnets)]) {
    ac4a:	4b0d      	ldr	r3, [pc, #52]	; (ac80 <bt_mesh_subnet_next+0x38>)
		sub++;
    ac4c:	30e0      	adds	r0, #224	; 0xe0
		sub = &subnets[0];
    ac4e:	f5a3 72e0 	sub.w	r2, r3, #448	; 0x1c0
    ac52:	4298      	cmp	r0, r3
    ac54:	bf08      	it	eq
    ac56:	4610      	moveq	r0, r2
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
    ac58:	8b83      	ldrh	r3, [r0, #28]
    ac5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ac5e:	4293      	cmp	r3, r2
    ac60:	d10a      	bne.n	ac78 <bt_mesh_subnet_next+0x30>
		if (sub == &subnets[ARRAY_SIZE(subnets)]) {
    ac62:	4a07      	ldr	r2, [pc, #28]	; (ac80 <bt_mesh_subnet_next+0x38>)
	for (int i = 0; i < ARRAY_SIZE(subnets); i++, sub++) {
    ac64:	30e0      	adds	r0, #224	; 0xe0
			sub = &subnets[0];
    ac66:	f5a2 71e0 	sub.w	r1, r2, #448	; 0x1c0
    ac6a:	4290      	cmp	r0, r2
    ac6c:	bf08      	it	eq
    ac6e:	4608      	moveq	r0, r1
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
    ac70:	8b82      	ldrh	r2, [r0, #28]
	return NULL;
    ac72:	429a      	cmp	r2, r3
    ac74:	bf08      	it	eq
    ac76:	2000      	moveq	r0, #0
}
    ac78:	4770      	bx	lr
		sub = &subnets[0];
    ac7a:	4802      	ldr	r0, [pc, #8]	; (ac84 <bt_mesh_subnet_next+0x3c>)
    ac7c:	e7ec      	b.n	ac58 <bt_mesh_subnet_next+0x10>
    ac7e:	bf00      	nop
    ac80:	20000480 	.word	0x20000480
    ac84:	200002c0 	.word	0x200002c0

0000ac88 <bt_mesh_net_cred_find>:
{
    ac88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ac8c:	4d1c      	ldr	r5, [pc, #112]	; (ad00 <bt_mesh_net_cred_find+0x78>)
    ac8e:	4604      	mov	r4, r0
    ac90:	460e      	mov	r6, r1
    ac92:	4617      	mov	r7, r2
    ac94:	4698      	mov	r8, r3
	for (i = 0; i < ARRAY_SIZE(subnets); i++) {
    ac96:	f04f 0900 	mov.w	r9, #0
		if (rx->sub->net_idx == BT_MESH_KEY_UNUSED) {
    ac9a:	f64f 7aff 	movw	sl, #65535	; 0xffff
    ac9e:	8bab      	ldrh	r3, [r5, #28]
		rx->sub = &subnets[i];
    aca0:	6025      	str	r5, [r4, #0]
		if (rx->sub->net_idx == BT_MESH_KEY_UNUSED) {
    aca2:	4553      	cmp	r3, sl
    aca4:	d025      	beq.n	acf2 <bt_mesh_net_cred_find+0x6a>
			if (!rx->sub->keys[j].valid) {
    aca6:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
    acaa:	b133      	cbz	r3, acba <bt_mesh_net_cred_find+0x32>
			if (cb(rx, in, out, &rx->sub->keys[j].msg)) {
    acac:	f105 033d 	add.w	r3, r5, #61	; 0x3d
    acb0:	463a      	mov	r2, r7
    acb2:	4631      	mov	r1, r6
    acb4:	4620      	mov	r0, r4
    acb6:	47c0      	blx	r8
    acb8:	b9c8      	cbnz	r0, acee <bt_mesh_net_cred_find+0x66>
			if (!rx->sub->keys[j].valid) {
    acba:	6823      	ldr	r3, [r4, #0]
    acbc:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
    acc0:	b1ba      	cbz	r2, acf2 <bt_mesh_net_cred_find+0x6a>
			if (cb(rx, in, out, &rx->sub->keys[j].msg)) {
    acc2:	3397      	adds	r3, #151	; 0x97
    acc4:	463a      	mov	r2, r7
    acc6:	4631      	mov	r1, r6
    acc8:	4620      	mov	r0, r4
    acca:	47c0      	blx	r8
    accc:	b188      	cbz	r0, acf2 <bt_mesh_net_cred_find+0x6a>
		for (j = 0; j < ARRAY_SIZE(rx->sub->keys); j++) {
    acce:	2201      	movs	r2, #1
				rx->new_key = (j > 0);
    acd0:	7d23      	ldrb	r3, [r4, #20]
    acd2:	f023 0306 	bic.w	r3, r3, #6
    acd6:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
    acda:	7523      	strb	r3, [r4, #20]
				rx->ctx.net_idx = rx->sub->net_idx;
    acdc:	6823      	ldr	r3, [r4, #0]
    acde:	8b9b      	ldrh	r3, [r3, #28]
    ace0:	80a3      	strh	r3, [r4, #4]
				return true;
    ace2:	2001      	movs	r0, #1
}
    ace4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ace8:	f04f 0901 	mov.w	r9, #1
    acec:	e7d7      	b.n	ac9e <bt_mesh_net_cred_find+0x16>
		for (j = 0; j < ARRAY_SIZE(rx->sub->keys); j++) {
    acee:	2200      	movs	r2, #0
    acf0:	e7ee      	b.n	acd0 <bt_mesh_net_cred_find+0x48>
	for (i = 0; i < ARRAY_SIZE(subnets); i++) {
    acf2:	35e0      	adds	r5, #224	; 0xe0
    acf4:	f1b9 0f00 	cmp.w	r9, #0
    acf8:	d0f6      	beq.n	ace8 <bt_mesh_net_cred_find+0x60>
	return false;
    acfa:	2000      	movs	r0, #0
    acfc:	e7f2      	b.n	ace4 <bt_mesh_net_cred_find+0x5c>
    acfe:	bf00      	nop
    ad00:	200002c0 	.word	0x200002c0

0000ad04 <app_get>:
		.net_idx = BT_MESH_KEY_UNUSED,
	}
};

static struct app_key *app_get(uint16_t app_idx)
{
    ad04:	4602      	mov	r2, r0
	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
		if (apps[i].app_idx == app_idx) {
    ad06:	4808      	ldr	r0, [pc, #32]	; (ad28 <app_get+0x24>)
    ad08:	8843      	ldrh	r3, [r0, #2]
    ad0a:	4293      	cmp	r3, r2
    ad0c:	4603      	mov	r3, r0
    ad0e:	d007      	beq.n	ad20 <app_get+0x1c>
    ad10:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
    ad12:	4291      	cmp	r1, r2
    ad14:	d106      	bne.n	ad24 <app_get+0x20>
	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
    ad16:	2001      	movs	r0, #1
			return &apps[i];
    ad18:	2228      	movs	r2, #40	; 0x28
    ad1a:	fb02 3000 	mla	r0, r2, r0, r3
    ad1e:	4770      	bx	lr
	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
    ad20:	2000      	movs	r0, #0
    ad22:	e7f9      	b.n	ad18 <app_get+0x14>
		}
	}

	return NULL;
    ad24:	2000      	movs	r0, #0
}
    ad26:	4770      	bx	lr
    ad28:	200009cc 	.word	0x200009cc

0000ad2c <app_key_evt>:

	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_APP_KEYS_PENDING);
}

static void app_key_evt(struct app_key *app, enum bt_mesh_key_evt evt)
{
    ad2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Z_STRUCT_SECTION_FOREACH(bt_mesh_app_key_cb, cb) {
    ad2e:	4d07      	ldr	r5, [pc, #28]	; (ad4c <app_key_evt+0x20>)
    ad30:	4f07      	ldr	r7, [pc, #28]	; (ad50 <app_key_evt+0x24>)
{
    ad32:	4604      	mov	r4, r0
    ad34:	460e      	mov	r6, r1
	Z_STRUCT_SECTION_FOREACH(bt_mesh_app_key_cb, cb) {
    ad36:	42bd      	cmp	r5, r7
    ad38:	d300      	bcc.n	ad3c <app_key_evt+0x10>
		cb->evt_handler(app->app_idx, app->net_idx, evt);
	}
}
    ad3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb->evt_handler(app->app_idx, app->net_idx, evt);
    ad3c:	f855 3b04 	ldr.w	r3, [r5], #4
    ad40:	8821      	ldrh	r1, [r4, #0]
    ad42:	8860      	ldrh	r0, [r4, #2]
    ad44:	4632      	mov	r2, r6
    ad46:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_mesh_app_key_cb, cb) {
    ad48:	e7f5      	b.n	ad36 <app_key_evt+0xa>
    ad4a:	bf00      	nop
    ad4c:	0001e2b0 	.word	0x0001e2b0
    ad50:	0001e2b4 	.word	0x0001e2b4

0000ad54 <app_key_alloc>:
{
	struct app_key *app = NULL;

	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
		/* Check for already existing app_key */
		if (apps[i].app_idx == app_idx) {
    ad54:	4a0e      	ldr	r2, [pc, #56]	; (ad90 <app_key_alloc+0x3c>)
    ad56:	8853      	ldrh	r3, [r2, #2]
    ad58:	4298      	cmp	r0, r3
{
    ad5a:	b530      	push	{r4, r5, lr}
    ad5c:	4601      	mov	r1, r0
    ad5e:	4615      	mov	r5, r2
		if (apps[i].app_idx == app_idx) {
    ad60:	d00e      	beq.n	ad80 <app_key_alloc+0x2c>
			return &apps[i];
		}

		if (!app && apps[i].app_idx == BT_MESH_KEY_UNUSED) {
    ad62:	f64f 74ff 	movw	r4, #65535	; 0xffff
			app = &apps[i];
    ad66:	42a3      	cmp	r3, r4
    ad68:	bf0c      	ite	eq
    ad6a:	4610      	moveq	r0, r2
    ad6c:	2000      	movne	r0, #0
		if (apps[i].app_idx == app_idx) {
    ad6e:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
    ad70:	4299      	cmp	r1, r3
    ad72:	d00a      	beq.n	ad8a <app_key_alloc+0x36>
		if (!app && apps[i].app_idx == BT_MESH_KEY_UNUSED) {
    ad74:	b918      	cbnz	r0, ad7e <app_key_alloc+0x2a>
			app = &apps[i];
    ad76:	3228      	adds	r2, #40	; 0x28
    ad78:	42a3      	cmp	r3, r4
    ad7a:	bf08      	it	eq
    ad7c:	4610      	moveq	r0, r2
		}
	}

	return app;
}
    ad7e:	bd30      	pop	{r4, r5, pc}
	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
    ad80:	2000      	movs	r0, #0
			return &apps[i];
    ad82:	2328      	movs	r3, #40	; 0x28
    ad84:	fb03 5000 	mla	r0, r3, r0, r5
    ad88:	e7f9      	b.n	ad7e <app_key_alloc+0x2a>
	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
    ad8a:	2001      	movs	r0, #1
    ad8c:	e7f9      	b.n	ad82 <app_key_alloc+0x2e>
    ad8e:	bf00      	nop
    ad90:	200009cc 	.word	0x200009cc

0000ad94 <store_app_key>:
{
    ad94:	b530      	push	{r4, r5, lr}
    ad96:	b08f      	sub	sp, #60	; 0x3c
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
    ad98:	4603      	mov	r3, r0
    ad9a:	4a20      	ldr	r2, [pc, #128]	; (ae1c <store_app_key+0x88>)
{
    ad9c:	4605      	mov	r5, r0
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
    ad9e:	2114      	movs	r1, #20
    ada0:	4668      	mov	r0, sp
    ada2:	f00d fbee 	bl	18582 <snprintk>
	app = app_get(app_idx);
    ada6:	4628      	mov	r0, r5
    ada8:	f7ff ffac 	bl	ad04 <app_get>
	if (!app) {
    adac:	4604      	mov	r4, r0
    adae:	b960      	cbnz	r0, adca <store_app_key+0x36>
    adb0:	4a1b      	ldr	r2, [pc, #108]	; (ae20 <store_app_key+0x8c>)
    adb2:	4b1c      	ldr	r3, [pc, #112]	; (ae24 <store_app_key+0x90>)
		BT_WARN("ApKeyIndex 0x%03x not found", app_idx);
    adb4:	481c      	ldr	r0, [pc, #112]	; (ae28 <store_app_key+0x94>)
    adb6:	1ad2      	subs	r2, r2, r3
    adb8:	08d2      	lsrs	r2, r2, #3
    adba:	0192      	lsls	r2, r2, #6
    adbc:	f042 0202 	orr.w	r2, r2, #2
    adc0:	4629      	mov	r1, r5
		BT_ERR("Failed to store AppKey %s value", log_strdup(path));
    adc2:	f00e f823 	bl	18e0c <log_1>
}
    adc6:	b00f      	add	sp, #60	; 0x3c
    adc8:	bd30      	pop	{r4, r5, pc}
	key.net_idx = app->net_idx,
    adca:	8803      	ldrh	r3, [r0, #0]
    adcc:	f8ad 3014 	strh.w	r3, [sp, #20]
	memcpy(key.val[0], app->keys[0].val, 16);
    add0:	1d81      	adds	r1, r0, #6
	key.updated = app->updated,
    add2:	7903      	ldrb	r3, [r0, #4]
    add4:	f88d 3016 	strb.w	r3, [sp, #22]
	memcpy(key.val[0], app->keys[0].val, 16);
    add8:	2210      	movs	r2, #16
    adda:	f10d 0017 	add.w	r0, sp, #23
    adde:	f00e fee1 	bl	19ba4 <memcpy>
	memcpy(key.val[1], app->keys[1].val, 16);
    ade2:	2210      	movs	r2, #16
    ade4:	f104 0117 	add.w	r1, r4, #23
    ade8:	f10d 0027 	add.w	r0, sp, #39	; 0x27
    adec:	f00e feda 	bl	19ba4 <memcpy>
	err = settings_save_one(path, &key, sizeof(key));
    adf0:	2223      	movs	r2, #35	; 0x23
    adf2:	a905      	add	r1, sp, #20
    adf4:	4668      	mov	r0, sp
    adf6:	f7f7 ff15 	bl	2c24 <settings_save_one>
	if (err) {
    adfa:	2800      	cmp	r0, #0
    adfc:	d0e3      	beq.n	adc6 <store_app_key+0x32>
    adfe:	4a09      	ldr	r2, [pc, #36]	; (ae24 <store_app_key+0x90>)
    ae00:	4c07      	ldr	r4, [pc, #28]	; (ae20 <store_app_key+0x8c>)
    ae02:	4668      	mov	r0, sp
    ae04:	1aa4      	subs	r4, r4, r2
    ae06:	08e4      	lsrs	r4, r4, #3
    ae08:	f7f7 fa6c 	bl	22e4 <z_log_strdup>
		BT_ERR("Failed to store AppKey %s value", log_strdup(path));
    ae0c:	01a4      	lsls	r4, r4, #6
    ae0e:	f044 0401 	orr.w	r4, r4, #1
    ae12:	4601      	mov	r1, r0
    ae14:	4622      	mov	r2, r4
    ae16:	4805      	ldr	r0, [pc, #20]	; (ae2c <store_app_key+0x98>)
    ae18:	e7d3      	b.n	adc2 <store_app_key+0x2e>
    ae1a:	bf00      	nop
    ae1c:	00020a8f 	.word	0x00020a8f
    ae20:	0001e530 	.word	0x0001e530
    ae24:	0001e408 	.word	0x0001e408
    ae28:	00020aa1 	.word	0x00020aa1
    ae2c:	00020abd 	.word	0x00020abd

0000ae30 <clear_app_key>:
{
    ae30:	b510      	push	{r4, lr}
    ae32:	b086      	sub	sp, #24
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
    ae34:	4603      	mov	r3, r0
    ae36:	4a0b      	ldr	r2, [pc, #44]	; (ae64 <clear_app_key+0x34>)
{
    ae38:	4604      	mov	r4, r0
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
    ae3a:	2114      	movs	r1, #20
    ae3c:	a801      	add	r0, sp, #4
    ae3e:	f00d fba0 	bl	18582 <snprintk>
	err = settings_delete(path);
    ae42:	a801      	add	r0, sp, #4
    ae44:	f00e fb28 	bl	19498 <settings_delete>
	if (err) {
    ae48:	b150      	cbz	r0, ae60 <clear_app_key+0x30>
    ae4a:	4a07      	ldr	r2, [pc, #28]	; (ae68 <clear_app_key+0x38>)
    ae4c:	4b07      	ldr	r3, [pc, #28]	; (ae6c <clear_app_key+0x3c>)
		BT_ERR("Failed to clear AppKeyIndex 0x%03x", app_idx);
    ae4e:	4808      	ldr	r0, [pc, #32]	; (ae70 <clear_app_key+0x40>)
    ae50:	1ad2      	subs	r2, r2, r3
    ae52:	08d2      	lsrs	r2, r2, #3
    ae54:	0192      	lsls	r2, r2, #6
    ae56:	f042 0201 	orr.w	r2, r2, #1
    ae5a:	4621      	mov	r1, r4
    ae5c:	f00d ffd6 	bl	18e0c <log_1>
}
    ae60:	b006      	add	sp, #24
    ae62:	bd10      	pop	{r4, pc}
    ae64:	00020a8f 	.word	0x00020a8f
    ae68:	0001e530 	.word	0x0001e530
    ae6c:	0001e408 	.word	0x0001e408
    ae70:	00020add 	.word	0x00020add

0000ae74 <update_app_key_settings>:
		if (!update->valid) {
    ae74:	4a20      	ldr	r2, [pc, #128]	; (aef8 <update_app_key_settings+0x84>)
    ae76:	7853      	ldrb	r3, [r2, #1]
    ae78:	f013 0310 	ands.w	r3, r3, #16
{
    ae7c:	b470      	push	{r4, r5, r6}
	uint8_t clear = store ? 0U : 1U;
    ae7e:	f081 0501 	eor.w	r5, r1, #1
		if (!update->valid) {
    ae82:	d018      	beq.n	aeb6 <update_app_key_settings+0x42>
		if (update->key_idx == key_idx) {
    ae84:	8814      	ldrh	r4, [r2, #0]
    ae86:	f3c4 040b 	ubfx	r4, r4, #0, #12
    ae8a:	4284      	cmp	r4, r0
	*free_slot = NULL;
    ae8c:	f04f 0400 	mov.w	r4, #0
		if (update->key_idx == key_idx) {
    ae90:	d113      	bne.n	aeba <update_app_key_settings+0x46>
		struct app_key_update *update = &app_key_updates[i];
    ae92:	4613      	mov	r3, r2
		if (!update->valid) {
    ae94:	78d6      	ldrb	r6, [r2, #3]
    ae96:	06f6      	lsls	r6, r6, #27
    ae98:	d51b      	bpl.n	aed2 <update_app_key_settings+0x5e>
		if (update->key_idx == key_idx) {
    ae9a:	8852      	ldrh	r2, [r2, #2]
    ae9c:	f3c2 020b 	ubfx	r2, r2, #0, #12
    aea0:	4282      	cmp	r2, r0
    aea2:	d00c      	beq.n	aebe <update_app_key_settings+0x4a>
	if (update) {
    aea4:	b16b      	cbz	r3, aec2 <update_app_key_settings+0x4e>
		update->clear = clear;
    aea6:	785a      	ldrb	r2, [r3, #1]
    aea8:	f365 1245 	bfi	r2, r5, #5, #1
    aeac:	705a      	strb	r2, [r3, #1]
}
    aeae:	bc70      	pop	{r4, r5, r6}
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_APP_KEYS_PENDING);
    aeb0:	2002      	movs	r0, #2
    aeb2:	f002 b8af 	b.w	d014 <bt_mesh_settings_store_schedule>
			*free_slot = update;
    aeb6:	4614      	mov	r4, r2
    aeb8:	e7ec      	b.n	ae94 <update_app_key_settings+0x20>
	match = NULL;
    aeba:	4623      	mov	r3, r4
    aebc:	e7ea      	b.n	ae94 <update_app_key_settings+0x20>
		struct app_key_update *update = &app_key_updates[i];
    aebe:	4b0f      	ldr	r3, [pc, #60]	; (aefc <update_app_key_settings+0x88>)
    aec0:	e7f1      	b.n	aea6 <update_app_key_settings+0x32>
	if (!free_slot) {
    aec2:	b94c      	cbnz	r4, aed8 <update_app_key_settings+0x64>
		if (store) {
    aec4:	b111      	cbz	r1, aecc <update_app_key_settings+0x58>
}
    aec6:	bc70      	pop	{r4, r5, r6}
			store_app_key(app_idx);
    aec8:	f7ff bf64 	b.w	ad94 <store_app_key>
}
    aecc:	bc70      	pop	{r4, r5, r6}
			clear_app_key(app_idx);
    aece:	f7ff bfaf 	b.w	ae30 <clear_app_key>
	if (update) {
    aed2:	2b00      	cmp	r3, #0
    aed4:	d1e7      	bne.n	aea6 <update_app_key_settings+0x32>
			*free_slot = update;
    aed6:	4c09      	ldr	r4, [pc, #36]	; (aefc <update_app_key_settings+0x88>)
	free_slot->key_idx = app_idx;
    aed8:	8822      	ldrh	r2, [r4, #0]
    aeda:	f3c0 030b 	ubfx	r3, r0, #0, #12
    aede:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    aee2:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    aee6:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
    aeea:	f3c3 030d 	ubfx	r3, r3, #0, #14
    aeee:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
    aef2:	4313      	orrs	r3, r2
    aef4:	8023      	strh	r3, [r4, #0]
    aef6:	e7da      	b.n	aeae <update_app_key_settings+0x3a>
    aef8:	20002e56 	.word	0x20002e56
    aefc:	20002e58 	.word	0x20002e58

0000af00 <subnet_evt>:
	return BT_MESH_KEY_UNUSED;
}

static void subnet_evt(struct bt_mesh_subnet *sub, enum bt_mesh_key_evt evt)
{
	if (evt == BT_MESH_KEY_UPDATED || evt == BT_MESH_KEY_ADDED) {
    af00:	f011 0ffd 	tst.w	r1, #253	; 0xfd
{
    af04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    af08:	4607      	mov	r7, r0
    af0a:	460d      	mov	r5, r1
	if (evt == BT_MESH_KEY_UPDATED || evt == BT_MESH_KEY_ADDED) {
    af0c:	d014      	beq.n	af38 <subnet_evt+0x38>
    af0e:	4c1e      	ldr	r4, [pc, #120]	; (af88 <subnet_evt+0x88>)
		return;
	}

	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
    af10:	f04f 0800 	mov.w	r8, #0
		struct app_key *app = &apps[i];

		if (app->app_idx == BT_MESH_KEY_UNUSED) {
    af14:	f64f 79ff 	movw	r9, #65535	; 0xffff
    af18:	8863      	ldrh	r3, [r4, #2]
    af1a:	454b      	cmp	r3, r9
    af1c:	d008      	beq.n	af30 <subnet_evt+0x30>
			continue;
		}

		if (app->net_idx != sub->net_idx) {
    af1e:	8822      	ldrh	r2, [r4, #0]
    af20:	8bbb      	ldrh	r3, [r7, #28]
    af22:	429a      	cmp	r2, r3
    af24:	d104      	bne.n	af30 <subnet_evt+0x30>
			continue;
		}

		if (evt == BT_MESH_KEY_DELETED) {
    af26:	2d01      	cmp	r5, #1
    af28:	d10b      	bne.n	af42 <subnet_evt+0x42>
			app_key_del(app);
    af2a:	4620      	mov	r0, r4
    af2c:	f010 fb64 	bl	1b5f8 <app_key_del>
	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
    af30:	3428      	adds	r4, #40	; 0x28
    af32:	f1b8 0f00 	cmp.w	r8, #0
    af36:	d001      	beq.n	af3c <subnet_evt+0x3c>
			app_key_revoke(app);
		} else if (evt == BT_MESH_KEY_SWAPPED && app->updated) {
			app_key_evt(app, BT_MESH_KEY_SWAPPED);
		}
	}
}
    af38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    af3c:	f04f 0801 	mov.w	r8, #1
    af40:	e7ea      	b.n	af18 <subnet_evt+0x18>
		} else if (evt == BT_MESH_KEY_REVOKED) {
    af42:	2d04      	cmp	r5, #4
    af44:	d119      	bne.n	af7a <subnet_evt+0x7a>
	if (!app->updated) {
    af46:	7923      	ldrb	r3, [r4, #4]
    af48:	2b00      	cmp	r3, #0
    af4a:	d0f1      	beq.n	af30 <subnet_evt+0x30>
	memcpy(&app->keys[0], &app->keys[1], sizeof(app->keys[0]));
    af4c:	f104 0616 	add.w	r6, r4, #22
    af50:	2211      	movs	r2, #17
    af52:	4631      	mov	r1, r6
    af54:	1d60      	adds	r0, r4, #5
    af56:	f00e fe25 	bl	19ba4 <memcpy>
	memset(&app->keys[1], 0, sizeof(app->keys[1]));
    af5a:	2100      	movs	r1, #0
    af5c:	2211      	movs	r2, #17
    af5e:	4630      	mov	r0, r6
    af60:	f00e fe4b 	bl	19bfa <memset>
	app->updated = false;
    af64:	2300      	movs	r3, #0
		update_app_key_settings(app->app_idx, true);
    af66:	8860      	ldrh	r0, [r4, #2]
	app->updated = false;
    af68:	7123      	strb	r3, [r4, #4]
		update_app_key_settings(app->app_idx, true);
    af6a:	2101      	movs	r1, #1
    af6c:	f7ff ff82 	bl	ae74 <update_app_key_settings>
			app_key_evt(app, BT_MESH_KEY_SWAPPED);
    af70:	4629      	mov	r1, r5
    af72:	4620      	mov	r0, r4
    af74:	f7ff feda 	bl	ad2c <app_key_evt>
    af78:	e7da      	b.n	af30 <subnet_evt+0x30>
		} else if (evt == BT_MESH_KEY_SWAPPED && app->updated) {
    af7a:	2d03      	cmp	r5, #3
    af7c:	d1d8      	bne.n	af30 <subnet_evt+0x30>
    af7e:	7923      	ldrb	r3, [r4, #4]
    af80:	2b00      	cmp	r3, #0
    af82:	d0d5      	beq.n	af30 <subnet_evt+0x30>
    af84:	e7f4      	b.n	af70 <subnet_evt+0x70>
    af86:	bf00      	nop
    af88:	200009cc 	.word	0x200009cc

0000af8c <app_key_set>:
	}
}

static int app_key_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
    af8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    af8e:	460c      	mov	r4, r1
    af90:	b08b      	sub	sp, #44	; 0x2c
    af92:	4616      	mov	r6, r2
    af94:	461f      	mov	r7, r3
	struct app_key_val key;
	uint16_t app_idx;
	int err;

	if (!name) {
    af96:	b970      	cbnz	r0, afb6 <app_key_set+0x2a>
    af98:	4b1d      	ldr	r3, [pc, #116]	; (b010 <app_key_set+0x84>)
    af9a:	491e      	ldr	r1, [pc, #120]	; (b014 <app_key_set+0x88>)
		BT_ERR("Insufficient number of arguments");
    af9c:	481e      	ldr	r0, [pc, #120]	; (b018 <app_key_set+0x8c>)
    af9e:	1ac9      	subs	r1, r1, r3
    afa0:	08c9      	lsrs	r1, r1, #3
    afa2:	0189      	lsls	r1, r1, #6
    afa4:	f041 0101 	orr.w	r1, r1, #1
    afa8:	f00d ff23 	bl	18df2 <log_0>
		return -ENOENT;
    afac:	f06f 0401 	mvn.w	r4, #1
	}

	BT_DBG("AppKeyIndex 0x%03x recovered from storage", app_idx);

	return 0;
}
    afb0:	4620      	mov	r0, r4
    afb2:	b00b      	add	sp, #44	; 0x2c
    afb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	app_idx = strtol(name, NULL, 16);
    afb6:	2210      	movs	r2, #16
    afb8:	2100      	movs	r1, #0
    afba:	f00e fd25 	bl	19a08 <strtol>
    afbe:	4605      	mov	r5, r0
	if (!len_rd) {
    afc0:	2c00      	cmp	r4, #0
    afc2:	d0f5      	beq.n	afb0 <app_key_set+0x24>
	err = bt_mesh_settings_set(read_cb, cb_arg, &key, sizeof(key));
    afc4:	2323      	movs	r3, #35	; 0x23
    afc6:	aa01      	add	r2, sp, #4
    afc8:	4639      	mov	r1, r7
    afca:	4630      	mov	r0, r6
    afcc:	f001 fff0 	bl	cfb0 <bt_mesh_settings_set>
	if (err < 0) {
    afd0:	2800      	cmp	r0, #0
    afd2:	db19      	blt.n	b008 <app_key_set+0x7c>
	err = bt_mesh_app_key_set(app_idx, key.net_idx, key.val[0],
    afd4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    afd8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    afdc:	b10b      	cbz	r3, afe2 <app_key_set+0x56>
    afde:	f10d 0317 	add.w	r3, sp, #23
    afe2:	f10d 0207 	add.w	r2, sp, #7
    afe6:	b2a8      	uxth	r0, r5
    afe8:	f010 fb1b 	bl	1b622 <bt_mesh_app_key_set>
	if (err) {
    afec:	4604      	mov	r4, r0
    afee:	2800      	cmp	r0, #0
    aff0:	d0de      	beq.n	afb0 <app_key_set+0x24>
    aff2:	4b07      	ldr	r3, [pc, #28]	; (b010 <app_key_set+0x84>)
    aff4:	4907      	ldr	r1, [pc, #28]	; (b014 <app_key_set+0x88>)
		BT_ERR("Failed to set \'app-key\'");
    aff6:	4809      	ldr	r0, [pc, #36]	; (b01c <app_key_set+0x90>)
    aff8:	1ac9      	subs	r1, r1, r3
    affa:	08c9      	lsrs	r1, r1, #3
    affc:	0189      	lsls	r1, r1, #6
    affe:	f041 0101 	orr.w	r1, r1, #1
    b002:	f00d fef6 	bl	18df2 <log_0>
		return err;
    b006:	e7d3      	b.n	afb0 <app_key_set+0x24>
		return -EINVAL;
    b008:	f06f 0415 	mvn.w	r4, #21
    b00c:	e7d0      	b.n	afb0 <app_key_set+0x24>
    b00e:	bf00      	nop
    b010:	0001e408 	.word	0x0001e408
    b014:	0001e530 	.word	0x0001e530
    b018:	0001f368 	.word	0x0001f368
    b01c:	00020b00 	.word	0x00020b00

0000b020 <bt_mesh_app_key_exists>:
		if (apps[i].app_idx == app_idx) {
    b020:	4b05      	ldr	r3, [pc, #20]	; (b038 <bt_mesh_app_key_exists+0x18>)
    b022:	885a      	ldrh	r2, [r3, #2]
    b024:	4282      	cmp	r2, r0
    b026:	d004      	beq.n	b032 <bt_mesh_app_key_exists+0x12>
    b028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    b02a:	1a1b      	subs	r3, r3, r0
    b02c:	4258      	negs	r0, r3
    b02e:	4158      	adcs	r0, r3
    b030:	4770      	bx	lr
			return true;
    b032:	2001      	movs	r0, #1
}
    b034:	4770      	bx	lr
    b036:	bf00      	nop
    b038:	200009cc 	.word	0x200009cc

0000b03c <bt_mesh_app_key_find>:
{
    b03c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b040:	f8dd 8018 	ldr.w	r8, [sp, #24]
    b044:	460f      	mov	r7, r1
    b046:	4615      	mov	r5, r2
    b048:	461e      	mov	r6, r3
	if (dev_key) {
    b04a:	b180      	cbz	r0, b06e <bt_mesh_app_key_find+0x32>
		if (BT_MESH_ADDR_IS_UNICAST(rx->ctx.recv_dst)) {
    b04c:	f9b2 300a 	ldrsh.w	r3, [r2, #10]
    b050:	2b00      	cmp	r3, #0
    b052:	dc03      	bgt.n	b05c <bt_mesh_app_key_find+0x20>
		return BT_MESH_KEY_UNUSED;
    b054:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
    b058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = cb(rx, bt_mesh.dev_key, cb_data);
    b05c:	4926      	ldr	r1, [pc, #152]	; (b0f8 <bt_mesh_app_key_find+0xbc>)
    b05e:	4642      	mov	r2, r8
    b060:	4628      	mov	r0, r5
    b062:	47b0      	blx	r6
			if (!err) {
    b064:	2800      	cmp	r0, #0
    b066:	d1f5      	bne.n	b054 <bt_mesh_app_key_find+0x18>
				return BT_MESH_KEY_DEV_LOCAL;
    b068:	f64f 70fe 	movw	r0, #65534	; 0xfffe
    b06c:	e7f4      	b.n	b058 <bt_mesh_app_key_find+0x1c>
		if (app->app_idx == BT_MESH_KEY_UNUSED) {
    b06e:	4c23      	ldr	r4, [pc, #140]	; (b0fc <bt_mesh_app_key_find+0xc0>)
    b070:	8862      	ldrh	r2, [r4, #2]
    b072:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b076:	429a      	cmp	r2, r3
    b078:	d010      	beq.n	b09c <bt_mesh_app_key_find+0x60>
		if (app->net_idx != rx->sub->net_idx) {
    b07a:	682b      	ldr	r3, [r5, #0]
    b07c:	8b9a      	ldrh	r2, [r3, #28]
    b07e:	8823      	ldrh	r3, [r4, #0]
    b080:	429a      	cmp	r2, r3
    b082:	d10b      	bne.n	b09c <bt_mesh_app_key_find+0x60>
		if (rx->new_key && app->updated) {
    b084:	7d2b      	ldrb	r3, [r5, #20]
    b086:	079a      	lsls	r2, r3, #30
    b088:	d42c      	bmi.n	b0e4 <bt_mesh_app_key_find+0xa8>
			cred = &app->keys[0];
    b08a:	1d61      	adds	r1, r4, #5
		if (cred->id != aid) {
    b08c:	780b      	ldrb	r3, [r1, #0]
    b08e:	42bb      	cmp	r3, r7
    b090:	d104      	bne.n	b09c <bt_mesh_app_key_find+0x60>
		err = cb(rx, cred->val, cb_data);
    b092:	4642      	mov	r2, r8
    b094:	3101      	adds	r1, #1
    b096:	4628      	mov	r0, r5
    b098:	47b0      	blx	r6
		if (err) {
    b09a:	b1f0      	cbz	r0, b0da <bt_mesh_app_key_find+0x9e>
		if (app->app_idx == BT_MESH_KEY_UNUSED) {
    b09c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    b09e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b0a2:	429a      	cmp	r2, r3
    b0a4:	d0d6      	beq.n	b054 <bt_mesh_app_key_find+0x18>
		if (app->net_idx != rx->sub->net_idx) {
    b0a6:	682b      	ldr	r3, [r5, #0]
    b0a8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    b0aa:	8b9b      	ldrh	r3, [r3, #28]
    b0ac:	429a      	cmp	r2, r3
    b0ae:	d1d1      	bne.n	b054 <bt_mesh_app_key_find+0x18>
		if (rx->new_key && app->updated) {
    b0b0:	7d2b      	ldrb	r3, [r5, #20]
    b0b2:	079b      	lsls	r3, r3, #30
    b0b4:	d51e      	bpl.n	b0f4 <bt_mesh_app_key_find+0xb8>
			cred = &app->keys[0];
    b0b6:	4812      	ldr	r0, [pc, #72]	; (b100 <bt_mesh_app_key_find+0xc4>)
		if (rx->new_key && app->updated) {
    b0b8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
			cred = &app->keys[0];
    b0bc:	f1a0 0111 	sub.w	r1, r0, #17
    b0c0:	2b00      	cmp	r3, #0
    b0c2:	bf18      	it	ne
    b0c4:	4601      	movne	r1, r0
		if (cred->id != aid) {
    b0c6:	780b      	ldrb	r3, [r1, #0]
    b0c8:	42bb      	cmp	r3, r7
    b0ca:	d1c3      	bne.n	b054 <bt_mesh_app_key_find+0x18>
		err = cb(rx, cred->val, cb_data);
    b0cc:	4642      	mov	r2, r8
    b0ce:	3101      	adds	r1, #1
    b0d0:	4628      	mov	r0, r5
    b0d2:	47b0      	blx	r6
		if (err) {
    b0d4:	2800      	cmp	r0, #0
    b0d6:	d1bd      	bne.n	b054 <bt_mesh_app_key_find+0x18>
	for (i = 0; i < ARRAY_SIZE(apps); i++) {
    b0d8:	2001      	movs	r0, #1
		return app->app_idx;
    b0da:	2328      	movs	r3, #40	; 0x28
    b0dc:	fb03 4000 	mla	r0, r3, r0, r4
    b0e0:	8840      	ldrh	r0, [r0, #2]
    b0e2:	e7b9      	b.n	b058 <bt_mesh_app_key_find+0x1c>
		if (rx->new_key && app->updated) {
    b0e4:	7922      	ldrb	r2, [r4, #4]
			cred = &app->keys[0];
    b0e6:	f104 0116 	add.w	r1, r4, #22
    b0ea:	1d63      	adds	r3, r4, #5
    b0ec:	2a00      	cmp	r2, #0
    b0ee:	bf08      	it	eq
    b0f0:	4619      	moveq	r1, r3
    b0f2:	e7cb      	b.n	b08c <bt_mesh_app_key_find+0x50>
    b0f4:	4903      	ldr	r1, [pc, #12]	; (b104 <bt_mesh_app_key_find+0xc8>)
    b0f6:	e7e6      	b.n	b0c6 <bt_mesh_app_key_find+0x8a>
    b0f8:	20001228 	.word	0x20001228
    b0fc:	200009cc 	.word	0x200009cc
    b100:	20000a0a 	.word	0x20000a0a
    b104:	200009f9 	.word	0x200009f9

0000b108 <va_set>:
	return &virtual_addrs[index];
}

static int va_set(const char *name, size_t len_rd,
		  settings_read_cb read_cb, void *cb_arg)
{
    b108:	b5f0      	push	{r4, r5, r6, r7, lr}
    b10a:	460c      	mov	r4, r1
    b10c:	b087      	sub	sp, #28
    b10e:	4616      	mov	r6, r2
    b110:	461f      	mov	r7, r3
	struct va_val va;
	struct virtual_addr *lab;
	uint16_t index;
	int err;

	if (!name) {
    b112:	b970      	cbnz	r0, b132 <va_set+0x2a>
    b114:	4b30      	ldr	r3, [pc, #192]	; (b1d8 <va_set+0xd0>)
    b116:	4931      	ldr	r1, [pc, #196]	; (b1dc <va_set+0xd4>)
		BT_ERR("Insufficient number of arguments");
    b118:	4831      	ldr	r0, [pc, #196]	; (b1e0 <va_set+0xd8>)
    b11a:	1ac9      	subs	r1, r1, r3
    b11c:	08c9      	lsrs	r1, r1, #3
    b11e:	0189      	lsls	r1, r1, #6
    b120:	f041 0101 	orr.w	r1, r1, #1
    b124:	f00d fe65 	bl	18df2 <log_0>
		return -ENOENT;
    b128:	f06f 0401 	mvn.w	r4, #1

	BT_DBG("Restored Virtual Address, addr 0x%04x ref 0x%04x",
	       lab->addr, lab->ref);

	return 0;
}
    b12c:	4620      	mov	r0, r4
    b12e:	b007      	add	sp, #28
    b130:	bdf0      	pop	{r4, r5, r6, r7, pc}
	index = strtol(name, NULL, 16);
    b132:	2210      	movs	r2, #16
    b134:	2100      	movs	r1, #0
    b136:	f00e fc67 	bl	19a08 <strtol>
    b13a:	4605      	mov	r5, r0
	if (len_rd == 0) {
    b13c:	b954      	cbnz	r4, b154 <va_set+0x4c>
    b13e:	4926      	ldr	r1, [pc, #152]	; (b1d8 <va_set+0xd0>)
    b140:	4b26      	ldr	r3, [pc, #152]	; (b1dc <va_set+0xd4>)
		BT_WARN("Mesh Virtual Address length = 0");
    b142:	4828      	ldr	r0, [pc, #160]	; (b1e4 <va_set+0xdc>)
    b144:	1a5b      	subs	r3, r3, r1
    b146:	08db      	lsrs	r3, r3, #3
    b148:	019b      	lsls	r3, r3, #6
    b14a:	f043 0102 	orr.w	r1, r3, #2
		BT_WARN("Ignore Mesh Virtual Address ref = 0");
    b14e:	f00d fe50 	bl	18df2 <log_0>
		return 0;
    b152:	e7eb      	b.n	b12c <va_set+0x24>
	err = bt_mesh_settings_set(read_cb, cb_arg, &va, sizeof(va));
    b154:	2314      	movs	r3, #20
    b156:	aa01      	add	r2, sp, #4
    b158:	4639      	mov	r1, r7
    b15a:	4630      	mov	r0, r6
    b15c:	f001 ff28 	bl	cfb0 <bt_mesh_settings_set>
	if (err) {
    b160:	4604      	mov	r4, r0
    b162:	b140      	cbz	r0, b176 <va_set+0x6e>
    b164:	491d      	ldr	r1, [pc, #116]	; (b1dc <va_set+0xd4>)
    b166:	4b1c      	ldr	r3, [pc, #112]	; (b1d8 <va_set+0xd0>)
		BT_ERR("Failed to set \'virtual address\'");
    b168:	481f      	ldr	r0, [pc, #124]	; (b1e8 <va_set+0xe0>)
    b16a:	1ac9      	subs	r1, r1, r3
    b16c:	08c9      	lsrs	r1, r1, #3
    b16e:	0189      	lsls	r1, r1, #6
    b170:	f041 0101 	orr.w	r1, r1, #1
    b174:	e7eb      	b.n	b14e <va_set+0x46>
	if (va.ref == 0) {
    b176:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    b17a:	b943      	cbnz	r3, b18e <va_set+0x86>
    b17c:	4917      	ldr	r1, [pc, #92]	; (b1dc <va_set+0xd4>)
    b17e:	4b16      	ldr	r3, [pc, #88]	; (b1d8 <va_set+0xd0>)
		BT_WARN("Ignore Mesh Virtual Address ref = 0");
    b180:	481a      	ldr	r0, [pc, #104]	; (b1ec <va_set+0xe4>)
    b182:	1ac9      	subs	r1, r1, r3
    b184:	08c9      	lsrs	r1, r1, #3
    b186:	0189      	lsls	r1, r1, #6
    b188:	f041 0102 	orr.w	r1, r1, #2
    b18c:	e7df      	b.n	b14e <va_set+0x46>
	if (index >= ARRAY_SIZE(virtual_addrs)) {
    b18e:	b2ab      	uxth	r3, r5
    b190:	2b02      	cmp	r3, #2
    b192:	d813      	bhi.n	b1bc <va_set+0xb4>
	memcpy(lab->uuid, va.uuid, 16);
    b194:	2514      	movs	r5, #20
    b196:	435d      	muls	r5, r3
    b198:	4e15      	ldr	r6, [pc, #84]	; (b1f0 <va_set+0xe8>)
    b19a:	1d28      	adds	r0, r5, #4
    b19c:	2210      	movs	r2, #16
    b19e:	a902      	add	r1, sp, #8
    b1a0:	4430      	add	r0, r6
    b1a2:	f00e fcff 	bl	19ba4 <memcpy>
	lab->addr = va.addr;
    b1a6:	1973      	adds	r3, r6, r5
    b1a8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    b1ac:	805a      	strh	r2, [r3, #2]
	lab->ref = va.ref;
    b1ae:	5b73      	ldrh	r3, [r6, r5]
    b1b0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    b1b4:	f362 030e 	bfi	r3, r2, #0, #15
    b1b8:	5373      	strh	r3, [r6, r5]
	return 0;
    b1ba:	e7b7      	b.n	b12c <va_set+0x24>
    b1bc:	4b06      	ldr	r3, [pc, #24]	; (b1d8 <va_set+0xd0>)
    b1be:	4907      	ldr	r1, [pc, #28]	; (b1dc <va_set+0xd4>)
		BT_WARN("Out of labels buffers");
    b1c0:	480c      	ldr	r0, [pc, #48]	; (b1f4 <va_set+0xec>)
    b1c2:	1ac9      	subs	r1, r1, r3
    b1c4:	08c9      	lsrs	r1, r1, #3
    b1c6:	0189      	lsls	r1, r1, #6
    b1c8:	f041 0102 	orr.w	r1, r1, #2
    b1cc:	f00d fe11 	bl	18df2 <log_0>
		return -ENOBUFS;
    b1d0:	f06f 0468 	mvn.w	r4, #104	; 0x68
    b1d4:	e7aa      	b.n	b12c <va_set+0x24>
    b1d6:	bf00      	nop
    b1d8:	0001e408 	.word	0x0001e408
    b1dc:	0001e5d0 	.word	0x0001e5d0
    b1e0:	0001f368 	.word	0x0001f368
    b1e4:	00020b38 	.word	0x00020b38
    b1e8:	00020b58 	.word	0x00020b58
    b1ec:	00020b78 	.word	0x00020b78
    b1f0:	20002e5a 	.word	0x20002e5a
    b1f4:	00020b9c 	.word	0x00020b9c

0000b1f8 <seg_rx_reset>:
{
    b1f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b1fc:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable(&rx->ack);
    b1fe:	3030      	adds	r0, #48	; 0x30
{
    b200:	460f      	mov	r7, r1
	(void)k_work_cancel_delayable(&rx->ack);
    b202:	f012 fcec 	bl	1dbde <k_work_cancel_delayable>
	for (i = 0; i <= rx->seg_n; i++) {
    b206:	2600      	movs	r6, #0
		k_mem_slab_free(&segs, &rx->seg[i]);
    b208:	f8df 803c 	ldr.w	r8, [pc, #60]	; b248 <seg_rx_reset+0x50>
    b20c:	1d25      	adds	r5, r4, #4
		rx->seg[i] = NULL;
    b20e:	46b1      	mov	r9, r6
		if (!rx->seg[i]) {
    b210:	682b      	ldr	r3, [r5, #0]
    b212:	4629      	mov	r1, r5
    b214:	3504      	adds	r5, #4
    b216:	b123      	cbz	r3, b222 <seg_rx_reset+0x2a>
		k_mem_slab_free(&segs, &rx->seg[i]);
    b218:	4640      	mov	r0, r8
    b21a:	f012 faf9 	bl	1d810 <k_mem_slab_free>
		rx->seg[i] = NULL;
    b21e:	f845 9c04 	str.w	r9, [r5, #-4]
	for (i = 0; i <= rx->seg_n; i++) {
    b222:	7fe3      	ldrb	r3, [r4, #31]
    b224:	3601      	adds	r6, #1
    b226:	f003 021f 	and.w	r2, r3, #31
    b22a:	4296      	cmp	r6, r2
    b22c:	ddf0      	ble.n	b210 <seg_rx_reset+0x18>
	rx->in_use = 0U;
    b22e:	f36f 1386 	bfc	r3, #6, #1
    b232:	77e3      	strb	r3, [r4, #31]
	if (full_reset) {
    b234:	b137      	cbz	r7, b244 <seg_rx_reset+0x4c>
		rx->seq_auth = 0U;
    b236:	2000      	movs	r0, #0
    b238:	2100      	movs	r1, #0
    b23a:	e9c4 0104 	strd	r0, r1, [r4, #16]
		rx->sub = NULL;
    b23e:	2300      	movs	r3, #0
    b240:	6023      	str	r3, [r4, #0]
		rx->src = BT_MESH_ADDR_UNASSIGNED;
    b242:	61a3      	str	r3, [r4, #24]
}
    b244:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b248:	20000b48 	.word	0x20000b48

0000b24c <seg_tx_reset>:
{
    b24c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b250:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable(&tx->retransmit);
    b252:	3040      	adds	r0, #64	; 0x40
    b254:	f012 fcc3 	bl	1dbde <k_work_cancel_delayable>
	tx->cb = NULL;
    b258:	2500      	movs	r5, #0
	tx->blocked = false;
    b25a:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
    b25e:	4f20      	ldr	r7, [pc, #128]	; (b2e0 <seg_tx_reset+0x94>)
	tx->sub = NULL;
    b260:	6025      	str	r5, [r4, #0]
	tx->seq_auth = 0U;
    b262:	2000      	movs	r0, #0
    b264:	2100      	movs	r1, #0
	tx->cb_data = NULL;
    b266:	e9c4 550e 	strd	r5, r5, [r4, #56]	; 0x38
	tx->seq_auth = 0U;
    b26a:	e9c4 0108 	strd	r0, r1, [r4, #32]
	tx->blocked = false;
    b26e:	f365 0200 	bfi	r2, r5, #0, #1
	tx->src = BT_MESH_ADDR_UNASSIGNED;
    b272:	62a5      	str	r5, [r4, #40]	; 0x28
	tx->blocked = false;
    b274:	f884 2036 	strb.w	r2, [r4, #54]	; 0x36
	for (i = 0; i <= tx->seg_n && tx->nack_count; i++) {
    b278:	1d26      	adds	r6, r4, #4
	tx->seg[seg_idx] = NULL;
    b27a:	46a8      	mov	r8, r5
	for (i = 0; i <= tx->seg_n && tx->nack_count; i++) {
    b27c:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    b280:	b19b      	cbz	r3, b2aa <seg_tx_reset+0x5e>
		if (!tx->seg[i]) {
    b282:	6833      	ldr	r3, [r6, #0]
    b284:	b153      	cbz	r3, b29c <seg_tx_reset+0x50>
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
    b286:	4631      	mov	r1, r6
    b288:	4638      	mov	r0, r7
    b28a:	f012 fac1 	bl	1d810 <k_mem_slab_free>
	tx->seg[seg_idx] = NULL;
    b28e:	f8c6 8000 	str.w	r8, [r6]
	tx->nack_count--;
    b292:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    b296:	3b01      	subs	r3, #1
    b298:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	for (i = 0; i <= tx->seg_n && tx->nack_count; i++) {
    b29c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    b2a0:	3501      	adds	r5, #1
    b2a2:	42ab      	cmp	r3, r5
    b2a4:	f106 0604 	add.w	r6, r6, #4
    b2a8:	dae8      	bge.n	b27c <seg_tx_reset+0x30>
	tx->nack_count = 0;
    b2aa:	2100      	movs	r1, #0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b2ac:	4b0d      	ldr	r3, [pc, #52]	; (b2e4 <seg_tx_reset+0x98>)
    b2ae:	f884 1032 	strb.w	r1, [r4, #50]	; 0x32
    b2b2:	f3bf 8f5b 	dmb	ish
    b2b6:	e853 2f00 	ldrex	r2, [r3]
    b2ba:	f022 0020 	bic.w	r0, r2, #32
    b2be:	e843 0400 	strex	r4, r0, [r3]
    b2c2:	2c00      	cmp	r4, #0
    b2c4:	d1f7      	bne.n	b2b6 <seg_tx_reset+0x6a>
    b2c6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_IVU_PENDING)) {
    b2ca:	0692      	lsls	r2, r2, #26
    b2cc:	d505      	bpl.n	b2da <seg_tx_reset+0x8e>
}
    b2ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
    b2d2:	f853 0c08 	ldr.w	r0, [r3, #-8]
    b2d6:	f7fe bea5 	b.w	a024 <bt_mesh_net_iv_update>
}
    b2da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b2de:	bf00      	nop
    b2e0:	20000b48 	.word	0x20000b48
    b2e4:	200011d8 	.word	0x200011d8

0000b2e8 <seg_tx_complete>:
{
    b2e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b2ec:	4604      	mov	r4, r0
	void *cb_data = tx->cb_data;
    b2ee:	e9d0 670e 	ldrd	r6, r7, [r0, #56]	; 0x38
		if (&seg_tx[i] != tx &&
    b2f2:	4813      	ldr	r0, [pc, #76]	; (b340 <seg_tx_complete+0x58>)
    b2f4:	4284      	cmp	r4, r0
{
    b2f6:	460d      	mov	r5, r1
		if (&seg_tx[i] != tx &&
    b2f8:	d014      	beq.n	b324 <seg_tx_complete+0x3c>
		    seg_tx[i].blocked &&
    b2fa:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
		if (&seg_tx[i] != tx &&
    b2fe:	07da      	lsls	r2, r3, #31
    b300:	d510      	bpl.n	b324 <seg_tx_complete+0x3c>
	return (tx->src == src) && (tx->dst == dst);
    b302:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    b304:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    b306:	4291      	cmp	r1, r2
    b308:	d10c      	bne.n	b324 <seg_tx_complete+0x3c>
    b30a:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
    b30c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    b30e:	4291      	cmp	r1, r2
    b310:	d108      	bne.n	b324 <seg_tx_complete+0x3c>
		blocked->blocked = false;
    b312:	f36f 0300 	bfc	r3, #0, #1
    b316:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
		k_work_reschedule(&blocked->retransmit, K_NO_WAIT);
    b31a:	2200      	movs	r2, #0
    b31c:	2300      	movs	r3, #0
    b31e:	3040      	adds	r0, #64	; 0x40
    b320:	f00c fa68 	bl	177f4 <k_work_reschedule>
	seg_tx_reset(tx);
    b324:	4620      	mov	r0, r4
    b326:	f7ff ff91 	bl	b24c <seg_tx_reset>
	if (cb && cb->end) {
    b32a:	b136      	cbz	r6, b33a <seg_tx_complete+0x52>
    b32c:	6873      	ldr	r3, [r6, #4]
    b32e:	b123      	cbz	r3, b33a <seg_tx_complete+0x52>
		cb->end(err, cb_data);
    b330:	4639      	mov	r1, r7
    b332:	4628      	mov	r0, r5
}
    b334:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb->end(err, cb_data);
    b338:	4718      	bx	r3
}
    b33a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b33e:	bf00      	nop
    b340:	20001298 	.word	0x20001298

0000b344 <seg_tx_send_unacked>:
{
    b344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!tx->nack_count) {
    b348:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
{
    b34c:	b086      	sub	sp, #24
    b34e:	4604      	mov	r4, r0
	if (!tx->nack_count) {
    b350:	2b00      	cmp	r3, #0
    b352:	d03d      	beq.n	b3d0 <seg_tx_send_unacked+0x8c>
		.net_idx = tx->sub->net_idx,
    b354:	6801      	ldr	r1, [r0, #0]
	struct bt_mesh_net_tx net_tx = {
    b356:	9103      	str	r1, [sp, #12]
	struct bt_mesh_msg_ctx ctx = {
    b358:	2300      	movs	r3, #0
    b35a:	2501      	movs	r5, #1
    b35c:	f8cd 3006 	str.w	r3, [sp, #6]
    b360:	8b8b      	ldrh	r3, [r1, #28]
    b362:	f8ad 3000 	strh.w	r3, [sp]
	struct bt_mesh_net_tx net_tx = {
    b366:	8d01      	ldrh	r1, [r0, #40]	; 0x28
	struct bt_mesh_msg_ctx ctx = {
    b368:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
    b36c:	f88d 500a 	strb.w	r5, [sp, #10]
    b370:	f890 5034 	ldrb.w	r5, [r0, #52]	; 0x34
    b374:	f88d 500b 	strb.w	r5, [sp, #11]
	struct bt_mesh_net_tx net_tx = {
    b378:	f8ad 1014 	strh.w	r1, [sp, #20]
    b37c:	f890 502e 	ldrb.w	r5, [r0, #46]	; 0x2e
    b380:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    b384:	f88d 1016 	strb.w	r1, [sp, #22]
		.friend_cred = tx->friend_cred,
    b388:	f3c3 1140 	ubfx	r1, r3, #5, #1
	struct bt_mesh_net_tx net_tx = {
    b38c:	ea41 0185 	orr.w	r1, r1, r5, lsl #2
	struct bt_mesh_msg_ctx ctx = {
    b390:	f343 0240 	sbfx	r2, r3, #1, #1
	struct bt_mesh_net_tx net_tx = {
    b394:	f88d 1017 	strb.w	r1, [sp, #23]
	if (!tx->attempts) {
    b398:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
	struct bt_mesh_msg_ctx ctx = {
    b39c:	f8ad 2002 	strh.w	r2, [sp, #2]
		.addr = tx->dst,
    b3a0:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
	struct bt_mesh_msg_ctx ctx = {
    b3a2:	f8ad 2004 	strh.w	r2, [sp, #4]
	struct bt_mesh_net_tx net_tx = {
    b3a6:	f8cd d010 	str.w	sp, [sp, #16]
	if (!tx->attempts) {
    b3aa:	b9a1      	cbnz	r1, b3d6 <seg_tx_send_unacked+0x92>
		if (BT_MESH_ADDR_IS_UNICAST(tx->dst)) {
    b3ac:	b212      	sxth	r2, r2
    b3ae:	2a00      	cmp	r2, #0
    b3b0:	dd0c      	ble.n	b3cc <seg_tx_send_unacked+0x88>
    b3b2:	4b60      	ldr	r3, [pc, #384]	; (b534 <seg_tx_send_unacked+0x1f0>)
    b3b4:	4960      	ldr	r1, [pc, #384]	; (b538 <seg_tx_send_unacked+0x1f4>)
			BT_ERR("Ran out of retransmit attempts");
    b3b6:	4861      	ldr	r0, [pc, #388]	; (b53c <seg_tx_send_unacked+0x1f8>)
    b3b8:	1ac9      	subs	r1, r1, r3
    b3ba:	08c9      	lsrs	r1, r1, #3
    b3bc:	0189      	lsls	r1, r1, #6
    b3be:	f041 0101 	orr.w	r1, r1, #1
    b3c2:	f00d fd16 	bl	18df2 <log_0>
			seg_tx_complete(tx, -ETIMEDOUT);
    b3c6:	f06f 0173 	mvn.w	r1, #115	; 0x73
    b3ca:	4620      	mov	r0, r4
			seg_tx_complete(tx, 0);
    b3cc:	f7ff ff8c 	bl	b2e8 <seg_tx_complete>
}
    b3d0:	b006      	add	sp, #24
    b3d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	tx->sending = 1U;
    b3d6:	f043 0310 	orr.w	r3, r3, #16
		err = bt_mesh_net_send(&net_tx, seg, &seg_sent_cb, tx);
    b3da:	f8df 8164 	ldr.w	r8, [pc, #356]	; b540 <seg_tx_send_unacked+0x1fc>
	tx->sending = 1U;
    b3de:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
	for (; tx->seg_o <= tx->seg_n; tx->seg_o++) {
    b3e2:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    b3e6:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
    b3ea:	429a      	cmp	r2, r3
    b3ec:	d208      	bcs.n	b400 <seg_tx_send_unacked+0xbc>
	tx->seg_o = 0U;
    b3ee:	2300      	movs	r3, #0
    b3f0:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	tx->attempts--;
    b3f4:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    b3f8:	3b01      	subs	r3, #1
    b3fa:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    b3fe:	e067      	b.n	b4d0 <seg_tx_send_unacked+0x18c>
		if (!tx->seg[tx->seg_o]) {
    b400:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    b404:	685b      	ldr	r3, [r3, #4]
    b406:	b92b      	cbnz	r3, b414 <seg_tx_send_unacked+0xd0>
	for (; tx->seg_o <= tx->seg_n; tx->seg_o++) {
    b408:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    b40c:	3301      	adds	r3, #1
    b40e:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    b412:	e7e6      	b.n	b3e2 <seg_tx_send_unacked+0x9e>
		seg = bt_mesh_adv_create(BT_MESH_ADV_DATA, tx->xmit,
    b414:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    b418:	2200      	movs	r2, #0
    b41a:	2300      	movs	r3, #0
    b41c:	2001      	movs	r0, #1
    b41e:	f7fe fa9f 	bl	9960 <bt_mesh_adv_create>
		if (!seg) {
    b422:	4607      	mov	r7, r0
    b424:	2800      	cmp	r0, #0
    b426:	d053      	beq.n	b4d0 <seg_tx_send_unacked+0x18c>
	net_buf_simple_reserve(&buf->b, reserve);
    b428:	f100 0508 	add.w	r5, r0, #8
    b42c:	2109      	movs	r1, #9
    b42e:	4628      	mov	r0, r5
    b430:	f011 fee5 	bl	1d1fe <net_buf_simple_reserve>
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
    b434:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
		seg_tx_buf_build(tx, tx->seg_o, &seg->b);
    b438:	f894 6031 	ldrb.w	r6, [r4, #49]	; 0x31
	uint16_t seq_zero = tx->seq_auth & TRANS_SEQ_ZERO_MASK;
    b43c:	f8b4 a020 	ldrh.w	sl, [r4, #32]
	net_buf_simple_add_u8(buf, tx->hdr);
    b440:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
		return BT_MESH_APP_SEG_SDU_MAX;
    b444:	f013 0f02 	tst.w	r3, #2
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
    b448:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
		return BT_MESH_APP_SEG_SDU_MAX;
    b44a:	bf14      	ite	ne
    b44c:	f04f 0908 	movne.w	r9, #8
    b450:	f04f 090c 	moveq.w	r9, #12
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
    b454:	fb09 3316 	mls	r3, r9, r6, r3
    b458:	4599      	cmp	r9, r3
	net_buf_simple_add_u8(buf, tx->hdr);
    b45a:	4628      	mov	r0, r5
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
    b45c:	bfa8      	it	ge
    b45e:	fa5f f983 	uxtbge.w	r9, r3
	net_buf_simple_add_u8(buf, tx->hdr);
    b462:	f011 ff3b 	bl	1d2dc <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, (tx->aszmic << 7) | seq_zero >> 6);
    b466:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
	uint16_t seq_zero = tx->seq_auth & TRANS_SEQ_ZERO_MASK;
    b46a:	f3ca 0a0c 	ubfx	sl, sl, #0, #13
	net_buf_simple_add_u8(buf, (tx->aszmic << 7) | seq_zero >> 6);
    b46e:	f3c3 0380 	ubfx	r3, r3, #2, #1
    b472:	ea4f 119a 	mov.w	r1, sl, lsr #6
    b476:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
    b47a:	4628      	mov	r0, r5
    b47c:	f011 ff2e 	bl	1d2dc <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, (((seq_zero & 0x3f) << 2) | (seg_o >> 3)));
    b480:	08f1      	lsrs	r1, r6, #3
    b482:	ea41 018a 	orr.w	r1, r1, sl, lsl #2
    b486:	b2c9      	uxtb	r1, r1
    b488:	4628      	mov	r0, r5
    b48a:	f011 ff27 	bl	1d2dc <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, ((seg_o & 0x07) << 5) | tx->seg_n);
    b48e:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    b492:	ea41 1146 	orr.w	r1, r1, r6, lsl #5
	net_buf_simple_add_mem(buf, tx->seg[seg_o], len);
    b496:	eb04 0686 	add.w	r6, r4, r6, lsl #2
	net_buf_simple_add_u8(buf, ((seg_o & 0x07) << 5) | tx->seg_n);
    b49a:	b2c9      	uxtb	r1, r1
    b49c:	4628      	mov	r0, r5
    b49e:	f011 ff1d 	bl	1d2dc <net_buf_simple_add_u8>
	net_buf_simple_add_mem(buf, tx->seg[seg_o], len);
    b4a2:	6871      	ldr	r1, [r6, #4]
    b4a4:	464a      	mov	r2, r9
    b4a6:	4628      	mov	r0, r5
    b4a8:	f011 ff0f 	bl	1d2ca <net_buf_simple_add_mem>
		tx->seg_pending++;
    b4ac:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    b4b0:	3301      	adds	r3, #1
    b4b2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
		err = bt_mesh_net_send(&net_tx, seg, &seg_sent_cb, tx);
    b4b6:	4642      	mov	r2, r8
    b4b8:	4623      	mov	r3, r4
    b4ba:	4639      	mov	r1, r7
    b4bc:	a803      	add	r0, sp, #12
    b4be:	f7fe ff1d 	bl	a2fc <bt_mesh_net_send>
		if (err) {
    b4c2:	2800      	cmp	r0, #0
    b4c4:	d0a0      	beq.n	b408 <seg_tx_send_unacked+0xc4>
			tx->seg_pending--;
    b4c6:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    b4ca:	3b01      	subs	r3, #1
    b4cc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	if (!tx->seg_pending) {
    b4d0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    b4d4:	bb33      	cbnz	r3, b524 <seg_tx_send_unacked+0x1e0>
				  K_MSEC(SEG_RETRANSMIT_TIMEOUT(tx)));
    b4d6:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
    b4da:	2b00      	cmp	r3, #0
    b4dc:	bfc1      	itttt	gt
    b4de:	f894 1034 	ldrbgt.w	r1, [r4, #52]	; 0x34
    b4e2:	2232      	movgt	r2, #50	; 0x32
    b4e4:	f44f 73c8 	movgt.w	r3, #400	; 0x190
    b4e8:	fb12 3201 	smlabbgt	r2, r2, r1, r3
    b4ec:	bfce      	itee	gt
    b4ee:	17d3      	asrgt	r3, r2, #31
    b4f0:	2232      	movle	r2, #50	; 0x32
    b4f2:	2300      	movle	r3, #0
		} else {
			return (t * to_hz + off) / from_hz;
    b4f4:	03d9      	lsls	r1, r3, #15
    b4f6:	03d0      	lsls	r0, r2, #15
    b4f8:	f240 36e7 	movw	r6, #999	; 0x3e7
    b4fc:	1980      	adds	r0, r0, r6
    b4fe:	ea41 4152 	orr.w	r1, r1, r2, lsr #17
    b502:	f04f 0600 	mov.w	r6, #0
    b506:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b50a:	f04f 0300 	mov.w	r3, #0
    b50e:	eb46 0101 	adc.w	r1, r6, r1
    b512:	f7f4 fde5 	bl	e0 <__aeabi_uldivmod>
		k_work_reschedule(&tx->retransmit,
    b516:	f104 0540 	add.w	r5, r4, #64	; 0x40
    b51a:	4602      	mov	r2, r0
    b51c:	460b      	mov	r3, r1
    b51e:	4628      	mov	r0, r5
    b520:	f00c f968 	bl	177f4 <k_work_reschedule>
	tx->sending = 0U;
    b524:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
    b528:	f36f 1304 	bfc	r3, #4, #1
    b52c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    b530:	e74e      	b.n	b3d0 <seg_tx_send_unacked+0x8c>
    b532:	bf00      	nop
    b534:	0001e408 	.word	0x0001e408
    b538:	0001e5d0 	.word	0x0001e5d0
    b53c:	00020bb2 	.word	0x00020bb2
    b540:	0001eb44 	.word	0x0001eb44

0000b544 <ctl_recv>:
{
    b544:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (ctl_op) {
    b548:	f011 077f 	ands.w	r7, r1, #127	; 0x7f
{
    b54c:	4680      	mov	r8, r0
    b54e:	4614      	mov	r4, r2
    b550:	461d      	mov	r5, r3
	switch (ctl_op) {
    b552:	d014      	beq.n	b57e <ctl_recv+0x3a>
    b554:	2f0a      	cmp	r7, #10
    b556:	f000 80b6 	beq.w	b6c6 <ctl_recv+0x182>
	if (!rx->local_match) {
    b55a:	7d05      	ldrb	r5, [r0, #20]
    b55c:	f015 0540 	ands.w	r5, r5, #64	; 0x40
    b560:	d01c      	beq.n	b59c <ctl_recv+0x58>
    b562:	4b60      	ldr	r3, [pc, #384]	; (b6e4 <ctl_recv+0x1a0>)
    b564:	4a60      	ldr	r2, [pc, #384]	; (b6e8 <ctl_recv+0x1a4>)
	BT_WARN("Unhandled TransOpCode 0x%02x", ctl_op);
    b566:	4861      	ldr	r0, [pc, #388]	; (b6ec <ctl_recv+0x1a8>)
    b568:	1ad2      	subs	r2, r2, r3
    b56a:	08d2      	lsrs	r2, r2, #3
    b56c:	0192      	lsls	r2, r2, #6
    b56e:	f042 0202 	orr.w	r2, r2, #2
    b572:	4639      	mov	r1, r7
    b574:	f00d fc4a 	bl	18e0c <log_1>
	return -ENOENT;
    b578:	f06f 0501 	mvn.w	r5, #1
    b57c:	e00e      	b.n	b59c <ctl_recv+0x58>
	if (buf->len < 6) {
    b57e:	8893      	ldrh	r3, [r2, #4]
    b580:	2b05      	cmp	r3, #5
    b582:	d80e      	bhi.n	b5a2 <ctl_recv+0x5e>
    b584:	4958      	ldr	r1, [pc, #352]	; (b6e8 <ctl_recv+0x1a4>)
    b586:	4b57      	ldr	r3, [pc, #348]	; (b6e4 <ctl_recv+0x1a0>)
		BT_ERR("Too short ack message");
    b588:	4859      	ldr	r0, [pc, #356]	; (b6f0 <ctl_recv+0x1ac>)
    b58a:	1ac9      	subs	r1, r1, r3
    b58c:	08c9      	lsrs	r1, r1, #3
    b58e:	0189      	lsls	r1, r1, #6
    b590:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Received ack for group seg");
    b594:	f00d fc2d 	bl	18df2 <log_0>
		return -EINVAL;
    b598:	f06f 0515 	mvn.w	r5, #21
}
    b59c:	4628      	mov	r0, r5
    b59e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	seq_zero = net_buf_simple_pull_be16(buf);
    b5a2:	4610      	mov	r0, r2
    b5a4:	f011 ff08 	bl	1d3b8 <net_buf_simple_pull_be16>
	seq_zero = (seq_zero >> 2) & TRANS_SEQ_ZERO_MASK;
    b5a8:	f3c0 0b8f 	ubfx	fp, r0, #2, #16
	obo = seq_zero >> 15;
    b5ac:	f3c0 3acf 	ubfx	sl, r0, #15, #16
	ack = net_buf_simple_pull_be32(buf);
    b5b0:	4620      	mov	r0, r4
    b5b2:	f011 ff0c 	bl	1d3ce <net_buf_simple_pull_be32>
		if ((tx->seq_auth & TRANS_SEQ_ZERO_MASK) != seq_zero) {
    b5b6:	4c4f      	ldr	r4, [pc, #316]	; (b6f4 <ctl_recv+0x1b0>)
	tx = seg_tx_lookup(seq_zero, obo, rx->ctx.addr);
    b5b8:	f8b8 c008 	ldrh.w	ip, [r8, #8]
	ack = net_buf_simple_pull_be32(buf);
    b5bc:	4606      	mov	r6, r0
		if ((tx->seq_auth & TRANS_SEQ_ZERO_MASK) != seq_zero) {
    b5be:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
	seq_zero = (seq_zero >> 2) & TRANS_SEQ_ZERO_MASK;
    b5c2:	f3cb 020c 	ubfx	r2, fp, #0, #13
		if ((tx->seq_auth & TRANS_SEQ_ZERO_MASK) != seq_zero) {
    b5c6:	2300      	movs	r3, #0
    b5c8:	f3c1 080c 	ubfx	r8, r1, #0, #13
    b5cc:	b292      	uxth	r2, r2
    b5ce:	429f      	cmp	r7, r3
    b5d0:	bf08      	it	eq
    b5d2:	4590      	cmpeq	r8, r2
    b5d4:	d17c      	bne.n	b6d0 <ctl_recv+0x18c>
		if (tx->dst == addr) {
    b5d6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    b5d8:	4563      	cmp	r3, ip
    b5da:	d00b      	beq.n	b5f4 <ctl_recv+0xb0>
		if (obo && tx->nack_count == tx->seg_n + 1) {
    b5dc:	f1ba 0f00 	cmp.w	sl, #0
    b5e0:	d076      	beq.n	b6d0 <ctl_recv+0x18c>
    b5e2:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    b5e6:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
    b5ea:	3301      	adds	r3, #1
    b5ec:	429a      	cmp	r2, r3
    b5ee:	d16f      	bne.n	b6d0 <ctl_recv+0x18c>
			tx->dst = addr;
    b5f0:	f8a4 c02a 	strh.w	ip, [r4, #42]	; 0x2a
	if (!BT_MESH_ADDR_IS_UNICAST(tx->dst)) {
    b5f4:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
    b5f8:	2b00      	cmp	r3, #0
    b5fa:	dc08      	bgt.n	b60e <ctl_recv+0xca>
    b5fc:	493a      	ldr	r1, [pc, #232]	; (b6e8 <ctl_recv+0x1a4>)
    b5fe:	4b39      	ldr	r3, [pc, #228]	; (b6e4 <ctl_recv+0x1a0>)
		BT_ERR("Received ack for group seg");
    b600:	483d      	ldr	r0, [pc, #244]	; (b6f8 <ctl_recv+0x1b4>)
    b602:	1ac9      	subs	r1, r1, r3
    b604:	08c9      	lsrs	r1, r1, #3
    b606:	0189      	lsls	r1, r1, #6
    b608:	f041 0101 	orr.w	r1, r1, #1
    b60c:	e7c2      	b.n	b594 <ctl_recv+0x50>
	*seq_auth = tx->seq_auth;
    b60e:	e9c5 1000 	strd	r1, r0, [r5]
	if (!ack) {
    b612:	b986      	cbnz	r6, b636 <ctl_recv+0xf2>
    b614:	4b33      	ldr	r3, [pc, #204]	; (b6e4 <ctl_recv+0x1a0>)
    b616:	4934      	ldr	r1, [pc, #208]	; (b6e8 <ctl_recv+0x1a4>)
		BT_WARN("SDU canceled");
    b618:	4838      	ldr	r0, [pc, #224]	; (b6fc <ctl_recv+0x1b8>)
    b61a:	1ac9      	subs	r1, r1, r3
    b61c:	08c9      	lsrs	r1, r1, #3
    b61e:	0189      	lsls	r1, r1, #6
    b620:	f041 0102 	orr.w	r1, r1, #2
    b624:	f00d fbe5 	bl	18df2 <log_0>
		seg_tx_complete(tx, -ECANCELED);
    b628:	4832      	ldr	r0, [pc, #200]	; (b6f4 <ctl_recv+0x1b0>)
    b62a:	f06f 018b 	mvn.w	r1, #139	; 0x8b
    b62e:	f7ff fe5b 	bl	b2e8 <seg_tx_complete>
		return 0;
    b632:	4635      	mov	r5, r6
    b634:	e7b2      	b.n	b59c <ctl_recv+0x58>
	if (find_msb_set(ack) - 1 > tx->seg_n) {
    b636:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
{
	if (op == 0) {
		return 0;
	}

	return 32 - __builtin_clz(op);
    b63a:	fab6 f386 	clz	r3, r6
    b63e:	f1c3 031f 	rsb	r3, r3, #31
    b642:	4293      	cmp	r3, r2
    b644:	d818      	bhi.n	b678 <ctl_recv+0x134>
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
    b646:	f8df a0c4 	ldr.w	sl, [pc, #196]	; b70c <ctl_recv+0x1c8>
	tx->seg[seg_idx] = NULL;
    b64a:	f04f 0800 	mov.w	r8, #0
		ack &= ~BIT(bit - 1);
    b64e:	f04f 0901 	mov.w	r9, #1
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
    b652:	2e00      	cmp	r6, #0
    b654:	fa96 f7a6 	rbit	r7, r6
    b658:	fab7 f787 	clz	r7, r7
    b65c:	bf08      	it	eq
    b65e:	f04f 37ff 	moveq.w	r7, #4294967295	; 0xffffffff
	while ((bit = find_lsb_set(ack))) {
    b662:	1c7d      	adds	r5, r7, #1
    b664:	d111      	bne.n	b68a <ctl_recv+0x146>
	if (tx->nack_count) {
    b666:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    b66a:	b33b      	cbz	r3, b6bc <ctl_recv+0x178>
		k_work_reschedule(&tx->retransmit, K_NO_WAIT);
    b66c:	2200      	movs	r2, #0
    b66e:	2300      	movs	r3, #0
    b670:	4823      	ldr	r0, [pc, #140]	; (b700 <ctl_recv+0x1bc>)
    b672:	f00c f8bf 	bl	177f4 <k_work_reschedule>
    b676:	e791      	b.n	b59c <ctl_recv+0x58>
    b678:	491b      	ldr	r1, [pc, #108]	; (b6e8 <ctl_recv+0x1a4>)
    b67a:	4b1a      	ldr	r3, [pc, #104]	; (b6e4 <ctl_recv+0x1a0>)
		BT_ERR("Too large segment number in ack");
    b67c:	4821      	ldr	r0, [pc, #132]	; (b704 <ctl_recv+0x1c0>)
    b67e:	1ac9      	subs	r1, r1, r3
    b680:	08c9      	lsrs	r1, r1, #3
    b682:	0189      	lsls	r1, r1, #6
    b684:	f041 0101 	orr.w	r1, r1, #1
    b688:	e784      	b.n	b594 <ctl_recv+0x50>
		if (tx->seg[bit - 1]) {
    b68a:	eb04 0387 	add.w	r3, r4, r7, lsl #2
    b68e:	685b      	ldr	r3, [r3, #4]
    b690:	b17b      	cbz	r3, b6b2 <ctl_recv+0x16e>
			seg_tx_done(tx, bit - 1);
    b692:	b2fd      	uxtb	r5, r7
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
    b694:	1c69      	adds	r1, r5, #1
    b696:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    b69a:	4650      	mov	r0, sl
    b69c:	f012 f8b8 	bl	1d810 <k_mem_slab_free>
	tx->nack_count--;
    b6a0:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	tx->seg[seg_idx] = NULL;
    b6a4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
	tx->nack_count--;
    b6a8:	3b01      	subs	r3, #1
	tx->seg[seg_idx] = NULL;
    b6aa:	f8c5 8004 	str.w	r8, [r5, #4]
	tx->nack_count--;
    b6ae:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
		ack &= ~BIT(bit - 1);
    b6b2:	fa09 f707 	lsl.w	r7, r9, r7
    b6b6:	ea26 0607 	bic.w	r6, r6, r7
    b6ba:	e7ca      	b.n	b652 <ctl_recv+0x10e>
		seg_tx_complete(tx, 0);
    b6bc:	480d      	ldr	r0, [pc, #52]	; (b6f4 <ctl_recv+0x1b0>)
    b6be:	4629      	mov	r1, r5
    b6c0:	f7ff fe12 	bl	b2e8 <seg_tx_complete>
    b6c4:	e76a      	b.n	b59c <ctl_recv+0x58>
}
    b6c6:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return bt_mesh_hb_recv(rx, buf);
    b6ca:	4611      	mov	r1, r2
    b6cc:	f000 bf06 	b.w	c4dc <bt_mesh_hb_recv>
    b6d0:	4905      	ldr	r1, [pc, #20]	; (b6e8 <ctl_recv+0x1a4>)
    b6d2:	4b04      	ldr	r3, [pc, #16]	; (b6e4 <ctl_recv+0x1a0>)
		BT_WARN("No matching TX context for ack");
    b6d4:	480c      	ldr	r0, [pc, #48]	; (b708 <ctl_recv+0x1c4>)
    b6d6:	1ac9      	subs	r1, r1, r3
    b6d8:	08c9      	lsrs	r1, r1, #3
    b6da:	0189      	lsls	r1, r1, #6
    b6dc:	f041 0102 	orr.w	r1, r1, #2
    b6e0:	e758      	b.n	b594 <ctl_recv+0x50>
    b6e2:	bf00      	nop
    b6e4:	0001e408 	.word	0x0001e408
    b6e8:	0001e5d0 	.word	0x0001e5d0
    b6ec:	00020c2f 	.word	0x00020c2f
    b6f0:	00020bd1 	.word	0x00020bd1
    b6f4:	20001298 	.word	0x20001298
    b6f8:	00020be7 	.word	0x00020be7
    b6fc:	00020c02 	.word	0x00020c02
    b700:	200012d8 	.word	0x200012d8
    b704:	00020c0f 	.word	0x00020c0f
    b708:	00020c4c 	.word	0x00020c4c
    b70c:	20000b48 	.word	0x20000b48

0000b710 <send_seg>:
{
    b710:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (seg_tx[i].nack_count) {
    b714:	4c5e      	ldr	r4, [pc, #376]	; (b890 <send_seg+0x180>)
{
    b716:	9d0c      	ldr	r5, [sp, #48]	; 0x30
		if (seg_tx[i].nack_count) {
    b718:	f894 e032 	ldrb.w	lr, [r4, #50]	; 0x32
    b71c:	f8b0 c008 	ldrh.w	ip, [r0, #8]
{
    b720:	460e      	mov	r6, r1
		if (seg_tx[i].nack_count) {
    b722:	6841      	ldr	r1, [r0, #4]
    b724:	888f      	ldrh	r7, [r1, #4]
    b726:	f1be 0f00 	cmp.w	lr, #0
    b72a:	d00e      	beq.n	b74a <send_seg+0x3a>
    b72c:	4b59      	ldr	r3, [pc, #356]	; (b894 <send_seg+0x184>)
    b72e:	495a      	ldr	r1, [pc, #360]	; (b898 <send_seg+0x188>)
		BT_ERR("No multi-segment message contexts available");
    b730:	485a      	ldr	r0, [pc, #360]	; (b89c <send_seg+0x18c>)
    b732:	1ac9      	subs	r1, r1, r3
    b734:	08c9      	lsrs	r1, r1, #3
    b736:	0189      	lsls	r1, r1, #6
    b738:	f041 0101 	orr.w	r1, r1, #1
    b73c:	f00d fb59 	bl	18df2 <log_0>
		return -EBUSY;
    b740:	f06f 000f 	mvn.w	r0, #15
}
    b744:	b003      	add	sp, #12
    b746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ctl_op) {
    b74a:	2d00      	cmp	r5, #0
    b74c:	d064      	beq.n	b818 <send_seg+0x108>
		tx->hdr = TRANS_CTL_HDR(*ctl_op, 1);
    b74e:	7829      	ldrb	r1, [r5, #0]
    b750:	f061 017f 	orn	r1, r1, #127	; 0x7f
		tx->hdr = SEG_HDR(1, net_tx->aid);
    b754:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
	tx->src = net_tx->src;
    b758:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
	tx->seg_n = (sdu->len - 1) / seg_len(!!ctl_op);
    b75c:	f8b6 c004 	ldrh.w	ip, [r6, #4]
	tx->dst = net_tx->ctx->addr;
    b760:	8567      	strh	r7, [r4, #42]	; 0x2a
		return BT_MESH_APP_SEG_SDU_MAX;
    b762:	2d00      	cmp	r5, #0
	tx->len = sdu->len;
    b764:	f8a4 c02c 	strh.w	ip, [r4, #44]	; 0x2c
	tx->seg_o = 0;
    b768:	f04f 0500 	mov.w	r5, #0
	tx->seg_n = (sdu->len - 1) / seg_len(!!ctl_op);
    b76c:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
		return BT_MESH_APP_SEG_SDU_MAX;
    b770:	bf18      	it	ne
    b772:	2708      	movne	r7, #8
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
    b774:	f8df c12c 	ldr.w	ip, [pc, #300]	; b8a4 <send_seg+0x194>
	tx->seg_o = 0;
    b778:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
		return BT_MESH_APP_SEG_SDU_MAX;
    b77c:	bf08      	it	eq
    b77e:	270c      	moveq	r7, #12
	tx->seg_n = (sdu->len - 1) / seg_len(!!ctl_op);
    b780:	fb91 f1f7 	sdiv	r1, r1, r7
    b784:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
	tx->nack_count = tx->seg_n + 1;
    b788:	f101 0101 	add.w	r1, r1, #1
    b78c:	f884 1032 	strb.w	r1, [r4, #50]	; 0x32
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
    b790:	f8dc 1000 	ldr.w	r1, [ip]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b794:	f3bf 8f5b 	dmb	ish
    b798:	f8dc e008 	ldr.w	lr, [ip, #8]
    b79c:	f3bf 8f5b 	dmb	ish
    b7a0:	f3ce 0e80 	ubfx	lr, lr, #2, #1
    b7a4:	f8dc c004 	ldr.w	ip, [ip, #4]
		err = k_mem_slab_alloc(&segs, &buf, BUF_TIMEOUT);
    b7a8:	f8df 90fc 	ldr.w	r9, [pc, #252]	; b8a8 <send_seg+0x198>
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
    b7ac:	eba1 010e 	sub.w	r1, r1, lr
    b7b0:	ea4f 2e11 	mov.w	lr, r1, lsr #8
    b7b4:	ea4c 6101 	orr.w	r1, ip, r1, lsl #24
    b7b8:	e9c4 1e08 	strd	r1, lr, [r4, #32]
	tx->sub = net_tx->sub;
    b7bc:	6801      	ldr	r1, [r0, #0]
    b7be:	6021      	str	r1, [r4, #0]
	tx->cb_data = cb_data;
    b7c0:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	tx->attempts = SEG_RETRANSMIT_ATTEMPTS;
    b7c4:	f04f 0304 	mov.w	r3, #4
    b7c8:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	tx->xmit = net_tx->xmit;
    b7cc:	7a83      	ldrb	r3, [r0, #10]
    b7ce:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	tx->aszmic = net_tx->aszmic;
    b7d2:	7ac2      	ldrb	r2, [r0, #11]
	tx->seg_pending = 0;
    b7d4:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
	tx->aszmic = net_tx->aszmic;
    b7d8:	f3c2 0140 	ubfx	r1, r2, #1, #1
	tx->blocked = blocked;
    b7dc:	bf14      	ite	ne
    b7de:	2302      	movne	r3, #2
    b7e0:	462b      	moveq	r3, r5
	tx->friend_cred = net_tx->friend_cred;
    b7e2:	f002 0201 	and.w	r2, r2, #1
	tx->blocked = blocked;
    b7e6:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
    b7ea:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
    b7ee:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
    b7f2:	f022 022f 	bic.w	r2, r2, #47	; 0x2f
    b7f6:	4313      	orrs	r3, r2
    b7f8:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	tx->ttl = net_tx->ctx->send_ttl;
    b7fc:	6843      	ldr	r3, [r0, #4]
    b7fe:	7adb      	ldrb	r3, [r3, #11]
    b800:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	for (seg_o = 0U; sdu->len; seg_o++) {
    b804:	f8b6 8004 	ldrh.w	r8, [r6, #4]
    b808:	f1b8 0f00 	cmp.w	r8, #0
    b80c:	d110      	bne.n	b830 <send_seg+0x120>
	seg_tx_send_unacked(tx);
    b80e:	4820      	ldr	r0, [pc, #128]	; (b890 <send_seg+0x180>)
    b810:	f7ff fd98 	bl	b344 <seg_tx_send_unacked>
	return 0;
    b814:	4640      	mov	r0, r8
    b816:	e795      	b.n	b744 <send_seg+0x34>
	} else if (BT_MESH_IS_DEV_KEY(net_tx->ctx->app_idx)) {
    b818:	8849      	ldrh	r1, [r1, #2]
    b81a:	3103      	adds	r1, #3
    b81c:	b289      	uxth	r1, r1
    b81e:	2901      	cmp	r1, #1
		tx->hdr = SEG_HDR(1, net_tx->aid);
    b820:	bf85      	ittet	hi
    b822:	7ac1      	ldrbhi	r1, [r0, #11]
    b824:	f3c1 0185 	ubfxhi	r1, r1, #2, #6
		tx->hdr = SEG_HDR(0, 0);
    b828:	2180      	movls	r1, #128	; 0x80
		tx->hdr = SEG_HDR(1, net_tx->aid);
    b82a:	f061 013f 	ornhi	r1, r1, #63	; 0x3f
    b82e:	e791      	b.n	b754 <send_seg+0x44>
		err = k_mem_slab_alloc(&segs, &buf, BUF_TIMEOUT);
    b830:	2200      	movs	r2, #0
    b832:	2300      	movs	r3, #0
    b834:	a901      	add	r1, sp, #4
    b836:	4648      	mov	r0, r9
    b838:	f00b fbd4 	bl	16fe4 <k_mem_slab_alloc>
		if (err) {
    b83c:	f105 0a01 	add.w	sl, r5, #1
    b840:	b178      	cbz	r0, b862 <send_seg+0x152>
    b842:	4b14      	ldr	r3, [pc, #80]	; (b894 <send_seg+0x184>)
    b844:	4914      	ldr	r1, [pc, #80]	; (b898 <send_seg+0x188>)
			BT_ERR("Out of segment buffers");
    b846:	4816      	ldr	r0, [pc, #88]	; (b8a0 <send_seg+0x190>)
    b848:	1ac9      	subs	r1, r1, r3
    b84a:	08c9      	lsrs	r1, r1, #3
    b84c:	0189      	lsls	r1, r1, #6
    b84e:	f041 0101 	orr.w	r1, r1, #1
    b852:	f00d face 	bl	18df2 <log_0>
			seg_tx_reset(tx);
    b856:	480e      	ldr	r0, [pc, #56]	; (b890 <send_seg+0x180>)
    b858:	f7ff fcf8 	bl	b24c <seg_tx_reset>
			return -ENOBUFS;
    b85c:	f06f 0068 	mvn.w	r0, #104	; 0x68
    b860:	e770      	b.n	b744 <send_seg+0x34>
		memcpy(buf, net_buf_simple_pull_mem(sdu, len), len);
    b862:	f8b6 8004 	ldrh.w	r8, [r6, #4]
    b866:	f8dd b004 	ldr.w	fp, [sp, #4]
    b86a:	45b8      	cmp	r8, r7
    b86c:	bf28      	it	cs
    b86e:	46b8      	movcs	r8, r7
    b870:	4641      	mov	r1, r8
    b872:	4630      	mov	r0, r6
    b874:	f011 fd88 	bl	1d388 <net_buf_simple_pull_mem>
		tx->seg[seg_o] = buf;
    b878:	b2ed      	uxtb	r5, r5
		memcpy(buf, net_buf_simple_pull_mem(sdu, len), len);
    b87a:	4601      	mov	r1, r0
		tx->seg[seg_o] = buf;
    b87c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
		memcpy(buf, net_buf_simple_pull_mem(sdu, len), len);
    b880:	4642      	mov	r2, r8
    b882:	4658      	mov	r0, fp
    b884:	f00e f98e 	bl	19ba4 <memcpy>
		tx->seg[seg_o] = buf;
    b888:	9b01      	ldr	r3, [sp, #4]
    b88a:	606b      	str	r3, [r5, #4]
	for (seg_o = 0U; sdu->len; seg_o++) {
    b88c:	4655      	mov	r5, sl
    b88e:	e7b9      	b.n	b804 <send_seg+0xf4>
    b890:	20001298 	.word	0x20001298
    b894:	0001e408 	.word	0x0001e408
    b898:	0001e5d0 	.word	0x0001e5d0
    b89c:	00020c6b 	.word	0x00020c6b
    b8a0:	00020c97 	.word	0x00020c97
    b8a4:	200011d0 	.word	0x200011d0
    b8a8:	20000b48 	.word	0x20000b48

0000b8ac <send_unseg>:
{
    b8ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b8b0:	4604      	mov	r4, r0
    b8b2:	460f      	mov	r7, r1
    b8b4:	4690      	mov	r8, r2
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, tx->xmit, BUF_TIMEOUT);
    b8b6:	7a81      	ldrb	r1, [r0, #10]
{
    b8b8:	f8dd a020 	ldr.w	sl, [sp, #32]
    b8bc:	4699      	mov	r9, r3
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, tx->xmit, BUF_TIMEOUT);
    b8be:	2200      	movs	r2, #0
    b8c0:	2300      	movs	r3, #0
    b8c2:	2001      	movs	r0, #1
    b8c4:	f7fe f84c 	bl	9960 <bt_mesh_adv_create>
	if (!buf) {
    b8c8:	4605      	mov	r5, r0
    b8ca:	b340      	cbz	r0, b91e <send_unseg+0x72>
    b8cc:	f100 0608 	add.w	r6, r0, #8
    b8d0:	2109      	movs	r1, #9
    b8d2:	4630      	mov	r0, r6
    b8d4:	f011 fc93 	bl	1d1fe <net_buf_simple_reserve>
	if (ctl_op) {
    b8d8:	f1ba 0f00 	cmp.w	sl, #0
    b8dc:	d013      	beq.n	b906 <send_unseg+0x5a>
		net_buf_add_u8(buf, TRANS_CTL_HDR(*ctl_op, 0));
    b8de:	f89a 1000 	ldrb.w	r1, [sl]
	return net_buf_simple_add_u8(&buf->b, val);
    b8e2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    b8e6:	4630      	mov	r0, r6
    b8e8:	f011 fcf8 	bl	1d2dc <net_buf_simple_add_u8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    b8ec:	88ba      	ldrh	r2, [r7, #4]
    b8ee:	6839      	ldr	r1, [r7, #0]
    b8f0:	4630      	mov	r0, r6
    b8f2:	f011 fcea 	bl	1d2ca <net_buf_simple_add_mem>
	return bt_mesh_net_send(tx, buf, cb, cb_data);
    b8f6:	464b      	mov	r3, r9
    b8f8:	4642      	mov	r2, r8
    b8fa:	4629      	mov	r1, r5
    b8fc:	4620      	mov	r0, r4
}
    b8fe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_mesh_net_send(tx, buf, cb, cb_data);
    b902:	f7fe bcfb 	b.w	a2fc <bt_mesh_net_send>
	} else if (BT_MESH_IS_DEV_KEY(tx->ctx->app_idx)) {
    b906:	6863      	ldr	r3, [r4, #4]
    b908:	8858      	ldrh	r0, [r3, #2]
    b90a:	3003      	adds	r0, #3
    b90c:	b280      	uxth	r0, r0
    b90e:	2801      	cmp	r0, #1
		net_buf_add_u8(buf, UNSEG_HDR(1, tx->aid));
    b910:	bf85      	ittet	hi
    b912:	7ae1      	ldrbhi	r1, [r4, #11]
    b914:	0889      	lsrhi	r1, r1, #2
	return net_buf_simple_add_u8(&buf->b, val);
    b916:	4651      	movls	r1, sl
    b918:	f041 0140 	orrhi.w	r1, r1, #64	; 0x40
    b91c:	e7e3      	b.n	b8e6 <send_unseg+0x3a>
    b91e:	4b07      	ldr	r3, [pc, #28]	; (b93c <send_unseg+0x90>)
    b920:	4907      	ldr	r1, [pc, #28]	; (b940 <send_unseg+0x94>)
		BT_ERR("Out of network buffers");
    b922:	4808      	ldr	r0, [pc, #32]	; (b944 <send_unseg+0x98>)
    b924:	1ac9      	subs	r1, r1, r3
    b926:	08c9      	lsrs	r1, r1, #3
    b928:	0189      	lsls	r1, r1, #6
    b92a:	f041 0101 	orr.w	r1, r1, #1
    b92e:	f00d fa60 	bl	18df2 <log_0>
}
    b932:	f06f 0068 	mvn.w	r0, #104	; 0x68
    b936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b93a:	bf00      	nop
    b93c:	0001e408 	.word	0x0001e408
    b940:	0001e5d0 	.word	0x0001e5d0
    b944:	00020cae 	.word	0x00020cae

0000b948 <bt_mesh_tx_in_progress>:
		if (seg_tx[i].nack_count) {
    b948:	4b03      	ldr	r3, [pc, #12]	; (b958 <bt_mesh_tx_in_progress+0x10>)
    b94a:	f893 0032 	ldrb.w	r0, [r3, #50]	; 0x32
}
    b94e:	3800      	subs	r0, #0
    b950:	bf18      	it	ne
    b952:	2001      	movne	r0, #1
    b954:	4770      	bx	lr
    b956:	bf00      	nop
    b958:	20001298 	.word	0x20001298

0000b95c <bt_mesh_ctl_send>:
{
    b95c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    b960:	f8d0 9004 	ldr.w	r9, [r0, #4]
{
    b964:	461d      	mov	r5, r3
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    b966:	f899 300b 	ldrb.w	r3, [r9, #11]
{
    b96a:	b089      	sub	sp, #36	; 0x24
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    b96c:	2bff      	cmp	r3, #255	; 0xff
{
    b96e:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
    b972:	4604      	mov	r4, r0
    b974:	4616      	mov	r6, r2
    b976:	f88d 100f 	strb.w	r1, [sp, #15]
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    b97a:	d120      	bne.n	b9be <bt_mesh_ctl_send+0x62>
		tx->ctx->send_ttl = bt_mesh_default_ttl_get();
    b97c:	f7fd feae 	bl	96dc <bt_mesh_default_ttl_get>
    b980:	f889 000b 	strb.w	r0, [r9, #11]
	net_buf_simple_init_with_data(&buf, data, data_len);
    b984:	462a      	mov	r2, r5
    b986:	4631      	mov	r1, r6
    b988:	a805      	add	r0, sp, #20
    b98a:	f011 fc32 	bl	1d1f2 <net_buf_simple_init_with_data>
	if (data_len > BT_MESH_SDU_UNSEG_MAX) {
    b98e:	6863      	ldr	r3, [r4, #4]
    b990:	2d0b      	cmp	r5, #11
		tx->ctx->send_rel = true;
    b992:	bf84      	itt	hi
    b994:	2201      	movhi	r2, #1
    b996:	729a      	strbhi	r2, [r3, #10]
	tx->ctx->app_idx = BT_MESH_KEY_UNUSED;
    b998:	f64f 72ff 	movw	r2, #65535	; 0xffff
    b99c:	805a      	strh	r2, [r3, #2]
	if (tx->ctx->addr == BT_MESH_ADDR_UNASSIGNED ||
    b99e:	889a      	ldrh	r2, [r3, #4]
    b9a0:	b122      	cbz	r2, b9ac <bt_mesh_ctl_send+0x50>
    b9a2:	f482 4200 	eor.w	r2, r2, #32768	; 0x8000
    b9a6:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
    b9aa:	d219      	bcs.n	b9e0 <bt_mesh_ctl_send+0x84>
    b9ac:	4915      	ldr	r1, [pc, #84]	; (ba04 <bt_mesh_ctl_send+0xa8>)
    b9ae:	4b16      	ldr	r3, [pc, #88]	; (ba08 <bt_mesh_ctl_send+0xac>)
		BT_ERR("Invalid destination address");
    b9b0:	4816      	ldr	r0, [pc, #88]	; (ba0c <bt_mesh_ctl_send+0xb0>)
    b9b2:	1ac9      	subs	r1, r1, r3
    b9b4:	08c9      	lsrs	r1, r1, #3
    b9b6:	0189      	lsls	r1, r1, #6
    b9b8:	f041 0101 	orr.w	r1, r1, #1
    b9bc:	e009      	b.n	b9d2 <bt_mesh_ctl_send+0x76>
	} else if (tx->ctx->send_ttl > BT_MESH_TTL_MAX) {
    b9be:	061b      	lsls	r3, r3, #24
    b9c0:	d5e0      	bpl.n	b984 <bt_mesh_ctl_send+0x28>
    b9c2:	4910      	ldr	r1, [pc, #64]	; (ba04 <bt_mesh_ctl_send+0xa8>)
    b9c4:	4b10      	ldr	r3, [pc, #64]	; (ba08 <bt_mesh_ctl_send+0xac>)
		BT_ERR("TTL too large (max 127)");
    b9c6:	4812      	ldr	r0, [pc, #72]	; (ba10 <bt_mesh_ctl_send+0xb4>)
    b9c8:	1ac9      	subs	r1, r1, r3
    b9ca:	08c9      	lsrs	r1, r1, #3
    b9cc:	0189      	lsls	r1, r1, #6
    b9ce:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid destination address");
    b9d2:	f00d fa0e 	bl	18df2 <log_0>
		return -EINVAL;
    b9d6:	f06f 0015 	mvn.w	r0, #21
}
    b9da:	b009      	add	sp, #36	; 0x24
    b9dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (tx->ctx->send_rel) {
    b9e0:	7a9a      	ldrb	r2, [r3, #10]
    b9e2:	f10d 030f 	add.w	r3, sp, #15
		return send_seg(tx, &buf, cb, cb_data, &ctl_op);
    b9e6:	9300      	str	r3, [sp, #0]
    b9e8:	4643      	mov	r3, r8
	if (tx->ctx->send_rel) {
    b9ea:	b12a      	cbz	r2, b9f8 <bt_mesh_ctl_send+0x9c>
		return send_seg(tx, &buf, cb, cb_data, &ctl_op);
    b9ec:	463a      	mov	r2, r7
    b9ee:	a905      	add	r1, sp, #20
    b9f0:	4620      	mov	r0, r4
    b9f2:	f7ff fe8d 	bl	b710 <send_seg>
    b9f6:	e7f0      	b.n	b9da <bt_mesh_ctl_send+0x7e>
		return send_unseg(tx, &buf, cb, cb_data, &ctl_op);
    b9f8:	463a      	mov	r2, r7
    b9fa:	a905      	add	r1, sp, #20
    b9fc:	4620      	mov	r0, r4
    b9fe:	f7ff ff55 	bl	b8ac <send_unseg>
    ba02:	e7ea      	b.n	b9da <bt_mesh_ctl_send+0x7e>
    ba04:	0001e5d0 	.word	0x0001e5d0
    ba08:	0001e408 	.word	0x0001e408
    ba0c:	00020cdd 	.word	0x00020cdd
    ba10:	00020cc5 	.word	0x00020cc5

0000ba14 <bt_mesh_va_del>:
{
    ba14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if (virtual_addrs[i].ref &&
    ba18:	4e18      	ldr	r6, [pc, #96]	; (ba7c <bt_mesh_va_del+0x68>)
{
    ba1a:	4681      	mov	r9, r0
    ba1c:	460d      	mov	r5, r1
	for (int i = 0; i < ARRAY_SIZE(virtual_addrs); i++) {
    ba1e:	2400      	movs	r4, #0
    ba20:	46b0      	mov	r8, r6
		    !memcmp(uuid, virtual_addrs[i].uuid,
    ba22:	f106 0a04 	add.w	sl, r6, #4
		if (virtual_addrs[i].ref &&
    ba26:	2314      	movs	r3, #20
    ba28:	4363      	muls	r3, r4
    ba2a:	18f7      	adds	r7, r6, r3
    ba2c:	5af2      	ldrh	r2, [r6, r3]
    ba2e:	f3c2 020e 	ubfx	r2, r2, #0, #15
    ba32:	b1d2      	cbz	r2, ba6a <bt_mesh_va_del+0x56>
		    !memcmp(uuid, virtual_addrs[i].uuid,
    ba34:	2210      	movs	r2, #16
    ba36:	eb0a 0103 	add.w	r1, sl, r3
    ba3a:	4648      	mov	r0, r9
    ba3c:	f00e f8a2 	bl	19b84 <memcmp>
		if (virtual_addrs[i].ref &&
    ba40:	b998      	cbnz	r0, ba6a <bt_mesh_va_del+0x56>
	va->ref--;
    ba42:	883b      	ldrh	r3, [r7, #0]
    ba44:	f503 42ff 	add.w	r2, r3, #32640	; 0x7f80
    ba48:	327f      	adds	r2, #127	; 0x7f
    ba4a:	f362 030e 	bfi	r3, r2, #0, #15
    ba4e:	803b      	strh	r3, [r7, #0]
	if (addr) {
    ba50:	b98d      	cbnz	r5, ba76 <bt_mesh_va_del+0x62>
	store->changed = 1U;
    ba52:	2314      	movs	r3, #20
    ba54:	fb03 8404 	mla	r4, r3, r4, r8
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
    ba58:	2009      	movs	r0, #9
	store->changed = 1U;
    ba5a:	7863      	ldrb	r3, [r4, #1]
    ba5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ba60:	7063      	strb	r3, [r4, #1]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
    ba62:	f001 fad7 	bl	d014 <bt_mesh_settings_store_schedule>
	return STATUS_SUCCESS;
    ba66:	2000      	movs	r0, #0
}
    ba68:	e003      	b.n	ba72 <bt_mesh_va_del+0x5e>
	for (int i = 0; i < ARRAY_SIZE(virtual_addrs); i++) {
    ba6a:	3401      	adds	r4, #1
    ba6c:	2c03      	cmp	r4, #3
    ba6e:	d1da      	bne.n	ba26 <bt_mesh_va_del+0x12>
		return STATUS_CANNOT_REMOVE;
    ba70:	200c      	movs	r0, #12
}
    ba72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		*addr = va->addr;
    ba76:	887b      	ldrh	r3, [r7, #2]
    ba78:	802b      	strh	r3, [r5, #0]
    ba7a:	e7ea      	b.n	ba52 <bt_mesh_va_del+0x3e>
    ba7c:	20002e5a 	.word	0x20002e5a

0000ba80 <bt_mesh_va_label_get>:
{
    ba80:	b570      	push	{r4, r5, r6, lr}
    ba82:	4c11      	ldr	r4, [pc, #68]	; (bac8 <bt_mesh_va_label_get+0x48>)
    ba84:	4601      	mov	r1, r0
	for (i = 0; i < ARRAY_SIZE(virtual_addrs); i++) {
    ba86:	2200      	movs	r2, #0
    ba88:	4623      	mov	r3, r4
		if (virtual_addrs[i].ref && virtual_addrs[i].addr == addr) {
    ba8a:	2614      	movs	r6, #20
    ba8c:	fb06 f002 	mul.w	r0, r6, r2
    ba90:	5a1d      	ldrh	r5, [r3, r0]
    ba92:	f3c5 050e 	ubfx	r5, r5, #0, #15
    ba96:	b12d      	cbz	r5, baa4 <bt_mesh_va_label_get+0x24>
    ba98:	8865      	ldrh	r5, [r4, #2]
    ba9a:	428d      	cmp	r5, r1
    ba9c:	d102      	bne.n	baa4 <bt_mesh_va_label_get+0x24>
			return virtual_addrs[i].uuid;
    ba9e:	3004      	adds	r0, #4
    baa0:	4418      	add	r0, r3
}
    baa2:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < ARRAY_SIZE(virtual_addrs); i++) {
    baa4:	3201      	adds	r2, #1
    baa6:	2a03      	cmp	r2, #3
    baa8:	f104 0414 	add.w	r4, r4, #20
    baac:	d1ee      	bne.n	ba8c <bt_mesh_va_label_get+0xc>
    baae:	4b07      	ldr	r3, [pc, #28]	; (bacc <bt_mesh_va_label_get+0x4c>)
    bab0:	4a07      	ldr	r2, [pc, #28]	; (bad0 <bt_mesh_va_label_get+0x50>)
	BT_WARN("No matching Label UUID for 0x%04x", addr);
    bab2:	4808      	ldr	r0, [pc, #32]	; (bad4 <bt_mesh_va_label_get+0x54>)
    bab4:	1ad2      	subs	r2, r2, r3
    bab6:	08d2      	lsrs	r2, r2, #3
    bab8:	0192      	lsls	r2, r2, #6
    baba:	f042 0202 	orr.w	r2, r2, #2
    babe:	f00d f9a5 	bl	18e0c <log_1>
	return NULL;
    bac2:	2000      	movs	r0, #0
    bac4:	e7ed      	b.n	baa2 <bt_mesh_va_label_get+0x22>
    bac6:	bf00      	nop
    bac8:	20002e5a 	.word	0x20002e5a
    bacc:	0001e408 	.word	0x0001e408
    bad0:	0001e5d0 	.word	0x0001e5d0
    bad4:	00020cf9 	.word	0x00020cf9

0000bad8 <sdu_recv>:
{
    bad8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    badc:	b08b      	sub	sp, #44	; 0x2c
    bade:	4604      	mov	r4, r0
    bae0:	460d      	mov	r5, r1
    bae2:	4691      	mov	r9, r2
	struct decrypt_ctx ctx = {
    bae4:	2100      	movs	r1, #0
    bae6:	2210      	movs	r2, #16
    bae8:	a803      	add	r0, sp, #12
{
    baea:	4698      	mov	r8, r3
    baec:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	struct decrypt_ctx ctx = {
    baf0:	f00e f883 	bl	19bfa <memset>
			.dev_key = !AKF(&hdr),
    baf4:	ea6f 1395 	mvn.w	r3, r5, lsr #6
    baf8:	f003 0301 	and.w	r3, r3, #1
			.dst = rx->ctx.recv_dst,
    bafc:	8960      	ldrh	r0, [r4, #10]
			.dev_key = !AKF(&hdr),
    bafe:	f88d 3008 	strb.w	r3, [sp, #8]
	struct decrypt_ctx ctx = {
    bb02:	8923      	ldrh	r3, [r4, #8]
    bb04:	f88d 9009 	strb.w	r9, [sp, #9]
    bb08:	f8ad 300a 	strh.w	r3, [sp, #10]
    bb0c:	f8ad 000c 	strh.w	r0, [sp, #12]
    bb10:	b367      	cbz	r7, bb6c <sdu_recv+0x94>
    bb12:	693a      	ldr	r2, [r7, #16]
    bb14:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
			.iv_index = BT_MESH_NET_IVI_RX(rx),
    bb18:	7d23      	ldrb	r3, [r4, #20]
	struct decrypt_ctx ctx = {
    bb1a:	9204      	str	r2, [sp, #16]
			.iv_index = BT_MESH_NET_IVI_RX(rx),
    bb1c:	f003 0201 	and.w	r2, r3, #1
    bb20:	4b13      	ldr	r3, [pc, #76]	; (bb70 <sdu_recv+0x98>)
	struct decrypt_ctx ctx = {
    bb22:	9709      	str	r7, [sp, #36]	; 0x24
			.iv_index = BT_MESH_NET_IVI_RX(rx),
    bb24:	681b      	ldr	r3, [r3, #0]
    bb26:	1a9b      	subs	r3, r3, r2
	struct decrypt_ctx ctx = {
    bb28:	9305      	str	r3, [sp, #20]
	if (BT_MESH_ADDR_IS_VIRTUAL(rx->ctx.recv_dst)) {
    bb2a:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
    bb2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
	struct decrypt_ctx ctx = {
    bb32:	e9cd 8607 	strd	r8, r6, [sp, #28]
	if (BT_MESH_ADDR_IS_VIRTUAL(rx->ctx.recv_dst)) {
    bb36:	d202      	bcs.n	bb3e <sdu_recv+0x66>
		ctx.crypto.ad = bt_mesh_va_label_get(rx->ctx.recv_dst);
    bb38:	f7ff ffa2 	bl	ba80 <bt_mesh_va_label_get>
    bb3c:	9006      	str	r0, [sp, #24]
	rx->ctx.app_idx = bt_mesh_app_key_find(ctx.crypto.dev_key, AID(&hdr),
    bb3e:	ab02      	add	r3, sp, #8
    bb40:	9300      	str	r3, [sp, #0]
    bb42:	f89d 0008 	ldrb.w	r0, [sp, #8]
    bb46:	4b0b      	ldr	r3, [pc, #44]	; (bb74 <sdu_recv+0x9c>)
    bb48:	4622      	mov	r2, r4
    bb4a:	f005 013f 	and.w	r1, r5, #63	; 0x3f
    bb4e:	f7ff fa75 	bl	b03c <bt_mesh_app_key_find>
	if (rx->ctx.app_idx == BT_MESH_KEY_UNUSED) {
    bb52:	f64f 73ff 	movw	r3, #65535	; 0xffff
    bb56:	4298      	cmp	r0, r3
	rx->ctx.app_idx = bt_mesh_app_key_find(ctx.crypto.dev_key, AID(&hdr),
    bb58:	80e0      	strh	r0, [r4, #6]
	if (rx->ctx.app_idx == BT_MESH_KEY_UNUSED) {
    bb5a:	d003      	beq.n	bb64 <sdu_recv+0x8c>
	bt_mesh_model_recv(rx, sdu);
    bb5c:	4631      	mov	r1, r6
    bb5e:	4620      	mov	r0, r4
    bb60:	f001 f90e 	bl	cd80 <bt_mesh_model_recv>
}
    bb64:	2000      	movs	r0, #0
    bb66:	b00b      	add	sp, #44	; 0x2c
    bb68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	struct decrypt_ctx ctx = {
    bb6c:	6922      	ldr	r2, [r4, #16]
    bb6e:	e7d3      	b.n	bb18 <sdu_recv+0x40>
    bb70:	200011d0 	.word	0x200011d0
    bb74:	0001b7e9 	.word	0x0001b7e9

0000bb78 <bt_mesh_trans_recv>:
{
    bb78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint64_t seq_auth = TRANS_SEQ_AUTH_NVAL;
    bb7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
    bb80:	b095      	sub	sp, #84	; 0x54
	uint64_t seq_auth = TRANS_SEQ_AUTH_NVAL;
    bb82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bb86:	e9cd 2308 	strd	r2, r3, [sp, #32]
		rx->friend_match = false;
    bb8a:	7d0b      	ldrb	r3, [r1, #20]
    bb8c:	f36f 13c7 	bfc	r3, #7, #1
{
    bb90:	4607      	mov	r7, r0
		rx->friend_match = false;
    bb92:	750b      	strb	r3, [r1, #20]
{
    bb94:	460c      	mov	r4, r1
	net_buf_simple_pull(buf, BT_MESH_NET_HDR_LEN);
    bb96:	2109      	movs	r1, #9
    bb98:	f011 fbee 	bl	1d378 <net_buf_simple_pull>
	state->offset = net_buf_simple_headroom(buf);
    bb9c:	4638      	mov	r0, r7
    bb9e:	f011 fc1f 	bl	1d3e0 <net_buf_simple_headroom>
	if (SEG(buf->data)) {
    bba2:	f8d7 9000 	ldr.w	r9, [r7]
	state->len = buf->len;
    bba6:	f8b7 b004 	ldrh.w	fp, [r7, #4]
    bbaa:	f999 3000 	ldrsb.w	r3, [r9]
	state->offset = net_buf_simple_headroom(buf);
    bbae:	9005      	str	r0, [sp, #20]
    bbb0:	2b00      	cmp	r3, #0
    bbb2:	f280 8286 	bge.w	c0c2 <bt_mesh_trans_recv+0x54a>
		if (!rx->local_match && !rx->friend_match) {
    bbb6:	f894 a014 	ldrb.w	sl, [r4, #20]
    bbba:	f01a 00c0 	ands.w	r0, sl, #192	; 0xc0
    bbbe:	f000 82b8 	beq.w	c132 <bt_mesh_trans_recv+0x5ba>
	struct bt_mesh_rpl *rpl = NULL;
    bbc2:	2300      	movs	r3, #0
	if (buf->len < 5) {
    bbc4:	f1bb 0f04 	cmp.w	fp, #4
	struct bt_mesh_rpl *rpl = NULL;
    bbc8:	9307      	str	r3, [sp, #28]
	if (buf->len < 5) {
    bbca:	d80d      	bhi.n	bbe8 <bt_mesh_trans_recv+0x70>
    bbcc:	4a91      	ldr	r2, [pc, #580]	; (be14 <bt_mesh_trans_recv+0x29c>)
    bbce:	4b92      	ldr	r3, [pc, #584]	; (be18 <bt_mesh_trans_recv+0x2a0>)
		BT_ERR("Too short segmented message (len %u)", buf->len);
    bbd0:	4892      	ldr	r0, [pc, #584]	; (be1c <bt_mesh_trans_recv+0x2a4>)
    bbd2:	1ad2      	subs	r2, r2, r3
    bbd4:	08d2      	lsrs	r2, r2, #3
    bbd6:	0192      	lsls	r2, r2, #6
    bbd8:	f042 0201 	orr.w	r2, r2, #1
    bbdc:	4659      	mov	r1, fp
    bbde:	f00d f915 	bl	18e0c <log_1>
		return -EINVAL;
    bbe2:	f06f 0a15 	mvn.w	sl, #21
    bbe6:	e0c3      	b.n	bd70 <bt_mesh_trans_recv+0x1f8>
	if (bt_mesh_rpl_check(net_rx, &rpl)) {
    bbe8:	a907      	add	r1, sp, #28
    bbea:	4620      	mov	r0, r4
    bbec:	f000 fbba 	bl	c364 <bt_mesh_rpl_check>
    bbf0:	b178      	cbz	r0, bc12 <bt_mesh_trans_recv+0x9a>
    bbf2:	4a89      	ldr	r2, [pc, #548]	; (be18 <bt_mesh_trans_recv+0x2a0>)
    bbf4:	4b87      	ldr	r3, [pc, #540]	; (be14 <bt_mesh_trans_recv+0x29c>)
		BT_WARN("Replay: src 0x%04x dst 0x%04x seq 0x%06x",
    bbf6:	8921      	ldrh	r1, [r4, #8]
    bbf8:	4889      	ldr	r0, [pc, #548]	; (be20 <bt_mesh_trans_recv+0x2a8>)
    bbfa:	1a9b      	subs	r3, r3, r2
    bbfc:	08db      	lsrs	r3, r3, #3
    bbfe:	019b      	lsls	r3, r3, #6
    bc00:	f043 0302 	orr.w	r3, r3, #2
    bc04:	f8ad 3000 	strh.w	r3, [sp]
    bc08:	8962      	ldrh	r2, [r4, #10]
    bc0a:	6923      	ldr	r3, [r4, #16]
    bc0c:	f00d f92b 	bl	18e66 <log_3>
    bc10:	e7e7      	b.n	bbe2 <bt_mesh_trans_recv+0x6a>
	net_buf_simple_pull(buf, 1);
    bc12:	2101      	movs	r1, #1
    bc14:	4638      	mov	r0, r7
    bc16:	f011 fbaf 	bl	1d378 <net_buf_simple_pull>
	seq_zero = net_buf_simple_pull_be16(buf);
    bc1a:	4638      	mov	r0, r7
    bc1c:	f011 fbcc 	bl	1d3b8 <net_buf_simple_pull_be16>
	seg_o = (seq_zero & 0x03) << 3;
    bc20:	00c6      	lsls	r6, r0, #3
	seq_zero = (seq_zero >> 2) & TRANS_SEQ_ZERO_MASK;
    bc22:	f3c0 058c 	ubfx	r5, r0, #2, #13
	seg_n = net_buf_simple_pull_u8(buf);
    bc26:	4638      	mov	r0, r7
    bc28:	f011 fbb6 	bl	1d398 <net_buf_simple_pull_u8>
	seg_o = (seq_zero & 0x03) << 3;
    bc2c:	f006 0618 	and.w	r6, r6, #24
	seg_o |= seg_n >> 5;
    bc30:	ea46 1650 	orr.w	r6, r6, r0, lsr #5
	seg_n &= 0x1f;
    bc34:	f000 0a1f 	and.w	sl, r0, #31
	seg_o |= seg_n >> 5;
    bc38:	b2f6      	uxtb	r6, r6
	if (seg_o > seg_n) {
    bc3a:	4556      	cmp	r6, sl
	seg_n &= 0x1f;
    bc3c:	46d0      	mov	r8, sl
	if (seg_o > seg_n) {
    bc3e:	d90c      	bls.n	bc5a <bt_mesh_trans_recv+0xe2>
    bc40:	4a75      	ldr	r2, [pc, #468]	; (be18 <bt_mesh_trans_recv+0x2a0>)
    bc42:	4b74      	ldr	r3, [pc, #464]	; (be14 <bt_mesh_trans_recv+0x29c>)
		BT_ERR("SegO greater than SegN (%u > %u)", seg_o, seg_n);
    bc44:	4877      	ldr	r0, [pc, #476]	; (be24 <bt_mesh_trans_recv+0x2ac>)
    bc46:	1a9b      	subs	r3, r3, r2
    bc48:	08db      	lsrs	r3, r3, #3
    bc4a:	019b      	lsls	r3, r3, #6
    bc4c:	f043 0301 	orr.w	r3, r3, #1
    bc50:	4652      	mov	r2, sl
    bc52:	4631      	mov	r1, r6
    bc54:	f00d f8ee 	bl	18e34 <log_2>
		return -EINVAL;
    bc58:	e7c3      	b.n	bbe2 <bt_mesh_trans_recv+0x6a>
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
    bc5a:	6923      	ldr	r3, [r4, #16]
    bc5c:	4972      	ldr	r1, [pc, #456]	; (be28 <bt_mesh_trans_recv+0x2b0>)
    bc5e:	f894 c014 	ldrb.w	ip, [r4, #20]
    bc62:	6809      	ldr	r1, [r1, #0]
    bc64:	1b5d      	subs	r5, r3, r5
    bc66:	f00c 0201 	and.w	r2, ip, #1
    bc6a:	f3c5 050c 	ubfx	r5, r5, #0, #13
    bc6e:	1a89      	subs	r1, r1, r2
    bc70:	1b5d      	subs	r5, r3, r5
    bc72:	ea45 6201 	orr.w	r2, r5, r1, lsl #24
		if (rx->src != net_rx->ctx.addr ||
    bc76:	4d6d      	ldr	r5, [pc, #436]	; (be2c <bt_mesh_trans_recv+0x2b4>)
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
    bc78:	0a0b      	lsrs	r3, r1, #8
	auth_seqnum = *seq_auth & BIT_MASK(24);
    bc7a:	f022 417f 	bic.w	r1, r2, #4278190080	; 0xff000000
		if (rx->src != net_rx->ctx.addr ||
    bc7e:	69a8      	ldr	r0, [r5, #24]
	auth_seqnum = *seq_auth & BIT_MASK(24);
    bc80:	9104      	str	r1, [sp, #16]
		if (rx->src != net_rx->ctx.addr ||
    bc82:	68a1      	ldr	r1, [r4, #8]
    bc84:	4288      	cmp	r0, r1
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
    bc86:	e9cd 2308 	strd	r2, r3, [sp, #32]
		if (rx->src != net_rx->ctx.addr ||
    bc8a:	d118      	bne.n	bcbe <bt_mesh_trans_recv+0x146>
		if (rx->seq_auth >= *seq_auth) {
    bc8c:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
    bc90:	4299      	cmp	r1, r3
    bc92:	bf08      	it	eq
    bc94:	4290      	cmpeq	r0, r2
    bc96:	f080 824e 	bcs.w	c136 <bt_mesh_trans_recv+0x5be>
		if (rx->in_use) {
    bc9a:	7feb      	ldrb	r3, [r5, #31]
    bc9c:	0658      	lsls	r0, r3, #25
    bc9e:	d50e      	bpl.n	bcbe <bt_mesh_trans_recv+0x146>
    bca0:	4b5d      	ldr	r3, [pc, #372]	; (be18 <bt_mesh_trans_recv+0x2a0>)
    bca2:	4a5c      	ldr	r2, [pc, #368]	; (be14 <bt_mesh_trans_recv+0x29c>)
			BT_WARN("Duplicate SDU from src 0x%04x",
    bca4:	8921      	ldrh	r1, [r4, #8]
    bca6:	4862      	ldr	r0, [pc, #392]	; (be30 <bt_mesh_trans_recv+0x2b8>)
    bca8:	1ad2      	subs	r2, r2, r3
    bcaa:	08d2      	lsrs	r2, r2, #3
    bcac:	0192      	lsls	r2, r2, #6
    bcae:	f042 0202 	orr.w	r2, r2, #2
    bcb2:	f00d f8ab 	bl	18e0c <log_1>
			seg_rx_reset(rx, true);
    bcb6:	2101      	movs	r1, #1
    bcb8:	4628      	mov	r0, r5
    bcba:	f7ff fa9d 	bl	b1f8 <seg_rx_reset>
	if (!sdu_len_is_ok(net_rx->ctl, seg_n)) {
    bcbe:	f1b8 0f02 	cmp.w	r8, #2
    bcc2:	d96d      	bls.n	bda0 <bt_mesh_trans_recv+0x228>
    bcc4:	4b54      	ldr	r3, [pc, #336]	; (be18 <bt_mesh_trans_recv+0x2a0>)
    bcc6:	4953      	ldr	r1, [pc, #332]	; (be14 <bt_mesh_trans_recv+0x29c>)
		BT_ERR("Too big incoming SDU length");
    bcc8:	485a      	ldr	r0, [pc, #360]	; (be34 <bt_mesh_trans_recv+0x2bc>)
    bcca:	1ac9      	subs	r1, r1, r3
    bccc:	08c9      	lsrs	r1, r1, #3
    bcce:	0189      	lsls	r1, r1, #6
    bcd0:	f041 0101 	orr.w	r1, r1, #1
    bcd4:	f00d f88d 	bl	18df2 <log_0>
			 net_rx->friend_match);
    bcd8:	7d23      	ldrb	r3, [r4, #20]
		send_ack(net_rx->sub, net_rx->ctx.recv_dst, net_rx->ctx.addr,
    bcda:	8922      	ldrh	r2, [r4, #8]
    bcdc:	8961      	ldrh	r1, [r4, #10]
    bcde:	6820      	ldr	r0, [r4, #0]
    bce0:	09db      	lsrs	r3, r3, #7
    bce2:	9302      	str	r3, [sp, #8]
    bce4:	2300      	movs	r3, #0
    bce6:	9301      	str	r3, [sp, #4]
    bce8:	ab08      	add	r3, sp, #32
    bcea:	9300      	str	r3, [sp, #0]
    bcec:	7be3      	ldrb	r3, [r4, #15]
    bcee:	f00f fd90 	bl	1b812 <send_ack>
			return -EMSGSIZE;
    bcf2:	f06f 0a79 	mvn.w	sl, #121	; 0x79
    bcf6:	e03b      	b.n	bd70 <bt_mesh_trans_recv+0x1f8>
	if (rx->hdr != *hdr || rx->seg_n != seg_n) {
    bcf8:	f899 2000 	ldrb.w	r2, [r9]
    bcfc:	7fab      	ldrb	r3, [r5, #30]
    bcfe:	429a      	cmp	r2, r3
    bd00:	d104      	bne.n	bd0c <bt_mesh_trans_recv+0x194>
    bd02:	7feb      	ldrb	r3, [r5, #31]
    bd04:	f003 031f 	and.w	r3, r3, #31
    bd08:	4543      	cmp	r3, r8
    bd0a:	d008      	beq.n	bd1e <bt_mesh_trans_recv+0x1a6>
    bd0c:	4941      	ldr	r1, [pc, #260]	; (be14 <bt_mesh_trans_recv+0x29c>)
    bd0e:	4b42      	ldr	r3, [pc, #264]	; (be18 <bt_mesh_trans_recv+0x2a0>)
		BT_ERR("Invalid segment for ongoing session");
    bd10:	4849      	ldr	r0, [pc, #292]	; (be38 <bt_mesh_trans_recv+0x2c0>)
    bd12:	1ac9      	subs	r1, r1, r3
    bd14:	08c9      	lsrs	r1, r1, #3
    bd16:	0189      	lsls	r1, r1, #6
    bd18:	f041 0101 	orr.w	r1, r1, #1
    bd1c:	e218      	b.n	c150 <bt_mesh_trans_recv+0x5d8>
	if (rx->ctl != net_rx->ctl) {
    bd1e:	7fea      	ldrb	r2, [r5, #31]
    bd20:	f3cc 0cc0 	ubfx	ip, ip, #3, #1
    bd24:	f3c2 1140 	ubfx	r1, r2, #5, #1
    bd28:	4561      	cmp	r1, ip
    bd2a:	d008      	beq.n	bd3e <bt_mesh_trans_recv+0x1c6>
    bd2c:	4939      	ldr	r1, [pc, #228]	; (be14 <bt_mesh_trans_recv+0x29c>)
    bd2e:	4b3a      	ldr	r3, [pc, #232]	; (be18 <bt_mesh_trans_recv+0x2a0>)
		BT_ERR("Inconsistent CTL in segment");
    bd30:	4842      	ldr	r0, [pc, #264]	; (be3c <bt_mesh_trans_recv+0x2c4>)
    bd32:	1ac9      	subs	r1, r1, r3
    bd34:	08c9      	lsrs	r1, r1, #3
    bd36:	0189      	lsls	r1, r1, #6
    bd38:	f041 0101 	orr.w	r1, r1, #1
    bd3c:	e208      	b.n	c150 <bt_mesh_trans_recv+0x5d8>
		if (rx->in_use) {
    bd3e:	0651      	lsls	r1, r2, #25
    bd40:	f100 80b0 	bmi.w	bea4 <bt_mesh_trans_recv+0x32c>
		if (rx->block == BLOCK_COMPLETE(rx->seg_n)) {
    bd44:	1c59      	adds	r1, r3, #1
    bd46:	2301      	movs	r3, #1
    bd48:	6a68      	ldr	r0, [r5, #36]	; 0x24
    bd4a:	408b      	lsls	r3, r1
    bd4c:	3b01      	subs	r3, #1
    bd4e:	4283      	cmp	r3, r0
    bd50:	d11d      	bne.n	bd8e <bt_mesh_trans_recv+0x216>
			send_ack(net_rx->sub, net_rx->ctx.recv_dst,
    bd52:	09d2      	lsrs	r2, r2, #7
    bd54:	e9cd 3201 	strd	r3, r2, [sp, #4]
    bd58:	ab08      	add	r3, sp, #32
    bd5a:	9300      	str	r3, [sp, #0]
    bd5c:	8922      	ldrh	r2, [r4, #8]
    bd5e:	7be3      	ldrb	r3, [r4, #15]
    bd60:	8961      	ldrh	r1, [r4, #10]
    bd62:	6820      	ldr	r0, [r4, #0]
    bd64:	f00f fd55 	bl	1b812 <send_ack>
			if (rpl) {
    bd68:	9807      	ldr	r0, [sp, #28]
    bd6a:	b960      	cbnz	r0, bd86 <bt_mesh_trans_recv+0x20e>
		return -EALREADY;
    bd6c:	f06f 0a77 	mvn.w	sl, #119	; 0x77
	buf->data = buf->__buf + state->offset;
    bd70:	68b8      	ldr	r0, [r7, #8]
    bd72:	9b05      	ldr	r3, [sp, #20]
	buf->len = state->len;
    bd74:	f8a7 b004 	strh.w	fp, [r7, #4]
	buf->data = buf->__buf + state->offset;
    bd78:	fa10 f083 	uxtah	r0, r0, r3
    bd7c:	6038      	str	r0, [r7, #0]
}
    bd7e:	4650      	mov	r0, sl
    bd80:	b015      	add	sp, #84	; 0x54
    bd82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				bt_mesh_rpl_update(rpl, net_rx);
    bd86:	4621      	mov	r1, r4
    bd88:	f00f fd8a 	bl	1b8a0 <bt_mesh_rpl_update>
    bd8c:	e7ee      	b.n	bd6c <bt_mesh_trans_recv+0x1f4>
    bd8e:	4921      	ldr	r1, [pc, #132]	; (be14 <bt_mesh_trans_recv+0x29c>)
    bd90:	4b21      	ldr	r3, [pc, #132]	; (be18 <bt_mesh_trans_recv+0x2a0>)
		BT_WARN("Got segment for canceled SDU");
    bd92:	482b      	ldr	r0, [pc, #172]	; (be40 <bt_mesh_trans_recv+0x2c8>)
    bd94:	1ac9      	subs	r1, r1, r3
    bd96:	08c9      	lsrs	r1, r1, #3
    bd98:	0189      	lsls	r1, r1, #6
    bd9a:	f041 0102 	orr.w	r1, r1, #2
    bd9e:	e1d7      	b.n	c150 <bt_mesh_trans_recv+0x5d8>
	if (rpl && rpl->src && auth_seqnum <= rpl->seg &&
    bda0:	9b07      	ldr	r3, [sp, #28]
    bda2:	b1db      	cbz	r3, bddc <bt_mesh_trans_recv+0x264>
    bda4:	881a      	ldrh	r2, [r3, #0]
    bda6:	f3c2 020e 	ubfx	r2, r2, #0, #15
    bdaa:	b1ba      	cbz	r2, bddc <bt_mesh_trans_recv+0x264>
    bdac:	685a      	ldr	r2, [r3, #4]
    bdae:	9904      	ldr	r1, [sp, #16]
    bdb0:	ebb1 2f12 	cmp.w	r1, r2, lsr #8
    bdb4:	d812      	bhi.n	bddc <bt_mesh_trans_recv+0x264>
    bdb6:	f993 3001 	ldrsb.w	r3, [r3, #1]
    bdba:	2b00      	cmp	r3, #0
    bdbc:	da02      	bge.n	bdc4 <bt_mesh_trans_recv+0x24c>
	    (!rpl->old_iv || net_rx->old_iv)) {
    bdbe:	7d23      	ldrb	r3, [r4, #20]
    bdc0:	07db      	lsls	r3, r3, #31
    bdc2:	d50b      	bpl.n	bddc <bt_mesh_trans_recv+0x264>
    bdc4:	4b14      	ldr	r3, [pc, #80]	; (be18 <bt_mesh_trans_recv+0x2a0>)
    bdc6:	4a13      	ldr	r2, [pc, #76]	; (be14 <bt_mesh_trans_recv+0x29c>)
		BT_WARN("Ignoring old SeqAuth 0x%06x", auth_seqnum);
    bdc8:	9904      	ldr	r1, [sp, #16]
    bdca:	481e      	ldr	r0, [pc, #120]	; (be44 <bt_mesh_trans_recv+0x2cc>)
    bdcc:	1ad2      	subs	r2, r2, r3
    bdce:	08d2      	lsrs	r2, r2, #3
    bdd0:	0192      	lsls	r2, r2, #6
    bdd2:	f042 0202 	orr.w	r2, r2, #2
    bdd6:	f00d f819 	bl	18e0c <log_1>
    bdda:	e7c7      	b.n	bd6c <bt_mesh_trans_recv+0x1f4>
	return slab->num_blocks - slab->num_used;
    bddc:	4b1a      	ldr	r3, [pc, #104]	; (be48 <bt_mesh_trans_recv+0x2d0>)
	if (k_mem_slab_num_free_get(&segs) < 1) {
    bdde:	689a      	ldr	r2, [r3, #8]
    bde0:	699b      	ldr	r3, [r3, #24]
    bde2:	429a      	cmp	r2, r3
    bde4:	d136      	bne.n	be54 <bt_mesh_trans_recv+0x2dc>
    bde6:	490b      	ldr	r1, [pc, #44]	; (be14 <bt_mesh_trans_recv+0x29c>)
    bde8:	4b0b      	ldr	r3, [pc, #44]	; (be18 <bt_mesh_trans_recv+0x2a0>)
		BT_WARN("Not enough segments for incoming message");
    bdea:	4818      	ldr	r0, [pc, #96]	; (be4c <bt_mesh_trans_recv+0x2d4>)
    bdec:	1ac9      	subs	r1, r1, r3
    bdee:	08c9      	lsrs	r1, r1, #3
    bdf0:	0189      	lsls	r1, r1, #6
    bdf2:	f041 0102 	orr.w	r1, r1, #2
    bdf6:	f00c fffc 	bl	18df2 <log_0>
    bdfa:	4b07      	ldr	r3, [pc, #28]	; (be18 <bt_mesh_trans_recv+0x2a0>)
    bdfc:	4905      	ldr	r1, [pc, #20]	; (be14 <bt_mesh_trans_recv+0x29c>)
		BT_WARN("No free slots for new incoming segmented messages");
    bdfe:	4814      	ldr	r0, [pc, #80]	; (be50 <bt_mesh_trans_recv+0x2d8>)
    be00:	1ac9      	subs	r1, r1, r3
    be02:	08c9      	lsrs	r1, r1, #3
    be04:	0189      	lsls	r1, r1, #6
    be06:	f041 0102 	orr.w	r1, r1, #2
    be0a:	f00c fff2 	bl	18df2 <log_0>
		return -ENOMEM;
    be0e:	f06f 0a0b 	mvn.w	sl, #11
    be12:	e7ad      	b.n	bd70 <bt_mesh_trans_recv+0x1f8>
    be14:	0001e5d0 	.word	0x0001e5d0
    be18:	0001e408 	.word	0x0001e408
    be1c:	00020d1b 	.word	0x00020d1b
    be20:	00020d40 	.word	0x00020d40
    be24:	00020d69 	.word	0x00020d69
    be28:	200011d0 	.word	0x200011d0
    be2c:	20001238 	.word	0x20001238
    be30:	00020d8a 	.word	0x00020d8a
    be34:	00020e1a 	.word	0x00020e1a
    be38:	00020dbd 	.word	0x00020dbd
    be3c:	00020de1 	.word	0x00020de1
    be40:	00020dfd 	.word	0x00020dfd
    be44:	00020e36 	.word	0x00020e36
    be48:	20000b48 	.word	0x20000b48
    be4c:	00020e52 	.word	0x00020e52
    be50:	00020e7b 	.word	0x00020e7b
		if (rx->in_use) {
    be54:	7fe9      	ldrb	r1, [r5, #31]
    be56:	f011 0040 	ands.w	r0, r1, #64	; 0x40
    be5a:	d1ce      	bne.n	bdfa <bt_mesh_trans_recv+0x282>
		rx->sub = net_rx->sub;
    be5c:	6823      	ldr	r3, [r4, #0]
		rx->ctl = net_rx->ctl;
    be5e:	f894 c014 	ldrb.w	ip, [r4, #20]
		rx->sub = net_rx->sub;
    be62:	602b      	str	r3, [r5, #0]
		rx->seq_auth = *seq_auth;
    be64:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
		rx->ctl = net_rx->ctl;
    be68:	f3cc 0cc0 	ubfx	ip, ip, #3, #1
		rx->seg_n = seg_n;
    be6c:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
		rx->seq_auth = *seq_auth;
    be70:	e9c5 2304 	strd	r2, r3, [r5, #16]
		rx->seg_n = seg_n;
    be74:	ea4a 1a4c 	orr.w	sl, sl, ip, lsl #5
    be78:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
    be7c:	ea4a 0101 	orr.w	r1, sl, r1
    be80:	77e9      	strb	r1, [r5, #31]
		rx->hdr = *hdr;
    be82:	f899 3000 	ldrb.w	r3, [r9]
    be86:	77ab      	strb	r3, [r5, #30]
		rx->ttl = net_rx->ctx.send_ttl;
    be88:	7be3      	ldrb	r3, [r4, #15]
    be8a:	f885 3020 	strb.w	r3, [r5, #32]
		rx->src = net_rx->ctx.addr;
    be8e:	8923      	ldrh	r3, [r4, #8]
    be90:	832b      	strh	r3, [r5, #24]
		rx->dst = net_rx->ctx.recv_dst;
    be92:	8963      	ldrh	r3, [r4, #10]
    be94:	836b      	strh	r3, [r5, #26]
	rx->obo = net_rx->friend_match;
    be96:	7d23      	ldrb	r3, [r4, #20]
		rx->block = 0U;
    be98:	6268      	str	r0, [r5, #36]	; 0x24
	rx->obo = net_rx->friend_match;
    be9a:	b2ca      	uxtb	r2, r1
    be9c:	09db      	lsrs	r3, r3, #7
    be9e:	f363 12c7 	bfi	r2, r3, #7, #1
    bea2:	77ea      	strb	r2, [r5, #31]
	if (BIT(seg_o) & rx->block) {
    bea4:	f8df a2c0 	ldr.w	sl, [pc, #704]	; c168 <bt_mesh_trans_recv+0x5f0>
    bea8:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
    beac:	40f3      	lsrs	r3, r6
    beae:	f013 0301 	ands.w	r3, r3, #1
    beb2:	f47f af5b 	bne.w	bd6c <bt_mesh_trans_recv+0x1f4>
	if (seg_o == seg_n) {
    beb6:	f89a 101f 	ldrb.w	r1, [sl, #31]
    beba:	88b8      	ldrh	r0, [r7, #4]
    bebc:	4546      	cmp	r6, r8
    bebe:	f3c1 1140 	ubfx	r1, r1, #5, #1
    bec2:	d128      	bne.n	bf16 <bt_mesh_trans_recv+0x39e>
		return BT_MESH_APP_SEG_SDU_MAX;
    bec4:	2900      	cmp	r1, #0
    bec6:	bf14      	ite	ne
    bec8:	2208      	movne	r2, #8
    beca:	220c      	moveq	r2, #12
		rx->len = seg_n * seg_len(rx->ctl) + buf->len;
    becc:	fb02 0206 	mla	r2, r2, r6, r0
    bed0:	b292      	uxth	r2, r2
		if (rx->len > BT_MESH_RX_SDU_MAX) {
    bed2:	2a24      	cmp	r2, #36	; 0x24
		rx->len = seg_n * seg_len(rx->ctl) + buf->len;
    bed4:	f8aa 201c 	strh.w	r2, [sl, #28]
		if (rx->len > BT_MESH_RX_SDU_MAX) {
    bed8:	d92c      	bls.n	bf34 <bt_mesh_trans_recv+0x3bc>
    beda:	4a9f      	ldr	r2, [pc, #636]	; (c158 <bt_mesh_trans_recv+0x5e0>)
    bedc:	499f      	ldr	r1, [pc, #636]	; (c15c <bt_mesh_trans_recv+0x5e4>)
			BT_ERR("Too large SDU len");
    bede:	48a0      	ldr	r0, [pc, #640]	; (c160 <bt_mesh_trans_recv+0x5e8>)
    bee0:	9304      	str	r3, [sp, #16]
    bee2:	1a89      	subs	r1, r1, r2
    bee4:	08c9      	lsrs	r1, r1, #3
    bee6:	0189      	lsls	r1, r1, #6
    bee8:	f041 0101 	orr.w	r1, r1, #1
    beec:	f00c ff81 	bl	18df2 <log_0>
				 seq_auth, 0, rx->obo);
    bef0:	f89a 201f 	ldrb.w	r2, [sl, #31]
			send_ack(net_rx->sub, net_rx->ctx.recv_dst,
    bef4:	9b04      	ldr	r3, [sp, #16]
    bef6:	9301      	str	r3, [sp, #4]
    bef8:	09d2      	lsrs	r2, r2, #7
    befa:	ab08      	add	r3, sp, #32
    befc:	8961      	ldrh	r1, [r4, #10]
    befe:	9202      	str	r2, [sp, #8]
    bf00:	9300      	str	r3, [sp, #0]
    bf02:	8922      	ldrh	r2, [r4, #8]
    bf04:	7be3      	ldrb	r3, [r4, #15]
    bf06:	6820      	ldr	r0, [r4, #0]
    bf08:	f00f fc83 	bl	1b812 <send_ack>
			seg_rx_reset(rx, true);
    bf0c:	2101      	movs	r1, #1
    bf0e:	4650      	mov	r0, sl
    bf10:	f7ff f972 	bl	b1f8 <seg_rx_reset>
    bf14:	e6ed      	b.n	bcf2 <bt_mesh_trans_recv+0x17a>
		return BT_MESH_APP_SEG_SDU_MAX;
    bf16:	2900      	cmp	r1, #0
		if (buf->len != seg_len(rx->ctl)) {
    bf18:	bf14      	ite	ne
    bf1a:	2308      	movne	r3, #8
    bf1c:	230c      	moveq	r3, #12
    bf1e:	4283      	cmp	r3, r0
    bf20:	d008      	beq.n	bf34 <bt_mesh_trans_recv+0x3bc>
    bf22:	498e      	ldr	r1, [pc, #568]	; (c15c <bt_mesh_trans_recv+0x5e4>)
    bf24:	4b8c      	ldr	r3, [pc, #560]	; (c158 <bt_mesh_trans_recv+0x5e0>)
			BT_ERR("Incorrect segment size for message type");
    bf26:	488f      	ldr	r0, [pc, #572]	; (c164 <bt_mesh_trans_recv+0x5ec>)
    bf28:	1ac9      	subs	r1, r1, r3
    bf2a:	08c9      	lsrs	r1, r1, #3
    bf2c:	0189      	lsls	r1, r1, #6
    bf2e:	f041 0101 	orr.w	r1, r1, #1
    bf32:	e10d      	b.n	c150 <bt_mesh_trans_recv+0x5d8>
	return z_impl_k_uptime_ticks();
    bf34:	f011 fffa 	bl	1df2c <z_impl_k_uptime_ticks>
    bf38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    bf3c:	460a      	mov	r2, r1
    bf3e:	fba0 0103 	umull	r0, r1, r0, r3
    bf42:	fb03 1102 	mla	r1, r3, r2, r1
    bf46:	0bc3      	lsrs	r3, r0, #15
    bf48:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
	return (uint32_t)k_uptime_get();
    bf4c:	62ab      	str	r3, [r5, #40]	; 0x28
		int32_t timeout = ack_timeout(rx);
    bf4e:	4886      	ldr	r0, [pc, #536]	; (c168 <bt_mesh_trans_recv+0x5f0>)
    bf50:	f00f fba0 	bl	1b694 <ack_timeout>
    bf54:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
		k_work_schedule(&rx->ack, K_MSEC(timeout));
    bf58:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
    bf5c:	2100      	movs	r1, #0
    bf5e:	f240 30e7 	movw	r0, #999	; 0x3e7
    bf62:	fbce 010c 	smlal	r0, r1, lr, ip
    bf66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    bf6a:	2300      	movs	r3, #0
    bf6c:	f7f4 f8b8 	bl	e0 <__aeabi_uldivmod>
    bf70:	4602      	mov	r2, r0
    bf72:	460b      	mov	r3, r1
    bf74:	487d      	ldr	r0, [pc, #500]	; (c16c <bt_mesh_trans_recv+0x5f4>)
    bf76:	f00b fc09 	bl	1778c <k_work_schedule>
	err = k_mem_slab_alloc(&segs, &rx->seg[seg_o], K_NO_WAIT);
    bf7a:	1c71      	adds	r1, r6, #1
    bf7c:	487c      	ldr	r0, [pc, #496]	; (c170 <bt_mesh_trans_recv+0x5f8>)
    bf7e:	2200      	movs	r2, #0
    bf80:	2300      	movs	r3, #0
    bf82:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    bf86:	f00b f82d 	bl	16fe4 <k_mem_slab_alloc>
	if (err) {
    bf8a:	4682      	mov	sl, r0
    bf8c:	b168      	cbz	r0, bfaa <bt_mesh_trans_recv+0x432>
    bf8e:	4b72      	ldr	r3, [pc, #456]	; (c158 <bt_mesh_trans_recv+0x5e0>)
    bf90:	4a72      	ldr	r2, [pc, #456]	; (c15c <bt_mesh_trans_recv+0x5e4>)
		BT_WARN("Unable allocate buffer for Seg %u", seg_o);
    bf92:	4878      	ldr	r0, [pc, #480]	; (c174 <bt_mesh_trans_recv+0x5fc>)
    bf94:	1ad2      	subs	r2, r2, r3
    bf96:	08d2      	lsrs	r2, r2, #3
    bf98:	0192      	lsls	r2, r2, #6
    bf9a:	f042 0202 	orr.w	r2, r2, #2
    bf9e:	4631      	mov	r1, r6
    bfa0:	f00c ff34 	bl	18e0c <log_1>
		return -ENOBUFS;
    bfa4:	f06f 0a68 	mvn.w	sl, #104	; 0x68
    bfa8:	e6e2      	b.n	bd70 <bt_mesh_trans_recv+0x1f8>
	memcpy(rx->seg[seg_o], buf->data, buf->len);
    bfaa:	eb05 0386 	add.w	r3, r5, r6, lsl #2
    bfae:	88ba      	ldrh	r2, [r7, #4]
    bfb0:	6858      	ldr	r0, [r3, #4]
    bfb2:	6839      	ldr	r1, [r7, #0]
    bfb4:	f00d fdf6 	bl	19ba4 <memcpy>
	rx->block |= BIT(seg_o);
    bfb8:	2301      	movs	r3, #1
    bfba:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
    bfbc:	4498      	add	r8, r3
	rx->block |= BIT(seg_o);
    bfbe:	fa03 f606 	lsl.w	r6, r3, r6
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
    bfc2:	fa03 f308 	lsl.w	r3, r3, r8
	rx->block |= BIT(seg_o);
    bfc6:	4316      	orrs	r6, r2
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
    bfc8:	3b01      	subs	r3, #1
    bfca:	429e      	cmp	r6, r3
	rx->block |= BIT(seg_o);
    bfcc:	626e      	str	r6, [r5, #36]	; 0x24
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
    bfce:	f47f aecf 	bne.w	bd70 <bt_mesh_trans_recv+0x1f8>
	if (rpl) {
    bfd2:	9807      	ldr	r0, [sp, #28]
    bfd4:	b168      	cbz	r0, bff2 <bt_mesh_trans_recv+0x47a>
		bt_mesh_rpl_update(rpl, net_rx);
    bfd6:	4621      	mov	r1, r4
    bfd8:	f00f fc62 	bl	1b8a0 <bt_mesh_rpl_update>
		rpl->seg = MAX(rpl->seg, auth_seqnum);
    bfdc:	9907      	ldr	r1, [sp, #28]
    bfde:	9804      	ldr	r0, [sp, #16]
    bfe0:	684b      	ldr	r3, [r1, #4]
    bfe2:	f3c3 2217 	ubfx	r2, r3, #8, #24
    bfe6:	4282      	cmp	r2, r0
    bfe8:	bf38      	it	cc
    bfea:	4602      	movcc	r2, r0
    bfec:	f362 231f 	bfi	r3, r2, #8, #24
    bff0:	604b      	str	r3, [r1, #4]
	(void)k_work_cancel_delayable(&rx->ack);
    bff2:	4d5d      	ldr	r5, [pc, #372]	; (c168 <bt_mesh_trans_recv+0x5f0>)
    bff4:	f105 0030 	add.w	r0, r5, #48	; 0x30
    bff8:	f011 fdf1 	bl	1dbde <k_work_cancel_delayable>
		 net_rx->ctx.send_ttl, seq_auth, rx->block, rx->obo);
    bffc:	7feb      	ldrb	r3, [r5, #31]
	send_ack(net_rx->sub, net_rx->ctx.recv_dst, net_rx->ctx.addr,
    bffe:	8922      	ldrh	r2, [r4, #8]
    c000:	8961      	ldrh	r1, [r4, #10]
    c002:	6820      	ldr	r0, [r4, #0]
    c004:	09db      	lsrs	r3, r3, #7
    c006:	9302      	str	r3, [sp, #8]
    c008:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    c00a:	9301      	str	r3, [sp, #4]
    c00c:	f10d 0820 	add.w	r8, sp, #32
    c010:	7be3      	ldrb	r3, [r4, #15]
    c012:	f8cd 8000 	str.w	r8, [sp]
    c016:	f00f fbfc 	bl	1b812 <send_ack>
	if (net_rx->ctl) {
    c01a:	7d23      	ldrb	r3, [r4, #20]
    c01c:	f013 0f08 	tst.w	r3, #8
    c020:	462e      	mov	r6, r5
    c022:	d013      	beq.n	c04c <bt_mesh_trans_recv+0x4d4>
		NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_RX_CTL_MAX);
    c024:	ab0e      	add	r3, sp, #56	; 0x38
    c026:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
    c02a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		seg_rx_assemble(rx, &sdu, 0U);
    c02e:	a90b      	add	r1, sp, #44	; 0x2c
    c030:	2200      	movs	r2, #0
    c032:	4628      	mov	r0, r5
		NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_RX_CTL_MAX);
    c034:	930b      	str	r3, [sp, #44]	; 0x2c
		seg_rx_assemble(rx, &sdu, 0U);
    c036:	f00f fba8 	bl	1b78a <seg_rx_assemble>
		err = ctl_recv(net_rx, *hdr, &sdu, seq_auth);
    c03a:	f899 1000 	ldrb.w	r1, [r9]
    c03e:	4643      	mov	r3, r8
    c040:	aa0b      	add	r2, sp, #44	; 0x2c
    c042:	4620      	mov	r0, r4
    c044:	f7ff fa7e 	bl	b544 <ctl_recv>
		err = sdu_recv(net_rx, *hdr, ASZMIC(hdr), &seg_buf, &sdu, rx);
    c048:	4682      	mov	sl, r0
    c04a:	e014      	b.n	c076 <bt_mesh_trans_recv+0x4fe>
	} else if (rx->len < 1 + APP_MIC_LEN(ASZMIC(hdr))) {
    c04c:	f899 3001 	ldrb.w	r3, [r9, #1]
    c050:	8baa      	ldrh	r2, [r5, #28]
    c052:	09db      	lsrs	r3, r3, #7
    c054:	bf14      	ite	ne
    c056:	2309      	movne	r3, #9
    c058:	2305      	moveq	r3, #5
    c05a:	429a      	cmp	r2, r3
    c05c:	da10      	bge.n	c080 <bt_mesh_trans_recv+0x508>
    c05e:	4b3e      	ldr	r3, [pc, #248]	; (c158 <bt_mesh_trans_recv+0x5e0>)
    c060:	493e      	ldr	r1, [pc, #248]	; (c15c <bt_mesh_trans_recv+0x5e4>)
		BT_ERR("Too short SDU + MIC");
    c062:	4845      	ldr	r0, [pc, #276]	; (c178 <bt_mesh_trans_recv+0x600>)
    c064:	1ac9      	subs	r1, r1, r3
    c066:	08c9      	lsrs	r1, r1, #3
    c068:	0189      	lsls	r1, r1, #6
    c06a:	f041 0101 	orr.w	r1, r1, #1
    c06e:	f00c fec0 	bl	18df2 <log_0>
		err = -EINVAL;
    c072:	f06f 0a15 	mvn.w	sl, #21
	seg_rx_reset(rx, false);
    c076:	483c      	ldr	r0, [pc, #240]	; (c168 <bt_mesh_trans_recv+0x5f0>)
    c078:	2100      	movs	r1, #0
    c07a:	f7ff f8bd 	bl	b1f8 <seg_rx_reset>
	return err;
    c07e:	e677      	b.n	bd70 <bt_mesh_trans_recv+0x1f8>
	if (!buf->__buf) {
    c080:	4b3e      	ldr	r3, [pc, #248]	; (c17c <bt_mesh_trans_recv+0x604>)
    c082:	6899      	ldr	r1, [r3, #8]
    c084:	b911      	cbnz	r1, c08c <bt_mesh_trans_recv+0x514>
		buf->__buf = (uint8_t *)buf + sizeof(*buf);
    c086:	f103 010c 	add.w	r1, r3, #12
    c08a:	6099      	str	r1, [r3, #8]
	buf->data = buf->__buf + reserve_head;
    c08c:	6899      	ldr	r1, [r3, #8]
    c08e:	6019      	str	r1, [r3, #0]
	buf->len = 0U;
    c090:	2000      	movs	r0, #0
    c092:	8098      	strh	r0, [r3, #4]
			&sdu, seg_buf.data, rx->len - APP_MIC_LEN(ASZMIC(hdr)));
    c094:	f899 3001 	ldrb.w	r3, [r9, #1]
    c098:	09db      	lsrs	r3, r3, #7
    c09a:	bf14      	ite	ne
    c09c:	2308      	movne	r3, #8
    c09e:	2304      	moveq	r3, #4
		net_buf_simple_init_with_data(
    c0a0:	ad0e      	add	r5, sp, #56	; 0x38
    c0a2:	1ad2      	subs	r2, r2, r3
    c0a4:	4628      	mov	r0, r5
    c0a6:	f011 f8a4 	bl	1d1f2 <net_buf_simple_init_with_data>
		err = sdu_recv(net_rx, *hdr, ASZMIC(hdr), &seg_buf, &sdu, rx);
    c0aa:	f899 2001 	ldrb.w	r2, [r9, #1]
    c0ae:	f899 1000 	ldrb.w	r1, [r9]
    c0b2:	4b32      	ldr	r3, [pc, #200]	; (c17c <bt_mesh_trans_recv+0x604>)
    c0b4:	e9cd 5600 	strd	r5, r6, [sp]
    c0b8:	09d2      	lsrs	r2, r2, #7
    c0ba:	4620      	mov	r0, r4
    c0bc:	f7ff fd0c 	bl	bad8 <sdu_recv>
    c0c0:	e7c2      	b.n	c048 <bt_mesh_trans_recv+0x4d0>
	if (buf->len < 1) {
    c0c2:	f1bb 0f00 	cmp.w	fp, #0
    c0c6:	d108      	bne.n	c0da <bt_mesh_trans_recv+0x562>
    c0c8:	4924      	ldr	r1, [pc, #144]	; (c15c <bt_mesh_trans_recv+0x5e4>)
    c0ca:	4b23      	ldr	r3, [pc, #140]	; (c158 <bt_mesh_trans_recv+0x5e0>)
		BT_ERR("Too small unsegmented PDU");
    c0cc:	482c      	ldr	r0, [pc, #176]	; (c180 <bt_mesh_trans_recv+0x608>)
    c0ce:	1ac9      	subs	r1, r1, r3
    c0d0:	08c9      	lsrs	r1, r1, #3
    c0d2:	0189      	lsls	r1, r1, #6
    c0d4:	f041 0101 	orr.w	r1, r1, #1
    c0d8:	e03a      	b.n	c150 <bt_mesh_trans_recv+0x5d8>
	if (bt_mesh_rpl_check(rx, NULL)) {
    c0da:	2100      	movs	r1, #0
    c0dc:	4620      	mov	r0, r4
    c0de:	f000 f941 	bl	c364 <bt_mesh_rpl_check>
    c0e2:	2800      	cmp	r0, #0
    c0e4:	f47f ad85 	bne.w	bbf2 <bt_mesh_trans_recv+0x7a>
	hdr = net_buf_simple_pull_u8(buf);
    c0e8:	4638      	mov	r0, r7
    c0ea:	f011 f955 	bl	1d398 <net_buf_simple_pull_u8>
	if (rx->ctl) {
    c0ee:	7d22      	ldrb	r2, [r4, #20]
    c0f0:	f012 0208 	ands.w	r2, r2, #8
	hdr = net_buf_simple_pull_u8(buf);
    c0f4:	4601      	mov	r1, r0
	if (rx->ctl) {
    c0f6:	d006      	beq.n	c106 <bt_mesh_trans_recv+0x58e>
		return ctl_recv(rx, hdr, buf, seq_auth);
    c0f8:	ab08      	add	r3, sp, #32
    c0fa:	463a      	mov	r2, r7
    c0fc:	4620      	mov	r0, r4
    c0fe:	f7ff fa21 	bl	b544 <ctl_recv>
	return sdu_recv(rx, hdr, 0, buf, &sdu, NULL);
    c102:	4682      	mov	sl, r0
    c104:	e634      	b.n	bd70 <bt_mesh_trans_recv+0x1f8>
	if (buf->len < 1 + APP_MIC_LEN(0)) {
    c106:	88bb      	ldrh	r3, [r7, #4]
    c108:	2b04      	cmp	r3, #4
    c10a:	d808      	bhi.n	c11e <bt_mesh_trans_recv+0x5a6>
    c10c:	4913      	ldr	r1, [pc, #76]	; (c15c <bt_mesh_trans_recv+0x5e4>)
    c10e:	4b12      	ldr	r3, [pc, #72]	; (c158 <bt_mesh_trans_recv+0x5e0>)
		BT_ERR("Too short SDU + MIC");
    c110:	4819      	ldr	r0, [pc, #100]	; (c178 <bt_mesh_trans_recv+0x600>)
    c112:	1ac9      	subs	r1, r1, r3
    c114:	08c9      	lsrs	r1, r1, #3
    c116:	0189      	lsls	r1, r1, #6
    c118:	f041 0101 	orr.w	r1, r1, #1
    c11c:	e018      	b.n	c150 <bt_mesh_trans_recv+0x5d8>
	buf->len -= APP_MIC_LEN(0);
    c11e:	3b04      	subs	r3, #4
    c120:	80bb      	strh	r3, [r7, #4]
	return sdu_recv(rx, hdr, 0, buf, &sdu, NULL);
    c122:	4b18      	ldr	r3, [pc, #96]	; (c184 <bt_mesh_trans_recv+0x60c>)
    c124:	9300      	str	r3, [sp, #0]
    c126:	9201      	str	r2, [sp, #4]
    c128:	463b      	mov	r3, r7
    c12a:	4620      	mov	r0, r4
    c12c:	f7ff fcd4 	bl	bad8 <sdu_recv>
    c130:	e7e7      	b.n	c102 <bt_mesh_trans_recv+0x58a>
			return 0;
    c132:	4682      	mov	sl, r0
    c134:	e623      	b.n	bd7e <bt_mesh_trans_recv+0x206>
		if (rx->seq_auth > *seq_auth) {
    c136:	428b      	cmp	r3, r1
    c138:	bf08      	it	eq
    c13a:	4282      	cmpeq	r2, r0
    c13c:	f4bf addc 	bcs.w	bcf8 <bt_mesh_trans_recv+0x180>
    c140:	4906      	ldr	r1, [pc, #24]	; (c15c <bt_mesh_trans_recv+0x5e4>)
    c142:	4b05      	ldr	r3, [pc, #20]	; (c158 <bt_mesh_trans_recv+0x5e0>)
			BT_WARN("Ignoring old SeqAuth");
    c144:	4810      	ldr	r0, [pc, #64]	; (c188 <bt_mesh_trans_recv+0x610>)
    c146:	1ac9      	subs	r1, r1, r3
    c148:	08c9      	lsrs	r1, r1, #3
    c14a:	0189      	lsls	r1, r1, #6
    c14c:	f041 0102 	orr.w	r1, r1, #2
		BT_ERR("Too short SDU + MIC");
    c150:	f00c fe4f 	bl	18df2 <log_0>
		return -EINVAL;
    c154:	e545      	b.n	bbe2 <bt_mesh_trans_recv+0x6a>
    c156:	bf00      	nop
    c158:	0001e408 	.word	0x0001e408
    c15c:	0001e5d0 	.word	0x0001e5d0
    c160:	00020ead 	.word	0x00020ead
    c164:	00020ebf 	.word	0x00020ebf
    c168:	20001238 	.word	0x20001238
    c16c:	20001268 	.word	0x20001268
    c170:	20000b48 	.word	0x20000b48
    c174:	00020ee7 	.word	0x00020ee7
    c178:	00020f09 	.word	0x00020f09
    c17c:	2000048c 	.word	0x2000048c
    c180:	00020f1d 	.word	0x00020f1d
    c184:	20000480 	.word	0x20000480
    c188:	00020da8 	.word	0x00020da8

0000c18c <rpl_set>:
	}
}

static int rpl_set(const char *name, size_t len_rd,
		   settings_read_cb read_cb, void *cb_arg)
{
    c18c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    c190:	460d      	mov	r5, r1
    c192:	4617      	mov	r7, r2
    c194:	4698      	mov	r8, r3
	struct bt_mesh_rpl *entry;
	struct rpl_val rpl;
	int err;
	uint16_t src;

	if (!name) {
    c196:	b978      	cbnz	r0, c1b8 <rpl_set+0x2c>
    c198:	4b3a      	ldr	r3, [pc, #232]	; (c284 <rpl_set+0xf8>)
    c19a:	493b      	ldr	r1, [pc, #236]	; (c288 <rpl_set+0xfc>)
		BT_ERR("Insufficient number of arguments");
    c19c:	483b      	ldr	r0, [pc, #236]	; (c28c <rpl_set+0x100>)
    c19e:	1ac9      	subs	r1, r1, r3
    c1a0:	08c9      	lsrs	r1, r1, #3
    c1a2:	0189      	lsls	r1, r1, #6
    c1a4:	f041 0101 	orr.w	r1, r1, #1
    c1a8:	f00c fe23 	bl	18df2 <log_0>
		return -ENOENT;
    c1ac:	f06f 0501 	mvn.w	r5, #1

	BT_DBG("RPL entry for 0x%04x: Seq 0x%06x old_iv %u", entry->src,
	       entry->seq, entry->old_iv);

	return 0;
}
    c1b0:	4628      	mov	r0, r5
    c1b2:	b002      	add	sp, #8
    c1b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	src = strtol(name, NULL, 16);
    c1b8:	2210      	movs	r2, #16
    c1ba:	2100      	movs	r1, #0
    c1bc:	f00d fc24 	bl	19a08 <strtol>
		if (replay_list[i].src == src) {
    c1c0:	4a33      	ldr	r2, [pc, #204]	; (c290 <rpl_set+0x104>)
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    c1c2:	2300      	movs	r3, #0
    c1c4:	b281      	uxth	r1, r0
    c1c6:	4614      	mov	r4, r2
		if (replay_list[i].src == src) {
    c1c8:	f832 6033 	ldrh.w	r6, [r2, r3, lsl #3]
    c1cc:	f3c6 060e 	ubfx	r6, r6, #0, #15
    c1d0:	42b1      	cmp	r1, r6
    c1d2:	d117      	bne.n	c204 <rpl_set+0x78>
			return &replay_list[i];
    c1d4:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
	if (len_rd == 0) {
    c1d8:	b32d      	cbz	r5, c226 <rpl_set+0x9a>
	err = bt_mesh_settings_set(read_cb, cb_arg, &rpl, sizeof(rpl));
    c1da:	2304      	movs	r3, #4
    c1dc:	eb0d 0203 	add.w	r2, sp, r3
    c1e0:	4641      	mov	r1, r8
    c1e2:	4638      	mov	r0, r7
    c1e4:	f000 fee4 	bl	cfb0 <bt_mesh_settings_set>
	if (err) {
    c1e8:	4605      	mov	r5, r0
    c1ea:	2800      	cmp	r0, #0
    c1ec:	d03c      	beq.n	c268 <rpl_set+0xdc>
    c1ee:	4b25      	ldr	r3, [pc, #148]	; (c284 <rpl_set+0xf8>)
    c1f0:	4925      	ldr	r1, [pc, #148]	; (c288 <rpl_set+0xfc>)
		BT_ERR("Failed to set `net`");
    c1f2:	4828      	ldr	r0, [pc, #160]	; (c294 <rpl_set+0x108>)
    c1f4:	1ac9      	subs	r1, r1, r3
    c1f6:	08c9      	lsrs	r1, r1, #3
    c1f8:	0189      	lsls	r1, r1, #6
    c1fa:	f041 0101 	orr.w	r1, r1, #1
    c1fe:	f00c fdf8 	bl	18df2 <log_0>
		return err;
    c202:	e7d5      	b.n	c1b0 <rpl_set+0x24>
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    c204:	3301      	adds	r3, #1
    c206:	2b0a      	cmp	r3, #10
    c208:	d1de      	bne.n	c1c8 <rpl_set+0x3c>
	if (len_rd == 0) {
    c20a:	b195      	cbz	r5, c232 <rpl_set+0xa6>
    c20c:	2500      	movs	r5, #0
		if (!replay_list[i].src) {
    c20e:	f834 6035 	ldrh.w	r6, [r4, r5, lsl #3]
    c212:	f3c6 030e 	ubfx	r3, r6, #0, #15
    c216:	b9bb      	cbnz	r3, c248 <rpl_set+0xbc>
			replay_list[i].src = src;
    c218:	f360 060e 	bfi	r6, r0, #0, #15
    c21c:	f824 6035 	strh.w	r6, [r4, r5, lsl #3]
			return &replay_list[i];
    c220:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
		if (!entry) {
    c224:	e7d9      	b.n	c1da <rpl_set+0x4e>
			(void)memset(entry, 0, sizeof(*entry));
    c226:	2208      	movs	r2, #8
    c228:	4629      	mov	r1, r5
    c22a:	4620      	mov	r0, r4
    c22c:	f00d fce5 	bl	19bfa <memset>
    c230:	e7be      	b.n	c1b0 <rpl_set+0x24>
    c232:	4b14      	ldr	r3, [pc, #80]	; (c284 <rpl_set+0xf8>)
    c234:	4a14      	ldr	r2, [pc, #80]	; (c288 <rpl_set+0xfc>)
			BT_WARN("Unable to find RPL entry for 0x%04x", src);
    c236:	4818      	ldr	r0, [pc, #96]	; (c298 <rpl_set+0x10c>)
    c238:	1ad2      	subs	r2, r2, r3
    c23a:	08d2      	lsrs	r2, r2, #3
    c23c:	0192      	lsls	r2, r2, #6
    c23e:	f042 0202 	orr.w	r2, r2, #2
    c242:	f00c fde3 	bl	18e0c <log_1>
    c246:	e7b3      	b.n	c1b0 <rpl_set+0x24>
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    c248:	3501      	adds	r5, #1
    c24a:	2d0a      	cmp	r5, #10
    c24c:	d1df      	bne.n	c20e <rpl_set+0x82>
    c24e:	4b0d      	ldr	r3, [pc, #52]	; (c284 <rpl_set+0xf8>)
    c250:	4a0d      	ldr	r2, [pc, #52]	; (c288 <rpl_set+0xfc>)
			BT_ERR("Unable to allocate RPL entry for 0x%04x", src);
    c252:	4812      	ldr	r0, [pc, #72]	; (c29c <rpl_set+0x110>)
    c254:	1ad2      	subs	r2, r2, r3
    c256:	08d2      	lsrs	r2, r2, #3
    c258:	0192      	lsls	r2, r2, #6
    c25a:	f042 0201 	orr.w	r2, r2, #1
    c25e:	f00c fdd5 	bl	18e0c <log_1>
			return -ENOMEM;
    c262:	f06f 050b 	mvn.w	r5, #11
    c266:	e7a3      	b.n	c1b0 <rpl_set+0x24>
	entry->seq = rpl.seq;
    c268:	9b01      	ldr	r3, [sp, #4]
    c26a:	8063      	strh	r3, [r4, #2]
    c26c:	f3c3 4307 	ubfx	r3, r3, #16, #8
    c270:	7123      	strb	r3, [r4, #4]
	entry->old_iv = rpl.old_iv;
    c272:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c276:	7862      	ldrb	r2, [r4, #1]
    c278:	f3c3 0300 	ubfx	r3, r3, #0, #1
    c27c:	f363 12c7 	bfi	r2, r3, #7, #1
    c280:	7062      	strb	r2, [r4, #1]
	return 0;
    c282:	e795      	b.n	c1b0 <rpl_set+0x24>
    c284:	0001e408 	.word	0x0001e408
    c288:	0001e5c0 	.word	0x0001e5c0
    c28c:	0001f368 	.word	0x0001f368
    c290:	20001308 	.word	0x20001308
    c294:	00020f78 	.word	0x00020f78
    c298:	00020f54 	.word	0x00020f54
    c29c:	00020f8c 	.word	0x00020f8c

0000c2a0 <schedule_rpl_store.isra.0>:
	return rpl - &replay_list[0];
    c2a0:	4b0c      	ldr	r3, [pc, #48]	; (c2d4 <schedule_rpl_store.isra.0+0x34>)
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c2a2:	f3bf 8f5b 	dmb	ish
    c2a6:	1ac0      	subs	r0, r0, r3
    c2a8:	10c0      	asrs	r0, r0, #3
    c2aa:	4b0b      	ldr	r3, [pc, #44]	; (c2d8 <schedule_rpl_store.isra.0+0x38>)
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    c2ac:	0941      	lsrs	r1, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    c2ae:	2201      	movs	r2, #1
    c2b0:	f000 001f 	and.w	r0, r0, #31
    c2b4:	fa02 f000 	lsl.w	r0, r2, r0
    c2b8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    c2bc:	e853 2f00 	ldrex	r2, [r3]
    c2c0:	4302      	orrs	r2, r0
    c2c2:	e843 2100 	strex	r1, r2, [r3]
    c2c6:	2900      	cmp	r1, #0
    c2c8:	d1f8      	bne.n	c2bc <schedule_rpl_store.isra.0+0x1c>
    c2ca:	f3bf 8f5b 	dmb	ish
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_RPL_PENDING);
    c2ce:	2000      	movs	r0, #0
    c2d0:	f000 bea0 	b.w	d014 <bt_mesh_settings_store_schedule>
    c2d4:	20001308 	.word	0x20001308
    c2d8:	20001c00 	.word	0x20001c00

0000c2dc <clear_rpl.part.0>:
static void clear_rpl(struct bt_mesh_rpl *rpl)
    c2dc:	b510      	push	{r4, lr}
	snprintk(path, sizeof(path), "bt/mesh/RPL/%x", rpl->src);
    c2de:	8803      	ldrh	r3, [r0, #0]
    c2e0:	4a1a      	ldr	r2, [pc, #104]	; (c34c <clear_rpl.part.0+0x70>)
static void clear_rpl(struct bt_mesh_rpl *rpl)
    c2e2:	b086      	sub	sp, #24
    c2e4:	4604      	mov	r4, r0
	snprintk(path, sizeof(path), "bt/mesh/RPL/%x", rpl->src);
    c2e6:	f3c3 030e 	ubfx	r3, r3, #0, #15
    c2ea:	2112      	movs	r1, #18
    c2ec:	a801      	add	r0, sp, #4
    c2ee:	f00c f948 	bl	18582 <snprintk>
	err = settings_delete(path);
    c2f2:	a801      	add	r0, sp, #4
    c2f4:	f00d f8d0 	bl	19498 <settings_delete>
	if (err) {
    c2f8:	b148      	cbz	r0, c30e <clear_rpl.part.0+0x32>
    c2fa:	4915      	ldr	r1, [pc, #84]	; (c350 <clear_rpl.part.0+0x74>)
    c2fc:	4b15      	ldr	r3, [pc, #84]	; (c354 <clear_rpl.part.0+0x78>)
		BT_ERR("Failed to clear RPL");
    c2fe:	4816      	ldr	r0, [pc, #88]	; (c358 <clear_rpl.part.0+0x7c>)
    c300:	1ac9      	subs	r1, r1, r3
    c302:	08c9      	lsrs	r1, r1, #3
    c304:	0189      	lsls	r1, r1, #6
    c306:	f041 0101 	orr.w	r1, r1, #1
    c30a:	f00c fd72 	bl	18df2 <log_0>
	(void)memset(rpl, 0, sizeof(*rpl));
    c30e:	2208      	movs	r2, #8
    c310:	4620      	mov	r0, r4
    c312:	2100      	movs	r1, #0
    c314:	f00d fc71 	bl	19bfa <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c318:	f3bf 8f5b 	dmb	ish
	return rpl - &replay_list[0];
    c31c:	480f      	ldr	r0, [pc, #60]	; (c35c <clear_rpl.part.0+0x80>)
    c31e:	1a24      	subs	r4, r4, r0
    c320:	10e4      	asrs	r4, r4, #3
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    c322:	0962      	lsrs	r2, r4, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    c324:	2301      	movs	r3, #1
    c326:	f004 041f 	and.w	r4, r4, #31
    c32a:	fa03 f404 	lsl.w	r4, r3, r4
    c32e:	4b0c      	ldr	r3, [pc, #48]	; (c360 <clear_rpl.part.0+0x84>)
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    c330:	43e4      	mvns	r4, r4
    c332:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    c336:	e853 2f00 	ldrex	r2, [r3]
    c33a:	4022      	ands	r2, r4
    c33c:	e843 2100 	strex	r1, r2, [r3]
    c340:	2900      	cmp	r1, #0
    c342:	d1f8      	bne.n	c336 <clear_rpl.part.0+0x5a>
    c344:	f3bf 8f5b 	dmb	ish
}
    c348:	b006      	add	sp, #24
    c34a:	bd10      	pop	{r4, pc}
    c34c:	00020fb4 	.word	0x00020fb4
    c350:	0001e5c0 	.word	0x0001e5c0
    c354:	0001e408 	.word	0x0001e408
    c358:	00020fc3 	.word	0x00020fc3
    c35c:	20001308 	.word	0x20001308
    c360:	20001c00 	.word	0x20001c00

0000c364 <bt_mesh_rpl_check>:
{
    c364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
    c366:	7d06      	ldrb	r6, [r0, #20]
    c368:	f006 0330 	and.w	r3, r6, #48	; 0x30
    c36c:	2b10      	cmp	r3, #16
{
    c36e:	4605      	mov	r5, r0
    c370:	460c      	mov	r4, r1
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
    c372:	d00c      	beq.n	c38e <bt_mesh_rpl_check+0x2a>
	if (!rx->local_match) {
    c374:	f016 0040 	ands.w	r0, r6, #64	; 0x40
    c378:	d00a      	beq.n	c390 <bt_mesh_rpl_check+0x2c>
    c37a:	481d      	ldr	r0, [pc, #116]	; (c3f0 <bt_mesh_rpl_check+0x8c>)
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    c37c:	2200      	movs	r2, #0
    c37e:	4601      	mov	r1, r0
		if (!rpl->src) {
    c380:	f831 7032 	ldrh.w	r7, [r1, r2, lsl #3]
    c384:	f3c7 030e 	ubfx	r3, r7, #0, #15
    c388:	b91b      	cbnz	r3, c392 <bt_mesh_rpl_check+0x2e>
				if (match) {
    c38a:	b1ec      	cbz	r4, c3c8 <bt_mesh_rpl_check+0x64>
					*match = rpl;
    c38c:	6020      	str	r0, [r4, #0]
		return false;
    c38e:	2000      	movs	r0, #0
}
    c390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (rpl->src == rx->ctx.addr) {
    c392:	892b      	ldrh	r3, [r5, #8]
    c394:	f3c7 070e 	ubfx	r7, r7, #0, #15
    c398:	429f      	cmp	r7, r3
    c39a:	d119      	bne.n	c3d0 <bt_mesh_rpl_check+0x6c>
			if (rx->old_iv && !rpl->old_iv) {
    c39c:	00d7      	lsls	r7, r2, #3
    c39e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    c3a2:	f992 3001 	ldrsb.w	r3, [r2, #1]
    c3a6:	07f2      	lsls	r2, r6, #31
    c3a8:	d503      	bpl.n	c3b2 <bt_mesh_rpl_check+0x4e>
    c3aa:	2b00      	cmp	r3, #0
    c3ac:	db03      	blt.n	c3b6 <bt_mesh_rpl_check+0x52>
				return true;
    c3ae:	2001      	movs	r0, #1
    c3b0:	e7ee      	b.n	c390 <bt_mesh_rpl_check+0x2c>
			if ((!rx->old_iv && rpl->old_iv) ||
    c3b2:	2b00      	cmp	r3, #0
    c3b4:	dbe9      	blt.n	c38a <bt_mesh_rpl_check+0x26>
			    rpl->seq < rx->seq) {
    c3b6:	4439      	add	r1, r7
    c3b8:	790a      	ldrb	r2, [r1, #4]
    c3ba:	884b      	ldrh	r3, [r1, #2]
    c3bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
			if ((!rx->old_iv && rpl->old_iv) ||
    c3c0:	692a      	ldr	r2, [r5, #16]
    c3c2:	4293      	cmp	r3, r2
    c3c4:	d2f3      	bcs.n	c3ae <bt_mesh_rpl_check+0x4a>
    c3c6:	e7e0      	b.n	c38a <bt_mesh_rpl_check+0x26>
					bt_mesh_rpl_update(rpl, rx);
    c3c8:	4629      	mov	r1, r5
    c3ca:	f00f fa69 	bl	1b8a0 <bt_mesh_rpl_update>
    c3ce:	e7de      	b.n	c38e <bt_mesh_rpl_check+0x2a>
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    c3d0:	3201      	adds	r2, #1
    c3d2:	2a0a      	cmp	r2, #10
    c3d4:	f100 0008 	add.w	r0, r0, #8
    c3d8:	d1d2      	bne.n	c380 <bt_mesh_rpl_check+0x1c>
    c3da:	4b06      	ldr	r3, [pc, #24]	; (c3f4 <bt_mesh_rpl_check+0x90>)
    c3dc:	4906      	ldr	r1, [pc, #24]	; (c3f8 <bt_mesh_rpl_check+0x94>)
	BT_ERR("RPL is full!");
    c3de:	4807      	ldr	r0, [pc, #28]	; (c3fc <bt_mesh_rpl_check+0x98>)
    c3e0:	1ac9      	subs	r1, r1, r3
    c3e2:	08c9      	lsrs	r1, r1, #3
    c3e4:	0189      	lsls	r1, r1, #6
    c3e6:	f041 0101 	orr.w	r1, r1, #1
    c3ea:	f00c fd02 	bl	18df2 <log_0>
	return true;
    c3ee:	e7de      	b.n	c3ae <bt_mesh_rpl_check+0x4a>
    c3f0:	20001308 	.word	0x20001308
    c3f4:	0001e408 	.word	0x0001e408
    c3f8:	0001e5c0 	.word	0x0001e5c0
    c3fc:	00020fd7 	.word	0x00020fd7

0000c400 <bt_mesh_rpl_reset>:
{
    c400:	b538      	push	{r3, r4, r5, lr}
		if (rpl->src) {
    c402:	4d0d      	ldr	r5, [pc, #52]	; (c438 <bt_mesh_rpl_reset+0x38>)
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    c404:	2400      	movs	r4, #0
		if (rpl->src) {
    c406:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
    c40a:	f3c3 030e 	ubfx	r3, r3, #0, #15
    c40e:	b13b      	cbz	r3, c420 <bt_mesh_rpl_reset+0x20>
    c410:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
			if (rpl->old_iv) {
    c414:	f990 3001 	ldrsb.w	r3, [r0, #1]
    c418:	2b00      	cmp	r3, #0
    c41a:	da05      	bge.n	c428 <bt_mesh_rpl_reset+0x28>
	if (!rpl->src) {
    c41c:	f7ff ff5e 	bl	c2dc <clear_rpl.part.0>
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    c420:	3401      	adds	r4, #1
    c422:	2c0a      	cmp	r4, #10
    c424:	d1ef      	bne.n	c406 <bt_mesh_rpl_reset+0x6>
}
    c426:	bd38      	pop	{r3, r4, r5, pc}
				rpl->old_iv = true;
    c428:	7843      	ldrb	r3, [r0, #1]
    c42a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c42e:	7043      	strb	r3, [r0, #1]
					schedule_rpl_store(rpl, true);
    c430:	f7ff ff36 	bl	c2a0 <schedule_rpl_store.isra.0>
    c434:	e7f4      	b.n	c420 <bt_mesh_rpl_reset+0x20>
    c436:	bf00      	nop
    c438:	20001308 	.word	0x20001308

0000c43c <heartbeat_send.constprop.0>:
static void sub_end(struct k_work *work)
{
	notify_sub_end();
}

static int heartbeat_send(const struct bt_mesh_send_cb *cb, void *cb_data)
    c43c:	b530      	push	{r4, r5, lr}
	struct __packed {
		uint8_t init_ttl;
		uint16_t feat;
	} hb;
	struct bt_mesh_msg_ctx ctx = {
		.net_idx = pub.net_idx,
    c43e:	4c26      	ldr	r4, [pc, #152]	; (c4d8 <heartbeat_send.constprop.0+0x9c>)
static int heartbeat_send(const struct bt_mesh_send_cb *cb, void *cb_data)
    c440:	b08b      	sub	sp, #44	; 0x2c
	struct bt_mesh_msg_ctx ctx = {
    c442:	f64f 72ff 	movw	r2, #65535	; 0xffff
    c446:	f8ad 2012 	strh.w	r2, [sp, #18]
    c44a:	8822      	ldrh	r2, [r4, #0]
    c44c:	f8ad 2014 	strh.w	r2, [sp, #20]
    c450:	2300      	movs	r3, #0
    c452:	7922      	ldrb	r2, [r4, #4]
    c454:	f88d 201b 	strb.w	r2, [sp, #27]
static int heartbeat_send(const struct bt_mesh_send_cb *cb, void *cb_data)
    c458:	4605      	mov	r5, r0
		.net_idx = pub.net_idx,
    c45a:	8920      	ldrh	r0, [r4, #8]
	struct bt_mesh_msg_ctx ctx = {
    c45c:	f8cd 3016 	str.w	r3, [sp, #22]
		.app_idx = BT_MESH_KEY_UNUSED,
		.addr = pub.dst,
		.send_ttl = pub.ttl,
	};
	struct bt_mesh_net_tx tx = {
    c460:	e9cd 3307 	strd	r3, r3, [sp, #28]
	struct bt_mesh_msg_ctx ctx = {
    c464:	f88d 301a 	strb.w	r3, [sp, #26]
	struct bt_mesh_net_tx tx = {
    c468:	9309      	str	r3, [sp, #36]	; 0x24
	struct bt_mesh_msg_ctx ctx = {
    c46a:	f8ad 0010 	strh.w	r0, [sp, #16]
		.sub = bt_mesh_subnet_get(pub.net_idx),
    c46e:	f7fe fac9 	bl	aa04 <bt_mesh_subnet_get>
	struct bt_mesh_net_tx tx = {
    c472:	ab04      	add	r3, sp, #16
    c474:	9308      	str	r3, [sp, #32]
    c476:	9007      	str	r0, [sp, #28]
		.ctx = &ctx,
		.src = bt_mesh_primary_addr(),
    c478:	f000 fc2e 	bl	ccd8 <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
    c47c:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
		.xmit = bt_mesh_net_transmit_get(),
    c480:	f7fd f948 	bl	9714 <bt_mesh_net_transmit_get>
	struct bt_mesh_net_tx tx = {
    c484:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
	};

	/* Do nothing if heartbeat publication is not enabled or the subnet is
	 * removed.
	 */
	if (!tx.sub || pub.dst == BT_MESH_ADDR_UNASSIGNED) {
    c488:	9807      	ldr	r0, [sp, #28]
    c48a:	b310      	cbz	r0, c4d2 <heartbeat_send.constprop.0+0x96>
    c48c:	8820      	ldrh	r0, [r4, #0]
    c48e:	b300      	cbz	r0, c4d2 <heartbeat_send.constprop.0+0x96>
		return 0;
	}

	hb.init_ttl = pub.ttl;
    c490:	7923      	ldrb	r3, [r4, #4]
    c492:	f88d 300c 	strb.w	r3, [sp, #12]

	if (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED) {
    c496:	f7fd f9bf 	bl	9818 <bt_mesh_relay_get>
	uint16_t feat = 0U;
    c49a:	1e43      	subs	r3, r0, #1
    c49c:	425c      	negs	r4, r3
    c49e:	415c      	adcs	r4, r3
		feat |= BT_MESH_FEAT_RELAY;
	}

	if (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED) {
    c4a0:	f7fd f8f4 	bl	968c <bt_mesh_gatt_proxy_get>
    c4a4:	2801      	cmp	r0, #1
		feat |= BT_MESH_FEAT_PROXY;
    c4a6:	bf08      	it	eq
    c4a8:	f044 0402 	orreq.w	r4, r4, #2
	}

	if (bt_mesh_friend_get() == BT_MESH_FRIEND_ENABLED) {
    c4ac:	f00e ffdf 	bl	1b46e <bt_mesh_friend_get>
    c4b0:	2801      	cmp	r0, #1

	hb.feat = sys_cpu_to_be16(feat);

	BT_DBG("InitTTL %u feat 0x%04x", pub.ttl, feat);

	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
    c4b2:	f04f 0300 	mov.w	r3, #0
		feat |= BT_MESH_FEAT_FRIEND;
    c4b6:	bf08      	it	eq
    c4b8:	f044 0404 	orreq.w	r4, r4, #4
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
    c4bc:	e9cd 5300 	strd	r5, r3, [sp]
	hb.feat = sys_cpu_to_be16(feat);
    c4c0:	0224      	lsls	r4, r4, #8
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
    c4c2:	2303      	movs	r3, #3
    c4c4:	aa03      	add	r2, sp, #12
    c4c6:	210a      	movs	r1, #10
    c4c8:	a807      	add	r0, sp, #28
	hb.feat = sys_cpu_to_be16(feat);
    c4ca:	f8ad 400d 	strh.w	r4, [sp, #13]
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
    c4ce:	f7ff fa45 	bl	b95c <bt_mesh_ctl_send>
				cb, cb_data);
}
    c4d2:	b00b      	add	sp, #44	; 0x2c
    c4d4:	bd30      	pop	{r4, r5, pc}
    c4d6:	bf00      	nop
    c4d8:	20001c04 	.word	0x20001c04

0000c4dc <bt_mesh_hb_recv>:
int bt_mesh_hb_recv(struct bt_mesh_net_rx *rx, struct net_buf_simple *buf)
{
	uint8_t init_ttl, hops;
	uint16_t feat;

	if (buf->len < 3) {
    c4dc:	888b      	ldrh	r3, [r1, #4]
    c4de:	2b02      	cmp	r3, #2
{
    c4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c4e4:	4607      	mov	r7, r0
    c4e6:	460d      	mov	r5, r1
	if (buf->len < 3) {
    c4e8:	d80d      	bhi.n	c506 <bt_mesh_hb_recv+0x2a>
    c4ea:	4b2b      	ldr	r3, [pc, #172]	; (c598 <bt_mesh_hb_recv+0xbc>)
    c4ec:	492b      	ldr	r1, [pc, #172]	; (c59c <bt_mesh_hb_recv+0xc0>)
		BT_ERR("Too short heartbeat message");
    c4ee:	482c      	ldr	r0, [pc, #176]	; (c5a0 <bt_mesh_hb_recv+0xc4>)
    c4f0:	1ac9      	subs	r1, r1, r3
    c4f2:	08c9      	lsrs	r1, r1, #3
    c4f4:	0189      	lsls	r1, r1, #6
    c4f6:	f041 0101 	orr.w	r1, r1, #1
    c4fa:	f00c fc7a 	bl	18df2 <log_0>
		return -EINVAL;
    c4fe:	f06f 0015 	mvn.w	r0, #21
	       (hops == 1U) ? "" : "s", feat);

	notify_recv(hops, feat);

	return 0;
}
    c502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	init_ttl = (net_buf_simple_pull_u8(buf) & 0x7f);
    c506:	4608      	mov	r0, r1
    c508:	f010 ff46 	bl	1d398 <net_buf_simple_pull_u8>
	if (rx->ctx.addr != sub.src || rx->ctx.recv_dst != sub.dst) {
    c50c:	4e25      	ldr	r6, [pc, #148]	; (c5a4 <bt_mesh_hb_recv+0xc8>)
	init_ttl = (net_buf_simple_pull_u8(buf) & 0x7f);
    c50e:	4604      	mov	r4, r0
	feat = net_buf_simple_pull_be16(buf);
    c510:	4628      	mov	r0, r5
    c512:	f010 ff51 	bl	1d3b8 <net_buf_simple_pull_be16>
	if (rx->ctx.addr != sub.src || rx->ctx.recv_dst != sub.dst) {
    c516:	68ba      	ldr	r2, [r7, #8]
    c518:	68b3      	ldr	r3, [r6, #8]
    c51a:	429a      	cmp	r2, r3
	feat = net_buf_simple_pull_be16(buf);
    c51c:	4605      	mov	r5, r0
	if (rx->ctx.addr != sub.src || rx->ctx.recv_dst != sub.dst) {
    c51e:	d001      	beq.n	c524 <bt_mesh_hb_recv+0x48>
		return 0;
    c520:	2000      	movs	r0, #0
    c522:	e7ee      	b.n	c502 <bt_mesh_hb_recv+0x26>
	return k_work_delayable_busy_get(dwork) != 0;
    c524:	4820      	ldr	r0, [pc, #128]	; (c5a8 <bt_mesh_hb_recv+0xcc>)
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
    c526:	7b7f      	ldrb	r7, [r7, #13]
    c528:	f011 fb45 	bl	1dbb6 <k_work_delayable_busy_get>
	if (!k_work_delayable_is_pending(&sub_timer)) {
    c52c:	2800      	cmp	r0, #0
    c52e:	d0f7      	beq.n	c520 <bt_mesh_hb_recv+0x44>
	init_ttl = (net_buf_simple_pull_u8(buf) & 0x7f);
    c530:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
    c534:	1be4      	subs	r4, r4, r7
	sub.min_hops = MIN(sub.min_hops, hops);
    c536:	7bb3      	ldrb	r3, [r6, #14]
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
    c538:	3401      	adds	r4, #1
    c53a:	b2e4      	uxtb	r4, r4
	sub.min_hops = MIN(sub.min_hops, hops);
    c53c:	42a3      	cmp	r3, r4
    c53e:	bf28      	it	cs
    c540:	4623      	movcs	r3, r4
    c542:	73b3      	strb	r3, [r6, #14]
	sub.max_hops = MAX(sub.max_hops, hops);
    c544:	7bf3      	ldrb	r3, [r6, #15]
    c546:	42a3      	cmp	r3, r4
    c548:	bf38      	it	cc
    c54a:	4623      	movcc	r3, r4
    c54c:	73f3      	strb	r3, [r6, #15]
	if (sub.count < 0xffff) {
    c54e:	89b3      	ldrh	r3, [r6, #12]
    c550:	f64f 72ff 	movw	r2, #65535	; 0xffff
    c554:	4293      	cmp	r3, r2
		sub.count++;
    c556:	bf1c      	itt	ne
    c558:	3301      	addne	r3, #1
    c55a:	81b3      	strhne	r3, [r6, #12]
	if (sub.dst == BT_MESH_ADDR_UNASSIGNED) {
    c55c:	8973      	ldrh	r3, [r6, #10]
    c55e:	b15b      	cbz	r3, c578 <bt_mesh_hb_recv+0x9c>
	return z_timeout_remaining(&dwork->timeout);
    c560:	4812      	ldr	r0, [pc, #72]	; (c5ac <bt_mesh_hb_recv+0xd0>)
    c562:	f011 fca5 	bl	1deb0 <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
    c566:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c56a:	fba0 0102 	umull	r0, r1, r0, r2
    c56e:	0bc3      	lsrs	r3, r0, #15
    c570:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
	return rem_ms / MSEC_PER_SEC;
    c574:	fbb3 f3f2 	udiv	r3, r3, r2
	sub.remaining = sub_remaining();
    c578:	6073      	str	r3, [r6, #4]
	Z_STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
    c57a:	4f0d      	ldr	r7, [pc, #52]	; (c5b0 <bt_mesh_hb_recv+0xd4>)
    c57c:	4e0d      	ldr	r6, [pc, #52]	; (c5b4 <bt_mesh_hb_recv+0xd8>)
			cb->recv(&sub, hops, feat);
    c57e:	f8df 8024 	ldr.w	r8, [pc, #36]	; c5a4 <bt_mesh_hb_recv+0xc8>
	Z_STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
    c582:	42be      	cmp	r6, r7
    c584:	d2cc      	bcs.n	c520 <bt_mesh_hb_recv+0x44>
		if (cb->recv) {
    c586:	6833      	ldr	r3, [r6, #0]
    c588:	b11b      	cbz	r3, c592 <bt_mesh_hb_recv+0xb6>
			cb->recv(&sub, hops, feat);
    c58a:	462a      	mov	r2, r5
    c58c:	4621      	mov	r1, r4
    c58e:	4640      	mov	r0, r8
    c590:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
    c592:	3608      	adds	r6, #8
    c594:	e7f5      	b.n	c582 <bt_mesh_hb_recv+0xa6>
    c596:	bf00      	nop
    c598:	0001e408 	.word	0x0001e408
    c59c:	0001e560 	.word	0x0001e560
    c5a0:	00020ffc 	.word	0x00020ffc
    c5a4:	20001c14 	.word	0x20001c14
    c5a8:	20001388 	.word	0x20001388
    c5ac:	20001398 	.word	0x20001398
    c5b0:	0001e2b4 	.word	0x0001e2b4
    c5b4:	0001e2b4 	.word	0x0001e2b4

0000c5b8 <bt_mesh_hb_pub_set>:
	 */
	(void)k_work_cancel_delayable(&pub_timer);
}

uint8_t bt_mesh_hb_pub_set(struct bt_mesh_hb_pub *new_pub)
{
    c5b8:	b538      	push	{r3, r4, r5, lr}
	if (!new_pub || new_pub->dst == BT_MESH_ADDR_UNASSIGNED) {
    c5ba:	4604      	mov	r4, r0
    c5bc:	b108      	cbz	r0, c5c2 <bt_mesh_hb_pub_set+0xa>
    c5be:	8803      	ldrh	r3, [r0, #0]
    c5c0:	b97b      	cbnz	r3, c5e2 <bt_mesh_hb_pub_set+0x2a>
	pub.dst = BT_MESH_ADDR_UNASSIGNED;
    c5c2:	4b1a      	ldr	r3, [pc, #104]	; (c62c <bt_mesh_hb_pub_set+0x74>)
	(void)k_work_cancel_delayable(&pub_timer);
    c5c4:	481a      	ldr	r0, [pc, #104]	; (c630 <bt_mesh_hb_pub_set+0x78>)
	pub.dst = BT_MESH_ADDR_UNASSIGNED;
    c5c6:	2400      	movs	r4, #0
    c5c8:	601c      	str	r4, [r3, #0]
	pub.ttl = 0U;
    c5ca:	711c      	strb	r4, [r3, #4]
	pub.period = 0U;
    c5cc:	60dc      	str	r4, [r3, #12]
	(void)k_work_cancel_delayable(&pub_timer);
    c5ce:	f011 fb06 	bl	1dbde <k_work_cancel_delayable>
		pub_disable();

		if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
		    bt_mesh_is_provisioned()) {
    c5d2:	f7fc ff9b 	bl	950c <bt_mesh_is_provisioned>
		if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    c5d6:	b1a0      	cbz	r0, c602 <bt_mesh_hb_pub_set+0x4a>
	 * the work item.
	 */
	k_work_reschedule(&pub_timer, K_NO_WAIT);

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		bt_mesh_settings_store_schedule(
    c5d8:	2006      	movs	r0, #6
    c5da:	f000 fd1b 	bl	d014 <bt_mesh_settings_store_schedule>
					BT_MESH_SETTINGS_HB_PUB_PENDING);
	}

	return STATUS_SUCCESS;
    c5de:	2000      	movs	r0, #0
    c5e0:	e00f      	b.n	c602 <bt_mesh_hb_pub_set+0x4a>
	if (!bt_mesh_subnet_get(new_pub->net_idx)) {
    c5e2:	8900      	ldrh	r0, [r0, #8]
    c5e4:	f7fe fa0e 	bl	aa04 <bt_mesh_subnet_get>
    c5e8:	b960      	cbnz	r0, c604 <bt_mesh_hb_pub_set+0x4c>
    c5ea:	4b12      	ldr	r3, [pc, #72]	; (c634 <bt_mesh_hb_pub_set+0x7c>)
    c5ec:	4a12      	ldr	r2, [pc, #72]	; (c638 <bt_mesh_hb_pub_set+0x80>)
		BT_ERR("Unknown NetKey 0x%04x", new_pub->net_idx);
    c5ee:	4813      	ldr	r0, [pc, #76]	; (c63c <bt_mesh_hb_pub_set+0x84>)
    c5f0:	8921      	ldrh	r1, [r4, #8]
    c5f2:	1ad2      	subs	r2, r2, r3
    c5f4:	08d2      	lsrs	r2, r2, #3
    c5f6:	0192      	lsls	r2, r2, #6
    c5f8:	f042 0201 	orr.w	r2, r2, #1
    c5fc:	f00c fc06 	bl	18e0c <log_1>
		return STATUS_INVALID_NETKEY;
    c600:	2004      	movs	r0, #4
}
    c602:	bd38      	pop	{r3, r4, r5, pc}
	new_pub->feat &= BT_MESH_FEAT_SUPPORTED;
    c604:	88e3      	ldrh	r3, [r4, #6]
	pub = *new_pub;
    c606:	4d09      	ldr	r5, [pc, #36]	; (c62c <bt_mesh_hb_pub_set+0x74>)
	new_pub->feat &= BT_MESH_FEAT_SUPPORTED;
    c608:	f003 030f 	and.w	r3, r3, #15
    c60c:	80e3      	strh	r3, [r4, #6]
	pub = *new_pub;
    c60e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    c612:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	if (!bt_mesh_is_provisioned()) {
    c616:	f7fc ff79 	bl	950c <bt_mesh_is_provisioned>
    c61a:	2800      	cmp	r0, #0
    c61c:	d0df      	beq.n	c5de <bt_mesh_hb_pub_set+0x26>
	k_work_reschedule(&pub_timer, K_NO_WAIT);
    c61e:	2200      	movs	r2, #0
    c620:	2300      	movs	r3, #0
    c622:	4803      	ldr	r0, [pc, #12]	; (c630 <bt_mesh_hb_pub_set+0x78>)
    c624:	f00b f8e6 	bl	177f4 <k_work_reschedule>
    c628:	e7d6      	b.n	c5d8 <bt_mesh_hb_pub_set+0x20>
    c62a:	bf00      	nop
    c62c:	20001c04 	.word	0x20001c04
    c630:	20001358 	.word	0x20001358
    c634:	0001e408 	.word	0x0001e408
    c638:	0001e560 	.word	0x0001e560
    c63c:	00021018 	.word	0x00021018

0000c640 <hb_pub_set>:
	}
}

static int hb_pub_set(const char *name, size_t len_rd,
		      settings_read_cb read_cb, void *cb_arg)
{
    c640:	b510      	push	{r4, lr}
    c642:	b086      	sub	sp, #24
    c644:	4610      	mov	r0, r2
    c646:	4619      	mov	r1, r3
	struct bt_mesh_hb_pub pub;
	struct hb_pub_val hb_val;
	int err;

	err = bt_mesh_settings_set(read_cb, cb_arg, &hb_val, sizeof(hb_val));
    c648:	466a      	mov	r2, sp
    c64a:	2308      	movs	r3, #8
    c64c:	f000 fcb0 	bl	cfb0 <bt_mesh_settings_set>
	if (err) {
    c650:	4604      	mov	r4, r0
    c652:	b160      	cbz	r0, c66e <hb_pub_set+0x2e>
    c654:	491c      	ldr	r1, [pc, #112]	; (c6c8 <hb_pub_set+0x88>)
    c656:	4b1d      	ldr	r3, [pc, #116]	; (c6cc <hb_pub_set+0x8c>)
		BT_ERR("Failed to set \'hb_val\'");
    c658:	481d      	ldr	r0, [pc, #116]	; (c6d0 <hb_pub_set+0x90>)
    c65a:	1ac9      	subs	r1, r1, r3
    c65c:	08c9      	lsrs	r1, r1, #3
    c65e:	0189      	lsls	r1, r1, #6
    c660:	f041 0101 	orr.w	r1, r1, #1
    c664:	f00c fbc5 	bl	18df2 <log_0>
	(void)bt_mesh_hb_pub_set(&pub);

	BT_DBG("Restored heartbeat publication");

	return 0;
}
    c668:	4620      	mov	r0, r4
    c66a:	b006      	add	sp, #24
    c66c:	bd10      	pop	{r4, pc}
	pub.period = bt_mesh_hb_pwr2(hb_val.period);
    c66e:	f89d 2002 	ldrb.w	r2, [sp, #2]
	pub.dst = hb_val.dst;
    c672:	f8bd 3000 	ldrh.w	r3, [sp]
    c676:	f8ad 3008 	strh.w	r3, [sp, #8]
 * SPDX-License-Identifier: Apache-2.0
 */

static inline uint16_t bt_mesh_hb_pwr2(uint8_t val)
{
	if (!val) {
    c67a:	b302      	cbz	r2, c6be <hb_pub_set+0x7e>
		return 0x0000;
	} else if (val == 0xff || val == 0x11) {
    c67c:	2aff      	cmp	r2, #255	; 0xff
    c67e:	d020      	beq.n	c6c2 <hb_pub_set+0x82>
    c680:	2a11      	cmp	r2, #17
    c682:	d01e      	beq.n	c6c2 <hb_pub_set+0x82>
		return 0xffff;
	} else {
		return (1 << (val - 1));
    c684:	3a01      	subs	r2, #1
    c686:	2301      	movs	r3, #1
    c688:	4093      	lsls	r3, r2
    c68a:	b29b      	uxth	r3, r3
	pub.period = bt_mesh_hb_pwr2(hb_val.period);
    c68c:	9305      	str	r3, [sp, #20]
	pub.ttl = hb_val.ttl;
    c68e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c692:	f88d 300c 	strb.w	r3, [sp, #12]
	pub.feat = hb_val.feat;
    c696:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    c69a:	f8ad 300e 	strh.w	r3, [sp, #14]
	pub.net_idx = hb_val.net_idx;
    c69e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    c6a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    c6a6:	f8ad 3010 	strh.w	r3, [sp, #16]
	if (hb_val.indefinite) {
    c6aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
	(void)bt_mesh_hb_pub_set(&pub);
    c6ae:	a802      	add	r0, sp, #8
	if (hb_val.indefinite) {
    c6b0:	f343 1300 	sbfx	r3, r3, #4, #1
    c6b4:	f8ad 300a 	strh.w	r3, [sp, #10]
	(void)bt_mesh_hb_pub_set(&pub);
    c6b8:	f7ff ff7e 	bl	c5b8 <bt_mesh_hb_pub_set>
	return 0;
    c6bc:	e7d4      	b.n	c668 <hb_pub_set+0x28>
		return 0x0000;
    c6be:	4603      	mov	r3, r0
    c6c0:	e7e4      	b.n	c68c <hb_pub_set+0x4c>
		return 0xffff;
    c6c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c6c6:	e7e1      	b.n	c68c <hb_pub_set+0x4c>
    c6c8:	0001e560 	.word	0x0001e560
    c6cc:	0001e408 	.word	0x0001e408
    c6d0:	0002102e 	.word	0x0002102e

0000c6d4 <bt_mesh_hb_feature_changed>:
	if (pub.dst == BT_MESH_ADDR_UNASSIGNED) {
    c6d4:	4b04      	ldr	r3, [pc, #16]	; (c6e8 <bt_mesh_hb_feature_changed+0x14>)
    c6d6:	881a      	ldrh	r2, [r3, #0]
    c6d8:	b12a      	cbz	r2, c6e6 <bt_mesh_hb_feature_changed+0x12>
	if (!(pub.feat & features)) {
    c6da:	88db      	ldrh	r3, [r3, #6]
    c6dc:	4218      	tst	r0, r3
    c6de:	d002      	beq.n	c6e6 <bt_mesh_hb_feature_changed+0x12>
	heartbeat_send(NULL, NULL);
    c6e0:	2000      	movs	r0, #0
    c6e2:	f7ff beab 	b.w	c43c <heartbeat_send.constprop.0>
}
    c6e6:	4770      	bx	lr
    c6e8:	20001c04 	.word	0x20001c04

0000c6ec <bt_mesh_hb_start>:
	if (pub.count && pub.period) {
    c6ec:	4b05      	ldr	r3, [pc, #20]	; (c704 <bt_mesh_hb_start+0x18>)
    c6ee:	885a      	ldrh	r2, [r3, #2]
    c6f0:	b132      	cbz	r2, c700 <bt_mesh_hb_start+0x14>
    c6f2:	68db      	ldr	r3, [r3, #12]
    c6f4:	b123      	cbz	r3, c700 <bt_mesh_hb_start+0x14>
		k_work_reschedule(&pub_timer, K_NO_WAIT);
    c6f6:	4804      	ldr	r0, [pc, #16]	; (c708 <bt_mesh_hb_start+0x1c>)
    c6f8:	2200      	movs	r2, #0
    c6fa:	2300      	movs	r3, #0
    c6fc:	f00b b87a 	b.w	177f4 <k_work_reschedule>
}
    c700:	4770      	bx	lr
    c702:	bf00      	nop
    c704:	20001c04 	.word	0x20001c04
    c708:	20001358 	.word	0x20001358

0000c70c <bt_mesh_k2>:
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
}

int bt_mesh_k2(const uint8_t n[16], const uint8_t *p, size_t p_len,
	       uint8_t net_id[1], uint8_t enc_key[16], uint8_t priv_key[16])
{
    c70c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c70e:	b095      	sub	sp, #84	; 0x54
    c710:	4604      	mov	r4, r0
    c712:	460f      	mov	r7, r1
	int err;

	BT_DBG("n %s", bt_hex(n, 16));
	BT_DBG("p %s", bt_hex(p, p_len));

	err = bt_mesh_s1("smk2", salt);
    c714:	4828      	ldr	r0, [pc, #160]	; (c7b8 <bt_mesh_k2+0xac>)
    c716:	a902      	add	r1, sp, #8
{
    c718:	4615      	mov	r5, r2
    c71a:	461e      	mov	r6, r3
	err = bt_mesh_s1("smk2", salt);
    c71c:	f00f f933 	bl	1b986 <bt_mesh_s1>
	if (err) {
    c720:	2800      	cmp	r0, #0
    c722:	d146      	bne.n	c7b2 <bt_mesh_k2+0xa6>
		return err;
	}

	err = bt_mesh_aes_cmac_one(salt, n, 16, t);
    c724:	4621      	mov	r1, r4
    c726:	ab0a      	add	r3, sp, #40	; 0x28
    c728:	2210      	movs	r2, #16
    c72a:	a802      	add	r0, sp, #8
    c72c:	f00f f921 	bl	1b972 <bt_mesh_aes_cmac_one>
	if (err) {
    c730:	4604      	mov	r4, r0
    c732:	2800      	cmp	r0, #0
    c734:	d13a      	bne.n	c7ac <bt_mesh_k2+0xa0>
		return err;
	}

	pad = 0x01;
    c736:	2301      	movs	r3, #1

	sg[0].data = NULL;
	sg[0].len  = 0;
	sg[1].data = p;
	sg[1].len  = p_len;
    c738:	e9cd 7510 	strd	r7, r5, [sp, #64]	; 0x40
	sg[2].data = &pad;
    c73c:	f10d 0207 	add.w	r2, sp, #7
	sg[2].len  = sizeof(pad);

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    c740:	ad06      	add	r5, sp, #24
	sg[2].len  = sizeof(pad);
    c742:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	sg[0].len  = 0;
    c746:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
	pad = 0x01;
    c74a:	f88d 3007 	strb.w	r3, [sp, #7]
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    c74e:	2203      	movs	r2, #3
    c750:	462b      	mov	r3, r5
    c752:	a90e      	add	r1, sp, #56	; 0x38
    c754:	a80a      	add	r0, sp, #40	; 0x28
    c756:	f00f f8ea 	bl	1b92e <bt_mesh_aes_cmac>
	if (err) {
    c75a:	4604      	mov	r4, r0
    c75c:	bb30      	cbnz	r0, c7ac <bt_mesh_k2+0xa0>
		return err;
	}

	net_id[0] = out[15] & 0x7f;
    c75e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27

	sg[0].data = out;
    c762:	950e      	str	r5, [sp, #56]	; 0x38
	net_id[0] = out[15] & 0x7f;
    c764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    c768:	7033      	strb	r3, [r6, #0]
	sg[0].len  = sizeof(out);
	pad = 0x02;
    c76a:	2302      	movs	r3, #2
    c76c:	f88d 3007 	strb.w	r3, [sp, #7]
	sg[0].len  = sizeof(out);
    c770:	2610      	movs	r6, #16

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    c772:	462b      	mov	r3, r5
    c774:	2203      	movs	r2, #3
    c776:	a90e      	add	r1, sp, #56	; 0x38
    c778:	a80a      	add	r0, sp, #40	; 0x28
	sg[0].len  = sizeof(out);
    c77a:	960f      	str	r6, [sp, #60]	; 0x3c
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    c77c:	f00f f8d7 	bl	1b92e <bt_mesh_aes_cmac>
	if (err) {
    c780:	4604      	mov	r4, r0
    c782:	b998      	cbnz	r0, c7ac <bt_mesh_k2+0xa0>
		return err;
	}

	memcpy(enc_key, out, 16);
    c784:	4632      	mov	r2, r6
    c786:	4629      	mov	r1, r5
    c788:	981a      	ldr	r0, [sp, #104]	; 0x68
    c78a:	f00d fa0b 	bl	19ba4 <memcpy>

	pad = 0x03;
    c78e:	2203      	movs	r2, #3

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    c790:	462b      	mov	r3, r5
    c792:	a90e      	add	r1, sp, #56	; 0x38
    c794:	a80a      	add	r0, sp, #40	; 0x28
	pad = 0x03;
    c796:	f88d 2007 	strb.w	r2, [sp, #7]
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    c79a:	f00f f8c8 	bl	1b92e <bt_mesh_aes_cmac>
	if (err) {
    c79e:	4604      	mov	r4, r0
    c7a0:	b920      	cbnz	r0, c7ac <bt_mesh_k2+0xa0>
		return err;
	}

	memcpy(priv_key, out, 16);
    c7a2:	981b      	ldr	r0, [sp, #108]	; 0x6c
    c7a4:	4632      	mov	r2, r6
    c7a6:	4629      	mov	r1, r5
    c7a8:	f00d f9fc 	bl	19ba4 <memcpy>

	BT_DBG("NID 0x%02x enc_key %s", net_id[0], bt_hex(enc_key, 16));
	BT_DBG("priv_key %s", bt_hex(priv_key, 16));

	return 0;
}
    c7ac:	4620      	mov	r0, r4
    c7ae:	b015      	add	sp, #84	; 0x54
    c7b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return err;
    c7b2:	2401      	movs	r4, #1
    c7b4:	e7fa      	b.n	c7ac <bt_mesh_k2+0xa0>
    c7b6:	bf00      	nop
    c7b8:	00021084 	.word	0x00021084

0000c7bc <bt_mesh_k3>:

int bt_mesh_k3(const uint8_t n[16], uint8_t out[8])
{
    c7bc:	b530      	push	{r4, r5, lr}
	uint8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
    c7be:	4b14      	ldr	r3, [pc, #80]	; (c810 <bt_mesh_k3+0x54>)
{
    c7c0:	b08b      	sub	sp, #44	; 0x2c
    c7c2:	4604      	mov	r4, r0
	uint8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
    c7c4:	6818      	ldr	r0, [r3, #0]
    c7c6:	9000      	str	r0, [sp, #0]
    c7c8:	791b      	ldrb	r3, [r3, #4]
	uint8_t tmp[16];
	uint8_t t[16];
	int err;

	err = bt_mesh_s1("smk3", tmp);
    c7ca:	4812      	ldr	r0, [pc, #72]	; (c814 <bt_mesh_k3+0x58>)
	uint8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
    c7cc:	f88d 3004 	strb.w	r3, [sp, #4]
{
    c7d0:	460d      	mov	r5, r1
	err = bt_mesh_s1("smk3", tmp);
    c7d2:	a902      	add	r1, sp, #8
    c7d4:	f00f f8d7 	bl	1b986 <bt_mesh_s1>
	if (err) {
    c7d8:	b9b8      	cbnz	r0, c80a <bt_mesh_k3+0x4e>
		return err;
	}

	err = bt_mesh_aes_cmac_one(tmp, n, 16, t);
    c7da:	4621      	mov	r1, r4
    c7dc:	ab06      	add	r3, sp, #24
    c7de:	2210      	movs	r2, #16
    c7e0:	a802      	add	r0, sp, #8
    c7e2:	f00f f8c6 	bl	1b972 <bt_mesh_aes_cmac_one>
	if (err) {
    c7e6:	4604      	mov	r4, r0
    c7e8:	b960      	cbnz	r0, c804 <bt_mesh_k3+0x48>
		return err;
	}

	err = bt_mesh_aes_cmac_one(t, id64, sizeof(id64), tmp);
    c7ea:	ab02      	add	r3, sp, #8
    c7ec:	2205      	movs	r2, #5
    c7ee:	4669      	mov	r1, sp
    c7f0:	a806      	add	r0, sp, #24
    c7f2:	f00f f8be 	bl	1b972 <bt_mesh_aes_cmac_one>
	if (err) {
    c7f6:	4604      	mov	r4, r0
    c7f8:	b920      	cbnz	r0, c804 <bt_mesh_k3+0x48>
		return err;
	}

	memcpy(out, tmp + 8, 8);
    c7fa:	2208      	movs	r2, #8
    c7fc:	a904      	add	r1, sp, #16
    c7fe:	4628      	mov	r0, r5
    c800:	f00d f9d0 	bl	19ba4 <memcpy>

	return 0;
}
    c804:	4620      	mov	r0, r4
    c806:	b00b      	add	sp, #44	; 0x2c
    c808:	bd30      	pop	{r4, r5, pc}
		return err;
    c80a:	2401      	movs	r4, #1
    c80c:	e7fa      	b.n	c804 <bt_mesh_k3+0x48>
    c80e:	bf00      	nop
    c810:	0002108e 	.word	0x0002108e
    c814:	00021089 	.word	0x00021089

0000c818 <bt_mesh_k4>:

int bt_mesh_k4(const uint8_t n[16], uint8_t out[1])
{
    c818:	b530      	push	{r4, r5, lr}
    c81a:	b08b      	sub	sp, #44	; 0x2c
	uint8_t id6[] = { 'i', 'd', '6', 0x01 };
    c81c:	4b10      	ldr	r3, [pc, #64]	; (c860 <bt_mesh_k4+0x48>)
    c81e:	9301      	str	r3, [sp, #4]
{
    c820:	4605      	mov	r5, r0
    c822:	460c      	mov	r4, r1
	uint8_t tmp[16];
	uint8_t t[16];
	int err;

	err = bt_mesh_s1("smk4", tmp);
    c824:	480f      	ldr	r0, [pc, #60]	; (c864 <bt_mesh_k4+0x4c>)
    c826:	a902      	add	r1, sp, #8
    c828:	f00f f8ad 	bl	1b986 <bt_mesh_s1>
	if (err) {
    c82c:	b9a8      	cbnz	r0, c85a <bt_mesh_k4+0x42>
		return err;
	}

	err = bt_mesh_aes_cmac_one(tmp, n, 16, t);
    c82e:	ab06      	add	r3, sp, #24
    c830:	2210      	movs	r2, #16
    c832:	4629      	mov	r1, r5
    c834:	a802      	add	r0, sp, #8
    c836:	f00f f89c 	bl	1b972 <bt_mesh_aes_cmac_one>
	if (err) {
    c83a:	b960      	cbnz	r0, c856 <bt_mesh_k4+0x3e>
		return err;
	}

	err = bt_mesh_aes_cmac_one(t, id6, sizeof(id6), tmp);
    c83c:	2204      	movs	r2, #4
    c83e:	ab02      	add	r3, sp, #8
    c840:	eb0d 0102 	add.w	r1, sp, r2
    c844:	a806      	add	r0, sp, #24
    c846:	f00f f894 	bl	1b972 <bt_mesh_aes_cmac_one>
	if (err) {
    c84a:	b920      	cbnz	r0, c856 <bt_mesh_k4+0x3e>
		return err;
	}

	out[0] = tmp[15] & BIT_MASK(6);
    c84c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c850:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c854:	7023      	strb	r3, [r4, #0]

	return 0;
}
    c856:	b00b      	add	sp, #44	; 0x2c
    c858:	bd30      	pop	{r4, r5, pc}
		return err;
    c85a:	2001      	movs	r0, #1
    c85c:	e7fb      	b.n	c856 <bt_mesh_k4+0x3e>
    c85e:	bf00      	nop
    c860:	01366469 	.word	0x01366469
    c864:	00021094 	.word	0x00021094

0000c868 <bt_mesh_id128>:

int bt_mesh_id128(const uint8_t n[16], const char *s, uint8_t out[16])
{
    c868:	b530      	push	{r4, r5, lr}
    c86a:	b087      	sub	sp, #28
    c86c:	4604      	mov	r4, r0
    c86e:	4608      	mov	r0, r1
	const char *id128 = "id128\x01";
	uint8_t salt[16];
	int err;

	err = bt_mesh_s1(s, salt);
    c870:	a902      	add	r1, sp, #8
{
    c872:	4615      	mov	r5, r2
	err = bt_mesh_s1(s, salt);
    c874:	f00f f887 	bl	1b986 <bt_mesh_s1>
	if (err) {
    c878:	b940      	cbnz	r0, c88c <bt_mesh_id128+0x24>
		return err;
	}

	return bt_mesh_k1(n, 16, salt, id128, out);
    c87a:	4b05      	ldr	r3, [pc, #20]	; (c890 <bt_mesh_id128+0x28>)
    c87c:	9500      	str	r5, [sp, #0]
    c87e:	aa02      	add	r2, sp, #8
    c880:	2110      	movs	r1, #16
    c882:	4620      	mov	r0, r4
    c884:	f00f f895 	bl	1b9b2 <bt_mesh_k1>
}
    c888:	b007      	add	sp, #28
    c88a:	bd30      	pop	{r4, r5, pc}
		return err;
    c88c:	2001      	movs	r0, #1
    c88e:	e7fb      	b.n	c888 <bt_mesh_id128+0x20>
    c890:	00021099 	.word	0x00021099

0000c894 <bt_mesh_net_obfuscate>:
	sys_put_be32(iv_index, &nonce[9]);
}

int bt_mesh_net_obfuscate(uint8_t *pdu, uint32_t iv_index,
			  const uint8_t privacy_key[16])
{
    c894:	b570      	push	{r4, r5, r6, lr}
	uint8_t priv_rand[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, };
    c896:	4b18      	ldr	r3, [pc, #96]	; (c8f8 <bt_mesh_net_obfuscate+0x64>)
{
    c898:	b088      	sub	sp, #32
    c89a:	4604      	mov	r4, r0
    c89c:	460e      	mov	r6, r1
	uint8_t priv_rand[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, };
    c89e:	6818      	ldr	r0, [r3, #0]
    c8a0:	889b      	ldrh	r3, [r3, #4]
    c8a2:	9000      	str	r0, [sp, #0]
    c8a4:	f8ad 3004 	strh.w	r3, [sp, #4]
	uint8_t tmp[16];
	int err, i;

	BT_DBG("IVIndex %u, PrivacyKey %s", iv_index, bt_hex(privacy_key, 16));

	sys_put_be32(iv_index, &priv_rand[5]);
    c8a8:	f10d 0105 	add.w	r1, sp, #5
	uint8_t priv_rand[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, };
    c8ac:	2300      	movs	r3, #0
	sys_put_be32(iv_index, &priv_rand[5]);
    c8ae:	4630      	mov	r0, r6
{
    c8b0:	4615      	mov	r5, r2
	uint8_t priv_rand[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, };
    c8b2:	f8cd 3006 	str.w	r3, [sp, #6]
    c8b6:	f8cd 300a 	str.w	r3, [sp, #10]
    c8ba:	f8ad 300e 	strh.w	r3, [sp, #14]
	sys_put_be32(iv_index, &priv_rand[5]);
    c8be:	f00f f80d 	bl	1b8dc <sys_put_be32>
	memcpy(&priv_rand[9], &pdu[7], 7);
    c8c2:	2207      	movs	r2, #7
    c8c4:	18a1      	adds	r1, r4, r2
    c8c6:	f10d 0009 	add.w	r0, sp, #9
    c8ca:	f00d f96b 	bl	19ba4 <memcpy>

	BT_DBG("PrivacyRandom %s", bt_hex(priv_rand, 16));

	err = bt_encrypt_be(privacy_key, priv_rand, tmp);
    c8ce:	aa04      	add	r2, sp, #16
    c8d0:	4669      	mov	r1, sp
    c8d2:	4628      	mov	r0, r5
    c8d4:	f00f fe7b 	bl	1c5ce <bt_encrypt_be>
	if (err) {
    c8d8:	b958      	cbnz	r0, c8f2 <bt_mesh_net_obfuscate+0x5e>
    c8da:	4623      	mov	r3, r4
    c8dc:	aa04      	add	r2, sp, #16
    c8de:	3406      	adds	r4, #6
		return err;
	}

	for (i = 0; i < 6; i++) {
		pdu[1 + i] ^= tmp[i];
    c8e0:	f813 5f01 	ldrb.w	r5, [r3, #1]!
    c8e4:	f812 1b01 	ldrb.w	r1, [r2], #1
	for (i = 0; i < 6; i++) {
    c8e8:	42a3      	cmp	r3, r4
		pdu[1 + i] ^= tmp[i];
    c8ea:	ea81 0105 	eor.w	r1, r1, r5
    c8ee:	7019      	strb	r1, [r3, #0]
	for (i = 0; i < 6; i++) {
    c8f0:	d1f6      	bne.n	c8e0 <bt_mesh_net_obfuscate+0x4c>
	}

	return 0;
}
    c8f2:	b008      	add	sp, #32
    c8f4:	bd70      	pop	{r4, r5, r6, pc}
    c8f6:	bf00      	nop
    c8f8:	0001e713 	.word	0x0001e713

0000c8fc <bt_mesh_fcs_calc>:
	0xb4, 0x25, 0x57, 0xc6, 0xb3, 0x22, 0x50, 0xc1,
	0xba, 0x2b, 0x59, 0xc8, 0xbd, 0x2c, 0x5e, 0xcf
};

uint8_t bt_mesh_fcs_calc(const uint8_t *data, uint8_t data_len)
{
    c8fc:	b510      	push	{r4, lr}
	uint8_t fcs = 0xff;

	while (data_len--) {
		fcs = crc_table[fcs ^ *data++];
    c8fe:	4a06      	ldr	r2, [pc, #24]	; (c918 <bt_mesh_fcs_calc+0x1c>)
    c900:	4401      	add	r1, r0
	uint8_t fcs = 0xff;
    c902:	23ff      	movs	r3, #255	; 0xff
	while (data_len--) {
    c904:	4288      	cmp	r0, r1
    c906:	d102      	bne.n	c90e <bt_mesh_fcs_calc+0x12>
	}

	BT_DBG("fcs 0x%02x", 0xff - fcs);

	return 0xff - fcs;
    c908:	43d8      	mvns	r0, r3
}
    c90a:	b2c0      	uxtb	r0, r0
    c90c:	bd10      	pop	{r4, pc}
		fcs = crc_table[fcs ^ *data++];
    c90e:	f810 4b01 	ldrb.w	r4, [r0], #1
    c912:	4063      	eors	r3, r4
    c914:	5cd3      	ldrb	r3, [r2, r3]
    c916:	e7f5      	b.n	c904 <bt_mesh_fcs_calc+0x8>
    c918:	000210af 	.word	0x000210af

0000c91c <bt_mesh_fcs_check>:

bool bt_mesh_fcs_check(struct net_buf_simple *buf, uint8_t received_fcs)
{
    c91c:	b530      	push	{r4, r5, lr}
	const uint8_t *data = buf->data;
    c91e:	6804      	ldr	r4, [r0, #0]
	uint16_t data_len = buf->len;
	uint8_t fcs = 0xff;

	while (data_len--) {
    c920:	8880      	ldrh	r0, [r0, #4]
    c922:	4d08      	ldr	r5, [pc, #32]	; (c944 <bt_mesh_fcs_check+0x28>)
    c924:	4420      	add	r0, r4
	uint8_t fcs = 0xff;
    c926:	23ff      	movs	r3, #255	; 0xff
	while (data_len--) {
    c928:	4284      	cmp	r4, r0
    c92a:	d106      	bne.n	c93a <bt_mesh_fcs_check+0x1e>
		fcs = crc_table[fcs ^ *data++];
	}

	return crc_table[fcs ^ received_fcs] == 0xcf;
    c92c:	404b      	eors	r3, r1
    c92e:	5ce8      	ldrb	r0, [r5, r3]
}
    c930:	f1a0 03cf 	sub.w	r3, r0, #207	; 0xcf
    c934:	4258      	negs	r0, r3
    c936:	4158      	adcs	r0, r3
    c938:	bd30      	pop	{r4, r5, pc}
		fcs = crc_table[fcs ^ *data++];
    c93a:	f814 2b01 	ldrb.w	r2, [r4], #1
    c93e:	405a      	eors	r2, r3
    c940:	5cab      	ldrb	r3, [r5, r2]
    c942:	e7f1      	b.n	c928 <bt_mesh_fcs_check+0xc>
    c944:	000210af 	.word	0x000210af

0000c948 <bt_mesh_model_foreach>:
void bt_mesh_model_foreach(void (*func)(struct bt_mesh_model *mod,
					struct bt_mesh_elem *elem,
					bool vnd, bool primary,
					void *user_data),
			   void *user_data)
{
    c948:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	int i, j;

	for (i = 0; i < dev_comp->elem_count; i++) {
    c94c:	f8df 9068 	ldr.w	r9, [pc, #104]	; c9b8 <bt_mesh_model_foreach+0x70>
{
    c950:	4606      	mov	r6, r0
    c952:	460f      	mov	r7, r1
	for (i = 0; i < dev_comp->elem_count; i++) {
    c954:	2500      	movs	r5, #0
    c956:	f8d9 3000 	ldr.w	r3, [r9]
    c95a:	689a      	ldr	r2, [r3, #8]
    c95c:	42aa      	cmp	r2, r5
    c95e:	d802      	bhi.n	c966 <bt_mesh_model_foreach+0x1e>
			struct bt_mesh_model *model = &elem->vnd_models[j];

			func(model, elem, true, i == 0, user_data);
		}
	}
}
    c960:	b003      	add	sp, #12
    c962:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
    c966:	68dc      	ldr	r4, [r3, #12]
		for (j = 0; j < elem->model_count; j++) {
    c968:	f04f 0800 	mov.w	r8, #0
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
    c96c:	eb04 1405 	add.w	r4, r4, r5, lsl #4
		for (j = 0; j < elem->model_count; j++) {
    c970:	7923      	ldrb	r3, [r4, #4]
    c972:	4543      	cmp	r3, r8
    c974:	dc06      	bgt.n	c984 <bt_mesh_model_foreach+0x3c>
		for (j = 0; j < elem->vnd_model_count; j++) {
    c976:	f04f 0800 	mov.w	r8, #0
    c97a:	7963      	ldrb	r3, [r4, #5]
    c97c:	4543      	cmp	r3, r8
    c97e:	dc0e      	bgt.n	c99e <bt_mesh_model_foreach+0x56>
	for (i = 0; i < dev_comp->elem_count; i++) {
    c980:	3501      	adds	r5, #1
    c982:	e7e8      	b.n	c956 <bt_mesh_model_foreach+0xe>
			struct bt_mesh_model *model = &elem->models[j];
    c984:	68a0      	ldr	r0, [r4, #8]
			func(model, elem, false, i == 0, user_data);
    c986:	9700      	str	r7, [sp, #0]
    c988:	fab5 f385 	clz	r3, r5
    c98c:	eb00 1048 	add.w	r0, r0, r8, lsl #5
    c990:	095b      	lsrs	r3, r3, #5
    c992:	2200      	movs	r2, #0
    c994:	4621      	mov	r1, r4
    c996:	47b0      	blx	r6
		for (j = 0; j < elem->model_count; j++) {
    c998:	f108 0801 	add.w	r8, r8, #1
    c99c:	e7e8      	b.n	c970 <bt_mesh_model_foreach+0x28>
			struct bt_mesh_model *model = &elem->vnd_models[j];
    c99e:	68e0      	ldr	r0, [r4, #12]
			func(model, elem, true, i == 0, user_data);
    c9a0:	9700      	str	r7, [sp, #0]
    c9a2:	fab5 f385 	clz	r3, r5
    c9a6:	eb00 1048 	add.w	r0, r0, r8, lsl #5
    c9aa:	095b      	lsrs	r3, r3, #5
    c9ac:	2201      	movs	r2, #1
    c9ae:	4621      	mov	r1, r4
    c9b0:	47b0      	blx	r6
		for (j = 0; j < elem->vnd_model_count; j++) {
    c9b2:	f108 0801 	add.w	r8, r8, #1
    c9b6:	e7e0      	b.n	c97a <bt_mesh_model_foreach+0x32>
    c9b8:	20001c24 	.word	0x20001c24

0000c9bc <bt_mesh_model_pub_period_get>:

int32_t bt_mesh_model_pub_period_get(struct bt_mesh_model *mod)
{
	int32_t period;

	if (!mod->pub) {
    c9bc:	6883      	ldr	r3, [r0, #8]
    c9be:	b1eb      	cbz	r3, c9fc <bt_mesh_model_pub_period_get+0x40>
		return 0;
	}

	switch (mod->pub->period >> 6) {
    c9c0:	7a98      	ldrb	r0, [r3, #10]
    c9c2:	0982      	lsrs	r2, r0, #6
    c9c4:	2a02      	cmp	r2, #2
    c9c6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c9ca:	d012      	beq.n	c9f2 <bt_mesh_model_pub_period_get+0x36>
    c9cc:	2a03      	cmp	r2, #3
    c9ce:	d013      	beq.n	c9f8 <bt_mesh_model_pub_period_get+0x3c>
    c9d0:	2a01      	cmp	r2, #1
    c9d2:	d00a      	beq.n	c9ea <bt_mesh_model_pub_period_get+0x2e>
	case 0x00:
		/* 1 step is 100 ms */
		period = (mod->pub->period & BIT_MASK(6)) * 100U;
    c9d4:	2264      	movs	r2, #100	; 0x64
    c9d6:	fb10 f002 	smulbb	r0, r0, r2
		break;
	default:
		CODE_UNREACHABLE;
	}

	if (mod->pub->fast_period) {
    c9da:	79da      	ldrb	r2, [r3, #7]
    c9dc:	0652      	lsls	r2, r2, #25
    c9de:	d50e      	bpl.n	c9fe <bt_mesh_model_pub_period_get+0x42>
		return period >> mod->pub->period_div;
    c9e0:	7adb      	ldrb	r3, [r3, #11]
    c9e2:	f003 030f 	and.w	r3, r3, #15
    c9e6:	4118      	asrs	r0, r3
    c9e8:	4770      	bx	lr
		period = (mod->pub->period & BIT_MASK(6)) * MSEC_PER_SEC;
    c9ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		period = (mod->pub->period & BIT_MASK(6)) * 600U * MSEC_PER_SEC;
    c9ee:	4350      	muls	r0, r2
		break;
    c9f0:	e7f3      	b.n	c9da <bt_mesh_model_pub_period_get+0x1e>
		period = (mod->pub->period & BIT_MASK(6)) * 10U * MSEC_PER_SEC;
    c9f2:	f242 7210 	movw	r2, #10000	; 0x2710
    c9f6:	e7fa      	b.n	c9ee <bt_mesh_model_pub_period_get+0x32>
		period = (mod->pub->period & BIT_MASK(6)) * 600U * MSEC_PER_SEC;
    c9f8:	4a01      	ldr	r2, [pc, #4]	; (ca00 <bt_mesh_model_pub_period_get+0x44>)
    c9fa:	e7f8      	b.n	c9ee <bt_mesh_model_pub_period_get+0x32>
		return 0;
    c9fc:	4618      	mov	r0, r3
	} else {
		return period;
	}
}
    c9fe:	4770      	bx	lr
    ca00:	000927c0 	.word	0x000927c0

0000ca04 <bt_mesh_model_get>:
{
	return &dev_comp->elem[mod->elem_idx];
}

struct bt_mesh_model *bt_mesh_model_get(bool vnd, uint8_t elem_idx, uint8_t mod_idx)
{
    ca04:	b538      	push	{r3, r4, r5, lr}
    ca06:	4613      	mov	r3, r2
	struct bt_mesh_elem *elem;

	if (elem_idx >= dev_comp->elem_count) {
    ca08:	4a1b      	ldr	r2, [pc, #108]	; (ca78 <bt_mesh_model_get+0x74>)
    ca0a:	6812      	ldr	r2, [r2, #0]
{
    ca0c:	4604      	mov	r4, r0
	if (elem_idx >= dev_comp->elem_count) {
    ca0e:	6890      	ldr	r0, [r2, #8]
    ca10:	4281      	cmp	r1, r0
{
    ca12:	460d      	mov	r5, r1
	if (elem_idx >= dev_comp->elem_count) {
    ca14:	d30b      	bcc.n	ca2e <bt_mesh_model_get+0x2a>
    ca16:	4a19      	ldr	r2, [pc, #100]	; (ca7c <bt_mesh_model_get+0x78>)
    ca18:	4b19      	ldr	r3, [pc, #100]	; (ca80 <bt_mesh_model_get+0x7c>)
		BT_ERR("Invalid element index %u", elem_idx);
    ca1a:	481a      	ldr	r0, [pc, #104]	; (ca84 <bt_mesh_model_get+0x80>)
    ca1c:	1ad2      	subs	r2, r2, r3
    ca1e:	08d2      	lsrs	r2, r2, #3
    ca20:	0192      	lsls	r2, r2, #6
    ca22:	f042 0201 	orr.w	r2, r2, #1
    ca26:	f00c f9f1 	bl	18e0c <log_1>
		return NULL;
    ca2a:	2000      	movs	r0, #0
			return NULL;
		}

		return &elem->models[mod_idx];
	}
}
    ca2c:	bd38      	pop	{r3, r4, r5, pc}
	elem = &dev_comp->elem[elem_idx];
    ca2e:	68d1      	ldr	r1, [r2, #12]
    ca30:	eb01 1105 	add.w	r1, r1, r5, lsl #4
	if (vnd) {
    ca34:	b184      	cbz	r4, ca58 <bt_mesh_model_get+0x54>
		if (mod_idx >= elem->vnd_model_count) {
    ca36:	794a      	ldrb	r2, [r1, #5]
    ca38:	429a      	cmp	r2, r3
    ca3a:	d809      	bhi.n	ca50 <bt_mesh_model_get+0x4c>
    ca3c:	4910      	ldr	r1, [pc, #64]	; (ca80 <bt_mesh_model_get+0x7c>)
    ca3e:	4a0f      	ldr	r2, [pc, #60]	; (ca7c <bt_mesh_model_get+0x78>)
			BT_ERR("Invalid vendor model index %u", mod_idx);
    ca40:	4811      	ldr	r0, [pc, #68]	; (ca88 <bt_mesh_model_get+0x84>)
    ca42:	1a52      	subs	r2, r2, r1
    ca44:	08d2      	lsrs	r2, r2, #3
    ca46:	0192      	lsls	r2, r2, #6
    ca48:	f042 0201 	orr.w	r2, r2, #1
    ca4c:	4619      	mov	r1, r3
    ca4e:	e7ea      	b.n	ca26 <bt_mesh_model_get+0x22>
		return &elem->vnd_models[mod_idx];
    ca50:	68c8      	ldr	r0, [r1, #12]
		return &elem->models[mod_idx];
    ca52:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    ca56:	e7e9      	b.n	ca2c <bt_mesh_model_get+0x28>
		if (mod_idx >= elem->model_count) {
    ca58:	790a      	ldrb	r2, [r1, #4]
    ca5a:	429a      	cmp	r2, r3
    ca5c:	d809      	bhi.n	ca72 <bt_mesh_model_get+0x6e>
    ca5e:	4908      	ldr	r1, [pc, #32]	; (ca80 <bt_mesh_model_get+0x7c>)
    ca60:	4a06      	ldr	r2, [pc, #24]	; (ca7c <bt_mesh_model_get+0x78>)
			BT_ERR("Invalid SIG model index %u", mod_idx);
    ca62:	480a      	ldr	r0, [pc, #40]	; (ca8c <bt_mesh_model_get+0x88>)
    ca64:	1a52      	subs	r2, r2, r1
    ca66:	08d2      	lsrs	r2, r2, #3
    ca68:	0192      	lsls	r2, r2, #6
    ca6a:	f042 0201 	orr.w	r2, r2, #1
    ca6e:	4619      	mov	r1, r3
    ca70:	e7d9      	b.n	ca26 <bt_mesh_model_get+0x22>
		return &elem->models[mod_idx];
    ca72:	6888      	ldr	r0, [r1, #8]
    ca74:	e7ed      	b.n	ca52 <bt_mesh_model_get+0x4e>
    ca76:	bf00      	nop
    ca78:	20001c24 	.word	0x20001c24
    ca7c:	0001e518 	.word	0x0001e518
    ca80:	0001e408 	.word	0x0001e408
    ca84:	000211d5 	.word	0x000211d5
    ca88:	000211ee 	.word	0x000211ee
    ca8c:	0002120c 	.word	0x0002120c

0000ca90 <mod_set>:
	return 0;
}

static int mod_set(bool vnd, const char *name, size_t len_rd,
		   settings_read_cb read_cb, void *cb_arg)
{
    ca90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ca94:	b086      	sub	sp, #24
    ca96:	4605      	mov	r5, r0
    ca98:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
    ca9c:	4616      	mov	r6, r2
    ca9e:	461f      	mov	r7, r3
	uint8_t elem_idx, mod_idx;
	uint16_t mod_key;
	int len;
	const char *next;

	if (!name) {
    caa0:	468a      	mov	sl, r1
    caa2:	b951      	cbnz	r1, caba <mod_set+0x2a>
    caa4:	4b72      	ldr	r3, [pc, #456]	; (cc70 <mod_set+0x1e0>)
    caa6:	4973      	ldr	r1, [pc, #460]	; (cc74 <mod_set+0x1e4>)
	}

	len = settings_name_next(name, &next);

	if (!next) {
		BT_ERR("Insufficient number of arguments");
    caa8:	4873      	ldr	r0, [pc, #460]	; (cc78 <mod_set+0x1e8>)
    caaa:	1ac9      	subs	r1, r1, r3
    caac:	08c9      	lsrs	r1, r1, #3
    caae:	0189      	lsls	r1, r1, #6
    cab0:	f041 0101 	orr.w	r1, r1, #1
    cab4:	f00c f99d 	bl	18df2 <log_0>
		return -ENOENT;
    cab8:	e01b      	b.n	caf2 <mod_set+0x62>
	mod_key = strtol(name, NULL, 16);
    caba:	2210      	movs	r2, #16
    cabc:	2100      	movs	r1, #0
    cabe:	4650      	mov	r0, sl
    cac0:	f00c ffa2 	bl	19a08 <strtol>
	elem_idx = mod_key >> 8;
    cac4:	f3c0 2407 	ubfx	r4, r0, #8, #8
	mod = bt_mesh_model_get(vnd, elem_idx, mod_idx);
    cac8:	fa5f f880 	uxtb.w	r8, r0
    cacc:	4642      	mov	r2, r8
    cace:	4628      	mov	r0, r5
    cad0:	4621      	mov	r1, r4
    cad2:	f7ff ff97 	bl	ca04 <bt_mesh_model_get>
	if (!mod) {
    cad6:	4605      	mov	r5, r0
    cad8:	b970      	cbnz	r0, caf8 <mod_set+0x68>
    cada:	4a65      	ldr	r2, [pc, #404]	; (cc70 <mod_set+0x1e0>)
    cadc:	4b65      	ldr	r3, [pc, #404]	; (cc74 <mod_set+0x1e4>)
		BT_ERR("Failed to get model for elem_idx %u mod_idx %u",
    cade:	4867      	ldr	r0, [pc, #412]	; (cc7c <mod_set+0x1ec>)
    cae0:	1a9b      	subs	r3, r3, r2
    cae2:	08db      	lsrs	r3, r3, #3
    cae4:	019b      	lsls	r3, r3, #6
    cae6:	f043 0301 	orr.w	r3, r3, #1
    caea:	4642      	mov	r2, r8
    caec:	4621      	mov	r1, r4
    caee:	f00c f9a1 	bl	18e34 <log_2>
	if (!strncmp(next, "data", len)) {
		return mod_data_set(mod, next, len_rd, read_cb, cb_arg);
	}

	BT_WARN("Unknown module key %s", next);
	return -ENOENT;
    caf2:	f06f 0401 	mvn.w	r4, #1
    caf6:	e011      	b.n	cb1c <mod_set+0x8c>
	len = settings_name_next(name, &next);
    caf8:	a903      	add	r1, sp, #12
    cafa:	4650      	mov	r0, sl
    cafc:	f00c fcf3 	bl	194e6 <settings_name_next>
    cb00:	4680      	mov	r8, r0
	if (!next) {
    cb02:	9803      	ldr	r0, [sp, #12]
    cb04:	2800      	cmp	r0, #0
    cb06:	d0cd      	beq.n	caa4 <mod_set+0x14>
	if (!strncmp(next, "bind", len)) {
    cb08:	495d      	ldr	r1, [pc, #372]	; (cc80 <mod_set+0x1f0>)
    cb0a:	4642      	mov	r2, r8
    cb0c:	f00d f82b 	bl	19b66 <strncmp>
    cb10:	b9d8      	cbnz	r0, cb4a <mod_set+0xba>
		mod->keys[i] = BT_MESH_KEY_UNUSED;
    cb12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cb16:	60eb      	str	r3, [r5, #12]
	if (len_rd == 0) {
    cb18:	b926      	cbnz	r6, cb24 <mod_set+0x94>
		return 0;
    cb1a:	2400      	movs	r4, #0
}
    cb1c:	4620      	mov	r0, r4
    cb1e:	b006      	add	sp, #24
    cb20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	len = read_cb(cb_arg, mod->keys, sizeof(mod->keys));
    cb24:	2204      	movs	r2, #4
    cb26:	f105 010c 	add.w	r1, r5, #12
	len = read_cb(cb_arg, mod->groups, sizeof(mod->groups));
    cb2a:	4648      	mov	r0, r9
    cb2c:	47b8      	blx	r7
	if (len < 0) {
    cb2e:	1e04      	subs	r4, r0, #0
    cb30:	daf3      	bge.n	cb1a <mod_set+0x8a>
    cb32:	4b4f      	ldr	r3, [pc, #316]	; (cc70 <mod_set+0x1e0>)
    cb34:	4a4f      	ldr	r2, [pc, #316]	; (cc74 <mod_set+0x1e4>)
		BT_ERR("Failed to read value (err %zd)", len);
    cb36:	4853      	ldr	r0, [pc, #332]	; (cc84 <mod_set+0x1f4>)
    cb38:	1ad2      	subs	r2, r2, r3
    cb3a:	08d2      	lsrs	r2, r2, #3
    cb3c:	0192      	lsls	r2, r2, #6
    cb3e:	f042 0201 	orr.w	r2, r2, #1
    cb42:	4621      	mov	r1, r4
    cb44:	f00c f962 	bl	18e0c <log_1>
		return len;
    cb48:	e7e8      	b.n	cb1c <mod_set+0x8c>
	if (!strncmp(next, "sub", len)) {
    cb4a:	494f      	ldr	r1, [pc, #316]	; (cc88 <mod_set+0x1f8>)
    cb4c:	9803      	ldr	r0, [sp, #12]
    cb4e:	4642      	mov	r2, r8
    cb50:	f00d f809 	bl	19b66 <strncmp>
    cb54:	4601      	mov	r1, r0
    cb56:	b948      	cbnz	r0, cb6c <mod_set+0xdc>
	(void)memset(mod->groups, 0, sizeof(mod->groups));
    cb58:	3510      	adds	r5, #16
    cb5a:	2204      	movs	r2, #4
    cb5c:	4628      	mov	r0, r5
    cb5e:	f00d f84c 	bl	19bfa <memset>
	if (len_rd == 0) {
    cb62:	2e00      	cmp	r6, #0
    cb64:	d0d9      	beq.n	cb1a <mod_set+0x8a>
	len = read_cb(cb_arg, mod->groups, sizeof(mod->groups));
    cb66:	2204      	movs	r2, #4
    cb68:	4629      	mov	r1, r5
    cb6a:	e7de      	b.n	cb2a <mod_set+0x9a>
	if (!strncmp(next, "pub", len)) {
    cb6c:	4947      	ldr	r1, [pc, #284]	; (cc8c <mod_set+0x1fc>)
    cb6e:	9803      	ldr	r0, [sp, #12]
    cb70:	4642      	mov	r2, r8
    cb72:	f00c fff8 	bl	19b66 <strncmp>
    cb76:	4604      	mov	r4, r0
    cb78:	2800      	cmp	r0, #0
    cb7a:	d14e      	bne.n	cc1a <mod_set+0x18a>
	if (!mod->pub) {
    cb7c:	68ab      	ldr	r3, [r5, #8]
    cb7e:	b963      	cbnz	r3, cb9a <mod_set+0x10a>
    cb80:	4b3b      	ldr	r3, [pc, #236]	; (cc70 <mod_set+0x1e0>)
    cb82:	493c      	ldr	r1, [pc, #240]	; (cc74 <mod_set+0x1e4>)
		BT_WARN("Model has no publication context!");
    cb84:	4842      	ldr	r0, [pc, #264]	; (cc90 <mod_set+0x200>)
    cb86:	1ac9      	subs	r1, r1, r3
    cb88:	08c9      	lsrs	r1, r1, #3
    cb8a:	0189      	lsls	r1, r1, #6
    cb8c:	f041 0102 	orr.w	r1, r1, #2
    cb90:	f00c f92f 	bl	18df2 <log_0>
		return -EINVAL;
    cb94:	f06f 0415 	mvn.w	r4, #21
    cb98:	e7c0      	b.n	cb1c <mod_set+0x8c>
	if (len_rd == 0) {
    cb9a:	b946      	cbnz	r6, cbae <mod_set+0x11e>
		mod->pub->addr = BT_MESH_ADDR_UNASSIGNED;
    cb9c:	685a      	ldr	r2, [r3, #4]
    cb9e:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
    cba2:	605a      	str	r2, [r3, #4]
		mod->pub->ttl = 0U;
    cba4:	689a      	ldr	r2, [r3, #8]
    cba6:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
    cbaa:	609a      	str	r2, [r3, #8]
		return 0;
    cbac:	e7b6      	b.n	cb1c <mod_set+0x8c>
	err = bt_mesh_settings_set(read_cb, cb_arg, &pub, sizeof(pub));
    cbae:	2308      	movs	r3, #8
    cbb0:	aa04      	add	r2, sp, #16
    cbb2:	4649      	mov	r1, r9
    cbb4:	4638      	mov	r0, r7
    cbb6:	f000 f9fb 	bl	cfb0 <bt_mesh_settings_set>
	if (err) {
    cbba:	4604      	mov	r4, r0
    cbbc:	b150      	cbz	r0, cbd4 <mod_set+0x144>
    cbbe:	4b2c      	ldr	r3, [pc, #176]	; (cc70 <mod_set+0x1e0>)
    cbc0:	492c      	ldr	r1, [pc, #176]	; (cc74 <mod_set+0x1e4>)
		BT_ERR("Failed to set \'model-pub\'");
    cbc2:	4834      	ldr	r0, [pc, #208]	; (cc94 <mod_set+0x204>)
    cbc4:	1ac9      	subs	r1, r1, r3
    cbc6:	08c9      	lsrs	r1, r1, #3
    cbc8:	0189      	lsls	r1, r1, #6
    cbca:	f041 0101 	orr.w	r1, r1, #1
    cbce:	f00c f910 	bl	18df2 <log_0>
		return err;
    cbd2:	e7a3      	b.n	cb1c <mod_set+0x8c>
	mod->pub->addr = pub.addr;
    cbd4:	68aa      	ldr	r2, [r5, #8]
    cbd6:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    cbda:	8093      	strh	r3, [r2, #4]
	mod->pub->cred = pub.cred;
    cbdc:	f89d 3017 	ldrb.w	r3, [sp, #23]
	mod->pub->key = pub.key;
    cbe0:	f3c3 1100 	ubfx	r1, r3, #4, #1
    cbe4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    cbe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
    cbec:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
    cbf0:	88d1      	ldrh	r1, [r2, #6]
    cbf2:	f421 51ff 	bic.w	r1, r1, #8160	; 0x1fe0
    cbf6:	f021 011f 	bic.w	r1, r1, #31
    cbfa:	430b      	orrs	r3, r1
    cbfc:	80d3      	strh	r3, [r2, #6]
	mod->pub->ttl = pub.ttl;
    cbfe:	9905      	ldr	r1, [sp, #20]
    cc00:	6893      	ldr	r3, [r2, #8]
    cc02:	f021 4170 	bic.w	r1, r1, #4026531840	; 0xf0000000
    cc06:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
    cc0a:	430b      	orrs	r3, r1
    cc0c:	6093      	str	r3, [r2, #8]
	mod->pub->count = 0U;
    cc0e:	f3c3 6307 	ubfx	r3, r3, #24, #8
    cc12:	f360 1307 	bfi	r3, r0, #4, #4
    cc16:	72d3      	strb	r3, [r2, #11]
		return mod_set_pub(mod, len_rd, read_cb, cb_arg);
    cc18:	e780      	b.n	cb1c <mod_set+0x8c>
	if (!strncmp(next, "data", len)) {
    cc1a:	491f      	ldr	r1, [pc, #124]	; (cc98 <mod_set+0x208>)
    cc1c:	9803      	ldr	r0, [sp, #12]
    cc1e:	4642      	mov	r2, r8
    cc20:	f00c ffa1 	bl	19b66 <strncmp>
    cc24:	4604      	mov	r4, r0
    cc26:	b9b0      	cbnz	r0, cc56 <mod_set+0x1c6>
	settings_name_next(name, &next);
    cc28:	9803      	ldr	r0, [sp, #12]
    cc2a:	a904      	add	r1, sp, #16
    cc2c:	f00c fc5b 	bl	194e6 <settings_name_next>
	if (mod->cb && mod->cb->settings_set) {
    cc30:	69ab      	ldr	r3, [r5, #24]
    cc32:	2b00      	cmp	r3, #0
    cc34:	f43f af72 	beq.w	cb1c <mod_set+0x8c>
    cc38:	f8d3 8000 	ldr.w	r8, [r3]
    cc3c:	f1b8 0f00 	cmp.w	r8, #0
    cc40:	f43f af6c 	beq.w	cb1c <mod_set+0x8c>
		return mod->cb->settings_set(mod, next, len_rd,
    cc44:	9904      	ldr	r1, [sp, #16]
    cc46:	f8cd 9000 	str.w	r9, [sp]
    cc4a:	463b      	mov	r3, r7
    cc4c:	4632      	mov	r2, r6
    cc4e:	4628      	mov	r0, r5
    cc50:	47c0      	blx	r8
    cc52:	4604      	mov	r4, r0
		return mod_data_set(mod, next, len_rd, read_cb, cb_arg);
    cc54:	e762      	b.n	cb1c <mod_set+0x8c>
    cc56:	4b06      	ldr	r3, [pc, #24]	; (cc70 <mod_set+0x1e0>)
    cc58:	4a06      	ldr	r2, [pc, #24]	; (cc74 <mod_set+0x1e4>)
	BT_WARN("Unknown module key %s", next);
    cc5a:	9903      	ldr	r1, [sp, #12]
    cc5c:	480f      	ldr	r0, [pc, #60]	; (cc9c <mod_set+0x20c>)
    cc5e:	1ad2      	subs	r2, r2, r3
    cc60:	08d2      	lsrs	r2, r2, #3
    cc62:	0192      	lsls	r2, r2, #6
    cc64:	f042 0202 	orr.w	r2, r2, #2
    cc68:	f00c f8d0 	bl	18e0c <log_1>
    cc6c:	e741      	b.n	caf2 <mod_set+0x62>
    cc6e:	bf00      	nop
    cc70:	0001e408 	.word	0x0001e408
    cc74:	0001e518 	.word	0x0001e518
    cc78:	0001f368 	.word	0x0001f368
    cc7c:	00021227 	.word	0x00021227
    cc80:	000211af 	.word	0x000211af
    cc84:	00021256 	.word	0x00021256
    cc88:	000211cd 	.word	0x000211cd
    cc8c:	000211d1 	.word	0x000211d1
    cc90:	00021275 	.word	0x00021275
    cc94:	00021297 	.word	0x00021297
    cc98:	0001fc76 	.word	0x0001fc76
    cc9c:	000212b1 	.word	0x000212b1

0000cca0 <bt_mesh_comp_provision>:
	dev_primary_addr = addr;
    cca0:	4b08      	ldr	r3, [pc, #32]	; (ccc4 <bt_mesh_comp_provision+0x24>)
{
    cca2:	b570      	push	{r4, r5, r6, lr}
	dev_primary_addr = addr;
    cca4:	8018      	strh	r0, [r3, #0]
	for (i = 0; i < dev_comp->elem_count; i++) {
    cca6:	4b08      	ldr	r3, [pc, #32]	; (ccc8 <bt_mesh_comp_provision+0x28>)
    cca8:	6819      	ldr	r1, [r3, #0]
    ccaa:	688c      	ldr	r4, [r1, #8]
    ccac:	2300      	movs	r3, #0
    ccae:	18c2      	adds	r2, r0, r3
    ccb0:	42a3      	cmp	r3, r4
    ccb2:	b292      	uxth	r2, r2
    ccb4:	d100      	bne.n	ccb8 <bt_mesh_comp_provision+0x18>
}
    ccb6:	bd70      	pop	{r4, r5, r6, pc}
		elem->addr = addr++;
    ccb8:	011d      	lsls	r5, r3, #4
    ccba:	68ce      	ldr	r6, [r1, #12]
	for (i = 0; i < dev_comp->elem_count; i++) {
    ccbc:	3301      	adds	r3, #1
		elem->addr = addr++;
    ccbe:	5372      	strh	r2, [r6, r5]
	for (i = 0; i < dev_comp->elem_count; i++) {
    ccc0:	e7f5      	b.n	ccae <bt_mesh_comp_provision+0xe>
    ccc2:	bf00      	nop
    ccc4:	20002e96 	.word	0x20002e96
    ccc8:	20001c24 	.word	0x20001c24

0000cccc <bt_mesh_comp_unprovision>:
	dev_primary_addr = BT_MESH_ADDR_UNASSIGNED;
    cccc:	4b01      	ldr	r3, [pc, #4]	; (ccd4 <bt_mesh_comp_unprovision+0x8>)
    ccce:	2200      	movs	r2, #0
    ccd0:	801a      	strh	r2, [r3, #0]
}
    ccd2:	4770      	bx	lr
    ccd4:	20002e96 	.word	0x20002e96

0000ccd8 <bt_mesh_primary_addr>:
}
    ccd8:	4b01      	ldr	r3, [pc, #4]	; (cce0 <bt_mesh_primary_addr+0x8>)
    ccda:	8818      	ldrh	r0, [r3, #0]
    ccdc:	4770      	bx	lr
    ccde:	bf00      	nop
    cce0:	20002e96 	.word	0x20002e96

0000cce4 <bt_mesh_elem_find>:
	if (BT_MESH_ADDR_IS_UNICAST(addr)) {
    cce4:	4a25      	ldr	r2, [pc, #148]	; (cd7c <bt_mesh_elem_find+0x98>)
{
    cce6:	b5f0      	push	{r4, r5, r6, r7, lr}
    cce8:	6817      	ldr	r7, [r2, #0]
	if (BT_MESH_ADDR_IS_UNICAST(addr)) {
    ccea:	b202      	sxth	r2, r0
    ccec:	2a00      	cmp	r2, #0
    ccee:	68bd      	ldr	r5, [r7, #8]
{
    ccf0:	4603      	mov	r3, r0
	if (BT_MESH_ADDR_IS_UNICAST(addr)) {
    ccf2:	dd3d      	ble.n	cd70 <bt_mesh_elem_find+0x8c>
		index = (addr - dev_comp->elem[0].addr);
    ccf4:	68f8      	ldr	r0, [r7, #12]
    ccf6:	8802      	ldrh	r2, [r0, #0]
    ccf8:	1a9b      	subs	r3, r3, r2
		if (index < dev_comp->elem_count) {
    ccfa:	b29b      	uxth	r3, r3
    ccfc:	42ab      	cmp	r3, r5
    ccfe:	d23b      	bcs.n	cd78 <bt_mesh_elem_find+0x94>
			return &dev_comp->elem[index];
    cd00:	eb00 1003 	add.w	r0, r0, r3, lsl #4
}
    cd04:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct bt_mesh_elem *elem = &dev_comp->elem[index];
    cd06:	68fa      	ldr	r2, [r7, #12]
    cd08:	eb02 1000 	add.w	r0, r2, r0, lsl #4
	for (i = 0; i < elem->model_count; i++) {
    cd0c:	2100      	movs	r1, #0
    cd0e:	f890 c004 	ldrb.w	ip, [r0, #4]
    cd12:	4561      	cmp	r1, ip
    cd14:	db06      	blt.n	cd24 <bt_mesh_elem_find+0x40>
	for (i = 0; i < elem->vnd_model_count; i++) {
    cd16:	f890 c005 	ldrb.w	ip, [r0, #5]
    cd1a:	2100      	movs	r1, #0
    cd1c:	4561      	cmp	r1, ip
    cd1e:	db14      	blt.n	cd4a <bt_mesh_elem_find+0x66>
	for (index = 0; index < dev_comp->elem_count; index++) {
    cd20:	3601      	adds	r6, #1
    cd22:	e026      	b.n	cd72 <bt_mesh_elem_find+0x8e>
		model = &elem->models[i];
    cd24:	6882      	ldr	r2, [r0, #8]
    cd26:	eb02 1241 	add.w	r2, r2, r1, lsl #5
		if (mod->groups[i] == addr) {
    cd2a:	8a14      	ldrh	r4, [r2, #16]
    cd2c:	429c      	cmp	r4, r3
    cd2e:	d00a      	beq.n	cd46 <bt_mesh_elem_find+0x62>
    cd30:	8a54      	ldrh	r4, [r2, #18]
    cd32:	429c      	cmp	r4, r3
    cd34:	d105      	bne.n	cd42 <bt_mesh_elem_find+0x5e>
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
    cd36:	2401      	movs	r4, #1
			return &mod->groups[i];
    cd38:	3408      	adds	r4, #8
    cd3a:	eb02 0244 	add.w	r2, r2, r4, lsl #1
		if (match) {
    cd3e:	2a00      	cmp	r2, #0
    cd40:	d1e0      	bne.n	cd04 <bt_mesh_elem_find+0x20>
	for (i = 0; i < elem->model_count; i++) {
    cd42:	3101      	adds	r1, #1
    cd44:	e7e5      	b.n	cd12 <bt_mesh_elem_find+0x2e>
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
    cd46:	2400      	movs	r4, #0
    cd48:	e7f6      	b.n	cd38 <bt_mesh_elem_find+0x54>
		model = &elem->vnd_models[i];
    cd4a:	68c2      	ldr	r2, [r0, #12]
    cd4c:	eb02 1241 	add.w	r2, r2, r1, lsl #5
		if (mod->groups[i] == addr) {
    cd50:	8a14      	ldrh	r4, [r2, #16]
    cd52:	429c      	cmp	r4, r3
    cd54:	d00a      	beq.n	cd6c <bt_mesh_elem_find+0x88>
    cd56:	8a54      	ldrh	r4, [r2, #18]
    cd58:	429c      	cmp	r4, r3
    cd5a:	d105      	bne.n	cd68 <bt_mesh_elem_find+0x84>
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
    cd5c:	2401      	movs	r4, #1
			return &mod->groups[i];
    cd5e:	3408      	adds	r4, #8
    cd60:	eb02 0244 	add.w	r2, r2, r4, lsl #1
		if (match) {
    cd64:	2a00      	cmp	r2, #0
    cd66:	d1cd      	bne.n	cd04 <bt_mesh_elem_find+0x20>
	for (i = 0; i < elem->vnd_model_count; i++) {
    cd68:	3101      	adds	r1, #1
    cd6a:	e7d7      	b.n	cd1c <bt_mesh_elem_find+0x38>
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
    cd6c:	2400      	movs	r4, #0
    cd6e:	e7f6      	b.n	cd5e <bt_mesh_elem_find+0x7a>
    cd70:	2600      	movs	r6, #0
	for (index = 0; index < dev_comp->elem_count; index++) {
    cd72:	b2b0      	uxth	r0, r6
    cd74:	42a8      	cmp	r0, r5
    cd76:	d3c6      	bcc.n	cd06 <bt_mesh_elem_find+0x22>
			return NULL;
    cd78:	2000      	movs	r0, #0
    cd7a:	e7c3      	b.n	cd04 <bt_mesh_elem_find+0x20>
    cd7c:	20001c24 	.word	0x20001c24

0000cd80 <bt_mesh_model_recv>:
{
    cd80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (buf->data[0] >> 6) {
    cd84:	680b      	ldr	r3, [r1, #0]
    cd86:	4d60      	ldr	r5, [pc, #384]	; (cf08 <bt_mesh_model_recv+0x188>)
    cd88:	781b      	ldrb	r3, [r3, #0]
{
    cd8a:	460c      	mov	r4, r1
    cd8c:	495f      	ldr	r1, [pc, #380]	; (cf0c <bt_mesh_model_recv+0x18c>)
	switch (buf->data[0] >> 6) {
    cd8e:	099a      	lsrs	r2, r3, #6
    cd90:	1a6d      	subs	r5, r5, r1
    cd92:	2a02      	cmp	r2, #2
{
    cd94:	b085      	sub	sp, #20
    cd96:	4680      	mov	r8, r0
    cd98:	ea4f 05d5 	mov.w	r5, r5, lsr #3
	switch (buf->data[0] >> 6) {
    cd9c:	d024      	beq.n	cde8 <bt_mesh_model_recv+0x68>
    cd9e:	2a03      	cmp	r2, #3
    cda0:	d02e      	beq.n	ce00 <bt_mesh_model_recv+0x80>
		if (buf->data[0] == 0x7f) {
    cda2:	2b7f      	cmp	r3, #127	; 0x7f
    cda4:	d10e      	bne.n	cdc4 <bt_mesh_model_recv+0x44>
			BT_ERR("Ignoring RFU OpCode");
    cda6:	01a9      	lsls	r1, r5, #6
    cda8:	4859      	ldr	r0, [pc, #356]	; (cf10 <bt_mesh_model_recv+0x190>)
    cdaa:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Too short payload for 2-octet OpCode");
    cdae:	f00c f820 	bl	18df2 <log_0>
		BT_WARN("Unable to decode OpCode");
    cdb2:	01ad      	lsls	r5, r5, #6
    cdb4:	4857      	ldr	r0, [pc, #348]	; (cf14 <bt_mesh_model_recv+0x194>)
    cdb6:	f045 0102 	orr.w	r1, r5, #2
}
    cdba:	b005      	add	sp, #20
    cdbc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		BT_WARN("Unable to decode OpCode");
    cdc0:	f00c b817 	b.w	18df2 <log_0>
		*opcode = net_buf_simple_pull_u8(buf);
    cdc4:	4620      	mov	r0, r4
    cdc6:	f010 fae7 	bl	1d398 <net_buf_simple_pull_u8>
		*opcode = net_buf_simple_pull_be16(buf);
    cdca:	4607      	mov	r7, r0
			BT_ERR("Too short message for OpCode 0x%08x", opcode);
    cdcc:	01ad      	lsls	r5, r5, #6
    cdce:	f045 0301 	orr.w	r3, r5, #1
	for (i = 0; i < dev_comp->elem_count; i++) {
    cdd2:	f04f 0a00 	mov.w	sl, #0
			BT_ERR("Too short message for OpCode 0x%08x", opcode);
    cdd6:	9301      	str	r3, [sp, #4]
	for (i = 0; i < dev_comp->elem_count; i++) {
    cdd8:	4b4f      	ldr	r3, [pc, #316]	; (cf18 <bt_mesh_model_recv+0x198>)
    cdda:	681b      	ldr	r3, [r3, #0]
    cddc:	689a      	ldr	r2, [r3, #8]
    cdde:	4592      	cmp	sl, r2
    cde0:	d320      	bcc.n	ce24 <bt_mesh_model_recv+0xa4>
}
    cde2:	b005      	add	sp, #20
    cde4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < 2) {
    cde8:	88a3      	ldrh	r3, [r4, #4]
    cdea:	2b01      	cmp	r3, #1
    cdec:	d804      	bhi.n	cdf8 <bt_mesh_model_recv+0x78>
			BT_ERR("Too short payload for 2-octet OpCode");
    cdee:	01a9      	lsls	r1, r5, #6
    cdf0:	484a      	ldr	r0, [pc, #296]	; (cf1c <bt_mesh_model_recv+0x19c>)
    cdf2:	f041 0101 	orr.w	r1, r1, #1
    cdf6:	e7da      	b.n	cdae <bt_mesh_model_recv+0x2e>
		*opcode = net_buf_simple_pull_be16(buf);
    cdf8:	4620      	mov	r0, r4
    cdfa:	f010 fadd 	bl	1d3b8 <net_buf_simple_pull_be16>
    cdfe:	e7e4      	b.n	cdca <bt_mesh_model_recv+0x4a>
		if (buf->len < 3) {
    ce00:	88a3      	ldrh	r3, [r4, #4]
    ce02:	2b02      	cmp	r3, #2
    ce04:	d804      	bhi.n	ce10 <bt_mesh_model_recv+0x90>
			BT_ERR("Too short payload for 3-octet OpCode");
    ce06:	01a9      	lsls	r1, r5, #6
    ce08:	4845      	ldr	r0, [pc, #276]	; (cf20 <bt_mesh_model_recv+0x1a0>)
    ce0a:	f041 0101 	orr.w	r1, r1, #1
    ce0e:	e7ce      	b.n	cdae <bt_mesh_model_recv+0x2e>
		*opcode = net_buf_simple_pull_u8(buf) << 16;
    ce10:	4620      	mov	r0, r4
    ce12:	f010 fac1 	bl	1d398 <net_buf_simple_pull_u8>
    ce16:	4607      	mov	r7, r0
		*opcode |= net_buf_simple_pull_le16(buf);
    ce18:	4620      	mov	r0, r4
    ce1a:	f010 fac5 	bl	1d3a8 <net_buf_simple_pull_le16>
    ce1e:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
		return 0;
    ce22:	e7d3      	b.n	cdcc <bt_mesh_model_recv+0x4c>
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
    ce24:	68d8      	ldr	r0, [r3, #12]
    ce26:	eb00 130a 	add.w	r3, r0, sl, lsl #4
			models = elem->vnd_models;
    ce2a:	e9d3 2602 	ldrd	r2, r6, [r3, #8]
		if (BT_MESH_MODEL_OP_LEN(opcode) < 3) {
    ce2e:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
			count = elem->model_count;
    ce32:	bf36      	itet	cc
    ce34:	791b      	ldrbcc	r3, [r3, #4]
			count = elem->vnd_model_count;
    ce36:	795b      	ldrbcs	r3, [r3, #5]
			models = elem->models;
    ce38:	4616      	movcc	r6, r2
	for (i = 0U; i < model_count; i++) {
    ce3a:	eb06 1243 	add.w	r2, r6, r3, lsl #5
    ce3e:	42b2      	cmp	r2, r6
    ce40:	d102      	bne.n	ce48 <bt_mesh_model_recv+0xc8>
	for (i = 0; i < dev_comp->elem_count; i++) {
    ce42:	f10a 0a01 	add.w	sl, sl, #1
    ce46:	e7c7      	b.n	cdd8 <bt_mesh_model_recv+0x58>
		for (op = (*model)->op; op->func; op++) {
    ce48:	6975      	ldr	r5, [r6, #20]
    ce4a:	68a9      	ldr	r1, [r5, #8]
    ce4c:	b909      	cbnz	r1, ce52 <bt_mesh_model_recv+0xd2>
	for (i = 0U; i < model_count; i++) {
    ce4e:	3620      	adds	r6, #32
    ce50:	e7f5      	b.n	ce3e <bt_mesh_model_recv+0xbe>
			if (op->opcode == opcode) {
    ce52:	6829      	ldr	r1, [r5, #0]
    ce54:	42b9      	cmp	r1, r7
    ce56:	d025      	beq.n	cea4 <bt_mesh_model_recv+0x124>
		for (op = (*model)->op; op->func; op++) {
    ce58:	350c      	adds	r5, #12
    ce5a:	e7f6      	b.n	ce4a <bt_mesh_model_recv+0xca>
	} else if (BT_MESH_ADDR_IS_GROUP(dst) || BT_MESH_ADDR_IS_VIRTUAL(dst)) {
    ce5c:	f481 4200 	eor.w	r2, r1, #32768	; 0x8000
    ce60:	f5b2 4ffe 	cmp.w	r2, #32512	; 0x7f00
    ce64:	d806      	bhi.n	ce74 <bt_mesh_model_recv+0xf4>
		return !!bt_mesh_model_find_group(&mod, dst);
    ce66:	a803      	add	r0, sp, #12
    ce68:	f00e fee0 	bl	1bc2c <bt_mesh_model_find_group>
    ce6c:	3800      	subs	r0, #0
    ce6e:	bf18      	it	ne
    ce70:	2001      	movne	r0, #1
    ce72:	e03c      	b.n	ceee <bt_mesh_model_recv+0x16e>
	return mod->elem_idx == 0;
    ce74:	7930      	ldrb	r0, [r6, #4]
    ce76:	fab0 f080 	clz	r0, r0
    ce7a:	0940      	lsrs	r0, r0, #5
    ce7c:	e037      	b.n	ceee <bt_mesh_model_recv+0x16e>
	state->offset = net_buf_simple_headroom(buf);
    ce7e:	4620      	mov	r0, r4
    ce80:	f010 faae 	bl	1d3e0 <net_buf_simple_headroom>
		op->func(model, &rx->ctx, buf);
    ce84:	68ab      	ldr	r3, [r5, #8]
	state->len = buf->len;
    ce86:	f8b4 b004 	ldrh.w	fp, [r4, #4]
	state->offset = net_buf_simple_headroom(buf);
    ce8a:	4681      	mov	r9, r0
    ce8c:	4622      	mov	r2, r4
    ce8e:	4630      	mov	r0, r6
    ce90:	f108 0104 	add.w	r1, r8, #4
    ce94:	4798      	blx	r3
	buf->data = buf->__buf + state->offset;
    ce96:	68a0      	ldr	r0, [r4, #8]
	buf->len = state->len;
    ce98:	f8a4 b004 	strh.w	fp, [r4, #4]
	buf->data = buf->__buf + state->offset;
    ce9c:	fa10 f089 	uxtah	r0, r0, r9
    cea0:	6020      	str	r0, [r4, #0]
	buf->len = state->len;
    cea2:	e7ce      	b.n	ce42 <bt_mesh_model_recv+0xc2>
		if (!model_has_key(model, rx->ctx.app_idx)) {
    cea4:	f8b8 2006 	ldrh.w	r2, [r8, #6]
		if (mod->keys[i] == key ||
    cea8:	89b1      	ldrh	r1, [r6, #12]
    ceaa:	428a      	cmp	r2, r1
    ceac:	d012      	beq.n	ced4 <bt_mesh_model_recv+0x154>
    ceae:	f64f 7cfc 	movw	ip, #65532	; 0xfffc
    ceb2:	4561      	cmp	r1, ip
    ceb4:	d103      	bne.n	cebe <bt_mesh_model_recv+0x13e>
		     BT_MESH_IS_DEV_KEY(key))) {
    ceb6:	1cd1      	adds	r1, r2, #3
		    (mod->keys[i] == BT_MESH_KEY_DEV_ANY &&
    ceb8:	b289      	uxth	r1, r1
    ceba:	2901      	cmp	r1, #1
    cebc:	d90a      	bls.n	ced4 <bt_mesh_model_recv+0x154>
		if (mod->keys[i] == key ||
    cebe:	89f1      	ldrh	r1, [r6, #14]
    cec0:	428a      	cmp	r2, r1
    cec2:	d007      	beq.n	ced4 <bt_mesh_model_recv+0x154>
    cec4:	f64f 7cfc 	movw	ip, #65532	; 0xfffc
    cec8:	4561      	cmp	r1, ip
    ceca:	d1ba      	bne.n	ce42 <bt_mesh_model_recv+0xc2>
		     BT_MESH_IS_DEV_KEY(key))) {
    cecc:	3203      	adds	r2, #3
		    (mod->keys[i] == BT_MESH_KEY_DEV_ANY &&
    cece:	b292      	uxth	r2, r2
    ced0:	2a01      	cmp	r2, #1
    ced2:	d8b6      	bhi.n	ce42 <bt_mesh_model_recv+0xc2>
	if (BT_MESH_ADDR_IS_UNICAST(dst)) {
    ced4:	f9b8 200a 	ldrsh.w	r2, [r8, #10]
		if (!model_has_dst(model, rx->ctx.recv_dst)) {
    ced8:	f8b8 100a 	ldrh.w	r1, [r8, #10]
    cedc:	9603      	str	r6, [sp, #12]
	if (BT_MESH_ADDR_IS_UNICAST(dst)) {
    cede:	2a00      	cmp	r2, #0
    cee0:	ddbc      	ble.n	ce5c <bt_mesh_model_recv+0xdc>
		return (dev_comp->elem[mod->elem_idx].addr == dst);
    cee2:	7932      	ldrb	r2, [r6, #4]
    cee4:	0112      	lsls	r2, r2, #4
    cee6:	5a80      	ldrh	r0, [r0, r2]
    cee8:	1a43      	subs	r3, r0, r1
    ceea:	4258      	negs	r0, r3
    ceec:	4158      	adcs	r0, r3
		if (!model_has_dst(model, rx->ctx.recv_dst)) {
    ceee:	2800      	cmp	r0, #0
    cef0:	d0a7      	beq.n	ce42 <bt_mesh_model_recv+0xc2>
		if (buf->len < op->min_len) {
    cef2:	88a1      	ldrh	r1, [r4, #4]
    cef4:	686a      	ldr	r2, [r5, #4]
    cef6:	4291      	cmp	r1, r2
    cef8:	d2c1      	bcs.n	ce7e <bt_mesh_model_recv+0xfe>
			BT_ERR("Too short message for OpCode 0x%08x", opcode);
    cefa:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    cefe:	4809      	ldr	r0, [pc, #36]	; (cf24 <bt_mesh_model_recv+0x1a4>)
    cf00:	4639      	mov	r1, r7
    cf02:	f00b ff83 	bl	18e0c <log_1>
			continue;
    cf06:	e79c      	b.n	ce42 <bt_mesh_model_recv+0xc2>
    cf08:	0001e518 	.word	0x0001e518
    cf0c:	0001e408 	.word	0x0001e408
    cf10:	000212c7 	.word	0x000212c7
    cf14:	00021325 	.word	0x00021325
    cf18:	20001c24 	.word	0x20001c24
    cf1c:	000212db 	.word	0x000212db
    cf20:	00021300 	.word	0x00021300
    cf24:	0002133d 	.word	0x0002133d

0000cf28 <bt_mesh_model_settings_commit>:
	}
}

void bt_mesh_model_settings_commit(void)
{
	bt_mesh_model_foreach(commit_mod, NULL);
    cf28:	4801      	ldr	r0, [pc, #4]	; (cf30 <bt_mesh_model_settings_commit+0x8>)
    cf2a:	2100      	movs	r1, #0
    cf2c:	f7ff bd0c 	b.w	c948 <bt_mesh_model_foreach>
    cf30:	0001bbbd 	.word	0x0001bbbd

0000cf34 <app_key_evt>:
	mod_unbind(mod, *app_idx, true);
}

static void app_key_evt(uint16_t app_idx, uint16_t net_idx,
			enum bt_mesh_key_evt evt)
{
    cf34:	b507      	push	{r0, r1, r2, lr}
	if (evt == BT_MESH_KEY_DELETED) {
    cf36:	2a01      	cmp	r2, #1
{
    cf38:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (evt == BT_MESH_KEY_DELETED) {
    cf3c:	d104      	bne.n	cf48 <app_key_evt+0x14>
		bt_mesh_model_foreach(&mod_app_key_del, &app_idx);
    cf3e:	4804      	ldr	r0, [pc, #16]	; (cf50 <app_key_evt+0x1c>)
    cf40:	f10d 0106 	add.w	r1, sp, #6
    cf44:	f7ff fd00 	bl	c948 <bt_mesh_model_foreach>
	}
}
    cf48:	b003      	add	sp, #12
    cf4a:	f85d fb04 	ldr.w	pc, [sp], #4
    cf4e:	bf00      	nop
    cf50:	0001bda5 	.word	0x0001bda5

0000cf54 <bt_mesh_adv_update>:
	z_impl_k_queue_cancel_wait(queue);
    cf54:	4801      	ldr	r0, [pc, #4]	; (cf5c <bt_mesh_adv_update+0x8>)
    cf56:	f010 bd14 	b.w	1d982 <z_impl_k_queue_cancel_wait>
    cf5a:	bf00      	nop
    cf5c:	20000bd4 	.word	0x20000bd4

0000cf60 <bt_mesh_adv_enable>:
			NULL, NULL, NULL, K_PRIO_COOP(7), 0, K_FOREVER);
	k_thread_name_set(&adv_thread_data, "BT Mesh adv");
}

int bt_mesh_adv_enable(void)
{
    cf60:	b508      	push	{r3, lr}
	z_impl_k_thread_start(thread);
    cf62:	4802      	ldr	r0, [pc, #8]	; (cf6c <bt_mesh_adv_enable+0xc>)
    cf64:	f010 fc88 	bl	1d878 <z_impl_k_thread_start>
	k_thread_start(&adv_thread_data);
	return 0;
}
    cf68:	2000      	movs	r0, #0
    cf6a:	bd08      	pop	{r3, pc}
    cf6c:	200013b8 	.word	0x200013b8

0000cf70 <mesh_commit>:

	return 0;
}

static int mesh_commit(void)
{
    cf70:	b508      	push	{r3, lr}
	if (!bt_mesh_subnet_next(NULL)) {
    cf72:	2000      	movs	r0, #0
    cf74:	f7fd fe68 	bl	ac48 <bt_mesh_subnet_next>
    cf78:	b1a8      	cbz	r0, cfa6 <mesh_commit+0x36>
		/* Nothing to do since we're not yet provisioned */
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT)) {
		bt_mesh_proxy_prov_disable(true);
    cf7a:	2001      	movs	r0, #1
    cf7c:	f001 fa1c 	bl	e3b8 <bt_mesh_proxy_prov_disable>
	}

	bt_mesh_net_settings_commit();
    cf80:	f7fd fc5c 	bl	a83c <bt_mesh_net_settings_commit>
	bt_mesh_model_settings_commit();
    cf84:	f7ff ffd0 	bl	cf28 <bt_mesh_model_settings_commit>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cf88:	f3bf 8f5b 	dmb	ish
    cf8c:	4b07      	ldr	r3, [pc, #28]	; (cfac <mesh_commit+0x3c>)
    cf8e:	e853 2f00 	ldrex	r2, [r3]
    cf92:	f042 0201 	orr.w	r2, r2, #1
    cf96:	e843 2100 	strex	r1, r2, [r3]
    cf9a:	2900      	cmp	r1, #0
    cf9c:	d1f7      	bne.n	cf8e <mesh_commit+0x1e>
    cf9e:	f3bf 8f5b 	dmb	ish

	atomic_set_bit(bt_mesh.flags, BT_MESH_VALID);

	bt_mesh_start();
    cfa2:	f7fc fabf 	bl	9524 <bt_mesh_start>

	return 0;
}
    cfa6:	2000      	movs	r0, #0
    cfa8:	bd08      	pop	{r3, pc}
    cfaa:	bf00      	nop
    cfac:	200011d8 	.word	0x200011d8

0000cfb0 <bt_mesh_settings_set>:
{
    cfb0:	b538      	push	{r3, r4, r5, lr}
    cfb2:	4604      	mov	r4, r0
    cfb4:	4608      	mov	r0, r1
    cfb6:	4611      	mov	r1, r2
	len = read_cb(cb_arg, out, read_len);
    cfb8:	461a      	mov	r2, r3
{
    cfba:	461d      	mov	r5, r3
	len = read_cb(cb_arg, out, read_len);
    cfbc:	47a0      	blx	r4
	if (len < 0) {
    cfbe:	1e04      	subs	r4, r0, #0
    cfc0:	da0c      	bge.n	cfdc <bt_mesh_settings_set+0x2c>
    cfc2:	4a10      	ldr	r2, [pc, #64]	; (d004 <bt_mesh_settings_set+0x54>)
    cfc4:	4b10      	ldr	r3, [pc, #64]	; (d008 <bt_mesh_settings_set+0x58>)
		BT_ERR("Failed to read value (err %zd)", len);
    cfc6:	4811      	ldr	r0, [pc, #68]	; (d00c <bt_mesh_settings_set+0x5c>)
    cfc8:	1ad2      	subs	r2, r2, r3
    cfca:	08d2      	lsrs	r2, r2, #3
    cfcc:	0192      	lsls	r2, r2, #6
    cfce:	f042 0201 	orr.w	r2, r2, #1
    cfd2:	4621      	mov	r1, r4
    cfd4:	f00b ff1a 	bl	18e0c <log_1>
}
    cfd8:	4620      	mov	r0, r4
    cfda:	bd38      	pop	{r3, r4, r5, pc}
	if (len != read_len) {
    cfdc:	42ac      	cmp	r4, r5
    cfde:	d00e      	beq.n	cffe <bt_mesh_settings_set+0x4e>
    cfe0:	4b09      	ldr	r3, [pc, #36]	; (d008 <bt_mesh_settings_set+0x58>)
    cfe2:	4908      	ldr	r1, [pc, #32]	; (d004 <bt_mesh_settings_set+0x54>)
		BT_ERR("Unexpected value length (%zd != %zu)", len, read_len);
    cfe4:	480a      	ldr	r0, [pc, #40]	; (d010 <bt_mesh_settings_set+0x60>)
    cfe6:	1ac9      	subs	r1, r1, r3
    cfe8:	08c9      	lsrs	r1, r1, #3
    cfea:	0189      	lsls	r1, r1, #6
    cfec:	f041 0301 	orr.w	r3, r1, #1
    cff0:	462a      	mov	r2, r5
    cff2:	4621      	mov	r1, r4
    cff4:	f00b ff1e 	bl	18e34 <log_2>
		return -EINVAL;
    cff8:	f06f 0415 	mvn.w	r4, #21
    cffc:	e7ec      	b.n	cfd8 <bt_mesh_settings_set+0x28>
	return 0;
    cffe:	2400      	movs	r4, #0
    d000:	e7ea      	b.n	cfd8 <bt_mesh_settings_set+0x28>
    d002:	bf00      	nop
    d004:	0001e5c8 	.word	0x0001e5c8
    d008:	0001e408 	.word	0x0001e408
    d00c:	00021256 	.word	0x00021256
    d010:	000213c6 	.word	0x000213c6

0000d014 <bt_mesh_settings_store_schedule>:
			      BIT(BT_MESH_SETTINGS_CFG_PENDING)      |      \
			      BIT(BT_MESH_SETTINGS_MOD_PENDING)      |      \
			      BIT(BT_MESH_SETTINGS_VA_PENDING))

void bt_mesh_settings_store_schedule(enum bt_mesh_settings_flag flag)
{
    d014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    d018:	4b2a      	ldr	r3, [pc, #168]	; (d0c4 <bt_mesh_settings_store_schedule+0xb0>)
    d01a:	f3bf 8f5b 	dmb	ish
    d01e:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    d020:	2101      	movs	r1, #1
    d022:	f000 001f 	and.w	r0, r0, #31
    d026:	fa01 f000 	lsl.w	r0, r1, r0
    d02a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    d02e:	e852 1f00 	ldrex	r1, [r2]
    d032:	4301      	orrs	r1, r0
    d034:	e842 1400 	strex	r4, r1, [r2]
    d038:	2c00      	cmp	r4, #0
    d03a:	d1f8      	bne.n	d02e <bt_mesh_settings_store_schedule+0x1a>
    d03c:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d040:	f3bf 8f5b 	dmb	ish
    d044:	681a      	ldr	r2, [r3, #0]
    d046:	f3bf 8f5b 	dmb	ish
	uint32_t timeout_ms, remaining_ms;

	atomic_set_bit(pending_flags, flag);

	if (atomic_get(pending_flags) & NO_WAIT_PENDING_BITS) {
    d04a:	f412 6f87 	tst.w	r2, #1080	; 0x438
    d04e:	d133      	bne.n	d0b8 <bt_mesh_settings_store_schedule+0xa4>
    d050:	f3bf 8f5b 	dmb	ish
    d054:	681a      	ldr	r2, [r3, #0]
    d056:	f3bf 8f5b 	dmb	ish
		timeout_ms = 0;
	} else if (CONFIG_BT_MESH_RPL_STORE_TIMEOUT >= 0 &&
    d05a:	07d2      	lsls	r2, r2, #31
    d05c:	d421      	bmi.n	d0a2 <bt_mesh_settings_store_schedule+0x8e>
		   atomic_test_bit(pending_flags, BT_MESH_SETTINGS_RPL_PENDING) &&
		   !(atomic_get(pending_flags) & GENERIC_PENDING_BITS)) {
		timeout_ms = CONFIG_BT_MESH_RPL_STORE_TIMEOUT * MSEC_PER_SEC;
	} else {
		timeout_ms = CONFIG_BT_MESH_STORE_TIMEOUT * MSEC_PER_SEC;
    d05e:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
    d062:	4819      	ldr	r0, [pc, #100]	; (d0c8 <bt_mesh_settings_store_schedule+0xb4>)
    d064:	f010 ff24 	bl	1deb0 <z_timeout_remaining>
    d068:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    d06c:	4604      	mov	r4, r0

	/* If the new deadline is sooner, override any existing
	 * deadline; otherwise schedule without changing any existing
	 * deadline.
	 */
	if (timeout_ms < remaining_ms) {
    d06e:	2100      	movs	r1, #0
    d070:	f240 30e7 	movw	r0, #999	; 0x3e7
    d074:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d078:	2300      	movs	r3, #0
    d07a:	fbe6 0105 	umlal	r0, r1, r6, r5
    d07e:	f7f3 f82f 	bl	e0 <__aeabi_uldivmod>
    d082:	4602      	mov	r2, r0
    d084:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    d088:	fba4 6700 	umull	r6, r7, r4, r0
    d08c:	0bf0      	lsrs	r0, r6, #15
    d08e:	ea40 4047 	orr.w	r0, r0, r7, lsl #17
    d092:	4285      	cmp	r5, r0
    d094:	460b      	mov	r3, r1
		k_work_reschedule(&pending_store, K_MSEC(timeout_ms));
    d096:	480d      	ldr	r0, [pc, #52]	; (d0cc <bt_mesh_settings_store_schedule+0xb8>)
	if (timeout_ms < remaining_ms) {
    d098:	d210      	bcs.n	d0bc <bt_mesh_settings_store_schedule+0xa8>
	} else {
		k_work_schedule(&pending_store, K_MSEC(timeout_ms));
	}
}
    d09a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_reschedule(&pending_store, K_MSEC(timeout_ms));
    d09e:	f00a bba9 	b.w	177f4 <k_work_reschedule>
    d0a2:	f3bf 8f5b 	dmb	ish
    d0a6:	681a      	ldr	r2, [r3, #0]
    d0a8:	f3bf 8f5b 	dmb	ish
		   atomic_test_bit(pending_flags, BT_MESH_SETTINGS_RPL_PENDING) &&
    d0ac:	f240 33c6 	movw	r3, #966	; 0x3c6
    d0b0:	421a      	tst	r2, r3
    d0b2:	d1d4      	bne.n	d05e <bt_mesh_settings_store_schedule+0x4a>
		timeout_ms = CONFIG_BT_MESH_RPL_STORE_TIMEOUT * MSEC_PER_SEC;
    d0b4:	4d06      	ldr	r5, [pc, #24]	; (d0d0 <bt_mesh_settings_store_schedule+0xbc>)
    d0b6:	e7d4      	b.n	d062 <bt_mesh_settings_store_schedule+0x4e>
		timeout_ms = 0;
    d0b8:	2500      	movs	r5, #0
    d0ba:	e7d2      	b.n	d062 <bt_mesh_settings_store_schedule+0x4e>
}
    d0bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_schedule(&pending_store, K_MSEC(timeout_ms));
    d0c0:	f00a bb64 	b.w	1778c <k_work_schedule>
    d0c4:	20001c28 	.word	0x20001c28
    d0c8:	20001448 	.word	0x20001448
    d0cc:	20001438 	.word	0x20001438
    d0d0:	000927c0 	.word	0x000927c0

0000d0d4 <bt_mesh_prov_get>:
}

const struct bt_mesh_prov *bt_mesh_prov_get(void)
{
	return bt_mesh_prov;
}
    d0d4:	4b01      	ldr	r3, [pc, #4]	; (d0dc <bt_mesh_prov_get+0x8>)
    d0d6:	6818      	ldr	r0, [r3, #0]
    d0d8:	4770      	bx	lr
    d0da:	bf00      	nop
    d0dc:	20001c2c 	.word	0x20001c2c

0000d0e0 <bt_mesh_prov_complete>:
	return &prov_bearer_cb;
}

void bt_mesh_prov_complete(uint16_t net_idx, uint16_t addr)
{
	if (bt_mesh_prov->complete) {
    d0e0:	4b02      	ldr	r3, [pc, #8]	; (d0ec <bt_mesh_prov_complete+0xc>)
    d0e2:	681b      	ldr	r3, [r3, #0]
    d0e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    d0e6:	b103      	cbz	r3, d0ea <bt_mesh_prov_complete+0xa>
		bt_mesh_prov->complete(net_idx, addr);
    d0e8:	4718      	bx	r3
	}
}
    d0ea:	4770      	bx	lr
    d0ec:	20001c2c 	.word	0x20001c2c

0000d0f0 <send_reliable>:
/*******************************************************************************
 * TX
 ******************************************************************************/

static void send_reliable(void)
{
    d0f0:	b570      	push	{r4, r5, r6, lr}
    d0f2:	4d0e      	ldr	r5, [pc, #56]	; (d12c <send_reliable+0x3c>)
		BT_DBG("%u bytes: %s", buf->len, bt_hex(buf->data, buf->len));

		if (i + 1 < ARRAY_SIZE(link.tx.buf) && link.tx.buf[i + 1]) {
			bt_mesh_adv_send(buf, NULL, NULL);
		} else {
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
    d0f4:	4e0e      	ldr	r6, [pc, #56]	; (d130 <send_reliable+0x40>)
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
    d0f6:	2400      	movs	r4, #0
		struct net_buf *buf = link.tx.buf[i];
    d0f8:	f855 0b04 	ldr.w	r0, [r5], #4
		if (!buf) {
    d0fc:	b1a0      	cbz	r0, d128 <send_reliable+0x38>
		if (BT_MESH_ADV(buf)->busy) {
    d0fe:	6943      	ldr	r3, [r0, #20]
    d100:	7a1a      	ldrb	r2, [r3, #8]
    d102:	f012 0204 	ands.w	r2, r2, #4
    d106:	f104 0401 	add.w	r4, r4, #1
    d10a:	d10b      	bne.n	d124 <send_reliable+0x34>
		if (i + 1 < ARRAY_SIZE(link.tx.buf) && link.tx.buf[i + 1]) {
    d10c:	2c03      	cmp	r4, #3
    d10e:	d005      	beq.n	d11c <send_reliable+0x2c>
    d110:	682b      	ldr	r3, [r5, #0]
    d112:	b11b      	cbz	r3, d11c <send_reliable+0x2c>
			bt_mesh_adv_send(buf, NULL, NULL);
    d114:	4611      	mov	r1, r2
    d116:	f7fc fc33 	bl	9980 <bt_mesh_adv_send>
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
    d11a:	e7ed      	b.n	d0f8 <send_reliable+0x8>
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
    d11c:	2200      	movs	r2, #0
    d11e:	4631      	mov	r1, r6
    d120:	f7fc fc2e 	bl	9980 <bt_mesh_adv_send>
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
    d124:	2c03      	cmp	r4, #3
    d126:	d1e7      	bne.n	d0f8 <send_reliable+0x8>
		}
	}
}
    d128:	bd70      	pop	{r4, r5, r6, pc}
    d12a:	bf00      	nop
    d12c:	20000144 	.word	0x20000144
    d130:	20000498 	.word	0x20000498

0000d134 <free_segments>:
{
    d134:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
    d136:	2400      	movs	r4, #0
    d138:	4d08      	ldr	r5, [pc, #32]	; (d15c <free_segments+0x28>)
		link.tx.buf[i] = NULL;
    d13a:	4626      	mov	r6, r4
		struct net_buf *buf = link.tx.buf[i];
    d13c:	f855 0b04 	ldr.w	r0, [r5], #4
		if (!buf) {
    d140:	b158      	cbz	r0, d15a <free_segments+0x26>
		BT_MESH_ADV(buf)->busy = 0U;
    d142:	6943      	ldr	r3, [r0, #20]
		link.tx.buf[i] = NULL;
    d144:	f845 6c04 	str.w	r6, [r5, #-4]
		BT_MESH_ADV(buf)->busy = 0U;
    d148:	7a1a      	ldrb	r2, [r3, #8]
    d14a:	f366 0282 	bfi	r2, r6, #2, #1
    d14e:	721a      	strb	r2, [r3, #8]
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
    d150:	3401      	adds	r4, #1
		net_buf_unref(buf);
    d152:	f008 fb03 	bl	1575c <net_buf_unref>
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
    d156:	2c03      	cmp	r4, #3
    d158:	d1f0      	bne.n	d13c <free_segments+0x8>
}
    d15a:	bd70      	pop	{r4, r5, r6, pc}
    d15c:	20000144 	.word	0x20000144

0000d160 <prov_clear_tx>:
{
    d160:	b508      	push	{r3, lr}
	(void)k_work_cancel_delayable(&link.tx.retransmit);
    d162:	4803      	ldr	r0, [pc, #12]	; (d170 <prov_clear_tx+0x10>)
    d164:	f010 fd3b 	bl	1dbde <k_work_cancel_delayable>
}
    d168:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	free_segments();
    d16c:	f7ff bfe2 	b.w	d134 <free_segments>
    d170:	20000158 	.word	0x20000158

0000d174 <buf_sent>:
	if (!link.tx.buf[0]) {
    d174:	4804      	ldr	r0, [pc, #16]	; (d188 <buf_sent+0x14>)
    d176:	6a43      	ldr	r3, [r0, #36]	; 0x24
    d178:	b12b      	cbz	r3, d186 <buf_sent+0x12>
	k_work_reschedule(&link.tx.retransmit, RETRANSMIT_TIMEOUT);
    d17a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    d17e:	2300      	movs	r3, #0
    d180:	3038      	adds	r0, #56	; 0x38
    d182:	f00a bb37 	b.w	177f4 <k_work_reschedule>
}
    d186:	4770      	bx	lr
    d188:	20000120 	.word	0x20000120

0000d18c <adv_buf_create>:
{
    d18c:	b510      	push	{r4, lr}
	buf = bt_mesh_adv_create(BT_MESH_ADV_PROV,
    d18e:	f040 0108 	orr.w	r1, r0, #8
    d192:	f243 3234 	movw	r2, #13108	; 0x3334
    d196:	2300      	movs	r3, #0
    d198:	2000      	movs	r0, #0
    d19a:	f7fc fbe1 	bl	9960 <bt_mesh_adv_create>
	if (!buf) {
    d19e:	4604      	mov	r4, r0
    d1a0:	b948      	cbnz	r0, d1b6 <adv_buf_create+0x2a>
    d1a2:	4906      	ldr	r1, [pc, #24]	; (d1bc <adv_buf_create+0x30>)
    d1a4:	4b06      	ldr	r3, [pc, #24]	; (d1c0 <adv_buf_create+0x34>)
		BT_ERR("Out of provisioning buffers");
    d1a6:	4807      	ldr	r0, [pc, #28]	; (d1c4 <adv_buf_create+0x38>)
    d1a8:	1ac9      	subs	r1, r1, r3
    d1aa:	08c9      	lsrs	r1, r1, #3
    d1ac:	0189      	lsls	r1, r1, #6
    d1ae:	f041 0101 	orr.w	r1, r1, #1
    d1b2:	f00b fe1e 	bl	18df2 <log_0>
}
    d1b6:	4620      	mov	r0, r4
    d1b8:	bd10      	pop	{r4, pc}
    d1ba:	bf00      	nop
    d1bc:	0001e598 	.word	0x0001e598
    d1c0:	0001e408 	.word	0x0001e408
    d1c4:	00021425 	.word	0x00021425

0000d1c8 <atomic_get.constprop.0>:
    d1c8:	4b03      	ldr	r3, [pc, #12]	; (d1d8 <atomic_get.constprop.0+0x10>)
    d1ca:	f3bf 8f5b 	dmb	ish
    d1ce:	6858      	ldr	r0, [r3, #4]
    d1d0:	f3bf 8f5b 	dmb	ish
}
    d1d4:	4770      	bx	lr
    d1d6:	bf00      	nop
    d1d8:	20000120 	.word	0x20000120

0000d1dc <prov_link_accept>:

	return 0;
}

static int prov_link_accept(const struct prov_bearer_cb *cb, void *cb_data)
{
    d1dc:	b570      	push	{r4, r5, r6, lr}
    d1de:	4606      	mov	r6, r0
    d1e0:	460d      	mov	r5, r1
	int err;

	err = bt_mesh_adv_enable();
    d1e2:	f7ff febd 	bl	cf60 <bt_mesh_adv_enable>
	if (err) {
    d1e6:	4604      	mov	r4, r0
    d1e8:	b158      	cbz	r0, d202 <prov_link_accept+0x26>
    d1ea:	4910      	ldr	r1, [pc, #64]	; (d22c <prov_link_accept+0x50>)
    d1ec:	4b10      	ldr	r3, [pc, #64]	; (d230 <prov_link_accept+0x54>)
		BT_ERR("Failed enabling advertiser");
    d1ee:	4811      	ldr	r0, [pc, #68]	; (d234 <prov_link_accept+0x58>)
    d1f0:	1ac9      	subs	r1, r1, r3
    d1f2:	08c9      	lsrs	r1, r1, #3
    d1f4:	0189      	lsls	r1, r1, #6
    d1f6:	f041 0101 	orr.w	r1, r1, #1
    d1fa:	f00b fdfa 	bl	18df2 <log_0>
	bt_mesh_scan_enable();
	/* Enable unprovisioned beacon sending */
	bt_mesh_beacon_enable();

	return 0;
}
    d1fe:	4620      	mov	r0, r4
    d200:	bd70      	pop	{r4, r5, r6, pc}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    d202:	f7ff ffe1 	bl	d1c8 <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
    d206:	07c3      	lsls	r3, r0, #31
    d208:	d40c      	bmi.n	d224 <prov_link_accept+0x48>
	link.rx.id = XACT_ID_MAX;
    d20a:	4b0b      	ldr	r3, [pc, #44]	; (d238 <prov_link_accept+0x5c>)
    d20c:	227f      	movs	r2, #127	; 0x7f
    d20e:	741a      	strb	r2, [r3, #16]
	link.tx.id = XACT_ID_NVAL;
    d210:	22ff      	movs	r2, #255	; 0xff
	link.cb_data = cb_data;
    d212:	e9c3 6502 	strd	r6, r5, [r3, #8]
	link.tx.id = XACT_ID_NVAL;
    d216:	f883 2020 	strb.w	r2, [r3, #32]
	bt_mesh_scan_enable();
    d21a:	f7fc fbc7 	bl	99ac <bt_mesh_scan_enable>
	bt_mesh_beacon_enable();
    d21e:	f7fc fd9f 	bl	9d60 <bt_mesh_beacon_enable>
	return 0;
    d222:	e7ec      	b.n	d1fe <prov_link_accept+0x22>
		return -EBUSY;
    d224:	f06f 040f 	mvn.w	r4, #15
    d228:	e7e9      	b.n	d1fe <prov_link_accept+0x22>
    d22a:	bf00      	nop
    d22c:	0001e598 	.word	0x0001e598
    d230:	0001e408 	.word	0x0001e408
    d234:	00020418 	.word	0x00020418
    d238:	20000120 	.word	0x20000120

0000d23c <reset_adv_link>:
{
    d23c:	b510      	push	{r4, lr}
	(void)k_work_cancel_delayable(&link.prot_timer);
    d23e:	4c18      	ldr	r4, [pc, #96]	; (d2a0 <reset_adv_link+0x64>)
	prov_clear_tx();
    d240:	f7ff ff8e 	bl	d160 <prov_clear_tx>
	(void)k_work_cancel_delayable(&link.prot_timer);
    d244:	f104 0068 	add.w	r0, r4, #104	; 0x68
    d248:	f010 fcc9 	bl	1dbde <k_work_cancel_delayable>
    d24c:	f7ff ffbc 	bl	d1c8 <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, ADV_PROVISIONER)) {
    d250:	0683      	lsls	r3, r0, #26
    d252:	f3c0 1240 	ubfx	r2, r0, #5, #1
    d256:	d510      	bpl.n	d27a <reset_adv_link+0x3e>
		(void)memset(&link, 0, offsetof(struct pb_adv, tx.retransmit));
    d258:	2238      	movs	r2, #56	; 0x38
    d25a:	2100      	movs	r1, #0
    d25c:	4620      	mov	r0, r4
    d25e:	f00c fccc 	bl	19bfa <memset>
		link.rx.id = XACT_ID_NVAL;
    d262:	23ff      	movs	r3, #255	; 0xff
    d264:	7423      	strb	r3, [r4, #16]
	link.tx.pending_ack = XACT_ID_NVAL;
    d266:	23ff      	movs	r3, #255	; 0xff
    d268:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	link.rx.buf = &rx_buf;
    d26c:	4b0d      	ldr	r3, [pc, #52]	; (d2a4 <reset_adv_link+0x68>)
    d26e:	6163      	str	r3, [r4, #20]
	buf->len  = 0U;
    d270:	2200      	movs	r2, #0
    d272:	809a      	strh	r2, [r3, #4]
	buf->data = buf->__buf;
    d274:	689a      	ldr	r2, [r3, #8]
    d276:	601a      	str	r2, [r3, #0]
}
    d278:	bd10      	pop	{r4, pc}
		link.id = 0;
    d27a:	4623      	mov	r3, r4
    d27c:	f843 2b04 	str.w	r2, [r3], #4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    d280:	f3bf 8f5b 	dmb	ish
    d284:	e853 1f00 	ldrex	r1, [r3]
    d288:	e843 2000 	strex	r0, r2, [r3]
    d28c:	2800      	cmp	r0, #0
    d28e:	d1f9      	bne.n	d284 <reset_adv_link+0x48>
    d290:	f3bf 8f5b 	dmb	ish
		link.rx.id = XACT_ID_MAX;
    d294:	237f      	movs	r3, #127	; 0x7f
    d296:	7423      	strb	r3, [r4, #16]
		link.tx.id = XACT_ID_NVAL;
    d298:	23ff      	movs	r3, #255	; 0xff
    d29a:	f884 3020 	strb.w	r3, [r4, #32]
    d29e:	e7e2      	b.n	d266 <reset_adv_link+0x2a>
    d2a0:	20000120 	.word	0x20000120
    d2a4:	200004a0 	.word	0x200004a0

0000d2a8 <close_link>:
{
    d2a8:	b570      	push	{r4, r5, r6, lr}
	const struct prov_bearer_cb *cb = link.cb;
    d2aa:	4b06      	ldr	r3, [pc, #24]	; (d2c4 <close_link+0x1c>)
	void *cb_data = link.cb_data;
    d2ac:	e9d3 6502 	ldrd	r6, r5, [r3, #8]
{
    d2b0:	4604      	mov	r4, r0
	reset_adv_link();
    d2b2:	f7ff ffc3 	bl	d23c <reset_adv_link>
	cb->link_closed(&pb_adv, cb_data, reason);
    d2b6:	6873      	ldr	r3, [r6, #4]
    d2b8:	4803      	ldr	r0, [pc, #12]	; (d2c8 <close_link+0x20>)
    d2ba:	4622      	mov	r2, r4
    d2bc:	4629      	mov	r1, r5
}
    d2be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb->link_closed(&pb_adv, cb_data, reason);
    d2c2:	4718      	bx	r3
    d2c4:	20000120 	.word	0x20000120
    d2c8:	0001eb74 	.word	0x0001eb74

0000d2cc <gen_prov_ack>:
{
    d2cc:	b510      	push	{r4, lr}
	if (!link.tx.buf[0]) {
    d2ce:	4c0b      	ldr	r4, [pc, #44]	; (d2fc <gen_prov_ack+0x30>)
    d2d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d2d2:	b18b      	cbz	r3, d2f8 <gen_prov_ack+0x2c>
	if (rx->xact_id == link.tx.id) {
    d2d4:	7902      	ldrb	r2, [r0, #4]
    d2d6:	f894 3020 	ldrb.w	r3, [r4, #32]
    d2da:	429a      	cmp	r2, r3
    d2dc:	d10c      	bne.n	d2f8 <gen_prov_ack+0x2c>
    d2de:	f7ff ff73 	bl	d1c8 <atomic_get.constprop.0>
		if (!atomic_test_bit(link.flags, ADV_LINK_CLOSING)) {
    d2e2:	0743      	lsls	r3, r0, #29
    d2e4:	d401      	bmi.n	d2ea <gen_prov_ack+0x1e>
			prov_clear_tx();
    d2e6:	f7ff ff3b 	bl	d160 <prov_clear_tx>
		if (link.tx.cb) {
    d2ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
    d2ec:	b123      	cbz	r3, d2f8 <gen_prov_ack+0x2c>
			link.tx.cb(0, link.tx.cb_data);
    d2ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
    d2f0:	2000      	movs	r0, #0
}
    d2f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			link.tx.cb(0, link.tx.cb_data);
    d2f6:	4718      	bx	r3
}
    d2f8:	bd10      	pop	{r4, pc}
    d2fa:	bf00      	nop
    d2fc:	20000120 	.word	0x20000120

0000d300 <ack_complete>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d300:	4b06      	ldr	r3, [pc, #24]	; (d31c <ack_complete+0x1c>)
    d302:	f3bf 8f5b 	dmb	ish
    d306:	e853 2f00 	ldrex	r2, [r3]
    d30a:	f022 0210 	bic.w	r2, r2, #16
    d30e:	e843 2100 	strex	r1, r2, [r3]
    d312:	2900      	cmp	r1, #0
    d314:	d1f7      	bne.n	d306 <ack_complete+0x6>
    d316:	f3bf 8f5b 	dmb	ish
}
    d31a:	4770      	bx	lr
    d31c:	20000124 	.word	0x20000124

0000d320 <prov_failed>:
{
    d320:	b510      	push	{r4, lr}
	link.cb->error(&pb_adv, link.cb_data, err);
    d322:	4c0a      	ldr	r4, [pc, #40]	; (d34c <prov_failed+0x2c>)
    d324:	68a3      	ldr	r3, [r4, #8]
    d326:	68e1      	ldr	r1, [r4, #12]
    d328:	689b      	ldr	r3, [r3, #8]
{
    d32a:	4602      	mov	r2, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d32c:	3404      	adds	r4, #4
	link.cb->error(&pb_adv, link.cb_data, err);
    d32e:	4808      	ldr	r0, [pc, #32]	; (d350 <prov_failed+0x30>)
    d330:	4798      	blx	r3
    d332:	f3bf 8f5b 	dmb	ish
    d336:	e854 3f00 	ldrex	r3, [r4]
    d33a:	f043 0308 	orr.w	r3, r3, #8
    d33e:	e844 3200 	strex	r2, r3, [r4]
    d342:	2a00      	cmp	r2, #0
    d344:	d1f7      	bne.n	d336 <prov_failed+0x16>
    d346:	f3bf 8f5b 	dmb	ish
}
    d34a:	bd10      	pop	{r4, pc}
    d34c:	20000120 	.word	0x20000120
    d350:	0001eb74 	.word	0x0001eb74

0000d354 <gen_prov_ack_send>:
{
    d354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d358:	4e24      	ldr	r6, [pc, #144]	; (d3ec <gen_prov_ack_send+0x98>)
    d35a:	f3bf 8f5b 	dmb	ish
    d35e:	4607      	mov	r7, r0
    d360:	1d33      	adds	r3, r6, #4
    d362:	e853 2f00 	ldrex	r2, [r3]
    d366:	f042 0110 	orr.w	r1, r2, #16
    d36a:	e843 1000 	strex	r0, r1, [r3]
    d36e:	2800      	cmp	r0, #0
    d370:	d1f7      	bne.n	d362 <gen_prov_ack_send+0xe>
    d372:	f3bf 8f5b 	dmb	ish
	if (pending && link.tx.pending_ack == xact_id) {
    d376:	f012 0810 	ands.w	r8, r2, #16
    d37a:	461d      	mov	r5, r3
    d37c:	d003      	beq.n	d386 <gen_prov_ack_send+0x32>
    d37e:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
    d382:	42bb      	cmp	r3, r7
    d384:	d010      	beq.n	d3a8 <gen_prov_ack_send+0x54>
	buf = adv_buf_create(RETRANSMITS_ACK);
    d386:	2002      	movs	r0, #2
    d388:	f7ff ff00 	bl	d18c <adv_buf_create>
	if (!buf) {
    d38c:	4604      	mov	r4, r0
    d38e:	b968      	cbnz	r0, d3ac <gen_prov_ack_send+0x58>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d390:	f3bf 8f5b 	dmb	ish
    d394:	e855 3f00 	ldrex	r3, [r5]
    d398:	f023 0310 	bic.w	r3, r3, #16
    d39c:	e845 3200 	strex	r2, r3, [r5]
    d3a0:	2a00      	cmp	r2, #0
    d3a2:	d1f7      	bne.n	d394 <gen_prov_ack_send+0x40>
    d3a4:	f3bf 8f5b 	dmb	ish
}
    d3a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (pending) {
    d3ac:	f1b8 0f00 	cmp.w	r8, #0
    d3b0:	d119      	bne.n	d3e6 <gen_prov_ack_send+0x92>
		complete = &cb;
    d3b2:	4d0f      	ldr	r5, [pc, #60]	; (d3f0 <gen_prov_ack_send+0x9c>)
		link.tx.pending_ack = xact_id;
    d3b4:	f886 7021 	strb.w	r7, [r6, #33]	; 0x21
	net_buf_simple_add_be32(&buf->b, val);
    d3b8:	6831      	ldr	r1, [r6, #0]
    d3ba:	f104 0008 	add.w	r0, r4, #8
    d3be:	f00f ff9f 	bl	1d300 <net_buf_simple_add_be32>
	net_buf_add_u8(buf, xact_id);
    d3c2:	4639      	mov	r1, r7
    d3c4:	4620      	mov	r0, r4
    d3c6:	f00e fcfd 	bl	1bdc4 <net_buf_add_u8>
	net_buf_add_u8(buf, GPC_ACK);
    d3ca:	2101      	movs	r1, #1
    d3cc:	4620      	mov	r0, r4
    d3ce:	f00e fcf9 	bl	1bdc4 <net_buf_add_u8>
	bt_mesh_adv_send(buf, complete, NULL);
    d3d2:	4620      	mov	r0, r4
    d3d4:	4629      	mov	r1, r5
    d3d6:	2200      	movs	r2, #0
    d3d8:	f7fc fad2 	bl	9980 <bt_mesh_adv_send>
	net_buf_unref(buf);
    d3dc:	4620      	mov	r0, r4
}
    d3de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	net_buf_unref(buf);
    d3e2:	f008 b9bb 	b.w	1575c <net_buf_unref>
		complete = NULL;
    d3e6:	2500      	movs	r5, #0
    d3e8:	e7e6      	b.n	d3b8 <gen_prov_ack_send+0x64>
    d3ea:	bf00      	nop
    d3ec:	20000120 	.word	0x20000120
    d3f0:	0001eb4c 	.word	0x0001eb4c

0000d3f4 <prov_msg_recv>:
{
    d3f4:	b510      	push	{r4, lr}
	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
    d3f6:	4c1d      	ldr	r4, [pc, #116]	; (d46c <prov_msg_recv+0x78>)
    d3f8:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
    d3fc:	2300      	movs	r3, #0
    d3fe:	f104 0068 	add.w	r0, r4, #104	; 0x68
    d402:	f00a f9f7 	bl	177f4 <k_work_reschedule>
	if (!bt_mesh_fcs_check(link.rx.buf, link.rx.fcs)) {
    d406:	7ce1      	ldrb	r1, [r4, #19]
    d408:	6960      	ldr	r0, [r4, #20]
    d40a:	f7ff fa87 	bl	c91c <bt_mesh_fcs_check>
    d40e:	b958      	cbnz	r0, d428 <prov_msg_recv+0x34>
    d410:	4917      	ldr	r1, [pc, #92]	; (d470 <prov_msg_recv+0x7c>)
    d412:	4b18      	ldr	r3, [pc, #96]	; (d474 <prov_msg_recv+0x80>)
		BT_ERR("Incorrect FCS");
    d414:	4818      	ldr	r0, [pc, #96]	; (d478 <prov_msg_recv+0x84>)
    d416:	1ac9      	subs	r1, r1, r3
    d418:	08c9      	lsrs	r1, r1, #3
    d41a:	0189      	lsls	r1, r1, #6
}
    d41c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Incorrect FCS");
    d420:	f041 0101 	orr.w	r1, r1, #1
    d424:	f00b bce5 	b.w	18df2 <log_0>
	gen_prov_ack_send(link.rx.id);
    d428:	7c20      	ldrb	r0, [r4, #16]
    d42a:	f7ff ff93 	bl	d354 <gen_prov_ack_send>
    d42e:	f7ff fecb 	bl	d1c8 <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, ADV_LINK_INVALID)) {
    d432:	0703      	lsls	r3, r0, #28
    d434:	d511      	bpl.n	d45a <prov_msg_recv+0x66>
    d436:	4b0f      	ldr	r3, [pc, #60]	; (d474 <prov_msg_recv+0x80>)
    d438:	4a0d      	ldr	r2, [pc, #52]	; (d470 <prov_msg_recv+0x7c>)
		BT_WARN("Unexpected msg 0x%02x on invalidated link",
    d43a:	4810      	ldr	r0, [pc, #64]	; (d47c <prov_msg_recv+0x88>)
    d43c:	1ad2      	subs	r2, r2, r3
    d43e:	6963      	ldr	r3, [r4, #20]
    d440:	08d2      	lsrs	r2, r2, #3
    d442:	681b      	ldr	r3, [r3, #0]
    d444:	0192      	lsls	r2, r2, #6
    d446:	7819      	ldrb	r1, [r3, #0]
    d448:	f042 0202 	orr.w	r2, r2, #2
    d44c:	f00b fcde 	bl	18e0c <log_1>
}
    d450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		prov_failed(PROV_ERR_UNEXP_PDU);
    d454:	2003      	movs	r0, #3
    d456:	f7ff bf63 	b.w	d320 <prov_failed>
	link.cb->recv(&pb_adv, link.cb_data, link.rx.buf);
    d45a:	68a3      	ldr	r3, [r4, #8]
    d45c:	6962      	ldr	r2, [r4, #20]
    d45e:	68e1      	ldr	r1, [r4, #12]
    d460:	68db      	ldr	r3, [r3, #12]
    d462:	4807      	ldr	r0, [pc, #28]	; (d480 <prov_msg_recv+0x8c>)
}
    d464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	link.cb->recv(&pb_adv, link.cb_data, link.rx.buf);
    d468:	4718      	bx	r3
    d46a:	bf00      	nop
    d46c:	20000120 	.word	0x20000120
    d470:	0001e598 	.word	0x0001e598
    d474:	0001e408 	.word	0x0001e408
    d478:	00021441 	.word	0x00021441
    d47c:	0002144f 	.word	0x0002144f
    d480:	0001eb74 	.word	0x0001eb74

0000d484 <gen_prov_cont>:
{
    d484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d488:	4c44      	ldr	r4, [pc, #272]	; (d59c <gen_prov_cont+0x118>)
	uint8_t seg = CONT_SEG_INDEX(rx->gpc);
    d48a:	7947      	ldrb	r7, [r0, #5]
	if (!link.rx.seg && link.rx.id == rx->xact_id) {
    d48c:	f894 c011 	ldrb.w	ip, [r4, #17]
    d490:	7c22      	ldrb	r2, [r4, #16]
{
    d492:	460d      	mov	r5, r1
    d494:	4606      	mov	r6, r0
    d496:	7901      	ldrb	r1, [r0, #4]
	if (!link.rx.seg && link.rx.id == rx->xact_id) {
    d498:	f1bc 0f00 	cmp.w	ip, #0
    d49c:	d134      	bne.n	d508 <gen_prov_cont+0x84>
    d49e:	4291      	cmp	r1, r2
    d4a0:	d108      	bne.n	d4b4 <gen_prov_cont+0x30>
    d4a2:	f7ff fe91 	bl	d1c8 <atomic_get.constprop.0>
		if (!ack_pending()) {
    d4a6:	06c0      	lsls	r0, r0, #27
    d4a8:	d475      	bmi.n	d596 <gen_prov_cont+0x112>
			gen_prov_ack_send(rx->xact_id);
    d4aa:	7930      	ldrb	r0, [r6, #4]
}
    d4ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			gen_prov_ack_send(rx->xact_id);
    d4b0:	f7ff bf50 	b.w	d354 <gen_prov_ack_send>
	return (((id + 1) & XACT_ID_MAX) | (id & (XACT_ID_MAX+1)));
    d4b4:	b253      	sxtb	r3, r2
    d4b6:	1c58      	adds	r0, r3, #1
    d4b8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    d4bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
	if (!link.rx.seg &&
    d4c0:	4303      	orrs	r3, r0
    d4c2:	4299      	cmp	r1, r3
    d4c4:	d122      	bne.n	d50c <gen_prov_cont+0x88>
		net_buf_simple_reset(link.rx.buf);
    d4c6:	6963      	ldr	r3, [r4, #20]
		link.rx.id = rx->xact_id;
    d4c8:	7421      	strb	r1, [r4, #16]
	buf->data = buf->__buf;
    d4ca:	689a      	ldr	r2, [r3, #8]
	buf->len  = 0U;
    d4cc:	f8a3 c004 	strh.w	ip, [r3, #4]
	buf->data = buf->__buf;
    d4d0:	601a      	str	r2, [r3, #0]
		link.rx.seg = SEG_NVAL;
    d4d2:	23ff      	movs	r3, #255	; 0xff
    d4d4:	7463      	strb	r3, [r4, #17]
		link.rx.last_seg = SEG_NVAL;
    d4d6:	74a3      	strb	r3, [r4, #18]
		prov_clear_tx();
    d4d8:	f7ff fe42 	bl	d160 <prov_clear_tx>
	if (seg > link.rx.last_seg) {
    d4dc:	7ca3      	ldrb	r3, [r4, #18]
    d4de:	ebb3 0f97 	cmp.w	r3, r7, lsr #2
	uint8_t seg = CONT_SEG_INDEX(rx->gpc);
    d4e2:	ea4f 0697 	mov.w	r6, r7, lsr #2
	if (seg > link.rx.last_seg) {
    d4e6:	d21d      	bcs.n	d524 <gen_prov_cont+0xa0>
    d4e8:	4a2d      	ldr	r2, [pc, #180]	; (d5a0 <gen_prov_cont+0x11c>)
    d4ea:	4b2e      	ldr	r3, [pc, #184]	; (d5a4 <gen_prov_cont+0x120>)
		BT_ERR("Invalid segment index %u", seg);
    d4ec:	482e      	ldr	r0, [pc, #184]	; (d5a8 <gen_prov_cont+0x124>)
    d4ee:	1ad2      	subs	r2, r2, r3
    d4f0:	08d2      	lsrs	r2, r2, #3
    d4f2:	0192      	lsls	r2, r2, #6
    d4f4:	f042 0201 	orr.w	r2, r2, #1
    d4f8:	4631      	mov	r1, r6
    d4fa:	f00b fc87 	bl	18e0c <log_1>
}
    d4fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			prov_failed(PROV_ERR_NVAL_FMT);
    d502:	2002      	movs	r0, #2
    d504:	f7ff bf0c 	b.w	d320 <prov_failed>
	} else if (rx->xact_id != link.rx.id) {
    d508:	4291      	cmp	r1, r2
    d50a:	d0e7      	beq.n	d4dc <gen_prov_cont+0x58>
    d50c:	4825      	ldr	r0, [pc, #148]	; (d5a4 <gen_prov_cont+0x120>)
    d50e:	4b24      	ldr	r3, [pc, #144]	; (d5a0 <gen_prov_cont+0x11c>)
    d510:	1a1b      	subs	r3, r3, r0
    d512:	08db      	lsrs	r3, r3, #3
		BT_WARN("Data for unknown transaction (0x%x != 0x%x)",
    d514:	019b      	lsls	r3, r3, #6
}
    d516:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("Data for unknown transaction (0x%x != 0x%x)",
    d51a:	4824      	ldr	r0, [pc, #144]	; (d5ac <gen_prov_cont+0x128>)
    d51c:	f043 0302 	orr.w	r3, r3, #2
    d520:	f00b bc88 	b.w	18e34 <log_2>
	if (!(link.rx.seg & BIT(seg))) {
    d524:	7c63      	ldrb	r3, [r4, #17]
    d526:	40f3      	lsrs	r3, r6
    d528:	07d9      	lsls	r1, r3, #31
    d52a:	d534      	bpl.n	d596 <gen_prov_cont+0x112>
	memcpy(XACT_SEG_DATA(seg), buf->data, buf->len);
    d52c:	6962      	ldr	r2, [r4, #20]
    d52e:	6829      	ldr	r1, [r5, #0]
    d530:	1e70      	subs	r0, r6, #1
    d532:	2317      	movs	r3, #23
    d534:	4343      	muls	r3, r0
    d536:	6810      	ldr	r0, [r2, #0]
    d538:	88aa      	ldrh	r2, [r5, #4]
    d53a:	3314      	adds	r3, #20
    d53c:	4418      	add	r0, r3
    d53e:	f00c fb31 	bl	19ba4 <memcpy>
	XACT_SEG_RECV(seg);
    d542:	2001      	movs	r0, #1
    d544:	fa00 f306 	lsl.w	r3, r0, r6
    d548:	7c60      	ldrb	r0, [r4, #17]
    d54a:	ea20 0003 	bic.w	r0, r0, r3
	if (seg == link.rx.last_seg && !(link.rx.seg & BIT(0))) {
    d54e:	7ca3      	ldrb	r3, [r4, #18]
	XACT_SEG_RECV(seg);
    d550:	7460      	strb	r0, [r4, #17]
	if (seg == link.rx.last_seg && !(link.rx.seg & BIT(0))) {
    d552:	42b3      	cmp	r3, r6
    d554:	d11a      	bne.n	d58c <gen_prov_cont+0x108>
    d556:	07c2      	lsls	r2, r0, #31
    d558:	d41d      	bmi.n	d596 <gen_prov_cont+0x112>
		expect_len = (link.rx.buf->len - 20U -
    d55a:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
    d55e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    d562:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    d566:	6962      	ldr	r2, [r4, #20]
    d568:	7912      	ldrb	r2, [r2, #4]
    d56a:	3303      	adds	r3, #3
    d56c:	4413      	add	r3, r2
		if (expect_len != buf->len) {
    d56e:	88aa      	ldrh	r2, [r5, #4]
		expect_len = (link.rx.buf->len - 20U -
    d570:	b2d9      	uxtb	r1, r3
		if (expect_len != buf->len) {
    d572:	4291      	cmp	r1, r2
    d574:	d00a      	beq.n	d58c <gen_prov_cont+0x108>
    d576:	480b      	ldr	r0, [pc, #44]	; (d5a4 <gen_prov_cont+0x120>)
    d578:	4b09      	ldr	r3, [pc, #36]	; (d5a0 <gen_prov_cont+0x11c>)
    d57a:	1a1b      	subs	r3, r3, r0
    d57c:	08db      	lsrs	r3, r3, #3
			BT_ERR("Incorrect last seg len: %u != %u", expect_len,
    d57e:	019b      	lsls	r3, r3, #6
    d580:	480b      	ldr	r0, [pc, #44]	; (d5b0 <gen_prov_cont+0x12c>)
    d582:	f043 0301 	orr.w	r3, r3, #1
    d586:	f00b fc55 	bl	18e34 <log_2>
    d58a:	e7b8      	b.n	d4fe <gen_prov_cont+0x7a>
	if (!link.rx.seg) {
    d58c:	b918      	cbnz	r0, d596 <gen_prov_cont+0x112>
}
    d58e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		prov_msg_recv();
    d592:	f7ff bf2f 	b.w	d3f4 <prov_msg_recv>
}
    d596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d59a:	bf00      	nop
    d59c:	20000120 	.word	0x20000120
    d5a0:	0001e598 	.word	0x0001e598
    d5a4:	0001e408 	.word	0x0001e408
    d5a8:	000214a5 	.word	0x000214a5
    d5ac:	00021479 	.word	0x00021479
    d5b0:	000214be 	.word	0x000214be

0000d5b4 <bearer_ctl_send>:
{
    d5b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d5b8:	4688      	mov	r8, r1
    d5ba:	461c      	mov	r4, r3
    d5bc:	4606      	mov	r6, r0
    d5be:	4691      	mov	r9, r2
	prov_clear_tx();
    d5c0:	f7ff fdce 	bl	d160 <prov_clear_tx>
	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
    d5c4:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
    d5c8:	2300      	movs	r3, #0
    d5ca:	4822      	ldr	r0, [pc, #136]	; (d654 <bearer_ctl_send+0xa0>)
    d5cc:	f00a f912 	bl	177f4 <k_work_reschedule>
	buf = adv_buf_create(reliable ? RETRANSMITS_RELIABLE :
    d5d0:	2c00      	cmp	r4, #0
    d5d2:	bf0c      	ite	eq
    d5d4:	2002      	moveq	r0, #2
    d5d6:	2000      	movne	r0, #0
    d5d8:	f7ff fdd8 	bl	d18c <adv_buf_create>
	if (!buf) {
    d5dc:	4605      	mov	r5, r0
    d5de:	b3a8      	cbz	r0, d64c <bearer_ctl_send+0x98>
	net_buf_add_be32(buf, link.id);
    d5e0:	4f1d      	ldr	r7, [pc, #116]	; (d658 <bearer_ctl_send+0xa4>)
	net_buf_simple_add_be32(&buf->b, val);
    d5e2:	f100 0a08 	add.w	sl, r0, #8
    d5e6:	6839      	ldr	r1, [r7, #0]
    d5e8:	4650      	mov	r0, sl
	net_buf_add_u8(buf, GPC_CTL(op));
    d5ea:	00b6      	lsls	r6, r6, #2
    d5ec:	f00f fe88 	bl	1d300 <net_buf_simple_add_be32>
    d5f0:	f046 0603 	orr.w	r6, r6, #3
	net_buf_add_u8(buf, 0x00);
    d5f4:	2100      	movs	r1, #0
    d5f6:	4628      	mov	r0, r5
    d5f8:	f00e fbe4 	bl	1bdc4 <net_buf_add_u8>
	net_buf_add_u8(buf, GPC_CTL(op));
    d5fc:	b2f1      	uxtb	r1, r6
    d5fe:	4628      	mov	r0, r5
    d600:	f00e fbe0 	bl	1bdc4 <net_buf_add_u8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    d604:	464a      	mov	r2, r9
    d606:	4641      	mov	r1, r8
    d608:	4650      	mov	r0, sl
    d60a:	f00f fe5e 	bl	1d2ca <net_buf_simple_add_mem>
	if (reliable) {
    d60e:	b1a4      	cbz	r4, d63a <bearer_ctl_send+0x86>
	return z_impl_k_uptime_ticks();
    d610:	f010 fc8c 	bl	1df2c <z_impl_k_uptime_ticks>
			return (t * to_hz + off) / from_hz;
    d614:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    d618:	460a      	mov	r2, r1
    d61a:	fba0 0103 	umull	r0, r1, r0, r3
    d61e:	fb03 1102 	mla	r1, r3, r2, r1
    d622:	0bc3      	lsrs	r3, r0, #15
    d624:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    d628:	0bca      	lsrs	r2, r1, #15
		link.tx.start = k_uptime_get();
    d62a:	e9c7 3206 	strd	r3, r2, [r7, #24]
		link.tx.buf[0] = buf;
    d62e:	627d      	str	r5, [r7, #36]	; 0x24
		send_reliable();
    d630:	f7ff fd5e 	bl	d0f0 <send_reliable>
	return 0;
    d634:	2000      	movs	r0, #0
}
    d636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
    d63a:	4628      	mov	r0, r5
    d63c:	4907      	ldr	r1, [pc, #28]	; (d65c <bearer_ctl_send+0xa8>)
    d63e:	4622      	mov	r2, r4
    d640:	f7fc f99e 	bl	9980 <bt_mesh_adv_send>
		net_buf_unref(buf);
    d644:	4628      	mov	r0, r5
    d646:	f008 f889 	bl	1575c <net_buf_unref>
    d64a:	e7f3      	b.n	d634 <bearer_ctl_send+0x80>
		return -ENOBUFS;
    d64c:	f06f 0068 	mvn.w	r0, #104	; 0x68
    d650:	e7f1      	b.n	d636 <bearer_ctl_send+0x82>
    d652:	bf00      	nop
    d654:	20000188 	.word	0x20000188
    d658:	20000120 	.word	0x20000120
    d65c:	20000498 	.word	0x20000498

0000d660 <gen_prov_ctl>:
{
    d660:	b570      	push	{r4, r5, r6, lr}
	switch (BEARER_CTL(rx->gpc)) {
    d662:	7944      	ldrb	r4, [r0, #5]
    d664:	08a4      	lsrs	r4, r4, #2
    d666:	2c01      	cmp	r4, #1
{
    d668:	4605      	mov	r5, r0
    d66a:	460a      	mov	r2, r1
	switch (BEARER_CTL(rx->gpc)) {
    d66c:	d04f      	beq.n	d70e <gen_prov_ctl+0xae>
    d66e:	2c02      	cmp	r4, #2
    d670:	d068      	beq.n	d744 <gen_prov_ctl+0xe4>
    d672:	2c00      	cmp	r4, #0
    d674:	d174      	bne.n	d760 <gen_prov_ctl+0x100>
	if (buf->len < 16) {
    d676:	8889      	ldrh	r1, [r1, #4]
    d678:	290f      	cmp	r1, #15
    d67a:	d80b      	bhi.n	d694 <gen_prov_ctl+0x34>
    d67c:	4a3e      	ldr	r2, [pc, #248]	; (d778 <gen_prov_ctl+0x118>)
    d67e:	4b3f      	ldr	r3, [pc, #252]	; (d77c <gen_prov_ctl+0x11c>)
		BT_ERR("Too short bearer open message (len %u)", buf->len);
    d680:	483f      	ldr	r0, [pc, #252]	; (d780 <gen_prov_ctl+0x120>)
    d682:	1ad2      	subs	r2, r2, r3
    d684:	08d2      	lsrs	r2, r2, #3
    d686:	0192      	lsls	r2, r2, #6
    d688:	f042 0201 	orr.w	r2, r2, #1
}
    d68c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unknown bearer opcode: 0x%02x", BEARER_CTL(rx->gpc));
    d690:	f00b bbbc 	b.w	18e0c <log_1>
    d694:	f7ff fd98 	bl	d1c8 <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
    d698:	07c6      	lsls	r6, r0, #31
    d69a:	d50c      	bpl.n	d6b6 <gen_prov_ctl+0x56>
		if (link.id == rx->link_id) {
    d69c:	4b39      	ldr	r3, [pc, #228]	; (d784 <gen_prov_ctl+0x124>)
    d69e:	681a      	ldr	r2, [r3, #0]
    d6a0:	682b      	ldr	r3, [r5, #0]
    d6a2:	429a      	cmp	r2, r3
    d6a4:	d166      	bne.n	d774 <gen_prov_ctl+0x114>
			bearer_ctl_send(LINK_ACK, NULL, 0, false);
    d6a6:	4623      	mov	r3, r4
    d6a8:	4622      	mov	r2, r4
    d6aa:	4621      	mov	r1, r4
    d6ac:	2001      	movs	r0, #1
}
    d6ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bearer_ctl_send(LINK_ACK, NULL, 0, false);
    d6b2:	f7ff bf7f 	b.w	d5b4 <bearer_ctl_send>
	if (memcmp(buf->data, bt_mesh_prov_get()->uuid, 16)) {
    d6b6:	6814      	ldr	r4, [r2, #0]
    d6b8:	f7ff fd0c 	bl	d0d4 <bt_mesh_prov_get>
    d6bc:	2210      	movs	r2, #16
    d6be:	6801      	ldr	r1, [r0, #0]
    d6c0:	4620      	mov	r0, r4
    d6c2:	f00c fa5f 	bl	19b84 <memcmp>
    d6c6:	4603      	mov	r3, r0
    d6c8:	2800      	cmp	r0, #0
    d6ca:	d153      	bne.n	d774 <gen_prov_ctl+0x114>
	link.id = rx->link_id;
    d6cc:	4c2d      	ldr	r4, [pc, #180]	; (d784 <gen_prov_ctl+0x124>)
    d6ce:	6829      	ldr	r1, [r5, #0]
    d6d0:	4622      	mov	r2, r4
    d6d2:	f842 1b04 	str.w	r1, [r2], #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d6d6:	f3bf 8f5b 	dmb	ish
    d6da:	e852 1f00 	ldrex	r1, [r2]
    d6de:	f041 0101 	orr.w	r1, r1, #1
    d6e2:	e842 1000 	strex	r0, r1, [r2]
    d6e6:	2800      	cmp	r0, #0
    d6e8:	d1f7      	bne.n	d6da <gen_prov_ctl+0x7a>
    d6ea:	f3bf 8f5b 	dmb	ish
	net_buf_simple_reset(link.rx.buf);
    d6ee:	6962      	ldr	r2, [r4, #20]
	buf->data = buf->__buf;
    d6f0:	6891      	ldr	r1, [r2, #8]
    d6f2:	6011      	str	r1, [r2, #0]
	buf->len  = 0U;
    d6f4:	8093      	strh	r3, [r2, #4]
	bearer_ctl_send(LINK_ACK, NULL, 0, false);
    d6f6:	4619      	mov	r1, r3
    d6f8:	461a      	mov	r2, r3
    d6fa:	2001      	movs	r0, #1
    d6fc:	f7ff ff5a 	bl	d5b4 <bearer_ctl_send>
		link.cb->link_opened(&pb_adv, link.cb_data);
    d700:	68a3      	ldr	r3, [r4, #8]
    d702:	68e1      	ldr	r1, [r4, #12]
    d704:	681b      	ldr	r3, [r3, #0]
    d706:	4820      	ldr	r0, [pc, #128]	; (d788 <gen_prov_ctl+0x128>)
}
    d708:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		link.cb->link_opened(&pb_adv, link.cb_data);
    d70c:	4718      	bx	r3
    d70e:	f7ff fd5b 	bl	d1c8 <atomic_get.constprop.0>
		if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
    d712:	07c0      	lsls	r0, r0, #31
    d714:	d52e      	bpl.n	d774 <gen_prov_ctl+0x114>
    d716:	f7ff fd57 	bl	d1c8 <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, ADV_PROVISIONER)) {
    d71a:	0681      	lsls	r1, r0, #26
    d71c:	d52a      	bpl.n	d774 <gen_prov_ctl+0x114>
    d71e:	f3bf 8f5b 	dmb	ish
    d722:	4c18      	ldr	r4, [pc, #96]	; (d784 <gen_prov_ctl+0x124>)
    d724:	1d23      	adds	r3, r4, #4
    d726:	e853 2f00 	ldrex	r2, [r3]
    d72a:	f042 0102 	orr.w	r1, r2, #2
    d72e:	e843 1000 	strex	r0, r1, [r3]
    d732:	2800      	cmp	r0, #0
    d734:	d1f7      	bne.n	d726 <gen_prov_ctl+0xc6>
    d736:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_set_bit(link.flags, ADV_LINK_ACK_RECVD)) {
    d73a:	0792      	lsls	r2, r2, #30
    d73c:	d41a      	bmi.n	d774 <gen_prov_ctl+0x114>
		prov_clear_tx();
    d73e:	f7ff fd0f 	bl	d160 <prov_clear_tx>
    d742:	e7dd      	b.n	d700 <gen_prov_ctl+0xa0>
    d744:	f7ff fd40 	bl	d1c8 <atomic_get.constprop.0>
		if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
    d748:	07c3      	lsls	r3, r0, #31
    d74a:	d513      	bpl.n	d774 <gen_prov_ctl+0x114>
	if (buf->len != 1) {
    d74c:	888b      	ldrh	r3, [r1, #4]
    d74e:	2b01      	cmp	r3, #1
    d750:	d110      	bne.n	d774 <gen_prov_ctl+0x114>
	close_link(net_buf_simple_pull_u8(buf));
    d752:	4608      	mov	r0, r1
    d754:	f00f fe20 	bl	1d398 <net_buf_simple_pull_u8>
}
    d758:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	close_link(net_buf_simple_pull_u8(buf));
    d75c:	f7ff bda4 	b.w	d2a8 <close_link>
    d760:	4a05      	ldr	r2, [pc, #20]	; (d778 <gen_prov_ctl+0x118>)
    d762:	4b06      	ldr	r3, [pc, #24]	; (d77c <gen_prov_ctl+0x11c>)
		BT_ERR("Unknown bearer opcode: 0x%02x", BEARER_CTL(rx->gpc));
    d764:	4809      	ldr	r0, [pc, #36]	; (d78c <gen_prov_ctl+0x12c>)
    d766:	1ad2      	subs	r2, r2, r3
    d768:	08d2      	lsrs	r2, r2, #3
    d76a:	0192      	lsls	r2, r2, #6
    d76c:	f042 0201 	orr.w	r2, r2, #1
    d770:	4621      	mov	r1, r4
    d772:	e78b      	b.n	d68c <gen_prov_ctl+0x2c>
}
    d774:	bd70      	pop	{r4, r5, r6, pc}
    d776:	bf00      	nop
    d778:	0001e598 	.word	0x0001e598
    d77c:	0001e408 	.word	0x0001e408
    d780:	000214df 	.word	0x000214df
    d784:	20000120 	.word	0x20000120
    d788:	0001eb74 	.word	0x0001eb74
    d78c:	00021506 	.word	0x00021506

0000d790 <prov_link_close>:

static void prov_link_close(enum prov_bearer_link_status status)
{
    d790:	b507      	push	{r0, r1, r2, lr}
    d792:	4b0d      	ldr	r3, [pc, #52]	; (d7c8 <prov_link_close+0x38>)
    d794:	f88d 0007 	strb.w	r0, [sp, #7]
    d798:	f3bf 8f5b 	dmb	ish
    d79c:	e853 2f00 	ldrex	r2, [r3]
    d7a0:	f042 0104 	orr.w	r1, r2, #4
    d7a4:	e843 1000 	strex	r0, r1, [r3]
    d7a8:	2800      	cmp	r0, #0
    d7aa:	d1f7      	bne.n	d79c <prov_link_close+0xc>
    d7ac:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(link.flags, ADV_LINK_CLOSING)) {
    d7b0:	0753      	lsls	r3, r2, #29
    d7b2:	d406      	bmi.n	d7c2 <prov_link_close+0x32>
		return;
	}

	bearer_ctl_send(LINK_CLOSE, &status, 1, true);
    d7b4:	2301      	movs	r3, #1
    d7b6:	461a      	mov	r2, r3
    d7b8:	f10d 0107 	add.w	r1, sp, #7
    d7bc:	2002      	movs	r0, #2
    d7be:	f7ff fef9 	bl	d5b4 <bearer_ctl_send>
}
    d7c2:	b003      	add	sp, #12
    d7c4:	f85d fb04 	ldr.w	pc, [sp], #4
    d7c8:	20000124 	.word	0x20000124

0000d7cc <prov_link_open>:
{
    d7cc:	b570      	push	{r4, r5, r6, lr}
    d7ce:	4606      	mov	r6, r0
	err = bt_mesh_adv_enable();
    d7d0:	f7ff fbc6 	bl	cf60 <bt_mesh_adv_enable>
	if (err) {
    d7d4:	4604      	mov	r4, r0
    d7d6:	b158      	cbz	r0, d7f0 <prov_link_open+0x24>
    d7d8:	4921      	ldr	r1, [pc, #132]	; (d860 <prov_link_open+0x94>)
    d7da:	4b22      	ldr	r3, [pc, #136]	; (d864 <prov_link_open+0x98>)
		BT_ERR("Failed enabling advertiser");
    d7dc:	4822      	ldr	r0, [pc, #136]	; (d868 <prov_link_open+0x9c>)
    d7de:	1ac9      	subs	r1, r1, r3
    d7e0:	08c9      	lsrs	r1, r1, #3
    d7e2:	0189      	lsls	r1, r1, #6
    d7e4:	f041 0101 	orr.w	r1, r1, #1
    d7e8:	f00b fb03 	bl	18df2 <log_0>
}
    d7ec:	4620      	mov	r0, r4
    d7ee:	bd70      	pop	{r4, r5, r6, pc}
    d7f0:	4d1e      	ldr	r5, [pc, #120]	; (d86c <prov_link_open+0xa0>)
    d7f2:	f3bf 8f5b 	dmb	ish
    d7f6:	1d2b      	adds	r3, r5, #4
    d7f8:	e853 4f00 	ldrex	r4, [r3]
    d7fc:	f044 0201 	orr.w	r2, r4, #1
    d800:	e843 2100 	strex	r1, r2, [r3]
    d804:	2900      	cmp	r1, #0
    d806:	d1f7      	bne.n	d7f8 <prov_link_open+0x2c>
    d808:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(link.flags, ADV_LINK_ACTIVE)) {
    d80c:	f014 0401 	ands.w	r4, r4, #1
    d810:	d123      	bne.n	d85a <prov_link_open+0x8e>
    d812:	f3bf 8f5b 	dmb	ish
    d816:	e853 2f00 	ldrex	r2, [r3]
    d81a:	f042 0220 	orr.w	r2, r2, #32
    d81e:	e843 2100 	strex	r1, r2, [r3]
    d822:	2900      	cmp	r1, #0
    d824:	d1f7      	bne.n	d816 <prov_link_open+0x4a>
    d826:	f3bf 8f5b 	dmb	ish
	bt_rand(&link.id, sizeof(link.id));
    d82a:	2104      	movs	r1, #4
    d82c:	4628      	mov	r0, r5
    d82e:	f00e fecc 	bl	1c5ca <bt_rand>
	link.tx.id = XACT_ID_MAX;
    d832:	237f      	movs	r3, #127	; 0x7f
    d834:	f885 3020 	strb.w	r3, [r5, #32]
	link.rx.id = XACT_ID_NVAL;
    d838:	23ff      	movs	r3, #255	; 0xff
    d83a:	742b      	strb	r3, [r5, #16]
	link.cb = cb;
    d83c:	9b04      	ldr	r3, [sp, #16]
    d83e:	60ab      	str	r3, [r5, #8]
	link.cb_data = cb_data;
    d840:	9b05      	ldr	r3, [sp, #20]
    d842:	60eb      	str	r3, [r5, #12]
	net_buf_simple_reset(link.rx.buf);
    d844:	696b      	ldr	r3, [r5, #20]
	buf->data = buf->__buf;
    d846:	689a      	ldr	r2, [r3, #8]
	buf->len  = 0U;
    d848:	809c      	strh	r4, [r3, #4]
	buf->data = buf->__buf;
    d84a:	601a      	str	r2, [r3, #0]
	bearer_ctl_send(LINK_OPEN, uuid, 16, true);
    d84c:	4631      	mov	r1, r6
    d84e:	2301      	movs	r3, #1
    d850:	2210      	movs	r2, #16
    d852:	4620      	mov	r0, r4
    d854:	f7ff feae 	bl	d5b4 <bearer_ctl_send>
	return 0;
    d858:	e7c8      	b.n	d7ec <prov_link_open+0x20>
		return -EBUSY;
    d85a:	f06f 040f 	mvn.w	r4, #15
    d85e:	e7c5      	b.n	d7ec <prov_link_open+0x20>
    d860:	0001e598 	.word	0x0001e598
    d864:	0001e408 	.word	0x0001e408
    d868:	00020418 	.word	0x00020418
    d86c:	20000120 	.word	0x20000120

0000d870 <prov_send_adv>:
{
    d870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
    d874:	4d58      	ldr	r5, [pc, #352]	; (d9d8 <prov_send_adv+0x168>)
{
    d876:	460f      	mov	r7, r1
    d878:	4604      	mov	r4, r0
    d87a:	4616      	mov	r6, r2
	prov_clear_tx();
    d87c:	f7ff fc70 	bl	d160 <prov_clear_tx>
	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
    d880:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
    d884:	2300      	movs	r3, #0
    d886:	f105 0068 	add.w	r0, r5, #104	; 0x68
    d88a:	f009 ffb3 	bl	177f4 <k_work_reschedule>
	start = adv_buf_create(RETRANSMITS_RELIABLE);
    d88e:	2000      	movs	r0, #0
    d890:	f7ff fc7c 	bl	d18c <adv_buf_create>
	if (!start) {
    d894:	4681      	mov	r9, r0
    d896:	2800      	cmp	r0, #0
    d898:	d077      	beq.n	d98a <prov_send_adv+0x11a>
	return (((id + 1) & XACT_ID_MAX) | (id & (XACT_ID_MAX+1)));
    d89a:	f995 2020 	ldrsb.w	r2, [r5, #32]
	net_buf_simple_add_be32(&buf->b, val);
    d89e:	6829      	ldr	r1, [r5, #0]
    d8a0:	1c53      	adds	r3, r2, #1
    d8a2:	f100 0808 	add.w	r8, r0, #8
    d8a6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    d8aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    d8ae:	4313      	orrs	r3, r2
    d8b0:	4640      	mov	r0, r8
	link.tx.id = next_transaction_id(link.tx.id);
    d8b2:	f885 3020 	strb.w	r3, [r5, #32]
    d8b6:	f00f fd23 	bl	1d300 <net_buf_simple_add_be32>
	net_buf_add_u8(start, link.tx.id);
    d8ba:	f895 1020 	ldrb.w	r1, [r5, #32]
    d8be:	4648      	mov	r0, r9
    d8c0:	f00e fa80 	bl	1bdc4 <net_buf_add_u8>
	if (len <= START_PAYLOAD_MAX) {
    d8c4:	7922      	ldrb	r2, [r4, #4]
	net_buf_add_u8(start, GPC_START(last_seg(msg->len)));
    d8c6:	88a3      	ldrh	r3, [r4, #4]
	if (len <= START_PAYLOAD_MAX) {
    d8c8:	2a14      	cmp	r2, #20
	len -= START_PAYLOAD_MAX;
    d8ca:	bf81      	itttt	hi
    d8cc:	3b14      	subhi	r3, #20
	return 1 + (len / CONT_PAYLOAD_MAX);
    d8ce:	b2db      	uxtbhi	r3, r3
    d8d0:	2117      	movhi	r1, #23
    d8d2:	fbb3 f3f1 	udivhi	r3, r3, r1
    d8d6:	bf86      	itte	hi
    d8d8:	3301      	addhi	r3, #1
    d8da:	b2db      	uxtbhi	r3, r3
		return 0;
    d8dc:	2300      	movls	r3, #0
	net_buf_add_u8(start, GPC_START(last_seg(msg->len)));
    d8de:	009b      	lsls	r3, r3, #2
    d8e0:	f003 01fc 	and.w	r1, r3, #252	; 0xfc
    d8e4:	4648      	mov	r0, r9
    d8e6:	f00e fa6d 	bl	1bdc4 <net_buf_add_u8>
	net_buf_simple_add_be16(&buf->b, val);
    d8ea:	88a1      	ldrh	r1, [r4, #4]
    d8ec:	4640      	mov	r0, r8
    d8ee:	f00f fcfd 	bl	1d2ec <net_buf_simple_add_be16>
	net_buf_add_u8(start, bt_mesh_fcs_calc(msg->data, msg->len));
    d8f2:	7921      	ldrb	r1, [r4, #4]
    d8f4:	6820      	ldr	r0, [r4, #0]
    d8f6:	f7ff f801 	bl	c8fc <bt_mesh_fcs_calc>
    d8fa:	4601      	mov	r1, r0
    d8fc:	4648      	mov	r0, r9
    d8fe:	f00e fa61 	bl	1bdc4 <net_buf_add_u8>
	link.tx.buf[0] = start;
    d902:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
	link.tx.cb_data = cb_data;
    d906:	e9c5 760c 	strd	r7, r6, [r5, #48]	; 0x30
    d90a:	f010 fb0f 	bl	1df2c <z_impl_k_uptime_ticks>
	seg_len = MIN(msg->len, START_PAYLOAD_MAX);
    d90e:	88a6      	ldrh	r6, [r4, #4]
    d910:	f8df 90d4 	ldr.w	r9, [pc, #212]	; d9e8 <prov_send_adv+0x178>
    d914:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    d918:	460a      	mov	r2, r1
    d91a:	fba0 0103 	umull	r0, r1, r0, r3
    d91e:	fb03 1102 	mla	r1, r3, r2, r1
	net_buf_add_mem(start, msg->data, seg_len);
    d922:	2e14      	cmp	r6, #20
    d924:	ea4f 33d0 	mov.w	r3, r0, lsr #15
    d928:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    d92c:	bf28      	it	cs
    d92e:	2614      	movcs	r6, #20
    d930:	0bca      	lsrs	r2, r1, #15
	link.tx.start = k_uptime_get();
    d932:	e9c5 3206 	strd	r3, r2, [r5, #24]
	return net_buf_simple_add_mem(&buf->b, mem, len);
    d936:	6821      	ldr	r1, [r4, #0]
    d938:	4632      	mov	r2, r6
    d93a:	4640      	mov	r0, r8
    d93c:	f00f fcc5 	bl	1d2ca <net_buf_simple_add_mem>
	net_buf_simple_pull(msg, seg_len);
    d940:	4631      	mov	r1, r6
    d942:	4620      	mov	r0, r4
    d944:	f00f fd18 	bl	1d378 <net_buf_simple_pull>
	for (seg_id = 1U; msg->len > 0; seg_id++) {
    d948:	2700      	movs	r7, #0
    d94a:	88a6      	ldrh	r6, [r4, #4]
    d94c:	b91e      	cbnz	r6, d956 <prov_send_adv+0xe6>
	send_reliable();
    d94e:	f7ff fbcf 	bl	d0f0 <send_reliable>
	return 0;
    d952:	4630      	mov	r0, r6
    d954:	e00f      	b.n	d976 <prov_send_adv+0x106>
		if (seg_id >= ARRAY_SIZE(link.tx.buf)) {
    d956:	2f08      	cmp	r7, #8
    d958:	d10f      	bne.n	d97a <prov_send_adv+0x10a>
    d95a:	4b20      	ldr	r3, [pc, #128]	; (d9dc <prov_send_adv+0x16c>)
    d95c:	4920      	ldr	r1, [pc, #128]	; (d9e0 <prov_send_adv+0x170>)
			BT_ERR("Too big message");
    d95e:	4821      	ldr	r0, [pc, #132]	; (d9e4 <prov_send_adv+0x174>)
    d960:	1ac9      	subs	r1, r1, r3
    d962:	08c9      	lsrs	r1, r1, #3
    d964:	0189      	lsls	r1, r1, #6
    d966:	f041 0101 	orr.w	r1, r1, #1
    d96a:	f00b fa42 	bl	18df2 <log_0>
			free_segments();
    d96e:	f7ff fbe1 	bl	d134 <free_segments>
			return -E2BIG;
    d972:	f06f 0006 	mvn.w	r0, #6
}
    d976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf = adv_buf_create(RETRANSMITS_RELIABLE);
    d97a:	2000      	movs	r0, #0
    d97c:	f7ff fc06 	bl	d18c <adv_buf_create>
		if (!buf) {
    d980:	3704      	adds	r7, #4
    d982:	4606      	mov	r6, r0
    d984:	b920      	cbnz	r0, d990 <prov_send_adv+0x120>
			free_segments();
    d986:	f7ff fbd5 	bl	d134 <free_segments>
		return -ENOBUFS;
    d98a:	f06f 0068 	mvn.w	r0, #104	; 0x68
    d98e:	e7f2      	b.n	d976 <prov_send_adv+0x106>
		seg_len = MIN(msg->len, CONT_PAYLOAD_MAX);
    d990:	f8b4 8004 	ldrh.w	r8, [r4, #4]
		link.tx.buf[seg_id] = buf;
    d994:	f849 0b04 	str.w	r0, [r9], #4
	net_buf_simple_add_be32(&buf->b, val);
    d998:	f100 0a08 	add.w	sl, r0, #8
		seg_len = MIN(msg->len, CONT_PAYLOAD_MAX);
    d99c:	f1b8 0f17 	cmp.w	r8, #23
    d9a0:	6829      	ldr	r1, [r5, #0]
    d9a2:	4650      	mov	r0, sl
    d9a4:	bf28      	it	cs
    d9a6:	f04f 0817 	movcs.w	r8, #23
    d9aa:	f00f fca9 	bl	1d300 <net_buf_simple_add_be32>
		net_buf_add_u8(buf, link.tx.id);
    d9ae:	f895 1020 	ldrb.w	r1, [r5, #32]
    d9b2:	4630      	mov	r0, r6
    d9b4:	f00e fa06 	bl	1bdc4 <net_buf_add_u8>
		net_buf_add_u8(buf, GPC_CONT(seg_id));
    d9b8:	f047 0102 	orr.w	r1, r7, #2
    d9bc:	b2c9      	uxtb	r1, r1
    d9be:	4630      	mov	r0, r6
    d9c0:	f00e fa00 	bl	1bdc4 <net_buf_add_u8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    d9c4:	6821      	ldr	r1, [r4, #0]
    d9c6:	4642      	mov	r2, r8
    d9c8:	4650      	mov	r0, sl
    d9ca:	f00f fc7e 	bl	1d2ca <net_buf_simple_add_mem>
		net_buf_simple_pull(msg, seg_len);
    d9ce:	4641      	mov	r1, r8
    d9d0:	4620      	mov	r0, r4
    d9d2:	f00f fcd1 	bl	1d378 <net_buf_simple_pull>
	for (seg_id = 1U; msg->len > 0; seg_id++) {
    d9d6:	e7b8      	b.n	d94a <prov_send_adv+0xda>
    d9d8:	20000120 	.word	0x20000120
    d9dc:	0001e408 	.word	0x0001e408
    d9e0:	0001e598 	.word	0x0001e598
    d9e4:	00021524 	.word	0x00021524
    d9e8:	20000148 	.word	0x20000148

0000d9ec <gen_prov_start>:
{
    d9ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (rx->xact_id == link.rx.id) {
    d9f0:	4a4f      	ldr	r2, [pc, #316]	; (db30 <gen_prov_start+0x144>)
{
    d9f2:	460d      	mov	r5, r1
	if (rx->xact_id == link.rx.id) {
    d9f4:	7c13      	ldrb	r3, [r2, #16]
    d9f6:	7901      	ldrb	r1, [r0, #4]
    d9f8:	4299      	cmp	r1, r3
{
    d9fa:	4606      	mov	r6, r0
    d9fc:	4614      	mov	r4, r2
	if (rx->xact_id == link.rx.id) {
    d9fe:	d10e      	bne.n	da1e <gen_prov_start+0x32>
		if (!link.rx.seg) {
    da00:	7c53      	ldrb	r3, [r2, #17]
    da02:	b943      	cbnz	r3, da16 <gen_prov_start+0x2a>
    da04:	f7ff fbe0 	bl	d1c8 <atomic_get.constprop.0>
			if (!ack_pending()) {
    da08:	06c1      	lsls	r1, r0, #27
    da0a:	d406      	bmi.n	da1a <gen_prov_start+0x2e>
				gen_prov_ack_send(rx->xact_id);
    da0c:	7930      	ldrb	r0, [r6, #4]
}
    da0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				gen_prov_ack_send(rx->xact_id);
    da12:	f7ff bc9f 	b.w	d354 <gen_prov_ack_send>
		if (!(link.rx.seg & BIT(0))) {
    da16:	07da      	lsls	r2, r3, #31
    da18:	d416      	bmi.n	da48 <gen_prov_start+0x5c>
}
    da1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (((id + 1) & XACT_ID_MAX) | (id & (XACT_ID_MAX+1)));
    da1e:	b25b      	sxtb	r3, r3
    da20:	1c5a      	adds	r2, r3, #1
    da22:	f002 007f 	and.w	r0, r2, #127	; 0x7f
    da26:	f003 0280 	and.w	r2, r3, #128	; 0x80
    da2a:	4302      	orrs	r2, r0
	} else if (rx->xact_id != next_transaction_id(link.rx.id)) {
    da2c:	4291      	cmp	r1, r2
    da2e:	d00b      	beq.n	da48 <gen_prov_start+0x5c>
    da30:	4840      	ldr	r0, [pc, #256]	; (db34 <gen_prov_start+0x148>)
    da32:	4b41      	ldr	r3, [pc, #260]	; (db38 <gen_prov_start+0x14c>)
    da34:	1a1b      	subs	r3, r3, r0
    da36:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unexpected xact 0x%x, expected 0x%x", rx->xact_id,
    da38:	019b      	lsls	r3, r3, #6
}
    da3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("Unexpected xact 0x%x, expected 0x%x", rx->xact_id,
    da3e:	483f      	ldr	r0, [pc, #252]	; (db3c <gen_prov_start+0x150>)
    da40:	f043 0302 	orr.w	r3, r3, #2
    da44:	f00b b9f6 	b.w	18e34 <log_2>
	net_buf_simple_reset(link.rx.buf);
    da48:	6967      	ldr	r7, [r4, #20]
	buf->len  = 0U;
    da4a:	2300      	movs	r3, #0
    da4c:	80bb      	strh	r3, [r7, #4]
	buf->data = buf->__buf;
    da4e:	68bb      	ldr	r3, [r7, #8]
    da50:	603b      	str	r3, [r7, #0]
	link.rx.buf->len = net_buf_simple_pull_be16(buf);
    da52:	4628      	mov	r0, r5
    da54:	f00f fcb0 	bl	1d3b8 <net_buf_simple_pull_be16>
    da58:	80b8      	strh	r0, [r7, #4]
	link.rx.id = rx->xact_id;
    da5a:	7933      	ldrb	r3, [r6, #4]
    da5c:	7423      	strb	r3, [r4, #16]
	link.rx.fcs = net_buf_simple_pull_u8(buf);
    da5e:	4628      	mov	r0, r5
    da60:	f00f fc9a 	bl	1d398 <net_buf_simple_pull_u8>
	if (link.rx.buf->len < 1) {
    da64:	6963      	ldr	r3, [r4, #20]
	link.rx.fcs = net_buf_simple_pull_u8(buf);
    da66:	74e0      	strb	r0, [r4, #19]
	if (link.rx.buf->len < 1) {
    da68:	8899      	ldrh	r1, [r3, #4]
    da6a:	b951      	cbnz	r1, da82 <gen_prov_start+0x96>
    da6c:	4932      	ldr	r1, [pc, #200]	; (db38 <gen_prov_start+0x14c>)
    da6e:	4b31      	ldr	r3, [pc, #196]	; (db34 <gen_prov_start+0x148>)
		BT_ERR("Ignoring zero-length provisioning PDU");
    da70:	4833      	ldr	r0, [pc, #204]	; (db40 <gen_prov_start+0x154>)
    da72:	1ac9      	subs	r1, r1, r3
    da74:	08c9      	lsrs	r1, r1, #3
    da76:	0189      	lsls	r1, r1, #6
    da78:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Too small total length for multi-segment PDU");
    da7c:	f00b f9b9 	bl	18df2 <log_0>
		prov_failed(PROV_ERR_NVAL_FMT);
    da80:	e00c      	b.n	da9c <gen_prov_start+0xb0>
	if (link.rx.buf->len > link.rx.buf->size) {
    da82:	88db      	ldrh	r3, [r3, #6]
    da84:	428b      	cmp	r3, r1
    da86:	d20e      	bcs.n	daa6 <gen_prov_start+0xba>
    da88:	4a2b      	ldr	r2, [pc, #172]	; (db38 <gen_prov_start+0x14c>)
    da8a:	4b2a      	ldr	r3, [pc, #168]	; (db34 <gen_prov_start+0x148>)
		BT_ERR("Too large provisioning PDU (%u bytes)",
    da8c:	482d      	ldr	r0, [pc, #180]	; (db44 <gen_prov_start+0x158>)
    da8e:	1ad2      	subs	r2, r2, r3
    da90:	08d2      	lsrs	r2, r2, #3
    da92:	0192      	lsls	r2, r2, #6
    da94:	f042 0201 	orr.w	r2, r2, #1
    da98:	f00b f9b8 	bl	18e0c <log_1>
}
    da9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		prov_failed(PROV_ERR_NVAL_FMT);
    daa0:	2002      	movs	r0, #2
    daa2:	f7ff bc3d 	b.w	d320 <prov_failed>
	if (START_LAST_SEG(rx->gpc) > 0 && link.rx.buf->len <= 20U) {
    daa6:	7973      	ldrb	r3, [r6, #5]
    daa8:	089b      	lsrs	r3, r3, #2
    daaa:	d00a      	beq.n	dac2 <gen_prov_start+0xd6>
    daac:	2914      	cmp	r1, #20
    daae:	d808      	bhi.n	dac2 <gen_prov_start+0xd6>
    dab0:	4921      	ldr	r1, [pc, #132]	; (db38 <gen_prov_start+0x14c>)
    dab2:	4b20      	ldr	r3, [pc, #128]	; (db34 <gen_prov_start+0x148>)
		BT_ERR("Too small total length for multi-segment PDU");
    dab4:	4824      	ldr	r0, [pc, #144]	; (db48 <gen_prov_start+0x15c>)
    dab6:	1ac9      	subs	r1, r1, r3
    dab8:	08c9      	lsrs	r1, r1, #3
    daba:	0189      	lsls	r1, r1, #6
    dabc:	f041 0101 	orr.w	r1, r1, #1
    dac0:	e7dc      	b.n	da7c <gen_prov_start+0x90>
	prov_clear_tx();
    dac2:	f7ff fb4d 	bl	d160 <prov_clear_tx>
	link.rx.last_seg = START_LAST_SEG(rx->gpc);
    dac6:	7972      	ldrb	r2, [r6, #5]
	if ((link.rx.seg & BIT(0)) &&
    dac8:	7c61      	ldrb	r1, [r4, #17]
	link.rx.last_seg = START_LAST_SEG(rx->gpc);
    daca:	0892      	lsrs	r2, r2, #2
	if ((link.rx.seg & BIT(0)) &&
    dacc:	07cb      	lsls	r3, r1, #31
	link.rx.last_seg = START_LAST_SEG(rx->gpc);
    dace:	74a2      	strb	r2, [r4, #18]
	if ((link.rx.seg & BIT(0)) &&
    dad0:	d513      	bpl.n	dafa <gen_prov_start+0x10e>
	    (find_msb_set((~link.rx.seg) & SEG_NVAL) - 1 > link.rx.last_seg)) {
    dad2:	43cb      	mvns	r3, r1
	if (op == 0) {
    dad4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    dad8:	d005      	beq.n	dae6 <gen_prov_start+0xfa>
	return 32 - __builtin_clz(op);
    dada:	fab3 f383 	clz	r3, r3
    dade:	f1c3 031f 	rsb	r3, r3, #31
	if ((link.rx.seg & BIT(0)) &&
    dae2:	4293      	cmp	r3, r2
    dae4:	d90c      	bls.n	db00 <gen_prov_start+0x114>
    dae6:	4a14      	ldr	r2, [pc, #80]	; (db38 <gen_prov_start+0x14c>)
    dae8:	4b12      	ldr	r3, [pc, #72]	; (db34 <gen_prov_start+0x148>)
		BT_ERR("Invalid segment index %u", seg);
    daea:	4818      	ldr	r0, [pc, #96]	; (db4c <gen_prov_start+0x160>)
    daec:	1ad2      	subs	r2, r2, r3
    daee:	08d2      	lsrs	r2, r2, #3
    daf0:	0192      	lsls	r2, r2, #6
    daf2:	f042 0201 	orr.w	r2, r2, #1
    daf6:	21ff      	movs	r1, #255	; 0xff
    daf8:	e7ce      	b.n	da98 <gen_prov_start+0xac>
	uint8_t seg = SEG_NVAL;
    dafa:	2900      	cmp	r1, #0
    dafc:	bf08      	it	eq
    dafe:	21ff      	moveq	r1, #255	; 0xff
	link.rx.seg = seg & ((1 << (START_LAST_SEG(rx->gpc) + 1)) - 1);
    db00:	3201      	adds	r2, #1
    db02:	2301      	movs	r3, #1
    db04:	4093      	lsls	r3, r2
    db06:	3b01      	subs	r3, #1
    db08:	400b      	ands	r3, r1
    db0a:	7463      	strb	r3, [r4, #17]
	memcpy(link.rx.buf->data, buf->data, buf->len);
    db0c:	6963      	ldr	r3, [r4, #20]
    db0e:	88aa      	ldrh	r2, [r5, #4]
    db10:	6818      	ldr	r0, [r3, #0]
    db12:	6829      	ldr	r1, [r5, #0]
    db14:	f00c f846 	bl	19ba4 <memcpy>
	XACT_SEG_RECV(0);
    db18:	7c63      	ldrb	r3, [r4, #17]
    db1a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    db1e:	7463      	strb	r3, [r4, #17]
	if (!link.rx.seg) {
    db20:	2b00      	cmp	r3, #0
    db22:	f47f af7a 	bne.w	da1a <gen_prov_start+0x2e>
}
    db26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		prov_msg_recv();
    db2a:	f7ff bc63 	b.w	d3f4 <prov_msg_recv>
    db2e:	bf00      	nop
    db30:	20000120 	.word	0x20000120
    db34:	0001e408 	.word	0x0001e408
    db38:	0001e598 	.word	0x0001e598
    db3c:	00021534 	.word	0x00021534
    db40:	00021558 	.word	0x00021558
    db44:	0002157e 	.word	0x0002157e
    db48:	000215a4 	.word	0x000215a4
    db4c:	000214a5 	.word	0x000214a5

0000db50 <bt_mesh_pb_adv_recv>:
{
    db50:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!link.cb) {
    db52:	4d29      	ldr	r5, [pc, #164]	; (dbf8 <bt_mesh_pb_adv_recv+0xa8>)
    db54:	68ab      	ldr	r3, [r5, #8]
{
    db56:	4604      	mov	r4, r0
	if (!link.cb) {
    db58:	b163      	cbz	r3, db74 <bt_mesh_pb_adv_recv+0x24>
	if (buf->len < 6) {
    db5a:	8881      	ldrh	r1, [r0, #4]
    db5c:	2905      	cmp	r1, #5
    db5e:	d80b      	bhi.n	db78 <bt_mesh_pb_adv_recv+0x28>
    db60:	4a26      	ldr	r2, [pc, #152]	; (dbfc <bt_mesh_pb_adv_recv+0xac>)
    db62:	4b27      	ldr	r3, [pc, #156]	; (dc00 <bt_mesh_pb_adv_recv+0xb0>)
		BT_WARN("Too short provisioning packet (len %u)", buf->len);
    db64:	4827      	ldr	r0, [pc, #156]	; (dc04 <bt_mesh_pb_adv_recv+0xb4>)
    db66:	1ad2      	subs	r2, r2, r3
    db68:	08d2      	lsrs	r2, r2, #3
    db6a:	0192      	lsls	r2, r2, #6
    db6c:	f042 0202 	orr.w	r2, r2, #2
		BT_ERR("Too short GPC message type %u", GPCF(rx->gpc));
    db70:	f00b f94c 	bl	18e0c <log_1>
}
    db74:	b003      	add	sp, #12
    db76:	bd30      	pop	{r4, r5, pc}
	rx.link_id = net_buf_simple_pull_be32(buf);
    db78:	f00f fc29 	bl	1d3ce <net_buf_simple_pull_be32>
    db7c:	9000      	str	r0, [sp, #0]
	rx.xact_id = net_buf_simple_pull_u8(buf);
    db7e:	4620      	mov	r0, r4
    db80:	f00f fc0a 	bl	1d398 <net_buf_simple_pull_u8>
    db84:	f88d 0004 	strb.w	r0, [sp, #4]
	rx.gpc = net_buf_simple_pull_u8(buf);
    db88:	4620      	mov	r0, r4
    db8a:	f00f fc05 	bl	1d398 <net_buf_simple_pull_u8>
    db8e:	f88d 0005 	strb.w	r0, [sp, #5]
    db92:	f7ff fb19 	bl	d1c8 <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, ADV_LINK_ACTIVE) && link.id != rx.link_id) {
    db96:	07c3      	lsls	r3, r0, #31
    db98:	d503      	bpl.n	dba2 <bt_mesh_pb_adv_recv+0x52>
    db9a:	682a      	ldr	r2, [r5, #0]
    db9c:	9b00      	ldr	r3, [sp, #0]
    db9e:	429a      	cmp	r2, r3
    dba0:	d1e8      	bne.n	db74 <bt_mesh_pb_adv_recv+0x24>
	if (buf->len < gen_prov[GPCF(rx->gpc)].min_len) {
    dba2:	f89d 1005 	ldrb.w	r1, [sp, #5]
    dba6:	4a18      	ldr	r2, [pc, #96]	; (dc08 <bt_mesh_pb_adv_recv+0xb8>)
    dba8:	88a0      	ldrh	r0, [r4, #4]
    dbaa:	f001 0103 	and.w	r1, r1, #3
    dbae:	eb02 03c1 	add.w	r3, r2, r1, lsl #3
    dbb2:	795b      	ldrb	r3, [r3, #5]
    dbb4:	4298      	cmp	r0, r3
    dbb6:	d208      	bcs.n	dbca <bt_mesh_pb_adv_recv+0x7a>
    dbb8:	4a10      	ldr	r2, [pc, #64]	; (dbfc <bt_mesh_pb_adv_recv+0xac>)
    dbba:	4b11      	ldr	r3, [pc, #68]	; (dc00 <bt_mesh_pb_adv_recv+0xb0>)
		BT_ERR("Too short GPC message type %u", GPCF(rx->gpc));
    dbbc:	4813      	ldr	r0, [pc, #76]	; (dc0c <bt_mesh_pb_adv_recv+0xbc>)
    dbbe:	1ad2      	subs	r2, r2, r3
    dbc0:	08d2      	lsrs	r2, r2, #3
    dbc2:	0192      	lsls	r2, r2, #6
    dbc4:	f042 0201 	orr.w	r2, r2, #1
    dbc8:	e7d2      	b.n	db70 <bt_mesh_pb_adv_recv+0x20>
    dbca:	f7ff fafd 	bl	d1c8 <atomic_get.constprop.0>
	if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE) &&
    dbce:	f010 0f01 	tst.w	r0, #1
    dbd2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    dbd6:	d106      	bne.n	dbe6 <bt_mesh_pb_adv_recv+0x96>
	    gen_prov[GPCF(rx->gpc)].require_link) {
    dbd8:	f003 0103 	and.w	r1, r3, #3
    dbdc:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
	if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE) &&
    dbe0:	7909      	ldrb	r1, [r1, #4]
    dbe2:	2900      	cmp	r1, #0
    dbe4:	d1c6      	bne.n	db74 <bt_mesh_pb_adv_recv+0x24>
	gen_prov[GPCF(rx->gpc)].func(rx, buf);
    dbe6:	f003 0303 	and.w	r3, r3, #3
    dbea:	4621      	mov	r1, r4
    dbec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    dbf0:	4668      	mov	r0, sp
    dbf2:	4798      	blx	r3
    dbf4:	e7be      	b.n	db74 <bt_mesh_pb_adv_recv+0x24>
    dbf6:	bf00      	nop
    dbf8:	20000120 	.word	0x20000120
    dbfc:	0001e598 	.word	0x0001e598
    dc00:	0001e408 	.word	0x0001e408
    dc04:	000215d1 	.word	0x000215d1
    dc08:	0001eb54 	.word	0x0001eb54
    dc0c:	000215f8 	.word	0x000215f8

0000dc10 <reset_state>:
};

static struct prov_link link;

static void reset_state(void)
{
    dc10:	b510      	push	{r4, lr}
	if (link.conn) {
    dc12:	4c07      	ldr	r4, [pc, #28]	; (dc30 <reset_state+0x20>)
    dc14:	6820      	ldr	r0, [r4, #0]
    dc16:	b118      	cbz	r0, dc20 <reset_state+0x10>
		bt_conn_unref(link.conn);
    dc18:	f00c fc85 	bl	1a526 <bt_conn_unref>
		link.conn = NULL;
    dc1c:	2300      	movs	r3, #0
    dc1e:	6023      	str	r3, [r4, #0]
	}

	/* If this fails, the protocol timeout handler will exit early. */
	(void)k_work_cancel_delayable(&link.prot_timer);
    dc20:	4804      	ldr	r0, [pc, #16]	; (dc34 <reset_state+0x24>)
    dc22:	f00f ffdc 	bl	1dbde <k_work_cancel_delayable>

	link.rx_buf = bt_mesh_proxy_get_buf();
    dc26:	f000 fb9b 	bl	e360 <bt_mesh_proxy_get_buf>
    dc2a:	60e0      	str	r0, [r4, #12]
}
    dc2c:	bd10      	pop	{r4, pc}
    dc2e:	bf00      	nop
    dc30:	20001468 	.word	0x20001468
    dc34:	20001478 	.word	0x20001478

0000dc38 <link_closed>:

static void link_closed(enum prov_bearer_link_status status)
{
    dc38:	b570      	push	{r4, r5, r6, lr}
	const struct prov_bearer_cb *cb = link.cb;
    dc3a:	4b06      	ldr	r3, [pc, #24]	; (dc54 <link_closed+0x1c>)
	void *cb_data = link.cb_data;
    dc3c:	e9d3 6501 	ldrd	r6, r5, [r3, #4]
{
    dc40:	4604      	mov	r4, r0

	reset_state();
    dc42:	f7ff ffe5 	bl	dc10 <reset_state>

	cb->link_closed(&pb_gatt, cb_data, status);
    dc46:	6873      	ldr	r3, [r6, #4]
    dc48:	4803      	ldr	r0, [pc, #12]	; (dc58 <link_closed+0x20>)
    dc4a:	4622      	mov	r2, r4
    dc4c:	4629      	mov	r1, r5
}
    dc4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb->link_closed(&pb_gatt, cb_data, status);
    dc52:	4718      	bx	r3
    dc54:	20001468 	.word	0x20001468
    dc58:	0001eb8c 	.word	0x0001eb8c

0000dc5c <buf_send>:
	return 0;
}

static int buf_send(struct net_buf_simple *buf, prov_bearer_send_complete_t cb,
		    void *cb_data)
{
    dc5c:	b538      	push	{r3, r4, r5, lr}
	if (!link.conn) {
    dc5e:	4c0a      	ldr	r4, [pc, #40]	; (dc88 <buf_send+0x2c>)
    dc60:	6823      	ldr	r3, [r4, #0]
{
    dc62:	4605      	mov	r5, r0
	if (!link.conn) {
    dc64:	b16b      	cbz	r3, dc82 <buf_send+0x26>
		return -ENOTCONN;
	}

	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
    dc66:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
    dc6a:	2300      	movs	r3, #0
    dc6c:	f104 0010 	add.w	r0, r4, #16
    dc70:	f009 fdc0 	bl	177f4 <k_work_reschedule>

	return bt_mesh_proxy_send(link.conn, BT_MESH_PROXY_PROV, buf);
    dc74:	6820      	ldr	r0, [r4, #0]
    dc76:	462a      	mov	r2, r5
    dc78:	2103      	movs	r1, #3
}
    dc7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_mesh_proxy_send(link.conn, BT_MESH_PROXY_PROV, buf);
    dc7e:	f000 bbe5 	b.w	e44c <bt_mesh_proxy_send>
}
    dc82:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    dc86:	bd38      	pop	{r3, r4, r5, pc}
    dc88:	20001468 	.word	0x20001468

0000dc8c <link_accept>:
{
    dc8c:	b538      	push	{r3, r4, r5, lr}
    dc8e:	460c      	mov	r4, r1
    dc90:	4605      	mov	r5, r0
	(void)bt_mesh_proxy_prov_enable();
    dc92:	f000 fb6f 	bl	e374 <bt_mesh_proxy_prov_enable>
	bt_mesh_adv_update();
    dc96:	f7ff f95d 	bl	cf54 <bt_mesh_adv_update>
	link.cb = cb;
    dc9a:	4b02      	ldr	r3, [pc, #8]	; (dca4 <link_accept+0x18>)
}
    dc9c:	2000      	movs	r0, #0
	link.cb_data = cb_data;
    dc9e:	e9c3 5401 	strd	r5, r4, [r3, #4]
}
    dca2:	bd38      	pop	{r3, r4, r5, pc}
    dca4:	20001468 	.word	0x20001468

0000dca8 <bt_mesh_pb_gatt_recv>:
{
    dca8:	b538      	push	{r3, r4, r5, lr}
	if (link.conn != conn || !link.cb) {
    dcaa:	4c19      	ldr	r4, [pc, #100]	; (dd10 <bt_mesh_pb_gatt_recv+0x68>)
    dcac:	6823      	ldr	r3, [r4, #0]
    dcae:	4283      	cmp	r3, r0
{
    dcb0:	460d      	mov	r5, r1
	if (link.conn != conn || !link.cb) {
    dcb2:	d101      	bne.n	dcb8 <bt_mesh_pb_gatt_recv+0x10>
    dcb4:	6863      	ldr	r3, [r4, #4]
    dcb6:	b963      	cbnz	r3, dcd2 <bt_mesh_pb_gatt_recv+0x2a>
    dcb8:	4b16      	ldr	r3, [pc, #88]	; (dd14 <bt_mesh_pb_gatt_recv+0x6c>)
    dcba:	4917      	ldr	r1, [pc, #92]	; (dd18 <bt_mesh_pb_gatt_recv+0x70>)
		BT_WARN("Data for unexpected connection");
    dcbc:	4817      	ldr	r0, [pc, #92]	; (dd1c <bt_mesh_pb_gatt_recv+0x74>)
    dcbe:	1ac9      	subs	r1, r1, r3
    dcc0:	08c9      	lsrs	r1, r1, #3
    dcc2:	0189      	lsls	r1, r1, #6
    dcc4:	f041 0102 	orr.w	r1, r1, #2
    dcc8:	f00b f893 	bl	18df2 <log_0>
		return -ENOTCONN;
    dccc:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
    dcd0:	bd38      	pop	{r3, r4, r5, pc}
	if (buf->len < 1) {
    dcd2:	8889      	ldrh	r1, [r1, #4]
    dcd4:	b961      	cbnz	r1, dcf0 <bt_mesh_pb_gatt_recv+0x48>
    dcd6:	4b0f      	ldr	r3, [pc, #60]	; (dd14 <bt_mesh_pb_gatt_recv+0x6c>)
    dcd8:	4a0f      	ldr	r2, [pc, #60]	; (dd18 <bt_mesh_pb_gatt_recv+0x70>)
		BT_WARN("Too short provisioning packet (len %u)", buf->len);
    dcda:	4811      	ldr	r0, [pc, #68]	; (dd20 <bt_mesh_pb_gatt_recv+0x78>)
    dcdc:	1ad2      	subs	r2, r2, r3
    dcde:	08d2      	lsrs	r2, r2, #3
    dce0:	0192      	lsls	r2, r2, #6
    dce2:	f042 0202 	orr.w	r2, r2, #2
    dce6:	f00b f891 	bl	18e0c <log_1>
		return -EINVAL;
    dcea:	f06f 0015 	mvn.w	r0, #21
    dcee:	e7ef      	b.n	dcd0 <bt_mesh_pb_gatt_recv+0x28>
	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
    dcf0:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
    dcf4:	2300      	movs	r3, #0
    dcf6:	f104 0010 	add.w	r0, r4, #16
    dcfa:	f009 fd7b 	bl	177f4 <k_work_reschedule>
	link.cb->recv(&pb_gatt, link.cb_data, buf);
    dcfe:	6863      	ldr	r3, [r4, #4]
    dd00:	4808      	ldr	r0, [pc, #32]	; (dd24 <bt_mesh_pb_gatt_recv+0x7c>)
    dd02:	68db      	ldr	r3, [r3, #12]
    dd04:	68a1      	ldr	r1, [r4, #8]
    dd06:	462a      	mov	r2, r5
    dd08:	4798      	blx	r3
	return 0;
    dd0a:	2000      	movs	r0, #0
    dd0c:	e7e0      	b.n	dcd0 <bt_mesh_pb_gatt_recv+0x28>
    dd0e:	bf00      	nop
    dd10:	20001468 	.word	0x20001468
    dd14:	0001e408 	.word	0x0001e408
    dd18:	0001e5a0 	.word	0x0001e5a0
    dd1c:	00021625 	.word	0x00021625
    dd20:	000215d1 	.word	0x000215d1
    dd24:	0001eb8c 	.word	0x0001eb8c

0000dd28 <bt_mesh_pb_gatt_open>:
{
    dd28:	b538      	push	{r3, r4, r5, lr}
	if (link.conn) {
    dd2a:	4d0c      	ldr	r5, [pc, #48]	; (dd5c <bt_mesh_pb_gatt_open+0x34>)
    dd2c:	682c      	ldr	r4, [r5, #0]
    dd2e:	b98c      	cbnz	r4, dd54 <bt_mesh_pb_gatt_open+0x2c>
	link.conn = bt_conn_ref(conn);
    dd30:	f00c fbde 	bl	1a4f0 <bt_conn_ref>
    dd34:	4603      	mov	r3, r0
    dd36:	4628      	mov	r0, r5
	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
    dd38:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
	link.conn = bt_conn_ref(conn);
    dd3c:	f840 3b10 	str.w	r3, [r0], #16
	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
    dd40:	2300      	movs	r3, #0
    dd42:	f009 fd57 	bl	177f4 <k_work_reschedule>
	link.cb->link_opened(&pb_gatt, link.cb_data);
    dd46:	686b      	ldr	r3, [r5, #4]
    dd48:	4805      	ldr	r0, [pc, #20]	; (dd60 <bt_mesh_pb_gatt_open+0x38>)
    dd4a:	681b      	ldr	r3, [r3, #0]
    dd4c:	68a9      	ldr	r1, [r5, #8]
    dd4e:	4798      	blx	r3
	return 0;
    dd50:	4620      	mov	r0, r4
}
    dd52:	bd38      	pop	{r3, r4, r5, pc}
		return -EBUSY;
    dd54:	f06f 000f 	mvn.w	r0, #15
    dd58:	e7fb      	b.n	dd52 <bt_mesh_pb_gatt_open+0x2a>
    dd5a:	bf00      	nop
    dd5c:	20001468 	.word	0x20001468
    dd60:	0001eb8c 	.word	0x0001eb8c

0000dd64 <bt_mesh_pb_gatt_close>:
{
    dd64:	b508      	push	{r3, lr}
	if (link.conn != conn) {
    dd66:	4b06      	ldr	r3, [pc, #24]	; (dd80 <bt_mesh_pb_gatt_close+0x1c>)
    dd68:	681b      	ldr	r3, [r3, #0]
    dd6a:	4283      	cmp	r3, r0
    dd6c:	d104      	bne.n	dd78 <bt_mesh_pb_gatt_close+0x14>
	link_closed(PROV_BEARER_LINK_STATUS_SUCCESS);
    dd6e:	2000      	movs	r0, #0
    dd70:	f7ff ff62 	bl	dc38 <link_closed>
	return 0;
    dd74:	2000      	movs	r0, #0
}
    dd76:	bd08      	pop	{r3, pc}
		return -ENOTCONN;
    dd78:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    dd7c:	e7fb      	b.n	dd76 <bt_mesh_pb_gatt_close+0x12>
    dd7e:	bf00      	nop
    dd80:	20001468 	.word	0x20001468

0000dd84 <proxy_send_beacons>:
{
	struct bt_mesh_proxy_client *client;

	client = CONTAINER_OF(work, struct bt_mesh_proxy_client, send_beacons);

	(void)bt_mesh_subnet_find(send_beacon_cb, client);
    dd84:	f1a0 010c 	sub.w	r1, r0, #12
    dd88:	4801      	ldr	r0, [pc, #4]	; (dd90 <proxy_send_beacons+0xc>)
    dd8a:	f7fc bf1d 	b.w	abc8 <bt_mesh_subnet_find>
    dd8e:	bf00      	nop
    dd90:	0001bebd 	.word	0x0001bebd

0000dd94 <prov_ccc_write.part.0>:
static void prov_ccc_changed(const struct bt_gatt_attr *attr, uint16_t value)
{
	BT_DBG("value 0x%04x", value);
}

static ssize_t prov_ccc_write(struct bt_conn *conn,
    dd94:	b508      	push	{r3, lr}
    dd96:	4a07      	ldr	r2, [pc, #28]	; (ddb4 <prov_ccc_write.part.0+0x20>)
    dd98:	4b07      	ldr	r3, [pc, #28]	; (ddb8 <prov_ccc_write.part.0+0x24>)
    dd9a:	1ad2      	subs	r2, r2, r3
    dd9c:	08d2      	lsrs	r2, r2, #3
	struct bt_mesh_proxy_client *client;

	BT_DBG("value 0x%04x", value);

	if (value != BT_GATT_CCC_NOTIFY) {
		BT_WARN("Client wrote 0x%04x instead enabling notify", value);
    dd9e:	0192      	lsls	r2, r2, #6
static ssize_t prov_ccc_write(struct bt_conn *conn,
    dda0:	4601      	mov	r1, r0
		BT_WARN("Client wrote 0x%04x instead enabling notify", value);
    dda2:	f042 0202 	orr.w	r2, r2, #2
    dda6:	4805      	ldr	r0, [pc, #20]	; (ddbc <prov_ccc_write.part.0+0x28>)
    dda8:	f00b f830 	bl	18e0c <log_1>
		client->filter_type = PROV;
		bt_mesh_pb_gatt_open(conn);
	}

	return sizeof(value);
}
    ddac:	f06f 0012 	mvn.w	r0, #18
    ddb0:	bd08      	pop	{r3, pc}
    ddb2:	bf00      	nop
    ddb4:	0001e5b8 	.word	0x0001e5b8
    ddb8:	0001e408 	.word	0x0001e408
    ddbc:	00021654 	.word	0x00021654

0000ddc0 <notify_complete>:
}

#endif /* CONFIG_BT_MESH_GATT_PROXY */

static void notify_complete(struct bt_conn *conn, void *user_data)
{
    ddc0:	b510      	push	{r4, lr}
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    ddc2:	4b0d      	ldr	r3, [pc, #52]	; (ddf8 <notify_complete+0x38>)
    ddc4:	f3bf 8f5b 	dmb	ish
    ddc8:	e853 2f00 	ldrex	r2, [r3]
    ddcc:	1e51      	subs	r1, r2, #1
    ddce:	e843 1000 	strex	r0, r1, [r3]
    ddd2:	2800      	cmp	r0, #0
    ddd4:	d1f8      	bne.n	ddc8 <notify_complete+0x8>
    ddd6:	f3bf 8f5b 	dmb	ish
	sys_snode_t *n;

	if (atomic_dec(&pending_notifications) > 1) {
    ddda:	2a01      	cmp	r2, #1
    dddc:	dc0b      	bgt.n	ddf6 <notify_complete+0x36>
Z_GENLIST_IS_EMPTY(slist)
    ddde:	4c07      	ldr	r4, [pc, #28]	; (ddfc <notify_complete+0x3c>)
    dde0:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
    dde2:	b143      	cbz	r3, ddf6 <notify_complete+0x36>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    dde4:	6861      	ldr	r1, [r4, #4]
    dde6:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    dde8:	6022      	str	r2, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ddea:	428b      	cmp	r3, r1
	list->tail = node;
    ddec:	bf08      	it	eq
    ddee:	6062      	streq	r2, [r4, #4]
	}

	BT_DBG("");

	while ((n = sys_slist_get(&idle_waiters))) {
		CONTAINER_OF(n, struct bt_mesh_proxy_idle_cb, n)->cb();
    ddf0:	685b      	ldr	r3, [r3, #4]
    ddf2:	4798      	blx	r3
    ddf4:	e7f4      	b.n	dde0 <notify_complete+0x20>
	}
}
    ddf6:	bd10      	pop	{r4, pc}
    ddf8:	20001c3c 	.word	0x20001c3c
    ddfc:	20001c34 	.word	0x20001c34

0000de00 <proxy_send>:

static int proxy_send(struct bt_conn *conn, const void *data,
		      uint16_t len)
{
    de00:	b570      	push	{r4, r5, r6, lr}
    de02:	b086      	sub	sp, #24
    de04:	460e      	mov	r6, r1
    de06:	4615      	mov	r5, r2
    de08:	4604      	mov	r4, r0
	struct bt_gatt_notify_params params = {
    de0a:	2218      	movs	r2, #24
    de0c:	2100      	movs	r1, #0
    de0e:	4668      	mov	r0, sp
    de10:	f00b fef3 	bl	19bfa <memset>
    de14:	4b12      	ldr	r3, [pc, #72]	; (de60 <proxy_send+0x60>)
    de16:	9304      	str	r3, [sp, #16]
	int err;

	BT_DBG("%u bytes: %s", len, bt_hex(data, len));

#if defined(CONFIG_BT_MESH_GATT_PROXY)
	if (gatt_svc == MESH_GATT_PROXY) {
    de18:	4b12      	ldr	r3, [pc, #72]	; (de64 <proxy_send+0x64>)
	struct bt_gatt_notify_params params = {
    de1a:	9602      	str	r6, [sp, #8]
	if (gatt_svc == MESH_GATT_PROXY) {
    de1c:	781b      	ldrb	r3, [r3, #0]
	struct bt_gatt_notify_params params = {
    de1e:	f8ad 500c 	strh.w	r5, [sp, #12]
	if (gatt_svc == MESH_GATT_PROXY) {
    de22:	2b02      	cmp	r3, #2
    de24:	d108      	bne.n	de38 <proxy_send+0x38>
		params.attr = &proxy_attrs[3];
    de26:	4b10      	ldr	r3, [pc, #64]	; (de68 <proxy_send+0x68>)
	}
#endif
#if defined(CONFIG_BT_MESH_PB_GATT)
	if (gatt_svc == MESH_GATT_PROV) {
		params.attr = &prov_attrs[3];
    de28:	9301      	str	r3, [sp, #4]

	if (!params.attr) {
		return 0;
	}

	err = bt_gatt_notify_cb(conn, &params);
    de2a:	4669      	mov	r1, sp
    de2c:	4620      	mov	r0, r4
    de2e:	f7fb f839 	bl	8ea4 <bt_gatt_notify_cb>
	if (!err) {
    de32:	b128      	cbz	r0, de40 <proxy_send+0x40>
		atomic_inc(&pending_notifications);
	}

	return err;
}
    de34:	b006      	add	sp, #24
    de36:	bd70      	pop	{r4, r5, r6, pc}
	if (gatt_svc == MESH_GATT_PROV) {
    de38:	2b01      	cmp	r3, #1
    de3a:	d10e      	bne.n	de5a <proxy_send+0x5a>
		params.attr = &prov_attrs[3];
    de3c:	4b0b      	ldr	r3, [pc, #44]	; (de6c <proxy_send+0x6c>)
    de3e:	e7f3      	b.n	de28 <proxy_send+0x28>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    de40:	4b0b      	ldr	r3, [pc, #44]	; (de70 <proxy_send+0x70>)
    de42:	f3bf 8f5b 	dmb	ish
    de46:	e853 2f00 	ldrex	r2, [r3]
    de4a:	3201      	adds	r2, #1
    de4c:	e843 2100 	strex	r1, r2, [r3]
    de50:	2900      	cmp	r1, #0
    de52:	d1f8      	bne.n	de46 <proxy_send+0x46>
    de54:	f3bf 8f5b 	dmb	ish
	return atomic_add(target, 1);
    de58:	e7ec      	b.n	de34 <proxy_send+0x34>
		return 0;
    de5a:	2000      	movs	r0, #0
    de5c:	e7ea      	b.n	de34 <proxy_send+0x34>
    de5e:	bf00      	nop
    de60:	0000ddc1 	.word	0x0000ddc1
    de64:	20002ff3 	.word	0x20002ff3
    de68:	200005a4 	.word	0x200005a4
    de6c:	20000508 	.word	0x20000508
    de70:	20001c3c 	.word	0x20001c3c

0000de74 <bt_mesh_proxy_beacon_send>:
	if (!sub) {
    de74:	4601      	mov	r1, r0
    de76:	b920      	cbnz	r0, de82 <bt_mesh_proxy_beacon_send+0xe>
		bt_mesh_subnet_foreach(bt_mesh_proxy_beacon_send);
    de78:	4804      	ldr	r0, [pc, #16]	; (de8c <bt_mesh_proxy_beacon_send+0x18>)
    de7a:	f7fc bec9 	b.w	ac10 <bt_mesh_subnet_foreach>
			beacon_send(clients[i].conn, sub);
    de7e:	f00e b804 	b.w	1be8a <beacon_send>
		if (clients[i].conn) {
    de82:	4b03      	ldr	r3, [pc, #12]	; (de90 <bt_mesh_proxy_beacon_send+0x1c>)
    de84:	6818      	ldr	r0, [r3, #0]
    de86:	2800      	cmp	r0, #0
    de88:	d1f9      	bne.n	de7e <bt_mesh_proxy_beacon_send+0xa>
}
    de8a:	4770      	bx	lr
    de8c:	0000de75 	.word	0x0000de75
    de90:	200001b8 	.word	0x200001b8

0000de94 <subnet_evt>:
}

#if defined(CONFIG_BT_MESH_GATT_PROXY)
static void subnet_evt(struct bt_mesh_subnet *sub, enum bt_mesh_key_evt evt)
{
	if (evt == BT_MESH_KEY_DELETED) {
    de94:	2901      	cmp	r1, #1
    de96:	d106      	bne.n	dea6 <subnet_evt+0x12>
		if (sub == beacon_sub) {
    de98:	4a04      	ldr	r2, [pc, #16]	; (deac <subnet_evt+0x18>)
    de9a:	6811      	ldr	r1, [r2, #0]
    de9c:	4288      	cmp	r0, r1
    de9e:	d104      	bne.n	deaa <subnet_evt+0x16>
			beacon_sub = NULL;
    dea0:	2300      	movs	r3, #0
    dea2:	6013      	str	r3, [r2, #0]
    dea4:	4770      	bx	lr
		}
	} else {
		bt_mesh_proxy_beacon_send(sub);
    dea6:	f7ff bfe5 	b.w	de74 <bt_mesh_proxy_beacon_send>
	}
}
    deaa:	4770      	bx	lr
    deac:	20001c30 	.word	0x20001c30

0000deb0 <send_filter_status>:
{
    deb0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_mesh_net_tx tx = {
    deb2:	f851 3b04 	ldr.w	r3, [r1], #4
    deb6:	2600      	movs	r6, #0
{
    deb8:	4614      	mov	r4, r2
    deba:	4605      	mov	r5, r0
	struct bt_mesh_net_tx tx = {
    debc:	e9cd 3101 	strd	r3, r1, [sp, #4]
    dec0:	9603      	str	r6, [sp, #12]
		.src = bt_mesh_primary_addr(),
    dec2:	f7fe ff09 	bl	ccd8 <bt_mesh_primary_addr>
	tx.ctx->addr = BT_MESH_ADDR_UNASSIGNED;
    dec6:	9b02      	ldr	r3, [sp, #8]
	struct bt_mesh_net_tx tx = {
    dec8:	f8ad 000c 	strh.w	r0, [sp, #12]
	tx.ctx->addr = BT_MESH_ADDR_UNASSIGNED;
    decc:	809e      	strh	r6, [r3, #4]
    dece:	68a3      	ldr	r3, [r4, #8]
    ded0:	6023      	str	r3, [r4, #0]
	net_buf_simple_reserve(buf, 10);
    ded2:	210a      	movs	r1, #10
    ded4:	4620      	mov	r0, r4
	buf->len  = 0U;
    ded6:	80a6      	strh	r6, [r4, #4]
    ded8:	f00f f991 	bl	1d1fe <net_buf_simple_reserve>
	net_buf_simple_add_u8(buf, CFG_FILTER_STATUS);
    dedc:	2103      	movs	r1, #3
    dede:	4620      	mov	r0, r4
    dee0:	f00f f9fc 	bl	1d2dc <net_buf_simple_add_u8>
	if (client->filter_type == WHITELIST) {
    dee4:	7aab      	ldrb	r3, [r5, #10]
    dee6:	2b01      	cmp	r3, #1
		net_buf_simple_add_u8(buf, 0x00);
    dee8:	bf0c      	ite	eq
    deea:	4631      	moveq	r1, r6
		net_buf_simple_add_u8(buf, 0x01);
    deec:	2101      	movne	r1, #1
    deee:	4620      	mov	r0, r4
    def0:	f00f f9f4 	bl	1d2dc <net_buf_simple_add_u8>
		if (client->filter[i] != BT_MESH_ADDR_UNASSIGNED) {
    def4:	88a9      	ldrh	r1, [r5, #4]
    def6:	88eb      	ldrh	r3, [r5, #6]
	for (filter_size = 0U, i = 0; i < ARRAY_SIZE(client->filter); i++) {
    def8:	3900      	subs	r1, #0
    defa:	bf18      	it	ne
    defc:	2101      	movne	r1, #1
		if (client->filter[i] != BT_MESH_ADDR_UNASSIGNED) {
    defe:	b103      	cbz	r3, df02 <send_filter_status+0x52>
			filter_size++;
    df00:	3101      	adds	r1, #1
		if (client->filter[i] != BT_MESH_ADDR_UNASSIGNED) {
    df02:	892b      	ldrh	r3, [r5, #8]
    df04:	b10b      	cbz	r3, df0a <send_filter_status+0x5a>
			filter_size++;
    df06:	3101      	adds	r1, #1
    df08:	b289      	uxth	r1, r1
	net_buf_simple_add_be16(buf, filter_size);
    df0a:	4620      	mov	r0, r4
    df0c:	f00f f9ee 	bl	1d2ec <net_buf_simple_add_be16>
	err = bt_mesh_net_encode(&tx, buf, true);
    df10:	4621      	mov	r1, r4
    df12:	2201      	movs	r2, #1
    df14:	a801      	add	r0, sp, #4
    df16:	f7fc f9c7 	bl	a2a8 <bt_mesh_net_encode>
	if (err) {
    df1a:	4601      	mov	r1, r0
    df1c:	b158      	cbz	r0, df36 <send_filter_status+0x86>
    df1e:	4a0e      	ldr	r2, [pc, #56]	; (df58 <send_filter_status+0xa8>)
    df20:	4b0e      	ldr	r3, [pc, #56]	; (df5c <send_filter_status+0xac>)
		BT_ERR("Encoding Proxy cfg message failed (err %d)", err);
    df22:	480f      	ldr	r0, [pc, #60]	; (df60 <send_filter_status+0xb0>)
    df24:	1ad2      	subs	r2, r2, r3
    df26:	08d2      	lsrs	r2, r2, #3
    df28:	0192      	lsls	r2, r2, #6
    df2a:	f042 0201 	orr.w	r2, r2, #1
		BT_ERR("Failed to send proxy cfg message (err %d)", err);
    df2e:	f00a ff6d 	bl	18e0c <log_1>
}
    df32:	b004      	add	sp, #16
    df34:	bd70      	pop	{r4, r5, r6, pc}
	err = proxy_segment_and_send(client->conn, BT_MESH_PROXY_CONFIG, buf);
    df36:	2102      	movs	r1, #2
    df38:	6828      	ldr	r0, [r5, #0]
    df3a:	4622      	mov	r2, r4
    df3c:	f00d ff5c 	bl	1bdf8 <proxy_segment_and_send>
	if (err) {
    df40:	4601      	mov	r1, r0
    df42:	2800      	cmp	r0, #0
    df44:	d0f5      	beq.n	df32 <send_filter_status+0x82>
    df46:	4a04      	ldr	r2, [pc, #16]	; (df58 <send_filter_status+0xa8>)
    df48:	4b04      	ldr	r3, [pc, #16]	; (df5c <send_filter_status+0xac>)
		BT_ERR("Failed to send proxy cfg message (err %d)", err);
    df4a:	4806      	ldr	r0, [pc, #24]	; (df64 <send_filter_status+0xb4>)
    df4c:	1ad2      	subs	r2, r2, r3
    df4e:	08d2      	lsrs	r2, r2, #3
    df50:	0192      	lsls	r2, r2, #6
    df52:	f042 0201 	orr.w	r2, r2, #1
    df56:	e7ea      	b.n	df2e <send_filter_status+0x7e>
    df58:	0001e5b8 	.word	0x0001e5b8
    df5c:	0001e408 	.word	0x0001e408
    df60:	00021680 	.word	0x00021680
    df64:	000216ab 	.word	0x000216ab

0000df68 <proxy_complete_pdu>:
{
    df68:	b570      	push	{r4, r5, r6, lr}
	switch (client->msg_type) {
    df6a:	7ac1      	ldrb	r1, [r0, #11]
{
    df6c:	b094      	sub	sp, #80	; 0x50
    df6e:	4604      	mov	r4, r0
    df70:	2903      	cmp	r1, #3
    df72:	f200 80cf 	bhi.w	e114 <proxy_complete_pdu+0x1ac>
    df76:	e8df f001 	tbb	[pc, r1]
    df7a:	0e02      	.short	0x0e02
    df7c:	c712      	.short	0xc712
		bt_mesh_net_recv(&client->buf, 0, BT_MESH_NET_IF_PROXY);
    df7e:	2202      	movs	r2, #2
    df80:	2100      	movs	r1, #0
    df82:	3050      	adds	r0, #80	; 0x50
    df84:	f7fc fb26 	bl	a5d4 <bt_mesh_net_recv>
    df88:	2300      	movs	r3, #0
    df8a:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
	buf->data = buf->__buf;
    df8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
    df90:	6523      	str	r3, [r4, #80]	; 0x50
}
    df92:	b014      	add	sp, #80	; 0x50
    df94:	bd70      	pop	{r4, r5, r6, pc}
		bt_mesh_beacon_recv(&client->buf);
    df96:	3050      	adds	r0, #80	; 0x50
    df98:	f7fb fdfe 	bl	9b98 <bt_mesh_beacon_recv>
		break;
    df9c:	e7f4      	b.n	df88 <proxy_complete_pdu+0x20>
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_NET_MAX_PDU_LEN);
    df9e:	ab0c      	add	r3, sp, #48	; 0x30
    dfa0:	f44f 12e8 	mov.w	r2, #1900544	; 0x1d0000
    dfa4:	e9cd 2304 	strd	r2, r3, [sp, #16]
    dfa8:	9303      	str	r3, [sp, #12]
	err = bt_mesh_net_decode(&client->buf, BT_MESH_NET_IF_PROXY_CFG,
    dfaa:	2103      	movs	r1, #3
    dfac:	ab03      	add	r3, sp, #12
    dfae:	aa06      	add	r2, sp, #24
    dfb0:	3050      	adds	r0, #80	; 0x50
    dfb2:	f7fc fa45 	bl	a440 <bt_mesh_net_decode>
	if (err) {
    dfb6:	4601      	mov	r1, r0
    dfb8:	b150      	cbz	r0, dfd0 <proxy_complete_pdu+0x68>
    dfba:	4a5b      	ldr	r2, [pc, #364]	; (e128 <proxy_complete_pdu+0x1c0>)
    dfbc:	4b5b      	ldr	r3, [pc, #364]	; (e12c <proxy_complete_pdu+0x1c4>)
		BT_ERR("Failed to decode Proxy Configuration (err %d)", err);
    dfbe:	485c      	ldr	r0, [pc, #368]	; (e130 <proxy_complete_pdu+0x1c8>)
    dfc0:	1ad2      	subs	r2, r2, r3
    dfc2:	08d2      	lsrs	r2, r2, #3
    dfc4:	0192      	lsls	r2, r2, #6
    dfc6:	f042 0201 	orr.w	r2, r2, #1
		BT_WARN("Unhandled Message Type 0x%02x", client->msg_type);
    dfca:	f00a ff1f 	bl	18e0c <log_1>
    dfce:	e7db      	b.n	df88 <proxy_complete_pdu+0x20>
	rx.local_match = 1U;
    dfd0:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
	if (bt_mesh_rpl_check(&rx, NULL)) {
    dfd4:	a806      	add	r0, sp, #24
	rx.local_match = 1U;
    dfd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    dfda:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	if (bt_mesh_rpl_check(&rx, NULL)) {
    dfde:	f7fe f9c1 	bl	c364 <bt_mesh_rpl_check>
    dfe2:	4606      	mov	r6, r0
    dfe4:	b188      	cbz	r0, e00a <proxy_complete_pdu+0xa2>
    dfe6:	4a51      	ldr	r2, [pc, #324]	; (e12c <proxy_complete_pdu+0x1c4>)
    dfe8:	4b4f      	ldr	r3, [pc, #316]	; (e128 <proxy_complete_pdu+0x1c0>)
		BT_WARN("Replay: src 0x%04x dst 0x%04x seq 0x%06x",
    dfea:	f8bd 1020 	ldrh.w	r1, [sp, #32]
    dfee:	4851      	ldr	r0, [pc, #324]	; (e134 <proxy_complete_pdu+0x1cc>)
    dff0:	1a9b      	subs	r3, r3, r2
    dff2:	08db      	lsrs	r3, r3, #3
    dff4:	019b      	lsls	r3, r3, #6
    dff6:	f043 0302 	orr.w	r3, r3, #2
    dffa:	f8ad 3000 	strh.w	r3, [sp]
    dffe:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
    e002:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e004:	f00a ff2f 	bl	18e66 <log_3>
		return;
    e008:	e7be      	b.n	df88 <proxy_complete_pdu+0x20>
	net_buf_simple_pull(&buf, BT_MESH_NET_HDR_LEN);
    e00a:	2109      	movs	r1, #9
    e00c:	a803      	add	r0, sp, #12
    e00e:	f00f f9b3 	bl	1d378 <net_buf_simple_pull>
	if (buf.len < 1) {
    e012:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    e016:	b953      	cbnz	r3, e02e <proxy_complete_pdu+0xc6>
    e018:	4b44      	ldr	r3, [pc, #272]	; (e12c <proxy_complete_pdu+0x1c4>)
    e01a:	4943      	ldr	r1, [pc, #268]	; (e128 <proxy_complete_pdu+0x1c0>)
		BT_WARN("Too short proxy configuration PDU");
    e01c:	4846      	ldr	r0, [pc, #280]	; (e138 <proxy_complete_pdu+0x1d0>)
    e01e:	1ac9      	subs	r1, r1, r3
    e020:	08c9      	lsrs	r1, r1, #3
    e022:	0189      	lsls	r1, r1, #6
    e024:	f041 0102 	orr.w	r1, r1, #2
    e028:	f00a fee3 	bl	18df2 <log_0>
		return;
    e02c:	e7ac      	b.n	df88 <proxy_complete_pdu+0x20>
	opcode = net_buf_simple_pull_u8(&buf);
    e02e:	a803      	add	r0, sp, #12
    e030:	f00f f9b2 	bl	1d398 <net_buf_simple_pull_u8>
	switch (opcode) {
    e034:	2801      	cmp	r0, #1
	opcode = net_buf_simple_pull_u8(&buf);
    e036:	4605      	mov	r5, r0
	switch (opcode) {
    e038:	d03d      	beq.n	e0b6 <proxy_complete_pdu+0x14e>
    e03a:	2802      	cmp	r0, #2
    e03c:	d051      	beq.n	e0e2 <proxy_complete_pdu+0x17a>
    e03e:	2800      	cmp	r0, #0
    e040:	d158      	bne.n	e0f4 <proxy_complete_pdu+0x18c>
	if (buf->len < 1) {
    e042:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    e046:	b97b      	cbnz	r3, e068 <proxy_complete_pdu+0x100>
    e048:	4937      	ldr	r1, [pc, #220]	; (e128 <proxy_complete_pdu+0x1c0>)
    e04a:	4b38      	ldr	r3, [pc, #224]	; (e12c <proxy_complete_pdu+0x1c4>)
		BT_WARN("Too short Filter Set message");
    e04c:	483b      	ldr	r0, [pc, #236]	; (e13c <proxy_complete_pdu+0x1d4>)
    e04e:	1ac9      	subs	r1, r1, r3
    e050:	08c9      	lsrs	r1, r1, #3
    e052:	0189      	lsls	r1, r1, #6
    e054:	f041 0102 	orr.w	r1, r1, #2
    e058:	f00a fecb 	bl	18df2 <log_0>
		send_filter_status(client, &rx, &buf);
    e05c:	aa03      	add	r2, sp, #12
    e05e:	a906      	add	r1, sp, #24
    e060:	4620      	mov	r0, r4
    e062:	f7ff ff25 	bl	deb0 <send_filter_status>
		break;
    e066:	e78f      	b.n	df88 <proxy_complete_pdu+0x20>
	type = net_buf_simple_pull_u8(buf);
    e068:	a803      	add	r0, sp, #12
    e06a:	f00f f995 	bl	1d398 <net_buf_simple_pull_u8>
	switch (type) {
    e06e:	4601      	mov	r1, r0
    e070:	b160      	cbz	r0, e08c <proxy_complete_pdu+0x124>
    e072:	2801      	cmp	r0, #1
    e074:	d011      	beq.n	e09a <proxy_complete_pdu+0x132>
    e076:	4b2d      	ldr	r3, [pc, #180]	; (e12c <proxy_complete_pdu+0x1c4>)
    e078:	4a2b      	ldr	r2, [pc, #172]	; (e128 <proxy_complete_pdu+0x1c0>)
		BT_WARN("Prohibited Filter Type 0x%02x", type);
    e07a:	4831      	ldr	r0, [pc, #196]	; (e140 <proxy_complete_pdu+0x1d8>)
    e07c:	1ad2      	subs	r2, r2, r3
    e07e:	08d2      	lsrs	r2, r2, #3
    e080:	0192      	lsls	r2, r2, #6
    e082:	f042 0202 	orr.w	r2, r2, #2
    e086:	f00a fec1 	bl	18e0c <log_1>
		return -EINVAL;
    e08a:	e7e7      	b.n	e05c <proxy_complete_pdu+0xf4>
		(void)memset(client->filter, 0, sizeof(client->filter));
    e08c:	2206      	movs	r2, #6
    e08e:	1d20      	adds	r0, r4, #4
    e090:	f00b fdb3 	bl	19bfa <memset>
		client->filter_type = WHITELIST;
    e094:	2301      	movs	r3, #1
		client->filter_type = BLACKLIST;
    e096:	72a3      	strb	r3, [r4, #10]
		break;
    e098:	e7e0      	b.n	e05c <proxy_complete_pdu+0xf4>
		(void)memset(client->filter, 0, sizeof(client->filter));
    e09a:	2206      	movs	r2, #6
    e09c:	4629      	mov	r1, r5
    e09e:	1d20      	adds	r0, r4, #4
    e0a0:	f00b fdab 	bl	19bfa <memset>
		client->filter_type = BLACKLIST;
    e0a4:	2302      	movs	r3, #2
    e0a6:	e7f6      	b.n	e096 <proxy_complete_pdu+0x12e>
			addr = net_buf_simple_pull_be16(&buf);
    e0a8:	a803      	add	r0, sp, #12
    e0aa:	f00f f985 	bl	1d3b8 <net_buf_simple_pull_be16>
    e0ae:	4601      	mov	r1, r0
			filter_add(client, addr);
    e0b0:	4620      	mov	r0, r4
    e0b2:	f00d fe8c 	bl	1bdce <filter_add>
		while (buf.len >= 2) {
    e0b6:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    e0ba:	2b01      	cmp	r3, #1
    e0bc:	d8f4      	bhi.n	e0a8 <proxy_complete_pdu+0x140>
    e0be:	e7cd      	b.n	e05c <proxy_complete_pdu+0xf4>
			addr = net_buf_simple_pull_be16(&buf);
    e0c0:	a803      	add	r0, sp, #12
    e0c2:	f00f f979 	bl	1d3b8 <net_buf_simple_pull_be16>
	if (addr == BT_MESH_ADDR_UNASSIGNED) {
    e0c6:	b160      	cbz	r0, e0e2 <proxy_complete_pdu+0x17a>
		if (client->filter[i] == addr) {
    e0c8:	88a3      	ldrh	r3, [r4, #4]
    e0ca:	4283      	cmp	r3, r0
    e0cc:	d00e      	beq.n	e0ec <proxy_complete_pdu+0x184>
    e0ce:	88e3      	ldrh	r3, [r4, #6]
    e0d0:	4283      	cmp	r3, r0
    e0d2:	d00d      	beq.n	e0f0 <proxy_complete_pdu+0x188>
    e0d4:	8923      	ldrh	r3, [r4, #8]
    e0d6:	4283      	cmp	r3, r0
    e0d8:	d103      	bne.n	e0e2 <proxy_complete_pdu+0x17a>
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
    e0da:	2302      	movs	r3, #2
			client->filter[i] = BT_MESH_ADDR_UNASSIGNED;
    e0dc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    e0e0:	809e      	strh	r6, [r3, #4]
		while (buf.len >= 2) {
    e0e2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    e0e6:	2b01      	cmp	r3, #1
    e0e8:	d8ea      	bhi.n	e0c0 <proxy_complete_pdu+0x158>
    e0ea:	e7b7      	b.n	e05c <proxy_complete_pdu+0xf4>
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
    e0ec:	2300      	movs	r3, #0
    e0ee:	e7f5      	b.n	e0dc <proxy_complete_pdu+0x174>
    e0f0:	2301      	movs	r3, #1
    e0f2:	e7f3      	b.n	e0dc <proxy_complete_pdu+0x174>
    e0f4:	4a0c      	ldr	r2, [pc, #48]	; (e128 <proxy_complete_pdu+0x1c0>)
    e0f6:	4b0d      	ldr	r3, [pc, #52]	; (e12c <proxy_complete_pdu+0x1c4>)
    e0f8:	1ad2      	subs	r2, r2, r3
    e0fa:	08d2      	lsrs	r2, r2, #3
		BT_WARN("Unhandled configuration OpCode 0x%02x", opcode);
    e0fc:	0192      	lsls	r2, r2, #6
    e0fe:	4601      	mov	r1, r0
    e100:	f042 0202 	orr.w	r2, r2, #2
    e104:	480f      	ldr	r0, [pc, #60]	; (e144 <proxy_complete_pdu+0x1dc>)
    e106:	e760      	b.n	dfca <proxy_complete_pdu+0x62>
		bt_mesh_pb_gatt_recv(client->conn, &client->buf);
    e108:	f100 0150 	add.w	r1, r0, #80	; 0x50
    e10c:	6800      	ldr	r0, [r0, #0]
    e10e:	f7ff fdcb 	bl	dca8 <bt_mesh_pb_gatt_recv>
		break;
    e112:	e739      	b.n	df88 <proxy_complete_pdu+0x20>
    e114:	4a04      	ldr	r2, [pc, #16]	; (e128 <proxy_complete_pdu+0x1c0>)
    e116:	4b05      	ldr	r3, [pc, #20]	; (e12c <proxy_complete_pdu+0x1c4>)
		BT_WARN("Unhandled Message Type 0x%02x", client->msg_type);
    e118:	480b      	ldr	r0, [pc, #44]	; (e148 <proxy_complete_pdu+0x1e0>)
    e11a:	1ad2      	subs	r2, r2, r3
    e11c:	08d2      	lsrs	r2, r2, #3
    e11e:	0192      	lsls	r2, r2, #6
    e120:	f042 0202 	orr.w	r2, r2, #2
    e124:	e751      	b.n	dfca <proxy_complete_pdu+0x62>
    e126:	bf00      	nop
    e128:	0001e5b8 	.word	0x0001e5b8
    e12c:	0001e408 	.word	0x0001e408
    e130:	000216d5 	.word	0x000216d5
    e134:	00020d40 	.word	0x00020d40
    e138:	00021703 	.word	0x00021703
    e13c:	00021725 	.word	0x00021725
    e140:	00021742 	.word	0x00021742
    e144:	00021760 	.word	0x00021760
    e148:	00021786 	.word	0x00021786

0000e14c <proxy_recv>:
{
    e14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (clients[i].conn == conn) {
    e14e:	4c5d      	ldr	r4, [pc, #372]	; (e2c4 <proxy_recv+0x178>)
{
    e150:	461d      	mov	r5, r3
		if (clients[i].conn == conn) {
    e152:	6823      	ldr	r3, [r4, #0]
    e154:	4283      	cmp	r3, r0
{
    e156:	4616      	mov	r6, r2
		if (clients[i].conn == conn) {
    e158:	f040 80b0 	bne.w	e2bc <proxy_recv+0x170>
	if (len < 1) {
    e15c:	b965      	cbnz	r5, e178 <proxy_recv+0x2c>
    e15e:	495a      	ldr	r1, [pc, #360]	; (e2c8 <proxy_recv+0x17c>)
    e160:	4b5a      	ldr	r3, [pc, #360]	; (e2cc <proxy_recv+0x180>)
		BT_WARN("Too small Proxy PDU");
    e162:	485b      	ldr	r0, [pc, #364]	; (e2d0 <proxy_recv+0x184>)
    e164:	1ac9      	subs	r1, r1, r3
    e166:	08c9      	lsrs	r1, r1, #3
    e168:	0189      	lsls	r1, r1, #6
    e16a:	f041 0102 	orr.w	r1, r1, #2
			BT_WARN("Unexpected message type in last SAR PDU");
    e16e:	f00a fe40 	bl	18df2 <log_0>
			return -EINVAL;
    e172:	f06f 0515 	mvn.w	r5, #21
    e176:	e060      	b.n	e23a <proxy_recv+0xee>
	if (ATTR_IS_PROV(attr) != (PDU_TYPE(data) == BT_MESH_PROXY_PROV)) {
    e178:	7812      	ldrb	r2, [r2, #0]
    e17a:	68cb      	ldr	r3, [r1, #12]
    e17c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    e180:	3b00      	subs	r3, #0
    e182:	f1a2 0103 	sub.w	r1, r2, #3
    e186:	bf18      	it	ne
    e188:	2301      	movne	r3, #1
    e18a:	424a      	negs	r2, r1
    e18c:	414a      	adcs	r2, r1
    e18e:	4293      	cmp	r3, r2
    e190:	d008      	beq.n	e1a4 <proxy_recv+0x58>
    e192:	494d      	ldr	r1, [pc, #308]	; (e2c8 <proxy_recv+0x17c>)
    e194:	4b4d      	ldr	r3, [pc, #308]	; (e2cc <proxy_recv+0x180>)
		BT_WARN("Proxy PDU type doesn't match GATT service");
    e196:	484f      	ldr	r0, [pc, #316]	; (e2d4 <proxy_recv+0x188>)
    e198:	1ac9      	subs	r1, r1, r3
    e19a:	08c9      	lsrs	r1, r1, #3
    e19c:	0189      	lsls	r1, r1, #6
    e19e:	f041 0102 	orr.w	r1, r1, #2
    e1a2:	e7e4      	b.n	e16e <proxy_recv+0x22>
	if (len - 1 > net_buf_simple_tailroom(&client->buf)) {
    e1a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
    e1a8:	f00f f91e 	bl	1d3e8 <net_buf_simple_tailroom>
    e1ac:	1e6f      	subs	r7, r5, #1
    e1ae:	4287      	cmp	r7, r0
    e1b0:	d908      	bls.n	e1c4 <proxy_recv+0x78>
    e1b2:	4945      	ldr	r1, [pc, #276]	; (e2c8 <proxy_recv+0x17c>)
    e1b4:	4b45      	ldr	r3, [pc, #276]	; (e2cc <proxy_recv+0x180>)
		BT_WARN("Too big proxy PDU");
    e1b6:	4848      	ldr	r0, [pc, #288]	; (e2d8 <proxy_recv+0x18c>)
    e1b8:	1ac9      	subs	r1, r1, r3
    e1ba:	08c9      	lsrs	r1, r1, #3
    e1bc:	0189      	lsls	r1, r1, #6
    e1be:	f041 0102 	orr.w	r1, r1, #2
    e1c2:	e7d4      	b.n	e16e <proxy_recv+0x22>
	switch (PDU_SAR(data)) {
    e1c4:	7833      	ldrb	r3, [r6, #0]
    e1c6:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
    e1ca:	0999      	lsrs	r1, r3, #6
    e1cc:	2902      	cmp	r1, #2
    e1ce:	d036      	beq.n	e23e <proxy_recv+0xf2>
    e1d0:	2903      	cmp	r1, #3
    e1d2:	d056      	beq.n	e282 <proxy_recv+0x136>
    e1d4:	2901      	cmp	r1, #1
    e1d6:	d014      	beq.n	e202 <proxy_recv+0xb6>
		if (client->buf.len) {
    e1d8:	b142      	cbz	r2, e1ec <proxy_recv+0xa0>
    e1da:	493b      	ldr	r1, [pc, #236]	; (e2c8 <proxy_recv+0x17c>)
    e1dc:	4b3b      	ldr	r3, [pc, #236]	; (e2cc <proxy_recv+0x180>)
			BT_WARN("Complete PDU while a pending incomplete one");
    e1de:	483f      	ldr	r0, [pc, #252]	; (e2dc <proxy_recv+0x190>)
    e1e0:	1ac9      	subs	r1, r1, r3
    e1e2:	08c9      	lsrs	r1, r1, #3
    e1e4:	0189      	lsls	r1, r1, #6
    e1e6:	f041 0102 	orr.w	r1, r1, #2
    e1ea:	e7c0      	b.n	e16e <proxy_recv+0x22>
		client->msg_type = PDU_TYPE(data);
    e1ec:	72e3      	strb	r3, [r4, #11]
		net_buf_simple_add_mem(&client->buf, data + 1, len - 1);
    e1ee:	463a      	mov	r2, r7
    e1f0:	1c71      	adds	r1, r6, #1
    e1f2:	f104 0050 	add.w	r0, r4, #80	; 0x50
    e1f6:	f00f f868 	bl	1d2ca <net_buf_simple_add_mem>
		proxy_complete_pdu(client);
    e1fa:	4620      	mov	r0, r4
    e1fc:	f7ff feb4 	bl	df68 <proxy_complete_pdu>
	return len;
    e200:	e01b      	b.n	e23a <proxy_recv+0xee>
		if (client->buf.len) {
    e202:	b142      	cbz	r2, e216 <proxy_recv+0xca>
    e204:	4930      	ldr	r1, [pc, #192]	; (e2c8 <proxy_recv+0x17c>)
    e206:	4b31      	ldr	r3, [pc, #196]	; (e2cc <proxy_recv+0x180>)
			BT_WARN("First PDU while a pending incomplete one");
    e208:	4835      	ldr	r0, [pc, #212]	; (e2e0 <proxy_recv+0x194>)
    e20a:	1ac9      	subs	r1, r1, r3
    e20c:	08c9      	lsrs	r1, r1, #3
    e20e:	0189      	lsls	r1, r1, #6
    e210:	f041 0102 	orr.w	r1, r1, #2
    e214:	e7ab      	b.n	e16e <proxy_recv+0x22>
		k_work_reschedule(&client->sar_timer, PROXY_SAR_TIMEOUT);
    e216:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
    e21a:	2300      	movs	r3, #0
    e21c:	f104 0020 	add.w	r0, r4, #32
    e220:	f009 fae8 	bl	177f4 <k_work_reschedule>
		client->msg_type = PDU_TYPE(data);
    e224:	4631      	mov	r1, r6
		net_buf_simple_add_mem(&client->buf, data + 1, len - 1);
    e226:	463a      	mov	r2, r7
		client->msg_type = PDU_TYPE(data);
    e228:	f811 3b01 	ldrb.w	r3, [r1], #1
    e22c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    e230:	72e3      	strb	r3, [r4, #11]
		net_buf_simple_add_mem(&client->buf, data + 1, len - 1);
    e232:	f104 0050 	add.w	r0, r4, #80	; 0x50
    e236:	f00f f848 	bl	1d2ca <net_buf_simple_add_mem>
}
    e23a:	4628      	mov	r0, r5
    e23c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!client->buf.len) {
    e23e:	b942      	cbnz	r2, e252 <proxy_recv+0x106>
    e240:	4921      	ldr	r1, [pc, #132]	; (e2c8 <proxy_recv+0x17c>)
    e242:	4b22      	ldr	r3, [pc, #136]	; (e2cc <proxy_recv+0x180>)
			BT_WARN("Continuation with no prior data");
    e244:	4827      	ldr	r0, [pc, #156]	; (e2e4 <proxy_recv+0x198>)
    e246:	1ac9      	subs	r1, r1, r3
    e248:	08c9      	lsrs	r1, r1, #3
    e24a:	0189      	lsls	r1, r1, #6
    e24c:	f041 0102 	orr.w	r1, r1, #2
    e250:	e78d      	b.n	e16e <proxy_recv+0x22>
		if (client->msg_type != PDU_TYPE(data)) {
    e252:	7ae2      	ldrb	r2, [r4, #11]
    e254:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    e258:	429a      	cmp	r2, r3
    e25a:	d008      	beq.n	e26e <proxy_recv+0x122>
    e25c:	491a      	ldr	r1, [pc, #104]	; (e2c8 <proxy_recv+0x17c>)
    e25e:	4b1b      	ldr	r3, [pc, #108]	; (e2cc <proxy_recv+0x180>)
			BT_WARN("Unexpected message type in continuation");
    e260:	4821      	ldr	r0, [pc, #132]	; (e2e8 <proxy_recv+0x19c>)
    e262:	1ac9      	subs	r1, r1, r3
    e264:	08c9      	lsrs	r1, r1, #3
    e266:	0189      	lsls	r1, r1, #6
    e268:	f041 0102 	orr.w	r1, r1, #2
    e26c:	e77f      	b.n	e16e <proxy_recv+0x22>
		k_work_reschedule(&client->sar_timer, PROXY_SAR_TIMEOUT);
    e26e:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
    e272:	2300      	movs	r3, #0
    e274:	f104 0020 	add.w	r0, r4, #32
    e278:	f009 fabc 	bl	177f4 <k_work_reschedule>
		net_buf_simple_add_mem(&client->buf, data + 1, len - 1);
    e27c:	463a      	mov	r2, r7
    e27e:	1c71      	adds	r1, r6, #1
    e280:	e7d7      	b.n	e232 <proxy_recv+0xe6>
		if (!client->buf.len) {
    e282:	b942      	cbnz	r2, e296 <proxy_recv+0x14a>
    e284:	4910      	ldr	r1, [pc, #64]	; (e2c8 <proxy_recv+0x17c>)
    e286:	4b11      	ldr	r3, [pc, #68]	; (e2cc <proxy_recv+0x180>)
			BT_WARN("Last SAR PDU with no prior data");
    e288:	4818      	ldr	r0, [pc, #96]	; (e2ec <proxy_recv+0x1a0>)
    e28a:	1ac9      	subs	r1, r1, r3
    e28c:	08c9      	lsrs	r1, r1, #3
    e28e:	0189      	lsls	r1, r1, #6
    e290:	f041 0102 	orr.w	r1, r1, #2
    e294:	e76b      	b.n	e16e <proxy_recv+0x22>
		if (client->msg_type != PDU_TYPE(data)) {
    e296:	7ae2      	ldrb	r2, [r4, #11]
    e298:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    e29c:	429a      	cmp	r2, r3
    e29e:	d008      	beq.n	e2b2 <proxy_recv+0x166>
    e2a0:	4909      	ldr	r1, [pc, #36]	; (e2c8 <proxy_recv+0x17c>)
    e2a2:	4b0a      	ldr	r3, [pc, #40]	; (e2cc <proxy_recv+0x180>)
			BT_WARN("Unexpected message type in last SAR PDU");
    e2a4:	4812      	ldr	r0, [pc, #72]	; (e2f0 <proxy_recv+0x1a4>)
    e2a6:	1ac9      	subs	r1, r1, r3
    e2a8:	08c9      	lsrs	r1, r1, #3
    e2aa:	0189      	lsls	r1, r1, #6
    e2ac:	f041 0102 	orr.w	r1, r1, #2
    e2b0:	e75d      	b.n	e16e <proxy_recv+0x22>
		(void)k_work_cancel_delayable(&client->sar_timer);
    e2b2:	f104 0020 	add.w	r0, r4, #32
    e2b6:	f00f fc92 	bl	1dbde <k_work_cancel_delayable>
    e2ba:	e798      	b.n	e1ee <proxy_recv+0xa2>
		return -ENOTCONN;
    e2bc:	f06f 057f 	mvn.w	r5, #127	; 0x7f
    e2c0:	e7bb      	b.n	e23a <proxy_recv+0xee>
    e2c2:	bf00      	nop
    e2c4:	200001b8 	.word	0x200001b8
    e2c8:	0001e5b8 	.word	0x0001e5b8
    e2cc:	0001e408 	.word	0x0001e408
    e2d0:	000217a4 	.word	0x000217a4
    e2d4:	000217b8 	.word	0x000217b8
    e2d8:	000217e2 	.word	0x000217e2
    e2dc:	000217f4 	.word	0x000217f4
    e2e0:	00021820 	.word	0x00021820
    e2e4:	00021849 	.word	0x00021849
    e2e8:	00021869 	.word	0x00021869
    e2ec:	00021891 	.word	0x00021891
    e2f0:	000218b1 	.word	0x000218b1

0000e2f4 <prov_ccc_write>:
	if (value != BT_GATT_CCC_NOTIFY) {
    e2f4:	2a01      	cmp	r2, #1
{
    e2f6:	b508      	push	{r3, lr}
	if (value != BT_GATT_CCC_NOTIFY) {
    e2f8:	d106      	bne.n	e308 <prov_ccc_write+0x14>
		if (clients[i].conn == conn) {
    e2fa:	4b0a      	ldr	r3, [pc, #40]	; (e324 <prov_ccc_write+0x30>)
    e2fc:	681a      	ldr	r2, [r3, #0]
    e2fe:	4290      	cmp	r0, r2
    e300:	d007      	beq.n	e312 <prov_ccc_write+0x1e>
	if (client->filter_type == NONE) {
    e302:	2300      	movs	r3, #0
    e304:	7a9b      	ldrb	r3, [r3, #10]
    e306:	deff      	udf	#255	; 0xff
}
    e308:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    e30c:	4610      	mov	r0, r2
    e30e:	f7ff bd41 	b.w	dd94 <prov_ccc_write.part.0>
	if (client->filter_type == NONE) {
    e312:	7a9a      	ldrb	r2, [r3, #10]
    e314:	b91a      	cbnz	r2, e31e <prov_ccc_write+0x2a>
		client->filter_type = PROV;
    e316:	2203      	movs	r2, #3
    e318:	729a      	strb	r2, [r3, #10]
		bt_mesh_pb_gatt_open(conn);
    e31a:	f7ff fd05 	bl	dd28 <bt_mesh_pb_gatt_open>
}
    e31e:	2002      	movs	r0, #2
    e320:	bd08      	pop	{r3, pc}
    e322:	bf00      	nop
    e324:	200001b8 	.word	0x200001b8

0000e328 <proxy_ccc_write>:
	if (value != BT_GATT_CCC_NOTIFY) {
    e328:	2a01      	cmp	r2, #1
{
    e32a:	4601      	mov	r1, r0
    e32c:	b508      	push	{r3, lr}
    e32e:	4610      	mov	r0, r2
	if (value != BT_GATT_CCC_NOTIFY) {
    e330:	d106      	bne.n	e340 <proxy_ccc_write+0x18>
		if (clients[i].conn == conn) {
    e332:	4b0a      	ldr	r3, [pc, #40]	; (e35c <proxy_ccc_write+0x34>)
    e334:	681a      	ldr	r2, [r3, #0]
    e336:	4291      	cmp	r1, r2
    e338:	d006      	beq.n	e348 <proxy_ccc_write+0x20>
	if (client->filter_type == NONE) {
    e33a:	2300      	movs	r3, #0
    e33c:	7a9b      	ldrb	r3, [r3, #10]
    e33e:	deff      	udf	#255	; 0xff
}
    e340:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    e344:	f7ff bd26 	b.w	dd94 <prov_ccc_write.part.0>
	if (client->filter_type == NONE) {
    e348:	7a9a      	ldrb	r2, [r3, #10]
    e34a:	b922      	cbnz	r2, e356 <proxy_ccc_write+0x2e>
		client->filter_type = WHITELIST;
    e34c:	7298      	strb	r0, [r3, #10]
		k_work_submit(&client->send_beacons);
    e34e:	f103 000c 	add.w	r0, r3, #12
    e352:	f009 f9b1 	bl	176b8 <k_work_submit>
}
    e356:	2002      	movs	r0, #2
    e358:	bd08      	pop	{r3, pc}
    e35a:	bf00      	nop
    e35c:	200001b8 	.word	0x200001b8

0000e360 <bt_mesh_proxy_get_buf>:
	buf->len  = 0U;
    e360:	4803      	ldr	r0, [pc, #12]	; (e370 <bt_mesh_proxy_get_buf+0x10>)
    e362:	2300      	movs	r3, #0
    e364:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
	buf->data = buf->__buf;
    e368:	6d83      	ldr	r3, [r0, #88]	; 0x58
    e36a:	f840 3f50 	str.w	r3, [r0, #80]!
}
    e36e:	4770      	bx	lr
    e370:	200001b8 	.word	0x200001b8

0000e374 <bt_mesh_proxy_prov_enable>:
{
    e374:	b538      	push	{r3, r4, r5, lr}
	if (gatt_svc == MESH_GATT_PROV) {
    e376:	4d0c      	ldr	r5, [pc, #48]	; (e3a8 <bt_mesh_proxy_prov_enable+0x34>)
    e378:	782c      	ldrb	r4, [r5, #0]
    e37a:	2c01      	cmp	r4, #1
    e37c:	d00e      	beq.n	e39c <bt_mesh_proxy_prov_enable+0x28>
	if (gatt_svc != MESH_GATT_NONE) {
    e37e:	b984      	cbnz	r4, e3a2 <bt_mesh_proxy_prov_enable+0x2e>
	(void)bt_gatt_service_register(&prov_svc);
    e380:	480a      	ldr	r0, [pc, #40]	; (e3ac <bt_mesh_proxy_prov_enable+0x38>)
    e382:	f7fa fac3 	bl	890c <bt_gatt_service_register>
	prov_fast_adv = true;
    e386:	4a0a      	ldr	r2, [pc, #40]	; (e3b0 <bt_mesh_proxy_prov_enable+0x3c>)
	gatt_svc = MESH_GATT_PROV;
    e388:	2301      	movs	r3, #1
    e38a:	702b      	strb	r3, [r5, #0]
	prov_fast_adv = true;
    e38c:	7013      	strb	r3, [r2, #0]
		if (clients[i].conn) {
    e38e:	4b09      	ldr	r3, [pc, #36]	; (e3b4 <bt_mesh_proxy_prov_enable+0x40>)
    e390:	6818      	ldr	r0, [r3, #0]
    e392:	b110      	cbz	r0, e39a <bt_mesh_proxy_prov_enable+0x26>
			clients[i].filter_type = PROV;
    e394:	2203      	movs	r2, #3
    e396:	729a      	strb	r2, [r3, #10]
	return 0;
    e398:	4620      	mov	r0, r4
}
    e39a:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
    e39c:	f06f 0077 	mvn.w	r0, #119	; 0x77
    e3a0:	e7fb      	b.n	e39a <bt_mesh_proxy_prov_enable+0x26>
		return -EBUSY;
    e3a2:	f06f 000f 	mvn.w	r0, #15
    e3a6:	e7f8      	b.n	e39a <bt_mesh_proxy_prov_enable+0x26>
    e3a8:	20002ff3 	.word	0x20002ff3
    e3ac:	2000055c 	.word	0x2000055c
    e3b0:	20002ff4 	.word	0x20002ff4
    e3b4:	200001b8 	.word	0x200001b8

0000e3b8 <bt_mesh_proxy_prov_disable>:
{
    e3b8:	b538      	push	{r3, r4, r5, lr}
	if (gatt_svc == MESH_GATT_NONE) {
    e3ba:	4d12      	ldr	r5, [pc, #72]	; (e404 <bt_mesh_proxy_prov_disable+0x4c>)
    e3bc:	782b      	ldrb	r3, [r5, #0]
{
    e3be:	4604      	mov	r4, r0
	if (gatt_svc == MESH_GATT_NONE) {
    e3c0:	b1cb      	cbz	r3, e3f6 <bt_mesh_proxy_prov_disable+0x3e>
	if (gatt_svc != MESH_GATT_PROV) {
    e3c2:	2b01      	cmp	r3, #1
    e3c4:	d11a      	bne.n	e3fc <bt_mesh_proxy_prov_disable+0x44>
	bt_gatt_service_unregister(&prov_svc);
    e3c6:	4810      	ldr	r0, [pc, #64]	; (e408 <bt_mesh_proxy_prov_disable+0x50>)
    e3c8:	f7fa ff7e 	bl	92c8 <bt_gatt_service_unregister>
	gatt_svc = MESH_GATT_NONE;
    e3cc:	2300      	movs	r3, #0
    e3ce:	702b      	strb	r3, [r5, #0]
		if (!client->conn || client->filter_type != PROV) {
    e3d0:	4d0e      	ldr	r5, [pc, #56]	; (e40c <bt_mesh_proxy_prov_disable+0x54>)
    e3d2:	6828      	ldr	r0, [r5, #0]
    e3d4:	b110      	cbz	r0, e3dc <bt_mesh_proxy_prov_disable+0x24>
    e3d6:	7aab      	ldrb	r3, [r5, #10]
    e3d8:	2b03      	cmp	r3, #3
    e3da:	d003      	beq.n	e3e4 <bt_mesh_proxy_prov_disable+0x2c>
	bt_mesh_adv_update();
    e3dc:	f7fe fdba 	bl	cf54 <bt_mesh_adv_update>
	return 0;
    e3e0:	2000      	movs	r0, #0
}
    e3e2:	bd38      	pop	{r3, r4, r5, pc}
		if (disconnect) {
    e3e4:	b11c      	cbz	r4, e3ee <bt_mesh_proxy_prov_disable+0x36>
			bt_conn_disconnect(client->conn,
    e3e6:	2113      	movs	r1, #19
    e3e8:	f00c f8d6 	bl	1a598 <bt_conn_disconnect>
    e3ec:	e7f6      	b.n	e3dc <bt_mesh_proxy_prov_disable+0x24>
			bt_mesh_pb_gatt_close(client->conn);
    e3ee:	f7ff fcb9 	bl	dd64 <bt_mesh_pb_gatt_close>
			client->filter_type = NONE;
    e3f2:	72ac      	strb	r4, [r5, #10]
    e3f4:	e7f2      	b.n	e3dc <bt_mesh_proxy_prov_disable+0x24>
		return -EALREADY;
    e3f6:	f06f 0077 	mvn.w	r0, #119	; 0x77
    e3fa:	e7f2      	b.n	e3e2 <bt_mesh_proxy_prov_disable+0x2a>
		return -EBUSY;
    e3fc:	f06f 000f 	mvn.w	r0, #15
    e400:	e7ef      	b.n	e3e2 <bt_mesh_proxy_prov_disable+0x2a>
    e402:	bf00      	nop
    e404:	20002ff3 	.word	0x20002ff3
    e408:	2000055c 	.word	0x2000055c
    e40c:	200001b8 	.word	0x200001b8

0000e410 <bt_mesh_proxy_gatt_enable>:
{
    e410:	b538      	push	{r3, r4, r5, lr}
	if (gatt_svc == MESH_GATT_PROXY) {
    e412:	4d0b      	ldr	r5, [pc, #44]	; (e440 <bt_mesh_proxy_gatt_enable+0x30>)
    e414:	782c      	ldrb	r4, [r5, #0]
    e416:	2c02      	cmp	r4, #2
    e418:	d00c      	beq.n	e434 <bt_mesh_proxy_gatt_enable+0x24>
	if (gatt_svc != MESH_GATT_NONE) {
    e41a:	b974      	cbnz	r4, e43a <bt_mesh_proxy_gatt_enable+0x2a>
	(void)bt_gatt_service_register(&proxy_svc);
    e41c:	4809      	ldr	r0, [pc, #36]	; (e444 <bt_mesh_proxy_gatt_enable+0x34>)
    e41e:	f7fa fa75 	bl	890c <bt_gatt_service_register>
	gatt_svc = MESH_GATT_PROXY;
    e422:	2302      	movs	r3, #2
    e424:	702b      	strb	r3, [r5, #0]
		if (clients[i].conn) {
    e426:	4b08      	ldr	r3, [pc, #32]	; (e448 <bt_mesh_proxy_gatt_enable+0x38>)
    e428:	6818      	ldr	r0, [r3, #0]
    e42a:	b110      	cbz	r0, e432 <bt_mesh_proxy_gatt_enable+0x22>
			clients[i].filter_type = WHITELIST;
    e42c:	2201      	movs	r2, #1
    e42e:	729a      	strb	r2, [r3, #10]
	return 0;
    e430:	4620      	mov	r0, r4
}
    e432:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
    e434:	f06f 0077 	mvn.w	r0, #119	; 0x77
    e438:	e7fb      	b.n	e432 <bt_mesh_proxy_gatt_enable+0x22>
		return -EBUSY;
    e43a:	f06f 000f 	mvn.w	r0, #15
    e43e:	e7f8      	b.n	e432 <bt_mesh_proxy_gatt_enable+0x22>
    e440:	20002ff3 	.word	0x20002ff3
    e444:	200005f8 	.word	0x200005f8
    e448:	200001b8 	.word	0x200001b8

0000e44c <bt_mesh_proxy_send>:
{
    e44c:	b538      	push	{r3, r4, r5, lr}
		if (clients[i].conn == conn) {
    e44e:	4c17      	ldr	r4, [pc, #92]	; (e4ac <bt_mesh_proxy_send+0x60>)
    e450:	6825      	ldr	r5, [r4, #0]
    e452:	4285      	cmp	r5, r0
    e454:	d00c      	beq.n	e470 <bt_mesh_proxy_send+0x24>
    e456:	4b16      	ldr	r3, [pc, #88]	; (e4b0 <bt_mesh_proxy_send+0x64>)
    e458:	4916      	ldr	r1, [pc, #88]	; (e4b4 <bt_mesh_proxy_send+0x68>)
		BT_ERR("No Proxy Client found");
    e45a:	4817      	ldr	r0, [pc, #92]	; (e4b8 <bt_mesh_proxy_send+0x6c>)
    e45c:	1ac9      	subs	r1, r1, r3
    e45e:	08c9      	lsrs	r1, r1, #3
    e460:	0189      	lsls	r1, r1, #6
    e462:	f041 0101 	orr.w	r1, r1, #1
    e466:	f00a fcc4 	bl	18df2 <log_0>
		return -ENOTCONN;
    e46a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
    e46e:	bd38      	pop	{r3, r4, r5, pc}
	if ((client->filter_type == PROV) != (type == BT_MESH_PROXY_PROV)) {
    e470:	7aa4      	ldrb	r4, [r4, #10]
    e472:	1ee5      	subs	r5, r4, #3
    e474:	426c      	negs	r4, r5
    e476:	f1a1 0c03 	sub.w	ip, r1, #3
    e47a:	416c      	adcs	r4, r5
    e47c:	f1dc 0300 	rsbs	r3, ip, #0
    e480:	eb43 030c 	adc.w	r3, r3, ip
    e484:	429c      	cmp	r4, r3
    e486:	d00c      	beq.n	e4a2 <bt_mesh_proxy_send+0x56>
    e488:	4b09      	ldr	r3, [pc, #36]	; (e4b0 <bt_mesh_proxy_send+0x64>)
    e48a:	490a      	ldr	r1, [pc, #40]	; (e4b4 <bt_mesh_proxy_send+0x68>)
		BT_ERR("Invalid PDU type for Proxy Client");
    e48c:	480b      	ldr	r0, [pc, #44]	; (e4bc <bt_mesh_proxy_send+0x70>)
    e48e:	1ac9      	subs	r1, r1, r3
    e490:	08c9      	lsrs	r1, r1, #3
    e492:	0189      	lsls	r1, r1, #6
    e494:	f041 0101 	orr.w	r1, r1, #1
    e498:	f00a fcab 	bl	18df2 <log_0>
		return -EINVAL;
    e49c:	f06f 0015 	mvn.w	r0, #21
    e4a0:	e7e5      	b.n	e46e <bt_mesh_proxy_send+0x22>
}
    e4a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return proxy_segment_and_send(conn, type, msg);
    e4a6:	f00d bca7 	b.w	1bdf8 <proxy_segment_and_send>
    e4aa:	bf00      	nop
    e4ac:	200001b8 	.word	0x200001b8
    e4b0:	0001e408 	.word	0x0001e408
    e4b4:	0001e5b8 	.word	0x0001e5b8
    e4b8:	000218d9 	.word	0x000218d9
    e4bc:	000218ef 	.word	0x000218ef

0000e4c0 <bt_mesh_proxy_relay>:
{
    e4c0:	b530      	push	{r4, r5, lr}
		if (!client->conn) {
    e4c2:	4c1c      	ldr	r4, [pc, #112]	; (e534 <bt_mesh_proxy_relay+0x74>)
{
    e4c4:	b08d      	sub	sp, #52	; 0x34
		NET_BUF_SIMPLE_DEFINE(msg, 32);
    e4c6:	ab04      	add	r3, sp, #16
    e4c8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    e4cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
    e4d0:	9301      	str	r3, [sp, #4]
		if (!client->conn) {
    e4d2:	6823      	ldr	r3, [r4, #0]
{
    e4d4:	4605      	mov	r5, r0
		if (!client->conn) {
    e4d6:	b15b      	cbz	r3, e4f0 <bt_mesh_proxy_relay+0x30>
	if (client->filter_type == BLACKLIST) {
    e4d8:	7aa3      	ldrb	r3, [r4, #10]
    e4da:	2b02      	cmp	r3, #2
    e4dc:	d10a      	bne.n	e4f4 <bt_mesh_proxy_relay+0x34>
			if (client->filter[i] == addr) {
    e4de:	88a3      	ldrh	r3, [r4, #4]
    e4e0:	428b      	cmp	r3, r1
    e4e2:	d005      	beq.n	e4f0 <bt_mesh_proxy_relay+0x30>
    e4e4:	88e3      	ldrh	r3, [r4, #6]
    e4e6:	428b      	cmp	r3, r1
    e4e8:	d002      	beq.n	e4f0 <bt_mesh_proxy_relay+0x30>
    e4ea:	8923      	ldrh	r3, [r4, #8]
    e4ec:	428b      	cmp	r3, r1
    e4ee:	d110      	bne.n	e512 <bt_mesh_proxy_relay+0x52>
	bool relayed = false;
    e4f0:	2000      	movs	r0, #0
    e4f2:	e01d      	b.n	e530 <bt_mesh_proxy_relay+0x70>
	if (addr == BT_MESH_ADDR_ALL_NODES) {
    e4f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e4f8:	4291      	cmp	r1, r2
    e4fa:	d00a      	beq.n	e512 <bt_mesh_proxy_relay+0x52>
	if (client->filter_type == WHITELIST) {
    e4fc:	2b01      	cmp	r3, #1
    e4fe:	d1f7      	bne.n	e4f0 <bt_mesh_proxy_relay+0x30>
			if (client->filter[i] == addr) {
    e500:	88a3      	ldrh	r3, [r4, #4]
    e502:	428b      	cmp	r3, r1
    e504:	d005      	beq.n	e512 <bt_mesh_proxy_relay+0x52>
    e506:	88e3      	ldrh	r3, [r4, #6]
    e508:	428b      	cmp	r3, r1
    e50a:	d002      	beq.n	e512 <bt_mesh_proxy_relay+0x52>
    e50c:	8923      	ldrh	r3, [r4, #8]
    e50e:	428b      	cmp	r3, r1
    e510:	d1ee      	bne.n	e4f0 <bt_mesh_proxy_relay+0x30>
		net_buf_simple_reserve(&msg, 1);
    e512:	2101      	movs	r1, #1
    e514:	a801      	add	r0, sp, #4
    e516:	f00e fe72 	bl	1d1fe <net_buf_simple_reserve>
		net_buf_simple_add_mem(&msg, buf->data, buf->len);
    e51a:	88aa      	ldrh	r2, [r5, #4]
    e51c:	6829      	ldr	r1, [r5, #0]
    e51e:	a801      	add	r0, sp, #4
    e520:	f00e fed3 	bl	1d2ca <net_buf_simple_add_mem>
		bt_mesh_proxy_send(client->conn, BT_MESH_PROXY_NET_PDU, &msg);
    e524:	6820      	ldr	r0, [r4, #0]
    e526:	aa01      	add	r2, sp, #4
    e528:	2100      	movs	r1, #0
    e52a:	f7ff ff8f 	bl	e44c <bt_mesh_proxy_send>
		relayed = true;
    e52e:	2001      	movs	r0, #1
}
    e530:	b00d      	add	sp, #52	; 0x34
    e532:	bd30      	pop	{r4, r5, pc}
    e534:	200001b8 	.word	0x200001b8

0000e538 <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
    e538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    e53c:	4f11      	ldr	r7, [pc, #68]	; (e584 <mayfly_init+0x4c>)
    e53e:	f8df a048 	ldr.w	sl, [pc, #72]	; e588 <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    e542:	2404      	movs	r4, #4
	while (callee_id--) {
    e544:	3c01      	subs	r4, #1
    e546:	b2e4      	uxtb	r4, r4
    e548:	2cff      	cmp	r4, #255	; 0xff
    e54a:	d018      	beq.n	e57e <mayfly_init+0x46>
    e54c:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    e550:	ea4f 0984 	mov.w	r9, r4, lsl #2
    e554:	0136      	lsls	r6, r6, #4
		caller_id = MAYFLY_CALLER_COUNT;
    e556:	2504      	movs	r5, #4
    e558:	f04f 080c 	mov.w	r8, #12
    e55c:	e00a      	b.n	e574 <mayfly_init+0x3c>
			memq_init(&mfl[callee_id][caller_id],
    e55e:	fb18 6105 	smlabb	r1, r8, r5, r6
    e562:	1d0a      	adds	r2, r1, #4
    e564:	eb05 0009 	add.w	r0, r5, r9
    e568:	443a      	add	r2, r7
    e56a:	4439      	add	r1, r7
    e56c:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
    e570:	f00d fd3f 	bl	1bff2 <memq_init>
		while (caller_id--) {
    e574:	3d01      	subs	r5, #1
    e576:	b2ed      	uxtb	r5, r5
    e578:	2dff      	cmp	r5, #255	; 0xff
    e57a:	d1f0      	bne.n	e55e <mayfly_init+0x26>
    e57c:	e7e2      	b.n	e544 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    e57e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e582:	bf00      	nop
    e584:	20001cc0 	.word	0x20001cc0
    e588:	20001c40 	.word	0x20001c40

0000e58c <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
    e58c:	b4f0      	push	{r4, r5, r6, r7}
    e58e:	2630      	movs	r6, #48	; 0x30
    e590:	240c      	movs	r4, #12
	if (enable) {
		if (mft[callee_id][caller_id].enable_req ==
    e592:	434e      	muls	r6, r1
    e594:	4b0f      	ldr	r3, [pc, #60]	; (e5d4 <mayfly_enable+0x48>)
{
    e596:	460f      	mov	r7, r1
		if (mft[callee_id][caller_id].enable_req ==
    e598:	fb04 6600 	mla	r6, r4, r0, r6
	if (enable) {
    e59c:	b152      	cbz	r2, e5b4 <mayfly_enable+0x28>
		if (mft[callee_id][caller_id].enable_req ==
    e59e:	199c      	adds	r4, r3, r6
    e5a0:	7a21      	ldrb	r1, [r4, #8]
    e5a2:	7a63      	ldrb	r3, [r4, #9]
    e5a4:	428b      	cmp	r3, r1
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    e5a6:	bf04      	itt	eq
    e5a8:	3301      	addeq	r3, #1
    e5aa:	7223      	strbeq	r3, [r4, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    e5ac:	4639      	mov	r1, r7

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
    e5ae:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    e5b0:	f006 bf26 	b.w	15400 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    e5b4:	4433      	add	r3, r6
    e5b6:	7a9c      	ldrb	r4, [r3, #10]
    e5b8:	7ada      	ldrb	r2, [r3, #11]
    e5ba:	42a2      	cmp	r2, r4
    e5bc:	d107      	bne.n	e5ce <mayfly_enable+0x42>
			mft[callee_id][caller_id].disable_req++;
    e5be:	3201      	adds	r2, #1
    e5c0:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
    e5c2:	4b05      	ldr	r3, [pc, #20]	; (e5d8 <mayfly_enable+0x4c>)
    e5c4:	2201      	movs	r2, #1
    e5c6:	545a      	strb	r2, [r3, r1]
}
    e5c8:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    e5ca:	f006 bf59 	b.w	15480 <mayfly_pend>
}
    e5ce:	bcf0      	pop	{r4, r5, r6, r7}
    e5d0:	4770      	bx	lr
    e5d2:	bf00      	nop
    e5d4:	20001cc0 	.word	0x20001cc0
    e5d8:	20002ff5 	.word	0x20002ff5

0000e5dc <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
    e5dc:	b570      	push	{r4, r5, r6, lr}
    e5de:	4606      	mov	r6, r0
    e5e0:	460d      	mov	r5, r1
    e5e2:	461c      	mov	r4, r3
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    e5e4:	b1a2      	cbz	r2, e610 <mayfly_enqueue+0x34>
    e5e6:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    e5e8:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    e5ea:	7820      	ldrb	r0, [r4, #0]
    e5ec:	1a80      	subs	r0, r0, r2
	if (state != 0U) {
    e5ee:	f010 0003 	ands.w	r0, r0, #3
    e5f2:	d02c      	beq.n	e64e <mayfly_enqueue+0x72>
		if (chain) {
    e5f4:	b31b      	cbz	r3, e63e <mayfly_enqueue+0x62>
			if (state != 1U) {
    e5f6:	2801      	cmp	r0, #1
    e5f8:	d028      	beq.n	e64c <mayfly_enqueue+0x70>
				/* mark as ready in queue */
				m->_req = ack + 1;
    e5fa:	3201      	adds	r2, #1
    e5fc:	b2d2      	uxtb	r2, r2
    e5fe:	7022      	strb	r2, [r4, #0]
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
    e600:	4b1c      	ldr	r3, [pc, #112]	; (e674 <mayfly_enqueue+0x98>)
    e602:	2201      	movs	r2, #1

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    e604:	4629      	mov	r1, r5
    e606:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
    e608:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
    e60a:	f006 ff39 	bl	15480 <mayfly_pend>
    e60e:	e01c      	b.n	e64a <mayfly_enqueue+0x6e>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    e610:	f00e fd24 	bl	1d05c <mayfly_prio_is_equal>
    e614:	2800      	cmp	r0, #0
    e616:	d0e6      	beq.n	e5e6 <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    e618:	4629      	mov	r1, r5
    e61a:	4630      	mov	r0, r6
    e61c:	f006 ff10 	bl	15440 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    e620:	2800      	cmp	r0, #0
    e622:	d0e0      	beq.n	e5e6 <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    e624:	2330      	movs	r3, #48	; 0x30
    e626:	220c      	movs	r2, #12
    e628:	436b      	muls	r3, r5
    e62a:	fb02 3306 	mla	r3, r2, r6, r3
    e62e:	4a12      	ldr	r2, [pc, #72]	; (e678 <mayfly_enqueue+0x9c>)
    e630:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    e632:	7a93      	ldrb	r3, [r2, #10]
    e634:	7ad2      	ldrb	r2, [r2, #11]
    e636:	1a9b      	subs	r3, r3, r2
    e638:	bf18      	it	ne
    e63a:	2301      	movne	r3, #1
    e63c:	e7d4      	b.n	e5e8 <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    e63e:	3202      	adds	r2, #2
    e640:	b2d2      	uxtb	r2, r2
    e642:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    e644:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    e648:	4798      	blx	r3

	return 0;
    e64a:	2000      	movs	r0, #0
}
    e64c:	bd70      	pop	{r4, r5, r6, pc}
	if (!chain) {
    e64e:	2b00      	cmp	r3, #0
    e650:	d0f8      	beq.n	e644 <mayfly_enqueue+0x68>
	m->_req = ack + 1;
    e652:	3201      	adds	r2, #1
    e654:	b2d2      	uxtb	r2, r2
    e656:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    e658:	2304      	movs	r3, #4
    e65a:	2230      	movs	r2, #48	; 0x30
    e65c:	fb12 3205 	smlabb	r2, r2, r5, r3
    e660:	230c      	movs	r3, #12
    e662:	fb13 2306 	smlabb	r3, r3, r6, r2
    e666:	4a04      	ldr	r2, [pc, #16]	; (e678 <mayfly_enqueue+0x9c>)
    e668:	6860      	ldr	r0, [r4, #4]
    e66a:	441a      	add	r2, r3
    e66c:	4621      	mov	r1, r4
    e66e:	f00d fcce 	bl	1c00e <memq_enqueue>
    e672:	e7c5      	b.n	e600 <mayfly_enqueue+0x24>
    e674:	20002ff5 	.word	0x20002ff5
    e678:	20001cc0 	.word	0x20001cc0

0000e67c <mayfly_run>:
		}
	}
}

void mayfly_run(uint8_t callee_id)
{
    e67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
    e680:	4b5b      	ldr	r3, [pc, #364]	; (e7f0 <mayfly_run+0x174>)
    e682:	5c1a      	ldrb	r2, [r3, r0]
{
    e684:	b089      	sub	sp, #36	; 0x24
    e686:	4604      	mov	r4, r0
	if (!mfp[callee_id]) {
    e688:	2a00      	cmp	r2, #0
    e68a:	f000 80aa 	beq.w	e7e2 <mayfly_run+0x166>
		return;
	}
	mfp[callee_id] = 0U;
    e68e:	2700      	movs	r7, #0
    e690:	541f      	strb	r7, [r3, r0]

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
    e692:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    e696:	011b      	lsls	r3, r3, #4
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    e698:	f8df b158 	ldr.w	fp, [pc, #344]	; e7f4 <mayfly_run+0x178>
    e69c:	9304      	str	r3, [sp, #16]
    e69e:	2504      	movs	r5, #4
    e6a0:	233c      	movs	r3, #60	; 0x3c
    e6a2:	fb13 5300 	smlabb	r3, r3, r0, r5
    e6a6:	445b      	add	r3, fp
    e6a8:	9303      	str	r3, [sp, #12]
	uint8_t disable = 0U;
    e6aa:	9700      	str	r7, [sp, #0]
    e6ac:	46da      	mov	sl, fp
	while (caller_id--) {
    e6ae:	3d01      	subs	r5, #1
    e6b0:	b2ed      	uxtb	r5, r5
    e6b2:	2dff      	cmp	r5, #255	; 0xff
    e6b4:	d10c      	bne.n	e6d0 <mayfly_run+0x54>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    e6b6:	9b00      	ldr	r3, [sp, #0]
    e6b8:	2b00      	cmp	r3, #0
    e6ba:	f000 8092 	beq.w	e7e2 <mayfly_run+0x166>
    e6be:	2f00      	cmp	r7, #0
    e6c0:	f040 808f 	bne.w	e7e2 <mayfly_run+0x166>
		mayfly_enable_cb(callee_id, callee_id, 0);
    e6c4:	463a      	mov	r2, r7
    e6c6:	4621      	mov	r1, r4
    e6c8:	4620      	mov	r0, r4
    e6ca:	f006 fe99 	bl	15400 <mayfly_enable_cb>
    e6ce:	e088      	b.n	e7e2 <mayfly_run+0x166>
		struct mayfly *m = 0;
    e6d0:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    e6d2:	f04f 080c 	mov.w	r8, #12
		struct mayfly *m = 0;
    e6d6:	9307      	str	r3, [sp, #28]
		link = memq_peek(mft[callee_id][caller_id].head,
    e6d8:	fb08 f805 	mul.w	r8, r8, r5
    e6dc:	2330      	movs	r3, #48	; 0x30
    e6de:	fb03 8304 	mla	r3, r3, r4, r8
    e6e2:	eb0a 0103 	add.w	r1, sl, r3
    e6e6:	f85a 0003 	ldr.w	r0, [sl, r3]
    e6ea:	6849      	ldr	r1, [r1, #4]
    e6ec:	aa07      	add	r2, sp, #28
    e6ee:	f00d fc95 	bl	1c01c <memq_peek>
		memq_dequeue(mft[callee_id][caller_id].tail,
    e6f2:	9a04      	ldr	r2, [sp, #16]
    e6f4:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    e6f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    e6fc:	4453      	add	r3, sl
    e6fe:	e9cd 8301 	strd	r8, r3, [sp, #4]
		link = memq_peek(mft[callee_id][caller_id].head,
    e702:	4606      	mov	r6, r0
		while (link) {
    e704:	2e00      	cmp	r6, #0
    e706:	d04e      	beq.n	e7a6 <mayfly_run+0x12a>
			state = (m->_req - m->_ack) & 0x03;
    e708:	9b07      	ldr	r3, [sp, #28]
    e70a:	f893 9000 	ldrb.w	r9, [r3]
    e70e:	785a      	ldrb	r2, [r3, #1]
    e710:	eba9 0902 	sub.w	r9, r9, r2
    e714:	f009 0903 	and.w	r9, r9, #3
			if (state == 1U) {
    e718:	f1b9 0f01 	cmp.w	r9, #1
    e71c:	d104      	bne.n	e728 <mayfly_run+0xac>
				m->_ack--;
    e71e:	3a01      	subs	r2, #1
    e720:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    e722:	e9d3 0202 	ldrd	r0, r2, [r3, #8]
    e726:	4790      	blx	r2
			dequeue(callee_id, caller_id, link, m);
    e728:	f8dd 801c 	ldr.w	r8, [sp, #28]
	req = m->_req;
    e72c:	f898 2000 	ldrb.w	r2, [r8]
	if (((req - m->_ack) & 0x03) != 1U) {
    e730:	f898 1001 	ldrb.w	r1, [r8, #1]
	req = m->_req;
    e734:	b2d3      	uxtb	r3, r2
	if (((req - m->_ack) & 0x03) != 1U) {
    e736:	1a52      	subs	r2, r2, r1
    e738:	f002 0203 	and.w	r2, r2, #3
    e73c:	2a01      	cmp	r2, #1
	req = m->_req;
    e73e:	9305      	str	r3, [sp, #20]
	if (((req - m->_ack) & 0x03) != 1U) {
    e740:	d01f      	beq.n	e782 <mayfly_run+0x106>
		memq_dequeue(mft[callee_id][caller_id].tail,
    e742:	9b01      	ldr	r3, [sp, #4]
    e744:	9902      	ldr	r1, [sp, #8]
    e746:	2030      	movs	r0, #48	; 0x30
    e748:	fb00 3004 	mla	r0, r0, r4, r3
    e74c:	4b29      	ldr	r3, [pc, #164]	; (e7f4 <mayfly_run+0x178>)
    e74e:	4418      	add	r0, r3
    e750:	2200      	movs	r2, #0
    e752:	6840      	ldr	r0, [r0, #4]
    e754:	f00d fc6a 	bl	1c02c <memq_dequeue>
		m->_ack = req;
    e758:	9b05      	ldr	r3, [sp, #20]
		ack = m->_ack;
    e75a:	f898 2001 	ldrb.w	r2, [r8, #1]
		m->_ack = req;
    e75e:	f888 3001 	strb.w	r3, [r8, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    e762:	f898 3000 	ldrb.w	r3, [r8]
		m->_link = link;
    e766:	f8c8 6004 	str.w	r6, [r8, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
    e76a:	1a9b      	subs	r3, r3, r2
    e76c:	f003 0303 	and.w	r3, r3, #3
    e770:	2b01      	cmp	r3, #1
    e772:	d106      	bne.n	e782 <mayfly_run+0x106>
			m->_ack = ack;
    e774:	f888 2001 	strb.w	r2, [r8, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    e778:	4641      	mov	r1, r8
    e77a:	9a03      	ldr	r2, [sp, #12]
    e77c:	4630      	mov	r0, r6
    e77e:	f00d fc46 	bl	1c00e <memq_enqueue>
			link = memq_peek(mft[callee_id][caller_id].head,
    e782:	9a01      	ldr	r2, [sp, #4]
    e784:	2330      	movs	r3, #48	; 0x30
    e786:	fb03 2304 	mla	r3, r3, r4, r2
    e78a:	eb0a 0103 	add.w	r1, sl, r3
    e78e:	f85a 0003 	ldr.w	r0, [sl, r3]
    e792:	6849      	ldr	r1, [r1, #4]
    e794:	aa07      	add	r2, sp, #28
    e796:	f00d fc41 	bl	1c01c <memq_peek>
			if (state == 1U) {
    e79a:	f1b9 0f01 	cmp.w	r9, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    e79e:	4606      	mov	r6, r0
			if (state == 1U) {
    e7a0:	d1b0      	bne.n	e704 <mayfly_run+0x88>
				if (caller_id || link) {
    e7a2:	b9bd      	cbnz	r5, e7d4 <mayfly_run+0x158>
    e7a4:	b9b0      	cbnz	r0, e7d4 <mayfly_run+0x158>
		if (mft[callee_id][caller_id].disable_req !=
    e7a6:	2230      	movs	r2, #48	; 0x30
    e7a8:	4912      	ldr	r1, [pc, #72]	; (e7f4 <mayfly_run+0x178>)
    e7aa:	230c      	movs	r3, #12
    e7ac:	4362      	muls	r2, r4
    e7ae:	fb03 2205 	mla	r2, r3, r5, r2
    e7b2:	440a      	add	r2, r1
    e7b4:	7a91      	ldrb	r1, [r2, #10]
    e7b6:	7ad0      	ldrb	r0, [r2, #11]
    e7b8:	4288      	cmp	r0, r1
    e7ba:	d115      	bne.n	e7e8 <mayfly_run+0x16c>
		if (mft[callee_id][caller_id].enable_req !=
    e7bc:	2230      	movs	r2, #48	; 0x30
    e7be:	4362      	muls	r2, r4
    e7c0:	fb03 2305 	mla	r3, r3, r5, r2
    e7c4:	445b      	add	r3, fp
    e7c6:	7a1a      	ldrb	r2, [r3, #8]
    e7c8:	7a59      	ldrb	r1, [r3, #9]
    e7ca:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    e7cc:	bf1c      	itt	ne
    e7ce:	725a      	strbne	r2, [r3, #9]
			enable = 1U;
    e7d0:	2701      	movne	r7, #1
    e7d2:	e76c      	b.n	e6ae <mayfly_run+0x32>
					mfp[callee_id] = 1U;
    e7d4:	4b06      	ldr	r3, [pc, #24]	; (e7f0 <mayfly_run+0x174>)
    e7d6:	2201      	movs	r2, #1
					mayfly_pend(callee_id, callee_id);
    e7d8:	4621      	mov	r1, r4
    e7da:	4620      	mov	r0, r4
					mfp[callee_id] = 1U;
    e7dc:	551a      	strb	r2, [r3, r4]
					mayfly_pend(callee_id, callee_id);
    e7de:	f006 fe4f 	bl	15480 <mayfly_pend>
	}
}
    e7e2:	b009      	add	sp, #36	; 0x24
    e7e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mft[callee_id][caller_id].disable_ack =
    e7e8:	72d1      	strb	r1, [r2, #11]
			disable = 1U;
    e7ea:	2201      	movs	r2, #1
    e7ec:	9200      	str	r2, [sp, #0]
    e7ee:	e7e5      	b.n	e7bc <mayfly_run+0x140>
    e7f0:	20002ff5 	.word	0x20002ff5
    e7f4:	20001cc0 	.word	0x20001cc0

0000e7f8 <ticker_job>:
 * @param param Pointer to ticker instance
 *
 * @internal
 */
void ticker_job(void *param)
{
    e7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t flag_compare_update;

	DEBUG_TICKER_JOB(1);

	/* Defer job, as worker is running */
	if (instance->worker_trigger) {
    e7fc:	7fc3      	ldrb	r3, [r0, #31]
{
    e7fe:	b08d      	sub	sp, #52	; 0x34
    e800:	4604      	mov	r4, r0
	if (instance->worker_trigger) {
    e802:	2b00      	cmp	r3, #0
    e804:	f040 83c7 	bne.w	ef96 <ticker_job+0x79e>
		DEBUG_TICKER_JOB(0);
		return;
	}

	/* Defer job, as job is already running */
	if (instance->job_guard) {
    e808:	7f82      	ldrb	r2, [r0, #30]
    e80a:	b14a      	cbz	r2, e820 <ticker_job+0x28>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_JOB, 1,
    e80c:	6a45      	ldr	r5, [r0, #36]	; 0x24
    e80e:	4603      	mov	r3, r0
    e810:	2201      	movs	r2, #1
    e812:	2104      	movs	r1, #4
	/* Permit worker to run */
	instance->job_guard = 0U;

	/* trigger worker if deferred */
	if (instance->worker_trigger) {
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    e814:	2004      	movs	r0, #4
    e816:	46ac      	mov	ip, r5
				   instance);
	}

	DEBUG_TICKER_JOB(0);
}
    e818:	b00d      	add	sp, #52	; 0x34
    e81a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    e81e:	4760      	bx	ip
	ticks_previous = instance->ticks_current;
    e820:	6943      	ldr	r3, [r0, #20]
    e822:	9306      	str	r3, [sp, #24]
	instance->job_guard = 1U;
    e824:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    e826:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1U;
    e828:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    e82a:	7ac0      	ldrb	r0, [r0, #11]
    e82c:	4298      	cmp	r0, r3
    e82e:	d057      	beq.n	e8e0 <ticker_job+0xe8>
	uint8_t idx = *ticks_elapsed_index + 1;
    e830:	440b      	add	r3, r1
    e832:	b2db      	uxtb	r3, r3
		idx = 0U;
    e834:	2b02      	cmp	r3, #2
    e836:	bf08      	it	eq
    e838:	2300      	moveq	r3, #0
	*ticks_elapsed_index = idx;
    e83a:	72a3      	strb	r3, [r4, #10]
		ticks_elapsed =
    e83c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		flag_elapsed = 1U;
    e840:	9102      	str	r1, [sp, #8]
		ticks_elapsed =
    e842:	68db      	ldr	r3, [r3, #12]
    e844:	9300      	str	r3, [sp, #0]
		instance->ticks_current += ticks_elapsed;
    e846:	9a00      	ldr	r2, [sp, #0]
    e848:	9b06      	ldr	r3, [sp, #24]
    e84a:	4413      	add	r3, r2
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
    e84c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    e850:	6163      	str	r3, [r4, #20]
	ticker_id_old_head = instance->ticker_id_head;
    e852:	7f63      	ldrb	r3, [r4, #29]
    e854:	9304      	str	r3, [sp, #16]
	node = &instance->nodes[0];
    e856:	6823      	ldr	r3, [r4, #0]
    e858:	9307      	str	r3, [sp, #28]
	users = &instance->users[0];
    e85a:	6863      	ldr	r3, [r4, #4]
    e85c:	930a      	str	r3, [sp, #40]	; 0x28
	count_user = instance->count_user;
    e85e:	7a63      	ldrb	r3, [r4, #9]
    e860:	9303      	str	r3, [sp, #12]
	pending = 0U;
    e862:	2300      	movs	r3, #0
    e864:	9305      	str	r3, [sp, #20]
	insert_head = TICKER_NULL;
    e866:	23ff      	movs	r3, #255	; 0xff
    e868:	9301      	str	r3, [sp, #4]
	while (count_user--) {
    e86a:	9b03      	ldr	r3, [sp, #12]
    e86c:	3b01      	subs	r3, #1
    e86e:	b2db      	uxtb	r3, r3
    e870:	2bff      	cmp	r3, #255	; 0xff
    e872:	9303      	str	r3, [sp, #12]
    e874:	d137      	bne.n	e8e6 <ticker_job+0xee>
	if (instance->ticker_id_head != ticker_id_old_head) {
    e876:	7f63      	ldrb	r3, [r4, #29]
		flag_compare_update = 1U;
    e878:	9a04      	ldr	r2, [sp, #16]
    e87a:	1a9b      	subs	r3, r3, r2
    e87c:	bf18      	it	ne
    e87e:	2301      	movne	r3, #1
    e880:	9303      	str	r3, [sp, #12]
	if (flag_elapsed) {
    e882:	9b02      	ldr	r3, [sp, #8]
    e884:	2b00      	cmp	r3, #0
    e886:	f000 828a 	beq.w	ed9e <ticker_job+0x5a6>
	ticks_now = cntr_cnt_get();
    e88a:	f006 fa01 	bl	14c90 <cntr_cnt_get>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    e88e:	9b06      	ldr	r3, [sp, #24]
	node = &instance->nodes[0];
    e890:	f8d4 8000 	ldr.w	r8, [r4]
	while (instance->ticker_id_head != TICKER_NULL) {
    e894:	9f00      	ldr	r7, [sp, #0]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    e896:	eba0 0b03 	sub.w	fp, r0, r3
    e89a:	f02b 4b7f 	bic.w	fp, fp, #4278190080	; 0xff000000
	ticks_expired = 0U;
    e89e:	f04f 0a00 	mov.w	sl, #0
	while (instance->ticker_id_head != TICKER_NULL) {
    e8a2:	7f66      	ldrb	r6, [r4, #29]
    e8a4:	2eff      	cmp	r6, #255	; 0xff
    e8a6:	d00c      	beq.n	e8c2 <ticker_job+0xca>
		ticker = &node[id_expired];
    e8a8:	b235      	sxth	r5, r6
    e8aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    e8ae:	012b      	lsls	r3, r5, #4
    e8b0:	eb08 1505 	add.w	r5, r8, r5, lsl #4
    e8b4:	9308      	str	r3, [sp, #32]
		ticks_to_expire = ticker->ticks_to_expire;
    e8b6:	68ab      	ldr	r3, [r5, #8]
		if (ticks_elapsed < ticks_to_expire) {
    e8b8:	42bb      	cmp	r3, r7
    e8ba:	f240 8133 	bls.w	eb24 <ticker_job+0x32c>
			ticker->ticks_to_expire -= ticks_elapsed;
    e8be:	1bdf      	subs	r7, r3, r7
    e8c0:	60af      	str	r7, [r5, #8]
			flag_compare_update = 1U;
    e8c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    e8c6:	9904      	ldr	r1, [sp, #16]
		ticker_job_list_insert(instance, insert_head);
    e8c8:	4620      	mov	r0, r4
			flag_compare_update = 1U;
    e8ca:	42b1      	cmp	r1, r6
    e8cc:	bf18      	it	ne
    e8ce:	4613      	movne	r3, r2
		ticker_job_list_insert(instance, insert_head);
    e8d0:	9901      	ldr	r1, [sp, #4]
			flag_compare_update = 1U;
    e8d2:	9303      	str	r3, [sp, #12]
		ticker_job_list_insert(instance, insert_head);
    e8d4:	f00d fbf4 	bl	1c0c0 <ticker_job_list_insert>
	nodes = &instance->nodes[0];
    e8d8:	6825      	ldr	r5, [r4, #0]
	uint8_t  rescheduled = 0U;
    e8da:	2300      	movs	r3, #0
		ticker_id_head = instance->ticker_id_head;
    e8dc:	7f66      	ldrb	r6, [r4, #29]
		while (ticker_id_head != TICKER_NULL) {
    e8de:	e1d5      	b.n	ec8c <ticker_job+0x494>
		flag_elapsed = 0U;
    e8e0:	9202      	str	r2, [sp, #8]
		ticks_elapsed = 0U;
    e8e2:	9200      	str	r2, [sp, #0]
    e8e4:	e7b5      	b.n	e852 <ticker_job+0x5a>
		user = &users[count_user];
    e8e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e8e8:	9a03      	ldr	r2, [sp, #12]
    e8ea:	eb03 08c2 	add.w	r8, r3, r2, lsl #3
		user_ops = &user->user_op[0];
    e8ee:	f8d8 3004 	ldr.w	r3, [r8, #4]
    e8f2:	9308      	str	r3, [sp, #32]
		while (user->middle != user->last) {
    e8f4:	f898 2003 	ldrb.w	r2, [r8, #3]
			user_op = &user_ops[user->middle];
    e8f8:	2034      	movs	r0, #52	; 0x34
		while (user->middle != user->last) {
    e8fa:	f898 7002 	ldrb.w	r7, [r8, #2]
    e8fe:	4297      	cmp	r7, r2
    e900:	d0b3      	beq.n	e86a <ticker_job+0x72>
			user_op = &user_ops[user->middle];
    e902:	9b08      	ldr	r3, [sp, #32]
			if (middle == user->count_user_op) {
    e904:	f898 5000 	ldrb.w	r5, [r8]
			user_op = &user_ops[user->middle];
    e908:	fb17 f100 	smulbb	r1, r7, r0
    e90c:	185e      	adds	r6, r3, r1
			middle = user->middle + 1;
    e90e:	1c7b      	adds	r3, r7, #1
    e910:	b2db      	uxtb	r3, r3
				middle = 0U;
    e912:	429d      	cmp	r5, r3
    e914:	bf08      	it	eq
    e916:	2300      	moveq	r3, #0
			user->middle = middle;
    e918:	f888 3002 	strb.w	r3, [r8, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    e91c:	9b08      	ldr	r3, [sp, #32]
    e91e:	5c59      	ldrb	r1, [r3, r1]
    e920:	2904      	cmp	r1, #4
    e922:	d9ea      	bls.n	e8fa <ticker_job+0x102>
			ticker = &node[user_op->id];
    e924:	7870      	ldrb	r0, [r6, #1]
    e926:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    e92a:	012b      	lsls	r3, r5, #4
    e92c:	930b      	str	r3, [sp, #44]	; 0x2c
    e92e:	9b07      	ldr	r3, [sp, #28]
    e930:	eb03 1505 	add.w	r5, r3, r5, lsl #4
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    e934:	2907      	cmp	r1, #7
			state = (ticker->req - ticker->ack) & 0xff;
    e936:	f895 c002 	ldrb.w	ip, [r5, #2]
    e93a:	786a      	ldrb	r2, [r5, #1]
    e93c:	eba2 020c 	sub.w	r2, r2, ip
    e940:	b2d2      	uxtb	r2, r2
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    e942:	d80e      	bhi.n	e962 <ticker_job+0x16a>
    e944:	b16a      	cbz	r2, e962 <ticker_job+0x16a>
			    (state == 0U) ||
    e946:	2905      	cmp	r1, #5
    e948:	d110      	bne.n	e96c <ticker_job+0x174>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
    e94a:	6873      	ldr	r3, [r6, #4]
    e94c:	b973      	cbnz	r3, e96c <ticker_job+0x174>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
    e94e:	68b3      	ldr	r3, [r6, #8]
    e950:	b963      	cbnz	r3, e96c <ticker_job+0x174>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
    e952:	68f3      	ldr	r3, [r6, #12]
    e954:	b953      	cbnz	r3, e96c <ticker_job+0x174>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
    e956:	6933      	ldr	r3, [r6, #16]
    e958:	b943      	cbnz	r3, e96c <ticker_job+0x174>
			     (user_op->params.update.lazy == 0U) &&
    e95a:	6973      	ldr	r3, [r6, #20]
    e95c:	f033 437f 	bics.w	r3, r3, #4278190080	; 0xff000000
    e960:	d104      	bne.n	e96c <ticker_job+0x174>
				ticker_job_op_cb(user_op,
    e962:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    e964:	4630      	mov	r0, r6
    e966:	f00d fba1 	bl	1c0ac <ticker_job_op_cb>
}
    e96a:	e7c3      	b.n	e8f4 <ticker_job+0xfc>
			if (state == 1U) {
    e96c:	2a01      	cmp	r2, #1
    e96e:	f040 80ce 	bne.w	eb0e <ticker_job+0x316>
	previous = instance->ticker_id_head;
    e972:	7f63      	ldrb	r3, [r4, #29]
	node = &instance->nodes[0];
    e974:	f8d4 9000 	ldr.w	r9, [r4]
	previous = instance->ticker_id_head;
    e978:	461a      	mov	r2, r3
	total = 0U;
    e97a:	2700      	movs	r7, #0
	while (current != TICKER_NULL) {
    e97c:	2bff      	cmp	r3, #255	; 0xff
    e97e:	d130      	bne.n	e9e2 <ticker_job+0x1ea>
		return 0;
    e980:	2700      	movs	r7, #0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    e982:	2905      	cmp	r1, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    e984:	60af      	str	r7, [r5, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    e986:	f040 809f 	bne.w	eac8 <ticker_job+0x2d0>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    e98a:	f8d4 9014 	ldr.w	r9, [r4, #20]
	ticks_now = cntr_cnt_get();
    e98e:	f006 f97f 	bl	14c90 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    e992:	9900      	ldr	r1, [sp, #0]
	ticks_now = cntr_cnt_get();
    e994:	9009      	str	r0, [sp, #36]	; 0x24
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    e996:	eba0 0309 	sub.w	r3, r0, r9
    e99a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    e99e:	440b      	add	r3, r1
	if (ticks_to_expire > ticks_elapsed) {
    e9a0:	429f      	cmp	r7, r3
		ticker->ticks_to_expire_minus += ticks_elapsed -
    e9a2:	bf98      	it	ls
    e9a4:	6969      	ldrls	r1, [r5, #20]
	if ((ticker->ticks_periodic != 0U) &&
    e9a6:	6868      	ldr	r0, [r5, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    e9a8:	bf9d      	ittte	ls
    e9aa:	1bcf      	subls	r7, r1, r7
    e9ac:	19db      	addls	r3, r3, r7
    e9ae:	616b      	strls	r3, [r5, #20]
		ticks_to_expire -= ticks_elapsed;
    e9b0:	1afb      	subhi	r3, r7, r3
		ticks_to_expire = 0U;
    e9b2:	bf98      	it	ls
    e9b4:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0U) &&
    e9b6:	2800      	cmp	r0, #0
    e9b8:	d057      	beq.n	ea6a <ticker_job+0x272>
	    (user_op->params.update.lazy != 0U)) {
    e9ba:	8ab1      	ldrh	r1, [r6, #20]
	if ((ticker->ticks_periodic != 0U) &&
    e9bc:	2900      	cmp	r1, #0
    e9be:	d054      	beq.n	ea6a <ticker_job+0x272>
		user_op->params.update.lazy--;
    e9c0:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
    e9c4:	fa1f fc8c 	uxth.w	ip, ip
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
    e9c8:	f8df b2d8 	ldr.w	fp, [pc, #728]	; eca4 <ticker_job+0x4ac>
		user_op->params.update.lazy--;
    e9cc:	f8a6 c014 	strh.w	ip, [r6, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    e9d0:	4298      	cmp	r0, r3
    e9d2:	f8b5 e01e 	ldrh.w	lr, [r5, #30]
    e9d6:	d201      	bcs.n	e9dc <ticker_job+0x1e4>
    e9d8:	45f4      	cmp	ip, lr
    e9da:	d313      	bcc.n	ea04 <ticker_job+0x20c>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    e9dc:	f8df a2c8 	ldr.w	sl, [pc, #712]	; eca8 <ticker_job+0x4b0>
    e9e0:	e03d      	b.n	ea5e <ticker_job+0x266>
		ticker_current = &node[current];
    e9e2:	eb03 0e43 	add.w	lr, r3, r3, lsl #1
    e9e6:	ea4f 1b0e 	mov.w	fp, lr, lsl #4
    e9ea:	eb09 1e0e 	add.w	lr, r9, lr, lsl #4
		if (current == id) {
    e9ee:	4298      	cmp	r0, r3
    e9f0:	f8de a008 	ldr.w	sl, [lr, #8]
    e9f4:	f819 b00b 	ldrb.w	fp, [r9, fp]
    e9f8:	4457      	add	r7, sl
    e9fa:	f000 82a7 	beq.w	ef4c <ticker_job+0x754>
    e9fe:	461a      	mov	r2, r3
    ea00:	465b      	mov	r3, fp
    ea02:	e7bb      	b.n	e97c <ticker_job+0x184>
	if ((ticker->remainder_current >= BIT(31)) ||
    ea04:	6a69      	ldr	r1, [r5, #36]	; 0x24
    ea06:	4fa5      	ldr	r7, [pc, #660]	; (ec9c <ticker_job+0x4a4>)
    ea08:	4aa5      	ldr	r2, [pc, #660]	; (eca0 <ticker_job+0x4a8>)
    ea0a:	19cf      	adds	r7, r1, r7
    ea0c:	4297      	cmp	r7, r2
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
    ea0e:	bf84      	itt	hi
    ea10:	4459      	addhi	r1, fp
    ea12:	6269      	strhi	r1, [r5, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    ea14:	e9d5 1708 	ldrd	r1, r7, [r5, #32]
		decrement++;
    ea18:	bf8c      	ite	hi
    ea1a:	f04f 0a01 	movhi.w	sl, #1
	uint8_t decrement = 0U;
    ea1e:	f04f 0a00 	movls.w	sl, #0
	ticker->remainder_current -= ticker->remainder_periodic;
    ea22:	1a7f      	subs	r7, r7, r1
			ticks_to_expire -= ticker->ticks_periodic +
    ea24:	4482      	add	sl, r0
			ticker->lazy_current--;
    ea26:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
    ea2a:	626f      	str	r7, [r5, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    ea2c:	eba3 030a 	sub.w	r3, r3, sl
			ticker->lazy_current--;
    ea30:	f8a5 e01e 	strh.w	lr, [r5, #30]
    ea34:	e7cc      	b.n	e9d0 <ticker_job+0x1d8>
	ticker->remainder_current += ticker->remainder_periodic;
    ea36:	e9d5 1708 	ldrd	r1, r7, [r5, #32]
    ea3a:	440f      	add	r7, r1
	if ((ticker->remainder_current < BIT(31)) &&
    ea3c:	4997      	ldr	r1, [pc, #604]	; (ec9c <ticker_job+0x4a4>)
    ea3e:	4a98      	ldr	r2, [pc, #608]	; (eca0 <ticker_job+0x4a8>)
    ea40:	1879      	adds	r1, r7, r1
    ea42:	4291      	cmp	r1, r2
	return 0;
    ea44:	bf8e      	itee	hi
    ea46:	2100      	movhi	r1, #0
		return 1;
    ea48:	2101      	movls	r1, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    ea4a:	4457      	addls	r7, sl
			ticks_to_expire += ticker->ticks_periodic +
    ea4c:	4401      	add	r1, r0
			ticker->lazy_current++;
    ea4e:	f10e 0e01 	add.w	lr, lr, #1
	ticker->remainder_current += ticker->remainder_periodic;
    ea52:	bf8c      	ite	hi
    ea54:	626f      	strhi	r7, [r5, #36]	; 0x24
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    ea56:	626f      	strls	r7, [r5, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
    ea58:	440b      	add	r3, r1
			ticker->lazy_current++;
    ea5a:	f8a5 e01e 	strh.w	lr, [r5, #30]
		while (ticker->lazy_current < user_op->params.update.lazy) {
    ea5e:	f8b5 e01e 	ldrh.w	lr, [r5, #30]
    ea62:	45f4      	cmp	ip, lr
    ea64:	d8e7      	bhi.n	ea36 <ticker_job+0x23e>
		ticker->lazy_periodic = user_op->params.update.lazy;
    ea66:	f8a5 c01c 	strh.w	ip, [r5, #28]
				  user_op->params.update.ticks_drift_plus;
    ea6a:	6871      	ldr	r1, [r6, #4]
				user_op->params.update.ticks_drift_minus;
    ea6c:	68b0      	ldr	r0, [r6, #8]
	struct ticker_ext *ext_data = ticker->ext_data;
    ea6e:	6aaf      	ldr	r7, [r5, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
    ea70:	440b      	add	r3, r1
    ea72:	60ab      	str	r3, [r5, #8]
	ticker->ticks_to_expire_minus +=
    ea74:	696b      	ldr	r3, [r5, #20]
    ea76:	4403      	add	r3, r0
    ea78:	616b      	str	r3, [r5, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
    ea7a:	b11f      	cbz	r7, ea84 <ticker_job+0x28c>
    ea7c:	683b      	ldr	r3, [r7, #0]
    ea7e:	b10b      	cbz	r3, ea84 <ticker_job+0x28c>
			user_op->params.update.ticks_drift_plus -
    ea80:	1a09      	subs	r1, r1, r0
		ext_data->ticks_drift =
    ea82:	6079      	str	r1, [r7, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    ea84:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ea86:	4649      	mov	r1, r9
    ea88:	4628      	mov	r0, r5
    ea8a:	f00d faf1 	bl	1c070 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    ea8e:	68f2      	ldr	r2, [r6, #12]
    ea90:	69ab      	ldr	r3, [r5, #24]
    ea92:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    ea94:	6932      	ldr	r2, [r6, #16]
    ea96:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    ea98:	bf8c      	ite	hi
    ea9a:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
    ea9c:	2300      	movls	r3, #0
    ea9e:	61ab      	str	r3, [r5, #24]
	if (user_op->params.update.force != 0U) {
    eaa0:	7db3      	ldrb	r3, [r6, #22]
    eaa2:	b103      	cbz	r3, eaa6 <ticker_job+0x2ae>
		ticker->force = user_op->params.update.force;
    eaa4:	70eb      	strb	r3, [r5, #3]
	if (user_op->params.update.must_expire) {
    eaa6:	7df3      	ldrb	r3, [r6, #23]
    eaa8:	b113      	cbz	r3, eab0 <ticker_job+0x2b8>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
    eaaa:	3b01      	subs	r3, #1
    eaac:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
	ticker->next = *insert_head;
    eab0:	9b07      	ldr	r3, [sp, #28]
    eab2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    eab4:	4619      	mov	r1, r3
    eab6:	9b01      	ldr	r3, [sp, #4]
    eab8:	548b      	strb	r3, [r1, r2]
	*insert_head = user_op->id;
    eaba:	7873      	ldrb	r3, [r6, #1]
    eabc:	9301      	str	r3, [sp, #4]
		ticker->req++;
    eabe:	786b      	ldrb	r3, [r5, #1]
    eac0:	3301      	adds	r3, #1
    eac2:	706b      	strb	r3, [r5, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    eac4:	2100      	movs	r1, #0
    eac6:	e74d      	b.n	e964 <ticker_job+0x16c>
		ticker->req = ticker->ack;
    eac8:	f885 c001 	strb.w	ip, [r5, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    eacc:	7f23      	ldrb	r3, [r4, #28]
    eace:	4283      	cmp	r3, r0
    ead0:	d1f8      	bne.n	eac4 <ticker_job+0x2cc>
			instance->ticker_id_slot_previous = TICKER_NULL;
    ead2:	23ff      	movs	r3, #255	; 0xff
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
    ead4:	2907      	cmp	r1, #7
			instance->ticker_id_slot_previous = TICKER_NULL;
    ead6:	7723      	strb	r3, [r4, #28]
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
    ead8:	d10d      	bne.n	eaf6 <ticker_job+0x2fe>
				ticks_at_stop =
    eada:	6870      	ldr	r0, [r6, #4]
			ticks_current = instance->ticks_current;
    eadc:	6963      	ldr	r3, [r4, #20]
			if (!((ticks_at_stop - ticks_current) &
    eade:	1ac2      	subs	r2, r0, r3
    eae0:	0211      	lsls	r1, r2, #8
    eae2:	d40b      	bmi.n	eafc <ticker_job+0x304>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    eae4:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
    eae8:	9a00      	ldr	r2, [sp, #0]
    eaea:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
    eaec:	69a2      	ldr	r2, [r4, #24]
    eaee:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
    eaf0:	bf88      	it	hi
    eaf2:	61a3      	strhi	r3, [r4, #24]
    eaf4:	e7e6      	b.n	eac4 <ticker_job+0x2cc>
				ticks_at_stop = cntr_cnt_get();
    eaf6:	f006 f8cb 	bl	14c90 <cntr_cnt_get>
    eafa:	e7ef      	b.n	eadc <ticker_job+0x2e4>
				if (ticks_elapsed > ticks_used) {
    eafc:	9a00      	ldr	r2, [sp, #0]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    eafe:	1a1b      	subs	r3, r3, r0
    eb00:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
    eb04:	429a      	cmp	r2, r3
					ticks_used = ticks_elapsed -
    eb06:	bf8c      	ite	hi
    eb08:	1ad3      	subhi	r3, r2, r3
					ticks_used = 0;
    eb0a:	2300      	movls	r3, #0
    eb0c:	e7ee      	b.n	eaec <ticker_job+0x2f4>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    eb0e:	2104      	movs	r1, #4
    eb10:	4623      	mov	r3, r4
    eb12:	6a65      	ldr	r5, [r4, #36]	; 0x24
    eb14:	2201      	movs	r2, #1
    eb16:	4608      	mov	r0, r1
    eb18:	47a8      	blx	r5
				pending = 1U;
    eb1a:	2301      	movs	r3, #1
				user->middle = prev;
    eb1c:	f888 7002 	strb.w	r7, [r8, #2]
				pending = 1U;
    eb20:	9305      	str	r3, [sp, #20]
				break;
    eb22:	e6a2      	b.n	e86a <ticker_job+0x72>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    eb24:	69a2      	ldr	r2, [r4, #24]
		skip_collision = (ticker->lazy_current != 0U);
    eb26:	f8b5 c01e 	ldrh.w	ip, [r5, #30]
		if (instance->ticks_slot_previous > ticks_to_expire) {
    eb2a:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
    eb2c:	eba7 0703 	sub.w	r7, r7, r3
		ticks_expired += ticks_to_expire;
    eb30:	449a      	add	sl, r3
		ticks_latency -= ticks_to_expire;
    eb32:	ebab 0b03 	sub.w	fp, fp, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    eb36:	bf25      	ittet	cs
    eb38:	23ff      	movcs	r3, #255	; 0xff
    eb3a:	7723      	strbcs	r3, [r4, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
    eb3c:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
    eb3e:	2300      	movcs	r3, #0
    eb40:	61a3      	str	r3, [r4, #24]
		state = (ticker->req - ticker->ack) & 0xff;
    eb42:	78a9      	ldrb	r1, [r5, #2]
    eb44:	786b      	ldrb	r3, [r5, #1]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    eb46:	69a8      	ldr	r0, [r5, #24]
    eb48:	6aaa      	ldr	r2, [r5, #40]	; 0x28
		state = (ticker->req - ticker->ack) & 0xff;
    eb4a:	1a5b      	subs	r3, r3, r1
    eb4c:	b2db      	uxtb	r3, r3
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    eb4e:	b160      	cbz	r0, eb6a <ticker_job+0x372>
    eb50:	2b02      	cmp	r3, #2
    eb52:	d10a      	bne.n	eb6a <ticker_job+0x372>
    eb54:	f1bc 0f00 	cmp.w	ip, #0
    eb58:	d107      	bne.n	eb6a <ticker_job+0x372>
    eb5a:	b122      	cbz	r2, eb66 <ticker_job+0x36e>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
    eb5c:	f892 e008 	ldrb.w	lr, [r2, #8]
    eb60:	f1be 0f01 	cmp.w	lr, #1
    eb64:	d001      	beq.n	eb6a <ticker_job+0x372>
			instance->ticker_id_slot_previous = id_expired;
    eb66:	7726      	strb	r6, [r4, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    eb68:	61a0      	str	r0, [r4, #24]
		ticker->ticks_to_expire = 0U;
    eb6a:	2000      	movs	r0, #0
    eb6c:	60a8      	str	r0, [r5, #8]
		instance->ticker_id_head = ticker->next;
    eb6e:	9808      	ldr	r0, [sp, #32]
    eb70:	f818 0000 	ldrb.w	r0, [r8, r0]
    eb74:	7760      	strb	r0, [r4, #29]
		if ((ticker->ticks_periodic != 0U) ||
    eb76:	f8d5 e004 	ldr.w	lr, [r5, #4]
    eb7a:	f1be 0f00 	cmp.w	lr, #0
    eb7e:	d11a      	bne.n	ebb6 <ticker_job+0x3be>
    eb80:	2a00      	cmp	r2, #0
    eb82:	d066      	beq.n	ec52 <ticker_job+0x45a>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
    eb84:	7a10      	ldrb	r0, [r2, #8]
    eb86:	2801      	cmp	r0, #1
    eb88:	d163      	bne.n	ec52 <ticker_job+0x45a>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
    eb8a:	7a13      	ldrb	r3, [r2, #8]
    eb8c:	2b01      	cmp	r3, #1
    eb8e:	d114      	bne.n	ebba <ticker_job+0x3c2>
				ticker->ticks_to_expire = ticks_elapsed;
    eb90:	60af      	str	r7, [r5, #8]
				ticker->req = ticker->ack;
    eb92:	7069      	strb	r1, [r5, #1]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    eb94:	9b06      	ldr	r3, [sp, #24]
    eb96:	6961      	ldr	r1, [r4, #20]
    eb98:	eb03 020a 	add.w	r2, r3, sl
    eb9c:	4628      	mov	r0, r5
    eb9e:	f00d fa67 	bl	1c070 <ticks_to_expire_prep>
			ticker->next = *insert_head;
    eba2:	9b08      	ldr	r3, [sp, #32]
    eba4:	461a      	mov	r2, r3
    eba6:	9b01      	ldr	r3, [sp, #4]
    eba8:	f808 3002 	strb.w	r3, [r8, r2]
			ticker->req++;
    ebac:	786b      	ldrb	r3, [r5, #1]
    ebae:	3301      	adds	r3, #1
    ebb0:	706b      	strb	r3, [r5, #1]
			ticker->req = ticker->ack;
    ebb2:	9601      	str	r6, [sp, #4]
    ebb4:	e675      	b.n	e8a2 <ticker_job+0xaa>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
    ebb6:	2a00      	cmp	r2, #0
    ebb8:	d1e7      	bne.n	eb8a <ticker_job+0x392>
				if (!ticker->lazy_current) {
    ebba:	f1bc 0f00 	cmp.w	ip, #0
    ebbe:	d127      	bne.n	ec10 <ticker_job+0x418>
					lazy_periodic = ticker->lazy_periodic;
    ebc0:	8bab      	ldrh	r3, [r5, #28]
					lazy_periodic = 0U;
    ebc2:	9307      	str	r3, [sp, #28]
				while (count--) {
    ebc4:	f8dd 901c 	ldr.w	r9, [sp, #28]
				ticks_to_expire = 0U;
    ebc8:	2000      	movs	r0, #0
	ticker->remainder_current += ticker->remainder_periodic;
    ebca:	e9d5 1208 	ldrd	r1, r2, [r5, #32]
    ebce:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    ebd0:	4932      	ldr	r1, [pc, #200]	; (ec9c <ticker_job+0x4a4>)
    ebd2:	4b33      	ldr	r3, [pc, #204]	; (eca0 <ticker_job+0x4a8>)
    ebd4:	1851      	adds	r1, r2, r1
    ebd6:	4299      	cmp	r1, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    ebd8:	bf9f      	itttt	ls
    ebda:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
    ebde:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
    ebe2:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
    ebe6:	626a      	strls	r2, [r5, #36]	; 0x24
		return 1;
    ebe8:	bf92      	itee	ls
    ebea:	9a02      	ldrls	r2, [sp, #8]
	ticker->remainder_current += ticker->remainder_periodic;
    ebec:	626a      	strhi	r2, [r5, #36]	; 0x24
	return 0;
    ebee:	2200      	movhi	r2, #0
					ticks_to_expire +=
    ebf0:	4472      	add	r2, lr
				while (count--) {
    ebf2:	f1b9 0901 	subs.w	r9, r9, #1
					ticks_to_expire +=
    ebf6:	4410      	add	r0, r2
				while (count--) {
    ebf8:	d2e7      	bcs.n	ebca <ticker_job+0x3d2>
				} else if (!ticker->must_expire) {
    ebfa:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    ebfe:	b332      	cbz	r2, ec4e <ticker_job+0x456>
				lazy = 0U;
    ec00:	2200      	movs	r2, #0
				ticker->lazy_current += (lazy_periodic + lazy);
    ec02:	9b07      	ldr	r3, [sp, #28]
				ticker->ticks_to_expire = ticks_to_expire;
    ec04:	60a8      	str	r0, [r5, #8]
				ticker->lazy_current += (lazy_periodic + lazy);
    ec06:	4413      	add	r3, r2
    ec08:	449c      	add	ip, r3
    ec0a:	f8a5 c01e 	strh.w	ip, [r5, #30]
    ec0e:	e7c1      	b.n	eb94 <ticker_job+0x39c>
					ticker->req = ticker->ack;
    ec10:	7069      	strb	r1, [r5, #1]
					lazy_periodic = 0U;
    ec12:	2300      	movs	r3, #0
    ec14:	e7d5      	b.n	ebc2 <ticker_job+0x3ca>
	ticker->remainder_current += ticker->remainder_periodic;
    ec16:	e9d5 1208 	ldrd	r1, r2, [r5, #32]
    ec1a:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    ec1c:	491f      	ldr	r1, [pc, #124]	; (ec9c <ticker_job+0x4a4>)
    ec1e:	4b20      	ldr	r3, [pc, #128]	; (eca0 <ticker_job+0x4a8>)
    ec20:	1851      	adds	r1, r2, r1
    ec22:	4299      	cmp	r1, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    ec24:	bf9f      	itttt	ls
    ec26:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
    ec2a:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
    ec2e:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
    ec32:	626a      	strls	r2, [r5, #36]	; 0x24
		return 1;
    ec34:	bf92      	itee	ls
    ec36:	9a02      	ldrls	r2, [sp, #8]
	ticker->remainder_current += ticker->remainder_periodic;
    ec38:	626a      	strhi	r2, [r5, #36]	; 0x24
	return 0;
    ec3a:	2200      	movhi	r2, #0
						ticks_to_expire +=
    ec3c:	4472      	add	r2, lr
    ec3e:	4410      	add	r0, r2
						lazy++;
    ec40:	f109 0901 	add.w	r9, r9, #1
					while (ticks_to_expire <
    ec44:	4583      	cmp	fp, r0
    ec46:	fa1f f289 	uxth.w	r2, r9
    ec4a:	d8e4      	bhi.n	ec16 <ticker_job+0x41e>
    ec4c:	e7d9      	b.n	ec02 <ticker_job+0x40a>
    ec4e:	4691      	mov	r9, r2
    ec50:	e7f8      	b.n	ec44 <ticker_job+0x44c>
			if (state && ((state == 1U) || skip_collision) &&
    ec52:	b14b      	cbz	r3, ec68 <ticker_job+0x470>
    ec54:	2b01      	cmp	r3, #1
    ec56:	d002      	beq.n	ec5e <ticker_job+0x466>
    ec58:	f1bc 0f00 	cmp.w	ip, #0
    ec5c:	d004      	beq.n	ec68 <ticker_job+0x470>
			    ticker->fp_op_func) {
    ec5e:	6a2b      	ldr	r3, [r5, #32]
			if (state && ((state == 1U) || skip_collision) &&
    ec60:	b113      	cbz	r3, ec68 <ticker_job+0x470>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
    ec62:	6a69      	ldr	r1, [r5, #36]	; 0x24
    ec64:	2001      	movs	r0, #1
    ec66:	4798      	blx	r3
			ticker->req = ticker->ack;
    ec68:	78ab      	ldrb	r3, [r5, #2]
    ec6a:	9e01      	ldr	r6, [sp, #4]
    ec6c:	706b      	strb	r3, [r5, #1]
    ec6e:	e7a0      	b.n	ebb2 <ticker_job+0x3ba>
			ticker = &nodes[ticker_id_head];
    ec70:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    ec74:	010a      	lsls	r2, r1, #4
    ec76:	eb05 1101 	add.w	r1, r5, r1, lsl #4
			ext_data = ticker->ext_data;
    ec7a:	f815 e002 	ldrb.w	lr, [r5, r2]
    ec7e:	6a8f      	ldr	r7, [r1, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
    ec80:	b11f      	cbz	r7, ec8a <ticker_job+0x492>
    ec82:	7a3a      	ldrb	r2, [r7, #8]
    ec84:	2a01      	cmp	r2, #1
    ec86:	f000 8180 	beq.w	ef8a <ticker_job+0x792>
			ticker_id_head = ticker->next;
    ec8a:	4676      	mov	r6, lr
		while (ticker_id_head != TICKER_NULL) {
    ec8c:	2eff      	cmp	r6, #255	; 0xff
    ec8e:	d1ef      	bne.n	ec70 <ticker_job+0x478>
			flag_compare_update = 1U;
    ec90:	2b00      	cmp	r3, #0
    ec92:	9a03      	ldr	r2, [sp, #12]
    ec94:	bf18      	it	ne
    ec96:	461a      	movne	r2, r3
    ec98:	9203      	str	r2, [sp, #12]
    ec9a:	e084      	b.n	eda6 <ticker_job+0x5ae>
    ec9c:	ff172b5a 	.word	0xff172b5a
    eca0:	7f172b59 	.word	0x7f172b59
    eca4:	01d1a94a 	.word	0x01d1a94a
    eca8:	fe2e56b6 	.word	0xfe2e56b6
			instance->ticks_slot_previous > ticks_elapsed) {
    ecac:	69a0      	ldr	r0, [r4, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    ecae:	9b00      	ldr	r3, [sp, #0]
    ecb0:	4283      	cmp	r3, r0
    ecb2:	f080 816e 	bcs.w	ef92 <ticker_job+0x79a>
			window_start_ticks = instance->ticks_slot_previous -
    ecb6:	1ac3      	subs	r3, r0, r3
		window_start_ticks = 0U;
    ecb8:	9301      	str	r3, [sp, #4]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    ecba:	e9d7 2300 	ldrd	r2, r3, [r7]
    ecbe:	4293      	cmp	r3, r2
    ecc0:	d255      	bcs.n	ed6e <ticker_job+0x576>
			ticks_slot_window = ext_data->ticks_slot_window -
    ecc2:	f04f 0c00 	mov.w	ip, #0
    ecc6:	eba2 0a03 	sub.w	sl, r2, r3
		ticker_id_iter = nodes[ticker_id_head].next;
    ecca:	4672      	mov	r2, lr
			ticks_slot_window = ext_data->ticks_slot_window -
    eccc:	4663      	mov	r3, ip
		while (ticker_id_iter != TICKER_NULL &&
    ecce:	2aff      	cmp	r2, #255	; 0xff
    ecd0:	d006      	beq.n	ece0 <ticker_job+0x4e8>
		       ticks_start_offset + ticker->ticks_slot <=
    ecd2:	f8d1 8018 	ldr.w	r8, [r1, #24]
    ecd6:	eb0c 0008 	add.w	r0, ip, r8
		while (ticker_id_iter != TICKER_NULL &&
    ecda:	4582      	cmp	sl, r0
		       ticks_start_offset + ticker->ticks_slot <=
    ecdc:	9002      	str	r0, [sp, #8]
		while (ticker_id_iter != TICKER_NULL &&
    ecde:	d217      	bcs.n	ed10 <ticker_job+0x518>
		ticker->ticks_to_expire = ticks_to_expire;
    ece0:	608b      	str	r3, [r1, #8]
		ticker_id_iter = nodes[ticker_id_head].next;
    ece2:	4672      	mov	r2, lr
		ticker_id_prev = TICKER_NULL;
    ece4:	23ff      	movs	r3, #255	; 0xff
		while (ticker_id_iter != TICKER_NULL) {
    ece6:	2aff      	cmp	r2, #255	; 0xff
    ece8:	d046      	beq.n	ed78 <ticker_job+0x580>
			node = &nodes[ticker_id_iter];
    ecea:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    ecee:	ea4f 1900 	mov.w	r9, r0, lsl #4
    ecf2:	eb05 1000 	add.w	r0, r5, r0, lsl #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
    ecf6:	f8d1 8008 	ldr.w	r8, [r1, #8]
    ecfa:	f8d0 c008 	ldr.w	ip, [r0, #8]
    ecfe:	45e0      	cmp	r8, ip
    ed00:	d937      	bls.n	ed72 <ticker_job+0x57a>
				ticker->ticks_to_expire -=
    ed02:	eba8 030c 	sub.w	r3, r8, ip
    ed06:	608b      	str	r3, [r1, #8]
			ticker_id_iter = node->next;
    ed08:	4613      	mov	r3, r2
    ed0a:	f815 2009 	ldrb.w	r2, [r5, r9]
    ed0e:	e7ea      	b.n	ece6 <ticker_job+0x4ee>
			node = &nodes[ticker_id_iter];
    ed10:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    ed14:	ea4f 1b02 	mov.w	fp, r2, lsl #4
    ed18:	eb05 1202 	add.w	r2, r5, r2, lsl #4
			if (node->ext_data &&
    ed1c:	f8d2 9028 	ldr.w	r9, [r2, #40]	; 0x28
    ed20:	f1b9 0f00 	cmp.w	r9, #0
    ed24:	d007      	beq.n	ed36 <ticker_job+0x53e>
    ed26:	f899 9008 	ldrb.w	r9, [r9, #8]
    ed2a:	f1b9 0f01 	cmp.w	r9, #1
    ed2e:	d102      	bne.n	ed36 <ticker_job+0x53e>
			ticker_id_iter = node->next;
    ed30:	f815 200b 	ldrb.w	r2, [r5, fp]
    ed34:	e7cb      	b.n	ecce <ticker_job+0x4d6>
			if (node->ticks_to_expire >
    ed36:	f8d2 9008 	ldr.w	r9, [r2, #8]
    ed3a:	f1b9 0f04 	cmp.w	r9, #4
    ed3e:	d90e      	bls.n	ed5e <ticker_job+0x566>
					MIN(ticks_slot_window,
    ed40:	f1ac 0304 	sub.w	r3, ip, #4
    ed44:	444b      	add	r3, r9
				window_end_ticks =
    ed46:	4553      	cmp	r3, sl
			if (window_end_ticks > ticks_start_offset +
    ed48:	9802      	ldr	r0, [sp, #8]
				window_end_ticks =
    ed4a:	bf28      	it	cs
    ed4c:	4653      	movcs	r3, sl
			if (window_end_ticks > ticks_start_offset +
    ed4e:	4283      	cmp	r3, r0
    ed50:	d905      	bls.n	ed5e <ticker_job+0x566>
			if (ticks_to_expire != 0U &&
    ed52:	ebb3 0308 	subs.w	r3, r3, r8
    ed56:	d002      	beq.n	ed5e <ticker_job+0x566>
    ed58:	9801      	ldr	r0, [sp, #4]
    ed5a:	4283      	cmp	r3, r0
    ed5c:	d2c0      	bcs.n	ece0 <ticker_job+0x4e8>
			window_start_ticks  = node->ticks_to_expire +
    ed5e:	6990      	ldr	r0, [r2, #24]
    ed60:	eb00 0309 	add.w	r3, r0, r9
    ed64:	9301      	str	r3, [sp, #4]
			ticks_start_offset += node->ticks_to_expire;
    ed66:	44cc      	add	ip, r9
			ticks_to_expire     = ticks_slot_window -
    ed68:	ebaa 0308 	sub.w	r3, sl, r8
    ed6c:	e7e0      	b.n	ed30 <ticker_job+0x538>
    ed6e:	2300      	movs	r3, #0
    ed70:	e7b6      	b.n	ece0 <ticker_job+0x4e8>
				node->ticks_to_expire -=
    ed72:	ebac 0208 	sub.w	r2, ip, r8
    ed76:	6082      	str	r2, [r0, #8]
		if (ticker_id_prev != TICKER_NULL) {
    ed78:	2bff      	cmp	r3, #255	; 0xff
    ed7a:	d008      	beq.n	ed8e <ticker_job+0x596>
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    ed7c:	b21b      	sxth	r3, r3
    ed7e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    ed82:	011b      	lsls	r3, r3, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
    ed84:	f884 e01d 	strb.w	lr, [r4, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    ed88:	5cea      	ldrb	r2, [r5, r3]
    ed8a:	700a      	strb	r2, [r1, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
    ed8c:	54ee      	strb	r6, [r5, r3]
		ticker->lazy_current--;
    ed8e:	8bcb      	ldrh	r3, [r1, #30]
    ed90:	3b01      	subs	r3, #1
    ed92:	83cb      	strh	r3, [r1, #30]
		ext_data->reschedule_state =
    ed94:	f04f 0302 	mov.w	r3, #2
    ed98:	723b      	strb	r3, [r7, #8]
		rescheduled  = 1U;
    ed9a:	2301      	movs	r3, #1
    ed9c:	e59e      	b.n	e8dc <ticker_job+0xe4>
		ticker_job_list_insert(instance, insert_head);
    ed9e:	9901      	ldr	r1, [sp, #4]
    eda0:	4620      	mov	r0, r4
    eda2:	f00d f98d 	bl	1c0c0 <ticker_job_list_insert>
	if (instance->ticker_id_head != ticker_id_old_head) {
    eda6:	7f63      	ldrb	r3, [r4, #29]
    eda8:	9a04      	ldr	r2, [sp, #16]
    edaa:	4293      	cmp	r3, r2
	if (!pending) {
    edac:	9b05      	ldr	r3, [sp, #20]
	if (instance->ticker_id_head != ticker_id_old_head) {
    edae:	f040 80e6 	bne.w	ef7e <ticker_job+0x786>
	if (!pending) {
    edb2:	b943      	cbnz	r3, edc6 <ticker_job+0x5ce>
	users = &instance->users[0];
    edb4:	6863      	ldr	r3, [r4, #4]
	count_user = instance->count_user;
    edb6:	7a65      	ldrb	r5, [r4, #9]
	users = &instance->users[0];
    edb8:	9300      	str	r3, [sp, #0]
		uop->status = TICKER_STATUS_SUCCESS;
    edba:	f04f 0a00 	mov.w	sl, #0
	while (count_user--) {
    edbe:	3d01      	subs	r5, #1
    edc0:	b2ed      	uxtb	r5, r5
    edc2:	2dff      	cmp	r5, #255	; 0xff
    edc4:	d116      	bne.n	edf4 <ticker_job+0x5fc>
	if (flag_compare_update) {
    edc6:	9b03      	ldr	r3, [sp, #12]
    edc8:	b14b      	cbz	r3, edde <ticker_job+0x5e6>
	if (instance->ticker_id_head == TICKER_NULL) {
    edca:	7f63      	ldrb	r3, [r4, #29]
    edcc:	2bff      	cmp	r3, #255	; 0xff
    edce:	d174      	bne.n	eeba <ticker_job+0x6c2>
		if (cntr_stop() == 0) {
    edd0:	f005 ff38 	bl	14c44 <cntr_stop>
    edd4:	b918      	cbnz	r0, edde <ticker_job+0x5e6>
			instance->ticks_slot_previous = 0U;
    edd6:	61a0      	str	r0, [r4, #24]
			instance->ticks_current = cntr_cnt_get();
    edd8:	f005 ff5a 	bl	14c90 <cntr_cnt_get>
    eddc:	6160      	str	r0, [r4, #20]
	instance->job_guard = 0U;
    edde:	2300      	movs	r3, #0
    ede0:	77a3      	strb	r3, [r4, #30]
	if (instance->worker_trigger) {
    ede2:	7fe3      	ldrb	r3, [r4, #31]
    ede4:	2b00      	cmp	r3, #0
    ede6:	f000 80d6 	beq.w	ef96 <ticker_job+0x79e>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    edea:	6a65      	ldr	r5, [r4, #36]	; 0x24
    edec:	4623      	mov	r3, r4
    edee:	2201      	movs	r2, #1
    edf0:	2103      	movs	r1, #3
    edf2:	e50f      	b.n	e814 <ticker_job+0x1c>
		user = &users[count_user];
    edf4:	9b00      	ldr	r3, [sp, #0]
    edf6:	eb03 06c5 	add.w	r6, r3, r5, lsl #3
		user_op = &user->user_op[0];
    edfa:	f8d6 8004 	ldr.w	r8, [r6, #4]
		while (user->first != user->last) {
    edfe:	7873      	ldrb	r3, [r6, #1]
    ee00:	78f2      	ldrb	r2, [r6, #3]
    ee02:	429a      	cmp	r2, r3
    ee04:	d0db      	beq.n	edbe <ticker_job+0x5c6>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    ee06:	2234      	movs	r2, #52	; 0x34
    ee08:	fb13 f202 	smulbb	r2, r3, r2
    ee0c:	eb08 0302 	add.w	r3, r8, r2
	switch (uop->op) {
    ee10:	f818 2002 	ldrb.w	r2, [r8, r2]
    ee14:	2a02      	cmp	r2, #2
    ee16:	d013      	beq.n	ee40 <ticker_job+0x648>
    ee18:	2a03      	cmp	r2, #3
    ee1a:	d03e      	beq.n	ee9a <ticker_job+0x6a2>
    ee1c:	2a01      	cmp	r2, #1
    ee1e:	d106      	bne.n	ee2e <ticker_job+0x636>
			uop->status = TICKER_STATUS_SUCCESS;
    ee20:	f8c3 a028 	str.w	sl, [r3, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
    ee24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	if (fp_op_func) {
    ee26:	b112      	cbz	r2, ee2e <ticker_job+0x636>
		fp_op_func(uop->status, uop->op_context);
    ee28:	6b19      	ldr	r1, [r3, #48]	; 0x30
    ee2a:	6a98      	ldr	r0, [r3, #40]	; 0x28
    ee2c:	4790      	blx	r2
			first = user->first + 1;
    ee2e:	7873      	ldrb	r3, [r6, #1]
			if (first == user->count_user_op) {
    ee30:	7832      	ldrb	r2, [r6, #0]
			first = user->first + 1;
    ee32:	3301      	adds	r3, #1
    ee34:	b2db      	uxtb	r3, r3
				first = 0U;
    ee36:	429a      	cmp	r2, r3
    ee38:	bf08      	it	eq
    ee3a:	2300      	moveq	r3, #0
			user->first = first;
    ee3c:	7073      	strb	r3, [r6, #1]
    ee3e:	e7de      	b.n	edfe <ticker_job+0x606>
		ticker_by_next_slot_get(instance,
    ee40:	e9d3 9001 	ldrd	r9, r0, [r3, #4]
	_ticker_id_head = *ticker_id_head;
    ee44:	f899 2000 	ldrb.w	r2, [r9]
		ticker_by_next_slot_get(instance,
    ee48:	f8d3 e00c 	ldr.w	lr, [r3, #12]
	node = instance->nodes;
    ee4c:	f8d4 c000 	ldr.w	ip, [r4]
	if ((_ticker_id_head == TICKER_NULL) ||
    ee50:	6961      	ldr	r1, [r4, #20]
    ee52:	2aff      	cmp	r2, #255	; 0xff
    ee54:	d002      	beq.n	ee5c <ticker_job+0x664>
    ee56:	6807      	ldr	r7, [r0, #0]
    ee58:	42b9      	cmp	r1, r7
    ee5a:	d013      	beq.n	ee84 <ticker_job+0x68c>
		_ticker_id_head = instance->ticker_id_head;
    ee5c:	7f62      	ldrb	r2, [r4, #29]
		*ticks_current = instance->ticks_current;
    ee5e:	6001      	str	r1, [r0, #0]
		_ticks_to_expire = 0U;
    ee60:	2000      	movs	r0, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    ee62:	2aff      	cmp	r2, #255	; 0xff
    ee64:	d009      	beq.n	ee7a <ticker_job+0x682>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0U)) {
    ee66:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    ee6a:	ea4f 1b01 	mov.w	fp, r1, lsl #4
    ee6e:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
    ee72:	688f      	ldr	r7, [r1, #8]
	while ((_ticker_id_head != TICKER_NULL) &&
    ee74:	6989      	ldr	r1, [r1, #24]
    ee76:	4438      	add	r0, r7
    ee78:	b161      	cbz	r1, ee94 <ticker_job+0x69c>
	*ticker_id_head = _ticker_id_head;
    ee7a:	f889 2000 	strb.w	r2, [r9]
	*ticks_to_expire = _ticks_to_expire;
    ee7e:	f8ce 0000 	str.w	r0, [lr]
}
    ee82:	e7cd      	b.n	ee20 <ticker_job+0x628>
		ticker = &node[_ticker_id_head];
    ee84:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    ee88:	0112      	lsls	r2, r2, #4
	_ticks_to_expire = *ticks_to_expire;
    ee8a:	f8de 0000 	ldr.w	r0, [lr]
		_ticker_id_head = ticker->next;
    ee8e:	f81c 2002 	ldrb.w	r2, [ip, r2]
    ee92:	e7e6      	b.n	ee62 <ticker_job+0x66a>
		_ticker_id_head = ticker->next;
    ee94:	f81c 200b 	ldrb.w	r2, [ip, fp]
    ee98:	e7e3      	b.n	ee62 <ticker_job+0x66a>
		if (uop->id < instance->count_node) {
    ee9a:	785a      	ldrb	r2, [r3, #1]
    ee9c:	7a21      	ldrb	r1, [r4, #8]
    ee9e:	4291      	cmp	r1, r2
    eea0:	d908      	bls.n	eeb4 <ticker_job+0x6bc>
			node[uop->id].priority =
    eea2:	6821      	ldr	r1, [r4, #0]
    eea4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    eea8:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    eeac:	7919      	ldrb	r1, [r3, #4]
    eeae:	f882 102d 	strb.w	r1, [r2, #45]	; 0x2d
    eeb2:	e7b5      	b.n	ee20 <ticker_job+0x628>
			uop->status = TICKER_STATUS_FAILURE;
    eeb4:	2201      	movs	r2, #1
    eeb6:	629a      	str	r2, [r3, #40]	; 0x28
    eeb8:	e7b4      	b.n	ee24 <ticker_job+0x62c>
	if (ticker_id_old_head == TICKER_NULL) {
    eeba:	9b04      	ldr	r3, [sp, #16]
    eebc:	2bff      	cmp	r3, #255	; 0xff
    eebe:	d106      	bne.n	eece <ticker_job+0x6d6>
		ticks_current = cntr_cnt_get();
    eec0:	f005 fee6 	bl	14c90 <cntr_cnt_get>
    eec4:	4605      	mov	r5, r0
		if (cntr_start() == 0) {
    eec6:	f005 feaf 	bl	14c28 <cntr_start>
    eeca:	b900      	cbnz	r0, eece <ticker_job+0x6d6>
			instance->ticks_current = ticks_current;
    eecc:	6165      	str	r5, [r4, #20]
	ticker = &instance->nodes[instance->ticker_id_head];
    eece:	7f63      	ldrb	r3, [r4, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    eed0:	6822      	ldr	r2, [r4, #0]
		LL_ASSERT(i);
    eed2:	f8df 80c8 	ldr.w	r8, [pc, #200]	; ef9c <ticker_job+0x7a4>
    eed6:	f8df 90c8 	ldr.w	r9, [pc, #200]	; efa0 <ticker_job+0x7a8>
    eeda:	f8df a0c8 	ldr.w	sl, [pc, #200]	; efa4 <ticker_job+0x7ac>
	ticker = &instance->nodes[instance->ticker_id_head];
    eede:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
    eee2:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	i = 10U;
    eee6:	260a      	movs	r6, #10
	ticks_to_expire = ticker->ticks_to_expire;
    eee8:	689f      	ldr	r7, [r3, #8]
		ctr = cntr_cnt_get();
    eeea:	f005 fed1 	bl	14c90 <cntr_cnt_get>
		cc = instance->ticks_current;
    eeee:	6965      	ldr	r5, [r4, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    eef0:	1b43      	subs	r3, r0, r5
    eef2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    eef6:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
    eef8:	42bb      	cmp	r3, r7
    eefa:	bf2c      	ite	cs
    eefc:	18ed      	addcs	r5, r5, r3
    eefe:	19ed      	addcc	r5, r5, r7
		cc &= HAL_TICKER_CNTR_MASK;
    ef00:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
		instance->trigger_set_cb(cc);
    ef04:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		ctr = cntr_cnt_get();
    ef06:	4683      	mov	fp, r0
		instance->trigger_set_cb(cc);
    ef08:	4628      	mov	r0, r5
    ef0a:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    ef0c:	f005 fec0 	bl	14c90 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    ef10:	eba0 030b 	sub.w	r3, r0, fp
    ef14:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    ef18:	eba5 050b 	sub.w	r5, r5, fp
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    ef1c:	3303      	adds	r3, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    ef1e:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
		  ticker_ticks_diff_get(cc, ctr));
    ef22:	42ab      	cmp	r3, r5
		i--;
    ef24:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
		  ticker_ticks_diff_get(cc, ctr));
    ef28:	f67f af59 	bls.w	edde <ticker_job+0x5e6>
		LL_ASSERT(i);
    ef2c:	2e00      	cmp	r6, #0
    ef2e:	d1dc      	bne.n	eeea <ticker_job+0x6f2>
    ef30:	f640 03f3 	movw	r3, #2291	; 0x8f3
    ef34:	4642      	mov	r2, r8
    ef36:	4649      	mov	r1, r9
    ef38:	4650      	mov	r0, sl
    ef3a:	f009 fb15 	bl	18568 <printk>
    ef3e:	4040      	eors	r0, r0
    ef40:	f380 8811 	msr	BASEPRI, r0
    ef44:	f04f 0003 	mov.w	r0, #3
    ef48:	df02      	svc	2
    ef4a:	e7ce      	b.n	eeea <ticker_job+0x6f2>
	if (previous == current) {
    ef4c:	4290      	cmp	r0, r2
    ef4e:	d101      	bne.n	ef54 <ticker_job+0x75c>
		instance->ticker_id_head = ticker_current->next;
    ef50:	f884 b01d 	strb.w	fp, [r4, #29]
	node[previous].next = ticker_current->next;
    ef54:	b212      	sxth	r2, r2
    ef56:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    ef5a:	0112      	lsls	r2, r2, #4
    ef5c:	f809 b002 	strb.w	fp, [r9, r2]
	if (ticker_current->next != TICKER_NULL) {
    ef60:	f89e 3000 	ldrb.w	r3, [lr]
    ef64:	2bff      	cmp	r3, #255	; 0xff
    ef66:	f43f ad0c 	beq.w	e982 <ticker_job+0x18a>
		node[ticker_current->next].ticks_to_expire += timeout;
    ef6a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    ef6e:	eb09 1903 	add.w	r9, r9, r3, lsl #4
    ef72:	f8d9 2008 	ldr.w	r2, [r9, #8]
    ef76:	4452      	add	r2, sl
    ef78:	f8c9 2008 	str.w	r2, [r9, #8]
	return (total + timeout);
    ef7c:	e501      	b.n	e982 <ticker_job+0x18a>
	if (!pending) {
    ef7e:	2b00      	cmp	r3, #0
    ef80:	f47f af23 	bne.w	edca <ticker_job+0x5d2>
		flag_compare_update = 1U;
    ef84:	2301      	movs	r3, #1
    ef86:	9303      	str	r3, [sp, #12]
    ef88:	e714      	b.n	edb4 <ticker_job+0x5bc>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    ef8a:	7f23      	ldrb	r3, [r4, #28]
    ef8c:	2bff      	cmp	r3, #255	; 0xff
    ef8e:	f47f ae8d 	bne.w	ecac <ticker_job+0x4b4>
		window_start_ticks = 0U;
    ef92:	2300      	movs	r3, #0
    ef94:	e690      	b.n	ecb8 <ticker_job+0x4c0>
}
    ef96:	b00d      	add	sp, #52	; 0x34
    ef98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ef9c:	0002192f 	.word	0x0002192f
    efa0:	00021b5d 	.word	0x00021b5d
    efa4:	0001f734 	.word	0x0001f734

0000efa8 <ticker_init>:
{
    efa8:	b5f0      	push	{r4, r5, r6, r7, lr}
    efaa:	9f05      	ldr	r7, [sp, #20]
    efac:	f89d e018 	ldrb.w	lr, [sp, #24]
    efb0:	f8dd c01c 	ldr.w	ip, [sp, #28]
	if (instance_index >= TICKER_INSTANCE_MAX) {
    efb4:	4605      	mov	r5, r0
    efb6:	b108      	cbz	r0, efbc <ticker_init+0x14>
		return TICKER_STATUS_FAILURE;
    efb8:	2001      	movs	r0, #1
}
    efba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	instance->count_node = count_node;
    efbc:	4c19      	ldr	r4, [pc, #100]	; (f024 <ticker_init+0x7c>)
    efbe:	7221      	strb	r1, [r4, #8]
	instance->nodes = node;
    efc0:	6022      	str	r2, [r4, #0]
	while (count_node--) {
    efc2:	3901      	subs	r1, #1
    efc4:	b2c9      	uxtb	r1, r1
    efc6:	29ff      	cmp	r1, #255	; 0xff
    efc8:	d118      	bne.n	effc <ticker_init+0x54>
	instance->count_user = count_user;
    efca:	7263      	strb	r3, [r4, #9]
	instance->users = user;
    efcc:	6067      	str	r7, [r4, #4]
		user_op_ += users[count_user].count_user_op;
    efce:	2134      	movs	r1, #52	; 0x34
	while (count_user--) {
    efd0:	3b01      	subs	r3, #1
    efd2:	b2db      	uxtb	r3, r3
    efd4:	2bff      	cmp	r3, #255	; 0xff
    efd6:	d118      	bne.n	f00a <ticker_init+0x62>
	if (count_op) {
    efd8:	f1be 0f00 	cmp.w	lr, #0
    efdc:	d1ec      	bne.n	efb8 <ticker_init+0x10>
	instance->caller_id_get_cb = caller_id_get_cb;
    efde:	9b08      	ldr	r3, [sp, #32]
    efe0:	6223      	str	r3, [r4, #32]
	instance->sched_cb = sched_cb;
    efe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    efe4:	6263      	str	r3, [r4, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    efe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    efe8:	62a3      	str	r3, [r4, #40]	; 0x28
	instance->ticker_id_slot_previous = TICKER_NULL;
    efea:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->ticks_slot_previous = 0U;
    efee:	e9c4 ee05 	strd	lr, lr, [r4, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
    eff2:	83a3      	strh	r3, [r4, #28]
	instance->ticks_elapsed_first = 0U;
    eff4:	f8a4 e00a 	strh.w	lr, [r4, #10]
	return TICKER_STATUS_SUCCESS;
    eff8:	4670      	mov	r0, lr
    effa:	e7de      	b.n	efba <ticker_init+0x12>
		instance->nodes[count_node].priority = 0;
    effc:	eb01 0641 	add.w	r6, r1, r1, lsl #1
    f000:	eb02 1606 	add.w	r6, r2, r6, lsl #4
    f004:	f886 502d 	strb.w	r5, [r6, #45]	; 0x2d
    f008:	e7db      	b.n	efc2 <ticker_init+0x1a>
		users[count_user].user_op = user_op_;
    f00a:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    f00e:	f8c2 c004 	str.w	ip, [r2, #4]
		user_op_ += users[count_user].count_user_op;
    f012:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
    f016:	fb02 cc01 	mla	ip, r2, r1, ip
		count_op -= users[count_user].count_user_op;
    f01a:	ebae 0202 	sub.w	r2, lr, r2
    f01e:	fa5f fe82 	uxtb.w	lr, r2
    f022:	e7d5      	b.n	efd0 <ticker_init+0x28>
    f024:	20001d80 	.word	0x20001d80

0000f028 <ticker_is_initialized>:
	return !!(_instance[instance_index].count_node);
    f028:	4b04      	ldr	r3, [pc, #16]	; (f03c <ticker_is_initialized+0x14>)
    f02a:	222c      	movs	r2, #44	; 0x2c
    f02c:	fb02 3000 	mla	r0, r2, r0, r3
    f030:	7a00      	ldrb	r0, [r0, #8]
}
    f032:	3800      	subs	r0, #0
    f034:	bf18      	it	ne
    f036:	2001      	movne	r0, #1
    f038:	4770      	bx	lr
    f03a:	bf00      	nop
    f03c:	20001d80 	.word	0x20001d80

0000f040 <ticker_trigger>:
	if (instance->sched_cb) {
    f040:	4b07      	ldr	r3, [pc, #28]	; (f060 <ticker_trigger+0x20>)
    f042:	222c      	movs	r2, #44	; 0x2c
    f044:	fb02 3100 	mla	r1, r2, r0, r3
{
    f048:	b410      	push	{r4}
	if (instance->sched_cb) {
    f04a:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    f04c:	b134      	cbz	r4, f05c <ticker_trigger+0x1c>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    f04e:	460b      	mov	r3, r1
    f050:	46a4      	mov	ip, r4
    f052:	2201      	movs	r2, #1
}
    f054:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    f056:	2103      	movs	r1, #3
    f058:	2002      	movs	r0, #2
    f05a:	4760      	bx	ip
}
    f05c:	bc10      	pop	{r4}
    f05e:	4770      	bx	lr
    f060:	20001d80 	.word	0x20001d80

0000f064 <ticker_start_ext>:
{
    f064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f068:	4605      	mov	r5, r0
    f06a:	4608      	mov	r0, r1
    f06c:	4611      	mov	r1, r2
    f06e:	461a      	mov	r2, r3
	struct ticker_instance *instance = &_instance[instance_index];
    f070:	4b22      	ldr	r3, [pc, #136]	; (f0fc <ticker_start_ext+0x98>)
    f072:	242c      	movs	r4, #44	; 0x2c
    f074:	fb05 3904 	mla	r9, r5, r4, r3
	user = &instance->users[user_id];
    f078:	f8d9 3004 	ldr.w	r3, [r9, #4]
    f07c:	eb03 0cc0 	add.w	ip, r3, r0, lsl #3
	if (last >= user->count_user_op) {
    f080:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
	last = user->last + 1;
    f084:	f89c 7003 	ldrb.w	r7, [ip, #3]
    f088:	1c7e      	adds	r6, r7, #1
    f08a:	b2f6      	uxtb	r6, r6
		last = 0U;
    f08c:	42b3      	cmp	r3, r6
    f08e:	bf98      	it	ls
    f090:	2600      	movls	r6, #0
	if (last == user->first) {
    f092:	f89c 3001 	ldrb.w	r3, [ip, #1]
    f096:	42b3      	cmp	r3, r6
    f098:	d02e      	beq.n	f0f8 <ticker_start_ext+0x94>
	user_op = &user->user_op[user->last];
    f09a:	2334      	movs	r3, #52	; 0x34
    f09c:	fb17 f703 	smulbb	r7, r7, r3
    f0a0:	f8dc 3004 	ldr.w	r3, [ip, #4]
	user_op->op = TICKER_USER_OP_TYPE_START;
    f0a4:	f04f 0804 	mov.w	r8, #4
	user_op = &user->user_op[user->last];
    f0a8:	19dc      	adds	r4, r3, r7
	user_op->op = TICKER_USER_OP_TYPE_START;
    f0aa:	f803 8007 	strb.w	r8, [r3, r7]
	user_op->params.start.ticks_first = ticks_first;
    f0ae:	9b08      	ldr	r3, [sp, #32]
    f0b0:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    f0b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f0b4:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    f0b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f0b8:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    f0ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f0bc:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    f0be:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    f0c2:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.ext_data = ext_data;
    f0c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f0c6:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    f0c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f0ca:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    f0cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f0ce:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    f0d0:	2302      	movs	r3, #2
    f0d2:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->fp_op_func = fp_op_func;
    f0d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f0d6:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
    f0d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    f0da:	7061      	strb	r1, [r4, #1]
	user_op->params.start.ticks_at_start = ticks_anchor;
    f0dc:	6062      	str	r2, [r4, #4]
	user_op->op_context = op_context;
    f0de:	6323      	str	r3, [r4, #48]	; 0x30
	user->last = last;
    f0e0:	f88c 6003 	strb.w	r6, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    f0e4:	e9d9 3608 	ldrd	r3, r6, [r9, #32]
    f0e8:	4798      	blx	r3
    f0ea:	464b      	mov	r3, r9
    f0ec:	2200      	movs	r2, #0
    f0ee:	4641      	mov	r1, r8
    f0f0:	47b0      	blx	r6
	return user_op->status;
    f0f2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    f0f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
    f0f8:	2001      	movs	r0, #1
    f0fa:	e7fb      	b.n	f0f4 <ticker_start_ext+0x90>
    f0fc:	20001d80 	.word	0x20001d80

0000f100 <ticker_update_ext>:
{
    f100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f104:	4605      	mov	r5, r0
    f106:	4608      	mov	r0, r1
    f108:	4619      	mov	r1, r3
	struct ticker_instance *instance = &_instance[instance_index];
    f10a:	4b22      	ldr	r3, [pc, #136]	; (f194 <ticker_update_ext+0x94>)
    f10c:	242c      	movs	r4, #44	; 0x2c
    f10e:	fb05 3804 	mla	r8, r5, r4, r3
	user = &instance->users[user_id];
    f112:	f8d8 3004 	ldr.w	r3, [r8, #4]
    f116:	eb03 0cc0 	add.w	ip, r3, r0, lsl #3
	if (last >= user->count_user_op) {
    f11a:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
	last = user->last + 1;
    f11e:	f89c 7003 	ldrb.w	r7, [ip, #3]
    f122:	1c7e      	adds	r6, r7, #1
    f124:	b2f6      	uxtb	r6, r6
		last = 0U;
    f126:	42b3      	cmp	r3, r6
    f128:	bf98      	it	ls
    f12a:	2600      	movls	r6, #0
	if (last == user->first) {
    f12c:	f89c 3001 	ldrb.w	r3, [ip, #1]
    f130:	42b3      	cmp	r3, r6
    f132:	d02c      	beq.n	f18e <ticker_update_ext+0x8e>
	user_op = &user->user_op[user->last];
    f134:	2334      	movs	r3, #52	; 0x34
    f136:	fb17 f703 	smulbb	r7, r7, r3
    f13a:	f8dc 3004 	ldr.w	r3, [ip, #4]
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    f13e:	f04f 0e05 	mov.w	lr, #5
	user_op = &user->user_op[user->last];
    f142:	19dc      	adds	r4, r3, r7
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    f144:	f803 e007 	strb.w	lr, [r3, r7]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    f148:	9b06      	ldr	r3, [sp, #24]
    f14a:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    f14c:	9b07      	ldr	r3, [sp, #28]
    f14e:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    f150:	9b08      	ldr	r3, [sp, #32]
    f152:	6123      	str	r3, [r4, #16]
	user_op->params.update.lazy = lazy;
    f154:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    f158:	82a3      	strh	r3, [r4, #20]
	user_op->params.update.force = force;
    f15a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    f15e:	75a3      	strb	r3, [r4, #22]
	user_op->params.update.must_expire = must_expire;
    f160:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    f164:	75e3      	strb	r3, [r4, #23]
	user_op->status = TICKER_STATUS_BUSY;
    f166:	2302      	movs	r3, #2
    f168:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->fp_op_func = fp_op_func;
    f16a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f16c:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
    f16e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	user_op->id = ticker_id;
    f170:	7062      	strb	r2, [r4, #1]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    f172:	6061      	str	r1, [r4, #4]
	user_op->op_context = op_context;
    f174:	6323      	str	r3, [r4, #48]	; 0x30
	user->last = last;
    f176:	f88c 6003 	strb.w	r6, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    f17a:	e9d8 3608 	ldrd	r3, r6, [r8, #32]
    f17e:	4798      	blx	r3
    f180:	4643      	mov	r3, r8
    f182:	2200      	movs	r2, #0
    f184:	2104      	movs	r1, #4
    f186:	47b0      	blx	r6
	return user_op->status;
    f188:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    f18a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    f18e:	2001      	movs	r0, #1
    f190:	e7fb      	b.n	f18a <ticker_update_ext+0x8a>
    f192:	bf00      	nop
    f194:	20001d80 	.word	0x20001d80

0000f198 <ticker_stop>:
{
    f198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f19c:	4604      	mov	r4, r0
    f19e:	4608      	mov	r0, r1
    f1a0:	4619      	mov	r1, r3
	struct ticker_instance *instance = &_instance[instance_index];
    f1a2:	4b19      	ldr	r3, [pc, #100]	; (f208 <ticker_stop+0x70>)
    f1a4:	252c      	movs	r5, #44	; 0x2c
    f1a6:	fb04 3905 	mla	r9, r4, r5, r3
	user = &instance->users[user_id];
    f1aa:	f8d9 3004 	ldr.w	r3, [r9, #4]
    f1ae:	eb03 07c0 	add.w	r7, r3, r0, lsl #3
	if (last >= user->count_user_op) {
    f1b2:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
	last = user->last + 1;
    f1b6:	78fe      	ldrb	r6, [r7, #3]
    f1b8:	1c75      	adds	r5, r6, #1
    f1ba:	b2ed      	uxtb	r5, r5
		last = 0U;
    f1bc:	42ab      	cmp	r3, r5
    f1be:	bf98      	it	ls
    f1c0:	2500      	movls	r5, #0
	if (last == user->first) {
    f1c2:	787b      	ldrb	r3, [r7, #1]
    f1c4:	42ab      	cmp	r3, r5
    f1c6:	d01d      	beq.n	f204 <ticker_stop+0x6c>
	user_op = &user->user_op[user->last];
    f1c8:	2334      	movs	r3, #52	; 0x34
    f1ca:	fb16 f603 	smulbb	r6, r6, r3
    f1ce:	687b      	ldr	r3, [r7, #4]
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    f1d0:	f04f 0c06 	mov.w	ip, #6
    f1d4:	f803 c006 	strb.w	ip, [r3, r6]
	user_op = &user->user_op[user->last];
    f1d8:	eb03 0806 	add.w	r8, r3, r6
	user_op->status = TICKER_STATUS_BUSY;
    f1dc:	2302      	movs	r3, #2
	user_op->fp_op_func = fp_op_func;
    f1de:	e9c8 310a 	strd	r3, r1, [r8, #40]	; 0x28
	user_op->op_context = op_context;
    f1e2:	9b08      	ldr	r3, [sp, #32]
	user_op->id = ticker_id;
    f1e4:	f888 2001 	strb.w	r2, [r8, #1]
	user_op->op_context = op_context;
    f1e8:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
	user->last = last;
    f1ec:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    f1ee:	e9d9 3508 	ldrd	r3, r5, [r9, #32]
    f1f2:	4798      	blx	r3
    f1f4:	464b      	mov	r3, r9
    f1f6:	2200      	movs	r2, #0
    f1f8:	2104      	movs	r1, #4
    f1fa:	47a8      	blx	r5
	return user_op->status;
    f1fc:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
}
    f200:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
    f204:	2001      	movs	r0, #1
    f206:	e7fb      	b.n	f200 <ticker_stop+0x68>
    f208:	20001d80 	.word	0x20001d80

0000f20c <ll_addr_get>:

static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t *ll_addr_get(uint8_t addr_type, uint8_t *bdaddr)
{
    f20c:	b508      	push	{r3, lr}
    f20e:	4603      	mov	r3, r0
	if (addr_type > 1) {
    f210:	2b01      	cmp	r3, #1
{
    f212:	4608      	mov	r0, r1
	if (addr_type > 1) {
    f214:	d80e      	bhi.n	f234 <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
    f216:	b133      	cbz	r3, f226 <ll_addr_get+0x1a>
		if (bdaddr) {
    f218:	b119      	cbz	r1, f222 <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    f21a:	4907      	ldr	r1, [pc, #28]	; (f238 <ll_addr_get+0x2c>)
    f21c:	2206      	movs	r2, #6
    f21e:	f00a fcc1 	bl	19ba4 <memcpy>
		}

		return rnd_addr;
    f222:	4805      	ldr	r0, [pc, #20]	; (f238 <ll_addr_get+0x2c>)
    f224:	e007      	b.n	f236 <ll_addr_get+0x2a>
	}

	if (bdaddr) {
    f226:	b119      	cbz	r1, f230 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    f228:	4904      	ldr	r1, [pc, #16]	; (f23c <ll_addr_get+0x30>)
    f22a:	2206      	movs	r2, #6
    f22c:	f00a fcba 	bl	19ba4 <memcpy>
	}

	return pub_addr;
    f230:	4802      	ldr	r0, [pc, #8]	; (f23c <ll_addr_get+0x30>)
    f232:	e000      	b.n	f236 <ll_addr_get+0x2a>
		return NULL;
    f234:	2000      	movs	r0, #0
}
    f236:	bd08      	pop	{r3, pc}
    f238:	20002fff 	.word	0x20002fff
    f23c:	20002ff9 	.word	0x20002ff9

0000f240 <ll_addr_set>:

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
    f240:	b570      	push	{r4, r5, r6, lr}
    f242:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
    f244:	2000      	movs	r0, #0
{
    f246:	460d      	mov	r5, r1
		if (ull_adv_is_enabled(0)) {
    f248:	f00d fa0f 	bl	1c66a <ull_adv_is_enabled>
    f24c:	b110      	cbz	r0, f254 <ll_addr_set+0x14>
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
			return BT_HCI_ERR_CMD_DISALLOWED;
    f24e:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
    f250:	4620      	mov	r0, r4
    f252:	bd70      	pop	{r4, r5, r6, pc}
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
    f254:	f00d fac2 	bl	1c7dc <ull_scan_is_enabled>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
    f258:	f010 0606 	ands.w	r6, r0, #6
    f25c:	d1f7      	bne.n	f24e <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    f25e:	2206      	movs	r2, #6
    f260:	4629      	mov	r1, r5
	if (addr_type) {
    f262:	b124      	cbz	r4, f26e <ll_addr_set+0x2e>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    f264:	4804      	ldr	r0, [pc, #16]	; (f278 <__kernel_ram_size>)
    f266:	f00a fc9d 	bl	19ba4 <memcpy>
	return 0;
    f26a:	4634      	mov	r4, r6
    f26c:	e7f0      	b.n	f250 <ll_addr_set+0x10>
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    f26e:	4803      	ldr	r0, [pc, #12]	; (f27c <__kernel_ram_size+0x4>)
    f270:	f00a fc98 	bl	19ba4 <memcpy>
    f274:	e7ec      	b.n	f250 <ll_addr_set+0x10>
    f276:	bf00      	nop
    f278:	20002fff 	.word	0x20002fff
    f27c:	20002ff9 	.word	0x20002ff9

0000f280 <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
    f280:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    f282:	4802      	ldr	r0, [pc, #8]	; (f28c <hci_driver_init+0xc>)
    f284:	f7f6 f82c 	bl	52e0 <bt_hci_driver_register>

	return 0;
}
    f288:	2000      	movs	r0, #0
    f28a:	bd08      	pop	{r3, pc}
    f28c:	0001eba4 	.word	0x0001eba4

0000f290 <hci_driver_send>:
	if (!buf->len) {
    f290:	8983      	ldrh	r3, [r0, #12]
{
    f292:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f294:	4605      	mov	r5, r0
	if (!buf->len) {
    f296:	b973      	cbnz	r3, f2b6 <hci_driver_send+0x26>
    f298:	4920      	ldr	r1, [pc, #128]	; (f31c <hci_driver_send+0x8c>)
    f29a:	4b21      	ldr	r3, [pc, #132]	; (f320 <hci_driver_send+0x90>)
		BT_ERR("Empty HCI packet");
    f29c:	4821      	ldr	r0, [pc, #132]	; (f324 <hci_driver_send+0x94>)
    f29e:	1ac9      	subs	r1, r1, r3
    f2a0:	08c9      	lsrs	r1, r1, #3
    f2a2:	0189      	lsls	r1, r1, #6
    f2a4:	f041 0101 	orr.w	r1, r1, #1
    f2a8:	f009 fda3 	bl	18df2 <log_0>
		return -EINVAL;
    f2ac:	f06f 0415 	mvn.w	r4, #21
}
    f2b0:	4620      	mov	r0, r4
    f2b2:	b003      	add	sp, #12
    f2b4:	bd30      	pop	{r4, r5, pc}
    f2b6:	7d01      	ldrb	r1, [r0, #20]
	switch (type) {
    f2b8:	b181      	cbz	r1, f2dc <hci_driver_send+0x4c>
    f2ba:	2902      	cmp	r1, #2
    f2bc:	d122      	bne.n	f304 <hci_driver_send+0x74>
	err = hci_acl_handle(buf, &evt);
    f2be:	a901      	add	r1, sp, #4
    f2c0:	f000 fcb8 	bl	fc34 <hci_acl_handle>
    f2c4:	4604      	mov	r4, r0
	if (evt) {
    f2c6:	9801      	ldr	r0, [sp, #4]
    f2c8:	b108      	cbz	r0, f2ce <hci_driver_send+0x3e>
		bt_recv_prio(evt);
    f2ca:	f7f5 ffeb 	bl	52a4 <bt_recv_prio>
	if (!err) {
    f2ce:	2c00      	cmp	r4, #0
    f2d0:	d1ee      	bne.n	f2b0 <hci_driver_send+0x20>
		net_buf_unref(buf);
    f2d2:	4628      	mov	r0, r5
    f2d4:	f006 fa42 	bl	1575c <net_buf_unref>
    f2d8:	2400      	movs	r4, #0
    f2da:	e7e9      	b.n	f2b0 <hci_driver_send+0x20>
	struct node_rx_pdu *node_rx = NULL;
    f2dc:	9101      	str	r1, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    f2de:	a901      	add	r1, sp, #4
    f2e0:	f000 fa26 	bl	f730 <hci_cmd_handle>
	if (evt) {
    f2e4:	2800      	cmp	r0, #0
    f2e6:	d0f4      	beq.n	f2d2 <hci_driver_send+0x42>
		bt_recv_prio(evt);
    f2e8:	f7f5 ffdc 	bl	52a4 <bt_recv_prio>
		if (node_rx) {
    f2ec:	9c01      	ldr	r4, [sp, #4]
    f2ee:	2c00      	cmp	r4, #0
    f2f0:	d0ef      	beq.n	f2d2 <hci_driver_send+0x42>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    f2f2:	4620      	mov	r0, r4
    f2f4:	f000 ff2a 	bl	1014c <hci_get_class>
    f2f8:	7160      	strb	r0, [r4, #5]
			k_fifo_put(&recv_fifo, node_rx);
    f2fa:	9901      	ldr	r1, [sp, #4]
    f2fc:	480a      	ldr	r0, [pc, #40]	; (f328 <hci_driver_send+0x98>)
    f2fe:	f00e fb60 	bl	1d9c2 <k_queue_append>
	if (!err) {
    f302:	e7e6      	b.n	f2d2 <hci_driver_send+0x42>
    f304:	4b06      	ldr	r3, [pc, #24]	; (f320 <hci_driver_send+0x90>)
    f306:	4a05      	ldr	r2, [pc, #20]	; (f31c <hci_driver_send+0x8c>)
		BT_ERR("Unknown HCI type %u", type);
    f308:	4808      	ldr	r0, [pc, #32]	; (f32c <hci_driver_send+0x9c>)
    f30a:	1ad2      	subs	r2, r2, r3
    f30c:	08d2      	lsrs	r2, r2, #3
    f30e:	0192      	lsls	r2, r2, #6
    f310:	f042 0201 	orr.w	r2, r2, #1
    f314:	f009 fd7a 	bl	18e0c <log_1>
    f318:	e7c8      	b.n	f2ac <hci_driver_send+0x1c>
    f31a:	bf00      	nop
    f31c:	0001e460 	.word	0x0001e460
    f320:	0001e408 	.word	0x0001e408
    f324:	0002197d 	.word	0x0002197d
    f328:	20000c04 	.word	0x20000c04
    f32c:	0002198e 	.word	0x0002198e

0000f330 <recv_thread>:
{
    f330:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
    f332:	4d2f      	ldr	r5, [pc, #188]	; (f3f0 <recv_thread+0xc0>)
	struct net_buf *buf = NULL;
    f334:	2600      	movs	r6, #0
    f336:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f33a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f33e:	4628      	mov	r0, r5
    f340:	f008 f810 	bl	17364 <z_impl_k_queue_get>
		if (node_rx && !buf) {
    f344:	2800      	cmp	r0, #0
    f346:	d0f6      	beq.n	f336 <recv_thread+0x6>
	uint8_t class = node_rx->hdr.user_meta;
    f348:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
    f34a:	9001      	str	r0, [sp, #4]
	switch (class) {
    f34c:	2b04      	cmp	r3, #4
    f34e:	d826      	bhi.n	f39e <recv_thread+0x6e>
    f350:	b33b      	cbz	r3, f3a2 <recv_thread+0x72>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    f352:	2b02      	cmp	r3, #2
    f354:	d134      	bne.n	f3c0 <recv_thread+0x90>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
    f356:	2200      	movs	r2, #0
    f358:	2300      	movs	r3, #0
    f35a:	2101      	movs	r1, #1
    f35c:	2000      	movs	r0, #0
    f35e:	f7f5 f8ef 	bl	4540 <bt_buf_get_evt>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    f362:	4604      	mov	r4, r0
		if (buf) {
    f364:	b118      	cbz	r0, f36e <recv_thread+0x3e>
			hci_evt_encode(node_rx, buf);
    f366:	4601      	mov	r1, r0
    f368:	9801      	ldr	r0, [sp, #4]
    f36a:	f000 fd6b 	bl	fe44 <hci_evt_encode>
	node_rx->hdr.next = NULL;
    f36e:	9b01      	ldr	r3, [sp, #4]
	ll_rx_mem_release((void **)&node_rx);
    f370:	a801      	add	r0, sp, #4
	node_rx->hdr.next = NULL;
    f372:	601e      	str	r6, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    f374:	f001 fb8e 	bl	10a94 <ll_rx_mem_release>
		while (buf) {
    f378:	2c00      	cmp	r4, #0
    f37a:	d0dc      	beq.n	f336 <recv_thread+0x6>
			net_buf_ref(frag);
    f37c:	4620      	mov	r0, r4
    f37e:	f00d ff6c 	bl	1d25a <net_buf_ref>
			buf = net_buf_frag_del(NULL, frag);
    f382:	4621      	mov	r1, r4
    f384:	2000      	movs	r0, #0
    f386:	f00d ff8e 	bl	1d2a6 <net_buf_frag_del>
			if (frag->len) {
    f38a:	89a3      	ldrh	r3, [r4, #12]
			buf = net_buf_frag_del(NULL, frag);
    f38c:	4607      	mov	r7, r0
				bt_recv(frag);
    f38e:	4620      	mov	r0, r4
			if (frag->len) {
    f390:	b35b      	cbz	r3, f3ea <recv_thread+0xba>
				bt_recv(frag);
    f392:	f7f5 fee3 	bl	515c <bt_recv>
	z_impl_k_yield();
    f396:	f008 fcc9 	bl	17d2c <z_impl_k_yield>
			buf = net_buf_frag_del(NULL, frag);
    f39a:	463c      	mov	r4, r7
}
    f39c:	e7ec      	b.n	f378 <recv_thread+0x48>
	switch (class) {
    f39e:	2b05      	cmp	r3, #5
    f3a0:	d016      	beq.n	f3d0 <recv_thread+0xa0>
		LL_ASSERT(0);
    f3a2:	4a14      	ldr	r2, [pc, #80]	; (f3f4 <recv_thread+0xc4>)
    f3a4:	4914      	ldr	r1, [pc, #80]	; (f3f8 <recv_thread+0xc8>)
    f3a6:	4815      	ldr	r0, [pc, #84]	; (f3fc <recv_thread+0xcc>)
    f3a8:	f44f 73a2 	mov.w	r3, #324	; 0x144
    f3ac:	f009 f8dc 	bl	18568 <printk>
    f3b0:	4040      	eors	r0, r0
    f3b2:	f380 8811 	msr	BASEPRI, r0
    f3b6:	f04f 0003 	mov.w	r0, #3
    f3ba:	df02      	svc	2
	struct net_buf *buf = NULL;
    f3bc:	2400      	movs	r4, #0
		break;
    f3be:	e7d6      	b.n	f36e <recv_thread+0x3e>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    f3c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f3c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f3c8:	2001      	movs	r0, #1
    f3ca:	f7f5 f883 	bl	44d4 <bt_buf_get_rx>
    f3ce:	e7c8      	b.n	f362 <recv_thread+0x32>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    f3d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f3d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f3d8:	2003      	movs	r0, #3
    f3da:	f7f5 f87b 	bl	44d4 <bt_buf_get_rx>
    f3de:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    f3e0:	4601      	mov	r1, r0
    f3e2:	9801      	ldr	r0, [sp, #4]
    f3e4:	f000 fcf4 	bl	fdd0 <hci_acl_encode>
		break;
    f3e8:	e7c1      	b.n	f36e <recv_thread+0x3e>
				net_buf_unref(frag);
    f3ea:	f006 f9b7 	bl	1575c <net_buf_unref>
    f3ee:	e7d2      	b.n	f396 <recv_thread+0x66>
    f3f0:	20000c04 	.word	0x20000c04
    f3f4:	000219a2 	.word	0x000219a2
    f3f8:	00020b9a 	.word	0x00020b9a
    f3fc:	0001f734 	.word	0x0001f734

0000f400 <prio_recv_thread>:
{
    f400:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
    f404:	4e2a      	ldr	r6, [pc, #168]	; (f4b0 <prio_recv_thread+0xb0>)
				k_fifo_put(&recv_fifo, node_rx);
    f406:	4f2b      	ldr	r7, [pc, #172]	; (f4b4 <prio_recv_thread+0xb4>)
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    f408:	f10d 0102 	add.w	r1, sp, #2
    f40c:	a801      	add	r0, sp, #4
    f40e:	f001 fa3d 	bl	1088c <ll_rx_get>
    f412:	4604      	mov	r4, r0
    f414:	bb80      	cbnz	r0, f478 <prio_recv_thread+0x78>
		if (node_rx) {
    f416:	9b01      	ldr	r3, [sp, #4]
    f418:	2b00      	cmp	r3, #0
    f41a:	d041      	beq.n	f4a0 <prio_recv_thread+0xa0>
			ll_rx_dequeue();
    f41c:	f001 fa92 	bl	10944 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    f420:	9d01      	ldr	r5, [sp, #4]
    f422:	4628      	mov	r0, r5
    f424:	f000 fe92 	bl	1014c <hci_get_class>
    f428:	7168      	strb	r0, [r5, #5]
			buf = process_prio_evt(node_rx, &evt_flags);
    f42a:	9d01      	ldr	r5, [sp, #4]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
    f42c:	796b      	ldrb	r3, [r5, #5]
    f42e:	2b03      	cmp	r3, #3
    f430:	d11d      	bne.n	f46e <prio_recv_thread+0x6e>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
    f432:	792b      	ldrb	r3, [r5, #4]
    f434:	2b15      	cmp	r3, #21
    f436:	d11a      	bne.n	f46e <prio_recv_thread+0x6e>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    f438:	4621      	mov	r1, r4
    f43a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f43e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f442:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
    f444:	f8b5 8006 	ldrh.w	r8, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    f448:	f7f5 f87a 	bl	4540 <bt_buf_get_evt>
			hci_disconn_complete_encode(pdu_data, handle, buf);
    f44c:	4641      	mov	r1, r8
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    f44e:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
    f450:	4602      	mov	r2, r0
    f452:	f105 001c 	add.w	r0, r5, #28
    f456:	f000 fc91 	bl	fd7c <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
    f45a:	4640      	mov	r0, r8
    f45c:	f000 fcb0 	bl	fdc0 <hci_disconn_complete_process>
			if (buf) {
    f460:	b12c      	cbz	r4, f46e <prio_recv_thread+0x6e>
				bt_recv_prio(buf);
    f462:	4620      	mov	r0, r4
    f464:	f7f5 ff1e 	bl	52a4 <bt_recv_prio>
					net_buf_unref(buf);
    f468:	4620      	mov	r0, r4
    f46a:	f006 f977 	bl	1575c <net_buf_unref>
				k_fifo_put(&recv_fifo, node_rx);
    f46e:	9901      	ldr	r1, [sp, #4]
    f470:	4638      	mov	r0, r7
    f472:	f00e faa6 	bl	1d9c2 <k_queue_append>
			continue;
    f476:	e7c7      	b.n	f408 <prio_recv_thread+0x8>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    f478:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f47c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f480:	2100      	movs	r1, #0
    f482:	2013      	movs	r0, #19
    f484:	f7f5 f85c 	bl	4540 <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    f488:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    f48c:	4605      	mov	r5, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    f48e:	4622      	mov	r2, r4
    f490:	f00d f884 	bl	1c59c <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    f494:	4628      	mov	r0, r5
    f496:	f7f5 ff05 	bl	52a4 <bt_recv_prio>
	z_impl_k_yield();
    f49a:	f008 fc47 	bl	17d2c <z_impl_k_yield>
    f49e:	e7b3      	b.n	f408 <prio_recv_thread+0x8>
	return z_impl_k_sem_take(sem, timeout);
    f4a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f4a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f4a8:	4630      	mov	r0, r6
    f4aa:	f007 ffb5 	bl	17418 <z_impl_k_sem_take>
		BT_DBG("sem taken");
    f4ae:	e7ab      	b.n	f408 <prio_recv_thread+0x8>
    f4b0:	20000bbc 	.word	0x20000bbc
    f4b4:	20000c04 	.word	0x20000c04

0000f4b8 <hci_driver_open>:
{
    f4b8:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
    f4ba:	4820      	ldr	r0, [pc, #128]	; (f53c <hci_driver_open+0x84>)
{
    f4bc:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
    f4be:	f001 f8dd 	bl	1067c <ll_init>
	if (err) {
    f4c2:	4604      	mov	r4, r0
    f4c4:	b168      	cbz	r0, f4e2 <hci_driver_open+0x2a>
    f4c6:	4a1e      	ldr	r2, [pc, #120]	; (f540 <hci_driver_open+0x88>)
    f4c8:	4b1e      	ldr	r3, [pc, #120]	; (f544 <hci_driver_open+0x8c>)
    f4ca:	1ad2      	subs	r2, r2, r3
    f4cc:	08d2      	lsrs	r2, r2, #3
		BT_ERR("LL initialization failed: %d", err);
    f4ce:	0192      	lsls	r2, r2, #6
    f4d0:	4601      	mov	r1, r0
    f4d2:	f042 0201 	orr.w	r2, r2, #1
    f4d6:	481c      	ldr	r0, [pc, #112]	; (f548 <hci_driver_open+0x90>)
    f4d8:	f009 fc98 	bl	18e0c <log_1>
}
    f4dc:	4620      	mov	r0, r4
    f4de:	b008      	add	sp, #32
    f4e0:	bdd0      	pop	{r4, r6, r7, pc}
	hci_init(NULL);
    f4e2:	f000 fe49 	bl	10178 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
    f4e6:	2600      	movs	r6, #0
    f4e8:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    f4ea:	f06f 0309 	mvn.w	r3, #9
    f4ee:	e9cd 4302 	strd	r4, r3, [sp, #8]
    f4f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
    f4f6:	e9cd 4400 	strd	r4, r4, [sp]
    f4fa:	4b14      	ldr	r3, [pc, #80]	; (f54c <hci_driver_open+0x94>)
    f4fc:	4914      	ldr	r1, [pc, #80]	; (f550 <hci_driver_open+0x98>)
    f4fe:	9404      	str	r4, [sp, #16]
    f500:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    f504:	4813      	ldr	r0, [pc, #76]	; (f554 <hci_driver_open+0x9c>)
    f506:	f007 fdcf 	bl	170a8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    f50a:	4913      	ldr	r1, [pc, #76]	; (f558 <hci_driver_open+0xa0>)
    f50c:	4811      	ldr	r0, [pc, #68]	; (f554 <hci_driver_open+0x9c>)
    f50e:	f00e f9ae 	bl	1d86e <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    f512:	f06f 0307 	mvn.w	r3, #7
    f516:	e9cd 4302 	strd	r4, r3, [sp, #8]
    f51a:	e9cd 6706 	strd	r6, r7, [sp, #24]
    f51e:	e9cd 4400 	strd	r4, r4, [sp]
    f522:	4b0e      	ldr	r3, [pc, #56]	; (f55c <hci_driver_open+0xa4>)
    f524:	490e      	ldr	r1, [pc, #56]	; (f560 <hci_driver_open+0xa8>)
    f526:	9404      	str	r4, [sp, #16]
    f528:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    f52c:	480d      	ldr	r0, [pc, #52]	; (f564 <hci_driver_open+0xac>)
    f52e:	f007 fdbb 	bl	170a8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    f532:	490d      	ldr	r1, [pc, #52]	; (f568 <hci_driver_open+0xb0>)
    f534:	480b      	ldr	r0, [pc, #44]	; (f564 <hci_driver_open+0xac>)
    f536:	f00e f99a 	bl	1d86e <z_impl_k_thread_name_set>
	return 0;
    f53a:	e7cf      	b.n	f4dc <hci_driver_open+0x24>
    f53c:	20000bbc 	.word	0x20000bbc
    f540:	0001e460 	.word	0x0001e460
    f544:	0001e408 	.word	0x0001e408
    f548:	000219e2 	.word	0x000219e2
    f54c:	0000f401 	.word	0x0000f401
    f550:	20003780 	.word	0x20003780
    f554:	200014a8 	.word	0x200014a8
    f558:	000219ff 	.word	0x000219ff
    f55c:	0000f331 	.word	0x0000f331
    f560:	20003960 	.word	0x20003960
    f564:	20001528 	.word	0x20001528
    f568:	00021a09 	.word	0x00021a09

0000f56c <cmd_complete_status>:
{
	return bt_hci_cmd_status_create(_opcode, status);
}

static struct net_buf *cmd_complete_status(uint8_t status)
{
    f56c:	b538      	push	{r3, r4, r5, lr}
	struct net_buf *buf;
	struct bt_hci_evt_cc_status *ccst;

	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    f56e:	4b07      	ldr	r3, [pc, #28]	; (f58c <cmd_complete_status+0x20>)
{
    f570:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    f572:	2101      	movs	r1, #1
    f574:	8818      	ldrh	r0, [r3, #0]
    f576:	f00a fe9f 	bl	1a2b8 <bt_hci_cmd_complete_create>
	return net_buf_simple_add(&buf->b, len);
    f57a:	2101      	movs	r1, #1
    f57c:	4604      	mov	r4, r0
    f57e:	3008      	adds	r0, #8
    f580:	f00d fe9d 	bl	1d2be <net_buf_simple_add>
	ccst = net_buf_add(buf, sizeof(*ccst));
	ccst->status = status;
    f584:	7005      	strb	r5, [r0, #0]

	return buf;
}
    f586:	4620      	mov	r0, r4
    f588:	bd38      	pop	{r3, r4, r5, pc}
    f58a:	bf00      	nop
    f58c:	20002e98 	.word	0x20002e98

0000f590 <cmd_status>:
	return bt_hci_cmd_status_create(_opcode, status);
    f590:	4b02      	ldr	r3, [pc, #8]	; (f59c <cmd_status+0xc>)
{
    f592:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    f594:	8818      	ldrh	r0, [r3, #0]
    f596:	f00a bea1 	b.w	1a2dc <bt_hci_cmd_status_create>
    f59a:	bf00      	nop
    f59c:	20002e98 	.word	0x20002e98

0000f5a0 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
    f5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f5a2:	4604      	mov	r4, r0
    f5a4:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    f5a6:	4b13      	ldr	r3, [pc, #76]	; (f5f4 <le_remote_feat_complete+0x54>)
{
    f5a8:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    f5aa:	6859      	ldr	r1, [r3, #4]
    f5ac:	2500      	movs	r5, #0
{
    f5ae:	4617      	mov	r7, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    f5b0:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
    f5b4:	462a      	mov	r2, r5
    f5b6:	4313      	orrs	r3, r2
    f5b8:	d01a      	beq.n	f5f0 <le_remote_feat_complete+0x50>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    f5ba:	4b0f      	ldr	r3, [pc, #60]	; (f5f8 <le_remote_feat_complete+0x58>)
    f5bc:	6819      	ldr	r1, [r3, #0]
    f5be:	462b      	mov	r3, r5
    f5c0:	f001 0208 	and.w	r2, r1, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    f5c4:	4313      	orrs	r3, r2
    f5c6:	d013      	beq.n	f5f0 <le_remote_feat_complete+0x50>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    f5c8:	220b      	movs	r2, #11
    f5ca:	2104      	movs	r1, #4
    f5cc:	f00c ffce 	bl	1c56c <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    f5d0:	2208      	movs	r2, #8
	sep->status = status;
    f5d2:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    f5d4:	f8a0 7001 	strh.w	r7, [r0, #1]
	if (!status) {
    f5d8:	3003      	adds	r0, #3
    f5da:	b924      	cbnz	r4, f5e6 <le_remote_feat_complete+0x46>
		memcpy(&sep->features[0],
    f5dc:	1d31      	adds	r1, r6, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    f5de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		memcpy(&sep->features[0],
    f5e2:	f00a badf 	b.w	19ba4 <memcpy>
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
    f5e6:	4629      	mov	r1, r5
}
    f5e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
    f5ec:	f00a bb05 	b.w	19bfa <memset>
}
    f5f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f5f2:	bf00      	nop
    f5f4:	20000218 	.word	0x20000218
    f5f8:	20000220 	.word	0x20000220

0000f5fc <hci_cmd_complete>:
{
    f5fc:	b538      	push	{r3, r4, r5, lr}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    f5fe:	4b06      	ldr	r3, [pc, #24]	; (f618 <hci_cmd_complete+0x1c>)
{
    f600:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    f602:	8818      	ldrh	r0, [r3, #0]
{
    f604:	460c      	mov	r4, r1
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    f606:	f00a fe57 	bl	1a2b8 <bt_hci_cmd_complete_create>
    f60a:	4621      	mov	r1, r4
    f60c:	6028      	str	r0, [r5, #0]
}
    f60e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f612:	3008      	adds	r0, #8
    f614:	f00d be53 	b.w	1d2be <net_buf_simple_add>
    f618:	20002e98 	.word	0x20002e98

0000f61c <hci_vendor_cmd_handle_common>:
{
    f61c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f61e:	3801      	subs	r0, #1
    f620:	b087      	sub	sp, #28
    f622:	4614      	mov	r4, r2
    f624:	2809      	cmp	r0, #9
    f626:	d87e      	bhi.n	f726 <hci_vendor_cmd_handle_common+0x10a>
    f628:	e8df f000 	tbb	[pc, r0]
    f62c:	7d321b05 	.word	0x7d321b05
    f630:	3e7d5b7d 	.word	0x3e7d5b7d
    f634:	7164      	.short	0x7164
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f636:	210d      	movs	r1, #13
    f638:	4610      	mov	r0, r2
    f63a:	f7ff ffdf 	bl	f5fc <hci_cmd_complete>
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    f63e:	2302      	movs	r3, #2
	rp->status = 0x00;
    f640:	2100      	movs	r1, #0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    f642:	7043      	strb	r3, [r0, #1]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
    f644:	70c3      	strb	r3, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    f646:	7183      	strb	r3, [r0, #6]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    f648:	2306      	movs	r3, #6
	rp->status = 0x00;
    f64a:	7001      	strb	r1, [r0, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    f64c:	7081      	strb	r1, [r0, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
    f64e:	7101      	strb	r1, [r0, #4]
	rp->fw_variant = 0U;
    f650:	7141      	strb	r1, [r0, #5]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    f652:	71c3      	strb	r3, [r0, #7]
    f654:	7201      	strb	r1, [r0, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
    f656:	7241      	strb	r1, [r0, #9]
    f658:	7281      	strb	r1, [r0, #10]
    f65a:	72c1      	strb	r1, [r0, #11]
    f65c:	7301      	strb	r1, [r0, #12]
	return 0;
    f65e:	2400      	movs	r4, #0
}
    f660:	e013      	b.n	f68a <hci_vendor_cmd_handle_common+0x6e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f662:	2141      	movs	r1, #65	; 0x41
    f664:	4610      	mov	r0, r2
    f666:	f7ff ffc9 	bl	f5fc <hci_cmd_complete>
	rp->status = 0x00;
    f66a:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f66c:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    f66e:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    f670:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    f674:	4621      	mov	r1, r4
    f676:	f00a fac0 	bl	19bfa <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    f67a:	786b      	ldrb	r3, [r5, #1]
    f67c:	f063 0358 	orn	r3, r3, #88	; 0x58
    f680:	706b      	strb	r3, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    f682:	78ab      	ldrb	r3, [r5, #2]
    f684:	f043 0303 	orr.w	r3, r3, #3
    f688:	70ab      	strb	r3, [r5, #2]
}
    f68a:	4620      	mov	r0, r4
    f68c:	b007      	add	sp, #28
    f68e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f690:	2109      	movs	r1, #9
    f692:	4610      	mov	r0, r2
    f694:	f7ff ffb2 	bl	f5fc <hci_cmd_complete>
	rp->status = 0x00;
    f698:	2400      	movs	r4, #0
    f69a:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    f69e:	2208      	movs	r2, #8
    f6a0:	4621      	mov	r1, r4
    f6a2:	f00a faaa 	bl	19bfa <memset>
}
    f6a6:	e7f0      	b.n	f68a <hci_vendor_cmd_handle_common+0x6e>
	const char build_info[] = HCI_VS_BUILD_INFO;
    f6a8:	4b20      	ldr	r3, [pc, #128]	; (f72c <hci_vendor_cmd_handle_common+0x110>)
    f6aa:	466a      	mov	r2, sp
    f6ac:	f103 0710 	add.w	r7, r3, #16
    f6b0:	4616      	mov	r6, r2
    f6b2:	6818      	ldr	r0, [r3, #0]
    f6b4:	6859      	ldr	r1, [r3, #4]
    f6b6:	4615      	mov	r5, r2
    f6b8:	c503      	stmia	r5!, {r0, r1}
    f6ba:	3308      	adds	r3, #8
    f6bc:	42bb      	cmp	r3, r7
    f6be:	462a      	mov	r2, r5
    f6c0:	d1f7      	bne.n	f6b2 <hci_vendor_cmd_handle_common+0x96>
    f6c2:	6818      	ldr	r0, [r3, #0]
    f6c4:	791b      	ldrb	r3, [r3, #4]
    f6c6:	6028      	str	r0, [r5, #0]
    f6c8:	712b      	strb	r3, [r5, #4]
	rp = hci_cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    f6ca:	2116      	movs	r1, #22
    f6cc:	4620      	mov	r0, r4
    f6ce:	f7ff ff95 	bl	f5fc <hci_cmd_complete>
	rp->status = 0x00;
    f6d2:	2400      	movs	r4, #0
    f6d4:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    f6d8:	2215      	movs	r2, #21
    f6da:	4631      	mov	r1, r6
    f6dc:	f00a fa62 	bl	19ba4 <memcpy>
}
    f6e0:	e7d3      	b.n	f68a <hci_vendor_cmd_handle_common+0x6e>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    f6e2:	6889      	ldr	r1, [r1, #8]
    f6e4:	2000      	movs	r0, #0
    f6e6:	f7ff fdab 	bl	f240 <ll_addr_set>
	*evt = cmd_complete_status(0x00);
    f6ea:	2000      	movs	r0, #0
    f6ec:	f7ff ff3e 	bl	f56c <cmd_complete_status>
    f6f0:	6020      	str	r0, [r4, #0]
    f6f2:	e7b4      	b.n	f65e <hci_vendor_cmd_handle_common+0x42>
	rp = hci_cmd_complete(evt, sizeof(*rp) +
    f6f4:	2118      	movs	r1, #24
    f6f6:	4610      	mov	r0, r2
    f6f8:	f7ff ff80 	bl	f5fc <hci_cmd_complete>
	rp->status = 0x00;
    f6fc:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp) +
    f6fe:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    f700:	2101      	movs	r1, #1
	rp->status = 0x00;
    f702:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    f706:	f00d fcc7 	bl	1d098 <hci_vendor_read_static_addr>
    f70a:	7068      	strb	r0, [r5, #1]
}
    f70c:	e7bd      	b.n	f68a <hci_vendor_cmd_handle_common+0x6e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f70e:	2121      	movs	r1, #33	; 0x21
    f710:	4610      	mov	r0, r2
    f712:	f7ff ff73 	bl	f5fc <hci_cmd_complete>
	rp->status = 0x00;
    f716:	4601      	mov	r1, r0
    f718:	2400      	movs	r4, #0
    f71a:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
    f71e:	3001      	adds	r0, #1
    f720:	f00d fd10 	bl	1d144 <hci_vendor_read_key_hierarchy_roots>
}
    f724:	e7b1      	b.n	f68a <hci_vendor_cmd_handle_common+0x6e>
	return 0;
    f726:	f06f 0415 	mvn.w	r4, #21
    f72a:	e7ae      	b.n	f68a <hci_vendor_cmd_handle_common+0x6e>
    f72c:	00021a2d 	.word	0x00021a2d

0000f730 <hci_cmd_handle>:
{
    f730:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    f732:	8983      	ldrh	r3, [r0, #12]
{
    f734:	b08b      	sub	sp, #44	; 0x2c
	struct net_buf *evt = NULL;
    f736:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
    f738:	2b02      	cmp	r3, #2
{
    f73a:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
    f73c:	9505      	str	r5, [sp, #20]
	if (cmd->len < sizeof(*chdr)) {
    f73e:	d80c      	bhi.n	f75a <hci_cmd_handle+0x2a>
    f740:	49be      	ldr	r1, [pc, #760]	; (fa3c <hci_cmd_handle+0x30c>)
    f742:	4bbf      	ldr	r3, [pc, #764]	; (fa40 <hci_cmd_handle+0x310>)
		BT_ERR("No HCI Command header");
    f744:	48bf      	ldr	r0, [pc, #764]	; (fa44 <hci_cmd_handle+0x314>)
    f746:	1ac9      	subs	r1, r1, r3
    f748:	08c9      	lsrs	r1, r1, #3
    f74a:	0189      	lsls	r1, r1, #6
    f74c:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid HCI CMD packet length");
    f750:	f009 fb4f 	bl	18df2 <log_0>
		return NULL;
    f754:	4628      	mov	r0, r5
}
    f756:	b00b      	add	sp, #44	; 0x2c
    f758:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    f75a:	2103      	movs	r1, #3
    f75c:	3008      	adds	r0, #8
    f75e:	f00d fe13 	bl	1d388 <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
    f762:	89a2      	ldrh	r2, [r4, #12]
    f764:	7883      	ldrb	r3, [r0, #2]
    f766:	429a      	cmp	r2, r3
    f768:	d208      	bcs.n	f77c <hci_cmd_handle+0x4c>
    f76a:	49b4      	ldr	r1, [pc, #720]	; (fa3c <hci_cmd_handle+0x30c>)
    f76c:	4bb4      	ldr	r3, [pc, #720]	; (fa40 <hci_cmd_handle+0x310>)
		BT_ERR("Invalid HCI CMD packet length");
    f76e:	48b6      	ldr	r0, [pc, #728]	; (fa48 <hci_cmd_handle+0x318>)
    f770:	1ac9      	subs	r1, r1, r3
    f772:	08c9      	lsrs	r1, r1, #3
    f774:	0189      	lsls	r1, r1, #6
    f776:	f041 0101 	orr.w	r1, r1, #1
    f77a:	e7e9      	b.n	f750 <hci_cmd_handle+0x20>
	_opcode = sys_le16_to_cpu(chdr->opcode);
    f77c:	8803      	ldrh	r3, [r0, #0]
    f77e:	4ab3      	ldr	r2, [pc, #716]	; (fa4c <hci_cmd_handle+0x31c>)
	ocf = BT_OCF(_opcode);
    f780:	f3c3 0009 	ubfx	r0, r3, #0, #10
	_opcode = sys_le16_to_cpu(chdr->opcode);
    f784:	8013      	strh	r3, [r2, #0]
	switch (BT_OGF(_opcode)) {
    f786:	f3c3 2385 	ubfx	r3, r3, #10, #6
    f78a:	2b08      	cmp	r3, #8
    f78c:	d80d      	bhi.n	f7aa <hci_cmd_handle+0x7a>
    f78e:	b17b      	cbz	r3, f7b0 <hci_cmd_handle+0x80>
    f790:	3b01      	subs	r3, #1
    f792:	2b07      	cmp	r3, #7
    f794:	d80c      	bhi.n	f7b0 <hci_cmd_handle+0x80>
    f796:	e8df f013 	tbh	[pc, r3, lsl #1]
    f79a:	000d      	.short	0x000d
    f79c:	001e000b 	.word	0x001e000b
    f7a0:	000b005d 	.word	0x000b005d
    f7a4:	000b000b 	.word	0x000b000b
    f7a8:	00e3      	.short	0x00e3
    f7aa:	2b3f      	cmp	r3, #63	; 0x3f
    f7ac:	f000 823a 	beq.w	fc24 <hci_cmd_handle+0x4f4>
		evt = cmd_status(BT_HCI_ERR_UNKNOWN_CMD);
    f7b0:	2001      	movs	r0, #1
    f7b2:	e00d      	b.n	f7d0 <hci_cmd_handle+0xa0>
	switch (ocf) {
    f7b4:	2806      	cmp	r0, #6
    f7b6:	d006      	beq.n	f7c6 <hci_cmd_handle+0x96>
    f7b8:	281d      	cmp	r0, #29
    f7ba:	d1f9      	bne.n	f7b0 <hci_cmd_handle+0x80>
	handle = sys_le16_to_cpu(cmd->handle);
    f7bc:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    f7be:	8818      	ldrh	r0, [r3, #0]
    f7c0:	f00d f940 	bl	1ca44 <ll_version_ind_send>
	*evt = cmd_status(status);
    f7c4:	e004      	b.n	f7d0 <hci_cmd_handle+0xa0>
		disconnect(cmd, evt);
    f7c6:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    f7c8:	7899      	ldrb	r1, [r3, #2]
    f7ca:	8818      	ldrh	r0, [r3, #0]
    f7cc:	f002 fb0a 	bl	11de4 <ll_terminate_ind_send>
		evt = cmd_status(BT_HCI_ERR_UNKNOWN_CMD);
    f7d0:	f7ff fede 	bl	f590 <cmd_status>
    f7d4:	e022      	b.n	f81c <hci_cmd_handle+0xec>
	switch (ocf) {
    f7d6:	282d      	cmp	r0, #45	; 0x2d
    f7d8:	d029      	beq.n	f82e <hci_cmd_handle+0xfe>
    f7da:	d81a      	bhi.n	f812 <hci_cmd_handle+0xe2>
    f7dc:	2801      	cmp	r0, #1
    f7de:	d01f      	beq.n	f820 <hci_cmd_handle+0xf0>
    f7e0:	2803      	cmp	r0, #3
    f7e2:	d1e5      	bne.n	f7b0 <hci_cmd_handle+0x80>
	event_mask = DEFAULT_EVENT_MASK;
    f7e4:	4b9a      	ldr	r3, [pc, #616]	; (fa50 <hci_cmd_handle+0x320>)
    f7e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f7ea:	f641 71ff 	movw	r1, #8191	; 0x1fff
    f7ee:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    f7f2:	4b98      	ldr	r3, [pc, #608]	; (fa54 <hci_cmd_handle+0x324>)
    f7f4:	201f      	movs	r0, #31
    f7f6:	2100      	movs	r1, #0
    f7f8:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    f7fc:	f000 ffae 	bl	1075c <ll_reset>
		*evt = cmd_complete_status(0x00);
    f800:	2000      	movs	r0, #0
    f802:	f7ff feb3 	bl	f56c <cmd_complete_status>
	conn_count = 0U;
    f806:	4b94      	ldr	r3, [pc, #592]	; (fa58 <hci_cmd_handle+0x328>)
		*evt = cmd_complete_status(0x00);
    f808:	9005      	str	r0, [sp, #20]
	conn_count = 0U;
    f80a:	2200      	movs	r2, #0
    f80c:	601a      	str	r2, [r3, #0]
	return evt;
    f80e:	9805      	ldr	r0, [sp, #20]
    f810:	e7a1      	b.n	f756 <hci_cmd_handle+0x26>
	switch (ocf) {
    f812:	2863      	cmp	r0, #99	; 0x63
    f814:	d1cc      	bne.n	f7b0 <hci_cmd_handle+0x80>
	*evt = cmd_complete_status(0x00);
    f816:	2000      	movs	r0, #0
	*evt = cmd_complete_status(status);
    f818:	f7ff fea8 	bl	f56c <cmd_complete_status>
		evt = cmd_status(BT_HCI_ERR_UNKNOWN_CMD);
    f81c:	9005      	str	r0, [sp, #20]
    f81e:	e7f6      	b.n	f80e <hci_cmd_handle+0xde>
	event_mask = sys_get_le64(cmd->events);
    f820:	68a0      	ldr	r0, [r4, #8]
    f822:	f00c fe9f 	bl	1c564 <sys_get_le64>
    f826:	4b8a      	ldr	r3, [pc, #552]	; (fa50 <hci_cmd_handle+0x320>)
	le_event_mask = sys_get_le64(cmd->events);
    f828:	e9c3 0100 	strd	r0, r1, [r3]
    f82c:	e7f3      	b.n	f816 <hci_cmd_handle+0xe6>
		read_tx_power_level(cmd, evt);
    f82e:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f830:	2104      	movs	r1, #4
    f832:	a805      	add	r0, sp, #20
	handle = sys_le16_to_cpu(cmd->handle);
    f834:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    f836:	789f      	ldrb	r7, [r3, #2]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f838:	f7ff fee0 	bl	f5fc <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    f83c:	b2ae      	uxth	r6, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f83e:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
    f840:	1cc3      	adds	r3, r0, #3
    f842:	463a      	mov	r2, r7
    f844:	4631      	mov	r1, r6
    f846:	2002      	movs	r0, #2
    f848:	f00c fe79 	bl	1c53e <ll_tx_pwr_lvl_get>
	rp->status = status;
    f84c:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    f84e:	f8a4 5001 	strh.w	r5, [r4, #1]
	if (err == -EINVAL) {
    f852:	e7dc      	b.n	f80e <hci_cmd_handle+0xde>
	switch (ocf) {
    f854:	3801      	subs	r0, #1
    f856:	2808      	cmp	r0, #8
    f858:	d8aa      	bhi.n	f7b0 <hci_cmd_handle+0x80>
    f85a:	a301      	add	r3, pc, #4	; (adr r3, f860 <hci_cmd_handle+0x130>)
    f85c:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
    f860:	0000f885 	.word	0x0000f885
    f864:	0000f8af 	.word	0x0000f8af
    f868:	0000f92f 	.word	0x0000f92f
    f86c:	0000f7b1 	.word	0x0000f7b1
    f870:	0000f7b1 	.word	0x0000f7b1
    f874:	0000f7b1 	.word	0x0000f7b1
    f878:	0000f7b1 	.word	0x0000f7b1
    f87c:	0000f7b1 	.word	0x0000f7b1
    f880:	0000f94b 	.word	0x0000f94b
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f884:	2109      	movs	r1, #9
    f886:	a805      	add	r0, sp, #20
    f888:	f7ff feb8 	bl	f5fc <hci_cmd_complete>
	rp->status = 0x00;
    f88c:	2300      	movs	r3, #0
    f88e:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    f890:	7083      	strb	r3, [r0, #2]
    f892:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    f894:	f06f 030e 	mvn.w	r3, #14
	rp->hci_version = LL_VERSION_NUMBER;
    f898:	220b      	movs	r2, #11
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    f89a:	7143      	strb	r3, [r0, #5]
    f89c:	2305      	movs	r3, #5
    f89e:	7183      	strb	r3, [r0, #6]
	rp->hci_version = LL_VERSION_NUMBER;
    f8a0:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = LL_VERSION_NUMBER;
    f8a2:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
    f8a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	dst[0] = val;
    f8a8:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
    f8aa:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
    f8ac:	e7af      	b.n	f80e <hci_cmd_handle+0xde>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f8ae:	2141      	movs	r1, #65	; 0x41
    f8b0:	a805      	add	r0, sp, #20
    f8b2:	f7ff fea3 	bl	f5fc <hci_cmd_complete>
	rp->status = 0x00;
    f8b6:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f8b8:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    f8ba:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    f8bc:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    f8c0:	f00a f99b 	bl	19bfa <memset>
	rp->commands[5] |= BIT(6) | BIT(7);
    f8c4:	79a3      	ldrb	r3, [r4, #6]
	rp->commands[26] |= BIT(6) | BIT(7);
    f8c6:	7ee2      	ldrb	r2, [r4, #27]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    f8c8:	7ea1      	ldrb	r1, [r4, #26]
	rp->commands[28] |= BIT(3);
    f8ca:	7f60      	ldrb	r0, [r4, #29]
	rp->commands[5] |= BIT(6) | BIT(7);
    f8cc:	f063 033f 	orn	r3, r3, #63	; 0x3f
    f8d0:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    f8d2:	7ae3      	ldrb	r3, [r4, #11]
    f8d4:	f043 0304 	orr.w	r3, r3, #4
    f8d8:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    f8da:	7be3      	ldrb	r3, [r4, #15]
    f8dc:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    f8e0:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    f8e2:	7c23      	ldrb	r3, [r4, #16]
    f8e4:	f043 0302 	orr.w	r3, r3, #2
    f8e8:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    f8ea:	7de3      	ldrb	r3, [r4, #23]
    f8ec:	f043 0304 	orr.w	r3, r3, #4
    f8f0:	75e3      	strb	r3, [r4, #23]
	rp->commands[27] |= BIT(0) | BIT(1);
    f8f2:	7f23      	ldrb	r3, [r4, #28]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    f8f4:	f063 0308 	orn	r3, r3, #8
    f8f8:	7723      	strb	r3, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
    f8fa:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[26] |= BIT(2) | BIT(3);
    f8fe:	f062 0230 	orn	r2, r2, #48	; 0x30
	rp->commands[33] |= BIT(4) | BIT(5);
    f902:	f043 0330 	orr.w	r3, r3, #48	; 0x30
	rp->commands[26] |= BIT(2) | BIT(3);
    f906:	76e2      	strb	r2, [r4, #27]
	rp->commands[33] |= BIT(4) | BIT(5);
    f908:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[0] |= BIT(5);
    f90c:	7862      	ldrb	r2, [r4, #1]
	rp->commands[38] |= BIT(7);
    f90e:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[28] |= BIT(3);
    f912:	f040 0008 	orr.w	r0, r0, #8
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    f916:	f061 0108 	orn	r1, r1, #8
	rp->commands[0] |= BIT(5);
    f91a:	f042 0220 	orr.w	r2, r2, #32
	rp->commands[38] |= BIT(7);
    f91e:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[28] |= BIT(3);
    f922:	7760      	strb	r0, [r4, #29]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    f924:	76a1      	strb	r1, [r4, #26]
	rp->commands[0] |= BIT(5);
    f926:	7062      	strb	r2, [r4, #1]
	rp->commands[38] |= BIT(7);
    f928:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	if (err == -EINVAL) {
    f92c:	e76f      	b.n	f80e <hci_cmd_handle+0xde>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f92e:	2109      	movs	r1, #9
    f930:	a805      	add	r0, sp, #20
    f932:	f7ff fe63 	bl	f5fc <hci_cmd_complete>
	rp->status = 0x00;
    f936:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f938:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    f93a:	2208      	movs	r2, #8
	rp->status = 0x00;
    f93c:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    f940:	f00a f95b 	bl	19bfa <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    f944:	2360      	movs	r3, #96	; 0x60
    f946:	7163      	strb	r3, [r4, #5]
	if (err == -EINVAL) {
    f948:	e761      	b.n	f80e <hci_cmd_handle+0xde>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f94a:	2107      	movs	r1, #7
    f94c:	a805      	add	r0, sp, #20
    f94e:	f7ff fe55 	bl	f5fc <hci_cmd_complete>
    f952:	4601      	mov	r1, r0
	rp->status = 0x00;
    f954:	2000      	movs	r0, #0
    f956:	f801 0b01 	strb.w	r0, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    f95a:	f7ff fc57 	bl	f20c <ll_addr_get>
	if (err == -EINVAL) {
    f95e:	e756      	b.n	f80e <hci_cmd_handle+0xde>
	switch (ocf) {
    f960:	2821      	cmp	r0, #33	; 0x21
    f962:	d84b      	bhi.n	f9fc <hci_cmd_handle+0x2cc>
    f964:	2800      	cmp	r0, #0
    f966:	f43f af23 	beq.w	f7b0 <hci_cmd_handle+0x80>
    f96a:	3801      	subs	r0, #1
    f96c:	2820      	cmp	r0, #32
    f96e:	f63f af1f 	bhi.w	f7b0 <hci_cmd_handle+0x80>
    f972:	a301      	add	r3, pc, #4	; (adr r3, f978 <hci_cmd_handle+0x248>)
    f974:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
    f978:	0000fa1b 	.word	0x0000fa1b
    f97c:	0000fa25 	.word	0x0000fa25
    f980:	0000fa5d 	.word	0x0000fa5d
    f984:	0000f7b1 	.word	0x0000f7b1
    f988:	0000fa99 	.word	0x0000fa99
    f98c:	0000fb31 	.word	0x0000fb31
    f990:	0000fb4d 	.word	0x0000fb4d
    f994:	0000fb5d 	.word	0x0000fb5d
    f998:	0000fb69 	.word	0x0000fb69
    f99c:	0000fb75 	.word	0x0000fb75
    f9a0:	0000fb7f 	.word	0x0000fb7f
    f9a4:	0000fb97 	.word	0x0000fb97
    f9a8:	0000f7b1 	.word	0x0000f7b1
    f9ac:	0000f7b1 	.word	0x0000f7b1
    f9b0:	0000faa3 	.word	0x0000faa3
    f9b4:	0000fab9 	.word	0x0000fab9
    f9b8:	0000fabf 	.word	0x0000fabf
    f9bc:	0000fac7 	.word	0x0000fac7
    f9c0:	0000fbcb 	.word	0x0000fbcb
    f9c4:	0000f7b1 	.word	0x0000f7b1
    f9c8:	0000fba7 	.word	0x0000fba7
    f9cc:	0000fbc1 	.word	0x0000fbc1
    f9d0:	0000facf 	.word	0x0000facf
    f9d4:	0000faf5 	.word	0x0000faf5
    f9d8:	0000f7b1 	.word	0x0000f7b1
    f9dc:	0000f7b1 	.word	0x0000f7b1
    f9e0:	0000f7b1 	.word	0x0000f7b1
    f9e4:	0000fb0b 	.word	0x0000fb0b
    f9e8:	0000f7b1 	.word	0x0000f7b1
    f9ec:	0000f7b1 	.word	0x0000f7b1
    f9f0:	0000f7b1 	.word	0x0000f7b1
    f9f4:	0000fbe7 	.word	0x0000fbe7
    f9f8:	0000fc15 	.word	0x0000fc15
    f9fc:	284b      	cmp	r0, #75	; 0x4b
    f9fe:	f47f aed7 	bne.w	f7b0 <hci_cmd_handle+0x80>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    fa02:	2103      	movs	r1, #3
    fa04:	a805      	add	r0, sp, #20
    fa06:	f7ff fdf9 	bl	f5fc <hci_cmd_complete>
	rp->status = 0x00;
    fa0a:	4601      	mov	r1, r0
    fa0c:	2300      	movs	r3, #0
    fa0e:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    fa12:	3001      	adds	r0, #1
    fa14:	f00c fda2 	bl	1c55c <ll_tx_pwr_get>
	if (err == -EINVAL) {
    fa18:	e6f9      	b.n	f80e <hci_cmd_handle+0xde>
	le_event_mask = sys_get_le64(cmd->events);
    fa1a:	68a0      	ldr	r0, [r4, #8]
    fa1c:	f00c fda2 	bl	1c564 <sys_get_le64>
    fa20:	4b0c      	ldr	r3, [pc, #48]	; (fa54 <hci_cmd_handle+0x324>)
    fa22:	e701      	b.n	f828 <hci_cmd_handle+0xf8>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    fa24:	2104      	movs	r1, #4
    fa26:	a805      	add	r0, sp, #20
    fa28:	f7ff fde8 	bl	f5fc <hci_cmd_complete>
	rp->status = 0x00;
    fa2c:	2300      	movs	r3, #0
    fa2e:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_TX_SIZE);
    fa30:	221b      	movs	r2, #27
    fa32:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
    fa34:	2304      	movs	r3, #4
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_TX_SIZE);
    fa36:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
    fa38:	70c3      	strb	r3, [r0, #3]
	if (err == -EINVAL) {
    fa3a:	e6e8      	b.n	f80e <hci_cmd_handle+0xde>
    fa3c:	0001e458 	.word	0x0001e458
    fa40:	0001e408 	.word	0x0001e408
    fa44:	00021a42 	.word	0x00021a42
    fa48:	00021a58 	.word	0x00021a58
    fa4c:	20002e98 	.word	0x20002e98
    fa50:	20000218 	.word	0x20000218
    fa54:	20000220 	.word	0x20000220
    fa58:	20001dac 	.word	0x20001dac
	rp = hci_cmd_complete(evt, sizeof(*rp));
    fa5c:	2109      	movs	r1, #9
    fa5e:	a805      	add	r0, sp, #20
    fa60:	f7ff fdcc 	bl	f5fc <hci_cmd_complete>
	rp->status = 0x00;
    fa64:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    fa66:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    fa68:	2208      	movs	r2, #8
	rp->status = 0x00;
    fa6a:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    fa6e:	f00a f8c4 	bl	19bfa <memset>
	sys_put_le64(ll_feat_get(), rp->features);
    fa72:	f00c fdb1 	bl	1c5d8 <ll_feat_get>
    fa76:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    fa7a:	7060      	strb	r0, [r4, #1]
	dst[1] = val >> 8;
    fa7c:	70a3      	strb	r3, [r4, #2]
	sys_put_le16(val >> 16, &dst[2]);
    fa7e:	0c00      	lsrs	r0, r0, #16
	dst[1] = val >> 8;
    fa80:	f3c1 2307 	ubfx	r3, r1, #8, #8
	dst[0] = val;
    fa84:	7161      	strb	r1, [r4, #5]
	sys_put_le16(val >> 16, &dst[2]);
    fa86:	0c09      	lsrs	r1, r1, #16
	dst[0] = val;
    fa88:	70e0      	strb	r0, [r4, #3]
    fa8a:	71e1      	strb	r1, [r4, #7]
	dst[1] = val >> 8;
    fa8c:	0a00      	lsrs	r0, r0, #8
    fa8e:	0a09      	lsrs	r1, r1, #8
    fa90:	7120      	strb	r0, [r4, #4]
    fa92:	71a3      	strb	r3, [r4, #6]
    fa94:	7221      	strb	r1, [r4, #8]
	if (err == -EINVAL) {
    fa96:	e6ba      	b.n	f80e <hci_cmd_handle+0xde>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    fa98:	68a1      	ldr	r1, [r4, #8]
    fa9a:	2001      	movs	r0, #1
    fa9c:	f7ff fbd0 	bl	f240 <ll_addr_set>
	*evt = cmd_complete_status(status);
    faa0:	e6ba      	b.n	f818 <hci_cmd_handle+0xe8>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    faa2:	2102      	movs	r1, #2
    faa4:	a805      	add	r0, sp, #20
    faa6:	f7ff fda9 	bl	f5fc <hci_cmd_complete>
	rp->status = 0x00;
    faaa:	2300      	movs	r3, #0
    faac:	7003      	strb	r3, [r0, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    faae:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    fab0:	f00d f826 	bl	1cb00 <ll_wl_size_get>
    fab4:	7060      	strb	r0, [r4, #1]
	if (err == -EINVAL) {
    fab6:	e6aa      	b.n	f80e <hci_cmd_handle+0xde>
	status = ll_wl_clear();
    fab8:	f003 fa60 	bl	12f7c <ll_wl_clear>
	*evt = cmd_complete_status(status);
    fabc:	e6ac      	b.n	f818 <hci_cmd_handle+0xe8>
	status = ll_wl_add(&cmd->addr);
    fabe:	68a0      	ldr	r0, [r4, #8]
    fac0:	f003 fa72 	bl	12fa8 <ll_wl_add>
	*evt = cmd_complete_status(status);
    fac4:	e6a8      	b.n	f818 <hci_cmd_handle+0xe8>
	status = ll_wl_remove(&cmd->addr);
    fac6:	68a0      	ldr	r0, [r4, #8]
    fac8:	f003 faa8 	bl	1301c <ll_wl_remove>
	*evt = cmd_complete_status(status);
    facc:	e6a4      	b.n	f818 <hci_cmd_handle+0xe8>
		le_encrypt(cmd, evt);
    face:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    fad0:	aa06      	add	r2, sp, #24
    fad2:	2300      	movs	r3, #0
    fad4:	f100 0110 	add.w	r1, r0, #16
    fad8:	f00d fa74 	bl	1cfc4 <ecb_encrypt>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    fadc:	2111      	movs	r1, #17
    fade:	a805      	add	r0, sp, #20
    fae0:	f7ff fd8c 	bl	f5fc <hci_cmd_complete>
	rp->status = 0x00;
    fae4:	2300      	movs	r3, #0
    fae6:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    faea:	2210      	movs	r2, #16
    faec:	a906      	add	r1, sp, #24
    faee:	f00a f859 	bl	19ba4 <memcpy>
	if (err == -EINVAL) {
    faf2:	e68c      	b.n	f80e <hci_cmd_handle+0xde>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    faf4:	2109      	movs	r1, #9
    faf6:	a805      	add	r0, sp, #20
    faf8:	f7ff fd80 	bl	f5fc <hci_cmd_complete>
	rp->status = 0x00;
    fafc:	2300      	movs	r3, #0
    fafe:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
    fb02:	2108      	movs	r1, #8
    fb04:	f003 fc34 	bl	13370 <lll_csrand_get>
	if (err == -EINVAL) {
    fb08:	e681      	b.n	f80e <hci_cmd_handle+0xde>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    fb0a:	2109      	movs	r1, #9
    fb0c:	a805      	add	r0, sp, #20
    fb0e:	f7ff fd75 	bl	f5fc <hci_cmd_complete>
	dst[0] = val;
    fb12:	22bf      	movs	r2, #191	; 0xbf
    fb14:	7042      	strb	r2, [r0, #1]
	dst[1] = val >> 8;
    fb16:	22ff      	movs	r2, #255	; 0xff
    fb18:	7082      	strb	r2, [r0, #2]
	dst[0] = val;
    fb1a:	2230      	movs	r2, #48	; 0x30
    fb1c:	70c2      	strb	r2, [r0, #3]
	dst[1] = val >> 8;
    fb1e:	22ec      	movs	r2, #236	; 0xec
    fb20:	7102      	strb	r2, [r0, #4]
	dst[0] = val;
    fb22:	22c0      	movs	r2, #192	; 0xc0
	rp->status = 0x00;
    fb24:	2300      	movs	r3, #0
    fb26:	7142      	strb	r2, [r0, #5]
	dst[1] = val >> 8;
    fb28:	2201      	movs	r2, #1
    fb2a:	7003      	strb	r3, [r0, #0]
    fb2c:	7182      	strb	r2, [r0, #6]
    fb2e:	e6bb      	b.n	f8a8 <hci_cmd_handle+0x178>
		le_set_adv_param(cmd, evt);
    fb30:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
    fb32:	7ba5      	ldrb	r5, [r4, #14]
    fb34:	79a3      	ldrb	r3, [r4, #6]
    fb36:	7962      	ldrb	r2, [r4, #5]
    fb38:	7921      	ldrb	r1, [r4, #4]
    fb3a:	8820      	ldrh	r0, [r4, #0]
    fb3c:	9502      	str	r5, [sp, #8]
    fb3e:	7b65      	ldrb	r5, [r4, #13]
    fb40:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
    fb42:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
    fb44:	9400      	str	r4, [sp, #0]
    fb46:	f001 fd6d 	bl	11624 <ll_adv_params_set>
	*evt = cmd_complete_status(status);
    fb4a:	e665      	b.n	f818 <hci_cmd_handle+0xe8>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    fb4c:	2102      	movs	r1, #2
    fb4e:	a805      	add	r0, sp, #20
    fb50:	f7ff fd54 	bl	f5fc <hci_cmd_complete>
	rp->status = 0x00;
    fb54:	2300      	movs	r3, #0
    fb56:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
    fb58:	7043      	strb	r3, [r0, #1]
	if (err == -EINVAL) {
    fb5a:	e658      	b.n	f80e <hci_cmd_handle+0xde>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
    fb5c:	68a1      	ldr	r1, [r4, #8]
    fb5e:	f811 0b01 	ldrb.w	r0, [r1], #1
    fb62:	f001 fe9d 	bl	118a0 <ll_adv_data_set>
	*evt = cmd_complete_status(status);
    fb66:	e657      	b.n	f818 <hci_cmd_handle+0xe8>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
    fb68:	68a1      	ldr	r1, [r4, #8]
    fb6a:	f811 0b01 	ldrb.w	r0, [r1], #1
    fb6e:	f001 fe9f 	bl	118b0 <ll_adv_scan_rsp_set>
	*evt = cmd_complete_status(status);
    fb72:	e651      	b.n	f818 <hci_cmd_handle+0xe8>
	status = ll_adv_enable(cmd->enable);
    fb74:	68a3      	ldr	r3, [r4, #8]
    fb76:	7818      	ldrb	r0, [r3, #0]
    fb78:	f7f0 fc7a 	bl	470 <ll_adv_enable>
	*evt = cmd_complete_status(status);
    fb7c:	e64c      	b.n	f818 <hci_cmd_handle+0xe8>
		le_set_scan_param(cmd, evt);
    fb7e:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    fb80:	7963      	ldrb	r3, [r4, #5]
    fb82:	f8b4 2003 	ldrh.w	r2, [r4, #3]
    fb86:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    fb8a:	7820      	ldrb	r0, [r4, #0]
    fb8c:	79a4      	ldrb	r4, [r4, #6]
    fb8e:	9400      	str	r4, [sp, #0]
    fb90:	f7f0 feae 	bl	8f0 <ll_scan_params_set>
	*evt = cmd_complete_status(status);
    fb94:	e640      	b.n	f818 <hci_cmd_handle+0xe8>
	status = ll_scan_enable(cmd->enable);
    fb96:	68a3      	ldr	r3, [r4, #8]
    fb98:	7818      	ldrb	r0, [r3, #0]
    fb9a:	f00c fdfe 	bl	1c79a <ll_scan_enable>
	*evt = cmd_complete_status(status);
    fb9e:	280c      	cmp	r0, #12
    fba0:	bf08      	it	eq
    fba2:	2000      	moveq	r0, #0
    fba4:	e638      	b.n	f818 <hci_cmd_handle+0xe8>
	handle = sys_le16_to_cpu(cmd->handle);
    fba6:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    fba8:	2108      	movs	r1, #8
    fbaa:	a805      	add	r0, sp, #20
	handle = sys_le16_to_cpu(cmd->handle);
    fbac:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    fbae:	f7ff fd25 	bl	f5fc <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    fbb2:	b2ae      	uxth	r6, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
    fbb4:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    fbb6:	1cc1      	adds	r1, r0, #3
    fbb8:	4630      	mov	r0, r6
    fbba:	f00c ff11 	bl	1c9e0 <ll_chm_get>
    fbbe:	e645      	b.n	f84c <hci_cmd_handle+0x11c>
	handle = sys_le16_to_cpu(cmd->handle);
    fbc0:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
    fbc2:	8818      	ldrh	r0, [r3, #0]
    fbc4:	f00c ff23 	bl	1ca0e <ll_feature_req_send>
	*evt = cmd_status(status);
    fbc8:	e602      	b.n	f7d0 <hci_cmd_handle+0xa0>
		le_conn_update(cmd, evt);
    fbca:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
    fbcc:	8911      	ldrh	r1, [r2, #8]
    fbce:	8853      	ldrh	r3, [r2, #2]
    fbd0:	8810      	ldrh	r0, [r2, #0]
    fbd2:	9102      	str	r1, [sp, #8]
    fbd4:	88d1      	ldrh	r1, [r2, #6]
    fbd6:	9101      	str	r1, [sp, #4]
    fbd8:	8892      	ldrh	r2, [r2, #4]
    fbda:	9200      	str	r2, [sp, #0]
    fbdc:	2200      	movs	r2, #0
    fbde:	4611      	mov	r1, r2
    fbe0:	f00c fe75 	bl	1c8ce <ll_conn_update>
	*evt = cmd_status(status);
    fbe4:	e5f4      	b.n	f7d0 <hci_cmd_handle+0xa0>
		le_conn_param_req_reply(cmd, evt);
    fbe6:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    fbe8:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    fbea:	8815      	ldrh	r5, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    fbec:	8853      	ldrh	r3, [r2, #2]
    fbee:	9102      	str	r1, [sp, #8]
    fbf0:	88d1      	ldrh	r1, [r2, #6]
    fbf2:	9101      	str	r1, [sp, #4]
    fbf4:	8892      	ldrh	r2, [r2, #4]
    fbf6:	9200      	str	r2, [sp, #0]
    fbf8:	2200      	movs	r2, #0
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
    fbfa:	2102      	movs	r1, #2
    fbfc:	b2a8      	uxth	r0, r5
    fbfe:	f00c fe66 	bl	1c8ce <ll_conn_update>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    fc02:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
    fc04:	4604      	mov	r4, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    fc06:	a805      	add	r0, sp, #20
    fc08:	f7ff fcf8 	bl	f5fc <hci_cmd_complete>
	rp->status = status;
    fc0c:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    fc0e:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (err == -EINVAL) {
    fc12:	e5fc      	b.n	f80e <hci_cmd_handle+0xde>
		le_conn_param_req_neg_reply(cmd, evt);
    fc14:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    fc16:	881d      	ldrh	r5, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
    fc18:	789a      	ldrb	r2, [r3, #2]
    fc1a:	2300      	movs	r3, #0
    fc1c:	e9cd 3301 	strd	r3, r3, [sp, #4]
    fc20:	9300      	str	r3, [sp, #0]
    fc22:	e7ea      	b.n	fbfa <hci_cmd_handle+0x4ca>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
    fc24:	aa05      	add	r2, sp, #20
    fc26:	4621      	mov	r1, r4
    fc28:	f7ff fcf8 	bl	f61c <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
    fc2c:	3016      	adds	r0, #22
    fc2e:	f43f adbf 	beq.w	f7b0 <hci_cmd_handle+0x80>
    fc32:	e5ec      	b.n	f80e <hci_cmd_handle+0xde>

0000fc34 <hci_acl_handle>:
{
    fc34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
    fc38:	2300      	movs	r3, #0
    fc3a:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    fc3c:	8983      	ldrh	r3, [r0, #12]
    fc3e:	2b03      	cmp	r3, #3
{
    fc40:	4605      	mov	r5, r0
    fc42:	460e      	mov	r6, r1
	if (buf->len < sizeof(*acl)) {
    fc44:	d80c      	bhi.n	fc60 <hci_acl_handle+0x2c>
    fc46:	4945      	ldr	r1, [pc, #276]	; (fd5c <hci_acl_handle+0x128>)
    fc48:	4b45      	ldr	r3, [pc, #276]	; (fd60 <hci_acl_handle+0x12c>)
		BT_ERR("No HCI ACL header");
    fc4a:	4846      	ldr	r0, [pc, #280]	; (fd64 <hci_acl_handle+0x130>)
    fc4c:	1ac9      	subs	r1, r1, r3
    fc4e:	08c9      	lsrs	r1, r1, #3
    fc50:	0189      	lsls	r1, r1, #6
    fc52:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid HCI ACL packet length");
    fc56:	f009 f8cc 	bl	18df2 <log_0>
		return -EINVAL;
    fc5a:	f06f 0015 	mvn.w	r0, #21
    fc5e:	e036      	b.n	fcce <hci_acl_handle+0x9a>
    fc60:	2104      	movs	r1, #4
    fc62:	3008      	adds	r0, #8
    fc64:	f00d fb90 	bl	1d388 <net_buf_simple_pull_mem>
	if (buf->len < len) {
    fc68:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
    fc6a:	8847      	ldrh	r7, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
    fc6c:	f8b0 9000 	ldrh.w	r9, [r0]
	if (buf->len < len) {
    fc70:	42bb      	cmp	r3, r7
    fc72:	d208      	bcs.n	fc86 <hci_acl_handle+0x52>
    fc74:	4939      	ldr	r1, [pc, #228]	; (fd5c <hci_acl_handle+0x128>)
    fc76:	4b3a      	ldr	r3, [pc, #232]	; (fd60 <hci_acl_handle+0x12c>)
		BT_ERR("Invalid HCI ACL packet length");
    fc78:	483b      	ldr	r0, [pc, #236]	; (fd68 <hci_acl_handle+0x134>)
    fc7a:	1ac9      	subs	r1, r1, r3
    fc7c:	08c9      	lsrs	r1, r1, #3
    fc7e:	0189      	lsls	r1, r1, #6
    fc80:	f041 0101 	orr.w	r1, r1, #1
    fc84:	e7e7      	b.n	fc56 <hci_acl_handle+0x22>
	if (len > CONFIG_BT_BUF_ACL_TX_SIZE) {
    fc86:	2f1b      	cmp	r7, #27
    fc88:	d908      	bls.n	fc9c <hci_acl_handle+0x68>
    fc8a:	4934      	ldr	r1, [pc, #208]	; (fd5c <hci_acl_handle+0x128>)
    fc8c:	4b34      	ldr	r3, [pc, #208]	; (fd60 <hci_acl_handle+0x12c>)
		BT_ERR("Invalid HCI ACL Data length");
    fc8e:	4837      	ldr	r0, [pc, #220]	; (fd6c <hci_acl_handle+0x138>)
    fc90:	1ac9      	subs	r1, r1, r3
    fc92:	08c9      	lsrs	r1, r1, #3
    fc94:	0189      	lsls	r1, r1, #6
    fc96:	f041 0101 	orr.w	r1, r1, #1
    fc9a:	e7dc      	b.n	fc56 <hci_acl_handle+0x22>
	node_tx = ll_tx_mem_acquire();
    fc9c:	f002 f85c 	bl	11d58 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    fca0:	ea4f 3819 	mov.w	r8, r9, lsr #12
	if (!node_tx) {
    fca4:	4604      	mov	r4, r0
    fca6:	bb58      	cbnz	r0, fd00 <hci_acl_handle+0xcc>
    fca8:	492d      	ldr	r1, [pc, #180]	; (fd60 <hci_acl_handle+0x12c>)
    fcaa:	4b2c      	ldr	r3, [pc, #176]	; (fd5c <hci_acl_handle+0x128>)
		BT_ERR("Tx Buffer Overflow");
    fcac:	4830      	ldr	r0, [pc, #192]	; (fd70 <hci_acl_handle+0x13c>)
    fcae:	1a5b      	subs	r3, r3, r1
    fcb0:	08db      	lsrs	r3, r3, #3
    fcb2:	019b      	lsls	r3, r3, #6
    fcb4:	f043 0101 	orr.w	r1, r3, #1
    fcb8:	f009 f89b 	bl	18df2 <log_0>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    fcbc:	4b2d      	ldr	r3, [pc, #180]	; (fd74 <hci_acl_handle+0x140>)
    fcbe:	6819      	ldr	r1, [r3, #0]
    fcc0:	4623      	mov	r3, r4
    fcc2:	f001 7200 	and.w	r2, r1, #33554432	; 0x2000000
    fcc6:	4313      	orrs	r3, r2
    fcc8:	d103      	bne.n	fcd2 <hci_acl_handle+0x9e>
		return -ENOBUFS;
    fcca:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    fcce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    fcd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    fcd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fcda:	2001      	movs	r0, #1
    fcdc:	f7f4 fbfa 	bl	44d4 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
    fce0:	2102      	movs	r1, #2
    fce2:	6030      	str	r0, [r6, #0]
    fce4:	3008      	adds	r0, #8
    fce6:	f00d faea 	bl	1d2be <net_buf_simple_add>
	hdr->len = len;
    fcea:	2401      	movs	r4, #1
	hdr->evt = evt;
    fcec:	231a      	movs	r3, #26
    fcee:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    fcf0:	7044      	strb	r4, [r0, #1]
    fcf2:	6830      	ldr	r0, [r6, #0]
    fcf4:	4621      	mov	r1, r4
    fcf6:	3008      	adds	r0, #8
    fcf8:	f00d fae1 	bl	1d2be <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    fcfc:	7004      	strb	r4, [r0, #0]
    fcfe:	e7e4      	b.n	fcca <hci_acl_handle+0x96>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
    fd00:	ea5f 0398 	movs.w	r3, r8, lsr #2
    fd04:	d1a9      	bne.n	fc5a <hci_acl_handle+0x26>
	switch (bt_acl_flags_pb(flags)) {
    fd06:	f1b8 0f00 	cmp.w	r8, #0
    fd0a:	d006      	beq.n	fd1a <hci_acl_handle+0xe6>
    fd0c:	f1b8 0f01 	cmp.w	r8, #1
    fd10:	d1a3      	bne.n	fc5a <hci_acl_handle+0x26>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    fd12:	7903      	ldrb	r3, [r0, #4]
    fd14:	f368 0301 	bfi	r3, r8, #0, #2
    fd18:	e003      	b.n	fd22 <hci_acl_handle+0xee>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    fd1a:	7903      	ldrb	r3, [r0, #4]
    fd1c:	2202      	movs	r2, #2
    fd1e:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data->len = len;
    fd22:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    fd24:	68a9      	ldr	r1, [r5, #8]
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    fd26:	7123      	strb	r3, [r4, #4]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    fd28:	463a      	mov	r2, r7
    fd2a:	1de0      	adds	r0, r4, #7
    fd2c:	f009 ff3a 	bl	19ba4 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    fd30:	4621      	mov	r1, r4
    fd32:	f3c9 000b 	ubfx	r0, r9, #0, #12
    fd36:	f002 f81b 	bl	11d70 <ll_tx_mem_enqueue>
    fd3a:	2800      	cmp	r0, #0
    fd3c:	d0c7      	beq.n	fcce <hci_acl_handle+0x9a>
    fd3e:	4b08      	ldr	r3, [pc, #32]	; (fd60 <hci_acl_handle+0x12c>)
    fd40:	4906      	ldr	r1, [pc, #24]	; (fd5c <hci_acl_handle+0x128>)
		BT_ERR("Invalid Tx Enqueue");
    fd42:	480d      	ldr	r0, [pc, #52]	; (fd78 <hci_acl_handle+0x144>)
    fd44:	1ac9      	subs	r1, r1, r3
    fd46:	08c9      	lsrs	r1, r1, #3
    fd48:	0189      	lsls	r1, r1, #6
    fd4a:	f041 0101 	orr.w	r1, r1, #1
    fd4e:	f009 f850 	bl	18df2 <log_0>
		ll_tx_mem_release(node_tx);
    fd52:	4620      	mov	r0, r4
    fd54:	f002 f806 	bl	11d64 <ll_tx_mem_release>
		return -EINVAL;
    fd58:	e77f      	b.n	fc5a <hci_acl_handle+0x26>
    fd5a:	bf00      	nop
    fd5c:	0001e458 	.word	0x0001e458
    fd60:	0001e408 	.word	0x0001e408
    fd64:	00021a76 	.word	0x00021a76
    fd68:	00021a88 	.word	0x00021a88
    fd6c:	00021aa6 	.word	0x00021aa6
    fd70:	00021ac2 	.word	0x00021ac2
    fd74:	20000218 	.word	0x20000218
    fd78:	00021ad5 	.word	0x00021ad5

0000fd7c <hci_disconn_complete_encode>:
{
    fd7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    fd7e:	4b0f      	ldr	r3, [pc, #60]	; (fdbc <hci_disconn_complete_encode+0x40>)
    fd80:	681b      	ldr	r3, [r3, #0]
    fd82:	2700      	movs	r7, #0
{
    fd84:	4605      	mov	r5, r0
    fd86:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    fd88:	f003 0010 	and.w	r0, r3, #16
    fd8c:	4639      	mov	r1, r7
    fd8e:	ea50 0301 	orrs.w	r3, r0, r1
    fd92:	d011      	beq.n	fdb8 <hci_disconn_complete_encode+0x3c>
    fd94:	f102 0408 	add.w	r4, r2, #8
    fd98:	2102      	movs	r1, #2
    fd9a:	4620      	mov	r0, r4
    fd9c:	f00d fa8f 	bl	1d2be <net_buf_simple_add>
	hdr->evt = evt;
    fda0:	2305      	movs	r3, #5
	hdr->len = len;
    fda2:	2104      	movs	r1, #4
	hdr->evt = evt;
    fda4:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    fda6:	7041      	strb	r1, [r0, #1]
    fda8:	4620      	mov	r0, r4
    fdaa:	f00d fa88 	bl	1d2be <net_buf_simple_add>
	ep->status = 0x00;
    fdae:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    fdb0:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
    fdb4:	782b      	ldrb	r3, [r5, #0]
    fdb6:	70c3      	strb	r3, [r0, #3]
}
    fdb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fdba:	bf00      	nop
    fdbc:	20000218 	.word	0x20000218

0000fdc0 <hci_disconn_complete_process>:
	conn_count--;
    fdc0:	4a02      	ldr	r2, [pc, #8]	; (fdcc <hci_disconn_complete_process+0xc>)
    fdc2:	6813      	ldr	r3, [r2, #0]
    fdc4:	3b01      	subs	r3, #1
    fdc6:	6013      	str	r3, [r2, #0]
}
    fdc8:	4770      	bx	lr
    fdca:	bf00      	nop
    fdcc:	20001dac 	.word	0x20001dac

0000fdd0 <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    fdd0:	7f03      	ldrb	r3, [r0, #28]
    fdd2:	f003 0303 	and.w	r3, r3, #3
    fdd6:	3b01      	subs	r3, #1
    fdd8:	2b01      	cmp	r3, #1
{
    fdda:	b570      	push	{r4, r5, r6, lr}
    fddc:	4604      	mov	r4, r0
	switch (pdu_data->ll_id) {
    fdde:	d81c      	bhi.n	fe1a <hci_acl_encode+0x4a>
    fde0:	f101 0508 	add.w	r5, r1, #8
	handle = node_rx->hdr.handle;
    fde4:	88c6      	ldrh	r6, [r0, #6]
    fde6:	2104      	movs	r1, #4
    fde8:	4628      	mov	r0, r5
    fdea:	f00d fa68 	bl	1d2be <net_buf_simple_add>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    fdee:	7f23      	ldrb	r3, [r4, #28]
    fdf0:	f003 0303 	and.w	r3, r3, #3
    fdf4:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    fdf6:	bf0c      	ite	eq
    fdf8:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    fdfc:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
    fe00:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
    fe02:	7f61      	ldrb	r1, [r4, #29]
    fe04:	8041      	strh	r1, [r0, #2]
    fe06:	4628      	mov	r0, r5
    fe08:	f00d fa59 	bl	1d2be <net_buf_simple_add>
		data = (void *)net_buf_add(buf, pdu_data->len);
		memcpy(data, pdu_data->lldata, pdu_data->len);
    fe0c:	7f62      	ldrb	r2, [r4, #29]
    fe0e:	f104 011f 	add.w	r1, r4, #31

	default:
		LL_ASSERT(0);
		break;
	}
}
    fe12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
    fe16:	f009 bec5 	b.w	19ba4 <memcpy>
		LL_ASSERT(0);
    fe1a:	4a07      	ldr	r2, [pc, #28]	; (fe38 <hci_acl_encode+0x68>)
    fe1c:	4907      	ldr	r1, [pc, #28]	; (fe3c <hci_acl_encode+0x6c>)
    fe1e:	4808      	ldr	r0, [pc, #32]	; (fe40 <hci_acl_encode+0x70>)
    fe20:	f641 036b 	movw	r3, #6251	; 0x186b
    fe24:	f008 fba0 	bl	18568 <printk>
    fe28:	4040      	eors	r0, r0
    fe2a:	f380 8811 	msr	BASEPRI, r0
    fe2e:	f04f 0003 	mov.w	r0, #3
    fe32:	df02      	svc	2
}
    fe34:	bd70      	pop	{r4, r5, r6, pc}
    fe36:	bf00      	nop
    fe38:	00021ae8 	.word	0x00021ae8
    fe3c:	00020b9a 	.word	0x00020b9a
    fe40:	0001f734 	.word	0x0001f734

0000fe44 <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
    fe44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fe48:	4604      	mov	r4, r0
    fe4a:	b086      	sub	sp, #24
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    fe4c:	7923      	ldrb	r3, [r4, #4]
    fe4e:	88e7      	ldrh	r7, [r4, #6]
    fe50:	2b03      	cmp	r3, #3
{
    fe52:	460e      	mov	r6, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
    fe54:	f100 001c 	add.w	r0, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    fe58:	f000 8111 	beq.w	1007e <CONFIG_PM_SRAM_SIZE+0x7e>
	switch (node_rx->hdr.type) {
    fe5c:	2b15      	cmp	r3, #21
    fe5e:	f000 8107 	beq.w	10070 <CONFIG_PM_SRAM_SIZE+0x70>
    fe62:	d812      	bhi.n	fe8a <hci_evt_encode+0x46>
    fe64:	2b05      	cmp	r3, #5
    fe66:	d034      	beq.n	fed2 <hci_evt_encode+0x8e>
    fe68:	2b14      	cmp	r3, #20
    fe6a:	f000 80bc 	beq.w	ffe6 <hci_evt_encode+0x1a2>
		LL_ASSERT(0);
    fe6e:	f241 7376 	movw	r3, #6006	; 0x1776
		LL_ASSERT(0);
    fe72:	4aab      	ldr	r2, [pc, #684]	; (10120 <CONFIG_PM_SRAM_SIZE+0x120>)
    fe74:	49ab      	ldr	r1, [pc, #684]	; (10124 <CONFIG_PM_SRAM_SIZE+0x124>)
    fe76:	48ac      	ldr	r0, [pc, #688]	; (10128 <CONFIG_PM_SRAM_SIZE+0x128>)
    fe78:	f008 fb76 	bl	18568 <printk>
    fe7c:	4040      	eors	r0, r0
    fe7e:	f380 8811 	msr	BASEPRI, r0
    fe82:	f04f 0003 	mov.w	r0, #3
    fe86:	df02      	svc	2
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    fe88:	e072      	b.n	ff70 <hci_evt_encode+0x12c>
	switch (node_rx->hdr.type) {
    fe8a:	2b16      	cmp	r3, #22
    fe8c:	d1ef      	bne.n	fe6e <hci_evt_encode+0x2a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    fe8e:	4ba7      	ldr	r3, [pc, #668]	; (1012c <CONFIG_PM_SRAM_SIZE+0x12c>)
    fe90:	6858      	ldr	r0, [r3, #4]
    fe92:	2100      	movs	r1, #0
    fe94:	460a      	mov	r2, r1
    fe96:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    fe9a:	4313      	orrs	r3, r2
    fe9c:	d068      	beq.n	ff70 <hci_evt_encode+0x12c>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    fe9e:	4ba4      	ldr	r3, [pc, #656]	; (10130 <CONFIG_PM_SRAM_SIZE+0x130>)
    fea0:	6818      	ldr	r0, [r3, #0]
    fea2:	460b      	mov	r3, r1
    fea4:	f000 0204 	and.w	r2, r0, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    fea8:	4313      	orrs	r3, r2
    feaa:	d061      	beq.n	ff70 <hci_evt_encode+0x12c>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    feac:	2209      	movs	r2, #9
    feae:	2103      	movs	r1, #3
    feb0:	4630      	mov	r0, r6
    feb2:	f00c fb5b 	bl	1c56c <meta_evt>
	sep->status = cu->status;
    feb6:	7f23      	ldrb	r3, [r4, #28]
    feb8:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
    feba:	8be3      	ldrh	r3, [r4, #30]
    febc:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
    fec0:	8c23      	ldrh	r3, [r4, #32]
    fec2:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
    fec6:	8c63      	ldrh	r3, [r4, #34]	; 0x22
	sep->handle = sys_cpu_to_le16(handle);
    fec8:	f8a0 7001 	strh.w	r7, [r0, #1]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
    fecc:	f8a0 3007 	strh.w	r3, [r0, #7]
    fed0:	e04e      	b.n	ff70 <hci_evt_encode+0x12c>
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    fed2:	4b98      	ldr	r3, [pc, #608]	; (10134 <CONFIG_PM_SRAM_SIZE+0x134>)
	rssi = -(node_rx->hdr.rx_ftr.rssi);
    fed4:	7e27      	ldrb	r7, [r4, #24]
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    fed6:	6818      	ldr	r0, [r3, #0]
    fed8:	889a      	ldrh	r2, [r3, #4]
    feda:	799b      	ldrb	r3, [r3, #6]
    fedc:	f88d 3016 	strb.w	r3, [sp, #22]
	rssi = -(node_rx->hdr.rx_ftr.rssi);
    fee0:	4b92      	ldr	r3, [pc, #584]	; (1012c <CONFIG_PM_SRAM_SIZE+0x12c>)
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    fee2:	9004      	str	r0, [sp, #16]
	direct = node_rx->hdr.rx_ftr.direct;
    fee4:	7e65      	ldrb	r5, [r4, #25]
    fee6:	6858      	ldr	r0, [r3, #4]
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    fee8:	f8ad 2014 	strh.w	r2, [sp, #20]
	rssi = -(node_rx->hdr.rx_ftr.rssi);
    feec:	427f      	negs	r7, r7
    feee:	2100      	movs	r1, #0
    fef0:	b27f      	sxtb	r7, r7
	if (direct) {
    fef2:	460a      	mov	r2, r1
    fef4:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    fef8:	2d00      	cmp	r5, #0
    fefa:	d03c      	beq.n	ff76 <hci_evt_encode+0x132>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    fefc:	4313      	orrs	r3, r2
    fefe:	d037      	beq.n	ff70 <hci_evt_encode+0x12c>
	    !(le_event_mask & BT_EVT_MASK_LE_DIRECT_ADV_REPORT)) {
    ff00:	4b8b      	ldr	r3, [pc, #556]	; (10130 <CONFIG_PM_SRAM_SIZE+0x130>)
    ff02:	6818      	ldr	r0, [r3, #0]
    ff04:	460b      	mov	r3, r1
    ff06:	f400 6280 	and.w	r2, r0, #1024	; 0x400
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ff0a:	4313      	orrs	r3, r2
    ff0c:	d030      	beq.n	ff70 <hci_evt_encode+0x12c>
	LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    ff0e:	7f23      	ldrb	r3, [r4, #28]
    ff10:	f003 030f 	and.w	r3, r3, #15
    ff14:	2b01      	cmp	r3, #1
    ff16:	d00c      	beq.n	ff32 <hci_evt_encode+0xee>
    ff18:	4a81      	ldr	r2, [pc, #516]	; (10120 <CONFIG_PM_SRAM_SIZE+0x120>)
    ff1a:	4987      	ldr	r1, [pc, #540]	; (10138 <CONFIG_PM_SRAM_SIZE+0x138>)
    ff1c:	4882      	ldr	r0, [pc, #520]	; (10128 <CONFIG_PM_SRAM_SIZE+0x128>)
    ff1e:	f241 1375 	movw	r3, #4469	; 0x1175
    ff22:	f008 fb21 	bl	18568 <printk>
    ff26:	4040      	eors	r0, r0
    ff28:	f380 8811 	msr	BASEPRI, r0
    ff2c:	f04f 0003 	mov.w	r0, #3
    ff30:	df02      	svc	2
	drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    ff32:	2211      	movs	r2, #17
    ff34:	210b      	movs	r1, #11
    ff36:	4630      	mov	r0, r6
    ff38:	f00c fb18 	bl	1c56c <meta_evt>
	drp->num_reports = 1U;
    ff3c:	2301      	movs	r3, #1
    ff3e:	7003      	strb	r3, [r0, #0]
	dir_info->evt_type = BT_HCI_ADV_DIRECT_IND;
    ff40:	7043      	strb	r3, [r0, #1]
		dir_info->addr.type = adv->tx_addr;
    ff42:	7f23      	ldrb	r3, [r4, #28]
    ff44:	f3c3 1380 	ubfx	r3, r3, #6, #1
	drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    ff48:	4605      	mov	r5, r0
		dir_info->addr.type = adv->tx_addr;
    ff4a:	7083      	strb	r3, [r0, #2]
		memcpy(&dir_info->addr.a.val[0], &adv->direct_ind.adv_addr[0],
    ff4c:	2206      	movs	r2, #6
    ff4e:	f104 011e 	add.w	r1, r4, #30
    ff52:	3003      	adds	r0, #3
    ff54:	f009 fe26 	bl	19ba4 <memcpy>
	dir_info->dir_addr.type = adv->rx_addr;
    ff58:	7f23      	ldrb	r3, [r4, #28]
    ff5a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    ff5e:	726b      	strb	r3, [r5, #9]
	memcpy(&dir_info->dir_addr.a.val[0],
    ff60:	2206      	movs	r2, #6
    ff62:	f104 0124 	add.w	r1, r4, #36	; 0x24
    ff66:	f105 000a 	add.w	r0, r5, #10
    ff6a:	f009 fe1b 	bl	19ba4 <memcpy>
	dir_info->rssi = rssi;
    ff6e:	742f      	strb	r7, [r5, #16]
}
    ff70:	b006      	add	sp, #24
    ff72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ff76:	4313      	orrs	r3, r2
    ff78:	d0fa      	beq.n	ff70 <hci_evt_encode+0x12c>
	    !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
    ff7a:	4b6d      	ldr	r3, [pc, #436]	; (10130 <CONFIG_PM_SRAM_SIZE+0x130>)
    ff7c:	6819      	ldr	r1, [r3, #0]
    ff7e:	462b      	mov	r3, r5
    ff80:	f001 0202 	and.w	r2, r1, #2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ff84:	4313      	orrs	r3, r2
    ff86:	d0f3      	beq.n	ff70 <hci_evt_encode+0x12c>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    ff88:	7f23      	ldrb	r3, [r4, #28]
    ff8a:	f003 030f 	and.w	r3, r3, #15
    ff8e:	2b01      	cmp	r3, #1
		data_len = (adv->len - BDADDR_SIZE);
    ff90:	bf1e      	ittt	ne
    ff92:	7f65      	ldrbne	r5, [r4, #29]
    ff94:	3d06      	subne	r5, #6
    ff96:	b2ed      	uxtbne	r5, r5
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    ff98:	f105 020b 	add.w	r2, r5, #11
    ff9c:	b2d2      	uxtb	r2, r2
    ff9e:	2102      	movs	r1, #2
    ffa0:	4630      	mov	r0, r6
    ffa2:	f00c fae3 	bl	1c56c <meta_evt>
	sep->num_reports = 1U;
    ffa6:	2301      	movs	r3, #1
    ffa8:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    ffaa:	7f23      	ldrb	r3, [r4, #28]
    ffac:	aa06      	add	r2, sp, #24
    ffae:	f003 030f 	and.w	r3, r3, #15
    ffb2:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    ffb4:	4606      	mov	r6, r0
	adv_info->evt_type = c_adv_type[adv->type];
    ffb6:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    ffba:	7043      	strb	r3, [r0, #1]
		adv_info->addr.type = adv->tx_addr;
    ffbc:	7f23      	ldrb	r3, [r4, #28]
    ffbe:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ffc2:	7083      	strb	r3, [r0, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    ffc4:	2206      	movs	r2, #6
    ffc6:	f104 011e 	add.w	r1, r4, #30
    ffca:	3003      	adds	r0, #3
    ffcc:	f009 fdea 	bl	19ba4 <memcpy>
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    ffd0:	360a      	adds	r6, #10
	adv_info->length = data_len;
    ffd2:	f806 5c01 	strb.w	r5, [r6, #-1]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    ffd6:	462a      	mov	r2, r5
    ffd8:	f104 0124 	add.w	r1, r4, #36	; 0x24
    ffdc:	4630      	mov	r0, r6
    ffde:	f009 fde1 	bl	19ba4 <memcpy>
	*prssi = rssi;
    ffe2:	5577      	strb	r7, [r6, r5]
    ffe4:	e7c4      	b.n	ff70 <hci_evt_encode+0x12c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ffe6:	4b51      	ldr	r3, [pc, #324]	; (1012c <CONFIG_PM_SRAM_SIZE+0x12c>)
    ffe8:	6858      	ldr	r0, [r3, #4]
    ffea:	2100      	movs	r1, #0
    ffec:	460a      	mov	r2, r1
    ffee:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    fff2:	4313      	orrs	r3, r2
    fff4:	d0bc      	beq.n	ff70 <hci_evt_encode+0x12c>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    fff6:	4b4e      	ldr	r3, [pc, #312]	; (10130 <CONFIG_PM_SRAM_SIZE+0x130>)
    fff8:	6818      	ldr	r0, [r3, #0]
    fffa:	460b      	mov	r3, r1
    fffc:	f000 0201 	and.w	r2, r0, #1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   10000:	4313      	orrs	r3, r2
   10002:	d0b5      	beq.n	ff70 <hci_evt_encode+0x12c>
	uint8_t status = cc->status;
   10004:	f894 801c 	ldrb.w	r8, [r4, #28]
	if (!status) {
   10008:	f1b8 0f00 	cmp.w	r8, #0
   1000c:	d103      	bne.n	10016 <CONFIG_PM_SRAM_SIZE+0x16>
		conn_count++;
   1000e:	4a4b      	ldr	r2, [pc, #300]	; (1013c <CONFIG_PM_SRAM_SIZE+0x13c>)
   10010:	6813      	ldr	r3, [r2, #0]
   10012:	3301      	adds	r3, #1
   10014:	6013      	str	r3, [r2, #0]
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
   10016:	2212      	movs	r2, #18
   10018:	2101      	movs	r1, #1
   1001a:	4630      	mov	r0, r6
   1001c:	f00c faa6 	bl	1c56c <meta_evt>
   10020:	4605      	mov	r5, r0
	if (status) {
   10022:	f1b8 0f00 	cmp.w	r8, #0
   10026:	d006      	beq.n	10036 <CONFIG_PM_SRAM_SIZE+0x36>
		(void)memset(lecc, 0x00, sizeof(*lecc));
   10028:	2212      	movs	r2, #18
   1002a:	2100      	movs	r1, #0
   1002c:	f009 fde5 	bl	19bfa <memset>
		lecc->status = status;
   10030:	f885 8000 	strb.w	r8, [r5]
		return;
   10034:	e79c      	b.n	ff70 <hci_evt_encode+0x12c>
	lecc->status = 0x00;
   10036:	f880 8000 	strb.w	r8, [r0]
	lecc->handle = sys_cpu_to_le16(handle);
   1003a:	f8a0 7001 	strh.w	r7, [r0, #1]
	lecc->role = cc->role;
   1003e:	7f63      	ldrb	r3, [r4, #29]
   10040:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
   10042:	7fa3      	ldrb	r3, [r4, #30]
   10044:	f003 0301 	and.w	r3, r3, #1
   10048:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &cc->peer_addr[0], BDADDR_SIZE);
   1004a:	2206      	movs	r2, #6
   1004c:	f104 011f 	add.w	r1, r4, #31
   10050:	3005      	adds	r0, #5
   10052:	f009 fda7 	bl	19ba4 <memcpy>
	lecc->interval = sys_cpu_to_le16(cc->interval);
   10056:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   10058:	f8a5 300b 	strh.w	r3, [r5, #11]
	lecc->latency = sys_cpu_to_le16(cc->latency);
   1005c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   1005e:	f8a5 300d 	strh.w	r3, [r5, #13]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   10062:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   10064:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = cc->sca;
   10068:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   1006c:	746b      	strb	r3, [r5, #17]
   1006e:	e77f      	b.n	ff70 <hci_evt_encode+0x12c>
		hci_disconn_complete_encode(pdu_data, handle, buf);
   10070:	460a      	mov	r2, r1
   10072:	4639      	mov	r1, r7
}
   10074:	b006      	add	sp, #24
   10076:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		hci_disconn_complete_encode(pdu_data, handle, buf);
   1007a:	f7ff be7f 	b.w	fd7c <hci_disconn_complete_encode>
	switch (pdu_data->llctrl.opcode) {
   1007e:	7fe3      	ldrb	r3, [r4, #31]
   10080:	2b09      	cmp	r3, #9
   10082:	d00c      	beq.n	1009e <CONFIG_PM_SRAM_SIZE+0x9e>
   10084:	2b0f      	cmp	r3, #15
   10086:	d013      	beq.n	100b0 <CONFIG_PM_SRAM_SIZE+0xb0>
   10088:	2b07      	cmp	r3, #7
   1008a:	d146      	bne.n	1011a <CONFIG_PM_SRAM_SIZE+0x11a>
		le_unknown_rsp(pdu_data, handle, buf);
   1008c:	f894 1020 	ldrb.w	r1, [r4, #32]
	switch (pdu_data->llctrl.unknown_rsp.type) {
   10090:	290e      	cmp	r1, #14
   10092:	d135      	bne.n	10100 <CONFIG_PM_SRAM_SIZE+0x100>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   10094:	4633      	mov	r3, r6
   10096:	463a      	mov	r2, r7
   10098:	2100      	movs	r1, #0
   1009a:	201a      	movs	r0, #26
   1009c:	e003      	b.n	100a6 <CONFIG_PM_SRAM_SIZE+0xa6>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   1009e:	460b      	mov	r3, r1
   100a0:	463a      	mov	r2, r7
   100a2:	4601      	mov	r1, r0
   100a4:	2000      	movs	r0, #0
}
   100a6:	b006      	add	sp, #24
   100a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   100ac:	f7ff ba78 	b.w	f5a0 <le_remote_feat_complete>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   100b0:	4b1e      	ldr	r3, [pc, #120]	; (1012c <CONFIG_PM_SRAM_SIZE+0x12c>)
   100b2:	6858      	ldr	r0, [r3, #4]
   100b4:	2100      	movs	r1, #0
   100b6:	460a      	mov	r2, r1
   100b8:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   100bc:	4313      	orrs	r3, r2
   100be:	d006      	beq.n	100ce <CONFIG_PM_SRAM_SIZE+0xce>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   100c0:	4b1b      	ldr	r3, [pc, #108]	; (10130 <CONFIG_PM_SRAM_SIZE+0x130>)
   100c2:	6818      	ldr	r0, [r3, #0]
   100c4:	460b      	mov	r3, r1
   100c6:	f000 0220 	and.w	r2, r0, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   100ca:	4313      	orrs	r3, r2
   100cc:	d109      	bne.n	100e2 <CONFIG_PM_SRAM_SIZE+0xe2>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
   100ce:	2300      	movs	r3, #0
   100d0:	e9cd 3301 	strd	r3, r3, [sp, #4]
   100d4:	9300      	str	r3, [sp, #0]
   100d6:	221a      	movs	r2, #26
   100d8:	2102      	movs	r1, #2
   100da:	4638      	mov	r0, r7
   100dc:	f00c fbf7 	bl	1c8ce <ll_conn_update>
		return;
   100e0:	e746      	b.n	ff70 <hci_evt_encode+0x12c>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
   100e2:	220a      	movs	r2, #10
   100e4:	2106      	movs	r1, #6
   100e6:	4630      	mov	r0, r6
   100e8:	f00c fa40 	bl	1c56c <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   100ec:	8007      	strh	r7, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   100ee:	8c23      	ldrh	r3, [r4, #32]
   100f0:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   100f2:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   100f4:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   100f6:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   100f8:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   100fa:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   100fc:	8103      	strh	r3, [r0, #8]
   100fe:	e737      	b.n	ff70 <hci_evt_encode+0x12c>
   10100:	4b0f      	ldr	r3, [pc, #60]	; (10140 <CONFIG_PM_SRAM_SIZE+0x140>)
   10102:	4a10      	ldr	r2, [pc, #64]	; (10144 <CONFIG_PM_SRAM_SIZE+0x144>)
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   10104:	4810      	ldr	r0, [pc, #64]	; (10148 <CONFIG_PM_SRAM_SIZE+0x148>)
   10106:	1ad2      	subs	r2, r2, r3
   10108:	08d2      	lsrs	r2, r2, #3
   1010a:	0192      	lsls	r2, r2, #6
   1010c:	f042 0202 	orr.w	r2, r2, #2
}
   10110:	b006      	add	sp, #24
   10112:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   10116:	f008 be79 	b.w	18e0c <log_1>
		LL_ASSERT(0);
   1011a:	f641 033f 	movw	r3, #6207	; 0x183f
   1011e:	e6a8      	b.n	fe72 <hci_evt_encode+0x2e>
   10120:	00021ae8 	.word	0x00021ae8
   10124:	00020b9a 	.word	0x00020b9a
   10128:	0001f734 	.word	0x0001f734
   1012c:	20000218 	.word	0x20000218
   10130:	20000220 	.word	0x20000220
   10134:	0001e723 	.word	0x0001e723
   10138:	00021b21 	.word	0x00021b21
   1013c:	20001dac 	.word	0x20001dac
   10140:	0001e408 	.word	0x0001e408
   10144:	0001e458 	.word	0x0001e458
   10148:	00021b46 	.word	0x00021b46

0001014c <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   1014c:	7903      	ldrb	r3, [r0, #4]
   1014e:	2b03      	cmp	r3, #3
   10150:	d006      	beq.n	10160 <hci_get_class+0x14>

		switch (node_rx->hdr.type) {
   10152:	3b05      	subs	r3, #5
   10154:	b2db      	uxtb	r3, r3
   10156:	2b11      	cmp	r3, #17
   10158:	d80a      	bhi.n	10170 <hci_get_class+0x24>
   1015a:	4a06      	ldr	r2, [pc, #24]	; (10174 <hci_get_class+0x28>)
   1015c:	5cd0      	ldrb	r0, [r2, r3]
   1015e:	4770      	bx	lr
		default:
			return HCI_CLASS_NONE;
		}

#if defined(CONFIG_BT_CONN)
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   10160:	7f03      	ldrb	r3, [r0, #28]
   10162:	f003 0303 	and.w	r3, r3, #3
   10166:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_LLCP;
	} else {
		return HCI_CLASS_ACL_DATA;
   10168:	bf0c      	ite	eq
   1016a:	2004      	moveq	r0, #4
   1016c:	2005      	movne	r0, #5
   1016e:	4770      	bx	lr
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   10170:	2000      	movs	r0, #0
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
   10172:	4770      	bx	lr
   10174:	00021b5f 	.word	0x00021b5f

00010178 <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
   10178:	4b07      	ldr	r3, [pc, #28]	; (10198 <hci_init+0x20>)
   1017a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1017e:	f641 71ff 	movw	r1, #8191	; 0x1fff
   10182:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   10186:	4b05      	ldr	r3, [pc, #20]	; (1019c <hci_init+0x24>)
   10188:	201f      	movs	r0, #31
   1018a:	2100      	movs	r1, #0
   1018c:	e9c3 0100 	strd	r0, r1, [r3]
	conn_count = 0U;
   10190:	4b03      	ldr	r3, [pc, #12]	; (101a0 <hci_init+0x28>)
   10192:	2200      	movs	r2, #0
   10194:	601a      	str	r2, [r3, #0]
{
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   10196:	4770      	bx	lr
   10198:	20000218 	.word	0x20000218
   1019c:	20000220 	.word	0x20000220
   101a0:	20001dac 	.word	0x20001dac

000101a4 <ll_rx_link_inc_quota>:
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   101a4:	2801      	cmp	r0, #1
{
   101a6:	b538      	push	{r3, r4, r5, lr}
   101a8:	4d0b      	ldr	r5, [pc, #44]	; (101d8 <ll_rx_link_inc_quota+0x34>)
   101aa:	4604      	mov	r4, r0
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   101ac:	d10f      	bne.n	101ce <ll_rx_link_inc_quota+0x2a>
   101ae:	782b      	ldrb	r3, [r5, #0]
   101b0:	2b0a      	cmp	r3, #10
   101b2:	d90c      	bls.n	101ce <ll_rx_link_inc_quota+0x2a>
   101b4:	4a09      	ldr	r2, [pc, #36]	; (101dc <ll_rx_link_inc_quota+0x38>)
   101b6:	490a      	ldr	r1, [pc, #40]	; (101e0 <ll_rx_link_inc_quota+0x3c>)
   101b8:	480a      	ldr	r0, [pc, #40]	; (101e4 <ll_rx_link_inc_quota+0x40>)
   101ba:	f240 5359 	movw	r3, #1369	; 0x559
   101be:	f008 f9d3 	bl	18568 <printk>
   101c2:	4040      	eors	r0, r0
   101c4:	f380 8811 	msr	BASEPRI, r0
   101c8:	f04f 0003 	mov.w	r0, #3
   101cc:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   101ce:	7828      	ldrb	r0, [r5, #0]
   101d0:	4404      	add	r4, r0
   101d2:	702c      	strb	r4, [r5, #0]
}
   101d4:	bd38      	pop	{r3, r4, r5, pc}
   101d6:	bf00      	nop
   101d8:	20001eac 	.word	0x20001eac
   101dc:	00021b90 	.word	0x00021b90
   101e0:	00021bcb 	.word	0x00021bcb
   101e4:	0001f734 	.word	0x0001f734

000101e8 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
   101e8:	b510      	push	{r4, lr}
   101ea:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
   101ec:	f00c fca0 	bl	1cb30 <lll_reset>
	LL_ASSERT(!err);
   101f0:	b160      	cbz	r0, 1020c <perform_lll_reset+0x24>
   101f2:	4a21      	ldr	r2, [pc, #132]	; (10278 <perform_lll_reset+0x90>)
   101f4:	4921      	ldr	r1, [pc, #132]	; (1027c <perform_lll_reset+0x94>)
   101f6:	4822      	ldr	r0, [pc, #136]	; (10280 <perform_lll_reset+0x98>)
   101f8:	f240 7362 	movw	r3, #1890	; 0x762
   101fc:	f008 f9b4 	bl	18568 <printk>
   10200:	4040      	eors	r0, r0
   10202:	f380 8811 	msr	BASEPRI, r0
   10206:	f04f 0003 	mov.w	r0, #3
   1020a:	df02      	svc	2

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
   1020c:	f00c fced 	bl	1cbea <lll_adv_reset>
	LL_ASSERT(!err);
   10210:	b160      	cbz	r0, 1022c <perform_lll_reset+0x44>
   10212:	4a19      	ldr	r2, [pc, #100]	; (10278 <perform_lll_reset+0x90>)
   10214:	4919      	ldr	r1, [pc, #100]	; (1027c <perform_lll_reset+0x94>)
   10216:	481a      	ldr	r0, [pc, #104]	; (10280 <perform_lll_reset+0x98>)
   10218:	f240 7367 	movw	r3, #1895	; 0x767
   1021c:	f008 f9a4 	bl	18568 <printk>
   10220:	4040      	eors	r0, r0
   10222:	f380 8811 	msr	BASEPRI, r0
   10226:	f04f 0003 	mov.w	r0, #3
   1022a:	df02      	svc	2
#endif /* CONFIG_BT_BROADCASTER */

#if defined(CONFIG_BT_OBSERVER)
	/* Reset scan state */
	err = lll_scan_reset();
   1022c:	f00c fe14 	bl	1ce58 <lll_scan_reset>
	LL_ASSERT(!err);
   10230:	b160      	cbz	r0, 1024c <perform_lll_reset+0x64>
   10232:	4a11      	ldr	r2, [pc, #68]	; (10278 <perform_lll_reset+0x90>)
   10234:	4911      	ldr	r1, [pc, #68]	; (1027c <perform_lll_reset+0x94>)
   10236:	4812      	ldr	r0, [pc, #72]	; (10280 <perform_lll_reset+0x98>)
   10238:	f240 736d 	movw	r3, #1901	; 0x76d
   1023c:	f008 f994 	bl	18568 <printk>
   10240:	4040      	eors	r0, r0
   10242:	f380 8811 	msr	BASEPRI, r0
   10246:	f04f 0003 	mov.w	r0, #3
   1024a:	df02      	svc	2
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
   1024c:	f00c fe37 	bl	1cebe <lll_conn_reset>
	LL_ASSERT(!err);
   10250:	b160      	cbz	r0, 1026c <perform_lll_reset+0x84>
   10252:	4a09      	ldr	r2, [pc, #36]	; (10278 <perform_lll_reset+0x90>)
   10254:	4909      	ldr	r1, [pc, #36]	; (1027c <perform_lll_reset+0x94>)
   10256:	480a      	ldr	r0, [pc, #40]	; (10280 <perform_lll_reset+0x98>)
   10258:	f240 7373 	movw	r3, #1907	; 0x773
   1025c:	f008 f984 	bl	18568 <printk>
   10260:	4040      	eors	r0, r0
   10262:	f380 8811 	msr	BASEPRI, r0
   10266:	f04f 0003 	mov.w	r0, #3
   1026a:	df02      	svc	2
	z_impl_k_sem_give(sem);
   1026c:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
   1026e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10272:	f007 b8ab 	b.w	173cc <z_impl_k_sem_give>
   10276:	bf00      	nop
   10278:	00021b90 	.word	0x00021b90
   1027c:	00021c03 	.word	0x00021c03
   10280:	0001f734 	.word	0x0001f734

00010284 <ull_done>:
}
#endif /* CONFIG_BT_CONN */

#if !defined(CONFIG_BT_CTLR_LOW_LAT_ULL)
static void ull_done(void *param)
{
   10284:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	memq_link_t *link;
	struct node_rx_hdr *done;

	do {
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   10288:	4f35      	ldr	r7, [pc, #212]	; (10360 <ull_done+0xdc>)
	if (!MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   1028a:	4d36      	ldr	r5, [pc, #216]	; (10364 <ull_done+0xe0>)
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   1028c:	e9d7 0100 	ldrd	r0, r1, [r7]
   10290:	aa01      	add	r2, sp, #4
   10292:	f00b fec3 	bl	1c01c <memq_peek>
				 (void **)&done);

		if (link) {
   10296:	4680      	mov	r8, r0
   10298:	2800      	cmp	r0, #0
   1029a:	d05d      	beq.n	10358 <ull_done+0xd4>
			/* Process done event */
			memq_dequeue(memq_ull_done.tail, &memq_ull_done.head, NULL);
   1029c:	6878      	ldr	r0, [r7, #4]
   1029e:	2200      	movs	r2, #0
   102a0:	4639      	mov	r1, r7
   102a2:	f00b fec3 	bl	1c02c <memq_dequeue>
			rx_demux_event_done(link, done);
   102a6:	9e01      	ldr	r6, [sp, #4]
	struct node_rx_event_done *done = (void *)rx;
	struct ull_hdr *ull_hdr;
	void *release;

	/* Decrement prepare reference if ULL will not resume */
	ull_hdr = done->param;
   102a8:	69f4      	ldr	r4, [r6, #28]
	if (ull_hdr) {
   102aa:	b194      	cbz	r4, 102d2 <ull_done+0x4e>
	return hdr->ref;
   102ac:	7823      	ldrb	r3, [r4, #0]
		LL_ASSERT(ull_ref_get(ull_hdr));
   102ae:	b963      	cbnz	r3, 102ca <ull_done+0x46>
   102b0:	4a2d      	ldr	r2, [pc, #180]	; (10368 <ull_done+0xe4>)
   102b2:	492e      	ldr	r1, [pc, #184]	; (1036c <ull_done+0xe8>)
   102b4:	482e      	ldr	r0, [pc, #184]	; (10370 <ull_done+0xec>)
   102b6:	f640 137d 	movw	r3, #2429	; 0x97d
   102ba:	f008 f955 	bl	18568 <printk>
   102be:	4040      	eors	r0, r0
   102c0:	f380 8811 	msr	BASEPRI, r0
   102c4:	f04f 0003 	mov.w	r0, #3
   102c8:	df02      	svc	2
	return hdr->ref--;
   102ca:	7823      	ldrb	r3, [r4, #0]
   102cc:	3b01      	subs	r3, #1
   102ce:	b2db      	uxtb	r3, r3
   102d0:	7023      	strb	r3, [r4, #0]
		ull_ref_dec(ull_hdr);
	}

	/* Process role dependent event done */
	switch (done->extra.type) {
   102d2:	f896 3020 	ldrb.w	r3, [r6, #32]
   102d6:	b123      	cbz	r3, 102e2 <ull_done+0x5e>
   102d8:	2b01      	cmp	r3, #1
   102da:	d127      	bne.n	1032c <ull_done+0xa8>
#if defined(CONFIG_BT_CONN)
	case EVENT_DONE_EXTRA_TYPE_CONN:
		ull_conn_done(done);
   102dc:	4630      	mov	r0, r6
   102de:	f002 fb55 	bl	1298c <ull_conn_done>
	if (!MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   102e2:	78ea      	ldrb	r2, [r5, #3]
static inline bool mfifo_enqueue_idx_get(uint8_t count, uint8_t first, uint8_t last,
					 uint8_t *idx)
{
	/* Non-destructive: Advance write-index modulo 'count' */
	last = last + 1;
	if (last == count) {
   102e4:	7868      	ldrb	r0, [r5, #1]
   102e6:	78a9      	ldrb	r1, [r5, #2]
		LL_ASSERT(0);
		break;
	}

	/* release done */
	done->extra.type = 0U;
   102e8:	2300      	movs	r3, #0
   102ea:	f886 3020 	strb.w	r3, [r6, #32]
	last = last + 1;
   102ee:	1c53      	adds	r3, r2, #1
   102f0:	b2db      	uxtb	r3, r3
		last = 0U;
   102f2:	4298      	cmp	r0, r3
   102f4:	bf08      	it	eq
   102f6:	2300      	moveq	r3, #0
	 * We want to maintain the invariant of emptiness defined by
	 * first == last, but we just advanced a copy of the write-index before
	 * and may have wrapped. So if first == last the queue is full and we
	 * can not continue
	 */
	if (last == first) {
   102f8:	4299      	cmp	r1, r3
   102fa:	d125      	bne.n	10348 <ull_done+0xc4>
	release = done_release(link, done);
	LL_ASSERT(release == done);
   102fc:	4a1a      	ldr	r2, [pc, #104]	; (10368 <ull_done+0xe4>)
   102fe:	491d      	ldr	r1, [pc, #116]	; (10374 <ull_done+0xf0>)
   10300:	481b      	ldr	r0, [pc, #108]	; (10370 <ull_done+0xec>)
   10302:	f640 13ba 	movw	r3, #2490	; 0x9ba
   10306:	f008 f92f 	bl	18568 <printk>
   1030a:	4040      	eors	r0, r0
   1030c:	f380 8811 	msr	BASEPRI, r0
   10310:	f04f 0003 	mov.w	r0, #3
   10314:	df02      	svc	2
	/* LLL done synchronized */
	lll_done_sync();
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL_DONE */

	/* If disable initiated, signal the semaphore */
	if (ull_hdr && !ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
   10316:	2c00      	cmp	r4, #0
   10318:	d0b8      	beq.n	1028c <ull_done+0x8>
	return hdr->ref;
   1031a:	7823      	ldrb	r3, [r4, #0]
   1031c:	2b00      	cmp	r3, #0
   1031e:	d1b5      	bne.n	1028c <ull_done+0x8>
   10320:	6963      	ldr	r3, [r4, #20]
   10322:	2b00      	cmp	r3, #0
   10324:	d0b2      	beq.n	1028c <ull_done+0x8>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
   10326:	69a0      	ldr	r0, [r4, #24]
   10328:	4798      	blx	r3
   1032a:	e7af      	b.n	1028c <ull_done+0x8>
		LL_ASSERT(0);
   1032c:	4a0e      	ldr	r2, [pc, #56]	; (10368 <ull_done+0xe4>)
   1032e:	4912      	ldr	r1, [pc, #72]	; (10378 <ull_done+0xf4>)
   10330:	480f      	ldr	r0, [pc, #60]	; (10370 <ull_done+0xec>)
   10332:	f640 13b3 	movw	r3, #2483	; 0x9b3
   10336:	f008 f917 	bl	18568 <printk>
   1033a:	4040      	eors	r0, r0
   1033c:	f380 8811 	msr	BASEPRI, r0
   10340:	f04f 0003 	mov.w	r0, #3
   10344:	df02      	svc	2
		break;
   10346:	e7cc      	b.n	102e2 <ull_done+0x5e>
	done->hdr.link = link;
   10348:	f8c6 8000 	str.w	r8, [r6]
 */
static inline void mfifo_by_idx_enqueue(uint8_t *fifo, uint8_t size, uint8_t idx,
					void *mem, uint8_t *last)
{
	/* API 2: fifo is array of void-ptrs */
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1034c:	7829      	ldrb	r1, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1034e:	fb01 5202 	mla	r2, r1, r2, r5
   10352:	6056      	str	r6, [r2, #4]

	cpu_dmb(); /* Ensure data accesses are synchronized */
	*last = idx; /* Commit: Update write index */
   10354:	70eb      	strb	r3, [r5, #3]
	LL_ASSERT(release == done);
   10356:	e7de      	b.n	10316 <ull_done+0x92>
}
   10358:	b002      	add	sp, #8
   1035a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1035e:	bf00      	nop
   10360:	200022e0 	.word	0x200022e0
   10364:	20000604 	.word	0x20000604
   10368:	00021b90 	.word	0x00021b90
   1036c:	00021c08 	.word	0x00021c08
   10370:	0001f734 	.word	0x0001f734
   10374:	00021c1d 	.word	0x00021c1d
   10378:	00020b9a 	.word	0x00020b9a

0001037c <rx_alloc>:
{
   1037c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > mem_link_rx.quota_pdu) {
   10380:	4e37      	ldr	r6, [pc, #220]	; (10460 <rx_alloc+0xe4>)
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   10382:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 1046c <rx_alloc+0xf0>
   10386:	7834      	ldrb	r4, [r6, #0]
   10388:	4284      	cmp	r4, r0
   1038a:	bf28      	it	cs
   1038c:	4604      	movcs	r4, r0
   1038e:	3c01      	subs	r4, #1
   10390:	b2e4      	uxtb	r4, r4
		link = mem_acquire(&mem_link_rx.free);
   10392:	f106 0804 	add.w	r8, r6, #4
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   10396:	2cff      	cmp	r4, #255	; 0xff
   10398:	d030      	beq.n	103fc <rx_alloc+0x80>
	last = last + 1;
   1039a:	f899 5003 	ldrb.w	r5, [r9, #3]
	if (last == count) {
   1039e:	f899 2001 	ldrb.w	r2, [r9, #1]
   103a2:	f899 3002 	ldrb.w	r3, [r9, #2]
	last = last + 1;
   103a6:	3501      	adds	r5, #1
   103a8:	b2ed      	uxtb	r5, r5
		last = 0U;
   103aa:	42aa      	cmp	r2, r5
   103ac:	bf08      	it	eq
   103ae:	2500      	moveq	r5, #0
	if (last == first) {
   103b0:	42ab      	cmp	r3, r5
   103b2:	d021      	beq.n	103f8 <rx_alloc+0x7c>
		link = mem_acquire(&mem_link_rx.free);
   103b4:	4640      	mov	r0, r8
   103b6:	f00b fdcc 	bl	1bf52 <mem_acquire>
		if (!link) {
   103ba:	4607      	mov	r7, r0
   103bc:	b908      	cbnz	r0, 103c2 <rx_alloc+0x46>
}
   103be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rx = mem_acquire(&mem_pdu_rx.free);
   103c2:	4828      	ldr	r0, [pc, #160]	; (10464 <rx_alloc+0xe8>)
   103c4:	f00b fdc5 	bl	1bf52 <mem_acquire>
		if (!rx) {
   103c8:	3c01      	subs	r4, #1
   103ca:	b2e4      	uxtb	r4, r4
   103cc:	b928      	cbnz	r0, 103da <rx_alloc+0x5e>
			mem_release(link, &mem_link_rx.free);
   103ce:	4926      	ldr	r1, [pc, #152]	; (10468 <rx_alloc+0xec>)
   103d0:	4638      	mov	r0, r7
}
   103d2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &mem_link_rx.free);
   103d6:	f00b bdd5 	b.w	1bf84 <mem_release>
		rx->link = link;
   103da:	6007      	str	r7, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   103dc:	f899 2003 	ldrb.w	r2, [r9, #3]
   103e0:	f899 3000 	ldrb.w	r3, [r9]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   103e4:	fb02 9303 	mla	r3, r2, r3, r9
   103e8:	6058      	str	r0, [r3, #4]
		ll_rx_link_inc_quota(-1);
   103ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	*last = idx; /* Commit: Update write index */
   103ee:	f889 5003 	strb.w	r5, [r9, #3]
   103f2:	f7ff fed7 	bl	101a4 <ll_rx_link_inc_quota>
   103f6:	e7ce      	b.n	10396 <rx_alloc+0x1a>
	if (!max) {
   103f8:	2c00      	cmp	r4, #0
   103fa:	d0e0      	beq.n	103be <rx_alloc+0x42>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   103fc:	f8df 8070 	ldr.w	r8, [pc, #112]	; 10470 <rx_alloc+0xf4>
		link = mem_acquire(&mem_link_rx.free);
   10400:	4f19      	ldr	r7, [pc, #100]	; (10468 <rx_alloc+0xec>)
   10402:	e00f      	b.n	10424 <rx_alloc+0xa8>
		link->mem = NULL;
   10404:	2300      	movs	r3, #0
   10406:	606b      	str	r3, [r5, #4]
		rx->link = link;
   10408:	6005      	str	r5, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1040a:	f898 2003 	ldrb.w	r2, [r8, #3]
   1040e:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   10412:	fb02 8303 	mla	r3, r2, r3, r8
   10416:	6058      	str	r0, [r3, #4]
		ll_rx_link_inc_quota(-1);
   10418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	*last = idx; /* Commit: Update write index */
   1041c:	f888 4003 	strb.w	r4, [r8, #3]
   10420:	f7ff fec0 	bl	101a4 <ll_rx_link_inc_quota>
	while (mem_link_rx.quota_pdu &&
   10424:	7833      	ldrb	r3, [r6, #0]
   10426:	2b00      	cmp	r3, #0
   10428:	d0c9      	beq.n	103be <rx_alloc+0x42>
	last = last + 1;
   1042a:	f898 4003 	ldrb.w	r4, [r8, #3]
	if (last == count) {
   1042e:	f898 2001 	ldrb.w	r2, [r8, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   10432:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
   10436:	3401      	adds	r4, #1
   10438:	b2e4      	uxtb	r4, r4
		last = 0U;
   1043a:	42a2      	cmp	r2, r4
   1043c:	bf08      	it	eq
   1043e:	2400      	moveq	r4, #0
	if (last == first) {
   10440:	429c      	cmp	r4, r3
   10442:	d0bc      	beq.n	103be <rx_alloc+0x42>
		link = mem_acquire(&mem_link_rx.free);
   10444:	4638      	mov	r0, r7
   10446:	f00b fd84 	bl	1bf52 <mem_acquire>
		if (!link) {
   1044a:	4605      	mov	r5, r0
   1044c:	2800      	cmp	r0, #0
   1044e:	d0b6      	beq.n	103be <rx_alloc+0x42>
		rx = mem_acquire(&mem_pdu_rx.free);
   10450:	4804      	ldr	r0, [pc, #16]	; (10464 <rx_alloc+0xe8>)
   10452:	f00b fd7e 	bl	1bf52 <mem_acquire>
		if (!rx) {
   10456:	2800      	cmp	r0, #0
   10458:	d1d4      	bne.n	10404 <rx_alloc+0x88>
			mem_release(link, &mem_link_rx.free);
   1045a:	4903      	ldr	r1, [pc, #12]	; (10468 <rx_alloc+0xec>)
   1045c:	4628      	mov	r0, r5
   1045e:	e7b8      	b.n	103d2 <rx_alloc+0x56>
   10460:	20001eac 	.word	0x20001eac
   10464:	20001f2c 	.word	0x20001f2c
   10468:	20001eb0 	.word	0x20001eb0
   1046c:	20000628 	.word	0x20000628
   10470:	20000618 	.word	0x20000618

00010474 <init_reset>:
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   10474:	4b46      	ldr	r3, [pc, #280]	; (10590 <init_reset+0x11c>)
{
   10476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   1047a:	1d18      	adds	r0, r3, #4
   1047c:	2203      	movs	r2, #3
   1047e:	2134      	movs	r1, #52	; 0x34
   10480:	f00b fd43 	bl	1bf0a <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX +
   10484:	4b43      	ldr	r3, [pc, #268]	; (10594 <init_reset+0x120>)
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   10486:	4f44      	ldr	r7, [pc, #272]	; (10598 <init_reset+0x124>)
		link = mem_acquire(&mem_link_done.free);
   10488:	4e42      	ldr	r6, [pc, #264]	; (10594 <init_reset+0x120>)
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX +
   1048a:	2204      	movs	r2, #4
   1048c:	2108      	movs	r1, #8
   1048e:	1898      	adds	r0, r3, r2
   10490:	f00b fd3b 	bl	1bf0a <mem_init>
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   10494:	46b8      	mov	r8, r7
	last = last + 1;
   10496:	78fc      	ldrb	r4, [r7, #3]
	if (last == count) {
   10498:	787a      	ldrb	r2, [r7, #1]
   1049a:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
   1049c:	3401      	adds	r4, #1
   1049e:	b2e4      	uxtb	r4, r4
		last = 0U;
   104a0:	42a2      	cmp	r2, r4
   104a2:	bf08      	it	eq
   104a4:	2400      	moveq	r4, #0
	if (last == first) {
   104a6:	429c      	cmp	r4, r3
   104a8:	d00d      	beq.n	104c6 <init_reset+0x52>
		link = mem_acquire(&mem_link_done.free);
   104aa:	4630      	mov	r0, r6
   104ac:	f00b fd51 	bl	1bf52 <mem_acquire>
		if (!link) {
   104b0:	4605      	mov	r5, r0
   104b2:	b140      	cbz	r0, 104c6 <init_reset+0x52>
		rx = mem_acquire(&mem_done.free);
   104b4:	4836      	ldr	r0, [pc, #216]	; (10590 <init_reset+0x11c>)
   104b6:	f00b fd4c 	bl	1bf52 <mem_acquire>
		if (!rx) {
   104ba:	2800      	cmp	r0, #0
   104bc:	d15d      	bne.n	1057a <init_reset+0x106>
			mem_release(link, &mem_link_done.free);
   104be:	4935      	ldr	r1, [pc, #212]	; (10594 <init_reset+0x120>)
   104c0:	4628      	mov	r0, r5
   104c2:	f00b fd5f 	bl	1bf84 <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   104c6:	4b35      	ldr	r3, [pc, #212]	; (1059c <init_reset+0x128>)
   104c8:	220d      	movs	r2, #13
   104ca:	1d18      	adds	r0, r3, #4
   104cc:	2148      	movs	r1, #72	; 0x48
   104ce:	f00b fd1c 	bl	1bf0a <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   104d2:	4b33      	ldr	r3, [pc, #204]	; (105a0 <init_reset+0x12c>)
   104d4:	220f      	movs	r2, #15
   104d6:	1d18      	adds	r0, r3, #4
   104d8:	2108      	movs	r1, #8
   104da:	f00b fd16 	bl	1bf0a <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   104de:	4830      	ldr	r0, [pc, #192]	; (105a0 <init_reset+0x12c>)
   104e0:	f00b fd37 	bl	1bf52 <mem_acquire>
	LL_ASSERT(link);
   104e4:	4604      	mov	r4, r0
   104e6:	b960      	cbnz	r0, 10502 <init_reset+0x8e>
   104e8:	4a2e      	ldr	r2, [pc, #184]	; (105a4 <init_reset+0x130>)
   104ea:	492f      	ldr	r1, [pc, #188]	; (105a8 <init_reset+0x134>)
   104ec:	482f      	ldr	r0, [pc, #188]	; (105ac <init_reset+0x138>)
   104ee:	f44f 63e8 	mov.w	r3, #1856	; 0x740
   104f2:	f008 f839 	bl	18568 <printk>
   104f6:	4040      	eors	r0, r0
   104f8:	f380 8811 	msr	BASEPRI, r0
   104fc:	f04f 0003 	mov.w	r0, #3
   10500:	df02      	svc	2
	MEMQ_INIT(ull_rx, link);
   10502:	4a2b      	ldr	r2, [pc, #172]	; (105b0 <init_reset+0x13c>)
   10504:	4620      	mov	r0, r4
   10506:	1f11      	subs	r1, r2, #4
   10508:	f00b fd73 	bl	1bff2 <memq_init>
	link = mem_acquire(&mem_link_done.free);
   1050c:	4821      	ldr	r0, [pc, #132]	; (10594 <init_reset+0x120>)
   1050e:	f00b fd20 	bl	1bf52 <mem_acquire>
	LL_ASSERT(link);
   10512:	4604      	mov	r4, r0
   10514:	b960      	cbnz	r0, 10530 <init_reset+0xbc>
   10516:	4a23      	ldr	r2, [pc, #140]	; (105a4 <init_reset+0x130>)
   10518:	4923      	ldr	r1, [pc, #140]	; (105a8 <init_reset+0x134>)
   1051a:	4824      	ldr	r0, [pc, #144]	; (105ac <init_reset+0x138>)
   1051c:	f44f 63e9 	mov.w	r3, #1864	; 0x748
   10520:	f008 f822 	bl	18568 <printk>
   10524:	4040      	eors	r0, r0
   10526:	f380 8811 	msr	BASEPRI, r0
   1052a:	f04f 0003 	mov.w	r0, #3
   1052e:	df02      	svc	2
	MEMQ_INIT(ull_done, link);
   10530:	4a20      	ldr	r2, [pc, #128]	; (105b4 <init_reset+0x140>)
   10532:	4620      	mov	r0, r4
   10534:	1f11      	subs	r1, r2, #4
   10536:	f00b fd5c 	bl	1bff2 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   1053a:	4819      	ldr	r0, [pc, #100]	; (105a0 <init_reset+0x12c>)
   1053c:	f00b fd09 	bl	1bf52 <mem_acquire>
	LL_ASSERT(link);
   10540:	4604      	mov	r4, r0
   10542:	b960      	cbnz	r0, 1055e <init_reset+0xea>
   10544:	4a17      	ldr	r2, [pc, #92]	; (105a4 <init_reset+0x130>)
   10546:	4918      	ldr	r1, [pc, #96]	; (105a8 <init_reset+0x134>)
   10548:	4818      	ldr	r0, [pc, #96]	; (105ac <init_reset+0x138>)
   1054a:	f44f 63ea 	mov.w	r3, #1872	; 0x750
   1054e:	f008 f80b 	bl	18568 <printk>
   10552:	4040      	eors	r0, r0
   10554:	f380 8811 	msr	BASEPRI, r0
   10558:	f04f 0003 	mov.w	r0, #3
   1055c:	df02      	svc	2
	MEMQ_INIT(ll_rx, link);
   1055e:	4a16      	ldr	r2, [pc, #88]	; (105b8 <init_reset+0x144>)
   10560:	4620      	mov	r0, r4
   10562:	1f11      	subs	r1, r2, #4
   10564:	f00b fd45 	bl	1bff2 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   10568:	4b14      	ldr	r3, [pc, #80]	; (105bc <init_reset+0x148>)
   1056a:	220b      	movs	r2, #11
	rx_alloc(UINT8_MAX);
   1056c:	20ff      	movs	r0, #255	; 0xff
	mem_link_rx.quota_pdu = RX_CNT;
   1056e:	701a      	strb	r2, [r3, #0]
	rx_alloc(UINT8_MAX);
   10570:	f7ff ff04 	bl	1037c <rx_alloc>
}
   10574:	2000      	movs	r0, #0
   10576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx->link = link;
   1057a:	6005      	str	r5, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1057c:	f898 2003 	ldrb.w	r2, [r8, #3]
   10580:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   10584:	fb02 8303 	mla	r3, r2, r3, r8
   10588:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
   1058a:	f888 4003 	strb.w	r4, [r8, #3]
}
   1058e:	e782      	b.n	10496 <init_reset+0x22>
   10590:	20001de8 	.word	0x20001de8
   10594:	20001e88 	.word	0x20001e88
   10598:	20000604 	.word	0x20000604
   1059c:	20001f2c 	.word	0x20001f2c
   105a0:	20001eb0 	.word	0x20001eb0
   105a4:	00021b90 	.word	0x00021b90
   105a8:	00021474 	.word	0x00021474
   105ac:	0001f734 	.word	0x0001f734
   105b0:	200022ec 	.word	0x200022ec
   105b4:	200022e4 	.word	0x200022e4
   105b8:	200022dc 	.word	0x200022dc
   105bc:	20001eac 	.word	0x20001eac

000105c0 <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
   105c0:	6008      	str	r0, [r1, #0]
   105c2:	4801      	ldr	r0, [pc, #4]	; (105c8 <ull_ticker_status_give+0x8>)
   105c4:	f006 bf02 	b.w	173cc <z_impl_k_sem_give>
   105c8:	200022f4 	.word	0x200022f4

000105cc <tx_cmplt_get>:
{
   105cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   105d0:	460c      	mov	r4, r1
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   105d2:	4e28      	ldr	r6, [pc, #160]	; (10674 <tx_cmplt_get+0xa8>)
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
   105d4:	7823      	ldrb	r3, [r4, #0]
   105d6:	7871      	ldrb	r1, [r6, #1]
   105d8:	428b      	cmp	r3, r1
   105da:	bf28      	it	cs
   105dc:	78b3      	ldrbcs	r3, [r6, #2]
{
   105de:	4680      	mov	r8, r0
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   105e0:	7830      	ldrb	r0, [r6, #0]
		*idx = first;
   105e2:	bf28      	it	cs
   105e4:	7023      	strbcs	r3, [r4, #0]
	}

	if (*idx == last) {
   105e6:	7823      	ldrb	r3, [r4, #0]
   105e8:	429a      	cmp	r2, r3
{
   105ea:	4691      	mov	r9, r2
   105ec:	d103      	bne.n	105f6 <tx_cmplt_get+0x2a>
		return 0;
   105ee:	2700      	movs	r7, #0
}
   105f0:	4638      	mov	r0, r7
   105f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return NULL;
	}

	i = *idx + 1;
   105f6:	1c5a      	adds	r2, r3, #1
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
   105f8:	4d1f      	ldr	r5, [pc, #124]	; (10678 <tx_cmplt_get+0xac>)
	i = *idx + 1;
   105fa:	b2d2      	uxtb	r2, r2
		i = 0U;
   105fc:	4291      	cmp	r1, r2
   105fe:	bf08      	it	eq
   10600:	2200      	moveq	r2, #0
	p = (void *)(fifo + (*idx) * size);
   10602:	fb13 f300 	smulbb	r3, r3, r0

	*idx = i;
   10606:	7022      	strb	r2, [r4, #0]
	if (!tx) {
   10608:	18ea      	adds	r2, r5, r3
   1060a:	d0f0      	beq.n	105ee <tx_cmplt_get+0x22>
	*handle = tx->handle;
   1060c:	5aeb      	ldrh	r3, [r5, r3]
   1060e:	f8a8 3000 	strh.w	r3, [r8]
	cmplt = 0U;
   10612:	2700      	movs	r7, #0
		node_tx = tx->node;
   10614:	6850      	ldr	r0, [r2, #4]
		if (!node_tx || (node_tx == (void *)1) ||
   10616:	2801      	cmp	r0, #1
   10618:	f020 0103 	bic.w	r1, r0, #3
   1061c:	d906      	bls.n	1062c <tx_cmplt_get+0x60>
   1061e:	b331      	cbz	r1, 1066e <tx_cmplt_get+0xa2>
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
   10620:	7903      	ldrb	r3, [r0, #4]
   10622:	f003 0303 	and.w	r3, r3, #3
		    (((uint32_t)node_tx & ~3) &&
   10626:	3b01      	subs	r3, #1
   10628:	2b01      	cmp	r3, #1
   1062a:	d820      	bhi.n	1066e <tx_cmplt_get+0xa2>
			cmplt++;
   1062c:	3701      	adds	r7, #1
   1062e:	b2ff      	uxtb	r7, r7
			tx->node = (void *)1;
   10630:	2301      	movs	r3, #1
   10632:	6053      	str	r3, [r2, #4]
		if (((uint32_t)node_tx & ~3)) {
   10634:	b109      	cbz	r1, 1063a <tx_cmplt_get+0x6e>
			ll_tx_mem_release(node_tx);
   10636:	f001 fb95 	bl	11d64 <ll_tx_mem_release>
	if (*idx >= count) {
   1063a:	7823      	ldrb	r3, [r4, #0]
		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   1063c:	7872      	ldrb	r2, [r6, #1]
   1063e:	7830      	ldrb	r0, [r6, #0]
   10640:	4293      	cmp	r3, r2
   10642:	bf24      	itt	cs
   10644:	78b3      	ldrbcs	r3, [r6, #2]
		*idx = first;
   10646:	7023      	strbcs	r3, [r4, #0]
	if (*idx == last) {
   10648:	7823      	ldrb	r3, [r4, #0]
   1064a:	4599      	cmp	r9, r3
   1064c:	d0d0      	beq.n	105f0 <tx_cmplt_get+0x24>
	i = *idx + 1;
   1064e:	1c59      	adds	r1, r3, #1
   10650:	b2c9      	uxtb	r1, r1
	p = (void *)(fifo + (*idx) * size);
   10652:	fb13 f300 	smulbb	r3, r3, r0
		i = 0U;
   10656:	428a      	cmp	r2, r1
   10658:	bf08      	it	eq
   1065a:	2100      	moveq	r1, #0
	} while (tx && tx->handle == *handle);
   1065c:	18ea      	adds	r2, r5, r3
	*idx = i;
   1065e:	7021      	strb	r1, [r4, #0]
   10660:	d0c6      	beq.n	105f0 <tx_cmplt_get+0x24>
   10662:	5ae9      	ldrh	r1, [r5, r3]
   10664:	f8b8 3000 	ldrh.w	r3, [r8]
   10668:	4299      	cmp	r1, r3
   1066a:	d0d3      	beq.n	10614 <tx_cmplt_get+0x48>
   1066c:	e7c0      	b.n	105f0 <tx_cmplt_get+0x24>
			tx->node = (void *)2;
   1066e:	2302      	movs	r3, #2
   10670:	e7df      	b.n	10632 <tx_cmplt_get+0x66>
   10672:	bf00      	nop
   10674:	20000758 	.word	0x20000758
   10678:	2000075c 	.word	0x2000075c

0001067c <ll_init>:
{
   1067c:	b510      	push	{r4, lr}
	sem_recv = sem_rx;
   1067e:	4b2c      	ldr	r3, [pc, #176]	; (10730 <ll_init+0xb4>)
{
   10680:	b086      	sub	sp, #24
	sem_recv = sem_rx;
   10682:	6018      	str	r0, [r3, #0]
	cntr_init();
   10684:	f004 fac2 	bl	14c0c <cntr_init>
	mayfly_init();
   10688:	f7fd ff56 	bl	e538 <mayfly_init>
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   1068c:	4a29      	ldr	r2, [pc, #164]	; (10734 <ll_init+0xb8>)
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   1068e:	2105      	movs	r1, #5
   10690:	7211      	strb	r1, [r2, #8]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   10692:	2102      	movs	r1, #2
   10694:	7411      	strb	r1, [r2, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_THREAD_OPS;
   10696:	7611      	strb	r1, [r2, #24]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   10698:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   1069a:	4927      	ldr	r1, [pc, #156]	; (10738 <ll_init+0xbc>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   1069c:	7013      	strb	r3, [r2, #0]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   1069e:	9105      	str	r1, [sp, #20]
   106a0:	4926      	ldr	r1, [pc, #152]	; (1073c <ll_init+0xc0>)
   106a2:	9104      	str	r1, [sp, #16]
   106a4:	4926      	ldr	r1, [pc, #152]	; (10740 <ll_init+0xc4>)
   106a6:	9103      	str	r1, [sp, #12]
   106a8:	4926      	ldr	r1, [pc, #152]	; (10744 <ll_init+0xc8>)
   106aa:	9102      	str	r1, [sp, #8]
   106ac:	210d      	movs	r1, #13
   106ae:	e9cd 2100 	strd	r2, r1, [sp]
   106b2:	2000      	movs	r0, #0
   106b4:	4a24      	ldr	r2, [pc, #144]	; (10748 <ll_init+0xcc>)
   106b6:	2108      	movs	r1, #8
   106b8:	f7fe fc76 	bl	efa8 <ticker_init>
	LL_ASSERT(!err);
   106bc:	b160      	cbz	r0, 106d8 <ll_init+0x5c>
   106be:	4a23      	ldr	r2, [pc, #140]	; (1074c <ll_init+0xd0>)
   106c0:	4923      	ldr	r1, [pc, #140]	; (10750 <ll_init+0xd4>)
   106c2:	4824      	ldr	r0, [pc, #144]	; (10754 <ll_init+0xd8>)
   106c4:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
   106c8:	f007 ff4e 	bl	18568 <printk>
   106cc:	4040      	eors	r0, r0
   106ce:	f380 8811 	msr	BASEPRI, r0
   106d2:	f04f 0003 	mov.w	r0, #3
   106d6:	df02      	svc	2
	return z_impl_k_sem_init(sem, initial_count, limit);
   106d8:	2201      	movs	r2, #1
   106da:	2100      	movs	r1, #0
   106dc:	481e      	ldr	r0, [pc, #120]	; (10758 <ll_init+0xdc>)
   106de:	f00d f9c1 	bl	1da64 <z_impl_k_sem_init>
	err = lll_init();
   106e2:	f002 fe11 	bl	13308 <lll_init>
	if (err) {
   106e6:	4604      	mov	r4, r0
   106e8:	b9f0      	cbnz	r0, 10728 <ll_init+0xac>
	err = init_reset();
   106ea:	f7ff fec3 	bl	10474 <init_reset>
	if (err) {
   106ee:	4604      	mov	r4, r0
   106f0:	b9d0      	cbnz	r0, 10728 <ll_init+0xac>
	err = lll_adv_init();
   106f2:	f003 f947 	bl	13984 <lll_adv_init>
	if (err) {
   106f6:	4604      	mov	r4, r0
   106f8:	b9b0      	cbnz	r0, 10728 <ll_init+0xac>
	err = ull_adv_init();
   106fa:	f00b ffaf 	bl	1c65c <ull_adv_init>
	if (err) {
   106fe:	4604      	mov	r4, r0
   10700:	b990      	cbnz	r0, 10728 <ll_init+0xac>
	err = lll_scan_init();
   10702:	f00c fba7 	bl	1ce54 <lll_scan_init>
	if (err) {
   10706:	4604      	mov	r4, r0
   10708:	b970      	cbnz	r0, 10728 <ll_init+0xac>
	err = ull_scan_init();
   1070a:	f00c f82b 	bl	1c764 <ull_scan_init>
	if (err) {
   1070e:	4604      	mov	r4, r0
   10710:	b950      	cbnz	r0, 10728 <ll_init+0xac>
	err = lll_conn_init();
   10712:	f00c fbca 	bl	1ceaa <lll_conn_init>
	if (err) {
   10716:	4604      	mov	r4, r0
   10718:	b930      	cbnz	r0, 10728 <ll_init+0xac>
	err = ull_conn_init();
   1071a:	f00c f9ae 	bl	1ca7a <ull_conn_init>
	if (err) {
   1071e:	4604      	mov	r4, r0
   10720:	b910      	cbnz	r0, 10728 <ll_init+0xac>
		ull_filter_reset(true);
   10722:	2001      	movs	r0, #1
   10724:	f002 fcc2 	bl	130ac <ull_filter_reset>
}
   10728:	4620      	mov	r0, r4
   1072a:	b006      	add	sp, #24
   1072c:	bd10      	pop	{r4, pc}
   1072e:	bf00      	nop
   10730:	200022f0 	.word	0x200022f0
   10734:	20002730 	.word	0x20002730
   10738:	0001d07f 	.word	0x0001d07f
   1073c:	00015525 	.word	0x00015525
   10740:	000154cd 	.word	0x000154cd
   10744:	2000248c 	.word	0x2000248c
   10748:	2000230c 	.word	0x2000230c
   1074c:	00021b90 	.word	0x00021b90
   10750:	00021c03 	.word	0x00021c03
   10754:	0001f734 	.word	0x0001f734
   10758:	200022f4 	.word	0x200022f4

0001075c <ll_reset>:
{
   1075c:	b510      	push	{r4, lr}
   1075e:	b086      	sub	sp, #24
	err = ull_adv_reset();
   10760:	f00b ff7e 	bl	1c660 <ull_adv_reset>
	LL_ASSERT(!err);
   10764:	b160      	cbz	r0, 10780 <ll_reset+0x24>
   10766:	4a3f      	ldr	r2, [pc, #252]	; (10864 <ll_reset+0x108>)
   10768:	493f      	ldr	r1, [pc, #252]	; (10868 <ll_reset+0x10c>)
   1076a:	4840      	ldr	r0, [pc, #256]	; (1086c <ll_reset+0x110>)
   1076c:	f240 236e 	movw	r3, #622	; 0x26e
   10770:	f007 fefa 	bl	18568 <printk>
   10774:	4040      	eors	r0, r0
   10776:	f380 8811 	msr	BASEPRI, r0
   1077a:	f04f 0003 	mov.w	r0, #3
   1077e:	df02      	svc	2
	err = ull_scan_reset();
   10780:	f00c f806 	bl	1c790 <ull_scan_reset>
	LL_ASSERT(!err);
   10784:	b160      	cbz	r0, 107a0 <ll_reset+0x44>
   10786:	4a37      	ldr	r2, [pc, #220]	; (10864 <ll_reset+0x108>)
   10788:	4937      	ldr	r1, [pc, #220]	; (10868 <ll_reset+0x10c>)
   1078a:	4838      	ldr	r0, [pc, #224]	; (1086c <ll_reset+0x110>)
   1078c:	f44f 731d 	mov.w	r3, #628	; 0x274
   10790:	f007 feea 	bl	18568 <printk>
   10794:	4040      	eors	r0, r0
   10796:	f380 8811 	msr	BASEPRI, r0
   1079a:	f04f 0003 	mov.w	r0, #3
   1079e:	df02      	svc	2
	err = ull_conn_reset();
   107a0:	f001 fb50 	bl	11e44 <ull_conn_reset>
	LL_ASSERT(!err);
   107a4:	b160      	cbz	r0, 107c0 <ll_reset+0x64>
   107a6:	4a2f      	ldr	r2, [pc, #188]	; (10864 <ll_reset+0x108>)
   107a8:	492f      	ldr	r1, [pc, #188]	; (10868 <ll_reset+0x10c>)
   107aa:	4830      	ldr	r0, [pc, #192]	; (1086c <ll_reset+0x110>)
   107ac:	f44f 732e 	mov.w	r3, #696	; 0x2b8
   107b0:	f007 feda 	bl	18568 <printk>
   107b4:	4040      	eors	r0, r0
   107b6:	f380 8811 	msr	BASEPRI, r0
   107ba:	f04f 0003 	mov.w	r0, #3
   107be:	df02      	svc	2
	MFIFO_INIT(tx_ack);
   107c0:	4b2b      	ldr	r3, [pc, #172]	; (10870 <ll_reset+0x114>)
   107c2:	2400      	movs	r4, #0
   107c4:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
   107c6:	4620      	mov	r0, r4
   107c8:	f002 fc70 	bl	130ac <ull_filter_reset>
	MFIFO_INIT(prep);
   107cc:	4b29      	ldr	r3, [pc, #164]	; (10874 <ll_reset+0x118>)
   107ce:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(done);
   107d0:	4b29      	ldr	r3, [pc, #164]	; (10878 <ll_reset+0x11c>)
   107d2:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(pdu_rx_free);
   107d4:	4b29      	ldr	r3, [pc, #164]	; (1087c <ll_reset+0x120>)
   107d6:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(ll_pdu_rx_free);
   107d8:	4b29      	ldr	r3, [pc, #164]	; (10880 <ll_reset+0x124>)
   107da:	805c      	strh	r4, [r3, #2]
   107dc:	2201      	movs	r2, #1
   107de:	4621      	mov	r1, r4
   107e0:	4668      	mov	r0, sp
   107e2:	f00d f93f 	bl	1da64 <z_impl_k_sem_init>
		mfy.param = &sem;
   107e6:	4b27      	ldr	r3, [pc, #156]	; (10884 <ll_reset+0x128>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   107e8:	4622      	mov	r2, r4
   107ea:	4621      	mov	r1, r4
   107ec:	2003      	movs	r0, #3
		mfy.param = &sem;
   107ee:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   107f2:	f7fd fef3 	bl	e5dc <mayfly_enqueue>
		LL_ASSERT(!retval);
   107f6:	b160      	cbz	r0, 10812 <ll_reset+0xb6>
   107f8:	4a1a      	ldr	r2, [pc, #104]	; (10864 <ll_reset+0x108>)
   107fa:	4923      	ldr	r1, [pc, #140]	; (10888 <ll_reset+0x12c>)
   107fc:	481b      	ldr	r0, [pc, #108]	; (1086c <ll_reset+0x110>)
   107fe:	f240 23ea 	movw	r3, #746	; 0x2ea
   10802:	f007 feb1 	bl	18568 <printk>
   10806:	4040      	eors	r0, r0
   10808:	f380 8811 	msr	BASEPRI, r0
   1080c:	f04f 0003 	mov.w	r0, #3
   10810:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   10812:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10816:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1081a:	4668      	mov	r0, sp
   1081c:	f006 fdfc 	bl	17418 <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
   10820:	f000 ff6c 	bl	116fc <ull_adv_reset_finalize>
	LL_ASSERT(!err);
   10824:	b160      	cbz	r0, 10840 <ll_reset+0xe4>
   10826:	4a0f      	ldr	r2, [pc, #60]	; (10864 <ll_reset+0x108>)
   10828:	490f      	ldr	r1, [pc, #60]	; (10868 <ll_reset+0x10c>)
   1082a:	4810      	ldr	r0, [pc, #64]	; (1086c <ll_reset+0x110>)
   1082c:	f240 23f7 	movw	r3, #759	; 0x2f7
   10830:	f007 fe9a 	bl	18568 <printk>
   10834:	4040      	eors	r0, r0
   10836:	f380 8811 	msr	BASEPRI, r0
   1083a:	f04f 0003 	mov.w	r0, #3
   1083e:	df02      	svc	2
	err = init_reset();
   10840:	f7ff fe18 	bl	10474 <init_reset>
	LL_ASSERT(!err);
   10844:	b160      	cbz	r0, 10860 <ll_reset+0x104>
   10846:	4a07      	ldr	r2, [pc, #28]	; (10864 <ll_reset+0x108>)
   10848:	4907      	ldr	r1, [pc, #28]	; (10868 <ll_reset+0x10c>)
   1084a:	4808      	ldr	r0, [pc, #32]	; (1086c <ll_reset+0x110>)
   1084c:	f44f 733f 	mov.w	r3, #764	; 0x2fc
   10850:	f007 fe8a 	bl	18568 <printk>
   10854:	4040      	eors	r0, r0
   10856:	f380 8811 	msr	BASEPRI, r0
   1085a:	f04f 0003 	mov.w	r0, #3
   1085e:	df02      	svc	2
}
   10860:	b006      	add	sp, #24
   10862:	bd10      	pop	{r4, pc}
   10864:	00021b90 	.word	0x00021b90
   10868:	00021c03 	.word	0x00021c03
   1086c:	0001f734 	.word	0x0001f734
   10870:	20000758 	.word	0x20000758
   10874:	20000654 	.word	0x20000654
   10878:	20000604 	.word	0x20000604
   1087c:	20000628 	.word	0x20000628
   10880:	20000618 	.word	0x20000618
   10884:	20000784 	.word	0x20000784
   10888:	00021c2d 	.word	0x00021c2d

0001088c <ll_rx_get>:
{
   1088c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   10890:	4f27      	ldr	r7, [pc, #156]	; (10930 <ll_rx_get+0xa4>)
   10892:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 10940 <ll_rx_get+0xb4>
{
   10896:	4605      	mov	r5, r0
   10898:	460c      	mov	r4, r1
   1089a:	46b9      	mov	r9, r7
	*node_rx = NULL;
   1089c:	2300      	movs	r3, #0
   1089e:	602b      	str	r3, [r5, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   108a0:	e9d7 0100 	ldrd	r0, r1, [r7]
   108a4:	aa01      	add	r2, sp, #4
   108a6:	f00b fbb9 	bl	1c01c <memq_peek>
	if (link) {
   108aa:	4606      	mov	r6, r0
   108ac:	2800      	cmp	r0, #0
   108ae:	d037      	beq.n	10920 <ll_rx_get+0x94>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   108b0:	9b01      	ldr	r3, [sp, #4]
   108b2:	4920      	ldr	r1, [pc, #128]	; (10934 <ll_rx_get+0xa8>)
   108b4:	781a      	ldrb	r2, [r3, #0]
   108b6:	4620      	mov	r0, r4
   108b8:	f7ff fe88 	bl	105cc <tx_cmplt_get>
		if (!cmplt) {
   108bc:	bb68      	cbnz	r0, 1091a <ll_rx_get+0x8e>
			f = mfifo_tx_ack.f;
   108be:	f898 3002 	ldrb.w	r3, [r8, #2]
   108c2:	f88d 3001 	strb.w	r3, [sp, #1]
				cmplt_curr = tx_cmplt_get(&h, &f,
   108c6:	f898 2003 	ldrb.w	r2, [r8, #3]
   108ca:	4682      	mov	sl, r0
   108cc:	f10d 0101 	add.w	r1, sp, #1
   108d0:	f10d 0002 	add.w	r0, sp, #2
   108d4:	f7ff fe7a 	bl	105cc <tx_cmplt_get>
			} while ((cmplt_prev != 0U) ||
   108d8:	ea4a 0200 	orr.w	r2, sl, r0
   108dc:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   108e0:	d1f1      	bne.n	108c6 <ll_rx_get+0x3a>
			if (rx->type == NODE_RX_TYPE_RELEASE) {
   108e2:	9b01      	ldr	r3, [sp, #4]
   108e4:	f893 a004 	ldrb.w	sl, [r3, #4]
   108e8:	f1ba 0f01 	cmp.w	sl, #1
   108ec:	d113      	bne.n	10916 <ll_rx_get+0x8a>
				(void)memq_dequeue(memq_ll_rx.tail,
   108ee:	4639      	mov	r1, r7
   108f0:	f8d9 0004 	ldr.w	r0, [r9, #4]
   108f4:	f00b fb9a 	bl	1c02c <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
   108f8:	490f      	ldr	r1, [pc, #60]	; (10938 <ll_rx_get+0xac>)
   108fa:	4630      	mov	r0, r6
   108fc:	f00b fb42 	bl	1bf84 <mem_release>
				ll_rx_link_inc_quota(1);
   10900:	4650      	mov	r0, sl
   10902:	f7ff fc4f 	bl	101a4 <ll_rx_link_inc_quota>
				mem_release(rx, &mem_pdu_rx.free);
   10906:	9801      	ldr	r0, [sp, #4]
   10908:	490c      	ldr	r1, [pc, #48]	; (1093c <ll_rx_get+0xb0>)
   1090a:	f00b fb3b 	bl	1bf84 <mem_release>
				rx_alloc(1);
   1090e:	4650      	mov	r0, sl
   10910:	f7ff fd34 	bl	1037c <rx_alloc>
				goto ll_rx_get_again;
   10914:	e7c2      	b.n	1089c <ll_rx_get+0x10>
			*node_rx = rx;
   10916:	602b      	str	r3, [r5, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   10918:	4610      	mov	r0, r2
}
   1091a:	b002      	add	sp, #8
   1091c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
   10920:	f898 2003 	ldrb.w	r2, [r8, #3]
   10924:	4903      	ldr	r1, [pc, #12]	; (10934 <ll_rx_get+0xa8>)
   10926:	4620      	mov	r0, r4
   10928:	f7ff fe50 	bl	105cc <tx_cmplt_get>
   1092c:	e7f5      	b.n	1091a <ll_rx_get+0x8e>
   1092e:	bf00      	nop
   10930:	200022d8 	.word	0x200022d8
   10934:	2000075a 	.word	0x2000075a
   10938:	20001eb0 	.word	0x20001eb0
   1093c:	20001f2c 	.word	0x20001f2c
   10940:	20000758 	.word	0x20000758

00010944 <ll_rx_dequeue>:
{
   10944:	b573      	push	{r0, r1, r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   10946:	4948      	ldr	r1, [pc, #288]	; (10a68 <ll_rx_dequeue+0x124>)
	struct node_rx_hdr *rx = NULL;
   10948:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   1094a:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
   1094c:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   1094e:	aa01      	add	r2, sp, #4
   10950:	f00b fb6c 	bl	1c02c <memq_dequeue>
	LL_ASSERT(link);
   10954:	4604      	mov	r4, r0
   10956:	b960      	cbnz	r0, 10972 <ll_rx_dequeue+0x2e>
   10958:	4a44      	ldr	r2, [pc, #272]	; (10a6c <ll_rx_dequeue+0x128>)
   1095a:	4945      	ldr	r1, [pc, #276]	; (10a70 <ll_rx_dequeue+0x12c>)
   1095c:	4845      	ldr	r0, [pc, #276]	; (10a74 <ll_rx_dequeue+0x130>)
   1095e:	f240 334e 	movw	r3, #846	; 0x34e
   10962:	f007 fe01 	bl	18568 <printk>
   10966:	4040      	eors	r0, r0
   10968:	f380 8811 	msr	BASEPRI, r0
   1096c:	f04f 0003 	mov.w	r0, #3
   10970:	df02      	svc	2
	mem_release(link, &mem_link_rx.free);
   10972:	4941      	ldr	r1, [pc, #260]	; (10a78 <ll_rx_dequeue+0x134>)
   10974:	4620      	mov	r0, r4
   10976:	f00b fb05 	bl	1bf84 <mem_release>
	switch (rx->type) {
   1097a:	9b01      	ldr	r3, [sp, #4]
   1097c:	7919      	ldrb	r1, [r3, #4]
   1097e:	2919      	cmp	r1, #25
   10980:	d86f      	bhi.n	10a62 <ll_rx_dequeue+0x11e>
   10982:	483e      	ldr	r0, [pc, #248]	; (10a7c <ll_rx_dequeue+0x138>)
   10984:	2201      	movs	r2, #1
   10986:	408a      	lsls	r2, r1
   10988:	4202      	tst	r2, r0
   1098a:	d15a      	bne.n	10a42 <ll_rx_dequeue+0xfe>
   1098c:	02d2      	lsls	r2, r2, #11
   1098e:	d568      	bpl.n	10a62 <ll_rx_dequeue+0x11e>
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   10990:	7f1a      	ldrb	r2, [r3, #28]
   10992:	2a3c      	cmp	r2, #60	; 0x3c
   10994:	d002      	beq.n	1099c <ll_rx_dequeue+0x58>
   10996:	7f59      	ldrb	r1, [r3, #29]
   10998:	2900      	cmp	r1, #0
   1099a:	d04d      	beq.n	10a38 <ll_rx_dequeue+0xf4>
			lll = ftr->param;
   1099c:	689e      	ldr	r6, [r3, #8]
			if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   1099e:	2a3c      	cmp	r2, #60	; 0x3c
			adv = HDR_LLL2ULL(lll);
   109a0:	6835      	ldr	r5, [r6, #0]
			if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   109a2:	d140      	bne.n	10a26 <ll_rx_dequeue+0xe2>
				conn_lll = lll->conn;
   109a4:	6874      	ldr	r4, [r6, #4]
				LL_ASSERT(conn_lll);
   109a6:	b964      	cbnz	r4, 109c2 <ll_rx_dequeue+0x7e>
   109a8:	4a30      	ldr	r2, [pc, #192]	; (10a6c <ll_rx_dequeue+0x128>)
   109aa:	4935      	ldr	r1, [pc, #212]	; (10a80 <ll_rx_dequeue+0x13c>)
   109ac:	4831      	ldr	r0, [pc, #196]	; (10a74 <ll_rx_dequeue+0x130>)
   109ae:	f240 33c2 	movw	r3, #962	; 0x3c2
   109b2:	f007 fdd9 	bl	18568 <printk>
   109b6:	4040      	eors	r0, r0
   109b8:	f380 8811 	msr	BASEPRI, r0
   109bc:	f04f 0003 	mov.w	r0, #3
   109c0:	df02      	svc	2
				lll->conn = NULL;
   109c2:	2300      	movs	r3, #0
   109c4:	6073      	str	r3, [r6, #4]
				LL_ASSERT(!conn_lll->link_tx_free);
   109c6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   109c8:	b163      	cbz	r3, 109e4 <ll_rx_dequeue+0xa0>
   109ca:	4a28      	ldr	r2, [pc, #160]	; (10a6c <ll_rx_dequeue+0x128>)
   109cc:	492d      	ldr	r1, [pc, #180]	; (10a84 <ll_rx_dequeue+0x140>)
   109ce:	4829      	ldr	r0, [pc, #164]	; (10a74 <ll_rx_dequeue+0x130>)
   109d0:	f240 33c5 	movw	r3, #965	; 0x3c5
   109d4:	f007 fdc8 	bl	18568 <printk>
   109d8:	4040      	eors	r0, r0
   109da:	f380 8811 	msr	BASEPRI, r0
   109de:	f04f 0003 	mov.w	r0, #3
   109e2:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
   109e4:	f104 0140 	add.w	r1, r4, #64	; 0x40
   109e8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   109ec:	f00b fb04 	bl	1bff8 <memq_deinit>
				LL_ASSERT(link);
   109f0:	4606      	mov	r6, r0
   109f2:	b960      	cbnz	r0, 10a0e <ll_rx_dequeue+0xca>
   109f4:	4a1d      	ldr	r2, [pc, #116]	; (10a6c <ll_rx_dequeue+0x128>)
   109f6:	491e      	ldr	r1, [pc, #120]	; (10a70 <ll_rx_dequeue+0x12c>)
   109f8:	481e      	ldr	r0, [pc, #120]	; (10a74 <ll_rx_dequeue+0x130>)
   109fa:	f44f 7372 	mov.w	r3, #968	; 0x3c8
   109fe:	f007 fdb3 	bl	18568 <printk>
   10a02:	4040      	eors	r0, r0
   10a04:	f380 8811 	msr	BASEPRI, r0
   10a08:	f04f 0003 	mov.w	r0, #3
   10a0c:	df02      	svc	2
				ll_conn_release(conn);
   10a0e:	6820      	ldr	r0, [r4, #0]
				conn_lll->link_tx_free = link;
   10a10:	64e6      	str	r6, [r4, #76]	; 0x4c
				ll_conn_release(conn);
   10a12:	f001 f91d 	bl	11c50 <ll_conn_release>
			adv->is_enabled = 0U;
   10a16:	f895 304a 	ldrb.w	r3, [r5, #74]	; 0x4a
   10a1a:	f36f 0300 	bfc	r3, #0, #1
   10a1e:	f885 304a 	strb.w	r3, [r5, #74]	; 0x4a
}
   10a22:	b002      	add	sp, #8
   10a24:	bd70      	pop	{r4, r5, r6, pc}
				if (adv->node_rx_cc_free) {
   10a26:	6c68      	ldr	r0, [r5, #68]	; 0x44
   10a28:	2800      	cmp	r0, #0
   10a2a:	d0f4      	beq.n	10a16 <ll_rx_dequeue+0xd2>
					adv->node_rx_cc_free = NULL;
   10a2c:	2300      	movs	r3, #0
					mem_release(rx_free, &mem_pdu_rx.free);
   10a2e:	4916      	ldr	r1, [pc, #88]	; (10a88 <ll_rx_dequeue+0x144>)
					adv->node_rx_cc_free = NULL;
   10a30:	646b      	str	r3, [r5, #68]	; 0x44
					mem_release(rx_free, &mem_pdu_rx.free);
   10a32:	f00b faa7 	bl	1bf84 <mem_release>
   10a36:	e7ee      	b.n	10a16 <ll_rx_dequeue+0xd2>
			LL_ASSERT(0);
   10a38:	f240 33ff 	movw	r3, #1023	; 0x3ff
		LL_ASSERT(0);
   10a3c:	4a0b      	ldr	r2, [pc, #44]	; (10a6c <ll_rx_dequeue+0x128>)
   10a3e:	4913      	ldr	r1, [pc, #76]	; (10a8c <ll_rx_dequeue+0x148>)
   10a40:	e005      	b.n	10a4e <ll_rx_dequeue+0x10a>
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   10a42:	2900      	cmp	r1, #0
   10a44:	d1ed      	bne.n	10a22 <ll_rx_dequeue+0xde>
   10a46:	4a09      	ldr	r2, [pc, #36]	; (10a6c <ll_rx_dequeue+0x128>)
   10a48:	4911      	ldr	r1, [pc, #68]	; (10a90 <ll_rx_dequeue+0x14c>)
   10a4a:	f240 4364 	movw	r3, #1124	; 0x464
		LL_ASSERT(0);
   10a4e:	4809      	ldr	r0, [pc, #36]	; (10a74 <ll_rx_dequeue+0x130>)
   10a50:	f007 fd8a 	bl	18568 <printk>
   10a54:	4040      	eors	r0, r0
   10a56:	f380 8811 	msr	BASEPRI, r0
   10a5a:	f04f 0003 	mov.w	r0, #3
   10a5e:	df02      	svc	2
}
   10a60:	e7df      	b.n	10a22 <ll_rx_dequeue+0xde>
		LL_ASSERT(0);
   10a62:	f44f 638d 	mov.w	r3, #1128	; 0x468
   10a66:	e7e9      	b.n	10a3c <ll_rx_dequeue+0xf8>
   10a68:	200022d8 	.word	0x200022d8
   10a6c:	00021b90 	.word	0x00021b90
   10a70:	00021474 	.word	0x00021474
   10a74:	0001f734 	.word	0x0001f734
   10a78:	20001eb0 	.word	0x20001eb0
   10a7c:	02e00029 	.word	0x02e00029
   10a80:	00021c35 	.word	0x00021c35
   10a84:	00021c3e 	.word	0x00021c3e
   10a88:	20001f2c 	.word	0x20001f2c
   10a8c:	00020b9a 	.word	0x00020b9a
   10a90:	00021c56 	.word	0x00021c56

00010a94 <ll_rx_mem_release>:
{
   10a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = *node_rx;
   10a98:	6804      	ldr	r4, [r0, #0]
			LL_ASSERT(0);
   10a9a:	4d49      	ldr	r5, [pc, #292]	; (10bc0 <ll_rx_mem_release+0x12c>)
   10a9c:	f8df 813c 	ldr.w	r8, [pc, #316]	; 10bdc <ll_rx_mem_release+0x148>
   10aa0:	4e48      	ldr	r6, [pc, #288]	; (10bc4 <ll_rx_mem_release+0x130>)
{
   10aa2:	4607      	mov	r7, r0
	while (rx) {
   10aa4:	b92c      	cbnz	r4, 10ab2 <ll_rx_mem_release+0x1e>
	*node_rx = rx;
   10aa6:	603c      	str	r4, [r7, #0]
	rx_alloc(UINT8_MAX);
   10aa8:	20ff      	movs	r0, #255	; 0xff
}
   10aaa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx_alloc(UINT8_MAX);
   10aae:	f7ff bc65 	b.w	1037c <rx_alloc>
		switch (rx_free->type) {
   10ab2:	7923      	ldrb	r3, [r4, #4]
		rx = rx->next;
   10ab4:	f8d4 9000 	ldr.w	r9, [r4]
		switch (rx_free->type) {
   10ab8:	2b05      	cmp	r3, #5
   10aba:	d813      	bhi.n	10ae4 <ll_rx_mem_release+0x50>
   10abc:	2201      	movs	r2, #1
   10abe:	fa02 f303 	lsl.w	r3, r2, r3
   10ac2:	f013 0f29 	tst.w	r3, #41	; 0x29
   10ac6:	d13a      	bne.n	10b3e <ll_rx_mem_release+0xaa>
			LL_ASSERT(0);
   10ac8:	f240 534d 	movw	r3, #1357	; 0x54d
   10acc:	462a      	mov	r2, r5
   10ace:	4641      	mov	r1, r8
   10ad0:	4630      	mov	r0, r6
   10ad2:	f007 fd49 	bl	18568 <printk>
   10ad6:	4040      	eors	r0, r0
   10ad8:	f380 8811 	msr	BASEPRI, r0
   10adc:	f04f 0003 	mov.w	r0, #3
   10ae0:	df02      	svc	2
			break;
   10ae2:	e01c      	b.n	10b1e <ll_rx_mem_release+0x8a>
		switch (rx_free->type) {
   10ae4:	3b14      	subs	r3, #20
   10ae6:	b2da      	uxtb	r2, r3
   10ae8:	2a05      	cmp	r2, #5
   10aea:	d8ed      	bhi.n	10ac8 <ll_rx_mem_release+0x34>
   10aec:	2b05      	cmp	r3, #5
   10aee:	d8eb      	bhi.n	10ac8 <ll_rx_mem_release+0x34>
   10af0:	a201      	add	r2, pc, #4	; (adr r2, 10af8 <ll_rx_mem_release+0x64>)
   10af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10af6:	bf00      	nop
   10af8:	00010b11 	.word	0x00010b11
   10afc:	00010b65 	.word	0x00010b65
   10b00:	00010b3f 	.word	0x00010b3f
   10b04:	00010b3f 	.word	0x00010b3f
   10b08:	00010ac9 	.word	0x00010ac9
   10b0c:	00010b3f 	.word	0x00010b3f
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   10b10:	7f23      	ldrb	r3, [r4, #28]
   10b12:	2b3c      	cmp	r3, #60	; 0x3c
   10b14:	d105      	bne.n	10b22 <ll_rx_mem_release+0x8e>
			mem_release(rx_free, &mem_pdu_rx.free);
   10b16:	492c      	ldr	r1, [pc, #176]	; (10bc8 <ll_rx_mem_release+0x134>)
   10b18:	4620      	mov	r0, r4
   10b1a:	f00b fa33 	bl	1bf84 <mem_release>
{
   10b1e:	464c      	mov	r4, r9
   10b20:	e7c0      	b.n	10aa4 <ll_rx_mem_release+0x10>
				LL_ASSERT(!cc->status);
   10b22:	b163      	cbz	r3, 10b3e <ll_rx_mem_release+0xaa>
   10b24:	4929      	ldr	r1, [pc, #164]	; (10bcc <ll_rx_mem_release+0x138>)
   10b26:	f240 43be 	movw	r3, #1214	; 0x4be
   10b2a:	462a      	mov	r2, r5
   10b2c:	4630      	mov	r0, r6
   10b2e:	f007 fd1b 	bl	18568 <printk>
   10b32:	4040      	eors	r0, r0
   10b34:	f380 8811 	msr	BASEPRI, r0
   10b38:	f04f 0003 	mov.w	r0, #3
   10b3c:	df02      	svc	2
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   10b3e:	7923      	ldrb	r3, [r4, #4]
   10b40:	b963      	cbnz	r3, 10b5c <ll_rx_mem_release+0xc8>
   10b42:	4923      	ldr	r1, [pc, #140]	; (10bd0 <ll_rx_mem_release+0x13c>)
   10b44:	f44f 63a2 	mov.w	r3, #1296	; 0x510
   10b48:	462a      	mov	r2, r5
   10b4a:	4630      	mov	r0, r6
   10b4c:	f007 fd0c 	bl	18568 <printk>
   10b50:	4040      	eors	r0, r0
   10b52:	f380 8811 	msr	BASEPRI, r0
   10b56:	f04f 0003 	mov.w	r0, #3
   10b5a:	df02      	svc	2
			ll_rx_link_inc_quota(1);
   10b5c:	2001      	movs	r0, #1
   10b5e:	f7ff fb21 	bl	101a4 <ll_rx_link_inc_quota>
   10b62:	e7d8      	b.n	10b16 <ll_rx_mem_release+0x82>
			conn = ll_conn_get(rx_free->handle);
   10b64:	88e0      	ldrh	r0, [r4, #6]
   10b66:	f001 f8ef 	bl	11d48 <ll_conn_get>
			LL_ASSERT(!conn->lll.link_tx_free);
   10b6a:	6e83      	ldr	r3, [r0, #104]	; 0x68
			conn = ll_conn_get(rx_free->handle);
   10b6c:	4604      	mov	r4, r0
			LL_ASSERT(!conn->lll.link_tx_free);
   10b6e:	b163      	cbz	r3, 10b8a <ll_rx_mem_release+0xf6>
   10b70:	4918      	ldr	r1, [pc, #96]	; (10bd4 <ll_rx_mem_release+0x140>)
   10b72:	f44f 63a8 	mov.w	r3, #1344	; 0x540
   10b76:	462a      	mov	r2, r5
   10b78:	4630      	mov	r0, r6
   10b7a:	f007 fcf5 	bl	18568 <printk>
   10b7e:	4040      	eors	r0, r0
   10b80:	f380 8811 	msr	BASEPRI, r0
   10b84:	f04f 0003 	mov.w	r0, #3
   10b88:	df02      	svc	2
			link = memq_deinit(&conn->lll.memq_tx.head,
   10b8a:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   10b8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
   10b92:	f00b fa31 	bl	1bff8 <memq_deinit>
			LL_ASSERT(link);
   10b96:	4682      	mov	sl, r0
   10b98:	b960      	cbnz	r0, 10bb4 <ll_rx_mem_release+0x120>
   10b9a:	490f      	ldr	r1, [pc, #60]	; (10bd8 <ll_rx_mem_release+0x144>)
   10b9c:	f240 5343 	movw	r3, #1347	; 0x543
   10ba0:	462a      	mov	r2, r5
   10ba2:	4630      	mov	r0, r6
   10ba4:	f007 fce0 	bl	18568 <printk>
   10ba8:	4040      	eors	r0, r0
   10baa:	f380 8811 	msr	BASEPRI, r0
   10bae:	f04f 0003 	mov.w	r0, #3
   10bb2:	df02      	svc	2
			conn->lll.link_tx_free = link;
   10bb4:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
			ll_conn_release(conn);
   10bb8:	4620      	mov	r0, r4
   10bba:	f001 f849 	bl	11c50 <ll_conn_release>
		break;
   10bbe:	e7ae      	b.n	10b1e <ll_rx_mem_release+0x8a>
   10bc0:	00021b90 	.word	0x00021b90
   10bc4:	0001f734 	.word	0x0001f734
   10bc8:	20001f2c 	.word	0x20001f2c
   10bcc:	00021c74 	.word	0x00021c74
   10bd0:	00021c80 	.word	0x00021c80
   10bd4:	00021ca3 	.word	0x00021ca3
   10bd8:	00021474 	.word	0x00021474
   10bdc:	00020b9a 	.word	0x00020b9a

00010be0 <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
   10be0:	4801      	ldr	r0, [pc, #4]	; (10be8 <ll_rx_link_alloc+0x8>)
   10be2:	f00b b9b6 	b.w	1bf52 <mem_acquire>
   10be6:	bf00      	nop
   10be8:	20001eb0 	.word	0x20001eb0

00010bec <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
   10bec:	4901      	ldr	r1, [pc, #4]	; (10bf4 <ll_rx_link_release+0x8>)
   10bee:	f00b b9c9 	b.w	1bf84 <mem_release>
   10bf2:	bf00      	nop
   10bf4:	20001eb0 	.word	0x20001eb0

00010bf8 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
   10bf8:	4801      	ldr	r0, [pc, #4]	; (10c00 <ll_rx_alloc+0x8>)
   10bfa:	f00b b9aa 	b.w	1bf52 <mem_acquire>
   10bfe:	bf00      	nop
   10c00:	20001f2c 	.word	0x20001f2c

00010c04 <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
   10c04:	4901      	ldr	r1, [pc, #4]	; (10c0c <ll_rx_release+0x8>)
   10c06:	f00b b9bd 	b.w	1bf84 <mem_release>
   10c0a:	bf00      	nop
   10c0c:	20001f2c 	.word	0x20001f2c

00010c10 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
   10c10:	4b02      	ldr	r3, [pc, #8]	; (10c1c <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   10c12:	4a03      	ldr	r2, [pc, #12]	; (10c20 <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   10c14:	78db      	ldrb	r3, [r3, #3]
   10c16:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   10c18:	f00b b9f9 	b.w	1c00e <memq_enqueue>
   10c1c:	20000758 	.word	0x20000758
   10c20:	200022dc 	.word	0x200022dc

00010c24 <ll_rx_sched>:
	k_sem_give(sem_recv);
   10c24:	4b01      	ldr	r3, [pc, #4]	; (10c2c <ll_rx_sched+0x8>)
   10c26:	6818      	ldr	r0, [r3, #0]
	z_impl_k_sem_give(sem);
   10c28:	f006 bbd0 	b.w	173cc <z_impl_k_sem_give>
   10c2c:	200022f0 	.word	0x200022f0

00010c30 <rx_demux>:
{
   10c30:	b5f0      	push	{r4, r5, r6, r7, lr}
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   10c32:	4d3d      	ldr	r5, [pc, #244]	; (10d28 <rx_demux+0xf8>)
		LL_ASSERT(0);
   10c34:	4f3d      	ldr	r7, [pc, #244]	; (10d2c <rx_demux+0xfc>)
{
   10c36:	b085      	sub	sp, #20
   10c38:	462e      	mov	r6, r5
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   10c3a:	e9d5 0100 	ldrd	r0, r1, [r5]
   10c3e:	aa01      	add	r2, sp, #4
   10c40:	f00b f9ec 	bl	1c01c <memq_peek>
		if (link) {
   10c44:	4604      	mov	r4, r0
   10c46:	2800      	cmp	r0, #0
   10c48:	d05d      	beq.n	10d06 <rx_demux+0xd6>
			LL_ASSERT(rx);
   10c4a:	9b01      	ldr	r3, [sp, #4]
   10c4c:	b963      	cbnz	r3, 10c68 <rx_demux+0x38>
   10c4e:	4938      	ldr	r1, [pc, #224]	; (10d30 <rx_demux+0x100>)
   10c50:	4838      	ldr	r0, [pc, #224]	; (10d34 <rx_demux+0x104>)
   10c52:	f640 0319 	movw	r3, #2073	; 0x819
   10c56:	463a      	mov	r2, r7
   10c58:	f007 fc86 	bl	18568 <printk>
   10c5c:	4040      	eors	r0, r0
   10c5e:	f380 8811 	msr	BASEPRI, r0
   10c62:	f04f 0003 	mov.w	r0, #3
   10c66:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   10c68:	9b01      	ldr	r3, [sp, #4]
   10c6a:	aa02      	add	r2, sp, #8
   10c6c:	7818      	ldrb	r0, [r3, #0]
   10c6e:	f10d 0102 	add.w	r1, sp, #2
   10c72:	f001 ffdd 	bl	12c30 <ull_conn_ack_by_last_peek>
			if (link_tx) {
   10c76:	4602      	mov	r2, r0
   10c78:	9801      	ldr	r0, [sp, #4]
   10c7a:	b132      	cbz	r2, 10c8a <rx_demux+0x5a>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
   10c7c:	9b02      	ldr	r3, [sp, #8]
   10c7e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   10c82:	7800      	ldrb	r0, [r0, #0]
				rx_demux_conn_tx_ack(ack_last, handle,
   10c84:	f00b fcad 	bl	1c5e2 <rx_demux_conn_tx_ack>
	} while (link);
   10c88:	e7d7      	b.n	10c3a <rx_demux+0xa>
				nack = rx_demux_rx(link, rx);
   10c8a:	9003      	str	r0, [sp, #12]
	switch (rx->type) {
   10c8c:	7903      	ldrb	r3, [r0, #4]
   10c8e:	2b05      	cmp	r3, #5
   10c90:	d016      	beq.n	10cc0 <rx_demux+0x90>
   10c92:	d811      	bhi.n	10cb8 <rx_demux+0x88>
   10c94:	2b01      	cmp	r3, #1
   10c96:	d013      	beq.n	10cc0 <rx_demux+0x90>
   10c98:	2b03      	cmp	r3, #3
   10c9a:	d021      	beq.n	10ce0 <rx_demux+0xb0>
		LL_ASSERT(0);
   10c9c:	4926      	ldr	r1, [pc, #152]	; (10d38 <rx_demux+0x108>)
   10c9e:	4825      	ldr	r0, [pc, #148]	; (10d34 <rx_demux+0x104>)
   10ca0:	f640 136a 	movw	r3, #2410	; 0x96a
   10ca4:	463a      	mov	r2, r7
   10ca6:	f007 fc5f 	bl	18568 <printk>
   10caa:	4040      	eors	r0, r0
   10cac:	f380 8811 	msr	BASEPRI, r0
   10cb0:	f04f 0003 	mov.w	r0, #3
   10cb4:	df02      	svc	2
			if (nack) {
   10cb6:	e7c0      	b.n	10c3a <rx_demux+0xa>
	switch (rx->type) {
   10cb8:	2b14      	cmp	r3, #20
   10cba:	d008      	beq.n	10cce <rx_demux+0x9e>
   10cbc:	2b15      	cmp	r3, #21
   10cbe:	d1ed      	bne.n	10c9c <rx_demux+0x6c>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   10cc0:	4629      	mov	r1, r5
   10cc2:	6870      	ldr	r0, [r6, #4]
   10cc4:	2200      	movs	r2, #0
   10cc6:	f00b f9b1 	bl	1c02c <memq_dequeue>
		ll_rx_put(link, rx);
   10cca:	9903      	ldr	r1, [sp, #12]
   10ccc:	e015      	b.n	10cfa <rx_demux+0xca>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   10cce:	4629      	mov	r1, r5
   10cd0:	6870      	ldr	r0, [r6, #4]
   10cd2:	f00b f9ab 	bl	1c02c <memq_dequeue>
		ull_conn_setup(link, rx);
   10cd6:	9903      	ldr	r1, [sp, #12]
   10cd8:	4620      	mov	r0, r4
   10cda:	f001 f8e7 	bl	11eac <ull_conn_setup>
			if (nack) {
   10cde:	e7ac      	b.n	10c3a <rx_demux+0xa>
		nack = ull_conn_rx(link, (void *)&rx);
   10ce0:	a903      	add	r1, sp, #12
   10ce2:	4620      	mov	r0, r4
   10ce4:	f001 f902 	bl	11eec <ull_conn_rx>
		if (nack) {
   10ce8:	4602      	mov	r2, r0
   10cea:	b9d0      	cbnz	r0, 10d22 <rx_demux+0xf2>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   10cec:	4629      	mov	r1, r5
   10cee:	6870      	ldr	r0, [r6, #4]
   10cf0:	f00b f99c 	bl	1c02c <memq_dequeue>
		if (rx) {
   10cf4:	9903      	ldr	r1, [sp, #12]
   10cf6:	2900      	cmp	r1, #0
   10cf8:	d09f      	beq.n	10c3a <rx_demux+0xa>
		ll_rx_put(link, rx);
   10cfa:	4620      	mov	r0, r4
   10cfc:	f7ff ff88 	bl	10c10 <ll_rx_put>
		ll_rx_sched();
   10d00:	f7ff ff90 	bl	10c24 <ll_rx_sched>
			if (nack) {
   10d04:	e799      	b.n	10c3a <rx_demux+0xa>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
   10d06:	aa03      	add	r2, sp, #12
   10d08:	a902      	add	r1, sp, #8
   10d0a:	f10d 0002 	add.w	r0, sp, #2
   10d0e:	f001 ff77 	bl	12c00 <ull_conn_ack_peek>
			if (link) {
   10d12:	4602      	mov	r2, r0
   10d14:	b128      	cbz	r0, 10d22 <rx_demux+0xf2>
				rx_demux_conn_tx_ack(ack_last, handle,
   10d16:	9b03      	ldr	r3, [sp, #12]
   10d18:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   10d1c:	f89d 0002 	ldrb.w	r0, [sp, #2]
   10d20:	e7b0      	b.n	10c84 <rx_demux+0x54>
}
   10d22:	b005      	add	sp, #20
   10d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10d26:	bf00      	nop
   10d28:	200022e8 	.word	0x200022e8
   10d2c:	00021b90 	.word	0x00021b90
   10d30:	0002235b 	.word	0x0002235b
   10d34:	0001f734 	.word	0x0001f734
   10d38:	00020b9a 	.word	0x00020b9a

00010d3c <ll_pdu_rx_alloc_peek>:
{
   10d3c:	b510      	push	{r4, lr}
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   10d3e:	4a0a      	ldr	r2, [pc, #40]	; (10d68 <ll_pdu_rx_alloc_peek+0x2c>)
   10d40:	7891      	ldrb	r1, [r2, #2]
   10d42:	78d4      	ldrb	r4, [r2, #3]
   10d44:	7853      	ldrb	r3, [r2, #1]
	if (last >= first) {
   10d46:	42a1      	cmp	r1, r4
		return count - first + last;
   10d48:	bf8a      	itet	hi
   10d4a:	1a5b      	subhi	r3, r3, r1
		return last - first;
   10d4c:	1a63      	subls	r3, r4, r1
		return count - first + last;
   10d4e:	191b      	addhi	r3, r3, r4
   10d50:	b2db      	uxtb	r3, r3
   10d52:	4298      	cmp	r0, r3
   10d54:	d806      	bhi.n	10d64 <ll_pdu_rx_alloc_peek+0x28>
	if (first == last) {
   10d56:	42a1      	cmp	r1, r4
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   10d58:	7813      	ldrb	r3, [r2, #0]
   10d5a:	d003      	beq.n	10d64 <ll_pdu_rx_alloc_peek+0x28>
	return *((void **)(fifo + first * size));
   10d5c:	fb01 2203 	mla	r2, r1, r3, r2
   10d60:	6850      	ldr	r0, [r2, #4]
}
   10d62:	bd10      	pop	{r4, pc}
		return NULL;
   10d64:	2000      	movs	r0, #0
   10d66:	e7fc      	b.n	10d62 <ll_pdu_rx_alloc_peek+0x26>
   10d68:	20000618 	.word	0x20000618

00010d6c <ll_pdu_rx_alloc>:
{
   10d6c:	b510      	push	{r4, lr}
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   10d6e:	4a09      	ldr	r2, [pc, #36]	; (10d94 <ll_pdu_rx_alloc+0x28>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
   10d70:	7893      	ldrb	r3, [r2, #2]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
   10d72:	78d0      	ldrb	r0, [r2, #3]
   10d74:	7811      	ldrb	r1, [r2, #0]
   10d76:	7854      	ldrb	r4, [r2, #1]
   10d78:	4298      	cmp	r0, r3
   10d7a:	d009      	beq.n	10d90 <ll_pdu_rx_alloc+0x24>
	}

	/* Obtain address of head buffer.
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));
   10d7c:	fb03 2101 	mla	r1, r3, r1, r2

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
   10d80:	3301      	adds	r3, #1
   10d82:	b2db      	uxtb	r3, r3
	if (_first == count) {
		_first = 0U;
   10d84:	429c      	cmp	r4, r3
   10d86:	bf08      	it	eq
   10d88:	2300      	moveq	r3, #0
	mem = *((void **)(fifo + _first * size));
   10d8a:	6848      	ldr	r0, [r1, #4]
	}

	*first = _first; /* Write back read-index */
   10d8c:	7093      	strb	r3, [r2, #2]
}
   10d8e:	bd10      	pop	{r4, pc}
		return NULL;
   10d90:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   10d92:	e7fc      	b.n	10d8e <ll_pdu_rx_alloc+0x22>
   10d94:	20000618 	.word	0x20000618

00010d98 <ll_tx_ack_put>:
{
   10d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
   10d9a:	4a12      	ldr	r2, [pc, #72]	; (10de4 <ll_tx_ack_put+0x4c>)
   10d9c:	78d4      	ldrb	r4, [r2, #3]
	if (last == count) {
   10d9e:	7857      	ldrb	r7, [r2, #1]
   10da0:	7895      	ldrb	r5, [r2, #2]
   10da2:	7816      	ldrb	r6, [r2, #0]
	last = last + 1;
   10da4:	1c63      	adds	r3, r4, #1
   10da6:	b2db      	uxtb	r3, r3
		last = 0U;
   10da8:	429f      	cmp	r7, r3
   10daa:	bf08      	it	eq
   10dac:	2300      	moveq	r3, #0
	if (last == first) {
   10dae:	429d      	cmp	r5, r3
   10db0:	d004      	beq.n	10dbc <ll_tx_ack_put+0x24>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   10db2:	1d15      	adds	r5, r2, #4
   10db4:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(tx);
   10db8:	192e      	adds	r6, r5, r4
   10dba:	d10f      	bne.n	10ddc <ll_tx_ack_put+0x44>
   10dbc:	4a0a      	ldr	r2, [pc, #40]	; (10de8 <ll_tx_ack_put+0x50>)
   10dbe:	490b      	ldr	r1, [pc, #44]	; (10dec <ll_tx_ack_put+0x54>)
   10dc0:	480b      	ldr	r0, [pc, #44]	; (10df0 <ll_tx_ack_put+0x58>)
   10dc2:	f240 53a1 	movw	r3, #1441	; 0x5a1
   10dc6:	f007 fbcf 	bl	18568 <printk>
   10dca:	4040      	eors	r0, r0
   10dcc:	f380 8811 	msr	BASEPRI, r0
   10dd0:	f04f 0003 	mov.w	r0, #3
   10dd4:	df02      	svc	2
	tx->handle = handle;
   10dd6:	2300      	movs	r3, #0
   10dd8:	801b      	strh	r3, [r3, #0]
   10dda:	deff      	udf	#255	; 0xff
   10ddc:	5328      	strh	r0, [r5, r4]
	tx->node = node_tx;
   10dde:	6071      	str	r1, [r6, #4]
	*last = idx; /* Commit: Update write index */
   10de0:	70d3      	strb	r3, [r2, #3]
}
   10de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10de4:	20000758 	.word	0x20000758
   10de8:	00021b90 	.word	0x00021b90
   10dec:	00021f59 	.word	0x00021f59
   10df0:	0001f734 	.word	0x0001f734

00010df4 <ll_radio_state_abort>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   10df4:	2200      	movs	r2, #0
{
   10df6:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   10df8:	4611      	mov	r1, r2
   10dfa:	4b09      	ldr	r3, [pc, #36]	; (10e20 <ll_radio_state_abort+0x2c>)
   10dfc:	2001      	movs	r0, #1
   10dfe:	f7fd fbed 	bl	e5dc <mayfly_enqueue>
	LL_ASSERT(!ret);
   10e02:	b160      	cbz	r0, 10e1e <ll_radio_state_abort+0x2a>
   10e04:	4a07      	ldr	r2, [pc, #28]	; (10e24 <ll_radio_state_abort+0x30>)
   10e06:	4908      	ldr	r1, [pc, #32]	; (10e28 <ll_radio_state_abort+0x34>)
   10e08:	4808      	ldr	r0, [pc, #32]	; (10e2c <ll_radio_state_abort+0x38>)
   10e0a:	f240 53b9 	movw	r3, #1465	; 0x5b9
   10e0e:	f007 fbab 	bl	18568 <printk>
   10e12:	4040      	eors	r0, r0
   10e14:	f380 8811 	msr	BASEPRI, r0
   10e18:	f04f 0003 	mov.w	r0, #3
   10e1c:	df02      	svc	2
}
   10e1e:	bd08      	pop	{r3, pc}
   10e20:	20000794 	.word	0x20000794
   10e24:	00021b90 	.word	0x00021b90
   10e28:	00021cbb 	.word	0x00021cbb
   10e2c:	0001f734 	.word	0x0001f734

00010e30 <ull_ticker_status_take>:
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   10e30:	f030 0302 	bics.w	r3, r0, #2
{
   10e34:	b510      	push	{r4, lr}
   10e36:	460c      	mov	r4, r1
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   10e38:	d00f      	beq.n	10e5a <ull_ticker_status_take+0x2a>
   10e3a:	680b      	ldr	r3, [r1, #0]
   10e3c:	2b02      	cmp	r3, #2
   10e3e:	d10c      	bne.n	10e5a <ull_ticker_status_take+0x2a>
   10e40:	4a0a      	ldr	r2, [pc, #40]	; (10e6c <ull_ticker_status_take+0x3c>)
   10e42:	490b      	ldr	r1, [pc, #44]	; (10e70 <ull_ticker_status_take+0x40>)
   10e44:	480b      	ldr	r0, [pc, #44]	; (10e74 <ull_ticker_status_take+0x44>)
   10e46:	f240 53d5 	movw	r3, #1493	; 0x5d5
   10e4a:	f007 fb8d 	bl	18568 <printk>
   10e4e:	4040      	eors	r0, r0
   10e50:	f380 8811 	msr	BASEPRI, r0
   10e54:	f04f 0003 	mov.w	r0, #3
   10e58:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   10e5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10e5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10e62:	4805      	ldr	r0, [pc, #20]	; (10e78 <ull_ticker_status_take+0x48>)
   10e64:	f006 fad8 	bl	17418 <z_impl_k_sem_take>
	return *ret_cb;
   10e68:	6820      	ldr	r0, [r4, #0]
}
   10e6a:	bd10      	pop	{r4, pc}
   10e6c:	00021b90 	.word	0x00021b90
   10e70:	00021cc0 	.word	0x00021cc0
   10e74:	0001f734 	.word	0x0001f734
   10e78:	200022f4 	.word	0x200022f4

00010e7c <ull_disable_mark>:
	if (!*m) {
   10e7c:	4b02      	ldr	r3, [pc, #8]	; (10e88 <ull_disable_mark+0xc>)
   10e7e:	681a      	ldr	r2, [r3, #0]
   10e80:	b902      	cbnz	r2, 10e84 <ull_disable_mark+0x8>
		*m = param;
   10e82:	6018      	str	r0, [r3, #0]
}
   10e84:	6818      	ldr	r0, [r3, #0]
   10e86:	4770      	bx	lr
   10e88:	20001de0 	.word	0x20001de0

00010e8c <ull_disable_unmark>:
	if (*m && *m == param) {
   10e8c:	4a05      	ldr	r2, [pc, #20]	; (10ea4 <ull_disable_unmark+0x18>)
{
   10e8e:	4603      	mov	r3, r0
	if (*m && *m == param) {
   10e90:	6810      	ldr	r0, [r2, #0]
   10e92:	b130      	cbz	r0, 10ea2 <ull_disable_unmark+0x16>
   10e94:	4283      	cmp	r3, r0
   10e96:	f04f 0300 	mov.w	r3, #0
   10e9a:	d101      	bne.n	10ea0 <ull_disable_unmark+0x14>
		*m = NULL;
   10e9c:	6013      	str	r3, [r2, #0]
		return param;
   10e9e:	4770      	bx	lr
	return NULL;
   10ea0:	4618      	mov	r0, r3
}
   10ea2:	4770      	bx	lr
   10ea4:	20001de0 	.word	0x20001de0

00010ea8 <ull_disable_mark_get>:
}
   10ea8:	4b01      	ldr	r3, [pc, #4]	; (10eb0 <ull_disable_mark_get+0x8>)
   10eaa:	6818      	ldr	r0, [r3, #0]
   10eac:	4770      	bx	lr
   10eae:	bf00      	nop
   10eb0:	20001de0 	.word	0x20001de0

00010eb4 <ull_update_mark>:
	if (!*m) {
   10eb4:	4b02      	ldr	r3, [pc, #8]	; (10ec0 <ull_update_mark+0xc>)
   10eb6:	681a      	ldr	r2, [r3, #0]
   10eb8:	b902      	cbnz	r2, 10ebc <ull_update_mark+0x8>
		*m = param;
   10eba:	6018      	str	r0, [r3, #0]
}
   10ebc:	6818      	ldr	r0, [r3, #0]
   10ebe:	4770      	bx	lr
   10ec0:	20001de4 	.word	0x20001de4

00010ec4 <ull_update_unmark>:
	if (*m && *m == param) {
   10ec4:	4a05      	ldr	r2, [pc, #20]	; (10edc <ull_update_unmark+0x18>)
{
   10ec6:	4603      	mov	r3, r0
	if (*m && *m == param) {
   10ec8:	6810      	ldr	r0, [r2, #0]
   10eca:	b130      	cbz	r0, 10eda <ull_update_unmark+0x16>
   10ecc:	4283      	cmp	r3, r0
   10ece:	f04f 0300 	mov.w	r3, #0
   10ed2:	d101      	bne.n	10ed8 <ull_update_unmark+0x14>
		*m = NULL;
   10ed4:	6013      	str	r3, [r2, #0]
		return param;
   10ed6:	4770      	bx	lr
	return NULL;
   10ed8:	4618      	mov	r0, r3
}
   10eda:	4770      	bx	lr
   10edc:	20001de4 	.word	0x20001de4

00010ee0 <ull_update_mark_get>:
}
   10ee0:	4b01      	ldr	r3, [pc, #4]	; (10ee8 <ull_update_mark_get+0x8>)
   10ee2:	6818      	ldr	r0, [r3, #0]
   10ee4:	4770      	bx	lr
   10ee6:	bf00      	nop
   10ee8:	20001de4 	.word	0x20001de4

00010eec <ull_disable>:
{
   10eec:	b530      	push	{r4, r5, lr}
	hdr = HDR_LLL2ULL(lll);
   10eee:	6804      	ldr	r4, [r0, #0]
{
   10ef0:	b087      	sub	sp, #28
   10ef2:	4605      	mov	r5, r0
	if (!hdr || !ull_ref_get(hdr)) {
   10ef4:	b354      	cbz	r4, 10f4c <ull_disable+0x60>
   10ef6:	7823      	ldrb	r3, [r4, #0]
   10ef8:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   10efc:	b323      	cbz	r3, 10f48 <ull_disable+0x5c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   10efe:	2201      	movs	r2, #1
   10f00:	2100      	movs	r1, #0
   10f02:	4668      	mov	r0, sp
   10f04:	f00c fdae 	bl	1da64 <z_impl_k_sem_init>
	hdr->disabled_cb = disabled_cb;
   10f08:	4b11      	ldr	r3, [pc, #68]	; (10f50 <ull_disable+0x64>)
   10f0a:	6163      	str	r3, [r4, #20]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   10f0c:	2200      	movs	r2, #0
	mfy.param = lll;
   10f0e:	4b11      	ldr	r3, [pc, #68]	; (10f54 <ull_disable+0x68>)
	hdr->disabled_param = &sem;
   10f10:	f8c4 d018 	str.w	sp, [r4, #24]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   10f14:	4611      	mov	r1, r2
   10f16:	2003      	movs	r0, #3
	mfy.param = lll;
   10f18:	609d      	str	r5, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   10f1a:	f7fd fb5f 	bl	e5dc <mayfly_enqueue>
	LL_ASSERT(!ret);
   10f1e:	b160      	cbz	r0, 10f3a <ull_disable+0x4e>
   10f20:	4a0d      	ldr	r2, [pc, #52]	; (10f58 <ull_disable+0x6c>)
   10f22:	490e      	ldr	r1, [pc, #56]	; (10f5c <ull_disable+0x70>)
   10f24:	480e      	ldr	r0, [pc, #56]	; (10f60 <ull_disable+0x74>)
   10f26:	f240 6343 	movw	r3, #1603	; 0x643
   10f2a:	f007 fb1d 	bl	18568 <printk>
   10f2e:	4040      	eors	r0, r0
   10f30:	f380 8811 	msr	BASEPRI, r0
   10f34:	f04f 0003 	mov.w	r0, #3
   10f38:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   10f3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10f3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10f42:	4668      	mov	r0, sp
   10f44:	f006 fa68 	bl	17418 <z_impl_k_sem_take>
}
   10f48:	b007      	add	sp, #28
   10f4a:	bd30      	pop	{r4, r5, pc}
		return 0;
   10f4c:	4620      	mov	r0, r4
   10f4e:	e7fb      	b.n	10f48 <ull_disable+0x5c>
   10f50:	0001c5df 	.word	0x0001c5df
   10f54:	200007a4 	.word	0x200007a4
   10f58:	00021b90 	.word	0x00021b90
   10f5c:	00021cbb 	.word	0x00021cbb
   10f60:	0001f734 	.word	0x0001f734

00010f64 <ull_ticker_stop_with_mark>:
{
   10f64:	b5f0      	push	{r4, r5, r6, r7, lr}
   10f66:	4606      	mov	r6, r0
   10f68:	b085      	sub	sp, #20
	mark = ull_disable_mark(param);
   10f6a:	4608      	mov	r0, r1
{
   10f6c:	460c      	mov	r4, r1
   10f6e:	4615      	mov	r5, r2
	mark = ull_disable_mark(param);
   10f70:	f7ff ff84 	bl	10e7c <ull_disable_mark>
	if (mark != param) {
   10f74:	4281      	cmp	r1, r0
   10f76:	d121      	bne.n	10fbc <ull_ticker_stop_with_mark+0x58>
	ret_cb = TICKER_STATUS_BUSY;
   10f78:	2302      	movs	r3, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   10f7a:	af03      	add	r7, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
   10f7c:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   10f7e:	2103      	movs	r1, #3
   10f80:	4b11      	ldr	r3, [pc, #68]	; (10fc8 <ull_ticker_stop_with_mark+0x64>)
   10f82:	9700      	str	r7, [sp, #0]
   10f84:	4632      	mov	r2, r6
   10f86:	2000      	movs	r0, #0
   10f88:	f7fe f906 	bl	f198 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   10f8c:	4639      	mov	r1, r7
   10f8e:	f7ff ff4f 	bl	10e30 <ull_ticker_status_take>
	if (ret) {
   10f92:	b148      	cbz	r0, 10fa8 <ull_ticker_stop_with_mark+0x44>
		mark = ull_disable_unmark(param);
   10f94:	4620      	mov	r0, r4
   10f96:	f7ff ff79 	bl	10e8c <ull_disable_unmark>
		if (mark != param) {
   10f9a:	4284      	cmp	r4, r0
   10f9c:	d10e      	bne.n	10fbc <ull_ticker_stop_with_mark+0x58>
		return -EALREADY;
   10f9e:	f06f 0177 	mvn.w	r1, #119	; 0x77
}
   10fa2:	4608      	mov	r0, r1
   10fa4:	b005      	add	sp, #20
   10fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = ull_disable(lll_disable);
   10fa8:	4628      	mov	r0, r5
   10faa:	f7ff ff9f 	bl	10eec <ull_disable>
	if (ret) {
   10fae:	4601      	mov	r1, r0
   10fb0:	b938      	cbnz	r0, 10fc2 <ull_ticker_stop_with_mark+0x5e>
	mark = ull_disable_unmark(param);
   10fb2:	4620      	mov	r0, r4
   10fb4:	f7ff ff6a 	bl	10e8c <ull_disable_unmark>
	if (mark != param) {
   10fb8:	4284      	cmp	r4, r0
   10fba:	d0f2      	beq.n	10fa2 <ull_ticker_stop_with_mark+0x3e>
		return -ENOLCK;
   10fbc:	f06f 012d 	mvn.w	r1, #45	; 0x2d
   10fc0:	e7ef      	b.n	10fa2 <ull_ticker_stop_with_mark+0x3e>
		return -EBUSY;
   10fc2:	f06f 010f 	mvn.w	r1, #15
   10fc6:	e7ec      	b.n	10fa2 <ull_ticker_stop_with_mark+0x3e>
   10fc8:	000105c1 	.word	0x000105c1

00010fcc <ull_pdu_rx_alloc_peek>:
{
   10fcc:	b510      	push	{r4, lr}
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   10fce:	4a0a      	ldr	r2, [pc, #40]	; (10ff8 <ull_pdu_rx_alloc_peek+0x2c>)
   10fd0:	7891      	ldrb	r1, [r2, #2]
   10fd2:	78d4      	ldrb	r4, [r2, #3]
   10fd4:	7853      	ldrb	r3, [r2, #1]
	if (last >= first) {
   10fd6:	42a1      	cmp	r1, r4
		return count - first + last;
   10fd8:	bf8a      	itet	hi
   10fda:	1a5b      	subhi	r3, r3, r1
		return last - first;
   10fdc:	1a63      	subls	r3, r4, r1
		return count - first + last;
   10fde:	191b      	addhi	r3, r3, r4
   10fe0:	b2db      	uxtb	r3, r3
   10fe2:	4298      	cmp	r0, r3
   10fe4:	d806      	bhi.n	10ff4 <ull_pdu_rx_alloc_peek+0x28>
	if (first == last) {
   10fe6:	42a1      	cmp	r1, r4
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   10fe8:	7813      	ldrb	r3, [r2, #0]
   10fea:	d003      	beq.n	10ff4 <ull_pdu_rx_alloc_peek+0x28>
	return *((void **)(fifo + first * size));
   10fec:	fb01 2203 	mla	r2, r1, r3, r2
   10ff0:	6850      	ldr	r0, [r2, #4]
}
   10ff2:	bd10      	pop	{r4, pc}
		return NULL;
   10ff4:	2000      	movs	r0, #0
   10ff6:	e7fc      	b.n	10ff2 <ull_pdu_rx_alloc_peek+0x26>
   10ff8:	20000628 	.word	0x20000628

00010ffc <ull_pdu_rx_alloc>:
{
   10ffc:	b510      	push	{r4, lr}
	return MFIFO_DEQUEUE(pdu_rx_free);
   10ffe:	4a09      	ldr	r2, [pc, #36]	; (11024 <ull_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   11000:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   11002:	78d0      	ldrb	r0, [r2, #3]
   11004:	7811      	ldrb	r1, [r2, #0]
   11006:	7854      	ldrb	r4, [r2, #1]
   11008:	4298      	cmp	r0, r3
   1100a:	d009      	beq.n	11020 <ull_pdu_rx_alloc+0x24>
	mem = *((void **)(fifo + _first * size));
   1100c:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   11010:	3301      	adds	r3, #1
   11012:	b2db      	uxtb	r3, r3
		_first = 0U;
   11014:	429c      	cmp	r4, r3
   11016:	bf08      	it	eq
   11018:	2300      	moveq	r3, #0
	mem = *((void **)(fifo + _first * size));
   1101a:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   1101c:	7093      	strb	r3, [r2, #2]
}
   1101e:	bd10      	pop	{r4, pc}
		return NULL;
   11020:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(pdu_rx_free);
   11022:	e7fc      	b.n	1101e <ull_pdu_rx_alloc+0x22>
   11024:	20000628 	.word	0x20000628

00011028 <ull_rx_put>:
{
   11028:	b538      	push	{r3, r4, r5, lr}
   1102a:	460c      	mov	r4, r1
   1102c:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   1102e:	f001 fde1 	bl	12bf4 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   11032:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   11034:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   11036:	4a03      	ldr	r2, [pc, #12]	; (11044 <ull_rx_put+0x1c>)
   11038:	4628      	mov	r0, r5
}
   1103a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   1103e:	f00a bfe6 	b.w	1c00e <memq_enqueue>
   11042:	bf00      	nop
   11044:	200022ec 	.word	0x200022ec

00011048 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   11048:	2201      	movs	r2, #1
   1104a:	4b02      	ldr	r3, [pc, #8]	; (11054 <ull_rx_sched+0xc>)
   1104c:	4611      	mov	r1, r2
   1104e:	2000      	movs	r0, #0
   11050:	f7fd bac4 	b.w	e5dc <mayfly_enqueue>
   11054:	200007b4 	.word	0x200007b4

00011058 <ull_rx_put_done>:
	memq_enqueue(link, done, &memq_ull_done.tail);
   11058:	4a01      	ldr	r2, [pc, #4]	; (11060 <ull_rx_put_done+0x8>)
   1105a:	f00a bfd8 	b.w	1c00e <memq_enqueue>
   1105e:	bf00      	nop
   11060:	200022e4 	.word	0x200022e4

00011064 <ull_rx_sched_done>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   11064:	2201      	movs	r2, #1
   11066:	4b02      	ldr	r3, [pc, #8]	; (11070 <ull_rx_sched_done+0xc>)
   11068:	4611      	mov	r1, r2
   1106a:	2000      	movs	r0, #0
   1106c:	f7fd bab6 	b.w	e5dc <mayfly_enqueue>
   11070:	200007c4 	.word	0x200007c4

00011074 <ull_prepare_enqueue>:
{
   11074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   11078:	4e14      	ldr	r6, [pc, #80]	; (110cc <ull_prepare_enqueue+0x58>)
{
   1107a:	4699      	mov	r9, r3
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   1107c:	78f3      	ldrb	r3, [r6, #3]
   1107e:	7834      	ldrb	r4, [r6, #0]
{
   11080:	4680      	mov	r8, r0
	last = last + 1;
   11082:	1c5d      	adds	r5, r3, #1
	if (last == count) {
   11084:	7870      	ldrb	r0, [r6, #1]
   11086:	460f      	mov	r7, r1
	last = last + 1;
   11088:	b2ed      	uxtb	r5, r5
   1108a:	4611      	mov	r1, r2
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   1108c:	78b2      	ldrb	r2, [r6, #2]
		last = 0U;
   1108e:	42a8      	cmp	r0, r5
   11090:	bf08      	it	eq
   11092:	2500      	moveq	r5, #0
	if (last == first) {
   11094:	42aa      	cmp	r2, r5
   11096:	d017      	beq.n	110c8 <ull_prepare_enqueue+0x54>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   11098:	1d32      	adds	r2, r6, #4
   1109a:	fb03 2404 	mla	r4, r3, r4, r2
	if (!e) {
   1109e:	b184      	cbz	r4, 110c2 <ull_prepare_enqueue+0x4e>
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
   110a0:	2210      	movs	r2, #16
   110a2:	4620      	mov	r0, r4
   110a4:	f008 fd7e 	bl	19ba4 <memcpy>
	e->is_resume = is_resume;
   110a8:	7f23      	ldrb	r3, [r4, #28]
   110aa:	f89d 2020 	ldrb.w	r2, [sp, #32]
	e->abort_cb = abort_cb;
   110ae:	61a7      	str	r7, [r4, #24]
	e->is_resume = is_resume;
   110b0:	f002 0201 	and.w	r2, r2, #1
   110b4:	f023 0303 	bic.w	r3, r3, #3
   110b8:	4313      	orrs	r3, r2
	e->is_abort_cb = is_abort_cb;
   110ba:	e9c4 9804 	strd	r9, r8, [r4, #16]
	e->is_resume = is_resume;
   110be:	7723      	strb	r3, [r4, #28]
	*last = idx; /* Commit: Update write index */
   110c0:	70f5      	strb	r5, [r6, #3]
}
   110c2:	4620      	mov	r0, r4
   110c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return NULL;
   110c8:	2400      	movs	r4, #0
   110ca:	e7fa      	b.n	110c2 <ull_prepare_enqueue+0x4e>
   110cc:	20000654 	.word	0x20000654

000110d0 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
   110d0:	4b05      	ldr	r3, [pc, #20]	; (110e8 <ull_prepare_dequeue_get+0x18>)
   110d2:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
   110d4:	78d9      	ldrb	r1, [r3, #3]
   110d6:	7818      	ldrb	r0, [r3, #0]
   110d8:	4291      	cmp	r1, r2
	return (void *)(fifo + first * size);
   110da:	bf1a      	itte	ne
   110dc:	3304      	addne	r3, #4
   110de:	fb02 3000 	mlane	r0, r2, r0, r3
		return NULL;
   110e2:	2000      	moveq	r0, #0
}
   110e4:	4770      	bx	lr
   110e6:	bf00      	nop
   110e8:	20000654 	.word	0x20000654

000110ec <ull_prepare_dequeue_iter>:
{
   110ec:	b530      	push	{r4, r5, lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   110ee:	4a0c      	ldr	r2, [pc, #48]	; (11120 <ull_prepare_dequeue_iter+0x34>)
{
   110f0:	4603      	mov	r3, r0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   110f2:	7854      	ldrb	r4, [r2, #1]
	if (*idx >= count) {
   110f4:	7819      	ldrb	r1, [r3, #0]
   110f6:	78d5      	ldrb	r5, [r2, #3]
   110f8:	7810      	ldrb	r0, [r2, #0]
   110fa:	42a1      	cmp	r1, r4
   110fc:	bf24      	itt	cs
   110fe:	7892      	ldrbcs	r2, [r2, #2]
		*idx = first;
   11100:	701a      	strbcs	r2, [r3, #0]
	if (*idx == last) {
   11102:	7819      	ldrb	r1, [r3, #0]
   11104:	428d      	cmp	r5, r1
   11106:	d009      	beq.n	1111c <ull_prepare_dequeue_iter+0x30>
	i = *idx + 1;
   11108:	1c4a      	adds	r2, r1, #1
   1110a:	b2d2      	uxtb	r2, r2
		i = 0U;
   1110c:	4294      	cmp	r4, r2
   1110e:	bf08      	it	eq
   11110:	2200      	moveq	r2, #0
	p = (void *)(fifo + (*idx) * size);
   11112:	4c04      	ldr	r4, [pc, #16]	; (11124 <ull_prepare_dequeue_iter+0x38>)
	*idx = i;
   11114:	701a      	strb	r2, [r3, #0]
	p = (void *)(fifo + (*idx) * size);
   11116:	fb01 4000 	mla	r0, r1, r0, r4
}
   1111a:	bd30      	pop	{r4, r5, pc}
		return NULL;
   1111c:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   1111e:	e7fc      	b.n	1111a <ull_prepare_dequeue_iter+0x2e>
   11120:	20000654 	.word	0x20000654
   11124:	20000658 	.word	0x20000658

00011128 <ull_prepare_dequeue>:
{
   11128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1112c:	4605      	mov	r5, r0
	next = ull_prepare_dequeue_get();
   1112e:	f7ff ffcf 	bl	110d0 <ull_prepare_dequeue_get>
			mfy.param = next;
   11132:	4f1c      	ldr	r7, [pc, #112]	; (111a4 <ull_prepare_dequeue+0x7c>)
		MFIFO_DEQUEUE(prep);
   11134:	4c1c      	ldr	r4, [pc, #112]	; (111a8 <ull_prepare_dequeue+0x80>)
	while (next) {
   11136:	2800      	cmp	r0, #0
   11138:	d031      	beq.n	1119e <ull_prepare_dequeue+0x76>
		uint8_t is_aborted = next->is_aborted;
   1113a:	7f03      	ldrb	r3, [r0, #28]
		if (!is_aborted) {
   1113c:	079a      	lsls	r2, r3, #30
		uint8_t is_aborted = next->is_aborted;
   1113e:	f3c3 0640 	ubfx	r6, r3, #1, #1
		uint8_t is_resume = next->is_resume;
   11142:	f003 0801 	and.w	r8, r3, #1
		if (!is_aborted) {
   11146:	d414      	bmi.n	11172 <ull_prepare_dequeue+0x4a>
			mfy.param = next;
   11148:	60b8      	str	r0, [r7, #8]
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
   1114a:	4b16      	ldr	r3, [pc, #88]	; (111a4 <ull_prepare_dequeue+0x7c>)
   1114c:	4632      	mov	r2, r6
   1114e:	4631      	mov	r1, r6
   11150:	4628      	mov	r0, r5
   11152:	f7fd fa43 	bl	e5dc <mayfly_enqueue>
			LL_ASSERT(!ret);
   11156:	b160      	cbz	r0, 11172 <ull_prepare_dequeue+0x4a>
   11158:	4a14      	ldr	r2, [pc, #80]	; (111ac <ull_prepare_dequeue+0x84>)
   1115a:	4915      	ldr	r1, [pc, #84]	; (111b0 <ull_prepare_dequeue+0x88>)
   1115c:	4815      	ldr	r0, [pc, #84]	; (111b4 <ull_prepare_dequeue+0x8c>)
   1115e:	f240 63ba 	movw	r3, #1722	; 0x6ba
   11162:	f007 fa01 	bl	18568 <printk>
   11166:	4040      	eors	r0, r0
   11168:	f380 8811 	msr	BASEPRI, r0
   1116c:	f04f 0003 	mov.w	r0, #3
   11170:	df02      	svc	2
	uint8_t _first = *first; /* Copy read-index */
   11172:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   11174:	78e1      	ldrb	r1, [r4, #3]
		MFIFO_DEQUEUE(prep);
   11176:	7862      	ldrb	r2, [r4, #1]
   11178:	4299      	cmp	r1, r3
   1117a:	d005      	beq.n	11188 <ull_prepare_dequeue+0x60>
	_first += 1U;
   1117c:	3301      	adds	r3, #1
   1117e:	b2db      	uxtb	r3, r3
		_first = 0U;
   11180:	429a      	cmp	r2, r3
   11182:	bf08      	it	eq
   11184:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   11186:	70a3      	strb	r3, [r4, #2]
		next = ull_prepare_dequeue_get();
   11188:	f7ff ffa2 	bl	110d0 <ull_prepare_dequeue_get>
		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   1118c:	b138      	cbz	r0, 1119e <ull_prepare_dequeue+0x76>
   1118e:	2e00      	cmp	r6, #0
   11190:	d1d1      	bne.n	11136 <ull_prepare_dequeue+0xe>
   11192:	f1b8 0f00 	cmp.w	r8, #0
   11196:	d002      	beq.n	1119e <ull_prepare_dequeue+0x76>
   11198:	7f03      	ldrb	r3, [r0, #28]
   1119a:	07db      	lsls	r3, r3, #31
   1119c:	d5cb      	bpl.n	11136 <ull_prepare_dequeue+0xe>
}
   1119e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   111a2:	bf00      	nop
   111a4:	200007d4 	.word	0x200007d4
   111a8:	20000654 	.word	0x20000654
   111ac:	00021b90 	.word	0x00021b90
   111b0:	00021cbb 	.word	0x00021cbb
   111b4:	0001f734 	.word	0x0001f734

000111b8 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
   111b8:	4b06      	ldr	r3, [pc, #24]	; (111d4 <ull_event_done_extra_get+0x1c>)
   111ba:	7899      	ldrb	r1, [r3, #2]
	if (first == last) {
   111bc:	78d8      	ldrb	r0, [r3, #3]
   111be:	781a      	ldrb	r2, [r3, #0]
   111c0:	4288      	cmp	r0, r1
   111c2:	d005      	beq.n	111d0 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
   111c4:	fb01 3302 	mla	r3, r1, r2, r3
   111c8:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
   111ca:	b110      	cbz	r0, 111d2 <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
   111cc:	3020      	adds	r0, #32
   111ce:	4770      	bx	lr
		return NULL;
   111d0:	2000      	movs	r0, #0
}
   111d2:	4770      	bx	lr
   111d4:	20000604 	.word	0x20000604

000111d8 <ull_event_done>:
{
   111d8:	b538      	push	{r3, r4, r5, lr}
	evdone = MFIFO_DEQUEUE(done);
   111da:	4a10      	ldr	r2, [pc, #64]	; (1121c <ull_event_done+0x44>)
	uint8_t _first = *first; /* Copy read-index */
   111dc:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   111de:	78d4      	ldrb	r4, [r2, #3]
   111e0:	7855      	ldrb	r5, [r2, #1]
   111e2:	429c      	cmp	r4, r3
{
   111e4:	4601      	mov	r1, r0
	evdone = MFIFO_DEQUEUE(done);
   111e6:	7810      	ldrb	r0, [r2, #0]
   111e8:	d016      	beq.n	11218 <ull_event_done+0x40>
	mem = *((void **)(fifo + _first * size));
   111ea:	fb03 2000 	mla	r0, r3, r0, r2
	_first += 1U;
   111ee:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   111f0:	6844      	ldr	r4, [r0, #4]
	_first += 1U;
   111f2:	b2db      	uxtb	r3, r3
		_first = 0U;
   111f4:	429d      	cmp	r5, r3
   111f6:	bf08      	it	eq
   111f8:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   111fa:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
   111fc:	b154      	cbz	r4, 11214 <ull_event_done+0x3c>
	evdone->hdr.link = NULL;
   111fe:	2300      	movs	r3, #0
	link = evdone->hdr.link;
   11200:	6820      	ldr	r0, [r4, #0]
	evdone->hdr.link = NULL;
   11202:	6023      	str	r3, [r4, #0]
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   11204:	2302      	movs	r3, #2
   11206:	7123      	strb	r3, [r4, #4]
	evdone->param = param;
   11208:	61e1      	str	r1, [r4, #28]
	ull_rx_put_done(link, evdone);
   1120a:	4621      	mov	r1, r4
   1120c:	f7ff ff24 	bl	11058 <ull_rx_put_done>
	ull_rx_sched_done();
   11210:	f7ff ff28 	bl	11064 <ull_rx_sched_done>
}
   11214:	4620      	mov	r0, r4
   11216:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   11218:	2400      	movs	r4, #0
   1121a:	e7fb      	b.n	11214 <ull_event_done+0x3c>
   1121c:	20000604 	.word	0x20000604

00011220 <lll_resume>:
	return lll_prepare_resolve(is_abort_cb, abort_cb, prepare_cb,
				   prepare_param, 0, 0);
}

void lll_resume(void *param)
{
   11220:	b507      	push	{r0, r1, r2, lr}
	struct lll_event *next;
	int ret;

	next = param;
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   11222:	2201      	movs	r2, #1
   11224:	9201      	str	r2, [sp, #4]
				  next->prepare_cb, &next->prepare_param,
				  next->is_resume, 1);
   11226:	7f02      	ldrb	r2, [r0, #28]
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   11228:	f002 0201 	and.w	r2, r2, #1
   1122c:	9200      	str	r2, [sp, #0]
   1122e:	6902      	ldr	r2, [r0, #16]
{
   11230:	4603      	mov	r3, r0
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   11232:	e9d0 0105 	ldrd	r0, r1, [r0, #20]
   11236:	f002 f9d3 	bl	135e0 <lll_prepare_resolve>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   1123a:	b168      	cbz	r0, 11258 <lll_resume+0x38>
   1123c:	3077      	adds	r0, #119	; 0x77
   1123e:	d00b      	beq.n	11258 <lll_resume+0x38>
   11240:	4a07      	ldr	r2, [pc, #28]	; (11260 <lll_resume+0x40>)
   11242:	4908      	ldr	r1, [pc, #32]	; (11264 <lll_resume+0x44>)
   11244:	4808      	ldr	r0, [pc, #32]	; (11268 <lll_resume+0x48>)
   11246:	234f      	movs	r3, #79	; 0x4f
   11248:	f007 f98e 	bl	18568 <printk>
   1124c:	4040      	eors	r0, r0
   1124e:	f380 8811 	msr	BASEPRI, r0
   11252:	f04f 0003 	mov.w	r0, #3
   11256:	df02      	svc	2
}
   11258:	b003      	add	sp, #12
   1125a:	f85d fb04 	ldr.w	pc, [sp], #4
   1125e:	bf00      	nop
   11260:	00021ce9 	.word	0x00021ce9
   11264:	00021d2b 	.word	0x00021d2b
   11268:	0001f734 	.word	0x0001f734

0001126c <disabled_cb>:
		LL_ASSERT(!ret);
	}
}

static void disabled_cb(void *param)
{
   1126c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct ll_adv_set *adv;
	struct node_rx_pdu *rx;
	struct node_rx_cc *cc;
	memq_link_t *link;

	adv = ((struct lll_hdr *)param)->parent;
   1126e:	6805      	ldr	r5, [r0, #0]

	LL_ASSERT(adv->link_cc_free);
   11270:	6c2b      	ldr	r3, [r5, #64]	; 0x40
{
   11272:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
   11274:	b963      	cbnz	r3, 11290 <disabled_cb+0x24>
   11276:	4a1b      	ldr	r2, [pc, #108]	; (112e4 <disabled_cb+0x78>)
   11278:	491b      	ldr	r1, [pc, #108]	; (112e8 <disabled_cb+0x7c>)
   1127a:	481c      	ldr	r0, [pc, #112]	; (112ec <disabled_cb+0x80>)
   1127c:	f44f 63ec 	mov.w	r3, #1888	; 0x760
   11280:	f007 f972 	bl	18568 <printk>
   11284:	4040      	eors	r0, r0
   11286:	f380 8811 	msr	BASEPRI, r0
   1128a:	f04f 0003 	mov.w	r0, #3
   1128e:	df02      	svc	2
	link = adv->link_cc_free;
	adv->link_cc_free = NULL;
   11290:	2300      	movs	r3, #0
	link = adv->link_cc_free;
   11292:	6c2f      	ldr	r7, [r5, #64]	; 0x40
	adv->link_cc_free = NULL;
   11294:	642b      	str	r3, [r5, #64]	; 0x40

	LL_ASSERT(adv->node_rx_cc_free);
   11296:	6c6b      	ldr	r3, [r5, #68]	; 0x44
   11298:	b963      	cbnz	r3, 112b4 <disabled_cb+0x48>
   1129a:	4a12      	ldr	r2, [pc, #72]	; (112e4 <disabled_cb+0x78>)
   1129c:	4914      	ldr	r1, [pc, #80]	; (112f0 <disabled_cb+0x84>)
   1129e:	4813      	ldr	r0, [pc, #76]	; (112ec <disabled_cb+0x80>)
   112a0:	f240 7364 	movw	r3, #1892	; 0x764
   112a4:	f007 f960 	bl	18568 <printk>
   112a8:	4040      	eors	r0, r0
   112aa:	f380 8811 	msr	BASEPRI, r0
   112ae:	f04f 0003 	mov.w	r0, #3
   112b2:	df02      	svc	2
	rx = adv->node_rx_cc_free;
   112b4:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	adv->node_rx_cc_free = NULL;
   112b6:	2100      	movs	r1, #0

	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   112b8:	2314      	movs	r3, #20
	adv->node_rx_cc_free = NULL;
   112ba:	6469      	str	r1, [r5, #68]	; 0x44
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   112bc:	7123      	strb	r3, [r4, #4]
	rx->hdr.handle = 0xffff;
   112be:	f64f 73ff 	movw	r3, #65535	; 0xffff
   112c2:	80e3      	strh	r3, [r4, #6]

	cc = (void *)rx->pdu;
	memset(cc, 0x00, sizeof(struct node_rx_cc));
   112c4:	2212      	movs	r2, #18
   112c6:	f104 001c 	add.w	r0, r4, #28
   112ca:	f008 fc96 	bl	19bfa <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   112ce:	233c      	movs	r3, #60	; 0x3c
   112d0:	7723      	strb	r3, [r4, #28]

	rx->hdr.rx_ftr.param = param;
   112d2:	60a6      	str	r6, [r4, #8]

		link = rx->hdr.link;
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	ll_rx_put(link, rx);
   112d4:	4621      	mov	r1, r4
   112d6:	4638      	mov	r0, r7
   112d8:	f7ff fc9a 	bl	10c10 <ll_rx_put>
	ll_rx_sched();
}
   112dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
   112e0:	f7ff bca0 	b.w	10c24 <ll_rx_sched>
   112e4:	00021d52 	.word	0x00021d52
   112e8:	00021d91 	.word	0x00021d91
   112ec:	0001f734 	.word	0x0001f734
   112f0:	00021da3 	.word	0x00021da3

000112f4 <ticker_cb>:
{
   112f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   112f8:	461f      	mov	r7, r3
   112fa:	b08b      	sub	sp, #44	; 0x2c
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   112fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11300:	429a      	cmp	r2, r3
{
   11302:	9d12      	ldr	r5, [sp, #72]	; 0x48
   11304:	4681      	mov	r9, r0
   11306:	4688      	mov	r8, r1
   11308:	4616      	mov	r6, r2
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   1130a:	d02e      	beq.n	1136a <ticker_cb+0x76>
	return ++hdr->ref;
   1130c:	782c      	ldrb	r4, [r5, #0]
   1130e:	3401      	adds	r4, #1
   11310:	b2e4      	uxtb	r4, r4
   11312:	702c      	strb	r4, [r5, #0]
		LL_ASSERT(ref);
   11314:	b964      	cbnz	r4, 11330 <ticker_cb+0x3c>
   11316:	4a31      	ldr	r2, [pc, #196]	; (113dc <ticker_cb+0xe8>)
   11318:	4931      	ldr	r1, [pc, #196]	; (113e0 <ticker_cb+0xec>)
   1131a:	4832      	ldr	r0, [pc, #200]	; (113e4 <ticker_cb+0xf0>)
   1131c:	f240 63ca 	movw	r3, #1738	; 0x6ca
   11320:	f007 f922 	bl	18568 <printk>
   11324:	4040      	eors	r0, r0
   11326:	f380 8811 	msr	BASEPRI, r0
   1132a:	f04f 0003 	mov.w	r0, #3
   1132e:	df02      	svc	2
		p.ticks_at_expire = ticks_at_expire;
   11330:	4c2d      	ldr	r4, [pc, #180]	; (113e8 <ticker_cb+0xf4>)
	lll = &adv->lll;
   11332:	f105 031c 	add.w	r3, r5, #28
		p.param = lll;
   11336:	60e3      	str	r3, [r4, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   11338:	2200      	movs	r2, #0
		mfy.param = &p;
   1133a:	4b2c      	ldr	r3, [pc, #176]	; (113ec <ticker_cb+0xf8>)
		p.lazy = lazy;
   1133c:	8126      	strh	r6, [r4, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   1133e:	4611      	mov	r1, r2
   11340:	2001      	movs	r0, #1
		p.remainder = remainder;
   11342:	e9c4 9800 	strd	r9, r8, [r4]
		p.force = force;
   11346:	72a7      	strb	r7, [r4, #10]
		mfy.param = &p;
   11348:	609c      	str	r4, [r3, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   1134a:	f7fd f947 	bl	e5dc <mayfly_enqueue>
		LL_ASSERT(!ret);
   1134e:	b160      	cbz	r0, 1136a <ticker_cb+0x76>
   11350:	4a22      	ldr	r2, [pc, #136]	; (113dc <ticker_cb+0xe8>)
   11352:	4927      	ldr	r1, [pc, #156]	; (113f0 <ticker_cb+0xfc>)
   11354:	4823      	ldr	r0, [pc, #140]	; (113e4 <ticker_cb+0xf0>)
   11356:	f240 63d7 	movw	r3, #1751	; 0x6d7
   1135a:	f007 f905 	bl	18568 <printk>
   1135e:	4040      	eors	r0, r0
   11360:	f380 8811 	msr	BASEPRI, r0
   11364:	f04f 0003 	mov.w	r0, #3
   11368:	df02      	svc	2
	if (!lll->is_hdcd)
   1136a:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
   1136e:	f014 0401 	ands.w	r4, r4, #1
   11372:	d12f      	bne.n	113d4 <ticker_cb+0xe0>
		lll_rand_isr_get(&random_delay, sizeof(random_delay));
   11374:	2104      	movs	r1, #4
   11376:	a809      	add	r0, sp, #36	; 0x24
   11378:	f00b fbd8 	bl	1cb2c <lll_rand_isr_get>
		random_delay %= ULL_ADV_RANDOM_DELAY;
   1137c:	9909      	ldr	r1, [sp, #36]	; 0x24
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1137e:	9506      	str	r5, [sp, #24]
		random_delay %= ULL_ADV_RANDOM_DELAY;
   11380:	f240 1247 	movw	r2, #327	; 0x147
   11384:	fbb1 f3f2 	udiv	r3, r1, r2
   11388:	fb02 1313 	mls	r3, r2, r3, r1
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   1138c:	4a19      	ldr	r2, [pc, #100]	; (113f4 <ticker_cb+0x100>)
   1138e:	214c      	movs	r1, #76	; 0x4c
   11390:	1aaa      	subs	r2, r5, r2
   11392:	fbb2 f2f1 	udiv	r2, r2, r1
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   11396:	4918      	ldr	r1, [pc, #96]	; (113f8 <ticker_cb+0x104>)
				    (TICKER_ID_ADV_BASE +
   11398:	3202      	adds	r2, #2
		random_delay += 1;
   1139a:	3301      	adds	r3, #1
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1139c:	e9cd 4104 	strd	r4, r1, [sp, #16]
   113a0:	e9cd 4402 	strd	r4, r4, [sp, #8]
   113a4:	e9cd 4400 	strd	r4, r4, [sp]
   113a8:	b2d2      	uxtb	r2, r2
   113aa:	2101      	movs	r1, #1
   113ac:	4620      	mov	r0, r4
		random_delay += 1;
   113ae:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   113b0:	f00b f8a7 	bl	1c502 <ticker_update>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   113b4:	f030 0302 	bics.w	r3, r0, #2
   113b8:	d00c      	beq.n	113d4 <ticker_cb+0xe0>
   113ba:	4a08      	ldr	r2, [pc, #32]	; (113dc <ticker_cb+0xe8>)
   113bc:	490f      	ldr	r1, [pc, #60]	; (113fc <ticker_cb+0x108>)
   113be:	4809      	ldr	r0, [pc, #36]	; (113e4 <ticker_cb+0xf0>)
   113c0:	f240 63ed 	movw	r3, #1773	; 0x6ed
   113c4:	f007 f8d0 	bl	18568 <printk>
   113c8:	4040      	eors	r0, r0
   113ca:	f380 8811 	msr	BASEPRI, r0
   113ce:	f04f 0003 	mov.w	r0, #3
   113d2:	df02      	svc	2
}
   113d4:	b00b      	add	sp, #44	; 0x2c
   113d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   113da:	bf00      	nop
   113dc:	00021d52 	.word	0x00021d52
   113e0:	00021db8 	.word	0x00021db8
   113e4:	0001f734 	.word	0x0001f734
   113e8:	200027b8 	.word	0x200027b8
   113ec:	200007e4 	.word	0x200007e4
   113f0:	00021cbb 	.word	0x00021cbb
   113f4:	20002760 	.word	0x20002760
   113f8:	0001151d 	.word	0x0001151d
   113fc:	00021dbc 	.word	0x00021dbc

00011400 <conn_release>:

static void conn_release(struct ll_adv_set *adv)
{
   11400:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
   11402:	6a05      	ldr	r5, [r0, #32]
	memq_link_t *link;

	LL_ASSERT(!lll->link_tx_free);
   11404:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
{
   11406:	4604      	mov	r4, r0
	LL_ASSERT(!lll->link_tx_free);
   11408:	b163      	cbz	r3, 11424 <conn_release+0x24>
   1140a:	4a18      	ldr	r2, [pc, #96]	; (1146c <conn_release+0x6c>)
   1140c:	4918      	ldr	r1, [pc, #96]	; (11470 <conn_release+0x70>)
   1140e:	4819      	ldr	r0, [pc, #100]	; (11474 <conn_release+0x74>)
   11410:	f240 738e 	movw	r3, #1934	; 0x78e
   11414:	f007 f8a8 	bl	18568 <printk>
   11418:	4040      	eors	r0, r0
   1141a:	f380 8811 	msr	BASEPRI, r0
   1141e:	f04f 0003 	mov.w	r0, #3
   11422:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   11424:	f105 0140 	add.w	r1, r5, #64	; 0x40
   11428:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   1142c:	f00a fde4 	bl	1bff8 <memq_deinit>
	LL_ASSERT(link);
   11430:	4606      	mov	r6, r0
   11432:	b960      	cbnz	r0, 1144e <conn_release+0x4e>
   11434:	4a0d      	ldr	r2, [pc, #52]	; (1146c <conn_release+0x6c>)
   11436:	4910      	ldr	r1, [pc, #64]	; (11478 <conn_release+0x78>)
   11438:	480e      	ldr	r0, [pc, #56]	; (11474 <conn_release+0x74>)
   1143a:	f44f 63f2 	mov.w	r3, #1936	; 0x790
   1143e:	f007 f893 	bl	18568 <printk>
   11442:	4040      	eors	r0, r0
   11444:	f380 8811 	msr	BASEPRI, r0
   11448:	f04f 0003 	mov.w	r0, #3
   1144c:	df02      	svc	2
	lll->link_tx_free = link;

	ll_conn_release(lll->hdr.parent);
   1144e:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
   11450:	64ee      	str	r6, [r5, #76]	; 0x4c
	adv->lll.conn = NULL;
   11452:	2500      	movs	r5, #0
	ll_conn_release(lll->hdr.parent);
   11454:	f000 fbfc 	bl	11c50 <ll_conn_release>

	ll_rx_release(adv->node_rx_cc_free);
   11458:	6c60      	ldr	r0, [r4, #68]	; 0x44
	adv->lll.conn = NULL;
   1145a:	6225      	str	r5, [r4, #32]
	ll_rx_release(adv->node_rx_cc_free);
   1145c:	f7ff fbd2 	bl	10c04 <ll_rx_release>
	adv->node_rx_cc_free = NULL;
	ll_rx_link_release(adv->link_cc_free);
   11460:	6c20      	ldr	r0, [r4, #64]	; 0x40
	adv->node_rx_cc_free = NULL;
   11462:	6465      	str	r5, [r4, #68]	; 0x44
	ll_rx_link_release(adv->link_cc_free);
   11464:	f7ff fbc2 	bl	10bec <ll_rx_link_release>
	adv->link_cc_free = NULL;
   11468:	6425      	str	r5, [r4, #64]	; 0x40
}
   1146a:	bd70      	pop	{r4, r5, r6, pc}
   1146c:	00021d52 	.word	0x00021d52
   11470:	00021dd5 	.word	0x00021dd5
   11474:	0001f734 	.word	0x0001f734
   11478:	00021474 	.word	0x00021474

0001147c <ticker_op_stop_cb>:
{
   1147c:	b570      	push	{r4, r5, r6, lr}
   1147e:	460c      	mov	r4, r1
	if (status != TICKER_STATUS_SUCCESS) {
   11480:	2800      	cmp	r0, #0
   11482:	d131      	bne.n	114e8 <ticker_op_stop_cb+0x6c>
	mfy.param = &adv->lll;
   11484:	4b1e      	ldr	r3, [pc, #120]	; (11500 <ticker_op_stop_cb+0x84>)
   11486:	4d1f      	ldr	r5, [pc, #124]	; (11504 <ticker_op_stop_cb+0x88>)
   11488:	f101 021c 	add.w	r2, r1, #28
   1148c:	609a      	str	r2, [r3, #8]
	return hdr->ref;
   1148e:	7809      	ldrb	r1, [r1, #0]
   11490:	461e      	mov	r6, r3
	if (ull_ref_get(hdr)) {
   11492:	f001 02ff 	and.w	r2, r1, #255	; 0xff
   11496:	b341      	cbz	r1, 114ea <ticker_op_stop_cb+0x6e>
		LL_ASSERT(!hdr->disabled_cb);
   11498:	6963      	ldr	r3, [r4, #20]
   1149a:	b163      	cbz	r3, 114b6 <ticker_op_stop_cb+0x3a>
   1149c:	4a1a      	ldr	r2, [pc, #104]	; (11508 <ticker_op_stop_cb+0x8c>)
   1149e:	491b      	ldr	r1, [pc, #108]	; (1150c <ticker_op_stop_cb+0x90>)
   114a0:	481b      	ldr	r0, [pc, #108]	; (11510 <ticker_op_stop_cb+0x94>)
   114a2:	f240 7345 	movw	r3, #1861	; 0x745
   114a6:	f007 f85f 	bl	18568 <printk>
   114aa:	4040      	eors	r0, r0
   114ac:	f380 8811 	msr	BASEPRI, r0
   114b0:	f04f 0003 	mov.w	r0, #3
   114b4:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   114b6:	68b3      	ldr	r3, [r6, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   114b8:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   114ba:	e9c4 5305 	strd	r5, r3, [r4, #20]
		mfy.fp = lll_disable;
   114be:	4b15      	ldr	r3, [pc, #84]	; (11514 <ticker_op_stop_cb+0x98>)
   114c0:	60f3      	str	r3, [r6, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   114c2:	4611      	mov	r1, r2
   114c4:	4b0e      	ldr	r3, [pc, #56]	; (11500 <ticker_op_stop_cb+0x84>)
   114c6:	2002      	movs	r0, #2
   114c8:	f7fd f888 	bl	e5dc <mayfly_enqueue>
		LL_ASSERT(!ret);
   114cc:	b160      	cbz	r0, 114e8 <ticker_op_stop_cb+0x6c>
   114ce:	f240 734c 	movw	r3, #1868	; 0x74c
		LL_ASSERT(!ret);
   114d2:	4a0d      	ldr	r2, [pc, #52]	; (11508 <ticker_op_stop_cb+0x8c>)
   114d4:	4910      	ldr	r1, [pc, #64]	; (11518 <ticker_op_stop_cb+0x9c>)
   114d6:	480e      	ldr	r0, [pc, #56]	; (11510 <ticker_op_stop_cb+0x94>)
   114d8:	f007 f846 	bl	18568 <printk>
   114dc:	4040      	eors	r0, r0
   114de:	f380 8811 	msr	BASEPRI, r0
   114e2:	f04f 0003 	mov.w	r0, #3
   114e6:	df02      	svc	2
}
   114e8:	bd70      	pop	{r4, r5, r6, pc}
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   114ea:	2101      	movs	r1, #1
   114ec:	2002      	movs	r0, #2
		mfy.fp = disabled_cb;
   114ee:	60dd      	str	r5, [r3, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   114f0:	f7fd f874 	bl	e5dc <mayfly_enqueue>
		LL_ASSERT(!ret);
   114f4:	2800      	cmp	r0, #0
   114f6:	d0f7      	beq.n	114e8 <ticker_op_stop_cb+0x6c>
   114f8:	f240 7353 	movw	r3, #1875	; 0x753
   114fc:	e7e9      	b.n	114d2 <ticker_op_stop_cb+0x56>
   114fe:	bf00      	nop
   11500:	200007f4 	.word	0x200007f4
   11504:	0001126d 	.word	0x0001126d
   11508:	00021d52 	.word	0x00021d52
   1150c:	00021de8 	.word	0x00021de8
   11510:	0001f734 	.word	0x0001f734
   11514:	000133b5 	.word	0x000133b5
   11518:	00021cbb 	.word	0x00021cbb

0001151c <ticker_op_update_cb>:
{
   1151c:	b510      	push	{r4, lr}
   1151e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   11520:	b180      	cbz	r0, 11544 <ticker_op_update_cb+0x28>
   11522:	f7ff fcc1 	bl	10ea8 <ull_disable_mark_get>
   11526:	4284      	cmp	r4, r0
   11528:	d00c      	beq.n	11544 <ticker_op_update_cb+0x28>
   1152a:	4a07      	ldr	r2, [pc, #28]	; (11548 <ticker_op_update_cb+0x2c>)
   1152c:	4907      	ldr	r1, [pc, #28]	; (1154c <ticker_op_update_cb+0x30>)
   1152e:	4808      	ldr	r0, [pc, #32]	; (11550 <ticker_op_update_cb+0x34>)
   11530:	f240 730e 	movw	r3, #1806	; 0x70e
   11534:	f007 f818 	bl	18568 <printk>
   11538:	4040      	eors	r0, r0
   1153a:	f380 8811 	msr	BASEPRI, r0
   1153e:	f04f 0003 	mov.w	r0, #3
   11542:	df02      	svc	2
}
   11544:	bd10      	pop	{r4, pc}
   11546:	bf00      	nop
   11548:	00021d52 	.word	0x00021d52
   1154c:	00021dfa 	.word	0x00021dfa
   11550:	0001f734 	.word	0x0001f734

00011554 <ticker_stop_cb>:
{
   11554:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11556:	9d06      	ldr	r5, [sp, #24]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   11558:	4c17      	ldr	r4, [pc, #92]	; (115b8 <ticker_stop_cb+0x64>)
   1155a:	224c      	movs	r2, #76	; 0x4c
   1155c:	1b2c      	subs	r4, r5, r4
   1155e:	fbb4 f4f2 	udiv	r4, r4, r2
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   11562:	f014 0fff 	tst.w	r4, #255	; 0xff
   11566:	d00c      	beq.n	11582 <ticker_stop_cb+0x2e>
   11568:	4a14      	ldr	r2, [pc, #80]	; (115bc <ticker_stop_cb+0x68>)
   1156a:	4915      	ldr	r1, [pc, #84]	; (115c0 <ticker_stop_cb+0x6c>)
   1156c:	4815      	ldr	r0, [pc, #84]	; (115c4 <ticker_stop_cb+0x70>)
   1156e:	f240 731b 	movw	r3, #1819	; 0x71b
   11572:	f006 fff9 	bl	18568 <printk>
   11576:	4040      	eors	r0, r0
   11578:	f380 8811 	msr	BASEPRI, r0
   1157c:	f04f 0003 	mov.w	r0, #3
   11580:	df02      	svc	2
			  TICKER_ID_ADV_BASE + handle,
   11582:	1ca2      	adds	r2, r4, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   11584:	4b10      	ldr	r3, [pc, #64]	; (115c8 <ticker_stop_cb+0x74>)
   11586:	9500      	str	r5, [sp, #0]
   11588:	b2d2      	uxtb	r2, r2
   1158a:	2101      	movs	r1, #1
   1158c:	2000      	movs	r0, #0
   1158e:	f7fd fe03 	bl	f198 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   11592:	f030 0302 	bics.w	r3, r0, #2
   11596:	d00c      	beq.n	115b2 <ticker_stop_cb+0x5e>
   11598:	4a08      	ldr	r2, [pc, #32]	; (115bc <ticker_stop_cb+0x68>)
   1159a:	490c      	ldr	r1, [pc, #48]	; (115cc <ticker_stop_cb+0x78>)
   1159c:	4809      	ldr	r0, [pc, #36]	; (115c4 <ticker_stop_cb+0x70>)
   1159e:	f44f 63e4 	mov.w	r3, #1824	; 0x720
   115a2:	f006 ffe1 	bl	18568 <printk>
   115a6:	4040      	eors	r0, r0
   115a8:	f380 8811 	msr	BASEPRI, r0
   115ac:	f04f 0003 	mov.w	r0, #3
   115b0:	df02      	svc	2
}
   115b2:	b003      	add	sp, #12
   115b4:	bd30      	pop	{r4, r5, pc}
   115b6:	bf00      	nop
   115b8:	20002760 	.word	0x20002760
   115bc:	00021d52 	.word	0x00021d52
   115c0:	00021e29 	.word	0x00021e29
   115c4:	0001f734 	.word	0x0001f734
   115c8:	0001147d 	.word	0x0001147d
   115cc:	00021dbc 	.word	0x00021dbc

000115d0 <init_reset>:
{
   115d0:	b510      	push	{r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   115d2:	4c13      	ldr	r4, [pc, #76]	; (11620 <init_reset+0x50>)
   115d4:	f104 0028 	add.w	r0, r4, #40	; 0x28
   115d8:	f002 f9ec 	bl	139b4 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   115dc:	f104 0034 	add.w	r0, r4, #52	; 0x34
   115e0:	f002 f9e8 	bl	139b4 <lll_adv_data_init>
	pdu->len = BDADDR_SIZE;
}

static void init_set(struct ll_adv_set *adv)
{
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   115e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   115e8:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
#if defined(CONFIG_BT_CTLR_PRIVACY)
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
#endif /* CONFIG_BT_CTLR_PRIVACY */
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   115ec:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   115ee:	f423 7343 	bic.w	r3, r3, #780	; 0x30c
   115f2:	f023 0302 	bic.w	r3, r3, #2
   115f6:	f043 030e 	orr.w	r3, r3, #14
   115fa:	84a3      	strh	r3, [r4, #36]	; 0x24
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   115fc:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   11600:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	pdu->len = BDADDR_SIZE;
   11604:	2206      	movs	r2, #6
   11606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	pdu->type = pdu_type;
   11608:	2000      	movs	r0, #0
	pdu->len = BDADDR_SIZE;
   1160a:	705a      	strb	r2, [r3, #1]
	pdu->type = pdu_type;
   1160c:	7018      	strb	r0, [r3, #0]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   1160e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   11612:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   11616:	2104      	movs	r1, #4
   11618:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	pdu->len = BDADDR_SIZE;
   1161a:	705a      	strb	r2, [r3, #1]
	pdu->type = pdu_type;
   1161c:	7019      	strb	r1, [r3, #0]
}
   1161e:	bd10      	pop	{r4, pc}
   11620:	20002760 	.word	0x20002760

00011624 <ll_adv_params_set>:
{
   11624:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!adv || adv->is_enabled) {
   11626:	4c33      	ldr	r4, [pc, #204]	; (116f4 <ll_adv_params_set+0xd0>)
{
   11628:	4615      	mov	r5, r2
	if (!adv || adv->is_enabled) {
   1162a:	f894 604a 	ldrb.w	r6, [r4, #74]	; 0x4a
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1162e:	4a32      	ldr	r2, [pc, #200]	; (116f8 <ll_adv_params_set+0xd4>)
{
   11630:	4607      	mov	r7, r0
	if (!adv || adv->is_enabled) {
   11632:	f016 0601 	ands.w	r6, r6, #1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   11636:	6810      	ldr	r0, [r2, #0]
   11638:	7912      	ldrb	r2, [r2, #4]
   1163a:	9000      	str	r0, [sp, #0]
   1163c:	f88d 2004 	strb.w	r2, [sp, #4]
	if (!adv || adv->is_enabled) {
   11640:	d156      	bne.n	116f0 <ll_adv_params_set+0xcc>
	adv->lll.chan_map = chan_map;
   11642:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
   11646:	f002 0003 	and.w	r0, r2, #3
   1164a:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
   1164e:	f002 0207 	and.w	r2, r2, #7
   11652:	0052      	lsls	r2, r2, #1
   11654:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
   11658:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
   1165a:	f420 7043 	bic.w	r0, r0, #780	; 0x30c
   1165e:	f020 0002 	bic.w	r0, r0, #2
   11662:	4302      	orrs	r2, r0
   11664:	84a2      	strh	r2, [r4, #36]	; 0x24
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   11666:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
		adv->interval = 0;
   1166a:	2901      	cmp	r1, #1
   1166c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   11670:	bf08      	it	eq
   11672:	2700      	moveq	r7, #0
   11674:	f8a4 7048 	strh.w	r7, [r4, #72]	; 0x48
   11678:	6ad7      	ldr	r7, [r2, #44]	; 0x2c
	pdu->type = pdu_adv_type[adv_type];
   1167a:	aa02      	add	r2, sp, #8
   1167c:	4411      	add	r1, r2
   1167e:	783a      	ldrb	r2, [r7, #0]
   11680:	f811 1c08 	ldrb.w	r1, [r1, #-8]
   11684:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
   11688:	f001 010f 	and.w	r1, r1, #15
   1168c:	4311      	orrs	r1, r2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1168e:	f001 000f 	and.w	r0, r1, #15
   11692:	2801      	cmp	r0, #1
	pdu->type = pdu_adv_type[adv_type];
   11694:	7039      	strb	r1, [r7, #0]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   11696:	f005 0201 	and.w	r2, r5, #1
   1169a:	d11f      	bne.n	116dc <ll_adv_params_set+0xb8>
		pdu->tx_addr = own_addr_type & 0x1;
   1169c:	f362 1186 	bfi	r1, r2, #6, #1
		pdu->rx_addr = direct_addr_type;
   116a0:	4638      	mov	r0, r7
   116a2:	f363 11c7 	bfi	r1, r3, #7, #1
   116a6:	f800 1b08 	strb.w	r1, [r0], #8
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   116aa:	2206      	movs	r2, #6
   116ac:	9908      	ldr	r1, [sp, #32]
   116ae:	f008 fa79 	bl	19ba4 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   116b2:	230c      	movs	r3, #12
		pdu->len = BDADDR_SIZE;
   116b4:	707b      	strb	r3, [r7, #1]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   116b6:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   116ba:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   116be:	01ad      	lsls	r5, r5, #6
   116c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   116c2:	f005 0540 	and.w	r5, r5, #64	; 0x40
		if (pdu->len == 0) {
   116c6:	785a      	ldrb	r2, [r3, #1]
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   116c8:	f045 0504 	orr.w	r5, r5, #4
   116cc:	701d      	strb	r5, [r3, #0]
		if (pdu->len == 0) {
   116ce:	b912      	cbnz	r2, 116d6 <ll_adv_params_set+0xb2>
			pdu->len = BDADDR_SIZE;
   116d0:	2106      	movs	r1, #6
   116d2:	7059      	strb	r1, [r3, #1]
	return 0;
   116d4:	4616      	mov	r6, r2
}
   116d6:	4630      	mov	r0, r6
   116d8:	b003      	add	sp, #12
   116da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pdu->tx_addr = own_addr_type & 0x1;
   116dc:	f362 1186 	bfi	r1, r2, #6, #1
	} else if (pdu->len == 0) {
   116e0:	787b      	ldrb	r3, [r7, #1]
		pdu->rx_addr = 0;
   116e2:	f366 11c7 	bfi	r1, r6, #7, #1
   116e6:	7039      	strb	r1, [r7, #0]
	} else if (pdu->len == 0) {
   116e8:	2b00      	cmp	r3, #0
   116ea:	d1e4      	bne.n	116b6 <ll_adv_params_set+0x92>
		pdu->len = BDADDR_SIZE;
   116ec:	2306      	movs	r3, #6
   116ee:	e7e1      	b.n	116b4 <ll_adv_params_set+0x90>
		return BT_HCI_ERR_CMD_DISALLOWED;
   116f0:	260c      	movs	r6, #12
   116f2:	e7f0      	b.n	116d6 <ll_adv_params_set+0xb2>
   116f4:	20002760 	.word	0x20002760
   116f8:	0001e72a 	.word	0x0001e72a

000116fc <ull_adv_reset_finalize>:
{
   116fc:	b510      	push	{r4, lr}
		lll_adv_data_reset(&lll->adv_data);
   116fe:	4c06      	ldr	r4, [pc, #24]	; (11718 <ull_adv_reset_finalize+0x1c>)
   11700:	f104 0028 	add.w	r0, r4, #40	; 0x28
   11704:	f00b fa73 	bl	1cbee <lll_adv_data_reset>
		lll_adv_data_reset(&lll->scan_rsp);
   11708:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1170c:	f00b fa6f 	bl	1cbee <lll_adv_data_reset>
}
   11710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = init_reset();
   11714:	f7ff bf5c 	b.w	115d0 <init_reset>
   11718:	20002760 	.word	0x20002760

0001171c <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   1171c:	4b03      	ldr	r3, [pc, #12]	; (1172c <ull_adv_handle_get+0x10>)
   1171e:	1ac0      	subs	r0, r0, r3
   11720:	234c      	movs	r3, #76	; 0x4c
   11722:	fbb0 f0f3 	udiv	r0, r0, r3
}
   11726:	b280      	uxth	r0, r0
   11728:	4770      	bx	lr
   1172a:	bf00      	nop
   1172c:	20002760 	.word	0x20002760

00011730 <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   11730:	6800      	ldr	r0, [r0, #0]
   11732:	4b03      	ldr	r3, [pc, #12]	; (11740 <ull_adv_lll_handle_get+0x10>)
   11734:	1ac0      	subs	r0, r0, r3
   11736:	234c      	movs	r3, #76	; 0x4c
   11738:	fbb0 f0f3 	udiv	r0, r0, r3
}
   1173c:	b280      	uxth	r0, r0
   1173e:	4770      	bx	lr
   11740:	20002760 	.word	0x20002760

00011744 <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   11744:	b938      	cbnz	r0, 11756 <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
   11746:	4805      	ldr	r0, [pc, #20]	; (1175c <ull_adv_is_enabled_get+0x18>)
   11748:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
	return &ll_adv[handle];
   1174c:	f013 0f01 	tst.w	r3, #1
   11750:	bf08      	it	eq
   11752:	2000      	moveq	r0, #0
   11754:	4770      	bx	lr
		return NULL;
   11756:	2000      	movs	r0, #0
}
   11758:	4770      	bx	lr
   1175a:	bf00      	nop
   1175c:	20002760 	.word	0x20002760

00011760 <disable.constprop.0>:
static inline uint8_t disable(uint8_t handle)
   11760:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	adv = ull_adv_is_enabled_get(handle);
   11762:	2000      	movs	r0, #0
   11764:	f7ff ffee 	bl	11744 <ull_adv_is_enabled_get>
	if (!adv) {
   11768:	4604      	mov	r4, r0
   1176a:	b910      	cbnz	r0, 11772 <disable.constprop.0+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1176c:	200c      	movs	r0, #12
}
   1176e:	b004      	add	sp, #16
   11770:	bd10      	pop	{r4, pc}
	if (adv->lll.conn) {
   11772:	6a03      	ldr	r3, [r0, #32]
   11774:	bb4b      	cbnz	r3, 117ca <disable.constprop.0+0x6a>
	mark = ull_disable_mark(adv);
   11776:	4620      	mov	r0, r4
   11778:	f7ff fb80 	bl	10e7c <ull_disable_mark>
	LL_ASSERT(mark == adv);
   1177c:	4284      	cmp	r4, r0
   1177e:	d130      	bne.n	117e2 <disable.constprop.0+0x82>
	if (adv->lll.is_hdcd) {
   11780:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   11784:	07db      	lsls	r3, r3, #31
   11786:	d53a      	bpl.n	117fe <disable.constprop.0+0x9e>
		ret_cb = TICKER_STATUS_BUSY;
   11788:	2302      	movs	r3, #2
   1178a:	9303      	str	r3, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1178c:	ab03      	add	r3, sp, #12
   1178e:	9300      	str	r3, [sp, #0]
   11790:	2103      	movs	r1, #3
   11792:	4b3e      	ldr	r3, [pc, #248]	; (1188c <disable.constprop.0+0x12c>)
   11794:	2201      	movs	r2, #1
   11796:	2000      	movs	r0, #0
   11798:	f7fd fcfe 	bl	f198 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
   1179c:	a903      	add	r1, sp, #12
   1179e:	f7ff fb47 	bl	10e30 <ull_ticker_status_take>
		if (ret) {
   117a2:	b360      	cbz	r0, 117fe <disable.constprop.0+0x9e>
			mark = ull_disable_unmark(adv);
   117a4:	4620      	mov	r0, r4
   117a6:	f7ff fb71 	bl	10e8c <ull_disable_unmark>
			LL_ASSERT(mark == adv);
   117aa:	4284      	cmp	r4, r0
   117ac:	d0de      	beq.n	1176c <disable.constprop.0+0xc>
   117ae:	f240 73fc 	movw	r3, #2044	; 0x7fc
		LL_ASSERT(mark == adv);
   117b2:	4a37      	ldr	r2, [pc, #220]	; (11890 <disable.constprop.0+0x130>)
   117b4:	4937      	ldr	r1, [pc, #220]	; (11894 <disable.constprop.0+0x134>)
   117b6:	4838      	ldr	r0, [pc, #224]	; (11898 <disable.constprop.0+0x138>)
   117b8:	f006 fed6 	bl	18568 <printk>
   117bc:	4040      	eors	r0, r0
   117be:	f380 8811 	msr	BASEPRI, r0
   117c2:	f04f 0003 	mov.w	r0, #3
   117c6:	df02      	svc	2
   117c8:	e7d0      	b.n	1176c <disable.constprop.0+0xc>
		adv->lll.conn->slave.cancelled = 1U;
   117ca:	f893 2020 	ldrb.w	r2, [r3, #32]
   117ce:	f042 0202 	orr.w	r2, r2, #2
   117d2:	f883 2020 	strb.w	r2, [r3, #32]
		if (unlikely(adv->lll.conn->slave.initiated)) {
   117d6:	6a03      	ldr	r3, [r0, #32]
   117d8:	f893 3020 	ldrb.w	r3, [r3, #32]
   117dc:	07da      	lsls	r2, r3, #31
   117de:	d5ca      	bpl.n	11776 <disable.constprop.0+0x16>
   117e0:	e7c4      	b.n	1176c <disable.constprop.0+0xc>
	LL_ASSERT(mark == adv);
   117e2:	4a2b      	ldr	r2, [pc, #172]	; (11890 <disable.constprop.0+0x130>)
   117e4:	492b      	ldr	r1, [pc, #172]	; (11894 <disable.constprop.0+0x134>)
   117e6:	482c      	ldr	r0, [pc, #176]	; (11898 <disable.constprop.0+0x138>)
   117e8:	f240 73f1 	movw	r3, #2033	; 0x7f1
   117ec:	f006 febc 	bl	18568 <printk>
   117f0:	4040      	eors	r0, r0
   117f2:	f380 8811 	msr	BASEPRI, r0
   117f6:	f04f 0003 	mov.w	r0, #3
   117fa:	df02      	svc	2
   117fc:	e7c0      	b.n	11780 <disable.constprop.0+0x20>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   117fe:	ab03      	add	r3, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
   11800:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   11802:	9300      	str	r3, [sp, #0]
   11804:	2103      	movs	r1, #3
   11806:	4b21      	ldr	r3, [pc, #132]	; (1188c <disable.constprop.0+0x12c>)
	ret_cb = TICKER_STATUS_BUSY;
   11808:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   1180a:	2000      	movs	r0, #0
   1180c:	f7fd fcc4 	bl	f198 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   11810:	a903      	add	r1, sp, #12
   11812:	f7ff fb0d 	bl	10e30 <ull_ticker_status_take>
	if (ret) {
   11816:	b138      	cbz	r0, 11828 <disable.constprop.0+0xc8>
		mark = ull_disable_unmark(adv);
   11818:	4620      	mov	r0, r4
   1181a:	f7ff fb37 	bl	10e8c <ull_disable_unmark>
		LL_ASSERT(mark == adv);
   1181e:	4284      	cmp	r4, r0
   11820:	d0a4      	beq.n	1176c <disable.constprop.0+0xc>
   11822:	f640 030a 	movw	r3, #2058	; 0x80a
   11826:	e7c4      	b.n	117b2 <disable.constprop.0+0x52>
	ret = ull_disable(&adv->lll);
   11828:	f104 001c 	add.w	r0, r4, #28
   1182c:	f7ff fb5e 	bl	10eec <ull_disable>
	LL_ASSERT(!ret);
   11830:	b160      	cbz	r0, 1184c <disable.constprop.0+0xec>
   11832:	4a17      	ldr	r2, [pc, #92]	; (11890 <disable.constprop.0+0x130>)
   11834:	4919      	ldr	r1, [pc, #100]	; (1189c <disable.constprop.0+0x13c>)
   11836:	4818      	ldr	r0, [pc, #96]	; (11898 <disable.constprop.0+0x138>)
   11838:	f44f 6301 	mov.w	r3, #2064	; 0x810
   1183c:	f006 fe94 	bl	18568 <printk>
   11840:	4040      	eors	r0, r0
   11842:	f380 8811 	msr	BASEPRI, r0
   11846:	f04f 0003 	mov.w	r0, #3
   1184a:	df02      	svc	2
	mark = ull_disable_unmark(adv);
   1184c:	4620      	mov	r0, r4
   1184e:	f7ff fb1d 	bl	10e8c <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   11852:	4284      	cmp	r4, r0
   11854:	d00c      	beq.n	11870 <disable.constprop.0+0x110>
   11856:	4a0e      	ldr	r2, [pc, #56]	; (11890 <disable.constprop.0+0x130>)
   11858:	490e      	ldr	r1, [pc, #56]	; (11894 <disable.constprop.0+0x134>)
   1185a:	480f      	ldr	r0, [pc, #60]	; (11898 <disable.constprop.0+0x138>)
   1185c:	f640 0313 	movw	r3, #2067	; 0x813
   11860:	f006 fe82 	bl	18568 <printk>
   11864:	4040      	eors	r0, r0
   11866:	f380 8811 	msr	BASEPRI, r0
   1186a:	f04f 0003 	mov.w	r0, #3
   1186e:	df02      	svc	2
	if (adv->lll.conn) {
   11870:	6a23      	ldr	r3, [r4, #32]
   11872:	b113      	cbz	r3, 1187a <disable.constprop.0+0x11a>
		conn_release(adv);
   11874:	4620      	mov	r0, r4
   11876:	f7ff fdc3 	bl	11400 <conn_release>
	adv->is_enabled = 0U;
   1187a:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   1187e:	f36f 0300 	bfc	r3, #0, #1
   11882:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	return 0;
   11886:	2000      	movs	r0, #0
   11888:	e771      	b.n	1176e <disable.constprop.0+0xe>
   1188a:	bf00      	nop
   1188c:	000105c1 	.word	0x000105c1
   11890:	00021d52 	.word	0x00021d52
   11894:	00021e34 	.word	0x00021e34
   11898:	0001f734 	.word	0x0001f734
   1189c:	00021cbb 	.word	0x00021cbb

000118a0 <ll_adv_data_set>:
{
   118a0:	460a      	mov	r2, r1
	return ull_adv_data_set(adv, len, data);
   118a2:	4601      	mov	r1, r0
   118a4:	4801      	ldr	r0, [pc, #4]	; (118ac <ll_adv_data_set+0xc>)
   118a6:	f00a bef0 	b.w	1c68a <ull_adv_data_set>
   118aa:	bf00      	nop
   118ac:	20002760 	.word	0x20002760

000118b0 <ll_adv_scan_rsp_set>:
{
   118b0:	460a      	mov	r2, r1
	return ull_scan_rsp_set(adv, len, data);
   118b2:	4601      	mov	r1, r0
   118b4:	4801      	ldr	r0, [pc, #4]	; (118bc <ll_adv_scan_rsp_set+0xc>)
   118b6:	f00a bf23 	b.w	1c700 <ull_scan_rsp_set>
   118ba:	bf00      	nop
   118bc:	20002760 	.word	0x20002760

000118c0 <ticker_cb>:
	return 0;
}

static void ticker_cb(uint32_t ticks_at_expire, uint32_t remainder,
		      uint16_t lazy, uint8_t force, void *param)
{
   118c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   118c4:	461d      	mov	r5, r3
   118c6:	9b08      	ldr	r3, [sp, #32]
	uint8_t ref;

	DEBUG_RADIO_PREPARE_O(1);

	scan = param;
	lll = &scan->lll;
   118c8:	461e      	mov	r6, r3
{
   118ca:	4681      	mov	r9, r0
	return ++hdr->ref;
   118cc:	f816 4b1c 	ldrb.w	r4, [r6], #28
   118d0:	3401      	adds	r4, #1
   118d2:	b2e4      	uxtb	r4, r4
   118d4:	4688      	mov	r8, r1
   118d6:	4617      	mov	r7, r2
   118d8:	701c      	strb	r4, [r3, #0]
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	/* Increment prepare reference count */
	ref = ull_ref_inc(&scan->ull);
	LL_ASSERT(ref);
   118da:	b964      	cbnz	r4, 118f6 <ticker_cb+0x36>
   118dc:	4a14      	ldr	r2, [pc, #80]	; (11930 <ticker_cb+0x70>)
   118de:	4915      	ldr	r1, [pc, #84]	; (11934 <ticker_cb+0x74>)
   118e0:	4815      	ldr	r0, [pc, #84]	; (11938 <ticker_cb+0x78>)
   118e2:	f240 23cf 	movw	r3, #719	; 0x2cf
   118e6:	f006 fe3f 	bl	18568 <printk>
   118ea:	4040      	eors	r0, r0
   118ec:	f380 8811 	msr	BASEPRI, r0
   118f0:	f04f 0003 	mov.w	r0, #3
   118f4:	df02      	svc	2

	/* Append timing parameters */
	p.ticks_at_expire = ticks_at_expire;
   118f6:	4c11      	ldr	r4, [pc, #68]	; (1193c <ticker_cb+0x7c>)
	p.remainder = remainder;
	p.lazy = lazy;
	p.param = lll;
	p.force = force;
	mfy.param = &p;
   118f8:	4b11      	ldr	r3, [pc, #68]	; (11940 <ticker_cb+0x80>)
	p.lazy = lazy;
   118fa:	8127      	strh	r7, [r4, #8]

	/* Kick LLL prepare */
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   118fc:	2200      	movs	r2, #0
   118fe:	4611      	mov	r1, r2
   11900:	2001      	movs	r0, #1
	p.remainder = remainder;
   11902:	e9c4 9800 	strd	r9, r8, [r4]
	p.param = lll;
   11906:	60e6      	str	r6, [r4, #12]
	p.force = force;
   11908:	72a5      	strb	r5, [r4, #10]
	mfy.param = &p;
   1190a:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1190c:	f7fc fe66 	bl	e5dc <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   11910:	b160      	cbz	r0, 1192c <ticker_cb+0x6c>
   11912:	4a07      	ldr	r2, [pc, #28]	; (11930 <ticker_cb+0x70>)
   11914:	490b      	ldr	r1, [pc, #44]	; (11944 <ticker_cb+0x84>)
   11916:	4808      	ldr	r0, [pc, #32]	; (11938 <ticker_cb+0x78>)
   11918:	f44f 7337 	mov.w	r3, #732	; 0x2dc
   1191c:	f006 fe24 	bl	18568 <printk>
   11920:	4040      	eors	r0, r0
   11922:	f380 8811 	msr	BASEPRI, r0
   11926:	f04f 0003 	mov.w	r0, #3
   1192a:	df02      	svc	2

	DEBUG_RADIO_PREPARE_O(1);
}
   1192c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11930:	00021e50 	.word	0x00021e50
   11934:	00021db8 	.word	0x00021db8
   11938:	0001f734 	.word	0x0001f734
   1193c:	20002804 	.word	0x20002804
   11940:	20000804 	.word	0x20000804
   11944:	00021cbb 	.word	0x00021cbb

00011948 <ull_scan_disable>:
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
   11948:	3004      	adds	r0, #4
{
   1194a:	b508      	push	{r3, lr}
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
   1194c:	f101 021c 	add.w	r2, r1, #28
   11950:	b2c0      	uxtb	r0, r0
   11952:	f7ff fb07 	bl	10f64 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   11956:	b178      	cbz	r0, 11978 <ull_scan_disable+0x30>
   11958:	3078      	adds	r0, #120	; 0x78
   1195a:	d00c      	beq.n	11976 <ull_scan_disable+0x2e>
   1195c:	4a07      	ldr	r2, [pc, #28]	; (1197c <ull_scan_disable+0x34>)
   1195e:	4908      	ldr	r1, [pc, #32]	; (11980 <ull_scan_disable+0x38>)
   11960:	4808      	ldr	r0, [pc, #32]	; (11984 <ull_scan_disable+0x3c>)
   11962:	f240 13cf 	movw	r3, #463	; 0x1cf
   11966:	f006 fdff 	bl	18568 <printk>
   1196a:	4040      	eors	r0, r0
   1196c:	f380 8811 	msr	BASEPRI, r0
   11970:	f04f 0003 	mov.w	r0, #3
   11974:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
   11976:	200c      	movs	r0, #12
}
   11978:	bd08      	pop	{r3, pc}
   1197a:	bf00      	nop
   1197c:	00021e50 	.word	0x00021e50
   11980:	00021e90 	.word	0x00021e90
   11984:	0001f734 	.word	0x0001f734

00011988 <ull_scan_lll_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   11988:	6800      	ldr	r0, [r0, #0]
   1198a:	4b03      	ldr	r3, [pc, #12]	; (11998 <ull_scan_lll_handle_get+0x10>)
   1198c:	1ac0      	subs	r0, r0, r3
   1198e:	2334      	movs	r3, #52	; 0x34
   11990:	fbb0 f0f3 	udiv	r0, r0, r3
}
   11994:	b2c0      	uxtb	r0, r0
   11996:	4770      	bx	lr
   11998:	200027d0 	.word	0x200027d0

0001199c <ull_scan_is_enabled_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
   1199c:	b938      	cbnz	r0, 119ae <ull_scan_is_enabled_get+0x12>
	if (!scan || !scan->is_enabled) {
   1199e:	4805      	ldr	r0, [pc, #20]	; (119b4 <ull_scan_is_enabled_get+0x18>)
   119a0:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
	return &ll_scan[handle];
   119a4:	f013 0f01 	tst.w	r3, #1
   119a8:	bf08      	it	eq
   119aa:	2000      	moveq	r0, #0
   119ac:	4770      	bx	lr
		return NULL;
   119ae:	2000      	movs	r0, #0
}
   119b0:	4770      	bx	lr
   119b2:	bf00      	nop
   119b4:	200027d0 	.word	0x200027d0

000119b8 <ull_scan_is_disabled_get>:
	if (!scan || scan->is_enabled) {
   119b8:	4a04      	ldr	r2, [pc, #16]	; (119cc <ull_scan_is_disabled_get+0x14>)
   119ba:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
   119be:	f003 0301 	and.w	r3, r3, #1
   119c2:	4303      	orrs	r3, r0
}
   119c4:	bf0c      	ite	eq
   119c6:	4610      	moveq	r0, r2
   119c8:	2000      	movne	r0, #0
   119ca:	4770      	bx	lr
   119cc:	200027d0 	.word	0x200027d0

000119d0 <init_reset>:
{
   119d0:	b508      	push	{r3, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   119d2:	480d      	ldr	r0, [pc, #52]	; (11a08 <init_reset+0x38>)
   119d4:	4b0d      	ldr	r3, [pc, #52]	; (11a0c <init_reset+0x3c>)
   119d6:	2201      	movs	r2, #1
   119d8:	f44f 719c 	mov.w	r1, #312	; 0x138
   119dc:	f00a fa95 	bl	1bf0a <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_BUF_ACL_TX_COUNT,
   119e0:	4b0b      	ldr	r3, [pc, #44]	; (11a10 <init_reset+0x40>)
   119e2:	2204      	movs	r2, #4
   119e4:	1898      	adds	r0, r3, r2
   119e6:	2124      	movs	r1, #36	; 0x24
   119e8:	f00a fa8f 	bl	1bf0a <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   119ec:	4b09      	ldr	r3, [pc, #36]	; (11a14 <init_reset+0x44>)
   119ee:	2204      	movs	r2, #4
   119f0:	1898      	adds	r0, r3, r2
   119f2:	212c      	movs	r1, #44	; 0x2c
   119f4:	f00a fa89 	bl	1bf0a <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   119f8:	4b07      	ldr	r3, [pc, #28]	; (11a18 <init_reset+0x48>)
   119fa:	2208      	movs	r2, #8
   119fc:	1d18      	adds	r0, r3, #4
   119fe:	4611      	mov	r1, r2
   11a00:	f00a fa83 	bl	1bf0a <mem_init>
}
   11a04:	2000      	movs	r0, #0
   11a06:	bd08      	pop	{r3, pc}
   11a08:	200015a8 	.word	0x200015a8
   11a0c:	20002814 	.word	0x20002814
   11a10:	20002834 	.word	0x20002834
   11a14:	200028c8 	.word	0x200028c8
   11a18:	2000297c 	.word	0x2000297c

00011a1c <ctrl_tx_rsp_mem_acquire.isra.0>:
static struct node_tx *ctrl_tx_rsp_mem_acquire(struct ll_conn *conn,
   11a1c:	b538      	push	{r3, r4, r5, lr}
	if (conn->common.txn_lock) {
   11a1e:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
   11a22:	079b      	lsls	r3, r3, #30
static struct node_tx *ctrl_tx_rsp_mem_acquire(struct ll_conn *conn,
   11a24:	4604      	mov	r4, r0
   11a26:	4615      	mov	r5, r2
	if (conn->common.txn_lock) {
   11a28:	d504      	bpl.n	11a34 <ctrl_tx_rsp_mem_acquire.isra.0+0x18>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   11a2a:	2301      	movs	r3, #1
		*err = 0U;
   11a2c:	2000      	movs	r0, #0
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   11a2e:	700b      	strb	r3, [r1, #0]
		*err = 0U;
   11a30:	6010      	str	r0, [r2, #0]
}
   11a32:	bd38      	pop	{r3, r4, r5, pc}
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   11a34:	4807      	ldr	r0, [pc, #28]	; (11a54 <ctrl_tx_rsp_mem_acquire.isra.0+0x38>)
   11a36:	f00a fa8c 	bl	1bf52 <mem_acquire>
	if (!tx) {
   11a3a:	b918      	cbnz	r0, 11a44 <ctrl_tx_rsp_mem_acquire.isra.0+0x28>
		*err = -ENOBUFS;
   11a3c:	f06f 0368 	mvn.w	r3, #104	; 0x68
   11a40:	602b      	str	r3, [r5, #0]
		return NULL;
   11a42:	e7f6      	b.n	11a32 <ctrl_tx_rsp_mem_acquire.isra.0+0x16>
	conn->common.txn_lock = 1U;
   11a44:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   11a48:	f043 0302 	orr.w	r3, r3, #2
   11a4c:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
	return tx;
   11a50:	e7ef      	b.n	11a32 <ctrl_tx_rsp_mem_acquire.isra.0+0x16>
   11a52:	bf00      	nop
   11a54:	200028c8 	.word	0x200028c8

00011a58 <ticker_op_stop_cb>:
{
   11a58:	b570      	push	{r4, r5, r6, lr}
   11a5a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   11a5c:	b160      	cbz	r0, 11a78 <ticker_op_stop_cb+0x20>
   11a5e:	4a25      	ldr	r2, [pc, #148]	; (11af4 <ticker_op_stop_cb+0x9c>)
   11a60:	4925      	ldr	r1, [pc, #148]	; (11af8 <ticker_op_stop_cb+0xa0>)
   11a62:	4826      	ldr	r0, [pc, #152]	; (11afc <ticker_op_stop_cb+0xa4>)
   11a64:	f44f 63f6 	mov.w	r3, #1968	; 0x7b0
   11a68:	f006 fd7e 	bl	18568 <printk>
   11a6c:	4040      	eors	r0, r0
   11a6e:	f380 8811 	msr	BASEPRI, r0
   11a72:	f04f 0003 	mov.w	r0, #3
   11a76:	df02      	svc	2
	mfy.param = &conn->lll;
   11a78:	4b21      	ldr	r3, [pc, #132]	; (11b00 <ticker_op_stop_cb+0xa8>)
   11a7a:	4d22      	ldr	r5, [pc, #136]	; (11b04 <ticker_op_stop_cb+0xac>)
   11a7c:	f104 021c 	add.w	r2, r4, #28
   11a80:	609a      	str	r2, [r3, #8]
	return hdr->ref;
   11a82:	7821      	ldrb	r1, [r4, #0]
   11a84:	461e      	mov	r6, r3
	if (ull_ref_get(hdr)) {
   11a86:	f001 02ff 	and.w	r2, r1, #255	; 0xff
   11a8a:	b341      	cbz	r1, 11ade <ticker_op_stop_cb+0x86>
		LL_ASSERT(!hdr->disabled_cb);
   11a8c:	6963      	ldr	r3, [r4, #20]
   11a8e:	b163      	cbz	r3, 11aaa <ticker_op_stop_cb+0x52>
   11a90:	4a18      	ldr	r2, [pc, #96]	; (11af4 <ticker_op_stop_cb+0x9c>)
   11a92:	491d      	ldr	r1, [pc, #116]	; (11b08 <ticker_op_stop_cb+0xb0>)
   11a94:	4819      	ldr	r0, [pc, #100]	; (11afc <ticker_op_stop_cb+0xa4>)
   11a96:	f240 73be 	movw	r3, #1982	; 0x7be
   11a9a:	f006 fd65 	bl	18568 <printk>
   11a9e:	4040      	eors	r0, r0
   11aa0:	f380 8811 	msr	BASEPRI, r0
   11aa4:	f04f 0003 	mov.w	r0, #3
   11aa8:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   11aaa:	68b3      	ldr	r3, [r6, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   11aac:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   11aae:	e9c4 5305 	strd	r5, r3, [r4, #20]
		mfy.fp = lll_disable;
   11ab2:	4b16      	ldr	r3, [pc, #88]	; (11b0c <ticker_op_stop_cb+0xb4>)
   11ab4:	60f3      	str	r3, [r6, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   11ab6:	4611      	mov	r1, r2
   11ab8:	4b11      	ldr	r3, [pc, #68]	; (11b00 <ticker_op_stop_cb+0xa8>)
   11aba:	2002      	movs	r0, #2
   11abc:	f7fc fd8e 	bl	e5dc <mayfly_enqueue>
		LL_ASSERT(!ret);
   11ac0:	b160      	cbz	r0, 11adc <ticker_op_stop_cb+0x84>
   11ac2:	f240 73c5 	movw	r3, #1989	; 0x7c5
		LL_ASSERT(!ret);
   11ac6:	4a0b      	ldr	r2, [pc, #44]	; (11af4 <ticker_op_stop_cb+0x9c>)
   11ac8:	4911      	ldr	r1, [pc, #68]	; (11b10 <ticker_op_stop_cb+0xb8>)
   11aca:	480c      	ldr	r0, [pc, #48]	; (11afc <ticker_op_stop_cb+0xa4>)
   11acc:	f006 fd4c 	bl	18568 <printk>
   11ad0:	4040      	eors	r0, r0
   11ad2:	f380 8811 	msr	BASEPRI, r0
   11ad6:	f04f 0003 	mov.w	r0, #3
   11ada:	df02      	svc	2
}
   11adc:	bd70      	pop	{r4, r5, r6, pc}
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   11ade:	2101      	movs	r1, #1
   11ae0:	2002      	movs	r0, #2
		mfy.fp = disabled_cb;
   11ae2:	60dd      	str	r5, [r3, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   11ae4:	f7fc fd7a 	bl	e5dc <mayfly_enqueue>
		LL_ASSERT(!ret);
   11ae8:	2800      	cmp	r0, #0
   11aea:	d0f7      	beq.n	11adc <ticker_op_stop_cb+0x84>
   11aec:	f240 73cc 	movw	r3, #1996	; 0x7cc
   11af0:	e7e9      	b.n	11ac6 <ticker_op_stop_cb+0x6e>
   11af2:	bf00      	nop
   11af4:	00021eb9 	.word	0x00021eb9
   11af8:	000220a3 	.word	0x000220a3
   11afc:	0001f734 	.word	0x0001f734
   11b00:	2000089c 	.word	0x2000089c
   11b04:	00011b15 	.word	0x00011b15
   11b08:	00021de8 	.word	0x00021de8
   11b0c:	000133b5 	.word	0x000133b5
   11b10:	00021cbb 	.word	0x00021cbb

00011b14 <disabled_cb>:
{
   11b14:	b508      	push	{r3, lr}
	mfy.param = param;
   11b16:	4b0b      	ldr	r3, [pc, #44]	; (11b44 <disabled_cb+0x30>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   11b18:	2200      	movs	r2, #0
	mfy.param = param;
   11b1a:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   11b1c:	4611      	mov	r1, r2
   11b1e:	2001      	movs	r0, #1
   11b20:	f7fc fd5c 	bl	e5dc <mayfly_enqueue>
	LL_ASSERT(!ret);
   11b24:	b160      	cbz	r0, 11b40 <disabled_cb+0x2c>
   11b26:	4a08      	ldr	r2, [pc, #32]	; (11b48 <disabled_cb+0x34>)
   11b28:	4908      	ldr	r1, [pc, #32]	; (11b4c <disabled_cb+0x38>)
   11b2a:	4809      	ldr	r0, [pc, #36]	; (11b50 <disabled_cb+0x3c>)
   11b2c:	f240 73d9 	movw	r3, #2009	; 0x7d9
   11b30:	f006 fd1a 	bl	18568 <printk>
   11b34:	4040      	eors	r0, r0
   11b36:	f380 8811 	msr	BASEPRI, r0
   11b3a:	f04f 0003 	mov.w	r0, #3
   11b3e:	df02      	svc	2
}
   11b40:	bd08      	pop	{r3, pc}
   11b42:	bf00      	nop
   11b44:	200008ac 	.word	0x200008ac
   11b48:	00021eb9 	.word	0x00021eb9
   11b4c:	00021cbb 	.word	0x00021cbb
   11b50:	0001f734 	.word	0x0001f734

00011b54 <ticker_start_conn_op_cb>:
{
   11b54:	b510      	push	{r4, lr}
   11b56:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   11b58:	b160      	cbz	r0, 11b74 <ticker_start_conn_op_cb+0x20>
   11b5a:	4a10      	ldr	r2, [pc, #64]	; (11b9c <ticker_start_conn_op_cb+0x48>)
   11b5c:	4910      	ldr	r1, [pc, #64]	; (11ba0 <ticker_start_conn_op_cb+0x4c>)
   11b5e:	4811      	ldr	r0, [pc, #68]	; (11ba4 <ticker_start_conn_op_cb+0x50>)
   11b60:	f240 734e 	movw	r3, #1870	; 0x74e
   11b64:	f006 fd00 	bl	18568 <printk>
   11b68:	4040      	eors	r0, r0
   11b6a:	f380 8811 	msr	BASEPRI, r0
   11b6e:	f04f 0003 	mov.w	r0, #3
   11b72:	df02      	svc	2
	p = ull_update_unmark(param);
   11b74:	4620      	mov	r0, r4
   11b76:	f7ff f9a5 	bl	10ec4 <ull_update_unmark>
	LL_ASSERT(p == param);
   11b7a:	4284      	cmp	r4, r0
   11b7c:	d00c      	beq.n	11b98 <ticker_start_conn_op_cb+0x44>
   11b7e:	4a07      	ldr	r2, [pc, #28]	; (11b9c <ticker_start_conn_op_cb+0x48>)
   11b80:	4909      	ldr	r1, [pc, #36]	; (11ba8 <ticker_start_conn_op_cb+0x54>)
   11b82:	4808      	ldr	r0, [pc, #32]	; (11ba4 <ticker_start_conn_op_cb+0x50>)
   11b84:	f240 7351 	movw	r3, #1873	; 0x751
   11b88:	f006 fcee 	bl	18568 <printk>
   11b8c:	4040      	eors	r0, r0
   11b8e:	f380 8811 	msr	BASEPRI, r0
   11b92:	f04f 0003 	mov.w	r0, #3
   11b96:	df02      	svc	2
}
   11b98:	bd10      	pop	{r4, pc}
   11b9a:	bf00      	nop
   11b9c:	00021eb9 	.word	0x00021eb9
   11ba0:	000220a3 	.word	0x000220a3
   11ba4:	0001f734 	.word	0x0001f734
   11ba8:	00021ef9 	.word	0x00021ef9

00011bac <ticker_stop_conn_op_cb>:
{
   11bac:	b510      	push	{r4, lr}
   11bae:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   11bb0:	b160      	cbz	r0, 11bcc <ticker_stop_conn_op_cb+0x20>
   11bb2:	4a10      	ldr	r2, [pc, #64]	; (11bf4 <ticker_stop_conn_op_cb+0x48>)
   11bb4:	4910      	ldr	r1, [pc, #64]	; (11bf8 <ticker_stop_conn_op_cb+0x4c>)
   11bb6:	4811      	ldr	r0, [pc, #68]	; (11bfc <ticker_stop_conn_op_cb+0x50>)
   11bb8:	f240 7344 	movw	r3, #1860	; 0x744
   11bbc:	f006 fcd4 	bl	18568 <printk>
   11bc0:	4040      	eors	r0, r0
   11bc2:	f380 8811 	msr	BASEPRI, r0
   11bc6:	f04f 0003 	mov.w	r0, #3
   11bca:	df02      	svc	2
	p = ull_update_mark(param);
   11bcc:	4620      	mov	r0, r4
   11bce:	f7ff f971 	bl	10eb4 <ull_update_mark>
	LL_ASSERT(p == param);
   11bd2:	4284      	cmp	r4, r0
   11bd4:	d00c      	beq.n	11bf0 <ticker_stop_conn_op_cb+0x44>
   11bd6:	4a07      	ldr	r2, [pc, #28]	; (11bf4 <ticker_stop_conn_op_cb+0x48>)
   11bd8:	4909      	ldr	r1, [pc, #36]	; (11c00 <ticker_stop_conn_op_cb+0x54>)
   11bda:	4808      	ldr	r0, [pc, #32]	; (11bfc <ticker_stop_conn_op_cb+0x50>)
   11bdc:	f240 7347 	movw	r3, #1863	; 0x747
   11be0:	f006 fcc2 	bl	18568 <printk>
   11be4:	4040      	eors	r0, r0
   11be6:	f380 8811 	msr	BASEPRI, r0
   11bea:	f04f 0003 	mov.w	r0, #3
   11bee:	df02      	svc	2
}
   11bf0:	bd10      	pop	{r4, pc}
   11bf2:	bf00      	nop
   11bf4:	00021eb9 	.word	0x00021eb9
   11bf8:	000220a3 	.word	0x000220a3
   11bfc:	0001f734 	.word	0x0001f734
   11c00:	00021ef9 	.word	0x00021ef9

00011c04 <ticker_update_conn_op_cb>:
{
   11c04:	b510      	push	{r4, lr}
   11c06:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   11c08:	b1a0      	cbz	r0, 11c34 <ticker_update_conn_op_cb+0x30>
   11c0a:	f7ff f969 	bl	10ee0 <ull_update_mark_get>
   11c0e:	4284      	cmp	r4, r0
   11c10:	d010      	beq.n	11c34 <ticker_update_conn_op_cb+0x30>
   11c12:	f7ff f949 	bl	10ea8 <ull_disable_mark_get>
   11c16:	4284      	cmp	r4, r0
   11c18:	d00c      	beq.n	11c34 <ticker_update_conn_op_cb+0x30>
   11c1a:	4a07      	ldr	r2, [pc, #28]	; (11c38 <ticker_update_conn_op_cb+0x34>)
   11c1c:	4907      	ldr	r1, [pc, #28]	; (11c3c <ticker_update_conn_op_cb+0x38>)
   11c1e:	4808      	ldr	r0, [pc, #32]	; (11c40 <ticker_update_conn_op_cb+0x3c>)
   11c20:	f240 733b 	movw	r3, #1851	; 0x73b
   11c24:	f006 fca0 	bl	18568 <printk>
   11c28:	4040      	eors	r0, r0
   11c2a:	f380 8811 	msr	BASEPRI, r0
   11c2e:	f04f 0003 	mov.w	r0, #3
   11c32:	df02      	svc	2
}
   11c34:	bd10      	pop	{r4, pc}
   11c36:	bf00      	nop
   11c38:	00021eb9 	.word	0x00021eb9
   11c3c:	00021f04 	.word	0x00021f04
   11c40:	0001f734 	.word	0x0001f734

00011c44 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   11c44:	4801      	ldr	r0, [pc, #4]	; (11c4c <ll_conn_acquire+0x8>)
   11c46:	f00a b984 	b.w	1bf52 <mem_acquire>
   11c4a:	bf00      	nop
   11c4c:	20002814 	.word	0x20002814

00011c50 <ll_conn_release>:
	mem_release(conn, &conn_free);
   11c50:	4901      	ldr	r1, [pc, #4]	; (11c58 <ll_conn_release+0x8>)
   11c52:	f00a b997 	b.w	1bf84 <mem_release>
   11c56:	bf00      	nop
   11c58:	20002814 	.word	0x20002814

00011c5c <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   11c5c:	4902      	ldr	r1, [pc, #8]	; (11c68 <ll_conn_handle_get+0xc>)
   11c5e:	f44f 729c 	mov.w	r2, #312	; 0x138
   11c62:	f00a b9a7 	b.w	1bfb4 <mem_index_get>
   11c66:	bf00      	nop
   11c68:	200015a8 	.word	0x200015a8

00011c6c <tx_lll_flush>:
{
   11c6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	conn = HDR_LLL2ULL(lll);
   11c70:	6804      	ldr	r4, [r0, #0]
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   11c72:	4e30      	ldr	r6, [pc, #192]	; (11d34 <tx_lll_flush+0xc8>)
{
   11c74:	4605      	mov	r5, r0
	handle = ll_conn_handle_get(conn);
   11c76:	4620      	mov	r0, r4
   11c78:	f7ff fff0 	bl	11c5c <ll_conn_handle_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   11c7c:	f105 083c 	add.w	r8, r5, #60	; 0x3c
	lll_conn_flush(handle, lll);
   11c80:	4629      	mov	r1, r5
   11c82:	f00b f91e 	bl	1cec2 <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   11c86:	6c28      	ldr	r0, [r5, #64]	; 0x40
   11c88:	aa01      	add	r2, sp, #4
   11c8a:	4641      	mov	r1, r8
   11c8c:	f00a f9ce 	bl	1c02c <memq_dequeue>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   11c90:	1d37      	adds	r7, r6, #4
	while (link) {
   11c92:	b9f0      	cbnz	r0, 11cd2 <tx_lll_flush+0x66>
	LL_ASSERT(rx->hdr.link);
   11c94:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
	rx = (void *)&conn->llcp_terminate.node_rx;
   11c98:	f104 05d4 	add.w	r5, r4, #212	; 0xd4
	LL_ASSERT(rx->hdr.link);
   11c9c:	b963      	cbnz	r3, 11cb8 <tx_lll_flush+0x4c>
   11c9e:	4a26      	ldr	r2, [pc, #152]	; (11d38 <tx_lll_flush+0xcc>)
   11ca0:	4926      	ldr	r1, [pc, #152]	; (11d3c <tx_lll_flush+0xd0>)
   11ca2:	4827      	ldr	r0, [pc, #156]	; (11d40 <tx_lll_flush+0xd4>)
   11ca4:	f640 0307 	movw	r3, #2055	; 0x807
   11ca8:	f006 fc5e 	bl	18568 <printk>
   11cac:	4040      	eors	r0, r0
   11cae:	f380 8811 	msr	BASEPRI, r0
   11cb2:	f04f 0003 	mov.w	r0, #3
   11cb6:	df02      	svc	2
	rx->hdr.link = NULL;
   11cb8:	2300      	movs	r3, #0
	link = rx->hdr.link;
   11cba:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
	rx->hdr.link = NULL;
   11cbe:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
	ull_rx_put(link, rx);
   11cc2:	4629      	mov	r1, r5
   11cc4:	f7ff f9b0 	bl	11028 <ull_rx_put>
	ull_rx_sched();
   11cc8:	f7ff f9be 	bl	11048 <ull_rx_sched>
}
   11ccc:	b002      	add	sp, #8
   11cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   11cd2:	78f3      	ldrb	r3, [r6, #3]
	if (last == count) {
   11cd4:	f896 e001 	ldrb.w	lr, [r6, #1]
   11cd8:	f896 c002 	ldrb.w	ip, [r6, #2]
   11cdc:	7832      	ldrb	r2, [r6, #0]
	last = last + 1;
   11cde:	1c59      	adds	r1, r3, #1
   11ce0:	b2c9      	uxtb	r1, r1
		last = 0U;
   11ce2:	458e      	cmp	lr, r1
   11ce4:	bf08      	it	eq
   11ce6:	2100      	moveq	r1, #0
	if (last == first) {
   11ce8:	458c      	cmp	ip, r1
   11cea:	d003      	beq.n	11cf4 <tx_lll_flush+0x88>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   11cec:	fb13 f302 	smulbb	r3, r3, r2
		LL_ASSERT(lll_tx);
   11cf0:	18fa      	adds	r2, r7, r3
   11cf2:	d10f      	bne.n	11d14 <tx_lll_flush+0xa8>
   11cf4:	4a10      	ldr	r2, [pc, #64]	; (11d38 <tx_lll_flush+0xcc>)
   11cf6:	4913      	ldr	r1, [pc, #76]	; (11d44 <tx_lll_flush+0xd8>)
   11cf8:	4811      	ldr	r0, [pc, #68]	; (11d40 <tx_lll_flush+0xd4>)
   11cfa:	f240 73f3 	movw	r3, #2035	; 0x7f3
   11cfe:	f006 fc33 	bl	18568 <printk>
   11d02:	4040      	eors	r0, r0
   11d04:	f380 8811 	msr	BASEPRI, r0
   11d08:	f04f 0003 	mov.w	r0, #3
   11d0c:	df02      	svc	2
		lll_tx->handle = 0xFFFF;
   11d0e:	2300      	movs	r3, #0
   11d10:	801b      	strh	r3, [r3, #0]
   11d12:	deff      	udf	#255	; 0xff
   11d14:	f64f 7cff 	movw	ip, #65535	; 0xffff
   11d18:	f827 c003 	strh.w	ip, [r7, r3]
		lll_tx->node = tx;
   11d1c:	9b01      	ldr	r3, [sp, #4]
   11d1e:	6053      	str	r3, [r2, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   11d20:	681a      	ldr	r2, [r3, #0]
   11d22:	6002      	str	r2, [r0, #0]
		tx->next = link;
   11d24:	6018      	str	r0, [r3, #0]
	*last = idx; /* Commit: Update write index */
   11d26:	70f1      	strb	r1, [r6, #3]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   11d28:	6c28      	ldr	r0, [r5, #64]	; 0x40
   11d2a:	aa01      	add	r2, sp, #4
   11d2c:	4641      	mov	r1, r8
   11d2e:	f00a f97d 	bl	1c02c <memq_dequeue>
   11d32:	e7ae      	b.n	11c92 <tx_lll_flush+0x26>
   11d34:	20000814 	.word	0x20000814
   11d38:	00021eb9 	.word	0x00021eb9
   11d3c:	00021f9f 	.word	0x00021f9f
   11d40:	0001f734 	.word	0x0001f734
   11d44:	00021f55 	.word	0x00021f55

00011d48 <ll_conn_get>:
{
   11d48:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   11d4a:	f44f 719c 	mov.w	r1, #312	; 0x138
   11d4e:	4801      	ldr	r0, [pc, #4]	; (11d54 <ll_conn_get+0xc>)
   11d50:	f00a b92d 	b.w	1bfae <mem_get>
   11d54:	200015a8 	.word	0x200015a8

00011d58 <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   11d58:	4801      	ldr	r0, [pc, #4]	; (11d60 <ll_tx_mem_acquire+0x8>)
   11d5a:	f00a b8fa 	b.w	1bf52 <mem_acquire>
   11d5e:	bf00      	nop
   11d60:	20002834 	.word	0x20002834

00011d64 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   11d64:	4901      	ldr	r1, [pc, #4]	; (11d6c <ll_tx_mem_release+0x8>)
   11d66:	f00a b90d 	b.w	1bf84 <mem_release>
   11d6a:	bf00      	nop
   11d6c:	20002834 	.word	0x20002834

00011d70 <ll_tx_mem_enqueue>:
{
   11d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11d72:	4606      	mov	r6, r0
   11d74:	460f      	mov	r7, r1
	conn = ll_connected_get(handle);
   11d76:	f00a fda2 	bl	1c8be <ll_connected_get>
	if (!conn) {
   11d7a:	4604      	mov	r4, r0
   11d7c:	b338      	cbz	r0, 11dce <ll_tx_mem_enqueue+0x5e>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   11d7e:	4a17      	ldr	r2, [pc, #92]	; (11ddc <ll_tx_mem_enqueue+0x6c>)
   11d80:	78d5      	ldrb	r5, [r2, #3]
	if (last == count) {
   11d82:	f892 c001 	ldrb.w	ip, [r2, #1]
   11d86:	7891      	ldrb	r1, [r2, #2]
   11d88:	7810      	ldrb	r0, [r2, #0]
	last = last + 1;
   11d8a:	1c6b      	adds	r3, r5, #1
   11d8c:	b2db      	uxtb	r3, r3
		last = 0U;
   11d8e:	459c      	cmp	ip, r3
   11d90:	bf08      	it	eq
   11d92:	2300      	moveq	r3, #0
	if (last == first) {
   11d94:	4299      	cmp	r1, r3
   11d96:	d01d      	beq.n	11dd4 <ll_tx_mem_enqueue+0x64>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   11d98:	1d11      	adds	r1, r2, #4
   11d9a:	fb15 f500 	smulbb	r5, r5, r0
	if (!lll_tx) {
   11d9e:	1948      	adds	r0, r1, r5
   11da0:	d018      	beq.n	11dd4 <ll_tx_mem_enqueue+0x64>
	lll_tx->handle = handle;
   11da2:	534e      	strh	r6, [r1, r5]
	lll_tx->node = tx;
   11da4:	6047      	str	r7, [r0, #4]
	*last = idx; /* Commit: Update write index */
   11da6:	70d3      	strb	r3, [r2, #3]
   11da8:	7823      	ldrb	r3, [r4, #0]
	if (ull_ref_get(&conn->ull)) {
   11daa:	b133      	cbz	r3, 11dba <ll_tx_mem_enqueue+0x4a>
		mfy.param = conn;
   11dac:	4b0c      	ldr	r3, [pc, #48]	; (11de0 <ll_tx_mem_enqueue+0x70>)
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   11dae:	2200      	movs	r2, #0
   11db0:	2101      	movs	r1, #1
   11db2:	2003      	movs	r0, #3
		mfy.param = conn;
   11db4:	609c      	str	r4, [r3, #8]
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   11db6:	f7fc fc11 	bl	e5dc <mayfly_enqueue>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   11dba:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   11dbe:	2b00      	cmp	r3, #0
   11dc0:	da03      	bge.n	11dca <ll_tx_mem_enqueue+0x5a>
		ull_slave_latency_cancel(conn, handle);
   11dc2:	4631      	mov	r1, r6
   11dc4:	4620      	mov	r0, r4
   11dc6:	f001 f8a1 	bl	12f0c <ull_slave_latency_cancel>
	return 0;
   11dca:	2000      	movs	r0, #0
   11dcc:	e001      	b.n	11dd2 <ll_tx_mem_enqueue+0x62>
		return -EINVAL;
   11dce:	f06f 0015 	mvn.w	r0, #21
}
   11dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   11dd4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   11dd8:	e7fb      	b.n	11dd2 <ll_tx_mem_enqueue+0x62>
   11dda:	bf00      	nop
   11ddc:	20000860 	.word	0x20000860
   11de0:	2000088c 	.word	0x2000088c

00011de4 <ll_terminate_ind_send>:
{
   11de4:	b538      	push	{r3, r4, r5, lr}
   11de6:	4605      	mov	r5, r0
   11de8:	460c      	mov	r4, r1
	conn = ll_connected_get(handle);
   11dea:	f00a fd68 	bl	1c8be <ll_connected_get>
	if (!conn) {
   11dee:	b310      	cbz	r0, 11e36 <ll_terminate_ind_send+0x52>
	if (conn->llcp_terminate.req != conn->llcp_terminate.ack) {
   11df0:	f890 30d0 	ldrb.w	r3, [r0, #208]	; 0xd0
   11df4:	f890 20d1 	ldrb.w	r2, [r0, #209]	; 0xd1
   11df8:	429a      	cmp	r2, r3
   11dfa:	d11e      	bne.n	11e3a <ll_terminate_ind_send+0x56>
	switch (reason) {
   11dfc:	2c1a      	cmp	r4, #26
   11dfe:	d808      	bhi.n	11e12 <ll_terminate_ind_send+0x2e>
   11e00:	2c04      	cmp	r4, #4
   11e02:	d904      	bls.n	11e0e <ll_terminate_ind_send+0x2a>
   11e04:	490e      	ldr	r1, [pc, #56]	; (11e40 <ll_terminate_ind_send+0x5c>)
   11e06:	2201      	movs	r2, #1
   11e08:	40a2      	lsls	r2, r4
   11e0a:	420a      	tst	r2, r1
   11e0c:	d105      	bne.n	11e1a <ll_terminate_ind_send+0x36>
   11e0e:	2012      	movs	r0, #18
   11e10:	e012      	b.n	11e38 <ll_terminate_ind_send+0x54>
   11e12:	2c29      	cmp	r4, #41	; 0x29
   11e14:	d001      	beq.n	11e1a <ll_terminate_ind_send+0x36>
   11e16:	2c3b      	cmp	r4, #59	; 0x3b
   11e18:	d1f9      	bne.n	11e0e <ll_terminate_ind_send+0x2a>
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
   11e1a:	3301      	adds	r3, #1
   11e1c:	f880 30d0 	strb.w	r3, [r0, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   11e20:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	conn->llcp_terminate.reason_own = reason;
   11e24:	f880 40d2 	strb.w	r4, [r0, #210]	; 0xd2
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   11e28:	2b00      	cmp	r3, #0
   11e2a:	da02      	bge.n	11e32 <ll_terminate_ind_send+0x4e>
		ull_slave_latency_cancel(conn, handle);
   11e2c:	4629      	mov	r1, r5
   11e2e:	f001 f86d 	bl	12f0c <ull_slave_latency_cancel>
	return 0;
   11e32:	2000      	movs	r0, #0
   11e34:	e000      	b.n	11e38 <ll_terminate_ind_send+0x54>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   11e36:	2002      	movs	r0, #2
}
   11e38:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   11e3a:	200c      	movs	r0, #12
   11e3c:	e7fc      	b.n	11e38 <ll_terminate_ind_send+0x54>
   11e3e:	bf00      	nop
   11e40:	04380020 	.word	0x04380020

00011e44 <ull_conn_reset>:
{
   11e44:	b510      	push	{r4, lr}
	conn = ll_conn_get(handle);
   11e46:	2000      	movs	r0, #0
   11e48:	f7ff ff7e 	bl	11d48 <ll_conn_get>
   11e4c:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
   11e4e:	f100 021c 	add.w	r2, r0, #28
   11e52:	4601      	mov	r1, r0
   11e54:	2005      	movs	r0, #5
   11e56:	f7ff f885 	bl	10f64 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   11e5a:	b170      	cbz	r0, 11e7a <ull_conn_reset+0x36>
   11e5c:	3078      	adds	r0, #120	; 0x78
   11e5e:	d00c      	beq.n	11e7a <ull_conn_reset+0x36>
   11e60:	4a0c      	ldr	r2, [pc, #48]	; (11e94 <ull_conn_reset+0x50>)
   11e62:	490d      	ldr	r1, [pc, #52]	; (11e98 <ull_conn_reset+0x54>)
   11e64:	480d      	ldr	r0, [pc, #52]	; (11e9c <ull_conn_reset+0x58>)
   11e66:	f240 735d 	movw	r3, #1885	; 0x75d
   11e6a:	f006 fb7d 	bl	18568 <printk>
   11e6e:	4040      	eors	r0, r0
   11e70:	f380 8811 	msr	BASEPRI, r0
   11e74:	f04f 0003 	mov.w	r0, #3
   11e78:	df02      	svc	2
	MFIFO_INIT(conn_tx);
   11e7a:	4a09      	ldr	r2, [pc, #36]	; (11ea0 <ull_conn_reset+0x5c>)
	conn->lll.link_tx_free = NULL;
   11e7c:	2300      	movs	r3, #0
	MFIFO_INIT(conn_tx);
   11e7e:	8053      	strh	r3, [r2, #2]
	MFIFO_INIT(conn_ack);
   11e80:	4a08      	ldr	r2, [pc, #32]	; (11ea4 <ull_conn_reset+0x60>)
	conn->lll.link_tx_free = NULL;
   11e82:	66a3      	str	r3, [r4, #104]	; 0x68
	MFIFO_INIT(conn_ack);
   11e84:	8053      	strh	r3, [r2, #2]
	conn_upd_curr = NULL;
   11e86:	4a08      	ldr	r2, [pc, #32]	; (11ea8 <ull_conn_reset+0x64>)
}
   11e88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	conn_upd_curr = NULL;
   11e8c:	6013      	str	r3, [r2, #0]
	err = init_reset();
   11e8e:	f7ff bd9f 	b.w	119d0 <init_reset>
   11e92:	bf00      	nop
   11e94:	00021eb9 	.word	0x00021eb9
   11e98:	00021e90 	.word	0x00021e90
   11e9c:	0001f734 	.word	0x0001f734
   11ea0:	20000860 	.word	0x20000860
   11ea4:	20000814 	.word	0x20000814
   11ea8:	20002818 	.word	0x20002818

00011eac <ull_conn_setup>:
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   11eac:	688b      	ldr	r3, [r1, #8]
   11eae:	685b      	ldr	r3, [r3, #4]
{
   11eb0:	b510      	push	{r4, lr}
	switch (lll->role) {
   11eb2:	7f5c      	ldrb	r4, [r3, #29]
   11eb4:	09e4      	lsrs	r4, r4, #7
{
   11eb6:	460a      	mov	r2, r1
	switch (lll->role) {
   11eb8:	d004      	beq.n	11ec4 <ull_conn_setup+0x18>
}
   11eba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ull_slave_setup(link, rx, ftr, lll);
   11ebe:	3208      	adds	r2, #8
   11ec0:	f7ef ba1a 	b.w	12f8 <ull_slave_setup>
		LL_ASSERT(0);
   11ec4:	4a06      	ldr	r2, [pc, #24]	; (11ee0 <ull_conn_setup+0x34>)
   11ec6:	4907      	ldr	r1, [pc, #28]	; (11ee4 <ull_conn_setup+0x38>)
   11ec8:	4807      	ldr	r0, [pc, #28]	; (11ee8 <ull_conn_setup+0x3c>)
   11eca:	f240 334e 	movw	r3, #846	; 0x34e
   11ece:	f006 fb4b 	bl	18568 <printk>
   11ed2:	4040      	eors	r0, r0
   11ed4:	f380 8811 	msr	BASEPRI, r0
   11ed8:	f04f 0003 	mov.w	r0, #3
   11edc:	df02      	svc	2
}
   11ede:	bd10      	pop	{r4, pc}
   11ee0:	00021eb9 	.word	0x00021eb9
   11ee4:	00020b9a 	.word	0x00020b9a
   11ee8:	0001f734 	.word	0x0001f734

00011eec <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
   11eec:	680b      	ldr	r3, [r1, #0]
{
   11eee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ef2:	4607      	mov	r7, r0
	conn = ll_connected_get((*rx)->hdr.handle);
   11ef4:	88d8      	ldrh	r0, [r3, #6]
{
   11ef6:	460e      	mov	r6, r1
	conn = ll_connected_get((*rx)->hdr.handle);
   11ef8:	f00a fce1 	bl	1c8be <ll_connected_get>
	if (!conn) {
   11efc:	6835      	ldr	r5, [r6, #0]
   11efe:	4604      	mov	r4, r0
   11f00:	b910      	cbnz	r0, 11f08 <ull_conn_rx+0x1c>
	pdu->llctrl.unknown_rsp.type = type;

	ctrl_tx_enqueue(conn, tx);

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   11f02:	2301      	movs	r3, #1
   11f04:	712b      	strb	r3, [r5, #4]

	return 0;
   11f06:	e007      	b.n	11f18 <ull_conn_rx+0x2c>
	switch (pdu_rx->ll_id) {
   11f08:	7f28      	ldrb	r0, [r5, #28]
   11f0a:	f000 0003 	and.w	r0, r0, #3
   11f0e:	2803      	cmp	r0, #3
   11f10:	d004      	beq.n	11f1c <ull_conn_rx+0x30>
   11f12:	2800      	cmp	r0, #0
   11f14:	f000 8411 	beq.w	1273a <ull_conn_rx+0x84e>
   11f18:	2000      	movs	r0, #0
   11f1a:	e1c3      	b.n	122a4 <ull_conn_rx+0x3b8>
			  struct pdu_data *pdu_rx, struct ll_conn *conn)
{
	int nack = 0;
	uint8_t opcode;

	opcode = pdu_rx->llctrl.opcode;
   11f1c:	f895 801f 	ldrb.w	r8, [r5, #31]

		return 0;
	}
#endif /* CONFIG_BT_CTLR_LE_ENC */

	switch (opcode) {
   11f20:	f1b8 0f11 	cmp.w	r8, #17
   11f24:	f200 83f1 	bhi.w	1270a <ull_conn_rx+0x81e>
   11f28:	e8df f018 	tbh	[pc, r8, lsl #1]
   11f2c:	00860012 	.word	0x00860012
   11f30:	03ef00b6 	.word	0x03ef00b6
   11f34:	03ef03ef 	.word	0x03ef03ef
   11f38:	036303ef 	.word	0x036303ef
   11f3c:	012600bf 	.word	0x012600bf
   11f40:	03ef03ef 	.word	0x03ef03ef
   11f44:	03ef015c 	.word	0x03ef015c
   11f48:	01ae03ef 	.word	0x01ae03ef
   11f4c:	030b03ef 	.word	0x030b03ef
#if defined(CONFIG_BT_PERIPHERAL)
	case PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND:
	{
		uint8_t err;

		if (!conn->lll.role ||
   11f50:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   11f54:	2b00      	cmp	r3, #0
   11f56:	f280 83d8 	bge.w	1270a <ull_conn_rx+0x81e>
   11f5a:	7f6b      	ldrb	r3, [r5, #29]
   11f5c:	2b0c      	cmp	r3, #12
   11f5e:	f040 83d4 	bne.w	1270a <ull_conn_rx+0x81e>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   11f62:	f8b5 2029 	ldrh.w	r2, [r5, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   11f66:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   11f68:	1ad3      	subs	r3, r2, r3
   11f6a:	041b      	lsls	r3, r3, #16
   11f6c:	d503      	bpl.n	11f76 <ull_conn_rx+0x8a>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   11f6e:	2301      	movs	r3, #1
   11f70:	712b      	strb	r3, [r5, #4]
		err = BT_HCI_ERR_INSTANT_PASSED;
   11f72:	2328      	movs	r3, #40	; 0x28
   11f74:	e00b      	b.n	11f8e <ull_conn_rx+0xa2>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   11f76:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   11f7a:	f894 1089 	ldrb.w	r1, [r4, #137]	; 0x89
   11f7e:	1a5b      	subs	r3, r3, r1
   11f80:	f003 0303 	and.w	r3, r3, #3
   11f84:	2b02      	cmp	r3, #2
   11f86:	d105      	bne.n	11f94 <ull_conn_rx+0xa8>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   11f88:	2301      	movs	r3, #1
   11f8a:	712b      	strb	r3, [r5, #4]
		err = BT_HCI_ERR_DIFF_TRANS_COLLISION;
   11f8c:	232a      	movs	r3, #42	; 0x2a
			goto ull_conn_rx_unknown_rsp_send;
		}

		err = chan_map_upd_recv(conn, *rx, pdu_rx);
		if (err) {
			conn->llcp_terminate.reason_final = err;
   11f8e:	f884 30d3 	strb.w	r3, [r4, #211]	; 0xd3
   11f92:	e7c1      	b.n	11f18 <ull_conn_rx+0x2c>
	if (!conn_upd_curr) {
   11f94:	4bd5      	ldr	r3, [pc, #852]	; (122ec <ull_conn_rx+0x400>)
   11f96:	6819      	ldr	r1, [r3, #0]
   11f98:	b901      	cbnz	r1, 11f9c <ull_conn_rx+0xb0>
		conn_upd_curr = conn;
   11f9a:	601c      	str	r4, [r3, #0]
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   11f9c:	f895 3020 	ldrb.w	r3, [r5, #32]
   11fa0:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) *
   11fa4:	f8b5 1021 	ldrh.w	r1, [r5, #33]	; 0x21
   11fa8:	f240 43e2 	movw	r3, #1250	; 0x4e2
   11fac:	434b      	muls	r3, r1
	conn->llcp_cu.win_offset_us =
   11fae:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   11fb2:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
   11fb6:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   11fba:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.interval =
   11fbe:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
   11fc2:	f895 1026 	ldrb.w	r1, [r5, #38]	; 0x26
   11fc6:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   11fca:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.latency =
   11fce:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   11fd2:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
   11fd6:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
	conn->llcp.conn_upd.instant = instant;
   11fda:	f8a4 208c 	strh.w	r2, [r4, #140]	; 0x8c
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   11fde:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.timeout =
   11fe2:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   11fe6:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
   11fea:	f023 030f 	bic.w	r3, r3, #15
   11fee:	f043 0308 	orr.w	r3, r3, #8
   11ff2:	f884 309e 	strb.w	r3, [r4, #158]	; 0x9e
	conn->llcp_cu.ack--;
   11ff6:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
   11ffa:	3b01      	subs	r3, #1
   11ffc:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
	link->mem = conn->llcp_rx;
   12000:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   12004:	607b      	str	r3, [r7, #4]
	(*rx)->hdr.link = link;
   12006:	6833      	ldr	r3, [r6, #0]
   12008:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   1200a:	6833      	ldr	r3, [r6, #0]
   1200c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*rx = NULL;
   12010:	2300      	movs	r3, #0
   12012:	6033      	str	r3, [r6, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   12014:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
   12018:	f894 30f5 	ldrb.w	r3, [r4, #245]	; 0xf5
   1201c:	4293      	cmp	r3, r2
   1201e:	d007      	beq.n	12030 <ull_conn_rx+0x144>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   12020:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   12024:	f003 0307 	and.w	r3, r3, #7
   12028:	2b04      	cmp	r3, #4
   1202a:	d101      	bne.n	12030 <ull_conn_rx+0x144>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1202c:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
				break;
			}
		}

		/* Procedure complete */
		conn->procedure_expire = 0U;
   12030:	2000      	movs	r0, #0
   12032:	f8a4 0078 	strh.w	r0, [r4, #120]	; 0x78
		break;
   12036:	e135      	b.n	122a4 <ull_conn_rx+0x3b8>
		if (!conn->lll.role ||
   12038:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1203c:	2b00      	cmp	r3, #0
   1203e:	f280 8364 	bge.w	1270a <ull_conn_rx+0x81e>
   12042:	7f6b      	ldrb	r3, [r5, #29]
   12044:	2b08      	cmp	r3, #8
   12046:	f040 8360 	bne.w	1270a <ull_conn_rx+0x81e>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   1204a:	f8b5 6025 	ldrh.w	r6, [r5, #37]	; 0x25
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   1204e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   12050:	1af3      	subs	r3, r6, r3
   12052:	041f      	lsls	r7, r3, #16
   12054:	d48b      	bmi.n	11f6e <ull_conn_rx+0x82>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   12056:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   1205a:	f894 2089 	ldrb.w	r2, [r4, #137]	; 0x89
   1205e:	1a9b      	subs	r3, r3, r2
   12060:	f003 0303 	and.w	r3, r3, #3
   12064:	2b02      	cmp	r3, #2
   12066:	d08f      	beq.n	11f88 <ull_conn_rx+0x9c>
	memcpy(&conn->llcp.chan_map.chm[0], &pdu->llctrl.chan_map_ind.chm[0],
   12068:	2205      	movs	r2, #5
   1206a:	f105 0120 	add.w	r1, r5, #32
   1206e:	f104 008d 	add.w	r0, r4, #141	; 0x8d
   12072:	f007 fd97 	bl	19ba4 <memcpy>
	conn->llcp.chan_map.initiate = 0U;
   12076:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
	conn->llcp.chan_map.instant = instant;
   1207a:	f8a4 6092 	strh.w	r6, [r4, #146]	; 0x92
	conn->llcp.chan_map.initiate = 0U;
   1207e:	f36f 0300 	bfc	r3, #0, #1
   12082:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
	conn->llcp_type = LLCP_CHAN_MAP;
   12086:	2302      	movs	r3, #2
   12088:	f884 308a 	strb.w	r3, [r4, #138]	; 0x8a
	conn->llcp_ack -= 2U;
   1208c:	f894 3089 	ldrb.w	r3, [r4, #137]	; 0x89
   12090:	3b02      	subs	r3, #2
   12092:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   12096:	e734      	b.n	11f02 <ull_conn_rx+0x16>
		if (PDU_DATA_LLCTRL_LEN(terminate_ind) != pdu_rx->len) {
   12098:	7f6b      	ldrb	r3, [r5, #29]
   1209a:	2b02      	cmp	r3, #2
   1209c:	f040 8335 	bne.w	1270a <ull_conn_rx+0x81e>
	conn->llcp_terminate.reason_final =
   120a0:	f895 3020 	ldrb.w	r3, [r5, #32]
   120a4:	f884 30d3 	strb.w	r3, [r4, #211]	; 0xd3
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   120a8:	e72b      	b.n	11f02 <ull_conn_rx+0x16>
		if (!conn->lll.role ||
   120aa:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   120ae:	2b00      	cmp	r3, #0
   120b0:	f280 832b 	bge.w	1270a <ull_conn_rx+0x81e>
   120b4:	f895 901d 	ldrb.w	r9, [r5, #29]
   120b8:	f1b9 0f09 	cmp.w	r9, #9
   120bc:	f040 8325 	bne.w	1270a <ull_conn_rx+0x81e>
	tx = ctrl_tx_rsp_mem_acquire(conn, rx, &err);
   120c0:	aa01      	add	r2, sp, #4
   120c2:	1d29      	adds	r1, r5, #4
   120c4:	4620      	mov	r0, r4
   120c6:	f7ff fca9 	bl	11a1c <ctrl_tx_rsp_mem_acquire.isra.0>
	if (!tx) {
   120ca:	4607      	mov	r7, r0
   120cc:	b908      	cbnz	r0, 120d2 <ull_conn_rx+0x1e6>
		return err;
   120ce:	9801      	ldr	r0, [sp, #4]
   120d0:	e0e8      	b.n	122a4 <ull_conn_rx+0x3b8>
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   120d2:	f105 0620 	add.w	r6, r5, #32
	feat = sys_get_le64(features) | ~LL_FEAT_BIT_MASK_VALID;
   120d6:	4630      	mov	r0, r6
   120d8:	f00a fba9 	bl	1c82e <sys_get_le64>
	feat &= LL_FEAT_BIT_MASK;
   120dc:	f8df 8210 	ldr.w	r8, [pc, #528]	; 122f0 <ull_conn_rx+0x404>
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   120e0:	e9d4 232e 	ldrd	r2, r3, [r4, #184]	; 0xb8
	feat &= LL_FEAT_BIT_MASK;
   120e4:	ea40 0008 	orr.w	r0, r0, r8
   120e8:	f001 010f 	and.w	r1, r1, #15
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   120ec:	4002      	ands	r2, r0
   120ee:	400b      	ands	r3, r1
   120f0:	e9c4 232e 	strd	r2, r3, [r4, #184]	; 0xb8
	feat = sys_get_le64(features) | ~LL_FEAT_BIT_MASK_VALID;
   120f4:	4630      	mov	r0, r6
   120f6:	f00a fb9a 	bl	1c82e <sys_get_le64>
   120fa:	4606      	mov	r6, r0
   120fc:	468a      	mov	sl, r1
		feat_land_octet0(feat_get(&req->features[0]), ll_feat_get());
   120fe:	f00a fa6b 	bl	1c5d8 <ll_feat_get>
	feat &= LL_FEAT_BIT_MASK;
   12102:	ea46 0808 	orr.w	r8, r6, r8
	feat_result = feat_to_keep & feat_octet0;
   12106:	ea08 0800 	and.w	r8, r8, r0
   1210a:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
	feat_result &= 0xFF;
   1210e:	f008 08ff 	and.w	r8, r8, #255	; 0xff
   12112:	ea43 0308 	orr.w	r3, r3, r8
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   12116:	f043 6307 	orr.w	r3, r3, #141557760	; 0x8700000
	feat &= LL_FEAT_BIT_MASK;
   1211a:	f00a 010f 	and.w	r1, sl, #15
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1211e:	f443 2303 	orr.w	r3, r3, #536576	; 0x83000
	conn->llcp_feature.features_peer =
   12122:	e9c4 3130 	strd	r3, r1, [r4, #192]	; 0xc0
	conn->common.fex_valid = 1U;
   12126:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   1212a:	f043 0301 	orr.w	r3, r3, #1
   1212e:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   12132:	793b      	ldrb	r3, [r7, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   12134:	f887 9005 	strb.w	r9, [r7, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   12138:	f043 0303 	orr.w	r3, r3, #3
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   1213c:	f107 0608 	add.w	r6, r7, #8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   12140:	713b      	strb	r3, [r7, #4]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   12142:	2208      	movs	r2, #8
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   12144:	f887 9007 	strb.w	r9, [r7, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   12148:	2100      	movs	r1, #0
   1214a:	4630      	mov	r0, r6
   1214c:	f007 fd55 	bl	19bfa <memset>
	feat = feat_land_octet0(ll_feat_get(),
   12150:	f00a fa42 	bl	1c5d8 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   12154:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   12158:	4003      	ands	r3, r0
	feat_result &= 0xFF;
   1215a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1215e:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
	sys_put_le64(feat, pdu_tx->llctrl.feature_rsp.features);
   12162:	4318      	orrs	r0, r3
   12164:	4632      	mov	r2, r6
   12166:	f001 010f 	and.w	r1, r1, #15
   1216a:	f00a fb4f 	bl	1c80c <sys_put_le64>
	ctrl_tx_sec_enqueue(conn, tx);
   1216e:	4639      	mov	r1, r7
   12170:	4620      	mov	r0, r4
   12172:	f00a fb60 	bl	1c836 <ctrl_tx_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   12176:	e6c4      	b.n	11f02 <ull_conn_rx+0x16>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_SLAVE_FEAT_REQ) &&
   12178:	7f6b      	ldrb	r3, [r5, #29]
   1217a:	2b09      	cmp	r3, #9
   1217c:	f040 82c5 	bne.w	1270a <ull_conn_rx+0x81e>
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   12180:	3520      	adds	r5, #32
	feat = sys_get_le64(features) | ~LL_FEAT_BIT_MASK_VALID;
   12182:	4628      	mov	r0, r5
   12184:	f00a fb53 	bl	1c82e <sys_get_le64>
	feat &= LL_FEAT_BIT_MASK;
   12188:	4f59      	ldr	r7, [pc, #356]	; (122f0 <ull_conn_rx+0x404>)
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   1218a:	e9d4 232e 	ldrd	r2, r3, [r4, #184]	; 0xb8
	feat &= LL_FEAT_BIT_MASK;
   1218e:	4338      	orrs	r0, r7
   12190:	f001 010f 	and.w	r1, r1, #15
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   12194:	4002      	ands	r2, r0
   12196:	400b      	ands	r3, r1
   12198:	e9c4 232e 	strd	r2, r3, [r4, #184]	; 0xb8
	feat = sys_get_le64(features) | ~LL_FEAT_BIT_MASK_VALID;
   1219c:	4628      	mov	r0, r5
   1219e:	f00a fb46 	bl	1c82e <sys_get_le64>
   121a2:	4605      	mov	r5, r0
   121a4:	4688      	mov	r8, r1
		feat_land_octet0(feat_get(&rsp->features[0]), ll_feat_get());
   121a6:	f00a fa17 	bl	1c5d8 <ll_feat_get>
	feat &= LL_FEAT_BIT_MASK;
   121aa:	432f      	orrs	r7, r5
	feat_result = feat_to_keep & feat_octet0;
   121ac:	4007      	ands	r7, r0
	feat_result &= 0xFF;
   121ae:	f007 03ff 	and.w	r3, r7, #255	; 0xff
   121b2:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
   121b6:	432b      	orrs	r3, r5
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   121b8:	f043 6307 	orr.w	r3, r3, #141557760	; 0x8700000
   121bc:	f443 2303 	orr.w	r3, r3, #536576	; 0x83000
	feat &= LL_FEAT_BIT_MASK;
   121c0:	f008 010f 	and.w	r1, r8, #15
	conn->llcp_feature.features_peer =
   121c4:	e9c4 3130 	strd	r3, r1, [r4, #192]	; 0xc0
	conn->common.fex_valid = 1U;
   121c8:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   121cc:	f043 0301 	orr.w	r3, r3, #1
	feat &= LL_FEAT_BIT_MASK;
   121d0:	2600      	movs	r6, #0
	conn->common.fex_valid = 1U;
   121d2:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
	conn->llcp_feature.ack = conn->llcp_feature.req;
   121d6:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
   121da:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
	conn->procedure_expire = 0U;
   121de:	f8a4 6078 	strh.w	r6, [r4, #120]	; 0x78
   121e2:	e699      	b.n	11f18 <ull_conn_rx+0x2c>
		if (PDU_DATA_LLCTRL_LEN(version_ind) != pdu_rx->len) {
   121e4:	7f6e      	ldrb	r6, [r5, #29]
   121e6:	2e06      	cmp	r6, #6
   121e8:	f040 828f 	bne.w	1270a <ull_conn_rx+0x81e>
	if (!conn->llcp_version.tx) {
   121ec:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
   121f0:	07d8      	lsls	r0, r3, #31
   121f2:	d43e      	bmi.n	12272 <ull_conn_rx+0x386>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   121f4:	483f      	ldr	r0, [pc, #252]	; (122f4 <ull_conn_rx+0x408>)
   121f6:	f009 feac 	bl	1bf52 <mem_acquire>
		if (!tx) {
   121fa:	4601      	mov	r1, r0
   121fc:	2800      	cmp	r0, #0
   121fe:	f000 829f 	beq.w	12740 <ull_conn_rx+0x854>
		conn->llcp_version.tx = 1U;
   12202:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
   12206:	f043 0301 	orr.w	r3, r3, #1
   1220a:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1220e:	7903      	ldrb	r3, [r0, #4]
		pdu_tx->len =
   12210:	7146      	strb	r6, [r0, #5]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   12212:	f043 0303 	orr.w	r3, r3, #3
   12216:	7103      	strb	r3, [r0, #4]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   12218:	230c      	movs	r3, #12
   1221a:	71c3      	strb	r3, [r0, #7]
		v->version_number = LL_VERSION_NUMBER;
   1221c:	230b      	movs	r3, #11
   1221e:	7203      	strb	r3, [r0, #8]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   12220:	f06f 030e 	mvn.w	r3, #14
   12224:	7243      	strb	r3, [r0, #9]
   12226:	2305      	movs	r3, #5
   12228:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =
   1222a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1222e:	72c3      	strb	r3, [r0, #11]
   12230:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, tx);
   12232:	4620      	mov	r0, r4
   12234:	f00a faff 	bl	1c836 <ctrl_tx_enqueue>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   12238:	2301      	movs	r3, #1
   1223a:	712b      	strb	r3, [r5, #4]
	conn->llcp_version.version_number = v->version_number;
   1223c:	f895 3020 	ldrb.w	r3, [r5, #32]
   12240:	f884 30cb 	strb.w	r3, [r4, #203]	; 0xcb
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   12244:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
   12248:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   1224c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   12250:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		sys_le16_to_cpu(v->sub_version_number);
   12254:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   12258:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
   1225c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp_version.sub_version_number =
   12260:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
	conn->llcp_version.rx = 1U;
   12264:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
   12268:	f043 0302 	orr.w	r3, r3, #2
   1226c:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
	return 0;
   12270:	e652      	b.n	11f18 <ull_conn_rx+0x2c>
	} else if (!conn->llcp_version.rx) {
   12272:	f013 0302 	ands.w	r3, r3, #2
   12276:	f47f ae44 	bne.w	11f02 <ull_conn_rx+0x16>
		conn->llcp_version.ack = conn->llcp_version.req;
   1227a:	f894 20c8 	ldrb.w	r2, [r4, #200]	; 0xc8
   1227e:	f884 20c9 	strb.w	r2, [r4, #201]	; 0xc9
		conn->procedure_expire = 0U;
   12282:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
   12286:	e7d9      	b.n	1223c <ull_conn_rx+0x350>
		if (PDU_DATA_LLCTRL_LEN(conn_param_req) != pdu_rx->len) {
   12288:	7f6b      	ldrb	r3, [r5, #29]
   1228a:	2b18      	cmp	r3, #24
   1228c:	f040 823d 	bne.w	1270a <ull_conn_rx+0x81e>
		if (conn_upd_curr && (conn_upd_curr != conn)) {
   12290:	4b16      	ldr	r3, [pc, #88]	; (122ec <ull_conn_rx+0x400>)
   12292:	6818      	ldr	r0, [r3, #0]
   12294:	b148      	cbz	r0, 122aa <ull_conn_rx+0x3be>
   12296:	4284      	cmp	r4, r0
   12298:	d007      	beq.n	122aa <ull_conn_rx+0x3be>
			nack = reject_ext_ind_send(conn, *rx,
   1229a:	2220      	movs	r2, #32
				nack = reject_ext_ind_send(conn, *rx,
   1229c:	4629      	mov	r1, r5
   1229e:	4620      	mov	r0, r4
   122a0:	f00a faee 	bl	1c880 <reject_ext_ind_send.constprop.0>
}
   122a4:	b003      	add	sp, #12
   122a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!conn->lll.role) {
   122aa:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
   122ae:	f894 20f5 	ldrb.w	r2, [r4, #245]	; 0xf5
   122b2:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   122b6:	2900      	cmp	r1, #0
   122b8:	f2c0 80b3 	blt.w	12422 <ull_conn_rx+0x536>
			if ((conn->llcp_conn_param.req !=
   122bc:	429a      	cmp	r2, r3
   122be:	d009      	beq.n	122d4 <ull_conn_rx+0x3e8>
			    ((conn->llcp_conn_param.state ==
   122c0:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
					conn->llcp_conn_param.ack) &&
   122c4:	f013 0307 	ands.w	r3, r3, #7
   122c8:	d002      	beq.n	122d0 <ull_conn_rx+0x3e4>
			      LLCP_CPR_STATE_REQ) ||
   122ca:	3b04      	subs	r3, #4
   122cc:	2b01      	cmp	r3, #1
   122ce:	d801      	bhi.n	122d4 <ull_conn_rx+0x3e8>
				nack = reject_ext_ind_send(conn, *rx,
   122d0:	2223      	movs	r2, #35	; 0x23
   122d2:	e7e3      	b.n	1229c <ull_conn_rx+0x3b0>
			} else if (((conn->llcp_req - conn->llcp_ack) &
   122d4:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   122d8:	f894 1089 	ldrb.w	r1, [r4, #137]	; 0x89
   122dc:	1a5b      	subs	r3, r3, r1
   122de:	f003 0303 	and.w	r3, r3, #3
   122e2:	2b02      	cmp	r3, #2
   122e4:	d108      	bne.n	122f8 <ull_conn_rx+0x40c>
				nack = reject_ext_ind_send(conn, *rx,
   122e6:	222a      	movs	r2, #42	; 0x2a
   122e8:	e7d8      	b.n	1229c <ull_conn_rx+0x3b0>
   122ea:	bf00      	nop
   122ec:	20002818 	.word	0x20002818
   122f0:	087830d0 	.word	0x087830d0
   122f4:	200028c8 	.word	0x200028c8
				uint16_t interval_min =
   122f8:	f8b5 a020 	ldrh.w	sl, [r5, #32]
   122fc:	fa1f f38a 	uxth.w	r3, sl
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   12300:	2b05      	cmp	r3, #5
   12302:	d924      	bls.n	1234e <ull_conn_rx+0x462>
				uint16_t interval_max =
   12304:	f8b5 9022 	ldrh.w	r9, [r5, #34]	; 0x22
   12308:	fa1f f189 	uxth.w	r1, r9
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1230c:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   12310:	d81d      	bhi.n	1234e <ull_conn_rx+0x462>
				    (interval_max > 3200) ||
   12312:	428b      	cmp	r3, r1
   12314:	d81b      	bhi.n	1234e <ull_conn_rx+0x462>
				uint16_t latency =
   12316:	f8b5 8024 	ldrh.w	r8, [r5, #36]	; 0x24
   1231a:	fa1f f788 	uxth.w	r7, r8
				    (interval_min > interval_max) ||
   1231e:	f5b7 7ffa 	cmp.w	r7, #500	; 0x1f4
   12322:	d214      	bcs.n	1234e <ull_conn_rx+0x462>
				uint16_t timeout =
   12324:	f8b5 e026 	ldrh.w	lr, [r5, #38]	; 0x26
   12328:	fa1f f38e 	uxth.w	r3, lr
				    (latency > 499) ||
   1232c:	f1a3 0c0a 	sub.w	ip, r3, #10
   12330:	fa1f fc8c 	uxth.w	ip, ip
   12334:	f640 4b76 	movw	fp, #3190	; 0xc76
   12338:	45dc      	cmp	ip, fp
   1233a:	d808      	bhi.n	1234e <ull_conn_rx+0x462>
				     ((latency + 1) * interval_max)) ||
   1233c:	fb07 1c01 	mla	ip, r7, r1, r1
				    (timeout > 3200) ||
   12340:	ebbc 0f83 	cmp.w	ip, r3, lsl #2
   12344:	d203      	bcs.n	1234e <ull_conn_rx+0x462>
					cpr->preferred_periodicity;
   12346:	f895 c028 	ldrb.w	ip, [r5, #40]	; 0x28
				     ((latency + 1) * interval_max)) ||
   1234a:	4561      	cmp	r1, ip
   1234c:	d201      	bcs.n	12352 <ull_conn_rx+0x466>
				nack = reject_ext_ind_send(conn, *rx,
   1234e:	221e      	movs	r2, #30
   12350:	e7a4      	b.n	1229c <ull_conn_rx+0x3b0>
				conn->llcp_conn_param.interval_min =
   12352:	f8a4 a0f8 	strh.w	sl, [r4, #248]	; 0xf8
				conn->llcp_conn_param.interval_max =
   12356:	f8a4 90fa 	strh.w	r9, [r4, #250]	; 0xfa
				conn->llcp_conn_param.latency =	latency;
   1235a:	f8a4 80fc 	strh.w	r8, [r4, #252]	; 0xfc
				conn->llcp_conn_param.timeout =	timeout;
   1235e:	f8a4 e0fe 	strh.w	lr, [r4, #254]	; 0xfe
				conn->llcp_conn_param.preferred_periodicity =
   12362:	f884 c100 	strb.w	ip, [r4, #256]	; 0x100
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   12366:	f895 e02a 	ldrb.w	lr, [r5, #42]	; 0x2a
   1236a:	f895 c029 	ldrb.w	ip, [r5, #41]	; 0x29
   1236e:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   12372:	f8a4 c102 	strh.w	ip, [r4, #258]	; 0x102
					sys_le16_to_cpu(cpr->offset0);
   12376:	f895 e02c 	ldrb.w	lr, [r5, #44]	; 0x2c
   1237a:	f895 c02b 	ldrb.w	ip, [r5, #43]	; 0x2b
   1237e:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
				conn->llcp_conn_param.offset0 =
   12382:	f8a4 c104 	strh.w	ip, [r4, #260]	; 0x104
					sys_le16_to_cpu(cpr->offset1);
   12386:	f895 e02e 	ldrb.w	lr, [r5, #46]	; 0x2e
   1238a:	f895 c02d 	ldrb.w	ip, [r5, #45]	; 0x2d
   1238e:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
				conn->llcp_conn_param.offset1 =
   12392:	f8a4 c106 	strh.w	ip, [r4, #262]	; 0x106
					sys_le16_to_cpu(cpr->offset2);
   12396:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
   1239a:	f895 c02f 	ldrb.w	ip, [r5, #47]	; 0x2f
   1239e:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
				conn->llcp_conn_param.offset2 =
   123a2:	f8a4 c108 	strh.w	ip, [r4, #264]	; 0x108
					sys_le16_to_cpu(cpr->offset3);
   123a6:	f895 e032 	ldrb.w	lr, [r5, #50]	; 0x32
   123aa:	f895 c031 	ldrb.w	ip, [r5, #49]	; 0x31
   123ae:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
				conn->llcp_conn_param.offset3 =
   123b2:	f8a4 c10a 	strh.w	ip, [r4, #266]	; 0x10a
					sys_le16_to_cpu(cpr->offset4);
   123b6:	f895 c033 	ldrb.w	ip, [r5, #51]	; 0x33
   123ba:	f895 e034 	ldrb.w	lr, [r5, #52]	; 0x34
   123be:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
				conn->llcp_conn_param.offset4 =
   123c2:	f8a4 c10c 	strh.w	ip, [r4, #268]	; 0x10c
					sys_le16_to_cpu(cpr->offset5);
   123c6:	f895 c035 	ldrb.w	ip, [r5, #53]	; 0x35
   123ca:	f895 5036 	ldrb.w	r5, [r5, #54]	; 0x36
   123ce:	ea4c 2505 	orr.w	r5, ip, r5, lsl #8
				conn->llcp_conn_param.offset5 =
   123d2:	f8a4 510e 	strh.w	r5, [r4, #270]	; 0x10e
				     lll->interval) ||
   123d6:	8d65      	ldrh	r5, [r4, #42]	; 0x2a
				if ((conn->llcp_conn_param.interval_max !=
   123d8:	42a9      	cmp	r1, r5
   123da:	d112      	bne.n	12402 <ull_conn_rx+0x516>
				     lll->interval) ||
   123dc:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
   123de:	42b9      	cmp	r1, r7
   123e0:	d10f      	bne.n	12402 <ull_conn_rx+0x516>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   123e2:	f240 41e2 	movw	r1, #1250	; 0x4e2
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   123e6:	4369      	muls	r1, r5
   123e8:	f242 7510 	movw	r5, #10000	; 0x2710
   123ec:	fb05 1303 	mla	r3, r5, r3, r1
   123f0:	3b01      	subs	r3, #1
   123f2:	fbb3 f3f1 	udiv	r3, r3, r1
			    (conn->llcp_conn_param.latency != lll->latency) ||
   123f6:	f8b4 1072 	ldrh.w	r1, [r4, #114]	; 0x72
   123fa:	b29b      	uxth	r3, r3
   123fc:	4299      	cmp	r1, r3
   123fe:	f000 8094 	beq.w	1252a <ull_conn_rx+0x63e>
				conn->llcp_conn_param.state =
   12402:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   12406:	2103      	movs	r1, #3
   12408:	f361 0302 	bfi	r3, r1, #0, #3
   1240c:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
			conn->llcp_conn_param.ack--;
   12410:	3a01      	subs	r2, #1
   12412:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
			if (!conn_upd_curr) {
   12416:	2800      	cmp	r0, #0
   12418:	f47f ad7e 	bne.w	11f18 <ull_conn_rx+0x2c>
				conn_upd_curr = conn;
   1241c:	4bca      	ldr	r3, [pc, #808]	; (12748 <ull_conn_rx+0x85c>)
   1241e:	601c      	str	r4, [r3, #0]
   12420:	e740      	b.n	122a4 <ull_conn_rx+0x3b8>
		} else if ((conn->llcp_conn_param.req ==
   12422:	429a      	cmp	r2, r3
   12424:	d004      	beq.n	12430 <ull_conn_rx+0x544>
			    conn->llcp_conn_param.ack) ||
   12426:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   1242a:	0799      	lsls	r1, r3, #30
   1242c:	f47f ad69 	bne.w	11f02 <ull_conn_rx+0x16>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   12430:	f8b5 a020 	ldrh.w	sl, [r5, #32]
   12434:	fa1f f38a 	uxth.w	r3, sl
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   12438:	2b05      	cmp	r3, #5
   1243a:	d988      	bls.n	1234e <ull_conn_rx+0x462>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   1243c:	f8b5 9022 	ldrh.w	r9, [r5, #34]	; 0x22
   12440:	fa1f f189 	uxth.w	r1, r9
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   12444:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   12448:	d881      	bhi.n	1234e <ull_conn_rx+0x462>
			    (interval_max > 3200) ||
   1244a:	428b      	cmp	r3, r1
   1244c:	f63f af7f 	bhi.w	1234e <ull_conn_rx+0x462>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   12450:	f8b5 8024 	ldrh.w	r8, [r5, #36]	; 0x24
   12454:	fa1f f788 	uxth.w	r7, r8
			    (interval_min > interval_max) ||
   12458:	f5b7 7ffa 	cmp.w	r7, #500	; 0x1f4
   1245c:	f4bf af77 	bcs.w	1234e <ull_conn_rx+0x462>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   12460:	f8b5 e026 	ldrh.w	lr, [r5, #38]	; 0x26
   12464:	fa1f f38e 	uxth.w	r3, lr
			    (latency > 499) ||
   12468:	f1a3 0c0a 	sub.w	ip, r3, #10
   1246c:	fa1f fc8c 	uxth.w	ip, ip
   12470:	f640 4b76 	movw	fp, #3190	; 0xc76
   12474:	45dc      	cmp	ip, fp
   12476:	f63f af6a 	bhi.w	1234e <ull_conn_rx+0x462>
			     ((latency + 1) * interval_max)) ||
   1247a:	fb07 1c01 	mla	ip, r7, r1, r1
			    (timeout < 10) || (timeout > 3200) ||
   1247e:	ebbc 0f83 	cmp.w	ip, r3, lsl #2
   12482:	f4bf af64 	bcs.w	1234e <ull_conn_rx+0x462>
				cpr->preferred_periodicity;
   12486:	f895 c028 	ldrb.w	ip, [r5, #40]	; 0x28
			     ((latency + 1) * interval_max)) ||
   1248a:	4561      	cmp	r1, ip
   1248c:	f4ff af5f 	bcc.w	1234e <ull_conn_rx+0x462>
			conn->llcp_conn_param.interval_min = interval_min;
   12490:	f8a4 a0f8 	strh.w	sl, [r4, #248]	; 0xf8
			conn->llcp_conn_param.interval_max = interval_max;
   12494:	f8a4 90fa 	strh.w	r9, [r4, #250]	; 0xfa
			conn->llcp_conn_param.latency =	latency;
   12498:	f8a4 80fc 	strh.w	r8, [r4, #252]	; 0xfc
			conn->llcp_conn_param.timeout =	timeout;
   1249c:	f8a4 e0fe 	strh.w	lr, [r4, #254]	; 0xfe
			conn->llcp_conn_param.preferred_periodicity =
   124a0:	f884 c100 	strb.w	ip, [r4, #256]	; 0x100
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   124a4:	f895 e02a 	ldrb.w	lr, [r5, #42]	; 0x2a
   124a8:	f895 c029 	ldrb.w	ip, [r5, #41]	; 0x29
   124ac:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   124b0:	f8a4 c102 	strh.w	ip, [r4, #258]	; 0x102
				sys_le16_to_cpu(cpr->offset0);
   124b4:	f895 e02c 	ldrb.w	lr, [r5, #44]	; 0x2c
   124b8:	f895 c02b 	ldrb.w	ip, [r5, #43]	; 0x2b
   124bc:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.offset0 =
   124c0:	f8a4 c104 	strh.w	ip, [r4, #260]	; 0x104
				sys_le16_to_cpu(cpr->offset1);
   124c4:	f895 e02e 	ldrb.w	lr, [r5, #46]	; 0x2e
   124c8:	f895 c02d 	ldrb.w	ip, [r5, #45]	; 0x2d
   124cc:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.offset1 =
   124d0:	f8a4 c106 	strh.w	ip, [r4, #262]	; 0x106
				sys_le16_to_cpu(cpr->offset2);
   124d4:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
   124d8:	f895 c02f 	ldrb.w	ip, [r5, #47]	; 0x2f
   124dc:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.offset2 =
   124e0:	f8a4 c108 	strh.w	ip, [r4, #264]	; 0x108
				sys_le16_to_cpu(cpr->offset3);
   124e4:	f895 e032 	ldrb.w	lr, [r5, #50]	; 0x32
   124e8:	f895 c031 	ldrb.w	ip, [r5, #49]	; 0x31
   124ec:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.offset3 =
   124f0:	f8a4 c10a 	strh.w	ip, [r4, #266]	; 0x10a
				sys_le16_to_cpu(cpr->offset4);
   124f4:	f895 c033 	ldrb.w	ip, [r5, #51]	; 0x33
   124f8:	f895 e034 	ldrb.w	lr, [r5, #52]	; 0x34
   124fc:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.offset4 =
   12500:	f8a4 c10c 	strh.w	ip, [r4, #268]	; 0x10c
				sys_le16_to_cpu(cpr->offset5);
   12504:	f895 c035 	ldrb.w	ip, [r5, #53]	; 0x35
   12508:	f895 5036 	ldrb.w	r5, [r5, #54]	; 0x36
   1250c:	ea4c 2505 	orr.w	r5, ip, r5, lsl #8
			conn->llcp_conn_param.offset5 =
   12510:	f8a4 510e 	strh.w	r5, [r4, #270]	; 0x10e
			     lll->interval) ||
   12514:	8d65      	ldrh	r5, [r4, #42]	; 0x2a
			if ((conn->llcp_conn_param.interval_max !=
   12516:	42a9      	cmp	r1, r5
   12518:	f47f af73 	bne.w	12402 <ull_conn_rx+0x516>
			     lll->interval) ||
   1251c:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
   1251e:	42bd      	cmp	r5, r7
   12520:	f47f af6f 	bne.w	12402 <ull_conn_rx+0x516>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   12524:	f240 45e2 	movw	r5, #1250	; 0x4e2
   12528:	e75d      	b.n	123e6 <ull_conn_rx+0x4fa>
				conn->llcp_conn_param.state =
   1252a:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
   1252e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   12532:	f043 0301 	orr.w	r3, r3, #1
   12536:	f8a4 30f6 	strh.w	r3, [r4, #246]	; 0xf6
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1253a:	6833      	ldr	r3, [r6, #0]
   1253c:	2101      	movs	r1, #1
   1253e:	7119      	strb	r1, [r3, #4]
   12540:	e766      	b.n	12410 <ull_conn_rx+0x524>
		if (PDU_DATA_LLCTRL_LEN(reject_ext_ind) != pdu_rx->len) {
   12542:	7f6b      	ldrb	r3, [r5, #29]
   12544:	2b03      	cmp	r3, #3
   12546:	f040 80e0 	bne.w	1270a <ull_conn_rx+0x81e>
	switch (rej_ext_ind->reject_opcode) {
   1254a:	f895 3020 	ldrb.w	r3, [r5, #32]
   1254e:	2b0f      	cmp	r3, #15
   12550:	f47f acd7 	bne.w	11f02 <ull_conn_rx+0x16>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   12554:	f894 20f5 	ldrb.w	r2, [r4, #245]	; 0xf5
   12558:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   1255c:	429a      	cmp	r2, r3
   1255e:	f43f acd0 	beq.w	11f02 <ull_conn_rx+0x16>
	if (!lll->role && (rej_ext_ind->error_code ==
   12562:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   12566:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   1256a:	2a00      	cmp	r2, #0
   1256c:	f2c0 80f6 	blt.w	1275c <ull_conn_rx+0x870>
   12570:	2b1a      	cmp	r3, #26
   12572:	f040 80f9 	bne.w	12768 <ull_conn_rx+0x87c>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   12576:	f894 209c 	ldrb.w	r2, [r4, #156]	; 0x9c
   1257a:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
   1257e:	429a      	cmp	r2, r3
   12580:	d00c      	beq.n	1259c <ull_conn_rx+0x6b0>
   12582:	4a72      	ldr	r2, [pc, #456]	; (1274c <ull_conn_rx+0x860>)
   12584:	4972      	ldr	r1, [pc, #456]	; (12750 <ull_conn_rx+0x864>)
   12586:	4873      	ldr	r0, [pc, #460]	; (12754 <ull_conn_rx+0x868>)
   12588:	f241 2359 	movw	r3, #4697	; 0x1259
   1258c:	f005 ffec 	bl	18568 <printk>
   12590:	4040      	eors	r0, r0
   12592:	f380 8811 	msr	BASEPRI, r0
   12596:	f04f 0003 	mov.w	r0, #3
   1259a:	df02      	svc	2
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1259c:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   125a0:	2205      	movs	r2, #5
   125a2:	f362 0302 	bfi	r3, r2, #0, #3
		conn->llcp_cu.win_size = 1U;
   125a6:	2201      	movs	r2, #1
   125a8:	f884 20ac 	strb.w	r2, [r4, #172]	; 0xac
		conn->llcp_cu.win_offset_us = 0U;
   125ac:	2200      	movs	r2, #0
   125ae:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   125b2:	f8b4 20fa 	ldrh.w	r2, [r4, #250]	; 0xfa
   125b6:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   125ba:	f8b4 20fc 	ldrh.w	r2, [r4, #252]	; 0xfc
   125be:	f8a4 20a2 	strh.w	r2, [r4, #162]	; 0xa2
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   125c2:	f8b4 20fe 	ldrh.w	r2, [r4, #254]	; 0xfe
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   125c6:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   125ca:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   125ce:	f3c3 03c0 	ubfx	r3, r3, #3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   125d2:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
   125d6:	00db      	lsls	r3, r3, #3
   125d8:	f043 0301 	orr.w	r3, r3, #1
   125dc:	f022 020f 	bic.w	r2, r2, #15
   125e0:	4313      	orrs	r3, r2
   125e2:	f884 309e 	strb.w	r3, [r4, #158]	; 0x9e
		conn->llcp_cu.ack--;
   125e6:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
   125ea:	3b01      	subs	r3, #1
   125ec:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
	if (err) {
   125f0:	e487      	b.n	11f02 <ull_conn_rx+0x16>
		if (PDU_DATA_LLCTRL_LEN(unknown_rsp) != pdu_rx->len) {
   125f2:	7f6b      	ldrb	r3, [r5, #29]
   125f4:	2b02      	cmp	r3, #2
   125f6:	f040 8088 	bne.w	1270a <ull_conn_rx+0x81e>
		} else if ((conn->llcp_conn_param.ack !=
   125fa:	f894 20f5 	ldrb.w	r2, [r4, #245]	; 0xf5
   125fe:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   12602:	429a      	cmp	r2, r3
   12604:	f43f ad14 	beq.w	12030 <ull_conn_rx+0x144>
			    conn->llcp_conn_param.req) &&
   12608:	f895 3020 	ldrb.w	r3, [r5, #32]
   1260c:	2b0f      	cmp	r3, #15
   1260e:	f47f ad0f 	bne.w	12030 <ull_conn_rx+0x144>
			conn->llcp_conn_param.disabled = 1U;
   12612:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   12616:	f043 0310 	orr.w	r3, r3, #16
   1261a:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
			if (!conn->lll.role) {
   1261e:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   12622:	2b00      	cmp	r3, #0
   12624:	db3e      	blt.n	126a4 <ull_conn_rx+0x7b8>
				LL_ASSERT(conn->llcp_cu.req ==
   12626:	f894 209c 	ldrb.w	r2, [r4, #156]	; 0x9c
   1262a:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
   1262e:	429a      	cmp	r2, r3
   12630:	d00c      	beq.n	1264c <ull_conn_rx+0x760>
   12632:	4a46      	ldr	r2, [pc, #280]	; (1274c <ull_conn_rx+0x860>)
   12634:	4946      	ldr	r1, [pc, #280]	; (12750 <ull_conn_rx+0x864>)
   12636:	4847      	ldr	r0, [pc, #284]	; (12754 <ull_conn_rx+0x868>)
   12638:	f641 136c 	movw	r3, #6508	; 0x196c
   1263c:	f005 ff94 	bl	18568 <printk>
   12640:	4040      	eors	r0, r0
   12642:	f380 8811 	msr	BASEPRI, r0
   12646:	f04f 0003 	mov.w	r0, #3
   1264a:	df02      	svc	2
				conn->llcp_conn_param.state =
   1264c:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   12650:	2205      	movs	r2, #5
   12652:	f362 0302 	bfi	r3, r2, #0, #3
				conn->llcp_cu.interval =
   12656:	f8b4 20fa 	ldrh.w	r2, [r4, #250]	; 0xfa
   1265a:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
				conn->llcp_cu.latency =
   1265e:	f8b4 20fc 	ldrh.w	r2, [r4, #252]	; 0xfc
   12662:	f8a4 20a2 	strh.w	r2, [r4, #162]	; 0xa2
				conn->llcp_cu.timeout =
   12666:	f8b4 20fe 	ldrh.w	r2, [r4, #254]	; 0xfe
				conn->llcp_conn_param.state =
   1266a:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
				conn->llcp_cu.timeout =
   1266e:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   12672:	f3c3 03c0 	ubfx	r3, r3, #3, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   12676:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
				conn->llcp_cu.win_size = 1U;
   1267a:	2101      	movs	r1, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1267c:	00db      	lsls	r3, r3, #3
   1267e:	430b      	orrs	r3, r1
   12680:	f022 020f 	bic.w	r2, r2, #15
   12684:	4313      	orrs	r3, r2
   12686:	f884 309e 	strb.w	r3, [r4, #158]	; 0x9e
				conn->llcp_cu.ack--;
   1268a:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
				conn->llcp_cu.win_size = 1U;
   1268e:	f884 10ac 	strb.w	r1, [r4, #172]	; 0xac
				conn->llcp_cu.ack--;
   12692:	3b01      	subs	r3, #1
   12694:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   12698:	6833      	ldr	r3, [r6, #0]
				conn->llcp_cu.win_offset_us = 0U;
   1269a:	2000      	movs	r0, #0
   1269c:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   126a0:	7119      	strb	r1, [r3, #4]
				break;
   126a2:	e5ff      	b.n	122a4 <ull_conn_rx+0x3b8>
			LL_ASSERT(conn_upd_curr == conn);
   126a4:	4f28      	ldr	r7, [pc, #160]	; (12748 <ull_conn_rx+0x85c>)
   126a6:	683a      	ldr	r2, [r7, #0]
   126a8:	4294      	cmp	r4, r2
   126aa:	d00c      	beq.n	126c6 <ull_conn_rx+0x7da>
   126ac:	4a27      	ldr	r2, [pc, #156]	; (1274c <ull_conn_rx+0x860>)
   126ae:	492a      	ldr	r1, [pc, #168]	; (12758 <ull_conn_rx+0x86c>)
   126b0:	4828      	ldr	r0, [pc, #160]	; (12754 <ull_conn_rx+0x868>)
   126b2:	f641 1384 	movw	r3, #6532	; 0x1984
   126b6:	f005 ff57 	bl	18568 <printk>
   126ba:	4040      	eors	r0, r0
   126bc:	f380 8811 	msr	BASEPRI, r0
   126c0:	f04f 0003 	mov.w	r0, #3
   126c4:	df02      	svc	2
	conn_upd_curr = NULL;
   126c6:	2300      	movs	r3, #0
			if (!conn->llcp_conn_param.cmd) {
   126c8:	f894 00f6 	ldrb.w	r0, [r4, #246]	; 0xf6
	conn_upd_curr = NULL;
   126cc:	603b      	str	r3, [r7, #0]
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   126ce:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   126d2:	f884 30f5 	strb.w	r3, [r4, #245]	; 0xf5
			if (!conn->llcp_conn_param.cmd) {
   126d6:	f010 0008 	ands.w	r0, r0, #8
   126da:	6833      	ldr	r3, [r6, #0]
   126dc:	d102      	bne.n	126e4 <ull_conn_rx+0x7f8>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   126de:	2201      	movs	r2, #1
   126e0:	711a      	strb	r2, [r3, #4]
				break;
   126e2:	e5df      	b.n	122a4 <ull_conn_rx+0x3b8>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   126e4:	2216      	movs	r2, #22
   126e6:	711a      	strb	r2, [r3, #4]
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   126e8:	231a      	movs	r3, #26
   126ea:	772b      	strb	r3, [r5, #28]
			cu->latency = lll->latency;
   126ec:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
			cu->interval = lll->interval;
   126ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
			cu->latency = lll->latency;
   126f0:	842a      	strh	r2, [r5, #32]
			cu->timeout = conn->supervision_reload *
   126f2:	f8b4 2072 	ldrh.w	r2, [r4, #114]	; 0x72
			cu->interval = lll->interval;
   126f6:	83eb      	strh	r3, [r5, #30]
			cu->timeout = conn->supervision_reload *
   126f8:	435a      	muls	r2, r3
				      lll->interval * 125U / 1000;
   126fa:	237d      	movs	r3, #125	; 0x7d
   126fc:	4353      	muls	r3, r2
   126fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12702:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   12706:	846b      	strh	r3, [r5, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
   12708:	e492      	b.n	12030 <ull_conn_rx+0x144>
	tx = ctrl_tx_rsp_mem_acquire(conn, rx, &err);
   1270a:	1d29      	adds	r1, r5, #4
   1270c:	aa01      	add	r2, sp, #4
   1270e:	4620      	mov	r0, r4
   12710:	f7ff f984 	bl	11a1c <ctrl_tx_rsp_mem_acquire.isra.0>
	if (!tx) {
   12714:	4601      	mov	r1, r0
   12716:	2800      	cmp	r0, #0
   12718:	f43f acd9 	beq.w	120ce <ull_conn_rx+0x1e2>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1271c:	7903      	ldrb	r3, [r0, #4]
	pdu->llctrl.unknown_rsp.type = type;
   1271e:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   12722:	f043 0303 	orr.w	r3, r3, #3
   12726:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   12728:	2302      	movs	r3, #2
   1272a:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   1272c:	2307      	movs	r3, #7
   1272e:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, tx);
   12730:	4620      	mov	r0, r4
   12732:	f00a f880 	bl	1c836 <ctrl_tx_enqueue>
   12736:	f7ff bbe4 	b.w	11f02 <ull_conn_rx+0x16>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1273a:	2301      	movs	r3, #1
   1273c:	712b      	strb	r3, [r5, #4]
		break;
   1273e:	e5b1      	b.n	122a4 <ull_conn_rx+0x3b8>
			return -ENOBUFS;
   12740:	f06f 0068 	mvn.w	r0, #104	; 0x68
   12744:	e5ae      	b.n	122a4 <ull_conn_rx+0x3b8>
   12746:	bf00      	nop
   12748:	20002818 	.word	0x20002818
   1274c:	00021eb9 	.word	0x00021eb9
   12750:	00021f5c 	.word	0x00021f5c
   12754:	0001f734 	.word	0x0001f734
   12758:	00021f83 	.word	0x00021f83
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   1275c:	2b23      	cmp	r3, #35	; 0x23
   1275e:	d003      	beq.n	12768 <ull_conn_rx+0x87c>
			conn->slave.ticks_to_offset =
   12760:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   12764:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   12768:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   1276c:	f003 0307 	and.w	r3, r3, #7
   12770:	2b04      	cmp	r3, #4
   12772:	d118      	bne.n	127a6 <ull_conn_rx+0x8ba>
		LL_ASSERT(conn_upd_curr == conn);
   12774:	4e19      	ldr	r6, [pc, #100]	; (127dc <ull_conn_rx+0x8f0>)
   12776:	6832      	ldr	r2, [r6, #0]
   12778:	4294      	cmp	r4, r2
   1277a:	d00c      	beq.n	12796 <ull_conn_rx+0x8aa>
   1277c:	4a18      	ldr	r2, [pc, #96]	; (127e0 <ull_conn_rx+0x8f4>)
   1277e:	4919      	ldr	r1, [pc, #100]	; (127e4 <ull_conn_rx+0x8f8>)
   12780:	4819      	ldr	r0, [pc, #100]	; (127e8 <ull_conn_rx+0x8fc>)
   12782:	f241 2374 	movw	r3, #4724	; 0x1274
   12786:	f005 feef 	bl	18568 <printk>
   1278a:	4040      	eors	r0, r0
   1278c:	f380 8811 	msr	BASEPRI, r0
   12790:	f04f 0003 	mov.w	r0, #3
   12794:	df02      	svc	2
	conn_upd_curr = NULL;
   12796:	2300      	movs	r3, #0
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   12798:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
	conn_upd_curr = NULL;
   1279c:	6033      	str	r3, [r6, #0]
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1279e:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
		conn->procedure_expire = 0U;
   127a2:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
	if (!conn->llcp_conn_param.cmd) {
   127a6:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   127aa:	071b      	lsls	r3, r3, #28
   127ac:	f57f aba9 	bpl.w	11f02 <ull_conn_rx+0x16>
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   127b0:	2316      	movs	r3, #22
   127b2:	712b      	strb	r3, [r5, #4]
	cu->status = rej_ext_ind->error_code;
   127b4:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   127b8:	772b      	strb	r3, [r5, #28]
	cu->latency = lll->latency;
   127ba:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
	cu->interval = lll->interval;
   127bc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
	cu->latency = lll->latency;
   127be:	842a      	strh	r2, [r5, #32]
	cu->timeout = conn->supervision_reload *
   127c0:	f8b4 2072 	ldrh.w	r2, [r4, #114]	; 0x72
	cu->interval = lll->interval;
   127c4:	83eb      	strh	r3, [r5, #30]
	cu->timeout = conn->supervision_reload *
   127c6:	435a      	muls	r2, r3
		      lll->interval * 125U / 1000;
   127c8:	237d      	movs	r3, #125	; 0x7d
   127ca:	4353      	muls	r3, r2
   127cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   127d0:	fbb3 f3f2 	udiv	r3, r3, r2
	cu->timeout = conn->supervision_reload *
   127d4:	846b      	strh	r3, [r5, #34]	; 0x22
	if (err) {
   127d6:	f7ff bb9f 	b.w	11f18 <ull_conn_rx+0x2c>
   127da:	bf00      	nop
   127dc:	20002818 	.word	0x20002818
   127e0:	00021eb9 	.word	0x00021eb9
   127e4:	00021f83 	.word	0x00021f83
   127e8:	0001f734 	.word	0x0001f734

000127ec <ull_conn_tx_demux>:
{
   127ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   127f0:	4e20      	ldr	r6, [pc, #128]	; (12874 <ull_conn_tx_demux+0x88>)
{
   127f2:	4604      	mov	r4, r0
   127f4:	4637      	mov	r7, r6
	return (void *)(fifo + first * size);
   127f6:	1d35      	adds	r5, r6, #4
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   127f8:	78b3      	ldrb	r3, [r6, #2]
	if (first == last) {
   127fa:	78f1      	ldrb	r1, [r6, #3]
   127fc:	7832      	ldrb	r2, [r6, #0]
   127fe:	4299      	cmp	r1, r3
   12800:	d02d      	beq.n	1285e <ull_conn_tx_demux+0x72>
	return (void *)(fifo + first * size);
   12802:	fb13 f302 	smulbb	r3, r3, r2
		if (!lll_tx) {
   12806:	eb15 0803 	adds.w	r8, r5, r3
   1280a:	d028      	beq.n	1285e <ull_conn_tx_demux+0x72>
		conn = ll_connected_get(lll_tx->handle);
   1280c:	5ae8      	ldrh	r0, [r5, r3]
   1280e:	f00a f856 	bl	1c8be <ll_connected_get>
		if (conn) {
   12812:	f8d8 1004 	ldr.w	r1, [r8, #4]
   12816:	b320      	cbz	r0, 12862 <ull_conn_tx_demux+0x76>
			tx->next = NULL;
   12818:	2300      	movs	r3, #0
   1281a:	600b      	str	r3, [r1, #0]
			if (!conn->tx_data) {
   1281c:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   12820:	b943      	cbnz	r3, 12834 <ull_conn_tx_demux+0x48>
				if (!conn->tx_head) {
   12822:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
				conn->tx_data = tx;
   12826:	f8c0 1128 	str.w	r1, [r0, #296]	; 0x128
				if (!conn->tx_head) {
   1282a:	b91b      	cbnz	r3, 12834 <ull_conn_tx_demux+0x48>
					conn->tx_head = tx;
   1282c:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
					conn->tx_data_last = NULL;
   12830:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
			if (conn->tx_data_last) {
   12834:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
   12838:	b103      	cbz	r3, 1283c <ull_conn_tx_demux+0x50>
				conn->tx_data_last->next = tx;
   1283a:	6019      	str	r1, [r3, #0]
			conn->tx_data_last = tx;
   1283c:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
	uint8_t _first = *first; /* Copy read-index */
   12840:	78bb      	ldrb	r3, [r7, #2]
	if (_first == last) {
   12842:	78f9      	ldrb	r1, [r7, #3]
		MFIFO_DEQUEUE(conn_tx);
   12844:	787a      	ldrb	r2, [r7, #1]
   12846:	4299      	cmp	r1, r3
   12848:	d005      	beq.n	12856 <ull_conn_tx_demux+0x6a>
	_first += 1U;
   1284a:	3301      	adds	r3, #1
   1284c:	b2db      	uxtb	r3, r3
		_first = 0U;
   1284e:	429a      	cmp	r2, r3
   12850:	bf08      	it	eq
   12852:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   12854:	70bb      	strb	r3, [r7, #2]
	} while (--count);
   12856:	3c01      	subs	r4, #1
   12858:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   1285c:	d1cc      	bne.n	127f8 <ull_conn_tx_demux+0xc>
}
   1285e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			p->ll_id = PDU_DATA_LLID_RESV;
   12862:	790b      	ldrb	r3, [r1, #4]
   12864:	f360 0301 	bfi	r3, r0, #0, #2
   12868:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(0xFFFF, tx);
   1286a:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1286e:	f7fe fa93 	bl	10d98 <ll_tx_ack_put>
   12872:	e7e5      	b.n	12840 <ull_conn_tx_demux+0x54>
   12874:	20000860 	.word	0x20000860

00012878 <conn_cleanup>:
	if (conn == conn_upd_curr) {
   12878:	4b3d      	ldr	r3, [pc, #244]	; (12970 <conn_cleanup+0xf8>)
{
   1287a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (conn == conn_upd_curr) {
   1287e:	681a      	ldr	r2, [r3, #0]
	*((uint8_t *)rx->pdu) = reason;
   12880:	f880 10f0 	strb.w	r1, [r0, #240]	; 0xf0
	if (conn == conn_upd_curr) {
   12884:	4282      	cmp	r2, r0
	conn_upd_curr = NULL;
   12886:	bf04      	itt	eq
   12888:	2200      	moveq	r2, #0
   1288a:	601a      	streq	r2, [r3, #0]
	rx->hdr.handle = conn->lll.handle;
   1288c:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   1288e:	f8a0 30da 	strh.w	r3, [r0, #218]	; 0xda
	rx = conn->llcp_rx;
   12892:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   12896:	2315      	movs	r3, #21
{
   12898:	4604      	mov	r4, r0
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1289a:	f880 30d8 	strb.w	r3, [r0, #216]	; 0xd8
		hdr->type = NODE_RX_TYPE_RELEASE;
   1289e:	2501      	movs	r5, #1
	while (rx) {
   128a0:	bb51      	cbnz	r1, 128f8 <conn_cleanup+0x80>
		link = mem_acquire(&mem_link_tx.free);
   128a2:	4f34      	ldr	r7, [pc, #208]	; (12974 <conn_cleanup+0xfc>)
		LL_ASSERT(link);
   128a4:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 1297c <conn_cleanup+0x104>
   128a8:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 12988 <conn_cleanup+0x110>
	while (conn->tx_head) {
   128ac:	f8d4 511c 	ldr.w	r5, [r4, #284]	; 0x11c
   128b0:	bb4d      	cbnz	r5, 12906 <conn_cleanup+0x8e>
				    TICKER_ID_CONN_BASE + lll->handle,
   128b2:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   128b6:	4b30      	ldr	r3, [pc, #192]	; (12978 <conn_cleanup+0x100>)
   128b8:	9400      	str	r4, [sp, #0]
				    TICKER_ID_CONN_BASE + lll->handle,
   128ba:	3205      	adds	r2, #5
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   128bc:	b2d2      	uxtb	r2, r2
   128be:	2101      	movs	r1, #1
   128c0:	4628      	mov	r0, r5
   128c2:	f7fc fc69 	bl	f198 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   128c6:	f030 0302 	bics.w	r3, r0, #2
   128ca:	d00c      	beq.n	128e6 <conn_cleanup+0x6e>
   128cc:	4a2b      	ldr	r2, [pc, #172]	; (1297c <conn_cleanup+0x104>)
   128ce:	492c      	ldr	r1, [pc, #176]	; (12980 <conn_cleanup+0x108>)
   128d0:	482c      	ldr	r0, [pc, #176]	; (12984 <conn_cleanup+0x10c>)
   128d2:	f44f 63f2 	mov.w	r3, #1936	; 0x790
   128d6:	f005 fe47 	bl	18568 <printk>
   128da:	4040      	eors	r0, r0
   128dc:	f380 8811 	msr	BASEPRI, r0
   128e0:	f04f 0003 	mov.w	r0, #3
   128e4:	df02      	svc	2
	lll->handle = 0xFFFF;
   128e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   128ea:	20ff      	movs	r0, #255	; 0xff
	lll->handle = 0xFFFF;
   128ec:	8523      	strh	r3, [r4, #40]	; 0x28
}
   128ee:	b003      	add	sp, #12
   128f0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	ull_conn_tx_demux(UINT8_MAX);
   128f4:	f7ff bf7a 	b.w	127ec <ull_conn_tx_demux>
		rx = hdr->link->mem;
   128f8:	6808      	ldr	r0, [r1, #0]
   128fa:	6846      	ldr	r6, [r0, #4]
		hdr->type = NODE_RX_TYPE_RELEASE;
   128fc:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   128fe:	f7fe f987 	bl	10c10 <ll_rx_put>
		rx = hdr->link->mem;
   12902:	4631      	mov	r1, r6
   12904:	e7cc      	b.n	128a0 <conn_cleanup+0x28>
	if (conn->tx_head == conn->tx_ctrl) {
   12906:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   1290a:	682b      	ldr	r3, [r5, #0]
   1290c:	4295      	cmp	r5, r2
   1290e:	d124      	bne.n	1295a <conn_cleanup+0xe2>
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   12910:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
		conn->tx_head = conn->tx_head->next;
   12914:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   12918:	4295      	cmp	r5, r2
			conn->tx_ctrl = NULL;
   1291a:	bf06      	itte	eq
   1291c:	2300      	moveq	r3, #0
			conn->tx_ctrl_last = NULL;
   1291e:	e9c4 3348 	strdeq	r3, r3, [r4, #288]	; 0x120
			conn->tx_ctrl = conn->tx_head;
   12922:	f8c4 3120 	strne.w	r3, [r4, #288]	; 0x120
		tx->next = tx;
   12926:	602d      	str	r5, [r5, #0]
		link = mem_acquire(&mem_link_tx.free);
   12928:	4638      	mov	r0, r7
   1292a:	f009 fb12 	bl	1bf52 <mem_acquire>
		LL_ASSERT(link);
   1292e:	4606      	mov	r6, r0
   12930:	b960      	cbnz	r0, 1294c <conn_cleanup+0xd4>
   12932:	4814      	ldr	r0, [pc, #80]	; (12984 <conn_cleanup+0x10c>)
   12934:	f240 73a3 	movw	r3, #1955	; 0x7a3
   12938:	4642      	mov	r2, r8
   1293a:	4649      	mov	r1, r9
   1293c:	f005 fe14 	bl	18568 <printk>
   12940:	4040      	eors	r0, r0
   12942:	f380 8811 	msr	BASEPRI, r0
   12946:	f04f 0003 	mov.w	r0, #3
   1294a:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   1294c:	f104 025c 	add.w	r2, r4, #92	; 0x5c
   12950:	4629      	mov	r1, r5
   12952:	4630      	mov	r0, r6
   12954:	f009 fb5b 	bl	1c00e <memq_enqueue>
   12958:	e7a8      	b.n	128ac <conn_cleanup+0x34>
		if (conn->tx_head == conn->tx_data) {
   1295a:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
		conn->tx_head = conn->tx_head->next;
   1295e:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
		if (conn->tx_head == conn->tx_data) {
   12962:	4295      	cmp	r5, r2
			conn->tx_data = conn->tx_data->next;
   12964:	bf08      	it	eq
   12966:	f8c4 3128 	streq.w	r3, [r4, #296]	; 0x128
		tx->next = NULL;
   1296a:	2300      	movs	r3, #0
   1296c:	602b      	str	r3, [r5, #0]
   1296e:	e7db      	b.n	12928 <conn_cleanup+0xb0>
   12970:	20002818 	.word	0x20002818
   12974:	2000297c 	.word	0x2000297c
   12978:	00011a59 	.word	0x00011a59
   1297c:	00021eb9 	.word	0x00021eb9
   12980:	00021fac 	.word	0x00021fac
   12984:	0001f734 	.word	0x0001f734
   12988:	00021474 	.word	0x00021474

0001298c <ull_conn_done>:
{
   1298c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	conn = CONTAINER_OF(done->param, struct ll_conn, ull);
   12990:	69c4      	ldr	r4, [r0, #28]
	if (unlikely(lll->handle == 0xFFFF)) {
   12992:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   12994:	f64f 73ff 	movw	r3, #65535	; 0xffff
   12998:	429a      	cmp	r2, r3
{
   1299a:	b08a      	sub	sp, #40	; 0x28
   1299c:	4680      	mov	r8, r0
	if (unlikely(lll->handle == 0xFFFF)) {
   1299e:	d006      	beq.n	129ae <ull_conn_done+0x22>
	reason_final = conn->llcp_terminate.reason_final;
   129a0:	f894 50d3 	ldrb.w	r5, [r4, #211]	; 0xd3
	if (reason_final && (
   129a4:	b135      	cbz	r5, 129b4 <ull_conn_done+0x28>
		conn_cleanup(conn, reason_final);
   129a6:	4629      	mov	r1, r5
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
   129a8:	4620      	mov	r0, r4
   129aa:	f7ff ff65 	bl	12878 <conn_cleanup>
}
   129ae:	b00a      	add	sp, #40	; 0x28
   129b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	latency_event = lll->latency_event;
   129b4:	8e27      	ldrh	r7, [r4, #48]	; 0x30
	if (done->extra.trx_cnt) {
   129b6:	8c83      	ldrh	r3, [r0, #36]	; 0x24
	elapsed_event = latency_event + 1;
   129b8:	1c7e      	adds	r6, r7, #1
	ticks_drift_minus = 0U;
   129ba:	e9cd 5508 	strd	r5, r5, [sp, #32]
	elapsed_event = latency_event + 1;
   129be:	b2b6      	uxth	r6, r6
	if (done->extra.trx_cnt) {
   129c0:	b17b      	cbz	r3, 129e2 <ull_conn_done+0x56>
		} else if (lll->role) {
   129c2:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   129c6:	2b00      	cmp	r3, #0
   129c8:	da08      	bge.n	129dc <ull_conn_done+0x50>
			ull_drift_ticks_get(done, &ticks_drift_plus,
   129ca:	aa08      	add	r2, sp, #32
   129cc:	a909      	add	r1, sp, #36	; 0x24
   129ce:	f7ed fd17 	bl	400 <ull_drift_ticks_get>
			if (!conn->tx_head) {
   129d2:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   129d6:	b15b      	cbz	r3, 129f0 <ull_conn_done+0x64>
				lll->latency_event = 0;
   129d8:	2300      	movs	r3, #0
				lll->latency_event = lll->latency;
   129da:	8623      	strh	r3, [r4, #48]	; 0x30
		conn->connect_expire = 0U;
   129dc:	2300      	movs	r3, #0
   129de:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
	if (done->extra.crc_valid) {
   129e2:	f898 3026 	ldrb.w	r3, [r8, #38]	; 0x26
   129e6:	b1bb      	cbz	r3, 12a18 <ull_conn_done+0x8c>
		conn->supervision_expire = 0U;
   129e8:	2300      	movs	r3, #0
			conn->supervision_expire = conn->supervision_reload;
   129ea:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
   129ee:	e01c      	b.n	12a2a <ull_conn_done+0x9e>
				ull_conn_tx_demux(UINT8_MAX);
   129f0:	20ff      	movs	r0, #255	; 0xff
   129f2:	f7ff fefb 	bl	127ec <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   129f6:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   129fa:	2b00      	cmp	r3, #0
   129fc:	d1ec      	bne.n	129d8 <ull_conn_done+0x4c>
   129fe:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
   12a02:	462a      	mov	r2, r5
   12a04:	f009 fb0a 	bl	1c01c <memq_peek>
   12a08:	2800      	cmp	r0, #0
   12a0a:	d1e5      	bne.n	129d8 <ull_conn_done+0x4c>
			} else if (lll->slave.latency_enabled) {
   12a0c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   12a10:	075b      	lsls	r3, r3, #29
   12a12:	d5e3      	bpl.n	129dc <ull_conn_done+0x50>
				lll->latency_event = lll->latency;
   12a14:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   12a16:	e7e0      	b.n	129da <ull_conn_done+0x4e>
	else if (conn->connect_expire) {
   12a18:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
   12a1c:	2b00      	cmp	r3, #0
   12a1e:	d07b      	beq.n	12b18 <ull_conn_done+0x18c>
		if (conn->connect_expire > elapsed_event) {
   12a20:	42b3      	cmp	r3, r6
   12a22:	d977      	bls.n	12b14 <ull_conn_done+0x188>
			conn->connect_expire -= elapsed_event;
   12a24:	1b9b      	subs	r3, r3, r6
   12a26:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
	if (conn->supervision_expire) {
   12a2a:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
   12a2e:	b1e3      	cbz	r3, 12a6a <ull_conn_done+0xde>
		if (conn->supervision_expire > elapsed_event) {
   12a30:	42b3      	cmp	r3, r6
   12a32:	d978      	bls.n	12b26 <ull_conn_done+0x19a>
			conn->supervision_expire -= elapsed_event;
   12a34:	1b9b      	subs	r3, r3, r6
   12a36:	b29b      	uxth	r3, r3
			lll->latency_event = 0U;
   12a38:	2200      	movs	r2, #0
			if (conn->supervision_expire <= 6U) {
   12a3a:	2b06      	cmp	r3, #6
			conn->supervision_expire -= elapsed_event;
   12a3c:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
			lll->latency_event = 0U;
   12a40:	8622      	strh	r2, [r4, #48]	; 0x30
			if (conn->supervision_expire <= 6U) {
   12a42:	d972      	bls.n	12b2a <ull_conn_done+0x19e>
			else if (lll->role) {
   12a44:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   12a48:	4293      	cmp	r3, r2
   12a4a:	da0e      	bge.n	12a6a <ull_conn_done+0xde>
				if (latency_event) {
   12a4c:	2f00      	cmp	r7, #0
   12a4e:	d16c      	bne.n	12b2a <ull_conn_done+0x19e>
					force = conn->slave.force & 0x01;
   12a50:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
					conn->slave.force >>= 1U;
   12a54:	085a      	lsrs	r2, r3, #1
					if (force) {
   12a56:	f013 0301 	ands.w	r3, r3, #1
						conn->slave.force |= BIT(31);
   12a5a:	bf17      	itett	ne
   12a5c:	f042 4200 	orrne.w	r2, r2, #2147483648	; 0x80000000
					conn->slave.force >>= 1U;
   12a60:	f8c4 2080 	streq.w	r2, [r4, #128]	; 0x80
						conn->slave.force |= BIT(31);
   12a64:	f8c4 2080 	strne.w	r2, [r4, #128]	; 0x80
					force = conn->slave.force & 0x01;
   12a68:	461d      	movne	r5, r3
	if (conn->procedure_expire != 0U) {
   12a6a:	f8b4 3078 	ldrh.w	r3, [r4, #120]	; 0x78
   12a6e:	b123      	cbz	r3, 12a7a <ull_conn_done+0xee>
		if (conn->procedure_expire > elapsed_event) {
   12a70:	42b3      	cmp	r3, r6
   12a72:	d95c      	bls.n	12b2e <ull_conn_done+0x1a2>
			conn->procedure_expire -= elapsed_event;
   12a74:	1b9e      	subs	r6, r3, r6
   12a76:	f8a4 6078 	strh.w	r6, [r4, #120]	; 0x78
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   12a7a:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   12a7e:	f894 2089 	ldrb.w	r2, [r4, #137]	; 0x89
   12a82:	1a9b      	subs	r3, r3, r2
   12a84:	f003 0303 	and.w	r3, r3, #3
   12a88:	2b02      	cmp	r3, #2
   12a8a:	d104      	bne.n	12a96 <ull_conn_done+0x10a>
	     ((conn->llcp_type == LLCP_CONN_UPD) ||
   12a8c:	f894 308a 	ldrb.w	r3, [r4, #138]	; 0x8a
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   12a90:	3b01      	subs	r3, #1
   12a92:	2b01      	cmp	r3, #1
   12a94:	d905      	bls.n	12aa2 <ull_conn_done+0x116>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   12a96:	f894 209c 	ldrb.w	r2, [r4, #156]	; 0x9c
   12a9a:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
   12a9e:	429a      	cmp	r2, r3
   12aa0:	d001      	beq.n	12aa6 <ull_conn_done+0x11a>
		lll->latency_event = 0U;
   12aa2:	2300      	movs	r3, #0
   12aa4:	8623      	strh	r3, [r4, #48]	; 0x30
	if ((force) || (latency_event != lll->latency_event)) {
   12aa6:	8e21      	ldrh	r1, [r4, #48]	; 0x30
   12aa8:	b90d      	cbnz	r5, 12aae <ull_conn_done+0x122>
   12aaa:	428f      	cmp	r7, r1
   12aac:	d041      	beq.n	12b32 <ull_conn_done+0x1a6>
		lazy = lll->latency_event + 1U;
   12aae:	3101      	adds	r1, #1
   12ab0:	b289      	uxth	r1, r1
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   12ab2:	e9dd 7308 	ldrd	r7, r3, [sp, #32]
   12ab6:	ea53 0207 	orrs.w	r2, r3, r7
   12aba:	d103      	bne.n	12ac4 <ull_conn_done+0x138>
   12abc:	b911      	cbnz	r1, 12ac4 <ull_conn_done+0x138>
   12abe:	2d00      	cmp	r5, #0
   12ac0:	f43f af75 	beq.w	129ae <ull_conn_done+0x22>
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   12ac4:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   12ac8:	481b      	ldr	r0, [pc, #108]	; (12b38 <ull_conn_done+0x1ac>)
		struct ll_conn *conn = lll->hdr.parent;
   12aca:	69e6      	ldr	r6, [r4, #28]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   12acc:	9606      	str	r6, [sp, #24]
   12ace:	e9cd 5004 	strd	r5, r0, [sp, #16]
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   12ad2:	3205      	adds	r2, #5
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   12ad4:	2000      	movs	r0, #0
   12ad6:	9103      	str	r1, [sp, #12]
   12ad8:	e9cd 0001 	strd	r0, r0, [sp, #4]
   12adc:	9700      	str	r7, [sp, #0]
   12ade:	b2d2      	uxtb	r2, r2
   12ae0:	2101      	movs	r1, #1
   12ae2:	f009 fd0e 	bl	1c502 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   12ae6:	f030 0302 	bics.w	r3, r0, #2
   12aea:	f43f af60 	beq.w	129ae <ull_conn_done+0x22>
   12aee:	f7fe f9db 	bl	10ea8 <ull_disable_mark_get>
   12af2:	4286      	cmp	r6, r0
   12af4:	f43f af5b 	beq.w	129ae <ull_conn_done+0x22>
   12af8:	4a10      	ldr	r2, [pc, #64]	; (12b3c <ull_conn_done+0x1b0>)
   12afa:	4911      	ldr	r1, [pc, #68]	; (12b40 <ull_conn_done+0x1b4>)
   12afc:	4811      	ldr	r0, [pc, #68]	; (12b44 <ull_conn_done+0x1b8>)
   12afe:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
   12b02:	f005 fd31 	bl	18568 <printk>
   12b06:	4040      	eors	r0, r0
   12b08:	f380 8811 	msr	BASEPRI, r0
   12b0c:	f04f 0003 	mov.w	r0, #3
   12b10:	df02      	svc	2
   12b12:	e74c      	b.n	129ae <ull_conn_done+0x22>
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
   12b14:	213e      	movs	r1, #62	; 0x3e
   12b16:	e747      	b.n	129a8 <ull_conn_done+0x1c>
		if (!conn->supervision_expire) {
   12b18:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
   12b1c:	2b00      	cmp	r3, #0
   12b1e:	d184      	bne.n	12a2a <ull_conn_done+0x9e>
			conn->supervision_expire = conn->supervision_reload;
   12b20:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
   12b24:	e761      	b.n	129ea <ull_conn_done+0x5e>
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
   12b26:	2108      	movs	r1, #8
   12b28:	e73e      	b.n	129a8 <ull_conn_done+0x1c>
				force = 1U;
   12b2a:	2501      	movs	r5, #1
   12b2c:	e79d      	b.n	12a6a <ull_conn_done+0xde>
			conn_cleanup(conn, BT_HCI_ERR_LL_RESP_TIMEOUT);
   12b2e:	2122      	movs	r1, #34	; 0x22
   12b30:	e73a      	b.n	129a8 <ull_conn_done+0x1c>
	lazy = 0U;
   12b32:	4629      	mov	r1, r5
   12b34:	e7bd      	b.n	12ab2 <ull_conn_done+0x126>
   12b36:	bf00      	nop
   12b38:	00011c05 	.word	0x00011c05
   12b3c:	00021eb9 	.word	0x00021eb9
   12b40:	00021fd9 	.word	0x00021fd9
   12b44:	0001f734 	.word	0x0001f734

00012b48 <ull_conn_tx_lll_enqueue>:
{
   12b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   12b4c:	f8df 808c 	ldr.w	r8, [pc, #140]	; 12bdc <ull_conn_tx_lll_enqueue+0x94>
		LL_ASSERT(link);
   12b50:	f8df 908c 	ldr.w	r9, [pc, #140]	; 12be0 <ull_conn_tx_lll_enqueue+0x98>
   12b54:	f8df a08c 	ldr.w	sl, [pc, #140]	; 12be4 <ull_conn_tx_lll_enqueue+0x9c>
{
   12b58:	4604      	mov	r4, r0
   12b5a:	460e      	mov	r6, r1
	while (conn->tx_head &&
   12b5c:	f8d4 511c 	ldr.w	r5, [r4, #284]	; 0x11c
   12b60:	b105      	cbz	r5, 12b64 <ull_conn_tx_lll_enqueue+0x1c>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   12b62:	b90e      	cbnz	r6, 12b68 <ull_conn_tx_lll_enqueue+0x20>
}
   12b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (conn->tx_head == conn->tx_ctrl) {
   12b68:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   12b6c:	682b      	ldr	r3, [r5, #0]
   12b6e:	4295      	cmp	r5, r2
   12b70:	d126      	bne.n	12bc0 <ull_conn_tx_lll_enqueue+0x78>
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   12b72:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
		conn->tx_head = conn->tx_head->next;
   12b76:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   12b7a:	4295      	cmp	r5, r2
			conn->tx_ctrl = NULL;
   12b7c:	bf06      	itte	eq
   12b7e:	2300      	moveq	r3, #0
			conn->tx_ctrl_last = NULL;
   12b80:	e9c4 3348 	strdeq	r3, r3, [r4, #288]	; 0x120
			conn->tx_ctrl = conn->tx_head;
   12b84:	f8c4 3120 	strne.w	r3, [r4, #288]	; 0x120
		tx->next = tx;
   12b88:	602d      	str	r5, [r5, #0]
		link = mem_acquire(&mem_link_tx.free);
   12b8a:	4640      	mov	r0, r8
   12b8c:	f009 f9e1 	bl	1bf52 <mem_acquire>
		LL_ASSERT(link);
   12b90:	4607      	mov	r7, r0
   12b92:	b960      	cbnz	r0, 12bae <ull_conn_tx_lll_enqueue+0x66>
   12b94:	4810      	ldr	r0, [pc, #64]	; (12bd8 <ull_conn_tx_lll_enqueue+0x90>)
   12b96:	f240 631c 	movw	r3, #1564	; 0x61c
   12b9a:	464a      	mov	r2, r9
   12b9c:	4651      	mov	r1, sl
   12b9e:	f005 fce3 	bl	18568 <printk>
   12ba2:	4040      	eors	r0, r0
   12ba4:	f380 8811 	msr	BASEPRI, r0
   12ba8:	f04f 0003 	mov.w	r0, #3
   12bac:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   12bae:	f104 025c 	add.w	r2, r4, #92	; 0x5c
   12bb2:	4629      	mov	r1, r5
   12bb4:	4638      	mov	r0, r7
   12bb6:	3e01      	subs	r6, #1
   12bb8:	f009 fa29 	bl	1c00e <memq_enqueue>
   12bbc:	b2f6      	uxtb	r6, r6
   12bbe:	e7cd      	b.n	12b5c <ull_conn_tx_lll_enqueue+0x14>
		if (conn->tx_head == conn->tx_data) {
   12bc0:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
		conn->tx_head = conn->tx_head->next;
   12bc4:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
		if (conn->tx_head == conn->tx_data) {
   12bc8:	4295      	cmp	r5, r2
			conn->tx_data = conn->tx_data->next;
   12bca:	bf08      	it	eq
   12bcc:	f8c4 3128 	streq.w	r3, [r4, #296]	; 0x128
		tx->next = NULL;
   12bd0:	2300      	movs	r3, #0
   12bd2:	602b      	str	r3, [r5, #0]
   12bd4:	e7d9      	b.n	12b8a <ull_conn_tx_lll_enqueue+0x42>
   12bd6:	bf00      	nop
   12bd8:	0001f734 	.word	0x0001f734
   12bdc:	2000297c 	.word	0x2000297c
   12be0:	00021eb9 	.word	0x00021eb9
   12be4:	00021474 	.word	0x00021474

00012be8 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   12be8:	4901      	ldr	r1, [pc, #4]	; (12bf0 <ull_conn_link_tx_release+0x8>)
   12bea:	f009 b9cb 	b.w	1bf84 <mem_release>
   12bee:	bf00      	nop
   12bf0:	2000297c 	.word	0x2000297c

00012bf4 <ull_conn_ack_last_idx_get>:
}
   12bf4:	4b01      	ldr	r3, [pc, #4]	; (12bfc <ull_conn_ack_last_idx_get+0x8>)
   12bf6:	78d8      	ldrb	r0, [r3, #3]
   12bf8:	4770      	bx	lr
   12bfa:	bf00      	nop
   12bfc:	20000814 	.word	0x20000814

00012c00 <ull_conn_ack_peek>:
{
   12c00:	b570      	push	{r4, r5, r6, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   12c02:	4b0a      	ldr	r3, [pc, #40]	; (12c2c <ull_conn_ack_peek+0x2c>)
   12c04:	789c      	ldrb	r4, [r3, #2]
   12c06:	78de      	ldrb	r6, [r3, #3]
	if (first == last) {
   12c08:	42b4      	cmp	r4, r6
{
   12c0a:	4605      	mov	r5, r0
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   12c0c:	7818      	ldrb	r0, [r3, #0]
   12c0e:	d00b      	beq.n	12c28 <ull_conn_ack_peek+0x28>
	return (void *)(fifo + first * size);
   12c10:	3304      	adds	r3, #4
   12c12:	fb14 f400 	smulbb	r4, r4, r0
	if (!lll_tx) {
   12c16:	1918      	adds	r0, r3, r4
   12c18:	d005      	beq.n	12c26 <ull_conn_ack_peek+0x26>
	*ack_last = mfifo_conn_ack.l;
   12c1a:	702e      	strb	r6, [r5, #0]
	*handle = lll_tx->handle;
   12c1c:	5b1b      	ldrh	r3, [r3, r4]
   12c1e:	800b      	strh	r3, [r1, #0]
	*tx = lll_tx->node;
   12c20:	6843      	ldr	r3, [r0, #4]
   12c22:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   12c24:	6818      	ldr	r0, [r3, #0]
}
   12c26:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   12c28:	2000      	movs	r0, #0
   12c2a:	e7fc      	b.n	12c26 <ull_conn_ack_peek+0x26>
   12c2c:	20000814 	.word	0x20000814

00012c30 <ull_conn_ack_by_last_peek>:
{
   12c30:	b530      	push	{r4, r5, lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   12c32:	4b09      	ldr	r3, [pc, #36]	; (12c58 <ull_conn_ack_by_last_peek+0x28>)
   12c34:	789c      	ldrb	r4, [r3, #2]
   12c36:	781d      	ldrb	r5, [r3, #0]
	if (first == last) {
   12c38:	4284      	cmp	r4, r0
   12c3a:	d00a      	beq.n	12c52 <ull_conn_ack_by_last_peek+0x22>
	return (void *)(fifo + first * size);
   12c3c:	3304      	adds	r3, #4
   12c3e:	fb14 f405 	smulbb	r4, r4, r5
	if (!lll_tx) {
   12c42:	1918      	adds	r0, r3, r4
   12c44:	d004      	beq.n	12c50 <ull_conn_ack_by_last_peek+0x20>
	*handle = lll_tx->handle;
   12c46:	5b1b      	ldrh	r3, [r3, r4]
   12c48:	800b      	strh	r3, [r1, #0]
	*tx = lll_tx->node;
   12c4a:	6843      	ldr	r3, [r0, #4]
   12c4c:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   12c4e:	6818      	ldr	r0, [r3, #0]
}
   12c50:	bd30      	pop	{r4, r5, pc}
		return NULL;
   12c52:	2000      	movs	r0, #0
   12c54:	e7fc      	b.n	12c50 <ull_conn_ack_by_last_peek+0x20>
   12c56:	bf00      	nop
   12c58:	20000814 	.word	0x20000814

00012c5c <ull_conn_ack_dequeue>:
{
   12c5c:	b510      	push	{r4, lr}
	return MFIFO_DEQUEUE(conn_ack);
   12c5e:	4a09      	ldr	r2, [pc, #36]	; (12c84 <ull_conn_ack_dequeue+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   12c60:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   12c62:	78d0      	ldrb	r0, [r2, #3]
   12c64:	7811      	ldrb	r1, [r2, #0]
   12c66:	7854      	ldrb	r4, [r2, #1]
   12c68:	4298      	cmp	r0, r3
   12c6a:	d009      	beq.n	12c80 <ull_conn_ack_dequeue+0x24>
	mem = *((void **)(fifo + _first * size));
   12c6c:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   12c70:	3301      	adds	r3, #1
   12c72:	b2db      	uxtb	r3, r3
		_first = 0U;
   12c74:	429c      	cmp	r4, r3
   12c76:	bf08      	it	eq
   12c78:	2300      	moveq	r3, #0
	mem = *((void **)(fifo + _first * size));
   12c7a:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   12c7c:	7093      	strb	r3, [r2, #2]
}
   12c7e:	bd10      	pop	{r4, pc}
		return NULL;
   12c80:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(conn_ack);
   12c82:	e7fc      	b.n	12c7e <ull_conn_ack_dequeue+0x22>
   12c84:	20000814 	.word	0x20000814

00012c88 <ull_conn_lll_ack_enqueue>:
{
   12c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   12c8a:	4a12      	ldr	r2, [pc, #72]	; (12cd4 <ull_conn_lll_ack_enqueue+0x4c>)
   12c8c:	78d4      	ldrb	r4, [r2, #3]
	if (last == count) {
   12c8e:	7857      	ldrb	r7, [r2, #1]
   12c90:	7895      	ldrb	r5, [r2, #2]
   12c92:	7816      	ldrb	r6, [r2, #0]
	last = last + 1;
   12c94:	1c63      	adds	r3, r4, #1
   12c96:	b2db      	uxtb	r3, r3
		last = 0U;
   12c98:	429f      	cmp	r7, r3
   12c9a:	bf08      	it	eq
   12c9c:	2300      	moveq	r3, #0
	if (last == first) {
   12c9e:	429d      	cmp	r5, r3
   12ca0:	d004      	beq.n	12cac <ull_conn_lll_ack_enqueue+0x24>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   12ca2:	1d15      	adds	r5, r2, #4
   12ca4:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(lll_tx);
   12ca8:	192e      	adds	r6, r5, r4
   12caa:	d10f      	bne.n	12ccc <ull_conn_lll_ack_enqueue+0x44>
   12cac:	4a0a      	ldr	r2, [pc, #40]	; (12cd8 <ull_conn_lll_ack_enqueue+0x50>)
   12cae:	490b      	ldr	r1, [pc, #44]	; (12cdc <ull_conn_lll_ack_enqueue+0x54>)
   12cb0:	480b      	ldr	r0, [pc, #44]	; (12ce0 <ull_conn_lll_ack_enqueue+0x58>)
   12cb2:	f240 635a 	movw	r3, #1626	; 0x65a
   12cb6:	f005 fc57 	bl	18568 <printk>
   12cba:	4040      	eors	r0, r0
   12cbc:	f380 8811 	msr	BASEPRI, r0
   12cc0:	f04f 0003 	mov.w	r0, #3
   12cc4:	df02      	svc	2
	lll_tx->handle = handle;
   12cc6:	2300      	movs	r3, #0
   12cc8:	801b      	strh	r3, [r3, #0]
   12cca:	deff      	udf	#255	; 0xff
   12ccc:	5328      	strh	r0, [r5, r4]
	lll_tx->node = tx;
   12cce:	6071      	str	r1, [r6, #4]
	*last = idx; /* Commit: Update write index */
   12cd0:	70d3      	strb	r3, [r2, #3]
}
   12cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12cd4:	20000814 	.word	0x20000814
   12cd8:	00021eb9 	.word	0x00021eb9
   12cdc:	00021f55 	.word	0x00021f55
   12ce0:	0001f734 	.word	0x0001f734

00012ce4 <ull_conn_tx_ack>:
{
   12ce4:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(pdu_tx->len);
   12ce6:	7953      	ldrb	r3, [r2, #5]
{
   12ce8:	4605      	mov	r5, r0
   12cea:	460e      	mov	r6, r1
   12cec:	4614      	mov	r4, r2
	LL_ASSERT(pdu_tx->len);
   12cee:	b963      	cbnz	r3, 12d0a <ull_conn_tx_ack+0x26>
   12cf0:	4a2c      	ldr	r2, [pc, #176]	; (12da4 <ull_conn_tx_ack+0xc0>)
   12cf2:	492d      	ldr	r1, [pc, #180]	; (12da8 <ull_conn_tx_ack+0xc4>)
   12cf4:	482d      	ldr	r0, [pc, #180]	; (12dac <ull_conn_tx_ack+0xc8>)
   12cf6:	f240 6367 	movw	r3, #1639	; 0x667
   12cfa:	f005 fc35 	bl	18568 <printk>
   12cfe:	4040      	eors	r0, r0
   12d00:	f380 8811 	msr	BASEPRI, r0
   12d04:	f04f 0003 	mov.w	r0, #3
   12d08:	df02      	svc	2
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   12d0a:	7923      	ldrb	r3, [r4, #4]
   12d0c:	f003 0203 	and.w	r2, r3, #3
   12d10:	2a03      	cmp	r2, #3
   12d12:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12d16:	d13e      	bne.n	12d96 <ull_conn_tx_ack+0xb2>
		if (handle != 0xFFFF) {
   12d18:	4295      	cmp	r5, r2
   12d1a:	d008      	beq.n	12d2e <ull_conn_tx_ack+0x4a>
			struct ll_conn *conn = ll_conn_get(handle);
   12d1c:	4628      	mov	r0, r5
   12d1e:	f7ff f813 	bl	11d48 <ll_conn_get>
	switch (pdu_tx->llctrl.opcode) {
   12d22:	79e3      	ldrb	r3, [r4, #7]
   12d24:	2b07      	cmp	r3, #7
   12d26:	d00f      	beq.n	12d48 <ull_conn_tx_ack+0x64>
   12d28:	d80a      	bhi.n	12d40 <ull_conn_tx_ack+0x5c>
   12d2a:	2b02      	cmp	r3, #2
   12d2c:	d013      	beq.n	12d56 <ull_conn_tx_ack+0x72>
		if (link->next == (void *)tx) {
   12d2e:	6833      	ldr	r3, [r6, #0]
   12d30:	42a3      	cmp	r3, r4
   12d32:	d11c      	bne.n	12d6e <ull_conn_tx_ack+0x8a>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   12d34:	4620      	mov	r0, r4
   12d36:	491e      	ldr	r1, [pc, #120]	; (12db0 <ull_conn_tx_ack+0xcc>)
}
   12d38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
   12d3c:	f009 b922 	b.w	1bf84 <mem_release>
	switch (pdu_tx->llctrl.opcode) {
   12d40:	2b09      	cmp	r3, #9
   12d42:	d001      	beq.n	12d48 <ull_conn_tx_ack+0x64>
   12d44:	2b13      	cmp	r3, #19
   12d46:	d1f2      	bne.n	12d2e <ull_conn_tx_ack+0x4a>
		conn->common.txn_lock = 0U;
   12d48:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
   12d4c:	f36f 0341 	bfc	r3, #1, #1
   12d50:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
		break;
   12d54:	e7eb      	b.n	12d2e <ull_conn_tx_ack+0x4a>
		if (pdu_tx->llctrl.terminate_ind.error_code ==
   12d56:	7a23      	ldrb	r3, [r4, #8]
			conn->llcp_terminate.reason_final =
   12d58:	2b13      	cmp	r3, #19
   12d5a:	bf08      	it	eq
   12d5c:	2316      	moveq	r3, #22
   12d5e:	f880 30d3 	strb.w	r3, [r0, #211]	; 0xd3
		conn->llcp_terminate.ack--;
   12d62:	f890 30d1 	ldrb.w	r3, [r0, #209]	; 0xd1
   12d66:	3b01      	subs	r3, #1
   12d68:	f880 30d1 	strb.w	r3, [r0, #209]	; 0xd1
	break;
   12d6c:	e7df      	b.n	12d2e <ull_conn_tx_ack+0x4a>
			LL_ASSERT(!link->next);
   12d6e:	b163      	cbz	r3, 12d8a <ull_conn_tx_ack+0xa6>
   12d70:	4a0c      	ldr	r2, [pc, #48]	; (12da4 <ull_conn_tx_ack+0xc0>)
   12d72:	4910      	ldr	r1, [pc, #64]	; (12db4 <ull_conn_tx_ack+0xd0>)
   12d74:	480d      	ldr	r0, [pc, #52]	; (12dac <ull_conn_tx_ack+0xc8>)
   12d76:	f240 637a 	movw	r3, #1658	; 0x67a
   12d7a:	f005 fbf5 	bl	18568 <printk>
   12d7e:	4040      	eors	r0, r0
   12d80:	f380 8811 	msr	BASEPRI, r0
   12d84:	f04f 0003 	mov.w	r0, #3
   12d88:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   12d8a:	4621      	mov	r1, r4
   12d8c:	4628      	mov	r0, r5
}
   12d8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
   12d92:	f7fe b801 	b.w	10d98 <ll_tx_ack_put>
	} else if (handle == 0xFFFF) {
   12d96:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   12d98:	bf04      	itt	eq
   12d9a:	f36f 0301 	bfceq	r3, #0, #2
   12d9e:	7123      	strbeq	r3, [r4, #4]
   12da0:	e7f3      	b.n	12d8a <ull_conn_tx_ack+0xa6>
   12da2:	bf00      	nop
   12da4:	00021eb9 	.word	0x00021eb9
   12da8:	00022032 	.word	0x00022032
   12dac:	0001f734 	.word	0x0001f734
   12db0:	200028c8 	.word	0x200028c8
   12db4:	0002203e 	.word	0x0002203e

00012db8 <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param)
{
   12db8:	b510      	push	{r4, lr}
   12dba:	460c      	mov	r4, r1
	struct ll_conn *conn = param;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   12dbc:	b160      	cbz	r0, 12dd8 <ticker_update_latency_cancel_op_cb+0x20>
   12dbe:	4a0a      	ldr	r2, [pc, #40]	; (12de8 <ticker_update_latency_cancel_op_cb+0x30>)
   12dc0:	490a      	ldr	r1, [pc, #40]	; (12dec <ticker_update_latency_cancel_op_cb+0x34>)
   12dc2:	480b      	ldr	r0, [pc, #44]	; (12df0 <ticker_update_latency_cancel_op_cb+0x38>)
   12dc4:	f240 2352 	movw	r3, #594	; 0x252
   12dc8:	f005 fbce 	bl	18568 <printk>
   12dcc:	4040      	eors	r0, r0
   12dce:	f380 8811 	msr	BASEPRI, r0
   12dd2:	f04f 0003 	mov.w	r0, #3
   12dd6:	df02      	svc	2

	conn->slave.latency_cancel = 0U;
   12dd8:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   12ddc:	f36f 0382 	bfc	r3, #2, #1
   12de0:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
}
   12de4:	bd10      	pop	{r4, pc}
   12de6:	bf00      	nop
   12de8:	0002205b 	.word	0x0002205b
   12dec:	0002209c 	.word	0x0002209c
   12df0:	0001f734 	.word	0x0001f734

00012df4 <ticker_op_cb>:
{
   12df4:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   12df6:	b160      	cbz	r0, 12e12 <ticker_op_cb+0x1e>
   12df8:	4a06      	ldr	r2, [pc, #24]	; (12e14 <ticker_op_cb+0x20>)
   12dfa:	4907      	ldr	r1, [pc, #28]	; (12e18 <ticker_op_cb+0x24>)
   12dfc:	4807      	ldr	r0, [pc, #28]	; (12e1c <ticker_op_cb+0x28>)
   12dfe:	f240 234a 	movw	r3, #586	; 0x24a
   12e02:	f005 fbb1 	bl	18568 <printk>
   12e06:	4040      	eors	r0, r0
   12e08:	f380 8811 	msr	BASEPRI, r0
   12e0c:	f04f 0003 	mov.w	r0, #3
   12e10:	df02      	svc	2
}
   12e12:	bd08      	pop	{r3, pc}
   12e14:	0002205b 	.word	0x0002205b
   12e18:	000220a3 	.word	0x000220a3
   12e1c:	0001f734 	.word	0x0001f734

00012e20 <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   12e20:	2801      	cmp	r0, #1
{
   12e22:	b510      	push	{r4, lr}
   12e24:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   12e26:	d110      	bne.n	12e4a <ticker_op_stop_adv_cb+0x2a>
   12e28:	f7fe f83e 	bl	10ea8 <ull_disable_mark_get>
   12e2c:	4284      	cmp	r4, r0
   12e2e:	d00c      	beq.n	12e4a <ticker_op_stop_adv_cb+0x2a>
   12e30:	4a06      	ldr	r2, [pc, #24]	; (12e4c <ticker_op_stop_adv_cb+0x2c>)
   12e32:	4907      	ldr	r1, [pc, #28]	; (12e50 <ticker_op_stop_adv_cb+0x30>)
   12e34:	4807      	ldr	r0, [pc, #28]	; (12e54 <ticker_op_stop_adv_cb+0x34>)
   12e36:	f240 2342 	movw	r3, #578	; 0x242
   12e3a:	f005 fb95 	bl	18568 <printk>
   12e3e:	4040      	eors	r0, r0
   12e40:	f380 8811 	msr	BASEPRI, r0
   12e44:	f04f 0003 	mov.w	r0, #3
   12e48:	df02      	svc	2
}
   12e4a:	bd10      	pop	{r4, pc}
   12e4c:	0002205b 	.word	0x0002205b
   12e50:	000220af 	.word	0x000220af
   12e54:	0001f734 	.word	0x0001f734

00012e58 <ull_slave_ticker_cb>:
{
   12e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12e5c:	9c08      	ldr	r4, [sp, #32]
   12e5e:	4689      	mov	r9, r1
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   12e60:	8d21      	ldrh	r1, [r4, #40]	; 0x28
{
   12e62:	461f      	mov	r7, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   12e64:	f64f 73ff 	movw	r3, #65535	; 0xffff
   12e68:	4299      	cmp	r1, r3
{
   12e6a:	4606      	mov	r6, r0
   12e6c:	4690      	mov	r8, r2
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   12e6e:	d03e      	beq.n	12eee <ull_slave_ticker_cb+0x96>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   12e70:	4601      	mov	r1, r0
   12e72:	4620      	mov	r0, r4
   12e74:	f7ed fd74 	bl	960 <ull_conn_llcp>
		if (ret) {
   12e78:	2800      	cmp	r0, #0
   12e7a:	d138      	bne.n	12eee <ull_slave_ticker_cb+0x96>
	return ++hdr->ref;
   12e7c:	7825      	ldrb	r5, [r4, #0]
   12e7e:	3501      	adds	r5, #1
   12e80:	b2ed      	uxtb	r5, r5
   12e82:	7025      	strb	r5, [r4, #0]
	LL_ASSERT(ref);
   12e84:	b965      	cbnz	r5, 12ea0 <ull_slave_ticker_cb+0x48>
   12e86:	4a1b      	ldr	r2, [pc, #108]	; (12ef4 <ull_slave_ticker_cb+0x9c>)
   12e88:	491b      	ldr	r1, [pc, #108]	; (12ef8 <ull_slave_ticker_cb+0xa0>)
   12e8a:	481c      	ldr	r0, [pc, #112]	; (12efc <ull_slave_ticker_cb+0xa4>)
   12e8c:	f240 13f9 	movw	r3, #505	; 0x1f9
   12e90:	f005 fb6a 	bl	18568 <printk>
   12e94:	4040      	eors	r0, r0
   12e96:	f380 8811 	msr	BASEPRI, r0
   12e9a:	f04f 0003 	mov.w	r0, #3
   12e9e:	df02      	svc	2
	p.ticks_at_expire = ticks_at_expire;
   12ea0:	4d17      	ldr	r5, [pc, #92]	; (12f00 <ull_slave_ticker_cb+0xa8>)
	p.param = &conn->lll;
   12ea2:	f104 031c 	add.w	r3, r4, #28
   12ea6:	60eb      	str	r3, [r5, #12]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   12ea8:	2200      	movs	r2, #0
	mfy.param = &p;
   12eaa:	4b16      	ldr	r3, [pc, #88]	; (12f04 <ull_slave_ticker_cb+0xac>)
	p.lazy = lazy;
   12eac:	f8a5 8008 	strh.w	r8, [r5, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   12eb0:	4611      	mov	r1, r2
   12eb2:	2001      	movs	r0, #1
	p.remainder = remainder;
   12eb4:	e9c5 6900 	strd	r6, r9, [r5]
	p.force = force;
   12eb8:	72af      	strb	r7, [r5, #10]
	mfy.param = &p;
   12eba:	609d      	str	r5, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   12ebc:	f7fb fb8e 	bl	e5dc <mayfly_enqueue>
	LL_ASSERT(!err);
   12ec0:	b160      	cbz	r0, 12edc <ull_slave_ticker_cb+0x84>
   12ec2:	4a0c      	ldr	r2, [pc, #48]	; (12ef4 <ull_slave_ticker_cb+0x9c>)
   12ec4:	4910      	ldr	r1, [pc, #64]	; (12f08 <ull_slave_ticker_cb+0xb0>)
   12ec6:	480d      	ldr	r0, [pc, #52]	; (12efc <ull_slave_ticker_cb+0xa4>)
   12ec8:	f240 2306 	movw	r3, #518	; 0x206
   12ecc:	f005 fb4c 	bl	18568 <printk>
   12ed0:	4040      	eors	r0, r0
   12ed2:	f380 8811 	msr	BASEPRI, r0
   12ed6:	f04f 0003 	mov.w	r0, #3
   12eda:	df02      	svc	2
	ull_conn_tx_demux(UINT8_MAX);
   12edc:	20ff      	movs	r0, #255	; 0xff
   12ede:	f7ff fc85 	bl	127ec <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   12ee2:	4620      	mov	r0, r4
   12ee4:	21ff      	movs	r1, #255	; 0xff
}
   12ee6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   12eea:	f7ff be2d 	b.w	12b48 <ull_conn_tx_lll_enqueue>
}
   12eee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12ef2:	bf00      	nop
   12ef4:	0002205b 	.word	0x0002205b
   12ef8:	00021db8 	.word	0x00021db8
   12efc:	0001f734 	.word	0x0001f734
   12f00:	200029c8 	.word	0x200029c8
   12f04:	200008bc 	.word	0x200008bc
   12f08:	00021c03 	.word	0x00021c03

00012f0c <ull_slave_latency_cancel>:
{
   12f0c:	b500      	push	{lr}
	if (conn->lll.latency_event && !conn->slave.latency_cancel) {
   12f0e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
{
   12f10:	b089      	sub	sp, #36	; 0x24
	if (conn->lll.latency_event && !conn->slave.latency_cancel) {
   12f12:	b33b      	cbz	r3, 12f64 <ull_slave_latency_cancel+0x58>
   12f14:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
   12f18:	f012 0304 	ands.w	r3, r2, #4
   12f1c:	d122      	bne.n	12f64 <ull_slave_latency_cancel+0x58>
		conn->slave.latency_cancel = 1U;
   12f1e:	f042 0204 	orr.w	r2, r2, #4
   12f22:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
				      (TICKER_ID_CONN_BASE + handle),
   12f26:	1d4a      	adds	r2, r1, #5
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   12f28:	4910      	ldr	r1, [pc, #64]	; (12f6c <ull_slave_latency_cancel+0x60>)
   12f2a:	9006      	str	r0, [sp, #24]
   12f2c:	e9cd 3104 	strd	r3, r1, [sp, #16]
   12f30:	2101      	movs	r1, #1
   12f32:	e9cd 3102 	strd	r3, r1, [sp, #8]
   12f36:	e9cd 3300 	strd	r3, r3, [sp]
   12f3a:	4618      	mov	r0, r3
   12f3c:	b2d2      	uxtb	r2, r2
   12f3e:	2103      	movs	r1, #3
   12f40:	f009 fadf 	bl	1c502 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   12f44:	f030 0302 	bics.w	r3, r0, #2
   12f48:	d00c      	beq.n	12f64 <ull_slave_latency_cancel+0x58>
   12f4a:	4a09      	ldr	r2, [pc, #36]	; (12f70 <ull_slave_latency_cancel+0x64>)
   12f4c:	4909      	ldr	r1, [pc, #36]	; (12f74 <ull_slave_latency_cancel+0x68>)
   12f4e:	480a      	ldr	r0, [pc, #40]	; (12f78 <ull_slave_latency_cancel+0x6c>)
   12f50:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
   12f54:	f005 fb08 	bl	18568 <printk>
   12f58:	4040      	eors	r0, r0
   12f5a:	f380 8811 	msr	BASEPRI, r0
   12f5e:	f04f 0003 	mov.w	r0, #3
   12f62:	df02      	svc	2
}
   12f64:	b009      	add	sp, #36	; 0x24
   12f66:	f85d fb04 	ldr.w	pc, [sp], #4
   12f6a:	bf00      	nop
   12f6c:	00012db9 	.word	0x00012db9
   12f70:	0002205b 	.word	0x0002205b
   12f74:	00021fac 	.word	0x00021fac
   12f78:	0001f734 	.word	0x0001f734

00012f7c <ll_wl_clear>:
{
	return WL_SIZE;
}

uint8_t ll_wl_clear(void)
{
   12f7c:	b508      	push	{r3, lr}
#if defined(CONFIG_BT_BROADCASTER)
	if (ull_adv_filter_pol_get(0)) {
   12f7e:	2000      	movs	r0, #0
   12f80:	f009 fb7a 	bl	1c678 <ull_adv_filter_pol_get>
   12f84:	b108      	cbz	r0, 12f8a <ll_wl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   12f86:	200c      	movs	r0, #12
#endif /* CONFIG_BT_CTLR_PRIVACY */

	wl_anon = 0U;

	return 0;
}
   12f88:	bd08      	pop	{r3, pc}
	if (ull_scan_filter_pol_get(0) & 0x1) {
   12f8a:	f009 fc36 	bl	1c7fa <ull_scan_filter_pol_get>
   12f8e:	f010 0001 	ands.w	r0, r0, #1
   12f92:	d1f8      	bne.n	12f86 <ll_wl_clear+0xa>
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   12f94:	4b02      	ldr	r3, [pc, #8]	; (12fa0 <ll_wl_clear+0x24>)
   12f96:	7018      	strb	r0, [r3, #0]
	filter->addr_type_bitmask = 0;
   12f98:	7058      	strb	r0, [r3, #1]
	wl_anon = 0U;
   12f9a:	4b02      	ldr	r3, [pc, #8]	; (12fa4 <ll_wl_clear+0x28>)
   12f9c:	7018      	strb	r0, [r3, #0]
	return 0;
   12f9e:	e7f3      	b.n	12f88 <ll_wl_clear+0xc>
   12fa0:	20003006 	.word	0x20003006
   12fa4:	20003005 	.word	0x20003005

00012fa8 <ll_wl_add>:
{
   12fa8:	b570      	push	{r4, r5, r6, lr}
   12faa:	4604      	mov	r4, r0
	if (ull_adv_filter_pol_get(0)) {
   12fac:	2000      	movs	r0, #0
   12fae:	f009 fb63 	bl	1c678 <ull_adv_filter_pol_get>
   12fb2:	b108      	cbz	r0, 12fb8 <ll_wl_add+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   12fb4:	200c      	movs	r0, #12
}
   12fb6:	bd70      	pop	{r4, r5, r6, pc}
	if (ull_scan_filter_pol_get(0) & 0x1) {
   12fb8:	f009 fc1f 	bl	1c7fa <ull_scan_filter_pol_get>
   12fbc:	f010 0001 	ands.w	r0, r0, #1
   12fc0:	d1f8      	bne.n	12fb4 <ll_wl_add+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
   12fc2:	7823      	ldrb	r3, [r4, #0]
   12fc4:	2bff      	cmp	r3, #255	; 0xff
   12fc6:	d103      	bne.n	12fd0 <ll_wl_add+0x28>
		wl_anon = 1U;
   12fc8:	4b12      	ldr	r3, [pc, #72]	; (13014 <ll_wl_add+0x6c>)
   12fca:	2201      	movs	r2, #1
   12fcc:	701a      	strb	r2, [r3, #0]
		return 0;
   12fce:	e7f2      	b.n	12fb6 <ll_wl_add+0xe>
	if (filter->enable_bitmask == LLL_FILTER_BITMASK_ALL) {
   12fd0:	4d11      	ldr	r5, [pc, #68]	; (13018 <ll_wl_add+0x70>)
   12fd2:	782a      	ldrb	r2, [r5, #0]
   12fd4:	2aff      	cmp	r2, #255	; 0xff
	return filter_add(&wl_filter, addr->type, addr->a.val);
   12fd6:	f104 0101 	add.w	r1, r4, #1
	if (filter->enable_bitmask == LLL_FILTER_BITMASK_ALL) {
   12fda:	d018      	beq.n	1300e <ll_wl_add+0x66>
	     (filter->enable_bitmask & BIT(index));
   12fdc:	fa22 f400 	lsr.w	r4, r2, r0
	for (index = 0;
   12fe0:	f014 0401 	ands.w	r4, r4, #1
   12fe4:	d111      	bne.n	1300a <ll_wl_add+0x62>
	filter->enable_bitmask |= BIT(index);
   12fe6:	2601      	movs	r6, #1
   12fe8:	4086      	lsls	r6, r0
   12fea:	4332      	orrs	r2, r6
   12fec:	702a      	strb	r2, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   12fee:	f003 0301 	and.w	r3, r3, #1
   12ff2:	786a      	ldrb	r2, [r5, #1]
   12ff4:	4083      	lsls	r3, r0
   12ff6:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   12ff8:	2206      	movs	r2, #6
   12ffa:	fb02 5000 	mla	r0, r2, r0, r5
   12ffe:	3002      	adds	r0, #2
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   13000:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   13002:	f006 fdcf 	bl	19ba4 <memcpy>
	return filter_add(&wl_filter, addr->type, addr->a.val);
   13006:	b2e0      	uxtb	r0, r4
   13008:	e7d5      	b.n	12fb6 <ll_wl_add+0xe>
	     index++) {
   1300a:	3001      	adds	r0, #1
   1300c:	e7e6      	b.n	12fdc <ll_wl_add+0x34>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1300e:	2407      	movs	r4, #7
   13010:	e7f9      	b.n	13006 <ll_wl_add+0x5e>
   13012:	bf00      	nop
   13014:	20003005 	.word	0x20003005
   13018:	20003006 	.word	0x20003006

0001301c <ll_wl_remove>:
{
   1301c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13020:	4682      	mov	sl, r0
	if (ull_adv_filter_pol_get(0)) {
   13022:	2000      	movs	r0, #0
   13024:	f009 fb28 	bl	1c678 <ull_adv_filter_pol_get>
   13028:	b110      	cbz	r0, 13030 <ll_wl_remove+0x14>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1302a:	200c      	movs	r0, #12
}
   1302c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (ull_scan_filter_pol_get(0) & 0x1) {
   13030:	f009 fbe3 	bl	1c7fa <ull_scan_filter_pol_get>
   13034:	f010 0401 	ands.w	r4, r0, #1
   13038:	d1f7      	bne.n	1302a <ll_wl_remove+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
   1303a:	f89a 7000 	ldrb.w	r7, [sl]
   1303e:	2fff      	cmp	r7, #255	; 0xff
   13040:	d103      	bne.n	1304a <ll_wl_remove+0x2e>
		wl_anon = 0U;
   13042:	4b18      	ldr	r3, [pc, #96]	; (130a4 <ll_wl_remove+0x88>)
		return 0;
   13044:	4620      	mov	r0, r4
		wl_anon = 0U;
   13046:	701c      	strb	r4, [r3, #0]
		return 0;
   13048:	e7f0      	b.n	1302c <ll_wl_remove+0x10>
	if (!filter->enable_bitmask) {
   1304a:	4d17      	ldr	r5, [pc, #92]	; (130a8 <ll_wl_remove+0x8c>)
   1304c:	782b      	ldrb	r3, [r5, #0]
	return filter_remove(&wl_filter, addr->type, addr->a.val);
   1304e:	f10a 0a01 	add.w	sl, sl, #1
	if (!filter->enable_bitmask) {
   13052:	b913      	cbnz	r3, 1305a <ll_wl_remove+0x3e>
		return BT_HCI_ERR_INVALID_PARAM;
   13054:	2412      	movs	r4, #18
	return filter_remove(&wl_filter, addr->type, addr->a.val);
   13056:	b2e0      	uxtb	r0, r4
   13058:	e7e8      	b.n	1302c <ll_wl_remove+0x10>
	index = WL_SIZE;
   1305a:	2608      	movs	r6, #8
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
   1305c:	f105 0802 	add.w	r8, r5, #2
   13060:	f04f 0906 	mov.w	r9, #6
	while (index--) {
   13064:	3e01      	subs	r6, #1
   13066:	d3f5      	bcc.n	13054 <ll_wl_remove+0x38>
		if ((filter->enable_bitmask & BIT(index)) &&
   13068:	782b      	ldrb	r3, [r5, #0]
   1306a:	40f3      	lsrs	r3, r6
   1306c:	07da      	lsls	r2, r3, #31
   1306e:	d5f9      	bpl.n	13064 <ll_wl_remove+0x48>
		    (((filter->addr_type_bitmask >> index) & 0x01) ==
   13070:	786b      	ldrb	r3, [r5, #1]
   13072:	4133      	asrs	r3, r6
   13074:	407b      	eors	r3, r7
		if ((filter->enable_bitmask & BIT(index)) &&
   13076:	07db      	lsls	r3, r3, #31
   13078:	d4f4      	bmi.n	13064 <ll_wl_remove+0x48>
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
   1307a:	2206      	movs	r2, #6
   1307c:	4651      	mov	r1, sl
   1307e:	fb09 8006 	mla	r0, r9, r6, r8
   13082:	f006 fd7f 	bl	19b84 <memcmp>
		     (addr_type & 0x01)) &&
   13086:	2800      	cmp	r0, #0
   13088:	d1ec      	bne.n	13064 <ll_wl_remove+0x48>
			filter->enable_bitmask &= ~BIT(index);
   1308a:	2301      	movs	r3, #1
   1308c:	fa03 f606 	lsl.w	r6, r3, r6
   13090:	782b      	ldrb	r3, [r5, #0]
   13092:	ea23 0306 	bic.w	r3, r3, r6
   13096:	702b      	strb	r3, [r5, #0]
			filter->addr_type_bitmask &= ~BIT(index);
   13098:	786b      	ldrb	r3, [r5, #1]
   1309a:	ea23 0606 	bic.w	r6, r3, r6
   1309e:	706e      	strb	r6, [r5, #1]
			return 0;
   130a0:	e7d9      	b.n	13056 <ll_wl_remove+0x3a>
   130a2:	bf00      	nop
   130a4:	20003005 	.word	0x20003005
   130a8:	20003006 	.word	0x20003006

000130ac <ull_filter_reset>:
	wl_anon = 0U;
   130ac:	4a03      	ldr	r2, [pc, #12]	; (130bc <ull_filter_reset+0x10>)
   130ae:	2300      	movs	r3, #0
   130b0:	7013      	strb	r3, [r2, #0]
	filter->enable_bitmask = 0;
   130b2:	4a03      	ldr	r2, [pc, #12]	; (130c0 <ull_filter_reset+0x14>)
   130b4:	7013      	strb	r3, [r2, #0]
	filter->addr_type_bitmask = 0;
   130b6:	7053      	strb	r3, [r2, #1]
}
   130b8:	4770      	bx	lr
   130ba:	bf00      	nop
   130bc:	20003005 	.word	0x20003005
   130c0:	20003006 	.word	0x20003006

000130c4 <ull_filter_lll_get>:
{
   130c4:	b508      	push	{r3, lr}
	LL_ASSERT(whitelist);
   130c6:	b960      	cbnz	r0, 130e2 <ull_filter_lll_get+0x1e>
   130c8:	4a07      	ldr	r2, [pc, #28]	; (130e8 <ull_filter_lll_get+0x24>)
   130ca:	4908      	ldr	r1, [pc, #32]	; (130ec <ull_filter_lll_get+0x28>)
   130cc:	4808      	ldr	r0, [pc, #32]	; (130f0 <ull_filter_lll_get+0x2c>)
   130ce:	f240 23e2 	movw	r3, #738	; 0x2e2
   130d2:	f005 fa49 	bl	18568 <printk>
   130d6:	4040      	eors	r0, r0
   130d8:	f380 8811 	msr	BASEPRI, r0
   130dc:	f04f 0003 	mov.w	r0, #3
   130e0:	df02      	svc	2
}
   130e2:	4804      	ldr	r0, [pc, #16]	; (130f4 <ull_filter_lll_get+0x30>)
   130e4:	bd08      	pop	{r3, pc}
   130e6:	bf00      	nop
   130e8:	00022101 	.word	0x00022101
   130ec:	00022143 	.word	0x00022143
   130f0:	0001f734 	.word	0x0001f734
   130f4:	20003006 	.word	0x20003006

000130f8 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   130f8:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	lll_prof_enter_ull_high();

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   130fa:	4b08      	ldr	r3, [pc, #32]	; (1311c <rtc0_nrf5_isr+0x24>)
   130fc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   13100:	b122      	cbz	r2, 1310c <rtc0_nrf5_isr+0x14>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   13102:	2000      	movs	r0, #0
   13104:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140

		ticker_trigger(0);
   13108:	f7fb ff9a 	bl	f040 <ticker_trigger>
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   1310c:	2001      	movs	r0, #1
   1310e:	f7fb fab5 	bl	e67c <mayfly_run>

	lll_prof_exit_ull_low();
#endif

	DEBUG_TICKER_ISR(0);
}
   13112:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   13116:	2002      	movs	r0, #2
   13118:	f7fb bab0 	b.w	e67c <mayfly_run>
   1311c:	4000b000 	.word	0x4000b000

00013120 <ticker_stop_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   13120:	2801      	cmp	r0, #1
{
   13122:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   13124:	d90c      	bls.n	13140 <ticker_stop_op_cb+0x20>
   13126:	4a07      	ldr	r2, [pc, #28]	; (13144 <ticker_stop_op_cb+0x24>)
   13128:	4907      	ldr	r1, [pc, #28]	; (13148 <ticker_stop_op_cb+0x28>)
   1312a:	4808      	ldr	r0, [pc, #32]	; (1314c <ticker_stop_op_cb+0x2c>)
   1312c:	f240 23eb 	movw	r3, #747	; 0x2eb
   13130:	f005 fa1a 	bl	18568 <printk>
   13134:	4040      	eors	r0, r0
   13136:	f380 8811 	msr	BASEPRI, r0
   1313a:	f04f 0003 	mov.w	r0, #3
   1313e:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   13140:	bd08      	pop	{r3, pc}
   13142:	bf00      	nop
   13144:	00022160 	.word	0x00022160
   13148:	000221a6 	.word	0x000221a6
   1314c:	0001f734 	.word	0x0001f734

00013150 <ticker_start_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   13150:	2801      	cmp	r0, #1
{
   13152:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   13154:	d90c      	bls.n	13170 <ticker_start_op_cb+0x20>
   13156:	4a07      	ldr	r2, [pc, #28]	; (13174 <ticker_start_op_cb+0x24>)
   13158:	4907      	ldr	r1, [pc, #28]	; (13178 <ticker_start_op_cb+0x28>)
   1315a:	4808      	ldr	r0, [pc, #32]	; (1317c <ticker_start_op_cb+0x2c>)
   1315c:	f240 23f6 	movw	r3, #758	; 0x2f6
   13160:	f005 fa02 	bl	18568 <printk>
   13164:	4040      	eors	r0, r0
   13166:	f380 8811 	msr	BASEPRI, r0
   1316a:	f04f 0003 	mov.w	r0, #3
   1316e:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   13170:	bd08      	pop	{r3, pc}
   13172:	bf00      	nop
   13174:	00022160 	.word	0x00022160
   13178:	000221a6 	.word	0x000221a6
   1317c:	0001f734 	.word	0x0001f734

00013180 <preempt_ticker_cb>:
	return ret;
}

static void preempt_ticker_cb(uint32_t ticks_at_expire, uint32_t remainder,
			       uint16_t lazy, uint8_t force, void *param)
{
   13180:	b508      	push	{r3, lr}
	static memq_link_t link;
	static struct mayfly mfy = {0, 0, &link, NULL, preempt};
	uint32_t ret;

	mfy.param = param;
   13182:	4b0b      	ldr	r3, [pc, #44]	; (131b0 <preempt_ticker_cb+0x30>)
   13184:	9a02      	ldr	r2, [sp, #8]
   13186:	609a      	str	r2, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   13188:	2200      	movs	r2, #0
   1318a:	4611      	mov	r1, r2
   1318c:	2001      	movs	r0, #1
   1318e:	f7fb fa25 	bl	e5dc <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   13192:	b160      	cbz	r0, 131ae <preempt_ticker_cb+0x2e>
   13194:	4a07      	ldr	r2, [pc, #28]	; (131b4 <preempt_ticker_cb+0x34>)
   13196:	4908      	ldr	r1, [pc, #32]	; (131b8 <preempt_ticker_cb+0x38>)
   13198:	4808      	ldr	r0, [pc, #32]	; (131bc <preempt_ticker_cb+0x3c>)
   1319a:	f240 3325 	movw	r3, #805	; 0x325
   1319e:	f005 f9e3 	bl	18568 <printk>
   131a2:	4040      	eors	r0, r0
   131a4:	f380 8811 	msr	BASEPRI, r0
   131a8:	f04f 0003 	mov.w	r0, #3
   131ac:	df02      	svc	2
}
   131ae:	bd08      	pop	{r3, pc}
   131b0:	200008cc 	.word	0x200008cc
   131b4:	00022160 	.word	0x00022160
   131b8:	00021cbb 	.word	0x00021cbb
   131bc:	0001f734 	.word	0x0001f734

000131c0 <preempt_ticker_start.constprop.0>:
static uint32_t preempt_ticker_start(struct lll_event *event,
   131c0:	b530      	push	{r4, r5, lr}
	ull = HDR_LLL2ULL(p->param);
   131c2:	68c3      	ldr	r3, [r0, #12]
   131c4:	6819      	ldr	r1, [r3, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   131c6:	4b0e      	ldr	r3, [pc, #56]	; (13200 <preempt_ticker_start.constprop.0+0x40>)
static uint32_t preempt_ticker_start(struct lll_event *event,
   131c8:	b08b      	sub	sp, #44	; 0x2c
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   131ca:	2200      	movs	r2, #0
   131cc:	e9cd 0306 	strd	r0, r3, [sp, #24]
   131d0:	e9cd 2203 	strd	r2, r2, [sp, #12]
   131d4:	e9cd 2201 	strd	r2, r2, [sp, #4]
   131d8:	4b0a      	ldr	r3, [pc, #40]	; (13204 <preempt_ticker_start.constprop.0+0x44>)
   131da:	9008      	str	r0, [sp, #32]
   131dc:	9305      	str	r3, [sp, #20]
	preempt_to = MAX(ull->ticks_active_to_start,
   131de:	e9d1 4501 	ldrd	r4, r5, [r1, #4]
   131e2:	68cb      	ldr	r3, [r1, #12]
   131e4:	42a5      	cmp	r5, r4
   131e6:	bf2c      	ite	cs
   131e8:	ebc3 0305 	rsbcs	r3, r3, r5
   131ec:	ebc3 0304 	rsbcc	r3, r3, r4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   131f0:	9300      	str	r3, [sp, #0]
   131f2:	6803      	ldr	r3, [r0, #0]
   131f4:	4611      	mov	r1, r2
   131f6:	4610      	mov	r0, r2
   131f8:	f009 f968 	bl	1c4cc <ticker_start>
}
   131fc:	b00b      	add	sp, #44	; 0x2c
   131fe:	bd30      	pop	{r4, r5, pc}
   13200:	00013151 	.word	0x00013151
   13204:	00013181 	.word	0x00013181

00013208 <preempt>:

static void preempt(void *param)
{
   13208:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	uint8_t idx;
	int err;

	/* No event to abort */
	if (!event.curr.abort_cb || !event.curr.param) {
   1320a:	4c39      	ldr	r4, [pc, #228]	; (132f0 <preempt+0xe8>)
   1320c:	68a3      	ldr	r3, [r4, #8]
{
   1320e:	b089      	sub	sp, #36	; 0x24
   13210:	4605      	mov	r5, r0
	if (!event.curr.abort_cb || !event.curr.param) {
   13212:	2b00      	cmp	r3, #0
   13214:	d030      	beq.n	13278 <preempt+0x70>
   13216:	6823      	ldr	r3, [r4, #0]
   13218:	b373      	cbz	r3, 13278 <preempt+0x70>
		return;
	}

	/* Check if any prepare in pipeline */
	idx = UINT8_MAX;
   1321a:	23ff      	movs	r3, #255	; 0xff
   1321c:	f88d 300a 	strb.w	r3, [sp, #10]
		return;
	}

	/* Find a prepare that is ready and not a resume */
	while (next && (next->is_aborted || next->is_resume)) {
		next = ull_prepare_dequeue_iter(&idx);
   13220:	f10d 000a 	add.w	r0, sp, #10
   13224:	f7fd ff62 	bl	110ec <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   13228:	b330      	cbz	r0, 13278 <preempt+0x70>
   1322a:	7f03      	ldrb	r3, [r0, #28]
   1322c:	f013 0703 	ands.w	r7, r3, #3
   13230:	d1f6      	bne.n	13220 <preempt+0x18>
	if (!next) {
		return;
	}

	/* Preemptor not in pipeline */
	if (next != param) {
   13232:	4285      	cmp	r5, r0
   13234:	d011      	beq.n	1325a <preempt+0x52>
		uint32_t ret;

		/* Start the preempt timeout */
		ret = preempt_ticker_start(next, ticker_start_op_cb);
   13236:	f7ff ffc3 	bl	131c0 <preempt_ticker_start.constprop.0>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1323a:	2802      	cmp	r0, #2
   1323c:	d91c      	bls.n	13278 <preempt+0x70>
   1323e:	4a2d      	ldr	r2, [pc, #180]	; (132f4 <preempt+0xec>)
   13240:	492d      	ldr	r1, [pc, #180]	; (132f8 <preempt+0xf0>)
   13242:	f240 334b 	movw	r3, #843	; 0x34b

		/* Enqueue as resume event */
		iter = resume_enqueue(resume_cb);
		LL_ASSERT(iter);
	} else {
		LL_ASSERT(err == -ECANCELED);
   13246:	482d      	ldr	r0, [pc, #180]	; (132fc <preempt+0xf4>)
   13248:	f005 f98e 	bl	18568 <printk>
   1324c:	4040      	eors	r0, r0
   1324e:	f380 8811 	msr	BASEPRI, r0
   13252:	f04f 0003 	mov.w	r0, #3
   13256:	df02      	svc	2
   13258:	e00e      	b.n	13278 <preempt+0x70>
	err = event.curr.is_abort_cb(next->prepare_param.param,
   1325a:	6863      	ldr	r3, [r4, #4]
   1325c:	6821      	ldr	r1, [r4, #0]
   1325e:	68e8      	ldr	r0, [r5, #12]
   13260:	aa03      	add	r2, sp, #12
   13262:	4798      	blx	r3
	if (!err) {
   13264:	4606      	mov	r6, r0
   13266:	b948      	cbnz	r0, 1327c <preempt+0x74>
		next->is_aborted = 1;
   13268:	7f2b      	ldrb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1326a:	68e9      	ldr	r1, [r5, #12]
		next->is_aborted = 1;
   1326c:	f043 0302 	orr.w	r3, r3, #2
   13270:	772b      	strb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   13272:	4628      	mov	r0, r5
   13274:	69ab      	ldr	r3, [r5, #24]
   13276:	4798      	blx	r3
	}
}
   13278:	b009      	add	sp, #36	; 0x24
   1327a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	event.curr.abort_cb(NULL, event.curr.param);
   1327c:	68a3      	ldr	r3, [r4, #8]
   1327e:	6821      	ldr	r1, [r4, #0]
   13280:	4638      	mov	r0, r7
   13282:	4798      	blx	r3
	if (err == -EAGAIN) {
   13284:	f116 0f0b 	cmn.w	r6, #11
   13288:	d12b      	bne.n	132e2 <preempt+0xda>
		iter_idx = UINT8_MAX;
   1328a:	25ff      	movs	r5, #255	; 0xff
   1328c:	f88d 500b 	strb.w	r5, [sp, #11]
			iter = ull_prepare_dequeue_iter(&iter_idx);
   13290:	f10d 000b 	add.w	r0, sp, #11
   13294:	f7fd ff2a 	bl	110ec <ull_prepare_dequeue_iter>
		while (iter) {
   13298:	b9a0      	cbnz	r0, 132c4 <preempt+0xbc>
	prepare_param.param = event.curr.param;
   1329a:	6823      	ldr	r3, [r4, #0]
   1329c:	9307      	str	r3, [sp, #28]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1329e:	2301      	movs	r3, #1
	struct lll_prepare_param prepare_param = {0};
   132a0:	e9cd 0004 	strd	r0, r0, [sp, #16]
   132a4:	9006      	str	r0, [sp, #24]
	event.curr.param = NULL;
   132a6:	6020      	str	r0, [r4, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   132a8:	9300      	str	r3, [sp, #0]
   132aa:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
   132ae:	9b03      	ldr	r3, [sp, #12]
   132b0:	aa04      	add	r2, sp, #16
   132b2:	f7fd fedf 	bl	11074 <ull_prepare_enqueue>
		LL_ASSERT(iter);
   132b6:	2800      	cmp	r0, #0
   132b8:	d1de      	bne.n	13278 <preempt+0x70>
   132ba:	4a0e      	ldr	r2, [pc, #56]	; (132f4 <preempt+0xec>)
   132bc:	4910      	ldr	r1, [pc, #64]	; (13300 <preempt+0xf8>)
   132be:	f240 337e 	movw	r3, #894	; 0x37e
   132c2:	e7c0      	b.n	13246 <preempt+0x3e>
			if (!iter->is_aborted &&
   132c4:	7f03      	ldrb	r3, [r0, #28]
   132c6:	079a      	lsls	r2, r3, #30
   132c8:	d4e2      	bmi.n	13290 <preempt+0x88>
			    event.curr.param == iter->prepare_param.param) {
   132ca:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   132cc:	6821      	ldr	r1, [r4, #0]
   132ce:	4291      	cmp	r1, r2
   132d0:	d1de      	bne.n	13290 <preempt+0x88>
				iter->is_aborted = 1;
   132d2:	f043 0302 	orr.w	r3, r3, #2
   132d6:	7703      	strb	r3, [r0, #28]
				iter->abort_cb(&iter->prepare_param,
   132d8:	6983      	ldr	r3, [r0, #24]
   132da:	4798      	blx	r3
				idx = UINT8_MAX;
   132dc:	f88d 500a 	strb.w	r5, [sp, #10]
   132e0:	e7d6      	b.n	13290 <preempt+0x88>
		LL_ASSERT(err == -ECANCELED);
   132e2:	368c      	adds	r6, #140	; 0x8c
   132e4:	d0c8      	beq.n	13278 <preempt+0x70>
   132e6:	4a03      	ldr	r2, [pc, #12]	; (132f4 <preempt+0xec>)
   132e8:	4906      	ldr	r1, [pc, #24]	; (13304 <preempt+0xfc>)
   132ea:	f44f 7360 	mov.w	r3, #896	; 0x380
   132ee:	e7aa      	b.n	13246 <preempt+0x3e>
   132f0:	200029dc 	.word	0x200029dc
   132f4:	00022160 	.word	0x00022160
   132f8:	000221c5 	.word	0x000221c5
   132fc:	0001f734 	.word	0x0001f734
   13300:	000221ec 	.word	0x000221ec
   13304:	000221f1 	.word	0x000221f1

00013308 <lll_init>:
{
   13308:	b510      	push	{r4, lr}
   1330a:	4816      	ldr	r0, [pc, #88]	; (13364 <lll_init+0x5c>)
   1330c:	f003 fcf8 	bl	16d00 <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   13310:	4b15      	ldr	r3, [pc, #84]	; (13368 <lll_init+0x60>)
   13312:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   13314:	b310      	cbz	r0, 1335c <lll_init+0x54>
	event.curr.abort_cb = NULL;
   13316:	4b15      	ldr	r3, [pc, #84]	; (1336c <lll_init+0x64>)
   13318:	2400      	movs	r4, #0
   1331a:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   1331c:	f000 fa30 	bl	13780 <lll_clock_init>
	if (err < 0) {
   13320:	2800      	cmp	r0, #0
   13322:	db1a      	blt.n	1335a <lll_init+0x52>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   13324:	4622      	mov	r2, r4
   13326:	4621      	mov	r1, r4
   13328:	2001      	movs	r0, #1
   1332a:	f7f0 f963 	bl	35f4 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   1332e:	4622      	mov	r2, r4
   13330:	2101      	movs	r1, #1
   13332:	200b      	movs	r0, #11
   13334:	f7f0 f95e 	bl	35f4 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   13338:	4622      	mov	r2, r4
   1333a:	4621      	mov	r1, r4
   1333c:	2018      	movs	r0, #24
   1333e:	f7f0 f959 	bl	35f4 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   13342:	2001      	movs	r0, #1
   13344:	f7f0 f924 	bl	3590 <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   13348:	200b      	movs	r0, #11
   1334a:	f7f0 f921 	bl	3590 <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   1334e:	2018      	movs	r0, #24
   13350:	f7f0 f91e 	bl	3590 <arch_irq_enable>
	radio_setup();
   13354:	f009 fe57 	bl	1d006 <radio_setup>
	return 0;
   13358:	4620      	mov	r0, r4
}
   1335a:	bd10      	pop	{r4, pc}
		return -ENODEV;
   1335c:	f06f 0012 	mvn.w	r0, #18
   13360:	e7fb      	b.n	1335a <lll_init+0x52>
   13362:	bf00      	nop
   13364:	000221fd 	.word	0x000221fd
   13368:	200029d8 	.word	0x200029d8
   1336c:	200029dc 	.word	0x200029dc

00013370 <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   13370:	4a05      	ldr	r2, [pc, #20]	; (13388 <lll_csrand_get+0x18>)
{
   13372:	b410      	push	{r4}
   13374:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   13376:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   13378:	6882      	ldr	r2, [r0, #8]
   1337a:	6814      	ldr	r4, [r2, #0]
   1337c:	b28a      	uxth	r2, r1
   1337e:	4619      	mov	r1, r3
   13380:	4623      	mov	r3, r4
}
   13382:	bc10      	pop	{r4}
   13384:	4718      	bx	r3
   13386:	bf00      	nop
   13388:	200029d8 	.word	0x200029d8

0001338c <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   1338c:	4b08      	ldr	r3, [pc, #32]	; (133b0 <lll_csrand_isr_get+0x24>)
{
   1338e:	b430      	push	{r4, r5}
   13390:	4604      	mov	r4, r0
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   13392:	6818      	ldr	r0, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   13394:	6883      	ldr	r3, [r0, #8]
   13396:	685d      	ldr	r5, [r3, #4]
   13398:	b28a      	uxth	r2, r1
   1339a:	b125      	cbz	r5, 133a6 <lll_csrand_isr_get+0x1a>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1339c:	4621      	mov	r1, r4
   1339e:	46ac      	mov	ip, r5
   133a0:	2300      	movs	r3, #0
}
   133a2:	bc30      	pop	{r4, r5}
   133a4:	4760      	bx	ip
   133a6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   133aa:	bc30      	pop	{r4, r5}
   133ac:	4770      	bx	lr
   133ae:	bf00      	nop
   133b0:	200029d8 	.word	0x200029d8

000133b4 <lll_disable>:
{
   133b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   133b6:	4b19      	ldr	r3, [pc, #100]	; (1341c <lll_disable+0x68>)
	if (!param || (param == event.curr.param)) {
   133b8:	4604      	mov	r4, r0
   133ba:	b110      	cbz	r0, 133c2 <lll_disable+0xe>
   133bc:	681a      	ldr	r2, [r3, #0]
   133be:	4282      	cmp	r2, r0
   133c0:	d105      	bne.n	133ce <lll_disable+0x1a>
		if (event.curr.abort_cb && event.curr.param) {
   133c2:	689a      	ldr	r2, [r3, #8]
   133c4:	b16a      	cbz	r2, 133e2 <lll_disable+0x2e>
   133c6:	6819      	ldr	r1, [r3, #0]
   133c8:	b159      	cbz	r1, 133e2 <lll_disable+0x2e>
			event.curr.abort_cb(NULL, event.curr.param);
   133ca:	2000      	movs	r0, #0
   133cc:	4790      	blx	r2
		idx = UINT8_MAX;
   133ce:	25ff      	movs	r5, #255	; 0xff
				idx = UINT8_MAX;
   133d0:	f88d 5007 	strb.w	r5, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
   133d4:	f10d 0007 	add.w	r0, sp, #7
   133d8:	f7fd fe88 	bl	110ec <ull_prepare_dequeue_iter>
		while (next) {
   133dc:	b980      	cbnz	r0, 13400 <lll_disable+0x4c>
}
   133de:	b003      	add	sp, #12
   133e0:	bd30      	pop	{r4, r5, pc}
			LL_ASSERT(!param);
   133e2:	2c00      	cmp	r4, #0
   133e4:	d0f3      	beq.n	133ce <lll_disable+0x1a>
   133e6:	4a0e      	ldr	r2, [pc, #56]	; (13420 <lll_disable+0x6c>)
   133e8:	490e      	ldr	r1, [pc, #56]	; (13424 <lll_disable+0x70>)
   133ea:	480f      	ldr	r0, [pc, #60]	; (13428 <lll_disable+0x74>)
   133ec:	23fd      	movs	r3, #253	; 0xfd
   133ee:	f005 f8bb 	bl	18568 <printk>
   133f2:	4040      	eors	r0, r0
   133f4:	f380 8811 	msr	BASEPRI, r0
   133f8:	f04f 0003 	mov.w	r0, #3
   133fc:	df02      	svc	2
   133fe:	e7e6      	b.n	133ce <lll_disable+0x1a>
			if (!next->is_aborted &&
   13400:	7f03      	ldrb	r3, [r0, #28]
   13402:	079b      	lsls	r3, r3, #30
   13404:	d4e6      	bmi.n	133d4 <lll_disable+0x20>
   13406:	68c1      	ldr	r1, [r0, #12]
   13408:	b10c      	cbz	r4, 1340e <lll_disable+0x5a>
			    (!param || (param == next->prepare_param.param))) {
   1340a:	428c      	cmp	r4, r1
   1340c:	d1e2      	bne.n	133d4 <lll_disable+0x20>
				next->is_aborted = 1;
   1340e:	7f03      	ldrb	r3, [r0, #28]
   13410:	f043 0302 	orr.w	r3, r3, #2
   13414:	7703      	strb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   13416:	6983      	ldr	r3, [r0, #24]
   13418:	4798      	blx	r3
   1341a:	e7d9      	b.n	133d0 <lll_disable+0x1c>
   1341c:	200029dc 	.word	0x200029dc
   13420:	00022160 	.word	0x00022160
   13424:	00022201 	.word	0x00022201
   13428:	0001f734 	.word	0x0001f734

0001342c <lll_done>:
{
   1342c:	b538      	push	{r3, r4, r5, lr}
   1342e:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   13430:	f7fd fe4e 	bl	110d0 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   13434:	b17c      	cbz	r4, 13456 <lll_done+0x2a>
   13436:	b960      	cbnz	r0, 13452 <lll_done+0x26>
   13438:	4a1d      	ldr	r2, [pc, #116]	; (134b0 <lll_done+0x84>)
   1343a:	491e      	ldr	r1, [pc, #120]	; (134b4 <lll_done+0x88>)
   1343c:	481e      	ldr	r0, [pc, #120]	; (134b8 <lll_done+0x8c>)
   1343e:	f240 1337 	movw	r3, #311	; 0x137
   13442:	f005 f891 	bl	18568 <printk>
   13446:	4040      	eors	r0, r0
   13448:	f380 8811 	msr	BASEPRI, r0
   1344c:	f04f 0003 	mov.w	r0, #3
   13450:	df02      	svc	2
		ull = HDR_LLL2ULL(param);
   13452:	6825      	ldr	r5, [r4, #0]
   13454:	e015      	b.n	13482 <lll_done+0x56>
		LL_ASSERT(event.curr.abort_cb);
   13456:	4c19      	ldr	r4, [pc, #100]	; (134bc <lll_done+0x90>)
   13458:	68a3      	ldr	r3, [r4, #8]
   1345a:	b963      	cbnz	r3, 13476 <lll_done+0x4a>
   1345c:	4a14      	ldr	r2, [pc, #80]	; (134b0 <lll_done+0x84>)
   1345e:	4918      	ldr	r1, [pc, #96]	; (134c0 <lll_done+0x94>)
   13460:	4815      	ldr	r0, [pc, #84]	; (134b8 <lll_done+0x8c>)
   13462:	f240 133d 	movw	r3, #317	; 0x13d
   13466:	f005 f87f 	bl	18568 <printk>
   1346a:	4040      	eors	r0, r0
   1346c:	f380 8811 	msr	BASEPRI, r0
   13470:	f04f 0003 	mov.w	r0, #3
   13474:	df02      	svc	2
		param = event.curr.param;
   13476:	6825      	ldr	r5, [r4, #0]
		event.curr.abort_cb = NULL;
   13478:	2300      	movs	r3, #0
   1347a:	60a3      	str	r3, [r4, #8]
		event.curr.param = NULL;
   1347c:	6023      	str	r3, [r4, #0]
		if (param) {
   1347e:	b105      	cbz	r5, 13482 <lll_done+0x56>
			ull = HDR_LLL2ULL(param);
   13480:	682d      	ldr	r5, [r5, #0]
	ull_prepare_dequeue(TICKER_USER_ID_LLL);
   13482:	2000      	movs	r0, #0
   13484:	f7fd fe50 	bl	11128 <ull_prepare_dequeue>
	evdone = ull_event_done(ull);
   13488:	4628      	mov	r0, r5
   1348a:	f7fd fea5 	bl	111d8 <ull_event_done>
	LL_ASSERT(evdone);
   1348e:	b960      	cbnz	r0, 134aa <lll_done+0x7e>
   13490:	4a07      	ldr	r2, [pc, #28]	; (134b0 <lll_done+0x84>)
   13492:	490c      	ldr	r1, [pc, #48]	; (134c4 <lll_done+0x98>)
   13494:	4808      	ldr	r0, [pc, #32]	; (134b8 <lll_done+0x8c>)
   13496:	f240 1361 	movw	r3, #353	; 0x161
   1349a:	f005 f865 	bl	18568 <printk>
   1349e:	4040      	eors	r0, r0
   134a0:	f380 8811 	msr	BASEPRI, r0
   134a4:	f04f 0003 	mov.w	r0, #3
   134a8:	df02      	svc	2
}
   134aa:	2000      	movs	r0, #0
   134ac:	bd38      	pop	{r3, r4, r5, pc}
   134ae:	bf00      	nop
   134b0:	00022160 	.word	0x00022160
   134b4:	00022208 	.word	0x00022208
   134b8:	0001f734 	.word	0x0001f734
   134bc:	200029dc 	.word	0x200029dc
   134c0:	00022217 	.word	0x00022217
   134c4:	0002222b 	.word	0x0002222b

000134c8 <lll_is_done>:
	return !event.curr.abort_cb;
   134c8:	4b02      	ldr	r3, [pc, #8]	; (134d4 <lll_is_done+0xc>)
   134ca:	6898      	ldr	r0, [r3, #8]
}
   134cc:	fab0 f080 	clz	r0, r0
   134d0:	0940      	lsrs	r0, r0, #5
   134d2:	4770      	bx	lr
   134d4:	200029dc 	.word	0x200029dc

000134d8 <lll_chan_set>:
	switch (chan) {
   134d8:	2826      	cmp	r0, #38	; 0x26
{
   134da:	b510      	push	{r4, lr}
   134dc:	4604      	mov	r4, r0
	switch (chan) {
   134de:	d00b      	beq.n	134f8 <lll_chan_set+0x20>
   134e0:	2827      	cmp	r0, #39	; 0x27
   134e2:	d00b      	beq.n	134fc <lll_chan_set+0x24>
   134e4:	2825      	cmp	r0, #37	; 0x25
   134e6:	d10b      	bne.n	13500 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   134e8:	2002      	movs	r0, #2
		radio_freq_chan_set(26);
   134ea:	f001 fcf9 	bl	14ee0 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   134ee:	4620      	mov	r0, r4
}
   134f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   134f4:	f001 bcfa 	b.w	14eec <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   134f8:	201a      	movs	r0, #26
   134fa:	e7f6      	b.n	134ea <lll_chan_set+0x12>
		radio_freq_chan_set(80);
   134fc:	2050      	movs	r0, #80	; 0x50
   134fe:	e7f4      	b.n	134ea <lll_chan_set+0x12>
		if (chan < 11) {
   13500:	280a      	cmp	r0, #10
   13502:	d802      	bhi.n	1350a <lll_chan_set+0x32>
			radio_freq_chan_set(4 + (chan * 2U));
   13504:	3002      	adds	r0, #2
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   13506:	0040      	lsls	r0, r0, #1
   13508:	e7ef      	b.n	134ea <lll_chan_set+0x12>
		} else if (chan < 40) {
   1350a:	2827      	cmp	r0, #39	; 0x27
   1350c:	d801      	bhi.n	13512 <lll_chan_set+0x3a>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   1350e:	3003      	adds	r0, #3
   13510:	e7f9      	b.n	13506 <lll_chan_set+0x2e>
			LL_ASSERT(0);
   13512:	4a07      	ldr	r2, [pc, #28]	; (13530 <lll_chan_set+0x58>)
   13514:	4907      	ldr	r1, [pc, #28]	; (13534 <lll_chan_set+0x5c>)
   13516:	4808      	ldr	r0, [pc, #32]	; (13538 <lll_chan_set+0x60>)
   13518:	f240 13cd 	movw	r3, #461	; 0x1cd
   1351c:	f005 f824 	bl	18568 <printk>
   13520:	4040      	eors	r0, r0
   13522:	f380 8811 	msr	BASEPRI, r0
   13526:	f04f 0003 	mov.w	r0, #3
   1352a:	df02      	svc	2
   1352c:	e7df      	b.n	134ee <lll_chan_set+0x16>
   1352e:	bf00      	nop
   13530:	00022160 	.word	0x00022160
   13534:	00020b9a 	.word	0x00020b9a
   13538:	0001f734 	.word	0x0001f734

0001353c <lll_isr_cleanup>:
{
   1353c:	b508      	push	{r3, lr}
   1353e:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   13540:	480f      	ldr	r0, [pc, #60]	; (13580 <lll_isr_cleanup+0x44>)
   13542:	f001 fc73 	bl	14e2c <radio_isr_set>
	if (!radio_is_idle()) {
   13546:	f001 fd71 	bl	1502c <radio_is_idle>
   1354a:	b908      	cbnz	r0, 13550 <lll_isr_cleanup+0x14>
		radio_disable();
   1354c:	f001 fd3c 	bl	14fc8 <radio_disable>
	radio_tmr_stop();
   13550:	f001 fed2 	bl	152f8 <radio_tmr_stop>
	err = lll_hfclock_off();
   13554:	f000 f956 	bl	13804 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   13558:	2800      	cmp	r0, #0
   1355a:	da0c      	bge.n	13576 <lll_isr_cleanup+0x3a>
   1355c:	4a09      	ldr	r2, [pc, #36]	; (13584 <lll_isr_cleanup+0x48>)
   1355e:	490a      	ldr	r1, [pc, #40]	; (13588 <lll_isr_cleanup+0x4c>)
   13560:	480a      	ldr	r0, [pc, #40]	; (1358c <lll_isr_cleanup+0x50>)
   13562:	f44f 730c 	mov.w	r3, #560	; 0x230
   13566:	f004 ffff 	bl	18568 <printk>
   1356a:	4040      	eors	r0, r0
   1356c:	f380 8811 	msr	BASEPRI, r0
   13570:	f04f 0003 	mov.w	r0, #3
   13574:	df02      	svc	2
}
   13576:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1357a:	2000      	movs	r0, #0
   1357c:	f7ff bf56 	b.w	1342c <lll_done>
   13580:	0001cb0b 	.word	0x0001cb0b
   13584:	00022160 	.word	0x00022160
   13588:	00022232 	.word	0x00022232
   1358c:	0001f734 	.word	0x0001f734

00013590 <lll_isr_early_abort>:
{
   13590:	b508      	push	{r3, lr}
   13592:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   13594:	480e      	ldr	r0, [pc, #56]	; (135d0 <lll_isr_early_abort+0x40>)
   13596:	f001 fc49 	bl	14e2c <radio_isr_set>
	if (!radio_is_idle()) {
   1359a:	f001 fd47 	bl	1502c <radio_is_idle>
   1359e:	b908      	cbnz	r0, 135a4 <lll_isr_early_abort+0x14>
		radio_disable();
   135a0:	f001 fd12 	bl	14fc8 <radio_disable>
	err = lll_hfclock_off();
   135a4:	f000 f92e 	bl	13804 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   135a8:	2800      	cmp	r0, #0
   135aa:	da0c      	bge.n	135c6 <lll_isr_early_abort+0x36>
   135ac:	4a09      	ldr	r2, [pc, #36]	; (135d4 <lll_isr_early_abort+0x44>)
   135ae:	490a      	ldr	r1, [pc, #40]	; (135d8 <lll_isr_early_abort+0x48>)
   135b0:	480a      	ldr	r0, [pc, #40]	; (135dc <lll_isr_early_abort+0x4c>)
   135b2:	f240 233f 	movw	r3, #575	; 0x23f
   135b6:	f004 ffd7 	bl	18568 <printk>
   135ba:	4040      	eors	r0, r0
   135bc:	f380 8811 	msr	BASEPRI, r0
   135c0:	f04f 0003 	mov.w	r0, #3
   135c4:	df02      	svc	2
}
   135c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   135ca:	2000      	movs	r0, #0
   135cc:	f7ff bf2e 	b.w	1342c <lll_done>
   135d0:	0001cb0b 	.word	0x0001cb0b
   135d4:	00022160 	.word	0x00022160
   135d8:	00022232 	.word	0x00022232
   135dc:	0001f734 	.word	0x0001f734

000135e0 <lll_prepare_resolve>:
{
   135e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   135e4:	b085      	sub	sp, #20
   135e6:	461c      	mov	r4, r3
   135e8:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
	idx = UINT8_MAX;
   135ec:	23ff      	movs	r3, #255	; 0xff
{
   135ee:	4607      	mov	r7, r0
   135f0:	460e      	mov	r6, r1
   135f2:	4615      	mov	r5, r2
	idx = UINT8_MAX;
   135f4:	f88d 300f 	strb.w	r3, [sp, #15]
		p = ull_prepare_dequeue_iter(&idx);
   135f8:	f10d 000f 	add.w	r0, sp, #15
   135fc:	f7fd fd76 	bl	110ec <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   13600:	b110      	cbz	r0, 13608 <lll_prepare_resolve+0x28>
   13602:	7f03      	ldrb	r3, [r0, #28]
   13604:	079a      	lsls	r2, r3, #30
   13606:	d1f7      	bne.n	135f8 <lll_prepare_resolve+0x18>
	    event.curr.abort_cb ||
   13608:	4b41      	ldr	r3, [pc, #260]	; (13710 <lll_prepare_resolve+0x130>)
	if ((!is_dequeue && !is_done_sync()) ||
   1360a:	689a      	ldr	r2, [r3, #8]
   1360c:	4699      	mov	r9, r3
   1360e:	b922      	cbnz	r2, 1361a <lll_prepare_resolve+0x3a>
	    event.curr.abort_cb ||
   13610:	2800      	cmp	r0, #0
   13612:	d044      	beq.n	1369e <lll_prepare_resolve+0xbe>
	    (p && is_resume)) {
   13614:	f1b8 0f00 	cmp.w	r8, #0
   13618:	d032      	beq.n	13680 <lll_prepare_resolve+0xa0>
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   1361a:	4622      	mov	r2, r4
   1361c:	f8cd 8000 	str.w	r8, [sp]
   13620:	462b      	mov	r3, r5
   13622:	4631      	mov	r1, r6
   13624:	4638      	mov	r0, r7
   13626:	f7fd fd25 	bl	11074 <ull_prepare_enqueue>
		LL_ASSERT(next);
   1362a:	4604      	mov	r4, r0
   1362c:	b960      	cbnz	r0, 13648 <lll_prepare_resolve+0x68>
   1362e:	4a39      	ldr	r2, [pc, #228]	; (13714 <lll_prepare_resolve+0x134>)
   13630:	4939      	ldr	r1, [pc, #228]	; (13718 <lll_prepare_resolve+0x138>)
   13632:	483a      	ldr	r0, [pc, #232]	; (1371c <lll_prepare_resolve+0x13c>)
   13634:	f240 237a 	movw	r3, #634	; 0x27a
   13638:	f004 ff96 	bl	18568 <printk>
   1363c:	4040      	eors	r0, r0
   1363e:	f380 8811 	msr	BASEPRI, r0
   13642:	f04f 0003 	mov.w	r0, #3
   13646:	df02      	svc	2
		if (is_resume) {
   13648:	f1b8 0f00 	cmp.w	r8, #0
   1364c:	d005      	beq.n	1365a <lll_prepare_resolve+0x7a>
		return -EINPROGRESS;
   1364e:	f06f 0476 	mvn.w	r4, #118	; 0x76
}
   13652:	4620      	mov	r0, r4
   13654:	b005      	add	sp, #20
   13656:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ret  = preempt_ticker_start(next, ticker_start_op_cb);
   1365a:	4620      	mov	r0, r4
   1365c:	f7ff fdb0 	bl	131c0 <preempt_ticker_start.constprop.0>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   13660:	2802      	cmp	r0, #2
   13662:	d9f4      	bls.n	1364e <lll_prepare_resolve+0x6e>
   13664:	4a2b      	ldr	r2, [pc, #172]	; (13714 <lll_prepare_resolve+0x134>)
   13666:	492e      	ldr	r1, [pc, #184]	; (13720 <lll_prepare_resolve+0x140>)
   13668:	482c      	ldr	r0, [pc, #176]	; (1371c <lll_prepare_resolve+0x13c>)
   1366a:	f240 2385 	movw	r3, #645	; 0x285
   1366e:	f004 ff7b 	bl	18568 <printk>
   13672:	4040      	eors	r0, r0
   13674:	f380 8811 	msr	BASEPRI, r0
   13678:	f04f 0003 	mov.w	r0, #3
   1367c:	df02      	svc	2
   1367e:	e7e6      	b.n	1364e <lll_prepare_resolve+0x6e>
	LL_ASSERT(!p || &p->prepare_param == prepare_param);
   13680:	42a0      	cmp	r0, r4
   13682:	d00c      	beq.n	1369e <lll_prepare_resolve+0xbe>
   13684:	4a23      	ldr	r2, [pc, #140]	; (13714 <lll_prepare_resolve+0x134>)
   13686:	4927      	ldr	r1, [pc, #156]	; (13724 <lll_prepare_resolve+0x144>)
   13688:	4824      	ldr	r0, [pc, #144]	; (1371c <lll_prepare_resolve+0x13c>)
   1368a:	f44f 732b 	mov.w	r3, #684	; 0x2ac
   1368e:	f004 ff6b 	bl	18568 <printk>
   13692:	4040      	eors	r0, r0
   13694:	f380 8811 	msr	BASEPRI, r0
   13698:	f04f 0003 	mov.w	r0, #3
   1369c:	df02      	svc	2
	event.curr.param = prepare_param->param;
   1369e:	68e3      	ldr	r3, [r4, #12]
	event.curr.abort_cb = abort_cb;
   136a0:	f8c9 6008 	str.w	r6, [r9, #8]
	event.curr.is_abort_cb = is_abort_cb;
   136a4:	e9c9 3700 	strd	r3, r7, [r9]
	err = prepare_cb(prepare_param);
   136a8:	4620      	mov	r0, r4
   136aa:	47a8      	blx	r5
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   136ac:	2200      	movs	r2, #0
   136ae:	4b1e      	ldr	r3, [pc, #120]	; (13728 <lll_prepare_resolve+0x148>)
   136b0:	9200      	str	r2, [sp, #0]
	err = prepare_cb(prepare_param);
   136b2:	4604      	mov	r4, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   136b4:	4611      	mov	r1, r2
   136b6:	4610      	mov	r0, r2
   136b8:	f7fb fd6e 	bl	f198 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   136bc:	2802      	cmp	r0, #2
   136be:	d90c      	bls.n	136da <lll_prepare_resolve+0xfa>
   136c0:	4a14      	ldr	r2, [pc, #80]	; (13714 <lll_prepare_resolve+0x134>)
   136c2:	4917      	ldr	r1, [pc, #92]	; (13720 <lll_prepare_resolve+0x140>)
   136c4:	4815      	ldr	r0, [pc, #84]	; (1371c <lll_prepare_resolve+0x13c>)
   136c6:	f44f 732f 	mov.w	r3, #700	; 0x2bc
   136ca:	f004 ff4d 	bl	18568 <printk>
   136ce:	4040      	eors	r0, r0
   136d0:	f380 8811 	msr	BASEPRI, r0
   136d4:	f04f 0003 	mov.w	r0, #3
   136d8:	df02      	svc	2
		p = ull_prepare_dequeue_iter(&idx);
   136da:	f10d 000f 	add.w	r0, sp, #15
   136de:	f7fd fd05 	bl	110ec <ull_prepare_dequeue_iter>
		if (!p) {
   136e2:	2800      	cmp	r0, #0
   136e4:	d0b5      	beq.n	13652 <lll_prepare_resolve+0x72>
	} while (p->is_aborted || p->is_resume);
   136e6:	7f03      	ldrb	r3, [r0, #28]
   136e8:	079b      	lsls	r3, r3, #30
   136ea:	d1f6      	bne.n	136da <lll_prepare_resolve+0xfa>
	ret = preempt_ticker_start(p, ticker_start_op_cb);
   136ec:	f7ff fd68 	bl	131c0 <preempt_ticker_start.constprop.0>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   136f0:	2802      	cmp	r0, #2
   136f2:	d9ae      	bls.n	13652 <lll_prepare_resolve+0x72>
   136f4:	4a07      	ldr	r2, [pc, #28]	; (13714 <lll_prepare_resolve+0x134>)
   136f6:	490a      	ldr	r1, [pc, #40]	; (13720 <lll_prepare_resolve+0x140>)
   136f8:	4808      	ldr	r0, [pc, #32]	; (1371c <lll_prepare_resolve+0x13c>)
   136fa:	f240 23ca 	movw	r3, #714	; 0x2ca
   136fe:	f004 ff33 	bl	18568 <printk>
   13702:	4040      	eors	r0, r0
   13704:	f380 8811 	msr	BASEPRI, r0
   13708:	f04f 0003 	mov.w	r0, #3
   1370c:	df02      	svc	2
   1370e:	e7a0      	b.n	13652 <lll_prepare_resolve+0x72>
   13710:	200029dc 	.word	0x200029dc
   13714:	00022160 	.word	0x00022160
   13718:	00022212 	.word	0x00022212
   1371c:	0001f734 	.word	0x0001f734
   13720:	000221c5 	.word	0x000221c5
   13724:	0002223b 	.word	0x0002223b
   13728:	00013121 	.word	0x00013121

0001372c <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   1372c:	b530      	push	{r4, r5, lr}
   1372e:	4605      	mov	r5, r0
   13730:	b08b      	sub	sp, #44	; 0x2c
   13732:	460c      	mov	r4, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   13734:	2201      	movs	r2, #1
   13736:	2100      	movs	r1, #0
   13738:	a804      	add	r0, sp, #16
   1373a:	f00a f993 	bl	1da64 <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   1373e:	2300      	movs	r3, #0
   13740:	9303      	str	r3, [sp, #12]
   13742:	4b0e      	ldr	r3, [pc, #56]	; (1377c <blocking_on+0x50>)
   13744:	9301      	str	r3, [sp, #4]
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   13746:	4669      	mov	r1, sp
   13748:	2303      	movs	r3, #3
   1374a:	4628      	mov	r0, r5
   1374c:	9302      	str	r3, [sp, #8]
   1374e:	f004 ff87 	bl	18660 <onoff_request>
	if (err < 0) {
   13752:	2800      	cmp	r0, #0
   13754:	db10      	blt.n	13778 <blocking_on+0x4c>
   13756:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1375a:	f240 30e7 	movw	r0, #999	; 0x3e7
   1375e:	2100      	movs	r1, #0
   13760:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13764:	2300      	movs	r3, #0
   13766:	fbe5 0104 	umlal	r0, r1, r5, r4
   1376a:	f7ec fcb9 	bl	e0 <__aeabi_uldivmod>
   1376e:	4602      	mov	r2, r0
   13770:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   13772:	a804      	add	r0, sp, #16
   13774:	f003 fe50 	bl	17418 <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   13778:	b00b      	add	sp, #44	; 0x2c
   1377a:	bd30      	pop	{r4, r5, pc}
   1377c:	0001cbc9 	.word	0x0001cbc9

00013780 <lll_clock_init>:

int lll_clock_init(void)
{
   13780:	b508      	push	{r3, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   13782:	2001      	movs	r0, #1
   13784:	f7ef fc70 	bl	3068 <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   13788:	4904      	ldr	r1, [pc, #16]	; (1379c <lll_clock_init+0x1c>)
   1378a:	2300      	movs	r3, #0
   1378c:	604b      	str	r3, [r1, #4]
   1378e:	60cb      	str	r3, [r1, #12]
   13790:	2301      	movs	r3, #1
   13792:	608b      	str	r3, [r1, #8]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   13794:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return onoff_request(mgr, &lf_cli);
   13798:	f004 bf62 	b.w	18660 <onoff_request>
   1379c:	200029f4 	.word	0x200029f4

000137a0 <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   137a0:	4b0c      	ldr	r3, [pc, #48]	; (137d4 <lll_clock_wait+0x34>)
   137a2:	781a      	ldrb	r2, [r3, #0]
{
   137a4:	b510      	push	{r4, lr}
	if (done) {
   137a6:	b10a      	cbz	r2, 137ac <lll_clock_wait+0xc>
		return 0;
   137a8:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   137aa:	bd10      	pop	{r4, pc}
	done = true;
   137ac:	2001      	movs	r0, #1
   137ae:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   137b0:	f7ef fc5a 	bl	3068 <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   137b4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   137b8:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   137ba:	f7ff ffb7 	bl	1372c <blocking_on>
	if (err) {
   137be:	2800      	cmp	r0, #0
   137c0:	d1f3      	bne.n	137aa <lll_clock_wait+0xa>
	err = onoff_release(mgr);
   137c2:	4620      	mov	r0, r4
   137c4:	f004 ff95 	bl	186f2 <onoff_release>
	if (err != ONOFF_STATE_ON) {
   137c8:	2802      	cmp	r0, #2
   137ca:	d0ed      	beq.n	137a8 <lll_clock_wait+0x8>
		return -EIO;
   137cc:	f06f 0004 	mvn.w	r0, #4
   137d0:	e7eb      	b.n	137aa <lll_clock_wait+0xa>
   137d2:	bf00      	nop
   137d4:	20003038 	.word	0x20003038

000137d8 <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   137d8:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   137da:	4b09      	ldr	r3, [pc, #36]	; (13800 <lll_hfclock_on+0x28>)
   137dc:	f3bf 8f5b 	dmb	ish
   137e0:	e853 2f00 	ldrex	r2, [r3]
   137e4:	1c51      	adds	r1, r2, #1
   137e6:	e843 1000 	strex	r0, r1, [r3]
   137ea:	2800      	cmp	r0, #0
   137ec:	d1f8      	bne.n	137e0 <lll_hfclock_on+0x8>
   137ee:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   137f2:	2a00      	cmp	r2, #0
   137f4:	dc01      	bgt.n	137fa <lll_hfclock_on+0x22>
		return 0;
	}

	z_nrf_clock_bt_ctlr_hf_request();
   137f6:	f7ef fc3f 	bl	3078 <z_nrf_clock_bt_ctlr_hf_request>
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   137fa:	2000      	movs	r0, #0
   137fc:	bd08      	pop	{r3, pc}
   137fe:	bf00      	nop
   13800:	200029f0 	.word	0x200029f0

00013804 <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   13804:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   13806:	4b0c      	ldr	r3, [pc, #48]	; (13838 <lll_hfclock_off+0x34>)
   13808:	681a      	ldr	r2, [r3, #0]
   1380a:	2a00      	cmp	r2, #0
   1380c:	dd10      	ble.n	13830 <lll_hfclock_off+0x2c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1380e:	f3bf 8f5b 	dmb	ish
   13812:	e853 2f00 	ldrex	r2, [r3]
   13816:	1e51      	subs	r1, r2, #1
   13818:	e843 1000 	strex	r0, r1, [r3]
   1381c:	2800      	cmp	r0, #0
   1381e:	d1f8      	bne.n	13812 <lll_hfclock_off+0xe>
   13820:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   13824:	2a01      	cmp	r2, #1
   13826:	dc01      	bgt.n	1382c <lll_hfclock_off+0x28>
		return 0;
	}

	z_nrf_clock_bt_ctlr_hf_release();
   13828:	f7ef fc3c 	bl	30a4 <z_nrf_clock_bt_ctlr_hf_release>
		return 0;
   1382c:	2000      	movs	r0, #0
   1382e:	e001      	b.n	13834 <lll_hfclock_off+0x30>
		return -EALREADY;
   13830:	f06f 0077 	mvn.w	r0, #119	; 0x77
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   13834:	bd08      	pop	{r3, pc}
   13836:	bf00      	nop
   13838:	200029f0 	.word	0x200029f0

0001383c <lll_clock_ppm_get>:
}

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
}
   1383c:	4b01      	ldr	r3, [pc, #4]	; (13844 <lll_clock_ppm_get+0x8>)
   1383e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   13842:	4770      	bx	lr
   13844:	0001ec68 	.word	0x0001ec68

00013848 <is_abort_cb>:
	struct lll_adv *lll = curr;
	struct pdu_adv *pdu;
#endif /* CONFIG_BT_PERIPHERAL */

	/* TODO: prio check */
	if (next != curr) {
   13848:	4281      	cmp	r1, r0
{
   1384a:	b508      	push	{r3, lr}
	if (next != curr) {
   1384c:	d018      	beq.n	13880 <is_abort_cb+0x38>
		if (0) {
#if defined(CONFIG_BT_PERIPHERAL)
		} else if (lll->is_hdcd) {
   1384e:	7a0b      	ldrb	r3, [r1, #8]
   13850:	07db      	lsls	r3, r3, #31
   13852:	d522      	bpl.n	1389a <is_abort_cb+0x52>
			int err;

			/* wrap back after the pre-empter */
			*resume_cb = resume_prepare_cb;
   13854:	4b12      	ldr	r3, [pc, #72]	; (138a0 <is_abort_cb+0x58>)
   13856:	6013      	str	r3, [r2, #0]

			/* Retain HF clk */
			err = lll_hfclock_on();
   13858:	f7ff ffbe 	bl	137d8 <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   1385c:	2800      	cmp	r0, #0
   1385e:	da0c      	bge.n	1387a <is_abort_cb+0x32>
   13860:	4a10      	ldr	r2, [pc, #64]	; (138a4 <is_abort_cb+0x5c>)
   13862:	4911      	ldr	r1, [pc, #68]	; (138a8 <is_abort_cb+0x60>)
   13864:	4811      	ldr	r0, [pc, #68]	; (138ac <is_abort_cb+0x64>)
   13866:	f240 3377 	movw	r3, #887	; 0x377
   1386a:	f004 fe7d 	bl	18568 <printk>
   1386e:	4040      	eors	r0, r0
   13870:	f380 8811 	msr	BASEPRI, r0
   13874:	f04f 0003 	mov.w	r0, #3
   13878:	df02      	svc	2
   1387a:	f06f 000a 	mvn.w	r0, #10
   1387e:	e00b      	b.n	13898 <is_abort_cb+0x50>
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   13880:	7b0b      	ldrb	r3, [r1, #12]
   13882:	eb01 0183 	add.w	r1, r1, r3, lsl #2
		}
	}

#if defined(CONFIG_BT_PERIPHERAL)
	pdu = lll_adv_data_curr_get(lll);
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   13886:	690b      	ldr	r3, [r1, #16]
   13888:	781b      	ldrb	r3, [r3, #0]
   1388a:	f003 030f 	and.w	r3, r3, #15
   1388e:	2b01      	cmp	r3, #1
		return 0;
   13890:	bf14      	ite	ne
   13892:	f06f 008b 	mvnne.w	r0, #139	; 0x8b
   13896:	2000      	moveq	r0, #0
	}
#endif /* CONFIG_BT_PERIPHERAL */

	return -ECANCELED;
}
   13898:	bd08      	pop	{r3, pc}
			return -ECANCELED;
   1389a:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1389e:	e7fb      	b.n	13898 <is_abort_cb+0x50>
   138a0:	0001cbfb 	.word	0x0001cbfb
   138a4:	00022282 	.word	0x00022282
   138a8:	00022232 	.word	0x00022232
   138ac:	0001f734 	.word	0x0001f734

000138b0 <abort_cb>:

static void abort_cb(struct lll_prepare_param *prepare_param, void *param)
{
   138b0:	b510      	push	{r4, lr}
   138b2:	460c      	mov	r4, r1
	int err;

	/* NOTE: This is not a prepare being cancelled */
	if (!prepare_param) {
   138b4:	b930      	cbnz	r0, 138c4 <abort_cb+0x14>
		/* Perform event abort here.
		 * After event has been cleanly aborted, clean up resources
		 * and dispatch event done.
		 */
		radio_isr_set(isr_abort, param);
   138b6:	480e      	ldr	r0, [pc, #56]	; (138f0 <abort_cb+0x40>)
   138b8:	f001 fab8 	bl	14e2c <radio_isr_set>
	 */
	err = lll_hfclock_off();
	LL_ASSERT(err >= 0);

	lll_done(param);
}
   138bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   138c0:	f001 bb82 	b.w	14fc8 <radio_disable>
	err = lll_hfclock_off();
   138c4:	f7ff ff9e 	bl	13804 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   138c8:	2800      	cmp	r0, #0
   138ca:	da0c      	bge.n	138e6 <abort_cb+0x36>
   138cc:	4a09      	ldr	r2, [pc, #36]	; (138f4 <abort_cb+0x44>)
   138ce:	490a      	ldr	r1, [pc, #40]	; (138f8 <abort_cb+0x48>)
   138d0:	480a      	ldr	r0, [pc, #40]	; (138fc <abort_cb+0x4c>)
   138d2:	f240 339d 	movw	r3, #925	; 0x39d
   138d6:	f004 fe47 	bl	18568 <printk>
   138da:	4040      	eors	r0, r0
   138dc:	f380 8811 	msr	BASEPRI, r0
   138e0:	f04f 0003 	mov.w	r0, #3
   138e4:	df02      	svc	2
	lll_done(param);
   138e6:	4620      	mov	r0, r4
}
   138e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   138ec:	f7ff bd9e 	b.w	1342c <lll_done>
   138f0:	0001cbd5 	.word	0x0001cbd5
   138f4:	00022282 	.word	0x00022282
   138f8:	00022232 	.word	0x00022232
   138fc:	0001f734 	.word	0x0001f734

00013900 <isr_tx>:

static void isr_tx(void *param)
{
   13900:	b538      	push	{r3, r4, r5, lr}
   13902:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CTLR_PROFILE_ISR)) {
		lll_prof_latency_capture();
	}

	/* Clear radio tx status and events */
	lll_isr_tx_status_reset();
   13904:	f009 f93a 	bl	1cb7c <lll_isr_tx_status_reset>

	/* setup tIFS switching */
	radio_tmr_tifs_set(EVENT_IFS_US);
   13908:	2096      	movs	r0, #150	; 0x96
   1390a:	f001 fc4d 	bl	151a8 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, 0);
   1390e:	2300      	movs	r3, #0
   13910:	461a      	mov	r2, r3
   13912:	4619      	mov	r1, r3
   13914:	4618      	mov	r0, r3
   13916:	f001 fbbd 	bl	15094 <radio_switch_complete_and_tx>

	radio_pkt_rx_set(radio_pkt_scratch_get());
   1391a:	f001 fbab 	bl	15074 <radio_pkt_scratch_get>
   1391e:	f001 fb3b 	bl	14f98 <radio_pkt_rx_set>
	/* assert if radio packet ptr is not set and radio started rx */
	LL_ASSERT(!radio_is_ready());
   13922:	f001 fb6f 	bl	15004 <radio_is_ready>
   13926:	b160      	cbz	r0, 13942 <isr_tx+0x42>
   13928:	4a12      	ldr	r2, [pc, #72]	; (13974 <isr_tx+0x74>)
   1392a:	4913      	ldr	r1, [pc, #76]	; (13978 <isr_tx+0x78>)
   1392c:	4813      	ldr	r0, [pc, #76]	; (1397c <isr_tx+0x7c>)
   1392e:	f240 33b9 	movw	r3, #953	; 0x3b9
   13932:	f004 fe19 	bl	18568 <printk>
   13936:	4040      	eors	r0, r0
   13938:	f380 8811 	msr	BASEPRI, r0
   1393c:	f04f 0003 	mov.w	r0, #3
   13940:	df02      	svc	2

	if (IS_ENABLED(CONFIG_BT_CTLR_PROFILE_ISR)) {
		lll_prof_cputime_capture();
	}

	radio_isr_set(isr_rx, param);
   13942:	4621      	mov	r1, r4
   13944:	480e      	ldr	r0, [pc, #56]	; (13980 <isr_tx+0x80>)
   13946:	f001 fa71 	bl	14e2c <radio_isr_set>
		radio_ar_configure(count, irks, 0);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	/* +/- 2us active clock jitter, +1 us hcto compensation */
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1394a:	f001 fd27 	bl	1539c <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1394e:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   13950:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   13952:	4608      	mov	r0, r1
   13954:	f009 fb7d 	bl	1d052 <radio_rx_chain_delay_get>
	hcto += addr_us_get(phy_p);
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   13958:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1395a:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   1395c:	4608      	mov	r0, r1
   1395e:	f009 fb74 	bl	1d04a <radio_tx_chain_delay_get>
   13962:	442c      	add	r4, r5
   13964:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   13966:	1a20      	subs	r0, r4, r0
   13968:	f001 fcd2 	bl	15310 <radio_tmr_hcto_configure>
		/* NOTE: as scratch packet is used to receive, it is safe to
		 * generate profile event using rx nodes.
		 */
		lll_prof_send();
	}
}
   1396c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_tmr_end_capture();
   13970:	f001 bd06 	b.w	15380 <radio_tmr_end_capture>
   13974:	00022282 	.word	0x00022282
   13978:	000222cc 	.word	0x000222cc
   1397c:	0001f734 	.word	0x0001f734
   13980:	00013db5 	.word	0x00013db5

00013984 <lll_adv_init>:
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   13984:	4b08      	ldr	r3, [pc, #32]	; (139a8 <lll_adv_init+0x24>)
{
   13986:	b510      	push	{r4, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   13988:	1d18      	adds	r0, r3, #4
   1398a:	2205      	movs	r2, #5
   1398c:	2128      	movs	r1, #40	; 0x28
   1398e:	f008 fabc 	bl	1bf0a <mem_init>
	MFIFO_INIT(pdu_free);
   13992:	4b06      	ldr	r3, [pc, #24]	; (139ac <lll_adv_init+0x28>)
   13994:	2400      	movs	r4, #0
   13996:	805c      	strh	r4, [r3, #2]
	return z_impl_k_sem_init(sem, initial_count, limit);
   13998:	2203      	movs	r2, #3
   1399a:	4621      	mov	r1, r4
   1399c:	4804      	ldr	r0, [pc, #16]	; (139b0 <lll_adv_init+0x2c>)
   1399e:	f00a f861 	bl	1da64 <z_impl_k_sem_init>
}
   139a2:	4620      	mov	r0, r4
   139a4:	bd10      	pop	{r4, pc}
   139a6:	bf00      	nop
   139a8:	20002a04 	.word	0x20002a04
   139ac:	200008dc 	.word	0x200008dc
   139b0:	20002ad0 	.word	0x20002ad0

000139b4 <lll_adv_data_init>:
{
   139b4:	b510      	push	{r4, lr}
   139b6:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   139b8:	4805      	ldr	r0, [pc, #20]	; (139d0 <lll_adv_data_init+0x1c>)
   139ba:	f008 faca 	bl	1bf52 <mem_acquire>
	if (!p) {
   139be:	4603      	mov	r3, r0
   139c0:	b118      	cbz	r0, 139ca <lll_adv_data_init+0x16>
	p->len = 0U;
   139c2:	2000      	movs	r0, #0
   139c4:	7058      	strb	r0, [r3, #1]
	pdu->pdu[0] = (void *)p;
   139c6:	6063      	str	r3, [r4, #4]
}
   139c8:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   139ca:	f06f 000b 	mvn.w	r0, #11
   139ce:	e7fb      	b.n	139c8 <lll_adv_data_init+0x14>
   139d0:	20002a04 	.word	0x20002a04

000139d4 <lll_adv_pdu_alloc>:
{
   139d4:	b570      	push	{r4, r5, r6, lr}
	first = pdu->first;
   139d6:	7804      	ldrb	r4, [r0, #0]
	last = pdu->last;
   139d8:	7843      	ldrb	r3, [r0, #1]
	if (first == last) {
   139da:	429c      	cmp	r4, r3
	first = pdu->first;
   139dc:	b2e2      	uxtb	r2, r4
	if (first == last) {
   139de:	d134      	bne.n	13a4a <lll_adv_pdu_alloc+0x76>
		last++;
   139e0:	3301      	adds	r3, #1
   139e2:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   139e4:	2b02      	cmp	r3, #2
   139e6:	d100      	bne.n	139ea <lll_adv_pdu_alloc+0x16>
			last = 0U;
   139e8:	2300      	movs	r3, #0
	*idx = last;
   139ea:	eb00 0683 	add.w	r6, r0, r3, lsl #2
   139ee:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   139f0:	6874      	ldr	r4, [r6, #4]
	if (p) {
   139f2:	bb44      	cbnz	r4, 13a46 <lll_adv_pdu_alloc+0x72>
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   139f4:	4d35      	ldr	r5, [pc, #212]	; (13acc <lll_adv_pdu_alloc+0xf8>)
   139f6:	78aa      	ldrb	r2, [r5, #2]
	if (first == last) {
   139f8:	78e9      	ldrb	r1, [r5, #3]
   139fa:	782b      	ldrb	r3, [r5, #0]
   139fc:	4291      	cmp	r1, r2
   139fe:	d029      	beq.n	13a54 <lll_adv_pdu_alloc+0x80>
	return *((void **)(fifo + first * size));
   13a00:	fb02 5303 	mla	r3, r2, r3, r5
   13a04:	685c      	ldr	r4, [r3, #4]
	if (p) {
   13a06:	b32c      	cbz	r4, 13a54 <lll_adv_pdu_alloc+0x80>
	return z_impl_k_sem_take(sem, timeout);
   13a08:	4831      	ldr	r0, [pc, #196]	; (13ad0 <lll_adv_pdu_alloc+0xfc>)
   13a0a:	2200      	movs	r2, #0
   13a0c:	2300      	movs	r3, #0
   13a0e:	f003 fd03 	bl	17418 <z_impl_k_sem_take>
		LL_ASSERT(!err);
   13a12:	b160      	cbz	r0, 13a2e <lll_adv_pdu_alloc+0x5a>
   13a14:	4a2f      	ldr	r2, [pc, #188]	; (13ad4 <lll_adv_pdu_alloc+0x100>)
   13a16:	4930      	ldr	r1, [pc, #192]	; (13ad8 <lll_adv_pdu_alloc+0x104>)
   13a18:	4830      	ldr	r0, [pc, #192]	; (13adc <lll_adv_pdu_alloc+0x108>)
   13a1a:	f240 236f 	movw	r3, #623	; 0x26f
   13a1e:	f004 fda3 	bl	18568 <printk>
   13a22:	4040      	eors	r0, r0
   13a24:	f380 8811 	msr	BASEPRI, r0
   13a28:	f04f 0003 	mov.w	r0, #3
   13a2c:	df02      	svc	2
	uint8_t _first = *first; /* Copy read-index */
   13a2e:	78ab      	ldrb	r3, [r5, #2]
	if (_first == last) {
   13a30:	78e9      	ldrb	r1, [r5, #3]
		MFIFO_DEQUEUE(pdu_free);
   13a32:	786a      	ldrb	r2, [r5, #1]
   13a34:	4299      	cmp	r1, r3
   13a36:	d005      	beq.n	13a44 <lll_adv_pdu_alloc+0x70>
	_first += 1U;
   13a38:	3301      	adds	r3, #1
   13a3a:	b2db      	uxtb	r3, r3
		_first = 0U;
   13a3c:	429a      	cmp	r2, r3
   13a3e:	bf08      	it	eq
   13a40:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   13a42:	70ab      	strb	r3, [r5, #2]
	pdu->pdu[last] = (void *)p;
   13a44:	6074      	str	r4, [r6, #4]
}
   13a46:	4620      	mov	r0, r4
   13a48:	bd70      	pop	{r4, r5, r6, pc}
		pdu->last = first;
   13a4a:	7042      	strb	r2, [r0, #1]
		first_latest = pdu->first;
   13a4c:	7804      	ldrb	r4, [r0, #0]
		if (first_latest != first) {
   13a4e:	42a2      	cmp	r2, r4
   13a50:	d1c6      	bne.n	139e0 <lll_adv_pdu_alloc+0xc>
   13a52:	e7ca      	b.n	139ea <lll_adv_pdu_alloc+0x16>
	p = mem_acquire(&mem_pdu.free);
   13a54:	4822      	ldr	r0, [pc, #136]	; (13ae0 <lll_adv_pdu_alloc+0x10c>)
   13a56:	f008 fa7c 	bl	1bf52 <mem_acquire>
	if (p) {
   13a5a:	4604      	mov	r4, r0
   13a5c:	2800      	cmp	r0, #0
   13a5e:	d1f1      	bne.n	13a44 <lll_adv_pdu_alloc+0x70>
   13a60:	481b      	ldr	r0, [pc, #108]	; (13ad0 <lll_adv_pdu_alloc+0xfc>)
   13a62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13a66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13a6a:	f003 fcd5 	bl	17418 <z_impl_k_sem_take>
	LL_ASSERT(!err);
   13a6e:	b160      	cbz	r0, 13a8a <lll_adv_pdu_alloc+0xb6>
   13a70:	4a18      	ldr	r2, [pc, #96]	; (13ad4 <lll_adv_pdu_alloc+0x100>)
   13a72:	4919      	ldr	r1, [pc, #100]	; (13ad8 <lll_adv_pdu_alloc+0x104>)
   13a74:	4819      	ldr	r0, [pc, #100]	; (13adc <lll_adv_pdu_alloc+0x108>)
   13a76:	f240 237f 	movw	r3, #639	; 0x27f
   13a7a:	f004 fd75 	bl	18568 <printk>
   13a7e:	4040      	eors	r0, r0
   13a80:	f380 8811 	msr	BASEPRI, r0
   13a84:	f04f 0003 	mov.w	r0, #3
   13a88:	df02      	svc	2
	uint8_t _first = *first; /* Copy read-index */
   13a8a:	78ab      	ldrb	r3, [r5, #2]
	if (_first == last) {
   13a8c:	78e8      	ldrb	r0, [r5, #3]
	p = MFIFO_DEQUEUE(pdu_free);
   13a8e:	782a      	ldrb	r2, [r5, #0]
   13a90:	7869      	ldrb	r1, [r5, #1]
   13a92:	4298      	cmp	r0, r3
   13a94:	d10e      	bne.n	13ab4 <lll_adv_pdu_alloc+0xe0>
	LL_ASSERT(p);
   13a96:	4a0f      	ldr	r2, [pc, #60]	; (13ad4 <lll_adv_pdu_alloc+0x100>)
   13a98:	4912      	ldr	r1, [pc, #72]	; (13ae4 <lll_adv_pdu_alloc+0x110>)
   13a9a:	4810      	ldr	r0, [pc, #64]	; (13adc <lll_adv_pdu_alloc+0x108>)
   13a9c:	f240 2382 	movw	r3, #642	; 0x282
   13aa0:	f004 fd62 	bl	18568 <printk>
   13aa4:	4040      	eors	r0, r0
   13aa6:	f380 8811 	msr	BASEPRI, r0
   13aaa:	f04f 0003 	mov.w	r0, #3
   13aae:	df02      	svc	2
   13ab0:	2400      	movs	r4, #0
   13ab2:	e7c7      	b.n	13a44 <lll_adv_pdu_alloc+0x70>
	mem = *((void **)(fifo + _first * size));
   13ab4:	fb03 5202 	mla	r2, r3, r2, r5
	_first += 1U;
   13ab8:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   13aba:	6854      	ldr	r4, [r2, #4]
	_first += 1U;
   13abc:	b2db      	uxtb	r3, r3
		_first = 0U;
   13abe:	4299      	cmp	r1, r3
   13ac0:	bf08      	it	eq
   13ac2:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   13ac4:	70ab      	strb	r3, [r5, #2]
   13ac6:	2c00      	cmp	r4, #0
   13ac8:	d1bc      	bne.n	13a44 <lll_adv_pdu_alloc+0x70>
   13aca:	e7e4      	b.n	13a96 <lll_adv_pdu_alloc+0xc2>
   13acc:	200008dc 	.word	0x200008dc
   13ad0:	20002ad0 	.word	0x20002ad0
   13ad4:	00022282 	.word	0x00022282
   13ad8:	00021c03 	.word	0x00021c03
   13adc:	0001f734 	.word	0x0001f734
   13ae0:	20002a04 	.word	0x20002a04
   13ae4:	0001f64b 	.word	0x0001f64b

00013ae8 <lll_adv_pdu_latest_get>:
{
   13ae8:	b570      	push	{r4, r5, r6, lr}
   13aea:	4604      	mov	r4, r0
	first = pdu->first;
   13aec:	7803      	ldrb	r3, [r0, #0]
	if (first != pdu->last) {
   13aee:	7862      	ldrb	r2, [r4, #1]
   13af0:	429a      	cmp	r2, r3
	first = pdu->first;
   13af2:	b2d8      	uxtb	r0, r3
	if (first != pdu->last) {
   13af4:	d021      	beq.n	13b3a <lll_adv_pdu_latest_get+0x52>
		if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   13af6:	4e14      	ldr	r6, [pc, #80]	; (13b48 <lll_adv_pdu_latest_get+0x60>)
	last = last + 1;
   13af8:	78f3      	ldrb	r3, [r6, #3]
	if (last == count) {
   13afa:	7875      	ldrb	r5, [r6, #1]
   13afc:	78b2      	ldrb	r2, [r6, #2]
	last = last + 1;
   13afe:	3301      	adds	r3, #1
   13b00:	b2db      	uxtb	r3, r3
		last = 0U;
   13b02:	429d      	cmp	r5, r3
   13b04:	bf08      	it	eq
   13b06:	2300      	moveq	r3, #0
	if (last == first) {
   13b08:	429a      	cmp	r2, r3
   13b0a:	d01a      	beq.n	13b42 <lll_adv_pdu_latest_get+0x5a>
		first += 1U;
   13b0c:	1c45      	adds	r5, r0, #1
   13b0e:	b2ed      	uxtb	r5, r5
			first = 0U;
   13b10:	2d02      	cmp	r5, #2
   13b12:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   13b16:	bf08      	it	eq
   13b18:	2500      	moveq	r5, #0
		*is_modified = 1U;
   13b1a:	2201      	movs	r2, #1
		pdu->first = first;
   13b1c:	7025      	strb	r5, [r4, #0]
		*is_modified = 1U;
   13b1e:	700a      	strb	r2, [r1, #0]
		pdu->pdu[pdu_idx] = NULL;
   13b20:	2200      	movs	r2, #0
		p = pdu->pdu[pdu_idx];
   13b22:	6841      	ldr	r1, [r0, #4]
		pdu->pdu[pdu_idx] = NULL;
   13b24:	6042      	str	r2, [r0, #4]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   13b26:	78f0      	ldrb	r0, [r6, #3]
   13b28:	7832      	ldrb	r2, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   13b2a:	fb00 6202 	mla	r2, r0, r2, r6
   13b2e:	6051      	str	r1, [r2, #4]
	*last = idx; /* Commit: Update write index */
   13b30:	70f3      	strb	r3, [r6, #3]
	z_impl_k_sem_give(sem);
   13b32:	4806      	ldr	r0, [pc, #24]	; (13b4c <lll_adv_pdu_latest_get+0x64>)
   13b34:	f003 fc4a 	bl	173cc <z_impl_k_sem_give>
}
   13b38:	4628      	mov	r0, r5
	return (void *)pdu->pdu[first];
   13b3a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
   13b3e:	6860      	ldr	r0, [r4, #4]
}
   13b40:	bd70      	pop	{r4, r5, r6, pc}
			return NULL;
   13b42:	2000      	movs	r0, #0
   13b44:	e7fc      	b.n	13b40 <lll_adv_pdu_latest_get+0x58>
   13b46:	bf00      	nop
   13b48:	200008dc 	.word	0x200008dc
   13b4c:	20002ad0 	.word	0x20002ad0

00013b50 <chan_prepare>:
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   13b50:	7a03      	ldrb	r3, [r0, #8]
	return __builtin_ffs(op);
   13b52:	f3c3 1302 	ubfx	r3, r3, #4, #3
{
   13b56:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13b58:	2b00      	cmp	r3, #0
   13b5a:	4604      	mov	r4, r0
   13b5c:	fa93 f0a3 	rbit	r0, r3
   13b60:	fab0 f080 	clz	r0, r0
   13b64:	bf08      	it	eq
   13b66:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
	LL_ASSERT(chan);
   13b6a:	1c45      	adds	r5, r0, #1
   13b6c:	d10c      	bne.n	13b88 <chan_prepare+0x38>
   13b6e:	4a30      	ldr	r2, [pc, #192]	; (13c30 <chan_prepare+0xe0>)
   13b70:	4930      	ldr	r1, [pc, #192]	; (13c34 <chan_prepare+0xe4>)
   13b72:	4831      	ldr	r0, [pc, #196]	; (13c38 <chan_prepare+0xe8>)
   13b74:	f240 43a6 	movw	r3, #1190	; 0x4a6
   13b78:	f004 fcf6 	bl	18568 <printk>
   13b7c:	4040      	eors	r0, r0
   13b7e:	f380 8811 	msr	BASEPRI, r0
   13b82:	f04f 0003 	mov.w	r0, #3
   13b86:	df02      	svc	2

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   13b88:	7a23      	ldrb	r3, [r4, #8]
   13b8a:	f3c3 1202 	ubfx	r2, r3, #4, #3
   13b8e:	1e51      	subs	r1, r2, #1
   13b90:	400a      	ands	r2, r1
   13b92:	f362 1306 	bfi	r3, r2, #4, #3

	lll_chan_set(36 + chan);
   13b96:	f105 0024 	add.w	r0, r5, #36	; 0x24
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   13b9a:	7223      	strb	r3, [r4, #8]
	lll_chan_set(36 + chan);
   13b9c:	f7ff fc9c 	bl	134d8 <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   13ba0:	2300      	movs	r3, #0
#endif /* CONFIG_BT_CTLR_ADV_EXT_PDU_EXTRA_DATA_MEMORY */

static inline struct pdu_adv *lll_adv_data_latest_get(struct lll_adv *lll,
						      uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   13ba2:	f10d 0107 	add.w	r1, sp, #7
   13ba6:	f104 000c 	add.w	r0, r4, #12
   13baa:	f88d 3007 	strb.w	r3, [sp, #7]
   13bae:	f7ff ff9b 	bl	13ae8 <lll_adv_pdu_latest_get>
	pdu = lll_adv_data_latest_get(lll, &upd);
	LL_ASSERT(pdu);
   13bb2:	4605      	mov	r5, r0
   13bb4:	b960      	cbnz	r0, 13bd0 <chan_prepare+0x80>
   13bb6:	4a1e      	ldr	r2, [pc, #120]	; (13c30 <chan_prepare+0xe0>)
   13bb8:	4920      	ldr	r1, [pc, #128]	; (13c3c <chan_prepare+0xec>)
   13bba:	481f      	ldr	r0, [pc, #124]	; (13c38 <chan_prepare+0xe8>)
   13bbc:	f240 43af 	movw	r3, #1199	; 0x4af
   13bc0:	f004 fcd2 	bl	18568 <printk>
   13bc4:	4040      	eors	r0, r0
   13bc6:	f380 8811 	msr	BASEPRI, r0
   13bca:	f04f 0003 	mov.w	r0, #3
   13bce:	df02      	svc	2

	radio_pkt_tx_set(pdu);
   13bd0:	4628      	mov	r0, r5
   13bd2:	f001 f9e7 	bl	14fa4 <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   13bd6:	782b      	ldrb	r3, [r5, #0]
   13bd8:	f003 030f 	and.w	r3, r3, #15
   13bdc:	2b02      	cmp	r3, #2
   13bde:	d020      	beq.n	13c22 <chan_prepare+0xd2>
}

static inline struct pdu_adv *lll_adv_scan_rsp_latest_get(struct lll_adv *lll,
							  uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   13be0:	f10d 0107 	add.w	r1, sp, #7
   13be4:	f104 0018 	add.w	r0, r4, #24
   13be8:	f7ff ff7e 	bl	13ae8 <lll_adv_pdu_latest_get>
	    (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		struct pdu_adv *scan_pdu;

		scan_pdu = lll_adv_scan_rsp_latest_get(lll, &upd);
		LL_ASSERT(scan_pdu);
   13bec:	b960      	cbnz	r0, 13c08 <chan_prepare+0xb8>
   13bee:	4a10      	ldr	r2, [pc, #64]	; (13c30 <chan_prepare+0xe0>)
   13bf0:	4913      	ldr	r1, [pc, #76]	; (13c40 <chan_prepare+0xf0>)
   13bf2:	4811      	ldr	r0, [pc, #68]	; (13c38 <chan_prepare+0xe8>)
   13bf4:	f240 43b9 	movw	r3, #1209	; 0x4b9
   13bf8:	f004 fcb6 	bl	18568 <printk>
   13bfc:	4040      	eors	r0, r0
   13bfe:	f380 8811 	msr	BASEPRI, r0
   13c02:	f04f 0003 	mov.w	r0, #3
   13c06:	df02      	svc	2
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   13c08:	480e      	ldr	r0, [pc, #56]	; (13c44 <chan_prepare+0xf4>)
   13c0a:	4621      	mov	r1, r4
   13c0c:	f001 f90e 	bl	14e2c <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   13c10:	2096      	movs	r0, #150	; 0x96
   13c12:	f001 fac9 	bl	151a8 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   13c16:	2000      	movs	r0, #0
   13c18:	f001 fa30 	bl	1507c <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   13c1c:	4628      	mov	r0, r5
   13c1e:	b003      	add	sp, #12
   13c20:	bd30      	pop	{r4, r5, pc}
		radio_isr_set(isr_done, lll);
   13c22:	4809      	ldr	r0, [pc, #36]	; (13c48 <chan_prepare+0xf8>)
   13c24:	4621      	mov	r1, r4
   13c26:	f001 f901 	bl	14e2c <radio_isr_set>
		radio_switch_complete_and_disable();
   13c2a:	f001 fa3f 	bl	150ac <radio_switch_complete_and_disable>
	return pdu;
   13c2e:	e7f5      	b.n	13c1c <chan_prepare+0xcc>
   13c30:	00022282 	.word	0x00022282
   13c34:	000220fc 	.word	0x000220fc
   13c38:	0001f734 	.word	0x0001f734
   13c3c:	000222e3 	.word	0x000222e3
   13c40:	000222de 	.word	0x000222de
   13c44:	00013901 	.word	0x00013901
   13c48:	0001cc23 	.word	0x0001cc23

00013c4c <prepare_cb>:
{
   13c4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	lll = p->param;
   13c4e:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->conn &&
   13c50:	6863      	ldr	r3, [r4, #4]
{
   13c52:	4605      	mov	r5, r0
	if (unlikely(lll->conn &&
   13c54:	b163      	cbz	r3, 13c70 <prepare_cb+0x24>
   13c56:	f893 3020 	ldrb.w	r3, [r3, #32]
   13c5a:	079a      	lsls	r2, r3, #30
   13c5c:	d008      	beq.n	13c70 <prepare_cb+0x24>
		radio_isr_set(lll_isr_early_abort, lll);
   13c5e:	4831      	ldr	r0, [pc, #196]	; (13d24 <prepare_cb+0xd8>)
   13c60:	4621      	mov	r1, r4
		radio_isr_set(isr_abort, lll);
   13c62:	f001 f8e3 	bl	14e2c <radio_isr_set>
		radio_disable();
   13c66:	f001 f9af 	bl	14fc8 <radio_disable>
}
   13c6a:	2000      	movs	r0, #0
   13c6c:	b003      	add	sp, #12
   13c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	radio_reset();
   13c70:	f001 f8fc 	bl	14e6c <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   13c74:	2000      	movs	r0, #0
   13c76:	f001 f92d 	bl	14ed4 <radio_tx_power_set>
	radio_phy_set(0, 0);
   13c7a:	2100      	movs	r1, #0
   13c7c:	4608      	mov	r0, r1
   13c7e:	f001 f919 	bl	14eb4 <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_LEG_PAYLOAD_SIZE_MAX, 0);
   13c82:	2200      	movs	r2, #0
   13c84:	2125      	movs	r1, #37	; 0x25
   13c86:	2008      	movs	r0, #8
   13c88:	f001 f95a 	bl	14f40 <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   13c8c:	4b26      	ldr	r3, [pc, #152]	; (13d28 <prepare_cb+0xdc>)
   13c8e:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   13c90:	a801      	add	r0, sp, #4
   13c92:	f001 f93d 	bl	14f10 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   13c96:	4925      	ldr	r1, [pc, #148]	; (13d2c <prepare_cb+0xe0>)
   13c98:	f240 605b 	movw	r0, #1627	; 0x65b
   13c9c:	f001 f9d0 	bl	15040 <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   13ca0:	7a23      	ldrb	r3, [r4, #8]
   13ca2:	f3c3 0242 	ubfx	r2, r3, #1, #3
   13ca6:	f362 1306 	bfi	r3, r2, #4, #3
   13caa:	7223      	strb	r3, [r4, #8]
	pdu = chan_prepare(lll);
   13cac:	4620      	mov	r0, r4
   13cae:	f7ff ff4f 	bl	13b50 <chan_prepare>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) && lll->filter_policy) {
   13cb2:	7a63      	ldrb	r3, [r4, #9]
   13cb4:	079b      	lsls	r3, r3, #30
   13cb6:	d007      	beq.n	13cc8 <prepare_cb+0x7c>
		struct lll_filter *wl = ull_filter_lll_get(true);
   13cb8:	2001      	movs	r0, #1
   13cba:	f7ff fa03 	bl	130c4 <ull_filter_lll_get>
		radio_filter_configure(wl->enable_bitmask,
   13cbe:	7841      	ldrb	r1, [r0, #1]
   13cc0:	1c82      	adds	r2, r0, #2
   13cc2:	7800      	ldrb	r0, [r0, #0]
   13cc4:	f001 fa22 	bl	1510c <radio_filter_configure>
	ull = HDR_LLL2ULL(lll);
   13cc8:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   13cca:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   13ccc:	4638      	mov	r0, r7
   13cce:	f008 ff36 	bl	1cb3e <lll_event_offset_get>
   13cd2:	4406      	add	r6, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   13cd4:	686a      	ldr	r2, [r5, #4]
   13cd6:	f106 0109 	add.w	r1, r6, #9
   13cda:	2001      	movs	r0, #1
   13cdc:	f001 fa70 	bl	151c0 <radio_tmr_start>
	radio_tmr_end_capture();
   13ce0:	f001 fb4e 	bl	15380 <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   13ce4:	4620      	mov	r0, r4
   13ce6:	f7fd fd23 	bl	11730 <ull_adv_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_ADV_BASE +
   13cea:	1c81      	adds	r1, r0, #2
   13cec:	4632      	mov	r2, r6
   13cee:	b2c9      	uxtb	r1, r1
   13cf0:	4638      	mov	r0, r7
   13cf2:	f008 ff32 	bl	1cb5a <lll_preempt_calc>
   13cf6:	b110      	cbz	r0, 13cfe <prepare_cb+0xb2>
		radio_isr_set(isr_abort, lll);
   13cf8:	480d      	ldr	r0, [pc, #52]	; (13d30 <prepare_cb+0xe4>)
   13cfa:	4621      	mov	r1, r4
   13cfc:	e7b1      	b.n	13c62 <prepare_cb+0x16>
		ret = lll_prepare_done(lll);
   13cfe:	4620      	mov	r0, r4
   13d00:	f008 ff18 	bl	1cb34 <lll_prepare_done>
		LL_ASSERT(!ret);
   13d04:	2800      	cmp	r0, #0
   13d06:	d0b0      	beq.n	13c6a <prepare_cb+0x1e>
   13d08:	4a0a      	ldr	r2, [pc, #40]	; (13d34 <prepare_cb+0xe8>)
   13d0a:	490b      	ldr	r1, [pc, #44]	; (13d38 <prepare_cb+0xec>)
   13d0c:	480b      	ldr	r0, [pc, #44]	; (13d3c <prepare_cb+0xf0>)
   13d0e:	f240 334e 	movw	r3, #846	; 0x34e
   13d12:	f004 fc29 	bl	18568 <printk>
   13d16:	4040      	eors	r0, r0
   13d18:	f380 8811 	msr	BASEPRI, r0
   13d1c:	f04f 0003 	mov.w	r0, #3
   13d20:	df02      	svc	2
   13d22:	e7a2      	b.n	13c6a <prepare_cb+0x1e>
   13d24:	00013591 	.word	0x00013591
   13d28:	8e89bed6 	.word	0x8e89bed6
   13d2c:	00555555 	.word	0x00555555
   13d30:	0001cbd5 	.word	0x0001cbd5
   13d34:	00022282 	.word	0x00022282
   13d38:	00021cbb 	.word	0x00021cbb
   13d3c:	0001f734 	.word	0x0001f734

00013d40 <lll_adv_prepare>:
{
   13d40:	b513      	push	{r0, r1, r4, lr}
   13d42:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   13d44:	f7ff fd48 	bl	137d8 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   13d48:	2800      	cmp	r0, #0
   13d4a:	da0c      	bge.n	13d66 <lll_adv_prepare+0x26>
   13d4c:	4a12      	ldr	r2, [pc, #72]	; (13d98 <lll_adv_prepare+0x58>)
   13d4e:	4913      	ldr	r1, [pc, #76]	; (13d9c <lll_adv_prepare+0x5c>)
   13d50:	4813      	ldr	r0, [pc, #76]	; (13da0 <lll_adv_prepare+0x60>)
   13d52:	f240 13e5 	movw	r3, #485	; 0x1e5
   13d56:	f004 fc07 	bl	18568 <printk>
   13d5a:	4040      	eors	r0, r0
   13d5c:	f380 8811 	msr	BASEPRI, r0
   13d60:	f04f 0003 	mov.w	r0, #3
   13d64:	df02      	svc	2
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   13d66:	4a0f      	ldr	r2, [pc, #60]	; (13da4 <lll_adv_prepare+0x64>)
   13d68:	490f      	ldr	r1, [pc, #60]	; (13da8 <lll_adv_prepare+0x68>)
   13d6a:	4810      	ldr	r0, [pc, #64]	; (13dac <lll_adv_prepare+0x6c>)
   13d6c:	9400      	str	r4, [sp, #0]
   13d6e:	2300      	movs	r3, #0
   13d70:	f008 fc5a 	bl	1c628 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   13d74:	b170      	cbz	r0, 13d94 <lll_adv_prepare+0x54>
   13d76:	3077      	adds	r0, #119	; 0x77
   13d78:	d00c      	beq.n	13d94 <lll_adv_prepare+0x54>
   13d7a:	4a07      	ldr	r2, [pc, #28]	; (13d98 <lll_adv_prepare+0x58>)
   13d7c:	490c      	ldr	r1, [pc, #48]	; (13db0 <lll_adv_prepare+0x70>)
   13d7e:	4808      	ldr	r0, [pc, #32]	; (13da0 <lll_adv_prepare+0x60>)
   13d80:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
   13d84:	f004 fbf0 	bl	18568 <printk>
   13d88:	4040      	eors	r0, r0
   13d8a:	f380 8811 	msr	BASEPRI, r0
   13d8e:	f04f 0003 	mov.w	r0, #3
   13d92:	df02      	svc	2
}
   13d94:	b002      	add	sp, #8
   13d96:	bd10      	pop	{r4, pc}
   13d98:	00022282 	.word	0x00022282
   13d9c:	00022232 	.word	0x00022232
   13da0:	0001f734 	.word	0x0001f734
   13da4:	00013c4d 	.word	0x00013c4d
   13da8:	000138b1 	.word	0x000138b1
   13dac:	00013849 	.word	0x00013849
   13db0:	000222e7 	.word	0x000222e7

00013db4 <isr_rx>:
{
   13db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13db8:	b086      	sub	sp, #24
   13dba:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   13dbc:	f001 f92c 	bl	15018 <radio_is_done>
	if (trx_done) {
   13dc0:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
   13dc4:	d063      	beq.n	13e8e <isr_rx+0xda>
		crc_ok = radio_crc_is_valid();
   13dc6:	f001 f947 	bl	15058 <radio_crc_is_valid>
   13dca:	b2c6      	uxtb	r6, r0
		devmatch_ok = radio_filter_has_match();
   13dcc:	f001 f9cc 	bl	15168 <radio_filter_has_match>
   13dd0:	fa5f f880 	uxtb.w	r8, r0
		devmatch_id = radio_filter_match_get();
   13dd4:	f001 f9d2 	bl	1517c <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   13dd8:	f001 fafe 	bl	153d8 <radio_ar_has_match>
		irkmatch_id = radio_ar_match_get();
   13ddc:	f001 fae4 	bl	153a8 <radio_ar_match_get>
		rssi_ready = radio_rssi_is_ready();
   13de0:	f001 f98a 	bl	150f8 <radio_rssi_is_ready>
	lll_isr_status_reset();
   13de4:	f008 feda 	bl	1cb9c <lll_isr_status_reset>
	if (!trx_done) {
   13de8:	2d00      	cmp	r5, #0
   13dea:	f000 80b3 	beq.w	13f54 <isr_rx+0x1a0>
	if (crc_ok) {
   13dee:	2e00      	cmp	r6, #0
   13df0:	f000 80b0 	beq.w	13f54 <isr_rx+0x1a0>
#if defined(CONFIG_BT_CTLR_PRIVACY)
	/* An IRK match implies address resolution enabled */
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
				    FILTER_IDX_NONE;
#else
	uint8_t rl_idx = FILTER_IDX_NONE;
   13df4:	23ff      	movs	r3, #255	; 0xff
   13df6:	f88d 3017 	strb.w	r3, [sp, #23]
#endif /* CONFIG_BT_CTLR_PRIVACY */

	pdu_rx = (void *)radio_pkt_scratch_get();
   13dfa:	f001 f93b 	bl	15074 <radio_pkt_scratch_get>
   13dfe:	7b23      	ldrb	r3, [r4, #12]
   13e00:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   13e04:	4606      	mov	r6, r0
   13e06:	691d      	ldr	r5, [r3, #16]
	pdu_adv = lll_adv_data_curr_get(lll);

	addr = pdu_adv->adv_ind.addr;
   13e08:	46a9      	mov	r9, r5
	tx_addr = pdu_adv->tx_addr;
   13e0a:	f819 7b02 	ldrb.w	r7, [r9], #2

	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   13e0e:	f007 030f 	and.w	r3, r7, #15
   13e12:	2b01      	cmp	r3, #1
	} else {
		tgt_addr = NULL;
	}
	rx_addr = pdu_adv->rx_addr;

	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   13e14:	7803      	ldrb	r3, [r0, #0]
   13e16:	f003 030f 	and.w	r3, r3, #15
		tgt_addr = pdu_adv->direct_ind.tgt_addr;
   13e1a:	bf0c      	ite	eq
   13e1c:	3508      	addeq	r5, #8
		tgt_addr = NULL;
   13e1e:	2500      	movne	r5, #0
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   13e20:	2b03      	cmp	r3, #3
	tx_addr = pdu_adv->tx_addr;
   13e22:	f3c7 1a80 	ubfx	sl, r7, #6, #1
	rx_addr = pdu_adv->rx_addr;
   13e26:	ea4f 17d7 	mov.w	r7, r7, lsr #7
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   13e2a:	d133      	bne.n	13e94 <isr_rx+0xe0>
   13e2c:	7843      	ldrb	r3, [r0, #1]
   13e2e:	2b0c      	cmp	r3, #12
   13e30:	f040 8090 	bne.w	13f54 <isr_rx+0x1a0>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   13e34:	2d00      	cmp	r5, #0
   13e36:	f040 808d 	bne.w	13f54 <isr_rx+0x1a0>
	    (tgt_addr == NULL) &&
	    lll_adv_scan_req_check(lll, pdu_rx, tx_addr, addr, devmatch_ok,
   13e3a:	f10d 0317 	add.w	r3, sp, #23
   13e3e:	e9cd 8300 	strd	r8, r3, [sp]
   13e42:	4601      	mov	r1, r0
   13e44:	464b      	mov	r3, r9
   13e46:	4652      	mov	r2, sl
   13e48:	4620      	mov	r0, r4
   13e4a:	f008 ff12 	bl	1cc72 <lll_adv_scan_req_check>
	    (tgt_addr == NULL) &&
   13e4e:	b308      	cbz	r0, 13e94 <isr_rx+0xe0>
				    &rl_idx)) {
		radio_isr_set(isr_done, lll);
   13e50:	4621      	mov	r1, r4
   13e52:	4844      	ldr	r0, [pc, #272]	; (13f64 <isr_rx+0x1b0>)
   13e54:	f000 ffea 	bl	14e2c <radio_isr_set>
		radio_switch_complete_and_disable();
   13e58:	f001 f928 	bl	150ac <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   13e5c:	7e20      	ldrb	r0, [r4, #24]
   13e5e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   13e62:	69e0      	ldr	r0, [r4, #28]
   13e64:	f001 f89e 	bl	14fa4 <radio_pkt_tx_set>

		/* assert if radio packet ptr is not set and radio started tx */
		LL_ASSERT(!radio_is_ready());
   13e68:	f001 f8cc 	bl	15004 <radio_is_ready>
   13e6c:	b160      	cbz	r0, 13e88 <isr_rx+0xd4>
   13e6e:	4a3e      	ldr	r2, [pc, #248]	; (13f68 <isr_rx+0x1b4>)
   13e70:	493e      	ldr	r1, [pc, #248]	; (13f6c <isr_rx+0x1b8>)
   13e72:	483f      	ldr	r0, [pc, #252]	; (13f70 <isr_rx+0x1bc>)
   13e74:	f240 43fe 	movw	r3, #1278	; 0x4fe
   13e78:	f004 fb76 	bl	18568 <printk>
   13e7c:	4040      	eors	r0, r0
   13e7e:	f380 8811 	msr	BASEPRI, r0
   13e82:	f04f 0003 	mov.w	r0, #3
   13e86:	df02      	svc	2
}
   13e88:	b006      	add	sp, #24
   13e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0U;
   13e8e:	462e      	mov	r6, r5
   13e90:	46a8      	mov	r8, r5
   13e92:	e7a7      	b.n	13de4 <isr_rx+0x30>
	 *       Under this race, peer central would get failed to establish
	 *       connection as the disconnect reason. This is an acceptable
	 *       outcome to keep the thread mode implementation simple when
	 *       disabling connectable advertising.
	 */
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   13e94:	7833      	ldrb	r3, [r6, #0]
   13e96:	f003 030f 	and.w	r3, r3, #15
   13e9a:	2b05      	cmp	r3, #5
   13e9c:	d15a      	bne.n	13f54 <isr_rx+0x1a0>
   13e9e:	7873      	ldrb	r3, [r6, #1]
   13ea0:	2b22      	cmp	r3, #34	; 0x22
   13ea2:	d157      	bne.n	13f54 <isr_rx+0x1a0>
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
		   lll->conn && !lll->conn->slave.cancelled &&
   13ea4:	6863      	ldr	r3, [r4, #4]
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   13ea6:	2b00      	cmp	r3, #0
   13ea8:	d054      	beq.n	13f54 <isr_rx+0x1a0>
		   lll->conn && !lll->conn->slave.cancelled &&
   13eaa:	f893 3020 	ldrb.w	r3, [r3, #32]
   13eae:	079b      	lsls	r3, r3, #30
   13eb0:	d450      	bmi.n	13f54 <isr_rx+0x1a0>
		   lll_adv_connect_ind_check(lll, pdu_rx, tx_addr, addr,
   13eb2:	f10d 0317 	add.w	r3, sp, #23
   13eb6:	e9cd 8302 	strd	r8, r3, [sp, #8]
   13eba:	e9cd 7500 	strd	r7, r5, [sp]
   13ebe:	464b      	mov	r3, r9
   13ec0:	4652      	mov	r2, sl
   13ec2:	4631      	mov	r1, r6
   13ec4:	4620      	mov	r0, r4
   13ec6:	f008 feec 	bl	1cca2 <lll_adv_connect_ind_check>
		   lll->conn && !lll->conn->slave.cancelled &&
   13eca:	2800      	cmp	r0, #0
   13ecc:	d042      	beq.n	13f54 <isr_rx+0x1a0>
		struct node_rx_pdu *rx;

		if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
			rx = ull_pdu_rx_alloc_peek(4);
		} else {
			rx = ull_pdu_rx_alloc_peek(3);
   13ece:	2003      	movs	r0, #3
   13ed0:	f7fd f87c 	bl	10fcc <ull_pdu_rx_alloc_peek>
		}

		if (!rx) {
   13ed4:	2800      	cmp	r0, #0
   13ed6:	d03d      	beq.n	13f54 <isr_rx+0x1a0>
			return -ENOBUFS;
		}

		radio_isr_set(isr_abort, lll);
   13ed8:	4826      	ldr	r0, [pc, #152]	; (13f74 <isr_rx+0x1c0>)
   13eda:	4621      	mov	r1, r4
   13edc:	f000 ffa6 	bl	14e2c <radio_isr_set>
		radio_disable();
   13ee0:	f001 f872 	bl	14fc8 <radio_disable>

		/* assert if radio started tx */
		LL_ASSERT(!radio_is_ready());
   13ee4:	f001 f88e 	bl	15004 <radio_is_ready>
   13ee8:	b160      	cbz	r0, 13f04 <isr_rx+0x150>
   13eea:	4a1f      	ldr	r2, [pc, #124]	; (13f68 <isr_rx+0x1b4>)
   13eec:	491f      	ldr	r1, [pc, #124]	; (13f6c <isr_rx+0x1b8>)
   13eee:	4820      	ldr	r0, [pc, #128]	; (13f70 <isr_rx+0x1bc>)
   13ef0:	f240 5345 	movw	r3, #1349	; 0x545
   13ef4:	f004 fb38 	bl	18568 <printk>
   13ef8:	4040      	eors	r0, r0
   13efa:	f380 8811 	msr	BASEPRI, r0
   13efe:	f04f 0003 	mov.w	r0, #3
   13f02:	df02      	svc	2
			lll->conn->rssi_latest =  radio_rssi_get();
		}
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

		/* Stop further LLL radio events */
		lll->conn->slave.initiated = 1;
   13f04:	6862      	ldr	r2, [r4, #4]
   13f06:	f892 3020 	ldrb.w	r3, [r2, #32]
   13f0a:	f043 0301 	orr.w	r3, r3, #1
   13f0e:	f882 3020 	strb.w	r3, [r2, #32]

		rx = ull_pdu_rx_alloc();
   13f12:	f7fd f873 	bl	10ffc <ull_pdu_rx_alloc>

		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   13f16:	2314      	movs	r3, #20
		rx = ull_pdu_rx_alloc();
   13f18:	4605      	mov	r5, r0
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   13f1a:	7103      	strb	r3, [r0, #4]
		rx->hdr.handle = 0xffff;
   13f1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13f20:	80c3      	strh	r3, [r0, #6]

		memcpy(rx->pdu, pdu_rx, (offsetof(struct pdu_adv, connect_ind) +
   13f22:	2224      	movs	r2, #36	; 0x24
   13f24:	4631      	mov	r1, r6
   13f26:	301c      	adds	r0, #28
   13f28:	f005 fe3c 	bl	19ba4 <memcpy>
					 sizeof(struct pdu_adv_connect_ind)));

		ftr = &(rx->hdr.rx_ftr);
		ftr->param = lll;
   13f2c:	60ac      	str	r4, [r5, #8]
		ftr->ticks_anchor = radio_tmr_start_get();
   13f2e:	f001 f9dd 	bl	152ec <radio_tmr_start_get>
   13f32:	6128      	str	r0, [r5, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   13f34:	f001 fa2c 	bl	15390 <radio_tmr_end_get>
				    radio_tx_chain_delay_get(0, 0);
   13f38:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   13f3a:	4604      	mov	r4, r0
				    radio_tx_chain_delay_get(0, 0);
   13f3c:	4608      	mov	r0, r1
   13f3e:	f009 f884 	bl	1d04a <radio_tx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   13f42:	1a24      	subs	r4, r4, r0

		if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
			ftr->extra = ull_pdu_rx_alloc();
		}

		ull_rx_put(rx->hdr.link, rx);
   13f44:	4629      	mov	r1, r5
   13f46:	6828      	ldr	r0, [r5, #0]
		ftr->radio_end_us = radio_tmr_end_get() -
   13f48:	616c      	str	r4, [r5, #20]
		ull_rx_put(rx->hdr.link, rx);
   13f4a:	f7fd f86d 	bl	11028 <ull_rx_put>
		ull_rx_sched();
   13f4e:	f7fd f87b 	bl	11048 <ull_rx_sched>
		if (!err) {
   13f52:	e799      	b.n	13e88 <isr_rx+0xd4>
	radio_isr_set(isr_done, param);
   13f54:	4803      	ldr	r0, [pc, #12]	; (13f64 <isr_rx+0x1b0>)
   13f56:	4621      	mov	r1, r4
   13f58:	f000 ff68 	bl	14e2c <radio_isr_set>
	radio_disable();
   13f5c:	f001 f834 	bl	14fc8 <radio_disable>
   13f60:	e792      	b.n	13e88 <isr_rx+0xd4>
   13f62:	bf00      	nop
   13f64:	0001cc23 	.word	0x0001cc23
   13f68:	00022282 	.word	0x00022282
   13f6c:	000222cc 	.word	0x000222cc
   13f70:	0001f734 	.word	0x0001f734
   13f74:	0001cbd5 	.word	0x0001cbd5

00013f78 <ticker_stop_cb>:
	lll_done(param);
}

static void ticker_stop_cb(uint32_t ticks_at_expire, uint32_t remainder, uint16_t lazy,
			   uint8_t force, void *param)
{
   13f78:	b508      	push	{r3, lr}
	radio_isr_set(isr_done_cleanup, param);
   13f7a:	9902      	ldr	r1, [sp, #8]
   13f7c:	4803      	ldr	r0, [pc, #12]	; (13f8c <ticker_stop_cb+0x14>)
   13f7e:	f000 ff55 	bl	14e2c <radio_isr_set>
	radio_disable();
}
   13f82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_disable();
   13f86:	f001 b81f 	b.w	14fc8 <radio_disable>
   13f8a:	bf00      	nop
   13f8c:	0001cd19 	.word	0x0001cd19

00013f90 <prepare_cb>:
{
   13f90:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll = p->param;
   13f92:	68c4      	ldr	r4, [r0, #12]
	lll->state = 0U;
   13f94:	7923      	ldrb	r3, [r4, #4]
   13f96:	f36f 0300 	bfc	r3, #0, #1
{
   13f9a:	b08d      	sub	sp, #52	; 0x34
	lll->state = 0U;
   13f9c:	7123      	strb	r3, [r4, #4]
{
   13f9e:	4606      	mov	r6, r0
	radio_reset();
   13fa0:	f000 ff64 	bl	14e6c <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   13fa4:	2000      	movs	r0, #0
   13fa6:	f000 ff95 	bl	14ed4 <radio_tx_power_set>
	radio_phy_set(0, 0);
   13faa:	2100      	movs	r1, #0
   13fac:	4608      	mov	r0, r1
   13fae:	f000 ff81 	bl	14eb4 <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_LEG_PAYLOAD_SIZE_MAX, 0);
   13fb2:	2200      	movs	r2, #0
   13fb4:	2125      	movs	r1, #37	; 0x25
   13fb6:	2008      	movs	r0, #8
   13fb8:	f000 ffc2 	bl	14f40 <radio_pkt_configure>
	node_rx = ull_pdu_rx_alloc_peek(1);
   13fbc:	2001      	movs	r0, #1
   13fbe:	f7fd f805 	bl	10fcc <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   13fc2:	4605      	mov	r5, r0
   13fc4:	b958      	cbnz	r0, 13fde <prepare_cb+0x4e>
   13fc6:	4a49      	ldr	r2, [pc, #292]	; (140ec <prepare_cb+0x15c>)
   13fc8:	4949      	ldr	r1, [pc, #292]	; (140f0 <prepare_cb+0x160>)
   13fca:	484a      	ldr	r0, [pc, #296]	; (140f4 <prepare_cb+0x164>)
   13fcc:	23fe      	movs	r3, #254	; 0xfe
   13fce:	f004 facb 	bl	18568 <printk>
   13fd2:	4040      	eors	r0, r0
   13fd4:	f380 8811 	msr	BASEPRI, r0
   13fd8:	f04f 0003 	mov.w	r0, #3
   13fdc:	df02      	svc	2
	radio_pkt_rx_set(node_rx->pdu);
   13fde:	f105 001c 	add.w	r0, r5, #28
   13fe2:	f000 ffd9 	bl	14f98 <radio_pkt_rx_set>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   13fe6:	4b44      	ldr	r3, [pc, #272]	; (140f8 <prepare_cb+0x168>)
   13fe8:	930b      	str	r3, [sp, #44]	; 0x2c
	radio_aa_set((uint8_t *)&aa);
   13fea:	a80b      	add	r0, sp, #44	; 0x2c
   13fec:	f000 ff90 	bl	14f10 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   13ff0:	4942      	ldr	r1, [pc, #264]	; (140fc <prepare_cb+0x16c>)
   13ff2:	f240 605b 	movw	r0, #1627	; 0x65b
   13ff6:	f001 f823 	bl	15040 <radio_crc_configure>
	lll_chan_set(37 + lll->chan);
   13ffa:	7920      	ldrb	r0, [r4, #4]
   13ffc:	f3c0 0041 	ubfx	r0, r0, #1, #2
   14000:	3025      	adds	r0, #37	; 0x25
   14002:	f7ff fa69 	bl	134d8 <lll_chan_set>
	radio_isr_set(isr_rx, lll);
   14006:	4621      	mov	r1, r4
   14008:	483d      	ldr	r0, [pc, #244]	; (14100 <prepare_cb+0x170>)
   1400a:	f000 ff0f 	bl	14e2c <radio_isr_set>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1400e:	2096      	movs	r0, #150	; 0x96
   14010:	f001 f8ca 	bl	151a8 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   14014:	2300      	movs	r3, #0
   14016:	461a      	mov	r2, r3
   14018:	4619      	mov	r1, r3
   1401a:	4618      	mov	r0, r3
   1401c:	f001 f83a 	bl	15094 <radio_switch_complete_and_tx>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) && lll->filter_policy) {
   14020:	7923      	ldrb	r3, [r4, #4]
   14022:	f013 0f18 	tst.w	r3, #24
   14026:	d007      	beq.n	14038 <prepare_cb+0xa8>
		struct lll_filter *wl = ull_filter_lll_get(true);
   14028:	2001      	movs	r0, #1
   1402a:	f7ff f84b 	bl	130c4 <ull_filter_lll_get>
		radio_filter_configure(wl->enable_bitmask,
   1402e:	7841      	ldrb	r1, [r0, #1]
   14030:	1c82      	adds	r2, r0, #2
   14032:	7800      	ldrb	r0, [r0, #0]
   14034:	f001 f86a 	bl	1510c <radio_filter_configure>
	ull = HDR_LLL2ULL(lll);
   14038:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   1403a:	6835      	ldr	r5, [r6, #0]
	ticks_at_event += lll_event_offset_get(ull);
   1403c:	4638      	mov	r0, r7
   1403e:	f008 fd7e 	bl	1cb3e <lll_event_offset_get>
   14042:	4405      	add	r5, r0
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   14044:	6872      	ldr	r2, [r6, #4]
   14046:	f105 0109 	add.w	r1, r5, #9
   1404a:	2000      	movs	r0, #0
   1404c:	f001 f8b8 	bl	151c0 <radio_tmr_start>
	radio_tmr_end_capture();
   14050:	f001 f996 	bl	15380 <radio_tmr_end_capture>
	radio_rssi_measure();
   14054:	f001 f838 	bl	150c8 <radio_rssi_measure>
				   ull_scan_lll_handle_get(lll)),
   14058:	4620      	mov	r0, r4
   1405a:	f7fd fc95 	bl	11988 <ull_scan_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_SCAN_BASE +
   1405e:	1d01      	adds	r1, r0, #4
   14060:	b2c9      	uxtb	r1, r1
   14062:	462a      	mov	r2, r5
   14064:	4638      	mov	r0, r7
   14066:	f008 fd78 	bl	1cb5a <lll_preempt_calc>
   1406a:	4601      	mov	r1, r0
   1406c:	b140      	cbz	r0, 14080 <prepare_cb+0xf0>
		radio_isr_set(isr_abort, lll);
   1406e:	4825      	ldr	r0, [pc, #148]	; (14104 <prepare_cb+0x174>)
   14070:	4621      	mov	r1, r4
   14072:	f000 fedb 	bl	14e2c <radio_isr_set>
		radio_disable();
   14076:	f000 ffa7 	bl	14fc8 <radio_disable>
}
   1407a:	2000      	movs	r0, #0
   1407c:	b00d      	add	sp, #52	; 0x34
   1407e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (lll->ticks_window) {
   14080:	6923      	ldr	r3, [r4, #16]
   14082:	b303      	cbz	r3, 140c6 <prepare_cb+0x136>
			ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   14084:	f44f 72af 	mov.w	r2, #350	; 0x15e
   14088:	9208      	str	r2, [sp, #32]
   1408a:	4a1f      	ldr	r2, [pc, #124]	; (14108 <prepare_cb+0x178>)
   1408c:	e9cd 4206 	strd	r4, r2, [sp, #24]
   14090:	4a1e      	ldr	r2, [pc, #120]	; (1410c <prepare_cb+0x17c>)
   14092:	e9cd 3000 	strd	r3, r0, [sp]
   14096:	e9cd 0204 	strd	r0, r2, [sp, #16]
   1409a:	462b      	mov	r3, r5
   1409c:	e9cd 0002 	strd	r0, r0, [sp, #8]
   140a0:	2203      	movs	r2, #3
   140a2:	f008 fa13 	bl	1c4cc <ticker_start>
			LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   140a6:	f030 0302 	bics.w	r3, r0, #2
   140aa:	d00c      	beq.n	140c6 <prepare_cb+0x136>
   140ac:	4a0f      	ldr	r2, [pc, #60]	; (140ec <prepare_cb+0x15c>)
   140ae:	4918      	ldr	r1, [pc, #96]	; (14110 <prepare_cb+0x180>)
   140b0:	4810      	ldr	r0, [pc, #64]	; (140f4 <prepare_cb+0x164>)
   140b2:	f240 135f 	movw	r3, #351	; 0x15f
   140b6:	f004 fa57 	bl	18568 <printk>
   140ba:	4040      	eors	r0, r0
   140bc:	f380 8811 	msr	BASEPRI, r0
   140c0:	f04f 0003 	mov.w	r0, #3
   140c4:	df02      	svc	2
		ret = lll_prepare_done(lll);
   140c6:	4620      	mov	r0, r4
   140c8:	f008 fd34 	bl	1cb34 <lll_prepare_done>
		LL_ASSERT(!ret);
   140cc:	2800      	cmp	r0, #0
   140ce:	d0d4      	beq.n	1407a <prepare_cb+0xea>
   140d0:	4a06      	ldr	r2, [pc, #24]	; (140ec <prepare_cb+0x15c>)
   140d2:	4910      	ldr	r1, [pc, #64]	; (14114 <prepare_cb+0x184>)
   140d4:	4807      	ldr	r0, [pc, #28]	; (140f4 <prepare_cb+0x164>)
   140d6:	f44f 73bc 	mov.w	r3, #376	; 0x178
   140da:	f004 fa45 	bl	18568 <printk>
   140de:	4040      	eors	r0, r0
   140e0:	f380 8811 	msr	BASEPRI, r0
   140e4:	f04f 0003 	mov.w	r0, #3
   140e8:	df02      	svc	2
   140ea:	e7c6      	b.n	1407a <prepare_cb+0xea>
   140ec:	0002230b 	.word	0x0002230b
   140f0:	00022356 	.word	0x00022356
   140f4:	0001f734 	.word	0x0001f734
   140f8:	8e89bed6 	.word	0x8e89bed6
   140fc:	00555555 	.word	0x00555555
   14100:	00014375 	.word	0x00014375
   14104:	0001ce0f 	.word	0x0001ce0f
   14108:	00014235 	.word	0x00014235
   1410c:	00013f79 	.word	0x00013f79
   14110:	00021dbc 	.word	0x00021dbc
   14114:	00021cbb 	.word	0x00021cbb

00014118 <isr_common_done>:

	radio_isr_set(isr_rx, param);
}

static void isr_common_done(void *param)
{
   14118:	b538      	push	{r3, r4, r5, lr}
   1411a:	4604      	mov	r4, r0
	struct node_rx_pdu *node_rx;
	struct lll_scan *lll;

	/* Clear radio status and events */
	lll_isr_status_reset();
   1411c:	f008 fd3e 	bl	1cb9c <lll_isr_status_reset>

	/* Reset scanning state */
	lll = param;
	lll->state = 0U;
   14120:	7923      	ldrb	r3, [r4, #4]
   14122:	f36f 0300 	bfc	r3, #0, #1
   14126:	7123      	strb	r3, [r4, #4]
#if defined(CONFIG_BT_CTLR_ADV_EXT)
	lll->is_adv_ind = 0U;
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	/* setup tIFS switching */
	radio_tmr_tifs_set(EVENT_IFS_US);
   14128:	2096      	movs	r0, #150	; 0x96
   1412a:	f001 f83d 	bl	151a8 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1412e:	2300      	movs	r3, #0
   14130:	4618      	mov	r0, r3
   14132:	461a      	mov	r2, r3
   14134:	4619      	mov	r1, r3
   14136:	f000 ffad 	bl	15094 <radio_switch_complete_and_tx>

	node_rx = ull_pdu_rx_alloc_peek(1);
   1413a:	2001      	movs	r0, #1
   1413c:	f7fc ff46 	bl	10fcc <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   14140:	4605      	mov	r5, r0
   14142:	b960      	cbnz	r0, 1415e <isr_common_done+0x46>
   14144:	4a0c      	ldr	r2, [pc, #48]	; (14178 <isr_common_done+0x60>)
   14146:	490d      	ldr	r1, [pc, #52]	; (1417c <isr_common_done+0x64>)
   14148:	480d      	ldr	r0, [pc, #52]	; (14180 <isr_common_done+0x68>)
   1414a:	f240 2383 	movw	r3, #643	; 0x283
   1414e:	f004 fa0b 	bl	18568 <printk>
   14152:	4040      	eors	r0, r0
   14154:	f380 8811 	msr	BASEPRI, r0
   14158:	f04f 0003 	mov.w	r0, #3
   1415c:	df02      	svc	2
	radio_pkt_rx_set(node_rx->pdu);
   1415e:	f105 001c 	add.w	r0, r5, #28
   14162:	f000 ff19 	bl	14f98 <radio_pkt_rx_set>
		radio_ar_configure(count, irks, 0);
#endif
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	radio_rssi_measure();
   14166:	f000 ffaf 	bl	150c8 <radio_rssi_measure>

	radio_isr_set(isr_rx, param);
   1416a:	4621      	mov	r1, r4
   1416c:	4805      	ldr	r0, [pc, #20]	; (14184 <isr_common_done+0x6c>)
}
   1416e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(isr_rx, param);
   14172:	f000 be5b 	b.w	14e2c <radio_isr_set>
   14176:	bf00      	nop
   14178:	0002230b 	.word	0x0002230b
   1417c:	00022356 	.word	0x00022356
   14180:	0001f734 	.word	0x0001f734
   14184:	00014375 	.word	0x00014375

00014188 <isr_tx>:
{
   14188:	b570      	push	{r4, r5, r6, lr}
   1418a:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   1418c:	f008 fcf6 	bl	1cb7c <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   14190:	2096      	movs	r0, #150	; 0x96
   14192:	f001 f809 	bl	151a8 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   14196:	2300      	movs	r3, #0
   14198:	4618      	mov	r0, r3
   1419a:	461a      	mov	r2, r3
   1419c:	4619      	mov	r1, r3
   1419e:	f000 ff79 	bl	15094 <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   141a2:	2001      	movs	r0, #1
   141a4:	f7fc ff12 	bl	10fcc <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   141a8:	4604      	mov	r4, r0
   141aa:	b960      	cbnz	r0, 141c6 <isr_tx+0x3e>
   141ac:	4a1c      	ldr	r2, [pc, #112]	; (14220 <isr_tx+0x98>)
   141ae:	491d      	ldr	r1, [pc, #116]	; (14224 <isr_tx+0x9c>)
   141b0:	481d      	ldr	r0, [pc, #116]	; (14228 <isr_tx+0xa0>)
   141b2:	f44f 7312 	mov.w	r3, #584	; 0x248
   141b6:	f004 f9d7 	bl	18568 <printk>
   141ba:	4040      	eors	r0, r0
   141bc:	f380 8811 	msr	BASEPRI, r0
   141c0:	f04f 0003 	mov.w	r0, #3
   141c4:	df02      	svc	2
	radio_pkt_rx_set(node_rx->pdu);
   141c6:	f104 001c 	add.w	r0, r4, #28
   141ca:	f000 fee5 	bl	14f98 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   141ce:	f000 ff19 	bl	15004 <radio_is_ready>
   141d2:	b160      	cbz	r0, 141ee <isr_tx+0x66>
   141d4:	4a12      	ldr	r2, [pc, #72]	; (14220 <isr_tx+0x98>)
   141d6:	4915      	ldr	r1, [pc, #84]	; (1422c <isr_tx+0xa4>)
   141d8:	4813      	ldr	r0, [pc, #76]	; (14228 <isr_tx+0xa0>)
   141da:	f44f 7313 	mov.w	r3, #588	; 0x24c
   141de:	f004 f9c3 	bl	18568 <printk>
   141e2:	4040      	eors	r0, r0
   141e4:	f380 8811 	msr	BASEPRI, r0
   141e8:	f04f 0003 	mov.w	r0, #3
   141ec:	df02      	svc	2
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   141ee:	f001 f8d5 	bl	1539c <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   141f2:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   141f4:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   141f6:	4608      	mov	r0, r1
   141f8:	f008 ff2b 	bl	1d052 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   141fc:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   141fe:	4606      	mov	r6, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   14200:	4608      	mov	r0, r1
   14202:	f008 ff22 	bl	1d04a <radio_tx_chain_delay_get>
   14206:	4434      	add	r4, r6
   14208:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   1420a:	1a20      	subs	r0, r4, r0
   1420c:	f001 f880 	bl	15310 <radio_tmr_hcto_configure>
	radio_rssi_measure();
   14210:	f000 ff5a 	bl	150c8 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   14214:	4629      	mov	r1, r5
   14216:	4806      	ldr	r0, [pc, #24]	; (14230 <isr_tx+0xa8>)
}
   14218:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	radio_isr_set(isr_rx, param);
   1421c:	f000 be06 	b.w	14e2c <radio_isr_set>
   14220:	0002230b 	.word	0x0002230b
   14224:	00022356 	.word	0x00022356
   14228:	0001f734 	.word	0x0001f734
   1422c:	000222cc 	.word	0x000222cc
   14230:	00014375 	.word	0x00014375

00014234 <ticker_op_start_cb>:
{
   14234:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   14236:	b160      	cbz	r0, 14252 <ticker_op_start_cb+0x1e>
   14238:	4a06      	ldr	r2, [pc, #24]	; (14254 <ticker_op_start_cb+0x20>)
   1423a:	4907      	ldr	r1, [pc, #28]	; (14258 <ticker_op_start_cb+0x24>)
   1423c:	4807      	ldr	r0, [pc, #28]	; (1425c <ticker_op_start_cb+0x28>)
   1423e:	f240 13e1 	movw	r3, #481	; 0x1e1
   14242:	f004 f991 	bl	18568 <printk>
   14246:	4040      	eors	r0, r0
   14248:	f380 8811 	msr	BASEPRI, r0
   1424c:	f04f 0003 	mov.w	r0, #3
   14250:	df02      	svc	2
}
   14252:	bd08      	pop	{r3, pc}
   14254:	0002230b 	.word	0x0002230b
   14258:	000220a3 	.word	0x000220a3
   1425c:	0001f734 	.word	0x0001f734

00014260 <is_abort_cb>:
	if (next != curr) {
   14260:	4281      	cmp	r1, r0
{
   14262:	b508      	push	{r3, lr}
	if (next != curr) {
   14264:	d015      	beq.n	14292 <is_abort_cb+0x32>
			*resume_cb = resume_prepare_cb;
   14266:	4b0e      	ldr	r3, [pc, #56]	; (142a0 <is_abort_cb+0x40>)
   14268:	6013      	str	r3, [r2, #0]
			err = lll_hfclock_on();
   1426a:	f7ff fab5 	bl	137d8 <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   1426e:	2800      	cmp	r0, #0
   14270:	da0c      	bge.n	1428c <is_abort_cb+0x2c>
   14272:	4a0c      	ldr	r2, [pc, #48]	; (142a4 <is_abort_cb+0x44>)
   14274:	490c      	ldr	r1, [pc, #48]	; (142a8 <is_abort_cb+0x48>)
   14276:	480d      	ldr	r0, [pc, #52]	; (142ac <is_abort_cb+0x4c>)
   14278:	f240 139d 	movw	r3, #413	; 0x19d
   1427c:	f004 f974 	bl	18568 <printk>
   14280:	4040      	eors	r0, r0
   14282:	f380 8811 	msr	BASEPRI, r0
   14286:	f04f 0003 	mov.w	r0, #3
   1428a:	df02      	svc	2
   1428c:	f06f 000a 	mvn.w	r0, #10
   14290:	e005      	b.n	1429e <is_abort_cb+0x3e>
		radio_isr_set(isr_window, lll);
   14292:	4807      	ldr	r0, [pc, #28]	; (142b0 <is_abort_cb+0x50>)
   14294:	f000 fdca 	bl	14e2c <radio_isr_set>
	radio_disable();
   14298:	f000 fe96 	bl	14fc8 <radio_disable>
	return 0;
   1429c:	2000      	movs	r0, #0
}
   1429e:	bd08      	pop	{r3, pc}
   142a0:	0001cd61 	.word	0x0001cd61
   142a4:	0002230b 	.word	0x0002230b
   142a8:	00022232 	.word	0x00022232
   142ac:	0001f734 	.word	0x0001f734
   142b0:	0001cd89 	.word	0x0001cd89

000142b4 <abort_cb>:
{
   142b4:	b510      	push	{r4, lr}
   142b6:	460c      	mov	r4, r1
	if (!prepare_param) {
   142b8:	b930      	cbnz	r0, 142c8 <abort_cb+0x14>
			radio_isr_set(isr_abort, param);
   142ba:	480e      	ldr	r0, [pc, #56]	; (142f4 <abort_cb+0x40>)
   142bc:	f000 fdb6 	bl	14e2c <radio_isr_set>
}
   142c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			radio_disable();
   142c4:	f000 be80 	b.w	14fc8 <radio_disable>
	err = lll_hfclock_off();
   142c8:	f7ff fa9c 	bl	13804 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   142cc:	2800      	cmp	r0, #0
   142ce:	da0c      	bge.n	142ea <abort_cb+0x36>
   142d0:	4a09      	ldr	r2, [pc, #36]	; (142f8 <abort_cb+0x44>)
   142d2:	490a      	ldr	r1, [pc, #40]	; (142fc <abort_cb+0x48>)
   142d4:	480a      	ldr	r0, [pc, #40]	; (14300 <abort_cb+0x4c>)
   142d6:	f240 13d1 	movw	r3, #465	; 0x1d1
   142da:	f004 f945 	bl	18568 <printk>
   142de:	4040      	eors	r0, r0
   142e0:	f380 8811 	msr	BASEPRI, r0
   142e4:	f04f 0003 	mov.w	r0, #3
   142e8:	df02      	svc	2
	lll_done(param);
   142ea:	4620      	mov	r0, r4
}
   142ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   142f0:	f7ff b89c 	b.w	1342c <lll_done>
   142f4:	0001ce0f 	.word	0x0001ce0f
   142f8:	0002230b 	.word	0x0002230b
   142fc:	00022232 	.word	0x00022232
   14300:	0001f734 	.word	0x0001f734

00014304 <lll_scan_prepare>:
{
   14304:	b513      	push	{r0, r1, r4, lr}
   14306:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   14308:	f7ff fa66 	bl	137d8 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1430c:	2800      	cmp	r0, #0
   1430e:	da0b      	bge.n	14328 <lll_scan_prepare+0x24>
   14310:	4a11      	ldr	r2, [pc, #68]	; (14358 <lll_scan_prepare+0x54>)
   14312:	4912      	ldr	r1, [pc, #72]	; (1435c <lll_scan_prepare+0x58>)
   14314:	4812      	ldr	r0, [pc, #72]	; (14360 <lll_scan_prepare+0x5c>)
   14316:	236e      	movs	r3, #110	; 0x6e
   14318:	f004 f926 	bl	18568 <printk>
   1431c:	4040      	eors	r0, r0
   1431e:	f380 8811 	msr	BASEPRI, r0
   14322:	f04f 0003 	mov.w	r0, #3
   14326:	df02      	svc	2
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   14328:	4a0e      	ldr	r2, [pc, #56]	; (14364 <lll_scan_prepare+0x60>)
   1432a:	490f      	ldr	r1, [pc, #60]	; (14368 <lll_scan_prepare+0x64>)
   1432c:	480f      	ldr	r0, [pc, #60]	; (1436c <lll_scan_prepare+0x68>)
   1432e:	9400      	str	r4, [sp, #0]
   14330:	2300      	movs	r3, #0
   14332:	f008 f979 	bl	1c628 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   14336:	b168      	cbz	r0, 14354 <lll_scan_prepare+0x50>
   14338:	3077      	adds	r0, #119	; 0x77
   1433a:	d00b      	beq.n	14354 <lll_scan_prepare+0x50>
   1433c:	4a06      	ldr	r2, [pc, #24]	; (14358 <lll_scan_prepare+0x54>)
   1433e:	490c      	ldr	r1, [pc, #48]	; (14370 <lll_scan_prepare+0x6c>)
   14340:	4807      	ldr	r0, [pc, #28]	; (14360 <lll_scan_prepare+0x5c>)
   14342:	2371      	movs	r3, #113	; 0x71
   14344:	f004 f910 	bl	18568 <printk>
   14348:	4040      	eors	r0, r0
   1434a:	f380 8811 	msr	BASEPRI, r0
   1434e:	f04f 0003 	mov.w	r0, #3
   14352:	df02      	svc	2
}
   14354:	b002      	add	sp, #8
   14356:	bd10      	pop	{r4, pc}
   14358:	0002230b 	.word	0x0002230b
   1435c:	00022232 	.word	0x00022232
   14360:	0001f734 	.word	0x0001f734
   14364:	00013f91 	.word	0x00013f91
   14368:	000142b5 	.word	0x000142b5
   1436c:	00014261 	.word	0x00014261
   14370:	000222e7 	.word	0x000222e7

00014374 <isr_rx>:
{
   14374:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   14378:	4605      	mov	r5, r0
	trx_done = radio_is_done();
   1437a:	f000 fe4d 	bl	15018 <radio_is_done>
	if (trx_done) {
   1437e:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
   14382:	f000 808b 	beq.w	1449c <isr_rx+0x128>
		crc_ok = radio_crc_is_valid();
   14386:	f000 fe67 	bl	15058 <radio_crc_is_valid>
   1438a:	fa5f f880 	uxtb.w	r8, r0
		devmatch_ok = radio_filter_has_match();
   1438e:	f000 feeb 	bl	15168 <radio_filter_has_match>
   14392:	b2c7      	uxtb	r7, r0
		devmatch_id = radio_filter_match_get();
   14394:	f000 fef2 	bl	1517c <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   14398:	f001 f81e 	bl	153d8 <radio_ar_has_match>
		irkmatch_id = radio_ar_match_get();
   1439c:	f001 f804 	bl	153a8 <radio_ar_match_get>
		rssi_ready = radio_rssi_is_ready();
   143a0:	f000 feaa 	bl	150f8 <radio_rssi_is_ready>
   143a4:	b2c6      	uxtb	r6, r0
	lll_isr_status_reset();
   143a6:	f008 fbf9 	bl	1cb9c <lll_isr_status_reset>
	if (!trx_done) {
   143aa:	2c00      	cmp	r4, #0
   143ac:	f000 8089 	beq.w	144c2 <isr_rx+0x14e>
	node_rx = ull_pdu_rx_alloc_peek(1);
   143b0:	2001      	movs	r0, #1
   143b2:	f7fc fe0b 	bl	10fcc <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   143b6:	4604      	mov	r4, r0
   143b8:	b960      	cbnz	r0, 143d4 <isr_rx+0x60>
   143ba:	4a5f      	ldr	r2, [pc, #380]	; (14538 <isr_rx+0x1c4>)
   143bc:	495f      	ldr	r1, [pc, #380]	; (1453c <isr_rx+0x1c8>)
   143be:	4860      	ldr	r0, [pc, #384]	; (14540 <isr_rx+0x1cc>)
   143c0:	f240 230f 	movw	r3, #527	; 0x20f
   143c4:	f004 f8d0 	bl	18568 <printk>
   143c8:	4040      	eors	r0, r0
   143ca:	f380 8811 	msr	BASEPRI, r0
   143ce:	f04f 0003 	mov.w	r0, #3
   143d2:	df02      	svc	2
	if (crc_ok && isr_rx_scan_check(lll, irkmatch_ok, devmatch_ok,
   143d4:	f1b8 0f00 	cmp.w	r8, #0
   143d8:	d073      	beq.n	144c2 <isr_rx+0x14e>
		 (!devmatch_ok || ull_filter_lll_rl_idx_allowed(irkmatch_ok,
								rl_idx))) ||
		(((lll->filter_policy & 0x01) != 0) &&
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(rl_idx)));
#else
	return ((lll->filter_policy & 0x01) == 0U) ||
   143da:	7929      	ldrb	r1, [r5, #4]
   143dc:	0708      	lsls	r0, r1, #28
   143de:	d501      	bpl.n	143e4 <isr_rx+0x70>
	if (crc_ok && isr_rx_scan_check(lll, irkmatch_ok, devmatch_ok,
   143e0:	2f00      	cmp	r7, #0
   143e2:	d06e      	beq.n	144c2 <isr_rx+0x14e>

		return 0;
#endif /* CONFIG_BT_CENTRAL */

	/* Active scanner */
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   143e4:	7f22      	ldrb	r2, [r4, #28]
	bool dir_report = false;
   143e6:	2300      	movs	r3, #0
   143e8:	f88d 300f 	strb.w	r3, [sp, #15]
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   143ec:	f012 030f 	ands.w	r3, r2, #15
   143f0:	d002      	beq.n	143f8 <isr_rx+0x84>
   143f2:	2b06      	cmp	r3, #6
   143f4:	f040 809e 	bne.w	14534 <isr_rx+0x1c0>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   143f8:	7f60      	ldrb	r0, [r4, #29]
   143fa:	2825      	cmp	r0, #37	; 0x25
   143fc:	d852      	bhi.n	144a4 <isr_rx+0x130>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind)) &&
		   lll->type &&
   143fe:	0689      	lsls	r1, r1, #26
   14400:	d550      	bpl.n	144a4 <isr_rx+0x130>
		bt_addr_t *lrpa;
#endif /* CONFIG_BT_CTLR_PRIVACY */
		int err;

		/* setup tIFS switching */
		radio_tmr_tifs_set(EVENT_IFS_US);
   14402:	2096      	movs	r0, #150	; 0x96
   14404:	f000 fed0 	bl	151a8 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   14408:	2000      	movs	r0, #0
   1440a:	f000 fe37 	bl	1507c <radio_switch_complete_and_rx>

		/* save the adv packet */
		err = isr_rx_scan_report(lll, rssi_ready,
   1440e:	2100      	movs	r1, #0
   14410:	4630      	mov	r0, r6
   14412:	f008 fcda 	bl	1cdca <isr_rx_scan_report.isra.0>
					 irkmatch_ok ? rl_idx : FILTER_IDX_NONE,
					 false);
		if (err) {
   14416:	2800      	cmp	r0, #0
   14418:	d153      	bne.n	144c2 <isr_rx+0x14e>
			return err;
		}

		/* prepare the scan request packet */
		pdu_tx = (void *)radio_pkt_scratch_get();
   1441a:	f000 fe2b 	bl	15074 <radio_pkt_scratch_get>
			       BDADDR_SIZE);
		} else {
#else
		if (1) {
#endif /* CONFIG_BT_CTLR_PRIVACY */
			pdu_tx->tx_addr = lll->init_addr_type;
   1441e:	792b      	ldrb	r3, [r5, #4]
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
   14420:	7f22      	ldrb	r2, [r4, #28]
			pdu_tx->tx_addr = lll->init_addr_type;
   14422:	f3c3 1380 	ubfx	r3, r3, #6, #1
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   14426:	019b      	lsls	r3, r3, #6
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
   14428:	f3c2 1280 	ubfx	r2, r2, #6, #1
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   1442c:	f043 0303 	orr.w	r3, r3, #3
   14430:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   14434:	7802      	ldrb	r2, [r0, #0]
   14436:	f002 0230 	and.w	r2, r2, #48	; 0x30
   1443a:	4313      	orrs	r3, r2
   1443c:	7003      	strb	r3, [r0, #0]
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
   1443e:	230c      	movs	r3, #12
   14440:	7043      	strb	r3, [r0, #1]
		pdu_tx = (void *)radio_pkt_scratch_get();
   14442:	4606      	mov	r6, r0
			memcpy(&pdu_tx->scan_req.scan_addr[0],
   14444:	2206      	movs	r2, #6
   14446:	1d69      	adds	r1, r5, #5
   14448:	3002      	adds	r0, #2
   1444a:	f005 fbab 	bl	19ba4 <memcpy>
			       &lll->init_addr[0], BDADDR_SIZE);
		}
		memcpy(&pdu_tx->scan_req.adv_addr[0],
   1444e:	2206      	movs	r2, #6
   14450:	f104 011e 	add.w	r1, r4, #30
   14454:	f106 0008 	add.w	r0, r6, #8
   14458:	f005 fba4 	bl	19ba4 <memcpy>
		       &pdu_adv_rx->adv_ind.addr[0], BDADDR_SIZE);

		radio_pkt_tx_set(pdu_tx);
   1445c:	4630      	mov	r0, r6
   1445e:	f000 fda1 	bl	14fa4 <radio_pkt_tx_set>

		/* assert if radio packet ptr is not set and radio started tx */
		LL_ASSERT(!radio_is_ready());
   14462:	f000 fdcf 	bl	15004 <radio_is_ready>
   14466:	b160      	cbz	r0, 14482 <isr_rx+0x10e>
   14468:	4a33      	ldr	r2, [pc, #204]	; (14538 <isr_rx+0x1c4>)
   1446a:	4936      	ldr	r1, [pc, #216]	; (14544 <isr_rx+0x1d0>)
   1446c:	4834      	ldr	r0, [pc, #208]	; (14540 <isr_rx+0x1cc>)
   1446e:	f240 4326 	movw	r3, #1062	; 0x426
   14472:	f004 f879 	bl	18568 <printk>
   14476:	4040      	eors	r0, r0
   14478:	f380 8811 	msr	BASEPRI, r0
   1447c:	f04f 0003 	mov.w	r0, #3
   14480:	df02      	svc	2
			lll_prof_cputime_capture();

		}

		/* capture end of Tx-ed PDU, used to calculate HCTO. */
		radio_tmr_end_capture();
   14482:	f000 ff7d 	bl	15380 <radio_tmr_end_capture>
					 radio_rx_chain_delay_get(0, 0) -
					 CONFIG_BT_CTLR_GPIO_PA_OFFSET);
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN */

		/* switch scanner state to active */
		lll->state = 1U;
   14486:	792b      	ldrb	r3, [r5, #4]
		if (pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) {
			lll->is_adv_ind = 1U;
		}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

		radio_isr_set(isr_tx, lll);
   14488:	482f      	ldr	r0, [pc, #188]	; (14548 <isr_rx+0x1d4>)
		lll->state = 1U;
   1448a:	f043 0301 	orr.w	r3, r3, #1
   1448e:	712b      	strb	r3, [r5, #4]
		radio_isr_set(isr_tx, lll);
   14490:	4629      	mov	r1, r5
   14492:	f000 fccb 	bl	14e2c <radio_isr_set>
}
   14496:	b004      	add	sp, #16
   14498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0U;
   1449c:	46a0      	mov	r8, r4
   1449e:	4626      	mov	r6, r4
   144a0:	4627      	mov	r7, r4
   144a2:	e780      	b.n	143a6 <isr_rx+0x32>

		return 0;
	}
	/* Passive scanner or scan responses */
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   144a4:	f012 0f0d 	tst.w	r2, #13
   144a8:	d001      	beq.n	144ae <isr_rx+0x13a>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   144aa:	2b06      	cmp	r3, #6
   144ac:	d102      	bne.n	144b4 <isr_rx+0x140>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   144ae:	7f61      	ldrb	r1, [r4, #29]
   144b0:	2925      	cmp	r1, #37	; 0x25
   144b2:	d91e      	bls.n	144f2 <isr_rx+0x17e>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
   144b4:	2b01      	cmp	r3, #1
   144b6:	d00b      	beq.n	144d0 <isr_rx+0x15c>
					rl_idx, &dir_report))) ||
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
		   (lll->phy)) ||
#endif /* CONFIG_BT_CTLR_ADV_EXT */
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   144b8:	7f23      	ldrb	r3, [r4, #28]
					rl_idx, &dir_report))) ||
   144ba:	f003 030f 	and.w	r3, r3, #15
   144be:	2b04      	cmp	r3, #4
   144c0:	d020      	beq.n	14504 <isr_rx+0x190>
	radio_isr_set(isr_done, lll);
   144c2:	4822      	ldr	r0, [pc, #136]	; (1454c <isr_rx+0x1d8>)
   144c4:	4629      	mov	r1, r5
   144c6:	f000 fcb1 	bl	14e2c <radio_isr_set>
	radio_disable();
   144ca:	f000 fd7d 	bl	14fc8 <radio_disable>
   144ce:	e7e2      	b.n	14496 <isr_rx+0x122>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
   144d0:	7f63      	ldrb	r3, [r4, #29]
   144d2:	2b0c      	cmp	r3, #12
   144d4:	d1f5      	bne.n	144c2 <isr_rx+0x14e>
		    lll_scan_tgta_check(lll, false, pdu_adv_rx->rx_addr,
   144d6:	f10d 030f 	add.w	r3, sp, #15
   144da:	9301      	str	r3, [sp, #4]
   144dc:	23ff      	movs	r3, #255	; 0xff
   144de:	9300      	str	r3, [sp, #0]
   144e0:	09d2      	lsrs	r2, r2, #7
   144e2:	f104 0324 	add.w	r3, r4, #36	; 0x24
   144e6:	2100      	movs	r1, #0
   144e8:	4628      	mov	r0, r5
   144ea:	f008 fcb7 	bl	1ce5c <lll_scan_tgta_check>
		   (pdu_adv_rx->len == sizeof(struct pdu_adv_direct_ind)) &&
   144ee:	2800      	cmp	r0, #0
   144f0:	d0e2      	beq.n	144b8 <isr_rx+0x144>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
		   (lll->state != 0U) &&
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
   144f2:	7f63      	ldrb	r3, [r4, #29]
   144f4:	2b00      	cmp	r3, #0
   144f6:	d0e4      	beq.n	144c2 <isr_rx+0x14e>
		   1) {
#endif /* !CONFIG_BT_CENTRAL */
		uint32_t err;

		/* save the scan response packet */
		err = isr_rx_scan_report(lll, rssi_ready,
   144f8:	f89d 100f 	ldrb.w	r1, [sp, #15]
   144fc:	4630      	mov	r0, r6
   144fe:	f008 fc64 	bl	1cdca <isr_rx_scan_report.isra.0>
					 irkmatch_ok ? rl_idx :
						       FILTER_IDX_NONE,
					 dir_report);
		if (err) {
   14502:	e7de      	b.n	144c2 <isr_rx+0x14e>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   14504:	7f63      	ldrb	r3, [r4, #29]
   14506:	2b25      	cmp	r3, #37	; 0x25
   14508:	d8db      	bhi.n	144c2 <isr_rx+0x14e>
		   (lll->state != 0U) &&
   1450a:	792b      	ldrb	r3, [r5, #4]
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
   1450c:	07db      	lsls	r3, r3, #31
   1450e:	d5d8      	bpl.n	144c2 <isr_rx+0x14e>
	return false;
}

static inline bool isr_scan_rsp_adva_matches(struct pdu_adv *srsp)
{
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
   14510:	f000 fdb0 	bl	15074 <radio_pkt_scratch_get>

	return ((sreq->rx_addr == srsp->tx_addr) &&
   14514:	7f23      	ldrb	r3, [r4, #28]
   14516:	7802      	ldrb	r2, [r0, #0]
   14518:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1451c:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   14520:	d1cf      	bne.n	144c2 <isr_rx+0x14e>
		(memcmp(&sreq->scan_req.adv_addr[0],
   14522:	2206      	movs	r2, #6
   14524:	f104 011e 	add.w	r1, r4, #30
   14528:	3008      	adds	r0, #8
   1452a:	f005 fb2b 	bl	19b84 <memcmp>
		   (lll->state != 0U) &&
   1452e:	2800      	cmp	r0, #0
   14530:	d0df      	beq.n	144f2 <isr_rx+0x17e>
   14532:	e7c6      	b.n	144c2 <isr_rx+0x14e>
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   14534:	2b02      	cmp	r3, #2
   14536:	e7b9      	b.n	144ac <isr_rx+0x138>
   14538:	0002230b 	.word	0x0002230b
   1453c:	00022356 	.word	0x00022356
   14540:	0001f734 	.word	0x0001f734
   14544:	000222cc 	.word	0x000222cc
   14548:	00014189 	.word	0x00014189
   1454c:	0001cd4f 	.word	0x0001cd4f

00014550 <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   14550:	b570      	push	{r4, r5, r6, lr}
   14552:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   14554:	f008 fb22 	bl	1cb9c <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   14558:	f7fc fe2e 	bl	111b8 <ull_event_done_extra_get>
	LL_ASSERT(e);
   1455c:	4604      	mov	r4, r0
   1455e:	b960      	cbnz	r0, 1457a <isr_done+0x2a>
   14560:	4a16      	ldr	r2, [pc, #88]	; (145bc <isr_done+0x6c>)
   14562:	4917      	ldr	r1, [pc, #92]	; (145c0 <isr_done+0x70>)
   14564:	4817      	ldr	r0, [pc, #92]	; (145c4 <isr_done+0x74>)
   14566:	f240 2379 	movw	r3, #633	; 0x279
   1456a:	f003 fffd 	bl	18568 <printk>
   1456e:	4040      	eors	r0, r0
   14570:	f380 8811 	msr	BASEPRI, r0
   14574:	f04f 0003 	mov.w	r0, #3
   14578:	df02      	svc	2

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   1457a:	2301      	movs	r3, #1
   1457c:	7023      	strb	r3, [r4, #0]
	e->trx_cnt = trx_cnt;
   1457e:	4b12      	ldr	r3, [pc, #72]	; (145c8 <isr_done+0x78>)
	e->crc_valid = crc_valid;
   14580:	4a12      	ldr	r2, [pc, #72]	; (145cc <isr_done+0x7c>)
	e->trx_cnt = trx_cnt;
   14582:	881b      	ldrh	r3, [r3, #0]
	e->crc_valid = crc_valid;
   14584:	7812      	ldrb	r2, [r2, #0]
	e->trx_cnt = trx_cnt;
   14586:	80a3      	strh	r3, [r4, #4]
	e->crc_valid = crc_valid;
   14588:	71a2      	strb	r2, [r4, #6]
#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   1458a:	b18b      	cbz	r3, 145b0 <isr_done+0x60>
		struct lll_conn *lll = param;

		if (lll->role) {
   1458c:	f995 301d 	ldrsb.w	r3, [r5, #29]
   14590:	2b00      	cmp	r3, #0
   14592:	da0d      	bge.n	145b0 <isr_done+0x60>
			preamble_to_addr_us =
				addr_us_get(0);
#endif /* !CONFIG_BT_CTLR_PHY */

			e->drift.start_to_address_actual_us =
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   14594:	f000 fee8 	bl	15368 <radio_tmr_aa_restore>
   14598:	4606      	mov	r6, r0
   1459a:	f000 feeb 	bl	15374 <radio_tmr_ready_get>
			e->drift.window_widening_event_us =
   1459e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   145a0:	60e3      	str	r3, [r4, #12]
				lll->slave.window_widening_event_us;
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   145a2:	2328      	movs	r3, #40	; 0x28
   145a4:	6123      	str	r3, [r4, #16]
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   145a6:	1a36      	subs	r6, r6, r0

			/* Reset window widening, as anchor point sync-ed */
			lll->slave.window_widening_event_us = 0;
   145a8:	2300      	movs	r3, #0
			e->drift.start_to_address_actual_us =
   145aa:	60a6      	str	r6, [r4, #8]
			lll->slave.window_widening_event_us = 0;
   145ac:	632b      	str	r3, [r5, #48]	; 0x30
			lll->slave.window_size_event_us = 0;
   145ae:	63ab      	str	r3, [r5, #56]	; 0x38
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   145b0:	4628      	mov	r0, r5
}
   145b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	lll_isr_cleanup(param);
   145b6:	f7fe bfc1 	b.w	1353c <lll_isr_cleanup>
   145ba:	bf00      	nop
   145bc:	0002236f 	.word	0x0002236f
   145c0:	00021423 	.word	0x00021423
   145c4:	0001f734 	.word	0x0001f734
   145c8:	20002e9a 	.word	0x20002e9a
   145cc:	2000303a 	.word	0x2000303a

000145d0 <lll_conn_prepare_reset>:
	trx_cnt = 0U;
   145d0:	4a03      	ldr	r2, [pc, #12]	; (145e0 <lll_conn_prepare_reset+0x10>)
   145d2:	2300      	movs	r3, #0
   145d4:	8013      	strh	r3, [r2, #0]
	crc_valid = 0U;
   145d6:	4a03      	ldr	r2, [pc, #12]	; (145e4 <lll_conn_prepare_reset+0x14>)
   145d8:	7013      	strb	r3, [r2, #0]
	crc_expire = 0U;
   145da:	4a03      	ldr	r2, [pc, #12]	; (145e8 <lll_conn_prepare_reset+0x18>)
   145dc:	7013      	strb	r3, [r2, #0]
}
   145de:	4770      	bx	lr
   145e0:	20002e9a 	.word	0x20002e9a
   145e4:	2000303a 	.word	0x2000303a
   145e8:	20003039 	.word	0x20003039

000145ec <lll_conn_abort_cb>:
{
   145ec:	b538      	push	{r3, r4, r5, lr}
   145ee:	460d      	mov	r5, r1
	if (!prepare_param) {
   145f0:	4604      	mov	r4, r0
   145f2:	b930      	cbnz	r0, 14602 <lll_conn_abort_cb+0x16>
		radio_isr_set(isr_done, param);
   145f4:	4810      	ldr	r0, [pc, #64]	; (14638 <lll_conn_abort_cb+0x4c>)
   145f6:	f000 fc19 	bl	14e2c <radio_isr_set>
}
   145fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_disable();
   145fe:	f000 bce3 	b.w	14fc8 <radio_disable>
	err = lll_hfclock_off();
   14602:	f7ff f8ff 	bl	13804 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   14606:	2800      	cmp	r0, #0
   14608:	da0b      	bge.n	14622 <lll_conn_abort_cb+0x36>
   1460a:	4a0c      	ldr	r2, [pc, #48]	; (1463c <lll_conn_abort_cb+0x50>)
   1460c:	490c      	ldr	r1, [pc, #48]	; (14640 <lll_conn_abort_cb+0x54>)
   1460e:	480d      	ldr	r0, [pc, #52]	; (14644 <lll_conn_abort_cb+0x58>)
   14610:	239d      	movs	r3, #157	; 0x9d
   14612:	f003 ffa9 	bl	18568 <printk>
   14616:	4040      	eors	r0, r0
   14618:	f380 8811 	msr	BASEPRI, r0
   1461c:	f04f 0003 	mov.w	r0, #3
   14620:	df02      	svc	2
	lll = prepare_param->param;
   14622:	68e2      	ldr	r2, [r4, #12]
	lll->latency_prepare += (prepare_param->lazy + 1);
   14624:	8921      	ldrh	r1, [r4, #8]
   14626:	8a53      	ldrh	r3, [r2, #18]
   14628:	440b      	add	r3, r1
   1462a:	3301      	adds	r3, #1
   1462c:	8253      	strh	r3, [r2, #18]
	lll_done(param);
   1462e:	4628      	mov	r0, r5
}
   14630:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_done(param);
   14634:	f7fe befa 	b.w	1342c <lll_done>
   14638:	00014551 	.word	0x00014551
   1463c:	0002236f 	.word	0x0002236f
   14640:	00022232 	.word	0x00022232
   14644:	0001f734 	.word	0x0001f734

00014648 <lll_conn_rx_pkt_set>:
{
   14648:	b510      	push	{r4, lr}
	node_rx = ull_pdu_rx_alloc_peek(1);
   1464a:	2001      	movs	r0, #1
   1464c:	f7fc fcbe 	bl	10fcc <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   14650:	4604      	mov	r4, r0
   14652:	b960      	cbnz	r0, 1466e <lll_conn_rx_pkt_set+0x26>
   14654:	4a0d      	ldr	r2, [pc, #52]	; (1468c <lll_conn_rx_pkt_set+0x44>)
   14656:	490e      	ldr	r1, [pc, #56]	; (14690 <lll_conn_rx_pkt_set+0x48>)
   14658:	480e      	ldr	r0, [pc, #56]	; (14694 <lll_conn_rx_pkt_set+0x4c>)
   1465a:	f44f 73ef 	mov.w	r3, #478	; 0x1de
   1465e:	f003 ff83 	bl	18568 <printk>
   14662:	4040      	eors	r0, r0
   14664:	f380 8811 	msr	BASEPRI, r0
   14668:	f04f 0003 	mov.w	r0, #3
   1466c:	df02      	svc	2
	radio_phy_set(phy, 0);
   1466e:	2100      	movs	r1, #0
   14670:	4608      	mov	r0, r1
   14672:	f000 fc1f 	bl	14eb4 <radio_phy_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   14676:	2008      	movs	r0, #8
   14678:	2201      	movs	r2, #1
   1467a:	211b      	movs	r1, #27
   1467c:	f000 fc60 	bl	14f40 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   14680:	f104 001c 	add.w	r0, r4, #28
}
   14684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_pkt_rx_set(node_rx->pdu);
   14688:	f000 bc86 	b.w	14f98 <radio_pkt_rx_set>
   1468c:	0002236f 	.word	0x0002236f
   14690:	00022356 	.word	0x00022356
   14694:	0001f734 	.word	0x0001f734

00014698 <lll_conn_isr_tx>:
{
   14698:	b570      	push	{r4, r5, r6, lr}
   1469a:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   1469c:	f008 fa6e 	bl	1cb7c <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   146a0:	2096      	movs	r0, #150	; 0x96
   146a2:	f000 fd81 	bl	151a8 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   146a6:	2300      	movs	r3, #0
   146a8:	4618      	mov	r0, r3
   146aa:	461a      	mov	r2, r3
   146ac:	4619      	mov	r1, r3
   146ae:	f000 fcf1 	bl	15094 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   146b2:	4628      	mov	r0, r5
   146b4:	f7ff ffc8 	bl	14648 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   146b8:	f000 fca4 	bl	15004 <radio_is_ready>
   146bc:	b160      	cbz	r0, 146d8 <lll_conn_isr_tx+0x40>
   146be:	4a12      	ldr	r2, [pc, #72]	; (14708 <lll_conn_isr_tx+0x70>)
   146c0:	4912      	ldr	r1, [pc, #72]	; (1470c <lll_conn_isr_tx+0x74>)
   146c2:	4813      	ldr	r0, [pc, #76]	; (14710 <lll_conn_isr_tx+0x78>)
   146c4:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
   146c8:	f003 ff4e 	bl	18568 <printk>
   146cc:	4040      	eors	r0, r0
   146ce:	f380 8811 	msr	BASEPRI, r0
   146d2:	f04f 0003 	mov.w	r0, #3
   146d6:	df02      	svc	2
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 +
   146d8:	f000 fe60 	bl	1539c <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   146dc:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 +
   146de:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   146e0:	4608      	mov	r0, r1
   146e2:	f008 fcb6 	bl	1d052 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   146e6:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   146e8:	4606      	mov	r6, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   146ea:	4608      	mov	r0, r1
   146ec:	f008 fcad 	bl	1d04a <radio_tx_chain_delay_get>
   146f0:	4434      	add	r4, r6
   146f2:	34cb      	adds	r4, #203	; 0xcb
	radio_tmr_hcto_configure(hcto);
   146f4:	1a20      	subs	r0, r4, r0
   146f6:	f000 fe0b 	bl	15310 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   146fa:	4629      	mov	r1, r5
   146fc:	4805      	ldr	r0, [pc, #20]	; (14714 <lll_conn_isr_tx+0x7c>)
}
   146fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   14702:	f000 bb93 	b.w	14e2c <radio_isr_set>
   14706:	bf00      	nop
   14708:	0002236f 	.word	0x0002236f
   1470c:	000222cc 	.word	0x000222cc
   14710:	0001f734 	.word	0x0001f734
   14714:	00014719 	.word	0x00014719

00014718 <lll_conn_isr_rx>:
{
   14718:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1471c:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   1471e:	f000 fc7b 	bl	15018 <radio_is_done>
	if (trx_done) {
   14722:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
   14726:	d010      	beq.n	1474a <lll_conn_isr_rx+0x32>
		crc_ok = radio_crc_is_valid();
   14728:	f000 fc96 	bl	15058 <radio_crc_is_valid>
   1472c:	b2c7      	uxtb	r7, r0
		rssi_ready = radio_rssi_is_ready();
   1472e:	f000 fce3 	bl	150f8 <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   14732:	f008 fa2a 	bl	1cb8a <lll_isr_rx_status_reset>
	if (!trx_done) {
   14736:	b955      	cbnz	r5, 1474e <lll_conn_isr_rx+0x36>
		radio_isr_set(isr_done, param);
   14738:	489d      	ldr	r0, [pc, #628]	; (149b0 <lll_conn_isr_rx+0x298>)
   1473a:	4621      	mov	r1, r4
   1473c:	f000 fb76 	bl	14e2c <radio_isr_set>
		radio_disable();
   14740:	f000 fc42 	bl	14fc8 <radio_disable>
}
   14744:	b002      	add	sp, #8
   14746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		crc_ok = rssi_ready = 0U;
   1474a:	462f      	mov	r7, r5
   1474c:	e7f1      	b.n	14732 <lll_conn_isr_rx+0x1a>
	trx_cnt++;
   1474e:	4a99      	ldr	r2, [pc, #612]	; (149b4 <lll_conn_isr_rx+0x29c>)
   14750:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   14752:	2001      	movs	r0, #1
	trx_cnt++;
   14754:	3301      	adds	r3, #1
   14756:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   14758:	f7fc fc38 	bl	10fcc <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1475c:	4606      	mov	r6, r0
   1475e:	b958      	cbnz	r0, 14778 <lll_conn_isr_rx+0x60>
   14760:	4a95      	ldr	r2, [pc, #596]	; (149b8 <lll_conn_isr_rx+0x2a0>)
   14762:	4996      	ldr	r1, [pc, #600]	; (149bc <lll_conn_isr_rx+0x2a4>)
   14764:	4896      	ldr	r0, [pc, #600]	; (149c0 <lll_conn_isr_rx+0x2a8>)
   14766:	23d6      	movs	r3, #214	; 0xd6
   14768:	f003 fefe 	bl	18568 <printk>
   1476c:	4040      	eors	r0, r0
   1476e:	f380 8811 	msr	BASEPRI, r0
   14772:	f04f 0003 	mov.w	r0, #3
   14776:	df02      	svc	2
	if (crc_ok) {
   14778:	f8df 825c 	ldr.w	r8, [pc, #604]	; 149d8 <lll_conn_isr_rx+0x2c0>
   1477c:	2f00      	cmp	r7, #0
   1477e:	f000 80f7 	beq.w	14970 <lll_conn_isr_rx+0x258>
#elif !defined(HAL_RADIO_PDU_LEN_MAX)
#error "Undefined HAL_RADIO_PDU_LEN_MAX."
#endif

	/* Ack for tx-ed data */
	if (pdu_data_rx->nesn != lll->sn) {
   14782:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
   14786:	7f31      	ldrb	r1, [r6, #28]
   14788:	f003 0201 	and.w	r2, r3, #1
   1478c:	f3c1 0180 	ubfx	r1, r1, #2, #1
   14790:	4291      	cmp	r1, r2
   14792:	f000 80a9 	beq.w	148e8 <lll_conn_isr_rx+0x1d0>
		struct pdu_data *pdu_data_tx;
		struct node_tx *tx;
		memq_link_t *link;

		/* Increment sequence number */
		lll->sn++;
   14796:	f082 0201 	eor.w	r2, r2, #1
   1479a:	f362 0300 	bfi	r3, r2, #0, #1
   1479e:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52

#if defined(CONFIG_BT_PERIPHERAL)
		/* First ack (and redundantly any other ack) enable use of
		 * slave latency.
		 */
		if (lll->role) {
   147a2:	f994 301d 	ldrsb.w	r3, [r4, #29]
   147a6:	2b00      	cmp	r3, #0
			lll->slave.latency_enabled = 1;
   147a8:	bfbe      	ittt	lt
   147aa:	f894 3020 	ldrblt.w	r3, [r4, #32]
   147ae:	f043 0304 	orrlt.w	r3, r3, #4
   147b2:	f884 3020 	strblt.w	r3, [r4, #32]
		}
#endif /* CONFIG_BT_PERIPHERAL */

		FORCE_MD_CNT_DEC();

		if (!lll->empty) {
   147b6:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
   147ba:	f013 0504 	ands.w	r5, r3, #4
   147be:	f040 808d 	bne.w	148dc <lll_conn_isr_rx+0x1c4>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   147c2:	e9d4 010f 	ldrd	r0, r1, [r4, #60]	; 0x3c
   147c6:	aa01      	add	r2, sp, #4
   147c8:	f007 fc28 	bl	1c01c <memq_peek>
			}

			link = NULL;
		}

		if (link) {
   147cc:	4681      	mov	r9, r0
   147ce:	2800      	cmp	r0, #0
   147d0:	f040 808d 	bne.w	148ee <lll_conn_isr_rx+0x1d6>
			}
		}
	}

	/* process received data */
	if ((pdu_data_rx->sn == lll->nesn) &&
   147d4:	7f32      	ldrb	r2, [r6, #28]
   147d6:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
   147da:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   147de:	f3c3 0340 	ubfx	r3, r3, #1, #1
   147e2:	429a      	cmp	r2, r3
   147e4:	f000 80b0 	beq.w	14948 <lll_conn_isr_rx+0x230>
	is_rx_enqueue = 0U;
   147e8:	f04f 0a00 	mov.w	sl, #0
		crc_valid = 1U;
   147ec:	4b75      	ldr	r3, [pc, #468]	; (149c4 <lll_conn_isr_rx+0x2ac>)
		crc_expire = 0U;
   147ee:	2500      	movs	r5, #0
		crc_valid = 1U;
   147f0:	2201      	movs	r2, #1
		crc_expire = 0U;
   147f2:	f888 5000 	strb.w	r5, [r8]
		crc_valid = 1U;
   147f6:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   147f8:	a901      	add	r1, sp, #4
   147fa:	4620      	mov	r0, r4
   147fc:	f008 fb72 	bl	1cee4 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   14800:	2d00      	cmp	r5, #0
   14802:	f040 80c8 	bne.w	14996 <lll_conn_isr_rx+0x27e>
   14806:	b157      	cbz	r7, 1481e <lll_conn_isr_rx+0x106>
   14808:	7f33      	ldrb	r3, [r6, #28]
   1480a:	06d9      	lsls	r1, r3, #27
   1480c:	d407      	bmi.n	1481e <lll_conn_isr_rx+0x106>
			      (pdu_data_tx->md == 0) &&
   1480e:	9b01      	ldr	r3, [sp, #4]
   14810:	781a      	ldrb	r2, [r3, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   14812:	06d2      	lsls	r2, r2, #27
   14814:	d403      	bmi.n	1481e <lll_conn_isr_rx+0x106>
			      (pdu_data_tx->md == 0) &&
   14816:	785b      	ldrb	r3, [r3, #1]
   14818:	2b00      	cmp	r3, #0
   1481a:	f000 80bc 	beq.w	14996 <lll_conn_isr_rx+0x27e>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1481e:	2096      	movs	r0, #150	; 0x96
   14820:	f000 fcc2 	bl	151a8 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   14824:	2000      	movs	r0, #0
   14826:	f000 fc29 	bl	1507c <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   1482a:	4867      	ldr	r0, [pc, #412]	; (149c8 <lll_conn_isr_rx+0x2b0>)
   1482c:	4621      	mov	r1, r4
   1482e:	f000 fafd 	bl	14e2c <radio_isr_set>
		radio_tmr_end_capture();
   14832:	f000 fda5 	bl	15380 <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   14836:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
   1483a:	9901      	ldr	r1, [sp, #4]
   1483c:	f3c3 0200 	ubfx	r2, r3, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   14840:	f3c3 0340 	ubfx	r3, r3, #1, #1
   14844:	009b      	lsls	r3, r3, #2
   14846:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   1484a:	780a      	ldrb	r2, [r1, #0]
   1484c:	f022 020c 	bic.w	r2, r2, #12
   14850:	4313      	orrs	r3, r2
   14852:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   14854:	4620      	mov	r0, r4
   14856:	f008 fb35 	bl	1cec4 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1485a:	f000 fbd3 	bl	15004 <radio_is_ready>
   1485e:	b160      	cbz	r0, 1487a <lll_conn_isr_rx+0x162>
   14860:	4a55      	ldr	r2, [pc, #340]	; (149b8 <lll_conn_isr_rx+0x2a0>)
   14862:	495a      	ldr	r1, [pc, #360]	; (149cc <lll_conn_isr_rx+0x2b4>)
   14864:	4856      	ldr	r0, [pc, #344]	; (149c0 <lll_conn_isr_rx+0x2a8>)
   14866:	f44f 73a1 	mov.w	r3, #322	; 0x142
   1486a:	f003 fe7d 	bl	18568 <printk>
   1486e:	4040      	eors	r0, r0
   14870:	f380 8811 	msr	BASEPRI, r0
   14874:	f04f 0003 	mov.w	r0, #3
   14878:	df02      	svc	2
	if (!radio_tmr_aa_restore()) {
   1487a:	f000 fd75 	bl	15368 <radio_tmr_aa_restore>
   1487e:	b918      	cbnz	r0, 14888 <lll_conn_isr_rx+0x170>
		radio_tmr_aa_save(radio_tmr_aa_get());
   14880:	f000 fd66 	bl	15350 <radio_tmr_aa_get>
   14884:	f000 fd6a 	bl	1535c <radio_tmr_aa_save>
	if (tx_release) {
   14888:	f1b9 0f00 	cmp.w	r9, #0
   1488c:	f000 808a 	beq.w	149a4 <lll_conn_isr_rx+0x28c>
		LL_ASSERT(lll->handle != 0xFFFF);
   14890:	89a2      	ldrh	r2, [r4, #12]
   14892:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14896:	429a      	cmp	r2, r3
   14898:	d10c      	bne.n	148b4 <lll_conn_isr_rx+0x19c>
   1489a:	4a47      	ldr	r2, [pc, #284]	; (149b8 <lll_conn_isr_rx+0x2a0>)
   1489c:	494c      	ldr	r1, [pc, #304]	; (149d0 <lll_conn_isr_rx+0x2b8>)
   1489e:	4848      	ldr	r0, [pc, #288]	; (149c0 <lll_conn_isr_rx+0x2a8>)
   148a0:	f240 1351 	movw	r3, #337	; 0x151
   148a4:	f003 fe60 	bl	18568 <printk>
   148a8:	4040      	eors	r0, r0
   148aa:	f380 8811 	msr	BASEPRI, r0
   148ae:	f04f 0003 	mov.w	r0, #3
   148b2:	df02      	svc	2
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   148b4:	89a0      	ldrh	r0, [r4, #12]
   148b6:	4649      	mov	r1, r9
   148b8:	f7fe f9e6 	bl	12c88 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   148bc:	f1ba 0f00 	cmp.w	sl, #0
   148c0:	d009      	beq.n	148d6 <lll_conn_isr_rx+0x1be>
		ull_pdu_rx_alloc();
   148c2:	f7fc fb9b 	bl	10ffc <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   148c6:	2303      	movs	r3, #3
   148c8:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   148ca:	89a3      	ldrh	r3, [r4, #12]
		ull_rx_put(node_rx->hdr.link, node_rx);
   148cc:	6830      	ldr	r0, [r6, #0]
		node_rx->hdr.handle = lll->handle;
   148ce:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   148d0:	4631      	mov	r1, r6
   148d2:	f7fc fba9 	bl	11028 <ull_rx_put>
		ull_rx_sched();
   148d6:	f7fc fbb7 	bl	11048 <ull_rx_sched>
	ARG_UNUSED(rssi_ready);
   148da:	e733      	b.n	14744 <lll_conn_isr_rx+0x2c>
			lll->empty = 0;
   148dc:	f36f 0382 	bfc	r3, #2, #1
   148e0:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
			pdu_data_tx = (void *)radio_pkt_empty_get();
   148e4:	f000 fbc2 	bl	1506c <radio_pkt_empty_get>
	tx_release = NULL;
   148e8:	f04f 0900 	mov.w	r9, #0
   148ec:	e772      	b.n	147d4 <lll_conn_isr_rx+0xbc>
					       lll->packet_tx_head_offset);
   148ee:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
			pdu_data_tx_len = pdu_data_tx->len;
   148f2:	9a01      	ldr	r2, [sp, #4]
   148f4:	441a      	add	r2, r3
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   148f6:	7952      	ldrb	r2, [r2, #5]
   148f8:	4413      	add	r3, r2
			if (offset < lll->packet_tx_head_len) {
   148fa:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   148fe:	b2db      	uxtb	r3, r3
			if (offset < lll->packet_tx_head_len) {
   14900:	4293      	cmp	r3, r2
   14902:	d202      	bcs.n	1490a <lll_conn_isr_rx+0x1f2>
				lll->packet_tx_head_offset = offset;
   14904:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
   14908:	e7ee      	b.n	148e8 <lll_conn_isr_rx+0x1d0>
			} else if (offset == lll->packet_tx_head_len) {
   1490a:	d10f      	bne.n	1492c <lll_conn_isr_rx+0x214>
				memq_dequeue(lll->memq_tx.tail,
   1490c:	462a      	mov	r2, r5
   1490e:	6c20      	ldr	r0, [r4, #64]	; 0x40
				lll->packet_tx_head_len = 0;
   14910:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
				memq_dequeue(lll->memq_tx.tail,
   14914:	f104 013c 	add.w	r1, r4, #60	; 0x3c
   14918:	f007 fb88 	bl	1c02c <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   1491c:	9b01      	ldr	r3, [sp, #4]
   1491e:	681a      	ldr	r2, [r3, #0]
   14920:	f8c9 2000 	str.w	r2, [r9]
				tx->next = link;
   14924:	f8c3 9000 	str.w	r9, [r3]
				FORCE_MD_CNT_SET();
   14928:	4699      	mov	r9, r3
   1492a:	e753      	b.n	147d4 <lll_conn_isr_rx+0xbc>
				LL_ASSERT(0);
   1492c:	4a22      	ldr	r2, [pc, #136]	; (149b8 <lll_conn_isr_rx+0x2a0>)
   1492e:	4929      	ldr	r1, [pc, #164]	; (149d4 <lll_conn_isr_rx+0x2bc>)
   14930:	4823      	ldr	r0, [pc, #140]	; (149c0 <lll_conn_isr_rx+0x2a8>)
   14932:	f240 3305 	movw	r3, #773	; 0x305
   14936:	f003 fe17 	bl	18568 <printk>
   1493a:	4040      	eors	r0, r0
   1493c:	f380 8811 	msr	BASEPRI, r0
   14940:	f04f 0003 	mov.w	r0, #3
   14944:	df02      	svc	2
   14946:	e7cf      	b.n	148e8 <lll_conn_isr_rx+0x1d0>
	    /* check so that we will NEVER use the rx buffer reserved for empty
	     * packet and internal control enqueue
	     */
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   14948:	2003      	movs	r0, #3
   1494a:	f7fc fb3f 	bl	10fcc <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   1494e:	2800      	cmp	r0, #0
   14950:	f43f af4a 	beq.w	147e8 <lll_conn_isr_rx+0xd0>
		/* Increment next expected serial number */
		lll->nesn++;
   14954:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
   14958:	f083 0302 	eor.w	r3, r3, #2
   1495c:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52

		if (pdu_data_rx->len != 0) {
   14960:	f896 a01d 	ldrb.w	sl, [r6, #29]
	is_rx_enqueue = 0U;
   14964:	f1ba 0a00 	subs.w	sl, sl, #0
   14968:	bf18      	it	ne
   1496a:	f04f 0a01 	movne.w	sl, #1
   1496e:	e73d      	b.n	147ec <lll_conn_isr_rx+0xd4>
		if (crc_expire == 0U) {
   14970:	f898 3000 	ldrb.w	r3, [r8]
   14974:	b913      	cbnz	r3, 1497c <lll_conn_isr_rx+0x264>
			crc_expire = 2U;
   14976:	2302      	movs	r3, #2
   14978:	f888 3000 	strb.w	r3, [r8]
		crc_expire--;
   1497c:	f898 5000 	ldrb.w	r5, [r8]
   14980:	3d01      	subs	r5, #1
   14982:	b2ed      	uxtb	r5, r5
   14984:	f888 5000 	strb.w	r5, [r8]
	is_rx_enqueue = 0U;
   14988:	f04f 0a00 	mov.w	sl, #0
		is_done = (crc_expire == 0U);
   1498c:	fab5 f585 	clz	r5, r5
   14990:	096d      	lsrs	r5, r5, #5
	tx_release = NULL;
   14992:	46d1      	mov	r9, sl
   14994:	e730      	b.n	147f8 <lll_conn_isr_rx+0xe0>
		radio_isr_set(isr_done, param);
   14996:	4806      	ldr	r0, [pc, #24]	; (149b0 <lll_conn_isr_rx+0x298>)
   14998:	4621      	mov	r1, r4
   1499a:	f000 fa47 	bl	14e2c <radio_isr_set>
			radio_switch_complete_and_disable();
   1499e:	f000 fb85 	bl	150ac <radio_switch_complete_and_disable>
   149a2:	e748      	b.n	14836 <lll_conn_isr_rx+0x11e>
	if (is_rx_enqueue) {
   149a4:	f1ba 0f00 	cmp.w	sl, #0
   149a8:	f43f aecc 	beq.w	14744 <lll_conn_isr_rx+0x2c>
   149ac:	e789      	b.n	148c2 <lll_conn_isr_rx+0x1aa>
   149ae:	bf00      	nop
   149b0:	00014551 	.word	0x00014551
   149b4:	20002e9a 	.word	0x20002e9a
   149b8:	0002236f 	.word	0x0002236f
   149bc:	00022356 	.word	0x00022356
   149c0:	0001f734 	.word	0x0001f734
   149c4:	2000303a 	.word	0x2000303a
   149c8:	00014699 	.word	0x00014699
   149cc:	000222cc 	.word	0x000222cc
   149d0:	000223ba 	.word	0x000223ba
   149d4:	00020b9a 	.word	0x00020b9a
   149d8:	20003039 	.word	0x20003039

000149dc <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   149dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t remainder;
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
   149e0:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   149e2:	89a2      	ldrh	r2, [r4, #12]
   149e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   149e8:	429a      	cmp	r2, r3
{
   149ea:	4606      	mov	r6, r0
	if (unlikely(lll->handle == 0xFFFF)) {
   149ec:	d109      	bne.n	14a02 <prepare_cb+0x26>
		radio_isr_set(lll_isr_early_abort, lll);
   149ee:	485e      	ldr	r0, [pc, #376]	; (14b68 <prepare_cb+0x18c>)
   149f0:	4621      	mov	r1, r4
#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   149f2:	f000 fa1b 	bl	14e2c <radio_isr_set>
		radio_disable();
   149f6:	f000 fae7 	bl	14fc8 <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   149fa:	2000      	movs	r0, #0
   149fc:	b002      	add	sp, #8
   149fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	lll_conn_prepare_reset();
   14a02:	f7ff fde5 	bl	145d0 <lll_conn_prepare_reset>
	lll->latency_event = lll->latency_prepare + p->lazy;
   14a06:	8933      	ldrh	r3, [r6, #8]
   14a08:	8a62      	ldrh	r2, [r4, #18]
   14a0a:	441a      	add	r2, r3
	event_counter = lll->event_counter + lll->latency_event;
   14a0c:	8ae3      	ldrh	r3, [r4, #22]
	lll->latency_event = lll->latency_prepare + p->lazy;
   14a0e:	b292      	uxth	r2, r2
	event_counter = lll->event_counter + lll->latency_event;
   14a10:	4413      	add	r3, r2
	lll->event_counter = (event_counter + 1);
   14a12:	3301      	adds	r3, #1
   14a14:	82e3      	strh	r3, [r4, #22]
	if (lll->data_chan_sel) {
   14a16:	7f63      	ldrb	r3, [r4, #29]
	lll->latency_event = lll->latency_prepare + p->lazy;
   14a18:	82a2      	strh	r2, [r4, #20]
	lll->latency_prepare = 0;
   14a1a:	2500      	movs	r5, #0
	if (lll->data_chan_sel) {
   14a1c:	0659      	lsls	r1, r3, #25
	lll->latency_prepare = 0;
   14a1e:	8265      	strh	r5, [r4, #18]
	if (lll->data_chan_sel) {
   14a20:	f140 8082 	bpl.w	14b28 <prepare_cb+0x14c>
		LL_ASSERT(0);
   14a24:	4a51      	ldr	r2, [pc, #324]	; (14b6c <prepare_cb+0x190>)
   14a26:	4952      	ldr	r1, [pc, #328]	; (14b70 <prepare_cb+0x194>)
   14a28:	4852      	ldr	r0, [pc, #328]	; (14b74 <prepare_cb+0x198>)
   14a2a:	238f      	movs	r3, #143	; 0x8f
   14a2c:	f003 fd9c 	bl	18568 <printk>
   14a30:	4040      	eors	r0, r0
   14a32:	f380 8811 	msr	BASEPRI, r0
   14a36:	f04f 0003 	mov.w	r0, #3
   14a3a:	df02      	svc	2
	lll->slave.window_widening_event_us +=
   14a3c:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	; 0x2c
	    lll->slave.window_widening_max_us) {
   14a40:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	lll->slave.window_widening_event_us +=
   14a42:	4413      	add	r3, r2
		lll->slave.window_widening_event_us =
   14a44:	4299      	cmp	r1, r3
   14a46:	bf94      	ite	ls
   14a48:	6321      	strls	r1, [r4, #48]	; 0x30
   14a4a:	6323      	strhi	r3, [r4, #48]	; 0x30
	lll->slave.window_size_event_us +=
   14a4c:	e9d4 130d 	ldrd	r1, r3, [r4, #52]	; 0x34
	lll->slave.window_widening_prepare_us = 0;
   14a50:	2200      	movs	r2, #0
	lll->slave.window_size_event_us +=
   14a52:	440b      	add	r3, r1
	lll->slave.window_size_prepare_us = 0;
   14a54:	e9c4 230d 	strd	r2, r3, [r4, #52]	; 0x34
	lll->slave.window_widening_prepare_us = 0;
   14a58:	62e2      	str	r2, [r4, #44]	; 0x2c
	if (!lll->empty) {
   14a5a:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
   14a5e:	f012 0204 	ands.w	r2, r2, #4
   14a62:	d10a      	bne.n	14a7a <prepare_cb+0x9e>
		link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, NULL);
   14a64:	e9d4 010f 	ldrd	r0, r1, [r4, #60]	; 0x3c
   14a68:	f007 fad8 	bl	1c01c <memq_peek>
		if (!link) {
   14a6c:	b928      	cbnz	r0, 14a7a <prepare_cb+0x9e>
			lll->empty = 1U;
   14a6e:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
   14a72:	f043 0304 	orr.w	r3, r3, #4
   14a76:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
	radio_reset();
   14a7a:	f000 f9f7 	bl	14e6c <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   14a7e:	2000      	movs	r0, #0
   14a80:	f000 fa28 	bl	14ed4 <radio_tx_power_set>
	lll_conn_rx_pkt_set(lll);
   14a84:	4620      	mov	r0, r4
   14a86:	f7ff fddf 	bl	14648 <lll_conn_rx_pkt_set>
	radio_aa_set(lll->access_addr);
   14a8a:	1d20      	adds	r0, r4, #4
   14a8c:	f000 fa40 	bl	14f10 <radio_aa_set>
			     ((uint32_t)lll->crc_init[1] << 8) |
   14a90:	7a63      	ldrb	r3, [r4, #9]
			    (((uint32_t)lll->crc_init[2] << 16) |
   14a92:	7aa1      	ldrb	r1, [r4, #10]
			     ((uint32_t)lll->crc_init[1] << 8) |
   14a94:	021b      	lsls	r3, r3, #8
			    (((uint32_t)lll->crc_init[2] << 16) |
   14a96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((uint32_t)lll->crc_init[0])));
   14a9a:	7a21      	ldrb	r1, [r4, #8]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   14a9c:	f240 605b 	movw	r0, #1627	; 0x65b
   14aa0:	4319      	orrs	r1, r3
   14aa2:	f000 facd 	bl	15040 <radio_crc_configure>
	lll_chan_set(data_chan_use);
   14aa6:	4628      	mov	r0, r5
   14aa8:	f7fe fd16 	bl	134d8 <lll_chan_set>
	radio_isr_set(lll_conn_isr_rx, lll);
   14aac:	4621      	mov	r1, r4
   14aae:	4832      	ldr	r0, [pc, #200]	; (14b78 <prepare_cb+0x19c>)
   14ab0:	f000 f9bc 	bl	14e2c <radio_isr_set>
	radio_tmr_tifs_set(EVENT_IFS_US);
   14ab4:	2096      	movs	r0, #150	; 0x96
   14ab6:	f000 fb77 	bl	151a8 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   14aba:	2300      	movs	r3, #0
   14abc:	461a      	mov	r2, r3
   14abe:	4619      	mov	r1, r3
   14ac0:	4618      	mov	r0, r3
   14ac2:	f000 fae7 	bl	15094 <radio_switch_complete_and_tx>
	ull = HDR_LLL2ULL(lll);
   14ac6:	f8d4 8000 	ldr.w	r8, [r4]
	ticks_at_event = p->ticks_at_expire;
   14aca:	6837      	ldr	r7, [r6, #0]
	ticks_at_event += lll_event_offset_get(ull);
   14acc:	4640      	mov	r0, r8
   14ace:	f008 f836 	bl	1cb3e <lll_event_offset_get>
   14ad2:	4407      	add	r7, r0
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   14ad4:	6872      	ldr	r2, [r6, #4]
   14ad6:	f107 0109 	add.w	r1, r7, #9
   14ada:	2000      	movs	r0, #0
   14adc:	f000 fb70 	bl	151c0 <radio_tmr_start>
   14ae0:	4605      	mov	r5, r0
	radio_tmr_aa_capture();
   14ae2:	f000 fc21 	bl	15328 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   14ae6:	2000      	movs	r0, #0
   14ae8:	f000 fc38 	bl	1535c <radio_tmr_aa_save>
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   14aec:	6b26      	ldr	r6, [r4, #48]	; 0x30
   14aee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	hcto += radio_rx_ready_delay_get(0, 0);
   14af0:	2100      	movs	r1, #0
   14af2:	eb03 0346 	add.w	r3, r3, r6, lsl #1
   14af6:	4608      	mov	r0, r1
   14af8:	f103 0688 	add.w	r6, r3, #136	; 0x88
   14afc:	f008 faa7 	bl	1d04e <radio_rx_ready_delay_get>
	hcto += addr_us_get(0);
   14b00:	4435      	add	r5, r6
	hcto += radio_rx_chain_delay_get(0, 0);
   14b02:	2100      	movs	r1, #0
	hcto += addr_us_get(0);
   14b04:	4405      	add	r5, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   14b06:	4608      	mov	r0, r1
   14b08:	f008 faa3 	bl	1d052 <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   14b0c:	4428      	add	r0, r5
   14b0e:	f000 fbff 	bl	15310 <radio_tmr_hcto_configure>
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
   14b12:	7b21      	ldrb	r1, [r4, #12]
   14b14:	3105      	adds	r1, #5
   14b16:	463a      	mov	r2, r7
   14b18:	b2c9      	uxtb	r1, r1
   14b1a:	4640      	mov	r0, r8
   14b1c:	f008 f81d 	bl	1cb5a <lll_preempt_calc>
   14b20:	b170      	cbz	r0, 14b40 <prepare_cb+0x164>
		radio_isr_set(lll_isr_abort, lll);
   14b22:	4816      	ldr	r0, [pc, #88]	; (14b7c <prepare_cb+0x1a0>)
   14b24:	4621      	mov	r1, r4
   14b26:	e764      	b.n	149f2 <prepare_cb+0x16>
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   14b28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   14b2c:	7fa1      	ldrb	r1, [r4, #30]
   14b2e:	9300      	str	r3, [sp, #0]
   14b30:	f104 001f 	add.w	r0, r4, #31
   14b34:	f104 0318 	add.w	r3, r4, #24
   14b38:	f007 ffae 	bl	1ca98 <lll_chan_sel_1>
   14b3c:	4605      	mov	r5, r0
   14b3e:	e77d      	b.n	14a3c <prepare_cb+0x60>
		ret = lll_prepare_done(lll);
   14b40:	4620      	mov	r0, r4
   14b42:	f007 fff7 	bl	1cb34 <lll_prepare_done>
		LL_ASSERT(!ret);
   14b46:	2800      	cmp	r0, #0
   14b48:	f43f af57 	beq.w	149fa <prepare_cb+0x1e>
   14b4c:	4a07      	ldr	r2, [pc, #28]	; (14b6c <prepare_cb+0x190>)
   14b4e:	490c      	ldr	r1, [pc, #48]	; (14b80 <prepare_cb+0x1a4>)
   14b50:	4808      	ldr	r0, [pc, #32]	; (14b74 <prepare_cb+0x198>)
   14b52:	f240 1319 	movw	r3, #281	; 0x119
   14b56:	f003 fd07 	bl	18568 <printk>
   14b5a:	4040      	eors	r0, r0
   14b5c:	f380 8811 	msr	BASEPRI, r0
   14b60:	f04f 0003 	mov.w	r0, #3
   14b64:	df02      	svc	2
   14b66:	e748      	b.n	149fa <prepare_cb+0x1e>
   14b68:	00013591 	.word	0x00013591
   14b6c:	000223e1 	.word	0x000223e1
   14b70:	00020b9a 	.word	0x00020b9a
   14b74:	0001f734 	.word	0x0001f734
   14b78:	00014719 	.word	0x00014719
   14b7c:	0001cbb7 	.word	0x0001cbb7
   14b80:	00021cbb 	.word	0x00021cbb

00014b84 <lll_slave_prepare>:
{
   14b84:	b513      	push	{r0, r1, r4, lr}
   14b86:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   14b88:	f7fe fe26 	bl	137d8 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   14b8c:	2800      	cmp	r0, #0
   14b8e:	da0b      	bge.n	14ba8 <lll_slave_prepare+0x24>
   14b90:	4a17      	ldr	r2, [pc, #92]	; (14bf0 <lll_slave_prepare+0x6c>)
   14b92:	4918      	ldr	r1, [pc, #96]	; (14bf4 <lll_slave_prepare+0x70>)
   14b94:	4818      	ldr	r0, [pc, #96]	; (14bf8 <lll_slave_prepare+0x74>)
   14b96:	2347      	movs	r3, #71	; 0x47
   14b98:	f003 fce6 	bl	18568 <printk>
   14b9c:	4040      	eors	r0, r0
   14b9e:	f380 8811 	msr	BASEPRI, r0
   14ba2:	f04f 0003 	mov.w	r0, #3
   14ba6:	df02      	svc	2
	lll = p->param;
   14ba8:	68e2      	ldr	r2, [r4, #12]
	    lll->slave.window_widening_periodic_us * (p->lazy + 1);
   14baa:	8921      	ldrh	r1, [r4, #8]
   14bac:	6a53      	ldr	r3, [r2, #36]	; 0x24
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   14bae:	4813      	ldr	r0, [pc, #76]	; (14bfc <lll_slave_prepare+0x78>)
	    lll->slave.window_widening_periodic_us * (p->lazy + 1);
   14bb0:	fb01 3303 	mla	r3, r1, r3, r3
	lll->slave.window_widening_prepare_us +=
   14bb4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   14bb6:	440b      	add	r3, r1
	    lll->slave.window_widening_max_us) {
   14bb8:	6a91      	ldr	r1, [r2, #40]	; 0x28
		lll->slave.window_widening_prepare_us =
   14bba:	4299      	cmp	r1, r3
   14bbc:	bf94      	ite	ls
   14bbe:	62d1      	strls	r1, [r2, #44]	; 0x2c
   14bc0:	62d3      	strhi	r3, [r2, #44]	; 0x2c
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   14bc2:	4a0f      	ldr	r2, [pc, #60]	; (14c00 <lll_slave_prepare+0x7c>)
   14bc4:	490f      	ldr	r1, [pc, #60]	; (14c04 <lll_slave_prepare+0x80>)
   14bc6:	9400      	str	r4, [sp, #0]
   14bc8:	2300      	movs	r3, #0
   14bca:	f007 fd2d 	bl	1c628 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   14bce:	b168      	cbz	r0, 14bec <lll_slave_prepare+0x68>
   14bd0:	3077      	adds	r0, #119	; 0x77
   14bd2:	d00b      	beq.n	14bec <lll_slave_prepare+0x68>
   14bd4:	4a06      	ldr	r2, [pc, #24]	; (14bf0 <lll_slave_prepare+0x6c>)
   14bd6:	490c      	ldr	r1, [pc, #48]	; (14c08 <lll_slave_prepare+0x84>)
   14bd8:	4807      	ldr	r0, [pc, #28]	; (14bf8 <lll_slave_prepare+0x74>)
   14bda:	2358      	movs	r3, #88	; 0x58
   14bdc:	f003 fcc4 	bl	18568 <printk>
   14be0:	4040      	eors	r0, r0
   14be2:	f380 8811 	msr	BASEPRI, r0
   14be6:	f04f 0003 	mov.w	r0, #3
   14bea:	df02      	svc	2
}
   14bec:	b002      	add	sp, #8
   14bee:	bd10      	pop	{r4, pc}
   14bf0:	000223e1 	.word	0x000223e1
   14bf4:	00022232 	.word	0x00022232
   14bf8:	0001f734 	.word	0x0001f734
   14bfc:	0001cb39 	.word	0x0001cb39
   14c00:	000149dd 	.word	0x000149dd
   14c04:	000145ed 	.word	0x000145ed
   14c08:	000222e7 	.word	0x000222e7

00014c0c <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   14c0c:	4b05      	ldr	r3, [pc, #20]	; (14c24 <cntr_init+0x18>)
   14c0e:	2200      	movs	r2, #0
   14c10:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    p_reg->EVTENSET = mask;
   14c14:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   14c18:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   14c1c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   14c20:	4770      	bx	lr
   14c22:	bf00      	nop
   14c24:	4000b000 	.word	0x4000b000

00014c28 <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   14c28:	4a04      	ldr	r2, [pc, #16]	; (14c3c <cntr_start+0x14>)
   14c2a:	7813      	ldrb	r3, [r2, #0]
   14c2c:	1c59      	adds	r1, r3, #1
   14c2e:	7011      	strb	r1, [r2, #0]
   14c30:	2001      	movs	r0, #1
   14c32:	b913      	cbnz	r3, 14c3a <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   14c34:	4a02      	ldr	r2, [pc, #8]	; (14c40 <cntr_start+0x18>)
   14c36:	6010      	str	r0, [r2, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   14c38:	4618      	mov	r0, r3
}
   14c3a:	4770      	bx	lr
   14c3c:	2000303b 	.word	0x2000303b
   14c40:	4000b000 	.word	0x4000b000

00014c44 <cntr_stop>:

uint32_t cntr_stop(void)
{
   14c44:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   14c46:	4c0d      	ldr	r4, [pc, #52]	; (14c7c <cntr_stop+0x38>)
   14c48:	7823      	ldrb	r3, [r4, #0]
   14c4a:	b95b      	cbnz	r3, 14c64 <cntr_stop+0x20>
   14c4c:	4a0c      	ldr	r2, [pc, #48]	; (14c80 <cntr_stop+0x3c>)
   14c4e:	490d      	ldr	r1, [pc, #52]	; (14c84 <cntr_stop+0x40>)
   14c50:	480d      	ldr	r0, [pc, #52]	; (14c88 <cntr_stop+0x44>)
   14c52:	232d      	movs	r3, #45	; 0x2d
   14c54:	f003 fc88 	bl	18568 <printk>
   14c58:	4040      	eors	r0, r0
   14c5a:	f380 8811 	msr	BASEPRI, r0
   14c5e:	f04f 0003 	mov.w	r0, #3
   14c62:	df02      	svc	2

	if (--_refcount) {
   14c64:	7820      	ldrb	r0, [r4, #0]
   14c66:	3801      	subs	r0, #1
   14c68:	b2c0      	uxtb	r0, r0
   14c6a:	7020      	strb	r0, [r4, #0]
   14c6c:	2301      	movs	r3, #1
   14c6e:	b910      	cbnz	r0, 14c76 <cntr_stop+0x32>
   14c70:	4a06      	ldr	r2, [pc, #24]	; (14c8c <cntr_stop+0x48>)
   14c72:	6013      	str	r3, [r2, #0]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   14c74:	bd10      	pop	{r4, pc}
		return 1;
   14c76:	4618      	mov	r0, r3
   14c78:	e7fc      	b.n	14c74 <cntr_stop+0x30>
   14c7a:	bf00      	nop
   14c7c:	2000303b 	.word	0x2000303b
   14c80:	0002243f 	.word	0x0002243f
   14c84:	0002248b 	.word	0x0002248b
   14c88:	0001f734 	.word	0x0001f734
   14c8c:	4000b004 	.word	0x4000b004

00014c90 <cntr_cnt_get>:
     return p_reg->COUNTER;
   14c90:	4b01      	ldr	r3, [pc, #4]	; (14c98 <cntr_cnt_get+0x8>)
   14c92:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   14c96:	4770      	bx	lr
   14c98:	4000b000 	.word	0x4000b000

00014c9c <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   14c9c:	4b02      	ldr	r3, [pc, #8]	; (14ca8 <cntr_cmp_set+0xc>)
   14c9e:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   14ca2:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   14ca6:	4770      	bx	lr
   14ca8:	4000b000 	.word	0x4000b000

00014cac <do_ecb>:
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   14cac:	b5f0      	push	{r4, r5, r6, r7, lr}
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   14cae:	4b13      	ldr	r3, [pc, #76]	; (14cfc <do_ecb+0x50>)

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14cb0:	4c13      	ldr	r4, [pc, #76]	; (14d00 <do_ecb+0x54>)
   14cb2:	2501      	movs	r5, #1
   14cb4:	462e      	mov	r6, r5
		NRF_ECB->EVENTS_ENDECB = 0;
   14cb6:	2700      	movs	r7, #0
   14cb8:	46a6      	mov	lr, r4
   14cba:	461a      	mov	r2, r3
   14cbc:	6026      	str	r6, [r4, #0]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   14cbe:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   14cc2:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   14cc6:	f8c3 7104 	str.w	r7, [r3, #260]	; 0x104
   14cca:	601e      	str	r6, [r3, #0]
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   14ccc:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
   14cd0:	b931      	cbnz	r1, 14ce0 <do_ecb+0x34>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   14cd2:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   14cd6:	b919      	cbnz	r1, 14ce0 <do_ecb+0x34>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   14cd8:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   14cdc:	2900      	cmp	r1, #0
   14cde:	d1f5      	bne.n	14ccc <do_ecb+0x20>
   14ce0:	f8ce 5000 	str.w	r5, [lr]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   14ce4:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
   14ce8:	2900      	cmp	r1, #0
   14cea:	d1e7      	bne.n	14cbc <do_ecb+0x10>
   14cec:	f8d2 c504 	ldr.w	ip, [r2, #1284]	; 0x504
   14cf0:	f1bc 0f00 	cmp.w	ip, #0
   14cf4:	d0e2      	beq.n	14cbc <do_ecb+0x10>

	NRF_ECB->ECBDATAPTR = 0;
   14cf6:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
}
   14cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14cfc:	4000e000 	.word	0x4000e000
   14d00:	4000e004 	.word	0x4000e004

00014d04 <hal_radio_enable_on_tick_ppi_config_and_enable>:
static inline void hal_radio_enable_on_tick_ppi_config_and_enable(uint8_t trx)
{
	/* No need to configure anything for the pre-programmed channels.
	 * Just enable and disable them accordingly.
	 */
	nrf_ppi_channels_disable(
   14d04:	2800      	cmp	r0, #0
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   14d06:	4b08      	ldr	r3, [pc, #32]	; (14d28 <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
   14d08:	bf14      	ite	ne
   14d0a:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
   14d0e:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
   14d12:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
		NRF_PPI,
		trx ? BIT(HAL_RADIO_ENABLE_RX_ON_TICK_PPI)
		    : BIT(HAL_RADIO_ENABLE_TX_ON_TICK_PPI));
	nrf_ppi_channels_enable(
   14d16:	bf14      	ite	ne
   14d18:	f44f 1280 	movne.w	r2, #1048576	; 0x100000
   14d1c:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    p_reg->CHENSET = mask;
   14d20:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		NRF_PPI,
		trx ? BIT(HAL_RADIO_ENABLE_TX_ON_TICK_PPI)
		    : BIT(HAL_RADIO_ENABLE_RX_ON_TICK_PPI));
}
   14d24:	4770      	bx	lr
   14d26:	bf00      	nop
   14d28:	4001f000 	.word	0x4001f000

00014d2c <sw_switch.isra.0>:
#define SW_SWITCH_PREV_FLAGS_DONTCARE 0
#define SW_SWITCH_NEXT_FLAGS_DONTCARE 0

static uint8_t sw_tifs_toggle;

static inline void sw_switch(uint8_t dir_curr, uint8_t dir_next,
   14d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
			     uint8_t phy_curr, uint8_t flags_curr,
			     uint8_t phy_next, uint8_t flags_next)
{
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   14d2e:	4f31      	ldr	r7, [pc, #196]	; (14df4 <sw_switch.isra.0+0xc8>)
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   14d30:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 14e00 <sw_switch.isra.0+0xd4>
   14d34:	783e      	ldrb	r6, [r7, #0]
   14d36:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 14e08 <sw_switch.isra.0+0xdc>
   14d3a:	f8cc e568 	str.w	lr, [ip, #1384]	; 0x568
	 */
	nrf_ppi_channel_endpoint_setup(
		NRF_PPI,
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI,
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT,
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   14d3e:	00f5      	lsls	r5, r6, #3
   14d40:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   14d44:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   14d48:	f8cc 556c 	str.w	r5, [ip, #1388]	; 0x56c
	 * (TX/RX).
	 */
	nrf_ppi_event_endpoint_setup(
		NRF_PPI,
		radio_enable_ppi,
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   14d4c:	4d2a      	ldr	r5, [pc, #168]	; (14df8 <sw_switch.isra.0+0xcc>)
   14d4e:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   14d52:	f106 050c 	add.w	r5, r6, #12
   14d56:	b2ed      	uxtb	r5, r5
   14d58:	00ed      	lsls	r5, r5, #3
   14d5a:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   14d5e:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   14d62:	4634      	mov	r4, r6

NRF_STATIC_INLINE void nrf_ppi_event_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                    nrf_ppi_channel_t channel,
                                                    uint32_t          eep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   14d64:	f8c5 c510 	str.w	ip, [r5, #1296]	; 0x510

	/* NOTE: As constants are passed to dir_curr and dir_next, the
	 *       compiler should optimize out the redundant code path as
	 *       this is an inline function.
	 */
	if (dir_next) {
   14d68:	2900      	cmp	r1, #0
   14d6a:	d03e      	beq.n	14dea <sw_switch.isra.0+0xbe>
		/* TX */

		/* Calculate delay with respect to current and next PHY.
		 */
		if (dir_curr) {
   14d6c:	b348      	cbz	r0, 14dc2 <sw_switch.isra.0+0x96>
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_2M_NS;
   14d6e:	f24a 025a 	movw	r2, #41050	; 0xa05a
   14d72:	f649 4140 	movw	r1, #40000	; 0x9c40
   14d76:	2b02      	cmp	r3, #2
   14d78:	bf14      	ite	ne
   14d7a:	4613      	movne	r3, r2
   14d7c:	460b      	moveq	r3, r1
			delay = HAL_RADIO_NS2US_ROUND(
   14d7e:	f203 13f5 	addw	r3, r3, #501	; 0x1f5
			hal_radio_b2b_txen_on_sw_switch(ppi);
		} else {
			/* If RX PHY is LE Coded, calculate for S8 coding.
			 * Assumption being, S8 has higher delay.
			 */
			delay = HAL_RADIO_NS2US_ROUND(
   14d82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14d86:	fbb3 f3f2 	udiv	r3, r3, r2

NRF_STATIC_INLINE void nrf_ppi_task_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                   nrf_ppi_channel_t channel,
                                                   uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].TEP = tep;
   14d8a:	4a1c      	ldr	r2, [pc, #112]	; (14dfc <sw_switch.isra.0+0xd0>)
   14d8c:	f8c5 2514 	str.w	r2, [r5, #1300]	; 0x514
		}
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   14d90:	00a2      	lsls	r2, r4, #2
   14d92:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   14d96:	f502 4210 	add.w	r2, r2, #36864	; 0x9000
#if !defined(CONFIG_SOC_SERIES_NRF53X)
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
#endif /* !CONFIG_SOC_SERIES_NRF53X */
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER || CONFIG_SOC_SERIES_NRF53X */

	sw_tifs_toggle += 1U;
   14d9a:	3601      	adds	r6, #1
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   14d9c:	f8d2 1540 	ldr.w	r1, [r2, #1344]	; 0x540
   14da0:	4299      	cmp	r1, r3
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   14da2:	bf8a      	itet	hi
   14da4:	f8d2 1540 	ldrhi.w	r1, [r2, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   14da8:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   14daa:	1acb      	subhi	r3, r1, r3
   14dac:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    p_reg->CHENSET = mask;
   14db0:	4b13      	ldr	r3, [pc, #76]	; (14e00 <sw_switch.isra.0+0xd4>)
   14db2:	f44f 6210 	mov.w	r2, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   14db6:	f006 0601 	and.w	r6, r6, #1
   14dba:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   14dbe:	703e      	strb	r6, [r7, #0]
}
   14dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14dc2:	f24a 015a 	movw	r1, #41050	; 0xa05a
   14dc6:	f649 4040 	movw	r0, #40000	; 0x9c40
   14dca:	2b02      	cmp	r3, #2
   14dcc:	bf14      	ite	ne
   14dce:	460b      	movne	r3, r1
   14dd0:	4603      	moveq	r3, r0
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_2M_NS;
   14dd2:	f242 41b8 	movw	r1, #9400	; 0x24b8
   14dd6:	f241 504a 	movw	r0, #5450	; 0x154a
   14dda:	2a02      	cmp	r2, #2
   14ddc:	bf14      	ite	ne
   14dde:	460a      	movne	r2, r1
   14de0:	4602      	moveq	r2, r0
			delay = HAL_RADIO_NS2US_ROUND(
   14de2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
   14de6:	4413      	add	r3, r2
   14de8:	e7cb      	b.n	14d82 <sw_switch.isra.0+0x56>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   14dea:	4b06      	ldr	r3, [pc, #24]	; (14e04 <sw_switch.isra.0+0xd8>)
   14dec:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
   14df0:	2329      	movs	r3, #41	; 0x29
{
	nrf_ppi_task_endpoint_setup(
		NRF_PPI,
		ppi,
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_RX);
}
   14df2:	e7cd      	b.n	14d90 <sw_switch.isra.0+0x64>
   14df4:	2000303c 	.word	0x2000303c
   14df8:	40009140 	.word	0x40009140
   14dfc:	40001000 	.word	0x40001000
   14e00:	4001f000 	.word	0x4001f000
   14e04:	40001004 	.word	0x40001004
   14e08:	4000110c 	.word	0x4000110c

00014e0c <isr_radio>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   14e0c:	4b04      	ldr	r3, [pc, #16]	; (14e20 <isr_radio+0x14>)
   14e0e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   14e12:	b123      	cbz	r3, 14e1e <isr_radio+0x12>
		isr_cb(isr_cb_param);
   14e14:	4b03      	ldr	r3, [pc, #12]	; (14e24 <isr_radio+0x18>)
   14e16:	4a04      	ldr	r2, [pc, #16]	; (14e28 <isr_radio+0x1c>)
   14e18:	681b      	ldr	r3, [r3, #0]
   14e1a:	6810      	ldr	r0, [r2, #0]
   14e1c:	4718      	bx	r3
}
   14e1e:	4770      	bx	lr
   14e20:	40001000 	.word	0x40001000
   14e24:	20002bf0 	.word	0x20002bf0
   14e28:	20002bf4 	.word	0x20002bf4

00014e2c <radio_isr_set>:
{
   14e2c:	b538      	push	{r3, r4, r5, lr}
   14e2e:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   14e30:	2001      	movs	r0, #1
{
   14e32:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   14e34:	f7ee fbbc 	bl	35b0 <arch_irq_disable>
	isr_cb_param = param;
   14e38:	4b08      	ldr	r3, [pc, #32]	; (14e5c <radio_isr_set+0x30>)
   14e3a:	601d      	str	r5, [r3, #0]
	isr_cb = cb;
   14e3c:	4b08      	ldr	r3, [pc, #32]	; (14e60 <radio_isr_set+0x34>)
   14e3e:	601c      	str	r4, [r3, #0]
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   14e40:	4b08      	ldr	r3, [pc, #32]	; (14e64 <radio_isr_set+0x38>)
   14e42:	2210      	movs	r2, #16
   14e44:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14e48:	4b07      	ldr	r3, [pc, #28]	; (14e68 <radio_isr_set+0x3c>)
   14e4a:	2202      	movs	r2, #2
   14e4c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   14e50:	2001      	movs	r0, #1
}
   14e52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   14e56:	f7ee bb9b 	b.w	3590 <arch_irq_enable>
   14e5a:	bf00      	nop
   14e5c:	20002bf4 	.word	0x20002bf4
   14e60:	20002bf0 	.word	0x20002bf0
   14e64:	40001000 	.word	0x40001000
   14e68:	e000e100 	.word	0xe000e100

00014e6c <radio_reset>:
{
   14e6c:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
   14e6e:	2001      	movs	r0, #1
   14e70:	f7ee fb9e 	bl	35b0 <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (radio_power ? RADIO_POWER_POWER_Enabled : RADIO_POWER_POWER_Disabled)
   14e74:	4b0c      	ldr	r3, [pc, #48]	; (14ea8 <radio_reset+0x3c>)
   14e76:	2200      	movs	r2, #0
   14e78:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
   14e7c:	2201      	movs	r2, #1
   14e7e:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   14e82:	4a0a      	ldr	r2, [pc, #40]	; (14eac <radio_reset+0x40>)
   14e84:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
   14e86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   14e8a:	f023 0301 	bic.w	r3, r3, #1
   14e8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   14e92:	6013      	str	r3, [r2, #0]
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   14e94:	4b06      	ldr	r3, [pc, #24]	; (14eb0 <radio_reset+0x44>)
   14e96:	f44f 5290 	mov.w	r2, #4608	; 0x1200
   14e9a:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   14e9e:	f44f 5210 	mov.w	r2, #9216	; 0x2400
   14ea2:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
   14ea6:	bd08      	pop	{r3, pc}
   14ea8:	40001000 	.word	0x40001000
   14eac:	40001774 	.word	0x40001774
   14eb0:	4001f000 	.word	0x4001f000

00014eb4 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   14eb4:	4b06      	ldr	r3, [pc, #24]	; (14ed0 <radio_phy_set+0x1c>)
	switch (phy) {
   14eb6:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   14eb8:	bf14      	ite	ne
   14eba:	2203      	movne	r2, #3
   14ebc:	2204      	moveq	r2, #4
   14ebe:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   14ec2:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   14ec6:	f042 0201 	orr.w	r2, r2, #1
   14eca:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   14ece:	4770      	bx	lr
   14ed0:	40001000 	.word	0x40001000

00014ed4 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   14ed4:	4b01      	ldr	r3, [pc, #4]	; (14edc <radio_tx_power_set+0x8>)
   14ed6:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   14eda:	4770      	bx	lr
   14edc:	40001000 	.word	0x40001000

00014ee0 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   14ee0:	4b01      	ldr	r3, [pc, #4]	; (14ee8 <radio_freq_chan_set+0x8>)
   14ee2:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   14ee6:	4770      	bx	lr
   14ee8:	40001000 	.word	0x40001000

00014eec <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   14eec:	4b07      	ldr	r3, [pc, #28]	; (14f0c <radio_whiten_iv_set+0x20>)
   14eee:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   14ef2:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   14ef6:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   14efa:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   14efe:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   14f02:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   14f06:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   14f0a:	4770      	bx	lr
   14f0c:	40001000 	.word	0x40001000

00014f10 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   14f10:	4a0a      	ldr	r2, [pc, #40]	; (14f3c <radio_aa_set+0x2c>)
   14f12:	2300      	movs	r3, #0
   14f14:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   14f18:	2301      	movs	r3, #1
   14f1a:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   14f1e:	78c3      	ldrb	r3, [r0, #3]
   14f20:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   14f24:	7843      	ldrb	r3, [r0, #1]
   14f26:	7881      	ldrb	r1, [r0, #2]
   14f28:	041b      	lsls	r3, r3, #16
   14f2a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   14f2e:	7801      	ldrb	r1, [r0, #0]
   14f30:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   14f34:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   14f38:	4770      	bx	lr
   14f3a:	bf00      	nop
   14f3c:	40001000 	.word	0x40001000

00014f40 <radio_pkt_configure>:
	switch (phy) {
   14f40:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   14f44:	2b02      	cmp	r3, #2
{
   14f46:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   14f48:	bf14      	ite	ne
   14f4a:	2400      	movne	r4, #0
   14f4c:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
	if (dc) {
   14f50:	07d3      	lsls	r3, r2, #31
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   14f52:	f1c0 0308 	rsb	r3, r0, #8
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   14f56:	bf48      	it	mi
   14f58:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   14f5c:	041b      	lsls	r3, r3, #16
			   ((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   14f5e:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   14f62:	4320      	orrs	r0, r4
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   14f64:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   14f68:	4a09      	ldr	r2, [pc, #36]	; (14f90 <radio_pkt_configure+0x50>)
			    RADIO_PCNF0_S1LEN_Msk) |
   14f6a:	4303      	orrs	r3, r0
   14f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   14f70:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   14f74:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   14f78:	4b06      	ldr	r3, [pc, #24]	; (14f94 <radio_pkt_configure+0x54>)
   14f7a:	4003      	ands	r3, r0
   14f7c:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((uint32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   14f80:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   14f84:	4319      	orrs	r1, r3
   14f86:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   14f8a:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   14f8e:	bd10      	pop	{r4, pc}
   14f90:	40001000 	.word	0x40001000
   14f94:	fef80000 	.word	0xfef80000

00014f98 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   14f98:	4b01      	ldr	r3, [pc, #4]	; (14fa0 <radio_pkt_rx_set+0x8>)
   14f9a:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   14f9e:	4770      	bx	lr
   14fa0:	40001000 	.word	0x40001000

00014fa4 <radio_pkt_tx_set>:
   14fa4:	4b01      	ldr	r3, [pc, #4]	; (14fac <radio_pkt_tx_set+0x8>)
   14fa6:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   14faa:	4770      	bx	lr
   14fac:	40001000 	.word	0x40001000

00014fb0 <radio_rx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14fb0:	4b01      	ldr	r3, [pc, #4]	; (14fb8 <radio_rx_enable+0x8>)
   14fb2:	2201      	movs	r2, #1
   14fb4:	601a      	str	r2, [r3, #0]
}
   14fb6:	4770      	bx	lr
   14fb8:	40001004 	.word	0x40001004

00014fbc <radio_tx_enable>:
   14fbc:	4b01      	ldr	r3, [pc, #4]	; (14fc4 <radio_tx_enable+0x8>)
   14fbe:	2201      	movs	r2, #1
   14fc0:	601a      	str	r2, [r3, #0]
}
   14fc2:	4770      	bx	lr
   14fc4:	40001000 	.word	0x40001000

00014fc8 <radio_disable>:
    p_reg->CHENCLR = mask;
   14fc8:	4a07      	ldr	r2, [pc, #28]	; (14fe8 <radio_disable+0x20>)
   14fca:	f44f 6310 	mov.w	r3, #2304	; 0x900
   14fce:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   14fd2:	2301      	movs	r3, #1
   14fd4:	6053      	str	r3, [r2, #4]
   14fd6:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   14fd8:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
   14fdc:	2100      	movs	r1, #0
   14fde:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
   14fe2:	6113      	str	r3, [r2, #16]
}
   14fe4:	4770      	bx	lr
   14fe6:	bf00      	nop
   14fe8:	4001f000 	.word	0x4001f000

00014fec <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   14fec:	4b04      	ldr	r3, [pc, #16]	; (15000 <radio_status_reset+0x14>)
   14fee:	2200      	movs	r2, #0
   14ff0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   14ff4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   14ff8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   14ffc:	4770      	bx	lr
   14ffe:	bf00      	nop
   15000:	40001000 	.word	0x40001000

00015004 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   15004:	4b03      	ldr	r3, [pc, #12]	; (15014 <radio_is_ready+0x10>)
   15006:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   1500a:	3800      	subs	r0, #0
   1500c:	bf18      	it	ne
   1500e:	2001      	movne	r0, #1
   15010:	4770      	bx	lr
   15012:	bf00      	nop
   15014:	40001000 	.word	0x40001000

00015018 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   15018:	4b03      	ldr	r3, [pc, #12]	; (15028 <radio_is_done+0x10>)
   1501a:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   1501e:	3800      	subs	r0, #0
   15020:	bf18      	it	ne
   15022:	2001      	movne	r0, #1
   15024:	4770      	bx	lr
   15026:	bf00      	nop
   15028:	40001000 	.word	0x40001000

0001502c <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   1502c:	4b03      	ldr	r3, [pc, #12]	; (1503c <radio_is_idle+0x10>)
   1502e:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   15032:	fab0 f080 	clz	r0, r0
   15036:	0940      	lsrs	r0, r0, #5
   15038:	4770      	bx	lr
   1503a:	bf00      	nop
   1503c:	40001000 	.word	0x40001000

00015040 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   15040:	4b04      	ldr	r3, [pc, #16]	; (15054 <radio_crc_configure+0x14>)
   15042:	f240 1203 	movw	r2, #259	; 0x103
   15046:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   1504a:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   1504e:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   15052:	4770      	bx	lr
   15054:	40001000 	.word	0x40001000

00015058 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   15058:	4b03      	ldr	r3, [pc, #12]	; (15068 <radio_crc_is_valid+0x10>)
   1505a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1505e:	3800      	subs	r0, #0
   15060:	bf18      	it	ne
   15062:	2001      	movne	r0, #1
   15064:	4770      	bx	lr
   15066:	bf00      	nop
   15068:	40001000 	.word	0x40001000

0001506c <radio_pkt_empty_get>:
}
   1506c:	4800      	ldr	r0, [pc, #0]	; (15070 <radio_pkt_empty_get+0x4>)
   1506e:	4770      	bx	lr
   15070:	20002ae8 	.word	0x20002ae8

00015074 <radio_pkt_scratch_get>:
}
   15074:	4800      	ldr	r0, [pc, #0]	; (15078 <radio_pkt_scratch_get+0x4>)
   15076:	4770      	bx	lr
   15078:	20002aec 	.word	0x20002aec

0001507c <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1507c:	4a04      	ldr	r2, [pc, #16]	; (15090 <radio_switch_complete_and_rx+0x14>)
   1507e:	2103      	movs	r1, #3
   15080:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200

	/* NOTE: As Tx chain delays are negligible constant values (~1 us)
	 *	 across nRF5x radios, sw_switch assumes the 1M chain delay for
	 *       calculations.
	 */
	sw_switch(SW_SWITCH_PREV_TX, SW_SWITCH_NEXT_RX,
   15084:	2200      	movs	r2, #0
{
   15086:	4603      	mov	r3, r0
	sw_switch(SW_SWITCH_PREV_TX, SW_SWITCH_NEXT_RX,
   15088:	4611      	mov	r1, r2
   1508a:	2001      	movs	r0, #1
   1508c:	f7ff be4e 	b.w	14d2c <sw_switch.isra.0>
   15090:	40001000 	.word	0x40001000

00015094 <radio_switch_complete_and_tx>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_tx(uint8_t phy_rx, uint8_t flags_rx,
				  uint8_t phy_tx, uint8_t flags_tx)
{
   15094:	4613      	mov	r3, r2
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   15096:	4a04      	ldr	r2, [pc, #16]	; (150a8 <radio_switch_complete_and_tx+0x14>)
   15098:	2103      	movs	r1, #3
   1509a:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;

	sw_switch(SW_SWITCH_PREV_RX, SW_SWITCH_NEXT_TX,
   1509e:	4602      	mov	r2, r0
   150a0:	2101      	movs	r1, #1
   150a2:	2000      	movs	r0, #0
   150a4:	f7ff be42 	b.w	14d2c <sw_switch.isra.0>
   150a8:	40001000 	.word	0x40001000

000150ac <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   150ac:	4b05      	ldr	r3, [pc, #20]	; (150c4 <radio_switch_complete_and_disable+0x18>)
   150ae:	2203      	movs	r2, #3
   150b0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->CHENCLR = mask;
   150b4:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   150b8:	f44f 6210 	mov.w	r2, #2304	; 0x900
   150bc:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   150c0:	4770      	bx	lr
   150c2:	bf00      	nop
   150c4:	40001000 	.word	0x40001000

000150c8 <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   150c8:	4a03      	ldr	r2, [pc, #12]	; (150d8 <radio_rssi_measure+0x10>)
   150ca:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   150ce:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   150d2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
   150d6:	4770      	bx	lr
   150d8:	40001000 	.word	0x40001000

000150dc <radio_rssi_get>:

uint32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   150dc:	4b01      	ldr	r3, [pc, #4]	; (150e4 <radio_rssi_get+0x8>)
   150de:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   150e2:	4770      	bx	lr
   150e4:	40001000 	.word	0x40001000

000150e8 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   150e8:	4b02      	ldr	r3, [pc, #8]	; (150f4 <radio_rssi_status_reset+0xc>)
   150ea:	2200      	movs	r2, #0
   150ec:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   150f0:	4770      	bx	lr
   150f2:	bf00      	nop
   150f4:	40001000 	.word	0x40001000

000150f8 <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   150f8:	4b03      	ldr	r3, [pc, #12]	; (15108 <radio_rssi_is_ready+0x10>)
   150fa:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   150fe:	3800      	subs	r0, #0
   15100:	bf18      	it	ne
   15102:	2001      	movne	r0, #1
   15104:	4770      	bx	lr
   15106:	bf00      	nop
   15108:	40001000 	.word	0x40001000

0001510c <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   1510c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1510e:	2400      	movs	r4, #0
   15110:	2706      	movs	r7, #6
   15112:	00a3      	lsls	r3, r4, #2
   15114:	fb07 2504 	mla	r5, r7, r4, r2
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   15118:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1511c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   15120:	682e      	ldr	r6, [r5, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   15122:	f8c3 6600 	str.w	r6, [r3, #1536]	; 0x600
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   15126:	3401      	adds	r4, #1
   15128:	88ad      	ldrh	r5, [r5, #4]
   1512a:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   1512e:	2c08      	cmp	r4, #8
   15130:	d1ef      	bne.n	15112 <radio_filter_configure+0x6>
		bdaddr += 6;
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   15132:	4b03      	ldr	r3, [pc, #12]	; (15140 <radio_filter_configure+0x34>)
   15134:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   15138:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   1513c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1513e:	bf00      	nop
   15140:	40001000 	.word	0x40001000

00015144 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   15144:	4a03      	ldr	r2, [pc, #12]	; (15154 <radio_filter_disable+0x10>)
   15146:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   1514a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1514e:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   15152:	4770      	bx	lr
   15154:	40001000 	.word	0x40001000

00015158 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   15158:	4b02      	ldr	r3, [pc, #8]	; (15164 <radio_filter_status_reset+0xc>)
   1515a:	2200      	movs	r2, #0
   1515c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   15160:	4770      	bx	lr
   15162:	bf00      	nop
   15164:	40001000 	.word	0x40001000

00015168 <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   15168:	4b03      	ldr	r3, [pc, #12]	; (15178 <radio_filter_has_match+0x10>)
   1516a:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   1516e:	3800      	subs	r0, #0
   15170:	bf18      	it	ne
   15172:	2001      	movne	r0, #1
   15174:	4770      	bx	lr
   15176:	bf00      	nop
   15178:	40001000 	.word	0x40001000

0001517c <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   1517c:	4b01      	ldr	r3, [pc, #4]	; (15184 <radio_filter_match_get+0x8>)
   1517e:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   15182:	4770      	bx	lr
   15184:	40001000 	.word	0x40001000

00015188 <radio_tmr_status_reset>:
    p_reg->EVTENCLR = mask;
   15188:	4b05      	ldr	r3, [pc, #20]	; (151a0 <radio_tmr_status_reset+0x18>)
   1518a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   1518e:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
   15192:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   15196:	4a03      	ldr	r2, [pc, #12]	; (151a4 <radio_tmr_status_reset+0x1c>)
   15198:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			BIT(HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI) |
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   1519c:	4770      	bx	lr
   1519e:	bf00      	nop
   151a0:	4000b000 	.word	0x4000b000
   151a4:	0e7000c0 	.word	0x0e7000c0

000151a8 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   151a8:	4b03      	ldr	r3, [pc, #12]	; (151b8 <radio_tmr_tifs_set+0x10>)
   151aa:	4a04      	ldr	r2, [pc, #16]	; (151bc <radio_tmr_tifs_set+0x14>)
   151ac:	781b      	ldrb	r3, [r3, #0]
   151ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   151b2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   151b6:	4770      	bx	lr
   151b8:	2000303c 	.word	0x2000303c
   151bc:	40009000 	.word	0x40009000

000151c0 <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   151c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   151c2:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   151c6:	4c2f      	ldr	r4, [pc, #188]	; (15284 <radio_tmr_start+0xc4>)
   151c8:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   151cc:	42a3      	cmp	r3, r4
		ticks_start--;
		remainder += 30517578UL;
   151ce:	bf88      	it	hi
   151d0:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   151d4:	4b2c      	ldr	r3, [pc, #176]	; (15288 <radio_tmr_start+0xc8>)
	}
	remainder /= 1000000UL;
   151d6:	4c2d      	ldr	r4, [pc, #180]	; (1528c <radio_tmr_start+0xcc>)
		remainder += 30517578UL;
   151d8:	bf84      	itt	hi
   151da:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
   151de:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
   151e2:	f04f 0501 	mov.w	r5, #1

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   151e6:	f04f 0600 	mov.w	r6, #0
	remainder /= 1000000UL;
   151ea:	fbb2 f4f4 	udiv	r4, r2, r4
	EVENT_TIMER->PRESCALER = 4;
   151ee:	f04f 0704 	mov.w	r7, #4
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   151f2:	f04f 0202 	mov.w	r2, #2
   151f6:	601d      	str	r5, [r3, #0]
	EVENT_TIMER->MODE = 0;
   151f8:	f8c3 64f8 	str.w	r6, [r3, #1272]	; 0x4f8
	EVENT_TIMER->PRESCALER = 4;
   151fc:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   15200:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
    p_reg->CC[ch] = cc_val;
   15204:	4a22      	ldr	r2, [pc, #136]	; (15290 <radio_tmr_start+0xd0>)
    p_reg->CC[cc_channel] = cc_value;
   15206:	f8c3 4534 	str.w	r4, [r3, #1332]	; 0x534
		ticks_start--;
   1520a:	bf88      	it	hi
   1520c:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
   15210:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   15214:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   15218:	f8c2 1344 	str.w	r1, [r2, #836]	; 0x344
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1521c:	491d      	ldr	r1, [pc, #116]	; (15294 <radio_tmr_start+0xd4>)
   1521e:	f502 72a4 	add.w	r2, r2, #328	; 0x148
	EVENT_TIMER->MODE = 0;
   15222:	3b0c      	subs	r3, #12
   15224:	f8c1 2540 	str.w	r2, [r1, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   15228:	f8c1 3544 	str.w	r3, [r1, #1348]	; 0x544
    p_reg->CHENSET = mask;
   1522c:	2340      	movs	r3, #64	; 0x40
   1522e:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
	nrf_rtc_event_enable(NRF_RTC0, RTC_EVTENSET_COMPARE2_Msk);

	hal_event_timer_start_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_EVENT_TIMER_START_PPI));

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   15232:	f7ff fd67 	bl	14d04 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   15236:	4b18      	ldr	r3, [pc, #96]	; (15298 <radio_tmr_start+0xd8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15238:	4a18      	ldr	r2, [pc, #96]	; (1529c <radio_tmr_start+0xdc>)
   1523a:	6015      	str	r5, [r2, #0]
   1523c:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   15240:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   15244:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
   15248:	601d      	str	r5, [r3, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1524a:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
   1524e:	3b74      	subs	r3, #116	; 0x74
   15250:	f8c1 3550 	str.w	r3, [r1, #1360]	; 0x550
   15254:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   15258:	3334      	adds	r3, #52	; 0x34
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1525a:	f8c1 2554 	str.w	r2, [r1, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1525e:	f8c1 3558 	str.w	r3, [r1, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   15262:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   15266:	33c4      	adds	r3, #196	; 0xc4
   15268:	f8c1 355c 	str.w	r3, [r1, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1526c:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
   15270:	3bc0      	subs	r3, #192	; 0xc0
   15272:	f8c1 3560 	str.w	r3, [r1, #1376]	; 0x560
    p_reg->CH[(uint32_t) channel].TEP = tep;
   15276:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   1527a:	33c8      	adds	r3, #200	; 0xc8
   1527c:	f8c1 3564 	str.w	r3, [r1, #1380]	; 0x564
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   15280:	4620      	mov	r0, r4
   15282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15284:	7ff0bdbf 	.word	0x7ff0bdbf
   15288:	4000800c 	.word	0x4000800c
   1528c:	000f4240 	.word	0x000f4240
   15290:	4000b000 	.word	0x4000b000
   15294:	4001f000 	.word	0x4001f000
   15298:	40009000 	.word	0x40009000
   1529c:	4000900c 	.word	0x4000900c

000152a0 <radio_tmr_start_tick>:
   152a0:	4b0e      	ldr	r3, [pc, #56]	; (152dc <radio_tmr_start_tick+0x3c>)
    p_reg->CC[cc_channel] = cc_value;
   152a2:	4a0f      	ldr	r2, [pc, #60]	; (152e0 <radio_tmr_start_tick+0x40>)

uint32_t radio_tmr_start_tick(uint8_t trx, uint32_t tick)
{
   152a4:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   152a6:	2401      	movs	r4, #1
   152a8:	601c      	str	r4, [r3, #0]
   152aa:	609c      	str	r4, [r3, #8]
    p_reg->CC[ch] = cc_val;
   152ac:	4b0d      	ldr	r3, [pc, #52]	; (152e4 <radio_tmr_start_tick+0x44>)
    p_reg->CC[cc_channel] = cc_value;
   152ae:	f8c2 4540 	str.w	r4, [r2, #1344]	; 0x540
   152b2:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   152b6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   152ba:	f8c3 1344 	str.w	r1, [r3, #836]	; 0x344
    p_reg->CH[(uint32_t) channel].EEP = eep;
   152be:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   152c2:	4909      	ldr	r1, [pc, #36]	; (152e8 <radio_tmr_start_tick+0x48>)
   152c4:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   152c8:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->CHENSET = mask;
   152cc:	2240      	movs	r2, #64	; 0x40
   152ce:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	nrf_rtc_event_enable(NRF_RTC0, RTC_EVTENSET_COMPARE2_Msk);

	hal_event_timer_start_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_EVENT_TIMER_START_PPI));

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   152d2:	f7ff fd17 	bl	14d04 <hal_radio_enable_on_tick_ppi_config_and_enable>
	hal_sw_switch_timer_clear_ppi_config();
#endif /* CONFIG_SOC_SERIES_NRF53X */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder_us;
}
   152d6:	4620      	mov	r0, r4
   152d8:	bd10      	pop	{r4, pc}
   152da:	bf00      	nop
   152dc:	40008004 	.word	0x40008004
   152e0:	40008000 	.word	0x40008000
   152e4:	4000b000 	.word	0x4000b000
   152e8:	4000b148 	.word	0x4000b148

000152ec <radio_tmr_start_get>:
    return p_reg->CC[ch];
   152ec:	4b01      	ldr	r3, [pc, #4]	; (152f4 <radio_tmr_start_get+0x8>)
   152ee:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   152f2:	4770      	bx	lr
   152f4:	4000b000 	.word	0x4000b000

000152f8 <radio_tmr_stop>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   152f8:	4a04      	ldr	r2, [pc, #16]	; (1530c <radio_tmr_stop+0x14>)
   152fa:	2301      	movs	r3, #1
   152fc:	6013      	str	r3, [r2, #0]
   152fe:	60d3      	str	r3, [r2, #12]
   15300:	320c      	adds	r2, #12
   15302:	f602 72f4 	addw	r2, r2, #4084	; 0xff4
   15306:	6013      	str	r3, [r2, #0]
   15308:	60d3      	str	r3, [r2, #12]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1530a:	4770      	bx	lr
   1530c:	40008004 	.word	0x40008004

00015310 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   15310:	4b04      	ldr	r3, [pc, #16]	; (15324 <radio_tmr_hcto_configure+0x14>)
   15312:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
   15316:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
   1531a:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   1531e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   15322:	4770      	bx	lr
   15324:	40008000 	.word	0x40008000

00015328 <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   15328:	4b06      	ldr	r3, [pc, #24]	; (15344 <radio_tmr_aa_capture+0x1c>)
   1532a:	4a07      	ldr	r2, [pc, #28]	; (15348 <radio_tmr_aa_capture+0x20>)
   1532c:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   15330:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   15334:	3240      	adds	r2, #64	; 0x40
   15336:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    p_reg->CHENSET = mask;
   1533a:	4a04      	ldr	r2, [pc, #16]	; (1534c <radio_tmr_aa_capture+0x24>)
   1533c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   15340:	4770      	bx	lr
   15342:	bf00      	nop
   15344:	4001f000 	.word	0x4001f000
   15348:	40001100 	.word	0x40001100
   1534c:	04000080 	.word	0x04000080

00015350 <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   15350:	4b01      	ldr	r3, [pc, #4]	; (15358 <radio_tmr_aa_get+0x8>)
   15352:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   15356:	4770      	bx	lr
   15358:	40008000 	.word	0x40008000

0001535c <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   1535c:	4b01      	ldr	r3, [pc, #4]	; (15364 <radio_tmr_aa_save+0x8>)
   1535e:	6018      	str	r0, [r3, #0]
}
   15360:	4770      	bx	lr
   15362:	bf00      	nop
   15364:	20002bf8 	.word	0x20002bf8

00015368 <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
   15368:	4b01      	ldr	r3, [pc, #4]	; (15370 <radio_tmr_aa_restore+0x8>)
   1536a:	6818      	ldr	r0, [r3, #0]
   1536c:	4770      	bx	lr
   1536e:	bf00      	nop
   15370:	20002bf8 	.word	0x20002bf8

00015374 <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   15374:	4b01      	ldr	r3, [pc, #4]	; (1537c <radio_tmr_ready_get+0x8>)
   15376:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   1537a:	4770      	bx	lr
   1537c:	40008000 	.word	0x40008000

00015380 <radio_tmr_end_capture>:
   15380:	4b02      	ldr	r3, [pc, #8]	; (1538c <radio_tmr_end_capture+0xc>)
   15382:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   15386:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 */
#if defined(CONFIG_BT_CTLR_TIFS_HW) || !defined(CONFIG_SOC_SERIES_NRF53X)
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
#endif /* CONFIG_BT_CTLR_TIFS_HW || !CONFIG_SOC_SERIES_NRF53X */
}
   1538a:	4770      	bx	lr
   1538c:	4001f000 	.word	0x4001f000

00015390 <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   15390:	4b01      	ldr	r3, [pc, #4]	; (15398 <radio_tmr_end_get+0x8>)
   15392:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   15396:	4770      	bx	lr
   15398:	40008000 	.word	0x40008000

0001539c <radio_tmr_tifs_base_get>:
   1539c:	4b01      	ldr	r3, [pc, #4]	; (153a4 <radio_tmr_tifs_base_get+0x8>)
   1539e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   153a2:	4770      	bx	lr
   153a4:	40008000 	.word	0x40008000

000153a8 <radio_ar_match_get>:
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   153a8:	4b01      	ldr	r3, [pc, #4]	; (153b0 <radio_ar_match_get+0x8>)
   153aa:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   153ae:	4770      	bx	lr
   153b0:	4000f000 	.word	0x4000f000

000153b4 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   153b4:	4a06      	ldr	r2, [pc, #24]	; (153d0 <radio_ar_status_reset+0x1c>)
   153b6:	2300      	movs	r3, #0
   153b8:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   153bc:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   153c0:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    p_reg->CHENCLR = mask;
   153c4:	4b03      	ldr	r3, [pc, #12]	; (153d4 <radio_ar_status_reset+0x20>)
   153c6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   153ca:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   153ce:	4770      	bx	lr
   153d0:	40001000 	.word	0x40001000
   153d4:	4001f000 	.word	0x4001f000

000153d8 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   153d8:	4b08      	ldr	r3, [pc, #32]	; (153fc <radio_ar_has_match+0x24>)
   153da:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   153de:	b160      	cbz	r0, 153fa <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   153e0:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   153e4:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   153e8:	b138      	cbz	r0, 153fa <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   153ea:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   153ee:	b120      	cbz	r0, 153fa <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   153f0:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   153f4:	fab0 f080 	clz	r0, r0
   153f8:	0940      	lsrs	r0, r0, #5
}
   153fa:	4770      	bx	lr
   153fc:	40001000 	.word	0x40001000

00015400 <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   15400:	2902      	cmp	r1, #2
{
   15402:	b510      	push	{r4, lr}
   15404:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   15406:	d00b      	beq.n	15420 <mayfly_enable_cb+0x20>
   15408:	4a0a      	ldr	r2, [pc, #40]	; (15434 <mayfly_enable_cb+0x34>)
   1540a:	490b      	ldr	r1, [pc, #44]	; (15438 <mayfly_enable_cb+0x38>)
   1540c:	480b      	ldr	r0, [pc, #44]	; (1543c <mayfly_enable_cb+0x3c>)
   1540e:	231e      	movs	r3, #30
   15410:	f003 f8aa 	bl	18568 <printk>
   15414:	4040      	eors	r0, r0
   15416:	f380 8811 	msr	BASEPRI, r0
   1541a:	f04f 0003 	mov.w	r0, #3
   1541e:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   15420:	200b      	movs	r0, #11
	if (enable) {
   15422:	b11c      	cbz	r4, 1542c <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   15424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   15428:	f7ee b8b2 	b.w	3590 <arch_irq_enable>
}
   1542c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   15430:	f7ee b8be 	b.w	35b0 <arch_irq_disable>
   15434:	000224b6 	.word	0x000224b6
   15438:	00022504 	.word	0x00022504
   1543c:	0001f734 	.word	0x0001f734

00015440 <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
   15440:	b508      	push	{r3, lr}
	(void)caller_id;

	switch (callee_id) {
   15442:	b181      	cbz	r1, 15466 <mayfly_is_enabled+0x26>
   15444:	3901      	subs	r1, #1
   15446:	2901      	cmp	r1, #1
   15448:	d912      	bls.n	15470 <mayfly_is_enabled+0x30>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   1544a:	4a0a      	ldr	r2, [pc, #40]	; (15474 <mayfly_is_enabled+0x34>)
   1544c:	490a      	ldr	r1, [pc, #40]	; (15478 <mayfly_is_enabled+0x38>)
   1544e:	480b      	ldr	r0, [pc, #44]	; (1547c <mayfly_is_enabled+0x3c>)
   15450:	2336      	movs	r3, #54	; 0x36
   15452:	f003 f889 	bl	18568 <printk>
   15456:	4040      	eors	r0, r0
   15458:	f380 8811 	msr	BASEPRI, r0
   1545c:	f04f 0003 	mov.w	r0, #3
   15460:	df02      	svc	2
		break;
	}

	return 0;
}
   15462:	2000      	movs	r0, #0
   15464:	bd08      	pop	{r3, pc}
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   15466:	2018      	movs	r0, #24
}
   15468:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   1546c:	f7ee b8b4 	b.w	35d8 <arch_irq_is_enabled>
   15470:	200b      	movs	r0, #11
   15472:	e7f9      	b.n	15468 <mayfly_is_enabled+0x28>
   15474:	000224b6 	.word	0x000224b6
   15478:	00020b9a 	.word	0x00020b9a
   1547c:	0001f734 	.word	0x0001f734

00015480 <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   15480:	2901      	cmp	r1, #1
{
   15482:	b508      	push	{r3, lr}
	switch (callee_id) {
   15484:	d008      	beq.n	15498 <mayfly_pend+0x18>
   15486:	2902      	cmp	r1, #2
   15488:	d006      	beq.n	15498 <mayfly_pend+0x18>
   1548a:	b949      	cbnz	r1, 154a0 <mayfly_pend+0x20>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1548c:	4b0b      	ldr	r3, [pc, #44]	; (154bc <mayfly_pend+0x3c>)
   1548e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   15492:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	default:
		LL_ASSERT(0);
		break;
	}
}
   15496:	bd08      	pop	{r3, pc}
   15498:	4b08      	ldr	r3, [pc, #32]	; (154bc <mayfly_pend+0x3c>)
   1549a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1549e:	e7f8      	b.n	15492 <mayfly_pend+0x12>
		LL_ASSERT(0);
   154a0:	4a07      	ldr	r2, [pc, #28]	; (154c0 <mayfly_pend+0x40>)
   154a2:	4908      	ldr	r1, [pc, #32]	; (154c4 <mayfly_pend+0x44>)
   154a4:	4808      	ldr	r0, [pc, #32]	; (154c8 <mayfly_pend+0x48>)
   154a6:	2367      	movs	r3, #103	; 0x67
   154a8:	f003 f85e 	bl	18568 <printk>
   154ac:	4040      	eors	r0, r0
   154ae:	f380 8811 	msr	BASEPRI, r0
   154b2:	f04f 0003 	mov.w	r0, #3
   154b6:	df02      	svc	2
}
   154b8:	e7ed      	b.n	15496 <mayfly_pend+0x16>
   154ba:	bf00      	nop
   154bc:	e000e100 	.word	0xe000e100
   154c0:	000224b6 	.word	0x000224b6
   154c4:	00020b9a 	.word	0x00020b9a
   154c8:	0001f734 	.word	0x0001f734

000154cc <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   154cc:	2803      	cmp	r0, #3
{
   154ce:	b510      	push	{r4, lr}
   154d0:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   154d2:	d90b      	bls.n	154ec <hal_ticker_instance0_caller_id_get+0x20>
   154d4:	4a0e      	ldr	r2, [pc, #56]	; (15510 <hal_ticker_instance0_caller_id_get+0x44>)
   154d6:	490f      	ldr	r1, [pc, #60]	; (15514 <hal_ticker_instance0_caller_id_get+0x48>)
   154d8:	480f      	ldr	r0, [pc, #60]	; (15518 <hal_ticker_instance0_caller_id_get+0x4c>)
   154da:	232b      	movs	r3, #43	; 0x2b
   154dc:	f003 f844 	bl	18568 <printk>
   154e0:	4040      	eors	r0, r0
   154e2:	f380 8811 	msr	BASEPRI, r0
   154e6:	f04f 0003 	mov.w	r0, #3
   154ea:	df02      	svc	2

	caller_id = caller_id_lut[user_id];
   154ec:	4b0b      	ldr	r3, [pc, #44]	; (1551c <hal_ticker_instance0_caller_id_get+0x50>)
   154ee:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   154f0:	b95c      	cbnz	r4, 1550a <hal_ticker_instance0_caller_id_get+0x3e>
   154f2:	4a07      	ldr	r2, [pc, #28]	; (15510 <hal_ticker_instance0_caller_id_get+0x44>)
   154f4:	490a      	ldr	r1, [pc, #40]	; (15520 <hal_ticker_instance0_caller_id_get+0x54>)
   154f6:	4808      	ldr	r0, [pc, #32]	; (15518 <hal_ticker_instance0_caller_id_get+0x4c>)
   154f8:	232e      	movs	r3, #46	; 0x2e
   154fa:	f003 f835 	bl	18568 <printk>
   154fe:	4040      	eors	r0, r0
   15500:	f380 8811 	msr	BASEPRI, r0
   15504:	f04f 0003 	mov.w	r0, #3
   15508:	df02      	svc	2

	return caller_id;
}
   1550a:	4620      	mov	r0, r4
   1550c:	bd10      	pop	{r4, pc}
   1550e:	bf00      	nop
   15510:	00022526 	.word	0x00022526
   15514:	00022574 	.word	0x00022574
   15518:	0001f734 	.word	0x0001f734
   1551c:	000225b6 	.word	0x000225b6
   15520:	00022594 	.word	0x00022594

00015524 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   15524:	3801      	subs	r0, #1
{
   15526:	b510      	push	{r4, lr}
   15528:	461c      	mov	r4, r3
   1552a:	2804      	cmp	r0, #4
   1552c:	d845      	bhi.n	155ba <hal_ticker_instance0_sched+0x96>
   1552e:	e8df f000 	tbb	[pc, r0]
   15532:	1a03      	.short	0x1a03
   15534:	2c23      	.short	0x2c23
   15536:	3b          	.byte	0x3b
   15537:	00          	.byte	0x00
	case TICKER_CALL_ID_ISR:
		switch (callee_id) {
   15538:	2904      	cmp	r1, #4
   1553a:	d107      	bne.n	1554c <hal_ticker_instance0_sched+0x28>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;
   1553c:	4b20      	ldr	r3, [pc, #128]	; (155c0 <hal_ticker_instance0_sched+0x9c>)

			/* TODO: scheduler lock, if preemptive threads used */
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1553e:	2102      	movs	r1, #2
			m.param = instance;
   15540:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   15542:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
   15544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   15548:	f7f9 b848 	b.w	e5dc <mayfly_enqueue>
			LL_ASSERT(0);
   1554c:	234e      	movs	r3, #78	; 0x4e
		LL_ASSERT(0);
   1554e:	4a1d      	ldr	r2, [pc, #116]	; (155c4 <hal_ticker_instance0_sched+0xa0>)
   15550:	491d      	ldr	r1, [pc, #116]	; (155c8 <hal_ticker_instance0_sched+0xa4>)
   15552:	481e      	ldr	r0, [pc, #120]	; (155cc <hal_ticker_instance0_sched+0xa8>)
   15554:	f003 f808 	bl	18568 <printk>
   15558:	4040      	eors	r0, r0
   1555a:	f380 8811 	msr	BASEPRI, r0
   1555e:	f04f 0003 	mov.w	r0, #3
   15562:	df02      	svc	2
}
   15564:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   15566:	2903      	cmp	r1, #3
   15568:	d104      	bne.n	15574 <hal_ticker_instance0_sched+0x50>
			m.param = instance;
   1556a:	4b19      	ldr	r3, [pc, #100]	; (155d0 <hal_ticker_instance0_sched+0xac>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1556c:	2101      	movs	r1, #1
			m.param = instance;
   1556e:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   15570:	4608      	mov	r0, r1
   15572:	e7e7      	b.n	15544 <hal_ticker_instance0_sched+0x20>
			LL_ASSERT(0);
   15574:	2365      	movs	r3, #101	; 0x65
   15576:	e7ea      	b.n	1554e <hal_ticker_instance0_sched+0x2a>
		switch (callee_id) {
   15578:	2904      	cmp	r1, #4
   1557a:	d104      	bne.n	15586 <hal_ticker_instance0_sched+0x62>
			m.param = instance;
   1557c:	4b15      	ldr	r3, [pc, #84]	; (155d4 <hal_ticker_instance0_sched+0xb0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1557e:	2102      	movs	r1, #2
			m.param = instance;
   15580:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   15582:	2001      	movs	r0, #1
   15584:	e7de      	b.n	15544 <hal_ticker_instance0_sched+0x20>
			LL_ASSERT(0);
   15586:	237c      	movs	r3, #124	; 0x7c
   15588:	e7e1      	b.n	1554e <hal_ticker_instance0_sched+0x2a>
		switch (callee_id) {
   1558a:	2903      	cmp	r1, #3
   1558c:	d003      	beq.n	15596 <hal_ticker_instance0_sched+0x72>
   1558e:	2904      	cmp	r1, #4
   15590:	d006      	beq.n	155a0 <hal_ticker_instance0_sched+0x7c>
			LL_ASSERT(0);
   15592:	23a2      	movs	r3, #162	; 0xa2
   15594:	e7db      	b.n	1554e <hal_ticker_instance0_sched+0x2a>
			m.param = instance;
   15596:	4b10      	ldr	r3, [pc, #64]	; (155d8 <hal_ticker_instance0_sched+0xb4>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   15598:	2101      	movs	r1, #1
			m.param = instance;
   1559a:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1559c:	2002      	movs	r0, #2
   1559e:	e7d1      	b.n	15544 <hal_ticker_instance0_sched+0x20>
			m.param = instance;
   155a0:	4b0e      	ldr	r3, [pc, #56]	; (155dc <hal_ticker_instance0_sched+0xb8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   155a2:	2102      	movs	r1, #2
			m.param = instance;
   155a4:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   155a6:	e7e3      	b.n	15570 <hal_ticker_instance0_sched+0x4c>
		switch (callee_id) {
   155a8:	2904      	cmp	r1, #4
   155aa:	d104      	bne.n	155b6 <hal_ticker_instance0_sched+0x92>
			m.param = instance;
   155ac:	4b0c      	ldr	r3, [pc, #48]	; (155e0 <hal_ticker_instance0_sched+0xbc>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   155ae:	2102      	movs	r1, #2
			m.param = instance;
   155b0:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   155b2:	2003      	movs	r0, #3
   155b4:	e7c6      	b.n	15544 <hal_ticker_instance0_sched+0x20>
			LL_ASSERT(0);
   155b6:	23ba      	movs	r3, #186	; 0xba
   155b8:	e7c9      	b.n	1554e <hal_ticker_instance0_sched+0x2a>
		LL_ASSERT(0);
   155ba:	23c0      	movs	r3, #192	; 0xc0
   155bc:	e7c7      	b.n	1554e <hal_ticker_instance0_sched+0x2a>
   155be:	bf00      	nop
   155c0:	200008f0 	.word	0x200008f0
   155c4:	00022526 	.word	0x00022526
   155c8:	00020b9a 	.word	0x00020b9a
   155cc:	0001f734 	.word	0x0001f734
   155d0:	20000900 	.word	0x20000900
   155d4:	20000910 	.word	0x20000910
   155d8:	20000920 	.word	0x20000920
   155dc:	20000930 	.word	0x20000930
   155e0:	20000940 	.word	0x20000940

000155e4 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   155e4:	4b02      	ldr	r3, [pc, #8]	; (155f0 <net_buf_pool_get+0xc>)
   155e6:	2228      	movs	r2, #40	; 0x28
   155e8:	fb02 3000 	mla	r0, r2, r0, r3
   155ec:	4770      	bx	lr
   155ee:	bf00      	nop
   155f0:	20000c1c 	.word	0x20000c1c

000155f4 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   155f4:	7983      	ldrb	r3, [r0, #6]

	return buf - pool->__bufs;
   155f6:	4a05      	ldr	r2, [pc, #20]	; (1560c <net_buf_id+0x18>)
   155f8:	2128      	movs	r1, #40	; 0x28
   155fa:	fb01 2303 	mla	r3, r1, r3, r2
   155fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15600:	1ac0      	subs	r0, r0, r3
}
   15602:	4b03      	ldr	r3, [pc, #12]	; (15610 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   15604:	10c0      	asrs	r0, r0, #3
}
   15606:	4358      	muls	r0, r3
   15608:	4770      	bx	lr
   1560a:	bf00      	nop
   1560c:	20000c1c 	.word	0x20000c1c
   15610:	aaaaaaab 	.word	0xaaaaaaab

00015614 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   15614:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   15616:	4a0a      	ldr	r2, [pc, #40]	; (15640 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   15618:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1561a:	2428      	movs	r4, #40	; 0x28
   1561c:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   15620:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   15622:	6a1b      	ldr	r3, [r3, #32]
   15624:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   15626:	6823      	ldr	r3, [r4, #0]
   15628:	429a      	cmp	r2, r3
   1562a:	bf94      	ite	ls
   1562c:	600a      	strls	r2, [r1, #0]
   1562e:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   15630:	f7ff ffe0 	bl	155f4 <net_buf_id>
   15634:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   15638:	fb02 3000 	mla	r0, r2, r0, r3
   1563c:	bd10      	pop	{r4, pc}
   1563e:	bf00      	nop
   15640:	20000c1c 	.word	0x20000c1c

00015644 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   15644:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   15648:	4605      	mov	r5, r0
   1564a:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1564c:	4610      	mov	r0, r2
   1564e:	4619      	mov	r1, r3
{
   15650:	4616      	mov	r6, r2
   15652:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   15654:	f008 fc70 	bl	1df38 <sys_clock_timeout_end_calc>
   15658:	4680      	mov	r8, r0
   1565a:	4689      	mov	r9, r1
	__asm__ volatile(
   1565c:	f04f 0320 	mov.w	r3, #32
   15660:	f3ef 8a11 	mrs	sl, BASEPRI
   15664:	f383 8811 	msr	BASEPRI, r3
   15668:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1566c:	8b6b      	ldrh	r3, [r5, #26]
   1566e:	2b00      	cmp	r3, #0
   15670:	d054      	beq.n	1571c <net_buf_alloc_len+0xd8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   15672:	8b2a      	ldrh	r2, [r5, #24]
   15674:	429a      	cmp	r2, r3
   15676:	d93d      	bls.n	156f4 <net_buf_alloc_len+0xb0>
	return z_impl_k_queue_get(queue, timeout);
   15678:	2200      	movs	r2, #0
   1567a:	2300      	movs	r3, #0
   1567c:	4628      	mov	r0, r5
   1567e:	f001 fe71 	bl	17364 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   15682:	4604      	mov	r4, r0
   15684:	2800      	cmp	r0, #0
   15686:	d035      	beq.n	156f4 <net_buf_alloc_len+0xb0>
	__asm__ volatile(
   15688:	f38a 8811 	msr	BASEPRI, sl
   1568c:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   15690:	9b01      	ldr	r3, [sp, #4]
   15692:	2b00      	cmp	r3, #0
   15694:	d052      	beq.n	1573c <net_buf_alloc_len+0xf8>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   15696:	ea56 0307 	orrs.w	r3, r6, r7
   1569a:	d010      	beq.n	156be <net_buf_alloc_len+0x7a>
   1569c:	1c7b      	adds	r3, r7, #1
   1569e:	bf08      	it	eq
   156a0:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   156a4:	d00b      	beq.n	156be <net_buf_alloc_len+0x7a>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   156a6:	f002 fdb3 	bl	18210 <sys_clock_tick_get>
   156aa:	ebb8 0600 	subs.w	r6, r8, r0
   156ae:	eb69 0701 	sbc.w	r7, r9, r1
   156b2:	2e00      	cmp	r6, #0
   156b4:	f177 0300 	sbcs.w	r3, r7, #0
   156b8:	bfbc      	itt	lt
   156ba:	2600      	movlt	r6, #0
   156bc:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   156be:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   156c0:	f8df 8090 	ldr.w	r8, [pc, #144]	; 15754 <net_buf_alloc_len+0x110>
   156c4:	2228      	movs	r2, #40	; 0x28
   156c6:	fb02 8303 	mla	r3, r2, r3, r8
   156ca:	a901      	add	r1, sp, #4
   156cc:	6a1b      	ldr	r3, [r3, #32]
   156ce:	681b      	ldr	r3, [r3, #0]
   156d0:	4632      	mov	r2, r6
   156d2:	681d      	ldr	r5, [r3, #0]
   156d4:	4620      	mov	r0, r4
   156d6:	463b      	mov	r3, r7
   156d8:	47a8      	blx	r5
   156da:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   156dc:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   156de:	bb70      	cbnz	r0, 1573e <net_buf_alloc_len+0xfa>
	k_lifo_put(&pool->free, buf);
   156e0:	79a0      	ldrb	r0, [r4, #6]
   156e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   156e6:	4621      	mov	r1, r4
   156e8:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   156ec:	f008 f974 	bl	1d9d8 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   156f0:	462c      	mov	r4, r5
}
   156f2:	e01f      	b.n	15734 <net_buf_alloc_len+0xf0>
		uninit_count = pool->uninit_count--;
   156f4:	8b68      	ldrh	r0, [r5, #26]
   156f6:	1e43      	subs	r3, r0, #1
   156f8:	836b      	strh	r3, [r5, #26]
   156fa:	f38a 8811 	msr	BASEPRI, sl
   156fe:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   15702:	8b2c      	ldrh	r4, [r5, #24]
   15704:	1a24      	subs	r4, r4, r0
   15706:	6a68      	ldr	r0, [r5, #36]	; 0x24
   15708:	2318      	movs	r3, #24
   1570a:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   1570e:	4811      	ldr	r0, [pc, #68]	; (15754 <net_buf_alloc_len+0x110>)
   15710:	4b11      	ldr	r3, [pc, #68]	; (15758 <net_buf_alloc_len+0x114>)
   15712:	1a2d      	subs	r5, r5, r0
   15714:	10ed      	asrs	r5, r5, #3
   15716:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   15718:	71a5      	strb	r5, [r4, #6]
		goto success;
   1571a:	e7b9      	b.n	15690 <net_buf_alloc_len+0x4c>
   1571c:	f38a 8811 	msr	BASEPRI, sl
   15720:	f3bf 8f6f 	isb	sy
   15724:	4632      	mov	r2, r6
   15726:	463b      	mov	r3, r7
   15728:	4628      	mov	r0, r5
   1572a:	f001 fe1b 	bl	17364 <z_impl_k_queue_get>
	if (!buf) {
   1572e:	4604      	mov	r4, r0
   15730:	2800      	cmp	r0, #0
   15732:	d1ad      	bne.n	15690 <net_buf_alloc_len+0x4c>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   15734:	4620      	mov	r0, r4
   15736:	b002      	add	sp, #8
   15738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf->__buf = NULL;
   1573c:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   1573e:	2300      	movs	r3, #0
	buf->ref   = 1U;
   15740:	2201      	movs	r2, #1
	buf->frags = NULL;
   15742:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   15744:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   15746:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   15748:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1574a:	6923      	ldr	r3, [r4, #16]
   1574c:	81e2      	strh	r2, [r4, #14]
   1574e:	60a3      	str	r3, [r4, #8]
	return buf;
   15750:	e7f0      	b.n	15734 <net_buf_alloc_len+0xf0>
   15752:	bf00      	nop
   15754:	20000c1c 	.word	0x20000c1c
   15758:	cccccccd 	.word	0xcccccccd

0001575c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1575c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15760:	4d17      	ldr	r5, [pc, #92]	; (157c0 <net_buf_unref+0x64>)
   15762:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   15764:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   15766:	2728      	movs	r7, #40	; 0x28
	while (buf) {
   15768:	b90c      	cbnz	r4, 1576e <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1576a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1576e:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   15770:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   15774:	3b01      	subs	r3, #1
   15776:	b2db      	uxtb	r3, r3
   15778:	7123      	strb	r3, [r4, #4]
   1577a:	2b00      	cmp	r3, #0
   1577c:	d1f5      	bne.n	1576a <net_buf_unref+0xe>
		if (buf->__buf) {
   1577e:	6921      	ldr	r1, [r4, #16]
   15780:	b159      	cbz	r1, 1579a <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   15782:	7963      	ldrb	r3, [r4, #5]
   15784:	079b      	lsls	r3, r3, #30
   15786:	d407      	bmi.n	15798 <net_buf_unref+0x3c>
	pool->alloc->cb->unref(buf, data);
   15788:	79a3      	ldrb	r3, [r4, #6]
   1578a:	fb07 5303 	mla	r3, r7, r3, r5
   1578e:	4620      	mov	r0, r4
   15790:	6a1b      	ldr	r3, [r3, #32]
   15792:	681b      	ldr	r3, [r3, #0]
   15794:	689b      	ldr	r3, [r3, #8]
   15796:	4798      	blx	r3
			buf->__buf = NULL;
   15798:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   1579a:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1579c:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   1579e:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   157a2:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   157a4:	69db      	ldr	r3, [r3, #28]
   157a6:	b11b      	cbz	r3, 157b0 <net_buf_unref+0x54>
			pool->destroy(buf);
   157a8:	4620      	mov	r0, r4
   157aa:	4798      	blx	r3
{
   157ac:	4644      	mov	r4, r8
   157ae:	e7db      	b.n	15768 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   157b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   157b4:	4621      	mov	r1, r4
   157b6:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   157ba:	f008 f90d 	bl	1d9d8 <k_queue_prepend>
}
   157be:	e7f5      	b.n	157ac <net_buf_unref+0x50>
   157c0:	20000c1c 	.word	0x20000c1c

000157c4 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   157c4:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   157c6:	4b09      	ldr	r3, [pc, #36]	; (157ec <gpio_nrfx_init+0x28>)
   157c8:	781a      	ldrb	r2, [r3, #0]
   157ca:	b96a      	cbnz	r2, 157e8 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   157cc:	2101      	movs	r1, #1
   157ce:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   157d0:	2006      	movs	r0, #6
   157d2:	2105      	movs	r1, #5
   157d4:	f7ed ff0e 	bl	35f4 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   157d8:	2006      	movs	r0, #6
   157da:	f7ed fed9 	bl	3590 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   157de:	4b04      	ldr	r3, [pc, #16]	; (157f0 <gpio_nrfx_init+0x2c>)
   157e0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   157e4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   157e8:	2000      	movs	r0, #0
   157ea:	bd08      	pop	{r3, pc}
   157ec:	2000303d 	.word	0x2000303d
   157f0:	40006000 	.word	0x40006000

000157f4 <gpio_nrfx_pin_interrupt_configure>:
{
   157f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   157f6:	460d      	mov	r5, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   157f8:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
   157fa:	6906      	ldr	r6, [r0, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   157fc:	7a09      	ldrb	r1, [r1, #8]
   157fe:	f005 041f 	and.w	r4, r5, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   15802:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   15806:	ea44 1441 	orr.w	r4, r4, r1, lsl #5
   1580a:	d10c      	bne.n	15826 <gpio_nrfx_pin_interrupt_configure+0x32>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1580c:	f004 011f 	and.w	r1, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   15810:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   15814:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
   15818:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1581c:	07c8      	lsls	r0, r1, #31
   1581e:	d507      	bpl.n	15830 <gpio_nrfx_pin_interrupt_configure+0x3c>
		return -ENOTSUP;
   15820:	f06f 0085 	mvn.w	r0, #133	; 0x85
   15824:	e093      	b.n	1594e <gpio_nrfx_pin_interrupt_configure+0x15a>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   15826:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1582a:	68f1      	ldr	r1, [r6, #12]
   1582c:	f000 8091 	beq.w	15952 <gpio_nrfx_pin_interrupt_configure+0x15e>
   15830:	68f0      	ldr	r0, [r6, #12]
   15832:	2101      	movs	r1, #1
   15834:	40a9      	lsls	r1, r5
   15836:	4301      	orrs	r1, r0
   15838:	6970      	ldr	r0, [r6, #20]
   1583a:	60f1      	str	r1, [r6, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1583c:	2101      	movs	r1, #1
   1583e:	40a9      	lsls	r1, r5
   15840:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   15844:	69b2      	ldr	r2, [r6, #24]
   15846:	bf0c      	ite	eq
   15848:	4308      	orreq	r0, r1
   1584a:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1584c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   15850:	bf0c      	ite	eq
   15852:	430a      	orreq	r2, r1
   15854:	438a      	bicne	r2, r1
   15856:	61b2      	str	r2, [r6, #24]
   15858:	6932      	ldr	r2, [r6, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1585a:	6170      	str	r0, [r6, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1585c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   15860:	bf0c      	ite	eq
   15862:	4311      	orreq	r1, r2
   15864:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   15868:	4a46      	ldr	r2, [pc, #280]	; (15984 <gpio_nrfx_pin_interrupt_configure+0x190>)
   1586a:	6131      	str	r1, [r6, #16]
   1586c:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   15870:	2000      	movs	r0, #0
   15872:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   15874:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   15878:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   1587c:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   15880:	428c      	cmp	r4, r1
   15882:	d16b      	bne.n	1595c <gpio_nrfx_pin_interrupt_configure+0x168>
		    && (intenset & BIT(i))) {
   15884:	fa23 f100 	lsr.w	r1, r3, r0
   15888:	07c9      	lsls	r1, r1, #31
   1588a:	d567      	bpl.n	1595c <gpio_nrfx_pin_interrupt_configure+0x168>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   1588c:	0083      	lsls	r3, r0, #2
   1588e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   15892:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   15896:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   1589a:	f021 0101 	bic.w	r1, r1, #1
   1589e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   158a2:	2301      	movs	r3, #1
   158a4:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   158a6:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   158aa:	b2c0      	uxtb	r0, r0
   158ac:	f001 f888 	bl	169c0 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   158b0:	4620      	mov	r0, r4
   158b2:	2100      	movs	r1, #0
   158b4:	f007 fda0 	bl	1d3f8 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   158b8:	68f0      	ldr	r0, [r6, #12]
   158ba:	40e8      	lsrs	r0, r5
   158bc:	f010 0001 	ands.w	r0, r0, #1
   158c0:	d045      	beq.n	1594e <gpio_nrfx_pin_interrupt_configure+0x15a>
		if (data->trig_edge & BIT(pin)) {
   158c2:	6970      	ldr	r0, [r6, #20]
   158c4:	40e8      	lsrs	r0, r5
   158c6:	f010 0201 	ands.w	r2, r0, #1
   158ca:	d04e      	beq.n	1596a <gpio_nrfx_pin_interrupt_configure+0x176>
				if (data->double_edge & BIT(pin)) {
   158cc:	69b3      	ldr	r3, [r6, #24]
   158ce:	40eb      	lsrs	r3, r5
   158d0:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   158d2:	bf5f      	itttt	pl
   158d4:	6931      	ldrpl	r1, [r6, #16]
   158d6:	fa21 f505 	lsrpl.w	r5, r1, r5
   158da:	f005 0501 	andpl.w	r5, r5, #1
   158de:	f1c5 0502 	rsbpl	r5, r5, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   158e2:	f10d 0007 	add.w	r0, sp, #7
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   158e6:	bf54      	ite	pl
   158e8:	b2ed      	uxtbpl	r5, r5
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
   158ea:	2503      	movmi	r5, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   158ec:	f001 f88a 	bl	16a04 <nrfx_gpiote_channel_alloc>
   158f0:	4b25      	ldr	r3, [pc, #148]	; (15988 <gpio_nrfx_pin_interrupt_configure+0x194>)
   158f2:	4298      	cmp	r0, r3
   158f4:	d136      	bne.n	15964 <gpio_nrfx_pin_interrupt_configure+0x170>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   158f6:	f89d 1007 	ldrb.w	r1, [sp, #7]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   158fa:	008b      	lsls	r3, r1, #2
   158fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   15900:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   15904:	0224      	lsls	r4, r4, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   15906:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1590a:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
   1590e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   15912:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   15916:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1591a:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
   1591e:	4314      	orrs	r4, r2
    return ((uint32_t)p_reg + event);
   15920:	008a      	lsls	r2, r1, #2
   15922:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   15926:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1592a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1592e:	2000      	movs	r0, #0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   15930:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15934:	6010      	str	r0, [r2, #0]
   15936:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   15938:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1593c:	f042 0201 	orr.w	r2, r2, #1
   15940:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
   15944:	4a0f      	ldr	r2, [pc, #60]	; (15984 <gpio_nrfx_pin_interrupt_configure+0x190>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   15946:	2301      	movs	r3, #1
   15948:	408b      	lsls	r3, r1
   1594a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1594e:	b002      	add	sp, #8
   15950:	bd70      	pop	{r4, r5, r6, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   15952:	2001      	movs	r0, #1
   15954:	40a8      	lsls	r0, r5
   15956:	ea21 0100 	bic.w	r1, r1, r0
   1595a:	e76d      	b.n	15838 <gpio_nrfx_pin_interrupt_configure+0x44>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1595c:	3001      	adds	r0, #1
   1595e:	2808      	cmp	r0, #8
   15960:	d188      	bne.n	15874 <gpio_nrfx_pin_interrupt_configure+0x80>
   15962:	e7a5      	b.n	158b0 <gpio_nrfx_pin_interrupt_configure+0xbc>
		return -ENODEV;
   15964:	f06f 0012 	mvn.w	r0, #18
   15968:	e7f1      	b.n	1594e <gpio_nrfx_pin_interrupt_configure+0x15a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1596a:	6931      	ldr	r1, [r6, #16]
   1596c:	40e9      	lsrs	r1, r5
   1596e:	f001 0101 	and.w	r1, r1, #1
   15972:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   15976:	4620      	mov	r0, r4
   15978:	b2c9      	uxtb	r1, r1
   1597a:	f007 fd3d 	bl	1d3f8 <nrf_gpio_cfg_sense_set>
	int res = 0;
   1597e:	4610      	mov	r0, r2
   15980:	e7e5      	b.n	1594e <gpio_nrfx_pin_interrupt_configure+0x15a>
   15982:	bf00      	nop
   15984:	40006000 	.word	0x40006000
   15988:	0bad0000 	.word	0x0bad0000

0001598c <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1598c:	4b2a      	ldr	r3, [pc, #168]	; (15a38 <gpio_nrfx_config+0xac>)
{
   1598e:	b570      	push	{r4, r5, r6, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   15990:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15992:	482a      	ldr	r0, [pc, #168]	; (15a3c <gpio_nrfx_config+0xb0>)
   15994:	4013      	ands	r3, r2
   15996:	4283      	cmp	r3, r0
   15998:	d03e      	beq.n	15a18 <gpio_nrfx_config+0x8c>
   1599a:	d80d      	bhi.n	159b8 <gpio_nrfx_config+0x2c>
   1599c:	2b06      	cmp	r3, #6
   1599e:	d015      	beq.n	159cc <gpio_nrfx_config+0x40>
   159a0:	d805      	bhi.n	159ae <gpio_nrfx_config+0x22>
   159a2:	b19b      	cbz	r3, 159cc <gpio_nrfx_config+0x40>
   159a4:	2b02      	cmp	r3, #2
   159a6:	d039      	beq.n	15a1c <gpio_nrfx_config+0x90>
   159a8:	f06f 0015 	mvn.w	r0, #21
   159ac:	e033      	b.n	15a16 <gpio_nrfx_config+0x8a>
   159ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   159b2:	d1f9      	bne.n	159a8 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   159b4:	2301      	movs	r3, #1
   159b6:	e009      	b.n	159cc <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   159b8:	4821      	ldr	r0, [pc, #132]	; (15a40 <gpio_nrfx_config+0xb4>)
   159ba:	4283      	cmp	r3, r0
   159bc:	d030      	beq.n	15a20 <gpio_nrfx_config+0x94>
   159be:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   159c2:	d02f      	beq.n	15a24 <gpio_nrfx_config+0x98>
   159c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   159c8:	d1ee      	bne.n	159a8 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   159ca:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   159cc:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
   159ce:	bf54      	ite	pl
   159d0:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   159d4:	2503      	movmi	r5, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   159d6:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   159da:	f412 7f00 	tst.w	r2, #512	; 0x200
	dir = ((flags & GPIO_OUTPUT) != 0)
   159de:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   159e2:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   159e6:	d007      	beq.n	159f8 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   159e8:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   159ec:	6876      	ldr	r6, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   159ee:	d01b      	beq.n	15a28 <gpio_nrfx_config+0x9c>
			nrf_gpio_port_out_set(reg, BIT(pin));
   159f0:	2201      	movs	r2, #1
   159f2:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   159f4:	f8c6 2508 	str.w	r2, [r6, #1288]	; 0x508
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   159f8:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
    *p_pin = pin_number & 0x1F;
   159fc:	f001 011f 	and.w	r1, r1, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   15a00:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   15a04:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
   15a08:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   15a0c:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   15a10:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
   15a14:	2000      	movs	r0, #0
}
   15a16:	bd70      	pop	{r4, r5, r6, pc}
		drive = NRF_GPIO_PIN_H0D1;
   15a18:	2307      	movs	r3, #7
   15a1a:	e7d7      	b.n	159cc <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   15a1c:	2304      	movs	r3, #4
   15a1e:	e7d5      	b.n	159cc <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   15a20:	2305      	movs	r3, #5
   15a22:	e7d3      	b.n	159cc <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   15a24:	2303      	movs	r3, #3
   15a26:	e7d1      	b.n	159cc <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   15a28:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   15a2a:	bf42      	ittt	mi
   15a2c:	2201      	movmi	r2, #1
   15a2e:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   15a30:	f8c6 250c 	strmi.w	r2, [r6, #1292]	; 0x50c
}
   15a34:	e7e0      	b.n	159f8 <gpio_nrfx_config+0x6c>
   15a36:	bf00      	nop
   15a38:	00f00006 	.word	0x00f00006
   15a3c:	00100006 	.word	0x00100006
   15a40:	00400002 	.word	0x00400002

00015a44 <gpiote_event_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15a44:	4a46      	ldr	r2, [pc, #280]	; (15b60 <gpiote_event_handler+0x11c>)
{
   15a46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15a4a:	6816      	ldr	r6, [r2, #0]
	if (port_event) {
   15a4c:	2e00      	cmp	r6, #0
   15a4e:	d05a      	beq.n	15b06 <gpiote_event_handler+0xc2>
	uint32_t out = data->pin_int_en;
   15a50:	4b44      	ldr	r3, [pc, #272]	; (15b64 <gpiote_event_handler+0x120>)
	out &= ~data->trig_edge & ~data->double_edge;
   15a52:	e9d3 1405 	ldrd	r1, r4, [r3, #20]
	uint32_t out = data->pin_int_en;
   15a56:	68d8      	ldr	r0, [r3, #12]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   15a58:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
   15a5a:	4321      	orrs	r1, r4
   15a5c:	ea20 0801 	bic.w	r8, r0, r1
    return p_reg->IN;
   15a60:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
	uint32_t check_pins = level_pins;
   15a64:	4645      	mov	r5, r8
   15a66:	f8d1 4510 	ldr.w	r4, [r1, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   15a6a:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
   15a6c:	ea28 0404 	bic.w	r4, r8, r4
	uint32_t bit = 1U << pin;
   15a70:	2701      	movs	r7, #1
	uint32_t pin = 0U;
   15a72:	f04f 0a00 	mov.w	sl, #0
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   15a76:	4689      	mov	r9, r1
	while (check_pins) {
   15a78:	bb7d      	cbnz	r5, 15ada <gpiote_event_handler+0x96>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15a7a:	6015      	str	r5, [r2, #0]
   15a7c:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   15a7e:	483a      	ldr	r0, [pc, #232]	; (15b68 <gpiote_event_handler+0x124>)
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   15a80:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   15a82:	2501      	movs	r5, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15a84:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   15a86:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
   15a8a:	fa05 f103 	lsl.w	r1, r5, r3
   15a8e:	4211      	tst	r1, r2
   15a90:	d011      	beq.n	15ab6 <gpiote_event_handler+0x72>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15a92:	009a      	lsls	r2, r3, #2
   15a94:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   15a98:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
   15a9c:	6811      	ldr	r1, [r2, #0]
   15a9e:	b151      	cbz	r1, 15ab6 <gpiote_event_handler+0x72>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   15aa0:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   15aa4:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15aa8:	6017      	str	r7, [r2, #0]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   15aaa:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   15aae:	fa05 f101 	lsl.w	r1, r5, r1
   15ab2:	6812      	ldr	r2, [r2, #0]
   15ab4:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   15ab6:	3301      	adds	r3, #1
   15ab8:	2b08      	cmp	r3, #8
   15aba:	d1e4      	bne.n	15a86 <gpiote_event_handler+0x42>
	if (fired_triggers[0]) {
   15abc:	bb2c      	cbnz	r4, 15b0a <gpiote_event_handler+0xc6>
	if (port_event) {
   15abe:	b156      	cbz	r6, 15ad6 <gpiote_event_handler+0x92>
	uint32_t out = data->pin_int_en;
   15ac0:	4c28      	ldr	r4, [pc, #160]	; (15b64 <gpiote_event_handler+0x120>)
	out &= ~data->trig_edge & ~data->double_edge;
   15ac2:	e9d4 1005 	ldrd	r1, r0, [r4, #20]
	uint32_t out = data->pin_int_en;
   15ac6:	68e2      	ldr	r2, [r4, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   15ac8:	4301      	orrs	r1, r0
   15aca:	ea22 0201 	bic.w	r2, r2, r1
	uint32_t bit = 1U << pin;
   15ace:	2501      	movs	r5, #1
	uint32_t pin = 0U;
   15ad0:	2600      	movs	r6, #0
	while (level_pins) {
   15ad2:	2a00      	cmp	r2, #0
   15ad4:	d131      	bne.n	15b3a <gpiote_event_handler+0xf6>
}
   15ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (check_pins & bit) {
   15ada:	422f      	tst	r7, r5
   15adc:	d00f      	beq.n	15afe <gpiote_event_handler+0xba>
			if (!(level_pins & bit)) {
   15ade:	ea17 0f08 	tst.w	r7, r8
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   15ae2:	f00a 001f 	and.w	r0, sl, #31
   15ae6:	bf08      	it	eq
   15ae8:	f500 73e0 	addeq.w	r3, r0, #448	; 0x1c0
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   15aec:	f04f 0100 	mov.w	r1, #0
   15af0:	bf08      	it	eq
   15af2:	f859 3023 	ldreq.w	r3, [r9, r3, lsl #2]
   15af6:	f007 fc7f 	bl	1d3f8 <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
   15afa:	ea25 0507 	bic.w	r5, r5, r7
		++pin;
   15afe:	f10a 0a01 	add.w	sl, sl, #1
		bit <<= 1;
   15b02:	007f      	lsls	r7, r7, #1
   15b04:	e7b8      	b.n	15a78 <gpiote_event_handler+0x34>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   15b06:	4634      	mov	r4, r6
   15b08:	e7b9      	b.n	15a7e <gpiote_event_handler+0x3a>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   15b0a:	4b16      	ldr	r3, [pc, #88]	; (15b64 <gpiote_event_handler+0x120>)
   15b0c:	6859      	ldr	r1, [r3, #4]
   15b0e:	2900      	cmp	r1, #0
   15b10:	d0d5      	beq.n	15abe <gpiote_event_handler+0x7a>
	return node->next;
   15b12:	680d      	ldr	r5, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   15b14:	4f15      	ldr	r7, [pc, #84]	; (15b6c <gpiote_event_handler+0x128>)
   15b16:	2d00      	cmp	r5, #0
   15b18:	bf38      	it	cc
   15b1a:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
   15b1c:	688a      	ldr	r2, [r1, #8]
   15b1e:	4022      	ands	r2, r4
   15b20:	d002      	beq.n	15b28 <gpiote_event_handler+0xe4>
			cb->handler(port, cb, cb->pin_mask & pins);
   15b22:	684b      	ldr	r3, [r1, #4]
   15b24:	4638      	mov	r0, r7
   15b26:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   15b28:	2d00      	cmp	r5, #0
   15b2a:	d0c8      	beq.n	15abe <gpiote_event_handler+0x7a>
   15b2c:	682b      	ldr	r3, [r5, #0]
   15b2e:	2b00      	cmp	r3, #0
   15b30:	bf38      	it	cc
   15b32:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15b34:	4629      	mov	r1, r5
   15b36:	461d      	mov	r5, r3
   15b38:	e7f0      	b.n	15b1c <gpiote_event_handler+0xd8>
		if (level_pins & bit) {
   15b3a:	4215      	tst	r5, r2
   15b3c:	d00c      	beq.n	15b58 <gpiote_event_handler+0x114>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   15b3e:	6921      	ldr	r1, [r4, #16]
   15b40:	40f1      	lsrs	r1, r6
   15b42:	f001 0101 	and.w	r1, r1, #1
   15b46:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   15b4a:	b2c9      	uxtb	r1, r1
   15b4c:	f006 001f 	and.w	r0, r6, #31
   15b50:	f007 fc52 	bl	1d3f8 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   15b54:	ea22 0205 	bic.w	r2, r2, r5
		++pin;
   15b58:	3601      	adds	r6, #1
		bit <<= 1;
   15b5a:	006d      	lsls	r5, r5, #1
   15b5c:	e7b9      	b.n	15ad2 <gpiote_event_handler+0x8e>
   15b5e:	bf00      	nop
   15b60:	4000617c 	.word	0x4000617c
   15b64:	20002c30 	.word	0x20002c30
   15b68:	40006000 	.word	0x40006000
   15b6c:	20000ac4 	.word	0x20000ac4

00015b70 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   15b70:	4b02      	ldr	r3, [pc, #8]	; (15b7c <flash_nrf_pages_layout+0xc>)
   15b72:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   15b74:	2301      	movs	r3, #1
   15b76:	6013      	str	r3, [r2, #0]
}
   15b78:	4770      	bx	lr
   15b7a:	bf00      	nop
   15b7c:	20002c50 	.word	0x20002c50

00015b80 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   15b80:	4800      	ldr	r0, [pc, #0]	; (15b84 <flash_nrf_get_parameters+0x4>)
   15b82:	4770      	bx	lr
   15b84:	0001ec10 	.word	0x0001ec10

00015b88 <flash_nrf_read>:
{
   15b88:	b570      	push	{r4, r5, r6, lr}
   15b8a:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   15b8c:	4628      	mov	r0, r5
   15b8e:	4619      	mov	r1, r3
{
   15b90:	4616      	mov	r6, r2
   15b92:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   15b94:	f007 fc90 	bl	1d4b8 <is_regular_addr_valid>
   15b98:	b970      	cbnz	r0, 15bb8 <flash_nrf_read+0x30>
   15b9a:	4a0c      	ldr	r2, [pc, #48]	; (15bcc <flash_nrf_read+0x44>)
   15b9c:	4b0c      	ldr	r3, [pc, #48]	; (15bd0 <flash_nrf_read+0x48>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   15b9e:	480d      	ldr	r0, [pc, #52]	; (15bd4 <flash_nrf_read+0x4c>)
   15ba0:	1a9b      	subs	r3, r3, r2
   15ba2:	08db      	lsrs	r3, r3, #3
   15ba4:	019b      	lsls	r3, r3, #6
   15ba6:	f043 0301 	orr.w	r3, r3, #1
   15baa:	4622      	mov	r2, r4
   15bac:	4629      	mov	r1, r5
   15bae:	f003 f941 	bl	18e34 <log_2>
		return -EINVAL;
   15bb2:	f06f 0015 	mvn.w	r0, #21
}
   15bb6:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
   15bb8:	b134      	cbz	r4, 15bc8 <flash_nrf_read+0x40>
	memcpy(data, (void *)addr, len);
   15bba:	4622      	mov	r2, r4
   15bbc:	4629      	mov	r1, r5
   15bbe:	4630      	mov	r0, r6
   15bc0:	f003 fff0 	bl	19ba4 <memcpy>
	return 0;
   15bc4:	2000      	movs	r0, #0
   15bc6:	e7f6      	b.n	15bb6 <flash_nrf_read+0x2e>
		return 0;
   15bc8:	4620      	mov	r0, r4
   15bca:	e7f4      	b.n	15bb6 <flash_nrf_read+0x2e>
   15bcc:	0001e408 	.word	0x0001e408
   15bd0:	0001e600 	.word	0x0001e600
   15bd4:	000225c9 	.word	0x000225c9

00015bd8 <flash_nrf_erase>:
{
   15bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   15bda:	b087      	sub	sp, #28
   15bdc:	460e      	mov	r6, r1
   15bde:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   15be0:	f007 fd23 	bl	1d62a <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   15be4:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   15be6:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   15be8:	4630      	mov	r0, r6
   15bea:	f007 fc65 	bl	1d4b8 <is_regular_addr_valid>
   15bee:	b388      	cbz	r0, 15c54 <flash_nrf_erase+0x7c>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   15bf0:	fbb6 f3f7 	udiv	r3, r6, r7
   15bf4:	fb07 6313 	mls	r3, r7, r3, r6
   15bf8:	b923      	cbnz	r3, 15c04 <flash_nrf_erase+0x2c>
   15bfa:	fbb5 f4f7 	udiv	r4, r5, r7
   15bfe:	fb07 5414 	mls	r4, r7, r4, r5
   15c02:	b184      	cbz	r4, 15c26 <flash_nrf_erase+0x4e>
   15c04:	4a25      	ldr	r2, [pc, #148]	; (15c9c <flash_nrf_erase+0xc4>)
   15c06:	4b26      	ldr	r3, [pc, #152]	; (15ca0 <flash_nrf_erase+0xc8>)
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   15c08:	4826      	ldr	r0, [pc, #152]	; (15ca4 <flash_nrf_erase+0xcc>)
   15c0a:	1a9b      	subs	r3, r3, r2
   15c0c:	08db      	lsrs	r3, r3, #3
   15c0e:	019b      	lsls	r3, r3, #6
   15c10:	f043 0301 	orr.w	r3, r3, #1
   15c14:	462a      	mov	r2, r5
   15c16:	4631      	mov	r1, r6
		LOG_ERR("invalid address: 0x%08lx:%zu",
   15c18:	f003 f90c 	bl	18e34 <log_2>
		return -EINVAL;
   15c1c:	f06f 0415 	mvn.w	r4, #21
}
   15c20:	4620      	mov	r0, r4
   15c22:	b007      	add	sp, #28
   15c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!n_pages) {
   15c26:	42af      	cmp	r7, r5
   15c28:	d8fa      	bhi.n	15c20 <flash_nrf_erase+0x48>
	return z_impl_k_sem_take(sem, timeout);
   15c2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15c2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15c32:	481d      	ldr	r0, [pc, #116]	; (15ca8 <flash_nrf_erase+0xd0>)
   15c34:	f001 fbf0 	bl	17418 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   15c38:	f007 fc75 	bl	1d526 <nrf_flash_sync_is_required>
   15c3c:	ab02      	add	r3, sp, #8
   15c3e:	4601      	mov	r1, r0
   15c40:	b998      	cbnz	r0, 15c6a <flash_nrf_erase+0x92>
	return FLASH_OP_DONE;
}

static int erase(uint32_t addr, uint32_t size)
{
	struct flash_context context = {
   15c42:	2210      	movs	r2, #16
   15c44:	4618      	mov	r0, r3
   15c46:	f003 ffd8 	bl	19bfa <memset>
   15c4a:	e9cd 6503 	strd	r6, r5, [sp, #12]
#if defined(CONFIG_SOC_FLASH_NRF_PARTIAL_ERASE)
		.flash_addr_next = addr
#endif
	};

	return	erase_op(&context);
   15c4e:	f007 fc46 	bl	1d4de <erase_op>
   15c52:	e01d      	b.n	15c90 <flash_nrf_erase+0xb8>
   15c54:	4a11      	ldr	r2, [pc, #68]	; (15c9c <flash_nrf_erase+0xc4>)
   15c56:	4b12      	ldr	r3, [pc, #72]	; (15ca0 <flash_nrf_erase+0xc8>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   15c58:	4814      	ldr	r0, [pc, #80]	; (15cac <flash_nrf_erase+0xd4>)
   15c5a:	1a9b      	subs	r3, r3, r2
   15c5c:	08db      	lsrs	r3, r3, #3
   15c5e:	019b      	lsls	r3, r3, #6
   15c60:	f043 0301 	orr.w	r3, r3, #1
   15c64:	462a      	mov	r2, r5
   15c66:	4631      	mov	r1, r6
   15c68:	e7d6      	b.n	15c18 <flash_nrf_erase+0x40>
	struct flash_context context = {
   15c6a:	2210      	movs	r2, #16
   15c6c:	4621      	mov	r1, r4
   15c6e:	4618      	mov	r0, r3
   15c70:	f003 ffc3 	bl	19bfa <memset>
   15c74:	2201      	movs	r2, #1
   15c76:	f88d 2014 	strb.w	r2, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   15c7a:	4a0d      	ldr	r2, [pc, #52]	; (15cb0 <flash_nrf_erase+0xd8>)
   15c7c:	e9cd 2000 	strd	r2, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   15c80:	480c      	ldr	r0, [pc, #48]	; (15cb4 <flash_nrf_erase+0xdc>)
	struct flash_context context = {
   15c82:	e9cd 6503 	strd	r6, r5, [sp, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   15c86:	f000 f93b 	bl	15f00 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   15c8a:	4668      	mov	r0, sp
   15c8c:	f7eb fcc8 	bl	1620 <nrf_flash_sync_exe>
	return	erase_op(&context);
   15c90:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   15c92:	4805      	ldr	r0, [pc, #20]	; (15ca8 <flash_nrf_erase+0xd0>)
   15c94:	f001 fb9a 	bl	173cc <z_impl_k_sem_give>
}
   15c98:	e7c2      	b.n	15c20 <flash_nrf_erase+0x48>
   15c9a:	bf00      	nop
   15c9c:	0001e408 	.word	0x0001e408
   15ca0:	0001e600 	.word	0x0001e600
   15ca4:	000225e6 	.word	0x000225e6
   15ca8:	20002c58 	.word	0x20002c58
   15cac:	000225c9 	.word	0x000225c9
   15cb0:	0001d4df 	.word	0x0001d4df
   15cb4:	00015e64 	.word	0x00015e64

00015cb8 <nrf_flash_init>:
{
   15cb8:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   15cba:	2201      	movs	r2, #1
   15cbc:	4611      	mov	r1, r2
   15cbe:	4807      	ldr	r0, [pc, #28]	; (15cdc <nrf_flash_init+0x24>)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   15cc0:	4c07      	ldr	r4, [pc, #28]	; (15ce0 <nrf_flash_init+0x28>)
   15cc2:	f007 fecf 	bl	1da64 <z_impl_k_sem_init>
	nrf_flash_sync_init();
   15cc6:	f000 f911 	bl	15eec <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   15cca:	f007 fcb2 	bl	1d632 <nrfx_nvmc_flash_page_count_get>
   15cce:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   15cd0:	f007 fcab 	bl	1d62a <nrfx_nvmc_flash_page_size_get>
   15cd4:	6060      	str	r0, [r4, #4]
}
   15cd6:	2000      	movs	r0, #0
   15cd8:	bd10      	pop	{r4, pc}
   15cda:	bf00      	nop
   15cdc:	20002c58 	.word	0x20002c58
   15ce0:	20002c50 	.word	0x20002c50

00015ce4 <write_op>:
{
   15ce4:	b538      	push	{r3, r4, r5, lr}
	if (w_ctx->enable_time_limit) {
   15ce6:	7b03      	ldrb	r3, [r0, #12]
{
   15ce8:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   15cea:	b10b      	cbz	r3, 15cf0 <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   15cec:	f000 f910 	bl	15f10 <nrf_flash_sync_get_timestamp_begin>
{
   15cf0:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   15cf2:	68a3      	ldr	r3, [r4, #8]
   15cf4:	2b03      	cmp	r3, #3
   15cf6:	d806      	bhi.n	15d06 <write_op+0x22>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   15cf8:	4a12      	ldr	r2, [pc, #72]	; (15d44 <write_op+0x60>)
   15cfa:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   15cfe:	07db      	lsls	r3, r3, #31
   15d00:	d5fb      	bpl.n	15cfa <write_op+0x16>
	return FLASH_OP_DONE;
   15d02:	2000      	movs	r0, #0
}
   15d04:	bd38      	pop	{r3, r4, r5, pc}
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   15d06:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   15d08:	6860      	ldr	r0, [r4, #4]
   15d0a:	6819      	ldr	r1, [r3, #0]
   15d0c:	f000 fed2 	bl	16ab4 <nrfx_nvmc_word_write>
	w_ctx->flash_addr += shift;
   15d10:	6863      	ldr	r3, [r4, #4]
   15d12:	3304      	adds	r3, #4
   15d14:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   15d16:	6823      	ldr	r3, [r4, #0]
   15d18:	3304      	adds	r3, #4
   15d1a:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   15d1c:	68a3      	ldr	r3, [r4, #8]
   15d1e:	3b04      	subs	r3, #4
   15d20:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   15d22:	7b23      	ldrb	r3, [r4, #12]
		i++;
   15d24:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   15d26:	2b00      	cmp	r3, #0
   15d28:	d0e3      	beq.n	15cf2 <write_op+0xe>
			if (nrf_flash_sync_check_time_limit(i)) {
   15d2a:	4628      	mov	r0, r5
   15d2c:	f7eb fcf4 	bl	1718 <nrf_flash_sync_check_time_limit>
   15d30:	2800      	cmp	r0, #0
   15d32:	d0de      	beq.n	15cf2 <write_op+0xe>
   15d34:	4a03      	ldr	r2, [pc, #12]	; (15d44 <write_op+0x60>)
   15d36:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   15d3a:	07d9      	lsls	r1, r3, #31
   15d3c:	d5fb      	bpl.n	15d36 <write_op+0x52>
				return FLASH_OP_ONGOING;
   15d3e:	2001      	movs	r0, #1
   15d40:	e7e0      	b.n	15d04 <write_op+0x20>
   15d42:	bf00      	nop
   15d44:	4001e000 	.word	0x4001e000

00015d48 <flash_nrf_write>:
{
   15d48:	b570      	push	{r4, r5, r6, lr}
   15d4a:	460d      	mov	r5, r1
   15d4c:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   15d4e:	4619      	mov	r1, r3
   15d50:	4628      	mov	r0, r5
{
   15d52:	4616      	mov	r6, r2
   15d54:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   15d56:	f007 fbaf 	bl	1d4b8 <is_regular_addr_valid>
   15d5a:	b980      	cbnz	r0, 15d7e <flash_nrf_write+0x36>
   15d5c:	4a23      	ldr	r2, [pc, #140]	; (15dec <flash_nrf_write+0xa4>)
   15d5e:	4b24      	ldr	r3, [pc, #144]	; (15df0 <flash_nrf_write+0xa8>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   15d60:	4824      	ldr	r0, [pc, #144]	; (15df4 <flash_nrf_write+0xac>)
   15d62:	1a9b      	subs	r3, r3, r2
   15d64:	08db      	lsrs	r3, r3, #3
   15d66:	019b      	lsls	r3, r3, #6
   15d68:	f043 0301 	orr.w	r3, r3, #1
   15d6c:	4622      	mov	r2, r4
   15d6e:	4629      	mov	r1, r5
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   15d70:	f003 f860 	bl	18e34 <log_2>
		return -EINVAL;
   15d74:	f06f 0415 	mvn.w	r4, #21
}
   15d78:	4620      	mov	r0, r4
   15d7a:	b006      	add	sp, #24
   15d7c:	bd70      	pop	{r4, r5, r6, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   15d7e:	ea45 0304 	orr.w	r3, r5, r4
   15d82:	079b      	lsls	r3, r3, #30
   15d84:	d00a      	beq.n	15d9c <flash_nrf_write+0x54>
   15d86:	4a19      	ldr	r2, [pc, #100]	; (15dec <flash_nrf_write+0xa4>)
   15d88:	4b19      	ldr	r3, [pc, #100]	; (15df0 <flash_nrf_write+0xa8>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   15d8a:	481b      	ldr	r0, [pc, #108]	; (15df8 <flash_nrf_write+0xb0>)
   15d8c:	1a9b      	subs	r3, r3, r2
   15d8e:	08db      	lsrs	r3, r3, #3
   15d90:	019b      	lsls	r3, r3, #6
   15d92:	f043 0301 	orr.w	r3, r3, #1
   15d96:	4622      	mov	r2, r4
   15d98:	4629      	mov	r1, r5
   15d9a:	e7e9      	b.n	15d70 <flash_nrf_write+0x28>
	if (!len) {
   15d9c:	2c00      	cmp	r4, #0
   15d9e:	d0eb      	beq.n	15d78 <flash_nrf_write+0x30>
	return z_impl_k_sem_take(sem, timeout);
   15da0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15da4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15da8:	4814      	ldr	r0, [pc, #80]	; (15dfc <flash_nrf_write+0xb4>)
   15daa:	f001 fb35 	bl	17418 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   15dae:	f007 fbba 	bl	1d526 <nrf_flash_sync_is_required>
   15db2:	4603      	mov	r3, r0
	struct flash_context context = {
   15db4:	e9cd 6502 	strd	r6, r5, [sp, #8]
   15db8:	a802      	add	r0, sp, #8
   15dba:	9404      	str	r4, [sp, #16]
	if (nrf_flash_sync_is_required()) {
   15dbc:	b18b      	cbz	r3, 15de2 <flash_nrf_write+0x9a>
	struct flash_context context = {
   15dbe:	2301      	movs	r3, #1
   15dc0:	f88d 3014 	strb.w	r3, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   15dc4:	4b0e      	ldr	r3, [pc, #56]	; (15e00 <flash_nrf_write+0xb8>)
   15dc6:	e9cd 3000 	strd	r3, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   15dca:	f641 504c 	movw	r0, #7500	; 0x1d4c
   15dce:	f000 f897 	bl	15f00 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   15dd2:	4668      	mov	r0, sp
   15dd4:	f7eb fc24 	bl	1620 <nrf_flash_sync_exe>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
		.enable_time_limit = 0 /* disable time limit */
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	};

	return write_op(&context);
   15dd8:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   15dda:	4808      	ldr	r0, [pc, #32]	; (15dfc <flash_nrf_write+0xb4>)
   15ddc:	f001 faf6 	bl	173cc <z_impl_k_sem_give>
}
   15de0:	e7ca      	b.n	15d78 <flash_nrf_write+0x30>
	struct flash_context context = {
   15de2:	f88d 3014 	strb.w	r3, [sp, #20]
	return write_op(&context);
   15de6:	f7ff ff7d 	bl	15ce4 <write_op>
   15dea:	e7f5      	b.n	15dd8 <flash_nrf_write+0x90>
   15dec:	0001e408 	.word	0x0001e408
   15df0:	0001e600 	.word	0x0001e600
   15df4:	000225c9 	.word	0x000225c9
   15df8:	00022605 	.word	0x00022605
   15dfc:	20002c58 	.word	0x20002c58
   15e00:	00015ce5 	.word	0x00015ce5

00015e04 <time_slot_callback_work>:
{
   15e04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   15e06:	9b06      	ldr	r3, [sp, #24]
	rc = op_desc->handler(op_desc->context);
   15e08:	e9d3 2000 	ldrd	r2, r0, [r3]
   15e0c:	4790      	blx	r2
	if (rc != FLASH_OP_ONGOING) {
   15e0e:	2801      	cmp	r0, #1
	rc = op_desc->handler(op_desc->context);
   15e10:	4604      	mov	r4, r0
	if (rc != FLASH_OP_ONGOING) {
   15e12:	d013      	beq.n	15e3c <time_slot_callback_work+0x38>
		ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   15e14:	f10d 010f 	add.w	r1, sp, #15
   15e18:	f10d 000e 	add.w	r0, sp, #14
   15e1c:	f006 fbff 	bl	1c61e <ll_timeslice_ticker_id_get>
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   15e20:	2300      	movs	r3, #0
   15e22:	9300      	str	r3, [sp, #0]
   15e24:	4619      	mov	r1, r3
   15e26:	f89d 200f 	ldrb.w	r2, [sp, #15]
   15e2a:	f89d 000e 	ldrb.w	r0, [sp, #14]
   15e2e:	f7f9 f9b3 	bl	f198 <ticker_stop>
		_ticker_sync_context.result = (rc == FLASH_OP_DONE) ? 0 : rc;
   15e32:	4b03      	ldr	r3, [pc, #12]	; (15e40 <time_slot_callback_work+0x3c>)
   15e34:	60dc      	str	r4, [r3, #12]
	z_impl_k_sem_give(sem);
   15e36:	4803      	ldr	r0, [pc, #12]	; (15e44 <time_slot_callback_work+0x40>)
   15e38:	f001 fac8 	bl	173cc <z_impl_k_sem_give>
}
   15e3c:	b004      	add	sp, #16
   15e3e:	bd10      	pop	{r4, pc}
   15e40:	20002c70 	.word	0x20002c70
   15e44:	20002c80 	.word	0x20002c80

00015e48 <time_slot_delay>:
{
   15e48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15e4c:	b08d      	sub	sp, #52	; 0x34
   15e4e:	4606      	mov	r6, r0
   15e50:	460f      	mov	r7, r1
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   15e52:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   15e56:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
{
   15e5a:	4690      	mov	r8, r2
   15e5c:	4699      	mov	r9, r3
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   15e5e:	f006 fbde 	bl	1c61e <ll_timeslice_ticker_id_get>
			   (ticker_id + 1), /* ticker_id */
   15e62:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
	err = ticker_start(instance_index, /* Radio instance ticker */
   15e66:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   15e6a:	9700      	str	r7, [sp, #0]
   15e6c:	2400      	movs	r4, #0
			   (ticker_id + 1), /* ticker_id */
   15e6e:	3501      	adds	r5, #1
	err = ticker_start(instance_index, /* Radio instance ticker */
   15e70:	4633      	mov	r3, r6
   15e72:	e9cd 4407 	strd	r4, r4, [sp, #28]
   15e76:	e9cd 8905 	strd	r8, r9, [sp, #20]
   15e7a:	e9cd 4403 	strd	r4, r4, [sp, #12]
   15e7e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   15e82:	b2ea      	uxtb	r2, r5
   15e84:	2101      	movs	r1, #1
   15e86:	f006 fb21 	bl	1c4cc <ticker_start>
	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
   15e8a:	f030 0302 	bics.w	r3, r0, #2
   15e8e:	d00d      	beq.n	15eac <time_slot_delay+0x64>
		_ticker_sync_context.result = 0;
   15e90:	4b08      	ldr	r3, [pc, #32]	; (15eb4 <time_slot_delay+0x6c>)
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   15e92:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
		_ticker_sync_context.result = 0;
   15e96:	60dc      	str	r4, [r3, #12]
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   15e98:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   15e9c:	9400      	str	r4, [sp, #0]
   15e9e:	4623      	mov	r3, r4
   15ea0:	4621      	mov	r1, r4
   15ea2:	f7f9 f979 	bl	f198 <ticker_stop>
   15ea6:	4804      	ldr	r0, [pc, #16]	; (15eb8 <time_slot_delay+0x70>)
   15ea8:	f001 fa90 	bl	173cc <z_impl_k_sem_give>
}
   15eac:	b00d      	add	sp, #52	; 0x34
   15eae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15eb2:	bf00      	nop
   15eb4:	20002c70 	.word	0x20002c70
   15eb8:	20002c80 	.word	0x20002c80

00015ebc <time_slot_callback_prepare>:
	time_slot_delay(ticks_at_expire,
   15ebc:	9b00      	ldr	r3, [sp, #0]
   15ebe:	4a02      	ldr	r2, [pc, #8]	; (15ec8 <time_slot_callback_prepare+0xc>)
   15ec0:	2131      	movs	r1, #49	; 0x31
   15ec2:	f7ff bfc1 	b.w	15e48 <time_slot_delay>
   15ec6:	bf00      	nop
   15ec8:	00015ecd 	.word	0x00015ecd

00015ecc <time_slot_callback_abort>:
{
   15ecc:	b570      	push	{r4, r5, r6, lr}
   15ece:	9d04      	ldr	r5, [sp, #16]
   15ed0:	4604      	mov	r4, r0
	ll_radio_state_abort();
   15ed2:	f7fa ff8f 	bl	10df4 <ll_radio_state_abort>
	time_slot_delay(ticks_at_expire,
   15ed6:	462b      	mov	r3, r5
   15ed8:	4620      	mov	r0, r4
   15eda:	4a03      	ldr	r2, [pc, #12]	; (15ee8 <time_slot_callback_abort+0x1c>)
}
   15edc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	time_slot_delay(ticks_at_expire,
   15ee0:	2106      	movs	r1, #6
   15ee2:	f7ff bfb1 	b.w	15e48 <time_slot_delay>
   15ee6:	bf00      	nop
   15ee8:	00015e05 	.word	0x00015e05

00015eec <nrf_flash_sync_init>:
{
   15eec:	b508      	push	{r3, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   15eee:	2201      	movs	r2, #1
   15ef0:	2100      	movs	r1, #0
   15ef2:	4802      	ldr	r0, [pc, #8]	; (15efc <nrf_flash_sync_init+0x10>)
   15ef4:	f007 fdb6 	bl	1da64 <z_impl_k_sem_init>
}
   15ef8:	2000      	movs	r0, #0
   15efa:	bd08      	pop	{r3, pc}
   15efc:	20002c80 	.word	0x20002c80

00015f00 <nrf_flash_sync_set_context>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
   15f00:	4b02      	ldr	r3, [pc, #8]	; (15f0c <nrf_flash_sync_set_context+0xc>)
   15f02:	f2a0 62a4 	subw	r2, r0, #1700	; 0x6a4
	_ticker_sync_context.slot = duration;
   15f06:	e9c3 2000 	strd	r2, r0, [r3]
}
   15f0a:	4770      	bx	lr
   15f0c:	20002c70 	.word	0x20002c70

00015f10 <nrf_flash_sync_get_timestamp_begin>:
{
   15f10:	b508      	push	{r3, lr}
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
   15f12:	f006 fb0e 	bl	1c532 <ticker_ticks_now_get>
   15f16:	4b01      	ldr	r3, [pc, #4]	; (15f1c <nrf_flash_sync_get_timestamp_begin+0xc>)
   15f18:	6098      	str	r0, [r3, #8]
}
   15f1a:	bd08      	pop	{r3, pc}
   15f1c:	20002c70 	.word	0x20002c70

00015f20 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   15f20:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   15f22:	794b      	ldrb	r3, [r1, #5]
   15f24:	2b01      	cmp	r3, #1
   15f26:	d124      	bne.n	15f72 <uarte_nrfx_configure+0x52>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   15f28:	798b      	ldrb	r3, [r1, #6]
   15f2a:	2b03      	cmp	r3, #3
   15f2c:	d121      	bne.n	15f72 <uarte_nrfx_configure+0x52>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   15f2e:	79ca      	ldrb	r2, [r1, #7]
   15f30:	b12a      	cbz	r2, 15f3e <uarte_nrfx_configure+0x1e>
   15f32:	2a01      	cmp	r2, #1
   15f34:	d11d      	bne.n	15f72 <uarte_nrfx_configure+0x52>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
   15f36:	6843      	ldr	r3, [r0, #4]
   15f38:	685b      	ldr	r3, [r3, #4]
   15f3a:	079b      	lsls	r3, r3, #30
   15f3c:	d019      	beq.n	15f72 <uarte_nrfx_configure+0x52>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   15f3e:	790c      	ldrb	r4, [r1, #4]
   15f40:	b114      	cbz	r4, 15f48 <uarte_nrfx_configure+0x28>
   15f42:	2c02      	cmp	r4, #2
   15f44:	d115      	bne.n	15f72 <uarte_nrfx_configure+0x52>
   15f46:	240e      	movs	r4, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   15f48:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   15f4a:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   15f4c:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   15f50:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   15f52:	d062      	beq.n	1601a <uarte_nrfx_configure+0xfa>
   15f54:	d82b      	bhi.n	15fae <uarte_nrfx_configure+0x8e>
   15f56:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15f5a:	d061      	beq.n	16020 <uarte_nrfx_configure+0x100>
   15f5c:	d814      	bhi.n	15f88 <uarte_nrfx_configure+0x68>
   15f5e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   15f62:	d05f      	beq.n	16024 <uarte_nrfx_configure+0x104>
   15f64:	d808      	bhi.n	15f78 <uarte_nrfx_configure+0x58>
   15f66:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   15f6a:	d05e      	beq.n	1602a <uarte_nrfx_configure+0x10a>
   15f6c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   15f70:	d05e      	beq.n	16030 <uarte_nrfx_configure+0x110>
   15f72:	f06f 0085 	mvn.w	r0, #133	; 0x85
   15f76:	e04f      	b.n	16018 <uarte_nrfx_configure+0xf8>
   15f78:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   15f7c:	d05b      	beq.n	16036 <uarte_nrfx_configure+0x116>
   15f7e:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   15f82:	d1f6      	bne.n	15f72 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   15f84:	4b36      	ldr	r3, [pc, #216]	; (16060 <uarte_nrfx_configure+0x140>)
   15f86:	e03c      	b.n	16002 <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   15f88:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   15f8c:	d056      	beq.n	1603c <uarte_nrfx_configure+0x11c>
   15f8e:	d807      	bhi.n	15fa0 <uarte_nrfx_configure+0x80>
   15f90:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   15f94:	d054      	beq.n	16040 <uarte_nrfx_configure+0x120>
   15f96:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   15f9a:	d1ea      	bne.n	15f72 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   15f9c:	4b31      	ldr	r3, [pc, #196]	; (16064 <uarte_nrfx_configure+0x144>)
   15f9e:	e030      	b.n	16002 <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   15fa0:	f647 2612 	movw	r6, #31250	; 0x7a12
   15fa4:	42b3      	cmp	r3, r6
   15fa6:	d1e4      	bne.n	15f72 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   15fa8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   15fac:	e029      	b.n	16002 <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   15fae:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   15fb2:	d047      	beq.n	16044 <uarte_nrfx_configure+0x124>
   15fb4:	d813      	bhi.n	15fde <uarte_nrfx_configure+0xbe>
   15fb6:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   15fba:	d046      	beq.n	1604a <uarte_nrfx_configure+0x12a>
   15fbc:	d809      	bhi.n	15fd2 <uarte_nrfx_configure+0xb2>
   15fbe:	f64d 26c0 	movw	r6, #56000	; 0xdac0
   15fc2:	42b3      	cmp	r3, r6
   15fc4:	d043      	beq.n	1604e <uarte_nrfx_configure+0x12e>
   15fc6:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   15fca:	d1d2      	bne.n	15f72 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   15fcc:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   15fd0:	e017      	b.n	16002 <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   15fd2:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   15fd6:	d1cc      	bne.n	15f72 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   15fd8:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   15fdc:	e011      	b.n	16002 <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   15fde:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   15fe2:	d037      	beq.n	16054 <uarte_nrfx_configure+0x134>
   15fe4:	d808      	bhi.n	15ff8 <uarte_nrfx_configure+0xd8>
   15fe6:	4e20      	ldr	r6, [pc, #128]	; (16068 <uarte_nrfx_configure+0x148>)
   15fe8:	42b3      	cmp	r3, r6
   15fea:	d036      	beq.n	1605a <uarte_nrfx_configure+0x13a>
   15fec:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   15ff0:	d1bf      	bne.n	15f72 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   15ff2:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   15ff6:	e004      	b.n	16002 <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   15ff8:	4e1c      	ldr	r6, [pc, #112]	; (1606c <uarte_nrfx_configure+0x14c>)
   15ffa:	42b3      	cmp	r3, r6
   15ffc:	d1b9      	bne.n	15f72 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   15ffe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   16002:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   16006:	6903      	ldr	r3, [r0, #16]
   16008:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   1600a:	4322      	orrs	r2, r4
   1600c:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1600e:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   16012:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   16016:	2000      	movs	r0, #0
}
   16018:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1601a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1601e:	e7f0      	b.n	16002 <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   16020:	4b13      	ldr	r3, [pc, #76]	; (16070 <uarte_nrfx_configure+0x150>)
   16022:	e7ee      	b.n	16002 <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   16024:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   16028:	e7eb      	b.n	16002 <uarte_nrfx_configure+0xe2>
		nrf_baudrate = 0x00014000;
   1602a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1602e:	e7e8      	b.n	16002 <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   16030:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   16034:	e7e5      	b.n	16002 <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   16036:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1603a:	e7e2      	b.n	16002 <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1603c:	4b0d      	ldr	r3, [pc, #52]	; (16074 <uarte_nrfx_configure+0x154>)
   1603e:	e7e0      	b.n	16002 <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   16040:	4b0d      	ldr	r3, [pc, #52]	; (16078 <uarte_nrfx_configure+0x158>)
   16042:	e7de      	b.n	16002 <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   16044:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   16048:	e7db      	b.n	16002 <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1604a:	4b0c      	ldr	r3, [pc, #48]	; (1607c <uarte_nrfx_configure+0x15c>)
   1604c:	e7d9      	b.n	16002 <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1604e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   16052:	e7d6      	b.n	16002 <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   16054:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   16058:	e7d3      	b.n	16002 <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1605a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1605e:	e7d0      	b.n	16002 <uarte_nrfx_configure+0xe2>
   16060:	0013b000 	.word	0x0013b000
   16064:	004ea000 	.word	0x004ea000
   16068:	0003d090 	.word	0x0003d090
   1606c:	000f4240 	.word	0x000f4240
   16070:	00275000 	.word	0x00275000
   16074:	0075c000 	.word	0x0075c000
   16078:	003af000 	.word	0x003af000
   1607c:	013a9000 	.word	0x013a9000

00016080 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   16080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   16082:	6906      	ldr	r6, [r0, #16]
{
   16084:	4605      	mov	r5, r0
   16086:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   16088:	f007 fbeb 	bl	1d862 <k_is_in_isr>
   1608c:	b910      	cbnz	r0, 16094 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   1608e:	4b2c      	ldr	r3, [pc, #176]	; (16140 <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
   16090:	781b      	ldrb	r3, [r3, #0]
   16092:	b983      	cbnz	r3, 160b6 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   16094:	f04f 0320 	mov.w	r3, #32
   16098:	f3ef 8411 	mrs	r4, BASEPRI
   1609c:	f383 8811 	msr	BASEPRI, r3
   160a0:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   160a4:	4628      	mov	r0, r5
   160a6:	f007 fa8a 	bl	1d5be <is_tx_ready>
   160aa:	bb28      	cbnz	r0, 160f8 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
   160ac:	f384 8811 	msr	BASEPRI, r4
   160b0:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   160b4:	e7ee      	b.n	16094 <uarte_nrfx_poll_out+0x14>
{
   160b6:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   160b8:	4628      	mov	r0, r5
   160ba:	f007 fa80 	bl	1d5be <is_tx_ready>
   160be:	b970      	cbnz	r0, 160de <uarte_nrfx_poll_out+0x5e>
   160c0:	2001      	movs	r0, #1
   160c2:	f007 faa0 	bl	1d606 <nrfx_busy_wait>
   160c6:	3c01      	subs	r4, #1
   160c8:	d1f6      	bne.n	160b8 <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
   160ca:	2100      	movs	r1, #0
   160cc:	2021      	movs	r0, #33	; 0x21
   160ce:	f001 fe7f 	bl	17dd0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   160d2:	e7f0      	b.n	160b6 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   160d4:	f384 8811 	msr	BASEPRI, r4
   160d8:	f3bf 8f6f 	isb	sy
}
   160dc:	e7f5      	b.n	160ca <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   160de:	f04f 0320 	mov.w	r3, #32
   160e2:	f3ef 8411 	mrs	r4, BASEPRI
   160e6:	f383 8811 	msr	BASEPRI, r3
   160ea:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   160ee:	4628      	mov	r0, r5
   160f0:	f007 fa65 	bl	1d5be <is_tx_ready>
   160f4:	2800      	cmp	r0, #0
   160f6:	d0ed      	beq.n	160d4 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
   160f8:	f806 7f10 	strb.w	r7, [r6, #16]!
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   160fc:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
   160fe:	680b      	ldr	r3, [r1, #0]
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   16100:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   16102:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   16106:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1610a:	2200      	movs	r2, #0
   1610c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   16110:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   16114:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   16118:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1611c:	684a      	ldr	r2, [r1, #4]
   1611e:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   16120:	bf41      	itttt	mi
   16122:	2208      	movmi	r2, #8
   16124:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   16128:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   1612c:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16130:	2201      	movs	r2, #1
   16132:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   16134:	f384 8811 	msr	BASEPRI, r4
   16138:	f3bf 8f6f 	isb	sy
	tx_start(dev, &data->char_out, 1);

	irq_unlock(key);
}
   1613c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1613e:	bf00      	nop
   16140:	2000344e 	.word	0x2000344e

00016144 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   16144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16146:	2200      	movs	r2, #0
   16148:	4605      	mov	r5, r0
   1614a:	2101      	movs	r1, #1
   1614c:	2002      	movs	r0, #2
   1614e:	f7ed fa51 	bl	35f4 <z_arm_irq_priority_set>
   16152:	2002      	movs	r0, #2
   16154:	f7ed fa1c 	bl	3590 <arch_irq_enable>
	return config->uarte_regs;
   16158:	686b      	ldr	r3, [r5, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1615a:	692e      	ldr	r6, [r5, #16]
	return config->uarte_regs;
   1615c:	681c      	ldr	r4, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1615e:	2300      	movs	r3, #0
   16160:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->OUTSET = set_mask;
   16164:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   16168:	2240      	movs	r2, #64	; 0x40
	data->dev = dev;
   1616a:	6035      	str	r5, [r6, #0]
    reg->PIN_CNF[pin_number] = cnf;
   1616c:	210c      	movs	r1, #12
    p_reg->OUTSET = set_mask;
   1616e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    p_reg->PSEL.TXD = pseltxd;
   16172:	2006      	movs	r0, #6
    reg->PIN_CNF[pin_number] = cnf;
   16174:	2203      	movs	r2, #3
   16176:	f8c3 2718 	str.w	r2, [r3, #1816]	; 0x718
   1617a:	f8c3 1720 	str.w	r1, [r3, #1824]	; 0x720
   1617e:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   16182:	2008      	movs	r0, #8
   16184:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
   16188:	f8c3 171c 	str.w	r1, [r3, #1820]	; 0x71c
    p_reg->OUTSET = set_mask;
   1618c:	2120      	movs	r1, #32
   1618e:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
   16192:	f8c3 2714 	str.w	r2, [r3, #1812]	; 0x714
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   16196:	6929      	ldr	r1, [r5, #16]
    p_reg->PSEL.RTS = pselrts;
   16198:	2305      	movs	r3, #5
   1619a:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   1619e:	2307      	movs	r3, #7
   161a0:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   161a4:	3104      	adds	r1, #4
   161a6:	4628      	mov	r0, r5
   161a8:	f7ff feba 	bl	15f20 <uarte_nrfx_configure>
	if (err) {
   161ac:	4607      	mov	r7, r0
   161ae:	b9b0      	cbnz	r0, 161de <uarte_0_init+0x9a>
	    get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   161b0:	686b      	ldr	r3, [r5, #4]
   161b2:	685b      	ldr	r3, [r3, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   161b4:	0719      	lsls	r1, r3, #28
   161b6:	d527      	bpl.n	16208 <uarte_0_init+0xc4>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   161b8:	f106 0012 	add.w	r0, r6, #18
   161bc:	f000 fc8c 	bl	16ad8 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   161c0:	4b25      	ldr	r3, [pc, #148]	; (16258 <uarte_0_init+0x114>)
   161c2:	4298      	cmp	r0, r3
   161c4:	d00d      	beq.n	161e2 <uarte_0_init+0x9e>
   161c6:	4b25      	ldr	r3, [pc, #148]	; (1625c <uarte_0_init+0x118>)
   161c8:	4925      	ldr	r1, [pc, #148]	; (16260 <uarte_0_init+0x11c>)
		LOG_ERR("Failed to allocate PPI Channel");
   161ca:	4826      	ldr	r0, [pc, #152]	; (16264 <uarte_0_init+0x120>)
   161cc:	1ac9      	subs	r1, r1, r3
   161ce:	08c9      	lsrs	r1, r1, #3
   161d0:	0189      	lsls	r1, r1, #6
   161d2:	f041 0101 	orr.w	r1, r1, #1
   161d6:	f002 fe0c 	bl	18df2 <log_0>
		return -EIO;
   161da:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
   161de:	4638      	mov	r0, r7
   161e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   161e2:	7cb0      	ldrb	r0, [r6, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   161e4:	00c3      	lsls	r3, r0, #3
   161e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   161ea:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   161ee:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   161f2:	f504 7190 	add.w	r1, r4, #288	; 0x120
    p_reg->CH[(uint32_t) channel].EEP = eep;
   161f6:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   161fa:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   161fe:	4a1a      	ldr	r2, [pc, #104]	; (16268 <uarte_0_init+0x124>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   16200:	2301      	movs	r3, #1
   16202:	4083      	lsls	r3, r0
   16204:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   16208:	2308      	movs	r3, #8
   1620a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1620e:	2300      	movs	r3, #0
   16210:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   16214:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   16218:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1621c:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   16220:	2301      	movs	r3, #1
   16222:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16226:	6023      	str	r3, [r4, #0]
	if (!(get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   16228:	686b      	ldr	r3, [r5, #4]
   1622a:	685b      	ldr	r3, [r3, #4]
   1622c:	071a      	lsls	r2, r3, #28
    p_reg->INTENSET = mask;
   1622e:	bf5c      	itt	pl
   16230:	f44f 7280 	movpl.w	r2, #256	; 0x100
   16234:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   16238:	06db      	lsls	r3, r3, #27
   1623a:	bf44      	itt	mi
   1623c:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   16240:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   16244:	3610      	adds	r6, #16
    p_reg->TXD.MAXCNT = length;
   16246:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   16248:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1624c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16250:	2301      	movs	r3, #1
   16252:	60a3      	str	r3, [r4, #8]
   16254:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   16256:	e7c2      	b.n	161de <uarte_0_init+0x9a>
   16258:	0bad0000 	.word	0x0bad0000
   1625c:	0001e408 	.word	0x0001e408
   16260:	0001e648 	.word	0x0001e648
   16264:	00022640 	.word	0x00022640
   16268:	4001f000 	.word	0x4001f000

0001626c <random_byte_get>:
	__asm__ volatile(
   1626c:	f04f 0320 	mov.w	r3, #32
   16270:	f3ef 8211 	mrs	r2, BASEPRI
   16274:	f383 8811 	msr	BASEPRI, r3
   16278:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1627c:	4b08      	ldr	r3, [pc, #32]	; (162a0 <random_byte_get+0x34>)
   1627e:	6819      	ldr	r1, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   16280:	b159      	cbz	r1, 1629a <random_byte_get+0x2e>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   16282:	4908      	ldr	r1, [pc, #32]	; (162a4 <random_byte_get+0x38>)
   16284:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   16288:	2100      	movs	r1, #0
   1628a:	6019      	str	r1, [r3, #0]
   1628c:	681b      	ldr	r3, [r3, #0]
		retval = nrf_rng_random_value_get(NRF_RNG);
   1628e:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   16290:	f382 8811 	msr	BASEPRI, r2
   16294:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   16298:	4770      	bx	lr
	int retval = -EAGAIN;
   1629a:	f06f 000a 	mvn.w	r0, #10
   1629e:	e7f7      	b.n	16290 <random_byte_get+0x24>
   162a0:	4000d100 	.word	0x4000d100
   162a4:	4000d000 	.word	0x4000d000

000162a8 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   162a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   162aa:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   162ac:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   162ae:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   162b0:	f04f 0520 	mov.w	r5, #32
   162b4:	f3ef 8011 	mrs	r0, BASEPRI
   162b8:	f385 8811 	msr	BASEPRI, r5
   162bc:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   162c0:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   162c2:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   162c6:	1ba4      	subs	r4, r4, r6
   162c8:	403c      	ands	r4, r7
	if (available < len) {
   162ca:	42a2      	cmp	r2, r4
		len = available;
   162cc:	bf88      	it	hi
   162ce:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   162d0:	eb06 0c02 	add.w	ip, r6, r2
   162d4:	ea07 0c0c 	and.w	ip, r7, ip
	first = rngp->first_alloc;
   162d8:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   162da:	f883 c000 	strb.w	ip, [r3]
	__asm__ volatile(
   162de:	f380 8811 	msr	BASEPRI, r0
   162e2:	f3bf 8f6f 	isb	sy
   162e6:	440a      	add	r2, r1
	uint8_t *dst   = buf;
   162e8:	4608      	mov	r0, r1
	irq_unlock(key);

	while (likely(len--)) {
   162ea:	4282      	cmp	r2, r0
   162ec:	d119      	bne.n	16322 <rng_pool_get+0x7a>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   162ee:	4576      	cmp	r6, lr
   162f0:	d10d      	bne.n	1630e <rng_pool_get+0x66>
	__asm__ volatile(
   162f2:	f04f 0520 	mov.w	r5, #32
   162f6:	f3ef 8211 	mrs	r2, BASEPRI
   162fa:	f385 8811 	msr	BASEPRI, r5
   162fe:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   16302:	781d      	ldrb	r5, [r3, #0]
   16304:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   16306:	f382 8811 	msr	BASEPRI, r2
   1630a:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1630e:	1a41      	subs	r1, r0, r1
	available = available - len;
	if (available <= rngp->threshold) {
   16310:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   16312:	b288      	uxth	r0, r1
	available = available - len;
   16314:	1a21      	subs	r1, r4, r0
	if (available <= rngp->threshold) {
   16316:	428b      	cmp	r3, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   16318:	bf22      	ittt	cs
   1631a:	4b06      	ldrcs	r3, [pc, #24]	; (16334 <rng_pool_get+0x8c>)
   1631c:	2201      	movcs	r2, #1
   1631e:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   16320:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   16322:	eb03 0c05 	add.w	ip, r3, r5
		first = (first + 1) & mask;
   16326:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   16328:	f89c c005 	ldrb.w	ip, [ip, #5]
   1632c:	f800 cb01 	strb.w	ip, [r0], #1
		first = (first + 1) & mask;
   16330:	403d      	ands	r5, r7
   16332:	e7da      	b.n	162ea <rng_pool_get+0x42>
   16334:	4000d000 	.word	0x4000d000

00016338 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   16338:	43db      	mvns	r3, r3
{
   1633a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1633e:	f013 0501 	ands.w	r5, r3, #1
{
   16342:	460e      	mov	r6, r1
   16344:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   16346:	d004      	beq.n	16352 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   16348:	4821      	ldr	r0, [pc, #132]	; (163d0 <entropy_nrf5_get_entropy_isr+0x98>)
   1634a:	f7ff ffad 	bl	162a8 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1634e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   16352:	2a00      	cmp	r2, #0
   16354:	d033      	beq.n	163be <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   16356:	f04f 0320 	mov.w	r3, #32
   1635a:	f3ef 8811 	mrs	r8, BASEPRI
   1635e:	f383 8811 	msr	BASEPRI, r3
   16362:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   16366:	200d      	movs	r0, #13
   16368:	f7ed f936 	bl	35d8 <arch_irq_is_enabled>
   1636c:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1636e:	200d      	movs	r0, #13
   16370:	f7ed f91e 	bl	35b0 <arch_irq_disable>
	__asm__ volatile(
   16374:	f388 8811 	msr	BASEPRI, r8
   16378:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1637c:	4a15      	ldr	r2, [pc, #84]	; (163d4 <entropy_nrf5_get_entropy_isr+0x9c>)
   1637e:	6015      	str	r5, [r2, #0]
   16380:	6813      	ldr	r3, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   16382:	4b15      	ldr	r3, [pc, #84]	; (163d8 <entropy_nrf5_get_entropy_isr+0xa0>)
   16384:	2101      	movs	r1, #1
   16386:	6019      	str	r1, [r3, #0]
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16388:	4914      	ldr	r1, [pc, #80]	; (163dc <entropy_nrf5_get_entropy_isr+0xa4>)
   1638a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   1638e:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
   16392:	4625      	mov	r5, r4
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   16394:	4691      	mov	r9, r2
   16396:	468a      	mov	sl, r1
   16398:	4698      	mov	r8, r3
   1639a:	f8d9 3000 	ldr.w	r3, [r9]
			while (!nrf_rng_event_check(NRF_RNG,
   1639e:	b183      	cbz	r3, 163c2 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   163a0:	f7ff ff64 	bl	1626c <random_byte_get>
			if (byte < 0) {
   163a4:	1e03      	subs	r3, r0, #0
   163a6:	f8ca 8180 	str.w	r8, [sl, #384]	; 0x180
   163aa:	dbf6      	blt.n	1639a <entropy_nrf5_get_entropy_isr+0x62>
   163ac:	3d01      	subs	r5, #1
   163ae:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   163b0:	5573      	strb	r3, [r6, r5]
		} while (len);
   163b2:	2d00      	cmp	r5, #0
   163b4:	d1f1      	bne.n	1639a <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   163b6:	b117      	cbz	r7, 163be <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   163b8:	200d      	movs	r0, #13
   163ba:	f7ed f8e9 	bl	3590 <arch_irq_enable>
	return cnt;
   163be:	4620      	mov	r0, r4
   163c0:	e7c5      	b.n	1634e <entropy_nrf5_get_entropy_isr+0x16>
   163c2:	f3bf 8f4f 	dsb	sy
				__WFE();
   163c6:	bf20      	wfe
				__SEV();
   163c8:	bf40      	sev
				__WFE();
   163ca:	bf20      	wfe
   163cc:	e7e5      	b.n	1639a <entropy_nrf5_get_entropy_isr+0x62>
   163ce:	bf00      	nop
   163d0:	20002cd0 	.word	0x20002cd0
   163d4:	4000d100 	.word	0x4000d100
   163d8:	4000d000 	.word	0x4000d000
   163dc:	e000e100 	.word	0xe000e100

000163e0 <entropy_nrf5_get_entropy>:
{
   163e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   163e4:	4f13      	ldr	r7, [pc, #76]	; (16434 <entropy_nrf5_get_entropy+0x54>)
   163e6:	460d      	mov	r5, r1
   163e8:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   163ea:	f107 0845 	add.w	r8, r7, #69	; 0x45
   163ee:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   163f2:	b914      	cbnz	r4, 163fa <entropy_nrf5_get_entropy+0x1a>
}
   163f4:	4620      	mov	r0, r4
   163f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   163fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   163fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16402:	4638      	mov	r0, r7
   16404:	f001 f808 	bl	17418 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   16408:	4622      	mov	r2, r4
   1640a:	4629      	mov	r1, r5
   1640c:	4640      	mov	r0, r8
   1640e:	f7ff ff4b 	bl	162a8 <rng_pool_get>
   16412:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   16414:	4638      	mov	r0, r7
   16416:	f000 ffd9 	bl	173cc <z_impl_k_sem_give>
		if (bytes == 0U) {
   1641a:	b93e      	cbnz	r6, 1642c <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   1641c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16420:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16424:	4648      	mov	r0, r9
   16426:	f000 fff7 	bl	17418 <z_impl_k_sem_take>
			continue;
   1642a:	e7e2      	b.n	163f2 <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   1642c:	1ba4      	subs	r4, r4, r6
   1642e:	b2a4      	uxth	r4, r4
		buf += bytes;
   16430:	4435      	add	r5, r6
   16432:	e7de      	b.n	163f2 <entropy_nrf5_get_entropy+0x12>
   16434:	20002ca0 	.word	0x20002ca0

00016438 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   16438:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1643a:	4c19      	ldr	r4, [pc, #100]	; (164a0 <entropy_nrf5_init+0x68>)
   1643c:	2201      	movs	r2, #1
   1643e:	4611      	mov	r1, r2
   16440:	4620      	mov	r0, r4
   16442:	f007 fb0f 	bl	1da64 <z_impl_k_sem_init>
   16446:	2201      	movs	r2, #1
   16448:	2100      	movs	r1, #0
   1644a:	f104 0018 	add.w	r0, r4, #24
   1644e:	f007 fb09 	bl	1da64 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   16452:	f240 4307 	movw	r3, #1031	; 0x407
   16456:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1645a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1645e:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   16460:	230c      	movs	r3, #12
   16462:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   16466:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   16468:	4b0e      	ldr	r3, [pc, #56]	; (164a4 <entropy_nrf5_init+0x6c>)
   1646a:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1646e:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   16472:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   16476:	f042 0201 	orr.w	r2, r2, #1
   1647a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1647e:	4a0a      	ldr	r2, [pc, #40]	; (164a8 <entropy_nrf5_init+0x70>)
    p_reg->INTENSET = mask;
   16480:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   16482:	6015      	str	r5, [r2, #0]
   16484:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   16486:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1648a:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1648c:	6019      	str	r1, [r3, #0]
   1648e:	200d      	movs	r0, #13
   16490:	f7ed f8b0 	bl	35f4 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   16494:	200d      	movs	r0, #13
   16496:	f7ed f87b 	bl	3590 <arch_irq_enable>

	return 0;
}
   1649a:	4628      	mov	r0, r5
   1649c:	bd38      	pop	{r3, r4, r5, pc}
   1649e:	bf00      	nop
   164a0:	20002ca0 	.word	0x20002ca0
   164a4:	4000d000 	.word	0x4000d000
   164a8:	4000d100 	.word	0x4000d100

000164ac <isr>:
{
   164ac:	b510      	push	{r4, lr}
	byte = random_byte_get();
   164ae:	f7ff fedd 	bl	1626c <random_byte_get>
	if (byte < 0) {
   164b2:	2800      	cmp	r0, #0
   164b4:	db20      	blt.n	164f8 <isr+0x4c>
	uint8_t last  = rngp->last;
   164b6:	4b17      	ldr	r3, [pc, #92]	; (16514 <isr+0x68>)
   164b8:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   164bc:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   164c0:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   164c4:	1a51      	subs	r1, r2, r1
   164c6:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   164ca:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   164cc:	d10d      	bne.n	164ea <isr+0x3e>
	uint8_t last  = rngp->last;
   164ce:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   164d2:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   164d6:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   164da:	1a51      	subs	r1, r2, r1
   164dc:	ea34 0101 	bics.w	r1, r4, r1
   164e0:	d10b      	bne.n	164fa <isr+0x4e>
   164e2:	4b0d      	ldr	r3, [pc, #52]	; (16518 <isr+0x6c>)
   164e4:	2201      	movs	r2, #1
   164e6:	601a      	str	r2, [r3, #0]
}
   164e8:	e00e      	b.n	16508 <isr+0x5c>
	rngp->buffer[last] = byte;
   164ea:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   164ec:	3201      	adds	r2, #1
   164ee:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   164f0:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   164f4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   164f8:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   164fa:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   164fc:	3201      	adds	r2, #1
   164fe:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   16500:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   16504:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   16508:	4804      	ldr	r0, [pc, #16]	; (1651c <isr+0x70>)
}
   1650a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1650e:	f000 bf5d 	b.w	173cc <z_impl_k_sem_give>
   16512:	bf00      	nop
   16514:	20002ca0 	.word	0x20002ca0
   16518:	4000d004 	.word	0x4000d004
   1651c:	20002cb8 	.word	0x20002cb8

00016520 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   16520:	b508      	push	{r3, lr}
	z_impl_log_panic();
   16522:	f7ec f857 	bl	25d4 <z_impl_log_panic>
   16526:	4b06      	ldr	r3, [pc, #24]	; (16540 <k_sys_fatal_error_handler+0x20>)
   16528:	4906      	ldr	r1, [pc, #24]	; (16544 <k_sys_fatal_error_handler+0x24>)
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1652a:	4807      	ldr	r0, [pc, #28]	; (16548 <k_sys_fatal_error_handler+0x28>)
   1652c:	1ac9      	subs	r1, r1, r3
   1652e:	08c9      	lsrs	r1, r1, #3
   16530:	0189      	lsls	r1, r1, #6
   16532:	f041 0101 	orr.w	r1, r1, #1
   16536:	f002 fc5c 	bl	18df2 <log_0>
		sys_arch_reboot(0);
   1653a:	2000      	movs	r0, #0
   1653c:	f7ed fd56 	bl	3fec <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   16540:	0001e408 	.word	0x0001e408
   16544:	0001e5f8 	.word	0x0001e5f8
   16548:	00022676 	.word	0x00022676

0001654c <nrf52_errata_108>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1654c:	4b04      	ldr	r3, [pc, #16]	; (16560 <nrf52_errata_108+0x14>)
   1654e:	6818      	ldr	r0, [r3, #0]
   16550:	1c42      	adds	r2, r0, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   16552:	bf04      	itt	eq
   16554:	4b03      	ldreq	r3, [pc, #12]	; (16564 <nrf52_errata_108+0x18>)
   16556:	7818      	ldrbeq	r0, [r3, #0]
                }
            }
        #endif
        return false;
    #endif
}
   16558:	1f83      	subs	r3, r0, #6
   1655a:	4258      	negs	r0, r3
   1655c:	4158      	adcs	r0, r3
   1655e:	4770      	bx	lr
   16560:	10000130 	.word	0x10000130
   16564:	f0000fe0 	.word	0xf0000fe0

00016568 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   16568:	4b07      	ldr	r3, [pc, #28]	; (16588 <nrf52_errata_16+0x20>)
   1656a:	781b      	ldrb	r3, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1656c:	2b06      	cmp	r3, #6
   1656e:	d109      	bne.n	16584 <nrf52_errata_16+0x1c>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   16570:	4b06      	ldr	r3, [pc, #24]	; (1658c <nrf52_errata_16+0x24>)
   16572:	681b      	ldr	r3, [r3, #0]
   16574:	f3c3 1303 	ubfx	r3, r3, #4, #4
   16578:	3b03      	subs	r3, #3
   1657a:	2b04      	cmp	r3, #4
   1657c:	d802      	bhi.n	16584 <nrf52_errata_16+0x1c>
   1657e:	4a04      	ldr	r2, [pc, #16]	; (16590 <nrf52_errata_16+0x28>)
   16580:	5cd0      	ldrb	r0, [r2, r3]
   16582:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   16584:	2000      	movs	r0, #0
    #endif
}
   16586:	4770      	bx	lr
   16588:	f0000fe0 	.word	0xf0000fe0
   1658c:	f0000fe8 	.word	0xf0000fe8
   16590:	000226ae 	.word	0x000226ae

00016594 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   16594:	4a02      	ldr	r2, [pc, #8]	; (165a0 <nvmc_wait+0xc>)
   16596:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1659a:	2b00      	cmp	r3, #0
   1659c:	d0fb      	beq.n	16596 <nvmc_wait+0x2>
}
   1659e:	4770      	bx	lr
   165a0:	4001e000 	.word	0x4001e000

000165a4 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   165a4:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
   165a6:	f7ff ffd1 	bl	1654c <nrf52_errata_108>
   165aa:	b128      	cbz	r0, 165b8 <SystemInit+0x14>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   165ac:	4b81      	ldr	r3, [pc, #516]	; (167b4 <SystemInit+0x210>)
   165ae:	4a82      	ldr	r2, [pc, #520]	; (167b8 <SystemInit+0x214>)
   165b0:	681b      	ldr	r3, [r3, #0]
   165b2:	f3c3 2304 	ubfx	r3, r3, #8, #5
   165b6:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
   165b8:	f7ff ffd6 	bl	16568 <nrf52_errata_16>
   165bc:	b110      	cbz	r0, 165c4 <SystemInit+0x20>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   165be:	4b7f      	ldr	r3, [pc, #508]	; (167bc <SystemInit+0x218>)
   165c0:	4a7f      	ldr	r2, [pc, #508]	; (167c0 <SystemInit+0x21c>)
   165c2:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
   165c4:	f7ff ffc2 	bl	1654c <nrf52_errata_108>
   165c8:	b128      	cbz	r0, 165d6 <SystemInit+0x32>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   165ca:	4b7e      	ldr	r3, [pc, #504]	; (167c4 <SystemInit+0x220>)
   165cc:	4a7e      	ldr	r2, [pc, #504]	; (167c8 <SystemInit+0x224>)
   165ce:	681b      	ldr	r3, [r3, #0]
   165d0:	f3c3 3342 	ubfx	r3, r3, #13, #3
   165d4:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
   165d6:	f7ff ffc7 	bl	16568 <nrf52_errata_16>
   165da:	b120      	cbz	r0, 165e6 <SystemInit+0x42>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   165dc:	4a7b      	ldr	r2, [pc, #492]	; (167cc <SystemInit+0x228>)
   165de:	68d3      	ldr	r3, [r2, #12]
   165e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   165e4:	60d3      	str	r3, [r2, #12]
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   165e6:	f7ff ffb1 	bl	1654c <nrf52_errata_108>
   165ea:	b140      	cbz	r0, 165fe <SystemInit+0x5a>
            NRF_CLOCK->EVENTS_DONE = 0;
   165ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   165f0:	2200      	movs	r2, #0
   165f2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   165f6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   165fa:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
   165fe:	f7ff ffb3 	bl	16568 <nrf52_errata_16>
   16602:	b110      	cbz	r0, 1660a <SystemInit+0x66>
            *(volatile uint32_t *)0x400005A0 = 0x3;
   16604:	4b72      	ldr	r3, [pc, #456]	; (167d0 <SystemInit+0x22c>)
   16606:	2203      	movs	r2, #3
   16608:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
   1660a:	f7ff ffad 	bl	16568 <nrf52_errata_16>
   1660e:	b140      	cbz	r0, 16622 <SystemInit+0x7e>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
   16610:	4b70      	ldr	r3, [pc, #448]	; (167d4 <SystemInit+0x230>)
   16612:	2205      	movs	r2, #5
   16614:	601a      	str	r2, [r3, #0]
            *(volatile uint32_t *)0x40005688 = 0x00000001;
   16616:	2201      	movs	r2, #1
   16618:	679a      	str	r2, [r3, #120]	; 0x78
            *(volatile uint32_t *)0x40005618 = 0x00000000;
   1661a:	2200      	movs	r2, #0
   1661c:	609a      	str	r2, [r3, #8]
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
   1661e:	223f      	movs	r2, #63	; 0x3f
   16620:	605a      	str	r2, [r3, #4]
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   16622:	4b6d      	ldr	r3, [pc, #436]	; (167d8 <SystemInit+0x234>)
   16624:	681a      	ldr	r2, [r3, #0]
   16626:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   16628:	bf0b      	itete	eq
   1662a:	4b6c      	ldreq	r3, [pc, #432]	; (167dc <SystemInit+0x238>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   1662c:	4b6c      	ldrne	r3, [pc, #432]	; (167e0 <SystemInit+0x23c>)
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1662e:	781a      	ldrbeq	r2, [r3, #0]
                var2 = *(uint32_t *)0x10000134ul;
   16630:	681b      	ldrne	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   16632:	bf02      	ittt	eq
   16634:	3308      	addeq	r3, #8
   16636:	681b      	ldreq	r3, [r3, #0]
   16638:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1663c:	2a06      	cmp	r2, #6
   1663e:	d14d      	bne.n	166dc <SystemInit+0x138>
            {
                switch(var2)
   16640:	3b03      	subs	r3, #3
   16642:	2b04      	cmp	r3, #4
   16644:	d803      	bhi.n	1664e <SystemInit+0xaa>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   16646:	4a67      	ldr	r2, [pc, #412]	; (167e4 <SystemInit+0x240>)
   16648:	5cd3      	ldrb	r3, [r2, r3]
   1664a:	2b00      	cmp	r3, #0
   1664c:	d046      	beq.n	166dc <SystemInit+0x138>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1664e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   16652:	4b65      	ldr	r3, [pc, #404]	; (167e8 <SystemInit+0x244>)
   16654:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   16658:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1665c:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   16660:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   16664:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   16668:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1666c:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   16670:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   16674:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   16678:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1667c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   16680:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   16684:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   16688:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1668c:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   16690:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   16694:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   16698:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1669c:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   166a0:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   166a4:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   166a8:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   166ac:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   166b0:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   166b4:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   166b8:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   166bc:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   166c0:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   166c4:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   166c8:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   166cc:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   166d0:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   166d4:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   166d8:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
   166dc:	f7ff ff36 	bl	1654c <nrf52_errata_108>
   166e0:	b128      	cbz	r0, 166ee <SystemInit+0x14a>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   166e2:	4b42      	ldr	r3, [pc, #264]	; (167ec <SystemInit+0x248>)
   166e4:	4a42      	ldr	r2, [pc, #264]	; (167f0 <SystemInit+0x24c>)
   166e6:	681b      	ldr	r3, [r3, #0]
   166e8:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   166ec:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   166ee:	f7ff ff2d 	bl	1654c <nrf52_errata_108>
   166f2:	b148      	cbz	r0, 16708 <SystemInit+0x164>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   166f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   166f8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   166fc:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   166fe:	bf44      	itt	mi
   16700:	f06f 0201 	mvnmi.w	r2, #1
   16704:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   16708:	4b33      	ldr	r3, [pc, #204]	; (167d8 <SystemInit+0x234>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1670a:	681b      	ldr	r3, [r3, #0]
   1670c:	2b06      	cmp	r3, #6
   1670e:	d120      	bne.n	16752 <SystemInit+0x1ae>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   16710:	4b33      	ldr	r3, [pc, #204]	; (167e0 <SystemInit+0x23c>)
   16712:	681b      	ldr	r3, [r3, #0]
   16714:	3b03      	subs	r3, #3
   16716:	2b04      	cmp	r3, #4
   16718:	d802      	bhi.n	16720 <SystemInit+0x17c>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
   1671a:	4a36      	ldr	r2, [pc, #216]	; (167f4 <SystemInit+0x250>)
   1671c:	5cd3      	ldrb	r3, [r2, r3]
   1671e:	b143      	cbz	r3, 16732 <SystemInit+0x18e>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   16720:	4a35      	ldr	r2, [pc, #212]	; (167f8 <SystemInit+0x254>)
   16722:	6813      	ldr	r3, [r2, #0]
   16724:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   16728:	6013      	str	r3, [r2, #0]
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1672a:	4b2b      	ldr	r3, [pc, #172]	; (167d8 <SystemInit+0x234>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1672c:	681b      	ldr	r3, [r3, #0]
   1672e:	2b06      	cmp	r3, #6
   16730:	d10f      	bne.n	16752 <SystemInit+0x1ae>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   16732:	4b2b      	ldr	r3, [pc, #172]	; (167e0 <SystemInit+0x23c>)
   16734:	681b      	ldr	r3, [r3, #0]
   16736:	3b03      	subs	r3, #3
   16738:	2b04      	cmp	r3, #4
   1673a:	d802      	bhi.n	16742 <SystemInit+0x19e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
   1673c:	4a2f      	ldr	r2, [pc, #188]	; (167fc <SystemInit+0x258>)
   1673e:	5cd3      	ldrb	r3, [r2, r3]
   16740:	b13b      	cbz	r3, 16752 <SystemInit+0x1ae>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   16742:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   16746:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   1674a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1674e:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   16752:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   16756:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1675a:	2a00      	cmp	r2, #0
   1675c:	db03      	blt.n	16766 <SystemInit+0x1c2>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1675e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   16762:	2b00      	cmp	r3, #0
   16764:	da22      	bge.n	167ac <SystemInit+0x208>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   16766:	4926      	ldr	r1, [pc, #152]	; (16800 <SystemInit+0x25c>)
   16768:	2301      	movs	r3, #1
   1676a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1676e:	f7ff ff11 	bl	16594 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   16772:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
   16776:	2415      	movs	r4, #21
   16778:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1677c:	f7ff ff0a 	bl	16594 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   16780:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   16784:	f7ff ff06 	bl	16594 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   16788:	2300      	movs	r3, #0
   1678a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1678e:	f7ff ff01 	bl	16594 <nvmc_wait>
   16792:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   16796:	491b      	ldr	r1, [pc, #108]	; (16804 <SystemInit+0x260>)
   16798:	4b1b      	ldr	r3, [pc, #108]	; (16808 <SystemInit+0x264>)
   1679a:	68ca      	ldr	r2, [r1, #12]
   1679c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   167a0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   167a2:	60cb      	str	r3, [r1, #12]
   167a4:	f3bf 8f4f 	dsb	sy
    __NOP();
   167a8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   167aa:	e7fd      	b.n	167a8 <SystemInit+0x204>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   167ac:	4b17      	ldr	r3, [pc, #92]	; (1680c <SystemInit+0x268>)
   167ae:	4a18      	ldr	r2, [pc, #96]	; (16810 <SystemInit+0x26c>)
   167b0:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   167b2:	bd10      	pop	{r4, pc}
   167b4:	10000324 	.word	0x10000324
   167b8:	40013540 	.word	0x40013540
   167bc:	4007c074 	.word	0x4007c074
   167c0:	baadf00d 	.word	0xbaadf00d
   167c4:	10000244 	.word	0x10000244
   167c8:	4000053c 	.word	0x4000053c
   167cc:	e000edf0 	.word	0xe000edf0
   167d0:	400005a0 	.word	0x400005a0
   167d4:	40005610 	.word	0x40005610
   167d8:	10000130 	.word	0x10000130
   167dc:	f0000fe0 	.word	0xf0000fe0
   167e0:	10000134 	.word	0x10000134
   167e4:	0002269f 	.word	0x0002269f
   167e8:	4000c000 	.word	0x4000c000
   167ec:	10000258 	.word	0x10000258
   167f0:	40000ee4 	.word	0x40000ee4
   167f4:	000226a4 	.word	0x000226a4
   167f8:	4000173c 	.word	0x4000173c
   167fc:	000226a9 	.word	0x000226a9
   16800:	4001e000 	.word	0x4001e000
   16804:	e000ed00 	.word	0xe000ed00
   16808:	05fa0004 	.word	0x05fa0004
   1680c:	20000964 	.word	0x20000964
   16810:	03d09000 	.word	0x03d09000

00016814 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   16814:	4b04      	ldr	r3, [pc, #16]	; (16828 <nrfx_clock_init+0x14>)
   16816:	791a      	ldrb	r2, [r3, #4]
   16818:	b922      	cbnz	r2, 16824 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   1681a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   1681c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   1681e:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   16820:	4802      	ldr	r0, [pc, #8]	; (1682c <nrfx_clock_init+0x18>)
   16822:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   16824:	4802      	ldr	r0, [pc, #8]	; (16830 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   16826:	4770      	bx	lr
   16828:	20002cf4 	.word	0x20002cf4
   1682c:	0bad0000 	.word	0x0bad0000
   16830:	0bad000c 	.word	0x0bad000c

00016834 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   16834:	b530      	push	{r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   16836:	b110      	cbz	r0, 1683e <nrfx_clock_start+0xa>
   16838:	2801      	cmp	r0, #1
   1683a:	d033      	beq.n	168a4 <nrfx_clock_start+0x70>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   1683c:	bd30      	pop	{r4, r5, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1683e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   16842:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   16846:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   1684a:	f411 3f80 	tst.w	r1, #65536	; 0x10000
   1684e:	4619      	mov	r1, r3
   16850:	d024      	beq.n	1689c <nrfx_clock_start+0x68>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   16852:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   16856:	2a01      	cmp	r2, #1
   16858:	d120      	bne.n	1689c <nrfx_clock_start+0x68>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1685a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1685e:	4b16      	ldr	r3, [pc, #88]	; (168b8 <nrfx_clock_start+0x84>)
   16860:	2200      	movs	r2, #0
   16862:	601a      	str	r2, [r3, #0]
   16864:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   16866:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1686a:	2202      	movs	r2, #2
   1686c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    core_debug = CoreDebug->DEMCR;
   16870:	4a12      	ldr	r2, [pc, #72]	; (168bc <nrfx_clock_start+0x88>)
   16872:	68d0      	ldr	r0, [r2, #12]
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
   16874:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
   16878:	60d3      	str	r3, [r2, #12]
    dwt_ctrl = DWT->CTRL;
   1687a:	4b11      	ldr	r3, [pc, #68]	; (168c0 <nrfx_clock_start+0x8c>)
   1687c:	681c      	ldr	r4, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
   1687e:	f044 0101 	orr.w	r1, r4, #1
   16882:	6019      	str	r1, [r3, #0]
    cyccnt_inital = DWT->CYCCNT;
   16884:	685d      	ldr	r5, [r3, #4]
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
   16886:	6859      	ldr	r1, [r3, #4]
   16888:	1b49      	subs	r1, r1, r5
   1688a:	f5b1 5f0a 	cmp.w	r1, #8832	; 0x2280
   1688e:	d3fa      	bcc.n	16886 <nrfx_clock_start+0x52>
    DWT->CTRL = dwt_ctrl;
   16890:	601c      	str	r4, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16892:	4b0c      	ldr	r3, [pc, #48]	; (168c4 <nrfx_clock_start+0x90>)
    CoreDebug->DEMCR = core_debug;
   16894:	60d0      	str	r0, [r2, #12]
   16896:	2201      	movs	r2, #1
   16898:	601a      	str	r2, [r3, #0]
}
   1689a:	e7cf      	b.n	1683c <nrfx_clock_start+0x8>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1689c:	2300      	movs	r3, #0
   1689e:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
}
   168a2:	e7dc      	b.n	1685e <nrfx_clock_start+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   168a4:	4b08      	ldr	r3, [pc, #32]	; (168c8 <nrfx_clock_start+0x94>)
   168a6:	2200      	movs	r2, #0
   168a8:	601a      	str	r2, [r3, #0]
   168aa:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   168ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   168b0:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   168b4:	6018      	str	r0, [r3, #0]
}
   168b6:	e7c1      	b.n	1683c <nrfx_clock_start+0x8>
   168b8:	40000104 	.word	0x40000104
   168bc:	e000edf0 	.word	0xe000edf0
   168c0:	e0001000 	.word	0xe0001000
   168c4:	40000008 	.word	0x40000008
   168c8:	40000100 	.word	0x40000100

000168cc <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   168cc:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   168ce:	b110      	cbz	r0, 168d6 <nrfx_clock_stop+0xa>
   168d0:	2801      	cmp	r0, #1
   168d2:	d018      	beq.n	16906 <nrfx_clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   168d4:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   168d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   168da:	2202      	movs	r2, #2
   168dc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   168e0:	4a18      	ldr	r2, [pc, #96]	; (16944 <nrfx_clock_stop+0x78>)
   168e2:	6010      	str	r0, [r2, #0]
   168e4:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   168e6:	4a18      	ldr	r2, [pc, #96]	; (16948 <nrfx_clock_stop+0x7c>)
   168e8:	2101      	movs	r1, #1
   168ea:	6011      	str	r1, [r2, #0]
   168ec:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   168f0:	461c      	mov	r4, r3
   168f2:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   168f6:	03db      	lsls	r3, r3, #15
   168f8:	d5ec      	bpl.n	168d4 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   168fa:	2001      	movs	r0, #1
   168fc:	f006 fe83 	bl	1d606 <nrfx_busy_wait>
   16900:	3d01      	subs	r5, #1
   16902:	d1f6      	bne.n	168f2 <nrfx_clock_stop+0x26>
   16904:	e7e6      	b.n	168d4 <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16906:	4b11      	ldr	r3, [pc, #68]	; (1694c <nrfx_clock_stop+0x80>)
    p_reg->INTENCLR = mask;
   16908:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1690c:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   1690e:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16912:	601a      	str	r2, [r3, #0]
   16914:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16916:	4b0e      	ldr	r3, [pc, #56]	; (16950 <nrfx_clock_stop+0x84>)
   16918:	f242 7510 	movw	r5, #10000	; 0x2710
   1691c:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1691e:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   16922:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
   16926:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   16928:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1692c:	d505      	bpl.n	1693a <nrfx_clock_stop+0x6e>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   1692e:	b123      	cbz	r3, 1693a <nrfx_clock_stop+0x6e>
   16930:	2001      	movs	r0, #1
   16932:	f006 fe68 	bl	1d606 <nrfx_busy_wait>
   16936:	3d01      	subs	r5, #1
   16938:	d1f1      	bne.n	1691e <nrfx_clock_stop+0x52>
            m_clock_cb.hfclk_started = false;
   1693a:	4b06      	ldr	r3, [pc, #24]	; (16954 <nrfx_clock_stop+0x88>)
   1693c:	2200      	movs	r2, #0
   1693e:	715a      	strb	r2, [r3, #5]
   16940:	e7c8      	b.n	168d4 <nrfx_clock_stop+0x8>
   16942:	bf00      	nop
   16944:	40000104 	.word	0x40000104
   16948:	4000000c 	.word	0x4000000c
   1694c:	40000100 	.word	0x40000100
   16950:	40000004 	.word	0x40000004
   16954:	20002cf4 	.word	0x20002cf4

00016958 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   16958:	4b16      	ldr	r3, [pc, #88]	; (169b4 <nrfx_power_clock_irq_handler+0x5c>)
   1695a:	681a      	ldr	r2, [r3, #0]
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   1695c:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1695e:	b16a      	cbz	r2, 1697c <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16960:	2200      	movs	r2, #0
   16962:	601a      	str	r2, [r3, #0]
   16964:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   16966:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1696a:	2201      	movs	r2, #1
   1696c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   16970:	4b11      	ldr	r3, [pc, #68]	; (169b8 <nrfx_power_clock_irq_handler+0x60>)
   16972:	7958      	ldrb	r0, [r3, #5]
   16974:	b910      	cbnz	r0, 1697c <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
   16976:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   16978:	681b      	ldr	r3, [r3, #0]
   1697a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1697c:	4b0f      	ldr	r3, [pc, #60]	; (169bc <nrfx_power_clock_irq_handler+0x64>)
   1697e:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   16980:	b172      	cbz	r2, 169a0 <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16982:	2200      	movs	r2, #0
   16984:	601a      	str	r2, [r3, #0]
   16986:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   16988:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1698c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   16990:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   16994:	0792      	lsls	r2, r2, #30
   16996:	d104      	bne.n	169a2 <nrfx_power_clock_irq_handler+0x4a>
    p_reg->LFCLKSRC = (uint32_t)(source);
   16998:	2201      	movs	r2, #1
   1699a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1699e:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   169a0:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   169a2:	2202      	movs	r2, #2
   169a4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   169a8:	4b03      	ldr	r3, [pc, #12]	; (169b8 <nrfx_power_clock_irq_handler+0x60>)
}
   169aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   169ae:	681b      	ldr	r3, [r3, #0]
   169b0:	2001      	movs	r0, #1
   169b2:	4718      	bx	r3
   169b4:	40000100 	.word	0x40000100
   169b8:	20002cf4 	.word	0x20002cf4
   169bc:	40000104 	.word	0x40000104

000169c0 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   169c0:	2301      	movs	r3, #1
   169c2:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   169c6:	f010 0fff 	tst.w	r0, #255	; 0xff
   169ca:	d012      	beq.n	169f2 <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
   169cc:	f04f 0320 	mov.w	r3, #32
   169d0:	f3ef 8111 	mrs	r1, BASEPRI
   169d4:	f383 8811 	msr	BASEPRI, r3
   169d8:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   169dc:	4a06      	ldr	r2, [pc, #24]	; (169f8 <nrfx_gpiote_channel_free+0x38>)
   169de:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   169e0:	ea23 0000 	bic.w	r0, r3, r0
   169e4:	64d0      	str	r0, [r2, #76]	; 0x4c
	__asm__ volatile(
   169e6:	f381 8811 	msr	BASEPRI, r1
   169ea:	f3bf 8f6f 	isb	sy
   169ee:	4803      	ldr	r0, [pc, #12]	; (169fc <nrfx_gpiote_channel_free+0x3c>)
   169f0:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   169f2:	4803      	ldr	r0, [pc, #12]	; (16a00 <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   169f4:	4770      	bx	lr
   169f6:	bf00      	nop
   169f8:	20002cfc 	.word	0x20002cfc
   169fc:	0bad0000 	.word	0x0bad0000
   16a00:	0bad0004 	.word	0x0bad0004

00016a04 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   16a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16a08:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   16a0a:	f8df e060 	ldr.w	lr, [pc, #96]	; 16a6c <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   16a0e:	4816      	ldr	r0, [pc, #88]	; (16a68 <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   16a10:	f8df 805c 	ldr.w	r8, [pc, #92]	; 16a70 <nrfx_gpiote_channel_alloc+0x6c>
{
   16a14:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   16a16:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
   16a18:	2601      	movs	r6, #1
   16a1a:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   16a1c:	f04f 0120 	mov.w	r1, #32
   16a20:	f3ef 8c11 	mrs	ip, BASEPRI
   16a24:	f381 8811 	msr	BASEPRI, r1
   16a28:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   16a2c:	fa22 f103 	lsr.w	r1, r2, r3
   16a30:	07c9      	lsls	r1, r1, #31
   16a32:	d50a      	bpl.n	16a4a <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   16a34:	f8de 104c 	ldr.w	r1, [lr, #76]	; 0x4c
   16a38:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   16a3c:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
   16a3e:	bf01      	itttt	eq
   16a40:	4339      	orreq	r1, r7
   16a42:	f8ce 104c 	streq.w	r1, [lr, #76]	; 0x4c
            err_code = NRFX_SUCCESS;
   16a46:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
   16a48:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   16a4a:	f38c 8811 	msr	BASEPRI, ip
   16a4e:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   16a52:	4540      	cmp	r0, r8
   16a54:	d005      	beq.n	16a62 <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   16a56:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   16a5a:	439a      	bics	r2, r3
   16a5c:	f104 0401 	add.w	r4, r4, #1
   16a60:	d1db      	bne.n	16a1a <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   16a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16a66:	bf00      	nop
   16a68:	0bad0002 	.word	0x0bad0002
   16a6c:	20002cfc 	.word	0x20002cfc
   16a70:	0bad0000 	.word	0x0bad0000

00016a74 <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   16a74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   16a78:	691a      	ldr	r2, [r3, #16]
}

static bool is_page_aligned_check(uint32_t addr)
{
    /* If the modulo operation returns '0', then the address is aligned. */
    return !(addr % flash_page_size_get());
   16a7a:	fbb0 f3f2 	udiv	r3, r0, r2
   16a7e:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   16a82:	b973      	cbnz	r3, 16aa2 <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   16a84:	4b08      	ldr	r3, [pc, #32]	; (16aa8 <nrfx_nvmc_page_erase+0x34>)
   16a86:	2202      	movs	r2, #2
   16a88:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   16a8c:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   16a90:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   16a94:	07d2      	lsls	r2, r2, #31
   16a96:	d5fb      	bpl.n	16a90 <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
   16a98:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   16a9a:	4804      	ldr	r0, [pc, #16]	; (16aac <nrfx_nvmc_page_erase+0x38>)
   16a9c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   16aa0:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   16aa2:	4803      	ldr	r0, [pc, #12]	; (16ab0 <nrfx_nvmc_page_erase+0x3c>)
}
   16aa4:	4770      	bx	lr
   16aa6:	bf00      	nop
   16aa8:	4001e000 	.word	0x4001e000
   16aac:	0bad0000 	.word	0x0bad0000
   16ab0:	0bad000a 	.word	0x0bad000a

00016ab4 <nrfx_nvmc_word_write>:
   16ab4:	4b07      	ldr	r3, [pc, #28]	; (16ad4 <nrfx_nvmc_word_write+0x20>)
   16ab6:	2201      	movs	r2, #1
   16ab8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   16abc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   16ac0:	07d2      	lsls	r2, r2, #31
   16ac2:	d5fb      	bpl.n	16abc <nrfx_nvmc_word_write+0x8>
    *(volatile uint32_t *)addr = value;
   16ac4:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   16ac6:	f3bf 8f5f 	dmb	sy
    p_reg->CONFIG = (uint32_t)mode;
   16aca:	2200      	movs	r2, #0
   16acc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nvmc_write_mode_set();

    nvmc_word_write(addr, value);

    nvmc_readonly_mode_set();
}
   16ad0:	4770      	bx	lr
   16ad2:	bf00      	nop
   16ad4:	4001e000 	.word	0x4001e000

00016ad8 <nrfx_ppi_channel_alloc>:


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   16ad8:	4b18      	ldr	r3, [pc, #96]	; (16b3c <nrfx_ppi_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
            *p_channel = channel;
            err_code   = NRFX_SUCCESS;
   16ada:	f8df c06c 	ldr.w	ip, [pc, #108]	; 16b48 <nrfx_ppi_channel_alloc+0x70>
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   16ade:	681b      	ldr	r3, [r3, #0]
{
   16ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   16ae4:	43db      	mvns	r3, r3
{
   16ae6:	4605      	mov	r5, r0
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   16ae8:	4f15      	ldr	r7, [pc, #84]	; (16b40 <nrfx_ppi_channel_alloc+0x68>)
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   16aea:	4816      	ldr	r0, [pc, #88]	; (16b44 <nrfx_ppi_channel_alloc+0x6c>)
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   16aec:	f3c3 0313 	ubfx	r3, r3, #0, #20
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   16af0:	2400      	movs	r4, #0
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
   16af2:	f04f 0e01 	mov.w	lr, #1
   16af6:	b2e6      	uxtb	r6, r4
   16af8:	b90b      	cbnz	r3, 16afe <nrfx_ppi_channel_alloc+0x26>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   16afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   16afe:	f04f 0220 	mov.w	r2, #32
   16b02:	f3ef 8811 	mrs	r8, BASEPRI
   16b06:	f382 8811 	msr	BASEPRI, r2
   16b0a:	f3bf 8f6f 	isb	sy
   16b0e:	fa0e f206 	lsl.w	r2, lr, r6
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   16b12:	421a      	tst	r2, r3
   16b14:	d006      	beq.n	16b24 <nrfx_ppi_channel_alloc+0x4c>
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   16b16:	6839      	ldr	r1, [r7, #0]
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   16b18:	420a      	tst	r2, r1
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
   16b1a:	bf01      	itttt	eq
   16b1c:	4311      	orreq	r1, r2
   16b1e:	6039      	streq	r1, [r7, #0]
            *p_channel = channel;
   16b20:	702e      	strbeq	r6, [r5, #0]
            err_code   = NRFX_SUCCESS;
   16b22:	4660      	moveq	r0, ip
	__asm__ volatile(
   16b24:	f388 8811 	msr	BASEPRI, r8
   16b28:	f3bf 8f6f 	isb	sy
        if (err_code == NRFX_SUCCESS)
   16b2c:	4560      	cmp	r0, ip
   16b2e:	f104 0401 	add.w	r4, r4, #1
   16b32:	d0e2      	beq.n	16afa <nrfx_ppi_channel_alloc+0x22>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
   16b34:	ea23 0302 	bic.w	r3, r3, r2
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   16b38:	e7dd      	b.n	16af6 <nrfx_ppi_channel_alloc+0x1e>
   16b3a:	bf00      	nop
   16b3c:	0001ebb8 	.word	0x0001ebb8
   16b40:	20002d4c 	.word	0x20002d4c
   16b44:	0bad0002 	.word	0x0bad0002
   16b48:	0bad0000 	.word	0x0bad0000

00016b4c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   16b4c:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   16b4e:	4c11      	ldr	r4, [pc, #68]	; (16b94 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   16b50:	4a11      	ldr	r2, [pc, #68]	; (16b98 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   16b52:	4912      	ldr	r1, [pc, #72]	; (16b9c <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   16b54:	2303      	movs	r3, #3
   16b56:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   16b58:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   16b5a:	4b11      	ldr	r3, [pc, #68]	; (16ba0 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
   16b5c:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   16b5e:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   16b60:	f44f 6380 	mov.w	r3, #1024	; 0x400
   16b64:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   16b66:	2300      	movs	r3, #0
   16b68:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   16b6a:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   16b6c:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   16b6e:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   16b70:	4a0c      	ldr	r2, [pc, #48]	; (16ba4 <_DoInit+0x58>)
   16b72:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   16b74:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   16b76:	2210      	movs	r2, #16
   16b78:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   16b7a:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   16b7c:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   16b7e:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   16b80:	f002 ffb8 	bl	19af4 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   16b84:	4908      	ldr	r1, [pc, #32]	; (16ba8 <_DoInit+0x5c>)
   16b86:	4620      	mov	r0, r4
   16b88:	f002 ffb4 	bl	19af4 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   16b8c:	2320      	movs	r3, #32
   16b8e:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   16b90:	bd10      	pop	{r4, pc}
   16b92:	bf00      	nop
   16b94:	20002d50 	.word	0x20002d50
   16b98:	000226b3 	.word	0x000226b3
   16b9c:	000226bc 	.word	0x000226bc
   16ba0:	2000304e 	.word	0x2000304e
   16ba4:	2000303e 	.word	0x2000303e
   16ba8:	000226c0 	.word	0x000226c0

00016bac <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   16bac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   16bb0:	4f23      	ldr	r7, [pc, #140]	; (16c40 <SEGGER_RTT_WriteSkipNoLock+0x94>)
   16bb2:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   16bb6:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   16bb8:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   16bbc:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
   16bbe:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   16bc0:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   16bc2:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   16bc4:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   16bc6:	d834      	bhi.n	16c32 <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   16bc8:	f8d2 a020 	ldr.w	sl, [r2, #32]
   16bcc:	ebaa 0905 	sub.w	r9, sl, r5
   16bd0:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
   16bd4:	4294      	cmp	r4, r2
   16bd6:	d811      	bhi.n	16bfc <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   16bd8:	f04f 0918 	mov.w	r9, #24
   16bdc:	fb06 9309 	mla	r3, r6, r9, r9
   16be0:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
   16be2:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   16be4:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
   16be6:	4641      	mov	r1, r8
   16be8:	4428      	add	r0, r5
   16bea:	f002 ffdb 	bl	19ba4 <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   16bee:	fb09 7606 	mla	r6, r9, r6, r7
   16bf2:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   16bf4:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
   16bf6:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   16bf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   16bfc:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   16bfe:	429c      	cmp	r4, r3
   16c00:	d81b      	bhi.n	16c3a <SEGGER_RTT_WriteSkipNoLock+0x8e>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   16c02:	fb00 bb0b 	mla	fp, r0, fp, fp
   16c06:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   16c08:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   16c0a:	f8db 0004 	ldr.w	r0, [fp, #4]
   16c0e:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   16c10:	4428      	add	r0, r5
   16c12:	f002 ffc7 	bl	19ba4 <memcpy>
      if (NumBytes) {
   16c16:	ebb4 040a 	subs.w	r4, r4, sl
   16c1a:	d006      	beq.n	16c2a <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy((void*)pDst, pData + Rem, NumBytes);
   16c1c:	f8db 0004 	ldr.w	r0, [fp, #4]
   16c20:	4622      	mov	r2, r4
   16c22:	eb08 0109 	add.w	r1, r8, r9
   16c26:	f002 ffbd 	bl	19ba4 <memcpy>
      pRing->WrOff = NumBytes;
   16c2a:	2018      	movs	r0, #24
   16c2c:	fb00 7606 	mla	r6, r0, r6, r7
   16c30:	e7e0      	b.n	16bf4 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
   16c32:	3b01      	subs	r3, #1
   16c34:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   16c36:	42a3      	cmp	r3, r4
   16c38:	d2ce      	bcs.n	16bd8 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   16c3a:	2000      	movs	r0, #0
   16c3c:	e7dc      	b.n	16bf8 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   16c3e:	bf00      	nop
   16c40:	20002d50 	.word	0x20002d50

00016c44 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   16c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   16c46:	4c18      	ldr	r4, [pc, #96]	; (16ca8 <SEGGER_RTT_WriteNoLock+0x64>)
   16c48:	2318      	movs	r3, #24
   16c4a:	fb00 3503 	mla	r5, r0, r3, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   16c4e:	fb03 4000 	mla	r0, r3, r0, r4
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   16c52:	4425      	add	r5, r4
  switch (pRing->Flags) {
   16c54:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
   16c56:	2c01      	cmp	r4, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   16c58:	460f      	mov	r7, r1
   16c5a:	4616      	mov	r6, r2
  switch (pRing->Flags) {
   16c5c:	d00f      	beq.n	16c7e <SEGGER_RTT_WriteNoLock+0x3a>
   16c5e:	2c02      	cmp	r4, #2
   16c60:	d01a      	beq.n	16c98 <SEGGER_RTT_WriteNoLock+0x54>
   16c62:	b9f4      	cbnz	r4, 16ca2 <SEGGER_RTT_WriteNoLock+0x5e>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
   16c64:	4628      	mov	r0, r5
   16c66:	f006 fce8 	bl	1d63a <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
   16c6a:	4286      	cmp	r6, r0
   16c6c:	d805      	bhi.n	16c7a <SEGGER_RTT_WriteNoLock+0x36>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
   16c6e:	4632      	mov	r2, r6
   16c70:	4639      	mov	r1, r7
   16c72:	4628      	mov	r0, r5
   16c74:	f006 fcef 	bl	1d656 <_WriteNoCheck>
   16c78:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
   16c7a:	4620      	mov	r0, r4
   16c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
   16c7e:	4628      	mov	r0, r5
   16c80:	f006 fcdb 	bl	1d63a <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
   16c84:	4286      	cmp	r6, r0
   16c86:	4634      	mov	r4, r6
   16c88:	bf28      	it	cs
   16c8a:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
   16c8c:	4622      	mov	r2, r4
   16c8e:	4639      	mov	r1, r7
   16c90:	4628      	mov	r0, r5
   16c92:	f006 fce0 	bl	1d656 <_WriteNoCheck>
    break;
   16c96:	e7f0      	b.n	16c7a <SEGGER_RTT_WriteNoLock+0x36>
    Status = _WriteBlocking(pRing, pData, NumBytes);
   16c98:	4628      	mov	r0, r5
}
   16c9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
   16c9e:	f006 bcf6 	b.w	1d68e <_WriteBlocking>
  switch (pRing->Flags) {
   16ca2:	2400      	movs	r4, #0
  return Status;
   16ca4:	e7e9      	b.n	16c7a <SEGGER_RTT_WriteNoLock+0x36>
   16ca6:	bf00      	nop
   16ca8:	20002d50 	.word	0x20002d50

00016cac <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   16cac:	4b03      	ldr	r3, [pc, #12]	; (16cbc <SEGGER_RTT_HasDataUp+0x10>)
   16cae:	2218      	movs	r2, #24
   16cb0:	fb02 3300 	mla	r3, r2, r0, r3
   16cb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   16cb6:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   16cb8:	1a80      	subs	r0, r0, r2
   16cba:	4770      	bx	lr
   16cbc:	20002d50 	.word	0x20002d50

00016cc0 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   16cc0:	4b0e      	ldr	r3, [pc, #56]	; (16cfc <z_sys_init_run_level+0x3c>)
{
   16cc2:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   16cc4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   16cc8:	3001      	adds	r0, #1
   16cca:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   16cce:	42a6      	cmp	r6, r4
   16cd0:	d800      	bhi.n	16cd4 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   16cd2:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   16cd4:	e9d4 3500 	ldrd	r3, r5, [r4]
   16cd8:	4628      	mov	r0, r5
   16cda:	4798      	blx	r3
		if (dev != NULL) {
   16cdc:	b165      	cbz	r5, 16cf8 <z_sys_init_run_level+0x38>
			if (rc != 0) {
   16cde:	68eb      	ldr	r3, [r5, #12]
   16ce0:	b130      	cbz	r0, 16cf0 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   16ce2:	2800      	cmp	r0, #0
   16ce4:	bfb8      	it	lt
   16ce6:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   16ce8:	28ff      	cmp	r0, #255	; 0xff
   16cea:	bfa8      	it	ge
   16cec:	20ff      	movge	r0, #255	; 0xff
   16cee:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   16cf0:	785a      	ldrb	r2, [r3, #1]
   16cf2:	f042 0201 	orr.w	r2, r2, #1
   16cf6:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   16cf8:	3408      	adds	r4, #8
   16cfa:	e7e8      	b.n	16cce <z_sys_init_run_level+0xe>
   16cfc:	0001ec3c 	.word	0x0001ec3c

00016d00 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   16d00:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   16d02:	4605      	mov	r5, r0
   16d04:	b910      	cbnz	r0, 16d0c <z_impl_device_get_binding+0xc>
		return NULL;
   16d06:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   16d08:	4620      	mov	r0, r4
   16d0a:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   16d0c:	7803      	ldrb	r3, [r0, #0]
   16d0e:	2b00      	cmp	r3, #0
   16d10:	d0f9      	beq.n	16d06 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   16d12:	4a0f      	ldr	r2, [pc, #60]	; (16d50 <z_impl_device_get_binding+0x50>)
   16d14:	4c0f      	ldr	r4, [pc, #60]	; (16d54 <z_impl_device_get_binding+0x54>)
   16d16:	4616      	mov	r6, r2
   16d18:	4294      	cmp	r4, r2
   16d1a:	d108      	bne.n	16d2e <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   16d1c:	4c0d      	ldr	r4, [pc, #52]	; (16d54 <z_impl_device_get_binding+0x54>)
   16d1e:	42b4      	cmp	r4, r6
   16d20:	d0f1      	beq.n	16d06 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   16d22:	4620      	mov	r0, r4
   16d24:	f006 fce4 	bl	1d6f0 <z_device_ready>
   16d28:	b950      	cbnz	r0, 16d40 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   16d2a:	3418      	adds	r4, #24
   16d2c:	e7f7      	b.n	16d1e <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
   16d2e:	4620      	mov	r0, r4
   16d30:	f006 fcde 	bl	1d6f0 <z_device_ready>
   16d34:	b110      	cbz	r0, 16d3c <z_impl_device_get_binding+0x3c>
   16d36:	6823      	ldr	r3, [r4, #0]
   16d38:	42ab      	cmp	r3, r5
   16d3a:	d0e5      	beq.n	16d08 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   16d3c:	3418      	adds	r4, #24
   16d3e:	e7eb      	b.n	16d18 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   16d40:	6821      	ldr	r1, [r4, #0]
   16d42:	4628      	mov	r0, r5
   16d44:	f002 ff03 	bl	19b4e <strcmp>
   16d48:	2800      	cmp	r0, #0
   16d4a:	d1ee      	bne.n	16d2a <z_impl_device_get_binding+0x2a>
   16d4c:	e7dc      	b.n	16d08 <z_impl_device_get_binding+0x8>
   16d4e:	bf00      	nop
   16d50:	20000af4 	.word	0x20000af4
   16d54:	20000a64 	.word	0x20000a64

00016d58 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   16d58:	4b01      	ldr	r3, [pc, #4]	; (16d60 <z_impl_z_errno+0x8>)
   16d5a:	6898      	ldr	r0, [r3, #8]
}
   16d5c:	3064      	adds	r0, #100	; 0x64
   16d5e:	4770      	bx	lr
   16d60:	20002df8 	.word	0x20002df8

00016d64 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   16d64:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   16d68:	4606      	mov	r6, r0
   16d6a:	460f      	mov	r7, r1
	__asm__ volatile(
   16d6c:	f04f 0320 	mov.w	r3, #32
   16d70:	f3ef 8811 	mrs	r8, BASEPRI
   16d74:	f383 8811 	msr	BASEPRI, r3
   16d78:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   16d7c:	f001 f84a 	bl	17e14 <z_impl_k_current_get>
   16d80:	4c1f      	ldr	r4, [pc, #124]	; (16e00 <z_fatal_error+0x9c>)
   16d82:	4b20      	ldr	r3, [pc, #128]	; (16e04 <z_fatal_error+0xa0>)
   16d84:	1ae4      	subs	r4, r4, r3
   16d86:	2e04      	cmp	r6, #4
   16d88:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   16d8c:	bf96      	itet	ls
   16d8e:	4a1e      	ldrls	r2, [pc, #120]	; (16e08 <z_fatal_error+0xa4>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   16d90:	4a1e      	ldrhi	r2, [pc, #120]	; (16e0c <z_fatal_error+0xa8>)
   16d92:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
   16d96:	01a4      	lsls	r4, r4, #6
   16d98:	f044 0301 	orr.w	r3, r4, #1
   16d9c:	4605      	mov	r5, r0
   16d9e:	f8ad 3000 	strh.w	r3, [sp]
   16da2:	481b      	ldr	r0, [pc, #108]	; (16e10 <z_fatal_error+0xac>)
   16da4:	2300      	movs	r3, #0
   16da6:	4631      	mov	r1, r6
   16da8:	f002 f85d 	bl	18e66 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   16dac:	b147      	cbz	r7, 16dc0 <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   16dae:	69fb      	ldr	r3, [r7, #28]
   16db0:	f3c3 0308 	ubfx	r3, r3, #0, #9
   16db4:	b123      	cbz	r3, 16dc0 <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
   16db6:	4817      	ldr	r0, [pc, #92]	; (16e14 <z_fatal_error+0xb0>)
   16db8:	f044 0101 	orr.w	r1, r4, #1
   16dbc:	f002 f819 	bl	18df2 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   16dc0:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   16dc4:	b12d      	cbz	r5, 16dd2 <z_fatal_error+0x6e>
   16dc6:	4628      	mov	r0, r5
   16dc8:	f006 fd54 	bl	1d874 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   16dcc:	b108      	cbz	r0, 16dd2 <z_fatal_error+0x6e>
   16dce:	7803      	ldrb	r3, [r0, #0]
   16dd0:	b903      	cbnz	r3, 16dd4 <z_fatal_error+0x70>
		thread_name = "unknown";
   16dd2:	4811      	ldr	r0, [pc, #68]	; (16e18 <z_fatal_error+0xb4>)
   16dd4:	f7eb fa86 	bl	22e4 <z_log_strdup>
	LOG_ERR("Current thread: %p (%s)", thread,
   16dd8:	4623      	mov	r3, r4
   16dda:	4602      	mov	r2, r0
   16ddc:	4629      	mov	r1, r5
   16dde:	480f      	ldr	r0, [pc, #60]	; (16e1c <z_fatal_error+0xb8>)
   16de0:	f002 f828 	bl	18e34 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   16de4:	4639      	mov	r1, r7
   16de6:	4630      	mov	r0, r6
   16de8:	f7ff fb9a 	bl	16520 <k_sys_fatal_error_handler>
	__asm__ volatile(
   16dec:	f388 8811 	msr	BASEPRI, r8
   16df0:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   16df4:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   16df6:	b002      	add	sp, #8
   16df8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   16dfc:	f7ec bfee 	b.w	3ddc <z_impl_k_thread_abort>
   16e00:	0001e628 	.word	0x0001e628
   16e04:	0001e408 	.word	0x0001e408
   16e08:	0001ec54 	.word	0x0001ec54
   16e0c:	000226c7 	.word	0x000226c7
   16e10:	000226d5 	.word	0x000226d5
   16e14:	000226fd 	.word	0x000226fd
   16e18:	0001f558 	.word	0x0001f558
   16e1c:	0002271e 	.word	0x0002271e

00016e20 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   16e20:	4802      	ldr	r0, [pc, #8]	; (16e2c <z_bss_zero+0xc>)
   16e22:	4a03      	ldr	r2, [pc, #12]	; (16e30 <z_bss_zero+0x10>)
   16e24:	2100      	movs	r1, #0
   16e26:	1a12      	subs	r2, r2, r0
   16e28:	f002 bee7 	b.w	19bfa <memset>
   16e2c:	20000d88 	.word	0x20000d88
   16e30:	20003450 	.word	0x20003450

00016e34 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   16e34:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   16e36:	4b0a      	ldr	r3, [pc, #40]	; (16e60 <bg_thread_main+0x2c>)
   16e38:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   16e3a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   16e3c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   16e3e:	f7ff ff3f 	bl	16cc0 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   16e42:	f001 facf 	bl	183e4 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   16e46:	2003      	movs	r0, #3
   16e48:	f7ff ff3a 	bl	16cc0 <z_sys_init_run_level>

	z_init_static_threads();
   16e4c:	f000 f958 	bl	17100 <z_init_static_threads>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
   16e50:	f7ea fc86 	bl	1760 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   16e54:	4a03      	ldr	r2, [pc, #12]	; (16e64 <bg_thread_main+0x30>)
   16e56:	7b13      	ldrb	r3, [r2, #12]
   16e58:	f023 0301 	bic.w	r3, r3, #1
   16e5c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   16e5e:	bd08      	pop	{r3, pc}
   16e60:	2000344e 	.word	0x2000344e
   16e64:	20001760 	.word	0x20001760

00016e68 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   16e68:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   16e6c:	b0a7      	sub	sp, #156	; 0x9c
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   16e6e:	f7eb f971 	bl	2154 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   16e72:	f8df 9100 	ldr.w	r9, [pc, #256]	; 16f74 <z_cstart+0x10c>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   16e76:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   16e7a:	4d36      	ldr	r5, [pc, #216]	; (16f54 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
   16e7c:	4e36      	ldr	r6, [pc, #216]	; (16f58 <z_cstart+0xf0>)
   16e7e:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   16e80:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 16f78 <z_cstart+0x110>
	z_setup_new_thread(thread, stack,
   16e84:	4f35      	ldr	r7, [pc, #212]	; (16f5c <z_cstart+0xf4>)
   16e86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   16e8a:	2400      	movs	r4, #0
   16e8c:	616b      	str	r3, [r5, #20]
   16e8e:	23e0      	movs	r3, #224	; 0xe0
   16e90:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   16e94:	77ec      	strb	r4, [r5, #31]
   16e96:	762c      	strb	r4, [r5, #24]
   16e98:	766c      	strb	r4, [r5, #25]
   16e9a:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   16e9c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   16e9e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   16ea2:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   16ea4:	f7ec ff44 	bl	3d30 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   16ea8:	f7ec fca4 	bl	37f4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   16eac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16eb0:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   16eb2:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   16eb4:	f7ed f84e 	bl	3f54 <z_arm_mpu_init>
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   16eb8:	4d29      	ldr	r5, [pc, #164]	; (16f60 <z_cstart+0xf8>)
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   16eba:	f7ec ffa1 	bl	3e00 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   16ebe:	f240 1301 	movw	r3, #257	; 0x101
   16ec2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   16ec6:	ab06      	add	r3, sp, #24
   16ec8:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
   16eca:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   16ece:	f006 fc0e 	bl	1d6ee <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   16ed2:	4620      	mov	r0, r4
   16ed4:	f7ff fef4 	bl	16cc0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   16ed8:	2001      	movs	r0, #1
   16eda:	f7ff fef1 	bl	16cc0 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   16ede:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
   16ee2:	f000 ff17 	bl	17d14 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   16ee6:	4b1f      	ldr	r3, [pc, #124]	; (16f64 <z_cstart+0xfc>)
	_kernel.ready_q.cache = &z_main_thread;
   16ee8:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   16eea:	491f      	ldr	r1, [pc, #124]	; (16f68 <z_cstart+0x100>)
   16eec:	9305      	str	r3, [sp, #20]
   16eee:	f44f 7200 	mov.w	r2, #512	; 0x200
   16ef2:	4653      	mov	r3, sl
   16ef4:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   16ef8:	e9cd 4401 	strd	r4, r4, [sp, #4]
   16efc:	9400      	str	r4, [sp, #0]
   16efe:	4630      	mov	r0, r6
   16f00:	f000 f8a0 	bl	17044 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   16f04:	7b73      	ldrb	r3, [r6, #13]
   16f06:	4680      	mov	r8, r0
   16f08:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   16f0c:	4630      	mov	r0, r6
   16f0e:	7373      	strb	r3, [r6, #13]
   16f10:	f006 ff2c 	bl	1dd6c <z_ready_thread>
	z_setup_new_thread(thread, stack,
   16f14:	230f      	movs	r3, #15
   16f16:	e9cd 4302 	strd	r4, r3, [sp, #8]
   16f1a:	4914      	ldr	r1, [pc, #80]	; (16f6c <z_cstart+0x104>)
   16f1c:	4b14      	ldr	r3, [pc, #80]	; (16f70 <z_cstart+0x108>)
   16f1e:	f44f 72a0 	mov.w	r2, #320	; 0x140
   16f22:	e9cd b404 	strd	fp, r4, [sp, #16]
   16f26:	e9cd 5400 	strd	r5, r4, [sp]
   16f2a:	4638      	mov	r0, r7
   16f2c:	f000 f88a 	bl	17044 <z_setup_new_thread>
   16f30:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   16f32:	60ef      	str	r7, [r5, #12]
   16f34:	f023 0304 	bic.w	r3, r3, #4
   16f38:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   16f3a:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
   16f3e:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
   16f42:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   16f44:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   16f48:	4652      	mov	r2, sl
   16f4a:	4641      	mov	r1, r8
   16f4c:	4630      	mov	r0, r6
   16f4e:	f7ec fbad 	bl	36ac <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   16f52:	bf00      	nop
   16f54:	e000ed00 	.word	0xe000ed00
   16f58:	20001760 	.word	0x20001760
   16f5c:	200016e0 	.word	0x200016e0
   16f60:	20002df8 	.word	0x20002df8
   16f64:	0002043b 	.word	0x0002043b
   16f68:	20004980 	.word	0x20004980
   16f6c:	20004ba0 	.word	0x20004ba0
   16f70:	000171bd 	.word	0x000171bd
   16f74:	20005520 	.word	0x20005520
   16f78:	00016e35 	.word	0x00016e35

00016f7c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   16f7c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   16f7e:	4c06      	ldr	r4, [pc, #24]	; (16f98 <statics_init+0x1c>)
   16f80:	4d06      	ldr	r5, [pc, #24]	; (16f9c <statics_init+0x20>)
   16f82:	42ac      	cmp	r4, r5
   16f84:	d301      	bcc.n	16f8a <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   16f86:	2000      	movs	r0, #0
   16f88:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   16f8a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   16f8e:	4620      	mov	r0, r4
   16f90:	f006 fbb7 	bl	1d702 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   16f94:	3414      	adds	r4, #20
   16f96:	e7f4      	b.n	16f82 <statics_init+0x6>
   16f98:	20000b64 	.word	0x20000b64
   16f9c:	20000b64 	.word	0x20000b64

00016fa0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   16fa0:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   16fa2:	4b0e      	ldr	r3, [pc, #56]	; (16fdc <init_mem_slab_module+0x3c>)
   16fa4:	4c0e      	ldr	r4, [pc, #56]	; (16fe0 <init_mem_slab_module+0x40>)
   16fa6:	42a3      	cmp	r3, r4
   16fa8:	d301      	bcc.n	16fae <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   16faa:	2000      	movs	r0, #0
	return rc;
}
   16fac:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   16fae:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   16fb2:	ea41 0200 	orr.w	r2, r1, r0
   16fb6:	f012 0203 	ands.w	r2, r2, #3
   16fba:	d10b      	bne.n	16fd4 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   16fbc:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   16fbe:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   16fc0:	42aa      	cmp	r2, r5
   16fc2:	d101      	bne.n	16fc8 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   16fc4:	331c      	adds	r3, #28
   16fc6:	e7ee      	b.n	16fa6 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   16fc8:	695e      	ldr	r6, [r3, #20]
   16fca:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   16fcc:	3201      	adds	r2, #1
		slab->free_list = p;
   16fce:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   16fd0:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   16fd2:	e7f5      	b.n	16fc0 <init_mem_slab_module+0x20>
		return -EINVAL;
   16fd4:	f06f 0015 	mvn.w	r0, #21
	return rc;
   16fd8:	e7e8      	b.n	16fac <init_mem_slab_module+0xc>
   16fda:	bf00      	nop
   16fdc:	20000af4 	.word	0x20000af4
   16fe0:	20000b64 	.word	0x20000b64

00016fe4 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   16fe4:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   16fe6:	460c      	mov	r4, r1
   16fe8:	4616      	mov	r6, r2
   16fea:	461f      	mov	r7, r3
	__asm__ volatile(
   16fec:	f04f 0320 	mov.w	r3, #32
   16ff0:	f3ef 8111 	mrs	r1, BASEPRI
   16ff4:	f383 8811 	msr	BASEPRI, r3
   16ff8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   16ffc:	6943      	ldr	r3, [r0, #20]
   16ffe:	b15b      	cbz	r3, 17018 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   17000:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   17002:	681b      	ldr	r3, [r3, #0]
   17004:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   17006:	6983      	ldr	r3, [r0, #24]
   17008:	3301      	adds	r3, #1
   1700a:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1700c:	2000      	movs	r0, #0
	__asm__ volatile(
   1700e:	f381 8811 	msr	BASEPRI, r1
   17012:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   17016:	e011      	b.n	1703c <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   17018:	ea56 0207 	orrs.w	r2, r6, r7
   1701c:	d103      	bne.n	17026 <k_mem_slab_alloc+0x42>
		*mem = NULL;
   1701e:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   17020:	f06f 000b 	mvn.w	r0, #11
   17024:	e7f3      	b.n	1700e <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   17026:	4602      	mov	r2, r0
   17028:	e9cd 6700 	strd	r6, r7, [sp]
   1702c:	3008      	adds	r0, #8
   1702e:	f000 fcb3 	bl	17998 <z_pend_curr>
		if (result == 0) {
   17032:	b918      	cbnz	r0, 1703c <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   17034:	4b02      	ldr	r3, [pc, #8]	; (17040 <k_mem_slab_alloc+0x5c>)
   17036:	689b      	ldr	r3, [r3, #8]
   17038:	695b      	ldr	r3, [r3, #20]
   1703a:	6023      	str	r3, [r4, #0]
}
   1703c:	b002      	add	sp, #8
   1703e:	bdd0      	pop	{r4, r6, r7, pc}
   17040:	20002df8 	.word	0x20002df8

00017044 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   17044:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   17048:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1704a:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1704c:	2604      	movs	r6, #4
   1704e:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   17050:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   17052:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   17054:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   17058:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1705a:	1dd6      	adds	r6, r2, #7
   1705c:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   17060:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   17062:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   17064:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   17068:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   1706a:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   1706e:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   17072:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   17074:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   17076:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   17078:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1707c:	9202      	str	r2, [sp, #8]
   1707e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   17080:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   17082:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   17084:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   17086:	9200      	str	r2, [sp, #0]
   17088:	4642      	mov	r2, r8
{
   1708a:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1708c:	f7ec fad8 	bl	3640 <arch_new_thread>
	if (!_current) {
   17090:	4b04      	ldr	r3, [pc, #16]	; (170a4 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   17092:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   17094:	689b      	ldr	r3, [r3, #8]
   17096:	b103      	cbz	r3, 1709a <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   17098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   1709a:	6763      	str	r3, [r4, #116]	; 0x74
}
   1709c:	4640      	mov	r0, r8
   1709e:	b004      	add	sp, #16
   170a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   170a4:	20002df8 	.word	0x20002df8

000170a8 <z_impl_k_thread_create>:
{
   170a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   170aa:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   170ac:	2500      	movs	r5, #0
   170ae:	9505      	str	r5, [sp, #20]
   170b0:	9d10      	ldr	r5, [sp, #64]	; 0x40
   170b2:	9504      	str	r5, [sp, #16]
   170b4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   170b6:	9503      	str	r5, [sp, #12]
   170b8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   170ba:	9502      	str	r5, [sp, #8]
{
   170bc:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   170c0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   170c2:	9501      	str	r5, [sp, #4]
   170c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   170c6:	9500      	str	r5, [sp, #0]
{
   170c8:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   170ca:	f7ff ffbb 	bl	17044 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   170ce:	1c7b      	adds	r3, r7, #1
   170d0:	bf08      	it	eq
   170d2:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   170d6:	d005      	beq.n	170e4 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   170d8:	ea56 0307 	orrs.w	r3, r6, r7
   170dc:	d105      	bne.n	170ea <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   170de:	4620      	mov	r0, r4
   170e0:	f000 fdae 	bl	17c40 <z_sched_start>
}
   170e4:	4620      	mov	r0, r4
   170e6:	b007      	add	sp, #28
   170e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   170ea:	4904      	ldr	r1, [pc, #16]	; (170fc <z_impl_k_thread_create+0x54>)
   170ec:	4632      	mov	r2, r6
   170ee:	463b      	mov	r3, r7
   170f0:	f104 0018 	add.w	r0, r4, #24
   170f4:	f000 ff98 	bl	18028 <z_add_timeout>
   170f8:	e7f4      	b.n	170e4 <z_impl_k_thread_create+0x3c>
   170fa:	bf00      	nop
   170fc:	0001dd8d 	.word	0x0001dd8d

00017100 <z_init_static_threads>:
{
   17100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   17104:	4e2a      	ldr	r6, [pc, #168]	; (171b0 <z_init_static_threads+0xb0>)
   17106:	4d2b      	ldr	r5, [pc, #172]	; (171b4 <z_init_static_threads+0xb4>)
{
   17108:	b086      	sub	sp, #24
   1710a:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
   1710c:	42b5      	cmp	r5, r6
   1710e:	f105 0430 	add.w	r4, r5, #48	; 0x30
   17112:	d310      	bcc.n	17136 <z_init_static_threads+0x36>
	k_sched_lock();
   17114:	f000 fbce 	bl	178b4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   17118:	4c26      	ldr	r4, [pc, #152]	; (171b4 <z_init_static_threads+0xb4>)
   1711a:	f8df a09c 	ldr.w	sl, [pc, #156]	; 171b8 <z_init_static_threads+0xb8>
   1711e:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   17122:	f240 36e7 	movw	r6, #999	; 0x3e7
   17126:	2700      	movs	r7, #0
   17128:	4544      	cmp	r4, r8
   1712a:	d321      	bcc.n	17170 <z_init_static_threads+0x70>
}
   1712c:	b006      	add	sp, #24
   1712e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   17132:	f000 bcb1 	b.w	17a98 <k_sched_unlock>
		z_setup_new_thread(
   17136:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1713a:	9305      	str	r3, [sp, #20]
   1713c:	f854 3c10 	ldr.w	r3, [r4, #-16]
   17140:	9304      	str	r3, [sp, #16]
   17142:	f854 3c14 	ldr.w	r3, [r4, #-20]
   17146:	9303      	str	r3, [sp, #12]
   17148:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1714c:	9302      	str	r3, [sp, #8]
   1714e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   17152:	9301      	str	r3, [sp, #4]
   17154:	f854 3c20 	ldr.w	r3, [r4, #-32]
   17158:	9300      	str	r3, [sp, #0]
   1715a:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1715e:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   17162:	f7ff ff6f 	bl	17044 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   17166:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1716a:	655d      	str	r5, [r3, #84]	; 0x54
   1716c:	4625      	mov	r5, r4
   1716e:	e7cd      	b.n	1710c <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   17170:	6a63      	ldr	r3, [r4, #36]	; 0x24
   17172:	1c5a      	adds	r2, r3, #1
   17174:	d00d      	beq.n	17192 <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
   17176:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1717a:	4630      	mov	r0, r6
   1717c:	4639      	mov	r1, r7
   1717e:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   17182:	42b9      	cmp	r1, r7
   17184:	bf08      	it	eq
   17186:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   17188:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1718a:	d104      	bne.n	17196 <z_init_static_threads+0x96>
	z_sched_start(thread);
   1718c:	4628      	mov	r0, r5
   1718e:	f000 fd57 	bl	17c40 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   17192:	3430      	adds	r4, #48	; 0x30
   17194:	e7c8      	b.n	17128 <z_init_static_threads+0x28>
   17196:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1719a:	2300      	movs	r3, #0
   1719c:	f7e8 ffa0 	bl	e0 <__aeabi_uldivmod>
   171a0:	4602      	mov	r2, r0
   171a2:	460b      	mov	r3, r1
   171a4:	f105 0018 	add.w	r0, r5, #24
   171a8:	4651      	mov	r1, sl
   171aa:	f000 ff3d 	bl	18028 <z_add_timeout>
   171ae:	e7f0      	b.n	17192 <z_init_static_threads+0x92>
   171b0:	20000af4 	.word	0x20000af4
   171b4:	20000af4 	.word	0x20000af4
   171b8:	0001dd8d 	.word	0x0001dd8d

000171bc <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   171bc:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   171be:	4c09      	ldr	r4, [pc, #36]	; (171e4 <idle+0x28>)
	__asm__ volatile(
   171c0:	f04f 0220 	mov.w	r2, #32
   171c4:	f3ef 8311 	mrs	r3, BASEPRI
   171c8:	f382 8811 	msr	BASEPRI, r2
   171cc:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   171d0:	f006 fe7e 	bl	1ded0 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
   171d4:	6220      	str	r0, [r4, #32]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
   171d6:	f7eb fdab 	bl	2d30 <pm_system_suspend>
   171da:	2800      	cmp	r0, #0
   171dc:	d1f0      	bne.n	171c0 <idle+0x4>
	arch_cpu_idle();
   171de:	f7ec fb0f 	bl	3800 <arch_cpu_idle>
}
   171e2:	e7ed      	b.n	171c0 <idle+0x4>
   171e4:	20002df8 	.word	0x20002df8

000171e8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   171e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   171ec:	4604      	mov	r4, r0
   171ee:	4616      	mov	r6, r2
   171f0:	461f      	mov	r7, r3
   171f2:	f04f 0320 	mov.w	r3, #32
   171f6:	f3ef 8811 	mrs	r8, BASEPRI
   171fa:	f383 8811 	msr	BASEPRI, r3
   171fe:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   17202:	68c3      	ldr	r3, [r0, #12]
   17204:	4a32      	ldr	r2, [pc, #200]	; (172d0 <z_impl_k_mutex_lock+0xe8>)
   17206:	b16b      	cbz	r3, 17224 <z_impl_k_mutex_lock+0x3c>
   17208:	6880      	ldr	r0, [r0, #8]
   1720a:	6891      	ldr	r1, [r2, #8]
   1720c:	4288      	cmp	r0, r1
   1720e:	d019      	beq.n	17244 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   17210:	ea56 0307 	orrs.w	r3, r6, r7
   17214:	d118      	bne.n	17248 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   17216:	f388 8811 	msr	BASEPRI, r8
   1721a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   1721e:	f06f 000f 	mvn.w	r0, #15
   17222:	e00c      	b.n	1723e <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   17224:	6891      	ldr	r1, [r2, #8]
   17226:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1722a:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1722c:	3301      	adds	r3, #1
   1722e:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   17230:	6893      	ldr	r3, [r2, #8]
   17232:	60a3      	str	r3, [r4, #8]
   17234:	f388 8811 	msr	BASEPRI, r8
   17238:	f3bf 8f6f 	isb	sy
		return 0;
   1723c:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1723e:	b002      	add	sp, #8
   17240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   17244:	6921      	ldr	r1, [r4, #16]
   17246:	e7f0      	b.n	1722a <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   17248:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1724c:	f991 100e 	ldrsb.w	r1, [r1, #14]
   17250:	4299      	cmp	r1, r3
   17252:	bfa8      	it	ge
   17254:	4619      	movge	r1, r3
   17256:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1725a:	428b      	cmp	r3, r1
   1725c:	dd2c      	ble.n	172b8 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
   1725e:	f000 fd0d 	bl	17c7c <z_set_prio>
   17262:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   17264:	e9cd 6700 	strd	r6, r7, [sp]
   17268:	481a      	ldr	r0, [pc, #104]	; (172d4 <z_impl_k_mutex_lock+0xec>)
   1726a:	4622      	mov	r2, r4
   1726c:	4641      	mov	r1, r8
   1726e:	f000 fb93 	bl	17998 <z_pend_curr>
	if (got_mutex == 0) {
   17272:	2800      	cmp	r0, #0
   17274:	d0e3      	beq.n	1723e <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   17276:	f04f 0320 	mov.w	r3, #32
   1727a:	f3ef 8611 	mrs	r6, BASEPRI
   1727e:	f383 8811 	msr	BASEPRI, r3
   17282:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   17286:	6823      	ldr	r3, [r4, #0]
   17288:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1728a:	429c      	cmp	r4, r3
   1728c:	d007      	beq.n	1729e <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1728e:	b133      	cbz	r3, 1729e <z_impl_k_mutex_lock+0xb6>
   17290:	f993 300e 	ldrsb.w	r3, [r3, #14]
   17294:	4299      	cmp	r1, r3
   17296:	bfa8      	it	ge
   17298:	4619      	movge	r1, r3
   1729a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1729e:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   172a0:	f990 300e 	ldrsb.w	r3, [r0, #14]
   172a4:	4299      	cmp	r1, r3
   172a6:	d109      	bne.n	172bc <z_impl_k_mutex_lock+0xd4>
	if (resched) {
   172a8:	b16d      	cbz	r5, 172c6 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   172aa:	480a      	ldr	r0, [pc, #40]	; (172d4 <z_impl_k_mutex_lock+0xec>)
   172ac:	4631      	mov	r1, r6
   172ae:	f000 faef 	bl	17890 <z_reschedule>
	return -EAGAIN;
   172b2:	f06f 000a 	mvn.w	r0, #10
   172b6:	e7c2      	b.n	1723e <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   172b8:	2500      	movs	r5, #0
   172ba:	e7d3      	b.n	17264 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
   172bc:	f000 fcde 	bl	17c7c <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   172c0:	2800      	cmp	r0, #0
   172c2:	d1f2      	bne.n	172aa <z_impl_k_mutex_lock+0xc2>
   172c4:	e7f0      	b.n	172a8 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
   172c6:	f386 8811 	msr	BASEPRI, r6
   172ca:	f3bf 8f6f 	isb	sy
   172ce:	e7f0      	b.n	172b2 <z_impl_k_mutex_lock+0xca>
   172d0:	20002df8 	.word	0x20002df8
   172d4:	2000344f 	.word	0x2000344f

000172d8 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   172d8:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   172da:	6883      	ldr	r3, [r0, #8]
{
   172dc:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   172de:	2b00      	cmp	r3, #0
   172e0:	d036      	beq.n	17350 <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   172e2:	4a1e      	ldr	r2, [pc, #120]	; (1735c <z_impl_k_mutex_unlock+0x84>)
   172e4:	6892      	ldr	r2, [r2, #8]
   172e6:	4293      	cmp	r3, r2
   172e8:	d135      	bne.n	17356 <z_impl_k_mutex_unlock+0x7e>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   172ea:	7bda      	ldrb	r2, [r3, #15]
   172ec:	3a01      	subs	r2, #1
   172ee:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   172f0:	68c3      	ldr	r3, [r0, #12]
   172f2:	2b01      	cmp	r3, #1
   172f4:	d005      	beq.n	17302 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   172f6:	3b01      	subs	r3, #1
   172f8:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   172fa:	f000 fbcd 	bl	17a98 <k_sched_unlock>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   172fe:	2000      	movs	r0, #0
}
   17300:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   17302:	f04f 0320 	mov.w	r3, #32
   17306:	f3ef 8511 	mrs	r5, BASEPRI
   1730a:	f383 8811 	msr	BASEPRI, r3
   1730e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   17312:	6901      	ldr	r1, [r0, #16]
   17314:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   17316:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1731a:	4299      	cmp	r1, r3
   1731c:	d001      	beq.n	17322 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   1731e:	f000 fcad 	bl	17c7c <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   17322:	4620      	mov	r0, r4
   17324:	f006 fd69 	bl	1ddfa <z_unpend_first_thread>
	mutex->owner = new_owner;
   17328:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1732a:	b158      	cbz	r0, 17344 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
   1732c:	f990 200e 	ldrsb.w	r2, [r0, #14]
   17330:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   17332:	2200      	movs	r2, #0
   17334:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   17336:	f006 fd19 	bl	1dd6c <z_ready_thread>
		z_reschedule(&lock, key);
   1733a:	4809      	ldr	r0, [pc, #36]	; (17360 <z_impl_k_mutex_unlock+0x88>)
   1733c:	4629      	mov	r1, r5
   1733e:	f000 faa7 	bl	17890 <z_reschedule>
   17342:	e7da      	b.n	172fa <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   17344:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   17346:	f385 8811 	msr	BASEPRI, r5
   1734a:	f3bf 8f6f 	isb	sy
   1734e:	e7d4      	b.n	172fa <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   17350:	f06f 0015 	mvn.w	r0, #21
   17354:	e7d4      	b.n	17300 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   17356:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1735a:	e7d1      	b.n	17300 <z_impl_k_mutex_unlock+0x28>
   1735c:	20002df8 	.word	0x20002df8
   17360:	2000344f 	.word	0x2000344f

00017364 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   17364:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17366:	4616      	mov	r6, r2
   17368:	461f      	mov	r7, r3
	__asm__ volatile(
   1736a:	f04f 0320 	mov.w	r3, #32
   1736e:	f3ef 8511 	mrs	r5, BASEPRI
   17372:	f383 8811 	msr	BASEPRI, r3
   17376:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   1737a:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1737c:	b19c      	cbz	r4, 173a6 <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1737e:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   17380:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   17382:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   17386:	4294      	cmp	r4, r2
	list->head = node;
   17388:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1738a:	bf08      	it	eq
   1738c:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1738e:	2101      	movs	r1, #1
   17390:	4620      	mov	r0, r4
   17392:	f006 fade 	bl	1d952 <z_queue_node_peek>
   17396:	4604      	mov	r4, r0
	__asm__ volatile(
   17398:	f385 8811 	msr	BASEPRI, r5
   1739c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   173a0:	4620      	mov	r0, r4
   173a2:	b003      	add	sp, #12
   173a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   173a6:	ea56 0307 	orrs.w	r3, r6, r7
   173aa:	d0f5      	beq.n	17398 <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   173ac:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   173b0:	e9cd 6700 	strd	r6, r7, [sp]
   173b4:	4629      	mov	r1, r5
   173b6:	4610      	mov	r0, r2
   173b8:	f000 faee 	bl	17998 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   173bc:	2800      	cmp	r0, #0
   173be:	d1ef      	bne.n	173a0 <z_impl_k_queue_get+0x3c>
   173c0:	4b01      	ldr	r3, [pc, #4]	; (173c8 <z_impl_k_queue_get+0x64>)
   173c2:	689b      	ldr	r3, [r3, #8]
   173c4:	695c      	ldr	r4, [r3, #20]
   173c6:	e7eb      	b.n	173a0 <z_impl_k_queue_get+0x3c>
   173c8:	20002df8 	.word	0x20002df8

000173cc <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   173cc:	b538      	push	{r3, r4, r5, lr}
   173ce:	4604      	mov	r4, r0
	__asm__ volatile(
   173d0:	f04f 0320 	mov.w	r3, #32
   173d4:	f3ef 8511 	mrs	r5, BASEPRI
   173d8:	f383 8811 	msr	BASEPRI, r3
   173dc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   173e0:	f006 fd0b 	bl	1ddfa <z_unpend_first_thread>

	if (thread != NULL) {
   173e4:	b148      	cbz	r0, 173fa <z_impl_k_sem_give+0x2e>
   173e6:	2200      	movs	r2, #0
   173e8:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   173ea:	f006 fcbf 	bl	1dd6c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   173ee:	4629      	mov	r1, r5
   173f0:	4808      	ldr	r0, [pc, #32]	; (17414 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   173f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   173f6:	f000 ba4b 	b.w	17890 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   173fa:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   173fe:	429a      	cmp	r2, r3
   17400:	bf18      	it	ne
   17402:	3301      	addne	r3, #1
   17404:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   17406:	2102      	movs	r1, #2
   17408:	f104 0010 	add.w	r0, r4, #16
   1740c:	f006 fe42 	bl	1e094 <z_handle_obj_poll_events>
}
   17410:	e7ed      	b.n	173ee <z_impl_k_sem_give+0x22>
   17412:	bf00      	nop
   17414:	2000344f 	.word	0x2000344f

00017418 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   17418:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1741a:	4614      	mov	r4, r2
   1741c:	461d      	mov	r5, r3
   1741e:	f04f 0320 	mov.w	r3, #32
   17422:	f3ef 8111 	mrs	r1, BASEPRI
   17426:	f383 8811 	msr	BASEPRI, r3
   1742a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1742e:	6883      	ldr	r3, [r0, #8]
   17430:	b143      	cbz	r3, 17444 <z_impl_k_sem_take+0x2c>
		sem->count--;
   17432:	3b01      	subs	r3, #1
   17434:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   17436:	f381 8811 	msr	BASEPRI, r1
   1743a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1743e:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   17440:	b003      	add	sp, #12
   17442:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   17444:	ea54 0305 	orrs.w	r3, r4, r5
   17448:	d106      	bne.n	17458 <z_impl_k_sem_take+0x40>
   1744a:	f381 8811 	msr	BASEPRI, r1
   1744e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   17452:	f06f 000f 	mvn.w	r0, #15
   17456:	e7f3      	b.n	17440 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   17458:	4602      	mov	r2, r0
   1745a:	e9cd 4500 	strd	r4, r5, [sp]
   1745e:	4802      	ldr	r0, [pc, #8]	; (17468 <z_impl_k_sem_take+0x50>)
   17460:	f000 fa9a 	bl	17998 <z_pend_curr>
	return ret;
   17464:	e7ec      	b.n	17440 <z_impl_k_sem_take+0x28>
   17466:	bf00      	nop
   17468:	2000344f 	.word	0x2000344f

0001746c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1746c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1746e:	4b09      	ldr	r3, [pc, #36]	; (17494 <k_sys_work_q_init+0x28>)
   17470:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   17472:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   17474:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   17476:	9300      	str	r3, [sp, #0]
   17478:	4907      	ldr	r1, [pc, #28]	; (17498 <k_sys_work_q_init+0x2c>)
   1747a:	4808      	ldr	r0, [pc, #32]	; (1749c <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   1747c:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   17480:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17484:	f44f 6200 	mov.w	r2, #2048	; 0x800
   17488:	f000 f91c 	bl	176c4 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1748c:	4620      	mov	r0, r4
   1748e:	b004      	add	sp, #16
   17490:	bd10      	pop	{r4, pc}
   17492:	bf00      	nop
   17494:	00022783 	.word	0x00022783
   17498:	20005520 	.word	0x20005520
   1749c:	200017e0 	.word	0x200017e0

000174a0 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   174a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   174a4:	4e4b      	ldr	r6, [pc, #300]	; (175d4 <work_queue_main+0x134>)
{
   174a6:	b085      	sub	sp, #20
   174a8:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   174aa:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   174ae:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
   174b2:	f04f 0320 	mov.w	r3, #32
   174b6:	f3ef 8711 	mrs	r7, BASEPRI
   174ba:	f383 8811 	msr	BASEPRI, r3
   174be:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   174c2:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	return list->head;
   174c6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
Z_GENLIST_GET(slist, snode)
   174ca:	b985      	cbnz	r5, 174ee <work_queue_main+0x4e>
	*flagp &= ~BIT(bit);
   174cc:	f023 0204 	bic.w	r2, r3, #4
		} else if (flag_test_and_clear(&queue->flags,
   174d0:	075d      	lsls	r5, r3, #29
	*flagp &= ~BIT(bit);
   174d2:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
   174d6:	d433      	bmi.n	17540 <work_queue_main+0xa0>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   174d8:	2300      	movs	r3, #0
   174da:	e9cd 8900 	strd	r8, r9, [sp]
   174de:	9302      	str	r3, [sp, #8]
   174e0:	f104 0288 	add.w	r2, r4, #136	; 0x88
   174e4:	4639      	mov	r1, r7
   174e6:	483c      	ldr	r0, [pc, #240]	; (175d8 <work_queue_main+0x138>)
   174e8:	f000 fcfc 	bl	17ee4 <z_sched_wait>
			continue;
   174ec:	e7e1      	b.n	174b2 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   174ee:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   174f2:	6829      	ldr	r1, [r5, #0]
	list->head = node;
   174f4:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   174f8:	4295      	cmp	r5, r2
   174fa:	d101      	bne.n	17500 <work_queue_main+0x60>
	list->tail = node;
   174fc:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   17500:	f043 0302 	orr.w	r3, r3, #2
   17504:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   17508:	68eb      	ldr	r3, [r5, #12]
   1750a:	f023 0304 	bic.w	r3, r3, #4
   1750e:	f043 0301 	orr.w	r3, r3, #1
   17512:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   17514:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   17516:	f387 8811 	msr	BASEPRI, r7
   1751a:	f3bf 8f6f 	isb	sy

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
			handler(work);
   1751e:	4628      	mov	r0, r5
   17520:	4798      	blx	r3
	__asm__ volatile(
   17522:	f04f 0320 	mov.w	r3, #32
   17526:	f3ef 8b11 	mrs	fp, BASEPRI
   1752a:	f383 8811 	msr	BASEPRI, r3
   1752e:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   17532:	68eb      	ldr	r3, [r5, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   17534:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   17536:	f023 0201 	bic.w	r2, r3, #1
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1753a:	d40b      	bmi.n	17554 <work_queue_main+0xb4>
	*flagp &= ~BIT(bit);
   1753c:	60ea      	str	r2, [r5, #12]
   1753e:	e00e      	b.n	1755e <work_queue_main+0xbe>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   17540:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   17544:	2200      	movs	r2, #0
   17546:	2101      	movs	r1, #1
   17548:	4628      	mov	r0, r5
   1754a:	f006 fc7e 	bl	1de4a <z_sched_wake>
   1754e:	2800      	cmp	r0, #0
   17550:	d1f8      	bne.n	17544 <work_queue_main+0xa4>
   17552:	e7c1      	b.n	174d8 <work_queue_main+0x38>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   17554:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   17556:	f023 0303 	bic.w	r3, r3, #3
   1755a:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1755c:	b970      	cbnz	r0, 1757c <work_queue_main+0xdc>
	*flagp &= ~BIT(bit);
   1755e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   17562:	f023 0302 	bic.w	r3, r3, #2
   17566:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   1756a:	f38b 8811 	msr	BASEPRI, fp
   1756e:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
   17572:	05d8      	lsls	r0, r3, #23
   17574:	d49d      	bmi.n	174b2 <work_queue_main+0x12>
	z_impl_k_yield();
   17576:	f000 fbd9 	bl	17d2c <z_impl_k_yield>
}
   1757a:	e79a      	b.n	174b2 <work_queue_main+0x12>
	return node->next;
   1757c:	6807      	ldr	r7, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1757e:	f04f 0a00 	mov.w	sl, #0
   17582:	2f00      	cmp	r7, #0
   17584:	bf38      	it	cc
   17586:	2700      	movcc	r7, #0
	parent->next = child;
   17588:	4653      	mov	r3, sl
		if (wc->work == work) {
   1758a:	6842      	ldr	r2, [r0, #4]
   1758c:	4295      	cmp	r5, r2
   1758e:	4601      	mov	r1, r0
   17590:	d10e      	bne.n	175b0 <work_queue_main+0x110>
Z_GENLIST_REMOVE(slist, snode)
   17592:	6801      	ldr	r1, [r0, #0]
   17594:	f1ba 0f00 	cmp.w	sl, #0
   17598:	d114      	bne.n	175c4 <work_queue_main+0x124>
   1759a:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   1759c:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   1759e:	4290      	cmp	r0, r2
   175a0:	d100      	bne.n	175a4 <work_queue_main+0x104>
	list->tail = node;
   175a2:	6071      	str	r1, [r6, #4]
	parent->next = child;
   175a4:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   175a8:	f7ff ff10 	bl	173cc <z_impl_k_sem_give>
}
   175ac:	4651      	mov	r1, sl
   175ae:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   175b0:	2f00      	cmp	r7, #0
   175b2:	d0d4      	beq.n	1755e <work_queue_main+0xbe>
	return node->next;
   175b4:	683a      	ldr	r2, [r7, #0]
   175b6:	2a00      	cmp	r2, #0
   175b8:	bf38      	it	cc
   175ba:	2200      	movcc	r2, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   175bc:	4638      	mov	r0, r7
   175be:	468a      	mov	sl, r1
   175c0:	4617      	mov	r7, r2
   175c2:	e7e2      	b.n	1758a <work_queue_main+0xea>
	parent->next = child;
   175c4:	f8ca 1000 	str.w	r1, [sl]
Z_GENLIST_REMOVE(slist, snode)
   175c8:	6872      	ldr	r2, [r6, #4]
   175ca:	4290      	cmp	r0, r2
	list->tail = node;
   175cc:	bf08      	it	eq
   175ce:	f8c6 a004 	streq.w	sl, [r6, #4]
}
   175d2:	e7e7      	b.n	175a4 <work_queue_main+0x104>
   175d4:	20002e28 	.word	0x20002e28
   175d8:	2000344f 	.word	0x2000344f

000175dc <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   175dc:	68c3      	ldr	r3, [r0, #12]
{
   175de:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   175e0:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   175e4:	079b      	lsls	r3, r3, #30
{
   175e6:	4605      	mov	r5, r0
   175e8:	460c      	mov	r4, r1
	if (ret) {
   175ea:	d50d      	bpl.n	17608 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   175ec:	2201      	movs	r2, #1
   175ee:	2100      	movs	r1, #0
   175f0:	f104 0008 	add.w	r0, r4, #8
   175f4:	f006 fa36 	bl	1da64 <z_impl_k_sem_init>
	parent->next = child;
   175f8:	2300      	movs	r3, #0
   175fa:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   175fc:	4b05      	ldr	r3, [pc, #20]	; (17614 <cancel_sync_locked+0x38>)
	canceler->work = work;
   175fe:	6065      	str	r5, [r4, #4]
   17600:	685a      	ldr	r2, [r3, #4]
   17602:	b91a      	cbnz	r2, 1760c <cancel_sync_locked+0x30>
	list->head = node;
   17604:	e9c3 4400 	strd	r4, r4, [r3]
}
   17608:	4630      	mov	r0, r6
   1760a:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   1760c:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1760e:	605c      	str	r4, [r3, #4]
}
   17610:	e7fa      	b.n	17608 <cancel_sync_locked+0x2c>
   17612:	bf00      	nop
   17614:	20002e28 	.word	0x20002e28

00017618 <submit_to_queue_locked>:
{
   17618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1761a:	68c3      	ldr	r3, [r0, #12]
   1761c:	079a      	lsls	r2, r3, #30
{
   1761e:	4604      	mov	r4, r0
   17620:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   17622:	f3c3 0540 	ubfx	r5, r3, #1, #1
   17626:	d41f      	bmi.n	17668 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   17628:	075f      	lsls	r7, r3, #29
   1762a:	d41f      	bmi.n	1766c <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   1762c:	680a      	ldr	r2, [r1, #0]
   1762e:	b90a      	cbnz	r2, 17634 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   17630:	6882      	ldr	r2, [r0, #8]
   17632:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   17634:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   17636:	bf44      	itt	mi
   17638:	68a3      	ldrmi	r3, [r4, #8]
   1763a:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   1763c:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   1763e:	bf4c      	ite	mi
   17640:	2502      	movmi	r5, #2
		ret = 1;
   17642:	2501      	movpl	r5, #1
	if (queue == NULL) {
   17644:	b37f      	cbz	r7, 176a6 <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   17646:	4b1b      	ldr	r3, [pc, #108]	; (176b4 <submit_to_queue_locked+0x9c>)
   17648:	689b      	ldr	r3, [r3, #8]
   1764a:	42bb      	cmp	r3, r7
   1764c:	d111      	bne.n	17672 <submit_to_queue_locked+0x5a>
   1764e:	f006 f908 	bl	1d862 <k_is_in_isr>
   17652:	f080 0001 	eor.w	r0, r0, #1
   17656:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
   17658:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1765c:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1765e:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   17662:	d523      	bpl.n	176ac <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   17664:	b13a      	cbz	r2, 17676 <submit_to_queue_locked+0x5e>
   17666:	b940      	cbnz	r0, 1767a <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   17668:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   1766c:	2300      	movs	r3, #0
   1766e:	6033      	str	r3, [r6, #0]
	return ret;
   17670:	e013      	b.n	1769a <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   17672:	2000      	movs	r0, #0
   17674:	e7f0      	b.n	17658 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   17676:	071b      	lsls	r3, r3, #28
   17678:	d4f6      	bmi.n	17668 <submit_to_queue_locked+0x50>
	parent->next = child;
   1767a:	2300      	movs	r3, #0
   1767c:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1767e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   17682:	b963      	cbnz	r3, 1769e <submit_to_queue_locked+0x86>
	list->head = node;
   17684:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   17688:	4638      	mov	r0, r7
   1768a:	f006 f9fb 	bl	1da84 <notify_queue_locked>
	*flagp |= BIT(bit);
   1768e:	68e3      	ldr	r3, [r4, #12]
   17690:	f043 0304 	orr.w	r3, r3, #4
   17694:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   17696:	6833      	ldr	r3, [r6, #0]
   17698:	60a3      	str	r3, [r4, #8]
}
   1769a:	4628      	mov	r0, r5
   1769c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   1769e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   176a0:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   176a4:	e7f0      	b.n	17688 <submit_to_queue_locked+0x70>
		return -EINVAL;
   176a6:	f06f 0515 	mvn.w	r5, #21
   176aa:	e7df      	b.n	1766c <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   176ac:	f06f 0512 	mvn.w	r5, #18
   176b0:	e7dc      	b.n	1766c <submit_to_queue_locked+0x54>
   176b2:	bf00      	nop
   176b4:	20002df8 	.word	0x20002df8

000176b8 <k_work_submit>:
{
   176b8:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   176ba:	4801      	ldr	r0, [pc, #4]	; (176c0 <k_work_submit+0x8>)
   176bc:	f006 ba52 	b.w	1db64 <k_work_submit_to_queue>
   176c0:	200017e0 	.word	0x200017e0

000176c4 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   176c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   176c6:	b089      	sub	sp, #36	; 0x24
   176c8:	4604      	mov	r4, r0
	list->head = NULL;
   176ca:	2000      	movs	r0, #0
	list->tail = NULL;
   176cc:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   176d0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   176d2:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   176d6:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   176da:	f104 0090 	add.w	r0, r4, #144	; 0x90
   176de:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   176e2:	b31d      	cbz	r5, 1772c <k_work_queue_start+0x68>
   176e4:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   176e6:	2800      	cmp	r0, #0
   176e8:	f240 1001 	movw	r0, #257	; 0x101
   176ec:	bf08      	it	eq
   176ee:	2001      	moveq	r0, #1
	*flagp = flags;
   176f0:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   176f4:	2000      	movs	r0, #0
   176f6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   176fa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   176fe:	e9cd 3003 	strd	r3, r0, [sp, #12]
   17702:	e9cd 0001 	strd	r0, r0, [sp, #4]
   17706:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1770a:	4b09      	ldr	r3, [pc, #36]	; (17730 <k_work_queue_start+0x6c>)
   1770c:	9400      	str	r4, [sp, #0]
   1770e:	4620      	mov	r0, r4
   17710:	f7ff fcca 	bl	170a8 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   17714:	b125      	cbz	r5, 17720 <k_work_queue_start+0x5c>
   17716:	6829      	ldr	r1, [r5, #0]
   17718:	b111      	cbz	r1, 17720 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   1771a:	4620      	mov	r0, r4
   1771c:	f006 f8a7 	bl	1d86e <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   17720:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   17722:	b009      	add	sp, #36	; 0x24
   17724:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   17728:	f006 b8a6 	b.w	1d878 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1772c:	2001      	movs	r0, #1
   1772e:	e7df      	b.n	176f0 <k_work_queue_start+0x2c>
   17730:	000174a1 	.word	0x000174a1

00017734 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   17734:	b573      	push	{r0, r1, r4, r5, r6, lr}
   17736:	4614      	mov	r4, r2
   17738:	9001      	str	r0, [sp, #4]
   1773a:	461d      	mov	r5, r3
   1773c:	4608      	mov	r0, r1
	__asm__ volatile(
   1773e:	f04f 0120 	mov.w	r1, #32
   17742:	f3ef 8611 	mrs	r6, BASEPRI
   17746:	f381 8811 	msr	BASEPRI, r1
   1774a:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   1774e:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   17750:	f011 0f0e 	tst.w	r1, #14
   17754:	d115      	bne.n	17782 <k_work_schedule_for_queue+0x4e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   17756:	432c      	orrs	r4, r5
   17758:	d108      	bne.n	1776c <k_work_schedule_for_queue+0x38>
		return submit_to_queue_locked(work, queuep);
   1775a:	a901      	add	r1, sp, #4
   1775c:	f7ff ff5c 	bl	17618 <submit_to_queue_locked>
	__asm__ volatile(
   17760:	f386 8811 	msr	BASEPRI, r6
   17764:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   17768:	b002      	add	sp, #8
   1776a:	bd70      	pop	{r4, r5, r6, pc}
	*flagp |= BIT(bit);
   1776c:	f041 0108 	orr.w	r1, r1, #8
   17770:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   17772:	9901      	ldr	r1, [sp, #4]
   17774:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   17776:	3010      	adds	r0, #16
   17778:	4903      	ldr	r1, [pc, #12]	; (17788 <k_work_schedule_for_queue+0x54>)
   1777a:	f000 fc55 	bl	18028 <z_add_timeout>
	return ret;
   1777e:	2001      	movs	r0, #1
   17780:	e7ee      	b.n	17760 <k_work_schedule_for_queue+0x2c>
	int ret = 0;
   17782:	2000      	movs	r0, #0
   17784:	e7ec      	b.n	17760 <k_work_schedule_for_queue+0x2c>
   17786:	bf00      	nop
   17788:	0001db15 	.word	0x0001db15

0001778c <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   1778c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   1778e:	4801      	ldr	r0, [pc, #4]	; (17794 <k_work_schedule+0x8>)
   17790:	f7ff bfd0 	b.w	17734 <k_work_schedule_for_queue>
   17794:	200017e0 	.word	0x200017e0

00017798 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   17798:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1779a:	460c      	mov	r4, r1
   1779c:	9001      	str	r0, [sp, #4]
   1779e:	4616      	mov	r6, r2
   177a0:	461f      	mov	r7, r3
	__asm__ volatile(
   177a2:	f04f 0320 	mov.w	r3, #32
   177a6:	f3ef 8511 	mrs	r5, BASEPRI
   177aa:	f383 8811 	msr	BASEPRI, r3
   177ae:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   177b2:	4608      	mov	r0, r1
   177b4:	f006 f96d 	bl	1da92 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   177b8:	ea56 0307 	orrs.w	r3, r6, r7
   177bc:	d109      	bne.n	177d2 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   177be:	a901      	add	r1, sp, #4
   177c0:	4620      	mov	r0, r4
   177c2:	f7ff ff29 	bl	17618 <submit_to_queue_locked>
	__asm__ volatile(
   177c6:	f385 8811 	msr	BASEPRI, r5
   177ca:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   177ce:	b003      	add	sp, #12
   177d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   177d2:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   177d4:	4906      	ldr	r1, [pc, #24]	; (177f0 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   177d6:	f043 0308 	orr.w	r3, r3, #8
   177da:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   177dc:	9b01      	ldr	r3, [sp, #4]
   177de:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   177e0:	f104 0010 	add.w	r0, r4, #16
   177e4:	4632      	mov	r2, r6
   177e6:	463b      	mov	r3, r7
   177e8:	f000 fc1e 	bl	18028 <z_add_timeout>
	return ret;
   177ec:	2001      	movs	r0, #1
   177ee:	e7ea      	b.n	177c6 <k_work_reschedule_for_queue+0x2e>
   177f0:	0001db15 	.word	0x0001db15

000177f4 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   177f4:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   177f6:	4801      	ldr	r0, [pc, #4]	; (177fc <k_work_reschedule+0x8>)
   177f8:	f7ff bfce 	b.w	17798 <k_work_reschedule_for_queue>
   177fc:	200017e0 	.word	0x200017e0

00017800 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   17800:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   17802:	4c08      	ldr	r4, [pc, #32]	; (17824 <z_reset_time_slice+0x24>)
   17804:	6823      	ldr	r3, [r4, #0]
   17806:	b15b      	cbz	r3, 17820 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   17808:	f7eb fdc4 	bl	3394 <sys_clock_elapsed>
   1780c:	4603      	mov	r3, r0
   1780e:	6820      	ldr	r0, [r4, #0]
   17810:	4a05      	ldr	r2, [pc, #20]	; (17828 <z_reset_time_slice+0x28>)
   17812:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   17814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   17818:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1781a:	2100      	movs	r1, #0
   1781c:	f006 bb68 	b.w	1def0 <z_set_timeout_expiry>
}
   17820:	bd10      	pop	{r4, pc}
   17822:	bf00      	nop
   17824:	20002e38 	.word	0x20002e38
   17828:	20002df8 	.word	0x20002df8

0001782c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1782c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1782e:	4604      	mov	r4, r0
   17830:	460d      	mov	r5, r1
	__asm__ volatile(
   17832:	f04f 0320 	mov.w	r3, #32
   17836:	f3ef 8611 	mrs	r6, BASEPRI
   1783a:	f383 8811 	msr	BASEPRI, r3
   1783e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   17842:	4b10      	ldr	r3, [pc, #64]	; (17884 <k_sched_time_slice_set+0x58>)
   17844:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   17846:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1784a:	f240 30e7 	movw	r0, #999	; 0x3e7
   1784e:	2100      	movs	r1, #0
   17850:	611a      	str	r2, [r3, #16]
   17852:	fbe7 0104 	umlal	r0, r1, r7, r4
   17856:	2300      	movs	r3, #0
   17858:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1785c:	f7e8 fc40 	bl	e0 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   17860:	2c00      	cmp	r4, #0
   17862:	4b09      	ldr	r3, [pc, #36]	; (17888 <k_sched_time_slice_set+0x5c>)
   17864:	dc09      	bgt.n	1787a <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   17866:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   17868:	4b08      	ldr	r3, [pc, #32]	; (1788c <k_sched_time_slice_set+0x60>)
   1786a:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   1786c:	f7ff ffc8 	bl	17800 <z_reset_time_slice>
	__asm__ volatile(
   17870:	f386 8811 	msr	BASEPRI, r6
   17874:	f3bf 8f6f 	isb	sy
	}
}
   17878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   1787a:	2802      	cmp	r0, #2
   1787c:	bfb8      	it	lt
   1787e:	2002      	movlt	r0, #2
   17880:	e7f1      	b.n	17866 <k_sched_time_slice_set+0x3a>
   17882:	bf00      	nop
   17884:	20002df8 	.word	0x20002df8
   17888:	20002e38 	.word	0x20002e38
   1788c:	20002e34 	.word	0x20002e34

00017890 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   17890:	b949      	cbnz	r1, 178a6 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   17892:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   17896:	b930      	cbnz	r0, 178a6 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   17898:	4b05      	ldr	r3, [pc, #20]	; (178b0 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   1789a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1789c:	689b      	ldr	r3, [r3, #8]
   1789e:	429a      	cmp	r2, r3
   178a0:	d001      	beq.n	178a6 <z_reschedule+0x16>
	ret = arch_swap(key);
   178a2:	f7eb be5b 	b.w	355c <arch_swap>
   178a6:	f381 8811 	msr	BASEPRI, r1
   178aa:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   178ae:	4770      	bx	lr
   178b0:	20002df8 	.word	0x20002df8

000178b4 <k_sched_lock>:
	__asm__ volatile(
   178b4:	f04f 0320 	mov.w	r3, #32
   178b8:	f3ef 8111 	mrs	r1, BASEPRI
   178bc:	f383 8811 	msr	BASEPRI, r3
   178c0:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   178c4:	4b04      	ldr	r3, [pc, #16]	; (178d8 <k_sched_lock+0x24>)
   178c6:	689a      	ldr	r2, [r3, #8]
   178c8:	7bd3      	ldrb	r3, [r2, #15]
   178ca:	3b01      	subs	r3, #1
   178cc:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   178ce:	f381 8811 	msr	BASEPRI, r1
   178d2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   178d6:	4770      	bx	lr
   178d8:	20002df8 	.word	0x20002df8

000178dc <update_cache>:
{
   178dc:	b538      	push	{r3, r4, r5, lr}
   178de:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
   178e0:	480c      	ldr	r0, [pc, #48]	; (17914 <update_cache+0x38>)
   178e2:	4d0d      	ldr	r5, [pc, #52]	; (17918 <update_cache+0x3c>)
   178e4:	f006 fa0b 	bl	1dcfe <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   178e8:	4604      	mov	r4, r0
   178ea:	b900      	cbnz	r0, 178ee <update_cache+0x12>
   178ec:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   178ee:	68ab      	ldr	r3, [r5, #8]
   178f0:	b94a      	cbnz	r2, 17906 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   178f2:	7b5a      	ldrb	r2, [r3, #13]
   178f4:	06d2      	lsls	r2, r2, #27
   178f6:	d106      	bne.n	17906 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   178f8:	69a2      	ldr	r2, [r4, #24]
   178fa:	b922      	cbnz	r2, 17906 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   178fc:	89da      	ldrh	r2, [r3, #14]
   178fe:	2a7f      	cmp	r2, #127	; 0x7f
   17900:	d901      	bls.n	17906 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   17902:	626b      	str	r3, [r5, #36]	; 0x24
}
   17904:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   17906:	429c      	cmp	r4, r3
   17908:	d001      	beq.n	1790e <update_cache+0x32>
			z_reset_time_slice();
   1790a:	f7ff ff79 	bl	17800 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1790e:	626c      	str	r4, [r5, #36]	; 0x24
}
   17910:	e7f8      	b.n	17904 <update_cache+0x28>
   17912:	bf00      	nop
   17914:	20002e20 	.word	0x20002e20
   17918:	20002df8 	.word	0x20002df8

0001791c <unready_thread>:
{
   1791c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1791e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   17922:	7b43      	ldrb	r3, [r0, #13]
   17924:	2a00      	cmp	r2, #0
{
   17926:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   17928:	da04      	bge.n	17934 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1792a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1792e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   17930:	f006 f999 	bl	1dc66 <sys_dlist_remove>
	update_cache(thread == _current);
   17934:	4b04      	ldr	r3, [pc, #16]	; (17948 <unready_thread+0x2c>)
   17936:	6898      	ldr	r0, [r3, #8]
   17938:	1a43      	subs	r3, r0, r1
   1793a:	4258      	negs	r0, r3
   1793c:	4158      	adcs	r0, r3
}
   1793e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   17942:	f7ff bfcb 	b.w	178dc <update_cache>
   17946:	bf00      	nop
   17948:	20002df8 	.word	0x20002df8

0001794c <pend>:
{
   1794c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17950:	4606      	mov	r6, r0
   17952:	4614      	mov	r4, r2
   17954:	461d      	mov	r5, r3
	__asm__ volatile(
   17956:	f04f 0320 	mov.w	r3, #32
   1795a:	f3ef 8711 	mrs	r7, BASEPRI
   1795e:	f383 8811 	msr	BASEPRI, r3
   17962:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   17966:	f006 f9d4 	bl	1dd12 <add_to_waitq_locked>
	__asm__ volatile(
   1796a:	f387 8811 	msr	BASEPRI, r7
   1796e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   17972:	1c6b      	adds	r3, r5, #1
   17974:	bf08      	it	eq
   17976:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   1797a:	d008      	beq.n	1798e <pend+0x42>
   1797c:	4622      	mov	r2, r4
   1797e:	462b      	mov	r3, r5
   17980:	f106 0018 	add.w	r0, r6, #24
   17984:	4903      	ldr	r1, [pc, #12]	; (17994 <pend+0x48>)
}
   17986:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1798a:	f000 bb4d 	b.w	18028 <z_add_timeout>
   1798e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17992:	bf00      	nop
   17994:	0001dd8d 	.word	0x0001dd8d

00017998 <z_pend_curr>:
{
   17998:	b510      	push	{r4, lr}
	pending_current = _current;
   1799a:	4b07      	ldr	r3, [pc, #28]	; (179b8 <z_pend_curr+0x20>)
   1799c:	6898      	ldr	r0, [r3, #8]
   1799e:	4b07      	ldr	r3, [pc, #28]	; (179bc <z_pend_curr+0x24>)
{
   179a0:	460c      	mov	r4, r1
	pending_current = _current;
   179a2:	6018      	str	r0, [r3, #0]
{
   179a4:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   179a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   179aa:	f7ff ffcf 	bl	1794c <pend>
   179ae:	4620      	mov	r0, r4
}
   179b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   179b4:	f7eb bdd2 	b.w	355c <arch_swap>
   179b8:	20002df8 	.word	0x20002df8
   179bc:	20002e30 	.word	0x20002e30

000179c0 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
   179c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   179c4:	4605      	mov	r5, r0
   179c6:	460f      	mov	r7, r1
		return 0;
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);

	expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   179c8:	f006 faac 	bl	1df24 <sys_clock_tick_get_32>
   179cc:	4604      	mov	r4, r0
	__asm__ volatile(
   179ce:	f04f 0320 	mov.w	r3, #32
   179d2:	f3ef 8811 	mrs	r8, BASEPRI
   179d6:	f383 8811 	msr	BASEPRI, r3
   179da:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   179de:	4e12      	ldr	r6, [pc, #72]	; (17a28 <z_tick_sleep.part.0+0x68>)
   179e0:	4b12      	ldr	r3, [pc, #72]	; (17a2c <z_tick_sleep.part.0+0x6c>)
   179e2:	68b0      	ldr	r0, [r6, #8]
   179e4:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   179e6:	f7ff ff99 	bl	1791c <unready_thread>
	z_add_thread_timeout(_current, timeout);
   179ea:	68b0      	ldr	r0, [r6, #8]
   179ec:	4910      	ldr	r1, [pc, #64]	; (17a30 <z_tick_sleep.part.0+0x70>)
   179ee:	462a      	mov	r2, r5
   179f0:	463b      	mov	r3, r7
   179f2:	3018      	adds	r0, #24
   179f4:	f000 fb18 	bl	18028 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   179f8:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   179fa:	7b53      	ldrb	r3, [r2, #13]
   179fc:	f043 0310 	orr.w	r3, r3, #16
   17a00:	7353      	strb	r3, [r2, #13]
   17a02:	4640      	mov	r0, r8
   17a04:	f7eb fdaa 	bl	355c <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   17a08:	f006 fa8c 	bl	1df24 <sys_clock_tick_get_32>
	expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   17a0c:	442c      	add	r4, r5
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   17a0e:	1a24      	subs	r4, r4, r0
   17a10:	f04f 0500 	mov.w	r5, #0
   17a14:	f165 0500 	sbc.w	r5, r5, #0
   17a18:	2c00      	cmp	r4, #0
   17a1a:	f175 0300 	sbcs.w	r3, r5, #0
   17a1e:	bfb8      	it	lt
   17a20:	2400      	movlt	r4, #0
		return ticks;
	}
#endif

	return 0;
}
   17a22:	4620      	mov	r0, r4
   17a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17a28:	20002df8 	.word	0x20002df8
   17a2c:	20002e30 	.word	0x20002e30
   17a30:	0001dd8d 	.word	0x0001dd8d

00017a34 <z_impl_k_thread_suspend>:
{
   17a34:	b570      	push	{r4, r5, r6, lr}
   17a36:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   17a38:	3018      	adds	r0, #24
   17a3a:	f006 fa23 	bl	1de84 <z_abort_timeout>
   17a3e:	f04f 0320 	mov.w	r3, #32
   17a42:	f3ef 8611 	mrs	r6, BASEPRI
   17a46:	f383 8811 	msr	BASEPRI, r3
   17a4a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   17a4e:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   17a52:	7b63      	ldrb	r3, [r4, #13]
   17a54:	2a00      	cmp	r2, #0
   17a56:	da05      	bge.n	17a64 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   17a58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   17a5c:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   17a5e:	4620      	mov	r0, r4
   17a60:	f006 f901 	bl	1dc66 <sys_dlist_remove>
		update_cache(thread == _current);
   17a64:	4d0b      	ldr	r5, [pc, #44]	; (17a94 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   17a66:	7b63      	ldrb	r3, [r4, #13]
   17a68:	68a8      	ldr	r0, [r5, #8]
   17a6a:	f043 0310 	orr.w	r3, r3, #16
   17a6e:	7363      	strb	r3, [r4, #13]
   17a70:	1b03      	subs	r3, r0, r4
   17a72:	4258      	negs	r0, r3
   17a74:	4158      	adcs	r0, r3
   17a76:	f7ff ff31 	bl	178dc <update_cache>
	__asm__ volatile(
   17a7a:	f386 8811 	msr	BASEPRI, r6
   17a7e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   17a82:	68ab      	ldr	r3, [r5, #8]
   17a84:	42a3      	cmp	r3, r4
   17a86:	d103      	bne.n	17a90 <z_impl_k_thread_suspend+0x5c>
}
   17a88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   17a8c:	f006 b92d 	b.w	1dcea <z_reschedule_unlocked>
}
   17a90:	bd70      	pop	{r4, r5, r6, pc}
   17a92:	bf00      	nop
   17a94:	20002df8 	.word	0x20002df8

00017a98 <k_sched_unlock>:
{
   17a98:	b510      	push	{r4, lr}
	__asm__ volatile(
   17a9a:	f04f 0320 	mov.w	r3, #32
   17a9e:	f3ef 8411 	mrs	r4, BASEPRI
   17aa2:	f383 8811 	msr	BASEPRI, r3
   17aa6:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   17aaa:	4b08      	ldr	r3, [pc, #32]	; (17acc <k_sched_unlock+0x34>)
   17aac:	689a      	ldr	r2, [r3, #8]
   17aae:	7bd3      	ldrb	r3, [r2, #15]
   17ab0:	3301      	adds	r3, #1
   17ab2:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   17ab4:	2000      	movs	r0, #0
   17ab6:	f7ff ff11 	bl	178dc <update_cache>
	__asm__ volatile(
   17aba:	f384 8811 	msr	BASEPRI, r4
   17abe:	f3bf 8f6f 	isb	sy
}
   17ac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   17ac6:	f006 b910 	b.w	1dcea <z_reschedule_unlocked>
   17aca:	bf00      	nop
   17acc:	20002df8 	.word	0x20002df8

00017ad0 <move_thread_to_end_of_prio_q>:
{
   17ad0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   17ad2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   17ad6:	7b43      	ldrb	r3, [r0, #13]
   17ad8:	2a00      	cmp	r2, #0
{
   17ada:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   17adc:	da04      	bge.n	17ae8 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   17ade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   17ae2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   17ae4:	f006 f8bf 	bl	1dc66 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   17ae8:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   17aea:	4a17      	ldr	r2, [pc, #92]	; (17b48 <move_thread_to_end_of_prio_q+0x78>)
   17aec:	f063 037f 	orn	r3, r3, #127	; 0x7f
   17af0:	4610      	mov	r0, r2
   17af2:	734b      	strb	r3, [r1, #13]
   17af4:	f850 3f28 	ldr.w	r3, [r0, #40]!
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   17af8:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17afa:	4283      	cmp	r3, r0
   17afc:	bf08      	it	eq
   17afe:	2300      	moveq	r3, #0
   17b00:	2b00      	cmp	r3, #0
   17b02:	bf38      	it	cc
   17b04:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17b06:	b1cb      	cbz	r3, 17b3c <move_thread_to_end_of_prio_q+0x6c>
	int32_t b1 = thread_1->base.prio;
   17b08:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   17b0c:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   17b10:	42a6      	cmp	r6, r4
   17b12:	d00f      	beq.n	17b34 <move_thread_to_end_of_prio_q+0x64>
		return b2 - b1;
   17b14:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   17b16:	2c00      	cmp	r4, #0
   17b18:	dd0c      	ble.n	17b34 <move_thread_to_end_of_prio_q+0x64>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   17b1a:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   17b1c:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   17b20:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   17b22:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   17b24:	6890      	ldr	r0, [r2, #8]
   17b26:	1a43      	subs	r3, r0, r1
   17b28:	4258      	negs	r0, r3
}
   17b2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   17b2e:	4158      	adcs	r0, r3
   17b30:	f7ff bed4 	b.w	178dc <update_cache>
	return (node == list->tail) ? NULL : node->next;
   17b34:	42ab      	cmp	r3, r5
   17b36:	d001      	beq.n	17b3c <move_thread_to_end_of_prio_q+0x6c>
   17b38:	681b      	ldr	r3, [r3, #0]
   17b3a:	e7e4      	b.n	17b06 <move_thread_to_end_of_prio_q+0x36>
	node->prev = tail;
   17b3c:	e9c1 0500 	strd	r0, r5, [r1]
	tail->next = node;
   17b40:	6029      	str	r1, [r5, #0]
	list->tail = node;
   17b42:	62d1      	str	r1, [r2, #44]	; 0x2c
}
   17b44:	e7ee      	b.n	17b24 <move_thread_to_end_of_prio_q+0x54>
   17b46:	bf00      	nop
   17b48:	20002df8 	.word	0x20002df8

00017b4c <z_time_slice>:
{
   17b4c:	b570      	push	{r4, r5, r6, lr}
   17b4e:	4601      	mov	r1, r0
	__asm__ volatile(
   17b50:	f04f 0320 	mov.w	r3, #32
   17b54:	f3ef 8411 	mrs	r4, BASEPRI
   17b58:	f383 8811 	msr	BASEPRI, r3
   17b5c:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   17b60:	4b16      	ldr	r3, [pc, #88]	; (17bbc <z_time_slice+0x70>)
   17b62:	4a17      	ldr	r2, [pc, #92]	; (17bc0 <z_time_slice+0x74>)
   17b64:	6898      	ldr	r0, [r3, #8]
   17b66:	6815      	ldr	r5, [r2, #0]
   17b68:	42a8      	cmp	r0, r5
   17b6a:	461d      	mov	r5, r3
   17b6c:	d106      	bne.n	17b7c <z_time_slice+0x30>
			z_reset_time_slice();
   17b6e:	f7ff fe47 	bl	17800 <z_reset_time_slice>
	__asm__ volatile(
   17b72:	f384 8811 	msr	BASEPRI, r4
   17b76:	f3bf 8f6f 	isb	sy
}
   17b7a:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   17b7c:	2600      	movs	r6, #0
   17b7e:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   17b80:	4a10      	ldr	r2, [pc, #64]	; (17bc4 <z_time_slice+0x78>)
   17b82:	6812      	ldr	r2, [r2, #0]
   17b84:	b1ba      	cbz	r2, 17bb6 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   17b86:	89c2      	ldrh	r2, [r0, #14]
   17b88:	2a7f      	cmp	r2, #127	; 0x7f
   17b8a:	d814      	bhi.n	17bb6 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   17b8c:	7b42      	ldrb	r2, [r0, #13]
   17b8e:	06d2      	lsls	r2, r2, #27
   17b90:	d111      	bne.n	17bb6 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   17b92:	4a0d      	ldr	r2, [pc, #52]	; (17bc8 <z_time_slice+0x7c>)
   17b94:	f990 600e 	ldrsb.w	r6, [r0, #14]
   17b98:	6812      	ldr	r2, [r2, #0]
   17b9a:	4296      	cmp	r6, r2
   17b9c:	db0b      	blt.n	17bb6 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   17b9e:	4a0b      	ldr	r2, [pc, #44]	; (17bcc <z_time_slice+0x80>)
   17ba0:	4290      	cmp	r0, r2
   17ba2:	d008      	beq.n	17bb6 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   17ba4:	691a      	ldr	r2, [r3, #16]
   17ba6:	428a      	cmp	r2, r1
   17ba8:	dc02      	bgt.n	17bb0 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   17baa:	f7ff ff91 	bl	17ad0 <move_thread_to_end_of_prio_q>
   17bae:	e7de      	b.n	17b6e <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   17bb0:	1a52      	subs	r2, r2, r1
   17bb2:	611a      	str	r2, [r3, #16]
   17bb4:	e7dd      	b.n	17b72 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   17bb6:	2300      	movs	r3, #0
   17bb8:	612b      	str	r3, [r5, #16]
   17bba:	e7da      	b.n	17b72 <z_time_slice+0x26>
   17bbc:	20002df8 	.word	0x20002df8
   17bc0:	20002e30 	.word	0x20002e30
   17bc4:	20002e38 	.word	0x20002e38
   17bc8:	20002e34 	.word	0x20002e34
   17bcc:	200016e0 	.word	0x200016e0

00017bd0 <ready_thread>:
{
   17bd0:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   17bd2:	f990 300d 	ldrsb.w	r3, [r0, #13]
   17bd6:	7b42      	ldrb	r2, [r0, #13]
   17bd8:	2b00      	cmp	r3, #0
   17bda:	db2d      	blt.n	17c38 <ready_thread+0x68>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   17bdc:	06d3      	lsls	r3, r2, #27
   17bde:	d12b      	bne.n	17c38 <ready_thread+0x68>
	return !sys_dnode_is_linked(&to->node);
   17be0:	6983      	ldr	r3, [r0, #24]
   17be2:	bb4b      	cbnz	r3, 17c38 <ready_thread+0x68>
	return list->head == list;
   17be4:	4915      	ldr	r1, [pc, #84]	; (17c3c <ready_thread+0x6c>)
	thread->base.thread_state |= _THREAD_QUEUED;
   17be6:	f062 027f 	orn	r2, r2, #127	; 0x7f
   17bea:	7342      	strb	r2, [r0, #13]
   17bec:	460a      	mov	r2, r1
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   17bee:	6acd      	ldr	r5, [r1, #44]	; 0x2c
	return list->head == list;
   17bf0:	f852 4f28 	ldr.w	r4, [r2, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17bf4:	4294      	cmp	r4, r2
   17bf6:	bf18      	it	ne
   17bf8:	4623      	movne	r3, r4
   17bfa:	2b00      	cmp	r3, #0
   17bfc:	bf38      	it	cc
   17bfe:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17c00:	b1ab      	cbz	r3, 17c2e <ready_thread+0x5e>
	int32_t b1 = thread_1->base.prio;
   17c02:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   17c06:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   17c0a:	42a6      	cmp	r6, r4
   17c0c:	d00b      	beq.n	17c26 <ready_thread+0x56>
		return b2 - b1;
   17c0e:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   17c10:	2c00      	cmp	r4, #0
   17c12:	dd08      	ble.n	17c26 <ready_thread+0x56>
	sys_dnode_t *const prev = successor->prev;
   17c14:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   17c16:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   17c1a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   17c1c:	6058      	str	r0, [r3, #4]
}
   17c1e:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   17c20:	2000      	movs	r0, #0
   17c22:	f7ff be5b 	b.w	178dc <update_cache>
	return (node == list->tail) ? NULL : node->next;
   17c26:	42ab      	cmp	r3, r5
   17c28:	d001      	beq.n	17c2e <ready_thread+0x5e>
   17c2a:	681b      	ldr	r3, [r3, #0]
   17c2c:	e7e8      	b.n	17c00 <ready_thread+0x30>
	node->prev = tail;
   17c2e:	e9c0 2500 	strd	r2, r5, [r0]
	tail->next = node;
   17c32:	6028      	str	r0, [r5, #0]
	list->tail = node;
   17c34:	62c8      	str	r0, [r1, #44]	; 0x2c
}
   17c36:	e7f2      	b.n	17c1e <ready_thread+0x4e>
}
   17c38:	bc70      	pop	{r4, r5, r6}
   17c3a:	4770      	bx	lr
   17c3c:	20002df8 	.word	0x20002df8

00017c40 <z_sched_start>:
{
   17c40:	b510      	push	{r4, lr}
	__asm__ volatile(
   17c42:	f04f 0220 	mov.w	r2, #32
   17c46:	f3ef 8411 	mrs	r4, BASEPRI
   17c4a:	f382 8811 	msr	BASEPRI, r2
   17c4e:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   17c52:	7b42      	ldrb	r2, [r0, #13]
   17c54:	0751      	lsls	r1, r2, #29
   17c56:	d404      	bmi.n	17c62 <z_sched_start+0x22>
	__asm__ volatile(
   17c58:	f384 8811 	msr	BASEPRI, r4
   17c5c:	f3bf 8f6f 	isb	sy
}
   17c60:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   17c62:	f022 0204 	bic.w	r2, r2, #4
   17c66:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   17c68:	f7ff ffb2 	bl	17bd0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   17c6c:	4621      	mov	r1, r4
   17c6e:	4802      	ldr	r0, [pc, #8]	; (17c78 <z_sched_start+0x38>)
}
   17c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   17c74:	f7ff be0c 	b.w	17890 <z_reschedule>
   17c78:	2000344f 	.word	0x2000344f

00017c7c <z_set_prio>:
{
   17c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17c7e:	4604      	mov	r4, r0
	__asm__ volatile(
   17c80:	f04f 0320 	mov.w	r3, #32
   17c84:	f3ef 8611 	mrs	r6, BASEPRI
   17c88:	f383 8811 	msr	BASEPRI, r3
   17c8c:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   17c90:	7b43      	ldrb	r3, [r0, #13]
   17c92:	06da      	lsls	r2, r3, #27
   17c94:	b249      	sxtb	r1, r1
   17c96:	d138      	bne.n	17d0a <z_set_prio+0x8e>
   17c98:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   17c9a:	2d00      	cmp	r5, #0
   17c9c:	d135      	bne.n	17d0a <z_set_prio+0x8e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   17c9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   17ca2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   17ca4:	f005 ffdf 	bl	1dc66 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   17ca8:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
   17caa:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   17cac:	f063 037f 	orn	r3, r3, #127	; 0x7f
   17cb0:	7343      	strb	r3, [r0, #13]
	return list->head == list;
   17cb2:	4817      	ldr	r0, [pc, #92]	; (17d10 <z_set_prio+0x94>)
   17cb4:	4603      	mov	r3, r0
   17cb6:	f853 7f28 	ldr.w	r7, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17cba:	429f      	cmp	r7, r3
   17cbc:	bf18      	it	ne
   17cbe:	463d      	movne	r5, r7
   17cc0:	2d00      	cmp	r5, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   17cc2:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   17cc4:	461a      	mov	r2, r3
   17cc6:	462b      	mov	r3, r5
   17cc8:	bf38      	it	cc
   17cca:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17ccc:	b1c3      	cbz	r3, 17d00 <z_set_prio+0x84>
	int32_t b2 = thread_2->base.prio;
   17cce:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   17cd2:	42a9      	cmp	r1, r5
   17cd4:	d010      	beq.n	17cf8 <z_set_prio+0x7c>
		return b2 - b1;
   17cd6:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   17cd8:	2d00      	cmp	r5, #0
   17cda:	dd0d      	ble.n	17cf8 <z_set_prio+0x7c>
	sys_dnode_t *const prev = successor->prev;
   17cdc:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   17cde:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   17ce2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   17ce4:	605c      	str	r4, [r3, #4]
			update_cache(1);
   17ce6:	2001      	movs	r0, #1
   17ce8:	f7ff fdf8 	bl	178dc <update_cache>
   17cec:	2001      	movs	r0, #1
	__asm__ volatile(
   17cee:	f386 8811 	msr	BASEPRI, r6
   17cf2:	f3bf 8f6f 	isb	sy
}
   17cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   17cf8:	42bb      	cmp	r3, r7
   17cfa:	d001      	beq.n	17d00 <z_set_prio+0x84>
   17cfc:	681b      	ldr	r3, [r3, #0]
   17cfe:	e7e5      	b.n	17ccc <z_set_prio+0x50>
	node->prev = tail;
   17d00:	e9c4 2700 	strd	r2, r7, [r4]
	tail->next = node;
   17d04:	603c      	str	r4, [r7, #0]
	list->tail = node;
   17d06:	62c4      	str	r4, [r0, #44]	; 0x2c
}
   17d08:	e7ed      	b.n	17ce6 <z_set_prio+0x6a>
			thread->base.prio = prio;
   17d0a:	73a1      	strb	r1, [r4, #14]
   17d0c:	2000      	movs	r0, #0
   17d0e:	e7ee      	b.n	17cee <z_set_prio+0x72>
   17d10:	20002df8 	.word	0x20002df8

00017d14 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   17d14:	4b04      	ldr	r3, [pc, #16]	; (17d28 <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   17d16:	2100      	movs	r1, #0
   17d18:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   17d1c:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   17d20:	4608      	mov	r0, r1
   17d22:	f7ff bd83 	b.w	1782c <k_sched_time_slice_set>
   17d26:	bf00      	nop
   17d28:	20002df8 	.word	0x20002df8

00017d2c <z_impl_k_yield>:
	if (!z_is_idle_thread_object(_current)) {
   17d2c:	4926      	ldr	r1, [pc, #152]	; (17dc8 <z_impl_k_yield+0x9c>)
{
   17d2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   17d30:	688a      	ldr	r2, [r1, #8]
   17d32:	4b26      	ldr	r3, [pc, #152]	; (17dcc <z_impl_k_yield+0xa0>)
   17d34:	429a      	cmp	r2, r3
   17d36:	d03d      	beq.n	17db4 <z_impl_k_yield+0x88>
	__asm__ volatile(
   17d38:	f04f 0320 	mov.w	r3, #32
   17d3c:	f3ef 8511 	mrs	r5, BASEPRI
   17d40:	f383 8811 	msr	BASEPRI, r3
   17d44:	f3bf 8f6f 	isb	sy
			dequeue_thread(&_kernel.ready_q.runq,
   17d48:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   17d4a:	7b43      	ldrb	r3, [r0, #13]
   17d4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   17d50:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   17d52:	f005 ff88 	bl	1dc66 <sys_dlist_remove>
		queue_thread(&_kernel.ready_q.runq, _current);
   17d56:	688a      	ldr	r2, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   17d58:	7b53      	ldrb	r3, [r2, #13]
	return list->head == list;
   17d5a:	4608      	mov	r0, r1
   17d5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   17d60:	7353      	strb	r3, [r2, #13]
   17d62:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   17d66:	6ace      	ldr	r6, [r1, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17d68:	4283      	cmp	r3, r0
   17d6a:	bf08      	it	eq
   17d6c:	2300      	moveq	r3, #0
   17d6e:	2b00      	cmp	r3, #0
   17d70:	bf38      	it	cc
   17d72:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17d74:	b1cb      	cbz	r3, 17daa <z_impl_k_yield+0x7e>
	int32_t b1 = thread_1->base.prio;
   17d76:	f992 700e 	ldrsb.w	r7, [r2, #14]
	int32_t b2 = thread_2->base.prio;
   17d7a:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   17d7e:	42a7      	cmp	r7, r4
   17d80:	d00f      	beq.n	17da2 <z_impl_k_yield+0x76>
		return b2 - b1;
   17d82:	1be4      	subs	r4, r4, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   17d84:	2c00      	cmp	r4, #0
   17d86:	dd0c      	ble.n	17da2 <z_impl_k_yield+0x76>
	sys_dnode_t *const prev = successor->prev;
   17d88:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   17d8a:	e9c2 3100 	strd	r3, r1, [r2]
	prev->next = node;
   17d8e:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   17d90:	605a      	str	r2, [r3, #4]
		update_cache(1);
   17d92:	2001      	movs	r0, #1
   17d94:	f7ff fda2 	bl	178dc <update_cache>
   17d98:	4628      	mov	r0, r5
}
   17d9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   17d9e:	f7eb bbdd 	b.w	355c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   17da2:	42b3      	cmp	r3, r6
   17da4:	d001      	beq.n	17daa <z_impl_k_yield+0x7e>
   17da6:	681b      	ldr	r3, [r3, #0]
   17da8:	e7e4      	b.n	17d74 <z_impl_k_yield+0x48>
	node->prev = tail;
   17daa:	e9c2 0600 	strd	r0, r6, [r2]
	tail->next = node;
   17dae:	6032      	str	r2, [r6, #0]
	list->tail = node;
   17db0:	62ca      	str	r2, [r1, #44]	; 0x2c
}
   17db2:	e7ee      	b.n	17d92 <z_impl_k_yield+0x66>
   17db4:	f04f 0320 	mov.w	r3, #32
   17db8:	f3ef 8011 	mrs	r0, BASEPRI
   17dbc:	f383 8811 	msr	BASEPRI, r3
   17dc0:	f3bf 8f6f 	isb	sy
   17dc4:	e7e9      	b.n	17d9a <z_impl_k_yield+0x6e>
   17dc6:	bf00      	nop
   17dc8:	20002df8 	.word	0x20002df8
   17dcc:	200016e0 	.word	0x200016e0

00017dd0 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   17dd0:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   17dd4:	bf08      	it	eq
   17dd6:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   17dda:	b508      	push	{r3, lr}
   17ddc:	4602      	mov	r2, r0
   17dde:	460b      	mov	r3, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   17de0:	d106      	bne.n	17df0 <z_impl_k_sleep+0x20>
		k_thread_suspend(_current);
   17de2:	4b0b      	ldr	r3, [pc, #44]	; (17e10 <z_impl_k_sleep+0x40>)
   17de4:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   17de6:	f7ff fe25 	bl	17a34 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   17dea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   17dee:	bd08      	pop	{r3, pc}
	if (ticks == 0) {
   17df0:	4313      	orrs	r3, r2
   17df2:	d10a      	bne.n	17e0a <z_impl_k_sleep+0x3a>
	z_impl_k_yield();
   17df4:	f7ff ff9a 	bl	17d2c <z_impl_k_yield>
		return 0;
   17df8:	2000      	movs	r0, #0
			return (t * to_hz + off) / from_hz;
   17dfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   17dfe:	fb80 2303 	smull	r2, r3, r0, r3
   17e02:	0bd0      	lsrs	r0, r2, #15
   17e04:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   17e08:	e7f1      	b.n	17dee <z_impl_k_sleep+0x1e>
   17e0a:	f7ff fdd9 	bl	179c0 <z_tick_sleep.part.0>
   17e0e:	e7f4      	b.n	17dfa <z_impl_k_sleep+0x2a>
   17e10:	20002df8 	.word	0x20002df8

00017e14 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   17e14:	4b01      	ldr	r3, [pc, #4]	; (17e1c <z_impl_k_current_get+0x8>)
   17e16:	6898      	ldr	r0, [r3, #8]
   17e18:	4770      	bx	lr
   17e1a:	bf00      	nop
   17e1c:	20002df8 	.word	0x20002df8

00017e20 <z_impl_k_is_preempt_thread>:
   17e20:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/k_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   17e24:	b93b      	cbnz	r3, 17e36 <z_impl_k_is_preempt_thread+0x16>
   17e26:	4b05      	ldr	r3, [pc, #20]	; (17e3c <z_impl_k_is_preempt_thread+0x1c>)
   17e28:	689b      	ldr	r3, [r3, #8]
   17e2a:	89d8      	ldrh	r0, [r3, #14]
   17e2c:	287f      	cmp	r0, #127	; 0x7f
   17e2e:	bf8c      	ite	hi
   17e30:	2000      	movhi	r0, #0
   17e32:	2001      	movls	r0, #1
   17e34:	4770      	bx	lr
   17e36:	2000      	movs	r0, #0
}
   17e38:	4770      	bx	lr
   17e3a:	bf00      	nop
   17e3c:	20002df8 	.word	0x20002df8

00017e40 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   17e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17e44:	4604      	mov	r4, r0
   17e46:	f04f 0320 	mov.w	r3, #32
   17e4a:	f3ef 8611 	mrs	r6, BASEPRI
   17e4e:	f383 8811 	msr	BASEPRI, r3
   17e52:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   17e56:	7b43      	ldrb	r3, [r0, #13]
   17e58:	071a      	lsls	r2, r3, #28
   17e5a:	d505      	bpl.n	17e68 <z_thread_abort+0x28>
	__asm__ volatile(
   17e5c:	f386 8811 	msr	BASEPRI, r6
   17e60:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   17e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   17e68:	f023 0220 	bic.w	r2, r3, #32
   17e6c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   17e70:	09d2      	lsrs	r2, r2, #7
   17e72:	d120      	bne.n	17eb6 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   17e74:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   17e76:	68a3      	ldr	r3, [r4, #8]
   17e78:	b113      	cbz	r3, 17e80 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   17e7a:	4620      	mov	r0, r4
   17e7c:	f005 fefb 	bl	1dc76 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   17e80:	f104 0018 	add.w	r0, r4, #24
   17e84:	f005 fffe 	bl	1de84 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   17e88:	f104 0758 	add.w	r7, r4, #88	; 0x58
   17e8c:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   17e90:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17e92:	42bd      	cmp	r5, r7
   17e94:	d000      	beq.n	17e98 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   17e96:	b9b5      	cbnz	r5, 17ec6 <z_thread_abort+0x86>
		update_cache(1);
   17e98:	2001      	movs	r0, #1
   17e9a:	f7ff fd1f 	bl	178dc <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   17e9e:	4b10      	ldr	r3, [pc, #64]	; (17ee0 <z_thread_abort+0xa0>)
   17ea0:	689b      	ldr	r3, [r3, #8]
   17ea2:	42a3      	cmp	r3, r4
   17ea4:	d1da      	bne.n	17e5c <z_thread_abort+0x1c>
   17ea6:	f3ef 8305 	mrs	r3, IPSR
   17eaa:	2b00      	cmp	r3, #0
   17eac:	d1d6      	bne.n	17e5c <z_thread_abort+0x1c>
   17eae:	4630      	mov	r0, r6
   17eb0:	f7eb fb54 	bl	355c <arch_swap>
	return ret;
   17eb4:	e7d2      	b.n	17e5c <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   17eb6:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   17eba:	f043 0308 	orr.w	r3, r3, #8
   17ebe:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   17ec0:	f005 fed1 	bl	1dc66 <sys_dlist_remove>
}
   17ec4:	e7d7      	b.n	17e76 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   17ec6:	4628      	mov	r0, r5
   17ec8:	f005 fed5 	bl	1dc76 <unpend_thread_no_timeout>
   17ecc:	f105 0018 	add.w	r0, r5, #24
   17ed0:	f005 ffd8 	bl	1de84 <z_abort_timeout>
   17ed4:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   17ed8:	4628      	mov	r0, r5
   17eda:	f7ff fe79 	bl	17bd0 <ready_thread>
   17ede:	e7d7      	b.n	17e90 <z_thread_abort+0x50>
   17ee0:	20002df8 	.word	0x20002df8

00017ee4 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   17ee4:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   17ee6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   17eea:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   17eec:	e9cd 6700 	strd	r6, r7, [sp]
   17ef0:	f7ff fd52 	bl	17998 <z_pend_curr>

	if (data != NULL) {
   17ef4:	b11c      	cbz	r4, 17efe <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   17ef6:	4b03      	ldr	r3, [pc, #12]	; (17f04 <z_sched_wait+0x20>)
   17ef8:	689b      	ldr	r3, [r3, #8]
   17efa:	695b      	ldr	r3, [r3, #20]
   17efc:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   17efe:	b002      	add	sp, #8
   17f00:	bdd0      	pop	{r4, r6, r7, pc}
   17f02:	bf00      	nop
   17f04:	20002df8 	.word	0x20002df8

00017f08 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   17f08:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   17f0a:	4806      	ldr	r0, [pc, #24]	; (17f24 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   17f0c:	4a06      	ldr	r2, [pc, #24]	; (17f28 <z_data_copy+0x20>)
   17f0e:	4907      	ldr	r1, [pc, #28]	; (17f2c <z_data_copy+0x24>)
   17f10:	1a12      	subs	r2, r2, r0
   17f12:	f001 fe47 	bl	19ba4 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   17f16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   17f1a:	4a05      	ldr	r2, [pc, #20]	; (17f30 <z_data_copy+0x28>)
   17f1c:	4905      	ldr	r1, [pc, #20]	; (17f34 <z_data_copy+0x2c>)
   17f1e:	4806      	ldr	r0, [pc, #24]	; (17f38 <z_data_copy+0x30>)
   17f20:	f001 be40 	b.w	19ba4 <memcpy>
   17f24:	20000000 	.word	0x20000000
   17f28:	20000d84 	.word	0x20000d84
   17f2c:	000227c4 	.word	0x000227c4
   17f30:	00000000 	.word	0x00000000
   17f34:	000227c4 	.word	0x000227c4
   17f38:	20000000 	.word	0x20000000

00017f3c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   17f3c:	4b03      	ldr	r3, [pc, #12]	; (17f4c <elapsed+0x10>)
   17f3e:	681b      	ldr	r3, [r3, #0]
   17f40:	b90b      	cbnz	r3, 17f46 <elapsed+0xa>
   17f42:	f7eb ba27 	b.w	3394 <sys_clock_elapsed>
}
   17f46:	2000      	movs	r0, #0
   17f48:	4770      	bx	lr
   17f4a:	bf00      	nop
   17f4c:	20002e3c 	.word	0x20002e3c

00017f50 <remove_timeout>:
{
   17f50:	b530      	push	{r4, r5, lr}
   17f52:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   17f54:	b168      	cbz	r0, 17f72 <remove_timeout+0x22>
   17f56:	4a0a      	ldr	r2, [pc, #40]	; (17f80 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   17f58:	6852      	ldr	r2, [r2, #4]
   17f5a:	4290      	cmp	r0, r2
   17f5c:	d009      	beq.n	17f72 <remove_timeout+0x22>
	if (next(t) != NULL) {
   17f5e:	b143      	cbz	r3, 17f72 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   17f60:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   17f64:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   17f68:	1912      	adds	r2, r2, r4
   17f6a:	eb45 0101 	adc.w	r1, r5, r1
   17f6e:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   17f72:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   17f74:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   17f76:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   17f78:	2300      	movs	r3, #0
	node->prev = NULL;
   17f7a:	e9c0 3300 	strd	r3, r3, [r0]
}
   17f7e:	bd30      	pop	{r4, r5, pc}
   17f80:	20000968 	.word	0x20000968

00017f84 <next_timeout>:

static int32_t next_timeout(void)
{
   17f84:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   17f86:	4b13      	ldr	r3, [pc, #76]	; (17fd4 <next_timeout+0x50>)
   17f88:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17f8a:	429c      	cmp	r4, r3
   17f8c:	bf08      	it	eq
   17f8e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   17f90:	f7ff ffd4 	bl	17f3c <elapsed>
   17f94:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   17f96:	b1bc      	cbz	r4, 17fc8 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   17f98:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   17f9c:	1b40      	subs	r0, r0, r5
   17f9e:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   17fa2:	2801      	cmp	r0, #1
   17fa4:	f171 0300 	sbcs.w	r3, r1, #0
   17fa8:	db11      	blt.n	17fce <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   17faa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   17fae:	2300      	movs	r3, #0
   17fb0:	4282      	cmp	r2, r0
   17fb2:	eb73 0401 	sbcs.w	r4, r3, r1
   17fb6:	da00      	bge.n	17fba <next_timeout+0x36>
   17fb8:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   17fba:	4b07      	ldr	r3, [pc, #28]	; (17fd8 <next_timeout+0x54>)
   17fbc:	691b      	ldr	r3, [r3, #16]
   17fbe:	b113      	cbz	r3, 17fc6 <next_timeout+0x42>
   17fc0:	4298      	cmp	r0, r3
   17fc2:	bfa8      	it	ge
   17fc4:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   17fc6:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   17fc8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   17fcc:	e7f5      	b.n	17fba <next_timeout+0x36>
   17fce:	2000      	movs	r0, #0
   17fd0:	e7f3      	b.n	17fba <next_timeout+0x36>
   17fd2:	bf00      	nop
   17fd4:	20000968 	.word	0x20000968
   17fd8:	20002df8 	.word	0x20002df8

00017fdc <timeout_rem>:
/* must be locked */
static k_ticks_t timeout_rem(const struct _timeout *timeout)
{
	k_ticks_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   17fdc:	6803      	ldr	r3, [r0, #0]
{
   17fde:	b570      	push	{r4, r5, r6, lr}
	if (z_is_inactive_timeout(timeout)) {
   17fe0:	b1eb      	cbz	r3, 1801e <timeout_rem+0x42>
	return list->head == list;
   17fe2:	4a10      	ldr	r2, [pc, #64]	; (18024 <timeout_rem+0x48>)
   17fe4:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17fe6:	4293      	cmp	r3, r2
   17fe8:	d016      	beq.n	18018 <timeout_rem+0x3c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   17fea:	6851      	ldr	r1, [r2, #4]
   17fec:	2400      	movs	r4, #0
   17fee:	2500      	movs	r5, #0
		return 0;
	}

	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   17ff0:	b93b      	cbnz	r3, 18002 <timeout_rem+0x26>
		if (timeout == t) {
			break;
		}
	}

	return ticks - elapsed();
   17ff2:	f7ff ffa3 	bl	17f3c <elapsed>
   17ff6:	1a24      	subs	r4, r4, r0
   17ff8:	eb65 75e0 	sbc.w	r5, r5, r0, asr #31
}
   17ffc:	4620      	mov	r0, r4
   17ffe:	4629      	mov	r1, r5
   18000:	bd70      	pop	{r4, r5, r6, pc}
		ticks += t->dticks;
   18002:	e9d3 2604 	ldrd	r2, r6, [r3, #16]
   18006:	18a4      	adds	r4, r4, r2
   18008:	eb46 0505 	adc.w	r5, r6, r5
		if (timeout == t) {
   1800c:	4283      	cmp	r3, r0
   1800e:	d0f0      	beq.n	17ff2 <timeout_rem+0x16>
	return (node == list->tail) ? NULL : node->next;
   18010:	428b      	cmp	r3, r1
   18012:	d0ee      	beq.n	17ff2 <timeout_rem+0x16>
   18014:	681b      	ldr	r3, [r3, #0]
   18016:	e7eb      	b.n	17ff0 <timeout_rem+0x14>
   18018:	2400      	movs	r4, #0
   1801a:	2500      	movs	r5, #0
   1801c:	e7e9      	b.n	17ff2 <timeout_rem+0x16>
		return 0;
   1801e:	2400      	movs	r4, #0
   18020:	2500      	movs	r5, #0
   18022:	e7eb      	b.n	17ffc <timeout_rem+0x20>
   18024:	20000968 	.word	0x20000968

00018028 <z_add_timeout>:
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   18028:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1802c:	bf08      	it	eq
   1802e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   18032:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18036:	4604      	mov	r4, r0
   18038:	4692      	mov	sl, r2
   1803a:	469b      	mov	fp, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1803c:	d073      	beq.n	18126 <z_add_timeout+0xfe>
	to->fn = fn;
   1803e:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   18040:	f04f 0320 	mov.w	r3, #32
   18044:	f3ef 8511 	mrs	r5, BASEPRI
   18048:	f383 8811 	msr	BASEPRI, r3
   1804c:	f3bf 8f6f 	isb	sy
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   18050:	f06f 0301 	mvn.w	r3, #1
   18054:	ebb3 080a 	subs.w	r8, r3, sl
   18058:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1805c:	eb62 090b 	sbc.w	r9, r2, fp
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   18060:	f1b8 0f00 	cmp.w	r8, #0
   18064:	f179 0100 	sbcs.w	r1, r9, #0
   18068:	db1c      	blt.n	180a4 <z_add_timeout+0x7c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1806a:	4830      	ldr	r0, [pc, #192]	; (1812c <z_add_timeout+0x104>)
   1806c:	e9d0 1000 	ldrd	r1, r0, [r0]
   18070:	1a5b      	subs	r3, r3, r1
   18072:	eb62 0200 	sbc.w	r2, r2, r0
			to->dticks = MAX(1, ticks);
   18076:	ebb3 060a 	subs.w	r6, r3, sl
   1807a:	eb62 070b 	sbc.w	r7, r2, fp
   1807e:	2e01      	cmp	r6, #1
   18080:	f177 0300 	sbcs.w	r3, r7, #0
   18084:	bfbc      	itt	lt
   18086:	2601      	movlt	r6, #1
   18088:	2700      	movlt	r7, #0
   1808a:	e9c4 6704 	strd	r6, r7, [r4, #16]
	return list->head == list;
   1808e:	4a28      	ldr	r2, [pc, #160]	; (18130 <z_add_timeout+0x108>)
   18090:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18094:	4293      	cmp	r3, r2
   18096:	d11e      	bne.n	180d6 <z_add_timeout+0xae>
	node->prev = tail;
   18098:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
   1809c:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   180a0:	6054      	str	r4, [r2, #4]
}
   180a2:	e02d      	b.n	18100 <z_add_timeout+0xd8>
			to->dticks = timeout.ticks + 1 + elapsed();
   180a4:	f7ff ff4a 	bl	17f3c <elapsed>
   180a8:	f11a 0301 	adds.w	r3, sl, #1
   180ac:	9300      	str	r3, [sp, #0]
   180ae:	f14b 0300 	adc.w	r3, fp, #0
   180b2:	9301      	str	r3, [sp, #4]
   180b4:	e9dd 2300 	ldrd	r2, r3, [sp]
   180b8:	1812      	adds	r2, r2, r0
   180ba:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
   180be:	e9c4 2304 	strd	r2, r3, [r4, #16]
   180c2:	e7e4      	b.n	1808e <z_add_timeout+0x66>
			to->dticks -= t->dticks;
   180c4:	ebb6 0008 	subs.w	r0, r6, r8
   180c8:	eb67 0109 	sbc.w	r1, r7, r9
	return (node == list->tail) ? NULL : node->next;
   180cc:	4563      	cmp	r3, ip
   180ce:	e9c4 0104 	strd	r0, r1, [r4, #16]
   180d2:	d0e1      	beq.n	18098 <z_add_timeout+0x70>
   180d4:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   180d6:	2b00      	cmp	r3, #0
   180d8:	d0de      	beq.n	18098 <z_add_timeout+0x70>
			if (t->dticks > to->dticks) {
   180da:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
   180de:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
   180e2:	4546      	cmp	r6, r8
   180e4:	eb77 0109 	sbcs.w	r1, r7, r9
   180e8:	daec      	bge.n	180c4 <z_add_timeout+0x9c>
				t->dticks -= to->dticks;
   180ea:	ebb8 0006 	subs.w	r0, r8, r6
   180ee:	eb69 0107 	sbc.w	r1, r9, r7
   180f2:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   180f6:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   180f8:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   180fc:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   180fe:	605c      	str	r4, [r3, #4]
	return list->head == list;
   18100:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18102:	4293      	cmp	r3, r2
   18104:	d00b      	beq.n	1811e <z_add_timeout+0xf6>
		if (to == first()) {
   18106:	429c      	cmp	r4, r3
   18108:	d109      	bne.n	1811e <z_add_timeout+0xf6>
			int32_t next_time = next_timeout();
   1810a:	f7ff ff3b 	bl	17f84 <next_timeout>
			if (next_time == 0 ||
   1810e:	b118      	cbz	r0, 18118 <z_add_timeout+0xf0>
			    _current_cpu->slice_ticks != next_time) {
   18110:	4b08      	ldr	r3, [pc, #32]	; (18134 <z_add_timeout+0x10c>)
			if (next_time == 0 ||
   18112:	691b      	ldr	r3, [r3, #16]
   18114:	4283      	cmp	r3, r0
   18116:	d002      	beq.n	1811e <z_add_timeout+0xf6>
				sys_clock_set_timeout(next_time, false);
   18118:	2100      	movs	r1, #0
   1811a:	f7eb f909 	bl	3330 <sys_clock_set_timeout>
	__asm__ volatile(
   1811e:	f385 8811 	msr	BASEPRI, r5
   18122:	f3bf 8f6f 	isb	sy
}
   18126:	b003      	add	sp, #12
   18128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1812c:	20001880 	.word	0x20001880
   18130:	20000968 	.word	0x20000968
   18134:	20002df8 	.word	0x20002df8

00018138 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   18138:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1813c:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1813e:	f7ff fd05 	bl	17b4c <z_time_slice>
	__asm__ volatile(
   18142:	f04f 0320 	mov.w	r3, #32
   18146:	f3ef 8411 	mrs	r4, BASEPRI
   1814a:	f383 8811 	msr	BASEPRI, r3
   1814e:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   18152:	4d2c      	ldr	r5, [pc, #176]	; (18204 <sys_clock_announce+0xcc>)
   18154:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 18208 <sys_clock_announce+0xd0>
	return list->head == list;
   18158:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 1820c <sys_clock_announce+0xd4>
   1815c:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1815e:	4651      	mov	r1, sl
   18160:	f8d5 c000 	ldr.w	ip, [r5]
   18164:	f8db 0000 	ldr.w	r0, [fp]
   18168:	4662      	mov	r2, ip
   1816a:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1816c:	4558      	cmp	r0, fp
   1816e:	e9da 8900 	ldrd	r8, r9, [sl]
   18172:	e9cd 2300 	strd	r2, r3, [sp]
   18176:	d00d      	beq.n	18194 <sys_clock_announce+0x5c>
   18178:	b160      	cbz	r0, 18194 <sys_clock_announce+0x5c>
   1817a:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   1817e:	45b4      	cmp	ip, r6
   18180:	41bb      	sbcs	r3, r7
   18182:	da1e      	bge.n	181c2 <sys_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   18184:	9b00      	ldr	r3, [sp, #0]
   18186:	ebb6 0c03 	subs.w	ip, r6, r3
   1818a:	9b01      	ldr	r3, [sp, #4]
   1818c:	eb67 0603 	sbc.w	r6, r7, r3
   18190:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
   18194:	9b00      	ldr	r3, [sp, #0]
   18196:	eb13 0208 	adds.w	r2, r3, r8
   1819a:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
   1819c:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
   181a0:	eb43 0309 	adc.w	r3, r3, r9
   181a4:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
   181a8:	602e      	str	r6, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   181aa:	f7ff feeb 	bl	17f84 <next_timeout>
   181ae:	4631      	mov	r1, r6
   181b0:	f7eb f8be 	bl	3330 <sys_clock_set_timeout>
	__asm__ volatile(
   181b4:	f384 8811 	msr	BASEPRI, r4
   181b8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   181bc:	b003      	add	sp, #12
   181be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   181c2:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
   181c6:	f04f 0200 	mov.w	r2, #0
   181ca:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   181ce:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   181d2:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   181d6:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   181da:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   181de:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   181e0:	f7ff feb6 	bl	17f50 <remove_timeout>
   181e4:	f384 8811 	msr	BASEPRI, r4
   181e8:	f3bf 8f6f 	isb	sy
		t->fn(t);
   181ec:	6883      	ldr	r3, [r0, #8]
   181ee:	4798      	blx	r3
	__asm__ volatile(
   181f0:	f04f 0320 	mov.w	r3, #32
   181f4:	f3ef 8411 	mrs	r4, BASEPRI
   181f8:	f383 8811 	msr	BASEPRI, r3
   181fc:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   18200:	4901      	ldr	r1, [pc, #4]	; (18208 <sys_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   18202:	e7ad      	b.n	18160 <sys_clock_announce+0x28>
   18204:	20002e3c 	.word	0x20002e3c
   18208:	20001880 	.word	0x20001880
   1820c:	20000968 	.word	0x20000968

00018210 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   18210:	b510      	push	{r4, lr}
   18212:	f04f 0320 	mov.w	r3, #32
   18216:	f3ef 8411 	mrs	r4, BASEPRI
   1821a:	f383 8811 	msr	BASEPRI, r3
   1821e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   18222:	f7eb f8b7 	bl	3394 <sys_clock_elapsed>
   18226:	4b06      	ldr	r3, [pc, #24]	; (18240 <sys_clock_tick_get+0x30>)
   18228:	e9d3 2300 	ldrd	r2, r3, [r3]
   1822c:	1812      	adds	r2, r2, r0
   1822e:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   18232:	f384 8811 	msr	BASEPRI, r4
   18236:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1823a:	4610      	mov	r0, r2
   1823c:	4619      	mov	r1, r3
   1823e:	bd10      	pop	{r4, pc}
   18240:	20001880 	.word	0x20001880

00018244 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   18244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   18246:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   1824a:	1c56      	adds	r6, r2, #1
   1824c:	f143 0700 	adc.w	r7, r3, #0
   18250:	2f00      	cmp	r7, #0
   18252:	bf08      	it	eq
   18254:	2e02      	cmpeq	r6, #2
{
   18256:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   18258:	d302      	bcc.n	18260 <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1825a:	490d      	ldr	r1, [pc, #52]	; (18290 <z_timer_expiration_handler+0x4c>)
   1825c:	f7ff fee4 	bl	18028 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   18260:	6b23      	ldr	r3, [r4, #48]	; 0x30
   18262:	3301      	adds	r3, #1
   18264:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   18266:	6a23      	ldr	r3, [r4, #32]
   18268:	b10b      	cbz	r3, 1826e <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   1826a:	4620      	mov	r0, r4
   1826c:	4798      	blx	r3
	return list->head == list;
   1826e:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18272:	42a5      	cmp	r5, r4
   18274:	d00a      	beq.n	1828c <z_timer_expiration_handler+0x48>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   18276:	b14d      	cbz	r5, 1828c <z_timer_expiration_handler+0x48>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   18278:	4628      	mov	r0, r5
   1827a:	f005 fd06 	bl	1dc8a <z_unpend_thread_no_timeout>
   1827e:	2300      	movs	r3, #0
   18280:	67eb      	str	r3, [r5, #124]	; 0x7c

	arch_thread_return_value_set(thread, 0);

	z_ready_thread(thread);
   18282:	4628      	mov	r0, r5
}
   18284:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   18288:	f005 bd70 	b.w	1dd6c <z_ready_thread>
}
   1828c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1828e:	bf00      	nop
   18290:	00018245 	.word	0x00018245

00018294 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   18294:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   18298:	4619      	mov	r1, r3
   1829a:	4606      	mov	r6, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1829c:	1c4c      	adds	r4, r1, #1
{
   1829e:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   182a0:	bf08      	it	eq
   182a2:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   182a6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   182aa:	4680      	mov	r8, r0
   182ac:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   182ae:	d04c      	beq.n	1834a <z_impl_k_timer_start+0xb6>
   182b0:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   182b2:	1c6b      	adds	r3, r5, #1
   182b4:	bf08      	it	eq
   182b6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   182ba:	4614      	mov	r4, r2
   182bc:	d019      	beq.n	182f2 <z_impl_k_timer_start+0x5e>
   182be:	ea54 0305 	orrs.w	r3, r4, r5
   182c2:	d016      	beq.n	182f2 <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
   182c4:	f06f 0301 	mvn.w	r3, #1
   182c8:	ebb3 0a02 	subs.w	sl, r3, r2
   182cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   182d0:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   182d4:	f1ba 0f00 	cmp.w	sl, #0
   182d8:	f17b 0300 	sbcs.w	r3, fp, #0
   182dc:	da09      	bge.n	182f2 <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
   182de:	f112 34ff 	adds.w	r4, r2, #4294967295	; 0xffffffff
   182e2:	f145 35ff 	adc.w	r5, r5, #4294967295	; 0xffffffff
   182e6:	2c01      	cmp	r4, #1
   182e8:	f175 0300 	sbcs.w	r3, r5, #0
   182ec:	bfbc      	itt	lt
   182ee:	2401      	movlt	r4, #1
   182f0:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   182f2:	f06f 0301 	mvn.w	r3, #1
   182f6:	1a1b      	subs	r3, r3, r0
   182f8:	9300      	str	r3, [sp, #0]
   182fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   182fe:	eb63 0301 	sbc.w	r3, r3, r1
   18302:	9301      	str	r3, [sp, #4]
   18304:	e9dd 2300 	ldrd	r2, r3, [sp]
   18308:	2a00      	cmp	r2, #0
   1830a:	f173 0300 	sbcs.w	r3, r3, #0
   1830e:	da0c      	bge.n	1832a <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
   18310:	f110 38ff 	adds.w	r8, r0, #4294967295	; 0xffffffff
   18314:	f141 39ff 	adc.w	r9, r1, #4294967295	; 0xffffffff
   18318:	f1b8 0f00 	cmp.w	r8, #0
   1831c:	f179 0300 	sbcs.w	r3, r9, #0
   18320:	bfbc      	itt	lt
   18322:	f04f 0800 	movlt.w	r8, #0
   18326:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
   1832a:	4630      	mov	r0, r6
   1832c:	f005 fdaa 	bl	1de84 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   18330:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   18332:	4907      	ldr	r1, [pc, #28]	; (18350 <z_impl_k_timer_start+0xbc>)
	timer->status = 0U;
   18334:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   18336:	4642      	mov	r2, r8
   18338:	464b      	mov	r3, r9
   1833a:	4630      	mov	r0, r6
	timer->period = period;
   1833c:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   18340:	b002      	add	sp, #8
   18342:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   18346:	f7ff be6f 	b.w	18028 <z_add_timeout>
}
   1834a:	b002      	add	sp, #8
   1834c:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   18350:	00018245 	.word	0x00018245

00018354 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   18354:	b538      	push	{r3, r4, r5, lr}
   18356:	4603      	mov	r3, r0
	__asm__ volatile(
   18358:	f04f 0220 	mov.w	r2, #32
   1835c:	f3ef 8511 	mrs	r5, BASEPRI
   18360:	f382 8811 	msr	BASEPRI, r2
   18364:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   18368:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   1836a:	2101      	movs	r1, #1
   1836c:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1836e:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   18370:	4283      	cmp	r3, r0
   18372:	d106      	bne.n	18382 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   18374:	f385 8811 	msr	BASEPRI, r5
   18378:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   1837c:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   1837e:	4620      	mov	r0, r4
   18380:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   18382:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   18386:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   18388:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1838a:	2300      	movs	r3, #0
	node->prev = NULL;
   1838c:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   18390:	f005 fe24 	bl	1dfdc <signal_poll_event>
	z_reschedule(&lock, key);
   18394:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   18396:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   18398:	4801      	ldr	r0, [pc, #4]	; (183a0 <z_impl_k_poll_signal_raise+0x4c>)
   1839a:	f7ff fa79 	bl	17890 <z_reschedule>
	return rc;
   1839e:	e7ee      	b.n	1837e <z_impl_k_poll_signal_raise+0x2a>
   183a0:	2000344f 	.word	0x2000344f

000183a4 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   183a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   183a6:	4606      	mov	r6, r0
   183a8:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   183aa:	f005 fa5a 	bl	1d862 <k_is_in_isr>
   183ae:	b980      	cbnz	r0, 183d2 <z_thread_aligned_alloc+0x2e>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   183b0:	4b0b      	ldr	r3, [pc, #44]	; (183e0 <z_thread_aligned_alloc+0x3c>)
   183b2:	689b      	ldr	r3, [r3, #8]
   183b4:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   183b6:	b184      	cbz	r4, 183da <z_thread_aligned_alloc+0x36>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   183b8:	2204      	movs	r2, #4
   183ba:	18aa      	adds	r2, r5, r2
   183bc:	d209      	bcs.n	183d2 <z_thread_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   183be:	2000      	movs	r0, #0
   183c0:	2100      	movs	r1, #0
   183c2:	e9cd 0100 	strd	r0, r1, [sp]
   183c6:	f046 0104 	orr.w	r1, r6, #4
   183ca:	4620      	mov	r0, r4
   183cc:	f005 f9a1 	bl	1d712 <k_heap_aligned_alloc>
	if (mem == NULL) {
   183d0:	b908      	cbnz	r0, 183d6 <z_thread_aligned_alloc+0x32>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   183d2:	2400      	movs	r4, #0
	}

	return ret;
   183d4:	e001      	b.n	183da <z_thread_aligned_alloc+0x36>
	*heap_ref = heap;
   183d6:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   183d8:	1d04      	adds	r4, r0, #4
}
   183da:	4620      	mov	r0, r4
   183dc:	b002      	add	sp, #8
   183de:	bd70      	pop	{r4, r5, r6, pc}
   183e0:	20002df8 	.word	0x20002df8

000183e4 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   183e4:	4a02      	ldr	r2, [pc, #8]	; (183f0 <boot_banner+0xc>)
   183e6:	4903      	ldr	r1, [pc, #12]	; (183f4 <boot_banner+0x10>)
   183e8:	4803      	ldr	r0, [pc, #12]	; (183f8 <boot_banner+0x14>)
   183ea:	f000 b8bd 	b.w	18568 <printk>
   183ee:	bf00      	nop
   183f0:	00021093 	.word	0x00021093
   183f4:	0002278c 	.word	0x0002278c
   183f8:	0002279c 	.word	0x0002279c

000183fc <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   183fc:	4770      	bx	lr

000183fe <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   183fe:	b5f0      	push	{r4, r5, r6, r7, lr}
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   18400:	f04f 0c0a 	mov.w	ip, #10
{
   18404:	4605      	mov	r5, r0
	while (buflen > 0 && divisor > 0) {
   18406:	2604      	movs	r6, #4
	uint8_t num_digits = 0;
   18408:	2000      	movs	r0, #0
	uint8_t divisor = 100;
   1840a:	2464      	movs	r4, #100	; 0x64
	while (buflen > 0 && divisor > 0) {
   1840c:	b111      	cbz	r1, 18414 <u8_to_dec+0x16>
   1840e:	3e01      	subs	r6, #1
   18410:	d101      	bne.n	18416 <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   18412:	702e      	strb	r6, [r5, #0]
	}

	return num_digits;
}
   18414:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   18416:	42a2      	cmp	r2, r4
		digit = value / divisor;
   18418:	fbb2 f7f4 	udiv	r7, r2, r4
   1841c:	b2fb      	uxtb	r3, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   1841e:	d202      	bcs.n	18426 <u8_to_dec+0x28>
   18420:	2c01      	cmp	r4, #1
   18422:	d000      	beq.n	18426 <u8_to_dec+0x28>
   18424:	b130      	cbz	r0, 18434 <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   18426:	3330      	adds	r3, #48	; 0x30
   18428:	f805 3b01 	strb.w	r3, [r5], #1
			buflen--;
   1842c:	3901      	subs	r1, #1
			num_digits++;
   1842e:	1c43      	adds	r3, r0, #1
			buflen--;
   18430:	b2c9      	uxtb	r1, r1
			num_digits++;
   18432:	b2d8      	uxtb	r0, r3
		value -= digit * divisor;
   18434:	fb04 2217 	mls	r2, r4, r7, r2
   18438:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   1843a:	fbb4 f4fc 	udiv	r4, r4, ip
   1843e:	e7e5      	b.n	1840c <u8_to_dec+0xe>

00018440 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   18440:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   18444:	b2db      	uxtb	r3, r3
   18446:	2b09      	cmp	r3, #9
   18448:	d802      	bhi.n	18450 <char2hex+0x10>
		*x = c - '0';
   1844a:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   1844c:	2000      	movs	r0, #0
   1844e:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   18450:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   18454:	2b05      	cmp	r3, #5
   18456:	d802      	bhi.n	1845e <char2hex+0x1e>
		*x = c - 'a' + 10;
   18458:	3857      	subs	r0, #87	; 0x57
   1845a:	7008      	strb	r0, [r1, #0]
   1845c:	e7f6      	b.n	1844c <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   1845e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   18462:	2b05      	cmp	r3, #5
   18464:	d801      	bhi.n	1846a <char2hex+0x2a>
		*x = c - 'A' + 10;
   18466:	3837      	subs	r0, #55	; 0x37
   18468:	e7f7      	b.n	1845a <char2hex+0x1a>
		return -EINVAL;
   1846a:	f06f 0015 	mvn.w	r0, #21
}
   1846e:	4770      	bx	lr

00018470 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   18470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18472:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   18474:	f001 0001 	and.w	r0, r1, #1
   18478:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   1847c:	429d      	cmp	r5, r3
   1847e:	ea4f 0651 	mov.w	r6, r1, lsr #1
   18482:	d903      	bls.n	1848c <hex2bin+0x1c>
		return 0;
   18484:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   18486:	4628      	mov	r0, r5
   18488:	b003      	add	sp, #12
   1848a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   1848c:	b158      	cbz	r0, 184a6 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   1848e:	7820      	ldrb	r0, [r4, #0]
   18490:	f10d 0107 	add.w	r1, sp, #7
   18494:	f7ff ffd4 	bl	18440 <char2hex>
   18498:	2800      	cmp	r0, #0
   1849a:	dbf3      	blt.n	18484 <hex2bin+0x14>
		buf[0] = dec;
   1849c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   184a0:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   184a4:	3401      	adds	r4, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   184a6:	3401      	adds	r4, #1
   184a8:	4416      	add	r6, r2
   184aa:	42b2      	cmp	r2, r6
   184ac:	d0eb      	beq.n	18486 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   184ae:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   184b2:	f10d 0107 	add.w	r1, sp, #7
   184b6:	f7ff ffc3 	bl	18440 <char2hex>
   184ba:	2800      	cmp	r0, #0
   184bc:	dbe2      	blt.n	18484 <hex2bin+0x14>
		buf[i] = dec << 4;
   184be:	f89d 3007 	ldrb.w	r3, [sp, #7]
   184c2:	011b      	lsls	r3, r3, #4
   184c4:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   184c6:	f814 0b02 	ldrb.w	r0, [r4], #2
   184ca:	f10d 0107 	add.w	r1, sp, #7
   184ce:	f7ff ffb7 	bl	18440 <char2hex>
   184d2:	2800      	cmp	r0, #0
   184d4:	dbd6      	blt.n	18484 <hex2bin+0x14>
		buf[i] += dec;
   184d6:	7813      	ldrb	r3, [r2, #0]
   184d8:	f89d 1007 	ldrb.w	r1, [sp, #7]
   184dc:	440b      	add	r3, r1
   184de:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   184e2:	e7e2      	b.n	184aa <hex2bin+0x3a>

000184e4 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   184e4:	4603      	mov	r3, r0
   184e6:	b140      	cbz	r0, 184fa <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   184e8:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   184ea:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   184ee:	2a02      	cmp	r2, #2
   184f0:	d006      	beq.n	18500 <sys_notify_validate+0x1c>
   184f2:	2a03      	cmp	r2, #3
   184f4:	d004      	beq.n	18500 <sys_notify_validate+0x1c>
   184f6:	2a01      	cmp	r2, #1
   184f8:	d005      	beq.n	18506 <sys_notify_validate+0x22>
		return -EINVAL;
   184fa:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   184fe:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   18500:	681a      	ldr	r2, [r3, #0]
   18502:	2a00      	cmp	r2, #0
   18504:	d0f9      	beq.n	184fa <sys_notify_validate+0x16>
		notify->result = 0;
   18506:	2000      	movs	r0, #0
   18508:	6098      	str	r0, [r3, #8]
   1850a:	4770      	bx	lr

0001850c <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1850c:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1850e:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   18512:	2a02      	cmp	r2, #2
{
   18514:	b510      	push	{r4, lr}
   18516:	4603      	mov	r3, r0
	notify->result = res;
   18518:	6081      	str	r1, [r0, #8]
	switch (method) {
   1851a:	d00a      	beq.n	18532 <sys_notify_finalize+0x26>
   1851c:	2a03      	cmp	r2, #3
   1851e:	d10b      	bne.n	18538 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   18520:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   18522:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   18524:	2200      	movs	r2, #0
   18526:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   18528:	b108      	cbz	r0, 1852e <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   1852a:	f7ff ff13 	bl	18354 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1852e:	4620      	mov	r0, r4
   18530:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   18532:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   18534:	2400      	movs	r4, #0
		break;
   18536:	e7f5      	b.n	18524 <sys_notify_finalize+0x18>
	switch (method) {
   18538:	2400      	movs	r4, #0
   1853a:	4620      	mov	r0, r4
   1853c:	e7f2      	b.n	18524 <sys_notify_finalize+0x18>

0001853e <arch_printk_char_out>:
}
   1853e:	2000      	movs	r0, #0
   18540:	4770      	bx	lr

00018542 <str_out>:
{
   18542:	b530      	push	{r4, r5, lr}
   18544:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   18546:	680c      	ldr	r4, [r1, #0]
   18548:	1c55      	adds	r5, r2, #1
   1854a:	b114      	cbz	r4, 18552 <str_out+0x10>
   1854c:	684b      	ldr	r3, [r1, #4]
   1854e:	4293      	cmp	r3, r2
   18550:	dc01      	bgt.n	18556 <str_out+0x14>
		ctx->count++;
   18552:	608d      	str	r5, [r1, #8]
}
   18554:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   18556:	3b01      	subs	r3, #1
   18558:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1855a:	bf08      	it	eq
   1855c:	2200      	moveq	r2, #0
   1855e:	608d      	str	r5, [r1, #8]
   18560:	bf0c      	ite	eq
   18562:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   18564:	54a0      	strbne	r0, [r4, r2]
   18566:	e7f5      	b.n	18554 <str_out+0x12>

00018568 <printk>:
{
   18568:	b40f      	push	{r0, r1, r2, r3}
   1856a:	b507      	push	{r0, r1, r2, lr}
   1856c:	a904      	add	r1, sp, #16
   1856e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   18572:	9101      	str	r1, [sp, #4]
	z_log_printk(fmt, ap);
   18574:	f000 fc9e 	bl	18eb4 <z_log_printk>
}
   18578:	b003      	add	sp, #12
   1857a:	f85d eb04 	ldr.w	lr, [sp], #4
   1857e:	b004      	add	sp, #16
   18580:	4770      	bx	lr

00018582 <snprintk>:
{
   18582:	b40c      	push	{r2, r3}
   18584:	b507      	push	{r0, r1, r2, lr}
   18586:	ab04      	add	r3, sp, #16
   18588:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1858c:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1858e:	f7e9 f8f3 	bl	1778 <vsnprintk>
}
   18592:	b003      	add	sp, #12
   18594:	f85d eb04 	ldr.w	lr, [sp], #4
   18598:	b002      	add	sp, #8
   1859a:	4770      	bx	lr

0001859c <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1859c:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1859e:	f013 0307 	ands.w	r3, r3, #7
   185a2:	d105      	bne.n	185b0 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   185a4:	6803      	ldr	r3, [r0, #0]
   185a6:	2b00      	cmp	r3, #0
		evt = EVT_START;
   185a8:	bf0c      	ite	eq
   185aa:	2000      	moveq	r0, #0
   185ac:	2003      	movne	r0, #3
   185ae:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   185b0:	2b02      	cmp	r3, #2
   185b2:	d105      	bne.n	185c0 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   185b4:	8b43      	ldrh	r3, [r0, #26]
   185b6:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   185b8:	bf14      	ite	ne
   185ba:	2000      	movne	r0, #0
   185bc:	2004      	moveq	r0, #4
   185be:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   185c0:	2b01      	cmp	r3, #1
   185c2:	d105      	bne.n	185d0 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   185c4:	6803      	ldr	r3, [r0, #0]
   185c6:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   185c8:	bf0c      	ite	eq
   185ca:	2000      	moveq	r0, #0
   185cc:	2005      	movne	r0, #5
   185ce:	4770      	bx	lr
	int evt = EVT_NOP;
   185d0:	2000      	movs	r0, #0
}
   185d2:	4770      	bx	lr

000185d4 <notify_one>:
{
   185d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   185d8:	460d      	mov	r5, r1
   185da:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   185dc:	4619      	mov	r1, r3
   185de:	1d28      	adds	r0, r5, #4
{
   185e0:	4690      	mov	r8, r2
   185e2:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   185e4:	f7ff ff92 	bl	1850c <sys_notify_finalize>
	if (cb) {
   185e8:	4604      	mov	r4, r0
   185ea:	b138      	cbz	r0, 185fc <notify_one+0x28>
		cb(mgr, cli, state, res);
   185ec:	4633      	mov	r3, r6
   185ee:	4642      	mov	r2, r8
   185f0:	4629      	mov	r1, r5
   185f2:	4638      	mov	r0, r7
   185f4:	46a4      	mov	ip, r4
}
   185f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   185fa:	4760      	bx	ip
}
   185fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00018600 <transition_complete>:
{
   18600:	b410      	push	{r4}
	__asm__ volatile(
   18602:	f04f 0420 	mov.w	r4, #32
   18606:	f3ef 8211 	mrs	r2, BASEPRI
   1860a:	f384 8811 	msr	BASEPRI, r4
   1860e:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   18612:	6141      	str	r1, [r0, #20]
}
   18614:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   18616:	2101      	movs	r1, #1
   18618:	f7e9 b8c2 	b.w	17a0 <process_event>

0001861c <validate_args>:
{
   1861c:	b510      	push	{r4, lr}
   1861e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   18620:	b140      	cbz	r0, 18634 <validate_args+0x18>
   18622:	b139      	cbz	r1, 18634 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   18624:	1d08      	adds	r0, r1, #4
   18626:	f7ff ff5d 	bl	184e4 <sys_notify_validate>
	if ((rv == 0)
   1862a:	b928      	cbnz	r0, 18638 <validate_args+0x1c>
	    && ((cli->notify.flags
   1862c:	68a3      	ldr	r3, [r4, #8]
   1862e:	f033 0303 	bics.w	r3, r3, #3
   18632:	d001      	beq.n	18638 <validate_args+0x1c>
		rv = -EINVAL;
   18634:	f06f 0015 	mvn.w	r0, #21
}
   18638:	bd10      	pop	{r4, pc}

0001863a <onoff_manager_init>:
{
   1863a:	b538      	push	{r3, r4, r5, lr}
   1863c:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1863e:	4605      	mov	r5, r0
   18640:	b158      	cbz	r0, 1865a <onoff_manager_init+0x20>
	    || (transitions == NULL)
   18642:	b151      	cbz	r1, 1865a <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   18644:	680b      	ldr	r3, [r1, #0]
   18646:	b143      	cbz	r3, 1865a <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   18648:	684b      	ldr	r3, [r1, #4]
   1864a:	b133      	cbz	r3, 1865a <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1864c:	221c      	movs	r2, #28
   1864e:	2100      	movs	r1, #0
   18650:	f001 fad3 	bl	19bfa <memset>
   18654:	612c      	str	r4, [r5, #16]
	return 0;
   18656:	2000      	movs	r0, #0
}
   18658:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1865a:	f06f 0015 	mvn.w	r0, #21
   1865e:	e7fb      	b.n	18658 <onoff_manager_init+0x1e>

00018660 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   18660:	b570      	push	{r4, r5, r6, lr}
   18662:	4604      	mov	r4, r0
   18664:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   18666:	f7ff ffd9 	bl	1861c <validate_args>

	if (rv < 0) {
   1866a:	1e05      	subs	r5, r0, #0
   1866c:	db31      	blt.n	186d2 <onoff_request+0x72>
   1866e:	f04f 0320 	mov.w	r3, #32
   18672:	f3ef 8111 	mrs	r1, BASEPRI
   18676:	f383 8811 	msr	BASEPRI, r3
   1867a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1867e:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   18680:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   18682:	f64f 75ff 	movw	r5, #65535	; 0xffff
   18686:	42ab      	cmp	r3, r5
   18688:	f000 0207 	and.w	r2, r0, #7
   1868c:	d02e      	beq.n	186ec <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1868e:	2a02      	cmp	r2, #2
   18690:	d10e      	bne.n	186b0 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   18692:	3301      	adds	r3, #1
   18694:	8363      	strh	r3, [r4, #26]
	rv = state;
   18696:	4615      	mov	r5, r2
		notify = true;
   18698:	2301      	movs	r3, #1
	__asm__ volatile(
   1869a:	f381 8811 	msr	BASEPRI, r1
   1869e:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   186a2:	b1b3      	cbz	r3, 186d2 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   186a4:	2300      	movs	r3, #0
   186a6:	4631      	mov	r1, r6
   186a8:	4620      	mov	r0, r4
   186aa:	f7ff ff93 	bl	185d4 <notify_one>
   186ae:	e010      	b.n	186d2 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   186b0:	0783      	lsls	r3, r0, #30
   186b2:	d001      	beq.n	186b8 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   186b4:	2a06      	cmp	r2, #6
   186b6:	d10e      	bne.n	186d6 <onoff_request+0x76>
	parent->next = child;
   186b8:	2300      	movs	r3, #0
   186ba:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   186bc:	6863      	ldr	r3, [r4, #4]
   186be:	b993      	cbnz	r3, 186e6 <onoff_request+0x86>
	list->head = node;
   186c0:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   186c4:	4615      	mov	r5, r2
   186c6:	b962      	cbnz	r2, 186e2 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   186c8:	460a      	mov	r2, r1
   186ca:	4620      	mov	r0, r4
   186cc:	2102      	movs	r1, #2
   186ce:	f7e9 f867 	bl	17a0 <process_event>
		}
	}

	return rv;
}
   186d2:	4628      	mov	r0, r5
   186d4:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   186d6:	2a05      	cmp	r2, #5
   186d8:	bf0c      	ite	eq
   186da:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   186de:	f06f 0504 	mvnne.w	r5, #4
   186e2:	2300      	movs	r3, #0
   186e4:	e7d9      	b.n	1869a <onoff_request+0x3a>
	parent->next = child;
   186e6:	601e      	str	r6, [r3, #0]
	list->tail = node;
   186e8:	6066      	str	r6, [r4, #4]
}
   186ea:	e7eb      	b.n	186c4 <onoff_request+0x64>
		rv = -EAGAIN;
   186ec:	f06f 050a 	mvn.w	r5, #10
   186f0:	e7f7      	b.n	186e2 <onoff_request+0x82>

000186f2 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   186f2:	b510      	push	{r4, lr}
	__asm__ volatile(
   186f4:	f04f 0320 	mov.w	r3, #32
   186f8:	f3ef 8211 	mrs	r2, BASEPRI
   186fc:	f383 8811 	msr	BASEPRI, r3
   18700:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   18704:	8b04      	ldrh	r4, [r0, #24]
   18706:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   1870a:	2c02      	cmp	r4, #2
   1870c:	d00a      	beq.n	18724 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
   1870e:	2c01      	cmp	r4, #1
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   18710:	bf0c      	ite	eq
   18712:	f06f 0004 	mvneq.w	r0, #4
   18716:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   1871a:	f382 8811 	msr	BASEPRI, r2
   1871e:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   18722:	e008      	b.n	18736 <onoff_release+0x44>
	mgr->refs -= 1U;
   18724:	8b43      	ldrh	r3, [r0, #26]
   18726:	3b01      	subs	r3, #1
   18728:	b29b      	uxth	r3, r3
   1872a:	8343      	strh	r3, [r0, #26]
	if (stop) {
   1872c:	b923      	cbnz	r3, 18738 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   1872e:	4621      	mov	r1, r4
   18730:	f7e9 f836 	bl	17a0 <process_event>
	int rv = state;
   18734:	4620      	mov	r0, r4
}
   18736:	bd10      	pop	{r4, pc}
	int rv = state;
   18738:	4620      	mov	r0, r4
   1873a:	e7ee      	b.n	1871a <onoff_release+0x28>

0001873c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1873c:	4604      	mov	r4, r0
   1873e:	b508      	push	{r3, lr}
   18740:	4608      	mov	r0, r1
   18742:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   18744:	461a      	mov	r2, r3
   18746:	47a0      	blx	r4
	return z_impl_k_current_get();
   18748:	f7ff fb64 	bl	17e14 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1874c:	f7eb fb46 	bl	3ddc <z_impl_k_thread_abort>

00018750 <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   18750:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   18752:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   18756:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   1875a:	bf2c      	ite	cs
   1875c:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   18760:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   18764:	4770      	bx	lr

00018766 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   18766:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   1876a:	6880      	ldr	r0, [r0, #8]
   1876c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   18770:	bf2c      	ite	cs
   18772:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   18776:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   1877a:	4770      	bx	lr

0001877c <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
   1877c:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1877e:	2201      	movs	r2, #1
   18780:	f7ff ffe6 	bl	18750 <chunk_field>
}
   18784:	0840      	lsrs	r0, r0, #1
   18786:	bd08      	pop	{r3, pc}

00018788 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   18788:	6883      	ldr	r3, [r0, #8]
   1878a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   1878e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   18792:	d308      	bcc.n	187a6 <set_chunk_used+0x1e>
		if (used) {
   18794:	684b      	ldr	r3, [r1, #4]
   18796:	b11a      	cbz	r2, 187a0 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   18798:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1879c:	604b      	str	r3, [r1, #4]
   1879e:	4770      	bx	lr
   187a0:	f023 0301 	bic.w	r3, r3, #1
   187a4:	e7fa      	b.n	1879c <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   187a6:	884b      	ldrh	r3, [r1, #2]
   187a8:	b11a      	cbz	r2, 187b2 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   187aa:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   187ae:	804b      	strh	r3, [r1, #2]
		}
	}
}
   187b0:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   187b2:	f023 0301 	bic.w	r3, r3, #1
   187b6:	e7fa      	b.n	187ae <set_chunk_used+0x26>

000187b8 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   187b8:	0053      	lsls	r3, r2, #1
   187ba:	2201      	movs	r2, #1
   187bc:	f7ff bfd3 	b.w	18766 <chunk_set>

000187c0 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   187c0:	6880      	ldr	r0, [r0, #8]
	return chunksz * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   187c2:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   187c4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   187c8:	bf2c      	ite	cs
   187ca:	2002      	movcs	r0, #2
   187cc:	2001      	movcc	r0, #1
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   187ce:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   187d0:	fab0 f080 	clz	r0, r0
}
   187d4:	f1c0 001f 	rsb	r0, r0, #31
   187d8:	4770      	bx	lr

000187da <merge_chunks>:
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   187da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   187de:	4616      	mov	r6, r2
   187e0:	4604      	mov	r4, r0
   187e2:	460f      	mov	r7, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   187e4:	f7ff ffca 	bl	1877c <chunk_size>
   187e8:	4631      	mov	r1, r6
   187ea:	4605      	mov	r5, r0
   187ec:	4620      	mov	r0, r4
   187ee:	f7ff ffc5 	bl	1877c <chunk_size>
   187f2:	4405      	add	r5, r0

	set_chunk_size(h, lc, newsz);
   187f4:	462a      	mov	r2, r5
   187f6:	4639      	mov	r1, r7
   187f8:	4620      	mov	r0, r4
   187fa:	f7ff ffdd 	bl	187b8 <set_chunk_size>
	return c + chunk_size(h, c);
   187fe:	4631      	mov	r1, r6
   18800:	4620      	mov	r0, r4
   18802:	f7ff ffbb 	bl	1877c <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   18806:	462b      	mov	r3, r5
   18808:	1831      	adds	r1, r6, r0
   1880a:	2200      	movs	r2, #0
   1880c:	4620      	mov	r0, r4
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   1880e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   18812:	f7ff bfa8 	b.w	18766 <chunk_set>

00018816 <split_chunks>:
{
   18816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1881a:	4614      	mov	r4, r2
   1881c:	4605      	mov	r5, r0
   1881e:	460e      	mov	r6, r1
	chunksz_t sz0 = chunk_size(h, lc);
   18820:	f7ff ffac 	bl	1877c <chunk_size>
	chunksz_t lsz = rc - lc;
   18824:	eba4 0806 	sub.w	r8, r4, r6
	chunksz_t rsz = sz0 - lsz;
   18828:	1b37      	subs	r7, r6, r4
   1882a:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   1882c:	4642      	mov	r2, r8
   1882e:	4631      	mov	r1, r6
   18830:	4628      	mov	r0, r5
   18832:	f7ff ffc1 	bl	187b8 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   18836:	463a      	mov	r2, r7
   18838:	4621      	mov	r1, r4
   1883a:	4628      	mov	r0, r5
   1883c:	f7ff ffbc 	bl	187b8 <set_chunk_size>
   18840:	4643      	mov	r3, r8
   18842:	2200      	movs	r2, #0
   18844:	4621      	mov	r1, r4
   18846:	4628      	mov	r0, r5
   18848:	f7ff ff8d 	bl	18766 <chunk_set>
	return c + chunk_size(h, c);
   1884c:	4621      	mov	r1, r4
   1884e:	4628      	mov	r0, r5
   18850:	f7ff ff94 	bl	1877c <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   18854:	463b      	mov	r3, r7
   18856:	1821      	adds	r1, r4, r0
   18858:	2200      	movs	r2, #0
   1885a:	4628      	mov	r0, r5
}
   1885c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   18860:	f7ff bf81 	b.w	18766 <chunk_set>

00018864 <free_list_remove_bidx>:
{
   18864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18868:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   1886a:	2203      	movs	r2, #3
   1886c:	460e      	mov	r6, r1
   1886e:	4604      	mov	r4, r0
   18870:	f7ff ff6e 	bl	18750 <chunk_field>
	if (next_free_chunk(h, c) == c) {
   18874:	4286      	cmp	r6, r0
   18876:	4605      	mov	r5, r0
   18878:	f107 0804 	add.w	r8, r7, #4
   1887c:	d10b      	bne.n	18896 <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   1887e:	2301      	movs	r3, #1
   18880:	fa03 f707 	lsl.w	r7, r3, r7
   18884:	68e3      	ldr	r3, [r4, #12]
   18886:	ea23 0307 	bic.w	r3, r3, r7
   1888a:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   1888c:	2300      	movs	r3, #0
   1888e:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   18892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   18896:	4631      	mov	r1, r6
   18898:	2202      	movs	r2, #2
   1889a:	4620      	mov	r0, r4
   1889c:	f7ff ff58 	bl	18750 <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   188a0:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   188a2:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   188a4:	4601      	mov	r1, r0
		b->next = second;
   188a6:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   188aa:	4620      	mov	r0, r4
   188ac:	2203      	movs	r2, #3
   188ae:	f7ff ff5a 	bl	18766 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   188b2:	4633      	mov	r3, r6
   188b4:	4629      	mov	r1, r5
   188b6:	4620      	mov	r0, r4
   188b8:	2202      	movs	r2, #2
}
   188ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   188be:	f7ff bf52 	b.w	18766 <chunk_set>

000188c2 <free_list_remove>:
{
   188c2:	b538      	push	{r3, r4, r5, lr}
   188c4:	4604      	mov	r4, r0
   188c6:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   188c8:	f7ff ff58 	bl	1877c <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   188cc:	68a3      	ldr	r3, [r4, #8]
   188ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   188d2:	4601      	mov	r1, r0
   188d4:	d301      	bcc.n	188da <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   188d6:	2801      	cmp	r0, #1
   188d8:	d009      	beq.n	188ee <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   188da:	4620      	mov	r0, r4
   188dc:	f7ff ff70 	bl	187c0 <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   188e0:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   188e2:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   188e4:	4620      	mov	r0, r4
}
   188e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   188ea:	f7ff bfbb 	b.w	18864 <free_list_remove_bidx>
}
   188ee:	bd38      	pop	{r3, r4, r5, pc}

000188f0 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   188f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   188f4:	4605      	mov	r5, r0
   188f6:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   188f8:	f7ff ff62 	bl	187c0 <bucket_idx>
   188fc:	eb05 0a80 	add.w	sl, r5, r0, lsl #2
   18900:	4606      	mov	r6, r0
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   18902:	f8da 9010 	ldr.w	r9, [sl, #16]
   18906:	f1b9 0f00 	cmp.w	r9, #0
   1890a:	d01b      	beq.n	18944 <alloc_chunk+0x54>
   1890c:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   1890e:	f8da 4010 	ldr.w	r4, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   18912:	4628      	mov	r0, r5
   18914:	4621      	mov	r1, r4
   18916:	f7ff ff31 	bl	1877c <chunk_size>
   1891a:	4540      	cmp	r0, r8
   1891c:	d307      	bcc.n	1892e <alloc_chunk+0x3e>
				free_list_remove_bidx(h, c, bi);
   1891e:	4632      	mov	r2, r6

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   18920:	4621      	mov	r1, r4
   18922:	4628      	mov	r0, r5
   18924:	f7ff ff9e 	bl	18864 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   18928:	4620      	mov	r0, r4
   1892a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return chunk_field(h, c, FREE_NEXT);
   1892e:	2203      	movs	r2, #3
   18930:	4621      	mov	r1, r4
   18932:	4628      	mov	r0, r5
   18934:	f7ff ff0c 	bl	18750 <chunk_field>
		} while (--i && b->next != first);
   18938:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   1893a:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   1893e:	d001      	beq.n	18944 <alloc_chunk+0x54>
   18940:	4581      	cmp	r9, r0
   18942:	d1e4      	bne.n	1890e <alloc_chunk+0x1e>
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   18944:	68e9      	ldr	r1, [r5, #12]
   18946:	3601      	adds	r6, #1
   18948:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1894c:	40b4      	lsls	r4, r6
	if (bmask != 0U) {
   1894e:	400c      	ands	r4, r1
   18950:	d0ea      	beq.n	18928 <alloc_chunk+0x38>
		int minbucket = __builtin_ctz(bmask);
   18952:	fa94 f2a4 	rbit	r2, r4
   18956:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1895a:	1d13      	adds	r3, r2, #4
   1895c:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
   18960:	e7de      	b.n	18920 <alloc_chunk+0x30>

00018962 <free_list_add>:
{
   18962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18966:	4604      	mov	r4, r0
   18968:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   1896a:	f7ff ff07 	bl	1877c <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   1896e:	68a3      	ldr	r3, [r4, #8]
   18970:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   18974:	4601      	mov	r1, r0
   18976:	d301      	bcc.n	1897c <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   18978:	2801      	cmp	r0, #1
   1897a:	d035      	beq.n	189e8 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1897c:	4620      	mov	r0, r4
   1897e:	f7ff ff1f 	bl	187c0 <bucket_idx>
	if (b->next == 0U) {
   18982:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   18986:	6916      	ldr	r6, [r2, #16]
   18988:	b99e      	cbnz	r6, 189b2 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   1898a:	2301      	movs	r3, #1
   1898c:	fa03 f000 	lsl.w	r0, r3, r0
   18990:	68e3      	ldr	r3, [r4, #12]
   18992:	4303      	orrs	r3, r0
   18994:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   18996:	4629      	mov	r1, r5
		b->next = c;
   18998:	6115      	str	r5, [r2, #16]
   1899a:	462b      	mov	r3, r5
   1899c:	2202      	movs	r2, #2
   1899e:	4620      	mov	r0, r4
   189a0:	f7ff fee1 	bl	18766 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   189a4:	2203      	movs	r2, #3
   189a6:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   189a8:	4620      	mov	r0, r4
}
   189aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   189ae:	f7ff beda 	b.w	18766 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   189b2:	2202      	movs	r2, #2
   189b4:	4631      	mov	r1, r6
   189b6:	4620      	mov	r0, r4
   189b8:	f7ff feca 	bl	18750 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   189bc:	2202      	movs	r2, #2
   189be:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   189c0:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   189c2:	4629      	mov	r1, r5
   189c4:	4620      	mov	r0, r4
   189c6:	f7ff fece 	bl	18766 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   189ca:	4633      	mov	r3, r6
   189cc:	2203      	movs	r2, #3
   189ce:	4629      	mov	r1, r5
   189d0:	4620      	mov	r0, r4
   189d2:	f7ff fec8 	bl	18766 <chunk_set>
   189d6:	2203      	movs	r2, #3
   189d8:	4639      	mov	r1, r7
   189da:	462b      	mov	r3, r5
   189dc:	4620      	mov	r0, r4
   189de:	f7ff fec2 	bl	18766 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   189e2:	2202      	movs	r2, #2
   189e4:	4631      	mov	r1, r6
   189e6:	e7df      	b.n	189a8 <free_list_add+0x46>
   189e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000189ec <free_chunk>:
{
   189ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   189ee:	460c      	mov	r4, r1
   189f0:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   189f2:	f7ff fec3 	bl	1877c <chunk_size>
   189f6:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   189f8:	2201      	movs	r2, #1
   189fa:	4631      	mov	r1, r6
   189fc:	4628      	mov	r0, r5
   189fe:	f7ff fea7 	bl	18750 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   18a02:	07c3      	lsls	r3, r0, #31
   18a04:	d40c      	bmi.n	18a20 <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   18a06:	4631      	mov	r1, r6
   18a08:	4628      	mov	r0, r5
   18a0a:	f7ff ff5a 	bl	188c2 <free_list_remove>
	return c + chunk_size(h, c);
   18a0e:	4621      	mov	r1, r4
   18a10:	4628      	mov	r0, r5
   18a12:	f7ff feb3 	bl	1877c <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   18a16:	4621      	mov	r1, r4
   18a18:	1822      	adds	r2, r4, r0
   18a1a:	4628      	mov	r0, r5
   18a1c:	f7ff fedd 	bl	187da <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   18a20:	2200      	movs	r2, #0
   18a22:	4621      	mov	r1, r4
   18a24:	4628      	mov	r0, r5
   18a26:	f7ff fe93 	bl	18750 <chunk_field>
   18a2a:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   18a2c:	2201      	movs	r2, #1
   18a2e:	4639      	mov	r1, r7
   18a30:	4628      	mov	r0, r5
   18a32:	f7ff fe8d 	bl	18750 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   18a36:	f010 0601 	ands.w	r6, r0, #1
   18a3a:	d113      	bne.n	18a64 <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   18a3c:	4639      	mov	r1, r7
   18a3e:	4628      	mov	r0, r5
   18a40:	f7ff ff3f 	bl	188c2 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   18a44:	4621      	mov	r1, r4
   18a46:	4632      	mov	r2, r6
   18a48:	4628      	mov	r0, r5
   18a4a:	f7ff fe81 	bl	18750 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   18a4e:	4622      	mov	r2, r4
   18a50:	1a21      	subs	r1, r4, r0
   18a52:	4628      	mov	r0, r5
   18a54:	f7ff fec1 	bl	187da <merge_chunks>
   18a58:	4621      	mov	r1, r4
   18a5a:	4632      	mov	r2, r6
   18a5c:	4628      	mov	r0, r5
   18a5e:	f7ff fe77 	bl	18750 <chunk_field>
   18a62:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   18a64:	4621      	mov	r1, r4
   18a66:	4628      	mov	r0, r5
}
   18a68:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   18a6c:	f7ff bf79 	b.w	18962 <free_list_add>

00018a70 <sys_heap_free>:
{
   18a70:	b510      	push	{r4, lr}
	if (mem == NULL) {
   18a72:	b191      	cbz	r1, 18a9a <sys_heap_free+0x2a>
	struct z_heap *h = heap->heap;
   18a74:	6800      	ldr	r0, [r0, #0]
	return big_heap(h) ? 8 : 4;
   18a76:	6883      	ldr	r3, [r0, #8]
   18a78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   18a7c:	bf2c      	ite	cs
   18a7e:	2408      	movcs	r4, #8
   18a80:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   18a82:	1b0c      	subs	r4, r1, r4
   18a84:	1a24      	subs	r4, r4, r0
   18a86:	08e4      	lsrs	r4, r4, #3
	set_chunk_used(h, c, false);
   18a88:	4621      	mov	r1, r4
   18a8a:	2200      	movs	r2, #0
   18a8c:	f7ff fe7c 	bl	18788 <set_chunk_used>
	free_chunk(h, c);
   18a90:	4621      	mov	r1, r4
}
   18a92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	free_chunk(h, c);
   18a96:	f7ff bfa9 	b.w	189ec <free_chunk>
}
   18a9a:	bd10      	pop	{r4, pc}

00018a9c <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   18a9c:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   18a9e:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   18aa0:	b909      	cbnz	r1, 18aa6 <sys_heap_alloc+0xa>
		return NULL;
   18aa2:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   18aa4:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   18aa6:	68ab      	ldr	r3, [r5, #8]
   18aa8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   18aac:	d9f9      	bls.n	18aa2 <sys_heap_alloc+0x6>
   18aae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   18ab2:	bf2c      	ite	cs
   18ab4:	2208      	movcs	r2, #8
   18ab6:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   18ab8:	1dcc      	adds	r4, r1, #7
   18aba:	4414      	add	r4, r2
   18abc:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   18abe:	4621      	mov	r1, r4
   18ac0:	4628      	mov	r0, r5
   18ac2:	f7ff ff15 	bl	188f0 <alloc_chunk>
	if (c == 0U) {
   18ac6:	4606      	mov	r6, r0
   18ac8:	2800      	cmp	r0, #0
   18aca:	d0ea      	beq.n	18aa2 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   18acc:	4601      	mov	r1, r0
   18ace:	4628      	mov	r0, r5
   18ad0:	f7ff fe54 	bl	1877c <chunk_size>
   18ad4:	42a0      	cmp	r0, r4
   18ad6:	d909      	bls.n	18aec <sys_heap_alloc+0x50>
		split_chunks(h, c, c + chunk_sz);
   18ad8:	4434      	add	r4, r6
   18ada:	4631      	mov	r1, r6
   18adc:	4628      	mov	r0, r5
   18ade:	4622      	mov	r2, r4
   18ae0:	f7ff fe99 	bl	18816 <split_chunks>
		free_list_add(h, c + chunk_sz);
   18ae4:	4621      	mov	r1, r4
   18ae6:	4628      	mov	r0, r5
   18ae8:	f7ff ff3b 	bl	18962 <free_list_add>
	set_chunk_used(h, c, true);
   18aec:	4628      	mov	r0, r5
   18aee:	2201      	movs	r2, #1
   18af0:	4631      	mov	r1, r6
   18af2:	f7ff fe49 	bl	18788 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   18af6:	68ab      	ldr	r3, [r5, #8]
   18af8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   18afc:	bf2c      	ite	cs
   18afe:	2008      	movcs	r0, #8
   18b00:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   18b02:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   18b06:	4428      	add	r0, r5
	return chunk_mem(h, c);
   18b08:	e7cc      	b.n	18aa4 <sys_heap_alloc+0x8>

00018b0a <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   18b0a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;
   18b0e:	6806      	ldr	r6, [r0, #0]
{
   18b10:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   18b12:	424a      	negs	r2, r1
   18b14:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   18b18:	ea31 0202 	bics.w	r2, r1, r2
   18b1c:	68b5      	ldr	r5, [r6, #8]
{
   18b1e:	460b      	mov	r3, r1
	if (align != rew) {
   18b20:	d00f      	beq.n	18b42 <sys_heap_aligned_alloc+0x38>
   18b22:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   18b26:	bf34      	ite	cc
   18b28:	2104      	movcc	r1, #4
   18b2a:	2108      	movcs	r1, #8
   18b2c:	42b9      	cmp	r1, r7
   18b2e:	460a      	mov	r2, r1
   18b30:	46b9      	mov	r9, r7
   18b32:	bf28      	it	cs
   18b34:	463a      	movcs	r2, r7
		align -= rew;
   18b36:	1bdf      	subs	r7, r3, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   18b38:	b994      	cbnz	r4, 18b60 <sys_heap_aligned_alloc+0x56>
		return NULL;
   18b3a:	2500      	movs	r5, #0
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   18b3c:	4628      	mov	r0, r5
   18b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18b42:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   18b46:	bf34      	ite	cc
   18b48:	2204      	movcc	r2, #4
   18b4a:	2208      	movcs	r2, #8
		if (align <= chunk_header_bytes(h)) {
   18b4c:	4291      	cmp	r1, r2
   18b4e:	d804      	bhi.n	18b5a <sys_heap_aligned_alloc+0x50>
			return sys_heap_alloc(heap, bytes);
   18b50:	4621      	mov	r1, r4
}
   18b52:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   18b56:	f7ff bfa1 	b.w	18a9c <sys_heap_alloc>
		rew = 0;
   18b5a:	f04f 0900 	mov.w	r9, #0
   18b5e:	e7eb      	b.n	18b38 <sys_heap_aligned_alloc+0x2e>
	if (bytes == 0 || size_too_big(h, bytes)) {
   18b60:	ebb5 0fd4 	cmp.w	r5, r4, lsr #3
   18b64:	d9e9      	bls.n	18b3a <sys_heap_aligned_alloc+0x30>
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   18b66:	1de1      	adds	r1, r4, #7
   18b68:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   18b6c:	4439      	add	r1, r7
   18b6e:	bf2c      	ite	cs
   18b70:	2308      	movcs	r3, #8
   18b72:	2304      	movcc	r3, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   18b74:	1a89      	subs	r1, r1, r2
   18b76:	4419      	add	r1, r3
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   18b78:	08c9      	lsrs	r1, r1, #3
   18b7a:	4630      	mov	r0, r6
   18b7c:	f7ff feb8 	bl	188f0 <alloc_chunk>
	if (c0 == 0) {
   18b80:	4680      	mov	r8, r0
   18b82:	2800      	cmp	r0, #0
   18b84:	d0d9      	beq.n	18b3a <sys_heap_aligned_alloc+0x30>
	return big_heap(h) ? 8 : 4;
   18b86:	68b3      	ldr	r3, [r6, #8]
   18b88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   18b8c:	bf2c      	ite	cs
   18b8e:	2308      	movcs	r3, #8
   18b90:	2304      	movcc	r3, #4
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   18b92:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
   18b96:	441d      	add	r5, r3
   18b98:	1e7a      	subs	r2, r7, #1
   18b9a:	4435      	add	r5, r6
   18b9c:	427f      	negs	r7, r7
   18b9e:	4415      	add	r5, r2
   18ba0:	403d      	ands	r5, r7
   18ba2:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   18ba6:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   18ba8:	1aeb      	subs	r3, r5, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   18baa:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   18bac:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   18bae:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   18bb2:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   18bb4:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   18bb8:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   18bbc:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   18bc0:	d208      	bcs.n	18bd4 <sys_heap_aligned_alloc+0xca>
		split_chunks(h, c0, c);
   18bc2:	4601      	mov	r1, r0
   18bc4:	463a      	mov	r2, r7
   18bc6:	4630      	mov	r0, r6
   18bc8:	f7ff fe25 	bl	18816 <split_chunks>
		free_list_add(h, c0);
   18bcc:	4641      	mov	r1, r8
   18bce:	4630      	mov	r0, r6
   18bd0:	f7ff fec7 	bl	18962 <free_list_add>
	return c + chunk_size(h, c);
   18bd4:	4639      	mov	r1, r7
   18bd6:	4630      	mov	r0, r6
   18bd8:	f7ff fdd0 	bl	1877c <chunk_size>
   18bdc:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   18bde:	4284      	cmp	r4, r0
   18be0:	d208      	bcs.n	18bf4 <sys_heap_aligned_alloc+0xea>
		split_chunks(h, c, c_end);
   18be2:	4639      	mov	r1, r7
   18be4:	4630      	mov	r0, r6
   18be6:	4622      	mov	r2, r4
   18be8:	f7ff fe15 	bl	18816 <split_chunks>
		free_list_add(h, c_end);
   18bec:	4621      	mov	r1, r4
   18bee:	4630      	mov	r0, r6
   18bf0:	f7ff feb7 	bl	18962 <free_list_add>
	set_chunk_used(h, c, true);
   18bf4:	2201      	movs	r2, #1
   18bf6:	4639      	mov	r1, r7
   18bf8:	4630      	mov	r0, r6
   18bfa:	f7ff fdc5 	bl	18788 <set_chunk_used>
	return mem;
   18bfe:	e79d      	b.n	18b3c <sys_heap_aligned_alloc+0x32>

00018c00 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   18c00:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   18c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18c06:	bf2c      	ite	cs
   18c08:	2508      	movcs	r5, #8
   18c0a:	2504      	movcc	r5, #4
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   18c0c:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   18c0e:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   18c10:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   18c12:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   18c16:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   18c1a:	1b2d      	subs	r5, r5, r4
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   18c1c:	2300      	movs	r3, #0
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   18c1e:	08ed      	lsrs	r5, r5, #3
	heap->heap = h;
   18c20:	6004      	str	r4, [r0, #0]

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   18c22:	4629      	mov	r1, r5
	h->end_chunk = heap_sz;
   18c24:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   18c26:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   18c28:	4620      	mov	r0, r4
   18c2a:	f7ff fdc9 	bl	187c0 <bucket_idx>
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   18c2e:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   18c30:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   18c32:	1c41      	adds	r1, r0, #1
   18c34:	08f6      	lsrs	r6, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   18c36:	f104 0210 	add.w	r2, r4, #16
		h->buckets[i].next = 0;
   18c3a:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
   18c3c:	428b      	cmp	r3, r1
   18c3e:	db2f      	blt.n	18ca0 <sys_heap_init+0xa0>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   18c40:	4632      	mov	r2, r6
   18c42:	4620      	mov	r0, r4
   18c44:	2100      	movs	r1, #0
   18c46:	f7ff fdb7 	bl	187b8 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   18c4a:	2300      	movs	r3, #0
   18c4c:	461a      	mov	r2, r3
   18c4e:	4619      	mov	r1, r3
   18c50:	4620      	mov	r0, r4
   18c52:	f7ff fd88 	bl	18766 <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   18c56:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   18c58:	4620      	mov	r0, r4
   18c5a:	2201      	movs	r2, #1
   18c5c:	2100      	movs	r1, #0
   18c5e:	f7ff fd93 	bl	18788 <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   18c62:	463a      	mov	r2, r7
   18c64:	4631      	mov	r1, r6
   18c66:	f7ff fda7 	bl	187b8 <set_chunk_size>
   18c6a:	4633      	mov	r3, r6
   18c6c:	4631      	mov	r1, r6
   18c6e:	4620      	mov	r0, r4
   18c70:	2200      	movs	r2, #0
   18c72:	f7ff fd78 	bl	18766 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
   18c76:	4629      	mov	r1, r5
   18c78:	4620      	mov	r0, r4
   18c7a:	2200      	movs	r2, #0
   18c7c:	f7ff fd9c 	bl	187b8 <set_chunk_size>
   18c80:	463b      	mov	r3, r7
   18c82:	4629      	mov	r1, r5
   18c84:	4620      	mov	r0, r4
   18c86:	2200      	movs	r2, #0
   18c88:	f7ff fd6d 	bl	18766 <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
   18c8c:	4629      	mov	r1, r5
   18c8e:	4620      	mov	r0, r4
   18c90:	2201      	movs	r2, #1
   18c92:	f7ff fd79 	bl	18788 <set_chunk_used>

	free_list_add(h, chunk0_size);
   18c96:	4631      	mov	r1, r6
}
   18c98:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   18c9c:	f7ff be61 	b.w	18962 <free_list_add>
		h->buckets[i].next = 0;
   18ca0:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   18ca4:	3301      	adds	r3, #1
   18ca6:	e7c9      	b.n	18c3c <sys_heap_init+0x3c>

00018ca8 <encode_uint>:
{
   18ca8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18cac:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   18cae:	78d3      	ldrb	r3, [r2, #3]
{
   18cb0:	4614      	mov	r4, r2
	switch (specifier) {
   18cb2:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   18cb4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
   18cb8:	4606      	mov	r6, r0
   18cba:	460f      	mov	r7, r1
   18cbc:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   18cbe:	d02d      	beq.n	18d1c <encode_uint+0x74>
   18cc0:	d828      	bhi.n	18d14 <encode_uint+0x6c>
		return 16;
   18cc2:	2b58      	cmp	r3, #88	; 0x58
   18cc4:	bf14      	ite	ne
   18cc6:	250a      	movne	r5, #10
   18cc8:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
   18cca:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   18cce:	46aa      	mov	sl, r5
   18cd0:	f04f 0b00 	mov.w	fp, #0
   18cd4:	4652      	mov	r2, sl
   18cd6:	465b      	mov	r3, fp
   18cd8:	4630      	mov	r0, r6
   18cda:	4639      	mov	r1, r7
   18cdc:	f7e7 fa00 	bl	e0 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   18ce0:	2a09      	cmp	r2, #9
   18ce2:	b2d3      	uxtb	r3, r2
   18ce4:	d81f      	bhi.n	18d26 <encode_uint+0x7e>
   18ce6:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   18ce8:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   18cea:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   18cec:	bf08      	it	eq
   18cee:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   18cf0:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   18cf4:	d301      	bcc.n	18cfa <encode_uint+0x52>
   18cf6:	45c8      	cmp	r8, r9
   18cf8:	d812      	bhi.n	18d20 <encode_uint+0x78>
	if (conv->flag_hash) {
   18cfa:	7823      	ldrb	r3, [r4, #0]
   18cfc:	069b      	lsls	r3, r3, #26
   18cfe:	d505      	bpl.n	18d0c <encode_uint+0x64>
		if (radix == 8) {
   18d00:	2d08      	cmp	r5, #8
   18d02:	d116      	bne.n	18d32 <encode_uint+0x8a>
			conv->altform_0 = true;
   18d04:	78a3      	ldrb	r3, [r4, #2]
   18d06:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   18d0a:	70a3      	strb	r3, [r4, #2]
}
   18d0c:	4640      	mov	r0, r8
   18d0e:	b003      	add	sp, #12
   18d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   18d14:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   18d18:	2b70      	cmp	r3, #112	; 0x70
   18d1a:	e7d3      	b.n	18cc4 <encode_uint+0x1c>
	switch (specifier) {
   18d1c:	2508      	movs	r5, #8
   18d1e:	e7d4      	b.n	18cca <encode_uint+0x22>
		value /= radix;
   18d20:	4606      	mov	r6, r0
   18d22:	460f      	mov	r7, r1
   18d24:	e7d6      	b.n	18cd4 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   18d26:	9a01      	ldr	r2, [sp, #4]
   18d28:	2a19      	cmp	r2, #25
   18d2a:	bf94      	ite	ls
   18d2c:	3337      	addls	r3, #55	; 0x37
   18d2e:	3357      	addhi	r3, #87	; 0x57
   18d30:	e7da      	b.n	18ce8 <encode_uint+0x40>
		} else if (radix == 16) {
   18d32:	2d10      	cmp	r5, #16
   18d34:	d1ea      	bne.n	18d0c <encode_uint+0x64>
			conv->altform_0c = true;
   18d36:	78a3      	ldrb	r3, [r4, #2]
   18d38:	f043 0310 	orr.w	r3, r3, #16
   18d3c:	e7e5      	b.n	18d0a <encode_uint+0x62>

00018d3e <outs>:
{
   18d3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18d42:	4607      	mov	r7, r0
   18d44:	4688      	mov	r8, r1
   18d46:	4615      	mov	r5, r2
   18d48:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   18d4a:	4614      	mov	r4, r2
   18d4c:	42b4      	cmp	r4, r6
   18d4e:	eba4 0005 	sub.w	r0, r4, r5
   18d52:	d302      	bcc.n	18d5a <outs+0x1c>
   18d54:	b93e      	cbnz	r6, 18d66 <outs+0x28>
   18d56:	7823      	ldrb	r3, [r4, #0]
   18d58:	b12b      	cbz	r3, 18d66 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   18d5a:	f814 0b01 	ldrb.w	r0, [r4], #1
   18d5e:	4641      	mov	r1, r8
   18d60:	47b8      	blx	r7
		if (rc < 0) {
   18d62:	2800      	cmp	r0, #0
   18d64:	daf2      	bge.n	18d4c <outs+0xe>
}
   18d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00018d6a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   18d6a:	4770      	bx	lr

00018d6c <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   18d6c:	2300      	movs	r3, #0
	list->head = NULL;
   18d6e:	e9c0 3300 	strd	r3, r3, [r0]
}
   18d72:	4770      	bx	lr

00018d74 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   18d74:	6803      	ldr	r3, [r0, #0]
   18d76:	b923      	cbnz	r3, 18d82 <log_list_add_tail+0xe>
		list->head = msg;
   18d78:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   18d7a:	2300      	movs	r3, #0
	list->tail = msg;
   18d7c:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   18d7e:	600b      	str	r3, [r1, #0]
}
   18d80:	4770      	bx	lr
		list->tail->next = msg;
   18d82:	6843      	ldr	r3, [r0, #4]
   18d84:	6019      	str	r1, [r3, #0]
   18d86:	e7f8      	b.n	18d7a <log_list_add_tail+0x6>

00018d88 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   18d88:	6800      	ldr	r0, [r0, #0]
   18d8a:	4770      	bx	lr

00018d8c <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   18d8c:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   18d8e:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   18d90:	b108      	cbz	r0, 18d96 <log_list_head_get+0xa>
		list->head = list->head->next;
   18d92:	6802      	ldr	r2, [r0, #0]
   18d94:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   18d96:	4770      	bx	lr

00018d98 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   18d98:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   18d9a:	f7e9 fc7b 	bl	2694 <log_msg_chunk_alloc>

	if (msg != NULL) {
   18d9e:	b118      	cbz	r0, 18da8 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   18da0:	2301      	movs	r3, #1
   18da2:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   18da4:	2300      	movs	r3, #0
   18da6:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   18da8:	bd08      	pop	{r3, pc}

00018daa <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   18daa:	f7ea bb01 	b.w	33b0 <sys_clock_cycle_get_32>

00018dae <dummy_timestamp>:
   18dae:	2000      	movs	r0, #0
   18db0:	4770      	bx	lr

00018db2 <z_log_get_s_mask>:
{
   18db2:	b5f0      	push	{r4, r5, r6, r7, lr}
   18db4:	4605      	mov	r5, r0
	uint32_t mask = 0U;
   18db6:	2000      	movs	r0, #0
	uint32_t arg = 0U;
   18db8:	4603      	mov	r3, r0
	bool arm = false;
   18dba:	4602      	mov	r2, r0
				mask |= BIT(arg);
   18dbc:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
   18dbe:	f815 4b01 	ldrb.w	r4, [r5], #1
   18dc2:	b10c      	cbz	r4, 18dc8 <z_log_get_s_mask+0x16>
   18dc4:	428b      	cmp	r3, r1
   18dc6:	d300      	bcc.n	18dca <z_log_get_s_mask+0x18>
}
   18dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   18dca:	2c25      	cmp	r4, #37	; 0x25
   18dcc:	d102      	bne.n	18dd4 <z_log_get_s_mask+0x22>
			arm = !arm;
   18dce:	f082 0201 	eor.w	r2, r2, #1
   18dd2:	e7f4      	b.n	18dbe <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   18dd4:	2a00      	cmp	r2, #0
   18dd6:	d0f2      	beq.n	18dbe <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   18dd8:	f044 0620 	orr.w	r6, r4, #32
   18ddc:	3e61      	subs	r6, #97	; 0x61
   18dde:	2e19      	cmp	r6, #25
   18de0:	d8ed      	bhi.n	18dbe <z_log_get_s_mask+0xc>
			if (curr == 's') {
   18de2:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   18de4:	bf04      	itt	eq
   18de6:	fa07 f203 	lsleq.w	r2, r7, r3
   18dea:	4310      	orreq	r0, r2
			arg++;
   18dec:	3301      	adds	r3, #1
			arm = false;
   18dee:	2200      	movs	r2, #0
   18df0:	e7e5      	b.n	18dbe <z_log_get_s_mask+0xc>

00018df2 <log_0>:
{
   18df2:	b538      	push	{r3, r4, r5, lr}
   18df4:	4605      	mov	r5, r0
   18df6:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   18df8:	f7ff ffce 	bl	18d98 <z_log_msg_std_alloc>

	if (msg != NULL) {
   18dfc:	b128      	cbz	r0, 18e0a <log_0+0x18>
		msg->str = str;
   18dfe:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   18e00:	4621      	mov	r1, r4
}
   18e02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   18e06:	f7e9 bb5f 	b.w	24c8 <msg_finalize>
}
   18e0a:	bd38      	pop	{r3, r4, r5, pc}

00018e0c <log_1>:
{
   18e0c:	b570      	push	{r4, r5, r6, lr}
   18e0e:	4606      	mov	r6, r0
   18e10:	460d      	mov	r5, r1
   18e12:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   18e14:	f7ff ffc0 	bl	18d98 <z_log_msg_std_alloc>

	if (msg != NULL) {
   18e18:	b158      	cbz	r0, 18e32 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   18e1a:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   18e1c:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   18e1e:	2101      	movs	r1, #1
   18e20:	f361 1207 	bfi	r2, r1, #4, #4
   18e24:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   18e26:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
   18e28:	4621      	mov	r1, r4
}
   18e2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   18e2e:	f7e9 bb4b 	b.w	24c8 <msg_finalize>
}
   18e32:	bd70      	pop	{r4, r5, r6, pc}

00018e34 <log_2>:
{
   18e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18e38:	4680      	mov	r8, r0
   18e3a:	460f      	mov	r7, r1
   18e3c:	4616      	mov	r6, r2
   18e3e:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   18e40:	f7ff ffaa 	bl	18d98 <z_log_msg_std_alloc>

	if (msg != NULL) {
   18e44:	b168      	cbz	r0, 18e62 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   18e46:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   18e48:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   18e4c:	2202      	movs	r2, #2
   18e4e:	f362 1307 	bfi	r3, r2, #4, #4
   18e52:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   18e54:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
   18e58:	4629      	mov	r1, r5
}
   18e5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   18e5e:	f7e9 bb33 	b.w	24c8 <msg_finalize>
}
   18e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00018e66 <log_3>:
{
   18e66:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18e6a:	4680      	mov	r8, r0
   18e6c:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   18e70:	460f      	mov	r7, r1
   18e72:	4616      	mov	r6, r2
   18e74:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   18e76:	f7ff ff8f 	bl	18d98 <z_log_msg_std_alloc>

	if (msg != NULL) {
   18e7a:	b170      	cbz	r0, 18e9a <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   18e7c:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   18e7e:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   18e82:	2203      	movs	r2, #3
   18e84:	f362 1307 	bfi	r3, r2, #4, #4
   18e88:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   18e8a:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
   18e8e:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
   18e90:	4649      	mov	r1, r9
}
   18e92:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   18e96:	f7e9 bb17 	b.w	24c8 <msg_finalize>
}
   18e9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00018e9e <log_n>:
{
   18e9e:	b510      	push	{r4, lr}
   18ea0:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   18ea2:	f000 f8b9 	bl	19018 <log_msg_create_n>
		if (msg == NULL) {
   18ea6:	b120      	cbz	r0, 18eb2 <log_n+0x14>
		msg_finalize(msg, src_level);
   18ea8:	4621      	mov	r1, r4
}
   18eaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   18eae:	f7e9 bb0b 	b.w	24c8 <msg_finalize>
}
   18eb2:	bd10      	pop	{r4, pc}

00018eb4 <z_log_printk>:
{
   18eb4:	b500      	push	{lr}
   18eb6:	b0a3      	sub	sp, #140	; 0x8c
   18eb8:	4602      	mov	r2, r0
   18eba:	460b      	mov	r3, r1
			length = vsnprintk(str, sizeof(str), fmt, ap);
   18ebc:	a801      	add	r0, sp, #4
   18ebe:	2181      	movs	r1, #129	; 0x81
   18ec0:	f7e8 fc5a 	bl	1778 <vsnprintk>
			msg = log_msg_hexdump_create(NULL, str, length);
   18ec4:	2881      	cmp	r0, #129	; 0x81
   18ec6:	4602      	mov	r2, r0
   18ec8:	a901      	add	r1, sp, #4
   18eca:	bf28      	it	cs
   18ecc:	2281      	movcs	r2, #129	; 0x81
   18ece:	2000      	movs	r0, #0
   18ed0:	f000 f8f6 	bl	190c0 <log_msg_hexdump_create>
			if (msg == NULL) {
   18ed4:	b118      	cbz	r0, 18ede <z_log_printk+0x2a>
			msg_finalize(msg, src_level_union.structure);
   18ed6:	f04f 0100 	mov.w	r1, #0
   18eda:	f7e9 faf5 	bl	24c8 <msg_finalize>
}
   18ede:	b023      	add	sp, #140	; 0x8c
   18ee0:	f85d fb04 	ldr.w	pc, [sp], #4

00018ee4 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   18ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18ee8:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   18eea:	8903      	ldrh	r3, [r0, #8]
{
   18eec:	f89d 7020 	ldrb.w	r7, [sp, #32]
   18ef0:	460e      	mov	r6, r1
   18ef2:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   18ef4:	f3c3 028d 	ubfx	r2, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   18ef8:	42a2      	cmp	r2, r4
   18efa:	d803      	bhi.n	18f04 <log_msg_hexdump_data_op+0x20>
		*length = 0;
   18efc:	2300      	movs	r3, #0
   18efe:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   18f00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   18f04:	680b      	ldr	r3, [r1, #0]
   18f06:	4423      	add	r3, r4
   18f08:	4293      	cmp	r3, r2
		*length = available_len - offset;
   18f0a:	bf84      	itt	hi
   18f0c:	1b13      	subhi	r3, r2, r4
   18f0e:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   18f10:	2a0c      	cmp	r2, #12
	req_len = *length;
   18f12:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   18f16:	d92a      	bls.n	18f6e <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   18f18:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   18f1a:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   18f1e:	d82d      	bhi.n	18f7c <log_msg_hexdump_data_op+0x98>
		head_data = msg->payload.ext.data.bytes;
   18f20:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   18f22:	2208      	movs	r2, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   18f24:	454a      	cmp	r2, r9
   18f26:	bf28      	it	cs
   18f28:	464a      	movcs	r2, r9
   18f2a:	4615      	mov	r5, r2
		if (put_op) {
   18f2c:	4420      	add	r0, r4
   18f2e:	b317      	cbz	r7, 18f76 <log_msg_hexdump_data_op+0x92>
			(void)memcpy(&head_data[offset], data, cpy_len);
   18f30:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   18f32:	f000 fe37 	bl	19ba4 <memcpy>
		req_len -= cpy_len;
   18f36:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   18f3a:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   18f3c:	f1b9 0f00 	cmp.w	r9, #0
   18f40:	d0de      	beq.n	18f00 <log_msg_hexdump_data_op+0x1c>
   18f42:	f1b8 0f00 	cmp.w	r8, #0
   18f46:	d0db      	beq.n	18f00 <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   18f48:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   18f4c:	454d      	cmp	r5, r9
   18f4e:	bf28      	it	cs
   18f50:	464d      	movcs	r5, r9
		if (put_op) {
   18f52:	1d20      	adds	r0, r4, #4
   18f54:	4440      	add	r0, r8
			(void)memcpy(&cont->payload.bytes[offset],
   18f56:	462a      	mov	r2, r5
		if (put_op) {
   18f58:	b1bf      	cbz	r7, 18f8a <log_msg_hexdump_data_op+0xa6>
			(void)memcpy(&cont->payload.bytes[offset],
   18f5a:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   18f5c:	f000 fe22 	bl	19ba4 <memcpy>
		req_len -= cpy_len;
   18f60:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   18f64:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
   18f68:	442e      	add	r6, r5
		offset = 0;
   18f6a:	2400      	movs	r4, #0
   18f6c:	e7e6      	b.n	18f3c <log_msg_hexdump_data_op+0x58>
		head_data = msg->payload.single.bytes;
   18f6e:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   18f70:	f04f 0800 	mov.w	r8, #0
   18f74:	e7d6      	b.n	18f24 <log_msg_hexdump_data_op+0x40>
			(void)memcpy(data, &head_data[offset], cpy_len);
   18f76:	4601      	mov	r1, r0
   18f78:	4630      	mov	r0, r6
   18f7a:	e7da      	b.n	18f32 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   18f7c:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   18f7e:	2c1b      	cmp	r4, #27
   18f80:	d9dc      	bls.n	18f3c <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   18f82:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   18f86:	3c1c      	subs	r4, #28
   18f88:	e7f9      	b.n	18f7e <log_msg_hexdump_data_op+0x9a>
			(void)memcpy(data, &cont->payload.bytes[offset],
   18f8a:	4601      	mov	r1, r0
   18f8c:	4630      	mov	r0, r6
   18f8e:	e7e5      	b.n	18f5c <log_msg_hexdump_data_op+0x78>

00018f90 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   18f90:	3004      	adds	r0, #4
   18f92:	f3bf 8f5b 	dmb	ish
   18f96:	e850 3f00 	ldrex	r3, [r0]
   18f9a:	3301      	adds	r3, #1
   18f9c:	e840 3200 	strex	r2, r3, [r0]
   18fa0:	2a00      	cmp	r2, #0
   18fa2:	d1f8      	bne.n	18f96 <log_msg_get+0x6>
   18fa4:	f3bf 8f5b 	dmb	ish
}
   18fa8:	4770      	bx	lr

00018faa <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   18faa:	7a40      	ldrb	r0, [r0, #9]
}
   18fac:	0900      	lsrs	r0, r0, #4
   18fae:	4770      	bx	lr

00018fb0 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   18fb0:	7a43      	ldrb	r3, [r0, #9]
   18fb2:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   18fb6:	ea4f 1213 	mov.w	r2, r3, lsr #4
   18fba:	d216      	bcs.n	18fea <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   18fbc:	2a03      	cmp	r2, #3
   18fbe:	d803      	bhi.n	18fc8 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   18fc0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   18fc4:	6948      	ldr	r0, [r1, #20]
   18fc6:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   18fc8:	2901      	cmp	r1, #1
   18fca:	d803      	bhi.n	18fd4 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   18fcc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   18fd0:	6988      	ldr	r0, [r1, #24]
   18fd2:	4770      	bx	lr
	cont = msg->payload.ext.next;
   18fd4:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   18fd6:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   18fd8:	2906      	cmp	r1, #6
   18fda:	d803      	bhi.n	18fe4 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   18fdc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   18fe0:	6848      	ldr	r0, [r1, #4]
   18fe2:	4770      	bx	lr
		cont = cont->next;
   18fe4:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   18fe6:	3907      	subs	r1, #7
		cont = cont->next;
   18fe8:	e7f6      	b.n	18fd8 <log_msg_arg_get+0x28>
		return 0;
   18fea:	2000      	movs	r0, #0
}
   18fec:	4770      	bx	lr

00018fee <log_msg_put>:
{
   18fee:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   18ff0:	1d02      	adds	r2, r0, #4
   18ff2:	f3bf 8f5b 	dmb	ish
   18ff6:	e852 1f00 	ldrex	r1, [r2]
   18ffa:	3901      	subs	r1, #1
   18ffc:	e842 1c00 	strex	ip, r1, [r2]
   19000:	f1bc 0f00 	cmp.w	ip, #0
   19004:	d1f7      	bne.n	18ff6 <log_msg_put+0x8>
   19006:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   1900a:	685b      	ldr	r3, [r3, #4]
   1900c:	b90b      	cbnz	r3, 19012 <log_msg_put+0x24>
		msg_free(msg);
   1900e:	f7e9 bb55 	b.w	26bc <msg_free>
}
   19012:	4770      	bx	lr

00019014 <log_msg_str_get>:
}
   19014:	6900      	ldr	r0, [r0, #16]
   19016:	4770      	bx	lr

00019018 <log_msg_create_n>:
{
   19018:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1901c:	4681      	mov	r9, r0
   1901e:	4688      	mov	r8, r1
   19020:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   19022:	f7e9 fb37 	bl	2694 <log_msg_chunk_alloc>
	if (msg != NULL) {
   19026:	4604      	mov	r4, r0
   19028:	b330      	cbz	r0, 19078 <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   1902a:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   1902c:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1902e:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   19030:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   19032:	8107      	strh	r7, [r0, #8]
   19034:	d909      	bls.n	1904a <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   19036:	2202      	movs	r2, #2
   19038:	8102      	strh	r2, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   1903a:	f1a5 0a02 	sub.w	sl, r5, #2
	next = &msg->payload.ext.next;
   1903e:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   19042:	6147      	str	r7, [r0, #20]
	while (n > 0) {
   19044:	f1ba 0f00 	cmp.w	sl, #0
   19048:	dc0e      	bgt.n	19068 <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
   1904a:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
   1904c:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   19050:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   19054:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   19056:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   19058:	d818      	bhi.n	1908c <log_msg_create_n+0x74>
		(void)memcpy(msg->payload.single.args, args,
   1905a:	00aa      	lsls	r2, r5, #2
   1905c:	4641      	mov	r1, r8
   1905e:	f104 0014 	add.w	r0, r4, #20
   19062:	f000 fd9f 	bl	19ba4 <memcpy>
	while (nargs != 0U) {
   19066:	e007      	b.n	19078 <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   19068:	f7e9 fb14 	bl	2694 <log_msg_chunk_alloc>
		if (cont == NULL) {
   1906c:	4606      	mov	r6, r0
   1906e:	b930      	cbnz	r0, 1907e <log_msg_create_n+0x66>
			msg_free(msg);
   19070:	4620      	mov	r0, r4
   19072:	f7e9 fb23 	bl	26bc <msg_free>
			return NULL;
   19076:	4634      	mov	r4, r6
}
   19078:	4620      	mov	r0, r4
   1907a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   1907e:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   19082:	f1aa 0a07 	sub.w	sl, sl, #7
   19086:	6007      	str	r7, [r0, #0]
		next = &cont->next;
   19088:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   1908a:	e7db      	b.n	19044 <log_msg_create_n+0x2c>
		(void)memcpy(msg->payload.ext.data.args, args,
   1908c:	4641      	mov	r1, r8
   1908e:	2208      	movs	r2, #8
   19090:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   19094:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   19096:	f000 fd85 	bl	19ba4 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   1909a:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   1909c:	f108 0808 	add.w	r8, r8, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   190a0:	2d07      	cmp	r5, #7
   190a2:	462e      	mov	r6, r5
   190a4:	bf28      	it	cs
   190a6:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   190a8:	ea4f 0986 	mov.w	r9, r6, lsl #2
   190ac:	4641      	mov	r1, r8
   190ae:	1d38      	adds	r0, r7, #4
   190b0:	464a      	mov	r2, r9
   190b2:	f000 fd77 	bl	19ba4 <memcpy>
	while (nargs != 0U) {
   190b6:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   190b8:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
   190ba:	44c8      	add	r8, r9
	while (nargs != 0U) {
   190bc:	d1f0      	bne.n	190a0 <log_msg_create_n+0x88>
   190be:	e7db      	b.n	19078 <log_msg_create_n+0x60>

000190c0 <log_msg_hexdump_create>:
{
   190c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   190c4:	f643 75ff 	movw	r5, #16383	; 0x3fff
   190c8:	4295      	cmp	r5, r2
{
   190ca:	4680      	mov	r8, r0
   190cc:	460e      	mov	r6, r1
   190ce:	4617      	mov	r7, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   190d0:	bf28      	it	cs
   190d2:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
   190d4:	f7e9 fade 	bl	2694 <log_msg_chunk_alloc>
	if (msg == NULL) {
   190d8:	4604      	mov	r4, r0
   190da:	b380      	cbz	r0, 1913e <log_msg_hexdump_create+0x7e>
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   190dc:	8902      	ldrh	r2, [r0, #8]
	msg->str = str;
   190de:	f8c0 8010 	str.w	r8, [r0, #16]
	msg->hdr.ref_cnt = 1;
   190e2:	2301      	movs	r3, #1
   190e4:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   190e6:	00ab      	lsls	r3, r5, #2
   190e8:	f043 0301 	orr.w	r3, r3, #1
   190ec:	f002 0202 	and.w	r2, r2, #2
   190f0:	4313      	orrs	r3, r2
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   190f2:	2f0c      	cmp	r7, #12
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   190f4:	8103      	strh	r3, [r0, #8]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   190f6:	f100 0814 	add.w	r8, r0, #20
   190fa:	d917      	bls.n	1912c <log_msg_hexdump_create+0x6c>
		(void)memcpy(msg->payload.ext.data.bytes,
   190fc:	2208      	movs	r2, #8
   190fe:	4631      	mov	r1, r6
   19100:	3018      	adds	r0, #24
   19102:	f000 fd4f 	bl	19ba4 <memcpy>
		msg->hdr.params.generic.ext = 1;
   19106:	7a22      	ldrb	r2, [r4, #8]
		msg->payload.ext.next = NULL;
   19108:	2300      	movs	r3, #0
		msg->hdr.params.generic.ext = 1;
   1910a:	f042 0202 	orr.w	r2, r2, #2
		msg->payload.ext.next = NULL;
   1910e:	6163      	str	r3, [r4, #20]
		msg->hdr.params.generic.ext = 1;
   19110:	7222      	strb	r2, [r4, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   19112:	3608      	adds	r6, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   19114:	3d08      	subs	r5, #8
	while (length > 0) {
   19116:	4699      	mov	r9, r3
   19118:	b18d      	cbz	r5, 1913e <log_msg_hexdump_create+0x7e>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1911a:	f7e9 fabb 	bl	2694 <log_msg_chunk_alloc>
		if (cont == NULL) {
   1911e:	4607      	mov	r7, r0
   19120:	b980      	cbnz	r0, 19144 <log_msg_hexdump_create+0x84>
			msg_free(msg);
   19122:	4620      	mov	r0, r4
   19124:	f7e9 faca 	bl	26bc <msg_free>
			return NULL;
   19128:	463c      	mov	r4, r7
   1912a:	e008      	b.n	1913e <log_msg_hexdump_create+0x7e>
		(void)memcpy(msg->payload.single.bytes, data, length);
   1912c:	462a      	mov	r2, r5
   1912e:	4631      	mov	r1, r6
   19130:	4640      	mov	r0, r8
   19132:	f000 fd37 	bl	19ba4 <memcpy>
		msg->hdr.params.generic.ext = 0;
   19136:	7a23      	ldrb	r3, [r4, #8]
   19138:	f36f 0341 	bfc	r3, #1, #1
   1913c:	7223      	strb	r3, [r4, #8]
}
   1913e:	4620      	mov	r0, r4
   19140:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
   19144:	2d1c      	cmp	r5, #28
   19146:	462f      	mov	r7, r5
   19148:	bf28      	it	cs
   1914a:	271c      	movcs	r7, #28
		*prev_cont = cont;
   1914c:	f8c8 0000 	str.w	r0, [r8]
		(void)memcpy(cont->payload.bytes, data, chunk_length);
   19150:	4631      	mov	r1, r6
		cont->next = NULL;
   19152:	f8c0 9000 	str.w	r9, [r0]
		prev_cont = &cont->next;
   19156:	4680      	mov	r8, r0
		(void)memcpy(cont->payload.bytes, data, chunk_length);
   19158:	463a      	mov	r2, r7
   1915a:	3004      	adds	r0, #4
   1915c:	f000 fd22 	bl	19ba4 <memcpy>
		data += chunk_length;
   19160:	443e      	add	r6, r7
		length -= chunk_length;
   19162:	1bed      	subs	r5, r5, r7
   19164:	e7d8      	b.n	19118 <log_msg_hexdump_create+0x58>

00019166 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   19166:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   19168:	2400      	movs	r4, #0
   1916a:	9400      	str	r4, [sp, #0]
   1916c:	f7ff feba 	bl	18ee4 <log_msg_hexdump_data_op>
}
   19170:	b002      	add	sp, #8
   19172:	bd10      	pop	{r4, pc}

00019174 <buffer_write>:
{
   19174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19176:	4606      	mov	r6, r0
   19178:	460d      	mov	r5, r1
   1917a:	4614      	mov	r4, r2
   1917c:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   1917e:	4621      	mov	r1, r4
   19180:	4628      	mov	r0, r5
   19182:	463a      	mov	r2, r7
   19184:	47b0      	blx	r6
	} while (len != 0);
   19186:	1a24      	subs	r4, r4, r0
		buf += processed;
   19188:	4405      	add	r5, r0
	} while (len != 0);
   1918a:	d1f8      	bne.n	1917e <buffer_write+0xa>
}
   1918c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001918e <std_print>:
{
   1918e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19192:	b08e      	sub	sp, #56	; 0x38
   19194:	af0e      	add	r7, sp, #56	; 0x38
   19196:	4680      	mov	r8, r0
   19198:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   1919a:	f7ff ff3b 	bl	19014 <log_msg_str_get>
   1919e:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   191a0:	4640      	mov	r0, r8
   191a2:	f7ff ff02 	bl	18faa <log_msg_nargs_get>
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   191a6:	0083      	lsls	r3, r0, #2
   191a8:	3307      	adds	r3, #7
   191aa:	f023 0307 	bic.w	r3, r3, #7
   191ae:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
   191b2:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   191b4:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   191b6:	f04f 0900 	mov.w	r9, #0
   191ba:	45d1      	cmp	r9, sl
   191bc:	d116      	bne.n	191ec <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   191be:	4640      	mov	r0, r8
   191c0:	f7ff fef3 	bl	18faa <log_msg_nargs_get>
   191c4:	280f      	cmp	r0, #15
   191c6:	d81e      	bhi.n	19206 <std_print+0x78>
   191c8:	e8df f010 	tbh	[pc, r0, lsl #1]
   191cc:	00200019 	.word	0x00200019
   191d0:	002d0026 	.word	0x002d0026
   191d4:	00410036 	.word	0x00410036
   191d8:	005d004e 	.word	0x005d004e
   191dc:	0081006e 	.word	0x0081006e
   191e0:	00ad0096 	.word	0x00ad0096
   191e4:	00e100c6 	.word	0x00e100c6
   191e8:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   191ec:	4649      	mov	r1, r9
   191ee:	4640      	mov	r0, r8
   191f0:	f7ff fede 	bl	18fb0 <log_msg_arg_get>
   191f4:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   191f8:	f109 0901 	add.w	r9, r9, #1
   191fc:	e7dd      	b.n	191ba <std_print+0x2c>
		print_formatted(output, str);
   191fe:	4631      	mov	r1, r6
   19200:	4628      	mov	r0, r5
   19202:	f7e9 fa99 	bl	2738 <print_formatted>
}
   19206:	46bd      	mov	sp, r7
   19208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   1920c:	6822      	ldr	r2, [r4, #0]
   1920e:	4631      	mov	r1, r6
   19210:	4628      	mov	r0, r5
   19212:	f7e9 fa91 	bl	2738 <print_formatted>
		break;
   19216:	e7f6      	b.n	19206 <std_print+0x78>
		print_formatted(output, str, args[0], args[1]);
   19218:	e9d4 2300 	ldrd	r2, r3, [r4]
   1921c:	4631      	mov	r1, r6
   1921e:	4628      	mov	r0, r5
   19220:	f7e9 fa8a 	bl	2738 <print_formatted>
		break;
   19224:	e7ef      	b.n	19206 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2]);
   19226:	68a3      	ldr	r3, [r4, #8]
   19228:	9300      	str	r3, [sp, #0]
   1922a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1922e:	4631      	mov	r1, r6
   19230:	4628      	mov	r0, r5
   19232:	f7e9 fa81 	bl	2738 <print_formatted>
		break;
   19236:	e7e6      	b.n	19206 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   19238:	68e3      	ldr	r3, [r4, #12]
   1923a:	9301      	str	r3, [sp, #4]
   1923c:	68a3      	ldr	r3, [r4, #8]
   1923e:	9300      	str	r3, [sp, #0]
   19240:	e9d4 2300 	ldrd	r2, r3, [r4]
   19244:	4631      	mov	r1, r6
   19246:	4628      	mov	r0, r5
   19248:	f7e9 fa76 	bl	2738 <print_formatted>
		break;
   1924c:	e7db      	b.n	19206 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1924e:	6923      	ldr	r3, [r4, #16]
   19250:	9302      	str	r3, [sp, #8]
   19252:	68e3      	ldr	r3, [r4, #12]
   19254:	9301      	str	r3, [sp, #4]
   19256:	68a3      	ldr	r3, [r4, #8]
   19258:	9300      	str	r3, [sp, #0]
   1925a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1925e:	4631      	mov	r1, r6
   19260:	4628      	mov	r0, r5
   19262:	f7e9 fa69 	bl	2738 <print_formatted>
		break;
   19266:	e7ce      	b.n	19206 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   19268:	6963      	ldr	r3, [r4, #20]
   1926a:	9303      	str	r3, [sp, #12]
   1926c:	6923      	ldr	r3, [r4, #16]
   1926e:	9302      	str	r3, [sp, #8]
   19270:	68e3      	ldr	r3, [r4, #12]
   19272:	9301      	str	r3, [sp, #4]
   19274:	68a3      	ldr	r3, [r4, #8]
   19276:	9300      	str	r3, [sp, #0]
   19278:	e9d4 2300 	ldrd	r2, r3, [r4]
   1927c:	4631      	mov	r1, r6
   1927e:	4628      	mov	r0, r5
   19280:	f7e9 fa5a 	bl	2738 <print_formatted>
		break;
   19284:	e7bf      	b.n	19206 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   19286:	69a3      	ldr	r3, [r4, #24]
   19288:	9304      	str	r3, [sp, #16]
   1928a:	6963      	ldr	r3, [r4, #20]
   1928c:	9303      	str	r3, [sp, #12]
   1928e:	6923      	ldr	r3, [r4, #16]
   19290:	9302      	str	r3, [sp, #8]
   19292:	68e3      	ldr	r3, [r4, #12]
   19294:	9301      	str	r3, [sp, #4]
   19296:	68a3      	ldr	r3, [r4, #8]
   19298:	9300      	str	r3, [sp, #0]
   1929a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1929e:	4631      	mov	r1, r6
   192a0:	4628      	mov	r0, r5
   192a2:	f7e9 fa49 	bl	2738 <print_formatted>
		break;
   192a6:	e7ae      	b.n	19206 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   192a8:	69e3      	ldr	r3, [r4, #28]
   192aa:	9305      	str	r3, [sp, #20]
   192ac:	69a3      	ldr	r3, [r4, #24]
   192ae:	9304      	str	r3, [sp, #16]
   192b0:	6963      	ldr	r3, [r4, #20]
   192b2:	9303      	str	r3, [sp, #12]
   192b4:	6923      	ldr	r3, [r4, #16]
   192b6:	9302      	str	r3, [sp, #8]
   192b8:	68e3      	ldr	r3, [r4, #12]
   192ba:	9301      	str	r3, [sp, #4]
   192bc:	68a3      	ldr	r3, [r4, #8]
   192be:	9300      	str	r3, [sp, #0]
   192c0:	e9d4 2300 	ldrd	r2, r3, [r4]
   192c4:	4631      	mov	r1, r6
   192c6:	4628      	mov	r0, r5
   192c8:	f7e9 fa36 	bl	2738 <print_formatted>
		break;
   192cc:	e79b      	b.n	19206 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   192ce:	6a23      	ldr	r3, [r4, #32]
   192d0:	9306      	str	r3, [sp, #24]
   192d2:	69e3      	ldr	r3, [r4, #28]
   192d4:	9305      	str	r3, [sp, #20]
   192d6:	69a3      	ldr	r3, [r4, #24]
   192d8:	9304      	str	r3, [sp, #16]
   192da:	6963      	ldr	r3, [r4, #20]
   192dc:	9303      	str	r3, [sp, #12]
   192de:	6923      	ldr	r3, [r4, #16]
   192e0:	9302      	str	r3, [sp, #8]
   192e2:	68e3      	ldr	r3, [r4, #12]
   192e4:	9301      	str	r3, [sp, #4]
   192e6:	68a3      	ldr	r3, [r4, #8]
   192e8:	9300      	str	r3, [sp, #0]
   192ea:	e9d4 2300 	ldrd	r2, r3, [r4]
   192ee:	4631      	mov	r1, r6
   192f0:	4628      	mov	r0, r5
   192f2:	f7e9 fa21 	bl	2738 <print_formatted>
		break;
   192f6:	e786      	b.n	19206 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   192f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   192fa:	9307      	str	r3, [sp, #28]
   192fc:	6a23      	ldr	r3, [r4, #32]
   192fe:	9306      	str	r3, [sp, #24]
   19300:	69e3      	ldr	r3, [r4, #28]
   19302:	9305      	str	r3, [sp, #20]
   19304:	69a3      	ldr	r3, [r4, #24]
   19306:	9304      	str	r3, [sp, #16]
   19308:	6963      	ldr	r3, [r4, #20]
   1930a:	9303      	str	r3, [sp, #12]
   1930c:	6923      	ldr	r3, [r4, #16]
   1930e:	9302      	str	r3, [sp, #8]
   19310:	68e3      	ldr	r3, [r4, #12]
   19312:	9301      	str	r3, [sp, #4]
   19314:	68a3      	ldr	r3, [r4, #8]
   19316:	9300      	str	r3, [sp, #0]
   19318:	e9d4 2300 	ldrd	r2, r3, [r4]
   1931c:	4631      	mov	r1, r6
   1931e:	4628      	mov	r0, r5
   19320:	f7e9 fa0a 	bl	2738 <print_formatted>
		break;
   19324:	e76f      	b.n	19206 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   19326:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   19328:	9308      	str	r3, [sp, #32]
   1932a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1932c:	9307      	str	r3, [sp, #28]
   1932e:	6a23      	ldr	r3, [r4, #32]
   19330:	9306      	str	r3, [sp, #24]
   19332:	69e3      	ldr	r3, [r4, #28]
   19334:	9305      	str	r3, [sp, #20]
   19336:	69a3      	ldr	r3, [r4, #24]
   19338:	9304      	str	r3, [sp, #16]
   1933a:	6963      	ldr	r3, [r4, #20]
   1933c:	9303      	str	r3, [sp, #12]
   1933e:	6923      	ldr	r3, [r4, #16]
   19340:	9302      	str	r3, [sp, #8]
   19342:	68e3      	ldr	r3, [r4, #12]
   19344:	9301      	str	r3, [sp, #4]
   19346:	68a3      	ldr	r3, [r4, #8]
   19348:	9300      	str	r3, [sp, #0]
   1934a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1934e:	4631      	mov	r1, r6
   19350:	4628      	mov	r0, r5
   19352:	f7e9 f9f1 	bl	2738 <print_formatted>
		break;
   19356:	e756      	b.n	19206 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   19358:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1935a:	9309      	str	r3, [sp, #36]	; 0x24
   1935c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1935e:	9308      	str	r3, [sp, #32]
   19360:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19362:	9307      	str	r3, [sp, #28]
   19364:	6a23      	ldr	r3, [r4, #32]
   19366:	9306      	str	r3, [sp, #24]
   19368:	69e3      	ldr	r3, [r4, #28]
   1936a:	9305      	str	r3, [sp, #20]
   1936c:	69a3      	ldr	r3, [r4, #24]
   1936e:	9304      	str	r3, [sp, #16]
   19370:	6963      	ldr	r3, [r4, #20]
   19372:	9303      	str	r3, [sp, #12]
   19374:	6923      	ldr	r3, [r4, #16]
   19376:	9302      	str	r3, [sp, #8]
   19378:	68e3      	ldr	r3, [r4, #12]
   1937a:	9301      	str	r3, [sp, #4]
   1937c:	68a3      	ldr	r3, [r4, #8]
   1937e:	9300      	str	r3, [sp, #0]
   19380:	e9d4 2300 	ldrd	r2, r3, [r4]
   19384:	4631      	mov	r1, r6
   19386:	4628      	mov	r0, r5
   19388:	f7e9 f9d6 	bl	2738 <print_formatted>
		break;
   1938c:	e73b      	b.n	19206 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1938e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   19390:	930a      	str	r3, [sp, #40]	; 0x28
   19392:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   19394:	9309      	str	r3, [sp, #36]	; 0x24
   19396:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   19398:	9308      	str	r3, [sp, #32]
   1939a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1939c:	9307      	str	r3, [sp, #28]
   1939e:	6a23      	ldr	r3, [r4, #32]
   193a0:	9306      	str	r3, [sp, #24]
   193a2:	69e3      	ldr	r3, [r4, #28]
   193a4:	9305      	str	r3, [sp, #20]
   193a6:	69a3      	ldr	r3, [r4, #24]
   193a8:	9304      	str	r3, [sp, #16]
   193aa:	6963      	ldr	r3, [r4, #20]
   193ac:	9303      	str	r3, [sp, #12]
   193ae:	6923      	ldr	r3, [r4, #16]
   193b0:	9302      	str	r3, [sp, #8]
   193b2:	68e3      	ldr	r3, [r4, #12]
   193b4:	9301      	str	r3, [sp, #4]
   193b6:	68a3      	ldr	r3, [r4, #8]
   193b8:	9300      	str	r3, [sp, #0]
   193ba:	e9d4 2300 	ldrd	r2, r3, [r4]
   193be:	4631      	mov	r1, r6
   193c0:	4628      	mov	r0, r5
   193c2:	f7e9 f9b9 	bl	2738 <print_formatted>
		break;
   193c6:	e71e      	b.n	19206 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   193c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   193ca:	930b      	str	r3, [sp, #44]	; 0x2c
   193cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   193ce:	930a      	str	r3, [sp, #40]	; 0x28
   193d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   193d2:	9309      	str	r3, [sp, #36]	; 0x24
   193d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   193d6:	9308      	str	r3, [sp, #32]
   193d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   193da:	9307      	str	r3, [sp, #28]
   193dc:	6a23      	ldr	r3, [r4, #32]
   193de:	9306      	str	r3, [sp, #24]
   193e0:	69e3      	ldr	r3, [r4, #28]
   193e2:	9305      	str	r3, [sp, #20]
   193e4:	69a3      	ldr	r3, [r4, #24]
   193e6:	9304      	str	r3, [sp, #16]
   193e8:	6963      	ldr	r3, [r4, #20]
   193ea:	9303      	str	r3, [sp, #12]
   193ec:	6923      	ldr	r3, [r4, #16]
   193ee:	9302      	str	r3, [sp, #8]
   193f0:	68e3      	ldr	r3, [r4, #12]
   193f2:	9301      	str	r3, [sp, #4]
   193f4:	68a3      	ldr	r3, [r4, #8]
   193f6:	9300      	str	r3, [sp, #0]
   193f8:	e9d4 2300 	ldrd	r2, r3, [r4]
   193fc:	4631      	mov	r1, r6
   193fe:	4628      	mov	r0, r5
   19400:	f7e9 f99a 	bl	2738 <print_formatted>
		break;
   19404:	e6ff      	b.n	19206 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   19406:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   19408:	930c      	str	r3, [sp, #48]	; 0x30
   1940a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1940c:	930b      	str	r3, [sp, #44]	; 0x2c
   1940e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   19410:	930a      	str	r3, [sp, #40]	; 0x28
   19412:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   19414:	9309      	str	r3, [sp, #36]	; 0x24
   19416:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   19418:	9308      	str	r3, [sp, #32]
   1941a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1941c:	9307      	str	r3, [sp, #28]
   1941e:	6a23      	ldr	r3, [r4, #32]
   19420:	9306      	str	r3, [sp, #24]
   19422:	69e3      	ldr	r3, [r4, #28]
   19424:	9305      	str	r3, [sp, #20]
   19426:	69a3      	ldr	r3, [r4, #24]
   19428:	9304      	str	r3, [sp, #16]
   1942a:	6963      	ldr	r3, [r4, #20]
   1942c:	9303      	str	r3, [sp, #12]
   1942e:	6923      	ldr	r3, [r4, #16]
   19430:	9302      	str	r3, [sp, #8]
   19432:	68e3      	ldr	r3, [r4, #12]
   19434:	9301      	str	r3, [sp, #4]
   19436:	68a3      	ldr	r3, [r4, #8]
   19438:	9300      	str	r3, [sp, #0]
   1943a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1943e:	4631      	mov	r1, r6
   19440:	4628      	mov	r0, r5
   19442:	f7e9 f979 	bl	2738 <print_formatted>
}
   19446:	e6de      	b.n	19206 <std_print+0x78>

00019448 <log_output_flush>:
		     output->control_block->offset,
   19448:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   1944a:	6881      	ldr	r1, [r0, #8]
{
   1944c:	b510      	push	{r4, lr}
   1944e:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   19450:	e9d2 2300 	ldrd	r2, r3, [r2]
   19454:	6800      	ldr	r0, [r0, #0]
   19456:	f7ff fe8d 	bl	19174 <buffer_write>
	output->control_block->offset = 0;
   1945a:	6863      	ldr	r3, [r4, #4]
   1945c:	2200      	movs	r2, #0
   1945e:	601a      	str	r2, [r3, #0]
}
   19460:	bd10      	pop	{r4, pc}

00019462 <out_func>:
{
   19462:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   19464:	684b      	ldr	r3, [r1, #4]
   19466:	681a      	ldr	r2, [r3, #0]
   19468:	68cb      	ldr	r3, [r1, #12]
   1946a:	429a      	cmp	r2, r3
{
   1946c:	4605      	mov	r5, r0
   1946e:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   19470:	d102      	bne.n	19478 <out_func+0x16>
		log_output_flush(out_ctx);
   19472:	4608      	mov	r0, r1
   19474:	f7ff ffe8 	bl	19448 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   19478:	6863      	ldr	r3, [r4, #4]
   1947a:	f3bf 8f5b 	dmb	ish
   1947e:	e853 2f00 	ldrex	r2, [r3]
   19482:	1c51      	adds	r1, r2, #1
   19484:	e843 1000 	strex	r0, r1, [r3]
   19488:	2800      	cmp	r0, #0
   1948a:	d1f8      	bne.n	1947e <out_func+0x1c>
   1948c:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   19490:	68a3      	ldr	r3, [r4, #8]
   19492:	549d      	strb	r5, [r3, r2]
}
   19494:	2000      	movs	r0, #0
   19496:	bd38      	pop	{r3, r4, r5, pc}

00019498 <settings_delete>:

int settings_delete(const char *name)
{
	return settings_save_one(name, NULL, 0);
   19498:	2200      	movs	r2, #0
   1949a:	4611      	mov	r1, r2
   1949c:	f7e9 bbc2 	b.w	2c24 <settings_save_one>

000194a0 <settings_name_steq>:
	return rc;
}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

int settings_name_steq(const char *name, const char *key, const char **next)
{
   194a0:	4603      	mov	r3, r0
   194a2:	b530      	push	{r4, r5, lr}
   194a4:	4608      	mov	r0, r1
	if (next) {
   194a6:	b10a      	cbz	r2, 194ac <settings_name_steq+0xc>
		*next = NULL;
   194a8:	2100      	movs	r1, #0
   194aa:	6011      	str	r1, [r2, #0]
	}

	if ((!name) || (!key)) {
   194ac:	b163      	cbz	r3, 194c8 <settings_name_steq+0x28>
   194ae:	b190      	cbz	r0, 194d6 <settings_name_steq+0x36>
   194b0:	1e41      	subs	r1, r0, #1
   194b2:	4618      	mov	r0, r3
	/* name might come from flash directly, in flash the name would end
	 * with '=' or '\0' depending how storage is done. Flash reading is
	 * limited to what can be read
	 */

	while ((*key != '\0') && (*key == *name) &&
   194b4:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   194b8:	4604      	mov	r4, r0
   194ba:	f810 3b01 	ldrb.w	r3, [r0], #1
   194be:	b15d      	cbz	r5, 194d8 <settings_name_steq+0x38>
   194c0:	429d      	cmp	r5, r3
   194c2:	d101      	bne.n	194c8 <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   194c4:	2d3d      	cmp	r5, #61	; 0x3d
   194c6:	d1f5      	bne.n	194b4 <settings_name_steq+0x14>

	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
		return 1;
	}

	return 0;
   194c8:	2000      	movs	r0, #0
   194ca:	e004      	b.n	194d6 <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   194cc:	2b3d      	cmp	r3, #61	; 0x3d
   194ce:	d008      	beq.n	194e2 <settings_name_steq+0x42>
   194d0:	fab3 f083 	clz	r0, r3
   194d4:	0940      	lsrs	r0, r0, #5
}
   194d6:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   194d8:	2b2f      	cmp	r3, #47	; 0x2f
   194da:	d1f7      	bne.n	194cc <settings_name_steq+0x2c>
		if (next) {
   194dc:	b10a      	cbz	r2, 194e2 <settings_name_steq+0x42>
			*next = name + 1;
   194de:	3401      	adds	r4, #1
   194e0:	6014      	str	r4, [r2, #0]
		return 1;
   194e2:	2001      	movs	r0, #1
   194e4:	e7f7      	b.n	194d6 <settings_name_steq+0x36>

000194e6 <settings_name_next>:

int settings_name_next(const char *name, const char **next)
{
   194e6:	b530      	push	{r4, r5, lr}
   194e8:	4603      	mov	r3, r0
	int rc = 0;

	if (next) {
   194ea:	b109      	cbz	r1, 194f0 <settings_name_next+0xa>
		*next = NULL;
   194ec:	2200      	movs	r2, #0
   194ee:	600a      	str	r2, [r1, #0]
	}

	if (!name) {
   194f0:	b16b      	cbz	r3, 1950e <settings_name_next+0x28>
   194f2:	461a      	mov	r2, r3
   194f4:	4614      	mov	r4, r2
   194f6:	1ad0      	subs	r0, r2, r3

	/* name might come from flash directly, in flash the name would end
	 * with '=' or '\0' depending how storage is done. Flash reading is
	 * limited to what can be read
	 */
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   194f8:	f812 5b01 	ldrb.w	r5, [r2], #1
   194fc:	b135      	cbz	r5, 1950c <settings_name_next+0x26>
   194fe:	2d3d      	cmp	r5, #61	; 0x3d
   19500:	d004      	beq.n	1950c <settings_name_next+0x26>
   19502:	2d2f      	cmp	r5, #47	; 0x2f
   19504:	d1f6      	bne.n	194f4 <settings_name_next+0xe>
		rc++;
		name++;
	}

	if (*name == SETTINGS_NAME_SEPARATOR) {
		if (next) {
   19506:	b109      	cbz	r1, 1950c <settings_name_next+0x26>
			*next = name + 1;
   19508:	3401      	adds	r4, #1
   1950a:	600c      	str	r4, [r1, #0]
		}
		return rc;
	}

	return rc;
}
   1950c:	bd30      	pop	{r4, r5, pc}
		return 0;
   1950e:	4618      	mov	r0, r3
   19510:	e7fc      	b.n	1950c <settings_name_next+0x26>

00019512 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   19512:	2200      	movs	r2, #0
   19514:	e9c0 2200 	strd	r2, r2, [r0]
   19518:	6082      	str	r2, [r0, #8]
}
   1951a:	4770      	bx	lr

0001951c <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1951c:	6902      	ldr	r2, [r0, #16]
   1951e:	b2cb      	uxtb	r3, r1
   19520:	210c      	movs	r1, #12
   19522:	fb03 2101 	mla	r1, r3, r1, r2
   19526:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   19528:	f000 0007 	and.w	r0, r0, #7
   1952c:	4770      	bx	lr

0001952e <set_off_state>:
	__asm__ volatile(
   1952e:	f04f 0320 	mov.w	r3, #32
   19532:	f3ef 8211 	mrs	r2, BASEPRI
   19536:	f383 8811 	msr	BASEPRI, r3
   1953a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1953e:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   19540:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   19544:	d001      	beq.n	1954a <set_off_state+0x1c>
   19546:	428b      	cmp	r3, r1
   19548:	d107      	bne.n	1955a <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1954a:	2301      	movs	r3, #1
   1954c:	6003      	str	r3, [r0, #0]
	int err = 0;
   1954e:	2000      	movs	r0, #0
	__asm__ volatile(
   19550:	f382 8811 	msr	BASEPRI, r2
   19554:	f3bf 8f6f 	isb	sy
}
   19558:	4770      	bx	lr
		err = -EPERM;
   1955a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1955e:	e7f7      	b.n	19550 <set_off_state+0x22>

00019560 <set_starting_state>:
{
   19560:	b510      	push	{r4, lr}
	__asm__ volatile(
   19562:	f04f 0320 	mov.w	r3, #32
   19566:	f3ef 8211 	mrs	r2, BASEPRI
   1956a:	f383 8811 	msr	BASEPRI, r3
   1956e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   19572:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   19574:	f003 0407 	and.w	r4, r3, #7
   19578:	2c01      	cmp	r4, #1
   1957a:	d106      	bne.n	1958a <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1957c:	6001      	str	r1, [r0, #0]
	int err = 0;
   1957e:	2000      	movs	r0, #0
	__asm__ volatile(
   19580:	f382 8811 	msr	BASEPRI, r2
   19584:	f3bf 8f6f 	isb	sy
}
   19588:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1958a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   1958e:	428b      	cmp	r3, r1
		err = -EALREADY;
   19590:	bf14      	ite	ne
   19592:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   19596:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   1959a:	e7f1      	b.n	19580 <set_starting_state+0x20>

0001959c <set_on_state>:
	__asm__ volatile(
   1959c:	f04f 0320 	mov.w	r3, #32
   195a0:	f3ef 8211 	mrs	r2, BASEPRI
   195a4:	f383 8811 	msr	BASEPRI, r3
   195a8:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   195ac:	6803      	ldr	r3, [r0, #0]
   195ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   195b2:	f043 0302 	orr.w	r3, r3, #2
   195b6:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   195b8:	f382 8811 	msr	BASEPRI, r2
   195bc:	f3bf 8f6f 	isb	sy
}
   195c0:	4770      	bx	lr

000195c2 <onoff_started_callback>:
	return &data->mgr[type];
   195c2:	6900      	ldr	r0, [r0, #16]
{
   195c4:	b410      	push	{r4}
	return &data->mgr[type];
   195c6:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   195c8:	241c      	movs	r4, #28
   195ca:	fb03 0004 	mla	r0, r3, r4, r0
   195ce:	2100      	movs	r1, #0
}
   195d0:	bc10      	pop	{r4}
	notify(mgr, 0);
   195d2:	4710      	bx	r2

000195d4 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   195d4:	2000      	movs	r0, #0
   195d6:	f7fd b979 	b.w	168cc <nrfx_clock_stop>

000195da <blocking_start_callback>:
{
   195da:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   195dc:	f7fd bef6 	b.w	173cc <z_impl_k_sem_give>

000195e0 <api_stop>:
{
   195e0:	b538      	push	{r3, r4, r5, lr}
   195e2:	b2c9      	uxtb	r1, r1
	err = set_off_state(&subdata->flags, ctx);
   195e4:	240c      	movs	r4, #12
   195e6:	434c      	muls	r4, r1
{
   195e8:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   195ea:	6900      	ldr	r0, [r0, #16]
   195ec:	f104 0340 	add.w	r3, r4, #64	; 0x40
   195f0:	2180      	movs	r1, #128	; 0x80
   195f2:	4418      	add	r0, r3
   195f4:	f7ff ff9b 	bl	1952e <set_off_state>
	if (err < 0) {
   195f8:	2800      	cmp	r0, #0
   195fa:	db04      	blt.n	19606 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   195fc:	6869      	ldr	r1, [r5, #4]
   195fe:	440c      	add	r4, r1
   19600:	6863      	ldr	r3, [r4, #4]
   19602:	4798      	blx	r3
	return 0;
   19604:	2000      	movs	r0, #0
}
   19606:	bd38      	pop	{r3, r4, r5, pc}

00019608 <api_start>:
{
   19608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1960c:	b2c9      	uxtb	r1, r1
	err = set_starting_state(&subdata->flags, ctx);
   1960e:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   19610:	6905      	ldr	r5, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
   19612:	434c      	muls	r4, r1
{
   19614:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   19616:	f104 0040 	add.w	r0, r4, #64	; 0x40
   1961a:	2180      	movs	r1, #128	; 0x80
   1961c:	4428      	add	r0, r5
{
   1961e:	4690      	mov	r8, r2
   19620:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   19622:	f7ff ff9d 	bl	19560 <set_starting_state>
	if (err < 0) {
   19626:	2800      	cmp	r0, #0
   19628:	db06      	blt.n	19638 <api_start+0x30>
	subdata->cb = cb;
   1962a:	4425      	add	r5, r4
	subdata->user_data = user_data;
   1962c:	e9c5 870e 	strd	r8, r7, [r5, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   19630:	6873      	ldr	r3, [r6, #4]
   19632:	591b      	ldr	r3, [r3, r4]
   19634:	4798      	blx	r3
	return 0;
   19636:	2000      	movs	r0, #0
}
   19638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001963c <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   1963c:	4770      	bx	lr

0001963e <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1963e:	4770      	bx	lr

00019640 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   19640:	b538      	push	{r3, r4, r5, lr}
   19642:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   19644:	42ab      	cmp	r3, r5
{
   19646:	4611      	mov	r1, r2
   19648:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1964a:	d804      	bhi.n	19656 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   1964c:	461a      	mov	r2, r3
   1964e:	f000 faa9 	bl	19ba4 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   19652:	4620      	mov	r0, r4
   19654:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   19656:	2400      	movs	r4, #0
   19658:	e7fb      	b.n	19652 <_copy+0x12>

0001965a <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   1965a:	f000 bace 	b.w	19bfa <memset>

0001965e <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1965e:	09c3      	lsrs	r3, r0, #7
   19660:	005a      	lsls	r2, r3, #1
   19662:	4413      	add	r3, r2
   19664:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   19668:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1966c:	b2c0      	uxtb	r0, r0
   1966e:	4770      	bx	lr

00019670 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   19670:	78cb      	ldrb	r3, [r1, #3]
   19672:	7802      	ldrb	r2, [r0, #0]
   19674:	4053      	eors	r3, r2
   19676:	7003      	strb	r3, [r0, #0]
   19678:	884b      	ldrh	r3, [r1, #2]
   1967a:	7842      	ldrb	r2, [r0, #1]
   1967c:	4053      	eors	r3, r2
   1967e:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   19680:	680a      	ldr	r2, [r1, #0]
   19682:	7883      	ldrb	r3, [r0, #2]
   19684:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   19688:	7083      	strb	r3, [r0, #2]
   1968a:	680a      	ldr	r2, [r1, #0]
   1968c:	78c3      	ldrb	r3, [r0, #3]
   1968e:	4053      	eors	r3, r2
   19690:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   19692:	79cb      	ldrb	r3, [r1, #7]
   19694:	7902      	ldrb	r2, [r0, #4]
   19696:	4053      	eors	r3, r2
   19698:	7103      	strb	r3, [r0, #4]
   1969a:	88cb      	ldrh	r3, [r1, #6]
   1969c:	7942      	ldrb	r2, [r0, #5]
   1969e:	4053      	eors	r3, r2
   196a0:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   196a2:	684a      	ldr	r2, [r1, #4]
   196a4:	7983      	ldrb	r3, [r0, #6]
   196a6:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   196aa:	7183      	strb	r3, [r0, #6]
   196ac:	684a      	ldr	r2, [r1, #4]
   196ae:	79c3      	ldrb	r3, [r0, #7]
   196b0:	4053      	eors	r3, r2
   196b2:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   196b4:	7acb      	ldrb	r3, [r1, #11]
   196b6:	7a02      	ldrb	r2, [r0, #8]
   196b8:	4053      	eors	r3, r2
   196ba:	7203      	strb	r3, [r0, #8]
   196bc:	7a42      	ldrb	r2, [r0, #9]
   196be:	894b      	ldrh	r3, [r1, #10]
   196c0:	4053      	eors	r3, r2
   196c2:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   196c4:	688a      	ldr	r2, [r1, #8]
   196c6:	7a83      	ldrb	r3, [r0, #10]
   196c8:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   196cc:	7283      	strb	r3, [r0, #10]
   196ce:	688a      	ldr	r2, [r1, #8]
   196d0:	7ac3      	ldrb	r3, [r0, #11]
   196d2:	4053      	eors	r3, r2
   196d4:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   196d6:	7bcb      	ldrb	r3, [r1, #15]
   196d8:	7b02      	ldrb	r2, [r0, #12]
   196da:	4053      	eors	r3, r2
   196dc:	7303      	strb	r3, [r0, #12]
   196de:	89cb      	ldrh	r3, [r1, #14]
   196e0:	7b42      	ldrb	r2, [r0, #13]
   196e2:	4053      	eors	r3, r2
   196e4:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   196e6:	68ca      	ldr	r2, [r1, #12]
   196e8:	7b83      	ldrb	r3, [r0, #14]
   196ea:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   196ee:	7383      	strb	r3, [r0, #14]
   196f0:	68ca      	ldr	r2, [r1, #12]
   196f2:	7bc3      	ldrb	r3, [r0, #15]
   196f4:	4053      	eors	r3, r2
   196f6:	73c3      	strb	r3, [r0, #15]
}
   196f8:	4770      	bx	lr

000196fa <shift_rows>:
{
   196fa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   196fc:	7802      	ldrb	r2, [r0, #0]
   196fe:	f88d 2000 	strb.w	r2, [sp]
   19702:	7942      	ldrb	r2, [r0, #5]
   19704:	f88d 2001 	strb.w	r2, [sp, #1]
   19708:	7a82      	ldrb	r2, [r0, #10]
   1970a:	f88d 2002 	strb.w	r2, [sp, #2]
   1970e:	7bc2      	ldrb	r2, [r0, #15]
   19710:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   19714:	7902      	ldrb	r2, [r0, #4]
   19716:	f88d 2004 	strb.w	r2, [sp, #4]
   1971a:	7a42      	ldrb	r2, [r0, #9]
   1971c:	f88d 2005 	strb.w	r2, [sp, #5]
   19720:	7b82      	ldrb	r2, [r0, #14]
   19722:	f88d 2006 	strb.w	r2, [sp, #6]
   19726:	78c2      	ldrb	r2, [r0, #3]
   19728:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1972c:	7a02      	ldrb	r2, [r0, #8]
   1972e:	f88d 2008 	strb.w	r2, [sp, #8]
   19732:	7b42      	ldrb	r2, [r0, #13]
   19734:	f88d 2009 	strb.w	r2, [sp, #9]
   19738:	7882      	ldrb	r2, [r0, #2]
   1973a:	f88d 200a 	strb.w	r2, [sp, #10]
   1973e:	79c2      	ldrb	r2, [r0, #7]
   19740:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   19744:	7b02      	ldrb	r2, [r0, #12]
   19746:	f88d 200c 	strb.w	r2, [sp, #12]
   1974a:	7842      	ldrb	r2, [r0, #1]
   1974c:	7ac3      	ldrb	r3, [r0, #11]
   1974e:	f88d 200d 	strb.w	r2, [sp, #13]
   19752:	7982      	ldrb	r2, [r0, #6]
   19754:	f88d 200e 	strb.w	r2, [sp, #14]
   19758:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1975c:	2310      	movs	r3, #16
   1975e:	466a      	mov	r2, sp
   19760:	4619      	mov	r1, r3
   19762:	f7ff ff6d 	bl	19640 <_copy>
}
   19766:	b005      	add	sp, #20
   19768:	f85d fb04 	ldr.w	pc, [sp], #4

0001976c <mult_row_column>:
{
   1976c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1976e:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   19770:	7808      	ldrb	r0, [r1, #0]
{
   19772:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   19774:	f7ff ff73 	bl	1965e <_double_byte>
   19778:	4605      	mov	r5, r0
   1977a:	7860      	ldrb	r0, [r4, #1]
   1977c:	f7ff ff6f 	bl	1965e <_double_byte>
   19780:	78a2      	ldrb	r2, [r4, #2]
   19782:	7863      	ldrb	r3, [r4, #1]
   19784:	4053      	eors	r3, r2
   19786:	78e2      	ldrb	r2, [r4, #3]
   19788:	4053      	eors	r3, r2
   1978a:	405d      	eors	r5, r3
   1978c:	4045      	eors	r5, r0
   1978e:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   19790:	7860      	ldrb	r0, [r4, #1]
   19792:	7827      	ldrb	r7, [r4, #0]
   19794:	f7ff ff63 	bl	1965e <_double_byte>
   19798:	4605      	mov	r5, r0
   1979a:	78a0      	ldrb	r0, [r4, #2]
   1979c:	f7ff ff5f 	bl	1965e <_double_byte>
   197a0:	78a3      	ldrb	r3, [r4, #2]
   197a2:	405f      	eors	r7, r3
   197a4:	78e3      	ldrb	r3, [r4, #3]
   197a6:	405f      	eors	r7, r3
   197a8:	407d      	eors	r5, r7
   197aa:	4045      	eors	r5, r0
   197ac:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   197ae:	78a0      	ldrb	r0, [r4, #2]
   197b0:	7865      	ldrb	r5, [r4, #1]
   197b2:	7827      	ldrb	r7, [r4, #0]
   197b4:	f7ff ff53 	bl	1965e <_double_byte>
   197b8:	406f      	eors	r7, r5
   197ba:	4605      	mov	r5, r0
   197bc:	78e0      	ldrb	r0, [r4, #3]
   197be:	f7ff ff4e 	bl	1965e <_double_byte>
   197c2:	78e3      	ldrb	r3, [r4, #3]
   197c4:	405f      	eors	r7, r3
   197c6:	407d      	eors	r5, r7
   197c8:	4045      	eors	r5, r0
   197ca:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   197cc:	7820      	ldrb	r0, [r4, #0]
   197ce:	f7ff ff46 	bl	1965e <_double_byte>
   197d2:	7863      	ldrb	r3, [r4, #1]
   197d4:	7825      	ldrb	r5, [r4, #0]
   197d6:	405d      	eors	r5, r3
   197d8:	78a3      	ldrb	r3, [r4, #2]
   197da:	405d      	eors	r5, r3
   197dc:	4045      	eors	r5, r0
   197de:	78e0      	ldrb	r0, [r4, #3]
   197e0:	f7ff ff3d 	bl	1965e <_double_byte>
   197e4:	b2ed      	uxtb	r5, r5
   197e6:	4045      	eors	r5, r0
   197e8:	70f5      	strb	r5, [r6, #3]
}
   197ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000197ec <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   197ec:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   197ee:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   197f0:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   197f2:	f912 3b10 	ldrsb.w	r3, [r2], #16
   197f6:	2b00      	cmp	r3, #0
   197f8:	bfb4      	ite	lt
   197fa:	2387      	movlt	r3, #135	; 0x87
   197fc:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   197fe:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   19802:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   19806:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   19808:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1980c:	d002      	beq.n	19814 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1980e:	7813      	ldrb	r3, [r2, #0]
   19810:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   19812:	e7f4      	b.n	197fe <gf_double+0x12>
	}
}
   19814:	bd10      	pop	{r4, pc}

00019816 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   19816:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   19818:	b120      	cbz	r0, 19824 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1981a:	2258      	movs	r2, #88	; 0x58
   1981c:	2100      	movs	r1, #0
   1981e:	f7ff ff1c 	bl	1965a <_set>
   19822:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   19824:	bd08      	pop	{r3, pc}

00019826 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   19826:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   19828:	4604      	mov	r4, r0
   1982a:	b188      	cbz	r0, 19850 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1982c:	2210      	movs	r2, #16
   1982e:	2100      	movs	r1, #0
   19830:	f7ff ff13 	bl	1965a <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   19834:	2210      	movs	r2, #16
   19836:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1983a:	2100      	movs	r1, #0
   1983c:	f7ff ff0d 	bl	1965a <_set>
	s->leftover_offset = 0;
   19840:	2300      	movs	r3, #0
   19842:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   19844:	2200      	movs	r2, #0
   19846:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1984a:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   1984e:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   19850:	bd10      	pop	{r4, pc}

00019852 <tc_cmac_setup>:
{
   19852:	b570      	push	{r4, r5, r6, lr}
   19854:	460d      	mov	r5, r1
   19856:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   19858:	4604      	mov	r4, r0
   1985a:	b310      	cbz	r0, 198a2 <tc_cmac_setup+0x50>
   1985c:	b311      	cbz	r1, 198a4 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1985e:	2258      	movs	r2, #88	; 0x58
   19860:	2100      	movs	r1, #0
   19862:	f7ff fefa 	bl	1965a <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   19866:	4629      	mov	r1, r5
	s->sched = sched;
   19868:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1986a:	4630      	mov	r0, r6
   1986c:	f7e9 fdba 	bl	33e4 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   19870:	2210      	movs	r2, #16
   19872:	2100      	movs	r1, #0
   19874:	4620      	mov	r0, r4
   19876:	f7ff fef0 	bl	1965a <_set>
	gf_double (s->K1, s->iv);
   1987a:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1987e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   19880:	4621      	mov	r1, r4
   19882:	4620      	mov	r0, r4
   19884:	f7e9 fe00 	bl	3488 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   19888:	4621      	mov	r1, r4
   1988a:	4628      	mov	r0, r5
   1988c:	f7ff ffae 	bl	197ec <gf_double>
	gf_double (s->K2, s->K1);
   19890:	4629      	mov	r1, r5
   19892:	f104 0020 	add.w	r0, r4, #32
   19896:	f7ff ffa9 	bl	197ec <gf_double>
	tc_cmac_init(s);
   1989a:	4620      	mov	r0, r4
   1989c:	f7ff ffc3 	bl	19826 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   198a0:	2001      	movs	r0, #1
}
   198a2:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   198a4:	4608      	mov	r0, r1
   198a6:	e7fc      	b.n	198a2 <tc_cmac_setup+0x50>

000198a8 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   198a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   198ac:	460d      	mov	r5, r1
   198ae:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   198b0:	4604      	mov	r4, r0
   198b2:	2800      	cmp	r0, #0
   198b4:	d062      	beq.n	1997c <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   198b6:	b912      	cbnz	r2, 198be <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   198b8:	2001      	movs	r0, #1
}
   198ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   198be:	2900      	cmp	r1, #0
   198c0:	d05c      	beq.n	1997c <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   198c2:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   198c6:	ea50 0301 	orrs.w	r3, r0, r1
   198ca:	d057      	beq.n	1997c <tc_cmac_update+0xd4>
	s->countdown--;
   198cc:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
	if (s->leftover_offset > 0) {
   198d0:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   198d4:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   198d8:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   198dc:	f1b8 0f00 	cmp.w	r8, #0
   198e0:	d02a      	beq.n	19938 <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   198e2:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   198e6:	f108 0030 	add.w	r0, r8, #48	; 0x30
   198ea:	42be      	cmp	r6, r7
   198ec:	4420      	add	r0, r4
   198ee:	d208      	bcs.n	19902 <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   198f0:	462a      	mov	r2, r5
   198f2:	4633      	mov	r3, r6
   198f4:	4631      	mov	r1, r6
   198f6:	f7ff fea3 	bl	19640 <_copy>
			s->leftover_offset += data_length;
   198fa:	6c62      	ldr	r2, [r4, #68]	; 0x44
   198fc:	4432      	add	r2, r6
   198fe:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   19900:	e7da      	b.n	198b8 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   19902:	463b      	mov	r3, r7
   19904:	462a      	mov	r2, r5
   19906:	4639      	mov	r1, r7
   19908:	f7ff fe9a 	bl	19640 <_copy>
		data_length -= remaining_space;
   1990c:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   1990e:	2300      	movs	r3, #0
   19910:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   19912:	4446      	add	r6, r8
		data += remaining_space;
   19914:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   19916:	1e63      	subs	r3, r4, #1
   19918:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1991c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   19920:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   19924:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   19926:	ea82 0200 	eor.w	r2, r2, r0
   1992a:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1992c:	d1f6      	bne.n	1991c <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1992e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   19930:	4621      	mov	r1, r4
   19932:	4620      	mov	r0, r4
   19934:	f7e9 fda8 	bl	3488 <tc_aes_encrypt>
   19938:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1993c:	2e10      	cmp	r6, #16
   1993e:	d80a      	bhi.n	19956 <tc_cmac_update+0xae>
	if (data_length > 0) {
   19940:	2e00      	cmp	r6, #0
   19942:	d0b9      	beq.n	198b8 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   19944:	4633      	mov	r3, r6
   19946:	462a      	mov	r2, r5
   19948:	4631      	mov	r1, r6
   1994a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1994e:	f7ff fe77 	bl	19640 <_copy>
		s->leftover_offset = data_length;
   19952:	6466      	str	r6, [r4, #68]	; 0x44
   19954:	e7b0      	b.n	198b8 <tc_cmac_update+0x10>
   19956:	1e63      	subs	r3, r4, #1
   19958:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   1995a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1995e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   19962:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   19964:	ea82 0200 	eor.w	r2, r2, r0
   19968:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1996a:	d1f6      	bne.n	1995a <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1996c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1996e:	4621      	mov	r1, r4
   19970:	4620      	mov	r0, r4
   19972:	f7e9 fd89 	bl	3488 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   19976:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   19978:	3e10      	subs	r6, #16
   1997a:	e7df      	b.n	1993c <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   1997c:	2000      	movs	r0, #0
   1997e:	e79c      	b.n	198ba <tc_cmac_update+0x12>

00019980 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   19980:	b570      	push	{r4, r5, r6, lr}
   19982:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   19984:	4605      	mov	r5, r0
   19986:	b1e8      	cbz	r0, 199c4 <tc_cmac_final+0x44>
   19988:	b369      	cbz	r1, 199e6 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1998a:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1998c:	2a10      	cmp	r2, #16
   1998e:	d11a      	bne.n	199c6 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   19990:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   19992:	1e63      	subs	r3, r4, #1
   19994:	3901      	subs	r1, #1
   19996:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1999a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1999e:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   199a2:	4072      	eors	r2, r6
   199a4:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   199a8:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   199aa:	ea82 0206 	eor.w	r2, r2, r6
   199ae:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   199b0:	d1f3      	bne.n	1999a <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   199b2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   199b4:	4621      	mov	r1, r4
   199b6:	4628      	mov	r0, r5
   199b8:	f7e9 fd66 	bl	3488 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   199bc:	4620      	mov	r0, r4
   199be:	f7ff ff2a 	bl	19816 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   199c2:	2001      	movs	r0, #1
}
   199c4:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   199c6:	f102 0030 	add.w	r0, r2, #48	; 0x30
   199ca:	2100      	movs	r1, #0
   199cc:	f1c2 0210 	rsb	r2, r2, #16
   199d0:	4420      	add	r0, r4
   199d2:	f7ff fe42 	bl	1965a <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   199d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
   199d8:	4423      	add	r3, r4
   199da:	2280      	movs	r2, #128	; 0x80
   199dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   199e0:	f104 0120 	add.w	r1, r4, #32
   199e4:	e7d5      	b.n	19992 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   199e6:	4608      	mov	r0, r1
   199e8:	e7ec      	b.n	199c4 <tc_cmac_final+0x44>

000199ea <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   199ea:	2100      	movs	r1, #0
   199ec:	2001      	movs	r0, #1
   199ee:	f7e9 be73 	b.w	36d8 <z_arm_fatal_error>

000199f2 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   199f2:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   199f4:	6800      	ldr	r0, [r0, #0]
   199f6:	f7e9 be6f 	b.w	36d8 <z_arm_fatal_error>

000199fa <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   199fa:	b508      	push	{r3, lr}
	handler();
   199fc:	f7e9 ff18 	bl	3830 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   19a00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   19a04:	f7e9 bf6c 	b.w	38e0 <z_arm_exc_exit>

00019a08 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   19a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19a0c:	4684      	mov	ip, r0
   19a0e:	4688      	mov	r8, r1
	register const char *s = nptr;
   19a10:	4601      	mov	r1, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   19a12:	460c      	mov	r4, r1
   19a14:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   19a18:	2b20      	cmp	r3, #32
   19a1a:	d033      	beq.n	19a84 <strtol+0x7c>
   19a1c:	f1a3 0009 	sub.w	r0, r3, #9
   19a20:	2804      	cmp	r0, #4
   19a22:	d92f      	bls.n	19a84 <strtol+0x7c>
	} while (isspace(c));
	if (c == '-') {
   19a24:	2b2d      	cmp	r3, #45	; 0x2d
   19a26:	d12f      	bne.n	19a88 <strtol+0x80>
		neg = 1;
		c = *s++;
   19a28:	784b      	ldrb	r3, [r1, #1]
   19a2a:	1c8c      	adds	r4, r1, #2
		neg = 1;
   19a2c:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   19a2e:	2a00      	cmp	r2, #0
   19a30:	d05c      	beq.n	19aec <strtol+0xe4>
   19a32:	2a10      	cmp	r2, #16
   19a34:	d109      	bne.n	19a4a <strtol+0x42>
   19a36:	2b30      	cmp	r3, #48	; 0x30
   19a38:	d107      	bne.n	19a4a <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   19a3a:	7823      	ldrb	r3, [r4, #0]
   19a3c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   19a40:	2b58      	cmp	r3, #88	; 0x58
   19a42:	d14e      	bne.n	19ae2 <strtol+0xda>
		c = s[1];
   19a44:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   19a46:	2210      	movs	r2, #16
		s += 2;
   19a48:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   19a4a:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   19a4e:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   19a50:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
   19a52:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   19a56:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   19a58:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   19a5c:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   19a60:	2d09      	cmp	r5, #9
   19a62:	d817      	bhi.n	19a94 <strtol+0x8c>
			c -= '0';
   19a64:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   19a66:	429a      	cmp	r2, r3
   19a68:	dd24      	ble.n	19ab4 <strtol+0xac>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   19a6a:	1c75      	adds	r5, r6, #1
   19a6c:	d007      	beq.n	19a7e <strtol+0x76>
   19a6e:	4570      	cmp	r0, lr
   19a70:	d81d      	bhi.n	19aae <strtol+0xa6>
   19a72:	d101      	bne.n	19a78 <strtol+0x70>
   19a74:	454b      	cmp	r3, r9
   19a76:	dc1a      	bgt.n	19aae <strtol+0xa6>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   19a78:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   19a7c:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
   19a7e:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   19a82:	e7eb      	b.n	19a5c <strtol+0x54>
{
   19a84:	4621      	mov	r1, r4
   19a86:	e7c4      	b.n	19a12 <strtol+0xa>
	} else if (c == '+') {
   19a88:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   19a8a:	bf04      	itt	eq
   19a8c:	784b      	ldrbeq	r3, [r1, #1]
   19a8e:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   19a90:	2100      	movs	r1, #0
   19a92:	e7cc      	b.n	19a2e <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   19a94:	f043 0520 	orr.w	r5, r3, #32
   19a98:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   19a9a:	2d19      	cmp	r5, #25
   19a9c:	d80a      	bhi.n	19ab4 <strtol+0xac>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   19a9e:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   19aa2:	2d1a      	cmp	r5, #26
   19aa4:	bf34      	ite	cc
   19aa6:	2537      	movcc	r5, #55	; 0x37
   19aa8:	2557      	movcs	r5, #87	; 0x57
   19aaa:	1b5b      	subs	r3, r3, r5
   19aac:	e7db      	b.n	19a66 <strtol+0x5e>
			any = -1;
   19aae:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   19ab2:	e7e4      	b.n	19a7e <strtol+0x76>
		}
	}

	if (any < 0) {
   19ab4:	1c73      	adds	r3, r6, #1
   19ab6:	d109      	bne.n	19acc <strtol+0xc4>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   19ab8:	f7fd f94e 	bl	16d58 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   19abc:	2322      	movs	r3, #34	; 0x22
   19abe:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   19ac0:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   19ac2:	f1b8 0f00 	cmp.w	r8, #0
   19ac6:	d107      	bne.n	19ad8 <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   19ac8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   19acc:	b101      	cbz	r1, 19ad0 <strtol+0xc8>
		acc = -acc;
   19ace:	4240      	negs	r0, r0
	if (endptr != NULL) {
   19ad0:	f1b8 0f00 	cmp.w	r8, #0
   19ad4:	d0f8      	beq.n	19ac8 <strtol+0xc0>
		*endptr = (char *)(any ? s - 1 : nptr);
   19ad6:	b10e      	cbz	r6, 19adc <strtol+0xd4>
   19ad8:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   19adc:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   19ae0:	e7f2      	b.n	19ac8 <strtol+0xc0>
	if (base == 0) {
   19ae2:	2330      	movs	r3, #48	; 0x30
   19ae4:	2a00      	cmp	r2, #0
   19ae6:	d1b0      	bne.n	19a4a <strtol+0x42>
		base = c == '0' ? 8 : 10;
   19ae8:	2208      	movs	r2, #8
   19aea:	e7ae      	b.n	19a4a <strtol+0x42>
	if ((base == 0 || base == 16) &&
   19aec:	2b30      	cmp	r3, #48	; 0x30
   19aee:	d0a4      	beq.n	19a3a <strtol+0x32>
		base = c == '0' ? 8 : 10;
   19af0:	220a      	movs	r2, #10
   19af2:	e7aa      	b.n	19a4a <strtol+0x42>

00019af4 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   19af4:	3901      	subs	r1, #1
   19af6:	4603      	mov	r3, r0
   19af8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   19afc:	b90a      	cbnz	r2, 19b02 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   19afe:	701a      	strb	r2, [r3, #0]

	return dest;
}
   19b00:	4770      	bx	lr
		*d = *s;
   19b02:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   19b06:	e7f7      	b.n	19af8 <strcpy+0x4>

00019b08 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   19b08:	b570      	push	{r4, r5, r6, lr}
   19b0a:	3901      	subs	r1, #1
   19b0c:	4605      	mov	r5, r0
   19b0e:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   19b10:	b142      	cbz	r2, 19b24 <strncpy+0x1c>
   19b12:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   19b16:	1e56      	subs	r6, r2, #1
   19b18:	b92b      	cbnz	r3, 19b26 <strncpy+0x1e>
   19b1a:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   19b1c:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   19b20:	42a2      	cmp	r2, r4
   19b22:	d1fb      	bne.n	19b1c <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   19b24:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   19b26:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   19b2a:	4632      	mov	r2, r6
   19b2c:	e7ef      	b.n	19b0e <strncpy+0x6>

00019b2e <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   19b2e:	4603      	mov	r3, r0
	size_t n = 0;
   19b30:	2000      	movs	r0, #0

	while (*s != '\0') {
   19b32:	5c1a      	ldrb	r2, [r3, r0]
   19b34:	b902      	cbnz	r2, 19b38 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   19b36:	4770      	bx	lr
		n++;
   19b38:	3001      	adds	r0, #1
   19b3a:	e7fa      	b.n	19b32 <strlen+0x4>

00019b3c <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   19b3c:	4603      	mov	r3, r0
	size_t n = 0;
   19b3e:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   19b40:	5c1a      	ldrb	r2, [r3, r0]
   19b42:	b10a      	cbz	r2, 19b48 <strnlen+0xc>
   19b44:	4288      	cmp	r0, r1
   19b46:	d100      	bne.n	19b4a <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   19b48:	4770      	bx	lr
		n++;
   19b4a:	3001      	adds	r0, #1
   19b4c:	e7f8      	b.n	19b40 <strnlen+0x4>

00019b4e <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   19b4e:	1e43      	subs	r3, r0, #1
   19b50:	3901      	subs	r1, #1
   19b52:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   19b56:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   19b5a:	4282      	cmp	r2, r0
   19b5c:	d101      	bne.n	19b62 <strcmp+0x14>
   19b5e:	2a00      	cmp	r2, #0
   19b60:	d1f7      	bne.n	19b52 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   19b62:	1a10      	subs	r0, r2, r0
   19b64:	4770      	bx	lr

00019b66 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   19b66:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   19b68:	2400      	movs	r4, #0
   19b6a:	42a2      	cmp	r2, r4
   19b6c:	d008      	beq.n	19b80 <strncmp+0x1a>
   19b6e:	5d03      	ldrb	r3, [r0, r4]
   19b70:	5d0d      	ldrb	r5, [r1, r4]
   19b72:	42ab      	cmp	r3, r5
   19b74:	d102      	bne.n	19b7c <strncmp+0x16>
   19b76:	3401      	adds	r4, #1
   19b78:	2b00      	cmp	r3, #0
   19b7a:	d1f6      	bne.n	19b6a <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   19b7c:	1b58      	subs	r0, r3, r5
   19b7e:	e000      	b.n	19b82 <strncmp+0x1c>
   19b80:	2000      	movs	r0, #0
}
   19b82:	bd30      	pop	{r4, r5, pc}

00019b84 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   19b84:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   19b86:	b15a      	cbz	r2, 19ba0 <memcmp+0x1c>
   19b88:	3901      	subs	r1, #1
   19b8a:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   19b8c:	f810 2b01 	ldrb.w	r2, [r0], #1
   19b90:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   19b94:	42a0      	cmp	r0, r4
   19b96:	d001      	beq.n	19b9c <memcmp+0x18>
   19b98:	429a      	cmp	r2, r3
   19b9a:	d0f7      	beq.n	19b8c <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   19b9c:	1ad0      	subs	r0, r2, r3
}
   19b9e:	bd10      	pop	{r4, pc}
		return 0;
   19ba0:	4610      	mov	r0, r2
   19ba2:	e7fc      	b.n	19b9e <memcmp+0x1a>

00019ba4 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   19ba4:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   19ba6:	ea81 0400 	eor.w	r4, r1, r0
   19baa:	07a5      	lsls	r5, r4, #30
   19bac:	4603      	mov	r3, r0
   19bae:	d00b      	beq.n	19bc8 <memcpy+0x24>
   19bb0:	3b01      	subs	r3, #1
   19bb2:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   19bb4:	4291      	cmp	r1, r2
   19bb6:	d11b      	bne.n	19bf0 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   19bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   19bba:	2a00      	cmp	r2, #0
   19bbc:	d0fc      	beq.n	19bb8 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   19bbe:	f811 4b01 	ldrb.w	r4, [r1], #1
   19bc2:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   19bc6:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
   19bc8:	079c      	lsls	r4, r3, #30
   19bca:	d1f6      	bne.n	19bba <memcpy+0x16>
   19bcc:	f022 0403 	bic.w	r4, r2, #3
   19bd0:	1f1d      	subs	r5, r3, #4
   19bd2:	0896      	lsrs	r6, r2, #2
   19bd4:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   19bd6:	42b9      	cmp	r1, r7
   19bd8:	d105      	bne.n	19be6 <memcpy+0x42>
   19bda:	f06f 0503 	mvn.w	r5, #3
   19bde:	fb05 2206 	mla	r2, r5, r6, r2
   19be2:	4423      	add	r3, r4
   19be4:	e7e4      	b.n	19bb0 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   19be6:	f851 cb04 	ldr.w	ip, [r1], #4
   19bea:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   19bee:	e7f2      	b.n	19bd6 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   19bf0:	f811 4b01 	ldrb.w	r4, [r1], #1
   19bf4:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   19bf8:	e7dc      	b.n	19bb4 <memcpy+0x10>

00019bfa <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   19bfa:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   19bfc:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
   19bfe:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   19c00:	079c      	lsls	r4, r3, #30
   19c02:	d111      	bne.n	19c28 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   19c04:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   19c08:	f022 0603 	bic.w	r6, r2, #3
   19c0c:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   19c10:	441e      	add	r6, r3
   19c12:	0894      	lsrs	r4, r2, #2
   19c14:	42b3      	cmp	r3, r6
   19c16:	d10d      	bne.n	19c34 <memset+0x3a>
   19c18:	f06f 0503 	mvn.w	r5, #3
   19c1c:	fb05 2204 	mla	r2, r5, r4, r2
   19c20:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   19c22:	4293      	cmp	r3, r2
   19c24:	d109      	bne.n	19c3a <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   19c26:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   19c28:	2a00      	cmp	r2, #0
   19c2a:	d0fc      	beq.n	19c26 <memset+0x2c>
		*(d_byte++) = c_byte;
   19c2c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   19c30:	3a01      	subs	r2, #1
   19c32:	e7e5      	b.n	19c00 <memset+0x6>
		*(d_word++) = c_word;
   19c34:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   19c38:	e7ec      	b.n	19c14 <memset+0x1a>
		*(d_byte++) = c_byte;
   19c3a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   19c3e:	e7f0      	b.n	19c22 <memset+0x28>

00019c40 <_stdout_hook_default>:
}
   19c40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19c44:	4770      	bx	lr

00019c46 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   19c46:	f7fc bcad 	b.w	165a4 <SystemInit>

00019c4a <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
void pm_power_state_set(struct pm_state_info info)
{
   19c4a:	b084      	sub	sp, #16
   19c4c:	ab04      	add	r3, sp, #16
   19c4e:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   19c52:	f89d 3004 	ldrb.w	r3, [sp, #4]
   19c56:	2b06      	cmp	r3, #6
   19c58:	d108      	bne.n	19c6c <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   19c5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19c5e:	2201      	movs	r2, #1
   19c60:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   19c64:	f3bf 8f4f 	dsb	sy
        __WFE();
   19c68:	bf20      	wfe
    while (true)
   19c6a:	e7fd      	b.n	19c68 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   19c6c:	b004      	add	sp, #16
   19c6e:	4770      	bx	lr

00019c70 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   19c70:	b084      	sub	sp, #16
   19c72:	ab04      	add	r3, sp, #16
   19c74:	e903 0007 	stmdb	r3, {r0, r1, r2}
   19c78:	2300      	movs	r3, #0
   19c7a:	f383 8811 	msr	BASEPRI, r3
   19c7e:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   19c82:	b004      	add	sp, #16
   19c84:	4770      	bx	lr

00019c86 <send_cmd_status>:
{
   19c86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   19c8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   19c8e:	4606      	mov	r6, r0
   19c90:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   19c92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19c96:	2100      	movs	r1, #0
   19c98:	200f      	movs	r0, #15
   19c9a:	f7ea fc51 	bl	4540 <bt_buf_get_evt>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   19c9e:	2701      	movs	r7, #1
	return net_buf_simple_add(&buf->b, len);
   19ca0:	f100 0808 	add.w	r8, r0, #8
   19ca4:	4604      	mov	r4, r0
   19ca6:	7507      	strb	r7, [r0, #20]
   19ca8:	2102      	movs	r1, #2
   19caa:	4640      	mov	r0, r8
   19cac:	f003 fb07 	bl	1d2be <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   19cb0:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   19cb2:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   19cb4:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   19cb6:	7041      	strb	r1, [r0, #1]
   19cb8:	4640      	mov	r0, r8
   19cba:	f003 fb00 	bl	1d2be <net_buf_simple_add>
	evt->ncmd = 1U;
   19cbe:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   19cc0:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   19cc2:	8046      	strh	r6, [r0, #2]
		bt_recv_prio(buf);
   19cc4:	4620      	mov	r0, r4
}
   19cc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv_prio(buf);
   19cca:	f7eb baeb 	b.w	52a4 <bt_recv_prio>

00019cce <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   19cce:	f101 0320 	add.w	r3, r1, #32
   19cd2:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   19cd4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   19cd8:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   19cdc:	428b      	cmp	r3, r1
   19cde:	d1f9      	bne.n	19cd4 <sys_memcpy_swap.constprop.0+0x6>
}
   19ce0:	4770      	bx	lr

00019ce2 <bt_hci_ecc_supported_commands>:
void bt_hci_ecc_supported_commands(uint8_t *supported_commands)
{
	/* LE Read Local P-256 Public Key */
	supported_commands[34] |= BIT(1);
	/* LE Generate DH Key v1 */
	supported_commands[34] |= BIT(2);
   19ce2:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   19ce6:	f043 0306 	orr.w	r3, r3, #6
   19cea:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	/* LE Generate DH Key v2 */
	supported_commands[41] |= BIT(2);
   19cee:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   19cf2:	f043 0304 	orr.w	r3, r3, #4
   19cf6:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
}
   19cfa:	4770      	bx	lr

00019cfc <bt_settings_decode_key>:
{
   19cfc:	b570      	push	{r4, r5, r6, lr}
   19cfe:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   19d00:	2100      	movs	r1, #0
{
   19d02:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   19d04:	f7ff fbef 	bl	194e6 <settings_name_next>
   19d08:	280d      	cmp	r0, #13
   19d0a:	d118      	bne.n	19d3e <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   19d0c:	7b23      	ldrb	r3, [r4, #12]
   19d0e:	2b30      	cmp	r3, #48	; 0x30
   19d10:	d111      	bne.n	19d36 <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   19d12:	2300      	movs	r3, #0
   19d14:	702b      	strb	r3, [r5, #0]
   19d16:	f104 060c 	add.w	r6, r4, #12
   19d1a:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   19d1c:	462a      	mov	r2, r5
   19d1e:	4620      	mov	r0, r4
   19d20:	2301      	movs	r3, #1
   19d22:	2102      	movs	r1, #2
   19d24:	3402      	adds	r4, #2
   19d26:	f7fe fba3 	bl	18470 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   19d2a:	42b4      	cmp	r4, r6
   19d2c:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   19d30:	d1f4      	bne.n	19d1c <bt_settings_decode_key+0x20>
	return 0;
   19d32:	2000      	movs	r0, #0
}
   19d34:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   19d36:	2b31      	cmp	r3, #49	; 0x31
   19d38:	d101      	bne.n	19d3e <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   19d3a:	2301      	movs	r3, #1
   19d3c:	e7ea      	b.n	19d14 <bt_settings_decode_key+0x18>
		return -EINVAL;
   19d3e:	f06f 0015 	mvn.w	r0, #21
   19d42:	e7f7      	b.n	19d34 <bt_settings_decode_key+0x38>

00019d44 <xor16>:
#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_HCI_CORE)
#define LOG_MODULE_NAME bt_aes_ccm
#include "common/log.h"

static inline void xor16(uint8_t *dst, const uint8_t *a, const uint8_t *b)
{
   19d44:	b510      	push	{r4, lr}
	dst[0] = a[0] ^ b[0];
   19d46:	780b      	ldrb	r3, [r1, #0]
   19d48:	7814      	ldrb	r4, [r2, #0]
   19d4a:	4063      	eors	r3, r4
   19d4c:	7003      	strb	r3, [r0, #0]
	dst[1] = a[1] ^ b[1];
   19d4e:	7854      	ldrb	r4, [r2, #1]
   19d50:	784b      	ldrb	r3, [r1, #1]
   19d52:	4063      	eors	r3, r4
   19d54:	7043      	strb	r3, [r0, #1]
	dst[2] = a[2] ^ b[2];
   19d56:	7894      	ldrb	r4, [r2, #2]
   19d58:	788b      	ldrb	r3, [r1, #2]
   19d5a:	4063      	eors	r3, r4
   19d5c:	7083      	strb	r3, [r0, #2]
	dst[3] = a[3] ^ b[3];
   19d5e:	78d4      	ldrb	r4, [r2, #3]
   19d60:	78cb      	ldrb	r3, [r1, #3]
   19d62:	4063      	eors	r3, r4
   19d64:	70c3      	strb	r3, [r0, #3]
	dst[4] = a[4] ^ b[4];
   19d66:	7914      	ldrb	r4, [r2, #4]
   19d68:	790b      	ldrb	r3, [r1, #4]
   19d6a:	4063      	eors	r3, r4
   19d6c:	7103      	strb	r3, [r0, #4]
	dst[5] = a[5] ^ b[5];
   19d6e:	7954      	ldrb	r4, [r2, #5]
   19d70:	794b      	ldrb	r3, [r1, #5]
   19d72:	4063      	eors	r3, r4
   19d74:	7143      	strb	r3, [r0, #5]
	dst[6] = a[6] ^ b[6];
   19d76:	7994      	ldrb	r4, [r2, #6]
   19d78:	798b      	ldrb	r3, [r1, #6]
   19d7a:	4063      	eors	r3, r4
   19d7c:	7183      	strb	r3, [r0, #6]
	dst[7] = a[7] ^ b[7];
   19d7e:	79d4      	ldrb	r4, [r2, #7]
   19d80:	79cb      	ldrb	r3, [r1, #7]
   19d82:	4063      	eors	r3, r4
   19d84:	71c3      	strb	r3, [r0, #7]
	dst[8] = a[8] ^ b[8];
   19d86:	7a14      	ldrb	r4, [r2, #8]
   19d88:	7a0b      	ldrb	r3, [r1, #8]
   19d8a:	4063      	eors	r3, r4
   19d8c:	7203      	strb	r3, [r0, #8]
	dst[9] = a[9] ^ b[9];
   19d8e:	7a54      	ldrb	r4, [r2, #9]
   19d90:	7a4b      	ldrb	r3, [r1, #9]
   19d92:	4063      	eors	r3, r4
   19d94:	7243      	strb	r3, [r0, #9]
	dst[10] = a[10] ^ b[10];
   19d96:	7a8b      	ldrb	r3, [r1, #10]
   19d98:	7a94      	ldrb	r4, [r2, #10]
   19d9a:	4063      	eors	r3, r4
   19d9c:	7283      	strb	r3, [r0, #10]
	dst[11] = a[11] ^ b[11];
   19d9e:	7ad4      	ldrb	r4, [r2, #11]
   19da0:	7acb      	ldrb	r3, [r1, #11]
   19da2:	4063      	eors	r3, r4
   19da4:	72c3      	strb	r3, [r0, #11]
	dst[12] = a[12] ^ b[12];
   19da6:	7b14      	ldrb	r4, [r2, #12]
   19da8:	7b0b      	ldrb	r3, [r1, #12]
   19daa:	4063      	eors	r3, r4
   19dac:	7303      	strb	r3, [r0, #12]
	dst[13] = a[13] ^ b[13];
   19dae:	7b54      	ldrb	r4, [r2, #13]
   19db0:	7b4b      	ldrb	r3, [r1, #13]
   19db2:	4063      	eors	r3, r4
   19db4:	7343      	strb	r3, [r0, #13]
	dst[14] = a[14] ^ b[14];
   19db6:	7b94      	ldrb	r4, [r2, #14]
   19db8:	7b8b      	ldrb	r3, [r1, #14]
   19dba:	4063      	eors	r3, r4
   19dbc:	7383      	strb	r3, [r0, #14]
	dst[15] = a[15] ^ b[15];
   19dbe:	7bcb      	ldrb	r3, [r1, #15]
   19dc0:	7bd2      	ldrb	r2, [r2, #15]
   19dc2:	4053      	eors	r3, r2
   19dc4:	73c3      	strb	r3, [r0, #15]
}
   19dc6:	bd10      	pop	{r4, pc}

00019dc8 <ccm_crypt>:
	return 0;
}

static int ccm_crypt(const uint8_t key[16], const uint8_t nonce[13],
		     const uint8_t *in_msg, uint8_t *out_msg, size_t msg_len)
{
   19dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19dcc:	b089      	sub	sp, #36	; 0x24
   19dce:	4699      	mov	r9, r3
   19dd0:	9d12      	ldr	r5, [sp, #72]	; 0x48
	blk_cnt = (msg_len + 15) / 16;
	if (!last_blk) {
		last_blk = 16U;
	}

	a_i[0] = 0x01;
   19dd2:	2301      	movs	r3, #1
	blk_cnt = (msg_len + 15) / 16;
   19dd4:	f105 060f 	add.w	r6, r5, #15
{
   19dd8:	4607      	mov	r7, r0
		last_blk = 16U;
   19dda:	f015 050f 	ands.w	r5, r5, #15
{
   19dde:	4690      	mov	r8, r2
	memcpy(&a_i[1], nonce, 13);
   19de0:	eb0d 0003 	add.w	r0, sp, r3
   19de4:	f04f 020d 	mov.w	r2, #13
	blk_cnt = (msg_len + 15) / 16;
   19de8:	ea4f 1616 	mov.w	r6, r6, lsr #4
		last_blk = 16U;
   19dec:	bf08      	it	eq
   19dee:	2510      	moveq	r5, #16
	a_i[0] = 0x01;
   19df0:	f88d 3000 	strb.w	r3, [sp]
	memcpy(&a_i[1], nonce, 13);
   19df4:	f7ff fed6 	bl	19ba4 <memcpy>

	for (j = 0; j < blk_cnt; j++) {
   19df8:	b2b6      	uxth	r6, r6
   19dfa:	2400      	movs	r4, #0
		if (err) {
			return err;
		}

		/* Encrypted = Payload[0-15] ^ C_1 */
		if (j < blk_cnt - 1) {
   19dfc:	f106 3aff 	add.w	sl, r6, #4294967295	; 0xffffffff
	for (j = 0; j < blk_cnt; j++) {
   19e00:	42b4      	cmp	r4, r6
   19e02:	d304      	bcc.n	19e0e <ccm_crypt+0x46>
				out_msg[(j * 16) + i] =
					in_msg[(j * 16) + i] ^ s_i[i];
			}
		}
	}
	return 0;
   19e04:	2100      	movs	r1, #0
}
   19e06:	4608      	mov	r0, r1
   19e08:	b009      	add	sp, #36	; 0x24
   19e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	dst[0] = val >> 8;
   19e0e:	f104 0b01 	add.w	fp, r4, #1
   19e12:	f3cb 2307 	ubfx	r3, fp, #8, #8
		err = bt_encrypt_be(key, a_i, s_i);
   19e16:	4669      	mov	r1, sp
   19e18:	aa04      	add	r2, sp, #16
   19e1a:	4638      	mov	r0, r7
   19e1c:	f88d 300e 	strb.w	r3, [sp, #14]
	dst[1] = val;
   19e20:	f88d b00f 	strb.w	fp, [sp, #15]
   19e24:	f002 fbd3 	bl	1c5ce <bt_encrypt_be>
		if (err) {
   19e28:	4601      	mov	r1, r0
   19e2a:	2800      	cmp	r0, #0
   19e2c:	d1eb      	bne.n	19e06 <ccm_crypt+0x3e>
		if (j < blk_cnt - 1) {
   19e2e:	45a2      	cmp	sl, r4
   19e30:	eb08 1204 	add.w	r2, r8, r4, lsl #4
   19e34:	eb09 1004 	add.w	r0, r9, r4, lsl #4
   19e38:	d904      	bls.n	19e44 <ccm_crypt+0x7c>
			xor16(&out_msg[j * 16], s_i, &in_msg[j * 16]);
   19e3a:	a904      	add	r1, sp, #16
   19e3c:	f7ff ff82 	bl	19d44 <xor16>
	for (j = 0; j < blk_cnt; j++) {
   19e40:	465c      	mov	r4, fp
   19e42:	e7dd      	b.n	19e00 <ccm_crypt+0x38>
   19e44:	f10d 0c10 	add.w	ip, sp, #16
					in_msg[(j * 16) + i] ^ s_i[i];
   19e48:	f812 3b01 	ldrb.w	r3, [r2], #1
   19e4c:	f81c 4b01 	ldrb.w	r4, [ip], #1
			for (i = 0; i < last_blk; i++) {
   19e50:	3101      	adds	r1, #1
				out_msg[(j * 16) + i] =
   19e52:	4063      	eors	r3, r4
			for (i = 0; i < last_blk; i++) {
   19e54:	428d      	cmp	r5, r1
				out_msg[(j * 16) + i] =
   19e56:	f800 3b01 	strb.w	r3, [r0], #1
			for (i = 0; i < last_blk; i++) {
   19e5a:	d8f5      	bhi.n	19e48 <ccm_crypt+0x80>
   19e5c:	e7f0      	b.n	19e40 <ccm_crypt+0x78>

00019e5e <ccm_auth>:
{
   19e5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e62:	b08f      	sub	sp, #60	; 0x3c
		last_blk = 16U;
   19e64:	f013 0a0f 	ands.w	sl, r3, #15
{
   19e68:	4680      	mov	r8, r0
   19e6a:	9201      	str	r2, [sp, #4]
   19e6c:	461d      	mov	r5, r3
	memcpy(b + 1, nonce, 13);
   19e6e:	f04f 020d 	mov.w	r2, #13
	b[0] = 0x01;
   19e72:	f04f 0301 	mov.w	r3, #1
	memcpy(b + 1, nonce, 13);
   19e76:	f10d 0b08 	add.w	fp, sp, #8
   19e7a:	f10d 0009 	add.w	r0, sp, #9
	err = bt_encrypt_be(key, b, s0);
   19e7e:	f10d 0928 	add.w	r9, sp, #40	; 0x28
		last_blk = 16U;
   19e82:	bf08      	it	eq
   19e84:	f04f 0a10 	moveq.w	sl, #16
	b[0] = 0x01;
   19e88:	f88d 3008 	strb.w	r3, [sp, #8]
{
   19e8c:	9c19      	ldr	r4, [sp, #100]	; 0x64
	memcpy(b + 1, nonce, 13);
   19e8e:	f7ff fe89 	bl	19ba4 <memcpy>
	dst[0] = val >> 8;
   19e92:	2300      	movs	r3, #0
	err = bt_encrypt_be(key, b, s0);
   19e94:	464a      	mov	r2, r9
   19e96:	4659      	mov	r1, fp
   19e98:	4640      	mov	r0, r8
   19e9a:	f8ad 3016 	strh.w	r3, [sp, #22]
   19e9e:	f002 fb96 	bl	1c5ce <bt_encrypt_be>
	if (err) {
   19ea2:	4606      	mov	r6, r0
   19ea4:	2800      	cmp	r0, #0
   19ea6:	d15f      	bne.n	19f68 <ccm_auth+0x10a>
	b[0] = (((mic_size - 2) / 2) << 3) | ((!!aad_len) << 6) | 0x01;
   19ea8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   19eaa:	f88d 0016 	strb.w	r0, [sp, #22]
   19eae:	3b02      	subs	r3, #2
   19eb0:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   19eb4:	ea4f 0383 	mov.w	r3, r3, lsl #2
   19eb8:	bf14      	ite	ne
   19eba:	2240      	movne	r2, #64	; 0x40
   19ebc:	2200      	moveq	r2, #0
   19ebe:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
   19ec2:	4313      	orrs	r3, r2
   19ec4:	f043 0301 	orr.w	r3, r3, #1
	err = bt_encrypt_be(key, b, X0);
   19ec8:	aa06      	add	r2, sp, #24
   19eca:	4659      	mov	r1, fp
   19ecc:	4640      	mov	r0, r8
	b[0] = (((mic_size - 2) / 2) << 3) | ((!!aad_len) << 6) | 0x01;
   19ece:	f88d 3008 	strb.w	r3, [sp, #8]
	dst[1] = val;
   19ed2:	f88d 5017 	strb.w	r5, [sp, #23]
	err = bt_encrypt_be(key, b, X0);
   19ed6:	f002 fb7a 	bl	1c5ce <bt_encrypt_be>
	if (err) {
   19eda:	4607      	mov	r7, r0
   19edc:	bbb0      	cbnz	r0, 19f4c <ccm_auth+0xee>
	if (aad_len) {
   19ede:	b3ac      	cbz	r4, 19f4c <ccm_auth+0xee>
			b[i] = X0[i] ^ b[i];
   19ee0:	f89d 1018 	ldrb.w	r1, [sp, #24]
   19ee4:	f88d 1008 	strb.w	r1, [sp, #8]
   19ee8:	f89d 1019 	ldrb.w	r1, [sp, #25]
   19eec:	4061      	eors	r1, r4
		aad_len += sizeof(uint16_t);
   19eee:	3402      	adds	r4, #2
			b[i] = X0[i] ^ b[i];
   19ef0:	f88d 1009 	strb.w	r1, [sp, #9]
		aad_len += sizeof(uint16_t);
   19ef4:	b2e4      	uxtb	r4, r4
		while (aad_len > 16) {
   19ef6:	2002      	movs	r0, #2
				b[i] = X0[i] ^ aad[j];
   19ef8:	aa06      	add	r2, sp, #24
		while (aad_len > 16) {
   19efa:	9b18      	ldr	r3, [sp, #96]	; 0x60
   19efc:	2c10      	cmp	r4, #16
   19efe:	eb03 0107 	add.w	r1, r3, r7
   19f02:	460b      	mov	r3, r1
   19f04:	d80a      	bhi.n	19f1c <ccm_auth+0xbe>
   19f06:	aa06      	add	r2, sp, #24
		for (; i < aad_len; i++, j++) {
   19f08:	42a0      	cmp	r0, r4
   19f0a:	4621      	mov	r1, r4
   19f0c:	db30      	blt.n	19f70 <ccm_auth+0x112>
		for (i = aad_len; i < 16; i++) {
   19f0e:	290f      	cmp	r1, #15
   19f10:	dd36      	ble.n	19f80 <ccm_auth+0x122>
		err = bt_encrypt_be(key, b, X0);
   19f12:	a902      	add	r1, sp, #8
   19f14:	4640      	mov	r0, r8
   19f16:	f002 fb5a 	bl	1c5ce <bt_encrypt_be>
		if (err) {
   19f1a:	e017      	b.n	19f4c <ccm_auth+0xee>
		while (aad_len > 16) {
   19f1c:	4601      	mov	r1, r0
				b[i] = X0[i] ^ aad[j];
   19f1e:	f811 e002 	ldrb.w	lr, [r1, r2]
   19f22:	f813 cb01 	ldrb.w	ip, [r3], #1
   19f26:	ea8c 0c0e 	eor.w	ip, ip, lr
   19f2a:	f801 c00b 	strb.w	ip, [r1, fp]
				i++, j++;
   19f2e:	3101      	adds	r1, #1
			} while (i < 16);
   19f30:	2910      	cmp	r1, #16
   19f32:	d1f4      	bne.n	19f1e <ccm_auth+0xc0>
   19f34:	f1c0 0010 	rsb	r0, r0, #16
   19f38:	4407      	add	r7, r0
			err = bt_encrypt_be(key, b, X0);
   19f3a:	4659      	mov	r1, fp
   19f3c:	4640      	mov	r0, r8
   19f3e:	f002 fb46 	bl	1c5ce <bt_encrypt_be>
   19f42:	3c10      	subs	r4, #16
   19f44:	b2e4      	uxtb	r4, r4
			if (err) {
   19f46:	aa06      	add	r2, sp, #24
   19f48:	2800      	cmp	r0, #0
   19f4a:	d0d6      	beq.n	19efa <ccm_auth+0x9c>
	blk_cnt = (msg_len + 15) / 16;
   19f4c:	350f      	adds	r5, #15
			memcpy(&b[i], &Xn[i], 16 - i);
   19f4e:	ab06      	add	r3, sp, #24
	blk_cnt = (msg_len + 15) / 16;
   19f50:	2700      	movs	r7, #0
	for (j = 0; j < blk_cnt; j++) {
   19f52:	f3c5 150f 	ubfx	r5, r5, #4, #16
			memcpy(&b[i], &Xn[i], 16 - i);
   19f56:	eb03 040a 	add.w	r4, r3, sl
	for (j = 0; j < blk_cnt; j++) {
   19f5a:	42bd      	cmp	r5, r7
   19f5c:	dc15      	bgt.n	19f8a <ccm_auth+0x12c>
	for (i = 0; i < mic_size; i++) {
   19f5e:	2300      	movs	r3, #0
		mic[i] = s0[i] ^ Xn[i];
   19f60:	a906      	add	r1, sp, #24
	for (i = 0; i < mic_size; i++) {
   19f62:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   19f64:	4293      	cmp	r3, r2
   19f66:	d13b      	bne.n	19fe0 <ccm_auth+0x182>
}
   19f68:	4630      	mov	r0, r6
   19f6a:	b00f      	add	sp, #60	; 0x3c
   19f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			b[i] = X0[i] ^ aad[j];
   19f70:	5c17      	ldrb	r7, [r2, r0]
   19f72:	f813 1b01 	ldrb.w	r1, [r3], #1
   19f76:	4079      	eors	r1, r7
   19f78:	af02      	add	r7, sp, #8
   19f7a:	5439      	strb	r1, [r7, r0]
		for (; i < aad_len; i++, j++) {
   19f7c:	3001      	adds	r0, #1
   19f7e:	e7c3      	b.n	19f08 <ccm_auth+0xaa>
			b[i] = X0[i];
   19f80:	a802      	add	r0, sp, #8
   19f82:	5c53      	ldrb	r3, [r2, r1]
   19f84:	5443      	strb	r3, [r0, r1]
		for (i = aad_len; i < 16; i++) {
   19f86:	3101      	adds	r1, #1
   19f88:	e7c1      	b.n	19f0e <ccm_auth+0xb0>
		if (j + 1 == blk_cnt) {
   19f8a:	013a      	lsls	r2, r7, #4
   19f8c:	9b01      	ldr	r3, [sp, #4]
   19f8e:	3701      	adds	r7, #1
   19f90:	42bd      	cmp	r5, r7
   19f92:	441a      	add	r2, r3
   19f94:	d11f      	bne.n	19fd6 <ccm_auth+0x178>
   19f96:	f10d 0c18 	add.w	ip, sp, #24
   19f9a:	a802      	add	r0, sp, #8
			for (i = 0; i < last_blk; i++) {
   19f9c:	2300      	movs	r3, #0
				b[i] = Xn[i] ^ cleartext_msg[(j * 16) + i];
   19f9e:	f81c 1b01 	ldrb.w	r1, [ip], #1
   19fa2:	f812 eb01 	ldrb.w	lr, [r2], #1
			for (i = 0; i < last_blk; i++) {
   19fa6:	3301      	adds	r3, #1
				b[i] = Xn[i] ^ cleartext_msg[(j * 16) + i];
   19fa8:	ea81 010e 	eor.w	r1, r1, lr
			for (i = 0; i < last_blk; i++) {
   19fac:	459a      	cmp	sl, r3
				b[i] = Xn[i] ^ cleartext_msg[(j * 16) + i];
   19fae:	f800 1b01 	strb.w	r1, [r0], #1
			for (i = 0; i < last_blk; i++) {
   19fb2:	dcf4      	bgt.n	19f9e <ccm_auth+0x140>
			memcpy(&b[i], &Xn[i], 16 - i);
   19fb4:	ab02      	add	r3, sp, #8
   19fb6:	f1ca 0210 	rsb	r2, sl, #16
   19fba:	4621      	mov	r1, r4
   19fbc:	eb03 000a 	add.w	r0, r3, sl
   19fc0:	f7ff fdf0 	bl	19ba4 <memcpy>
		err = bt_encrypt_be(key, b, Xn);
   19fc4:	aa06      	add	r2, sp, #24
   19fc6:	a902      	add	r1, sp, #8
   19fc8:	4640      	mov	r0, r8
   19fca:	f002 fb00 	bl	1c5ce <bt_encrypt_be>
		if (err) {
   19fce:	2800      	cmp	r0, #0
   19fd0:	d0c3      	beq.n	19f5a <ccm_auth+0xfc>
		err = bt_encrypt_be(key, b, Xn);
   19fd2:	4606      	mov	r6, r0
   19fd4:	e7c8      	b.n	19f68 <ccm_auth+0x10a>
			xor16(b, Xn, &cleartext_msg[j * 16]);
   19fd6:	a906      	add	r1, sp, #24
   19fd8:	a802      	add	r0, sp, #8
   19fda:	f7ff feb3 	bl	19d44 <xor16>
   19fde:	e7f1      	b.n	19fc4 <ccm_auth+0x166>
		mic[i] = s0[i] ^ Xn[i];
   19fe0:	5c58      	ldrb	r0, [r3, r1]
   19fe2:	f819 2003 	ldrb.w	r2, [r9, r3]
   19fe6:	4042      	eors	r2, r0
   19fe8:	981a      	ldr	r0, [sp, #104]	; 0x68
   19fea:	54c2      	strb	r2, [r0, r3]
	for (i = 0; i < mic_size; i++) {
   19fec:	3301      	adds	r3, #1
   19fee:	e7b8      	b.n	19f62 <ccm_auth+0x104>

00019ff0 <bt_ccm_decrypt>:

int bt_ccm_decrypt(const uint8_t key[16], uint8_t nonce[13], const uint8_t *enc_msg,
		   size_t msg_len, const uint8_t *aad, size_t aad_len,
		   uint8_t *out_msg, size_t mic_size)
{
   19ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ff4:	b089      	sub	sp, #36	; 0x24
   19ff6:	e9dd ba13 	ldrd	fp, sl, [sp, #76]	; 0x4c
	uint8_t mic[16];

	if (aad_len >= 0xff00 || mic_size > sizeof(mic)) {
   19ffa:	f5bb 4f7f 	cmp.w	fp, #65280	; 0xff00
{
   19ffe:	9e15      	ldr	r6, [sp, #84]	; 0x54
   1a000:	4607      	mov	r7, r0
   1a002:	4688      	mov	r8, r1
   1a004:	4615      	mov	r5, r2
   1a006:	461c      	mov	r4, r3
	if (aad_len >= 0xff00 || mic_size > sizeof(mic)) {
   1a008:	d21e      	bcs.n	1a048 <bt_ccm_decrypt+0x58>
   1a00a:	2e10      	cmp	r6, #16
   1a00c:	d81c      	bhi.n	1a048 <bt_ccm_decrypt+0x58>
		return -EINVAL;
	}

	ccm_crypt(key, nonce, enc_msg, out_msg, msg_len);
   1a00e:	9300      	str	r3, [sp, #0]
   1a010:	4653      	mov	r3, sl
   1a012:	f7ff fed9 	bl	19dc8 <ccm_crypt>

	ccm_auth(key, nonce, out_msg, msg_len, aad, aad_len, mic, mic_size);
   1a016:	f10d 0910 	add.w	r9, sp, #16
   1a01a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1a01c:	9300      	str	r3, [sp, #0]
   1a01e:	4652      	mov	r2, sl
   1a020:	4623      	mov	r3, r4
   1a022:	4641      	mov	r1, r8
   1a024:	e9cd b901 	strd	fp, r9, [sp, #4]
   1a028:	9603      	str	r6, [sp, #12]
   1a02a:	4638      	mov	r0, r7
   1a02c:	f7ff ff17 	bl	19e5e <ccm_auth>

	if (memcmp(mic, enc_msg + msg_len, mic_size)) {
   1a030:	4632      	mov	r2, r6
   1a032:	1929      	adds	r1, r5, r4
   1a034:	4648      	mov	r0, r9
   1a036:	f7ff fda5 	bl	19b84 <memcmp>
   1a03a:	2800      	cmp	r0, #0
		return -EBADMSG;
   1a03c:	bf18      	it	ne
   1a03e:	f06f 004c 	mvnne.w	r0, #76	; 0x4c
	}

	return 0;
}
   1a042:	b009      	add	sp, #36	; 0x24
   1a044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EINVAL;
   1a048:	f06f 0015 	mvn.w	r0, #21
   1a04c:	e7f9      	b.n	1a042 <bt_ccm_decrypt+0x52>

0001a04e <bt_ccm_encrypt>:

int bt_ccm_encrypt(const uint8_t key[16], uint8_t nonce[13], const uint8_t *msg,
		   size_t msg_len, const uint8_t *aad, size_t aad_len,
		   uint8_t *out_msg, size_t mic_size)
{
   1a04e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1a052:	4617      	mov	r7, r2
   1a054:	e9dd 280b 	ldrd	r2, r8, [sp, #44]	; 0x2c
	BT_DBG("nonce %s", bt_hex(nonce, 13));
	BT_DBG("msg (len %zu) %s", msg_len, bt_hex(msg, msg_len));
	BT_DBG("aad_len %zu mic_size %zu", aad_len, mic_size);

	/* Unsupported AAD size */
	if (aad_len >= 0xff00 || mic_size > 16) {
   1a058:	f5b2 4f7f 	cmp.w	r2, #65280	; 0xff00
{
   1a05c:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
   1a060:	4605      	mov	r5, r0
   1a062:	460e      	mov	r6, r1
   1a064:	461c      	mov	r4, r3
	uint8_t *mic = out_msg + msg_len;
   1a066:	eb08 0e03 	add.w	lr, r8, r3
	if (aad_len >= 0xff00 || mic_size > 16) {
   1a06a:	d215      	bcs.n	1a098 <bt_ccm_encrypt+0x4a>
   1a06c:	f1bc 0f10 	cmp.w	ip, #16
   1a070:	d812      	bhi.n	1a098 <bt_ccm_encrypt+0x4a>
		return -EINVAL;
	}

	ccm_auth(key, nonce, out_msg, msg_len, aad, aad_len, mic, mic_size);
   1a072:	9201      	str	r2, [sp, #4]
   1a074:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1a076:	9200      	str	r2, [sp, #0]
   1a078:	e9cd ec02 	strd	lr, ip, [sp, #8]
   1a07c:	4642      	mov	r2, r8
   1a07e:	f7ff feee 	bl	19e5e <ccm_auth>

	ccm_crypt(key, nonce, msg, out_msg, msg_len);
   1a082:	9400      	str	r4, [sp, #0]
   1a084:	4643      	mov	r3, r8
   1a086:	463a      	mov	r2, r7
   1a088:	4631      	mov	r1, r6
   1a08a:	4628      	mov	r0, r5
   1a08c:	f7ff fe9c 	bl	19dc8 <ccm_crypt>

	return 0;
   1a090:	2000      	movs	r0, #0
}
   1a092:	b004      	add	sp, #16
   1a094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
   1a098:	f06f 0015 	mvn.w	r0, #21
   1a09c:	e7f9      	b.n	1a092 <bt_ccm_encrypt+0x44>

0001a09e <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1a09e:	b510      	push	{r4, lr}
   1a0a0:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1a0a2:	7801      	ldrb	r1, [r0, #0]
   1a0a4:	7822      	ldrb	r2, [r4, #0]
   1a0a6:	428a      	cmp	r2, r1
{
   1a0a8:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1a0aa:	d00e      	beq.n	1a0ca <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   1a0ac:	4669      	mov	r1, sp
   1a0ae:	f7ea f9d3 	bl	4458 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1a0b2:	a905      	add	r1, sp, #20
   1a0b4:	4620      	mov	r0, r4
   1a0b6:	f7ea f9cf 	bl	4458 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1a0ba:	2210      	movs	r2, #16
   1a0bc:	f10d 0115 	add.w	r1, sp, #21
   1a0c0:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1a0c4:	f7ff fd5e 	bl	19b84 <memcmp>
   1a0c8:	e007      	b.n	1a0da <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   1a0ca:	2a01      	cmp	r2, #1
   1a0cc:	d007      	beq.n	1a0de <bt_uuid_cmp+0x40>
   1a0ce:	2a02      	cmp	r2, #2
   1a0d0:	d008      	beq.n	1a0e4 <bt_uuid_cmp+0x46>
   1a0d2:	b95a      	cbnz	r2, 1a0ec <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1a0d4:	8840      	ldrh	r0, [r0, #2]
   1a0d6:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1a0d8:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   1a0da:	b00a      	add	sp, #40	; 0x28
   1a0dc:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1a0de:	6840      	ldr	r0, [r0, #4]
   1a0e0:	6863      	ldr	r3, [r4, #4]
   1a0e2:	e7f9      	b.n	1a0d8 <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1a0e4:	2210      	movs	r2, #16
   1a0e6:	1c61      	adds	r1, r4, #1
   1a0e8:	3001      	adds	r0, #1
   1a0ea:	e7eb      	b.n	1a0c4 <bt_uuid_cmp+0x26>
	switch (u1->type) {
   1a0ec:	f06f 0015 	mvn.w	r0, #21
   1a0f0:	e7f3      	b.n	1a0da <bt_uuid_cmp+0x3c>

0001a0f2 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1a0f2:	2a04      	cmp	r2, #4
{
   1a0f4:	b538      	push	{r3, r4, r5, lr}
   1a0f6:	460c      	mov	r4, r1
	switch (data_len) {
   1a0f8:	d00d      	beq.n	1a116 <bt_uuid_create+0x24>
   1a0fa:	2a10      	cmp	r2, #16
   1a0fc:	d019      	beq.n	1a132 <bt_uuid_create+0x40>
   1a0fe:	2a02      	cmp	r2, #2
   1a100:	f04f 0300 	mov.w	r3, #0
   1a104:	d11b      	bne.n	1a13e <bt_uuid_create+0x4c>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   1a106:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   1a108:	784a      	ldrb	r2, [r1, #1]
   1a10a:	780b      	ldrb	r3, [r1, #0]
   1a10c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1a110:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1a112:	2001      	movs	r0, #1
}
   1a114:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   1a116:	2301      	movs	r3, #1
   1a118:	7003      	strb	r3, [r0, #0]
   1a11a:	78a2      	ldrb	r2, [r4, #2]
   1a11c:	78c9      	ldrb	r1, [r1, #3]
   1a11e:	7865      	ldrb	r5, [r4, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1a120:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   1a124:	7822      	ldrb	r2, [r4, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1a126:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   1a12a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1a12e:	6042      	str	r2, [r0, #4]
		break;
   1a130:	e7ef      	b.n	1a112 <bt_uuid_create+0x20>
		uuid->type = BT_UUID_TYPE_128;
   1a132:	2302      	movs	r3, #2
   1a134:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   1a138:	f7ff fd34 	bl	19ba4 <memcpy>
		break;
   1a13c:	e7e9      	b.n	1a112 <bt_uuid_create+0x20>
	switch (data_len) {
   1a13e:	4618      	mov	r0, r3
   1a140:	e7e8      	b.n	1a114 <bt_uuid_create+0x22>

0001a142 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   1a142:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   1a144:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1a146:	2106      	movs	r1, #6
{
   1a148:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1a14a:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1a14e:	f002 fa3c 	bl	1c5ca <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1a152:	b918      	cbnz	r0, 1a15c <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   1a154:	79a3      	ldrb	r3, [r4, #6]
   1a156:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1a15a:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   1a15c:	bd10      	pop	{r4, pc}

0001a15e <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1a15e:	280f      	cmp	r0, #15
   1a160:	d806      	bhi.n	1a170 <bt_hci_evt_get_flags+0x12>
   1a162:	280d      	cmp	r0, #13
   1a164:	d80b      	bhi.n	1a17e <bt_hci_evt_get_flags+0x20>
   1a166:	2805      	cmp	r0, #5
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   1a168:	bf14      	ite	ne
   1a16a:	2002      	movne	r0, #2
   1a16c:	2003      	moveq	r0, #3
   1a16e:	4770      	bx	lr
	switch (evt) {
   1a170:	2813      	cmp	r0, #19
   1a172:	d004      	beq.n	1a17e <bt_hci_evt_get_flags+0x20>
   1a174:	281a      	cmp	r0, #26
   1a176:	bf14      	ite	ne
   1a178:	2002      	movne	r0, #2
   1a17a:	2001      	moveq	r0, #1
   1a17c:	4770      	bx	lr
   1a17e:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   1a180:	4770      	bx	lr

0001a182 <atomic_or>:
{
   1a182:	4603      	mov	r3, r0
}
   1a184:	f3bf 8f5b 	dmb	ish
   1a188:	e853 0f00 	ldrex	r0, [r3]
   1a18c:	ea40 0201 	orr.w	r2, r0, r1
   1a190:	e843 2c00 	strex	ip, r2, [r3]
   1a194:	f1bc 0f00 	cmp.w	ip, #0
   1a198:	d1f6      	bne.n	1a188 <atomic_or+0x6>
   1a19a:	f3bf 8f5b 	dmb	ish
   1a19e:	4770      	bx	lr

0001a1a0 <bt_hci_disconnect>:
{
   1a1a0:	b570      	push	{r4, r5, r6, lr}
   1a1a2:	4606      	mov	r6, r0
   1a1a4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1a1a6:	f240 4006 	movw	r0, #1030	; 0x406
   1a1aa:	2103      	movs	r1, #3
   1a1ac:	f7ea fcaa 	bl	4b04 <bt_hci_cmd_create>
	if (!buf) {
   1a1b0:	4604      	mov	r4, r0
   1a1b2:	b168      	cbz	r0, 1a1d0 <bt_hci_disconnect+0x30>
   1a1b4:	2103      	movs	r1, #3
   1a1b6:	3008      	adds	r0, #8
   1a1b8:	f003 f881 	bl	1d2be <net_buf_simple_add>
	disconn->reason = reason;
   1a1bc:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   1a1be:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1a1c0:	4621      	mov	r1, r4
   1a1c2:	2200      	movs	r2, #0
}
   1a1c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1a1c8:	f240 4006 	movw	r0, #1030	; 0x406
   1a1cc:	f7ea bdf0 	b.w	4db0 <bt_hci_cmd_send_sync>
}
   1a1d0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1a1d4:	bd70      	pop	{r4, r5, r6, pc}

0001a1d6 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   1a1d6:	6880      	ldr	r0, [r0, #8]
   1a1d8:	f7ea be62 	b.w	4ea0 <bt_hci_le_enh_conn_complete>

0001a1dc <le_legacy_conn_complete>:
{
   1a1dc:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1a1de:	6881      	ldr	r1, [r0, #8]
{
   1a1e0:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   1a1e2:	780b      	ldrb	r3, [r1, #0]
   1a1e4:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   1a1e8:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   1a1ec:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   1a1f0:	78cb      	ldrb	r3, [r1, #3]
   1a1f2:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   1a1f6:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1a1fa:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   1a1fe:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   1a202:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   1a206:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   1a20a:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   1a20e:	7c4b      	ldrb	r3, [r1, #17]
   1a210:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	memcpy(dst, src, sizeof(*dst));
   1a214:	2207      	movs	r2, #7
   1a216:	3104      	adds	r1, #4
   1a218:	a803      	add	r0, sp, #12
   1a21a:	f7ff fcc3 	bl	19ba4 <memcpy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1a21e:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   1a220:	4669      	mov	r1, sp
   1a222:	2206      	movs	r2, #6
   1a224:	f10d 0013 	add.w	r0, sp, #19
   1a228:	9400      	str	r4, [sp, #0]
   1a22a:	f8ad 4004 	strh.w	r4, [sp, #4]
   1a22e:	f7ff fcb9 	bl	19ba4 <memcpy>
   1a232:	2206      	movs	r2, #6
   1a234:	4669      	mov	r1, sp
   1a236:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   1a23a:	9400      	str	r4, [sp, #0]
   1a23c:	f8ad 4004 	strh.w	r4, [sp, #4]
   1a240:	f7ff fcb0 	bl	19ba4 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   1a244:	a802      	add	r0, sp, #8
   1a246:	f7ea fe2b 	bl	4ea0 <bt_hci_le_enh_conn_complete>
}
   1a24a:	b00a      	add	sp, #40	; 0x28
   1a24c:	bd10      	pop	{r4, pc}

0001a24e <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   1a24e:	8802      	ldrh	r2, [r0, #0]
   1a250:	8843      	ldrh	r3, [r0, #2]
   1a252:	429a      	cmp	r2, r3
{
   1a254:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1a256:	d818      	bhi.n	1a28a <bt_le_conn_params_valid+0x3c>
   1a258:	2a05      	cmp	r2, #5
   1a25a:	d916      	bls.n	1a28a <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1a25c:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   1a260:	d813      	bhi.n	1a28a <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   1a262:	8884      	ldrh	r4, [r0, #4]
   1a264:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   1a268:	d20f      	bcs.n	1a28a <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1a26a:	88c1      	ldrh	r1, [r0, #6]
   1a26c:	f1a1 020a 	sub.w	r2, r1, #10
   1a270:	b292      	uxth	r2, r2
   1a272:	f640 4076 	movw	r0, #3190	; 0xc76
   1a276:	4282      	cmp	r2, r0
   1a278:	d807      	bhi.n	1a28a <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   1a27a:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   1a27e:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   1a282:	bf34      	ite	cc
   1a284:	2001      	movcc	r0, #1
   1a286:	2000      	movcs	r0, #0
}
   1a288:	bd10      	pop	{r4, pc}
		return false;
   1a28a:	2000      	movs	r0, #0
   1a28c:	e7fc      	b.n	1a288 <bt_le_conn_params_valid+0x3a>

0001a28e <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   1a28e:	2000      	movs	r0, #0
   1a290:	4770      	bx	lr

0001a292 <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   1a292:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   1a294:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   1a298:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   1a29a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a29e:	2100      	movs	r1, #0
{
   1a2a0:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   1a2a2:	f7ea f94d 	bl	4540 <bt_buf_get_evt>
   1a2a6:	2102      	movs	r1, #2
   1a2a8:	4604      	mov	r4, r0
   1a2aa:	3008      	adds	r0, #8
   1a2ac:	f003 f807 	bl	1d2be <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   1a2b0:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   1a2b2:	7045      	strb	r5, [r0, #1]

	return buf;
}
   1a2b4:	4620      	mov	r0, r4
   1a2b6:	bd70      	pop	{r4, r5, r6, pc}

0001a2b8 <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   1a2b8:	3103      	adds	r1, #3
{
   1a2ba:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   1a2bc:	b2c9      	uxtb	r1, r1
{
   1a2be:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   1a2c0:	200e      	movs	r0, #14
   1a2c2:	f7ff ffe6 	bl	1a292 <bt_hci_evt_create>
   1a2c6:	2103      	movs	r1, #3
   1a2c8:	4604      	mov	r4, r0
   1a2ca:	3008      	adds	r0, #8
   1a2cc:	f002 fff7 	bl	1d2be <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   1a2d0:	2301      	movs	r3, #1
   1a2d2:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   1a2d4:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   1a2d8:	4620      	mov	r0, r4
   1a2da:	bd38      	pop	{r3, r4, r5, pc}

0001a2dc <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   1a2dc:	b570      	push	{r4, r5, r6, lr}
   1a2de:	4605      	mov	r5, r0
   1a2e0:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   1a2e2:	200f      	movs	r0, #15
   1a2e4:	2104      	movs	r1, #4
   1a2e6:	f7ff ffd4 	bl	1a292 <bt_hci_evt_create>
   1a2ea:	2104      	movs	r1, #4
   1a2ec:	4604      	mov	r4, r0
   1a2ee:	3008      	adds	r0, #8
   1a2f0:	f002 ffe5 	bl	1d2be <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   1a2f4:	2201      	movs	r2, #1
	cs->status = status;
   1a2f6:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   1a2f8:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   1a2fa:	8045      	strh	r5, [r0, #2]

	return buf;
}
   1a2fc:	4620      	mov	r0, r4
   1a2fe:	bd70      	pop	{r4, r5, r6, pc}

0001a300 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a300:	f3bf 8f5b 	dmb	ish
   1a304:	6800      	ldr	r0, [r0, #0]
   1a306:	f3bf 8f5b 	dmb	ish
}
   1a30a:	4770      	bx	lr

0001a30c <is_adv_using_rand_addr>:
{
   1a30c:	b508      	push	{r3, lr}
	adv = bt_le_adv_lookup_legacy();
   1a30e:	f7eb fcc9 	bl	5ca4 <bt_le_adv_lookup_legacy>
	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
   1a312:	b120      	cbz	r0, 1a31e <is_adv_using_rand_addr+0x12>
   1a314:	3010      	adds	r0, #16
   1a316:	f7ff fff3 	bl	1a300 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1a31a:	f3c0 1080 	ubfx	r0, r0, #6, #1
}
   1a31e:	bd08      	pop	{r3, pc}

0001a320 <bt_lookup_id_addr>:
}
   1a320:	4608      	mov	r0, r1
   1a322:	4770      	bx	lr

0001a324 <bt_id_set_private_addr>:
{
   1a324:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1a326:	2106      	movs	r1, #6
   1a328:	4668      	mov	r0, sp
   1a32a:	f002 f94e 	bl	1c5ca <bt_rand>
	if (err) {
   1a32e:	b940      	cbnz	r0, 1a342 <bt_id_set_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   1a330:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   1a334:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1a336:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1a33a:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   1a33e:	f7eb faa9 	bl	5894 <set_random_address>
}
   1a342:	b003      	add	sp, #12
   1a344:	f85d fb04 	ldr.w	pc, [sp], #4

0001a348 <bt_id_scan_random_addr_check>:
{
   1a348:	b508      	push	{r3, lr}
	adv = bt_le_adv_lookup_legacy();
   1a34a:	f7eb fcab 	bl	5ca4 <bt_le_adv_lookup_legacy>
	if (!adv) {
   1a34e:	b110      	cbz	r0, 1a356 <bt_id_scan_random_addr_check+0xe>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1a350:	3010      	adds	r0, #16
   1a352:	f7ff ffd5 	bl	1a300 <atomic_get>
}
   1a356:	2001      	movs	r0, #1
   1a358:	bd08      	pop	{r3, pc}

0001a35a <bt_id_init>:
#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
}
   1a35a:	2000      	movs	r0, #0
   1a35c:	4770      	bx	lr

0001a35e <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a35e:	f3bf 8f5b 	dmb	ish
   1a362:	6800      	ldr	r0, [r0, #0]
   1a364:	f3bf 8f5b 	dmb	ish
}
   1a368:	4770      	bx	lr

0001a36a <atomic_and>:
{
   1a36a:	4603      	mov	r3, r0
}
   1a36c:	f3bf 8f5b 	dmb	ish
   1a370:	e853 0f00 	ldrex	r0, [r3]
   1a374:	ea00 0201 	and.w	r2, r0, r1
   1a378:	e843 2c00 	strex	ip, r2, [r3]
   1a37c:	f1bc 0f00 	cmp.w	ip, #0
   1a380:	d1f6      	bne.n	1a370 <atomic_and+0x6>
   1a382:	f3bf 8f5b 	dmb	ish
   1a386:	4770      	bx	lr

0001a388 <bt_le_adv_set_enable_legacy>:
{
   1a388:	b570      	push	{r4, r5, r6, lr}
   1a38a:	4606      	mov	r6, r0
   1a38c:	b086      	sub	sp, #24
   1a38e:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   1a390:	f242 000a 	movw	r0, #8202	; 0x200a
   1a394:	2101      	movs	r1, #1
   1a396:	f7ea fbb5 	bl	4b04 <bt_hci_cmd_create>
	if (!buf) {
   1a39a:	4604      	mov	r4, r0
   1a39c:	b1b0      	cbz	r0, 1a3cc <bt_le_adv_set_enable_legacy+0x44>
	if (enable) {
   1a39e:	3008      	adds	r0, #8
   1a3a0:	b195      	cbz	r5, 1a3c8 <bt_le_adv_set_enable_legacy+0x40>
	return net_buf_simple_add_u8(&buf->b, val);
   1a3a2:	2101      	movs	r1, #1
   1a3a4:	f002 ff9a 	bl	1d2dc <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   1a3a8:	f106 0210 	add.w	r2, r6, #16
   1a3ac:	a903      	add	r1, sp, #12
   1a3ae:	4620      	mov	r0, r4
   1a3b0:	9500      	str	r5, [sp, #0]
   1a3b2:	2306      	movs	r3, #6
   1a3b4:	f7ea fb94 	bl	4ae0 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   1a3b8:	2200      	movs	r2, #0
   1a3ba:	4621      	mov	r1, r4
   1a3bc:	f242 000a 	movw	r0, #8202	; 0x200a
   1a3c0:	f7ea fcf6 	bl	4db0 <bt_hci_cmd_send_sync>
}
   1a3c4:	b006      	add	sp, #24
   1a3c6:	bd70      	pop	{r4, r5, r6, pc}
   1a3c8:	4629      	mov	r1, r5
   1a3ca:	e7eb      	b.n	1a3a4 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   1a3cc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1a3d0:	e7f8      	b.n	1a3c4 <bt_le_adv_set_enable_legacy+0x3c>

0001a3d2 <atomic_and>:
{
   1a3d2:	4603      	mov	r3, r0
}
   1a3d4:	f3bf 8f5b 	dmb	ish
   1a3d8:	e853 0f00 	ldrex	r0, [r3]
   1a3dc:	ea00 0201 	and.w	r2, r0, r1
   1a3e0:	e843 2c00 	strex	ip, r2, [r3]
   1a3e4:	f1bc 0f00 	cmp.w	ip, #0
   1a3e8:	d1f6      	bne.n	1a3d8 <atomic_and+0x6>
   1a3ea:	f3bf 8f5b 	dmb	ish
   1a3ee:	4770      	bx	lr

0001a3f0 <tx_notify>:
{
   1a3f0:	b570      	push	{r4, r5, r6, lr}
   1a3f2:	4604      	mov	r4, r0
	__asm__ volatile(
   1a3f4:	f04f 0220 	mov.w	r2, #32
   1a3f8:	f3ef 8311 	mrs	r3, BASEPRI
   1a3fc:	f382 8811 	msr	BASEPRI, r2
   1a400:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1a404:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   1a406:	b920      	cbnz	r0, 1a412 <tx_notify+0x22>
	__asm__ volatile(
   1a408:	f383 8811 	msr	BASEPRI, r3
   1a40c:	f3bf 8f6f 	isb	sy
}
   1a410:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1a412:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1a414:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1a416:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1a418:	4288      	cmp	r0, r1
	list->tail = node;
   1a41a:	bf08      	it	eq
   1a41c:	6262      	streq	r2, [r4, #36]	; 0x24
   1a41e:	f383 8811 	msr	BASEPRI, r3
   1a422:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   1a426:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   1a42a:	f7eb feb3 	bl	6194 <tx_free>
		cb(conn, user_data);
   1a42e:	4631      	mov	r1, r6
   1a430:	4620      	mov	r0, r4
   1a432:	47a8      	blx	r5
	while (1) {
   1a434:	e7de      	b.n	1a3f4 <tx_notify+0x4>

0001a436 <tx_complete_work>:
	tx_notify(conn);
   1a436:	3828      	subs	r0, #40	; 0x28
   1a438:	f7ff bfda 	b.w	1a3f0 <tx_notify>

0001a43c <bt_conn_new>:
{
   1a43c:	b538      	push	{r3, r4, r5, lr}
   1a43e:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   1a440:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1a442:	2501      	movs	r5, #1
   1a444:	428b      	cmp	r3, r1
   1a446:	d102      	bne.n	1a44e <bt_conn_new+0x12>
		return NULL;
   1a448:	2400      	movs	r4, #0
}
   1a44a:	4620      	mov	r0, r4
   1a44c:	bd38      	pop	{r3, r4, r5, pc}
   1a44e:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   1a452:	f3bf 8f5b 	dmb	ish
   1a456:	e852 0f00 	ldrex	r0, [r2]
   1a45a:	2800      	cmp	r0, #0
   1a45c:	d104      	bne.n	1a468 <bt_conn_new+0x2c>
   1a45e:	e842 5c00 	strex	ip, r5, [r2]
   1a462:	f1bc 0f00 	cmp.w	ip, #0
   1a466:	d1f6      	bne.n	1a456 <bt_conn_new+0x1a>
   1a468:	f3bf 8f5b 	dmb	ish
   1a46c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1a470:	d002      	beq.n	1a478 <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   1a472:	3301      	adds	r3, #1
   1a474:	4604      	mov	r4, r0
   1a476:	e7e5      	b.n	1a444 <bt_conn_new+0x8>
	if (!conn) {
   1a478:	2c00      	cmp	r4, #0
   1a47a:	d0e6      	beq.n	1a44a <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   1a47c:	22b8      	movs	r2, #184	; 0xb8
   1a47e:	2100      	movs	r1, #0
   1a480:	4620      	mov	r0, r4
   1a482:	f7ff fbba 	bl	19bfa <memset>
	return conn;
   1a486:	e7e0      	b.n	1a44a <bt_conn_new+0xe>

0001a488 <bt_conn_get_security>:
}
   1a488:	2001      	movs	r0, #1
   1a48a:	4770      	bx	lr

0001a48c <bt_conn_reset_rx_state>:
{
   1a48c:	b510      	push	{r4, lr}
   1a48e:	4604      	mov	r4, r0
	if (!conn->rx) {
   1a490:	6900      	ldr	r0, [r0, #16]
   1a492:	b118      	cbz	r0, 1a49c <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1a494:	f7fb f962 	bl	1575c <net_buf_unref>
	conn->rx = NULL;
   1a498:	2300      	movs	r3, #0
   1a49a:	6123      	str	r3, [r4, #16]
}
   1a49c:	bd10      	pop	{r4, pc}

0001a49e <bt_conn_connected>:
{
   1a49e:	b510      	push	{r4, lr}
   1a4a0:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   1a4a2:	f7ec fa91 	bl	69c8 <bt_l2cap_connected>
	notify_connected(conn);
   1a4a6:	4620      	mov	r0, r4
}
   1a4a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   1a4ac:	f7eb be7c 	b.w	61a8 <notify_connected>

0001a4b0 <bt_conn_is_peer_addr_le>:
{
   1a4b0:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1a4b2:	7a03      	ldrb	r3, [r0, #8]
   1a4b4:	428b      	cmp	r3, r1
{
   1a4b6:	4604      	mov	r4, r0
   1a4b8:	4615      	mov	r5, r2
	if (id != conn->id) {
   1a4ba:	d115      	bne.n	1a4e8 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1a4bc:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1a4c0:	2207      	movs	r2, #7
   1a4c2:	4628      	mov	r0, r5
   1a4c4:	f7ff fb5e 	bl	19b84 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   1a4c8:	b180      	cbz	r0, 1a4ec <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   1a4ca:	78e3      	ldrb	r3, [r4, #3]
   1a4cc:	2207      	movs	r2, #7
   1a4ce:	b943      	cbnz	r3, 1a4e2 <bt_conn_is_peer_addr_le+0x32>
   1a4d0:	f104 0196 	add.w	r1, r4, #150	; 0x96
   1a4d4:	4628      	mov	r0, r5
   1a4d6:	f7ff fb55 	bl	19b84 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   1a4da:	fab0 f080 	clz	r0, r0
   1a4de:	0940      	lsrs	r0, r0, #5
}
   1a4e0:	bd38      	pop	{r3, r4, r5, pc}
   1a4e2:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1a4e6:	e7f5      	b.n	1a4d4 <bt_conn_is_peer_addr_le+0x24>
		return false;
   1a4e8:	2000      	movs	r0, #0
   1a4ea:	e7f9      	b.n	1a4e0 <bt_conn_is_peer_addr_le+0x30>
		return true;
   1a4ec:	2001      	movs	r0, #1
   1a4ee:	e7f7      	b.n	1a4e0 <bt_conn_is_peer_addr_le+0x30>

0001a4f0 <bt_conn_ref>:
{
   1a4f0:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   1a4f2:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a4f6:	f3bf 8f5b 	dmb	ish
   1a4fa:	6813      	ldr	r3, [r2, #0]
   1a4fc:	f3bf 8f5b 	dmb	ish
		if (!old) {
   1a500:	b17b      	cbz	r3, 1a522 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1a502:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1a506:	1c59      	adds	r1, r3, #1
   1a508:	e852 4f00 	ldrex	r4, [r2]
   1a50c:	429c      	cmp	r4, r3
   1a50e:	d104      	bne.n	1a51a <bt_conn_ref+0x2a>
   1a510:	e842 1c00 	strex	ip, r1, [r2]
   1a514:	f1bc 0f00 	cmp.w	ip, #0
   1a518:	d1f6      	bne.n	1a508 <bt_conn_ref+0x18>
   1a51a:	f3bf 8f5b 	dmb	ish
   1a51e:	d1ea      	bne.n	1a4f6 <bt_conn_ref+0x6>
}
   1a520:	bd10      	pop	{r4, pc}
			return NULL;
   1a522:	4618      	mov	r0, r3
   1a524:	e7fc      	b.n	1a520 <bt_conn_ref+0x30>

0001a526 <bt_conn_unref>:
	atomic_val_t old = atomic_dec(&conn->ref);
   1a526:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1a52a:	f3bf 8f5b 	dmb	ish
   1a52e:	e853 2f00 	ldrex	r2, [r3]
   1a532:	3a01      	subs	r2, #1
   1a534:	e843 2100 	strex	r1, r2, [r3]
   1a538:	2900      	cmp	r1, #0
   1a53a:	d1f8      	bne.n	1a52e <bt_conn_unref+0x8>
   1a53c:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a540:	f3bf 8f5b 	dmb	ish
   1a544:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   1a548:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1a54c:	b90b      	cbnz	r3, 1a552 <bt_conn_unref+0x2c>
		bt_le_adv_resume();
   1a54e:	f7eb bbad 	b.w	5cac <bt_le_adv_resume>
}
   1a552:	4770      	bx	lr

0001a554 <conn_lookup_handle>:
{
   1a554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a558:	4607      	mov	r7, r0
   1a55a:	460e      	mov	r6, r1
   1a55c:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   1a55e:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1a560:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   1a564:	42b4      	cmp	r4, r6
   1a566:	d103      	bne.n	1a570 <conn_lookup_handle+0x1c>
	return NULL;
   1a568:	2300      	movs	r3, #0
}
   1a56a:	4618      	mov	r0, r3
   1a56c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1a570:	fb09 7004 	mla	r0, r9, r4, r7
   1a574:	f7ff ffbc 	bl	1a4f0 <bt_conn_ref>
   1a578:	4603      	mov	r3, r0
		if (!conn) {
   1a57a:	b158      	cbz	r0, 1a594 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   1a57c:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   1a57e:	2d01      	cmp	r5, #1
   1a580:	d002      	beq.n	1a588 <conn_lookup_handle+0x34>
   1a582:	3d07      	subs	r5, #7
   1a584:	2d01      	cmp	r5, #1
   1a586:	d803      	bhi.n	1a590 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   1a588:	881a      	ldrh	r2, [r3, #0]
   1a58a:	4542      	cmp	r2, r8
   1a58c:	d0ed      	beq.n	1a56a <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   1a58e:	4618      	mov	r0, r3
   1a590:	f7ff ffc9 	bl	1a526 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   1a594:	3401      	adds	r4, #1
   1a596:	e7e5      	b.n	1a564 <conn_lookup_handle+0x10>

0001a598 <bt_conn_disconnect>:
{
   1a598:	b538      	push	{r3, r4, r5, lr}
   1a59a:	7a83      	ldrb	r3, [r0, #10]
   1a59c:	3b02      	subs	r3, #2
   1a59e:	4604      	mov	r4, r0
   1a5a0:	2b06      	cmp	r3, #6
   1a5a2:	d805      	bhi.n	1a5b0 <bt_conn_disconnect+0x18>
   1a5a4:	e8df f003 	tbb	[pc, r3]
   1a5a8:	04040408 	.word	0x04040408
   1a5ac:	0e0c      	.short	0x0e0c
   1a5ae:	0c          	.byte	0x0c
   1a5af:	00          	.byte	0x00
	switch (conn->state) {
   1a5b0:	f06f 057f 	mvn.w	r5, #127	; 0x7f
}
   1a5b4:	4628      	mov	r0, r5
   1a5b6:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
   1a5b8:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1a5ba:	2100      	movs	r1, #0
   1a5bc:	f7eb ff88 	bl	64d0 <bt_conn_set_state>
		return 0;
   1a5c0:	2500      	movs	r5, #0
   1a5c2:	e7f7      	b.n	1a5b4 <bt_conn_disconnect+0x1c>
	err = bt_hci_disconnect(conn->handle, reason);
   1a5c4:	8800      	ldrh	r0, [r0, #0]
   1a5c6:	f7ff fdeb 	bl	1a1a0 <bt_hci_disconnect>
	if (err) {
   1a5ca:	4605      	mov	r5, r0
   1a5cc:	2800      	cmp	r0, #0
   1a5ce:	d1f1      	bne.n	1a5b4 <bt_conn_disconnect+0x1c>
	if (conn->state == BT_CONN_CONNECTED) {
   1a5d0:	7aa3      	ldrb	r3, [r4, #10]
   1a5d2:	2b07      	cmp	r3, #7
   1a5d4:	d1ee      	bne.n	1a5b4 <bt_conn_disconnect+0x1c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   1a5d6:	2108      	movs	r1, #8
   1a5d8:	4620      	mov	r0, r4
   1a5da:	f7eb ff79 	bl	64d0 <bt_conn_set_state>
   1a5de:	e7e9      	b.n	1a5b4 <bt_conn_disconnect+0x1c>

0001a5e0 <bt_conn_le_conn_update>:
{
   1a5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a5e2:	4607      	mov	r7, r0
   1a5e4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1a5e6:	f242 0013 	movw	r0, #8211	; 0x2013
   1a5ea:	210e      	movs	r1, #14
   1a5ec:	f7ea fa8a 	bl	4b04 <bt_hci_cmd_create>
	if (!buf) {
   1a5f0:	4606      	mov	r6, r0
   1a5f2:	b1d0      	cbz	r0, 1a62a <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1a5f4:	210e      	movs	r1, #14
   1a5f6:	3008      	adds	r0, #8
   1a5f8:	f002 fe61 	bl	1d2be <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1a5fc:	220e      	movs	r2, #14
   1a5fe:	4604      	mov	r4, r0
   1a600:	2100      	movs	r1, #0
   1a602:	f7ff fafa 	bl	19bfa <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1a606:	883b      	ldrh	r3, [r7, #0]
   1a608:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1a60a:	882b      	ldrh	r3, [r5, #0]
   1a60c:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1a60e:	886b      	ldrh	r3, [r5, #2]
   1a610:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1a612:	88ab      	ldrh	r3, [r5, #4]
   1a614:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1a616:	88eb      	ldrh	r3, [r5, #6]
   1a618:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1a61a:	4631      	mov	r1, r6
   1a61c:	2200      	movs	r2, #0
}
   1a61e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1a622:	f242 0013 	movw	r0, #8211	; 0x2013
   1a626:	f7ea bbc3 	b.w	4db0 <bt_hci_cmd_send_sync>
}
   1a62a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1a62e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001a630 <l2cap_connected>:
}
   1a630:	4770      	bx	lr

0001a632 <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   1a632:	3010      	adds	r0, #16
   1a634:	f003 bad3 	b.w	1dbde <k_work_cancel_delayable>

0001a638 <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1a638:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1a63a:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1a63c:	b17b      	cbz	r3, 1a65e <bt_l2cap_chan_remove+0x26>
   1a63e:	3b08      	subs	r3, #8
   1a640:	2200      	movs	r2, #0
   1a642:	b163      	cbz	r3, 1a65e <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   1a644:	428b      	cmp	r3, r1
   1a646:	f103 0408 	add.w	r4, r3, #8
   1a64a:	d10f      	bne.n	1a66c <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   1a64c:	688b      	ldr	r3, [r1, #8]
   1a64e:	b93a      	cbnz	r2, 1a660 <bt_l2cap_chan_remove+0x28>
   1a650:	6d42      	ldr	r2, [r0, #84]	; 0x54
	list->head = node;
   1a652:	6503      	str	r3, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   1a654:	4294      	cmp	r4, r2
   1a656:	d100      	bne.n	1a65a <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   1a658:	6543      	str	r3, [r0, #84]	; 0x54
	parent->next = child;
   1a65a:	2300      	movs	r3, #0
   1a65c:	608b      	str	r3, [r1, #8]
}
   1a65e:	bd10      	pop	{r4, pc}
   1a660:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1a662:	6d43      	ldr	r3, [r0, #84]	; 0x54
   1a664:	429c      	cmp	r4, r3
	list->tail = node;
   1a666:	bf08      	it	eq
   1a668:	6542      	streq	r2, [r0, #84]	; 0x54
}
   1a66a:	e7f6      	b.n	1a65a <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1a66c:	2c00      	cmp	r4, #0
   1a66e:	d0f6      	beq.n	1a65e <bt_l2cap_chan_remove+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1a670:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1a672:	2b00      	cmp	r3, #0
   1a674:	d0f3      	beq.n	1a65e <bt_l2cap_chan_remove+0x26>
   1a676:	3b08      	subs	r3, #8
   1a678:	4622      	mov	r2, r4
   1a67a:	e7e2      	b.n	1a642 <bt_l2cap_chan_remove+0xa>

0001a67c <bt_l2cap_chan_del>:
{
   1a67c:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   1a67e:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   1a682:	4604      	mov	r4, r0
	if (!chan->conn) {
   1a684:	b123      	cbz	r3, 1a690 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1a686:	686b      	ldr	r3, [r5, #4]
   1a688:	b103      	cbz	r3, 1a68c <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1a68a:	4798      	blx	r3
	chan->conn = NULL;
   1a68c:	2300      	movs	r3, #0
   1a68e:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1a690:	68e3      	ldr	r3, [r4, #12]
   1a692:	b10b      	cbz	r3, 1a698 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1a694:	4620      	mov	r0, r4
   1a696:	4798      	blx	r3
	if (ops->released) {
   1a698:	69eb      	ldr	r3, [r5, #28]
   1a69a:	b11b      	cbz	r3, 1a6a4 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   1a69c:	4620      	mov	r0, r4
}
   1a69e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1a6a2:	4718      	bx	r3
}
   1a6a4:	bd70      	pop	{r4, r5, r6, pc}

0001a6a6 <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1a6a6:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1a6a8:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1a6aa:	b18b      	cbz	r3, 1a6d0 <bt_l2cap_disconnected+0x2a>
   1a6ac:	f1b3 0008 	subs.w	r0, r3, #8
   1a6b0:	d00e      	beq.n	1a6d0 <bt_l2cap_disconnected+0x2a>
   1a6b2:	681c      	ldr	r4, [r3, #0]
   1a6b4:	b104      	cbz	r4, 1a6b8 <bt_l2cap_disconnected+0x12>
   1a6b6:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1a6b8:	f7ff ffe0 	bl	1a67c <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1a6bc:	b144      	cbz	r4, 1a6d0 <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1a6be:	f114 0308 	adds.w	r3, r4, #8
   1a6c2:	d002      	beq.n	1a6ca <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1a6c4:	68a3      	ldr	r3, [r4, #8]
   1a6c6:	b103      	cbz	r3, 1a6ca <bt_l2cap_disconnected+0x24>
   1a6c8:	3b08      	subs	r3, #8
{
   1a6ca:	4620      	mov	r0, r4
   1a6cc:	461c      	mov	r4, r3
   1a6ce:	e7f3      	b.n	1a6b8 <bt_l2cap_disconnected+0x12>
}
   1a6d0:	bd10      	pop	{r4, pc}

0001a6d2 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1a6d2:	3104      	adds	r1, #4
   1a6d4:	f7ec b8c4 	b.w	6860 <bt_conn_create_pdu_timeout>

0001a6d8 <bt_l2cap_send_cb>:
{
   1a6d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a6dc:	4614      	mov	r4, r2
   1a6de:	4605      	mov	r5, r0
   1a6e0:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   1a6e2:	f102 0008 	add.w	r0, r2, #8
   1a6e6:	2104      	movs	r1, #4
   1a6e8:	461e      	mov	r6, r3
   1a6ea:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1a6ee:	f002 fe16 	bl	1d31e <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1a6f2:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   1a6f4:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1a6f6:	3a04      	subs	r2, #4
   1a6f8:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1a6fa:	4643      	mov	r3, r8
   1a6fc:	4632      	mov	r2, r6
   1a6fe:	4621      	mov	r1, r4
   1a700:	4628      	mov	r0, r5
}
   1a702:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1a706:	f7eb be4b 	b.w	63a0 <bt_conn_send_cb>

0001a70a <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1a70a:	6d00      	ldr	r0, [r0, #80]	; 0x50
   1a70c:	b160      	cbz	r0, 1a728 <bt_l2cap_le_lookup_tx_cid+0x1e>
   1a70e:	3808      	subs	r0, #8
   1a710:	b900      	cbnz	r0, 1a714 <bt_l2cap_le_lookup_tx_cid+0xa>
   1a712:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1a714:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
   1a718:	428b      	cmp	r3, r1
   1a71a:	d005      	beq.n	1a728 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1a71c:	f110 0308 	adds.w	r3, r0, #8
   1a720:	d001      	beq.n	1a726 <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1a722:	6880      	ldr	r0, [r0, #8]
   1a724:	e7f2      	b.n	1a70c <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   1a726:	4618      	mov	r0, r3
}
   1a728:	4770      	bx	lr

0001a72a <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1a72a:	6d00      	ldr	r0, [r0, #80]	; 0x50
   1a72c:	b160      	cbz	r0, 1a748 <bt_l2cap_le_lookup_rx_cid+0x1e>
   1a72e:	3808      	subs	r0, #8
   1a730:	b900      	cbnz	r0, 1a734 <bt_l2cap_le_lookup_rx_cid+0xa>
   1a732:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1a734:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   1a738:	428b      	cmp	r3, r1
   1a73a:	d005      	beq.n	1a748 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1a73c:	f110 0308 	adds.w	r3, r0, #8
   1a740:	d001      	beq.n	1a746 <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1a742:	6880      	ldr	r0, [r0, #8]
   1a744:	e7f2      	b.n	1a72c <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   1a746:	4618      	mov	r0, r3
}
   1a748:	4770      	bx	lr

0001a74a <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   1a74a:	4770      	bx	lr

0001a74c <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1a74c:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   1a74e:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1a750:	b128      	cbz	r0, 1a75e <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1a752:	6859      	ldr	r1, [r3, #4]
   1a754:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1a756:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1a758:	4288      	cmp	r0, r1
	list->tail = node;
   1a75a:	bf08      	it	eq
   1a75c:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1a75e:	4770      	bx	lr

0001a760 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1a760:	4603      	mov	r3, r0
   1a762:	6800      	ldr	r0, [r0, #0]
   1a764:	2200      	movs	r2, #0
   1a766:	b900      	cbnz	r0, 1a76a <sys_slist_find_and_remove+0xa>
   1a768:	4770      	bx	lr
   1a76a:	4288      	cmp	r0, r1
   1a76c:	d110      	bne.n	1a790 <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   1a76e:	6808      	ldr	r0, [r1, #0]
   1a770:	b942      	cbnz	r2, 1a784 <sys_slist_find_and_remove+0x24>
   1a772:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   1a774:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1a776:	4291      	cmp	r1, r2
   1a778:	d100      	bne.n	1a77c <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   1a77a:	6058      	str	r0, [r3, #4]
	parent->next = child;
   1a77c:	2300      	movs	r3, #0
   1a77e:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1a780:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   1a782:	4770      	bx	lr
	parent->next = child;
   1a784:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1a786:	6858      	ldr	r0, [r3, #4]
   1a788:	4281      	cmp	r1, r0
	list->tail = node;
   1a78a:	bf08      	it	eq
   1a78c:	605a      	streq	r2, [r3, #4]
}
   1a78e:	e7f5      	b.n	1a77c <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1a790:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1a792:	6800      	ldr	r0, [r0, #0]
   1a794:	e7e7      	b.n	1a766 <sys_slist_find_and_remove+0x6>

0001a796 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1a796:	4603      	mov	r3, r0
	size_t bytes = 0;
   1a798:	2000      	movs	r0, #0

	while (buf) {
   1a79a:	b903      	cbnz	r3, 1a79e <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1a79c:	4770      	bx	lr
		bytes += buf->len;
   1a79e:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1a7a0:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1a7a2:	4410      	add	r0, r2
		buf = buf->frags;
   1a7a4:	e7f9      	b.n	1a79a <net_buf_frags_len+0x4>

0001a7a6 <att_sent>:
	if (chan->ops->sent) {
   1a7a6:	684b      	ldr	r3, [r1, #4]
   1a7a8:	695b      	ldr	r3, [r3, #20]
{
   1a7aa:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   1a7ac:	b103      	cbz	r3, 1a7b0 <att_sent+0xa>
		chan->ops->sent(chan);
   1a7ae:	4718      	bx	r3
}
   1a7b0:	4770      	bx	lr

0001a7b2 <attr_read_type_cb>:
{
   1a7b2:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1a7b4:	68d4      	ldr	r4, [r2, #12]
   1a7b6:	7823      	ldrb	r3, [r4, #0]
   1a7b8:	3102      	adds	r1, #2
   1a7ba:	b913      	cbnz	r3, 1a7c2 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1a7bc:	7021      	strb	r1, [r4, #0]
	return true;
   1a7be:	2001      	movs	r0, #1
   1a7c0:	e006      	b.n	1a7d0 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1a7c2:	428b      	cmp	r3, r1
   1a7c4:	d0fb      	beq.n	1a7be <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   1a7c6:	8983      	ldrh	r3, [r0, #12]
   1a7c8:	3b02      	subs	r3, #2
   1a7ca:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   1a7cc:	2000      	movs	r0, #0
   1a7ce:	6110      	str	r0, [r2, #16]
}
   1a7d0:	bd10      	pop	{r4, pc}

0001a7d2 <att_op_get_type>:
	switch (op) {
   1a7d2:	281e      	cmp	r0, #30
   1a7d4:	d816      	bhi.n	1a804 <att_op_get_type+0x32>
   1a7d6:	b308      	cbz	r0, 1a81c <att_op_get_type+0x4a>
   1a7d8:	1e43      	subs	r3, r0, #1
   1a7da:	2b1d      	cmp	r3, #29
   1a7dc:	d81e      	bhi.n	1a81c <att_op_get_type+0x4a>
   1a7de:	e8df f003 	tbb	[pc, r3]
   1a7e2:	2317      	.short	0x2317
   1a7e4:	23172317 	.word	0x23172317
   1a7e8:	23172317 	.word	0x23172317
   1a7ec:	23172317 	.word	0x23172317
   1a7f0:	23172317 	.word	0x23172317
   1a7f4:	231d1d17 	.word	0x231d1d17
   1a7f8:	1d172317 	.word	0x1d172317
   1a7fc:	0f1b1d19 	.word	0x0f1b1d19
   1a800:	2004      	movs	r0, #4
   1a802:	4770      	bx	lr
   1a804:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1a808:	2b52      	cmp	r3, #82	; 0x52
   1a80a:	d107      	bne.n	1a81c <att_op_get_type+0x4a>
		return ATT_COMMAND;
   1a80c:	2000      	movs	r0, #0
}
   1a80e:	4770      	bx	lr
		return ATT_RESPONSE;
   1a810:	2002      	movs	r0, #2
   1a812:	4770      	bx	lr
		return ATT_NOTIFICATION;
   1a814:	2003      	movs	r0, #3
   1a816:	4770      	bx	lr
		return ATT_INDICATION;
   1a818:	2005      	movs	r0, #5
   1a81a:	4770      	bx	lr
		return ATT_COMMAND;
   1a81c:	f010 0f40 	tst.w	r0, #64	; 0x40
   1a820:	bf0c      	ite	eq
   1a822:	2006      	moveq	r0, #6
   1a824:	2000      	movne	r0, #0
   1a826:	4770      	bx	lr
		return ATT_REQUEST;
   1a828:	2001      	movs	r0, #1
   1a82a:	4770      	bx	lr

0001a82c <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   1a82c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1a82e:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1a832:	2300      	movs	r3, #0
   1a834:	9300      	str	r3, [sp, #0]
   1a836:	461a      	mov	r2, r3
   1a838:	f7ed ff34 	bl	86a4 <bt_gatt_foreach_attr_type>
				  user_data);
}
   1a83c:	b005      	add	sp, #20
   1a83e:	f85d fb04 	ldr.w	pc, [sp], #4

0001a842 <find_info_cb>:
{
   1a842:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1a844:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   1a846:	6817      	ldr	r7, [r2, #0]
{
   1a848:	4605      	mov	r5, r0
   1a84a:	460e      	mov	r6, r1
   1a84c:	4614      	mov	r4, r2
	if (!data->rsp) {
   1a84e:	b963      	cbnz	r3, 1a86a <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   1a850:	6850      	ldr	r0, [r2, #4]
   1a852:	2101      	movs	r1, #1
   1a854:	3008      	adds	r0, #8
   1a856:	f002 fd32 	bl	1d2be <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1a85a:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1a85c:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1a85e:	781b      	ldrb	r3, [r3, #0]
   1a860:	2b00      	cmp	r3, #0
   1a862:	bf0c      	ite	eq
   1a864:	2301      	moveq	r3, #1
   1a866:	2302      	movne	r3, #2
   1a868:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1a86a:	68a3      	ldr	r3, [r4, #8]
   1a86c:	781b      	ldrb	r3, [r3, #0]
   1a86e:	2b01      	cmp	r3, #1
   1a870:	d003      	beq.n	1a87a <find_info_cb+0x38>
   1a872:	2b02      	cmp	r3, #2
   1a874:	d019      	beq.n	1a8aa <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   1a876:	2000      	movs	r0, #0
   1a878:	e016      	b.n	1a8a8 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1a87a:	682b      	ldr	r3, [r5, #0]
   1a87c:	781b      	ldrb	r3, [r3, #0]
   1a87e:	2b00      	cmp	r3, #0
   1a880:	d1f9      	bne.n	1a876 <find_info_cb+0x34>
   1a882:	6860      	ldr	r0, [r4, #4]
   1a884:	2104      	movs	r1, #4
   1a886:	3008      	adds	r0, #8
   1a888:	f002 fd19 	bl	1d2be <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1a88c:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1a88e:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1a890:	885b      	ldrh	r3, [r3, #2]
   1a892:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1a894:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   1a896:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   1a898:	899b      	ldrh	r3, [r3, #12]
   1a89a:	f8b7 0086 	ldrh.w	r0, [r7, #134]	; 0x86
   1a89e:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1a8a0:	2804      	cmp	r0, #4
   1a8a2:	bf94      	ite	ls
   1a8a4:	2000      	movls	r0, #0
   1a8a6:	2001      	movhi	r0, #1
}
   1a8a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1a8aa:	682b      	ldr	r3, [r5, #0]
   1a8ac:	781b      	ldrb	r3, [r3, #0]
   1a8ae:	2b02      	cmp	r3, #2
   1a8b0:	d1e1      	bne.n	1a876 <find_info_cb+0x34>
   1a8b2:	6860      	ldr	r0, [r4, #4]
   1a8b4:	2112      	movs	r1, #18
   1a8b6:	3008      	adds	r0, #8
   1a8b8:	f002 fd01 	bl	1d2be <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1a8bc:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1a8be:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1a8c0:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   1a8c2:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1a8c6:	3101      	adds	r1, #1
   1a8c8:	f7ff f96c 	bl	19ba4 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   1a8cc:	6863      	ldr	r3, [r4, #4]
   1a8ce:	f8b7 0086 	ldrh.w	r0, [r7, #134]	; 0x86
   1a8d2:	899b      	ldrh	r3, [r3, #12]
   1a8d4:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1a8d6:	2812      	cmp	r0, #18
   1a8d8:	e7e3      	b.n	1a8a2 <find_info_cb+0x60>

0001a8da <attr_read_group_cb>:
	if (!data->rsp->len) {
   1a8da:	68d0      	ldr	r0, [r2, #12]
   1a8dc:	7803      	ldrb	r3, [r0, #0]
   1a8de:	3104      	adds	r1, #4
   1a8e0:	b913      	cbnz	r3, 1a8e8 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1a8e2:	7001      	strb	r1, [r0, #0]
	return true;
   1a8e4:	2001      	movs	r0, #1
}
   1a8e6:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1a8e8:	428b      	cmp	r3, r1
   1a8ea:	d0fb      	beq.n	1a8e4 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   1a8ec:	6891      	ldr	r1, [r2, #8]
   1a8ee:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   1a8f0:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1a8f2:	3b04      	subs	r3, #4
   1a8f4:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   1a8f6:	6110      	str	r0, [r2, #16]
		return false;
   1a8f8:	4770      	bx	lr

0001a8fa <chan_req_send>:
{
   1a8fa:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1a8fc:	688e      	ldr	r6, [r1, #8]
{
   1a8fe:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1a900:	4630      	mov	r0, r6
{
   1a902:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1a904:	f7ff ff47 	bl	1a796 <net_buf_frags_len>
   1a908:	f8b5 3086 	ldrh.w	r3, [r5, #134]	; 0x86
   1a90c:	4283      	cmp	r3, r0
   1a90e:	d30a      	bcc.n	1a926 <chan_req_send+0x2c>
	req->buf = NULL;
   1a910:	2200      	movs	r2, #0
	chan->req = req;
   1a912:	f8c5 10f4 	str.w	r1, [r5, #244]	; 0xf4
	err = chan_send(chan, buf, NULL);
   1a916:	4628      	mov	r0, r5
	req->buf = NULL;
   1a918:	608a      	str	r2, [r1, #8]
	err = chan_send(chan, buf, NULL);
   1a91a:	4631      	mov	r1, r6
   1a91c:	f7ec fa68 	bl	6df0 <chan_send>
	if (err) {
   1a920:	b100      	cbz	r0, 1a924 <chan_req_send+0x2a>
		req->buf = buf;
   1a922:	60a6      	str	r6, [r4, #8]
}
   1a924:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   1a926:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1a92a:	e7fb      	b.n	1a924 <chan_req_send+0x2a>

0001a92c <process_queue>:
{
   1a92c:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   1a92e:	2200      	movs	r2, #0
{
   1a930:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   1a932:	2300      	movs	r3, #0
   1a934:	4608      	mov	r0, r1
{
   1a936:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   1a938:	f002 fc41 	bl	1d1be <net_buf_get>
	if (buf) {
   1a93c:	4605      	mov	r5, r0
   1a93e:	b160      	cbz	r0, 1a95a <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   1a940:	4601      	mov	r1, r0
   1a942:	2200      	movs	r2, #0
   1a944:	4620      	mov	r0, r4
   1a946:	f7ec fa53 	bl	6df0 <chan_send>
		if (err) {
   1a94a:	4604      	mov	r4, r0
   1a94c:	b118      	cbz	r0, 1a956 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   1a94e:	4629      	mov	r1, r5
   1a950:	4630      	mov	r0, r6
   1a952:	f003 f841 	bl	1d9d8 <k_queue_prepend>
}
   1a956:	4620      	mov	r0, r4
   1a958:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1a95a:	f06f 0401 	mvn.w	r4, #1
   1a95e:	e7fa      	b.n	1a956 <process_queue+0x2a>

0001a960 <chan_req_sent>:
	if (chan->req) {
   1a960:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   1a964:	b133      	cbz	r3, 1a974 <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   1a966:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1a96a:	2300      	movs	r3, #0
   1a96c:	f500 7088 	add.w	r0, r0, #272	; 0x110
   1a970:	f7fc bf40 	b.w	177f4 <k_work_reschedule>
}
   1a974:	4770      	bx	lr

0001a976 <chan_cfm_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1a976:	30f0      	adds	r0, #240	; 0xf0
   1a978:	f3bf 8f5b 	dmb	ish
   1a97c:	e850 3f00 	ldrex	r3, [r0]
   1a980:	f023 0302 	bic.w	r3, r3, #2
   1a984:	e840 3200 	strex	r2, r3, [r0]
   1a988:	2a00      	cmp	r2, #0
   1a98a:	d1f7      	bne.n	1a97c <chan_cfm_sent+0x6>
   1a98c:	f3bf 8f5b 	dmb	ish
}
   1a990:	4770      	bx	lr

0001a992 <chan_rsp_sent>:
   1a992:	30f0      	adds	r0, #240	; 0xf0
   1a994:	f3bf 8f5b 	dmb	ish
   1a998:	e850 3f00 	ldrex	r3, [r0]
   1a99c:	f023 0301 	bic.w	r3, r3, #1
   1a9a0:	e840 3200 	strex	r2, r3, [r0]
   1a9a4:	2a00      	cmp	r2, #0
   1a9a6:	d1f7      	bne.n	1a998 <chan_rsp_sent+0x6>
   1a9a8:	f3bf 8f5b 	dmb	ish
}
   1a9ac:	4770      	bx	lr

0001a9ae <att_chan_read>:
{
   1a9ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a9b2:	4680      	mov	r8, r0
   1a9b4:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1a9b6:	4610      	mov	r0, r2
{
   1a9b8:	4699      	mov	r9, r3
   1a9ba:	468b      	mov	fp, r1
   1a9bc:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1a9be:	f7ff feea 	bl	1a796 <net_buf_frags_len>
   1a9c2:	f8b8 3086 	ldrh.w	r3, [r8, #134]	; 0x86
   1a9c6:	4283      	cmp	r3, r0
   1a9c8:	d97a      	bls.n	1aac0 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1a9ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1a9ce:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1a9d0:	4630      	mov	r0, r6
   1a9d2:	f002 fc46 	bl	1d262 <net_buf_frag_last>
	size_t len, total = 0;
   1a9d6:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1a9da:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1a9dc:	4630      	mov	r0, r6
   1a9de:	f7ff feda 	bl	1a796 <net_buf_frags_len>
   1a9e2:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
	return net_buf_simple_tailroom(&buf->b);
   1a9e6:	f105 0708 	add.w	r7, r5, #8
   1a9ea:	1a24      	subs	r4, r4, r0
   1a9ec:	4638      	mov	r0, r7
   1a9ee:	f002 fcfb 	bl	1d3e8 <net_buf_simple_tailroom>
   1a9f2:	4284      	cmp	r4, r0
   1a9f4:	d211      	bcs.n	1aa1a <att_chan_read+0x6c>
   1a9f6:	4630      	mov	r0, r6
   1a9f8:	f7ff fecd 	bl	1a796 <net_buf_frags_len>
   1a9fc:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
   1aa00:	1a24      	subs	r4, r4, r0
		if (!len) {
   1aa02:	bb34      	cbnz	r4, 1aa52 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1aa04:	79b0      	ldrb	r0, [r6, #6]
   1aa06:	f7fa fded 	bl	155e4 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1aa0a:	2200      	movs	r2, #0
   1aa0c:	2300      	movs	r3, #0
   1aa0e:	f002 fbd1 	bl	1d1b4 <net_buf_alloc_fixed>
			if (!frag) {
   1aa12:	4605      	mov	r5, r0
   1aa14:	b930      	cbnz	r0, 1aa24 <att_chan_read+0x76>
	return total;
   1aa16:	4657      	mov	r7, sl
   1aa18:	e02c      	b.n	1aa74 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   1aa1a:	4638      	mov	r0, r7
   1aa1c:	f002 fce4 	bl	1d3e8 <net_buf_simple_tailroom>
   1aa20:	4604      	mov	r4, r0
   1aa22:	e7ee      	b.n	1aa02 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1aa24:	4601      	mov	r1, r0
   1aa26:	4630      	mov	r0, r6
   1aa28:	f002 fc2c 	bl	1d284 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1aa2c:	4630      	mov	r0, r6
   1aa2e:	f7ff feb2 	bl	1a796 <net_buf_frags_len>
   1aa32:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
   1aa36:	f105 0708 	add.w	r7, r5, #8
   1aa3a:	1a24      	subs	r4, r4, r0
   1aa3c:	4638      	mov	r0, r7
   1aa3e:	f002 fcd3 	bl	1d3e8 <net_buf_simple_tailroom>
   1aa42:	4284      	cmp	r4, r0
   1aa44:	d21a      	bcs.n	1aa7c <att_chan_read+0xce>
   1aa46:	4630      	mov	r0, r6
   1aa48:	f7ff fea5 	bl	1a796 <net_buf_frags_len>
   1aa4c:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
   1aa50:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1aa52:	68a9      	ldr	r1, [r5, #8]
   1aa54:	89aa      	ldrh	r2, [r5, #12]
   1aa56:	f8db 7004 	ldr.w	r7, [fp, #4]
   1aa5a:	9803      	ldr	r0, [sp, #12]
   1aa5c:	f8cd 9000 	str.w	r9, [sp]
   1aa60:	440a      	add	r2, r1
   1aa62:	b2a3      	uxth	r3, r4
   1aa64:	4659      	mov	r1, fp
   1aa66:	47b8      	blx	r7
		if (read < 0) {
   1aa68:	1e07      	subs	r7, r0, #0
   1aa6a:	da0c      	bge.n	1aa86 <att_chan_read+0xd8>
				return total;
   1aa6c:	f1ba 0f00 	cmp.w	sl, #0
   1aa70:	bf18      	it	ne
   1aa72:	4657      	movne	r7, sl
}
   1aa74:	4638      	mov	r0, r7
   1aa76:	b005      	add	sp, #20
   1aa78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa7c:	4638      	mov	r0, r7
   1aa7e:	f002 fcb3 	bl	1d3e8 <net_buf_simple_tailroom>
   1aa82:	4604      	mov	r4, r0
   1aa84:	e7e5      	b.n	1aa52 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1aa86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1aa88:	b993      	cbnz	r3, 1aab0 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   1aa8a:	4639      	mov	r1, r7
   1aa8c:	f105 0008 	add.w	r0, r5, #8
   1aa90:	f002 fc15 	bl	1d2be <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1aa94:	4630      	mov	r0, r6
   1aa96:	f7ff fe7e 	bl	1a796 <net_buf_frags_len>
   1aa9a:	f8b8 3086 	ldrh.w	r3, [r8, #134]	; 0x86
		offset += read;
   1aa9e:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1aaa0:	4283      	cmp	r3, r0
		total += read;
   1aaa2:	44ba      	add	sl, r7
		offset += read;
   1aaa4:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1aaa8:	d9b5      	bls.n	1aa16 <att_chan_read+0x68>
   1aaaa:	42a7      	cmp	r7, r4
   1aaac:	d096      	beq.n	1a9dc <att_chan_read+0x2e>
   1aaae:	e7b2      	b.n	1aa16 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1aab0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1aab2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1aab4:	4639      	mov	r1, r7
   1aab6:	4628      	mov	r0, r5
   1aab8:	4798      	blx	r3
   1aaba:	2800      	cmp	r0, #0
   1aabc:	d1e5      	bne.n	1aa8a <att_chan_read+0xdc>
   1aabe:	e7aa      	b.n	1aa16 <att_chan_read+0x68>
		return 0;
   1aac0:	2700      	movs	r7, #0
   1aac2:	e7d7      	b.n	1aa74 <att_chan_read+0xc6>

0001aac4 <bt_att_status>:
{
   1aac4:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1aac6:	f3bf 8f5b 	dmb	ish
   1aaca:	680b      	ldr	r3, [r1, #0]
   1aacc:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1aad0:	07db      	lsls	r3, r3, #31
{
   1aad2:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1aad4:	d519      	bpl.n	1ab0a <bt_att_status+0x46>
	if (!chan->att) {
   1aad6:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1aada:	b1b0      	cbz	r0, 1ab0a <bt_att_status+0x46>
	if (chan->req) {
   1aadc:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   1aae0:	b99b      	cbnz	r3, 1ab0a <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   1aae2:	3004      	adds	r0, #4
   1aae4:	f7ff fe32 	bl	1a74c <sys_slist_get>
	if (!node) {
   1aae8:	4604      	mov	r4, r0
   1aaea:	b170      	cbz	r0, 1ab0a <bt_att_status+0x46>
	return chan_req_send(chan, req);
   1aaec:	4601      	mov	r1, r0
   1aaee:	f1a5 0008 	sub.w	r0, r5, #8
   1aaf2:	f7ff ff02 	bl	1a8fa <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1aaf6:	2800      	cmp	r0, #0
   1aaf8:	da07      	bge.n	1ab0a <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   1aafa:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   1aafe:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1ab00:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1ab02:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1ab04:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1ab06:	b902      	cbnz	r2, 1ab0a <bt_att_status+0x46>
	list->tail = node;
   1ab08:	609c      	str	r4, [r3, #8]
}
   1ab0a:	bd38      	pop	{r3, r4, r5, pc}

0001ab0c <att_req_send_process>:
{
   1ab0c:	b570      	push	{r4, r5, r6, lr}
   1ab0e:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   1ab10:	3004      	adds	r0, #4
   1ab12:	f7ff fe1b 	bl	1a74c <sys_slist_get>
	if (!node) {
   1ab16:	4606      	mov	r6, r0
   1ab18:	b1c0      	cbz	r0, 1ab4c <att_req_send_process+0x40>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ab1a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   1ab1c:	b153      	cbz	r3, 1ab34 <att_req_send_process+0x28>
   1ab1e:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   1ab22:	d007      	beq.n	1ab34 <att_req_send_process+0x28>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ab24:	681c      	ldr	r4, [r3, #0]
   1ab26:	b10c      	cbz	r4, 1ab2c <att_req_send_process+0x20>
   1ab28:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
		if (!chan->req) {
   1ab2c:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   1ab30:	b13b      	cbz	r3, 1ab42 <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ab32:	b964      	cbnz	r4, 1ab4e <att_req_send_process+0x42>
Z_GENLIST_PREPEND(slist, snode)
   1ab34:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   1ab36:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1ab38:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   1ab3a:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1ab3c:	b933      	cbnz	r3, 1ab4c <att_req_send_process+0x40>
	list->tail = node;
   1ab3e:	60ae      	str	r6, [r5, #8]
}
   1ab40:	e004      	b.n	1ab4c <att_req_send_process+0x40>
	return chan_req_send(chan, req);
   1ab42:	4631      	mov	r1, r6
   1ab44:	f7ff fed9 	bl	1a8fa <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1ab48:	2800      	cmp	r0, #0
   1ab4a:	dbf2      	blt.n	1ab32 <att_req_send_process+0x26>
}
   1ab4c:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ab4e:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   1ab52:	d004      	beq.n	1ab5e <att_req_send_process+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ab54:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ab58:	b10b      	cbz	r3, 1ab5e <att_req_send_process+0x52>
   1ab5a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   1ab5e:	4620      	mov	r0, r4
   1ab60:	461c      	mov	r4, r3
   1ab62:	e7e3      	b.n	1ab2c <att_req_send_process+0x20>

0001ab64 <write_cb>:
{
   1ab64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ab66:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1ab68:	4601      	mov	r1, r0
{
   1ab6a:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1ab6c:	222a      	movs	r2, #42	; 0x2a
   1ab6e:	6820      	ldr	r0, [r4, #0]
   1ab70:	f000 fbfc 	bl	1b36c <bt_gatt_check_perm>
   1ab74:	4605      	mov	r5, r0
   1ab76:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1ab78:	bb00      	cbnz	r0, 1abbc <write_cb+0x58>
	if (!data->req) {
   1ab7a:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   1ab7c:	68b7      	ldr	r7, [r6, #8]
   1ab7e:	68e2      	ldr	r2, [r4, #12]
   1ab80:	6820      	ldr	r0, [r4, #0]
	if (!data->req) {
   1ab82:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1ab84:	bf14      	ite	ne
   1ab86:	2300      	movne	r3, #0
   1ab88:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1ab8a:	9301      	str	r3, [sp, #4]
   1ab8c:	8a63      	ldrh	r3, [r4, #18]
   1ab8e:	9300      	str	r3, [sp, #0]
   1ab90:	4631      	mov	r1, r6
   1ab92:	8a23      	ldrh	r3, [r4, #16]
   1ab94:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   1ab96:	1e03      	subs	r3, r0, #0
   1ab98:	db05      	blt.n	1aba6 <write_cb+0x42>
   1ab9a:	8a22      	ldrh	r2, [r4, #16]
   1ab9c:	4293      	cmp	r3, r2
   1ab9e:	d10b      	bne.n	1abb8 <write_cb+0x54>
	data->err = 0U;
   1aba0:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1aba2:	2501      	movs	r5, #1
   1aba4:	e005      	b.n	1abb2 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   1aba6:	f113 0fff 	cmn.w	r3, #255	; 0xff
   1abaa:	d305      	bcc.n	1abb8 <write_cb+0x54>
		return -err;
   1abac:	425b      	negs	r3, r3
   1abae:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   1abb0:	7523      	strb	r3, [r4, #20]
}
   1abb2:	4628      	mov	r0, r5
   1abb4:	b003      	add	sp, #12
   1abb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   1abb8:	230e      	movs	r3, #14
   1abba:	e7f9      	b.n	1abb0 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   1abbc:	2500      	movs	r5, #0
   1abbe:	e7f8      	b.n	1abb2 <write_cb+0x4e>

0001abc0 <bt_att_sent>:
{
   1abc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   1abc2:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
	struct bt_att *att = chan->att;
   1abc6:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   1abca:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1abcc:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   1abd0:	b10b      	cbz	r3, 1abd6 <bt_att_sent+0x16>
		chan->sent(chan);
   1abd2:	4638      	mov	r0, r7
   1abd4:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1abd6:	f3bf 8f5b 	dmb	ish
   1abda:	f105 03e8 	add.w	r3, r5, #232	; 0xe8
   1abde:	e853 2f00 	ldrex	r2, [r3]
   1abe2:	f022 0210 	bic.w	r2, r2, #16
   1abe6:	e843 2100 	strex	r1, r2, [r3]
   1abea:	2900      	cmp	r1, #0
   1abec:	d1f7      	bne.n	1abde <bt_att_sent+0x1e>
   1abee:	f3bf 8f5b 	dmb	ish
	if (!att) {
   1abf2:	b30c      	cbz	r4, 1ac38 <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1abf4:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   1abf8:	b98b      	cbnz	r3, 1ac1e <bt_att_sent+0x5e>
   1abfa:	6863      	ldr	r3, [r4, #4]
   1abfc:	b17b      	cbz	r3, 1ac1e <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1abfe:	1d20      	adds	r0, r4, #4
   1ac00:	f7ff fda4 	bl	1a74c <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1ac04:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1ac06:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1ac08:	4638      	mov	r0, r7
   1ac0a:	f7ff fe76 	bl	1a8fa <chan_req_send>
   1ac0e:	2800      	cmp	r0, #0
   1ac10:	da12      	bge.n	1ac38 <bt_att_sent+0x78>
Z_GENLIST_PREPEND(slist, snode)
   1ac12:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   1ac14:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1ac16:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   1ac18:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   1ac1a:	b903      	cbnz	r3, 1ac1e <bt_att_sent+0x5e>
	list->tail = node;
   1ac1c:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   1ac1e:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   1ac22:	4638      	mov	r0, r7
   1ac24:	f7ff fe82 	bl	1a92c <process_queue>
	if (!err) {
   1ac28:	b130      	cbz	r0, 1ac38 <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   1ac2a:	f104 010c 	add.w	r1, r4, #12
   1ac2e:	4638      	mov	r0, r7
}
   1ac30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   1ac34:	f7ff be7a 	b.w	1a92c <process_queue>
}
   1ac38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ac3a <read_cb>:
{
   1ac3a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   1ac3e:	f8d2 8000 	ldr.w	r8, [r2]
{
   1ac42:	4606      	mov	r6, r0
	data->err = 0x00;
   1ac44:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   1ac46:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   1ac4a:	7317      	strb	r7, [r2, #12]
{
   1ac4c:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1ac4e:	4631      	mov	r1, r6
   1ac50:	2215      	movs	r2, #21
   1ac52:	f000 fb8b 	bl	1b36c <bt_gatt_check_perm>
   1ac56:	4604      	mov	r4, r0
   1ac58:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   1ac5a:	b9a0      	cbnz	r0, 1ac86 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1ac5c:	e9cd 0000 	strd	r0, r0, [sp]
   1ac60:	88ab      	ldrh	r3, [r5, #4]
   1ac62:	68aa      	ldr	r2, [r5, #8]
   1ac64:	4631      	mov	r1, r6
   1ac66:	4640      	mov	r0, r8
   1ac68:	f7ff fea1 	bl	1a9ae <att_chan_read>
	if (ret < 0) {
   1ac6c:	1e03      	subs	r3, r0, #0
   1ac6e:	da0c      	bge.n	1ac8a <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   1ac70:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   1ac74:	bf26      	itte	cs
   1ac76:	425b      	negcs	r3, r3
   1ac78:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   1ac7a:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   1ac7c:	732b      	strb	r3, [r5, #12]
}
   1ac7e:	4620      	mov	r0, r4
   1ac80:	b002      	add	sp, #8
   1ac82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   1ac86:	463c      	mov	r4, r7
   1ac88:	e7f9      	b.n	1ac7e <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   1ac8a:	2401      	movs	r4, #1
   1ac8c:	e7f7      	b.n	1ac7e <read_cb+0x44>

0001ac8e <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1ac8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ac92:	4688      	mov	r8, r1
   1ac94:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1ac96:	2101      	movs	r1, #1
   1ac98:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1ac9a:	4605      	mov	r5, r0
   1ac9c:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1ac9e:	f7ec fae9 	bl	7274 <bt_att_chan_create_pdu>
	if (!buf) {
   1aca2:	4604      	mov	r4, r0
   1aca4:	b170      	cbz	r0, 1acc4 <send_err_rsp.part.0+0x36>
   1aca6:	2104      	movs	r1, #4
   1aca8:	3008      	adds	r0, #8
   1acaa:	f002 fb08 	bl	1d2be <net_buf_simple_add>
	rsp->request = req;
   1acae:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   1acb2:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   1acb4:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1acb8:	4621      	mov	r1, r4
   1acba:	4628      	mov	r0, r5
}
   1acbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1acc0:	f7ec b944 	b.w	6f4c <bt_att_chan_send_rsp.constprop.0>
}
   1acc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001acc8 <att_write_cmd>:
{
   1acc8:	b530      	push	{r4, r5, lr}
   1acca:	460c      	mov	r4, r1
   1accc:	b085      	sub	sp, #20
   1acce:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1acd0:	f101 0008 	add.w	r0, r1, #8
   1acd4:	f002 fb68 	bl	1d3a8 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1acd8:	89a2      	ldrh	r2, [r4, #12]
   1acda:	9202      	str	r2, [sp, #8]
   1acdc:	68a2      	ldr	r2, [r4, #8]
   1acde:	9201      	str	r2, [sp, #4]
   1ace0:	2200      	movs	r2, #0
   1ace2:	4603      	mov	r3, r0
   1ace4:	9200      	str	r2, [sp, #0]
   1ace6:	4611      	mov	r1, r2
   1ace8:	4628      	mov	r0, r5
   1acea:	f7ec fbb7 	bl	745c <att_write_rsp>
}
   1acee:	b005      	add	sp, #20
   1acf0:	bd30      	pop	{r4, r5, pc}

0001acf2 <att_write_req>:
{
   1acf2:	b530      	push	{r4, r5, lr}
   1acf4:	460c      	mov	r4, r1
   1acf6:	b085      	sub	sp, #20
   1acf8:	4605      	mov	r5, r0
   1acfa:	f101 0008 	add.w	r0, r1, #8
   1acfe:	f002 fb53 	bl	1d3a8 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1ad02:	89a2      	ldrh	r2, [r4, #12]
   1ad04:	9202      	str	r2, [sp, #8]
   1ad06:	68a2      	ldr	r2, [r4, #8]
   1ad08:	9201      	str	r2, [sp, #4]
   1ad0a:	2200      	movs	r2, #0
   1ad0c:	4603      	mov	r3, r0
   1ad0e:	9200      	str	r2, [sp, #0]
   1ad10:	2112      	movs	r1, #18
   1ad12:	2213      	movs	r2, #19
   1ad14:	4628      	mov	r0, r5
   1ad16:	f7ec fba1 	bl	745c <att_write_rsp>
}
   1ad1a:	b005      	add	sp, #20
   1ad1c:	bd30      	pop	{r4, r5, pc}

0001ad1e <att_exec_write_req>:
{
   1ad1e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return att_exec_write_rsp(chan, req->flags);
   1ad22:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = chan->chan.chan.conn;
   1ad24:	6887      	ldr	r7, [r0, #8]
	return att_exec_write_rsp(chan, req->flags);
   1ad26:	f893 8000 	ldrb.w	r8, [r3]
{
   1ad2a:	4606      	mov	r6, r0
	uint8_t err = 0U;
   1ad2c:	2400      	movs	r4, #0
	while ((buf = net_buf_get(&chan->att->prep_queue, K_NO_WAIT))) {
   1ad2e:	6830      	ldr	r0, [r6, #0]
   1ad30:	2200      	movs	r2, #0
   1ad32:	2300      	movs	r3, #0
   1ad34:	3024      	adds	r0, #36	; 0x24
   1ad36:	f002 fa42 	bl	1d1be <net_buf_get>
   1ad3a:	4605      	mov	r5, r0
   1ad3c:	b970      	cbnz	r0, 1ad5c <att_exec_write_req+0x3e>
	if (err) {
   1ad3e:	bb4c      	cbnz	r4, 1ad94 <att_exec_write_req+0x76>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_EXEC_WRITE_RSP, 0);
   1ad40:	2119      	movs	r1, #25
   1ad42:	4622      	mov	r2, r4
   1ad44:	4638      	mov	r0, r7
   1ad46:	f7ec fbed 	bl	7524 <bt_att_create_pdu>
	if (!buf) {
   1ad4a:	4601      	mov	r1, r0
   1ad4c:	b320      	cbz	r0, 1ad98 <att_exec_write_req+0x7a>
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1ad4e:	4630      	mov	r0, r6
   1ad50:	f7ec f8fc 	bl	6f4c <bt_att_chan_send_rsp.constprop.0>
}
   1ad54:	4620      	mov	r0, r4
   1ad56:	b004      	add	sp, #16
   1ad58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!err && flags == BT_ATT_FLAG_EXEC) {
   1ad5c:	b9b4      	cbnz	r4, 1ad8c <att_exec_write_req+0x6e>
   1ad5e:	f1b8 0f01 	cmp.w	r8, #1
   1ad62:	d113      	bne.n	1ad8c <att_exec_write_req+0x6e>
			err = att_write_rsp(chan, BT_ATT_OP_EXEC_WRITE_REQ, 0,
   1ad64:	89aa      	ldrh	r2, [r5, #12]
   1ad66:	8aab      	ldrh	r3, [r5, #20]
   1ad68:	9202      	str	r2, [sp, #8]
   1ad6a:	68aa      	ldr	r2, [r5, #8]
   1ad6c:	9201      	str	r2, [sp, #4]
   1ad6e:	8aea      	ldrh	r2, [r5, #22]
   1ad70:	9200      	str	r2, [sp, #0]
   1ad72:	2118      	movs	r1, #24
   1ad74:	4622      	mov	r2, r4
   1ad76:	4630      	mov	r0, r6
   1ad78:	f7ec fb70 	bl	745c <att_write_rsp>
			if (err) {
   1ad7c:	4604      	mov	r4, r0
   1ad7e:	b128      	cbz	r0, 1ad8c <att_exec_write_req+0x6e>
	if (!req) {
   1ad80:	4603      	mov	r3, r0
   1ad82:	8aaa      	ldrh	r2, [r5, #20]
   1ad84:	2118      	movs	r1, #24
   1ad86:	4630      	mov	r0, r6
   1ad88:	f7ff ff81 	bl	1ac8e <send_err_rsp.part.0>
		net_buf_unref(buf);
   1ad8c:	4628      	mov	r0, r5
   1ad8e:	f7fa fce5 	bl	1575c <net_buf_unref>
   1ad92:	e7cc      	b.n	1ad2e <att_exec_write_req+0x10>
		return 0;
   1ad94:	4604      	mov	r4, r0
   1ad96:	e7dd      	b.n	1ad54 <att_exec_write_req+0x36>
		return BT_ATT_ERR_UNLIKELY;
   1ad98:	240e      	movs	r4, #14
   1ad9a:	e7db      	b.n	1ad54 <att_exec_write_req+0x36>

0001ad9c <att_read_blob_req>:
{
   1ad9c:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1ad9e:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1ada0:	8813      	ldrh	r3, [r2, #0]
   1ada2:	8852      	ldrh	r2, [r2, #2]
   1ada4:	9200      	str	r2, [sp, #0]
   1ada6:	210c      	movs	r1, #12
   1ada8:	220d      	movs	r2, #13
   1adaa:	f7ec fd25 	bl	77f8 <att_read_rsp>
}
   1adae:	b003      	add	sp, #12
   1adb0:	f85d fb04 	ldr.w	pc, [sp], #4

0001adb4 <att_read_req>:
{
   1adb4:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   1adb6:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1adb8:	2200      	movs	r2, #0
   1adba:	881b      	ldrh	r3, [r3, #0]
   1adbc:	9200      	str	r2, [sp, #0]
   1adbe:	210a      	movs	r1, #10
   1adc0:	220b      	movs	r2, #11
   1adc2:	f7ec fd19 	bl	77f8 <att_read_rsp>
}
   1adc6:	b003      	add	sp, #12
   1adc8:	f85d fb04 	ldr.w	pc, [sp], #4

0001adcc <att_mtu_req>:
{
   1adcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   1adce:	6803      	ldr	r3, [r0, #0]
{
   1add0:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   1add2:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1add4:	f3bf 8f5b 	dmb	ish
   1add8:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
   1addc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1ade0:	f3c3 04c0 	ubfx	r4, r3, #3, #1
   1ade4:	071b      	lsls	r3, r3, #28
   1ade6:	d41d      	bmi.n	1ae24 <att_mtu_req+0x58>
	mtu_client = sys_le16_to_cpu(req->mtu);
   1ade8:	688b      	ldr	r3, [r1, #8]
   1adea:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   1adec:	2e16      	cmp	r6, #22
   1adee:	d91b      	bls.n	1ae28 <att_mtu_req+0x5c>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   1adf0:	2202      	movs	r2, #2
   1adf2:	2103      	movs	r1, #3
   1adf4:	f7ec fb96 	bl	7524 <bt_att_create_pdu>
	if (!pdu) {
   1adf8:	4607      	mov	r7, r0
   1adfa:	b1b8      	cbz	r0, 1ae2c <att_mtu_req+0x60>
	return net_buf_simple_add(&buf->b, len);
   1adfc:	2102      	movs	r1, #2
   1adfe:	3008      	adds	r0, #8
   1ae00:	f002 fa5d 	bl	1d2be <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1ae04:	2345      	movs	r3, #69	; 0x45
   1ae06:	7003      	strb	r3, [r0, #0]
   1ae08:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   1ae0a:	4639      	mov	r1, r7
   1ae0c:	4628      	mov	r0, r5
   1ae0e:	f7ec f89d 	bl	6f4c <bt_att_chan_send_rsp.constprop.0>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1ae12:	2e45      	cmp	r6, #69	; 0x45
   1ae14:	bf28      	it	cs
   1ae16:	2645      	movcs	r6, #69	; 0x45
   1ae18:	f8a5 607a 	strh.w	r6, [r5, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1ae1c:	f8a5 6086 	strh.w	r6, [r5, #134]	; 0x86
	return 0;
   1ae20:	4620      	mov	r0, r4
}
   1ae22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   1ae24:	2006      	movs	r0, #6
   1ae26:	e7fc      	b.n	1ae22 <att_mtu_req+0x56>
		return BT_ATT_ERR_INVALID_PDU;
   1ae28:	2004      	movs	r0, #4
   1ae2a:	e7fa      	b.n	1ae22 <att_mtu_req+0x56>
		return BT_ATT_ERR_UNLIKELY;
   1ae2c:	200e      	movs	r0, #14
   1ae2e:	e7f8      	b.n	1ae22 <att_mtu_req+0x56>

0001ae30 <bt_att_init>:
	bt_gatt_init();
   1ae30:	f7ed bbc4 	b.w	85bc <bt_gatt_init>

0001ae34 <bt_att_get_mtu>:
{
   1ae34:	b508      	push	{r3, lr}
	att = att_get(conn);
   1ae36:	f7ec f849 	bl	6ecc <att_get>
	if (!att) {
   1ae3a:	b1d8      	cbz	r0, 1ae74 <bt_att_get_mtu+0x40>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ae3c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   1ae3e:	b1c8      	cbz	r0, 1ae74 <bt_att_get_mtu+0x40>
   1ae40:	f5b0 71a2 	subs.w	r1, r0, #324	; 0x144
   1ae44:	d015      	beq.n	1ae72 <bt_att_get_mtu+0x3e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ae46:	6803      	ldr	r3, [r0, #0]
   1ae48:	b10b      	cbz	r3, 1ae4e <bt_att_get_mtu+0x1a>
   1ae4a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   1ae4e:	2000      	movs	r0, #0
		if (chan->chan.tx.mtu > mtu) {
   1ae50:	f8b1 2086 	ldrh.w	r2, [r1, #134]	; 0x86
   1ae54:	4290      	cmp	r0, r2
   1ae56:	bf38      	it	cc
   1ae58:	4610      	movcc	r0, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ae5a:	b15b      	cbz	r3, 1ae74 <bt_att_get_mtu+0x40>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ae5c:	f513 72a2 	adds.w	r2, r3, #324	; 0x144
   1ae60:	d004      	beq.n	1ae6c <bt_att_get_mtu+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ae62:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
   1ae66:	b10a      	cbz	r2, 1ae6c <bt_att_get_mtu+0x38>
   1ae68:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
{
   1ae6c:	4619      	mov	r1, r3
   1ae6e:	4613      	mov	r3, r2
   1ae70:	e7ee      	b.n	1ae50 <bt_att_get_mtu+0x1c>
		return 0;
   1ae72:	4608      	mov	r0, r1
}
   1ae74:	bd08      	pop	{r3, pc}

0001ae76 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1ae76:	898a      	ldrh	r2, [r1, #12]
   1ae78:	6889      	ldr	r1, [r1, #8]
   1ae7a:	2300      	movs	r3, #0
   1ae7c:	f7ec be2e 	b.w	7adc <att_handle_rsp>

0001ae80 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   1ae80:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1ae84:	4607      	mov	r7, r0
   1ae86:	460d      	mov	r5, r1
   1ae88:	4616      	mov	r6, r2
   1ae8a:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   1ae8c:	f7ec f81e 	bl	6ecc <att_get>
	if (!att) {
   1ae90:	4604      	mov	r4, r0
   1ae92:	b938      	cbnz	r0, 1aea4 <bt_att_send+0x24>
		net_buf_unref(buf);
   1ae94:	4628      	mov	r0, r5
   1ae96:	f7fa fc61 	bl	1575c <net_buf_unref>
		return -ENOTCONN;
   1ae9a:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   1ae9e:	b002      	add	sp, #8
   1aea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   1aea4:	b146      	cbz	r6, 1aeb8 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   1aea6:	f8cd 8000 	str.w	r8, [sp]
   1aeaa:	4633      	mov	r3, r6
   1aeac:	462a      	mov	r2, r5
   1aeae:	2104      	movs	r1, #4
   1aeb0:	4638      	mov	r0, r7
   1aeb2:	f7ff fc11 	bl	1a6d8 <bt_l2cap_send_cb>
   1aeb6:	e7f2      	b.n	1ae9e <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
   1aeb8:	f100 060c 	add.w	r6, r0, #12
   1aebc:	4629      	mov	r1, r5
   1aebe:	4630      	mov	r0, r6
   1aec0:	f002 f9be 	bl	1d240 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   1aec4:	2200      	movs	r2, #0
   1aec6:	2300      	movs	r3, #0
   1aec8:	4630      	mov	r0, r6
   1aeca:	f002 f978 	bl	1d1be <net_buf_get>
	if (!buf) {
   1aece:	4605      	mov	r5, r0
   1aed0:	b908      	cbnz	r0, 1aed6 <bt_att_send+0x56>
	return 0;
   1aed2:	2000      	movs	r0, #0
   1aed4:	e7e3      	b.n	1ae9e <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1aed6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1aed8:	b1c3      	cbz	r3, 1af0c <bt_att_send+0x8c>
   1aeda:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   1aede:	d015      	beq.n	1af0c <bt_att_send+0x8c>
   1aee0:	681c      	ldr	r4, [r3, #0]
   1aee2:	b10c      	cbz	r4, 1aee8 <bt_att_send+0x68>
   1aee4:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
	return chan_send(chan, buf, cb);
   1aee8:	2200      	movs	r2, #0
   1aeea:	4629      	mov	r1, r5
   1aeec:	f7eb ff80 	bl	6df0 <chan_send>
		if (err >= 0) {
   1aef0:	2800      	cmp	r0, #0
   1aef2:	daee      	bge.n	1aed2 <bt_att_send+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1aef4:	b154      	cbz	r4, 1af0c <bt_att_send+0x8c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1aef6:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   1aefa:	d004      	beq.n	1af06 <bt_att_send+0x86>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1aefc:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   1af00:	b10b      	cbz	r3, 1af06 <bt_att_send+0x86>
   1af02:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   1af06:	4620      	mov	r0, r4
   1af08:	461c      	mov	r4, r3
   1af0a:	e7ed      	b.n	1aee8 <bt_att_send+0x68>
		k_queue_prepend(&att->tx_queue._queue, buf);
   1af0c:	4629      	mov	r1, r5
   1af0e:	4630      	mov	r0, r6
   1af10:	f002 fd62 	bl	1d9d8 <k_queue_prepend>
   1af14:	e7dd      	b.n	1aed2 <bt_att_send+0x52>

0001af16 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1af16:	b510      	push	{r4, lr}
   1af18:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   1af1a:	f7eb ffd7 	bl	6ecc <att_get>
	if (!att) {
   1af1e:	b160      	cbz	r0, 1af3a <bt_att_req_send+0x24>
	parent->next = child;
   1af20:	2300      	movs	r3, #0
   1af22:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1af24:	6883      	ldr	r3, [r0, #8]
   1af26:	b92b      	cbnz	r3, 1af34 <bt_att_req_send+0x1e>
	list->head = node;
   1af28:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   1af2c:	f7ff fdee 	bl	1ab0c <att_req_send_process>

	return 0;
   1af30:	2000      	movs	r0, #0
}
   1af32:	bd10      	pop	{r4, pc}
	parent->next = child;
   1af34:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1af36:	6084      	str	r4, [r0, #8]
}
   1af38:	e7f8      	b.n	1af2c <bt_att_req_send+0x16>
		return -ENOTCONN;
   1af3a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1af3e:	e7f8      	b.n	1af32 <bt_att_req_send+0x1c>

0001af40 <found_attr>:
	*found = attr;
   1af40:	6010      	str	r0, [r2, #0]
}
   1af42:	2000      	movs	r0, #0
   1af44:	4770      	bx	lr

0001af46 <gatt_ccc_changed>:
{
   1af46:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   1af48:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   1af4a:	895a      	ldrh	r2, [r3, #10]
   1af4c:	428a      	cmp	r2, r1
   1af4e:	d003      	beq.n	1af58 <gatt_ccc_changed+0x12>
		ccc->value = value;
   1af50:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   1af52:	68db      	ldr	r3, [r3, #12]
   1af54:	b103      	cbz	r3, 1af58 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   1af56:	4718      	bx	r3
}
   1af58:	4770      	bx	lr

0001af5a <gatt_indicate_rsp>:
{
   1af5a:	b510      	push	{r4, lr}
   1af5c:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   1af5e:	68a3      	ldr	r3, [r4, #8]
{
   1af60:	460a      	mov	r2, r1
	if (params->func) {
   1af62:	b10b      	cbz	r3, 1af68 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   1af64:	4621      	mov	r1, r4
   1af66:	4798      	blx	r3
	params->_ref--;
   1af68:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1af6a:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   1af6c:	3b01      	subs	r3, #1
   1af6e:	b2db      	uxtb	r3, r3
   1af70:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1af72:	b122      	cbz	r2, 1af7e <gatt_indicate_rsp+0x24>
   1af74:	b91b      	cbnz	r3, 1af7e <gatt_indicate_rsp+0x24>
		params->destroy(params);
   1af76:	4620      	mov	r0, r4
}
   1af78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   1af7c:	4710      	bx	r2
}
   1af7e:	bd10      	pop	{r4, pc}

0001af80 <match_uuid>:
	data->attr = attr;
   1af80:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1af82:	8091      	strh	r1, [r2, #4]
}
   1af84:	2000      	movs	r0, #0
   1af86:	4770      	bx	lr

0001af88 <ccc_set_cb>:
}
   1af88:	2000      	movs	r0, #0
   1af8a:	4770      	bx	lr

0001af8c <atomic_get>:
   1af8c:	f3bf 8f5b 	dmb	ish
   1af90:	6800      	ldr	r0, [r0, #0]
   1af92:	f3bf 8f5b 	dmb	ish
}
   1af96:	4770      	bx	lr

0001af98 <gen_hash_m>:
{
   1af98:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1af9a:	6807      	ldr	r7, [r0, #0]
   1af9c:	783d      	ldrb	r5, [r7, #0]
{
   1af9e:	b089      	sub	sp, #36	; 0x24
   1afa0:	4606      	mov	r6, r0
   1afa2:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1afa4:	b10d      	cbz	r5, 1afaa <gen_hash_m+0x12>
	switch (u16->val) {
   1afa6:	2501      	movs	r5, #1
   1afa8:	e014      	b.n	1afd4 <gen_hash_m+0x3c>
   1afaa:	887b      	ldrh	r3, [r7, #2]
   1afac:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1afb0:	d004      	beq.n	1afbc <gen_hash_m+0x24>
   1afb2:	d812      	bhi.n	1afda <gen_hash_m+0x42>
   1afb4:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1afb8:	2b03      	cmp	r3, #3
   1afba:	d8f4      	bhi.n	1afa6 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1afbc:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1afc0:	2202      	movs	r2, #2
   1afc2:	f10d 010e 	add.w	r1, sp, #14
   1afc6:	4620      	mov	r0, r4
   1afc8:	f7fe fc6e 	bl	198a8 <tc_cmac_update>
   1afcc:	b9e0      	cbnz	r0, 1b008 <gen_hash_m+0x70>
			state->err = -EINVAL;
   1afce:	f06f 0315 	mvn.w	r3, #21
   1afd2:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1afd4:	4628      	mov	r0, r5
   1afd6:	b009      	add	sp, #36	; 0x24
   1afd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   1afda:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1afde:	33ff      	adds	r3, #255	; 0xff
   1afe0:	b29b      	uxth	r3, r3
   1afe2:	2b04      	cmp	r3, #4
   1afe4:	d8df      	bhi.n	1afa6 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1afe6:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1afea:	2202      	movs	r2, #2
   1afec:	f10d 010e 	add.w	r1, sp, #14
   1aff0:	4620      	mov	r0, r4
   1aff2:	f7fe fc59 	bl	198a8 <tc_cmac_update>
   1aff6:	2800      	cmp	r0, #0
   1aff8:	d0e9      	beq.n	1afce <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   1affa:	887b      	ldrh	r3, [r7, #2]
   1affc:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1b000:	2202      	movs	r2, #2
   1b002:	f10d 010e 	add.w	r1, sp, #14
   1b006:	e017      	b.n	1b038 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   1b008:	887b      	ldrh	r3, [r7, #2]
   1b00a:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1b00e:	2202      	movs	r2, #2
   1b010:	f10d 010e 	add.w	r1, sp, #14
   1b014:	4620      	mov	r0, r4
   1b016:	f7fe fc47 	bl	198a8 <tc_cmac_update>
   1b01a:	2800      	cmp	r0, #0
   1b01c:	d0d7      	beq.n	1afce <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1b01e:	2000      	movs	r0, #0
   1b020:	2310      	movs	r3, #16
   1b022:	eb0d 0203 	add.w	r2, sp, r3
   1b026:	6877      	ldr	r7, [r6, #4]
   1b028:	9000      	str	r0, [sp, #0]
   1b02a:	4631      	mov	r1, r6
   1b02c:	47b8      	blx	r7
		if (len < 0) {
   1b02e:	1e02      	subs	r2, r0, #0
   1b030:	da01      	bge.n	1b036 <gen_hash_m+0x9e>
			state->err = len;
   1b032:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1b034:	e7ce      	b.n	1afd4 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   1b036:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1b038:	4620      	mov	r0, r4
   1b03a:	f7fe fc35 	bl	198a8 <tc_cmac_update>
   1b03e:	2800      	cmp	r0, #0
   1b040:	d1b1      	bne.n	1afa6 <gen_hash_m+0xe>
   1b042:	e7c4      	b.n	1afce <gen_hash_m+0x36>

0001b044 <atomic_or>:
{
   1b044:	4603      	mov	r3, r0
}
   1b046:	f3bf 8f5b 	dmb	ish
   1b04a:	e853 0f00 	ldrex	r0, [r3]
   1b04e:	ea40 0201 	orr.w	r2, r0, r1
   1b052:	e843 2c00 	strex	ip, r2, [r3]
   1b056:	f1bc 0f00 	cmp.w	ip, #0
   1b05a:	d1f6      	bne.n	1b04a <atomic_or+0x6>
   1b05c:	f3bf 8f5b 	dmb	ish
   1b060:	4770      	bx	lr

0001b062 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1b062:	2207      	movs	r2, #7
   1b064:	f7fe bd9e 	b.w	19ba4 <memcpy>

0001b068 <clear_ccc_cfg>:
{
   1b068:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1b06a:	2500      	movs	r5, #0
{
   1b06c:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1b06e:	4669      	mov	r1, sp
   1b070:	3001      	adds	r0, #1
   1b072:	9500      	str	r5, [sp, #0]
   1b074:	f8cd 5003 	str.w	r5, [sp, #3]
   1b078:	f7ff fff3 	bl	1b062 <bt_addr_le_copy>
	cfg->id = 0U;
   1b07c:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1b07e:	8125      	strh	r5, [r4, #8]
}
   1b080:	b003      	add	sp, #12
   1b082:	bd30      	pop	{r4, r5, pc}

0001b084 <atomic_and>:
{
   1b084:	4603      	mov	r3, r0
}
   1b086:	f3bf 8f5b 	dmb	ish
   1b08a:	e853 0f00 	ldrex	r0, [r3]
   1b08e:	ea00 0201 	and.w	r2, r0, r1
   1b092:	e843 2c00 	strex	ip, r2, [r3]
   1b096:	f1bc 0f00 	cmp.w	ip, #0
   1b09a:	d1f6      	bne.n	1b08a <atomic_and+0x6>
   1b09c:	f3bf 8f5b 	dmb	ish
   1b0a0:	4770      	bx	lr

0001b0a2 <clear_cf_cfg>:
{
   1b0a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b0a4:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1b0a6:	2500      	movs	r5, #0
   1b0a8:	4669      	mov	r1, sp
   1b0aa:	3001      	adds	r0, #1
   1b0ac:	9500      	str	r5, [sp, #0]
   1b0ae:	f8cd 5003 	str.w	r5, [sp, #3]
   1b0b2:	f7ff ffd6 	bl	1b062 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1b0b6:	f104 0008 	add.w	r0, r4, #8
   1b0ba:	2201      	movs	r2, #1
   1b0bc:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1b0be:	340c      	adds	r4, #12
   1b0c0:	f7fe fd9b 	bl	19bfa <memset>
   1b0c4:	f3bf 8f5b 	dmb	ish
   1b0c8:	e854 3f00 	ldrex	r3, [r4]
   1b0cc:	e844 5200 	strex	r2, r5, [r4]
   1b0d0:	2a00      	cmp	r2, #0
   1b0d2:	d1f9      	bne.n	1b0c8 <clear_cf_cfg+0x26>
   1b0d4:	f3bf 8f5b 	dmb	ish
}
   1b0d8:	b003      	add	sp, #12
   1b0da:	bd30      	pop	{r4, r5, pc}

0001b0dc <ccc_find_cfg>:
{
   1b0dc:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   1b0de:	7803      	ldrb	r3, [r0, #0]
   1b0e0:	4293      	cmp	r3, r2
{
   1b0e2:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   1b0e4:	d001      	beq.n	1b0ea <ccc_find_cfg+0xe>
	return NULL;
   1b0e6:	2000      	movs	r0, #0
}
   1b0e8:	bd10      	pop	{r4, pc}
	return memcmp(a, b, sizeof(*a));
   1b0ea:	2207      	movs	r2, #7
   1b0ec:	3001      	adds	r0, #1
   1b0ee:	f7fe fd49 	bl	19b84 <memcmp>
		if (id == ccc->cfg[i].id &&
   1b0f2:	2800      	cmp	r0, #0
   1b0f4:	d1f7      	bne.n	1b0e6 <ccc_find_cfg+0xa>
			return &ccc->cfg[i];
   1b0f6:	4620      	mov	r0, r4
   1b0f8:	e7f6      	b.n	1b0e8 <ccc_find_cfg+0xc>

0001b0fa <find_ccc_cfg>:
{
   1b0fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b0fc:	460c      	mov	r4, r1
   1b0fe:	1c4d      	adds	r5, r1, #1
		if (conn) {
   1b100:	b148      	cbz	r0, 1b116 <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1b102:	7809      	ldrb	r1, [r1, #0]
   1b104:	462a      	mov	r2, r5
   1b106:	f7ff f9d3 	bl	1a4b0 <bt_conn_is_peer_addr_le>
   1b10a:	2800      	cmp	r0, #0
	return NULL;
   1b10c:	bf08      	it	eq
   1b10e:	2400      	moveq	r4, #0
}
   1b110:	4620      	mov	r0, r4
   1b112:	b003      	add	sp, #12
   1b114:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1b116:	9000      	str	r0, [sp, #0]
   1b118:	2207      	movs	r2, #7
   1b11a:	f8cd 0003 	str.w	r0, [sp, #3]
   1b11e:	4669      	mov	r1, sp
   1b120:	4628      	mov	r0, r5
   1b122:	f7fe fd2f 	bl	19b84 <memcmp>
   1b126:	2800      	cmp	r0, #0
	return NULL;
   1b128:	bf18      	it	ne
   1b12a:	2400      	movne	r4, #0
   1b12c:	e7f0      	b.n	1b110 <find_ccc_cfg+0x16>

0001b12e <sc_restore_rsp>:
{
   1b12e:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   1b130:	f7ec ff94 	bl	805c <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1b134:	b140      	cbz	r0, 1b148 <sc_restore_rsp+0x1a>
   1b136:	7a03      	ldrb	r3, [r0, #8]
   1b138:	07db      	lsls	r3, r3, #31
   1b13a:	d505      	bpl.n	1b148 <sc_restore_rsp+0x1a>
}
   1b13c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b140:	2101      	movs	r1, #1
   1b142:	300c      	adds	r0, #12
   1b144:	f7ff bf7e 	b.w	1b044 <atomic_or>
   1b148:	bd08      	pop	{r3, pc}

0001b14a <read_appearance>:
{
   1b14a:	b513      	push	{r0, r1, r4, lr}
   1b14c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1b150:	4610      	mov	r0, r2
	if (offset > value_len) {
   1b152:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1b154:	f04f 0200 	mov.w	r2, #0
   1b158:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1b15c:	d80d      	bhi.n	1b17a <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   1b15e:	f1c1 0402 	rsb	r4, r1, #2
   1b162:	429c      	cmp	r4, r3
   1b164:	bfa8      	it	ge
   1b166:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1b168:	f10d 0306 	add.w	r3, sp, #6
   1b16c:	4622      	mov	r2, r4
   1b16e:	4419      	add	r1, r3
   1b170:	f7fe fd18 	bl	19ba4 <memcpy>
}
   1b174:	4620      	mov	r0, r4
   1b176:	b002      	add	sp, #8
   1b178:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b17a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1b17e:	e7f9      	b.n	1b174 <read_appearance+0x2a>

0001b180 <read_name>:
{
   1b180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b184:	4698      	mov	r8, r3
   1b186:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1b18a:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   1b18c:	f7ea fb64 	bl	5858 <bt_get_name>
   1b190:	4607      	mov	r7, r0
				 strlen(name));
   1b192:	f7fe fccc 	bl	19b2e <strlen>
	if (offset > value_len) {
   1b196:	b283      	uxth	r3, r0
   1b198:	42b3      	cmp	r3, r6
   1b19a:	d30c      	bcc.n	1b1b6 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   1b19c:	1b9c      	subs	r4, r3, r6
   1b19e:	4544      	cmp	r4, r8
   1b1a0:	bfa8      	it	ge
   1b1a2:	4644      	movge	r4, r8
   1b1a4:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1b1a6:	4622      	mov	r2, r4
   1b1a8:	19b9      	adds	r1, r7, r6
   1b1aa:	4628      	mov	r0, r5
   1b1ac:	f7fe fcfa 	bl	19ba4 <memcpy>
}
   1b1b0:	4620      	mov	r0, r4
   1b1b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b1b6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1b1ba:	e7f9      	b.n	1b1b0 <read_name+0x30>

0001b1bc <cf_read>:
{
   1b1bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b1be:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   1b1c0:	2300      	movs	r3, #0
{
   1b1c2:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   1b1c6:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1b1ca:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   1b1cc:	f7ec ff46 	bl	805c <find_cf_cfg>
	if (cfg) {
   1b1d0:	b128      	cbz	r0, 1b1de <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   1b1d2:	f100 0108 	add.w	r1, r0, #8
   1b1d6:	2201      	movs	r2, #1
   1b1d8:	a801      	add	r0, sp, #4
   1b1da:	f7fe fce3 	bl	19ba4 <memcpy>
	if (offset > value_len) {
   1b1de:	2e01      	cmp	r6, #1
   1b1e0:	d80d      	bhi.n	1b1fe <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   1b1e2:	f1c6 0401 	rsb	r4, r6, #1
   1b1e6:	42bc      	cmp	r4, r7
   1b1e8:	bfa8      	it	ge
   1b1ea:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1b1ec:	ab01      	add	r3, sp, #4
   1b1ee:	4622      	mov	r2, r4
   1b1f0:	1999      	adds	r1, r3, r6
   1b1f2:	4628      	mov	r0, r5
   1b1f4:	f7fe fcd6 	bl	19ba4 <memcpy>
}
   1b1f8:	4620      	mov	r0, r4
   1b1fa:	b003      	add	sp, #12
   1b1fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b1fe:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1b202:	e7f9      	b.n	1b1f8 <cf_read+0x3c>

0001b204 <bt_gatt_attr_read_ccc>:
{
   1b204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   1b206:	68c9      	ldr	r1, [r1, #12]
{
   1b208:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   1b20c:	4615      	mov	r5, r2
   1b20e:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   1b210:	f7ff ff73 	bl	1b0fa <find_ccc_cfg>
	if (cfg) {
   1b214:	b100      	cbz	r0, 1b218 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   1b216:	8900      	ldrh	r0, [r0, #8]
   1b218:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   1b21c:	2e02      	cmp	r6, #2
   1b21e:	d80e      	bhi.n	1b23e <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   1b220:	f1c6 0402 	rsb	r4, r6, #2
   1b224:	42bc      	cmp	r4, r7
   1b226:	bfa8      	it	ge
   1b228:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1b22a:	f10d 0306 	add.w	r3, sp, #6
   1b22e:	4622      	mov	r2, r4
   1b230:	1999      	adds	r1, r3, r6
   1b232:	4628      	mov	r0, r5
   1b234:	f7fe fcb6 	bl	19ba4 <memcpy>
}
   1b238:	4620      	mov	r0, r4
   1b23a:	b003      	add	sp, #12
   1b23c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b23e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1b242:	e7f9      	b.n	1b238 <bt_gatt_attr_read_ccc+0x34>

0001b244 <bt_gatt_attr_read_service>:
{
   1b244:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   1b246:	68c9      	ldr	r1, [r1, #12]
{
   1b248:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   1b24c:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   1b24e:	780b      	ldrb	r3, [r1, #0]
{
   1b250:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   1b252:	b993      	cbnz	r3, 1b27a <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1b254:	884b      	ldrh	r3, [r1, #2]
   1b256:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   1b25a:	2d02      	cmp	r5, #2
   1b25c:	d819      	bhi.n	1b292 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1b25e:	f1c5 0202 	rsb	r2, r5, #2
   1b262:	4294      	cmp	r4, r2
   1b264:	bfa8      	it	ge
   1b266:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1b268:	f10d 0306 	add.w	r3, sp, #6
   1b26c:	4622      	mov	r2, r4
   1b26e:	1959      	adds	r1, r3, r5
   1b270:	f7fe fc98 	bl	19ba4 <memcpy>
}
   1b274:	4620      	mov	r0, r4
   1b276:	b003      	add	sp, #12
   1b278:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   1b27a:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   1b27c:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   1b280:	d807      	bhi.n	1b292 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1b282:	f1c5 0210 	rsb	r2, r5, #16
   1b286:	4294      	cmp	r4, r2
   1b288:	bfa8      	it	ge
   1b28a:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1b28c:	4622      	mov	r2, r4
   1b28e:	4429      	add	r1, r5
   1b290:	e7ee      	b.n	1b270 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b292:	f06f 0406 	mvn.w	r4, #6
   1b296:	e7ed      	b.n	1b274 <bt_gatt_attr_read_service+0x30>

0001b298 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   1b298:	2a02      	cmp	r2, #2
{
   1b29a:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1b29c:	d108      	bne.n	1b2b0 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1b29e:	2300      	movs	r3, #0
   1b2a0:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1b2a4:	461a      	mov	r2, r3
   1b2a6:	7a00      	ldrb	r0, [r0, #8]
   1b2a8:	f7ec fe10 	bl	7ecc <sc_save>
}
   1b2ac:	2002      	movs	r0, #2
   1b2ae:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   1b2b0:	f7ed f8e8 	bl	8484 <sc_clear>
   1b2b4:	e7fa      	b.n	1b2ac <sc_ccc_cfg_write+0x14>

0001b2b6 <bt_gatt_attr_value_handle>:
{
   1b2b6:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1b2b8:	4604      	mov	r4, r0
   1b2ba:	b910      	cbnz	r0, 1b2c2 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   1b2bc:	2000      	movs	r0, #0
}
   1b2be:	b002      	add	sp, #8
   1b2c0:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1b2c2:	2300      	movs	r3, #0
   1b2c4:	f88d 3004 	strb.w	r3, [sp, #4]
   1b2c8:	6800      	ldr	r0, [r0, #0]
   1b2ca:	f642 0303 	movw	r3, #10243	; 0x2803
   1b2ce:	a901      	add	r1, sp, #4
   1b2d0:	f8ad 3006 	strh.w	r3, [sp, #6]
   1b2d4:	f7fe fee3 	bl	1a09e <bt_uuid_cmp>
   1b2d8:	2800      	cmp	r0, #0
   1b2da:	d1ef      	bne.n	1b2bc <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   1b2dc:	68e3      	ldr	r3, [r4, #12]
   1b2de:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   1b2e0:	2800      	cmp	r0, #0
   1b2e2:	d1ec      	bne.n	1b2be <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   1b2e4:	4620      	mov	r0, r4
   1b2e6:	f7ed f9ad 	bl	8644 <bt_gatt_attr_get_handle>
   1b2ea:	3001      	adds	r0, #1
   1b2ec:	b280      	uxth	r0, r0
	return handle;
   1b2ee:	e7e6      	b.n	1b2be <bt_gatt_attr_value_handle+0x8>

0001b2f0 <bt_gatt_attr_read_chrc>:
{
   1b2f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1b2f2:	68cf      	ldr	r7, [r1, #12]
{
   1b2f4:	b087      	sub	sp, #28
   1b2f6:	4608      	mov	r0, r1
   1b2f8:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   1b2fa:	79bb      	ldrb	r3, [r7, #6]
   1b2fc:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1b300:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   1b304:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1b306:	f7ff ffd6 	bl	1b2b6 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1b30a:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1b30c:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1b310:	780b      	ldrb	r3, [r1, #0]
   1b312:	b99b      	cbnz	r3, 1b33c <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1b314:	884b      	ldrh	r3, [r1, #2]
   1b316:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   1b31a:	2105      	movs	r1, #5
	if (offset > value_len) {
   1b31c:	42b1      	cmp	r1, r6
   1b31e:	d315      	bcc.n	1b34c <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   1b320:	1b89      	subs	r1, r1, r6
   1b322:	42a1      	cmp	r1, r4
   1b324:	bfa8      	it	ge
   1b326:	4621      	movge	r1, r4
   1b328:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   1b32a:	ab01      	add	r3, sp, #4
   1b32c:	4622      	mov	r2, r4
   1b32e:	1999      	adds	r1, r3, r6
   1b330:	4628      	mov	r0, r5
   1b332:	f7fe fc37 	bl	19ba4 <memcpy>
}
   1b336:	4620      	mov	r0, r4
   1b338:	b007      	add	sp, #28
   1b33a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1b33c:	3101      	adds	r1, #1
   1b33e:	2210      	movs	r2, #16
   1b340:	f10d 0007 	add.w	r0, sp, #7
   1b344:	f7fe fc2e 	bl	19ba4 <memcpy>
		value_len += 16U;
   1b348:	2113      	movs	r1, #19
   1b34a:	e7e7      	b.n	1b31c <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b34c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1b350:	e7f1      	b.n	1b336 <bt_gatt_attr_read_chrc+0x46>

0001b352 <bt_gatt_foreach_attr>:
{
   1b352:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1b354:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1b358:	2300      	movs	r3, #0
   1b35a:	9300      	str	r3, [sp, #0]
   1b35c:	461a      	mov	r2, r3
   1b35e:	f7ed f9a1 	bl	86a4 <bt_gatt_foreach_attr_type>
}
   1b362:	b005      	add	sp, #20
   1b364:	f85d fb04 	ldr.w	pc, [sp], #4

0001b368 <bt_gatt_get_mtu>:
	return bt_att_get_mtu(conn);
   1b368:	f7ff bd64 	b.w	1ae34 <bt_att_get_mtu>

0001b36c <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   1b36c:	07d3      	lsls	r3, r2, #31
{
   1b36e:	b510      	push	{r4, lr}
   1b370:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1b372:	d504      	bpl.n	1b37e <bt_gatt_check_perm+0x12>
   1b374:	f014 0f15 	tst.w	r4, #21
   1b378:	d017      	beq.n	1b3aa <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1b37a:	684b      	ldr	r3, [r1, #4]
   1b37c:	b1ab      	cbz	r3, 1b3aa <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1b37e:	0793      	lsls	r3, r2, #30
   1b380:	d504      	bpl.n	1b38c <bt_gatt_check_perm+0x20>
   1b382:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   1b386:	d012      	beq.n	1b3ae <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1b388:	688b      	ldr	r3, [r1, #8]
   1b38a:	b183      	cbz	r3, 1b3ae <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   1b38c:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1b38e:	f014 0f30 	tst.w	r4, #48	; 0x30
   1b392:	d104      	bne.n	1b39e <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   1b394:	f014 000c 	ands.w	r0, r4, #12
   1b398:	bf18      	it	ne
   1b39a:	200f      	movne	r0, #15
}
   1b39c:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1b39e:	f7ff f873 	bl	1a488 <bt_conn_get_security>
   1b3a2:	2802      	cmp	r0, #2
   1b3a4:	d8f6      	bhi.n	1b394 <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   1b3a6:	2005      	movs	r0, #5
   1b3a8:	e7f8      	b.n	1b39c <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1b3aa:	2002      	movs	r0, #2
   1b3ac:	e7f6      	b.n	1b39c <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1b3ae:	2003      	movs	r0, #3
   1b3b0:	e7f4      	b.n	1b39c <bt_gatt_check_perm+0x30>

0001b3b2 <bt_gatt_change_aware>:
{
   1b3b2:	b538      	push	{r3, r4, r5, lr}
   1b3b4:	460d      	mov	r5, r1
	cfg = find_cf_cfg(conn);
   1b3b6:	f7ec fe51 	bl	805c <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1b3ba:	b910      	cbnz	r0, 1b3c2 <bt_gatt_change_aware+0x10>
		return true;
   1b3bc:	2501      	movs	r5, #1
}
   1b3be:	4628      	mov	r0, r5
   1b3c0:	bd38      	pop	{r3, r4, r5, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1b3c2:	7a03      	ldrb	r3, [r0, #8]
   1b3c4:	07d9      	lsls	r1, r3, #31
   1b3c6:	d5f9      	bpl.n	1b3bc <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1b3c8:	f100 040c 	add.w	r4, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1b3cc:	4620      	mov	r0, r4
   1b3ce:	f7ff fddd 	bl	1af8c <atomic_get>
   1b3d2:	07c2      	lsls	r2, r0, #31
   1b3d4:	d4f2      	bmi.n	1b3bc <bt_gatt_change_aware+0xa>
	if (!req) {
   1b3d6:	2d00      	cmp	r5, #0
   1b3d8:	d0f1      	beq.n	1b3be <bt_gatt_change_aware+0xc>
   1b3da:	4620      	mov	r0, r4
   1b3dc:	f7ff fdd6 	bl	1af8c <atomic_get>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   1b3e0:	0783      	lsls	r3, r0, #30
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1b3e2:	f3c0 0540 	ubfx	r5, r0, #1, #1
   1b3e6:	d509      	bpl.n	1b3fc <bt_gatt_change_aware+0x4a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b3e8:	f06f 0102 	mvn.w	r1, #2
   1b3ec:	4620      	mov	r0, r4
   1b3ee:	f7ff fe49 	bl	1b084 <atomic_and>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b3f2:	2101      	movs	r1, #1
   1b3f4:	4620      	mov	r0, r4
   1b3f6:	f7ff fe25 	bl	1b044 <atomic_or>
}
   1b3fa:	e7e0      	b.n	1b3be <bt_gatt_change_aware+0xc>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b3fc:	2102      	movs	r1, #2
   1b3fe:	e7f9      	b.n	1b3f4 <bt_gatt_change_aware+0x42>

0001b400 <bt_smp_recv>:
{
   1b400:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   1b402:	2100      	movs	r1, #0
   1b404:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b408:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	struct bt_conn *conn = chan->conn;
   1b40c:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   1b40e:	4608      	mov	r0, r1
   1b410:	f7ff f95f 	bl	1a6d2 <bt_l2cap_create_pdu_timeout>
   1b414:	f100 0608 	add.w	r6, r0, #8
   1b418:	4604      	mov	r4, r0
   1b41a:	2101      	movs	r1, #1
   1b41c:	4630      	mov	r0, r6
   1b41e:	f001 ff4e 	bl	1d2be <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   1b422:	2505      	movs	r5, #5
   1b424:	7005      	strb	r5, [r0, #0]
   1b426:	2101      	movs	r1, #1
   1b428:	4630      	mov	r0, r6
   1b42a:	f001 ff48 	bl	1d2be <net_buf_simple_add>
   1b42e:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   1b430:	7005      	strb	r5, [r0, #0]
   1b432:	4622      	mov	r2, r4
   1b434:	9300      	str	r3, [sp, #0]
   1b436:	2106      	movs	r1, #6
   1b438:	4638      	mov	r0, r7
   1b43a:	f7ff f94d 	bl	1a6d8 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   1b43e:	b110      	cbz	r0, 1b446 <bt_smp_recv+0x46>
		net_buf_unref(buf);
   1b440:	4620      	mov	r0, r4
   1b442:	f7fa f98b 	bl	1575c <net_buf_unref>
}
   1b446:	2000      	movs	r0, #0
   1b448:	b003      	add	sp, #12
   1b44a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001b44c <bt_smp_sign>:
   1b44c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1b450:	4770      	bx	lr

0001b452 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   1b452:	2000      	movs	r0, #0
   1b454:	4770      	bx	lr

0001b456 <model_start>:
	if (mod->cb && mod->cb->start) {
   1b456:	6983      	ldr	r3, [r0, #24]
   1b458:	b113      	cbz	r3, 1b460 <model_start+0xa>
   1b45a:	685b      	ldr	r3, [r3, #4]
   1b45c:	b103      	cbz	r3, 1b460 <model_start+0xa>
		mod->cb->start(mod);
   1b45e:	4718      	bx	r3
}
   1b460:	4770      	bx	lr

0001b462 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b462:	f3bf 8f5b 	dmb	ish
   1b466:	6800      	ldr	r0, [r0, #0]
   1b468:	f3bf 8f5b 	dmb	ish
}
   1b46c:	4770      	bx	lr

0001b46e <bt_mesh_friend_get>:
}
   1b46e:	2002      	movs	r0, #2
   1b470:	4770      	bx	lr

0001b472 <bt_mesh_fixed_group_match>:
{
   1b472:	b508      	push	{r3, lr}
	switch (addr) {
   1b474:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   1b478:	4298      	cmp	r0, r3
   1b47a:	d00d      	beq.n	1b498 <bt_mesh_fixed_group_match+0x26>
   1b47c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1b480:	4298      	cmp	r0, r3
   1b482:	d00c      	beq.n	1b49e <bt_mesh_fixed_group_match+0x2c>
   1b484:	f64f 73fc 	movw	r3, #65532	; 0xfffc
   1b488:	4298      	cmp	r0, r3
   1b48a:	d10a      	bne.n	1b4a2 <bt_mesh_fixed_group_match+0x30>
		return (bt_mesh_gatt_proxy_get() == BT_MESH_FEATURE_ENABLED);
   1b48c:	f7ee f8fe 	bl	968c <bt_mesh_gatt_proxy_get>
		return (bt_mesh_relay_get() == BT_MESH_FEATURE_ENABLED);
   1b490:	1e43      	subs	r3, r0, #1
   1b492:	4258      	negs	r0, r3
   1b494:	4158      	adcs	r0, r3
}
   1b496:	bd08      	pop	{r3, pc}
		return (bt_mesh_relay_get() == BT_MESH_FEATURE_ENABLED);
   1b498:	f7ee f9be 	bl	9818 <bt_mesh_relay_get>
   1b49c:	e7f8      	b.n	1b490 <bt_mesh_fixed_group_match+0x1e>
		return true;
   1b49e:	2001      	movs	r0, #1
   1b4a0:	e7f9      	b.n	1b496 <bt_mesh_fixed_group_match+0x24>
	switch (addr) {
   1b4a2:	2000      	movs	r0, #0
   1b4a4:	e7f7      	b.n	1b496 <bt_mesh_fixed_group_match+0x24>

0001b4a6 <cache_check>:
{
   1b4a6:	b508      	push	{r3, lr}
	return !memcmp(sub->beacon_cache, beacon_data, 21);
   1b4a8:	2215      	movs	r2, #21
   1b4aa:	3006      	adds	r0, #6
   1b4ac:	f7fe fb6a 	bl	19b84 <memcmp>
}
   1b4b0:	fab0 f080 	clz	r0, r0
   1b4b4:	0940      	lsrs	r0, r0, #5
   1b4b6:	bd08      	pop	{r3, pc}

0001b4b8 <subnet_evt>:
	if (evt != BT_MESH_KEY_DELETED) {
   1b4b8:	2901      	cmp	r1, #1
   1b4ba:	d001      	beq.n	1b4c0 <subnet_evt+0x8>
		bt_mesh_beacon_update(sub);
   1b4bc:	f7ee bb1a 	b.w	9af4 <bt_mesh_beacon_update>
}
   1b4c0:	4770      	bx	lr

0001b4c2 <subnet_beacon_enable>:
	sub->beacons_last = 0U;
   1b4c2:	2200      	movs	r2, #0
   1b4c4:	8082      	strh	r2, [r0, #4]
	bt_mesh_beacon_update(sub);
   1b4c6:	f7ee bb15 	b.w	9af4 <bt_mesh_beacon_update>

0001b4ca <sys_get_be24>:
	return ((uint16_t)src[0] << 8) | src[1];
   1b4ca:	7842      	ldrb	r2, [r0, #1]
   1b4cc:	7883      	ldrb	r3, [r0, #2]
	return ((uint32_t)src[0] << 16) | sys_get_be16(&src[1]);
   1b4ce:	7800      	ldrb	r0, [r0, #0]
   1b4d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
}
   1b4d4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   1b4d8:	4770      	bx	lr

0001b4da <send_cb_finalize>:
void bt_mesh_net_clear(void);
void bt_mesh_net_settings_commit(void);

static inline void send_cb_finalize(const struct bt_mesh_send_cb *cb,
				    void *cb_data)
{
   1b4da:	b570      	push	{r4, r5, r6, lr}
   1b4dc:	460d      	mov	r5, r1
	if (!cb) {
   1b4de:	4604      	mov	r4, r0
   1b4e0:	b160      	cbz	r0, 1b4fc <send_cb_finalize+0x22>
		return;
	}

	if (cb->start) {
   1b4e2:	6803      	ldr	r3, [r0, #0]
   1b4e4:	b11b      	cbz	r3, 1b4ee <send_cb_finalize+0x14>
		cb->start(0, 0, cb_data);
   1b4e6:	460a      	mov	r2, r1
   1b4e8:	2100      	movs	r1, #0
   1b4ea:	4608      	mov	r0, r1
   1b4ec:	4798      	blx	r3
	}

	if (cb->end) {
   1b4ee:	6863      	ldr	r3, [r4, #4]
   1b4f0:	b123      	cbz	r3, 1b4fc <send_cb_finalize+0x22>
		cb->end(0, cb_data);
   1b4f2:	4629      	mov	r1, r5
   1b4f4:	2000      	movs	r0, #0
	}
}
   1b4f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb->end(0, cb_data);
   1b4fa:	4718      	bx	r3
}
   1b4fc:	bd70      	pop	{r4, r5, r6, pc}

0001b4fe <net_encrypt>:
{
   1b4fe:	b570      	push	{r4, r5, r6, lr}
   1b500:	460d      	mov	r5, r1
   1b502:	4604      	mov	r4, r0
	err = bt_mesh_net_encrypt(cred->enc, buf, iv_index, proxy);
   1b504:	4601      	mov	r1, r0
   1b506:	1c68      	adds	r0, r5, #1
{
   1b508:	4616      	mov	r6, r2
	err = bt_mesh_net_encrypt(cred->enc, buf, iv_index, proxy);
   1b50a:	f000 fa6a 	bl	1b9e2 <bt_mesh_net_encrypt>
	if (err) {
   1b50e:	b938      	cbnz	r0, 1b520 <net_encrypt+0x22>
	return bt_mesh_net_obfuscate(buf->data, iv_index, cred->privacy);
   1b510:	6820      	ldr	r0, [r4, #0]
   1b512:	f105 0211 	add.w	r2, r5, #17
   1b516:	4631      	mov	r1, r6
}
   1b518:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_mesh_net_obfuscate(buf->data, iv_index, cred->privacy);
   1b51c:	f7f1 b9ba 	b.w	c894 <bt_mesh_net_obfuscate>
}
   1b520:	bd70      	pop	{r4, r5, r6, pc}

0001b522 <bt_mesh_subnet_store>:
	update_subnet_settings(net_idx, true);
   1b522:	2101      	movs	r1, #1
   1b524:	f7ef bac6 	b.w	aab4 <update_subnet_settings>

0001b528 <key_refresh>:
{
   1b528:	b538      	push	{r3, r4, r5, lr}
   1b52a:	4604      	mov	r4, r0
   1b52c:	2903      	cmp	r1, #3
   1b52e:	d809      	bhi.n	1b544 <key_refresh+0x1c>
   1b530:	e8df f001 	tbb	[pc, r1]
   1b534:	110d0213 	.word	0x110d0213
		sub->kr_phase = new_phase;
   1b538:	2301      	movs	r3, #1
   1b53a:	7783      	strb	r3, [r0, #30]
		subnet_evt(sub, BT_MESH_KEY_UPDATED);
   1b53c:	2102      	movs	r1, #2
		subnet_evt(sub, BT_MESH_KEY_REVOKED);
   1b53e:	4620      	mov	r0, r4
   1b540:	f7ef f98c 	bl	a85c <subnet_evt>
		bt_mesh_subnet_store(sub->net_idx);
   1b544:	8ba0      	ldrh	r0, [r4, #28]
}
   1b546:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_mesh_subnet_store(sub->net_idx);
   1b54a:	f7ff bfea 	b.w	1b522 <bt_mesh_subnet_store>
		sub->kr_phase = new_phase;
   1b54e:	2302      	movs	r3, #2
   1b550:	7783      	strb	r3, [r0, #30]
		subnet_evt(sub, BT_MESH_KEY_SWAPPED);
   1b552:	2103      	movs	r1, #3
   1b554:	e7f3      	b.n	1b53e <key_refresh+0x16>
		if (sub->kr_phase == BT_MESH_KR_NORMAL) {
   1b556:	7f83      	ldrb	r3, [r0, #30]
   1b558:	b163      	cbz	r3, 1b574 <key_refresh+0x4c>
		sub->kr_phase = BT_MESH_KR_NORMAL;
   1b55a:	2500      	movs	r5, #0
		memcpy(&sub->keys[0], &sub->keys[1], sizeof(sub->keys[0]));
   1b55c:	f104 0186 	add.w	r1, r4, #134	; 0x86
		sub->kr_phase = BT_MESH_KR_NORMAL;
   1b560:	77a5      	strb	r5, [r4, #30]
		memcpy(&sub->keys[0], &sub->keys[1], sizeof(sub->keys[0]));
   1b562:	225a      	movs	r2, #90	; 0x5a
   1b564:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1b568:	f7fe fb1c 	bl	19ba4 <memcpy>
		sub->keys[1].valid = 0U;
   1b56c:	f884 5086 	strb.w	r5, [r4, #134]	; 0x86
		subnet_evt(sub, BT_MESH_KEY_REVOKED);
   1b570:	2104      	movs	r1, #4
   1b572:	e7e4      	b.n	1b53e <key_refresh+0x16>
}
   1b574:	bd38      	pop	{r3, r4, r5, pc}

0001b576 <bt_mesh_kr_update>:
	if (!new_key) {
   1b576:	b16a      	cbz	r2, 1b594 <bt_mesh_kr_update+0x1e>
	if (sub->kr_phase == BT_MESH_KR_PHASE_1) {
   1b578:	7f83      	ldrb	r3, [r0, #30]
   1b57a:	2b01      	cmp	r3, #1
   1b57c:	d105      	bne.n	1b58a <bt_mesh_kr_update+0x14>
		key_refresh(sub, (kr_flag ? BT_MESH_KR_PHASE_2 :
   1b57e:	2900      	cmp	r1, #0
   1b580:	bf14      	ite	ne
   1b582:	2102      	movne	r1, #2
   1b584:	2103      	moveq	r1, #3
		key_refresh(sub, BT_MESH_KR_PHASE_3);
   1b586:	f7ff bfcf 	b.w	1b528 <key_refresh>
	} else if (sub->kr_phase == BT_MESH_KR_PHASE_2 && !kr_flag) {
   1b58a:	2b02      	cmp	r3, #2
   1b58c:	d102      	bne.n	1b594 <bt_mesh_kr_update+0x1e>
   1b58e:	b909      	cbnz	r1, 1b594 <bt_mesh_kr_update+0x1e>
		key_refresh(sub, BT_MESH_KR_PHASE_3);
   1b590:	2103      	movs	r1, #3
   1b592:	e7f8      	b.n	1b586 <bt_mesh_kr_update+0x10>
}
   1b594:	4770      	bx	lr

0001b596 <bt_mesh_subnet_set>:
{
   1b596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b59a:	4606      	mov	r6, r0
   1b59c:	4688      	mov	r8, r1
   1b59e:	4617      	mov	r7, r2
   1b5a0:	461d      	mov	r5, r3
	sub = subnet_alloc(net_idx);
   1b5a2:	f7ef f96d 	bl	a880 <subnet_alloc>
	if (!sub) {
   1b5a6:	4604      	mov	r4, r0
   1b5a8:	b300      	cbz	r0, 1b5ec <bt_mesh_subnet_set+0x56>
	if (sub->net_idx == net_idx) {
   1b5aa:	8b83      	ldrh	r3, [r0, #28]
   1b5ac:	42b3      	cmp	r3, r6
   1b5ae:	d020      	beq.n	1b5f2 <bt_mesh_subnet_set+0x5c>
		if (!keys[i]) {
   1b5b0:	b957      	cbnz	r7, 1b5c8 <bt_mesh_subnet_set+0x32>
   1b5b2:	b99d      	cbnz	r5, 1b5dc <bt_mesh_subnet_set+0x46>
		sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
   1b5b4:	2500      	movs	r5, #0
	bt_mesh_beacon_update(sub);
   1b5b6:	4620      	mov	r0, r4
	sub->net_idx = net_idx;
   1b5b8:	83a6      	strh	r6, [r4, #28]
	sub->kr_phase = kr_phase;
   1b5ba:	f884 801e 	strb.w	r8, [r4, #30]
		sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
   1b5be:	77e5      	strb	r5, [r4, #31]
	bt_mesh_beacon_update(sub);
   1b5c0:	f7ee fa98 	bl	9af4 <bt_mesh_beacon_update>
	return 0;
   1b5c4:	4628      	mov	r0, r5
   1b5c6:	e007      	b.n	1b5d8 <bt_mesh_subnet_set+0x42>
		if (net_keys_create(&sub->keys[i], keys[i])) {
   1b5c8:	4639      	mov	r1, r7
   1b5ca:	302c      	adds	r0, #44	; 0x2c
   1b5cc:	f7ef f99a 	bl	a904 <net_keys_create>
   1b5d0:	2800      	cmp	r0, #0
   1b5d2:	d0ee      	beq.n	1b5b2 <bt_mesh_subnet_set+0x1c>
			return -EIO;
   1b5d4:	f06f 0004 	mvn.w	r0, #4
}
   1b5d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (net_keys_create(&sub->keys[i], keys[i])) {
   1b5dc:	4629      	mov	r1, r5
   1b5de:	f104 0086 	add.w	r0, r4, #134	; 0x86
   1b5e2:	f7ef f98f 	bl	a904 <net_keys_create>
   1b5e6:	2800      	cmp	r0, #0
   1b5e8:	d0e4      	beq.n	1b5b4 <bt_mesh_subnet_set+0x1e>
   1b5ea:	e7f3      	b.n	1b5d4 <bt_mesh_subnet_set+0x3e>
		return -ENOMEM;
   1b5ec:	f06f 000b 	mvn.w	r0, #11
   1b5f0:	e7f2      	b.n	1b5d8 <bt_mesh_subnet_set+0x42>
		return -EALREADY;
   1b5f2:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1b5f6:	e7ef      	b.n	1b5d8 <bt_mesh_subnet_set+0x42>

0001b5f8 <app_key_del>:
{
   1b5f8:	b510      	push	{r4, lr}
		update_app_key_settings(app->app_idx, false);
   1b5fa:	2100      	movs	r1, #0
{
   1b5fc:	4604      	mov	r4, r0
		update_app_key_settings(app->app_idx, false);
   1b5fe:	8840      	ldrh	r0, [r0, #2]
   1b600:	f7ef fc38 	bl	ae74 <update_app_key_settings>
	app_key_evt(app, BT_MESH_KEY_DELETED);
   1b604:	4620      	mov	r0, r4
   1b606:	2101      	movs	r1, #1
   1b608:	f7ef fb90 	bl	ad2c <app_key_evt>
	app->net_idx = BT_MESH_KEY_UNUSED;
   1b60c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1b610:	8023      	strh	r3, [r4, #0]
	app->app_idx = BT_MESH_KEY_UNUSED;
   1b612:	8063      	strh	r3, [r4, #2]
	(void)memset(app->keys, 0, sizeof(app->keys));
   1b614:	1d60      	adds	r0, r4, #5
   1b616:	2222      	movs	r2, #34	; 0x22
}
   1b618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)memset(app->keys, 0, sizeof(app->keys));
   1b61c:	2100      	movs	r1, #0
   1b61e:	f7fe baec 	b.w	19bfa <memset>

0001b622 <bt_mesh_app_key_set>:
{
   1b622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b626:	4607      	mov	r7, r0
   1b628:	4688      	mov	r8, r1
   1b62a:	4616      	mov	r6, r2
   1b62c:	461d      	mov	r5, r3
	app = app_key_alloc(app_idx);
   1b62e:	f7ef fb91 	bl	ad54 <app_key_alloc>
	if (!app) {
   1b632:	4604      	mov	r4, r0
   1b634:	b348      	cbz	r0, 1b68a <bt_mesh_app_key_set+0x68>
	if (app->app_idx == app_idx) {
   1b636:	8843      	ldrh	r3, [r0, #2]
   1b638:	42bb      	cmp	r3, r7
   1b63a:	d029      	beq.n	1b690 <bt_mesh_app_key_set+0x6e>
	memcpy(app->keys[0].val, old_key, 16);
   1b63c:	4631      	mov	r1, r6
   1b63e:	2210      	movs	r2, #16
   1b640:	3006      	adds	r0, #6
   1b642:	f7fe faaf 	bl	19ba4 <memcpy>
			const uint8_t net_id[16], uint32_t iv_index,
			uint8_t auth[8]);

static inline int bt_mesh_app_id(const uint8_t app_key[16], uint8_t app_id[1])
{
	return bt_mesh_k4(app_key, app_id);
   1b646:	4630      	mov	r0, r6
   1b648:	1d61      	adds	r1, r4, #5
   1b64a:	f7f1 f8e5 	bl	c818 <bt_mesh_k4>
	if (bt_mesh_app_id(old_key, &app->keys[0].id)) {
   1b64e:	4606      	mov	r6, r0
   1b650:	b120      	cbz	r0, 1b65c <bt_mesh_app_key_set+0x3a>
		return -EIO;
   1b652:	f06f 0604 	mvn.w	r6, #4
}
   1b656:	4630      	mov	r0, r6
   1b658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (new_key) {
   1b65c:	b93d      	cbnz	r5, 1b66e <bt_mesh_app_key_set+0x4c>
	app->updated = !!new_key;
   1b65e:	3d00      	subs	r5, #0
   1b660:	bf18      	it	ne
   1b662:	2501      	movne	r5, #1
	app->net_idx = net_idx;
   1b664:	f8a4 8000 	strh.w	r8, [r4]
	app->app_idx = app_idx;
   1b668:	8067      	strh	r7, [r4, #2]
	app->updated = !!new_key;
   1b66a:	7125      	strb	r5, [r4, #4]
	return 0;
   1b66c:	e7f3      	b.n	1b656 <bt_mesh_app_key_set+0x34>
		memcpy(app->keys[1].val, new_key, 16);
   1b66e:	4629      	mov	r1, r5
   1b670:	2210      	movs	r2, #16
   1b672:	f104 0017 	add.w	r0, r4, #23
   1b676:	f7fe fa95 	bl	19ba4 <memcpy>
   1b67a:	f104 0116 	add.w	r1, r4, #22
   1b67e:	4628      	mov	r0, r5
   1b680:	f7f1 f8ca 	bl	c818 <bt_mesh_k4>
		if (bt_mesh_app_id(new_key, &app->keys[1].id)) {
   1b684:	2800      	cmp	r0, #0
   1b686:	d0ea      	beq.n	1b65e <bt_mesh_app_key_set+0x3c>
   1b688:	e7e3      	b.n	1b652 <bt_mesh_app_key_set+0x30>
		return -ENOMEM;
   1b68a:	f06f 060b 	mvn.w	r6, #11
   1b68e:	e7e2      	b.n	1b656 <bt_mesh_app_key_set+0x34>
		return 0;
   1b690:	2600      	movs	r6, #0
   1b692:	e7e0      	b.n	1b656 <bt_mesh_app_key_set+0x34>

0001b694 <ack_timeout>:
{
   1b694:	b538      	push	{r3, r4, r5, lr}
	if (rx->ttl == BT_MESH_TTL_DEFAULT) {
   1b696:	f890 4020 	ldrb.w	r4, [r0, #32]
   1b69a:	2cff      	cmp	r4, #255	; 0xff
{
   1b69c:	4605      	mov	r5, r0
	if (rx->ttl == BT_MESH_TTL_DEFAULT) {
   1b69e:	d102      	bne.n	1b6a6 <ack_timeout+0x12>
		ttl = bt_mesh_default_ttl_get();
   1b6a0:	f7ee f81c 	bl	96dc <bt_mesh_default_ttl_get>
   1b6a4:	4604      	mov	r4, r0
	to += ((rx->seg_n + 1) - popcount(rx->block)) * 100U;
   1b6a6:	6a68      	ldr	r0, [r5, #36]	; 0x24
   1b6a8:	f7e4 fd32 	bl	110 <__popcountsi2>
   1b6ac:	7feb      	ldrb	r3, [r5, #31]
   1b6ae:	f003 031f 	and.w	r3, r3, #31
   1b6b2:	1a18      	subs	r0, r3, r0
   1b6b4:	2364      	movs	r3, #100	; 0x64
   1b6b6:	fb00 3303 	mla	r3, r0, r3, r3
	to = 150 + (ttl * 50U);
   1b6ba:	2296      	movs	r2, #150	; 0x96
   1b6bc:	2032      	movs	r0, #50	; 0x32
   1b6be:	fb10 2004 	smlabb	r0, r0, r4, r2
	to += ((rx->seg_n + 1) - popcount(rx->block)) * 100U;
   1b6c2:	4418      	add	r0, r3
}
   1b6c4:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
   1b6c8:	bfb8      	it	lt
   1b6ca:	f44f 70c8 	movlt.w	r0, #400	; 0x190
   1b6ce:	bd38      	pop	{r3, r4, r5, pc}

0001b6d0 <schedule_retransmit>:
{
   1b6d0:	b570      	push	{r4, r5, r6, lr}
	if (!tx->nack_count) {
   1b6d2:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
   1b6d6:	2b00      	cmp	r3, #0
   1b6d8:	d039      	beq.n	1b74e <schedule_retransmit+0x7e>
	if (--tx->seg_pending || tx->sending) {
   1b6da:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   1b6de:	3b01      	subs	r3, #1
   1b6e0:	b2db      	uxtb	r3, r3
   1b6e2:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
   1b6e6:	bb93      	cbnz	r3, 1b74e <schedule_retransmit+0x7e>
   1b6e8:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
   1b6ec:	06db      	lsls	r3, r3, #27
   1b6ee:	d42e      	bmi.n	1b74e <schedule_retransmit+0x7e>
	k_work_reschedule(&tx->retransmit,
   1b6f0:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
   1b6f4:	f100 0440 	add.w	r4, r0, #64	; 0x40
   1b6f8:	b133      	cbz	r3, 1b708 <schedule_retransmit+0x38>
   1b6fa:	2200      	movs	r2, #0
   1b6fc:	4613      	mov	r3, r2
   1b6fe:	4620      	mov	r0, r4
}
   1b700:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&tx->retransmit,
   1b704:	f7fc b876 	b.w	177f4 <k_work_reschedule>
			  K_MSEC(SEG_RETRANSMIT_TIMEOUT(tx)));
   1b708:	f9b0 302a 	ldrsh.w	r3, [r0, #42]	; 0x2a
   1b70c:	2b00      	cmp	r3, #0
   1b70e:	bfc1      	itttt	gt
   1b710:	f890 1034 	ldrbgt.w	r1, [r0, #52]	; 0x34
   1b714:	2232      	movgt	r2, #50	; 0x32
   1b716:	f44f 73c8 	movgt.w	r3, #400	; 0x190
   1b71a:	fb12 3201 	smlabbgt	r2, r2, r1, r3
   1b71e:	bfce      	itee	gt
   1b720:	17d3      	asrgt	r3, r2, #31
   1b722:	2232      	movle	r2, #50	; 0x32
   1b724:	2300      	movle	r3, #0
   1b726:	03d9      	lsls	r1, r3, #15
   1b728:	03d0      	lsls	r0, r2, #15
   1b72a:	f240 35e7 	movw	r5, #999	; 0x3e7
   1b72e:	1940      	adds	r0, r0, r5
   1b730:	ea41 4152 	orr.w	r1, r1, r2, lsr #17
   1b734:	f04f 0500 	mov.w	r5, #0
   1b738:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b73c:	f04f 0300 	mov.w	r3, #0
   1b740:	eb45 0101 	adc.w	r1, r5, r1
   1b744:	f7e4 fccc 	bl	e0 <__aeabi_uldivmod>
   1b748:	4602      	mov	r2, r0
   1b74a:	460b      	mov	r3, r1
   1b74c:	e7d7      	b.n	1b6fe <schedule_retransmit+0x2e>
}
   1b74e:	bd70      	pop	{r4, r5, r6, pc}

0001b750 <seg_sent>:
	schedule_retransmit(tx);
   1b750:	4608      	mov	r0, r1
   1b752:	f7ff bfbd 	b.w	1b6d0 <schedule_retransmit>

0001b756 <seg_send_start>:
{
   1b756:	b538      	push	{r3, r4, r5, lr}
	if (!tx->started && tx->cb && tx->cb->start) {
   1b758:	f892 3036 	ldrb.w	r3, [r2, #54]	; 0x36
   1b75c:	071b      	lsls	r3, r3, #28
{
   1b75e:	460d      	mov	r5, r1
   1b760:	4614      	mov	r4, r2
	if (!tx->started && tx->cb && tx->cb->start) {
   1b762:	d40b      	bmi.n	1b77c <seg_send_start+0x26>
   1b764:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1b766:	b14b      	cbz	r3, 1b77c <seg_send_start+0x26>
   1b768:	681b      	ldr	r3, [r3, #0]
   1b76a:	b13b      	cbz	r3, 1b77c <seg_send_start+0x26>
		tx->cb->start(duration, err, tx->cb_data);
   1b76c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
   1b76e:	4798      	blx	r3
		tx->started = 1U;
   1b770:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
   1b774:	f043 0308 	orr.w	r3, r3, #8
   1b778:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	if (err) {
   1b77c:	b125      	cbz	r5, 1b788 <seg_send_start+0x32>
		schedule_retransmit(tx);
   1b77e:	4620      	mov	r0, r4
}
   1b780:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		schedule_retransmit(tx);
   1b784:	f7ff bfa4 	b.w	1b6d0 <schedule_retransmit>
}
   1b788:	bd38      	pop	{r3, r4, r5, pc}

0001b78a <seg_rx_assemble>:
{
   1b78a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf->data = buf->__buf;
   1b78e:	688b      	ldr	r3, [r1, #8]
   1b790:	600b      	str	r3, [r1, #0]
	buf->len  = 0U;
   1b792:	2500      	movs	r5, #0
   1b794:	4606      	mov	r6, r0
   1b796:	460c      	mov	r4, r1
   1b798:	4617      	mov	r7, r2
   1b79a:	808d      	strh	r5, [r1, #4]
	for (i = 0; i <= rx->seg_n; i++) {
   1b79c:	f100 0804 	add.w	r8, r0, #4
				       MIN(seg_len(rx->ctl),
   1b7a0:	7ff3      	ldrb	r3, [r6, #31]
		net_buf_simple_add_mem(buf, rx->seg[i],
   1b7a2:	f858 1b04 	ldr.w	r1, [r8], #4
		return BT_MESH_APP_SEG_SDU_MAX;
   1b7a6:	f013 0f20 	tst.w	r3, #32
				       MIN(seg_len(rx->ctl),
   1b7aa:	8bb3      	ldrh	r3, [r6, #28]
		return BT_MESH_APP_SEG_SDU_MAX;
   1b7ac:	bf14      	ite	ne
   1b7ae:	2208      	movne	r2, #8
   1b7b0:	220c      	moveq	r2, #12
				       MIN(seg_len(rx->ctl),
   1b7b2:	fb05 3312 	mls	r3, r5, r2, r3
		net_buf_simple_add_mem(buf, rx->seg[i],
   1b7b6:	429a      	cmp	r2, r3
   1b7b8:	bfa8      	it	ge
   1b7ba:	461a      	movge	r2, r3
   1b7bc:	4620      	mov	r0, r4
   1b7be:	f001 fd84 	bl	1d2ca <net_buf_simple_add_mem>
	for (i = 0; i <= rx->seg_n; i++) {
   1b7c2:	7ff3      	ldrb	r3, [r6, #31]
   1b7c4:	3501      	adds	r5, #1
   1b7c6:	461a      	mov	r2, r3
   1b7c8:	f003 031f 	and.w	r3, r3, #31
   1b7cc:	42ab      	cmp	r3, r5
   1b7ce:	dae7      	bge.n	1b7a0 <seg_rx_assemble+0x16>
	if (!rx->ctl) {
   1b7d0:	0693      	lsls	r3, r2, #26
   1b7d2:	d407      	bmi.n	1b7e4 <seg_rx_assemble+0x5a>
		buf->len -= APP_MIC_LEN(aszmic);
   1b7d4:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
   1b7d8:	2f00      	cmp	r7, #0
   1b7da:	bf14      	ite	ne
   1b7dc:	2208      	movne	r2, #8
   1b7de:	2204      	moveq	r2, #4
   1b7e0:	1a9b      	subs	r3, r3, r2
   1b7e2:	80a3      	strh	r3, [r4, #4]
}
   1b7e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b7e8 <sdu_try_decrypt>:
	if (ctx->seg) {
   1b7e8:	69d0      	ldr	r0, [r2, #28]
{
   1b7ea:	b570      	push	{r4, r5, r6, lr}
   1b7ec:	460d      	mov	r5, r1
   1b7ee:	4614      	mov	r4, r2
	if (ctx->seg) {
   1b7f0:	b118      	cbz	r0, 1b7fa <sdu_try_decrypt+0x12>
		seg_rx_assemble(ctx->seg, ctx->buf, ctx->crypto.aszmic);
   1b7f2:	7852      	ldrb	r2, [r2, #1]
   1b7f4:	6961      	ldr	r1, [r4, #20]
   1b7f6:	f7ff ffc8 	bl	1b78a <seg_rx_assemble>
	net_buf_simple_reset(ctx->sdu);
   1b7fa:	69a3      	ldr	r3, [r4, #24]
   1b7fc:	2200      	movs	r2, #0
   1b7fe:	809a      	strh	r2, [r3, #4]
	buf->data = buf->__buf;
   1b800:	689a      	ldr	r2, [r3, #8]
   1b802:	601a      	str	r2, [r3, #0]
	return bt_mesh_app_decrypt(key, &ctx->crypto, ctx->buf, ctx->sdu);
   1b804:	4621      	mov	r1, r4
   1b806:	6962      	ldr	r2, [r4, #20]
   1b808:	4628      	mov	r0, r5
}
   1b80a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_mesh_app_decrypt(key, &ctx->crypto, ctx->buf, ctx->sdu);
   1b80e:	f000 b98c 	b.w	1bb2a <bt_mesh_app_decrypt>

0001b812 <send_ack>:
{
   1b812:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b814:	b08b      	sub	sp, #44	; 0x2c
	struct bt_mesh_msg_ctx ctx = {
   1b816:	8b87      	ldrh	r7, [r0, #28]
{
   1b818:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
	struct bt_mesh_msg_ctx ctx = {
   1b81c:	f8ad 7010 	strh.w	r7, [sp, #16]
{
   1b820:	460d      	mov	r5, r1
	struct bt_mesh_msg_ctx ctx = {
   1b822:	f64f 77ff 	movw	r7, #65535	; 0xffff
   1b826:	2100      	movs	r1, #0
   1b828:	f88d 301b 	strb.w	r3, [sp, #27]
	struct bt_mesh_net_tx tx = {
   1b82c:	ab04      	add	r3, sp, #16
{
   1b82e:	9e11      	ldr	r6, [sp, #68]	; 0x44
	struct bt_mesh_msg_ctx ctx = {
   1b830:	f8cd 1016 	str.w	r1, [sp, #22]
   1b834:	f88d 101a 	strb.w	r1, [sp, #26]
   1b838:	f8ad 7012 	strh.w	r7, [sp, #18]
   1b83c:	f8ad 2014 	strh.w	r2, [sp, #20]
	struct bt_mesh_net_tx tx = {
   1b840:	9109      	str	r1, [sp, #36]	; 0x24
   1b842:	9007      	str	r0, [sp, #28]
   1b844:	9308      	str	r3, [sp, #32]
   1b846:	b33c      	cbz	r4, 1b898 <send_ack+0x86>
		.src = obo ? bt_mesh_primary_addr() : src,
   1b848:	f7f1 fa46 	bl	ccd8 <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
   1b84c:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
		.xmit = bt_mesh_net_transmit_get(),
   1b850:	f7ed ff60 	bl	9714 <bt_mesh_net_transmit_get>
	if (!BT_MESH_ADDR_IS_UNICAST(src)) {
   1b854:	b22d      	sxth	r5, r5
   1b856:	2d00      	cmp	r5, #0
	struct bt_mesh_net_tx tx = {
   1b858:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
	if (!BT_MESH_ADDR_IS_UNICAST(src)) {
   1b85c:	dd1e      	ble.n	1b89c <send_ack+0x8a>
	uint16_t seq_zero = *seq_auth & TRANS_SEQ_ZERO_MASK;
   1b85e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1b860:	881b      	ldrh	r3, [r3, #0]
	sys_put_be16(((seq_zero << 2) & 0x7ffc) | (obo << 15), buf);
   1b862:	03e4      	lsls	r4, r4, #15
   1b864:	f3c3 030c 	ubfx	r3, r3, #0, #13
   1b868:	ea44 0483 	orr.w	r4, r4, r3, lsl #2
	sys_put_be16(val >> 16, dst);
   1b86c:	0c33      	lsrs	r3, r6, #16
	dst[0] = val >> 8;
   1b86e:	0e32      	lsrs	r2, r6, #24
	dst[1] = val;
   1b870:	f88d 300b 	strb.w	r3, [sp, #11]
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_ACK, buf, sizeof(buf),
   1b874:	2100      	movs	r1, #0
	dst[0] = val >> 8;
   1b876:	ba73      	rev16	r3, r6
   1b878:	ba64      	rev16	r4, r4
   1b87a:	f88d 200a 	strb.w	r2, [sp, #10]
   1b87e:	f8ad 300c 	strh.w	r3, [sp, #12]
   1b882:	e9cd 1100 	strd	r1, r1, [sp]
   1b886:	2306      	movs	r3, #6
   1b888:	aa02      	add	r2, sp, #8
   1b88a:	a807      	add	r0, sp, #28
   1b88c:	f8ad 4008 	strh.w	r4, [sp, #8]
   1b890:	f7f0 f864 	bl	b95c <bt_mesh_ctl_send>
}
   1b894:	b00b      	add	sp, #44	; 0x2c
   1b896:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct bt_mesh_net_tx tx = {
   1b898:	4628      	mov	r0, r5
   1b89a:	e7d7      	b.n	1b84c <send_ack+0x3a>
		return 0;
   1b89c:	2000      	movs	r0, #0
   1b89e:	e7f9      	b.n	1b894 <send_ack+0x82>

0001b8a0 <bt_mesh_rpl_update>:
	if (rpl->old_iv && !rx->old_iv) {
   1b8a0:	f990 3001 	ldrsb.w	r3, [r0, #1]
   1b8a4:	2b00      	cmp	r3, #0
   1b8a6:	da07      	bge.n	1b8b8 <bt_mesh_rpl_update+0x18>
   1b8a8:	7d0b      	ldrb	r3, [r1, #20]
   1b8aa:	f013 0301 	ands.w	r3, r3, #1
		rpl->seg = 0;
   1b8ae:	bf02      	ittt	eq
   1b8b0:	6842      	ldreq	r2, [r0, #4]
   1b8b2:	f363 221f 	bfieq	r2, r3, #8, #24
   1b8b6:	6042      	streq	r2, [r0, #4]
	rpl->seq = rx->seq;
   1b8b8:	8a0a      	ldrh	r2, [r1, #16]
	rpl->src = rx->ctx.addr;
   1b8ba:	890b      	ldrh	r3, [r1, #8]
	rpl->seq = rx->seq;
   1b8bc:	8042      	strh	r2, [r0, #2]
   1b8be:	7c8a      	ldrb	r2, [r1, #18]
   1b8c0:	7102      	strb	r2, [r0, #4]
	rpl->old_iv = rx->old_iv;
   1b8c2:	7d0a      	ldrb	r2, [r1, #20]
	rpl->src = rx->ctx.addr;
   1b8c4:	f3c3 030e 	ubfx	r3, r3, #0, #15
   1b8c8:	f002 0201 	and.w	r2, r2, #1
   1b8cc:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
   1b8d0:	8003      	strh	r3, [r0, #0]
		schedule_rpl_store(rpl, false);
   1b8d2:	f7f0 bce5 	b.w	c2a0 <schedule_rpl_store.isra.0>

0001b8d6 <bt_mesh_rpl_clear>:
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_RPL_PENDING);
   1b8d6:	2000      	movs	r0, #0
   1b8d8:	f7f1 bb9c 	b.w	d014 <bt_mesh_settings_store_schedule>

0001b8dc <sys_put_be32>:
	sys_put_be16(val >> 16, dst);
   1b8dc:	0c03      	lsrs	r3, r0, #16
	dst[0] = val >> 8;
   1b8de:	0e02      	lsrs	r2, r0, #24
	dst[1] = val;
   1b8e0:	704b      	strb	r3, [r1, #1]
	dst[0] = val >> 8;
   1b8e2:	f3c0 2307 	ubfx	r3, r0, #8, #8
   1b8e6:	700a      	strb	r2, [r1, #0]
   1b8e8:	708b      	strb	r3, [r1, #2]
	dst[1] = val;
   1b8ea:	70c8      	strb	r0, [r1, #3]
}
   1b8ec:	4770      	bx	lr

0001b8ee <create_app_nonce>:
{
   1b8ee:	b538      	push	{r3, r4, r5, lr}
	if (ctx->dev_key) {
   1b8f0:	780b      	ldrb	r3, [r1, #0]
{
   1b8f2:	460c      	mov	r4, r1
	if (ctx->dev_key) {
   1b8f4:	2b00      	cmp	r3, #0
   1b8f6:	4601      	mov	r1, r0
		nonce[0] = 0x01;
   1b8f8:	bf14      	ite	ne
   1b8fa:	2302      	movne	r3, #2
   1b8fc:	2301      	moveq	r3, #1
   1b8fe:	f801 3b01 	strb.w	r3, [r1], #1
{
   1b902:	4605      	mov	r5, r0
	sys_put_be32((ctx->seq_num | ((uint32_t)ctx->aszmic << 31)), &nonce[1]);
   1b904:	68a3      	ldr	r3, [r4, #8]
   1b906:	7860      	ldrb	r0, [r4, #1]
   1b908:	ea43 70c0 	orr.w	r0, r3, r0, lsl #31
   1b90c:	f7ff ffe6 	bl	1b8dc <sys_put_be32>
	sys_put_be16(ctx->src, &nonce[5]);
   1b910:	8863      	ldrh	r3, [r4, #2]
	dst[1] = val;
   1b912:	71ab      	strb	r3, [r5, #6]
	dst[0] = val >> 8;
   1b914:	0a1a      	lsrs	r2, r3, #8
   1b916:	716a      	strb	r2, [r5, #5]
	sys_put_be16(ctx->dst, &nonce[7]);
   1b918:	88a3      	ldrh	r3, [r4, #4]
	dst[1] = val;
   1b91a:	722b      	strb	r3, [r5, #8]
	dst[0] = val >> 8;
   1b91c:	0a1a      	lsrs	r2, r3, #8
   1b91e:	71ea      	strb	r2, [r5, #7]
	sys_put_be32(ctx->iv_index, &nonce[9]);
   1b920:	68e0      	ldr	r0, [r4, #12]
   1b922:	f105 0109 	add.w	r1, r5, #9
}
   1b926:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	sys_put_be32(ctx->iv_index, &nonce[9]);
   1b92a:	f7ff bfd7 	b.w	1b8dc <sys_put_be32>

0001b92e <bt_mesh_aes_cmac>:
{
   1b92e:	b570      	push	{r4, r5, r6, lr}
   1b930:	b0c2      	sub	sp, #264	; 0x108
   1b932:	460d      	mov	r5, r1
   1b934:	4614      	mov	r4, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   1b936:	4601      	mov	r1, r0
   1b938:	aa16      	add	r2, sp, #88	; 0x58
   1b93a:	4668      	mov	r0, sp
{
   1b93c:	461e      	mov	r6, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   1b93e:	f7fd ff88 	bl	19852 <tc_cmac_setup>
   1b942:	b130      	cbz	r0, 1b952 <bt_mesh_aes_cmac+0x24>
   1b944:	3508      	adds	r5, #8
	for (; sg_len; sg_len--, sg++) {
   1b946:	b944      	cbnz	r4, 1b95a <bt_mesh_aes_cmac+0x2c>
	if (tc_cmac_final(mac, &state) == TC_CRYPTO_FAIL) {
   1b948:	4669      	mov	r1, sp
   1b94a:	4630      	mov	r0, r6
   1b94c:	f7fe f818 	bl	19980 <tc_cmac_final>
   1b950:	b968      	cbnz	r0, 1b96e <bt_mesh_aes_cmac+0x40>
		return -EIO;
   1b952:	f06f 0004 	mvn.w	r0, #4
}
   1b956:	b042      	add	sp, #264	; 0x108
   1b958:	bd70      	pop	{r4, r5, r6, pc}
		if (tc_cmac_update(&state, sg->data,
   1b95a:	e955 1202 	ldrd	r1, r2, [r5, #-8]
   1b95e:	4668      	mov	r0, sp
   1b960:	f7fd ffa2 	bl	198a8 <tc_cmac_update>
   1b964:	3508      	adds	r5, #8
   1b966:	2800      	cmp	r0, #0
   1b968:	d0f3      	beq.n	1b952 <bt_mesh_aes_cmac+0x24>
	for (; sg_len; sg_len--, sg++) {
   1b96a:	3c01      	subs	r4, #1
   1b96c:	e7eb      	b.n	1b946 <bt_mesh_aes_cmac+0x18>
	return 0;
   1b96e:	4620      	mov	r0, r4
   1b970:	e7f1      	b.n	1b956 <bt_mesh_aes_cmac+0x28>

0001b972 <bt_mesh_aes_cmac_one>:
{
   1b972:	b507      	push	{r0, r1, r2, lr}
	struct bt_mesh_sg sg = { m, len };
   1b974:	e9cd 1200 	strd	r1, r2, [sp]
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
   1b978:	2201      	movs	r2, #1
   1b97a:	4669      	mov	r1, sp
   1b97c:	f7ff ffd7 	bl	1b92e <bt_mesh_aes_cmac>
}
   1b980:	b003      	add	sp, #12
   1b982:	f85d fb04 	ldr.w	pc, [sp], #4

0001b986 <bt_mesh_s1>:
{
   1b986:	b530      	push	{r4, r5, lr}
	const uint8_t zero[16] = { 0 };
   1b988:	2200      	movs	r2, #0
{
   1b98a:	b085      	sub	sp, #20
   1b98c:	460d      	mov	r5, r1
	const uint8_t zero[16] = { 0 };
   1b98e:	e9cd 2200 	strd	r2, r2, [sp]
   1b992:	e9cd 2202 	strd	r2, r2, [sp, #8]
{
   1b996:	4604      	mov	r4, r0
	return bt_mesh_aes_cmac_one(zero, m, strlen(m), salt);
   1b998:	f7fe f8c9 	bl	19b2e <strlen>
   1b99c:	462b      	mov	r3, r5
   1b99e:	4602      	mov	r2, r0
   1b9a0:	4621      	mov	r1, r4
   1b9a2:	4668      	mov	r0, sp
   1b9a4:	f7ff ffe5 	bl	1b972 <bt_mesh_aes_cmac_one>
}
   1b9a8:	3800      	subs	r0, #0
   1b9aa:	bf18      	it	ne
   1b9ac:	2001      	movne	r0, #1
   1b9ae:	b005      	add	sp, #20
   1b9b0:	bd30      	pop	{r4, r5, pc}

0001b9b2 <bt_mesh_k1>:
{
   1b9b2:	b570      	push	{r4, r5, r6, lr}
   1b9b4:	9d04      	ldr	r5, [sp, #16]
   1b9b6:	4606      	mov	r6, r0
   1b9b8:	461c      	mov	r4, r3
   1b9ba:	4610      	mov	r0, r2
	err = bt_mesh_aes_cmac_one(salt, ikm, ikm_len, okm);
   1b9bc:	462b      	mov	r3, r5
   1b9be:	460a      	mov	r2, r1
   1b9c0:	4631      	mov	r1, r6
   1b9c2:	f7ff ffd6 	bl	1b972 <bt_mesh_aes_cmac_one>
	if (err < 0) {
   1b9c6:	2800      	cmp	r0, #0
   1b9c8:	db0a      	blt.n	1b9e0 <bt_mesh_k1+0x2e>
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
   1b9ca:	4620      	mov	r0, r4
   1b9cc:	f7fe f8af 	bl	19b2e <strlen>
   1b9d0:	462b      	mov	r3, r5
   1b9d2:	4602      	mov	r2, r0
   1b9d4:	4621      	mov	r1, r4
   1b9d6:	4628      	mov	r0, r5
}
   1b9d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
   1b9dc:	f7ff bfc9 	b.w	1b972 <bt_mesh_aes_cmac_one>
}
   1b9e0:	bd70      	pop	{r4, r5, r6, pc}

0001b9e2 <bt_mesh_net_encrypt>:
{
   1b9e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   1b9e6:	680c      	ldr	r4, [r1, #0]
{
   1b9e8:	4607      	mov	r7, r0
   1b9ea:	4610      	mov	r0, r2
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   1b9ec:	f994 2001 	ldrsb.w	r2, [r4, #1]
   1b9f0:	f894 9001 	ldrb.w	r9, [r4, #1]
   1b9f4:	f894 8002 	ldrb.w	r8, [r4, #2]
   1b9f8:	f894 e003 	ldrb.w	lr, [r4, #3]
   1b9fc:	f894 c004 	ldrb.w	ip, [r4, #4]
   1ba00:	2a00      	cmp	r2, #0
{
   1ba02:	460d      	mov	r5, r1
   1ba04:	79a2      	ldrb	r2, [r4, #6]
   1ba06:	7961      	ldrb	r1, [r4, #5]
   1ba08:	b089      	sub	sp, #36	; 0x24
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   1ba0a:	bfb4      	ite	lt
   1ba0c:	2608      	movlt	r6, #8
   1ba0e:	2604      	movge	r6, #4
	if (IS_ENABLED(CONFIG_BT_MESH_PROXY) && proxy) {
   1ba10:	b363      	cbz	r3, 1ba6c <bt_mesh_net_encrypt+0x8a>
	nonce[0] = 0x03;
   1ba12:	2303      	movs	r3, #3
   1ba14:	f8ad 3010 	strh.w	r3, [sp, #16]
	nonce[2] = pdu[2];
   1ba18:	f88d 8012 	strb.w	r8, [sp, #18]
	nonce[3] = pdu[3];
   1ba1c:	f88d e013 	strb.w	lr, [sp, #19]
	nonce[4] = pdu[4];
   1ba20:	f88d c014 	strb.w	ip, [sp, #20]
	nonce[5] = pdu[5];
   1ba24:	f88d 1015 	strb.w	r1, [sp, #21]
	nonce[6] = pdu[6];
   1ba28:	f88d 2016 	strb.w	r2, [sp, #22]
	nonce[7] = 0U;
   1ba2c:	2300      	movs	r3, #0
	sys_put_be32(iv_index, &nonce[9]);
   1ba2e:	f10d 0119 	add.w	r1, sp, #25
	nonce[7] = 0U;
   1ba32:	f88d 3017 	strb.w	r3, [sp, #23]
	nonce[8] = 0U;
   1ba36:	f88d 3018 	strb.w	r3, [sp, #24]
	sys_put_be32(iv_index, &nonce[9]);
   1ba3a:	f7ff ff4f 	bl	1b8dc <sys_put_be32>
	err = bt_ccm_encrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   1ba3e:	682a      	ldr	r2, [r5, #0]
   1ba40:	88ab      	ldrh	r3, [r5, #4]
   1ba42:	3207      	adds	r2, #7
   1ba44:	2100      	movs	r1, #0
   1ba46:	e9cd 1100 	strd	r1, r1, [sp]
   1ba4a:	e9cd 2602 	strd	r2, r6, [sp, #8]
   1ba4e:	3b07      	subs	r3, #7
   1ba50:	a904      	add	r1, sp, #16
   1ba52:	4638      	mov	r0, r7
   1ba54:	f7fe fafb 	bl	1a04e <bt_ccm_encrypt>
	if (!err) {
   1ba58:	4604      	mov	r4, r0
   1ba5a:	b918      	cbnz	r0, 1ba64 <bt_mesh_net_encrypt+0x82>
		net_buf_simple_add(buf, mic_len);
   1ba5c:	4631      	mov	r1, r6
   1ba5e:	4628      	mov	r0, r5
   1ba60:	f001 fc2d 	bl	1d2be <net_buf_simple_add>
}
   1ba64:	4620      	mov	r0, r4
   1ba66:	b009      	add	sp, #36	; 0x24
   1ba68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nonce[0] = 0x00;
   1ba6c:	f88d 3010 	strb.w	r3, [sp, #16]
	nonce[1] = pdu[1];
   1ba70:	f88d 9011 	strb.w	r9, [sp, #17]
	nonce[2] = pdu[2];
   1ba74:	f88d 8012 	strb.w	r8, [sp, #18]
	nonce[3] = pdu[3];
   1ba78:	f88d e013 	strb.w	lr, [sp, #19]
	nonce[4] = pdu[4];
   1ba7c:	f88d c014 	strb.w	ip, [sp, #20]
	nonce[5] = pdu[5];
   1ba80:	f88d 1015 	strb.w	r1, [sp, #21]
	nonce[6] = pdu[6];
   1ba84:	f88d 2016 	strb.w	r2, [sp, #22]
   1ba88:	e7d1      	b.n	1ba2e <bt_mesh_net_encrypt+0x4c>

0001ba8a <bt_mesh_net_decrypt>:
{
   1ba8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   1ba8e:	680c      	ldr	r4, [r1, #0]
{
   1ba90:	4606      	mov	r6, r0
   1ba92:	4610      	mov	r0, r2
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   1ba94:	f994 2001 	ldrsb.w	r2, [r4, #1]
   1ba98:	f894 9001 	ldrb.w	r9, [r4, #1]
   1ba9c:	f894 8002 	ldrb.w	r8, [r4, #2]
   1baa0:	f894 e003 	ldrb.w	lr, [r4, #3]
   1baa4:	f894 c004 	ldrb.w	ip, [r4, #4]
   1baa8:	2a00      	cmp	r2, #0
{
   1baaa:	460d      	mov	r5, r1
   1baac:	79a2      	ldrb	r2, [r4, #6]
   1baae:	7961      	ldrb	r1, [r4, #5]
   1bab0:	b089      	sub	sp, #36	; 0x24
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   1bab2:	bfb4      	ite	lt
   1bab4:	2708      	movlt	r7, #8
   1bab6:	2704      	movge	r7, #4
	if (IS_ENABLED(CONFIG_BT_MESH_PROXY) && proxy) {
   1bab8:	b343      	cbz	r3, 1bb0c <bt_mesh_net_decrypt+0x82>
	nonce[0] = 0x03;
   1baba:	2303      	movs	r3, #3
   1babc:	f8ad 3010 	strh.w	r3, [sp, #16]
	nonce[2] = pdu[2];
   1bac0:	f88d 8012 	strb.w	r8, [sp, #18]
	nonce[3] = pdu[3];
   1bac4:	f88d e013 	strb.w	lr, [sp, #19]
	nonce[4] = pdu[4];
   1bac8:	f88d c014 	strb.w	ip, [sp, #20]
	nonce[5] = pdu[5];
   1bacc:	f88d 1015 	strb.w	r1, [sp, #21]
	nonce[6] = pdu[6];
   1bad0:	f88d 2016 	strb.w	r2, [sp, #22]
	nonce[7] = 0U;
   1bad4:	2300      	movs	r3, #0
	sys_put_be32(iv_index, &nonce[9]);
   1bad6:	f10d 0119 	add.w	r1, sp, #25
	nonce[7] = 0U;
   1bada:	f88d 3017 	strb.w	r3, [sp, #23]
	nonce[8] = 0U;
   1bade:	f88d 3018 	strb.w	r3, [sp, #24]
	sys_put_be32(iv_index, &nonce[9]);
   1bae2:	f7ff fefb 	bl	1b8dc <sys_put_be32>
	buf->len -= mic_len;
   1bae6:	88ab      	ldrh	r3, [r5, #4]
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   1bae8:	682a      	ldr	r2, [r5, #0]
	buf->len -= mic_len;
   1baea:	1bdb      	subs	r3, r3, r7
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   1baec:	3207      	adds	r2, #7
	buf->len -= mic_len;
   1baee:	b29b      	uxth	r3, r3
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   1baf0:	2100      	movs	r1, #0
   1baf2:	e9cd 1100 	strd	r1, r1, [sp]
	buf->len -= mic_len;
   1baf6:	80ab      	strh	r3, [r5, #4]
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   1baf8:	e9cd 2702 	strd	r2, r7, [sp, #8]
   1bafc:	3b07      	subs	r3, #7
   1bafe:	a904      	add	r1, sp, #16
   1bb00:	4630      	mov	r0, r6
   1bb02:	f7fe fa75 	bl	19ff0 <bt_ccm_decrypt>
}
   1bb06:	b009      	add	sp, #36	; 0x24
   1bb08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nonce[0] = 0x00;
   1bb0c:	f88d 3010 	strb.w	r3, [sp, #16]
	nonce[1] = pdu[1];
   1bb10:	f88d 9011 	strb.w	r9, [sp, #17]
	nonce[2] = pdu[2];
   1bb14:	f88d 8012 	strb.w	r8, [sp, #18]
	nonce[3] = pdu[3];
   1bb18:	f88d e013 	strb.w	lr, [sp, #19]
	nonce[4] = pdu[4];
   1bb1c:	f88d c014 	strb.w	ip, [sp, #20]
	nonce[5] = pdu[5];
   1bb20:	f88d 1015 	strb.w	r1, [sp, #21]
	nonce[6] = pdu[6];
   1bb24:	f88d 2016 	strb.w	r2, [sp, #22]
   1bb28:	e7d5      	b.n	1bad6 <bt_mesh_net_decrypt+0x4c>

0001bb2a <bt_mesh_app_decrypt>:
{
   1bb2a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bb2c:	460d      	mov	r5, r1
   1bb2e:	b089      	sub	sp, #36	; 0x24
   1bb30:	4607      	mov	r7, r0
	create_app_nonce(nonce, ctx);
   1bb32:	a804      	add	r0, sp, #16
{
   1bb34:	4614      	mov	r4, r2
   1bb36:	461e      	mov	r6, r3
	create_app_nonce(nonce, ctx);
   1bb38:	f7ff fed9 	bl	1b8ee <create_app_nonce>
	err = bt_ccm_decrypt(key, nonce, buf->data, buf->len, ctx->ad,
   1bb3c:	692b      	ldr	r3, [r5, #16]
   1bb3e:	7868      	ldrb	r0, [r5, #1]
   1bb40:	6831      	ldr	r1, [r6, #0]
   1bb42:	2b00      	cmp	r3, #0
   1bb44:	bf14      	ite	ne
   1bb46:	2210      	movne	r2, #16
   1bb48:	2200      	moveq	r2, #0
   1bb4a:	2800      	cmp	r0, #0
   1bb4c:	bf14      	ite	ne
   1bb4e:	2008      	movne	r0, #8
   1bb50:	2004      	moveq	r0, #4
   1bb52:	e9cd 1002 	strd	r1, r0, [sp, #8]
   1bb56:	e9cd 3200 	strd	r3, r2, [sp]
   1bb5a:	a904      	add	r1, sp, #16
   1bb5c:	88a3      	ldrh	r3, [r4, #4]
   1bb5e:	6822      	ldr	r2, [r4, #0]
   1bb60:	4638      	mov	r0, r7
   1bb62:	f7fe fa45 	bl	19ff0 <bt_ccm_decrypt>
	if (!err) {
   1bb66:	4605      	mov	r5, r0
   1bb68:	b918      	cbnz	r0, 1bb72 <bt_mesh_app_decrypt+0x48>
		net_buf_simple_add(out, buf->len);
   1bb6a:	88a1      	ldrh	r1, [r4, #4]
   1bb6c:	4630      	mov	r0, r6
   1bb6e:	f001 fba6 	bl	1d2be <net_buf_simple_add>
}
   1bb72:	4628      	mov	r0, r5
   1bb74:	b009      	add	sp, #36	; 0x24
   1bb76:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001bb78 <bt_mesh_beacon_auth>:
}

int bt_mesh_beacon_auth(const uint8_t beacon_key[16], uint8_t flags,
			const uint8_t net_id[8], uint32_t iv_index,
			uint8_t auth[8])
{
   1bb78:	b530      	push	{r4, r5, lr}
   1bb7a:	b089      	sub	sp, #36	; 0x24
   1bb7c:	4604      	mov	r4, r0
   1bb7e:	4608      	mov	r0, r1
   1bb80:	461d      	mov	r5, r3
   1bb82:	4611      	mov	r1, r2

	BT_DBG("BeaconKey %s", bt_hex(beacon_key, 16));
	BT_DBG("NetId %s", bt_hex(net_id, 8));
	BT_DBG("IV Index 0x%08x", iv_index);

	msg[0] = flags;
   1bb84:	f88d 0000 	strb.w	r0, [sp]
	memcpy(&msg[1], net_id, 8);
   1bb88:	2208      	movs	r2, #8
   1bb8a:	f10d 0001 	add.w	r0, sp, #1
   1bb8e:	f7fe f809 	bl	19ba4 <memcpy>
	sys_put_be32(iv_index, &msg[9]);
   1bb92:	f10d 0109 	add.w	r1, sp, #9
   1bb96:	4628      	mov	r0, r5
   1bb98:	f7ff fea0 	bl	1b8dc <sys_put_be32>

	BT_DBG("BeaconMsg %s", bt_hex(msg, sizeof(msg)));

	err = bt_mesh_aes_cmac_one(beacon_key, msg, sizeof(msg), tmp);
   1bb9c:	4620      	mov	r0, r4
   1bb9e:	ab04      	add	r3, sp, #16
   1bba0:	220d      	movs	r2, #13
   1bba2:	4669      	mov	r1, sp
   1bba4:	f7ff fee5 	bl	1b972 <bt_mesh_aes_cmac_one>
	if (!err) {
   1bba8:	4604      	mov	r4, r0
   1bbaa:	b920      	cbnz	r0, 1bbb6 <bt_mesh_beacon_auth+0x3e>
		memcpy(auth, tmp, 8);
   1bbac:	980c      	ldr	r0, [sp, #48]	; 0x30
   1bbae:	2208      	movs	r2, #8
   1bbb0:	a904      	add	r1, sp, #16
   1bbb2:	f7fd fff7 	bl	19ba4 <memcpy>
	}

	return err;
}
   1bbb6:	4620      	mov	r0, r4
   1bbb8:	b009      	add	sp, #36	; 0x24
   1bbba:	bd30      	pop	{r4, r5, pc}

0001bbbc <commit_mod>:
{
   1bbbc:	b5d0      	push	{r4, r6, r7, lr}
	if (mod->pub && mod->pub->update &&
   1bbbe:	6884      	ldr	r4, [r0, #8]
   1bbc0:	b1ec      	cbz	r4, 1bbfe <commit_mod+0x42>
   1bbc2:	6963      	ldr	r3, [r4, #20]
   1bbc4:	b1db      	cbz	r3, 1bbfe <commit_mod+0x42>
   1bbc6:	88a3      	ldrh	r3, [r4, #4]
   1bbc8:	b1cb      	cbz	r3, 1bbfe <commit_mod+0x42>
		int32_t ms = bt_mesh_model_pub_period_get(mod);
   1bbca:	f7f0 fef7 	bl	c9bc <bt_mesh_model_pub_period_get>
		if (ms > 0) {
   1bbce:	1e01      	subs	r1, r0, #0
   1bbd0:	dd15      	ble.n	1bbfe <commit_mod+0x42>
   1bbd2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1bbd6:	f240 36e7 	movw	r6, #999	; 0x3e7
   1bbda:	2700      	movs	r7, #0
   1bbdc:	fbc0 6701 	smlal	r6, r7, r0, r1
   1bbe0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bbe4:	2300      	movs	r3, #0
   1bbe6:	4630      	mov	r0, r6
   1bbe8:	4639      	mov	r1, r7
   1bbea:	f7e4 fa79 	bl	e0 <__aeabi_uldivmod>
   1bbee:	4602      	mov	r2, r0
   1bbf0:	460b      	mov	r3, r1
			k_work_schedule(&mod->pub->timer, K_MSEC(ms));
   1bbf2:	f104 0018 	add.w	r0, r4, #24
}
   1bbf6:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
			k_work_schedule(&mod->pub->timer, K_MSEC(ms));
   1bbfa:	f7fb bdc7 	b.w	1778c <k_work_schedule>
}
   1bbfe:	bdd0      	pop	{r4, r6, r7, pc}

0001bc00 <sig_mod_set>:
{
   1bc00:	b507      	push	{r0, r1, r2, lr}
	return mod_set(false, name, len_rd, read_cb, cb_arg);
   1bc02:	9300      	str	r3, [sp, #0]
   1bc04:	4613      	mov	r3, r2
   1bc06:	460a      	mov	r2, r1
   1bc08:	4601      	mov	r1, r0
   1bc0a:	2000      	movs	r0, #0
   1bc0c:	f7f0 ff40 	bl	ca90 <mod_set>
}
   1bc10:	b003      	add	sp, #12
   1bc12:	f85d fb04 	ldr.w	pc, [sp], #4

0001bc16 <vnd_mod_set>:
{
   1bc16:	b507      	push	{r0, r1, r2, lr}
	return mod_set(true, name, len_rd, read_cb, cb_arg);
   1bc18:	9300      	str	r3, [sp, #0]
   1bc1a:	4613      	mov	r3, r2
   1bc1c:	460a      	mov	r2, r1
   1bc1e:	4601      	mov	r1, r0
   1bc20:	2001      	movs	r0, #1
   1bc22:	f7f0 ff35 	bl	ca90 <mod_set>
}
   1bc26:	b003      	add	sp, #12
   1bc28:	f85d fb04 	ldr.w	pc, [sp], #4

0001bc2c <bt_mesh_model_find_group>:
		.mod = *mod,
   1bc2c:	6800      	ldr	r0, [r0, #0]
		if (mod->groups[i] == addr) {
   1bc2e:	8a03      	ldrh	r3, [r0, #16]
   1bc30:	428b      	cmp	r3, r1
   1bc32:	d007      	beq.n	1bc44 <bt_mesh_model_find_group+0x18>
   1bc34:	8a43      	ldrh	r3, [r0, #18]
   1bc36:	428b      	cmp	r3, r1
   1bc38:	d106      	bne.n	1bc48 <bt_mesh_model_find_group+0x1c>
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
   1bc3a:	2301      	movs	r3, #1
			return &mod->groups[i];
   1bc3c:	3308      	adds	r3, #8
   1bc3e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
	if (ctx->entry) {
   1bc42:	4770      	bx	lr
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
   1bc44:	2300      	movs	r3, #0
   1bc46:	e7f9      	b.n	1bc3c <bt_mesh_model_find_group+0x10>
	ctx->entry = model_group_get(mod, ctx->addr);
   1bc48:	2000      	movs	r0, #0
}
   1bc4a:	4770      	bx	lr

0001bc4c <bt_mesh_model_bind_store>:
	mod->flags |= BT_MESH_MOD_BIND_PENDING;
   1bc4c:	88c3      	ldrh	r3, [r0, #6]
   1bc4e:	f043 0301 	orr.w	r3, r3, #1
   1bc52:	80c3      	strh	r3, [r0, #6]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_MOD_PENDING);
   1bc54:	2008      	movs	r0, #8
   1bc56:	f7f1 b9dd 	b.w	d014 <bt_mesh_settings_store_schedule>

0001bc5a <bt_mesh_model_pub_store>:
	mod->flags |= BT_MESH_MOD_PUB_PENDING;
   1bc5a:	88c3      	ldrh	r3, [r0, #6]
   1bc5c:	f043 0304 	orr.w	r3, r3, #4
   1bc60:	80c3      	strh	r3, [r0, #6]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_MOD_PENDING);
   1bc62:	2008      	movs	r0, #8
   1bc64:	f7f1 b9d6 	b.w	d014 <bt_mesh_settings_store_schedule>

0001bc68 <_mod_pub_set.constprop.0>:
static uint8_t _mod_pub_set(struct bt_mesh_model *model, uint16_t pub_addr,
   1bc68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bc6c:	4605      	mov	r5, r0
	if (!model->pub) {
   1bc6e:	6880      	ldr	r0, [r0, #8]
static uint8_t _mod_pub_set(struct bt_mesh_model *model, uint16_t pub_addr,
   1bc70:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   1bc74:	4688      	mov	r8, r1
   1bc76:	4617      	mov	r7, r2
   1bc78:	461c      	mov	r4, r3
	if (!model->pub) {
   1bc7a:	2800      	cmp	r0, #0
   1bc7c:	d063      	beq.n	1bd46 <_mod_pub_set.constprop.0+0xde>
	if (!IS_ENABLED(CONFIG_BT_MESH_LOW_POWER) && cred_flag) {
   1bc7e:	2b00      	cmp	r3, #0
   1bc80:	d15f      	bne.n	1bd42 <_mod_pub_set.constprop.0+0xda>
	if (!model->pub->update && period) {
   1bc82:	6942      	ldr	r2, [r0, #20]
   1bc84:	b90a      	cbnz	r2, 1bc8a <_mod_pub_set.constprop.0+0x22>
   1bc86:	2e00      	cmp	r6, #0
   1bc88:	d15d      	bne.n	1bd46 <_mod_pub_set.constprop.0+0xde>
	if (pub_addr == BT_MESH_ADDR_UNASSIGNED) {
   1bc8a:	f1b8 0f00 	cmp.w	r8, #0
   1bc8e:	d113      	bne.n	1bcb8 <_mod_pub_set.constprop.0+0x50>
		if (model->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
   1bc90:	8883      	ldrh	r3, [r0, #4]
   1bc92:	b173      	cbz	r3, 1bcb2 <_mod_pub_set.constprop.0+0x4a>
		model->pub->addr = BT_MESH_ADDR_UNASSIGNED;
   1bc94:	6843      	ldr	r3, [r0, #4]
   1bc96:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   1bc9a:	6043      	str	r3, [r0, #4]
		model->pub->ttl = 0U;
   1bc9c:	6883      	ldr	r3, [r0, #8]
   1bc9e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
   1bca2:	6083      	str	r3, [r0, #8]
		if (model->pub->update) {
   1bca4:	b112      	cbz	r2, 1bcac <_mod_pub_set.constprop.0+0x44>
			(void)k_work_cancel_delayable(&model->pub->timer);
   1bca6:	3018      	adds	r0, #24
   1bca8:	f001 ff99 	bl	1dbde <k_work_cancel_delayable>
			bt_mesh_model_pub_store(model);
   1bcac:	4628      	mov	r0, r5
   1bcae:	f7ff ffd4 	bl	1bc5a <bt_mesh_model_pub_store>
}
   1bcb2:	4620      	mov	r0, r4
   1bcb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!bt_mesh_app_key_exists(app_idx)) {
   1bcb8:	4638      	mov	r0, r7
   1bcba:	f7ef f9b1 	bl	b020 <bt_mesh_app_key_exists>
   1bcbe:	2800      	cmp	r0, #0
   1bcc0:	d043      	beq.n	1bd4a <_mod_pub_set.constprop.0+0xe2>
	if (BT_MESH_ADDR_IS_VIRTUAL(model->pub->addr)) {
   1bcc2:	68ab      	ldr	r3, [r5, #8]
   1bcc4:	8898      	ldrh	r0, [r3, #4]
   1bcc6:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
   1bcca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   1bcce:	d205      	bcs.n	1bcdc <_mod_pub_set.constprop.0+0x74>
		uint8_t *uuid = bt_mesh_va_label_get(model->pub->addr);
   1bcd0:	f7ef fed6 	bl	ba80 <bt_mesh_va_label_get>
		if (uuid) {
   1bcd4:	b110      	cbz	r0, 1bcdc <_mod_pub_set.constprop.0+0x74>
			bt_mesh_va_del(uuid, NULL);
   1bcd6:	2100      	movs	r1, #0
   1bcd8:	f7ef fe9c 	bl	ba14 <bt_mesh_va_del>
	model->pub->addr = pub_addr;
   1bcdc:	68ab      	ldr	r3, [r5, #8]
	model->pub->ttl = ttl;
   1bcde:	f89d 2020 	ldrb.w	r2, [sp, #32]
	model->pub->key = app_idx;
   1bce2:	88d9      	ldrh	r1, [r3, #6]
	model->pub->ttl = ttl;
   1bce4:	721a      	strb	r2, [r3, #8]
	model->pub->key = app_idx;
   1bce6:	f421 51ff 	bic.w	r1, r1, #8160	; 0x1fe0
   1bcea:	f021 011f 	bic.w	r1, r1, #31
   1bcee:	f3c7 070c 	ubfx	r7, r7, #0, #13
	model->pub->retransmit = retransmit;
   1bcf2:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
	model->pub->addr = pub_addr;
   1bcf6:	f8a3 8004 	strh.w	r8, [r3, #4]
	model->pub->key = app_idx;
   1bcfa:	4339      	orrs	r1, r7
   1bcfc:	80d9      	strh	r1, [r3, #6]
	model->pub->period = period;
   1bcfe:	729e      	strb	r6, [r3, #10]
	model->pub->retransmit = retransmit;
   1bd00:	725a      	strb	r2, [r3, #9]
	if (model->pub->update) {
   1bd02:	695b      	ldr	r3, [r3, #20]
   1bd04:	2b00      	cmp	r3, #0
   1bd06:	d0d1      	beq.n	1bcac <_mod_pub_set.constprop.0+0x44>
		period_ms = bt_mesh_model_pub_period_get(model);
   1bd08:	4628      	mov	r0, r5
   1bd0a:	f7f0 fe57 	bl	c9bc <bt_mesh_model_pub_period_get>
		if (period_ms > 0) {
   1bd0e:	1e01      	subs	r1, r0, #0
   1bd10:	68a8      	ldr	r0, [r5, #8]
   1bd12:	ddc8      	ble.n	1bca6 <_mod_pub_set.constprop.0+0x3e>
			k_work_reschedule(&model->pub->timer,
   1bd14:	f100 0618 	add.w	r6, r0, #24
   1bd18:	f240 38e7 	movw	r8, #999	; 0x3e7
   1bd1c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1bd20:	f04f 0900 	mov.w	r9, #0
   1bd24:	fbc0 8901 	smlal	r8, r9, r0, r1
   1bd28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bd2c:	2300      	movs	r3, #0
   1bd2e:	4640      	mov	r0, r8
   1bd30:	4649      	mov	r1, r9
   1bd32:	f7e4 f9d5 	bl	e0 <__aeabi_uldivmod>
   1bd36:	4602      	mov	r2, r0
   1bd38:	460b      	mov	r3, r1
   1bd3a:	4630      	mov	r0, r6
   1bd3c:	f7fb fd5a 	bl	177f4 <k_work_reschedule>
   1bd40:	e7b4      	b.n	1bcac <_mod_pub_set.constprop.0+0x44>
		return STATUS_FEAT_NOT_SUPP;
   1bd42:	240a      	movs	r4, #10
   1bd44:	e7b5      	b.n	1bcb2 <_mod_pub_set.constprop.0+0x4a>
		return STATUS_NVAL_PUB_PARAM;
   1bd46:	2407      	movs	r4, #7
   1bd48:	e7b3      	b.n	1bcb2 <_mod_pub_set.constprop.0+0x4a>
		return STATUS_INVALID_APPKEY;
   1bd4a:	2403      	movs	r4, #3
   1bd4c:	e7b1      	b.n	1bcb2 <_mod_pub_set.constprop.0+0x4a>

0001bd4e <mod_unbind.part.0.constprop.0>:
static uint8_t mod_unbind(struct bt_mesh_model *model, uint16_t key_idx, bool store)
   1bd4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1bd52:	4604      	mov	r4, r0
   1bd54:	b085      	sub	sp, #20
   1bd56:	460e      	mov	r6, r1
   1bd58:	f100 050c 	add.w	r5, r0, #12
   1bd5c:	f100 0810 	add.w	r8, r0, #16
		model->keys[i] = BT_MESH_KEY_UNUSED;
   1bd60:	f64f 79ff 	movw	r9, #65535	; 0xffff
			_mod_pub_set(model, BT_MESH_ADDR_UNASSIGNED,
   1bd64:	2700      	movs	r7, #0
		if (model->keys[i] != key_idx) {
   1bd66:	f835 3b02 	ldrh.w	r3, [r5], #2
   1bd6a:	42b3      	cmp	r3, r6
   1bd6c:	d114      	bne.n	1bd98 <mod_unbind.part.0.constprop.0+0x4a>
		model->keys[i] = BT_MESH_KEY_UNUSED;
   1bd6e:	f825 9c02 	strh.w	r9, [r5, #-2]
			bt_mesh_model_bind_store(model);
   1bd72:	4620      	mov	r0, r4
   1bd74:	f7ff ff6a 	bl	1bc4c <bt_mesh_model_bind_store>
		if (model->pub && model->pub->key == key_idx) {
   1bd78:	68a3      	ldr	r3, [r4, #8]
   1bd7a:	b16b      	cbz	r3, 1bd98 <mod_unbind.part.0.constprop.0+0x4a>
   1bd7c:	88db      	ldrh	r3, [r3, #6]
   1bd7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
   1bd82:	42b3      	cmp	r3, r6
   1bd84:	d108      	bne.n	1bd98 <mod_unbind.part.0.constprop.0+0x4a>
			_mod_pub_set(model, BT_MESH_ADDR_UNASSIGNED,
   1bd86:	2300      	movs	r3, #0
   1bd88:	e9cd 7701 	strd	r7, r7, [sp, #4]
   1bd8c:	9700      	str	r7, [sp, #0]
   1bd8e:	461a      	mov	r2, r3
   1bd90:	4619      	mov	r1, r3
   1bd92:	4620      	mov	r0, r4
   1bd94:	f7ff ff68 	bl	1bc68 <_mod_pub_set.constprop.0>
	for (i = 0; i < ARRAY_SIZE(model->keys); i++) {
   1bd98:	4545      	cmp	r5, r8
   1bd9a:	d1e4      	bne.n	1bd66 <mod_unbind.part.0.constprop.0+0x18>
}
   1bd9c:	2000      	movs	r0, #0
   1bd9e:	b005      	add	sp, #20
   1bda0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001bda4 <mod_app_key_del>:
{
   1bda4:	b538      	push	{r3, r4, r5, lr}
	mod_unbind(mod, *app_idx, true);
   1bda6:	9b04      	ldr	r3, [sp, #16]
   1bda8:	881d      	ldrh	r5, [r3, #0]
{
   1bdaa:	4604      	mov	r4, r0
	if (!bt_mesh_app_key_exists(key_idx)) {
   1bdac:	4628      	mov	r0, r5
   1bdae:	f7ef f937 	bl	b020 <bt_mesh_app_key_exists>
   1bdb2:	b128      	cbz	r0, 1bdc0 <mod_app_key_del+0x1c>
   1bdb4:	4629      	mov	r1, r5
   1bdb6:	4620      	mov	r0, r4
}
   1bdb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1bdbc:	f7ff bfc7 	b.w	1bd4e <mod_unbind.part.0.constprop.0>
   1bdc0:	bd38      	pop	{r3, r4, r5, pc}

0001bdc2 <bt_mesh_adv_buf_ready>:
}
   1bdc2:	4770      	bx	lr

0001bdc4 <net_buf_add_u8>:
	return net_buf_simple_add_u8(&buf->b, val);
   1bdc4:	3008      	adds	r0, #8
   1bdc6:	f001 ba89 	b.w	1d2dc <net_buf_simple_add_u8>

0001bdca <clear_tx>:

static void clear_tx(void)
{
	/* No action */
}
   1bdca:	4770      	bx	lr

0001bdcc <prov_ccc_changed>:
}
   1bdcc:	4770      	bx	lr

0001bdce <filter_add>:
{
   1bdce:	b510      	push	{r4, lr}
	if (addr == BT_MESH_ADDR_UNASSIGNED) {
   1bdd0:	b179      	cbz	r1, 1bdf2 <filter_add+0x24>
		if (client->filter[i] == addr) {
   1bdd2:	8883      	ldrh	r3, [r0, #4]
   1bdd4:	4299      	cmp	r1, r3
   1bdd6:	d00c      	beq.n	1bdf2 <filter_add+0x24>
   1bdd8:	88c4      	ldrh	r4, [r0, #6]
   1bdda:	42a1      	cmp	r1, r4
   1bddc:	d009      	beq.n	1bdf2 <filter_add+0x24>
   1bdde:	8902      	ldrh	r2, [r0, #8]
   1bde0:	4291      	cmp	r1, r2
   1bde2:	d006      	beq.n	1bdf2 <filter_add+0x24>
		if (client->filter[i] == BT_MESH_ADDR_UNASSIGNED) {
   1bde4:	b113      	cbz	r3, 1bdec <filter_add+0x1e>
   1bde6:	b12c      	cbz	r4, 1bdf4 <filter_add+0x26>
   1bde8:	b91a      	cbnz	r2, 1bdf2 <filter_add+0x24>
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   1bdea:	2302      	movs	r3, #2
			client->filter[i] = addr;
   1bdec:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   1bdf0:	8081      	strh	r1, [r0, #4]
}
   1bdf2:	bd10      	pop	{r4, pc}
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   1bdf4:	2301      	movs	r3, #1
   1bdf6:	e7f9      	b.n	1bdec <filter_add+0x1e>

0001bdf8 <proxy_segment_and_send>:
{
   1bdf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bdfc:	4688      	mov	r8, r1
   1bdfe:	4614      	mov	r4, r2
   1be00:	4606      	mov	r6, r0
	mtu = bt_gatt_get_mtu(conn) - 3;
   1be02:	f7ff fab1 	bl	1b368 <bt_gatt_get_mtu>
	if (mtu > msg->len) {
   1be06:	88a3      	ldrh	r3, [r4, #4]
	mtu = bt_gatt_get_mtu(conn) - 3;
   1be08:	1ec5      	subs	r5, r0, #3
   1be0a:	b2ad      	uxth	r5, r5
	if (mtu > msg->len) {
   1be0c:	42ab      	cmp	r3, r5
   1be0e:	f008 073f 	and.w	r7, r8, #63	; 0x3f
   1be12:	d20a      	bcs.n	1be2a <proxy_segment_and_send+0x32>
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_COMPLETE, type));
   1be14:	4639      	mov	r1, r7
   1be16:	4620      	mov	r0, r4
   1be18:	f001 fa95 	bl	1d346 <net_buf_simple_push_u8>
		return proxy_send(conn, msg->data, msg->len);
   1be1c:	88a2      	ldrh	r2, [r4, #4]
   1be1e:	6821      	ldr	r1, [r4, #0]
   1be20:	4630      	mov	r0, r6
}
   1be22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return proxy_send(conn, msg->data, msg->len);
   1be26:	f7f1 bfeb 	b.w	de00 <proxy_send>
	net_buf_simple_push_u8(msg, PDU_HDR(SAR_FIRST, type));
   1be2a:	f047 0140 	orr.w	r1, r7, #64	; 0x40
   1be2e:	4620      	mov	r0, r4
   1be30:	f001 fa89 	bl	1d346 <net_buf_simple_push_u8>
	proxy_send(conn, msg->data, mtu);
   1be34:	6821      	ldr	r1, [r4, #0]
   1be36:	462a      	mov	r2, r5
   1be38:	4630      	mov	r0, r6
   1be3a:	f7f1 ffe1 	bl	de00 <proxy_send>
	net_buf_simple_pull(msg, mtu);
   1be3e:	4629      	mov	r1, r5
   1be40:	4620      	mov	r0, r4
   1be42:	f001 fa99 	bl	1d378 <net_buf_simple_pull>
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_CONT, type));
   1be46:	f047 0780 	orr.w	r7, r7, #128	; 0x80
	while (msg->len) {
   1be4a:	88a3      	ldrh	r3, [r4, #4]
   1be4c:	b163      	cbz	r3, 1be68 <proxy_segment_and_send+0x70>
		if (msg->len + 1 < mtu) {
   1be4e:	3301      	adds	r3, #1
   1be50:	42ab      	cmp	r3, r5
   1be52:	da0c      	bge.n	1be6e <proxy_segment_and_send+0x76>
			net_buf_simple_push_u8(msg, PDU_HDR(SAR_LAST, type));
   1be54:	f048 01c0 	orr.w	r1, r8, #192	; 0xc0
   1be58:	4620      	mov	r0, r4
   1be5a:	f001 fa74 	bl	1d346 <net_buf_simple_push_u8>
			proxy_send(conn, msg->data, msg->len);
   1be5e:	88a2      	ldrh	r2, [r4, #4]
   1be60:	6821      	ldr	r1, [r4, #0]
   1be62:	4630      	mov	r0, r6
   1be64:	f7f1 ffcc 	bl	de00 <proxy_send>
}
   1be68:	2000      	movs	r0, #0
   1be6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_CONT, type));
   1be6e:	4639      	mov	r1, r7
   1be70:	4620      	mov	r0, r4
   1be72:	f001 fa68 	bl	1d346 <net_buf_simple_push_u8>
		proxy_send(conn, msg->data, mtu);
   1be76:	6821      	ldr	r1, [r4, #0]
   1be78:	462a      	mov	r2, r5
   1be7a:	4630      	mov	r0, r6
   1be7c:	f7f1 ffc0 	bl	de00 <proxy_send>
		net_buf_simple_pull(msg, mtu);
   1be80:	4629      	mov	r1, r5
   1be82:	4620      	mov	r0, r4
   1be84:	f001 fa78 	bl	1d378 <net_buf_simple_pull>
   1be88:	e7df      	b.n	1be4a <proxy_segment_and_send+0x52>

0001be8a <beacon_send>:
{
   1be8a:	b530      	push	{r4, r5, lr}
   1be8c:	b08b      	sub	sp, #44	; 0x2c
	NET_BUF_SIMPLE_DEFINE(buf, 23);
   1be8e:	ab04      	add	r3, sp, #16
   1be90:	f44f 12b8 	mov.w	r2, #1507328	; 0x170000
{
   1be94:	4604      	mov	r4, r0
   1be96:	460d      	mov	r5, r1
	net_buf_simple_reserve(&buf, 1);
   1be98:	a801      	add	r0, sp, #4
   1be9a:	2101      	movs	r1, #1
	NET_BUF_SIMPLE_DEFINE(buf, 23);
   1be9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1bea0:	9301      	str	r3, [sp, #4]
	net_buf_simple_reserve(&buf, 1);
   1bea2:	f001 f9ac 	bl	1d1fe <net_buf_simple_reserve>
	bt_mesh_beacon_create(sub, &buf);
   1bea6:	a901      	add	r1, sp, #4
   1bea8:	4628      	mov	r0, r5
   1beaa:	f7ed fdf9 	bl	9aa0 <bt_mesh_beacon_create>
	return proxy_segment_and_send(conn, BT_MESH_PROXY_BEACON, &buf);
   1beae:	aa01      	add	r2, sp, #4
   1beb0:	2101      	movs	r1, #1
   1beb2:	4620      	mov	r0, r4
   1beb4:	f7ff ffa0 	bl	1bdf8 <proxy_segment_and_send>
}
   1beb8:	b00b      	add	sp, #44	; 0x2c
   1beba:	bd30      	pop	{r4, r5, pc}

0001bebc <send_beacon_cb>:
{
   1bebc:	460b      	mov	r3, r1
	return beacon_send(client->conn, sub);
   1bebe:	4601      	mov	r1, r0
   1bec0:	6818      	ldr	r0, [r3, #0]
   1bec2:	f7ff bfe2 	b.w	1be8a <beacon_send>

0001bec6 <proxy_ccc_changed>:
   1bec6:	4770      	bx	lr

0001bec8 <bt_mesh_proxy_addr_add>:
	if (client->filter_type == WHITELIST) {
   1bec8:	f810 3c46 	ldrb.w	r3, [r0, #-70]
   1becc:	2b01      	cmp	r3, #1
{
   1bece:	460a      	mov	r2, r1
	if (client->filter_type == WHITELIST) {
   1bed0:	d102      	bne.n	1bed8 <bt_mesh_proxy_addr_add+0x10>
		filter_add(client, addr);
   1bed2:	3850      	subs	r0, #80	; 0x50
   1bed4:	f7ff bf7b 	b.w	1bdce <filter_add>
	} else if (client->filter_type == BLACKLIST) {
   1bed8:	2b02      	cmp	r3, #2
   1beda:	d111      	bne.n	1bf00 <bt_mesh_proxy_addr_add+0x38>
	if (addr == BT_MESH_ADDR_UNASSIGNED) {
   1bedc:	b181      	cbz	r1, 1bf00 <bt_mesh_proxy_addr_add+0x38>
		if (client->filter[i] == addr) {
   1bede:	f830 1c4c 	ldrh.w	r1, [r0, #-76]
   1bee2:	4291      	cmp	r1, r2
   1bee4:	d00d      	beq.n	1bf02 <bt_mesh_proxy_addr_add+0x3a>
   1bee6:	f830 1c4a 	ldrh.w	r1, [r0, #-74]
   1beea:	4291      	cmp	r1, r2
   1beec:	d00b      	beq.n	1bf06 <bt_mesh_proxy_addr_add+0x3e>
   1beee:	f830 1c48 	ldrh.w	r1, [r0, #-72]
   1bef2:	4291      	cmp	r1, r2
   1bef4:	d104      	bne.n	1bf00 <bt_mesh_proxy_addr_add+0x38>
			client->filter[i] = BT_MESH_ADDR_UNASSIGNED;
   1bef6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   1befa:	2300      	movs	r3, #0
   1befc:	f820 3c4c 	strh.w	r3, [r0, #-76]
}
   1bf00:	4770      	bx	lr
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   1bf02:	2300      	movs	r3, #0
   1bf04:	e7f7      	b.n	1bef6 <bt_mesh_proxy_addr_add+0x2e>
   1bf06:	2301      	movs	r3, #1
   1bf08:	e7f5      	b.n	1bef6 <bt_mesh_proxy_addr_add+0x2e>

0001bf0a <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
   1bf0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
   1bf0c:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   1bf0e:	1dc3      	adds	r3, r0, #7
   1bf10:	f023 0303 	bic.w	r3, r3, #3
{
   1bf14:	460e      	mov	r6, r1
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   1bf16:	801a      	strh	r2, [r3, #0]

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   1bf18:	3a01      	subs	r2, #1
   1bf1a:	b294      	uxth	r4, r2
{
   1bf1c:	4605      	mov	r5, r0
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   1bf1e:	2204      	movs	r2, #4
   1bf20:	2100      	movs	r1, #0
   1bf22:	fb06 0004 	mla	r0, r6, r4, r0
   1bf26:	f7fd fe68 	bl	19bfa <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
   1bf2a:	f64f 77ff 	movw	r7, #65535	; 0xffff
   1bf2e:	3c01      	subs	r4, #1
   1bf30:	b2a4      	uxth	r4, r4
   1bf32:	42bc      	cmp	r4, r7
   1bf34:	d101      	bne.n	1bf3a <mem_init+0x30>
		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
   1bf36:	b003      	add	sp, #12
   1bf38:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
   1bf3a:	fb04 6006 	mla	r0, r4, r6, r6
		next = (uint32_t)((uint8_t *) mem_pool +
   1bf3e:	182b      	adds	r3, r5, r0
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   1bf40:	2204      	movs	r2, #4
   1bf42:	1b80      	subs	r0, r0, r6
   1bf44:	eb0d 0102 	add.w	r1, sp, r2
   1bf48:	4428      	add	r0, r5
		next = (uint32_t)((uint8_t *) mem_pool +
   1bf4a:	9301      	str	r3, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   1bf4c:	f7fd fe2a 	bl	19ba4 <memcpy>
   1bf50:	e7ed      	b.n	1bf2e <mem_init+0x24>

0001bf52 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
   1bf52:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
   1bf54:	6804      	ldr	r4, [r0, #0]
{
   1bf56:	4605      	mov	r5, r0
	if (*mem_head) {
   1bf58:	b18c      	cbz	r4, 1bf7e <mem_acquire+0x2c>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   1bf5a:	1de3      	adds	r3, r4, #7
   1bf5c:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
   1bf60:	2204      	movs	r2, #4
   1bf62:	4621      	mov	r1, r4
   1bf64:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   1bf68:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
   1bf6a:	f7fd fe1b 	bl	19ba4 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
   1bf6e:	9b01      	ldr	r3, [sp, #4]
   1bf70:	b123      	cbz	r3, 1bf7c <mem_acquire+0x2a>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   1bf72:	1dda      	adds	r2, r3, #7
   1bf74:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
   1bf78:	3e01      	subs	r6, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   1bf7a:	8016      	strh	r6, [r2, #0]
				free_count;
		}

		*mem_head = head;
   1bf7c:	602b      	str	r3, [r5, #0]
		return mem;
	}

	return NULL;
}
   1bf7e:	4620      	mov	r0, r4
   1bf80:	b002      	add	sp, #8
   1bf82:	bd70      	pop	{r4, r5, r6, pc}

0001bf84 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
   1bf84:	b570      	push	{r4, r5, r6, lr}
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
   1bf86:	680c      	ldr	r4, [r1, #0]
{
   1bf88:	4606      	mov	r6, r0
   1bf8a:	460d      	mov	r5, r1
	if (*mem_head) {
   1bf8c:	b11c      	cbz	r4, 1bf96 <mem_release+0x12>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   1bf8e:	1de3      	adds	r3, r4, #7
   1bf90:	f023 0303 	bic.w	r3, r3, #3
   1bf94:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
   1bf96:	2204      	movs	r2, #4
   1bf98:	4629      	mov	r1, r5
   1bf9a:	4630      	mov	r0, r6
   1bf9c:	f7fd fe02 	bl	19ba4 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
   1bfa0:	1df2      	adds	r2, r6, #7
   1bfa2:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
   1bfa6:	1c63      	adds	r3, r4, #1
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
   1bfa8:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
   1bfaa:	602e      	str	r6, [r5, #0]
}
   1bfac:	bd70      	pop	{r4, r5, r6, pc}

0001bfae <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
   1bfae:	fb02 0001 	mla	r0, r2, r1, r0
   1bfb2:	4770      	bx	lr

0001bfb4 <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
   1bfb4:	1a40      	subs	r0, r0, r1
   1bfb6:	b280      	uxth	r0, r0
}
   1bfb8:	fbb0 f0f2 	udiv	r0, r0, r2
   1bfbc:	4770      	bx	lr

0001bfbe <mem_rcopy>:
/**
 * @brief  Copy bytes in reverse
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
   1bfbe:	b510      	push	{r4, lr}
	src += len;
   1bfc0:	4411      	add	r1, r2
	while (len--) {
   1bfc2:	3801      	subs	r0, #1
   1bfc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1bfc8:	3a01      	subs	r2, #1
   1bfca:	b292      	uxth	r2, r2
   1bfcc:	429a      	cmp	r2, r3
   1bfce:	d100      	bne.n	1bfd2 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
   1bfd0:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
   1bfd2:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   1bfd6:	f800 4f01 	strb.w	r4, [r0, #1]!
   1bfda:	e7f5      	b.n	1bfc8 <mem_rcopy+0xa>

0001bfdc <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
   1bfdc:	4401      	add	r1, r0
   1bfde:	4288      	cmp	r0, r1
   1bfe0:	d101      	bne.n	1bfe6 <mem_nz+0xa>
		if (*src++) {
			return 1;
		}
	}

	return 0;
   1bfe2:	2000      	movs	r0, #0
   1bfe4:	4770      	bx	lr
		if (*src++) {
   1bfe6:	f810 3b01 	ldrb.w	r3, [r0], #1
   1bfea:	2b00      	cmp	r3, #0
   1bfec:	d0f7      	beq.n	1bfde <mem_nz+0x2>
			return 1;
   1bfee:	2001      	movs	r0, #1
}
   1bff0:	4770      	bx	lr

0001bff2 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
   1bff2:	6010      	str	r0, [r2, #0]
   1bff4:	6008      	str	r0, [r1, #0]

	return link;
}
   1bff6:	4770      	bx	lr

0001bff8 <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
   1bff8:	680a      	ldr	r2, [r1, #0]
{
   1bffa:	4603      	mov	r3, r0
	if (*head != *tail) {
   1bffc:	6800      	ldr	r0, [r0, #0]
   1bffe:	4290      	cmp	r0, r2
   1c000:	f04f 0200 	mov.w	r2, #0
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
   1c004:	bf0a      	itet	eq
   1c006:	600a      	streq	r2, [r1, #0]
		return NULL;
   1c008:	4610      	movne	r0, r2
	*head = *tail = NULL;
   1c00a:	601a      	streq	r2, [r3, #0]

	return old_head;
}
   1c00c:	4770      	bx	lr

0001c00e <memq_enqueue>:
 * @param mem[in]      The memory payload to be enqueued. Pointed to by old tail
 * @param tail[in,out] Tail of queue. Will be updated to point to link
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
   1c00e:	b510      	push	{r4, lr}
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
   1c010:	6814      	ldr	r4, [r2, #0]
   1c012:	6020      	str	r0, [r4, #0]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
   1c014:	6814      	ldr	r4, [r2, #0]
   1c016:	6061      	str	r1, [r4, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	cpu_dmb(); /* Ensure data accesses are synchronized */
	*tail = link; /* Commit: enqueue of memq node */
   1c018:	6010      	str	r0, [r2, #0]

	return link;
}
   1c01a:	bd10      	pop	{r4, pc}

0001c01c <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
   1c01c:	4288      	cmp	r0, r1
   1c01e:	d003      	beq.n	1c028 <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
   1c020:	b11a      	cbz	r2, 1c02a <memq_peek+0xe>
		*mem = head->mem;
   1c022:	6843      	ldr	r3, [r0, #4]
   1c024:	6013      	str	r3, [r2, #0]
   1c026:	4770      	bx	lr
		return NULL;
   1c028:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
   1c02a:	4770      	bx	lr

0001c02c <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
   1c02c:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
   1c02e:	4283      	cmp	r3, r0
   1c030:	d009      	beq.n	1c046 <memq_dequeue+0x1a>
	if (mem) {
   1c032:	b122      	cbz	r2, 1c03e <memq_dequeue+0x12>
		*mem = head->mem;
   1c034:	6858      	ldr	r0, [r3, #4]
   1c036:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
   1c038:	681a      	ldr	r2, [r3, #0]
   1c03a:	600a      	str	r2, [r1, #0]

	return old_head;
   1c03c:	e001      	b.n	1c042 <memq_dequeue+0x16>
	if (old_head == NULL) {
   1c03e:	2b00      	cmp	r3, #0
   1c040:	d1fa      	bne.n	1c038 <memq_dequeue+0xc>
}
   1c042:	4618      	mov	r0, r3
   1c044:	4770      	bx	lr
		return NULL; /* queue is empty */
   1c046:	2300      	movs	r3, #0
   1c048:	e7fb      	b.n	1c042 <memq_dequeue+0x16>

0001c04a <util_ones_count_get>:
 * @param octets_len Must not be bigger than 255/8 = 31 bytes
 *
 * @return popcnt of 'octets'
 */
uint8_t util_ones_count_get(uint8_t *octets, uint8_t octets_len)
{
   1c04a:	b510      	push	{r4, lr}
   1c04c:	1e42      	subs	r2, r0, #1
	uint8_t one_count = 0U;
   1c04e:	2000      	movs	r0, #0

	while (octets_len--) {
   1c050:	3901      	subs	r1, #1
   1c052:	b2c9      	uxtb	r1, r1
   1c054:	29ff      	cmp	r1, #255	; 0xff
   1c056:	d100      	bne.n	1c05a <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
   1c058:	bd10      	pop	{r4, pc}
		bite = *octets;
   1c05a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
   1c05e:	2b00      	cmp	r3, #0
   1c060:	d0f6      	beq.n	1c050 <util_ones_count_get+0x6>
			bite &= (bite - 1);
   1c062:	b25b      	sxtb	r3, r3
   1c064:	1e5c      	subs	r4, r3, #1
   1c066:	4023      	ands	r3, r4
			one_count++;
   1c068:	3001      	adds	r0, #1
			bite &= (bite - 1);
   1c06a:	b2db      	uxtb	r3, r3
			one_count++;
   1c06c:	b2c0      	uxtb	r0, r0
   1c06e:	e7f6      	b.n	1c05e <util_ones_count_get+0x14>

0001c070 <ticks_to_expire_prep>:
{
   1c070:	b530      	push	{r4, r5, lr}
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   1c072:	1a55      	subs	r5, r2, r1
   1c074:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
   1c078:	6883      	ldr	r3, [r0, #8]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   1c07a:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   1c07c:	d109      	bne.n	1c092 <ticks_to_expire_prep+0x22>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1c07e:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   1c082:	442b      	add	r3, r5
	if (ticks_to_expire > ticks_to_expire_minus) {
   1c084:	42a3      	cmp	r3, r4
   1c086:	d90e      	bls.n	1c0a6 <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
   1c088:	1b1b      	subs	r3, r3, r4
		ticks_to_expire_minus = 0U;
   1c08a:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
   1c08c:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   1c08e:	6144      	str	r4, [r0, #20]
}
   1c090:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1c092:	1a8a      	subs	r2, r1, r2
   1c094:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   1c098:	4293      	cmp	r3, r2
   1c09a:	d901      	bls.n	1c0a0 <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
   1c09c:	1a9b      	subs	r3, r3, r2
   1c09e:	e7f1      	b.n	1c084 <ticks_to_expire_prep+0x14>
			ticks_to_expire_minus +=
   1c0a0:	4414      	add	r4, r2
   1c0a2:	1ae4      	subs	r4, r4, r3
			ticks_to_expire = 0U;
   1c0a4:	2300      	movs	r3, #0
		ticks_to_expire_minus -= ticks_to_expire;
   1c0a6:	1ae4      	subs	r4, r4, r3
		ticks_to_expire = 0U;
   1c0a8:	2300      	movs	r3, #0
   1c0aa:	e7ef      	b.n	1c08c <ticks_to_expire_prep+0x1c>

0001c0ac <ticker_job_op_cb>:
{
   1c0ac:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   1c0ae:	2200      	movs	r2, #0
   1c0b0:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
   1c0b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	user_op->status = status;
   1c0b4:	6299      	str	r1, [r3, #40]	; 0x28
{
   1c0b6:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
   1c0b8:	b10a      	cbz	r2, 1c0be <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   1c0ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
   1c0bc:	4710      	bx	r2
}
   1c0be:	4770      	bx	lr

0001c0c0 <ticker_job_list_insert>:
{
   1c0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c0c4:	b089      	sub	sp, #36	; 0x24
	node = &instance->nodes[0];
   1c0c6:	6803      	ldr	r3, [r0, #0]
   1c0c8:	9303      	str	r3, [sp, #12]
	count_user = instance->count_user;
   1c0ca:	f890 a009 	ldrb.w	sl, [r0, #9]
	users = &instance->users[0];
   1c0ce:	6843      	ldr	r3, [r0, #4]
   1c0d0:	9305      	str	r3, [sp, #20]
{
   1c0d2:	4606      	mov	r6, r0
   1c0d4:	4688      	mov	r8, r1
	while (count_user--) {
   1c0d6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   1c0da:	fa5f fa83 	uxtb.w	sl, r3
   1c0de:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   1c0e2:	d102      	bne.n	1c0ea <ticker_job_list_insert+0x2a>
}
   1c0e4:	b009      	add	sp, #36	; 0x24
   1c0e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		user = &users[count_user];
   1c0ea:	9b05      	ldr	r3, [sp, #20]
   1c0ec:	eb03 0bca 	add.w	fp, r3, sl, lsl #3
		user_ops = (void *)&user->user_op[0];
   1c0f0:	f8db 3004 	ldr.w	r3, [fp, #4]
		user_ops_first = user->first;
   1c0f4:	f89b 7001 	ldrb.w	r7, [fp, #1]
		user_ops = (void *)&user->user_op[0];
   1c0f8:	9304      	str	r3, [sp, #16]
		while ((insert_head != TICKER_NULL) ||
   1c0fa:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1c0fe:	d076      	beq.n	1c1ee <ticker_job_list_insert+0x12e>
				ticker = &node[id_insert];
   1c100:	eb08 0448 	add.w	r4, r8, r8, lsl #1
   1c104:	9a03      	ldr	r2, [sp, #12]
   1c106:	f8cd 8008 	str.w	r8, [sp, #8]
   1c10a:	0123      	lsls	r3, r4, #4
				user_op = NULL;
   1c10c:	2500      	movs	r5, #0
				insert_head = ticker->next;
   1c10e:	f812 8003 	ldrb.w	r8, [r2, r3]
				ticker = &node[id_insert];
   1c112:	eb02 1404 	add.w	r4, r2, r4, lsl #4
	ticker->next = TICKER_NULL;
   1c116:	23ff      	movs	r3, #255	; 0xff
   1c118:	7023      	strb	r3, [r4, #0]
	ticker_new = &node[id];
   1c11a:	f9bd c008 	ldrsh.w	ip, [sp, #8]
	node = &instance->nodes[0];
   1c11e:	6830      	ldr	r0, [r6, #0]
	ticker_new = &node[id];
   1c120:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   1c124:	ea4f 120c 	mov.w	r2, ip, lsl #4
   1c128:	eb00 1c0c 	add.w	ip, r0, ip, lsl #4
   1c12c:	9206      	str	r2, [sp, #24]
	ticks_to_expire = ticker_new->ticks_to_expire;
   1c12e:	f8dc 2008 	ldr.w	r2, [ip, #8]
   1c132:	9201      	str	r2, [sp, #4]
	current = instance->ticker_id_head;
   1c134:	7f72      	ldrb	r2, [r6, #29]
	previous = TICKER_NULL;
   1c136:	4619      	mov	r1, r3
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   1c138:	2aff      	cmp	r2, #255	; 0xff
   1c13a:	d00c      	beq.n	1c156 <ticker_job_list_insert+0x96>
		(ticker_current = &node[current])->ticks_to_expire))) {
   1c13c:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
   1c140:	ea4f 130e 	mov.w	r3, lr, lsl #4
   1c144:	eb00 1e0e 	add.w	lr, r0, lr, lsl #4
   1c148:	9307      	str	r3, [sp, #28]
		(ticks_to_expire_current =
   1c14a:	f8de 9008 	ldr.w	r9, [lr, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   1c14e:	9b01      	ldr	r3, [sp, #4]
   1c150:	454b      	cmp	r3, r9
   1c152:	f080 8082 	bcs.w	1c25a <ticker_job_list_insert+0x19a>
	ticker_new->ticks_to_expire = ticks_to_expire;
   1c156:	9b01      	ldr	r3, [sp, #4]
   1c158:	f8cc 3008 	str.w	r3, [ip, #8]
	ticker_new->next = current;
   1c15c:	9b06      	ldr	r3, [sp, #24]
	if (previous == TICKER_NULL) {
   1c15e:	29ff      	cmp	r1, #255	; 0xff
	ticker_new->next = current;
   1c160:	54c2      	strb	r2, [r0, r3]
		node[previous].next = id;
   1c162:	bf1d      	ittte	ne
   1c164:	b20b      	sxthne	r3, r1
   1c166:	eb03 0343 	addne.w	r3, r3, r3, lsl #1
   1c16a:	011b      	lslne	r3, r3, #4
		instance->ticker_id_head = id;
   1c16c:	9b02      	ldreq	r3, [sp, #8]
		node[previous].next = id;
   1c16e:	bf1a      	itte	ne
   1c170:	9902      	ldrne	r1, [sp, #8]
   1c172:	54c1      	strbne	r1, [r0, r3]
		instance->ticker_id_head = id;
   1c174:	7773      	strbeq	r3, [r6, #29]
	if (current != TICKER_NULL) {
   1c176:	2aff      	cmp	r2, #255	; 0xff
   1c178:	d007      	beq.n	1c18a <ticker_job_list_insert+0xca>
		node[current].ticks_to_expire -= ticks_to_expire;
   1c17a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1c17e:	eb00 1202 	add.w	r2, r0, r2, lsl #4
   1c182:	9901      	ldr	r1, [sp, #4]
   1c184:	6893      	ldr	r3, [r2, #8]
   1c186:	1a59      	subs	r1, r3, r1
   1c188:	6091      	str	r1, [r2, #8]
	ticker->req = ticker->ack + 1;
   1c18a:	78a3      	ldrb	r3, [r4, #2]
   1c18c:	3301      	adds	r3, #1
   1c18e:	7063      	strb	r3, [r4, #1]
			if (user_op) {
   1c190:	2d00      	cmp	r5, #0
   1c192:	d0b2      	beq.n	1c0fa <ticker_job_list_insert+0x3a>
				ticker_job_op_cb(user_op, status);
   1c194:	2100      	movs	r1, #0
   1c196:	4628      	mov	r0, r5
   1c198:	f7ff ff88 	bl	1c0ac <ticker_job_op_cb>
				if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   1c19c:	6863      	ldr	r3, [r4, #4]
   1c19e:	2b00      	cmp	r3, #0
   1c1a0:	d1ab      	bne.n	1c0fa <ticker_job_list_insert+0x3a>
					ticker->fp_op_func =
   1c1a2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1c1a4:	6223      	str	r3, [r4, #32]
					ticker->op_context =
   1c1a6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   1c1a8:	6263      	str	r3, [r4, #36]	; 0x24
   1c1aa:	e7a6      	b.n	1c0fa <ticker_job_list_insert+0x3a>
				user_op = &user_ops[user_ops_first];
   1c1ac:	9a04      	ldr	r2, [sp, #16]
   1c1ae:	2334      	movs	r3, #52	; 0x34
   1c1b0:	fb17 f303 	smulbb	r3, r7, r3
   1c1b4:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
   1c1b6:	3701      	adds	r7, #1
				if (first == user->count_user_op) {
   1c1b8:	f89b 2000 	ldrb.w	r2, [fp]
				first = user_ops_first + 1;
   1c1bc:	b2ff      	uxtb	r7, r7
					first = 0U;
   1c1be:	42ba      	cmp	r2, r7
   1c1c0:	bf08      	it	eq
   1c1c2:	2700      	moveq	r7, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   1c1c4:	9a04      	ldr	r2, [sp, #16]
   1c1c6:	5cd3      	ldrb	r3, [r2, r3]
   1c1c8:	2b04      	cmp	r3, #4
   1c1ca:	d110      	bne.n	1c1ee <ticker_job_list_insert+0x12e>
				id_insert = user_op->id;
   1c1cc:	786b      	ldrb	r3, [r5, #1]
   1c1ce:	9302      	str	r3, [sp, #8]
				ticker = &node[id_insert];
   1c1d0:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   1c1d4:	9b03      	ldr	r3, [sp, #12]
   1c1d6:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				if (((ticker->req -
   1c1da:	7863      	ldrb	r3, [r4, #1]
				      ticker->ack) & 0xff) != 0U) {
   1c1dc:	78a2      	ldrb	r2, [r4, #2]
				if (((ticker->req -
   1c1de:	1a9b      	subs	r3, r3, r2
   1c1e0:	f013 0fff 	tst.w	r3, #255	; 0xff
   1c1e4:	d008      	beq.n	1c1f8 <ticker_job_list_insert+0x138>
					ticker_job_op_cb(user_op,
   1c1e6:	2101      	movs	r1, #1
   1c1e8:	4628      	mov	r0, r5
   1c1ea:	f7ff ff5f 	bl	1c0ac <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
   1c1ee:	f89b 3002 	ldrb.w	r3, [fp, #2]
   1c1f2:	42bb      	cmp	r3, r7
   1c1f4:	d1da      	bne.n	1c1ac <ticker_job_list_insert+0xec>
   1c1f6:	e76e      	b.n	1c0d6 <ticker_job_list_insert+0x16>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   1c1f8:	8aab      	ldrh	r3, [r5, #20]
				ticker_job_op_start(ticker, user_op,
   1c1fa:	6971      	ldr	r1, [r6, #20]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   1c1fc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   1c200:	4293      	cmp	r3, r2
   1c202:	d006      	beq.n	1c212 <ticker_job_list_insert+0x152>
		ticker->must_expire =
   1c204:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1c208:	1a98      	subs	r0, r3, r2
   1c20a:	4242      	negs	r2, r0
   1c20c:	4142      	adcs	r2, r0
   1c20e:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
   1c212:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1c214:	62a2      	str	r2, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   1c216:	68ea      	ldr	r2, [r5, #12]
   1c218:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   1c21a:	692a      	ldr	r2, [r5, #16]
   1c21c:	6222      	str	r2, [r4, #32]
	ticker->lazy_periodic =
   1c21e:	f64f 72fd 	movw	r2, #65533	; 0xfffd
   1c222:	4293      	cmp	r3, r2
   1c224:	bf88      	it	hi
   1c226:	2300      	movhi	r3, #0
   1c228:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
   1c22a:	69ab      	ldr	r3, [r5, #24]
   1c22c:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
   1c22e:	69eb      	ldr	r3, [r5, #28]
   1c230:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
   1c232:	6a2b      	ldr	r3, [r5, #32]
   1c234:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0U;
   1c236:	f04f 0900 	mov.w	r9, #0
	ticker->ticks_to_expire = start->ticks_first;
   1c23a:	68ab      	ldr	r3, [r5, #8]
   1c23c:	60a3      	str	r3, [r4, #8]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   1c23e:	686a      	ldr	r2, [r5, #4]
	ticker->ticks_to_expire_minus = 0U;
   1c240:	f8c4 9014 	str.w	r9, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   1c244:	4620      	mov	r0, r4
   1c246:	f7ff ff13 	bl	1c070 <ticks_to_expire_prep>
	ticker->force = 1U;
   1c24a:	f04f 0301 	mov.w	r3, #1
	ticker->remainder_current = 0U;
   1c24e:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   1c252:	f8a4 901e 	strh.w	r9, [r4, #30]
	ticker->force = 1U;
   1c256:	70e3      	strb	r3, [r4, #3]
}
   1c258:	e75d      	b.n	1c116 <ticker_job_list_insert+0x56>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
   1c25a:	9b01      	ldr	r3, [sp, #4]
   1c25c:	ebb3 0309 	subs.w	r3, r3, r9
   1c260:	9301      	str	r3, [sp, #4]
   1c262:	d105      	bne.n	1c270 <ticker_job_list_insert+0x1b0>
   1c264:	f8bc 301e 	ldrh.w	r3, [ip, #30]
   1c268:	f8be e01e 	ldrh.w	lr, [lr, #30]
   1c26c:	4573      	cmp	r3, lr
   1c26e:	d803      	bhi.n	1c278 <ticker_job_list_insert+0x1b8>
		current = ticker_current->next;
   1c270:	9b07      	ldr	r3, [sp, #28]
   1c272:	4611      	mov	r1, r2
   1c274:	5cc2      	ldrb	r2, [r0, r3]
   1c276:	e75f      	b.n	1c138 <ticker_job_list_insert+0x78>
		(ticks_to_expire_current =
   1c278:	f8cd 9004 	str.w	r9, [sp, #4]
   1c27c:	e76b      	b.n	1c156 <ticker_job_list_insert+0x96>

0001c27e <ticker_worker>:
{
   1c27e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   1c282:	7f86      	ldrb	r6, [r0, #30]
	instance->worker_trigger = 1U;
   1c284:	2301      	movs	r3, #1
{
   1c286:	b08d      	sub	sp, #52	; 0x34
   1c288:	4605      	mov	r5, r0
	instance->worker_trigger = 1U;
   1c28a:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
   1c28c:	b91e      	cbnz	r6, 1c296 <ticker_worker+0x18>
	if (instance->ticker_id_head == TICKER_NULL) {
   1c28e:	7f43      	ldrb	r3, [r0, #29]
   1c290:	2bff      	cmp	r3, #255	; 0xff
   1c292:	d103      	bne.n	1c29c <ticker_worker+0x1e>
		instance->worker_trigger = 0U;
   1c294:	77c6      	strb	r6, [r0, #31]
}
   1c296:	b00d      	add	sp, #52	; 0x34
   1c298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   1c29c:	f7f8 fcf8 	bl	14c90 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1c2a0:	696b      	ldr	r3, [r5, #20]
	ticker_id_head = instance->ticker_id_head;
   1c2a2:	7f6f      	ldrb	r7, [r5, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1c2a4:	1ac0      	subs	r0, r0, r3
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   1c2a6:	7f2b      	ldrb	r3, [r5, #28]
   1c2a8:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1c2aa:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   1c2ae:	d004      	beq.n	1c2ba <ticker_worker+0x3c>
		if (instance->ticks_slot_previous > ticks_elapsed) {
   1c2b0:	69ae      	ldr	r6, [r5, #24]
	uint8_t slot_reserved = 0;
   1c2b2:	455e      	cmp	r6, fp
   1c2b4:	bf94      	ite	ls
   1c2b6:	2600      	movls	r6, #0
   1c2b8:	2601      	movhi	r6, #1
	ticks_expired = 0U;
   1c2ba:	2300      	movs	r3, #0
	node = &instance->nodes[0];
   1c2bc:	f8d5 8000 	ldr.w	r8, [r5]
	ticks_expired = 0U;
   1c2c0:	9303      	str	r3, [sp, #12]
	while (ticker_id_head != TICKER_NULL) {
   1c2c2:	2fff      	cmp	r7, #255	; 0xff
   1c2c4:	d11a      	bne.n	1c2fc <ticker_worker+0x7e>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   1c2c6:	7aea      	ldrb	r2, [r5, #11]
   1c2c8:	7aab      	ldrb	r3, [r5, #10]
   1c2ca:	4293      	cmp	r3, r2
   1c2cc:	d105      	bne.n	1c2da <ticker_worker+0x5c>
	uint8_t idx = *ticks_elapsed_index + 1;
   1c2ce:	3301      	adds	r3, #1
   1c2d0:	b2db      	uxtb	r3, r3
		idx = 0U;
   1c2d2:	2b02      	cmp	r3, #2
   1c2d4:	bf08      	it	eq
   1c2d6:	2300      	moveq	r3, #0
	*ticks_elapsed_index = idx;
   1c2d8:	72eb      	strb	r3, [r5, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   1c2da:	7aeb      	ldrb	r3, [r5, #11]
   1c2dc:	9a03      	ldr	r2, [sp, #12]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1c2de:	6a6c      	ldr	r4, [r5, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   1c2e0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1c2e4:	2104      	movs	r1, #4
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   1c2e6:	60da      	str	r2, [r3, #12]
	instance->worker_trigger = 0U;
   1c2e8:	2300      	movs	r3, #0
   1c2ea:	77eb      	strb	r3, [r5, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1c2ec:	2201      	movs	r2, #1
   1c2ee:	462b      	mov	r3, r5
   1c2f0:	2003      	movs	r0, #3
   1c2f2:	46a4      	mov	ip, r4
}
   1c2f4:	b00d      	add	sp, #52	; 0x34
   1c2f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1c2fa:	4760      	bx	ip
		ticker = &node[ticker_id_head];
   1c2fc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   1c300:	eb08 1407 	add.w	r4, r8, r7, lsl #4
   1c304:	013a      	lsls	r2, r7, #4
		ticks_to_expire = ticker->ticks_to_expire;
   1c306:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   1c308:	459b      	cmp	fp, r3
   1c30a:	d3dc      	bcc.n	1c2c6 <ticker_worker+0x48>
		ticks_expired += ticks_to_expire;
   1c30c:	9903      	ldr	r1, [sp, #12]
		ticker_id_head = ticker->next;
   1c30e:	f818 7002 	ldrb.w	r7, [r8, r2]
		ticks_expired += ticks_to_expire;
   1c312:	4419      	add	r1, r3
		ticks_elapsed -= ticks_to_expire;
   1c314:	ebab 0b03 	sub.w	fp, fp, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   1c318:	78a3      	ldrb	r3, [r4, #2]
   1c31a:	9304      	str	r3, [sp, #16]
   1c31c:	9a04      	ldr	r2, [sp, #16]
   1c31e:	7863      	ldrb	r3, [r4, #1]
		ticks_expired += ticks_to_expire;
   1c320:	9103      	str	r1, [sp, #12]
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   1c322:	1a9b      	subs	r3, r3, r2
   1c324:	b2db      	uxtb	r3, r3
   1c326:	2b01      	cmp	r3, #1
   1c328:	d1cb      	bne.n	1c2c2 <ticker_worker+0x44>
		if (ticker->ticks_slot != 0U &&
   1c32a:	69a3      	ldr	r3, [r4, #24]
   1c32c:	9305      	str	r3, [sp, #20]
   1c32e:	2b00      	cmp	r3, #0
   1c330:	d034      	beq.n	1c39c <ticker_worker+0x11e>
   1c332:	2e00      	cmp	r6, #0
   1c334:	f040 809e 	bne.w	1c474 <ticker_worker+0x1f6>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   1c338:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
   1c33c:	9306      	str	r3, [sp, #24]
   1c33e:	3380      	adds	r3, #128	; 0x80
   1c340:	d02c      	beq.n	1c39c <ticker_worker+0x11e>
   1c342:	2fff      	cmp	r7, #255	; 0xff
   1c344:	d02a      	beq.n	1c39c <ticker_worker+0x11e>
		int32_t lazy_current = ticker->lazy_current;
   1c346:	8be3      	ldrh	r3, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
   1c348:	8ba2      	ldrh	r2, [r4, #28]
   1c34a:	4293      	cmp	r3, r2
			lazy_current -= ticker->lazy_periodic;
   1c34c:	bf28      	it	cs
   1c34e:	1a9b      	subcs	r3, r3, r2
		uint32_t current_age = ticker->ticks_periodic +
   1c350:	6862      	ldr	r2, [r4, #4]
   1c352:	fb03 2102 	mla	r1, r3, r2, r2
   1c356:	910a      	str	r1, [sp, #40]	; 0x28
		uint32_t acc_ticks_to_expire = 0U;
   1c358:	2100      	movs	r1, #0
   1c35a:	9107      	str	r1, [sp, #28]
				(lazy_current - ticker->priority);
   1c35c:	9906      	ldr	r1, [sp, #24]
   1c35e:	1a5b      	subs	r3, r3, r1
		uint32_t current_age = ticker->ticks_periodic +
   1c360:	46ba      	mov	sl, r7
				(lazy_current - ticker->priority);
   1c362:	930b      	str	r3, [sp, #44]	; 0x2c
			struct ticker_node *ticker_next = &nodes[id_head];
   1c364:	fa0f fa8a 	sxth.w	sl, sl
   1c368:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
   1c36c:	ea4f 130a 	mov.w	r3, sl, lsl #4
   1c370:	eb08 1a0a 	add.w	sl, r8, sl, lsl #4
   1c374:	9309      	str	r3, [sp, #36]	; 0x24
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   1c376:	f8da 9008 	ldr.w	r9, [sl, #8]
   1c37a:	9b07      	ldr	r3, [sp, #28]
   1c37c:	444b      	add	r3, r9
   1c37e:	9307      	str	r3, [sp, #28]
			if (acc_ticks_to_expire > ticker->ticks_slot) {
   1c380:	9907      	ldr	r1, [sp, #28]
   1c382:	9b05      	ldr	r3, [sp, #20]
   1c384:	428b      	cmp	r3, r1
   1c386:	d309      	bcc.n	1c39c <ticker_worker+0x11e>
			if (ticker_next->ticks_slot == 0U) {
   1c388:	f8da 3018 	ldr.w	r3, [sl, #24]
   1c38c:	2b00      	cmp	r3, #0
   1c38e:	d133      	bne.n	1c3f8 <ticker_worker+0x17a>
			id_head = ticker_next->next;
   1c390:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c392:	f818 a003 	ldrb.w	sl, [r8, r3]
		while (id_head != TICKER_NULL) {
   1c396:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   1c39a:	d1e3      	bne.n	1c364 <ticker_worker+0xe6>
		must_expire_skip = 0U;
   1c39c:	f04f 0900 	mov.w	r9, #0
		if (ticker->ext_data) {
   1c3a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c3a2:	b113      	cbz	r3, 1c3aa <ticker_worker+0x12c>
			ticker->ext_data->ticks_drift = 0U;
   1c3a4:	2200      	movs	r2, #0
   1c3a6:	605a      	str	r2, [r3, #4]
			ticker->ext_data->reschedule_state =
   1c3a8:	721a      	strb	r2, [r3, #8]
		ticker->ack--;
   1c3aa:	9b04      	ldr	r3, [sp, #16]
		if (ticker->timeout_func) {
   1c3ac:	f8d4 a00c 	ldr.w	sl, [r4, #12]
		ticker->ack--;
   1c3b0:	3b01      	subs	r3, #1
   1c3b2:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
   1c3b4:	f1ba 0f00 	cmp.w	sl, #0
   1c3b8:	d083      	beq.n	1c2c2 <ticker_worker+0x44>
					   ticks_expired -
   1c3ba:	9b03      	ldr	r3, [sp, #12]
   1c3bc:	6960      	ldr	r0, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   1c3be:	6a61      	ldr	r1, [r4, #36]	; 0x24
					   ticks_expired -
   1c3c0:	1a18      	subs	r0, r3, r0
   1c3c2:	696b      	ldr	r3, [r5, #20]
   1c3c4:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   1c3c6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   1c3ca:	f1b9 0f00 	cmp.w	r9, #0
   1c3ce:	d17a      	bne.n	1c4c6 <ticker_worker+0x248>
   1c3d0:	8be2      	ldrh	r2, [r4, #30]
   1c3d2:	f894 c003 	ldrb.w	ip, [r4, #3]
   1c3d6:	6923      	ldr	r3, [r4, #16]
   1c3d8:	9300      	str	r3, [sp, #0]
   1c3da:	4663      	mov	r3, ip
   1c3dc:	47d0      	blx	sl
			if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   1c3de:	f1b9 0f00 	cmp.w	r9, #0
   1c3e2:	f47f af6e 	bne.w	1c2c2 <ticker_worker+0x44>
				if (ticker->ticks_slot != 0U) {
   1c3e6:	69a3      	ldr	r3, [r4, #24]
				ticker->lazy_current = 0U;
   1c3e8:	f8a4 901e 	strh.w	r9, [r4, #30]
					slot_reserved = 1U;
   1c3ec:	2b00      	cmp	r3, #0
				ticker->force = 0U;
   1c3ee:	f884 9003 	strb.w	r9, [r4, #3]
					slot_reserved = 1U;
   1c3f2:	bf18      	it	ne
   1c3f4:	2601      	movne	r6, #1
   1c3f6:	e764      	b.n	1c2c2 <ticker_worker+0x44>
			int32_t lazy_next = ticker_next->lazy_current;
   1c3f8:	f8ba 101e 	ldrh.w	r1, [sl, #30]
				ticker_next->lazy_periodic > lazy_next;
   1c3fc:	f8ba c01c 	ldrh.w	ip, [sl, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   1c400:	f8da e004 	ldr.w	lr, [sl, #4]
			int32_t lazy_next = ticker_next->lazy_current;
   1c404:	9108      	str	r1, [sp, #32]
			if (!lazy_next_periodic_skip) {
   1c406:	4561      	cmp	r1, ip
				lazy_next -= ticker_next->lazy_periodic;
   1c408:	bf28      	it	cs
   1c40a:	eba1 030c 	subcs.w	r3, r1, ip
				ticker_next->priority;
   1c40e:	f99a 002d 	ldrsb.w	r0, [sl, #45]	; 0x2d
				lazy_next -= ticker_next->lazy_periodic;
   1c412:	bf28      	it	cs
   1c414:	9308      	strcs	r3, [sp, #32]
					  0U :
   1c416:	f1be 0f00 	cmp.w	lr, #0
   1c41a:	d049      	beq.n	1c4b0 <ticker_worker+0x232>
   1c41c:	ebae 0909 	sub.w	r9, lr, r9
				(ticker->ticks_periodic == 0U) ||
   1c420:	2a00      	cmp	r2, #0
   1c422:	d047      	beq.n	1c4b4 <ticker_worker+0x236>
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   1c424:	9b08      	ldr	r3, [sp, #32]
   1c426:	fb0e 9e03 	mla	lr, lr, r3, r9
				(ticker->ticks_periodic == 0U) ||
   1c42a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c42c:	4573      	cmp	r3, lr
   1c42e:	bf8c      	ite	hi
   1c430:	f04f 0901 	movhi.w	r9, #1
   1c434:	f04f 0900 	movls.w	r9, #0
					(ticker->ticks_periodic != 0U) &&
   1c438:	bf34      	ite	cc
   1c43a:	f04f 0e01 	movcc.w	lr, #1
   1c43e:	f04f 0e00 	movcs.w	lr, #0
			if (!lazy_next_periodic_skip &&
   1c442:	4561      	cmp	r1, ip
			uint8_t next_force = (ticker_next->force > ticker->force);
   1c444:	f89a 3003 	ldrb.w	r3, [sl, #3]
   1c448:	f894 a003 	ldrb.w	sl, [r4, #3]
			if (!lazy_next_periodic_skip &&
   1c44c:	d3a0      	bcc.n	1c390 <ticker_worker+0x112>
   1c44e:	4553      	cmp	r3, sl
   1c450:	d810      	bhi.n	1c474 <ticker_worker+0x1f6>
			    (next_force ||
   1c452:	f110 0f80 	cmn.w	r0, #128	; 0x80
   1c456:	d00d      	beq.n	1c474 <ticker_worker+0x1f6>
				(lazy_next - ticker_next->priority) >
   1c458:	9b08      	ldr	r3, [sp, #32]
			     next_is_critical ||
   1c45a:	990b      	ldr	r1, [sp, #44]	; 0x2c
				(lazy_next - ticker_next->priority) >
   1c45c:	1a1b      	subs	r3, r3, r0
			     next_is_critical ||
   1c45e:	428b      	cmp	r3, r1
   1c460:	dd02      	ble.n	1c468 <ticker_worker+0x1ea>
			     (next_has_priority && !current_is_older) ||
   1c462:	f1b9 0f00 	cmp.w	r9, #0
   1c466:	d005      	beq.n	1c474 <ticker_worker+0x1f6>
   1c468:	9b06      	ldr	r3, [sp, #24]
   1c46a:	4283      	cmp	r3, r0
   1c46c:	d190      	bne.n	1c390 <ticker_worker+0x112>
			     (equal_priority && next_is_older))) {
   1c46e:	f1be 0f00 	cmp.w	lr, #0
   1c472:	d08d      	beq.n	1c390 <ticker_worker+0x112>
			struct ticker_ext *ext_data = ticker->ext_data;
   1c474:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			if (ext_data &&
   1c476:	8be2      	ldrh	r2, [r4, #30]
   1c478:	b14b      	cbz	r3, 1c48e <ticker_worker+0x210>
   1c47a:	6819      	ldr	r1, [r3, #0]
   1c47c:	b1f1      	cbz	r1, 1c4bc <ticker_worker+0x23e>
			    ext_data->ticks_slot_window != 0U &&
   1c47e:	7a19      	ldrb	r1, [r3, #8]
   1c480:	b9e1      	cbnz	r1, 1c4bc <ticker_worker+0x23e>
			    TICKER_RESCHEDULE_STATE_NONE &&
   1c482:	8ba1      	ldrh	r1, [r4, #28]
   1c484:	4291      	cmp	r1, r2
   1c486:	d819      	bhi.n	1c4bc <ticker_worker+0x23e>
				ext_data->reschedule_state =
   1c488:	f04f 0101 	mov.w	r1, #1
				ext_data->reschedule_state =
   1c48c:	7219      	strb	r1, [r3, #8]
			ticker->lazy_current++;
   1c48e:	3201      	adds	r2, #1
			if ((ticker->must_expire == 0U) ||
   1c490:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
			ticker->lazy_current++;
   1c494:	b292      	uxth	r2, r2
   1c496:	83e2      	strh	r2, [r4, #30]
			if ((ticker->must_expire == 0U) ||
   1c498:	b131      	cbz	r1, 1c4a8 <ticker_worker+0x22a>
   1c49a:	8ba1      	ldrh	r1, [r4, #28]
   1c49c:	4291      	cmp	r1, r2
   1c49e:	d203      	bcs.n	1c4a8 <ticker_worker+0x22a>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
   1c4a0:	b173      	cbz	r3, 1c4c0 <ticker_worker+0x242>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
   1c4a2:	7a1b      	ldrb	r3, [r3, #8]
   1c4a4:	2b01      	cmp	r3, #1
   1c4a6:	d10b      	bne.n	1c4c0 <ticker_worker+0x242>
				ticker->ack--;
   1c4a8:	9b04      	ldr	r3, [sp, #16]
   1c4aa:	3b01      	subs	r3, #1
   1c4ac:	70a3      	strb	r3, [r4, #2]
				continue;
   1c4ae:	e708      	b.n	1c2c2 <ticker_worker+0x44>
					  0U :
   1c4b0:	46f1      	mov	r9, lr
   1c4b2:	e7b5      	b.n	1c420 <ticker_worker+0x1a2>
				(ticker->ticks_periodic == 0U) ||
   1c4b4:	f04f 0901 	mov.w	r9, #1
					(ticker->ticks_periodic != 0U) &&
   1c4b8:	4696      	mov	lr, r2
   1c4ba:	e7c2      	b.n	1c442 <ticker_worker+0x1c4>
				ext_data->reschedule_state =
   1c4bc:	2100      	movs	r1, #0
   1c4be:	e7e5      	b.n	1c48c <ticker_worker+0x20e>
			must_expire_skip = 1U;
   1c4c0:	f04f 0901 	mov.w	r9, #1
   1c4c4:	e76c      	b.n	1c3a0 <ticker_worker+0x122>
			ticker->timeout_func(ticks_at_expire,
   1c4c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1c4ca:	e782      	b.n	1c3d2 <ticker_worker+0x154>

0001c4cc <ticker_start>:
{
   1c4cc:	b510      	push	{r4, lr}
   1c4ce:	b08a      	sub	sp, #40	; 0x28
	return ticker_start_ext(instance_index, user_id, ticker_id,
   1c4d0:	2400      	movs	r4, #0
   1c4d2:	9409      	str	r4, [sp, #36]	; 0x24
   1c4d4:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1c4d6:	9408      	str	r4, [sp, #32]
   1c4d8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   1c4da:	9407      	str	r4, [sp, #28]
   1c4dc:	9c12      	ldr	r4, [sp, #72]	; 0x48
   1c4de:	9406      	str	r4, [sp, #24]
   1c4e0:	9c11      	ldr	r4, [sp, #68]	; 0x44
   1c4e2:	9405      	str	r4, [sp, #20]
   1c4e4:	9c10      	ldr	r4, [sp, #64]	; 0x40
   1c4e6:	9404      	str	r4, [sp, #16]
   1c4e8:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
   1c4ec:	9403      	str	r4, [sp, #12]
   1c4ee:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   1c4f0:	9402      	str	r4, [sp, #8]
   1c4f2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   1c4f4:	9401      	str	r4, [sp, #4]
   1c4f6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1c4f8:	9400      	str	r4, [sp, #0]
   1c4fa:	f7f2 fdb3 	bl	f064 <ticker_start_ext>
}
   1c4fe:	b00a      	add	sp, #40	; 0x28
   1c500:	bd10      	pop	{r4, pc}

0001c502 <ticker_update>:
{
   1c502:	b510      	push	{r4, lr}
   1c504:	b088      	sub	sp, #32
	return ticker_update_ext(instance_index, user_id, ticker_id,
   1c506:	2400      	movs	r4, #0
   1c508:	9407      	str	r4, [sp, #28]
   1c50a:	9c10      	ldr	r4, [sp, #64]	; 0x40
   1c50c:	9406      	str	r4, [sp, #24]
   1c50e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   1c510:	9405      	str	r4, [sp, #20]
   1c512:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
   1c516:	9404      	str	r4, [sp, #16]
   1c518:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
   1c51c:	9403      	str	r4, [sp, #12]
   1c51e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1c520:	9402      	str	r4, [sp, #8]
   1c522:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1c524:	9401      	str	r4, [sp, #4]
   1c526:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1c528:	9400      	str	r4, [sp, #0]
   1c52a:	f7f2 fde9 	bl	f100 <ticker_update_ext>
}
   1c52e:	b008      	add	sp, #32
   1c530:	bd10      	pop	{r4, pc}

0001c532 <ticker_ticks_now_get>:
	return cntr_cnt_get();
   1c532:	f7f8 bbad 	b.w	14c90 <cntr_cnt_get>

0001c536 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1c536:	1a40      	subs	r0, r0, r1
}
   1c538:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1c53c:	4770      	bx	lr

0001c53e <ll_tx_pwr_lvl_get>:

#include "ll.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
   1c53e:	b538      	push	{r3, r4, r5, lr}
   1c540:	4604      	mov	r4, r0
	switch (handle_type) {
   1c542:	2c02      	cmp	r4, #2
{
   1c544:	4608      	mov	r0, r1
   1c546:	461d      	mov	r5, r3
	switch (handle_type) {
   1c548:	d106      	bne.n	1c558 <ll_tx_pwr_lvl_get+0x1a>
#endif /* CONFIG_BT_OBSERVER && CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL*/
#if defined(CONFIG_BT_CONN)
		case (BT_HCI_VS_LL_HANDLE_TYPE_CONN): {
			struct ll_conn *conn;

			conn = ll_connected_get(handle);
   1c54a:	f000 f9b8 	bl	1c8be <ll_connected_get>
			if (!conn) {
   1c54e:	b108      	cbz	r0, 1c554 <ll_tx_pwr_lvl_get+0x16>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
				/* Level desired is maximum available */
				*tx_pwr_lvl = lll_radio_tx_pwr_max_get();
#else  /* !CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
				/* Return default if not multiple TXP */
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   1c550:	2400      	movs	r4, #0
   1c552:	702c      	strb	r4, [r5, #0]
			return BT_HCI_ERR_UNKNOWN_CMD;
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
   1c554:	4620      	mov	r0, r4
   1c556:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_UNKNOWN_CMD;
   1c558:	2401      	movs	r4, #1
   1c55a:	e7fb      	b.n	1c554 <ll_tx_pwr_lvl_get+0x16>

0001c55c <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
   1c55c:	2300      	movs	r3, #0
   1c55e:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   1c560:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
   1c562:	4770      	bx	lr

0001c564 <sys_get_le64>:
{
   1c564:	4603      	mov	r3, r0
}
   1c566:	6800      	ldr	r0, [r0, #0]
   1c568:	6859      	ldr	r1, [r3, #4]
   1c56a:	4770      	bx	lr

0001c56c <meta_evt>:
{
   1c56c:	b570      	push	{r4, r5, r6, lr}
	return net_buf_simple_add(&buf->b, len);
   1c56e:	f100 0408 	add.w	r4, r0, #8
   1c572:	460e      	mov	r6, r1
   1c574:	4620      	mov	r0, r4
   1c576:	2102      	movs	r1, #2
   1c578:	4615      	mov	r5, r2
   1c57a:	f000 fea0 	bl	1d2be <net_buf_simple_add>
	hdr->evt = evt;
   1c57e:	233e      	movs	r3, #62	; 0x3e
   1c580:	7003      	strb	r3, [r0, #0]
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   1c582:	1c6b      	adds	r3, r5, #1
	hdr->len = len;
   1c584:	7043      	strb	r3, [r0, #1]
   1c586:	2101      	movs	r1, #1
   1c588:	4620      	mov	r0, r4
   1c58a:	f000 fe98 	bl	1d2be <net_buf_simple_add>
	me->subevent = subevt;
   1c58e:	7006      	strb	r6, [r0, #0]
   1c590:	4629      	mov	r1, r5
   1c592:	4620      	mov	r0, r4
}
   1c594:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1c598:	f000 be91 	b.w	1d2be <net_buf_simple_add>

0001c59c <hci_num_cmplt_encode>:
{
   1c59c:	b570      	push	{r4, r5, r6, lr}
   1c59e:	f100 0408 	add.w	r4, r0, #8
   1c5a2:	460e      	mov	r6, r1
   1c5a4:	4620      	mov	r0, r4
   1c5a6:	2102      	movs	r1, #2
   1c5a8:	4615      	mov	r5, r2
   1c5aa:	f000 fe88 	bl	1d2be <net_buf_simple_add>
	hdr->evt = evt;
   1c5ae:	2313      	movs	r3, #19
	hdr->len = len;
   1c5b0:	2105      	movs	r1, #5
	hdr->evt = evt;
   1c5b2:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1c5b4:	7041      	strb	r1, [r0, #1]
   1c5b6:	4620      	mov	r0, r4
   1c5b8:	f000 fe81 	bl	1d2be <net_buf_simple_add>
	ep->num_handles = num_handles;
   1c5bc:	2301      	movs	r3, #1
   1c5be:	7003      	strb	r3, [r0, #0]
	hc->handle = sys_cpu_to_le16(handle);
   1c5c0:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   1c5c4:	f8a0 5003 	strh.w	r5, [r0, #3]
}
   1c5c8:	bd70      	pop	{r4, r5, r6, pc}

0001c5ca <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
   1c5ca:	f7f6 bed1 	b.w	13370 <lll_csrand_get>

0001c5ce <bt_encrypt_be>:
	return 0;
}

int bt_encrypt_be(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   1c5ce:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt_be(key, plaintext, enc_data);
   1c5d0:	f000 fcdf 	bl	1cf92 <ecb_encrypt_be>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   1c5d4:	2000      	movs	r0, #0
   1c5d6:	bd08      	pop	{r3, pc}

0001c5d8 <ll_feat_get>:

#else /* !CONFIG_BT_CTLR_SET_HOST_FEATURE */
uint64_t ll_feat_get(void)
{
	return LL_FEAT;
}
   1c5d8:	208e      	movs	r0, #142	; 0x8e
   1c5da:	2100      	movs	r1, #0
   1c5dc:	4770      	bx	lr

0001c5de <disabled_cb>:
   1c5de:	f7fa bef5 	b.w	173cc <z_impl_k_sem_give>

0001c5e2 <rx_demux_conn_tx_ack>:
{
   1c5e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c5e4:	4605      	mov	r5, r0
   1c5e6:	4614      	mov	r4, r2
   1c5e8:	9300      	str	r3, [sp, #0]
   1c5ea:	f8ad 1006 	strh.w	r1, [sp, #6]
		ull_conn_ack_dequeue();
   1c5ee:	f7f6 fb35 	bl	12c5c <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   1c5f2:	4621      	mov	r1, r4
   1c5f4:	9a00      	ldr	r2, [sp, #0]
   1c5f6:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   1c5fa:	f7f6 fb73 	bl	12ce4 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   1c5fe:	4620      	mov	r0, r4
   1c600:	f7f6 faf2 	bl	12be8 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   1c604:	466a      	mov	r2, sp
   1c606:	f10d 0106 	add.w	r1, sp, #6
   1c60a:	4628      	mov	r0, r5
   1c60c:	f7f6 fb10 	bl	12c30 <ull_conn_ack_by_last_peek>
	} while (link);
   1c610:	4604      	mov	r4, r0
   1c612:	2800      	cmp	r0, #0
   1c614:	d1eb      	bne.n	1c5ee <rx_demux_conn_tx_ack+0xc>
			ll_rx_sched();
   1c616:	f7f4 fb05 	bl	10c24 <ll_rx_sched>
}
   1c61a:	b003      	add	sp, #12
   1c61c:	bd30      	pop	{r4, r5, pc}

0001c61e <ll_timeslice_ticker_id_get>:
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   1c61e:	2300      	movs	r3, #0
   1c620:	7003      	strb	r3, [r0, #0]
	*ticker_id = (TICKER_NODES - FLASH_TICKER_NODES);
   1c622:	2306      	movs	r3, #6
   1c624:	700b      	strb	r3, [r1, #0]
}
   1c626:	4770      	bx	lr

0001c628 <lll_prepare>:
{
   1c628:	b507      	push	{r0, r1, r2, lr}
	return lll_prepare_resolve(is_abort_cb, abort_cb, prepare_cb,
   1c62a:	2300      	movs	r3, #0
   1c62c:	e9cd 3300 	strd	r3, r3, [sp]
   1c630:	9b04      	ldr	r3, [sp, #16]
   1c632:	f7f6 ffd5 	bl	135e0 <lll_prepare_resolve>
}
   1c636:	b003      	add	sp, #12
   1c638:	f85d fb04 	ldr.w	pc, [sp], #4

0001c63c <adva_update.isra.0>:
static const uint8_t *adva_update(struct ll_adv_set *adv, struct pdu_adv *pdu)
   1c63c:	b510      	push	{r4, lr}
			own_addr = ll_addr_get(pdu->tx_addr, NULL);
   1c63e:	4604      	mov	r4, r0
   1c640:	2100      	movs	r1, #0
   1c642:	f814 0b02 	ldrb.w	r0, [r4], #2
   1c646:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1c64a:	f7f2 fddf 	bl	f20c <ll_addr_get>
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
   1c64e:	2206      	movs	r2, #6
			own_addr = ll_addr_get(pdu->tx_addr, NULL);
   1c650:	4601      	mov	r1, r0
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
   1c652:	4620      	mov	r0, r4
   1c654:	f7fd faa6 	bl	19ba4 <memcpy>
}
   1c658:	4620      	mov	r0, r4
   1c65a:	bd10      	pop	{r4, pc}

0001c65c <ull_adv_init>:
	err = init_reset();
   1c65c:	f7f4 bfb8 	b.w	115d0 <init_reset>

0001c660 <ull_adv_reset>:
{
   1c660:	b508      	push	{r3, lr}
		(void)disable(handle);
   1c662:	f7f5 f87d 	bl	11760 <disable.constprop.0>
}
   1c666:	2000      	movs	r0, #0
   1c668:	bd08      	pop	{r3, pc}

0001c66a <ull_adv_is_enabled>:
{
   1c66a:	b508      	push	{r3, lr}
	adv = ull_adv_is_enabled_get(handle);
   1c66c:	f7f5 f86a 	bl	11744 <ull_adv_is_enabled_get>
}
   1c670:	3800      	subs	r0, #0
   1c672:	bf18      	it	ne
   1c674:	2001      	movne	r0, #1
   1c676:	bd08      	pop	{r3, pc}

0001c678 <ull_adv_filter_pol_get>:
{
   1c678:	b508      	push	{r3, lr}
	adv = ull_adv_is_enabled_get(handle);
   1c67a:	f7f5 f863 	bl	11744 <ull_adv_is_enabled_get>
	if (!adv) {
   1c67e:	b118      	cbz	r0, 1c688 <ull_adv_filter_pol_get+0x10>
	return adv->lll.filter_policy;
   1c680:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
   1c684:	f000 0003 	and.w	r0, r0, #3
}
   1c688:	bd08      	pop	{r3, pc}

0001c68a <ull_adv_data_set>:
{
   1c68a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1c68e:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   1c692:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1c696:	4606      	mov	r6, r0
   1c698:	6add      	ldr	r5, [r3, #44]	; 0x2c
	if (prev->type == PDU_ADV_TYPE_DIRECT_IND) {
   1c69a:	782b      	ldrb	r3, [r5, #0]
   1c69c:	f003 030f 	and.w	r3, r3, #15
   1c6a0:	2b01      	cmp	r3, #1
{
   1c6a2:	460c      	mov	r4, r1
   1c6a4:	4690      	mov	r8, r2
	if (prev->type == PDU_ADV_TYPE_DIRECT_IND) {
   1c6a6:	d025      	beq.n	1c6f4 <ull_adv_data_set+0x6a>
	if (len > PDU_AC_DATA_SIZE_MAX) {
   1c6a8:	291f      	cmp	r1, #31
   1c6aa:	d827      	bhi.n	1c6fc <ull_adv_data_set+0x72>
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   1c6ac:	f10d 0107 	add.w	r1, sp, #7
   1c6b0:	3028      	adds	r0, #40	; 0x28
   1c6b2:	f7f7 f98f 	bl	139d4 <lll_adv_pdu_alloc>
	pdu->tx_addr = prev->tx_addr;
   1c6b6:	4629      	mov	r1, r5
   1c6b8:	4607      	mov	r7, r0
   1c6ba:	f811 2b02 	ldrb.w	r2, [r1], #2
   1c6be:	f3c2 1080 	ubfx	r0, r2, #6, #1
	pdu->type = prev->type;
   1c6c2:	f3c2 0303 	ubfx	r3, r2, #0, #4
   1c6c6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
   1c6ca:	f002 0280 	and.w	r2, r2, #128	; 0x80
   1c6ce:	4638      	mov	r0, r7
   1c6d0:	4313      	orrs	r3, r2
   1c6d2:	f800 3b02 	strb.w	r3, [r0], #2
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   1c6d6:	2206      	movs	r2, #6
   1c6d8:	f7fd fa64 	bl	19ba4 <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
   1c6dc:	4622      	mov	r2, r4
   1c6de:	4641      	mov	r1, r8
   1c6e0:	f107 0008 	add.w	r0, r7, #8
   1c6e4:	f7fd fa5e 	bl	19ba4 <memcpy>
	pdu->len = BDADDR_SIZE + len;
   1c6e8:	3406      	adds	r4, #6
	pdu->last = idx;
   1c6ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1c6ee:	707c      	strb	r4, [r7, #1]
   1c6f0:	f886 3029 	strb.w	r3, [r6, #41]	; 0x29
		return 0;
   1c6f4:	2000      	movs	r0, #0
}
   1c6f6:	b002      	add	sp, #8
   1c6f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_INVALID_PARAM;
   1c6fc:	2012      	movs	r0, #18
   1c6fe:	e7fa      	b.n	1c6f6 <ull_adv_data_set+0x6c>

0001c700 <ull_scan_rsp_set>:
	if (len > PDU_AC_DATA_SIZE_MAX) {
   1c700:	291f      	cmp	r1, #31
{
   1c702:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1c706:	4604      	mov	r4, r0
   1c708:	460e      	mov	r6, r1
   1c70a:	4617      	mov	r7, r2
	if (len > PDU_AC_DATA_SIZE_MAX) {
   1c70c:	d828      	bhi.n	1c760 <ull_scan_rsp_set+0x60>
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   1c70e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   1c712:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   1c716:	f10d 0107 	add.w	r1, sp, #7
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   1c71a:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   1c71e:	3034      	adds	r0, #52	; 0x34
   1c720:	f7f7 f958 	bl	139d4 <lll_adv_pdu_alloc>
	pdu->tx_addr = prev->tx_addr;
   1c724:	4641      	mov	r1, r8
   1c726:	4605      	mov	r5, r0
   1c728:	f811 3b02 	ldrb.w	r3, [r1], #2
   1c72c:	f3c3 1380 	ubfx	r3, r3, #6, #1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1c730:	019b      	lsls	r3, r3, #6
   1c732:	f043 0304 	orr.w	r3, r3, #4
   1c736:	7003      	strb	r3, [r0, #0]
	pdu->len = BDADDR_SIZE + len;
   1c738:	1db3      	adds	r3, r6, #6
   1c73a:	7043      	strb	r3, [r0, #1]
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   1c73c:	2206      	movs	r2, #6
   1c73e:	3002      	adds	r0, #2
   1c740:	f7fd fa30 	bl	19ba4 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   1c744:	4632      	mov	r2, r6
   1c746:	4639      	mov	r1, r7
   1c748:	f105 0008 	add.w	r0, r5, #8
   1c74c:	f7fd fa2a 	bl	19ba4 <memcpy>
	pdu->last = idx;
   1c750:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1c754:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	return 0;
   1c758:	2000      	movs	r0, #0
}
   1c75a:	b002      	add	sp, #8
   1c75c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_INVALID_PARAM;
   1c760:	2012      	movs	r0, #18
   1c762:	e7fa      	b.n	1c75a <ull_scan_rsp_set+0x5a>

0001c764 <ull_scan_init>:
}
   1c764:	2000      	movs	r0, #0
   1c766:	4770      	bx	lr

0001c768 <disable.constprop.0>:
	ll_rx_put(rx_hdr->link, rx_hdr);
	ll_rx_sched();
}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

static uint8_t disable(uint8_t handle)
   1c768:	b510      	push	{r4, lr}
{
	struct ll_scan_set *scan;
	uint8_t ret;

	scan = ull_scan_is_enabled_get(handle);
   1c76a:	2000      	movs	r0, #0
   1c76c:	f7f5 f916 	bl	1199c <ull_scan_is_enabled_get>
	if (!scan) {
   1c770:	4604      	mov	r4, r0
   1c772:	b158      	cbz	r0, 1c78c <disable.constprop.0+0x24>
	if (scan->lll.conn) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}
#endif

	ret = ull_scan_disable(handle, scan);
   1c774:	4601      	mov	r1, r0
   1c776:	2000      	movs	r0, #0
   1c778:	f7f5 f8e6 	bl	11948 <ull_scan_disable>
	if (ret) {
   1c77c:	b928      	cbnz	r0, 1c78a <disable.constprop.0+0x22>
		return ret;
	}

	scan->is_enabled = 0U;
   1c77e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   1c782:	f360 0300 	bfi	r3, r0, #0, #1
   1c786:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		ull_filter_adv_scan_state_cb(0);
	}
#endif

	return 0;
}
   1c78a:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1c78c:	200c      	movs	r0, #12
   1c78e:	e7fc      	b.n	1c78a <disable.constprop.0+0x22>

0001c790 <ull_scan_reset>:
{
   1c790:	b508      	push	{r3, lr}
		(void)disable(handle);
   1c792:	f7ff ffe9 	bl	1c768 <disable.constprop.0>
}
   1c796:	2000      	movs	r0, #0
   1c798:	bd08      	pop	{r3, pc}

0001c79a <ll_scan_enable>:
{
   1c79a:	b510      	push	{r4, lr}
	if (!enable) {
   1c79c:	b918      	cbnz	r0, 1c7a6 <ll_scan_enable+0xc>
}
   1c79e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = disable(SCAN_HANDLE_1M);
   1c7a2:	f7ff bfe1 	b.w	1c768 <disable.constprop.0>
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
   1c7a6:	2000      	movs	r0, #0
   1c7a8:	f7f5 f906 	bl	119b8 <ull_scan_is_disabled_get>
	if (!scan) {
   1c7ac:	4604      	mov	r4, r0
   1c7ae:	b198      	cbz	r0, 1c7d8 <ll_scan_enable+0x3e>
	    (!is_coded_phy && (scan->own_addr_type & 0x1))) {
   1c7b0:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
   1c7b4:	079b      	lsls	r3, r3, #30
   1c7b6:	d404      	bmi.n	1c7c2 <ll_scan_enable+0x28>
		err = ull_scan_enable(scan);
   1c7b8:	4620      	mov	r0, r4
}
   1c7ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = ull_scan_enable(scan);
   1c7be:	f7e4 b80b 	b.w	7d8 <ull_scan_enable>
		if (!mem_nz(ll_addr_get(1, NULL), BDADDR_SIZE)) {
   1c7c2:	2100      	movs	r1, #0
   1c7c4:	2001      	movs	r0, #1
   1c7c6:	f7f2 fd21 	bl	f20c <ll_addr_get>
   1c7ca:	2106      	movs	r1, #6
   1c7cc:	f7ff fc06 	bl	1bfdc <mem_nz>
   1c7d0:	2800      	cmp	r0, #0
   1c7d2:	d1f1      	bne.n	1c7b8 <ll_scan_enable+0x1e>
			return BT_HCI_ERR_INVALID_PARAM;
   1c7d4:	2012      	movs	r0, #18
}
   1c7d6:	bd10      	pop	{r4, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   1c7d8:	200c      	movs	r0, #12
   1c7da:	e7fc      	b.n	1c7d6 <ll_scan_enable+0x3c>

0001c7dc <ull_scan_is_enabled>:
{
   1c7dc:	b508      	push	{r3, lr}
	scan = ull_scan_is_enabled_get(handle);
   1c7de:	f7f5 f8dd 	bl	1199c <ull_scan_is_enabled_get>
	if (!scan) {
   1c7e2:	b148      	cbz	r0, 1c7f8 <ull_scan_is_enabled+0x1c>
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
   1c7e4:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
   1c7e8:	f890 0020 	ldrb.w	r0, [r0, #32]
   1c7ec:	f003 0301 	and.w	r3, r3, #1
   1c7f0:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1c7f4:	fa03 f000 	lsl.w	r0, r3, r0
}
   1c7f8:	bd08      	pop	{r3, pc}

0001c7fa <ull_scan_filter_pol_get>:
{
   1c7fa:	b508      	push	{r3, lr}
	scan = ull_scan_is_enabled_get(handle);
   1c7fc:	f7f5 f8ce 	bl	1199c <ull_scan_is_enabled_get>
	if (!scan) {
   1c800:	b118      	cbz	r0, 1c80a <ull_scan_filter_pol_get+0x10>
	return scan->lll.filter_policy;
   1c802:	f890 0020 	ldrb.w	r0, [r0, #32]
   1c806:	f3c0 00c1 	ubfx	r0, r0, #3, #2
}
   1c80a:	bd08      	pop	{r3, pc}

0001c80c <sys_put_le64>:
	dst[1] = val >> 8;
   1c80c:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   1c810:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   1c812:	7053      	strb	r3, [r2, #1]
	sys_put_le16(val >> 16, &dst[2]);
   1c814:	0c00      	lsrs	r0, r0, #16
	dst[1] = val >> 8;
   1c816:	f3c1 2307 	ubfx	r3, r1, #8, #8
	dst[0] = val;
   1c81a:	7111      	strb	r1, [r2, #4]
	sys_put_le16(val >> 16, &dst[2]);
   1c81c:	0c09      	lsrs	r1, r1, #16
	dst[0] = val;
   1c81e:	7090      	strb	r0, [r2, #2]
   1c820:	7191      	strb	r1, [r2, #6]
	dst[1] = val >> 8;
   1c822:	0a00      	lsrs	r0, r0, #8
   1c824:	0a09      	lsrs	r1, r1, #8
   1c826:	70d0      	strb	r0, [r2, #3]
   1c828:	7153      	strb	r3, [r2, #5]
   1c82a:	71d1      	strb	r1, [r2, #7]
}
   1c82c:	4770      	bx	lr

0001c82e <sys_get_le64>:
{
   1c82e:	4603      	mov	r3, r0
}
   1c830:	6800      	ldr	r0, [r0, #0]
   1c832:	6859      	ldr	r1, [r3, #4]
   1c834:	4770      	bx	lr

0001c836 <ctrl_tx_enqueue>:
	if (
   1c836:	e9d0 3247 	ldrd	r3, r2, [r0, #284]	; 0x11c
{
   1c83a:	b510      	push	{r4, lr}
	if (
   1c83c:	b18b      	cbz	r3, 1c862 <ctrl_tx_enqueue+0x2c>
		if (conn->tx_head == conn->tx_data) {
   1c83e:	f8d0 4128 	ldr.w	r4, [r0, #296]	; 0x128
   1c842:	42a3      	cmp	r3, r4
			conn->tx_data = conn->tx_data->next;
   1c844:	bf04      	itt	eq
   1c846:	681c      	ldreq	r4, [r3, #0]
   1c848:	f8c0 4128 	streq.w	r4, [r0, #296]	; 0x128
		if (!conn->tx_ctrl) {
   1c84c:	b992      	cbnz	r2, 1c874 <ctrl_tx_enqueue+0x3e>
			tx->next = conn->tx_head->next;
   1c84e:	681a      	ldr	r2, [r3, #0]
   1c850:	600a      	str	r2, [r1, #0]
			conn->tx_head->next = tx;
   1c852:	6019      	str	r1, [r3, #0]
				conn->tx_ctrl = tx;
   1c854:	f8c0 1120 	str.w	r1, [r0, #288]	; 0x120
	if (!tx->next) {
   1c858:	680b      	ldr	r3, [r1, #0]
	conn->tx_ctrl_last = tx;
   1c85a:	f8c0 1124 	str.w	r1, [r0, #292]	; 0x124
	if (!tx->next) {
   1c85e:	b133      	cbz	r3, 1c86e <ctrl_tx_enqueue+0x38>
}
   1c860:	bd10      	pop	{r4, pc}
		if (!conn->tx_ctrl) {
   1c862:	b93a      	cbnz	r2, 1c874 <ctrl_tx_enqueue+0x3e>
			tx->next = conn->tx_head;
   1c864:	600a      	str	r2, [r1, #0]
				conn->tx_ctrl = tx;
   1c866:	e9c0 1147 	strd	r1, r1, [r0, #284]	; 0x11c
				conn->tx_ctrl_last = tx;
   1c86a:	f8c0 1124 	str.w	r1, [r0, #292]	; 0x124
		conn->tx_data_last = tx;
   1c86e:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
}
   1c872:	e7f5      	b.n	1c860 <ctrl_tx_enqueue+0x2a>
	tx->next = conn->tx_ctrl_last->next;
   1c874:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
   1c878:	681a      	ldr	r2, [r3, #0]
   1c87a:	600a      	str	r2, [r1, #0]
	conn->tx_ctrl_last->next = tx;
   1c87c:	6019      	str	r1, [r3, #0]
   1c87e:	e7eb      	b.n	1c858 <ctrl_tx_enqueue+0x22>

0001c880 <reject_ext_ind_send.constprop.0>:
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   1c880:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1c882:	460c      	mov	r4, r1
   1c884:	4616      	mov	r6, r2
	tx = ctrl_tx_rsp_mem_acquire(conn, rx, &err);
   1c886:	3104      	adds	r1, #4
   1c888:	aa01      	add	r2, sp, #4
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   1c88a:	4605      	mov	r5, r0
	tx = ctrl_tx_rsp_mem_acquire(conn, rx, &err);
   1c88c:	f7f5 f8c6 	bl	11a1c <ctrl_tx_rsp_mem_acquire.isra.0>
	if (!tx) {
   1c890:	4601      	mov	r1, r0
   1c892:	b910      	cbnz	r0, 1c89a <reject_ext_ind_send.constprop.0+0x1a>
		return err;
   1c894:	9801      	ldr	r0, [sp, #4]
}
   1c896:	b002      	add	sp, #8
   1c898:	bd70      	pop	{r4, r5, r6, pc}
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1c89a:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   1c89c:	7246      	strb	r6, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1c89e:	f043 0303 	orr.w	r3, r3, #3
   1c8a2:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   1c8a4:	2303      	movs	r3, #3
   1c8a6:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   1c8a8:	2311      	movs	r3, #17
   1c8aa:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   1c8ac:	230f      	movs	r3, #15
   1c8ae:	7203      	strb	r3, [r0, #8]
	ctrl_tx_enqueue(conn, tx);
   1c8b0:	4628      	mov	r0, r5
   1c8b2:	f7ff ffc0 	bl	1c836 <ctrl_tx_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1c8b6:	2301      	movs	r3, #1
   1c8b8:	7123      	strb	r3, [r4, #4]
	return 0;
   1c8ba:	2000      	movs	r0, #0
   1c8bc:	e7eb      	b.n	1c896 <reject_ext_ind_send.constprop.0+0x16>

0001c8be <ll_connected_get>:
{
   1c8be:	b508      	push	{r3, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   1c8c0:	b918      	cbnz	r0, 1c8ca <ll_connected_get+0xc>
	conn = ll_conn_get(handle);
   1c8c2:	f7f5 fa41 	bl	11d48 <ll_conn_get>
	if (conn->lll.handle != handle) {
   1c8c6:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   1c8c8:	b103      	cbz	r3, 1c8cc <ll_connected_get+0xe>
		return NULL;
   1c8ca:	2000      	movs	r0, #0
}
   1c8cc:	bd08      	pop	{r3, pc}

0001c8ce <ll_conn_update>:
{
   1c8ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c8d2:	4605      	mov	r5, r0
   1c8d4:	f8bd a020 	ldrh.w	sl, [sp, #32]
   1c8d8:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
   1c8dc:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
   1c8e0:	460c      	mov	r4, r1
   1c8e2:	4617      	mov	r7, r2
   1c8e4:	461e      	mov	r6, r3
	conn = ll_connected_get(handle);
   1c8e6:	f7ff ffea 	bl	1c8be <ll_connected_get>
	if (!conn) {
   1c8ea:	2800      	cmp	r0, #0
   1c8ec:	d072      	beq.n	1c9d4 <ll_conn_update+0x106>
	if (!cmd) {
   1c8ee:	bba4      	cbnz	r4, 1c95a <ll_conn_update+0x8c>
		if (!conn->llcp_conn_param.disabled &&
   1c8f0:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   1c8f4:	f013 0c10 	ands.w	ip, r3, #16
   1c8f8:	d10b      	bne.n	1c912 <ll_conn_update+0x44>
		    (!conn->common.fex_valid ||
   1c8fa:	f890 107c 	ldrb.w	r1, [r0, #124]	; 0x7c
		if (!conn->llcp_conn_param.disabled &&
   1c8fe:	f011 0101 	ands.w	r1, r1, #1
   1c902:	d048      	beq.n	1c996 <ll_conn_update+0xc8>
		     (conn->llcp_feature.features_conn &
   1c904:	f8d0 40b8 	ldr.w	r4, [r0, #184]	; 0xb8
   1c908:	4663      	mov	r3, ip
   1c90a:	f004 0202 	and.w	r2, r4, #2
		    (!conn->common.fex_valid ||
   1c90e:	4313      	orrs	r3, r2
   1c910:	d124      	bne.n	1c95c <ll_conn_update+0x8e>
		} else if (conn->lll.role) {
   1c912:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   1c916:	2b00      	cmp	r3, #0
   1c918:	db5e      	blt.n	1c9d8 <ll_conn_update+0x10a>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   1c91a:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
   1c91e:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
   1c922:	429a      	cmp	r2, r3
   1c924:	d15a      	bne.n	1c9dc <ll_conn_update+0x10e>
		conn->llcp_cu.win_size = 1U;
   1c926:	2301      	movs	r3, #1
   1c928:	f880 30ac 	strb.w	r3, [r0, #172]	; 0xac
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1c92c:	f890 309e 	ldrb.w	r3, [r0, #158]	; 0x9e
		conn->llcp_cu.interval = interval_max;
   1c930:	f8a0 a0a0 	strh.w	sl, [r0, #160]	; 0xa0
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1c934:	f023 030f 	bic.w	r3, r3, #15
		conn->llcp_cu.win_offset_us = 0U;
   1c938:	2400      	movs	r4, #0
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1c93a:	f043 0309 	orr.w	r3, r3, #9
		conn->llcp_cu.req++;
   1c93e:	3201      	adds	r2, #1
		conn->llcp_cu.win_offset_us = 0U;
   1c940:	f8c0 40a8 	str.w	r4, [r0, #168]	; 0xa8
		conn->llcp_cu.latency = latency;
   1c944:	f8a0 90a2 	strh.w	r9, [r0, #162]	; 0xa2
		conn->llcp_cu.timeout = timeout;
   1c948:	f8a0 80a4 	strh.w	r8, [r0, #164]	; 0xa4
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1c94c:	f880 309e 	strb.w	r3, [r0, #158]	; 0x9e
		conn->llcp_cu.req++;
   1c950:	f880 209c 	strb.w	r2, [r0, #156]	; 0x9c
}
   1c954:	4620      	mov	r0, r4
   1c956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c95a:	4621      	mov	r1, r4
		cmd--;
   1c95c:	1e4c      	subs	r4, r1, #1
		if (cmd) {
   1c95e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   1c962:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
   1c966:	f890 20f5 	ldrb.w	r2, [r0, #245]	; 0xf5
   1c96a:	d016      	beq.n	1c99a <ll_conn_update+0xcc>
			if ((conn->llcp_conn_param.req ==
   1c96c:	4293      	cmp	r3, r2
   1c96e:	d035      	beq.n	1c9dc <ll_conn_update+0x10e>
			    (conn->llcp_conn_param.state !=
   1c970:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
			     conn->llcp_conn_param.ack) ||
   1c974:	f003 0207 	and.w	r2, r3, #7
   1c978:	2a03      	cmp	r2, #3
   1c97a:	d12f      	bne.n	1c9dc <ll_conn_update+0x10e>
			conn->llcp_conn_param.state = cmd;
   1c97c:	f004 0407 	and.w	r4, r4, #7
   1c980:	f044 0408 	orr.w	r4, r4, #8
   1c984:	f023 030f 	bic.w	r3, r3, #15
   1c988:	431c      	orrs	r4, r3
   1c98a:	f880 40f6 	strb.w	r4, [r0, #246]	; 0xf6
			conn->llcp_conn_param.status = status;
   1c98e:	f880 70f7 	strb.w	r7, [r0, #247]	; 0xf7
	return 0;
   1c992:	2400      	movs	r4, #0
   1c994:	e7de      	b.n	1c954 <ll_conn_update+0x86>
			cmd++;
   1c996:	2101      	movs	r1, #1
   1c998:	e7e0      	b.n	1c95c <ll_conn_update+0x8e>
			if (conn->llcp_conn_param.req !=
   1c99a:	4293      	cmp	r3, r2
   1c99c:	d11e      	bne.n	1c9dc <ll_conn_update+0x10e>
			conn->llcp_conn_param.state = cmd;
   1c99e:	f8b0 20f6 	ldrh.w	r2, [r0, #246]	; 0xf6
			conn->llcp_conn_param.interval_min = interval_min;
   1c9a2:	f8a0 60f8 	strh.w	r6, [r0, #248]	; 0xf8
			conn->llcp_conn_param.req++;
   1c9a6:	3301      	adds	r3, #1
   1c9a8:	f880 30f4 	strb.w	r3, [r0, #244]	; 0xf4
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1c9ac:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
			conn->llcp_conn_param.interval_max = interval_max;
   1c9b0:	f8a0 a0fa 	strh.w	sl, [r0, #250]	; 0xfa
			conn->llcp_conn_param.state = cmd;
   1c9b4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
   1c9b8:	f042 0208 	orr.w	r2, r2, #8
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1c9bc:	2b00      	cmp	r3, #0
			conn->llcp_conn_param.latency = latency;
   1c9be:	f8a0 90fc 	strh.w	r9, [r0, #252]	; 0xfc
			conn->llcp_conn_param.timeout = timeout;
   1c9c2:	f8a0 80fe 	strh.w	r8, [r0, #254]	; 0xfe
			conn->llcp_conn_param.state = cmd;
   1c9c6:	f8a0 20f6 	strh.w	r2, [r0, #246]	; 0xf6
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1c9ca:	dac3      	bge.n	1c954 <ll_conn_update+0x86>
				ull_slave_latency_cancel(conn, handle);
   1c9cc:	4629      	mov	r1, r5
   1c9ce:	f7f6 fa9d 	bl	12f0c <ull_slave_latency_cancel>
   1c9d2:	e7bf      	b.n	1c954 <ll_conn_update+0x86>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1c9d4:	2402      	movs	r4, #2
   1c9d6:	e7bd      	b.n	1c954 <ll_conn_update+0x86>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   1c9d8:	241a      	movs	r4, #26
   1c9da:	e7bb      	b.n	1c954 <ll_conn_update+0x86>
			return BT_HCI_ERR_CMD_DISALLOWED;
   1c9dc:	240c      	movs	r4, #12
   1c9de:	e7b9      	b.n	1c954 <ll_conn_update+0x86>

0001c9e0 <ll_chm_get>:
{
   1c9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c9e2:	460d      	mov	r5, r1
	conn = ll_connected_get(handle);
   1c9e4:	f7ff ff6b 	bl	1c8be <ll_connected_get>
	if (!conn) {
   1c9e8:	4604      	mov	r4, r0
   1c9ea:	b170      	cbz	r0, 1ca0a <ll_chm_get+0x2a>
		conn->chm_updated = 0U;
   1c9ec:	2700      	movs	r7, #0
		memcpy(chm, conn->lll.data_chan_map,
   1c9ee:	f100 0634 	add.w	r6, r0, #52	; 0x34
		conn->chm_updated = 0U;
   1c9f2:	f884 7130 	strb.w	r7, [r4, #304]	; 0x130
		memcpy(chm, conn->lll.data_chan_map,
   1c9f6:	2205      	movs	r2, #5
   1c9f8:	4631      	mov	r1, r6
   1c9fa:	4628      	mov	r0, r5
   1c9fc:	f7fd f8d2 	bl	19ba4 <memcpy>
	} while (conn->chm_updated);
   1ca00:	f894 0130 	ldrb.w	r0, [r4, #304]	; 0x130
   1ca04:	2800      	cmp	r0, #0
   1ca06:	d1f4      	bne.n	1c9f2 <ll_chm_get+0x12>
}
   1ca08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1ca0a:	2002      	movs	r0, #2
   1ca0c:	e7fc      	b.n	1ca08 <ll_chm_get+0x28>

0001ca0e <ll_feature_req_send>:
{
   1ca0e:	b510      	push	{r4, lr}
   1ca10:	4604      	mov	r4, r0
	conn = ll_connected_get(handle);
   1ca12:	f7ff ff54 	bl	1c8be <ll_connected_get>
	if (!conn) {
   1ca16:	b188      	cbz	r0, 1ca3c <ll_feature_req_send+0x2e>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   1ca18:	f890 10b0 	ldrb.w	r1, [r0, #176]	; 0xb0
   1ca1c:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
   1ca20:	428a      	cmp	r2, r1
   1ca22:	d10d      	bne.n	1ca40 <ll_feature_req_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1ca24:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	conn->llcp_feature.req++;
   1ca28:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1ca2a:	2b00      	cmp	r3, #0
	conn->llcp_feature.req++;
   1ca2c:	f880 20b0 	strb.w	r2, [r0, #176]	; 0xb0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1ca30:	da02      	bge.n	1ca38 <ll_feature_req_send+0x2a>
		ull_slave_latency_cancel(conn, handle);
   1ca32:	4621      	mov	r1, r4
   1ca34:	f7f6 fa6a 	bl	12f0c <ull_slave_latency_cancel>
	return 0;
   1ca38:	2000      	movs	r0, #0
   1ca3a:	e000      	b.n	1ca3e <ll_feature_req_send+0x30>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1ca3c:	2002      	movs	r0, #2
}
   1ca3e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1ca40:	200c      	movs	r0, #12
   1ca42:	e7fc      	b.n	1ca3e <ll_feature_req_send+0x30>

0001ca44 <ll_version_ind_send>:
{
   1ca44:	b510      	push	{r4, lr}
   1ca46:	4604      	mov	r4, r0
	conn = ll_connected_get(handle);
   1ca48:	f7ff ff39 	bl	1c8be <ll_connected_get>
	if (!conn) {
   1ca4c:	b188      	cbz	r0, 1ca72 <ll_version_ind_send+0x2e>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   1ca4e:	f890 10c8 	ldrb.w	r1, [r0, #200]	; 0xc8
   1ca52:	f890 20c9 	ldrb.w	r2, [r0, #201]	; 0xc9
   1ca56:	428a      	cmp	r2, r1
   1ca58:	d10d      	bne.n	1ca76 <ll_version_ind_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1ca5a:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	conn->llcp_version.req++;
   1ca5e:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1ca60:	2b00      	cmp	r3, #0
	conn->llcp_version.req++;
   1ca62:	f880 20c8 	strb.w	r2, [r0, #200]	; 0xc8
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1ca66:	da02      	bge.n	1ca6e <ll_version_ind_send+0x2a>
		ull_slave_latency_cancel(conn, handle);
   1ca68:	4621      	mov	r1, r4
   1ca6a:	f7f6 fa4f 	bl	12f0c <ull_slave_latency_cancel>
	return 0;
   1ca6e:	2000      	movs	r0, #0
   1ca70:	e000      	b.n	1ca74 <ll_version_ind_send+0x30>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1ca72:	2002      	movs	r0, #2
}
   1ca74:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1ca76:	200c      	movs	r0, #12
   1ca78:	e7fc      	b.n	1ca74 <ll_version_ind_send+0x30>

0001ca7a <ull_conn_init>:
	err = init_reset();
   1ca7a:	f7f4 bfa9 	b.w	119d0 <init_reset>

0001ca7e <tx_demux>:
{
   1ca7e:	b510      	push	{r4, lr}
   1ca80:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   1ca82:	2001      	movs	r0, #1
   1ca84:	f7f5 feb2 	bl	127ec <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   1ca88:	4620      	mov	r0, r4
   1ca8a:	2101      	movs	r1, #1
}
   1ca8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   1ca90:	f7f6 b85a 	b.w	12b48 <ull_conn_tx_lll_enqueue>

0001ca94 <ull_conn_lll_max_tx_octets_get>:
}
   1ca94:	201b      	movs	r0, #27
   1ca96:	4770      	bx	lr

0001ca98 <lll_chan_sel_1>:
#endif /* CONFIG_BT_CTLR_CHAN_SEL_2 */

#if defined(CONFIG_BT_CONN)
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   1ca98:	b570      	push	{r4, r5, r6, lr}
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   1ca9a:	fb02 1101 	mla	r1, r2, r1, r1
   1ca9e:	7802      	ldrb	r2, [r0, #0]
{
   1caa0:	f89d 6010 	ldrb.w	r6, [sp, #16]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   1caa4:	4411      	add	r1, r2
   1caa6:	2225      	movs	r2, #37	; 0x25
   1caa8:	fbb1 f4f2 	udiv	r4, r1, r2
   1caac:	fb02 1114 	mls	r1, r2, r4, r1
{
   1cab0:	4605      	mov	r5, r0
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   1cab2:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1cab4:	08c2      	lsrs	r2, r0, #3
	*chan_use = chan_next;
   1cab6:	7028      	strb	r0, [r5, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1cab8:	5c9c      	ldrb	r4, [r3, r2]
   1caba:	f001 0107 	and.w	r1, r1, #7
   1cabe:	fa44 f101 	asr.w	r1, r4, r1
   1cac2:	f011 0101 	ands.w	r1, r1, #1
   1cac6:	d109      	bne.n	1cadc <lll_chan_sel_1+0x44>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   1cac8:	fbb0 f2f6 	udiv	r2, r0, r6
   1cacc:	fb06 0212 	mls	r2, r6, r2, r0
   1cad0:	1e5c      	subs	r4, r3, #1
   1cad2:	b2d2      	uxtb	r2, r2
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   1cad4:	3304      	adds	r3, #4
	chan_next = 0U;
   1cad6:	4608      	mov	r0, r1
	while (byte_count--) {
   1cad8:	42a3      	cmp	r3, r4
   1cada:	d100      	bne.n	1cade <lll_chan_sel_1+0x46>
}
   1cadc:	bd70      	pop	{r4, r5, r6, pc}
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   1cade:	f100 0108 	add.w	r1, r0, #8
   1cae2:	f814 5f01 	ldrb.w	r5, [r4, #1]!
		bit_count = 8U;
		while (bit_count--) {
   1cae6:	b2c9      	uxtb	r1, r1
   1cae8:	4288      	cmp	r0, r1
   1caea:	d0f5      	beq.n	1cad8 <lll_chan_sel_1+0x40>
			if (bite & 0x01) {
   1caec:	07ee      	lsls	r6, r5, #31
   1caee:	d503      	bpl.n	1caf8 <lll_chan_sel_1+0x60>
				if (chan_index == 0U) {
   1caf0:	2a00      	cmp	r2, #0
   1caf2:	d0f3      	beq.n	1cadc <lll_chan_sel_1+0x44>
					break;
				}
				chan_index--;
   1caf4:	3a01      	subs	r2, #1
   1caf6:	b2d2      	uxtb	r2, r2
			}
			chan_next++;
   1caf8:	3001      	adds	r0, #1
   1cafa:	b2c0      	uxtb	r0, r0
			bite >>= 1;
   1cafc:	086d      	lsrs	r5, r5, #1
   1cafe:	e7f3      	b.n	1cae8 <lll_chan_sel_1+0x50>

0001cb00 <ll_wl_size_get>:
}
   1cb00:	2008      	movs	r0, #8
   1cb02:	4770      	bx	lr

0001cb04 <swi_lll_nrf5_isr>:
	mayfly_run(TICKER_USER_ID_LLL);
   1cb04:	2000      	movs	r0, #0
   1cb06:	f7f1 bdb9 	b.w	e67c <mayfly_run>

0001cb0a <isr_race>:
	radio_status_reset();
   1cb0a:	f7f8 ba6f 	b.w	14fec <radio_status_reset>

0001cb0e <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1cb0e:	4668      	mov	r0, sp
   1cb10:	f020 0107 	bic.w	r1, r0, #7
   1cb14:	468d      	mov	sp, r1
   1cb16:	b501      	push	{r0, lr}
	isr_radio();
   1cb18:	f7f8 f978 	bl	14e0c <isr_radio>
	ISR_DIRECT_PM();
   1cb1c:	f7e6 fd82 	bl	3624 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   1cb20:	f7e6 fede 	bl	38e0 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1cb24:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1cb28:	4685      	mov	sp, r0
   1cb2a:	4770      	bx	lr

0001cb2c <lll_rand_isr_get>:
   1cb2c:	f7f6 bc2e 	b.w	1338c <lll_csrand_isr_get>

0001cb30 <lll_reset>:
}
   1cb30:	2000      	movs	r0, #0
   1cb32:	4770      	bx	lr

0001cb34 <lll_prepare_done>:
}
   1cb34:	2000      	movs	r0, #0
   1cb36:	4770      	bx	lr

0001cb38 <lll_is_abort_cb>:
}
   1cb38:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1cb3c:	4770      	bx	lr

0001cb3e <lll_event_offset_get>:
{
   1cb3e:	4603      	mov	r3, r0
   1cb40:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
	} else if (ull->ticks_prepare_to_start & XON_BITMASK) {
   1cb44:	2a00      	cmp	r2, #0
   1cb46:	da04      	bge.n	1cb52 <lll_event_offset_get+0x14>
		return MAX(ull->ticks_active_to_start,
   1cb48:	68db      	ldr	r3, [r3, #12]
   1cb4a:	4298      	cmp	r0, r3
   1cb4c:	bf38      	it	cc
   1cb4e:	4618      	movcc	r0, r3
   1cb50:	4770      	bx	lr
		return MAX(ull->ticks_active_to_start,
   1cb52:	4290      	cmp	r0, r2
   1cb54:	bf38      	it	cc
   1cb56:	4610      	movcc	r0, r2
}
   1cb58:	4770      	bx	lr

0001cb5a <lll_preempt_calc>:
{
   1cb5a:	b510      	push	{r4, lr}
   1cb5c:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   1cb5e:	f7ff fce8 	bl	1c532 <ticker_ticks_now_get>
	diff = ticks_now - ticks_at_event;
   1cb62:	1b00      	subs	r0, r0, r4
	if (diff & BIT(HAL_TICKER_CNTR_MSBIT)) {
   1cb64:	0203      	lsls	r3, r0, #8
   1cb66:	d405      	bmi.n	1cb74 <lll_preempt_calc+0x1a>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   1cb68:	3003      	adds	r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) {
   1cb6a:	2809      	cmp	r0, #9
   1cb6c:	bf94      	ite	ls
   1cb6e:	2000      	movls	r0, #0
   1cb70:	2001      	movhi	r0, #1
}
   1cb72:	bd10      	pop	{r4, pc}
		return 0;
   1cb74:	2000      	movs	r0, #0
   1cb76:	e7fc      	b.n	1cb72 <lll_preempt_calc+0x18>

0001cb78 <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   1cb78:	f000 ba69 	b.w	1d04e <radio_rx_ready_delay_get>

0001cb7c <lll_isr_tx_status_reset>:
{
   1cb7c:	b508      	push	{r3, lr}
	radio_status_reset();
   1cb7e:	f7f8 fa35 	bl	14fec <radio_status_reset>
}
   1cb82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   1cb86:	f7f8 baff 	b.w	15188 <radio_tmr_status_reset>

0001cb8a <lll_isr_rx_status_reset>:
{
   1cb8a:	b508      	push	{r3, lr}
	radio_status_reset();
   1cb8c:	f7f8 fa2e 	bl	14fec <radio_status_reset>
	radio_tmr_status_reset();
   1cb90:	f7f8 fafa 	bl	15188 <radio_tmr_status_reset>
}
   1cb94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   1cb98:	f7f8 baa6 	b.w	150e8 <radio_rssi_status_reset>

0001cb9c <lll_isr_status_reset>:
{
   1cb9c:	b508      	push	{r3, lr}
	radio_status_reset();
   1cb9e:	f7f8 fa25 	bl	14fec <radio_status_reset>
	radio_tmr_status_reset();
   1cba2:	f7f8 faf1 	bl	15188 <radio_tmr_status_reset>
	radio_filter_status_reset();
   1cba6:	f7f8 fad7 	bl	15158 <radio_filter_status_reset>
	radio_ar_status_reset();
   1cbaa:	f7f8 fc03 	bl	153b4 <radio_ar_status_reset>
}
   1cbae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   1cbb2:	f7f8 ba99 	b.w	150e8 <radio_rssi_status_reset>

0001cbb6 <lll_isr_abort>:
{
   1cbb6:	b510      	push	{r4, lr}
   1cbb8:	4604      	mov	r4, r0
	lll_isr_status_reset();
   1cbba:	f7ff ffef 	bl	1cb9c <lll_isr_status_reset>
	lll_isr_cleanup(param);
   1cbbe:	4620      	mov	r0, r4
}
   1cbc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1cbc4:	f7f6 bcba 	b.w	1353c <lll_isr_cleanup>

0001cbc8 <clock_ready>:
   1cbc8:	f101 0010 	add.w	r0, r1, #16
   1cbcc:	f7fa bbfe 	b.w	173cc <z_impl_k_sem_give>

0001cbd0 <lll_clock_ppm_local_get>:
}
   1cbd0:	2032      	movs	r0, #50	; 0x32
   1cbd2:	4770      	bx	lr

0001cbd4 <isr_abort>:
{
   1cbd4:	b510      	push	{r4, lr}
   1cbd6:	4604      	mov	r4, r0
	lll_isr_status_reset();
   1cbd8:	f7ff ffe0 	bl	1cb9c <lll_isr_status_reset>
	radio_filter_disable();
   1cbdc:	f7f8 fab2 	bl	15144 <radio_filter_disable>
	lll_isr_cleanup(param);
   1cbe0:	4620      	mov	r0, r4
}
   1cbe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1cbe6:	f7f6 bca9 	b.w	1353c <lll_isr_cleanup>

0001cbea <lll_adv_reset>:
   1cbea:	f7f6 becb 	b.w	13984 <lll_adv_init>

0001cbee <lll_adv_data_reset>:
{
   1cbee:	4603      	mov	r3, r0
	pdu->first = 0U;
   1cbf0:	2000      	movs	r0, #0
   1cbf2:	7018      	strb	r0, [r3, #0]
	pdu->last = 0U;
   1cbf4:	7058      	strb	r0, [r3, #1]
	pdu->pdu[1] = NULL;
   1cbf6:	6098      	str	r0, [r3, #8]
}
   1cbf8:	4770      	bx	lr

0001cbfa <resume_prepare_cb>:
	ull = HDR_LLL2ULL(p->param);
   1cbfa:	68c3      	ldr	r3, [r0, #12]
{
   1cbfc:	b570      	push	{r4, r5, r6, lr}
   1cbfe:	4604      	mov	r4, r0
	ull = HDR_LLL2ULL(p->param);
   1cc00:	681e      	ldr	r6, [r3, #0]
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   1cc02:	f7ff fc96 	bl	1c532 <ticker_ticks_now_get>
   1cc06:	4605      	mov	r5, r0
   1cc08:	4630      	mov	r0, r6
   1cc0a:	f7ff ff98 	bl	1cb3e <lll_event_offset_get>
	p->remainder = 0;
   1cc0e:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   1cc10:	1a2d      	subs	r5, r5, r0
   1cc12:	6025      	str	r5, [r4, #0]
	p->remainder = 0;
   1cc14:	6063      	str	r3, [r4, #4]
	p->lazy = 0;
   1cc16:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   1cc18:	4620      	mov	r0, r4
}
   1cc1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   1cc1e:	f7f7 b815 	b.w	13c4c <prepare_cb>

0001cc22 <isr_done>:
{
   1cc22:	b510      	push	{r4, lr}
   1cc24:	4604      	mov	r4, r0
	lll_isr_status_reset();
   1cc26:	f7ff ffb9 	bl	1cb9c <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   1cc2a:	7a23      	ldrb	r3, [r4, #8]
   1cc2c:	f003 0271 	and.w	r2, r3, #113	; 0x71
   1cc30:	2a01      	cmp	r2, #1
		lll->chan_map_curr = lll->chan_map;
   1cc32:	bf02      	ittt	eq
   1cc34:	f3c3 0242 	ubfxeq	r2, r3, #1, #3
   1cc38:	f362 1306 	bfieq	r3, r2, #4, #3
   1cc3c:	7223      	strbeq	r3, [r4, #8]
	if (lll->chan_map_curr &&
   1cc3e:	7a23      	ldrb	r3, [r4, #8]
   1cc40:	f013 0f70 	tst.w	r3, #112	; 0x70
   1cc44:	d00e      	beq.n	1cc64 <isr_done+0x42>
	    (!lll->conn || !lll->conn->slave.cancelled) &&
   1cc46:	6863      	ldr	r3, [r4, #4]
   1cc48:	b11b      	cbz	r3, 1cc52 <isr_done+0x30>
   1cc4a:	f893 3020 	ldrb.w	r3, [r3, #32]
   1cc4e:	079b      	lsls	r3, r3, #30
   1cc50:	d408      	bmi.n	1cc64 <isr_done+0x42>
		pdu = chan_prepare(lll);
   1cc52:	4620      	mov	r0, r4
   1cc54:	f7f6 ff7c 	bl	13b50 <chan_prepare>
		radio_tx_enable();
   1cc58:	f7f8 f9b0 	bl	14fbc <radio_tx_enable>
}
   1cc5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   1cc60:	f7f8 bb8e 	b.w	15380 <radio_tmr_end_capture>
	radio_filter_disable();
   1cc64:	f7f8 fa6e 	bl	15144 <radio_filter_disable>
	lll_isr_cleanup(param);
   1cc68:	4620      	mov	r0, r4
}
   1cc6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1cc6e:	f7f6 bc65 	b.w	1353c <lll_isr_cleanup>

0001cc72 <lll_adv_scan_req_check>:
{
   1cc72:	b510      	push	{r4, lr}
	return (((lll->filter_policy & 0x01) == 0U) || devmatch_ok) &&
   1cc74:	7a40      	ldrb	r0, [r0, #9]
{
   1cc76:	f89d 4008 	ldrb.w	r4, [sp, #8]
	return (((lll->filter_policy & 0x01) == 0U) || devmatch_ok) &&
   1cc7a:	07c0      	lsls	r0, r0, #31
   1cc7c:	d500      	bpl.n	1cc80 <lll_adv_scan_req_check+0xe>
   1cc7e:	b174      	cbz	r4, 1cc9e <lll_adv_scan_req_check+0x2c>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   1cc80:	7808      	ldrb	r0, [r1, #0]
   1cc82:	ebb2 1fd0 	cmp.w	r2, r0, lsr #7
   1cc86:	d108      	bne.n	1cc9a <lll_adv_scan_req_check+0x28>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   1cc88:	2206      	movs	r2, #6
   1cc8a:	3108      	adds	r1, #8
   1cc8c:	4618      	mov	r0, r3
   1cc8e:	f7fc ff79 	bl	19b84 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   1cc92:	fab0 f080 	clz	r0, r0
   1cc96:	0940      	lsrs	r0, r0, #5
}
   1cc98:	bd10      	pop	{r4, pc}
	return (tx_addr == sr->rx_addr) &&
   1cc9a:	2000      	movs	r0, #0
   1cc9c:	e7fc      	b.n	1cc98 <lll_adv_scan_req_check+0x26>
	return (((lll->filter_policy & 0x01) == 0U) || devmatch_ok) &&
   1cc9e:	4620      	mov	r0, r4
   1cca0:	e7fa      	b.n	1cc98 <lll_adv_scan_req_check+0x26>

0001cca2 <lll_adv_connect_ind_check>:
{
   1cca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cca4:	9f07      	ldr	r7, [sp, #28]
   1cca6:	f89d 4020 	ldrb.w	r4, [sp, #32]
   1ccaa:	4606      	mov	r6, r0
   1ccac:	460d      	mov	r5, r1
   1ccae:	4618      	mov	r0, r3
	if (tgt_addr) {
   1ccb0:	b1ef      	cbz	r7, 1ccee <lll_adv_connect_ind_check+0x4c>
}

static inline bool isr_rx_ci_adva_check(uint8_t tx_addr, uint8_t *addr,
					struct pdu_adv *ci)
{
	return (tx_addr == ci->rx_addr) &&
   1ccb2:	780b      	ldrb	r3, [r1, #0]
   1ccb4:	ebb2 1fd3 	cmp.w	r2, r3, lsr #7
   1ccb8:	d003      	beq.n	1ccc2 <lll_adv_connect_ind_check+0x20>
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   1ccba:	2000      	movs	r0, #0
   1ccbc:	f000 0001 	and.w	r0, r0, #1
}
   1ccc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   1ccc2:	2206      	movs	r2, #6
   1ccc4:	3108      	adds	r1, #8
   1ccc6:	f7fc ff5d 	bl	19b84 <memcmp>
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   1ccca:	2800      	cmp	r0, #0
   1cccc:	d1f5      	bne.n	1ccba <lll_adv_connect_ind_check+0x18>
	return (rx_addr == ci->tx_addr) &&
   1ccce:	782b      	ldrb	r3, [r5, #0]
   1ccd0:	f89d 2018 	ldrb.w	r2, [sp, #24]
   1ccd4:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1ccd8:	4293      	cmp	r3, r2
   1ccda:	d1ef      	bne.n	1ccbc <lll_adv_connect_ind_check+0x1a>
	       !memcmp(tgt_addr, ci->connect_ind.init_addr, BDADDR_SIZE);
   1ccdc:	2206      	movs	r2, #6
   1ccde:	1ca9      	adds	r1, r5, #2
   1cce0:	4638      	mov	r0, r7
   1cce2:	f7fc ff4f 	bl	19b84 <memcmp>
	return (rx_addr == ci->tx_addr) &&
   1cce6:	fab0 f080 	clz	r0, r0
   1ccea:	0940      	lsrs	r0, r0, #5
   1ccec:	e7e6      	b.n	1ccbc <lll_adv_connect_ind_check+0x1a>
	return (((lll->filter_policy & 0x02) == 0) ||
   1ccee:	7a73      	ldrb	r3, [r6, #9]
		(devmatch_ok)) &&
   1ccf0:	079b      	lsls	r3, r3, #30
   1ccf2:	d500      	bpl.n	1ccf6 <lll_adv_connect_ind_check+0x54>
	return (((lll->filter_policy & 0x02) == 0) ||
   1ccf4:	b174      	cbz	r4, 1cd14 <lll_adv_connect_ind_check+0x72>
	return (tx_addr == ci->rx_addr) &&
   1ccf6:	782b      	ldrb	r3, [r5, #0]
   1ccf8:	ebb2 1fd3 	cmp.w	r2, r3, lsr #7
   1ccfc:	d108      	bne.n	1cd10 <lll_adv_connect_ind_check+0x6e>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   1ccfe:	2206      	movs	r2, #6
   1cd00:	f105 0108 	add.w	r1, r5, #8
   1cd04:	f7fc ff3e 	bl	19b84 <memcmp>
	return (tx_addr == ci->rx_addr) &&
   1cd08:	fab0 f080 	clz	r0, r0
   1cd0c:	0940      	lsrs	r0, r0, #5
   1cd0e:	e7d7      	b.n	1ccc0 <lll_adv_connect_ind_check+0x1e>
   1cd10:	2000      	movs	r0, #0
   1cd12:	e7d5      	b.n	1ccc0 <lll_adv_connect_ind_check+0x1e>
		(devmatch_ok)) &&
   1cd14:	4620      	mov	r0, r4
   1cd16:	e7d3      	b.n	1ccc0 <lll_adv_connect_ind_check+0x1e>

0001cd18 <isr_done_cleanup>:
{
   1cd18:	b538      	push	{r3, r4, r5, lr}
   1cd1a:	4604      	mov	r4, r0
	if (lll_is_done(param)) {
   1cd1c:	f7f6 fbd4 	bl	134c8 <lll_is_done>
   1cd20:	4605      	mov	r5, r0
   1cd22:	b998      	cbnz	r0, 1cd4c <isr_done_cleanup+0x34>
	radio_filter_disable();
   1cd24:	f7f8 fa0e 	bl	15144 <radio_filter_disable>
	if (++lll->chan == 3U) {
   1cd28:	7923      	ldrb	r3, [r4, #4]
   1cd2a:	f3c3 0241 	ubfx	r2, r3, #1, #2
   1cd2e:	3201      	adds	r2, #1
   1cd30:	f002 0203 	and.w	r2, r2, #3
   1cd34:	2a03      	cmp	r2, #3
   1cd36:	bf14      	ite	ne
   1cd38:	f362 0342 	bfine	r3, r2, #1, #2
		lll->chan = 0U;
   1cd3c:	f365 0342 	bfieq	r3, r5, #1, #2
   1cd40:	7123      	strb	r3, [r4, #4]
	lll_isr_cleanup(param);
   1cd42:	4620      	mov	r0, r4
}
   1cd44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_isr_cleanup(param);
   1cd48:	f7f6 bbf8 	b.w	1353c <lll_isr_cleanup>
}
   1cd4c:	bd38      	pop	{r3, r4, r5, pc}

0001cd4e <isr_done>:
{
   1cd4e:	b508      	push	{r3, lr}
	isr_common_done(param);
   1cd50:	f7f7 f9e2 	bl	14118 <isr_common_done>
	radio_rx_enable();
   1cd54:	f7f8 f92c 	bl	14fb0 <radio_rx_enable>
}
   1cd58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_end_capture();
   1cd5c:	f7f8 bb10 	b.w	15380 <radio_tmr_end_capture>

0001cd60 <resume_prepare_cb>:
	ull = HDR_LLL2ULL(p->param);
   1cd60:	68c3      	ldr	r3, [r0, #12]
{
   1cd62:	b570      	push	{r4, r5, r6, lr}
   1cd64:	4604      	mov	r4, r0
	ull = HDR_LLL2ULL(p->param);
   1cd66:	681e      	ldr	r6, [r3, #0]
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   1cd68:	f7ff fbe3 	bl	1c532 <ticker_ticks_now_get>
   1cd6c:	4605      	mov	r5, r0
   1cd6e:	4630      	mov	r0, r6
   1cd70:	f7ff fee5 	bl	1cb3e <lll_event_offset_get>
	p->remainder = 0;
   1cd74:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   1cd76:	1a2d      	subs	r5, r5, r0
   1cd78:	6025      	str	r5, [r4, #0]
	p->remainder = 0;
   1cd7a:	6063      	str	r3, [r4, #4]
	p->lazy = 0;
   1cd7c:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   1cd7e:	4620      	mov	r0, r4
}
   1cd80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   1cd84:	f7f7 b904 	b.w	13f90 <prepare_cb>

0001cd88 <isr_window>:
{
   1cd88:	b510      	push	{r4, lr}
   1cd8a:	4604      	mov	r4, r0
	isr_common_done(param);
   1cd8c:	f7f7 f9c4 	bl	14118 <isr_common_done>
	if (++lll->chan == 3U) {
   1cd90:	7923      	ldrb	r3, [r4, #4]
   1cd92:	f3c3 0241 	ubfx	r2, r3, #1, #2
   1cd96:	3201      	adds	r2, #1
   1cd98:	f002 0203 	and.w	r2, r2, #3
   1cd9c:	2a03      	cmp	r2, #3
   1cd9e:	bf14      	ite	ne
   1cda0:	f362 0342 	bfine	r3, r2, #1, #2
		lll->chan = 0U;
   1cda4:	f36f 0342 	bfceq	r3, #1, #2
   1cda8:	7123      	strb	r3, [r4, #4]
	lll_chan_set(37 + lll->chan);
   1cdaa:	7920      	ldrb	r0, [r4, #4]
   1cdac:	f3c0 0041 	ubfx	r0, r0, #1, #2
   1cdb0:	3025      	adds	r0, #37	; 0x25
   1cdb2:	f7f6 fb91 	bl	134d8 <lll_chan_set>
	ticks_at_start = ticker_ticks_now_get() +
   1cdb6:	f7ff fbbc 	bl	1c532 <ticker_ticks_now_get>
	remainder_us = radio_tmr_start_tick(0, ticks_at_start);
   1cdba:	1cc1      	adds	r1, r0, #3
   1cdbc:	2000      	movs	r0, #0
   1cdbe:	f7f8 fa6f 	bl	152a0 <radio_tmr_start_tick>
}
   1cdc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_tmr_end_capture();
   1cdc6:	f7f8 badb 	b.w	15380 <radio_tmr_end_capture>

0001cdca <isr_rx_scan_report.isra.0>:
			&srsp->scan_rsp.addr[0], BDADDR_SIZE) == 0));
}

static int isr_rx_scan_report(struct lll_scan *lll, uint8_t rssi_ready,
   1cdca:	b570      	push	{r4, r5, r6, lr}
   1cdcc:	4606      	mov	r6, r0
				uint8_t rl_idx, bool dir_report)
{
	struct node_rx_pdu *node_rx;

	node_rx = ull_pdu_rx_alloc_peek(3);
   1cdce:	2003      	movs	r0, #3
static int isr_rx_scan_report(struct lll_scan *lll, uint8_t rssi_ready,
   1cdd0:	460d      	mov	r5, r1
	node_rx = ull_pdu_rx_alloc_peek(3);
   1cdd2:	f7f4 f8fb 	bl	10fcc <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
   1cdd6:	4604      	mov	r4, r0
   1cdd8:	b1b0      	cbz	r0, 1ce08 <isr_rx_scan_report.isra.0+0x3e>
		return -ENOBUFS;
	}
	ull_pdu_rx_alloc();
   1cdda:	f7f4 f90f 	bl	10ffc <ull_pdu_rx_alloc>

	/* Prepare the report (adv or scan resp) */
	node_rx->hdr.handle = 0xffff;
   1cdde:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1cde2:	80e3      	strh	r3, [r4, #6]
			}
			break;
		}
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   1cde4:	2305      	movs	r3, #5
   1cde6:	7123      	strb	r3, [r4, #4]
	}

	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   1cde8:	b166      	cbz	r6, 1ce04 <isr_rx_scan_report.isra.0+0x3a>
   1cdea:	f7f8 f977 	bl	150dc <radio_rssi_get>
   1cdee:	b2c0      	uxtb	r0, r0
   1cdf0:	7620      	strb	r0, [r4, #24]
		node_rx->hdr.rx_ftr.chan = _radio.scanner.chan - 1;
		node_rx->hdr.rx_ftr.ticks_anchor = _radio.ticks_anchor;
	}
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */

	ull_rx_put(node_rx->hdr.link, node_rx);
   1cdf2:	4621      	mov	r1, r4
   1cdf4:	6820      	ldr	r0, [r4, #0]
	node_rx->hdr.rx_ftr.direct = dir_report;
   1cdf6:	7665      	strb	r5, [r4, #25]
	ull_rx_put(node_rx->hdr.link, node_rx);
   1cdf8:	f7f4 f916 	bl	11028 <ull_rx_put>
	ull_rx_sched();
   1cdfc:	f7f4 f924 	bl	11048 <ull_rx_sched>

	return 0;
   1ce00:	2000      	movs	r0, #0
}
   1ce02:	bd70      	pop	{r4, r5, r6, pc}
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   1ce04:	207f      	movs	r0, #127	; 0x7f
   1ce06:	e7f3      	b.n	1cdf0 <isr_rx_scan_report.isra.0+0x26>
		return -ENOBUFS;
   1ce08:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1ce0c:	e7f9      	b.n	1ce02 <isr_rx_scan_report.isra.0+0x38>

0001ce0e <isr_abort>:
{
   1ce0e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1ce10:	4604      	mov	r4, r0
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   1ce12:	2500      	movs	r5, #0
	lll_isr_status_reset();
   1ce14:	f7ff fec2 	bl	1cb9c <lll_isr_status_reset>
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   1ce18:	462b      	mov	r3, r5
   1ce1a:	2203      	movs	r2, #3
   1ce1c:	4629      	mov	r1, r5
   1ce1e:	9500      	str	r5, [sp, #0]
   1ce20:	4628      	mov	r0, r5
   1ce22:	f7f2 f9b9 	bl	f198 <ticker_stop>
	radio_disable();
   1ce26:	f7f8 f8cf 	bl	14fc8 <radio_disable>
	radio_filter_disable();
   1ce2a:	f7f8 f98b 	bl	15144 <radio_filter_disable>
	if (++lll->chan == 3U) {
   1ce2e:	7922      	ldrb	r2, [r4, #4]
   1ce30:	f3c2 0041 	ubfx	r0, r2, #1, #2
   1ce34:	3001      	adds	r0, #1
   1ce36:	f000 0003 	and.w	r0, r0, #3
   1ce3a:	2803      	cmp	r0, #3
   1ce3c:	bf14      	ite	ne
   1ce3e:	f360 0242 	bfine	r2, r0, #1, #2
		lll->chan = 0U;
   1ce42:	f365 0242 	bfieq	r2, r5, #1, #2
	lll_isr_cleanup(param);
   1ce46:	4620      	mov	r0, r4
		lll->chan = 0U;
   1ce48:	7122      	strb	r2, [r4, #4]
}
   1ce4a:	b003      	add	sp, #12
   1ce4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	lll_isr_cleanup(param);
   1ce50:	f7f6 bb74 	b.w	1353c <lll_isr_cleanup>

0001ce54 <lll_scan_init>:
}
   1ce54:	2000      	movs	r0, #0
   1ce56:	4770      	bx	lr

0001ce58 <lll_scan_reset>:
   1ce58:	2000      	movs	r0, #0
   1ce5a:	4770      	bx	lr

0001ce5c <lll_scan_tgta_check>:
{
   1ce5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ce5e:	461e      	mov	r6, r3
	return (((lll->init_addr_type == addr_type) &&
   1ce60:	7903      	ldrb	r3, [r0, #4]
{
   1ce62:	9f07      	ldr	r7, [sp, #28]
	return (((lll->init_addr_type == addr_type) &&
   1ce64:	f3c3 1380 	ubfx	r3, r3, #6, #1
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   1ce68:	4293      	cmp	r3, r2
{
   1ce6a:	4605      	mov	r5, r0
   1ce6c:	4614      	mov	r4, r2
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   1ce6e:	d006      	beq.n	1ce7e <lll_scan_tgta_check+0x22>
	if (((lll->filter_policy & 0x02) != 0U) && (addr_type != 0) &&
   1ce70:	7928      	ldrb	r0, [r5, #4]
   1ce72:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   1ce76:	f010 0002 	ands.w	r0, r0, #2
   1ce7a:	d109      	bne.n	1ce90 <lll_scan_tgta_check+0x34>
}
   1ce7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   1ce7e:	2206      	movs	r2, #6
   1ce80:	4631      	mov	r1, r6
   1ce82:	3005      	adds	r0, #5
   1ce84:	f7fc fe7e 	bl	19b84 <memcmp>
	return (((lll->init_addr_type == addr_type) &&
   1ce88:	2800      	cmp	r0, #0
   1ce8a:	d1f1      	bne.n	1ce70 <lll_scan_tgta_check+0x14>
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   1ce8c:	2001      	movs	r0, #1
   1ce8e:	e7f5      	b.n	1ce7c <lll_scan_tgta_check+0x20>
	if (((lll->filter_policy & 0x02) != 0U) && (addr_type != 0) &&
   1ce90:	b14c      	cbz	r4, 1cea6 <lll_scan_tgta_check+0x4a>
   1ce92:	7973      	ldrb	r3, [r6, #5]
   1ce94:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1ce98:	2b40      	cmp	r3, #64	; 0x40
   1ce9a:	d104      	bne.n	1cea6 <lll_scan_tgta_check+0x4a>
		if (dir_report) {
   1ce9c:	2f00      	cmp	r7, #0
   1ce9e:	d0f5      	beq.n	1ce8c <lll_scan_tgta_check+0x30>
			*dir_report = true;
   1cea0:	2001      	movs	r0, #1
   1cea2:	7038      	strb	r0, [r7, #0]
   1cea4:	e7ea      	b.n	1ce7c <lll_scan_tgta_check+0x20>
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   1cea6:	2000      	movs	r0, #0
   1cea8:	e7e8      	b.n	1ce7c <lll_scan_tgta_check+0x20>

0001ceaa <lll_conn_init>:
{
   1ceaa:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   1ceac:	f7f8 f8de 	bl	1506c <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1ceb0:	7803      	ldrb	r3, [r0, #0]
   1ceb2:	2201      	movs	r2, #1
   1ceb4:	f362 0301 	bfi	r3, r2, #0, #2
   1ceb8:	7003      	strb	r3, [r0, #0]
}
   1ceba:	2000      	movs	r0, #0
   1cebc:	bd08      	pop	{r3, pc}

0001cebe <lll_conn_reset>:
}
   1cebe:	2000      	movs	r0, #0
   1cec0:	4770      	bx	lr

0001cec2 <lll_conn_flush>:
}
   1cec2:	4770      	bx	lr

0001cec4 <lll_conn_tx_pkt_set>:
{
   1cec4:	b510      	push	{r4, lr}
   1cec6:	460c      	mov	r4, r1
	radio_phy_set(phy, flags);
   1cec8:	2100      	movs	r1, #0
   1ceca:	4608      	mov	r0, r1
   1cecc:	f7f7 fff2 	bl	14eb4 <radio_phy_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   1ced0:	2008      	movs	r0, #8
   1ced2:	2201      	movs	r2, #1
   1ced4:	211b      	movs	r1, #27
   1ced6:	f7f8 f833 	bl	14f40 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   1ceda:	4620      	mov	r0, r4
}
   1cedc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_pkt_tx_set(pdu_data_tx);
   1cee0:	f7f8 b860 	b.w	14fa4 <radio_pkt_tx_set>

0001cee4 <lll_conn_pdu_tx_prep>:
{
   1cee4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1cee8:	4604      	mov	r4, r0
   1ceea:	4688      	mov	r8, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1ceec:	aa01      	add	r2, sp, #4
   1ceee:	e9d0 010f 	ldrd	r0, r1, [r0, #60]	; 0x3c
   1cef2:	f7ff f893 	bl	1c01c <memq_peek>
	if (lll->empty || !link) {
   1cef6:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
   1cefa:	075b      	lsls	r3, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1cefc:	4681      	mov	r9, r0
	if (lll->empty || !link) {
   1cefe:	d400      	bmi.n	1cf02 <lll_conn_pdu_tx_prep+0x1e>
   1cf00:	b9b8      	cbnz	r0, 1cf32 <lll_conn_pdu_tx_prep+0x4e>
		lll->empty = 1U;
   1cf02:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
   1cf06:	f043 0304 	orr.w	r3, r3, #4
   1cf0a:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
		p = (void *)radio_pkt_empty_get();
   1cf0e:	f7f8 f8ad 	bl	1506c <radio_pkt_empty_get>
   1cf12:	7803      	ldrb	r3, [r0, #0]
   1cf14:	4605      	mov	r5, r0
		if (link || FORCE_MD_CNT_GET()) {
   1cf16:	f1b9 0f00 	cmp.w	r9, #0
   1cf1a:	d007      	beq.n	1cf2c <lll_conn_pdu_tx_prep+0x48>
			p->md = 1U;
   1cf1c:	f043 0310 	orr.w	r3, r3, #16
			p->md = 0U;
   1cf20:	702b      	strb	r3, [r5, #0]
	*pdu_data_tx = p;
   1cf22:	f8c8 5000 	str.w	r5, [r8]
}
   1cf26:	b003      	add	sp, #12
   1cf28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			p->md = 0U;
   1cf2c:	f369 1304 	bfi	r3, r9, #4, #1
   1cf30:	e7f6      	b.n	1cf20 <lll_conn_pdu_tx_prep+0x3c>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1cf32:	9f01      	ldr	r7, [sp, #4]
   1cf34:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
		if (!lll->packet_tx_head_len) {
   1cf38:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1cf3c:	3704      	adds	r7, #4
   1cf3e:	19bd      	adds	r5, r7, r6
		if (!lll->packet_tx_head_len) {
   1cf40:	b913      	cbnz	r3, 1cf48 <lll_conn_pdu_tx_prep+0x64>
			lll->packet_tx_head_len = p->len;
   1cf42:	786b      	ldrb	r3, [r5, #1]
   1cf44:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
		if (lll->packet_tx_head_offset) {
   1cf48:	b126      	cbz	r6, 1cf54 <lll_conn_pdu_tx_prep+0x70>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1cf4a:	5dbb      	ldrb	r3, [r7, r6]
   1cf4c:	2201      	movs	r2, #1
   1cf4e:	f362 0301 	bfi	r3, r2, #0, #2
   1cf52:	55bb      	strb	r3, [r7, r6]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   1cf54:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   1cf58:	1b9b      	subs	r3, r3, r6
   1cf5a:	706b      	strb	r3, [r5, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   1cf5c:	4620      	mov	r0, r4
   1cf5e:	f7ff fd99 	bl	1ca94 <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   1cf62:	786b      	ldrb	r3, [r5, #1]
   1cf64:	4283      	cmp	r3, r0
   1cf66:	d90b      	bls.n	1cf80 <lll_conn_pdu_tx_prep+0x9c>
			p->len = max_tx_octets;
   1cf68:	7068      	strb	r0, [r5, #1]
			p->md = 1U;
   1cf6a:	5dbb      	ldrb	r3, [r7, r6]
			p->md = 1U;
   1cf6c:	f043 0310 	orr.w	r3, r3, #16
			p->md = 0U;
   1cf70:	55bb      	strb	r3, [r7, r6]
		p->rfu = 0U;
   1cf72:	5dbb      	ldrb	r3, [r7, r6]
   1cf74:	f36f 1347 	bfc	r3, #5, #3
   1cf78:	55bb      	strb	r3, [r7, r6]
		p->resv = 0U;
   1cf7a:	2300      	movs	r3, #0
   1cf7c:	70ab      	strb	r3, [r5, #2]
   1cf7e:	e7d0      	b.n	1cf22 <lll_conn_pdu_tx_prep+0x3e>
		} else if ((link->next != lll->memq_tx.tail) ||
   1cf80:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1cf82:	f8d9 2000 	ldr.w	r2, [r9]
   1cf86:	429a      	cmp	r2, r3
   1cf88:	5dbb      	ldrb	r3, [r7, r6]
   1cf8a:	d1ef      	bne.n	1cf6c <lll_conn_pdu_tx_prep+0x88>
			p->md = 0U;
   1cf8c:	f36f 1304 	bfc	r3, #4, #1
   1cf90:	e7ee      	b.n	1cf70 <lll_conn_pdu_tx_prep+0x8c>

0001cf92 <ecb_encrypt_be>:

void ecb_encrypt_be(uint8_t const *const key_be, uint8_t const *const clear_text_be,
		    uint8_t * const cipher_text_be)
{
   1cf92:	b530      	push	{r4, r5, lr}
   1cf94:	b08d      	sub	sp, #52	; 0x34
   1cf96:	460d      	mov	r5, r1
   1cf98:	4614      	mov	r4, r2
	struct ecb_param ecb;

	memcpy(&ecb.key[0], key_be, sizeof(ecb.key));
   1cf9a:	4601      	mov	r1, r0
   1cf9c:	2210      	movs	r2, #16
   1cf9e:	4668      	mov	r0, sp
   1cfa0:	f7fc fe00 	bl	19ba4 <memcpy>
	memcpy(&ecb.clear_text[0], clear_text_be, sizeof(ecb.clear_text));
   1cfa4:	2210      	movs	r2, #16
   1cfa6:	4629      	mov	r1, r5
   1cfa8:	eb0d 0002 	add.w	r0, sp, r2
   1cfac:	f7fc fdfa 	bl	19ba4 <memcpy>

	do_ecb(&ecb);
   1cfb0:	4668      	mov	r0, sp
   1cfb2:	f7f7 fe7b 	bl	14cac <do_ecb>

	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
   1cfb6:	2210      	movs	r2, #16
   1cfb8:	a908      	add	r1, sp, #32
   1cfba:	4620      	mov	r0, r4
   1cfbc:	f7fc fdf2 	bl	19ba4 <memcpy>
}
   1cfc0:	b00d      	add	sp, #52	; 0x34
   1cfc2:	bd30      	pop	{r4, r5, pc}

0001cfc4 <ecb_encrypt>:

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   1cfc4:	b570      	push	{r4, r5, r6, lr}
   1cfc6:	b08c      	sub	sp, #48	; 0x30
   1cfc8:	460e      	mov	r6, r1
   1cfca:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1cfcc:	4601      	mov	r1, r0
   1cfce:	2210      	movs	r2, #16
   1cfd0:	4668      	mov	r0, sp
{
   1cfd2:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1cfd4:	f7fe fff3 	bl	1bfbe <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   1cfd8:	2210      	movs	r2, #16
   1cfda:	eb0d 0002 	add.w	r0, sp, r2
   1cfde:	4631      	mov	r1, r6
   1cfe0:	f7fe ffed 	bl	1bfbe <mem_rcopy>

	do_ecb(&ecb);
   1cfe4:	4668      	mov	r0, sp
   1cfe6:	f7f7 fe61 	bl	14cac <do_ecb>

	if (cipher_text_le) {
   1cfea:	b125      	cbz	r5, 1cff6 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   1cfec:	2210      	movs	r2, #16
   1cfee:	a908      	add	r1, sp, #32
   1cff0:	4628      	mov	r0, r5
   1cff2:	f7fe ffe4 	bl	1bfbe <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   1cff6:	b124      	cbz	r4, 1d002 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   1cff8:	2210      	movs	r2, #16
   1cffa:	a908      	add	r1, sp, #32
   1cffc:	4620      	mov	r0, r4
   1cffe:	f7fc fdd1 	bl	19ba4 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   1d002:	b00c      	add	sp, #48	; 0x30
   1d004:	bd70      	pop	{r4, r5, r6, pc}

0001d006 <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1d006:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d00a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1d00e:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1d010:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   1d014:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1d018:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   1d01c:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   1d020:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   1d024:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   1d028:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   1d02c:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   1d030:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   1d034:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   1d038:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   1d03c:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   1d040:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   1d044:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   1d048:	4770      	bx	lr

0001d04a <radio_tx_chain_delay_get>:
}
   1d04a:	2001      	movs	r0, #1
   1d04c:	4770      	bx	lr

0001d04e <radio_rx_ready_delay_get>:
}
   1d04e:	2029      	movs	r0, #41	; 0x29
   1d050:	4770      	bx	lr

0001d052 <radio_rx_chain_delay_get>:
	switch (phy) {
   1d052:	2802      	cmp	r0, #2
}
   1d054:	bf14      	ite	ne
   1d056:	200a      	movne	r0, #10
   1d058:	2006      	moveq	r0, #6
   1d05a:	4770      	bx	lr

0001d05c <mayfly_prio_is_equal>:
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1d05c:	4288      	cmp	r0, r1
   1d05e:	d00a      	beq.n	1d076 <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
   1d060:	2801      	cmp	r0, #1
   1d062:	d104      	bne.n	1d06e <mayfly_prio_is_equal+0x12>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   1d064:	2902      	cmp	r1, #2
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   1d066:	bf14      	ite	ne
   1d068:	2000      	movne	r0, #0
   1d06a:	2001      	moveq	r0, #1
   1d06c:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1d06e:	2802      	cmp	r0, #2
   1d070:	d103      	bne.n	1d07a <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   1d072:	2901      	cmp	r1, #1
   1d074:	e7f7      	b.n	1d066 <mayfly_prio_is_equal+0xa>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1d076:	2001      	movs	r0, #1
   1d078:	4770      	bx	lr
   1d07a:	2000      	movs	r0, #0
}
   1d07c:	4770      	bx	lr

0001d07e <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   1d07e:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   1d080:	2000      	movs	r0, #0
   1d082:	f7f7 be0b 	b.w	14c9c <cntr_cmp_set>

0001d086 <sys_put_le32>:
	dst[1] = val >> 8;
   1d086:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   1d08a:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
   1d08c:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
   1d08e:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
   1d090:	0a00      	lsrs	r0, r0, #8
   1d092:	704b      	strb	r3, [r1, #1]
   1d094:	70c8      	strb	r0, [r1, #3]
}
   1d096:	4770      	bx	lr

0001d098 <hci_vendor_read_static_addr>:
				 uint8_t size)
{
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1d098:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
{
   1d09c:	b510      	push	{r4, lr}
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1d09e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   1d0a2:	3201      	adds	r2, #1
{
   1d0a4:	4604      	mov	r4, r0
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1d0a6:	d106      	bne.n	1d0b6 <hci_vendor_read_static_addr+0x1e>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1d0a8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1d0ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1d0b0:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1d0b2:	4293      	cmp	r3, r2
   1d0b4:	d044      	beq.n	1d140 <hci_vendor_read_static_addr+0xa8>
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   1d0b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1d0ba:	f8d2 00a0 	ldr.w	r0, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1d0be:	f010 0001 	ands.w	r0, r0, #1
   1d0c2:	d036      	beq.n	1d132 <hci_vendor_read_static_addr+0x9a>
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   1d0c4:	4621      	mov	r1, r4
   1d0c6:	f8d2 00a4 	ldr.w	r0, [r2, #164]	; 0xa4
   1d0ca:	f7ff ffdc 	bl	1d086 <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   1d0ce:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   1d0d2:	7123      	strb	r3, [r4, #4]
	dst[1] = val >> 8;
   1d0d4:	f3c3 2307 	ubfx	r3, r3, #8, #8

		/* The FICR value is a just a random number, with no knowledge
		 * of the Bluetooth Specification requirements for random
		 * static addresses.
		 */
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   1d0d8:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1d0dc:	7163      	strb	r3, [r4, #5]

		/* If no public address is provided and a static address is
		 * available, then it is recommended to return an identity root
		 * key (if available) from this command.
		 */
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1d0de:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
   1d0e2:	3101      	adds	r1, #1
   1d0e4:	f104 0306 	add.w	r3, r4, #6
   1d0e8:	d024      	beq.n	1d134 <hci_vendor_read_static_addr+0x9c>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1d0ea:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1d0ee:	3101      	adds	r1, #1
   1d0f0:	d020      	beq.n	1d134 <hci_vendor_read_static_addr+0x9c>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1d0f2:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1d0f6:	3101      	adds	r1, #1
   1d0f8:	d01c      	beq.n	1d134 <hci_vendor_read_static_addr+0x9c>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   1d0fa:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1d0fe:	3101      	adds	r1, #1
   1d100:	d018      	beq.n	1d134 <hci_vendor_read_static_addr+0x9c>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   1d102:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
   1d106:	4619      	mov	r1, r3
   1d108:	f7ff ffbd 	bl	1d086 <sys_put_le32>
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   1d10c:	f104 010a 	add.w	r1, r4, #10
   1d110:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
   1d114:	f7ff ffb7 	bl	1d086 <sys_put_le32>
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   1d118:	f104 010e 	add.w	r1, r4, #14
   1d11c:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
   1d120:	f7ff ffb1 	bl	1d086 <sys_put_le32>
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   1d124:	f104 0112 	add.w	r1, r4, #18
   1d128:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
   1d12c:	f7ff ffab 	bl	1d086 <sys_put_le32>
		} else {
			/* Mark IR as invalid */
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
		}

		return 1;
   1d130:	2001      	movs	r0, #1
	}

	return 0;
}
   1d132:	bd10      	pop	{r4, pc}
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   1d134:	2210      	movs	r2, #16
   1d136:	2100      	movs	r1, #0
   1d138:	4618      	mov	r0, r3
   1d13a:	f7fc fd5e 	bl	19bfa <memset>
   1d13e:	e7f7      	b.n	1d130 <hci_vendor_read_static_addr+0x98>
	return 0;
   1d140:	2000      	movs	r0, #0
   1d142:	e7f6      	b.n	1d132 <hci_vendor_read_static_addr+0x9a>

0001d144 <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   1d144:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   1d146:	2210      	movs	r2, #16
{
   1d148:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   1d14a:	2100      	movs	r1, #0
   1d14c:	f7fc fd55 	bl	19bfa <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1d150:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1d154:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   1d158:	3301      	adds	r3, #1
   1d15a:	d023      	beq.n	1d1a4 <hci_vendor_read_key_hierarchy_roots+0x60>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1d15c:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1d160:	3301      	adds	r3, #1
   1d162:	d01f      	beq.n	1d1a4 <hci_vendor_read_key_hierarchy_roots+0x60>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1d164:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1d168:	3301      	adds	r3, #1
   1d16a:	d01b      	beq.n	1d1a4 <hci_vendor_read_key_hierarchy_roots+0x60>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   1d16c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1d170:	3301      	adds	r3, #1
   1d172:	d017      	beq.n	1d1a4 <hci_vendor_read_key_hierarchy_roots+0x60>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   1d174:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
   1d178:	4621      	mov	r1, r4
   1d17a:	f7ff ff84 	bl	1d086 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   1d17e:	1d21      	adds	r1, r4, #4
   1d180:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
   1d184:	f7ff ff7f 	bl	1d086 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   1d188:	f104 0108 	add.w	r1, r4, #8
   1d18c:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
   1d190:	f7ff ff79 	bl	1d086 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   1d194:	f104 010c 	add.w	r1, r4, #12
   1d198:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   1d19c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   1d1a0:	f7ff bf71 	b.w	1d086 <sys_put_le32>
		(void)memset(er, 0x00, 16);
   1d1a4:	4620      	mov	r0, r4
   1d1a6:	2210      	movs	r2, #16
}
   1d1a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   1d1ac:	2100      	movs	r1, #0
   1d1ae:	f7fc bd24 	b.w	19bfa <memset>

0001d1b2 <fixed_data_unref>:
}
   1d1b2:	4770      	bx	lr

0001d1b4 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1d1b4:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1d1b6:	6849      	ldr	r1, [r1, #4]
   1d1b8:	6809      	ldr	r1, [r1, #0]
   1d1ba:	f7f8 ba43 	b.w	15644 <net_buf_alloc_len>

0001d1be <net_buf_get>:
{
   1d1be:	b570      	push	{r4, r5, r6, lr}
   1d1c0:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   1d1c2:	f7fa f8cf 	bl	17364 <z_impl_k_queue_get>
	if (!buf) {
   1d1c6:	4605      	mov	r5, r0
   1d1c8:	b128      	cbz	r0, 1d1d6 <net_buf_get+0x18>
   1d1ca:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1d1cc:	7963      	ldrb	r3, [r4, #5]
   1d1ce:	f013 0301 	ands.w	r3, r3, #1
   1d1d2:	d102      	bne.n	1d1da <net_buf_get+0x1c>
	frag->frags = NULL;
   1d1d4:	6023      	str	r3, [r4, #0]
}
   1d1d6:	4628      	mov	r0, r5
   1d1d8:	bd70      	pop	{r4, r5, r6, pc}
   1d1da:	2300      	movs	r3, #0
   1d1dc:	2200      	movs	r2, #0
   1d1de:	4630      	mov	r0, r6
   1d1e0:	f7fa f8c0 	bl	17364 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   1d1e4:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1d1e6:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   1d1e8:	f023 0301 	bic.w	r3, r3, #1
   1d1ec:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1d1ee:	4604      	mov	r4, r0
   1d1f0:	e7ec      	b.n	1d1cc <net_buf_get+0xe>

0001d1f2 <net_buf_simple_init_with_data>:
	buf->size  = size;
   1d1f2:	b292      	uxth	r2, r2
	buf->__buf = data;
   1d1f4:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   1d1f6:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   1d1f8:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   1d1fa:	8082      	strh	r2, [r0, #4]
}
   1d1fc:	4770      	bx	lr

0001d1fe <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   1d1fe:	6883      	ldr	r3, [r0, #8]
   1d200:	440b      	add	r3, r1
   1d202:	6003      	str	r3, [r0, #0]
}
   1d204:	4770      	bx	lr

0001d206 <net_buf_slist_put>:
{
   1d206:	b510      	push	{r4, lr}
	for (tail = buf; tail->frags; tail = tail->frags) {
   1d208:	460b      	mov	r3, r1
   1d20a:	681c      	ldr	r4, [r3, #0]
   1d20c:	b984      	cbnz	r4, 1d230 <net_buf_slist_put+0x2a>
	__asm__ volatile(
   1d20e:	f04f 0220 	mov.w	r2, #32
   1d212:	f3ef 8411 	mrs	r4, BASEPRI
   1d216:	f382 8811 	msr	BASEPRI, r2
   1d21a:	f3bf 8f6f 	isb	sy
Z_GENLIST_APPEND_LIST(slist, snode)
   1d21e:	6842      	ldr	r2, [r0, #4]
   1d220:	b962      	cbnz	r2, 1d23c <net_buf_slist_put+0x36>
	list->head = node;
   1d222:	6001      	str	r1, [r0, #0]
	list->tail = node;
   1d224:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   1d226:	f384 8811 	msr	BASEPRI, r4
   1d22a:	f3bf 8f6f 	isb	sy
}
   1d22e:	bd10      	pop	{r4, pc}
		tail->flags |= NET_BUF_FRAGS;
   1d230:	795a      	ldrb	r2, [r3, #5]
   1d232:	f042 0201 	orr.w	r2, r2, #1
   1d236:	715a      	strb	r2, [r3, #5]
   1d238:	4623      	mov	r3, r4
   1d23a:	e7e6      	b.n	1d20a <net_buf_slist_put+0x4>
	parent->next = child;
   1d23c:	6011      	str	r1, [r2, #0]
}
   1d23e:	e7f1      	b.n	1d224 <net_buf_slist_put+0x1e>

0001d240 <net_buf_put>:
{
   1d240:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   1d242:	460a      	mov	r2, r1
   1d244:	6814      	ldr	r4, [r2, #0]
   1d246:	b914      	cbnz	r4, 1d24e <net_buf_put+0xe>
}
   1d248:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   1d24a:	f000 bbcf 	b.w	1d9ec <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1d24e:	7953      	ldrb	r3, [r2, #5]
   1d250:	f043 0301 	orr.w	r3, r3, #1
   1d254:	7153      	strb	r3, [r2, #5]
   1d256:	4622      	mov	r2, r4
   1d258:	e7f4      	b.n	1d244 <net_buf_put+0x4>

0001d25a <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1d25a:	7902      	ldrb	r2, [r0, #4]
   1d25c:	3201      	adds	r2, #1
   1d25e:	7102      	strb	r2, [r0, #4]
	return buf;
}
   1d260:	4770      	bx	lr

0001d262 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1d262:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   1d264:	4618      	mov	r0, r3
   1d266:	681b      	ldr	r3, [r3, #0]
   1d268:	2b00      	cmp	r3, #0
   1d26a:	d1fb      	bne.n	1d264 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   1d26c:	4770      	bx	lr

0001d26e <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   1d26e:	6802      	ldr	r2, [r0, #0]
{
   1d270:	b510      	push	{r4, lr}
	if (parent->frags) {
   1d272:	b12a      	cbz	r2, 1d280 <net_buf_frag_insert+0x12>
   1d274:	460b      	mov	r3, r1
	while (buf->frags) {
   1d276:	461c      	mov	r4, r3
   1d278:	681b      	ldr	r3, [r3, #0]
   1d27a:	2b00      	cmp	r3, #0
   1d27c:	d1fb      	bne.n	1d276 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   1d27e:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1d280:	6001      	str	r1, [r0, #0]
}
   1d282:	bd10      	pop	{r4, pc}

0001d284 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1d284:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   1d286:	4604      	mov	r4, r0
   1d288:	b920      	cbnz	r0, 1d294 <net_buf_frag_add+0x10>
	buf->ref++;
   1d28a:	790b      	ldrb	r3, [r1, #4]
   1d28c:	3301      	adds	r3, #1
   1d28e:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   1d290:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1d292:	bd10      	pop	{r4, pc}
   1d294:	4603      	mov	r3, r0
	while (buf->frags) {
   1d296:	4618      	mov	r0, r3
   1d298:	681b      	ldr	r3, [r3, #0]
   1d29a:	2b00      	cmp	r3, #0
   1d29c:	d1fb      	bne.n	1d296 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1d29e:	f7ff ffe6 	bl	1d26e <net_buf_frag_insert>
   1d2a2:	4620      	mov	r0, r4
   1d2a4:	e7f5      	b.n	1d292 <net_buf_frag_add+0xe>

0001d2a6 <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   1d2a6:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	__ASSERT_NO_MSG(frag);

	if (parent) {
   1d2a8:	b108      	cbz	r0, 1d2ae <net_buf_frag_del+0x8>
   1d2aa:	680b      	ldr	r3, [r1, #0]
		__ASSERT_NO_MSG(parent->frags);
		__ASSERT_NO_MSG(parent->frags == frag);
		parent->frags = frag->frags;
   1d2ac:	6003      	str	r3, [r0, #0]
	}

	next_frag = frag->frags;
   1d2ae:	680c      	ldr	r4, [r1, #0]

	frag->frags = NULL;
   1d2b0:	2300      	movs	r3, #0

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   1d2b2:	4608      	mov	r0, r1
	frag->frags = NULL;
   1d2b4:	600b      	str	r3, [r1, #0]
	net_buf_unref(frag);
   1d2b6:	f7f8 fa51 	bl	1575c <net_buf_unref>
#endif

	return next_frag;
}
   1d2ba:	4620      	mov	r0, r4
   1d2bc:	bd10      	pop	{r4, pc}

0001d2be <net_buf_simple_add>:
	return buf->data + buf->len;
   1d2be:	8883      	ldrh	r3, [r0, #4]
   1d2c0:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1d2c2:	4419      	add	r1, r3
   1d2c4:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1d2c6:	18d0      	adds	r0, r2, r3
   1d2c8:	4770      	bx	lr

0001d2ca <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1d2ca:	b430      	push	{r4, r5}
   1d2cc:	8884      	ldrh	r4, [r0, #4]
   1d2ce:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   1d2d0:	18a3      	adds	r3, r4, r2
   1d2d2:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1d2d4:	1928      	adds	r0, r5, r4
}
   1d2d6:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1d2d8:	f7fc bc64 	b.w	19ba4 <memcpy>

0001d2dc <net_buf_simple_add_u8>:
   1d2dc:	8883      	ldrh	r3, [r0, #4]
   1d2de:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   1d2e0:	b510      	push	{r4, lr}
	buf->len += len;
   1d2e2:	1c5c      	adds	r4, r3, #1
   1d2e4:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   1d2e6:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   1d2e8:	18d0      	adds	r0, r2, r3
   1d2ea:	bd10      	pop	{r4, pc}

0001d2ec <net_buf_simple_add_be16>:
   1d2ec:	8883      	ldrh	r3, [r0, #4]
   1d2ee:	6802      	ldr	r2, [r0, #0]

	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
}

void net_buf_simple_add_be16(struct net_buf_simple *buf, uint16_t val)
{
   1d2f0:	b530      	push	{r4, r5, lr}
	buf->len += len;
   1d2f2:	1c9d      	adds	r5, r3, #2
   1d2f4:	8085      	strh	r5, [r0, #4]
   1d2f6:	18d4      	adds	r4, r2, r3
	dst[0] = val >> 8;
   1d2f8:	0a08      	lsrs	r0, r1, #8
   1d2fa:	54d0      	strb	r0, [r2, r3]
	dst[1] = val;
   1d2fc:	7061      	strb	r1, [r4, #1]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_be16(val, net_buf_simple_add(buf, sizeof(val)));
}
   1d2fe:	bd30      	pop	{r4, r5, pc}

0001d300 <net_buf_simple_add_be32>:
   1d300:	8882      	ldrh	r2, [r0, #4]

	sys_put_le32(val, net_buf_simple_add(buf, sizeof(val)));
}

void net_buf_simple_add_be32(struct net_buf_simple *buf, uint32_t val)
{
   1d302:	b530      	push	{r4, r5, lr}
   1d304:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
   1d306:	1d15      	adds	r5, r2, #4
   1d308:	8085      	strh	r5, [r0, #4]
   1d30a:	18a3      	adds	r3, r4, r2
	dst[0] = val >> 8;
   1d30c:	0e0d      	lsrs	r5, r1, #24
   1d30e:	54a5      	strb	r5, [r4, r2]
	sys_put_be16(val >> 16, dst);
   1d310:	0c08      	lsrs	r0, r1, #16
	dst[0] = val >> 8;
   1d312:	f3c1 2207 	ubfx	r2, r1, #8, #8
	dst[1] = val;
   1d316:	7058      	strb	r0, [r3, #1]
	dst[0] = val >> 8;
   1d318:	709a      	strb	r2, [r3, #2]
	dst[1] = val;
   1d31a:	70d9      	strb	r1, [r3, #3]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_be32(val, net_buf_simple_add(buf, sizeof(val)));
}
   1d31c:	bd30      	pop	{r4, r5, pc}

0001d31e <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1d31e:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1d320:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   1d322:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   1d324:	1a40      	subs	r0, r0, r1
	buf->len += len;
   1d326:	4411      	add	r1, r2
	buf->data -= len;
   1d328:	6018      	str	r0, [r3, #0]
	buf->len += len;
   1d32a:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   1d32c:	4770      	bx	lr

0001d32e <net_buf_simple_push_be16>:
	buf->data -= len;
   1d32e:	6803      	ldr	r3, [r0, #0]
   1d330:	1e9a      	subs	r2, r3, #2
   1d332:	6002      	str	r2, [r0, #0]
	buf->len += len;
   1d334:	8882      	ldrh	r2, [r0, #4]
   1d336:	3202      	adds	r2, #2
   1d338:	8082      	strh	r2, [r0, #4]
	dst[0] = val >> 8;
   1d33a:	0a0a      	lsrs	r2, r1, #8
   1d33c:	f803 2c02 	strb.w	r2, [r3, #-2]
	dst[1] = val;
   1d340:	f803 1c01 	strb.w	r1, [r3, #-1]
void net_buf_simple_push_be16(struct net_buf_simple *buf, uint16_t val)
{
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_be16(val, net_buf_simple_push(buf, sizeof(val)));
}
   1d344:	4770      	bx	lr

0001d346 <net_buf_simple_push_u8>:
	buf->data -= len;
   1d346:	6802      	ldr	r2, [r0, #0]
   1d348:	1e53      	subs	r3, r2, #1
   1d34a:	6003      	str	r3, [r0, #0]
	buf->len += len;
   1d34c:	8883      	ldrh	r3, [r0, #4]
   1d34e:	3301      	adds	r3, #1
   1d350:	8083      	strh	r3, [r0, #4]

void net_buf_simple_push_u8(struct net_buf_simple *buf, uint8_t val)
{
	uint8_t *data = net_buf_simple_push(buf, 1);

	*data = val;
   1d352:	f802 1c01 	strb.w	r1, [r2, #-1]
}
   1d356:	4770      	bx	lr

0001d358 <net_buf_simple_push_be24>:
	buf->data -= len;
   1d358:	6803      	ldr	r3, [r0, #0]
   1d35a:	1eda      	subs	r2, r3, #3
   1d35c:	6002      	str	r2, [r0, #0]
	buf->len += len;
   1d35e:	8882      	ldrh	r2, [r0, #4]
   1d360:	3203      	adds	r2, #3
   1d362:	8082      	strh	r2, [r0, #4]
	dst[0] = val >> 16;
   1d364:	0c0a      	lsrs	r2, r1, #16
   1d366:	f803 2c03 	strb.w	r2, [r3, #-3]
	dst[0] = val >> 8;
   1d36a:	f3c1 2207 	ubfx	r2, r1, #8, #8
   1d36e:	f803 2c02 	strb.w	r2, [r3, #-2]
	dst[1] = val;
   1d372:	f803 1c01 	strb.w	r1, [r3, #-1]
void net_buf_simple_push_be24(struct net_buf_simple *buf, uint32_t val)
{
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_be24(val, net_buf_simple_push(buf, 3));
}
   1d376:	4770      	bx	lr

0001d378 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1d378:	8882      	ldrh	r2, [r0, #4]
   1d37a:	1a52      	subs	r2, r2, r1
{
   1d37c:	4603      	mov	r3, r0
	buf->len -= len;
   1d37e:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1d380:	6800      	ldr	r0, [r0, #0]
   1d382:	4408      	add	r0, r1
   1d384:	6018      	str	r0, [r3, #0]
}
   1d386:	4770      	bx	lr

0001d388 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   1d388:	4603      	mov	r3, r0
	void *data = buf->data;
   1d38a:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1d38c:	889a      	ldrh	r2, [r3, #4]
   1d38e:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1d390:	4401      	add	r1, r0
	buf->len -= len;
   1d392:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1d394:	6019      	str	r1, [r3, #0]

	return data;
}
   1d396:	4770      	bx	lr

0001d398 <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   1d398:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   1d39a:	6803      	ldr	r3, [r0, #0]
   1d39c:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1d39e:	2101      	movs	r1, #1
   1d3a0:	f7ff ffea 	bl	1d378 <net_buf_simple_pull>

	return val;
}
   1d3a4:	4620      	mov	r0, r4
   1d3a6:	bd10      	pop	{r4, pc}

0001d3a8 <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   1d3a8:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   1d3aa:	6803      	ldr	r3, [r0, #0]
   1d3ac:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1d3ae:	2102      	movs	r1, #2
   1d3b0:	f7ff ffe2 	bl	1d378 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   1d3b4:	4620      	mov	r0, r4
   1d3b6:	bd10      	pop	{r4, pc}

0001d3b8 <net_buf_simple_pull_be16>:

uint16_t net_buf_simple_pull_be16(struct net_buf_simple *buf)
{
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   1d3b8:	6803      	ldr	r3, [r0, #0]
{
   1d3ba:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   1d3bc:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1d3be:	2102      	movs	r1, #2
   1d3c0:	f7ff ffda 	bl	1d378 <net_buf_simple_pull>

	return sys_be16_to_cpu(val);
   1d3c4:	0220      	lsls	r0, r4, #8
   1d3c6:	ea40 2014 	orr.w	r0, r0, r4, lsr #8
}
   1d3ca:	b280      	uxth	r0, r0
   1d3cc:	bd10      	pop	{r4, pc}

0001d3ce <net_buf_simple_pull_be32>:

	return sys_le32_to_cpu(val);
}

uint32_t net_buf_simple_pull_be32(struct net_buf_simple *buf)
{
   1d3ce:	b510      	push	{r4, lr}
   1d3d0:	6803      	ldr	r3, [r0, #0]
   1d3d2:	681c      	ldr	r4, [r3, #0]
	uint32_t val;

	val = UNALIGNED_GET((uint32_t *)buf->data);
	net_buf_simple_pull(buf, sizeof(val));
   1d3d4:	2104      	movs	r1, #4
   1d3d6:	ba24      	rev	r4, r4
   1d3d8:	f7ff ffce 	bl	1d378 <net_buf_simple_pull>

	return sys_be32_to_cpu(val);
}
   1d3dc:	4620      	mov	r0, r4
   1d3de:	bd10      	pop	{r4, pc}

0001d3e0 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1d3e0:	6802      	ldr	r2, [r0, #0]
   1d3e2:	6880      	ldr	r0, [r0, #8]
}
   1d3e4:	1a10      	subs	r0, r2, r0
   1d3e6:	4770      	bx	lr

0001d3e8 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1d3e8:	8883      	ldrh	r3, [r0, #4]
   1d3ea:	88c2      	ldrh	r2, [r0, #6]
   1d3ec:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   1d3ee:	6803      	ldr	r3, [r0, #0]
   1d3f0:	6880      	ldr	r0, [r0, #8]
   1d3f2:	1a18      	subs	r0, r3, r0
}
   1d3f4:	1a10      	subs	r0, r2, r0
   1d3f6:	4770      	bx	lr

0001d3f8 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   1d3f8:	f000 001f 	and.w	r0, r0, #31
   1d3fc:	0080      	lsls	r0, r0, #2
   1d3fe:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1d402:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
   1d406:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1d40a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1d40e:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
   1d412:	4770      	bx	lr

0001d414 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d414:	6843      	ldr	r3, [r0, #4]
   1d416:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1d418:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   1d41c:	600b      	str	r3, [r1, #0]
}
   1d41e:	2000      	movs	r0, #0
   1d420:	4770      	bx	lr

0001d422 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d422:	6843      	ldr	r3, [r0, #4]
   1d424:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1d426:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1d42a:	4042      	eors	r2, r0
   1d42c:	400a      	ands	r2, r1
   1d42e:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1d430:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1d434:	2000      	movs	r0, #0
   1d436:	4770      	bx	lr

0001d438 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d438:	6843      	ldr	r3, [r0, #4]
   1d43a:	685b      	ldr	r3, [r3, #4]
}
   1d43c:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   1d43e:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1d442:	4770      	bx	lr

0001d444 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d444:	6843      	ldr	r3, [r0, #4]
   1d446:	685b      	ldr	r3, [r3, #4]
}
   1d448:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1d44a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   1d44e:	4770      	bx	lr

0001d450 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d450:	6843      	ldr	r3, [r0, #4]
   1d452:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1d454:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   1d458:	404b      	eors	r3, r1
    p_reg->OUT = value;
   1d45a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   1d45e:	2000      	movs	r0, #0
   1d460:	4770      	bx	lr

0001d462 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1d462:	6903      	ldr	r3, [r0, #16]
Z_GENLIST_IS_EMPTY(slist)
   1d464:	6858      	ldr	r0, [r3, #4]
{
   1d466:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   1d468:	b158      	cbz	r0, 1d482 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d46a:	2400      	movs	r4, #0
   1d46c:	4281      	cmp	r1, r0
   1d46e:	d113      	bne.n	1d498 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   1d470:	6808      	ldr	r0, [r1, #0]
   1d472:	b95c      	cbnz	r4, 1d48c <gpio_nrfx_manage_callback+0x2a>
   1d474:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   1d476:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1d478:	42a1      	cmp	r1, r4
   1d47a:	d100      	bne.n	1d47e <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   1d47c:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1d47e:	2000      	movs	r0, #0
   1d480:	6008      	str	r0, [r1, #0]
	if (set) {
   1d482:	b972      	cbnz	r2, 1d4a2 <gpio_nrfx_manage_callback+0x40>
	return 0;
   1d484:	2000      	movs	r0, #0
}
   1d486:	bd30      	pop	{r4, r5, pc}
   1d488:	4628      	mov	r0, r5
   1d48a:	e7ef      	b.n	1d46c <gpio_nrfx_manage_callback+0xa>
   1d48c:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1d48e:	6898      	ldr	r0, [r3, #8]
   1d490:	4281      	cmp	r1, r0
	list->tail = node;
   1d492:	bf08      	it	eq
   1d494:	609c      	streq	r4, [r3, #8]
}
   1d496:	e7f2      	b.n	1d47e <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1d498:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d49a:	4604      	mov	r4, r0
   1d49c:	2d00      	cmp	r5, #0
   1d49e:	d1f3      	bne.n	1d488 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   1d4a0:	b13a      	cbz	r2, 1d4b2 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   1d4a2:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1d4a4:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1d4a6:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   1d4a8:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1d4aa:	2800      	cmp	r0, #0
   1d4ac:	d1ea      	bne.n	1d484 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   1d4ae:	6099      	str	r1, [r3, #8]
}
   1d4b0:	e7e9      	b.n	1d486 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   1d4b2:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1d4b6:	e7e6      	b.n	1d486 <gpio_nrfx_manage_callback+0x24>

0001d4b8 <is_regular_addr_valid>:
{
   1d4b8:	b538      	push	{r3, r4, r5, lr}
   1d4ba:	4604      	mov	r4, r0
   1d4bc:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   1d4be:	f000 f8ae 	bl	1d61e <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   1d4c2:	4284      	cmp	r4, r0
   1d4c4:	d209      	bcs.n	1d4da <is_regular_addr_valid+0x22>
   1d4c6:	2c00      	cmp	r4, #0
   1d4c8:	db07      	blt.n	1d4da <is_regular_addr_valid+0x22>
	    addr < 0 ||
   1d4ca:	42a8      	cmp	r0, r5
   1d4cc:	d305      	bcc.n	1d4da <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   1d4ce:	442c      	add	r4, r5
	    len > flash_size ||
   1d4d0:	4284      	cmp	r4, r0
   1d4d2:	bf8c      	ite	hi
   1d4d4:	2000      	movhi	r0, #0
   1d4d6:	2001      	movls	r0, #1
}
   1d4d8:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1d4da:	2000      	movs	r0, #0
   1d4dc:	e7fc      	b.n	1d4d8 <is_regular_addr_valid+0x20>

0001d4de <erase_op>:
{
   1d4de:	b570      	push	{r4, r5, r6, lr}
   1d4e0:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1d4e2:	f000 f8a2 	bl	1d62a <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   1d4e6:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1d4e8:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   1d4ea:	b10b      	cbz	r3, 1d4f0 <erase_op+0x12>
		nrf_flash_sync_get_timestamp_begin();
   1d4ec:	f7f8 fd10 	bl	15f10 <nrf_flash_sync_get_timestamp_begin>
{
   1d4f0:	2600      	movs	r6, #0
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   1d4f2:	6860      	ldr	r0, [r4, #4]
   1d4f4:	f7f9 fabe 	bl	16a74 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   1d4f8:	68a3      	ldr	r3, [r4, #8]
   1d4fa:	1b5b      	subs	r3, r3, r5
   1d4fc:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   1d4fe:	6863      	ldr	r3, [r4, #4]
   1d500:	442b      	add	r3, r5
   1d502:	6063      	str	r3, [r4, #4]
		if (e_ctx->enable_time_limit) {
   1d504:	7b23      	ldrb	r3, [r4, #12]
		i++;
   1d506:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   1d508:	b93b      	cbnz	r3, 1d51a <erase_op+0x3c>
	} while (e_ctx->len > 0);
   1d50a:	68a3      	ldr	r3, [r4, #8]
   1d50c:	2b00      	cmp	r3, #0
   1d50e:	d1f0      	bne.n	1d4f2 <erase_op+0x14>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   1d510:	68a0      	ldr	r0, [r4, #8]
}
   1d512:	3800      	subs	r0, #0
   1d514:	bf18      	it	ne
   1d516:	2001      	movne	r0, #1
   1d518:	bd70      	pop	{r4, r5, r6, pc}
			if (nrf_flash_sync_check_time_limit(i)) {
   1d51a:	4630      	mov	r0, r6
   1d51c:	f7e4 f8fc 	bl	1718 <nrf_flash_sync_check_time_limit>
   1d520:	2800      	cmp	r0, #0
   1d522:	d0f2      	beq.n	1d50a <erase_op+0x2c>
   1d524:	e7f4      	b.n	1d510 <erase_op+0x32>

0001d526 <nrf_flash_sync_is_required>:
	return ticker_is_initialized(0);
   1d526:	2000      	movs	r0, #0
   1d528:	f7f1 bd7e 	b.w	f028 <ticker_is_initialized>

0001d52c <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   1d52c:	6843      	ldr	r3, [r0, #4]
   1d52e:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   1d530:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1d534:	05d1      	lsls	r1, r2, #23
   1d536:	d518      	bpl.n	1d56a <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d538:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   1d53c:	b1aa      	cbz	r2, 1d56a <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   1d53e:	f04f 0120 	mov.w	r1, #32
   1d542:	f3ef 8211 	mrs	r2, BASEPRI
   1d546:	f381 8811 	msr	BASEPRI, r1
   1d54a:	f3bf 8f6f 	isb	sy
   1d54e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1d552:	b131      	cbz	r1, 1d562 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d554:	2100      	movs	r1, #0
   1d556:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1d55a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d55e:	2101      	movs	r1, #1
   1d560:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1d562:	f382 8811 	msr	BASEPRI, r2
   1d566:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1d56a:	6842      	ldr	r2, [r0, #4]
   1d56c:	6852      	ldr	r2, [r2, #4]
   1d56e:	06d2      	lsls	r2, r2, #27
   1d570:	d515      	bpl.n	1d59e <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
   1d572:	f04f 0120 	mov.w	r1, #32
   1d576:	f3ef 8211 	mrs	r2, BASEPRI
   1d57a:	f381 8811 	msr	BASEPRI, r1
   1d57e:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d582:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1d586:	b111      	cbz	r1, 1d58e <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1d588:	2100      	movs	r1, #0
   1d58a:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   1d58e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1d592:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   1d596:	f382 8811 	msr	BASEPRI, r2
   1d59a:	f3bf 8f6f 	isb	sy
}
   1d59e:	4770      	bx	lr

0001d5a0 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   1d5a0:	6902      	ldr	r2, [r0, #16]
{
   1d5a2:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1d5a4:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1d5a8:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1d5ac:	2000      	movs	r0, #0
   1d5ae:	4770      	bx	lr

0001d5b0 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1d5b0:	6843      	ldr	r3, [r0, #4]
   1d5b2:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1d5b4:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1d5b8:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1d5bc:	4770      	bx	lr

0001d5be <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   1d5be:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   1d5c0:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d5c2:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1d5c6:	b940      	cbnz	r0, 1d5da <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   1d5c8:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1d5ca:	0712      	lsls	r2, r2, #28
   1d5cc:	d406      	bmi.n	1d5dc <is_tx_ready+0x1e>
   1d5ce:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   1d5d2:	3800      	subs	r0, #0
   1d5d4:	bf18      	it	ne
   1d5d6:	2001      	movne	r0, #1
   1d5d8:	4770      	bx	lr
   1d5da:	2001      	movs	r0, #1
}
   1d5dc:	4770      	bx	lr

0001d5de <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1d5de:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1d5e0:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   1d5e2:	681b      	ldr	r3, [r3, #0]
   1d5e4:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1d5e8:	b148      	cbz	r0, 1d5fe <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   1d5ea:	7c52      	ldrb	r2, [r2, #17]
   1d5ec:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d5ee:	2000      	movs	r0, #0
   1d5f0:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1d5f4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d5f8:	2201      	movs	r2, #1
   1d5fa:	601a      	str	r2, [r3, #0]
	return 0;
   1d5fc:	4770      	bx	lr
		return -1;
   1d5fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1d602:	4770      	bx	lr

0001d604 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1d604:	4700      	bx	r0

0001d606 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1d606:	f000 bc93 	b.w	1df30 <z_impl_k_busy_wait>

0001d60a <nrfx_clock_enable>:
{
   1d60a:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1d60c:	2000      	movs	r0, #0
   1d60e:	f7e5 ffe3 	bl	35d8 <arch_irq_is_enabled>
   1d612:	b918      	cbnz	r0, 1d61c <nrfx_clock_enable+0x12>
}
   1d614:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1d618:	f7e5 bfba 	b.w	3590 <arch_irq_enable>
   1d61c:	bd08      	pop	{r3, pc}

0001d61e <nrfx_nvmc_flash_size_get>:
   1d61e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1d622:	691a      	ldr	r2, [r3, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   1d624:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   1d626:	4350      	muls	r0, r2
   1d628:	4770      	bx	lr

0001d62a <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   1d62a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1d62e:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   1d630:	4770      	bx	lr

0001d632 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   1d632:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1d636:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   1d638:	4770      	bx	lr

0001d63a <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   1d63a:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   1d63c:	68c1      	ldr	r1, [r0, #12]
  if (RdOff <= WrOff) {
   1d63e:	428b      	cmp	r3, r1
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1d640:	bf9d      	ittte	ls
   1d642:	6882      	ldrls	r2, [r0, #8]
   1d644:	18d2      	addls	r2, r2, r3
   1d646:	f102 32ff 	addls.w	r2, r2, #4294967295	; 0xffffffff
    r = RdOff - WrOff - 1u;
   1d64a:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1d64e:	bf94      	ite	ls
   1d650:	1a50      	subls	r0, r2, r1
    r = RdOff - WrOff - 1u;
   1d652:	1a58      	subhi	r0, r3, r1
}
   1d654:	4770      	bx	lr

0001d656 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1d656:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   1d65a:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1d65e:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   1d660:	eba9 0804 	sub.w	r8, r9, r4
  if (Rem > NumBytes) {
   1d664:	6840      	ldr	r0, [r0, #4]
   1d666:	4590      	cmp	r8, r2
   1d668:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1d66a:	460f      	mov	r7, r1
   1d66c:	4414      	add	r4, r2
  if (Rem > NumBytes) {
   1d66e:	d904      	bls.n	1d67a <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   1d670:	f7fc fa98 	bl	19ba4 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   1d674:	60ec      	str	r4, [r5, #12]
}
   1d676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   1d67a:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
   1d67c:	eba4 0409 	sub.w	r4, r4, r9
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   1d680:	f7fc fa90 	bl	19ba4 <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   1d684:	6868      	ldr	r0, [r5, #4]
   1d686:	4622      	mov	r2, r4
   1d688:	eb07 0108 	add.w	r1, r7, r8
   1d68c:	e7f0      	b.n	1d670 <_WriteNoCheck+0x1a>

0001d68e <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   1d68e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
   1d692:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   1d694:	4606      	mov	r6, r0
   1d696:	4689      	mov	r9, r1
   1d698:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   1d69a:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   1d69e:	6934      	ldr	r4, [r6, #16]
    if (RdOff > WrOff) {
   1d6a0:	68b3      	ldr	r3, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1d6a2:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
   1d6a4:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1d6a6:	bf28      	it	cs
   1d6a8:	18e4      	addcs	r4, r4, r3
   1d6aa:	3c01      	subs	r4, #1
   1d6ac:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   1d6ae:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   1d6b0:	42bc      	cmp	r4, r7
   1d6b2:	bf28      	it	cs
   1d6b4:	463c      	movcs	r4, r7
   1d6b6:	4294      	cmp	r4, r2
   1d6b8:	bf28      	it	cs
   1d6ba:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
   1d6bc:	4649      	mov	r1, r9
   1d6be:	4428      	add	r0, r5
   1d6c0:	4622      	mov	r2, r4
   1d6c2:	f7fc fa6f 	bl	19ba4 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   1d6c6:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   1d6c8:	4425      	add	r5, r4
      WrOff = 0u;
   1d6ca:	42ab      	cmp	r3, r5
   1d6cc:	bf08      	it	eq
   1d6ce:	2500      	moveq	r5, #0
  } while (NumBytes);
   1d6d0:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   1d6d2:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   1d6d4:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   1d6d6:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   1d6d8:	d1e1      	bne.n	1d69e <_WriteBlocking+0x10>
}
   1d6da:	4640      	mov	r0, r8
   1d6dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001d6e0 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   1d6e0:	f7f9 ba34 	b.w	16b4c <_DoInit>

0001d6e4 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   1d6e4:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1d6e6:	f7ff fffb 	bl	1d6e0 <SEGGER_RTT_Init>

	return 0;
}
   1d6ea:	2000      	movs	r0, #0
   1d6ec:	bd08      	pop	{r3, pc}

0001d6ee <z_device_state_init>:
}
   1d6ee:	4770      	bx	lr

0001d6f0 <z_device_ready>:
	return __device_end - __device_start;
}

bool z_device_ready(const struct device *dev)
{
	return dev->state->initialized && (dev->state->init_res == 0U);
   1d6f0:	68c3      	ldr	r3, [r0, #12]
   1d6f2:	8818      	ldrh	r0, [r3, #0]
   1d6f4:	f3c0 0008 	ubfx	r0, r0, #0, #9
}
   1d6f8:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   1d6fc:	4258      	negs	r0, r3
   1d6fe:	4158      	adcs	r0, r3
   1d700:	4770      	bx	lr

0001d702 <k_heap_init>:
{
   1d702:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   1d704:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1d708:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1d70c:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1d70e:	f7fb ba77 	b.w	18c00 <sys_heap_init>

0001d712 <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1d712:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d716:	b087      	sub	sp, #28
   1d718:	4604      	mov	r4, r0
   1d71a:	460e      	mov	r6, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1d71c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
{
   1d720:	4617      	mov	r7, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1d722:	f000 fc09 	bl	1df38 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1d726:	f104 0914 	add.w	r9, r4, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1d72a:	4605      	mov	r5, r0
   1d72c:	4688      	mov	r8, r1
	__asm__ volatile(
   1d72e:	f04f 0320 	mov.w	r3, #32
   1d732:	f3ef 8b11 	mrs	fp, BASEPRI
   1d736:	f383 8811 	msr	BASEPRI, r3
   1d73a:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1d73e:	f104 0a0c 	add.w	sl, r4, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   1d742:	463a      	mov	r2, r7
   1d744:	4631      	mov	r1, r6
   1d746:	4620      	mov	r0, r4
   1d748:	f7fb f9df 	bl	18b0a <sys_heap_aligned_alloc>
   1d74c:	9005      	str	r0, [sp, #20]
		now = sys_clock_tick_get();
   1d74e:	f7fa fd5f 	bl	18210 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   1d752:	9b05      	ldr	r3, [sp, #20]
   1d754:	b13b      	cbz	r3, 1d766 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   1d756:	f38b 8811 	msr	BASEPRI, fp
   1d75a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1d75e:	4618      	mov	r0, r3
   1d760:	b007      	add	sp, #28
   1d762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   1d766:	1a2a      	subs	r2, r5, r0
   1d768:	9202      	str	r2, [sp, #8]
   1d76a:	eb68 0201 	sbc.w	r2, r8, r1
   1d76e:	9203      	str	r2, [sp, #12]
   1d770:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   1d774:	2901      	cmp	r1, #1
   1d776:	f172 0200 	sbcs.w	r2, r2, #0
   1d77a:	dbec      	blt.n	1d756 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1d77c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1d780:	4659      	mov	r1, fp
   1d782:	e9cd 2300 	strd	r2, r3, [sp]
   1d786:	4648      	mov	r0, r9
   1d788:	4652      	mov	r2, sl
   1d78a:	f7fa f905 	bl	17998 <z_pend_curr>
	__asm__ volatile(
   1d78e:	f04f 0320 	mov.w	r3, #32
   1d792:	f3ef 8b11 	mrs	fp, BASEPRI
   1d796:	f383 8811 	msr	BASEPRI, r3
   1d79a:	f3bf 8f6f 	isb	sy
   1d79e:	e7d0      	b.n	1d742 <k_heap_aligned_alloc+0x30>

0001d7a0 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   1d7a0:	b538      	push	{r3, r4, r5, lr}
   1d7a2:	4604      	mov	r4, r0
   1d7a4:	f04f 0320 	mov.w	r3, #32
   1d7a8:	f3ef 8511 	mrs	r5, BASEPRI
   1d7ac:	f383 8811 	msr	BASEPRI, r3
   1d7b0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   1d7b4:	f7fb f95c 	bl	18a70 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   1d7b8:	f104 000c 	add.w	r0, r4, #12
   1d7bc:	f000 fb35 	bl	1de2a <z_unpend_all>
   1d7c0:	b130      	cbz	r0, 1d7d0 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   1d7c2:	4629      	mov	r1, r5
   1d7c4:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1d7c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   1d7cc:	f7fa b860 	b.w	17890 <z_reschedule>
	__asm__ volatile(
   1d7d0:	f385 8811 	msr	BASEPRI, r5
   1d7d4:	f3bf 8f6f 	isb	sy
}
   1d7d8:	bd38      	pop	{r3, r4, r5, pc}

0001d7da <k_mem_slab_init>:
{
   1d7da:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   1d7dc:	2400      	movs	r4, #0
   1d7de:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1d7e0:	ea41 0402 	orr.w	r4, r1, r2
   1d7e4:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   1d7e8:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   1d7ec:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1d7ee:	d10c      	bne.n	1d80a <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   1d7f0:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1d7f2:	42a3      	cmp	r3, r4
   1d7f4:	d103      	bne.n	1d7fe <k_mem_slab_init+0x24>
   1d7f6:	e9c0 0000 	strd	r0, r0, [r0]
}
   1d7fa:	2000      	movs	r0, #0
}
   1d7fc:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   1d7fe:	6945      	ldr	r5, [r0, #20]
   1d800:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1d802:	3401      	adds	r4, #1
		slab->free_list = p;
   1d804:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   1d806:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   1d808:	e7f3      	b.n	1d7f2 <k_mem_slab_init+0x18>
		return -EINVAL;
   1d80a:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1d80e:	e7f5      	b.n	1d7fc <k_mem_slab_init+0x22>

0001d810 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1d810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d812:	4604      	mov	r4, r0
   1d814:	460d      	mov	r5, r1
	__asm__ volatile(
   1d816:	f04f 0320 	mov.w	r3, #32
   1d81a:	f3ef 8611 	mrs	r6, BASEPRI
   1d81e:	f383 8811 	msr	BASEPRI, r3
   1d822:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   1d826:	6947      	ldr	r7, [r0, #20]
   1d828:	b977      	cbnz	r7, 1d848 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1d82a:	f000 fae6 	bl	1ddfa <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1d82e:	b158      	cbz	r0, 1d848 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1d830:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1d832:	6142      	str	r2, [r0, #20]
   1d834:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   1d836:	f000 fa99 	bl	1dd6c <z_ready_thread>
			z_reschedule(&slab->lock, key);
   1d83a:	4631      	mov	r1, r6
   1d83c:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   1d840:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   1d844:	f7fa b824 	b.w	17890 <z_reschedule>
	**(char ***) mem = slab->free_list;
   1d848:	682b      	ldr	r3, [r5, #0]
   1d84a:	6962      	ldr	r2, [r4, #20]
   1d84c:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1d84e:	682b      	ldr	r3, [r5, #0]
   1d850:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   1d852:	69a3      	ldr	r3, [r4, #24]
   1d854:	3b01      	subs	r3, #1
   1d856:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1d858:	f386 8811 	msr	BASEPRI, r6
   1d85c:	f3bf 8f6f 	isb	sy
}
   1d860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d862 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1d862:	f3ef 8005 	mrs	r0, IPSR
}
   1d866:	3800      	subs	r0, #0
   1d868:	bf18      	it	ne
   1d86a:	2001      	movne	r0, #1
   1d86c:	4770      	bx	lr

0001d86e <z_impl_k_thread_name_set>:
}
   1d86e:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1d872:	4770      	bx	lr

0001d874 <k_thread_name_get>:
}
   1d874:	2000      	movs	r0, #0
   1d876:	4770      	bx	lr

0001d878 <z_impl_k_thread_start>:
	z_sched_start(thread);
   1d878:	f7fa b9e2 	b.w	17c40 <z_sched_start>

0001d87c <z_pm_save_idle_exit>:
{
   1d87c:	b508      	push	{r3, lr}
	pm_system_resume();
   1d87e:	f7e5 fa41 	bl	2d04 <pm_system_resume>
}
   1d882:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   1d886:	f7fb beda 	b.w	1963e <sys_clock_idle_exit>

0001d88a <queue_insert>:
{
   1d88a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d88e:	4699      	mov	r9, r3
   1d890:	4604      	mov	r4, r0
   1d892:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1d896:	460d      	mov	r5, r1
   1d898:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1d89a:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1d89e:	f04f 0220 	mov.w	r2, #32
   1d8a2:	f3ef 8711 	mrs	r7, BASEPRI
   1d8a6:	f382 8811 	msr	BASEPRI, r2
   1d8aa:	f3bf 8f6f 	isb	sy
	if (is_append) {
   1d8ae:	b103      	cbz	r3, 1d8b2 <queue_insert+0x28>
		prev = sys_sflist_peek_tail(&queue->data_q);
   1d8b0:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1d8b2:	4630      	mov	r0, r6
   1d8b4:	f000 faa1 	bl	1ddfa <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   1d8b8:	b158      	cbz	r0, 1d8d2 <queue_insert+0x48>
   1d8ba:	2400      	movs	r4, #0
   1d8bc:	67c4      	str	r4, [r0, #124]	; 0x7c
   1d8be:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   1d8c2:	f000 fa53 	bl	1dd6c <z_ready_thread>
	z_reschedule(&queue->lock, key);
   1d8c6:	4630      	mov	r0, r6
   1d8c8:	4639      	mov	r1, r7
   1d8ca:	f7f9 ffe1 	bl	17890 <z_reschedule>
	return 0;
   1d8ce:	2000      	movs	r0, #0
   1d8d0:	e00c      	b.n	1d8ec <queue_insert+0x62>
	if (alloc) {
   1d8d2:	f1b9 0f00 	cmp.w	r9, #0
   1d8d6:	d01b      	beq.n	1d910 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   1d8d8:	2108      	movs	r1, #8
   1d8da:	f7fa fd63 	bl	183a4 <z_thread_aligned_alloc>
		if (anode == NULL) {
   1d8de:	b938      	cbnz	r0, 1d8f0 <queue_insert+0x66>
	__asm__ volatile(
   1d8e0:	f387 8811 	msr	BASEPRI, r7
   1d8e4:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1d8e8:	f06f 000b 	mvn.w	r0, #11
}
   1d8ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   1d8f0:	2301      	movs	r3, #1
		anode->data = data;
   1d8f2:	f8c0 8004 	str.w	r8, [r0, #4]
   1d8f6:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1d8f8:	6803      	ldr	r3, [r0, #0]
   1d8fa:	f003 0203 	and.w	r2, r3, #3
   1d8fe:	b95d      	cbnz	r5, 1d918 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1d900:	6823      	ldr	r3, [r4, #0]
   1d902:	4313      	orrs	r3, r2
   1d904:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1d906:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   1d908:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1d90a:	b973      	cbnz	r3, 1d92a <queue_insert+0xa0>
	list->tail = node;
   1d90c:	6060      	str	r0, [r4, #4]
}
   1d90e:	e00c      	b.n	1d92a <queue_insert+0xa0>
	node->next_and_flags = flags;
   1d910:	f8c8 9000 	str.w	r9, [r8]
}
   1d914:	4640      	mov	r0, r8
   1d916:	e7ef      	b.n	1d8f8 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1d918:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1d91a:	f033 0303 	bics.w	r3, r3, #3
   1d91e:	d110      	bne.n	1d942 <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1d920:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   1d922:	6862      	ldr	r2, [r4, #4]
   1d924:	b93a      	cbnz	r2, 1d936 <queue_insert+0xac>
	list->head = node;
   1d926:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1d92a:	2104      	movs	r1, #4
   1d92c:	f104 0010 	add.w	r0, r4, #16
   1d930:	f000 fbb0 	bl	1e094 <z_handle_obj_poll_events>
   1d934:	e7c7      	b.n	1d8c6 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1d936:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1d938:	f003 0303 	and.w	r3, r3, #3
   1d93c:	4303      	orrs	r3, r0
   1d93e:	6013      	str	r3, [r2, #0]
   1d940:	e7e4      	b.n	1d90c <queue_insert+0x82>
   1d942:	4313      	orrs	r3, r2
   1d944:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1d946:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1d948:	f003 0303 	and.w	r3, r3, #3
   1d94c:	4303      	orrs	r3, r0
   1d94e:	602b      	str	r3, [r5, #0]
}
   1d950:	e7eb      	b.n	1d92a <queue_insert+0xa0>

0001d952 <z_queue_node_peek>:
{
   1d952:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1d954:	4604      	mov	r4, r0
   1d956:	b130      	cbz	r0, 1d966 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1d958:	6802      	ldr	r2, [r0, #0]
   1d95a:	0793      	lsls	r3, r2, #30
   1d95c:	d003      	beq.n	1d966 <z_queue_node_peek+0x14>
		ret = anode->data;
   1d95e:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1d960:	b109      	cbz	r1, 1d966 <z_queue_node_peek+0x14>
			k_free(anode);
   1d962:	f000 fba5 	bl	1e0b0 <k_free>
}
   1d966:	4620      	mov	r0, r4
   1d968:	bd10      	pop	{r4, pc}

0001d96a <z_impl_k_queue_init>:
	list->head = NULL;
   1d96a:	2300      	movs	r3, #0
	list->tail = NULL;
   1d96c:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   1d970:	f100 0308 	add.w	r3, r0, #8
   1d974:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   1d978:	f100 0310 	add.w	r3, r0, #16
   1d97c:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   1d980:	4770      	bx	lr

0001d982 <z_impl_k_queue_cancel_wait>:
{
   1d982:	b570      	push	{r4, r5, r6, lr}
   1d984:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1d986:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1d98a:	f04f 0320 	mov.w	r3, #32
   1d98e:	f3ef 8611 	mrs	r6, BASEPRI
   1d992:	f383 8811 	msr	BASEPRI, r3
   1d996:	f3bf 8f6f 	isb	sy
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1d99a:	4628      	mov	r0, r5
   1d99c:	f000 fa2d 	bl	1ddfa <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   1d9a0:	b120      	cbz	r0, 1d9ac <z_impl_k_queue_cancel_wait+0x2a>
   1d9a2:	2200      	movs	r2, #0
   1d9a4:	67c2      	str	r2, [r0, #124]	; 0x7c
	thread->base.swap_data = data;
   1d9a6:	6142      	str	r2, [r0, #20]
	z_ready_thread(thread);
   1d9a8:	f000 f9e0 	bl	1dd6c <z_ready_thread>
	z_handle_obj_poll_events(&queue->poll_events, state);
   1d9ac:	f104 0010 	add.w	r0, r4, #16
   1d9b0:	2108      	movs	r1, #8
   1d9b2:	f000 fb6f 	bl	1e094 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1d9b6:	4631      	mov	r1, r6
   1d9b8:	4628      	mov	r0, r5
}
   1d9ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&queue->lock, key);
   1d9be:	f7f9 bf67 	b.w	17890 <z_reschedule>

0001d9c2 <k_queue_append>:
{
   1d9c2:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   1d9c4:	2301      	movs	r3, #1
   1d9c6:	9300      	str	r3, [sp, #0]
   1d9c8:	2300      	movs	r3, #0
{
   1d9ca:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   1d9cc:	4619      	mov	r1, r3
   1d9ce:	f7ff ff5c 	bl	1d88a <queue_insert>
}
   1d9d2:	b003      	add	sp, #12
   1d9d4:	f85d fb04 	ldr.w	pc, [sp], #4

0001d9d8 <k_queue_prepend>:
{
   1d9d8:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   1d9da:	2300      	movs	r3, #0
{
   1d9dc:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   1d9de:	9300      	str	r3, [sp, #0]
   1d9e0:	4619      	mov	r1, r3
   1d9e2:	f7ff ff52 	bl	1d88a <queue_insert>
}
   1d9e6:	b003      	add	sp, #12
   1d9e8:	f85d fb04 	ldr.w	pc, [sp], #4

0001d9ec <k_queue_append_list>:
{
   1d9ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d9f0:	4605      	mov	r5, r0
   1d9f2:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   1d9f4:	460c      	mov	r4, r1
   1d9f6:	b391      	cbz	r1, 1da5e <k_queue_append_list+0x72>
   1d9f8:	b38a      	cbz	r2, 1da5e <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1d9fa:	f100 0708 	add.w	r7, r0, #8
   1d9fe:	f04f 0320 	mov.w	r3, #32
   1da02:	f3ef 8811 	mrs	r8, BASEPRI
   1da06:	f383 8811 	msr	BASEPRI, r3
   1da0a:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   1da0e:	4638      	mov	r0, r7
   1da10:	f000 f9f3 	bl	1ddfa <z_unpend_first_thread>
   1da14:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   1da18:	b920      	cbnz	r0, 1da24 <k_queue_append_list+0x38>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1da1a:	686b      	ldr	r3, [r5, #4]
   1da1c:	b9cb      	cbnz	r3, 1da52 <k_queue_append_list+0x66>
	list->head = node;
   1da1e:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1da20:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1da22:	e00a      	b.n	1da3a <k_queue_append_list+0x4e>
   1da24:	6144      	str	r4, [r0, #20]
   1da26:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   1da2a:	f000 f99f 	bl	1dd6c <z_ready_thread>
		head = *(void **)head;
   1da2e:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   1da30:	4638      	mov	r0, r7
   1da32:	f000 f9e2 	bl	1ddfa <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   1da36:	2c00      	cmp	r4, #0
   1da38:	d1ee      	bne.n	1da18 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   1da3a:	2104      	movs	r1, #4
   1da3c:	f105 0010 	add.w	r0, r5, #16
   1da40:	f000 fb28 	bl	1e094 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1da44:	4638      	mov	r0, r7
   1da46:	4641      	mov	r1, r8
   1da48:	f7f9 ff22 	bl	17890 <z_reschedule>
	return 0;
   1da4c:	2000      	movs	r0, #0
}
   1da4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1da52:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1da54:	f001 0103 	and.w	r1, r1, #3
   1da58:	430c      	orrs	r4, r1
   1da5a:	601c      	str	r4, [r3, #0]
}
   1da5c:	e7e0      	b.n	1da20 <k_queue_append_list+0x34>
		return -EINVAL;
   1da5e:	f06f 0015 	mvn.w	r0, #21
   1da62:	e7f4      	b.n	1da4e <k_queue_append_list+0x62>

0001da64 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   1da64:	b15a      	cbz	r2, 1da7e <z_impl_k_sem_init+0x1a>
   1da66:	428a      	cmp	r2, r1
   1da68:	d309      	bcc.n	1da7e <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1da6a:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1da6e:	e9c0 1202 	strd	r1, r2, [r0, #8]
   1da72:	e9c0 0000 	strd	r0, r0, [r0]
   1da76:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1da7a:	2000      	movs	r0, #0
   1da7c:	4770      	bx	lr
		return -EINVAL;
   1da7e:	f06f 0015 	mvn.w	r0, #21
}
   1da82:	4770      	bx	lr

0001da84 <notify_queue_locked>:
	if (queue != NULL) {
   1da84:	b120      	cbz	r0, 1da90 <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1da86:	2200      	movs	r2, #0
   1da88:	4611      	mov	r1, r2
   1da8a:	3088      	adds	r0, #136	; 0x88
   1da8c:	f000 b9dd 	b.w	1de4a <z_sched_wake>
}
   1da90:	4770      	bx	lr

0001da92 <unschedule_locked>:
	bool ret = flag_test(flagp, bit);
   1da92:	68c3      	ldr	r3, [r0, #12]
{
   1da94:	b510      	push	{r4, lr}
	*flagp &= ~BIT(bit);
   1da96:	f023 0208 	bic.w	r2, r3, #8
	return (*flagp & BIT(bit)) != 0U;
   1da9a:	f3c3 04c0 	ubfx	r4, r3, #3, #1
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1da9e:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   1daa0:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1daa2:	d502      	bpl.n	1daaa <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   1daa4:	3010      	adds	r0, #16
   1daa6:	f000 f9ed 	bl	1de84 <z_abort_timeout>
}
   1daaa:	4620      	mov	r0, r4
   1daac:	bd10      	pop	{r4, pc}

0001daae <cancel_async_locked>:
{
   1daae:	4603      	mov	r3, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1dab0:	68c0      	ldr	r0, [r0, #12]
{
   1dab2:	b510      	push	{r4, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1dab4:	0784      	lsls	r4, r0, #30
   1dab6:	f3c0 0140 	ubfx	r1, r0, #1, #1
   1daba:	d416      	bmi.n	1daea <cancel_async_locked+0x3c>
	*flagp &= ~BIT(bit);
   1dabc:	f020 0404 	bic.w	r4, r0, #4
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   1dac0:	0740      	lsls	r0, r0, #29
		queue_remove_locked(work->queue, work);
   1dac2:	689a      	ldr	r2, [r3, #8]
	*flagp &= ~BIT(bit);
   1dac4:	60dc      	str	r4, [r3, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   1dac6:	d510      	bpl.n	1daea <cancel_async_locked+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1dac8:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
   1dacc:	b168      	cbz	r0, 1daea <cancel_async_locked+0x3c>
   1dace:	4283      	cmp	r3, r0
   1dad0:	d11d      	bne.n	1db0e <cancel_async_locked+0x60>
Z_GENLIST_REMOVE(slist, snode)
   1dad2:	6818      	ldr	r0, [r3, #0]
   1dad4:	b999      	cbnz	r1, 1dafe <cancel_async_locked+0x50>
   1dad6:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	list->head = node;
   1dada:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   1dade:	428b      	cmp	r3, r1
   1dae0:	d101      	bne.n	1dae6 <cancel_async_locked+0x38>
	list->tail = node;
   1dae2:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
	parent->next = child;
   1dae6:	2200      	movs	r2, #0
   1dae8:	601a      	str	r2, [r3, #0]
	return flags_get(&work->flags) & K_WORK_MASK;
   1daea:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
   1daec:	f012 000f 	ands.w	r0, r2, #15
	*flagp |= BIT(bit);
   1daf0:	bf1e      	ittt	ne
   1daf2:	f042 0202 	orrne.w	r2, r2, #2
   1daf6:	60da      	strne	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   1daf8:	f002 000f 	andne.w	r0, r2, #15
}
   1dafc:	bd10      	pop	{r4, pc}
   1dafe:	6008      	str	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1db00:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
   1db04:	4283      	cmp	r3, r0
	list->tail = node;
   1db06:	bf08      	it	eq
   1db08:	f8c2 1084 	streq.w	r1, [r2, #132]	; 0x84
}
   1db0c:	e7eb      	b.n	1dae6 <cancel_async_locked+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1db0e:	4601      	mov	r1, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1db10:	6800      	ldr	r0, [r0, #0]
   1db12:	e7db      	b.n	1dacc <cancel_async_locked+0x1e>

0001db14 <work_timeout>:
{
   1db14:	b513      	push	{r0, r1, r4, lr}
   1db16:	f04f 0320 	mov.w	r3, #32
   1db1a:	f3ef 8411 	mrs	r4, BASEPRI
   1db1e:	f383 8811 	msr	BASEPRI, r3
   1db22:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   1db26:	2300      	movs	r3, #0
   1db28:	9301      	str	r3, [sp, #4]
	bool ret = flag_test(flagp, bit);
   1db2a:	f850 3c04 	ldr.w	r3, [r0, #-4]
	*flagp &= ~BIT(bit);
   1db2e:	f023 0208 	bic.w	r2, r3, #8
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1db32:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   1db34:	f840 2c04 	str.w	r2, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1db38:	d505      	bpl.n	1db46 <work_timeout+0x32>
		queue = dw->queue;
   1db3a:	6983      	ldr	r3, [r0, #24]
   1db3c:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   1db3e:	a901      	add	r1, sp, #4
   1db40:	3810      	subs	r0, #16
   1db42:	f7f9 fd69 	bl	17618 <submit_to_queue_locked>
	__asm__ volatile(
   1db46:	f384 8811 	msr	BASEPRI, r4
   1db4a:	f3bf 8f6f 	isb	sy
}
   1db4e:	b002      	add	sp, #8
   1db50:	bd10      	pop	{r4, pc}

0001db52 <k_work_init>:
{
   1db52:	b538      	push	{r3, r4, r5, lr}
   1db54:	4604      	mov	r4, r0
   1db56:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1db58:	2210      	movs	r2, #16
   1db5a:	2100      	movs	r1, #0
   1db5c:	f7fc f84d 	bl	19bfa <memset>
   1db60:	6065      	str	r5, [r4, #4]
}
   1db62:	bd38      	pop	{r3, r4, r5, pc}

0001db64 <k_work_submit_to_queue>:
{
   1db64:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1db66:	9001      	str	r0, [sp, #4]
   1db68:	4608      	mov	r0, r1
	__asm__ volatile(
   1db6a:	f04f 0320 	mov.w	r3, #32
   1db6e:	f3ef 8511 	mrs	r5, BASEPRI
   1db72:	f383 8811 	msr	BASEPRI, r3
   1db76:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   1db7a:	a901      	add	r1, sp, #4
   1db7c:	f7f9 fd4c 	bl	17618 <submit_to_queue_locked>
   1db80:	4604      	mov	r4, r0
	__asm__ volatile(
   1db82:	f385 8811 	msr	BASEPRI, r5
   1db86:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   1db8a:	2800      	cmp	r0, #0
   1db8c:	dd04      	ble.n	1db98 <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   1db8e:	f7fa f947 	bl	17e20 <z_impl_k_is_preempt_thread>
   1db92:	b108      	cbz	r0, 1db98 <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   1db94:	f7fa f8ca 	bl	17d2c <z_impl_k_yield>
}
   1db98:	4620      	mov	r0, r4
   1db9a:	b003      	add	sp, #12
   1db9c:	bd30      	pop	{r4, r5, pc}

0001db9e <k_work_init_delayable>:
{
   1db9e:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   1dba0:	2230      	movs	r2, #48	; 0x30
{
   1dba2:	4604      	mov	r4, r0
   1dba4:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   1dba6:	2100      	movs	r1, #0
   1dba8:	f7fc f827 	bl	19bfa <memset>
   1dbac:	f44f 7380 	mov.w	r3, #256	; 0x100
   1dbb0:	6065      	str	r5, [r4, #4]
   1dbb2:	60e3      	str	r3, [r4, #12]
}
   1dbb4:	bd38      	pop	{r3, r4, r5, pc}

0001dbb6 <k_work_delayable_busy_get>:
	__asm__ volatile(
   1dbb6:	f04f 0220 	mov.w	r2, #32
   1dbba:	f3ef 8311 	mrs	r3, BASEPRI
   1dbbe:	f382 8811 	msr	BASEPRI, r2
   1dbc2:	f3bf 8f6f 	isb	sy
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1dbc6:	f3bf 8f5b 	dmb	ish
   1dbca:	68c0      	ldr	r0, [r0, #12]
   1dbcc:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
   1dbd0:	f383 8811 	msr	BASEPRI, r3
   1dbd4:	f3bf 8f6f 	isb	sy
}
   1dbd8:	f000 000f 	and.w	r0, r0, #15
   1dbdc:	4770      	bx	lr

0001dbde <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   1dbde:	b538      	push	{r3, r4, r5, lr}
   1dbe0:	4604      	mov	r4, r0
	__asm__ volatile(
   1dbe2:	f04f 0320 	mov.w	r3, #32
   1dbe6:	f3ef 8511 	mrs	r5, BASEPRI
   1dbea:	f383 8811 	msr	BASEPRI, r3
   1dbee:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   1dbf2:	f7ff ff4e 	bl	1da92 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1dbf6:	4620      	mov	r0, r4
   1dbf8:	f7ff ff59 	bl	1daae <cancel_async_locked>
	__asm__ volatile(
   1dbfc:	f385 8811 	msr	BASEPRI, r5
   1dc00:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   1dc04:	bd38      	pop	{r3, r4, r5, pc}

0001dc06 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   1dc06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dc08:	4604      	mov	r4, r0
   1dc0a:	460d      	mov	r5, r1
	__asm__ volatile(
   1dc0c:	f04f 0320 	mov.w	r3, #32
   1dc10:	f3ef 8711 	mrs	r7, BASEPRI
   1dc14:	f383 8811 	msr	BASEPRI, r3
   1dc18:	f3bf 8f6f 	isb	sy
   1dc1c:	f3bf 8f5b 	dmb	ish
   1dc20:	68c3      	ldr	r3, [r0, #12]
   1dc22:	f3bf 8f5b 	dmb	ish
	return atomic_get(&dwork->work.flags) & K_WORK_MASK;
   1dc26:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   1dc2a:	2b00      	cmp	r3, #0
   1dc2c:	bf14      	ite	ne
   1dc2e:	2601      	movne	r6, #1
   1dc30:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   1dc32:	d009      	beq.n	1dc48 <k_work_cancel_delayable_sync+0x42>
	(void)unschedule_locked(dwork);
   1dc34:	f7ff ff2d 	bl	1da92 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1dc38:	4620      	mov	r0, r4
   1dc3a:	f7ff ff38 	bl	1daae <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   1dc3e:	4629      	mov	r1, r5
   1dc40:	4620      	mov	r0, r4
   1dc42:	f7f9 fccb 	bl	175dc <cancel_sync_locked>
   1dc46:	4603      	mov	r3, r0
	__asm__ volatile(
   1dc48:	f387 8811 	msr	BASEPRI, r7
   1dc4c:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   1dc50:	b13b      	cbz	r3, 1dc62 <k_work_cancel_delayable_sync+0x5c>
	return z_impl_k_sem_take(sem, timeout);
   1dc52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1dc56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1dc5a:	f105 0008 	add.w	r0, r5, #8
   1dc5e:	f7f9 fbdb 	bl	17418 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   1dc62:	4630      	mov	r0, r6
   1dc64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001dc66 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   1dc66:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1dc6a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1dc6c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1dc6e:	2300      	movs	r3, #0
	node->prev = NULL;
   1dc70:	e9c0 3300 	strd	r3, r3, [r0]
}
   1dc74:	4770      	bx	lr

0001dc76 <unpend_thread_no_timeout>:
{
   1dc76:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   1dc78:	f7ff fff5 	bl	1dc66 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1dc7c:	7b43      	ldrb	r3, [r0, #13]
   1dc7e:	f023 0302 	bic.w	r3, r3, #2
   1dc82:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   1dc84:	2300      	movs	r3, #0
   1dc86:	6083      	str	r3, [r0, #8]
}
   1dc88:	bd08      	pop	{r3, pc}

0001dc8a <z_unpend_thread_no_timeout>:
{
   1dc8a:	b508      	push	{r3, lr}
	__asm__ volatile(
   1dc8c:	f04f 0320 	mov.w	r3, #32
   1dc90:	f3ef 8111 	mrs	r1, BASEPRI
   1dc94:	f383 8811 	msr	BASEPRI, r3
   1dc98:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1dc9c:	f7ff ffeb 	bl	1dc76 <unpend_thread_no_timeout>
	__asm__ volatile(
   1dca0:	f381 8811 	msr	BASEPRI, r1
   1dca4:	f3bf 8f6f 	isb	sy
}
   1dca8:	bd08      	pop	{r3, pc}

0001dcaa <z_unpend_thread>:
{
   1dcaa:	b510      	push	{r4, lr}
	__asm__ volatile(
   1dcac:	f04f 0320 	mov.w	r3, #32
   1dcb0:	f3ef 8411 	mrs	r4, BASEPRI
   1dcb4:	f383 8811 	msr	BASEPRI, r3
   1dcb8:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1dcbc:	f7ff ffdb 	bl	1dc76 <unpend_thread_no_timeout>
	__asm__ volatile(
   1dcc0:	f384 8811 	msr	BASEPRI, r4
   1dcc4:	f3bf 8f6f 	isb	sy
}
   1dcc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1dccc:	3018      	adds	r0, #24
   1dcce:	f000 b8d9 	b.w	1de84 <z_abort_timeout>

0001dcd2 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1dcd2:	4603      	mov	r3, r0
   1dcd4:	b920      	cbnz	r0, 1dce0 <z_reschedule_irqlock+0xe>
   1dcd6:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   1dcda:	b90a      	cbnz	r2, 1dce0 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   1dcdc:	f7e5 bc3e 	b.w	355c <arch_swap>
   1dce0:	f383 8811 	msr	BASEPRI, r3
   1dce4:	f3bf 8f6f 	isb	sy
}
   1dce8:	4770      	bx	lr

0001dcea <z_reschedule_unlocked>:
	__asm__ volatile(
   1dcea:	f04f 0320 	mov.w	r3, #32
   1dcee:	f3ef 8011 	mrs	r0, BASEPRI
   1dcf2:	f383 8811 	msr	BASEPRI, r3
   1dcf6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1dcfa:	f7ff bfea 	b.w	1dcd2 <z_reschedule_irqlock>

0001dcfe <z_priq_dumb_best>:
{
   1dcfe:	4603      	mov	r3, r0
	return list->head == list;
   1dd00:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1dd02:	4283      	cmp	r3, r0
   1dd04:	d003      	beq.n	1dd0e <z_priq_dumb_best+0x10>
	if (n != NULL) {
   1dd06:	2800      	cmp	r0, #0
   1dd08:	bf38      	it	cc
   1dd0a:	2000      	movcc	r0, #0
   1dd0c:	4770      	bx	lr
	struct k_thread *thread = NULL;
   1dd0e:	2000      	movs	r0, #0
}
   1dd10:	4770      	bx	lr

0001dd12 <add_to_waitq_locked>:
{
   1dd12:	b538      	push	{r3, r4, r5, lr}
   1dd14:	4604      	mov	r4, r0
   1dd16:	460d      	mov	r5, r1
	unready_thread(thread);
   1dd18:	f7f9 fe00 	bl	1791c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1dd1c:	7b63      	ldrb	r3, [r4, #13]
   1dd1e:	f043 0302 	orr.w	r3, r3, #2
   1dd22:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1dd24:	b1b5      	cbz	r5, 1dd54 <add_to_waitq_locked+0x42>
	return list->head == list;
   1dd26:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   1dd28:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1dd2a:	429d      	cmp	r5, r3
   1dd2c:	bf08      	it	eq
   1dd2e:	2300      	moveq	r3, #0
   1dd30:	2b00      	cmp	r3, #0
   1dd32:	bf38      	it	cc
   1dd34:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1dd36:	b19b      	cbz	r3, 1dd60 <add_to_waitq_locked+0x4e>
	int32_t b1 = thread_1->base.prio;
   1dd38:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1dd3c:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   1dd40:	4291      	cmp	r1, r2
   1dd42:	d008      	beq.n	1dd56 <add_to_waitq_locked+0x44>
		return b2 - b1;
   1dd44:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   1dd46:	2a00      	cmp	r2, #0
   1dd48:	dd05      	ble.n	1dd56 <add_to_waitq_locked+0x44>
	sys_dnode_t *const prev = successor->prev;
   1dd4a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1dd4c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1dd50:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1dd52:	605c      	str	r4, [r3, #4]
}
   1dd54:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   1dd56:	686a      	ldr	r2, [r5, #4]
   1dd58:	4293      	cmp	r3, r2
   1dd5a:	d001      	beq.n	1dd60 <add_to_waitq_locked+0x4e>
   1dd5c:	681b      	ldr	r3, [r3, #0]
   1dd5e:	e7ea      	b.n	1dd36 <add_to_waitq_locked+0x24>
	sys_dnode_t *const tail = list->tail;
   1dd60:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   1dd62:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   1dd66:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1dd68:	606c      	str	r4, [r5, #4]
   1dd6a:	e7f3      	b.n	1dd54 <add_to_waitq_locked+0x42>

0001dd6c <z_ready_thread>:
{
   1dd6c:	b510      	push	{r4, lr}
   1dd6e:	f04f 0320 	mov.w	r3, #32
   1dd72:	f3ef 8411 	mrs	r4, BASEPRI
   1dd76:	f383 8811 	msr	BASEPRI, r3
   1dd7a:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   1dd7e:	f7f9 ff27 	bl	17bd0 <ready_thread>
	__asm__ volatile(
   1dd82:	f384 8811 	msr	BASEPRI, r4
   1dd86:	f3bf 8f6f 	isb	sy
}
   1dd8a:	bd10      	pop	{r4, pc}

0001dd8c <z_thread_timeout>:
{
   1dd8c:	b510      	push	{r4, lr}
   1dd8e:	4601      	mov	r1, r0
	__asm__ volatile(
   1dd90:	f04f 0320 	mov.w	r3, #32
   1dd94:	f3ef 8411 	mrs	r4, BASEPRI
   1dd98:	f383 8811 	msr	BASEPRI, r3
   1dd9c:	f3bf 8f6f 	isb	sy
		if (!killed) {
   1dda0:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   1dda4:	f013 0f28 	tst.w	r3, #40	; 0x28
   1dda8:	d10d      	bne.n	1ddc6 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   1ddaa:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   1ddae:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   1ddb0:	b10b      	cbz	r3, 1ddb6 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   1ddb2:	f7ff ff60 	bl	1dc76 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1ddb6:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   1ddba:	f023 0314 	bic.w	r3, r3, #20
   1ddbe:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   1ddc2:	f7f9 ff05 	bl	17bd0 <ready_thread>
	__asm__ volatile(
   1ddc6:	f384 8811 	msr	BASEPRI, r4
   1ddca:	f3bf 8f6f 	isb	sy
}
   1ddce:	bd10      	pop	{r4, pc}

0001ddd0 <z_unpend1_no_timeout>:
{
   1ddd0:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ddd2:	f04f 0320 	mov.w	r3, #32
   1ddd6:	f3ef 8411 	mrs	r4, BASEPRI
   1ddda:	f383 8811 	msr	BASEPRI, r3
   1ddde:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   1dde2:	f7ff ff8c 	bl	1dcfe <z_priq_dumb_best>
		if (thread != NULL) {
   1dde6:	4601      	mov	r1, r0
   1dde8:	b108      	cbz	r0, 1ddee <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   1ddea:	f7ff ff44 	bl	1dc76 <unpend_thread_no_timeout>
	__asm__ volatile(
   1ddee:	f384 8811 	msr	BASEPRI, r4
   1ddf2:	f3bf 8f6f 	isb	sy
}
   1ddf6:	4608      	mov	r0, r1
   1ddf8:	bd10      	pop	{r4, pc}

0001ddfa <z_unpend_first_thread>:
{
   1ddfa:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1ddfc:	f04f 0320 	mov.w	r3, #32
   1de00:	f3ef 8511 	mrs	r5, BASEPRI
   1de04:	f383 8811 	msr	BASEPRI, r3
   1de08:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   1de0c:	f7ff ff77 	bl	1dcfe <z_priq_dumb_best>
		if (thread != NULL) {
   1de10:	4604      	mov	r4, r0
   1de12:	b120      	cbz	r0, 1de1e <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   1de14:	f7ff ff2f 	bl	1dc76 <unpend_thread_no_timeout>
   1de18:	3018      	adds	r0, #24
   1de1a:	f000 f833 	bl	1de84 <z_abort_timeout>
	__asm__ volatile(
   1de1e:	f385 8811 	msr	BASEPRI, r5
   1de22:	f3bf 8f6f 	isb	sy
}
   1de26:	4620      	mov	r0, r4
   1de28:	bd38      	pop	{r3, r4, r5, pc}

0001de2a <z_unpend_all>:
{
   1de2a:	b538      	push	{r3, r4, r5, lr}
   1de2c:	4605      	mov	r5, r0
	int need_sched = 0;
   1de2e:	2000      	movs	r0, #0
	return list->head == list;
   1de30:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1de32:	42a5      	cmp	r5, r4
   1de34:	d000      	beq.n	1de38 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1de36:	b904      	cbnz	r4, 1de3a <z_unpend_all+0x10>
}
   1de38:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   1de3a:	4620      	mov	r0, r4
   1de3c:	f7ff ff35 	bl	1dcaa <z_unpend_thread>
		z_ready_thread(thread);
   1de40:	4620      	mov	r0, r4
   1de42:	f7ff ff93 	bl	1dd6c <z_ready_thread>
		need_sched = 1;
   1de46:	2001      	movs	r0, #1
   1de48:	e7f2      	b.n	1de30 <z_unpend_all+0x6>

0001de4a <z_sched_wake>:
{
   1de4a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1de4c:	f04f 0320 	mov.w	r3, #32
   1de50:	f3ef 8511 	mrs	r5, BASEPRI
   1de54:	f383 8811 	msr	BASEPRI, r3
   1de58:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   1de5c:	f7ff ff4f 	bl	1dcfe <z_priq_dumb_best>
		if (thread != NULL) {
   1de60:	4604      	mov	r4, r0
   1de62:	b150      	cbz	r0, 1de7a <z_sched_wake+0x30>
   1de64:	67c1      	str	r1, [r0, #124]	; 0x7c
   1de66:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   1de68:	f7ff ff05 	bl	1dc76 <unpend_thread_no_timeout>
   1de6c:	3018      	adds	r0, #24
   1de6e:	f000 f809 	bl	1de84 <z_abort_timeout>
			ready_thread(thread);
   1de72:	4620      	mov	r0, r4
   1de74:	f7f9 feac 	bl	17bd0 <ready_thread>
			ret = true;
   1de78:	2001      	movs	r0, #1
	__asm__ volatile(
   1de7a:	f385 8811 	msr	BASEPRI, r5
   1de7e:	f3bf 8f6f 	isb	sy
}
   1de82:	bd38      	pop	{r3, r4, r5, pc}

0001de84 <z_abort_timeout>:
{
   1de84:	b510      	push	{r4, lr}
	__asm__ volatile(
   1de86:	f04f 0220 	mov.w	r2, #32
   1de8a:	f3ef 8411 	mrs	r4, BASEPRI
   1de8e:	f382 8811 	msr	BASEPRI, r2
   1de92:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1de96:	6803      	ldr	r3, [r0, #0]
   1de98:	b13b      	cbz	r3, 1deaa <z_abort_timeout+0x26>
			remove_timeout(to);
   1de9a:	f7fa f859 	bl	17f50 <remove_timeout>
			ret = 0;
   1de9e:	2000      	movs	r0, #0
	__asm__ volatile(
   1dea0:	f384 8811 	msr	BASEPRI, r4
   1dea4:	f3bf 8f6f 	isb	sy
}
   1dea8:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1deaa:	f06f 0015 	mvn.w	r0, #21
   1deae:	e7f7      	b.n	1dea0 <z_abort_timeout+0x1c>

0001deb0 <z_timeout_remaining>:
{
   1deb0:	b510      	push	{r4, lr}
	__asm__ volatile(
   1deb2:	f04f 0320 	mov.w	r3, #32
   1deb6:	f3ef 8411 	mrs	r4, BASEPRI
   1deba:	f383 8811 	msr	BASEPRI, r3
   1debe:	f3bf 8f6f 	isb	sy
		ticks = timeout_rem(timeout);
   1dec2:	f7fa f88b 	bl	17fdc <timeout_rem>
	__asm__ volatile(
   1dec6:	f384 8811 	msr	BASEPRI, r4
   1deca:	f3bf 8f6f 	isb	sy
}
   1dece:	bd10      	pop	{r4, pc}

0001ded0 <z_get_next_timeout_expiry>:
{
   1ded0:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ded2:	f04f 0320 	mov.w	r3, #32
   1ded6:	f3ef 8411 	mrs	r4, BASEPRI
   1deda:	f383 8811 	msr	BASEPRI, r3
   1dede:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   1dee2:	f7fa f84f 	bl	17f84 <next_timeout>
	__asm__ volatile(
   1dee6:	f384 8811 	msr	BASEPRI, r4
   1deea:	f3bf 8f6f 	isb	sy
}
   1deee:	bd10      	pop	{r4, pc}

0001def0 <z_set_timeout_expiry>:
{
   1def0:	b570      	push	{r4, r5, r6, lr}
   1def2:	4604      	mov	r4, r0
   1def4:	460d      	mov	r5, r1
	__asm__ volatile(
   1def6:	f04f 0320 	mov.w	r3, #32
   1defa:	f3ef 8611 	mrs	r6, BASEPRI
   1defe:	f383 8811 	msr	BASEPRI, r3
   1df02:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   1df06:	f7fa f83d 	bl	17f84 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1df0a:	2801      	cmp	r0, #1
   1df0c:	dd05      	ble.n	1df1a <z_set_timeout_expiry+0x2a>
   1df0e:	42a0      	cmp	r0, r4
   1df10:	db03      	blt.n	1df1a <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   1df12:	4629      	mov	r1, r5
   1df14:	4620      	mov	r0, r4
   1df16:	f7e5 fa0b 	bl	3330 <sys_clock_set_timeout>
	__asm__ volatile(
   1df1a:	f386 8811 	msr	BASEPRI, r6
   1df1e:	f3bf 8f6f 	isb	sy
}
   1df22:	bd70      	pop	{r4, r5, r6, pc}

0001df24 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   1df24:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   1df26:	f7fa f973 	bl	18210 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1df2a:	bd08      	pop	{r3, pc}

0001df2c <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   1df2c:	f7fa b970 	b.w	18210 <sys_clock_tick_get>

0001df30 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   1df30:	b108      	cbz	r0, 1df36 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   1df32:	f7e6 b871 	b.w	4018 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   1df36:	4770      	bx	lr

0001df38 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   1df38:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1df3a:	1c4b      	adds	r3, r1, #1
   1df3c:	bf08      	it	eq
   1df3e:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1df42:	4604      	mov	r4, r0
   1df44:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1df46:	d013      	beq.n	1df70 <sys_clock_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1df48:	ea54 0105 	orrs.w	r1, r4, r5
   1df4c:	d103      	bne.n	1df56 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   1df4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   1df52:	f7fa b95d 	b.w	18210 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1df56:	f06f 0101 	mvn.w	r1, #1
   1df5a:	1a0a      	subs	r2, r1, r0
   1df5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1df60:	eb61 0305 	sbc.w	r3, r1, r5
   1df64:	2a00      	cmp	r2, #0
   1df66:	f173 0100 	sbcs.w	r1, r3, #0
   1df6a:	db02      	blt.n	1df72 <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   1df6c:	4610      	mov	r0, r2
   1df6e:	4619      	mov	r1, r3
}
   1df70:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get() + MAX(1, dt);
   1df72:	f7fa f94d 	bl	18210 <sys_clock_tick_get>
   1df76:	2c01      	cmp	r4, #1
   1df78:	f175 0300 	sbcs.w	r3, r5, #0
   1df7c:	bfbc      	itt	lt
   1df7e:	2401      	movlt	r4, #1
   1df80:	2500      	movlt	r5, #0
   1df82:	1820      	adds	r0, r4, r0
   1df84:	eb45 0101 	adc.w	r1, r5, r1
   1df88:	e7f2      	b.n	1df70 <sys_clock_timeout_end_calc+0x38>

0001df8a <k_timer_init>:
	timer->status = 0U;
   1df8a:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   1df8c:	e9c0 1208 	strd	r1, r2, [r0, #32]
   1df90:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   1df94:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   1df98:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   1df9c:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   1df9e:	6343      	str	r3, [r0, #52]	; 0x34
}
   1dfa0:	4770      	bx	lr

0001dfa2 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   1dfa2:	b510      	push	{r4, lr}
   1dfa4:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   1dfa6:	f7ff ff6d 	bl	1de84 <z_abort_timeout>

	if (inactive) {
   1dfaa:	b9b0      	cbnz	r0, 1dfda <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   1dfac:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1dfae:	b10b      	cbz	r3, 1dfb4 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   1dfb0:	4620      	mov	r0, r4
   1dfb2:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   1dfb4:	f104 0018 	add.w	r0, r4, #24
   1dfb8:	f7ff ff0a 	bl	1ddd0 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   1dfbc:	b168      	cbz	r0, 1dfda <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   1dfbe:	f7ff fed5 	bl	1dd6c <z_ready_thread>
	__asm__ volatile(
   1dfc2:	f04f 0320 	mov.w	r3, #32
   1dfc6:	f3ef 8011 	mrs	r0, BASEPRI
   1dfca:	f383 8811 	msr	BASEPRI, r3
   1dfce:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   1dfd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   1dfd6:	f7ff be7c 	b.w	1dcd2 <z_reschedule_irqlock>
   1dfda:	bd10      	pop	{r4, pc}

0001dfdc <signal_poll_event>:
{
   1dfdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   1dfe0:	6884      	ldr	r4, [r0, #8]
{
   1dfe2:	4605      	mov	r5, r0
   1dfe4:	460e      	mov	r6, r1
	if (poller != NULL) {
   1dfe6:	b144      	cbz	r4, 1dffa <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   1dfe8:	7863      	ldrb	r3, [r4, #1]
   1dfea:	2b01      	cmp	r3, #1
   1dfec:	d138      	bne.n	1e060 <signal_poll_event+0x84>
	if (!z_is_thread_pending(thread)) {
   1dfee:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1dff2:	f013 0302 	ands.w	r3, r3, #2
   1dff6:	d10a      	bne.n	1e00e <signal_poll_event+0x32>
		poller->is_polling = false;
   1dff8:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   1dffa:	68eb      	ldr	r3, [r5, #12]
   1dffc:	f3c3 3145 	ubfx	r1, r3, #13, #6
   1e000:	430e      	orrs	r6, r1
	event->poller = NULL;
   1e002:	2000      	movs	r0, #0
	event->state |= state;
   1e004:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   1e008:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   1e00a:	60eb      	str	r3, [r5, #12]
	return retcode;
   1e00c:	e00d      	b.n	1e02a <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
   1e00e:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   1e012:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e016:	f06f 0001 	mvn.w	r0, #1
   1e01a:	428b      	cmp	r3, r1
   1e01c:	bf08      	it	eq
   1e01e:	4282      	cmpeq	r2, r0
   1e020:	d105      	bne.n	1e02e <signal_poll_event+0x52>
		poller->is_polling = false;
   1e022:	2300      	movs	r3, #0
   1e024:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   1e026:	f06f 000a 	mvn.w	r0, #10
}
   1e02a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1e02e:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   1e032:	4640      	mov	r0, r8
   1e034:	f7ff fe39 	bl	1dcaa <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1e038:	2e08      	cmp	r6, #8
   1e03a:	bf0c      	ite	eq
   1e03c:	f06f 0303 	mvneq.w	r3, #3
   1e040:	2300      	movne	r3, #0
   1e042:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1e044:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1e048:	06db      	lsls	r3, r3, #27
   1e04a:	d102      	bne.n	1e052 <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
   1e04c:	f854 7c48 	ldr.w	r7, [r4, #-72]
   1e050:	b10f      	cbz	r7, 1e056 <signal_poll_event+0x7a>
		poller->is_polling = false;
   1e052:	2300      	movs	r3, #0
   1e054:	e7d0      	b.n	1dff8 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   1e056:	4640      	mov	r0, r8
   1e058:	f7ff fe88 	bl	1dd6c <z_ready_thread>
		poller->is_polling = false;
   1e05c:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   1e05e:	e7cc      	b.n	1dffa <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   1e060:	2b02      	cmp	r3, #2
   1e062:	d1f6      	bne.n	1e052 <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1e064:	7823      	ldrb	r3, [r4, #0]
   1e066:	2b00      	cmp	r3, #0
   1e068:	d0c7      	beq.n	1dffa <signal_poll_event+0x1e>
   1e06a:	f854 7c04 	ldr.w	r7, [r4, #-4]
   1e06e:	2f00      	cmp	r7, #0
   1e070:	d0f4      	beq.n	1e05c <signal_poll_event+0x80>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   1e072:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   1e076:	f1a4 0914 	sub.w	r9, r4, #20
   1e07a:	f104 0014 	add.w	r0, r4, #20
   1e07e:	f7ff ff01 	bl	1de84 <z_abort_timeout>
		twork->poll_result = 0;
   1e082:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   1e086:	4649      	mov	r1, r9
   1e088:	4638      	mov	r0, r7
   1e08a:	f7ff fd6b 	bl	1db64 <k_work_submit_to_queue>
		poller->is_polling = false;
   1e08e:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   1e092:	e7b2      	b.n	1dffa <signal_poll_event+0x1e>

0001e094 <z_handle_obj_poll_events>:
{
   1e094:	4603      	mov	r3, r0
	return list->head == list;
   1e096:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1e098:	4283      	cmp	r3, r0
   1e09a:	d008      	beq.n	1e0ae <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   1e09c:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1e0a0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1e0a2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1e0a4:	2300      	movs	r3, #0
	node->prev = NULL;
   1e0a6:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   1e0aa:	f7ff bf97 	b.w	1dfdc <signal_poll_event>
}
   1e0ae:	4770      	bx	lr

0001e0b0 <k_free>:
	if (ptr != NULL) {
   1e0b0:	b120      	cbz	r0, 1e0bc <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   1e0b2:	1f01      	subs	r1, r0, #4
   1e0b4:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1e0b8:	f7ff bb72 	b.w	1d7a0 <k_heap_free>
}
   1e0bc:	4770      	bx	lr
